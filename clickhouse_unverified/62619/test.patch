diff --git a/tests/queries/0_stateless/03035_internal_functions_direct_call.reference b/tests/queries/0_stateless/03035_internal_functions_direct_call.reference
index 4dc02ffa71d4..d45b44f6052c 100644
--- a/tests/queries/0_stateless/03035_internal_functions_direct_call.reference
+++ b/tests/queries/0_stateless/03035_internal_functions_direct_call.reference
@@ -1,5 +1,4 @@
 aaa
-(1,1)	(1,1)
 1
 a1	1
 1
diff --git a/tests/queries/0_stateless/03035_internal_functions_direct_call.sql b/tests/queries/0_stateless/03035_internal_functions_direct_call.sql
index d90c4dceab5d..951e0733dbb8 100644
--- a/tests/queries/0_stateless/03035_internal_functions_direct_call.sql
+++ b/tests/queries/0_stateless/03035_internal_functions_direct_call.sql
@@ -16,8 +16,6 @@ SELECT __getScalar(); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }
 SELECT __getScalar(1); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }
 SELECT __getScalar(materialize('1')); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }
 
-WITH ( SELECT (1,1) ) as a SELECT materialize(a), __getScalar('17789833925953107877_7493841889429261611') SETTINGS allow_experimental_analyzer = 1;
-
 SELECT __scalarSubqueryResult('1');
 SELECT 'a' || __scalarSubqueryResult(a), materialize('1') as a;
 SELECT __scalarSubqueryResult(a, a), materialize('1') as a; -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }
diff --git a/tests/queries/0_stateless/03095_window_functions_qualify.reference b/tests/queries/0_stateless/03095_window_functions_qualify.reference
new file mode 100644
index 000000000000..c74a212428ba
--- /dev/null
+++ b/tests/queries/0_stateless/03095_window_functions_qualify.reference
@@ -0,0 +1,74 @@
+0	4
+3	4
+6	4
+9	4
+--
+0
+3
+6
+9
+--
+6
+7
+8
+9
+--
+0	5
+--
+0	5
+--
+0	4
+3	4
+6	4
+9	4
+--
+Expression (Project names)
+Header: number UInt64
+        partition_count UInt64
+Actions: INPUT : 0 -> __table1.number UInt64 : 0
+         INPUT : 1 -> count() OVER (PARTITION BY modulo(__table1.number, 3_UInt8)) UInt64 : 1
+         ALIAS __table1.number :: 0 -> number UInt64 : 2
+         ALIAS count() OVER (PARTITION BY modulo(__table1.number, 3_UInt8)) :: 1 -> partition_count UInt64 : 0
+Positions: 2 0
+  Sorting (Sorting for ORDER BY)
+  Header: __table1.number UInt64
+          count() OVER (PARTITION BY modulo(__table1.number, 3_UInt8)) UInt64
+  Sort description: __table1.number ASC
+    Expression ((Before ORDER BY + Projection))
+    Header: __table1.number UInt64
+            count() OVER (PARTITION BY modulo(__table1.number, 3_UInt8)) UInt64
+    Actions: INPUT :: 0 -> __table1.number UInt64 : 0
+             INPUT :: 1 -> count() OVER (PARTITION BY modulo(__table1.number, 3_UInt8)) UInt64 : 1
+    Positions: 0 1
+      Filter (QUALIFY)
+      Header: __table1.number UInt64
+              count() OVER (PARTITION BY modulo(__table1.number, 3_UInt8)) UInt64
+      Filter column: equals(count() OVER (PARTITION BY modulo(__table1.number, 3_UInt8)), 4_UInt8) (removed)
+      Actions: INPUT :: 0 -> __table1.number UInt64 : 0
+               INPUT :: 1 -> count() OVER (PARTITION BY modulo(__table1.number, 3_UInt8)) UInt64 : 1
+               INPUT : 2 -> count() OVER (PARTITION BY modulo(__table1.number, 3_UInt8)) UInt64 : 2
+               COLUMN Const(UInt8) -> 4_UInt8 UInt8 : 3
+               FUNCTION equals(count() OVER (PARTITION BY modulo(__table1.number, 3_UInt8)) :: 2, 4_UInt8 :: 3) -> equals(count() OVER (PARTITION BY modulo(__table1.number, 3_UInt8)), 4_UInt8) UInt8 : 4
+      Positions: 4 0 1
+        Window (Window step for window \'PARTITION BY modulo(__table1.number, 3_UInt8)\')
+        Header: modulo(__table1.number, 3_UInt8) UInt8
+                __table1.number UInt64
+                count() OVER (PARTITION BY modulo(__table1.number, 3_UInt8)) UInt64
+                count() OVER (PARTITION BY modulo(__table1.number, 3_UInt8)) UInt64
+        Window: (PARTITION BY modulo(__table1.number, 3_UInt8))
+        Functions: count() OVER (PARTITION BY modulo(__table1.number, 3_UInt8))
+                   count() OVER (PARTITION BY modulo(__table1.number, 3_UInt8))
+          Sorting (Sorting for window \'PARTITION BY modulo(__table1.number, 3_UInt8)\')
+          Header: modulo(__table1.number, 3_UInt8) UInt8
+                  __table1.number UInt64
+          Sort description: modulo(__table1.number, 3_UInt8) ASC
+            Expression ((Before WINDOW + Change column names to column identifiers))
+            Header: modulo(__table1.number, 3_UInt8) UInt8
+                    __table1.number UInt64
+            Actions: INPUT : 0 -> number UInt64 : 0
+                     COLUMN Const(UInt8) -> 3_UInt8 UInt8 : 1
+                     ALIAS number :: 0 -> __table1.number UInt64 : 2
+                     FUNCTION modulo(__table1.number : 2, 3_UInt8 :: 1) -> modulo(__table1.number, 3_UInt8) UInt8 : 0
+            Positions: 0 2
+              ReadFromSystemNumbers
+              Header: number UInt64
diff --git a/tests/queries/0_stateless/03095_window_functions_qualify.sql b/tests/queries/0_stateless/03095_window_functions_qualify.sql
new file mode 100644
index 000000000000..35e203a2ffcf
--- /dev/null
+++ b/tests/queries/0_stateless/03095_window_functions_qualify.sql
@@ -0,0 +1,36 @@
+SET allow_experimental_analyzer = 1;
+
+SELECT number, COUNT() OVER (PARTITION BY number % 3) AS partition_count FROM numbers(10) QUALIFY partition_count = 4 ORDER BY number;
+
+SELECT '--';
+
+SELECT number FROM numbers(10) QUALIFY (COUNT() OVER (PARTITION BY number % 3) AS partition_count) = 4 ORDER BY number;
+
+SELECT '--';
+
+SELECT number FROM numbers(10) QUALIFY number > 5 ORDER BY number;
+
+SELECT '--';
+
+SELECT (number % 2) AS key, count() FROM numbers(10) GROUP BY key HAVING key = 0 QUALIFY key == 0;
+
+SELECT '--';
+
+SELECT (number % 2) AS key, count() FROM numbers(10) GROUP BY key QUALIFY key == 0;
+
+SELECT '--';
+
+SELECT number, COUNT() OVER (PARTITION BY number % 3) AS partition_count FROM numbers(10) QUALIFY COUNT() OVER (PARTITION BY number % 3) = 4 ORDER BY number;
+
+SELECT '--';
+
+EXPLAIN header = 1, actions = 1
+SELECT number, COUNT() OVER (PARTITION BY number % 3) AS partition_count FROM numbers(10) QUALIFY COUNT() OVER (PARTITION BY number % 3) = 4 ORDER BY number;
+
+SELECT number % toUInt256(2) AS key, count() FROM numbers(10) GROUP BY key WITH CUBE WITH TOTALS QUALIFY key = toNullable(toNullable(0)); -- { serverError 48 }
+
+SELECT number % 2 AS key, count(materialize(5)) IGNORE NULLS FROM numbers(10) WHERE toLowCardinality(toLowCardinality(materialize(2))) GROUP BY key WITH CUBE WITH TOTALS QUALIFY key = 0; -- { serverError 48 }
+
+SELECT 4, count(4) IGNORE NULLS, number % 2 AS key FROM numbers(10) GROUP BY key WITH ROLLUP WITH TOTALS QUALIFY key = materialize(0); -- { serverError 48 }
+
+SELECT 3, number % toLowCardinality(2) AS key, count() IGNORE NULLS FROM numbers(10) GROUP BY key WITH ROLLUP WITH TOTALS QUALIFY key = 0; -- { serverError 48 }
