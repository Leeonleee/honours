{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 84846,
  "instance_id": "ClickHouse__ClickHouse-84846",
  "issue_numbers": [
    "84731"
  ],
  "base_commit": "b3a6d835c4238b9f79aa44386857c966cbd66ecf",
  "patch": "diff --git a/programs/server/play.html b/programs/server/play.html\nindex e2329682e02c..292904e4086f 100644\n--- a/programs/server/play.html\n+++ b/programs/server/play.html\n@@ -2112,10 +2112,8 @@\n \n let lexer_module;\n async function loadLexer() {\n-    // Compiled with:\n-    // clang++ -Os -fno-exceptions -fno-rtti -D LEXER_STANDALONE_BUILD --target=wasm32 -flto -nostdlib -Wl,--no-entry -Wl,--export-all src/Parsers/Lexer.cpp -o Lexer.wasm\n-\n-    const lexer_base64 = \"\";\n+    // base64 -w0 build/src/Parsers/Lexer.wasm\n+    const lexer_base64 = \"\";\n \n     if (!lexer_module) {\n         const binary = atob(lexer_base64);\ndiff --git a/src/Parsers/CMakeLists.txt b/src/Parsers/CMakeLists.txt\nindex 25bc2ba3daa6..7fae34bed6aa 100644\n--- a/src/Parsers/CMakeLists.txt\n+++ b/src/Parsers/CMakeLists.txt\n@@ -30,3 +30,20 @@ if (LEXER_STANDALONE_BUILD)\n     target_include_directories(lexer-c PRIVATE ..)\n     target_compile_options(lexer-c PRIVATE -Os -fno-exceptions -fno-rtti -nostdlib -DLEXER_STANDALONE_BUILD)\n endif ()\n+\n+# Check that Lexer compiles to WASM. See the usage in programs/server/play.html\n+add_custom_command(\n+    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/Lexer.wasm\n+    COMMAND ${CMAKE_CXX_COMPILER}\n+    -Os -fno-exceptions -fno-rtti -DLEXER_STANDALONE_BUILD --target=wasm32 -flto -nostdlib\n+    -I${CMAKE_SOURCE_DIR}/src\n+    -Wl,--no-entry -Wl,--export-all\n+    ${CMAKE_CURRENT_SOURCE_DIR}/Lexer.cpp\n+    -o ${CMAKE_CURRENT_BINARY_DIR}/Lexer.wasm\n+    DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/Lexer.cpp\n+    COMMENT \"Building Lexer.wasm\"\n+)\n+\n+add_custom_target(lexer_wasm ALL\n+    DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/Lexer.wasm\n+)\ndiff --git a/src/Parsers/Lexer.cpp b/src/Parsers/Lexer.cpp\nindex 174221c44e17..8806ed24492c 100644\n--- a/src/Parsers/Lexer.cpp\n+++ b/src/Parsers/Lexer.cpp\n@@ -484,29 +484,37 @@ Token Lexer::nextTokenImpl()\n         default:\n             if (*pos == '$')\n             {\n-                /// Try to capture dollar sign as start of here doc\n+                /// Try to capture a dollar sign as a start of heredoc\n \n-                std::string_view token_stream(pos, end - pos);\n-                auto heredoc_name_end_position = token_stream.find('$', 1);\n-                if (heredoc_name_end_position != std::string::npos)\n+                const char * tag_end = find_first_symbols<'$'>(pos + 1, end);\n+                if (tag_end != end)\n                 {\n-                    size_t heredoc_size = heredoc_name_end_position + 1;\n-                    std::string_view heredoc = {token_stream.data(), heredoc_size}; // NOLINT\n+                    size_t heredoc_size = tag_end + 1 - pos;\n \n-                    size_t heredoc_end_position = token_stream.find(heredoc, heredoc_size);\n-                    if (heredoc_end_position != std::string::npos)\n+                    bool is_valid_name = true;\n+                    for (const char * name_pos = pos + 1; name_pos < tag_end; ++name_pos)\n                     {\n+                        if (!isWordCharASCII(*name_pos))\n+                        {\n+                            is_valid_name = false;\n+                            break;\n+                        }\n+                    }\n \n-                        pos += heredoc_end_position;\n-                        pos += heredoc_size;\n-\n-                        return Token(TokenType::HereDoc, token_begin, pos);\n+                    if (is_valid_name)\n+                    {\n+                        size_t heredoc_end_position = std::string_view{tag_end + 1, end}.find(std::string_view{pos, heredoc_size});\n+                        if (heredoc_end_position != std::string::npos)\n+                        {\n+                            pos = tag_end + 1 + heredoc_end_position + heredoc_size;\n+                            return Token(TokenType::HereDoc, token_begin, pos);\n+                        }\n                     }\n                 }\n \n                 if (((pos + 1 < end && !isWordCharASCII(pos[1])) || pos + 1 == end))\n                 {\n-                    /// Capture standalone dollar sign\n+                    /// Capture a standalone dollar sign\n                     return Token(TokenType::DollarSign, token_begin, ++pos);\n                 }\n             }\ndiff --git a/src/Parsers/LexerStandalone.h b/src/Parsers/LexerStandalone.h\nindex 76783df7ee4d..a44a751602fd 100644\n--- a/src/Parsers/LexerStandalone.h\n+++ b/src/Parsers/LexerStandalone.h\n@@ -105,22 +105,13 @@ struct string_view\n     {\n     }\n \n-    inline const char * data() const\n+    string_view(const char * begin, const char * end) : ptr(begin), size(end - begin)\n     {\n-        return ptr;\n     }\n \n-    inline size_t find(char c, size_t offset) const\n+    inline size_t find(string_view other) const\n     {\n-        for (; offset < size; ++offset)\n-            if (c == ptr[offset])\n-                return offset;\n-        return string::npos;\n-    }\n-\n-    inline size_t find(string_view other, size_t offset) const\n-    {\n-        for (; offset + other.size <= size; ++offset)\n+        for (size_t offset = 0; offset + other.size <= size; ++offset)\n         {\n             size_t other_pos = 0;\n             for (; other_pos < other.size; ++other_pos)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01948_heredoc.reference b/tests/queries/0_stateless/01948_heredoc.reference\nindex 2f40275e1d25..7e5b6119661c 100644\n--- a/tests/queries/0_stateless/01948_heredoc.reference\n+++ b/tests/queries/0_stateless/01948_heredoc.reference\n@@ -7,8 +7,5 @@ $do$ $ doc$ $doc $ $doco$\n $do$ $ doc$ $doc $ $doco$\t$do$ $ doc$ $doc $ $doco$\n \u0422\u0415\u0421\u0422\n \u8be5\u7c7b\u578b\u7684\u5f15\u64ce\n-VALUE\n-VALUE\n \\nvalue1\\nvalue2\\nvalue3\\n\n \\'\\\\xc3\\\\x28\\'\n-\\'\\\\xc3\\\\x28\\'\ndiff --git a/tests/queries/0_stateless/01948_heredoc.sql b/tests/queries/0_stateless/01948_heredoc.sql\nindex 4a4ced004e34..9abc0025cf52 100644\n--- a/tests/queries/0_stateless/01948_heredoc.sql\n+++ b/tests/queries/0_stateless/01948_heredoc.sql\n@@ -9,9 +9,6 @@ SELECT $doc$$do$ $ doc$ $doc $ $doco$$doc$, $doc$$do$ $ doc$ $doc $ $doco$$doc$;\n SELECT $doc$\u0422\u0415\u0421\u0422$doc$;\n SELECT $doc$\u8be5\u7c7b\u578b\u7684\u5f15\u64ce$doc$;\n \n-SELECT $\u0420\u0410\u0417\u0414\u0415\u041b\u0418\u0422\u0415\u041b\u042c$VALUE$\u0420\u0410\u0417\u0414\u0415\u041b\u0418\u0422\u0415\u041b\u042c$;\n-SELECT $\u8be5\u7c7b\u578b\u7684\u5f15\u64ce$VALUE$\u8be5\u7c7b\u578b\u7684\u5f15\u64ce$;\n-\n SELECT $$\n value1\n value2\n@@ -19,4 +16,3 @@ value3\n $$;\n \n SELECT $doc$'\\xc3\\x28'$doc$;\n-SELECT $\\xc3\\x28$'\\xc3\\x28'$\\xc3\\x28$;\ndiff --git a/tests/queries/0_stateless/03580_heredoc_ambiguity.reference b/tests/queries/0_stateless/03580_heredoc_ambiguity.reference\nnew file mode 100644\nindex 000000000000..23d944e59a7a\n--- /dev/null\n+++ b/tests/queries/0_stateless/03580_heredoc_ambiguity.reference\n@@ -0,0 +1,3 @@\n+Hello\tWorld\n+Hello\tWorld\n+Hello\tWorld\ndiff --git a/tests/queries/0_stateless/03580_heredoc_ambiguity.sql b/tests/queries/0_stateless/03580_heredoc_ambiguity.sql\nnew file mode 100644\nindex 000000000000..b18a6770f5fd\n--- /dev/null\n+++ b/tests/queries/0_stateless/03580_heredoc_ambiguity.sql\n@@ -0,0 +1,4 @@\n+SET param_$1 = 'Hello', param_$2 = 'World';\n+\n+SELECT {$1:String} AS x, {$2:String} AS y; -- {$1:String} AS x, {$2:String} AS y\n+SELECT {$1:String} AS x, {$2:String} AS y UNION ALL SELECT {$1:String} AS x, {$2:String} AS y;\n",
  "problem_statement": "Syntax Error query exception when number of reused parameters >=2 in Union\n### Company or project name\n\nThread originally started in [JS Driver issue](https://github.com/ClickHouse/clickhouse-js/issues/447#issuecomment-3132186445). \n\n## TLDR\nWhen a query has more than two parameters that are duplicated across a union the following exception is thrown:\n\n```\nSELECT\n    {`$1`:String} AS x,\n    {`$2`:String} AS y\nUNION ALL\nSELECT\n    {`$1`:String} AS x,\n    {`$2`:String} AS y\n```\n\nSyntax Error Exception\n\n```\n... Expected substitution name (identifier). \n type: \"SYNTAX_ERROR\",\n code: \"62\"\n```\n\n### Debugging\n```\n$ cat foo.mjs\nimport { createClient } from '@clickhouse/client'\n\nconst client = createClient({\n  url: process.env.CLICKHOUSE_HOST ?? 'http://localhost:8123/',\n  username: process.env.CLICKHOUSE_USER ?? 'default',\n  password: process.env.CLICKHOUSE_PASSWORD ?? '',\n})\n\nconst params = {\n\t$1: 'bc92f73c-1d2e-4839-b369-1987b44e2b90',\n\t$2: 1749955122,\n};\n\nconst resultSet = await client.query({\n  query: \"SELECT {$1:String} AS x, {$1:String} AS y, {$2:Int32} AS z UNION ALL SELECT {$1:String} AS x, {$1:String} AS y, {$2:Int32} AS z\",\n  format: 'JSONEachRow', query_params: params\n})\nconst dataset = await resultSet.json()\nconsole.log(dataset)\n$ node foo.mjs\nnode:internal/process/esm_loader:40\n      internalBinding('errors').triggerUncaughtException(\n                                ^\n\nClickHouseError: Syntax error: failed at position 9 ($1:String} AS x, {$1:String} AS y, {$2:Int32} AS z UNION ALL SELECT {$1:String} AS x, {$) (line 1, col 9): $1:String} AS x, {$1:String} AS y, {$2:Int32} AS z UNION ALL SELECT {$1:String} AS x, {$1:String} AS y, {$2:Int32} AS z\nFORMAT JSONEachRow. Expected substitution name (identifier).\n    at parseError (/node_modules/@clickhouse/client-common/dist/error/error.js:38:16)\n    at ClientRequest.onResponse (/node_modules/@clickhouse/client/dist/connection/node_base_connection.js:443:107)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5) {\n  code: '62',\n  type: 'SYNTAX_ERROR'\n}\n```\n\nSeems to be an issue with multiple parameters in the query when and error handling in the client. The CLI raises the same exception\n\n<img width=\"1731\" height=\"687\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/a407e558-b9e1-4aa8-8c2b-660ac551a25f\" />\n\nIt will however allow duplicates if there is a different parameter in the union:\n\n```\n$ cat foo.mjs\nimport { createClient } from '@clickhouse/client'\n\nconst client = createClient({\n  url: process.env.CLICKHOUSE_HOST ?? 'http://localhost:8123/',\n  username: process.env.CLICKHOUSE_USER ?? 'default',\n  password: process.env.CLICKHOUSE_PASSWORD ?? '',\n})\n\nconst params = {\n\t$1: 'bc92f73c-1d2e-4839-b369-1987b44e2b90',\n\t$2: 1749955122,\n};\n\nconst resultSet = await client.query({\n  query: \"SELECT {$1:String} AS x UNION ALL SELECT {$1:String} AS x\",\n  format: 'JSONEachRow', query_params: params\n})\nconst dataset = await resultSet.json()\nconsole.log(dataset)\n$ node foo.mjs\n[\n  { x: 'bc92f73c-1d2e-4839-b369-1987b44e2b90' },\n  { x: 'bc92f73c-1d2e-4839-b369-1987b44e2b90' }\n]\n```\n\nand this is ok:\n\n<img width=\"1158\" height=\"506\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/322e4c2b-79d0-4279-9b58-c2802d9f5b08\" />\n\nbut CLI doesn't like when you use any parameter more than once:\n\n<img width=\"1473\" height=\"207\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/dc6a9d4d-e29e-4c96-ba80-c68accea8510\" />\n\nbut with a foo parameter, it is ok \ud83e\udd14 \n\n```\nSELECT\n    {`$1`:String} AS x,\n    {foo:String} AS y\nUNION ALL\nSELECT\n    {`$1`:String} AS x,\n    {`$1`:String} AS y\n\nQuery id: f43a09a2-8208-4285-9c4d-f854ef2c62db\n\n   \u250c\u2500x\u2500\u2500\u2500\u2500\u252c\u2500y\u2500\u2500\u2500\u2500\u2510\n1. \u2502 Mark \u2502 2    \u2502\n2. \u2502 Mark \u2502 Mark \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n```\n\n### Describe the unexpected behaviour\n\nreuse of the same parameter in queries e.g.\n\n\n\n### Which ClickHouse versions are affected?\n\nCH Cloud version: 25.4\n\n### How to reproduce\n\n```\nSELECT\n    {`$1`:String} AS x,\n    {`$2`:String} AS y\nUNION ALL\nSELECT\n    {`$1`:String} AS x,\n    {`$2`:String} AS y\n```\n\n### Expected behavior\n\n_No response_\n\n### Error message and/or stacktrace\n\n... Expected substitution name (identifier). \n type: \"SYNTAX_ERROR\",\n code: \"62\"\n\n### Additional context\n\nrelated to https://github.com/ClickHouse/clickhouse-js/issues/447\n",
  "hints_text": "",
  "created_at": "2025-07-31T19:08:38Z",
  "modified_files": [
    "programs/server/play.html",
    "src/Parsers/CMakeLists.txt",
    "src/Parsers/Lexer.cpp",
    "src/Parsers/LexerStandalone.h"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/01948_heredoc.reference",
    "tests/queries/0_stateless/01948_heredoc.sql",
    "b/tests/queries/0_stateless/03580_heredoc_ambiguity.reference",
    "b/tests/queries/0_stateless/03580_heredoc_ambiguity.sql"
  ]
}