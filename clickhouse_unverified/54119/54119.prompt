You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Error in base64Decode function running clickhouse-server in Mac M1 (Arm)
> You have to provide the following information whenever possible.

This command bellow return error when running clickhouse-server docker instance in a Mac M1 (Arch64) machines. 

`select  base64Decode('AGy1cKzasOC/yOPct7tO3w')`

<img width="990" alt="image" src="https://user-images.githubusercontent.com/8150579/215519299-143efde0-0e5b-46b6-8ec9-74ac415c9b63.png">

The command runs with no error in x86_64 machines. 

<img width="1026" alt="image" src="https://user-images.githubusercontent.com/8150579/215519559-7d290f2c-d186-49e7-8ff4-026457397c48.png">


> A clear and concise description of what works not as it is supposed to.

> A link to reproducer in [https://fiddle.clickhouse.com/](https://fiddle.clickhouse.com/).

I'm running the latest version if the docker image. "clickhouse/clickhouse-server:23.1.2.9"

[The list of releases](https://github.com/ClickHouse/ClickHouse/blob/master/utils/list-versions/version_date.tsv)

`2023.01.30 15:28:47.617942 [ 269 ] {509dae28-20d7-43df-8a36-557d7f7edea6} <Error> DynamicQueryHandler: Code: 117. DB::Exception: Failed to base64Decode input 'AGy1cKzasOC/yOPct7tO3w': While processing base64Decode('AGy1cKzasOC/yOPct7tO3w'). (INCORRECT_DATA), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0xbb157c4 in /usr/bin/clickhouse
1. ? @ 0x84672b8 in /usr/bin/clickhouse
2. ? @ 0x84671cc in /usr/bin/clickhouse
3. ? @ 0x8466b4c in /usr/bin/clickhouse
4. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0xf53b454 in /usr/bin/clickhouse
5. DB::IExecutableFunction::defaultImplementationForConstantArguments(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0xf53b018 in /usr/bin/clickhouse
6. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0xf53b400 in /usr/bin/clickhouse
7. DB::IExecutableFunction::executeWithoutSparseColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0xf53be28 in /usr/bin/clickhouse
8. DB::IExecutableFunction::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0xf53d2b0 in /usr/bin/clickhouse
9. DB::ActionsDAG::addFunctionImpl(std::__1::shared_ptr<DB::IFunctionBase const> const&, std::__1::vector<DB::ActionsDAG::Node const*, std::__1::allocator<DB::ActionsDAG::Node const*>>, std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, bool) @ 0xfb7b6d8 in /usr/bin/clickhouse
10. DB::ActionsDAG::addFunction(std::__1::shared_ptr<DB::IFunctionOverloadResolver> const&, std::__1::vector<DB::ActionsDAG::Node const*, std::__1::allocator<DB::ActionsDAG::Node const*>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>) @ 0xfb7ae14 in /usr/bin/clickhouse
11. DB::ScopeStack::addFunction(std::__1::shared_ptr<DB::IFunctionOverloadResolver> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>) @ 0xfd5d4f0 in /usr/bin/clickhouse
12. ? @ 0xfd66434 in /usr/bin/clickhouse
13. DB::ActionsMatcher::visit(DB::ASTFunction const&, std::__1::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0xfd61f9c in /usr/bin/clickhouse
14. DB::ActionsMatcher::visit(DB::ASTExpressionList&, std::__1::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0xfd64cb8 in /usr/bin/clickhouse
15. ? @ 0xfd56480 in /usr/bin/clickhouse
16. DB::ExpressionAnalyzer::getRootActions(std::__1::shared_ptr<DB::IAST> const&, bool, std::__1::shared_ptr<DB::ActionsDAG>&, bool) @ 0xfd38128 in /usr/bin/clickhouse
17. DB::SelectQueryExpressionAnalyzer::appendSelect(DB::ExpressionActionsChain&, bool) @ 0xfd4651c in /usr/bin/clickhouse
18. DB::ExpressionAnalysisResult::ExpressionAnalysisResult(DB::SelectQueryExpressionAnalyzer&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, bool, bool, bool, std::__1::shared_ptr<DB::FilterDAGInfo> const&, std::__1::shared_ptr<DB::FilterDAGInfo> const&, DB::Block const&) @ 0xfd4b9a4 in /usr/bin/clickhouse
19. DB::InterpreterSelectQuery::getSampleBlockImpl() @ 0x104242f4 in /usr/bin/clickhouse
20. ? @ 0x1041e724 in /usr/bin/clickhouse
21. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::__1::shared_ptr<DB::PreparedSets>) @ 0x10419ec4 in /usr/bin/clickhouse
22. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::__1::shared_ptr<DB::IAST> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&) @ 0x1049488c in /usr/bin/clickhouse
23. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&) @ 0x1049294c in /usr/bin/clickhouse
24. DB::InterpreterFactory::get(std::__1::shared_ptr<DB::IAST>&, std::__1::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x103db348 in /usr/bin/clickhouse
25. ? @ 0x1074e18c in /usr/bin/clickhouse
26. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::__1::shared_ptr<DB::Context>, std::__1::function<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>, std::__1::optional<DB::FormatSettings> const&) @ 0x1075252c in /usr/bin/clickhouse
27. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::__1::optional<DB::CurrentThread::QueryScope>&) @ 0x11343a9c in /usr/bin/clickhouse
28. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&) @ 0x11346994 in /usr/bin/clickhouse
29. DB::HTTPServerConnection::run() @ 0x113b1da8 in /usr/bin/clickhouse
30. Poco::Net::TCPServerConnection::start() @ 0x1201a5cc in /usr/bin/clickhouse
31. Poco::Net::TCPServerDispatcher::run() @ 0x1201c160 in /usr/bin/clickhouse
 (version 23.1.2.9 (official build))`


Replace "Turbo-Base64" to "lemire/fastbase64"
https://github.com/lemire/fastbase64
AVX512VBMI implementation of base64Encode / base64Decode
I just got to know this library yesterday https://github.com/WojciechMula/base64-avx512. Make some efforts to use it in base64Encode / base64Decode, and the performance on my local test (enable AVX512 and AVX512VBMI) is quite impressive compared to current approach (Turbo)

- Turbo - single thread:

![ZMn1hglDTR](https://user-images.githubusercontent.com/22796953/193181389-390f8253-c23d-4461-99c5-b0fb7dfac910.jpg)

- Mula - single thread:

![i01oe4QAYR](https://user-images.githubusercontent.com/22796953/193181521-b1fb5266-344c-4350-9224-76cb1355137f.jpg)

- Turbo - multi thread:

![zwcBhCEJUf](https://user-images.githubusercontent.com/22796953/193181471-c851620a-f69e-4532-a8b6-c9f89fe604d7.jpg)

- Mula - multi thread:

![gIInamy6ca](https://user-images.githubusercontent.com/22796953/193181561-03609e87-1891-4a13-9988-fb304acb7a94.jpg)

Have you look at this lib before? One of my concern is it's not actively maintained, and the code quality is actually quite bad.
If you think it's good, then I can make a PR with this library.
Thanks.
@rschu1ze
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
