diff --git a/docker/test/fasttest/run.sh b/docker/test/fasttest/run.sh
index 477bbdb6919e..296a132d3e3d 100755
--- a/docker/test/fasttest/run.sh
+++ b/docker/test/fasttest/run.sh
@@ -120,7 +120,7 @@ function clone_submodules
             contrib/libxml2
             contrib/libunwind
             contrib/fmtlib
-            contrib/base64
+            contrib/aklomp-base64
             contrib/cctz
             contrib/libcpuid
             contrib/libdivide
diff --git a/tests/integration/test_backward_compatibility/test_functions.py b/tests/integration/test_backward_compatibility/test_functions.py
index c86c3ba0ab29..607ac74d7258 100644
--- a/tests/integration/test_backward_compatibility/test_functions.py
+++ b/tests/integration/test_backward_compatibility/test_functions.py
@@ -148,6 +148,11 @@ def test_string_functions(start_cluster):
         # 22.8 Backward Incompatible Change: Extended range of Date32
         "toDate32OrZero",
         "toDate32OrDefault",
+        # 23.9 changed the base64-handling library from Turbo base64 to aklomp-base64. They differ in the way they deal with base64 values
+        # that are not properly padded by '=', for example below test value v='foo'. (Depending on the specification/context, padding is
+        # mandatory or optional). The former lib produces a value based on implicit padding, the latter lib throws an error.
+        "FROM_BASE64",
+        "base64Decode",
     ]
     functions = filter(lambda x: x not in excludes, functions)
 
diff --git a/tests/queries/0_stateless/00732_base64_functions.reference b/tests/queries/0_stateless/00732_base64_functions.reference
index 5dc1ba03b895..f97c19427e7b 100644
--- a/tests/queries/0_stateless/00732_base64_functions.reference
+++ b/tests/queries/0_stateless/00732_base64_functions.reference
@@ -12,7 +12,18 @@ foo
 foob
 fooba
 foobar
-1	1
 
+f
+fo
+foo
+foob
+fooba
+foobar
+1	1
+1	1
+fooba
+~ï¿½
 Zm9v
 foo
+foo
+TEcgT3B0aW11cw==
diff --git a/tests/queries/0_stateless/00732_base64_functions.sql b/tests/queries/0_stateless/00732_base64_functions.sql
index adba0cdebbd7..99268004003d 100644
--- a/tests/queries/0_stateless/00732_base64_functions.sql
+++ b/tests/queries/0_stateless/00732_base64_functions.sql
@@ -5,15 +5,24 @@ SET send_logs_level = 'fatal';
 SELECT base64Encode(val) FROM (select arrayJoin(['', 'f', 'fo', 'foo', 'foob', 'fooba', 'foobar']) val);
 
 SELECT base64Decode(val) FROM (select arrayJoin(['', 'Zg==', 'Zm8=', 'Zm9v', 'Zm9vYg==', 'Zm9vYmE=', 'Zm9vYmFy']) val);
+SELECT tryBase64Decode(val) FROM (select arrayJoin(['', 'Zg==', 'Zm8=', 'Zm9v', 'Zm9vYg==', 'Zm9vYmE=', 'Zm9vYmFy']) val);
+
 SELECT base64Decode(base64Encode('foo')) = 'foo', base64Encode(base64Decode('Zm9v')) == 'Zm9v';
+SELECT tryBase64Decode(base64Encode('foo')) = 'foo', base64Encode(tryBase64Decode('Zm9v')) == 'Zm9v';
 
-SELECT tryBase64Decode('Zm9vYmF=Zm9v');
+SELECT base64Encode('foo', 'excess argument'); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }
+SELECT base64Decode('foo', 'excess argument'); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }
+SELECT tryBase64Decode('foo', 'excess argument'); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }
 
-SELECT base64Encode(val, 'excess argument') FROM (select arrayJoin(['', 'f', 'fo', 'foo', 'foob', 'fooba', 'foobar']) val); -- { serverError 42 }
-SELECT base64Decode(val, 'excess argument') FROM (select arrayJoin(['', 'Zg==', 'Zm8=', 'Zm9v', 'Zm9vYg==', 'Zm9vYmE=', 'Zm9vYmFy']) val); -- { serverError 42 }
-SELECT tryBase64Decode('Zm9vYmF=Zm9v', 'excess argument'); -- { serverError 42 }
+SELECT base64Decode('Zm9vYmF=Zm9v'); -- { serverError INCORRECT_DATA }
+SELECT tryBase64Decode('Zm9vYmF=Zm9v');
 
-SELECT base64Decode('Zm9vYmF=Zm9v'); -- { serverError 117 }
+SELECT base64Decode('foo'); -- { serverError INCORRECT_DATA }
+SELECT tryBase64Decode('foo');
 
 select base64Encode(toFixedString('foo', 3));
 select base64Decode(toFixedString('Zm9v', 4));
+select tryBase64Decode(toFixedString('Zm9v', 4));
+
+-- This query reproduces a bug in TurboBase64 library (which we no longer use)
+select distinct base64Encode(materialize('LG Optimus')) from numbers(100);
diff --git a/tests/queries/0_stateless/01092_base64.reference b/tests/queries/0_stateless/01092_base64.reference
deleted file mode 100644
index 4c41ac319467..000000000000
--- a/tests/queries/0_stateless/01092_base64.reference
+++ /dev/null
@@ -1,1 +0,0 @@
-TEcgT3B0aW11cw==
diff --git a/tests/queries/0_stateless/01092_base64.sql b/tests/queries/0_stateless/01092_base64.sql
deleted file mode 100644
index f50cf49d270e..000000000000
--- a/tests/queries/0_stateless/01092_base64.sql
+++ /dev/null
@@ -1,4 +0,0 @@
--- Tags: no-fasttest
-
--- This query reproduces a bug in TurboBase64 library.
-select distinct base64Encode(materialize('LG Optimus')) from numbers(100);
