diff --git a/.gitmodules b/.gitmodules
index 4ebccaec4e93..caed96b03208 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -40,9 +40,6 @@
 [submodule "contrib/boost"]
 	path = contrib/boost
 	url = https://github.com/ClickHouse/boost
-[submodule "contrib/base64"]
-	path = contrib/base64
-	url = https://github.com/ClickHouse/Turbo-Base64
 [submodule "contrib/arrow"]
 	path = contrib/arrow
 	url = https://github.com/ClickHouse/arrow
@@ -348,3 +345,6 @@
 [submodule "contrib/robin-map"]
 	path = contrib/robin-map
 	url = https://github.com/Tessil/robin-map.git
+[submodule "contrib/aklomp-base64"]
+	path = contrib/aklomp-base64
+	url = https://github.com/aklomp/base64.git
diff --git a/contrib/CMakeLists.txt b/contrib/CMakeLists.txt
index 7b98cf43b09a..f9c3fddff40c 100644
--- a/contrib/CMakeLists.txt
+++ b/contrib/CMakeLists.txt
@@ -135,7 +135,7 @@ add_contrib (aws-cmake
     aws-cmake
 )
 
-add_contrib (base64-cmake base64)
+add_contrib (aklomp-base64-cmake aklomp-base64)
 add_contrib (simdjson-cmake simdjson)
 add_contrib (rapidjson-cmake rapidjson)
 add_contrib (fastops-cmake fastops)
diff --git a/contrib/aklomp-base64 b/contrib/aklomp-base64
new file mode 160000
index 000000000000..e77bd70bdd86
--- /dev/null
+++ b/contrib/aklomp-base64
@@ -0,0 +1,1 @@
+Subproject commit e77bd70bdd860c52c561568cffb251d88bba064c
diff --git a/contrib/aklomp-base64-cmake/.gitignore b/contrib/aklomp-base64-cmake/.gitignore
new file mode 100644
index 000000000000..0e56cf2f8c1e
--- /dev/null
+++ b/contrib/aklomp-base64-cmake/.gitignore
@@ -0,0 +1,1 @@
+config.h
diff --git a/contrib/aklomp-base64-cmake/CMakeLists.txt b/contrib/aklomp-base64-cmake/CMakeLists.txt
new file mode 100644
index 000000000000..4b988fad8609
--- /dev/null
+++ b/contrib/aklomp-base64-cmake/CMakeLists.txt
@@ -0,0 +1,68 @@
+option (ENABLE_BASE64 "Enable base64" ${ENABLE_LIBRARIES})
+
+if (NOT ENABLE_BASE64)
+    message(STATUS "Not using base64")
+    return()
+endif()
+
+SET(LIBRARY_DIR "${ClickHouse_SOURCE_DIR}/contrib/aklomp-base64")
+
+if (ARCH_AMD64)
+    # These defines enable/disable SIMD codecs in base64's runtime codec dispatch.
+    # We don't want to limit ourselves --> enable all.
+    set(HAVE_SSSE3 1)
+    set(HAVE_SSE41 1)
+    set(HAVE_SSE42 1)
+    set(HAVE_AVX 1)
+    set(HAVE_AVX2 1)
+    set(HAVE_AVX512 1)
+endif ()
+
+if (ARCH_AARCH64)
+    # The choice of HAVE_NEON* depends on the target machine because base64 provides
+    # no runtime dispatch on ARM. NEON is only mandatory with the normal build profile.
+    if(NOT NO_ARMV81_OR_HIGHER)
+        set(HAVE_NEON64 1)
+        set(HAVE_NEON32 0)
+    endif ()
+endif ()
+
+configure_file(config.h.in ${CMAKE_CURRENT_BINARY_DIR}/config.h)
+
+add_library(_base64
+    "${LIBRARY_DIR}/lib/lib.c"
+    "${LIBRARY_DIR}/lib/codec_choose.c"
+
+    "${LIBRARY_DIR}/lib/tables/tables.c"
+    "${LIBRARY_DIR}/lib/tables/table_dec_32bit.h"
+    "${LIBRARY_DIR}/lib/tables/table_enc_12bit.h"
+
+    "${LIBRARY_DIR}/lib/codecs.h"
+
+    "${CMAKE_CURRENT_BINARY_DIR}/config.h"
+
+    "${LIBRARY_DIR}/lib/arch/generic/codec.c"
+    "${LIBRARY_DIR}/lib/arch/ssse3/codec.c"
+    "${LIBRARY_DIR}/lib/arch/sse41/codec.c"
+    "${LIBRARY_DIR}/lib/arch/sse42/codec.c"
+    "${LIBRARY_DIR}/lib/arch/avx/codec.c"
+    "${LIBRARY_DIR}/lib/arch/avx2/codec.c"
+    "${LIBRARY_DIR}/lib/arch/avx512/codec.c"
+
+    "${LIBRARY_DIR}/lib/arch/neon32/codec.c"
+    "${LIBRARY_DIR}/lib/arch/neon64/codec.c"
+)
+
+if (ARCH_AMD64)
+    set_source_files_properties(${LIBRARY_DIR}/lib/arch/ssse3/codec.c PROPERTIES COMPILE_FLAGS "-mssse3")
+    set_source_files_properties(${LIBRARY_DIR}/lib/arch/sse41/codec.c PROPERTIES COMPILE_FLAGS "-msse4.1")
+    set_source_files_properties(${LIBRARY_DIR}/lib/arch/sse42/codec.c PROPERTIES COMPILE_FLAGS "-msse4.2")
+    set_source_files_properties(${LIBRARY_DIR}/lib/arch/avx/codec.c PROPERTIES COMPILE_FLAGS "-mavx")
+    set_source_files_properties(${LIBRARY_DIR}/lib/arch/avx2/codec.c PROPERTIES COMPILE_FLAGS "-mavx2")
+    set_source_files_properties(${LIBRARY_DIR}/lib/arch/avx512/codec.c PROPERTIES COMPILE_FLAGS "-mavx512vl -mavx512vbmi")
+endif()
+
+target_include_directories(_base64 SYSTEM PUBLIC ${LIBRARY_DIR}/include)
+target_include_directories(_base64 PRIVATE ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR})
+
+add_library(ch_contrib::base64 ALIAS _base64)
diff --git a/contrib/aklomp-base64-cmake/config.h.in b/contrib/aklomp-base64-cmake/config.h.in
new file mode 100644
index 000000000000..4dc84632b30b
--- /dev/null
+++ b/contrib/aklomp-base64-cmake/config.h.in
@@ -0,0 +1,9 @@
+#cmakedefine01 HAVE_SSSE3
+#cmakedefine01 HAVE_SSE41
+#cmakedefine01 HAVE_SSE42
+#cmakedefine01 HAVE_AVX
+#cmakedefine01 HAVE_AVX2
+#cmakedefine01 HAVE_AVX512
+
+#cmakedefine01 HAVE_NEON32
+#cmakedefine01 HAVE_NEON64
diff --git a/contrib/base64 b/contrib/base64
deleted file mode 160000
index 8628e258090f..000000000000
--- a/contrib/base64
+++ /dev/null
@@ -1,1 +0,0 @@
-Subproject commit 8628e258090f9eb76d90ac3c91e1ab4690e9aa11
diff --git a/contrib/base64-cmake/CMakeLists.txt b/contrib/base64-cmake/CMakeLists.txt
deleted file mode 100644
index 333e0a96a0ba..000000000000
--- a/contrib/base64-cmake/CMakeLists.txt
+++ /dev/null
@@ -1,60 +0,0 @@
-if(ARCH_AMD64 OR ARCH_AARCH64 OR ARCH_PPC64LE OR ARCH_S390X)
-    option (ENABLE_BASE64 "Enable base64" ${ENABLE_LIBRARIES})
-elseif(ENABLE_BASE64)
-    message (${RECONFIGURE_MESSAGE_LEVEL} "base64 library is only supported on x86_64 and aarch64")
-endif()
-
-if (NOT ENABLE_BASE64)
-    message(STATUS "Not using base64")
-    return()
-endif()
-
-SET(LIBRARY_DIR "${ClickHouse_SOURCE_DIR}/contrib/base64")
-
-add_library(_base64_scalar OBJECT "${LIBRARY_DIR}/turbob64c.c" "${LIBRARY_DIR}/turbob64d.c")
-add_library(_base64_ssse3 OBJECT "${LIBRARY_DIR}/turbob64sse.c") # This file also contains code for ARM NEON
-
-if (ARCH_AMD64)
-    add_library(_base64_avx OBJECT "${LIBRARY_DIR}/turbob64sse.c") # This is not a mistake. One file is compiled twice.
-    add_library(_base64_avx2 OBJECT "${LIBRARY_DIR}/turbob64avx2.c")
-endif ()
-
-target_compile_options(_base64_scalar PRIVATE -falign-loops)
-
-if (ARCH_AMD64)
-    target_compile_options(_base64_ssse3 PRIVATE -mno-avx -mno-avx2 -mssse3 -falign-loops)
-    target_compile_options(_base64_avx PRIVATE -falign-loops -mavx)
-    target_compile_options(_base64_avx2 PRIVATE -falign-loops -mavx2)
-else ()
-    if (ARCH_PPC64LE)
-        target_compile_options(_base64_ssse3 PRIVATE -D__SSSE3__ -falign-loops)
-    else()
-        target_compile_options(_base64_ssse3 PRIVATE -falign-loops)
-    endif()
-endif ()
-
-if (ARCH_AMD64)
-    add_library(_base64
-        $<TARGET_OBJECTS:_base64_scalar>
-        $<TARGET_OBJECTS:_base64_ssse3>
-        $<TARGET_OBJECTS:_base64_avx>
-        $<TARGET_OBJECTS:_base64_avx2>)
-else ()
-    add_library(_base64
-        $<TARGET_OBJECTS:_base64_scalar>
-        $<TARGET_OBJECTS:_base64_ssse3>)
-endif ()
-
-target_include_directories(_base64 SYSTEM PUBLIC ${LIBRARY_DIR})
-
-if (XCODE OR XCODE_VERSION)
-    # https://gitlab.kitware.com/cmake/cmake/issues/17457
-    #     Some native build systems may not like targets that have only object files, so consider adding at least one real source file
-    # This applies to Xcode.
-    if (NOT EXISTS "${CMAKE_CURRENT_BINARY_DIR}/dummy.c")
-        file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/dummy.c" "")
-    endif ()
-    target_sources(_base64 PRIVATE "${CMAKE_CURRENT_BINARY_DIR}/dummy.c")
-endif ()
-
-add_library(ch_contrib::base64 ALIAS _base64)
diff --git a/docs/en/operations/system-tables/licenses.md b/docs/en/operations/system-tables/licenses.md
index 0f09d559d8be..c436c0ade3b9 100644
--- a/docs/en/operations/system-tables/licenses.md
+++ b/docs/en/operations/system-tables/licenses.md
@@ -1,7 +1,7 @@
 ---
 slug: /en/operations/system-tables/licenses
 ---
-# licenses 
+# licenses
 
 Contains licenses of third-party libraries that are located in the [contrib](https://github.com/ClickHouse/ClickHouse/tree/master/contrib) directory of ClickHouse sources.
 
@@ -20,21 +20,10 @@ SELECT library_name, license_type, license_path FROM system.licenses LIMIT 15
 
 ``` text
 ┌─library_name───────┬─license_type─┬─license_path────────────────────────┐
-│ FastMemcpy         │ MIT          │ /contrib/FastMemcpy/LICENSE         │
-│ arrow              │ Apache       │ /contrib/arrow/LICENSE.txt          │
-│ avro               │ Apache       │ /contrib/avro/LICENSE.txt           │
 │ aws-c-common       │ Apache       │ /contrib/aws-c-common/LICENSE       │
-│ aws-c-event-stream │ Apache       │ /contrib/aws-c-event-stream/LICENSE │
-│ aws-checksums      │ Apache       │ /contrib/aws-checksums/LICENSE      │
-│ aws                │ Apache       │ /contrib/aws/LICENSE.txt            │
-│ base64             │ BSD 2-clause │ /contrib/base64/LICENSE             │
-│ boost              │ Boost        │ /contrib/boost/LICENSE_1_0.txt      │
+│ base64             │ BSD 2-clause │ /contrib/aklomp-base64/LICENSE      │
 │ brotli             │ MIT          │ /contrib/brotli/LICENSE             │
-│ capnproto          │ MIT          │ /contrib/capnproto/LICENSE          │
-│ cassandra          │ Apache       │ /contrib/cassandra/LICENSE.txt      │
-│ cctz               │ Apache       │ /contrib/cctz/LICENSE.txt           │
-│ cityhash102        │ MIT          │ /contrib/cityhash102/COPYING        │
-│ cppkafka           │ BSD 2-clause │ /contrib/cppkafka/LICENSE           │
+│ [...]              │ [...]        │ [...]                               │
 └────────────────────┴──────────────┴─────────────────────────────────────┘
 
 ```
diff --git a/docs/ru/operations/system-tables/licenses.md b/docs/ru/operations/system-tables/licenses.md
index 13407a27c94c..e35b5d5e3be2 100644
--- a/docs/ru/operations/system-tables/licenses.md
+++ b/docs/ru/operations/system-tables/licenses.md
@@ -20,21 +20,10 @@ SELECT library_name, license_type, license_path FROM system.licenses LIMIT 15
 
 ``` text
 ┌─library_name───────┬─license_type─┬─license_path────────────────────────┐
-│ FastMemcpy         │ MIT          │ /contrib/FastMemcpy/LICENSE         │
-│ arrow              │ Apache       │ /contrib/arrow/LICENSE.txt          │
-│ avro               │ Apache       │ /contrib/avro/LICENSE.txt           │
 │ aws-c-common       │ Apache       │ /contrib/aws-c-common/LICENSE       │
-│ aws-c-event-stream │ Apache       │ /contrib/aws-c-event-stream/LICENSE │
-│ aws-checksums      │ Apache       │ /contrib/aws-checksums/LICENSE      │
-│ aws                │ Apache       │ /contrib/aws/LICENSE.txt            │
-│ base64             │ BSD 2-clause │ /contrib/base64/LICENSE             │
-│ boost              │ Boost        │ /contrib/boost/LICENSE_1_0.txt      │
+│ base64             │ BSD 2-clause │ /contrib/aklomp-base64/LICENSE      │
 │ brotli             │ MIT          │ /contrib/brotli/LICENSE             │
-│ capnproto          │ MIT          │ /contrib/capnproto/LICENSE          │
-│ cassandra          │ Apache       │ /contrib/cassandra/LICENSE.txt      │
-│ cctz               │ Apache       │ /contrib/cctz/LICENSE.txt           │
-│ cityhash102        │ MIT          │ /contrib/cityhash102/COPYING        │
-│ cppkafka           │ BSD 2-clause │ /contrib/cppkafka/LICENSE           │
+│ [...]              │ [...]        │ [...]                               │
 └────────────────────┴──────────────┴─────────────────────────────────────┘
 
 ```
diff --git a/docs/zh/operations/system-tables/licenses.md b/docs/zh/operations/system-tables/licenses.md
index dc09e65264d2..38260491dc07 100644
--- a/docs/zh/operations/system-tables/licenses.md
+++ b/docs/zh/operations/system-tables/licenses.md
@@ -20,21 +20,9 @@ SELECT library_name, license_type, license_path FROM system.licenses LIMIT 15
 
 ``` text
 ┌─library_name───────┬─license_type─┬─license_path────────────────────────┐
-│ FastMemcpy         │ MIT          │ /contrib/FastMemcpy/LICENSE         │
-│ arrow              │ Apache       │ /contrib/arrow/LICENSE.txt          │
-│ avro               │ Apache       │ /contrib/avro/LICENSE.txt           │
 │ aws-c-common       │ Apache       │ /contrib/aws-c-common/LICENSE       │
-│ aws-c-event-stream │ Apache       │ /contrib/aws-c-event-stream/LICENSE │
-│ aws-checksums      │ Apache       │ /contrib/aws-checksums/LICENSE      │
-│ aws                │ Apache       │ /contrib/aws/LICENSE.txt            │
-│ base64             │ BSD 2-clause │ /contrib/base64/LICENSE             │
-│ boost              │ Boost        │ /contrib/boost/LICENSE_1_0.txt      │
+│ base64             │ BSD 2-clause │ /contrib/aklomp-base64/LICENSE      │
 │ brotli             │ MIT          │ /contrib/brotli/LICENSE             │
-│ capnproto          │ MIT          │ /contrib/capnproto/LICENSE          │
-│ cassandra          │ Apache       │ /contrib/cassandra/LICENSE.txt      │
-│ cctz               │ Apache       │ /contrib/cctz/LICENSE.txt           │
-│ cityhash102        │ MIT          │ /contrib/cityhash102/COPYING        │
-│ cppkafka           │ BSD 2-clause │ /contrib/cppkafka/LICENSE           │
+│ [...]              │ [...]        │ [...]                               │
 └────────────────────┴──────────────┴─────────────────────────────────────┘
-
 ```
diff --git a/src/Functions/FunctionBase64Conversion.h b/src/Functions/FunctionBase64Conversion.h
index ef340a331494..f52dec0eaf76 100644
--- a/src/Functions/FunctionBase64Conversion.h
+++ b/src/Functions/FunctionBase64Conversion.h
@@ -8,53 +8,34 @@
 #    include <Functions/FunctionHelpers.h>
 #    include <Functions/IFunction.h>
 #    include <Interpreters/Context_fwd.h>
-#    include <turbob64.h>
+#    include <libbase64.h>
 #    include <Common/MemorySanitizer.h>
 
+#    include <cstddef>
 #    include <span>
 
 namespace DB
 {
 namespace ErrorCodes
 {
-    extern const int BAD_ARGUMENTS;
     extern const int ILLEGAL_COLUMN;
-    extern const int ILLEGAL_TYPE_OF_ARGUMENT;
     extern const int INCORRECT_DATA;
 }
 
-namespace Detail
-{
-    inline size_t base64Decode(const std::span<const UInt8> src, UInt8 * dst)
-    {
-#    if defined(__aarch64__)
-        return tb64sdec(reinterpret_cast<const uint8_t *>(src.data()), src.size(), reinterpret_cast<uint8_t *>(dst));
-#    else
-        return _tb64d(reinterpret_cast<const uint8_t *>(src.data()), src.size(), reinterpret_cast<uint8_t *>(dst));
-#    endif
-    }
-}
-
 struct Base64Encode
 {
     static constexpr auto name = "base64Encode";
 
-    static size_t getBufferSize(const size_t string_length, const size_t string_count)
+    static size_t getBufferSize(size_t string_length, size_t string_count)
     {
         return ((string_length - string_count) / 3 + string_count) * 4 + string_count;
     }
 
-    static size_t performCoding(const std::span<const UInt8> src, UInt8 * dst)
+    static size_t perform(const std::span<const UInt8> src, UInt8 * dst)
     {
-        /*
-        * Some bug in sse arm64 implementation?
-        * `base64Encode(repeat('a', 46))` returns wrong padding character
-        */
-#    if defined(__aarch64__)
-        return tb64senc(reinterpret_cast<const uint8_t *>(src.data()), src.size(), reinterpret_cast<uint8_t *>(dst));
-#    else
-        return _tb64e(reinterpret_cast<const uint8_t *>(src.data()), src.size(), reinterpret_cast<uint8_t *>(dst));
-#    endif
+        size_t outlen = 0;
+        base64_encode(reinterpret_cast<const char *>(src.data()), src.size(), reinterpret_cast<char *>(dst), &outlen, 0);
+        return outlen;
     }
 };
 
@@ -62,15 +43,17 @@ struct Base64Decode
 {
     static constexpr auto name = "base64Decode";
 
-    static size_t getBufferSize(const size_t string_length, const size_t string_count)
+    static size_t getBufferSize(size_t string_length, size_t string_count)
     {
         return ((string_length - string_count) / 4 + string_count) * 3 + string_count;
     }
 
-    static size_t performCoding(const std::span<const UInt8> src, UInt8 * dst)
+    static size_t perform(const std::span<const UInt8> src, UInt8 * dst)
     {
-        const auto outlen = Detail::base64Decode(src, dst);
-        if (src.size() > 0 && !outlen)
+        size_t outlen = 0;
+        int rc = base64_decode(reinterpret_cast<const char *>(src.data()), src.size(), reinterpret_cast<char *>(dst), &outlen, 0);
+
+        if (rc != 1)
             throw Exception(
                 ErrorCodes::INCORRECT_DATA,
                 "Failed to {} input '{}'",
@@ -85,17 +68,16 @@ struct TryBase64Decode
 {
     static constexpr auto name = "tryBase64Decode";
 
-    static size_t getBufferSize(const size_t string_length, const size_t string_count)
+    static size_t getBufferSize(size_t string_length, size_t string_count)
     {
         return Base64Decode::getBufferSize(string_length, string_count);
     }
 
-    static size_t performCoding(const std::span<const UInt8> src, UInt8 * dst)
+    static size_t perform(const std::span<const UInt8> src, UInt8 * dst)
     {
-        if (src.empty())
-            return 0;
+        size_t outlen = 0;
+        base64_decode(reinterpret_cast<const char *>(src.data()), src.size(), reinterpret_cast<char *>(dst), &outlen, 0);
 
-        const auto outlen = Detail::base64Decode(src, dst);
         // during decoding character array can be partially polluted
         // if fail, revert back and clean
         if (!outlen)
@@ -119,20 +101,16 @@ class FunctionBase64Conversion : public IFunction
 
     DataTypePtr getReturnTypeImpl(const ColumnsWithTypeAndName & arguments) const override
     {
-        if (arguments.size() != 1)
-            throw Exception(ErrorCodes::BAD_ARGUMENTS, "Wrong number of arguments for function {}: 1 expected.", getName());
+        FunctionArgumentDescriptors mandatory_arguments{
+            {"value", &isStringOrFixedString<IDataType>, nullptr, "String or FixedString"}
+        };
 
-        if (!WhichDataType(arguments[0].type).isStringOrFixedString())
-            throw Exception(
-                ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,
-                "Illegal type {} of 1st argument of function {}. Must be FixedString or String.",
-                arguments[0].type->getName(),
-                getName());
+        validateFunctionArgumentTypes(*this, arguments, mandatory_arguments);
 
         return std::make_shared<DataTypeString>();
     }
 
-    ColumnPtr executeImpl(const ColumnsWithTypeAndName & arguments, const DataTypePtr &, const size_t input_rows_count) const override
+    ColumnPtr executeImpl(const ColumnsWithTypeAndName & arguments, const DataTypePtr &, size_t input_rows_count) const override
     {
         const auto & input_column = arguments[0].column;
         if (const auto * src_column_as_fixed_string = checkAndGetColumn<ColumnFixedString>(*input_column))
@@ -148,7 +126,7 @@ class FunctionBase64Conversion : public IFunction
     }
 
 private:
-    static ColumnPtr execute(const ColumnString & src_column, const size_t src_row_count)
+    static ColumnPtr execute(const ColumnString & src_column, size_t src_row_count)
     {
         auto dst_column = ColumnString::create();
         auto & dst_chars = dst_column->getChars();
@@ -169,7 +147,7 @@ class FunctionBase64Conversion : public IFunction
         for (size_t row = 0; row < src_row_count; ++row)
         {
             const size_t src_length = src_offsets[row] - src_offset_prev - 1;
-            const auto outlen = Func::performCoding({src, src_length}, dst_pos);
+            const auto outlen = Func::perform({src, src_length}, dst_pos);
 
             /// Base64 library is using AVX-512 with some shuffle operations.
             /// Memory sanitizer don't understand if there was uninitialized memory in SIMD register but it was not used in the result of shuffle.
@@ -188,7 +166,7 @@ class FunctionBase64Conversion : public IFunction
         return dst_column;
     }
 
-    static ColumnPtr execute(const ColumnFixedString & src_column, const size_t src_row_count)
+    static ColumnPtr execute(const ColumnFixedString & src_column, size_t src_row_count)
     {
         auto dst_column = ColumnString::create();
         auto & dst_chars = dst_column->getChars();
@@ -207,7 +185,7 @@ class FunctionBase64Conversion : public IFunction
 
         for (size_t row = 0; row < src_row_count; ++row)
         {
-            const auto outlen = Func::performCoding({src, src_n}, dst_pos);
+            const auto outlen = Func::perform({src, src_n}, dst_pos);
 
             /// Base64 library is using AVX-512 with some shuffle operations.
             /// Memory sanitizer don't understand if there was uninitialized memory in SIMD register but it was not used in the result of shuffle.
@@ -225,6 +203,7 @@ class FunctionBase64Conversion : public IFunction
         return dst_column;
     }
 };
+
 }
 
 #endif
diff --git a/src/Functions/base64Decode.cpp b/src/Functions/base64Decode.cpp
index 4060aafe1a3b..842ceeb3a878 100644
--- a/src/Functions/base64Decode.cpp
+++ b/src/Functions/base64Decode.cpp
@@ -7,7 +7,6 @@ namespace DB
 {
 REGISTER_FUNCTION(Base64Decode)
 {
-    tb64ini(0, 0);
     factory.registerFunction<FunctionBase64Conversion<Base64Decode>>();
 
     /// MysQL compatibility alias.
diff --git a/src/Functions/base64Encode.cpp b/src/Functions/base64Encode.cpp
index 773db7e09d98..38b45790a3a0 100644
--- a/src/Functions/base64Encode.cpp
+++ b/src/Functions/base64Encode.cpp
@@ -7,7 +7,6 @@ namespace DB
 {
 REGISTER_FUNCTION(Base64Encode)
 {
-    tb64ini(0, 0);
     factory.registerFunction<FunctionBase64Conversion<Base64Encode>>();
 
     /// MysQL compatibility alias.
diff --git a/utils/check-style/check-include b/utils/check-style/check-include
index 3c0c6103958f..efa5121157d4 100755
--- a/utils/check-style/check-include
+++ b/utils/check-style/check-include
@@ -51,7 +51,7 @@ inc="-I. \
 -I./base/daemon \
 -I./base/consistent-hashing \
 -I./contrib/libhdfs3/include \
--I./contrib/base64/include \
+-I./contrib/aklomp-base64/include \
 -I./contrib/protobuf/src \
 -I./contrib/cppkafka/include \
 -I./contrib/librdkafka-cmake/include \
