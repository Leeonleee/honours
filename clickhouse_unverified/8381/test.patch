diff --git a/dbms/tests/integration/test_row_policy/multiple_tags_with_table_names.xml b/dbms/tests/integration/test_row_policy/multiple_tags_with_table_names.xml
new file mode 100644
index 000000000000..87b22047e7e3
--- /dev/null
+++ b/dbms/tests/integration/test_row_policy/multiple_tags_with_table_names.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0"?>
+<yandex>
+    <users>
+        <default>
+            <!-- For testing the table filters -->
+            <databases>
+                <mydb>
+                    <!-- Simple expression filter -->
+                    <table>
+                        <filter>a = 1</filter>
+                    </table>
+
+                    <!-- Complex expression filter -->
+                    <table name='filtered_table2'>
+                        <filter>a + b &lt; 1 or c - d &gt; 5</filter>
+                    </table>
+
+                    <!-- Filter with ALIAS column -->
+                    <table name='.filtered_table4'>
+                        <filter>c = 1</filter>
+                    </table>
+                </mydb>
+            </databases>
+        </default>
+    </users>
+</yandex>
diff --git a/dbms/tests/integration/test_row_policy/tag_with_table_name.xml b/dbms/tests/integration/test_row_policy/tag_with_table_name.xml
new file mode 100644
index 000000000000..4affd2d90381
--- /dev/null
+++ b/dbms/tests/integration/test_row_policy/tag_with_table_name.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0"?>
+<yandex>
+    <users>
+        <default>
+            <!-- For testing the table filters -->
+            <databases>
+                <mydb>
+                    <!-- Simple expression filter -->
+                    <table>
+                        <filter>a = 1</filter>
+                    </table>
+
+                    <!-- Complex expression filter -->
+                    <table name='filtered_table2'>
+                        <filter>a + b &lt; 1 or c - d &gt; 5</filter>
+                    </table>
+
+                    <!-- Filter with ALIAS column -->
+                    <filtered_table3>
+                        <filter>c = 1</filter>
+                    </filtered_table3>
+                </mydb>
+            </databases>
+        </default>
+    </users>
+</yandex>
diff --git a/dbms/tests/integration/test_row_policy/test.py b/dbms/tests/integration/test_row_policy/test.py
index 421a4b0510c1..32f77bfae86a 100644
--- a/dbms/tests/integration/test_row_policy/test.py
+++ b/dbms/tests/integration/test_row_policy/test.py
@@ -28,13 +28,19 @@ def started_cluster():
             CREATE TABLE mydb.filtered_table1 (a UInt8, b UInt8) ENGINE MergeTree ORDER BY a;
             INSERT INTO mydb.filtered_table1 values (0, 0), (0, 1), (1, 0), (1, 1);
 
+            CREATE TABLE mydb.table (a UInt8, b UInt8) ENGINE MergeTree ORDER BY a;
+            INSERT INTO mydb.table values (0, 0), (0, 1), (1, 0), (1, 1);
+
             CREATE TABLE mydb.filtered_table2 (a UInt8, b UInt8, c UInt8, d UInt8) ENGINE MergeTree ORDER BY a;
             INSERT INTO mydb.filtered_table2 values (0, 0, 0, 0), (1, 2, 3, 4), (4, 3, 2, 1), (0, 0, 6, 0);
 
             CREATE TABLE mydb.filtered_table3 (a UInt8, b UInt8, c UInt16 ALIAS a + b) ENGINE MergeTree ORDER BY a;
             INSERT INTO mydb.filtered_table3 values (0, 0), (0, 1), (1, 0), (1, 1);
+
+            CREATE TABLE mydb.`.filtered_table4` (a UInt8, b UInt8, c UInt16 ALIAS a + b) ENGINE MergeTree ORDER BY a;
+            INSERT INTO mydb.`.filtered_table4` values (0, 0), (0, 1), (1, 0), (1, 1);
         ''')
-        
+
         yield cluster
 
     finally:
@@ -88,6 +94,46 @@ def test_prewhere_not_supported():
     assert expected_error in instance.query_and_get_error("SELECT * FROM mydb.filtered_table3 PREWHERE 1")
 
 
+def test_single_table_name():
+    copy_policy_xml('tag_with_table_name.xml')
+    assert instance.query("SELECT * FROM mydb.table") == "1\t0
1\t1
"
+    assert instance.query("SELECT * FROM mydb.filtered_table2") == "0\t0\t0\t0
0\t0\t6\t0
"
+    assert instance.query("SELECT * FROM mydb.filtered_table3") == "0\t1
1\t0
"
+
+    assert instance.query("SELECT a FROM mydb.table") == "1
1
"
+    assert instance.query("SELECT b FROM mydb.table") == "0
1
"
+    assert instance.query("SELECT a FROM mydb.table WHERE a = 1") == "1
1
"
+    assert instance.query("SELECT a = 1 FROM mydb.table") == "1
1
"
+
+    assert instance.query("SELECT a FROM mydb.filtered_table3") == "0
1
"
+    assert instance.query("SELECT b FROM mydb.filtered_table3") == "1
0
"
+    assert instance.query("SELECT c FROM mydb.filtered_table3") == "1
1
"
+    assert instance.query("SELECT a + b FROM mydb.filtered_table3") == "1
1
"
+    assert instance.query("SELECT a FROM mydb.filtered_table3 WHERE c = 1") == "0
1
"
+    assert instance.query("SELECT c = 1 FROM mydb.filtered_table3") == "1
1
"
+    assert instance.query("SELECT a + b = 1 FROM mydb.filtered_table3") == "1
1
"
+
+
+def test_custom_table_name():
+    copy_policy_xml('multiple_tags_with_table_names.xml')
+    assert instance.query("SELECT * FROM mydb.table") == "1\t0
1\t1
"
+    assert instance.query("SELECT * FROM mydb.filtered_table2") == "0\t0\t0\t0
0\t0\t6\t0
"
+    assert instance.query("SELECT * FROM mydb.`.filtered_table4`") == "0\t1
1\t0
"
+
+    assert instance.query("SELECT a FROM mydb.table") == "1
1
"
+    assert instance.query("SELECT b FROM mydb.table") == "0
1
"
+    assert instance.query("SELECT a FROM mydb.table WHERE a = 1") == "1
1
"
+    assert instance.query("SELECT a = 1 FROM mydb.table") == "1
1
"
+
+    assert instance.query("SELECT a FROM mydb.`.filtered_table4`") == "0
1
"
+    assert instance.query("SELECT b FROM mydb.`.filtered_table4`") == "1
0
"
+    assert instance.query("SELECT c FROM mydb.`.filtered_table4`") == "1
1
"
+    assert instance.query("SELECT a + b FROM mydb.`.filtered_table4`") == "1
1
"
+    assert instance.query("SELECT a FROM mydb.`.filtered_table4` WHERE c = 1") == "0
1
"
+    assert instance.query("SELECT c = 1 FROM mydb.`.filtered_table4`") == "1
1
"
+    assert instance.query("SELECT a + b = 1 FROM mydb.`.filtered_table4`") == "1
1
"
+
+
 def test_change_of_users_xml_changes_row_policies():
     copy_policy_xml('normal_filters.xml')
     assert instance.query("SELECT * FROM mydb.filtered_table1") == "1\t0
1\t1
"
