{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 8381,
  "instance_id": "ClickHouse__ClickHouse-8381",
  "issue_numbers": [
    "5779"
  ],
  "base_commit": "17307eda5326aa578f175545d536409e7bdc2038",
  "patch": "diff --git a/dbms/programs/server/users.xml b/dbms/programs/server/users.xml\nindex 0058ee511846..87e6c406b0a3 100644\n--- a/dbms/programs/server/users.xml\n+++ b/dbms/programs/server/users.xml\n@@ -83,30 +83,7 @@\n \n             <!-- Quota for user. -->\n             <quota>default</quota>\n-\n-            <!-- Example of row level security policy. -->\n-            <!-- <databases>\n-                <test>\n-                    <filtered_table1>\n-                        <filter>a = 1</filter>\n-                    </filtered_table1>\n-                    <filtered_table2>\n-                        <filter>a + b &lt; 1 or c - d &gt; 5</filter>\n-                    </filtered_table2>\n-                </test>\n-            </databases> -->\n         </default>\n-\n-        <!-- Example of user with readonly access. -->\n-        <!-- <readonly>\n-            <password></password>\n-            <networks incl=\"networks\" replace=\"replace\">\n-                <ip>::1</ip>\n-                <ip>127.0.0.1</ip>\n-            </networks>\n-            <profile>readonly</profile>\n-            <quota>default</quota>\n-        </readonly> -->\n     </users>\n \n     <!-- Quotas. -->\ndiff --git a/dbms/src/Access/UsersConfigAccessStorage.cpp b/dbms/src/Access/UsersConfigAccessStorage.cpp\nindex c9671afaca1c..033e8f557b7c 100644\n--- a/dbms/src/Access/UsersConfigAccessStorage.cpp\n+++ b/dbms/src/Access/UsersConfigAccessStorage.cpp\n@@ -135,13 +135,25 @@ namespace\n                 for (const String & database : databases)\n                 {\n                     const String database_config = databases_config + \".\" + database;\n-                    Poco::Util::AbstractConfiguration::Keys table_names;\n-                    config.keys(database_config, table_names);\n+                    Poco::Util::AbstractConfiguration::Keys keys_in_database_config;\n+                    config.keys(database_config, keys_in_database_config);\n \n                     /// Read table properties\n-                    for (const String & table_name : table_names)\n+                    for (const String & key_in_database_config : keys_in_database_config)\n                     {\n-                        const auto filter_config = database_config + \".\" + table_name + \".filter\";\n+                        String table_name = key_in_database_config;\n+                        String filter_config = database_config + \".\" + table_name + \".filter\";\n+\n+                        if (key_in_database_config.starts_with(\"table[\"))\n+                        {\n+                            const auto table_name_config = database_config + \".\" + table_name + \"[@name]\";\n+                            if (config.has(table_name_config))\n+                            {\n+                                table_name = config.getString(table_name_config);\n+                                filter_config = database_config + \".table[@name='\" + table_name + \"']\";\n+                            }\n+                        }\n+\n                         if (config.has(filter_config))\n                         {\n                             try\ndiff --git a/dbms/src/IO/S3Common.cpp b/dbms/src/IO/S3Common.cpp\nindex a9015ca5982a..b981c34c2d24 100644\n--- a/dbms/src/IO/S3Common.cpp\n+++ b/dbms/src/IO/S3Common.cpp\n@@ -29,7 +29,7 @@ const std::pair<LogsLevel, Message::Priority> & convertLogLevel(Aws::Utils::Logg\n     return mapping.at(log_level);\n }\n \n-class AWSLogger : public Aws::Utils::Logging::LogSystemInterface\n+class AWSLogger final : public Aws::Utils::Logging::LogSystemInterface\n {\n public:\n     ~AWSLogger() final = default;\n",
  "test_patch": "diff --git a/dbms/tests/integration/test_row_policy/multiple_tags_with_table_names.xml b/dbms/tests/integration/test_row_policy/multiple_tags_with_table_names.xml\nnew file mode 100644\nindex 000000000000..87b22047e7e3\n--- /dev/null\n+++ b/dbms/tests/integration/test_row_policy/multiple_tags_with_table_names.xml\n@@ -0,0 +1,26 @@\n+<?xml version=\"1.0\"?>\n+<yandex>\n+    <users>\n+        <default>\n+            <!-- For testing the table filters -->\n+            <databases>\n+                <mydb>\n+                    <!-- Simple expression filter -->\n+                    <table>\n+                        <filter>a = 1</filter>\n+                    </table>\n+\n+                    <!-- Complex expression filter -->\n+                    <table name='filtered_table2'>\n+                        <filter>a + b &lt; 1 or c - d &gt; 5</filter>\n+                    </table>\n+\n+                    <!-- Filter with ALIAS column -->\n+                    <table name='.filtered_table4'>\n+                        <filter>c = 1</filter>\n+                    </table>\n+                </mydb>\n+            </databases>\n+        </default>\n+    </users>\n+</yandex>\ndiff --git a/dbms/tests/integration/test_row_policy/tag_with_table_name.xml b/dbms/tests/integration/test_row_policy/tag_with_table_name.xml\nnew file mode 100644\nindex 000000000000..4affd2d90381\n--- /dev/null\n+++ b/dbms/tests/integration/test_row_policy/tag_with_table_name.xml\n@@ -0,0 +1,26 @@\n+<?xml version=\"1.0\"?>\n+<yandex>\n+    <users>\n+        <default>\n+            <!-- For testing the table filters -->\n+            <databases>\n+                <mydb>\n+                    <!-- Simple expression filter -->\n+                    <table>\n+                        <filter>a = 1</filter>\n+                    </table>\n+\n+                    <!-- Complex expression filter -->\n+                    <table name='filtered_table2'>\n+                        <filter>a + b &lt; 1 or c - d &gt; 5</filter>\n+                    </table>\n+\n+                    <!-- Filter with ALIAS column -->\n+                    <filtered_table3>\n+                        <filter>c = 1</filter>\n+                    </filtered_table3>\n+                </mydb>\n+            </databases>\n+        </default>\n+    </users>\n+</yandex>\ndiff --git a/dbms/tests/integration/test_row_policy/test.py b/dbms/tests/integration/test_row_policy/test.py\nindex 421a4b0510c1..32f77bfae86a 100644\n--- a/dbms/tests/integration/test_row_policy/test.py\n+++ b/dbms/tests/integration/test_row_policy/test.py\n@@ -28,13 +28,19 @@ def started_cluster():\n             CREATE TABLE mydb.filtered_table1 (a UInt8, b UInt8) ENGINE MergeTree ORDER BY a;\n             INSERT INTO mydb.filtered_table1 values (0, 0), (0, 1), (1, 0), (1, 1);\n \n+            CREATE TABLE mydb.table (a UInt8, b UInt8) ENGINE MergeTree ORDER BY a;\n+            INSERT INTO mydb.table values (0, 0), (0, 1), (1, 0), (1, 1);\n+\n             CREATE TABLE mydb.filtered_table2 (a UInt8, b UInt8, c UInt8, d UInt8) ENGINE MergeTree ORDER BY a;\n             INSERT INTO mydb.filtered_table2 values (0, 0, 0, 0), (1, 2, 3, 4), (4, 3, 2, 1), (0, 0, 6, 0);\n \n             CREATE TABLE mydb.filtered_table3 (a UInt8, b UInt8, c UInt16 ALIAS a + b) ENGINE MergeTree ORDER BY a;\n             INSERT INTO mydb.filtered_table3 values (0, 0), (0, 1), (1, 0), (1, 1);\n+\n+            CREATE TABLE mydb.`.filtered_table4` (a UInt8, b UInt8, c UInt16 ALIAS a + b) ENGINE MergeTree ORDER BY a;\n+            INSERT INTO mydb.`.filtered_table4` values (0, 0), (0, 1), (1, 0), (1, 1);\n         ''')\n-        \n+\n         yield cluster\n \n     finally:\n@@ -88,6 +94,46 @@ def test_prewhere_not_supported():\n     assert expected_error in instance.query_and_get_error(\"SELECT * FROM mydb.filtered_table3 PREWHERE 1\")\n \n \n+def test_single_table_name():\n+    copy_policy_xml('tag_with_table_name.xml')\n+    assert instance.query(\"SELECT * FROM mydb.table\") == \"1\\t0\\n1\\t1\\n\"\n+    assert instance.query(\"SELECT * FROM mydb.filtered_table2\") == \"0\\t0\\t0\\t0\\n0\\t0\\t6\\t0\\n\"\n+    assert instance.query(\"SELECT * FROM mydb.filtered_table3\") == \"0\\t1\\n1\\t0\\n\"\n+\n+    assert instance.query(\"SELECT a FROM mydb.table\") == \"1\\n1\\n\"\n+    assert instance.query(\"SELECT b FROM mydb.table\") == \"0\\n1\\n\"\n+    assert instance.query(\"SELECT a FROM mydb.table WHERE a = 1\") == \"1\\n1\\n\"\n+    assert instance.query(\"SELECT a = 1 FROM mydb.table\") == \"1\\n1\\n\"\n+\n+    assert instance.query(\"SELECT a FROM mydb.filtered_table3\") == \"0\\n1\\n\"\n+    assert instance.query(\"SELECT b FROM mydb.filtered_table3\") == \"1\\n0\\n\"\n+    assert instance.query(\"SELECT c FROM mydb.filtered_table3\") == \"1\\n1\\n\"\n+    assert instance.query(\"SELECT a + b FROM mydb.filtered_table3\") == \"1\\n1\\n\"\n+    assert instance.query(\"SELECT a FROM mydb.filtered_table3 WHERE c = 1\") == \"0\\n1\\n\"\n+    assert instance.query(\"SELECT c = 1 FROM mydb.filtered_table3\") == \"1\\n1\\n\"\n+    assert instance.query(\"SELECT a + b = 1 FROM mydb.filtered_table3\") == \"1\\n1\\n\"\n+\n+\n+def test_custom_table_name():\n+    copy_policy_xml('multiple_tags_with_table_names.xml')\n+    assert instance.query(\"SELECT * FROM mydb.table\") == \"1\\t0\\n1\\t1\\n\"\n+    assert instance.query(\"SELECT * FROM mydb.filtered_table2\") == \"0\\t0\\t0\\t0\\n0\\t0\\t6\\t0\\n\"\n+    assert instance.query(\"SELECT * FROM mydb.`.filtered_table4`\") == \"0\\t1\\n1\\t0\\n\"\n+\n+    assert instance.query(\"SELECT a FROM mydb.table\") == \"1\\n1\\n\"\n+    assert instance.query(\"SELECT b FROM mydb.table\") == \"0\\n1\\n\"\n+    assert instance.query(\"SELECT a FROM mydb.table WHERE a = 1\") == \"1\\n1\\n\"\n+    assert instance.query(\"SELECT a = 1 FROM mydb.table\") == \"1\\n1\\n\"\n+\n+    assert instance.query(\"SELECT a FROM mydb.`.filtered_table4`\") == \"0\\n1\\n\"\n+    assert instance.query(\"SELECT b FROM mydb.`.filtered_table4`\") == \"1\\n0\\n\"\n+    assert instance.query(\"SELECT c FROM mydb.`.filtered_table4`\") == \"1\\n1\\n\"\n+    assert instance.query(\"SELECT a + b FROM mydb.`.filtered_table4`\") == \"1\\n1\\n\"\n+    assert instance.query(\"SELECT a FROM mydb.`.filtered_table4` WHERE c = 1\") == \"0\\n1\\n\"\n+    assert instance.query(\"SELECT c = 1 FROM mydb.`.filtered_table4`\") == \"1\\n1\\n\"\n+    assert instance.query(\"SELECT a + b = 1 FROM mydb.`.filtered_table4`\") == \"1\\n1\\n\"\n+\n+\n def test_change_of_users_xml_changes_row_policies():\n     copy_policy_xml('normal_filters.xml')\n     assert instance.query(\"SELECT * FROM mydb.filtered_table1\") == \"1\\t0\\n1\\t1\\n\"\n",
  "problem_statement": "Row-level security for MaterializedView\nThere is no possible way to configure row-level security filters (https://clickhouse.yandex/docs/en/operations/settings/settings_users/#user-name-databases) to MaterializedView (https://clickhouse.yandex/docs/en/operations/table_engines/materializedview/) because it is actually reads data from .inner.* table, but according to XML spec (https://www.w3.org/TR/REC-xml/#sec-common-syn) is not possible to start a node name from \".\".\r\n\r\nThis XML is incorrect:\r\n```\r\n<databases>\r\n    <my_database>\r\n        <.inner.my_view>\r\n            <filter>number = 42</filter>\r\n        </.inner.my_view>\r\n    </my_database>\r\n</databases>\r\n```\r\n\r\nGot an error like this:\r\n> 2019.06.27 17:45:23.764880 [ 1 ] {} <Error> Application: SAXParseException: Invalid token in '/etc/clickhouse-server/users.xml', line 52 column 21\r\n\r\nClickHouse version == 19.9.2.4\n",
  "hints_text": "",
  "created_at": "2019-12-24T17:11:06Z"
}