{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 16768,
  "instance_id": "ClickHouse__ClickHouse-16768",
  "issue_numbers": [
    "12493"
  ],
  "base_commit": "6eda689aa34fe523de08421ed4e9489673691fee",
  "patch": "diff --git a/src/Parsers/ParserCreateQuery.h b/src/Parsers/ParserCreateQuery.h\nindex 3c20446eb154..fbdc308d5bcd 100644\n--- a/src/Parsers/ParserCreateQuery.h\n+++ b/src/Parsers/ParserCreateQuery.h\n@@ -144,8 +144,8 @@ bool IParserColumnDeclaration<NameParser>::parseImpl(Pos & pos, ASTPtr & node, E\n     /// doesn't check that parsed string is existing data type. In this way\n     /// REMOVE keyword can be parsed as data type and further parsing will fail.\n     /// So we just check this keyword and in case of success return column\n-    /// column declaration with name only.\n-    if (s_remove.checkWithoutMoving(pos, expected))\n+    /// declaration with name only.\n+    if (!require_type && s_remove.checkWithoutMoving(pos, expected))\n     {\n         if (!check_keywords_after_name)\n             return false;\n@@ -165,11 +165,12 @@ bool IParserColumnDeclaration<NameParser>::parseImpl(Pos & pos, ASTPtr & node, E\n     ASTPtr codec_expression;\n     ASTPtr ttl_expression;\n \n-    if (!s_default.checkWithoutMoving(pos, expected) &&\n-        !s_materialized.checkWithoutMoving(pos, expected) &&\n-        !s_alias.checkWithoutMoving(pos, expected) &&\n-        !s_comment.checkWithoutMoving(pos, expected) &&\n-        !s_codec.checkWithoutMoving(pos, expected))\n+    if (!s_default.checkWithoutMoving(pos, expected)\n+        && !s_materialized.checkWithoutMoving(pos, expected)\n+        && !s_alias.checkWithoutMoving(pos, expected)\n+        && (require_type\n+            || (!s_comment.checkWithoutMoving(pos, expected)\n+                && !s_codec.checkWithoutMoving(pos, expected))))\n     {\n         if (!type_parser.parse(pos, type, expected))\n             return false;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01559_misplaced_codec_diagnostics.reference b/tests/queries/0_stateless/01559_misplaced_codec_diagnostics.reference\nnew file mode 100644\nindex 000000000000..d5bdb816bf2c\n--- /dev/null\n+++ b/tests/queries/0_stateless/01559_misplaced_codec_diagnostics.reference\n@@ -0,0 +1,1 @@\n+Unknown data type family: CODEC\ndiff --git a/tests/queries/0_stateless/01559_misplaced_codec_diagnostics.sh b/tests/queries/0_stateless/01559_misplaced_codec_diagnostics.sh\nnew file mode 100755\nindex 000000000000..9904b6388d61\n--- /dev/null\n+++ b/tests/queries/0_stateless/01559_misplaced_codec_diagnostics.sh\n@@ -0,0 +1,6 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+. \"$CURDIR\"/../shell_config.sh\n+\n+${CLICKHOUSE_CLIENT} --query \"CREATE TABLE t (c CODEC(NONE)) ENGINE = Memory\" 2>&1 | grep -oF 'Unknown data type family: CODEC' | uniq\n",
  "problem_statement": "Syntax error: failed at position 32: CODEC... Expected one of: CODEC\n**Describe the bug**\r\nParser error message is not clear as it expects `CODEC` and shows error on `CODEC` string. \r\n**How to reproduce**\r\n``` sql\r\n2020.07.14 14:18:50.061165 [ 139 ] {9b17c1cb-0379-457e-98d2-86af9cf8e975} <Debug> executeQuery: (from 172.17.0.1:33292) CREATE TABLE t5 (c0 Int32, c1 CODEC (NONE) DEFAULT 1154287429) ENGINE = MergeTree() ORDER BY tuple(); \r\n2020.07.14 14:18:50.061400 [ 139 ] {9b17c1cb-0379-457e-98d2-86af9cf8e975} <Error> executeQuery: Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 32: CODEC (NONE) DEFAULT 1154287429) ENGINE = MergeTree()  ORDER BY tuple();\r\n. Expected one of: CODEC, ALIAS, DEFAULT, MATERIALIZED, COMMENT (version 20.5.2.7 (official build)) (from 172.17.0.1:33292) (in query: CREATE TABLE t5 (c0 Int32, c1 CODEC (NONE) DEFAULT 1154287429) ENGINE = MergeTree() ORDER BY tuple(); ), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x10ed0da0 in /usr/bin/clickhouse\r\n1. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x95c923d in /usr/bin/clickhouse\r\n2. ? @ 0xebe466d in /usr/bin/clickhouse\r\n3. ? @ 0xe0741fb in /usr/bin/clickhouse\r\n4. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, DB::Context&, std::__1::function<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>) @ 0xe078553 in /usr/bin/clickhouse\r\n5. DB::HTTPHandler::processQuery(Poco::Net::HTTPServerRequest&, HTMLForm&, Poco::Net::HTTPServerResponse&, DB::HTTPHandler::Output&) @ 0xe634b09 in /usr/bin/clickhouse\r\n6. DB::HTTPHandler::handleRequest(Poco::Net::HTTPServerRequest&, Poco::Net::HTTPServerResponse&) @ 0xe6382ba in /usr/bin/clickhouse\r\n7. Poco::Net::HTTPServerConnection::run() @ 0x10db5183 in /usr/bin/clickhouse\r\n8. Poco::Net::TCPServerConnection::start() @ 0x10deebcb in /usr/bin/clickhouse\r\n9. Poco::Net::TCPServerDispatcher::run() @ 0x10def05b in /usr/bin/clickhouse\r\n10. Poco::PooledThread::run() @ 0x10f6db86 in /usr/bin/clickhouse\r\n11. Poco::ThreadImpl::runnableEntry(void*) @ 0x10f68f80 in /usr/bin/clickhouse\r\n12. start_thread @ 0x76db in /lib/x86_64-linux-gnu/libpthread-2.27.so\r\n13. __clone @ 0x12188f in /lib/x86_64-linux-gnu/libc-2.27.so\r\n\r\n2020.07.14 14:18:50.061676 [ 139 ] {} <Error> DynamicQueryHandler: Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 32: CODEC (NONE) DEFAULT 1154287429) ENGINE = MergeTree()  ORDER BY tuple();\r\n. Expected one of: CODEC, ALIAS, DEFAULT, MATERIALIZED, COMMENT, Stack trace (when copying this message, always include the lines below):\r\n\r\n0. Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x10ed0da0 in /usr/bin/clickhouse\r\n1. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x95c923d in /usr/bin/clickhouse\r\n2. ? @ 0xebe466d in /usr/bin/clickhouse\r\n3. ? @ 0xe0741fb in /usr/bin/clickhouse\r\n4. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, DB::Context&, std::__1::function<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>) @ 0xe078553 in /usr/bin/clickhouse\r\n5. DB::HTTPHandler::processQuery(Poco::Net::HTTPServerRequest&, HTMLForm&, Poco::Net::HTTPServerResponse&, DB::HTTPHandler::Output&) @ 0xe634b09 in /usr/bin/clickhouse\r\n6. DB::HTTPHandler::handleRequest(Poco::Net::HTTPServerRequest&, Poco::Net::HTTPServerResponse&) @ 0xe6382ba in /usr/bin/clickhouse\r\n7. Poco::Net::HTTPServerConnection::run() @ 0x10db5183 in /usr/bin/clickhouse\r\n8. Poco::Net::TCPServerConnection::start() @ 0x10deebcb in /usr/bin/clickhouse\r\n9. Poco::Net::TCPServerDispatcher::run() @ 0x10def05b in /usr/bin/clickhouse\r\n10. Poco::PooledThread::run() @ 0x10f6db86 in /usr/bin/clickhouse\r\n11. Poco::ThreadImpl::runnableEntry(void*) @ 0x10f68f80 in /usr/bin/clickhouse\r\n12. start_thread @ 0x76db in /lib/x86_64-linux-gnu/libpthread-2.27.so\r\n13. __clone @ 0x12188f in /lib/x86_64-linux-gnu/libc-2.27.so\r\n (version 20.5.2.7 (official build))\r\n```\n",
  "hints_text": "```\r\nSyntax error: failed at position 19 ('CODEC'):\r\n\r\nCREATE TABLE t (c CODEC)\r\n\r\nExpected one of: CODEC, REMOVE, ALIAS, DEFAULT, MATERIALIZED, COMMENT\r\n```",
  "created_at": "2020-11-06T18:21:08Z"
}