{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 23392,
  "instance_id": "ClickHouse__ClickHouse-23392",
  "issue_numbers": [
    "4854"
  ],
  "base_commit": "022b2e918b6f071ec7d80d6d881f381de86796fa",
  "patch": "diff --git a/src/DataTypes/DataTypeDateTime.h b/src/DataTypes/DataTypeDateTime.h\nindex 84df8b218130..926d529a5d8c 100644\n--- a/src/DataTypes/DataTypeDateTime.h\n+++ b/src/DataTypes/DataTypeDateTime.h\n@@ -19,9 +19,12 @@ class TimezoneMixin\n     TimezoneMixin(const TimezoneMixin &) = default;\n \n     const DateLUTImpl & getTimeZone() const { return time_zone; }\n+    bool hasExplicitTimeZone() const { return has_explicit_time_zone; }\n \n protected:\n+    /// true if time zone name was provided in data type parameters, false if it's using default time zone.\n     bool has_explicit_time_zone;\n+\n     const DateLUTImpl & time_zone;\n     const DateLUTImpl & utc_time_zone;\n };\ndiff --git a/src/Functions/FunctionCustomWeekToSomething.h b/src/Functions/FunctionCustomWeekToSomething.h\nindex 4050bb512bd9..c6f56fdc50a1 100644\n--- a/src/Functions/FunctionCustomWeekToSomething.h\n+++ b/src/Functions/FunctionCustomWeekToSomething.h\n@@ -5,7 +5,6 @@\n #include <Functions/CustomWeekTransforms.h>\n #include <Functions/IFunctionImpl.h>\n #include <Functions/TransformDateTime64.h>\n-#include <Functions/extractTimeZoneFromFunctionArguments.h>\n #include <IO/WriteHelpers.h>\n \n \ndiff --git a/src/Functions/extractTimeZoneFromFunctionArguments.cpp b/src/Functions/extractTimeZoneFromFunctionArguments.cpp\nindex 0ba08b3c6121..dbc014ad2ebe 100644\n--- a/src/Functions/extractTimeZoneFromFunctionArguments.cpp\n+++ b/src/Functions/extractTimeZoneFromFunctionArguments.cpp\n@@ -44,9 +44,9 @@ std::string extractTimeZoneNameFromFunctionArguments(const ColumnsWithTypeAndNam\n \n         /// If time zone is attached to an argument of type DateTime.\n         if (const auto * type = checkAndGetDataType<DataTypeDateTime>(arguments[datetime_arg_num].type.get()))\n-            return type->getTimeZone().getTimeZone();\n+            return type->hasExplicitTimeZone() ? type->getTimeZone().getTimeZone() : std::string();\n         if (const auto * type = checkAndGetDataType<DataTypeDateTime64>(arguments[datetime_arg_num].type.get()))\n-            return type->getTimeZone().getTimeZone();\n+            return type->hasExplicitTimeZone() ? type->getTimeZone().getTimeZone() : std::string();\n \n         return {};\n     }\ndiff --git a/src/Functions/extractTimeZoneFromFunctionArguments.h b/src/Functions/extractTimeZoneFromFunctionArguments.h\nindex 6323b45f5681..9dd3fdd49030 100644\n--- a/src/Functions/extractTimeZoneFromFunctionArguments.h\n+++ b/src/Functions/extractTimeZoneFromFunctionArguments.h\n@@ -13,6 +13,7 @@ namespace DB\n class Block;\n \n /// Determine working timezone either from optional argument with time zone name or from time zone in DateTime type of argument.\n+/// Returns empty string if default time zone should be used.\n std::string extractTimeZoneNameFromFunctionArguments(\n     const ColumnsWithTypeAndName & arguments, size_t time_zone_arg_num, size_t datetime_arg_num);\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01836_date_time_keep_default_timezone_on_operations_den_crane.reference b/tests/queries/0_stateless/01836_date_time_keep_default_timezone_on_operations_den_crane.reference\nnew file mode 100644\nindex 000000000000..fc624e3510f7\n--- /dev/null\n+++ b/tests/queries/0_stateless/01836_date_time_keep_default_timezone_on_operations_den_crane.reference\n@@ -0,0 +1,6 @@\n+DateTime\n+DateTime\n+DateTime(\\'UTC\\')\n+DateTime64(3)\n+DateTime64(3)\n+DateTime64(3, \\'UTC\\')\ndiff --git a/tests/queries/0_stateless/01836_date_time_keep_default_timezone_on_operations_den_crane.sql b/tests/queries/0_stateless/01836_date_time_keep_default_timezone_on_operations_den_crane.sql\nnew file mode 100644\nindex 000000000000..be47cfb0411e\n--- /dev/null\n+++ b/tests/queries/0_stateless/01836_date_time_keep_default_timezone_on_operations_den_crane.sql\n@@ -0,0 +1,26 @@\n+SELECT toTypeName(now());\n+SELECT toTypeName(now() - 1);\n+SELECT toTypeName(now('UTC') - 1);\n+\n+SELECT toTypeName(now64(3));\n+SELECT toTypeName(now64(3) - 1);\n+SELECT toTypeName(toTimeZone(now64(3), 'UTC') - 1);\n+\n+DROP TABLE IF EXISTS tt_null;\n+DROP TABLE IF EXISTS tt;\n+DROP TABLE IF EXISTS tt_mv;\n+\n+create table tt_null(p String) engine = Null;\n+\n+create table tt(p String,tmin AggregateFunction(min, DateTime)) \n+engine = AggregatingMergeTree  order by p;\n+\n+create materialized view tt_mv to tt as \n+select p, minState(now() - interval 30 minute) as tmin\n+from tt_null group by p;\n+\n+insert into tt_null values('x');\n+\n+DROP TABLE tt_null;\n+DROP TABLE tt;\n+DROP TABLE tt_mv;\n",
  "problem_statement": "Error: Type mismatch for column because of INTERVAL\n```\r\ncreate table tt_null(p String) engine = Null;\r\ncreate table tt(p String,tmin AggregateFunction(min, DateTime)) \r\nengine = AggregatingMergeTree  order by p;\r\ncreate materialized view tt_mv to tt as \r\nselect p, minState(now() - interval 30 minute) as tmin\r\nfrom tt_null group by p;\r\n\r\ninsert into tt_null values('x');\r\n\r\n```\r\nReceived exception from server (version 19.4.1):\r\nCode: 53. DB::Exception: Received from localhost:9000, ::1. DB::Exception: Type mismatch for column tmin. Column has type AggregateFunction(min, DateTime), got type AggregateFunction(min, DateTime('UTC')): while pushing to view dw.tt_mv.\n",
  "hints_text": "still relevant 20.11.1\nStill relevant in 21.3.\n```\r\nmilovidov-desktop :) SELECT toTypeName(now())\r\n\r\nSELECT toTypeName(now())\r\n\r\nQuery id: 7b95112a-c7bb-456b-83ea-6780c799d813\r\n\r\n\u250c\u2500toTypeName(now())\u2500\u2510\r\n\u2502 DateTime          \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 0.002 sec. \r\n\r\nmilovidov-desktop :) SELECT toTypeName(now() - 1)\r\n\r\nSELECT toTypeName(now() - 1)\r\n\r\nQuery id: b22fdb18-0926-4833-a476-818c67b57b12\r\n\r\n\u250c\u2500toTypeName(minus(now(), 1))\u2500\u2510\r\n\u2502 DateTime('Europe/Moscow')   \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 0.002 sec.\r\n```",
  "created_at": "2021-04-20T21:10:49Z"
}