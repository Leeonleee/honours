diff --git a/src/DataTypes/DataTypeDateTime.h b/src/DataTypes/DataTypeDateTime.h
index 84df8b218130..926d529a5d8c 100644
--- a/src/DataTypes/DataTypeDateTime.h
+++ b/src/DataTypes/DataTypeDateTime.h
@@ -19,9 +19,12 @@ class TimezoneMixin
     TimezoneMixin(const TimezoneMixin &) = default;
 
     const DateLUTImpl & getTimeZone() const { return time_zone; }
+    bool hasExplicitTimeZone() const { return has_explicit_time_zone; }
 
 protected:
+    /// true if time zone name was provided in data type parameters, false if it's using default time zone.
     bool has_explicit_time_zone;
+
     const DateLUTImpl & time_zone;
     const DateLUTImpl & utc_time_zone;
 };
diff --git a/src/Functions/FunctionCustomWeekToSomething.h b/src/Functions/FunctionCustomWeekToSomething.h
index 4050bb512bd9..c6f56fdc50a1 100644
--- a/src/Functions/FunctionCustomWeekToSomething.h
+++ b/src/Functions/FunctionCustomWeekToSomething.h
@@ -5,7 +5,6 @@
 #include <Functions/CustomWeekTransforms.h>
 #include <Functions/IFunctionImpl.h>
 #include <Functions/TransformDateTime64.h>
-#include <Functions/extractTimeZoneFromFunctionArguments.h>
 #include <IO/WriteHelpers.h>
 
 
diff --git a/src/Functions/extractTimeZoneFromFunctionArguments.cpp b/src/Functions/extractTimeZoneFromFunctionArguments.cpp
index 0ba08b3c6121..dbc014ad2ebe 100644
--- a/src/Functions/extractTimeZoneFromFunctionArguments.cpp
+++ b/src/Functions/extractTimeZoneFromFunctionArguments.cpp
@@ -44,9 +44,9 @@ std::string extractTimeZoneNameFromFunctionArguments(const ColumnsWithTypeAndNam
 
         /// If time zone is attached to an argument of type DateTime.
         if (const auto * type = checkAndGetDataType<DataTypeDateTime>(arguments[datetime_arg_num].type.get()))
-            return type->getTimeZone().getTimeZone();
+            return type->hasExplicitTimeZone() ? type->getTimeZone().getTimeZone() : std::string();
         if (const auto * type = checkAndGetDataType<DataTypeDateTime64>(arguments[datetime_arg_num].type.get()))
-            return type->getTimeZone().getTimeZone();
+            return type->hasExplicitTimeZone() ? type->getTimeZone().getTimeZone() : std::string();
 
         return {};
     }
diff --git a/src/Functions/extractTimeZoneFromFunctionArguments.h b/src/Functions/extractTimeZoneFromFunctionArguments.h
index 6323b45f5681..9dd3fdd49030 100644
--- a/src/Functions/extractTimeZoneFromFunctionArguments.h
+++ b/src/Functions/extractTimeZoneFromFunctionArguments.h
@@ -13,6 +13,7 @@ namespace DB
 class Block;
 
 /// Determine working timezone either from optional argument with time zone name or from time zone in DateTime type of argument.
+/// Returns empty string if default time zone should be used.
 std::string extractTimeZoneNameFromFunctionArguments(
     const ColumnsWithTypeAndName & arguments, size_t time_zone_arg_num, size_t datetime_arg_num);
 
