{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 11340,
  "instance_id": "ClickHouse__ClickHouse-11340",
  "issue_numbers": [
    "10398"
  ],
  "base_commit": "8608d93639ce7b3c2530fdd3d41e44dae0cfb4e8",
  "patch": "diff --git a/src/Storages/StorageJoin.cpp b/src/Storages/StorageJoin.cpp\nindex 9b17334e570e..5cceefe907bf 100644\n--- a/src/Storages/StorageJoin.cpp\n+++ b/src/Storages/StorageJoin.cpp\n@@ -251,22 +251,26 @@ class JoinSource : public SourceWithProgress\n         , max_block_size(max_block_size_)\n         , sample_block(std::move(sample_block_))\n     {\n-        columns.resize(sample_block.columns());\n         column_indices.resize(sample_block.columns());\n-        column_with_null.resize(sample_block.columns());\n+\n+        auto & saved_block = parent.getJoinedData()->sample_block;\n+\n         for (size_t i = 0; i < sample_block.columns(); ++i)\n         {\n             auto & [_, type, name] = sample_block.getByPosition(i);\n             if (parent.right_table_keys.has(name))\n             {\n                 key_pos = i;\n-                column_with_null[i] = parent.right_table_keys.getByName(name).type->isNullable();\n+                const auto & column = parent.right_table_keys.getByName(name);\n+                restored_block.insert(column);\n             }\n             else\n             {\n-                auto pos = parent.sample_block_with_columns_to_add.getPositionByName(name);\n+                size_t pos = saved_block.getPositionByName(name);\n                 column_indices[i] = pos;\n-                column_with_null[i] = !parent.sample_block_with_columns_to_add.getByPosition(pos).type->equals(*type);\n+\n+                const auto & column = saved_block.getByPosition(pos);\n+                restored_block.insert(column);\n             }\n         }\n     }\n@@ -291,11 +295,10 @@ class JoinSource : public SourceWithProgress\n     std::shared_lock<std::shared_mutex> lock;\n     UInt64 max_block_size;\n     Block sample_block;\n+    Block restored_block; /// sample_block with parent column types\n \n     ColumnNumbers column_indices;\n-    std::vector<bool> column_with_null;\n     std::optional<size_t> key_pos;\n-    MutableColumns columns;\n \n     std::unique_ptr<void, std::function<void(void *)>> position; /// type erasure\n \n@@ -303,23 +306,7 @@ class JoinSource : public SourceWithProgress\n     template <ASTTableJoin::Kind KIND, ASTTableJoin::Strictness STRICTNESS, typename Maps>\n     Chunk createChunk(const Maps & maps)\n     {\n-        for (size_t i = 0; i < sample_block.columns(); ++i)\n-        {\n-            const auto & src_col = sample_block.safeGetByPosition(i);\n-            columns[i] = src_col.type->createColumn();\n-            if (column_with_null[i])\n-            {\n-                if (key_pos == i)\n-                {\n-                    // unwrap null key column\n-                    auto & nullable_col = assert_cast<ColumnNullable &>(*columns[i]);\n-                    columns[i] = nullable_col.getNestedColumnPtr()->assumeMutable();\n-                }\n-                else\n-                    // wrap non key column with null\n-                    columns[i] = makeNullable(std::move(columns[i]))->assumeMutable();\n-            }\n-        }\n+        MutableColumns columns = restored_block.cloneEmpty().mutateColumns();\n \n         size_t rows_added = 0;\n \n@@ -327,7 +314,7 @@ class JoinSource : public SourceWithProgress\n         {\n #define M(TYPE)                                           \\\n     case HashJoin::Type::TYPE:                                \\\n-        rows_added = fillColumns<KIND, STRICTNESS>(*maps.TYPE); \\\n+        rows_added = fillColumns<KIND, STRICTNESS>(*maps.TYPE, columns); \\\n         break;\n             APPLY_FOR_JOIN_VARIANTS_LIMITED(M)\n #undef M\n@@ -340,29 +327,27 @@ class JoinSource : public SourceWithProgress\n         if (!rows_added)\n             return {};\n \n-        Columns res_columns;\n-        res_columns.reserve(columns.size());\n-\n+        /// Correct nullability\n         for (size_t i = 0; i < columns.size(); ++i)\n-            if (column_with_null[i])\n+        {\n+            bool src_nullable = restored_block.getByPosition(i).type->isNullable();\n+            bool dst_nullable = sample_block.getByPosition(i).type->isNullable();\n+\n+            if (src_nullable && !dst_nullable)\n             {\n-                if (key_pos == i)\n-                    res_columns.emplace_back(makeNullable(std::move(columns[i])));\n-                else\n-                {\n-                    const auto & nullable_col = assert_cast<const ColumnNullable &>(*columns[i]);\n-                    res_columns.emplace_back(makeNullable(nullable_col.getNestedColumnPtr()));\n-                }\n+                auto & nullable_column = assert_cast<ColumnNullable &>(*columns[i]);\n+                columns[i] = nullable_column.getNestedColumnPtr()->assumeMutable();\n             }\n-            else\n-                res_columns.emplace_back(std::move(columns[i]));\n+            else if (!src_nullable && dst_nullable)\n+                columns[i] = makeNullable(std::move(columns[i]))->assumeMutable();\n+        }\n \n-        UInt64 num_rows = res_columns.at(0)->size();\n-        return Chunk(std::move(res_columns), num_rows);\n+        UInt64 num_rows = columns.at(0)->size();\n+        return Chunk(std::move(columns), num_rows);\n     }\n \n     template <ASTTableJoin::Kind KIND, ASTTableJoin::Strictness STRICTNESS, typename Map>\n-    size_t fillColumns(const Map & map)\n+    size_t fillColumns(const Map & map, MutableColumns & columns)\n     {\n         size_t rows_added = 0;\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01140_select_from_storage_join_fix.reference b/tests/queries/0_stateless/01140_select_from_storage_join_fix.reference\nnew file mode 100644\nindex 000000000000..101a270ad39b\n--- /dev/null\n+++ b/tests/queries/0_stateless/01140_select_from_storage_join_fix.reference\n@@ -0,0 +1,8 @@\n+1\ts\t1\tString\tString\n+2\ts\t2\tString\tString\n+3\ts\t3\tNullable(String)\tString\n+4\ts\t4\tString\tNullable(String)\n+1\ts\t1\tString\tString\n+2\ts\t2\tString\tString\n+3\ts\t3\tNullable(String)\tString\n+4\ts\t4\tString\tNullable(String)\ndiff --git a/tests/queries/0_stateless/01140_select_from_storage_join_fix.sql b/tests/queries/0_stateless/01140_select_from_storage_join_fix.sql\nnew file mode 100644\nindex 000000000000..4e64c90f56de\n--- /dev/null\n+++ b/tests/queries/0_stateless/01140_select_from_storage_join_fix.sql\n@@ -0,0 +1,42 @@\n+DROP TABLE IF EXISTS t1;\n+DROP TABLE IF EXISTS t2;\n+DROP TABLE IF EXISTS t3;\n+DROP TABLE IF EXISTS t4;\n+\n+CREATE TABLE t1 (id String, name String, value UInt32)\n+ENGINE = Join(ANY, LEFT, id)\n+SETTINGS join_use_nulls = 1;\n+\n+CREATE TABLE t2 (id String, name String, value UInt32)\n+ENGINE = Join(ANY, LEFT, id)\n+SETTINGS join_use_nulls = 0;\n+\n+CREATE TABLE t3 (id Nullable(String), name String, value UInt32)\n+ENGINE = Join(ANY, LEFT, id)\n+SETTINGS join_use_nulls = 1;\n+\n+CREATE TABLE t4 (id String, name Nullable(String), value UInt32)\n+ENGINE = Join(ANY, LEFT, id)\n+SETTINGS join_use_nulls = 0;\n+\n+insert into t1 values('1', 's', 1);\n+insert into t2 values('2', 's', 2);\n+insert into t3 values('3', 's', 3);\n+insert into t4 values('4', 's', 4);\n+\n+select *, toTypeName(id), toTypeName(name) from t1;\n+select *, toTypeName(id), toTypeName(name) from t2;\n+select *, toTypeName(id), toTypeName(name) from t3;\n+select *, toTypeName(id), toTypeName(name) from t4;\n+\n+SET join_use_nulls = 1;\n+\n+select *, toTypeName(id), toTypeName(name) from t1;\n+select *, toTypeName(id), toTypeName(name) from t2;\n+select *, toTypeName(id), toTypeName(name) from t3;\n+select *, toTypeName(id), toTypeName(name) from t4;\n+\n+DROP TABLE t1;\n+DROP TABLE t2;\n+DROP TABLE t3;\n+DROP TABLE t4;\n",
  "problem_statement": "Server crash on select from engine=Join query\n**Describe the unexpected behavior**\r\nWhen trying to run such a query\r\n`select * from table_with_join_engine`\r\nI've got no error messages and the server crashes with Fatal error in server log.\r\n\r\n**How to reproduce**\r\n**Version:** 20.3.5.21\r\n\r\n```\r\nCREATE TABLE table_with_join_engine (\r\n    id                   String,\r\n    name_rus             String\r\n)\r\nENGINE = Join(ANY, LEFT, id)\r\nSETTINGS join_use_nulls = 1\r\n\r\ninsert into table_with_join_engine values('22', '\u0441\u0442\u0440\u043e\u043a\u0430')\r\n\r\nselect * from table_with_join_engine\r\n```\r\n\r\n**Expected behavior**\r\nSome error message without crash.\r\n\r\n**Error message and/or stacktrace**\r\nIn server log I got:\r\n```\r\n2020.04.21 09:43:37.440287 [ 77328 ] {} <Fatal> BaseDaemon: ########################################\r\n2020.04.21 09:43:37.440363 [ 77328 ] {} <Fatal> BaseDaemon: (version 20.3.5.21 (official build)) (from thread 77311) (query_id: b464efd9-09d6-4fff-a171-1adb0b6adb4a) Received signal Bus error (7).\r\n2020.04.21 09:43:37.440389 [ 77328 ] {} <Fatal> BaseDaemon: Unknown si_code.\r\n2020.04.21 09:43:37.440415 [ 77328 ] {} <Fatal> BaseDaemon: Stack trace: 0xcf29fbd 0xdc817d7 0xdc0a4a9 0xdc0a332 0xdbca30d 0xdbb2881 0xdbb6b2d 0xdbb8bb8 0xdbb8de5 0xd539045 0x8fde652 0x8fe1eb3 0xe356814 0xe3867bb 0xe386c3d 0x1059d237 0x1059903c 0x1059a9dd 0x7fad6e5716db 0x7fad6ee5088f\r\n2020.04.21 09:43:37.440511 [ 77328 ] {} <Fatal> BaseDaemon: 3. DB::DataTypeString::serializeTextJSON(DB::IColumn const&, unsigned long, DB::WriteBuffer&, DB::FormatSettings const&) const @ 0xcf29fbd in /usr/bin/clickhouse\r\n2020.04.21 09:43:37.440547 [ 77328 ] {} <Fatal> BaseDaemon: 4. DB::JSONRowOutputFormat::writeField(DB::IColumn const&, DB::IDataType const&, unsigned long) @ 0xdc817d7 in /usr/bin/clickhouse\r\n2020.04.21 09:43:37.440569 [ 77328 ] {} <Fatal> BaseDaemon: 5. DB::IRowOutputFormat::write(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > > const&, unsigned long) @ 0xdc0a4a9 in /usr/bin/clickhouse\r\n2020.04.21 09:43:37.440582 [ 77328 ] {} <Fatal> BaseDaemon: 6. DB::IRowOutputFormat::consume(DB::Chunk) @ 0xdc0a332 in /usr/bin/clickhouse\r\n2020.04.21 09:43:37.440600 [ 77328 ] {} <Fatal> BaseDaemon: 7. DB::IOutputFormat::work() @ 0xdbca30d in /usr/bin/clickhouse\r\n2020.04.21 09:43:37.440611 [ 77328 ] {} <Fatal> BaseDaemon: 8. ? @ 0xdbb2881 in /usr/bin/clickhouse\r\n2020.04.21 09:43:37.440623 [ 77328 ] {} <Fatal> BaseDaemon: 9. DB::PipelineExecutor::executeSingleThread(unsigned long, unsigned long) @ 0xdbb6b2d in /usr/bin/clickhouse\r\n2020.04.21 09:43:37.440635 [ 77328 ] {} <Fatal> BaseDaemon: 10. DB::PipelineExecutor::executeImpl(unsigned long) @ 0xdbb8bb8 in /usr/bin/clickhouse\r\n2020.04.21 09:43:37.440661 [ 77328 ] {} <Fatal> BaseDaemon: 11. DB::PipelineExecutor::execute(unsigned long) @ 0xdbb8de5 in /usr/bin/clickhouse\r\n2020.04.21 09:43:37.440696 [ 77328 ] {} <Fatal> BaseDaemon: 12. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, DB::Context&, std::__1::function<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>) @ 0xd539045 in /usr/bin/clickhouse\r\n2020.04.21 09:43:37.440726 [ 77328 ] {} <Fatal> BaseDaemon: 13. DB::HTTPHandler::processQuery(Poco::Net::HTTPServerRequest&, HTMLForm&, Poco::Net::HTTPServerResponse&, DB::HTTPHandler::Output&) @ 0x8fde652 in /usr/bin/clickhouse\r\n2020.04.21 09:43:37.440738 [ 77328 ] {} <Fatal> BaseDaemon: 14. DB::HTTPHandler::handleRequest(Poco::Net::HTTPServerRequest&, Poco::Net::HTTPServerResponse&) @ 0x8fe1eb3 in /usr/bin/clickhouse\r\n2020.04.21 09:43:37.440769 [ 77328 ] {} <Fatal> BaseDaemon: 15. Poco::Net::HTTPServerConnection::run() @ 0xe356814 in /usr/bin/clickhouse\r\n2020.04.21 09:43:37.440786 [ 77328 ] {} <Fatal> BaseDaemon: 16. Poco::Net::TCPServerConnection::start() @ 0xe3867bb in /usr/bin/clickhouse\r\n2020.04.21 09:43:37.440797 [ 77328 ] {} <Fatal> BaseDaemon: 17. Poco::Net::TCPServerDispatcher::run() @ 0xe386c3d in /usr/bin/clickhouse\r\n2020.04.21 09:43:37.440826 [ 77328 ] {} <Fatal> BaseDaemon: 18. Poco::PooledThread::run() @ 0x1059d237 in /usr/bin/clickhouse\r\n2020.04.21 09:43:37.440854 [ 77328 ] {} <Fatal> BaseDaemon: 19. Poco::ThreadImpl::runnableEntry(void*) @ 0x1059903c in /usr/bin/clickhouse\r\n2020.04.21 09:43:37.440867 [ 77328 ] {} <Fatal> BaseDaemon: 20. ? @ 0x1059a9dd in /usr/bin/clickhouse\r\n2020.04.21 09:43:37.440888 [ 77328 ] {} <Fatal> BaseDaemon: 21. start_thread @ 0x76db in /lib/x86_64-linux-gnu/libpthread-2.27.so\r\n2020.04.21 09:43:37.440908 [ 77328 ] {} <Fatal> BaseDaemon: 22. __clone @ 0x12188f in /lib/x86_64-linux-gnu/libc-2.27.so\r\n```\n",
  "hints_text": "#10200 ? \nIt's strange that you have JSONRowOutputFormat in stack trace, cause your query has no output format specified. Does the crash appear with default output format?\n> \r\n> \r\n> #10200 ?\r\n\r\nNo. I do not face such an issue. Only illegal query crashes. And it remains on 20.3.7.46.\r\n\r\n\r\n\r\n> \r\n> \r\n> It's strange that you have JSONRowOutputFormat in stack trace, cause your query has no output format specified. Does the crash appear with default output format?\r\n\r\nI ran this query from TABIX when it crashes. If I run it from clickhouse-client I've got this message in log without server crash:\r\n```\r\n2020.04.23 09:55:00.620096 [ 26736 ] {f5509706-1703-4aa5-935c-2632e8ee4b81} <Error> executeQuery: Code: 368, e.displayText() = DB::Exception: Bad cast from type DB::ColumnNullable to DB::ColumnString (version 20.3.7.46 (official build)) (from [::ffff:127.0.0.1]:47264) (in query: SELECT * FROM table_with_join_engine LIMIT 10), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x10541260 in /usr/bin/clickhouse\r\n1. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x8f3f72d in /usr/bin/clickhouse\r\n2. std::__1::enable_if<is_reference_v<DB::ColumnString const&>, DB::ColumnString const&>::type typeid_cast<DB::ColumnString const&, DB::IColumn const>(DB::IColumn const&) @ 0x9079888 in /usr/bin/clickhouse\r\n3. DB::DataTypeString::serializeBinaryBulk(DB::IColumn const&, DB::WriteBuffer&, unsigned long, unsigned long) const @ 0xcf54806 in /usr/bin/clickhouse\r\n4. DB::NativeBlockOutputStream::writeData(DB::IDataType const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&, DB::WriteBuffer&, unsigned long, unsigned long) @ 0xce81294 in /usr/bin/clickhouse\r\n5. DB::NativeBlockOutputStream::write(DB::Block const&) @ 0xce82742 in /usr/bin/clickhouse\r\n6. DB::TCPHandler::sendData(DB::Block const&) @ 0x901c4c1 in /usr/bin/clickhouse\r\n7. DB::TCPHandler::processOrdinaryQueryWithProcessors() @ 0x901d580 in /usr/bin/clickhouse\r\n8. DB::TCPHandler::runImpl() @ 0x90225bb in /usr/bin/clickhouse\r\n9. DB::TCPHandler::run() @ 0x90234c0 in /usr/bin/clickhouse\r\n10. Poco::Net::TCPServerConnection::start() @ 0xe3b885b in /usr/bin/clickhouse\r\n11. Poco::Net::TCPServerDispatcher::run() @ 0xe3b8cdd in /usr/bin/clickhouse\r\n12. Poco::PooledThread::run() @ 0x105cf3c7 in /usr/bin/clickhouse\r\n13. Poco::ThreadImpl::runnableEntry(void*) @ 0x105cb1cc in /usr/bin/clickhouse\r\n14. ? @ 0x105ccb6d in /usr/bin/clickhouse\r\n15. start_thread @ 0x76db in /lib/x86_64-linux-gnu/libpthread-2.27.so\r\n16. __clone @ 0x12188f in /lib/x86_64-linux-gnu/libc-2.27.so\r\n```\r\n\nIt looks like we have wrong conversion from nullable to not nullable in case when EngineJoin created with `SETTINGS join_use_nulls = 1` and query has no JOIN, but use engine itself.\n@4ertus2 It is reproducing in master:\r\n\r\n```\r\nmilovidov-desktop :) select * from table_with_join_engine\r\n\r\nSELECT *\r\nFROM table_with_join_engine\r\n\r\n\u2192 Progress: 0.00 rows, 0.00 B (0.00 rows/s., 0.00 B/s.) \r\nException on client:\r\nCode: 271. DB::Exception: Data compressed with different methods, given method byte 0x69, previous method byte 0x82: while receiving packet from localhost:9000\r\n```",
  "created_at": "2020-06-01T17:29:46Z"
}