{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 39113,
  "instance_id": "ClickHouse__ClickHouse-39113",
  "issue_numbers": [
    "37818",
    "39109"
  ],
  "base_commit": "d0e6f8ebc120a682bb09231fbbba1a904c8c29bb",
  "patch": "diff --git a/src/Functions/array/array.cpp b/src/Functions/array/array.cpp\nindex b0a7daac522c..f220117407c7 100644\n--- a/src/Functions/array/array.cpp\n+++ b/src/Functions/array/array.cpp\n@@ -23,6 +23,7 @@ class FunctionArray : public IFunction\n     /// array(..., Nothing, ...) -> Array(..., Nothing, ...)\n     bool useDefaultImplementationForNothing() const override { return false; }\n     bool useDefaultImplementationForConstants() const override { return true; }\n+    bool useDefaultImplementationForLowCardinalityColumns() const override { return false; }\n \n     bool isVariadic() const override { return true; }\n     bool isSuitableForShortCircuitArgumentsExecution(const DataTypesWithConstInfo & /*arguments*/) const override { return false; }\ndiff --git a/src/Functions/map.cpp b/src/Functions/map.cpp\nindex 8c891fdec81f..866d3ae38662 100644\n--- a/src/Functions/map.cpp\n+++ b/src/Functions/map.cpp\n@@ -68,6 +68,7 @@ class FunctionMap : public IFunction\n     /// map(..., Nothing) -> Map(..., Nothing)\n     bool useDefaultImplementationForNothing() const override { return false; }\n     bool useDefaultImplementationForConstants() const override { return true; }\n+    bool useDefaultImplementationForLowCardinalityColumns() const override { return false; }\n \n     DataTypePtr getReturnTypeImpl(const DataTypes & arguments) const override\n     {\ndiff --git a/src/Functions/toColumnTypeName.cpp b/src/Functions/toColumnTypeName.cpp\nindex 466a8ba17c5f..d8013f13340f 100644\n--- a/src/Functions/toColumnTypeName.cpp\n+++ b/src/Functions/toColumnTypeName.cpp\n@@ -28,6 +28,8 @@ class FunctionToColumnTypeName : public IFunction\n \n     bool useDefaultImplementationForNothing() const override { return false; }\n \n+    bool useDefaultImplementationForLowCardinalityColumns() const override { return false; }\n+\n     bool isSuitableForShortCircuitArgumentsExecution(const DataTypesWithConstInfo & /*arguments*/) const override { return false; }\n \n     size_t getNumberOfArguments() const override\ndiff --git a/src/Functions/tuple.cpp b/src/Functions/tuple.cpp\nindex 4238b12157a8..5e85984bee0d 100644\n--- a/src/Functions/tuple.cpp\n+++ b/src/Functions/tuple.cpp\n@@ -55,6 +55,7 @@ class FunctionTuple : public IFunction\n     /// tuple(..., Nothing, ...) -> Tuple(..., Nothing, ...)\n     bool useDefaultImplementationForNothing() const override { return false; }\n     bool useDefaultImplementationForConstants() const override { return true; }\n+    bool useDefaultImplementationForLowCardinalityColumns() const override { return false; }\n \n     DataTypePtr getReturnTypeImpl(const DataTypes & arguments) const override\n     {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02210_toColumnTypeName_toLowCardinality_const.reference b/tests/queries/0_stateless/02210_toColumnTypeName_toLowCardinality_const.reference\nindex 2ac2f690f1be..1e3d3a50562b 100644\n--- a/tests/queries/0_stateless/02210_toColumnTypeName_toLowCardinality_const.reference\n+++ b/tests/queries/0_stateless/02210_toColumnTypeName_toLowCardinality_const.reference\n@@ -1,1 +1,1 @@\n-Const(UInt8)\n+Const(ColumnLowCardinality)\ndiff --git a/tests/queries/0_stateless/02354_array_lowcardinality.reference b/tests/queries/0_stateless/02354_array_lowcardinality.reference\nnew file mode 100644\nindex 000000000000..d364bbdb5f49\n--- /dev/null\n+++ b/tests/queries/0_stateless/02354_array_lowcardinality.reference\n@@ -0,0 +1,12 @@\n+Array(LowCardinality(String))\n+Array(LowCardinality(String))\n+Array(LowCardinality(String))\n+Array(LowCardinality(String))\n+Array(String)\n+Array(String)\n+Array(String)\n+Array(String)\n+Map(LowCardinality(String), LowCardinality(String))\n+Map(LowCardinality(String), LowCardinality(String))\n+Map(LowCardinality(String), LowCardinality(String))\n+Map(LowCardinality(String), LowCardinality(String))\ndiff --git a/tests/queries/0_stateless/02354_array_lowcardinality.sql b/tests/queries/0_stateless/02354_array_lowcardinality.sql\nnew file mode 100644\nindex 000000000000..1aa26b290506\n--- /dev/null\n+++ b/tests/queries/0_stateless/02354_array_lowcardinality.sql\n@@ -0,0 +1,14 @@\n+SELECT toTypeName([toLowCardinality('1'), toLowCardinality('2')]);\n+SELECT toTypeName([materialize(toLowCardinality('1')), toLowCardinality('2')]);\n+SELECT toTypeName([toLowCardinality('1'), materialize(toLowCardinality('2'))]);\n+SELECT toTypeName([materialize(toLowCardinality('1')), materialize(toLowCardinality('2'))]);\n+\n+SELECT toTypeName([toLowCardinality('1'), '2']);\n+SELECT toTypeName([materialize(toLowCardinality('1')), '2']);\n+SELECT toTypeName([toLowCardinality('1'), materialize('2')]);\n+SELECT toTypeName([materialize(toLowCardinality('1')), materialize('2')]);\n+\n+SELECT toTypeName(map(toLowCardinality('1'), toLowCardinality('2')));\n+SELECT toTypeName(map(materialize(toLowCardinality('1')), toLowCardinality('2')));\n+SELECT toTypeName(map(toLowCardinality('1'), materialize(toLowCardinality('2'))));\n+SELECT toTypeName(map(materialize(toLowCardinality('1')), materialize(toLowCardinality('2'))));\ndiff --git a/tests/queries/0_stateless/02354_tuple_lowcardinality.reference b/tests/queries/0_stateless/02354_tuple_lowcardinality.reference\nnew file mode 100644\nindex 000000000000..435417d7f2ba\n--- /dev/null\n+++ b/tests/queries/0_stateless/02354_tuple_lowcardinality.reference\n@@ -0,0 +1,4 @@\n+Tuple(LowCardinality(String), LowCardinality(UInt8))\n+Tuple(LowCardinality(String), LowCardinality(UInt8))\n+Tuple(LowCardinality(String), LowCardinality(UInt8))\n+Tuple(LowCardinality(String), LowCardinality(UInt8))\ndiff --git a/tests/queries/0_stateless/02354_tuple_lowcardinality.sql b/tests/queries/0_stateless/02354_tuple_lowcardinality.sql\nnew file mode 100644\nindex 000000000000..44b64aab3272\n--- /dev/null\n+++ b/tests/queries/0_stateless/02354_tuple_lowcardinality.sql\n@@ -0,0 +1,6 @@\n+SET allow_suspicious_low_cardinality_types = 1;\n+\n+SELECT toTypeName(tuple(toLowCardinality('1'), toLowCardinality(1)));\n+SELECT toTypeName(tuple(materialize(toLowCardinality('1')), toLowCardinality(1)));\n+SELECT toTypeName(tuple(toLowCardinality('1'), materialize(toLowCardinality(1))));\n+SELECT toTypeName(tuple(materialize(toLowCardinality('1')), materialize(toLowCardinality(1))));\ndiff --git a/tests/queries/0_stateless/02355_column_type_name_lc.reference b/tests/queries/0_stateless/02355_column_type_name_lc.reference\nnew file mode 100644\nindex 000000000000..234a072299f9\n--- /dev/null\n+++ b/tests/queries/0_stateless/02355_column_type_name_lc.reference\n@@ -0,0 +1,1 @@\n+ColumnLowCardinality\ndiff --git a/tests/queries/0_stateless/02355_column_type_name_lc.sql b/tests/queries/0_stateless/02355_column_type_name_lc.sql\nnew file mode 100644\nindex 000000000000..13a6393aaf28\n--- /dev/null\n+++ b/tests/queries/0_stateless/02355_column_type_name_lc.sql\n@@ -0,0 +1,1 @@\n+SELECT toColumnTypeName(toLowCardinality(materialize('foo')));\n",
  "problem_statement": "AST Fuzzer Logical error: 'Bad cast from type DB::ColumnString to DB::ColumnLowCardinality'.\nhttps://s3.amazonaws.com/clickhouse-test-reports/37171/912e88c7fccf0cdf4c17e49379b78148a751338e/fuzzer_astfuzzerubsan,actions//report.html\r\n```\r\n2022.06.02 15:25:51.801941 [ 689 ] {} <Fatal> BaseDaemon: ########################################\r\n2022.06.02 15:25:51.801977 [ 689 ] {} <Fatal> BaseDaemon: (version 22.6.1.1, build id: F9AB74DDDA135080) (from thread 177) (query_id: 0ce6475d-47af-4b29-98ad-3f5d36002da5) (query: SELECT DISTINCT toColumnTypeName(toLowCardinality(256)) FROM (SELECT DISTINCT toLowCardinality('1'), 1048575, toLowCardinality(256), number FROM remote('127.0.0.{1,2}', system.numbers) LIMIT 10)) Received signal Aborted (6)\r\n2022.06.02 15:25:51.802001 [ 689 ] {} <Fatal> BaseDaemon: \r\n2022.06.02 15:25:51.802036 [ 689 ] {} <Fatal> BaseDaemon: Stack trace: 0x7f9ece09f03b 0x7f9ece07e859 0xfc74e8b 0xfc750e5 0x22b980a5 0x22b8e4b8 0x24df41be 0x24df3a5b 0x24db4756 0x24db0e1f 0x24da4210 0x24dc0f76 0x26c8e4cc 0x26c8e9a5 0x26e0cc07 0x26e0a4ec 0x7f9ece256609 0x7f9ece17b163\r\n2022.06.02 15:25:51.802069 [ 689 ] {} <Fatal> BaseDaemon: 3. gsignal @ 0x7f9ece09f03b in ?\r\n2022.06.02 15:25:51.802090 [ 689 ] {} <Fatal> BaseDaemon: 4. abort @ 0x7f9ece07e859 in ?\r\n2022.06.02 15:25:51.818663 [ 689 ] {} <Fatal> BaseDaemon: 5. ./build_docker/../src/Common/Exception.cpp:47: DB::abortOnFailedAssertion(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) @ 0xfc74e8b in /workspace/clickhouse\r\n2022.06.02 15:25:51.834294 [ 689 ] {} <Fatal> BaseDaemon: 6. ./build_docker/../src/Common/Exception.cpp:70: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0xfc750e5 in /workspace/clickhouse\r\n2022.06.02 15:25:51.849319 [ 689 ] {} <Fatal> BaseDaemon: 7. ./build_docker/../src/Common/typeid_cast.h:0: DB::ColumnLowCardinality const& typeid_cast<DB::ColumnLowCardinality const&, DB::IColumn const>(DB::IColumn const&) @ 0x22b980a5 in /workspace/clickhouse\r\n2022.06.02 15:25:51.864871 [ 689 ] {} <Fatal> BaseDaemon: 8. ./build_docker/../src/DataTypes/Serializations/SerializationLowCardinality.cpp:0: DB::SerializationLowCardinality::serializeBinaryBulkWithMultipleStreams(DB::IColumn const&, unsigned long, unsigned long, DB::ISerialization::SerializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::SerializeBinaryBulkState>&) const @ 0x22b8e4b8 in /workspace/clickhouse\r\n2022.06.02 15:25:51.930875 [ 689 ] {} <Fatal> BaseDaemon: 11. ./build_docker/../src/Server/TCPHandler.cpp:1661: DB::TCPHandler::sendData(DB::Block const&) @ 0x24db4756 in /workspace/clickhouse\r\n2022.06.02 15:25:51.954594 [ 289 ] {} <Error> DNSResolver: Cannot resolve host (127.0.0.1127.0.0.1127.0.0.2127.0.0.2), error 0: Host not found.\r\n2022.06.02 15:25:51.972979 [ 689 ] {} <Fatal> BaseDaemon: 12.1. inlined from ./build_docker/../src/Server/TCPHandler.cpp:707: ~unique_lock\r\n2022.06.02 15:25:51.973007 [ 689 ] {} <Fatal> BaseDaemon: 12. ../src/Server/TCPHandler.cpp:709: DB::TCPHandler::processOrdinaryQueryWithProcessors() @ 0x24db0e1f in /workspace/clickhouse\r\n2022.06.02 15:25:51.996582 [ 289 ] {} <Error> DNSResolver: Cannot resolve host (127.0.0.2127.0.0.2), error 0: Host not found.\r\n2022.06.02 15:25:52.010605 [ 689 ] {} <Fatal> BaseDaemon: 13. ./build_docker/../src/Server/TCPHandler.cpp:345: DB::TCPHandler::runImpl() @ 0x24da4210 in /workspace/clickhouse\r\n2022.06.02 15:25:52.033423 [ 289 ] {} <Error> DNSResolver: Cannot resolve host (127.0.0.1127.0.0.1127.0.0.1127.0.0.2), error 0: Host not found.\r\n2022.06.02 15:25:52.057841 [ 689 ] {} <Fatal> BaseDaemon: 14. ./build_docker/../src/Server/TCPHandler.cpp:1783: DB::TCPHandler::run() @ 0x24dc0f76 in /workspace/clickhouse\r\n2022.06.02 15:25:52.062204 [ 689 ] {} <Fatal> BaseDaemon: 15. ./build_docker/../contrib/poco/Net/src/TCPServerConnection.cpp:57: Poco::Net::TCPServerConnection::start() @ 0x26c8e4cc in /workspace/clickhouse\r\n2022.06.02 15:25:52.068998 [ 689 ] {} <Fatal> BaseDaemon: 16.1. inlined from ./build_docker/../contrib/libcxx/include/__memory/unique_ptr.h:54: std::__1::default_delete<Poco::Net::TCPServerConnection>::operator()(Poco::Net::TCPServerConnection*) const\r\n2022.06.02 15:25:52.069028 [ 689 ] {} <Fatal> BaseDaemon: 16.2. inlined from ../contrib/libcxx/include/__memory/unique_ptr.h:315: std::__1::unique_ptr<Poco::Net::TCPServerConnection, std::__1::default_delete<Poco::Net::TCPServerConnection> >::reset(Poco::Net::TCPServerConnection*)\r\n2022.06.02 15:25:52.069044 [ 689 ] {} <Fatal> BaseDaemon: 16.3. inlined from ../contrib/libcxx/include/__memory/unique_ptr.h:269: ~unique_ptr\r\n2022.06.02 15:25:52.069059 [ 689 ] {} <Fatal> BaseDaemon: 16. ../contrib/poco/Net/src/TCPServerDispatcher.cpp:116: Poco::Net::TCPServerDispatcher::run() @ 0x26c8e9a5 in /workspace/clickhouse\r\n2022.06.02 15:25:52.076082 [ 689 ] {} <Fatal> BaseDaemon: 17. ./build_docker/../contrib/poco/Foundation/src/ThreadPool.cpp:213: Poco::PooledThread::run() @ 0x26e0cc07 in /workspace/clickhouse\r\n2022.06.02 15:25:52.083010 [ 689 ] {} <Fatal> BaseDaemon: 18.1. inlined from ./build_docker/../contrib/poco/Foundation/include/Poco/SharedPtr.h:156: Poco::SharedPtr<Poco::Runnable, Poco::ReferenceCounter, Poco::ReleasePolicy<Poco::Runnable> >::assign(Poco::Runnable*)\r\n2022.06.02 15:25:52.083041 [ 689 ] {} <Fatal> BaseDaemon: 18.2. inlined from ../contrib/poco/Foundation/include/Poco/SharedPtr.h:208: Poco::SharedPtr<Poco::Runnable, Poco::ReferenceCounter, Poco::ReleasePolicy<Poco::Runnable> >::operator=(Poco::Runnable*)\r\n2022.06.02 15:25:52.083056 [ 689 ] {} <Fatal> BaseDaemon: 18. ../contrib/poco/Foundation/src/Thread_POSIX.cpp:360: Poco::ThreadImpl::runnableEntry(void*) @ 0x26e0a4ec in /workspace/clickhouse\r\n2022.06.02 15:25:52.083073 [ 689 ] {} <Fatal> BaseDaemon: 19. ? @ 0x7f9ece256609 in ?\r\n2022.06.02 15:25:52.083091 [ 689 ] {} <Fatal> BaseDaemon: 20. __clone @ 0x7f9ece17b163 in ?\r\n```\r\n\ntoLowCardinality in tuple doesn't work\n`toLowCardinality` doesn't work with  `tuple`\r\n```\r\nSELECT tuple(toLowCardinality('1')) as x, toTypeName(x);\r\n\u250c\u2500x\u2500\u2500\u2500\u2500\u2500\u252c\u2500toTypeName(tuple(toLowCardinality('1')))\u2500\u2510\r\n\u2502 ('1') \u2502 Tuple(String)                            \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n**How to reproduce**\r\n* Which ClickHouse server version to use : 22.6.1 revision 54455.\r\n\r\n\n",
  "hints_text": "\n",
  "created_at": "2022-07-12T02:05:21Z"
}