{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 55353,
  "instance_id": "ClickHouse__ClickHouse-55353",
  "issue_numbers": [
    "55272"
  ],
  "base_commit": "fa54b2142454ecf1bafde8c8f68c67b8c730c95f",
  "patch": "diff --git a/src/Interpreters/LogicalExpressionsOptimizer.cpp b/src/Interpreters/LogicalExpressionsOptimizer.cpp\nindex 5dd1b5104805..78297c0ef5cf 100644\n--- a/src/Interpreters/LogicalExpressionsOptimizer.cpp\n+++ b/src/Interpreters/LogicalExpressionsOptimizer.cpp\n@@ -204,26 +204,41 @@ inline ASTs & getFunctionOperands(const ASTFunction * or_function)\n \n bool LogicalExpressionsOptimizer::isLowCardinalityEqualityChain(const std::vector<ASTFunction *> & functions) const\n {\n-    if (functions.size() > 1)\n+    if (functions.size() <= 1)\n+        return false;\n+\n+    if (!functions[0])\n+        return false;\n+\n+    /// Check if the identifier has LowCardinality type.\n+    auto & first_operands = getFunctionOperands(functions.at(0));\n+\n+    if (first_operands.empty())\n+        return false;\n+\n+    if (!first_operands[0])\n+        return false;\n+\n+    const auto * identifier = first_operands.at(0)->as<ASTIdentifier>();\n+    if (!identifier)\n+        return false;\n+\n+    auto pos = IdentifierSemantic::getMembership(*identifier);\n+    if (!pos)\n+        pos = IdentifierSemantic::chooseTableColumnMatch(*identifier, tables_with_columns, true);\n+\n+    if (!pos)\n+        return false;\n+\n+    if (*pos >= tables_with_columns.size())\n+        return false;\n+\n+    if (auto data_type_and_name = tables_with_columns.at(*pos).columns.tryGetByName(identifier->shortName()))\n     {\n-        /// Check if identifier is LowCardinality type\n-        auto & first_operands = getFunctionOperands(functions[0]);\n-        const auto * identifier = first_operands[0]->as<ASTIdentifier>();\n-        if (identifier)\n-        {\n-            auto pos = IdentifierSemantic::getMembership(*identifier);\n-            if (!pos)\n-                pos = IdentifierSemantic::chooseTableColumnMatch(*identifier, tables_with_columns, true);\n-            if (pos)\n-            {\n-                if (auto data_type_and_name = tables_with_columns[*pos].columns.tryGetByName(identifier->shortName()))\n-                {\n-                    if (typeid_cast<const DataTypeLowCardinality *>(data_type_and_name->type.get()))\n-                        return true;\n-                }\n-            }\n-        }\n+        if (typeid_cast<const DataTypeLowCardinality *>(data_type_and_name->type.get()))\n+            return true;\n     }\n+\n     return false;\n }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02893_trash_optimization.reference b/tests/queries/0_stateless/02893_trash_optimization.reference\nnew file mode 100644\nindex 000000000000..573541ac9702\n--- /dev/null\n+++ b/tests/queries/0_stateless/02893_trash_optimization.reference\n@@ -0,0 +1,1 @@\n+0\ndiff --git a/tests/queries/0_stateless/02893_trash_optimization.sql b/tests/queries/0_stateless/02893_trash_optimization.sql\nnew file mode 100644\nindex 000000000000..a61bc86eeb95\n--- /dev/null\n+++ b/tests/queries/0_stateless/02893_trash_optimization.sql\n@@ -0,0 +1,3 @@\n+SELECT *\n+FROM merge('system', '^one$') AS one\n+WHERE (one.dummy = 0) OR (one.dummy = 1);\n",
  "problem_statement": "Segmentation fault on query with \"Engine=Merge + ALL INNER JOIN + WHERE with OR\"\nthis query:\r\n\r\nSELECT *\r\nFROM merge('system', '^one$') AS one\r\nALL INNER JOIN\r\n(\r\n    SELECT *\r\n    FROM system.one\r\n) AS subquery ON one.dummy = subquery.dummy\r\nWHERE (one.dummy = 0) OR (one.dummy = 1)\r\n\r\nproduces segmentation fault of ClickHouse\r\n\r\nproof (latest version): https://fiddle.clickhouse.com/5ca1d3c3-de60-48fd-ad5f-2c7316139c60 \n",
  "hints_text": "update: bug can be triggered without JOIN: https://fiddle.clickhouse.com/f55800f9-f432-4a4b-a9cf-40f8ba4ddcdf\r\n\nIt's related to https://github.com/ClickHouse/ClickHouse/pull/42889.",
  "created_at": "2023-10-08T19:55:42Z"
}