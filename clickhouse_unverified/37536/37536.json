{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 37536,
  "instance_id": "ClickHouse__ClickHouse-37536",
  "issue_numbers": [
    "37495"
  ],
  "base_commit": "b50d4549c95959f01dd1ecea4e9a82afcebf95a6",
  "patch": "diff --git a/src/Common/ProfileEvents.cpp b/src/Common/ProfileEvents.cpp\nindex 7f3b9788c1fe..9fa47ff959c4 100644\n--- a/src/Common/ProfileEvents.cpp\n+++ b/src/Common/ProfileEvents.cpp\n@@ -144,6 +144,13 @@\n     M(MergeTreeDataWriterBlocks, \"Number of blocks INSERTed to MergeTree tables. Each block forms a data part of level zero.\") \\\n     M(MergeTreeDataWriterBlocksAlreadySorted, \"Number of blocks INSERTed to MergeTree tables that appeared to be already sorted.\") \\\n     \\\n+    M(InsertedWideParts, \"Number of parts inserted in Wide format.\") \\\n+    M(InsertedCompactParts, \"Number of parts inserted in Compact format.\") \\\n+    M(InsertedInMemoryParts, \"Number of parts inserted in InMemory format.\") \\\n+    M(MergedIntoWideParts, \"Number of parts merged into Wide format.\") \\\n+    M(MergedIntoCompactParts, \"Number of parts merged into Compact format.\") \\\n+    M(MergedIntoInMemoryParts, \"Number of parts in merged into InMemory format.\") \\\n+    \\\n     M(MergeTreeDataProjectionWriterRows, \"Number of rows INSERTed to MergeTree tables projection.\") \\\n     M(MergeTreeDataProjectionWriterUncompressedBytes, \"Uncompressed bytes (for columns as they stored in memory) INSERTed to MergeTree tables projection.\") \\\n     M(MergeTreeDataProjectionWriterCompressedBytes, \"Bytes written to filesystem for data INSERTed to MergeTree tables projection.\") \\\ndiff --git a/src/Interpreters/PartLog.cpp b/src/Interpreters/PartLog.cpp\nindex ce9aa0c03d1b..6d57f6b7045b 100644\n--- a/src/Interpreters/PartLog.cpp\n+++ b/src/Interpreters/PartLog.cpp\n@@ -46,6 +46,7 @@ NamesAndTypesList PartLogElement::getNamesAndTypes()\n         {\"table\", std::make_shared<DataTypeString>()},\n         {\"part_name\", std::make_shared<DataTypeString>()},\n         {\"partition_id\", std::make_shared<DataTypeString>()},\n+        {\"part_type\", std::make_shared<DataTypeString>()},\n         {\"disk_name\", std::make_shared<DataTypeString>()},\n         {\"path_on_disk\", std::make_shared<DataTypeString>()},\n \n@@ -80,6 +81,7 @@ void PartLogElement::appendToBlock(MutableColumns & columns) const\n     columns[i++]->insert(table_name);\n     columns[i++]->insert(part_name);\n     columns[i++]->insert(partition_id);\n+    columns[i++]->insert(part_type.toString());\n     columns[i++]->insert(disk_name);\n     columns[i++]->insert(path_on_disk);\n \n@@ -159,6 +161,7 @@ bool PartLog::addNewParts(\n             elem.part_name = part->name;\n             elem.disk_name = part->volume->getDisk()->getName();\n             elem.path_on_disk = part->getFullPath();\n+            elem.part_type = part->getType();\n \n             elem.bytes_compressed_on_disk = part->getBytesOnDisk();\n             elem.rows = part->rows_count;\ndiff --git a/src/Interpreters/PartLog.h b/src/Interpreters/PartLog.h\nindex 7582f6fe9e60..470dce09fa01 100644\n--- a/src/Interpreters/PartLog.h\n+++ b/src/Interpreters/PartLog.h\n@@ -1,5 +1,6 @@\n #pragma once\n \n+#include <Storages/MergeTree/MergeTreeDataPartType.h>\n #include <Interpreters/SystemLog.h>\n #include <Core/NamesAndTypes.h>\n #include <Core/NamesAndAliases.h>\n@@ -35,6 +36,8 @@ struct PartLogElement\n     String disk_name;\n     String path_on_disk;\n \n+    MergeTreeDataPartType part_type;\n+\n     /// Size of the part\n     UInt64 rows = 0;\n \ndiff --git a/src/Storages/MergeTree/MergeFromLogEntryTask.cpp b/src/Storages/MergeTree/MergeFromLogEntryTask.cpp\nindex 4b8860aa51db..66abe32ac251 100644\n--- a/src/Storages/MergeTree/MergeFromLogEntryTask.cpp\n+++ b/src/Storages/MergeTree/MergeFromLogEntryTask.cpp\n@@ -322,6 +322,7 @@ bool MergeFromLogEntryTask::finalize(ReplicatedMergeMutateTaskBase::PartLogWrite\n     ProfileEvents::increment(ProfileEvents::ReplicatedPartMerges);\n \n     write_part_log({});\n+    storage.incrementMergedPartsProfileEvent(part->getType());\n \n     return true;\n }\ndiff --git a/src/Storages/MergeTree/MergePlainMergeTreeTask.cpp b/src/Storages/MergeTree/MergePlainMergeTreeTask.cpp\nindex 0146ce4c7b31..c6a719fbc677 100644\n--- a/src/Storages/MergeTree/MergePlainMergeTreeTask.cpp\n+++ b/src/Storages/MergeTree/MergePlainMergeTreeTask.cpp\n@@ -117,6 +117,7 @@ void MergePlainMergeTreeTask::finish()\n     new_part = merge_task->getFuture().get();\n     storage.merger_mutator.renameMergedTemporaryPart(new_part, future_part->parts, txn, nullptr);\n     write_part_log({});\n+    storage.incrementMergedPartsProfileEvent(new_part->getType());\n }\n \n }\ndiff --git a/src/Storages/MergeTree/MergeTreeData.cpp b/src/Storages/MergeTree/MergeTreeData.cpp\nindex 50811daa4abf..6d72c11c3fca 100644\n--- a/src/Storages/MergeTree/MergeTreeData.cpp\n+++ b/src/Storages/MergeTree/MergeTreeData.cpp\n@@ -93,6 +93,12 @@ namespace ProfileEvents\n     extern const Event DelayedInserts;\n     extern const Event DelayedInsertsMilliseconds;\n     extern const Event DuplicatedInsertedBlocks;\n+    extern const Event InsertedWideParts;\n+    extern const Event InsertedCompactParts;\n+    extern const Event InsertedInMemoryParts;\n+    extern const Event MergedIntoWideParts;\n+    extern const Event MergedIntoCompactParts;\n+    extern const Event MergedIntoInMemoryParts;\n }\n \n namespace CurrentMetrics\n@@ -1716,6 +1722,7 @@ void MergeTreeData::removePartsFinally(const MergeTreeData::DataPartsVector & pa\n             part_log_elem.part_name = part->name;\n             part_log_elem.bytes_compressed_on_disk = part->getBytesOnDisk();\n             part_log_elem.rows = part->rows_count;\n+            part_log_elem.part_type = part->getType();\n \n             part_log->add(part_log_elem);\n         }\n@@ -6190,6 +6197,7 @@ try\n         part_log_elem.path_on_disk = result_part->getFullPath();\n         part_log_elem.bytes_compressed_on_disk = result_part->getBytesOnDisk();\n         part_log_elem.rows = result_part->rows_count;\n+        part_log_elem.part_type = result_part->getType();\n     }\n \n     part_log_elem.source_part_names.reserve(source_parts.size());\n@@ -6755,6 +6763,42 @@ StorageSnapshotPtr MergeTreeData::getStorageSnapshot(const StorageMetadataPtr &\n     return std::make_shared<StorageSnapshot>(*this, metadata_snapshot, object_columns, std::move(snapshot_data));\n }\n \n+void MergeTreeData::incrementInsertedPartsProfileEvent(MergeTreeDataPartType type)\n+{\n+    switch (type.getValue())\n+    {\n+        case MergeTreeDataPartType::Wide:\n+            ProfileEvents::increment(ProfileEvents::InsertedWideParts);\n+            break;\n+        case MergeTreeDataPartType::Compact:\n+            ProfileEvents::increment(ProfileEvents::InsertedCompactParts);\n+            break;\n+        case MergeTreeDataPartType::InMemory:\n+            ProfileEvents::increment(ProfileEvents::InsertedInMemoryParts);\n+            break;\n+        default:\n+            break;\n+    }\n+}\n+\n+void MergeTreeData::incrementMergedPartsProfileEvent(MergeTreeDataPartType type)\n+{\n+    switch (type.getValue())\n+    {\n+        case MergeTreeDataPartType::Wide:\n+            ProfileEvents::increment(ProfileEvents::MergedIntoWideParts);\n+            break;\n+        case MergeTreeDataPartType::Compact:\n+            ProfileEvents::increment(ProfileEvents::MergedIntoCompactParts);\n+            break;\n+        case MergeTreeDataPartType::InMemory:\n+            ProfileEvents::increment(ProfileEvents::MergedIntoInMemoryParts);\n+            break;\n+        default:\n+            break;\n+    }\n+}\n+\n CurrentlySubmergingEmergingTagger::~CurrentlySubmergingEmergingTagger()\n {\n     std::lock_guard lock(storage.currently_submerging_emerging_mutex);\ndiff --git a/src/Storages/MergeTree/MergeTreeData.h b/src/Storages/MergeTree/MergeTreeData.h\nindex df37cd000e40..1ba09251f6f3 100644\n--- a/src/Storages/MergeTree/MergeTreeData.h\n+++ b/src/Storages/MergeTree/MergeTreeData.h\n@@ -1224,6 +1224,8 @@ class MergeTreeData : public IStorage, public WithMutableContext\n     /// Moves part to specified space, used in ALTER ... MOVE ... queries\n     bool movePartsToSpace(const DataPartsVector & parts, SpacePtr space);\n \n+    static void incrementInsertedPartsProfileEvent(MergeTreeDataPartType type);\n+    static void incrementMergedPartsProfileEvent(MergeTreeDataPartType type);\n \n private:\n     /// RAII Wrapper for atomic work with currently moving parts\ndiff --git a/src/Storages/MergeTree/MergeTreeDataWriter.cpp b/src/Storages/MergeTree/MergeTreeDataWriter.cpp\nindex bf247074f572..7e08fb0ccfc6 100644\n--- a/src/Storages/MergeTree/MergeTreeDataWriter.cpp\n+++ b/src/Storages/MergeTree/MergeTreeDataWriter.cpp\n@@ -451,6 +451,7 @@ MergeTreeDataWriter::TemporaryPart MergeTreeDataWriter::writeTempPart(\n                 temp_part.streams.emplace_back(std::move(stream));\n         }\n     }\n+\n     auto finalizer = out->finalizePartAsync(\n         new_data_part,\n         data_settings->fsync_after_insert,\n@@ -460,8 +461,6 @@ MergeTreeDataWriter::TemporaryPart MergeTreeDataWriter::writeTempPart(\n     temp_part.part = new_data_part;\n     temp_part.streams.emplace_back(TemporaryPart::Stream{.stream = std::move(out), .finalizer = std::move(finalizer)});\n \n-    /// out.finish(new_data_part, std::move(written_files), sync_on_insert);\n-\n     ProfileEvents::increment(ProfileEvents::MergeTreeDataWriterRows, block.rows());\n     ProfileEvents::increment(ProfileEvents::MergeTreeDataWriterUncompressedBytes, block.bytes());\n     ProfileEvents::increment(ProfileEvents::MergeTreeDataWriterCompressedBytes, new_data_part->getBytesOnDisk());\ndiff --git a/src/Storages/MergeTree/MergeTreeSink.cpp b/src/Storages/MergeTree/MergeTreeSink.cpp\nindex 93b9f3565953..4dc4d62c2a21 100644\n--- a/src/Storages/MergeTree/MergeTreeSink.cpp\n+++ b/src/Storages/MergeTree/MergeTreeSink.cpp\n@@ -137,6 +137,7 @@ void MergeTreeSink::finishDelayedChunk()\n         if (storage.renameTempPartAndAdd(part, context->getCurrentTransaction().get(), &storage.increment, nullptr, storage.getDeduplicationLog(), partition.block_dedup_token))\n         {\n             PartLog::addNewPart(storage.getContext(), part, partition.elapsed_ns);\n+            storage.incrementInsertedPartsProfileEvent(part->getType());\n \n             /// Initiate async merge - it will be done if it's good time for merge and if there are space in 'background_pool'.\n             storage.background_operations_assignee.trigger();\ndiff --git a/src/Storages/MergeTree/ReplicatedMergeTreeSink.cpp b/src/Storages/MergeTree/ReplicatedMergeTreeSink.cpp\nindex 126d34bcc1d4..de893d59b05d 100644\n--- a/src/Storages/MergeTree/ReplicatedMergeTreeSink.cpp\n+++ b/src/Storages/MergeTree/ReplicatedMergeTreeSink.cpp\n@@ -261,6 +261,7 @@ void ReplicatedMergeTreeSink::finishDelayedChunk(zkutil::ZooKeeperPtr & zookeepe\n             /// Set a special error code if the block is duplicate\n             int error = (deduplicate && part->is_duplicate) ? ErrorCodes::INSERT_WAS_DEDUPLICATED : 0;\n             PartLog::addNewPart(storage.getContext(), part, partition.elapsed_ns, ExecutionStatus(error));\n+            storage.incrementInsertedPartsProfileEvent(part->getType());\n         }\n         catch (...)\n         {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02306_part_types_profile_events.reference b/tests/queries/0_stateless/02306_part_types_profile_events.reference\nnew file mode 100644\nindex 000000000000..7b5495f39fe0\n--- /dev/null\n+++ b/tests/queries/0_stateless/02306_part_types_profile_events.reference\n@@ -0,0 +1,7 @@\n+3\t1\t2\n+2\t1\t1\n+Compact\n+Compact\n+Wide\n+Compact\t1\n+Wide\t1\ndiff --git a/tests/queries/0_stateless/02306_part_types_profile_events.sql b/tests/queries/0_stateless/02306_part_types_profile_events.sql\nnew file mode 100644\nindex 000000000000..4b13504612e2\n--- /dev/null\n+++ b/tests/queries/0_stateless/02306_part_types_profile_events.sql\n@@ -0,0 +1,44 @@\n+DROP TABLE IF EXISTS t_parts_profile_events;\n+\n+CREATE TABLE t_parts_profile_events (a UInt32)\n+ENGINE = MergeTree ORDER BY tuple()\n+SETTINGS min_rows_for_wide_part = 10, min_bytes_for_wide_part = 0;\n+\n+SYSTEM STOP MERGES t_parts_profile_events;\n+\n+SET log_comment = '02306_part_types_profile_events';\n+\n+INSERT INTO t_parts_profile_events VALUES (1);\n+INSERT INTO t_parts_profile_events VALUES (1);\n+\n+SYSTEM START MERGES t_parts_profile_events;\n+OPTIMIZE TABLE t_parts_profile_events FINAL;\n+SYSTEM STOP MERGES t_parts_profile_events;\n+\n+INSERT INTO t_parts_profile_events SELECT number FROM numbers(20);\n+\n+SYSTEM START MERGES t_parts_profile_events;\n+OPTIMIZE TABLE t_parts_profile_events FINAL;\n+SYSTEM STOP MERGES t_parts_profile_events;\n+\n+SYSTEM FLUSH LOGS;\n+\n+SELECT count(), sum(ProfileEvents['InsertedWideParts']), sum(ProfileEvents['InsertedCompactParts'])\n+    FROM system.query_log WHERE current_database = currentDatabase()\n+        AND log_comment = '02306_part_types_profile_events'\n+        AND query ILIKE 'INSERT INTO%' AND type = 'QueryFinish';\n+\n+SELECT count(), sum(ProfileEvents['MergedIntoWideParts']), sum(ProfileEvents['MergedIntoCompactParts'])\n+    FROM system.query_log WHERE current_database = currentDatabase()\n+        AND log_comment = '02306_part_types_profile_events'\n+        AND query ILIKE 'OPTIMIZE TABLE%' AND type = 'QueryFinish';\n+\n+SELECT part_type FROM system.part_log WHERE database = currentDatabase()\n+    AND table = 't_parts_profile_events' AND event_type = 'NewPart'\n+    ORDER BY event_time_microseconds;\n+\n+SELECT part_type, count() > 0 FROM system.part_log WHERE database = currentDatabase()\n+    AND table = 't_parts_profile_events' AND event_type = 'MergeParts'\n+    GROUP BY part_type ORDER BY part_type;\n+\n+DROP TABLE t_parts_profile_events;\n",
  "problem_statement": "ProfileEvents for introspection of written MergeTree parts\nLet's add the following ProfileEvents:\r\n\r\n```\r\nInsertedWideParts\r\nInsertedCompactParts\r\nInsertedInMemoryParts\r\nMergedIntoWideParts\r\nMergedIntoCompactParts\r\nMergedIntoInMemoryParts\r\n```\r\n\r\nIlya:\r\n> I then propose to add also reasons when we used Wide/Compact. WidePartReasonMaxRows, WidePartReasonMaxBytes.\r\n\r\n\r\nMichael Lex:\r\n> What would also be helpful is the information how many files belong to a part.\n",
  "hints_text": "",
  "created_at": "2022-05-25T15:01:19Z",
  "modified_files": [
    "src/Common/ProfileEvents.cpp",
    "src/Interpreters/PartLog.cpp",
    "src/Interpreters/PartLog.h",
    "src/Storages/MergeTree/MergeFromLogEntryTask.cpp",
    "src/Storages/MergeTree/MergePlainMergeTreeTask.cpp",
    "src/Storages/MergeTree/MergeTreeData.cpp",
    "src/Storages/MergeTree/MergeTreeData.h",
    "src/Storages/MergeTree/MergeTreeDataWriter.cpp",
    "src/Storages/MergeTree/MergeTreeSink.cpp",
    "src/Storages/MergeTree/ReplicatedMergeTreeSink.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02306_part_types_profile_events.reference",
    "b/tests/queries/0_stateless/02306_part_types_profile_events.sql"
  ]
}