{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 64720,
  "instance_id": "ClickHouse__ClickHouse-64720",
  "issue_numbers": [
    "64337"
  ],
  "base_commit": "3f58fcb26b5f6211342938e4fffccc9a5d141152",
  "patch": "diff --git a/src/Interpreters/ITokenExtractor.cpp b/src/Interpreters/ITokenExtractor.cpp\nindex 1c5d0d4b6d4c..f0bf90fcb5ce 100644\n--- a/src/Interpreters/ITokenExtractor.cpp\n+++ b/src/Interpreters/ITokenExtractor.cpp\n@@ -240,4 +240,34 @@ bool SplitTokenExtractor::nextInStringLike(const char * data, size_t length, siz\n     return !bad_token && !token.empty();\n }\n \n+void SplitTokenExtractor::substringToBloomFilter(const char * data, size_t length, BloomFilter & bloom_filter, bool is_prefix, bool is_suffix) const\n+{\n+    size_t cur = 0;\n+    size_t token_start = 0;\n+    size_t token_len = 0;\n+\n+    while (cur < length && nextInString(data, length, &cur, &token_start, &token_len))\n+        // In order to avoid filter updates with incomplete tokens,\n+        // first token is ignored, unless substring is prefix and\n+        // last token is ignored, unless substring is suffix\n+        if ((token_start > 0 || is_prefix) && (token_start + token_len < length || is_suffix))\n+            bloom_filter.add(data + token_start, token_len);\n+}\n+\n+void SplitTokenExtractor::substringToGinFilter(const char * data, size_t length, GinFilter & gin_filter, bool is_prefix, bool is_suffix) const\n+{\n+    gin_filter.setQueryString(data, length);\n+\n+    size_t cur = 0;\n+    size_t token_start = 0;\n+    size_t token_len = 0;\n+\n+    while (cur < length && nextInString(data, length, &cur, &token_start, &token_len))\n+        // In order to avoid filter updates with incomplete tokens,\n+        // first token is ignored, unless substring is prefix and\n+        // last token is ignored, unless substring is suffix\n+        if ((token_start > 0 || is_prefix) && (token_start + token_len < length || is_suffix))\n+            gin_filter.addTerm(data + token_start, token_len);\n+}\n+\n }\ndiff --git a/src/Interpreters/ITokenExtractor.h b/src/Interpreters/ITokenExtractor.h\nindex 2423ef12311a..76711606d095 100644\n--- a/src/Interpreters/ITokenExtractor.h\n+++ b/src/Interpreters/ITokenExtractor.h\n@@ -28,8 +28,22 @@ struct ITokenExtractor\n     /// It skips unescaped `%` and `_` and supports escaping symbols, but it is less lightweight.\n     virtual bool nextInStringLike(const char * data, size_t length, size_t * pos, String & out) const = 0;\n \n+    /// Updates Bloom filter from exact-match string filter value\n     virtual void stringToBloomFilter(const char * data, size_t length, BloomFilter & bloom_filter) const = 0;\n \n+    /// Updates Bloom filter from substring-match string filter value.\n+    /// An `ITokenExtractor` implementation may decide to skip certain\n+    /// tokens depending on whether the substring is a prefix or a suffix.\n+    virtual void substringToBloomFilter(\n+        const char * data,\n+        size_t length,\n+        BloomFilter & bloom_filter,\n+        bool is_prefix [[maybe_unused]],\n+        bool is_suffix [[maybe_unused]]) const\n+    {\n+        stringToBloomFilter(data, length, bloom_filter);\n+    }\n+\n     virtual void stringPaddedToBloomFilter(const char * data, size_t length, BloomFilter & bloom_filter) const\n     {\n         stringToBloomFilter(data, length, bloom_filter);\n@@ -37,8 +51,22 @@ struct ITokenExtractor\n \n     virtual void stringLikeToBloomFilter(const char * data, size_t length, BloomFilter & bloom_filter) const = 0;\n \n+    /// Updates GIN filter from exact-match string filter value\n     virtual void stringToGinFilter(const char * data, size_t length, GinFilter & gin_filter) const = 0;\n \n+    /// Updates GIN filter from substring-match string filter value.\n+    /// An `ITokenExtractor` implementation may decide to skip certain\n+    /// tokens depending on whether the substring is a prefix or a suffix.\n+    virtual void substringToGinFilter(\n+        const char * data,\n+        size_t length,\n+        GinFilter & gin_filter,\n+        bool is_prefix [[maybe_unused]],\n+        bool is_suffix [[maybe_unused]]) const\n+    {\n+        stringToGinFilter(data, length, gin_filter);\n+    }\n+\n     virtual void stringPaddedToGinFilter(const char * data, size_t length, GinFilter & gin_filter) const\n     {\n         stringToGinFilter(data, length, gin_filter);\n@@ -148,6 +176,11 @@ struct SplitTokenExtractor final : public ITokenExtractorHelper<SplitTokenExtrac\n \n     bool nextInStringLike(const char * data, size_t length, size_t * __restrict pos, String & token) const override;\n \n+    void substringToBloomFilter(const char * data, size_t length, BloomFilter & bloom_filter, bool is_prefix, bool is_suffix) const override;\n+\n+    void substringToGinFilter(const char * data, size_t length, GinFilter & gin_filter, bool is_prefix, bool is_suffix) const override;\n+\n+\n };\n \n }\ndiff --git a/src/Storages/MergeTree/MergeTreeIndexBloomFilterText.cpp b/src/Storages/MergeTree/MergeTreeIndexBloomFilterText.cpp\nindex 6f46ee0c1841..8cf58687125e 100644\n--- a/src/Storages/MergeTree/MergeTreeIndexBloomFilterText.cpp\n+++ b/src/Storages/MergeTree/MergeTreeIndexBloomFilterText.cpp\n@@ -566,7 +566,7 @@ bool MergeTreeConditionBloomFilterText::traverseTreeEquals(\n         out.function = RPNElement::FUNCTION_EQUALS;\n         out.bloom_filter = std::make_unique<BloomFilter>(params);\n         const auto & value = const_value.get<String>();\n-        token_extractor->stringToBloomFilter(value.data(), value.size(), *out.bloom_filter);\n+        token_extractor->substringToBloomFilter(value.data(), value.size(), *out.bloom_filter, true, false);\n         return true;\n     }\n     else if (function_name == \"endsWith\")\n@@ -575,7 +575,7 @@ bool MergeTreeConditionBloomFilterText::traverseTreeEquals(\n         out.function = RPNElement::FUNCTION_EQUALS;\n         out.bloom_filter = std::make_unique<BloomFilter>(params);\n         const auto & value = const_value.get<String>();\n-        token_extractor->stringToBloomFilter(value.data(), value.size(), *out.bloom_filter);\n+        token_extractor->substringToBloomFilter(value.data(), value.size(), *out.bloom_filter, false, true);\n         return true;\n     }\n     else if (function_name == \"multiSearchAny\"\n@@ -596,7 +596,15 @@ bool MergeTreeConditionBloomFilterText::traverseTreeEquals(\n \n             bloom_filters.back().emplace_back(params);\n             const auto & value = element.get<String>();\n-            token_extractor->stringToBloomFilter(value.data(), value.size(), bloom_filters.back().back());\n+\n+            if (function_name == \"multiSearchAny\")\n+            {\n+                token_extractor->substringToBloomFilter(value.data(), value.size(), bloom_filters.back().back(), false, false);\n+            }\n+            else\n+            {\n+                token_extractor->stringToBloomFilter(value.data(), value.size(), bloom_filters.back().back());\n+            }\n         }\n         out.set_bloom_filters = std::move(bloom_filters);\n         return true;\n@@ -625,12 +633,12 @@ bool MergeTreeConditionBloomFilterText::traverseTreeEquals(\n             for (const auto & alternative : alternatives)\n             {\n                 bloom_filters.back().emplace_back(params);\n-                token_extractor->stringToBloomFilter(alternative.data(), alternative.size(), bloom_filters.back().back());\n+                token_extractor->substringToBloomFilter(alternative.data(), alternative.size(), bloom_filters.back().back(), false, false);\n             }\n             out.set_bloom_filters = std::move(bloom_filters);\n         }\n         else\n-           token_extractor->stringToBloomFilter(required_substring.data(), required_substring.size(), *out.bloom_filter);\n+           token_extractor->substringToBloomFilter(required_substring.data(), required_substring.size(), *out.bloom_filter, false, false);\n \n         return true;\n     }\ndiff --git a/src/Storages/MergeTree/MergeTreeIndexFullText.cpp b/src/Storages/MergeTree/MergeTreeIndexFullText.cpp\nindex c5965415be59..653cfd8731ab 100644\n--- a/src/Storages/MergeTree/MergeTreeIndexFullText.cpp\n+++ b/src/Storages/MergeTree/MergeTreeIndexFullText.cpp\n@@ -594,7 +594,7 @@ bool MergeTreeConditionFullText::traverseASTEquals(\n         out.function = RPNElement::FUNCTION_EQUALS;\n         out.gin_filter = std::make_unique<GinFilter>(params);\n         const auto & value = const_value.get<String>();\n-        token_extractor->stringToGinFilter(value.data(), value.size(), *out.gin_filter);\n+        token_extractor->substringToGinFilter(value.data(), value.size(), *out.gin_filter, true, false);\n         return true;\n     }\n     else if (function_name == \"endsWith\")\n@@ -603,7 +603,7 @@ bool MergeTreeConditionFullText::traverseASTEquals(\n         out.function = RPNElement::FUNCTION_EQUALS;\n         out.gin_filter = std::make_unique<GinFilter>(params);\n         const auto & value = const_value.get<String>();\n-        token_extractor->stringToGinFilter(value.data(), value.size(), *out.gin_filter);\n+        token_extractor->substringToGinFilter(value.data(), value.size(), *out.gin_filter, false, true);\n         return true;\n     }\n     else if (function_name == \"multiSearchAny\")\n@@ -621,7 +621,7 @@ bool MergeTreeConditionFullText::traverseASTEquals(\n \n             gin_filters.back().emplace_back(params);\n             const auto & value = element.get<String>();\n-            token_extractor->stringToGinFilter(value.data(), value.size(), gin_filters.back().back());\n+            token_extractor->substringToGinFilter(value.data(), value.size(), gin_filters.back().back(), false, false);\n         }\n         out.set_gin_filters = std::move(gin_filters);\n         return true;\n@@ -649,14 +649,14 @@ bool MergeTreeConditionFullText::traverseASTEquals(\n             for (const auto & alternative : alternatives)\n             {\n                gin_filters.back().emplace_back(params);\n-               token_extractor->stringToGinFilter(alternative.data(), alternative.size(), gin_filters.back().back());\n+               token_extractor->substringToGinFilter(alternative.data(), alternative.size(), gin_filters.back().back(), false, false);\n             }\n             out.set_gin_filters = std::move(gin_filters);\n         }\n         else\n         {\n             out.gin_filter = std::make_unique<GinFilter>(params);\n-            token_extractor->stringToGinFilter(required_substring.data(), required_substring.size(), *out.gin_filter);\n+            token_extractor->substringToGinFilter(required_substring.data(), required_substring.size(), *out.gin_filter, false, false);\n         }\n \n         return true;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02346_fulltext_index_match_predicate.reference b/tests/queries/0_stateless/02346_fulltext_index_match_predicate.reference\nindex 84fc422379c0..e890eac17948 100644\n--- a/tests/queries/0_stateless/02346_fulltext_index_match_predicate.reference\n+++ b/tests/queries/0_stateless/02346_fulltext_index_match_predicate.reference\n@@ -1,19 +1,19 @@\n-1\tHello ClickHouse\n-2\tHello World\n+1\tWell, Hello ClickHouse !\n+2\tWell, Hello World !\n             Granules: 6/6\n             Granules: 2/6\n             Granules: 6/6\n             Granules: 2/6\n ---\n-1\tHello ClickHouse\n-2\tHello World\n-6\tWorld Champion\n+1\tWell, Hello ClickHouse !\n+2\tWell, Hello World !\n+6\tTrue World Champion\n             Granules: 6/6\n             Granules: 3/6\n             Granules: 6/6\n             Granules: 3/6\n ---\n-5\tOLAP Database\n+5\tIts An OLAP Database\n             Granules: 6/6\n             Granules: 1/6\n             Granules: 6/6\ndiff --git a/tests/queries/0_stateless/02346_fulltext_index_match_predicate.sql b/tests/queries/0_stateless/02346_fulltext_index_match_predicate.sql\nindex 2233c8a1f31f..3c558f07be20 100644\n--- a/tests/queries/0_stateless/02346_fulltext_index_match_predicate.sql\n+++ b/tests/queries/0_stateless/02346_fulltext_index_match_predicate.sql\n@@ -14,19 +14,19 @@ ENGINE = MergeTree\n ORDER BY id\n SETTINGS index_granularity = 1;\n \n-INSERT INTO tab VALUES (1, 'Hello ClickHouse'), (2, 'Hello World'), (3, 'Good Weather'), (4, 'Say Hello'), (5, 'OLAP Database'), (6, 'World Champion');\n+INSERT INTO tab VALUES (1, 'Well, Hello ClickHouse !'), (2, 'Well, Hello World !'), (3, 'Good Weather !'), (4, 'Say Hello !'), (5, 'Its An OLAP Database'), (6, 'True World Champion');\n \n-SELECT * FROM tab WHERE match(str, 'Hello (ClickHouse|World)') ORDER BY id;\n+SELECT * FROM tab WHERE match(str, ' Hello (ClickHouse|World) ') ORDER BY id;\n \n -- Read 2/6 granules\n--- Required string: 'Hello '\n--- Alternatives: 'Hello ClickHouse', 'Hello World'\n+-- Required string: ' Hello '\n+-- Alternatives: ' Hello ClickHouse ', ' Hello World '\n \n SELECT *\n FROM\n (\n     EXPLAIN PLAN indexes=1\n-    SELECT * FROM tab WHERE match(str, 'Hello (ClickHouse|World)') ORDER BY id\n+    SELECT * FROM tab WHERE match(str, ' Hello (ClickHouse|World) ') ORDER BY id\n )\n WHERE\n     explain LIKE '%Granules: %'\n@@ -37,7 +37,7 @@ SELECT *\n FROM\n (\n     EXPLAIN PLAN indexes=1\n-    SELECT * FROM tab WHERE match(str, 'Hello (ClickHouse|World)') ORDER BY id\n+    SELECT * FROM tab WHERE match(str, ' Hello (ClickHouse|World) ') ORDER BY id\n )\n WHERE\n     explain LIKE '%Granules: %'\n@@ -46,17 +46,17 @@ SETTINGS\n \n SELECT '---';\n \n-SELECT * FROM tab WHERE match(str, '.*(ClickHouse|World)') ORDER BY id;\n+SELECT * FROM tab WHERE match(str, '.* (ClickHouse|World) ') ORDER BY id;\n \n -- Read 3/6 granules\n -- Required string: -\n--- Alternatives: 'ClickHouse', 'World'\n+-- Alternatives: ' ClickHouse ', ' World '\n \n SELECT *\n FROM\n (\n     EXPLAIN PLAN indexes = 1\n-    SELECT * FROM tab WHERE match(str, '.*(ClickHouse|World)') ORDER BY id\n+    SELECT * FROM tab WHERE match(str, '.* (ClickHouse|World) ') ORDER BY id\n )\n WHERE\n     explain LIKE '%Granules: %'\n@@ -67,7 +67,7 @@ SELECT *\n FROM\n (\n     EXPLAIN PLAN indexes = 1\n-    SELECT * FROM tab WHERE match(str, '.*(ClickHouse|World)') ORDER BY id\n+    SELECT * FROM tab WHERE match(str, '.* (ClickHouse|World) ') ORDER BY id\n )\n WHERE\n     explain LIKE '%Granules: %'\n@@ -76,17 +76,17 @@ SETTINGS\n \n SELECT '---';\n \n-SELECT * FROM tab WHERE match(str, 'OLAP.*') ORDER BY id;\n+SELECT * FROM tab WHERE match(str, ' OLAP .*') ORDER BY id;\n \n -- Read 1/6 granules\n--- Required string: 'OLAP'\n+-- Required string: ' OLAP '\n -- Alternatives: -\n \n SELECT *\n FROM\n (\n     EXPLAIN PLAN indexes = 1\n-    SELECT * FROM tab WHERE match(str, 'OLAP (.*?)*') ORDER BY id\n+    SELECT * FROM tab WHERE match(str, ' OLAP (.*?)*') ORDER BY id\n )\n WHERE\n     explain LIKE '%Granules: %'\n@@ -97,7 +97,7 @@ SELECT *\n FROM\n (\n     EXPLAIN PLAN indexes = 1\n-    SELECT * FROM tab WHERE match(str, 'OLAP (.*?)*') ORDER BY id\n+    SELECT * FROM tab WHERE match(str, ' OLAP (.*?)*') ORDER BY id\n )\n WHERE\n     explain LIKE '%Granules: %'\ndiff --git a/tests/queries/0_stateless/02346_fulltext_index_search.reference b/tests/queries/0_stateless/02346_fulltext_index_search.reference\nindex d742bbc77ecf..d7c89d434e7c 100644\n--- a/tests/queries/0_stateless/02346_fulltext_index_search.reference\n+++ b/tests/queries/0_stateless/02346_fulltext_index_search.reference\n@@ -13,19 +13,19 @@ af\tfull_text\n 1\n Test full_text()\n af\tfull_text\n-101\tAlick a01\n-106\tAlick a06\n-111\tAlick b01\n-116\tAlick b06\n-101\tAlick a01\n-106\tAlick a06\n+101\tx Alick a01 y\n+106\tx Alick a06 y\n+111\tx Alick b01 y\n+116\tx Alick b06 y\n+101\tx Alick a01 y\n+106\tx Alick a06 y\n 1\n-101\tAlick a01\n-111\tAlick b01\n+101\tx Alick a01 y\n+111\tx Alick b01 y\n 1\n Test on array columns\n af\tfull_text\n-3\t['Click a03','Click b03']\n+3\t['x Click a03 y','x Click b03 y']\n 1\n Test on map columns\n af\tfull_text\ndiff --git a/tests/queries/0_stateless/02346_fulltext_index_search.sql b/tests/queries/0_stateless/02346_fulltext_index_search.sql\nindex 62cd60738426..8506c512409d 100644\n--- a/tests/queries/0_stateless/02346_fulltext_index_search.sql\n+++ b/tests/queries/0_stateless/02346_fulltext_index_search.sql\n@@ -67,7 +67,7 @@ CREATE TABLE tab_x(k UInt64, s String, INDEX af(s) TYPE full_text())\n     ENGINE = MergeTree() ORDER BY k\n     SETTINGS index_granularity = 2, index_granularity_bytes = '10Mi';\n \n-INSERT INTO tab_x VALUES (101, 'Alick a01'), (102, 'Blick a02'), (103, 'Click a03'), (104, 'Dlick a04'), (105, 'Elick a05'), (106, 'Alick a06'), (107, 'Blick a07'), (108, 'Click a08'), (109, 'Dlick a09'), (110, 'Elick a10'), (111, 'Alick b01'), (112, 'Blick b02'), (113, 'Click b03'), (114, 'Dlick b04'), (115, 'Elick b05'), (116, 'Alick b06'), (117, 'Blick b07'), (118, 'Click b08'), (119, 'Dlick b09'), (120, 'Elick b10');\n+INSERT INTO tab_x VALUES (101, 'x Alick a01 y'), (102, 'x Blick a02 y'), (103, 'x Click a03 y'), (104, 'x Dlick a04 y'), (105, 'x Elick a05 y'), (106, 'x Alick a06 y'), (107, 'x Blick a07 y'), (108, 'x Click a08 y'), (109, 'x Dlick a09 y'), (110, 'x Elick a10 y'), (111, 'x Alick b01 y'), (112, 'x Blick b02 y'), (113, 'x Click b03 y'), (114, 'x Dlick b04 y'), (115, 'x Elick b05 y'), (116, 'x Alick b06 y'), (117, 'x Blick b07 y'), (118, 'x Click b08 y'), (119, 'x Dlick b09 y'), (120, 'x Elick b10 y');\n \n -- check full_text index was created\n SELECT name, type FROM system.data_skipping_indices WHERE table == 'tab_x' AND database = currentDatabase() LIMIT 1;\n@@ -86,27 +86,27 @@ SELECT read_rows==8 from system.query_log\n     LIMIT 1;\n \n -- search full_text index with IN operator\n-SELECT * FROM tab_x WHERE s IN ('Alick a01', 'Alick a06') ORDER BY k;\n+SELECT * FROM tab_x WHERE s IN ('x Alick a01 y', 'x Alick a06 y') ORDER BY k;\n \n -- check the query only read 2 granules (4 rows total; each granule has 2 rows)\n SYSTEM FLUSH LOGS;\n SELECT read_rows==4 from system.query_log\n     WHERE query_kind ='Select'\n         AND current_database = currentDatabase()\n-        AND endsWith(trimRight(query), 'SELECT * FROM tab_x WHERE s IN (\\'Alick a01\\', \\'Alick a06\\') ORDER BY k;')\n+        AND endsWith(trimRight(query), 'SELECT * FROM tab_x WHERE s IN (\\'x Alick a01 y\\', \\'x Alick a06 y\\') ORDER BY k;')\n         AND type='QueryFinish'\n         AND result_rows==2\n     LIMIT 1;\n \n -- search full_text index with multiSearch\n-SELECT * FROM tab_x WHERE multiSearchAny(s, ['a01', 'b01']) ORDER BY k;\n+SELECT * FROM tab_x WHERE multiSearchAny(s, [' a01 ', ' b01 ']) ORDER BY k;\n \n -- check the query only read 2 granules (4 rows total; each granule has 2 rows)\n SYSTEM FLUSH LOGS;\n SELECT read_rows==4 from system.query_log\n     WHERE query_kind ='Select'\n         AND current_database = currentDatabase()\n-        AND endsWith(trimRight(query), 'SELECT * FROM tab_x WHERE multiSearchAny(s, [\\'a01\\', \\'b01\\']) ORDER BY k;')\n+        AND endsWith(trimRight(query), 'SELECT * FROM tab_x WHERE multiSearchAny(s, [\\' a01 \\', \\' b01 \\']) ORDER BY k;')\n         AND type='QueryFinish'\n         AND result_rows==2\n     LIMIT 1;\n@@ -126,14 +126,14 @@ INSERT INTO tab SELECT rowNumberInBlock(), groupArray(s) FROM tab_x GROUP BY k%1\n SELECT name, type FROM system.data_skipping_indices WHERE table == 'tab' AND database = currentDatabase() LIMIT 1;\n \n -- search full_text index with has\n-SELECT * FROM tab WHERE has(s, 'Click a03') ORDER BY k;\n+SELECT * FROM tab WHERE has(s, 'x Click a03 y') ORDER BY k;\n \n -- check the query must read all 10 granules (20 rows total; each granule has 2 rows)\n SYSTEM FLUSH LOGS;\n SELECT read_rows==2 from system.query_log\n     WHERE query_kind ='Select'\n         AND current_database = currentDatabase()\n-        AND endsWith(trimRight(query), 'SELECT * FROM tab WHERE has(s, \\'Click a03\\') ORDER BY k;')\n+        AND endsWith(trimRight(query), 'SELECT * FROM tab WHERE has(s, \\'x Click a03 y\\') ORDER BY k;')\n         AND type='QueryFinish'\n         AND result_rows==1\n     LIMIT 1;\ndiff --git a/tests/queries/0_stateless/02943_tokenbf_and_ngrambf_indexes_support_match_function.reference b/tests/queries/0_stateless/02943_tokenbf_and_ngrambf_indexes_support_match_function.reference\nindex 0e1954cde627..5b7ad7ddce08 100644\n--- a/tests/queries/0_stateless/02943_tokenbf_and_ngrambf_indexes_support_match_function.reference\n+++ b/tests/queries/0_stateless/02943_tokenbf_and_ngrambf_indexes_support_match_function.reference\n@@ -1,5 +1,5 @@\n-1\tHello ClickHouse\n-2\tHello World\n+1\tWell, Hello ClickHouse !\n+2\tWell, Hello World !\n 1\tHello ClickHouse\n 2\tHello World\n             Granules: 6/6\n@@ -11,9 +11,9 @@\n             Granules: 6/6\n             Granules: 2/6\n ---\n-1\tHello ClickHouse\n-2\tHello World\n-6\tWorld Champion\n+1\tWell, Hello ClickHouse !\n+2\tWell, Hello World !\n+6\tTrue World Champion\n 1\tHello ClickHouse\n 2\tHello World\n 6\tWorld Champion\n@@ -26,7 +26,7 @@\n             Granules: 6/6\n             Granules: 3/6\n ---\n-5\tOLAP Database\n+5\tIts An OLAP Database\n 5\tOLAP Database\n             Granules: 6/6\n             Granules: 1/6\ndiff --git a/tests/queries/0_stateless/02943_tokenbf_and_ngrambf_indexes_support_match_function.sql b/tests/queries/0_stateless/02943_tokenbf_and_ngrambf_indexes_support_match_function.sql\nindex 49d39c601ef6..42175cbb2c6d 100644\n--- a/tests/queries/0_stateless/02943_tokenbf_and_ngrambf_indexes_support_match_function.sql\n+++ b/tests/queries/0_stateless/02943_tokenbf_and_ngrambf_indexes_support_match_function.sql\n@@ -21,21 +21,22 @@ ENGINE = MergeTree\n ORDER BY id\n SETTINGS index_granularity = 1;\n \n-INSERT INTO tokenbf_tab VALUES (1, 'Hello ClickHouse'), (2, 'Hello World'), (3, 'Good Weather'), (4, 'Say Hello'), (5, 'OLAP Database'), (6, 'World Champion');\n+INSERT INTO tokenbf_tab VALUES (1, 'Well, Hello ClickHouse !'), (2, 'Well, Hello World !'), (3, 'Good Weather !'), (4, 'Say Hello !'), (5, 'Its An OLAP Database'), (6, 'True World Champion');\n INSERT INTO ngrambf_tab VALUES (1, 'Hello ClickHouse'), (2, 'Hello World'), (3, 'Good Weather'), (4, 'Say Hello'), (5, 'OLAP Database'), (6, 'World Champion');\n \n-SELECT * FROM tokenbf_tab WHERE match(str, 'Hello (ClickHouse|World)') ORDER BY id;\n+SELECT * FROM tokenbf_tab WHERE match(str, ' Hello (ClickHouse|World) ') ORDER BY id;\n SELECT * FROM ngrambf_tab WHERE match(str, 'Hello (ClickHouse|World)') ORDER BY id;\n \n -- Read 2/6 granules\n -- Required string: 'Hello '\n -- Alternatives: 'Hello ClickHouse', 'Hello World'\n+-- Surrounded by spaces for tokenbf\n \n SELECT *\n FROM\n (\n     EXPLAIN PLAN indexes=1\n-    SELECT * FROM tokenbf_tab WHERE match(str, 'Hello (ClickHouse|World)') ORDER BY id\n+    SELECT * FROM tokenbf_tab WHERE match(str, ' Hello (ClickHouse|World) ') ORDER BY id\n )\n WHERE\n     explain LIKE '%Granules: %'\n@@ -46,7 +47,7 @@ SELECT *\n FROM\n (\n     EXPLAIN PLAN indexes=1\n-    SELECT * FROM tokenbf_tab WHERE match(str, 'Hello (ClickHouse|World)') ORDER BY id\n+    SELECT * FROM tokenbf_tab WHERE match(str, ' Hello (ClickHouse|World) ') ORDER BY id\n )\n WHERE\n     explain LIKE '%Granules: %'\n@@ -78,18 +79,19 @@ SETTINGS\n \n SELECT '---';\n \n-SELECT * FROM tokenbf_tab WHERE match(str, '.*(ClickHouse|World)') ORDER BY id;\n+SELECT * FROM tokenbf_tab WHERE match(str, '.* (ClickHouse|World) ') ORDER BY id;\n SELECT * FROM ngrambf_tab WHERE match(str, '.*(ClickHouse|World)') ORDER BY id;\n \n -- Read 3/6 granules\n -- Required string: -\n -- Alternatives: 'ClickHouse', 'World'\n+-- Surrounded by spaces for tokenbf\n \n SELECT *\n FROM\n (\n     EXPLAIN PLAN indexes = 1\n-    SELECT * FROM tokenbf_tab WHERE match(str, '.*(ClickHouse|World)') ORDER BY id\n+    SELECT * FROM tokenbf_tab WHERE match(str, '.* (ClickHouse|World) ') ORDER BY id\n )\n WHERE\n     explain LIKE '%Granules: %'\n@@ -100,7 +102,7 @@ SELECT *\n FROM\n (\n     EXPLAIN PLAN indexes = 1\n-    SELECT * FROM tokenbf_tab WHERE match(str, '.*(ClickHouse|World)') ORDER BY id\n+    SELECT * FROM tokenbf_tab WHERE match(str, '.* (ClickHouse|World) ') ORDER BY id\n )\n WHERE\n     explain LIKE '%Granules: %'\n@@ -131,18 +133,19 @@ SETTINGS\n \n SELECT '---';\n \n-SELECT * FROM tokenbf_tab WHERE match(str, 'OLAP.*') ORDER BY id;\n+SELECT * FROM tokenbf_tab WHERE match(str, ' OLAP .*') ORDER BY id;\n SELECT * FROM ngrambf_tab WHERE match(str, 'OLAP.*') ORDER BY id;\n \n -- Read 1/6 granules\n -- Required string: 'OLAP'\n -- Alternatives: -\n+-- Surrounded by spaces for tokenbf\n \n SELECT *\n FROM\n (\n     EXPLAIN PLAN indexes = 1\n-    SELECT * FROM tokenbf_tab WHERE match(str, 'OLAP (.*?)*') ORDER BY id\n+    SELECT * FROM tokenbf_tab WHERE match(str, ' OLAP (.*?)*') ORDER BY id\n )\n WHERE\n     explain LIKE '%Granules: %'\n@@ -152,7 +155,7 @@ SELECT *\n FROM\n (\n     EXPLAIN PLAN indexes = 1\n-    SELECT * FROM tokenbf_tab WHERE match(str, 'OLAP (.*?)*') ORDER BY id\n+    SELECT * FROM tokenbf_tab WHERE match(str, ' OLAP (.*?)*') ORDER BY id\n )\n WHERE\n     explain LIKE '%Granules: %'\ndiff --git a/tests/queries/0_stateless/03165_string_functions_with_token_text_indexes.reference b/tests/queries/0_stateless/03165_string_functions_with_token_text_indexes.reference\nnew file mode 100644\nindex 000000000000..4fb6812cb4f6\n--- /dev/null\n+++ b/tests/queries/0_stateless/03165_string_functions_with_token_text_indexes.reference\n@@ -0,0 +1,83 @@\n+-------- Bloom filter --------\n+\n+-- No skip for prefix\n+Parts: 1/1\n+Parts: 1/1\n+1\tService is not ready\n+\n+-- Skip for prefix with complete token\n+Parts: 1/1\n+Parts: 0/1\n+\n+-- No skip for suffix\n+Parts: 1/1\n+Parts: 1/1\n+1\tService is not ready\n+\n+-- Skip for suffix with complete token\n+Parts: 1/1\n+Parts: 0/1\n+\n+-- No skip for substring\n+Parts: 1/1\n+Parts: 1/1\n+1\tService is not ready\n+\n+-- Skip for substring with complete token\n+Parts: 1/1\n+Parts: 0/1\n+\n+-- No skip for multiple substrings\n+Parts: 1/1\n+Parts: 1/1\n+1\tService is not ready\n+\n+-- Skip for multiple substrings with complete tokens\n+Parts: 1/1\n+Parts: 0/1\n+\n+-- No skip for multiple non-existsing substrings, only one with complete token\n+Parts: 1/1\n+Parts: 1/1\n+\n+-------- GIN filter --------\n+\n+-- No skip for prefix\n+Parts: 1/1\n+Parts: 1/1\n+1\tService is not ready\n+\n+-- Skip for prefix with complete token\n+Parts: 1/1\n+Parts: 0/1\n+\n+-- No skip for suffix\n+Parts: 1/1\n+Parts: 1/1\n+1\tService is not ready\n+\n+-- Skip for suffix with complete token\n+Parts: 1/1\n+Parts: 0/1\n+\n+-- No skip for substring\n+Parts: 1/1\n+Parts: 1/1\n+1\tService is not ready\n+\n+-- Skip for substring with complete token\n+Parts: 1/1\n+Parts: 0/1\n+\n+-- No skip for multiple substrings\n+Parts: 1/1\n+Parts: 1/1\n+1\tService is not ready\n+\n+-- Skip for multiple substrings with complete tokens\n+Parts: 1/1\n+Parts: 0/1\n+\n+-- No skip for multiple non-existsing substrings, only one with complete token\n+Parts: 1/1\n+Parts: 1/1\ndiff --git a/tests/queries/0_stateless/03165_string_functions_with_token_text_indexes.sql b/tests/queries/0_stateless/03165_string_functions_with_token_text_indexes.sql\nnew file mode 100644\nindex 000000000000..a0cb8a35169f\n--- /dev/null\n+++ b/tests/queries/0_stateless/03165_string_functions_with_token_text_indexes.sql\n@@ -0,0 +1,227 @@\n+SELECT '-------- Bloom filter --------';\n+SELECT '';\n+DROP TABLE IF EXISTS 03165_token_bf;\n+\n+CREATE TABLE 03165_token_bf\n+(\n+    id Int64,\n+    message String,\n+    INDEX idx_message message TYPE tokenbf_v1(32768, 3, 2) GRANULARITY 1\n+)\n+ENGINE = MergeTree\n+ORDER BY id;\n+\n+INSERT INTO 03165_token_bf VALUES(1, 'Service is not ready');\n+\n+SELECT '-- No skip for prefix';\n+\n+SELECT trim(explain)\n+FROM (\n+    EXPLAIN indexes = 1 SELECT * FROM 03165_token_bf WHERE startsWith(message, 'Serv')\n+)\n+WHERE explain LIKE '%Parts:%';\n+\n+SELECT * FROM 03165_token_bf WHERE startsWith(message, 'Serv');\n+\n+SELECT '';\n+SELECT '-- Skip for prefix with complete token';\n+\n+SELECT trim(explain)\n+FROM (\n+    EXPLAIN indexes = 1 SELECT * FROM 03165_token_bf WHERE startsWith(message, 'Serv i')\n+)\n+WHERE explain LIKE '%Parts:%';\n+\n+SELECT * FROM 03165_token_bf WHERE startsWith(message, 'Serv i');\n+\n+SELECT '';\n+SELECT '-- No skip for suffix';\n+\n+SELECT trim(explain)\n+FROM (\n+    EXPLAIN indexes = 1 SELECT * FROM 03165_token_bf WHERE endsWith(message, 'eady')\n+)\n+WHERE explain LIKE '%Parts:%';\n+\n+SELECT * FROM 03165_token_bf WHERE endsWith(message, 'eady');\n+\n+SELECT '';\n+SELECT '-- Skip for suffix with complete token';\n+\n+SELECT trim(explain)\n+FROM (\n+    EXPLAIN indexes = 1 SELECT * FROM 03165_token_bf WHERE endsWith(message, ' eady')\n+)\n+WHERE explain LIKE '%Parts:%';\n+\n+SELECT * FROM 03165_token_bf WHERE endsWith(message, ' eady');\n+\n+SELECT '';\n+SELECT '-- No skip for substring';\n+\n+SELECT trim(explain)\n+FROM (\n+    EXPLAIN indexes = 1 SELECT * FROM 03165_token_bf WHERE match(message, 'no')\n+)\n+WHERE explain LIKE '%Parts:%';\n+\n+SELECT * FROM 03165_token_bf WHERE match(message, 'no');\n+\n+SELECT '';\n+SELECT '-- Skip for substring with complete token';\n+\n+SELECT trim(explain)\n+FROM (\n+    EXPLAIN indexes = 1 SELECT * FROM 03165_token_bf WHERE match(message, ' xyz ')\n+)\n+WHERE explain LIKE '%Parts:%';\n+\n+SELECT * FROM 03165_token_bf WHERE match(message, ' xyz ');\n+\n+SELECT '';\n+SELECT '-- No skip for multiple substrings';\n+\n+SELECT trim(explain)\n+FROM (\n+    EXPLAIN indexes = 1 SELECT * FROM 03165_token_bf WHERE multiSearchAny(message, ['ce', 'no'])\n+)\n+WHERE explain LIKE '%Parts:%';\n+\n+SELECT * FROM 03165_token_bf WHERE multiSearchAny(message, ['ce', 'no']);\n+\n+SELECT '';\n+SELECT '-- Skip for multiple substrings with complete tokens';\n+\n+SELECT trim(explain)\n+FROM (\n+    EXPLAIN indexes = 1 SELECT * FROM 03165_token_bf WHERE multiSearchAny(message, [' wx ', ' yz '])\n+)\n+WHERE explain LIKE '%Parts:%';\n+\n+SELECT * FROM 03165_token_bf WHERE multiSearchAny(message, [' wx ', ' yz ']);\n+\n+SELECT '';\n+SELECT '-- No skip for multiple non-existsing substrings, only one with complete token';\n+SELECT trim(explain)\n+FROM (\n+    EXPLAIN indexes = 1 SELECT * FROM 03165_token_bf WHERE multiSearchAny(message, [' wx ', 'yz'])\n+)\n+WHERE explain LIKE '%Parts:%';\n+\n+SELECT * FROM 03165_token_bf WHERE multiSearchAny(message, [' wx ', 'yz']);\n+\n+DROP TABLE IF EXISTS 03165_token_bf;\n+\n+SELECT '';\n+SELECT '-------- GIN filter --------';\n+SELECT '';\n+\n+SET allow_experimental_inverted_index=1;\n+DROP TABLE IF EXISTS 03165_token_ft;\n+CREATE TABLE 03165_token_ft\n+(\n+    id Int64,\n+    message String,\n+    INDEX idx_message message TYPE full_text() GRANULARITY 1\n+)\n+ENGINE = MergeTree\n+ORDER BY id;\n+\n+INSERT INTO 03165_token_ft VALUES(1, 'Service is not ready');\n+\n+SELECT '-- No skip for prefix';\n+\n+SELECT trim(explain)\n+FROM (\n+    EXPLAIN indexes = 1 SELECT * FROM 03165_token_ft WHERE startsWith(message, 'Serv')\n+)\n+WHERE explain LIKE '%Parts:%';\n+\n+SELECT * FROM 03165_token_ft WHERE startsWith(message, 'Serv');\n+\n+SELECT '';\n+SELECT '-- Skip for prefix with complete token';\n+\n+SELECT trim(explain)\n+FROM (\n+    EXPLAIN indexes = 1 SELECT * FROM 03165_token_ft WHERE startsWith(message, 'Serv i')\n+)\n+WHERE explain LIKE '%Parts:%';\n+\n+SELECT * FROM 03165_token_ft WHERE startsWith(message, 'Serv i');\n+\n+SELECT '';\n+SELECT '-- No skip for suffix';\n+\n+SELECT trim(explain)\n+FROM (\n+    EXPLAIN indexes = 1 SELECT * FROM 03165_token_ft WHERE endsWith(message, 'eady')\n+)\n+WHERE explain LIKE '%Parts:%';\n+\n+SELECT * FROM 03165_token_ft WHERE endsWith(message, 'eady');\n+\n+SELECT '';\n+SELECT '-- Skip for suffix with complete token';\n+\n+SELECT trim(explain)\n+FROM (\n+    EXPLAIN indexes = 1 SELECT * FROM 03165_token_ft WHERE endsWith(message, ' eady')\n+)\n+WHERE explain LIKE '%Parts:%';\n+\n+SELECT * FROM 03165_token_ft WHERE endsWith(message, ' eady');\n+\n+SELECT '';\n+SELECT '-- No skip for substring';\n+\n+SELECT trim(explain)\n+FROM (\n+    EXPLAIN indexes = 1 SELECT * FROM 03165_token_ft WHERE match(message, 'no')\n+)\n+WHERE explain LIKE '%Parts:%';\n+\n+SELECT * FROM 03165_token_ft WHERE match(message, 'no');\n+\n+SELECT '';\n+SELECT '-- Skip for substring with complete token';\n+\n+SELECT trim(explain)\n+FROM (\n+    EXPLAIN indexes = 1 SELECT * FROM 03165_token_ft WHERE match(message, ' xyz ')\n+)\n+WHERE explain LIKE '%Parts:%';\n+\n+SELECT * FROM 03165_token_ft WHERE match(message, ' xyz ');\n+\n+SELECT '';\n+SELECT '-- No skip for multiple substrings';\n+\n+SELECT trim(explain)\n+FROM (\n+    EXPLAIN indexes = 1 SELECT * FROM 03165_token_ft WHERE multiSearchAny(message, ['ce', 'no'])\n+)\n+WHERE explain LIKE '%Parts:%';\n+\n+SELECT * FROM 03165_token_ft WHERE multiSearchAny(message, ['ce', 'no']);\n+\n+SELECT '';\n+SELECT '-- Skip for multiple substrings with complete tokens';\n+\n+SELECT trim(explain)\n+FROM (\n+    EXPLAIN indexes = 1 SELECT * FROM 03165_token_ft WHERE multiSearchAny(message, [' wx ', ' yz '])\n+)\n+WHERE explain LIKE '%Parts:%';\n+\n+SELECT * FROM 03165_token_ft WHERE multiSearchAny(message, [' wx ', ' yz ']);\n+\n+SELECT '';\n+SELECT '-- No skip for multiple non-existsing substrings, only one with complete token';\n+SELECT trim(explain)\n+FROM (\n+    EXPLAIN indexes = 1 SELECT * FROM 03165_token_ft WHERE multiSearchAny(message, [' wx ', 'yz'])\n+)\n+WHERE explain LIKE '%Parts:%';\n+\n+SELECT * FROM 03165_token_ft WHERE multiSearchAny(message, [' wx ', 'yz']);\n",
  "problem_statement": "startsWith on column with token-based bloom filter does not produce correct result\nOn 24.3 and before\r\n\r\n```sql\r\nCREATE TABLE startswith\r\n(\r\n    `id` Int64,\r\n    `message` String\r\n)\r\nENGINE = MergeTree\r\nORDER BY id\r\n\r\ninsert into startswith values(1, 'Service is not ready');\r\n\r\nselect * from startswith where startsWith(message, 'Ser')\r\n\r\n   \u250c\u2500id\u2500\u252c\u2500message\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n1. \u2502  1 \u2502 Service is not ready \u2502\r\n   \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nIf token index is added to the message column, the above query does not find any record\r\n\r\n```sql\r\nALTER TABLE startswith\r\n    ADD INDEX idx_message message TYPE tokenbf_v1(32768, 3, 2) GRANULARITY 1\r\n    \r\n    ALTER TABLE startswith\r\n    MATERIALIZE INDEX idx_message\r\n\r\nselect * from startswith where startsWith(message, 'Ser')\r\n```\r\n\r\nthe query plan shows that for such query, the skipping index is used. since the given pattern 'Ser' does not match any tokens in the index, the above quey give no output\r\n\r\n```text\r\nExpression ((Project names + Projection))\r\n  Expression\r\n    ReadFromMergeTree (default.startswith)\r\n    Indexes:\r\n      PrimaryKey\r\n        Condition: true\r\n        Parts: 1/1\r\n        Granules: 1/1\r\n      Skip\r\n        Name: idx_message\r\n        Description: tokenbf_v1 GRANULARITY 1\r\n        Parts: 0/1\r\n        Granules: 0/1\r\n```\r\n\r\nOnly if a token is given to the startsWith, it outputs the result:\r\n\r\n```sql\r\nselect * from startswith where startsWith(message, 'Service')\r\n   \u250c\u2500id\u2500\u252c\u2500message\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n1. \u2502  1 \u2502 Service is not ready \u2502\r\n   \u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nfrom user's view, whether there's index, the output should be the same.\r\n\n",
  "hints_text": "",
  "created_at": "2024-06-01T15:01:42Z"
}