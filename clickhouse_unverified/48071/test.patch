diff --git a/tests/queries/0_stateless/02030_function_mapContainsKeyLike.reference b/tests/queries/0_stateless/02030_function_mapContainsKeyLike.reference
index eb8bc83384e9..1f8f2bf0d0c2 100644
--- a/tests/queries/0_stateless/02030_function_mapContainsKeyLike.reference
+++ b/tests/queries/0_stateless/02030_function_mapContainsKeyLike.reference
@@ -4,3 +4,11 @@
 4	{'4-K1':'4-V1','4-K2':'4-V2'}
 5	{'5-K1':'5-V1','5-K2':'5-V2'}
 6	{'6-K1':'6-V1','6-K2':'6-V2'}
+1
+1
+1
+1
+1
+0
+{'aa':NULL}
+{}
diff --git a/tests/queries/0_stateless/02030_function_mapContainsKeyLike.sql b/tests/queries/0_stateless/02030_function_mapContainsKeyLike.sql
index 7d9722b4c906..b04c5945a081 100644
--- a/tests/queries/0_stateless/02030_function_mapContainsKeyLike.sql
+++ b/tests/queries/0_stateless/02030_function_mapContainsKeyLike.sql
@@ -10,3 +10,14 @@ SELECT id, map FROM map_containsKeyLike_test WHERE mapContainsKeyLike(map, '1-%'
 SELECT id, map FROM map_containsKeyLike_test WHERE mapContainsKeyLike(map, '3-%') = 0 order by id;
 
 DROP TABLE map_containsKeyLike_test;
+
+SELECT mapContainsKeyLike(map('aa', 1, 'bb', 2), 'a%');
+SELECT mapContainsKeyLike(map('aa', 1, 'bb', 2), materialize('a%'));
+SELECT mapContainsKeyLike(materialize(map('aa', 1, 'bb', 2)), 'a%');
+SELECT mapContainsKeyLike(materialize(map('aa', 1, 'bb', 2)), materialize('a%'));
+
+SELECT mapContainsKeyLike(map('aa', NULL, 'bb', NULL), 'a%');
+SELECT mapContainsKeyLike(map('aa', NULL, 'bb', NULL), 'q%');
+
+SELECT mapExtractKeyLike(map('aa', NULL, 'bb', NULL), 'a%');
+SELECT mapExtractKeyLike(map('aa', NULL, 'bb', NULL), 'q%');
diff --git a/tests/queries/0_stateless/02111_function_mapExtractKeyLike.reference b/tests/queries/0_stateless/02111_function_mapExtractKeyLike.reference
index 45edbc24c75e..c6bd4c31538f 100644
--- a/tests/queries/0_stateless/02111_function_mapExtractKeyLike.reference
+++ b/tests/queries/0_stateless/02111_function_mapExtractKeyLike.reference
@@ -21,3 +21,7 @@ The results of query: SELECT id, mapExtractKeyLike(map, \'5-K1\') FROM map_extra
 4	{}
 5	{'5-K1':'5-V1'}
 6	{}
+{'aa':1}
+{'aa':1}
+{'aa':1}
+{'aa':1}
diff --git a/tests/queries/0_stateless/02111_function_mapExtractKeyLike.sql b/tests/queries/0_stateless/02111_function_mapExtractKeyLike.sql
index 31f53642b74f..a17b6b745950 100644
--- a/tests/queries/0_stateless/02111_function_mapExtractKeyLike.sql
+++ b/tests/queries/0_stateless/02111_function_mapExtractKeyLike.sql
@@ -7,7 +7,7 @@ INSERT INTO map_extractKeyLike_test VALUES (3, {'P1-K1':'3-V1','P2-K2':'3-V2'}),
 INSERT INTO map_extractKeyLike_test VALUES (5, {'5-K1':'5-V1','5-K2':'5-V2'}),(6, {'P3-K1':'6-V1','P4-K2':'6-V2'});
 
 SELECT 'The data of table:';
-SELECT * FROM map_extractKeyLike_test ORDER BY id; 
+SELECT * FROM map_extractKeyLike_test ORDER BY id;
 
 SELECT '';
 
@@ -20,3 +20,8 @@ SELECT 'The results of query: SELECT id, mapExtractKeyLike(map, \'5-K1\') FROM m
 SELECT id, mapExtractKeyLike(map, '5-K1') FROM map_extractKeyLike_test ORDER BY id;
 
 DROP TABLE map_extractKeyLike_test;
+
+SELECT mapExtractKeyLike(map('aa', 1, 'bb', 2), 'a%');
+SELECT mapExtractKeyLike(map('aa', 1, 'bb', 2), materialize('a%'));
+SELECT mapExtractKeyLike(materialize(map('aa', 1, 'bb', 2)), 'a%');
+SELECT mapExtractKeyLike(materialize(map('aa', 1, 'bb', 2)), materialize('a%'));
diff --git a/tests/queries/0_stateless/02169_map_functions.reference b/tests/queries/0_stateless/02169_map_functions.reference
index ed5394726c03..bec2eaec5958 100644
--- a/tests/queries/0_stateless/02169_map_functions.reference
+++ b/tests/queries/0_stateless/02169_map_functions.reference
@@ -26,6 +26,55 @@
 {}
 {}
 {}
+{'key3':100,'key2':101,'key4':102,'key5':500,'key6':600}
+{'key3':101,'key2':102,'key4':103,'key5':500,'key6':600}
+{'key3':102,'key2':103,'key4':104,'key5':500,'key6':600}
+{'key3':103,'key2':104,'key4':105,'key5':500,'key6':600}
+{'key1':1111,'key2':2222,'key5':500,'key6':600}
+{'key1':1112,'key2':2224,'key5':500,'key6':600}
+{'key1':1113,'key2':2226,'key5':500,'key6':600}
+{'key3':100,'key2':101,'key4':102,'key5':500,'key6':600}
+{'key3':101,'key2':102,'key4':103,'key5':500,'key6':600}
+{'key3':102,'key2':103,'key4':104,'key5':500,'key6':600}
+{'key3':103,'key2':104,'key4':105,'key5':500,'key6':600}
+{'key1':1111,'key2':2222,'key5':500,'key6':600}
+{'key1':1112,'key2':2224,'key5':500,'key6':600}
+{'key1':1113,'key2':2226,'key5':500,'key6':600}
+1
+1
+1
+1
+0
+0
+0
+1
+1
+1
+1
+0
+0
+0
+{'key2':101,'key3':100,'key4':102}
+{'key2':102,'key3':101,'key4':103}
+{'key2':103,'key3':102,'key4':104}
+{'key2':104,'key3':103,'key4':105}
+{'key1':1111,'key2':2222}
+{'key1':1112,'key2':2224}
+{'key1':1113,'key2':2226}
+{'key3':100,'key2':101,'key4':102}
+{'key3':101,'key2':102,'key4':103}
+{'key3':102,'key2':103,'key4':104}
+{'key3':103,'key2':104,'key4':105}
+{'key1':1111,'key2':2222}
+{'key1':1112,'key2':2224}
+{'key1':1113,'key2':2226}
+{'key2':101,'key3':100,'key4':102}
+{'key2':102,'key3':101,'key4':103}
+{'key2':103,'key3':102,'key4':104}
+{'key2':104,'key3':103,'key4':105}
+{'key1':1111,'key2':2222}
+{'key1':1112,'key2':2224}
+{'key1':1113,'key2':2226}
 {3:2,1:0,2:0}
 {1:2,2:3}
 {1:2,2:3}
diff --git a/tests/queries/0_stateless/02169_map_functions.sql b/tests/queries/0_stateless/02169_map_functions.sql
index 1f43647c5091..27ceb2520220 100644
--- a/tests/queries/0_stateless/02169_map_functions.sql
+++ b/tests/queries/0_stateless/02169_map_functions.sql
@@ -7,7 +7,17 @@ SELECT mapFilter((k, v) -> k like '%3' and v > 102, col) FROM table_map ORDER BY
 SELECT col, mapFilter((k, v) -> ((v % 10) > 1), col) FROM table_map ORDER BY id ASC;
 SELECT mapApply((k, v) -> (k, v + 1), col) FROM table_map ORDER BY id;
 SELECT mapFilter((k, v) -> 0, col) from table_map;
-SELECT mapApply((k, v) -> tuple(v + 9223372036854775806), col) FROM table_map; -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }
+SELECT mapApply((k, v) -> tuple(v + 9223372036854775806), col) FROM table_map; -- { serverError BAD_ARGUMENTS }
+
+SELECT mapConcat(col, map('key5', 500), map('key6', 600)) FROM table_map ORDER BY id;
+SELECT mapConcat(col, materialize(map('key5', 500)), map('key6', 600)) FROM table_map ORDER BY id;
+
+SELECT mapExists((k, v) -> k LIKE '%3', col) FROM table_map ORDER BY id;
+SELECT mapExists((k, v) -> k LIKE '%2' AND v < 1000, col) FROM table_map ORDER BY id;
+
+SELECT mapSort(col) FROM table_map ORDER BY id;
+SELECT mapSort((k, v) -> v, col) FROM table_map ORDER BY id;
+SELECT mapPartialSort((k, v) -> k, 2, col) FROM table_map ORDER BY id;
 
 SELECT mapUpdate(map(1, 3, 3, 2), map(1, 0, 2, 0));
 SELECT mapApply((x, y) -> (x, x + 1), map(1, 0, 2, 0));
@@ -35,22 +45,25 @@ WITH (range(0, number % 10), range(0, number % 10))::Map(UInt64, UInt64) AS m1,
 SELECT DISTINCT mapUpdate(m1, m2) FROM numbers (100000);
 
 SELECT mapApply(); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }
-SELECT mapApply((x, y) -> (x), map(1, 0, 2, 0)); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }
-SELECT mapApply((x, y) -> ('x'), map(1, 0, 2, 0)); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }
-SELECT mapApply((x) -> (x, x), map(1, 0, 2, 0)); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }
-SELECT mapApply((x, y) -> (x, 1, 2), map(1, 0, 2, 0)); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }
-SELECT mapApply((x, y) -> (x, x + 1)); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }
+SELECT mapApply((x, y) -> (x), map(1, 0, 2, 0)); -- { serverError BAD_ARGUMENTS }
+SELECT mapApply((x, y) -> ('x'), map(1, 0, 2, 0)); -- { serverError BAD_ARGUMENTS }
+SELECT mapApply((x) -> (x, x), map(1, 0, 2, 0)); -- { serverError BAD_ARGUMENTS }
+SELECT mapApply((x, y) -> (x, 1, 2), map(1, 0, 2, 0)); -- { serverError BAD_ARGUMENTS }
+SELECT mapApply((x, y) -> (x, x + 1)); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }
 SELECT mapApply(map(1, 0, 2, 0), (x, y) -> (x, x + 1)); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }
-SELECT mapApply((x, y) -> (x, x+1), map(1, 0, 2, 0), map(1, 0, 2, 0)); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }
+SELECT mapApply((x, y) -> (x, x+1), map(1, 0, 2, 0), map(1, 0, 2, 0)); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }
 
 SELECT mapFilter(); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }
 SELECT mapFilter((x, y) -> (toInt32(x)), map(1, 0, 2, 0)); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }
 SELECT mapFilter((x, y) -> ('x'), map(1, 0, 2, 0)); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }
 SELECT mapFilter((x) -> (x, x), map(1, 0, 2, 0)); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }
 SELECT mapFilter((x, y) -> (x, 1, 2), map(1, 0, 2, 0)); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }
-SELECT mapFilter((x, y) -> (x, x + 1)); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }
+SELECT mapFilter((x, y) -> (x, x + 1)); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }
 SELECT mapFilter(map(1, 0, 2, 0), (x, y) -> (x > 0)); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }
-SELECT mapFilter((x, y) -> (x, x + 1), map(1, 0, 2, 0), map(1, 0, 2, 0)); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }
+SELECT mapFilter((x, y) -> (x, x + 1), map(1, 0, 2, 0), map(1, 0, 2, 0)); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }
+
+SELECT mapConcat([1, 2], map(1, 2)); -- { serverError NO_COMMON_TYPE }
+SELECT mapSort(map(1, 2), map(3, 4)); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }
 
 SELECT mapUpdate(); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }
 SELECT mapUpdate(map(1, 3, 3, 2), map(1, 0, 2, 0),  map(1, 0, 2, 0)); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }
diff --git a/tests/queries/0_stateless/02179_map_cast_to_array.reference b/tests/queries/0_stateless/02179_map_cast_to_array.reference
index c1870e78bb77..81bb9fba537d 100644
--- a/tests/queries/0_stateless/02179_map_cast_to_array.reference
+++ b/tests/queries/0_stateless/02179_map_cast_to_array.reference
@@ -6,3 +6,4 @@
 {1:{1:'1234'}}	[(1,{1:1234})]	[(1,{1:1234})]
 {1:{1:'1234'}}	[(1,[(1,'1234')])]	[(1,[(1,'1234')])]
 {1:{1:'1234'}}	[(1,[(1,1234)])]	[(1,[(1,1234)])]
+[(1,'val1'),(2,'val2')]	Array(Tuple(k UInt32, v String))
diff --git a/tests/queries/0_stateless/02179_map_cast_to_array.sql b/tests/queries/0_stateless/02179_map_cast_to_array.sql
index b1320d7a43c0..25b090c10b7f 100644
--- a/tests/queries/0_stateless/02179_map_cast_to_array.sql
+++ b/tests/queries/0_stateless/02179_map_cast_to_array.sql
@@ -24,3 +24,6 @@ SELECT value, cast(value, type), cast(materialize(value), type);
 
 WITH map(1, map(1, '1234')) as value, 'Array(Tuple(UInt64, Array(Tuple(UInt64, UInt64))))' AS type
 SELECT value, cast(value, type), cast(materialize(value), type);
+
+WITH map(1, 'val1', 2, 'val2') AS map
+SELECT CAST(map, 'Array(Tuple(k UInt32, v String))') AS c, toTypeName(c);
diff --git a/tests/queries/0_stateless/02415_all_new_functions_must_be_documented.reference b/tests/queries/0_stateless/02415_all_new_functions_must_be_documented.reference
index 4ff8c2d3af1a..eb574c4e4f58 100644
--- a/tests/queries/0_stateless/02415_all_new_functions_must_be_documented.reference
+++ b/tests/queries/0_stateless/02415_all_new_functions_must_be_documented.reference
@@ -417,17 +417,10 @@ makeDateTime
 makeDateTime64
 map
 mapAdd
-mapApply
-mapContains
-mapContainsKeyLike
-mapExtractKeyLike
-mapFilter
 mapFromArrays
-mapKeys
 mapPopulateSeries
 mapSubtract
 mapUpdate
-mapValues
 match
 materialize
 max2
diff --git a/tests/queries/0_stateless/02706_array_map_tuples.reference b/tests/queries/0_stateless/02706_array_map_tuples.reference
new file mode 100644
index 000000000000..a44843f1a35f
--- /dev/null
+++ b/tests/queries/0_stateless/02706_array_map_tuples.reference
@@ -0,0 +1,3 @@
+[(2,1)]
+[1]
+[(3,2)]
diff --git a/tests/queries/0_stateless/02706_array_map_tuples.sql b/tests/queries/0_stateless/02706_array_map_tuples.sql
new file mode 100644
index 000000000000..205e15c7de2f
--- /dev/null
+++ b/tests/queries/0_stateless/02706_array_map_tuples.sql
@@ -0,0 +1,6 @@
+WITH [(1, 2)] AS arr1 SELECT arrayMap((x, y) -> (y, x), arr1);
+WITH [(1, 2)] AS arr1 SELECT arrayMap(x -> x.1, arr1);
+WITH [(1, 2)] AS arr1, [(3, 4)] AS arr2 SELECT arrayMap((x, y) -> (y.1, x.2), arr1, arr2);
+
+WITH [(1, 2)] AS arr1 SELECT arrayMap((x, y, z) -> (y, x, z), arr1); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }
+WITH [1, 2] AS arr1 SELECT arrayMap((x, y) -> (y, x), arr1); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }
