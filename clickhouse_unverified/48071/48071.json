{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 48071,
  "instance_id": "ClickHouse__ClickHouse-48071",
  "issue_numbers": [
    "33155"
  ],
  "base_commit": "bd64a4a6fc7d2a4c130f63c60854261dbf439ded",
  "patch": "diff --git a/docs/en/sql-reference/functions/array-functions.md b/docs/en/sql-reference/functions/array-functions.md\nindex 785d9d34b255..3e70f94a0d2f 100644\n--- a/docs/en/sql-reference/functions/array-functions.md\n+++ b/docs/en/sql-reference/functions/array-functions.md\n@@ -646,7 +646,7 @@ SELECT arraySlice([1, 2, NULL, 4, 5], 2, 3) AS res;\n \n Array elements set to `NULL` are handled as normal values.\n \n-## arraySort(\\[func,\\] arr, \u2026)\n+## arraySort(\\[func,\\] arr, \u2026) {#array_functions-sort}\n \n Sorts the elements of the `arr` array in ascending order. If the `func` function is specified, sorting order is determined by the result of the `func` function applied to the elements of the array. If `func` accepts multiple arguments, the `arraySort` function is passed several arrays that the arguments of `func` will correspond to. Detailed examples are shown at the end of `arraySort` description.\n \n@@ -751,7 +751,7 @@ To improve sorting efficiency, the [Schwartzian transform](https://en.wikipedia.\n \n Same as `arraySort` with additional `limit` argument allowing partial sorting. Returns an array of the same size as the original array where elements in range `[1..limit]` are sorted in ascending order. Remaining elements `(limit..N]` shall contain elements in unspecified order.\n \n-## arrayReverseSort(\\[func,\\] arr, \u2026)\n+## arrayReverseSort(\\[func,\\] arr, \u2026) {#array_functions-reverse-sort}\n \n Sorts the elements of the `arr` array in descending order. If the `func` function is specified, `arr` is sorted according to the result of the `func` function applied to the elements of the array, and then the sorted array is reversed. If `func` accepts multiple arguments, the `arrayReverseSort` function is passed several arrays that the arguments of `func` will correspond to. Detailed examples are shown at the end of `arrayReverseSort` description.\n \ndiff --git a/docs/en/sql-reference/functions/tuple-map-functions.md b/docs/en/sql-reference/functions/tuple-map-functions.md\nindex 087a133500e7..786ea47f12cd 100644\n--- a/docs/en/sql-reference/functions/tuple-map-functions.md\n+++ b/docs/en/sql-reference/functions/tuple-map-functions.md\n@@ -69,24 +69,27 @@ Result:\n \n Merges an [Array](../../sql-reference/data-types/array.md) of keys and an [Array](../../sql-reference/data-types/array.md) of values into a [Map(key, value)](../../sql-reference/data-types/map.md). Notice that the second argument could also be a [Map](../../sql-reference/data-types/map.md), thus it is casted to an Array when executing.\n \n+\n The function is a more convenient alternative to `CAST((key_array, value_array_or_map), 'Map(key_type, value_type)')`. For example, instead of writing `CAST((['aa', 'bb'], [4, 5]), 'Map(String, UInt32)')`, you can write `mapFromArrays(['aa', 'bb'], [4, 5])`.\n-  \n+\n+\n **Syntax**\n \n ```sql\n mapFromArrays(keys, values)\n-```  \n+```\n \n Alias: `MAP_FROM_ARRAYS(keys, values)`\n-  \n+\n **Arguments**\n+\n - `keys` \u2014 Given key array to create a map from. The nested type of array must be: [String](../../sql-reference/data-types/string.md), [Integer](../../sql-reference/data-types/int-uint.md), [LowCardinality](../../sql-reference/data-types/lowcardinality.md), [FixedString](../../sql-reference/data-types/fixedstring.md), [UUID](../../sql-reference/data-types/uuid.md), [Date](../../sql-reference/data-types/date.md), [DateTime](../../sql-reference/data-types/datetime.md), [Date32](../../sql-reference/data-types/date32.md), [Enum](../../sql-reference/data-types/enum.md)\n - `values`  - Given value array or map to create a map from.\n-  \n+\n **Returned value**\n \n - A map whose keys and values are constructed from the key array and value array/map.\n-  \n+\n **Example**\n \n Query:\n@@ -94,6 +97,7 @@ Query:\n ```sql\n select mapFromArrays(['a', 'b', 'c'], [1, 2, 3])\n \n+\n \u250c\u2500mapFromArrays(['a', 'b', 'c'], [1, 2, 3])\u2500\u2510\n \u2502 {'a':1,'b':2,'c':3}                       \u2502\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n@@ -391,25 +395,24 @@ Result:\n \u2502 ['eleven','11']  \u2502\n \u2502 ['twelve','6.0'] \u2502\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n-```  \n-  \n-## mapContainsKeyLike  \n-  \n+```\n+\n+## mapContainsKeyLike\n+\n **Syntax**\n \n ```sql\n mapContainsKeyLike(map, pattern)\n-```  \n-  \n+```\n+\n **Arguments**\n-  \n-- `map` \u2014 Map. [Map](../../sql-reference/data-types/map.md).  \n-- `pattern`  - String pattern to match.  \n-  \n+- `map` \u2014 Map. [Map](../../sql-reference/data-types/map.md).\n+- `pattern`  - String pattern to match.\n+\n **Returned value**\n \n-- `1` if `map` contains `key` like specified pattern, `0` if not.  \n-  \n+- `1` if `map` contains `key` like specified pattern, `0` if not.\n+\n **Example**\n \n Query:\n@@ -420,34 +423,34 @@ CREATE TABLE test (a Map(String,String)) ENGINE = Memory;\n INSERT INTO test VALUES ({'abc':'abc','def':'def'}), ({'hij':'hij','klm':'klm'});\n \n SELECT mapContainsKeyLike(a, 'a%') FROM test;\n-```  \n-  \n-Result:  \n-  \n+```\n+\n+Result:\n+\n ```text\n \u250c\u2500mapContainsKeyLike(a, 'a%')\u2500\u2510\n \u2502                           1 \u2502\n \u2502                           0 \u2502\n-\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \n-```  \n-  \n-## mapExtractKeyLike  \n-  \n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+## mapExtractKeyLike\n+\n **Syntax**\n \n ```sql\n mapExtractKeyLike(map, pattern)\n-```  \n-  \n+```\n+\n **Arguments**\n-  \n-- `map` \u2014 Map. [Map](../../sql-reference/data-types/map.md).  \n-- `pattern`  - String pattern to match.  \n-  \n+\n+- `map` \u2014 Map. [Map](../../sql-reference/data-types/map.md).\n+- `pattern`  - String pattern to match.\n+\n **Returned value**\n \n - A map contained elements the key of which matchs the specified pattern. If there are no elements matched the pattern, it will return an empty map.\n-  \n+\n **Example**\n \n Query:\n@@ -458,34 +461,34 @@ CREATE TABLE test (a Map(String,String)) ENGINE = Memory;\n INSERT INTO test VALUES ({'abc':'abc','def':'def'}), ({'hij':'hij','klm':'klm'});\n \n SELECT mapExtractKeyLike(a, 'a%') FROM test;\n-```  \n-  \n-Result:  \n-  \n+```\n+\n+Result:\n+\n ```text\n \u250c\u2500mapExtractKeyLike(a, 'a%')\u2500\u2510\n \u2502 {'abc':'abc'}              \u2502\n \u2502 {}                         \u2502\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n-```  \n-  \n-## mapApply  \n-  \n+```\n+\n+## mapApply\n+\n **Syntax**\n \n ```sql\n mapApply(func, map)\n-```  \n-  \n+```\n+\n **Arguments**\n-  \n+\n - `func`  - [Lambda function](../../sql-reference/functions/index.md#higher-order-functions---operator-and-lambdaparams-expr-function).\n - `map` \u2014 [Map](../../sql-reference/data-types/map.md).\n \n **Returned value**\n \n - Returns a map obtained from the original map by application of `func(map1[i], \u2026, mapN[i])` for each element.\n-  \n+\n **Example**\n \n Query:\n@@ -497,36 +500,36 @@ FROM\n     SELECT map('key1', number, 'key2', number * 2) AS _map\n     FROM numbers(3)\n )\n-```  \n-  \n-Result:  \n-  \n+```\n+\n+Result:\n+\n ```text\n \u250c\u2500r\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n \u2502 {'key1':0,'key2':0}   \u2502\n \u2502 {'key1':10,'key2':20} \u2502\n \u2502 {'key1':20,'key2':40} \u2502\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n-```  \n+```\n+\n+## mapFilter\n \n-## mapFilter  \n-  \n **Syntax**\n \n ```sql\n mapFilter(func, map)\n-```  \n-  \n+```\n+\n **Arguments**\n \n - `func`  - [Lambda function](../../sql-reference/functions/index.md#higher-order-functions---operator-and-lambdaparams-expr-function).\n-- `map` \u2014 [Map](../../sql-reference/data-types/map.md).  \n+- `map` \u2014 [Map](../../sql-reference/data-types/map.md).\n \n **Returned value**\n \n - Returns a map containing only the elements in `map` for which `func(map1[i], \u2026, mapN[i])` returns something other than 0.\n-  \n-  \n+\n+\n **Example**\n \n Query:\n@@ -538,27 +541,27 @@ FROM\n     SELECT map('key1', number, 'key2', number * 2) AS _map\n     FROM numbers(3)\n )\n-```  \n-  \n-Result:  \n-  \n+```\n+\n+Result:\n+\n ```text\n \u250c\u2500r\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n \u2502 {'key1':0,'key2':0} \u2502\n \u2502 {'key2':2}          \u2502\n \u2502 {'key1':2,'key2':4} \u2502\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n-```  \n+```\n+\n \n+## mapUpdate\n \n-## mapUpdate  \n-  \n **Syntax**\n \n ```sql\n mapUpdate(map1, map2)\n-```  \n-  \n+```\n+\n **Arguments**\n \n - `map1` [Map](../../sql-reference/data-types/map.md).\n@@ -567,19 +570,166 @@ mapUpdate(map1, map2)\n **Returned value**\n \n - Returns a map1 with values updated of values for the corresponding keys in map2.\n-  \n+\n **Example**\n \n Query:\n \n ```sql\n SELECT mapUpdate(map('key1', 0, 'key3', 0), map('key1', 10, 'key2', 10)) AS map;\n-```  \n-  \n-Result:  \n-  \n+```\n+\n+Result:\n+\n ```text\n \u250c\u2500map\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n \u2502 {'key3':0,'key1':10,'key2':10} \u2502\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n-```  \n+```\n+\n+## mapConcat\n+\n+**Syntax**\n+\n+```sql\n+mapConcat(maps)\n+```\n+\n+**Arguments**\n+\n+-   `maps` \u2013 Arbitrary number of arguments of [Map](../../sql-reference/data-types/map.md) type.\n+\n+**Returned value**\n+\n+- Returns a map with concatenated maps passed as arguments. If there are same keys in two or more maps, all of them are added to the result map, but only the first one is accessible via operator `[]`\n+\n+**Examples**\n+\n+Query:\n+\n+```sql\n+SELECT mapConcat(map('key1', 1, 'key3', 3), map('key2', 2)) AS map;\n+```\n+\n+Result:\n+\n+```text\n+\u250c\u2500map\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 {'key1':1,'key3':3,'key2':2} \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+Query:\n+\n+```sql\n+SELECT mapConcat(map('key1', 1, 'key2', 2), map('key1', 3)) AS map, map['key1'];\n+```\n+\n+Result:\n+\n+```text\n+\u250c\u2500map\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500elem\u2500\u2510\n+\u2502 {'key1':1,'key2':2,'key1':3} \u2502    1 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+## mapExists(\\[func,\\], map)\n+\n+Returns 1 if there is at least one key-value pair in `map` for which `func(key, value)` returns something other than 0. Otherwise, it returns 0.\n+\n+Note that the `mapExists` is a [higher-order function](../../sql-reference/functions/index.md#higher-order-functions). You can pass a lambda function to it as the first argument.\n+\n+**Example**\n+\n+Query:\n+\n+```sql\n+SELECT mapExists((k, v) -> (v = 1), map('k1', 1, 'k2', 2)) AS res\n+```\n+\n+Result:\n+\n+```text\n+\u250c\u2500res\u2500\u2510\n+\u2502   1 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+## mapAll(\\[func,\\] map)\n+\n+Returns 1 if `func(key, value)` returns something other than 0 for all key-value pairs in `map`. Otherwise, it returns 0.\n+\n+Note that the `mapAll` is a [higher-order function](../../sql-reference/functions/index.md#higher-order-functions). You can pass a lambda function to it as the first argument.\n+\n+**Example**\n+\n+Query:\n+\n+```sql\n+SELECT mapAll((k, v) -> (v = 1), map('k1', 1, 'k2', 2)) AS res\n+```\n+\n+Result:\n+\n+```text\n+\u250c\u2500res\u2500\u2510\n+\u2502   0 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+## mapSort(\\[func,\\], map)\n+\n+Sorts the elements of the `map` in ascending order. If the `func` function is specified, sorting order is determined by the result of the `func` function applied to the keys and values of the map.\n+\n+**Examples**\n+\n+``` sql\n+SELECT mapSort(map('key2', 2, 'key3', 1, 'key1', 3)) AS map;\n+```\n+\n+``` text\n+\u250c\u2500map\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 {'key1':3,'key2':2,'key3':1} \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+``` sql\n+SELECT mapSort((k, v) -> v, map('key2', 2, 'key3', 1, 'key1', 3)) AS map;\n+```\n+\n+``` text\n+\u250c\u2500map\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 {'key3':1,'key2':2,'key1':3} \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+For more details see the [reference](../../sql-reference/functions/array-functions.md#array_functions-sort) for `arraySort` function.\n+\n+## mapReverseSort(\\[func,\\], map)\n+\n+Sorts the elements of the `map` in descending order. If the `func` function is specified, sorting order is determined by the result of the `func` function applied to the keys and values of the map.\n+\n+\n+**Examples**\n+\n+``` sql\n+SELECT mapReverseSort(map('key2', 2, 'key3', 1, 'key1', 3)) AS map;\n+```\n+\n+``` text\n+\u250c\u2500map\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 {'key3':1,'key2':2,'key1':3} \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+``` sql\n+SELECT mapReverseSort((k, v) -> v, map('key2', 2, 'key3', 1, 'key1', 3)) AS map;\n+```\n+\n+``` text\n+\u250c\u2500map\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 {'key1':3,'key2':2,'key3':1} \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+For more details see the [reference](../../sql-reference/functions/array-functions.md#array_functions-reverse-sort) for `arrayReverseSort` function.\ndiff --git a/src/Columns/ColumnFunction.cpp b/src/Columns/ColumnFunction.cpp\nindex 59ee93410c89..3ea7073d8c87 100644\n--- a/src/Columns/ColumnFunction.cpp\n+++ b/src/Columns/ColumnFunction.cpp\n@@ -258,12 +258,11 @@ void ColumnFunction::appendArguments(const ColumnsWithTypeAndName & columns)\n \n void ColumnFunction::appendArgument(const ColumnWithTypeAndName & column)\n {\n-    const auto & argumnet_types = function->getArgumentTypes();\n-\n+    const auto & argument_types = function->getArgumentTypes();\n     auto index = captured_columns.size();\n-    if (!is_short_circuit_argument && !column.type->equals(*argumnet_types[index]))\n+    if (!is_short_circuit_argument && !column.type->equals(*argument_types[index]))\n         throw Exception(ErrorCodes::LOGICAL_ERROR, \"Cannot capture column {} because it has incompatible type: \"\n-                        \"got {}, but {} is expected.\", argumnet_types.size(), column.type->getName(), argumnet_types[index]->getName());\n+                        \"got {}, but {} is expected.\", argument_types.size(), column.type->getName(), argument_types[index]->getName());\n \n     captured_columns.push_back(column);\n }\ndiff --git a/src/DataTypes/DataTypeMap.cpp b/src/DataTypes/DataTypeMap.cpp\nindex 879e40eb0986..0f5d97e67616 100644\n--- a/src/DataTypes/DataTypeMap.cpp\n+++ b/src/DataTypes/DataTypeMap.cpp\n@@ -128,6 +128,13 @@ bool DataTypeMap::checkKeyType(DataTypePtr key_type)\n     return true;\n }\n \n+DataTypePtr DataTypeMap::getNestedTypeWithUnnamedTuple() const\n+{\n+    const auto & from_array = assert_cast<const DataTypeArray &>(*nested);\n+    const auto & from_tuple = assert_cast<const DataTypeTuple &>(*from_array.getNestedType());\n+    return std::make_shared<DataTypeArray>(std::make_shared<DataTypeTuple>(from_tuple.getElements()));\n+}\n+\n static DataTypePtr create(const ASTPtr & arguments)\n {\n     if (!arguments || arguments->children.size() != 2)\ndiff --git a/src/DataTypes/DataTypeMap.h b/src/DataTypes/DataTypeMap.h\nindex 2ab5c602a259..4712f6bbdefe 100644\n--- a/src/DataTypes/DataTypeMap.h\n+++ b/src/DataTypes/DataTypeMap.h\n@@ -47,6 +47,7 @@ class DataTypeMap final : public IDataType\n     const DataTypePtr & getValueType() const { return value_type; }\n     DataTypes getKeyValueTypes() const { return {key_type, value_type}; }\n     const DataTypePtr & getNestedType() const { return nested; }\n+    DataTypePtr getNestedTypeWithUnnamedTuple() const;\n \n     SerializationPtr doGetDefaultSerialization() const override;\n \ndiff --git a/src/Functions/FunctionFactory.h b/src/Functions/FunctionFactory.h\nindex 1a909ea05987..b9063e2c29a8 100644\n--- a/src/Functions/FunctionFactory.h\n+++ b/src/Functions/FunctionFactory.h\n@@ -37,7 +37,6 @@ class FunctionFactory : private boost::noncopyable, public IFactoryWithAliases<F\n     template <typename Function>\n     void registerFunction(const std::string & name, Documentation doc = {}, CaseSensitiveness case_sensitiveness = CaseSensitive)\n     {\n-\n         if constexpr (std::is_base_of_v<IFunction, Function>)\n             registerFunction(name, &adaptFunctionToOverloadResolver<Function>, std::move(doc), case_sensitiveness);\n         else\ndiff --git a/src/Functions/FunctionsConversion.h b/src/Functions/FunctionsConversion.h\nindex 28002d34acc4..46717923f7ec 100644\n--- a/src/Functions/FunctionsConversion.h\n+++ b/src/Functions/FunctionsConversion.h\n@@ -3098,12 +3098,18 @@ class FunctionCast final : public FunctionCastBase\n             return &ConvertImplGenericFromString<ColumnString>::execute;\n         }\n \n+        DataTypePtr from_type_holder;\n         const auto * from_type = checkAndGetDataType<DataTypeArray>(from_type_untyped.get());\n         const auto * from_type_map = checkAndGetDataType<DataTypeMap>(from_type_untyped.get());\n \n         /// Convert from Map\n         if (from_type_map)\n-            from_type = checkAndGetDataType<DataTypeArray>(from_type_map->getNestedType().get());\n+        {\n+            /// Recreate array of unnamed tuples because otherwise it may work\n+            /// unexpectedly while converting to array of named tuples.\n+            from_type_holder = from_type_map->getNestedTypeWithUnnamedTuple();\n+            from_type = assert_cast<const DataTypeArray *>(from_type_holder.get());\n+        }\n \n         if (!from_type)\n         {\ndiff --git a/src/Functions/array/CMakeLists.txt b/src/Functions/array/CMakeLists.txt\nindex 98335dbb8e76..2800b5b4e289 100644\n--- a/src/Functions/array/CMakeLists.txt\n+++ b/src/Functions/array/CMakeLists.txt\n@@ -3,6 +3,10 @@ add_headers_and_sources(clickhouse_functions_array .)\n add_library(clickhouse_functions_array OBJECT ${clickhouse_functions_array_sources} ${clickhouse_functions_array_headers})\n target_link_libraries(clickhouse_functions_array PRIVATE dbms clickhouse_functions_gatherutils)\n \n+if (TARGET ch_contrib::vectorscan)\n+    target_link_libraries(clickhouse_functions_array PRIVATE ch_contrib::vectorscan)\n+endif()\n+\n if (OMIT_HEAVY_DEBUG_SYMBOLS)\n     target_compile_options(clickhouse_functions_array PRIVATE \"-g0\")\n endif()\ndiff --git a/src/Functions/array/FunctionArrayMapped.h b/src/Functions/array/FunctionArrayMapped.h\nindex 61abc607349e..9917a38e144e 100644\n--- a/src/Functions/array/FunctionArrayMapped.h\n+++ b/src/Functions/array/FunctionArrayMapped.h\n@@ -19,6 +19,7 @@\n #include <DataTypes/DataTypeLowCardinality.h>\n #include <DataTypes/DataTypeMap.h>\n #include <DataTypes/DataTypesNumber.h>\n+#include <DataTypes/DataTypeTuple.h>\n \n #include <Functions/FunctionHelpers.h>\n #include <Functions/IFunction.h>\n@@ -41,33 +42,6 @@ namespace ErrorCodes\n     extern const int NUMBER_OF_ARGUMENTS_DOESNT_MATCH;\n }\n \n-\n-template <typename T>\n-ColumnPtr getOffsetsPtr(const T & column)\n-{\n-    if constexpr (std::is_same_v<T, ColumnArray>)\n-    {\n-        return column.getOffsetsPtr();\n-    }\n-    else // ColumnMap\n-    {\n-        return column.getNestedColumn().getOffsetsPtr();\n-    }\n-}\n-\n-template <typename T>\n-const IColumn::Offsets & getOffsets(const T & column)\n-{\n-    if constexpr (std::is_same_v<T, ColumnArray>)\n-    {\n-        return column.getOffsets();\n-    }\n-    else // ColumnMap\n-    {\n-        return column.getNestedColumn().getOffsets();\n-    }\n-}\n-\n /** Higher-order functions for arrays.\n   * These functions optionally apply a map (transform) to array (or multiple arrays of identical size) by lambda function,\n   *  and return some result based on that transformation.\n@@ -90,10 +64,6 @@ class FunctionArrayMapped : public IFunction\n {\n public:\n     static constexpr auto name = Name::name;\n-    static constexpr bool is_argument_type_map = std::is_same_v<typename Impl::data_type, DataTypeMap>;\n-    static constexpr bool is_argument_type_array = std::is_same_v<typename Impl::data_type, DataTypeArray>;\n-    static constexpr auto argument_type_name = is_argument_type_map ? \"Map\" : \"Array\";\n-\n     static constexpr size_t num_fixed_params = []{ if constexpr (requires { Impl::num_fixed_params; }) return Impl::num_fixed_params; else return 0; }();\n \n     static FunctionPtr create(ContextPtr) { return std::make_shared<FunctionArrayMapped>(); }\n@@ -131,32 +101,56 @@ class FunctionArrayMapped : public IFunction\n                 num_fixed_params + 1,\n                 (num_fixed_params + 1 == 1) ? \"\" : \"s\");\n \n-        size_t nested_types_count = (arguments.size() - num_fixed_params - 1) * (is_argument_type_map ? 2 : 1);\n-        DataTypes nested_types(nested_types_count);\n-        for (size_t i = 0; i < arguments.size() - 1 - num_fixed_params; ++i)\n+        bool is_single_array_argument = arguments.size() == num_fixed_params + 2;\n+        size_t tuple_argument_size = 0;\n+\n+        size_t num_nested_types = arguments.size() - num_fixed_params - 1;\n+        DataTypes nested_types(num_nested_types);\n+\n+        for (size_t i = 0; i < num_nested_types; ++i)\n         {\n-            const auto * array_type = checkAndGetDataType<typename Impl::data_type>(&*arguments[i + 1 + num_fixed_params]);\n+            const auto * array_type = checkAndGetDataType<DataTypeArray>(&*arguments[i + 1 + num_fixed_params]);\n             if (!array_type)\n                 throw Exception(\n                     ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,\n-                    \"Argument {} of function {} must be {}. Found {} instead\",\n+                    \"Argument {} of function {} must be Array. Found {} instead\",\n                     i + 2 + num_fixed_params,\n                     getName(),\n-                    argument_type_name,\n                     arguments[i + 1 + num_fixed_params]->getName());\n-            if constexpr (is_argument_type_map)\n-            {\n-                nested_types[2 * i] = recursiveRemoveLowCardinality(array_type->getKeyType());\n-                nested_types[2 * i + 1] = recursiveRemoveLowCardinality(array_type->getValueType());\n-            }\n-            else if constexpr (is_argument_type_array)\n-            {\n-                nested_types[i] = recursiveRemoveLowCardinality(array_type->getNestedType());\n-            }\n+\n+            if (const auto * tuple_type = checkAndGetDataType<DataTypeTuple>(array_type->getNestedType().get()))\n+                tuple_argument_size = tuple_type->getElements().size();\n+\n+            nested_types[i] = recursiveRemoveLowCardinality(array_type->getNestedType());\n+        }\n+\n+        const auto * function_type = checkAndGetDataType<DataTypeFunction>(arguments[0].get());\n+        if (!function_type)\n+            throw Exception(\n+                ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,\n+                \"First argument for this overload of {} must be a function with {} arguments, found {} instead\",\n+                getName(),\n+                nested_types.size(),\n+                arguments[0]->getName());\n+\n+        size_t num_function_arguments = function_type->getArgumentTypes().size();\n+        if (is_single_array_argument\n+            && tuple_argument_size\n+            && tuple_argument_size == num_function_arguments)\n+        {\n+            assert(nested_types.size() == 1);\n+\n+            auto argument_type = nested_types[0];\n+            const auto & tuple_type = assert_cast<const DataTypeTuple &>(*argument_type);\n+\n+            nested_types.clear();\n+            nested_types.reserve(tuple_argument_size);\n+\n+            for (const auto & element : tuple_type.getElements())\n+                nested_types.push_back(element);\n         }\n \n-        const DataTypeFunction * function_type = checkAndGetDataType<DataTypeFunction>(arguments[0].get());\n-        if (!function_type || function_type->getArgumentTypes().size() != nested_types.size())\n+        if (num_function_arguments != nested_types.size())\n             throw Exception(\n                 ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,\n                 \"First argument for this overload of {} must be a function with {} arguments, found {} instead\",\n@@ -179,11 +173,11 @@ class FunctionArrayMapped : public IFunction\n                 (min_args > 1 ? \"s\" : \"\"),\n                 arguments.size());\n \n-        if ((arguments.size() == 1 + num_fixed_params) && is_argument_type_array)\n+        if (arguments.size() == 1 + num_fixed_params)\n         {\n-            const auto * data_type = checkAndGetDataType<typename Impl::data_type>(arguments[num_fixed_params].type.get());\n+            const auto * array_type = checkAndGetDataType<DataTypeArray>(arguments[num_fixed_params].type.get());\n \n-            if (!data_type)\n+            if (!array_type)\n                 throw Exception(\n                     ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,\n                     \"The {}{}{} argument for function {} must be array. Found {} instead\",\n@@ -196,7 +190,7 @@ class FunctionArrayMapped : public IFunction\n             if constexpr (num_fixed_params)\n                 Impl::checkArguments(getName(), arguments.data());\n \n-            DataTypePtr nested_type = data_type->getNestedType();\n+            DataTypePtr nested_type = array_type->getNestedType();\n \n             if (Impl::needBoolean() && !isUInt8(nested_type))\n                 throw Exception(\n@@ -208,10 +202,7 @@ class FunctionArrayMapped : public IFunction\n                     getName(),\n                     arguments[num_fixed_params].type->getName());\n \n-            if constexpr (is_argument_type_array)\n-                return Impl::getReturnType(nested_type, nested_type);\n-            else\n-                throw DB::Exception(ErrorCodes::LOGICAL_ERROR, \"Unreachable code reached\");\n+            return Impl::getReturnType(nested_type, nested_type);\n         }\n         else\n         {\n@@ -246,26 +237,15 @@ class FunctionArrayMapped : public IFunction\n                     getName(),\n                     return_type->getName());\n \n-            static_assert(is_argument_type_map || is_argument_type_array, \"unsupported type\");\n-\n             if (arguments.size() < 2 + num_fixed_params)\n-            {\n                 throw DB::Exception(ErrorCodes::LOGICAL_ERROR, \"Incorrect number of arguments: {}\", arguments.size());\n-            }\n-\n-            const auto * first_array_type = checkAndGetDataType<typename Impl::data_type>(arguments[1 + num_fixed_params].type.get());\n \n+            const auto * first_array_type = checkAndGetDataType<DataTypeArray>(arguments[1 + num_fixed_params].type.get());\n             if (!first_array_type)\n                 throw DB::Exception(\n                     ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT, \"Unsupported type {}\", arguments[1 + num_fixed_params].type->getName());\n \n-            if constexpr (is_argument_type_array)\n-                return Impl::getReturnType(return_type, first_array_type->getNestedType());\n-\n-            if constexpr (is_argument_type_map)\n-                return Impl::getReturnType(return_type, first_array_type->getKeyValueTypes());\n-\n-            throw DB::Exception(ErrorCodes::LOGICAL_ERROR, \"Unreachable code reached\");\n+            return Impl::getReturnType(return_type, first_array_type->getNestedType());\n         }\n     }\n \n@@ -274,38 +254,26 @@ class FunctionArrayMapped : public IFunction\n         if (arguments.size() == 1 + num_fixed_params)\n         {\n             ColumnPtr column_array_ptr = arguments[num_fixed_params].column;\n-            const auto * column_array = checkAndGetColumn<typename Impl::column_type>(column_array_ptr.get());\n+            const auto * column_array = checkAndGetColumn<ColumnArray>(column_array_ptr.get());\n \n             if (!column_array)\n             {\n-                const ColumnConst * column_const_array = checkAndGetColumnConst<typename Impl::column_type>(column_array_ptr.get());\n+                const auto * column_const_array = checkAndGetColumnConst<ColumnArray>(column_array_ptr.get());\n                 if (!column_const_array)\n                     throw Exception(\n-                        ErrorCodes::ILLEGAL_COLUMN, \"Expected {} column, found {}\", argument_type_name, column_array_ptr->getName());\n+                        ErrorCodes::ILLEGAL_COLUMN, \"Expected Array column, found {}\", column_array_ptr->getName());\n+\n                 column_array_ptr = column_const_array->convertToFullColumn();\n-                column_array = assert_cast<const typename Impl::column_type *>(column_array_ptr.get());\n+                column_array = assert_cast<const ColumnArray *>(column_array_ptr.get());\n             }\n \n-            if constexpr (std::is_same_v<typename Impl::column_type, ColumnMap>)\n-            {\n-                if constexpr (num_fixed_params)\n-                    return Impl::execute(\n-                        *column_array,\n-                        column_array->getNestedColumn().getDataPtr(),\n-                        arguments.data());\n-                else\n-                    return Impl::execute(*column_array, column_array->getNestedColumn().getDataPtr());\n-            }\n+            if constexpr (num_fixed_params)\n+                return Impl::execute(\n+                    *column_array,\n+                    column_array->getDataPtr(),\n+                    arguments.data());\n             else\n-            {\n-                if constexpr (num_fixed_params)\n-                    return Impl::execute(\n-                        *column_array,\n-                        column_array->getDataPtr(),\n-                        arguments.data());\n-                else\n-                    return Impl::execute(*column_array, column_array->getDataPtr());\n-            }\n+                return Impl::execute(*column_array, column_array->getDataPtr());\n         }\n         else\n         {\n@@ -315,81 +283,92 @@ class FunctionArrayMapped : public IFunction\n                 throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT, \"First argument for function {} must be a function.\", getName());\n \n             const auto * column_function = typeid_cast<const ColumnFunction *>(column_with_type_and_name.column.get());\n-\n             if (!column_function)\n                 throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT, \"First argument for function {} must be a function.\", getName());\n \n-            ColumnPtr offsets_column;\n+            const auto & type_function = assert_cast<const DataTypeFunction &>(*arguments[0].type);\n+            size_t num_function_arguments = type_function.getArgumentTypes().size();\n \n+            ColumnPtr offsets_column;\n             ColumnPtr column_first_array_ptr;\n-            const typename Impl::column_type * column_first_array = nullptr;\n+            const ColumnArray * column_first_array = nullptr;\n \n             ColumnsWithTypeAndName arrays;\n-            arrays.reserve(arguments.size() - 1);\n+            arrays.reserve(arguments.size() - 1 - num_fixed_params);\n \n+            bool is_single_array_argument = arguments.size() == num_fixed_params + 2;\n             for (size_t i = 1 + num_fixed_params; i < arguments.size(); ++i)\n             {\n                 const auto & array_with_type_and_name = arguments[i];\n \n-                ColumnPtr column_array_ptr = array_with_type_and_name.column;\n-                const auto * column_array = checkAndGetColumn<typename Impl::column_type>(column_array_ptr.get());\n+                auto column_array_ptr = array_with_type_and_name.column;\n+                const auto * column_array = checkAndGetColumn<ColumnArray>(column_array_ptr.get());\n \n-                const DataTypePtr & array_type_ptr = array_with_type_and_name.type;\n-                const auto * array_type = checkAndGetDataType<typename Impl::data_type>(array_type_ptr.get());\n+                const auto & array_type_ptr = array_with_type_and_name.type;\n+                const auto * array_type = checkAndGetDataType<DataTypeArray>(array_type_ptr.get());\n \n                 if (!column_array)\n                 {\n-                    const ColumnConst * column_const_array = checkAndGetColumnConst<typename Impl::column_type>(column_array_ptr.get());\n+                    const auto * column_const_array = checkAndGetColumnConst<ColumnArray>(column_array_ptr.get());\n                     if (!column_const_array)\n                         throw Exception(\n-                            ErrorCodes::ILLEGAL_COLUMN, \"Expected {} column, found {}\", argument_type_name, column_array_ptr->getName());\n+                            ErrorCodes::ILLEGAL_COLUMN, \"Expected Array column, found {}\", column_array_ptr->getName());\n+\n                     column_array_ptr = recursiveRemoveLowCardinality(column_const_array->convertToFullColumn());\n-                    column_array = checkAndGetColumn<typename Impl::column_type>(column_array_ptr.get());\n+                    column_array = checkAndGetColumn<ColumnArray>(column_array_ptr.get());\n                 }\n \n                 if (!array_type)\n                     throw Exception(\n-                        ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT, \"Expected {} type, found {}\", argument_type_name, array_type_ptr->getName());\n+                        ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT, \"Expected Array type, found {}\", array_type_ptr->getName());\n \n                 if (!offsets_column)\n                 {\n-                    offsets_column = getOffsetsPtr(*column_array);\n+                    offsets_column = column_array->getOffsetsPtr();\n                 }\n                 else\n                 {\n                     /// The first condition is optimization: do not compare data if the pointers are equal.\n-                    if (getOffsetsPtr(*column_array) != offsets_column\n-                        && getOffsets(*column_array) != typeid_cast<const ColumnArray::ColumnOffsets &>(*offsets_column).getData())\n+                    if (column_array->getOffsetsPtr() != offsets_column\n+                        && column_array->getOffsets() != typeid_cast<const ColumnArray::ColumnOffsets &>(*offsets_column).getData())\n                         throw Exception(\n                             ErrorCodes::SIZES_OF_ARRAYS_DONT_MATCH,\n-                            \"{}s passed to {} must have equal size\",\n-                            argument_type_name,\n-                            getName());\n+                                \"Arrays passed to {} must have equal size\", getName());\n                 }\n \n-                if (i == 1 + num_fixed_params)\n+                const auto * column_tuple = checkAndGetColumn<ColumnTuple>(&column_array->getData());\n+                if (is_single_array_argument && column_tuple && column_tuple->getColumns().size() == num_function_arguments)\n                 {\n-                    column_first_array_ptr = column_array_ptr;\n-                    column_first_array = column_array;\n-                }\n+                    const auto & type_tuple = assert_cast<const DataTypeTuple &>(*array_type->getNestedType());\n+                    const auto & tuple_names = type_tuple.getElementNames();\n \n-                if constexpr (is_argument_type_map)\n-                {\n-                    arrays.emplace_back(ColumnWithTypeAndName(\n-                        column_array->getNestedData().getColumnPtr(0), recursiveRemoveLowCardinality(array_type->getKeyType()), array_with_type_and_name.name+\".key\"));\n-                    arrays.emplace_back(ColumnWithTypeAndName(\n-                        column_array->getNestedData().getColumnPtr(1), recursiveRemoveLowCardinality(array_type->getValueType()), array_with_type_and_name.name+\".value\"));\n+                    size_t tuple_size = column_tuple->getColumns().size();\n+                    arrays.reserve(column_tuple->getColumns().size());\n+                    for (size_t j = 0; j < tuple_size; ++j)\n+                    {\n+                        arrays.emplace_back(\n+                            column_tuple->getColumnPtr(j),\n+                            recursiveRemoveLowCardinality(type_tuple.getElement(j)),\n+                            array_with_type_and_name.name + \".\" + tuple_names[j]);\n+                    }\n                 }\n                 else\n                 {\n-                    arrays.emplace_back(ColumnWithTypeAndName(column_array->getDataPtr(),\n-                                                            recursiveRemoveLowCardinality(array_type->getNestedType()),\n-                                                            array_with_type_and_name.name));\n+                    arrays.emplace_back(\n+                        column_array->getDataPtr(),\n+                        recursiveRemoveLowCardinality(array_type->getNestedType()),\n+                        array_with_type_and_name.name);\n+                }\n+\n+                if (i == 1 + num_fixed_params)\n+                {\n+                    column_first_array_ptr = column_array_ptr;\n+                    column_first_array = column_array;\n                 }\n             }\n \n             /// Put all the necessary columns multiplied by the sizes of arrays into the columns.\n-            auto replicated_column_function_ptr = IColumn::mutate(column_function->replicate(getOffsets(*column_first_array)));\n+            auto replicated_column_function_ptr = IColumn::mutate(column_function->replicate(column_first_array->getOffsets()));\n             auto * replicated_column_function = typeid_cast<ColumnFunction *>(replicated_column_function_ptr.get());\n             replicated_column_function->appendArguments(arrays);\n \ndiff --git a/src/Functions/array/FunctionsMapMiscellaneous.cpp b/src/Functions/array/FunctionsMapMiscellaneous.cpp\nnew file mode 100644\nindex 000000000000..853156fcafc0\n--- /dev/null\n+++ b/src/Functions/array/FunctionsMapMiscellaneous.cpp\n@@ -0,0 +1,464 @@\n+#include <Columns/ColumnArray.h>\n+#include <Columns/ColumnFunction.h>\n+#include <Columns/ColumnMap.h>\n+#include <Columns/ColumnTuple.h>\n+#include <Columns/ColumnConst.h>\n+\n+#include <DataTypes/DataTypeArray.h>\n+#include <DataTypes/DataTypeFunction.h>\n+#include <DataTypes/DataTypeMap.h>\n+#include <DataTypes/DataTypeTuple.h>\n+\n+#include <Functions/FunctionHelpers.h>\n+#include <Functions/like.h>\n+#include <Functions/array/arrayConcat.h>\n+#include <Functions/array/arrayFilter.h>\n+#include <Functions/array/arrayMap.h>\n+#include <Functions/array/arraySort.h>\n+#include <Functions/array/arrayIndex.h>\n+#include <Functions/array/arrayExists.h>\n+#include <Functions/array/arrayAll.h>\n+#include <Functions/identity.h>\n+#include <Functions/FunctionFactory.h>\n+\n+#include <base/map.h>\n+\n+namespace DB\n+{\n+\n+namespace ErrorCodes\n+{\n+    extern const int NUMBER_OF_ARGUMENTS_DOESNT_MATCH;\n+    extern const int ILLEGAL_TYPE_OF_ARGUMENT;\n+}\n+\n+/** An adapter that allows to execute array* functions over Map types arguments.\n+  * E.g. transform mapConcat to arrayConcat.\n+  *\n+  * Impl - the implementation of function that is applied\n+  * to internal column of Map arguments (e.g. 'arrayConcat').\n+  *\n+  * Adapter - a struct that determines the way how to extract the internal array columns\n+  * from Map arguments and possibly modify other columns.\n+*/\n+template <typename Impl, typename Adapter, typename Name>\n+class FunctionMapToArrayAdapter : public IFunction\n+{\n+public:\n+    static constexpr auto name = Name::name;\n+    static FunctionPtr create(ContextPtr) { return std::make_shared<FunctionMapToArrayAdapter>(); }\n+    String getName() const override { return name; }\n+\n+    bool isVariadic() const override { return impl.isVariadic(); }\n+    size_t getNumberOfArguments() const override { return impl.getNumberOfArguments(); }\n+    bool useDefaultImplementationForConstants() const override { return impl.useDefaultImplementationForConstants(); }\n+    bool isSuitableForShortCircuitArgumentsExecution(const DataTypesWithConstInfo &) const override  { return false; }\n+\n+    void getLambdaArgumentTypes(DataTypes & arguments) const override\n+    {\n+        Adapter::extractNestedTypes(arguments);\n+        impl.getLambdaArgumentTypes(arguments);\n+    }\n+\n+    DataTypePtr getReturnTypeImpl(const ColumnsWithTypeAndName & arguments) const override\n+    {\n+        if (arguments.empty())\n+            throw Exception(\n+                ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH,\n+                    \"Function {} requires at least one argument, passed {}\", getName(), arguments.size());\n+\n+        auto nested_arguments = arguments;\n+        Adapter::extractNestedTypesAndColumns(nested_arguments);\n+\n+        constexpr bool impl_has_get_return_type = requires\n+        {\n+            impl.getReturnTypeImpl(nested_arguments);\n+        };\n+\n+        /// If method is not overloaded in the implementation call default implementation\n+        /// from IFunction. Here inheritance cannot be used for template parameterized field.\n+        if constexpr (impl_has_get_return_type)\n+            return Adapter::wrapType(impl.getReturnTypeImpl(nested_arguments));\n+        else\n+            return Adapter::wrapType(dynamic_cast<const IFunction &>(impl).getReturnTypeImpl(nested_arguments));\n+    }\n+\n+    ColumnPtr executeImpl(const ColumnsWithTypeAndName & arguments, const DataTypePtr & result_type, size_t input_rows_count) const override\n+    {\n+        auto nested_arguments = arguments;\n+        Adapter::extractNestedTypesAndColumns(nested_arguments);\n+        return Adapter::wrapColumn(impl.executeImpl(nested_arguments, Adapter::extractResultType(result_type), input_rows_count));\n+    }\n+\n+private:\n+    Impl impl;\n+};\n+\n+\n+template <typename Derived, typename Name>\n+struct MapAdapterBase\n+{\n+    static void extractNestedTypes(DataTypes & types)\n+    {\n+        bool has_map_column = false;\n+        for (auto & type : types)\n+        {\n+            if (const auto * type_map = typeid_cast<const DataTypeMap *>(type.get()))\n+            {\n+                has_map_column = true;\n+                type = Derived::extractNestedType(*type_map);\n+            }\n+        }\n+\n+        if (!has_map_column)\n+            throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,\n+                \"Function {} requires at least one argument of type Map\", Name::name);\n+    }\n+\n+    static void extractNestedTypesAndColumns(ColumnsWithTypeAndName & arguments)\n+    {\n+        bool has_map_column = false;\n+        for (auto & argument : arguments)\n+        {\n+            if (const auto * type_map = typeid_cast<const DataTypeMap *>(argument.type.get()))\n+            {\n+                has_map_column = true;\n+                argument.type = Derived::extractNestedType(*type_map);\n+\n+                if (argument.column)\n+                {\n+                    if (const auto * const_map = checkAndGetColumnConstData<ColumnMap>(argument.column.get()))\n+                        argument.column = ColumnConst::create(Derived::extractNestedColumn(*const_map), argument.column->size());\n+                    else\n+                        argument.column = Derived::extractNestedColumn(assert_cast<const ColumnMap &>(*argument.column));\n+                }\n+            }\n+        }\n+\n+        if (!has_map_column)\n+            throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,\n+                \"Function {} requires at least one argument of type Map\", Name::name);\n+    }\n+};\n+\n+/// Adapter that extracts nested Array(Tuple(key, value)) from Map columns.\n+template <typename Name, bool returns_map = true>\n+struct MapToNestedAdapter : public MapAdapterBase<MapToNestedAdapter<Name, returns_map>, Name>\n+{\n+    using MapAdapterBase<MapToNestedAdapter, Name>::extractNestedTypes;\n+    using MapAdapterBase<MapToNestedAdapter, Name>::extractNestedTypesAndColumns;\n+\n+    static DataTypePtr extractNestedType(const DataTypeMap & type_map)\n+    {\n+        return type_map.getNestedTypeWithUnnamedTuple();\n+    }\n+\n+    static ColumnPtr extractNestedColumn(const ColumnMap & column_map)\n+    {\n+        return column_map.getNestedColumnPtr();\n+    }\n+\n+    static DataTypePtr extractResultType(const DataTypePtr & result_type)\n+    {\n+        if constexpr (returns_map)\n+            return assert_cast<const DataTypeMap &>(*result_type).getNestedType();\n+        return result_type;\n+    }\n+\n+    static DataTypePtr wrapType(DataTypePtr type)\n+    {\n+        if constexpr (returns_map)\n+            return std::make_shared<DataTypeMap>(std::move(type));\n+        return type;\n+    }\n+\n+    static ColumnPtr wrapColumn(ColumnPtr column)\n+    {\n+        if constexpr (returns_map)\n+            return ColumnMap::create(std::move(column));\n+        return column;\n+    }\n+};\n+\n+/// Adapter that extracts array with keys or values from Map columns.\n+template <typename Name, size_t position>\n+struct MapToSubcolumnAdapter : public MapAdapterBase<MapToSubcolumnAdapter<Name, position>, Name>\n+{\n+    static_assert(position <= 1);\n+    using MapAdapterBase<MapToSubcolumnAdapter, Name>::extractNestedTypes;\n+    using MapAdapterBase<MapToSubcolumnAdapter, Name>::extractNestedTypesAndColumns;\n+\n+    static DataTypePtr extractNestedType(const DataTypeMap & type_map)\n+    {\n+        const auto & array_type = assert_cast<const DataTypeArray &>(*type_map.getNestedType());\n+        const auto & tuple_type = assert_cast<const DataTypeTuple &>(*array_type.getNestedType());\n+        return std::make_shared<DataTypeArray>(tuple_type.getElement(position));\n+    }\n+\n+    static ColumnPtr extractNestedColumn(const ColumnMap & column_map)\n+    {\n+        const auto & array_column = column_map.getNestedColumn();\n+        const auto & tuple_column = column_map.getNestedData();\n+        return ColumnArray::create(tuple_column.getColumnPtr(position), array_column.getOffsetsPtr());\n+    }\n+\n+    static DataTypePtr extractResultType(const DataTypePtr & result_type) { return result_type; }\n+    static DataTypePtr wrapType(DataTypePtr type) { return type; }\n+    static ColumnPtr wrapColumn(ColumnPtr column) { return column; }\n+};\n+\n+/// A special function that works like the following:\n+/// mapKeyLike(pattern, key, value) <=> key LIKE pattern\n+/// It is used to mimic lambda: (key, value) -> key LIKE pattern.\n+class FunctionMapKeyLike : public IFunction\n+{\n+public:\n+    String getName() const override { return \"mapKeyLike\"; }\n+    size_t getNumberOfArguments() const override { return 3; }\n+    bool isSuitableForShortCircuitArgumentsExecution(const DataTypesWithConstInfo & /*arguments*/) const override { return false; }\n+    bool useDefaultImplementationForNulls() const override { return false; }\n+\n+    DataTypePtr getReturnTypeImpl(const DataTypes & arguments) const override\n+    {\n+        DataTypes new_arguments{arguments[1], arguments[0]};\n+        return impl.getReturnTypeImpl(new_arguments);\n+    }\n+\n+    ColumnPtr executeImpl(const ColumnsWithTypeAndName & arguments, const DataTypePtr & result_type, size_t input_rows_count) const override\n+    {\n+        ColumnsWithTypeAndName new_arguments{arguments[1], arguments[0]};\n+        return impl.executeImpl(new_arguments, result_type, input_rows_count);\n+    }\n+\n+private:\n+    FunctionLike impl;\n+};\n+\n+/// Adapter for map*KeyLike functions.\n+/// It extracts nested Array(Tuple(key, value)) from Map columns\n+/// and prepares ColumnFunction as first argument which works\n+/// like lambda (k, v) -> k LIKE pattern to pass it to the nested\n+/// function derived from FunctionArrayMapped.\n+template <typename Name, bool returns_map>\n+struct MapKeyLikeAdapter\n+{\n+    static void checkTypes(const DataTypes & types)\n+    {\n+        if (types.size() != 2)\n+            throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH,\n+                \"Number of arguments for function {} doesn't match: passed {}, should be 2\",\n+                Name::name, types.size());\n+\n+        const auto * map_type = checkAndGetDataType<DataTypeMap>(types[0].get());\n+        if (!map_type)\n+            throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT, \"First argument for function {} must be a Map\", Name::name);\n+\n+        if (!isStringOrFixedString(types[1]))\n+            throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT, \"Second argument for function {} must be String or FixedString\", Name::name);\n+\n+        if (!isStringOrFixedString(map_type->getKeyType()))\n+            throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT, \"Key type of map for function {} must be String or FixedString\", Name::name);\n+    }\n+\n+    static void extractNestedTypes(DataTypes & types)\n+    {\n+        checkTypes(types);\n+        const auto & map_type = assert_cast<const DataTypeMap &>(*types[0]);\n+\n+        DataTypes lambda_argument_types{types[1], map_type.getKeyType(), map_type.getValueType()};\n+        auto result_type = FunctionMapKeyLike().getReturnTypeImpl(lambda_argument_types);\n+\n+        DataTypes argument_types{map_type.getKeyType(), map_type.getValueType()};\n+        auto function_type = std::make_shared<DataTypeFunction>(argument_types, result_type);\n+\n+        types = {function_type, types[0]};\n+        MapToNestedAdapter<Name, returns_map>::extractNestedTypes(types);\n+    }\n+\n+    static void extractNestedTypesAndColumns(ColumnsWithTypeAndName & arguments)\n+    {\n+        checkTypes(collections::map<DataTypes>(arguments, [](const auto & elem) { return elem.type; }));\n+\n+        const auto & map_type = assert_cast<const DataTypeMap &>(*arguments[0].type);\n+        const auto & pattern_arg = arguments[1];\n+\n+        ColumnPtr function_column;\n+        auto function = std::make_shared<FunctionMapKeyLike>();\n+\n+        DataTypes lambda_argument_types{pattern_arg.type, map_type.getKeyType(), map_type.getValueType()};\n+        auto result_type = function->getReturnTypeImpl(lambda_argument_types);\n+\n+        DataTypes argument_types{map_type.getKeyType(), map_type.getValueType()};\n+        auto function_type = std::make_shared<DataTypeFunction>(argument_types, result_type);\n+\n+        if (pattern_arg.column)\n+        {\n+            /// Here we create ColumnFunction with already captured pattern column.\n+            /// Nested function will append keys and values column and it will work as desired lambda.\n+            auto function_base = std::make_shared<FunctionToFunctionBaseAdaptor>(function, lambda_argument_types, result_type);\n+            function_column = ColumnFunction::create(pattern_arg.column->size(), std::move(function_base), ColumnsWithTypeAndName{pattern_arg});\n+        }\n+\n+        ColumnWithTypeAndName function_arg{function_column, function_type, \"__function_map_key_like\"};\n+        arguments = {function_arg, arguments[0]};\n+        MapToNestedAdapter<Name, returns_map>::extractNestedTypesAndColumns(arguments);\n+    }\n+\n+    static DataTypePtr extractResultType(const DataTypePtr & result_type)\n+    {\n+        return MapToNestedAdapter<Name, returns_map>::extractResultType(result_type);\n+    }\n+\n+    static DataTypePtr wrapType(DataTypePtr type)\n+    {\n+        return MapToNestedAdapter<Name, returns_map>::wrapType(std::move(type));\n+    }\n+\n+    static ColumnPtr wrapColumn(ColumnPtr column)\n+    {\n+        return MapToNestedAdapter<Name, returns_map>::wrapColumn(std::move(column));\n+    }\n+};\n+\n+struct NameMapConcat { static constexpr auto name = \"mapConcat\"; };\n+using FunctionMapConcat = FunctionMapToArrayAdapter<FunctionArrayConcat, MapToNestedAdapter<NameMapConcat>, NameMapConcat>;\n+\n+struct NameMapKeys { static constexpr auto name = \"mapKeys\"; };\n+using FunctionMapKeys = FunctionMapToArrayAdapter<FunctionIdentity, MapToSubcolumnAdapter<NameMapKeys, 0>, NameMapKeys>;\n+\n+struct NameMapValues { static constexpr auto name = \"mapValues\"; };\n+using FunctionMapValues = FunctionMapToArrayAdapter<FunctionIdentity, MapToSubcolumnAdapter<NameMapValues, 1>, NameMapValues>;\n+\n+struct NameMapContains { static constexpr auto name = \"mapContains\"; };\n+using FunctionMapContains = FunctionMapToArrayAdapter<FunctionArrayIndex<HasAction, NameMapContains>, MapToSubcolumnAdapter<NameMapKeys, 0>, NameMapContains>;\n+\n+struct NameMapFilter { static constexpr auto name = \"mapFilter\"; };\n+using FunctionMapFilter = FunctionMapToArrayAdapter<FunctionArrayFilter, MapToNestedAdapter<NameMapFilter>, NameMapFilter>;\n+\n+struct NameMapApply { static constexpr auto name = \"mapApply\"; };\n+using FunctionMapApply = FunctionMapToArrayAdapter<FunctionArrayMap, MapToNestedAdapter<NameMapApply>, NameMapApply>;\n+\n+struct NameMapExists { static constexpr auto name = \"mapExists\"; };\n+using FunctionMapExists = FunctionMapToArrayAdapter<FunctionArrayExists, MapToNestedAdapter<NameMapExists, false>, NameMapExists>;\n+\n+struct NameMapAll { static constexpr auto name = \"mapAll\"; };\n+using FunctionMapAll = FunctionMapToArrayAdapter<FunctionArrayAll, MapToNestedAdapter<NameMapAll, false>, NameMapAll>;\n+\n+struct NameMapContainsKeyLike { static constexpr auto name = \"mapContainsKeyLike\"; };\n+using FunctionMapContainsKeyLike = FunctionMapToArrayAdapter<FunctionArrayExists, MapKeyLikeAdapter<NameMapContainsKeyLike, false>, NameMapContainsKeyLike>;\n+\n+struct NameMapExtractKeyLike { static constexpr auto name = \"mapExtractKeyLike\"; };\n+using FunctionMapExtractKeyLike = FunctionMapToArrayAdapter<FunctionArrayFilter, MapKeyLikeAdapter<NameMapExtractKeyLike, true>, NameMapExtractKeyLike>;\n+\n+struct NameMapSort { static constexpr auto name = \"mapSort\"; };\n+struct NameMapReverseSort { static constexpr auto name = \"mapReverseSort\"; };\n+struct NameMapPartialSort { static constexpr auto name = \"mapPartialSort\"; };\n+struct NameMapPartialReverseSort { static constexpr auto name = \"mapPartialReverseSort\"; };\n+\n+using FunctionMapSort = FunctionMapToArrayAdapter<FunctionArraySort, MapToNestedAdapter<NameMapSort>, NameMapSort>;\n+using FunctionMapReverseSort = FunctionMapToArrayAdapter<FunctionArrayReverseSort, MapToNestedAdapter<NameMapReverseSort>, NameMapReverseSort>;\n+using FunctionMapPartialSort = FunctionMapToArrayAdapter<FunctionArrayPartialSort, MapToNestedAdapter<NameMapPartialSort>, NameMapPartialSort>;\n+using FunctionMapPartialReverseSort = FunctionMapToArrayAdapter<FunctionArrayPartialReverseSort, MapToNestedAdapter<NameMapPartialReverseSort>, NameMapPartialReverseSort>;\n+\n+REGISTER_FUNCTION(MapMiscellaneous)\n+{\n+    factory.registerFunction<FunctionMapConcat>(\n+    {\n+        \"The same as arrayConcat.\",\n+        Documentation::Examples{{\"mapConcat\", \"SELECT mapConcat(map('k1', 'v1'), map('k2', 'v2'))\"}},\n+        Documentation::Categories{\"Map\"},\n+    });\n+\n+    factory.registerFunction<FunctionMapKeys>(\n+    {\n+        \"Returns an array with the keys of map.\",\n+        Documentation::Examples{{\"mapKeys\", \"SELECT mapKeys(map('k1', 'v1', 'k2', 'v2'))\"}},\n+        Documentation::Categories{\"Map\"},\n+    });\n+\n+    factory.registerFunction<FunctionMapValues>(\n+    {\n+        \"Returns an array with the values of map.\",\n+        Documentation::Examples{{\"mapValues\", \"SELECT mapValues(map('k1', 'v1', 'k2', 'v2'))\"}},\n+        Documentation::Categories{\"Map\"},\n+    });\n+\n+    factory.registerFunction<FunctionMapContains>(\n+    {\n+        \"Checks whether the map has the specified key.\",\n+        Documentation::Examples{{\"mapContains\", \"SELECT mapContains(map('k1', 'v1', 'k2', 'v2'), 'k1')\"}},\n+        Documentation::Categories{\"Map\"},\n+    });\n+\n+    factory.registerFunction<FunctionMapFilter>(\n+    {\n+        \"The same as arrayFilter.\",\n+        Documentation::Examples{{\"mapFilter\", \"SELECT mapFilter((k, v) -> v > 1, map('k1', 1, 'k2', 2))\"}},\n+        Documentation::Categories{\"Map\"},\n+    });\n+\n+    factory.registerFunction<FunctionMapApply>(\n+    {\n+        \"The same as arrayMap.\",\n+        Documentation::Examples{{\"mapApply\", \"SELECT mapApply((k, v) -> (k, v * 2), map('k1', 1, 'k2', 2))\"}},\n+        Documentation::Categories{\"Map\"},\n+    });\n+\n+    factory.registerFunction<FunctionMapExists>(\n+    {\n+        \"The same as arrayExists.\",\n+        Documentation::Examples{{\"mapExists\", \"SELECT mapExists((k, v) -> v = 1, map('k1', 1, 'k2', 2))\"}},\n+        Documentation::Categories{\"Map\"},\n+    });\n+\n+     factory.registerFunction<FunctionMapAll>(\n+    {\n+        \"The same as arrayAll.\",\n+        Documentation::Examples{{\"mapAll\", \"SELECT mapAll((k, v) -> v = 1, map('k1', 1, 'k2', 2))\"}},\n+        Documentation::Categories{\"Map\"},\n+    });\n+\n+    factory.registerFunction<FunctionMapSort>(\n+    {\n+        \"The same as arraySort.\",\n+        Documentation::Examples{{\"mapSort\", \"SELECT mapSort((k, v) -> v, map('k1', 3, 'k2', 1, 'k3', 2))\"}},\n+        Documentation::Categories{\"Map\"},\n+    });\n+\n+    factory.registerFunction<FunctionMapReverseSort>(\n+    {\n+        \"The same as arrayReverseSort.\",\n+        Documentation::Examples{{\"mapReverseSort\", \"SELECT mapReverseSort((k, v) -> v, map('k1', 3, 'k2', 1, 'k3', 2))\"}},\n+        Documentation::Categories{\"Map\"},\n+    });\n+\n+    factory.registerFunction<FunctionMapPartialSort>(\n+    {\n+        \"The same as arrayReverseSort.\",\n+        Documentation::Examples{{\"mapPartialSort\", \"SELECT mapPartialSort((k, v) -> v, 2, map('k1', 3, 'k2', 1, 'k3', 2))\"}},\n+        Documentation::Categories{\"Map\"},\n+    });\n+\n+    factory.registerFunction<FunctionMapPartialReverseSort>(\n+    {\n+        \"The same as arrayPartialReverseSort.\",\n+        Documentation::Examples{{\"mapPartialReverseSort\", \"SELECT mapPartialReverseSort((k, v) -> v, 2, map('k1', 3, 'k2', 1, 'k3', 2))\"}},\n+        Documentation::Categories{\"Map\"},\n+    });\n+\n+    factory.registerFunction<FunctionMapContainsKeyLike>(\n+    {\n+        \"Checks whether map contains key LIKE specified pattern.\",\n+        Documentation::Examples{{\"mapContainsKeyLike\", \"SELECT mapContainsKeyLike(map('k1-1', 1, 'k2-1', 2), 'k1%')\"}},\n+        Documentation::Categories{\"Map\"},\n+    });\n+\n+    factory.registerFunction<FunctionMapExtractKeyLike>(\n+    {\n+        \"Returns a map with elements which key matches the specified pattern.\",\n+        Documentation::Examples{{\"mapExtractKeyLike\", \"SELECT mapExtractKeyLike(map('k1-1', 1, 'k2-1', 2), 'k1%')\"}},\n+        Documentation::Categories{\"Map\"},\n+    });\n+}\n+\n+}\ndiff --git a/src/Functions/array/arrayAggregation.cpp b/src/Functions/array/arrayAggregation.cpp\nindex e13b5b1d2f1a..6a0010e4124d 100644\n--- a/src/Functions/array/arrayAggregation.cpp\n+++ b/src/Functions/array/arrayAggregation.cpp\n@@ -96,9 +96,6 @@ using ArrayAggregateResult = typename ArrayAggregateResultImpl<ArrayElement, ope\n template<AggregateOperation aggregate_operation>\n struct ArrayAggregateImpl\n {\n-    using column_type = ColumnArray;\n-    using data_type = DataTypeArray;\n-\n     static bool needBoolean() { return false; }\n     static bool needExpression() { return false; }\n     static bool needOneArray() { return false; }\ndiff --git a/src/Functions/array/arrayAll.cpp b/src/Functions/array/arrayAll.cpp\nindex 1d02342b704c..b3b0413f3bee 100644\n--- a/src/Functions/array/arrayAll.cpp\n+++ b/src/Functions/array/arrayAll.cpp\n@@ -1,90 +1,67 @@\n-#include <Columns/ColumnsNumber.h>\n-#include <DataTypes/DataTypesNumber.h>\n+#include <Functions/array/arrayAll.h>\n #include <Functions/FunctionFactory.h>\n \n-#include \"FunctionArrayMapped.h\"\n-\n namespace DB\n {\n+\n namespace ErrorCodes\n {\n     extern const int ILLEGAL_COLUMN;\n }\n \n-/** arrayAll(x1,...,xn -> expression, array1,...,arrayn) - is the expression true for all elements of the array.\n-  * An overload of the form f(array) is available, which works in the same way as f(x -> x, array).\n-  */\n-struct ArrayAllImpl\n+ColumnPtr ArrayAllImpl::execute(const ColumnArray & array, ColumnPtr mapped)\n {\n-    using column_type = ColumnArray;\n-    using data_type = DataTypeArray;\n+    const ColumnUInt8 * column_filter = typeid_cast<const ColumnUInt8 *>(&*mapped);\n \n-    static bool needBoolean() { return true; }\n-    static bool needExpression() { return false; }\n-    static bool needOneArray() { return false; }\n-\n-    static DataTypePtr getReturnType(const DataTypePtr & /*expression_return*/, const DataTypePtr & /*array_element*/)\n+    if (!column_filter)\n     {\n-        return std::make_shared<DataTypeUInt8>();\n-    }\n+        const auto * column_filter_const = checkAndGetColumnConst<ColumnUInt8>(&*mapped);\n \n-    static ColumnPtr execute(const ColumnArray & array, ColumnPtr mapped)\n-    {\n-        const ColumnUInt8 * column_filter = typeid_cast<const ColumnUInt8 *>(&*mapped);\n+        if (!column_filter_const)\n+            throw Exception(ErrorCodes::ILLEGAL_COLUMN, \"Unexpected type of filter column\");\n \n-        if (!column_filter)\n+        if (column_filter_const->getValue<UInt8>())\n+            return DataTypeUInt8().createColumnConst(array.size(), 1u);\n+        else\n         {\n-            const auto * column_filter_const = checkAndGetColumnConst<ColumnUInt8>(&*mapped);\n-\n-            if (!column_filter_const)\n-                throw Exception(ErrorCodes::ILLEGAL_COLUMN, \"Unexpected type of filter column\");\n+            const IColumn::Offsets & offsets = array.getOffsets();\n+            auto out_column = ColumnUInt8::create(offsets.size());\n+            ColumnUInt8::Container & out_all = out_column->getData();\n \n-            if (column_filter_const->getValue<UInt8>())\n-                return DataTypeUInt8().createColumnConst(array.size(), 1u);\n-            else\n+            size_t pos = 0;\n+            for (size_t i = 0; i < offsets.size(); ++i)\n             {\n-                const IColumn::Offsets & offsets = array.getOffsets();\n-                auto out_column = ColumnUInt8::create(offsets.size());\n-                ColumnUInt8::Container & out_all = out_column->getData();\n-\n-                size_t pos = 0;\n-                for (size_t i = 0; i < offsets.size(); ++i)\n-                {\n-                    out_all[i] = offsets[i] == pos;\n-                    pos = offsets[i];\n-                }\n-\n-                return out_column;\n+                out_all[i] = offsets[i] == pos;\n+                pos = offsets[i];\n             }\n+\n+            return out_column;\n         }\n+    }\n \n-        const IColumn::Filter & filter = column_filter->getData();\n-        const IColumn::Offsets & offsets = array.getOffsets();\n-        auto out_column = ColumnUInt8::create(offsets.size());\n-        ColumnUInt8::Container & out_all = out_column->getData();\n+    const IColumn::Filter & filter = column_filter->getData();\n+    const IColumn::Offsets & offsets = array.getOffsets();\n+    auto out_column = ColumnUInt8::create(offsets.size());\n+    ColumnUInt8::Container & out_all = out_column->getData();\n \n-        size_t pos = 0;\n-        for (size_t i = 0; i < offsets.size(); ++i)\n+    size_t pos = 0;\n+    for (size_t i = 0; i < offsets.size(); ++i)\n+    {\n+        UInt8 all = 1;\n+        for (; pos < offsets[i]; ++pos)\n         {\n-            UInt8 all = 1;\n-            for (; pos < offsets[i]; ++pos)\n+            if (!filter[pos])\n             {\n-                if (!filter[pos])\n-                {\n-                    all = 0;\n-                    pos = offsets[i];\n-                    break;\n-                }\n+                all = 0;\n+                pos = offsets[i];\n+                break;\n             }\n-            out_all[i] = all;\n         }\n-\n-        return out_column;\n+        out_all[i] = all;\n     }\n-};\n \n-struct NameArrayAll { static constexpr auto name = \"arrayAll\"; };\n-using FunctionArrayAll = FunctionArrayMapped<ArrayAllImpl, NameArrayAll>;\n+    return out_column;\n+}\n \n REGISTER_FUNCTION(ArrayAll)\n {\n@@ -92,5 +69,3 @@ REGISTER_FUNCTION(ArrayAll)\n }\n \n }\n-\n-\ndiff --git a/src/Functions/array/arrayAll.h b/src/Functions/array/arrayAll.h\nnew file mode 100644\nindex 000000000000..3d8d33576765\n--- /dev/null\n+++ b/src/Functions/array/arrayAll.h\n@@ -0,0 +1,30 @@\n+#pragma once\n+\n+#include <Columns/ColumnsNumber.h>\n+#include <DataTypes/DataTypesNumber.h>\n+#include \"FunctionArrayMapped.h\"\n+\n+namespace DB\n+{\n+\n+/** arrayAll(x1,...,xn -> expression, array1,...,arrayn) - is the expression true for all elements of the array.\n+  * An overload of the form f(array) is available, which works in the same way as f(x -> x, array).\n+  */\n+struct ArrayAllImpl\n+{\n+    static bool needBoolean() { return true; }\n+    static bool needExpression() { return false; }\n+    static bool needOneArray() { return false; }\n+\n+    static DataTypePtr getReturnType(const DataTypePtr & /*expression_return*/, const DataTypePtr & /*array_element*/)\n+    {\n+        return std::make_shared<DataTypeUInt8>();\n+    }\n+\n+    static ColumnPtr execute(const ColumnArray & array, ColumnPtr mapped);\n+};\n+\n+struct NameArrayAll { static constexpr auto name = \"arrayAll\"; };\n+using FunctionArrayAll = FunctionArrayMapped<ArrayAllImpl, NameArrayAll>;\n+\n+}\ndiff --git a/src/Functions/array/arrayCompact.cpp b/src/Functions/array/arrayCompact.cpp\nindex 15df9f0d0082..7d09d1078d54 100644\n--- a/src/Functions/array/arrayCompact.cpp\n+++ b/src/Functions/array/arrayCompact.cpp\n@@ -19,9 +19,6 @@ namespace ErrorCodes\n \n struct ArrayCompactImpl\n {\n-    using column_type = ColumnArray;\n-    using data_type = DataTypeArray;\n-\n     static bool needBoolean() { return false; }\n     static bool needExpression() { return false; }\n     static bool needOneArray() { return false; }\ndiff --git a/src/Functions/array/arrayConcat.cpp b/src/Functions/array/arrayConcat.cpp\nindex c49565d7b239..cdb361b73b9b 100644\n--- a/src/Functions/array/arrayConcat.cpp\n+++ b/src/Functions/array/arrayConcat.cpp\n@@ -1,4 +1,4 @@\n-#include <Functions/IFunction.h>\n+#include <Functions/array/arrayConcat.h>\n #include <Functions/FunctionFactory.h>\n #include <Functions/GatherUtils/GatherUtils.h>\n #include <DataTypes/DataTypeArray.h>\n@@ -6,10 +6,8 @@\n #include <Interpreters/castColumn.h>\n #include <Columns/ColumnArray.h>\n #include <Columns/ColumnConst.h>\n-#include <Common/typeid_cast.h>\n #include <base/range.h>\n \n-\n namespace DB\n {\n \n@@ -20,84 +18,66 @@ namespace ErrorCodes\n     extern const int ILLEGAL_TYPE_OF_ARGUMENT;\n }\n \n-\n-/// arrayConcat(arr1, ...) - concatenate arrays.\n-class FunctionArrayConcat : public IFunction\n+DataTypePtr FunctionArrayConcat::getReturnTypeImpl(const DataTypes & arguments) const\n {\n-public:\n-    static constexpr auto name = \"arrayConcat\";\n-    static FunctionPtr create(ContextPtr) { return std::make_shared<FunctionArrayConcat>(); }\n-\n-    String getName() const override { return name; }\n+    if (arguments.empty())\n+        throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH, \"Function {} requires at least one argument.\", getName());\n \n-    bool isVariadic() const override { return true; }\n-    size_t getNumberOfArguments() const override { return 0; }\n-    bool isSuitableForShortCircuitArgumentsExecution(const DataTypesWithConstInfo & /*arguments*/) const override { return true; }\n-\n-    DataTypePtr getReturnTypeImpl(const DataTypes & arguments) const override\n+    for (auto i : collections::range(0, arguments.size()))\n     {\n-        if (arguments.empty())\n-            throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH, \"Function {} requires at least one argument.\", getName());\n+        const auto * array_type = typeid_cast<const DataTypeArray *>(arguments[i].get());\n+        if (!array_type)\n+            throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,\n+                            \"Argument {} for function {} must be an array but it has type {}.\",\n+                            i, getName(), arguments[i]->getName());\n+    }\n \n-        for (auto i : collections::range(0, arguments.size()))\n-        {\n-            const auto * array_type = typeid_cast<const DataTypeArray *>(arguments[i].get());\n-            if (!array_type)\n-                throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,\n-                                \"Argument {} for function {} must be an array but it has type {}.\",\n-                                i, getName(), arguments[i]->getName());\n-        }\n+    return getLeastSupertype(arguments);\n+}\n \n-        return getLeastSupertype(arguments);\n-    }\n+ColumnPtr FunctionArrayConcat::executeImpl(const ColumnsWithTypeAndName & arguments, const DataTypePtr & result_type, size_t input_rows_count) const\n+{\n+    if (result_type->onlyNull())\n+        return result_type->createColumnConstWithDefaultValue(input_rows_count);\n \n-    ColumnPtr executeImpl(const ColumnsWithTypeAndName & arguments, const DataTypePtr & result_type, size_t input_rows_count) const override\n-    {\n-        if (result_type->onlyNull())\n-            return result_type->createColumnConstWithDefaultValue(input_rows_count);\n+    size_t rows = input_rows_count;\n+    size_t num_args = arguments.size();\n \n-        size_t rows = input_rows_count;\n-        size_t num_args = arguments.size();\n+    Columns preprocessed_columns(num_args);\n \n-        Columns preprocessed_columns(num_args);\n+    for (size_t i = 0; i < num_args; ++i)\n+    {\n+        const ColumnWithTypeAndName & arg = arguments[i];\n+        ColumnPtr preprocessed_column = arg.column;\n \n-        for (size_t i = 0; i < num_args; ++i)\n-        {\n-            const ColumnWithTypeAndName & arg = arguments[i];\n-            ColumnPtr preprocessed_column = arg.column;\n+        if (!arg.type->equals(*result_type))\n+            preprocessed_column = castColumn(arg, result_type);\n \n-            if (!arg.type->equals(*result_type))\n-                preprocessed_column = castColumn(arg, result_type);\n+        preprocessed_columns[i] = std::move(preprocessed_column);\n+    }\n \n-            preprocessed_columns[i] = std::move(preprocessed_column);\n-        }\n+    std::vector<std::unique_ptr<GatherUtils::IArraySource>> sources;\n \n-        std::vector<std::unique_ptr<GatherUtils::IArraySource>> sources;\n+    for (auto & argument_column : preprocessed_columns)\n+    {\n+        bool is_const = false;\n \n-        for (auto & argument_column : preprocessed_columns)\n+        if (const auto * argument_column_const = typeid_cast<const ColumnConst *>(argument_column.get()))\n         {\n-            bool is_const = false;\n-\n-            if (const auto * argument_column_const = typeid_cast<const ColumnConst *>(argument_column.get()))\n-            {\n-                is_const = true;\n-                argument_column = argument_column_const->getDataColumnPtr();\n-            }\n-\n-            if (const auto * argument_column_array = typeid_cast<const ColumnArray *>(argument_column.get()))\n-                sources.emplace_back(GatherUtils::createArraySource(*argument_column_array, is_const, rows));\n-            else\n-                throw Exception(ErrorCodes::LOGICAL_ERROR, \"Arguments for function {} must be arrays.\", getName());\n+            is_const = true;\n+            argument_column = argument_column_const->getDataColumnPtr();\n         }\n \n-        auto sink = GatherUtils::concat(sources);\n-\n-        return sink;\n+        if (const auto * argument_column_array = typeid_cast<const ColumnArray *>(argument_column.get()))\n+            sources.emplace_back(GatherUtils::createArraySource(*argument_column_array, is_const, rows));\n+        else\n+            throw Exception(ErrorCodes::LOGICAL_ERROR, \"Arguments for function {} must be arrays.\", getName());\n     }\n \n-    bool useDefaultImplementationForConstants() const override { return true; }\n-};\n+    auto sink = GatherUtils::concat(sources);\n \n+    return sink;\n+}\n \n REGISTER_FUNCTION(ArrayConcat)\n {\ndiff --git a/src/Functions/array/arrayConcat.h b/src/Functions/array/arrayConcat.h\nnew file mode 100644\nindex 000000000000..130d58b35f98\n--- /dev/null\n+++ b/src/Functions/array/arrayConcat.h\n@@ -0,0 +1,29 @@\n+#pragma once\n+\n+#include <Functions/IFunction.h>\n+#include <Interpreters/Context_fwd.h>\n+\n+namespace DB\n+{\n+\n+/// arrayConcat(arr1, ...) - concatenate arrays.\n+class FunctionArrayConcat : public IFunction\n+{\n+public:\n+    static constexpr auto name = \"arrayConcat\";\n+    static FunctionPtr create(ContextPtr) { return std::make_shared<FunctionArrayConcat>(); }\n+\n+    String getName() const override { return name; }\n+\n+    bool isVariadic() const override { return true; }\n+    size_t getNumberOfArguments() const override { return 0; }\n+    bool isSuitableForShortCircuitArgumentsExecution(const DataTypesWithConstInfo & /*arguments*/) const override { return true; }\n+\n+    DataTypePtr getReturnTypeImpl(const DataTypes & arguments) const override;\n+\n+    ColumnPtr executeImpl(const ColumnsWithTypeAndName & arguments, const DataTypePtr & result_type, size_t input_rows_count) const override;\n+\n+    bool useDefaultImplementationForConstants() const override { return true; }\n+};\n+\n+}\ndiff --git a/src/Functions/array/arrayCount.cpp b/src/Functions/array/arrayCount.cpp\nindex 9aeefbab4feb..019f07e8e6ae 100644\n--- a/src/Functions/array/arrayCount.cpp\n+++ b/src/Functions/array/arrayCount.cpp\n@@ -17,9 +17,6 @@ namespace ErrorCodes\n   */\n struct ArrayCountImpl\n {\n-    using column_type = ColumnArray;\n-    using data_type = DataTypeArray;\n-\n     static bool needBoolean() { return true; }\n     static bool needExpression() { return false; }\n     static bool needOneArray() { return false; }\ndiff --git a/src/Functions/array/arrayCumSum.cpp b/src/Functions/array/arrayCumSum.cpp\nindex c91498ee50a0..7ad7b90cf0a6 100644\n--- a/src/Functions/array/arrayCumSum.cpp\n+++ b/src/Functions/array/arrayCumSum.cpp\n@@ -18,9 +18,6 @@ namespace ErrorCodes\n \n struct ArrayCumSumImpl\n {\n-    using column_type = ColumnArray;\n-    using data_type = DataTypeArray;\n-\n     static bool needBoolean() { return false; }\n     static bool needExpression() { return false; }\n     static bool needOneArray() { return false; }\ndiff --git a/src/Functions/array/arrayCumSumNonNegative.cpp b/src/Functions/array/arrayCumSumNonNegative.cpp\nindex 9a34ec12cd8c..cb21a853ea0a 100644\n--- a/src/Functions/array/arrayCumSumNonNegative.cpp\n+++ b/src/Functions/array/arrayCumSumNonNegative.cpp\n@@ -19,9 +19,6 @@ namespace ErrorCodes\n   */\n struct ArrayCumSumNonNegativeImpl\n {\n-    using column_type = ColumnArray;\n-    using data_type = DataTypeArray;\n-\n     static bool needBoolean() { return false; }\n     static bool needExpression() { return false; }\n     static bool needOneArray() { return false; }\ndiff --git a/src/Functions/array/arrayDifference.cpp b/src/Functions/array/arrayDifference.cpp\nindex 9dcc730d4f61..857a88b82a2b 100644\n--- a/src/Functions/array/arrayDifference.cpp\n+++ b/src/Functions/array/arrayDifference.cpp\n@@ -21,9 +21,6 @@ namespace ErrorCodes\n   */\n struct ArrayDifferenceImpl\n {\n-    using column_type = ColumnArray;\n-    using data_type = DataTypeArray;\n-\n     static bool needBoolean() { return false; }\n     static bool needExpression() { return false; }\n     static bool needOneArray() { return false; }\ndiff --git a/src/Functions/array/arrayExists.cpp b/src/Functions/array/arrayExists.cpp\nindex d80556b1475f..d59425338a5f 100644\n--- a/src/Functions/array/arrayExists.cpp\n+++ b/src/Functions/array/arrayExists.cpp\n@@ -1,91 +1,67 @@\n-#include <Columns/ColumnsNumber.h>\n-#include <DataTypes/DataTypesNumber.h>\n+#include <Functions/array/arrayExists.h>\n #include <Functions/FunctionFactory.h>\n \n-#include \"FunctionArrayMapped.h\"\n-\n-\n namespace DB\n {\n+\n namespace ErrorCodes\n {\n     extern const int ILLEGAL_COLUMN;\n }\n \n-/** arrayExists(x1,...,xn -> expression, array1,...,arrayn) - is the expression true for at least one array element.\n-  * An overload of the form f(array) is available, which works in the same way as f(x -> x, array).\n-  */\n-struct ArrayExistsImpl\n+ColumnPtr ArrayExistsImpl::execute(const ColumnArray & array, ColumnPtr mapped)\n {\n-    using column_type = ColumnArray;\n-    using data_type = DataTypeArray;\n-\n-    static bool needBoolean() { return true; }\n-    static bool needExpression() { return false; }\n-    static bool needOneArray() { return false; }\n+    const ColumnUInt8 * column_filter = typeid_cast<const ColumnUInt8 *>(&*mapped);\n \n-    static DataTypePtr getReturnType(const DataTypePtr & /*expression_return*/, const DataTypePtr & /*array_element*/)\n+    if (!column_filter)\n     {\n-        return std::make_shared<DataTypeUInt8>();\n-    }\n+        const auto * column_filter_const = checkAndGetColumnConst<ColumnUInt8>(&*mapped);\n \n-    static ColumnPtr execute(const ColumnArray & array, ColumnPtr mapped)\n-    {\n-        const ColumnUInt8 * column_filter = typeid_cast<const ColumnUInt8 *>(&*mapped);\n+        if (!column_filter_const)\n+            throw Exception(ErrorCodes::ILLEGAL_COLUMN, \"Unexpected type of filter column\");\n \n-        if (!column_filter)\n+        if (column_filter_const->getValue<UInt8>())\n         {\n-            const auto * column_filter_const = checkAndGetColumnConst<ColumnUInt8>(&*mapped);\n+            const IColumn::Offsets & offsets = array.getOffsets();\n+            auto out_column = ColumnUInt8::create(offsets.size());\n+            ColumnUInt8::Container & out_exists = out_column->getData();\n \n-            if (!column_filter_const)\n-                throw Exception(ErrorCodes::ILLEGAL_COLUMN, \"Unexpected type of filter column\");\n-\n-            if (column_filter_const->getValue<UInt8>())\n+            size_t pos = 0;\n+            for (size_t i = 0; i < offsets.size(); ++i)\n             {\n-                const IColumn::Offsets & offsets = array.getOffsets();\n-                auto out_column = ColumnUInt8::create(offsets.size());\n-                ColumnUInt8::Container & out_exists = out_column->getData();\n-\n-                size_t pos = 0;\n-                for (size_t i = 0; i < offsets.size(); ++i)\n-                {\n-                    out_exists[i] = offsets[i] - pos > 0;\n-                    pos = offsets[i];\n-                }\n-\n-                return out_column;\n+                out_exists[i] = offsets[i] - pos > 0;\n+                pos = offsets[i];\n             }\n-            else\n-                return DataTypeUInt8().createColumnConst(array.size(), 0u);\n+\n+            return out_column;\n         }\n+        else\n+            return DataTypeUInt8().createColumnConst(array.size(), 0u);\n+    }\n \n-        const IColumn::Filter & filter = column_filter->getData();\n-        const IColumn::Offsets & offsets = array.getOffsets();\n-        auto out_column = ColumnUInt8::create(offsets.size());\n-        ColumnUInt8::Container & out_exists = out_column->getData();\n+    const IColumn::Filter & filter = column_filter->getData();\n+    const IColumn::Offsets & offsets = array.getOffsets();\n+    auto out_column = ColumnUInt8::create(offsets.size());\n+    ColumnUInt8::Container & out_exists = out_column->getData();\n \n-        size_t pos = 0;\n-        for (size_t i = 0; i < offsets.size(); ++i)\n+    size_t pos = 0;\n+    for (size_t i = 0; i < offsets.size(); ++i)\n+    {\n+        UInt8 exists = 0;\n+        for (; pos < offsets[i]; ++pos)\n         {\n-            UInt8 exists = 0;\n-            for (; pos < offsets[i]; ++pos)\n+            if (filter[pos])\n             {\n-                if (filter[pos])\n-                {\n-                    exists = 1;\n-                    pos = offsets[i];\n-                    break;\n-                }\n+                exists = 1;\n+                pos = offsets[i];\n+                break;\n             }\n-            out_exists[i] = exists;\n         }\n-\n-        return out_column;\n+        out_exists[i] = exists;\n     }\n-};\n \n-struct NameArrayExists { static constexpr auto name = \"arrayExists\"; };\n-using FunctionArrayExists = FunctionArrayMapped<ArrayExistsImpl, NameArrayExists>;\n+    return out_column;\n+}\n \n REGISTER_FUNCTION(ArrayExists)\n {\n@@ -93,5 +69,3 @@ REGISTER_FUNCTION(ArrayExists)\n }\n \n }\n-\n-\ndiff --git a/src/Functions/array/arrayExists.h b/src/Functions/array/arrayExists.h\nnew file mode 100644\nindex 000000000000..5b302ccb1508\n--- /dev/null\n+++ b/src/Functions/array/arrayExists.h\n@@ -0,0 +1,31 @@\n+#pragma once\n+\n+#include <Columns/ColumnsNumber.h>\n+#include <DataTypes/DataTypesNumber.h>\n+#include \"FunctionArrayMapped.h\"\n+\n+\n+namespace DB\n+{\n+\n+/** arrayExists(x1,...,xn -> expression, array1,...,arrayn) - is the expression true for at least one array element.\n+  * An overload of the form f(array) is available, which works in the same way as f(x -> x, array).\n+  */\n+struct ArrayExistsImpl\n+{\n+    static bool needBoolean() { return true; }\n+    static bool needExpression() { return false; }\n+    static bool needOneArray() { return false; }\n+\n+    static DataTypePtr getReturnType(const DataTypePtr & /*expression_return*/, const DataTypePtr & /*array_element*/)\n+    {\n+        return std::make_shared<DataTypeUInt8>();\n+    }\n+\n+    static ColumnPtr execute(const ColumnArray & array, ColumnPtr mapped);\n+};\n+\n+struct NameArrayExists { static constexpr auto name = \"arrayExists\"; };\n+using FunctionArrayExists = FunctionArrayMapped<ArrayExistsImpl, NameArrayExists>;\n+\n+}\ndiff --git a/src/Functions/array/arrayFill.cpp b/src/Functions/array/arrayFill.cpp\nindex b395584b8e26..89b5dce2331b 100644\n--- a/src/Functions/array/arrayFill.cpp\n+++ b/src/Functions/array/arrayFill.cpp\n@@ -20,9 +20,6 @@ namespace ErrorCodes\n template <bool reverse>\n struct ArrayFillImpl\n {\n-    using column_type = ColumnArray;\n-    using data_type = DataTypeArray;\n-\n     static bool needBoolean() { return true; }\n     static bool needExpression() { return true; }\n     static bool needOneArray() { return false; }\ndiff --git a/src/Functions/array/arrayFilter.cpp b/src/Functions/array/arrayFilter.cpp\nindex 528fb7bc5c71..618abd93845c 100644\n--- a/src/Functions/array/arrayFilter.cpp\n+++ b/src/Functions/array/arrayFilter.cpp\n@@ -1,78 +1,54 @@\n-#include <Columns/ColumnsNumber.h>\n-#include <DataTypes/DataTypesNumber.h>\n+#include <Functions/array/arrayFilter.h>\n #include <Functions/FunctionFactory.h>\n \n-#include \"FunctionArrayMapped.h\"\n-\n-\n namespace DB\n {\n+\n namespace ErrorCodes\n {\n     extern const int ILLEGAL_COLUMN;\n }\n \n-/** arrayFilter(x -> predicate, array) - leave in the array only the elements for which the expression is true.\n-  */\n-struct ArrayFilterImpl\n+ColumnPtr ArrayFilterImpl::execute(const ColumnArray & array, ColumnPtr mapped)\n {\n-    using column_type = ColumnArray;\n-    using data_type = DataTypeArray;\n-\n-    static bool needBoolean() { return true; }\n-    static bool needExpression() { return true; }\n-    static bool needOneArray() { return false; }\n+    const ColumnUInt8 * column_filter = typeid_cast<const ColumnUInt8 *>(&*mapped);\n \n-    static DataTypePtr getReturnType(const DataTypePtr & /*expression_return*/, const DataTypePtr & array_element)\n+    if (!column_filter)\n     {\n-        return std::make_shared<DataTypeArray>(array_element);\n-    }\n-\n-    /// If there are several arrays, the first one is passed here.\n-    static ColumnPtr execute(const ColumnArray & array, ColumnPtr mapped)\n-    {\n-        const ColumnUInt8 * column_filter = typeid_cast<const ColumnUInt8 *>(&*mapped);\n-\n-        if (!column_filter)\n-        {\n-            const auto * column_filter_const = checkAndGetColumnConst<ColumnUInt8>(&*mapped);\n+        const auto * column_filter_const = checkAndGetColumnConst<ColumnUInt8>(&*mapped);\n \n-            if (!column_filter_const)\n-                throw Exception(ErrorCodes::ILLEGAL_COLUMN, \"Unexpected type of filter column\");\n+        if (!column_filter_const)\n+            throw Exception(ErrorCodes::ILLEGAL_COLUMN, \"Unexpected type of filter column\");\n \n-            if (column_filter_const->getValue<UInt8>())\n-                return array.clone();\n-            else\n-                return ColumnArray::create(\n-                    array.getDataPtr()->cloneEmpty(),\n-                    ColumnArray::ColumnOffsets::create(array.size(), 0));\n-        }\n+        if (column_filter_const->getValue<UInt8>())\n+            return array.clone();\n+        else\n+            return ColumnArray::create(\n+                array.getDataPtr()->cloneEmpty(),\n+                ColumnArray::ColumnOffsets::create(array.size(), 0));\n+    }\n \n-        const IColumn::Filter & filter = column_filter->getData();\n-        ColumnPtr filtered = array.getData().filter(filter, -1);\n+    const IColumn::Filter & filter = column_filter->getData();\n+    ColumnPtr filtered = array.getData().filter(filter, -1);\n \n-        const IColumn::Offsets & in_offsets = array.getOffsets();\n-        auto column_offsets = ColumnArray::ColumnOffsets::create(in_offsets.size());\n-        IColumn::Offsets & out_offsets = column_offsets->getData();\n+    const IColumn::Offsets & in_offsets = array.getOffsets();\n+    auto column_offsets = ColumnArray::ColumnOffsets::create(in_offsets.size());\n+    IColumn::Offsets & out_offsets = column_offsets->getData();\n \n-        size_t in_pos = 0;\n-        size_t out_pos = 0;\n-        for (size_t i = 0; i < in_offsets.size(); ++i)\n+    size_t in_pos = 0;\n+    size_t out_pos = 0;\n+    for (size_t i = 0; i < in_offsets.size(); ++i)\n+    {\n+        for (; in_pos < in_offsets[i]; ++in_pos)\n         {\n-            for (; in_pos < in_offsets[i]; ++in_pos)\n-            {\n-                if (filter[in_pos])\n-                    ++out_pos;\n-            }\n-            out_offsets[i] = out_pos;\n+            if (filter[in_pos])\n+                ++out_pos;\n         }\n-\n-        return ColumnArray::create(filtered, std::move(column_offsets));\n+        out_offsets[i] = out_pos;\n     }\n-};\n \n-struct NameArrayFilter { static constexpr auto name = \"arrayFilter\"; };\n-using FunctionArrayFilter = FunctionArrayMapped<ArrayFilterImpl, NameArrayFilter>;\n+    return ColumnArray::create(filtered, std::move(column_offsets));\n+}\n \n REGISTER_FUNCTION(ArrayFilter)\n {\n@@ -80,5 +56,3 @@ REGISTER_FUNCTION(ArrayFilter)\n }\n \n }\n-\n-\ndiff --git a/src/Functions/array/arrayFilter.h b/src/Functions/array/arrayFilter.h\nnew file mode 100644\nindex 000000000000..f3a5a29e1d1d\n--- /dev/null\n+++ b/src/Functions/array/arrayFilter.h\n@@ -0,0 +1,31 @@\n+#pragma once\n+\n+#include <Columns/ColumnsNumber.h>\n+#include <DataTypes/DataTypesNumber.h>\n+#include \"FunctionArrayMapped.h\"\n+\n+\n+namespace DB\n+{\n+\n+/** arrayFilter(x -> predicate, array) - leave in the array only the elements for which the expression is true.\n+  */\n+struct ArrayFilterImpl\n+{\n+    static bool needBoolean() { return true; }\n+    static bool needExpression() { return true; }\n+    static bool needOneArray() { return false; }\n+\n+    static DataTypePtr getReturnType(const DataTypePtr & /*expression_return*/, const DataTypePtr & array_element)\n+    {\n+        return std::make_shared<DataTypeArray>(array_element);\n+    }\n+\n+    /// If there are several arrays, the first one is passed here.\n+    static ColumnPtr execute(const ColumnArray & array, ColumnPtr mapped);\n+};\n+\n+struct NameArrayFilter { static constexpr auto name = \"arrayFilter\"; };\n+using FunctionArrayFilter = FunctionArrayMapped<ArrayFilterImpl, NameArrayFilter>;\n+\n+}\ndiff --git a/src/Functions/array/arrayFirstLast.cpp b/src/Functions/array/arrayFirstLast.cpp\nindex 6a2700811697..055c2a0f79a2 100644\n--- a/src/Functions/array/arrayFirstLast.cpp\n+++ b/src/Functions/array/arrayFirstLast.cpp\n@@ -28,9 +28,6 @@ enum class ArrayFirstLastElementNotExistsStrategy : uint8_t\n template <ArrayFirstLastStrategy strategy, ArrayFirstLastElementNotExistsStrategy element_not_exists_strategy>\n struct ArrayFirstLastImpl\n {\n-    using column_type = ColumnArray;\n-    using data_type = DataTypeArray;\n-\n     static bool needBoolean() { return false; }\n     static bool needExpression() { return true; }\n     static bool needOneArray() { return false; }\ndiff --git a/src/Functions/array/arrayFirstLastIndex.cpp b/src/Functions/array/arrayFirstLastIndex.cpp\nindex f985075b1d8b..045558609a45 100644\n--- a/src/Functions/array/arrayFirstLastIndex.cpp\n+++ b/src/Functions/array/arrayFirstLastIndex.cpp\n@@ -21,9 +21,6 @@ enum class ArrayFirstLastIndexStrategy\n template <ArrayFirstLastIndexStrategy strategy>\n struct ArrayFirstLastIndexImpl\n {\n-    using column_type = ColumnArray;\n-    using data_type = DataTypeArray;\n-\n     static bool needBoolean() { return false; }\n     static bool needExpression() { return true; }\n     static bool needOneArray() { return false; }\ndiff --git a/src/Functions/array/arrayMap.cpp b/src/Functions/array/arrayMap.cpp\nindex 216d488a360c..10a7ca45cfab 100644\n--- a/src/Functions/array/arrayMap.cpp\n+++ b/src/Functions/array/arrayMap.cpp\n@@ -1,44 +1,12 @@\n+#include <Functions/array/arrayMap.h>\n #include <Functions/FunctionFactory.h>\n \n-#include \"FunctionArrayMapped.h\"\n-\n-\n namespace DB\n {\n \n-/** arrayMap(x1, ..., xn -> expression, array1, ..., arrayn) - apply the expression to each element of the array (or set of parallel arrays).\n-  */\n-struct ArrayMapImpl\n-{\n-    using column_type = ColumnArray;\n-    using data_type = DataTypeArray;\n-\n-    /// true if the expression (for an overload of f(expression, arrays)) or an array (for f(array)) should be boolean.\n-    static bool needBoolean() { return false; }\n-    /// true if the f(array) overload is unavailable.\n-    static bool needExpression() { return true; }\n-    /// true if the array must be exactly one.\n-    static bool needOneArray() { return false; }\n-\n-    static DataTypePtr getReturnType(const DataTypePtr & expression_return, const DataTypePtr & /*array_element*/)\n-    {\n-        return std::make_shared<DataTypeArray>(expression_return);\n-    }\n-\n-    static ColumnPtr execute(const ColumnArray & array, ColumnPtr mapped)\n-    {\n-        return ColumnArray::create(mapped->convertToFullColumnIfConst(), array.getOffsetsPtr());\n-    }\n-};\n-\n-struct NameArrayMap { static constexpr auto name = \"arrayMap\"; };\n-using FunctionArrayMap = FunctionArrayMapped<ArrayMapImpl, NameArrayMap>;\n-\n REGISTER_FUNCTION(ArrayMap)\n {\n     factory.registerFunction<FunctionArrayMap>();\n }\n \n }\n-\n-\ndiff --git a/src/Functions/array/arrayMap.h b/src/Functions/array/arrayMap.h\nnew file mode 100644\nindex 000000000000..106b62a9c9ff\n--- /dev/null\n+++ b/src/Functions/array/arrayMap.h\n@@ -0,0 +1,33 @@\n+#pragma once\n+#include \"FunctionArrayMapped.h\"\n+\n+\n+namespace DB\n+{\n+\n+/** arrayMap(x1, ..., xn -> expression, array1, ..., arrayn) - apply the expression to each element of the array (or set of parallel arrays).\n+  */\n+struct ArrayMapImpl\n+{\n+    /// true if the expression (for an overload of f(expression, arrays)) or an array (for f(array)) should be boolean.\n+    static bool needBoolean() { return false; }\n+    /// true if the f(array) overload is unavailable.\n+    static bool needExpression() { return true; }\n+    /// true if the array must be exactly one.\n+    static bool needOneArray() { return false; }\n+\n+    static DataTypePtr getReturnType(const DataTypePtr & expression_return, const DataTypePtr & /*array_element*/)\n+    {\n+        return std::make_shared<DataTypeArray>(expression_return);\n+    }\n+\n+    static ColumnPtr execute(const ColumnArray & array, ColumnPtr mapped)\n+    {\n+        return ColumnArray::create(mapped->convertToFullColumnIfConst(), array.getOffsetsPtr());\n+    }\n+};\n+\n+struct NameArrayMap { static constexpr auto name = \"arrayMap\"; };\n+using FunctionArrayMap = FunctionArrayMapped<ArrayMapImpl, NameArrayMap>;\n+\n+}\ndiff --git a/src/Functions/array/arraySort.cpp b/src/Functions/array/arraySort.cpp\nindex 0188324bc198..b4593ec910c7 100644\n--- a/src/Functions/array/arraySort.cpp\n+++ b/src/Functions/array/arraySort.cpp\n@@ -1,140 +1,85 @@\n-#include \"FunctionArrayMapped.h\"\n-\n+#include <Functions/array/arraySort.h>\n #include <Functions/FunctionFactory.h>\n-#include <base/sort.h>\n \n namespace DB\n {\n \n namespace ErrorCodes\n {\n-    extern const int ILLEGAL_TYPE_OF_ARGUMENT;\n     extern const int LOGICAL_ERROR;\n }\n \n-/** Sort arrays, by values of its elements, or by values of corresponding elements of calculated expression (known as \"schwartzsort\").\n-  */\n-template <bool positive, bool is_partial>\n-struct ArraySortImpl\n+namespace\n {\n-    using column_type = ColumnArray;\n-    using data_type = DataTypeArray;\n \n-    static constexpr auto num_fixed_params = is_partial;\n+template <bool positive>\n+struct Less\n+{\n+    const IColumn & column;\n \n-    static bool needBoolean() { return false; }\n-    static bool needExpression() { return false; }\n-    static bool needOneArray() { return false; }\n+    explicit Less(const IColumn & column_) : column(column_) { }\n \n-    static DataTypePtr getReturnType(const DataTypePtr & /*expression_return*/, const DataTypePtr & array_element)\n+    bool operator()(size_t lhs, size_t rhs) const\n     {\n-        return std::make_shared<DataTypeArray>(array_element);\n+        if constexpr (positive)\n+            return column.compareAt(lhs, rhs, column, 1) < 0;\n+        else\n+            return column.compareAt(lhs, rhs, column, -1) > 0;\n     }\n+};\n \n-    struct Less\n-    {\n-        const IColumn & column;\n-\n-        explicit Less(const IColumn & column_) : column(column_) { }\n-\n-        bool operator()(size_t lhs, size_t rhs) const\n-        {\n-            if (positive)\n-                return column.compareAt(lhs, rhs, column, 1) < 0;\n-            else\n-                return column.compareAt(lhs, rhs, column, -1) > 0;\n-        }\n-    };\n-\n-    static void checkArguments(const String & name, const ColumnWithTypeAndName * fixed_arguments)\n-        requires(num_fixed_params)\n-    {\n-        if (!fixed_arguments)\n-            throw Exception(\n-                ErrorCodes::LOGICAL_ERROR,\n-                \"Expected fixed arguments to get the limit for partial array sort\"\n-            );\n-        WhichDataType which(fixed_arguments[0].type.get());\n-        if (!which.isUInt() && !which.isInt())\n-            throw Exception(\n-                ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,\n-                \"Illegal type {} of limit argument of function {} (must be UInt or Int)\",\n-                fixed_arguments[0].type->getName(),\n-                name);\n-    }\n+}\n \n-    static ColumnPtr execute(\n-        const ColumnArray & array,\n-        ColumnPtr mapped,\n-        const ColumnWithTypeAndName * fixed_arguments [[maybe_unused]] = nullptr)\n+template <bool positive, bool is_partial>\n+ColumnPtr ArraySortImpl<positive, is_partial>::execute(\n+    const ColumnArray & array,\n+    ColumnPtr mapped,\n+    const ColumnWithTypeAndName * fixed_arguments)\n+{\n+    [[maybe_unused]] const auto limit = [&]() -> size_t\n     {\n-        [[maybe_unused]] const auto limit = [&]() -> size_t\n+        if constexpr (is_partial)\n         {\n-            if constexpr (is_partial)\n-            {\n-                if (!fixed_arguments)\n-                    throw Exception(\n-                        ErrorCodes::LOGICAL_ERROR,\n-                        \"Expected fixed arguments to get the limit for partial array sort\"\n-                    );\n-                return fixed_arguments[0].column.get()->getUInt(0);\n-            }\n-            return 0;\n-        }();\n+            if (!fixed_arguments)\n+                throw Exception(\n+                    ErrorCodes::LOGICAL_ERROR,\n+                    \"Expected fixed arguments to get the limit for partial array sort\"\n+                );\n+            return fixed_arguments[0].column.get()->getUInt(0);\n+        }\n+        return 0;\n+    }();\n \n-        const ColumnArray::Offsets & offsets = array.getOffsets();\n+    const ColumnArray::Offsets & offsets = array.getOffsets();\n \n-        size_t size = offsets.size();\n-        size_t nested_size = array.getData().size();\n-        IColumn::Permutation permutation(nested_size);\n+    size_t size = offsets.size();\n+    size_t nested_size = array.getData().size();\n+    IColumn::Permutation permutation(nested_size);\n \n-        for (size_t i = 0; i < nested_size; ++i)\n-            permutation[i] = i;\n+    for (size_t i = 0; i < nested_size; ++i)\n+        permutation[i] = i;\n \n-        ColumnArray::Offset current_offset = 0;\n-        for (size_t i = 0; i < size; ++i)\n+    ColumnArray::Offset current_offset = 0;\n+    for (size_t i = 0; i < size; ++i)\n+    {\n+        auto next_offset = offsets[i];\n+        if constexpr (is_partial)\n         {\n-            auto next_offset = offsets[i];\n-            if constexpr (is_partial)\n+            if (limit)\n             {\n-                if (limit)\n-                {\n-                    const auto effective_limit = std::min<size_t>(limit, next_offset - current_offset);\n-                    ::partial_sort(&permutation[current_offset], &permutation[current_offset + effective_limit], &permutation[next_offset], Less(*mapped));\n-                }\n-                else\n-                    ::sort(&permutation[current_offset], &permutation[next_offset], Less(*mapped));\n+                const auto effective_limit = std::min<size_t>(limit, next_offset - current_offset);\n+                ::partial_sort(&permutation[current_offset], &permutation[current_offset + effective_limit], &permutation[next_offset], Less<positive>(*mapped));\n             }\n             else\n-                ::sort(&permutation[current_offset], &permutation[next_offset], Less(*mapped));\n-            current_offset = next_offset;\n+                ::sort(&permutation[current_offset], &permutation[next_offset], Less<positive>(*mapped));\n         }\n-\n-        return ColumnArray::create(array.getData().permute(permutation, 0), array.getOffsetsPtr());\n+        else\n+            ::sort(&permutation[current_offset], &permutation[next_offset], Less<positive>(*mapped));\n+        current_offset = next_offset;\n     }\n-};\n-\n-struct NameArraySort\n-{\n-    static constexpr auto name = \"arraySort\";\n-};\n-struct NameArrayReverseSort\n-{\n-    static constexpr auto name = \"arrayReverseSort\";\n-};\n-struct NameArrayPartialSort\n-{\n-    static constexpr auto name = \"arrayPartialSort\";\n-};\n-struct NameArrayPartialReverseSort\n-{\n-    static constexpr auto name = \"arrayPartialReverseSort\";\n-};\n \n-using FunctionArraySort = FunctionArrayMapped<ArraySortImpl<true, false>, NameArraySort>;\n-using FunctionArrayReverseSort = FunctionArrayMapped<ArraySortImpl<false, false>, NameArrayReverseSort>;\n-using FunctionArrayPartialSort = FunctionArrayMapped<ArraySortImpl<true, true>, NameArrayPartialSort>;\n-using FunctionArrayPartialReverseSort = FunctionArrayMapped<ArraySortImpl<false, true>, NameArrayPartialReverseSort>;\n+    return ColumnArray::create(array.getData().permute(permutation, 0), array.getOffsetsPtr());\n+}\n \n REGISTER_FUNCTION(ArraySort)\n {\ndiff --git a/src/Functions/array/arraySort.h b/src/Functions/array/arraySort.h\nnew file mode 100644\nindex 000000000000..a1ab376957d9\n--- /dev/null\n+++ b/src/Functions/array/arraySort.h\n@@ -0,0 +1,79 @@\n+#pragma once\n+\n+#include \"FunctionArrayMapped.h\"\n+#include <base/sort.h>\n+\n+namespace DB\n+{\n+\n+namespace ErrorCodes\n+{\n+    extern const int ILLEGAL_TYPE_OF_ARGUMENT;\n+    extern const int LOGICAL_ERROR;\n+}\n+\n+\n+/** Sort arrays, by values of its elements, or by values of corresponding elements of calculated expression (known as \"schwartzsort\").\n+  */\n+template <bool positive, bool is_partial>\n+struct ArraySortImpl\n+{\n+    static constexpr auto num_fixed_params = is_partial;\n+\n+    static bool needBoolean() { return false; }\n+    static bool needExpression() { return false; }\n+    static bool needOneArray() { return false; }\n+\n+    static DataTypePtr getReturnType(const DataTypePtr & /*expression_return*/, const DataTypePtr & array_element)\n+    {\n+        return std::make_shared<DataTypeArray>(array_element);\n+    }\n+\n+    static void checkArguments(\n+        const String & name,\n+        const ColumnWithTypeAndName * fixed_arguments)\n+        requires(num_fixed_params)\n+    {\n+        if (!fixed_arguments)\n+            throw Exception(\n+                ErrorCodes::LOGICAL_ERROR,\n+                \"Expected fixed arguments to get the limit for partial array sort\");\n+\n+        WhichDataType which(fixed_arguments[0].type.get());\n+        if (!which.isUInt() && !which.isInt())\n+            throw Exception(\n+                ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,\n+                \"Illegal type {} of limit argument of function {} (must be UInt or Int)\",\n+                fixed_arguments[0].type->getName(),\n+                name);\n+    }\n+\n+    static ColumnPtr execute(\n+        const ColumnArray & array,\n+        ColumnPtr mapped,\n+        const ColumnWithTypeAndName * fixed_arguments [[maybe_unused]] = nullptr);\n+};\n+\n+struct NameArraySort\n+{\n+    static constexpr auto name = \"arraySort\";\n+};\n+struct NameArrayReverseSort\n+{\n+    static constexpr auto name = \"arrayReverseSort\";\n+};\n+struct NameArrayPartialSort\n+{\n+    static constexpr auto name = \"arrayPartialSort\";\n+};\n+struct NameArrayPartialReverseSort\n+{\n+    static constexpr auto name = \"arrayPartialReverseSort\";\n+};\n+\n+using FunctionArraySort = FunctionArrayMapped<ArraySortImpl<true, false>, NameArraySort>;\n+using FunctionArrayReverseSort = FunctionArrayMapped<ArraySortImpl<false, false>, NameArrayReverseSort>;\n+using FunctionArrayPartialSort = FunctionArrayMapped<ArraySortImpl<true, true>, NameArrayPartialSort>;\n+using FunctionArrayPartialReverseSort = FunctionArrayMapped<ArraySortImpl<false, true>, NameArrayPartialReverseSort>;\n+\n+}\ndiff --git a/src/Functions/array/arraySplit.cpp b/src/Functions/array/arraySplit.cpp\nindex dd1cfc64c1b1..e68d779f67e6 100644\n--- a/src/Functions/array/arraySplit.cpp\n+++ b/src/Functions/array/arraySplit.cpp\n@@ -15,9 +15,6 @@ namespace ErrorCodes\n template <bool reverse>\n struct ArraySplitImpl\n {\n-    using column_type = ColumnArray;\n-    using data_type = DataTypeArray;\n-\n     static bool needBoolean() { return true; }\n     static bool needExpression() { return true; }\n     static bool needOneArray() { return false; }\ndiff --git a/src/Functions/identity.cpp b/src/Functions/identity.cpp\nindex 8a29eafca524..7174f1fd3188 100644\n--- a/src/Functions/identity.cpp\n+++ b/src/Functions/identity.cpp\n@@ -1,38 +1,8 @@\n-#include <Functions/IFunction.h>\n+#include <Functions/identity.h>\n #include <Functions/FunctionFactory.h>\n \n-\n namespace DB\n {\n-namespace\n-{\n-\n-class FunctionIdentity : public IFunction\n-{\n-public:\n-    static constexpr auto name = \"identity\";\n-    static FunctionPtr create(ContextPtr)\n-    {\n-        return std::make_shared<FunctionIdentity>();\n-    }\n-\n-    String getName() const override { return name; }\n-    size_t getNumberOfArguments() const override { return 1; }\n-    bool isSuitableForConstantFolding() const override { return false; }\n-    bool isSuitableForShortCircuitArgumentsExecution(const DataTypesWithConstInfo & /*arguments*/) const override { return false; }\n-\n-    DataTypePtr getReturnTypeImpl(const DataTypes & arguments) const override\n-    {\n-        return arguments.front();\n-    }\n-\n-    ColumnPtr executeImpl(const ColumnsWithTypeAndName & arguments, const DataTypePtr &, size_t /*input_rows_count*/) const override\n-    {\n-        return arguments.front().column;\n-    }\n-};\n-\n-}\n \n REGISTER_FUNCTION(Identity)\n {\ndiff --git a/src/Functions/identity.h b/src/Functions/identity.h\nnew file mode 100644\nindex 000000000000..efee95841f53\n--- /dev/null\n+++ b/src/Functions/identity.h\n@@ -0,0 +1,31 @@\n+#pragma once\n+#include <Functions/IFunction.h>\n+#include <Interpreters/Context_fwd.h>\n+\n+\n+namespace DB\n+{\n+\n+class FunctionIdentity : public IFunction\n+{\n+public:\n+    static constexpr auto name = \"identity\";\n+    static FunctionPtr create(ContextPtr) { return std::make_shared<FunctionIdentity>(); }\n+\n+    String getName() const override { return name; }\n+    size_t getNumberOfArguments() const override { return 1; }\n+    bool isSuitableForConstantFolding() const override { return false; }\n+    bool isSuitableForShortCircuitArgumentsExecution(const DataTypesWithConstInfo & /*arguments*/) const override { return false; }\n+\n+    DataTypePtr getReturnTypeImpl(const DataTypes & arguments) const override\n+    {\n+        return arguments.front();\n+    }\n+\n+    ColumnPtr executeImpl(const ColumnsWithTypeAndName & arguments, const DataTypePtr &, size_t /*input_rows_count*/) const override\n+    {\n+        return arguments.front().column;\n+    }\n+};\n+\n+}\ndiff --git a/src/Functions/map.cpp b/src/Functions/map.cpp\nindex 6b9d22591be6..c950a0491a5b 100644\n--- a/src/Functions/map.cpp\n+++ b/src/Functions/map.cpp\n@@ -2,22 +2,12 @@\n #include <Functions/FunctionFactory.h>\n #include <Functions/FunctionHelpers.h>\n #include <DataTypes/DataTypeMap.h>\n-#include <DataTypes/DataTypeTuple.h>\n #include <DataTypes/DataTypesNumber.h>\n-#include <DataTypes/DataTypeFixedString.h>\n-#include <Columns/ColumnMap.h>\n-#include <Columns/ColumnArray.h>\n-#include <Columns/ColumnString.h>\n-#include <Columns/ColumnsNumber.h>\n+#include <DataTypes/DataTypeArray.h>\n+#include <DataTypes/DataTypeTuple.h>\n #include <DataTypes/getLeastSupertype.h>\n+#include <Columns/ColumnMap.h>\n #include <Interpreters/castColumn.h>\n-#include <memory>\n-\n-#include <Common/assert_cast.h>\n-#include <Common/typeid_cast.h>\n-#include \"array/arrayIndex.h\"\n-#include \"Functions/like.h\"\n-#include \"Functions/FunctionsStringSearch.h\"\n #include <Common/HashTable/HashSet.h>\n \n \n@@ -239,372 +229,6 @@ class FunctionMapFromArrays : public IFunction\n     }\n };\n \n-struct NameMapContains { static constexpr auto name = \"mapContains\"; };\n-\n-class FunctionMapContains : public IFunction\n-{\n-public:\n-    static constexpr auto name = NameMapContains::name;\n-    static FunctionPtr create(ContextPtr) { return std::make_shared<FunctionMapContains>(); }\n-\n-    String getName() const override\n-    {\n-        return NameMapContains::name;\n-    }\n-\n-    size_t getNumberOfArguments() const override { return impl.getNumberOfArguments(); }\n-\n-    bool isSuitableForShortCircuitArgumentsExecution(const DataTypesWithConstInfo & arguments) const override\n-    {\n-        return impl.isSuitableForShortCircuitArgumentsExecution(arguments);\n-    }\n-\n-    DataTypePtr getReturnTypeImpl(const ColumnsWithTypeAndName & arguments) const override\n-    {\n-        return impl.getReturnTypeImpl(arguments);\n-    }\n-\n-    ColumnPtr executeImpl(const ColumnsWithTypeAndName & arguments, const DataTypePtr & result_type, size_t input_rows_count) const override\n-    {\n-        return impl.executeImpl(arguments, result_type, input_rows_count);\n-    }\n-\n-private:\n-    FunctionArrayIndex<HasAction, NameMapContains> impl;\n-};\n-\n-\n-class FunctionMapKeys : public IFunction\n-{\n-public:\n-    static constexpr auto name = \"mapKeys\";\n-    static FunctionPtr create(ContextPtr) { return std::make_shared<FunctionMapKeys>(); }\n-\n-    String getName() const override\n-    {\n-        return name;\n-    }\n-\n-    size_t getNumberOfArguments() const override { return 1; }\n-\n-    bool isSuitableForShortCircuitArgumentsExecution(const DataTypesWithConstInfo & /*arguments*/) const override { return true; }\n-\n-    DataTypePtr getReturnTypeImpl(const ColumnsWithTypeAndName & arguments) const override\n-    {\n-        if (arguments.size() != 1)\n-            throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH,\n-                \"Number of arguments for function {} doesn't match: passed {}, should be 1\",\n-                getName(), arguments.size());\n-\n-        const DataTypeMap * map_type = checkAndGetDataType<DataTypeMap>(arguments[0].type.get());\n-\n-        if (!map_type)\n-            throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT, \"First argument for function {} must be a map\", getName());\n-\n-        auto key_type = map_type->getKeyType();\n-\n-        return std::make_shared<DataTypeArray>(key_type);\n-    }\n-\n-    bool useDefaultImplementationForConstants() const override { return true; }\n-\n-    ColumnPtr executeImpl(const ColumnsWithTypeAndName & arguments, const DataTypePtr & /*result_type*/, size_t /*input_rows_count*/) const override\n-    {\n-        const ColumnMap * col_map = typeid_cast<const ColumnMap *>(arguments[0].column.get());\n-        if (!col_map)\n-            return nullptr;\n-\n-        const auto & nested_column = col_map->getNestedColumn();\n-        const auto & keys_data = col_map->getNestedData().getColumn(0);\n-\n-        return ColumnArray::create(keys_data.getPtr(), nested_column.getOffsetsPtr());\n-    }\n-};\n-\n-\n-class FunctionMapValues : public IFunction\n-{\n-public:\n-    static constexpr auto name = \"mapValues\";\n-    static FunctionPtr create(ContextPtr) { return std::make_shared<FunctionMapValues>(); }\n-\n-    String getName() const override\n-    {\n-        return name;\n-    }\n-\n-    size_t getNumberOfArguments() const override { return 1; }\n-\n-    bool isSuitableForShortCircuitArgumentsExecution(const DataTypesWithConstInfo & /*arguments*/) const override { return true; }\n-\n-    DataTypePtr getReturnTypeImpl(const ColumnsWithTypeAndName & arguments) const override\n-    {\n-        if (arguments.size() != 1)\n-            throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH,\n-                \"Number of arguments for function {} doesn't match: passed {}, should be 1\",\n-                getName(), arguments.size());\n-\n-        const DataTypeMap * map_type = checkAndGetDataType<DataTypeMap>(arguments[0].type.get());\n-\n-        if (!map_type)\n-            throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT, \"First argument for function {} must be a map\", getName());\n-\n-        auto value_type = map_type->getValueType();\n-\n-        return std::make_shared<DataTypeArray>(value_type);\n-    }\n-\n-    bool useDefaultImplementationForConstants() const override { return true; }\n-\n-    ColumnPtr executeImpl(const ColumnsWithTypeAndName & arguments, const DataTypePtr & /*result_type*/, size_t /*input_rows_count*/) const override\n-    {\n-        const ColumnMap * col_map = typeid_cast<const ColumnMap *>(arguments[0].column.get());\n-        if (!col_map)\n-            return nullptr;\n-\n-        const auto & nested_column = col_map->getNestedColumn();\n-        const auto & values_data = col_map->getNestedData().getColumn(1);\n-\n-        return ColumnArray::create(values_data.getPtr(), nested_column.getOffsetsPtr());\n-    }\n-};\n-\n-class FunctionMapContainsKeyLike : public IFunction\n-{\n-public:\n-    static constexpr auto name = \"mapContainsKeyLike\";\n-    static FunctionPtr create(ContextPtr) { return std::make_shared<FunctionMapContainsKeyLike>(); }\n-    String getName() const override { return name; }\n-    bool isSuitableForShortCircuitArgumentsExecution(const DataTypesWithConstInfo & /*info*/) const override { return true; }\n-\n-    ColumnPtr executeImpl(const ColumnsWithTypeAndName & arguments, const DataTypePtr & result_type, size_t input_rows_count) const override\n-    {\n-        bool is_const = isColumnConst(*arguments[0].column);\n-        const ColumnMap * col_map = is_const ? checkAndGetColumnConstData<ColumnMap>(arguments[0].column.get())\n-                                             : checkAndGetColumn<ColumnMap>(arguments[0].column.get());\n-        const DataTypeMap * map_type = checkAndGetDataType<DataTypeMap>(arguments[0].type.get());\n-        if (!col_map || !map_type)\n-            throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT, \"First argument for function {} must be a map\", getName());\n-\n-        auto col_res = ColumnVector<UInt8>::create();\n-        typename ColumnVector<UInt8>::Container & vec_res = col_res->getData();\n-\n-        if (input_rows_count == 0)\n-            return col_res;\n-\n-        vec_res.resize(input_rows_count);\n-\n-        const auto & column_array = typeid_cast<const ColumnArray &>(col_map->getNestedColumn());\n-        const auto & column_tuple = typeid_cast<const ColumnTuple &>(column_array.getData());\n-\n-        const ColumnString * column_string = checkAndGetColumn<ColumnString>(column_tuple.getColumn(0));\n-        const ColumnFixedString * column_fixed_string = checkAndGetColumn<ColumnFixedString>(column_tuple.getColumn(0));\n-\n-        FunctionLike func_like;\n-\n-        for (size_t row = 0; row < input_rows_count; ++row)\n-        {\n-            size_t element_start_row = row != 0 ? column_array.getOffsets()[row-1] : 0;\n-            size_t elem_size = column_array.getOffsets()[row]- element_start_row;\n-\n-            ColumnPtr sub_map_column;\n-            DataTypePtr data_type;\n-\n-            //The keys of one row map will be processed as a single ColumnString\n-            if (column_string)\n-            {\n-               sub_map_column = column_string->cut(element_start_row, elem_size);\n-               data_type = std::make_shared<DataTypeString>();\n-            }\n-            else\n-            {\n-               sub_map_column = column_fixed_string->cut(element_start_row, elem_size);\n-               data_type = std::make_shared<DataTypeFixedString>(checkAndGetColumn<ColumnFixedString>(sub_map_column.get())->getN());\n-            }\n-\n-            size_t col_key_size = sub_map_column->size();\n-            auto column = is_const ? ColumnConst::create(std::move(sub_map_column), std::move(col_key_size)) : std::move(sub_map_column);\n-\n-            ColumnsWithTypeAndName new_arguments =\n-                {\n-                    {\n-                        column,\n-                        data_type,\n-                        \"\"\n-                    },\n-                    arguments[1]\n-                };\n-\n-            auto res = func_like.executeImpl(new_arguments, result_type, input_rows_count);\n-            const auto & container = checkAndGetColumn<ColumnUInt8>(res.get())->getData();\n-\n-            const auto it = std::find_if(container.begin(), container.end(), [](int element){ return element == 1; });  // NOLINT\n-            vec_res[row] = it == container.end() ? 0 : 1;\n-        }\n-\n-        return col_res;\n-    }\n-\n-    DataTypePtr getReturnTypeImpl(const ColumnsWithTypeAndName & arguments) const override\n-    {\n-        if (arguments.size() != 2)\n-            throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH,\n-                            \"Number of arguments for function {} doesn't match: passed {}, should be 2\",\n-                            getName(), arguments.size());\n-\n-        const DataTypeMap * map_type = checkAndGetDataType<DataTypeMap>(arguments[0].type.get());\n-        const DataTypeString * pattern_type = checkAndGetDataType<DataTypeString>(arguments[1].type.get());\n-\n-        if (!map_type)\n-            throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT, \"First argument for function {} must be a Map\", getName());\n-        if (!pattern_type)\n-            throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT, \"Second argument for function {} must be String\", getName());\n-\n-        if (!isStringOrFixedString(map_type->getKeyType()))\n-            throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT, \"Key type of map for function {} must be `String` or `FixedString`\", getName());\n-\n-        return std::make_shared<DataTypeUInt8>();\n-    }\n-\n-    size_t getNumberOfArguments() const override { return 2; }\n-\n-    bool useDefaultImplementationForConstants() const override { return true; }\n-};\n-\n-class FunctionExtractKeyLike : public IFunction\n-{\n-public:\n-    static constexpr auto name = \"mapExtractKeyLike\";\n-    static FunctionPtr create(ContextPtr) { return std::make_shared<FunctionExtractKeyLike>(); }\n-\n-    String getName() const override\n-    {\n-        return name;\n-    }\n-\n-    bool isSuitableForShortCircuitArgumentsExecution(const DataTypesWithConstInfo & /*info*/) const override { return true; }\n-\n-    size_t getNumberOfArguments() const override { return 2; }\n-\n-    DataTypePtr getReturnTypeImpl(const ColumnsWithTypeAndName & arguments) const override\n-    {\n-        if (arguments.size() != 2)\n-            throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH,\n-                \"Number of arguments for function {} doesn't match: passed {}, should be 2\",\n-                getName(), arguments.size());\n-\n-\n-        const DataTypeMap * map_type = checkAndGetDataType<DataTypeMap>(arguments[0].type.get());\n-\n-        if (!map_type)\n-            throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT, \"First argument for function {} must be a map\", getName());\n-\n-\n-        auto key_type = map_type->getKeyType();\n-\n-        WhichDataType which(key_type);\n-\n-        if (!which.isStringOrFixedString())\n-            throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT, \"Function {}only support the map with String or FixedString key\",\n-                getName());\n-\n-        if (!isStringOrFixedString(arguments[1].type))\n-            throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT, \"Second argument passed to function {} must be String or FixedString\", getName());\n-\n-        return std::make_shared<DataTypeMap>(map_type->getKeyType(), map_type->getValueType());\n-    }\n-\n-    bool useDefaultImplementationForConstants() const override { return true; }\n-\n-    ColumnPtr executeImpl(const ColumnsWithTypeAndName & arguments, const DataTypePtr & result_type, size_t input_rows_count) const override\n-    {\n-        bool is_const = isColumnConst(*arguments[0].column);\n-        const ColumnMap * col_map = typeid_cast<const ColumnMap *>(arguments[0].column.get());\n-\n-        //It may not be necessary to check this condition, cause it will be checked in getReturnTypeImpl function\n-        if (!col_map)\n-            return nullptr;\n-\n-        const DataTypeMap * map_type = checkAndGetDataType<DataTypeMap>(arguments[0].type.get());\n-        auto key_type = map_type->getKeyType();\n-        auto value_type = map_type->getValueType();\n-\n-        const auto & nested_column = col_map->getNestedColumn();\n-        const auto & keys_column = col_map->getNestedData().getColumn(0);\n-        const auto & values_column = col_map->getNestedData().getColumn(1);\n-        const ColumnString * keys_string_column = checkAndGetColumn<ColumnString>(keys_column);\n-        const ColumnFixedString * keys_fixed_string_column = checkAndGetColumn<ColumnFixedString>(keys_column);\n-\n-        FunctionLike func_like;\n-\n-        //create result data\n-        MutableColumnPtr keys_data = key_type->createColumn();\n-        MutableColumnPtr values_data = value_type->createColumn();\n-        MutableColumnPtr offsets = DataTypeNumber<IColumn::Offset>().createColumn();\n-\n-        IColumn::Offset current_offset = 0;\n-\n-        for (size_t row = 0; row < input_rows_count; ++row)\n-        {\n-            size_t element_start_row = row != 0 ? nested_column.getOffsets()[row-1] : 0;\n-            size_t element_size = nested_column.getOffsets()[row]- element_start_row;\n-\n-            ColumnsWithTypeAndName new_arguments;\n-            ColumnPtr sub_map_column;\n-            DataTypePtr data_type;\n-\n-            if (keys_string_column)\n-            {\n-                sub_map_column = keys_string_column->cut(element_start_row, element_size);\n-                data_type = std::make_shared<DataTypeString>();\n-            }\n-            else\n-            {\n-                sub_map_column = keys_fixed_string_column->cut(element_start_row, element_size);\n-                data_type =std::make_shared<DataTypeFixedString>(checkAndGetColumn<ColumnFixedString>(sub_map_column.get())->getN());\n-            }\n-\n-            size_t col_key_size = sub_map_column->size();\n-            auto column = is_const? ColumnConst::create(std::move(sub_map_column), std::move(col_key_size)) : std::move(sub_map_column);\n-\n-            new_arguments = {\n-                    {\n-                        column,\n-                        data_type,\n-                        \"\"\n-                        },\n-                    arguments[1]\n-                    };\n-\n-            auto res = func_like.executeImpl(new_arguments, result_type, input_rows_count);\n-            const auto & container = checkAndGetColumn<ColumnUInt8>(res.get())->getData();\n-\n-            for (size_t row_num = 0; row_num < element_size; ++row_num)\n-            {\n-                if (container[row_num] == 1)\n-                {\n-                    auto key_ref = keys_string_column ?\n-                                   keys_string_column->getDataAt(element_start_row + row_num) :\n-                                   keys_fixed_string_column->getDataAt(element_start_row + row_num);\n-                    auto value_ref = values_column.getDataAt(element_start_row + row_num);\n-\n-                    keys_data->insertData(key_ref.data, key_ref.size);\n-                    values_data->insertData(value_ref.data, value_ref.size);\n-                    current_offset += 1;\n-                }\n-            }\n-\n-            offsets->insert(current_offset);\n-        }\n-\n-        auto result_nested_column = ColumnArray::create(\n-            ColumnTuple::create(Columns{std::move(keys_data), std::move(values_data)}),\n-            std::move(offsets));\n-\n-        return ColumnMap::create(result_nested_column);\n-    }\n-};\n-\n class FunctionMapUpdate : public IFunction\n {\n public:\n@@ -747,15 +371,9 @@ class FunctionMapUpdate : public IFunction\n REGISTER_FUNCTION(Map)\n {\n     factory.registerFunction<FunctionMap>();\n-    factory.registerFunction<FunctionMapContains>();\n-    factory.registerFunction<FunctionMapKeys>();\n-    factory.registerFunction<FunctionMapValues>();\n-    factory.registerFunction<FunctionMapContainsKeyLike>();\n-    factory.registerFunction<FunctionExtractKeyLike>();\n     factory.registerFunction<FunctionMapUpdate>();\n     factory.registerFunction<FunctionMapFromArrays>();\n     factory.registerAlias(\"MAP_FROM_ARRAYS\", \"mapFromArrays\");\n-\n }\n \n }\ndiff --git a/src/Functions/mapFilter.cpp b/src/Functions/mapFilter.cpp\ndeleted file mode 100644\nindex 038e3bb3ce01..000000000000\n--- a/src/Functions/mapFilter.cpp\n+++ /dev/null\n@@ -1,144 +0,0 @@\n-#include <Columns/ColumnMap.h>\n-#include <Columns/ColumnTuple.h>\n-#include <Columns/ColumnsNumber.h>\n-#include <DataTypes/DataTypeTuple.h>\n-#include <Functions/FunctionFactory.h>\n-#include <Functions/FunctionHelpers.h>\n-#include <Functions/array/FunctionArrayMapped.h>\n-\n-\n-namespace DB\n-{\n-\n-namespace ErrorCodes\n-{\n-    extern const int ILLEGAL_COLUMN;\n-    extern const int ILLEGAL_TYPE_OF_ARGUMENT;\n-    extern const int NUMBER_OF_ARGUMENTS_DOESNT_MATCH;\n-}\n-\n-/** Higher-order functions for map.\n-  * These functions optionally apply a map by lambda function,\n-  *  and return some result based on that transformation.\n-  */\n-\n-\n-/** mapFilter((k, v) -> predicate, map) - leave in the map only the kv elements for which the expression is true.\n-  */\n-struct MapFilterImpl\n-{\n-    using data_type = DataTypeMap;\n-    using column_type = ColumnMap;\n-\n-    static constexpr auto name = \"mapFilter\";\n-\n-    static bool needBoolean() { return true; }\n-    static bool needExpression() { return true; }\n-    static bool needOneArray() { return true; }\n-\n-    static DataTypePtr getReturnType(const DataTypePtr & /*expression_return*/, const DataTypes & elems)\n-    {\n-        return std::make_shared<DataTypeMap>(elems);\n-    }\n-\n-    /// If there are several arrays, the first one is passed here.\n-    static ColumnPtr execute(const ColumnMap & map_column, ColumnPtr mapped)\n-    {\n-        const ColumnUInt8 * column_filter = typeid_cast<const ColumnUInt8 *>(&*mapped);\n-\n-        if (!column_filter)\n-        {\n-            const auto * column_filter_const = checkAndGetColumnConst<ColumnUInt8>(&*mapped);\n-\n-            if (!column_filter_const)\n-                throw Exception(ErrorCodes::ILLEGAL_COLUMN, \"Unexpected type of filter column\");\n-\n-            if (column_filter_const->getValue<UInt8>())\n-                return map_column.clone();\n-            else\n-            {\n-                const auto * column_array = typeid_cast<const ColumnArray *>(map_column.getNestedColumnPtr().get());\n-                const auto * column_tuple = typeid_cast<const ColumnTuple *>(column_array->getDataPtr().get());\n-                ColumnPtr keys = column_tuple->getColumnPtr(0)->cloneEmpty();\n-                ColumnPtr values = column_tuple->getColumnPtr(1)->cloneEmpty();\n-                return ColumnMap::create(keys, values, ColumnArray::ColumnOffsets::create(map_column.size(), 0));\n-            }\n-        }\n-\n-        const IColumn::Filter & filter = column_filter->getData();\n-        ColumnPtr filtered = map_column.getNestedColumn().getData().filter(filter, -1);\n-\n-        const IColumn::Offsets & in_offsets = map_column.getNestedColumn().getOffsets();\n-        auto column_offsets = ColumnArray::ColumnOffsets::create(in_offsets.size());\n-        IColumn::Offsets & out_offsets = column_offsets->getData();\n-\n-        size_t in_pos = 0;\n-        size_t out_pos = 0;\n-        for (size_t i = 0; i < in_offsets.size(); ++i)\n-        {\n-            for (; in_pos < in_offsets[i]; ++in_pos)\n-            {\n-                if (filter[in_pos])\n-                    ++out_pos;\n-            }\n-            out_offsets[i] = out_pos;\n-        }\n-\n-        return ColumnMap::create(ColumnArray::create(filtered, std::move(column_offsets)));\n-    }\n-};\n-\n-\n-/** mapApply((k,v) -> expression, map) - apply the expression to the map.\n-  */\n-struct MapApplyImpl\n-{\n-    using data_type = DataTypeMap;\n-    using column_type = ColumnMap;\n-\n-    static constexpr auto name = \"mapApply\";\n-\n-    /// true if the expression (for an overload of f(expression, maps)) or a map (for f(map)) should be boolean.\n-    static bool needBoolean() { return false; }\n-    static bool needExpression() { return true; }\n-    static bool needOneArray() { return true; }\n-\n-    static DataTypePtr getReturnType(const DataTypePtr & expression_return, const DataTypes & /*elems*/)\n-    {\n-        const auto * tuple_types = typeid_cast<const DataTypeTuple *>(expression_return.get());\n-        if (!tuple_types)\n-            throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,\n-                            \"Expected return type is tuple, got {}\", expression_return->getName());\n-        if (tuple_types->getElements().size() != 2)\n-            throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH,\n-                            \"Expected 2 columns as map's key and value, but found {}\", tuple_types->getElements().size());\n-\n-        return std::make_shared<DataTypeMap>(tuple_types->getElements());\n-    }\n-\n-    static ColumnPtr execute(const ColumnMap & map, ColumnPtr mapped)\n-    {\n-        const auto * column_tuple = checkAndGetColumn<ColumnTuple>(mapped.get());\n-        if (!column_tuple)\n-        {\n-            const ColumnConst * column_const_tuple = checkAndGetColumnConst<ColumnTuple>(mapped.get());\n-            if (!column_const_tuple)\n-                throw Exception(ErrorCodes::ILLEGAL_COLUMN, \"Expected tuple column, found {}\", mapped->getName());\n-            auto cols = convertConstTupleToConstantElements(*column_const_tuple);\n-            return ColumnMap::create(cols[0]->convertToFullColumnIfConst(), cols[1]->convertToFullColumnIfConst(), map.getNestedColumn().getOffsetsPtr());\n-        }\n-\n-        return ColumnMap::create(column_tuple->getColumnPtr(0), column_tuple->getColumnPtr(1),\n-            map.getNestedColumn().getOffsetsPtr());\n-    }\n-};\n-\n-REGISTER_FUNCTION(MapApply)\n-{\n-    factory.registerFunction<FunctionArrayMapped<MapFilterImpl, MapFilterImpl>>();\n-    factory.registerFunction<FunctionArrayMapped<MapApplyImpl, MapApplyImpl>>();\n-}\n-\n-}\n-\n-\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02030_function_mapContainsKeyLike.reference b/tests/queries/0_stateless/02030_function_mapContainsKeyLike.reference\nindex eb8bc83384e9..1f8f2bf0d0c2 100644\n--- a/tests/queries/0_stateless/02030_function_mapContainsKeyLike.reference\n+++ b/tests/queries/0_stateless/02030_function_mapContainsKeyLike.reference\n@@ -4,3 +4,11 @@\n 4\t{'4-K1':'4-V1','4-K2':'4-V2'}\n 5\t{'5-K1':'5-V1','5-K2':'5-V2'}\n 6\t{'6-K1':'6-V1','6-K2':'6-V2'}\n+1\n+1\n+1\n+1\n+1\n+0\n+{'aa':NULL}\n+{}\ndiff --git a/tests/queries/0_stateless/02030_function_mapContainsKeyLike.sql b/tests/queries/0_stateless/02030_function_mapContainsKeyLike.sql\nindex 7d9722b4c906..b04c5945a081 100644\n--- a/tests/queries/0_stateless/02030_function_mapContainsKeyLike.sql\n+++ b/tests/queries/0_stateless/02030_function_mapContainsKeyLike.sql\n@@ -10,3 +10,14 @@ SELECT id, map FROM map_containsKeyLike_test WHERE mapContainsKeyLike(map, '1-%'\n SELECT id, map FROM map_containsKeyLike_test WHERE mapContainsKeyLike(map, '3-%') = 0 order by id;\n \n DROP TABLE map_containsKeyLike_test;\n+\n+SELECT mapContainsKeyLike(map('aa', 1, 'bb', 2), 'a%');\n+SELECT mapContainsKeyLike(map('aa', 1, 'bb', 2), materialize('a%'));\n+SELECT mapContainsKeyLike(materialize(map('aa', 1, 'bb', 2)), 'a%');\n+SELECT mapContainsKeyLike(materialize(map('aa', 1, 'bb', 2)), materialize('a%'));\n+\n+SELECT mapContainsKeyLike(map('aa', NULL, 'bb', NULL), 'a%');\n+SELECT mapContainsKeyLike(map('aa', NULL, 'bb', NULL), 'q%');\n+\n+SELECT mapExtractKeyLike(map('aa', NULL, 'bb', NULL), 'a%');\n+SELECT mapExtractKeyLike(map('aa', NULL, 'bb', NULL), 'q%');\ndiff --git a/tests/queries/0_stateless/02111_function_mapExtractKeyLike.reference b/tests/queries/0_stateless/02111_function_mapExtractKeyLike.reference\nindex 45edbc24c75e..c6bd4c31538f 100644\n--- a/tests/queries/0_stateless/02111_function_mapExtractKeyLike.reference\n+++ b/tests/queries/0_stateless/02111_function_mapExtractKeyLike.reference\n@@ -21,3 +21,7 @@ The results of query: SELECT id, mapExtractKeyLike(map, \\'5-K1\\') FROM map_extra\n 4\t{}\n 5\t{'5-K1':'5-V1'}\n 6\t{}\n+{'aa':1}\n+{'aa':1}\n+{'aa':1}\n+{'aa':1}\ndiff --git a/tests/queries/0_stateless/02111_function_mapExtractKeyLike.sql b/tests/queries/0_stateless/02111_function_mapExtractKeyLike.sql\nindex 31f53642b74f..a17b6b745950 100644\n--- a/tests/queries/0_stateless/02111_function_mapExtractKeyLike.sql\n+++ b/tests/queries/0_stateless/02111_function_mapExtractKeyLike.sql\n@@ -7,7 +7,7 @@ INSERT INTO map_extractKeyLike_test VALUES (3, {'P1-K1':'3-V1','P2-K2':'3-V2'}),\n INSERT INTO map_extractKeyLike_test VALUES (5, {'5-K1':'5-V1','5-K2':'5-V2'}),(6, {'P3-K1':'6-V1','P4-K2':'6-V2'});\n \n SELECT 'The data of table:';\n-SELECT * FROM map_extractKeyLike_test ORDER BY id; \n+SELECT * FROM map_extractKeyLike_test ORDER BY id;\n \n SELECT '';\n \n@@ -20,3 +20,8 @@ SELECT 'The results of query: SELECT id, mapExtractKeyLike(map, \\'5-K1\\') FROM m\n SELECT id, mapExtractKeyLike(map, '5-K1') FROM map_extractKeyLike_test ORDER BY id;\n \n DROP TABLE map_extractKeyLike_test;\n+\n+SELECT mapExtractKeyLike(map('aa', 1, 'bb', 2), 'a%');\n+SELECT mapExtractKeyLike(map('aa', 1, 'bb', 2), materialize('a%'));\n+SELECT mapExtractKeyLike(materialize(map('aa', 1, 'bb', 2)), 'a%');\n+SELECT mapExtractKeyLike(materialize(map('aa', 1, 'bb', 2)), materialize('a%'));\ndiff --git a/tests/queries/0_stateless/02169_map_functions.reference b/tests/queries/0_stateless/02169_map_functions.reference\nindex ed5394726c03..bec2eaec5958 100644\n--- a/tests/queries/0_stateless/02169_map_functions.reference\n+++ b/tests/queries/0_stateless/02169_map_functions.reference\n@@ -26,6 +26,55 @@\n {}\n {}\n {}\n+{'key3':100,'key2':101,'key4':102,'key5':500,'key6':600}\n+{'key3':101,'key2':102,'key4':103,'key5':500,'key6':600}\n+{'key3':102,'key2':103,'key4':104,'key5':500,'key6':600}\n+{'key3':103,'key2':104,'key4':105,'key5':500,'key6':600}\n+{'key1':1111,'key2':2222,'key5':500,'key6':600}\n+{'key1':1112,'key2':2224,'key5':500,'key6':600}\n+{'key1':1113,'key2':2226,'key5':500,'key6':600}\n+{'key3':100,'key2':101,'key4':102,'key5':500,'key6':600}\n+{'key3':101,'key2':102,'key4':103,'key5':500,'key6':600}\n+{'key3':102,'key2':103,'key4':104,'key5':500,'key6':600}\n+{'key3':103,'key2':104,'key4':105,'key5':500,'key6':600}\n+{'key1':1111,'key2':2222,'key5':500,'key6':600}\n+{'key1':1112,'key2':2224,'key5':500,'key6':600}\n+{'key1':1113,'key2':2226,'key5':500,'key6':600}\n+1\n+1\n+1\n+1\n+0\n+0\n+0\n+1\n+1\n+1\n+1\n+0\n+0\n+0\n+{'key2':101,'key3':100,'key4':102}\n+{'key2':102,'key3':101,'key4':103}\n+{'key2':103,'key3':102,'key4':104}\n+{'key2':104,'key3':103,'key4':105}\n+{'key1':1111,'key2':2222}\n+{'key1':1112,'key2':2224}\n+{'key1':1113,'key2':2226}\n+{'key3':100,'key2':101,'key4':102}\n+{'key3':101,'key2':102,'key4':103}\n+{'key3':102,'key2':103,'key4':104}\n+{'key3':103,'key2':104,'key4':105}\n+{'key1':1111,'key2':2222}\n+{'key1':1112,'key2':2224}\n+{'key1':1113,'key2':2226}\n+{'key2':101,'key3':100,'key4':102}\n+{'key2':102,'key3':101,'key4':103}\n+{'key2':103,'key3':102,'key4':104}\n+{'key2':104,'key3':103,'key4':105}\n+{'key1':1111,'key2':2222}\n+{'key1':1112,'key2':2224}\n+{'key1':1113,'key2':2226}\n {3:2,1:0,2:0}\n {1:2,2:3}\n {1:2,2:3}\ndiff --git a/tests/queries/0_stateless/02169_map_functions.sql b/tests/queries/0_stateless/02169_map_functions.sql\nindex 1f43647c5091..27ceb2520220 100644\n--- a/tests/queries/0_stateless/02169_map_functions.sql\n+++ b/tests/queries/0_stateless/02169_map_functions.sql\n@@ -7,7 +7,17 @@ SELECT mapFilter((k, v) -> k like '%3' and v > 102, col) FROM table_map ORDER BY\n SELECT col, mapFilter((k, v) -> ((v % 10) > 1), col) FROM table_map ORDER BY id ASC;\n SELECT mapApply((k, v) -> (k, v + 1), col) FROM table_map ORDER BY id;\n SELECT mapFilter((k, v) -> 0, col) from table_map;\n-SELECT mapApply((k, v) -> tuple(v + 9223372036854775806), col) FROM table_map; -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }\n+SELECT mapApply((k, v) -> tuple(v + 9223372036854775806), col) FROM table_map; -- { serverError BAD_ARGUMENTS }\n+\n+SELECT mapConcat(col, map('key5', 500), map('key6', 600)) FROM table_map ORDER BY id;\n+SELECT mapConcat(col, materialize(map('key5', 500)), map('key6', 600)) FROM table_map ORDER BY id;\n+\n+SELECT mapExists((k, v) -> k LIKE '%3', col) FROM table_map ORDER BY id;\n+SELECT mapExists((k, v) -> k LIKE '%2' AND v < 1000, col) FROM table_map ORDER BY id;\n+\n+SELECT mapSort(col) FROM table_map ORDER BY id;\n+SELECT mapSort((k, v) -> v, col) FROM table_map ORDER BY id;\n+SELECT mapPartialSort((k, v) -> k, 2, col) FROM table_map ORDER BY id;\n \n SELECT mapUpdate(map(1, 3, 3, 2), map(1, 0, 2, 0));\n SELECT mapApply((x, y) -> (x, x + 1), map(1, 0, 2, 0));\n@@ -35,22 +45,25 @@ WITH (range(0, number % 10), range(0, number % 10))::Map(UInt64, UInt64) AS m1,\n SELECT DISTINCT mapUpdate(m1, m2) FROM numbers (100000);\n \n SELECT mapApply(); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }\n-SELECT mapApply((x, y) -> (x), map(1, 0, 2, 0)); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\n-SELECT mapApply((x, y) -> ('x'), map(1, 0, 2, 0)); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\n-SELECT mapApply((x) -> (x, x), map(1, 0, 2, 0)); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\n-SELECT mapApply((x, y) -> (x, 1, 2), map(1, 0, 2, 0)); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }\n-SELECT mapApply((x, y) -> (x, x + 1)); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }\n+SELECT mapApply((x, y) -> (x), map(1, 0, 2, 0)); -- { serverError BAD_ARGUMENTS }\n+SELECT mapApply((x, y) -> ('x'), map(1, 0, 2, 0)); -- { serverError BAD_ARGUMENTS }\n+SELECT mapApply((x) -> (x, x), map(1, 0, 2, 0)); -- { serverError BAD_ARGUMENTS }\n+SELECT mapApply((x, y) -> (x, 1, 2), map(1, 0, 2, 0)); -- { serverError BAD_ARGUMENTS }\n+SELECT mapApply((x, y) -> (x, x + 1)); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\n SELECT mapApply(map(1, 0, 2, 0), (x, y) -> (x, x + 1)); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\n-SELECT mapApply((x, y) -> (x, x+1), map(1, 0, 2, 0), map(1, 0, 2, 0)); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }\n+SELECT mapApply((x, y) -> (x, x+1), map(1, 0, 2, 0), map(1, 0, 2, 0)); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\n \n SELECT mapFilter(); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }\n SELECT mapFilter((x, y) -> (toInt32(x)), map(1, 0, 2, 0)); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\n SELECT mapFilter((x, y) -> ('x'), map(1, 0, 2, 0)); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\n SELECT mapFilter((x) -> (x, x), map(1, 0, 2, 0)); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\n SELECT mapFilter((x, y) -> (x, 1, 2), map(1, 0, 2, 0)); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\n-SELECT mapFilter((x, y) -> (x, x + 1)); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }\n+SELECT mapFilter((x, y) -> (x, x + 1)); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\n SELECT mapFilter(map(1, 0, 2, 0), (x, y) -> (x > 0)); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\n-SELECT mapFilter((x, y) -> (x, x + 1), map(1, 0, 2, 0), map(1, 0, 2, 0)); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }\n+SELECT mapFilter((x, y) -> (x, x + 1), map(1, 0, 2, 0), map(1, 0, 2, 0)); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\n+\n+SELECT mapConcat([1, 2], map(1, 2)); -- { serverError NO_COMMON_TYPE }\n+SELECT mapSort(map(1, 2), map(3, 4)); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\n \n SELECT mapUpdate(); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }\n SELECT mapUpdate(map(1, 3, 3, 2), map(1, 0, 2, 0),  map(1, 0, 2, 0)); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }\ndiff --git a/tests/queries/0_stateless/02179_map_cast_to_array.reference b/tests/queries/0_stateless/02179_map_cast_to_array.reference\nindex c1870e78bb77..81bb9fba537d 100644\n--- a/tests/queries/0_stateless/02179_map_cast_to_array.reference\n+++ b/tests/queries/0_stateless/02179_map_cast_to_array.reference\n@@ -6,3 +6,4 @@\n {1:{1:'1234'}}\t[(1,{1:1234})]\t[(1,{1:1234})]\n {1:{1:'1234'}}\t[(1,[(1,'1234')])]\t[(1,[(1,'1234')])]\n {1:{1:'1234'}}\t[(1,[(1,1234)])]\t[(1,[(1,1234)])]\n+[(1,'val1'),(2,'val2')]\tArray(Tuple(k UInt32, v String))\ndiff --git a/tests/queries/0_stateless/02179_map_cast_to_array.sql b/tests/queries/0_stateless/02179_map_cast_to_array.sql\nindex b1320d7a43c0..25b090c10b7f 100644\n--- a/tests/queries/0_stateless/02179_map_cast_to_array.sql\n+++ b/tests/queries/0_stateless/02179_map_cast_to_array.sql\n@@ -24,3 +24,6 @@ SELECT value, cast(value, type), cast(materialize(value), type);\n \n WITH map(1, map(1, '1234')) as value, 'Array(Tuple(UInt64, Array(Tuple(UInt64, UInt64))))' AS type\n SELECT value, cast(value, type), cast(materialize(value), type);\n+\n+WITH map(1, 'val1', 2, 'val2') AS map\n+SELECT CAST(map, 'Array(Tuple(k UInt32, v String))') AS c, toTypeName(c);\ndiff --git a/tests/queries/0_stateless/02415_all_new_functions_must_be_documented.reference b/tests/queries/0_stateless/02415_all_new_functions_must_be_documented.reference\nindex 4ff8c2d3af1a..eb574c4e4f58 100644\n--- a/tests/queries/0_stateless/02415_all_new_functions_must_be_documented.reference\n+++ b/tests/queries/0_stateless/02415_all_new_functions_must_be_documented.reference\n@@ -417,17 +417,10 @@ makeDateTime\n makeDateTime64\n map\n mapAdd\n-mapApply\n-mapContains\n-mapContainsKeyLike\n-mapExtractKeyLike\n-mapFilter\n mapFromArrays\n-mapKeys\n mapPopulateSeries\n mapSubtract\n mapUpdate\n-mapValues\n match\n materialize\n max2\ndiff --git a/tests/queries/0_stateless/02706_array_map_tuples.reference b/tests/queries/0_stateless/02706_array_map_tuples.reference\nnew file mode 100644\nindex 000000000000..a44843f1a35f\n--- /dev/null\n+++ b/tests/queries/0_stateless/02706_array_map_tuples.reference\n@@ -0,0 +1,3 @@\n+[(2,1)]\n+[1]\n+[(3,2)]\ndiff --git a/tests/queries/0_stateless/02706_array_map_tuples.sql b/tests/queries/0_stateless/02706_array_map_tuples.sql\nnew file mode 100644\nindex 000000000000..205e15c7de2f\n--- /dev/null\n+++ b/tests/queries/0_stateless/02706_array_map_tuples.sql\n@@ -0,0 +1,6 @@\n+WITH [(1, 2)] AS arr1 SELECT arrayMap((x, y) -> (y, x), arr1);\n+WITH [(1, 2)] AS arr1 SELECT arrayMap(x -> x.1, arr1);\n+WITH [(1, 2)] AS arr1, [(3, 4)] AS arr2 SELECT arrayMap((x, y) -> (y.1, x.2), arr1, arr2);\n+\n+WITH [(1, 2)] AS arr1 SELECT arrayMap((x, y, z) -> (y, x, z), arr1); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\n+WITH [1, 2] AS arr1 SELECT arrayMap((x, y) -> (y, x), arr1); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\n",
  "problem_statement": "Better map and array (array* lambda functions) support\n**Use case**\r\n\r\n> A clear and concise description of what is the intended usage scenario is.\r\n\r\n**Describe the solution you'd like**\r\n\r\nAbility to use map in array* functions.\r\n\r\n```\r\nWITH map(1, 'val1', 2, 'val2') AS map\r\nSELECT arrayFilter(x -> (x.key = 1), map)\r\n\r\nQuery id: ee3dc4fe-b86e-4803-b5d2-c01e5d1bc471\r\n\r\n\r\n0 rows in set. Elapsed: 0.003 sec.\r\n\r\nReceived exception from server (version 21.13.1):\r\nCode: 47. DB::Exception: Received from localhost:9000. DB::Exception: Missing columns: 'x.key' while processing query: 'WITH map(1, 'val1', 2, 'val2') AS map SELECT arrayFilter(x -> (x.key = 1), map)', required columns: 'x.key'. (UNKNOWN_IDENTIFIER)\r\n\r\n\r\nWITH map(1, 'val1', 2, 'val2') AS map\r\nSELECT arrayFilter((x, y) -> (y = 1), arrayZip(mapKeys(map), mapValues(map)), mapKeys(map)) AS res\r\n\r\nQuery id: 275051be-8206-4973-9974-f667f701d8c8\r\n\r\n\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 [(1,'val1')] \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nAbility to cast map to Array(Tuple(key, value)) or Tuple(Array(key), Array(value))\r\n\r\n```\r\nWITH map(1, 'val1', 2, 'val2') AS map\r\nSELECT CAST(map, 'Array(Tuple(key UInt32, value String))')\r\n\r\nQuery id: 7100017e-f99f-4667-9665-cba69f24edff\r\n\r\n\r\n0 rows in set. Elapsed: 0.003 sec.\r\n\r\nReceived exception from server (version 21.13.1):\r\nCode: 53. DB::Exception: Received from localhost:9000. DB::Exception: CAST AS Array can only be performed between same-dimensional Array or String types: While processing CAST(map(1, 'val1', 2, 'val2') AS map, 'Array(Tuple(key UInt32, value String))'). (TYPE_MISMATCH)\r\n\r\nWITH map(1, 'val1', 2, 'val2') AS map\r\nSELECT CAST(map, 'Tuple(key Array(UInt32), value Array(String))')\r\n\r\nQuery id: 39700924-2168-4faa-af9b-002ceffb18c4\r\n\r\n\r\n0 rows in set. Elapsed: 0.003 sec.\r\n\r\nReceived exception from server (version 21.13.1):\r\nCode: 53. DB::Exception: Received from localhost:9000. DB::Exception: CAST AS Tuple can only be performed between tuple types or from String.\r\nLeft type: Map(UInt8, String), right type: Tuple(key Array(UInt32), value Array(String)): While processing CAST(map(1, 'val1', 2, 'val2') AS map, 'Tuple(key Array(UInt32), value Array(String))'). (TYPE_MISMATCH)\r\n```\r\n\r\nMap subcolumns .keys/.values doesn't work in case if map was created in query.\r\n\r\nhttps://clickhouse.com/docs/en/sql-reference/data-types/map/#map-subcolumns\r\n\r\n```\r\nWITH map(1, 'val1', 2, 'val2') AS map\r\nSELECT\r\n    map.keys,\r\n    map.values\r\n\r\nQuery id: c0d9d077-6edc-42ba-adae-37a1f9b9ac1c\r\n\r\n\r\n0 rows in set. Elapsed: 0.002 sec.\r\n\r\nReceived exception from server (version 21.13.1):\r\nCode: 47. DB::Exception: Received from localhost:9000. DB::Exception: Missing columns: 'map.values' 'map.keys' while processing query: 'WITH map(1, 'val1', 2, 'val2') AS map SELECT map.keys, map.values', required columns: 'map.keys' 'map.values'. (UNKNOWN_IDENTIFIER)\r\n```\r\n\r\n\n",
  "hints_text": "Version 22.4.1\r\n\r\nhttps://github.com/ClickHouse/ClickHouse/pull/33698 mapFilter\r\n\r\n```\r\n\r\nWITH map(1, 'val1', 2, 'val2') AS map\r\nSELECT mapFilter((k, v) -> (k = 1), map)\r\n\r\nQuery id: ddf0ac93-8e20-4b1e-b893-6f18381ba4cc\r\n\r\n\u250c\u2500mapFilter(lambda(tuple(k, v), equals(k, 1)), map)\u2500\u2510\r\n\u2502 {1:'val1'}                                        \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n\r\nmap -> Array(Tuple(key,value)) strange result\r\n```\r\n\r\n\r\nWITH map(1, 'val1', 2, 'val2') AS map\r\nSELECT CAST(map, 'Array(Tuple(key UInt32, value String))')\r\n\r\nQuery id: e7e432bf-05b5-4306-960f-978e9e682a0f\r\n\r\n\u250c\u2500CAST(map, 'Array(Tuple(key UInt32, value String))')\u2500\u2510\r\n\u2502 [(0,''),(0,'')]                                     \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n\r\n```",
  "created_at": "2023-03-27T18:11:16Z"
}