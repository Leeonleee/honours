{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 29916,
  "instance_id": "ClickHouse__ClickHouse-29916",
  "issue_numbers": [
    "29695"
  ],
  "base_commit": "102dd33cd89d7436b655ae98dbe6065b4c67f9b1",
  "patch": "diff --git a/src/Parsers/ASTAlterQuery.cpp b/src/Parsers/ASTAlterQuery.cpp\nindex 06a0b6d46f53..53d53bf5ae1f 100644\n--- a/src/Parsers/ASTAlterQuery.cpp\n+++ b/src/Parsers/ASTAlterQuery.cpp\n@@ -1,12 +1,11 @@\n-#include <Parsers/ASTAlterQuery.h>\n-#include <IO/Operators.h>\n #include <iomanip>\n+#include <IO/Operators.h>\n+#include <Parsers/ASTAlterQuery.h>\n #include <Common/quoteString.h>\n \n \n namespace DB\n {\n-\n namespace ErrorCodes\n {\n     extern const int UNEXPECTED_AST_STRUCTURE;\n@@ -76,38 +75,37 @@ ASTPtr ASTAlterCommand::clone() const\n     return res;\n }\n \n-void ASTAlterCommand::formatImpl(\n-    const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const\n+void ASTAlterCommand::formatImpl(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const\n {\n-    std::string indent_str = settings.one_line ? \"\" : std::string(4 * frame.indent, ' ');\n-\n     if (type == ASTAlterCommand::ADD_COLUMN)\n     {\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \"ADD COLUMN \" << (if_not_exists ? \"IF NOT EXISTS \" : \"\") << (settings.hilite ? hilite_none : \"\");\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \"ADD COLUMN \" << (if_not_exists ? \"IF NOT EXISTS \" : \"\")\n+                      << (settings.hilite ? hilite_none : \"\");\n         col_decl->formatImpl(settings, state, frame);\n \n         if (first)\n-            settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \" FIRST \" << (settings.hilite ? hilite_none : \"\");\n-        else if (column)    /// AFTER\n+            settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \" FIRST \" << (settings.hilite ? hilite_none : \"\");\n+        else if (column) /// AFTER\n         {\n-            settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \" AFTER \" << (settings.hilite ? hilite_none : \"\");\n+            settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \" AFTER \" << (settings.hilite ? hilite_none : \"\");\n             column->formatImpl(settings, state, frame);\n         }\n     }\n     else if (type == ASTAlterCommand::DROP_COLUMN)\n     {\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str\n-                      << (clear_column ? \"CLEAR \" : \"DROP \") << \"COLUMN \" << (if_exists ? \"IF EXISTS \" : \"\") << (settings.hilite ? hilite_none : \"\");\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << (clear_column ? \"CLEAR \" : \"DROP \") << \"COLUMN \"\n+                      << (if_exists ? \"IF EXISTS \" : \"\") << (settings.hilite ? hilite_none : \"\");\n         column->formatImpl(settings, state, frame);\n         if (partition)\n         {\n-            settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \" IN PARTITION \" << (settings.hilite ? hilite_none : \"\");\n+            settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \" IN PARTITION \" << (settings.hilite ? hilite_none : \"\");\n             partition->formatImpl(settings, state, frame);\n         }\n     }\n     else if (type == ASTAlterCommand::MODIFY_COLUMN)\n     {\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \"MODIFY COLUMN \" << (if_exists ? \"IF EXISTS \" : \"\") << (settings.hilite ? hilite_none : \"\");\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \"MODIFY COLUMN \" << (if_exists ? \"IF EXISTS \" : \"\")\n+                      << (settings.hilite ? hilite_none : \"\");\n         col_decl->formatImpl(settings, state, frame);\n \n         if (!remove_property.empty())\n@@ -117,152 +115,152 @@ void ASTAlterCommand::formatImpl(\n         else\n         {\n             if (first)\n-                settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \" FIRST \" << (settings.hilite ? hilite_none : \"\");\n-            else if (column)    /// AFTER\n+                settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \" FIRST \" << (settings.hilite ? hilite_none : \"\");\n+            else if (column) /// AFTER\n             {\n-                settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \" AFTER \" << (settings.hilite ? hilite_none : \"\");\n+                settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \" AFTER \" << (settings.hilite ? hilite_none : \"\");\n                 column->formatImpl(settings, state, frame);\n             }\n         }\n     }\n     else if (type == ASTAlterCommand::MATERIALIZE_COLUMN)\n     {\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str\n-                      << \"MATERIALIZE COLUMN \" << (settings.hilite ? hilite_none : \"\");\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \"MATERIALIZE COLUMN \" << (settings.hilite ? hilite_none : \"\");\n         column->formatImpl(settings, state, frame);\n         if (partition)\n         {\n-            settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \" IN PARTITION \" << (settings.hilite ? hilite_none : \"\");\n+            settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \" IN PARTITION \" << (settings.hilite ? hilite_none : \"\");\n             partition->formatImpl(settings, state, frame);\n         }\n     }\n     else if (type == ASTAlterCommand::COMMENT_COLUMN)\n     {\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \"COMMENT COLUMN \" << (if_exists ? \"IF EXISTS \" : \"\") << (settings.hilite ? hilite_none : \"\");\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \"COMMENT COLUMN \" << (if_exists ? \"IF EXISTS \" : \"\")\n+                      << (settings.hilite ? hilite_none : \"\");\n         column->formatImpl(settings, state, frame);\n         settings.ostr << \" \" << (settings.hilite ? hilite_none : \"\");\n         comment->formatImpl(settings, state, frame);\n     }\n     else if (type == ASTAlterCommand::MODIFY_COMMENT)\n     {\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \"MODIFY COMMENT\" << (settings.hilite ? hilite_none : \"\");\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \"MODIFY COMMENT\" << (settings.hilite ? hilite_none : \"\");\n         settings.ostr << \" \" << (settings.hilite ? hilite_none : \"\");\n         comment->formatImpl(settings, state, frame);\n     }\n     else if (type == ASTAlterCommand::MODIFY_ORDER_BY)\n     {\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \"MODIFY ORDER BY \" << (settings.hilite ? hilite_none : \"\");\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \"MODIFY ORDER BY \" << (settings.hilite ? hilite_none : \"\");\n         order_by->formatImpl(settings, state, frame);\n     }\n     else if (type == ASTAlterCommand::MODIFY_SAMPLE_BY)\n     {\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \"MODIFY SAMPLE BY \" << (settings.hilite ? hilite_none : \"\");\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \"MODIFY SAMPLE BY \" << (settings.hilite ? hilite_none : \"\");\n         sample_by->formatImpl(settings, state, frame);\n     }\n     else if (type == ASTAlterCommand::ADD_INDEX)\n     {\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \"ADD INDEX \" << (if_not_exists ? \"IF NOT EXISTS \" : \"\") << (settings.hilite ? hilite_none : \"\");\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \"ADD INDEX \" << (if_not_exists ? \"IF NOT EXISTS \" : \"\")\n+                      << (settings.hilite ? hilite_none : \"\");\n         index_decl->formatImpl(settings, state, frame);\n \n         if (first)\n-            settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \" FIRST \" << (settings.hilite ? hilite_none : \"\");\n-        else if (index)    /// AFTER\n+            settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \" FIRST \" << (settings.hilite ? hilite_none : \"\");\n+        else if (index) /// AFTER\n         {\n-            settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \" AFTER \" << (settings.hilite ? hilite_none : \"\");\n+            settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \" AFTER \" << (settings.hilite ? hilite_none : \"\");\n             index->formatImpl(settings, state, frame);\n         }\n     }\n     else if (type == ASTAlterCommand::DROP_INDEX)\n     {\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str\n-                      << (clear_index ? \"CLEAR \" : \"DROP \") << \"INDEX \" << (if_exists ? \"IF EXISTS \" : \"\") << (settings.hilite ? hilite_none : \"\");\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << (clear_index ? \"CLEAR \" : \"DROP \") << \"INDEX \"\n+                      << (if_exists ? \"IF EXISTS \" : \"\") << (settings.hilite ? hilite_none : \"\");\n         index->formatImpl(settings, state, frame);\n         if (partition)\n         {\n-            settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \" IN PARTITION \" << (settings.hilite ? hilite_none : \"\");\n+            settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \" IN PARTITION \" << (settings.hilite ? hilite_none : \"\");\n             partition->formatImpl(settings, state, frame);\n         }\n     }\n     else if (type == ASTAlterCommand::MATERIALIZE_INDEX)\n     {\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str\n-                      << \"MATERIALIZE INDEX \" << (settings.hilite ? hilite_none : \"\");\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \"MATERIALIZE INDEX \" << (settings.hilite ? hilite_none : \"\");\n         index->formatImpl(settings, state, frame);\n         if (partition)\n         {\n-            settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \" IN PARTITION \" << (settings.hilite ? hilite_none : \"\");\n+            settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \" IN PARTITION \" << (settings.hilite ? hilite_none : \"\");\n             partition->formatImpl(settings, state, frame);\n         }\n     }\n     else if (type == ASTAlterCommand::ADD_CONSTRAINT)\n     {\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \"ADD CONSTRAINT \" << (if_not_exists ? \"IF NOT EXISTS \" : \"\") << (settings.hilite ? hilite_none : \"\");\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \"ADD CONSTRAINT \" << (if_not_exists ? \"IF NOT EXISTS \" : \"\")\n+                      << (settings.hilite ? hilite_none : \"\");\n         constraint_decl->formatImpl(settings, state, frame);\n     }\n     else if (type == ASTAlterCommand::DROP_CONSTRAINT)\n     {\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str\n-                      << \"DROP CONSTRAINT \" << (if_exists ? \"IF EXISTS \" : \"\") << (settings.hilite ? hilite_none : \"\");\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \"DROP CONSTRAINT \" << (if_exists ? \"IF EXISTS \" : \"\")\n+                      << (settings.hilite ? hilite_none : \"\");\n         constraint->formatImpl(settings, state, frame);\n     }\n     else if (type == ASTAlterCommand::ADD_PROJECTION)\n     {\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \"ADD PROJECTION \" << (if_not_exists ? \"IF NOT EXISTS \" : \"\") << (settings.hilite ? hilite_none : \"\");\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \"ADD PROJECTION \" << (if_not_exists ? \"IF NOT EXISTS \" : \"\")\n+                      << (settings.hilite ? hilite_none : \"\");\n         projection_decl->formatImpl(settings, state, frame);\n \n         if (first)\n-            settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \" FIRST \" << (settings.hilite ? hilite_none : \"\");\n+            settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \" FIRST \" << (settings.hilite ? hilite_none : \"\");\n         else if (projection)\n         {\n-            settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \" AFTER \" << (settings.hilite ? hilite_none : \"\");\n+            settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \" AFTER \" << (settings.hilite ? hilite_none : \"\");\n             projection->formatImpl(settings, state, frame);\n         }\n     }\n     else if (type == ASTAlterCommand::DROP_PROJECTION)\n     {\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str\n-                      << (clear_projection ? \"CLEAR \" : \"DROP \") << \"PROJECTION \" << (if_exists ? \"IF EXISTS \" : \"\") << (settings.hilite ? hilite_none : \"\");\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << (clear_projection ? \"CLEAR \" : \"DROP \") << \"PROJECTION \"\n+                      << (if_exists ? \"IF EXISTS \" : \"\") << (settings.hilite ? hilite_none : \"\");\n         projection->formatImpl(settings, state, frame);\n         if (partition)\n         {\n-            settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str<< \" IN PARTITION \" << (settings.hilite ? hilite_none : \"\");\n+            settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \" IN PARTITION \" << (settings.hilite ? hilite_none : \"\");\n             partition->formatImpl(settings, state, frame);\n         }\n     }\n     else if (type == ASTAlterCommand::MATERIALIZE_PROJECTION)\n     {\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str\n-                      << \"MATERIALIZE PROJECTION \" << (settings.hilite ? hilite_none : \"\");\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \"MATERIALIZE PROJECTION \" << (settings.hilite ? hilite_none : \"\");\n         projection->formatImpl(settings, state, frame);\n         if (partition)\n         {\n-            settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str<< \" IN PARTITION \" << (settings.hilite ? hilite_none : \"\");\n+            settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \" IN PARTITION \" << (settings.hilite ? hilite_none : \"\");\n             partition->formatImpl(settings, state, frame);\n         }\n     }\n     else if (type == ASTAlterCommand::DROP_PARTITION)\n     {\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str\n-                      << (detach ? \"DETACH\" : \"DROP\") << (part ? \" PART \" : \" PARTITION \")\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << (detach ? \"DETACH\" : \"DROP\") << (part ? \" PART \" : \" PARTITION \")\n                       << (settings.hilite ? hilite_none : \"\");\n         partition->formatImpl(settings, state, frame);\n     }\n     else if (type == ASTAlterCommand::DROP_DETACHED_PARTITION)\n     {\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \"DROP DETACHED\" << (part ? \" PART \" : \" PARTITION \")\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \"DROP DETACHED\" << (part ? \" PART \" : \" PARTITION \")\n                       << (settings.hilite ? hilite_none : \"\");\n         partition->formatImpl(settings, state, frame);\n     }\n     else if (type == ASTAlterCommand::ATTACH_PARTITION)\n     {\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \"ATTACH \"\n-                      << (part ? \"PART \" : \"PARTITION \") << (settings.hilite ? hilite_none : \"\");\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \"ATTACH \" << (part ? \"PART \" : \"PARTITION \")\n+                      << (settings.hilite ? hilite_none : \"\");\n         partition->formatImpl(settings, state, frame);\n     }\n     else if (type == ASTAlterCommand::MOVE_PARTITION)\n     {\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \"MOVE \"\n-                      << (part ? \"PART \" : \"PARTITION \") << (settings.hilite ? hilite_none : \"\");\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \"MOVE \" << (part ? \"PART \" : \"PARTITION \")\n+                      << (settings.hilite ? hilite_none : \"\");\n         partition->formatImpl(settings, state, frame);\n         settings.ostr << \" TO \";\n         switch (move_destination_type)\n@@ -280,8 +278,7 @@ void ASTAlterCommand::formatImpl(\n                     settings.ostr << (settings.hilite ? hilite_identifier : \"\") << backQuoteIfNeed(to_database)\n                                   << (settings.hilite ? hilite_none : \"\") << \".\";\n                 }\n-                settings.ostr << (settings.hilite ? hilite_identifier : \"\")\n-                              << backQuoteIfNeed(to_table)\n+                settings.ostr << (settings.hilite ? hilite_identifier : \"\") << backQuoteIfNeed(to_table)\n                               << (settings.hilite ? hilite_none : \"\");\n                 return;\n             default:\n@@ -294,7 +291,7 @@ void ASTAlterCommand::formatImpl(\n     }\n     else if (type == ASTAlterCommand::REPLACE_PARTITION)\n     {\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << (replace ? \"REPLACE\" : \"ATTACH\") << \" PARTITION \"\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << (replace ? \"REPLACE\" : \"ATTACH\") << \" PARTITION \"\n                       << (settings.hilite ? hilite_none : \"\");\n         partition->formatImpl(settings, state, frame);\n         settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \" FROM \" << (settings.hilite ? hilite_none : \"\");\n@@ -307,57 +304,56 @@ void ASTAlterCommand::formatImpl(\n     }\n     else if (type == ASTAlterCommand::FETCH_PARTITION)\n     {\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \"FETCH \"\n-                      << (part ? \"PART \" : \"PARTITION \") << (settings.hilite ? hilite_none : \"\");\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \"FETCH \" << (part ? \"PART \" : \"PARTITION \")\n+                      << (settings.hilite ? hilite_none : \"\");\n         partition->formatImpl(settings, state, frame);\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\")\n-                      << \" FROM \" << (settings.hilite ? hilite_none : \"\") << DB::quote << from;\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \" FROM \" << (settings.hilite ? hilite_none : \"\") << DB::quote << from;\n     }\n     else if (type == ASTAlterCommand::FREEZE_PARTITION)\n     {\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \"FREEZE PARTITION \" << (settings.hilite ? hilite_none : \"\");\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \"FREEZE PARTITION \" << (settings.hilite ? hilite_none : \"\");\n         partition->formatImpl(settings, state, frame);\n \n         if (!with_name.empty())\n         {\n-            settings.ostr << \" \" << (settings.hilite ? hilite_keyword : \"\") << \"WITH NAME\" << (settings.hilite ? hilite_none : \"\")\n-                          << \" \" << DB::quote << with_name;\n+            settings.ostr << \" \" << (settings.hilite ? hilite_keyword : \"\") << \"WITH NAME\" << (settings.hilite ? hilite_none : \"\") << \" \"\n+                          << DB::quote << with_name;\n         }\n     }\n     else if (type == ASTAlterCommand::FREEZE_ALL)\n     {\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \"FREEZE\";\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \"FREEZE\";\n \n         if (!with_name.empty())\n         {\n-            settings.ostr << \" \" << (settings.hilite ? hilite_keyword : \"\") << \"WITH NAME\" << (settings.hilite ? hilite_none : \"\")\n-                          << \" \" << DB::quote << with_name;\n+            settings.ostr << \" \" << (settings.hilite ? hilite_keyword : \"\") << \"WITH NAME\" << (settings.hilite ? hilite_none : \"\") << \" \"\n+                          << DB::quote << with_name;\n         }\n     }\n     else if (type == ASTAlterCommand::UNFREEZE_PARTITION)\n     {\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \"UNFREEZE PARTITION \" << (settings.hilite ? hilite_none : \"\");\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \"UNFREEZE PARTITION \" << (settings.hilite ? hilite_none : \"\");\n         partition->formatImpl(settings, state, frame);\n \n         if (!with_name.empty())\n         {\n-            settings.ostr << \" \" << (settings.hilite ? hilite_keyword : \"\") << \"WITH NAME\" << (settings.hilite ? hilite_none : \"\")\n-                          << \" \" << DB::quote << with_name;\n+            settings.ostr << \" \" << (settings.hilite ? hilite_keyword : \"\") << \"WITH NAME\" << (settings.hilite ? hilite_none : \"\") << \" \"\n+                          << DB::quote << with_name;\n         }\n     }\n     else if (type == ASTAlterCommand::UNFREEZE_ALL)\n     {\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \"UNFREEZE\";\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \"UNFREEZE\";\n \n         if (!with_name.empty())\n         {\n-            settings.ostr << \" \" << (settings.hilite ? hilite_keyword : \"\") << \"WITH NAME\" << (settings.hilite ? hilite_none : \"\")\n-                          << \" \" << DB::quote << with_name;\n+            settings.ostr << \" \" << (settings.hilite ? hilite_keyword : \"\") << \"WITH NAME\" << (settings.hilite ? hilite_none : \"\") << \" \"\n+                          << DB::quote << with_name;\n         }\n     }\n     else if (type == ASTAlterCommand::DELETE)\n     {\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \"DELETE\" << (settings.hilite ? hilite_none : \"\");\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \"DELETE\" << (settings.hilite ? hilite_none : \"\");\n \n         if (partition)\n         {\n@@ -370,7 +366,7 @@ void ASTAlterCommand::formatImpl(\n     }\n     else if (type == ASTAlterCommand::UPDATE)\n     {\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \"UPDATE \" << (settings.hilite ? hilite_none : \"\");\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \"UPDATE \" << (settings.hilite ? hilite_none : \"\");\n         update_assignments->formatImpl(settings, state, frame);\n \n         if (partition)\n@@ -384,17 +380,16 @@ void ASTAlterCommand::formatImpl(\n     }\n     else if (type == ASTAlterCommand::MODIFY_TTL)\n     {\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \"MODIFY TTL \" << (settings.hilite ? hilite_none : \"\");\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \"MODIFY TTL \" << (settings.hilite ? hilite_none : \"\");\n         ttl->formatImpl(settings, state, frame);\n     }\n     else if (type == ASTAlterCommand::REMOVE_TTL)\n     {\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \"REMOVE TTL\" << (settings.hilite ? hilite_none : \"\");\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \"REMOVE TTL\" << (settings.hilite ? hilite_none : \"\");\n     }\n     else if (type == ASTAlterCommand::MATERIALIZE_TTL)\n     {\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \"MATERIALIZE TTL\"\n-                      << (settings.hilite ? hilite_none : \"\");\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \"MATERIALIZE TTL\" << (settings.hilite ? hilite_none : \"\");\n         if (partition)\n         {\n             settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \" IN PARTITION \" << (settings.hilite ? hilite_none : \"\");\n@@ -403,31 +398,32 @@ void ASTAlterCommand::formatImpl(\n     }\n     else if (type == ASTAlterCommand::MODIFY_SETTING)\n     {\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \"MODIFY SETTING \" << (settings.hilite ? hilite_none : \"\");\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \"MODIFY SETTING \" << (settings.hilite ? hilite_none : \"\");\n         settings_changes->formatImpl(settings, state, frame);\n     }\n     else if (type == ASTAlterCommand::RESET_SETTING)\n     {\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \"RESET SETTING \" << (settings.hilite ? hilite_none : \"\");\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \"RESET SETTING \" << (settings.hilite ? hilite_none : \"\");\n         settings_resets->formatImpl(settings, state, frame);\n     }\n     else if (type == ASTAlterCommand::MODIFY_DATABASE_SETTING)\n     {\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \"MODIFY SETTING \" << (settings.hilite ? hilite_none : \"\");\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \"MODIFY SETTING \" << (settings.hilite ? hilite_none : \"\");\n         settings_changes->formatImpl(settings, state, frame);\n     }\n     else if (type == ASTAlterCommand::MODIFY_QUERY)\n     {\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \"MODIFY QUERY \" << settings.nl_or_ws << (settings.hilite ? hilite_none : \"\");\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \"MODIFY QUERY \" << settings.nl_or_ws\n+                      << (settings.hilite ? hilite_none : \"\");\n         select->formatImpl(settings, state, frame);\n     }\n     else if (type == ASTAlterCommand::LIVE_VIEW_REFRESH)\n     {\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \"REFRESH \" << (settings.hilite ? hilite_none : \"\");\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \"REFRESH \" << (settings.hilite ? hilite_none : \"\");\n     }\n     else if (type == ASTAlterCommand::RENAME_COLUMN)\n     {\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << indent_str << \"RENAME COLUMN \" << (if_exists ? \"IF EXISTS \" : \"\")\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \"RENAME COLUMN \" << (if_exists ? \"IF EXISTS \" : \"\")\n                       << (settings.hilite ? hilite_none : \"\");\n         column->formatImpl(settings, state, frame);\n \n@@ -522,12 +518,11 @@ void ASTAlterQuery::formatQueryImpl(const FormatSettings & settings, FormatState\n     }\n \n     formatOnCluster(settings);\n-    settings.ostr << settings.nl_or_ws;\n \n     FormatStateStacked frame_nested = frame;\n     frame_nested.need_parens = false;\n-    ++frame_nested.indent;\n-    static_cast<IAST *>(command_list)->formatImpl(settings, state, frame_nested);\n+    frame_nested.expression_list_always_start_on_new_line = true;\n+    static_cast<ASTExpressionList *>(command_list)->formatImplMultiline(settings, state, frame_nested);\n }\n \n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01318_alter_add_constraint_format.reference b/tests/queries/0_stateless/01318_alter_add_constraint_format.reference\nindex 9f58d1615394..7a3b41536e07 100644\n--- a/tests/queries/0_stateless/01318_alter_add_constraint_format.reference\n+++ b/tests/queries/0_stateless/01318_alter_add_constraint_format.reference\n@@ -1,1 +1,2 @@\n-ALTER TABLE replicated_constraints1 ADD CONSTRAINT IF NOT EXISTS b_constraint CHECK b > 10\n+ALTER TABLE replicated_constraints1\n+    ADD CONSTRAINT IF NOT EXISTS b_constraint CHECK b > 10\ndiff --git a/tests/queries/0_stateless/02048_alter_command_format.reference b/tests/queries/0_stateless/02048_alter_command_format.reference\nnew file mode 100644\nindex 000000000000..719c9391f463\n--- /dev/null\n+++ b/tests/queries/0_stateless/02048_alter_command_format.reference\n@@ -0,0 +1,5 @@\n+ALTER TABLE t\n+    DROP COLUMN a,\n+    DROP COLUMN b,\n+    DROP COLUMN c,\n+    ADD COLUMN `d` UInt8\ndiff --git a/tests/queries/0_stateless/02048_alter_command_format.sh b/tests/queries/0_stateless/02048_alter_command_format.sh\nnew file mode 100755\nindex 000000000000..2f088cf81766\n--- /dev/null\n+++ b/tests/queries/0_stateless/02048_alter_command_format.sh\n@@ -0,0 +1,7 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+echo \"alter table t drop column a, drop column b, drop column c, add column d UInt8\" | $CLICKHOUSE_FORMAT;\n",
  "problem_statement": "Strange formatting of ALTER query\n**Describe the issue**\r\n\r\n```\r\ngithub-explorer.ru-central1.internal :) ALTER TABLE hackernews MODIFY COLUMN text CODEC(ZSTD), MODIFY COLUMN title CODEC(ZSTD), MODIFY COLUMN url CODEC(ZSTD)\r\n\r\nALTER TABLE hackernews\r\n    MODIFY COLUMN `text` CODEC(ZSTD),     MODIFY COLUMN `title` CODEC(ZSTD),     MODIFY COLUMN `url` CODEC(ZSTD)\r\n```\r\n\r\nSee that weird indentation without newlines?\n",
  "hints_text": "Maybe we can format all AlterCommands with multiline?\n> Maybe we can format all AlterCommands with multiline?\r\n\r\nSo, It's a good idea ;)\r\nMulti-line is much more convenient UX and more readable, like https://clickhouse.com/docs/en/engines/table-engines/mergetree-family/mergetree/#mergetree-column-ttl",
  "created_at": "2021-10-09T08:02:21Z",
  "modified_files": [
    "src/Parsers/ASTAlterQuery.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/01318_alter_add_constraint_format.reference",
    "b/tests/queries/0_stateless/02048_alter_command_format.reference",
    "b/tests/queries/0_stateless/02048_alter_command_format.sh"
  ]
}