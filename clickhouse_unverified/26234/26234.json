{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 26234,
  "instance_id": "ClickHouse__ClickHouse-26234",
  "issue_numbers": [
    "26216"
  ],
  "base_commit": "a24d2c1fafd765a6dea62171aae0fc2a7df275de",
  "patch": "diff --git a/src/Core/PostgreSQL/insertPostgreSQLValue.cpp b/src/Core/PostgreSQL/insertPostgreSQLValue.cpp\nindex e606300fc37a..8207bcfaae90 100644\n--- a/src/Core/PostgreSQL/insertPostgreSQLValue.cpp\n+++ b/src/Core/PostgreSQL/insertPostgreSQLValue.cpp\n@@ -9,6 +9,7 @@\n #include <DataTypes/IDataType.h>\n #include <DataTypes/DataTypeNullable.h>\n #include <DataTypes/DataTypeArray.h>\n+#include <DataTypes/DataTypeDateTime64.h>\n #include <DataTypes/DataTypesDecimal.h>\n #include <Interpreters/convertFieldToType.h>\n #include <IO/ReadHelpers.h>\n@@ -102,7 +103,16 @@ void insertPostgreSQLValue(\n             assert_cast<ColumnUInt32 &>(column).insertValue(time);\n             break;\n         }\n-        case ExternalResultDescription::ValueType::vtDateTime64:[[fallthrough]];\n+        case ExternalResultDescription::ValueType::vtDateTime64:\n+        {\n+            ReadBufferFromString in(value);\n+            DateTime64 time = 0;\n+            readDateTime64Text(time, 6, in, assert_cast<const DataTypeDateTime64 *>(data_type.get())->getTimeZone());\n+            if (time < 0)\n+                time = 0;\n+            assert_cast<ColumnDecimal<Decimal64> &>(column).insertValue(time);\n+            break;\n+        }\n         case ExternalResultDescription::ValueType::vtDecimal32: [[fallthrough]];\n         case ExternalResultDescription::ValueType::vtDecimal64: [[fallthrough]];\n         case ExternalResultDescription::ValueType::vtDecimal128: [[fallthrough]];\n@@ -206,6 +216,14 @@ void preparePostgreSQLArrayInfo(\n             readDateTimeText(time, in, assert_cast<const DataTypeDateTime *>(nested.get())->getTimeZone());\n             return time;\n         };\n+    else if (which.isDateTime64())\n+        parser = [nested](std::string & field) -> Field\n+        {\n+            ReadBufferFromString in(field);\n+            DateTime64 time = 0;\n+            readDateTime64Text(time, 6, in, assert_cast<const DataTypeDateTime64 *>(nested.get())->getTimeZone());\n+            return time;\n+        };\n     else if (which.isDecimal32())\n         parser = [nested](std::string & field) -> Field\n         {\ndiff --git a/src/Databases/PostgreSQL/fetchPostgreSQLTableStructure.cpp b/src/Databases/PostgreSQL/fetchPostgreSQLTableStructure.cpp\nindex 64d47720af92..a5eccc817d0c 100644\n--- a/src/Databases/PostgreSQL/fetchPostgreSQLTableStructure.cpp\n+++ b/src/Databases/PostgreSQL/fetchPostgreSQLTableStructure.cpp\n@@ -9,7 +9,7 @@\n #include <DataTypes/DataTypeArray.h>\n #include <DataTypes/DataTypesDecimal.h>\n #include <DataTypes/DataTypeDate.h>\n-#include <DataTypes/DataTypeDateTime.h>\n+#include <DataTypes/DataTypeDateTime64.h>\n #include <boost/algorithm/string/split.hpp>\n #include <boost/algorithm/string/trim.hpp>\n #include <Common/quoteString.h>\n@@ -71,7 +71,7 @@ static DataTypePtr convertPostgreSQLDataType(String & type, const std::function<\n     else if (type == \"bigserial\")\n         res = std::make_shared<DataTypeUInt64>();\n     else if (type.starts_with(\"timestamp\"))\n-        res = std::make_shared<DataTypeDateTime>();\n+        res = std::make_shared<DataTypeDateTime64>(6);\n     else if (type == \"date\")\n         res = std::make_shared<DataTypeDate>();\n     else if (type.starts_with(\"numeric\"))\ndiff --git a/src/Storages/PostgreSQL/StorageMaterializedPostgreSQL.cpp b/src/Storages/PostgreSQL/StorageMaterializedPostgreSQL.cpp\nindex 70251a940cc4..2fa96ac5cf21 100644\n--- a/src/Storages/PostgreSQL/StorageMaterializedPostgreSQL.cpp\n+++ b/src/Storages/PostgreSQL/StorageMaterializedPostgreSQL.cpp\n@@ -327,6 +327,16 @@ ASTPtr StorageMaterializedPostgreSQL::getColumnDeclaration(const DataTypePtr & d\n             return make_decimal_expression(\"Decimal256\");\n     }\n \n+    if (which.isDateTime64())\n+    {\n+        auto ast_expression = std::make_shared<ASTFunction>();\n+\n+        ast_expression->name = \"DateTime64\";\n+        ast_expression->arguments = std::make_shared<ASTExpressionList>();\n+        ast_expression->arguments->children.emplace_back(std::make_shared<ASTLiteral>(UInt32(6)));\n+        return ast_expression;\n+    }\n+\n     return std::make_shared<ASTIdentifier>(data_type->getName());\n }\n \ndiff --git a/src/Storages/StoragePostgreSQL.cpp b/src/Storages/StoragePostgreSQL.cpp\nindex 211a626e8d4a..1f28f4f19f9f 100644\n--- a/src/Storages/StoragePostgreSQL.cpp\n+++ b/src/Storages/StoragePostgreSQL.cpp\n@@ -234,6 +234,10 @@ class PostgreSQLBlockOutputStream : public IBlockOutputStream\n         else if (which.isFloat64())                      nested_column = ColumnFloat64::create();\n         else if (which.isDate())                         nested_column = ColumnUInt16::create();\n         else if (which.isDateTime())                     nested_column = ColumnUInt32::create();\n+        else if (which.isDateTime64())\n+        {\n+            nested_column = ColumnDecimal<DateTime64>::create(0, 6);\n+        }\n         else if (which.isDecimal32())\n         {\n             const auto & type = typeid_cast<const DataTypeDecimal<Decimal32> *>(nested.get());\n",
  "test_patch": "diff --git a/tests/integration/test_postgresql_replica_database_engine/test.py b/tests/integration/test_postgresql_replica_database_engine/test.py\nindex 97fd461e640d..ed26ab82bc71 100644\n--- a/tests/integration/test_postgresql_replica_database_engine/test.py\n+++ b/tests/integration/test_postgresql_replica_database_engine/test.py\n@@ -236,7 +236,7 @@ def test_different_data_types(started_cluster):\n            (\n                 key Integer NOT NULL PRIMARY KEY,\n                 a Date[] NOT NULL,                          -- Date\n-                b Timestamp[] NOT NULL,                     -- DateTime\n+                b Timestamp[] NOT NULL,                     -- DateTime64(6)\n                 c real[][] NOT NULL,                        -- Float32\n                 d double precision[][] NOT NULL,            -- Float64\n                 e decimal(5, 5)[][][] NOT NULL,             -- Decimal32\n@@ -253,11 +253,11 @@ def test_different_data_types(started_cluster):\n     for i in range(10):\n         instance.query('''\n             INSERT INTO postgres_database.test_data_types VALUES\n-            ({}, -32768, -2147483648, -9223372036854775808, 1.12345, 1.1234567890, 2147483647, 9223372036854775807, '2000-05-12 12:12:12', '2000-05-12', 0.2, 0.2)'''.format(i))\n+            ({}, -32768, -2147483648, -9223372036854775808, 1.12345, 1.1234567890, 2147483647, 9223372036854775807, '2000-05-12 12:12:12.012345', '2000-05-12', 0.2, 0.2)'''.format(i))\n \n     check_tables_are_synchronized('test_data_types', 'id');\n     result = instance.query('SELECT * FROM test_database.test_data_types ORDER BY id LIMIT 1;')\n-    assert(result == '0\\t-32768\\t-2147483648\\t-9223372036854775808\\t1.12345\\t1.123456789\\t2147483647\\t9223372036854775807\\t2000-05-12 12:12:12\\t2000-05-12\\t0.20000\\t0.20000\\n')\n+    assert(result == '0\\t-32768\\t-2147483648\\t-9223372036854775808\\t1.12345\\t1.123456789\\t2147483647\\t9223372036854775807\\t2000-05-12 12:12:12.012345\\t2000-05-12\\t0.20000\\t0.20000\\n')\n \n     for i in range(10):\n         col = random.choice(['a', 'b', 'c'])\n@@ -270,7 +270,7 @@ def test_different_data_types(started_cluster):\n         \"VALUES (\"\n         \"0, \"\n         \"['2000-05-12', '2000-05-12'], \"\n-        \"['2000-05-12 12:12:12', '2000-05-12 12:12:12'], \"\n+        \"['2000-05-12 12:12:12.012345', '2000-05-12 12:12:12.012345'], \"\n         \"[[1.12345], [1.12345], [1.12345]], \"\n         \"[[1.1234567891], [1.1234567891], [1.1234567891]], \"\n         \"[[[0.11111, 0.11111]], [[0.22222, 0.22222]], [[0.33333, 0.33333]]], \"\n@@ -284,7 +284,7 @@ def test_different_data_types(started_cluster):\n     expected = (\n         \"0\\t\" +\n         \"['2000-05-12','2000-05-12']\\t\" +\n-        \"['2000-05-12 12:12:12','2000-05-12 12:12:12']\\t\" +\n+        \"['2000-05-12 12:12:12.012345','2000-05-12 12:12:12.012345']\\t\" +\n         \"[[1.12345],[1.12345],[1.12345]]\\t\" +\n         \"[[1.1234567891],[1.1234567891],[1.1234567891]]\\t\" +\n         \"[[[0.11111,0.11111]],[[0.22222,0.22222]],[[0.33333,0.33333]]]\\t\"\n@@ -622,7 +622,7 @@ def test_virtual_columns(started_cluster):\n     instance.query(\"INSERT INTO postgres_database.postgresql_replica_0 SELECT number, number from numbers(10)\")\n     check_tables_are_synchronized('postgresql_replica_0');\n \n-    # just check that it works, no check with `expected` becuase _version is taken as LSN, which will be different each time.\n+    # just check that it works, no check with `expected` because _version is taken as LSN, which will be different each time.\n     result = instance.query('SELECT key, value, _sign, _version FROM test_database.postgresql_replica_0;')\n     print(result)\n \ndiff --git a/tests/integration/test_storage_postgresql/test.py b/tests/integration/test_storage_postgresql/test.py\nindex 307879265dfe..9e10ed22f78c 100644\n--- a/tests/integration/test_storage_postgresql/test.py\n+++ b/tests/integration/test_storage_postgresql/test.py\n@@ -85,10 +85,10 @@ def test_postgres_conversions(started_cluster):\n         h timestamp, i date, j decimal(5, 3), k numeric, l boolean)''')\n     node1.query('''\n         INSERT INTO TABLE FUNCTION postgresql('postgres1:5432', 'clickhouse', 'test_types', 'postgres', 'mysecretpassword') VALUES\n-        (-32768, -2147483648, -9223372036854775808, 1.12345, 1.1234567890, 2147483647, 9223372036854775807, '2000-05-12 12:12:12', '2000-05-12', 22.222, 22.222, 1)''')\n+        (-32768, -2147483648, -9223372036854775808, 1.12345, 1.1234567890, 2147483647, 9223372036854775807, '2000-05-12 12:12:12.012345', '2000-05-12', 22.222, 22.222, 1)''')\n     result = node1.query('''\n         SELECT a, b, c, d, e, f, g, h, i, j, toDecimal128(k, 3), l FROM postgresql('postgres1:5432', 'clickhouse', 'test_types', 'postgres', 'mysecretpassword')''')\n-    assert(result == '-32768\\t-2147483648\\t-9223372036854775808\\t1.12345\\t1.123456789\\t2147483647\\t9223372036854775807\\t2000-05-12 12:12:12\\t2000-05-12\\t22.222\\t22.222\\t1\\n')\n+    assert(result == '-32768\\t-2147483648\\t-9223372036854775808\\t1.12345\\t1.123456789\\t2147483647\\t9223372036854775807\\t2000-05-12 12:12:12.012345\\t2000-05-12\\t22.222\\t22.222\\t1\\n')\n \n     cursor.execute(\"INSERT INTO test_types (l) VALUES (TRUE), (true), ('yes'), ('y'), ('1');\")\n     cursor.execute(\"INSERT INTO test_types (l) VALUES (FALSE), (false), ('no'), ('off'), ('0');\")\n@@ -100,7 +100,7 @@ def test_postgres_conversions(started_cluster):\n         '''CREATE TABLE IF NOT EXISTS test_array_dimensions\n            (\n                 a Date[] NOT NULL,                          -- Date\n-                b Timestamp[] NOT NULL,                     -- DateTime\n+                b Timestamp[] NOT NULL,                     -- DateTime64(6)\n                 c real[][] NOT NULL,                        -- Float32\n                 d double precision[][] NOT NULL,            -- Float64\n                 e decimal(5, 5)[][][] NOT NULL,             -- Decimal32\n@@ -114,7 +114,7 @@ def test_postgres_conversions(started_cluster):\n     result = node1.query('''\n         DESCRIBE TABLE postgresql('postgres1:5432', 'clickhouse', 'test_array_dimensions', 'postgres', 'mysecretpassword')''')\n     expected = ('a\\tArray(Date)\\t\\t\\t\\t\\t\\n' +\n-               'b\\tArray(DateTime)\\t\\t\\t\\t\\t\\n' +\n+               'b\\tArray(DateTime64(6))\\t\\t\\t\\t\\t\\n' +\n                'c\\tArray(Array(Float32))\\t\\t\\t\\t\\t\\n' +\n                'd\\tArray(Array(Float64))\\t\\t\\t\\t\\t\\n' +\n                'e\\tArray(Array(Array(Decimal(5, 5))))\\t\\t\\t\\t\\t\\n' +\n@@ -129,7 +129,7 @@ def test_postgres_conversions(started_cluster):\n     node1.query(\"INSERT INTO TABLE FUNCTION postgresql('postgres1:5432', 'clickhouse', 'test_array_dimensions', 'postgres', 'mysecretpassword') \"\n         \"VALUES (\"\n         \"['2000-05-12', '2000-05-12'], \"\n-        \"['2000-05-12 12:12:12', '2000-05-12 12:12:12'], \"\n+        \"['2000-05-12 12:12:12.012345', '2000-05-12 12:12:12.012345'], \"\n         \"[[1.12345], [1.12345], [1.12345]], \"\n         \"[[1.1234567891], [1.1234567891], [1.1234567891]], \"\n         \"[[[0.11111, 0.11111]], [[0.22222, 0.22222]], [[0.33333, 0.33333]]], \"\n@@ -144,7 +144,7 @@ def test_postgres_conversions(started_cluster):\n         SELECT * FROM postgresql('postgres1:5432', 'clickhouse', 'test_array_dimensions', 'postgres', 'mysecretpassword')''')\n     expected = (\n         \"['2000-05-12','2000-05-12']\\t\" +\n-        \"['2000-05-12 12:12:12','2000-05-12 12:12:12']\\t\" +\n+        \"['2000-05-12 12:12:12.012345','2000-05-12 12:12:12.012345']\\t\" +\n         \"[[1.12345],[1.12345],[1.12345]]\\t\" +\n         \"[[1.1234567891],[1.1234567891],[1.1234567891]]\\t\" +\n         \"[[[0.11111,0.11111]],[[0.22222,0.22222]],[[0.33333,0.33333]]]\\t\"\n",
  "problem_statement": "timestamp format should convert to DateTime64 not DateTime  in postgres engine\n\r\n**Describe the unexpected behaviour**\r\ncurrently data format name started with `timestamp`(timestamp/timestamptz) all converted to DateTime in postgres engine, this will losing precision of millisecond and microsecond, so they should be regarded as DtateTime64 data format\r\n\r\n\r\n**Expected behavior**\r\n\r\nthey should be regarded as DtateTime64 data format\r\n\n",
  "hints_text": "",
  "created_at": "2021-07-12T05:22:27Z"
}