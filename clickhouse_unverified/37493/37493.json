{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 37493,
  "instance_id": "ClickHouse__ClickHouse-37493",
  "issue_numbers": [
    "37401"
  ],
  "base_commit": "b50d4549c95959f01dd1ecea4e9a82afcebf95a6",
  "patch": "diff --git a/src/Interpreters/TreeOptimizer.cpp b/src/Interpreters/TreeOptimizer.cpp\nindex 537c18beaa18..42628fbb9059 100644\n--- a/src/Interpreters/TreeOptimizer.cpp\n+++ b/src/Interpreters/TreeOptimizer.cpp\n@@ -459,11 +459,26 @@ void optimizeMonotonousFunctionsInOrderBy(ASTSelectQuery * select_query, Context\n     std::unordered_set<String> group_by_hashes;\n     if (auto group_by = select_query->groupBy())\n     {\n-        for (auto & elem : group_by->children)\n+        if (select_query->group_by_with_grouping_sets)\n         {\n-            auto hash = elem->getTreeHash();\n-            String key = toString(hash.first) + '_' + toString(hash.second);\n-            group_by_hashes.insert(key);\n+            for (auto & set : group_by->children)\n+            {\n+                for (auto & elem : set->children)\n+                {\n+                    auto hash = elem->getTreeHash();\n+                    String key = toString(hash.first) + '_' + toString(hash.second);\n+                    group_by_hashes.insert(key);\n+                }\n+            }\n+        }\n+        else\n+        {\n+            for (auto & elem : group_by->children)\n+            {\n+                auto hash = elem->getTreeHash();\n+                String key = toString(hash.first) + '_' + toString(hash.second);\n+                group_by_hashes.insert(key);\n+            }\n         }\n     }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02304_grouping_set_order_by.reference b/tests/queries/0_stateless/02304_grouping_set_order_by.reference\nnew file mode 100644\nindex 000000000000..c1d666e9167c\n--- /dev/null\n+++ b/tests/queries/0_stateless/02304_grouping_set_order_by.reference\n@@ -0,0 +1,8 @@\n+2020-01-01 00:00:00\t\t60\n+2020-01-01 00:00:00\tid0\t20\n+2020-01-01 00:00:00\tid1\t20\n+2020-01-01 00:00:00\tid2\t20\n+2020-01-01 01:00:00\t\t40\n+2020-01-01 01:00:00\tid0\t14\n+2020-01-01 01:00:00\tid1\t13\n+2020-01-01 01:00:00\tid2\t13\ndiff --git a/tests/queries/0_stateless/02304_grouping_set_order_by.sql b/tests/queries/0_stateless/02304_grouping_set_order_by.sql\nnew file mode 100644\nindex 000000000000..d1b4ab13446c\n--- /dev/null\n+++ b/tests/queries/0_stateless/02304_grouping_set_order_by.sql\n@@ -0,0 +1,11 @@\n+SELECT toStartOfHour(time) AS timex, id, count()\n+FROM\n+(\n+    SELECT\n+        concat('id', toString(number % 3)) AS id,\n+        toDateTime('2020-01-01') + (number * 60) AS time\n+    FROM numbers(100)\n+)\n+GROUP BY\n+    GROUPING SETS ( (timex, id), (timex))\n+ORDER BY timex ASC, id;\n",
  "problem_statement": "grouping sets + order by (column `time` is not under aggregate)\n```sql\r\nSELECT toStartOfHour(time) AS timex, id, count()\r\nFROM\r\n(\r\n    SELECT\r\n        concat('id', toString(number % 3)) AS id,\r\n        toDateTime('2020-01-01') + (number * 60) AS time\r\n    FROM numbers(100)\r\n)\r\nGROUP BY\r\n    GROUPING SETS ( (timex, id), (timex))\r\nORDER BY timex ASC;\r\n\r\nReceived exception from server (version 22.5.1):\r\nCode: 215. DB::Exception: Received from localhost:9000. \r\nDB::Exception: Column `time` is not under aggregate function and not in GROUP BY: \r\nWhile processing time ASC. (NOT_AN_AGGREGATE)\r\n```\n",
  "hints_text": "",
  "created_at": "2022-05-24T18:59:25Z",
  "modified_files": [
    "src/Interpreters/TreeOptimizer.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02304_grouping_set_order_by.reference",
    "b/tests/queries/0_stateless/02304_grouping_set_order_by.sql"
  ]
}