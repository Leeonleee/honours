diff --git a/dbms/src/Interpreters/InterpreterCreateQuery.cpp b/dbms/src/Interpreters/InterpreterCreateQuery.cpp
index d0c112e154df..68de37b995e7 100644
--- a/dbms/src/Interpreters/InterpreterCreateQuery.cpp
+++ b/dbms/src/Interpreters/InterpreterCreateQuery.cpp
@@ -560,17 +560,20 @@ BlockIO InterpreterCreateQuery::createTable(ASTCreateQuery & create)
         auto table_lock = res->lockStructure(true, __PRETTY_FUNCTION__);
 
         /// Also see InterpreterInsertQuery.
-        BlockOutputStreamPtr out =
-            std::make_shared<ProhibitColumnsBlockOutputStream>(
-                std::make_shared<AddingDefaultBlockOutputStream>(
-                    std::make_shared<MaterializingBlockOutputStream>(
-                        std::make_shared<PushingToViewsBlockOutputStream>(
-                            create.database, create.table, res,
-                            create.is_temporary ? context.getSessionContext() : context,
-                            query_ptr)),
-                    /// @note shouldn't these two contexts be session contexts in case of temporary table?
-                    columns.columns, columns.column_defaults, context, static_cast<bool>(context.getSettingsRef().strict_insert_defaults)),
-                columns.materialized_columns);
+        BlockOutputStreamPtr out;
+
+        out = std::make_shared<PushingToViewsBlockOutputStream>(
+            create.database, create.table, res, create.is_temporary ? context.getSessionContext() : context, query_ptr);
+
+        out = std::make_shared<MaterializingBlockOutputStream>(out);
+
+        /// @note shouldn't these two contexts be session contexts in case of temporary table?
+        bool strict_insert_defaults = static_cast<bool>(context.getSettingsRef().strict_insert_defaults);
+        out = std::make_shared<AddingDefaultBlockOutputStream>(
+            out, columns.columns, columns.column_defaults, context, strict_insert_defaults);
+
+        if (!context.getSettingsRef().insert_allow_materialized_columns)
+            out = std::make_shared<ProhibitColumnsBlockOutputStream>(out, columns.materialized_columns);
 
         BlockIO io;
         io.in_sample = as_select_sample;
diff --git a/dbms/src/Interpreters/InterpreterFactory.cpp b/dbms/src/Interpreters/InterpreterFactory.cpp
index 45bc97233178..d13c509053c3 100644
--- a/dbms/src/Interpreters/InterpreterFactory.cpp
+++ b/dbms/src/Interpreters/InterpreterFactory.cpp
@@ -61,7 +61,8 @@ std::unique_ptr<IInterpreter> InterpreterFactory::get(ASTPtr & query, Context &
     else if (typeid_cast<ASTInsertQuery *>(query.get()))
     {
         /// readonly is checked inside InterpreterInsertQuery
-        return std::make_unique<InterpreterInsertQuery>(query, context);
+        bool allow_materialized = static_cast<bool>(context.getSettingsRef().insert_allow_materialized_columns);
+        return std::make_unique<InterpreterInsertQuery>(query, context, allow_materialized);
     }
     else if (typeid_cast<ASTCreateQuery *>(query.get()))
     {
diff --git a/dbms/src/Interpreters/InterpreterInsertQuery.cpp b/dbms/src/Interpreters/InterpreterInsertQuery.cpp
index 72df1fae1735..7ae0708fb05e 100644
--- a/dbms/src/Interpreters/InterpreterInsertQuery.cpp
+++ b/dbms/src/Interpreters/InterpreterInsertQuery.cpp
@@ -37,8 +37,9 @@ namespace ErrorCodes
 }
 
 
-InterpreterInsertQuery::InterpreterInsertQuery(const ASTPtr & query_ptr_, const Context & context_)
-    : query_ptr(query_ptr_), context(context_)
+InterpreterInsertQuery::InterpreterInsertQuery(
+    const ASTPtr & query_ptr_, const Context & context_, bool allow_materialized_)
+    : query_ptr(query_ptr_), context(context_), allow_materialized(allow_materialized_)
 {
     ProfileEvents::increment(ProfileEvents::InsertQuery);
 }
@@ -118,7 +119,8 @@ BlockIO InterpreterInsertQuery::execute()
     out = std::make_shared<AddingDefaultBlockOutputStream>(
         out, required_columns, table->column_defaults, context, static_cast<bool>(context.getSettingsRef().strict_insert_defaults));
 
-    out = std::make_shared<ProhibitColumnsBlockOutputStream>(out, table->materialized_columns);
+    if (!allow_materialized)
+        out = std::make_shared<ProhibitColumnsBlockOutputStream>(out, table->materialized_columns);
 
     out = std::make_shared<SquashingBlockOutputStream>(
         out, context.getSettingsRef().min_insert_block_size_rows, context.getSettingsRef().min_insert_block_size_bytes);
diff --git a/dbms/src/Interpreters/InterpreterInsertQuery.h b/dbms/src/Interpreters/InterpreterInsertQuery.h
index 7901ea594ef7..9bdc5cfcaba9 100644
--- a/dbms/src/Interpreters/InterpreterInsertQuery.h
+++ b/dbms/src/Interpreters/InterpreterInsertQuery.h
@@ -15,7 +15,7 @@ namespace DB
 class InterpreterInsertQuery : public IInterpreter
 {
 public:
-    InterpreterInsertQuery(const ASTPtr & query_ptr_, const Context & context_);
+    InterpreterInsertQuery(const ASTPtr & query_ptr_, const Context & context_, bool allow_materialized_ = false);
 
     /** Prepare a request for execution. Return block streams
       * - the stream into which you can write data to execute the query, if INSERT;
@@ -37,6 +37,7 @@ class InterpreterInsertQuery : public IInterpreter
 
     ASTPtr query_ptr;
     const Context & context;
+    bool allow_materialized;
 };
 
 
diff --git a/dbms/src/Interpreters/Settings.h b/dbms/src/Interpreters/Settings.h
index f481fc5c3034..f94ad135cc1f 100644
--- a/dbms/src/Interpreters/Settings.h
+++ b/dbms/src/Interpreters/Settings.h
@@ -301,7 +301,7 @@ struct Settings
     M(SettingMilliseconds, stream_flush_interval_ms, DEFAULT_QUERY_LOG_FLUSH_INTERVAL_MILLISECONDS, "Timeout for flushing data from streaming storages.") \
     /* Schema identifier (used by schema-based formats) */ \
     M(SettingString, format_schema, "", "Schema identifier (used by schema-based formats)") \
-    \
+    M(SettingBool, insert_allow_materialized_columns, 0, "If setting is enabled, Allow materialized columns in INSERT.") \
     M(SettingSeconds, http_connection_timeout, DEFAULT_HTTP_READ_BUFFER_CONNECTION_TIMEOUT, "HTTP connection timeout.") \
     M(SettingSeconds, http_send_timeout, DEFAULT_HTTP_READ_BUFFER_TIMEOUT, "HTTP send timeout") \
     M(SettingSeconds, http_receive_timeout, DEFAULT_HTTP_READ_BUFFER_TIMEOUT, "HTTP receive timeout") \
diff --git a/dbms/src/Storages/StorageBuffer.cpp b/dbms/src/Storages/StorageBuffer.cpp
index cdda74307cc2..b932324892df 100644
--- a/dbms/src/Storages/StorageBuffer.cpp
+++ b/dbms/src/Storages/StorageBuffer.cpp
@@ -55,14 +55,14 @@ StorageBuffer::StorageBuffer(const std::string & name_, const NamesAndTypesList
     const ColumnDefaults & column_defaults_,
     Context & context_,
     size_t num_shards_, const Thresholds & min_thresholds_, const Thresholds & max_thresholds_,
-    const String & destination_database_, const String & destination_table_)
+    const String & destination_database_, const String & destination_table_, bool allow_materialized_)
     : IStorage{materialized_columns_, alias_columns_, column_defaults_},
     name(name_), columns(columns_), context(context_),
     num_shards(num_shards_), buffers(num_shards_),
     min_thresholds(min_thresholds_), max_thresholds(max_thresholds_),
     destination_database(destination_database_), destination_table(destination_table_),
     no_destination(destination_database.empty() && destination_table.empty()),
-    log(&Logger::get("StorageBuffer (" + name + ")"))
+    allow_materialized(allow_materialized_), log(&Logger::get("StorageBuffer (" + name + ")"))
 {
 }
 
@@ -527,7 +527,7 @@ void StorageBuffer::writeBlockToDestination(const Block & block, StoragePtr tabl
     /** We will insert columns that are the intersection set of columns of the buffer table and the subordinate table.
       * This will support some of the cases (but not all) when the table structure does not match.
       */
-    Block structure_of_destination_table = table->getSampleBlock();
+    Block structure_of_destination_table = allow_materialized ? table->getSampleBlock() : table->getSampleBlockNonMaterialized();
     Names columns_intersection;
     columns_intersection.reserve(block.columns());
     for (size_t i : ext::range(0, structure_of_destination_table.columns()))
@@ -564,7 +564,7 @@ void StorageBuffer::writeBlockToDestination(const Block & block, StoragePtr tabl
     for (const String & column : columns_intersection)
         list_of_columns->children.push_back(std::make_shared<ASTIdentifier>(StringRange(), column, ASTIdentifier::Column));
 
-    InterpreterInsertQuery interpreter{insert, context};
+    InterpreterInsertQuery interpreter{insert, context, allow_materialized};
 
     auto block_io = interpreter.execute();
     block_io.out->writePrefix();
@@ -650,7 +650,8 @@ void registerStorageBuffer(StorageFactory & factory)
             num_buckets,
             StorageBuffer::Thresholds{min_time, min_rows, min_bytes},
             StorageBuffer::Thresholds{max_time, max_rows, max_bytes},
-            destination_database, destination_table);
+            destination_database, destination_table,
+            static_cast<bool>(args.local_context.getSettingsRef().insert_allow_materialized_columns));
     });
 }
 
diff --git a/dbms/src/Storages/StorageBuffer.h b/dbms/src/Storages/StorageBuffer.h
index 161e5d7ed10b..98cbcff661c5 100644
--- a/dbms/src/Storages/StorageBuffer.h
+++ b/dbms/src/Storages/StorageBuffer.h
@@ -103,6 +103,7 @@ friend class BufferBlockOutputStream;
     const String destination_database;
     const String destination_table;
     bool no_destination;    /// If set, do not write data from the buffer, but simply empty the buffer.
+    bool allow_materialized;
 
     Poco::Logger * log;
 
@@ -131,7 +132,7 @@ friend class BufferBlockOutputStream;
         const ColumnDefaults & column_defaults_,
         Context & context_,
         size_t num_shards_, const Thresholds & min_thresholds_, const Thresholds & max_thresholds_,
-        const String & destination_database_, const String & destination_table_);
+        const String & destination_database_, const String & destination_table_, bool allow_materialized_);
 };
 
 }
