{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 9274,
  "instance_id": "ClickHouse__ClickHouse-9274",
  "issue_numbers": [
    "4974"
  ],
  "base_commit": "749c41a545fb3a2cca790376b13bc89e87310bbb",
  "patch": "diff --git a/dbms/src/Core/Settings.h b/dbms/src/Core/Settings.h\nindex 450a253651c4..c4476f2a2d12 100644\n--- a/dbms/src/Core/Settings.h\n+++ b/dbms/src/Core/Settings.h\n@@ -253,7 +253,7 @@ struct Settings : public SettingsCollection<Settings>\n     M(SettingSeconds, http_receive_timeout, DEFAULT_HTTP_READ_BUFFER_TIMEOUT, \"HTTP receive timeout\", 0) \\\n     M(SettingBool, optimize_throw_if_noop, false, \"If setting is enabled and OPTIMIZE query didn't actually assign a merge then an explanatory exception is thrown\", 0) \\\n     M(SettingBool, use_index_for_in_with_subqueries, true, \"Try using an index if there is a subquery or a table expression on the right side of the IN operator.\", 0) \\\n-    M(SettingBool, joined_subquery_requires_alias, false, \"Force joined subqueries to have aliases for correct name qualification.\", 0) \\\n+    M(SettingBool, joined_subquery_requires_alias, true, \"Force joined subqueries and table functions to have aliases for correct name qualification.\", 0) \\\n     M(SettingBool, empty_result_for_aggregation_by_empty_set, false, \"Return empty result when aggregating without keys on empty set.\", 0) \\\n     M(SettingBool, allow_distributed_ddl, true, \"If it is set to true, then a user is allowed to executed distributed DDL queries.\", 0) \\\n     M(SettingUInt64, odbc_max_field_size, 1024, \"Max size of filed can be read from ODBC dictionary. Long strings are truncated.\", 0) \\\ndiff --git a/dbms/src/Interpreters/SyntaxAnalyzer.cpp b/dbms/src/Interpreters/SyntaxAnalyzer.cpp\nindex a8f7d1e2eccb..53f3203ef8ae 100644\n--- a/dbms/src/Interpreters/SyntaxAnalyzer.cpp\n+++ b/dbms/src/Interpreters/SyntaxAnalyzer.cpp\n@@ -111,7 +111,7 @@ std::vector<TableWithColumnNames> getTablesWithColumns(const std::vector<const A\n     {\n         for (auto & pr : tables_with_columns)\n             if (pr.table.table.empty() && pr.table.alias.empty())\n-                throw Exception(\"Not unique subquery in FROM requires an alias (or joined_subquery_requires_alias=0 to disable restriction).\",\n+                throw Exception(\"No alias for subquery or table function in JOIN (set joined_subquery_requires_alias=0 to disable restriction).\",\n                                 ErrorCodes::ALIAS_REQUIRED);\n     }\n \n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/00634_performance_introspection_and_logging.sh b/dbms/tests/queries/0_stateless/00634_performance_introspection_and_logging.sh\nindex 1225cd43c5ec..1bf995a1a7e3 100755\n--- a/dbms/tests/queries/0_stateless/00634_performance_introspection_and_logging.sh\n+++ b/dbms/tests/queries/0_stateless/00634_performance_introspection_and_logging.sh\n@@ -88,14 +88,14 @@ SELECT PN, PVq, PVt FROM\n     ARRAY JOIN ProfileEvents.Names AS PN, ProfileEvents.Values AS PV\n     WHERE event_date >= today()-1 AND query_id='$query_id'\n     GROUP BY PN\n-)\n+) js1\n ANY INNER JOIN\n (\n     SELECT PN, PV AS PVq\n     FROM system.query_log\n     ARRAY JOIN ProfileEvents.Names AS PN, ProfileEvents.Values AS PV\n     WHERE event_date >= today()-1 AND query_id='$query_id'\n-)\n+) js2\n USING PN\n WHERE\n     NOT PN IN ('ContextLock') AND\ndiff --git a/dbms/tests/queries/0_stateless/00952_input_function.sh b/dbms/tests/queries/0_stateless/00952_input_function.sh\nindex 374cb5f9249d..696c9c675600 100755\n--- a/dbms/tests/queries/0_stateless/00952_input_function.sh\n+++ b/dbms/tests/queries/0_stateless/00952_input_function.sh\n@@ -18,12 +18,12 @@ ${CLICKHOUSE_CLIENT} --query=\"SELECT * FROM input_function_table_2 FORMAT CSV\"\n \n ${CLICKHOUSE_CLIENT} --query=\"DROP TABLE IF EXISTS input_function_table_3\"\n ${CLICKHOUSE_CLIENT} --query=\"CREATE TABLE input_function_table_3 (a String, b Date, c Int32, d Int16) ENGINE=Memory()\"\n-cat ${CLICKHOUSE_TMP}/data_for_input_function.csv | ${CLICKHOUSE_CLIENT} --query=\"INSERT INTO input_function_table_3 (a, b, c) SELECT * FROM (SELECT s, b, c*c FROM input('s String, b Int32, c Int32') JOIN input_function_table_1 ON s=input_function_table_1.a) FORMAT CSV\"\n+cat ${CLICKHOUSE_TMP}/data_for_input_function.csv | ${CLICKHOUSE_CLIENT} --query=\"INSERT INTO input_function_table_3 (a, b, c) SELECT * FROM (SELECT s, b, c*c FROM input('s String, b Int32, c Int32') js1 JOIN input_function_table_1 ON s=input_function_table_1.a) FORMAT CSV\"\n ${CLICKHOUSE_CLIENT} --query=\"SELECT * FROM input_function_table_3 FORMAT CSV\"\n \n ${CLICKHOUSE_CLIENT} --query=\"DROP TABLE IF EXISTS input_function_table_4\"\n ${CLICKHOUSE_CLIENT} --query=\"CREATE TABLE input_function_table_4 (a String, b Date, c Int32, d Int16) ENGINE=Memory()\"\n-cat ${CLICKHOUSE_TMP}/data_for_input_function.csv | ${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}&query=INSERT%20INTO%20input_function_table_4%20%28a%2C%20b%2C%20c%29%20SELECT%20%2A%20FROM%20%28SELECT%20s%2C%20b%2C%20c%2Ac%20FROM%20input%28%27s%20String%2C%20b%20Int32%2C%20c%20Int32%27%29%20JOIN%20input_function_table_1%20ON%20s%3Dinput_function_table_1.a%29%20FORMAT%20CSV\" --data-binary @-\n+cat ${CLICKHOUSE_TMP}/data_for_input_function.csv | ${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}&query=INSERT%20INTO%20input_function_table_4%20%28a%2C%20b%2C%20c%29%20SELECT%20%2A%20FROM%20%28SELECT%20s%2C%20b%2C%20c%2Ac%20FROM%20input%28%27s%20String%2C%20b%20Int32%2C%20c%20Int32%27%29%20js1%20JOIN%20input_function_table_1%20ON%20s%3Dinput_function_table_1.a%29%20FORMAT%20CSV\" --data-binary @-\n ${CLICKHOUSE_CLIENT} --query=\"SELECT * FROM input_function_table_4 FORMAT CSV\"\n \n \ndiff --git a/dbms/tests/queries/0_stateless/00980_full_join_crash_fancyqlx.sql b/dbms/tests/queries/0_stateless/00980_full_join_crash_fancyqlx.sql\nindex 2514b6ded1bb..20209f453a32 100644\n--- a/dbms/tests/queries/0_stateless/00980_full_join_crash_fancyqlx.sql\n+++ b/dbms/tests/queries/0_stateless/00980_full_join_crash_fancyqlx.sql\n@@ -7,8 +7,8 @@ insert into test_join values ('2019-01-01', 2, 'b');\n insert into test_join values ('2019-01-01', 3, 'c');\n insert into test_join values ('2019-01-01', 1, null);\n \n-SELECT id, date, name FROM (SELECT id, date, name FROM test_join GROUP BY id, name, date)\n-FULL OUTER JOIN (SELECT id, date, name FROM test_join GROUP BY id, name, date)\n+SELECT id, date, name FROM (SELECT id, date, name FROM test_join GROUP BY id, name, date) js1\n+FULL OUTER JOIN (SELECT id, date, name FROM test_join GROUP BY id, name, date) js2\n USING (id, name, date)\n ORDER BY id, name;\n \ndiff --git a/dbms/tests/queries/0_stateless/00999_join_not_nullable_types.reference b/dbms/tests/queries/0_stateless/00999_join_not_nullable_types.reference\nindex 7b6947fa9a24..f3e23bda1585 100644\n--- a/dbms/tests/queries/0_stateless/00999_join_not_nullable_types.reference\n+++ b/dbms/tests/queries/0_stateless/00999_join_not_nullable_types.reference\n@@ -1,8 +1,8 @@\n-0\t['left']\t0\t['left']\t\\N\n-1\t['left']\t1\t['left']\t1\n-2\t[]\t\\N\t[]\t2\n-['left']\t0\t['left']\t\\N\n-['left']\t1\t['left']\t1\n-[]\t\\N\t[]\t2\n+0\t['left']\t0\t[]\t\\N\n+1\t['left']\t1\t['right']\t1\n+2\t[]\t\\N\t['right']\t2\n+['left']\t0\t[]\t\\N\n+['left']\t1\t['right']\t1\n+[]\t\\N\t['right']\t2\n ['left']\t42\t\\N\n ['right']\t\\N\t42\ndiff --git a/dbms/tests/queries/0_stateless/00999_join_not_nullable_types.sql b/dbms/tests/queries/0_stateless/00999_join_not_nullable_types.sql\nindex 2a24c6dd2965..523996eca105 100644\n--- a/dbms/tests/queries/0_stateless/00999_join_not_nullable_types.sql\n+++ b/dbms/tests/queries/0_stateless/00999_join_not_nullable_types.sql\n@@ -3,32 +3,32 @@ SET join_use_nulls = 1;\n SELECT * FROM\n (\n     SELECT number, ['left'] as ar, number AS left_number FROM system.numbers LIMIT 2\n-)\n+) js1\n FULL JOIN\n (\n     SELECT number, ['right'] as ar, number AS right_number FROM system.numbers LIMIT 1, 2\n-)\n+) js2\n USING (number)\n ORDER BY number;\n \n SELECT * FROM\n (\n     SELECT ['left'] as ar, number AS left_number FROM system.numbers LIMIT 2\n-)\n+) js1\n FULL JOIN\n (\n     SELECT ['right'] as ar, number AS right_number FROM system.numbers LIMIT 1, 2\n-)\n+) js2\n ON left_number = right_number\n ORDER BY left_number;\n \n SELECT * FROM\n (\n     SELECT ['left'] as ar, 42 AS left_number\n-)\n+) js1\n FULL JOIN\n (\n     SELECT ['right'] as ar, 42 AS right_number\n-)\n+) js2\n USING(ar)\n ORDER BY left_number;\ndiff --git a/dbms/tests/queries/0_stateless/01008_materialized_view_henyihanwobushi.sql b/dbms/tests/queries/0_stateless/01008_materialized_view_henyihanwobushi.sql\nindex 8deec159dcad..8def546cd2ec 100644\n--- a/dbms/tests/queries/0_stateless/01008_materialized_view_henyihanwobushi.sql\n+++ b/dbms/tests/queries/0_stateless/01008_materialized_view_henyihanwobushi.sql\n@@ -5,7 +5,7 @@ DROP TABLE IF EXISTS view_foo_bar;\n create table foo (ddate Date, id Int64, n String) ENGINE = ReplacingMergeTree(ddate, (id), 8192);\n create table bar (ddate Date, id Int64, n String, foo_id Int64) ENGINE = ReplacingMergeTree(ddate, (id), 8192);\n insert into bar (id, n, foo_id) values (1, 'bar_n_1', 1);\n-create MATERIALIZED view view_foo_bar ENGINE = ReplacingMergeTree(ddate, (bar_id), 8192) as select ddate, bar_id, bar_n, foo_id, foo_n from (select ddate, id as bar_id, n as bar_n, foo_id from bar) any left join (select id as foo_id, n as foo_n from foo) using foo_id;\n+create MATERIALIZED view view_foo_bar ENGINE = ReplacingMergeTree(ddate, (bar_id), 8192) as select ddate, bar_id, bar_n, foo_id, foo_n from (select ddate, id as bar_id, n as bar_n, foo_id from bar) js1 any left join (select id as foo_id, n as foo_n from foo) js2 using foo_id;\n insert into bar (id, n, foo_id) values (1, 'bar_n_1', 1);\n SELECT * FROM view_foo_bar;\n \ndiff --git a/dbms/tests/queries/0_stateless/01009_insert_select_data_loss.sql b/dbms/tests/queries/0_stateless/01009_insert_select_data_loss.sql\nindex 472056176c41..a153d7dbc308 100644\n--- a/dbms/tests/queries/0_stateless/01009_insert_select_data_loss.sql\n+++ b/dbms/tests/queries/0_stateless/01009_insert_select_data_loss.sql\n@@ -1,7 +1,9 @@\n drop table if exists tab;\n create table tab (x UInt64) engine = MergeTree order by tuple();\n \n-insert into tab select number as n from numbers(20) semi left join (select number * 10 as n from numbers(2)) using(n) settings max_block_size = 5;\n+insert into tab select number as n from numbers(20) nums\n+semi left join (select number * 10 as n from numbers(2)) js2 using(n)\n+settings max_block_size = 5;\n select * from tab order by x;\n \n drop table tab;\ndiff --git a/dbms/tests/queries/0_stateless/01010_pmj_on_disk.sql b/dbms/tests/queries/0_stateless/01010_pmj_on_disk.sql\nindex 2b88b528bbf8..28bc0ced3b74 100644\n--- a/dbms/tests/queries/0_stateless/01010_pmj_on_disk.sql\n+++ b/dbms/tests/queries/0_stateless/01010_pmj_on_disk.sql\n@@ -1,6 +1,6 @@\n SET join_algorithm = 'hash';\n \n-SELECT number as n, j FROM numbers(4)\n+SELECT number as n, j FROM numbers(4) nums\n ANY LEFT JOIN (\n     SELECT number * 2 AS n, number + 10 AS j\n     FROM numbers(4000)\n@@ -9,7 +9,7 @@ USING n;\n \n SET max_rows_in_join = 1000;\n \n-SELECT number as n, j FROM numbers(4)\n+SELECT number as n, j FROM numbers(4) nums\n ANY LEFT JOIN (\n     SELECT number * 2 AS n, number + 10 AS j\n     FROM numbers(4000)\n@@ -18,7 +18,7 @@ USING n; -- { serverError 191 }\n \n SET join_algorithm = 'partial_merge';\n \n-SELECT number as n, j FROM numbers(4)\n+SELECT number as n, j FROM numbers(4) nums\n ANY LEFT JOIN (\n     SELECT number * 2 AS n, number + 10 AS j\n     FROM numbers(4000)\n@@ -27,7 +27,7 @@ USING n;\n \n SET partial_merge_join_optimizations = 1;\n \n-SELECT number as n, j FROM numbers(4)\n+SELECT number as n, j FROM numbers(4) nums\n ANY LEFT JOIN (\n     SELECT number * 2 AS n, number + 10 AS j\n     FROM numbers(4000)\n@@ -36,7 +36,7 @@ USING n;\n \n SET join_algorithm = 'auto';\n \n-SELECT number as n, j FROM numbers(4)\n+SELECT number as n, j FROM numbers(4) nums\n ANY LEFT JOIN (\n     SELECT number * 2 AS n, number + 10 AS j\n     FROM numbers(4000)\ndiff --git a/dbms/tests/queries/0_stateless/01010_pmj_right_table_memory_limits.sql b/dbms/tests/queries/0_stateless/01010_pmj_right_table_memory_limits.sql\nindex fc0af53c5ae7..8a23b58b66f4 100644\n--- a/dbms/tests/queries/0_stateless/01010_pmj_right_table_memory_limits.sql\n+++ b/dbms/tests/queries/0_stateless/01010_pmj_right_table_memory_limits.sql\n@@ -1,6 +1,6 @@\n SET max_memory_usage = 32000000;\n \n-SELECT number * 200000 as n, j FROM numbers(5)\n+SELECT number * 200000 as n, j FROM numbers(5) nums\n ANY LEFT JOIN (\n     SELECT number * 2 AS n, number AS j\n     FROM numbers(1000000)\n@@ -10,14 +10,14 @@ USING n; -- { serverError 241 }\n SET partial_merge_join = 1;\n SET default_max_bytes_in_join = 0;\n \n-SELECT number * 200000 as n, j FROM numbers(5)\n+SELECT number * 200000 as n, j FROM numbers(5) nums\n ANY LEFT JOIN (\n     SELECT number * 2 AS n, number AS j\n     FROM numbers(1000000)\n ) js2\n USING n; -- { serverError 12 }\n \n-SELECT number * 200000 as n, j FROM numbers(5)\n+SELECT number * 200000 as n, j FROM numbers(5) nums\n ANY LEFT JOIN (\n     SELECT number * 2 AS n, number AS j\n     FROM numbers(1000000)\n@@ -25,7 +25,7 @@ ANY LEFT JOIN (\n USING n\n SETTINGS max_bytes_in_join = 30000000; -- { serverError 241 }\n \n-SELECT number * 200000 as n, j FROM numbers(5)\n+SELECT number * 200000 as n, j FROM numbers(5) nums\n ANY LEFT JOIN (\n     SELECT number * 2 AS n, number AS j\n     FROM numbers(1000000)\n@@ -36,7 +36,7 @@ SETTINGS max_bytes_in_join = 10000000;\n \n SET partial_merge_join_optimizations = 1;\n \n-SELECT number * 200000 as n, j FROM numbers(5)\n+SELECT number * 200000 as n, j FROM numbers(5) nums\n LEFT JOIN (\n     SELECT number * 2 AS n, number AS j\n     FROM numbers(1000000)\n@@ -47,7 +47,7 @@ SETTINGS max_rows_in_join = 100000;\n \n SET default_max_bytes_in_join = 10000000;\n \n-SELECT number * 200000 as n, j FROM numbers(5)\n+SELECT number * 200000 as n, j FROM numbers(5) nums\n JOIN (\n     SELECT number * 2 AS n, number AS j\n     FROM numbers(1000000)\ndiff --git a/dbms/tests/queries/0_stateless/01015_empty_in_inner_right_join.sql b/dbms/tests/queries/0_stateless/01015_empty_in_inner_right_join.sql\nindex e6343befabd9..e0d06a7e3b6b 100644\n--- a/dbms/tests/queries/0_stateless/01015_empty_in_inner_right_join.sql\n+++ b/dbms/tests/queries/0_stateless/01015_empty_in_inner_right_join.sql\n@@ -1,3 +1,5 @@\n+SET joined_subquery_requires_alias = 0;\n+\n SELECT 'IN empty set',count() FROM system.numbers WHERE number IN (SELECT toUInt64(1) WHERE 0);\n SELECT 'IN non-empty set',count() FROM (SELECT number FROM system.numbers LIMIT 10) t1 WHERE t1.number IN (SELECT toUInt64(1) WHERE 1);\n SELECT 'NOT IN empty set',count() FROM (SELECT number FROM system.numbers LIMIT 10) WHERE number NOT IN (SELECT toUInt64(1) WHERE 0);\ndiff --git a/dbms/tests/queries/0_stateless/01046_materialized_view_with_join_over_distributed.sql b/dbms/tests/queries/0_stateless/01046_materialized_view_with_join_over_distributed.sql\nindex 25991bb88199..7aac720865dc 100644\n--- a/dbms/tests/queries/0_stateless/01046_materialized_view_with_join_over_distributed.sql\n+++ b/dbms/tests/queries/0_stateless/01046_materialized_view_with_join_over_distributed.sql\n@@ -5,7 +5,7 @@ DROP TABLE IF EXISTS t_d;\n DROP TABLE IF EXISTS t_v;\n CREATE TABLE t (`A` Int64) ENGINE = MergeTree() ORDER BY tuple();\n CREATE TABLE t_d AS t ENGINE = Distributed(test_shard_localhost, currentDatabase(), t);\n-CREATE MATERIALIZED VIEW t_v ENGINE = MergeTree() ORDER BY tuple() AS SELECT A FROM t LEFT JOIN ( SELECT toInt64(dummy) AS A FROM system.one ) USING (A);\n+CREATE MATERIALIZED VIEW t_v ENGINE = MergeTree() ORDER BY tuple() AS SELECT A FROM t LEFT JOIN ( SELECT toInt64(dummy) AS A FROM system.one ) js2 USING (A);\n \n INSERT INTO t_d SELECT number FROM numbers(2);\n SELECT * FROM t_v ORDER BY A;\ndiff --git a/dbms/tests/queries/0_stateless/01049_join_low_card_crash.sql b/dbms/tests/queries/0_stateless/01049_join_low_card_crash.sql\nindex 99bf09c42e17..4465fc9581f7 100644\n--- a/dbms/tests/queries/0_stateless/01049_join_low_card_crash.sql\n+++ b/dbms/tests/queries/0_stateless/01049_join_low_card_crash.sql\n@@ -7,13 +7,13 @@ CREATE TABLE Beta (foo LowCardinality(String), baz UInt64) ENGINE = Memory;\n INSERT INTO Alpha VALUES ('a', 1);\n INSERT INTO Beta VALUES ('a', 2), ('b', 3);\n \n-SELECT * FROM Alpha FULL JOIN (SELECT 'b' as foo) USING (foo) ORDER BY foo;\n+SELECT * FROM Alpha FULL JOIN (SELECT 'b' as foo) js2 USING (foo) ORDER BY foo;\n SELECT * FROM Alpha FULL JOIN Beta USING (foo) ORDER BY foo;\n SELECT * FROM Alpha FULL JOIN Beta ON Alpha.foo = Beta.foo ORDER BY foo;\n \n SET join_use_nulls = 1;\n \n-SELECT * FROM Alpha FULL JOIN (SELECT 'b' as foo) USING (foo) ORDER BY foo;\n+SELECT * FROM Alpha FULL JOIN (SELECT 'b' as foo) js2 USING (foo) ORDER BY foo;\n SELECT * FROM Alpha FULL JOIN Beta USING (foo) ORDER BY foo;\n SELECT * FROM Alpha FULL JOIN Beta ON Alpha.foo = Beta.foo ORDER BY foo;\n \ndiff --git a/dbms/tests/queries/0_stateless/01050_engine_join_crash.sql b/dbms/tests/queries/0_stateless/01050_engine_join_crash.sql\nindex 1b587ec1c2a0..285952056b45 100644\n--- a/dbms/tests/queries/0_stateless/01050_engine_join_crash.sql\n+++ b/dbms/tests/queries/0_stateless/01050_engine_join_crash.sql\n@@ -7,9 +7,9 @@ CREATE TABLE testJoinTable (number UInt64, data String) ENGINE = Join(ANY, INNER\n \n INSERT INTO testJoinTable VALUES (1, '1'), (2, '2'), (3, '3');\n \n-SELECT * FROM (SELECT * FROM numbers(10)) INNER JOIN testJoinTable USING number; -- { serverError 264 }\n-SELECT * FROM (SELECT * FROM numbers(10)) INNER JOIN (SELECT * FROM testJoinTable) USING number;\n-SELECT * FROM (SELECT * FROM numbers(10)) ANY INNER JOIN testJoinTable USING number;\n+SELECT * FROM (SELECT * FROM numbers(10)) js1 INNER JOIN testJoinTable USING number; -- { serverError 264 }\n+SELECT * FROM (SELECT * FROM numbers(10)) js1 INNER JOIN (SELECT * FROM testJoinTable) js2 USING number;\n+SELECT * FROM (SELECT * FROM numbers(10)) js1 ANY INNER JOIN testJoinTable USING number;\n SELECT * FROM testJoinTable;\n \n DROP TABLE testJoinTable;\ndiff --git a/dbms/tests/queries/0_stateless/01050_engine_join_view_crash.sql b/dbms/tests/queries/0_stateless/01050_engine_join_view_crash.sql\nindex 93fa2a6bd826..7da8613cd2c4 100644\n--- a/dbms/tests/queries/0_stateless/01050_engine_join_view_crash.sql\n+++ b/dbms/tests/queries/0_stateless/01050_engine_join_view_crash.sql\n@@ -11,9 +11,9 @@ INSERT INTO a VALUES (1,1,1)(2,2,2)(3,3,3);\n INSERT INTO id1 VALUES (1,1)(2,2)(3,3);\n INSERT INTO id2 VALUES (1,1)(2,2)(3,3);\n \n-SELECT * from (SELECT * FROM a ANY LEFT OUTER JOIN id1 USING id1) ANY LEFT OUTER JOIN id2 USING id2;\n+SELECT * from (SELECT * FROM a ANY LEFT OUTER JOIN id1 USING id1) js1 ANY LEFT OUTER JOIN id2 USING id2;\n \n-create view b as (SELECT * from (SELECT * FROM a ANY LEFT OUTER JOIN id1 USING id1) ANY LEFT OUTER JOIN id2 USING id2);\n+create view b as (SELECT * from (SELECT * FROM a ANY LEFT OUTER JOIN id1 USING id1) js1 ANY LEFT OUTER JOIN id2 USING id2);\n SELECT '-';\n SELECT * FROM b;\n \ndiff --git a/dbms/tests/queries/0_stateless/01056_predicate_optimizer_bugs.sql b/dbms/tests/queries/0_stateless/01056_predicate_optimizer_bugs.sql\nindex e1e185be0769..db6c78e3cc6d 100644\n--- a/dbms/tests/queries/0_stateless/01056_predicate_optimizer_bugs.sql\n+++ b/dbms/tests/queries/0_stateless/01056_predicate_optimizer_bugs.sql\n@@ -1,5 +1,6 @@\n SET enable_debug_queries = 1;\n SET enable_optimize_predicate_expression = 1;\n+SET joined_subquery_requires_alias = 0;\n \n -- https://github.com/ClickHouse/ClickHouse/issues/3885\n -- https://github.com/ClickHouse/ClickHouse/issues/5485\ndiff --git a/dbms/tests/queries/0_stateless/01062_pm_all_join_with_block_continuation.sql b/dbms/tests/queries/0_stateless/01062_pm_all_join_with_block_continuation.sql\nindex e79dd0ee5a85..d264d73b0bfa 100644\n--- a/dbms/tests/queries/0_stateless/01062_pm_all_join_with_block_continuation.sql\n+++ b/dbms/tests/queries/0_stateless/01062_pm_all_join_with_block_continuation.sql\n@@ -4,17 +4,17 @@ SET partial_merge_join = 1;\n SELECT 'defaults';\n     \n SELECT count(1) FROM (\n-    SELECT materialize(1) as k, n FROM numbers(10)\n+    SELECT materialize(1) as k, n FROM numbers(10) nums\n     JOIN (SELECT materialize(1) AS k, number n FROM numbers(1000000)) j\n     USING k);\n \n SELECT count(1) FROM (\n-    SELECT materialize(1) as k, n FROM numbers(1000)\n+    SELECT materialize(1) as k, n FROM numbers(1000) nums\n     JOIN (SELECT materialize(1) AS k, number n FROM numbers(10000)) j\n     USING k);\n \n SELECT count(1), uniqExact(n) FROM (\n-    SELECT materialize(1) as k, n FROM numbers(1000000)\n+    SELECT materialize(1) as k, n FROM numbers(1000000) nums\n     JOIN (SELECT materialize(1) AS k, number n FROM numbers(10)) j\n     USING k);\n \n@@ -22,12 +22,12 @@ SELECT count(1), uniqExact(n) FROM (\n SET max_joined_block_size_rows = 0;\n     \n SELECT count(1) FROM (\n-    SELECT materialize(1) as k, n FROM numbers(10)\n+    SELECT materialize(1) as k, n FROM numbers(10) nums\n     JOIN (SELECT materialize(1) AS k, number n FROM numbers(1000000)) j\n     USING k); -- { serverError 241 }\n \n SELECT count(1) FROM (\n-    SELECT materialize(1) as k, n FROM numbers(1000)\n+    SELECT materialize(1) as k, n FROM numbers(1000) nums\n     JOIN (SELECT materialize(1) AS k, number n FROM numbers(10000)) j\n     USING k); -- { serverError 241 }\n \n@@ -35,17 +35,17 @@ SELECT 'max_joined_block_size_rows = 2000';\n SET max_joined_block_size_rows = 2000;\n \n SELECT count(1) FROM (\n-    SELECT materialize(1) as k, n FROM numbers(10)\n+    SELECT materialize(1) as k, n FROM numbers(10) nums\n     JOIN (SELECT materialize(1) AS k, number n FROM numbers(1000000)) j\n     USING k);\n \n SELECT count(1), uniqExact(n) FROM (\n-    SELECT materialize(1) as k, n FROM numbers(1000)\n+    SELECT materialize(1) as k, n FROM numbers(1000) nums\n     JOIN (SELECT materialize(1) AS k, number n FROM numbers(10000)) j\n     USING k);\n \n SELECT count(1), uniqExact(n) FROM (\n-    SELECT materialize(1) as k, n FROM numbers(1000000)\n+    SELECT materialize(1) as k, n FROM numbers(1000000) nums\n     JOIN (SELECT materialize(1) AS k, number n FROM numbers(10)) j\n     USING k);\n \n@@ -53,16 +53,16 @@ SELECT 'max_rows_in_join = 1000';\n SET max_rows_in_join = 1000;\n \n SELECT count(1) FROM (\n-    SELECT materialize(1) as k, n FROM numbers(10)\n+    SELECT materialize(1) as k, n FROM numbers(10) nums\n     JOIN (SELECT materialize(1) AS k, number n FROM numbers(1000000)) j\n     USING k);\n \n SELECT count(1), uniqExact(n) FROM (\n-    SELECT materialize(1) as k, n FROM numbers(1000)\n+    SELECT materialize(1) as k, n FROM numbers(1000) nums\n     JOIN (SELECT materialize(1) AS k, number n FROM numbers(10000)) j\n     USING k);\n \n SELECT count(1), uniqExact(n) FROM (\n-    SELECT materialize(1) as k, n FROM numbers(1000000)\n+    SELECT materialize(1) as k, n FROM numbers(1000000) nums\n     JOIN (SELECT materialize(1) AS k, number n FROM numbers(10)) j\n     USING k);\ndiff --git a/dbms/tests/queries/0_stateless/01063_create_column_set.sql b/dbms/tests/queries/0_stateless/01063_create_column_set.sql\nindex 733f90971f9c..b283fa22f611 100644\n--- a/dbms/tests/queries/0_stateless/01063_create_column_set.sql\n+++ b/dbms/tests/queries/0_stateless/01063_create_column_set.sql\n@@ -6,7 +6,7 @@ FROM mt\n ANY LEFT JOIN\n (\n     SELECT 1 AS x\n-) USING (x)\n+) js2 USING (x)\n PREWHERE x IN (1) WHERE y = today();\n \n DROP TABLE mt;\ndiff --git a/dbms/tests/queries/0_stateless/01064_incremental_streaming_from_2_src_with_feedback.sql b/dbms/tests/queries/0_stateless/01064_incremental_streaming_from_2_src_with_feedback.sql\nindex e5b4b9dbe337..984f897ec2ab 100644\n--- a/dbms/tests/queries/0_stateless/01064_incremental_streaming_from_2_src_with_feedback.sql\n+++ b/dbms/tests/queries/0_stateless/01064_incremental_streaming_from_2_src_with_feedback.sql\n@@ -1,3 +1,5 @@\n+SET joined_subquery_requires_alias = 0;\n+\n SYSTEM STOP MERGES;\n \n -- incremental streaming usecase\ndiff --git a/dbms/tests/queries/0_stateless/01064_pm_all_join_const_and_nullable.sql b/dbms/tests/queries/0_stateless/01064_pm_all_join_const_and_nullable.sql\nindex 631fda510b05..6b87fd677444 100644\n--- a/dbms/tests/queries/0_stateless/01064_pm_all_join_const_and_nullable.sql\n+++ b/dbms/tests/queries/0_stateless/01064_pm_all_join_const_and_nullable.sql\n@@ -1,87 +1,87 @@\n SET partial_merge_join = 1;\n \n SELECT count(1), uniqExact(1) FROM (\n-SELECT materialize(1) as k FROM numbers(1)\n+SELECT materialize(1) as k FROM numbers(1) nums\n JOIN (SELECT materialize(1) AS k, number n FROM numbers(100000)) j\n USING k);\n \n SELECT count(1), uniqExact(1) FROM (\n-SELECT materialize(1) as k FROM numbers(1)\n+SELECT materialize(1) as k FROM numbers(1) nums\n JOIN (SELECT 1 AS k, number n FROM numbers(100000)) j\n USING k);\n \n SELECT count(1), uniqExact(1) FROM (\n-SELECT 1 as k FROM numbers(1)\n+SELECT 1 as k FROM numbers(1) nums\n JOIN (SELECT materialize(1) AS k, number n FROM numbers(100000)) j\n USING k);\n \n SELECT count(1), uniqExact(1) FROM (\n-SELECT 1 as k FROM numbers(1)\n+SELECT 1 as k FROM numbers(1) nums\n JOIN (SELECT 1 AS k, number n FROM numbers(100000)) j\n USING k);\n \n SELECT 'first nullable';\n \n SELECT count(1), uniqExact(1) FROM (\n-SELECT materialize(toNullable(1)) as k FROM numbers(1)\n+SELECT materialize(toNullable(1)) as k FROM numbers(1) nums\n JOIN (SELECT materialize(1) AS k, number n FROM numbers(100000)) j\n USING k);\n \n SELECT count(1), uniqExact(1) FROM (\n-SELECT materialize(toNullable(1)) as k FROM numbers(1)\n+SELECT materialize(toNullable(1)) as k FROM numbers(1) nums\n JOIN (SELECT 1 AS k, number n FROM numbers(100000)) j\n USING k);\n \n SELECT count(1), uniqExact(1) FROM (\n-SELECT toNullable(1) as k FROM numbers(1)\n+SELECT toNullable(1) as k FROM numbers(1) nums\n JOIN (SELECT materialize(1) AS k, number n FROM numbers(100000)) j\n USING k);\n \n SELECT count(1), uniqExact(1) FROM (\n-SELECT toNullable(1) as k FROM numbers(1)\n+SELECT toNullable(1) as k FROM numbers(1) nums\n JOIN (SELECT 1 AS k, number n FROM numbers(100000)) j\n USING k);\n \n SELECT 'second nullable';\n \n SELECT count(1), uniqExact(1) FROM (\n-SELECT materialize(1) as k FROM numbers(1)\n+SELECT materialize(1) as k FROM numbers(1) nums\n JOIN (SELECT materialize(toNullable(1)) AS k, number n FROM numbers(100000)) j\n USING k);\n \n SELECT count(1), uniqExact(1) FROM (\n-SELECT materialize(1) as k FROM numbers(1)\n+SELECT materialize(1) as k FROM numbers(1) nums\n JOIN (SELECT toNullable(1) AS k, number n FROM numbers(100000)) j\n USING k);\n \n SELECT count(1), uniqExact(1) FROM (\n-SELECT 1 as k FROM numbers(1)\n+SELECT 1 as k FROM numbers(1) nums\n JOIN (SELECT materialize(toNullable(1)) AS k, number n FROM numbers(100000)) j\n USING k);\n \n SELECT count(1), uniqExact(1) FROM (\n-SELECT 1 as k FROM numbers(1)\n+SELECT 1 as k FROM numbers(1) nums\n JOIN (SELECT toNullable(1) AS k, number n FROM numbers(100000)) j\n USING k);\n \n SELECT 'both nullable';\n \n SELECT count(1), uniqExact(1) FROM (\n-SELECT materialize(toNullable(1)) as k FROM numbers(1)\n+SELECT materialize(toNullable(1)) as k FROM numbers(1) nums\n JOIN (SELECT materialize(toNullable(1)) AS k, number n FROM numbers(100000)) j\n USING k);\n \n SELECT count(1), uniqExact(1) FROM (\n-SELECT materialize(toNullable(1)) as k FROM numbers(1)\n+SELECT materialize(toNullable(1)) as k FROM numbers(1) nums\n JOIN (SELECT toNullable(1) AS k, number n FROM numbers(100000)) j\n USING k);\n \n SELECT count(1), uniqExact(1) FROM (\n-SELECT toNullable(1) as k FROM numbers(1)\n+SELECT toNullable(1) as k FROM numbers(1) nums\n JOIN (SELECT materialize(toNullable(1)) AS k, number n FROM numbers(100000)) j\n USING k);\n \n SELECT count(1), uniqExact(1) FROM (\n-SELECT toNullable(1) as k FROM numbers(1)\n+SELECT toNullable(1) as k FROM numbers(1) nums\n JOIN (SELECT toNullable(1) AS k, number n FROM numbers(100000)) j\n USING k);\ndiff --git a/dbms/tests/queries/0_stateless/01067_join_null.sql b/dbms/tests/queries/0_stateless/01067_join_null.sql\nindex 606723123685..bc888fe01baf 100644\n--- a/dbms/tests/queries/0_stateless/01067_join_null.sql\n+++ b/dbms/tests/queries/0_stateless/01067_join_null.sql\n@@ -6,7 +6,7 @@ FROM\n     SELECT NULL\n     UNION ALL\n     SELECT NULL\n-)\n+) js1\n ALL FULL OUTER JOIN \n (\n     SELECT 1 AS id\n@@ -14,7 +14,7 @@ ALL FULL OUTER JOIN\n     SELECT NULL\n     UNION ALL\n     SELECT NULL\n-) USING (id)\n+) js2 USING (id)\n ORDER BY id;\n \n SELECT '---';\n@@ -23,11 +23,11 @@ SELECT *\n FROM \n (\n     SELECT NULL AS x\n-)\n+) js1\n INNER JOIN \n (\n     SELECT NULL AS x\n-) USING (x);\n+) js2 USING (x);\n \n SELECT '---';\n \n@@ -35,8 +35,8 @@ SELECT *\n FROM \n (\n     SELECT NULL AS x\n-)\n+) js1\n FULL OUTER JOIN \n (\n     SELECT NULL AS x\n-) USING (x);\n+) js2 USING (x);\ndiff --git a/dbms/tests/queries/0_stateless/01081_PartialSortingTransform_full_column.sql b/dbms/tests/queries/0_stateless/01081_PartialSortingTransform_full_column.sql\nindex 556c967aae19..146107d6f3d3 100644\n--- a/dbms/tests/queries/0_stateless/01081_PartialSortingTransform_full_column.sql\n+++ b/dbms/tests/queries/0_stateless/01081_PartialSortingTransform_full_column.sql\n@@ -2,7 +2,7 @@ drop table if exists test_01081;\n \n create table test_01081 (key Int) engine=MergeTree() order by key;\n insert into test_01081 select * from system.numbers limit 10;\n-select 1 from remote('127.{1,2}', currentDatabase(), test_01081) join system.one as rhs on rhs.dummy = 1 order by 1;\n+select 1 from remote('127.{1,2}', currentDatabase(), test_01081) lhs join system.one as rhs on rhs.dummy = 1 order by 1;\n \n -- With multiple blocks triggers:\n --\n@@ -13,6 +13,6 @@ select 1 from remote('127.{1,2}', currentDatabase(), test_01081) join system.one\n -- With experimental_use_processors=1 (default at the time of writing).\n \n insert into test_01081 select * from system.numbers limit 10;\n-select 1 from remote('127.{1,2}', currentDatabase(), test_01081) join system.one as rhs on rhs.dummy = 1 order by 1;\n+select 1 from remote('127.{1,2}', currentDatabase(), test_01081) lhs join system.one as rhs on rhs.dummy = 1 order by 1;\n \n drop table if exists test_01081;\n",
  "problem_statement": "wrong query result if a subquery (JOINed table) has no alias\n19.5.1.246\r\nNo alias TEST = 1\r\n```\r\nSELECT * FROM (SELECT 1 as TEST, 2 as fake_group) a \r\n      ALL LEFT JOIN (\r\n    SELECT 3 as TEST, 2 as fake_group\r\n    )  USING (fake_group);\r\n\u250c\u2500TEST\u2500\u252c\u2500fake_group\u2500\u252c\u2500TEST\u2500\u2510\r\n\u2502    1 \u2502          2 \u2502    1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\nWith alias X.TEST = 3\r\n```\r\nSELECT * FROM (SELECT 1 as TEST, 2 as fake_group)  \r\n      ALL LEFT JOIN (\r\n    SELECT 3 as TEST, 2 as fake_group\r\n    ) X USING (fake_group);\r\n\u250c\u2500TEST\u2500\u252c\u2500fake_group\u2500\u252c\u2500X.TEST\u2500\u2510\r\n\u2502    1 \u2502          2 \u2502      3 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n\r\n18.14.18 Returns 4 columns and also wrong result\r\n```\r\nSELECT * FROM (SELECT 1 as TEST, 2 as fake_group) a \r\n      ALL LEFT JOIN (\r\n    SELECT 3 as TEST, 2 as fake_group\r\n    )  USING (fake_group);\r\n\u250c\u2500TEST\u2500\u252c\u2500fake_group\u2500\u252c\u2500TEST\u2500\u252c\u2500fake_group\u2500\u2510\r\n\u2502    1 \u2502          2 \u2502    1 \u2502          2 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\n",
  "hints_text": "Maybe it will be easier to forbid subqueries without alias?\r\n\r\nmysql> select * from (select 1 a);\r\nERROR 1248 (42000): Every derived table must have its own alias\r\n\r\npsql=> select * from (select 1 a);\r\nERROR:  subquery in FROM must have an alias\r\n\r\nvertica => select * from (select 1 a);\r\nERROR 4856:  Syntax error at or near \"ERROR\" at character 1\r\nLINE 1: ERROR:  subquery in FROM must have an alias",
  "created_at": "2020-02-21T12:53:12Z"
}