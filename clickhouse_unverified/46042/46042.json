{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 46042,
  "instance_id": "ClickHouse__ClickHouse-46042",
  "issue_numbers": [
    "43370"
  ],
  "base_commit": "282695e7e73e634a5b06e606127820b627fd715c",
  "patch": "diff --git a/src/Functions/FunctionsConversion.h b/src/Functions/FunctionsConversion.h\nindex c34cd3ac8756..55003044ff5b 100644\n--- a/src/Functions/FunctionsConversion.h\n+++ b/src/Functions/FunctionsConversion.h\n@@ -377,7 +377,7 @@ struct ToDateTransform32Or64\n     static NO_SANITIZE_UNDEFINED ToType execute(const FromType & from, const DateLUTImpl & time_zone)\n     {\n         // since converting to Date, no need in values outside of default LUT range.\n-        return (from < DATE_LUT_MAX_DAY_NUM)\n+        return (from <= DATE_LUT_MAX_DAY_NUM)\n             ? from\n             : time_zone.toDayNum(std::min(time_t(from), time_t(0xFFFFFFFF)));\n     }\n@@ -394,7 +394,7 @@ struct ToDateTransform32Or64Signed\n         /// The function should be monotonic (better for query optimizations), so we saturate instead of overflow.\n         if (from < 0)\n             return 0;\n-        return (from < DATE_LUT_MAX_DAY_NUM)\n+        return (from <= DATE_LUT_MAX_DAY_NUM)\n             ? static_cast<ToType>(from)\n             : time_zone.toDayNum(std::min(time_t(from), time_t(0xFFFFFFFF)));\n     }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02540_date_column_consistent_insert_behaviour.reference b/tests/queries/0_stateless/02540_date_column_consistent_insert_behaviour.reference\nnew file mode 100644\nindex 000000000000..5059130c000e\n--- /dev/null\n+++ b/tests/queries/0_stateless/02540_date_column_consistent_insert_behaviour.reference\n@@ -0,0 +1,36 @@\n+2149-06-06\t65535\n+2149-06-06\ttoUInt16(65535)\n+2149-06-06\ttoInt32(65535)\n+2149-06-06\ttoUInt32(65535)\n+2149-06-06\ttoDate(65535)\n+2149-06-06\tCAST(65535 as UInt16)\n+2149-06-06\tCAST(65535 as Int32)\n+2149-06-06\tCAST(65535 as UInt32)\n+2149-06-06\tCAST(65535 as Date)\n+2149-06-05\t65534\n+2149-06-05\ttoUInt16(65534)\n+2149-06-05\ttoInt32(65534)\n+2149-06-05\ttoUInt32(65534)\n+2149-06-05\ttoDate(65534)\n+2149-06-05\tCAST(65534 as UInt16)\n+2149-06-05\tCAST(65534 as Int32)\n+2149-06-05\tCAST(65534 as UInt32)\n+2149-06-05\tCAST(65534 as Date)\n+1970-01-01\t0\n+1970-01-01\ttoUInt16(0)\n+1970-01-01\ttoInt32(0)\n+1970-01-01\ttoUInt32(0)\n+1970-01-01\ttoDate(0)\n+1970-01-01\tCAST(0 as UInt16)\n+1970-01-01\tCAST(0 as Int32)\n+1970-01-01\tCAST(0 as UInt32)\n+1970-01-01\tCAST(0 as Date)\n+1\t65536\n+1\ttoInt32(65536)\n+1\ttoUInt32(65536)\n+1\ttoDate(65536)\n+1\tCAST(65536 as Int32)\n+1\tCAST(65536 as UInt32)\n+1\tCAST(65536 as Date)\n+1970-01-01\ttoUInt16(65536)\n+1970-01-01\tCAST(65536 as UInt16)\ndiff --git a/tests/queries/0_stateless/02540_date_column_consistent_insert_behaviour.sql b/tests/queries/0_stateless/02540_date_column_consistent_insert_behaviour.sql\nnew file mode 100644\nindex 000000000000..8a5c88fcae48\n--- /dev/null\n+++ b/tests/queries/0_stateless/02540_date_column_consistent_insert_behaviour.sql\n@@ -0,0 +1,99 @@\n+DROP TABLE IF EXISTS 02540_date;\n+CREATE TABLE 02540_date (txt String, x Date) engine=Memory;\n+\n+-- Date: Supported range of values: [1970-01-01, 2149-06-06].\n+--                                  ^----closed interval---^\n+\n+INSERT INTO 02540_date VALUES('65535', 65535);\n+INSERT INTO 02540_date VALUES('toUInt16(65535)', toUInt16(65535)); -- #43370 weird one -> used to be 1970-01-01\n+INSERT INTO 02540_date VALUES('toInt32(65535)', toInt32(65535));\n+INSERT INTO 02540_date VALUES('toUInt32(65535)', toUInt32(65535));\n+INSERT INTO 02540_date VALUES('toDate(65535)', toDate(65535));\n+\n+INSERT INTO 02540_date VALUES('CAST(65535 as UInt16)', CAST(65535 as UInt16));\n+INSERT INTO 02540_date VALUES('CAST(65535 as Int32)', CAST(65535 as Int32));\n+INSERT INTO 02540_date VALUES('CAST(65535 as UInt32)', CAST(65535 as UInt32));\n+INSERT INTO 02540_date VALUES('CAST(65535 as Date)', CAST(65535 as Date));\n+\n+INSERT INTO 02540_date VALUES('65534', 65534);\n+INSERT INTO 02540_date VALUES('toUInt16(65534)', toUInt16(65534));\n+INSERT INTO 02540_date VALUES('toInt32(65534)', toInt32(65534));\n+INSERT INTO 02540_date VALUES('toUInt32(65534)', toUInt32(65534));\n+INSERT INTO 02540_date VALUES('toDate(65534)', toDate(65534));\n+\n+INSERT INTO 02540_date VALUES('CAST(65534 as UInt16)', CAST(65534 as UInt16));\n+INSERT INTO 02540_date VALUES('CAST(65534 as Int32)', CAST(65534 as Int32));\n+INSERT INTO 02540_date VALUES('CAST(65534 as UInt32)', CAST(65534 as UInt32));\n+INSERT INTO 02540_date VALUES('CAST(65534 as Date)', CAST(65534 as Date));\n+\n+INSERT INTO 02540_date VALUES('0', 0);\n+INSERT INTO 02540_date VALUES('toUInt16(0)', toUInt16(0));\n+INSERT INTO 02540_date VALUES('toInt32(0)', toInt32(0));\n+INSERT INTO 02540_date VALUES('toUInt32(0)', toUInt32(0));\n+INSERT INTO 02540_date VALUES('toDate(0)', toDate(0));\n+\n+INSERT INTO 02540_date VALUES('CAST(0 as UInt16)', CAST(0 as UInt16));\n+INSERT INTO 02540_date VALUES('CAST(0 as Int32)', CAST(0 as Int32));\n+INSERT INTO 02540_date VALUES('CAST(0 as UInt32)', CAST(0 as UInt32));\n+INSERT INTO 02540_date VALUES('CAST(0 as Date)', CAST(0 as Date));\n+\n+\n+-- 65536 will be done using the TZ settings (comments in #45914)\n+-- We can expect either 1970-01-01 or 1970-01-02\n+-- time_zone.toDayNum(std::min(time_t(from), time_t(0xFFFFFFFF)))\n+INSERT INTO 02540_date VALUES('65536', 65536);\n+INSERT INTO 02540_date VALUES('toUInt16(65536)', toUInt16(65536)); -- Narrowing conversion 65536 ==> 0\n+INSERT INTO 02540_date VALUES('toInt32(65536)', toInt32(65536));\n+INSERT INTO 02540_date VALUES('toUInt32(65536)', toUInt32(65536));\n+INSERT INTO 02540_date VALUES('toDate(65536)', toDate(65536));\n+\n+INSERT INTO 02540_date VALUES('CAST(65536 as UInt16)', CAST(65536 as UInt16)); -- Narrowing conversion 65536 ==> 0\n+INSERT INTO 02540_date VALUES('CAST(65536 as Int32)', CAST(65536 as Int32));\n+INSERT INTO 02540_date VALUES('CAST(65536 as UInt32)', CAST(65536 as UInt32));\n+INSERT INTO 02540_date VALUES('CAST(65536 as Date)', CAST(65536 as Date));\n+\n+\n+SELECT x, txt FROM 02540_date WHERE txt == '65535';\n+SELECT x, txt FROM 02540_date WHERE txt == 'toUInt16(65535)';\n+SELECT x, txt FROM 02540_date WHERE txt == 'toInt32(65535)';\n+SELECT x, txt FROM 02540_date WHERE txt == 'toUInt32(65535)';\n+SELECT x, txt FROM 02540_date WHERE txt == 'toDate(65535)';\n+\n+SELECT x, txt FROM 02540_date WHERE txt == 'CAST(65535 as UInt16)';\n+SELECT x, txt FROM 02540_date WHERE txt == 'CAST(65535 as Int32)';\n+SELECT x, txt FROM 02540_date WHERE txt == 'CAST(65535 as UInt32)';\n+SELECT x, txt FROM 02540_date WHERE txt == 'CAST(65535 as Date)';\n+\n+SELECT x, txt FROM 02540_date WHERE txt == '65534';\n+SELECT x, txt FROM 02540_date WHERE txt == 'toUInt16(65534)';\n+SELECT x, txt FROM 02540_date WHERE txt == 'toInt32(65534)';\n+SELECT x, txt FROM 02540_date WHERE txt == 'toUInt32(65534)';\n+SELECT x, txt FROM 02540_date WHERE txt == 'toDate(65534)';\n+\n+SELECT x, txt FROM 02540_date WHERE txt == 'CAST(65534 as UInt16)';\n+SELECT x, txt FROM 02540_date WHERE txt == 'CAST(65534 as Int32)';\n+SELECT x, txt FROM 02540_date WHERE txt == 'CAST(65534 as UInt32)';\n+SELECT x, txt FROM 02540_date WHERE txt == 'CAST(65534 as Date)';\n+\n+SELECT x, txt FROM 02540_date WHERE txt == '0';\n+SELECT x, txt FROM 02540_date WHERE txt == 'toUInt16(0)';\n+SELECT x, txt FROM 02540_date WHERE txt == 'toInt32(0)';\n+SELECT x, txt FROM 02540_date WHERE txt == 'toUInt32(0)';\n+SELECT x, txt FROM 02540_date WHERE txt == 'toDate(0)';\n+\n+SELECT x, txt FROM 02540_date WHERE txt == 'CAST(0 as UInt16)';\n+SELECT x, txt FROM 02540_date WHERE txt == 'CAST(0 as Int32)';\n+SELECT x, txt FROM 02540_date WHERE txt == 'CAST(0 as UInt32)';\n+SELECT x, txt FROM 02540_date WHERE txt == 'CAST(0 as Date)';\n+\n+SELECT (x == CAST(65536 as Date)), txt FROM 02540_date WHERE txt == '65536';\n+SELECT (x == CAST(65536 as Date)), txt FROM 02540_date WHERE txt == 'toInt32(65536)';\n+SELECT (x == CAST(65536 as Date)), txt FROM 02540_date WHERE txt == 'toUInt32(65536)';\n+SELECT (x == CAST(65536 as Date)), txt FROM 02540_date WHERE txt == 'toDate(65536)';\n+\n+SELECT (x == CAST(65536 as Date)), txt FROM 02540_date WHERE txt == 'CAST(65536 as Int32)';\n+SELECT (x == CAST(65536 as Date)), txt FROM 02540_date WHERE txt == 'CAST(65536 as UInt32)';\n+SELECT (x == CAST(65536 as Date)), txt FROM 02540_date WHERE txt == 'CAST(65536 as Date)';\n+\n+SELECT x, txt FROM 02540_date WHERE txt == 'toUInt16(65536)';\n+SELECT x, txt FROM 02540_date WHERE txt == 'CAST(65536 as UInt16)';\n",
  "problem_statement": "toDate conversion does not match Date column conversion\n**Describe the unexpected behaviour**\r\nUsing `toDate(integer`) returns a different value than inserting the same integer into a Date column.\r\n\r\n**How to reproduce**\r\n* Which ClickHouse server version to use\r\nClickHouse server version 22.8.6 revision 54460\r\n```\r\nclickhouse1 :) select toDate(65535)\r\n\r\nSELECT toDate(65535)\r\n\r\nQuery id: 11870fad-31b0-4822-8d16-05ee9ef7d13e\r\n\r\n\u250c\u2500toDate(65535)\u2500\u2510\r\n\u2502    2149-06-06 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nclickhouse1 :) create table y (z Date) engine=Memory\r\n\r\nCREATE TABLE y\r\n(\r\n    `z` Date\r\n)\r\nENGINE = Memory\r\n\r\nQuery id: c4436573-c4da-4c22-a48c-401adb935a39\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.005 sec. \r\n\r\nclickhouse1 :) insert into y values (65535)\r\n\r\nINSERT INTO y FORMAT Values\r\n\r\nQuery id: e8d58889-de37-4d51-abfd-107893ace403\r\n\r\nOk.\r\n\r\n1 row in set. Elapsed: 0.005 sec. \r\n\r\nclickhouse1 :) select * from y\r\n\r\nSELECT *\r\nFROM y\r\n\r\nQuery id: e2bff938-211c-4c05-97f9-3e74bf34261f\r\n\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500z\u2500\u2510\r\n\u2502 1970-01-01 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.003 sec. \r\n```\n",
  "hints_text": "It seems weird indeed, especially when trying out this:\r\n\r\n```sql\r\nINSERT INTO y VALUES (65535) -- results in 1970-01-01\r\nINSERT INTO y VALUES (toUInt16(65535)) -- results in 2149-06-06\r\n\r\nSELECT toTypeName(65535) -- results in UInt16\r\n```\r\n\r\nI'd like to have a go with this issue.",
  "created_at": "2023-02-04T11:24:33Z",
  "modified_files": [
    "src/Functions/FunctionsConversion.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02540_date_column_consistent_insert_behaviour.reference",
    "b/tests/queries/0_stateless/02540_date_column_consistent_insert_behaviour.sql"
  ]
}