{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 51496,
  "instance_id": "ClickHouse__ClickHouse-51496",
  "issue_numbers": [
    "51400"
  ],
  "base_commit": "49c1beb8705399dfb40ae5213ebca70ba31e3852",
  "patch": "diff --git a/docs/en/operations/system-tables/parts.md b/docs/en/operations/system-tables/parts.md\nindex 5829e5ad3134..8113b850a382 100644\n--- a/docs/en/operations/system-tables/parts.md\n+++ b/docs/en/operations/system-tables/parts.md\n@@ -39,6 +39,8 @@ Columns:\n \n - `data_uncompressed_bytes` ([UInt64](../../sql-reference/data-types/int-uint.md)) \u2013 Total size of uncompressed data in the data part. All the auxiliary files (for example, files with marks) are not included.\n \n+- `primary_key_size` ([UInt64](../../sql-reference/data-types/int-uint.md)) \u2013 The amount of memory (in bytes) used by primary key values in the primary.idx/cidx file on disk.\n+\n - `marks_bytes` ([UInt64](../../sql-reference/data-types/int-uint.md)) \u2013 The size of the file with marks.\n \n - `secondary_indices_compressed_bytes` ([UInt64](../../sql-reference/data-types/int-uint.md)) \u2013 Total size of compressed data for secondary indices in the data part. All the auxiliary files (for example, files with marks) are not included.\ndiff --git a/src/Storages/MergeTree/IMergeTreeDataPart.cpp b/src/Storages/MergeTree/IMergeTreeDataPart.cpp\nindex ec157a01c219..7050a98a4bc0 100644\n--- a/src/Storages/MergeTree/IMergeTreeDataPart.cpp\n+++ b/src/Storages/MergeTree/IMergeTreeDataPart.cpp\n@@ -1,5 +1,6 @@\n #include \"IMergeTreeDataPart.h\"\n-#include \"Storages/MergeTree/IDataPartStorage.h\"\n+#include <Storages/MergeTree/IDataPartStorage.h>\n+#include <base/types.h>\n \n #include <optional>\n #include <boost/algorithm/string/join.hpp>\n@@ -1816,6 +1817,22 @@ MutableDataPartStoragePtr IMergeTreeDataPart::makeCloneOnDisk(const DiskPtr & di\n     return getDataPartStorage().clonePart(path_to_clone, getDataPartStorage().getPartDirectory(), disk, storage.log);\n }\n \n+UInt64 IMergeTreeDataPart::getIndexSizeFromFile() const\n+{\n+    auto metadata_snapshot = storage.getInMemoryMetadataPtr();\n+    if (parent_part)\n+        metadata_snapshot = metadata_snapshot->projections.get(name).metadata;\n+    const auto & pk = metadata_snapshot->getPrimaryKey();\n+    if (!pk.column_names.empty())\n+    {\n+        String file = \"primary\" + getIndexExtension(false);\n+        if (checksums.files.contains(\"primary\" + getIndexExtension(true)))\n+            file = \"primary\" + getIndexExtension(true);\n+        return getFileSizeOrZero(file);\n+    }\n+    return 0;\n+}\n+\n void IMergeTreeDataPart::checkConsistencyBase() const\n {\n     auto metadata_snapshot = storage.getInMemoryMetadataPtr();\ndiff --git a/src/Storages/MergeTree/IMergeTreeDataPart.h b/src/Storages/MergeTree/IMergeTreeDataPart.h\nindex 2c0cf37b3a57..a80e32ff650f 100644\n--- a/src/Storages/MergeTree/IMergeTreeDataPart.h\n+++ b/src/Storages/MergeTree/IMergeTreeDataPart.h\n@@ -353,6 +353,7 @@ class IMergeTreeDataPart : public std::enable_shared_from_this<IMergeTreeDataPar\n     UInt64 getIndexSizeInBytes() const;\n     UInt64 getIndexSizeInAllocatedBytes() const;\n     UInt64 getMarksCount() const;\n+    UInt64 getIndexSizeFromFile() const;\n \n     UInt64 getBytesOnDisk() const { return bytes_on_disk; }\n     void setBytesOnDisk(UInt64 bytes_on_disk_) { bytes_on_disk = bytes_on_disk_; }\ndiff --git a/src/Storages/System/StorageSystemParts.cpp b/src/Storages/System/StorageSystemParts.cpp\nindex 7399bd789a7b..26cf96dc9b3f 100644\n--- a/src/Storages/System/StorageSystemParts.cpp\n+++ b/src/Storages/System/StorageSystemParts.cpp\n@@ -57,6 +57,7 @@ StorageSystemParts::StorageSystemParts(const StorageID & table_id_)\n         {\"bytes_on_disk\",                               std::make_shared<DataTypeUInt64>()},\n         {\"data_compressed_bytes\",                       std::make_shared<DataTypeUInt64>()},\n         {\"data_uncompressed_bytes\",                     std::make_shared<DataTypeUInt64>()},\n+        {\"primary_key_size\",                            std::make_shared<DataTypeUInt64>()},\n         {\"marks_bytes\",                                 std::make_shared<DataTypeUInt64>()},\n         {\"secondary_indices_compressed_bytes\",          std::make_shared<DataTypeUInt64>()},\n         {\"secondary_indices_uncompressed_bytes\",        std::make_shared<DataTypeUInt64>()},\n@@ -168,6 +169,8 @@ void StorageSystemParts::processNextStorage(\n             columns[res_index++]->insert(columns_size.data_compressed);\n         if (columns_mask[src_index++])\n             columns[res_index++]->insert(columns_size.data_uncompressed);\n+        if (columns_mask[src_index++])\n+            columns[res_index++]->insert(part->getIndexSizeFromFile());\n         if (columns_mask[src_index++])\n             columns[res_index++]->insert(columns_size.marks);\n         if (columns_mask[src_index++])\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02117_show_create_table_system.reference b/tests/queries/0_stateless/02117_show_create_table_system.reference\nindex 3c221d6a473a..3b3186f8cc09 100644\n--- a/tests/queries/0_stateless/02117_show_create_table_system.reference\n+++ b/tests/queries/0_stateless/02117_show_create_table_system.reference\n@@ -466,6 +466,7 @@ CREATE TABLE system.parts\n     `bytes_on_disk` UInt64,\n     `data_compressed_bytes` UInt64,\n     `data_uncompressed_bytes` UInt64,\n+    `primary_key_size` UInt64,\n     `marks_bytes` UInt64,\n     `secondary_indices_compressed_bytes` UInt64,\n     `secondary_indices_uncompressed_bytes` UInt64,\n",
  "problem_statement": "Add column `primary_key_bytes` to the `system.parts` table, telling the size of the primary.idx/cidx file on disk.\n\n",
  "hints_text": "",
  "created_at": "2023-06-27T17:09:56Z",
  "modified_files": [
    "docs/en/operations/system-tables/parts.md",
    "src/Storages/MergeTree/IMergeTreeDataPart.cpp",
    "src/Storages/MergeTree/IMergeTreeDataPart.h",
    "src/Storages/System/StorageSystemParts.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/02117_show_create_table_system.reference"
  ]
}