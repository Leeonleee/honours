{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 30492,
  "instance_id": "ClickHouse__ClickHouse-30492",
  "issue_numbers": [
    "30461"
  ],
  "base_commit": "58ee783be49f37bd2bd52dec059a2469675dc63e",
  "patch": "diff --git a/src/Interpreters/MutationsInterpreter.cpp b/src/Interpreters/MutationsInterpreter.cpp\nindex bfa8a06c6181..471ad67d4e75 100644\n--- a/src/Interpreters/MutationsInterpreter.cpp\n+++ b/src/Interpreters/MutationsInterpreter.cpp\n@@ -6,6 +6,7 @@\n #include <Interpreters/TreeRewriter.h>\n #include <Storages/MergeTree/MergeTreeData.h>\n #include <Storages/MergeTree/StorageFromMergeTreeDataPart.h>\n+#include <Storages/StorageMergeTree.h>\n #include <Processors/Transforms/FilterTransform.h>\n #include <Processors/Transforms/ExpressionTransform.h>\n #include <Processors/Transforms/CreatingSetsTransform.h>\n@@ -784,8 +785,12 @@ ASTPtr MutationsInterpreter::prepareInterpreterSelectQuery(std::vector<Stage> &\n         for (const String & column : stage.output_columns)\n             all_asts->children.push_back(std::make_shared<ASTIdentifier>(column));\n \n-        auto syntax_result = TreeRewriter(context).analyze(all_asts, all_columns, storage, metadata_snapshot);\n-        if (context->hasQueryContext())\n+        /// Executing scalar subquery on that stage can lead to deadlock\n+        /// e.g. ALTER referencing the same table in scalar subquery\n+        bool execute_scalar_subqueries = !dry_run;\n+        auto syntax_result = TreeRewriter(context).analyze(\n+            all_asts, all_columns, storage, metadata_snapshot, false, true, execute_scalar_subqueries);\n+        if (execute_scalar_subqueries && context->hasQueryContext())\n             for (const auto & it : syntax_result->getScalars())\n                 context->getQueryContext()->addScalar(it.first, it.second);\n \ndiff --git a/src/Interpreters/TreeRewriter.cpp b/src/Interpreters/TreeRewriter.cpp\nindex 9bcddb6b9829..e0968b7fce42 100644\n--- a/src/Interpreters/TreeRewriter.cpp\n+++ b/src/Interpreters/TreeRewriter.cpp\n@@ -1100,7 +1100,8 @@ TreeRewriterResultPtr TreeRewriter::analyze(\n     ConstStoragePtr storage,\n     const StorageMetadataPtr & metadata_snapshot,\n     bool allow_aggregations,\n-    bool allow_self_aliases) const\n+    bool allow_self_aliases,\n+    bool execute_scalar_subqueries) const\n {\n     if (query->as<ASTSelectQuery>())\n         throw Exception(\"Not select analyze for select asts.\", ErrorCodes::LOGICAL_ERROR);\n@@ -1112,7 +1113,7 @@ TreeRewriterResultPtr TreeRewriter::analyze(\n     normalize(query, result.aliases, result.source_columns_set, false, settings, allow_self_aliases);\n \n     /// Executing scalar subqueries. Column defaults could be a scalar subquery.\n-    executeScalarSubqueries(query, getContext(), 0, result.scalars, false);\n+    executeScalarSubqueries(query, getContext(), 0, result.scalars, !execute_scalar_subqueries);\n \n     if (settings.legacy_column_name_of_tuple_literal)\n         markTupleLiteralsAsLegacy(query);\ndiff --git a/src/Interpreters/TreeRewriter.h b/src/Interpreters/TreeRewriter.h\nindex 98201f35216e..52c62cc4cec4 100644\n--- a/src/Interpreters/TreeRewriter.h\n+++ b/src/Interpreters/TreeRewriter.h\n@@ -110,7 +110,8 @@ class TreeRewriter : WithContext\n         ConstStoragePtr storage = {},\n         const StorageMetadataPtr & metadata_snapshot = {},\n         bool allow_aggregations = false,\n-        bool allow_self_aliases = true) const;\n+        bool allow_self_aliases = true,\n+        bool execute_scalar_subqueries = true) const;\n \n     /// Analyze and rewrite select query\n     TreeRewriterResultPtr analyzeSelect(\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02100_alter_scalar_circular_deadlock.reference b/tests/queries/0_stateless/02100_alter_scalar_circular_deadlock.reference\nnew file mode 100644\nindex 000000000000..98fb6a686563\n--- /dev/null\n+++ b/tests/queries/0_stateless/02100_alter_scalar_circular_deadlock.reference\n@@ -0,0 +1,4 @@\n+1\n+1\n+1\n+1\ndiff --git a/tests/queries/0_stateless/02100_alter_scalar_circular_deadlock.sql b/tests/queries/0_stateless/02100_alter_scalar_circular_deadlock.sql\nnew file mode 100644\nindex 000000000000..32b757f54a37\n--- /dev/null\n+++ b/tests/queries/0_stateless/02100_alter_scalar_circular_deadlock.sql\n@@ -0,0 +1,34 @@\n+DROP TABLE IF EXISTS foo;\n+\n+CREATE TABLE foo (ts DateTime, x UInt64)\n+ENGINE = MergeTree PARTITION BY toYYYYMMDD(ts)\n+ORDER BY (ts);\n+\n+INSERT INTO foo (ts, x) SELECT toDateTime('2020-01-01 00:05:00'), number from system.numbers_mt LIMIT 10;\n+\n+SET mutations_sync = 1;\n+\n+ALTER TABLE foo UPDATE x = 1 WHERE x = (SELECT x from foo WHERE x = 4);\n+\n+SELECT sum(x) == 42 FROM foo;\n+\n+ALTER TABLE foo UPDATE x = 1 WHERE x IN (SELECT x FROM foo WHERE x != 0);\n+\n+SELECT sum(x) == 9 FROM foo;\n+\n+DROP TABLE IF EXISTS bar;\n+\n+CREATE TABLE bar (ts DateTime, x UInt64)\n+ENGINE = Memory;\n+\n+INSERT INTO bar (ts, x) SELECT toDateTime('2020-01-01 00:05:00'), number from system.numbers_mt LIMIT 10;\n+\n+SET mutations_sync = 1;\n+\n+ALTER TABLE bar UPDATE x = 1 WHERE x = (SELECT x from bar WHERE x = 4);\n+\n+SELECT sum(x) == 42 FROM bar;\n+\n+ALTER TABLE bar UPDATE x = 1 WHERE x IN (SELECT x FROM bar WHERE x != 0);\n+\n+SELECT sum(x) == 9 FROM bar;\n",
  "problem_statement": "Deadlock on ALTER with scalar subquery to the same table\n```\r\nDROP TABLE IF EXISTS foo;\r\n\r\nCREATE TABLE foo (timestamp DateTime, x UInt64)\r\nENGINE = MergeTree PARTITION BY toYYYYMMDD(timestamp)\r\nORDER BY (timestamp);\r\n\r\nINSERT INTO foo (timestamp, x) SELECT toDateTime('2020-01-01 00:05:00'), number from system.numbers_mt LIMIT 100;\r\n\r\nSELECT count() FROM system.mutations; -- ok\r\n\r\nALTER TABLE foo UPDATE x = 1 WHERE x = (SELECT x from foo WHERE x = 1);\r\n\r\nSELECT count() FROM system.mutations; -- stuck\r\n\r\n```\n",
  "hints_text": "https://nda.ya.ru/t/1zIhE4Aa4NRgjG",
  "created_at": "2021-10-21T11:03:16Z"
}