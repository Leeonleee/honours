{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 61969,
  "instance_id": "ClickHouse__ClickHouse-61969",
  "issue_numbers": [
    "61934"
  ],
  "base_commit": "1ae8a9fc6fae313476279fe0c52caaef5f1bfc51",
  "patch": "diff --git a/src/TableFunctions/TableFunctionNumbers.cpp b/src/TableFunctions/TableFunctionNumbers.cpp\nindex 16f56eab9812..7d8004003748 100644\n--- a/src/TableFunctions/TableFunctionNumbers.cpp\n+++ b/src/TableFunctions/TableFunctionNumbers.cpp\n@@ -71,21 +71,30 @@ StoragePtr TableFunctionNumbers<multithreaded>::executeImpl(\n     {\n         auto arguments = function->arguments->children;\n \n-        if ((arguments.empty()) || (arguments.size() >= 4))\n+        if (arguments.size() >= 4)\n             throw Exception(\n-                ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH, \"Table function '{}' requires 'length' or 'offset, length'.\", getName());\n-\n-        UInt64 offset = arguments.size() >= 2 ? evaluateArgument(context, arguments[0]) : 0;\n-        UInt64 length = arguments.size() >= 2 ? evaluateArgument(context, arguments[1]) : evaluateArgument(context, arguments[0]);\n-        UInt64 step = arguments.size() == 3 ? evaluateArgument(context, arguments[2]) : 1;\n-\n-        if (!step)\n-            throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Table function {} requires step to be a positive number\", getName());\n-\n-        auto res = std::make_shared<StorageSystemNumbers>(\n-            StorageID(getDatabaseName(), table_name), multithreaded, std::string{\"number\"}, length, offset, step);\n-        res->startup();\n-        return res;\n+                ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH, \"Table function '{}' cannot have more than three params\", getName());\n+        if (!arguments.empty())\n+        {\n+            UInt64 offset = arguments.size() >= 2 ? evaluateArgument(context, arguments[0]) : 0;\n+            UInt64 length = arguments.size() >= 2 ? evaluateArgument(context, arguments[1]) : evaluateArgument(context, arguments[0]);\n+            UInt64 step = arguments.size() == 3 ? evaluateArgument(context, arguments[2]) : 1;\n+\n+            if (!step)\n+                throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Table function {} requires step to be a positive number\", getName());\n+\n+            auto res = std::make_shared<StorageSystemNumbers>(\n+                StorageID(getDatabaseName(), table_name), multithreaded, std::string{\"number\"}, length, offset, step);\n+            res->startup();\n+            return res;\n+        }\n+        else\n+        {\n+            auto res = std::make_shared<StorageSystemNumbers>(\n+                StorageID(getDatabaseName(), table_name), multithreaded, std::string{\"number\"});\n+            res->startup();\n+            return res;\n+        }\n     }\n     throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH, \"Table function '{}' requires 'limit' or 'offset, limit'.\", getName());\n }\ndiff --git a/src/TableFunctions/TableFunctionZeros.cpp b/src/TableFunctions/TableFunctionZeros.cpp\nindex f23b6540959c..5cc02c3e76bf 100644\n--- a/src/TableFunctions/TableFunctionZeros.cpp\n+++ b/src/TableFunctions/TableFunctionZeros.cpp\n@@ -55,15 +55,24 @@ StoragePtr TableFunctionZeros<multithreaded>::executeImpl(const ASTPtr & ast_fun\n     {\n         auto arguments = function->arguments->children;\n \n-        if (arguments.size() != 1)\n-            throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH, \"Table function '{}' requires 'length'.\", getName());\n-\n-\n-        UInt64 length = evaluateArgument(context, arguments[0]);\n-\n-        auto res = std::make_shared<StorageSystemZeros>(StorageID(getDatabaseName(), table_name), multithreaded, length);\n-        res->startup();\n-        return res;\n+        if (arguments.size() > 1)\n+            throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH, \"Table function '{}' cannot have more than one params\", getName());\n+\n+        if (!arguments.empty())\n+        {\n+            UInt64 length = evaluateArgument(context, arguments[0]);\n+\n+            auto res = std::make_shared<StorageSystemZeros>(StorageID(getDatabaseName(), table_name), multithreaded, length);\n+            res->startup();\n+            return res;\n+        }\n+        else\n+        {\n+            /// zero-argument, the same as system.zeros\n+            auto res = std::make_shared<StorageSystemZeros>(StorageID(getDatabaseName(), table_name), multithreaded);\n+            res->startup();\n+            return res;\n+        }\n     }\n     throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH, \"Table function '{}' requires 'limit'.\", getName());\n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03032_numbers_zeros.reference b/tests/queries/0_stateless/03032_numbers_zeros.reference\nnew file mode 100644\nindex 000000000000..06652cef042d\n--- /dev/null\n+++ b/tests/queries/0_stateless/03032_numbers_zeros.reference\n@@ -0,0 +1,144 @@\n+------numbers_0-argument-----\n+0\n+1\n+2\n+3\n+4\n+5\n+6\n+7\n+8\n+9\n+------system.numbers---------\n+0\n+1\n+2\n+3\n+4\n+5\n+6\n+7\n+8\n+9\n+------numbers_1-argument-----\n+0\n+1\n+2\n+3\n+4\n+5\n+6\n+7\n+8\n+9\n+------numbers_2-arguments----\n+10\n+11\n+12\n+13\n+14\n+15\n+16\n+17\n+18\n+19\n+------numbers_3-arguments----\n+10\n+12\n+14\n+16\n+18\n+------numbers_mt_0-argument-----\n+0\n+1\n+2\n+3\n+4\n+5\n+6\n+7\n+8\n+9\n+------numbers_mt_1-argument-----\n+0\n+1\n+2\n+3\n+4\n+5\n+6\n+7\n+8\n+9\n+------numbers_mt_2-arguments----\n+10\n+11\n+12\n+13\n+14\n+15\n+16\n+17\n+18\n+19\n+------numbers_mt_3-arguments----\n+10\n+12\n+14\n+16\n+18\n+------zeros_0-argument-------\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+------system.zeros-----------\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+------zeros_1-argument-------\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+------zeros_mt_0-argument-------\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+------zeros_mt_1-argument-------\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\ndiff --git a/tests/queries/0_stateless/03032_numbers_zeros.sql b/tests/queries/0_stateless/03032_numbers_zeros.sql\nnew file mode 100644\nindex 000000000000..0c60ed93308f\n--- /dev/null\n+++ b/tests/queries/0_stateless/03032_numbers_zeros.sql\n@@ -0,0 +1,28 @@\n+SELECT '------numbers_0-argument-----';\n+SELECT number FROM numbers() LIMIT 10;\n+SELECT '------system.numbers---------';\n+SELECT number FROM system.numbers LIMIT 10;\n+SELECT '------numbers_1-argument-----';\n+SELECT number FROM numbers(10);\n+SELECT '------numbers_2-arguments----';\n+SELECT number FROM numbers(10,10);\n+SELECT '------numbers_3-arguments----';\n+SELECT number FROM numbers(10,10,2);\n+SELECT '------numbers_mt_0-argument-----';\n+SELECT number FROM numbers_mt() LIMIT 10;\n+SELECT '------numbers_mt_1-argument-----';\n+SELECT number FROM numbers_mt(10);\n+SELECT '------numbers_mt_2-arguments----';\n+SELECT number FROM numbers_mt(10,10);\n+SELECT '------numbers_mt_3-arguments----';\n+SELECT number FROM numbers_mt(10,10,2);\n+SELECT '------zeros_0-argument-------';\n+SELECT zero FROM zeros() LIMIT 10;\n+SELECT '------system.zeros-----------';\n+SELECT zero FROM system.zeros LIMIT 10;\n+SELECT '------zeros_1-argument-------';\n+SELECT zero FROM zeros(10);\n+SELECT '------zeros_mt_0-argument-------';\n+SELECT zero FROM zeros_mt() LIMIT 10;\n+SELECT '------zeros_mt_1-argument-------';\n+SELECT zero FROM zeros_mt(10);\n",
  "problem_statement": "Zero-argument variants for table functions `numbers`, `numbers_mt`, `zeros`, and `zeros_mt`\n**Use case**\r\n\r\nConvenience.\r\n\r\n**Describe the solution you'd like**\r\n\r\n`SELECT * FROM numbers()` will work in the same way as `SELECT * FROM system.numbers` - without a limit.\n",
  "hints_text": "I want to try this task, pls assign it to me.",
  "created_at": "2024-03-27T08:23:04Z",
  "modified_files": [
    "src/TableFunctions/TableFunctionNumbers.cpp",
    "src/TableFunctions/TableFunctionZeros.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03032_numbers_zeros.reference",
    "b/tests/queries/0_stateless/03032_numbers_zeros.sql"
  ]
}