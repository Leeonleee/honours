{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 78444,
  "instance_id": "ClickHouse__ClickHouse-78444",
  "issue_numbers": [
    "78353"
  ],
  "base_commit": "b5ef4954c3468e686c61745835c2952b8bb3ea22",
  "patch": "diff --git a/docs/en/sql-reference/functions/bitmap-functions.md b/docs/en/sql-reference/functions/bitmap-functions.md\nindex 6e21ca7c5eb4..9c47e5ef7ab0 100644\n--- a/docs/en/sql-reference/functions/bitmap-functions.md\n+++ b/docs/en/sql-reference/functions/bitmap-functions.md\n@@ -284,7 +284,7 @@ Result:\n \n ## bitmapMin {#bitmapmin}\n \n-Computes the smallest bit set in a bitmap, or UINT32_MAX if the bitmap is empty.\n+Computes the smallest bit set in a bitmap, or UINT32_MAX if the bitmap is empty(UINT64_MAX if type >= 8 bits).\n \n **Syntax**\n \ndiff --git a/src/AggregateFunctions/AggregateFunctionGroupBitmapData.h b/src/AggregateFunctions/AggregateFunctionGroupBitmapData.h\nindex 4f09d61638aa..cb19870a3ce7 100644\n--- a/src/AggregateFunctions/AggregateFunctionGroupBitmapData.h\n+++ b/src/AggregateFunctions/AggregateFunctionGroupBitmapData.h\n@@ -604,7 +604,11 @@ class RoaringBitmapWithSmallSet : private boost::noncopyable\n         if (isSmall())\n         {\n             if (small.empty())\n-                return 0;\n+            {\n+                if constexpr (sizeof(T) >= 8)\n+                    return std::numeric_limits<UInt64>::max();\n+                return std::numeric_limits<UInt32>::max();\n+            }\n             auto min_val = std::numeric_limits<UnsignedT>::max();\n             for (const auto & x : small)\n             {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00829_bitmap_function.reference b/tests/queries/0_stateless/00829_bitmap_function.reference\nindex f403907bce4e..839ead529326 100644\n--- a/tests/queries/0_stateless/00829_bitmap_function.reference\n+++ b/tests/queries/0_stateless/00829_bitmap_function.reference\n@@ -99,9 +99,10 @@ tag4\t[0,1,2,3,4,5,6,7,8,9]\t[5,999,2]\t[2,888,20]\t[0,1,3,4,6,7,8,9,20]\n [0,1,2,3,4,5,6,7,8,9]\n [30,31,32,33,100,200,500]\n [100,200,500]\n-0\n-0\n-0\n+4294967295\n+4294967295\n+4294967295\n+18446744073709551615\n 1\n 0\n 0\ndiff --git a/tests/queries/0_stateless/00829_bitmap_function.sql b/tests/queries/0_stateless/00829_bitmap_function.sql\nindex 420b5edcf20a..74a4a11eadb6 100644\n--- a/tests/queries/0_stateless/00829_bitmap_function.sql\n+++ b/tests/queries/0_stateless/00829_bitmap_function.sql\n@@ -311,6 +311,7 @@ select bitmapToArray(subBitmap(bitmapBuild([\n SELECT bitmapMin(bitmapBuild(emptyArrayUInt8()));\n SELECT bitmapMin(bitmapBuild(emptyArrayUInt16()));\n SELECT bitmapMin(bitmapBuild(emptyArrayUInt32()));\n+SELECT bitmapMin(bitmapBuild(emptyArrayUInt64()));\n ---- Small\n select bitmapMin(bitmapBuild([1,5,7,9]));\n ---- Large\n",
  "problem_statement": "bitmapMin with empty bitmap\n### Company or project name\n\n_No response_\n\n### Describe what's wrong\n\n`SELECT bitmapMin(bitmapBuild(cast([] AS Array(UInt32)))) AS min_val;` gives `0`.\n\nBut https://clickhouse.com/docs/sql-reference/functions/bitmap-functions#bitmapmin says it should return UINT32_MAX.\n\nAm I misunderstanding something?\n\n\n### Does it reproduce on the most recent release?\n\nYes\n\n### How to reproduce\n\nSELECT bitmapMin(bitmapBuild(cast([] AS Array(UInt32)))) AS min_val;\n\n### Expected behavior\n\nUINT32_MAX\n\n### Error message and/or stacktrace\n\nThe actual result is 0\n\n### Additional context\n\n_No response_\n",
  "hints_text": "It looks like there is a bug, I'd like to fix it:)",
  "created_at": "2025-03-30T18:37:55Z"
}