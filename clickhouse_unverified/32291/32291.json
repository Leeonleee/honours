{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 32291,
  "instance_id": "ClickHouse__ClickHouse-32291",
  "issue_numbers": [
    "31606"
  ],
  "base_commit": "4adf3b02855ac1ca9fbb3f0e5fe58f16522327f0",
  "patch": "diff --git a/src/Interpreters/InterpreterSelectQuery.cpp b/src/Interpreters/InterpreterSelectQuery.cpp\nindex c8f48f2ed1f9..df79fdb443eb 100644\n--- a/src/Interpreters/InterpreterSelectQuery.cpp\n+++ b/src/Interpreters/InterpreterSelectQuery.cpp\n@@ -113,8 +113,10 @@ String InterpreterSelectQuery::generateFilterActions(ActionsDAGPtr & actions, co\n     select_ast->setExpression(ASTSelectQuery::Expression::SELECT, std::make_shared<ASTExpressionList>());\n     auto expr_list = select_ast->select();\n \n-    // The first column is our filter expression.\n-    expr_list->children.push_back(row_policy_filter);\n+    /// The first column is our filter expression.\n+    /// the row_policy_filter should be cloned, because it may be changed by TreeRewriter.\n+    /// which make it possible an invalid expression, although it may be valid in whole select.\n+    expr_list->children.push_back(row_policy_filter->clone());\n \n     /// Keep columns that are required after the filter actions.\n     for (const auto & column_str : prerequisite_columns)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02131_multiply_row_policies_on_same_column.reference b/tests/queries/0_stateless/02131_multiply_row_policies_on_same_column.reference\nnew file mode 100644\nindex 000000000000..3f71510f3a5a\n--- /dev/null\n+++ b/tests/queries/0_stateless/02131_multiply_row_policies_on_same_column.reference\n@@ -0,0 +1,8 @@\n+4\n+1\n+2\n+3\n+3\n+3\n+3\n+4\ndiff --git a/tests/queries/0_stateless/02131_multiply_row_policies_on_same_column.sql b/tests/queries/0_stateless/02131_multiply_row_policies_on_same_column.sql\nnew file mode 100644\nindex 000000000000..75f7f737e858\n--- /dev/null\n+++ b/tests/queries/0_stateless/02131_multiply_row_policies_on_same_column.sql\n@@ -0,0 +1,30 @@\n+DROP TABLE IF EXISTS 02131_multiply_row_policies_on_same_column;\n+CREATE TABLE 02131_multiply_row_policies_on_same_column (x UInt8) ENGINE = MergeTree ORDER BY x;\n+INSERT INTO 02131_multiply_row_policies_on_same_column VALUES (1), (2), (3), (4);\n+\n+\n+DROP ROW POLICY IF EXISTS 02131_filter_1 ON 02131_multiply_row_policies_on_same_column;\n+DROP ROW POLICY IF EXISTS 02131_filter_2 ON 02131_multiply_row_policies_on_same_column;\n+DROP ROW POLICY IF EXISTS 02131_filter_3 ON 02131_multiply_row_policies_on_same_column;\n+SELECT count() FROM 02131_multiply_row_policies_on_same_column;\n+\n+\n+CREATE ROW POLICY 02131_filter_1 ON 02131_multiply_row_policies_on_same_column USING x=1 TO ALL;\n+SELECT count() FROM 02131_multiply_row_policies_on_same_column;\n+CREATE ROW POLICY 02131_filter_2 ON 02131_multiply_row_policies_on_same_column USING x=2 TO ALL;\n+SELECT count() FROM 02131_multiply_row_policies_on_same_column;\n+CREATE ROW POLICY 02131_filter_3 ON 02131_multiply_row_policies_on_same_column USING x=3 TO ALL;\n+SELECT count() FROM 02131_multiply_row_policies_on_same_column;\n+SELECT count() FROM 02131_multiply_row_policies_on_same_column;\n+\n+\n+CREATE ROW POLICY 02131_filter_4 ON 02131_multiply_row_policies_on_same_column USING x<4 AS RESTRICTIVE TO ALL;\n+SELECT count() FROM 02131_multiply_row_policies_on_same_column;\n+SELECT count() FROM 02131_multiply_row_policies_on_same_column;\n+\n+DROP ROW POLICY 02131_filter_1 ON 02131_multiply_row_policies_on_same_column;\n+DROP ROW POLICY 02131_filter_2 ON 02131_multiply_row_policies_on_same_column;\n+DROP ROW POLICY 02131_filter_3 ON 02131_multiply_row_policies_on_same_column;\n+DROP ROW POLICY 02131_filter_4 ON 02131_multiply_row_policies_on_same_column;\n+SELECT count() FROM 02131_multiply_row_policies_on_same_column;\n+DROP TABLE 02131_multiply_row_policies_on_same_column;\n",
  "problem_statement": "row policies multiple OR to IN rewrite bug.\n**Describe what's wrong**\r\n\r\nIf you have more than 2 row policies with the same column used in conditions, ClickHouse tries to rewrite them in IN clause, but it doesn't work.\r\n\r\n**Does it reproduce on recent release?**\r\n\r\nYes. \r\nClickHouse 21.11, 21.8\r\n\r\n**How to reproduce**\r\n\r\n```\r\nCREATE TABLE test_row\r\n(\r\n    `key` UInt32,\r\n    `value` UInt32\r\n)\r\nENGINE = MergeTree\r\nORDER BY key;\r\n\r\nINSERT INTO test_row SELECT\r\n    number,\r\n    number\r\nFROM numbers(10);\r\n\r\nCREATE ROW POLICY IF NOT EXISTS key_1 ON test_row FOR SELECT USING key =1 TO default;\r\nCREATE ROW POLICY IF NOT EXISTS key_2 ON test_row FOR SELECT USING key =2 TO default;\r\n\r\n SELECT * FROM test_row;\r\n\r\nSELECT *\r\nFROM test_row\r\n\r\nQuery id: c282f548-cf06-45b6-a187-b0ee37062514\r\n\r\n\u250c\u2500key\u2500\u252c\u2500value\u2500\u2510\r\n\u2502   1 \u2502     1 \u2502\r\n\u2502   2 \u2502     2 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n2 rows in set. Elapsed: 0.005 sec.\r\n\r\nCREATE ROW POLICY IF NOT EXISTS key_3 ON test_row FOR SELECT USING key =3 TO default;\r\n\r\nSELECT *\r\nFROM test_row\r\n\r\n\r\n0 rows in set. Elapsed: 0.017 sec.\r\n\r\nReceived exception from server (version 21.12.1):\r\nCode: 35. DB::Exception: Received from localhost:9000. DB::Exception: Number of arguments for function \"or\" should be at least 2: passed 1: While processing or(key IN (1, 2, 3)), key, value. (TOO_FEW_ARGUMENTS_FOR_FUNCTION)\r\n\r\nSET optimize_min_equality_disjunction_chain_length = 10;\r\n\r\nSELECT *\r\nFROM test_row\r\nWHERE 1\r\n\r\nQuery id: 74325911-824d-4121-80de-cb5d9819cf77\r\n\r\n\r\n0 rows in set. Elapsed: 0.003 sec.\r\n\r\nReceived exception from server (version 21.12.1):\r\nCode: 35. DB::Exception: Received from localhost:9000. DB::Exception: Number of arguments for function \"or\" should be at least 2: passed 1: While processing or(key IN (1, 2, 3)), key, value. (TOO_FEW_ARGUMENTS_FOR_FUNCTION)\r\n```\r\n\r\n**Expected behavior**\r\n\r\nQuery works.\r\n\r\n\r\n**Additional context**\r\n\r\nLooks like that or chain rewrite doesn't work correctly for row policies.\r\n\n",
  "hints_text": "",
  "created_at": "2021-12-06T15:35:35Z"
}