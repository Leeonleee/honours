{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 32669,
  "instance_id": "ClickHouse__ClickHouse-32669",
  "issue_numbers": [
    "32207"
  ],
  "base_commit": "fc4e947f4520676177cb3724cf92ad234dea1c6a",
  "patch": "diff --git a/src/Interpreters/InterpreterInsertQuery.cpp b/src/Interpreters/InterpreterInsertQuery.cpp\nindex b7edf12e23fd..d1b8a0560533 100644\n--- a/src/Interpreters/InterpreterInsertQuery.cpp\n+++ b/src/Interpreters/InterpreterInsertQuery.cpp\n@@ -196,6 +196,9 @@ Chain InterpreterInsertQuery::buildChainImpl(\n     /// We create a pipeline of several streams, into which we will write data.\n     Chain out;\n \n+    /// Keep a reference to the context to make sure it stays alive until the chain is executed and destroyed\n+    out.addInterpreterContext(context_ptr);\n+\n     /// NOTE: we explicitly ignore bound materialized views when inserting into Kafka Storage.\n     ///       Otherwise we'll get duplicates when MV reads same rows again from Kafka.\n     if (table->noPushingToViews() && !no_destination)\ndiff --git a/src/QueryPipeline/Chain.h b/src/QueryPipeline/Chain.h\nindex c5fdc34cecfd..60dbad101311 100644\n--- a/src/QueryPipeline/Chain.h\n+++ b/src/QueryPipeline/Chain.h\n@@ -1,5 +1,6 @@\n #pragma once\n \n+#include <Interpreters/Context_fwd.h>\n #include <Processors/IProcessor.h>\n #include <QueryPipeline/PipelineResourcesHolder.h>\n \n@@ -42,6 +43,7 @@ class Chain\n     void addTableLock(TableLockHolder lock) { holder.table_locks.emplace_back(std::move(lock)); }\n     void addStorageHolder(StoragePtr storage) { holder.storage_holders.emplace_back(std::move(storage)); }\n     void attachResources(PipelineResourcesHolder holder_) { holder = std::move(holder_); }\n+    void addInterpreterContext(ContextPtr context) { holder.interpreter_context.emplace_back(std::move(context)); }\n     PipelineResourcesHolder detachResources() { return std::move(holder); }\n \n     void reset();\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02137_mv_into_join.reference b/tests/queries/0_stateless/02137_mv_into_join.reference\nnew file mode 100644\nindex 000000000000..1228a2322e6c\n--- /dev/null\n+++ b/tests/queries/0_stateless/02137_mv_into_join.reference\n@@ -0,0 +1,3 @@\n+sku_0001\tblack\twomen\tnice shirt\n+sku_0001_black\tsku_0001\tblack\twomen\tnice shirt\n+sku_0001_black\tsku_0001\tblack\twomen\tnice shirt\ndiff --git a/tests/queries/0_stateless/02137_mv_into_join.sql b/tests/queries/0_stateless/02137_mv_into_join.sql\nnew file mode 100644\nindex 000000000000..cca896ac6226\n--- /dev/null\n+++ b/tests/queries/0_stateless/02137_mv_into_join.sql\n@@ -0,0 +1,17 @@\n+CREATE TABLE main ( `id` String, `color` String, `section` String, `description` String) ENGINE = MergeTree ORDER BY tuple();\n+CREATE TABLE destination_join ( `key` String, `id` String, `color` String, `section` String, `description` String) ENGINE = Join(ANY, LEFT, key);\n+CREATE TABLE destination_set (`key` String) ENGINE = Set;\n+\n+CREATE MATERIALIZED VIEW mv_to_join TO `destination_join` AS SELECT concat(id, '_', color) AS key, * FROM main;\n+CREATE MATERIALIZED VIEW mv_to_set TO `destination_set` AS SELECT key FROM destination_join;\n+\n+INSERT INTO main VALUES ('sku_0001','black','women','nice shirt');\n+SELECT * FROM main;\n+SELECT * FROM destination_join;\n+SELECT * FROM destination_join WHERE key in destination_set;\n+\n+DROP TABLE mv_to_set;\n+DROP TABLE destination_set;\n+DROP TABLE mv_to_join;\n+DROP TABLE destination_join;\n+DROP TABLE main;\n",
  "problem_statement": "[21.11+] LOGICAL_ERROR on MV into JOIN tables: Context has expired\nSort repro:\r\n\r\n```sql\r\n\r\nCREATE TABLE a ( `id` String, `color` String, `section` String, `description` String) ENGINE = MergeTree ORDER BY tuple()\r\n\r\nCREATE TABLE b ( `key` String, `id` String, `color` String, `section` String, `description` String) ENGINE = Join(ANY, LEFT, key)\r\nCREATE MATERIALIZED VIEW c TO `b` AS SELECT concat(id, '_', color) AS key, * FROM a\r\nINSERT INTO a VALUES ('sku_0001','black','women','nice shirt')\r\n```\r\n\r\nVersions:\r\n* 21.10.4.26 OK\r\n* 21.11.2.2: KO\r\n* 21.11.5.33: KO\r\n* 21.12.1.9879 (Today's master): KO\r\n\r\n\r\nBacktrace:\r\n\r\n* 21.11:\r\n\r\n```\r\n2021.12.03 16:12:25.250703 [ 764841 ] {e404297a-1a02-46ef-9526-b6b9865f5c61} <Error> TCPHandler: Code: 49. DB::Exception: Context has expired: while pushing to view d2.c (44692c40-db1f-4541-8469-2c40db1f0541). (LOGICAL_ERROR), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0x9b66fd4 in /mnt/ch/official_binaries/clickhouse-common-static-21.11.2.2/usr/bin/clickhouse\r\n1. DB::WithContextImpl<std::__1::shared_ptr<DB::Context const> >::getContext() const @ 0xc4aca06 in /mnt/ch/official_binaries/clickhouse-common-static-21.11.2.2/usr/bin/clickhouse\r\n2. DB::SetOrJoinSink::consume(DB::Chunk) @ 0x12b37d36 in /mnt/ch/official_binaries/clickhouse-common-static-21.11.2.2/usr/bin/clickhouse\r\n3. DB::SinkToStorage::transform(DB::Chunk&) @ 0x13326044 in /mnt/ch/official_binaries/clickhouse-common-static-21.11.2.2/usr/bin/clickhouse\r\n4. ? @ 0x132a6649 in /mnt/ch/official_binaries/clickhouse-common-static-21.11.2.2/usr/bin/clickhouse\r\n5. DB::ExceptionKeepingTransform::work() @ 0x132a613c in /mnt/ch/official_binaries/clickhouse-common-static-21.11.2.2/usr/bin/clickhouse\r\n6. ? @ 0x131348bb in /mnt/ch/official_binaries/clickhouse-common-static-21.11.2.2/usr/bin/clickhouse\r\n7. DB::PipelineExecutor::executeStepImpl(unsigned long, unsigned long, std::__1::atomic<bool>*) @ 0x13130871 in /mnt/ch/official_binaries/clickhouse-common-static-21.11.2.2/usr/bin/clickhouse\r\n8. DB::PipelineExecutor::executeStep(std::__1::atomic<bool>*) @ 0x1312f085 in /mnt/ch/official_binaries/clickhouse-common-static-21.11.2.2/usr/bin/clickhouse\r\n9. DB::TCPHandler::processInsertQuery() @ 0x130d5e46 in /mnt/ch/official_binaries/clickhouse-common-static-21.11.2.2/usr/bin/clickhouse\r\n10. DB::TCPHandler::runImpl() @ 0x130ce9b7 in /mnt/ch/official_binaries/clickhouse-common-static-21.11.2.2/usr/bin/clickhouse\r\n11. DB::TCPHandler::run() @ 0x130e2239 in /mnt/ch/official_binaries/clickhouse-common-static-21.11.2.2/usr/bin/clickhouse\r\n12. Poco::Net::TCPServerConnection::start() @ 0x15d1d16f in /mnt/ch/official_binaries/clickhouse-common-static-21.11.2.2/usr/bin/clickhouse\r\n13. Poco::Net::TCPServerDispatcher::run() @ 0x15d1f561 in /mnt/ch/official_binaries/clickhouse-common-static-21.11.2.2/usr/bin/clickhouse\r\n14. Poco::PooledThread::run() @ 0x15e33f09 in /mnt/ch/official_binaries/clickhouse-common-static-21.11.2.2/usr/bin/clickhouse\r\n15. Poco::ThreadImpl::runnableEntry(void*) @ 0x15e31640 in /mnt/ch/official_binaries/clickhouse-common-static-21.11.2.2/usr/bin/clickhouse\r\n16. start_thread @ 0x9259 in /usr/lib/libpthread-2.33.so\r\n17. __GI___clone @ 0xfe5e3 in /usr/lib/libc-2.33.so\r\n```\r\n\r\nMaster:\r\n```\r\n2021.12.03 16:14:15.653601 [ 766370 ] {f1b6b8e4-5c94-40cd-b26a-11b438e15c0a} <Error> TCPHandler: Code: 49. DB::Exception: Context has expired: while pushing to view d4.c (1618345e-1662-44e4-9618-345e166274e4). (LOGICAL_ERROR), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0xa217b1a in /mnt/ch/official_binaries/clickhouse-common-static-21.12.1.9879/usr/bin/clickhouse\r\n1. DB::WithContextImpl<std::__1::shared_ptr<DB::Context const> >::getContext() const @ 0xcc2a046 in /mnt/ch/official_binaries/clickhouse-common-static-21.12.1.9879/usr/bin/clickhouse\r\n2. DB::SetOrJoinSink::consume(DB::Chunk) @ 0x138503f6 in /mnt/ch/official_binaries/clickhouse-common-static-21.12.1.9879/usr/bin/clickhouse\r\n3. DB::SinkToStorage::transform(DB::Chunk&) @ 0x141f477d in /mnt/ch/official_binaries/clickhouse-common-static-21.12.1.9879/usr/bin/clickhouse\r\n4. ? @ 0x14172309 in /mnt/ch/official_binaries/clickhouse-common-static-21.12.1.9879/usr/bin/clickhouse\r\n5. DB::ExceptionKeepingTransform::work() @ 0x14171dfc in /mnt/ch/official_binaries/clickhouse-common-static-21.12.1.9879/usr/bin/clickhouse\r\n6. DB::ExecutionThreadContext::executeTask() @ 0x14003dc3 in /mnt/ch/official_binaries/clickhouse-common-static-21.12.1.9879/usr/bin/clickhouse\r\n7. DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*) @ 0x13ff806f in /mnt/ch/official_binaries/clickhouse-common-static-21.12.1.9879/usr/bin/clickhouse\r\n8. DB::PipelineExecutor::executeStep(std::__1::atomic<bool>*) @ 0x13ff7de0 in /mnt/ch/official_binaries/clickhouse-common-static-21.12.1.9879/usr/bin/clickhouse\r\n9. DB::TCPHandler::processInsertQuery() @ 0x13fa0720 in /mnt/ch/official_binaries/clickhouse-common-static-21.12.1.9879/usr/bin/clickhouse\r\n10. DB::TCPHandler::runImpl() @ 0x13f999dd in /mnt/ch/official_binaries/clickhouse-common-static-21.12.1.9879/usr/bin/clickhouse\r\n11. DB::TCPHandler::run() @ 0x13fad019 in /mnt/ch/official_binaries/clickhouse-common-static-21.12.1.9879/usr/bin/clickhouse\r\n12. Poco::Net::TCPServerConnection::start() @ 0x16efeccf in /mnt/ch/official_binaries/clickhouse-common-static-21.12.1.9879/usr/bin/clickhouse\r\n13. Poco::Net::TCPServerDispatcher::run() @ 0x16f01121 in /mnt/ch/official_binaries/clickhouse-common-static-21.12.1.9879/usr/bin/clickhouse\r\n14. Poco::PooledThread::run() @ 0x1700fea9 in /mnt/ch/official_binaries/clickhouse-common-static-21.12.1.9879/usr/bin/clickhouse\r\n15. Poco::ThreadImpl::runnableEntry(void*) @ 0x1700d5a0 in /mnt/ch/official_binaries/clickhouse-common-static-21.12.1.9879/usr/bin/clickhouse\r\n16. ? @ 0x7f1b42c8b259 in ?\r\n17. clone @ 0x7f1b42bb45e3 in ?\r\n```\r\n\r\nNote that in a longer repro (with multiple MV writting to multiple join tables) I've also gotten a `UNKNOWN_TABLE` eventhough the table exists and it's available. \n",
  "hints_text": "This looks related to the new pipeline system but it's not obvious where the problem is. Any ideas @KochetovNicolai ?\nI have the same problem.version: 21.11",
  "created_at": "2021-12-13T10:54:22Z"
}