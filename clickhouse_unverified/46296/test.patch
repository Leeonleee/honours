diff --git a/tests/fuzz/all.dict b/tests/fuzz/all.dict
index 17ef7d2ab1ef..8ded66cbd0d7 100644
--- a/tests/fuzz/all.dict
+++ b/tests/fuzz/all.dict
@@ -72,7 +72,9 @@
 "arrayMap"
 "arrayMax"
 "arrayMin"
+"arrayPartialReverseSort"
 "arrayPartialShuffle"
+"arrayPartialSort"
 "arrayPopBack"
 "arrayPopFront"
 "arrayProduct"
diff --git a/tests/fuzz/dictionaries/functions.dict b/tests/fuzz/dictionaries/functions.dict
index 877b26798468..dfadb645f3f7 100644
--- a/tests/fuzz/dictionaries/functions.dict
+++ b/tests/fuzz/dictionaries/functions.dict
@@ -334,6 +334,8 @@
 "wordShingleSimHash"
 "arrayCumSum"
 "arraySort"
+"arrayPartialSort"
+"arrayPartialReverseSort"
 "dumpColumnStructure"
 "multiSearchFirstIndex"
 "arrayReverseSplit"
diff --git a/tests/queries/0_stateless/00390_array_sort.reference b/tests/queries/0_stateless/00390_array_sort.reference
index 732ab75930a7..bfc4de067b62 100644
--- a/tests/queries/0_stateless/00390_array_sort.reference
+++ b/tests/queries/0_stateless/00390_array_sort.reference
@@ -25,3 +25,41 @@
 [7,6,5,4,3,2,1,0]
 []
 ['world','hello']
+[9,4,8,10,5,2,3,7,1,6]	4	[10,9,8,7]	[10,9,8,7]
+[9,4,8,10,5,2,3,7,1,6]	4	[10,9,8,7]	[10,9,8,7]
+['9','4','8','10','5','2','3','7','1','6']	4	['9','8','7','6']	['10','1','2','3']
+['9','4','8','10','5','2','3','7','1','6']	4	['9','8','7','6']	['10','1','2','3']
+[[0,1,2,3],[0],[0,1],[0,1,2]]	2	[[0],[0,1]]	[[0,1,2,3],[0,1,2]]	[[0,1,2,3],[0,1,2]]
+[[0,1,2,3],[0],[0,1],[0,1,2]]	2	[[0],[0,1]]	[[0,1,2,3],[0,1,2]]	[[0,1,2,3],[0,1,2]]
+['476118317','873','1381','']	3	['','1381','476118317']	['','873','1381']
+['1','577349846663553','72']	3	['1','577349846663553','72']	['1','72','577349846663553']
+['181981357172','4167749']	3	['181981357172','4167749','']	['4167749','181981357172','']
+['962446486456','415994']	3	['415994','962446486456','']	['415994','962446486456','']
+['77667','936175','7','26','8']	3	['26','7','77667']	['7','8','26']
+['152285784','9','6979435','']	3	['','152285784','6979435']	['','9','6979435']
+['12742','4333384','853','32']	3	['12742','32','4333384']	['32','853','12742']
+['1336581123286','26','488']	3	['1336581123286','26','488']	['26','488','1336581123286']
+['117','','','3455837413562','']	3	['','','']	['','','']
+['441693','539393268817']	3	['441693','539393268817','']	['441693','539393268817','']
+[]
+[]
+[1,0]
+[]
+[3,2]
+[]
+[5,4]
+[]
+[7,6]
+[]
+['wrongly','ignore','relocate']
+2	[1,2]
+2	['1','10']
+2	[10,9]
+2	['9','8']
+4	[-inf,-4,1,2]
+4	[inf,3,2,1]
+10	[-inf,-4,1,2,3,inf,nan,nan,NULL,NULL]
+10	[-inf,-4,1,2,3,inf,nan,nan,NULL,NULL]
+3	[[1,2],[-10,-20],[10,20],[0,0],[-1.5,1]]	[[-10,-20],[-1.5,1],[0,0]]	[[10,20],[1,2],[0,0]]	[[-10,-20],[-1.5,1],[0,0]]
+0	[NULL,9,4,8,10,5,2,3,7,1,6]	[1,2,3,4,5,6,7,8,9,10,NULL]	[10,9,8,7,6,5,4,3,2,1,NULL]	[10,9,8,7,6,5,4,3,2,1,NULL]
+10	[NULL,9,4,8,10,5,2,3,7,1,6]	[1,2,3,4,5,6,7,8,9,10,NULL]	[10,9,8,7,6,5,4,3,2,1,NULL]	[10,9,8,7,6,5,4,3,2,1,NULL]
diff --git a/tests/queries/0_stateless/00390_array_sort.sql b/tests/queries/0_stateless/00390_array_sort.sql
index e3417ca331c3..8c2307eb3bdd 100644
--- a/tests/queries/0_stateless/00390_array_sort.sql
+++ b/tests/queries/0_stateless/00390_array_sort.sql
@@ -12,3 +12,43 @@ SELECT splitByChar('0', toString(intHash64(number))) AS arr, arraySort(arr) AS s
 SELECT arrayReverseSort(number % 2 ? emptyArrayUInt64() : range(number)) FROM system.numbers LIMIT 10;
 
 SELECT arraySort((x, y) -> y, ['hello', 'world'], [2, 1]);
+
+-- Using arrayResize to trim the unsorted bit of the array that is normally left in unspecified order
+SELECT [9,4,8,10,5,2,3,7,1,6] AS arr, 4 AS lim, arrayResize(arrayPartialReverseSort(lim, arr), lim), arrayResize(arrayPartialSort(x -> -x, lim, arr), lim);
+SELECT materialize([9,4,8,10,5,2,3,7,1,6]) AS arr, 4 AS lim, arrayResize(arrayPartialReverseSort(lim, arr), lim), arrayResize(arrayPartialSort(x -> -x, lim, arr), lim);
+
+SELECT arrayMap(x -> toString(x), [9,4,8,10,5,2,3,7,1,6]) AS arr, 4 AS lim, arrayResize(arrayPartialReverseSort(lim, arr), lim), arrayResize(arrayPartialSort(x -> reverse(x), lim, arr), lim);
+SELECT arrayMap(x -> toString(x), materialize([9,4,8,10,5,2,3,7,1,6])) AS arr, 4 AS lim, arrayResize(arrayPartialReverseSort(lim, arr), lim), arrayResize(arrayPartialSort(x -> reverse(x), lim, arr), lim);
+
+SELECT arrayMap(x -> range(x), [4,1,2,3]) AS arr, 2 AS lim, arrayResize(arrayPartialSort(lim, arr), lim), arrayResize(arrayPartialReverseSort(lim, arr), lim), arrayResize(arrayPartialSort(x -> -length(x), lim, arr), lim);
+SELECT arrayMap(x -> range(x), materialize([4,1,2,3])) AS arr, 2 AS lim, arrayResize(arrayPartialSort(lim, arr), lim), arrayResize(arrayPartialReverseSort(lim, arr), lim), arrayResize(arrayPartialSort(x -> -length(x), lim, arr), lim);
+
+SELECT splitByChar('0', toString(intHash64(number))) AS arr, 3 AS lim, arrayResize(arrayPartialSort(lim, arr), lim) AS sorted, arrayResize(arrayPartialSort(x -> toUInt64OrZero(x), lim, arr), lim) AS sorted_nums FROM system.numbers LIMIT 10;
+
+SELECT res FROM (SELECT arrayPartialReverseSort(2, number % 2 ? emptyArrayUInt64() : range(number)) AS arr, arrayResize(arr, if(empty(arr), 0, 2)) AS res FROM system.numbers LIMIT 10);
+
+SELECT arrayResize(arrayPartialSort((x, y) -> y, 3, ['directly','ignore','wrongly','relocate','upright'], [4,2,1,3,5]), 3);
+
+SELECT 2 as nelems, arrayResize(arrayPartialSort(nelems, [NULL,9,4,8,10,5,2,3,7,1,6]), nelems);
+SELECT 2 as nelems, arrayResize(arrayPartialSort(nelems, [NULL,'9','4','8','10','5','2','3','7','1','6']), nelems);
+SELECT 2 as nelems, arrayResize(arrayPartialReverseSort(nelems, [NULL,9,4,8,10,5,2,3,7,1,6]), nelems);
+SELECT 2 as nelems, arrayResize(arrayPartialReverseSort(nelems, [NULL,'9','4','8','10','5','2','3','7','1','6']), nelems);
+
+
+SELECT 4 as nelems, arrayResize(arrayPartialSort(nelems, [1, nan, 2, NULL, 3, nan, -4, NULL, inf, -inf]), nelems);
+SELECT 4 as nelems, arrayResize(arrayPartialSort((x) -> -x, nelems, [1, nan, 2, NULL, 3, nan, -4, NULL, inf, -inf]), nelems);
+SELECT 10 as nelems, arrayResize(arrayPartialSort(nelems, [1, nan, 2, NULL, 3, nan, -4, NULL, inf, -inf]), nelems);
+SELECT 10 as nelems, arrayResize(arrayPartialSort(nelems, [1, nan, 2, NULL, 3, nan, -4, NULL, inf, -inf]), nelems);
+
+SELECT 3 as nelems, [[1,2],[-10,-20],[10,20],[0,0],[-1.5,1]] as arr, arrayResize(arrayPartialSort(nelems, arr), nelems), arrayResize(arrayPartialReverseSort(nelems, arr), nelems), arrayResize(arrayPartialSort((x) -> arraySum(x), nelems, arr), nelems);
+
+SELECT 0 as nelems, [NULL,9,4,8,10,5,2,3,7,1,6] AS arr, arrayPartialSort(nelems, arr), arrayPartialReverseSort(nelems, arr), arrayPartialSort((x) -> -x, nelems, arr);
+SELECT 10 as nelems, [NULL,9,4,8,10,5,2,3,7,1,6] AS arr, arrayPartialSort(nelems, arr), arrayPartialReverseSort(nelems, arr), arrayPartialSort((x) -> -x, nelems, arr);
+
+
+SELECT arrayPartialSort([1,2,3]); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }
+SELECT arrayPartialSort(2, [1,2,3], [1]); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }
+SELECT arrayPartialSort(2, [1,2,3], 3); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }
+SELECT arrayPartialSort(arraySort([1,2,3]), [1,2,3]); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }
+SELECT arrayMap(x -> range(x), [4, 1, 2, 3]) AS arr, 100 AS lim, arrayResize(arrayPartialSort(arrayPartialSort(lim, arr), arr), lim), arrayResize(arrayPartialReverseSort(lim, arr), lim), arrayResize(arrayPartialSort(x -> (-length(x)), lim, arr), lim); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }
+SELECT arrayPartialReverseSort(arraySort((x, y) -> y, [NULL, NULL], [NULL, NULL]), arr), arrayMap(x -> toString(x), [257, -9223372036854775807, 2, -2147483648, 2147483648, NULL, 65536, -2147483648, 2, 65535]) AS arr, NULL, 100 AS lim, 65536, arrayResize(arrayPartialSort(x -> reverse(x), lim, arr), lim) GROUP BY [NULL, 1023, -2, NULL, 255, '0', NULL, 9223372036854775806] WITH ROLLUP; -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }
