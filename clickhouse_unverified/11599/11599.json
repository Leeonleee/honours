{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 11599,
  "instance_id": "ClickHouse__ClickHouse-11599",
  "issue_numbers": [
    "11216",
    "11218",
    "11514"
  ],
  "base_commit": "36b9847d9affe1c93bf2881cfbe1eb38195159ae",
  "patch": "diff --git a/src/IO/PeekableReadBuffer.cpp b/src/IO/PeekableReadBuffer.cpp\nindex 9180ab94fb74..dd969d075494 100644\n--- a/src/IO/PeekableReadBuffer.cpp\n+++ b/src/IO/PeekableReadBuffer.cpp\n@@ -20,6 +20,19 @@ PeekableReadBuffer::PeekableReadBuffer(ReadBuffer & sub_buf_, size_t start_size_\n     checkStateCorrect();\n }\n \n+void PeekableReadBuffer::reset()\n+{\n+    peeked_size = 0;\n+    checkpoint = nullptr;\n+    checkpoint_in_own_memory = false;\n+\n+    if (!currentlyReadFromOwnMemory())\n+        sub_buf.position() = pos;\n+\n+    Buffer & sub_working = sub_buf.buffer();\n+    BufferBase::set(sub_working.begin(), sub_working.size(), sub_buf.offset());\n+}\n+\n bool PeekableReadBuffer::peekNext()\n {\n     checkStateCorrect();\ndiff --git a/src/IO/PeekableReadBuffer.h b/src/IO/PeekableReadBuffer.h\nindex 49c59c934862..62b6f08f6218 100644\n--- a/src/IO/PeekableReadBuffer.h\n+++ b/src/IO/PeekableReadBuffer.h\n@@ -12,7 +12,8 @@ namespace ErrorCodes\n \n /// Also allows to set checkpoint at some position in stream and come back to this position later.\n /// When next() is called, saves data between checkpoint and current position to own memory and loads next data to sub-buffer\n-/// Sub-buffer should not be accessed directly during the lifetime of peekable buffer.\n+/// Sub-buffer should not be accessed directly during the lifetime of peekable buffer (unless\n+/// you reset() the state of peekable buffer after each change of underlying buffer)\n /// If position() of peekable buffer is explicitly set to some position before checkpoint\n /// (e.g. by istr.position() = prev_pos), behavior is undefined.\n class PeekableReadBuffer : public BufferWithOwnMemory<ReadBuffer>\n@@ -38,6 +39,11 @@ class PeekableReadBuffer : public BufferWithOwnMemory<ReadBuffer>\n             peeked_size = 0;\n         }\n         checkpoint = pos;\n+\n+        // FIXME: we are checking checkpoint existence in few places (rollbackToCheckpoint/dropCheckpoint)\n+        // by simple if(checkpoint) but checkpoint can be nullptr after\n+        // setCheckpoint called on empty (non initialized/eof) buffer\n+        // and we can't just use simple if(checkpoint)\n     }\n \n     /// Forget checkpoint and all data between checkpoint and position\n@@ -68,6 +74,10 @@ class PeekableReadBuffer : public BufferWithOwnMemory<ReadBuffer>\n     /// This data will be lost after destruction of peekable buffer.\n     bool hasUnreadData() const;\n \n+    // for streaming reading (like in Kafka) we need to restore initial state of the buffer\n+    // w/o recreating the buffer.\n+    void reset();\n+\n private:\n     bool nextImpl() override;\n \ndiff --git a/src/Processors/Formats/Impl/JSONAsStringRowInputFormat.cpp b/src/Processors/Formats/Impl/JSONAsStringRowInputFormat.cpp\nindex 46fcb9a2f776..42fa764f011c 100644\n--- a/src/Processors/Formats/Impl/JSONAsStringRowInputFormat.cpp\n+++ b/src/Processors/Formats/Impl/JSONAsStringRowInputFormat.cpp\n@@ -21,6 +21,12 @@ JSONAsStringRowInputFormat::JSONAsStringRowInputFormat(const Block & header_, Re\n     }\n }\n \n+void JSONAsStringRowInputFormat::resetParser()\n+{\n+    IRowInputFormat::resetParser();\n+    buf.reset();\n+}\n+\n void JSONAsStringRowInputFormat::readJSONObject(IColumn & column)\n {\n     PeekableReadBufferCheckpoint checkpoint{buf};\ndiff --git a/src/Processors/Formats/Impl/JSONAsStringRowInputFormat.h b/src/Processors/Formats/Impl/JSONAsStringRowInputFormat.h\nindex c28e7624443a..c15a769343cd 100644\n--- a/src/Processors/Formats/Impl/JSONAsStringRowInputFormat.h\n+++ b/src/Processors/Formats/Impl/JSONAsStringRowInputFormat.h\n@@ -20,6 +20,7 @@ class JSONAsStringRowInputFormat : public IRowInputFormat\n \n     bool readRow(MutableColumns & columns, RowReadExtension & ext) override;\n     String getName() const override { return \"JSONAsStringRowInputFormat\"; }\n+    void resetParser() override;\n \n private:\n     void readJSONObject(IColumn & column);\ndiff --git a/src/Processors/Formats/Impl/JSONCompactEachRowRowInputFormat.cpp b/src/Processors/Formats/Impl/JSONCompactEachRowRowInputFormat.cpp\nindex 2895abc29f12..82e3cb795bf4 100644\n--- a/src/Processors/Formats/Impl/JSONCompactEachRowRowInputFormat.cpp\n+++ b/src/Processors/Formats/Impl/JSONCompactEachRowRowInputFormat.cpp\n@@ -22,8 +22,6 @@ JSONCompactEachRowRowInputFormat::JSONCompactEachRowRowInputFormat(ReadBuffer &\n         bool with_names_)\n         : IRowInputFormat(header_, in_, std::move(params_)), format_settings(format_settings_), with_names(with_names_)\n {\n-    /// In this format, BOM at beginning of stream cannot be confused with value, so it is safe to skip it.\n-    skipBOMIfExists(in);\n     const auto & sample = getPort().getHeader();\n     size_t num_columns = sample.columns();\n \n@@ -39,8 +37,18 @@ JSONCompactEachRowRowInputFormat::JSONCompactEachRowRowInputFormat(ReadBuffer &\n     }\n }\n \n+void JSONCompactEachRowRowInputFormat::resetParser()\n+{\n+    IRowInputFormat::resetParser();\n+    column_indexes_for_input_fields.clear();\n+    not_seen_columns.clear();\n+}\n+\n void JSONCompactEachRowRowInputFormat::readPrefix()\n {\n+    /// In this format, BOM at beginning of stream cannot be confused with value, so it is safe to skip it.\n+    skipBOMIfExists(in);\n+\n     if (with_names)\n     {\n         size_t num_columns = getPort().getHeader().columns();\ndiff --git a/src/Processors/Formats/Impl/JSONCompactEachRowRowInputFormat.h b/src/Processors/Formats/Impl/JSONCompactEachRowRowInputFormat.h\nindex e633475d0f4b..5c864ebc7513 100644\n--- a/src/Processors/Formats/Impl/JSONCompactEachRowRowInputFormat.h\n+++ b/src/Processors/Formats/Impl/JSONCompactEachRowRowInputFormat.h\n@@ -26,7 +26,7 @@ class JSONCompactEachRowRowInputFormat : public IRowInputFormat\n     bool readRow(MutableColumns & columns, RowReadExtension & ext) override;\n     bool allowSyncAfterError() const override { return true; }\n     void syncAfterError() override;\n-\n+    void resetParser() override;\n \n private:\n     void addInputColumn(const String & column_name);\ndiff --git a/src/Processors/Formats/Impl/MsgPackRowInputFormat.cpp b/src/Processors/Formats/Impl/MsgPackRowInputFormat.cpp\nindex 3e112fb1ce65..4581a82f06e2 100644\n--- a/src/Processors/Formats/Impl/MsgPackRowInputFormat.cpp\n+++ b/src/Processors/Formats/Impl/MsgPackRowInputFormat.cpp\n@@ -26,6 +26,13 @@ namespace ErrorCodes\n MsgPackRowInputFormat::MsgPackRowInputFormat(const Block & header_, ReadBuffer & in_, Params params_)\n     : IRowInputFormat(header_, in_, std::move(params_)), buf(in), parser(visitor), data_types(header_.getDataTypes())  {}\n \n+void MsgPackRowInputFormat::resetParser()\n+{\n+    IRowInputFormat::resetParser();\n+    buf.reset();\n+    visitor.reset();\n+}\n+\n void MsgPackVisitor::set_info(IColumn & column, DataTypePtr type) // NOLINT\n {\n     while (!info_stack.empty())\n@@ -35,6 +42,11 @@ void MsgPackVisitor::set_info(IColumn & column, DataTypePtr type) // NOLINT\n     info_stack.push(Info{column, type});\n }\n \n+void MsgPackVisitor::reset()\n+{\n+    info_stack = {};\n+}\n+\n void MsgPackVisitor::insert_integer(UInt64 value) // NOLINT\n {\n     Info & info = info_stack.top();\ndiff --git a/src/Processors/Formats/Impl/MsgPackRowInputFormat.h b/src/Processors/Formats/Impl/MsgPackRowInputFormat.h\nindex 92e4f5d0bd70..454d42fae3d8 100644\n--- a/src/Processors/Formats/Impl/MsgPackRowInputFormat.h\n+++ b/src/Processors/Formats/Impl/MsgPackRowInputFormat.h\n@@ -37,6 +37,8 @@ class MsgPackVisitor : public msgpack::null_visitor\n \n     void insert_integer(UInt64 value);\n \n+    void reset();\n+\n private:\n     /// Stack is needed to process nested arrays\n     std::stack<Info> info_stack;\n@@ -49,13 +51,15 @@ class MsgPackRowInputFormat : public IRowInputFormat\n \n     bool readRow(MutableColumns & columns, RowReadExtension & ext) override;\n     String getName() const override { return \"MagPackRowInputFormat\"; }\n+    void resetParser() override;\n+\n private:\n     bool readObject();\n \n     PeekableReadBuffer buf;\n     MsgPackVisitor visitor;\n     msgpack::detail::parse_helper<MsgPackVisitor> parser;\n-    DataTypes data_types;\n+    const DataTypes data_types;\n };\n \n }\ndiff --git a/src/Processors/Formats/Impl/RegexpRowInputFormat.cpp b/src/Processors/Formats/Impl/RegexpRowInputFormat.cpp\nindex 899630410a4b..7763de1642da 100644\n--- a/src/Processors/Formats/Impl/RegexpRowInputFormat.cpp\n+++ b/src/Processors/Formats/Impl/RegexpRowInputFormat.cpp\n@@ -15,7 +15,11 @@ namespace ErrorCodes\n \n RegexpRowInputFormat::RegexpRowInputFormat(\n         ReadBuffer & in_, const Block & header_, Params params_, const FormatSettings & format_settings_)\n-        : IRowInputFormat(header_, in_, std::move(params_)), buf(in_), format_settings(format_settings_), regexp(format_settings_.regexp.regexp)\n+        : IRowInputFormat(header_, in_, std::move(params_))\n+        , buf(in_)\n+        , format_settings(format_settings_)\n+        , field_format(stringToFormat(format_settings_.regexp.escaping_rule))\n+        , regexp(format_settings_.regexp.regexp)\n {\n     size_t fields_count = regexp.NumberOfCapturingGroups();\n     matched_fields.resize(fields_count);\n@@ -28,8 +32,13 @@ RegexpRowInputFormat::RegexpRowInputFormat(\n         // Save pointer to argument.\n         re2_arguments_ptrs[i] = &re2_arguments[i];\n     }\n+}\n+\n \n-    field_format = stringToFormat(format_settings_.regexp.escaping_rule);\n+void RegexpRowInputFormat::resetParser()\n+{\n+    IRowInputFormat::resetParser();\n+    buf.reset();\n }\n \n RegexpRowInputFormat::ColumnFormat RegexpRowInputFormat::stringToFormat(const String & format)\ndiff --git a/src/Processors/Formats/Impl/RegexpRowInputFormat.h b/src/Processors/Formats/Impl/RegexpRowInputFormat.h\nindex 8f9ecdc1349d..0cd8778e4994 100644\n--- a/src/Processors/Formats/Impl/RegexpRowInputFormat.h\n+++ b/src/Processors/Formats/Impl/RegexpRowInputFormat.h\n@@ -32,6 +32,7 @@ class RegexpRowInputFormat : public IRowInputFormat\n     String getName() const override { return \"RegexpRowInputFormat\"; }\n \n     bool readRow(MutableColumns & columns, RowReadExtension & ext) override;\n+    void resetParser() override;\n \n private:\n     bool readField(size_t index, MutableColumns & columns);\n@@ -40,9 +41,9 @@ class RegexpRowInputFormat : public IRowInputFormat\n \n     PeekableReadBuffer buf;\n     const FormatSettings format_settings;\n-    ColumnFormat field_format;\n+    const ColumnFormat field_format;\n \n-    RE2 regexp;\n+    const RE2 regexp;\n     // The vector of fields extracted from line using regexp.\n     std::vector<re2::StringPiece> matched_fields;\n     // These two vectors are needed to use RE2::FullMatchN (function for extracting fields).\ndiff --git a/src/Processors/Formats/Impl/TabSeparatedRowInputFormat.cpp b/src/Processors/Formats/Impl/TabSeparatedRowInputFormat.cpp\nindex dbbd1e28aa0b..96378119aeb5 100644\n--- a/src/Processors/Formats/Impl/TabSeparatedRowInputFormat.cpp\n+++ b/src/Processors/Formats/Impl/TabSeparatedRowInputFormat.cpp\n@@ -340,8 +340,9 @@ void TabSeparatedRowInputFormat::syncAfterError()\n void TabSeparatedRowInputFormat::resetParser()\n {\n     RowInputFormatWithDiagnosticInfo::resetParser();\n+    const auto & sample = getPort().getHeader();\n+    read_columns.assign(sample.columns(), false);\n     column_indexes_for_input_fields.clear();\n-    read_columns.clear();\n     columns_to_fill_with_default_values.clear();\n }\n \ndiff --git a/src/Processors/Formats/Impl/TemplateRowInputFormat.cpp b/src/Processors/Formats/Impl/TemplateRowInputFormat.cpp\nindex 271b9ea75c5a..ecb529a99af7 100644\n--- a/src/Processors/Formats/Impl/TemplateRowInputFormat.cpp\n+++ b/src/Processors/Formats/Impl/TemplateRowInputFormat.cpp\n@@ -498,6 +498,7 @@ void TemplateRowInputFormat::resetParser()\n {\n     RowInputFormatWithDiagnosticInfo::resetParser();\n     end_of_stream = false;\n+    buf.reset();\n }\n \n void registerInputFormatProcessorTemplate(FormatFactory & factory)\ndiff --git a/src/Processors/Formats/Impl/TemplateRowInputFormat.h b/src/Processors/Formats/Impl/TemplateRowInputFormat.h\nindex efdf6eb5e6d9..6adfe0a34b44 100644\n--- a/src/Processors/Formats/Impl/TemplateRowInputFormat.h\n+++ b/src/Processors/Formats/Impl/TemplateRowInputFormat.h\n@@ -50,19 +50,19 @@ class TemplateRowInputFormat : public RowInputFormatWithDiagnosticInfo\n \n private:\n     PeekableReadBuffer buf;\n-    DataTypes data_types;\n+    const DataTypes data_types;\n \n     FormatSettings settings;\n     const bool ignore_spaces;\n-    ParsedTemplateFormatString format;\n-    ParsedTemplateFormatString row_format;\n+    const ParsedTemplateFormatString format;\n+    const ParsedTemplateFormatString row_format;\n \n     size_t format_data_idx;\n     bool end_of_stream = false;\n     std::vector<size_t> always_default_columns;\n-    char default_csv_delimiter;\n+    const char default_csv_delimiter;\n \n-    std::string row_between_delimiter;\n+    const std::string row_between_delimiter;\n };\n \n }\ndiff --git a/src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp b/src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp\nindex 2a4d451d45a5..2e2c98c63d27 100644\n--- a/src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp\n+++ b/src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp\n@@ -416,6 +416,7 @@ void ValuesBlockInputFormat::resetParser()\n     IInputFormat::resetParser();\n     // I'm not resetting parser modes here.\n     // There is a good chance that all messages have the same format.\n+    buf.reset();\n     total_rows = 0;\n }\n \ndiff --git a/src/Processors/Formats/Impl/ValuesBlockInputFormat.h b/src/Processors/Formats/Impl/ValuesBlockInputFormat.h\nindex 059a15e1e864..f485870fc69d 100644\n--- a/src/Processors/Formats/Impl/ValuesBlockInputFormat.h\n+++ b/src/Processors/Formats/Impl/ValuesBlockInputFormat.h\n@@ -70,12 +70,12 @@ class ValuesBlockInputFormat final : public IInputFormat\n private:\n     PeekableReadBuffer buf;\n \n-    RowInputFormatParams params;\n+    const RowInputFormatParams params;\n \n     std::unique_ptr<Context> context;   /// pimpl\n     const FormatSettings format_settings;\n \n-    size_t num_columns;\n+    const size_t num_columns;\n     size_t total_rows = 0;\n \n     std::vector<ParserType> parser_type_for_column;\n@@ -87,7 +87,7 @@ class ValuesBlockInputFormat final : public IInputFormat\n     ConstantExpressionTemplates templates;\n     ConstantExpressionTemplate::Cache templates_cache;\n \n-    DataTypes types;\n+    const DataTypes types;\n \n     BlockMissingValues block_missing_values;\n };\ndiff --git a/src/Storages/Kafka/KafkaBlockInputStream.cpp b/src/Storages/Kafka/KafkaBlockInputStream.cpp\nindex 3edfcc7b9d2e..ddcd6a986342 100644\n--- a/src/Storages/Kafka/KafkaBlockInputStream.cpp\n+++ b/src/Storages/Kafka/KafkaBlockInputStream.cpp\n@@ -5,6 +5,7 @@\n #include <Formats/FormatFactory.h>\n #include <Storages/Kafka/ReadBufferFromKafkaConsumer.h>\n #include <Processors/Formats/InputStreamFromInputFormat.h>\n+#include <common/logger_useful.h>\n \n namespace DB\n {\n@@ -12,11 +13,17 @@ namespace ErrorCodes\n {\n     extern const int LOGICAL_ERROR;\n }\n+\n+// with default poll timeout (500ms) it will give about 5 sec delay for doing 10 retries\n+// when selecting from empty topic\n+const auto MAX_FAILED_POLL_ATTEMPTS = 10;\n+\n KafkaBlockInputStream::KafkaBlockInputStream(\n-    StorageKafka & storage_, const std::shared_ptr<Context> & context_, const Names & columns, size_t max_block_size_, bool commit_in_suffix_)\n+    StorageKafka & storage_, const std::shared_ptr<Context> & context_, const Names & columns, Poco::Logger * log_, size_t max_block_size_, bool commit_in_suffix_)\n     : storage(storage_)\n     , context(context_)\n     , column_names(columns)\n+    , log(log_)\n     , max_block_size(max_block_size_)\n     , commit_in_suffix(commit_in_suffix_)\n     , non_virtual_header(storage.getSampleBlockNonMaterialized())\n@@ -117,68 +124,75 @@ Block KafkaBlockInputStream::readImpl()\n     };\n \n     size_t total_rows = 0;\n+    size_t failed_poll_attempts = 0;\n \n     while (true)\n     {\n-        // some formats (like RowBinaryWithNamesAndTypes / CSVWithNames)\n-        // throw an exception from readPrefix when buffer in empty\n-        if (buffer->eof())\n-            break;\n-\n-        auto new_rows = read_kafka_message();\n+        auto new_rows = buffer->poll() ? read_kafka_message() : 0;\n \n-        buffer->storeLastReadMessageOffset();\n+        if (new_rows)\n+        {\n+            buffer->storeLastReadMessageOffset();\n \n-        auto topic         = buffer->currentTopic();\n-        auto key           = buffer->currentKey();\n-        auto offset        = buffer->currentOffset();\n-        auto partition     = buffer->currentPartition();\n-        auto timestamp_raw = buffer->currentTimestamp();\n-        auto header_list   = buffer->currentHeaderList();\n+            auto topic         = buffer->currentTopic();\n+            auto key           = buffer->currentKey();\n+            auto offset        = buffer->currentOffset();\n+            auto partition     = buffer->currentPartition();\n+            auto timestamp_raw = buffer->currentTimestamp();\n+            auto header_list   = buffer->currentHeaderList();\n \n-        Array headers_names;\n-        Array headers_values;\n+            Array headers_names;\n+            Array headers_values;\n \n-        if (!header_list.empty())\n-        {\n-            headers_names.reserve(header_list.size());\n-            headers_values.reserve(header_list.size());\n-            for (const auto & header : header_list)\n+            if (!header_list.empty())\n             {\n-                headers_names.emplace_back(header.get_name());\n-                headers_values.emplace_back(static_cast<std::string>(header.get_value()));\n+                headers_names.reserve(header_list.size());\n+                headers_values.reserve(header_list.size());\n+                for (const auto & header : header_list)\n+                {\n+                    headers_names.emplace_back(header.get_name());\n+                    headers_values.emplace_back(static_cast<std::string>(header.get_value()));\n+                }\n             }\n-        }\n \n-        for (size_t i = 0; i < new_rows; ++i)\n-        {\n-            virtual_columns[0]->insert(topic);\n-            virtual_columns[1]->insert(key);\n-            virtual_columns[2]->insert(offset);\n-            virtual_columns[3]->insert(partition);\n-            if (timestamp_raw)\n+            for (size_t i = 0; i < new_rows; ++i)\n             {\n-                auto ts = timestamp_raw->get_timestamp();\n-                virtual_columns[4]->insert(std::chrono::duration_cast<std::chrono::seconds>(ts).count());\n-                virtual_columns[5]->insert(DecimalField<Decimal64>(std::chrono::duration_cast<std::chrono::milliseconds>(ts).count(),3));\n-            }\n-            else\n-            {\n-                virtual_columns[4]->insertDefault();\n-                virtual_columns[5]->insertDefault();\n+                virtual_columns[0]->insert(topic);\n+                virtual_columns[1]->insert(key);\n+                virtual_columns[2]->insert(offset);\n+                virtual_columns[3]->insert(partition);\n+                if (timestamp_raw)\n+                {\n+                    auto ts = timestamp_raw->get_timestamp();\n+                    virtual_columns[4]->insert(std::chrono::duration_cast<std::chrono::seconds>(ts).count());\n+                    virtual_columns[5]->insert(DecimalField<Decimal64>(std::chrono::duration_cast<std::chrono::milliseconds>(ts).count(),3));\n+                }\n+                else\n+                {\n+                    virtual_columns[4]->insertDefault();\n+                    virtual_columns[5]->insertDefault();\n+                }\n+                virtual_columns[6]->insert(headers_names);\n+                virtual_columns[7]->insert(headers_values);\n             }\n-            virtual_columns[6]->insert(headers_names);\n-            virtual_columns[7]->insert(headers_values);\n-        }\n-\n-        total_rows = total_rows + new_rows;\n-        buffer->allowNext();\n \n-        if (buffer->hasMorePolledMessages())\n+            total_rows = total_rows + new_rows;\n+        }\n+        else if (buffer->isStalled())\n         {\n-            continue;\n+            ++failed_poll_attempts;\n         }\n-        if (total_rows >= max_block_size || !checkTimeLimit())\n+        else if (buffer->polledDataUnusable())\n+        {\n+            break;\n+        }\n+        else\n+        {\n+            LOG_WARNING(log, \"Parsing of message (topic: {}, partition: {}, offset: {}) return no rows.\", buffer->currentTopic(), buffer->currentPartition(), buffer->currentOffset());\n+        }\n+\n+        if (!buffer->hasMorePolledMessages()\n+            && (total_rows >= max_block_size || !checkTimeLimit() || failed_poll_attempts >= MAX_FAILED_POLL_ATTEMPTS))\n         {\n             break;\n         }\ndiff --git a/src/Storages/Kafka/KafkaBlockInputStream.h b/src/Storages/Kafka/KafkaBlockInputStream.h\nindex 387f5088721d..012d1f60f430 100644\n--- a/src/Storages/Kafka/KafkaBlockInputStream.h\n+++ b/src/Storages/Kafka/KafkaBlockInputStream.h\n@@ -7,6 +7,10 @@\n #include <Storages/Kafka/ReadBufferFromKafkaConsumer.h>\n \n \n+namespace Poco\n+{\n+    class Logger;\n+}\n namespace DB\n {\n \n@@ -14,7 +18,7 @@ class KafkaBlockInputStream : public IBlockInputStream\n {\n public:\n     KafkaBlockInputStream(\n-        StorageKafka & storage_, const std::shared_ptr<Context> & context_, const Names & columns, size_t max_block_size_, bool commit_in_suffix = true);\n+        StorageKafka & storage_, const std::shared_ptr<Context> & context_, const Names & columns, Poco::Logger * log_, size_t max_block_size_, bool commit_in_suffix = true);\n     ~KafkaBlockInputStream() override;\n \n     String getName() const override { return storage.getName(); }\n@@ -31,6 +35,7 @@ class KafkaBlockInputStream : public IBlockInputStream\n     StorageKafka & storage;\n     const std::shared_ptr<Context> context;\n     Names column_names;\n+    Poco::Logger * log;\n     UInt64 max_block_size;\n \n     ConsumerBufferPtr buffer;\ndiff --git a/src/Storages/Kafka/ReadBufferFromKafkaConsumer.cpp b/src/Storages/Kafka/ReadBufferFromKafkaConsumer.cpp\nindex 31a9f55350da..3fd28cde5e5d 100644\n--- a/src/Storages/Kafka/ReadBufferFromKafkaConsumer.cpp\n+++ b/src/Storages/Kafka/ReadBufferFromKafkaConsumer.cpp\n@@ -15,6 +15,7 @@ namespace ErrorCodes\n \n using namespace std::chrono_literals;\n const auto MAX_TIME_TO_WAIT_FOR_ASSIGNMENT_MS = 15000;\n+const std::size_t POLL_TIMEOUT_WO_ASSIGNMENT_MS = 50;\n const auto DRAIN_TIMEOUT_MS = 5000ms;\n \n \n@@ -57,12 +58,11 @@ ReadBufferFromKafkaConsumer::ReadBufferFromKafkaConsumer(\n         //     * clean buffered non-commited messages\n         //     * set flag / flush\n \n-        messages.clear();\n-        current = messages.begin();\n-        BufferBase::set(nullptr, 0, 0);\n+        cleanUnprocessed();\n \n-        rebalance_happened = true;\n+        stalled_status = REBALANCE_HAPPENED;\n         assignment.clear();\n+        waited_for_assignment = 0;\n \n         // for now we use slower (but reliable) sync commit in main loop, so no need to repeat\n         // try\n@@ -225,7 +225,6 @@ void ReadBufferFromKafkaConsumer::commit()\n     }\n \n     offsets_stored = 0;\n-    stalled = false;\n }\n \n void ReadBufferFromKafkaConsumer::subscribe()\n@@ -252,18 +251,26 @@ void ReadBufferFromKafkaConsumer::subscribe()\n         }\n     }\n \n-    stalled = false;\n-    rebalance_happened = false;\n-    offsets_stored = 0;\n+    cleanUnprocessed();\n+    allowed = false;\n+\n+    // we can reset any flags (except of CONSUMER_STOPPED) before attempt of reading new block of data\n+    if (stalled_status != CONSUMER_STOPPED)\n+        stalled_status = NO_MESSAGES_RETURNED;\n }\n \n-void ReadBufferFromKafkaConsumer::unsubscribe()\n+void ReadBufferFromKafkaConsumer::cleanUnprocessed()\n {\n-    LOG_TRACE(log, \"Re-joining claimed consumer after failure\");\n-\n     messages.clear();\n     current = messages.begin();\n     BufferBase::set(nullptr, 0, 0);\n+    offsets_stored = 0;\n+}\n+\n+void ReadBufferFromKafkaConsumer::unsubscribe()\n+{\n+    LOG_TRACE(log, \"Re-joining claimed consumer after failure\");\n+    cleanUnprocessed();\n \n     // it should not raise exception as used in destructor\n     try\n@@ -284,12 +291,6 @@ void ReadBufferFromKafkaConsumer::unsubscribe()\n }\n \n \n-bool ReadBufferFromKafkaConsumer::hasMorePolledMessages() const\n-{\n-    return (!stalled) && (current != messages.end());\n-}\n-\n-\n void ReadBufferFromKafkaConsumer::resetToLastCommitted(const char * msg)\n {\n     if (assignment.empty())\n@@ -302,102 +303,131 @@ void ReadBufferFromKafkaConsumer::resetToLastCommitted(const char * msg)\n     LOG_TRACE(log, \"{} Returned to committed position: {}\", msg, committed_offset);\n }\n \n-/// Do commit messages implicitly after we processed the previous batch.\n-bool ReadBufferFromKafkaConsumer::nextImpl()\n+// it do the poll when needed\n+bool ReadBufferFromKafkaConsumer::poll()\n {\n+    resetIfStopped();\n \n-    /// NOTE: ReadBuffer was implemented with an immutable underlying contents in mind.\n-    ///       If we failed to poll any message once - don't try again.\n-    ///       Otherwise, the |poll_timeout| expectations get flawn.\n+    if (polledDataUnusable())\n+        return false;\n \n-    // we can react on stop only during fetching data\n-    // after block is formed (i.e. during copying data to MV / commiting)  we ignore stop attempts\n-    if (stopped)\n+    if (hasMorePolledMessages())\n     {\n-        was_stopped = true;\n-        offsets_stored = 0;\n-        return false;\n+        allowed = true;\n+        return true;\n     }\n \n-    if (stalled || was_stopped || !allowed || rebalance_happened)\n-        return false;\n-\n+    if (intermediate_commit)\n+        commit();\n \n-    if (current == messages.end())\n+    while (true)\n     {\n-        if (intermediate_commit)\n-            commit();\n-\n-        size_t waited_for_assignment = 0;\n-        while (true)\n+        stalled_status = NO_MESSAGES_RETURNED;\n+\n+        // we already wait enough for assignment in the past,\n+        // let's make polls shorter and not block other consumer\n+        // which can work successfully in parallel\n+        // POLL_TIMEOUT_WO_ASSIGNMENT_MS (50ms) is 100% enough just to check if we got assignment\n+        //  (see https://github.com/ClickHouse/ClickHouse/issues/11218)\n+        auto actual_poll_timeout_ms = (waited_for_assignment >= MAX_TIME_TO_WAIT_FOR_ASSIGNMENT_MS)\n+                        ? std::min(POLL_TIMEOUT_WO_ASSIGNMENT_MS,poll_timeout)\n+                        : poll_timeout;\n+\n+        /// Don't drop old messages immediately, since we may need them for virtual columns.\n+        auto new_messages = consumer->poll_batch(batch_size,\n+                            std::chrono::milliseconds(actual_poll_timeout_ms));\n+\n+        resetIfStopped();\n+        if (stalled_status == CONSUMER_STOPPED)\n         {\n-            /// Don't drop old messages immediately, since we may need them for virtual columns.\n-            auto new_messages = consumer->poll_batch(batch_size, std::chrono::milliseconds(poll_timeout));\n-\n-            if (stopped)\n+            return false;\n+        }\n+        else if (stalled_status == REBALANCE_HAPPENED)\n+        {\n+            if (!new_messages.empty())\n             {\n-                was_stopped = true;\n-                offsets_stored = 0;\n-                return false;\n-            }\n-            else if (rebalance_happened)\n-            {\n-                if (!new_messages.empty())\n-                {\n-                    // we have polled something just after rebalance.\n-                    // we will not use current batch, so we need to return to last commited position\n-                    // otherwise we will continue polling from that position\n-                    resetToLastCommitted(\"Rewind last poll after rebalance.\");\n-                }\n-\n-                offsets_stored = 0;\n-                return false;\n+                // we have polled something just after rebalance.\n+                // we will not use current batch, so we need to return to last commited position\n+                // otherwise we will continue polling from that position\n+                resetToLastCommitted(\"Rewind last poll after rebalance.\");\n             }\n+            return false;\n+        }\n \n-            if (new_messages.empty())\n+        if (new_messages.empty())\n+        {\n+            // While we wait for an assignment after subscription, we'll poll zero messages anyway.\n+            // If we're doing a manual select then it's better to get something after a wait, then immediate nothing.\n+            if (assignment.empty())\n             {\n-                // While we wait for an assignment after subscription, we'll poll zero messages anyway.\n-                // If we're doing a manual select then it's better to get something after a wait, then immediate nothing.\n-                if (assignment.empty())\n+                waited_for_assignment += poll_timeout; // slightly innaccurate, but rough calculation is ok.\n+                if (waited_for_assignment < MAX_TIME_TO_WAIT_FOR_ASSIGNMENT_MS)\n                 {\n-                    waited_for_assignment += poll_timeout; // slightly innaccurate, but rough calculation is ok.\n-                    if (waited_for_assignment < MAX_TIME_TO_WAIT_FOR_ASSIGNMENT_MS)\n-                    {\n-                        continue;\n-                    }\n-                    else\n-                    {\n-                        LOG_TRACE(log, \"Can't get assignment\");\n-                        stalled = true;\n-                        return false;\n-                    }\n-\n+                    continue;\n                 }\n                 else\n                 {\n-                    LOG_TRACE(log, \"Stalled\");\n-                    stalled = true;\n+                    LOG_WARNING(log, \"Can't get assignment. It can be caused by some issue with consumer group (not enough partitions?). Will keep trying.\");\n+                    stalled_status = NO_ASSIGNMENT;\n                     return false;\n                 }\n+\n             }\n             else\n             {\n-                messages = std::move(new_messages);\n-                current = messages.begin();\n-                LOG_TRACE(log, \"Polled batch of {} messages. Offset position: {}\", messages.size(), consumer->get_offsets_position(consumer->get_assignment()));\n-                break;\n+                LOG_TRACE(log, \"Stalled\");\n+                return false;\n             }\n         }\n+        else\n+        {\n+            messages = std::move(new_messages);\n+            current = messages.begin();\n+            LOG_TRACE(log, \"Polled batch of {} messages. Offset position: {}\", messages.size(), consumer->get_offsets_position(consumer->get_assignment()));\n+            break;\n+        }\n     }\n \n-    if (auto err = current->get_error())\n+    while (auto err = current->get_error())\n     {\n         ++current;\n \n         // TODO: should throw exception instead\n         LOG_ERROR(log, \"Consumer error: {}\", err);\n-        return false;\n+        if (current == messages.end())\n+        {\n+            LOG_ERROR(log, \"No actual messages polled, errors only.\");\n+            stalled_status = ERRORS_RETURNED;\n+            return false;\n+        }\n+    }\n+    stalled_status = NOT_STALLED;\n+    allowed = true;\n+    return true;\n+}\n+\n+void ReadBufferFromKafkaConsumer::resetIfStopped()\n+{\n+    // we can react on stop only during fetching data\n+    // after block is formed (i.e. during copying data to MV / commiting)  we ignore stop attempts\n+    if (stopped)\n+    {\n+        stalled_status = CONSUMER_STOPPED;\n+        cleanUnprocessed();\n     }\n+}\n+\n+/// Do commit messages implicitly after we processed the previous batch.\n+bool ReadBufferFromKafkaConsumer::nextImpl()\n+{\n+\n+    /// NOTE: ReadBuffer was implemented with an immutable underlying contents in mind.\n+    ///       If we failed to poll any message once - don't try again.\n+    ///       Otherwise, the |poll_timeout| expectations get flawn.\n+    resetIfStopped();\n+\n+    if (!allowed || !hasMorePolledMessages())\n+        return false;\n \n     // XXX: very fishy place with const casting.\n     auto * new_position = reinterpret_cast<char *>(const_cast<unsigned char *>(current->get_payload().get_data()));\n@@ -411,7 +441,7 @@ bool ReadBufferFromKafkaConsumer::nextImpl()\n \n void ReadBufferFromKafkaConsumer::storeLastReadMessageOffset()\n {\n-    if (!stalled && !was_stopped && !rebalance_happened)\n+    if (!isStalled())\n     {\n         consumer->store_offset(*(current - 1));\n         ++offsets_stored;\ndiff --git a/src/Storages/Kafka/ReadBufferFromKafkaConsumer.h b/src/Storages/Kafka/ReadBufferFromKafkaConsumer.h\nindex 7449f58c838f..c0fe53271a2c 100644\n--- a/src/Storages/Kafka/ReadBufferFromKafkaConsumer.h\n+++ b/src/Storages/Kafka/ReadBufferFromKafkaConsumer.h\n@@ -29,20 +29,33 @@ class ReadBufferFromKafkaConsumer : public ReadBuffer\n         const Names & _topics\n     );\n     ~ReadBufferFromKafkaConsumer() override;\n-    void allowNext() { allowed = true; } // Allow to read next message.\n     void commit(); // Commit all processed messages.\n     void subscribe(); // Subscribe internal consumer to topics.\n     void unsubscribe(); // Unsubscribe internal consumer in case of failure.\n \n     auto pollTimeout() const { return poll_timeout; }\n \n-    bool hasMorePolledMessages() const;\n-    bool polledDataUnusable() const { return (was_stopped || rebalance_happened); }\n-    bool isStalled() const { return stalled; }\n+    inline bool hasMorePolledMessages() const\n+    {\n+        return (stalled_status == NOT_STALLED) && (current != messages.end());\n+    }\n+\n+    inline bool polledDataUnusable() const\n+    {\n+        return  (stalled_status != NOT_STALLED) && (stalled_status != NO_MESSAGES_RETURNED);\n+    }\n+\n+    inline bool isStalled() const { return stalled_status != NOT_STALLED; }\n \n     void storeLastReadMessageOffset();\n     void resetToLastCommitted(const char * msg);\n \n+    // Polls batch of messages from Kafka or allows to read consecutive message by nextImpl\n+    // returns true if there are some messages to process\n+    // return false and sets stalled to false if there are no messages to process.\n+    // additionally sets\n+    bool poll();\n+\n     // Return values for the message that's being read.\n     String currentTopic() const { return current[-1].get_topic(); }\n     String currentKey() const { return current[-1].get_key(); }\n@@ -54,14 +67,27 @@ class ReadBufferFromKafkaConsumer : public ReadBuffer\n private:\n     using Messages = std::vector<cppkafka::Message>;\n \n+    enum StalledStatus\n+    {\n+        NOT_STALLED,\n+        NO_MESSAGES_RETURNED,\n+        REBALANCE_HAPPENED,\n+        CONSUMER_STOPPED,\n+        NO_ASSIGNMENT,\n+        ERRORS_RETURNED\n+    };\n+\n     ConsumerPtr consumer;\n     Poco::Logger * log;\n     const size_t batch_size = 1;\n     const size_t poll_timeout = 0;\n     size_t offsets_stored = 0;\n-    bool stalled = false;\n+\n+    StalledStatus stalled_status = NO_MESSAGES_RETURNED;\n+\n     bool intermediate_commit = true;\n     bool allowed = true;\n+    size_t waited_for_assignment = 0;\n \n     const std::atomic<bool> & stopped;\n \n@@ -69,15 +95,13 @@ class ReadBufferFromKafkaConsumer : public ReadBuffer\n     Messages messages;\n     Messages::const_iterator current;\n \n-    bool rebalance_happened = false;\n-\n-    bool was_stopped = false;\n-\n     // order is important, need to be destructed before consumer\n     cppkafka::TopicPartitionList assignment;\n     const Names topics;\n \n     void drain();\n+    void cleanUnprocessed();\n+    void resetIfStopped();\n \n     bool nextImpl() override;\n };\ndiff --git a/src/Storages/Kafka/StorageKafka.cpp b/src/Storages/Kafka/StorageKafka.cpp\nindex bb721417c5b3..0300bf2118c3 100644\n--- a/src/Storages/Kafka/StorageKafka.cpp\n+++ b/src/Storages/Kafka/StorageKafka.cpp\n@@ -69,7 +69,10 @@ namespace\n         for (const auto & key : keys)\n         {\n             const String key_path = path + \".\" + key;\n-            const String key_name = boost::replace_all_copy(key, \"_\", \".\");\n+            // log_level has valid underscore, rest librdkafka setting use dot.separated.format\n+            // which is not acceptable for XML.\n+            // See also https://github.com/edenhill/librdkafka/blob/master/CONFIGURATION.md\n+            const String key_name = (key == \"log_level\") ? key : boost::replace_all_copy(key, \"_\", \".\");\n             conf.set(key_name, config.getString(key_path));\n         }\n     }\n@@ -221,7 +224,7 @@ Pipes StorageKafka::read(\n         /// TODO: probably that leads to awful performance.\n         /// FIXME: seems that doesn't help with extra reading and committing unprocessed messages.\n         /// TODO: rewrite KafkaBlockInputStream to KafkaSource. Now it is used in other place.\n-        pipes.emplace_back(std::make_shared<SourceFromInputStream>(std::make_shared<KafkaBlockInputStream>(*this, modified_context, column_names, 1)));\n+        pipes.emplace_back(std::make_shared<SourceFromInputStream>(std::make_shared<KafkaBlockInputStream>(*this, modified_context, column_names, log, 1)));\n     }\n \n     LOG_DEBUG(log, \"Starting reading {} streams\", pipes.size());\n@@ -535,7 +538,7 @@ bool StorageKafka::streamToViews()\n     for (size_t i = 0; i < num_created_consumers; ++i)\n     {\n         auto stream\n-            = std::make_shared<KafkaBlockInputStream>(*this, kafka_context, block_io.out->getHeader().getNames(), block_size, false);\n+            = std::make_shared<KafkaBlockInputStream>(*this, kafka_context, block_io.out->getHeader().getNames(), log, block_size, false);\n         streams.emplace_back(stream);\n \n         // Limit read batch to maximum block size to allow DDL\n@@ -668,6 +671,16 @@ void registerStorageKafka(StorageFactory & factory)\n             throw Exception(\"Number of consumers can not be lower than 1\", ErrorCodes::BAD_ARGUMENTS);\n         }\n \n+        if (kafka_settings->kafka_max_block_size.changed && kafka_settings->kafka_max_block_size.value < 1)\n+        {\n+            throw Exception(\"kafka_max_block_size can not be lower than 1\", ErrorCodes::BAD_ARGUMENTS);\n+        }\n+\n+        if (kafka_settings->kafka_poll_max_batch_size.changed && kafka_settings->kafka_poll_max_batch_size.value < 1)\n+        {\n+            throw Exception(\"kafka_poll_max_batch_size can not be lower than 1\", ErrorCodes::BAD_ARGUMENTS);\n+        }\n+\n         return StorageKafka::create(args.table_id, args.context, args.columns, std::move(kafka_settings));\n     };\n \n",
  "test_patch": "diff --git a/tests/integration/test_storage_kafka/clickhouse_path/format_schemas/template_row.format b/tests/integration/test_storage_kafka/clickhouse_path/format_schemas/template_row.format\nnew file mode 100644\nindex 000000000000..c910aa8589e0\n--- /dev/null\n+++ b/tests/integration/test_storage_kafka/clickhouse_path/format_schemas/template_row.format\n@@ -0,0 +1,1 @@\n+(id = ${id:Escaped}, blockNo = ${blockNo:Escaped}, val1 = ${val1:CSV}, val2 = ${val2:Escaped}, val3 = ${val3:Escaped})\n\\ No newline at end of file\ndiff --git a/tests/integration/test_storage_kafka/clickhouse_path/format_schemas/test.avsc b/tests/integration/test_storage_kafka/clickhouse_path/format_schemas/test.avsc\nnew file mode 100644\nindex 000000000000..caf693313de5\n--- /dev/null\n+++ b/tests/integration/test_storage_kafka/clickhouse_path/format_schemas/test.avsc\n@@ -0,0 +1,11 @@\n+{\n+    \"type\": \"record\",\n+    \"name\": \"row\",\n+    \"fields\": [\n+        {\"name\": \"id\", \"type\": \"long\"},\n+        {\"name\": \"blockNo\", \"type\": \"int\"},\n+        {\"name\": \"val1\", \"type\": \"string\"},\n+        {\"name\": \"val2\", \"type\": \"float\"},\n+        {\"name\": \"val3\", \"type\": \"int\"}\n+    ]\n+  }\n\\ No newline at end of file\ndiff --git a/tests/integration/test_storage_kafka/clickhouse_path/format_schemas/test.capnp b/tests/integration/test_storage_kafka/clickhouse_path/format_schemas/test.capnp\nnew file mode 100644\nindex 000000000000..44f1961205b1\n--- /dev/null\n+++ b/tests/integration/test_storage_kafka/clickhouse_path/format_schemas/test.capnp\n@@ -0,0 +1,10 @@\n+@0x99f75f775fe63dae;\n+\n+struct TestRecordStruct\n+{\n+    id @0 : Int64;\n+    blockNo @1 : UInt16;\n+    val1 @2 : Text;\n+    val2 @3 : Float32;\n+    val3 @4 : UInt8;\n+}\n\\ No newline at end of file\ndiff --git a/tests/integration/test_storage_kafka/clickhouse_path/format_schemas/test.proto b/tests/integration/test_storage_kafka/clickhouse_path/format_schemas/test.proto\nnew file mode 100644\nindex 000000000000..cabdff04a780\n--- /dev/null\n+++ b/tests/integration/test_storage_kafka/clickhouse_path/format_schemas/test.proto\n@@ -0,0 +1,9 @@\n+syntax = \"proto3\";\n+\n+message TestMessage {\n+  int64 id = 1;\n+  uint32 blockNo = 2;\n+  string val1 = 3;\n+  float  val2 = 4;\n+  uint32 val3 = 5;\n+};\ndiff --git a/tests/integration/test_storage_kafka/test.py b/tests/integration/test_storage_kafka/test.py\nindex 2a1b42f8e0e3..fe9177755915 100644\n--- a/tests/integration/test_storage_kafka/test.py\n+++ b/tests/integration/test_storage_kafka/test.py\n@@ -103,6 +103,410 @@ def kafka_produce_protobuf_messages(topic, start_index, num_messages):\n     print(\"Produced {} messages for topic {}\".format(num_messages, topic))\n \n \n+@pytest.mark.timeout(180)\n+def test_kafka_json_as_string(kafka_cluster):\n+    kafka_produce('kafka_json_as_string', ['{\"t\": 123, \"e\": {\"x\": \"woof\"} }', '', '{\"t\": 124, \"e\": {\"x\": \"test\"} }', '{\"F1\":\"V1\",\"F2\":{\"F21\":\"V21\",\"F22\":{},\"F23\":\"V23\",\"F24\":\"2019-12-24T16:28:04\"},\"F3\":\"V3\"}'])\n+\n+    instance.query('''\n+        CREATE TABLE test.kafka (field String)\n+            ENGINE = Kafka\n+            SETTINGS kafka_broker_list = 'kafka1:19092',\n+                     kafka_topic_list = 'kafka_json_as_string',\n+                     kafka_group_name = 'kafka_json_as_string',\n+                     kafka_format = 'JSONAsString',\n+                     kafka_flush_interval_ms=1000;\n+        ''')\n+\n+    result = instance.query('SELECT * FROM test.kafka;')\n+    expected = '''\\\n+{\"t\": 123, \"e\": {\"x\": \"woof\"} }\n+{\"t\": 124, \"e\": {\"x\": \"test\"} }\n+{\"F1\":\"V1\",\"F2\":{\"F21\":\"V21\",\"F22\":{},\"F23\":\"V23\",\"F24\":\"2019-12-24T16:28:04\"},\"F3\":\"V3\"}\n+'''\n+    assert TSV(result) == TSV(expected)\n+    assert instance.contains_in_log(\"Parsing of message (topic: kafka_json_as_string, partition: 0, offset: 1) return no rows\")\n+\n+@pytest.mark.timeout(300)\n+def test_kafka_formats(kafka_cluster):\n+    # data was dumped from clickhouse itself in a following manner\n+    # clickhouse-client --format=Native --query='SELECT toInt64(number) as id, toUInt16( intDiv( id, 65536 ) ) as blockNo, reinterpretAsString(19777) as val1, toFloat32(0.5) as val2, toUInt8(1) as val3 from numbers(100) ORDER BY id' | xxd -ps | tr -d '\\n' | sed 's/\\(..\\)/\\\\x\\1/g'\n+\n+    all_formats = {\n+        ## Text formats ##\n+        # dumped with clickhouse-client ... | perl -pe 's/\\n/\\\\n/; s/\\t/\\\\t/g;'\n+        'JSONEachRow' : {\n+            'data_sample' : [\n+                '{\"id\":\"0\",\"blockNo\":0,\"val1\":\"AM\",\"val2\":0.5,\"val3\":1}\\n',\n+                '{\"id\":\"1\",\"blockNo\":0,\"val1\":\"AM\",\"val2\":0.5,\"val3\":1}\\n{\"id\":\"2\",\"blockNo\":0,\"val1\":\"AM\",\"val2\":0.5,\"val3\":1}\\n{\"id\":\"3\",\"blockNo\":0,\"val1\":\"AM\",\"val2\":0.5,\"val3\":1}\\n{\"id\":\"4\",\"blockNo\":0,\"val1\":\"AM\",\"val2\":0.5,\"val3\":1}\\n{\"id\":\"5\",\"blockNo\":0,\"val1\":\"AM\",\"val2\":0.5,\"val3\":1}\\n{\"id\":\"6\",\"blockNo\":0,\"val1\":\"AM\",\"val2\":0.5,\"val3\":1}\\n{\"id\":\"7\",\"blockNo\":0,\"val1\":\"AM\",\"val2\":0.5,\"val3\":1}\\n{\"id\":\"8\",\"blockNo\":0,\"val1\":\"AM\",\"val2\":0.5,\"val3\":1}\\n{\"id\":\"9\",\"blockNo\":0,\"val1\":\"AM\",\"val2\":0.5,\"val3\":1}\\n{\"id\":\"10\",\"blockNo\":0,\"val1\":\"AM\",\"val2\":0.5,\"val3\":1}\\n{\"id\":\"11\",\"blockNo\":0,\"val1\":\"AM\",\"val2\":0.5,\"val3\":1}\\n{\"id\":\"12\",\"blockNo\":0,\"val1\":\"AM\",\"val2\":0.5,\"val3\":1}\\n{\"id\":\"13\",\"blockNo\":0,\"val1\":\"AM\",\"val2\":0.5,\"val3\":1}\\n{\"id\":\"14\",\"blockNo\":0,\"val1\":\"AM\",\"val2\":0.5,\"val3\":1}\\n{\"id\":\"15\",\"blockNo\":0,\"val1\":\"AM\",\"val2\":0.5,\"val3\":1}\\n',\n+                '{\"id\":\"0\",\"blockNo\":0,\"val1\":\"AM\",\"val2\":0.5,\"val3\":1}\\n',\n+                '' # tolerates\n+            ],\n+        },\n+        # JSONAsString doesn't fit to that test, and tested separately\n+        'JSONCompactEachRow' : {\n+            'data_sample' : [\n+                '[\"0\", 0, \"AM\", 0.5, 1]\\n',\n+                '[\"1\", 0, \"AM\", 0.5, 1]\\n[\"2\", 0, \"AM\", 0.5, 1]\\n[\"3\", 0, \"AM\", 0.5, 1]\\n[\"4\", 0, \"AM\", 0.5, 1]\\n[\"5\", 0, \"AM\", 0.5, 1]\\n[\"6\", 0, \"AM\", 0.5, 1]\\n[\"7\", 0, \"AM\", 0.5, 1]\\n[\"8\", 0, \"AM\", 0.5, 1]\\n[\"9\", 0, \"AM\", 0.5, 1]\\n[\"10\", 0, \"AM\", 0.5, 1]\\n[\"11\", 0, \"AM\", 0.5, 1]\\n[\"12\", 0, \"AM\", 0.5, 1]\\n[\"13\", 0, \"AM\", 0.5, 1]\\n[\"14\", 0, \"AM\", 0.5, 1]\\n[\"15\", 0, \"AM\", 0.5, 1]\\n',\n+                '[\"0\", 0, \"AM\", 0.5, 1]\\n',\n+                '' # tolerates\n+            ],\n+        },\n+        'JSONCompactEachRowWithNamesAndTypes' : {\n+            'data_sample' : [\n+                '[\"id\", \"blockNo\", \"val1\", \"val2\", \"val3\"]\\n[\"Int64\", \"UInt16\", \"String\", \"Float32\", \"UInt8\"]\\n[\"0\", 0, \"AM\", 0.5, 1]\\n',\n+                '[\"id\", \"blockNo\", \"val1\", \"val2\", \"val3\"]\\n[\"Int64\", \"UInt16\", \"String\", \"Float32\", \"UInt8\"]\\n[\"1\", 0, \"AM\", 0.5, 1]\\n[\"2\", 0, \"AM\", 0.5, 1]\\n[\"3\", 0, \"AM\", 0.5, 1]\\n[\"4\", 0, \"AM\", 0.5, 1]\\n[\"5\", 0, \"AM\", 0.5, 1]\\n[\"6\", 0, \"AM\", 0.5, 1]\\n[\"7\", 0, \"AM\", 0.5, 1]\\n[\"8\", 0, \"AM\", 0.5, 1]\\n[\"9\", 0, \"AM\", 0.5, 1]\\n[\"10\", 0, \"AM\", 0.5, 1]\\n[\"11\", 0, \"AM\", 0.5, 1]\\n[\"12\", 0, \"AM\", 0.5, 1]\\n[\"13\", 0, \"AM\", 0.5, 1]\\n[\"14\", 0, \"AM\", 0.5, 1]\\n[\"15\", 0, \"AM\", 0.5, 1]\\n',\n+                '[\"id\", \"blockNo\", \"val1\", \"val2\", \"val3\"]\\n[\"Int64\", \"UInt16\", \"String\", \"Float32\", \"UInt8\"]\\n[\"0\", 0, \"AM\", 0.5, 1]\\n',\n+                # ''\n+                # On empty message exception: Cannot parse input: expected '[' at end of stream., Stack trace (when copying this message, always include the lines below):\n+                # /src/IO/ReadHelpers.h:175: DB::assertChar(char, DB::ReadBuffer&) @ 0x15db231a in /usr/bin/clickhouse\n+                # /src/Processors/Formats/Impl/JSONCompactEachRowRowInputFormat.cpp:0: DB::JSONCompactEachRowRowInputFormat::readPrefix() @ 0x1dee6bd6 in /usr/bin/clickhouse\n+                # /src/Processors/Formats/IRowInputFormat.cpp:0: DB::IRowInputFormat::generate() @ 0x1de72710 in /usr/bin/clickhouse\n+            ],\n+        },\n+        'TSKV' : {\n+            'data_sample' : [\n+                'id=0\\tblockNo=0\\tval1=AM\\tval2=0.5\\tval3=1\\n',\n+                'id=1\\tblockNo=0\\tval1=AM\\tval2=0.5\\tval3=1\\nid=2\\tblockNo=0\\tval1=AM\\tval2=0.5\\tval3=1\\nid=3\\tblockNo=0\\tval1=AM\\tval2=0.5\\tval3=1\\nid=4\\tblockNo=0\\tval1=AM\\tval2=0.5\\tval3=1\\nid=5\\tblockNo=0\\tval1=AM\\tval2=0.5\\tval3=1\\nid=6\\tblockNo=0\\tval1=AM\\tval2=0.5\\tval3=1\\nid=7\\tblockNo=0\\tval1=AM\\tval2=0.5\\tval3=1\\nid=8\\tblockNo=0\\tval1=AM\\tval2=0.5\\tval3=1\\nid=9\\tblockNo=0\\tval1=AM\\tval2=0.5\\tval3=1\\nid=10\\tblockNo=0\\tval1=AM\\tval2=0.5\\tval3=1\\nid=11\\tblockNo=0\\tval1=AM\\tval2=0.5\\tval3=1\\nid=12\\tblockNo=0\\tval1=AM\\tval2=0.5\\tval3=1\\nid=13\\tblockNo=0\\tval1=AM\\tval2=0.5\\tval3=1\\nid=14\\tblockNo=0\\tval1=AM\\tval2=0.5\\tval3=1\\nid=15\\tblockNo=0\\tval1=AM\\tval2=0.5\\tval3=1\\n',\n+                'id=0\\tblockNo=0\\tval1=AM\\tval2=0.5\\tval3=1\\n',\n+                # ''\n+                # On empty message exception: Unexpected end of stream while reading key name from TSKV format\n+                # /src/Processors/Formats/Impl/TSKVRowInputFormat.cpp:88: DB::readName(DB::ReadBuffer&, StringRef&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&) @ 0x1df8c098 in /usr/bin/clickhouse\n+                # /src/Processors/Formats/Impl/TSKVRowInputFormat.cpp:114: DB::TSKVRowInputFormat::readRow(std::__1::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&, DB::RowReadExtension&) @ 0x1df8ae3e in /usr/bin/clickhouse\n+                # /src/Processors/Formats/IRowInputFormat.cpp:64: DB::IRowInputFormat::generate() @ 0x1de727cf in /usr/bin/clickhouse\n+            ],\n+        },\n+        'CSV' : {\n+            'data_sample' : [\n+                '0,0,\"AM\",0.5,1\\n',\n+                '1,0,\"AM\",0.5,1\\n2,0,\"AM\",0.5,1\\n3,0,\"AM\",0.5,1\\n4,0,\"AM\",0.5,1\\n5,0,\"AM\",0.5,1\\n6,0,\"AM\",0.5,1\\n7,0,\"AM\",0.5,1\\n8,0,\"AM\",0.5,1\\n9,0,\"AM\",0.5,1\\n10,0,\"AM\",0.5,1\\n11,0,\"AM\",0.5,1\\n12,0,\"AM\",0.5,1\\n13,0,\"AM\",0.5,1\\n14,0,\"AM\",0.5,1\\n15,0,\"AM\",0.5,1\\n',\n+                '0,0,\"AM\",0.5,1\\n',\n+                '' # tolerates\n+            ],\n+        },\n+        'TSV' : {\n+            'data_sample' : [\n+                '0\\t0\\tAM\\t0.5\\t1\\n',\n+                '1\\t0\\tAM\\t0.5\\t1\\n2\\t0\\tAM\\t0.5\\t1\\n3\\t0\\tAM\\t0.5\\t1\\n4\\t0\\tAM\\t0.5\\t1\\n5\\t0\\tAM\\t0.5\\t1\\n6\\t0\\tAM\\t0.5\\t1\\n7\\t0\\tAM\\t0.5\\t1\\n8\\t0\\tAM\\t0.5\\t1\\n9\\t0\\tAM\\t0.5\\t1\\n10\\t0\\tAM\\t0.5\\t1\\n11\\t0\\tAM\\t0.5\\t1\\n12\\t0\\tAM\\t0.5\\t1\\n13\\t0\\tAM\\t0.5\\t1\\n14\\t0\\tAM\\t0.5\\t1\\n15\\t0\\tAM\\t0.5\\t1\\n',\n+                '0\\t0\\tAM\\t0.5\\t1\\n',\n+                '' # tolerates\n+            ],\n+        },\n+        'CSVWithNames' : {\n+            'data_sample' : [\n+                '\"id\",\"blockNo\",\"val1\",\"val2\",\"val3\"\\n0,0,\"AM\",0.5,1\\n',\n+                '\"id\",\"blockNo\",\"val1\",\"val2\",\"val3\"\\n1,0,\"AM\",0.5,1\\n2,0,\"AM\",0.5,1\\n3,0,\"AM\",0.5,1\\n4,0,\"AM\",0.5,1\\n5,0,\"AM\",0.5,1\\n6,0,\"AM\",0.5,1\\n7,0,\"AM\",0.5,1\\n8,0,\"AM\",0.5,1\\n9,0,\"AM\",0.5,1\\n10,0,\"AM\",0.5,1\\n11,0,\"AM\",0.5,1\\n12,0,\"AM\",0.5,1\\n13,0,\"AM\",0.5,1\\n14,0,\"AM\",0.5,1\\n15,0,\"AM\",0.5,1\\n',\n+                '\"id\",\"blockNo\",\"val1\",\"val2\",\"val3\"\\n0,0,\"AM\",0.5,1\\n',\n+                # '',\n+                # On empty message exception happens: Attempt to read after eof\n+                # /src/IO/VarInt.h:122: DB::throwReadAfterEOF() @ 0x15c34487 in /usr/bin/clickhouse\n+                # /src/IO/ReadHelpers.cpp:583: void DB::readCSVStringInto<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, DB::ReadBuffer&, DB::FormatSettings::CSV const&) @ 0x15c961e1 in /usr/bin/clickhouse\n+                # /src/IO/ReadHelpers.cpp:678: DB::readCSVString(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&, DB::ReadBuffer&, DB::FormatSettings::CSV const&) @ 0x15c8dfae in /usr/bin/clickhouse\n+                # /src/Processors/Formats/Impl/CSVRowInputFormat.cpp:170: DB::CSVRowInputFormat::readPrefix() @ 0x1dec46f7 in /usr/bin/clickhouse\n+                # /src/Processors/Formats/IRowInputFormat.cpp:0: DB::IRowInputFormat::generate() @ 0x1de72710 in /usr/bin/clickhouse\n+                # /src/Processors/ISource.cpp:48: DB::ISource::work() @ 0x1dd79737 in /usr/bin/clickhouse\n+            ],\n+        },\n+        'Values' : {\n+            'data_sample' : [\n+                \"(0,0,'AM',0.5,1)\",\n+                \"(1,0,'AM',0.5,1),(2,0,'AM',0.5,1),(3,0,'AM',0.5,1),(4,0,'AM',0.5,1),(5,0,'AM',0.5,1),(6,0,'AM',0.5,1),(7,0,'AM',0.5,1),(8,0,'AM',0.5,1),(9,0,'AM',0.5,1),(10,0,'AM',0.5,1),(11,0,'AM',0.5,1),(12,0,'AM',0.5,1),(13,0,'AM',0.5,1),(14,0,'AM',0.5,1),(15,0,'AM',0.5,1)\",\n+                \"(0,0,'AM',0.5,1)\",\n+                '' # tolerates\n+            ],\n+        },\n+        'TSVWithNames' : {\n+            'data_sample' : [\n+                'id\\tblockNo\\tval1\\tval2\\tval3\\n0\\t0\\tAM\\t0.5\\t1\\n',\n+                'id\\tblockNo\\tval1\\tval2\\tval3\\n1\\t0\\tAM\\t0.5\\t1\\n2\\t0\\tAM\\t0.5\\t1\\n3\\t0\\tAM\\t0.5\\t1\\n4\\t0\\tAM\\t0.5\\t1\\n5\\t0\\tAM\\t0.5\\t1\\n6\\t0\\tAM\\t0.5\\t1\\n7\\t0\\tAM\\t0.5\\t1\\n8\\t0\\tAM\\t0.5\\t1\\n9\\t0\\tAM\\t0.5\\t1\\n10\\t0\\tAM\\t0.5\\t1\\n11\\t0\\tAM\\t0.5\\t1\\n12\\t0\\tAM\\t0.5\\t1\\n13\\t0\\tAM\\t0.5\\t1\\n14\\t0\\tAM\\t0.5\\t1\\n15\\t0\\tAM\\t0.5\\t1\\n',\n+                'id\\tblockNo\\tval1\\tval2\\tval3\\n0\\t0\\tAM\\t0.5\\t1\\n',\n+                '' # tolerates\n+            ],\n+        },\n+        'TSVWithNamesAndTypes' : {\n+            'data_sample' : [\n+                'id\\tblockNo\\tval1\\tval2\\tval3\\nInt64\\tUInt16\\tString\\tFloat32\\tUInt8\\n0\\t0\\tAM\\t0.5\\t1\\n',\n+                'id\\tblockNo\\tval1\\tval2\\tval3\\nInt64\\tUInt16\\tString\\tFloat32\\tUInt8\\n1\\t0\\tAM\\t0.5\\t1\\n2\\t0\\tAM\\t0.5\\t1\\n3\\t0\\tAM\\t0.5\\t1\\n4\\t0\\tAM\\t0.5\\t1\\n5\\t0\\tAM\\t0.5\\t1\\n6\\t0\\tAM\\t0.5\\t1\\n7\\t0\\tAM\\t0.5\\t1\\n8\\t0\\tAM\\t0.5\\t1\\n9\\t0\\tAM\\t0.5\\t1\\n10\\t0\\tAM\\t0.5\\t1\\n11\\t0\\tAM\\t0.5\\t1\\n12\\t0\\tAM\\t0.5\\t1\\n13\\t0\\tAM\\t0.5\\t1\\n14\\t0\\tAM\\t0.5\\t1\\n15\\t0\\tAM\\t0.5\\t1\\n',\n+                'id\\tblockNo\\tval1\\tval2\\tval3\\nInt64\\tUInt16\\tString\\tFloat32\\tUInt8\\n0\\t0\\tAM\\t0.5\\t1\\n',\n+                # '',\n+                # On empty message exception happens: Cannot parse input: expected '\\n' at end of stream.\n+                # /src/IO/ReadHelpers.cpp:84: DB::throwAtAssertionFailed(char const*, DB::ReadBuffer&) @ 0x15c8d8ec in /usr/bin/clickhouse\n+                # /src/IO/ReadHelpers.h:175: DB::assertChar(char, DB::ReadBuffer&) @ 0x15db231a in /usr/bin/clickhouse\n+                # /src/Processors/Formats/Impl/TabSeparatedRowInputFormat.cpp:24: DB::skipTSVRow(DB::ReadBuffer&, unsigned long) @ 0x1df92fac in /usr/bin/clickhouse\n+                # /src/Processors/Formats/Impl/TabSeparatedRowInputFormat.cpp:168: DB::TabSeparatedRowInputFormat::readPrefix() @ 0x1df92df0 in /usr/bin/clickhouse\n+                # /src/Processors/Formats/IRowInputFormat.cpp:0: DB::IRowInputFormat::generate() @ 0x1de72710 in /usr/bin/clickhouse\n+            ],\n+        },\n+        # 'Template' : {\n+        #     'data_sample' : [\n+        #         '(id = 0, blockNo = 0, val1 = \"AM\", val2 = 0.5, val3 = 1)',\n+        #        # '(id = 1, blockNo = 0, val1 = \"AM\", val2 = 0.5, val3 = 1)\\n(id = 2, blockNo = 0, val1 = \"AM\", val2 = 0.5, val3 = 1)\\n(id = 3, blockNo = 0, val1 = \"AM\", val2 = 0.5, val3 = 1)\\n(id = 4, blockNo = 0, val1 = \"AM\", val2 = 0.5, val3 = 1)\\n(id = 5, blockNo = 0, val1 = \"AM\", val2 = 0.5, val3 = 1)\\n(id = 6, blockNo = 0, val1 = \"AM\", val2 = 0.5, val3 = 1)\\n(id = 7, blockNo = 0, val1 = \"AM\", val2 = 0.5, val3 = 1)\\n(id = 8, blockNo = 0, val1 = \"AM\", val2 = 0.5, val3 = 1)\\n(id = 9, blockNo = 0, val1 = \"AM\", val2 = 0.5, val3 = 1)\\n(id = 10, blockNo = 0, val1 = \"AM\", val2 = 0.5, val3 = 1)\\n(id = 11, blockNo = 0, val1 = \"AM\", val2 = 0.5, val3 = 1)\\n(id = 12, blockNo = 0, val1 = \"AM\", val2 = 0.5, val3 = 1)\\n(id = 13, blockNo = 0, val1 = \"AM\", val2 = 0.5, val3 = 1)\\n(id = 14, blockNo = 0, val1 = \"AM\", val2 = 0.5, val3 = 1)\\n(id = 15, blockNo = 0, val1 = \"AM\", val2 = 0.5, val3 = 1)',\n+        #        # '(id = 0, blockNo = 0, val1 = \"AM\", val2 = 0.5, val3 = 1)',\n+        #         # '' # tolerates\n+        #     ],\n+        #     'extra_settings': \", format_template_row='template_row.format'\"\n+        # },\n+        'Regexp' : {\n+            'data_sample' : [\n+                '(id = 0, blockNo = 0, val1 = \"AM\", val2 = 0.5, val3 = 1)',\n+                '(id = 1, blockNo = 0, val1 = \"AM\", val2 = 0.5, val3 = 1)\\n(id = 2, blockNo = 0, val1 = \"AM\", val2 = 0.5, val3 = 1)\\n(id = 3, blockNo = 0, val1 = \"AM\", val2 = 0.5, val3 = 1)\\n(id = 4, blockNo = 0, val1 = \"AM\", val2 = 0.5, val3 = 1)\\n(id = 5, blockNo = 0, val1 = \"AM\", val2 = 0.5, val3 = 1)\\n(id = 6, blockNo = 0, val1 = \"AM\", val2 = 0.5, val3 = 1)\\n(id = 7, blockNo = 0, val1 = \"AM\", val2 = 0.5, val3 = 1)\\n(id = 8, blockNo = 0, val1 = \"AM\", val2 = 0.5, val3 = 1)\\n(id = 9, blockNo = 0, val1 = \"AM\", val2 = 0.5, val3 = 1)\\n(id = 10, blockNo = 0, val1 = \"AM\", val2 = 0.5, val3 = 1)\\n(id = 11, blockNo = 0, val1 = \"AM\", val2 = 0.5, val3 = 1)\\n(id = 12, blockNo = 0, val1 = \"AM\", val2 = 0.5, val3 = 1)\\n(id = 13, blockNo = 0, val1 = \"AM\", val2 = 0.5, val3 = 1)\\n(id = 14, blockNo = 0, val1 = \"AM\", val2 = 0.5, val3 = 1)\\n(id = 15, blockNo = 0, val1 = \"AM\", val2 = 0.5, val3 = 1)',\n+                '(id = 0, blockNo = 0, val1 = \"AM\", val2 = 0.5, val3 = 1)',\n+                # ''\n+                # On empty message exception happens: Line \"\" doesn't match the regexp.: (at row 1)\n+                # /src/Processors/Formats/Impl/RegexpRowInputFormat.cpp:140: DB::RegexpRowInputFormat::readRow(std::__1::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&, DB::RowReadExtension&) @ 0x1df82fcb in /usr/bin/clickhouse\n+            ],\n+            'extra_settings': \", format_regexp='\\(id = (.+?), blockNo = (.+?), val1 = \\\"(.+?)\\\", val2 = (.+?), val3 = (.+?)\\)', format_regexp_escaping_rule='Escaped'\"\n+        },\n+\n+        ## BINARY FORMATS\n+        # dumped with\n+        # clickhouse-client ... | xxd -ps -c 200 | tr -d '\\n' | sed 's/\\(..\\)/\\\\x\\1/g'\n+        'Native' : {\n+            'data_sample': [\n+                '\\x05\\x01\\x02\\x69\\x64\\x05\\x49\\x6e\\x74\\x36\\x34\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x07\\x62\\x6c\\x6f\\x63\\x6b\\x4e\\x6f\\x06\\x55\\x49\\x6e\\x74\\x31\\x36\\x00\\x00\\x04\\x76\\x61\\x6c\\x31\\x06\\x53\\x74\\x72\\x69\\x6e\\x67\\x02\\x41\\x4d\\x04\\x76\\x61\\x6c\\x32\\x07\\x46\\x6c\\x6f\\x61\\x74\\x33\\x32\\x00\\x00\\x00\\x3f\\x04\\x76\\x61\\x6c\\x33\\x05\\x55\\x49\\x6e\\x74\\x38\\x01',\n+                '\\x05\\x0f\\x02\\x69\\x64\\x05\\x49\\x6e\\x74\\x36\\x34\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x06\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x07\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x09\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0a\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0b\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0c\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0d\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0e\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x07\\x62\\x6c\\x6f\\x63\\x6b\\x4e\\x6f\\x06\\x55\\x49\\x6e\\x74\\x31\\x36\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x04\\x76\\x61\\x6c\\x31\\x06\\x53\\x74\\x72\\x69\\x6e\\x67\\x02\\x41\\x4d\\x02\\x41\\x4d\\x02\\x41\\x4d\\x02\\x41\\x4d\\x02\\x41\\x4d\\x02\\x41\\x4d\\x02\\x41\\x4d\\x02\\x41\\x4d\\x02\\x41\\x4d\\x02\\x41\\x4d\\x02\\x41\\x4d\\x02\\x41\\x4d\\x02\\x41\\x4d\\x02\\x41\\x4d\\x02\\x41\\x4d\\x04\\x76\\x61\\x6c\\x32\\x07\\x46\\x6c\\x6f\\x61\\x74\\x33\\x32\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x04\\x76\\x61\\x6c\\x33\\x05\\x55\\x49\\x6e\\x74\\x38\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01',\n+                '\\x05\\x01\\x02\\x69\\x64\\x05\\x49\\x6e\\x74\\x36\\x34\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x07\\x62\\x6c\\x6f\\x63\\x6b\\x4e\\x6f\\x06\\x55\\x49\\x6e\\x74\\x31\\x36\\x00\\x00\\x04\\x76\\x61\\x6c\\x31\\x06\\x53\\x74\\x72\\x69\\x6e\\x67\\x02\\x41\\x4d\\x04\\x76\\x61\\x6c\\x32\\x07\\x46\\x6c\\x6f\\x61\\x74\\x33\\x32\\x00\\x00\\x00\\x3f\\x04\\x76\\x61\\x6c\\x33\\x05\\x55\\x49\\x6e\\x74\\x38\\x01',\n+                # ''\n+                # On empty message exception happens: DB::Exception: Attempt to read after eof\n+                # /src/IO/VarInt.h:122: DB::throwReadAfterEOF() @ 0x15c34487 in /usr/bin/clickhouse\n+                # /src/IO/VarInt.h:135: void DB::readVarUIntImpl<false>(unsigned long&, DB::ReadBuffer&) @ 0x15c68bb7 in /usr/bin/clickhouse\n+                # /src/IO/VarInt.h:149: DB::readVarUInt(unsigned long&, DB::ReadBuffer&) @ 0x15c68844 in /usr/bin/clickhouse\n+                # /src/DataStreams/NativeBlockInputStream.cpp:124: DB::NativeBlockInputStream::readImpl() @ 0x1d3e2778 in /usr/bin/clickhouse\n+                # /src/DataStreams/IBlockInputStream.cpp:60: DB::IBlockInputStream::read() @ 0x1c9c92fd in /usr/bin/clickhouse\n+                # /src/Processors/Formats/Impl/NativeFormat.cpp:42: DB::NativeInputFormatFromNativeBlockInputStream::generate() @ 0x1df1ea79 in /usr/bin/clickhouse\n+                # /src/Processors/ISource.cpp:48: DB::ISource::work() @ 0x1dd79737 in /usr/bin/clickhouse\n+            ],\n+        },\n+        'MsgPack' : {\n+            'data_sample' : [\n+                '\\x00\\x00\\xa2\\x41\\x4d\\xca\\x3f\\x00\\x00\\x00\\x01',\n+                '\\x01\\x00\\xa2\\x41\\x4d\\xca\\x3f\\x00\\x00\\x00\\x01\\x02\\x00\\xa2\\x41\\x4d\\xca\\x3f\\x00\\x00\\x00\\x01\\x03\\x00\\xa2\\x41\\x4d\\xca\\x3f\\x00\\x00\\x00\\x01\\x04\\x00\\xa2\\x41\\x4d\\xca\\x3f\\x00\\x00\\x00\\x01\\x05\\x00\\xa2\\x41\\x4d\\xca\\x3f\\x00\\x00\\x00\\x01\\x06\\x00\\xa2\\x41\\x4d\\xca\\x3f\\x00\\x00\\x00\\x01\\x07\\x00\\xa2\\x41\\x4d\\xca\\x3f\\x00\\x00\\x00\\x01\\x08\\x00\\xa2\\x41\\x4d\\xca\\x3f\\x00\\x00\\x00\\x01\\x09\\x00\\xa2\\x41\\x4d\\xca\\x3f\\x00\\x00\\x00\\x01\\x0a\\x00\\xa2\\x41\\x4d\\xca\\x3f\\x00\\x00\\x00\\x01\\x0b\\x00\\xa2\\x41\\x4d\\xca\\x3f\\x00\\x00\\x00\\x01\\x0c\\x00\\xa2\\x41\\x4d\\xca\\x3f\\x00\\x00\\x00\\x01\\x0d\\x00\\xa2\\x41\\x4d\\xca\\x3f\\x00\\x00\\x00\\x01\\x0e\\x00\\xa2\\x41\\x4d\\xca\\x3f\\x00\\x00\\x00\\x01\\x0f\\x00\\xa2\\x41\\x4d\\xca\\x3f\\x00\\x00\\x00\\x01',\n+                '\\x00\\x00\\xa2\\x41\\x4d\\xca\\x3f\\x00\\x00\\x00\\x01',\n+                # ''\n+                # On empty message exception happens: Unexpected end of file while parsing msgpack object.: (at row 1)\n+                # coming from Processors/Formats/Impl/MsgPackRowInputFormat.cpp:170\n+            ],\n+        },\n+        'RowBinary' : {\n+            'data_sample' : [\n+                '\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x41\\x4d\\x00\\x00\\x00\\x3f\\x01',\n+                '\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x41\\x4d\\x00\\x00\\x00\\x3f\\x01\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x41\\x4d\\x00\\x00\\x00\\x3f\\x01\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x41\\x4d\\x00\\x00\\x00\\x3f\\x01\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x41\\x4d\\x00\\x00\\x00\\x3f\\x01\\x05\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x41\\x4d\\x00\\x00\\x00\\x3f\\x01\\x06\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x41\\x4d\\x00\\x00\\x00\\x3f\\x01\\x07\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x41\\x4d\\x00\\x00\\x00\\x3f\\x01\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x41\\x4d\\x00\\x00\\x00\\x3f\\x01\\x09\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x41\\x4d\\x00\\x00\\x00\\x3f\\x01\\x0a\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x41\\x4d\\x00\\x00\\x00\\x3f\\x01\\x0b\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x41\\x4d\\x00\\x00\\x00\\x3f\\x01\\x0c\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x41\\x4d\\x00\\x00\\x00\\x3f\\x01\\x0d\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x41\\x4d\\x00\\x00\\x00\\x3f\\x01\\x0e\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x41\\x4d\\x00\\x00\\x00\\x3f\\x01\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x41\\x4d\\x00\\x00\\x00\\x3f\\x01',\n+                '\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x41\\x4d\\x00\\x00\\x00\\x3f\\x01',\n+                # ''\n+                # On empty message exception happens: DB::Exception: Cannot read all data. Bytes read: 0. Bytes expected: 8.\n+                # /src/IO/ReadBuffer.h:157: DB::ReadBuffer::readStrict(char*, unsigned long) @ 0x15c6894d in /usr/bin/clickhouse\n+                # /src/IO/ReadHelpers.h:108: void DB::readPODBinary<long>(long&, DB::ReadBuffer&) @ 0x15c67715 in /usr/bin/clickhouse\n+                # /src/IO/ReadHelpers.h:737: std::__1::enable_if<is_arithmetic_v<long>, void>::type DB::readBinary<long>(long&, DB::ReadBuffer&) @ 0x15e7afbd in /usr/bin/clickhouse\n+                # /src/DataTypes/DataTypeNumberBase.cpp:180: DB::DataTypeNumberBase<long>::deserializeBinary(DB::IColumn&, DB::ReadBuffer&) const @ 0x1cace581 in /usr/bin/clickhouse\n+                # /src/Processors/Formats/Impl/BinaryRowInputFormat.cpp:22: DB::BinaryRowInputFormat::readRow(std::__1::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&, DB::RowReadExtension&) @ 0x1dea2c0b in /usr/bin/clickhouse\n+            ],\n+        },\n+        'RowBinaryWithNamesAndTypes' : {\n+            'data_sample' : [\n+                '\\x05\\x02\\x69\\x64\\x07\\x62\\x6c\\x6f\\x63\\x6b\\x4e\\x6f\\x04\\x76\\x61\\x6c\\x31\\x04\\x76\\x61\\x6c\\x32\\x04\\x76\\x61\\x6c\\x33\\x05\\x49\\x6e\\x74\\x36\\x34\\x06\\x55\\x49\\x6e\\x74\\x31\\x36\\x06\\x53\\x74\\x72\\x69\\x6e\\x67\\x07\\x46\\x6c\\x6f\\x61\\x74\\x33\\x32\\x05\\x55\\x49\\x6e\\x74\\x38\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x41\\x4d\\x00\\x00\\x00\\x3f\\x01',\n+                '\\x05\\x02\\x69\\x64\\x07\\x62\\x6c\\x6f\\x63\\x6b\\x4e\\x6f\\x04\\x76\\x61\\x6c\\x31\\x04\\x76\\x61\\x6c\\x32\\x04\\x76\\x61\\x6c\\x33\\x05\\x49\\x6e\\x74\\x36\\x34\\x06\\x55\\x49\\x6e\\x74\\x31\\x36\\x06\\x53\\x74\\x72\\x69\\x6e\\x67\\x07\\x46\\x6c\\x6f\\x61\\x74\\x33\\x32\\x05\\x55\\x49\\x6e\\x74\\x38\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x41\\x4d\\x00\\x00\\x00\\x3f\\x01\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x41\\x4d\\x00\\x00\\x00\\x3f\\x01\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x41\\x4d\\x00\\x00\\x00\\x3f\\x01\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x41\\x4d\\x00\\x00\\x00\\x3f\\x01\\x05\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x41\\x4d\\x00\\x00\\x00\\x3f\\x01\\x06\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x41\\x4d\\x00\\x00\\x00\\x3f\\x01\\x07\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x41\\x4d\\x00\\x00\\x00\\x3f\\x01\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x41\\x4d\\x00\\x00\\x00\\x3f\\x01\\x09\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x41\\x4d\\x00\\x00\\x00\\x3f\\x01\\x0a\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x41\\x4d\\x00\\x00\\x00\\x3f\\x01\\x0b\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x41\\x4d\\x00\\x00\\x00\\x3f\\x01\\x0c\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x41\\x4d\\x00\\x00\\x00\\x3f\\x01\\x0d\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x41\\x4d\\x00\\x00\\x00\\x3f\\x01\\x0e\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x41\\x4d\\x00\\x00\\x00\\x3f\\x01\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x41\\x4d\\x00\\x00\\x00\\x3f\\x01',\n+                '\\x05\\x02\\x69\\x64\\x07\\x62\\x6c\\x6f\\x63\\x6b\\x4e\\x6f\\x04\\x76\\x61\\x6c\\x31\\x04\\x76\\x61\\x6c\\x32\\x04\\x76\\x61\\x6c\\x33\\x05\\x49\\x6e\\x74\\x36\\x34\\x06\\x55\\x49\\x6e\\x74\\x31\\x36\\x06\\x53\\x74\\x72\\x69\\x6e\\x67\\x07\\x46\\x6c\\x6f\\x61\\x74\\x33\\x32\\x05\\x55\\x49\\x6e\\x74\\x38\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x41\\x4d\\x00\\x00\\x00\\x3f\\x01',\n+                #''\n+                # !!! On empty message segfault: Address not mapped to object\n+                # /contrib/FastMemcpy/FastMemcpy.h:666: memcpy_fast @ 0x21742d65 in /usr/bin/clickhouse\n+                # /contrib/FastMemcpy/memcpy_wrapper.c:5: memcpy @ 0x21738235 in /usr/bin/clickhouse\n+                # /src/IO/ReadBuffer.h:145: DB::ReadBuffer::read(char*, unsigned long) @ 0x15c369d7 in /usr/bin/clickhouse\n+                # /src/IO/ReadBuffer.h:155: DB::ReadBuffer::readStrict(char*, unsigned long) @ 0x15c68878 in /usr/bin/clickhouse\n+                # /src/DataTypes/DataTypeString.cpp:84: DB::DataTypeString::deserializeBinary(DB::IColumn&, DB::ReadBuffer&) const @ 0x1cad12e7 in /usr/bin/clickhouse\n+                # /src/Processors/Formats/Impl/BinaryRowInputFormat.cpp:22: DB::BinaryRowInputFormat::readRow(std::__1::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&, DB::RowReadExtension&) @ 0x1dea2c0b in /usr/bin/clickhouse\n+            ],\n+        },\n+        'Protobuf' : {\n+            'data_sample' : [\n+                '\\x0b\\x1a\\x02\\x41\\x4d\\x25\\x00\\x00\\x00\\x3f\\x28\\x01',\n+                '\\x0d\\x08\\x01\\x1a\\x02\\x41\\x4d\\x25\\x00\\x00\\x00\\x3f\\x28\\x01\\x0d\\x08\\x02\\x1a\\x02\\x41\\x4d\\x25\\x00\\x00\\x00\\x3f\\x28\\x01\\x0d\\x08\\x03\\x1a\\x02\\x41\\x4d\\x25\\x00\\x00\\x00\\x3f\\x28\\x01\\x0d\\x08\\x04\\x1a\\x02\\x41\\x4d\\x25\\x00\\x00\\x00\\x3f\\x28\\x01\\x0d\\x08\\x05\\x1a\\x02\\x41\\x4d\\x25\\x00\\x00\\x00\\x3f\\x28\\x01\\x0d\\x08\\x06\\x1a\\x02\\x41\\x4d\\x25\\x00\\x00\\x00\\x3f\\x28\\x01\\x0d\\x08\\x07\\x1a\\x02\\x41\\x4d\\x25\\x00\\x00\\x00\\x3f\\x28\\x01\\x0d\\x08\\x08\\x1a\\x02\\x41\\x4d\\x25\\x00\\x00\\x00\\x3f\\x28\\x01\\x0d\\x08\\x09\\x1a\\x02\\x41\\x4d\\x25\\x00\\x00\\x00\\x3f\\x28\\x01\\x0d\\x08\\x0a\\x1a\\x02\\x41\\x4d\\x25\\x00\\x00\\x00\\x3f\\x28\\x01\\x0d\\x08\\x0b\\x1a\\x02\\x41\\x4d\\x25\\x00\\x00\\x00\\x3f\\x28\\x01\\x0d\\x08\\x0c\\x1a\\x02\\x41\\x4d\\x25\\x00\\x00\\x00\\x3f\\x28\\x01\\x0d\\x08\\x0d\\x1a\\x02\\x41\\x4d\\x25\\x00\\x00\\x00\\x3f\\x28\\x01\\x0d\\x08\\x0e\\x1a\\x02\\x41\\x4d\\x25\\x00\\x00\\x00\\x3f\\x28\\x01\\x0d\\x08\\x0f\\x1a\\x02\\x41\\x4d\\x25\\x00\\x00\\x00\\x3f\\x28\\x01',\n+                '\\x0b\\x1a\\x02\\x41\\x4d\\x25\\x00\\x00\\x00\\x3f\\x28\\x01',\n+                # ''\n+                # On empty message exception: Attempt to read after eof\n+                # /src/IO/ReadBuffer.h:184: DB::ReadBuffer::throwReadAfterEOF() @ 0x15c9699b in /usr/bin/clickhouse\n+                # /src/Formats/ProtobufReader.h:115: DB::ProtobufReader::SimpleReader::startMessage() @ 0x1df4f828 in /usr/bin/clickhouse\n+                # /src/Formats/ProtobufReader.cpp:1119: DB::ProtobufReader::startMessage() @ 0x1df5356c in /usr/bin/clickhouse\n+                # /src/Processors/Formats/Impl/ProtobufRowInputFormat.cpp:25: DB::ProtobufRowInputFormat::readRow(std::__1::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&, DB::RowReadExtension&) @ 0x1df4cc71 in /usr/bin/clickhouse\n+                # /src/Processors/Formats/IRowInputFormat.cpp:64: DB::IRowInputFormat::generate() @ 0x1de727cf in /usr/bin/clickhouse\n+            ],\n+            'extra_settings': \", kafka_schema='test:TestMessage'\"\n+        },\n+        'ORC' : {\n+            'data_sample' : [\n+                '\\x4f\\x52\\x43\\x11\\x00\\x00\\x0a\\x06\\x12\\x04\\x08\\x01\\x50\\x00\\x2b\\x00\\x00\\x0a\\x13\\x0a\\x03\\x00\\x00\\x00\\x12\\x0c\\x08\\x01\\x12\\x06\\x08\\x00\\x10\\x00\\x18\\x00\\x50\\x00\\x30\\x00\\x00\\xe3\\x12\\xe7\\x62\\x65\\x00\\x01\\x21\\x3e\\x0e\\x46\\x25\\x0e\\x2e\\x46\\x03\\x21\\x46\\x03\\x09\\xa6\\x00\\x06\\x00\\x32\\x00\\x00\\xe3\\x92\\xe4\\x62\\x65\\x00\\x01\\x21\\x01\\x0e\\x46\\x25\\x2e\\x2e\\x26\\x47\\x5f\\x21\\x20\\x96\\x60\\x09\\x60\\x00\\x00\\x36\\x00\\x00\\xe3\\x92\\xe1\\x62\\x65\\x00\\x01\\x21\\x61\\x0e\\x46\\x23\\x5e\\x2e\\x46\\x03\\x21\\x66\\x03\\x3d\\x53\\x29\\x10\\x11\\xc0\\x00\\x00\\x2b\\x00\\x00\\x0a\\x13\\x0a\\x03\\x00\\x00\\x00\\x12\\x0c\\x08\\x01\\x12\\x06\\x08\\x02\\x10\\x02\\x18\\x02\\x50\\x00\\x05\\x00\\x00\\xff\\x00\\x03\\x00\\x00\\x30\\x07\\x00\\x00\\x40\\x00\\x80\\x05\\x00\\x00\\x41\\x4d\\x07\\x00\\x00\\x42\\x00\\x80\\x03\\x00\\x00\\x0a\\x07\\x00\\x00\\x42\\x00\\x80\\x05\\x00\\x00\\xff\\x01\\x88\\x00\\x00\\x4d\\xca\\xc1\\x0a\\x80\\x30\\x0c\\x03\\xd0\\x2e\\x6b\\xcb\\x98\\x17\\xf1\\x14\\x50\\xfc\\xff\\xcf\\xb4\\x66\\x1e\\x3c\\x84\\x47\\x9a\\xce\\x1c\\xb9\\x1b\\xb7\\xf9\\xda\\x48\\x09\\x9e\\xb2\\xf3\\x92\\xce\\x5b\\x86\\xf6\\x56\\x7f\\x21\\x41\\x2f\\x51\\xa6\\x7a\\xd7\\x1d\\xe5\\xea\\xae\\x3d\\xca\\xd5\\x83\\x71\\x60\\xd8\\x17\\xfc\\x62\\x0f\\xa8\\x00\\x00\\xe3\\x4a\\xe6\\x62\\xe1\\x60\\x0c\\x60\\xe0\\xe2\\xe3\\x60\\x14\\x62\\xe3\\x60\\x10\\x60\\x90\\x60\\x08\\x60\\x88\\x60\\xe5\\x12\\xe0\\x60\\x54\\xe2\\xe0\\x62\\x34\\x10\\x62\\x34\\x90\\x60\\x02\\x8a\\x70\\x71\\x09\\x01\\x45\\xb8\\xb8\\x98\\x1c\\x7d\\x85\\x80\\x58\\x82\\x05\\x28\\xc6\\xcd\\x25\\xca\\xc1\\x68\\xc4\\x0b\\x52\\xc5\\x6c\\xa0\\x67\\x2a\\x05\\x22\\xc0\\x4a\\x21\\x86\\x31\\x09\\x30\\x81\\xb5\\xb2\\x02\\x00\\x36\\x01\\x00\\x25\\x8c\\xbd\\x0a\\xc2\\x30\\x14\\x85\\x73\\x6f\\x92\\xf6\\x92\\x6a\\x09\\x01\\x21\\x64\\x92\\x4e\\x75\\x91\\x58\\x71\\xc9\\x64\\x27\\x5d\\x2c\\x1d\\x5d\\xfd\\x59\\xc4\\x42\\x37\\x5f\\xc0\\x17\\xe8\\x23\\x9b\\xc6\\xe1\\x3b\\x70\\x0f\\xdf\\xb9\\xc4\\xf5\\x17\\x5d\\x41\\x5c\\x4f\\x60\\x37\\xeb\\x53\\x0d\\x55\\x4d\\x0b\\x23\\x01\\xb9\\x90\\x2e\\xbf\\x0f\\xe3\\xe3\\xdd\\x8d\\x0e\\x5f\\x4f\\x27\\x3e\\xb7\\x61\\x97\\xb2\\x49\\xb9\\xaf\\x90\\x20\\x92\\x27\\x32\\x2a\\x6b\\xf4\\xf3\\x0d\\x1e\\x82\\x20\\xe8\\x59\\x28\\x09\\x4c\\x46\\x4c\\x33\\xcb\\x7a\\x76\\x95\\x41\\x47\\x9f\\x14\\x78\\x03\\xde\\x62\\x6c\\x54\\x30\\xb1\\x51\\x0a\\xdb\\x8b\\x89\\x58\\x11\\xbb\\x22\\xac\\x08\\x9a\\xe5\\x6c\\x71\\xbf\\x3d\\xb8\\x39\\x92\\xfa\\x7f\\x86\\x1a\\xd3\\x54\\x1e\\xa7\\xee\\xcc\\x7e\\x08\\x9e\\x01\\x10\\x01\\x18\\x80\\x80\\x10\\x22\\x02\\x00\\x0c\\x28\\x57\\x30\\x06\\x82\\xf4\\x03\\x03\\x4f\\x52\\x43\\x18',\n+                '\\x4f\\x52\\x43\\x11\\x00\\x00\\x0a\\x06\\x12\\x04\\x08\\x0f\\x50\\x00\\x2b\\x00\\x00\\x0a\\x13\\x0a\\x03\\x00\\x00\\x00\\x12\\x0c\\x08\\x0f\\x12\\x06\\x08\\x00\\x10\\x00\\x18\\x00\\x50\\x00\\x30\\x00\\x00\\xe3\\x12\\xe7\\x62\\x65\\x00\\x01\\x21\\x3e\\x0e\\x7e\\x25\\x0e\\x2e\\x46\\x43\\x21\\x46\\x4b\\x09\\xad\\x00\\x06\\x00\\x33\\x00\\x00\\x0a\\x17\\x0a\\x03\\x00\\x00\\x00\\x12\\x10\\x08\\x0f\\x22\\x0a\\x0a\\x02\\x41\\x4d\\x12\\x02\\x41\\x4d\\x18\\x3c\\x50\\x00\\x3a\\x00\\x00\\xe3\\x92\\xe1\\x62\\x65\\x00\\x01\\x21\\x61\\x0e\\x7e\\x23\\x5e\\x2e\\x46\\x03\\x21\\x66\\x03\\x3d\\x53\\x29\\x66\\x73\\x3d\\xd3\\x00\\x06\\x00\\x2b\\x00\\x00\\x0a\\x13\\x0a\\x03\\x00\\x00\\x00\\x12\\x0c\\x08\\x0f\\x12\\x06\\x08\\x02\\x10\\x02\\x18\\x1e\\x50\\x00\\x05\\x00\\x00\\x0c\\x00\\x2b\\x00\\x00\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\\x39\\x31\\x30\\x31\\x31\\x31\\x32\\x31\\x33\\x31\\x34\\x31\\x35\\x09\\x00\\x00\\x06\\x01\\x03\\x02\\x09\\x00\\x00\\xc0\\x0e\\x00\\x00\\x07\\x00\\x00\\x42\\x00\\x80\\x05\\x00\\x00\\x41\\x4d\\x0a\\x00\\x00\\xe3\\xe2\\x42\\x01\\x00\\x09\\x00\\x00\\xc0\\x0e\\x02\\x00\\x05\\x00\\x00\\x0c\\x01\\x94\\x00\\x00\\x2d\\xca\\xc1\\x0e\\x80\\x30\\x08\\x03\\xd0\\xc1\\x60\\x2e\\xf3\\x62\\x76\\x6a\\xe2\\x0e\\xfe\\xff\\x57\\x5a\\x3b\\x0f\\xe4\\x51\\xe8\\x68\\xbd\\x5d\\x05\\xe7\\xf8\\x34\\x40\\x3a\\x6e\\x59\\xb1\\x64\\xe0\\x91\\xa9\\xbf\\xb1\\x97\\xd2\\x95\\x9d\\x1e\\xca\\x55\\x3a\\x6d\\xb4\\xd2\\xdd\\x0b\\x74\\x9a\\x74\\xf7\\x12\\x39\\xbd\\x97\\x7f\\x7c\\x06\\xbb\\xa6\\x8d\\x97\\x17\\xb4\\x00\\x00\\xe3\\x4a\\xe6\\x62\\xe1\\xe0\\x0f\\x60\\xe0\\xe2\\xe3\\xe0\\x17\\x62\\xe3\\x60\\x10\\x60\\x90\\x60\\x08\\x60\\x88\\x60\\xe5\\x12\\xe0\\xe0\\x57\\xe2\\xe0\\x62\\x34\\x14\\x62\\xb4\\x94\\xd0\\x02\\x8a\\xc8\\x73\\x09\\x01\\x45\\xb8\\xb8\\x98\\x1c\\x7d\\x85\\x80\\x58\\xc2\\x06\\x28\\x26\\xc4\\x25\\xca\\xc1\\x6f\\xc4\\xcb\\xc5\\x68\\x20\\xc4\\x6c\\xa0\\x67\\x2a\\xc5\\x6c\\xae\\x67\\x0a\\x14\\xe6\\x87\\x1a\\xc6\\x24\\xc0\\x24\\x21\\x07\\x32\\x0c\\x00\\x4a\\x01\\x00\\xe3\\x60\\x16\\x58\\xc3\\x24\\xc5\\xcd\\xc1\\x2c\\x30\\x89\\x51\\xc2\\x4b\\xc1\\x57\\x83\\x5f\\x49\\x83\\x83\\x47\\x88\\x95\\x91\\x89\\x99\\x85\\x55\\x8a\\x3d\\x29\\x27\\x3f\\x39\\xdb\\x2f\\x5f\\x8a\\x29\\x33\\x45\\x8a\\xa5\\x2c\\x31\\xc7\\x10\\x4c\\x1a\\x81\\x49\\x63\\x25\\x26\\x0e\\x46\\x20\\x66\\x07\\x63\\x36\\x0e\\x3e\\x0d\\x26\\x03\\x10\\x9f\\xd1\\x80\\xdf\\x8a\\x85\\x83\\x3f\\x80\\xc1\\x8a\\x8f\\x83\\x5f\\x88\\x8d\\x83\\x41\\x80\\x41\\x82\\x21\\x80\\x21\\x82\\xd5\\x4a\\x80\\x83\\x5f\\x89\\x83\\x8b\\xd1\\x50\\x88\\xd1\\x52\\x42\\x0b\\x28\\x22\\x6f\\x25\\x04\\x14\\xe1\\xe2\\x62\\x72\\xf4\\x15\\x02\\x62\\x09\\x1b\\xa0\\x98\\x90\\x95\\x28\\x07\\xbf\\x11\\x2f\\x17\\xa3\\x81\\x10\\xb3\\x81\\x9e\\xa9\\x14\\xb3\\xb9\\x9e\\x29\\x50\\x98\\x1f\\x6a\\x18\\x93\\x00\\x93\\x84\\x1c\\xc8\\x30\\x87\\x09\\x7e\\x1e\\x0c\\x00\\x08\\xa8\\x01\\x10\\x01\\x18\\x80\\x80\\x10\\x22\\x02\\x00\\x0c\\x28\\x5d\\x30\\x06\\x82\\xf4\\x03\\x03\\x4f\\x52\\x43\\x18',\n+                '\\x4f\\x52\\x43\\x11\\x00\\x00\\x0a\\x06\\x12\\x04\\x08\\x01\\x50\\x00\\x2b\\x00\\x00\\x0a\\x13\\x0a\\x03\\x00\\x00\\x00\\x12\\x0c\\x08\\x01\\x12\\x06\\x08\\x00\\x10\\x00\\x18\\x00\\x50\\x00\\x30\\x00\\x00\\xe3\\x12\\xe7\\x62\\x65\\x00\\x01\\x21\\x3e\\x0e\\x46\\x25\\x0e\\x2e\\x46\\x03\\x21\\x46\\x03\\x09\\xa6\\x00\\x06\\x00\\x32\\x00\\x00\\xe3\\x92\\xe4\\x62\\x65\\x00\\x01\\x21\\x01\\x0e\\x46\\x25\\x2e\\x2e\\x26\\x47\\x5f\\x21\\x20\\x96\\x60\\x09\\x60\\x00\\x00\\x36\\x00\\x00\\xe3\\x92\\xe1\\x62\\x65\\x00\\x01\\x21\\x61\\x0e\\x46\\x23\\x5e\\x2e\\x46\\x03\\x21\\x66\\x03\\x3d\\x53\\x29\\x10\\x11\\xc0\\x00\\x00\\x2b\\x00\\x00\\x0a\\x13\\x0a\\x03\\x00\\x00\\x00\\x12\\x0c\\x08\\x01\\x12\\x06\\x08\\x02\\x10\\x02\\x18\\x02\\x50\\x00\\x05\\x00\\x00\\xff\\x00\\x03\\x00\\x00\\x30\\x07\\x00\\x00\\x40\\x00\\x80\\x05\\x00\\x00\\x41\\x4d\\x07\\x00\\x00\\x42\\x00\\x80\\x03\\x00\\x00\\x0a\\x07\\x00\\x00\\x42\\x00\\x80\\x05\\x00\\x00\\xff\\x01\\x88\\x00\\x00\\x4d\\xca\\xc1\\x0a\\x80\\x30\\x0c\\x03\\xd0\\x2e\\x6b\\xcb\\x98\\x17\\xf1\\x14\\x50\\xfc\\xff\\xcf\\xb4\\x66\\x1e\\x3c\\x84\\x47\\x9a\\xce\\x1c\\xb9\\x1b\\xb7\\xf9\\xda\\x48\\x09\\x9e\\xb2\\xf3\\x92\\xce\\x5b\\x86\\xf6\\x56\\x7f\\x21\\x41\\x2f\\x51\\xa6\\x7a\\xd7\\x1d\\xe5\\xea\\xae\\x3d\\xca\\xd5\\x83\\x71\\x60\\xd8\\x17\\xfc\\x62\\x0f\\xa8\\x00\\x00\\xe3\\x4a\\xe6\\x62\\xe1\\x60\\x0c\\x60\\xe0\\xe2\\xe3\\x60\\x14\\x62\\xe3\\x60\\x10\\x60\\x90\\x60\\x08\\x60\\x88\\x60\\xe5\\x12\\xe0\\x60\\x54\\xe2\\xe0\\x62\\x34\\x10\\x62\\x34\\x90\\x60\\x02\\x8a\\x70\\x71\\x09\\x01\\x45\\xb8\\xb8\\x98\\x1c\\x7d\\x85\\x80\\x58\\x82\\x05\\x28\\xc6\\xcd\\x25\\xca\\xc1\\x68\\xc4\\x0b\\x52\\xc5\\x6c\\xa0\\x67\\x2a\\x05\\x22\\xc0\\x4a\\x21\\x86\\x31\\x09\\x30\\x81\\xb5\\xb2\\x02\\x00\\x36\\x01\\x00\\x25\\x8c\\xbd\\x0a\\xc2\\x30\\x14\\x85\\x73\\x6f\\x92\\xf6\\x92\\x6a\\x09\\x01\\x21\\x64\\x92\\x4e\\x75\\x91\\x58\\x71\\xc9\\x64\\x27\\x5d\\x2c\\x1d\\x5d\\xfd\\x59\\xc4\\x42\\x37\\x5f\\xc0\\x17\\xe8\\x23\\x9b\\xc6\\xe1\\x3b\\x70\\x0f\\xdf\\xb9\\xc4\\xf5\\x17\\x5d\\x41\\x5c\\x4f\\x60\\x37\\xeb\\x53\\x0d\\x55\\x4d\\x0b\\x23\\x01\\xb9\\x90\\x2e\\xbf\\x0f\\xe3\\xe3\\xdd\\x8d\\x0e\\x5f\\x4f\\x27\\x3e\\xb7\\x61\\x97\\xb2\\x49\\xb9\\xaf\\x90\\x20\\x92\\x27\\x32\\x2a\\x6b\\xf4\\xf3\\x0d\\x1e\\x82\\x20\\xe8\\x59\\x28\\x09\\x4c\\x46\\x4c\\x33\\xcb\\x7a\\x76\\x95\\x41\\x47\\x9f\\x14\\x78\\x03\\xde\\x62\\x6c\\x54\\x30\\xb1\\x51\\x0a\\xdb\\x8b\\x89\\x58\\x11\\xbb\\x22\\xac\\x08\\x9a\\xe5\\x6c\\x71\\xbf\\x3d\\xb8\\x39\\x92\\xfa\\x7f\\x86\\x1a\\xd3\\x54\\x1e\\xa7\\xee\\xcc\\x7e\\x08\\x9e\\x01\\x10\\x01\\x18\\x80\\x80\\x10\\x22\\x02\\x00\\x0c\\x28\\x57\\x30\\x06\\x82\\xf4\\x03\\x03\\x4f\\x52\\x43\\x18',\n+                #''\n+                # On empty message exception:  IOError: File size too small, Stack trace (when copying this message, always include the lines below):\n+                # /src/Processors/Formats/Impl/ORCBlockInputFormat.cpp:36: DB::ORCBlockInputFormat::generate() @ 0x1df282a6 in /usr/bin/clickhouse\n+                # /src/Processors/ISource.cpp:48: DB::ISource::work() @ 0x1dd79737 in /usr/bin/clickhouse\n+            ],\n+        },\n+        'CapnProto' : {\n+            'data_sample' : [\n+                '\\x00\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x3f\\x01\\x00\\x00\\x00\\x1a\\x00\\x00\\x00\\x41\\x4d\\x00\\x00\\x00\\x00\\x00\\x00',\n+                '\\x00\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x01\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x3f\\x01\\x00\\x00\\x00\\x1a\\x00\\x00\\x00\\x41\\x4d\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x01\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x3f\\x01\\x00\\x00\\x00\\x1a\\x00\\x00\\x00\\x41\\x4d\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x01\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x3f\\x01\\x00\\x00\\x00\\x1a\\x00\\x00\\x00\\x41\\x4d\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x01\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x3f\\x01\\x00\\x00\\x00\\x1a\\x00\\x00\\x00\\x41\\x4d\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x01\\x00\\x05\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x3f\\x01\\x00\\x00\\x00\\x1a\\x00\\x00\\x00\\x41\\x4d\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x01\\x00\\x06\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x3f\\x01\\x00\\x00\\x00\\x1a\\x00\\x00\\x00\\x41\\x4d\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x01\\x00\\x07\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x3f\\x01\\x00\\x00\\x00\\x1a\\x00\\x00\\x00\\x41\\x4d\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x01\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x3f\\x01\\x00\\x00\\x00\\x1a\\x00\\x00\\x00\\x41\\x4d\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x01\\x00\\x09\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x3f\\x01\\x00\\x00\\x00\\x1a\\x00\\x00\\x00\\x41\\x4d\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x01\\x00\\x0a\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x3f\\x01\\x00\\x00\\x00\\x1a\\x00\\x00\\x00\\x41\\x4d\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x01\\x00\\x0b\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x3f\\x01\\x00\\x00\\x00\\x1a\\x00\\x00\\x00\\x41\\x4d\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x01\\x00\\x0c\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x3f\\x01\\x00\\x00\\x00\\x1a\\x00\\x00\\x00\\x41\\x4d\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x01\\x00\\x0d\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x3f\\x01\\x00\\x00\\x00\\x1a\\x00\\x00\\x00\\x41\\x4d\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x01\\x00\\x0e\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x3f\\x01\\x00\\x00\\x00\\x1a\\x00\\x00\\x00\\x41\\x4d\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x01\\x00\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x3f\\x01\\x00\\x00\\x00\\x1a\\x00\\x00\\x00\\x41\\x4d\\x00\\x00\\x00\\x00\\x00\\x00',\n+                '\\x00\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x3f\\x01\\x00\\x00\\x00\\x1a\\x00\\x00\\x00\\x41\\x4d\\x00\\x00\\x00\\x00\\x00\\x00',\n+                # ''\n+                # On empty message exception: Cannot read all data. Bytes read: 0. Bytes expected: 4.\n+                # /src/IO/ReadBuffer.h:157: DB::ReadBuffer::readStrict(char*, unsigned long) @ 0x15c6894d in /usr/bin/clickhouse\n+                # /src/Processors/Formats/Impl/CapnProtoRowInputFormat.cpp:212: DB::CapnProtoRowInputFormat::readMessage() @ 0x1ded1cab in /usr/bin/clickhouse\n+                # /src/Processors/Formats/Impl/CapnProtoRowInputFormat.cpp:241: DB::CapnProtoRowInputFormat::readRow(std::__1::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&, DB::RowReadExtension&) @ 0x1ded205d in /usr/bin/clickhouse\n+            ],\n+            'extra_settings': \", kafka_schema='test:TestRecordStruct'\"\n+        },\n+\n+\n+        # 'Parquet' : {\n+        # not working at all with Kafka: DB::Exception: IOError: Invalid Parquet file size is 0 bytes\n+        # /contrib/libcxx/include/exception:129: std::exception::capture() @ 0x15c33fe8 in /usr/bin/clickhouse\n+        # /contrib/libcxx/include/exception:109: std::exception::exception() @ 0x15c33fb5 in /usr/bin/clickhouse\n+        # /contrib/poco/Foundation/src/Exception.cpp:27: Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x21877833 in /usr/bin/clickhouse\n+        # /src/Common/Exception.cpp:37: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x15c2d2a3 in /usr/bin/clickhouse\n+        # /src/Processors/Formats/Impl/ParquetBlockInputFormat.cpp:70: DB::ParquetBlockInputFormat::prepareReader() @ 0x1df2b0c2 in /usr/bin/clickhouse\n+        # /src/Processors/Formats/Impl/ParquetBlockInputFormat.cpp:36: DB::ParquetBlockInputFormat::ParquetBlockInputFormat(DB::ReadBuffer&, DB::Block) @ 0x1df2af8b in /usr/bin/clickhouse\n+        # /contrib/libcxx/include/memory:2214: std::__1::__compressed_pair_elem<DB::ParquetBlockInputFormat, 1, false>::__compressed_pair_elem<DB::ReadBuffer&, DB::Block const&, 0ul, 1ul>(std::__1::piecewise_construct_t, std::__1::tuple<DB::ReadBuffer&, DB::Block const&>, std::__1::__tuple_indices<0ul, 1ul>) @ 0x1df2dc88 in /usr/bin/clickhouse\n+        # /contrib/libcxx/include/memory:2299: std::__1::__compressed_pair<std::__1::allocator<DB::ParquetBlockInputFormat>, DB::ParquetBlockInputFormat>::__compressed_pair<std::__1::allocator<DB::ParquetBlockInputFormat>&, DB::ReadBuffer&, DB::Block const&>(std::__1::piecewise_construct_t, std::__1::tuple<std::__1::allocator<DB::ParquetBlockInputFormat>&>, std::__1::tuple<DB::ReadBuffer&, DB::Block const&>) @ 0x1df2d9c8 in /usr/bin/clickhouse\n+        # /contrib/libcxx/include/memory:3569: std::__1::__shared_ptr_emplace<DB::ParquetBlockInputFormat, std::__1::allocator<DB::ParquetBlockInputFormat> >::__shared_ptr_emplace<DB::ReadBuffer&, DB::Block const&>(std::__1::allocator<DB::ParquetBlockInputFormat>, DB::ReadBuffer&, DB::Block const&) @ 0x1df2d687 in /usr/bin/clickhouse\n+        # /contrib/libcxx/include/memory:4400: std::__1::enable_if<!(is_array<DB::ParquetBlockInputFormat>::value), std::__1::shared_ptr<DB::ParquetBlockInputFormat> >::type std::__1::make_shared<DB::ParquetBlockInputFormat, DB::ReadBuffer&, DB::Block const&>(DB::ReadBuffer&, DB::Block const&) @ 0x1df2d455 in /usr/bin/clickhouse\n+        # /src/Processors/Formats/Impl/ParquetBlockInputFormat.cpp:95: DB::registerInputFormatProcessorParquet(DB::FormatFactory&)::$_0::operator()(DB::ReadBuffer&, DB::Block const&, DB::RowInputFormatParams const&, DB::FormatSettings const&) const @ 0x1df2cec7 in /usr/bin/clickhouse\n+        # /contrib/libcxx/include/type_traits:3519: decltype(std::__1::forward<DB::registerInputFormatProcessorParquet(DB::FormatFactory&)::$_0&>(fp)(std::__1::forward<DB::ReadBuffer&>(fp0), std::__1::forward<DB::Block const&>(fp0), std::__1::forward<DB::RowInputFormatParams const&>(fp0), std::__1::forward<DB::FormatSettings const&>(fp0))) std::__1::__invoke<DB::registerInputFormatProcessorParquet(DB::FormatFactory&)::$_0&, DB::ReadBuffer&, DB::Block const&, DB::RowInputFormatParams const&, DB::FormatSettings const&>(DB::registerInputFormatProcessorParquet(DB::FormatFactory&)::$_0&, DB::ReadBuffer&, DB::Block const&, DB::RowInputFormatParams const&, DB::FormatSettings const&) @ 0x1df2ce6a in /usr/bin/clickhouse\n+        # /contrib/libcxx/include/__functional_base:317: std::__1::shared_ptr<DB::IInputFormat> std::__1::__invoke_void_return_wrapper<std::__1::shared_ptr<DB::IInputFormat> >::__call<DB::registerInputFormatProcessorParquet(DB::FormatFactory&)::$_0&, DB::ReadBuffer&, DB::Block const&, DB::RowInputFormatParams const&, DB::FormatSettings const&>(DB::registerInputFormatProcessorParquet(DB::FormatFactory&)::$_0&, DB::ReadBuffer&, DB::Block const&, DB::RowInputFormatParams const&, DB::FormatSettings const&) @ 0x1df2cd7d in /usr/bin/clickhouse\n+        # /contrib/libcxx/include/functional:1540: std::__1::__function::__alloc_func<DB::registerInputFormatProcessorParquet(DB::FormatFactory&)::$_0, std::__1::allocator<DB::registerInputFormatProcessorParquet(DB::FormatFactory&)::$_0>, std::__1::shared_ptr<DB::IInputFormat> (DB::ReadBuffer&, DB::Block const&, DB::RowInputFormatParams const&, DB::FormatSettings const&)>::operator()(DB::ReadBuffer&, DB::Block const&, DB::RowInputFormatParams const&, DB::FormatSettings const&) @ 0x1df2ccda in /usr/bin/clickhouse\n+        # /contrib/libcxx/include/functional:1714: std::__1::__function::__func<DB::registerInputFormatProcessorParquet(DB::FormatFactory&)::$_0, std::__1::allocator<DB::registerInputFormatProcessorParquet(DB::FormatFactory&)::$_0>, std::__1::shared_ptr<DB::IInputFormat> (DB::ReadBuffer&, DB::Block const&, DB::RowInputFormatParams const&, DB::FormatSettings const&)>::operator()(DB::ReadBuffer&, DB::Block const&, DB::RowInputFormatParams const&, DB::FormatSettings const&) @ 0x1df2bdec in /usr/bin/clickhouse\n+        # /contrib/libcxx/include/functional:1867: std::__1::__function::__value_func<std::__1::shared_ptr<DB::IInputFormat> (DB::ReadBuffer&, DB::Block const&, DB::RowInputFormatParams const&, DB::FormatSettings const&)>::operator()(DB::ReadBuffer&, DB::Block const&, DB::RowInputFormatParams const&, DB::FormatSettings const&) const @ 0x1dd14dbd in /usr/bin/clickhouse\n+        # /contrib/libcxx/include/functional:2473: std::__1::function<std::__1::shared_ptr<DB::IInputFormat> (DB::ReadBuffer&, DB::Block const&, DB::RowInputFormatParams const&, DB::FormatSettings const&)>::operator()(DB::ReadBuffer&, DB::Block const&, DB::RowInputFormatParams const&, DB::FormatSettings const&) const @ 0x1dd07035 in /usr/bin/clickhouse\n+        # /src/Formats/FormatFactory.cpp:258: DB::FormatFactory::getInputFormat(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::ReadBuffer&, DB::Block const&, DB::Context const&, unsigned long, std::__1::function<void ()>) const @ 0x1dd04007 in /usr/bin/clickhouse\n+        # /src/Storages/Kafka/KafkaBlockInputStream.cpp:76: DB::KafkaBlockInputStream::readImpl() @ 0x1d8f6559 in /usr/bin/clickhouse\n+        # /src/DataStreams/IBlockInputStream.cpp:60: DB::IBlockInputStream::read() @ 0x1c9c92fd in /usr/bin/clickhouse\n+        # /src/DataStreams/copyData.cpp:26: void DB::copyDataImpl<DB::copyData(DB::IBlockInputStream&, DB::IBlockOutputStream&, std::__1::atomic<bool>*)::$_0&, void (&)(DB::Block const&)>(DB::IBlockInputStream&, DB::IBlockOutputStream&, DB::copyData(DB::IBlockInputStream&, DB::IBlockOutputStream&, std::__1::atomic<bool>*)::$_0&, void (&)(DB::Block const&)) @ 0x1c9ea01c in /usr/bin/clickhouse\n+        # /src/DataStreams/copyData.cpp:63: DB::copyData(DB::IBlockInputStream&, DB::IBlockOutputStream&, std::__1::atomic<bool>*) @ 0x1c9e9fc7 in /usr/bin/clickhouse\n+        # /src/Storages/Kafka/StorageKafka.cpp:565: DB::StorageKafka::streamToViews() @ 0x1d8cc3fa in /usr/bin/clickhouse\n+        #     # 'data_sample' : [\n+        #     #     '\\x50\\x41\\x52\\x31\\x15\\x04\\x15\\x10\\x15\\x14\\x4c\\x15\\x02\\x15\\x04\\x12\\x00\\x00\\x08\\x1c\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x15\\x00\\x15\\x06\\x15\\x0a\\x2c\\x15\\x02\\x15\\x04\\x15\\x06\\x15\\x06\\x1c\\x18\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x18\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x16\\x00\\x28\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x18\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x08\\x01\\x02\\x00\\x26\\xbc\\x01\\x1c\\x15\\x04\\x19\\x35\\x04\\x00\\x06\\x19\\x18\\x02\\x69\\x64\\x15\\x02\\x16\\x02\\x16\\xac\\x01\\x16\\xb4\\x01\\x26\\x38\\x26\\x08\\x1c\\x18\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x18\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x16\\x00\\x28\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x18\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x15\\x04\\x15\\x08\\x15\\x0c\\x4c\\x15\\x02\\x15\\x04\\x12\\x00\\x00\\x04\\x0c\\x00\\x00\\x00\\x00\\x15\\x00\\x15\\x06\\x15\\x0a\\x2c\\x15\\x02\\x15\\x04\\x15\\x06\\x15\\x06\\x1c\\x36\\x00\\x28\\x04\\x00\\x00\\x00\\x00\\x18\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x08\\x01\\x02\\x00\\x26\\xc8\\x03\\x1c\\x15\\x02\\x19\\x35\\x04\\x00\\x06\\x19\\x18\\x07\\x62\\x6c\\x6f\\x63\\x6b\\x4e\\x6f\\x15\\x02\\x16\\x02\\x16\\x6c\\x16\\x74\\x26\\xfc\\x02\\x26\\xd4\\x02\\x1c\\x36\\x00\\x28\\x04\\x00\\x00\\x00\\x00\\x18\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x15\\x04\\x15\\x0c\\x15\\x10\\x4c\\x15\\x02\\x15\\x04\\x12\\x00\\x00\\x06\\x14\\x02\\x00\\x00\\x00\\x41\\x4d\\x15\\x00\\x15\\x06\\x15\\x0a\\x2c\\x15\\x02\\x15\\x04\\x15\\x06\\x15\\x06\\x1c\\x36\\x00\\x28\\x02\\x41\\x4d\\x18\\x02\\x41\\x4d\\x00\\x00\\x00\\x03\\x08\\x01\\x02\\x00\\x26\\xa2\\x05\\x1c\\x15\\x0c\\x19\\x35\\x04\\x00\\x06\\x19\\x18\\x04\\x76\\x61\\x6c\\x31\\x15\\x02\\x16\\x02\\x16\\x68\\x16\\x70\\x26\\xde\\x04\\x26\\xb2\\x04\\x1c\\x36\\x00\\x28\\x02\\x41\\x4d\\x18\\x02\\x41\\x4d\\x00\\x00\\x00\\x15\\x04\\x15\\x08\\x15\\x0c\\x4c\\x15\\x02\\x15\\x04\\x12\\x00\\x00\\x04\\x0c\\x00\\x00\\x00\\x3f\\x15\\x00\\x15\\x06\\x15\\x0a\\x2c\\x15\\x02\\x15\\x04\\x15\\x06\\x15\\x06\\x1c\\x18\\x04\\x00\\x00\\x00\\x3f\\x18\\x04\\x00\\x00\\x00\\x3f\\x16\\x00\\x28\\x04\\x00\\x00\\x00\\x3f\\x18\\x04\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x03\\x08\\x01\\x02\\x00\\x26\\x8a\\x07\\x1c\\x15\\x08\\x19\\x35\\x04\\x00\\x06\\x19\\x18\\x04\\x76\\x61\\x6c\\x32\\x15\\x02\\x16\\x02\\x16\\x84\\x01\\x16\\x8c\\x01\\x26\\xa6\\x06\\x26\\xfe\\x05\\x1c\\x18\\x04\\x00\\x00\\x00\\x3f\\x18\\x04\\x00\\x00\\x00\\x3f\\x16\\x00\\x28\\x04\\x00\\x00\\x00\\x3f\\x18\\x04\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x15\\x04\\x15\\x08\\x15\\x0c\\x4c\\x15\\x02\\x15\\x04\\x12\\x00\\x00\\x04\\x0c\\x01\\x00\\x00\\x00\\x15\\x00\\x15\\x06\\x15\\x0a\\x2c\\x15\\x02\\x15\\x04\\x15\\x06\\x15\\x06\\x1c\\x36\\x00\\x28\\x04\\x01\\x00\\x00\\x00\\x18\\x04\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x08\\x01\\x02\\x00\\x26\\xfe\\x08\\x1c\\x15\\x02\\x19\\x35\\x04\\x00\\x06\\x19\\x18\\x04\\x76\\x61\\x6c\\x33\\x15\\x02\\x16\\x02\\x16\\x6c\\x16\\x74\\x26\\xb2\\x08\\x26\\x8a\\x08\\x1c\\x36\\x00\\x28\\x04\\x01\\x00\\x00\\x00\\x18\\x04\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x15\\x02\\x19\\x6c\\x35\\x00\\x18\\x06\\x73\\x63\\x68\\x65\\x6d\\x61\\x15\\x0a\\x00\\x15\\x04\\x25\\x00\\x18\\x02\\x69\\x64\\x00\\x15\\x02\\x25\\x00\\x18\\x07\\x62\\x6c\\x6f\\x63\\x6b\\x4e\\x6f\\x25\\x18\\x4c\\xac\\x13\\x10\\x12\\x00\\x00\\x00\\x15\\x0c\\x25\\x00\\x18\\x04\\x76\\x61\\x6c\\x31\\x25\\x00\\x4c\\x1c\\x00\\x00\\x00\\x15\\x08\\x25\\x00\\x18\\x04\\x76\\x61\\x6c\\x32\\x00\\x15\\x02\\x25\\x00\\x18\\x04\\x76\\x61\\x6c\\x33\\x25\\x16\\x4c\\xac\\x13\\x08\\x12\\x00\\x00\\x00\\x16\\x02\\x19\\x1c\\x19\\x5c\\x26\\xbc\\x01\\x1c\\x15\\x04\\x19\\x35\\x04\\x00\\x06\\x19\\x18\\x02\\x69\\x64\\x15\\x02\\x16\\x02\\x16\\xac\\x01\\x16\\xb4\\x01\\x26\\x38\\x26\\x08\\x1c\\x18\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x18\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x16\\x00\\x28\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x18\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x26\\xc8\\x03\\x1c\\x15\\x02\\x19\\x35\\x04\\x00\\x06\\x19\\x18\\x07\\x62\\x6c\\x6f\\x63\\x6b\\x4e\\x6f\\x15\\x02\\x16\\x02\\x16\\x6c\\x16\\x74\\x26\\xfc\\x02\\x26\\xd4\\x02\\x1c\\x36\\x00\\x28\\x04\\x00\\x00\\x00\\x00\\x18\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x26\\xa2\\x05\\x1c\\x15\\x0c\\x19\\x35\\x04\\x00\\x06\\x19\\x18\\x04\\x76\\x61\\x6c\\x31\\x15\\x02\\x16\\x02\\x16\\x68\\x16\\x70\\x26\\xde\\x04\\x26\\xb2\\x04\\x1c\\x36\\x00\\x28\\x02\\x41\\x4d\\x18\\x02\\x41\\x4d\\x00\\x00\\x00\\x26\\x8a\\x07\\x1c\\x15\\x08\\x19\\x35\\x04\\x00\\x06\\x19\\x18\\x04\\x76\\x61\\x6c\\x32\\x15\\x02\\x16\\x02\\x16\\x84\\x01\\x16\\x8c\\x01\\x26\\xa6\\x06\\x26\\xfe\\x05\\x1c\\x18\\x04\\x00\\x00\\x00\\x3f\\x18\\x04\\x00\\x00\\x00\\x3f\\x16\\x00\\x28\\x04\\x00\\x00\\x00\\x3f\\x18\\x04\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x26\\xfe\\x08\\x1c\\x15\\x02\\x19\\x35\\x04\\x00\\x06\\x19\\x18\\x04\\x76\\x61\\x6c\\x33\\x15\\x02\\x16\\x02\\x16\\x6c\\x16\\x74\\x26\\xb2\\x08\\x26\\x8a\\x08\\x1c\\x36\\x00\\x28\\x04\\x01\\x00\\x00\\x00\\x18\\x04\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x16\\x98\\x05\\x16\\x02\\x00\\x28\\x22\\x70\\x61\\x72\\x71\\x75\\x65\\x74\\x2d\\x63\\x70\\x70\\x20\\x76\\x65\\x72\\x73\\x69\\x6f\\x6e\\x20\\x31\\x2e\\x35\\x2e\\x31\\x2d\\x53\\x4e\\x41\\x50\\x53\\x48\\x4f\\x54\\x19\\x5c\\x1c\\x00\\x00\\x1c\\x00\\x00\\x1c\\x00\\x00\\x1c\\x00\\x00\\x1c\\x00\\x00\\x00\\xc4\\x01\\x00\\x00\\x50\\x41\\x52\\x31',\n+        #     #     '\\x50\\x41\\x52\\x31\\x15\\x04\\x15\\xf0\\x01\\x15\\x90\\x01\\x4c\\x15\\x1e\\x15\\x04\\x12\\x00\\x00\\x78\\x04\\x01\\x00\\x09\\x01\\x00\\x02\\x09\\x07\\x04\\x00\\x03\\x0d\\x08\\x00\\x04\\x0d\\x08\\x00\\x05\\x0d\\x08\\x00\\x06\\x0d\\x08\\x00\\x07\\x0d\\x08\\x00\\x08\\x0d\\x08\\x00\\x09\\x0d\\x08\\x00\\x0a\\x0d\\x08\\x00\\x0b\\x0d\\x08\\x00\\x0c\\x0d\\x08\\x00\\x0d\\x0d\\x08\\x3c\\x0e\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x15\\x00\\x15\\x14\\x15\\x18\\x2c\\x15\\x1e\\x15\\x04\\x15\\x06\\x15\\x06\\x1c\\x18\\x08\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x18\\x08\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x16\\x00\\x28\\x08\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x18\\x08\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0a\\x24\\x04\\x05\\x10\\x32\\x54\\x76\\x98\\xba\\xdc\\x0e\\x26\\xca\\x02\\x1c\\x15\\x04\\x19\\x35\\x04\\x00\\x06\\x19\\x18\\x02\\x69\\x64\\x15\\x02\\x16\\x1e\\x16\\x9e\\x03\\x16\\xc2\\x02\\x26\\xb8\\x01\\x26\\x08\\x1c\\x18\\x08\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x18\\x08\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x16\\x00\\x28\\x08\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x18\\x08\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x15\\x04\\x15\\x08\\x15\\x0c\\x4c\\x15\\x02\\x15\\x04\\x12\\x00\\x00\\x04\\x0c\\x00\\x00\\x00\\x00\\x15\\x00\\x15\\x06\\x15\\x0a\\x2c\\x15\\x1e\\x15\\x04\\x15\\x06\\x15\\x06\\x1c\\x36\\x00\\x28\\x04\\x00\\x00\\x00\\x00\\x18\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x08\\x01\\x1e\\x00\\x26\\xd8\\x04\\x1c\\x15\\x02\\x19\\x35\\x04\\x00\\x06\\x19\\x18\\x07\\x62\\x6c\\x6f\\x63\\x6b\\x4e\\x6f\\x15\\x02\\x16\\x1e\\x16\\x6c\\x16\\x74\\x26\\x8c\\x04\\x26\\xe4\\x03\\x1c\\x36\\x00\\x28\\x04\\x00\\x00\\x00\\x00\\x18\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x15\\x04\\x15\\x0c\\x15\\x10\\x4c\\x15\\x02\\x15\\x04\\x12\\x00\\x00\\x06\\x14\\x02\\x00\\x00\\x00\\x41\\x4d\\x15\\x00\\x15\\x06\\x15\\x0a\\x2c\\x15\\x1e\\x15\\x04\\x15\\x06\\x15\\x06\\x1c\\x36\\x00\\x28\\x02\\x41\\x4d\\x18\\x02\\x41\\x4d\\x00\\x00\\x00\\x03\\x08\\x01\\x1e\\x00\\x26\\xb2\\x06\\x1c\\x15\\x0c\\x19\\x35\\x04\\x00\\x06\\x19\\x18\\x04\\x76\\x61\\x6c\\x31\\x15\\x02\\x16\\x1e\\x16\\x68\\x16\\x70\\x26\\xee\\x05\\x26\\xc2\\x05\\x1c\\x36\\x00\\x28\\x02\\x41\\x4d\\x18\\x02\\x41\\x4d\\x00\\x00\\x00\\x15\\x04\\x15\\x08\\x15\\x0c\\x4c\\x15\\x02\\x15\\x04\\x12\\x00\\x00\\x04\\x0c\\x00\\x00\\x00\\x3f\\x15\\x00\\x15\\x06\\x15\\x0a\\x2c\\x15\\x1e\\x15\\x04\\x15\\x06\\x15\\x06\\x1c\\x18\\x04\\x00\\x00\\x00\\x3f\\x18\\x04\\x00\\x00\\x00\\x3f\\x16\\x00\\x28\\x04\\x00\\x00\\x00\\x3f\\x18\\x04\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x03\\x08\\x01\\x1e\\x00\\x26\\x9a\\x08\\x1c\\x15\\x08\\x19\\x35\\x04\\x00\\x06\\x19\\x18\\x04\\x76\\x61\\x6c\\x32\\x15\\x02\\x16\\x1e\\x16\\x84\\x01\\x16\\x8c\\x01\\x26\\xb6\\x07\\x26\\x8e\\x07\\x1c\\x18\\x04\\x00\\x00\\x00\\x3f\\x18\\x04\\x00\\x00\\x00\\x3f\\x16\\x00\\x28\\x04\\x00\\x00\\x00\\x3f\\x18\\x04\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x15\\x04\\x15\\x08\\x15\\x0c\\x4c\\x15\\x02\\x15\\x04\\x12\\x00\\x00\\x04\\x0c\\x01\\x00\\x00\\x00\\x15\\x00\\x15\\x06\\x15\\x0a\\x2c\\x15\\x1e\\x15\\x04\\x15\\x06\\x15\\x06\\x1c\\x36\\x00\\x28\\x04\\x01\\x00\\x00\\x00\\x18\\x04\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x08\\x01\\x1e\\x00\\x26\\x8e\\x0a\\x1c\\x15\\x02\\x19\\x35\\x04\\x00\\x06\\x19\\x18\\x04\\x76\\x61\\x6c\\x33\\x15\\x02\\x16\\x1e\\x16\\x6c\\x16\\x74\\x26\\xc2\\x09\\x26\\x9a\\x09\\x1c\\x36\\x00\\x28\\x04\\x01\\x00\\x00\\x00\\x18\\x04\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x15\\x02\\x19\\x6c\\x35\\x00\\x18\\x06\\x73\\x63\\x68\\x65\\x6d\\x61\\x15\\x0a\\x00\\x15\\x04\\x25\\x00\\x18\\x02\\x69\\x64\\x00\\x15\\x02\\x25\\x00\\x18\\x07\\x62\\x6c\\x6f\\x63\\x6b\\x4e\\x6f\\x25\\x18\\x4c\\xac\\x13\\x10\\x12\\x00\\x00\\x00\\x15\\x0c\\x25\\x00\\x18\\x04\\x76\\x61\\x6c\\x31\\x25\\x00\\x4c\\x1c\\x00\\x00\\x00\\x15\\x08\\x25\\x00\\x18\\x04\\x76\\x61\\x6c\\x32\\x00\\x15\\x02\\x25\\x00\\x18\\x04\\x76\\x61\\x6c\\x33\\x25\\x16\\x4c\\xac\\x13\\x08\\x12\\x00\\x00\\x00\\x16\\x1e\\x19\\x1c\\x19\\x5c\\x26\\xca\\x02\\x1c\\x15\\x04\\x19\\x35\\x04\\x00\\x06\\x19\\x18\\x02\\x69\\x64\\x15\\x02\\x16\\x1e\\x16\\x9e\\x03\\x16\\xc2\\x02\\x26\\xb8\\x01\\x26\\x08\\x1c\\x18\\x08\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x18\\x08\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x16\\x00\\x28\\x08\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x18\\x08\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x26\\xd8\\x04\\x1c\\x15\\x02\\x19\\x35\\x04\\x00\\x06\\x19\\x18\\x07\\x62\\x6c\\x6f\\x63\\x6b\\x4e\\x6f\\x15\\x02\\x16\\x1e\\x16\\x6c\\x16\\x74\\x26\\x8c\\x04\\x26\\xe4\\x03\\x1c\\x36\\x00\\x28\\x04\\x00\\x00\\x00\\x00\\x18\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x26\\xb2\\x06\\x1c\\x15\\x0c\\x19\\x35\\x04\\x00\\x06\\x19\\x18\\x04\\x76\\x61\\x6c\\x31\\x15\\x02\\x16\\x1e\\x16\\x68\\x16\\x70\\x26\\xee\\x05\\x26\\xc2\\x05\\x1c\\x36\\x00\\x28\\x02\\x41\\x4d\\x18\\x02\\x41\\x4d\\x00\\x00\\x00\\x26\\x9a\\x08\\x1c\\x15\\x08\\x19\\x35\\x04\\x00\\x06\\x19\\x18\\x04\\x76\\x61\\x6c\\x32\\x15\\x02\\x16\\x1e\\x16\\x84\\x01\\x16\\x8c\\x01\\x26\\xb6\\x07\\x26\\x8e\\x07\\x1c\\x18\\x04\\x00\\x00\\x00\\x3f\\x18\\x04\\x00\\x00\\x00\\x3f\\x16\\x00\\x28\\x04\\x00\\x00\\x00\\x3f\\x18\\x04\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x26\\x8e\\x0a\\x1c\\x15\\x02\\x19\\x35\\x04\\x00\\x06\\x19\\x18\\x04\\x76\\x61\\x6c\\x33\\x15\\x02\\x16\\x1e\\x16\\x6c\\x16\\x74\\x26\\xc2\\x09\\x26\\x9a\\x09\\x1c\\x36\\x00\\x28\\x04\\x01\\x00\\x00\\x00\\x18\\x04\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x16\\xa6\\x06\\x16\\x1e\\x00\\x28\\x22\\x70\\x61\\x72\\x71\\x75\\x65\\x74\\x2d\\x63\\x70\\x70\\x20\\x76\\x65\\x72\\x73\\x69\\x6f\\x6e\\x20\\x31\\x2e\\x35\\x2e\\x31\\x2d\\x53\\x4e\\x41\\x50\\x53\\x48\\x4f\\x54\\x19\\x5c\\x1c\\x00\\x00\\x1c\\x00\\x00\\x1c\\x00\\x00\\x1c\\x00\\x00\\x1c\\x00\\x00\\x00\\xc5\\x01\\x00\\x00\\x50\\x41\\x52\\x31',\n+        #     #     '\\x50\\x41\\x52\\x31\\x15\\x04\\x15\\x10\\x15\\x14\\x4c\\x15\\x02\\x15\\x04\\x12\\x00\\x00\\x08\\x1c\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x15\\x00\\x15\\x06\\x15\\x0a\\x2c\\x15\\x02\\x15\\x04\\x15\\x06\\x15\\x06\\x1c\\x18\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x18\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x16\\x00\\x28\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x18\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x08\\x01\\x02\\x00\\x26\\xbc\\x01\\x1c\\x15\\x04\\x19\\x35\\x04\\x00\\x06\\x19\\x18\\x02\\x69\\x64\\x15\\x02\\x16\\x02\\x16\\xac\\x01\\x16\\xb4\\x01\\x26\\x38\\x26\\x08\\x1c\\x18\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x18\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x16\\x00\\x28\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x18\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x15\\x04\\x15\\x08\\x15\\x0c\\x4c\\x15\\x02\\x15\\x04\\x12\\x00\\x00\\x04\\x0c\\x00\\x00\\x00\\x00\\x15\\x00\\x15\\x06\\x15\\x0a\\x2c\\x15\\x02\\x15\\x04\\x15\\x06\\x15\\x06\\x1c\\x36\\x00\\x28\\x04\\x00\\x00\\x00\\x00\\x18\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x08\\x01\\x02\\x00\\x26\\xc8\\x03\\x1c\\x15\\x02\\x19\\x35\\x04\\x00\\x06\\x19\\x18\\x07\\x62\\x6c\\x6f\\x63\\x6b\\x4e\\x6f\\x15\\x02\\x16\\x02\\x16\\x6c\\x16\\x74\\x26\\xfc\\x02\\x26\\xd4\\x02\\x1c\\x36\\x00\\x28\\x04\\x00\\x00\\x00\\x00\\x18\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x15\\x04\\x15\\x0c\\x15\\x10\\x4c\\x15\\x02\\x15\\x04\\x12\\x00\\x00\\x06\\x14\\x02\\x00\\x00\\x00\\x41\\x4d\\x15\\x00\\x15\\x06\\x15\\x0a\\x2c\\x15\\x02\\x15\\x04\\x15\\x06\\x15\\x06\\x1c\\x36\\x00\\x28\\x02\\x41\\x4d\\x18\\x02\\x41\\x4d\\x00\\x00\\x00\\x03\\x08\\x01\\x02\\x00\\x26\\xa2\\x05\\x1c\\x15\\x0c\\x19\\x35\\x04\\x00\\x06\\x19\\x18\\x04\\x76\\x61\\x6c\\x31\\x15\\x02\\x16\\x02\\x16\\x68\\x16\\x70\\x26\\xde\\x04\\x26\\xb2\\x04\\x1c\\x36\\x00\\x28\\x02\\x41\\x4d\\x18\\x02\\x41\\x4d\\x00\\x00\\x00\\x15\\x04\\x15\\x08\\x15\\x0c\\x4c\\x15\\x02\\x15\\x04\\x12\\x00\\x00\\x04\\x0c\\x00\\x00\\x00\\x3f\\x15\\x00\\x15\\x06\\x15\\x0a\\x2c\\x15\\x02\\x15\\x04\\x15\\x06\\x15\\x06\\x1c\\x18\\x04\\x00\\x00\\x00\\x3f\\x18\\x04\\x00\\x00\\x00\\x3f\\x16\\x00\\x28\\x04\\x00\\x00\\x00\\x3f\\x18\\x04\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x03\\x08\\x01\\x02\\x00\\x26\\x8a\\x07\\x1c\\x15\\x08\\x19\\x35\\x04\\x00\\x06\\x19\\x18\\x04\\x76\\x61\\x6c\\x32\\x15\\x02\\x16\\x02\\x16\\x84\\x01\\x16\\x8c\\x01\\x26\\xa6\\x06\\x26\\xfe\\x05\\x1c\\x18\\x04\\x00\\x00\\x00\\x3f\\x18\\x04\\x00\\x00\\x00\\x3f\\x16\\x00\\x28\\x04\\x00\\x00\\x00\\x3f\\x18\\x04\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x15\\x04\\x15\\x08\\x15\\x0c\\x4c\\x15\\x02\\x15\\x04\\x12\\x00\\x00\\x04\\x0c\\x01\\x00\\x00\\x00\\x15\\x00\\x15\\x06\\x15\\x0a\\x2c\\x15\\x02\\x15\\x04\\x15\\x06\\x15\\x06\\x1c\\x36\\x00\\x28\\x04\\x01\\x00\\x00\\x00\\x18\\x04\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x08\\x01\\x02\\x00\\x26\\xfe\\x08\\x1c\\x15\\x02\\x19\\x35\\x04\\x00\\x06\\x19\\x18\\x04\\x76\\x61\\x6c\\x33\\x15\\x02\\x16\\x02\\x16\\x6c\\x16\\x74\\x26\\xb2\\x08\\x26\\x8a\\x08\\x1c\\x36\\x00\\x28\\x04\\x01\\x00\\x00\\x00\\x18\\x04\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x15\\x02\\x19\\x6c\\x35\\x00\\x18\\x06\\x73\\x63\\x68\\x65\\x6d\\x61\\x15\\x0a\\x00\\x15\\x04\\x25\\x00\\x18\\x02\\x69\\x64\\x00\\x15\\x02\\x25\\x00\\x18\\x07\\x62\\x6c\\x6f\\x63\\x6b\\x4e\\x6f\\x25\\x18\\x4c\\xac\\x13\\x10\\x12\\x00\\x00\\x00\\x15\\x0c\\x25\\x00\\x18\\x04\\x76\\x61\\x6c\\x31\\x25\\x00\\x4c\\x1c\\x00\\x00\\x00\\x15\\x08\\x25\\x00\\x18\\x04\\x76\\x61\\x6c\\x32\\x00\\x15\\x02\\x25\\x00\\x18\\x04\\x76\\x61\\x6c\\x33\\x25\\x16\\x4c\\xac\\x13\\x08\\x12\\x00\\x00\\x00\\x16\\x02\\x19\\x1c\\x19\\x5c\\x26\\xbc\\x01\\x1c\\x15\\x04\\x19\\x35\\x04\\x00\\x06\\x19\\x18\\x02\\x69\\x64\\x15\\x02\\x16\\x02\\x16\\xac\\x01\\x16\\xb4\\x01\\x26\\x38\\x26\\x08\\x1c\\x18\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x18\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x16\\x00\\x28\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x18\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x26\\xc8\\x03\\x1c\\x15\\x02\\x19\\x35\\x04\\x00\\x06\\x19\\x18\\x07\\x62\\x6c\\x6f\\x63\\x6b\\x4e\\x6f\\x15\\x02\\x16\\x02\\x16\\x6c\\x16\\x74\\x26\\xfc\\x02\\x26\\xd4\\x02\\x1c\\x36\\x00\\x28\\x04\\x00\\x00\\x00\\x00\\x18\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x26\\xa2\\x05\\x1c\\x15\\x0c\\x19\\x35\\x04\\x00\\x06\\x19\\x18\\x04\\x76\\x61\\x6c\\x31\\x15\\x02\\x16\\x02\\x16\\x68\\x16\\x70\\x26\\xde\\x04\\x26\\xb2\\x04\\x1c\\x36\\x00\\x28\\x02\\x41\\x4d\\x18\\x02\\x41\\x4d\\x00\\x00\\x00\\x26\\x8a\\x07\\x1c\\x15\\x08\\x19\\x35\\x04\\x00\\x06\\x19\\x18\\x04\\x76\\x61\\x6c\\x32\\x15\\x02\\x16\\x02\\x16\\x84\\x01\\x16\\x8c\\x01\\x26\\xa6\\x06\\x26\\xfe\\x05\\x1c\\x18\\x04\\x00\\x00\\x00\\x3f\\x18\\x04\\x00\\x00\\x00\\x3f\\x16\\x00\\x28\\x04\\x00\\x00\\x00\\x3f\\x18\\x04\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x26\\xfe\\x08\\x1c\\x15\\x02\\x19\\x35\\x04\\x00\\x06\\x19\\x18\\x04\\x76\\x61\\x6c\\x33\\x15\\x02\\x16\\x02\\x16\\x6c\\x16\\x74\\x26\\xb2\\x08\\x26\\x8a\\x08\\x1c\\x36\\x00\\x28\\x04\\x01\\x00\\x00\\x00\\x18\\x04\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x16\\x98\\x05\\x16\\x02\\x00\\x28\\x22\\x70\\x61\\x72\\x71\\x75\\x65\\x74\\x2d\\x63\\x70\\x70\\x20\\x76\\x65\\x72\\x73\\x69\\x6f\\x6e\\x20\\x31\\x2e\\x35\\x2e\\x31\\x2d\\x53\\x4e\\x41\\x50\\x53\\x48\\x4f\\x54\\x19\\x5c\\x1c\\x00\\x00\\x1c\\x00\\x00\\x1c\\x00\\x00\\x1c\\x00\\x00\\x1c\\x00\\x00\\x00\\xc4\\x01\\x00\\x00\\x50\\x41\\x52\\x31',\n+        #     #     ''\n+        #     # ],\n+        # },\n+        # 'Avro' : {\n+        #     # TODO: Not working at all: avro::Exception, e.what() = EOF reached\n+        #     #./contrib/libcxx/src/support/runtime/stdexcept_default.ipp:33: std::runtime_error::runtime_error(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) @ 0x22ce2080 in /usr/bin/clickhouse\n+        #     #./contrib/avro/lang/c++/api/Exception.hh:36: avro::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) @ 0x1de48a6e in /usr/bin/clickhouse\n+        #     #./contrib/avro/lang/c++/api/Stream.hh:336: avro::StreamReader::more() @ 0x22717f56 in /usr/bin/clickhouse\n+        #     #./contrib/avro/lang/c++/api/Stream.hh:0: avro::StreamReader::readBytes(unsigned char*, unsigned long) @ 0x22717d22 in /usr/bin/clickhouse\n+        #     #./contrib/avro/lang/c++/impl/BinaryDecoder.cc:170: avro::BinaryDecoder::decodeFixed(unsigned long, std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >&) @ 0x227177cb in /usr/bin/clickhouse\n+        #     #./contrib/avro/lang/c++/api/Specific.hh:216: avro::codec_traits<std::__1::array<unsigned char, 4ul> >::decode(avro::Decoder&, std::__1::array<unsigned char, 4ul>&) @ 0x22743624 in /usr/bin/clickhouse\n+        #     #./contrib/avro/lang/c++/api/Specific.hh:342: void avro::decode<std::__1::array<unsigned char, 4ul> >(avro::Decoder&, std::__1::array<unsigned char, 4ul>&) @ 0x2272970d in /usr/bin/clickhouse\n+        #     #./contrib/avro/lang/c++/impl/DataFile.cc:487: avro::DataFileReaderBase::readHeader() @ 0x2272608d in /usr/bin/clickhouse\n+        #     #./contrib/avro/lang/c++/impl/DataFile.cc:280: avro::DataFileReaderBase::DataFileReaderBase(std::__1::unique_ptr<avro::InputStream, std::__1::default_delete<avro::InputStream> >) @ 0x22726923 in /usr/bin/clickhouse\n+        #     #./src/Processors/Formats/Impl/AvroRowInputFormat.cpp:571: DB::AvroRowInputFormat::AvroRowInputFormat(DB::Block const&, DB::ReadBuffer&, DB::RowInputFormatParams) @ 0x1de19c9b in /usr/bin/clickhouse\n+        #     'data_sample' : [\n+        #         #'\\x4f\\x62\\x6a\\x01\\x04\\x14\\x61\\x76\\x72\\x6f\\x2e\\x63\\x6f\\x64\\x65\\x63\\x0c\\x73\\x6e\\x61\\x70\\x70\\x79\\x16\\x61\\x76\\x72\\x6f\\x2e\\x73\\x63\\x68\\x65\\x6d\\x61\\x80\\x03\\x7b\\x22\\x74\\x79\\x70\\x65\\x22\\x3a\\x22\\x72\\x65\\x63\\x6f\\x72\\x64\\x22\\x2c\\x22\\x6e\\x61\\x6d\\x65\\x22\\x3a\\x22\\x72\\x6f\\x77\\x22\\x2c\\x22\\x66\\x69\\x65\\x6c\\x64\\x73\\x22\\x3a\\x5b\\x7b\\x22\\x6e\\x61\\x6d\\x65\\x22\\x3a\\x22\\x69\\x64\\x22\\x2c\\x22\\x74\\x79\\x70\\x65\\x22\\x3a\\x22\\x6c\\x6f\\x6e\\x67\\x22\\x7d\\x2c\\x7b\\x22\\x6e\\x61\\x6d\\x65\\x22\\x3a\\x22\\x62\\x6c\\x6f\\x63\\x6b\\x4e\\x6f\\x22\\x2c\\x22\\x74\\x79\\x70\\x65\\x22\\x3a\\x22\\x69\\x6e\\x74\\x22\\x7d\\x2c\\x7b\\x22\\x6e\\x61\\x6d\\x65\\x22\\x3a\\x22\\x76\\x61\\x6c\\x31\\x22\\x2c\\x22\\x74\\x79\\x70\\x65\\x22\\x3a\\x22\\x62\\x79\\x74\\x65\\x73\\x22\\x7d\\x2c\\x7b\\x22\\x6e\\x61\\x6d\\x65\\x22\\x3a\\x22\\x76\\x61\\x6c\\x32\\x22\\x2c\\x22\\x74\\x79\\x70\\x65\\x22\\x3a\\x22\\x66\\x6c\\x6f\\x61\\x74\\x22\\x7d\\x2c\\x7b\\x22\\x6e\\x61\\x6d\\x65\\x22\\x3a\\x22\\x76\\x61\\x6c\\x33\\x22\\x2c\\x22\\x74\\x79\\x70\\x65\\x22\\x3a\\x22\\x69\\x6e\\x74\\x22\\x7d\\x5d\\x7d\\x00\\x73\\x6e\\x66\\xa3\\x62\\x9f\\x88\\xed\\x28\\x08\\x67\\xf0\\x75\\xaf\\x23\\x83\\x02\\x20\\x0a\\x24\\x00\\x00\\x04\\x41\\x4d\\x00\\x00\\x00\\x3f\\x02\\x80\\xaa\\x4a\\xe3\\x73\\x6e\\x66\\xa3\\x62\\x9f\\x88\\xed\\x28\\x08\\x67\\xf0\\x75\\xaf\\x23\\x83',\n+        #         #'\\x4f\\x62\\x6a\\x01\\x04\\x14\\x61\\x76\\x72\\x6f\\x2e\\x63\\x6f\\x64\\x65\\x63\\x0c\\x73\\x6e\\x61\\x70\\x70\\x79\\x16\\x61\\x76\\x72\\x6f\\x2e\\x73\\x63\\x68\\x65\\x6d\\x61\\x80\\x03\\x7b\\x22\\x74\\x79\\x70\\x65\\x22\\x3a\\x22\\x72\\x65\\x63\\x6f\\x72\\x64\\x22\\x2c\\x22\\x6e\\x61\\x6d\\x65\\x22\\x3a\\x22\\x72\\x6f\\x77\\x22\\x2c\\x22\\x66\\x69\\x65\\x6c\\x64\\x73\\x22\\x3a\\x5b\\x7b\\x22\\x6e\\x61\\x6d\\x65\\x22\\x3a\\x22\\x69\\x64\\x22\\x2c\\x22\\x74\\x79\\x70\\x65\\x22\\x3a\\x22\\x6c\\x6f\\x6e\\x67\\x22\\x7d\\x2c\\x7b\\x22\\x6e\\x61\\x6d\\x65\\x22\\x3a\\x22\\x62\\x6c\\x6f\\x63\\x6b\\x4e\\x6f\\x22\\x2c\\x22\\x74\\x79\\x70\\x65\\x22\\x3a\\x22\\x69\\x6e\\x74\\x22\\x7d\\x2c\\x7b\\x22\\x6e\\x61\\x6d\\x65\\x22\\x3a\\x22\\x76\\x61\\x6c\\x31\\x22\\x2c\\x22\\x74\\x79\\x70\\x65\\x22\\x3a\\x22\\x62\\x79\\x74\\x65\\x73\\x22\\x7d\\x2c\\x7b\\x22\\x6e\\x61\\x6d\\x65\\x22\\x3a\\x22\\x76\\x61\\x6c\\x32\\x22\\x2c\\x22\\x74\\x79\\x70\\x65\\x22\\x3a\\x22\\x66\\x6c\\x6f\\x61\\x74\\x22\\x7d\\x2c\\x7b\\x22\\x6e\\x61\\x6d\\x65\\x22\\x3a\\x22\\x76\\x61\\x6c\\x33\\x22\\x2c\\x22\\x74\\x79\\x70\\x65\\x22\\x3a\\x22\\x69\\x6e\\x74\\x22\\x7d\\x5d\\x7d\\x00\\x73\\x6e\\x66\\xa3\\x62\\x9f\\x88\\xed\\x28\\x08\\x67\\xf0\\x75\\xaf\\x23\\x83\\x1e\\x9e\\x01\\x96\\x01\\x28\\x02\\x00\\x04\\x41\\x4d\\x00\\x00\\x00\\x3f\\x02\\x04\\x15\\x0a\\x00\\x06\\x15\\x0a\\x00\\x08\\x15\\x0a\\x00\\x0a\\x15\\x0a\\x00\\x0c\\x15\\x0a\\x00\\x0e\\x15\\x0a\\x00\\x10\\x15\\x0a\\x00\\x12\\x15\\x0a\\x00\\x14\\x15\\x0a\\x00\\x16\\x15\\x0a\\x00\\x18\\x15\\x0a\\x00\\x1a\\x15\\x0a\\x00\\x1c\\x15\\x0a\\x24\\x1e\\x00\\x04\\x41\\x4d\\x00\\x00\\x00\\x3f\\x02\\x49\\x73\\x4d\\xca\\x73\\x6e\\x66\\xa3\\x62\\x9f\\x88\\xed\\x28\\x08\\x67\\xf0\\x75\\xaf\\x23\\x83',\n+        #         #'\\x4f\\x62\\x6a\\x01\\x04\\x14\\x61\\x76\\x72\\x6f\\x2e\\x63\\x6f\\x64\\x65\\x63\\x0c\\x73\\x6e\\x61\\x70\\x70\\x79\\x16\\x61\\x76\\x72\\x6f\\x2e\\x73\\x63\\x68\\x65\\x6d\\x61\\x80\\x03\\x7b\\x22\\x74\\x79\\x70\\x65\\x22\\x3a\\x22\\x72\\x65\\x63\\x6f\\x72\\x64\\x22\\x2c\\x22\\x6e\\x61\\x6d\\x65\\x22\\x3a\\x22\\x72\\x6f\\x77\\x22\\x2c\\x22\\x66\\x69\\x65\\x6c\\x64\\x73\\x22\\x3a\\x5b\\x7b\\x22\\x6e\\x61\\x6d\\x65\\x22\\x3a\\x22\\x69\\x64\\x22\\x2c\\x22\\x74\\x79\\x70\\x65\\x22\\x3a\\x22\\x6c\\x6f\\x6e\\x67\\x22\\x7d\\x2c\\x7b\\x22\\x6e\\x61\\x6d\\x65\\x22\\x3a\\x22\\x62\\x6c\\x6f\\x63\\x6b\\x4e\\x6f\\x22\\x2c\\x22\\x74\\x79\\x70\\x65\\x22\\x3a\\x22\\x69\\x6e\\x74\\x22\\x7d\\x2c\\x7b\\x22\\x6e\\x61\\x6d\\x65\\x22\\x3a\\x22\\x76\\x61\\x6c\\x31\\x22\\x2c\\x22\\x74\\x79\\x70\\x65\\x22\\x3a\\x22\\x62\\x79\\x74\\x65\\x73\\x22\\x7d\\x2c\\x7b\\x22\\x6e\\x61\\x6d\\x65\\x22\\x3a\\x22\\x76\\x61\\x6c\\x32\\x22\\x2c\\x22\\x74\\x79\\x70\\x65\\x22\\x3a\\x22\\x66\\x6c\\x6f\\x61\\x74\\x22\\x7d\\x2c\\x7b\\x22\\x6e\\x61\\x6d\\x65\\x22\\x3a\\x22\\x76\\x61\\x6c\\x33\\x22\\x2c\\x22\\x74\\x79\\x70\\x65\\x22\\x3a\\x22\\x69\\x6e\\x74\\x22\\x7d\\x5d\\x7d\\x00\\x73\\x6e\\x66\\xa3\\x62\\x9f\\x88\\xed\\x28\\x08\\x67\\xf0\\x75\\xaf\\x23\\x83\\x02\\x20\\x0a\\x24\\x00\\x00\\x04\\x41\\x4d\\x00\\x00\\x00\\x3f\\x02\\x80\\xaa\\x4a\\xe3\\x73\\x6e\\x66\\xa3\\x62\\x9f\\x88\\xed\\x28\\x08\\x67\\xf0\\x75\\xaf\\x23\\x83',\n+        #         # ''\n+        #     ],\n+        # },\n+        # TODO: test for AvroConfluence\n+        # 'Arrow' : {\n+        #     # Not working at all: DB::Exception: Error while opening a table: Invalid: File is too small: 0, Stack trace (when copying this message, always include the lines below):\n+        #     # /src/Common/Exception.cpp:37: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x15c2d2a3 in /usr/bin/clickhouse\n+        #     # /src/Processors/Formats/Impl/ArrowBlockInputFormat.cpp:88: DB::ArrowBlockInputFormat::prepareReader() @ 0x1ddff1c3 in /usr/bin/clickhouse\n+        #     # /src/Processors/Formats/Impl/ArrowBlockInputFormat.cpp:26: DB::ArrowBlockInputFormat::ArrowBlockInputFormat(DB::ReadBuffer&, DB::Block const&, bool) @ 0x1ddfef63 in /usr/bin/clickhouse\n+        #     # /contrib/libcxx/include/memory:2214: std::__1::__compressed_pair_elem<DB::ArrowBlockInputFormat, 1, false>::__compressed_pair_elem<DB::ReadBuffer&, DB::Block const&, bool&&, 0ul, 1ul, 2ul>(std::__1::piecewise_construct_t, std::__1::tuple<DB::ReadBuffer&, DB::Block const&, bool&&>, std::__1::__tuple_indices<0ul, 1ul, 2ul>) @ 0x1de0470f in /usr/bin/clickhouse\n+        #     # /contrib/libcxx/include/memory:2299: std::__1::__compressed_pair<std::__1::allocator<DB::ArrowBlockInputFormat>, DB::ArrowBlockInputFormat>::__compressed_pair<std::__1::allocator<DB::ArrowBlockInputFormat>&, DB::ReadBuffer&, DB::Block const&, bool&&>(std::__1::piecewise_construct_t, std::__1::tuple<std::__1::allocator<DB::ArrowBlockInputFormat>&>, std::__1::tuple<DB::ReadBuffer&, DB::Block const&, bool&&>) @ 0x1de04375 in /usr/bin/clickhouse\n+        #     # /contrib/libcxx/include/memory:3569: std::__1::__shared_ptr_emplace<DB::ArrowBlockInputFormat, std::__1::allocator<DB::ArrowBlockInputFormat> >::__shared_ptr_emplace<DB::ReadBuffer&, DB::Block const&, bool>(std::__1::allocator<DB::ArrowBlockInputFormat>, DB::ReadBuffer&, DB::Block const&, bool&&) @ 0x1de03f97 in /usr/bin/clickhouse\n+        #     # /contrib/libcxx/include/memory:4400: std::__1::enable_if<!(is_array<DB::ArrowBlockInputFormat>::value), std::__1::shared_ptr<DB::ArrowBlockInputFormat> >::type std::__1::make_shared<DB::ArrowBlockInputFormat, DB::ReadBuffer&, DB::Block const&, bool>(DB::ReadBuffer&, DB::Block const&, bool&&) @ 0x1de03d4c in /usr/bin/clickhouse\n+        #     # /src/Processors/Formats/Impl/ArrowBlockInputFormat.cpp:107: DB::registerInputFormatProcessorArrow(DB::FormatFactory&)::$_0::operator()(DB::ReadBuffer&, DB::Block const&, DB::RowInputFormatParams const&, DB::FormatSettings const&) const @ 0x1de010df in /usr/bin/clickhouse\n+        #     'data_sample' : [\n+        #         '\\x41\\x52\\x52\\x4f\\x57\\x31\\x00\\x00\\xff\\xff\\xff\\xff\\x48\\x01\\x00\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x0a\\x00\\x0c\\x00\\x06\\x00\\x05\\x00\\x08\\x00\\x0a\\x00\\x00\\x00\\x00\\x01\\x03\\x00\\x0c\\x00\\x00\\x00\\x08\\x00\\x08\\x00\\x00\\x00\\x04\\x00\\x08\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\xe4\\x00\\x00\\x00\\x9c\\x00\\x00\\x00\\x6c\\x00\\x00\\x00\\x34\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x40\\xff\\xff\\xff\\x00\\x00\\x00\\x02\\x18\\x00\\x00\\x00\\x0c\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x72\\xff\\xff\\xff\\x08\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x76\\x61\\x6c\\x33\\x00\\x00\\x00\\x00\\x6c\\xff\\xff\\xff\\x00\\x00\\x00\\x03\\x20\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x06\\x00\\x08\\x00\\x06\\x00\\x06\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x04\\x00\\x00\\x00\\x76\\x61\\x6c\\x32\\x00\\x00\\x00\\x00\\xa0\\xff\\xff\\xff\\x00\\x00\\x00\\x05\\x18\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x04\\x00\\x04\\x00\\x04\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x76\\x61\\x6c\\x31\\x00\\x00\\x00\\x00\\xcc\\xff\\xff\\xff\\x00\\x00\\x00\\x02\\x20\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x06\\x00\\x08\\x00\\x04\\x00\\x06\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x07\\x00\\x00\\x00\\x62\\x6c\\x6f\\x63\\x6b\\x4e\\x6f\\x00\\x10\\x00\\x14\\x00\\x08\\x00\\x00\\x00\\x07\\x00\\x0c\\x00\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x24\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x0c\\x00\\x08\\x00\\x07\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x40\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x69\\x64\\x00\\x00\\xff\\xff\\xff\\xff\\x58\\x01\\x00\\x00\\x14\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0c\\x00\\x16\\x00\\x06\\x00\\x05\\x00\\x08\\x00\\x0c\\x00\\x0c\\x00\\x00\\x00\\x00\\x03\\x03\\x00\\x18\\x00\\x00\\x00\\x30\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0a\\x00\\x18\\x00\\x0c\\x00\\x04\\x00\\x08\\x00\\x0a\\x00\\x00\\x00\\xcc\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0b\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x18\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x20\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x20\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x28\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x28\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x41\\x4d\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x0c\\x00\\x14\\x00\\x06\\x00\\x08\\x00\\x0c\\x00\\x10\\x00\\x0c\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x3c\\x00\\x00\\x00\\x28\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x58\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x60\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x30\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x08\\x00\\x00\\x00\\x04\\x00\\x08\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\xe4\\x00\\x00\\x00\\x9c\\x00\\x00\\x00\\x6c\\x00\\x00\\x00\\x34\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x40\\xff\\xff\\xff\\x00\\x00\\x00\\x02\\x18\\x00\\x00\\x00\\x0c\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x72\\xff\\xff\\xff\\x08\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x76\\x61\\x6c\\x33\\x00\\x00\\x00\\x00\\x6c\\xff\\xff\\xff\\x00\\x00\\x00\\x03\\x20\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x06\\x00\\x08\\x00\\x06\\x00\\x06\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x04\\x00\\x00\\x00\\x76\\x61\\x6c\\x32\\x00\\x00\\x00\\x00\\xa0\\xff\\xff\\xff\\x00\\x00\\x00\\x05\\x18\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x04\\x00\\x04\\x00\\x04\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x76\\x61\\x6c\\x31\\x00\\x00\\x00\\x00\\xcc\\xff\\xff\\xff\\x00\\x00\\x00\\x02\\x20\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x06\\x00\\x08\\x00\\x04\\x00\\x06\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x07\\x00\\x00\\x00\\x62\\x6c\\x6f\\x63\\x6b\\x4e\\x6f\\x00\\x10\\x00\\x14\\x00\\x08\\x00\\x00\\x00\\x07\\x00\\x0c\\x00\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x24\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x0c\\x00\\x08\\x00\\x07\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x40\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x69\\x64\\x00\\x00\\x78\\x01\\x00\\x00\\x41\\x52\\x52\\x4f\\x57\\x31',\n+        #         '\\x41\\x52\\x52\\x4f\\x57\\x31\\x00\\x00\\xff\\xff\\xff\\xff\\x48\\x01\\x00\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x0a\\x00\\x0c\\x00\\x06\\x00\\x05\\x00\\x08\\x00\\x0a\\x00\\x00\\x00\\x00\\x01\\x03\\x00\\x0c\\x00\\x00\\x00\\x08\\x00\\x08\\x00\\x00\\x00\\x04\\x00\\x08\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\xe4\\x00\\x00\\x00\\x9c\\x00\\x00\\x00\\x6c\\x00\\x00\\x00\\x34\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x40\\xff\\xff\\xff\\x00\\x00\\x00\\x02\\x18\\x00\\x00\\x00\\x0c\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x72\\xff\\xff\\xff\\x08\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x76\\x61\\x6c\\x33\\x00\\x00\\x00\\x00\\x6c\\xff\\xff\\xff\\x00\\x00\\x00\\x03\\x20\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x06\\x00\\x08\\x00\\x06\\x00\\x06\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x04\\x00\\x00\\x00\\x76\\x61\\x6c\\x32\\x00\\x00\\x00\\x00\\xa0\\xff\\xff\\xff\\x00\\x00\\x00\\x05\\x18\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x04\\x00\\x04\\x00\\x04\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x76\\x61\\x6c\\x31\\x00\\x00\\x00\\x00\\xcc\\xff\\xff\\xff\\x00\\x00\\x00\\x02\\x20\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x06\\x00\\x08\\x00\\x04\\x00\\x06\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x07\\x00\\x00\\x00\\x62\\x6c\\x6f\\x63\\x6b\\x4e\\x6f\\x00\\x10\\x00\\x14\\x00\\x08\\x00\\x00\\x00\\x07\\x00\\x0c\\x00\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x24\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x0c\\x00\\x08\\x00\\x07\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x40\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x69\\x64\\x00\\x00\\xff\\xff\\xff\\xff\\x58\\x01\\x00\\x00\\x14\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0c\\x00\\x16\\x00\\x06\\x00\\x05\\x00\\x08\\x00\\x0c\\x00\\x0c\\x00\\x00\\x00\\x00\\x03\\x03\\x00\\x18\\x00\\x00\\x00\\x48\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0a\\x00\\x18\\x00\\x0c\\x00\\x04\\x00\\x08\\x00\\x0a\\x00\\x00\\x00\\xcc\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0b\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x78\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x78\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x78\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x20\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x98\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x98\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x40\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xd8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x20\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xf8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xf8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x40\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x38\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x38\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x06\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x07\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x09\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0a\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0b\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0c\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0d\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0e\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x06\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x0a\\x00\\x00\\x00\\x0c\\x00\\x00\\x00\\x0e\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x12\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x16\\x00\\x00\\x00\\x18\\x00\\x00\\x00\\x1a\\x00\\x00\\x00\\x1c\\x00\\x00\\x00\\x1e\\x00\\x00\\x00\\x41\\x4d\\x41\\x4d\\x41\\x4d\\x41\\x4d\\x41\\x4d\\x41\\x4d\\x41\\x4d\\x41\\x4d\\x41\\x4d\\x41\\x4d\\x41\\x4d\\x41\\x4d\\x41\\x4d\\x41\\x4d\\x41\\x4d\\x00\\x00\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x00\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x0c\\x00\\x14\\x00\\x06\\x00\\x08\\x00\\x0c\\x00\\x10\\x00\\x0c\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x3c\\x00\\x00\\x00\\x28\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x58\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x60\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x48\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x08\\x00\\x00\\x00\\x04\\x00\\x08\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\xe4\\x00\\x00\\x00\\x9c\\x00\\x00\\x00\\x6c\\x00\\x00\\x00\\x34\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x40\\xff\\xff\\xff\\x00\\x00\\x00\\x02\\x18\\x00\\x00\\x00\\x0c\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x72\\xff\\xff\\xff\\x08\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x76\\x61\\x6c\\x33\\x00\\x00\\x00\\x00\\x6c\\xff\\xff\\xff\\x00\\x00\\x00\\x03\\x20\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x06\\x00\\x08\\x00\\x06\\x00\\x06\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x04\\x00\\x00\\x00\\x76\\x61\\x6c\\x32\\x00\\x00\\x00\\x00\\xa0\\xff\\xff\\xff\\x00\\x00\\x00\\x05\\x18\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x04\\x00\\x04\\x00\\x04\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x76\\x61\\x6c\\x31\\x00\\x00\\x00\\x00\\xcc\\xff\\xff\\xff\\x00\\x00\\x00\\x02\\x20\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x06\\x00\\x08\\x00\\x04\\x00\\x06\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x07\\x00\\x00\\x00\\x62\\x6c\\x6f\\x63\\x6b\\x4e\\x6f\\x00\\x10\\x00\\x14\\x00\\x08\\x00\\x00\\x00\\x07\\x00\\x0c\\x00\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x24\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x0c\\x00\\x08\\x00\\x07\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x40\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x69\\x64\\x00\\x00\\x78\\x01\\x00\\x00\\x41\\x52\\x52\\x4f\\x57\\x31',\n+        #         '\\x41\\x52\\x52\\x4f\\x57\\x31\\x00\\x00\\xff\\xff\\xff\\xff\\x48\\x01\\x00\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x0a\\x00\\x0c\\x00\\x06\\x00\\x05\\x00\\x08\\x00\\x0a\\x00\\x00\\x00\\x00\\x01\\x03\\x00\\x0c\\x00\\x00\\x00\\x08\\x00\\x08\\x00\\x00\\x00\\x04\\x00\\x08\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\xe4\\x00\\x00\\x00\\x9c\\x00\\x00\\x00\\x6c\\x00\\x00\\x00\\x34\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x40\\xff\\xff\\xff\\x00\\x00\\x00\\x02\\x18\\x00\\x00\\x00\\x0c\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x72\\xff\\xff\\xff\\x08\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x76\\x61\\x6c\\x33\\x00\\x00\\x00\\x00\\x6c\\xff\\xff\\xff\\x00\\x00\\x00\\x03\\x20\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x06\\x00\\x08\\x00\\x06\\x00\\x06\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x04\\x00\\x00\\x00\\x76\\x61\\x6c\\x32\\x00\\x00\\x00\\x00\\xa0\\xff\\xff\\xff\\x00\\x00\\x00\\x05\\x18\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x04\\x00\\x04\\x00\\x04\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x76\\x61\\x6c\\x31\\x00\\x00\\x00\\x00\\xcc\\xff\\xff\\xff\\x00\\x00\\x00\\x02\\x20\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x06\\x00\\x08\\x00\\x04\\x00\\x06\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x07\\x00\\x00\\x00\\x62\\x6c\\x6f\\x63\\x6b\\x4e\\x6f\\x00\\x10\\x00\\x14\\x00\\x08\\x00\\x00\\x00\\x07\\x00\\x0c\\x00\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x24\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x0c\\x00\\x08\\x00\\x07\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x40\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x69\\x64\\x00\\x00\\xff\\xff\\xff\\xff\\x58\\x01\\x00\\x00\\x14\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0c\\x00\\x16\\x00\\x06\\x00\\x05\\x00\\x08\\x00\\x0c\\x00\\x0c\\x00\\x00\\x00\\x00\\x03\\x03\\x00\\x18\\x00\\x00\\x00\\x30\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0a\\x00\\x18\\x00\\x0c\\x00\\x04\\x00\\x08\\x00\\x0a\\x00\\x00\\x00\\xcc\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0b\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x18\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x20\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x20\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x28\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x28\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x41\\x4d\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x0c\\x00\\x14\\x00\\x06\\x00\\x08\\x00\\x0c\\x00\\x10\\x00\\x0c\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x3c\\x00\\x00\\x00\\x28\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x58\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x60\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x30\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x08\\x00\\x00\\x00\\x04\\x00\\x08\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\xe4\\x00\\x00\\x00\\x9c\\x00\\x00\\x00\\x6c\\x00\\x00\\x00\\x34\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x40\\xff\\xff\\xff\\x00\\x00\\x00\\x02\\x18\\x00\\x00\\x00\\x0c\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x72\\xff\\xff\\xff\\x08\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x76\\x61\\x6c\\x33\\x00\\x00\\x00\\x00\\x6c\\xff\\xff\\xff\\x00\\x00\\x00\\x03\\x20\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x06\\x00\\x08\\x00\\x06\\x00\\x06\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x04\\x00\\x00\\x00\\x76\\x61\\x6c\\x32\\x00\\x00\\x00\\x00\\xa0\\xff\\xff\\xff\\x00\\x00\\x00\\x05\\x18\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x04\\x00\\x04\\x00\\x04\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x76\\x61\\x6c\\x31\\x00\\x00\\x00\\x00\\xcc\\xff\\xff\\xff\\x00\\x00\\x00\\x02\\x20\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x06\\x00\\x08\\x00\\x04\\x00\\x06\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x07\\x00\\x00\\x00\\x62\\x6c\\x6f\\x63\\x6b\\x4e\\x6f\\x00\\x10\\x00\\x14\\x00\\x08\\x00\\x00\\x00\\x07\\x00\\x0c\\x00\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x24\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x0c\\x00\\x08\\x00\\x07\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x40\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x69\\x64\\x00\\x00\\x78\\x01\\x00\\x00\\x41\\x52\\x52\\x4f\\x57\\x31',\n+        #     ],\n+        # },\n+        # 'ArrowStream' : {\n+        #     # Not working at all:\n+        #     # Error while opening a table: Invalid: Tried reading schema message, was null or length 0, Stack trace (when copying this message, always include the lines below):\n+        #     # /src/Processors/Formats/Impl/ArrowBlockInputFormat.cpp:88: DB::ArrowBlockInputFormat::prepareReader() @ 0x1ddff1c3 in /usr/bin/clickhouse\n+        #     # /src/Processors/Formats/Impl/ArrowBlockInputFormat.cpp:26: DB::ArrowBlockInputFormat::ArrowBlockInputFormat(DB::ReadBuffer&, DB::Block const&, bool) @ 0x1ddfef63 in /usr/bin/clickhouse\n+        #     # /contrib/libcxx/include/memory:2214: std::__1::__compressed_pair_elem<DB::ArrowBlockInputFormat, 1, false>::__compressed_pair_elem<DB::ReadBuffer&, DB::Block const&, bool&&, 0ul, 1ul, 2ul>(std::__1::piecewise_construct_t, std::__1::tuple<DB::ReadBuffer&, DB::Block const&, bool&&>, std::__1::__tuple_indices<0ul, 1ul, 2ul>) @ 0x1de0470f in /usr/bin/clickhouse\n+        #     # /contrib/libcxx/include/memory:2299: std::__1::__compressed_pair<std::__1::allocator<DB::ArrowBlockInputFormat>, DB::ArrowBlockInputFormat>::__compressed_pair<std::__1::allocator<DB::ArrowBlockInputFormat>&, DB::ReadBuffer&, DB::Block const&, bool&&>(std::__1::piecewise_construct_t, std::__1::tuple<std::__1::allocator<DB::ArrowBlockInputFormat>&>, std::__1::tuple<DB::ReadBuffer&, DB::Block const&, bool&&>) @ 0x1de04375 in /usr/bin/clickhouse\n+        #     # /contrib/libcxx/include/memory:3569: std::__1::__shared_ptr_emplace<DB::ArrowBlockInputFormat, std::__1::allocator<DB::ArrowBlockInputFormat> >::__shared_ptr_emplace<DB::ReadBuffer&, DB::Block const&, bool>(std::__1::allocator<DB::ArrowBlockInputFormat>, DB::ReadBuffer&, DB::Block const&, bool&&) @ 0x1de03f97 in /usr/bin/clickhouse\n+        #     # /contrib/libcxx/include/memory:4400: std::__1::enable_if<!(is_array<DB::ArrowBlockInputFormat>::value), std::__1::shared_ptr<DB::ArrowBlockInputFormat> >::type std::__1::make_shared<DB::ArrowBlockInputFormat, DB::ReadBuffer&, DB::Block const&, bool>(DB::ReadBuffer&, DB::Block const&, bool&&) @ 0x1de03d4c in /usr/bin/clickhouse\n+        #     # /src/Processors/Formats/Impl/ArrowBlockInputFormat.cpp:117: DB::registerInputFormatProcessorArrow(DB::FormatFactory&)::$_1::operator()(DB::ReadBuffer&, DB::Block const&, DB::RowInputFormatParams const&, DB::FormatSettings const&) const @ 0x1de0273f in /usr/bin/clickhouse\n+        #     # /contrib/libcxx/include/type_traits:3519: decltype(std::__1::forward<DB::registerInputFormatProcessorArrow(DB::FormatFactory&)::$_1&>(fp)(std::__1::forward<DB::ReadBuffer&>(fp0), std::__1::forward<DB::Block const&>(fp0), std::__1::forward<DB::RowInputFormatParams const&>(fp0), std::__1::forward<DB::FormatSettings const&>(fp0))) std::__1::__invoke<DB::registerInputFormatProcessorArrow(DB::FormatFactory&)::$_1&, DB::ReadBuffer&, DB::Block const&, DB::RowInputFormatParams const&, DB::FormatSettings const&>(DB::registerInputFormatProcessorArrow(DB::FormatFactory&)::$_1&, DB::ReadBuffer&, DB::Block const&, DB::RowInputFormatParams const&, DB::FormatSettings const&) @ 0x1de026da in /usr/bin/clickhouse\n+        #     # /contrib/libcxx/include/__functional_base:317: std::__1::shared_ptr<DB::IInputFormat> std::__1::__invoke_void_return_wrapper<std::__1::shared_ptr<DB::IInputFormat> >::__call<DB::registerInputFormatProcessorArrow(DB::FormatFactory&)::$_1&, DB::ReadBuffer&, DB::Block const&, DB::RowInputFormatParams const&, DB::FormatSettings const&>(DB::registerInputFormatProcessorArrow(DB::FormatFactory&)::$_1&, DB::ReadBuffer&, DB::Block const&, DB::RowInputFormatParams const&, DB::FormatSettings const&) @ 0x1de025ed in /usr/bin/clickhouse\n+        #     # /contrib/libcxx/include/functional:1540: std::__1::__function::__alloc_func<DB::registerInputFormatProcessorArrow(DB::FormatFactory&)::$_1, std::__1::allocator<DB::registerInputFormatProcessorArrow(DB::FormatFactory&)::$_1>, std::__1::shared_ptr<DB::IInputFormat> (DB::ReadBuffer&, DB::Block const&, DB::RowInputFormatParams const&, DB::FormatSettings const&)>::operator()(DB::ReadBuffer&, DB::Block const&, DB::RowInputFormatParams const&, DB::FormatSettings const&) @ 0x1de0254a in /usr/bin/clickhouse\n+        #     # /contrib/libcxx/include/functional:1714: std::__1::__function::__func<DB::registerInputFormatProcessorArrow(DB::FormatFactory&)::$_1, std::__1::allocator<DB::registerInputFormatProcessorArrow(DB::FormatFactory&)::$_1>, std::__1::shared_ptr<DB::IInputFormat> (DB::ReadBuffer&, DB::Block const&, DB::RowInputFormatParams const&, DB::FormatSettings const&)>::operator()(DB::ReadBuffer&, DB::Block const&, DB::RowInputFormatParams const&, DB::FormatSettings const&) @ 0x1de0165c in /usr/bin/clickhouse\n+        #     # /contrib/libcxx/include/functional:1867: std::__1::__function::__value_func<std::__1::shared_ptr<DB::IInputFormat> (DB::ReadBuffer&, DB::Block const&, DB::RowInputFormatParams const&, DB::FormatSettings const&)>::operator()(DB::ReadBuffer&, DB::Block const&, DB::RowInputFormatParams const&, DB::FormatSettings const&) const @ 0x1dd14dbd in /usr/bin/clickhouse\n+        #     # /contrib/libcxx/include/functional:2473: std::__1::function<std::__1::shared_ptr<DB::IInputFormat> (DB::ReadBuffer&, DB::Block const&, DB::RowInputFormatParams const&, DB::FormatSettings const&)>::operator()(DB::ReadBuffer&, DB::Block const&, DB::RowInputFormatParams const&, DB::FormatSettings const&) const @ 0x1dd07035 in /usr/bin/clickhouse\n+        #     # /src/Formats/FormatFactory.cpp:258: DB::FormatFactory::getInputFormat(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::ReadBuffer&, DB::Block const&, DB::Context const&, unsigned long, std::__1::function<void ()>) const @ 0x1dd04007 in /usr/bin/clickhouse\n+        #     # /src/Storages/Kafka/KafkaBlockInputStream.cpp:76: DB::KafkaBlockInputStream::readImpl() @ 0x1d8f6559 in /usr/bin/clickhouse\n+        #     # /src/DataStreams/IBlockInputStream.cpp:60: DB::IBlockInputStream::read() @ 0x1c9c92fd in /usr/bin/clickhouse\n+        #     # /src/DataStreams/copyData.cpp:26: void DB::copyDataImpl<DB::copyData(DB::IBlockInputStream&, DB::IBlockOutputStream&, std::__1::atomic<bool>*)::$_0&, void (&)(DB::Block const&)>(DB::IBlockInputStream&, DB::IBlockOutputStream&, DB::copyData(DB::IBlockInputStream&, DB::IBlockOutputStream&, std::__1::atomic<bool>*)::$_0&, void (&)(DB::Block const&)) @ 0x1c9ea01c in /usr/bin/clickhouse\n+        #     'data_sample' : [\n+        #         '\\xff\\xff\\xff\\xff\\x48\\x01\\x00\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x0a\\x00\\x0c\\x00\\x06\\x00\\x05\\x00\\x08\\x00\\x0a\\x00\\x00\\x00\\x00\\x01\\x03\\x00\\x0c\\x00\\x00\\x00\\x08\\x00\\x08\\x00\\x00\\x00\\x04\\x00\\x08\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\xe4\\x00\\x00\\x00\\x9c\\x00\\x00\\x00\\x6c\\x00\\x00\\x00\\x34\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x40\\xff\\xff\\xff\\x00\\x00\\x00\\x02\\x18\\x00\\x00\\x00\\x0c\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x72\\xff\\xff\\xff\\x08\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x76\\x61\\x6c\\x33\\x00\\x00\\x00\\x00\\x6c\\xff\\xff\\xff\\x00\\x00\\x00\\x03\\x20\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x06\\x00\\x08\\x00\\x06\\x00\\x06\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x04\\x00\\x00\\x00\\x76\\x61\\x6c\\x32\\x00\\x00\\x00\\x00\\xa0\\xff\\xff\\xff\\x00\\x00\\x00\\x05\\x18\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x04\\x00\\x04\\x00\\x04\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x76\\x61\\x6c\\x31\\x00\\x00\\x00\\x00\\xcc\\xff\\xff\\xff\\x00\\x00\\x00\\x02\\x20\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x06\\x00\\x08\\x00\\x04\\x00\\x06\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x07\\x00\\x00\\x00\\x62\\x6c\\x6f\\x63\\x6b\\x4e\\x6f\\x00\\x10\\x00\\x14\\x00\\x08\\x00\\x00\\x00\\x07\\x00\\x0c\\x00\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x24\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x0c\\x00\\x08\\x00\\x07\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x40\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x69\\x64\\x00\\x00\\xff\\xff\\xff\\xff\\x58\\x01\\x00\\x00\\x14\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0c\\x00\\x16\\x00\\x06\\x00\\x05\\x00\\x08\\x00\\x0c\\x00\\x0c\\x00\\x00\\x00\\x00\\x03\\x03\\x00\\x18\\x00\\x00\\x00\\x30\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0a\\x00\\x18\\x00\\x0c\\x00\\x04\\x00\\x08\\x00\\x0a\\x00\\x00\\x00\\xcc\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0b\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x18\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x20\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x20\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x28\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x28\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x41\\x4d\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00',\n+        #         '\\xff\\xff\\xff\\xff\\x48\\x01\\x00\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x0a\\x00\\x0c\\x00\\x06\\x00\\x05\\x00\\x08\\x00\\x0a\\x00\\x00\\x00\\x00\\x01\\x03\\x00\\x0c\\x00\\x00\\x00\\x08\\x00\\x08\\x00\\x00\\x00\\x04\\x00\\x08\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\xe4\\x00\\x00\\x00\\x9c\\x00\\x00\\x00\\x6c\\x00\\x00\\x00\\x34\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x40\\xff\\xff\\xff\\x00\\x00\\x00\\x02\\x18\\x00\\x00\\x00\\x0c\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x72\\xff\\xff\\xff\\x08\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x76\\x61\\x6c\\x33\\x00\\x00\\x00\\x00\\x6c\\xff\\xff\\xff\\x00\\x00\\x00\\x03\\x20\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x06\\x00\\x08\\x00\\x06\\x00\\x06\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x04\\x00\\x00\\x00\\x76\\x61\\x6c\\x32\\x00\\x00\\x00\\x00\\xa0\\xff\\xff\\xff\\x00\\x00\\x00\\x05\\x18\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x04\\x00\\x04\\x00\\x04\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x76\\x61\\x6c\\x31\\x00\\x00\\x00\\x00\\xcc\\xff\\xff\\xff\\x00\\x00\\x00\\x02\\x20\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x06\\x00\\x08\\x00\\x04\\x00\\x06\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x07\\x00\\x00\\x00\\x62\\x6c\\x6f\\x63\\x6b\\x4e\\x6f\\x00\\x10\\x00\\x14\\x00\\x08\\x00\\x00\\x00\\x07\\x00\\x0c\\x00\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x24\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x0c\\x00\\x08\\x00\\x07\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x40\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x69\\x64\\x00\\x00\\xff\\xff\\xff\\xff\\x58\\x01\\x00\\x00\\x14\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0c\\x00\\x16\\x00\\x06\\x00\\x05\\x00\\x08\\x00\\x0c\\x00\\x0c\\x00\\x00\\x00\\x00\\x03\\x03\\x00\\x18\\x00\\x00\\x00\\x48\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0a\\x00\\x18\\x00\\x0c\\x00\\x04\\x00\\x08\\x00\\x0a\\x00\\x00\\x00\\xcc\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0b\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x78\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x78\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x78\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x20\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x98\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x98\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x40\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xd8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x20\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xf8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xf8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x40\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x38\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x38\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x03\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x06\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x07\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x09\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0a\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0b\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0c\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0d\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0e\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0f\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x06\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x0a\\x00\\x00\\x00\\x0c\\x00\\x00\\x00\\x0e\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x12\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x16\\x00\\x00\\x00\\x18\\x00\\x00\\x00\\x1a\\x00\\x00\\x00\\x1c\\x00\\x00\\x00\\x1e\\x00\\x00\\x00\\x41\\x4d\\x41\\x4d\\x41\\x4d\\x41\\x4d\\x41\\x4d\\x41\\x4d\\x41\\x4d\\x41\\x4d\\x41\\x4d\\x41\\x4d\\x41\\x4d\\x41\\x4d\\x41\\x4d\\x41\\x4d\\x41\\x4d\\x00\\x00\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x00\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x01\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00',\n+        #         '\\xff\\xff\\xff\\xff\\x48\\x01\\x00\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x0a\\x00\\x0c\\x00\\x06\\x00\\x05\\x00\\x08\\x00\\x0a\\x00\\x00\\x00\\x00\\x01\\x03\\x00\\x0c\\x00\\x00\\x00\\x08\\x00\\x08\\x00\\x00\\x00\\x04\\x00\\x08\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\xe4\\x00\\x00\\x00\\x9c\\x00\\x00\\x00\\x6c\\x00\\x00\\x00\\x34\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x40\\xff\\xff\\xff\\x00\\x00\\x00\\x02\\x18\\x00\\x00\\x00\\x0c\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x72\\xff\\xff\\xff\\x08\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x76\\x61\\x6c\\x33\\x00\\x00\\x00\\x00\\x6c\\xff\\xff\\xff\\x00\\x00\\x00\\x03\\x20\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x06\\x00\\x08\\x00\\x06\\x00\\x06\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x04\\x00\\x00\\x00\\x76\\x61\\x6c\\x32\\x00\\x00\\x00\\x00\\xa0\\xff\\xff\\xff\\x00\\x00\\x00\\x05\\x18\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x04\\x00\\x04\\x00\\x04\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x76\\x61\\x6c\\x31\\x00\\x00\\x00\\x00\\xcc\\xff\\xff\\xff\\x00\\x00\\x00\\x02\\x20\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x06\\x00\\x08\\x00\\x04\\x00\\x06\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x07\\x00\\x00\\x00\\x62\\x6c\\x6f\\x63\\x6b\\x4e\\x6f\\x00\\x10\\x00\\x14\\x00\\x08\\x00\\x00\\x00\\x07\\x00\\x0c\\x00\\x00\\x00\\x10\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x24\\x00\\x00\\x00\\x14\\x00\\x00\\x00\\x04\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x0c\\x00\\x08\\x00\\x07\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x40\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x69\\x64\\x00\\x00\\xff\\xff\\xff\\xff\\x58\\x01\\x00\\x00\\x14\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0c\\x00\\x16\\x00\\x06\\x00\\x05\\x00\\x08\\x00\\x0c\\x00\\x0c\\x00\\x00\\x00\\x00\\x03\\x03\\x00\\x18\\x00\\x00\\x00\\x30\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0a\\x00\\x18\\x00\\x0c\\x00\\x04\\x00\\x08\\x00\\x0a\\x00\\x00\\x00\\xcc\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0b\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x10\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x18\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x20\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x20\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x28\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x28\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x08\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x05\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00\\x00\\x00\\x41\\x4d\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x3f\\x00\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\x00\\x00',\n+        #     ],\n+        # },\n+    }\n+\n+    for format_name in all_formats:\n+        print('Set up {}'.format(format_name))\n+        topic_name='format_tests_{}'.format(format_name)\n+        kafka_produce(topic_name, all_formats[format_name]['data_sample'])\n+        instance.query('''\n+            DROP TABLE IF EXISTS test.kafka_{format_name};\n+\n+            CREATE TABLE test.kafka_{format_name} (\n+                id Int64,\n+                blockNo UInt16,\n+                val1 String,\n+                val2 Float32,\n+                val3 UInt8\n+            ) ENGINE = Kafka()\n+                SETTINGS kafka_broker_list = 'kafka1:19092',\n+                        kafka_topic_list = '{topic_name}',\n+                        kafka_group_name = '{topic_name}_group',\n+                        kafka_format = '{format_name}',\n+                        kafka_flush_interval_ms = 1000 {extra_settings};\n+\n+            DROP TABLE IF EXISTS test.kafka_{format_name}_mv;\n+\n+            CREATE MATERIALIZED VIEW test.kafka_{format_name}_mv Engine=Log AS\n+                SELECT *, _topic, _partition, _offset FROM test.kafka_{format_name};\n+            '''.format(topic_name=topic_name, format_name=format_name, extra_settings=all_formats[format_name].get('extra_settings') or ''))\n+\n+    time.sleep(12)\n+\n+    for format_name in all_formats:\n+        print('Checking {}'.format(format_name))\n+        topic_name='format_tests_{}'.format(format_name)\n+\n+        result = instance.query('SELECT * FROM test.kafka_{format_name}_mv;'.format(format_name=format_name))\n+        expected = '''\\\n+0\t0\tAM\t0.5\t1\t{topic_name}\t0\t0\n+1\t0\tAM\t0.5\t1\t{topic_name}\t0\t1\n+2\t0\tAM\t0.5\t1\t{topic_name}\t0\t1\n+3\t0\tAM\t0.5\t1\t{topic_name}\t0\t1\n+4\t0\tAM\t0.5\t1\t{topic_name}\t0\t1\n+5\t0\tAM\t0.5\t1\t{topic_name}\t0\t1\n+6\t0\tAM\t0.5\t1\t{topic_name}\t0\t1\n+7\t0\tAM\t0.5\t1\t{topic_name}\t0\t1\n+8\t0\tAM\t0.5\t1\t{topic_name}\t0\t1\n+9\t0\tAM\t0.5\t1\t{topic_name}\t0\t1\n+10\t0\tAM\t0.5\t1\t{topic_name}\t0\t1\n+11\t0\tAM\t0.5\t1\t{topic_name}\t0\t1\n+12\t0\tAM\t0.5\t1\t{topic_name}\t0\t1\n+13\t0\tAM\t0.5\t1\t{topic_name}\t0\t1\n+14\t0\tAM\t0.5\t1\t{topic_name}\t0\t1\n+15\t0\tAM\t0.5\t1\t{topic_name}\t0\t1\n+0\t0\tAM\t0.5\t1\t{topic_name}\t0\t2\n+'''.format(topic_name=topic_name)\n+        assert TSV(result) == TSV(expected), 'Proper result for format: {}'.format(format_name)\n+\n+\n # Since everything is async and shaky when receiving messages from Kafka,\n # we may want to try and check results multiple times in a loop.\n def  kafka_check_result(result, check=False, ref_file='test_kafka_json.reference'):\n@@ -149,8 +553,6 @@ def kafka_cluster():\n         cluster.start()\n         kafka_id = instance.cluster.kafka_docker_id\n         print(\"kafka_id is {}\".format(kafka_id))\n-        instance.query('CREATE DATABASE test')\n-\n         yield cluster\n \n     finally:\n@@ -159,12 +561,10 @@ def kafka_cluster():\n \n @pytest.fixture(autouse=True)\n def kafka_setup_teardown():\n-    instance.query('DROP TABLE IF EXISTS test.kafka')\n+    instance.query('DROP DATABASE IF EXISTS test; CREATE DATABASE test;')\n     wait_kafka_is_available()\n-    print(\"kafka is available - running test\")\n+    # print(\"kafka is available - running test\")\n     yield  # run test\n-    instance.query('DROP TABLE IF EXISTS test.kafka')\n-\n \n # Tests\n \n@@ -1064,12 +1464,11 @@ def test_kafka_flush_by_time(kafka_cluster):\n                      kafka_max_block_size = 100,\n                      kafka_row_delimiter = '\\\\n';\n \n-        CREATE TABLE test.view (key UInt64, value UInt64)\n+        SELECT * FROM test.kafka;\n+\n+        CREATE TABLE test.view (key UInt64, value UInt64, ts DateTime64(3) MATERIALIZED now64(3))\n             ENGINE = MergeTree()\n             ORDER BY key;\n-\n-        CREATE MATERIALIZED VIEW test.consumer TO test.view AS\n-            SELECT * FROM test.kafka;\n     ''')\n \n     cancel = threading.Event()\n@@ -1079,16 +1478,20 @@ def produce():\n             messages = []\n             messages.append(json.dumps({'key': 0, 'value': 0}))\n             kafka_produce('flush_by_time', messages)\n-            time.sleep(1)\n+            time.sleep(0.8)\n \n     kafka_thread = threading.Thread(target=produce)\n     kafka_thread.start()\n \n+    instance.query('''\n+        CREATE MATERIALIZED VIEW test.consumer TO test.view AS\n+            SELECT * FROM test.kafka;\n+    ''')\n+\n     time.sleep(18)\n \n-    result = instance.query('SELECT count() FROM test.view')\n+    result = instance.query('SELECT uniqExact(ts) = 2, count() > 15 FROM test.view')\n \n-    print(result)\n     cancel.set()\n     kafka_thread.join()\n \n@@ -1099,8 +1502,7 @@ def produce():\n         DROP TABLE test.view;\n     ''')\n \n-    # 40 = 2 flushes (7.5 sec), 15 polls each, about 1 mgs per 1.5 sec\n-    assert int(result) > 12, 'Messages from kafka should be flushed at least every stream_flush_interval_ms!'\n+    assert TSV(result) == TSV('1\t1')\n \n \n @pytest.mark.timeout(600)\n@@ -1297,10 +1699,10 @@ def produce():\n \n     # Some queries to debug...\n     # SELECT * FROM test.destination where key in (SELECT key FROM test.destination group by key having count() <> 1)\n-    # select number + 1 as key from numbers(4141) left join test.destination using (key) where  test.destination.key = 0;\n+    # select number + 1 as key from numbers(4141) x left join test.destination using (key) where  test.destination.key = 0;\n     # SELECT * FROM test.destination WHERE key between 2360 and 2370 order by key;\n     # select _partition from test.destination group by _partition having count() <> max(_offset) + 1;\n-    # select toUInt64(0) as _partition, number + 1 as _offset from numbers(400) left join test.destination using (_partition,_offset) where test.destination.key = 0 order by _offset;\n+    # select toUInt64(0) as _partition, number + 1 as _offset from numbers(400) x left join test.destination using (_partition,_offset) where test.destination.key = 0 order by _offset;\n     # SELECT * FROM test.destination WHERE _partition = 0 and _offset between 220 and 240 order by _offset;\n \n     # CREATE TABLE test.reference (key UInt64, value UInt64) ENGINE = Kafka SETTINGS kafka_broker_list = 'kafka1:19092',\n@@ -1608,7 +2010,70 @@ def test_kafka_duplicates_when_commit_failed(kafka_cluster):\n     # impossible. So we have a duplicate in that scenario, but we report that situation properly.\n     assert TSV(result) == TSV('42\\t22\\t22')\n \n+# if we came to partition end we will repeat polling until reaching kafka_max_block_size or flush_interval\n+# that behavior is a bit quesionable - we can just take a bigger pauses between polls instead -\n+# to do more job in a single pass, and give more rest for a thread.\n+# But in cases of some peaky loads in kafka topic the current contract sounds more predictable and\n+# easier to understand, so let's keep it as is for now.\n+# also we can came to eof because we drained librdkafka internal queue too fast\n+@pytest.mark.timeout(120)\n+def test_premature_flush_on_eof(kafka_cluster):\n+    instance.query('''\n+        CREATE TABLE test.kafka (key UInt64, value UInt64)\n+            ENGINE = Kafka\n+            SETTINGS kafka_broker_list = 'kafka1:19092',\n+                    kafka_topic_list = 'premature_flush_on_eof',\n+                    kafka_group_name = 'premature_flush_on_eof',\n+                    kafka_format = 'JSONEachRow';\n+        SELECT * FROM test.kafka LIMIT 1;\n+        CREATE TABLE test.destination (\n+            key UInt64,\n+            value UInt64,\n+            _topic String,\n+            _key String,\n+            _offset UInt64,\n+            _partition UInt64,\n+            _timestamp Nullable(DateTime),\n+            _consumed_by LowCardinality(String)\n+        )\n+        ENGINE = MergeTree()\n+        ORDER BY key;\n+    ''')\n+\n+    messages = [json.dumps({'key': j+1, 'value': j+1}) for j in range(1)]\n+    kafka_produce('premature_flush_on_eof', messages)\n+\n+    instance.query('''\n+        CREATE MATERIALIZED VIEW test.kafka_consumer TO test.destination AS\n+        SELECT\n+            key,\n+            value,\n+            _topic,\n+            _key,\n+            _offset,\n+            _partition,\n+            _timestamp\n+        FROM test.kafka;\n+    ''')\n+\n+\n+    # all subscriptions/assignments done during select, so it start sending data to test.destination\n+    # immediately after creation of MV\n+    time.sleep(2)\n+    # produce more messages after delay\n+    kafka_produce('premature_flush_on_eof', messages)\n+    # data was not flushed yet (it will be flushed 7.5 sec after creating MV)\n+    assert int(instance.query(\"SELECT count() FROM test.destination\")) == 0\n+    time.sleep(6)\n+\n+    # it should be single part, i.e. single insert\n+    result = instance.query('SELECT _part, count() FROM test.destination group by _part')\n+    assert TSV(result) == TSV('all_1_1_0\\t2')\n \n+    instance.query('''\n+        DROP TABLE test.kafka_consumer;\n+        DROP TABLE test.destination;\n+    ''')\n \n if __name__ == '__main__':\n     cluster.start()\n",
  "problem_statement": "Kafka premature flush when reaching end of partition\nWhen a consumer gets to the end of topic flush happens w/o respect of `stream_flush_interval_ms` (that can lead to more frequent flushes of smaller blocks).\r\n\r\nDiscovered during testing of https://github.com/ClickHouse/ClickHouse/pull/11149\nKafka with num_consumers > available partitions in topic = performance degradation\nConsuming speed of topic with single partition:\r\nnum_consumers = 1: 262144 rows / sec. \r\nnum_consumers = 2: 43018 rows / sec.  (6 times slower!)\r\n\r\nIt's a misconfiguration actually, but it seems possible to avoid that.\r\n\r\n\n20.5 Kafka + JSONAsString = assert fail in PeekableReadBuffer::checkStateCorrect \n```\r\n2020.06.08 16:53:02.113533 [ 9 ] {} <Trace> BaseDaemon: Received signal 11\r\n2020.06.08 16:53:02.113791 [ 75 ] {} <Fatal> BaseDaemon: ########################################\r\n2020.06.08 16:53:02.113923 [ 75 ] {} <Fatal> BaseDaemon: (version 20.5.1.1) (from thread 73) (query_id: 11a4a97a-2c5a-4eb4-ad0b-4cbb362ae30e) Received signal Segmentation fault (11).\r\n2020.06.08 16:53:02.114044 [ 75 ] {} <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Unknown si_code.\r\n2020.06.08 16:53:02.114120 [ 75 ] {} <Fatal> BaseDaemon: Stack trace: 0x7f658efed8f0 0x7f658efdd39a 0x7f658efdd412 0x157a5608 0x1d0b8566 0x1d0b902c 0x157ac74b 0x157d0f7b 0x1d0b4921 0x1d045f6f 0x1cf4e657 0x1cace454 0x1cacd3fd 0x1bb8fcad 0x1d217e01 0x1cf4e657 0x1d217ab3 0x1cf9f54c 0x1cf9f4c0 0x1cf9f47d 0x1cf9f42d 0x1cf9f3fd 0x1cf9e55e 0x157c7455 0x157c6355 0x1cf9ccf5 0x1cf9d507 0x1cf9ba60\r\n2020.06.08 16:53:02.114388 [ 75 ] {} <Fatal> BaseDaemon: 4. /build/glibc-OTsEL5/glibc-2.27/stdlib/abort.c:107: __GI_abort @ 0x408f0 in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.27.so\r\n2020.06.08 16:53:02.114536 [ 75 ] {} <Fatal> BaseDaemon: 5. /build/glibc-OTsEL5/glibc-2.27/assert/assert.c:89: __assert_fail_base @ 0x3039a in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.27.so\r\n2020.06.08 16:53:02.114780 [ 75 ] {} <Fatal> BaseDaemon: 6. ? @ 0x30412 in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.27.so\r\n2020.06.08 16:53:02.115076 [ 75 ] {} <Fatal> BaseDaemon: 7. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../src/Common/Exception.cpp:47: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x157a5608 in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.148737 [ 75 ] {} <Fatal> BaseDaemon: 8. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../src/IO/PeekableReadBuffer.cpp:177: DB::PeekableReadBuffer::checkStateCorrect() const @ 0x1d0b8566 in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.171948 [ 74 ] {} <Fatal> BaseDaemon: 14. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../src/Processors/Formats/IRowInputFormat.cpp:64: DB::IRowInputFormat::generate() @ 0x1d045f6f in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.184119 [ 75 ] {} <Fatal> BaseDaemon: 9. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../src/IO/PeekableReadBuffer.cpp:111: DB::PeekableReadBuffer::nextImpl() @ 0x1d0b902c in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.184527 [ 75 ] {} <Fatal> BaseDaemon: 10. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../src/IO/ReadBuffer.h:53: DB::ReadBuffer::next() @ 0x157ac74b in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.184699 [ 75 ] {} <Fatal> BaseDaemon: 11. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../src/IO/ReadBuffer.h:81: DB::skipWhitespaceIfAny(DB::ReadBuffer&) @ 0x157d0f7b in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.221443 [ 75 ] {} <Fatal> BaseDaemon: 12. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../src/Processors/Formats/Impl/JSONAsStringRowInputFormat.cpp:103: DB::JSONAsStringRowInputFormat::readRow(std::__1::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&, DB::RowReadExtension&) @ 0x1d0b4921 in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.258763 [ 75 ] {} <Fatal> BaseDaemon: 13. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../src/Processors/Formats/IRowInputFormat.cpp:64: DB::IRowInputFormat::generate() @ 0x1d045f6f in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.274056 [ 74 ] {} <Fatal> BaseDaemon: 15. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../src/Processors/ISource.cpp:48: DB::ISource::work() @ 0x1cf4e657 in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.295283 [ 75 ] {} <Fatal> BaseDaemon: 14. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../src/Processors/ISource.cpp:48: DB::ISource::work() @ 0x1cf4e657 in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.331305 [ 75 ] {} <Fatal> BaseDaemon: 15. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../src/Storages/Kafka/KafkaBlockInputStream.cpp:88: DB::KafkaBlockInputStream::readImpl()::$_0::operator()() const @ 0x1cace454 in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.365384 [ 75 ] {} <Fatal> BaseDaemon: 16. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../src/Storages/Kafka/KafkaBlockInputStream.cpp:128: DB::KafkaBlockInputStream::readImpl() @ 0x1cacd3fd in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.370875 [ 74 ] {} <Fatal> BaseDaemon: 16. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../src/Storages/Kafka/KafkaBlockInputStream.cpp:88: DB::KafkaBlockInputStream::readImpl()::$_0::operator()() const @ 0x1cace454 in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.394171 [ 75 ] {} <Fatal> BaseDaemon: 17. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../src/DataStreams/IBlockInputStream.cpp:60: DB::IBlockInputStream::read() @ 0x1bb8fcad in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.434780 [ 75 ] {} <Fatal> BaseDaemon: 18. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../src/Processors/Sources/SourceFromInputStream.cpp:145: DB::SourceFromInputStream::generate() @ 0x1d217e01 in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.467556 [ 74 ] {} <Fatal> BaseDaemon: 17. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../src/Storages/Kafka/KafkaBlockInputStream.cpp:128: DB::KafkaBlockInputStream::readImpl() @ 0x1cacd3fd in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.471475 [ 75 ] {} <Fatal> BaseDaemon: 19. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../src/Processors/ISource.cpp:48: DB::ISource::work() @ 0x1cf4e657 in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.529883 [ 75 ] {} <Fatal> BaseDaemon: 20. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../src/Processors/Sources/SourceFromInputStream.cpp:97: DB::SourceFromInputStream::work() @ 0x1d217ab3 in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.553526 [ 74 ] {} <Fatal> BaseDaemon: 18. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../src/DataStreams/IBlockInputStream.cpp:60: DB::IBlockInputStream::read() @ 0x1bb8fcad in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.570632 [ 75 ] {} <Fatal> BaseDaemon: 21. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../src/Processors/Executors/PipelineExecutor.cpp:155: DB::executeJob(DB::IProcessor*) @ 0x1cf9f54c in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.594073 [ 74 ] {} <Fatal> BaseDaemon: 19. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../src/Processors/Sources/SourceFromInputStream.cpp:145: DB::SourceFromInputStream::generate() @ 0x1d217e01 in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.610344 [ 75 ] {} <Fatal> BaseDaemon: 22. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../src/Processors/Executors/PipelineExecutor.cpp:172: DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1::operator()() const @ 0x1cf9f4c0 in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.634033 [ 74 ] {} <Fatal> BaseDaemon: 20. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../src/Processors/ISource.cpp:48: DB::ISource::work() @ 0x1cf4e657 in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.650700 [ 75 ] {} <Fatal> BaseDaemon: 23. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../contrib/libcxx/include/type_traits:3519: decltype(std::__1::forward<DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1&>(fp)()) std::__1::__invoke<DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1&>(DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1&) @ 0x1cf9f47d in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.676312 [ 74 ] {} <Fatal> BaseDaemon: 21. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../src/Processors/Sources/SourceFromInputStream.cpp:97: DB::SourceFromInputStream::work() @ 0x1d217ab3 in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.691960 [ 75 ] {} <Fatal> BaseDaemon: 24. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../contrib/libcxx/include/__functional_base:349: void std::__1::__invoke_void_return_wrapper<void>::__call<DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1&>(DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1&) @ 0x1cf9f42d in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.717487 [ 74 ] {} <Fatal> BaseDaemon: 22. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../src/Processors/Executors/PipelineExecutor.cpp:155: DB::executeJob(DB::IProcessor*) @ 0x1cf9f54c in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.732639 [ 75 ] {} <Fatal> BaseDaemon: 25. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../contrib/libcxx/include/functional:1540: std::__1::__function::__alloc_func<DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1, std::__1::allocator<DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1>, void ()>::operator()() @ 0x1cf9f3fd in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.757431 [ 74 ] {} <Fatal> BaseDaemon: 23. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../src/Processors/Executors/PipelineExecutor.cpp:172: DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1::operator()() const @ 0x1cf9f4c0 in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.771716 [ 75 ] {} <Fatal> BaseDaemon: 26. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../contrib/libcxx/include/functional:1714: std::__1::__function::__func<DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1, std::__1::allocator<DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1>, void ()>::operator()() @ 0x1cf9e55e in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.773112 [ 75 ] {} <Fatal> BaseDaemon: 27. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../contrib/libcxx/include/functional:1867: std::__1::__function::__value_func<void ()>::operator()() const @ 0x157c7455 in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.773316 [ 75 ] {} <Fatal> BaseDaemon: 28. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../contrib/libcxx/include/functional:2473: std::__1::function<void ()>::operator()() const @ 0x157c6355 in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.796382 [ 74 ] {} <Fatal> BaseDaemon: 24. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../contrib/libcxx/include/type_traits:3519: decltype(std::__1::forward<DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1&>(fp)()) std::__1::__invoke<DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1&>(DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1&) @ 0x1cf9f47d in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.812032 [ 75 ] {} <Fatal> BaseDaemon: 29. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../src/Processors/Executors/PipelineExecutor.cpp:633: DB::PipelineExecutor::executeStepImpl(unsigned long, unsigned long, std::__1::atomic<bool>*) @ 0x1cf9ccf5 in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.835429 [ 74 ] {} <Fatal> BaseDaemon: 25. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../contrib/libcxx/include/__functional_base:349: void std::__1::__invoke_void_return_wrapper<void>::__call<DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1&>(DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1&) @ 0x1cf9f42d in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.850103 [ 75 ] {} <Fatal> BaseDaemon: 30. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../src/Processors/Executors/PipelineExecutor.cpp:546: DB::PipelineExecutor::executeSingleThread(unsigned long, unsigned long) @ 0x1cf9d507 in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.873647 [ 74 ] {} <Fatal> BaseDaemon: 26. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../contrib/libcxx/include/functional:1540: std::__1::__function::__alloc_func<DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1, std::__1::allocator<DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1>, void ()>::operator()() @ 0x1cf9f3fd in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.888132 [ 75 ] {} <Fatal> BaseDaemon: 31. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../src/Processors/Executors/PipelineExecutor.cpp:812: DB::PipelineExecutor::executeImpl(unsigned long) @ 0x1cf9ba60 in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.910534 [ 74 ] {} <Fatal> BaseDaemon: 27. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../contrib/libcxx/include/functional:1714: std::__1::__function::__func<DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1, std::__1::allocator<DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1>, void ()>::operator()() @ 0x1cf9e55e in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.910884 [ 74 ] {} <Fatal> BaseDaemon: 28. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../contrib/libcxx/include/functional:1867: std::__1::__function::__value_func<void ()>::operator()() const @ 0x157c7455 in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.911045 [ 74 ] {} <Fatal> BaseDaemon: 29. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../contrib/libcxx/include/functional:2473: std::__1::function<void ()>::operator()() const @ 0x157c6355 in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.947298 [ 74 ] {} <Fatal> BaseDaemon: 30. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../src/Processors/Executors/PipelineExecutor.cpp:633: DB::PipelineExecutor::executeStepImpl(unsigned long, unsigned long, std::__1::atomic<bool>*) @ 0x1cf9ccf5 in /usr/bin/clickhouse\r\n2020.06.08 16:53:02.983363 [ 74 ] {} <Fatal> BaseDaemon: 31. /home/mfilimonov/workspace/ClickHouse/build-vscode/clang_8_Debug/../../src/Processors/Executors/PipelineExecutor.cpp:546: DB::PipelineExecutor::executeSingleThread(unsigned long, unsigned long) @ 0x1cf9d507 in /usr/bin/clickhouse\r\n```\r\n\r\n```\r\n@pytest.mark.timeout(180)\r\ndef test_kafka_json_as_string(kafka_cluster):\r\n    kafka_produce('kafka_json_as_string', ['{\"t\": 123, \"e\": {\"x\": \"woof\"} }', '{\"t\": 123, \"e\": {\"x\": \"woof\"} }', '{\"t\": 124, \"e\": {\"x\": \"test\"} }'])\r\n\r\n    instance.query('''\r\n        CREATE TABLE test.kafka (field String)\r\n            ENGINE = Kafka\r\n            SETTINGS kafka_broker_list = 'kafka1:19092',\r\n                     kafka_topic_list = 'kafka_json_as_string',\r\n                     kafka_group_name = 'kafka_json_as_string',\r\n                     kafka_format = 'JSONAsString',\r\n                     kafka_flush_interval_ms=1000;\r\n        ''')\r\n\r\n    time.sleep(9)\r\n\r\n    result = instance.query('SELECT * FROM test.kafka;')\r\n    print(result)\r\n```\n",
  "hints_text": "It looks like the fix is going a bit too far.\r\n\r\nWill get to that later, some drafts are here: https://github.com/filimonov/ClickHouse/commit/81b78c262499bae67359fdcd822a860ec110fb2a\nThe same happens if we empty librdkafka internal queue by fast polls. We need to distinguish those 2 situations.\n\nHere, JSONAsString is applied to the full table. Is it possible to define a JSONEachRow format, yet define a field to be a JSON that should be parsed and set as a String (basically define field as JSONAsString where the JSON object will be serialized into a String). \n> Here, JSONAsString is applied to the full table. Is it possible to define a JSONEachRow format, yet define a field to be a JSON that should be parsed and set as a String (basically define field as JSONAsString where the JSON object will be serialized into a String).\r\n\r\nThat issue is about the bug. Your proposal is actually smth comletely different from the issue, and rather about implementing JSON as a special datatype. You can create separate FR for that with some samples / details. \r\n\r\nCheck also https://github.com/ClickHouse/ClickHouse/pull/7426 ",
  "created_at": "2020-06-11T11:13:21Z"
}