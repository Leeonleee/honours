{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 16397,
  "instance_id": "ClickHouse__ClickHouse-16397",
  "issue_numbers": [
    "16393"
  ],
  "base_commit": "5fbca7d62d31922666c1afc5b8a06266ca3423e6",
  "patch": "diff --git a/src/Interpreters/TreeOptimizer.cpp b/src/Interpreters/TreeOptimizer.cpp\nindex 9d52e30cea4d..61ca933dd535 100644\n--- a/src/Interpreters/TreeOptimizer.cpp\n+++ b/src/Interpreters/TreeOptimizer.cpp\n@@ -644,8 +644,13 @@ void TreeOptimizer::apply(ASTPtr & query, Aliases & aliases, const NameSet & sou\n         optimizeInjectiveFunctionsInsideUniq(query, context);\n \n     /// Eliminate min/max/any aggregators of functions of GROUP BY keys\n-    if (settings.optimize_aggregators_of_group_by_keys)\n+    if (settings.optimize_aggregators_of_group_by_keys\n+        && !select_query->group_by_with_totals\n+        && !select_query->group_by_with_rollup\n+        && !select_query->group_by_with_cube)\n+    {\n         optimizeAggregateFunctionsOfGroupByKeys(select_query, query);\n+    }\n \n     /// Remove duplicate items from ORDER BY.\n     optimizeDuplicatesInOrderBy(select_query);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01532_min_max_with_modifiers.reference b/tests/queries/0_stateless/01532_min_max_with_modifiers.reference\nnew file mode 100644\nindex 000000000000..9e1683ca6f9c\n--- /dev/null\n+++ b/tests/queries/0_stateless/01532_min_max_with_modifiers.reference\n@@ -0,0 +1,20 @@\n+totals\n+1\t1\t1\n+2\t2\t2\n+3\t3\t3\n+\n+0\t1\t3\n+rollup\n+1\t1\t1\n+2\t2\t2\n+3\t3\t3\n+0\t1\t3\n+cube\n+1\t1\t1\n+2\t2\t2\n+3\t3\t3\n+0\t1\t3\n+=======\n+1\t1\t2\t1\n+2\t2\t3\t1\n+0\t1\t3\t2\ndiff --git a/tests/queries/0_stateless/01532_min_max_with_modifiers.sql b/tests/queries/0_stateless/01532_min_max_with_modifiers.sql\nnew file mode 100644\nindex 000000000000..0c8651c0f010\n--- /dev/null\n+++ b/tests/queries/0_stateless/01532_min_max_with_modifiers.sql\n@@ -0,0 +1,18 @@\n+SELECT 'totals';\n+SELECT number % 3 + 1 AS n, min(n), max(n) FROM numbers(100) GROUP BY n WITH TOTALS;\n+SELECT 'rollup';\n+SELECT number % 3 + 1 AS n, min(n), max(n) FROM numbers(100) GROUP BY n WITH ROLLUP;\n+SELECT 'cube';\n+SELECT number % 3 + 1 AS n, min(n), max(n) FROM numbers(100) GROUP BY n WITH CUBE;\n+SELECT '=======';\n+\n+SELECT\n+    x,\n+    min(x) AS lower,\n+    max(x) + 1 AS upper,\n+    upper - lower AS range\n+FROM \n+(\n+    SELECT arrayJoin([1, 2]) AS x\n+) \n+GROUP BY x WITH ROLLUP;\n",
  "problem_statement": "Rollup shows wrong results for min()/max() in 20.9.3 and even worse in 20.10.2\n**How to reproduce**\r\n\r\nQuery:\r\n```sql\r\nselect\r\n\tx,\r\n\tmin(x) as lower,\r\n\tmax(x)+1 as upper,\r\n\tupper-lower as range\r\nfrom (select arrayJoin([1, 2]) as x)\r\ngroup by x\r\nwith rollup;\r\n```\r\n\r\n## 20.4.6\r\n```\r\n\u250c\u2500x\u2500\u252c\u2500lower\u2500\u252c\u2500upper\u2500\u252c\u2500range\u2500\u2510\r\n\u2502 1 \u2502     1 \u2502     2 \u2502     1 \u2502\r\n\u2502 2 \u2502     2 \u2502     3 \u2502     1 \u2502\r\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\u250c\u2500x\u2500\u252c\u2500lower\u2500\u252c\u2500upper\u2500\u252c\u2500range\u2500\u2510\r\n\u2502 0 \u2502     1 \u2502     3 \u2502     2 \u2502\r\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\nSummary looks correct.\r\n\r\n## 20.9.3\r\n```\r\n\u250c\u2500x\u2500\u252c\u2500lower\u2500\u252c\u2500upper\u2500\u252c\u2500range\u2500\u2510\r\n\u2502 1 \u2502     1 \u2502     2 \u2502     1 \u2502\r\n\u2502 2 \u2502     2 \u2502     3 \u2502     1 \u2502\r\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\u250c\u2500x\u2500\u252c\u2500lower\u2500\u252c\u2500upper\u2500\u252c\u2500range\u2500\u2510\r\n\u2502 0 \u2502     0 \u2502     3 \u2502     2 \u2502\r\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n`lower` is wrong - the minimum should be 1. However, all other \"derived\" values are correct. For example `range` correctly shows up as 2, even though table would wrongly imply that `upper-lower==3-0==3`.\r\nNote that I only tested 20.4.6 and 20.9.3, so the regression might have been anywhere in between.\r\n\r\n## 20.10.2\r\n```\r\n\u250c\u2500x\u2500\u252c\u2500lower\u2500\u252c\u2500upper\u2500\u252c\u2500range\u2500\u2510\r\n\u2502 1 \u2502     1 \u2502     2 \u2502     1 \u2502\r\n\u2502 2 \u2502     2 \u2502     3 \u2502     1 \u2502\r\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\u250c\u2500x\u2500\u252c\u2500lower\u2500\u252c\u2500upper\u2500\u252c\u2500range\u2500\u2510\r\n\u2502 0 \u2502     0 \u2502     1 \u2502     1 \u2502\r\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\nAll values are wrong.\n",
  "hints_text": "It's because of optimization, that eliminates some aggregate functions for keys of `GROUP BY` (settings `optimize_aggregators_of_group_by_keys`).\r\n\r\n```sql\r\nSELECT\r\n    x,\r\n    min(x) AS lower,\r\n    max(x) + 1 AS upper,\r\n    upper - lower AS range\r\nFROM \r\n(\r\n    SELECT arrayJoin([1, 2]) AS x\r\n)\r\nGROUP BY x\r\n    WITH ROLLUP\r\nSETTINGS optimize_aggregators_of_group_by_keys = 0\r\n\r\n\u250c\u2500x\u2500\u252c\u2500lower\u2500\u252c\u2500upper\u2500\u252c\u2500range\u2500\u2510\r\n\u2502 1 \u2502     1 \u2502     2 \u2502     1 \u2502\r\n\u2502 2 \u2502     2 \u2502     3 \u2502     1 \u2502\r\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\u250c\u2500x\u2500\u252c\u2500lower\u2500\u252c\u2500upper\u2500\u252c\u2500range\u2500\u2510\r\n\u2502 0 \u2502     1 \u2502     3 \u2502     2 \u2502\r\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```",
  "created_at": "2020-10-26T13:49:10Z"
}