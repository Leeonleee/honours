diff --git a/src/Core/Settings.h b/src/Core/Settings.h
index bba258f1d60c..a4269b929079 100644
--- a/src/Core/Settings.h
+++ b/src/Core/Settings.h
@@ -379,6 +379,7 @@ struct Settings : public SettingsCollection<Settings>
     \
     M(SettingBool, allow_experimental_geo_types, false, "Allow geo data types such as Point, Ring, Polygon, MultiPolygon", 0) \
     M(SettingBool, data_type_default_nullable, false, "Data types without NULL or NOT NULL will make Nullable", 0) \
+    M(SettingBool, cast_keep_nullable, false, "CAST operator keep Nullable for result data type", 0) \
     \
     /** Obsolete settings that do nothing but left for compatibility reasons. Remove each one after half a year of obsolescence. */ \
     \
diff --git a/src/Functions/FunctionsConversion.cpp b/src/Functions/FunctionsConversion.cpp
index 0bd7d1a27e83..bbde6e040698 100644
--- a/src/Functions/FunctionsConversion.cpp
+++ b/src/Functions/FunctionsConversion.cpp
@@ -1,10 +1,16 @@
 #include <Functions/FunctionFactory.h>
 #include <Functions/FunctionsConversion.h>
+#include <Interpreters/Context.h>
 
 
 namespace DB
 {
 
+FunctionOverloadResolverImplPtr CastOverloadResolver::create(const Context & context)
+{
+    return createImpl(context.getSettingsRef().cast_keep_nullable);
+}
+
 void registerFunctionsConversion(FunctionFactory & factory)
 {
     factory.registerFunction<FunctionToUInt8>();
diff --git a/src/Functions/FunctionsConversion.h b/src/Functions/FunctionsConversion.h
index 83417a3229b1..b23cac8c456c 100644
--- a/src/Functions/FunctionsConversion.h
+++ b/src/Functions/FunctionsConversion.h
@@ -2377,10 +2377,13 @@ class CastOverloadResolver : public IFunctionOverloadResolverImpl
     using MonotonicityForRange = FunctionCast::MonotonicityForRange;
 
     static constexpr auto name = "CAST";
-    static FunctionOverloadResolverImplPtr create(const Context &) { return createImpl(); }
-    static FunctionOverloadResolverImplPtr createImpl() { return std::make_unique<CastOverloadResolver>(); }
 
-    CastOverloadResolver() {}
+    static FunctionOverloadResolverImplPtr create(const Context & context);
+    static FunctionOverloadResolverImplPtr createImpl(bool keep_nullable) { return std::make_unique<CastOverloadResolver>(keep_nullable); }
+
+    CastOverloadResolver(bool keep_nullable_)
+        : keep_nullable(keep_nullable_)
+    {}
 
     String getName() const override { return name; }
 
@@ -2415,13 +2418,18 @@ class CastOverloadResolver : public IFunctionOverloadResolverImpl
                 " Instead there is a column with the following structure: " + column->dumpStructure(),
                 ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);
 
-        return DataTypeFactory::instance().get(type_col->getValue<String>());
+        DataTypePtr type = DataTypeFactory::instance().get(type_col->getValue<String>());
+        if (keep_nullable && arguments.front().type->isNullable())
+            return makeNullable(type);
+        return type;
     }
 
     bool useDefaultImplementationForNulls() const override { return false; }
     bool useDefaultImplementationForLowCardinalityColumns() const override { return false; }
 
 private:
+    bool keep_nullable;
+
     template <typename DataType>
     static auto monotonicityForType(const DataType * const)
     {
diff --git a/src/Functions/if.cpp b/src/Functions/if.cpp
index 02c3d938d2b7..c272dc98505c 100644
--- a/src/Functions/if.cpp
+++ b/src/Functions/if.cpp
@@ -693,11 +693,12 @@ class FunctionIf : public FunctionIfBase</*null_is_false=*/false>
 
     static ColumnPtr makeNullableColumnIfNot(const ColumnPtr & column)
     {
-        if (isColumnNullable(*column))
-            return column;
+        auto materialized = materializeColumnIfConst(column);
 
-        return ColumnNullable::create(
-            materializeColumnIfConst(column), ColumnUInt8::create(column->size(), 0));
+        if (isColumnNullable(*materialized))
+            return materialized;
+
+        return ColumnNullable::create(materialized, ColumnUInt8::create(column->size(), 0));
     }
 
     static ColumnPtr getNestedColumn(const ColumnPtr & column)
diff --git a/src/Interpreters/castColumn.cpp b/src/Interpreters/castColumn.cpp
index 2e6604f7df5e..756ccbc6d7ec 100644
--- a/src/Interpreters/castColumn.cpp
+++ b/src/Interpreters/castColumn.cpp
@@ -29,7 +29,8 @@ ColumnPtr castColumn(const ColumnWithTypeAndName & arg, const DataTypePtr & type
         }
     };
 
-    FunctionOverloadResolverPtr func_builder_cast = std::make_shared<FunctionOverloadResolverAdaptor>(CastOverloadResolver::createImpl());
+    FunctionOverloadResolverPtr func_builder_cast =
+        std::make_shared<FunctionOverloadResolverAdaptor>(CastOverloadResolver::createImpl(false));
 
     ColumnsWithTypeAndName arguments{ temporary_block.getByPosition(0), temporary_block.getByPosition(1) };
     auto func_cast = func_builder_cast->build(arguments);
