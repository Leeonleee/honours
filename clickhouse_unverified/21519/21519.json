{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 21519,
  "instance_id": "ClickHouse__ClickHouse-21519",
  "issue_numbers": [
    "21383"
  ],
  "base_commit": "5ae494521df6bdcad9fc7ba75f0eeda259a045a9",
  "patch": "diff --git a/src/Functions/visitParamExtractBool.cpp b/src/Functions/visitParamExtractBool.cpp\nindex 7f989ccbb9ea..059115b5b13e 100644\n--- a/src/Functions/visitParamExtractBool.cpp\n+++ b/src/Functions/visitParamExtractBool.cpp\n@@ -19,10 +19,13 @@ struct ExtractBool\n struct NameVisitParamExtractBool   { static constexpr auto name = \"visitParamExtractBool\"; };\n using FunctionVisitParamExtractBool = FunctionsStringSearch<ExtractParamImpl<ExtractBool>, NameVisitParamExtractBool>;\n \n+struct NameSimpleJSONExtractBool   { static constexpr auto name = \"simpleJSONExtractBool\"; };\n+using FunctionSimpleJSONExtractBool = FunctionsStringSearch<ExtractParamImpl<ExtractBool>, NameSimpleJSONExtractBool>;\n \n void registerFunctionVisitParamExtractBool(FunctionFactory & factory)\n {\n     factory.registerFunction<FunctionVisitParamExtractBool>();\n+    factory.registerFunction<FunctionSimpleJSONExtractBool>();\n }\n \n }\ndiff --git a/src/Functions/visitParamExtractFloat.cpp b/src/Functions/visitParamExtractFloat.cpp\nindex b02b0209daf9..7a55cff365ca 100644\n--- a/src/Functions/visitParamExtractFloat.cpp\n+++ b/src/Functions/visitParamExtractFloat.cpp\n@@ -9,10 +9,13 @@ namespace DB\n struct NameVisitParamExtractFloat  { static constexpr auto name = \"visitParamExtractFloat\"; };\n using FunctionVisitParamExtractFloat = FunctionsStringSearch<ExtractParamImpl<ExtractNumericType<Float64>>, NameVisitParamExtractFloat>;\n \n+struct NameSimpleJSONExtractFloat  { static constexpr auto name = \"simpleJSONExtractFloat\"; };\n+using FunctionSimpleJSONExtractFloat = FunctionsStringSearch<ExtractParamImpl<ExtractNumericType<Float64>>, NameSimpleJSONExtractFloat>;\n \n void registerFunctionVisitParamExtractFloat(FunctionFactory & factory)\n {\n     factory.registerFunction<FunctionVisitParamExtractFloat>();\n+    factory.registerFunction<FunctionSimpleJSONExtractFloat>();\n }\n \n }\ndiff --git a/src/Functions/visitParamExtractInt.cpp b/src/Functions/visitParamExtractInt.cpp\nindex f3f30f566e6f..7c2188c10fcf 100644\n--- a/src/Functions/visitParamExtractInt.cpp\n+++ b/src/Functions/visitParamExtractInt.cpp\n@@ -9,10 +9,13 @@ namespace DB\n struct NameVisitParamExtractInt    { static constexpr auto name = \"visitParamExtractInt\"; };\n using FunctionVisitParamExtractInt = FunctionsStringSearch<ExtractParamImpl<ExtractNumericType<Int64>>, NameVisitParamExtractInt>;\n \n+struct NameSimpleJSONExtractInt    { static constexpr auto name = \"simpleJSONExtractInt\"; };\n+using FunctionSimpleJSONExtractInt = FunctionsStringSearch<ExtractParamImpl<ExtractNumericType<Int64>>, NameSimpleJSONExtractInt>;\n \n void registerFunctionVisitParamExtractInt(FunctionFactory & factory)\n {\n     factory.registerFunction<FunctionVisitParamExtractInt>();\n+    factory.registerFunction<FunctionSimpleJSONExtractInt>();\n }\n \n }\ndiff --git a/src/Functions/visitParamExtractRaw.cpp b/src/Functions/visitParamExtractRaw.cpp\nindex add882f003f5..734fe1075578 100644\n--- a/src/Functions/visitParamExtractRaw.cpp\n+++ b/src/Functions/visitParamExtractRaw.cpp\n@@ -59,10 +59,13 @@ struct ExtractRaw\n struct NameVisitParamExtractRaw    { static constexpr auto name = \"visitParamExtractRaw\"; };\n using FunctionVisitParamExtractRaw = FunctionsStringSearchToString<ExtractParamToStringImpl<ExtractRaw>, NameVisitParamExtractRaw>;\n \n+struct NameSimpleJSONExtractRaw    { static constexpr auto name = \"simpleJSONExtractRaw\"; };\n+using FunctionSimpleJSONExtractRaw = FunctionsStringSearchToString<ExtractParamToStringImpl<ExtractRaw>, NameSimpleJSONExtractRaw>;\n \n void registerFunctionVisitParamExtractRaw(FunctionFactory & factory)\n {\n     factory.registerFunction<FunctionVisitParamExtractRaw>();\n+    factory.registerFunction<FunctionSimpleJSONExtractRaw>();\n }\n \n }\ndiff --git a/src/Functions/visitParamExtractString.cpp b/src/Functions/visitParamExtractString.cpp\nindex b633a59807ef..23f24b9e3b8b 100644\n--- a/src/Functions/visitParamExtractString.cpp\n+++ b/src/Functions/visitParamExtractString.cpp\n@@ -20,10 +20,13 @@ struct ExtractString\n struct NameVisitParamExtractString { static constexpr auto name = \"visitParamExtractString\"; };\n using FunctionVisitParamExtractString = FunctionsStringSearchToString<ExtractParamToStringImpl<ExtractString>, NameVisitParamExtractString>;\n \n+struct NameSimpleJSONExtractString { static constexpr auto name = \"simpleJSONExtractString\"; };\n+using FunctionSimpleJSONExtractString = FunctionsStringSearchToString<ExtractParamToStringImpl<ExtractString>, NameSimpleJSONExtractString>;\n \n void registerFunctionVisitParamExtractString(FunctionFactory & factory)\n {\n     factory.registerFunction<FunctionVisitParamExtractString>();\n+    factory.registerFunction<FunctionSimpleJSONExtractString>();\n }\n \n }\ndiff --git a/src/Functions/visitParamExtractUInt.cpp b/src/Functions/visitParamExtractUInt.cpp\nindex 5e70eed82531..f5466a63b0d5 100644\n--- a/src/Functions/visitParamExtractUInt.cpp\n+++ b/src/Functions/visitParamExtractUInt.cpp\n@@ -9,10 +9,14 @@ namespace DB\n struct NameVisitParamExtractUInt   { static constexpr auto name = \"visitParamExtractUInt\"; };\n using FunctionVisitParamExtractUInt = FunctionsStringSearch<ExtractParamImpl<ExtractNumericType<UInt64>>, NameVisitParamExtractUInt>;\n \n+struct NameSimpleJSONExtractUInt   { static constexpr auto name = \"simpleJSONExtractUInt\"; };\n+using FunctionSimpleJSONExtractUInt = FunctionsStringSearch<ExtractParamImpl<ExtractNumericType<UInt64>>, NameSimpleJSONExtractUInt>;\n+\n \n void registerFunctionVisitParamExtractUInt(FunctionFactory & factory)\n {\n     factory.registerFunction<FunctionVisitParamExtractUInt>();\n+    factory.registerFunction<FunctionSimpleJSONExtractUInt>();\n }\n \n }\ndiff --git a/src/Functions/visitParamHas.cpp b/src/Functions/visitParamHas.cpp\nindex 5fbedfb4995b..f4f377f9e8f5 100644\n--- a/src/Functions/visitParamHas.cpp\n+++ b/src/Functions/visitParamHas.cpp\n@@ -19,10 +19,13 @@ struct HasParam\n struct NameVisitParamHas           { static constexpr auto name = \"visitParamHas\"; };\n using FunctionVisitParamHas = FunctionsStringSearch<ExtractParamImpl<HasParam>, NameVisitParamHas>;\n \n+struct NameSimpleJSONHas           { static constexpr auto name = \"simpleJSONHas\"; };\n+using FunctionSimpleJSONHas = FunctionsStringSearch<ExtractParamImpl<HasParam>, NameSimpleJSONHas>;\n \n void registerFunctionVisitParamHas(FunctionFactory & factory)\n {\n     factory.registerFunction<FunctionVisitParamHas>();\n+    factory.registerFunction<FunctionSimpleJSONHas>();\n }\n \n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00539_functions_for_working_with_json.reference b/tests/queries/0_stateless/00539_functions_for_working_with_json.reference\nindex c0399f8ab2e0..4d3527722a1e 100644\n--- a/tests/queries/0_stateless/00539_functions_for_working_with_json.reference\n+++ b/tests/queries/0_stateless/00539_functions_for_working_with_json.reference\n@@ -13,3 +13,10 @@ test\"string\n  \"[\"\n  [\"]\", \"2\", \"3\"]\n  {\"nested\" : [1,2,3]}\n+-1\n+0\n+0\n+-1\n+1\n+test_string\n+test\"string\ndiff --git a/tests/queries/0_stateless/00539_functions_for_working_with_json.sql b/tests/queries/0_stateless/00539_functions_for_working_with_json.sql\nindex 514b5f2e5ead..31853e92262d 100644\n--- a/tests/queries/0_stateless/00539_functions_for_working_with_json.sql\n+++ b/tests/queries/0_stateless/00539_functions_for_working_with_json.sql\n@@ -15,3 +15,11 @@ SELECT visitParamExtractRaw('{\"myparam\": \"{\"}', 'myparam');\n SELECT visitParamExtractRaw('{\"myparam\": \"[\"}', 'myparam');\n SELECT visitParamExtractRaw('{\"myparam\": [\"]\", \"2\", \"3\"], \"other\":123}', 'myparam');\n SELECT visitParamExtractRaw('{\"myparam\": {\"nested\" : [1,2,3]}, \"other\":123}', 'myparam');\n+\n+SELECT simpleJSONExtractInt('{\"myparam\":-1}', 'myparam');\n+SELECT simpleJSONExtractUInt('{\"myparam\":-1}', 'myparam');\n+SELECT simpleJSONExtractFloat('{\"myparam\":null}', 'myparam');\n+SELECT simpleJSONExtractFloat('{\"myparam\":-1}', 'myparam');\n+SELECT simpleJSONExtractBool('{\"myparam\":true}', 'myparam');\n+SELECT simpleJSONExtractString('{\"myparam\":\"test_string\"}', 'myparam');\n+SELECT simpleJSONExtractString('{\"myparam\":\"test\\\\\"string\"}', 'myparam');\n",
  "problem_statement": "Add aliases to visitParam (e.g. JSONS (Simplified))\nvisitParamHas -> JSONSHas\r\nvisitParamExtractUInt -> JSONSExtractUInt\r\n\n",
  "hints_text": "",
  "created_at": "2021-03-08T09:18:29Z",
  "modified_files": [
    "src/Functions/visitParamExtractBool.cpp",
    "src/Functions/visitParamExtractFloat.cpp",
    "src/Functions/visitParamExtractInt.cpp",
    "src/Functions/visitParamExtractRaw.cpp",
    "src/Functions/visitParamExtractString.cpp",
    "src/Functions/visitParamExtractUInt.cpp",
    "src/Functions/visitParamHas.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/00539_functions_for_working_with_json.reference",
    "tests/queries/0_stateless/00539_functions_for_working_with_json.sql"
  ]
}