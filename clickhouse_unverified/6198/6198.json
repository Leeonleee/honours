{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 6198,
  "instance_id": "ClickHouse__ClickHouse-6198",
  "issue_numbers": [
    "6195"
  ],
  "base_commit": "129e88ee26eab8f6a7708299b0858db1f66bda3d",
  "patch": "diff --git a/dbms/src/IO/WriteBufferFromVector.h b/dbms/src/IO/WriteBufferFromVector.h\nindex 6e7b764f2e35..46080e227f5a 100644\n--- a/dbms/src/IO/WriteBufferFromVector.h\n+++ b/dbms/src/IO/WriteBufferFromVector.h\n@@ -57,7 +57,7 @@ class WriteBufferFromVector : public WriteBuffer\n         : WriteBuffer(nullptr, 0), vector(vector_)\n     {\n         size_t old_size = vector.size();\n-        vector.resize(vector.capacity() < initial_size ? initial_size : vector.capacity());\n+        vector.resize(std::max(vector.size() + initial_size, vector.capacity()));\n         set(reinterpret_cast<Position>(vector.data() + old_size), (vector.size() - old_size) * sizeof(typename VectorType::value_type));\n     }\n \n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/00975_json_hang.reference b/dbms/tests/queries/0_stateless/00975_json_hang.reference\nnew file mode 100644\nindex 000000000000..1d474d525571\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/00975_json_hang.reference\n@@ -0,0 +1,2 @@\n+false\n+true\ndiff --git a/dbms/tests/queries/0_stateless/00975_json_hang.sql b/dbms/tests/queries/0_stateless/00975_json_hang.sql\nnew file mode 100644\nindex 000000000000..d60411cb7965\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/00975_json_hang.sql\n@@ -0,0 +1,1 @@\n+SELECT DISTINCT JSONExtractRaw(concat('{\"x\":', rand() % 2 ? 'true' : 'false', '}'), 'x') AS res FROM numbers(1000000) ORDER BY res;\n",
  "problem_statement": "Query using JSONExtractRaw over a boolean value hangs with 100% CPU usage\n**TL;DR**\r\n```\r\nSELECT JSONExtractRaw(json_string_field, 'key_with_boolean_value') FROM table;  -- hangs\r\nSELECT visitParamExtractRaw(json_string_field, 'key_with_boolean_value') FROM table;  -- OK\r\nSELECT JSONExtractRaw(json_string_field, 'key_with_boolean_value') FROM table WHERE certain_row_id = 1;  -- OK\r\n```\r\n\r\n**Describe the bug**\r\n\r\nRunning such a query over a MergeTree table makes it hang and use 100% of the CPU core:\r\n```SELECT click_id, JSONExtractRaw(data, 'adBlock') FROM fingerprint WHERE date = today() ORDER BY created_at LIMIT 1;```\r\nIt doesn't get either killed or completed (waited for a hour on a table with just ~500K rows). There's also nothing in the error log. Had to restart the server :(\r\n\r\nThe funny thing is if I explicitly add more clauses in the WHERE, there's no hanging. Like this one:\r\n```SELECT click_id, JSONExtractRaw(data, 'adBlock') FROM fingerprint WHERE date = today() AND click_id = 'd60f013d-2f15-4c34-8a33-39de48e6b97b' ORDER BY created_at LIMIT 1;```\r\n(the `click_id` value is the same that would've returned by the first query)\r\n\r\n`JSONExtractRaw(data, 'otherKey')` over the keys having the string (and not a boolean) works fine. It seems to happen only with the booleans.\r\n\r\nOther functions like JSONExtractString or JSONExtractBool over those boolean elements work fine. \r\n(well, I was also hoping that `JSONExtractString(json_string_field, 'some_boolean')` would return `'true'` or `'false'`, but whatever)\r\n\r\n`SELECT DISTINCT visitParamExtractRaw(data, 'adBlock') FROM fingerprint;` shows:\r\n```\r\n\u250c\u2500adblock\u2500\u2510\r\n\u2502 false   \u2502\r\n\u2502 true    \u2502\r\n\u2502         \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\nThe third, empty value is there because there are several rows with the `data` being the empty string (not even an empty object like `'{}'`).\r\n\r\nBy the way, `visitParamExtractRaw` works fine:\r\n\r\n```\r\nSELECT click_id, visitParamExtractRaw(data, 'adBlock') FROM fingerprint WHERE date = today() ORDER BY created_at LIMIT 1;\r\n```\r\n\r\n`perf top -p $(pidof clickhouse-server)` while having multiple hanged queries:\r\n```\r\nSamples: 1M of event 'cycles:ppp', Event count (approx.): 370232537185\r\nOverhead  Shared Object       Symbol\r\n  45.86%  clickhouse          [.] _ZN2DB11WriteBuffer5writeEPKcm\r\n  36.31%  clickhouse          [.] memcpy\r\n  17.51%  clickhouse          [.] _ZN2DB11WriteBuffer4nextEv\r\n```\r\n\r\nThe same command while everything's alright:\r\n```\r\nSamples: 3K of event 'cycles:ppp', Event count (approx.): 512427099\r\nOverhead  Shared Object       Symbol\r\n   4.52%  clickhouse          [.] memcpy\r\n   4.49%  clickhouse          [.] LZ4_compress_fast_extState\r\n   1.75%  clickhouse          [.] free\r\n   1.56%  clickhouse          [.] _ZN2DB12ColumnString10insertFromERKNS_7IColumnEm\r\n```\r\n\r\n* Server version: 19.11.3.11\r\n* Both binary (clickhouse-client) and HTTP\r\n\r\n**Additional context**  \r\nIt's a MergeTree table that originally had such structure:\r\n```\r\nCREATE TABLE default.fingerprint (`created_at` DateTime DEFAULT now(), `date` Date DEFAULT toDate(created_at), `ip` String, `snip1` String, `snip2` String, `headers` String, `click_id` String, `snip3` String) ENGINE = MergeTree(date, (date, snip1), 8192);\r\nCREATE TABLE default.fingerprint_buffer AS default.fingerprint ENGINE = Buffer(default, fingerprint, 4, 5, 30, 25, 100, 1000000, 10000000);\r\n```\r\n\r\nThen I added a new column:\r\n```\r\nDROP TABLE fingerprint_buffer;\r\nALTER TABLE fingerprint ADD COLUMN data String AFTER snip3;\r\nCREATE TABLE default.fingerprint_buffer AS default.fingerprint ENGINE = Buffer(default, fingerprint, 4, 5, 30, 25, 100, 1000000, 10000000);\r\n```\r\n\r\nThe trace log of such a hanged query:\r\n```\r\n2019.07.28 09:52:06.350971 [ 46 ] {} <Trace> HTTPHandler: Request URI: /?session_id=553a681b-b4cc-4d8e-9bab-711fee42f641&database=default&stacktrace=0&query_id=aa5ef8cb-3156-4b23-bd0a-016d9a40420b\r\n2019.07.28 09:52:06.351748 [ 46 ] {aa5ef8cb-3156-4b23-bd0a-016d9a40420b} <Debug> executeQuery: (from 127.0.0.1:64605) SELECT click_id, JSONExtractRaw(data, 'adBlock') adblock FROM default.fingerprint WHERE date = today() LIMIT 3 FORMAT PrettyCompactMonoBlock\r\n2019.07.28 09:52:06.355713 [ 46 ] {aa5ef8cb-3156-4b23-bd0a-016d9a40420b} <Debug> default.fingerprint (SelectExecutor): Key condition: (column 0 in [18105, 18105])\r\n2019.07.28 09:52:06.355774 [ 46 ] {aa5ef8cb-3156-4b23-bd0a-016d9a40420b} <Debug> default.fingerprint (SelectExecutor): MinMax index condition: (column 0 in [18105, 18105])\r\n2019.07.28 09:52:06.355811 [ 46 ] {aa5ef8cb-3156-4b23-bd0a-016d9a40420b} <Debug> default.fingerprint (SelectExecutor): Selected 4 parts by date, 4 parts by key, 4 marks to read from 4 ranges\r\n2019.07.28 09:52:06.355972 [ 46 ] {aa5ef8cb-3156-4b23-bd0a-016d9a40420b} <Trace> default.fingerprint (SelectExecutor): Reading approx. 32768 rows with 4 streams\r\n2019.07.28 09:52:06.356048 [ 46 ] {aa5ef8cb-3156-4b23-bd0a-016d9a40420b} <Trace> InterpreterSelectQuery: FetchColumns -> Complete\r\n2019.07.28 09:52:06.356758 [ 46 ] {aa5ef8cb-3156-4b23-bd0a-016d9a40420b} <Debug> executeQuery: Query pipeline:\r\n2019.07.28 09:52:06.358298 [ 46 ] {aa5ef8cb-3156-4b23-bd0a-016d9a40420b} <Trace> UnionBlockInputStream: Waiting for threads to finish\r\n2019.07.28 09:52:59.769097 [ 49 ] {eb81beb7-88ec-4cff-87b3-8ab46ca892a9} <Debug> executeQuery: (from 127.0.0.1:46852) KILL QUERY WHERE query_id = 'aa5ef8cb-3156-4b23-bd0a-016d9a40420b' ASYNC\r\n2019.07.28 09:52:59.769163 [ 49 ] {eb81beb7-88ec-4cff-87b3-8ab46ca892a9} <Debug> executeQuery: (internal) SELECT query_id, user, query FROM system.processes WHERE query_id = 'aa5ef8cb-3156-4b23-bd0a-016d9a40420b'\r\n2019.07.28 09:54:55.967934 [ 49 ] {6eb26a38-ac4f-408e-81b1-c0a98a279a8b} <Debug> executeQuery: (from 127.0.0.1:46852) KILL QUERY WHERE query_id = 'aa5ef8cb-3156-4b23-bd0a-016d9a40420b' ASYNC\r\n```\r\n\r\nIt's weird, but I couldn't reproduce it myself yet.\n",
  "hints_text": "@vitlibar That's trivial bug in code.",
  "created_at": "2019-07-28T17:20:12Z",
  "modified_files": [
    "dbms/src/IO/WriteBufferFromVector.h"
  ],
  "modified_test_files": [
    "b/dbms/tests/queries/0_stateless/00975_json_hang.reference",
    "b/dbms/tests/queries/0_stateless/00975_json_hang.sql"
  ]
}