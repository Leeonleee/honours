{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 55617,
  "instance_id": "ClickHouse__ClickHouse-55617",
  "issue_numbers": [
    "53482",
    "52777"
  ],
  "base_commit": "ab4a065f76d395e7e8922ce81ce50a51cfa357aa",
  "patch": "diff --git a/docs/en/operations/settings/settings.md b/docs/en/operations/settings/settings.md\nindex 2cb85a61be5b..fe3f1298ff52 100644\n--- a/docs/en/operations/settings/settings.md\n+++ b/docs/en/operations/settings/settings.md\n@@ -3290,6 +3290,28 @@ Possible values:\n \n Default value: `0`.\n \n+## mysql_map_string_to_text_in_show_columns {#mysql_map_string_to_text_in_show_columns}\n+\n+When enabled, [String](../../sql-reference/data-types/string.md) ClickHouse data type will be displayed as `TEXT` in [SHOW COLUMNS](../../sql-reference/statements/show.md#show_columns).\n+\n+Has effect only when [use_mysql_types_in_show_columns](#use_mysql_types_in_show_columns) is enabled.\n+\n+- 0 - Use `BLOB`.\n+- 1 - Use `TEXT`.\n+\n+Default value: `0`.\n+\n+## mysql_map_fixed_string_to_text_in_show_columns {#mysql_map_fixed_string_to_text_in_show_columns}\n+\n+When enabled, [FixedString](../../sql-reference/data-types/fixedstring.md) ClickHouse data type will be displayed as `TEXT` in [SHOW COLUMNS](../../sql-reference/statements/show.md#show_columns).\n+\n+Has effect only when [use_mysql_types_in_show_columns](#use_mysql_types_in_show_columns) is enabled.\n+\n+- 0 - Use `BLOB`.\n+- 1 - Use `TEXT`.\n+\n+Default value: `0`.\n+\n ## execute_merges_on_single_replica_time_threshold {#execute-merges-on-single-replica-time-threshold}\n \n Enables special logic to perform merges on replicas.\ndiff --git a/src/Core/Settings.h b/src/Core/Settings.h\nindex c08425c03fd4..537ffc753231 100644\n--- a/src/Core/Settings.h\n+++ b/src/Core/Settings.h\n@@ -205,7 +205,9 @@ class IColumn;\n     M(Bool, allow_experimental_inverted_index, false, \"If it is set to true, allow to use experimental inverted index.\", 0) \\\n     \\\n     M(UInt64, mysql_max_rows_to_insert, 65536, \"The maximum number of rows in MySQL batch insertion of the MySQL storage engine\", 0) \\\n-    M(Bool, use_mysql_types_in_show_columns, false, \"Show MySQL types in SHOW COLUMNS and system.columns\", 0) \\\n+    M(Bool, use_mysql_types_in_show_columns, false, \"Show native MySQL types in SHOW [FULL] COLUMNS\", 0) \\\n+    M(Bool, mysql_map_string_to_text_in_show_columns, false, \"If enabled, String type will be mapped to TEXT in SHOW [FULL] COLUMNS, BLOB otherwise. Will only take effect if use_mysql_types_in_show_columns is enabled too\", 0) \\\n+    M(Bool, mysql_map_fixed_string_to_text_in_show_columns, false, \"If enabled, FixedString type will be mapped to TEXT in SHOW [FULL] COLUMNS, BLOB otherwise. Will only take effect if use_mysql_types_in_show_columns is enabled too\", 0) \\\n     \\\n     M(UInt64, optimize_min_equality_disjunction_chain_length, 3, \"The minimum length of the expression `expr = x1 OR ... expr = xN` for optimization \", 0) \\\n     \\\ndiff --git a/src/Interpreters/InterpreterShowColumnsQuery.cpp b/src/Interpreters/InterpreterShowColumnsQuery.cpp\nindex fe8ac63c2149..55891f510637 100644\n--- a/src/Interpreters/InterpreterShowColumnsQuery.cpp\n+++ b/src/Interpreters/InterpreterShowColumnsQuery.cpp\n@@ -24,7 +24,10 @@ String InterpreterShowColumnsQuery::getRewrittenQuery()\n {\n     const auto & query = query_ptr->as<ASTShowColumnsQuery &>();\n \n-    const bool use_mysql_types = getContext()->getSettingsRef().use_mysql_types_in_show_columns;\n+    const auto & settings = getContext()->getSettingsRef();\n+    const bool use_mysql_types = settings.use_mysql_types_in_show_columns;\n+    const bool remap_string_as_text = settings.mysql_map_string_to_text_in_show_columns;\n+    const bool remap_fixed_string_as_text = settings.mysql_map_fixed_string_to_text_in_show_columns;\n \n     WriteBufferFromOwnString buf_database;\n     String resolved_database = getContext()->resolveDatabase(query.database);\n@@ -37,42 +40,51 @@ String InterpreterShowColumnsQuery::getRewrittenQuery()\n \n     String rewritten_query;\n     if (use_mysql_types)\n+    {\n         /// Cheapskate SQL-based mapping from native types to MySQL types, see https://dev.mysql.com/doc/refman/8.0/en/data-types.html\n         /// Only used with setting 'use_mysql_types_in_show_columns = 1'\n         /// Known issues:\n         /// - Enums are translated to TEXT\n-        rewritten_query += R\"(\n+        rewritten_query += fmt::format(\n+            R\"(\n WITH map(\n-        'Int8',       'TINYINT',\n-        'Int16',      'SMALLINT',\n-        'Int32',      'INTEGER',\n-        'Int64',      'BIGINT',\n-        'UInt8',      'TINYINT UNSIGNED',\n-        'UInt16',     'SMALLINT UNSIGNED',\n-        'UInt32',     'INTEGER UNSIGNED',\n-        'UInt64',     'BIGINT UNSIGNED',\n-        'Float32',    'FLOAT',\n-        'Float64',    'DOUBLE',\n-        'String',     'BLOB',\n-        'UUID',       'CHAR',\n-        'Bool',       'TINYINT',\n-        'Date',       'DATE',\n-        'Date32',     'DATE',\n-        'DateTime',   'DATETIME',\n-        'DateTime64', 'DATETIME',\n-        'Map',        'JSON',\n-        'Tuple',      'JSON',\n-        'Object',     'JSON') AS native_to_mysql_mapping,\n-    splitByRegexp('\\(|\\)', type_) AS split,\n-    multiIf(startsWith(type_, 'LowCardinality(Nullable'), split[3],\n-             startsWith(type_, 'LowCardinality'), split[2],\n-             startsWith(type_, 'Nullable'), split[2],\n-             split[1]) AS inner_type,\n-     if (length(split) > 1, splitByString(', ', split[2]), []) AS decimal_scale_and_precision,\n-     multiIf(inner_type = 'Decimal' AND toInt8(decimal_scale_and_precision[1]) <= 65 AND toInt8(decimal_scale_and_precision[2]) <= 30, concat('DECIMAL(', decimal_scale_and_precision[1], ', ', decimal_scale_and_precision[2], ')'),\n-             mapContains(native_to_mysql_mapping, inner_type) = true, native_to_mysql_mapping[inner_type],\n-             'TEXT') AS mysql_type\n-        )\";\n+        'Int8',        'TINYINT',\n+        'Int16',       'SMALLINT',\n+        'Int32',       'INTEGER',\n+        'Int64',       'BIGINT',\n+        'UInt8',       'TINYINT UNSIGNED',\n+        'UInt16',      'SMALLINT UNSIGNED',\n+        'UInt32',      'INTEGER UNSIGNED',\n+        'UInt64',      'BIGINT UNSIGNED',\n+        'Float32',     'FLOAT',\n+        'Float64',     'DOUBLE',\n+        'UUID',        'CHAR',\n+        'Bool',        'TINYINT',\n+        'Date',        'DATE',\n+        'Date32',      'DATE',\n+        'DateTime',    'DATETIME',\n+        'DateTime64',  'DATETIME',\n+        'Map',         'JSON',\n+        'Tuple',       'JSON',\n+        'Object',      'JSON',\n+        'String',      '{}',\n+        'FixedString', '{}') AS native_to_mysql_mapping,\n+        )\",\n+        remap_string_as_text ? \"TEXT\" : \"BLOB\",\n+        remap_fixed_string_as_text ? \"TEXT\" : \"BLOB\");\n+\n+        rewritten_query += R\"(\n+        splitByRegexp('\\(|\\)', type_) AS split,\n+        multiIf(startsWith(type_, 'LowCardinality(Nullable'), split[3],\n+                startsWith(type_, 'LowCardinality'), split[2],\n+                startsWith(type_, 'Nullable'), split[2],\n+                split[1]) AS inner_type,\n+        if (length(split) > 1, splitByString(', ', split[2]), []) AS decimal_scale_and_precision,\n+        multiIf(inner_type = 'Decimal' AND toInt8(decimal_scale_and_precision[1]) <= 65 AND toInt8(decimal_scale_and_precision[2]) <= 30, concat('DECIMAL(', decimal_scale_and_precision[1], ', ', decimal_scale_and_precision[2], ')'),\n+                mapContains(native_to_mysql_mapping, inner_type) = true, native_to_mysql_mapping[inner_type],\n+                'TEXT') AS mysql_type\n+            )\";\n+    }\n \n     rewritten_query += R\"(\n SELECT\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02775_show_columns_mysql_compatibility.reference b/tests/queries/0_stateless/02775_show_columns_mysql_compatibility.reference\nindex 6613e4f170e8..e038a3362df3 100644\n--- a/tests/queries/0_stateless/02775_show_columns_mysql_compatibility.reference\n+++ b/tests/queries/0_stateless/02775_show_columns_mysql_compatibility.reference\n@@ -84,6 +84,128 @@ dt_tz2\tDATETIME\tNO\t\t\\N\n enm\tTEXT\tNO\t\t\\N\t\n f32\tFLOAT\tNO\t\t\\N\t\n f64\tDOUBLE\tNO\t\t\\N\t\n+fs\tBLOB\tNO\t\t\\N\t\n+i128\tTEXT\tNO\t\t\\N\t\n+i16\tSMALLINT\tNO\t\t\\N\t\n+i256\tTEXT\tNO\t\t\\N\t\n+i32\tINTEGER\tNO\t\t\\N\t\n+i64\tBIGINT\tNO\t\t\\N\t\n+i8\tTINYINT\tNO\t\t\\N\t\n+ip4\tTEXT\tNO\t\t\\N\t\n+ip6\tTEXT\tNO\t\t\\N\t\n+lfs\tBLOB\tNO\t\t\\N\t\n+lnfs\tBLOB\tYES\t\t\\N\t\n+lns\tBLOB\tYES\t\t\\N\t\n+ls\tBLOB\tNO\t\t\\N\t\n+m\tJSON\tNO\t\t\\N\t\n+m_complex\tJSON\tNO\t\t\\N\t\n+mpg\tTEXT\tNO\t\t\\N\t\n+ndt64\tDATETIME\tYES\t\t\\N\t\n+ndt64_tz\tDATETIME\tYES\t\t\\N\t\n+nested.col1\tTEXT\tNO\t\t\\N\t\n+nested.col2\tTEXT\tNO\t\t\\N\t\n+nfs\tBLOB\tYES\t\t\\N\t\n+ns\tBLOB\tYES\t\t\\N\t\n+o\tJSON\tNO\t\t\\N\t\n+p\tTEXT\tNO\t\t\\N\t\n+pg\tTEXT\tNO\t\t\\N\t\n+r\tTEXT\tNO\t\t\\N\t\n+s\tBLOB\tNO\t\t\\N\t\n+sagg\tTEXT\tNO\t\t\\N\t\n+t\tJSON\tNO\t\t\\N\t\n+ui128\tTEXT\tNO\t\t\\N\t\n+ui16\tSMALLINT UNSIGNED\tNO\t\t\\N\t\n+ui256\tTEXT\tNO\t\t\\N\t\n+ui32\tINTEGER UNSIGNED\tNO\t\t\\N\t\n+ui64\tBIGINT UNSIGNED\tNO\t\t\\N\t\n+ui8\tTINYINT UNSIGNED\tNO\t\t\\N\t\n+uuid\tCHAR\tNO\t\t\\N\t\n+-- SHOW COLUMNS with mysql_map_string_to_text_in_show_columns = 1\n+a\tTEXT\tNO\t\t\\N\t\n+agg\tTEXT\tNO\t\t\\N\t\n+b\tTINYINT\tNO\t\t\\N\t\n+d\tDATE\tNO\t\t\\N\t\n+d32\tDATE\tNO\t\t\\N\t\n+dec128\tDECIMAL(38, 2)\tNO\t\t\\N\t\n+dec128_native\tDECIMAL(35, 30)\tNO\t\t\\N\t\n+dec128_text\tTEXT\tNO\t\t\\N\t\n+dec256\tTEXT\tNO\t\t\\N\t\n+dec256_native\tDECIMAL(65, 2)\tNO\t\t\\N\t\n+dec256_text\tTEXT\tNO\t\t\\N\t\n+dec32\tDECIMAL(9, 2)\tNO\t\t\\N\t\n+dec64\tDECIMAL(18, 2)\tNO\t\t\\N\t\n+dt\tDATETIME\tNO\t\t\\N\t\n+dt64\tDATETIME\tNO\t\t\\N\t\n+dt64_3_tz1\tDATETIME\tNO\t\t\\N\t\n+dt64_3_tz2\tDATETIME\tNO\t\t\\N\t\n+dt64_6\tDATETIME\tNO\t\t\\N\t\n+dt64_9\tDATETIME\tNO\t\t\\N\t\n+dt_tz1\tDATETIME\tNO\t\t\\N\t\n+dt_tz2\tDATETIME\tNO\t\t\\N\t\n+enm\tTEXT\tNO\t\t\\N\t\n+f32\tFLOAT\tNO\t\t\\N\t\n+f64\tDOUBLE\tNO\t\t\\N\t\n+fs\tBLOB\tNO\t\t\\N\t\n+i128\tTEXT\tNO\t\t\\N\t\n+i16\tSMALLINT\tNO\t\t\\N\t\n+i256\tTEXT\tNO\t\t\\N\t\n+i32\tINTEGER\tNO\t\t\\N\t\n+i64\tBIGINT\tNO\t\t\\N\t\n+i8\tTINYINT\tNO\t\t\\N\t\n+ip4\tTEXT\tNO\t\t\\N\t\n+ip6\tTEXT\tNO\t\t\\N\t\n+lfs\tBLOB\tNO\t\t\\N\t\n+lnfs\tBLOB\tYES\t\t\\N\t\n+lns\tTEXT\tYES\t\t\\N\t\n+ls\tTEXT\tNO\t\t\\N\t\n+m\tJSON\tNO\t\t\\N\t\n+m_complex\tJSON\tNO\t\t\\N\t\n+mpg\tTEXT\tNO\t\t\\N\t\n+ndt64\tDATETIME\tYES\t\t\\N\t\n+ndt64_tz\tDATETIME\tYES\t\t\\N\t\n+nested.col1\tTEXT\tNO\t\t\\N\t\n+nested.col2\tTEXT\tNO\t\t\\N\t\n+nfs\tBLOB\tYES\t\t\\N\t\n+ns\tTEXT\tYES\t\t\\N\t\n+o\tJSON\tNO\t\t\\N\t\n+p\tTEXT\tNO\t\t\\N\t\n+pg\tTEXT\tNO\t\t\\N\t\n+r\tTEXT\tNO\t\t\\N\t\n+s\tTEXT\tNO\t\t\\N\t\n+sagg\tTEXT\tNO\t\t\\N\t\n+t\tJSON\tNO\t\t\\N\t\n+ui128\tTEXT\tNO\t\t\\N\t\n+ui16\tSMALLINT UNSIGNED\tNO\t\t\\N\t\n+ui256\tTEXT\tNO\t\t\\N\t\n+ui32\tINTEGER UNSIGNED\tNO\t\t\\N\t\n+ui64\tBIGINT UNSIGNED\tNO\t\t\\N\t\n+ui8\tTINYINT UNSIGNED\tNO\t\t\\N\t\n+uuid\tCHAR\tNO\t\t\\N\t\n+-- SHOW COLUMNS with mysql_map_fixed_string_to_text_in_show_columns = 1\n+a\tTEXT\tNO\t\t\\N\t\n+agg\tTEXT\tNO\t\t\\N\t\n+b\tTINYINT\tNO\t\t\\N\t\n+d\tDATE\tNO\t\t\\N\t\n+d32\tDATE\tNO\t\t\\N\t\n+dec128\tDECIMAL(38, 2)\tNO\t\t\\N\t\n+dec128_native\tDECIMAL(35, 30)\tNO\t\t\\N\t\n+dec128_text\tTEXT\tNO\t\t\\N\t\n+dec256\tTEXT\tNO\t\t\\N\t\n+dec256_native\tDECIMAL(65, 2)\tNO\t\t\\N\t\n+dec256_text\tTEXT\tNO\t\t\\N\t\n+dec32\tDECIMAL(9, 2)\tNO\t\t\\N\t\n+dec64\tDECIMAL(18, 2)\tNO\t\t\\N\t\n+dt\tDATETIME\tNO\t\t\\N\t\n+dt64\tDATETIME\tNO\t\t\\N\t\n+dt64_3_tz1\tDATETIME\tNO\t\t\\N\t\n+dt64_3_tz2\tDATETIME\tNO\t\t\\N\t\n+dt64_6\tDATETIME\tNO\t\t\\N\t\n+dt64_9\tDATETIME\tNO\t\t\\N\t\n+dt_tz1\tDATETIME\tNO\t\t\\N\t\n+dt_tz2\tDATETIME\tNO\t\t\\N\t\n+enm\tTEXT\tNO\t\t\\N\t\n+f32\tFLOAT\tNO\t\t\\N\t\n+f64\tDOUBLE\tNO\t\t\\N\t\n fs\tTEXT\tNO\t\t\\N\t\n i128\tTEXT\tNO\t\t\\N\t\n i16\tSMALLINT\tNO\t\t\\N\t\n@@ -120,3 +242,125 @@ ui32\tINTEGER UNSIGNED\tNO\t\t\\N\n ui64\tBIGINT UNSIGNED\tNO\t\t\\N\t\n ui8\tTINYINT UNSIGNED\tNO\t\t\\N\t\n uuid\tCHAR\tNO\t\t\\N\t\n+-- SHOW COLUMNS with mysql_map_string_to_text_in_show_columns = 1 and without use_mysql_types_in_show_columns\n+a\tArray(String)\tNO\t\t\\N\t\n+agg\tAggregateFunction(uniq, UInt64)\tNO\t\t\\N\t\n+b\tBool\tNO\t\t\\N\t\n+d\tDate\tNO\t\t\\N\t\n+d32\tDate32\tNO\t\t\\N\t\n+dec128\tDecimal(38, 2)\tNO\t\t\\N\t\n+dec128_native\tDecimal(35, 30)\tNO\t\t\\N\t\n+dec128_text\tDecimal(35, 31)\tNO\t\t\\N\t\n+dec256\tDecimal(76, 2)\tNO\t\t\\N\t\n+dec256_native\tDecimal(65, 2)\tNO\t\t\\N\t\n+dec256_text\tDecimal(66, 2)\tNO\t\t\\N\t\n+dec32\tDecimal(9, 2)\tNO\t\t\\N\t\n+dec64\tDecimal(18, 2)\tNO\t\t\\N\t\n+dt\tDateTime\tNO\t\t\\N\t\n+dt64\tDateTime64(3)\tNO\t\t\\N\t\n+dt64_3_tz1\tDateTime64(3, \\'UTC\\')\tNO\t\t\\N\t\n+dt64_3_tz2\tDateTime64(3, \\'Asia/Shanghai\\')\tNO\t\t\\N\t\n+dt64_6\tDateTime64(6, \\'UTC\\')\tNO\t\t\\N\t\n+dt64_9\tDateTime64(9, \\'UTC\\')\tNO\t\t\\N\t\n+dt_tz1\tDateTime(\\'UTC\\')\tNO\t\t\\N\t\n+dt_tz2\tDateTime(\\'Europe/Amsterdam\\')\tNO\t\t\\N\t\n+enm\tEnum8(\\'hallo\\' = 1, \\'welt\\' = 2)\tNO\t\t\\N\t\n+f32\tFloat32\tNO\t\t\\N\t\n+f64\tFloat64\tNO\t\t\\N\t\n+fs\tFixedString(3)\tNO\t\t\\N\t\n+i128\tInt128\tNO\t\t\\N\t\n+i16\tInt16\tNO\t\t\\N\t\n+i256\tInt256\tNO\t\t\\N\t\n+i32\tInt32\tNO\t\t\\N\t\n+i64\tInt64\tNO\t\t\\N\t\n+i8\tInt8\tNO\t\t\\N\t\n+ip4\tIPv4\tNO\t\t\\N\t\n+ip6\tIPv6\tNO\t\t\\N\t\n+lfs\tLowCardinality(FixedString(3))\tNO\t\t\\N\t\n+lnfs\tLowCardinality(Nullable(FixedString(3)))\tYES\t\t\\N\t\n+lns\tLowCardinality(Nullable(String))\tYES\t\t\\N\t\n+ls\tLowCardinality(String)\tNO\t\t\\N\t\n+m\tMap(Int32, String)\tNO\t\t\\N\t\n+m_complex\tMap(Int32, Map(Int32, LowCardinality(Nullable(String))))\tNO\t\t\\N\t\n+mpg\tMultiPolygon\tNO\t\t\\N\t\n+ndt64\tNullable(DateTime64(3))\tYES\t\t\\N\t\n+ndt64_tz\tNullable(DateTime64(3, \\'Asia/Shanghai\\'))\tYES\t\t\\N\t\n+nested.col1\tArray(String)\tNO\t\t\\N\t\n+nested.col2\tArray(UInt32)\tNO\t\t\\N\t\n+nfs\tNullable(FixedString(3))\tYES\t\t\\N\t\n+ns\tNullable(String)\tYES\t\t\\N\t\n+o\tObject(\\'json\\')\tNO\t\t\\N\t\n+p\tPoint\tNO\t\t\\N\t\n+pg\tPolygon\tNO\t\t\\N\t\n+r\tRing\tNO\t\t\\N\t\n+s\tString\tNO\t\t\\N\t\n+sagg\tSimpleAggregateFunction(sum, Float64)\tNO\t\t\\N\t\n+t\tTuple(Int32, String, Nullable(String), LowCardinality(String), LowCardinality(Nullable(String)), Tuple(Int32, String))\tNO\t\t\\N\t\n+ui128\tUInt128\tNO\t\t\\N\t\n+ui16\tUInt16\tNO\t\t\\N\t\n+ui256\tUInt256\tNO\t\t\\N\t\n+ui32\tUInt32\tNO\t\t\\N\t\n+ui64\tUInt64\tNO\t\t\\N\t\n+ui8\tUInt8\tNO\t\t\\N\t\n+uuid\tUUID\tNO\t\t\\N\t\n+-- SHOW COLUMNS with mysql_map_fixed_string_to_text_in_show_columns = 1 and without use_mysql_types_in_show_columns\n+a\tArray(String)\tNO\t\t\\N\t\n+agg\tAggregateFunction(uniq, UInt64)\tNO\t\t\\N\t\n+b\tBool\tNO\t\t\\N\t\n+d\tDate\tNO\t\t\\N\t\n+d32\tDate32\tNO\t\t\\N\t\n+dec128\tDecimal(38, 2)\tNO\t\t\\N\t\n+dec128_native\tDecimal(35, 30)\tNO\t\t\\N\t\n+dec128_text\tDecimal(35, 31)\tNO\t\t\\N\t\n+dec256\tDecimal(76, 2)\tNO\t\t\\N\t\n+dec256_native\tDecimal(65, 2)\tNO\t\t\\N\t\n+dec256_text\tDecimal(66, 2)\tNO\t\t\\N\t\n+dec32\tDecimal(9, 2)\tNO\t\t\\N\t\n+dec64\tDecimal(18, 2)\tNO\t\t\\N\t\n+dt\tDateTime\tNO\t\t\\N\t\n+dt64\tDateTime64(3)\tNO\t\t\\N\t\n+dt64_3_tz1\tDateTime64(3, \\'UTC\\')\tNO\t\t\\N\t\n+dt64_3_tz2\tDateTime64(3, \\'Asia/Shanghai\\')\tNO\t\t\\N\t\n+dt64_6\tDateTime64(6, \\'UTC\\')\tNO\t\t\\N\t\n+dt64_9\tDateTime64(9, \\'UTC\\')\tNO\t\t\\N\t\n+dt_tz1\tDateTime(\\'UTC\\')\tNO\t\t\\N\t\n+dt_tz2\tDateTime(\\'Europe/Amsterdam\\')\tNO\t\t\\N\t\n+enm\tEnum8(\\'hallo\\' = 1, \\'welt\\' = 2)\tNO\t\t\\N\t\n+f32\tFloat32\tNO\t\t\\N\t\n+f64\tFloat64\tNO\t\t\\N\t\n+fs\tFixedString(3)\tNO\t\t\\N\t\n+i128\tInt128\tNO\t\t\\N\t\n+i16\tInt16\tNO\t\t\\N\t\n+i256\tInt256\tNO\t\t\\N\t\n+i32\tInt32\tNO\t\t\\N\t\n+i64\tInt64\tNO\t\t\\N\t\n+i8\tInt8\tNO\t\t\\N\t\n+ip4\tIPv4\tNO\t\t\\N\t\n+ip6\tIPv6\tNO\t\t\\N\t\n+lfs\tLowCardinality(FixedString(3))\tNO\t\t\\N\t\n+lnfs\tLowCardinality(Nullable(FixedString(3)))\tYES\t\t\\N\t\n+lns\tLowCardinality(Nullable(String))\tYES\t\t\\N\t\n+ls\tLowCardinality(String)\tNO\t\t\\N\t\n+m\tMap(Int32, String)\tNO\t\t\\N\t\n+m_complex\tMap(Int32, Map(Int32, LowCardinality(Nullable(String))))\tNO\t\t\\N\t\n+mpg\tMultiPolygon\tNO\t\t\\N\t\n+ndt64\tNullable(DateTime64(3))\tYES\t\t\\N\t\n+ndt64_tz\tNullable(DateTime64(3, \\'Asia/Shanghai\\'))\tYES\t\t\\N\t\n+nested.col1\tArray(String)\tNO\t\t\\N\t\n+nested.col2\tArray(UInt32)\tNO\t\t\\N\t\n+nfs\tNullable(FixedString(3))\tYES\t\t\\N\t\n+ns\tNullable(String)\tYES\t\t\\N\t\n+o\tObject(\\'json\\')\tNO\t\t\\N\t\n+p\tPoint\tNO\t\t\\N\t\n+pg\tPolygon\tNO\t\t\\N\t\n+r\tRing\tNO\t\t\\N\t\n+s\tString\tNO\t\t\\N\t\n+sagg\tSimpleAggregateFunction(sum, Float64)\tNO\t\t\\N\t\n+t\tTuple(Int32, String, Nullable(String), LowCardinality(String), LowCardinality(Nullable(String)), Tuple(Int32, String))\tNO\t\t\\N\t\n+ui128\tUInt128\tNO\t\t\\N\t\n+ui16\tUInt16\tNO\t\t\\N\t\n+ui256\tUInt256\tNO\t\t\\N\t\n+ui32\tUInt32\tNO\t\t\\N\t\n+ui64\tUInt64\tNO\t\t\\N\t\n+ui8\tUInt8\tNO\t\t\\N\t\n+uuid\tUUID\tNO\t\t\\N\t\ndiff --git a/tests/queries/0_stateless/02775_show_columns_mysql_compatibility.sql b/tests/queries/0_stateless/02775_show_columns_mysql_compatibility.sql\nindex 34c034fa77ff..e447dee47ed4 100644\n--- a/tests/queries/0_stateless/02775_show_columns_mysql_compatibility.sql\n+++ b/tests/queries/0_stateless/02775_show_columns_mysql_compatibility.sql\n@@ -78,4 +78,16 @@ SHOW COLUMNS FROM tab SETTINGS use_mysql_types_in_show_columns = 0;\n SELECT '-- SHOW COLUMNS with use_mysql_types_in_show_columns = 1';\n SHOW COLUMNS FROM tab SETTINGS use_mysql_types_in_show_columns = 1;\n \n+SELECT '-- SHOW COLUMNS with mysql_map_string_to_text_in_show_columns = 1';\n+SHOW COLUMNS FROM tab SETTINGS use_mysql_types_in_show_columns = 1, mysql_map_string_to_text_in_show_columns=1;\n+\n+SELECT '-- SHOW COLUMNS with mysql_map_fixed_string_to_text_in_show_columns = 1';\n+SHOW COLUMNS FROM tab SETTINGS use_mysql_types_in_show_columns = 1, mysql_map_fixed_string_to_text_in_show_columns=1;\n+\n+SELECT '-- SHOW COLUMNS with mysql_map_string_to_text_in_show_columns = 1 and without use_mysql_types_in_show_columns';\n+SHOW COLUMNS FROM tab SETTINGS use_mysql_types_in_show_columns = 0, mysql_map_string_to_text_in_show_columns=1;\n+\n+SELECT '-- SHOW COLUMNS with mysql_map_fixed_string_to_text_in_show_columns = 1 and without use_mysql_types_in_show_columns';\n+SHOW COLUMNS FROM tab SETTINGS use_mysql_types_in_show_columns = 0, mysql_map_fixed_string_to_text_in_show_columns=1;\n+\n DROP TABLE tab;\n",
  "problem_statement": "MySQL compatibility: BLOB vs TEXT for String types\n**Describe the issue**\r\nAll the string types are reported as BLOB if `use_mysql_types_in_show_columns` is set to 1. This, unfortunately, causes issues with QuickSight via MySQL interface, as it cannot recognize BLOB columns as strings. For example:\r\n\r\n<img width=\"618\" alt=\"image\" src=\"https://github.com/ClickHouse/ClickHouse/assets/3175289/460cea0f-c19c-4a3e-8f05-df5a8f0ce932\">\r\n\r\nAs you can see, BLOB (aka LONGVARBINARY, see [the explanation](https://dev.mysql.com/doc/refman/8.0/en/blob.html)) does not work here as expected. However, this works fine with tools such as Looker Studio. \r\n\r\n**How to reproduce**\r\n* Which ClickHouse server version to use: the latest master build\r\n* Which interface to use, if matters: MySQL\r\n* Non-default settings, if any: `users.xml` -> add `<use_mysql_types_in_show_columns>1</use_mysql_types_in_show_columns>` to the default profile.\r\n* Sample data: [commits sample dataset](https://clickhouse.com/docs/en/getting-started/example-datasets/github)\r\n* Queries to run:\r\n\r\n```\r\nshow full columns from commits;\r\n```\r\n\r\n**Preferred solution**\r\nWhile BLOB is technically the correct type for representing Strings via MySQL interface, a configuration option to switch between `BLOB` and `TEXT` globally reported types for String columns in the `SHOW (FULL) COLUMNS` output will enable us to integrate with QuickSight better.\r\n\r\nCC @rschu1ze \nInconsistency between `String` and `FixedString` type mapping in MySQL compatibility mode.\n**Describe the unexpected behaviour**\r\n\r\nWhen using the `use_mysql_types_in_show_columns` setting, implemented in issue #49577, ClickHouse's `String` datatype is mapped to MySQL's `BLOB` datatype. Unfortunately, the QuickSight tool mentioned in the issue does not support this type of columns (https://docs.aws.amazon.com/quicksight/latest/user/supported-data-types.html). As a result, all `String` columns are skipped when a table is added to the dataset.\r\n\r\nAlso, there is an inconsistency because the `FixedString` type is mapped to the `TEXT` datatype, but `String` and `FixedString` should be mapped at least to the same mysql datatype as there is no any difference of how bytes of text are stored in the clickhouse.\r\n\r\nIt's a subject for discussion of what datatype they match better, `BLOB` or `TEXT`, but at least Quicksight tool doesn't support `BLOB` columns (but do support `TEXT`).\r\n\r\n```\r\nMySQL [voluum]> SHOW FULL COLUMNS IN test;\r\n+----------+---------+------+---------+---------+-------+-----------+---------+------------+\r\n| field    | type    | null | key     | default | extra | collation | comment | privileges |\r\n+----------+---------+------+---------+---------+-------+-----------+---------+------------+\r\n| fixed    | TEXT    |    0 |         | NULL    |       | NULL      |         |            |\r\n| id       | INTEGER |    0 | PRI SOR | NULL    |       | NULL      |         |            |\r\n| variable | BLOB    |    0 |         | NULL    |       | NULL      |         |            |\r\n+----------+---------+------+---------+---------+-------+-----------+---------+------------+\r\n3 rows in set (0.005 sec)\r\n```\r\n\r\n**How to reproduce**\r\n\r\n- Which ClickHouse server version to use: 23.7\r\n- Which interface to use, if it matters: MySQL\r\n- Non-default settings, if any:\r\n```\r\nSET use_mysql_types_in_show_columns = 1;\r\n```\r\n\r\n* `CREATE TABLE` statements for all tables involved\r\n\r\n```\r\nCREATE TABLE test (\r\n    id INT NOT NULL PRIMARY KEY,\r\n    variable String(32) NOT NULL,\r\n    fixed FixedString(32) NOT NULL\r\n) ENGINE=MergeTree;\r\n```\r\n* Queries to run that lead to unexpected result\r\n\r\n```\r\nSHOW FULL COLUMNS IN test;\r\n```\r\n\r\n**Expected behavior**\r\n- `fixed` and `variable` column types should be the same.\r\n- `String` columns should be mapped to the `TEXT` type in order to be supported by Quicksight.\r\n\n",
  "hints_text": "Related https://github.com/ClickHouse/ClickHouse/issues/52777\nYes, from the default logic, both should map to BLOB (which is more correct),\r\nand we should provide a setting to map them to TEXT.\nString to BLOB is definitelly correct, but shouldn't FixedString(16) be mapped to BINARY(16) in MySQL to really simulate the same behaviour?\r\n\r\nand add a new setting to map String types to readable text, would then result in String -> Text while FixedString(16) would result in CHAR(16)",
  "created_at": "2023-10-13T19:04:15Z"
}