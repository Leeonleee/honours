diff --git a/docs/en/operations/settings/settings.md b/docs/en/operations/settings/settings.md
index 2cb85a61be5b..fe3f1298ff52 100644
--- a/docs/en/operations/settings/settings.md
+++ b/docs/en/operations/settings/settings.md
@@ -3290,6 +3290,28 @@ Possible values:
 
 Default value: `0`.
 
+## mysql_map_string_to_text_in_show_columns {#mysql_map_string_to_text_in_show_columns}
+
+When enabled, [String](../../sql-reference/data-types/string.md) ClickHouse data type will be displayed as `TEXT` in [SHOW COLUMNS](../../sql-reference/statements/show.md#show_columns).
+
+Has effect only when [use_mysql_types_in_show_columns](#use_mysql_types_in_show_columns) is enabled.
+
+- 0 - Use `BLOB`.
+- 1 - Use `TEXT`.
+
+Default value: `0`.
+
+## mysql_map_fixed_string_to_text_in_show_columns {#mysql_map_fixed_string_to_text_in_show_columns}
+
+When enabled, [FixedString](../../sql-reference/data-types/fixedstring.md) ClickHouse data type will be displayed as `TEXT` in [SHOW COLUMNS](../../sql-reference/statements/show.md#show_columns).
+
+Has effect only when [use_mysql_types_in_show_columns](#use_mysql_types_in_show_columns) is enabled.
+
+- 0 - Use `BLOB`.
+- 1 - Use `TEXT`.
+
+Default value: `0`.
+
 ## execute_merges_on_single_replica_time_threshold {#execute-merges-on-single-replica-time-threshold}
 
 Enables special logic to perform merges on replicas.
diff --git a/src/Core/Settings.h b/src/Core/Settings.h
index c08425c03fd4..537ffc753231 100644
--- a/src/Core/Settings.h
+++ b/src/Core/Settings.h
@@ -205,7 +205,9 @@ class IColumn;
     M(Bool, allow_experimental_inverted_index, false, "If it is set to true, allow to use experimental inverted index.", 0) \
     \
     M(UInt64, mysql_max_rows_to_insert, 65536, "The maximum number of rows in MySQL batch insertion of the MySQL storage engine", 0) \
-    M(Bool, use_mysql_types_in_show_columns, false, "Show MySQL types in SHOW COLUMNS and system.columns", 0) \
+    M(Bool, use_mysql_types_in_show_columns, false, "Show native MySQL types in SHOW [FULL] COLUMNS", 0) \
+    M(Bool, mysql_map_string_to_text_in_show_columns, false, "If enabled, String type will be mapped to TEXT in SHOW [FULL] COLUMNS, BLOB otherwise. Will only take effect if use_mysql_types_in_show_columns is enabled too", 0) \
+    M(Bool, mysql_map_fixed_string_to_text_in_show_columns, false, "If enabled, FixedString type will be mapped to TEXT in SHOW [FULL] COLUMNS, BLOB otherwise. Will only take effect if use_mysql_types_in_show_columns is enabled too", 0) \
     \
     M(UInt64, optimize_min_equality_disjunction_chain_length, 3, "The minimum length of the expression `expr = x1 OR ... expr = xN` for optimization ", 0) \
     \
diff --git a/src/Interpreters/InterpreterShowColumnsQuery.cpp b/src/Interpreters/InterpreterShowColumnsQuery.cpp
index fe8ac63c2149..55891f510637 100644
--- a/src/Interpreters/InterpreterShowColumnsQuery.cpp
+++ b/src/Interpreters/InterpreterShowColumnsQuery.cpp
@@ -24,7 +24,10 @@ String InterpreterShowColumnsQuery::getRewrittenQuery()
 {
     const auto & query = query_ptr->as<ASTShowColumnsQuery &>();
 
-    const bool use_mysql_types = getContext()->getSettingsRef().use_mysql_types_in_show_columns;
+    const auto & settings = getContext()->getSettingsRef();
+    const bool use_mysql_types = settings.use_mysql_types_in_show_columns;
+    const bool remap_string_as_text = settings.mysql_map_string_to_text_in_show_columns;
+    const bool remap_fixed_string_as_text = settings.mysql_map_fixed_string_to_text_in_show_columns;
 
     WriteBufferFromOwnString buf_database;
     String resolved_database = getContext()->resolveDatabase(query.database);
@@ -37,42 +40,51 @@ String InterpreterShowColumnsQuery::getRewrittenQuery()
 
     String rewritten_query;
     if (use_mysql_types)
+    {
         /// Cheapskate SQL-based mapping from native types to MySQL types, see https://dev.mysql.com/doc/refman/8.0/en/data-types.html
         /// Only used with setting 'use_mysql_types_in_show_columns = 1'
         /// Known issues:
         /// - Enums are translated to TEXT
-        rewritten_query += R"(
+        rewritten_query += fmt::format(
+            R"(
 WITH map(
-        'Int8',       'TINYINT',
-        'Int16',      'SMALLINT',
-        'Int32',      'INTEGER',
-        'Int64',      'BIGINT',
-        'UInt8',      'TINYINT UNSIGNED',
-        'UInt16',     'SMALLINT UNSIGNED',
-        'UInt32',     'INTEGER UNSIGNED',
-        'UInt64',     'BIGINT UNSIGNED',
-        'Float32',    'FLOAT',
-        'Float64',    'DOUBLE',
-        'String',     'BLOB',
-        'UUID',       'CHAR',
-        'Bool',       'TINYINT',
-        'Date',       'DATE',
-        'Date32',     'DATE',
-        'DateTime',   'DATETIME',
-        'DateTime64', 'DATETIME',
-        'Map',        'JSON',
-        'Tuple',      'JSON',
-        'Object',     'JSON') AS native_to_mysql_mapping,
-    splitByRegexp('\(|\)', type_) AS split,
-    multiIf(startsWith(type_, 'LowCardinality(Nullable'), split[3],
-             startsWith(type_, 'LowCardinality'), split[2],
-             startsWith(type_, 'Nullable'), split[2],
-             split[1]) AS inner_type,
-     if (length(split) > 1, splitByString(', ', split[2]), []) AS decimal_scale_and_precision,
-     multiIf(inner_type = 'Decimal' AND toInt8(decimal_scale_and_precision[1]) <= 65 AND toInt8(decimal_scale_and_precision[2]) <= 30, concat('DECIMAL(', decimal_scale_and_precision[1], ', ', decimal_scale_and_precision[2], ')'),
-             mapContains(native_to_mysql_mapping, inner_type) = true, native_to_mysql_mapping[inner_type],
-             'TEXT') AS mysql_type
-        )";
+        'Int8',        'TINYINT',
+        'Int16',       'SMALLINT',
+        'Int32',       'INTEGER',
+        'Int64',       'BIGINT',
+        'UInt8',       'TINYINT UNSIGNED',
+        'UInt16',      'SMALLINT UNSIGNED',
+        'UInt32',      'INTEGER UNSIGNED',
+        'UInt64',      'BIGINT UNSIGNED',
+        'Float32',     'FLOAT',
+        'Float64',     'DOUBLE',
+        'UUID',        'CHAR',
+        'Bool',        'TINYINT',
+        'Date',        'DATE',
+        'Date32',      'DATE',
+        'DateTime',    'DATETIME',
+        'DateTime64',  'DATETIME',
+        'Map',         'JSON',
+        'Tuple',       'JSON',
+        'Object',      'JSON',
+        'String',      '{}',
+        'FixedString', '{}') AS native_to_mysql_mapping,
+        )",
+        remap_string_as_text ? "TEXT" : "BLOB",
+        remap_fixed_string_as_text ? "TEXT" : "BLOB");
+
+        rewritten_query += R"(
+        splitByRegexp('\(|\)', type_) AS split,
+        multiIf(startsWith(type_, 'LowCardinality(Nullable'), split[3],
+                startsWith(type_, 'LowCardinality'), split[2],
+                startsWith(type_, 'Nullable'), split[2],
+                split[1]) AS inner_type,
+        if (length(split) > 1, splitByString(', ', split[2]), []) AS decimal_scale_and_precision,
+        multiIf(inner_type = 'Decimal' AND toInt8(decimal_scale_and_precision[1]) <= 65 AND toInt8(decimal_scale_and_precision[2]) <= 30, concat('DECIMAL(', decimal_scale_and_precision[1], ', ', decimal_scale_and_precision[2], ')'),
+                mapContains(native_to_mysql_mapping, inner_type) = true, native_to_mysql_mapping[inner_type],
+                'TEXT') AS mysql_type
+            )";
+    }
 
     rewritten_query += R"(
 SELECT
