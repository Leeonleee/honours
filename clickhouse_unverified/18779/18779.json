{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 18779,
  "instance_id": "ClickHouse__ClickHouse-18779",
  "issue_numbers": [
    "18701"
  ],
  "base_commit": "d76c05e1345741a1be8ba158370b5c1ee092c14f",
  "patch": "diff --git a/src/Parsers/ExpressionElementParsers.cpp b/src/Parsers/ExpressionElementParsers.cpp\nindex 7c82c4aca1ee..ff7c4d2d53e7 100644\n--- a/src/Parsers/ExpressionElementParsers.cpp\n+++ b/src/Parsers/ExpressionElementParsers.cpp\n@@ -343,6 +343,26 @@ bool ParserFunction::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)\n         throw Exception(\"Argument of function toDate is unquoted: toDate(\" + contents_str + \"), must be: toDate('\" + contents_str + \"')\"\n             , ErrorCodes::SYNTAX_ERROR);\n     }\n+    else if (Poco::toLower(getIdentifierName(identifier)) == \"position\")\n+    {\n+        /// POSITION(needle IN haystack) is equivalent to function position(haystack, needle)\n+        if (const auto * list = expr_list_args->as<ASTExpressionList>())\n+        {\n+            if (list->children.size() == 1)\n+            {\n+                if (const auto * in_func = list->children[0]->as<ASTFunction>())\n+                {\n+                    if (in_func->name == \"in\")\n+                    {\n+                        // switch the two arguments\n+                        const auto & arg_list = in_func->arguments->as<ASTExpressionList &>();\n+                        if (arg_list.children.size() == 2)\n+                            expr_list_args->children = {arg_list.children[1], arg_list.children[0]};\n+                    }\n+                }\n+            }\n+        }\n+    }\n \n     /// The parametric aggregate function has two lists (parameters and arguments) in parentheses. Example: quantile(0.9)(x).\n     if (allow_function_parameters && pos->type == TokenType::OpeningRoundBracket)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00233_position_function_sql_comparibilty.reference b/tests/queries/0_stateless/00233_position_function_sql_comparibilty.reference\nnew file mode 100644\nindex 000000000000..71c9a23879ff\n--- /dev/null\n+++ b/tests/queries/0_stateless/00233_position_function_sql_comparibilty.reference\n@@ -0,0 +1,13 @@\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\ndiff --git a/tests/queries/0_stateless/00233_position_function_sql_comparibilty.sql b/tests/queries/0_stateless/00233_position_function_sql_comparibilty.sql\nnew file mode 100644\nindex 000000000000..ae9409cd0c08\n--- /dev/null\n+++ b/tests/queries/0_stateless/00233_position_function_sql_comparibilty.sql\n@@ -0,0 +1,16 @@\n+SET send_logs_level = 'fatal';\n+select 1 = position('' in '');\n+select 1 = position('' in 'abc');\n+select 0 = position('abc' in '');\n+select 1 = position('abc' in 'abc');\n+select 2 = position('bc' in 'abc');\n+select 3 = position('c' in 'abc');\n+\n+select 1 = position('' in '');\n+select 1 = position('' in '\u0430\u0431\u0432');\n+select 0 = position('\u0430\u0431\u0432' in '');\n+select 1 = position('\u0430\u0431\u0432' in '\u0430\u0431\u0432');\n+select 3 = position('\u0431\u0432' in '\u0430\u0431\u0432');\n+select 5 = position('\u0432' in '\u0430\u0431\u0432');\n+\n+select 6 = position('/' IN s) FROM (SELECT 'Hello/World' AS s);\n",
  "problem_statement": "SQL compatibility: provide POSITION(needle IN haystack) syntax.\n**Use case**\r\n`SELECT POSITION('/' IN s) FROM (SELECT 'Hello/World' AS s);`\r\n\r\nThe same as `position(s, '/')`\r\n\n",
  "hints_text": "Please assign this to me if it's ok.\n@alexey-milovidov  could we have a robot that automatically assign issue to user by the command `/assign`.\r\n`prow` is a good way to have.\r\n\r\nhttps://github.com/kubernetes/test-infra/blob/2abb7ff265/prow/plugins/approve/approvers/README.md\nEg:\r\n\r\n![image](https://user-images.githubusercontent.com/3325189/103642631-672ec200-4f8e-11eb-90e5-02b1eaa49619.png)\r\n\n@zhangjmruc Great, it's yours :+1: \r\n\r\n@sundy-li Yes, it will be very convenient. I will look at this bot.",
  "created_at": "2021-01-06T03:31:32Z"
}