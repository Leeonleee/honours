{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 10130,
  "instance_id": "ClickHouse__ClickHouse-10130",
  "issue_numbers": [
    "10106"
  ],
  "base_commit": "25eae6abe035bda78634f17d15c9f05348d97aad",
  "patch": "diff --git a/src/Storages/MergeTree/IMergeTreeDataPartWriter.h b/src/Storages/MergeTree/IMergeTreeDataPartWriter.h\nindex 4eb842f92794..d18b31edc728 100644\n--- a/src/Storages/MergeTree/IMergeTreeDataPartWriter.h\n+++ b/src/Storages/MergeTree/IMergeTreeDataPartWriter.h\n@@ -102,8 +102,7 @@ class IMergeTreeDataPartWriter : private boost::noncopyable\n         written_offset_columns = written_offset_columns_;\n     }\n \n-    using SkipIndices = std::vector<MergeTreeIndexPtr>;\n-    const SkipIndices & getSkipIndices() { return skip_indices; }\n+    const MergeTreeIndices & getSkipIndices() { return skip_indices; }\n \n     void initSkipIndices();\n     void initPrimaryIndex();\n@@ -126,7 +125,7 @@ class IMergeTreeDataPartWriter : private boost::noncopyable\n \n     CompressionCodecPtr default_codec;\n \n-    std::vector<MergeTreeIndexPtr> skip_indices;\n+    MergeTreeIndices skip_indices;\n \n     MergeTreeWriterSettings settings;\n \ndiff --git a/src/Storages/MergeTree/IMergeTreeReader.cpp b/src/Storages/MergeTree/IMergeTreeReader.cpp\nindex 4978aeaaa583..8243983d8371 100644\n--- a/src/Storages/MergeTree/IMergeTreeReader.cpp\n+++ b/src/Storages/MergeTree/IMergeTreeReader.cpp\n@@ -32,6 +32,8 @@ IMergeTreeReader::IMergeTreeReader(const MergeTreeData::DataPartPtr & data_part_\n     , all_mark_ranges(all_mark_ranges_)\n     , alter_conversions(storage.getAlterConversionsForPart(data_part))\n {\n+    for (const NameAndTypePair & column_from_part : data_part->getColumns())\n+        columns_from_part[column_from_part.name] = column_from_part.type;\n }\n \n IMergeTreeReader::~IMergeTreeReader() = default;\n@@ -183,6 +185,23 @@ void IMergeTreeReader::evaluateMissingDefaults(Block additional_columns, Columns\n     }\n }\n \n+NameAndTypePair IMergeTreeReader::getColumnFromPart(const NameAndTypePair & required_column) const\n+{\n+    auto it = columns_from_part.find(required_column.name);\n+    if (it != columns_from_part.end())\n+        return {it->first, it->second};\n+\n+    if (alter_conversions.isColumnRenamed(required_column.name))\n+    {\n+        String old_name = alter_conversions.getColumnOldName(required_column.name);\n+        it = columns_from_part.find(old_name);\n+        if (it != columns_from_part.end())\n+            return {it->first, it->second};\n+    }\n+\n+    return required_column;\n+}\n+\n void IMergeTreeReader::performRequiredConversions(Columns & res_columns)\n {\n     try\n@@ -209,10 +228,7 @@ void IMergeTreeReader::performRequiredConversions(Columns & res_columns)\n             if (res_columns[pos] == nullptr)\n                 continue;\n \n-            if (columns_from_part.count(name_and_type->name))\n-                copy_block.insert({res_columns[pos], columns_from_part[name_and_type->name], name_and_type->name});\n-            else\n-                copy_block.insert({res_columns[pos], name_and_type->type, name_and_type->name});\n+            copy_block.insert({res_columns[pos], getColumnFromPart(*name_and_type).type, name_and_type->name});\n         }\n \n         DB::performRequiredConversions(copy_block, columns, storage.global_context);\ndiff --git a/src/Storages/MergeTree/IMergeTreeReader.h b/src/Storages/MergeTree/IMergeTreeReader.h\nindex 622e11dae8b0..02d8f67f9d06 100644\n--- a/src/Storages/MergeTree/IMergeTreeReader.h\n+++ b/src/Storages/MergeTree/IMergeTreeReader.h\n@@ -4,7 +4,6 @@\n #include <Storages/MergeTree/MergeTreeReaderStream.h>\n #include <Storages/MergeTree/MergeTreeBlockReadUtils.h>\n \n-\n namespace DB\n {\n \n@@ -59,6 +58,9 @@ class IMergeTreeReader : private boost::noncopyable\n     MergeTreeData::DataPartPtr data_part;\n \n protected:\n+    /// Returns actual column type in part, which can differ from table metadata.\n+    NameAndTypePair getColumnFromPart(const NameAndTypePair & required_column) const;\n+\n     /// avg_value_size_hints are used to reduce the number of reallocations when creating columns of variable size.\n     ValueSizeMap avg_value_size_hints;\n     /// Stores states for IDataType::deserializeBinaryBulk\n@@ -67,8 +69,6 @@ class IMergeTreeReader : private boost::noncopyable\n     /// Columns that are read.\n     NamesAndTypesList columns;\n \n-    std::unordered_map<String, DataTypePtr> columns_from_part;\n-\n     UncompressedCache * uncompressed_cache;\n     MarkCache * mark_cache;\n \n@@ -78,8 +78,13 @@ class IMergeTreeReader : private boost::noncopyable\n     MarkRanges all_mark_ranges;\n \n     friend class MergeTreeRangeReader::DelayedStream;\n+\n+private:\n     /// Alter conversions, which must be applied on fly if required\n     MergeTreeData::AlterConversions alter_conversions;\n+\n+    /// Actual data type of columns in part\n+    std::unordered_map<String, DataTypePtr> columns_from_part;\n };\n \n }\ndiff --git a/src/Storages/MergeTree/MergeTreeData.h b/src/Storages/MergeTree/MergeTreeData.h\nindex 125a90d26e0a..d299d39726ee 100644\n--- a/src/Storages/MergeTree/MergeTreeData.h\n+++ b/src/Storages/MergeTree/MergeTreeData.h\n@@ -433,11 +433,6 @@ class MergeTreeData : public IStorage\n     DataPartPtr getPartIfExists(const String & part_name, const DataPartStates & valid_states);\n     DataPartPtr getPartIfExists(const MergeTreePartInfo & part_info, const DataPartStates & valid_states);\n \n-    std::vector<MergeTreeIndexPtr> getSkipIndices() const\n-    {\n-        return std::vector<MergeTreeIndexPtr>(std::begin(skip_indices), std::end(skip_indices));\n-    }\n-\n     /// Total size of active parts in bytes.\n     size_t getTotalActiveSizeInBytes() const;\n \ndiff --git a/src/Storages/MergeTree/MergeTreeDataMergerMutator.cpp b/src/Storages/MergeTree/MergeTreeDataMergerMutator.cpp\nindex 2b732d879b03..c10a6c6dd59d 100644\n--- a/src/Storages/MergeTree/MergeTreeDataMergerMutator.cpp\n+++ b/src/Storages/MergeTree/MergeTreeDataMergerMutator.cpp\n@@ -773,6 +773,7 @@ MergeTreeData::MutableDataPartPtr MergeTreeDataMergerMutator::mergePartsToTempor\n     MergedBlockOutputStream to{\n         new_data_part,\n         merging_columns,\n+        data.skip_indices,\n         compression_codec,\n         merged_column_to_size,\n         data_settings->min_merge_bytes_to_use_direct_io,\n@@ -991,7 +992,6 @@ MergeTreeData::MutableDataPartPtr MergeTreeDataMergerMutator::mutatePartToTempor\n \n     splitMutationCommands(source_part, commands_for_part, for_interpreter, for_file_renames);\n \n-\n     UInt64 watch_prev_elapsed = 0;\n     MergeStageProgress stage_progress(1.0);\n \n@@ -1043,8 +1043,10 @@ MergeTreeData::MutableDataPartPtr MergeTreeDataMergerMutator::mutatePartToTempor\n     /// All columns from part are changed and may be some more that were missing before in part\n     if (isCompactPart(source_part) || source_part->getColumns().isSubsetOf(updated_header.getNamesAndTypesList()))\n     {\n+        auto part_indices = getIndicesForNewDataPart(data.skip_indices, for_file_renames);\n         mutateAllPartColumns(\n             new_data_part,\n+            part_indices,\n             in,\n             time_of_mutation,\n             compression_codec,\n@@ -1260,6 +1262,7 @@ void MergeTreeDataMergerMutator::splitMutationCommands(\n         else if (is_compact_part && command.type == MutationCommand::Type::DROP_COLUMN)\n         {\n             removed_columns_from_compact_part.emplace(command.column_name);\n+            for_file_renames.push_back(command);\n         }\n         else if (command.type == MutationCommand::Type::RENAME_COLUMN)\n         {\n@@ -1439,6 +1442,22 @@ NamesAndTypesList MergeTreeDataMergerMutator::getColumnsForNewDataPart(\n     return all_columns;\n }\n \n+MergeTreeIndices MergeTreeDataMergerMutator::getIndicesForNewDataPart(\n+    const MergeTreeIndices & all_indices,\n+    const MutationCommands & commands_for_removes)\n+{\n+    NameSet removed_indices;\n+    for (const auto & command : commands_for_removes)\n+        if (command.type == MutationCommand::DROP_INDEX)\n+            removed_indices.insert(command.column_name);\n+\n+    MergeTreeIndices new_indices;\n+    for (const auto & index : all_indices)\n+        if (!removed_indices.count(index->name))\n+            new_indices.push_back(index);\n+\n+    return new_indices;\n+}\n \n std::set<MergeTreeIndexPtr> MergeTreeDataMergerMutator::getIndicesToRecalculate(\n     BlockInputStreamPtr & input_stream,\n@@ -1503,6 +1522,7 @@ bool MergeTreeDataMergerMutator::shouldExecuteTTL(const Names & columns, const M\n \n void MergeTreeDataMergerMutator::mutateAllPartColumns(\n     MergeTreeData::MutableDataPartPtr new_data_part,\n+    const MergeTreeIndices & skip_indices,\n     BlockInputStreamPtr mutating_stream,\n     time_t time_of_mutation,\n     const CompressionCodecPtr & compression_codec,\n@@ -1524,6 +1544,7 @@ void MergeTreeDataMergerMutator::mutateAllPartColumns(\n     MergedBlockOutputStream out{\n         new_data_part,\n         new_data_part->getColumns(),\n+        skip_indices,\n         compression_codec};\n \n     mutating_stream->readPrefix();\n@@ -1560,7 +1581,6 @@ void MergeTreeDataMergerMutator::mutateSomePartColumns(\n     if (mutating_stream == nullptr)\n         throw Exception(\"Cannot mutate part columns with uninitialized mutations stream. It's a bug\", ErrorCodes::LOGICAL_ERROR);\n \n-\n     if (need_remove_expired_values)\n         mutating_stream = std::make_shared<TTLBlockInputStream>(mutating_stream, data, new_data_part, time_of_mutation, true);\n \ndiff --git a/src/Storages/MergeTree/MergeTreeDataMergerMutator.h b/src/Storages/MergeTree/MergeTreeDataMergerMutator.h\nindex b24b56a4780b..6f4f8a03e9aa 100644\n--- a/src/Storages/MergeTree/MergeTreeDataMergerMutator.h\n+++ b/src/Storages/MergeTree/MergeTreeDataMergerMutator.h\n@@ -160,6 +160,11 @@ class MergeTreeDataMergerMutator\n         NamesAndTypesList all_columns,\n         const MutationCommands & commands_for_removes);\n \n+    /// Get skip indcies, that should exists in the resulting data part.\n+    static MergeTreeIndices getIndicesForNewDataPart(\n+        const MergeTreeIndices & all_indices,\n+        const MutationCommands & commands_for_removes);\n+\n     bool shouldExecuteTTL(const Names & columns, const MutationCommands & commands) const;\n \n     /// Return set of indices which should be recalculated during mutation also\n@@ -173,6 +178,7 @@ class MergeTreeDataMergerMutator\n     /// Override all columns of new part using mutating_stream\n     void mutateAllPartColumns(\n         MergeTreeData::MutableDataPartPtr new_data_part,\n+        const MergeTreeIndices & skip_indices,\n         BlockInputStreamPtr mutating_stream,\n         time_t time_of_mutation,\n         const CompressionCodecPtr & codec,\ndiff --git a/src/Storages/MergeTree/MergeTreeDataWriter.cpp b/src/Storages/MergeTree/MergeTreeDataWriter.cpp\nindex c560583259c6..34c615994f09 100644\n--- a/src/Storages/MergeTree/MergeTreeDataWriter.cpp\n+++ b/src/Storages/MergeTree/MergeTreeDataWriter.cpp\n@@ -294,7 +294,7 @@ MergeTreeData::MutableDataPartPtr MergeTreeDataWriter::writeTempPart(BlockWithPa\n     ///  either default lz4 or compression method with zero thresholds on absolute and relative part size.\n     auto compression_codec = data.global_context.chooseCompressionCodec(0, 0);\n \n-    MergedBlockOutputStream out(new_data_part, columns, compression_codec);\n+    MergedBlockOutputStream out(new_data_part, columns, data.skip_indices, compression_codec);\n \n     out.writePrefix();\n     out.writeWithPermutation(block, perm_ptr);\ndiff --git a/src/Storages/MergeTree/MergeTreeIndices.h b/src/Storages/MergeTree/MergeTreeIndices.h\nindex 007851f2912e..d871a522e6c3 100644\n--- a/src/Storages/MergeTree/MergeTreeIndices.h\n+++ b/src/Storages/MergeTree/MergeTreeIndices.h\n@@ -125,7 +125,7 @@ class IMergeTreeIndex\n     size_t granularity;\n };\n \n-using MergeTreeIndices = std::vector<MutableMergeTreeIndexPtr>;\n+using MergeTreeIndices = std::vector<MergeTreeIndexPtr>;\n \n \n class MergeTreeIndexFactory : private boost::noncopyable\ndiff --git a/src/Storages/MergeTree/MergeTreeReaderCompact.cpp b/src/Storages/MergeTree/MergeTreeReaderCompact.cpp\nindex e4f7275f4a5c..a895149e12e3 100644\n--- a/src/Storages/MergeTree/MergeTreeReaderCompact.cpp\n+++ b/src/Storages/MergeTree/MergeTreeReaderCompact.cpp\n@@ -78,15 +78,9 @@ MergeTreeReaderCompact::MergeTreeReaderCompact(\n     auto name_and_type = columns.begin();\n     for (size_t i = 0; i < columns_num; ++i, ++name_and_type)\n     {\n-        const auto & [name, type] = *name_and_type;\n+        const auto & [name, type] = getColumnFromPart(*name_and_type);\n         auto position = data_part->getColumnPosition(name);\n \n-        if (!position && alter_conversions.isColumnRenamed(name))\n-        {\n-            String old_name = alter_conversions.getColumnOldName(name);\n-            position = data_part->getColumnPosition(old_name);\n-        }\n-\n         if (!position && typeid_cast<const DataTypeArray *>(type.get()))\n         {\n             /// If array of Nested column is missing in part,\n@@ -118,7 +112,7 @@ size_t MergeTreeReaderCompact::readRows(size_t from_mark, bool continue_reading,\n \n         bool append = res_columns[i] != nullptr;\n         if (!append)\n-            res_columns[i] = column_it->type->createColumn();\n+            res_columns[i] = getColumnFromPart(*column_it).type->createColumn();\n         mutable_columns[i] = res_columns[i]->assumeMutable();\n     }\n \n@@ -132,15 +126,7 @@ size_t MergeTreeReaderCompact::readRows(size_t from_mark, bool continue_reading,\n             if (!res_columns[pos])\n                 continue;\n \n-            auto [name, type] = *name_and_type;\n-\n-            if (alter_conversions.isColumnRenamed(name))\n-            {\n-                String old_name = alter_conversions.getColumnOldName(name);\n-                if (!data_part->getColumnPosition(name) && data_part->getColumnPosition(old_name))\n-                    name = old_name;\n-            }\n-\n+            auto [name, type] = getColumnFromPart(*name_and_type);\n             auto & column = mutable_columns[pos];\n \n             try\ndiff --git a/src/Storages/MergeTree/MergeTreeReaderWide.cpp b/src/Storages/MergeTree/MergeTreeReaderWide.cpp\nindex ad676b4db037..1a03acb5758c 100644\n--- a/src/Storages/MergeTree/MergeTreeReaderWide.cpp\n+++ b/src/Storages/MergeTree/MergeTreeReaderWide.cpp\n@@ -41,28 +41,10 @@ MergeTreeReaderWide::MergeTreeReaderWide(\n {\n     try\n     {\n-        for (const NameAndTypePair & column_from_part : data_part->getColumns())\n-            columns_from_part[column_from_part.name] = column_from_part.type;\n-\n         for (const NameAndTypePair & column : columns)\n         {\n-            if (columns_from_part.count(column.name))\n-            {\n-                addStreams(column.name, *columns_from_part[column.name], profile_callback_, clock_type_);\n-            }\n-            else\n-            {\n-                if (alter_conversions.isColumnRenamed(column.name))\n-                {\n-                    String old_name = alter_conversions.getColumnOldName(column.name);\n-                    if (columns_from_part.count(old_name))\n-                        addStreams(old_name, *columns_from_part[old_name], profile_callback_, clock_type_);\n-                }\n-                else\n-                {\n-                    addStreams(column.name, *column.type, profile_callback_, clock_type_);\n-                }\n-            }\n+            auto column_from_part = getColumnFromPart(column);\n+            addStreams(column_from_part.name, *column_from_part.type, profile_callback_, clock_type_);\n         }\n     }\n     catch (...)\n@@ -93,19 +75,7 @@ size_t MergeTreeReaderWide::readRows(size_t from_mark, bool continue_reading, si\n         auto name_and_type = columns.begin();\n         for (size_t pos = 0; pos < num_columns; ++pos, ++name_and_type)\n         {\n-            String name = name_and_type->name;\n-            if (alter_conversions.isColumnRenamed(name))\n-            {\n-                String original_name = alter_conversions.getColumnOldName(name);\n-                if (!columns_from_part.count(name) && columns_from_part.count(original_name))\n-                    name = original_name;\n-            }\n-\n-            DataTypePtr type;\n-            if (columns_from_part.count(name))\n-                type = columns_from_part[name];\n-            else\n-                type = name_and_type->type;\n+            auto [name, type] = getColumnFromPart(*name_and_type);\n \n             /// The column is already present in the block so we will append the values to the end.\n             bool append = res_columns[pos] != nullptr;\ndiff --git a/src/Storages/MergeTree/MergedBlockOutputStream.cpp b/src/Storages/MergeTree/MergedBlockOutputStream.cpp\nindex 221170b7a326..2b482ac7c294 100644\n--- a/src/Storages/MergeTree/MergedBlockOutputStream.cpp\n+++ b/src/Storages/MergeTree/MergedBlockOutputStream.cpp\n@@ -15,10 +15,11 @@ namespace ErrorCodes\n MergedBlockOutputStream::MergedBlockOutputStream(\n     const MergeTreeDataPartPtr & data_part,\n     const NamesAndTypesList & columns_list_,\n+    const MergeTreeIndices & skip_indices,\n     CompressionCodecPtr default_codec,\n     bool blocks_are_granules_size)\n     : MergedBlockOutputStream(\n-        data_part, columns_list_, default_codec, {},\n+        data_part, columns_list_, skip_indices, default_codec, {},\n         data_part->storage.global_context.getSettings().min_bytes_to_use_direct_io,\n         blocks_are_granules_size)\n {\n@@ -27,6 +28,7 @@ MergedBlockOutputStream::MergedBlockOutputStream(\n MergedBlockOutputStream::MergedBlockOutputStream(\n     const MergeTreeDataPartPtr & data_part,\n     const NamesAndTypesList & columns_list_,\n+    const MergeTreeIndices & skip_indices,\n     CompressionCodecPtr default_codec,\n     const MergeTreeData::DataPart::ColumnToSize & merged_column_to_size,\n     size_t aio_threshold,\n@@ -49,7 +51,7 @@ MergedBlockOutputStream::MergedBlockOutputStream(\n \n     disk->createDirectories(part_path);\n \n-    writer = data_part->getWriter(columns_list, data_part->storage.getSkipIndices(), default_codec, writer_settings);\n+    writer = data_part->getWriter(columns_list, skip_indices, default_codec, writer_settings);\n     writer->initPrimaryIndex();\n     writer->initSkipIndices();\n }\ndiff --git a/src/Storages/MergeTree/MergedBlockOutputStream.h b/src/Storages/MergeTree/MergedBlockOutputStream.h\nindex ee453f41a315..5a92977640ed 100644\n--- a/src/Storages/MergeTree/MergedBlockOutputStream.h\n+++ b/src/Storages/MergeTree/MergedBlockOutputStream.h\n@@ -16,12 +16,14 @@ class MergedBlockOutputStream final : public IMergedBlockOutputStream\n     MergedBlockOutputStream(\n         const MergeTreeDataPartPtr & data_part,\n         const NamesAndTypesList & columns_list_,\n+        const MergeTreeIndices & skip_indices,\n         CompressionCodecPtr default_codec,\n         bool blocks_are_granules_size = false);\n \n     MergedBlockOutputStream(\n         const MergeTreeDataPartPtr & data_part,\n         const NamesAndTypesList & columns_list_,\n+        const MergeTreeIndices & skip_indices,\n         CompressionCodecPtr default_codec,\n         const MergeTreeData::DataPart::ColumnToSize & merged_column_to_size,\n         size_t aio_threshold,\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01114_alter_modify_compact_parts.reference b/tests/queries/0_stateless/01114_alter_modify_compact_parts.reference\nnew file mode 100644\nindex 000000000000..4ec38dfb4751\n--- /dev/null\n+++ b/tests/queries/0_stateless/01114_alter_modify_compact_parts.reference\n@@ -0,0 +1,1 @@\n+999000\ndiff --git a/tests/queries/0_stateless/01114_alter_modify_compact_parts.sql b/tests/queries/0_stateless/01114_alter_modify_compact_parts.sql\nnew file mode 100644\nindex 000000000000..a5aa12548e77\n--- /dev/null\n+++ b/tests/queries/0_stateless/01114_alter_modify_compact_parts.sql\n@@ -0,0 +1,12 @@\n+DROP TABLE IF EXISTS mt_compact;\n+\n+CREATE TABLE mt_compact (d Date, id UInt32, s String)\n+    ENGINE = MergeTree ORDER BY id PARTITION BY d\n+    SETTINGS min_bytes_for_wide_part = 10000000, index_granularity = 128;\n+\n+INSERT INTO mt_compact SELECT toDate('2020-01-05'), number, toString(number) FROM numbers(1000);\n+INSERT INTO mt_compact SELECT toDate('2020-01-06'), number, toString(number) FROM numbers(1000);\n+ALTER TABLE mt_compact MODIFY COLUMN s UInt64;\n+SELECT sum(s) from mt_compact;\n+\n+DROP TABLE IF EXISTS mt_compact;\ndiff --git a/tests/queries/0_stateless/01114_clear_column_compact_parts.reference b/tests/queries/0_stateless/01114_clear_column_compact_parts.reference\nnew file mode 100644\nindex 000000000000..e8c9b37ff3aa\n--- /dev/null\n+++ b/tests/queries/0_stateless/01114_clear_column_compact_parts.reference\n@@ -0,0 +1,4 @@\n+1\t0\n+2\t3\n+1\t0\n+2\t0\ndiff --git a/tests/queries/0_stateless/01114_clear_column_compact_parts.sql b/tests/queries/0_stateless/01114_clear_column_compact_parts.sql\nnew file mode 100644\nindex 000000000000..bdfed06ea9a5\n--- /dev/null\n+++ b/tests/queries/0_stateless/01114_clear_column_compact_parts.sql\n@@ -0,0 +1,11 @@\n+DROP TABLE IF EXISTS clear_column;\n+\n+CREATE TABLE clear_column(x UInt32, y UInt32) ENGINE MergeTree ORDER BY x PARTITION by x;\n+INSERT INTO clear_column VALUES (1, 1), (2, 3);\n+\n+ALTER TABLE clear_column CLEAR COLUMN y IN PARTITION 1;\n+SELECT * FROM clear_column ORDER BY x;\n+ALTER TABLE clear_column CLEAR COLUMN y IN PARTITION 2;\n+SELECT * FROM clear_column ORDER BY x;\n+\n+DROP TABLE clear_column;\ndiff --git a/tests/queries/0_stateless/01114_materialize_clear_index_compact_parts.reference b/tests/queries/0_stateless/01114_materialize_clear_index_compact_parts.reference\nnew file mode 100644\nindex 000000000000..083edaac2489\n--- /dev/null\n+++ b/tests/queries/0_stateless/01114_materialize_clear_index_compact_parts.reference\n@@ -0,0 +1,3 @@\n+2\n+2\n+2\ndiff --git a/tests/queries/0_stateless/01114_materialize_clear_index_compact_parts.sql b/tests/queries/0_stateless/01114_materialize_clear_index_compact_parts.sql\nnew file mode 100644\nindex 000000000000..404922f36bb1\n--- /dev/null\n+++ b/tests/queries/0_stateless/01114_materialize_clear_index_compact_parts.sql\n@@ -0,0 +1,32 @@\n+DROP TABLE IF EXISTS minmax_compact;\n+\n+CREATE TABLE minmax_compact\n+(\n+    u64 UInt64,\n+    i64 Int64,\n+    i32 Int32\n+) ENGINE = MergeTree()\n+PARTITION BY i32\n+ORDER BY u64\n+SETTINGS index_granularity = 2, min_rows_for_wide_part = 1000000;\n+\n+INSERT INTO minmax_compact VALUES (0, 2, 1), (1, 1, 1), (2, 1, 1), (3, 1, 1), (4, 1, 1), (5, 2, 1), (6, 1, 2), (7, 1, 2), (8, 1, 2), (9, 1, 2);\n+\n+SET mutations_sync = 1;\n+ALTER TABLE minmax_compact ADD INDEX idx (i64, u64 * i64) TYPE minmax GRANULARITY 1;\n+\n+ALTER TABLE minmax_compact MATERIALIZE INDEX idx IN PARTITION 1;\n+set max_rows_to_read = 8;\n+SELECT count() FROM minmax_compact WHERE i64 = 2;\n+\n+ALTER TABLE minmax_compact MATERIALIZE INDEX idx IN PARTITION 2;\n+set max_rows_to_read = 6;\n+SELECT count() FROM minmax_compact WHERE i64 = 2;\n+\n+ALTER TABLE minmax_compact CLEAR INDEX idx IN PARTITION 1;\n+ALTER TABLE minmax_compact CLEAR INDEX idx IN PARTITION 2;\n+\n+SELECT count() FROM minmax_compact WHERE i64 = 2; -- { serverError 158 }\n+\n+set max_rows_to_read = 10;\n+SELECT count() FROM minmax_compact WHERE i64 = 2;\n",
  "problem_statement": "ALTER MODIFY COLUMN is broken with compact parts.\n**How to reproduce**\r\nRun test 01062_alter_on_mutataion for example.\r\n\r\n**Error message and/or stacktrace**\r\n```\r\n2020.04.08 03:30:55.604922 [ 31201 ] {} <Error> void DB::BackgroundProcessingPool::threadFunction(): Code: 33, e.displayText() = DB::Exception: Cannot read all data in MergeTreeReaderCompact. Rows read: 36. Rows expected: 100.: (while reading column value), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. /home/ap11/ClickHouse/build_gcc/../contrib/poco/Foundation/src/Exception.cpp:27: Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0xbf674ec in /home/ap11/ClickHouse/build_gcc/programs/clickhouse\r\n1. /home/ap11/ClickHouse/build_gcc/../src/Common/Exception.cpp:29: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x4fe0139 in /home/ap11/ClickHouse/build_gcc/programs/clickhouse\r\n2. /home/ap11/ClickHouse/build_gcc/../contrib/libcxx/include/string:2134: DB::MergeTreeReaderCompact::readRows(unsigned long, bool, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > >&) (.cold) @ 0x4c8eb75 in /home/ap11/ClickHouse/build_gcc/programs/clickhouse\r\n3. /home/ap11/ClickHouse/build_gcc/../src/Storages/MergeTree/MergeTreeRangeReader.cpp:57: DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > >&) @ 0x99deafe in /home/ap11/ClickHouse/build_gcc/programs/clickhouse\r\n4. /home/ap11/ClickHouse/build_gcc/../src/Storages/MergeTree/MergeTreeRangeReader.cpp:242: DB::MergeTreeRangeReader::startReadingChain(unsigned long, std::__1::deque<DB::MarkRange, std::__1::allocator<DB::MarkRange> >&) @ 0x99df7c4 in /home/ap11/ClickHouse/build_gcc/programs/clickhouse\r\n5. /home/ap11/ClickHouse/build_gcc/../src/Storages/MergeTree/MergeTreeRangeReader.cpp:672: DB::MergeTreeRangeReader::read(unsigned long, std::__1::deque<DB::MarkRange, std::__1::allocator<DB::MarkRange> >&) @ 0x99e17ae in /home/ap11/ClickHouse/build_gcc/programs/clickhouse\r\n6. /home/ap11/ClickHouse/build_gcc/../src/Storages/MergeTree/MergeTreeBaseSelectProcessor.cpp:148: DB::MergeTreeBaseSelectProcessor::readFromPartImpl() @ 0x99a1209 in /home/ap11/ClickHouse/build_gcc/programs/clickhouse\r\n7. /home/ap11/ClickHouse/build_gcc/../src/Storages/MergeTree/MergeTreeBaseSelectProcessor.cpp:58: DB::MergeTreeBaseSelectProcessor::generate() @ 0x99a1d23 in /home/ap11/ClickHouse/build_gcc/programs/clickhouse\r\n8. /home/ap11/ClickHouse/build_gcc/../contrib/libcxx/include/vector:1003: DB::ISource::work() @ 0x9323577 in /home/ap11/ClickHouse/build_gcc/programs/clickhouse\r\n9. /home/ap11/ClickHouse/build_gcc/../src/Processors/Sources/SourceWithProgress.cpp:25: DB::SourceWithProgress::work() @ 0x95f749f in /home/ap11/ClickHouse/build_gcc/programs/clickhouse\r\n10. /home/ap11/ClickHouse/build_gcc/../src/Processors/Executors/TreeExecutorBlockInputStream.cpp:194: DB::TreeExecutorBlockInputStream::execute(bool) @ 0x935a4c2 in /home/ap11/ClickHouse/build_gcc/programs/clickhouse\r\n11. /home/ap11/ClickHouse/build_gcc/../contrib/libcxx/include/memory:2587: DB::TreeExecutorBlockInputStream::readImpl() @ 0x935a795 in /home/ap11/ClickHouse/build_gcc/programs/clickhouse\r\n12. /home/ap11/ClickHouse/build_gcc/../contrib/libcxx/include/vector:1003: DB::IBlockInputStream::read() @ 0x8b3f5bf in /home/ap11/ClickHouse/build_gcc/programs/clickhouse\r\n13. /home/ap11/ClickHouse/build_gcc/../contrib/libcxx/include/vector:656: DB::ExpressionBlockInputStream::readImpl() @ 0x968e4b6 in /home/ap11/ClickHouse/build_gcc/programs/clickhouse\r\n14. /home/ap11/ClickHouse/build_gcc/../contrib/libcxx/include/vector:1003: DB::IBlockInputStream::read() @ 0x8b3f5bf in /home/ap11/ClickHouse/build_gcc/programs/clickhouse\r\n15. /home/ap11/ClickHouse/build_gcc/../contrib/libcxx/include/vector:656: DB::ExpressionBlockInputStream::readImpl() @ 0x968e4b6 in /home/ap11/ClickHouse/build_gcc/programs/clickhouse\r\n16. /home/ap11/ClickHouse/build_gcc/../contrib/libcxx/include/vector:1003: DB::IBlockInputStream::read() @ 0x8b3f5bf in /home/ap11/ClickHouse/build_gcc/programs/clickhouse\r\n17. /home/ap11/ClickHouse/build_gcc/../contrib/libcxx/include/vector:656: DB::ExpressionBlockInputStream::readImpl() @ 0x968e4b6 in /home/ap11/ClickHouse/build_gcc/programs/clickhouse\r\n18. /home/ap11/ClickHouse/build_gcc/../contrib/libcxx/include/vector:1003: DB::IBlockInputStream::read() @ 0x8b3f5bf in /home/ap11/ClickHouse/build_gcc/programs/clickhouse\r\n19. /home/ap11/ClickHouse/build_gcc/../contrib/libcxx/include/vector:656: DB::ExpressionBlockInputStream::readImpl() @ 0x968e4b6 in /home/ap11/ClickHouse/build_gcc/programs/clickhouse\r\n20. /home/ap11/ClickHouse/build_gcc/../contrib/libcxx/include/vector:1003: DB::IBlockInputStream::read() @ 0x8b3f5bf in /home/ap11/ClickHouse/build_gcc/programs/clickhouse\r\n21. /home/ap11/ClickHouse/build_gcc/../contrib/libcxx/include/vector:656: DB::ExpressionBlockInputStream::readImpl() @ 0x968e4b6 in /home/ap11/ClickHouse/build_gcc/programs/clickhouse\r\n22. /home/ap11/ClickHouse/build_gcc/../contrib/libcxx/include/vector:1003: DB::IBlockInputStream::read() @ 0x8b3f5bf in /home/ap11/ClickHouse/build_gcc/programs/clickhouse\r\n23. /home/ap11/ClickHouse/build_gcc/../contrib/libcxx/include/vector:656: DB::ExpressionBlockInputStream::readImpl() @ 0x968e4b6 in /home/ap11/ClickHouse/build_gcc/programs/clickhouse\r\n24. /home/ap11/ClickHouse/build_gcc/../contrib/libcxx/include/vector:1003: DB::IBlockInputStream::read() @ 0x8b3f5bf in /home/ap11/ClickHouse/build_gcc/programs/clickhouse\r\n25. /home/ap11/ClickHouse/build_gcc/../contrib/libcxx/include/vector:656: DB::ExpressionBlockInputStream::readImpl() @ 0x968e4b6 in /home/ap11/ClickHouse/build_gcc/programs/clickhouse\r\n26. /home/ap11/ClickHouse/build_gcc/../contrib/libcxx/include/vector:1003: DB::IBlockInputStream::read() @ 0x8b3f5bf in /home/ap11/ClickHouse/build_gcc/programs/clickhouse\r\n27. /home/ap11/ClickHouse/build_gcc/../contrib/libcxx/include/vector:656: DB::ExpressionBlockInputStream::readImpl() @ 0x968e4b6 in /home/ap11/ClickHouse/build_gcc/programs/clickhouse\r\n28. /home/ap11/ClickHouse/build_gcc/../contrib/libcxx/include/vector:1003: DB::IBlockInputStream::read() @ 0x8b3f5bf in /home/ap11/ClickHouse/build_gcc/programs/clickhouse\r\n29. /home/ap11/ClickHouse/build_gcc/../src/DataStreams/MaterializingBlockInputStream.cpp:25: DB::MaterializingBlockInputStream::readImpl() @ 0x96b28b3 in /home/ap11/ClickHouse/build_gcc/programs/clickhouse\r\n30. /home/ap11/ClickHouse/build_gcc/../contrib/libcxx/include/vector:1003: DB::IBlockInputStream::read() @ 0x8b3f5bf in /home/ap11/ClickHouse/build_gcc/programs/clickhouse\r\n31. /home/ap11/ClickHouse/build_gcc/../src/DataStreams/CheckSortedBlockInputStream.cpp:68: DB::CheckSortedBlockInputStream::readImpl() @ 0x9a486a1 in /home/ap11/ClickHouse/build_gcc/programs/clickhouse\r\n (version 20.4.1.1)\r\n```\n",
  "hints_text": "",
  "created_at": "2020-04-08T16:37:46Z"
}