{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 22998,
  "instance_id": "ClickHouse__ClickHouse-22998",
  "issue_numbers": [
    "22989"
  ],
  "base_commit": "fafe8c00fe53559eb28d9a1392e8b45c3600e30b",
  "patch": "diff --git a/src/Storages/StorageMerge.cpp b/src/Storages/StorageMerge.cpp\nindex 041994103f97..6ad7b0bce6e4 100644\n--- a/src/Storages/StorageMerge.cpp\n+++ b/src/Storages/StorageMerge.cpp\n@@ -159,8 +159,7 @@ bool StorageMerge::isRemote() const\n bool StorageMerge::mayBenefitFromIndexForIn(const ASTPtr & left_in_operand, ContextPtr query_context, const StorageMetadataPtr & /*metadata_snapshot*/) const\n {\n     /// It's beneficial if it is true for at least one table.\n-    StorageListWithLocks selected_tables = getSelectedTables(\n-            query_context->getCurrentQueryId(), query_context->getSettingsRef());\n+    StorageListWithLocks selected_tables = getSelectedTables(query_context);\n \n     size_t i = 0;\n     for (const auto & table : selected_tables)\n@@ -250,8 +249,7 @@ Pipe StorageMerge::read(\n     /** First we make list of selected tables to find out its size.\n       * This is necessary to correctly pass the recommended number of threads to each table.\n       */\n-    StorageListWithLocks selected_tables\n-        = getSelectedTables(query_info, has_table_virtual_column, local_context->getCurrentQueryId(), local_context->getSettingsRef());\n+    StorageListWithLocks selected_tables = getSelectedTables(local_context, query_info.query, has_table_virtual_column);\n \n     if (selected_tables.empty())\n         /// FIXME: do we support sampling in this case?\n@@ -427,34 +425,20 @@ Pipe StorageMerge::createSources(\n     return pipe;\n }\n \n-\n-StorageMerge::StorageListWithLocks StorageMerge::getSelectedTables(const String & query_id, const Settings & settings) const\n-{\n-    StorageListWithLocks selected_tables;\n-    auto iterator = getDatabaseIterator(getContext());\n-\n-    while (iterator->isValid())\n-    {\n-        const auto & table = iterator->table();\n-        if (table && table.get() != this)\n-            selected_tables.emplace_back(\n-                    table, table->lockForShare(query_id, settings.lock_acquire_timeout), iterator->name());\n-\n-        iterator->next();\n-    }\n-\n-    return selected_tables;\n-}\n-\n-\n StorageMerge::StorageListWithLocks StorageMerge::getSelectedTables(\n-        const SelectQueryInfo & query_info, bool has_virtual_column, const String & query_id, const Settings & settings) const\n+        ContextPtr query_context,\n+        const ASTPtr & query /* = nullptr */,\n+        bool filter_by_virtual_column /* = false */) const\n {\n-    const ASTPtr & query = query_info.query;\n+    assert(!filter_by_virtual_column || query);\n+\n+    const Settings & settings = query_context->getSettingsRef();\n     StorageListWithLocks selected_tables;\n     DatabaseTablesIteratorPtr iterator = getDatabaseIterator(getContext());\n \n-    auto virtual_column = ColumnString::create();\n+    MutableColumnPtr table_name_virtual_column;\n+    if (filter_by_virtual_column)\n+        table_name_virtual_column = ColumnString::create();\n \n     while (iterator->isValid())\n     {\n@@ -467,18 +451,20 @@ StorageMerge::StorageListWithLocks StorageMerge::getSelectedTables(\n \n         if (storage.get() != this)\n         {\n-            selected_tables.emplace_back(\n-                    storage, storage->lockForShare(query_id, settings.lock_acquire_timeout), iterator->name());\n-            virtual_column->insert(iterator->name());\n+            auto table_lock = storage->lockForShare(query_context->getCurrentQueryId(), settings.lock_acquire_timeout);\n+            selected_tables.emplace_back(storage, std::move(table_lock), iterator->name());\n+            if (filter_by_virtual_column)\n+                table_name_virtual_column->insert(iterator->name());\n         }\n \n         iterator->next();\n     }\n \n-    if (has_virtual_column)\n+    if (filter_by_virtual_column)\n     {\n-        Block virtual_columns_block = Block{ColumnWithTypeAndName(std::move(virtual_column), std::make_shared<DataTypeString>(), \"_table\")};\n-        VirtualColumnUtils::filterBlockWithQuery(query_info.query, virtual_columns_block, getContext());\n+        /// Filter names of selected tables if there is a condition on \"_table\" virtual column in WHERE clause\n+        Block virtual_columns_block = Block{ColumnWithTypeAndName(std::move(table_name_virtual_column), std::make_shared<DataTypeString>(), \"_table\")};\n+        VirtualColumnUtils::filterBlockWithQuery(query, virtual_columns_block, query_context);\n         auto values = VirtualColumnUtils::extractSingleValueFromBlock<String>(virtual_columns_block, \"_table\");\n \n         /// Remove unused tables from the list\n@@ -488,7 +474,6 @@ StorageMerge::StorageListWithLocks StorageMerge::getSelectedTables(\n     return selected_tables;\n }\n \n-\n DatabaseTablesIteratorPtr StorageMerge::getDatabaseIterator(ContextPtr local_context) const\n {\n     try\ndiff --git a/src/Storages/StorageMerge.h b/src/Storages/StorageMerge.h\nindex a1d5c7fd02d2..ff016952686e 100644\n--- a/src/Storages/StorageMerge.h\n+++ b/src/Storages/StorageMerge.h\n@@ -55,10 +55,8 @@ class StorageMerge final : public ext::shared_ptr_helper<StorageMerge>, public I\n     using StorageWithLockAndName = std::tuple<StoragePtr, TableLockHolder, String>;\n     using StorageListWithLocks = std::list<StorageWithLockAndName>;\n \n-    StorageListWithLocks getSelectedTables(const String & query_id, const Settings & settings) const;\n-\n     StorageMerge::StorageListWithLocks getSelectedTables(\n-        const SelectQueryInfo & query_info, bool has_virtual_column, const String & query_id, const Settings & settings) const;\n+            ContextPtr query_context, const ASTPtr & query = nullptr, bool filter_by_virtual_column = false) const;\n \n     template <typename F>\n     StoragePtr getFirstTable(F && predicate) const;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01151_storage_merge_filter_tables_by_virtual_column.reference b/tests/queries/0_stateless/01151_storage_merge_filter_tables_by_virtual_column.reference\nnew file mode 100644\nindex 000000000000..90755b06aa95\n--- /dev/null\n+++ b/tests/queries/0_stateless/01151_storage_merge_filter_tables_by_virtual_column.reference\n@@ -0,0 +1,7 @@\n+30\t4995\n+20\t4950\n+15\t4700\n+20\t495\n+20\t4545\n+15\t470\n+15\t4520\ndiff --git a/tests/queries/0_stateless/01151_storage_merge_filter_tables_by_virtual_column.sql b/tests/queries/0_stateless/01151_storage_merge_filter_tables_by_virtual_column.sql\nnew file mode 100644\nindex 000000000000..2a2507256543\n--- /dev/null\n+++ b/tests/queries/0_stateless/01151_storage_merge_filter_tables_by_virtual_column.sql\n@@ -0,0 +1,26 @@\n+drop table if exists src_table_1;\n+drop table if exists src_table_2;\n+drop table if exists src_table_3;\n+drop table if exists set;\n+\n+create table src_table_1 (n UInt64) engine=Memory as select * from numbers(10);\n+create table src_table_2 (n UInt64) engine=Log as select number * 10 from numbers(10);\n+create table src_table_3 (n UInt64) engine=MergeTree order by n as select number * 100 from numbers(10);\n+create table set (s String) engine=Set as select arrayJoin(['src_table_1', 'src_table_2']);\n+\n+create temporary table tmp (s String);\n+insert into tmp values ('src_table_1'), ('src_table_3');\n+\n+select count(), sum(n) from merge(currentDatabase(), 'src_table');\n+-- FIXME #21401 select count(), sum(n) from merge(currentDatabase(), 'src_table') where _table = 'src_table_1' or toInt8(substr(_table, 11, 1)) = 2;\n+select count(), sum(n) from merge(currentDatabase(), 'src_table') where _table in ('src_table_2', 'src_table_3');\n+select count(), sum(n) from merge(currentDatabase(), 'src_table') where _table in ('src_table_2', 'src_table_3') and n % 20 = 0;\n+select count(), sum(n) from merge(currentDatabase(), 'src_table') where _table in set;\n+select count(), sum(n) from merge(currentDatabase(), 'src_table') where _table in tmp;\n+select count(), sum(n) from merge(currentDatabase(), 'src_table') where _table in set and n % 2 = 0;\n+select count(), sum(n) from merge(currentDatabase(), 'src_table') where n % 2 = 0 and _table in tmp;\n+\n+drop table src_table_1;\n+drop table src_table_2;\n+drop table src_table_3;\n+drop table set;\n",
  "problem_statement": "Assertion `!isGlobalContext() || getApplicationType() == ApplicationType::LOCAL' failed.\n**Describe the bug**\r\nhttps://clickhouse-test-reports.s3.yandex.net/22945/abab3ba09fddc0c9a4e80f4b6789999606102fad/fuzzer_debug/server.log\r\n\r\n**How to reproduce**\r\n```\r\nSELECT '21474836.48' = _table FROM merge(currentDatabase(), '') WHERE '102.3' IN (_table)\r\n```\r\n\r\n```\r\n2021.04.12 12:58:13.427042 [ 196 ] {} <Fatal> BaseDaemon: 8. ./obj-x86_64-linux-gnu/../src/Interpreters/Context.cpp:2527: DB::Context::resolveStorageIDImpl(DB::StorageID, DB::Context::StorageNamespace, std::__1::optional<DB::Exception>*) const @ 0x1b1143d4 in /workspace/clickhouse\r\n2021.04.12 12:58:14.351346 [ 196 ] {} <Fatal> BaseDaemon: 9. ./obj-x86_64-linux-gnu/../src/Interpreters/Context.cpp:2466: DB::Context::resolveStorageID(DB::StorageID, DB::Context::StorageNamespace) const @ 0x1b113ea8 in /workspace/clickhouse\r\n2021.04.12 12:58:14.955178 [ 196 ] {} <Fatal> BaseDaemon: 10. ./obj-x86_64-linux-gnu/../src/Interpreters/ExpressionAnalyzer.cpp:344: DB::ExpressionAnalyzer::isPlainStorageSetInSubquery(std::__1::shared_ptr<DB::IAST> const&) @ 0x1b630b1e in /workspace/clickhouse\r\n2021.04.12 12:58:15.554426 [ 196 ] {} <Fatal> BaseDaemon: 11. ./obj-x86_64-linux-gnu/../src/Interpreters/ExpressionAnalyzer.cpp:310: DB::ExpressionAnalyzer::tryMakeSetForIndexFromSubquery(std::__1::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&) @ 0x1b630510 in /workspace/clickhouse\r\n2021.04.12 12:58:15.912327 [ 196 ] {} <Fatal> BaseDaemon: 12. ./obj-x86_64-linux-gnu/../src/Storages/VirtualColumnUtils.cpp:87: DB::(anonymous namespace)::buildSets(std::__1::shared_ptr<DB::IAST> const&, DB::ExpressionAnalyzer&) @ 0x1bfe2860 in /workspace/clickhouse\r\n2021.04.12 12:58:16.267097 [ 196 ] {} <Fatal> BaseDaemon: 13. ./obj-x86_64-linux-gnu/../src/Storages/VirtualColumnUtils.cpp:181: DB::VirtualColumnUtils::filterBlockWithQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Block&, std::__1::shared_ptr<DB::Context>, std::__1::shared_ptr<DB::IAST>) @ 0x1bfe232a in /workspace/clickhouse\r\n2021.04.12 12:58:16.876343 [ 196 ] {} <Fatal> BaseDaemon: 14. ./obj-x86_64-linux-gnu/../src/Storages/StorageMerge.cpp:481: DB::StorageMerge::getSelectedTables(DB::SelectQueryInfo const&, bool, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Settings const&) const @ 0x1be9ece8 in /workspace/clickhouse\r\n2021.04.12 12:58:17.484788 [ 196 ] {} <Fatal> BaseDaemon: 15. ./obj-x86_64-linux-gnu/../src/Storages/StorageMerge.cpp:254: DB::StorageMerge::read(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::SelectQueryInfo&, std::__1::shared_ptr<DB::Context>, DB::QueryProcessingStage::Enum, unsigned long, unsigned int) @ 0x1be9d8be in /workspace/clickhouse\r\n2021.04.12 12:58:17.962450 [ 196 ] {} <Fatal> BaseDaemon: 16. ./obj-x86_64-linux-gnu/../src/Storages/IStorage.cpp:105: DB::IStorage::read(DB::QueryPlan&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::SelectQueryInfo&, std::__1::shared_ptr<DB::Context>, DB::QueryProcessingStage::Enum, unsigned long, unsigned int) @ 0x1bdbf17d in /workspace/clickhouse\r\n2021.04.12 12:58:18.907738 [ 196 ] {} <Fatal> BaseDaemon: 17. ./obj-x86_64-linux-gnu/../src/Interpreters/InterpreterSelectQuery.cpp:1723: DB::InterpreterSelectQuery::executeFetchColumns(DB::QueryProcessingStage::Enum, DB::QueryPlan&) @ 0x1b39737d in /workspace/clickhouse\r\n2021.04.12 12:58:19.890927 [ 196 ] {} <Fatal> BaseDaemon: 18. ./obj-x86_64-linux-gnu/../src/Interpreters/InterpreterSelectQuery.cpp:972: DB::InterpreterSelectQuery::executeImpl(DB::QueryPlan&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>) @ 0x1b38fe4e in /workspace/clickhouse\r\n2021.04.12 12:58:20.869163 [ 196 ] {} <Fatal> BaseDaemon: 19. ./obj-x86_64-linux-gnu/../src/Interpreters/InterpreterSelectQuery.cpp:546: DB::InterpreterSelectQuery::buildQueryPlan(DB::QueryPlan&) @ 0x1b38ee86 in /workspace/clickhouse\r\n2021.04.12 12:58:21.305332 [ 196 ] {} <Fatal> BaseDaemon: 20. ./obj-x86_64-linux-gnu/../src/Interpreters/InterpreterSelectWithUnionQuery.cpp:245: DB::InterpreterSelectWithUnionQuery::buildQueryPlan(DB::QueryPlan&) @ 0x1b94f3ea in /workspace/clickhouse\r\n2021.04.12 12:58:21.727245 [ 196 ] {} <Fatal> BaseDaemon: 21. ./obj-x86_64-linux-gnu/../src/Interpreters/InterpreterSelectWithUnionQuery.cpp:311: DB::InterpreterSelectWithUnionQuery::execute() @ 0x1b94fdad in /workspace/clickhouse\r\n2021.04.12 12:58:22.267449 [ 196 ] {} <Fatal> BaseDaemon: 22. ./obj-x86_64-linux-gnu/../src/Interpreters/executeQuery.cpp:561: DB::executeQueryImpl(char const*, char const*, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, bool, DB::ReadBuffer*) @ 0x1bb83229 in /workspace/clickhouse\r\n2021.04.12 12:58:22.841805 [ 196 ] {} <Fatal> BaseDaemon: 23. ./obj-x86_64-linux-gnu/../src/Interpreters/executeQuery.cpp:919: DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, bool) @ 0x1bb813b5 in /workspace/clickhouse\r\n2021.04.12 12:58:23.419246 [ 196 ] {} <Fatal> BaseDaemon: 24. ./obj-x86_64-linux-gnu/../src/Server/TCPHandler.cpp:290: DB::TCPHandler::runImpl() @ 0x1c5ae8ad in /workspace/clickhouse\r\n2021.04.12 12:58:24.032029 [ 196 ] {} <Fatal> BaseDaemon: 25. ./obj-x86_64-linux-gnu/../src/Server/TCPHandler.cpp:1548: DB::TCPHandler::run() @ 0x1c5bb0c8 in /workspace/clickhouse\r\n2021.04.12 12:58:24.093374 [ 196 ] {} <Fatal> BaseDaemon: 26. ./obj-x86_64-linux-gnu/../contrib/poco/Net/src/TCPServerConnection.cpp:43: Poco::Net::TCPServerConnection::start() @ 0x2007606c in /workspace/clickhouse\r\n2021.04.12 12:58:24.184877 [ 196 ] {} <Fatal> BaseDaemon: 27. ./obj-x86_64-linux-gnu/../contrib/poco/Net/src/TCPServerDispatcher.cpp:113: Poco::Net::TCPServerDispatcher::run() @ 0x20076870 in /workspace/clickhouse\r\n2021.04.12 12:58:24.269738 [ 196 ] {} <Fatal> BaseDaemon: 28. ./obj-x86_64-linux-gnu/../contrib/poco/Foundation/src/ThreadPool.cpp:199: Poco::PooledThread::run() @ 0x201b3013 in /workspace/clickhouse\r\n2021.04.12 12:58:24.349302 [ 196 ] {} <Fatal> BaseDaemon: 29. ./obj-x86_64-linux-gnu/../contrib/poco/Foundation/src/Thread.cpp:56: Poco::(anonymous namespace)::RunnableHolder::run() @ 0x201afe9d in /workspace/clickhouse\r\n2021.04.12 12:58:24.428390 [ 196 ] {} <Fatal> BaseDaemon: 30. ./obj-x86_64-linux-gnu/../contrib/poco/Foundation/src/Thread_POSIX.cpp:345: Poco::ThreadImpl::runnableEntry(void*) @ 0x201aed28 in /workspace/clickhouse\r\n2021.04.12 12:58:24.428881 [ 196 ] {} <Fatal> BaseDaemon: 31. start_thread @ 0x9609 in /usr/lib/x86_64-linux-gnu/libpthread-2.31.so\r\n2021.04.12 12:58:24.429261 [ 196 ] {} <Fatal> BaseDaemon: 32. __clone @ 0x122293 in /usr/lib/x86_64-linux-gnu/libc-2.31.so\r\n```\r\n\n",
  "hints_text": "",
  "created_at": "2021-04-12T19:05:58Z"
}