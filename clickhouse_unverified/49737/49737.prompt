You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
error: There is no physical column _row_exists in table

**Describe the unexpected behaviour**
There is still repeating error message in the log: `There is no physical column _row_exists in table. (NO_SUCH_COLUMN_IN_TABLE)` (see full trace below).  The log is full of this messages.
It is impossible for me to find out which table it is. 


* Which ClickHouse server version to use
`23.4.2.11` as well as `23.3.1.2823`


**Error message and/or stacktrace**
```
2023.05.04 15:09:45.563899 [ 3411394 ] {12b6cbf7-cfc3-4661-833d-cbc8ede1865a::202309_3_3_0_4} <Error> MutatePlainMergeTreeTask: Code: 16. DB::Exception: There is no physical column _row_exists in table. (NO_SUCH_COLUMN_IN_TABLE) (version 23.4.2.11 (official build))
2023.05.04 15:09:45.564204 [ 3411394 ] {12b6cbf7-cfc3-4661-833d-cbc8ede1865a::202309_3_3_0_4} <Error> virtual bool DB::MutatePlainMergeTreeTask::executeStep(): Code: 16. DB::Exception: There is no physical column _row_exists in table. (NO_SUCH_COLUMN_IN_TABLE), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) in /usr/bin/clickhouse
1. ? in /usr/bin/clickhouse
2. DB::ColumnsDescription::getPhysical(String const&) const in /usr/bin/clickhouse
3. DB::MergeTreeData::checkPartDynamicColumns(std::shared_ptr<DB::IMergeTreeDataPart>&, std::unique_lock<std::mutex>&) const in /usr/bin/clickhouse
4. DB::MergeTreeData::renameTempPartAndReplaceImpl(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&, std::unique_lock<std::mutex>&, std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>*) in /usr/bin/clickhouse
5. DB::MergeTreeData::renameTempPartAndReplace(std::shared_ptr<DB::IMergeTreeDataPart>&, DB::MergeTreeData::Transaction&) in /usr/bin/clickhouse
6. DB::MutatePlainMergeTreeTask::executeStep() in /usr/bin/clickhouse
7. DB::MergeTreeBackgroundExecutor<DB::DynamicRuntimeQueue>::routine(std::shared_ptr<DB::TaskRuntimeData>) in /usr/bin/clickhouse
8. DB::MergeTreeBackgroundExecutor<DB::DynamicRuntimeQueue>::threadFunction() in /usr/bin/clickhouse
9. ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::worker(std::__list_iterator<ThreadFromGlobalPoolImpl<false>, void*>) in /usr/bin/clickhouse
10. void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::function<void ()>, long, std::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) in /usr/bin/clickhouse
11. ThreadPoolImpl<std::thread>::worker(std::__list_iterator<std::thread, void*>) in /usr/bin/clickhouse
12. ? in /usr/bin/clickhouse
13. ? in ?
14. clone in ?
 (version 23.4.2.11 (official build))
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
