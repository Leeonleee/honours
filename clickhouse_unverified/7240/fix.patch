diff --git a/dbms/programs/server/config.d/macros.xml b/dbms/programs/server/config.d/macros.xml
new file mode 100644
index 000000000000..1f86f5f9efdd
--- /dev/null
+++ b/dbms/programs/server/config.d/macros.xml
@@ -0,0 +1,5 @@
+<yandex>
+    <macros>
+        <test>Hello, world!</test>
+    </macros>
+</yandex>
diff --git a/dbms/src/Common/Macros.cpp b/dbms/src/Common/Macros.cpp
index 9198a72a69d9..ac64cc4ca463 100644
--- a/dbms/src/Common/Macros.cpp
+++ b/dbms/src/Common/Macros.cpp
@@ -74,6 +74,13 @@ String Macros::expand(const String & s, size_t level, const String & database_na
     return expand(res, level + 1, database_name, table_name);
 }
 
+String Macros::getValue(const String & key) const
+{
+    if (auto it = macros.find(key); it != macros.end())
+        return it->second;
+    throw Exception("No macro " + key + " in config", ErrorCodes::SYNTAX_ERROR);
+}
+
 String Macros::expand(const String & s, const String & database_name, const String & table_name) const
 {
     return expand(s, 0, database_name, table_name);
diff --git a/dbms/src/Common/Macros.h b/dbms/src/Common/Macros.h
index 60a6bc18e4c6..c01038f9b6d7 100644
--- a/dbms/src/Common/Macros.h
+++ b/dbms/src/Common/Macros.h
@@ -43,6 +43,8 @@ class Macros
     using MacroMap = std::map<String, String>;
     const MacroMap getMacroMap() const { return macros; }
 
+    String getValue(const String & key) const;
+
 private:
     MacroMap macros;
 };
diff --git a/dbms/src/Functions/getMacro.cpp b/dbms/src/Functions/getMacro.cpp
new file mode 100644
index 000000000000..b3f933dc03f9
--- /dev/null
+++ b/dbms/src/Functions/getMacro.cpp
@@ -0,0 +1,84 @@
+#include <Functions/IFunction.h>
+#include <Functions/FunctionFactory.h>
+#include <Functions/FunctionHelpers.h>
+#include <DataTypes/DataTypeString.h>
+#include <Columns/ColumnString.h>
+#include <Interpreters/Context.h>
+#include <Common/Macros.h>
+#include <Core/Field.h>
+
+
+namespace DB
+{
+
+namespace ErrorCodes
+{
+    extern const int ILLEGAL_TYPE_OF_ARGUMENT;
+    extern const int ILLEGAL_COLUMN;
+}
+
+/** Get the value of macro from configuration file.
+  * For example, it may be used as a sophisticated replacement for the function 'hostName' if servers have complicated hostnames
+  *  but you still need to distinguish them by some convenient names.
+  */
+class FunctionGetMacro : public IFunction
+{
+private:
+    MultiVersion<Macros>::Version macros;
+
+public:
+    static constexpr auto name = "getMacro";
+    static FunctionPtr create(const Context & context)
+    {
+        return std::make_shared<FunctionGetMacro>(context.getMacros());
+    }
+
+    FunctionGetMacro(MultiVersion<Macros>::Version macros_) : macros(std::move(macros_)) {}
+
+    String getName() const override
+    {
+        return name;
+    }
+
+    bool isDeterministic() const override { return false; }
+
+    bool isDeterministicInScopeOfQuery() const override
+    {
+        return false;
+    }
+
+    size_t getNumberOfArguments() const override
+    {
+        return 1;
+    }
+
+    DataTypePtr getReturnTypeImpl(const DataTypes & arguments) const override
+    {
+        if (!isString(arguments[0]))
+            throw Exception("The argument of function " + getName() + " must have String type", ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);
+        return std::make_shared<DataTypeString>();
+    }
+
+    /** convertToFullColumn needed because in distributed query processing,
+      *    each server returns its own value.
+      */
+    void executeImpl(Block & block, const ColumnNumbers & arguments, size_t result, size_t input_rows_count) override
+    {
+        const IColumn * arg_column = block.getByPosition(arguments[0]).column.get();
+        const ColumnString * arg_string = checkAndGetColumnConstData<ColumnString>(arg_column);
+
+        if (!arg_string)
+            throw Exception("The argument of function " + getName() + " must be constant String", ErrorCodes::ILLEGAL_COLUMN);
+
+        block.getByPosition(result).column = block.getByPosition(result).type->createColumnConst(
+            input_rows_count, macros->getValue(arg_string->getDataAt(0).toString()))->convertToFullColumnIfConst();
+    }
+};
+
+
+void registerFunctionGetMacro(FunctionFactory & factory)
+{
+    factory.registerFunction<FunctionGetMacro>();
+}
+
+}
diff --git a/dbms/src/Functions/registerFunctionsMiscellaneous.cpp b/dbms/src/Functions/registerFunctionsMiscellaneous.cpp
index 1d95844ce9bf..418bd093e321 100644
--- a/dbms/src/Functions/registerFunctionsMiscellaneous.cpp
+++ b/dbms/src/Functions/registerFunctionsMiscellaneous.cpp
@@ -50,6 +50,7 @@ void registerFunctionFilesystem(FunctionFactory &);
 void registerFunctionEvalMLMethod(FunctionFactory &);
 void registerFunctionBasename(FunctionFactory &);
 void registerFunctionTransform(FunctionFactory &);
+void registerFunctionGetMacro(FunctionFactory &);
 
 #if USE_ICU
 void registerFunctionConvertCharset(FunctionFactory &);
@@ -102,6 +103,7 @@ void registerFunctionsMiscellaneous(FunctionFactory & factory)
     registerFunctionEvalMLMethod(factory);
     registerFunctionBasename(factory);
     registerFunctionTransform(factory);
+    registerFunctionGetMacro(factory);
 
 #if USE_ICU
     registerFunctionConvertCharset(factory);
