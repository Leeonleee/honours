{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 82867,
  "instance_id": "ClickHouse__ClickHouse-82867",
  "issue_numbers": [
    "82837",
    "82836",
    "82839"
  ],
  "base_commit": "26938d351af00dd87d23cf7778552631439b8ce2",
  "patch": "diff --git a/src/Parsers/ExpressionElementParsers.cpp b/src/Parsers/ExpressionElementParsers.cpp\nindex 3c4d0ed3937b..c32586ab4418 100644\n--- a/src/Parsers/ExpressionElementParsers.cpp\n+++ b/src/Parsers/ExpressionElementParsers.cpp\n@@ -2196,6 +2196,18 @@ bool ParserStorageOrderByElement::parseImpl(Pos & pos, ASTPtr & node, Expected &\n     if (!elem_p.parse(pos, expr_elem, expected))\n         return false;\n \n+    /// ParserExpression, in contrast to ParserExpressionWithOptionalAlias,\n+    /// does not expect an alias after the expression. However, in certain cases,\n+    /// it uses ParserExpressionWithOptionalAlias recursively, and use its result.\n+    /// This is the case when it parses a single expression in parentheses, e.g.,\n+    /// it does not allow\n+    /// 1 AS x\n+    /// but it can parse\n+    /// (1 AS x)\n+    /// which we should not allow as well.\n+    if (!expr_elem->tryGetAlias().empty())\n+        return false;\n+\n     if (!allow_order)\n     {\n         node = std::move(expr_elem);\ndiff --git a/src/Parsers/ParserDeleteQuery.cpp b/src/Parsers/ParserDeleteQuery.cpp\nindex d7cdcd920ad4..061351047914 100644\n--- a/src/Parsers/ParserDeleteQuery.cpp\n+++ b/src/Parsers/ParserDeleteQuery.cpp\n@@ -52,6 +52,18 @@ bool ParserDeleteQuery::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)\n         if (!parser_exp_elem.parse(pos, query->predicate, expected))\n             return false;\n \n+        /// ParserExpression, in contrast to ParserExpressionWithOptionalAlias,\n+        /// does not expect an alias after the expression. However, in certain cases,\n+        /// it uses ParserExpressionWithOptionalAlias recursively, and use its result.\n+        /// This is the case when it parses a single expression in parentheses, e.g.,\n+        /// it does not allow\n+        /// 1 AS x\n+        /// but it can parse\n+        /// (1 AS x)\n+        /// which we should not allow as well.\n+        if (!query->predicate->tryGetAlias().empty())\n+            return false;\n+\n         if (s_settings.ignore(pos, expected))\n         {\n             ParserSetQuery parser_settings(true);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03558_no_alias_in_single_expressions.reference b/tests/queries/0_stateless/03558_no_alias_in_single_expressions.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/03558_no_alias_in_single_expressions.sql b/tests/queries/0_stateless/03558_no_alias_in_single_expressions.sql\nnew file mode 100644\nindex 000000000000..c506a8d01e49\n--- /dev/null\n+++ b/tests/queries/0_stateless/03558_no_alias_in_single_expressions.sql\n@@ -0,0 +1,7 @@\n+CREATE TABLE t0 (c0 Int) ENGINE = MergeTree() ORDER BY ((c0 AS x)); -- { clientError SYNTAX_ERROR }\n+CREATE TABLE t0 (c0 Int) ENGINE = MergeTree() ORDER BY (c0 AS x); -- { clientError SYNTAX_ERROR }\n+CREATE TABLE t0 (c0 Int) ENGINE = MergeTree() ORDER BY (c0 AS x) DESC; -- { clientError SYNTAX_ERROR }\n+CREATE TABLE t0 (c0 Int) ENGINE = MergeTree() ORDER BY c0 AS x; -- { clientError SYNTAX_ERROR }\n+CREATE TABLE t0 (c0 Int) ENGINE = MergeTree() ORDER BY c0 AS x DESC; -- { clientError SYNTAX_ERROR }\n+DELETE FROM t0 WHERE (true AS a0); -- { clientError SYNTAX_ERROR }\n+DELETE FROM t0 WHERE true AS a0; -- { clientError SYNTAX_ERROR }\n",
  "problem_statement": "Inconsistent formatting of ORDER BY\n> And another case:\n> \n> ```sql\n> CREATE TABLE t0 (c0 Int) ENGINE = MergeTree() ORDER BY ((c0 AS x));\n> ```\n> ```\n> <Fatal> : Logical error: 'Inconsistent AST formatting: the query:\n> CREATE TABLE tx (`c0` Int) ENGINE = MergeTree ORDER BY c0 AS x\n> cannot parse query back from CREATE TABLE tx (c0 Int) ENGINE = MergeTree() ORDER BY ((c0 AS x));'.\n> <Fatal> : Stack trace (when copying this message, always include the lines below):\n> \n> 0. contrib/llvm-project/libcxx/include/__exception/exception.h:113: Poco::Exception::Exception(String const&, int) @ 0x000000001e049832\n> 1. src/Common/Exception.cpp:110: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000001252e106\n> 2. src/Common/Exception.h:119: DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000be1bb4c\n> 3. src/Common/Exception.h:137: DB::Exception::Exception<String&, std::basic_string_view<char, std::char_traits<char>>>(int, FormatStringHelperImpl<std::type_identity<String&>::type, std::type_identity<std::basic_string_view<char, std::char_traits<char>>>::type>, String&, std::basic_string_view<char, std::char_traits<char>>&&) @ 0x0000000017b9f9f6\n> 4. src/Interpreters/executeQuery.cpp:1041: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x0000000017b982ea\n> 5. src/Interpreters/executeQuery.cpp:1721: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x0000000017b90391\n> 6. src/Server/TCPHandler.cpp:686: DB::TCPHandler::runImpl() @ 0x0000000019c45021\n> 7. src/Server/TCPHandler.cpp:2690: DB::TCPHandler::run() @ 0x0000000019c5e204\n> 8. base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x000000001e0fb007\n> 9. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x000000001e0fb505\n> 10. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x000000001e0975ff\n> 11. base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001e0951b1\n> 12. start_thread @ 0x00000000000a2ef1\n> 13. __GI___clone3 @ 0x000000000013445c\n> ``` \n\n _Originally posted by @PedroTadim in [#68296](https://github.com/ClickHouse/ClickHouse/issues/68296#issuecomment-2909963424)_\nInconsistent formatting of DELETE query\n> A slightly different case:\n> \n> ```sql\n> CREATE TABLE t0 (c0 Int) ENGINE=MergeTree() ORDER BY tuple();\n> DELETE FROM t0 WHERE (true AS a0);\n> ```\n> ```\n> <Fatal> : Logical error: 'Inconsistent AST formatting: the query:\n> DELETE FROM t0 WHERE true AS a0\n> cannot parse query back from DELETE FROM t0 WHERE (true AS a0);'.\n> <Fatal> : Stack trace (when copying this message, always include the lines below):\n> \n> 0. contrib/llvm-project/libcxx/include/__exception/exception.h:113: Poco::Exception::Exception(String const&, int) @ 0x000000001ab192b2\n> 1. src/Common/Exception.cpp:108: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fc51859\n> 2. src/Common/Exception.h:112: DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009fb888c\n> 3. src/Common/Exception.h:130: DB::Exception::Exception<String&, std::basic_string_view<char, std::char_traits<char>>>(int, FormatStringHelperImpl<std::type_identity<String&>::type, std::type_identity<std::basic_string_view<char, std::char_traits<char>>>::type>, String&, std::basic_string_view<char, std::char_traits<char>>&&) @ 0x0000000014ba514b\n> 4. src/Interpreters/executeQuery.cpp:1008: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x0000000014b9dc4a\n> 5. src/Interpreters/executeQuery.cpp:1682: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x0000000014b95d28\n> 6. src/Server/TCPHandler.cpp:684: DB::TCPHandler::runImpl() @ 0x000000001682dea1\n> 7. src/Server/TCPHandler.cpp:2672: DB::TCPHandler::run() @ 0x00000000168467d9\n> 8. base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x000000001abbac67\n> 9. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x000000001abbb13e\n> 10. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x000000001ab65692\n> 11. base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001ab632cf\n> 12. ? @ 0x00007ffff7ca1e2e\n> 13. ? @ 0x00007ffff7d33a4c\n> ``` \n\n _Originally posted by @PedroTadim in [#68296](https://github.com/ClickHouse/ClickHouse/issues/68296#issuecomment-2796586984)_\nFix inconsistent formatting of parenthesized expressions with aliases in the context when no aliases are allowed\n### Changelog category (leave one):\r\n- Improvement\r\n\r\n\r\n### Changelog entry (a user-readable short description of the changes that goes to CHANGELOG.md):\r\nFix inconsistent formatting of parenthesized expressions with aliases in the context when no aliases are allowed. Closes #82836. Closes #82837.\r\n\n",
  "hints_text": "\n\n<!-- CI automatic comment start :report: -->\nWorkflow [[PR](https://s3.amazonaws.com/clickhouse-test-reports/json.html?PR=82839&sha=latest&name_0=PR)], commit [5cda20bd]\n<!-- CI automatic comment end :report: -->\n<!-- CI automatic comment start :summary: -->\n**Summary:** \u274c\n    *15 failures out of 109 shown*:\n|job_name|test_name|status|info|comment|\n|:--|:--|:-:|:--|:--|\n|Docs check||dropped|||\n|Fast test||failure|||\n||02560_tuple_format|FAIL|||\n||02911_join_on_nullsafe_optimization|FAIL|||\n||03315_join_on_optimize_pass_alias|FAIL|||\n||03204_format_join_on|FAIL|||\n||03328_formatting_assignment_expression|FAIL|||\n||02378_analyzer_projection_names|FAIL|||\n|Build (amd_debug)||dropped|||\n|Build (amd_release)||dropped|||\n|Build (amd_asan)||dropped|||\n|Build (amd_tsan)||dropped|||\n|Build (amd_msan)||dropped|||\n|Build (amd_ubsan)||dropped|||\n|Build (amd_binary)||dropped|||\n|Build (arm_release)||dropped|||\n|Build (arm_asan)||dropped|||\n|Build (arm_coverage)||dropped|||\n|Build (arm_binary)||dropped|||\n|Build (amd_darwin)||dropped|||\n|Build (arm_darwin)||dropped|||\n\n<!-- CI automatic comment end :summary: -->\n",
  "created_at": "2025-06-29T22:19:57Z"
}