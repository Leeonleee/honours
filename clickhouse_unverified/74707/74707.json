{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 74707,
  "instance_id": "ClickHouse__ClickHouse-74707",
  "issue_numbers": [
    "74708"
  ],
  "base_commit": "cf1f5afa43e5dec432493d6fae9b68628560f4a5",
  "patch": "diff --git a/src/IO/ReadBuffer.h b/src/IO/ReadBuffer.h\nindex 3adb5174ca9d..e4260d1eb1e1 100644\n--- a/src/IO/ReadBuffer.h\n+++ b/src/IO/ReadBuffer.h\n@@ -252,7 +252,8 @@ class ReadBuffer : public BufferBase\n     size_t nextimpl_working_buffer_offset = 0;\n \n private:\n-    /** Read the next data and fill a buffer with it.\n+    /** Read the next data and fill a buffer with it. It should also account for `nextimpl_working_buffer_offset` out parameter if set\n+      * so that after this value is applied to `pos` (see next() method) buffer still contains available data.\n       * Return `false` in case of the end, `true` otherwise.\n       * Throw an exception if something is wrong.\n       */\ndiff --git a/src/IO/ZlibInflatingReadBuffer.cpp b/src/IO/ZlibInflatingReadBuffer.cpp\nindex 6e416f6e7ffd..9c47521d0d77 100644\n--- a/src/IO/ZlibInflatingReadBuffer.cpp\n+++ b/src/IO/ZlibInflatingReadBuffer.cpp\n@@ -100,6 +100,9 @@ bool ZlibInflatingReadBuffer::nextImpl()\n             if (rc != Z_OK)\n                 throw Exception(\n                     ErrorCodes::ZLIB_INFLATE_FAILED, \"inflateReset failed: {}{}\", zError(rc), getExceptionEntryWithFileName(*in));\n+            if (working_buffer.empty())\n+                continue;\n+\n             return true;\n         }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03312_issue_74708.reference b/tests/queries/0_stateless/03312_issue_74708.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/03312_issue_74708.sh b/tests/queries/0_stateless/03312_issue_74708.sh\nnew file mode 100755\nindex 000000000000..aa5a0fe5c0a0\n--- /dev/null\n+++ b/tests/queries/0_stateless/03312_issue_74708.sh\n@@ -0,0 +1,13 @@\n+#!/usr/bin/env bash\n+\n+CUR_DIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CUR_DIR\"/../shell_config.sh\n+\n+DATA_FILE=$CUR_DIR/data_zlib/03312_compressed.gz\n+\n+$CLICKHOUSE_CLIENT -q \"DROP TABLE IF EXISTS test_tbl_03312;\"\n+\n+$CLICKHOUSE_CLIENT -q \"CREATE TABLE test_tbl_03312 (value String) ENGINE = MergeTree ORDER BY tuple();\"\n+\n+$CLICKHOUSE_CLIENT -q \"INSERT INTO test_tbl_03312 FROM INFILE '${DATA_FILE}' SETTINGS max_read_buffer_size = 1, input_format_parallel_parsing = 0 FORMAT JSONEachRow;\"\ndiff --git a/tests/queries/0_stateless/data_zlib/03312_compressed.gz b/tests/queries/0_stateless/data_zlib/03312_compressed.gz\nnew file mode 100644\nindex 000000000000..e7feaa685bec\nBinary files /dev/null and b/tests/queries/0_stateless/data_zlib/03312_compressed.gz differ\n",
  "problem_statement": "Assertion failed when using ZlibInflatingReadBuffer\n### Company or project name\n\n_No response_\n\n### Describe what's wrong\n\nInsert from a gzip compressed file failed with assertion failed\n\n### Does it reproduce on the most recent release?\n\nYes\n\n### How to reproduce\n\n1. Generate a gz file by this script, the generated file can be processed by gzip -d command\n```python\nimport zlib\ndef compress_string(input_string):\n    compressor = zlib.compressobj(wbits=zlib.MAX_WBITS | 16)\n    compressed_data = compressor.compress(input_string.encode('utf-8'))\n    compressed_data += compressor.flush()\n    return compressed_data\nwith open('compressed.gz', 'wb') as f:\n    for raw_str in ['{\"value\": \"abc\"} ', '{\"value\": \"abc\"}']:\n        f.write(compress_string(raw_str))\n```\n2. Create table\n```sql\nCREATE TABLE default.mc_sc\n(\n    `value` String\n)\nENGINE = MergeTree\nORDER BY tuple()\n```\n4. Insert data\n```sql\nset max_read_buffer_size = 1;\nset input_format_parallel_parsing = 0;\ninsert into mc_sc from infile '/data.gz' format JSONEachRow;\n```\n\n### Expected behavior\n\nInsert data normally\n\n### Error message and/or stacktrace\n\n```text\nLogical error: 'position() < working_buffer.end()'.\nStack trace (when copying this message, always include the lines below):\n\n0. /home/siyuan/clickhouse/src/Common/StackTrace.cpp:381: StackTrace::tryCapture() @ 0x000000000cdc2d92\n1. /home/siyuan/clickhouse/src/Common/Exception.cpp:53: DB::abortOnFailedAssertion(String const&) @ 0x000000000cd907d5\n2. /home/siyuan/clickhouse/src/IO/ReadBuffer.h:75: DB::ReadBuffer::next() @ 0x000000000777b5c1\n3. /home/siyuan/clickhouse/src/IO/ReadBuffer.h:103: DB::JSONEachRowRowInputFormat::readRow(std::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn>>>&, DB::RowReadE\nxtension&) @ 0x000000001487be0f\n4. /home/siyuan/clickhouse/src/Processors/Formats/IRowInputFormat.cpp:143: DB::IRowInputFormat::read() @ 0x00000000147ca132\n5. /home/siyuan/clickhouse/src/Processors/Formats/IInputFormat.cpp:19: DB::IInputFormat::generate() @ 0x00000000147729f6\n6. /home/siyuan/clickhouse/src/Processors/ISource.cpp:139: DB::ISource::tryGenerate() @ 0x0000000014753317\n7. /home/siyuan/clickhouse/src/Processors/ISource.cpp:108: DB::ISource::work() @ 0x00000000147530e7\n8. /home/siyuan/clickhouse/src/Processors/Executors/ExecutionThreadContext.cpp:49: DB::ExecutionThreadContext::executeTask() @ 0x000000001476a434\n9. /home/siyuan/clickhouse/src/Processors/Executors/PipelineExecutor.cpp:290: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000014760505\n10. /home/siyuan/clickhouse/src/Processors/Executors/PipelineExecutor.cpp:164: DB::PipelineExecutor::executeStep(std::atomic<bool>*) @ 0x000000001475f9e9\n11. /home/siyuan/clickhouse/src/Processors/Executors/PullingPipelineExecutor.cpp:54: DB::PullingPipelineExecutor::pull(DB::Chunk&) @ 0x000000001476dd1f\n12. /home/siyuan/clickhouse/src/Storages/StorageFile.cpp:1474: DB::StorageFileSource::generate() @ 0x0000000013b22319\n13. /home/siyuan/clickhouse/src/Processors/ISource.cpp:139: DB::ISource::tryGenerate() @ 0x0000000014753317\n14. /home/siyuan/clickhouse/src/Processors/ISource.cpp:108: DB::ISource::work() @ 0x00000000147530e7\n15. /home/siyuan/clickhouse/src/Processors/Executors/ExecutionThreadContext.cpp:49: DB::ExecutionThreadContext::executeTask() @ 0x000000001476a434\n16. /home/siyuan/clickhouse/src/Processors/Executors/PipelineExecutor.cpp:290: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000014760505\n17. /home/siyuan/clickhouse/src/Processors/Executors/PipelineExecutor.cpp:256: DB::PipelineExecutor::executeSingleThread(unsigned long) @ 0x000000001476079e\n18. /home/siyuan/clickhouse/src/Processors/Executors/PipelineExecutor.cpp:455: DB::PipelineExecutor::executeImpl(unsigned long, bool) @ 0x000000001475f087\n19. /home/siyuan/clickhouse/src/Processors/Executors/PipelineExecutor.cpp:127: DB::PipelineExecutor::execute(unsigned long, bool) @ 0x000000001475ea6f\n20. /home/siyuan/clickhouse/src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:83: void std::__function::__policy_invoker<void ()>::__call_impl[abi:se180100]<std::__function::__default_alloc_func<ThreadFromGlobalPo\nolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'(), void ()>>(std::__function::__polic\ny_storage const*) @ 0x000000001476d26a\n21. /home/siyuan/clickhouse/contrib/llvm-project/libcxx/include/__functional/function.h:714: ? @ 0x000000000ce53806\n22. /home/siyuan/clickhouse/contrib/llvm-project/libcxx/include/__type_traits/invoke.h:312: void* std::__thread_proxy[abi:se180100]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct\n>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000000ce590e0\n23. start_thread @ 0x0000000000007fa3\n24. ? @ 0x00000000000f906f\n```\n\nIf use a release build to execute this command, the insert query will failed with exception `std::length_error, e.what() = basic_string`\n\n### Additional context\n\nZlibInflatingReadBuffer's nextImpl may return non eof while return non empty buffer. So sometimes, ReadBuffer's eof call may return false, while the working buffer is still empty, but some code has use this buffer directly, for example readChar in ReadHelpers.h\n",
  "hints_text": "",
  "created_at": "2025-01-17T11:44:46Z"
}