You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Assertion failed when using ZlibInflatingReadBuffer
### Company or project name

_No response_

### Describe what's wrong

Insert from a gzip compressed file failed with assertion failed

### Does it reproduce on the most recent release?

Yes

### How to reproduce

1. Generate a gz file by this script, the generated file can be processed by gzip -d command
```python
import zlib
def compress_string(input_string):
    compressor = zlib.compressobj(wbits=zlib.MAX_WBITS | 16)
    compressed_data = compressor.compress(input_string.encode('utf-8'))
    compressed_data += compressor.flush()
    return compressed_data
with open('compressed.gz', 'wb') as f:
    for raw_str in ['{"value": "abc"} ', '{"value": "abc"}']:
        f.write(compress_string(raw_str))
```
2. Create table
```sql
CREATE TABLE default.mc_sc
(
    `value` String
)
ENGINE = MergeTree
ORDER BY tuple()
```
4. Insert data
```sql
set max_read_buffer_size = 1;
set input_format_parallel_parsing = 0;
insert into mc_sc from infile '/data.gz' format JSONEachRow;
```

### Expected behavior

Insert data normally

### Error message and/or stacktrace

```text
Logical error: 'position() < working_buffer.end()'.
Stack trace (when copying this message, always include the lines below):

0. /home/siyuan/clickhouse/src/Common/StackTrace.cpp:381: StackTrace::tryCapture() @ 0x000000000cdc2d92
1. /home/siyuan/clickhouse/src/Common/Exception.cpp:53: DB::abortOnFailedAssertion(String const&) @ 0x000000000cd907d5
2. /home/siyuan/clickhouse/src/IO/ReadBuffer.h:75: DB::ReadBuffer::next() @ 0x000000000777b5c1
3. /home/siyuan/clickhouse/src/IO/ReadBuffer.h:103: DB::JSONEachRowRowInputFormat::readRow(std::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn>>>&, DB::RowReadE
xtension&) @ 0x000000001487be0f
4. /home/siyuan/clickhouse/src/Processors/Formats/IRowInputFormat.cpp:143: DB::IRowInputFormat::read() @ 0x00000000147ca132
5. /home/siyuan/clickhouse/src/Processors/Formats/IInputFormat.cpp:19: DB::IInputFormat::generate() @ 0x00000000147729f6
6. /home/siyuan/clickhouse/src/Processors/ISource.cpp:139: DB::ISource::tryGenerate() @ 0x0000000014753317
7. /home/siyuan/clickhouse/src/Processors/ISource.cpp:108: DB::ISource::work() @ 0x00000000147530e7
8. /home/siyuan/clickhouse/src/Processors/Executors/ExecutionThreadContext.cpp:49: DB::ExecutionThreadContext::executeTask() @ 0x000000001476a434
9. /home/siyuan/clickhouse/src/Processors/Executors/PipelineExecutor.cpp:290: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000014760505
10. /home/siyuan/clickhouse/src/Processors/Executors/PipelineExecutor.cpp:164: DB::PipelineExecutor::executeStep(std::atomic<bool>*) @ 0x000000001475f9e9
11. /home/siyuan/clickhouse/src/Processors/Executors/PullingPipelineExecutor.cpp:54: DB::PullingPipelineExecutor::pull(DB::Chunk&) @ 0x000000001476dd1f
12. /home/siyuan/clickhouse/src/Storages/StorageFile.cpp:1474: DB::StorageFileSource::generate() @ 0x0000000013b22319
13. /home/siyuan/clickhouse/src/Processors/ISource.cpp:139: DB::ISource::tryGenerate() @ 0x0000000014753317
14. /home/siyuan/clickhouse/src/Processors/ISource.cpp:108: DB::ISource::work() @ 0x00000000147530e7
15. /home/siyuan/clickhouse/src/Processors/Executors/ExecutionThreadContext.cpp:49: DB::ExecutionThreadContext::executeTask() @ 0x000000001476a434
16. /home/siyuan/clickhouse/src/Processors/Executors/PipelineExecutor.cpp:290: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000014760505
17. /home/siyuan/clickhouse/src/Processors/Executors/PipelineExecutor.cpp:256: DB::PipelineExecutor::executeSingleThread(unsigned long) @ 0x000000001476079e
18. /home/siyuan/clickhouse/src/Processors/Executors/PipelineExecutor.cpp:455: DB::PipelineExecutor::executeImpl(unsigned long, bool) @ 0x000000001475f087
19. /home/siyuan/clickhouse/src/Processors/Executors/PipelineExecutor.cpp:127: DB::PipelineExecutor::execute(unsigned long, bool) @ 0x000000001475ea6f
20. /home/siyuan/clickhouse/src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:83: void std::__function::__policy_invoker<void ()>::__call_impl[abi:se180100]<std::__function::__default_alloc_func<ThreadFromGlobalPo
olImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'(), void ()>>(std::__function::__polic
y_storage const*) @ 0x000000001476d26a
21. /home/siyuan/clickhouse/contrib/llvm-project/libcxx/include/__functional/function.h:714: ? @ 0x000000000ce53806
22. /home/siyuan/clickhouse/contrib/llvm-project/libcxx/include/__type_traits/invoke.h:312: void* std::__thread_proxy[abi:se180100]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct
>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000000ce590e0
23. start_thread @ 0x0000000000007fa3
24. ? @ 0x00000000000f906f
```

If use a release build to execute this command, the insert query will failed with exception `std::length_error, e.what() = basic_string`

### Additional context

ZlibInflatingReadBuffer's nextImpl may return non eof while return non empty buffer. So sometimes, ReadBuffer's eof call may return false, while the working buffer is still empty, but some code has use this buffer directly, for example readChar in ReadHelpers.h
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
