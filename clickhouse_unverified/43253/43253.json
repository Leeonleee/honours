{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 43253,
  "instance_id": "ClickHouse__ClickHouse-43253",
  "issue_numbers": [
    "42731"
  ],
  "base_commit": "e7e21adf1758a6c156b2240aebaf33ed28716cb8",
  "patch": "diff --git a/src/Backups/registerBackupEngineS3.cpp b/src/Backups/registerBackupEngineS3.cpp\nindex 7f5cb7f12a18..488130d2641e 100644\n--- a/src/Backups/registerBackupEngineS3.cpp\n+++ b/src/Backups/registerBackupEngineS3.cpp\n@@ -110,12 +110,12 @@ void registerBackupEngineS3(BackupFactory & factory)\n \n         if (params.open_mode == IBackup::OpenMode::READ)\n         {\n-            auto reader = std::make_shared<BackupReaderS3>(S3::URI{Poco::URI{s3_uri}}, access_key_id, secret_access_key, params.context);\n+            auto reader = std::make_shared<BackupReaderS3>(S3::URI{s3_uri}, access_key_id, secret_access_key, params.context);\n             return std::make_unique<BackupImpl>(backup_name_for_logging, archive_params, params.base_backup_info, reader, params.context);\n         }\n         else\n         {\n-            auto writer = std::make_shared<BackupWriterS3>(S3::URI{Poco::URI{s3_uri}}, access_key_id, secret_access_key, params.context);\n+            auto writer = std::make_shared<BackupWriterS3>(S3::URI{s3_uri}, access_key_id, secret_access_key, params.context);\n             return std::make_unique<BackupImpl>(backup_name_for_logging, archive_params, params.base_backup_info, writer, params.context, params.is_internal_backup, params.backup_coordination, params.backup_uuid);\n         }\n #else\ndiff --git a/src/Coordination/KeeperSnapshotManagerS3.cpp b/src/Coordination/KeeperSnapshotManagerS3.cpp\nindex 2e19d496407f..c04266297ff9 100644\n--- a/src/Coordination/KeeperSnapshotManagerS3.cpp\n+++ b/src/Coordination/KeeperSnapshotManagerS3.cpp\n@@ -65,7 +65,7 @@ void KeeperSnapshotManagerS3::updateS3Configuration(const Poco::Util::AbstractCo\n         auto auth_settings = S3::AuthSettings::loadFromConfig(config_prefix, config);\n \n         auto endpoint = config.getString(config_prefix + \".endpoint\");\n-        auto new_uri = S3::URI{Poco::URI(endpoint)};\n+        auto new_uri = S3::URI{endpoint};\n \n         {\n             std::lock_guard client_lock{snapshot_s3_client_mutex};\ndiff --git a/src/Disks/ObjectStorages/S3/S3ObjectStorage.cpp b/src/Disks/ObjectStorages/S3/S3ObjectStorage.cpp\nindex 099a7d458d08..f587ef18474f 100644\n--- a/src/Disks/ObjectStorages/S3/S3ObjectStorage.cpp\n+++ b/src/Disks/ObjectStorages/S3/S3ObjectStorage.cpp\n@@ -655,7 +655,7 @@ std::unique_ptr<IObjectStorage> S3ObjectStorage::cloneObjectStorage(\n         getClient(config, config_prefix, context),\n         getSettings(config, config_prefix, context),\n         version_id, s3_capabilities, new_namespace,\n-        S3::URI(Poco::URI(config.getString(config_prefix + \".endpoint\"))).endpoint);\n+        config.getString(config_prefix + \".endpoint\"));\n }\n \n }\ndiff --git a/src/Disks/ObjectStorages/S3/diskSettings.cpp b/src/Disks/ObjectStorages/S3/diskSettings.cpp\nindex e61987163d20..4f1355cd1e59 100644\n--- a/src/Disks/ObjectStorages/S3/diskSettings.cpp\n+++ b/src/Disks/ObjectStorages/S3/diskSettings.cpp\n@@ -121,7 +121,7 @@ std::unique_ptr<Aws::S3::S3Client> getClient(const Poco::Util::AbstractConfigura\n         context->getGlobalContext()->getSettingsRef().enable_s3_requests_logging,\n         /* for_disk_s3 = */ true);\n \n-    S3::URI uri(Poco::URI(config.getString(config_prefix + \".endpoint\")));\n+    S3::URI uri(config.getString(config_prefix + \".endpoint\"));\n     if (uri.key.back() != '/')\n         throw Exception(\"S3 path must ends with '/', but '\" + uri.key + \"' doesn't.\", ErrorCodes::BAD_ARGUMENTS);\n \ndiff --git a/src/Disks/ObjectStorages/S3/registerDiskS3.cpp b/src/Disks/ObjectStorages/S3/registerDiskS3.cpp\nindex e09aef22122d..f90ac4d00221 100644\n--- a/src/Disks/ObjectStorages/S3/registerDiskS3.cpp\n+++ b/src/Disks/ObjectStorages/S3/registerDiskS3.cpp\n@@ -115,7 +115,7 @@ void registerDiskS3(DiskFactory & factory)\n                       ContextPtr context,\n                       const DisksMap & /*map*/) -> DiskPtr\n     {\n-        S3::URI uri(Poco::URI(config.getString(config_prefix + \".endpoint\")));\n+        S3::URI uri(config.getString(config_prefix + \".endpoint\"));\n \n         if (uri.key.empty())\n             throw Exception(ErrorCodes::BAD_ARGUMENTS, \"No key in S3 uri: {}\", uri.uri.toString());\ndiff --git a/src/IO/S3Common.cpp b/src/IO/S3Common.cpp\nindex 859f5ce796be..8b922b15e1d5 100644\n--- a/src/IO/S3Common.cpp\n+++ b/src/IO/S3Common.cpp\n@@ -736,7 +736,7 @@ namespace S3\n         return PocoHTTPClientConfiguration(force_region, remote_host_filter, s3_max_redirects, enable_s3_requests_logging, for_disk_s3);\n     }\n \n-    URI::URI(const Poco::URI & uri_)\n+    URI::URI(const std::string & uri_)\n     {\n         /// Case when bucket name represented in domain name of S3 URL.\n         /// E.g. (https://bucket-name.s3.Region.amazonaws.com/key)\n@@ -754,16 +754,32 @@ namespace S3\n         static constexpr auto OBS = \"OBS\";\n         static constexpr auto OSS = \"OSS\";\n \n-        uri = uri_;\n+        uri = Poco::URI(uri_);\n+\n         storage_name = S3;\n \n         if (uri.getHost().empty())\n             throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Host is empty in S3 URI.\");\n \n         /// Extract object version ID from query string.\n+        bool has_version_id = false;\n         for (const auto & [query_key, query_value] : uri.getQueryParameters())\n             if (query_key == \"versionId\")\n+            {\n                 version_id = query_value;\n+                has_version_id = true;\n+            }\n+\n+        /// Poco::URI will ignore '?' when parsing the path, but if there is a vestionId in the http parameter,\n+        /// '?' can not be used as a wildcard, otherwise it will be ambiguous.\n+        /// If no \"vertionId\" in the http parameter, '?' can be used as a wildcard.\n+        /// It is necessary to encode '?' to avoid deletion during parsing path.\n+        if (!has_version_id && uri_.find('?') != String::npos)\n+        {\n+            String uri_with_question_mark_encode;\n+            Poco::URI::encode(uri_, \"?\", uri_with_question_mark_encode);\n+            uri = Poco::URI(uri_with_question_mark_encode);\n+        }\n \n         String name;\n         String endpoint_authority_from_uri;\ndiff --git a/src/IO/S3Common.h b/src/IO/S3Common.h\nindex 93e5eb78c7ff..367675d88545 100644\n--- a/src/IO/S3Common.h\n+++ b/src/IO/S3Common.h\n@@ -116,8 +116,7 @@ struct URI\n \n     bool is_virtual_hosted_style;\n \n-    explicit URI(const Poco::URI & uri_);\n-    explicit URI(const std::string & uri_) : URI(Poco::URI(uri_)) {}\n+    explicit URI(const std::string & uri_);\n \n     static void validateBucket(const String & bucket, const Poco::URI & uri);\n };\ndiff --git a/src/TableFunctions/TableFunctionDeltaLake.cpp b/src/TableFunctions/TableFunctionDeltaLake.cpp\nindex 0f5801d57ac4..0cfb54b5bdf6 100644\n--- a/src/TableFunctions/TableFunctionDeltaLake.cpp\n+++ b/src/TableFunctions/TableFunctionDeltaLake.cpp\n@@ -139,8 +139,7 @@ ColumnsDescription TableFunctionDelta::getActualTableStructure(ContextPtr contex\n StoragePtr TableFunctionDelta::executeImpl(\n     const ASTPtr & /*ast_function*/, ContextPtr context, const std::string & table_name, ColumnsDescription /*cached_columns*/) const\n {\n-    Poco::URI uri(configuration.url);\n-    S3::URI s3_uri(uri);\n+    S3::URI s3_uri(configuration.url);\n \n     ColumnsDescription columns;\n     if (configuration.structure != \"auto\")\ndiff --git a/src/TableFunctions/TableFunctionHudi.cpp b/src/TableFunctions/TableFunctionHudi.cpp\nindex 2e27d192b58f..f22c6184b1dc 100644\n--- a/src/TableFunctions/TableFunctionHudi.cpp\n+++ b/src/TableFunctions/TableFunctionHudi.cpp\n@@ -139,8 +139,7 @@ ColumnsDescription TableFunctionHudi::getActualTableStructure(ContextPtr context\n StoragePtr TableFunctionHudi::executeImpl(\n     const ASTPtr & /*ast_function*/, ContextPtr context, const std::string & table_name, ColumnsDescription /*cached_columns*/) const\n {\n-    Poco::URI uri(configuration.url);\n-    S3::URI s3_uri(uri);\n+    S3::URI s3_uri(configuration.url);\n \n     ColumnsDescription columns;\n     if (configuration.structure != \"auto\")\ndiff --git a/src/TableFunctions/TableFunctionS3.cpp b/src/TableFunctions/TableFunctionS3.cpp\nindex be6dc6d28c52..3b68a0766aa8 100644\n--- a/src/TableFunctions/TableFunctionS3.cpp\n+++ b/src/TableFunctions/TableFunctionS3.cpp\n@@ -153,8 +153,7 @@ bool TableFunctionS3::supportsReadingSubsetOfColumns()\n \n StoragePtr TableFunctionS3::executeImpl(const ASTPtr & /*ast_function*/, ContextPtr context, const std::string & table_name, ColumnsDescription /*cached_columns*/) const\n {\n-    Poco::URI uri(configuration.url);\n-    S3::URI s3_uri(uri);\n+    S3::URI s3_uri (configuration.url);\n \n     ColumnsDescription columns;\n     if (configuration.structure != \"auto\")\n",
  "test_patch": "diff --git a/src/IO/S3/tests/gtest_aws_s3_client.cpp b/src/IO/S3/tests/gtest_aws_s3_client.cpp\nindex 9b2a65d84fca..f90151578ee4 100644\n--- a/src/IO/S3/tests/gtest_aws_s3_client.cpp\n+++ b/src/IO/S3/tests/gtest_aws_s3_client.cpp\n@@ -76,7 +76,7 @@ TEST(IOTestAwsS3Client, AppendExtraSSECHeaders)\n \n     DB::RemoteHostFilter remote_host_filter;\n     unsigned int s3_max_redirects = 100;\n-    DB::S3::URI uri(Poco::URI(http.getUrl() + \"/IOTestAwsS3ClientAppendExtraHeaders/test.txt\"));\n+    DB::S3::URI uri(http.getUrl() + \"/IOTestAwsS3ClientAppendExtraHeaders/test.txt\");\n     String access_key_id = \"ACCESS_KEY_ID\";\n     String secret_access_key = \"SECRET_ACCESS_KEY\";\n     String region = \"us-east-1\";\ndiff --git a/src/IO/tests/gtest_s3_uri.cpp b/src/IO/tests/gtest_s3_uri.cpp\nindex 161dc81266c0..c088e41f1e8a 100644\n--- a/src/IO/tests/gtest_s3_uri.cpp\n+++ b/src/IO/tests/gtest_s3_uri.cpp\n@@ -20,55 +20,55 @@ struct TestCase\n };\n \n const TestCase TestCases[] = {\n-    {S3::URI(Poco::URI(\"https://bucketname.s3.us-east-2.amazonaws.com/data\")),\n+    {S3::URI(\"https://bucketname.s3.us-east-2.amazonaws.com/data\"),\n      \"https://s3.us-east-2.amazonaws.com\",\n      \"bucketname\",\n      \"data\",\n      \"\",\n      true},\n-    {S3::URI(Poco::URI(\"https://bucketname.s3.us-east-2.amazonaws.com/data?firstKey=someKey&secondKey=anotherKey\")),\n+    {S3::URI(\"https://bucketname.s3.us-east-2.amazonaws.com/data?firstKey=someKey&secondKey=anotherKey\"),\n      \"https://s3.us-east-2.amazonaws.com\",\n      \"bucketname\",\n-     \"data\",\n+     \"data?firstKey=someKey&secondKey=anotherKey\",\n      \"\",\n      true},\n-    {S3::URI(Poco::URI(\"https://bucketname.s3.us-east-2.amazonaws.com/data?versionId=testVersionId&anotherKey=someOtherKey\")),\n+    {S3::URI(\"https://bucketname.s3.us-east-2.amazonaws.com/data?versionId=testVersionId&anotherKey=someOtherKey\"),\n      \"https://s3.us-east-2.amazonaws.com\",\n      \"bucketname\",\n      \"data\",\n      \"testVersionId\",\n      true},\n-    {S3::URI(Poco::URI(\"https://bucketname.s3.us-east-2.amazonaws.com/data?firstKey=someKey&versionId=testVersionId&anotherKey=someOtherKey\")),\n+    {S3::URI(\"https://bucketname.s3.us-east-2.amazonaws.com/data?firstKey=someKey&versionId=testVersionId&anotherKey=someOtherKey\"),\n      \"https://s3.us-east-2.amazonaws.com\",\n      \"bucketname\",\n      \"data\",\n      \"testVersionId\",\n      true},\n-    {S3::URI(Poco::URI(\"https://bucketname.s3.us-east-2.amazonaws.com/data?anotherKey=someOtherKey&versionId=testVersionId\")),\n+    {S3::URI(\"https://bucketname.s3.us-east-2.amazonaws.com/data?anotherKey=someOtherKey&versionId=testVersionId\"),\n      \"https://s3.us-east-2.amazonaws.com\",\n      \"bucketname\",\n      \"data\",\n      \"testVersionId\",\n      true},\n-    {S3::URI(Poco::URI(\"https://bucketname.s3.us-east-2.amazonaws.com/data?versionId=testVersionId\")),\n+    {S3::URI(\"https://bucketname.s3.us-east-2.amazonaws.com/data?versionId=testVersionId\"),\n      \"https://s3.us-east-2.amazonaws.com\",\n      \"bucketname\",\n      \"data\",\n      \"testVersionId\",\n      true},\n-    {S3::URI(Poco::URI(\"https://bucketname.s3.us-east-2.amazonaws.com/data?versionId=\")),\n+    {S3::URI(\"https://bucketname.s3.us-east-2.amazonaws.com/data?versionId=\"),\n      \"https://s3.us-east-2.amazonaws.com\",\n      \"bucketname\",\n      \"data\",\n      \"\",\n      true},\n-    {S3::URI(Poco::URI(\"https://bucketname.s3.us-east-2.amazonaws.com/data?versionId&\")),\n+    {S3::URI(\"https://bucketname.s3.us-east-2.amazonaws.com/data?versionId&\"),\n      \"https://s3.us-east-2.amazonaws.com\",\n      \"bucketname\",\n      \"data\",\n      \"\",\n      true},\n-    {S3::URI(Poco::URI(\"https://bucketname.s3.us-east-2.amazonaws.com/data?versionId\")),\n+    {S3::URI(\"https://bucketname.s3.us-east-2.amazonaws.com/data?versionId\"),\n      \"https://s3.us-east-2.amazonaws.com\",\n      \"bucketname\",\n      \"data\",\n@@ -83,7 +83,7 @@ class S3UriTest : public testing::TestWithParam<std::string>\n TEST(S3UriTest, validPatterns)\n {\n     {\n-        S3::URI uri(Poco::URI(\"https://jokserfn.s3.amazonaws.com/\"));\n+        S3::URI uri(\"https://jokserfn.s3.amazonaws.com/\");\n         ASSERT_EQ(\"https://s3.amazonaws.com\", uri.endpoint);\n         ASSERT_EQ(\"jokserfn\", uri.bucket);\n         ASSERT_EQ(\"\", uri.key);\n@@ -91,7 +91,7 @@ TEST(S3UriTest, validPatterns)\n         ASSERT_EQ(true, uri.is_virtual_hosted_style);\n     }\n     {\n-        S3::URI uri(Poco::URI(\"https://s3.amazonaws.com/jokserfn/\"));\n+        S3::URI uri(\"https://s3.amazonaws.com/jokserfn/\");\n         ASSERT_EQ(\"https://s3.amazonaws.com\", uri.endpoint);\n         ASSERT_EQ(\"jokserfn\", uri.bucket);\n         ASSERT_EQ(\"\", uri.key);\n@@ -99,7 +99,7 @@ TEST(S3UriTest, validPatterns)\n         ASSERT_EQ(false, uri.is_virtual_hosted_style);\n     }\n     {\n-        S3::URI uri(Poco::URI(\"https://amazonaws.com/bucket/\"));\n+        S3::URI uri(\"https://amazonaws.com/bucket/\");\n         ASSERT_EQ(\"https://amazonaws.com\", uri.endpoint);\n         ASSERT_EQ(\"bucket\", uri.bucket);\n         ASSERT_EQ(\"\", uri.key);\n@@ -107,7 +107,7 @@ TEST(S3UriTest, validPatterns)\n         ASSERT_EQ(false, uri.is_virtual_hosted_style);\n     }\n     {\n-        S3::URI uri(Poco::URI(\"https://jokserfn.s3.amazonaws.com/data\"));\n+        S3::URI uri(\"https://jokserfn.s3.amazonaws.com/data\");\n         ASSERT_EQ(\"https://s3.amazonaws.com\", uri.endpoint);\n         ASSERT_EQ(\"jokserfn\", uri.bucket);\n         ASSERT_EQ(\"data\", uri.key);\n@@ -115,7 +115,7 @@ TEST(S3UriTest, validPatterns)\n         ASSERT_EQ(true, uri.is_virtual_hosted_style);\n     }\n     {\n-        S3::URI uri(Poco::URI(\"https://storage.amazonaws.com/jokserfn/data\"));\n+        S3::URI uri(\"https://storage.amazonaws.com/jokserfn/data\");\n         ASSERT_EQ(\"https://storage.amazonaws.com\", uri.endpoint);\n         ASSERT_EQ(\"jokserfn\", uri.bucket);\n         ASSERT_EQ(\"data\", uri.key);\n@@ -123,7 +123,7 @@ TEST(S3UriTest, validPatterns)\n         ASSERT_EQ(false, uri.is_virtual_hosted_style);\n     }\n     {\n-        S3::URI uri(Poco::URI(\"https://bucketname.cos.ap-beijing.myqcloud.com/data\"));\n+        S3::URI uri(\"https://bucketname.cos.ap-beijing.myqcloud.com/data\");\n         ASSERT_EQ(\"https://cos.ap-beijing.myqcloud.com\", uri.endpoint);\n         ASSERT_EQ(\"bucketname\", uri.bucket);\n         ASSERT_EQ(\"data\", uri.key);\n@@ -131,7 +131,7 @@ TEST(S3UriTest, validPatterns)\n         ASSERT_EQ(true, uri.is_virtual_hosted_style);\n     }\n     {\n-        S3::URI uri(Poco::URI(\"https://bucketname.s3.us-east-2.amazonaws.com/data\"));\n+        S3::URI uri(\"https://bucketname.s3.us-east-2.amazonaws.com/data\");\n         ASSERT_EQ(\"https://s3.us-east-2.amazonaws.com\", uri.endpoint);\n         ASSERT_EQ(\"bucketname\", uri.bucket);\n         ASSERT_EQ(\"data\", uri.key);\n@@ -139,7 +139,7 @@ TEST(S3UriTest, validPatterns)\n         ASSERT_EQ(true, uri.is_virtual_hosted_style);\n     }\n     {\n-        S3::URI uri(Poco::URI(\"https://s3.us-east-2.amazonaws.com/bucketname/data\"));\n+        S3::URI uri(\"https://s3.us-east-2.amazonaws.com/bucketname/data\");\n         ASSERT_EQ(\"https://s3.us-east-2.amazonaws.com\", uri.endpoint);\n         ASSERT_EQ(\"bucketname\", uri.bucket);\n         ASSERT_EQ(\"data\", uri.key);\n@@ -147,7 +147,7 @@ TEST(S3UriTest, validPatterns)\n         ASSERT_EQ(false, uri.is_virtual_hosted_style);\n     }\n     {\n-        S3::URI uri(Poco::URI(\"https://bucketname.s3-us-east-2.amazonaws.com/data\"));\n+        S3::URI uri(\"https://bucketname.s3-us-east-2.amazonaws.com/data\");\n         ASSERT_EQ(\"https://s3-us-east-2.amazonaws.com\", uri.endpoint);\n         ASSERT_EQ(\"bucketname\", uri.bucket);\n         ASSERT_EQ(\"data\", uri.key);\n@@ -155,7 +155,7 @@ TEST(S3UriTest, validPatterns)\n         ASSERT_EQ(true, uri.is_virtual_hosted_style);\n     }\n     {\n-        S3::URI uri(Poco::URI(\"https://s3-us-east-2.amazonaws.com/bucketname/data\"));\n+        S3::URI uri(\"https://s3-us-east-2.amazonaws.com/bucketname/data\");\n         ASSERT_EQ(\"https://s3-us-east-2.amazonaws.com\", uri.endpoint);\n         ASSERT_EQ(\"bucketname\", uri.bucket);\n         ASSERT_EQ(\"data\", uri.key);\n@@ -166,7 +166,7 @@ TEST(S3UriTest, validPatterns)\n \n TEST_P(S3UriTest, invalidPatterns)\n {\n-    ASSERT_ANY_THROW(S3::URI(Poco::URI(GetParam())));\n+    ASSERT_ANY_THROW(S3::URI new_uri(GetParam()));\n }\n \n TEST(S3UriTest, versionIdChecks)\ndiff --git a/tests/queries/0_stateless/02480_s3_support_wildcard.reference b/tests/queries/0_stateless/02480_s3_support_wildcard.reference\nnew file mode 100644\nindex 000000000000..c6b63f647f84\n--- /dev/null\n+++ b/tests/queries/0_stateless/02480_s3_support_wildcard.reference\n@@ -0,0 +1,43 @@\n+-- { echo }\n+drop table if exists test_02480_write;\n+drop table if exists test_02480_write2;\n+create table test_02480_write (a UInt64, b String) engine = S3(s3_conn, filename='test_02480_{_partition_id}', format=Parquet) partition by a;\n+set s3_truncate_on_insert=1;\n+insert into test_02480_write values (1, 'a'), (22, 'b'), (333, 'c');\n+select a, b from s3(s3_conn, filename='test_02480_*', format=Parquet) order by a;\n+1\ta\n+22\tb\n+333\tc\n+select a, b from s3(s3_conn, filename='test_02480_?', format=Parquet) order by a;\n+1\ta\n+select a, b from s3(s3_conn, filename='test_02480_??', format=Parquet) order by a;\n+22\tb\n+select a, b from s3(s3_conn, filename='test_02480_?*?', format=Parquet) order by a;\n+22\tb\n+333\tc\n+select a, b from s3(s3_conn, filename='test_02480_{1,333}', format=Parquet) order by a;\n+1\ta\n+333\tc\n+select a, b from s3(s3_conn, filename='test_02480_{1..333}', format=Parquet) order by a;\n+1\ta\n+22\tb\n+333\tc\n+create table test_02480_write2 (a UInt64, b String) engine = S3(s3_conn, filename='prefix/test_02480_{_partition_id}', format=Parquet) partition by a;\n+set s3_truncate_on_insert=1;\n+insert into test_02480_write2 values (4, 'd'), (55, 'f'), (666, 'g');\n+select a, b from s3(s3_conn, filename='*/test_02480_*', format=Parquet) order by a;\n+4\td\n+55\tf\n+666\tg\n+select a, b from s3(s3_conn, filename='*/test_02480_?', format=Parquet) order by a;\n+4\td\n+select a, b from s3(s3_conn, filename='prefix/test_02480_??', format=Parquet) order by a;\n+55\tf\n+select a, b from s3(s3_conn, filename='prefi?/test_02480_*', format=Parquet) order by a;\n+4\td\n+55\tf\n+666\tg\n+select a, b from s3(s3_conn, filename='p?*/test_02480_{56..666}', format=Parquet) order by a;\n+666\tg\n+drop table test_02480_write;\n+drop table test_02480_write2;\ndiff --git a/tests/queries/0_stateless/02480_s3_support_wildcard.sql b/tests/queries/0_stateless/02480_s3_support_wildcard.sql\nnew file mode 100644\nindex 000000000000..9da5a022dc40\n--- /dev/null\n+++ b/tests/queries/0_stateless/02480_s3_support_wildcard.sql\n@@ -0,0 +1,29 @@\n+-- Tags: no-parallel, no-fasttest\n+-- Tag no-fasttest: Depends on AWS\n+\n+-- { echo }\n+drop table if exists test_02480_write;\n+drop table if exists test_02480_write2;\n+create table test_02480_write (a UInt64, b String) engine = S3(s3_conn, filename='test_02480_{_partition_id}', format=Parquet) partition by a;\n+set s3_truncate_on_insert=1;\n+insert into test_02480_write values (1, 'a'), (22, 'b'), (333, 'c');\n+\n+select a, b from s3(s3_conn, filename='test_02480_*', format=Parquet) order by a;\n+select a, b from s3(s3_conn, filename='test_02480_?', format=Parquet) order by a;\n+select a, b from s3(s3_conn, filename='test_02480_??', format=Parquet) order by a;\n+select a, b from s3(s3_conn, filename='test_02480_?*?', format=Parquet) order by a;\n+select a, b from s3(s3_conn, filename='test_02480_{1,333}', format=Parquet) order by a;\n+select a, b from s3(s3_conn, filename='test_02480_{1..333}', format=Parquet) order by a;\n+\n+create table test_02480_write2 (a UInt64, b String) engine = S3(s3_conn, filename='prefix/test_02480_{_partition_id}', format=Parquet) partition by a;\n+set s3_truncate_on_insert=1;\n+insert into test_02480_write2 values (4, 'd'), (55, 'f'), (666, 'g');\n+\n+select a, b from s3(s3_conn, filename='*/test_02480_*', format=Parquet) order by a;\n+select a, b from s3(s3_conn, filename='*/test_02480_?', format=Parquet) order by a;\n+select a, b from s3(s3_conn, filename='prefix/test_02480_??', format=Parquet) order by a;\n+select a, b from s3(s3_conn, filename='prefi?/test_02480_*', format=Parquet) order by a;\n+select a, b from s3(s3_conn, filename='p?*/test_02480_{56..666}', format=Parquet) order by a;\n+\n+drop table test_02480_write;\n+drop table test_02480_write2;\n",
  "problem_statement": "\"?\" in s3 table function doesn't work?\nWhen i learn about \"s3 table function\" by folllowing https://clickhouse.com/docs/en/engines/table-engines/integrations/s3/, I found \"?\" does not work. \r\nThe detailed tests are as follows. Is it a problem?\r\nObviously, \"*\" is workable.\r\nThe file name  in s3 is  test_1.parquet, test_2.parquet, test_3.parquet\r\n\r\n```\r\n:) show create table test_s3_test;\r\n\r\nSHOW CREATE TABLE test_s3_test\r\n\r\nQuery id: 2975f0f5-53f2-4c07-8996-dec40458fae5\r\n\r\n\u250c\u2500statement\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 CREATE TABLE cos.test_s3_test\r\n(\r\n    `a` Int32,\r\n    `b` String\r\n)\r\nENGINE = S3('http://xxxxxxxx/testfile/test_?', ak, sk, 'Parquet') \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.001 sec.\r\n\r\n:) show create table test_s3_test2;\r\n\r\nSHOW CREATE TABLE test_s3_test2\r\n\r\nQuery id: 621bf107-f651-41d6-993e-60ac96887da5\r\n\r\n\u250c\u2500statement\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 CREATE TABLE cos.test_s3_test2\r\n(\r\n    `a` Int32,\r\n    `b` String\r\n)\r\nENGINE = S3('http://xxxxxxxxx/testfile/test_?.parquet', ak, sk, 'Parquet') \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.002 sec.\r\n\r\n :) select count(*) from test_s3_test;\r\n\r\nSELECT count(*)\r\nFROM test_s3_test\r\n\r\nQuery id: 326c6eb2-a4bf-48b5-8c23-7827d0bf84f5\r\n\r\n\u2192 Progress: 0.00 rows, 0.00 B (0.00 rows/s., 0.00 B/s.)\r\n0 rows in set. Elapsed: 0.697 sec.\r\n\r\nReceived exception from server (version 22.10.1):\r\nCode: 499. DB::Exception: Received from localhost:9000. DB::Exception: No response body.: While executing ParquetBlockInputFormat: While executing COSN. (S3_ERROR)\r\n\r\n :) select count(*) from test_s3_test2;\r\n\r\nSELECT count(*)\r\nFROM test_s3_test2\r\n\r\nQuery id: 82d747a6-3009-45cd-8a70-61a2f5cdfe0b\r\n\r\n\u2198 Progress: 0.00 rows, 0.00 B (0.00 rows/s., 0.00 B/s.)\r\n0 rows in set. Elapsed: 0.225 sec.\r\n\r\nReceived exception from server (version 22.10.1):\r\nCode: 499. DB::Exception: Received from localhost:9000. DB::Exception: No response body.: While executing ParquetBlockInputFormat: While executing COSN. (S3_ERROR)\r\n```\n",
  "hints_text": "I can reproduce the issue. To provide some context:\r\n- The `?` wildcard behaviour is described on this [doc](https://clickhouse.com/docs/en/engines/table-engines/integrations/s3/#wildcards-in-path) (and the description above should work).\r\n- You can reproduce the issue using this public [S3](https://clickhouse.com/docs/en/integrations/s3/s3-table-engine/#reading-data), you need just to change the path to `...s3.eu-west-3.amazonaws.com/nyc-taxi/trips_?.gz` or `...s3.eu-west-3.amazonaws.com/nyc-taxi/trips_?`.",
  "created_at": "2022-11-15T15:43:37Z"
}