diff --git a/src/IO/S3/tests/gtest_aws_s3_client.cpp b/src/IO/S3/tests/gtest_aws_s3_client.cpp
index 9b2a65d84fca..f90151578ee4 100644
--- a/src/IO/S3/tests/gtest_aws_s3_client.cpp
+++ b/src/IO/S3/tests/gtest_aws_s3_client.cpp
@@ -76,7 +76,7 @@ TEST(IOTestAwsS3Client, AppendExtraSSECHeaders)
 
     DB::RemoteHostFilter remote_host_filter;
     unsigned int s3_max_redirects = 100;
-    DB::S3::URI uri(Poco::URI(http.getUrl() + "/IOTestAwsS3ClientAppendExtraHeaders/test.txt"));
+    DB::S3::URI uri(http.getUrl() + "/IOTestAwsS3ClientAppendExtraHeaders/test.txt");
     String access_key_id = "ACCESS_KEY_ID";
     String secret_access_key = "SECRET_ACCESS_KEY";
     String region = "us-east-1";
diff --git a/src/IO/tests/gtest_s3_uri.cpp b/src/IO/tests/gtest_s3_uri.cpp
index 161dc81266c0..c088e41f1e8a 100644
--- a/src/IO/tests/gtest_s3_uri.cpp
+++ b/src/IO/tests/gtest_s3_uri.cpp
@@ -20,55 +20,55 @@ struct TestCase
 };
 
 const TestCase TestCases[] = {
-    {S3::URI(Poco::URI("https://bucketname.s3.us-east-2.amazonaws.com/data")),
+    {S3::URI("https://bucketname.s3.us-east-2.amazonaws.com/data"),
      "https://s3.us-east-2.amazonaws.com",
      "bucketname",
      "data",
      "",
      true},
-    {S3::URI(Poco::URI("https://bucketname.s3.us-east-2.amazonaws.com/data?firstKey=someKey&secondKey=anotherKey")),
+    {S3::URI("https://bucketname.s3.us-east-2.amazonaws.com/data?firstKey=someKey&secondKey=anotherKey"),
      "https://s3.us-east-2.amazonaws.com",
      "bucketname",
-     "data",
+     "data?firstKey=someKey&secondKey=anotherKey",
      "",
      true},
-    {S3::URI(Poco::URI("https://bucketname.s3.us-east-2.amazonaws.com/data?versionId=testVersionId&anotherKey=someOtherKey")),
+    {S3::URI("https://bucketname.s3.us-east-2.amazonaws.com/data?versionId=testVersionId&anotherKey=someOtherKey"),
      "https://s3.us-east-2.amazonaws.com",
      "bucketname",
      "data",
      "testVersionId",
      true},
-    {S3::URI(Poco::URI("https://bucketname.s3.us-east-2.amazonaws.com/data?firstKey=someKey&versionId=testVersionId&anotherKey=someOtherKey")),
+    {S3::URI("https://bucketname.s3.us-east-2.amazonaws.com/data?firstKey=someKey&versionId=testVersionId&anotherKey=someOtherKey"),
      "https://s3.us-east-2.amazonaws.com",
      "bucketname",
      "data",
      "testVersionId",
      true},
-    {S3::URI(Poco::URI("https://bucketname.s3.us-east-2.amazonaws.com/data?anotherKey=someOtherKey&versionId=testVersionId")),
+    {S3::URI("https://bucketname.s3.us-east-2.amazonaws.com/data?anotherKey=someOtherKey&versionId=testVersionId"),
      "https://s3.us-east-2.amazonaws.com",
      "bucketname",
      "data",
      "testVersionId",
      true},
-    {S3::URI(Poco::URI("https://bucketname.s3.us-east-2.amazonaws.com/data?versionId=testVersionId")),
+    {S3::URI("https://bucketname.s3.us-east-2.amazonaws.com/data?versionId=testVersionId"),
      "https://s3.us-east-2.amazonaws.com",
      "bucketname",
      "data",
      "testVersionId",
      true},
-    {S3::URI(Poco::URI("https://bucketname.s3.us-east-2.amazonaws.com/data?versionId=")),
+    {S3::URI("https://bucketname.s3.us-east-2.amazonaws.com/data?versionId="),
      "https://s3.us-east-2.amazonaws.com",
      "bucketname",
      "data",
      "",
      true},
-    {S3::URI(Poco::URI("https://bucketname.s3.us-east-2.amazonaws.com/data?versionId&")),
+    {S3::URI("https://bucketname.s3.us-east-2.amazonaws.com/data?versionId&"),
      "https://s3.us-east-2.amazonaws.com",
      "bucketname",
      "data",
      "",
      true},
-    {S3::URI(Poco::URI("https://bucketname.s3.us-east-2.amazonaws.com/data?versionId")),
+    {S3::URI("https://bucketname.s3.us-east-2.amazonaws.com/data?versionId"),
      "https://s3.us-east-2.amazonaws.com",
      "bucketname",
      "data",
@@ -83,7 +83,7 @@ class S3UriTest : public testing::TestWithParam<std::string>
 TEST(S3UriTest, validPatterns)
 {
     {
-        S3::URI uri(Poco::URI("https://jokserfn.s3.amazonaws.com/"));
+        S3::URI uri("https://jokserfn.s3.amazonaws.com/");
         ASSERT_EQ("https://s3.amazonaws.com", uri.endpoint);
         ASSERT_EQ("jokserfn", uri.bucket);
         ASSERT_EQ("", uri.key);
@@ -91,7 +91,7 @@ TEST(S3UriTest, validPatterns)
         ASSERT_EQ(true, uri.is_virtual_hosted_style);
     }
     {
-        S3::URI uri(Poco::URI("https://s3.amazonaws.com/jokserfn/"));
+        S3::URI uri("https://s3.amazonaws.com/jokserfn/");
         ASSERT_EQ("https://s3.amazonaws.com", uri.endpoint);
         ASSERT_EQ("jokserfn", uri.bucket);
         ASSERT_EQ("", uri.key);
@@ -99,7 +99,7 @@ TEST(S3UriTest, validPatterns)
         ASSERT_EQ(false, uri.is_virtual_hosted_style);
     }
     {
-        S3::URI uri(Poco::URI("https://amazonaws.com/bucket/"));
+        S3::URI uri("https://amazonaws.com/bucket/");
         ASSERT_EQ("https://amazonaws.com", uri.endpoint);
         ASSERT_EQ("bucket", uri.bucket);
         ASSERT_EQ("", uri.key);
@@ -107,7 +107,7 @@ TEST(S3UriTest, validPatterns)
         ASSERT_EQ(false, uri.is_virtual_hosted_style);
     }
     {
-        S3::URI uri(Poco::URI("https://jokserfn.s3.amazonaws.com/data"));
+        S3::URI uri("https://jokserfn.s3.amazonaws.com/data");
         ASSERT_EQ("https://s3.amazonaws.com", uri.endpoint);
         ASSERT_EQ("jokserfn", uri.bucket);
         ASSERT_EQ("data", uri.key);
@@ -115,7 +115,7 @@ TEST(S3UriTest, validPatterns)
         ASSERT_EQ(true, uri.is_virtual_hosted_style);
     }
     {
-        S3::URI uri(Poco::URI("https://storage.amazonaws.com/jokserfn/data"));
+        S3::URI uri("https://storage.amazonaws.com/jokserfn/data");
         ASSERT_EQ("https://storage.amazonaws.com", uri.endpoint);
         ASSERT_EQ("jokserfn", uri.bucket);
         ASSERT_EQ("data", uri.key);
@@ -123,7 +123,7 @@ TEST(S3UriTest, validPatterns)
         ASSERT_EQ(false, uri.is_virtual_hosted_style);
     }
     {
-        S3::URI uri(Poco::URI("https://bucketname.cos.ap-beijing.myqcloud.com/data"));
+        S3::URI uri("https://bucketname.cos.ap-beijing.myqcloud.com/data");
         ASSERT_EQ("https://cos.ap-beijing.myqcloud.com", uri.endpoint);
         ASSERT_EQ("bucketname", uri.bucket);
         ASSERT_EQ("data", uri.key);
@@ -131,7 +131,7 @@ TEST(S3UriTest, validPatterns)
         ASSERT_EQ(true, uri.is_virtual_hosted_style);
     }
     {
-        S3::URI uri(Poco::URI("https://bucketname.s3.us-east-2.amazonaws.com/data"));
+        S3::URI uri("https://bucketname.s3.us-east-2.amazonaws.com/data");
         ASSERT_EQ("https://s3.us-east-2.amazonaws.com", uri.endpoint);
         ASSERT_EQ("bucketname", uri.bucket);
         ASSERT_EQ("data", uri.key);
@@ -139,7 +139,7 @@ TEST(S3UriTest, validPatterns)
         ASSERT_EQ(true, uri.is_virtual_hosted_style);
     }
     {
-        S3::URI uri(Poco::URI("https://s3.us-east-2.amazonaws.com/bucketname/data"));
+        S3::URI uri("https://s3.us-east-2.amazonaws.com/bucketname/data");
         ASSERT_EQ("https://s3.us-east-2.amazonaws.com", uri.endpoint);
         ASSERT_EQ("bucketname", uri.bucket);
         ASSERT_EQ("data", uri.key);
@@ -147,7 +147,7 @@ TEST(S3UriTest, validPatterns)
         ASSERT_EQ(false, uri.is_virtual_hosted_style);
     }
     {
-        S3::URI uri(Poco::URI("https://bucketname.s3-us-east-2.amazonaws.com/data"));
+        S3::URI uri("https://bucketname.s3-us-east-2.amazonaws.com/data");
         ASSERT_EQ("https://s3-us-east-2.amazonaws.com", uri.endpoint);
         ASSERT_EQ("bucketname", uri.bucket);
         ASSERT_EQ("data", uri.key);
@@ -155,7 +155,7 @@ TEST(S3UriTest, validPatterns)
         ASSERT_EQ(true, uri.is_virtual_hosted_style);
     }
     {
-        S3::URI uri(Poco::URI("https://s3-us-east-2.amazonaws.com/bucketname/data"));
+        S3::URI uri("https://s3-us-east-2.amazonaws.com/bucketname/data");
         ASSERT_EQ("https://s3-us-east-2.amazonaws.com", uri.endpoint);
         ASSERT_EQ("bucketname", uri.bucket);
         ASSERT_EQ("data", uri.key);
@@ -166,7 +166,7 @@ TEST(S3UriTest, validPatterns)
 
 TEST_P(S3UriTest, invalidPatterns)
 {
-    ASSERT_ANY_THROW(S3::URI(Poco::URI(GetParam())));
+    ASSERT_ANY_THROW(S3::URI new_uri(GetParam()));
 }
 
 TEST(S3UriTest, versionIdChecks)
diff --git a/tests/queries/0_stateless/02480_s3_support_wildcard.reference b/tests/queries/0_stateless/02480_s3_support_wildcard.reference
new file mode 100644
index 000000000000..c6b63f647f84
--- /dev/null
+++ b/tests/queries/0_stateless/02480_s3_support_wildcard.reference
@@ -0,0 +1,43 @@
+-- { echo }
+drop table if exists test_02480_write;
+drop table if exists test_02480_write2;
+create table test_02480_write (a UInt64, b String) engine = S3(s3_conn, filename='test_02480_{_partition_id}', format=Parquet) partition by a;
+set s3_truncate_on_insert=1;
+insert into test_02480_write values (1, 'a'), (22, 'b'), (333, 'c');
+select a, b from s3(s3_conn, filename='test_02480_*', format=Parquet) order by a;
+1	a
+22	b
+333	c
+select a, b from s3(s3_conn, filename='test_02480_?', format=Parquet) order by a;
+1	a
+select a, b from s3(s3_conn, filename='test_02480_??', format=Parquet) order by a;
+22	b
+select a, b from s3(s3_conn, filename='test_02480_?*?', format=Parquet) order by a;
+22	b
+333	c
+select a, b from s3(s3_conn, filename='test_02480_{1,333}', format=Parquet) order by a;
+1	a
+333	c
+select a, b from s3(s3_conn, filename='test_02480_{1..333}', format=Parquet) order by a;
+1	a
+22	b
+333	c
+create table test_02480_write2 (a UInt64, b String) engine = S3(s3_conn, filename='prefix/test_02480_{_partition_id}', format=Parquet) partition by a;
+set s3_truncate_on_insert=1;
+insert into test_02480_write2 values (4, 'd'), (55, 'f'), (666, 'g');
+select a, b from s3(s3_conn, filename='*/test_02480_*', format=Parquet) order by a;
+4	d
+55	f
+666	g
+select a, b from s3(s3_conn, filename='*/test_02480_?', format=Parquet) order by a;
+4	d
+select a, b from s3(s3_conn, filename='prefix/test_02480_??', format=Parquet) order by a;
+55	f
+select a, b from s3(s3_conn, filename='prefi?/test_02480_*', format=Parquet) order by a;
+4	d
+55	f
+666	g
+select a, b from s3(s3_conn, filename='p?*/test_02480_{56..666}', format=Parquet) order by a;
+666	g
+drop table test_02480_write;
+drop table test_02480_write2;
diff --git a/tests/queries/0_stateless/02480_s3_support_wildcard.sql b/tests/queries/0_stateless/02480_s3_support_wildcard.sql
new file mode 100644
index 000000000000..9da5a022dc40
--- /dev/null
+++ b/tests/queries/0_stateless/02480_s3_support_wildcard.sql
@@ -0,0 +1,29 @@
+-- Tags: no-parallel, no-fasttest
+-- Tag no-fasttest: Depends on AWS
+
+-- { echo }
+drop table if exists test_02480_write;
+drop table if exists test_02480_write2;
+create table test_02480_write (a UInt64, b String) engine = S3(s3_conn, filename='test_02480_{_partition_id}', format=Parquet) partition by a;
+set s3_truncate_on_insert=1;
+insert into test_02480_write values (1, 'a'), (22, 'b'), (333, 'c');
+
+select a, b from s3(s3_conn, filename='test_02480_*', format=Parquet) order by a;
+select a, b from s3(s3_conn, filename='test_02480_?', format=Parquet) order by a;
+select a, b from s3(s3_conn, filename='test_02480_??', format=Parquet) order by a;
+select a, b from s3(s3_conn, filename='test_02480_?*?', format=Parquet) order by a;
+select a, b from s3(s3_conn, filename='test_02480_{1,333}', format=Parquet) order by a;
+select a, b from s3(s3_conn, filename='test_02480_{1..333}', format=Parquet) order by a;
+
+create table test_02480_write2 (a UInt64, b String) engine = S3(s3_conn, filename='prefix/test_02480_{_partition_id}', format=Parquet) partition by a;
+set s3_truncate_on_insert=1;
+insert into test_02480_write2 values (4, 'd'), (55, 'f'), (666, 'g');
+
+select a, b from s3(s3_conn, filename='*/test_02480_*', format=Parquet) order by a;
+select a, b from s3(s3_conn, filename='*/test_02480_?', format=Parquet) order by a;
+select a, b from s3(s3_conn, filename='prefix/test_02480_??', format=Parquet) order by a;
+select a, b from s3(s3_conn, filename='prefi?/test_02480_*', format=Parquet) order by a;
+select a, b from s3(s3_conn, filename='p?*/test_02480_{56..666}', format=Parquet) order by a;
+
+drop table test_02480_write;
+drop table test_02480_write2;
