{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 34506,
  "instance_id": "ClickHouse__ClickHouse-34506",
  "issue_numbers": [
    "34500"
  ],
  "base_commit": "1774836d4f8214573f40cbda3a9346d04e50872e",
  "patch": "diff --git a/src/Common/ColumnsHashing.h b/src/Common/ColumnsHashing.h\nindex f32707798f7c..fbd3e71f9b82 100644\n--- a/src/Common/ColumnsHashing.h\n+++ b/src/Common/ColumnsHashing.h\n@@ -387,47 +387,52 @@ struct HashMethodSingleLowCardinalityColumn : public SingleColumnMethod\n     }\n \n     template <typename Data>\n-    ALWAYS_INLINE FindResult findFromRow(Data & data, size_t row_, Arena & pool)\n+    ALWAYS_INLINE FindResult findKey(Data & data, size_t row_, Arena & pool)\n     {\n         size_t row = getIndexAt(row_);\n \n         if (is_nullable && row == 0)\n         {\n             if constexpr (has_mapped)\n-                return FindResult(data.hasNullKeyData() ? &data.getNullKeyData() : nullptr, data.hasNullKeyData());\n+                return FindResult(data.hasNullKeyData() ? &data.getNullKeyData() : nullptr, data.hasNullKeyData(), 0);\n             else\n-                return FindResult(data.hasNullKeyData());\n+                return FindResult(data.hasNullKeyData(), 0);\n         }\n \n         if (visit_cache[row] != VisitValue::Empty)\n         {\n             if constexpr (has_mapped)\n-                return FindResult(&mapped_cache[row], visit_cache[row] == VisitValue::Found);\n+                return FindResult(&mapped_cache[row], visit_cache[row] == VisitValue::Found, 0);\n             else\n-                return FindResult(visit_cache[row] == VisitValue::Found);\n+                return FindResult(visit_cache[row] == VisitValue::Found, 0);\n         }\n \n         auto key_holder = getKeyHolder(row_, pool);\n \n-        typename Data::iterator it;\n+        typename Data::LookupResult it;\n         if (saved_hash)\n-            it = data.find(*key_holder, saved_hash[row]);\n+            it = data.find(keyHolderGetKey(key_holder), saved_hash[row]);\n         else\n-            it = data.find(*key_holder);\n+            it = data.find(keyHolderGetKey(key_holder));\n \n-        bool found = it != data.end();\n+        bool found = it;\n         visit_cache[row] = found ? VisitValue::Found : VisitValue::NotFound;\n \n         if constexpr (has_mapped)\n         {\n             if (found)\n-                mapped_cache[row] = it->second;\n+                mapped_cache[row] = it->getMapped();\n         }\n \n+        size_t offset = 0;\n+\n+        if constexpr (FindResult::has_offset)\n+            offset = found ? data.offsetInternal(it) : 0;\n+\n         if constexpr (has_mapped)\n-            return FindResult(&mapped_cache[row], found);\n+            return FindResult(&mapped_cache[row], found, offset);\n         else\n-            return FindResult(found);\n+            return FindResult(found, offset);\n     }\n \n     template <typename Data>\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02180_group_by_lowcardinality.reference b/tests/queries/0_stateless/02180_group_by_lowcardinality.reference\nnew file mode 100644\nindex 000000000000..a7149390d1a5\n--- /dev/null\n+++ b/tests/queries/0_stateless/02180_group_by_lowcardinality.reference\n@@ -0,0 +1,10 @@\n+{\"val\":\"1563.8\",\"avg(toUInt32(val))\":null}\n+{\"val\":\"891.4\",\"avg(toUInt32(val))\":null}\n+{\"val\":\"584.4\",\"avg(toUInt32(val))\":null}\n+{\"val\":\"269\",\"avg(toUInt32(val))\":269}\n+{\"val\":\"1233.4\",\"avg(toUInt32(val))\":null}\n+{\"val\":\"1833\",\"avg(toUInt32(val))\":1833}\n+{\"val\":\"1009.4\",\"avg(toUInt32(val))\":null}\n+{\"val\":\"1178.6\",\"avg(toUInt32(val))\":null}\n+{\"val\":\"372.6\",\"avg(toUInt32(val))\":null}\n+{\"val\":\"232.4\",\"avg(toUInt32(val))\":null}\ndiff --git a/tests/queries/0_stateless/02180_group_by_lowcardinality.sql b/tests/queries/0_stateless/02180_group_by_lowcardinality.sql\nnew file mode 100644\nindex 000000000000..463753a624e4\n--- /dev/null\n+++ b/tests/queries/0_stateless/02180_group_by_lowcardinality.sql\n@@ -0,0 +1,10 @@\n+create table if not exists t_group_by_lowcardinality(p_date Date, val LowCardinality(Nullable(String))) \n+engine=MergeTree() partition by p_date order by tuple();\n+\n+insert into t_group_by_lowcardinality select today() as p_date, toString(number/5) as val from numbers(10000);\n+insert into t_group_by_lowcardinality select today() as p_date, Null as val from numbers(100);\n+\n+select val, avg(toUInt32(val)) from t_group_by_lowcardinality group by val limit 10 settings max_threads=1, max_rows_to_group_by=100, group_by_overflow_mode='any' format JSONEachRow;\n+\n+drop table if exists t_group_by_lowcardinality;\n+\n",
  "problem_statement": "group by column(LowCardinality) crash in 'any' model\nversion:  v21.8.14.5-lts\r\nreproduce:\r\n```\r\ncreate database if not exists d_group_by_lowcardinality;\r\n\r\ndrop table if exists d_group_by_lowcardinality.t_group_by_lowcardinality;\r\ncreate table if not exists d_group_by_lowcardinality.t_group_by_lowcardinality(p_date Date, val LowCardinality(Nullable(String)))\r\nengine=MergeTree() partition by p_date order by tuple();\r\n\r\ninsert into d_group_by_lowcardinality.t_group_by_lowcardinality select today() as p_date, toString(number/5) as val from numbers(10000);\r\ninsert into d_group_by_lowcardinality.t_group_by_lowcardinality select today() as p_date, Null as val from numbers(100);\r\n\r\nselect val, avg(toUInt32(val)) from d_group_by_lowcardinality.t_group_by_lowcardinality group by val limit 10 settings max_threads=1, max_rows_to_group_by=100, group_by_overflow_mode='any' format Null;\r\n\r\ndrop table if exists d_group_by_lowcardinality.t_group_by_lowcardinality;\r\ndrop database if exists d_group_by_lowcardinality;\r\n```\r\nsome crash log:\r\n```\r\n[9c30c96270b6] 2022.02.10 12:22:42.421080 [ 25499 ] <Fatal> BaseDaemon: ########################################                                                                               \r\n[9c30c96270b6] 2022.02.10 12:22:42.438473 [ 25499 ] <Fatal> BaseDaemon: (version 22.1.3.1, build id: AE4FF1FC8784CB9E7B68B8204E52B52566D6D843) (from thread 24614) (query_id: 1bb2c351-2c14-4066-ba2d-7eafea07859e)Received signal Aborted (6)\r\n[9c30c96270b6] 2022.02.10 12:22:42.438767 [ 25499 ] <Fatal> BaseDaemon:                                                                                                                               [9c30c96270b6] 2022.02.10 12:22:42.439062 [ 25499 ] <Fatal> BaseDaemon: Stack trace: 0x7f89584d1d22 0x7f89584bb862 0x7f89584bb747 0x7f89584ca616 0x7f895475c1bf 0x7f89394b6354 0x7f89395b503f 0x7f89394387cb 0x7f89393e3ff1 0x7f89328b8a9d 0x7f89328b6a69 0x7f893332e326 0x7f893332e202 0x7f8933335d55 0x7f8933336064 0x7f89333350ec 0x7f89333345a5 0x7f893334b5b0 0x7f893334b4ad 0x7f893334b41d 0x7f893334b3c1 0x7f893334b2d2 0x7f893334b172 0x7f893334affd 0x7f893334afbd 0x7f893334af95 0x7f893334af60 0x7f895ae73166 0x7f895ae68e15 0x7f895ae68766 0x7f895ae6fcd1 0x7f895ae6fc3d 0x7f895ae6fb65 0x7f895ae6f42f 0x7f8958837259 0x7f89585935e3                                                                                                                                                                        [9c30c96270b6] 2022.02.10 12:22:44.074333 [ 25499 ] <Fatal> BaseDaemon: 4. gsignal @ 0x92c6d22 in /root/freedomDR/ClickHouse/build_debug/src/AggregateFunctions/libclickhouse_aggregate_functionsd.so\r\n[9c30c96270b6] 2022.02.10 12:22:44.299749 [ 25499 ] <Fatal> BaseDaemon: 5. abort @ 0x92b0862 in /root/freedomDR/ClickHouse/build_debug/src/AggregateFunctions/libclickhouse_aggregate_functionsd.so  \r\n[9c30c96270b6] 2022.02.10 12:22:44.522865 [ 25499 ] <Fatal> BaseDaemon: 6. ? @ 0x92b0747 in /root/freedomDR/ClickHouse/build_debug/src/AggregateFunctions/libclickhouse_aggregate_functionsd.so      \r\n[9c30c96270b6] 2022.02.10 12:22:44.748240 [ 25499 ] <Fatal> BaseDaemon: 7. ? @ 0x92bf616 in /root/freedomDR/ClickHouse/build_debug/src/AggregateFunctions/libclickhouse_aggregate_functionsd.so      \r\n[9c30c96270b6] 2022.02.10 12:22:45.050277 [ 25499 ] <Fatal> BaseDaemon: 8. ./build_debug/./base/base/../base/StringRef.h:39: StringRef::StringRef<char8_t, void>(char8_t const*, unsigned long) @ 0x55511bf in /root/freedomDR/ClickHouse/build_debug/src/AggregateFunctions/libclickhouse_aggregate_functionsd.so                                                                                       \r\n[9c30c96270b6] 2022.02.10 12:22:46.244445 [ 25499 ] <Fatal> BaseDaemon: 9. ./build_debug/./src/Common/ColumnsHashing.h:94: DB::ColumnsHashing::HashMethodString<PairNoInit<StringRef, char*>, char*, true, true, false>::getKeyHolder(long, DB::Arena&) const @ 0x190b354 in /root/freedomDR/ClickHouse/build_debug/src/libclickhouse_interpretersd.so                                                      \r\n[9c30c96270b6] 2022.02.10 12:22:46.740614 [ 25499 ] <Fatal> BaseDaemon: 10.1. inlined from ./build_debug/./src/Common/ColumnsHashingImpl.h:164: DB::ColumnsHashing::columns_hashing_impl::FindResultImpl<char*, false> DB::ColumnsHashing::columns_hashing_impl::HashMethodBase<DB::ColumnsHashing::HashMethodString<PairNoInit<StringRef, char*>, char*, true, true, false>, PairNoInit<StringRef, char*>, char*, true, false>::findKey<DB::AggregationDataWithNullKey<HashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, HashTableGrower<8ul>, Allocator<true, true> > > >(DB::AggregationDataWithNullKey<HashMapTable<StringRef, HashMapCellWithSavedHash<StringRef, char*, DefaultHash<StringRef>, HashTableNoState>, DefaultHash<StringRef>, HashTableGrower<8ul>, Allocator<true, true> > >&, unsigned long, DB::Arena&)\r\n```\r\nIt is like call getKeyHolder crash (should use HashMethodSingleLowCardinalityColumn::getKeyHolder ). I can't fix it. Does anyone have ideas?\n",
  "hints_text": "",
  "created_at": "2022-02-10T16:55:14Z"
}