{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 71457,
  "instance_id": "ClickHouse__ClickHouse-71457",
  "issue_numbers": [
    "71381"
  ],
  "base_commit": "0011bc5e0786ce9ae7c1f88bf4af0fcc26ace9e7",
  "patch": "diff --git a/src/Storages/MergeTree/MergeTreeIndexVectorSimilarity.cpp b/src/Storages/MergeTree/MergeTreeIndexVectorSimilarity.cpp\nindex 5a725922e142..f95b840e2237 100644\n--- a/src/Storages/MergeTree/MergeTreeIndexVectorSimilarity.cpp\n+++ b/src/Storages/MergeTree/MergeTreeIndexVectorSimilarity.cpp\n@@ -345,10 +345,11 @@ void MergeTreeIndexAggregatorVectorSimilarity::update(const Block & block, size_\n         throw Exception(ErrorCodes::INCORRECT_DATA, \"Index granularity is too big: more than {} rows per index granule.\", std::numeric_limits<UInt32>::max());\n \n     if (index_sample_block.columns() > 1)\n-        throw Exception(ErrorCodes::LOGICAL_ERROR, \"Expected block with single column\");\n+        throw Exception(ErrorCodes::LOGICAL_ERROR, \"Expected that index is build over a single column\");\n \n-    const String & index_column_name = index_sample_block.getByPosition(0).name;\n-    const ColumnPtr & index_column = block.getByName(index_column_name).column;\n+    const auto & index_column_name = index_sample_block.getByPosition(0).name;\n+\n+    const auto & index_column = block.getByName(index_column_name).column;\n     ColumnPtr column_cut = index_column->cut(*pos, rows_read);\n \n     const auto * column_array = typeid_cast<const ColumnArray *>(column_cut.get());\n@@ -382,8 +383,7 @@ void MergeTreeIndexAggregatorVectorSimilarity::update(const Block & block, size_\n     if (index->size() + rows > std::numeric_limits<UInt32>::max())\n         throw Exception(ErrorCodes::INCORRECT_DATA, \"Size of vector similarity index would exceed 4 billion entries\");\n \n-    DataTypePtr data_type = block.getDataTypes()[0];\n-    const auto * data_type_array = typeid_cast<const DataTypeArray *>(data_type.get());\n+    const auto * data_type_array = typeid_cast<const DataTypeArray *>(block.getByName(index_column_name).type.get());\n     if (!data_type_array)\n         throw Exception(ErrorCodes::LOGICAL_ERROR, \"Expected data type Array(Float*)\");\n     const TypeIndex nested_type_index = data_type_array->getNestedType()->getTypeId();\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02354_vector_search_multiple_indexes.reference b/tests/queries/0_stateless/02354_vector_search_bug_52282.reference\nsimilarity index 100%\nrename from tests/queries/0_stateless/02354_vector_search_multiple_indexes.reference\nrename to tests/queries/0_stateless/02354_vector_search_bug_52282.reference\ndiff --git a/tests/queries/0_stateless/02354_vector_search_bug_52282.sql b/tests/queries/0_stateless/02354_vector_search_bug_52282.sql\nnew file mode 100644\nindex 000000000000..b8066ce278ad\n--- /dev/null\n+++ b/tests/queries/0_stateless/02354_vector_search_bug_52282.sql\n@@ -0,0 +1,13 @@\n+-- Tags: no-fasttest, no-ordinary-database\n+\n+SET allow_experimental_vector_similarity_index = 1;\n+\n+-- Issue #52258: Vector similarity indexes must reject empty Arrays or Arrays with default values\n+\n+DROP TABLE IF EXISTS tab;\n+\n+CREATE TABLE tab (id UInt64, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'L2Distance')) ENGINE = MergeTree() ORDER BY id;\n+INSERT INTO tab VALUES (1, []); -- { serverError INCORRECT_DATA }\n+INSERT INTO tab (id) VALUES (1); -- { serverError INCORRECT_DATA }\n+\n+DROP TABLE tab;\ndiff --git a/tests/queries/0_stateless/02354_vector_search_bugs.reference b/tests/queries/0_stateless/02354_vector_search_bug_69085.reference\nsimilarity index 72%\nrename from tests/queries/0_stateless/02354_vector_search_bugs.reference\nrename to tests/queries/0_stateless/02354_vector_search_bug_69085.reference\nindex 9b610cf543ae..3b4e2d9ef179 100644\n--- a/tests/queries/0_stateless/02354_vector_search_bugs.reference\n+++ b/tests/queries/0_stateless/02354_vector_search_bug_69085.reference\n@@ -1,10 +1,3 @@\n-Rejects INSERTs of Arrays with different sizes\n-Issue #52258: Empty Arrays or Arrays with default values are rejected\n-It is possible to create parts with different Array vector sizes but there will be an error at query time\n-Correctness of index with > 1 mark\n-1\t[1,0]\t0\n-9000\t[9000,0]\t0\n-Issue #69085: Reference vector computed by a subquery\n Expression (Projection)\n   Limit (preliminary LIMIT (without OFFSET))\n     Sorting (Sorting for ORDER BY)\n@@ -40,4 +33,3 @@ Expression (Projection)\n             Condition: true\n             Parts: 1/1\n             Granules: 4/4\n-index_granularity_bytes = 0 is disallowed\ndiff --git a/tests/queries/0_stateless/02354_vector_search_bug_69085.sql b/tests/queries/0_stateless/02354_vector_search_bug_69085.sql\nnew file mode 100644\nindex 000000000000..4dbcdf66e36a\n--- /dev/null\n+++ b/tests/queries/0_stateless/02354_vector_search_bug_69085.sql\n@@ -0,0 +1,52 @@\n+-- Tags: no-fasttest, no-ordinary-database\n+\n+SET allow_experimental_vector_similarity_index = 1;\n+SET enable_analyzer = 0;\n+\n+-- Issue #69085: Reference vector for vector search is computed by a subquery\n+\n+DROP TABLE IF EXISTS tab;\n+\n+CREATE TABLE tab(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'cosineDistance', 'f16', 0, 0) GRANULARITY 2) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity = 3;\n+INSERT INTO tab VALUES (0, [4.6, 2.3]), (1, [2.0, 3.2]), (2, [4.2, 3.4]), (3, [5.3, 2.9]), (4, [2.4, 5.2]), (5, [5.3, 2.3]), (6, [1.0, 9.3]), (7, [5.5, 4.7]), (8, [6.4, 3.5]), (9, [5.3, 2.5]), (10, [6.4, 3.4]), (11, [6.4, 3.2]);\n+\n+-- works\n+EXPLAIN indexes = 1\n+WITH [0., 2.] AS reference_vec\n+SELECT\n+    id,\n+    vec,\n+    cosineDistance(vec, reference_vec) AS distance\n+FROM tab\n+ORDER BY distance\n+LIMIT 1;\n+\n+-- does not work\n+EXPLAIN indexes = 1\n+WITH (\n+    SELECT vec\n+    FROM tab\n+    LIMIT 1\n+) AS reference_vec\n+SELECT\n+    id,\n+    vec,\n+    cosineDistance(vec, reference_vec) AS distance\n+FROM tab\n+ORDER BY distance\n+LIMIT 1;\n+\n+-- does not work as well\n+EXPLAIN indexes = 1\n+WITH (\n+    SELECT [0., 2.]\n+) AS reference_vec\n+SELECT\n+    id,\n+    vec,\n+    cosineDistance(vec, reference_vec) AS distance\n+FROM tab\n+ORDER BY distance\n+LIMIT 1;\n+\n+DROP TABLE tab;\ndiff --git a/tests/queries/0_stateless/02354_vector_search_bug_71381.reference b/tests/queries/0_stateless/02354_vector_search_bug_71381.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/02354_vector_search_bug_71381.sql b/tests/queries/0_stateless/02354_vector_search_bug_71381.sql\nnew file mode 100644\nindex 000000000000..9e3246700b8d\n--- /dev/null\n+++ b/tests/queries/0_stateless/02354_vector_search_bug_71381.sql\n@@ -0,0 +1,20 @@\n+-- Tags: no-fasttest, no-ordinary-database\n+\n+SET allow_experimental_vector_similarity_index = 1;\n+\n+-- Issue #71381: Usage of vector similarity index and further skipping indexes on the same table\n+\n+DROP TABLE IF EXISTS tab;\n+\n+CREATE TABLE tab(\n+  val String,\n+  vec Array(Float32),\n+  INDEX ann_idx vec TYPE vector_similarity('hnsw', 'cosineDistance'),\n+  INDEX set_idx val TYPE set(100)\n+)\n+ENGINE = MergeTree()\n+ORDER BY tuple();\n+\n+INSERT INTO tab VALUES ('hello world', [0.0]);\n+\n+DROP TABLE tab;\ndiff --git a/tests/queries/0_stateless/02354_vector_search_bug_adaptive_index_granularity.reference b/tests/queries/0_stateless/02354_vector_search_bug_adaptive_index_granularity.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/02354_vector_search_bug_adaptive_index_granularity.sql b/tests/queries/0_stateless/02354_vector_search_bug_adaptive_index_granularity.sql\nnew file mode 100644\nindex 000000000000..208b5b7a874e\n--- /dev/null\n+++ b/tests/queries/0_stateless/02354_vector_search_bug_adaptive_index_granularity.sql\n@@ -0,0 +1,20 @@\n+-- Tags: no-fasttest, no-ordinary-database\n+\n+-- Tests that vector similarity indexes cannot be created with index_granularity_bytes = 0\n+\n+SET allow_experimental_vector_similarity_index = 1;\n+\n+DROP TABLE IF EXISTS tab;\n+\n+-- If adaptive index granularity is disabled, certain vector search queries with PREWHERE run into LOGICAL_ERRORs.\n+--     SET allow_experimental_vector_similarity_index = 1;\n+--     CREATE TABLE tab (`id` Int32, `vec` Array(Float32), INDEX idx vec TYPE  vector_similarity('hnsw', 'L2Distance') GRANULARITY 100000000) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity_bytes = 0;\n+--     INSERT INTO tab SELECT number, [toFloat32(number), 0.] FROM numbers(10000);\n+--     WITH [1., 0.] AS reference_vec SELECT id, L2Distance(vec, reference_vec) FROM tab PREWHERE toLowCardinality(10) ORDER BY L2Distance(vec, reference_vec) ASC LIMIT 100;\n+-- As a workaround, force enabled adaptive index granularity for now (it is the default anyways).\n+CREATE TABLE tab(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'L2Distance')) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity_bytes = 0; -- { serverError INVALID_SETTING_VALUE }\n+\n+CREATE TABLE tab(id Int32, vec Array(Float32)) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity_bytes = 0;\n+ALTER TABLE tab ADD INDEX vec_idx1(vec) TYPE vector_similarity('hnsw', 'cosineDistance'); -- { serverError INVALID_SETTING_VALUE }\n+\n+DROP TABLE tab;\ndiff --git a/tests/queries/0_stateless/02354_vector_search_bug_different_array_sizes.reference b/tests/queries/0_stateless/02354_vector_search_bug_different_array_sizes.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/02354_vector_search_bug_different_array_sizes.sql b/tests/queries/0_stateless/02354_vector_search_bug_different_array_sizes.sql\nnew file mode 100644\nindex 000000000000..41b9d7869e47\n--- /dev/null\n+++ b/tests/queries/0_stateless/02354_vector_search_bug_different_array_sizes.sql\n@@ -0,0 +1,24 @@\n+-- Tags: no-fasttest, no-ordinary-database\n+\n+SET allow_experimental_vector_similarity_index = 1;\n+SET enable_analyzer = 1; -- 0 vs. 1 produce slightly different error codes, make it future-proof\n+\n+DROP TABLE IF EXISTS tab;\n+\n+CREATE TABLE tab(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'L2Distance')) ENGINE = MergeTree ORDER BY id;\n+\n+-- Vector similarity indexes reject INSERTs of Arrays with different sizes\n+INSERT INTO tab values (0, [2.2, 2.3]) (1, [3.1, 3.2, 3.3]); -- { serverError INCORRECT_DATA }\n+\n+-- It is possible to create parts with different Array vector sizes but there will be an error at query time\n+SYSTEM STOP MERGES tab;\n+INSERT INTO tab values (0, [2.2, 2.3]) (1, [3.1, 3.2]);\n+INSERT INTO tab values (2, [2.2, 2.3, 2.4]) (3, [3.1, 3.2, 3.3]);\n+\n+WITH [0.0, 2.0] AS reference_vec\n+SELECT id, vec, L2Distance(vec, reference_vec)\n+FROM tab\n+ORDER BY L2Distance(vec, reference_vec)\n+LIMIT 3; -- { serverError SIZES_OF_ARRAYS_DONT_MATCH }\n+\n+DROP TABLE tab;\ndiff --git a/tests/queries/0_stateless/02354_vector_search_bug_multiple_indexes.reference b/tests/queries/0_stateless/02354_vector_search_bug_multiple_indexes.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/02354_vector_search_multiple_indexes.sql b/tests/queries/0_stateless/02354_vector_search_bug_multiple_indexes.sql\nsimilarity index 100%\nrename from tests/queries/0_stateless/02354_vector_search_multiple_indexes.sql\nrename to tests/queries/0_stateless/02354_vector_search_bug_multiple_indexes.sql\ndiff --git a/tests/queries/0_stateless/02354_vector_search_bug_multiple_marks.reference b/tests/queries/0_stateless/02354_vector_search_bug_multiple_marks.reference\nnew file mode 100644\nindex 000000000000..117bf2cead8f\n--- /dev/null\n+++ b/tests/queries/0_stateless/02354_vector_search_bug_multiple_marks.reference\n@@ -0,0 +1,2 @@\n+1\t[1,0]\t0\n+9000\t[9000,0]\t0\ndiff --git a/tests/queries/0_stateless/02354_vector_search_bug_multiple_marks.sql b/tests/queries/0_stateless/02354_vector_search_bug_multiple_marks.sql\nnew file mode 100644\nindex 000000000000..fb99dd2361c5\n--- /dev/null\n+++ b/tests/queries/0_stateless/02354_vector_search_bug_multiple_marks.sql\n@@ -0,0 +1,25 @@\n+-- Tags: no-fasttest, no-ordinary-database\n+\n+-- Tests correctness of vector similarity index with > 1 mark\n+\n+SET allow_experimental_vector_similarity_index = 1;\n+SET enable_analyzer = 0;\n+\n+DROP TABLE IF EXISTS tab;\n+\n+CREATE TABLE tab(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'L2Distance')) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity = 8192;\n+INSERT INTO tab SELECT number, [toFloat32(number), 0.0] from numbers(10000);\n+\n+WITH [1.0, 0.0] AS reference_vec\n+SELECT id, vec, L2Distance(vec, reference_vec)\n+FROM tab\n+ORDER BY L2Distance(vec, reference_vec)\n+LIMIT 1;\n+\n+WITH [9000.0, 0.0] AS reference_vec\n+SELECT id, vec, L2Distance(vec, reference_vec)\n+FROM tab\n+ORDER BY L2Distance(vec, reference_vec)\n+LIMIT 1;\n+\n+DROP TABLE tab;\ndiff --git a/tests/queries/0_stateless/02354_vector_search_bugs.sql b/tests/queries/0_stateless/02354_vector_search_bugs.sql\ndeleted file mode 100644\nindex d55bdb88a76a..000000000000\n--- a/tests/queries/0_stateless/02354_vector_search_bugs.sql\n+++ /dev/null\n@@ -1,119 +0,0 @@\n--- Tags: no-fasttest, no-ordinary-database\n-\n--- Tests various bugs and special cases for vector indexes.\n-\n-SET allow_experimental_vector_similarity_index = 1;\n-SET enable_analyzer = 1; -- 0 vs. 1 produce slightly different error codes, make it future-proof\n-\n-DROP TABLE IF EXISTS tab;\n-\n-SELECT 'Rejects INSERTs of Arrays with different sizes';\n-\n-CREATE TABLE tab(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'L2Distance')) ENGINE = MergeTree ORDER BY id;\n-INSERT INTO tab values (0, [2.2, 2.3]) (1, [3.1, 3.2, 3.3]); -- { serverError INCORRECT_DATA }\n-DROP TABLE tab;\n-\n-SELECT 'Issue #52258: Empty Arrays or Arrays with default values are rejected';\n-\n-CREATE TABLE tab (id UInt64, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'L2Distance')) ENGINE = MergeTree() ORDER BY id;\n-INSERT INTO tab VALUES (1, []); -- { serverError INCORRECT_DATA }\n-INSERT INTO tab (id) VALUES (1); -- { serverError INCORRECT_DATA }\n-DROP TABLE tab;\n-\n-SELECT 'It is possible to create parts with different Array vector sizes but there will be an error at query time';\n-\n-CREATE TABLE tab(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'L2Distance')) ENGINE = MergeTree ORDER BY id;\n-SYSTEM STOP MERGES tab;\n-INSERT INTO tab values (0, [2.2, 2.3]) (1, [3.1, 3.2]);\n-INSERT INTO tab values (2, [2.2, 2.3, 2.4]) (3, [3.1, 3.2, 3.3]);\n-\n-WITH [0.0, 2.0] AS reference_vec\n-SELECT id, vec, L2Distance(vec, reference_vec)\n-FROM tab\n-ORDER BY L2Distance(vec, reference_vec)\n-LIMIT 3; -- { serverError SIZES_OF_ARRAYS_DONT_MATCH }\n-\n-DROP TABLE tab;\n-\n-SELECT 'Correctness of index with > 1 mark';\n-\n-CREATE TABLE tab(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'L2Distance')) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity = 8192;\n-INSERT INTO tab SELECT number, [toFloat32(number), 0.0] from numbers(10000);\n-\n-WITH [1.0, 0.0] AS reference_vec\n-SELECT id, vec, L2Distance(vec, reference_vec)\n-FROM tab\n-ORDER BY L2Distance(vec, reference_vec)\n-LIMIT 1;\n-\n-WITH [9000.0, 0.0] AS reference_vec\n-SELECT id, vec, L2Distance(vec, reference_vec)\n-FROM tab\n-ORDER BY L2Distance(vec, reference_vec)\n-LIMIT 1;\n-\n-DROP TABLE tab;\n-\n-SELECT 'Issue #69085: Reference vector computed by a subquery';\n-\n-CREATE TABLE tab(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'cosineDistance', 'f16', 0, 0) GRANULARITY 2) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity = 3;\n-INSERT INTO tab VALUES (0, [4.6, 2.3]), (1, [2.0, 3.2]), (2, [4.2, 3.4]), (3, [5.3, 2.9]), (4, [2.4, 5.2]), (5, [5.3, 2.3]), (6, [1.0, 9.3]), (7, [5.5, 4.7]), (8, [6.4, 3.5]), (9, [5.3, 2.5]), (10, [6.4, 3.4]), (11, [6.4, 3.2]);\n-\n--- works\n-EXPLAIN indexes = 1\n-WITH [0., 2.] AS reference_vec\n-SELECT\n-    id,\n-    vec,\n-    cosineDistance(vec, reference_vec) AS distance\n-FROM tab\n-ORDER BY distance\n-LIMIT 1\n-SETTINGS enable_analyzer = 0;\n-\n--- does not work\n-EXPLAIN indexes = 1\n-WITH (\n-    SELECT vec\n-    FROM tab\n-    LIMIT 1\n-) AS reference_vec\n-SELECT\n-    id,\n-    vec,\n-    cosineDistance(vec, reference_vec) AS distance\n-FROM tab\n-ORDER BY distance\n-LIMIT 1\n-SETTINGS enable_analyzer = 0;\n-\n--- does not work as well\n-EXPLAIN indexes = 1\n-WITH (\n-    SELECT [0., 2.]\n-) AS reference_vec\n-SELECT\n-    id,\n-    vec,\n-    cosineDistance(vec, reference_vec) AS distance\n-FROM tab\n-ORDER BY distance\n-LIMIT 1\n-SETTINGS enable_analyzer = 0;\n-\n-DROP TABLE tab;\n-\n-SELECT 'index_granularity_bytes = 0 is disallowed';\n-\n--- If adaptive index granularity is disabled, certain vector search queries with PREWHERE run into LOGICAL_ERRORs.\n---     SET allow_experimental_vector_similarity_index = 1;\n---     CREATE TABLE tab (`id` Int32, `vec` Array(Float32), INDEX idx vec TYPE  vector_similarity('hnsw', 'L2Distance') GRANULARITY 100000000) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity_bytes = 0;\n---     INSERT INTO tab SELECT number, [toFloat32(number), 0.] FROM numbers(10000);\n---     WITH [1., 0.] AS reference_vec SELECT id, L2Distance(vec, reference_vec) FROM tab PREWHERE toLowCardinality(10) ORDER BY L2Distance(vec, reference_vec) ASC LIMIT 100;\n--- As a workaround, force enabled adaptive index granularity for now (it is the default anyways).\n-CREATE TABLE tab(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'L2Distance')) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity_bytes = 0; -- { serverError INVALID_SETTING_VALUE }\n-\n-CREATE TABLE tab(id Int32, vec Array(Float32)) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity_bytes = 0;\n-ALTER TABLE tab ADD INDEX vec_idx1(vec) TYPE vector_similarity('hnsw', 'cosineDistance'); -- { serverError INVALID_SETTING_VALUE }\n-\n-DROP TABLE tab;\n",
  "problem_statement": "[Experimental] Insert into table with vector similarity index and other index throws `Expected data type Array(Float*)`\n**Describe what's wrong**\r\n\r\nWhen using vector similarity indexes / approximate nearest neighbor search indexes with other index types (like set, full_search), `Code: 49. DB::Exception: Expected data type Array(Float*)` is thrown during inserts.\r\n\r\n**Does it reproduce on the most recent release?**\r\n\r\nYes, tried `24.9.2.42-alpine` and `head-alpine`.\r\n\r\n**How to reproduce**\r\nhttps://fiddle.clickhouse.com/033646dc-2f4e-4d7e-9c30-10cc44d74739\r\nhttps://fiddle.clickhouse.com/321f51e6-ca88-4e41-bf61-a1d59041a5ba\r\n```SQL\r\nSET allow_experimental_vector_similarity_index = 1;\r\nSET allow_experimental_full_text_index = 1;\r\n\r\nCREATE TABLE IF NOT EXISTS embeddings_table\r\n(\r\n  value String,\r\n  embedding Array(Float32),\r\n  INDEX ann_idx embedding TYPE vector_similarity('hnsw', 'cosineDistance'),\r\n  INDEX inv_idx value TYPE full_text()\r\n  -- or INDEX set_idx value TYPE set(100) GRANULARITY 100                                   \r\n)\r\nENGINE = MergeTree()                                          \r\nORDER BY tuple();\r\n\r\nINSERT INTO embeddings_table (value, embedding) VALUES ('doc content', [0.0]);\r\n\r\n```\r\n\r\n**Expected behavior**\r\n\r\nI should be able to use both indexes on the same table.\r\n\r\n**Error message and/or stacktrace**\r\n\r\n```\r\nCode: 49. DB::Exception: Expected data type Array(Float*). (LOGICAL_ERROR) (version 24.11.1.643 (official build))\r\n```\r\n\r\n\n",
  "hints_text": "It also reproduce with other index https://fiddle.clickhouse.com/bd8944d7-1e89-4e22-9516-dc6fbf3c4c45 \r\n\r\nGA blocker. ",
  "created_at": "2024-11-05T11:34:35Z",
  "modified_files": [
    "src/Storages/MergeTree/MergeTreeIndexVectorSimilarity.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02354_vector_search_bug_52282.sql",
    "tests/queries/0_stateless/02354_vector_search_bugs.reference",
    "b/tests/queries/0_stateless/02354_vector_search_bug_69085.sql",
    "b/tests/queries/0_stateless/02354_vector_search_bug_71381.sql",
    "b/tests/queries/0_stateless/02354_vector_search_bug_adaptive_index_granularity.sql",
    "b/tests/queries/0_stateless/02354_vector_search_bug_different_array_sizes.sql",
    "b/tests/queries/0_stateless/02354_vector_search_bug_multiple_marks.reference",
    "b/tests/queries/0_stateless/02354_vector_search_bug_multiple_marks.sql",
    "tests/queries/0_stateless/02354_vector_search_bugs.sql"
  ]
}