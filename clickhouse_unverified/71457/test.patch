diff --git a/tests/queries/0_stateless/02354_vector_search_multiple_indexes.reference b/tests/queries/0_stateless/02354_vector_search_bug_52282.reference
similarity index 100%
rename from tests/queries/0_stateless/02354_vector_search_multiple_indexes.reference
rename to tests/queries/0_stateless/02354_vector_search_bug_52282.reference
diff --git a/tests/queries/0_stateless/02354_vector_search_bug_52282.sql b/tests/queries/0_stateless/02354_vector_search_bug_52282.sql
new file mode 100644
index 000000000000..b8066ce278ad
--- /dev/null
+++ b/tests/queries/0_stateless/02354_vector_search_bug_52282.sql
@@ -0,0 +1,13 @@
+-- Tags: no-fasttest, no-ordinary-database
+
+SET allow_experimental_vector_similarity_index = 1;
+
+-- Issue #52258: Vector similarity indexes must reject empty Arrays or Arrays with default values
+
+DROP TABLE IF EXISTS tab;
+
+CREATE TABLE tab (id UInt64, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'L2Distance')) ENGINE = MergeTree() ORDER BY id;
+INSERT INTO tab VALUES (1, []); -- { serverError INCORRECT_DATA }
+INSERT INTO tab (id) VALUES (1); -- { serverError INCORRECT_DATA }
+
+DROP TABLE tab;
diff --git a/tests/queries/0_stateless/02354_vector_search_bugs.reference b/tests/queries/0_stateless/02354_vector_search_bug_69085.reference
similarity index 72%
rename from tests/queries/0_stateless/02354_vector_search_bugs.reference
rename to tests/queries/0_stateless/02354_vector_search_bug_69085.reference
index 9b610cf543ae..3b4e2d9ef179 100644
--- a/tests/queries/0_stateless/02354_vector_search_bugs.reference
+++ b/tests/queries/0_stateless/02354_vector_search_bug_69085.reference
@@ -1,10 +1,3 @@
-Rejects INSERTs of Arrays with different sizes
-Issue #52258: Empty Arrays or Arrays with default values are rejected
-It is possible to create parts with different Array vector sizes but there will be an error at query time
-Correctness of index with > 1 mark
-1	[1,0]	0
-9000	[9000,0]	0
-Issue #69085: Reference vector computed by a subquery
 Expression (Projection)
   Limit (preliminary LIMIT (without OFFSET))
     Sorting (Sorting for ORDER BY)
@@ -40,4 +33,3 @@ Expression (Projection)
             Condition: true
             Parts: 1/1
             Granules: 4/4
-index_granularity_bytes = 0 is disallowed
diff --git a/tests/queries/0_stateless/02354_vector_search_bug_69085.sql b/tests/queries/0_stateless/02354_vector_search_bug_69085.sql
new file mode 100644
index 000000000000..4dbcdf66e36a
--- /dev/null
+++ b/tests/queries/0_stateless/02354_vector_search_bug_69085.sql
@@ -0,0 +1,52 @@
+-- Tags: no-fasttest, no-ordinary-database
+
+SET allow_experimental_vector_similarity_index = 1;
+SET enable_analyzer = 0;
+
+-- Issue #69085: Reference vector for vector search is computed by a subquery
+
+DROP TABLE IF EXISTS tab;
+
+CREATE TABLE tab(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'cosineDistance', 'f16', 0, 0) GRANULARITY 2) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity = 3;
+INSERT INTO tab VALUES (0, [4.6, 2.3]), (1, [2.0, 3.2]), (2, [4.2, 3.4]), (3, [5.3, 2.9]), (4, [2.4, 5.2]), (5, [5.3, 2.3]), (6, [1.0, 9.3]), (7, [5.5, 4.7]), (8, [6.4, 3.5]), (9, [5.3, 2.5]), (10, [6.4, 3.4]), (11, [6.4, 3.2]);
+
+-- works
+EXPLAIN indexes = 1
+WITH [0., 2.] AS reference_vec
+SELECT
+    id,
+    vec,
+    cosineDistance(vec, reference_vec) AS distance
+FROM tab
+ORDER BY distance
+LIMIT 1;
+
+-- does not work
+EXPLAIN indexes = 1
+WITH (
+    SELECT vec
+    FROM tab
+    LIMIT 1
+) AS reference_vec
+SELECT
+    id,
+    vec,
+    cosineDistance(vec, reference_vec) AS distance
+FROM tab
+ORDER BY distance
+LIMIT 1;
+
+-- does not work as well
+EXPLAIN indexes = 1
+WITH (
+    SELECT [0., 2.]
+) AS reference_vec
+SELECT
+    id,
+    vec,
+    cosineDistance(vec, reference_vec) AS distance
+FROM tab
+ORDER BY distance
+LIMIT 1;
+
+DROP TABLE tab;
diff --git a/tests/queries/0_stateless/02354_vector_search_bug_71381.reference b/tests/queries/0_stateless/02354_vector_search_bug_71381.reference
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/queries/0_stateless/02354_vector_search_bug_71381.sql b/tests/queries/0_stateless/02354_vector_search_bug_71381.sql
new file mode 100644
index 000000000000..9e3246700b8d
--- /dev/null
+++ b/tests/queries/0_stateless/02354_vector_search_bug_71381.sql
@@ -0,0 +1,20 @@
+-- Tags: no-fasttest, no-ordinary-database
+
+SET allow_experimental_vector_similarity_index = 1;
+
+-- Issue #71381: Usage of vector similarity index and further skipping indexes on the same table
+
+DROP TABLE IF EXISTS tab;
+
+CREATE TABLE tab(
+  val String,
+  vec Array(Float32),
+  INDEX ann_idx vec TYPE vector_similarity('hnsw', 'cosineDistance'),
+  INDEX set_idx val TYPE set(100)
+)
+ENGINE = MergeTree()
+ORDER BY tuple();
+
+INSERT INTO tab VALUES ('hello world', [0.0]);
+
+DROP TABLE tab;
diff --git a/tests/queries/0_stateless/02354_vector_search_bug_adaptive_index_granularity.reference b/tests/queries/0_stateless/02354_vector_search_bug_adaptive_index_granularity.reference
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/queries/0_stateless/02354_vector_search_bug_adaptive_index_granularity.sql b/tests/queries/0_stateless/02354_vector_search_bug_adaptive_index_granularity.sql
new file mode 100644
index 000000000000..208b5b7a874e
--- /dev/null
+++ b/tests/queries/0_stateless/02354_vector_search_bug_adaptive_index_granularity.sql
@@ -0,0 +1,20 @@
+-- Tags: no-fasttest, no-ordinary-database
+
+-- Tests that vector similarity indexes cannot be created with index_granularity_bytes = 0
+
+SET allow_experimental_vector_similarity_index = 1;
+
+DROP TABLE IF EXISTS tab;
+
+-- If adaptive index granularity is disabled, certain vector search queries with PREWHERE run into LOGICAL_ERRORs.
+--     SET allow_experimental_vector_similarity_index = 1;
+--     CREATE TABLE tab (`id` Int32, `vec` Array(Float32), INDEX idx vec TYPE  vector_similarity('hnsw', 'L2Distance') GRANULARITY 100000000) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity_bytes = 0;
+--     INSERT INTO tab SELECT number, [toFloat32(number), 0.] FROM numbers(10000);
+--     WITH [1., 0.] AS reference_vec SELECT id, L2Distance(vec, reference_vec) FROM tab PREWHERE toLowCardinality(10) ORDER BY L2Distance(vec, reference_vec) ASC LIMIT 100;
+-- As a workaround, force enabled adaptive index granularity for now (it is the default anyways).
+CREATE TABLE tab(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'L2Distance')) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity_bytes = 0; -- { serverError INVALID_SETTING_VALUE }
+
+CREATE TABLE tab(id Int32, vec Array(Float32)) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity_bytes = 0;
+ALTER TABLE tab ADD INDEX vec_idx1(vec) TYPE vector_similarity('hnsw', 'cosineDistance'); -- { serverError INVALID_SETTING_VALUE }
+
+DROP TABLE tab;
diff --git a/tests/queries/0_stateless/02354_vector_search_bug_different_array_sizes.reference b/tests/queries/0_stateless/02354_vector_search_bug_different_array_sizes.reference
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/queries/0_stateless/02354_vector_search_bug_different_array_sizes.sql b/tests/queries/0_stateless/02354_vector_search_bug_different_array_sizes.sql
new file mode 100644
index 000000000000..41b9d7869e47
--- /dev/null
+++ b/tests/queries/0_stateless/02354_vector_search_bug_different_array_sizes.sql
@@ -0,0 +1,24 @@
+-- Tags: no-fasttest, no-ordinary-database
+
+SET allow_experimental_vector_similarity_index = 1;
+SET enable_analyzer = 1; -- 0 vs. 1 produce slightly different error codes, make it future-proof
+
+DROP TABLE IF EXISTS tab;
+
+CREATE TABLE tab(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'L2Distance')) ENGINE = MergeTree ORDER BY id;
+
+-- Vector similarity indexes reject INSERTs of Arrays with different sizes
+INSERT INTO tab values (0, [2.2, 2.3]) (1, [3.1, 3.2, 3.3]); -- { serverError INCORRECT_DATA }
+
+-- It is possible to create parts with different Array vector sizes but there will be an error at query time
+SYSTEM STOP MERGES tab;
+INSERT INTO tab values (0, [2.2, 2.3]) (1, [3.1, 3.2]);
+INSERT INTO tab values (2, [2.2, 2.3, 2.4]) (3, [3.1, 3.2, 3.3]);
+
+WITH [0.0, 2.0] AS reference_vec
+SELECT id, vec, L2Distance(vec, reference_vec)
+FROM tab
+ORDER BY L2Distance(vec, reference_vec)
+LIMIT 3; -- { serverError SIZES_OF_ARRAYS_DONT_MATCH }
+
+DROP TABLE tab;
diff --git a/tests/queries/0_stateless/02354_vector_search_bug_multiple_indexes.reference b/tests/queries/0_stateless/02354_vector_search_bug_multiple_indexes.reference
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/queries/0_stateless/02354_vector_search_multiple_indexes.sql b/tests/queries/0_stateless/02354_vector_search_bug_multiple_indexes.sql
similarity index 100%
rename from tests/queries/0_stateless/02354_vector_search_multiple_indexes.sql
rename to tests/queries/0_stateless/02354_vector_search_bug_multiple_indexes.sql
diff --git a/tests/queries/0_stateless/02354_vector_search_bug_multiple_marks.reference b/tests/queries/0_stateless/02354_vector_search_bug_multiple_marks.reference
new file mode 100644
index 000000000000..117bf2cead8f
--- /dev/null
+++ b/tests/queries/0_stateless/02354_vector_search_bug_multiple_marks.reference
@@ -0,0 +1,2 @@
+1	[1,0]	0
+9000	[9000,0]	0
diff --git a/tests/queries/0_stateless/02354_vector_search_bug_multiple_marks.sql b/tests/queries/0_stateless/02354_vector_search_bug_multiple_marks.sql
new file mode 100644
index 000000000000..fb99dd2361c5
--- /dev/null
+++ b/tests/queries/0_stateless/02354_vector_search_bug_multiple_marks.sql
@@ -0,0 +1,25 @@
+-- Tags: no-fasttest, no-ordinary-database
+
+-- Tests correctness of vector similarity index with > 1 mark
+
+SET allow_experimental_vector_similarity_index = 1;
+SET enable_analyzer = 0;
+
+DROP TABLE IF EXISTS tab;
+
+CREATE TABLE tab(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'L2Distance')) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity = 8192;
+INSERT INTO tab SELECT number, [toFloat32(number), 0.0] from numbers(10000);
+
+WITH [1.0, 0.0] AS reference_vec
+SELECT id, vec, L2Distance(vec, reference_vec)
+FROM tab
+ORDER BY L2Distance(vec, reference_vec)
+LIMIT 1;
+
+WITH [9000.0, 0.0] AS reference_vec
+SELECT id, vec, L2Distance(vec, reference_vec)
+FROM tab
+ORDER BY L2Distance(vec, reference_vec)
+LIMIT 1;
+
+DROP TABLE tab;
diff --git a/tests/queries/0_stateless/02354_vector_search_bugs.sql b/tests/queries/0_stateless/02354_vector_search_bugs.sql
deleted file mode 100644
index d55bdb88a76a..000000000000
--- a/tests/queries/0_stateless/02354_vector_search_bugs.sql
+++ /dev/null
@@ -1,119 +0,0 @@
--- Tags: no-fasttest, no-ordinary-database
-
--- Tests various bugs and special cases for vector indexes.
-
-SET allow_experimental_vector_similarity_index = 1;
-SET enable_analyzer = 1; -- 0 vs. 1 produce slightly different error codes, make it future-proof
-
-DROP TABLE IF EXISTS tab;
-
-SELECT 'Rejects INSERTs of Arrays with different sizes';
-
-CREATE TABLE tab(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'L2Distance')) ENGINE = MergeTree ORDER BY id;
-INSERT INTO tab values (0, [2.2, 2.3]) (1, [3.1, 3.2, 3.3]); -- { serverError INCORRECT_DATA }
-DROP TABLE tab;
-
-SELECT 'Issue #52258: Empty Arrays or Arrays with default values are rejected';
-
-CREATE TABLE tab (id UInt64, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'L2Distance')) ENGINE = MergeTree() ORDER BY id;
-INSERT INTO tab VALUES (1, []); -- { serverError INCORRECT_DATA }
-INSERT INTO tab (id) VALUES (1); -- { serverError INCORRECT_DATA }
-DROP TABLE tab;
-
-SELECT 'It is possible to create parts with different Array vector sizes but there will be an error at query time';
-
-CREATE TABLE tab(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'L2Distance')) ENGINE = MergeTree ORDER BY id;
-SYSTEM STOP MERGES tab;
-INSERT INTO tab values (0, [2.2, 2.3]) (1, [3.1, 3.2]);
-INSERT INTO tab values (2, [2.2, 2.3, 2.4]) (3, [3.1, 3.2, 3.3]);
-
-WITH [0.0, 2.0] AS reference_vec
-SELECT id, vec, L2Distance(vec, reference_vec)
-FROM tab
-ORDER BY L2Distance(vec, reference_vec)
-LIMIT 3; -- { serverError SIZES_OF_ARRAYS_DONT_MATCH }
-
-DROP TABLE tab;
-
-SELECT 'Correctness of index with > 1 mark';
-
-CREATE TABLE tab(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'L2Distance')) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity = 8192;
-INSERT INTO tab SELECT number, [toFloat32(number), 0.0] from numbers(10000);
-
-WITH [1.0, 0.0] AS reference_vec
-SELECT id, vec, L2Distance(vec, reference_vec)
-FROM tab
-ORDER BY L2Distance(vec, reference_vec)
-LIMIT 1;
-
-WITH [9000.0, 0.0] AS reference_vec
-SELECT id, vec, L2Distance(vec, reference_vec)
-FROM tab
-ORDER BY L2Distance(vec, reference_vec)
-LIMIT 1;
-
-DROP TABLE tab;
-
-SELECT 'Issue #69085: Reference vector computed by a subquery';
-
-CREATE TABLE tab(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'cosineDistance', 'f16', 0, 0) GRANULARITY 2) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity = 3;
-INSERT INTO tab VALUES (0, [4.6, 2.3]), (1, [2.0, 3.2]), (2, [4.2, 3.4]), (3, [5.3, 2.9]), (4, [2.4, 5.2]), (5, [5.3, 2.3]), (6, [1.0, 9.3]), (7, [5.5, 4.7]), (8, [6.4, 3.5]), (9, [5.3, 2.5]), (10, [6.4, 3.4]), (11, [6.4, 3.2]);
-
--- works
-EXPLAIN indexes = 1
-WITH [0., 2.] AS reference_vec
-SELECT
-    id,
-    vec,
-    cosineDistance(vec, reference_vec) AS distance
-FROM tab
-ORDER BY distance
-LIMIT 1
-SETTINGS enable_analyzer = 0;
-
--- does not work
-EXPLAIN indexes = 1
-WITH (
-    SELECT vec
-    FROM tab
-    LIMIT 1
-) AS reference_vec
-SELECT
-    id,
-    vec,
-    cosineDistance(vec, reference_vec) AS distance
-FROM tab
-ORDER BY distance
-LIMIT 1
-SETTINGS enable_analyzer = 0;
-
--- does not work as well
-EXPLAIN indexes = 1
-WITH (
-    SELECT [0., 2.]
-) AS reference_vec
-SELECT
-    id,
-    vec,
-    cosineDistance(vec, reference_vec) AS distance
-FROM tab
-ORDER BY distance
-LIMIT 1
-SETTINGS enable_analyzer = 0;
-
-DROP TABLE tab;
-
-SELECT 'index_granularity_bytes = 0 is disallowed';
-
--- If adaptive index granularity is disabled, certain vector search queries with PREWHERE run into LOGICAL_ERRORs.
---     SET allow_experimental_vector_similarity_index = 1;
---     CREATE TABLE tab (`id` Int32, `vec` Array(Float32), INDEX idx vec TYPE  vector_similarity('hnsw', 'L2Distance') GRANULARITY 100000000) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity_bytes = 0;
---     INSERT INTO tab SELECT number, [toFloat32(number), 0.] FROM numbers(10000);
---     WITH [1., 0.] AS reference_vec SELECT id, L2Distance(vec, reference_vec) FROM tab PREWHERE toLowCardinality(10) ORDER BY L2Distance(vec, reference_vec) ASC LIMIT 100;
--- As a workaround, force enabled adaptive index granularity for now (it is the default anyways).
-CREATE TABLE tab(id Int32, vec Array(Float32), INDEX idx vec TYPE vector_similarity('hnsw', 'L2Distance')) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity_bytes = 0; -- { serverError INVALID_SETTING_VALUE }
-
-CREATE TABLE tab(id Int32, vec Array(Float32)) ENGINE = MergeTree ORDER BY id SETTINGS index_granularity_bytes = 0;
-ALTER TABLE tab ADD INDEX vec_idx1(vec) TYPE vector_similarity('hnsw', 'cosineDistance'); -- { serverError INVALID_SETTING_VALUE }
-
-DROP TABLE tab;
