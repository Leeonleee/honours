{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 57442,
  "instance_id": "ClickHouse__ClickHouse-57442",
  "issue_numbers": [
    "57262"
  ],
  "base_commit": "8c69c14d4a65fc67ceb8574b4bc380e460821c1d",
  "patch": "diff --git a/.gitmodules b/.gitmodules\nindex af90c7880125..53ef899dd996 100644\n--- a/.gitmodules\n+++ b/.gitmodules\n@@ -357,3 +357,6 @@\n [submodule \"contrib/pocketfft\"]\n \tpath = contrib/pocketfft\n \turl = https://github.com/mreineck/pocketfft.git\n+[submodule \"contrib/sqids-cpp\"]\n+\tpath = contrib/sqids-cpp\n+\turl = https://github.com/sqids/sqids-cpp.git\ndiff --git a/contrib/CMakeLists.txt b/contrib/CMakeLists.txt\nindex a8f0705df880..3d3b9b72fafb 100644\n--- a/contrib/CMakeLists.txt\n+++ b/contrib/CMakeLists.txt\n@@ -156,6 +156,7 @@ add_contrib (nuraft-cmake NuRaft)\n add_contrib (fast_float-cmake fast_float)\n add_contrib (datasketches-cpp-cmake datasketches-cpp)\n add_contrib (incbin-cmake incbin)\n+add_contrib (sqids-cpp-cmake sqids-cpp)\n \n option(ENABLE_NLP \"Enable NLP functions support\" ${ENABLE_LIBRARIES})\n if (ENABLE_NLP)\ndiff --git a/contrib/sqids-cpp b/contrib/sqids-cpp\nnew file mode 160000\nindex 000000000000..3756e537d4d4\n--- /dev/null\n+++ b/contrib/sqids-cpp\n@@ -0,0 +1,1 @@\n+Subproject commit 3756e537d4d48cc0dd4176801fe19f99601439b0\ndiff --git a/contrib/sqids-cpp-cmake/CMakeLists.txt b/contrib/sqids-cpp-cmake/CMakeLists.txt\nnew file mode 100644\nindex 000000000000..7eb77c92437a\n--- /dev/null\n+++ b/contrib/sqids-cpp-cmake/CMakeLists.txt\n@@ -0,0 +1,14 @@\n+option(ENABLE_SQIDS \"Enable sqids support\" ${ENABLE_LIBRARIES})\n+if ((NOT ENABLE_SQIDS))\n+    message (STATUS \"Not using sqids\")\n+    return()\n+endif()\n+\n+set (SQIDS_SOURCE_DIR \"${ClickHouse_SOURCE_DIR}/contrib/sqids-cpp\")\n+set (SQIDS_INCLUDE_DIR \"${SQIDS_SOURCE_DIR}/include\")\n+\n+add_library(_sqids INTERFACE)\n+target_include_directories(_sqids SYSTEM INTERFACE ${SQIDS_INCLUDE_DIR})\n+\n+add_library(ch_contrib::sqids ALIAS _sqids)\n+target_compile_definitions(_sqids INTERFACE ENABLE_SQIDS)\ndiff --git a/docs/en/sql-reference/functions/hash-functions.md b/docs/en/sql-reference/functions/hash-functions.md\nindex 7276437ec822..4816a6f00327 100644\n--- a/docs/en/sql-reference/functions/hash-functions.md\n+++ b/docs/en/sql-reference/functions/hash-functions.md\n@@ -1776,3 +1776,34 @@ Result:\n \u2502 (('queries','database','analytical'),('oriented','processing','DBMS')) \u2502\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n ```\n+\n+## sqid\n+\n+Transforms numbers into YouTube-like short URL hash called [Sqid](https://sqids.org/).\n+To use this function, set setting `allow_experimental_hash_functions = 1`.\n+\n+**Syntax**\n+\n+```sql\n+sqid(number1,...)\n+```\n+\n+**Arguments**\n+\n+- A variable number of UInt8, UInt16, UInt32 or UInt64 numbers.\n+\n+**Returned Value**\n+\n+A hash id [String](/docs/en/sql-reference/data-types/string.md).\n+\n+**Example**\n+\n+```sql\n+SELECT sqid(1, 2, 3, 4, 5);\n+```\n+\n+```response\n+\u250c\u2500sqid(1, 2, 3, 4, 5)\u2500\u2510\n+\u2502 gXHfJ1C6dN          \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\ndiff --git a/src/Common/config.h.in b/src/Common/config.h.in\nindex ea77e2fed2d7..f84e28942c54 100644\n--- a/src/Common/config.h.in\n+++ b/src/Common/config.h.in\n@@ -27,6 +27,7 @@\n #cmakedefine01 USE_H3\n #cmakedefine01 USE_S2_GEOMETRY\n #cmakedefine01 USE_FASTOPS\n+#cmakedefine01 USE_SQIDS\n #cmakedefine01 USE_NLP\n #cmakedefine01 USE_VECTORSCAN\n #cmakedefine01 USE_LIBURING\ndiff --git a/src/Functions/CMakeLists.txt b/src/Functions/CMakeLists.txt\nindex 4b0d93351980..896765945817 100644\n--- a/src/Functions/CMakeLists.txt\n+++ b/src/Functions/CMakeLists.txt\n@@ -79,6 +79,10 @@ if (ENABLE_NLP)\n     list (APPEND PRIVATE_LIBS ch_contrib::cld2)\n endif()\n \n+if (TARGET ch_contrib::sqids)\n+    list (APPEND PRIVATE_LIBS ch_contrib::sqids)\n+endif()\n+\n if (TARGET ch_contrib::h3)\n     list (APPEND PRIVATE_LIBS ch_contrib::h3)\n endif()\ndiff --git a/src/Functions/FunctionSqid.cpp b/src/Functions/FunctionSqid.cpp\nnew file mode 100644\nindex 000000000000..24868d9a13e6\n--- /dev/null\n+++ b/src/Functions/FunctionSqid.cpp\n@@ -0,0 +1,97 @@\n+#include \"config.h\"\n+\n+#ifdef ENABLE_SQIDS\n+\n+#include <Columns/ColumnString.h>\n+#include <Columns/ColumnsNumber.h>\n+#include <DataTypes/DataTypeString.h>\n+#include <DataTypes/DataTypesNumber.h>\n+#include <Functions/FunctionFactory.h>\n+#include <Functions/FunctionHelpers.h>\n+#include <Functions/IFunction.h>\n+#include <Interpreters/Context.h>\n+\n+#include <sqids/sqids.hpp>\n+\n+namespace DB\n+{\n+\n+namespace ErrorCodes\n+{\n+    extern const int ILLEGAL_TYPE_OF_ARGUMENT;\n+    extern const int SUPPORT_IS_DISABLED;\n+    extern const int NUMBER_OF_ARGUMENTS_DOESNT_MATCH;\n+}\n+\n+// sqid(number1, ...)\n+class FunctionSqid : public IFunction\n+{\n+public:\n+    static constexpr auto name = \"sqid\";\n+\n+    String getName() const override { return name; }\n+    size_t getNumberOfArguments() const override { return 0; }\n+    bool isVariadic() const override { return true; }\n+    bool isSuitableForShortCircuitArgumentsExecution(const DataTypesWithConstInfo & /*arguments*/) const override { return false; }\n+\n+    static FunctionPtr create(ContextPtr context)\n+    {\n+        if (!context->getSettingsRef().allow_experimental_hash_functions)\n+            throw Exception(\n+                ErrorCodes::SUPPORT_IS_DISABLED,\n+                \"Hashing function '{}' is experimental. Set `allow_experimental_hash_functions` setting to enable it\",\n+                name);\n+\n+        return std::make_shared<FunctionSqid>();\n+    }\n+\n+    DataTypePtr getReturnTypeImpl(const DataTypes & arguments) const override\n+    {\n+        if (arguments.empty())\n+            throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH, \"Function {} requires at least one argument.\", getName());\n+\n+        for (size_t i = 0; i < arguments.size(); ++i)\n+        {\n+            if (!checkDataTypes<\n+                    DataTypeUInt8,\n+                    DataTypeUInt16,\n+                    DataTypeUInt32,\n+                    DataTypeUInt64>(arguments[i].get()))\n+                throw Exception(\n+                    ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,\n+                    \"Argument {} for function {} must have datatype UInt*, given type: {}.\",\n+                    i, getName(), arguments[i]->getName());\n+        }\n+\n+        return std::make_shared<DataTypeString>();\n+    }\n+\n+    ColumnPtr executeImpl(const ColumnsWithTypeAndName & arguments, const DataTypePtr &, size_t input_rows_count) const override\n+    {\n+        size_t num_args = arguments.size();\n+        auto col_res = ColumnString::create();\n+\n+        sqidscxx::Sqids<> sqids;\n+        std::vector<UInt64> numbers(num_args);\n+        for (size_t i = 0; i < input_rows_count; ++i)\n+        {\n+            for (size_t j = 0; j < num_args; ++j)\n+            {\n+                const ColumnWithTypeAndName & arg = arguments[j];\n+                ColumnPtr current_column = arg.column;\n+                numbers[j] = current_column->getUInt(i);\n+            }\n+            auto id = sqids.encode(numbers);\n+            col_res->insert(id);\n+        }\n+        return col_res;\n+    }\n+};\n+\n+REGISTER_FUNCTION(Sqid)\n+{\n+    factory.registerFunction<FunctionSqid>();\n+}\n+}\n+\n+#endif\ndiff --git a/src/configure_config.cmake b/src/configure_config.cmake\nindex 2980fde48511..c3c6d9be6da8 100644\n--- a/src/configure_config.cmake\n+++ b/src/configure_config.cmake\n@@ -128,6 +128,9 @@ endif()\n if (TARGET ch_contrib::fastops)\n     set(USE_FASTOPS 1)\n endif()\n+if (TARGET ch_contrib::sqids)\n+    set(USE_SQIDS 1)\n+endif()\n if (TARGET ch_contrib::vectorscan)\n     set(USE_VECTORSCAN 1)\n endif()\ndiff --git a/utils/check-style/aspell-ignore/en/aspell-dict.txt b/utils/check-style/aspell-ignore/en/aspell-dict.txt\nindex 6eca291279c6..b682d637510c 100644\n--- a/utils/check-style/aspell-ignore/en/aspell-dict.txt\n+++ b/utils/check-style/aspell-ignore/en/aspell-dict.txt\n@@ -1788,6 +1788,7 @@ logTrace\n logagent\n loghouse\n london\n+lookups\n lowcardinality\n lowerUTF\n lowercased\n@@ -2274,6 +2275,7 @@ splitByRegexp\n splitByString\n splitByWhitespace\n splitby\n+sqid\n sql\n sqlalchemy\n sqlinsert\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02415_all_new_functions_must_be_documented.sql b/tests/queries/0_stateless/02415_all_new_functions_must_be_documented.sql\nindex 148ad303bd45..729a0b3995c1 100644\n--- a/tests/queries/0_stateless/02415_all_new_functions_must_be_documented.sql\n+++ b/tests/queries/0_stateless/02415_all_new_functions_must_be_documented.sql\n@@ -2,7 +2,7 @@\n -- Please help shorten this list down to zero elements.\n SELECT name FROM system.functions WHERE NOT is_aggregate AND origin = 'System' AND alias_to = '' AND length(description) < 10\n AND name NOT IN (\n-    'MD4', 'MD5', 'SHA1', 'SHA224', 'SHA256', 'SHA384', 'SHA512', 'halfMD5',\n+    'MD4', 'MD5', 'SHA1', 'SHA224', 'SHA256', 'SHA384', 'SHA512', 'halfMD5', 'sqid',\n     'aes_decrypt_mysql', 'aes_encrypt_mysql', 'decrypt', 'encrypt',\n     'base64Decode', 'base64Encode', 'tryBase64Decode',\n     'convertCharset',\ndiff --git a/tests/queries/0_stateless/02933_sqid.reference b/tests/queries/0_stateless/02933_sqid.reference\nnew file mode 100644\nindex 000000000000..4506cc4d01a3\n--- /dev/null\n+++ b/tests/queries/0_stateless/02933_sqid.reference\n@@ -0,0 +1,13 @@\n+-- negative tests\n+-- const UInt*\n+Uk\n+XMbT\n+86Rf07\n+Td1EnWQo\n+XMbT\n+-- non-const UInt*\n+Uk\n+XMbT\n+86Rf07\n+Td1EnWQo\n+XMbT\ndiff --git a/tests/queries/0_stateless/02933_sqid.sql b/tests/queries/0_stateless/02933_sqid.sql\nnew file mode 100644\nindex 000000000000..db8b2f29ee8a\n--- /dev/null\n+++ b/tests/queries/0_stateless/02933_sqid.sql\n@@ -0,0 +1,22 @@\n+-- Tags: no-fasttest\n+\n+SET allow_experimental_hash_functions = 1;\n+SET allow_suspicious_low_cardinality_types = 1;\n+\n+SELECT '-- negative tests';\n+SELECT sqid(); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }\n+SELECT sqid('1'); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\n+\n+SELECT '-- const UInt*';\n+SELECT sqid(1);\n+SELECT sqid(1, 2);\n+SELECT sqid(1, 2, 3);\n+SELECT sqid(1::UInt8, 2::UInt16, 3::UInt32, 4::UInt64);\n+SELECT sqid(toNullable(1), toLowCardinality(2));\n+\n+SELECT '-- non-const UInt*';\n+SELECT sqid(materialize(1));\n+SELECT sqid(materialize(1), materialize(2));\n+SELECT sqid(materialize(1), materialize(2), materialize(3));\n+SELECT sqid(materialize(1::UInt8), materialize(2::UInt16), materialize(3::UInt32), materialize(4::UInt64));\n+SELECT sqid(toNullable(materialize(1)), toLowCardinality(materialize(2)));\n",
  "problem_statement": "Implement \"sqids\" for URL shortening and other uses\nImplement a SQL function which computes [Sqids](https://sqids.org/) (recently [mentioned](https://news.ycombinator.com/item?id=38414914) on Hackernews) from an arbitrary number of integer arguments.\n",
  "hints_text": "",
  "created_at": "2023-12-02T13:15:13Z",
  "modified_files": [
    ".gitmodules",
    "contrib/CMakeLists.txt",
    "b/contrib/sqids-cpp",
    "b/contrib/sqids-cpp-cmake/CMakeLists.txt",
    "docs/en/sql-reference/functions/hash-functions.md",
    "src/Common/config.h.in",
    "src/Functions/CMakeLists.txt",
    "b/src/Functions/FunctionSqid.cpp",
    "src/configure_config.cmake",
    "utils/check-style/aspell-ignore/en/aspell-dict.txt"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/02415_all_new_functions_must_be_documented.sql",
    "b/tests/queries/0_stateless/02933_sqid.reference",
    "b/tests/queries/0_stateless/02933_sqid.sql"
  ]
}