diff --git a/src/Analyzer/Resolve/QueryAnalyzer.cpp b/src/Analyzer/Resolve/QueryAnalyzer.cpp
index b1fe25549881..51fe5ee6ec26 100644
--- a/src/Analyzer/Resolve/QueryAnalyzer.cpp
+++ b/src/Analyzer/Resolve/QueryAnalyzer.cpp
@@ -1740,7 +1740,7 @@ QueryAnalyzer::QueryTreeNodesWithNames QueryAnalyzer::resolveQualifiedMatcher(Qu
         const auto * tuple_data_type = typeid_cast<const DataTypeTuple *>(result_type.get());
         if (!tuple_data_type)
             throw Exception(ErrorCodes::UNSUPPORTED_METHOD,
-                "Qualified matcher {} find non compound expression {} with type {}. Expected tuple or array of tuples. In scope {}",
+                "Qualified matcher {} found a non-compound expression {} with type {}. Expected a tuple or an array of tuples. In scope {}",
                 matcher_node->formatASTForErrorMessage(),
                 expression_query_tree_node->formatASTForErrorMessage(),
                 expression_query_tree_node->getResultType()->getName(),
diff --git a/src/Interpreters/SubstituteColumnOptimizer.cpp b/src/Interpreters/SubstituteColumnOptimizer.cpp
index c4aef89fed2a..925ded158577 100644
--- a/src/Interpreters/SubstituteColumnOptimizer.cpp
+++ b/src/Interpreters/SubstituteColumnOptimizer.cpp
@@ -13,10 +13,6 @@
 
 namespace DB
 {
-namespace ErrorCodes
-{
-    extern const int LOGICAL_ERROR;
-}
 
 namespace
 {
@@ -237,16 +233,8 @@ void SubstituteColumnOptimizer::perform()
 
     const auto & compare_graph = metadata_snapshot->getConstraints().getGraph();
 
-    // Fill aliases
-    if (select_query->select())
-    {
-        auto * list = select_query->refSelect()->as<ASTExpressionList>();
-        if (!list)
-            throw Exception(ErrorCodes::LOGICAL_ERROR, "List of selected columns must be ASTExpressionList");
-
-        for (ASTPtr & ast : list->children)
-            ast->setAlias(ast->getAliasOrColumnName());
-    }
+    if (compare_graph.getNumOfComponents() == 0)
+        return;
 
     auto run_for_all = [&](const auto func)
     {
diff --git a/src/Interpreters/SubstituteColumnOptimizer.h b/src/Interpreters/SubstituteColumnOptimizer.h
index 28aa8be08015..ecb65cd7707c 100644
--- a/src/Interpreters/SubstituteColumnOptimizer.h
+++ b/src/Interpreters/SubstituteColumnOptimizer.h
@@ -15,7 +15,7 @@ struct StorageInMemoryMetadata;
 using StorageMetadataPtr = std::shared_ptr<const StorageInMemoryMetadata>;
 
 /// Optimizer that tries to replace columns to equal columns (according to constraints)
-/// with lower size (according to compressed and uncomressed size).
+/// with lower size (according to compressed and uncompressed sizes).
 class SubstituteColumnOptimizer
 {
 public:
diff --git a/src/Parsers/IAST.h b/src/Parsers/IAST.h
index ee70fed0f072..4f8edac8597d 100644
--- a/src/Parsers/IAST.h
+++ b/src/Parsers/IAST.h
@@ -66,7 +66,7 @@ class IAST : public std::enable_shared_from_this<IAST>, public TypePromotion<IAS
     /** Set the alias. */
     virtual void setAlias(const String & /*to*/)
     {
-        throw Exception(ErrorCodes::LOGICAL_ERROR, "Can't set alias of {}", getColumnName());
+        throw Exception(ErrorCodes::LOGICAL_ERROR, "Can't set alias of {} of {}", getColumnName(), getID());
     }
 
     /** Get the text that identifies this element. */
