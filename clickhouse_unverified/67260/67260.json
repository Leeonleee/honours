{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 67260,
  "instance_id": "ClickHouse__ClickHouse-67260",
  "issue_numbers": [
    "67259"
  ],
  "base_commit": "7c7783e2cec158d28f1849c1666b37b82e676830",
  "patch": "diff --git a/src/Analyzer/Resolve/QueryAnalyzer.cpp b/src/Analyzer/Resolve/QueryAnalyzer.cpp\nindex b1fe25549881..51fe5ee6ec26 100644\n--- a/src/Analyzer/Resolve/QueryAnalyzer.cpp\n+++ b/src/Analyzer/Resolve/QueryAnalyzer.cpp\n@@ -1740,7 +1740,7 @@ QueryAnalyzer::QueryTreeNodesWithNames QueryAnalyzer::resolveQualifiedMatcher(Qu\n         const auto * tuple_data_type = typeid_cast<const DataTypeTuple *>(result_type.get());\n         if (!tuple_data_type)\n             throw Exception(ErrorCodes::UNSUPPORTED_METHOD,\n-                \"Qualified matcher {} find non compound expression {} with type {}. Expected tuple or array of tuples. In scope {}\",\n+                \"Qualified matcher {} found a non-compound expression {} with type {}. Expected a tuple or an array of tuples. In scope {}\",\n                 matcher_node->formatASTForErrorMessage(),\n                 expression_query_tree_node->formatASTForErrorMessage(),\n                 expression_query_tree_node->getResultType()->getName(),\ndiff --git a/src/Interpreters/SubstituteColumnOptimizer.cpp b/src/Interpreters/SubstituteColumnOptimizer.cpp\nindex c4aef89fed2a..925ded158577 100644\n--- a/src/Interpreters/SubstituteColumnOptimizer.cpp\n+++ b/src/Interpreters/SubstituteColumnOptimizer.cpp\n@@ -13,10 +13,6 @@\n \n namespace DB\n {\n-namespace ErrorCodes\n-{\n-    extern const int LOGICAL_ERROR;\n-}\n \n namespace\n {\n@@ -237,16 +233,8 @@ void SubstituteColumnOptimizer::perform()\n \n     const auto & compare_graph = metadata_snapshot->getConstraints().getGraph();\n \n-    // Fill aliases\n-    if (select_query->select())\n-    {\n-        auto * list = select_query->refSelect()->as<ASTExpressionList>();\n-        if (!list)\n-            throw Exception(ErrorCodes::LOGICAL_ERROR, \"List of selected columns must be ASTExpressionList\");\n-\n-        for (ASTPtr & ast : list->children)\n-            ast->setAlias(ast->getAliasOrColumnName());\n-    }\n+    if (compare_graph.getNumOfComponents() == 0)\n+        return;\n \n     auto run_for_all = [&](const auto func)\n     {\ndiff --git a/src/Interpreters/SubstituteColumnOptimizer.h b/src/Interpreters/SubstituteColumnOptimizer.h\nindex 28aa8be08015..ecb65cd7707c 100644\n--- a/src/Interpreters/SubstituteColumnOptimizer.h\n+++ b/src/Interpreters/SubstituteColumnOptimizer.h\n@@ -15,7 +15,7 @@ struct StorageInMemoryMetadata;\n using StorageMetadataPtr = std::shared_ptr<const StorageInMemoryMetadata>;\n \n /// Optimizer that tries to replace columns to equal columns (according to constraints)\n-/// with lower size (according to compressed and uncomressed size).\n+/// with lower size (according to compressed and uncompressed sizes).\n class SubstituteColumnOptimizer\n {\n public:\ndiff --git a/src/Parsers/IAST.h b/src/Parsers/IAST.h\nindex ee70fed0f072..4f8edac8597d 100644\n--- a/src/Parsers/IAST.h\n+++ b/src/Parsers/IAST.h\n@@ -66,7 +66,7 @@ class IAST : public std::enable_shared_from_this<IAST>, public TypePromotion<IAS\n     /** Set the alias. */\n     virtual void setAlias(const String & /*to*/)\n     {\n-        throw Exception(ErrorCodes::LOGICAL_ERROR, \"Can't set alias of {}\", getColumnName());\n+        throw Exception(ErrorCodes::LOGICAL_ERROR, \"Can't set alias of {} of {}\", getColumnName(), getID());\n     }\n \n     /** Get the text that identifies this element. */\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01622_constraints_simple_optimization.reference b/tests/queries/0_stateless/01622_constraints_simple_optimization.reference\nindex d267df2237f0..84c872856ff9 100644\n--- a/tests/queries/0_stateless/01622_constraints_simple_optimization.reference\n+++ b/tests/queries/0_stateless/01622_constraints_simple_optimization.reference\n@@ -32,10 +32,10 @@\n 1\n 1\n 0\n-SELECT count() AS `count()`\n+SELECT count()\n FROM constraint_test_constants\n WHERE (b > 100) OR (c > 100)\n-SELECT count() AS `count()`\n+SELECT count()\n FROM constraint_test_constants\n WHERE c > 100\n QUERY id: 0\n@@ -53,7 +53,7 @@ QUERY id: 0\n           COLUMN id: 6, column_name: c, result_type: Int64, source_id: 3\n           CONSTANT id: 7, constant_value: UInt64_100, constant_value_type: UInt8\n   SETTINGS allow_experimental_analyzer=1\n-SELECT count() AS `count()`\n+SELECT count()\n FROM constraint_test_constants\n WHERE c > 100\n QUERY id: 0\n@@ -71,7 +71,7 @@ QUERY id: 0\n           COLUMN id: 6, column_name: c, result_type: Int64, source_id: 3\n           CONSTANT id: 7, constant_value: UInt64_100, constant_value_type: UInt8\n   SETTINGS allow_experimental_analyzer=1\n-SELECT count() AS `count()`\n+SELECT count()\n FROM constraint_test_constants\n QUERY id: 0\n   PROJECTION COLUMNS\ndiff --git a/tests/queries/0_stateless/01623_constraints_column_swap.reference b/tests/queries/0_stateless/01623_constraints_column_swap.reference\nindex 555a4c93f706..d504a86365b7 100644\n--- a/tests/queries/0_stateless/01623_constraints_column_swap.reference\n+++ b/tests/queries/0_stateless/01623_constraints_column_swap.reference\n@@ -1,6 +1,6 @@\n SELECT\n-    (b AS `cityHash64(a)`) + 10 AS `plus(cityHash64(a), 10)`,\n-    (b AS b) + 3 AS `plus(b, 3)`\n+    (b AS `cityHash64(a)`) + 10,\n+    (b AS b) + 3\n FROM column_swap_test_test\n WHERE b = 1\n QUERY id: 0\n@@ -59,8 +59,8 @@ QUERY id: 0\n           CONSTANT id: 14, constant_value: UInt64_1, constant_value_type: UInt8\n   SETTINGS allow_experimental_analyzer=1\n SELECT\n-    (b AS `cityHash64(a)`) + 10 AS `plus(cityHash64(a), 10)`,\n-    (b AS b) + 3 AS `plus(b, 3)`\n+    (b AS `cityHash64(a)`) + 10,\n+    (b AS b) + 3\n FROM column_swap_test_test\n WHERE b = 0\n QUERY id: 0\n@@ -89,8 +89,8 @@ QUERY id: 0\n           CONSTANT id: 14, constant_value: UInt64_0, constant_value_type: UInt8\n   SETTINGS allow_experimental_analyzer=1\n SELECT\n-    (b AS `cityHash64(a)`) + 10 AS `plus(cityHash64(a), 10)`,\n-    (b AS b) + 3 AS `plus(b, 3)`\n+    (b AS `cityHash64(a)`) + 10,\n+    (b AS b) + 3\n FROM column_swap_test_test\n WHERE b = 0\n QUERY id: 0\n@@ -119,8 +119,8 @@ QUERY id: 0\n           CONSTANT id: 14, constant_value: UInt64_0, constant_value_type: UInt8\n   SETTINGS allow_experimental_analyzer=1\n SELECT\n-    (b AS `cityHash64(a)`) + 10 AS `plus(cityHash64(a), 10)`,\n-    (b AS b) + 3 AS `plus(b, 3)`\n+    (b AS `cityHash64(a)`) + 10,\n+    (b AS b) + 3\n FROM column_swap_test_test\n WHERE b = 1\n QUERY id: 0\n@@ -148,7 +148,7 @@ QUERY id: 0\n           COLUMN id: 13, column_name: b, result_type: UInt64, source_id: 5\n           CONSTANT id: 14, constant_value: UInt64_1, constant_value_type: UInt8\n   SETTINGS allow_experimental_analyzer=1\n-SELECT (b AS `cityHash64(a)`) + 10 AS `plus(cityHash64(a), 10)`\n+SELECT (b AS `cityHash64(a)`) + 10\n FROM column_swap_test_test\n WHERE b = 0\n QUERY id: 0\n@@ -171,8 +171,8 @@ QUERY id: 0\n           CONSTANT id: 10, constant_value: UInt64_0, constant_value_type: UInt8\n   SETTINGS allow_experimental_analyzer=1\n SELECT\n-    (cityHash64(a) AS `cityHash64(a)`) + 10 AS `plus(cityHash64(a), 10)`,\n-    a AS a\n+    (cityHash64(a) AS `cityHash64(a)`) + 10,\n+    a\n FROM column_swap_test_test\n WHERE cityHash64(a) = 0\n QUERY id: 0\n@@ -203,8 +203,8 @@ QUERY id: 0\n           CONSTANT id: 15, constant_value: UInt64_0, constant_value_type: UInt8\n   SETTINGS allow_experimental_analyzer=1\n SELECT\n-    (cityHash64(a) AS b) + 10 AS `plus(b, 10)`,\n-    a AS a\n+    (cityHash64(a) AS b) + 10,\n+    a\n FROM column_swap_test_test\n WHERE cityHash64(a) = 0\n QUERY id: 0\ndiff --git a/tests/queries/0_stateless/03212_optimize_with_constraints_logical_error.reference b/tests/queries/0_stateless/03212_optimize_with_constraints_logical_error.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/03212_optimize_with_constraints_logical_error.sql b/tests/queries/0_stateless/03212_optimize_with_constraints_logical_error.sql\nnew file mode 100644\nindex 000000000000..16a27af986b3\n--- /dev/null\n+++ b/tests/queries/0_stateless/03212_optimize_with_constraints_logical_error.sql\n@@ -0,0 +1,13 @@\n+DROP TABLE IF EXISTS test_table;\n+CREATE TABLE test_table\n+(\n+    id UInt64,\n+    value String\n+) ENGINE=TinyLog;\n+\n+EXPLAIN SYNTAX\n+WITH 1 AS compound_value SELECT * APPLY (x -> compound_value.*)\n+FROM test_table WHERE x > 0\n+SETTINGS convert_query_to_cnf = true, optimize_using_constraints = true, optimize_substitute_columns = true; -- { serverError UNKNOWN_IDENTIFIER }\n+\n+DROP TABLE test_table;\n",
  "problem_statement": "Logical error inside invalid query with `convert_query_to_cnf`, `optimize_using_constraints`, `optimize_substitute_columns`\n```\r\nCREATE TABLE test_table\r\n(\r\n    id UInt64,\r\n    value String\r\n) ENGINE=TinyLog;\r\n\r\nEXPLAIN SYNTAX\r\nWITH 1 AS compound_value SELECT * APPLY (x -> compound_value.*)\r\nFROM test_table WHERE x > 0\r\nSETTINGS convert_query_to_cnf = true, optimize_using_constraints = true, optimize_substitute_columns = true;\r\n```\r\n\r\n`Code: 49. DB::Exception: Can't set alias of compound_value.*: While processing WITH 1 AS compound_value SELECT compound_value.*, compound_value.* FROM test_table WHERE x > 0 SETTINGS convert_query_to_cnf = true, optimize_using_constraints = true, optimize_substitute_columns = true. (LOGICAL_ERROR)`\n",
  "hints_text": "",
  "created_at": "2024-07-27T01:36:29Z"
}