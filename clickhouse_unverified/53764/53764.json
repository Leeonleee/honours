{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 53764,
  "instance_id": "ClickHouse__ClickHouse-53764",
  "issue_numbers": [
    "53715"
  ],
  "base_commit": "5355c6fa1879943d68ae8e4e0cecf495ee6664f1",
  "patch": "diff --git a/src/Functions/parseDateTime.cpp b/src/Functions/parseDateTime.cpp\nindex 2381def91515..fdab85c4640e 100644\n--- a/src/Functions/parseDateTime.cpp\n+++ b/src/Functions/parseDateTime.cpp\n@@ -485,15 +485,16 @@ namespace\n \n         DataTypePtr getReturnTypeImpl(const ColumnsWithTypeAndName & arguments) const override\n         {\n-            FunctionArgumentDescriptors args{\n+            FunctionArgumentDescriptors mandatory_args{\n                 {\"time\", &isString<IDataType>, nullptr, \"String\"},\n-                {\"format\", &isString<IDataType>, nullptr, \"String\"},\n+                {\"format\", &isString<IDataType>, nullptr, \"String\"}\n             };\n \n-            if (arguments.size() == 3)\n-                args.emplace_back(FunctionArgumentDescriptor{\"timezone\", &isString<IDataType>, nullptr, \"String\"});\n+            FunctionArgumentDescriptors optional_args{\n+                {\"timezone\", &isString<IDataType>, &isColumnConst, \"const String\"}\n+            };\n \n-            validateFunctionArgumentTypes(*this, arguments, args);\n+            validateFunctionArgumentTypes(*this, arguments, mandatory_args, optional_args);\n \n             String time_zone_name = getTimeZone(arguments).getTimeZone();\n             DataTypePtr date_type = std::make_shared<DataTypeDateTime>(time_zone_name);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02668_parse_datetime.reference b/tests/queries/0_stateless/02668_parse_datetime.reference\nindex b7215ac37188..f6c53ce1887e 100644\n--- a/tests/queries/0_stateless/02668_parse_datetime.reference\n+++ b/tests/queries/0_stateless/02668_parse_datetime.reference\n@@ -241,3 +241,5 @@ select str_to_date('10:04:11 invalid 03-07-2019', '%s:%i:%H %d-%m-%Y', 'UTC') IS\n -- Error handling\n select parseDateTime('12 AM'); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }\n select parseDateTime('12 AM', '%h %p', 'UTC', 'a fourth argument'); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }\n+-- Fuzzer crash bug #53715\n+select parseDateTime('', '', toString(number)) from numbers(13); -- { serverError ILLEGAL_COLUMN }\ndiff --git a/tests/queries/0_stateless/02668_parse_datetime.sql b/tests/queries/0_stateless/02668_parse_datetime.sql\nindex 3fb4aacedbd4..d8f2a94e188d 100644\n--- a/tests/queries/0_stateless/02668_parse_datetime.sql\n+++ b/tests/queries/0_stateless/02668_parse_datetime.sql\n@@ -165,4 +165,7 @@ select str_to_date('10:04:11 invalid 03-07-2019', '%s:%i:%H %d-%m-%Y', 'UTC') IS\n select parseDateTime('12 AM'); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }\n select parseDateTime('12 AM', '%h %p', 'UTC', 'a fourth argument'); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }\n \n+-- Fuzzer crash bug #53715\n+select parseDateTime('', '', toString(number)) from numbers(13); -- { serverError ILLEGAL_COLUMN }\n+\n -- { echoOff }\n",
  "problem_statement": "Crash bug: ClickHouse Server v23.7.4.5 crashed when calling the parseDateTime function\n**Describe the bug**\r\nClickHouse Server v23.7.4.5 crashed when calling the parseDateTime function with illegal arguments. \r\nIt was found by an in-development fuzzer of WINGFUZZ.\r\n\r\n**How to reproduce**\r\nThe SQL statement to reproduce:\r\n```sql\r\nSELECT parseDateTime ('' , '' , toString ( number ) ) FROM numbers ( 13 ) ;\r\n```\r\nIt can be reproduced on the official docker image. (`clickhouse/clickhouse-server:head` (version 23.8.1.2413) and `clickhouse/clickhouse-server:latest` (version 23.7.4.5)).\r\n\r\nThe log traced by ClickHouse Server:\r\n```\r\nSELECT parseDateTime('', '', toString(number))\r\nFROM numbers(13)\r\n\r\nQuery id: f1075392-f8cd-4d88-8975-3b20e532e6be\r\n\r\n[8af69c367457] 2023.08.23 07:39:50.308508 [ 351 ] <Fatal> BaseDaemon: ########################################\r\n[8af69c367457] 2023.08.23 07:39:50.308568 [ 351 ] <Fatal> BaseDaemon: (version 23.8.1.2413 (official build), build id: 4DCA66DD83B2161C82851B4655CD14334A08D535, git hash: 926533306c5969b77571e66163a6930cfce1cf86) (from thread 49) (query_id: f1075392-f8cd-4d88-8975-3b20e532e6be) (query: SELECT parseDateTime ('' , '' , toString ( number ) ) FROM numbers ( 13 ) ;) Received signal Segmentation fault (11)\r\n[8af69c367457] 2023.08.23 07:39:50.308598 [ 351 ] <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Address not mapped to object.\r\n[8af69c367457] 2023.08.23 07:39:50.308632 [ 351 ] <Fatal> BaseDaemon: Stack trace: 0x000000000b21cc89 0x000000000b21c373 0x0000000010a95933 0x0000000010a95588 0x0000000010a96256 0x00000000113f5a3a 0x00000000116164a0 0x000000001162312f 0x000000001161a003 0x00000000116169e8 0x000000001160e5d5 0x00000000115ec4bb 0x00000000115f4858 0x00000000115fceb1 0x0000000011d60303 0x0000000011d5147a 0x0000000011d43a97 0x0000000011df20a8 0x0000000011cfa7fe 0x000000001213796a 0x000000001213398e 0x0000000012f98d19 0x0000000012faa959 0x0000000015997514 0x0000000015998711 0x0000000015ace847 0x0000000015accb1c 0x00007ffff7f9a609 0x00007ffff7ebf133\r\n[8af69c367457] 2023.08.23 07:39:50.308763 [ 351 ] <Fatal> BaseDaemon: 2. DB::(anonymous namespace)::FunctionParseDateTimeImpl<DB::(anonymous namespace)::NameParseDateTime, (DB::(anonymous namespace)::ParseSyntax)0, (DB::(anonymous namespace)::ErrorHandling)0>::getTimeZone(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000000b21cc89 in /usr/bin/clickhouse\r\n[8af69c367457] 2023.08.23 07:39:50.308846 [ 351 ] <Fatal> BaseDaemon: 3. DB::(anonymous namespace)::FunctionParseDateTimeImpl<DB::(anonymous namespace)::NameParseDateTime, (DB::(anonymous namespace)::ParseSyntax)0, (DB::(anonymous namespace)::ErrorHandling)0>::getReturnTypeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const (.f93405704e33169bff82a6007b386acc) @ 0x000000000b21c373 in /usr/bin/clickhouse\r\n[8af69c367457] 2023.08.23 07:39:50.308920 [ 351 ] <Fatal> BaseDaemon: 4. DB::IFunctionOverloadResolver::getReturnTypeWithoutLowCardinality(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000010a95933 in /usr/bin/clickhouse\r\n[8af69c367457] 2023.08.23 07:39:50.309010 [ 351 ] <Fatal> BaseDaemon: 5. DB::IFunctionOverloadResolver::getReturnType(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000010a95588 in /usr/bin/clickhouse\r\n[8af69c367457] 2023.08.23 07:39:50.309088 [ 351 ] <Fatal> BaseDaemon: 6. DB::IFunctionOverloadResolver::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000010a96256 in /usr/bin/clickhouse\r\n[8af69c367457] 2023.08.23 07:39:50.309172 [ 351 ] <Fatal> BaseDaemon: 7. DB::ActionsDAG::addFunction(std::shared_ptr<DB::IFunctionOverloadResolver> const&, std::vector<DB::ActionsDAG::Node const*, std::allocator<DB::ActionsDAG::Node const*>>, String) @ 0x00000000113f5a3a in /usr/bin/clickhouse\r\n[8af69c367457] 2023.08.23 07:39:50.309259 [ 351 ] <Fatal> BaseDaemon: 8. DB::ScopeStack::addFunction(std::shared_ptr<DB::IFunctionOverloadResolver> const&, std::vector<String, std::allocator<String>> const&, String) @ 0x00000000116164a0 in /usr/bin/clickhouse\r\n[8af69c367457] 2023.08.23 07:39:50.309337 [ 351 ] <Fatal> BaseDaemon: 9. DB::ActionsMatcher::Data::addFunction(std::shared_ptr<DB::IFunctionOverloadResolver> const&, std::vector<String, std::allocator<String>> const&, String) @ 0x000000001162312f in /usr/bin/clickhouse\r\n[8af69c367457] 2023.08.23 07:39:50.309422 [ 351 ] <Fatal> BaseDaemon: 10. DB::ActionsMatcher::visit(DB::ASTFunction const&, std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x000000001161a003 in /usr/bin/clickhouse\r\n[8af69c367457] 2023.08.23 07:39:50.309495 [ 351 ] <Fatal> BaseDaemon: 11. DB::ActionsMatcher::visit(std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x00000000116169e8 in /usr/bin/clickhouse\r\n[8af69c367457] 2023.08.23 07:39:50.309603 [ 351 ] <Fatal> BaseDaemon: 12. DB::InDepthNodeVisitor<DB::ActionsMatcher, true, false, std::shared_ptr<DB::IAST> const>::doVisit(std::shared_ptr<DB::IAST> const&) @ 0x000000001160e5d5 in /usr/bin/clickhouse\r\n[8af69c367457] 2023.08.23 07:39:50.309686 [ 351 ] <Fatal> BaseDaemon: 13. DB::ExpressionAnalyzer::getRootActions(std::shared_ptr<DB::IAST> const&, bool, std::shared_ptr<DB::ActionsDAG>&, bool) @ 0x00000000115ec4bb in /usr/bin/clickhouse\r\n[8af69c367457] 2023.08.23 07:39:50.309754 [ 351 ] <Fatal> BaseDaemon: 14. DB::SelectQueryExpressionAnalyzer::appendSelect(DB::ExpressionActionsChain&, bool) @ 0x00000000115f4858 in /usr/bin/clickhouse\r\n[8af69c367457] 2023.08.23 07:39:50.309842 [ 351 ] <Fatal> BaseDaemon: 15. DB::ExpressionAnalysisResult::ExpressionAnalysisResult(DB::SelectQueryExpressionAnalyzer&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, bool, bool, bool, std::shared_ptr<DB::FilterDAGInfo> const&, std::shared_ptr<DB::FilterDAGInfo> const&, DB::Block const&) @ 0x00000000115fceb1 in /usr/bin/clickhouse\r\n[8af69c367457] 2023.08.23 07:39:50.309925 [ 351 ] <Fatal> BaseDaemon: 16. DB::InterpreterSelectQuery::getSampleBlockImpl() @ 0x0000000011d60303 in /usr/bin/clickhouse\r\n[8af69c367457] 2023.08.23 07:39:50.310004 [ 351 ] <Fatal> BaseDaemon: 17. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>)::$_0::operator()(bool) const @ 0x0000000011d5147a in /usr/bin/clickhouse\r\n[8af69c367457] 2023.08.23 07:39:50.310096 [ 351 ] <Fatal> BaseDaemon: 18. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000011d43a97 in /usr/bin/clickhouse\r\n[8af69c367457] 2023.08.23 07:39:50.310166 [ 351 ] <Fatal> BaseDaemon: 19. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000011df20a8 in /usr/bin/clickhouse\r\n[8af69c367457] 2023.08.23 07:39:50.310245 [ 351 ] <Fatal> BaseDaemon: 20. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x0000000011cfa7fe in /usr/bin/clickhouse\r\n[8af69c367457] 2023.08.23 07:39:50.310327 [ 351 ] <Fatal> BaseDaemon: 21. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x000000001213796a in /usr/bin/clickhouse\r\n[8af69c367457] 2023.08.23 07:39:50.310411 [ 351 ] <Fatal> BaseDaemon: 22. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x000000001213398e in /usr/bin/clickhouse\r\n[8af69c367457] 2023.08.23 07:39:50.310490 [ 351 ] <Fatal> BaseDaemon: 23. DB::TCPHandler::runImpl() @ 0x0000000012f98d19 in /usr/bin/clickhouse\r\n[8af69c367457] 2023.08.23 07:39:50.310560 [ 351 ] <Fatal> BaseDaemon: 24. DB::TCPHandler::run() @ 0x0000000012faa959 in /usr/bin/clickhouse\r\n[8af69c367457] 2023.08.23 07:39:50.310643 [ 351 ] <Fatal> BaseDaemon: 25. Poco::Net::TCPServerConnection::start() @ 0x0000000015997514 in /usr/bin/clickhouse\r\n[8af69c367457] 2023.08.23 07:39:50.310716 [ 351 ] <Fatal> BaseDaemon: 26. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015998711 in /usr/bin/clickhouse\r\n[8af69c367457] 2023.08.23 07:39:50.310788 [ 351 ] <Fatal> BaseDaemon: 27. Poco::PooledThread::run() @ 0x0000000015ace847 in /usr/bin/clickhouse\r\n[8af69c367457] 2023.08.23 07:39:50.310864 [ 351 ] <Fatal> BaseDaemon: 28. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015accb1c in /usr/bin/clickhouse\r\n[8af69c367457] 2023.08.23 07:39:50.310892 [ 351 ] <Fatal> BaseDaemon: 29. ? @ 0x00007ffff7f9a609 in ?\r\n[8af69c367457] 2023.08.23 07:39:50.310914 [ 351 ] <Fatal> BaseDaemon: 30. ? @ 0x00007ffff7ebf133 in ?\r\n[8af69c367457] 2023.08.23 07:39:50.484772 [ 351 ] <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: F37F4F1F1F05354DFEECD70FAB61DC73)\r\n[8af69c367457] 2023.08.23 07:39:50.486347 [ 351 ] <Fatal> BaseDaemon: Report this error to https://github.com/ClickHouse/ClickHouse/issues\r\n[8af69c367457] 2023.08.23 07:39:50.486476 [ 351 ] <Fatal> BaseDaemon: No settings were changed\r\n```\n",
  "hints_text": "cc: @rschu1ze \nDump with dbg build:\r\n```\r\n[ip-10-2-2-50] 2023.08.23 13:19:33.281635 [ 279506 ] <Fatal> BaseDaemon: ########################################\r\n[ip-10-2-2-50] 2023.08.23 13:19:33.281973 [ 279506 ] <Fatal> BaseDaemon: (version 23.8.1.1, build id: 8A49FF5F85322F3F9FC2E793E67B75B24A619537, git hash: 5dec6f19f3d3f2ebc6c647c2c457635e5d020da7) (from thread 279158) (query_id: eb79470b-9558-4c8b-bcf6-63bcab350bf0) (query: SELECT parseDateTime ('' , '' , toString ( number ) ) FROM numbers ( 13 ) ;) Received signal Aborted (6)\r\n[ip-10-2-2-50] 2023.08.23 13:19:33.282179 [ 279506 ] <Fatal> BaseDaemon:\r\n[ip-10-2-2-50] 2023.08.23 13:19:33.282343 [ 279506 ] <Fatal> BaseDaemon: Stack trace: 0x00007f04cf896a7c 0x00007f04cf842476 0x00007f04cf8287f3 0x00007f04cf82871b 0x00007f04cf839e96 0x000000000ad39924 0x00000000114a5d51 0x00000000114a55ca 0x000000000ad31f90 0x000000001a577d67 0x000000001a5777b6 0x000000001a577dc1 0x000000001b5d2866 0x000000001b91b736 0x000000001b9278dd 0x000000001b920d6f 0x000000001b9\r\n1bc0d 0x000000001b921577 0x000000001b91bc79 0x000000001b911ec0 0x000000001b9120a1 0x000000001b911e4a 0x000000001b8f5505 0x000000001b8e275d 0x000000001b8ec755 0x000000001b8f110a 0x000000001c3d2324 0x000000001c3cb33e 0x000000001c3c6202 0x000000001c3c1dc6 0x000000001c4da061 0x000000001c4d7b29 0x000000001c4d6fa5 0x000000001c375694 0x000000001c373488 0x000000001c9b84bd 0x000000001c9b4124 0x000000001decbb6\r\nd 0x000000001dedd7c5 0x0000000022ebaa99 0x0000000022ebb2dc\r\n[ip-10-2-2-50] 2023.08.23 13:19:33.282528 [ 279506 ] <Fatal> BaseDaemon: 4. ? @ 0x00007f04cf896a7c in ?\r\n[ip-10-2-2-50] 2023.08.23 13:19:33.282699 [ 279506 ] <Fatal> BaseDaemon: 5. ? @ 0x00007f04cf842476 in ?\r\n[ip-10-2-2-50] 2023.08.23 13:19:33.282809 [ 279506 ] <Fatal> BaseDaemon: 6. ? @ 0x00007f04cf8287f3 in ?\r\n[ip-10-2-2-50] 2023.08.23 13:19:33.282992 [ 279506 ] <Fatal> BaseDaemon: 7. ? @ 0x00007f04cf82871b in ?\r\n[ip-10-2-2-50] 2023.08.23 13:19:33.283182 [ 279506 ] <Fatal> BaseDaemon: 8. ? @ 0x00007f04cf839e96 in ?\r\n[ip-10-2-2-50] 2023.08.23 13:19:33.377672 [ 279506 ] <Fatal> BaseDaemon: 9. /home/ubuntu/repo/ch1/contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:0: boost::intrusive_ptr<DB::IColumn const>::operator->() const @ 0x000000000ad39924 in /home/ubuntu/repo/ch1/build/programs/clickhouse\r\n[ip-10-2-2-50] 2023.08.23 13:19:33.634651 [ 279506 ] <Fatal> BaseDaemon: 10. /home/ubuntu/repo/ch1/src/Functions/parseDateTime.cpp:1853: DB::(anonymous namespace)::FunctionParseDateTimeImpl<DB::(anonymous namespace)::NameParseDateTime, (DB::(anonymous namespace)::ParseSyntax)0, (DB::(anonymous namespace)::ErrorHandling)0>::getTimeZone(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWi\r\nthTypeAndName>> const&) const @ 0x00000000114a5d51 in /home/ubuntu/repo/ch1/build/programs/clickhouse\r\n[ip-10-2-2-50] 2023.08.23 13:19:33.875614 [ 279506 ] <Fatal> BaseDaemon: 11. /home/ubuntu/repo/ch1/src/Functions/parseDateTime.cpp:498: DB::(anonymous namespace)::FunctionParseDateTimeImpl<DB::(anonymous namespace)::NameParseDateTime, (DB::(anonymous namespace)::ParseSyntax)0, (DB::(anonymous namespace)::ErrorHandling)0>::getReturnTypeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::Col\r\numnWithTypeAndName>> const&) const @ 0x00000000114a55ca in /home/ubuntu/repo/ch1/build/programs/clickhouse\r\n[ip-10-2-2-50] 2023.08.23 13:19:33.963322 [ 279506 ] <Fatal> BaseDaemon: 12. /home/ubuntu/repo/ch1/src/Functions/IFunctionAdaptors.h:134: DB::FunctionToOverloadResolverAdaptor::getReturnTypeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000000ad31f90 in /home/ubuntu/repo/ch1/build/programs/clickhouse\r\n[ip-10-2-2-50] 2023.08.23 13:19:34.053532 [ 279506 ] <Fatal> BaseDaemon: 13. /home/ubuntu/repo/ch1/src/Functions/IFunction.cpp:479: DB::IFunctionOverloadResolver::getReturnTypeWithoutLowCardinality(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000001a577d67 in /home/ubuntu/repo/ch1/build/programs/clickhouse\r\n[ip-10-2-2-50] 2023.08.23 13:19:34.141039 [ 279506 ] <Fatal> BaseDaemon: 14. /home/ubuntu/repo/ch1/src/Functions/IFunction.cpp:425: DB::IFunctionOverloadResolver::getReturnType(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000001a5777b6 in /home/ubuntu/repo/ch1/build/programs/clickhouse\r\n[ip-10-2-2-50] 2023.08.23 13:19:34.228623 [ 279506 ] <Fatal> BaseDaemon: 15. /home/ubuntu/repo/ch1/src/Functions/IFunction.cpp:440: DB::IFunctionOverloadResolver::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000001a577dc1 in /home/ubuntu/repo/ch1/build/programs/clickhouse\r\n[ip-10-2-2-50] 2023.08.23 13:19:35.226472 [ 279506 ] <Fatal> BaseDaemon: 16. /home/ubuntu/repo/ch1/src/Interpreters/ActionsDAG.cpp:198: DB::ActionsDAG::addFunction(std::shared_ptr<DB::IFunctionOverloadResolver> const&, std::vector<DB::ActionsDAG::Node const*, std::allocator<DB::ActionsDAG::Node const*>>, String) @ 0x000000001b5d2866 in /home/ubuntu/repo/ch1/build/programs/clickhouse\r\n[ip-10-2-2-50] 2023.08.23 13:19:35.536420 [ 279506 ] <Fatal> BaseDaemon: 17. /home/ubuntu/repo/ch1/src/Interpreters/ActionsVisitor.cpp:641: DB::ScopeStack::addFunction(std::shared_ptr<DB::IFunctionOverloadResolver> const&, std::vector<String, std::allocator<String>> const&, String) @ 0x000000001b91b736 in /home/ubuntu/repo/ch1/build/programs/clickhouse\r\n[ip-10-2-2-50] 2023.08.23 13:19:35.845344 [ 279506 ] <Fatal> BaseDaemon: 18. /home/ubuntu/repo/ch1/src/Interpreters/ActionsVisitor.h:181: DB::ActionsMatcher::Data::addFunction(std::shared_ptr<DB::IFunctionOverloadResolver> const&, std::vector<String, std::allocator<String>> const&, String) @ 0x000000001b9278dd in /home/ubuntu/repo/ch1/build/programs/clickhouse\r\n[ip-10-2-2-50] 2023.08.23 13:19:36.153367 [ 279506 ] <Fatal> BaseDaemon: 19. /home/ubuntu/repo/ch1/src/Interpreters/ActionsVisitor.cpp:1290: DB::ActionsMatcher::visit(DB::ASTFunction const&, std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x000000001b920d6f in /home/ubuntu/repo/ch1/build/programs/clickhouse\r\n[ip-10-2-2-50] 2023.08.23 13:19:36.460736 [ 279506 ] <Fatal> BaseDaemon: 20. /home/ubuntu/repo/ch1/src/Interpreters/ActionsVisitor.cpp:698: DB::ActionsMatcher::visit(std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x000000001b91bc0d in /home/ubuntu/repo/ch1/build/programs/clickhouse\r\n[ip-10-2-2-50] 2023.08.23 13:19:36.767520 [ 279506 ] <Fatal> BaseDaemon: 21. /home/ubuntu/repo/ch1/src/Interpreters/ActionsVisitor.cpp:807: DB::ActionsMatcher::visit(DB::ASTExpressionList&, std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x000000001b921577 in /home/ubuntu/repo/ch1/build/programs/clickhouse\r\n[ip-10-2-2-50] 2023.08.23 13:19:37.074508 [ 279506 ] <Fatal> BaseDaemon: 22. /home/ubuntu/repo/ch1/src/Interpreters/ActionsVisitor.cpp:702: DB::ActionsMatcher::visit(std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x000000001b91bc79 in /home/ubuntu/repo/ch1/build/programs/clickhouse\r\n[ip-10-2-2-50] 2023.08.23 13:19:37.517940 [ 279506 ] <Fatal> BaseDaemon: 23. /home/ubuntu/repo/ch1/src/Interpreters/InDepthNodeVisitor.h:71: DB::InDepthNodeVisitor<DB::ActionsMatcher, true, false, std::shared_ptr<DB::IAST> const>::doVisit(std::shared_ptr<DB::IAST> const&) @ 0x000000001b911ec0 in /home/ubuntu/repo/ch1/build/programs/clickhouse\r\n[ip-10-2-2-50] 2023.08.23 13:19:37.958603 [ 279506 ] <Fatal> BaseDaemon: 24. /home/ubuntu/repo/ch1/src/Interpreters/InDepthNodeVisitor.h:61: void DB::InDepthNodeVisitor<DB::ActionsMatcher, true, false, std::shared_ptr<DB::IAST> const>::visitImplMain<false>(std::shared_ptr<DB::IAST> const&) @ 0x000000001b9120a1 in /home/ubuntu/repo/ch1/build/programs/clickhouse\r\n[ip-10-2-2-50] 2023.08.23 13:19:38.398543 [ 279506 ] <Fatal> BaseDaemon: 25. /home/ubuntu/repo/ch1/src/Interpreters/InDepthNodeVisitor.h:53: void DB::InDepthNodeVisitor<DB::ActionsMatcher, true, false, std::shared_ptr<DB::IAST> const>::visitImpl<false>(std::shared_ptr<DB::IAST> const&) @ 0x000000001b911e4a in /home/ubuntu/repo/ch1/build/programs/clickhouse\r\n[ip-10-2-2-50] 2023.08.23 13:19:38.756975 [ 279506 ] <Fatal> BaseDaemon: 26. /home/ubuntu/repo/ch1/src/Interpreters/InDepthNodeVisitor.h:33: DB::InDepthNodeVisitor<DB::ActionsMatcher, true, false, std::shared_ptr<DB::IAST> const>::visit(std::shared_ptr<DB::IAST> const&) @ 0x000000001b8f5505 in /home/ubuntu/repo/ch1/build/programs/clickhouse\r\n[ip-10-2-2-50] 2023.08.23 13:19:39.117042 [ 279506 ] <Fatal> BaseDaemon: 27. /home/ubuntu/repo/ch1/src/Interpreters/ExpressionAnalyzer.cpp:482: DB::ExpressionAnalyzer::getRootActions(std::shared_ptr<DB::IAST> const&, bool, std::shared_ptr<DB::ActionsDAG>&, bool) @ 0x000000001b8e275d in /home/ubuntu/repo/ch1/build/programs/clickhouse\r\n[ip-10-2-2-50] 2023.08.23 13:19:39.482238 [ 279506 ] <Fatal> BaseDaemon: 28. /home/ubuntu/repo/ch1/src/Interpreters/ExpressionAnalyzer.cpp:1463: DB::SelectQueryExpressionAnalyzer::appendSelect(DB::ExpressionActionsChain&, bool) @ 0x000000001b8ec755 in /home/ubuntu/repo/ch1/build/programs/clickhouse\r\n[ip-10-2-2-50] 2023.08.23 13:19:39.848939 [ 279506 ] <Fatal> BaseDaemon: 29. /home/ubuntu/repo/ch1/src/Interpreters/ExpressionAnalyzer.cpp:2009: DB::ExpressionAnalysisResult::ExpressionAnalysisResult(DB::SelectQueryExpressionAnalyzer&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, bool, bool, bool, std::shared_ptr<DB::FilterDAGInfo> const&, std::shared_ptr<DB::FilterDAGInfo> const&, DB::\r\nBlock const&) @ 0x000000001b8f110a in /home/ubuntu/repo/ch1/build/programs/clickhouse\r\n[ip-10-2-2-50] 2023.08.23 13:19:40.409221 [ 279506 ] <Fatal> BaseDaemon: 30. /home/ubuntu/repo/ch1/src/Interpreters/InterpreterSelectQuery.cpp:957: DB::InterpreterSelectQuery::getSampleBlockImpl() @ 0x000000001c3d2324 in /home/ubuntu/repo/ch1/build/programs/clickhouse\r\n[ip-10-2-2-50] 2023.08.23 13:19:40.961142 [ 279506 ] <Fatal> BaseDaemon: 31. /home/ubuntu/repo/ch1/src/Interpreters/InterpreterSelectQuery.cpp:780: DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<Stri\r\nng>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>)::$_0::operator()(bool) const @ 0x000000001c3cb33e in /home/ubuntu/repo/ch1/build/programs/clickhouse\r\n[ip-10-2-2-50] 2023.08.23 13:19:41.512375 [ 279506 ] <Fatal> BaseDaemon: 32. /home/ubuntu/repo/ch1/src/Interpreters/InterpreterSelectQuery.cpp:783: DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<Stri\r\nng>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x000000001c3c6202 in /home/ubuntu/repo/ch1/build/programs/clickhouse\r\n[ip-10-2-2-50] 2023.08.23 13:19:42.060471 [ 279506 ] <Fatal> BaseDaemon: 33. /home/ubuntu/repo/ch1/src/Interpreters/InterpreterSelectQuery.cpp:211: DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000001c3c1dc6 in /home/ubuntu/repo/ch1/buil\r\nd/programs/clickhouse\r\n[ip-10-2-2-50] 2023.08.23 13:19:42.285892 [ 279506 ] <Fatal> BaseDaemon: 34. /home/ubuntu/repo/ch1/contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:714: std::__unique_if<DB::InterpreterSelectQuery>::__unique_single std::make_unique[abi:v15000]<DB::InterpreterSelectQuery, std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>&, DB::SelectQueryOptions&, std::vector<String, std::allocat\r\nor<String>> const&>(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>&, DB::SelectQueryOptions&, std::vector<String, std::allocator<String>> const&) @ 0x000000001c4da061 in /home/ubuntu/repo/ch1/build/programs/clickhouse\r\n[ip-10-2-2-50] 2023.08.23 13:19:42.479307 [ 279506 ] <Fatal> BaseDaemon: 35. /home/ubuntu/repo/ch1/src/Interpreters/InterpreterSelectWithUnionQuery.cpp:254: DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x000000001c4d7b29 in /home/ubuntu/repo/ch1/build/programs/clickhouse\r\n[ip-10-2-2-50] 2023.08.23 13:19:42.672280 [ 279506 ] <Fatal> BaseDaemon: 36. /home/ubuntu/repo/ch1/src/Interpreters/InterpreterSelectWithUnionQuery.cpp:152: DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000001c4d6fa5 in /home/\r\nubuntu/repo/ch1/build/programs/clickhouse\r\n[ip-10-2-2-50] 2023.08.23 13:19:42.788987 [ 279506 ] <Fatal> BaseDaemon: 37. /home/ubuntu/repo/ch1/contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:714: std::__unique_if<DB::InterpreterSelectWithUnionQuery>::__unique_single std::make_unique[abi:v15000]<DB::InterpreterSelectWithUnionQuery, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>&, DB::SelectQueryOptions const&>(std::shared_pt\r\nr<DB::IAST>&, std::shared_ptr<DB::Context>&, DB::SelectQueryOptions const&) @ 0x000000001c375694 in /home/ubuntu/repo/ch1/build/programs/clickhouse\r\n[ip-10-2-2-50] 2023.08.23 13:19:42.886012 [ 279506 ] <Fatal> BaseDaemon: 38. /home/ubuntu/repo/ch1/src/Interpreters/InterpreterFactory.cpp:162: DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x000000001c373488 in /home/ubuntu/repo/ch1/build/programs/clickhouse\r\n[ip-10-2-2-50] 2023.08.23 13:19:43.152647 [ 279506 ] <Fatal> BaseDaemon: 39. /home/ubuntu/repo/ch1/src/Interpreters/executeQuery.cpp:1032: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x000000001c9b84bd in /home/ubuntu/repo/ch1/build/programs/clickhouse\r\n[ip-10-2-2-50] 2023.08.23 13:19:43.436491 [ 279506 ] <Fatal> BaseDaemon: 40. /home/ubuntu/repo/ch1/src/Interpreters/executeQuery.cpp:1229: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x000000001c9b4124 in /home/ubuntu/repo/ch1/build/programs/clickhouse\r\n[ip-10-2-2-50] 2023.08.23 13:19:43.719343 [ 279506 ] <Fatal> BaseDaemon: 41. /home/ubuntu/repo/ch1/src/Server/TCPHandler.cpp:435: DB::TCPHandler::runImpl() @ 0x000000001decbb6d in /home/ubuntu/repo/ch1/build/programs/clickhouse\r\n[ip-10-2-2-50] 2023.08.23 13:19:44.036279 [ 279506 ] <Fatal> BaseDaemon: 42. /home/ubuntu/repo/ch1/src/Server/TCPHandler.cpp:2056: DB::TCPHandler::run() @ 0x000000001dedd7c5 in /home/ubuntu/repo/ch1/build/programs/clickhouse\r\n[ip-10-2-2-50] 2023.08.23 13:19:44.060283 [ 279506 ] <Fatal> BaseDaemon: 43. /home/ubuntu/repo/ch1/base/poco/Net/src/TCPServerConnection.cpp:43: Poco::Net::TCPServerConnection::start() @ 0x0000000022ebaa99 in /home/ubuntu/repo/ch1/build/programs/clickhouse\r\n```",
  "created_at": "2023-08-23T20:10:52Z"
}