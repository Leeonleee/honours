You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Crash bug: ClickHouse Server v23.7.4.5 crashed when calling the parseDateTime function
**Describe the bug**
ClickHouse Server v23.7.4.5 crashed when calling the parseDateTime function with illegal arguments. 
It was found by an in-development fuzzer of WINGFUZZ.

**How to reproduce**
The SQL statement to reproduce:
```sql
SELECT parseDateTime ('' , '' , toString ( number ) ) FROM numbers ( 13 ) ;
```
It can be reproduced on the official docker image. (`clickhouse/clickhouse-server:head` (version 23.8.1.2413) and `clickhouse/clickhouse-server:latest` (version 23.7.4.5)).

The log traced by ClickHouse Server:
```
SELECT parseDateTime('', '', toString(number))
FROM numbers(13)

Query id: f1075392-f8cd-4d88-8975-3b20e532e6be

[8af69c367457] 2023.08.23 07:39:50.308508 [ 351 ] <Fatal> BaseDaemon: ########################################
[8af69c367457] 2023.08.23 07:39:50.308568 [ 351 ] <Fatal> BaseDaemon: (version 23.8.1.2413 (official build), build id: 4DCA66DD83B2161C82851B4655CD14334A08D535, git hash: 926533306c5969b77571e66163a6930cfce1cf86) (from thread 49) (query_id: f1075392-f8cd-4d88-8975-3b20e532e6be) (query: SELECT parseDateTime ('' , '' , toString ( number ) ) FROM numbers ( 13 ) ;) Received signal Segmentation fault (11)
[8af69c367457] 2023.08.23 07:39:50.308598 [ 351 ] <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Address not mapped to object.
[8af69c367457] 2023.08.23 07:39:50.308632 [ 351 ] <Fatal> BaseDaemon: Stack trace: 0x000000000b21cc89 0x000000000b21c373 0x0000000010a95933 0x0000000010a95588 0x0000000010a96256 0x00000000113f5a3a 0x00000000116164a0 0x000000001162312f 0x000000001161a003 0x00000000116169e8 0x000000001160e5d5 0x00000000115ec4bb 0x00000000115f4858 0x00000000115fceb1 0x0000000011d60303 0x0000000011d5147a 0x0000000011d43a97 0x0000000011df20a8 0x0000000011cfa7fe 0x000000001213796a 0x000000001213398e 0x0000000012f98d19 0x0000000012faa959 0x0000000015997514 0x0000000015998711 0x0000000015ace847 0x0000000015accb1c 0x00007ffff7f9a609 0x00007ffff7ebf133
[8af69c367457] 2023.08.23 07:39:50.308763 [ 351 ] <Fatal> BaseDaemon: 2. DB::(anonymous namespace)::FunctionParseDateTimeImpl<DB::(anonymous namespace)::NameParseDateTime, (DB::(anonymous namespace)::ParseSyntax)0, (DB::(anonymous namespace)::ErrorHandling)0>::getTimeZone(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x000000000b21cc89 in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:39:50.308846 [ 351 ] <Fatal> BaseDaemon: 3. DB::(anonymous namespace)::FunctionParseDateTimeImpl<DB::(anonymous namespace)::NameParseDateTime, (DB::(anonymous namespace)::ParseSyntax)0, (DB::(anonymous namespace)::ErrorHandling)0>::getReturnTypeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const (.f93405704e33169bff82a6007b386acc) @ 0x000000000b21c373 in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:39:50.308920 [ 351 ] <Fatal> BaseDaemon: 4. DB::IFunctionOverloadResolver::getReturnTypeWithoutLowCardinality(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000010a95933 in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:39:50.309010 [ 351 ] <Fatal> BaseDaemon: 5. DB::IFunctionOverloadResolver::getReturnType(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000010a95588 in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:39:50.309088 [ 351 ] <Fatal> BaseDaemon: 6. DB::IFunctionOverloadResolver::build(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x0000000010a96256 in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:39:50.309172 [ 351 ] <Fatal> BaseDaemon: 7. DB::ActionsDAG::addFunction(std::shared_ptr<DB::IFunctionOverloadResolver> const&, std::vector<DB::ActionsDAG::Node const*, std::allocator<DB::ActionsDAG::Node const*>>, String) @ 0x00000000113f5a3a in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:39:50.309259 [ 351 ] <Fatal> BaseDaemon: 8. DB::ScopeStack::addFunction(std::shared_ptr<DB::IFunctionOverloadResolver> const&, std::vector<String, std::allocator<String>> const&, String) @ 0x00000000116164a0 in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:39:50.309337 [ 351 ] <Fatal> BaseDaemon: 9. DB::ActionsMatcher::Data::addFunction(std::shared_ptr<DB::IFunctionOverloadResolver> const&, std::vector<String, std::allocator<String>> const&, String) @ 0x000000001162312f in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:39:50.309422 [ 351 ] <Fatal> BaseDaemon: 10. DB::ActionsMatcher::visit(DB::ASTFunction const&, std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x000000001161a003 in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:39:50.309495 [ 351 ] <Fatal> BaseDaemon: 11. DB::ActionsMatcher::visit(std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x00000000116169e8 in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:39:50.309603 [ 351 ] <Fatal> BaseDaemon: 12. DB::InDepthNodeVisitor<DB::ActionsMatcher, true, false, std::shared_ptr<DB::IAST> const>::doVisit(std::shared_ptr<DB::IAST> const&) @ 0x000000001160e5d5 in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:39:50.309686 [ 351 ] <Fatal> BaseDaemon: 13. DB::ExpressionAnalyzer::getRootActions(std::shared_ptr<DB::IAST> const&, bool, std::shared_ptr<DB::ActionsDAG>&, bool) @ 0x00000000115ec4bb in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:39:50.309754 [ 351 ] <Fatal> BaseDaemon: 14. DB::SelectQueryExpressionAnalyzer::appendSelect(DB::ExpressionActionsChain&, bool) @ 0x00000000115f4858 in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:39:50.309842 [ 351 ] <Fatal> BaseDaemon: 15. DB::ExpressionAnalysisResult::ExpressionAnalysisResult(DB::SelectQueryExpressionAnalyzer&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, bool, bool, bool, std::shared_ptr<DB::FilterDAGInfo> const&, std::shared_ptr<DB::FilterDAGInfo> const&, DB::Block const&) @ 0x00000000115fceb1 in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:39:50.309925 [ 351 ] <Fatal> BaseDaemon: 16. DB::InterpreterSelectQuery::getSampleBlockImpl() @ 0x0000000011d60303 in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:39:50.310004 [ 351 ] <Fatal> BaseDaemon: 17. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>)::$_0::operator()(bool) const @ 0x0000000011d5147a in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:39:50.310096 [ 351 ] <Fatal> BaseDaemon: 18. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000011d43a97 in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:39:50.310166 [ 351 ] <Fatal> BaseDaemon: 19. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000011df20a8 in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:39:50.310245 [ 351 ] <Fatal> BaseDaemon: 20. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x0000000011cfa7fe in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:39:50.310327 [ 351 ] <Fatal> BaseDaemon: 21. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x000000001213796a in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:39:50.310411 [ 351 ] <Fatal> BaseDaemon: 22. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x000000001213398e in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:39:50.310490 [ 351 ] <Fatal> BaseDaemon: 23. DB::TCPHandler::runImpl() @ 0x0000000012f98d19 in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:39:50.310560 [ 351 ] <Fatal> BaseDaemon: 24. DB::TCPHandler::run() @ 0x0000000012faa959 in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:39:50.310643 [ 351 ] <Fatal> BaseDaemon: 25. Poco::Net::TCPServerConnection::start() @ 0x0000000015997514 in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:39:50.310716 [ 351 ] <Fatal> BaseDaemon: 26. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015998711 in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:39:50.310788 [ 351 ] <Fatal> BaseDaemon: 27. Poco::PooledThread::run() @ 0x0000000015ace847 in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:39:50.310864 [ 351 ] <Fatal> BaseDaemon: 28. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015accb1c in /usr/bin/clickhouse
[8af69c367457] 2023.08.23 07:39:50.310892 [ 351 ] <Fatal> BaseDaemon: 29. ? @ 0x00007ffff7f9a609 in ?
[8af69c367457] 2023.08.23 07:39:50.310914 [ 351 ] <Fatal> BaseDaemon: 30. ? @ 0x00007ffff7ebf133 in ?
[8af69c367457] 2023.08.23 07:39:50.484772 [ 351 ] <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: F37F4F1F1F05354DFEECD70FAB61DC73)
[8af69c367457] 2023.08.23 07:39:50.486347 [ 351 ] <Fatal> BaseDaemon: Report this error to https://github.com/ClickHouse/ClickHouse/issues
[8af69c367457] 2023.08.23 07:39:50.486476 [ 351 ] <Fatal> BaseDaemon: No settings were changed
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
