{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 73548,
  "instance_id": "ClickHouse__ClickHouse-73548",
  "issue_numbers": [
    "73542"
  ],
  "base_commit": "5011cd5ca447fe1e6c32a1e31364918655011a32",
  "patch": "diff --git a/src/Analyzer/Passes/FunctionToSubcolumnsPass.cpp b/src/Analyzer/Passes/FunctionToSubcolumnsPass.cpp\nindex a57aa81c9fce..beffb777d131 100644\n--- a/src/Analyzer/Passes/FunctionToSubcolumnsPass.cpp\n+++ b/src/Analyzer/Passes/FunctionToSubcolumnsPass.cpp\n@@ -71,23 +71,47 @@ void optimizeFunctionEmpty(QueryTreeNodePtr &, FunctionNode & function_node, Col\n     resolveOrdinaryFunctionNodeByName(function_node, function_name, ctx.context);\n }\n \n-String getSubcolumnNameForElement(const Field & value, const DataTypeTuple & data_type_tuple)\n+std::optional<NameAndTypePair> getSubcolumnForElement(const Field & value, const DataTypeTuple & data_type_tuple)\n {\n+    const auto & names = data_type_tuple.getElementNames();\n+    const auto & types = data_type_tuple.getElements();\n+\n     if (value.getType() == Field::Types::String)\n-        return value.safeGet<const String &>();\n+    {\n+        const auto & name = value.safeGet<const String &>();\n+        auto pos = data_type_tuple.tryGetPositionByName(name);\n+\n+        if (!pos)\n+            return {};\n+\n+        return NameAndTypePair{name, types[*pos]};\n+    }\n \n     if (value.getType() == Field::Types::UInt64)\n-        return data_type_tuple.getNameByPosition(value.safeGet<UInt64>());\n+    {\n+        size_t index = value.safeGet<UInt64>();\n+\n+        if (index == 0 || index > types.size())\n+            return {};\n+\n+        return NameAndTypePair{names[index - 1], types[index - 1]};\n+    }\n \n-    return \"\";\n+    return {};\n }\n \n-String getSubcolumnNameForElement(const Field & value, const DataTypeVariant &)\n+std::optional<NameAndTypePair> getSubcolumnForElement(const Field & value, const DataTypeVariant & data_type_variant)\n {\n-    if (value.getType() == Field::Types::String)\n-        return value.safeGet<const String &>();\n+    if (value.getType() != Field::Types::String)\n+        return {};\n+\n+    const auto & name = value.safeGet<const String &>();\n+    auto discr = data_type_variant.tryGetVariantDiscriminator(name);\n+\n+    if (!discr)\n+        return {};\n \n-    return \"\";\n+    return NameAndTypePair{name, data_type_variant.getVariant(*discr)};\n }\n \n template <typename DataType>\n@@ -105,12 +129,12 @@ void optimizeTupleOrVariantElement(QueryTreeNodePtr & node, FunctionNode & funct\n         return;\n \n     const auto & data_type_concrete = assert_cast<const DataType &>(*ctx.column.type);\n-    auto subcolumn_name = getSubcolumnNameForElement(second_argument_constant_node->getValue(), data_type_concrete);\n+    auto subcolumn = getSubcolumnForElement(second_argument_constant_node->getValue(), data_type_concrete);\n \n-    if (subcolumn_name.empty())\n+    if (!subcolumn)\n         return;\n \n-    NameAndTypePair column{ctx.column.name + \".\" + subcolumn_name, function_node.getResultType()};\n+    NameAndTypePair column{ctx.column.name + \".\" + subcolumn->name, subcolumn->type};\n     node = std::make_shared<ColumnNode>(column, ctx.column_source);\n }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02971_functions_to_subcolumns_variant.reference b/tests/queries/0_stateless/02971_functions_to_subcolumns_variant.reference\nindex 04616738a159..507524524b95 100644\n--- a/tests/queries/0_stateless/02971_functions_to_subcolumns_variant.reference\n+++ b/tests/queries/0_stateless/02971_functions_to_subcolumns_variant.reference\n@@ -1,4 +1,4 @@\n-SELECT __table1.`v.String` AS `variantElement(v, \\'String\\')`\n+SELECT _CAST(__table1.`v.String`, \\'Nullable(String)\\') AS `variantElement(v, \\'String\\')`\n FROM default.t_func_to_subcolumns_variant AS __table1\n foo\n \\N\ndiff --git a/tests/queries/0_stateless/03289_tuple_element_to_subcolumn.reference b/tests/queries/0_stateless/03289_tuple_element_to_subcolumn.reference\nnew file mode 100644\nindex 000000000000..a0a5e06ff1b4\n--- /dev/null\n+++ b/tests/queries/0_stateless/03289_tuple_element_to_subcolumn.reference\n@@ -0,0 +1,6 @@\n+([1,2],['a','b','c'])\n+([3,4],['d','e'])\n+([1,2],['a','b','c'])\n+([3,4],['d','e'])\n+([],['d','e'])\n+([3,4],[])\ndiff --git a/tests/queries/0_stateless/03289_tuple_element_to_subcolumn.sql b/tests/queries/0_stateless/03289_tuple_element_to_subcolumn.sql\nnew file mode 100644\nindex 000000000000..776b6ce8b89b\n--- /dev/null\n+++ b/tests/queries/0_stateless/03289_tuple_element_to_subcolumn.sql\n@@ -0,0 +1,24 @@\n+DROP TABLE IF EXISTS t_tuple_elem;\n+\n+SET enable_variant_type = 1;\n+\n+CREATE TABLE t_tuple_elem (\n+    t1 Tuple(\n+        a Array(UInt64),\n+        b Array(LowCardinality(String))),\n+    v Variant(\n+        Array(UInt64),\n+        Array(LowCardinality(String)))\n+)\n+ENGINE = MergeTree ORDER BY tuple();\n+\n+INSERT INTO t_tuple_elem VALUES (([1, 2], ['a', 'b', 'c']), [3, 4]);\n+INSERT INTO t_tuple_elem VALUES (([3, 4], ['d', 'e']), ['d', 'e']);\n+\n+SET optimize_functions_to_subcolumns = 1;\n+\n+SELECT (tupleElement(t1, 1), tupleElement(t1, 2)) FROM t_tuple_elem ORDER BY ALL;\n+SELECT (tupleElement(t1, 'a'), tupleElement(t1, 'b')) FROM t_tuple_elem ORDER BY ALL;\n+SELECT (variantElement(v, 'Array(UInt64)'), variantElement(v, 'Array(LowCardinality(String))')) FROM t_tuple_elem ORDER BY ALL;\n+\n+DROP TABLE t_tuple_elem;\n",
  "problem_statement": "Bad cast from type {} to {} with optimize_functions_to_subcolumns\nhttps://s3.amazonaws.com/clickhouse-test-reports/0/90a6a87d0b9409485168eab37962b0d486468311/ast_fuzzer__ubsan_.html\r\n\r\n```\r\n\r\nCREATE TABLE IF NOT EXISTS agg_table__fuzz_0 (`time` DateTime CODEC(DoubleDelta, LZ4), `xxx` String, `two_values` Tuple(Array(Nullable(UInt16)), UInt32), `agg_simple` SimpleAggregateFunction(sum, UInt64), `agg` Tuple(Array(Int16), Array(LowCardinality(UInt64)))) ENGINE = AggregatingMergeTree ORDER BY (xxx, time) settings allow_nullable_key=1 settings allow_suspicious_low_cardinality_types=1;\r\n\r\n\r\nINSERT INTO agg_table__fuzz_0 SELECT toDateTime('2020-10-01 19:20:30'), 'hello', ([any(number)], sum(number)), sum(number), sumMap((arrayMap(i -> toString(i), range(13)), arrayMap(i -> (number + i), range(13)))) FROM numbers(10);\r\n\r\nSELECT (tupleElement(agg, 1), tupleElement(agg, 2)) FROM agg_table__fuzz_0 SETTINGS optimize_functions_to_subcolumns=0; -- OK\r\nSELECT (tupleElement(agg, 1), tupleElement(agg, 2)) FROM agg_table__fuzz_0 SETTINGS optimize_functions_to_subcolumns=1; -- KO\r\n```\n",
  "hints_text": "",
  "created_at": "2024-12-18T14:45:31Z"
}