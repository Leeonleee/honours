{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 68848,
  "instance_id": "ClickHouse__ClickHouse-68848",
  "issue_numbers": [
    "68618"
  ],
  "base_commit": "e7054029c4e2721855b599d874c74d68ae2cd45a",
  "patch": "diff --git a/src/Functions/array/arrayElement.cpp b/src/Functions/array/arrayElement.cpp\nindex 81f3f97979bb..d0b2b49cc1cd 100644\n--- a/src/Functions/array/arrayElement.cpp\n+++ b/src/Functions/array/arrayElement.cpp\n@@ -1598,6 +1598,9 @@ ColumnPtr FunctionArrayElement::executeTuple(const ColumnsWithTypeAndName & argu\n     const auto & tuple_columns = col_nested->getColumns();\n     size_t tuple_size = tuple_columns.size();\n \n+    if (tuple_size == 0)\n+        return ColumnTuple::create(input_rows_count);\n+\n     const DataTypes & tuple_types = typeid_cast<const DataTypeTuple &>(\n         *typeid_cast<const DataTypeArray &>(*arguments[0].type).getNestedType()).getElements();\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03229_empty_tuple_in_array.reference b/tests/queries/0_stateless/03229_empty_tuple_in_array.reference\nnew file mode 100644\nindex 000000000000..6a452c185a8c\n--- /dev/null\n+++ b/tests/queries/0_stateless/03229_empty_tuple_in_array.reference\n@@ -0,0 +1,1 @@\n+()\ndiff --git a/tests/queries/0_stateless/03229_empty_tuple_in_array.sql b/tests/queries/0_stateless/03229_empty_tuple_in_array.sql\nnew file mode 100644\nindex 000000000000..09ba3595a5a4\n--- /dev/null\n+++ b/tests/queries/0_stateless/03229_empty_tuple_in_array.sql\n@@ -0,0 +1,1 @@\n+select [()][0];\n",
  "problem_statement": "Array with empty tuple logical error\n**Describe the bug**\r\n\r\nSelecting an empty tuple from an array, gives a logical error. Reproducible on the latest release:\r\n\r\nhttps://fiddle.clickhouse.com/7d115084-e879-4945-836e-e98cd83dd8eb\r\n\r\n**How to reproduce**\r\n\r\n```sql\r\nSELECT [()][0];\r\n/*\r\nReceived exception from server (version 24.6.2):\r\nCode: 49. DB::Exception: Received from localhost:9000. DB::Exception: This function cannot be used to construct empty tuple. It is a bug. (LOGICAL_ERROR)\r\n(query: SELECT [()][0];)\r\n*/\r\n```\r\n\r\nHere is the stack trace in the debug build:\r\n\r\n```\r\n<Fatal> : Logical error: 'This function cannot be used to construct empty tuple. It is a bug'.\r\n<Fatal> : Stack trace (when copying this message, always include the lines below):\r\n\r\n0. contrib/llvm-project/libcxx/include/exception:141: Poco::Exception::Exception(String const&, int) @ 0x00000000274ac031\r\n1. src/Common/Exception.cpp:111: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000160ee12d\r\n2. contrib/llvm-project/libcxx/include/string:1499: DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000006bc3d26\r\n3. src/Common/LoggingFormatStringHelpers.h:45: DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000006bcbf4f\r\n4. src/Columns/ColumnTuple.cpp:0: DB::ColumnTuple::create(std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>> const&) @ 0x0000000024488a8b\r\n5. contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:140: DB::(anonymous namespace)::FunctionArrayElement::perform(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, DB::(anonymous namespace)::ArrayImpl::NullMapBuilder&, unsigned long) const @ 0x0000000015201b23\r\n6. contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:100: DB::(anonymous namespace)::FunctionArrayElement::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x00000000151f695c\r\n7. src/Functions/IFunction.h:448: DB::IFunction::executeImplDryRun(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x0000000006bc22d5\r\n8. src/Functions/IFunctionAdaptors.h:28: DB::FunctionToExecutableFunctionAdaptor::executeDryRunImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x0000000006bfc4f5\r\n9. contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:117: DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x0000000008b6305b\r\n10. contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:117: DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x0000000008b651ef\r\n11. src/Functions/IFunction.cpp:0: DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x0000000008b682c5\r\n12. contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:117: DB::ActionsDAG::evaluatePartialResult(std::unordered_map<DB::ActionsDAG::Node const*, DB::ColumnWithTypeAndName, std::hash<DB::ActionsDAG::Node const*>, std::equal_to<DB::ActionsDAG::Node const*>, std::allocator<std::pair<DB::ActionsDAG::Node const* const, DB::ColumnWithTypeAndName>>>&, std::vector<DB::ActionsDAG::Node const*, std::allocator<DB::ActionsDAG::Node const*>> const&, unsigned long, bool) @ 0x0000000021b84c70\r\n13. contrib/llvm-project/libcxx/include/vector:961: DB::ActionsDAG::updateHeader(DB::Block const&) const @ 0x0000000021b8298a\r\n14. src/Processors/Transforms/ExpressionTransform.cpp:10: DB::ExpressionTransform::transformHeader(DB::Block const&, DB::ActionsDAG const&) @ 0x00000000263479d7\r\n15. src/Processors/QueryPlan/ExpressionStep.cpp:0: DB::ExpressionStep::ExpressionStep(DB::DataStream const&, DB::ActionsDAG) @ 0x00000000267037b3\r\n16. contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:714: DB::(anonymous namespace)::addExpressionStep(DB::QueryPlan&, std::shared_ptr<DB::ActionsAndProjectInputsFlag>&, String const&, std::unordered_set<std::shared_ptr<DB::FutureSet>, std::hash<std::shared_ptr<DB::FutureSet>>, std::equal_to<std::shared_ptr<DB::FutureSet>>, std::allocator<std::shared_ptr<DB::FutureSet>>>&) @ 0x0000000022d45c73\r\n17. contrib/llvm-project/libcxx/include/string:1499: DB::Planner::buildPlanForQueryNode() @ 0x0000000022d3a65f\r\n18. src/Planner/Planner.cpp:1254: DB::Planner::buildQueryPlanIfNeeded() @ 0x0000000022d316fb\r\n19. src/Planner/Planner.h:44: DB::InterpreterSelectQueryAnalyzer::getQueryPlan() @ 0x0000000022d2ccb2\r\n20. src/Interpreters/executeQuery.cpp:1180: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x0000000023318736\r\n21. src/Interpreters/executeQuery.cpp:1395: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x0000000023312209\r\n22. src/Client/LocalConnection.cpp:0: DB::LocalConnection::sendQuery(DB::ConnectionTimeouts const&, String const&, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>> const&, String const&, unsigned long, DB::Settings const*, DB::ClientInfo const*, bool, std::function<void (DB::Progress const&)>) @ 0x0000000025ddecdc\r\n23. src/Client/ClientBase.cpp:1040: DB::ClientBase::processOrdinaryQuery(String const&, std::shared_ptr<DB::IAST>) @ 0x0000000025d12624\r\n24. src/Client/ClientBase.cpp:0: DB::ClientBase::processParsedSingleQuery(String const&, String const&, std::shared_ptr<DB::IAST>, std::optional<bool>, bool) @ 0x0000000025d0f282\r\n25. src/Client/ClientBase.cpp:2275: DB::ClientBase::executeMultiQuery(String const&) @ 0x0000000025d25adc\r\n26. src/Client/ClientBase.cpp:0: DB::ClientBase::processQueryText(String const&) @ 0x0000000025d27942\r\n27. src/Client/ClientBase.cpp:2645: DB::ClientBase::runInteractive() @ 0x0000000025d2adb2\r\n28. contrib/llvm-project/libcxx/include/string:1499: DB::LocalServer::main(std::vector<String, std::allocator<String>> const&) @ 0x000000001656f035\r\n29. base/poco/Util/src/Application.cpp:0: Poco::Util::Application::run() @ 0x00000000276b3417\r\n30. programs/local/LocalServer.cpp:0: mainEntryClickHouseLocal(int, char**) @ 0x000000001658024a\r\n31. programs/main.cpp:0: main @ 0x0000000006bb32d6\r\n\r\n2024.08.20 14:31:59.005028 [ 1555097 ] {} <Fatal> ClientBase: ########## Short fault info ############\r\n2024.08.20 14:31:59.005099 [ 1555097 ] {} <Fatal> ClientBase: (version 24.9.1.1, build id: , git hash: ) (from thread 1555081) Received signal 6\r\n2024.08.20 14:31:59.005132 [ 1555097 ] {} <Fatal> ClientBase: Signal description: Aborted\r\n2024.08.20 14:31:59.005156 [ 1555097 ] {} <Fatal> ClientBase: \r\n2024.08.20 14:31:59.005191 [ 1555097 ] {} <Fatal> ClientBase: Stack trace: 0x000055fd64667aad 0x000055fd64b94b52 0x000070c582845320 0x000070c58289eb1d 0x000070c58284526e 0x000070c5828288ff 0x000055fd64608de8 0x000055fd6460a5ff 0x000055fd550dfd26 0x000055fd550e7f4f 0x000055fd729a4a8b 0x000055fd6371db23 0x000055fd6371295c 0x000055fd550de2d5 0x000055fd551184f5 0x000055fd5707f05b 0x000055fd570811ef 0x000055fd570842c5 0x000055fd700a0c70 0x000055fd7009e98a 0x000055fd748639d7 0x000055fd74c1f7b3 0x000055fd71261c73 0x000055fd7125665f 0x000055fd7124d6fb 0x000055fd71248cb2 0x000055fd71834736 0x000055fd7182e209 0x000055fd742facdc 0x000055fd7422e624 0x000055fd7422b282 0x000055fd74241adc 0x000055fd74243942 0x000055fd74246db2 0x000055fd64a8b035 0x000055fd75bcf417 0x000055fd64a9c24a 0x000055fd550cf2d6 0x000070c58282a1ca 0x000070c58282a28b 0x000055fd54ffe02e\r\n2024.08.20 14:31:59.005222 [ 1555097 ] {} <Fatal> ClientBase: ########################################\r\n2024.08.20 14:31:59.005261 [ 1555097 ] {} <Fatal> ClientBase: (version 24.9.1.1, build id: , git hash: ) (from thread 1555081) (query_id: 3351e439-6bb6-4655-ae7c-b125fb9f7f75) (query: SELECT [()][0];) Received signal Aborted (6)\r\n2024.08.20 14:31:59.005326 [ 1555097 ] {} <Fatal> ClientBase: \r\n2024.08.20 14:31:59.005357 [ 1555097 ] {} <Fatal> ClientBase: Stack trace: 0x000055fd64667aad 0x000055fd64b94b52 0x000070c582845320 0x000070c58289eb1d 0x000070c58284526e 0x000070c5828288ff 0x000055fd64608de8 0x000055fd6460a5ff 0x000055fd550dfd26 0x000055fd550e7f4f 0x000055fd729a4a8b 0x000055fd6371db23 0x000055fd6371295c 0x000055fd550de2d5 0x000055fd551184f5 0x000055fd5707f05b 0x000055fd570811ef 0x000055fd570842c5 0x000055fd700a0c70 0x000055fd7009e98a 0x000055fd748639d7 0x000055fd74c1f7b3 0x000055fd71261c73 0x000055fd7125665f 0x000055fd7124d6fb 0x000055fd71248cb2 0x000055fd71834736 0x000055fd7182e209 0x000055fd742facdc 0x000055fd7422e624 0x000055fd7422b282 0x000055fd74241adc 0x000055fd74243942 0x000055fd74246db2 0x000055fd64a8b035 0x000055fd75bcf417 0x000055fd64a9c24a 0x000055fd550cf2d6 0x000070c58282a1ca 0x000070c58282a28b 0x000055fd54ffe02e\r\n2024.08.20 14:31:59.046340 [ 1555097 ] {} <Fatal> ClientBase: 0.0. inlined from src/Common/StackTrace.cpp:349: StackTrace::tryCapture()\r\n2024.08.20 14:31:59.046385 [ 1555097 ] {} <Fatal> ClientBase: 0. src/Common/StackTrace.cpp:318: StackTrace::StackTrace(ucontext_t const&) @ 0x000000001614baad\r\n2024.08.20 14:31:59.101355 [ 1555097 ] {} <Fatal> ClientBase: 1. src/Common/SignalHandlers.cpp:0: signalHandler(int, siginfo_t*, void*) @ 0x0000000016678b52\r\n2024.08.20 14:31:59.101386 [ 1555097 ] {} <Fatal> ClientBase: 2. ? @ 0x000070c582845320\r\n2024.08.20 14:31:59.101407 [ 1555097 ] {} <Fatal> ClientBase: 3. ? @ 0x000070c58289eb1d\r\n2024.08.20 14:31:59.101425 [ 1555097 ] {} <Fatal> ClientBase: 4. ? @ 0x000070c58284526e\r\n2024.08.20 14:31:59.101445 [ 1555097 ] {} <Fatal> ClientBase: 5. ? @ 0x000070c5828288ff\r\n2024.08.20 14:31:59.180507 [ 1555097 ] {} <Fatal> ClientBase: 6.0. inlined from contrib/llvm-project/libcxx/include/atomic:958: int std::__cxx_atomic_load[abi:v15007]<int>(std::__cxx_atomic_base_impl<int> const*, std::memory_order)\r\n2024.08.20 14:31:59.180553 [ 1555097 ] {} <Fatal> ClientBase: 6.1. inlined from contrib/llvm-project/libcxx/include/atomic:1560: std::__atomic_base<int, false>::load[abi:v15007](std::memory_order) const\r\n2024.08.20 14:31:59.180588 [ 1555097 ] {} <Fatal> ClientBase: 6.2. inlined from contrib/llvm-project/libcxx/include/atomic:1564: std::__atomic_base<int, false>::operator int[abi:v15007]() const\r\n2024.08.20 14:31:59.180619 [ 1555097 ] {} <Fatal> ClientBase: 6.3. inlined from base/poco/Foundation/include/Poco/Logger.h:2354: Poco::Logger::is(int) const\r\n2024.08.20 14:31:59.180651 [ 1555097 ] {} <Fatal> ClientBase: 6. src/Common/Exception.cpp:47: DB::abortOnFailedAssertion(String const&, void* const*, unsigned long, unsigned long) @ 0x00000000160ecde8\r\n2024.08.20 14:31:59.253087 [ 1555097 ] {} <Fatal> ClientBase: 7. src/Common/Exception.cpp:111: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000160ee5ff\r\n2024.08.20 14:31:59.290795 [ 1555097 ] {} <Fatal> ClientBase: 8.0. inlined from contrib/llvm-project/libcxx/include/string:1499: String::__is_long[abi:v15007]() const\r\n2024.08.20 14:31:59.290838 [ 1555097 ] {} <Fatal> ClientBase: 8.1. inlined from contrib/llvm-project/libcxx/include/string:2333: ~basic_string\r\n2024.08.20 14:31:59.290863 [ 1555097 ] {} <Fatal> ClientBase: 8.2. inlined from src/Common/Exception.h:98: ~MessageMasked\r\n2024.08.20 14:31:59.290885 [ 1555097 ] {} <Fatal> ClientBase: 8.3. inlined from src/Common/Exception.h:110: Exception\r\n2024.08.20 14:31:59.290913 [ 1555097 ] {} <Fatal> ClientBase: 8. src/Common/Exception.h:63: DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000006bc3d26\r\n2024.08.20 14:31:59.334217 [ 1555097 ] {} <Fatal> ClientBase: 9.0. inlined from src/Common/LoggingFormatStringHelpers.h:45: ~PreformattedMessage\r\n2024.08.20 14:31:59.334254 [ 1555097 ] {} <Fatal> ClientBase: 9. src/Common/Exception.h:128: DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000006bcbf4f\r\n2024.08.20 14:31:59.382357 [ 1555097 ] {} <Fatal> ClientBase: 10. src/Columns/ColumnTuple.cpp:0: DB::ColumnTuple::create(std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>> const&) @ 0x0000000024488a8b\r\n2024.08.20 14:31:59.482422 [ 1555097 ] {} <Fatal> ClientBase: 11.0. inlined from contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:140: intrusive_ptr<const DB::ColumnTuple>\r\n2024.08.20 14:31:59.482459 [ 1555097 ] {} <Fatal> ClientBase: 11.1. inlined from src/Common/COW.h:140: immutable_ptr<DB::ColumnTuple>\r\n2024.08.20 14:31:59.482493 [ 1555097 ] {} <Fatal> ClientBase: 11.2. inlined from src/Functions/array/arrayElement.cpp:1632: DB::(anonymous namespace)::FunctionArrayElement::executeTuple(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, unsigned long) const\r\n2024.08.20 14:31:59.482527 [ 1555097 ] {} <Fatal> ClientBase: 11. src/Functions/array/arrayElement.cpp:2082: DB::(anonymous namespace)::FunctionArrayElement::perform(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, DB::(anonymous namespace)::ArrayImpl::NullMapBuilder&, unsigned long) const @ 0x0000000015201b23\r\n2024.08.20 14:31:59.574708 [ 1555097 ] {} <Fatal> ClientBase: 12.0. inlined from contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:100: ~intrusive_ptr\r\n2024.08.20 14:31:59.574755 [ 1555097 ] {} <Fatal> ClientBase: 12.1. inlined from src/Functions/array/arrayElement.cpp:173: ~NullMapBuilder\r\n2024.08.20 14:31:59.574779 [ 1555097 ] {} <Fatal> ClientBase: 12. src/Functions/array/arrayElement.cpp:2022: DB::(anonymous namespace)::FunctionArrayElement::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x00000000151f695c\r\n2024.08.20 14:31:59.611499 [ 1555097 ] {} <Fatal> ClientBase: 13. src/Functions/IFunction.h:448: DB::IFunction::executeImplDryRun(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x0000000006bc22d5\r\n2024.08.20 14:31:59.672103 [ 1555097 ] {} <Fatal> ClientBase: 14. src/Functions/IFunctionAdaptors.h:28: DB::FunctionToExecutableFunctionAdaptor::executeDryRunImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x0000000006bfc4f5\r\n2024.08.20 14:31:59.698799 [ 1555097 ] {} <Fatal> ClientBase: 15.0. inlined from contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:117: intrusive_ptr\r\n2024.08.20 14:31:59.698838 [ 1555097 ] {} <Fatal> ClientBase: 15.1. inlined from contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:124: boost::intrusive_ptr<DB::IColumn const>::operator=(boost::intrusive_ptr<DB::IColumn const>&&)\r\n2024.08.20 14:31:59.698870 [ 1555097 ] {} <Fatal> ClientBase: 15.2. inlined from src/Common/COW.h:136: COW<DB::IColumn>::immutable_ptr<DB::IColumn>::operator=(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&&)\r\n2024.08.20 14:31:59.698903 [ 1555097 ] {} <Fatal> ClientBase: 15. src/Functions/IFunction.cpp:245: DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x0000000008b6305b\r\n2024.08.20 14:31:59.729992 [ 1555097 ] {} <Fatal> ClientBase: 16.0. inlined from contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:117: intrusive_ptr\r\n2024.08.20 14:31:59.730029 [ 1555097 ] {} <Fatal> ClientBase: 16.1. inlined from contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:124: boost::intrusive_ptr<DB::IColumn const>::operator=(boost::intrusive_ptr<DB::IColumn const>&&)\r\n2024.08.20 14:31:59.730060 [ 1555097 ] {} <Fatal> ClientBase: 16.2. inlined from src/Common/COW.h:136: COW<DB::IColumn>::immutable_ptr<DB::IColumn>::operator=(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&&)\r\n2024.08.20 14:31:59.730086 [ 1555097 ] {} <Fatal> ClientBase: 16. src/Functions/IFunction.cpp:303: DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x0000000008b651ef\r\n2024.08.20 14:31:59.763054 [ 1555097 ] {} <Fatal> ClientBase: 17. src/Functions/IFunction.cpp:0: DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x0000000008b682c5\r\n2024.08.20 14:31:59.926222 [ 1555097 ] {} <Fatal> ClientBase: 18.0. inlined from contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:117: intrusive_ptr\r\n2024.08.20 14:31:59.926275 [ 1555097 ] {} <Fatal> ClientBase: 18.1. inlined from contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:124: boost::intrusive_ptr<DB::IColumn const>::operator=(boost::intrusive_ptr<DB::IColumn const>&&)\r\n2024.08.20 14:31:59.926318 [ 1555097 ] {} <Fatal> ClientBase: 18.2. inlined from src/Common/COW.h:136: COW<DB::IColumn>::immutable_ptr<DB::IColumn>::operator=(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&&)\r\n2024.08.20 14:31:59.926352 [ 1555097 ] {} <Fatal> ClientBase: 18.3. inlined from src/Interpreters/ActionsDAG.cpp:734: DB::executeActionForPartialResult(DB::ActionsDAG::Node const*, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>, unsigned long)\r\n2024.08.20 14:31:59.926384 [ 1555097 ] {} <Fatal> ClientBase: 18. src/Interpreters/ActionsDAG.cpp:904: DB::ActionsDAG::evaluatePartialResult(std::unordered_map<DB::ActionsDAG::Node const*, DB::ColumnWithTypeAndName, std::hash<DB::ActionsDAG::Node const*>, std::equal_to<DB::ActionsDAG::Node const*>, std::allocator<std::pair<DB::ActionsDAG::Node const* const, DB::ColumnWithTypeAndName>>>&, std::vector<DB::ActionsDAG::Node const*, std::allocator<DB::ActionsDAG::Node const*>> const&, unsigned long, bool) @ 0x0000000021b84c70\r\n2024.08.20 14:32:00.137208 [ 1555097 ] {} <Fatal> ClientBase: 19.0. inlined from contrib/llvm-project/libcxx/include/vector:961: std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>::__vdeallocate()\r\n2024.08.20 14:32:00.137258 [ 1555097 ] {} <Fatal> ClientBase: 19.1. inlined from contrib/llvm-project/libcxx/include/vector:1348: std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>::__move_assign(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&, std::integral_constant<bool, true>)\r\n2024.08.20 14:32:00.137309 [ 1555097 ] {} <Fatal> ClientBase: 19.2. inlined from contrib/llvm-project/libcxx/include/vector:1322: std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>::operator=[abi:v15007](std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>&&)\r\n2024.08.20 14:32:00.137340 [ 1555097 ] {} <Fatal> ClientBase: 19. src/Interpreters/ActionsDAG.cpp:814: DB::ActionsDAG::updateHeader(DB::Block const&) const @ 0x0000000021b8298a\r\n2024.08.20 14:32:00.162699 [ 1555097 ] {} <Fatal> ClientBase: 20. src/Processors/Transforms/ExpressionTransform.cpp:10: DB::ExpressionTransform::transformHeader(DB::Block const&, DB::ActionsDAG const&) @ 0x00000000263479d7\r\n2024.08.20 14:32:00.211591 [ 1555097 ] {} <Fatal> ClientBase: 21. src/Processors/QueryPlan/ExpressionStep.cpp:0: DB::ExpressionStep::ExpressionStep(DB::DataStream const&, DB::ActionsDAG) @ 0x00000000267037b3\r\n2024.08.20 14:32:00.427833 [ 1555097 ] {} <Fatal> ClientBase: 22.0. inlined from contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:714: std::__unique_if<DB::ExpressionStep>::__unique_single std::make_unique[abi:v15007]<DB::ExpressionStep, DB::DataStream const&, DB::ActionsDAG>(DB::DataStream const&, DB::ActionsDAG&&)\r\n2024.08.20 14:32:00.427877 [ 1555097 ] {} <Fatal> ClientBase: 22. src/Planner/Planner.cpp:344: DB::(anonymous namespace)::addExpressionStep(DB::QueryPlan&, std::shared_ptr<DB::ActionsAndProjectInputsFlag>&, String const&, std::unordered_set<std::shared_ptr<DB::FutureSet>, std::hash<std::shared_ptr<DB::FutureSet>>, std::equal_to<std::shared_ptr<DB::FutureSet>>, std::allocator<std::shared_ptr<DB::FutureSet>>>&) @ 0x0000000022d45c73\r\n2024.08.20 14:32:00.589497 [ 1555097 ] {} <Fatal> ClientBase: 23.0. inlined from contrib/llvm-project/libcxx/include/string:1499: String::__is_long[abi:v15007]() const\r\n2024.08.20 14:32:00.589534 [ 1555097 ] {} <Fatal> ClientBase: 23.1. inlined from contrib/llvm-project/libcxx/include/string:2333: ~basic_string\r\n2024.08.20 14:32:00.589569 [ 1555097 ] {} <Fatal> ClientBase: 23. src/Planner/Planner.cpp:1603: DB::Planner::buildPlanForQueryNode() @ 0x0000000022d3a65f\r\n2024.08.20 14:32:00.740934 [ 1555097 ] {} <Fatal> ClientBase: 24. src/Planner/Planner.cpp:1254: DB::Planner::buildQueryPlanIfNeeded() @ 0x0000000022d316fb\r\n2024.08.20 14:32:00.808749 [ 1555097 ] {} <Fatal> ClientBase: 25.0. inlined from src/Planner/Planner.h:44: DB::Planner::getQueryPlan()\r\n2024.08.20 14:32:00.808787 [ 1555097 ] {} <Fatal> ClientBase: 25. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:235: DB::InterpreterSelectQueryAnalyzer::getQueryPlan() @ 0x0000000022d2ccb2\r\n2024.08.20 14:32:01.009597 [ 1555097 ] {} <Fatal> ClientBase: 26. src/Interpreters/executeQuery.cpp:1180: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x0000000023318736\r\n2024.08.20 14:32:01.233201 [ 1555097 ] {} <Fatal> ClientBase: 27. src/Interpreters/executeQuery.cpp:1395: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x0000000023312209\r\n2024.08.20 14:32:01.314697 [ 1555097 ] {} <Fatal> ClientBase: 28. src/Client/LocalConnection.cpp:0: DB::LocalConnection::sendQuery(DB::ConnectionTimeouts const&, String const&, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>> const&, String const&, unsigned long, DB::Settings const*, DB::ClientInfo const*, bool, std::function<void (DB::Progress const&)>) @ 0x0000000025ddecdc\r\n2024.08.20 14:32:01.538020 [ 1555097 ] {} <Fatal> ClientBase: 29. src/Client/ClientBase.cpp:1040: DB::ClientBase::processOrdinaryQuery(String const&, std::shared_ptr<DB::IAST>) @ 0x0000000025d12624\r\n2024.08.20 14:32:01.769101 [ 1555097 ] {} <Fatal> ClientBase: 30. src/Client/ClientBase.cpp:0: DB::ClientBase::processParsedSingleQuery(String const&, String const&, std::shared_ptr<DB::IAST>, std::optional<bool>, bool) @ 0x0000000025d0f282\r\n2024.08.20 14:32:02.075739 [ 1555097 ] {} <Fatal> ClientBase: 31. src/Client/ClientBase.cpp:2275: DB::ClientBase::executeMultiQuery(String const&) @ 0x0000000025d25adc\r\n2024.08.20 14:32:02.384642 [ 1555097 ] {} <Fatal> ClientBase: 32. src/Client/ClientBase.cpp:0: DB::ClientBase::processQueryText(String const&) @ 0x0000000025d27942\r\n2024.08.20 14:32:02.603302 [ 1555097 ] {} <Fatal> ClientBase: 33. src/Client/ClientBase.cpp:2645: DB::ClientBase::runInteractive() @ 0x0000000025d2adb2\r\n2024.08.20 14:32:02.679128 [ 1555097 ] {} <Fatal> ClientBase: 34.0. inlined from contrib/llvm-project/libcxx/include/string:1499: String::__is_long[abi:v15007]() const\r\n2024.08.20 14:32:02.679171 [ 1555097 ] {} <Fatal> ClientBase: 34.1. inlined from contrib/llvm-project/libcxx/include/string:2333: ~basic_string\r\n2024.08.20 14:32:02.679209 [ 1555097 ] {} <Fatal> ClientBase: 34. programs/local/LocalServer.cpp:565: DB::LocalServer::main(std::vector<String, std::allocator<String>> const&) @ 0x000000001656f035\r\n2024.08.20 14:32:02.705333 [ 1555097 ] {} <Fatal> ClientBase: 35. base/poco/Util/src/Application.cpp:0: Poco::Util::Application::run() @ 0x00000000276b3417\r\n2024.08.20 14:32:02.860719 [ 1555097 ] {} <Fatal> ClientBase: 36. programs/local/LocalServer.cpp:0: mainEntryClickHouseLocal(int, char**) @ 0x000000001658024a\r\n2024.08.20 14:32:02.866928 [ 1555097 ] {} <Fatal> ClientBase: 37. programs/main.cpp:0: main @ 0x0000000006bb32d6\r\n2024.08.20 14:32:02.866958 [ 1555097 ] {} <Fatal> ClientBase: 38. ? @ 0x000070c58282a1ca\r\n2024.08.20 14:32:02.866978 [ 1555097 ] {} <Fatal> ClientBase: 39. ? @ 0x000070c58282a28b\r\n2024.08.20 14:32:02.924552 [ 1555097 ] {} <Fatal> ClientBase: 40. _start @ 0x0000000006ae202e\r\n2024.08.20 14:32:02.924598 [ 1555097 ] {} <Fatal> ClientBase: This ClickHouse version is not official and should be upgraded to the official build.\r\n2024.08.20 14:32:02.924774 [ 1555097 ] {} <Fatal> ClientBase: Changed settings: allow_introspection_functions = true, storage_file_read_method = 'mmap'\r\nAborted (core dumped)\r\n```\n",
  "hints_text": "@amosbird WDYT? ",
  "created_at": "2024-08-24T12:46:27Z"
}