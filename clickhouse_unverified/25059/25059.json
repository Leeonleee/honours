{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 25059,
  "instance_id": "ClickHouse__ClickHouse-25059",
  "issue_numbers": [
    "24910"
  ],
  "base_commit": "23bf4cf09fb2f526bb1836f63cc004d33370220d",
  "patch": "diff --git a/src/Interpreters/QueryNormalizer.cpp b/src/Interpreters/QueryNormalizer.cpp\nindex 7fef203aea68..aae714198b58 100644\n--- a/src/Interpreters/QueryNormalizer.cpp\n+++ b/src/Interpreters/QueryNormalizer.cpp\n@@ -80,6 +80,9 @@ void QueryNormalizer::visit(ASTIdentifier & node, ASTPtr & ast, Data & data)\n \n     /// If it is an alias, but not a parent alias (for constructs like \"SELECT column + 1 AS column\").\n     auto it_alias = data.aliases.find(node.name());\n+    if (!data.allow_self_aliases && current_alias == node.name())\n+        throw Exception(ErrorCodes::CYCLIC_ALIASES, \"Self referencing of {} to {}. Cyclic alias\", backQuote(current_alias), backQuote(node.name()));\n+\n     if (it_alias != data.aliases.end() && current_alias != node.name())\n     {\n         if (!IdentifierSemantic::canBeAlias(node))\ndiff --git a/src/Interpreters/QueryNormalizer.h b/src/Interpreters/QueryNormalizer.h\nindex 5cb12c255c2e..7fc0f4bdf825 100644\n--- a/src/Interpreters/QueryNormalizer.h\n+++ b/src/Interpreters/QueryNormalizer.h\n@@ -48,18 +48,22 @@ class QueryNormalizer\n         MapOfASTs finished_asts;    /// already processed vertices (and by what they replaced)\n         SetOfASTs current_asts;     /// vertices in the current call stack of this method\n         std::string current_alias;  /// the alias referencing to the ancestor of ast (the deepest ancestor with aliases)\n-        bool ignore_alias; /// normalize query without any aliases\n+        const bool ignore_alias; /// normalize query without any aliases\n \n-        Data(const Aliases & aliases_, const NameSet & source_columns_set_, bool ignore_alias_, ExtractedSettings && settings_)\n+        /// It's Ok to have \"c + 1 AS c\" in queries, but not in table definition\n+        const bool allow_self_aliases; /// for constructs like \"SELECT column + 1 AS column\"\n+\n+        Data(const Aliases & aliases_, const NameSet & source_columns_set_, bool ignore_alias_, ExtractedSettings && settings_, bool allow_self_aliases_)\n             : aliases(aliases_)\n             , source_columns_set(source_columns_set_)\n             , settings(settings_)\n             , level(0)\n             , ignore_alias(ignore_alias_)\n+            , allow_self_aliases(allow_self_aliases_)\n         {}\n     };\n \n-    QueryNormalizer(Data & data)\n+    explicit QueryNormalizer(Data & data)\n         : visitor_data(data)\n     {}\n \ndiff --git a/src/Interpreters/TreeRewriter.cpp b/src/Interpreters/TreeRewriter.cpp\nindex 5b4a869d44bd..8d4d2e19cb64 100644\n--- a/src/Interpreters/TreeRewriter.cpp\n+++ b/src/Interpreters/TreeRewriter.cpp\n@@ -913,7 +913,7 @@ TreeRewriterResultPtr TreeRewriter::analyzeSelect(\n             all_source_columns_set.insert(name);\n     }\n \n-    normalize(query, result.aliases, all_source_columns_set, select_options.ignore_alias, settings);\n+    normalize(query, result.aliases, all_source_columns_set, select_options.ignore_alias, settings, /* allow_self_aliases = */ true);\n \n     /// Remove unneeded columns according to 'required_result_columns'.\n     /// Leave all selected columns in case of DISTINCT; columns that contain arrayJoin function inside.\n@@ -959,7 +959,8 @@ TreeRewriterResultPtr TreeRewriter::analyze(\n     const NamesAndTypesList & source_columns,\n     ConstStoragePtr storage,\n     const StorageMetadataPtr & metadata_snapshot,\n-    bool allow_aggregations) const\n+    bool allow_aggregations,\n+    bool allow_self_aliases) const\n {\n     if (query->as<ASTSelectQuery>())\n         throw Exception(\"Not select analyze for select asts.\", ErrorCodes::LOGICAL_ERROR);\n@@ -968,7 +969,7 @@ TreeRewriterResultPtr TreeRewriter::analyze(\n \n     TreeRewriterResult result(source_columns, storage, metadata_snapshot, false);\n \n-    normalize(query, result.aliases, result.source_columns_set, false, settings);\n+    normalize(query, result.aliases, result.source_columns_set, false, settings, allow_self_aliases);\n \n     /// Executing scalar subqueries. Column defaults could be a scalar subquery.\n     executeScalarSubqueries(query, getContext(), 0, result.scalars, false);\n@@ -994,7 +995,7 @@ TreeRewriterResultPtr TreeRewriter::analyze(\n }\n \n void TreeRewriter::normalize(\n-    ASTPtr & query, Aliases & aliases, const NameSet & source_columns_set, bool ignore_alias, const Settings & settings)\n+    ASTPtr & query, Aliases & aliases, const NameSet & source_columns_set, bool ignore_alias, const Settings & settings, bool allow_self_aliases)\n {\n     CustomizeCountDistinctVisitor::Data data_count_distinct{settings.count_distinct_implementation};\n     CustomizeCountDistinctVisitor(data_count_distinct).visit(query);\n@@ -1054,7 +1055,7 @@ void TreeRewriter::normalize(\n         FunctionNameNormalizer().visit(query.get());\n \n     /// Common subexpression elimination. Rewrite rules.\n-    QueryNormalizer::Data normalizer_data(aliases, source_columns_set, ignore_alias, settings);\n+    QueryNormalizer::Data normalizer_data(aliases, source_columns_set, ignore_alias, settings, allow_self_aliases);\n     QueryNormalizer(normalizer_data).visit(query);\n }\n \ndiff --git a/src/Interpreters/TreeRewriter.h b/src/Interpreters/TreeRewriter.h\nindex 1f535325666d..ff673f2c07a1 100644\n--- a/src/Interpreters/TreeRewriter.h\n+++ b/src/Interpreters/TreeRewriter.h\n@@ -103,7 +103,8 @@ class TreeRewriter : WithConstContext\n         const NamesAndTypesList & source_columns_,\n         ConstStoragePtr storage = {},\n         const StorageMetadataPtr & metadata_snapshot = {},\n-        bool allow_aggregations = false) const;\n+        bool allow_aggregations = false,\n+        bool allow_self_aliases = true) const;\n \n     /// Analyze and rewrite select query\n     TreeRewriterResultPtr analyzeSelect(\n@@ -115,7 +116,7 @@ class TreeRewriter : WithConstContext\n         std::shared_ptr<TableJoin> table_join = {}) const;\n \n private:\n-    static void normalize(ASTPtr & query, Aliases & aliases, const NameSet & source_columns_set, bool ignore_alias, const Settings & settings);\n+    static void normalize(ASTPtr & query, Aliases & aliases, const NameSet & source_columns_set, bool ignore_alias, const Settings & settings, bool allow_self_aliases);\n };\n \n }\ndiff --git a/src/Storages/ColumnsDescription.cpp b/src/Storages/ColumnsDescription.cpp\nindex 43a385bda1de..4a904c96432d 100644\n--- a/src/Storages/ColumnsDescription.cpp\n+++ b/src/Storages/ColumnsDescription.cpp\n@@ -590,7 +590,7 @@ Block validateColumnsDefaultsAndGetSampleBlock(ASTPtr default_expr_list, const N\n \n     try\n     {\n-        auto syntax_analyzer_result = TreeRewriter(context).analyze(default_expr_list, all_columns);\n+        auto syntax_analyzer_result = TreeRewriter(context).analyze(default_expr_list, all_columns, {}, {}, false, /* allow_self_aliases = */ false);\n         const auto actions = ExpressionAnalyzer(default_expr_list, syntax_analyzer_result, context).getActions(true);\n         for (const auto & action : actions->getActions())\n             if (action.node->type == ActionsDAG::ActionType::ARRAY_JOIN)\n",
  "test_patch": "diff --git a/src/Interpreters/tests/gtest_cycle_aliases.cpp b/src/Interpreters/tests/gtest_cycle_aliases.cpp\nindex df40d96a66e9..2bdeac90f8f0 100644\n--- a/src/Interpreters/tests/gtest_cycle_aliases.cpp\n+++ b/src/Interpreters/tests/gtest_cycle_aliases.cpp\n@@ -9,6 +9,21 @@\n \n using namespace DB;\n \n+\n+TEST(QueryNormalizer, SimpleLoopAlias)\n+{\n+    String query = \"a as a\";\n+    ParserExpressionList parser(false);\n+    ASTPtr ast = parseQuery(parser, query, 0, 0);\n+\n+    Aliases aliases;\n+    aliases[\"a\"] = parseQuery(parser, \"a as a\", 0, 0)->children[0];\n+\n+    Settings settings;\n+    QueryNormalizer::Data normalizer_data(aliases, {}, false, settings, false);\n+    EXPECT_THROW(QueryNormalizer(normalizer_data).visit(ast), Exception);\n+}\n+\n TEST(QueryNormalizer, SimpleCycleAlias)\n {\n     String query = \"a as b, b as a\";\n@@ -20,6 +35,6 @@ TEST(QueryNormalizer, SimpleCycleAlias)\n     aliases[\"b\"] = parseQuery(parser, \"a as b\", 0, 0)->children[0];\n \n     Settings settings;\n-    QueryNormalizer::Data normalizer_data(aliases, {}, false, settings);\n+    QueryNormalizer::Data normalizer_data(aliases, {}, false, settings, true);\n     EXPECT_THROW(QueryNormalizer(normalizer_data).visit(ast), Exception);\n }\ndiff --git a/tests/queries/0_stateless/01902_self_aliases_in_columns.reference b/tests/queries/0_stateless/01902_self_aliases_in_columns.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/01902_self_aliases_in_columns.sql b/tests/queries/0_stateless/01902_self_aliases_in_columns.sql\nnew file mode 100644\nindex 000000000000..b03d7c15f622\n--- /dev/null\n+++ b/tests/queries/0_stateless/01902_self_aliases_in_columns.sql\n@@ -0,0 +1,14 @@\n+CREATE TABLE a\n+(\n+    `number` UInt64,\n+    `x` MATERIALIZED x\n+)\n+ENGINE = MergeTree\n+ORDER BY number; --{ serverError 174}\n+\n+CREATE TABLE foo\n+(\n+    i Int32,\n+    j ALIAS j + 1\n+)\n+ENGINE = MergeTree() ORDER BY i; --{ serverError 174}\n",
  "problem_statement": "Self-referencing MATERIALIZED is not forbidden\n```\r\nCREATE TABLE a\r\n(\r\n    `number` UInt64,\r\n    `x` MATERIALIZED x\r\n)\r\nENGINE = MergeTree\r\nORDER BY number;\r\n-- that should fail!\r\n\r\ninsert into a values (1);\r\nReceived exception from server (version 21.7.1):\r\nCode: 47. DB::Exception: Received from localhost:9000. DB::Exception: Missing columns: 'x' while processing query: 'CAST(x, 'UInt8') AS x', required columns: 'x' 'x'. \r\n```\n",
  "hints_text": "Related issue https://github.com/ClickHouse/ClickHouse/issues/24292.",
  "created_at": "2021-06-07T21:01:19Z",
  "modified_files": [
    "src/Interpreters/QueryNormalizer.cpp",
    "src/Interpreters/QueryNormalizer.h",
    "src/Interpreters/TreeRewriter.cpp",
    "src/Interpreters/TreeRewriter.h",
    "src/Storages/ColumnsDescription.cpp"
  ],
  "modified_test_files": [
    "src/Interpreters/tests/gtest_cycle_aliases.cpp",
    "b/tests/queries/0_stateless/01902_self_aliases_in_columns.sql"
  ]
}