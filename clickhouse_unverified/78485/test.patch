diff --git a/tests/queries/0_stateless/01888_bloom_filter_hasAny.sql b/tests/queries/0_stateless/01888_bloom_filter_hasAny.sql
index aef32791fd43..dcd0a1346ee8 100644
--- a/tests/queries/0_stateless/01888_bloom_filter_hasAny.sql
+++ b/tests/queries/0_stateless/01888_bloom_filter_hasAny.sql
@@ -25,7 +25,7 @@ SELECT count() FROM bftest WHERE hasAny(x, []) FORMAT Null;
 SELECT count() FROM bftest WHERE hasAny(x, [1]) FORMAT Null;
 
 -- can't use bloom_filter with `hasAny` on non-constant arguments (just like `has`)
-SELECT count() FROM bftest WHERE hasAny(x, materialize([1,2,3])) FORMAT Null; -- { serverError INDEX_NOT_USED }
+SELECT count() FROM bftest WHERE hasAny(x, [1,2,k]) FORMAT Null; -- { serverError INDEX_NOT_USED }
 
 -- NULLs are not Ok
 SELECT count() FROM bftest WHERE hasAny(x, [NULL,-42]) FORMAT Null; -- { serverError INDEX_NOT_USED }
diff --git a/tests/queries/0_stateless/02013_bloom_filter_hasAll.sql b/tests/queries/0_stateless/02013_bloom_filter_hasAll.sql
index 02ac22796864..1058f8df774e 100644
--- a/tests/queries/0_stateless/02013_bloom_filter_hasAll.sql
+++ b/tests/queries/0_stateless/02013_bloom_filter_hasAll.sql
@@ -26,7 +26,7 @@ SELECT count() FROM bftest WHERE hasAll(x, []) FORMAT Null;
 SELECT count() FROM bftest WHERE hasAll(x, [1]) FORMAT Null;
 
 -- can't use bloom_filter with `hasAll` on non-constant arguments (just like `has`)
-SELECT count() FROM bftest WHERE hasAll(x, materialize([1,2,3])) FORMAT Null; -- { serverError INDEX_NOT_USED }
+SELECT count() FROM bftest WHERE hasAll(x, [1,2,k]) FORMAT Null; -- { serverError INDEX_NOT_USED }
 
 -- NULLs are not Ok
 SELECT count() FROM bftest WHERE hasAll(x, [NULL,-42]) FORMAT Null; -- { serverError INDEX_NOT_USED }
diff --git a/tests/queries/0_stateless/03262_filter_push_down_view.reference b/tests/queries/0_stateless/03262_filter_push_down_view.reference
index 275ff18f73be..5ea796009596 100644
--- a/tests/queries/0_stateless/03262_filter_push_down_view.reference
+++ b/tests/queries/0_stateless/03262_filter_push_down_view.reference
@@ -1,2 +1,2 @@
-Condition: and((materialize(auid) in [1, 1]), (_CAST(toDate(ts)) in (-Inf, 1703980800]))
+Condition: and((auid in [1, 1]), (_CAST(toDate(ts)) in (-Inf, 1703980800]))
 Granules: 1/3
diff --git a/tests/queries/0_stateless/03266_lowcardinality_string_monotonicity.reference b/tests/queries/0_stateless/03266_lowcardinality_string_monotonicity.reference
index 5970daf13c81..4ff3a7d8661b 100644
--- a/tests/queries/0_stateless/03266_lowcardinality_string_monotonicity.reference
+++ b/tests/queries/0_stateless/03266_lowcardinality_string_monotonicity.reference
@@ -1,2 +1,2 @@
 Condition: (CAST(s, \'LowCardinality(String)\') in [\'42\', \'42\'])
-Condition: (CAST(s, \'String\') in [\'42\', \'42\'])
+Condition: (s in [\'42\', \'42\'])
diff --git a/tests/queries/0_stateless/03302_analyzer_distributed_filter_push_down.reference b/tests/queries/0_stateless/03302_analyzer_distributed_filter_push_down.reference
index c726ebc1ad32..aafeb8a46849 100644
--- a/tests/queries/0_stateless/03302_analyzer_distributed_filter_push_down.reference
+++ b/tests/queries/0_stateless/03302_analyzer_distributed_filter_push_down.reference
@@ -517,7 +517,7 @@ Union
         PrimaryKey
           Keys: 
             n
-          Condition: (materialize(n) in [100, 100])
+          Condition: (n in [100, 100])
           Parts: 1/1
           Granules: 1/62
   Expression ((Project names + Projection))
@@ -554,6 +554,6 @@ Union
               PrimaryKey
                 Keys: 
                   n
-                Condition: (materialize(n) in [100, 100])
+                Condition: (n in [100, 100])
                 Parts: 1/1
                 Granules: 1/62
diff --git a/tests/queries/0_stateless/03402_secondary_indexes_analyzer_bugs.reference b/tests/queries/0_stateless/03402_secondary_indexes_analyzer_bugs.reference
new file mode 100644
index 000000000000..8b0fbcc5b084
--- /dev/null
+++ b/tests/queries/0_stateless/03402_secondary_indexes_analyzer_bugs.reference
@@ -0,0 +1,30 @@
+index is applied while using column alias
+Expression ((Projection + Before ORDER BY))
+  Expression
+    ReadFromMergeTree (default.t)
+    Indexes:
+      PrimaryKey
+        Condition: true
+        Parts: 1/1
+        Granules: 8/8
+      Skip
+        Name: ngrams
+        Description: ngrambf_v1 GRANULARITY 1
+        Parts: 0/1
+        Granules: 0/8
+Expression ((Project names + Projection))
+  Expression
+    ReadFromMergeTree (default.t)
+    Indexes:
+      PrimaryKey
+        Condition: true
+        Parts: 1/1
+        Granules: 8/8
+      Skip
+        Name: ngrams
+        Description: ngrambf_v1 GRANULARITY 1
+        Parts: 0/1
+        Granules: 0/8
+index is applied to view
+0
+0
diff --git a/tests/queries/0_stateless/03402_secondary_indexes_analyzer_bugs.sql b/tests/queries/0_stateless/03402_secondary_indexes_analyzer_bugs.sql
new file mode 100644
index 000000000000..c959b56d93c5
--- /dev/null
+++ b/tests/queries/0_stateless/03402_secondary_indexes_analyzer_bugs.sql
@@ -0,0 +1,51 @@
+-- Tags: no-random-merge-tree-settings, no-random-settings, no-parallel-replicas
+
+--- #65607
+select 'index is applied while using column alias';
+
+drop table if exists t;
+CREATE TABLE t
+(
+    `tenant` String,
+    `recordTimestamp` Int64,
+    `responseBody` String,
+    `colAlias` String ALIAS responseBody || 'something else',
+    INDEX ngrams colAlias TYPE ngrambf_v1(3, 2097152, 3, 0) GRANULARITY 1,
+)
+ENGINE = MergeTree
+ORDER BY recordTimestamp
+SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';
+
+INSERT INTO t SELECT toString(number), number, toString(number) from numbers(65536);
+
+explain indexes=1 select tenant,recordTimestamp from t where colAlias like '%abcd%' settings enable_analyzer=0;
+explain indexes=1 select tenant,recordTimestamp from t where colAlias like '%abcd%' settings enable_analyzer=1;
+
+
+--- #69373
+select 'index is applied to view';
+
+drop table if exists tab_v1;
+CREATE TABLE tab_v1
+(
+    content String,
+    INDEX idx_content_bloom content TYPE bloom_filter(0.01)
+)
+ENGINE = MergeTree
+ORDER BY content;
+
+drop table if exists tab_v3;
+CREATE VIEW tab_v3
+AS SELECT * FROM tab_v1;
+
+INSERT INTO tab_v1 (content) VALUES ('aaa bbb'), ('ccc ddd');
+
+SELECT count()
+FROM tab_v3
+WHERE content = 'iii'
+SETTINGS force_data_skipping_indices='idx_content_bloom', enable_analyzer=0;
+
+SELECT count()
+FROM tab_v3
+WHERE content = 'iii'
+SETTINGS force_data_skipping_indices='idx_content_bloom', enable_analyzer=1;
