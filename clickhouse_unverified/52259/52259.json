{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 52259,
  "instance_id": "ClickHouse__ClickHouse-52259",
  "issue_numbers": [
    "50582"
  ],
  "base_commit": "32b765a4ba577acbfdb09a8d400dad8d4ef0f48d",
  "patch": "diff --git a/src/Processors/Transforms/FinishSortingTransform.cpp b/src/Processors/Transforms/FinishSortingTransform.cpp\nindex 05fddc35e15d..63a9c3924a2d 100644\n--- a/src/Processors/Transforms/FinishSortingTransform.cpp\n+++ b/src/Processors/Transforms/FinishSortingTransform.cpp\n@@ -35,9 +35,20 @@ FinishSortingTransform::FinishSortingTransform(\n                         \"Can't finish sorting. SortDescription \"\n                         \"of already sorted stream is not prefix of SortDescription needed to sort\");\n \n+    /// Remove constants from description_sorted_.\n+    SortDescription description_sorted_without_constants;\n+    description_sorted_without_constants.reserve(description_sorted_.size());\n+    size_t num_columns = const_columns_to_remove.size();\n+    for (const auto & column_description : description_sorted_)\n+    {\n+        auto pos = header.getPositionByName(column_description.column_name);\n+\n+        if (pos < num_columns && !const_columns_to_remove[pos])\n+            description_sorted_without_constants.push_back(column_description);\n+    }\n     /// The target description is modified in SortingTransform constructor.\n     /// To avoid doing the same actions with description_sorted just copy it from prefix of target description.\n-    for (const auto & column_sort_desc : description_sorted_)\n+    for (const auto & column_sort_desc : description_sorted_without_constants)\n         description_with_positions.emplace_back(column_sort_desc, header_without_constants.getPositionByName(column_sort_desc.column_name));\n }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02815_fix_not_found_constants_col_in_block.reference b/tests/queries/0_stateless/02815_fix_not_found_constants_col_in_block.reference\nnew file mode 100644\nindex 000000000000..f2d4d23d9e32\n--- /dev/null\n+++ b/tests/queries/0_stateless/02815_fix_not_found_constants_col_in_block.reference\n@@ -0,0 +1,2 @@\n+\\N\t1\t19000\n+\\N\t1\t19000\ndiff --git a/tests/queries/0_stateless/02815_fix_not_found_constants_col_in_block.sql b/tests/queries/0_stateless/02815_fix_not_found_constants_col_in_block.sql\nnew file mode 100644\nindex 000000000000..fa784cf12e30\n--- /dev/null\n+++ b/tests/queries/0_stateless/02815_fix_not_found_constants_col_in_block.sql\n@@ -0,0 +1,6 @@\n+DROP TABLE IF EXISTS t0;\n+CREATE TABLE t0 (vkey UInt32, c0 Float32, primary key(c0)) engine = AggregatingMergeTree;\n+insert into t0 values (19000, 1);\n+select null as c_2_0, ref_2.c0 as c_2_1, ref_2.vkey as c_2_2 from t0 as ref_2 order by c_2_0 asc, c_2_1 asc, c_2_2 asc;\n+select null as c_2_0, ref_2.c0 as c_2_1, ref_2.vkey as c_2_2 from t0 as ref_2 order by c_2_0 asc, c_2_1 asc;\n+DROP TABLE t0;\n",
  "problem_statement": "Unexpected error: Not found column NULL in block\n**Describe what's wrong**\r\n\r\nThe two SELECT statements should output the same results, but one of them throws an exception.\r\n\r\n**Does it reproduce on recent release?**\r\n\r\nIt can be reproduced in the latest version.\r\n\r\n**How to reproduce**\r\n\r\nVersion: 23.5.1 (commit eb5985e5fc0e83c94aa1af134f2718e9fe87979c)\r\n\r\nEasy reproduce in ClickHouse fiddle: https://fiddle.clickhouse.com/11823026-1268-4336-b744-7729f9025eeb\r\n\r\n_Set up database_\r\n\r\n```sql\r\ncreate table t0 (vkey UInt32, c0 Float32, primary key(c0)) engine = AggregatingMergeTree;\r\ninsert into t0 values (19000, 1);\r\n```\r\n\r\n_SELECT statement 1_\r\n\r\n```sql\r\nselect \r\n    null as c_2_0, \r\n    ref_2.c0 as c_2_1, \r\n    ref_2.vkey as c_2_2 \r\n  from \r\n    t0 as ref_2\r\n  order by c_2_0 asc, c_2_1 asc, c_2_2 asc;\r\n```\r\nThen, I remove `c_2_2 asc` in the ORDER BY. The number of outputted rows should not be changed.\r\n\r\n_SELECT statement 2_\r\n\r\n```sql\r\nselect \r\n    null as c_2_0, \r\n    ref_2.c0 as c_2_1, \r\n    ref_2.vkey as c_2_2 \r\n  from \r\n    t0 as ref_2\r\n  order by c_2_0 asc, c_2_1 asc;\r\n```\r\n\r\n**Expected behavior**\r\n\r\nThe two SELECT statements output the same results, or both of them throw the same exceptions.\r\n\r\n**Actual behavior**\r\n\r\nOne outputs a row, and another one throws an exception.\r\n\r\nSELECT statement 1 throws an exception:\r\n```\r\nReceived exception from server (version 23.4.2):\r\nCode: 10. DB::Exception: Received from localhost:9000. DB::Exception: Not found column NULL in block. There are only columns: vkey, c0. (NOT_FOUND_COLUMN_IN_BLOCK)\r\n(query: select \r\n    null as c_2_0, \r\n    ref_2.c0 as c_2_1, \r\n    ref_2.vkey as c_2_2 \r\n  from \r\n    t0 as ref_2\r\n  order by c_2_0 asc, c_2_1 asc, c_2_2 asc;)\r\n```\r\n\r\nSELECT statement 2 outputs:\r\n```\r\n+-------+-------+-------+\r\n| c_2_0 | c_2_1 | c_2_2 |\r\n+-------+-------+-------+\r\n| NULL  |     1 | 19000 |\r\n+-------+-------+-------+\r\n```\r\n\r\n**Additional context**\r\n\r\nThe earliest reproducible version is 22 in fiddle: https://fiddle.clickhouse.com/a7482d31-b9f8-44bc-88e7-30368913c35d\r\n\r\nBefore version 22, both SELECT statements output one row (e.g., 21.12.4.1 https://fiddle.clickhouse.com/9aedf68b-3928-4b23-ae48-e61d21ba75bf)\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2023-07-18T14:11:03Z"
}