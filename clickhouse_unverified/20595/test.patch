diff --git a/docker/test/fasttest/run.sh b/docker/test/fasttest/run.sh
index 1bfc91ecd920..649f9f812e11 100755
--- a/docker/test/fasttest/run.sh
+++ b/docker/test/fasttest/run.sh
@@ -151,6 +151,7 @@ function clone_submodules
         cd "$FASTTEST_SOURCE"
 
         SUBMODULES_TO_UPDATE=(
+            contrib/abseil-cpp
             contrib/antlr4-runtime
             contrib/boost
             contrib/zlib-ng
diff --git a/src/Dictionaries/tests/gtest_dictionary_ssd_cache_dictionary_storage.cpp b/src/Dictionaries/tests/gtest_dictionary_ssd_cache_dictionary_storage.cpp
new file mode 100644
index 000000000000..20529e91bd3d
--- /dev/null
+++ b/src/Dictionaries/tests/gtest_dictionary_ssd_cache_dictionary_storage.cpp
@@ -0,0 +1,242 @@
+#if defined(__linux__) || defined(__FreeBSD__)
+
+#include <iostream>
+
+#include <gtest/gtest.h>
+
+#include <Dictionaries/SSDCacheDictionaryStorage.h>
+
+using namespace DB;
+
+TEST(SSDCacheDictionaryStorage, SSDCacheBlockWithSSDCacheSimpleKey)
+{
+    static constexpr size_t block_data_size = 4096;
+    std::unique_ptr<char[]> block_data(new char[block_data_size]);
+    memset(block_data.get(), 0, block_data_size);
+
+    {
+        memset(block_data.get(), 0, block_data_size);
+
+        SSDCacheBlock block(block_data_size);
+
+        block.reset(block_data.get());
+
+        std::unique_ptr<char[]> data_to_insert(new char[4000]);
+        memset(data_to_insert.get(), 1, 4000);
+
+        SSDCacheSimpleKey key(0, 200, data_to_insert.get());
+        ASSERT_EQ(block.getKeysSize(), 0);
+
+        bool write_result = false;
+        size_t offset_in_block = 0;
+
+        ASSERT_TRUE(block.enoughtPlaceToWriteKey(key));
+        write_result = block.writeKey(key, offset_in_block);
+        ASSERT_TRUE(write_result);
+        ASSERT_EQ(block.getKeysSize(), 1);
+
+        key.key = 1;
+        ASSERT_TRUE(block.enoughtPlaceToWriteKey(key));
+        write_result = block.writeKey(key, offset_in_block);
+        ASSERT_TRUE(write_result);
+        ASSERT_EQ(block.getKeysSize(), 2);
+
+        key.key = 2;
+        ASSERT_TRUE(block.enoughtPlaceToWriteKey(key));
+        write_result = block.writeKey(key, offset_in_block);
+        ASSERT_TRUE(write_result);
+        ASSERT_EQ(block.getKeysSize(), 3);
+
+        PaddedPODArray<UInt64> expected = {0,1,2};
+        PaddedPODArray<UInt64> actual;
+        block.readSimpleKeys(actual);
+        ASSERT_EQ(actual, expected);
+    }
+    {
+        memset(block_data.get(), 0, block_data_size);
+        SSDCacheBlock block(block_data_size);
+        block.reset(block_data.get());
+
+        static constexpr size_t block_header_size = SSDCacheBlock::block_header_size;
+        static constexpr size_t key_metadata_size = sizeof(size_t) * 2;
+
+        std::unique_ptr<char[]> data_to_insert(new char[4080]);
+        memset(data_to_insert.get(), 1, 4000);
+
+        SSDCacheSimpleKey key {0, 4064, data_to_insert.get()};
+
+        ASSERT_TRUE(SSDCacheBlock::canBeWrittenInEmptyBlock(key, block_data_size));
+        key.size = 4065;
+        ASSERT_FALSE(SSDCacheBlock::canBeWrittenInEmptyBlock(key, block_data_size));
+        key.size = 4064;
+
+        size_t offset_in_block;
+        ASSERT_TRUE(block.enoughtPlaceToWriteKey(key));
+        ASSERT_TRUE(block.writeKey(key, offset_in_block));
+        ASSERT_EQ(offset_in_block, block_header_size + key_metadata_size);
+
+        ASSERT_FALSE(block.enoughtPlaceToWriteKey({1, 4065, data_to_insert.get()}));
+        offset_in_block = 0;
+        ASSERT_FALSE(block.writeKey({1, 4065, data_to_insert.get()}, offset_in_block));
+        ASSERT_EQ(offset_in_block, 0);
+
+        PaddedPODArray<UInt64> expected = {0};
+        PaddedPODArray<UInt64> actual;
+        block.readSimpleKeys(actual);
+        ASSERT_EQ(actual, expected);
+    }
+    {
+        memset(block_data.get(), 0, block_data_size);
+        SSDCacheBlock block(block_data_size);
+        block.reset(block_data.get());
+
+        PaddedPODArray<UInt64> expected = {};
+        PaddedPODArray<UInt64> actual;
+        block.readSimpleKeys(actual);
+        ASSERT_EQ(actual, expected);
+    }
+    {
+        memset(block_data.get(), 0, block_data_size);
+        SSDCacheBlock block(block_data_size);
+        block.reset(block_data.get());
+
+        std::unique_ptr<char[]> data_to_insert(new char[4000]);
+        memset(data_to_insert.get(), 1, 4000);
+        size_t offset_in_block;
+        SSDCacheSimpleKey key {0, 200, data_to_insert.get()};
+        block.writeKey({1, 200, data_to_insert.get()}, offset_in_block);
+        ASSERT_EQ(block.getKeysSize(), 1);
+
+        ASSERT_FALSE(block.checkCheckSum());
+        block.writeCheckSum();
+        ASSERT_TRUE(block.checkCheckSum());
+
+        SSDCacheBlock other_block(block_data_size);
+        other_block.reset(block_data.get());
+        bool write_result = other_block.writeKey({2, 200, data_to_insert.get()}, offset_in_block);
+        ASSERT_TRUE(write_result);
+
+        ASSERT_FALSE(block.checkCheckSum());
+        block.writeCheckSum();
+        ASSERT_TRUE(block.checkCheckSum());
+    }
+}
+
+TEST(SSDCacheDictionaryStorage, SSDCacheBlockWithSSDCachComplexKey)
+{
+    static constexpr size_t block_data_size = 4096;
+    std::unique_ptr<char[]> block_data(new char[block_data_size]);
+    memset(block_data.get(), 0, block_data_size);
+
+    {
+        memset(block_data.get(), 0, block_data_size);
+
+        SSDCacheBlock block(block_data_size);
+
+        block.reset(block_data.get());
+
+        std::unique_ptr<char[]> data_to_insert(new char[4000]);
+        memset(data_to_insert.get(), 1, 4000);
+
+        String key = "0";
+
+        SSDCacheComplexKey ssd_cache_key(key, 200, data_to_insert.get());
+        ASSERT_EQ(block.getKeysSize(), 0);
+
+        bool write_result = false;
+        size_t offset_in_block = 0;
+
+        ASSERT_TRUE(block.enoughtPlaceToWriteKey(ssd_cache_key));
+        write_result = block.writeKey(ssd_cache_key, offset_in_block);
+        ASSERT_TRUE(write_result);
+        ASSERT_EQ(block.getKeysSize(), 1);
+
+        ssd_cache_key.key = "1";
+        ASSERT_TRUE(block.enoughtPlaceToWriteKey(ssd_cache_key));
+        write_result = block.writeKey(ssd_cache_key, offset_in_block);
+        ASSERT_TRUE(write_result);
+        ASSERT_EQ(block.getKeysSize(), 2);
+
+        ssd_cache_key.key = "2";
+        ASSERT_TRUE(block.enoughtPlaceToWriteKey(ssd_cache_key));
+        write_result = block.writeKey(ssd_cache_key, offset_in_block);
+        ASSERT_TRUE(write_result);
+        ASSERT_EQ(block.getKeysSize(), 3);
+
+        PaddedPODArray<StringRef> expected = {"0","1","2"};
+        PaddedPODArray<StringRef> actual;
+
+        block.readComplexKeys(actual);
+        ASSERT_EQ(actual, expected);
+    }
+    {
+        memset(block_data.get(), 0, block_data_size);
+        SSDCacheBlock block(block_data_size);
+        block.reset(block_data.get());
+
+        static constexpr size_t block_header_size = SSDCacheBlock::block_header_size;
+        static constexpr size_t key_metadata_size = sizeof(size_t) * 2;
+
+        std::unique_ptr<char[]> data_to_insert(new char[4080]);
+        memset(data_to_insert.get(), 1, 4000);
+
+        SSDCacheComplexKey key {"", 4064, data_to_insert.get()};
+
+        ASSERT_TRUE(SSDCacheBlock::canBeWrittenInEmptyBlock(key, block_data_size));
+        key.size = 4065;
+        ASSERT_FALSE(SSDCacheBlock::canBeWrittenInEmptyBlock(key, block_data_size));
+        key.size = 4064;
+
+        size_t offset_in_block;
+        ASSERT_TRUE(block.enoughtPlaceToWriteKey(key));
+        ASSERT_TRUE(block.writeKey(key, offset_in_block));
+        ASSERT_EQ(offset_in_block, block_header_size + key_metadata_size);
+
+        ASSERT_FALSE(block.enoughtPlaceToWriteKey({1, 4065, data_to_insert.get()}));
+        offset_in_block = 0;
+        ASSERT_FALSE(block.writeKey({1, 4065, data_to_insert.get()}, offset_in_block));
+        ASSERT_EQ(offset_in_block, 0);
+
+        PaddedPODArray<UInt64> expected = {0};
+        PaddedPODArray<UInt64> actual;
+        block.readSimpleKeys(actual);
+        ASSERT_EQ(actual, expected);
+    }
+    {
+        memset(block_data.get(), 0, block_data_size);
+        SSDCacheBlock block(block_data_size);
+        block.reset(block_data.get());
+
+        PaddedPODArray<StringRef> expected = {};
+        PaddedPODArray<StringRef> actual;
+        block.readComplexKeys(actual);
+        ASSERT_EQ(actual, expected);
+    }
+    {
+        memset(block_data.get(), 0, block_data_size);
+        SSDCacheBlock block(block_data_size);
+        block.reset(block_data.get());
+
+        std::unique_ptr<char[]> data_to_insert(new char[4000]);
+        memset(data_to_insert.get(), 1, 4000);
+        size_t offset_in_block;
+        SSDCacheComplexKey key {"0", 200, data_to_insert.get()};
+        block.writeKey({1, 200, data_to_insert.get()}, offset_in_block);
+        ASSERT_EQ(block.getKeysSize(), 1);
+
+        ASSERT_FALSE(block.checkCheckSum());
+        block.writeCheckSum();
+        ASSERT_TRUE(block.checkCheckSum());
+
+        SSDCacheBlock other_block(block_data_size);
+        other_block.reset(block_data.get());
+        bool write_result = other_block.writeKey({2, 200, data_to_insert.get()}, offset_in_block);
+        ASSERT_TRUE(write_result);
+
+        ASSERT_FALSE(block.checkCheckSum());
+        block.writeCheckSum();
+        ASSERT_TRUE(block.checkCheckSum());
+    }
+}
+
+#endif
diff --git a/tests/queries/0_stateless/00950_dict_get.reference b/tests/queries/0_stateless/00950_dict_get.reference
index 3010a2989c09..c1b502bf773b 100644
--- a/tests/queries/0_stateless/00950_dict_get.reference
+++ b/tests/queries/0_stateless/00950_dict_get.reference
@@ -1,48 +1,48 @@
-dictGet	flat_ints	1	1	1	1	1	1	1	1	1
-dictGetOrDefault	flat_ints	1	1	1	1	1	1	1	1	1
-dictGetOrDefault	flat_ints	0	42	42	42	42	42	42	42	42
-dictGet	hashed_ints	1	1	1	1	1	1	1	1	1
-dictGetOrDefault	hashed_ints	1	1	1	1	1	1	1	1	1
-dictGetOrDefault	hashed_ints	0	42	42	42	42	42	42	42	42
-dictGet	hashed_sparse_ints	1	1	1	1	1	1	1	1	1
-dictGetOrDefault	hashed_sparse_ints	1	1	1	1	1	1	1	1	1
-dictGetOrDefault	hashed_sparse_ints	0	42	42	42	42	42	42	42	42
-dictGet	cache_ints	1	1	1	1	1	1	1	1	1
-dictGetOrDefault	cache_ints	1	1	1	1	1	1	1	1	1
-dictGetOrDefault	cache_ints	0	42	42	42	42	42	42	42	42
-dictGet	complex_hashed_ints	(1)	1	1	1	1	1	1	1	1
-dictGetOrDefault	complex_hashed_ints	(1)	1	1	1	1	1	1	1	1
-dictGetOrDefault	complex_hashed_ints	(0)	42	42	42	42	42	42	42	42
-dictGet	complex_cache_ints	(1)	1	1	1	1	1	1	1	1
-dictGetOrDefault	complex_cache_ints	(1)	1	1	1	1	1	1	1	1
-dictGetOrDefault	complex_cache_ints	(0)	42	42	42	42	42	42	42	42
-dictGet	flat_strings	1	1
-dictGetOrDefault	flat_strings	1	1
-dictGetOrDefault	flat_strings	0	*
-dictGet	hashed_strings	1	1
-dictGetOrDefault	hashed_strings	1	1
-dictGetOrDefault	hashed_strings	0	*
-dictGet	cache_strings	1	1
-dictGetOrDefault	cache_strings	1	1
-dictGetOrDefault	cache_strings	0	*
-dictGet	complex_hashed_strings	1	1
-dictGetOrDefault	complex_hashed_strings	1	1
-dictGetOrDefault	complex_hashed_strings	0	*
-dictGet	complex_cache_strings	1	1
-dictGetOrDefault	complex_cache_strings	1	1
-dictGetOrDefault	complex_cache_strings	0	*
-dictGet	flat_decimals	1	1.0000	1.000000	1.0
-dictGetOrDefault	flat_decimals	1	1.0000	1.000000	1.0
-dictGetOrDefault	flat_decimals	0	42.0000	42.000000	42.0
-dictGet	hashed_decimals	1	1.0000	1.000000	1.0
-dictGetOrDefault	hashed_decimals	1	1.0000	1.000000	1.0
-dictGetOrDefault	hashed_decimals	0	42.0000	42.000000	42.0
-dictGet	cache_decimals	1	1.0000	1.000000	1.0
-dictGetOrDefault	cache_decimals	1	1.0000	1.000000	1.0
-dictGetOrDefault	cache_decimals	0	42.0000	42.000000	42.0
-dictGet	complex_hashed_decimals	(1)	1.0000	1.000000	1.0
-dictGetOrDefault	complex_hashed_decimals	(1)	1.0000	1.000000	1.0
-dictGetOrDefault	complex_hashed_decimals	(0)	42.0000	42.000000	42.0
-dictGet	complex_cache_decimals	(1)	1.0000	1.000000	1.0
-dictGetOrDefault	complex_cache_decimals	(1)	1.0000	1.000000	1.0
-dictGetOrDefault	complex_cache_decimals	(0)	42.0000	42.000000	42.0
+dictGet	flat_ints	1	1	1	1	1	1	1	1	1	(1,1,1)
+dictGetOrDefault	flat_ints	1	1	1	1	1	1	1	1	1	(1,1,1)
+dictGetOrDefault	flat_ints	0	42	42	42	42	42	42	42	42	(42,42,42)
+dictGet	hashed_ints	1	1	1	1	1	1	1	1	1	(1,1,1)
+dictGetOrDefault	hashed_ints	1	1	1	1	1	1	1	1	1	(1,1,1)
+dictGetOrDefault	hashed_ints	0	42	42	42	42	42	42	42	(42,42,42)
+dictGet	hashed_sparse_ints	1	1	1	1	1	1	1	1	1	(1,1,1)
+dictGetOrDefault	hashed_sparse_ints	1	1	1	1	1	1	1	1	1	(1,1,1)
+dictGetOrDefault	hashed_sparse_ints	0	42	42	42	42	42	42	42	42	(42,42,42)
+dictGet	cache_ints	1	1	1	1	1	1	1	1	1	(1,1,1)
+dictGetOrDefault	cache_ints	1	1	1	1	1	1	1	1	1	(1,1,1)
+dictGetOrDefault	cache_ints	0	42	42	42	42	42	42	42	42	(42,42,42)
+dictGet	complex_hashed_ints	(1)	1	1	1	1	1	1	1	1	(1,1,1)
+dictGetOrDefault	complex_hashed_ints	(1)	1	1	1	1	1	1	1	1	(1,1,1)
+dictGetOrDefault	complex_hashed_ints	(0)	42	42	42	42	42	42	42	42	(42,42,42)
+dictGet	complex_cache_ints	(1)	1	1	1	1	1	1	1	1	(1,1,1)
+dictGetOrDefault	complex_cache_ints	(1)	1	1	1	1	1	1	1	1	(1,1,1)
+dictGetOrDefault	complex_cache_ints	(0)	42	42	42	42	42	42	42	42	(42,42,42)
+dictGet	flat_strings	1	1	1
+dictGetOrDefault	flat_strings	1	1	1
+dictGetOrDefault	flat_strings	0	*	*
+dictGet	hashed_strings	1	1	1
+dictGetOrDefault	hashed_strings	1	1	1
+dictGetOrDefault	hashed_strings	0	*	*
+dictGet	cache_strings	1	1	1
+dictGetOrDefault	cache_strings	1	1	1
+dictGetOrDefault	cache_strings	0	*	*
+dictGet	complex_hashed_strings	1	1	1
+dictGetOrDefault	complex_hashed_strings	1	1	1
+dictGetOrDefault	complex_hashed_strings	0	*	*
+dictGet	complex_cache_strings	1	1	1
+dictGetOrDefault	complex_cache_strings	1	1	1
+dictGetOrDefault	complex_cache_strings	0	*	*
+dictGet	flat_decimals	1	1.0000	1.000000	1.0	(1.0000,1.000000,1.0)
+dictGetOrDefault	flat_decimals	1	1.0000	1.000000	1.0	(1.0000,1.000000,1.0)
+dictGetOrDefault	flat_decimals	0	42.0000	42.000000	42.0	(42.0000,42.000000,42.0)
+dictGet	hashed_decimals	1	1.0000	1.000000	1.0	(1.0000,1.000000,1.0)
+dictGetOrDefault	hashed_decimals	1	1.0000	1.000000	1.0	(1.0000,1.000000,1.0)
+dictGetOrDefault	hashed_decimals	0	42.0000	42.000000	42.0	(42.0000,42.000000,42.0)
+dictGet	cache_decimals	1	1.0000	1.000000	1.0	(1.0000,1.000000,1.0)
+dictGetOrDefault	cache_decimals	1	1.0000	1.000000	1.0	(1.0000,1.000000,1.0)
+dictGetOrDefault	cache_decimals	0	42.0000	42.000000	42.0	(42.0000,42.000000,42.0)
+dictGet	complex_hashed_decimals	(1)	1.0000	1.000000	1.0	(1.0000,1.000000,1.0)
+dictGetOrDefault	complex_hashed_decimals	(1)	1.0000	1.000000	1.0	(1.0000,1.000000,1.0)
+dictGetOrDefault	complex_hashed_decimals	(0)	42.0000	42.000000	42.0	(42.0000,42.000000,42.0)
+dictGet	complex_cache_decimals	(1)	1.0000	1.000000	1.0	(1.0000,1.000000,1.0)
+dictGetOrDefault	complex_cache_decimals	(1)	1.0000	1.000000	1.0	(1.0000,1.000000,1.0)
+dictGetOrDefault	complex_cache_decimals	(0)	42.0000	42.000000	42.0	(42.0000,42.000000,42.0)
diff --git a/tests/queries/0_stateless/00950_dict_get.sql b/tests/queries/0_stateless/00950_dict_get.sql
index 93bb8f9b813e..e49e05fbd27a 100644
--- a/tests/queries/0_stateless/00950_dict_get.sql
+++ b/tests/queries/0_stateless/00950_dict_get.sql
@@ -20,7 +20,8 @@ select 'dictGet', 'flat_ints' as dict_name, toUInt64(1) as k,
     dictGet(dict_name, 'u8', k),
     dictGet(dict_name, 'u16', k),
     dictGet(dict_name, 'u32', k),
-    dictGet(dict_name, 'u64', k);
+    dictGet(dict_name, 'u64', k),
+    dictGet(dict_name, ('i8', 'i16', 'i32'), k);
 select 'dictGetOrDefault', 'flat_ints' as dict_name, toUInt64(1) as k,
     dictGetOrDefault(dict_name, 'i8', k, toInt8(42)),
     dictGetOrDefault(dict_name, 'i16', k, toInt16(42)),
@@ -29,7 +30,8 @@ select 'dictGetOrDefault', 'flat_ints' as dict_name, toUInt64(1) as k,
     dictGetOrDefault(dict_name, 'u8', k, toUInt8(42)),
     dictGetOrDefault(dict_name, 'u16', k, toUInt16(42)),
     dictGetOrDefault(dict_name, 'u32', k, toUInt32(42)),
-    dictGetOrDefault(dict_name, 'u64', k, toUInt64(42));
+    dictGetOrDefault(dict_name, 'u64', k, toUInt64(42)),
+    dictGetOrDefault(dict_name, ('i8', 'i16', 'i32'), k, (toInt8(42), toInt16(42), toInt32(42)));
 select 'dictGetOrDefault', 'flat_ints' as dict_name, toUInt64(0) as k,
     dictGetOrDefault(dict_name, 'i8', k, toInt8(42)),
     dictGetOrDefault(dict_name, 'i16', k, toInt16(42)),
@@ -38,7 +40,8 @@ select 'dictGetOrDefault', 'flat_ints' as dict_name, toUInt64(0) as k,
     dictGetOrDefault(dict_name, 'u8', k, toUInt8(42)),
     dictGetOrDefault(dict_name, 'u16', k, toUInt16(42)),
     dictGetOrDefault(dict_name, 'u32', k, toUInt32(42)),
-    dictGetOrDefault(dict_name, 'u64', k, toUInt64(42));
+    dictGetOrDefault(dict_name, 'u64', k, toUInt64(42)),
+    dictGetOrDefault(dict_name, ('i8', 'i16', 'i32'), k, (toInt8(42), toInt16(42), toInt32(42)));
 
 select 'dictGet', 'hashed_ints' as dict_name, toUInt64(1) as k,
     dictGet(dict_name, 'i8', k),
@@ -48,7 +51,8 @@ select 'dictGet', 'hashed_ints' as dict_name, toUInt64(1) as k,
     dictGet(dict_name, 'u8', k),
     dictGet(dict_name, 'u16', k),
     dictGet(dict_name, 'u32', k),
-    dictGet(dict_name, 'u64', k);
+    dictGet(dict_name, 'u64', k),
+    dictGet(dict_name, ('i8', 'i16', 'i32'), k);
 select 'dictGetOrDefault', 'hashed_ints' as dict_name, toUInt64(1) as k,
     dictGetOrDefault(dict_name, 'i8', k, toInt8(42)),
     dictGetOrDefault(dict_name, 'i16', k, toInt16(42)),
@@ -57,7 +61,8 @@ select 'dictGetOrDefault', 'hashed_ints' as dict_name, toUInt64(1) as k,
     dictGetOrDefault(dict_name, 'u8', k, toUInt8(42)),
     dictGetOrDefault(dict_name, 'u16', k, toUInt16(42)),
     dictGetOrDefault(dict_name, 'u32', k, toUInt32(42)),
-    dictGetOrDefault(dict_name, 'u64', k, toUInt64(42));
+    dictGetOrDefault(dict_name, 'u64', k, toUInt64(42)),
+    dictGetOrDefault(dict_name, ('i8', 'i16', 'i32'), k, (toInt8(42), toInt16(42), toInt32(42)));
 select 'dictGetOrDefault', 'hashed_ints' as dict_name, toUInt64(0) as k,
     dictGetOrDefault(dict_name, 'i8', k, toInt8(42)),
     dictGetOrDefault(dict_name, 'i16', k, toInt16(42)),
@@ -66,7 +71,7 @@ select 'dictGetOrDefault', 'hashed_ints' as dict_name, toUInt64(0) as k,
     dictGetOrDefault(dict_name, 'u8', k, toUInt8(42)),
     dictGetOrDefault(dict_name, 'u16', k, toUInt16(42)),
     dictGetOrDefault(dict_name, 'u32', k, toUInt32(42)),
-    dictGetOrDefault(dict_name, 'u64', k, toUInt64(42));
+    dictGetOrDefault(dict_name, ('i8', 'i16', 'i32'), k, (toInt8(42), toInt16(42), toInt32(42)));
 
 select 'dictGet', 'hashed_sparse_ints' as dict_name, toUInt64(1) as k,
     dictGet(dict_name, 'i8', k),
@@ -76,7 +81,8 @@ select 'dictGet', 'hashed_sparse_ints' as dict_name, toUInt64(1) as k,
     dictGet(dict_name, 'u8', k),
     dictGet(dict_name, 'u16', k),
     dictGet(dict_name, 'u32', k),
-    dictGet(dict_name, 'u64', k);
+    dictGet(dict_name, 'u64', k),
+    dictGet(dict_name, ('i8', 'i16', 'i32'), k);
 select 'dictGetOrDefault', 'hashed_sparse_ints' as dict_name, toUInt64(1) as k,
     dictGetOrDefault(dict_name, 'i8', k, toInt8(42)),
     dictGetOrDefault(dict_name, 'i16', k, toInt16(42)),
@@ -85,7 +91,8 @@ select 'dictGetOrDefault', 'hashed_sparse_ints' as dict_name, toUInt64(1) as k,
     dictGetOrDefault(dict_name, 'u8', k, toUInt8(42)),
     dictGetOrDefault(dict_name, 'u16', k, toUInt16(42)),
     dictGetOrDefault(dict_name, 'u32', k, toUInt32(42)),
-    dictGetOrDefault(dict_name, 'u64', k, toUInt64(42));
+    dictGetOrDefault(dict_name, 'u64', k, toUInt64(42)),
+    dictGetOrDefault(dict_name, ('i8', 'i16', 'i32'), k, (toInt8(42), toInt16(42), toInt32(42)));
 select 'dictGetOrDefault', 'hashed_sparse_ints' as dict_name, toUInt64(0) as k,
     dictGetOrDefault(dict_name, 'i8', k, toInt8(42)),
     dictGetOrDefault(dict_name, 'i16', k, toInt16(42)),
@@ -94,7 +101,8 @@ select 'dictGetOrDefault', 'hashed_sparse_ints' as dict_name, toUInt64(0) as k,
     dictGetOrDefault(dict_name, 'u8', k, toUInt8(42)),
     dictGetOrDefault(dict_name, 'u16', k, toUInt16(42)),
     dictGetOrDefault(dict_name, 'u32', k, toUInt32(42)),
-    dictGetOrDefault(dict_name, 'u64', k, toUInt64(42));
+    dictGetOrDefault(dict_name, 'u64', k, toUInt64(42)),
+    dictGetOrDefault(dict_name, ('i8', 'i16', 'i32'), k, (toInt8(42), toInt16(42), toInt32(42)));
 
 select 'dictGet', 'cache_ints' as dict_name, toUInt64(1) as k,
     dictGet(dict_name, 'i8', k),
@@ -104,7 +112,8 @@ select 'dictGet', 'cache_ints' as dict_name, toUInt64(1) as k,
     dictGet(dict_name, 'u8', k),
     dictGet(dict_name, 'u16', k),
     dictGet(dict_name, 'u32', k),
-    dictGet(dict_name, 'u64', k);
+    dictGet(dict_name, 'u64', k),
+    dictGet(dict_name, ('i8', 'i16', 'i32'), k);
 select 'dictGetOrDefault', 'cache_ints' as dict_name, toUInt64(1) as k,
     dictGetOrDefault(dict_name, 'i8', k, toInt8(42)),
     dictGetOrDefault(dict_name, 'i16', k, toInt16(42)),
@@ -113,7 +122,8 @@ select 'dictGetOrDefault', 'cache_ints' as dict_name, toUInt64(1) as k,
     dictGetOrDefault(dict_name, 'u8', k, toUInt8(42)),
     dictGetOrDefault(dict_name, 'u16', k, toUInt16(42)),
     dictGetOrDefault(dict_name, 'u32', k, toUInt32(42)),
-    dictGetOrDefault(dict_name, 'u64', k, toUInt64(42));
+    dictGetOrDefault(dict_name, 'u64', k, toUInt64(42)),
+    dictGetOrDefault(dict_name, ('i8', 'i16', 'i32'), k, (toInt8(42), toInt16(42), toInt32(42)));
 select 'dictGetOrDefault', 'cache_ints' as dict_name, toUInt64(0) as k,
     dictGetOrDefault(dict_name, 'i8', k, toInt8(42)),
     dictGetOrDefault(dict_name, 'i16', k, toInt16(42)),
@@ -122,7 +132,8 @@ select 'dictGetOrDefault', 'cache_ints' as dict_name, toUInt64(0) as k,
     dictGetOrDefault(dict_name, 'u8', k, toUInt8(42)),
     dictGetOrDefault(dict_name, 'u16', k, toUInt16(42)),
     dictGetOrDefault(dict_name, 'u32', k, toUInt32(42)),
-    dictGetOrDefault(dict_name, 'u64', k, toUInt64(42));
+    dictGetOrDefault(dict_name, 'u64', k, toUInt64(42)),
+    dictGetOrDefault(dict_name, ('i8', 'i16', 'i32'), k, (toInt8(42), toInt16(42), toInt32(42)));
 
 select 'dictGet', 'complex_hashed_ints' as dict_name, tuple(toUInt64(1)) as k,
     dictGet(dict_name, 'i8', k),
@@ -132,7 +143,8 @@ select 'dictGet', 'complex_hashed_ints' as dict_name, tuple(toUInt64(1)) as k,
     dictGet(dict_name, 'u8', k),
     dictGet(dict_name, 'u16', k),
     dictGet(dict_name, 'u32', k),
-    dictGet(dict_name, 'u64', k);
+    dictGet(dict_name, 'u64', k),
+    dictGet(dict_name, ('i8', 'i16', 'i32'), k);
 select 'dictGetOrDefault', 'complex_hashed_ints' as dict_name, tuple(toUInt64(1)) as k,
     dictGetOrDefault(dict_name, 'i8', k, toInt8(42)),
     dictGetOrDefault(dict_name, 'i16', k, toInt16(42)),
@@ -141,7 +153,8 @@ select 'dictGetOrDefault', 'complex_hashed_ints' as dict_name, tuple(toUInt64(1)
     dictGetOrDefault(dict_name, 'u8', k, toUInt8(42)),
     dictGetOrDefault(dict_name, 'u16', k, toUInt16(42)),
     dictGetOrDefault(dict_name, 'u32', k, toUInt32(42)),
-    dictGetOrDefault(dict_name, 'u64', k, toUInt64(42));
+    dictGetOrDefault(dict_name, 'u64', k, toUInt64(42)),
+    dictGetOrDefault(dict_name, ('i8', 'i16', 'i32'), k, (toInt8(42), toInt16(42), toInt32(42)));
 select 'dictGetOrDefault', 'complex_hashed_ints' as dict_name, tuple(toUInt64(0)) as k,
     dictGetOrDefault(dict_name, 'i8', k, toInt8(42)),
     dictGetOrDefault(dict_name, 'i16', k, toInt16(42)),
@@ -150,7 +163,8 @@ select 'dictGetOrDefault', 'complex_hashed_ints' as dict_name, tuple(toUInt64(0)
     dictGetOrDefault(dict_name, 'u8', k, toUInt8(42)),
     dictGetOrDefault(dict_name, 'u16', k, toUInt16(42)),
     dictGetOrDefault(dict_name, 'u32', k, toUInt32(42)),
-    dictGetOrDefault(dict_name, 'u64', k, toUInt64(42));
+    dictGetOrDefault(dict_name, 'u64', k, toUInt64(42)),
+    dictGetOrDefault(dict_name, ('i8', 'i16', 'i32'), k, (toInt8(42), toInt16(42), toInt32(42)));
 
 select 'dictGet', 'complex_cache_ints' as dict_name, tuple(toUInt64(1)) as k,
     dictGet(dict_name, 'i8', k),
@@ -160,7 +174,8 @@ select 'dictGet', 'complex_cache_ints' as dict_name, tuple(toUInt64(1)) as k,
     dictGet(dict_name, 'u8', k),
     dictGet(dict_name, 'u16', k),
     dictGet(dict_name, 'u32', k),
-    dictGet(dict_name, 'u64', k);
+    dictGet(dict_name, 'u64', k),
+    dictGet(dict_name, ('i8', 'i16', 'i32'), k);;
 select 'dictGetOrDefault', 'complex_cache_ints' as dict_name, tuple(toUInt64(1)) as k,
     dictGetOrDefault(dict_name, 'i8', k, toInt8(42)),
     dictGetOrDefault(dict_name, 'i16', k, toInt16(42)),
@@ -169,7 +184,8 @@ select 'dictGetOrDefault', 'complex_cache_ints' as dict_name, tuple(toUInt64(1))
     dictGetOrDefault(dict_name, 'u8', k, toUInt8(42)),
     dictGetOrDefault(dict_name, 'u16', k, toUInt16(42)),
     dictGetOrDefault(dict_name, 'u32', k, toUInt32(42)),
-    dictGetOrDefault(dict_name, 'u64', k, toUInt64(42));
+    dictGetOrDefault(dict_name, 'u64', k, toUInt64(42)),
+    dictGetOrDefault(dict_name, ('i8', 'i16', 'i32'), k, (toInt8(42), toInt16(42), toInt32(42)));
 select 'dictGetOrDefault', 'complex_cache_ints' as dict_name, tuple(toUInt64(0)) as k,
     dictGetOrDefault(dict_name, 'i8', k, toInt8(42)),
     dictGetOrDefault(dict_name, 'i16', k, toInt16(42)),
@@ -178,96 +194,112 @@ select 'dictGetOrDefault', 'complex_cache_ints' as dict_name, tuple(toUInt64(0))
     dictGetOrDefault(dict_name, 'u8', k, toUInt8(42)),
     dictGetOrDefault(dict_name, 'u16', k, toUInt16(42)),
     dictGetOrDefault(dict_name, 'u32', k, toUInt32(42)),
-    dictGetOrDefault(dict_name, 'u64', k, toUInt64(42));
+    dictGetOrDefault(dict_name, 'u64', k, toUInt64(42)),
+    dictGetOrDefault(dict_name, ('i8', 'i16', 'i32'), k, (toInt8(42), toInt16(42), toInt32(42)));
 
 --
 
-select 'dictGet', 'flat_strings' as dict_name, toUInt64(1) as k, dictGet(dict_name, 'str', k);
-select 'dictGetOrDefault', 'flat_strings' as dict_name, toUInt64(1) as k, dictGetOrDefault(dict_name, 'str', k, '*');
-select 'dictGetOrDefault', 'flat_strings' as dict_name, toUInt64(0) as k, dictGetOrDefault(dict_name, 'str', k, '*');
+select 'dictGet', 'flat_strings' as dict_name, toUInt64(1) as k, dictGet(dict_name, 'str', k), dictGet(dict_name, ('str'), k);
+select 'dictGetOrDefault', 'flat_strings' as dict_name, toUInt64(1) as k, dictGetOrDefault(dict_name, 'str', k, '*'), dictGetOrDefault(dict_name, ('str'), k, ('*'));
+select 'dictGetOrDefault', 'flat_strings' as dict_name, toUInt64(0) as k, dictGetOrDefault(dict_name, 'str', k, '*'), dictGetOrDefault(dict_name, ('str'), k, ('*'));
 
-select 'dictGet', 'hashed_strings' as dict_name, toUInt64(1) as k, dictGet(dict_name, 'str', k);
-select 'dictGetOrDefault', 'hashed_strings' as dict_name, toUInt64(1) as k, dictGetOrDefault(dict_name, 'str', k, '*');
-select 'dictGetOrDefault', 'hashed_strings' as dict_name, toUInt64(0) as k, dictGetOrDefault(dict_name, 'str', k, '*');
+select 'dictGet', 'hashed_strings' as dict_name, toUInt64(1) as k, dictGet(dict_name, 'str', k), dictGet(dict_name, ('str'), k);
+select 'dictGetOrDefault', 'hashed_strings' as dict_name, toUInt64(1) as k, dictGetOrDefault(dict_name, 'str', k, '*'), dictGetOrDefault(dict_name, ('str'), k, ('*'));
+select 'dictGetOrDefault', 'hashed_strings' as dict_name, toUInt64(0) as k, dictGetOrDefault(dict_name, 'str', k, '*'), dictGetOrDefault(dict_name, ('str'), k, ('*'));
 
-select 'dictGet', 'cache_strings' as dict_name, toUInt64(1) as k, dictGet(dict_name, 'str', k);
-select 'dictGetOrDefault', 'cache_strings' as dict_name, toUInt64(1) as k, dictGetOrDefault(dict_name, 'str', k, '*');
-select 'dictGetOrDefault', 'cache_strings' as dict_name, toUInt64(0) as k, dictGetOrDefault(dict_name, 'str', k, '*');
+select 'dictGet', 'cache_strings' as dict_name, toUInt64(1) as k, dictGet(dict_name, 'str', k), dictGet(dict_name, ('str'), k);
+select 'dictGetOrDefault', 'cache_strings' as dict_name, toUInt64(1) as k, dictGetOrDefault(dict_name, 'str', k, '*'), dictGetOrDefault(dict_name, ('str'), k, ('*'));
+select 'dictGetOrDefault', 'cache_strings' as dict_name, toUInt64(0) as k, dictGetOrDefault(dict_name, 'str', k, '*'), dictGetOrDefault(dict_name, ('str'), k, ('*'));
 
-select 'dictGet', 'complex_hashed_strings' as dict_name, toUInt64(1) as k, dictGet(dict_name, 'str', tuple(k));
-select 'dictGetOrDefault', 'complex_hashed_strings' as dict_name, toUInt64(1) as k, dictGetOrDefault(dict_name, 'str', tuple(k), '*');
-select 'dictGetOrDefault', 'complex_hashed_strings' as dict_name, toUInt64(0) as k, dictGetOrDefault(dict_name, 'str', tuple(k), '*');
+select 'dictGet', 'complex_hashed_strings' as dict_name, toUInt64(1) as k, dictGet(dict_name, 'str', tuple(k)), dictGet(dict_name, ('str'), tuple(k));
+select 'dictGetOrDefault', 'complex_hashed_strings' as dict_name, toUInt64(1) as k, dictGetOrDefault(dict_name, 'str', tuple(k), '*'), dictGetOrDefault(dict_name, ('str'), tuple(k), ('*'));
+select 'dictGetOrDefault', 'complex_hashed_strings' as dict_name, toUInt64(0) as k, dictGetOrDefault(dict_name, 'str', tuple(k), '*'), dictGetOrDefault(dict_name, ('str'), tuple(k), ('*'));
 
-select 'dictGet', 'complex_cache_strings' as dict_name, toUInt64(1) as k, dictGet(dict_name, 'str', tuple(k));
-select 'dictGetOrDefault', 'complex_cache_strings' as dict_name, toUInt64(1) as k, dictGetOrDefault(dict_name, 'str', tuple(k), '*');
-select 'dictGetOrDefault', 'complex_cache_strings' as dict_name, toUInt64(0) as k, dictGetOrDefault(dict_name, 'str', tuple(k), '*');
+select 'dictGet', 'complex_cache_strings' as dict_name, toUInt64(1) as k, dictGet(dict_name, 'str', tuple(k)), dictGet(dict_name, ('str'), tuple(k));
+select 'dictGetOrDefault', 'complex_cache_strings' as dict_name, toUInt64(1) as k, dictGetOrDefault(dict_name, 'str', tuple(k), '*'), dictGetOrDefault(dict_name, ('str'), tuple(k), ('*'));
+select 'dictGetOrDefault', 'complex_cache_strings' as dict_name, toUInt64(0) as k, dictGetOrDefault(dict_name, 'str', tuple(k), '*'), dictGetOrDefault(dict_name, ('str'), tuple(k), ('*'));
 
 --
 
 select 'dictGet', 'flat_decimals' as dict_name, toUInt64(1) as k,
     dictGet(dict_name, 'd32', k),
     dictGet(dict_name, 'd64', k),
-    dictGet(dict_name, 'd128', k);
+    dictGet(dict_name, 'd128', k),
+    dictGet(dict_name, ('d32', 'd64', 'd128'), k);
 select 'dictGetOrDefault', 'flat_decimals' as dict_name, toUInt64(1) as k,
     dictGetOrDefault(dict_name, 'd32', k, toDecimal32(42, 4)),
     dictGetOrDefault(dict_name, 'd64', k, toDecimal64(42, 6)),
-    dictGetOrDefault(dict_name, 'd128', k, toDecimal128(42, 1));
+    dictGetOrDefault(dict_name, 'd128', k, toDecimal128(42, 1)),
+    dictGetOrDefault(dict_name, ('d32', 'd64', 'd128'), k, (toDecimal32(42, 4), toDecimal64(42, 6), toDecimal128(42, 1)));
 select 'dictGetOrDefault', 'flat_decimals' as dict_name, toUInt64(0) as k,
     dictGetOrDefault(dict_name, 'd32', k, toDecimal32(42, 4)),
     dictGetOrDefault(dict_name, 'd64', k, toDecimal64(42, 6)),
-    dictGetOrDefault(dict_name, 'd128', k, toDecimal128(42, 1));
+    dictGetOrDefault(dict_name, 'd128', k, toDecimal128(42, 1)),
+    dictGetOrDefault(dict_name, ('d32', 'd64', 'd128'), k, (toDecimal32(42, 4), toDecimal64(42, 6), toDecimal128(42, 1)));
 
 select 'dictGet', 'hashed_decimals' as dict_name, toUInt64(1) as k,
     dictGet(dict_name, 'd32', k),
     dictGet(dict_name, 'd64', k),
-    dictGet(dict_name, 'd128', k);
+    dictGet(dict_name, 'd128', k),
+    dictGet(dict_name, ('d32', 'd64', 'd128'), k);
 select 'dictGetOrDefault', 'hashed_decimals' as dict_name, toUInt64(1) as k,
     dictGetOrDefault(dict_name, 'd32', k, toDecimal32(42, 4)),
     dictGetOrDefault(dict_name, 'd64', k, toDecimal64(42, 6)),
-    dictGetOrDefault(dict_name, 'd128', k, toDecimal128(42, 1));
+    dictGetOrDefault(dict_name, 'd128', k, toDecimal128(42, 1)),
+    dictGetOrDefault(dict_name, ('d32', 'd64', 'd128'), k, (toDecimal32(42, 4), toDecimal64(42, 6), toDecimal128(42, 1)));
 select 'dictGetOrDefault', 'hashed_decimals' as dict_name, toUInt64(0) as k,
     dictGetOrDefault(dict_name, 'd32', k, toDecimal32(42, 4)),
     dictGetOrDefault(dict_name, 'd64', k, toDecimal64(42, 6)),
-    dictGetOrDefault(dict_name, 'd128', k, toDecimal128(42, 1));
+    dictGetOrDefault(dict_name, 'd128', k, toDecimal128(42, 1)),
+    dictGetOrDefault(dict_name, ('d32', 'd64', 'd128'), k, (toDecimal32(42, 4), toDecimal64(42, 6), toDecimal128(42, 1)));
 
 select 'dictGet', 'cache_decimals' as dict_name, toUInt64(1) as k,
     dictGet(dict_name, 'd32', k),
     dictGet(dict_name, 'd64', k),
-    dictGet(dict_name, 'd128', k);
+    dictGet(dict_name, 'd128', k),
+    dictGet(dict_name, ('d32', 'd64', 'd128'), k);
 select 'dictGetOrDefault', 'cache_decimals' as dict_name, toUInt64(1) as k,
     dictGetOrDefault(dict_name, 'd32', k, toDecimal32(42, 4)),
     dictGetOrDefault(dict_name, 'd64', k, toDecimal64(42, 6)),
-    dictGetOrDefault(dict_name, 'd128', k, toDecimal128(42, 1));
+    dictGetOrDefault(dict_name, 'd128', k, toDecimal128(42, 1)),
+    dictGetOrDefault(dict_name, ('d32', 'd64', 'd128'), k, (toDecimal32(42, 4), toDecimal64(42, 6), toDecimal128(42, 1)));
 select 'dictGetOrDefault', 'cache_decimals' as dict_name, toUInt64(0) as k,
     dictGetOrDefault(dict_name, 'd32', k, toDecimal32(42, 4)),
     dictGetOrDefault(dict_name, 'd64', k, toDecimal64(42, 6)),
-    dictGetOrDefault(dict_name, 'd128', k, toDecimal128(42, 1));
+    dictGetOrDefault(dict_name, 'd128', k, toDecimal128(42, 1)),
+    dictGetOrDefault(dict_name, ('d32', 'd64', 'd128'), k, (toDecimal32(42, 4), toDecimal64(42, 6), toDecimal128(42, 1)));
 
 select 'dictGet', 'complex_hashed_decimals' as dict_name, tuple(toUInt64(1)) as k,
     dictGet(dict_name, 'd32', k),
     dictGet(dict_name, 'd64', k),
-    dictGet(dict_name, 'd128', k);
+    dictGet(dict_name, 'd128', k),
+    dictGet(dict_name, ('d32', 'd64', 'd128'), k);
 select 'dictGetOrDefault', 'complex_hashed_decimals' as dict_name, tuple(toUInt64(1)) as k,
     dictGetOrDefault(dict_name, 'd32', k, toDecimal32(42, 4)),
     dictGetOrDefault(dict_name, 'd64', k, toDecimal64(42, 6)),
-    dictGetOrDefault(dict_name, 'd128', k, toDecimal128(42, 1));
+    dictGetOrDefault(dict_name, 'd128', k, toDecimal128(42, 1)),
+    dictGetOrDefault(dict_name, ('d32', 'd64', 'd128'), k, (toDecimal32(42, 4), toDecimal64(42, 6), toDecimal128(42, 1)));
 select 'dictGetOrDefault', 'complex_hashed_decimals' as dict_name, tuple(toUInt64(0)) as k,
     dictGetOrDefault(dict_name, 'd32', k, toDecimal32(42, 4)),
     dictGetOrDefault(dict_name, 'd64', k, toDecimal64(42, 6)),
-    dictGetOrDefault(dict_name, 'd128', k, toDecimal128(42, 1));
+    dictGetOrDefault(dict_name, 'd128', k, toDecimal128(42, 1)),
+    dictGetOrDefault(dict_name, ('d32', 'd64', 'd128'), k, (toDecimal32(42, 4), toDecimal64(42, 6), toDecimal128(42, 1)));
 
 select 'dictGet', 'complex_cache_decimals' as dict_name, tuple(toUInt64(1)) as k,
     dictGet(dict_name, 'd32', k),
     dictGet(dict_name, 'd64', k),
-    dictGet(dict_name, 'd128', k);
+    dictGet(dict_name, 'd128', k),
+    dictGet(dict_name, ('d32', 'd64', 'd128'), k);
 select 'dictGetOrDefault', 'complex_cache_decimals' as dict_name, tuple(toUInt64(1)) as k,
     dictGetOrDefault(dict_name, 'd32', k, toDecimal32(42, 4)),
     dictGetOrDefault(dict_name, 'd64', k, toDecimal64(42, 6)),
-    dictGetOrDefault(dict_name, 'd128', k, toDecimal128(42, 1));
+    dictGetOrDefault(dict_name, 'd128', k, toDecimal128(42, 1)),
+    dictGetOrDefault(dict_name, ('d32', 'd64', 'd128'), k, (toDecimal32(42, 4), toDecimal64(42, 6), toDecimal128(42, 1)));
 select 'dictGetOrDefault', 'complex_cache_decimals' as dict_name, tuple(toUInt64(0)) as k,
     dictGetOrDefault(dict_name, 'd32', k, toDecimal32(42, 4)),
     dictGetOrDefault(dict_name, 'd64', k, toDecimal64(42, 6)),
-    dictGetOrDefault(dict_name, 'd128', k, toDecimal128(42, 1));
+    dictGetOrDefault(dict_name, 'd128', k, toDecimal128(42, 1)),
+    dictGetOrDefault(dict_name, ('d32', 'd64', 'd128'), k, (toDecimal32(42, 4), toDecimal64(42, 6), toDecimal128(42, 1)));
 
 --
 -- Keep the tables, so that the dictionaries can be reloaded correctly and
diff --git a/tests/queries/0_stateless/01053_ssd_dictionary.sql b/tests/queries/0_stateless/01053_ssd_dictionary.sql
index cd4ce95802f2..a23ae7e5e967 100644
--- a/tests/queries/0_stateless/01053_ssd_dictionary.sql
+++ b/tests/queries/0_stateless/01053_ssd_dictionary.sql
@@ -1,12 +1,12 @@
 SET send_logs_level = 'none';
 
-DROP DATABASE IF EXISTS database_for_dict;
+DROP DATABASE IF EXISTS 01053_db;
 
-CREATE DATABASE database_for_dict Engine = Ordinary;
+CREATE DATABASE 01053_db Engine = Ordinary;
 
-DROP TABLE IF EXISTS database_for_dict.table_for_dict;
+DROP TABLE IF EXISTS 01053_db.table_for_dict;
 
-CREATE TABLE database_for_dict.table_for_dict
+CREATE TABLE 01053_db.table_for_dict
 (
   id UInt64,
   a UInt64,
@@ -16,16 +16,16 @@ CREATE TABLE database_for_dict.table_for_dict
 ENGINE = MergeTree()
 ORDER BY id;
 
-INSERT INTO database_for_dict.table_for_dict VALUES (1, 100, -100, 'clickhouse'), (2, 3, 4, 'database'), (5, 6, 7, 'columns'), (10, 9, 8, '');
-INSERT INTO database_for_dict.table_for_dict SELECT number, 0, -1, 'a' FROM system.numbers WHERE number NOT IN (1, 2, 5, 10) LIMIT 370;
-INSERT INTO database_for_dict.table_for_dict SELECT number, 0, -1, 'b' FROM system.numbers WHERE number NOT IN (1, 2, 5, 10) LIMIT 370, 370;
-INSERT INTO database_for_dict.table_for_dict SELECT number, 0, -1, 'c' FROM system.numbers WHERE number NOT IN (1, 2, 5, 10) LIMIT 700, 370;
+INSERT INTO 01053_db.table_for_dict VALUES (1, 100, -100, 'clickhouse'), (2, 3, 4, 'database'), (5, 6, 7, 'columns'), (10, 9, 8, '');
+INSERT INTO 01053_db.table_for_dict SELECT number, 0, -1, 'a' FROM system.numbers WHERE number NOT IN (1, 2, 5, 10) LIMIT 370;
+INSERT INTO 01053_db.table_for_dict SELECT number, 0, -1, 'b' FROM system.numbers WHERE number NOT IN (1, 2, 5, 10) LIMIT 370, 370;
+INSERT INTO 01053_db.table_for_dict SELECT number, 0, -1, 'c' FROM system.numbers WHERE number NOT IN (1, 2, 5, 10) LIMIT 700, 370;
 
-DROP DICTIONARY IF EXISTS database_for_dict.ssd_dict;
+DROP DICTIONARY IF EXISTS 01053_db.ssd_dict;
 
 -- FIXME filesystem error: in create_directory: Permission denied [/var/lib/clickhouse]
 -- Probably we need rewrite it to integration test
-CREATE DICTIONARY database_for_dict.ssd_dict
+CREATE DICTIONARY 01053_db.ssd_dict
 (
     id UInt64,
     a UInt64 DEFAULT 0,
@@ -33,40 +33,40 @@ CREATE DICTIONARY database_for_dict.ssd_dict
     c String DEFAULT 'none'
 )
 PRIMARY KEY id
-SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'table_for_dict' PASSWORD '' DB 'database_for_dict'))
+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'table_for_dict' PASSWORD '' DB '01053_db'))
 LIFETIME(MIN 1000 MAX 2000)
 LAYOUT(SSD_CACHE(FILE_SIZE 8192 PATH '/var/lib/clickhouse/clickhouse_dicts/0d'));
 
 SELECT 'TEST_SMALL';
-SELECT dictGetInt32('database_for_dict.ssd_dict', 'b', toUInt64(1));
-SELECT dictGetInt32('database_for_dict.ssd_dict', 'b', toUInt64(4));
-SELECT dictGetUInt64('database_for_dict.ssd_dict', 'a', toUInt64(5));
-SELECT dictGetUInt64('database_for_dict.ssd_dict', 'a', toUInt64(6));
-SELECT dictGetString('database_for_dict.ssd_dict', 'c', toUInt64(2));
-SELECT dictGetString('database_for_dict.ssd_dict', 'c', toUInt64(3));
+SELECT dictGetInt32('01053_db.ssd_dict', 'b', toUInt64(1));
+SELECT dictGetInt32('01053_db.ssd_dict', 'b', toUInt64(4));
+SELECT dictGetUInt64('01053_db.ssd_dict', 'a', toUInt64(5));
+SELECT dictGetUInt64('01053_db.ssd_dict', 'a', toUInt64(6));
+SELECT dictGetString('01053_db.ssd_dict', 'c', toUInt64(2));
+SELECT dictGetString('01053_db.ssd_dict', 'c', toUInt64(3));
 
-SELECT * FROM database_for_dict.ssd_dict ORDER BY id;
-DROP DICTIONARY database_for_dict.ssd_dict;
+SELECT * FROM 01053_db.ssd_dict ORDER BY id;
+DROP DICTIONARY 01053_db.ssd_dict;
 
-DROP TABLE IF EXISTS database_for_dict.keys_table;
+DROP TABLE IF EXISTS 01053_db.keys_table;
 
-CREATE TABLE database_for_dict.keys_table
+CREATE TABLE 01053_db.keys_table
 (
   id UInt64
 )
 ENGINE = StripeLog();
 
-INSERT INTO database_for_dict.keys_table VALUES (1);
-INSERT INTO database_for_dict.keys_table SELECT 11 + intHash64(number) % 1200 FROM system.numbers LIMIT 370;
-INSERT INTO database_for_dict.keys_table VALUES (2);
-INSERT INTO database_for_dict.keys_table SELECT 11 + intHash64(number) % 1200 FROM system.numbers LIMIT 370, 370;
-INSERT INTO database_for_dict.keys_table VALUES (5);
-INSERT INTO database_for_dict.keys_table SELECT 11 + intHash64(number) % 1200 FROM system.numbers LIMIT 700, 370;
-INSERT INTO database_for_dict.keys_table VALUES (10);
+INSERT INTO 01053_db.keys_table VALUES (1);
+INSERT INTO 01053_db.keys_table SELECT 11 + intHash64(number) % 1200 FROM system.numbers LIMIT 370;
+INSERT INTO 01053_db.keys_table VALUES (2);
+INSERT INTO 01053_db.keys_table SELECT 11 + intHash64(number) % 1200 FROM system.numbers LIMIT 370, 370;
+INSERT INTO 01053_db.keys_table VALUES (5);
+INSERT INTO 01053_db.keys_table SELECT 11 + intHash64(number) % 1200 FROM system.numbers LIMIT 700, 370;
+INSERT INTO 01053_db.keys_table VALUES (10);
 
-DROP DICTIONARY IF EXISTS database_for_dict.ssd_dict;
+DROP DICTIONARY IF EXISTS 01053_db.ssd_dict;
 
-CREATE DICTIONARY database_for_dict.ssd_dict
+CREATE DICTIONARY 01053_db.ssd_dict
 (
     id UInt64,
     a UInt64 DEFAULT 0,
@@ -74,86 +74,86 @@ CREATE DICTIONARY database_for_dict.ssd_dict
     c String DEFAULT 'none'
 )
 PRIMARY KEY id
-SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'table_for_dict' PASSWORD '' DB 'database_for_dict'))
+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'table_for_dict' PASSWORD '' DB '01053_db'))
 LIFETIME(MIN 1000 MAX 2000)
 LAYOUT(SSD_CACHE(FILE_SIZE 8192 PATH '/var/lib/clickhouse/clickhouse_dicts/1d' BLOCK_SIZE 512 WRITE_BUFFER_SIZE 4096 MAX_STORED_KEYS 1000000));
 
 SELECT 'UPDATE DICTIONARY';
 -- 118
-SELECT sum(dictGetUInt64('database_for_dict.ssd_dict', 'a', toUInt64(id))) FROM database_for_dict.keys_table;
+SELECT sum(dictGetUInt64('01053_db.ssd_dict', 'a', toUInt64(id))) FROM 01053_db.keys_table;
 
 SELECT 'VALUE FROM DISK';
 -- -100
-SELECT dictGetInt32('database_for_dict.ssd_dict', 'b', toUInt64(1));
+SELECT dictGetInt32('01053_db.ssd_dict', 'b', toUInt64(1));
 
 -- 'clickhouse'
-SELECT dictGetString('database_for_dict.ssd_dict', 'c', toUInt64(1));
+SELECT dictGetString('01053_db.ssd_dict', 'c', toUInt64(1));
 
 SELECT 'VALUE FROM RAM BUFFER';
 -- 8
-SELECT dictGetInt32('database_for_dict.ssd_dict', 'b', toUInt64(10));
+SELECT dictGetInt32('01053_db.ssd_dict', 'b', toUInt64(10));
 
 -- ''
-SELECT dictGetString('database_for_dict.ssd_dict', 'c', toUInt64(10));
+SELECT dictGetString('01053_db.ssd_dict', 'c', toUInt64(10));
 
 SELECT 'VALUES FROM DISK AND RAM BUFFER';
 -- 118
-SELECT sum(dictGetUInt64('database_for_dict.ssd_dict', 'a', toUInt64(id))) FROM database_for_dict.keys_table;
+SELECT sum(dictGetUInt64('01053_db.ssd_dict', 'a', toUInt64(id))) FROM 01053_db.keys_table;
 
 SELECT 'HAS';
 -- 1006
-SELECT count() FROM database_for_dict.keys_table WHERE dictHas('database_for_dict.ssd_dict', toUInt64(id));
+SELECT count() FROM 01053_db.keys_table WHERE dictHas('01053_db.ssd_dict', toUInt64(id));
 
 SELECT 'VALUES NOT FROM TABLE';
 -- 0 -1 none
-SELECT dictGetUInt64('database_for_dict.ssd_dict', 'a', toUInt64(1000000)), dictGetInt32('database_for_dict.ssd_dict', 'b', toUInt64(1000000)), dictGetString('database_for_dict.ssd_dict', 'c', toUInt64(1000000));
-SELECT dictGetUInt64('database_for_dict.ssd_dict', 'a', toUInt64(1000000)), dictGetInt32('database_for_dict.ssd_dict', 'b', toUInt64(1000000)), dictGetString('database_for_dict.ssd_dict', 'c', toUInt64(1000000));
+SELECT dictGetUInt64('01053_db.ssd_dict', 'a', toUInt64(1000000)), dictGetInt32('01053_db.ssd_dict', 'b', toUInt64(1000000)), dictGetString('01053_db.ssd_dict', 'c', toUInt64(1000000));
+SELECT dictGetUInt64('01053_db.ssd_dict', 'a', toUInt64(1000000)), dictGetInt32('01053_db.ssd_dict', 'b', toUInt64(1000000)), dictGetString('01053_db.ssd_dict', 'c', toUInt64(1000000));
 
 SELECT 'DUPLICATE KEYS';
-SELECT arrayJoin([1, 2, 3, 3, 2, 1]) AS id, dictGetInt32('database_for_dict.ssd_dict', 'b', toUInt64(id));
+SELECT arrayJoin([1, 2, 3, 3, 2, 1]) AS id, dictGetInt32('01053_db.ssd_dict', 'b', toUInt64(id));
 --SELECT
-DROP DICTIONARY IF EXISTS database_for_dict.ssd_dict;
+DROP DICTIONARY IF EXISTS 01053_db.ssd_dict;
 
-DROP TABLE IF EXISTS database_for_dict.keys_table;
+DROP TABLE IF EXISTS 01053_db.keys_table;
 
-CREATE TABLE database_for_dict.keys_table
+CREATE TABLE 01053_db.keys_table
 (
   id UInt64
 )
 ENGINE = MergeTree()
 ORDER BY id;
 
-INSERT INTO database_for_dict.keys_table VALUES (1);
-INSERT INTO database_for_dict.keys_table SELECT intHash64(number) FROM system.numbers LIMIT 370;
-INSERT INTO database_for_dict.keys_table VALUES (2);
-INSERT INTO database_for_dict.keys_table SELECT intHash64(number) FROM system.numbers LIMIT 370, 370;
-INSERT INTO database_for_dict.keys_table VALUES (5);
-INSERT INTO database_for_dict.keys_table SELECT intHash64(number) FROM system.numbers LIMIT 700, 370;
-INSERT INTO database_for_dict.keys_table VALUES (10);
+INSERT INTO 01053_db.keys_table VALUES (1);
+INSERT INTO 01053_db.keys_table SELECT intHash64(number) FROM system.numbers LIMIT 370;
+INSERT INTO 01053_db.keys_table VALUES (2);
+INSERT INTO 01053_db.keys_table SELECT intHash64(number) FROM system.numbers LIMIT 370, 370;
+INSERT INTO 01053_db.keys_table VALUES (5);
+INSERT INTO 01053_db.keys_table SELECT intHash64(number) FROM system.numbers LIMIT 700, 370;
+INSERT INTO 01053_db.keys_table VALUES (10);
 
-OPTIMIZE TABLE database_for_dict.keys_table;
+OPTIMIZE TABLE 01053_db.keys_table;
 
-CREATE DICTIONARY database_for_dict.ssd_dict
+CREATE DICTIONARY 01053_db.ssd_dict
 (
     id UInt64,
     a UInt64 DEFAULT 0,
     b Int32 DEFAULT -1
 )
 PRIMARY KEY id
-SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'table_for_dict' PASSWORD '' DB 'database_for_dict'))
+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'table_for_dict' PASSWORD '' DB '01053_db'))
 LIFETIME(MIN 1000 MAX 2000)
 LAYOUT(SSD_CACHE(FILE_SIZE 8192 PATH '/var/lib/clickhouse/clickhouse_dicts/2d' BLOCK_SIZE 512 WRITE_BUFFER_SIZE 1024 MAX_STORED_KEYS 10));
 
 SELECT 'UPDATE DICTIONARY (MT)';
 -- 118
-SELECT sum(dictGetUInt64('database_for_dict.ssd_dict', 'a', toUInt64(id))) FROM database_for_dict.keys_table;
+SELECT sum(dictGetUInt64('01053_db.ssd_dict', 'a', toUInt64(id))) FROM 01053_db.keys_table;
 
 SELECT 'VALUES FROM DISK AND RAM BUFFER (MT)';
 -- 118
-SELECT sum(dictGetUInt64('database_for_dict.ssd_dict', 'a', toUInt64(id))) FROM database_for_dict.keys_table;
+SELECT sum(dictGetUInt64('01053_db.ssd_dict', 'a', toUInt64(id))) FROM 01053_db.keys_table;
 
-DROP DICTIONARY IF EXISTS database_for_dict.ssd_dict;
+DROP DICTIONARY IF EXISTS 01053_db.ssd_dict;
 
-DROP TABLE IF EXISTS database_for_dict.table_for_dict;
+DROP TABLE IF EXISTS 01053_db.table_for_dict;
 
-DROP DATABASE IF EXISTS database_for_dict;
+DROP DATABASE IF EXISTS 01053_db;
diff --git a/tests/queries/0_stateless/01280_ssd_complex_key_dictionary.sql b/tests/queries/0_stateless/01280_ssd_complex_key_dictionary.sql
index 70e1d2bed291..8c304818602a 100644
--- a/tests/queries/0_stateless/01280_ssd_complex_key_dictionary.sql
+++ b/tests/queries/0_stateless/01280_ssd_complex_key_dictionary.sql
@@ -1,12 +1,12 @@
 SET send_logs_level = 'none';
 
-DROP DATABASE IF EXISTS database_for_dict;
+DROP DATABASE IF EXISTS 01280_db;
 
-CREATE DATABASE database_for_dict Engine = Ordinary;
+CREATE DATABASE 01280_db Engine = Ordinary;
 
-DROP TABLE IF EXISTS database_for_dict.table_for_dict;
+DROP TABLE IF EXISTS 01280_db.table_for_dict;
 
-CREATE TABLE database_for_dict.table_for_dict
+CREATE TABLE 01280_db.table_for_dict
 (
   k1 String,
   k2 Int32,
@@ -17,16 +17,16 @@ CREATE TABLE database_for_dict.table_for_dict
 ENGINE = MergeTree()
 ORDER BY (k1, k2);
 
-INSERT INTO database_for_dict.table_for_dict VALUES (toString(1), 3, 100, -100, 'clickhouse'), (toString(2), -1, 3, 4, 'database'), (toString(5), -3, 6, 7, 'columns'), (toString(10), -20, 9, 8, '');
-INSERT INTO database_for_dict.table_for_dict SELECT toString(number), number + 1, 0, -1, 'a' FROM system.numbers WHERE number NOT IN (1, 2, 5, 10) LIMIT 370;
-INSERT INTO database_for_dict.table_for_dict SELECT toString(number), number + 10, 0, -1, 'b' FROM system.numbers WHERE number NOT IN (1, 2, 5, 10) LIMIT 370, 370;
-INSERT INTO database_for_dict.table_for_dict SELECT toString(number), number + 100, 0, -1, 'c' FROM system.numbers WHERE number NOT IN (1, 2, 5, 10) LIMIT 700, 370;
+INSERT INTO 01280_db.table_for_dict VALUES (toString(1), 3, 100, -100, 'clickhouse'), (toString(2), -1, 3, 4, 'database'), (toString(5), -3, 6, 7, 'columns'), (toString(10), -20, 9, 8, '');
+INSERT INTO 01280_db.table_for_dict SELECT toString(number), number + 1, 0, -1, 'a' FROM system.numbers WHERE number NOT IN (1, 2, 5, 10) LIMIT 370;
+INSERT INTO 01280_db.table_for_dict SELECT toString(number), number + 10, 0, -1, 'b' FROM system.numbers WHERE number NOT IN (1, 2, 5, 10) LIMIT 370, 370;
+INSERT INTO 01280_db.table_for_dict SELECT toString(number), number + 100, 0, -1, 'c' FROM system.numbers WHERE number NOT IN (1, 2, 5, 10) LIMIT 700, 370;
 
-DROP DICTIONARY IF EXISTS database_for_dict.ssd_dict;
+DROP DICTIONARY IF EXISTS 01280_db.ssd_dict;
 
 -- FIXME filesystem error: in create_directory: Permission denied [/var/lib/clickhouse]
 -- Probably we need rewrite it to integration test
-CREATE DICTIONARY database_for_dict.ssd_dict
+CREATE DICTIONARY 01280_db.ssd_dict
 (
     k1 String,
     k2 Int32,
@@ -35,7 +35,7 @@ CREATE DICTIONARY database_for_dict.ssd_dict
     c String DEFAULT 'none'
 )
 PRIMARY KEY k1, k2
-SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'table_for_dict' PASSWORD '' DB 'database_for_dict'))
+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'table_for_dict' PASSWORD '' DB '01280_db'))
 LIFETIME(MIN 1000 MAX 2000)
 LAYOUT(COMPLEX_KEY_SSD_CACHE(FILE_SIZE 8192 PATH '/var/lib/clickhouse/clickhouse_dicts/0d'));
 
@@ -43,52 +43,52 @@ SELECT 'TEST_SMALL';
 SELECT 'VALUE FROM RAM BUFFER';
 
 -- NUMBER_OF_ARGUMENTS_DOESNT_MATCH
-SELECT dictHas('database_for_dict.ssd_dict', 'a', tuple('1')); -- { serverError 42 }
+SELECT dictHas('01280_db.ssd_dict', 'a', tuple('1')); -- { serverError 42 }
 
-SELECT dictGetUInt64('database_for_dict.ssd_dict', 'a', tuple('1', toInt32(3)));
-SELECT dictGetInt32('database_for_dict.ssd_dict', 'b', tuple('1', toInt32(3)));
-SELECT dictGetString('database_for_dict.ssd_dict', 'c', tuple('1', toInt32(3)));
+SELECT dictGetUInt64('01280_db.ssd_dict', 'a', tuple('1', toInt32(3)));
+SELECT dictGetInt32('01280_db.ssd_dict', 'b', tuple('1', toInt32(3)));
+SELECT dictGetString('01280_db.ssd_dict', 'c', tuple('1', toInt32(3)));
 
-SELECT dictGetUInt64('database_for_dict.ssd_dict', 'a', tuple('1', toInt32(3)));
-SELECT dictGetInt32('database_for_dict.ssd_dict', 'b', tuple('1', toInt32(3)));
-SELECT dictGetString('database_for_dict.ssd_dict', 'c', tuple('1', toInt32(3)));
+SELECT dictGetUInt64('01280_db.ssd_dict', 'a', tuple('1', toInt32(3)));
+SELECT dictGetInt32('01280_db.ssd_dict', 'b', tuple('1', toInt32(3)));
+SELECT dictGetString('01280_db.ssd_dict', 'c', tuple('1', toInt32(3)));
 
-SELECT dictGetUInt64('database_for_dict.ssd_dict', 'a', tuple('2', toInt32(-1)));
-SELECT dictGetInt32('database_for_dict.ssd_dict', 'b', tuple('2', toInt32(-1)));
-SELECT dictGetString('database_for_dict.ssd_dict', 'c', tuple('2', toInt32(-1)));
+SELECT dictGetUInt64('01280_db.ssd_dict', 'a', tuple('2', toInt32(-1)));
+SELECT dictGetInt32('01280_db.ssd_dict', 'b', tuple('2', toInt32(-1)));
+SELECT dictGetString('01280_db.ssd_dict', 'c', tuple('2', toInt32(-1)));
 
-SELECT dictGetUInt64('database_for_dict.ssd_dict', 'a', tuple('5', toInt32(-3)));
-SELECT dictGetInt32('database_for_dict.ssd_dict', 'b', tuple('5', toInt32(-3)));
-SELECT dictGetString('database_for_dict.ssd_dict', 'c', tuple('5', toInt32(-3)));
+SELECT dictGetUInt64('01280_db.ssd_dict', 'a', tuple('5', toInt32(-3)));
+SELECT dictGetInt32('01280_db.ssd_dict', 'b', tuple('5', toInt32(-3)));
+SELECT dictGetString('01280_db.ssd_dict', 'c', tuple('5', toInt32(-3)));
 
-SELECT dictGetUInt64('database_for_dict.ssd_dict', 'a', tuple('10', toInt32(-20)));
-SELECT dictGetInt32('database_for_dict.ssd_dict', 'b', tuple('10', toInt32(-20)));
-SELECT dictGetString('database_for_dict.ssd_dict', 'c', tuple('10', toInt32(-20)));
+SELECT dictGetUInt64('01280_db.ssd_dict', 'a', tuple('10', toInt32(-20)));
+SELECT dictGetInt32('01280_db.ssd_dict', 'b', tuple('10', toInt32(-20)));
+SELECT dictGetString('01280_db.ssd_dict', 'c', tuple('10', toInt32(-20)));
 
-SELECT dictGetUInt64('database_for_dict.ssd_dict', 'a', tuple(toInt32(3))); --{serverError 53}
+SELECT dictGetUInt64('01280_db.ssd_dict', 'a', tuple(toInt32(3))); --{serverError 53}
 
-DROP DICTIONARY database_for_dict.ssd_dict;
+DROP DICTIONARY 01280_db.ssd_dict;
 
-DROP TABLE IF EXISTS database_for_dict.keys_table;
+DROP TABLE IF EXISTS 01280_db.keys_table;
 
-CREATE TABLE database_for_dict.keys_table
+CREATE TABLE 01280_db.keys_table
 (
     k1 String,
     k2 Int32
 )
 ENGINE = StripeLog();
 
-INSERT INTO database_for_dict.keys_table VALUES ('1', 3);
-INSERT INTO database_for_dict.keys_table SELECT toString(intHash64(number + 1) % 1200), 11 + intHash64(number) % 1200 FROM system.numbers LIMIT 370;
-INSERT INTO database_for_dict.keys_table VALUES ('2', -1);
-INSERT INTO database_for_dict.keys_table SELECT toString(intHash64(number + 1) % 1200), 11 + intHash64(number) % 1200 FROM system.numbers LIMIT 370, 370;
-INSERT INTO database_for_dict.keys_table VALUES ('5', -3);
-INSERT INTO database_for_dict.keys_table SELECT toString(intHash64(number + 1) % 1200), 11 + intHash64(number) % 1200 FROM system.numbers LIMIT 700, 370;
-INSERT INTO database_for_dict.keys_table VALUES ('10', -20);
+INSERT INTO 01280_db.keys_table VALUES ('1', 3);
+INSERT INTO 01280_db.keys_table SELECT toString(intHash64(number + 1) % 1200), 11 + intHash64(number) % 1200 FROM system.numbers LIMIT 370;
+INSERT INTO 01280_db.keys_table VALUES ('2', -1);
+INSERT INTO 01280_db.keys_table SELECT toString(intHash64(number + 1) % 1200), 11 + intHash64(number) % 1200 FROM system.numbers LIMIT 370, 370;
+INSERT INTO 01280_db.keys_table VALUES ('5', -3);
+INSERT INTO 01280_db.keys_table SELECT toString(intHash64(number + 1) % 1200), 11 + intHash64(number) % 1200 FROM system.numbers LIMIT 700, 370;
+INSERT INTO 01280_db.keys_table VALUES ('10', -20);
 
-DROP DICTIONARY IF EXISTS database_for_dict.ssd_dict;
+DROP DICTIONARY IF EXISTS 01280_db.ssd_dict;
 
-CREATE DICTIONARY database_for_dict.ssd_dict
+CREATE DICTIONARY 01280_db.ssd_dict
 (
     k1 String,
     k2 Int32,
@@ -97,43 +97,43 @@ CREATE DICTIONARY database_for_dict.ssd_dict
     c String DEFAULT 'none'
 )
 PRIMARY KEY k1, k2
-SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'table_for_dict' PASSWORD '' DB 'database_for_dict'))
+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'table_for_dict' PASSWORD '' DB '01280_db'))
 LIFETIME(MIN 1000 MAX 2000)
 LAYOUT(COMPLEX_KEY_SSD_CACHE(FILE_SIZE 8192 PATH '/var/lib/clickhouse/clickhouse_dicts/1d' BLOCK_SIZE 512 WRITE_BUFFER_SIZE 4096 MAX_STORED_KEYS 1000000));
 
 SELECT 'UPDATE DICTIONARY';
 -- 118
-SELECT sum(dictGetUInt64('database_for_dict.ssd_dict', 'a', (k1, k2))) FROM database_for_dict.keys_table;
+SELECT sum(dictGetUInt64('01280_db.ssd_dict', 'a', (k1, k2))) FROM 01280_db.keys_table;
 
 SELECT 'VALUE FROM DISK';
 -- -100
-SELECT dictGetInt32('database_for_dict.ssd_dict', 'b', ('1', toInt32(3)));
+SELECT dictGetInt32('01280_db.ssd_dict', 'b', ('1', toInt32(3)));
 
 -- 'clickhouse'
-SELECT dictGetString('database_for_dict.ssd_dict', 'c', ('1', toInt32(3)));
+SELECT dictGetString('01280_db.ssd_dict', 'c', ('1', toInt32(3)));
 
 SELECT 'VALUE FROM RAM BUFFER';
 -- 8
-SELECT dictGetInt32('database_for_dict.ssd_dict', 'b', ('10', toInt32(-20)));
+SELECT dictGetInt32('01280_db.ssd_dict', 'b', ('10', toInt32(-20)));
 
 -- ''
-SELECT dictGetString('database_for_dict.ssd_dict', 'c', ('10', toInt32(-20)));
+SELECT dictGetString('01280_db.ssd_dict', 'c', ('10', toInt32(-20)));
 
 SELECT 'VALUES FROM DISK AND RAM BUFFER';
 -- 118
-SELECT sum(dictGetUInt64('database_for_dict.ssd_dict', 'a', (k1, k2))) FROM database_for_dict.keys_table;
+SELECT sum(dictGetUInt64('01280_db.ssd_dict', 'a', (k1, k2))) FROM 01280_db.keys_table;
 
 SELECT 'HAS';
 -- 6
-SELECT count() FROM database_for_dict.keys_table WHERE dictHas('database_for_dict.ssd_dict', (k1, k2));
+SELECT count() FROM 01280_db.keys_table WHERE dictHas('01280_db.ssd_dict', (k1, k2));
 
 SELECT 'VALUES NOT FROM TABLE';
 -- 0 -1 none
-SELECT dictGetUInt64('database_for_dict.ssd_dict', 'a', ('unknown', toInt32(0))), dictGetInt32('database_for_dict.ssd_dict', 'b', ('unknown', toInt32(0))), dictGetString('database_for_dict.ssd_dict', 'c', ('unknown', toInt32(0)));
-SELECT dictGetUInt64('database_for_dict.ssd_dict', 'a', ('unknown', toInt32(0))), dictGetInt32('database_for_dict.ssd_dict', 'b', ('unknown', toInt32(0))), dictGetString('database_for_dict.ssd_dict', 'c', ('unknown', toInt32(0)));
+SELECT dictGetUInt64('01280_db.ssd_dict', 'a', ('unknown', toInt32(0))), dictGetInt32('01280_db.ssd_dict', 'b', ('unknown', toInt32(0))), dictGetString('01280_db.ssd_dict', 'c', ('unknown', toInt32(0)));
+SELECT dictGetUInt64('01280_db.ssd_dict', 'a', ('unknown', toInt32(0))), dictGetInt32('01280_db.ssd_dict', 'b', ('unknown', toInt32(0))), dictGetString('01280_db.ssd_dict', 'c', ('unknown', toInt32(0)));
 
 SELECT 'DUPLICATE KEYS';
-SELECT arrayJoin([('1', toInt32(3)), ('2', toInt32(-1)), ('', toInt32(0)), ('', toInt32(0)), ('2', toInt32(-1)), ('1', toInt32(3))]) AS keys, dictGetInt32('database_for_dict.ssd_dict', 'b', keys);
+SELECT arrayJoin([('1', toInt32(3)), ('2', toInt32(-1)), ('', toInt32(0)), ('', toInt32(0)), ('2', toInt32(-1)), ('1', toInt32(3))]) AS keys, dictGetInt32('01280_db.ssd_dict', 'b', keys);
 
 DROP DICTIONARY IF EXISTS database_for_dict.ssd_dict;
 
diff --git a/tests/queries/0_stateless/01681_cache_dictionary_simple_key.reference b/tests/queries/0_stateless/01681_cache_dictionary_simple_key.reference
new file mode 100644
index 000000000000..b3258e36f745
--- /dev/null
+++ b/tests/queries/0_stateless/01681_cache_dictionary_simple_key.reference
@@ -0,0 +1,66 @@
+Dictionary cache_dictionary_simple_key_simple_attributes
+dictGet existing value
+value_0	value_second_0
+value_1	value_second_1
+value_2	value_second_2
+dictGet with non existing value
+value_0	value_second_0
+value_1	value_second_1
+value_2	value_second_2
+value_first_default	value_second_default
+dictGetOrDefault existing value
+value_0	value_second_0
+value_1	value_second_1
+value_2	value_second_2
+dictGetOrDefault non existing value
+value_0	value_second_0
+value_1	value_second_1
+value_2	value_second_2
+default	default
+dictHas
+1
+1
+1
+0
+select all values as input stream
+0	value_0	value_second_0
+1	value_1	value_second_1
+2	value_2	value_second_2
+Dictionary cache_dictionary_simple_key_complex_attributes
+dictGet existing value
+value_0	value_second_0
+value_1	\N
+value_2	value_second_2
+dictGet with non existing value
+value_0	value_second_0
+value_1	\N
+value_2	value_second_2
+value_first_default	value_second_default
+dictGetOrDefault existing value
+value_0	value_second_0
+value_1	\N
+value_2	value_second_2
+dictGetOrDefault non existing value
+value_0	value_second_0
+value_1	\N
+value_2	value_second_2
+default	default
+dictHas
+1
+1
+1
+0
+select all values as input stream
+0	value_0	value_second_0
+1	value_1	\N
+2	value_2	value_second_2
+Dictionary cache_dictionary_simple_key_hierarchy
+dictGet
+0
+0
+1
+1
+2
+dictGetHierarchy
+[1]
+[4,2,1]
diff --git a/tests/queries/0_stateless/01681_cache_dictionary_simple_key.sql b/tests/queries/0_stateless/01681_cache_dictionary_simple_key.sql
new file mode 100644
index 000000000000..ee2cde963d77
--- /dev/null
+++ b/tests/queries/0_stateless/01681_cache_dictionary_simple_key.sql
@@ -0,0 +1,123 @@
+DROP DATABASE IF EXISTS 01681_database_for_cache_dictionary;
+CREATE DATABASE 01681_database_for_cache_dictionary;
+
+CREATE TABLE 01681_database_for_cache_dictionary.simple_key_simple_attributes_source_table
+(
+   id UInt64,
+   value_first String,
+   value_second String
+)
+ENGINE = TinyLog;
+
+INSERT INTO 01681_database_for_cache_dictionary.simple_key_simple_attributes_source_table VALUES(0, 'value_0', 'value_second_0');
+INSERT INTO 01681_database_for_cache_dictionary.simple_key_simple_attributes_source_table VALUES(1, 'value_1', 'value_second_1');
+INSERT INTO 01681_database_for_cache_dictionary.simple_key_simple_attributes_source_table VALUES(2, 'value_2', 'value_second_2');
+
+CREATE DICTIONARY 01681_database_for_cache_dictionary.cache_dictionary_simple_key_simple_attributes
+(
+   id UInt64,
+   value_first String DEFAULT 'value_first_default',
+   value_second String DEFAULT 'value_second_default'
+)
+PRIMARY KEY id
+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'simple_key_simple_attributes_source_table'))
+LIFETIME(MIN 1 MAX 1000)
+LAYOUT(CACHE(SIZE_IN_CELLS 10));
+
+SELECT 'Dictionary cache_dictionary_simple_key_simple_attributes';
+SELECT 'dictGet existing value';
+SELECT dictGet('01681_database_for_cache_dictionary.cache_dictionary_simple_key_simple_attributes', 'value_first', number) as value_first,
+    dictGet('01681_database_for_cache_dictionary.cache_dictionary_simple_key_simple_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 3;
+SELECT 'dictGet with non existing value';
+SELECT dictGet('01681_database_for_cache_dictionary.cache_dictionary_simple_key_simple_attributes', 'value_first', number) as value_first,
+    dictGet('01681_database_for_cache_dictionary.cache_dictionary_simple_key_simple_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 4;
+SELECT 'dictGetOrDefault existing value';
+SELECT dictGetOrDefault('01681_database_for_cache_dictionary.cache_dictionary_simple_key_simple_attributes', 'value_first', number, toString('default')) as value_first,
+    dictGetOrDefault('01681_database_for_cache_dictionary.cache_dictionary_simple_key_simple_attributes', 'value_second', number, toString('default')) as value_second FROM system.numbers LIMIT 3;
+SELECT 'dictGetOrDefault non existing value';
+SELECT dictGetOrDefault('01681_database_for_cache_dictionary.cache_dictionary_simple_key_simple_attributes', 'value_first', number, toString('default')) as value_first,
+    dictGetOrDefault('01681_database_for_cache_dictionary.cache_dictionary_simple_key_simple_attributes', 'value_second', number, toString('default')) as value_second FROM system.numbers LIMIT 4;
+SELECT 'dictHas';
+SELECT dictHas('01681_database_for_cache_dictionary.cache_dictionary_simple_key_simple_attributes', number) FROM system.numbers LIMIT 4;
+SELECT 'select all values as input stream';
+SELECT * FROM 01681_database_for_cache_dictionary.cache_dictionary_simple_key_simple_attributes;
+
+DROP DICTIONARY 01681_database_for_cache_dictionary.cache_dictionary_simple_key_simple_attributes;
+DROP TABLE 01681_database_for_cache_dictionary.simple_key_simple_attributes_source_table;
+
+CREATE TABLE 01681_database_for_cache_dictionary.simple_key_complex_attributes_source_table
+(
+   id UInt64,
+   value_first String,
+   value_second Nullable(String)
+)
+ENGINE = TinyLog;
+
+INSERT INTO 01681_database_for_cache_dictionary.simple_key_complex_attributes_source_table VALUES(0, 'value_0', 'value_second_0');
+INSERT INTO 01681_database_for_cache_dictionary.simple_key_complex_attributes_source_table VALUES(1, 'value_1', NULL);
+INSERT INTO 01681_database_for_cache_dictionary.simple_key_complex_attributes_source_table VALUES(2, 'value_2', 'value_second_2');
+
+CREATE DICTIONARY 01681_database_for_cache_dictionary.cache_dictionary_simple_key_complex_attributes
+(
+   id UInt64,
+   value_first String DEFAULT 'value_first_default',
+   value_second Nullable(String) DEFAULT 'value_second_default'
+)
+PRIMARY KEY id
+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'simple_key_complex_attributes_source_table'))
+LIFETIME(MIN 1 MAX 1000)
+LAYOUT(CACHE(SIZE_IN_CELLS 10));
+
+SELECT 'Dictionary cache_dictionary_simple_key_complex_attributes';
+SELECT 'dictGet existing value';
+SELECT dictGet('01681_database_for_cache_dictionary.cache_dictionary_simple_key_complex_attributes', 'value_first', number) as value_first,
+    dictGet('01681_database_for_cache_dictionary.cache_dictionary_simple_key_complex_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 3;
+SELECT 'dictGet with non existing value';
+SELECT dictGet('01681_database_for_cache_dictionary.cache_dictionary_simple_key_complex_attributes', 'value_first', number) as value_first,
+    dictGet('01681_database_for_cache_dictionary.cache_dictionary_simple_key_complex_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 4;
+SELECT 'dictGetOrDefault existing value';
+SELECT dictGetOrDefault('01681_database_for_cache_dictionary.cache_dictionary_simple_key_complex_attributes', 'value_first', number, toString('default')) as value_first,
+    dictGetOrDefault('01681_database_for_cache_dictionary.cache_dictionary_simple_key_complex_attributes', 'value_second', number, toString('default')) as value_second FROM system.numbers LIMIT 3;
+SELECT 'dictGetOrDefault non existing value';
+SELECT dictGetOrDefault('01681_database_for_cache_dictionary.cache_dictionary_simple_key_complex_attributes', 'value_first', number, toString('default')) as value_first,
+    dictGetOrDefault('01681_database_for_cache_dictionary.cache_dictionary_simple_key_complex_attributes', 'value_second', number, toString('default')) as value_second FROM system.numbers LIMIT 4;
+SELECT 'dictHas';
+SELECT dictHas('01681_database_for_cache_dictionary.cache_dictionary_simple_key_complex_attributes', number) FROM system.numbers LIMIT 4;
+SELECT 'select all values as input stream';
+SELECT * FROM 01681_database_for_cache_dictionary.cache_dictionary_simple_key_complex_attributes;
+
+DROP DICTIONARY 01681_database_for_cache_dictionary.cache_dictionary_simple_key_complex_attributes;
+DROP TABLE 01681_database_for_cache_dictionary.simple_key_complex_attributes_source_table;
+
+CREATE TABLE 01681_database_for_cache_dictionary.simple_key_hierarchy_table
+(
+    id UInt64,
+    parent_id UInt64
+) ENGINE = TinyLog();
+
+INSERT INTO 01681_database_for_cache_dictionary.simple_key_hierarchy_table VALUES (1, 0);
+INSERT INTO 01681_database_for_cache_dictionary.simple_key_hierarchy_table VALUES (2, 1);
+INSERT INTO 01681_database_for_cache_dictionary.simple_key_hierarchy_table VALUES (3, 1);
+INSERT INTO 01681_database_for_cache_dictionary.simple_key_hierarchy_table VALUES (4, 2);
+
+CREATE DICTIONARY 01681_database_for_cache_dictionary.cache_dictionary_simple_key_hierarchy
+(
+   id UInt64,
+   parent_id UInt64 HIERARCHICAL
+)
+PRIMARY KEY id
+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'simple_key_hierarchy_table'))
+LIFETIME(MIN 1 MAX 1000)
+LAYOUT(CACHE(SIZE_IN_CELLS 10));
+
+SELECT 'Dictionary cache_dictionary_simple_key_hierarchy';
+SELECT 'dictGet';
+SELECT dictGet('01681_database_for_cache_dictionary.cache_dictionary_simple_key_hierarchy', 'parent_id', number) FROM system.numbers LIMIT 5;
+SELECT 'dictGetHierarchy';
+SELECT dictGetHierarchy('01681_database_for_cache_dictionary.cache_dictionary_simple_key_hierarchy', toUInt64(1));
+SELECT dictGetHierarchy('01681_database_for_cache_dictionary.cache_dictionary_simple_key_hierarchy', toUInt64(4));
+
+DROP DICTIONARY 01681_database_for_cache_dictionary.cache_dictionary_simple_key_hierarchy;
+DROP TABLE 01681_database_for_cache_dictionary.simple_key_hierarchy_table;
+
+DROP DATABASE 01681_database_for_cache_dictionary;
diff --git a/tests/queries/0_stateless/01682_cache_dictionary_complex_key.reference b/tests/queries/0_stateless/01682_cache_dictionary_complex_key.reference
new file mode 100644
index 000000000000..a0f99ca13cc9
--- /dev/null
+++ b/tests/queries/0_stateless/01682_cache_dictionary_complex_key.reference
@@ -0,0 +1,56 @@
+Dictionary cache_dictionary_complex_key_simple_attributes
+dictGet existing value
+value_0	value_second_0
+value_1	value_second_1
+value_2	value_second_2
+dictGet with non existing value
+value_0	value_second_0
+value_1	value_second_1
+value_2	value_second_2
+value_first_default	value_second_default
+dictGetOrDefault existing value
+value_0	value_second_0
+value_1	value_second_1
+value_2	value_second_2
+dictGetOrDefault non existing value
+value_0	value_second_0
+value_1	value_second_1
+value_2	value_second_2
+default	default
+dictHas
+1
+1
+1
+0
+select all values as input stream
+0	id_key_0	value_0	value_second_0
+1	id_key_1	value_1	value_second_1
+2	id_key_2	value_2	value_second_2
+Dictionary cache_dictionary_complex_key_complex_attributes
+dictGet existing value
+value_0	value_second_0
+value_1	\N
+value_2	value_second_2
+dictGet with non existing value
+value_0	value_second_0
+value_1	\N
+value_2	value_second_2
+value_first_default	value_second_default
+dictGetOrDefault existing value
+value_0	value_second_0
+value_1	\N
+value_2	value_second_2
+dictGetOrDefault non existing value
+value_0	value_second_0
+value_1	\N
+value_2	value_second_2
+default	default
+dictHas
+1
+1
+1
+0
+select all values as input stream
+0	id_key_0	value_0	value_second_0
+1	id_key_1	value_1	\N
+2	id_key_2	value_2	value_second_2
diff --git a/tests/queries/0_stateless/01682_cache_dictionary_complex_key.sql b/tests/queries/0_stateless/01682_cache_dictionary_complex_key.sql
new file mode 100644
index 000000000000..65c56090c47f
--- /dev/null
+++ b/tests/queries/0_stateless/01682_cache_dictionary_complex_key.sql
@@ -0,0 +1,97 @@
+DROP DATABASE IF EXISTS 01682_database_for_cache_dictionary;
+CREATE DATABASE 01682_database_for_cache_dictionary;
+
+CREATE TABLE 01682_database_for_cache_dictionary.complex_key_simple_attributes_source_table
+(
+   id UInt64,
+   id_key String,
+   value_first String,
+   value_second String
+)
+ENGINE = TinyLog;
+
+INSERT INTO 01682_database_for_cache_dictionary.complex_key_simple_attributes_source_table VALUES(0, 'id_key_0', 'value_0', 'value_second_0');
+INSERT INTO 01682_database_for_cache_dictionary.complex_key_simple_attributes_source_table VALUES(1, 'id_key_1', 'value_1', 'value_second_1');
+INSERT INTO 01682_database_for_cache_dictionary.complex_key_simple_attributes_source_table VALUES(2, 'id_key_2', 'value_2', 'value_second_2');
+
+CREATE DICTIONARY 01682_database_for_cache_dictionary.cache_dictionary_complex_key_simple_attributes
+(
+   id UInt64,
+   id_key String,
+   value_first String DEFAULT 'value_first_default',
+   value_second String DEFAULT 'value_second_default'
+)
+PRIMARY KEY id, id_key
+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'complex_key_simple_attributes_source_table' DB '01682_database_for_cache_dictionary'))
+LIFETIME(MIN 1 MAX 1000)
+LAYOUT(COMPLEX_KEY_CACHE(SIZE_IN_CELLS 10));
+
+SELECT 'Dictionary cache_dictionary_complex_key_simple_attributes';
+SELECT 'dictGet existing value';
+SELECT dictGet('01682_database_for_cache_dictionary.cache_dictionary_complex_key_simple_attributes', 'value_first', (number, concat('id_key_', toString(number)))) as value_first,
+    dictGet('01682_database_for_cache_dictionary.cache_dictionary_complex_key_simple_attributes', 'value_second', (number, concat('id_key_', toString(number)))) as value_second FROM system.numbers LIMIT 3;
+SELECT 'dictGet with non existing value';
+SELECT dictGet('01682_database_for_cache_dictionary.cache_dictionary_complex_key_simple_attributes', 'value_first', (number, concat('id_key_', toString(number)))) as value_first,
+    dictGet('01682_database_for_cache_dictionary.cache_dictionary_complex_key_simple_attributes', 'value_second', (number, concat('id_key_', toString(number)))) as value_second FROM system.numbers LIMIT 4;
+SELECT 'dictGetOrDefault existing value';
+SELECT dictGetOrDefault('01682_database_for_cache_dictionary.cache_dictionary_complex_key_simple_attributes', 'value_first', (number, concat('id_key_', toString(number))), toString('default')) as value_first,
+    dictGetOrDefault('01682_database_for_cache_dictionary.cache_dictionary_complex_key_simple_attributes', 'value_second', (number, concat('id_key_', toString(number))), toString('default')) as value_second FROM system.numbers LIMIT 3;
+SELECT 'dictGetOrDefault non existing value';
+SELECT dictGetOrDefault('01682_database_for_cache_dictionary.cache_dictionary_complex_key_simple_attributes', 'value_first', (number, concat('id_key_', toString(number))), toString('default')) as value_first,
+    dictGetOrDefault('01682_database_for_cache_dictionary.cache_dictionary_complex_key_simple_attributes', 'value_second', (number, concat('id_key_', toString(number))), toString('default')) as value_second FROM system.numbers LIMIT 4;
+SELECT 'dictHas';
+SELECT dictHas('01682_database_for_cache_dictionary.cache_dictionary_complex_key_simple_attributes', (number, concat('id_key_', toString(number)))) FROM system.numbers LIMIT 4;
+SELECT 'select all values as input stream';
+SELECT * FROM 01682_database_for_cache_dictionary.cache_dictionary_complex_key_simple_attributes;
+
+DROP DICTIONARY 01682_database_for_cache_dictionary.cache_dictionary_complex_key_simple_attributes;
+DROP TABLE 01682_database_for_cache_dictionary.complex_key_simple_attributes_source_table;
+
+CREATE TABLE 01682_database_for_cache_dictionary.complex_key_complex_attributes_source_table
+(
+   id UInt64,
+   id_key String,
+   value_first String,
+   value_second Nullable(String)
+)
+ENGINE = TinyLog;
+
+INSERT INTO 01682_database_for_cache_dictionary.complex_key_complex_attributes_source_table VALUES(0, 'id_key_0', 'value_0', 'value_second_0');
+INSERT INTO 01682_database_for_cache_dictionary.complex_key_complex_attributes_source_table VALUES(1, 'id_key_1', 'value_1', NULL);
+INSERT INTO 01682_database_for_cache_dictionary.complex_key_complex_attributes_source_table VALUES(2, 'id_key_2', 'value_2', 'value_second_2');
+
+CREATE DICTIONARY 01682_database_for_cache_dictionary.cache_dictionary_complex_key_complex_attributes
+(
+    id UInt64,
+    id_key String,
+
+    value_first String DEFAULT 'value_first_default',
+    value_second Nullable(String) DEFAULT 'value_second_default'
+)
+PRIMARY KEY id, id_key
+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'complex_key_complex_attributes_source_table' DB '01682_database_for_cache_dictionary'))
+LIFETIME(MIN 1 MAX 1000)
+LAYOUT(COMPLEX_KEY_CACHE(SIZE_IN_CELLS 10));
+
+SELECT 'Dictionary cache_dictionary_complex_key_complex_attributes';
+SELECT 'dictGet existing value';
+SELECT dictGet('01682_database_for_cache_dictionary.cache_dictionary_complex_key_complex_attributes', 'value_first', (number, concat('id_key_', toString(number)))) as value_first,
+    dictGet('01682_database_for_cache_dictionary.cache_dictionary_complex_key_complex_attributes', 'value_second', (number, concat('id_key_', toString(number)))) as value_second FROM system.numbers LIMIT 3;
+SELECT 'dictGet with non existing value';
+SELECT dictGet('01682_database_for_cache_dictionary.cache_dictionary_complex_key_complex_attributes', 'value_first', (number, concat('id_key_', toString(number)))) as value_first,
+    dictGet('01682_database_for_cache_dictionary.cache_dictionary_complex_key_complex_attributes', 'value_second', (number, concat('id_key_', toString(number)))) as value_second FROM system.numbers LIMIT 4;
+SELECT 'dictGetOrDefault existing value';
+SELECT dictGetOrDefault('01682_database_for_cache_dictionary.cache_dictionary_complex_key_complex_attributes', 'value_first', (number, concat('id_key_', toString(number))), toString('default')) as value_first,
+    dictGetOrDefault('01682_database_for_cache_dictionary.cache_dictionary_complex_key_complex_attributes', 'value_second', (number, concat('id_key_', toString(number))), toString('default')) as value_second FROM system.numbers LIMIT 3;
+SELECT 'dictGetOrDefault non existing value';
+SELECT dictGetOrDefault('01682_database_for_cache_dictionary.cache_dictionary_complex_key_complex_attributes', 'value_first', (number, concat('id_key_', toString(number))), toString('default')) as value_first,
+    dictGetOrDefault('01682_database_for_cache_dictionary.cache_dictionary_complex_key_complex_attributes', 'value_second', (number, concat('id_key_', toString(number))), toString('default')) as value_second FROM system.numbers LIMIT 4;
+SELECT 'dictHas';
+SELECT dictHas('01682_database_for_cache_dictionary.cache_dictionary_complex_key_complex_attributes', (number, concat('id_key_', toString(number)))) FROM system.numbers LIMIT 4;
+SELECT 'select all values as input stream';
+SELECT * FROM 01682_database_for_cache_dictionary.cache_dictionary_complex_key_complex_attributes;
+
+DROP DICTIONARY 01682_database_for_cache_dictionary.cache_dictionary_complex_key_complex_attributes;
+DROP TABLE 01682_database_for_cache_dictionary.complex_key_complex_attributes_source_table;
+
+DROP DATABASE 01682_database_for_cache_dictionary;
diff --git a/tests/queries/0_stateless/01683_flat_dictionary.reference b/tests/queries/0_stateless/01683_flat_dictionary.reference
new file mode 100644
index 000000000000..b2a24a017381
--- /dev/null
+++ b/tests/queries/0_stateless/01683_flat_dictionary.reference
@@ -0,0 +1,58 @@
+Dictionary flat_dictionary_simple_key_simple_attributes
+dictGet existing value
+value_0	value_second_0
+value_1	value_second_1
+value_2	value_second_2
+dictGet with non existing value
+value_0	value_second_0
+value_1	value_second_1
+value_2	value_second_2
+value_first_default	value_second_default
+dictGetOrDefault existing value
+value_0	value_second_0
+value_1	value_second_1
+value_2	value_second_2
+dictGetOrDefault non existing value
+value_0	value_second_0
+value_1	value_second_1
+value_2	value_second_2
+default	default
+dictHas
+1
+1
+1
+0
+Dictionary flat_dictionary_simple_key_complex_attributes
+dictGet existing value
+value_0	value_second_0
+value_1	\N
+value_2	value_second_2
+dictGet with non existing value
+value_0	value_second_0
+value_1	\N
+value_2	value_second_2
+value_first_default	value_second_default
+dictGetOrDefault existing value
+value_0	value_second_0
+value_1	\N
+value_2	value_second_2
+dictGetOrDefault non existing value
+value_0	value_second_0
+value_1	\N
+value_2	value_second_2
+default	default
+dictHas
+1
+1
+1
+0
+Dictionary flat_dictionary_simple_key_hierarchy
+dictGet
+0
+0
+1
+1
+2
+dictGetHierarchy
+[1]
+[4,2,1]
diff --git a/tests/queries/0_stateless/01683_flat_dictionary.sql b/tests/queries/0_stateless/01683_flat_dictionary.sql
new file mode 100644
index 000000000000..c9f864c6a168
--- /dev/null
+++ b/tests/queries/0_stateless/01683_flat_dictionary.sql
@@ -0,0 +1,119 @@
+DROP DATABASE IF EXISTS 01681_database_for_flat_dictionary;
+CREATE DATABASE 01681_database_for_flat_dictionary;
+
+CREATE TABLE 01681_database_for_flat_dictionary.simple_key_simple_attributes_source_table
+(
+   id UInt64,
+   value_first String,
+   value_second String
+)
+ENGINE = TinyLog;
+
+INSERT INTO 01681_database_for_flat_dictionary.simple_key_simple_attributes_source_table VALUES(0, 'value_0', 'value_second_0');
+INSERT INTO 01681_database_for_flat_dictionary.simple_key_simple_attributes_source_table VALUES(1, 'value_1', 'value_second_1');
+INSERT INTO 01681_database_for_flat_dictionary.simple_key_simple_attributes_source_table VALUES(2, 'value_2', 'value_second_2');
+
+CREATE DICTIONARY 01681_database_for_flat_dictionary.flat_dictionary_simple_key_simple_attributes
+(
+   id UInt64,
+   value_first String DEFAULT 'value_first_default',
+   value_second String DEFAULT 'value_second_default'
+)
+PRIMARY KEY id
+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'simple_key_simple_attributes_source_table'))
+LIFETIME(MIN 1 MAX 1000)
+LAYOUT(FLAT());
+
+SELECT 'Dictionary flat_dictionary_simple_key_simple_attributes';
+SELECT 'dictGet existing value';
+SELECT dictGet('01681_database_for_flat_dictionary.flat_dictionary_simple_key_simple_attributes', 'value_first', number) as value_first,
+    dictGet('01681_database_for_flat_dictionary.flat_dictionary_simple_key_simple_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 3;
+SELECT 'dictGet with non existing value';
+SELECT dictGet('01681_database_for_flat_dictionary.flat_dictionary_simple_key_simple_attributes', 'value_first', number) as value_first,
+    dictGet('01681_database_for_flat_dictionary.flat_dictionary_simple_key_simple_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 4;
+SELECT 'dictGetOrDefault existing value';
+SELECT dictGetOrDefault('01681_database_for_flat_dictionary.flat_dictionary_simple_key_simple_attributes', 'value_first', number, toString('default')) as value_first,
+    dictGetOrDefault('01681_database_for_flat_dictionary.flat_dictionary_simple_key_simple_attributes', 'value_second', number, toString('default')) as value_second FROM system.numbers LIMIT 3;
+SELECT 'dictGetOrDefault non existing value';
+SELECT dictGetOrDefault('01681_database_for_flat_dictionary.flat_dictionary_simple_key_simple_attributes', 'value_first', number, toString('default')) as value_first,
+    dictGetOrDefault('01681_database_for_flat_dictionary.flat_dictionary_simple_key_simple_attributes', 'value_second', number, toString('default')) as value_second FROM system.numbers LIMIT 4;
+SELECT 'dictHas';
+SELECT dictHas('01681_database_for_flat_dictionary.flat_dictionary_simple_key_simple_attributes', number) FROM system.numbers LIMIT 4;
+
+DROP DICTIONARY 01681_database_for_flat_dictionary.flat_dictionary_simple_key_simple_attributes;
+DROP TABLE 01681_database_for_flat_dictionary.simple_key_simple_attributes_source_table;
+
+CREATE TABLE 01681_database_for_flat_dictionary.simple_key_complex_attributes_source_table
+(
+   id UInt64,
+   value_first String,
+   value_second Nullable(String)
+)
+ENGINE = TinyLog;
+
+INSERT INTO 01681_database_for_flat_dictionary.simple_key_complex_attributes_source_table VALUES(0, 'value_0', 'value_second_0');
+INSERT INTO 01681_database_for_flat_dictionary.simple_key_complex_attributes_source_table VALUES(1, 'value_1', NULL);
+INSERT INTO 01681_database_for_flat_dictionary.simple_key_complex_attributes_source_table VALUES(2, 'value_2', 'value_second_2');
+
+CREATE DICTIONARY 01681_database_for_flat_dictionary.flat_dictionary_simple_key_complex_attributes
+(
+   id UInt64,
+   value_first String DEFAULT 'value_first_default',
+   value_second Nullable(String) DEFAULT 'value_second_default'
+)
+PRIMARY KEY id
+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'simple_key_complex_attributes_source_table'))
+LIFETIME(MIN 1 MAX 1000)
+LAYOUT(FLAT());
+
+SELECT 'Dictionary flat_dictionary_simple_key_complex_attributes';
+SELECT 'dictGet existing value';
+SELECT dictGet('01681_database_for_flat_dictionary.flat_dictionary_simple_key_complex_attributes', 'value_first', number) as value_first,
+    dictGet('01681_database_for_flat_dictionary.flat_dictionary_simple_key_complex_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 3;
+SELECT 'dictGet with non existing value';
+SELECT dictGet('01681_database_for_flat_dictionary.flat_dictionary_simple_key_complex_attributes', 'value_first', number) as value_first,
+    dictGet('01681_database_for_flat_dictionary.flat_dictionary_simple_key_complex_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 4;
+SELECT 'dictGetOrDefault existing value';
+SELECT dictGetOrDefault('01681_database_for_flat_dictionary.flat_dictionary_simple_key_complex_attributes', 'value_first', number, toString('default')) as value_first,
+    dictGetOrDefault('01681_database_for_flat_dictionary.flat_dictionary_simple_key_complex_attributes', 'value_second', number, toString('default')) as value_second FROM system.numbers LIMIT 3;
+SELECT 'dictGetOrDefault non existing value';
+SELECT dictGetOrDefault('01681_database_for_flat_dictionary.flat_dictionary_simple_key_complex_attributes', 'value_first', number, toString('default')) as value_first,
+    dictGetOrDefault('01681_database_for_flat_dictionary.flat_dictionary_simple_key_complex_attributes', 'value_second', number, toString('default')) as value_second FROM system.numbers LIMIT 4;
+SELECT 'dictHas';
+SELECT dictHas('01681_database_for_flat_dictionary.flat_dictionary_simple_key_complex_attributes', number) FROM system.numbers LIMIT 4;
+
+DROP DICTIONARY 01681_database_for_flat_dictionary.flat_dictionary_simple_key_complex_attributes;
+DROP TABLE 01681_database_for_flat_dictionary.simple_key_complex_attributes_source_table;
+
+CREATE TABLE 01681_database_for_flat_dictionary.simple_key_hierarchy_table
+(
+    id UInt64,
+    parent_id UInt64
+) ENGINE = TinyLog();
+
+INSERT INTO 01681_database_for_flat_dictionary.simple_key_hierarchy_table VALUES (1, 0);
+INSERT INTO 01681_database_for_flat_dictionary.simple_key_hierarchy_table VALUES (2, 1);
+INSERT INTO 01681_database_for_flat_dictionary.simple_key_hierarchy_table VALUES (3, 1);
+INSERT INTO 01681_database_for_flat_dictionary.simple_key_hierarchy_table VALUES (4, 2);
+
+CREATE DICTIONARY 01681_database_for_flat_dictionary.flat_dictionary_simple_key_hierarchy
+(
+   id UInt64,
+   parent_id UInt64 HIERARCHICAL
+)
+PRIMARY KEY id
+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'simple_key_hierarchy_table'))
+LIFETIME(MIN 1 MAX 1000)
+LAYOUT(FLAT());
+
+SELECT 'Dictionary flat_dictionary_simple_key_hierarchy';
+SELECT 'dictGet';
+SELECT dictGet('01681_database_for_flat_dictionary.flat_dictionary_simple_key_hierarchy', 'parent_id', number) FROM system.numbers LIMIT 5;
+SELECT 'dictGetHierarchy';
+SELECT dictGetHierarchy('01681_database_for_flat_dictionary.flat_dictionary_simple_key_hierarchy', toUInt64(1));
+SELECT dictGetHierarchy('01681_database_for_flat_dictionary.flat_dictionary_simple_key_hierarchy', toUInt64(4));
+
+DROP DICTIONARY 01681_database_for_flat_dictionary.flat_dictionary_simple_key_hierarchy;
+DROP TABLE 01681_database_for_flat_dictionary.simple_key_hierarchy_table;
+
+DROP DATABASE 01681_database_for_flat_dictionary;
diff --git a/tests/queries/0_stateless/01684_ssd_cache_dictionary_simple_key.reference b/tests/queries/0_stateless/01684_ssd_cache_dictionary_simple_key.reference
new file mode 100644
index 000000000000..b3258e36f745
--- /dev/null
+++ b/tests/queries/0_stateless/01684_ssd_cache_dictionary_simple_key.reference
@@ -0,0 +1,66 @@
+Dictionary cache_dictionary_simple_key_simple_attributes
+dictGet existing value
+value_0	value_second_0
+value_1	value_second_1
+value_2	value_second_2
+dictGet with non existing value
+value_0	value_second_0
+value_1	value_second_1
+value_2	value_second_2
+value_first_default	value_second_default
+dictGetOrDefault existing value
+value_0	value_second_0
+value_1	value_second_1
+value_2	value_second_2
+dictGetOrDefault non existing value
+value_0	value_second_0
+value_1	value_second_1
+value_2	value_second_2
+default	default
+dictHas
+1
+1
+1
+0
+select all values as input stream
+0	value_0	value_second_0
+1	value_1	value_second_1
+2	value_2	value_second_2
+Dictionary cache_dictionary_simple_key_complex_attributes
+dictGet existing value
+value_0	value_second_0
+value_1	\N
+value_2	value_second_2
+dictGet with non existing value
+value_0	value_second_0
+value_1	\N
+value_2	value_second_2
+value_first_default	value_second_default
+dictGetOrDefault existing value
+value_0	value_second_0
+value_1	\N
+value_2	value_second_2
+dictGetOrDefault non existing value
+value_0	value_second_0
+value_1	\N
+value_2	value_second_2
+default	default
+dictHas
+1
+1
+1
+0
+select all values as input stream
+0	value_0	value_second_0
+1	value_1	\N
+2	value_2	value_second_2
+Dictionary cache_dictionary_simple_key_hierarchy
+dictGet
+0
+0
+1
+1
+2
+dictGetHierarchy
+[1]
+[4,2,1]
diff --git a/tests/queries/0_stateless/01684_ssd_cache_dictionary_simple_key.sql b/tests/queries/0_stateless/01684_ssd_cache_dictionary_simple_key.sql
new file mode 100644
index 000000000000..3b327257fc4f
--- /dev/null
+++ b/tests/queries/0_stateless/01684_ssd_cache_dictionary_simple_key.sql
@@ -0,0 +1,123 @@
+DROP DATABASE IF EXISTS 01684_database_for_cache_dictionary;
+CREATE DATABASE 01684_database_for_cache_dictionary;
+
+CREATE TABLE 01684_database_for_cache_dictionary.simple_key_simple_attributes_source_table
+(
+   id UInt64,
+   value_first String,
+   value_second String
+)
+ENGINE = TinyLog;
+
+INSERT INTO 01684_database_for_cache_dictionary.simple_key_simple_attributes_source_table VALUES(0, 'value_0', 'value_second_0');
+INSERT INTO 01684_database_for_cache_dictionary.simple_key_simple_attributes_source_table VALUES(1, 'value_1', 'value_second_1');
+INSERT INTO 01684_database_for_cache_dictionary.simple_key_simple_attributes_source_table VALUES(2, 'value_2', 'value_second_2');
+
+CREATE DICTIONARY 01684_database_for_cache_dictionary.cache_dictionary_simple_key_simple_attributes
+(
+   id UInt64,
+   value_first String DEFAULT 'value_first_default',
+   value_second String DEFAULT 'value_second_default'
+)
+PRIMARY KEY id
+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'simple_key_simple_attributes_source_table'))
+LIFETIME(MIN 1 MAX 1000)
+LAYOUT(SSD_CACHE(BLOCK_SIZE 4096 FILE_SIZE 8192 PATH '/var/lib/clickhouse/clickhouse_dicts/0d'));
+
+SELECT 'Dictionary cache_dictionary_simple_key_simple_attributes';
+SELECT 'dictGet existing value';
+SELECT dictGet('01684_database_for_cache_dictionary.cache_dictionary_simple_key_simple_attributes', 'value_first', number) as value_first,
+    dictGet('01684_database_for_cache_dictionary.cache_dictionary_simple_key_simple_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 3;
+SELECT 'dictGet with non existing value';
+SELECT dictGet('01684_database_for_cache_dictionary.cache_dictionary_simple_key_simple_attributes', 'value_first', number) as value_first,
+    dictGet('01684_database_for_cache_dictionary.cache_dictionary_simple_key_simple_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 4;
+SELECT 'dictGetOrDefault existing value';
+SELECT dictGetOrDefault('01684_database_for_cache_dictionary.cache_dictionary_simple_key_simple_attributes', 'value_first', number, toString('default')) as value_first,
+    dictGetOrDefault('01684_database_for_cache_dictionary.cache_dictionary_simple_key_simple_attributes', 'value_second', number, toString('default')) as value_second FROM system.numbers LIMIT 3;
+SELECT 'dictGetOrDefault non existing value';
+SELECT dictGetOrDefault('01684_database_for_cache_dictionary.cache_dictionary_simple_key_simple_attributes', 'value_first', number, toString('default')) as value_first,
+    dictGetOrDefault('01684_database_for_cache_dictionary.cache_dictionary_simple_key_simple_attributes', 'value_second', number, toString('default')) as value_second FROM system.numbers LIMIT 4;
+SELECT 'dictHas';
+SELECT dictHas('01684_database_for_cache_dictionary.cache_dictionary_simple_key_simple_attributes', number) FROM system.numbers LIMIT 4;
+SELECT 'select all values as input stream';
+SELECT * FROM 01684_database_for_cache_dictionary.cache_dictionary_simple_key_simple_attributes;
+
+DROP DICTIONARY 01684_database_for_cache_dictionary.cache_dictionary_simple_key_simple_attributes;
+DROP TABLE 01684_database_for_cache_dictionary.simple_key_simple_attributes_source_table;
+
+CREATE TABLE 01684_database_for_cache_dictionary.simple_key_complex_attributes_source_table
+(
+   id UInt64,
+   value_first String,
+   value_second Nullable(String)
+)
+ENGINE = TinyLog;
+
+INSERT INTO 01684_database_for_cache_dictionary.simple_key_complex_attributes_source_table VALUES(0, 'value_0', 'value_second_0');
+INSERT INTO 01684_database_for_cache_dictionary.simple_key_complex_attributes_source_table VALUES(1, 'value_1', NULL);
+INSERT INTO 01684_database_for_cache_dictionary.simple_key_complex_attributes_source_table VALUES(2, 'value_2', 'value_second_2');
+
+CREATE DICTIONARY 01684_database_for_cache_dictionary.cache_dictionary_simple_key_complex_attributes
+(
+   id UInt64,
+   value_first String DEFAULT 'value_first_default',
+   value_second Nullable(String) DEFAULT 'value_second_default'
+)
+PRIMARY KEY id
+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'simple_key_complex_attributes_source_table'))
+LIFETIME(MIN 1 MAX 1000)
+LAYOUT(SSD_CACHE(BLOCK_SIZE 4096 FILE_SIZE 8192 PATH '/var/lib/clickhouse/clickhouse_dicts/1d'));
+
+SELECT 'Dictionary cache_dictionary_simple_key_complex_attributes';
+SELECT 'dictGet existing value';
+SELECT dictGet('01684_database_for_cache_dictionary.cache_dictionary_simple_key_complex_attributes', 'value_first', number) as value_first,
+    dictGet('01684_database_for_cache_dictionary.cache_dictionary_simple_key_complex_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 3;
+SELECT 'dictGet with non existing value';
+SELECT dictGet('01684_database_for_cache_dictionary.cache_dictionary_simple_key_complex_attributes', 'value_first', number) as value_first,
+    dictGet('01684_database_for_cache_dictionary.cache_dictionary_simple_key_complex_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 4;
+SELECT 'dictGetOrDefault existing value';
+SELECT dictGetOrDefault('01684_database_for_cache_dictionary.cache_dictionary_simple_key_complex_attributes', 'value_first', number, toString('default')) as value_first,
+    dictGetOrDefault('01684_database_for_cache_dictionary.cache_dictionary_simple_key_complex_attributes', 'value_second', number, toString('default')) as value_second FROM system.numbers LIMIT 3;
+SELECT 'dictGetOrDefault non existing value';
+SELECT dictGetOrDefault('01684_database_for_cache_dictionary.cache_dictionary_simple_key_complex_attributes', 'value_first', number, toString('default')) as value_first,
+    dictGetOrDefault('01684_database_for_cache_dictionary.cache_dictionary_simple_key_complex_attributes', 'value_second', number, toString('default')) as value_second FROM system.numbers LIMIT 4;
+SELECT 'dictHas';
+SELECT dictHas('01684_database_for_cache_dictionary.cache_dictionary_simple_key_complex_attributes', number) FROM system.numbers LIMIT 4;
+SELECT 'select all values as input stream';
+SELECT * FROM 01684_database_for_cache_dictionary.cache_dictionary_simple_key_complex_attributes;
+
+DROP DICTIONARY 01684_database_for_cache_dictionary.cache_dictionary_simple_key_complex_attributes;
+DROP TABLE 01684_database_for_cache_dictionary.simple_key_complex_attributes_source_table;
+
+CREATE TABLE 01684_database_for_cache_dictionary.simple_key_hierarchy_table
+(
+    id UInt64,
+    parent_id UInt64
+) ENGINE = TinyLog();
+
+INSERT INTO 01684_database_for_cache_dictionary.simple_key_hierarchy_table VALUES (1, 0);
+INSERT INTO 01684_database_for_cache_dictionary.simple_key_hierarchy_table VALUES (2, 1);
+INSERT INTO 01684_database_for_cache_dictionary.simple_key_hierarchy_table VALUES (3, 1);
+INSERT INTO 01684_database_for_cache_dictionary.simple_key_hierarchy_table VALUES (4, 2);
+
+CREATE DICTIONARY 01684_database_for_cache_dictionary.cache_dictionary_simple_key_hierarchy
+(
+   id UInt64,
+   parent_id UInt64 HIERARCHICAL
+)
+PRIMARY KEY id
+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'simple_key_hierarchy_table'))
+LIFETIME(MIN 1 MAX 1000)
+LAYOUT(SSD_CACHE(BLOCK_SIZE 4096 FILE_SIZE 8192 PATH '/var/lib/clickhouse/clickhouse_dicts/2d'));
+
+SELECT 'Dictionary cache_dictionary_simple_key_hierarchy';
+SELECT 'dictGet';
+SELECT dictGet('01684_database_for_cache_dictionary.cache_dictionary_simple_key_hierarchy', 'parent_id', number) FROM system.numbers LIMIT 5;
+SELECT 'dictGetHierarchy';
+SELECT dictGetHierarchy('01684_database_for_cache_dictionary.cache_dictionary_simple_key_hierarchy', toUInt64(1));
+SELECT dictGetHierarchy('01684_database_for_cache_dictionary.cache_dictionary_simple_key_hierarchy', toUInt64(4));
+
+DROP DICTIONARY 01684_database_for_cache_dictionary.cache_dictionary_simple_key_hierarchy;
+DROP TABLE 01684_database_for_cache_dictionary.simple_key_hierarchy_table;
+
+DROP DATABASE 01684_database_for_cache_dictionary;
diff --git a/tests/queries/0_stateless/01685_ssd_cache_dictionary_complex_key.reference b/tests/queries/0_stateless/01685_ssd_cache_dictionary_complex_key.reference
new file mode 100644
index 000000000000..a0f99ca13cc9
--- /dev/null
+++ b/tests/queries/0_stateless/01685_ssd_cache_dictionary_complex_key.reference
@@ -0,0 +1,56 @@
+Dictionary cache_dictionary_complex_key_simple_attributes
+dictGet existing value
+value_0	value_second_0
+value_1	value_second_1
+value_2	value_second_2
+dictGet with non existing value
+value_0	value_second_0
+value_1	value_second_1
+value_2	value_second_2
+value_first_default	value_second_default
+dictGetOrDefault existing value
+value_0	value_second_0
+value_1	value_second_1
+value_2	value_second_2
+dictGetOrDefault non existing value
+value_0	value_second_0
+value_1	value_second_1
+value_2	value_second_2
+default	default
+dictHas
+1
+1
+1
+0
+select all values as input stream
+0	id_key_0	value_0	value_second_0
+1	id_key_1	value_1	value_second_1
+2	id_key_2	value_2	value_second_2
+Dictionary cache_dictionary_complex_key_complex_attributes
+dictGet existing value
+value_0	value_second_0
+value_1	\N
+value_2	value_second_2
+dictGet with non existing value
+value_0	value_second_0
+value_1	\N
+value_2	value_second_2
+value_first_default	value_second_default
+dictGetOrDefault existing value
+value_0	value_second_0
+value_1	\N
+value_2	value_second_2
+dictGetOrDefault non existing value
+value_0	value_second_0
+value_1	\N
+value_2	value_second_2
+default	default
+dictHas
+1
+1
+1
+0
+select all values as input stream
+0	id_key_0	value_0	value_second_0
+1	id_key_1	value_1	\N
+2	id_key_2	value_2	value_second_2
diff --git a/tests/queries/0_stateless/01685_ssd_cache_dictionary_complex_key.sql b/tests/queries/0_stateless/01685_ssd_cache_dictionary_complex_key.sql
new file mode 100644
index 000000000000..1757b136d3ed
--- /dev/null
+++ b/tests/queries/0_stateless/01685_ssd_cache_dictionary_complex_key.sql
@@ -0,0 +1,98 @@
+DROP DATABASE IF EXISTS 01685_database_for_cache_dictionary;
+CREATE DATABASE 01685_database_for_cache_dictionary;
+
+CREATE TABLE 01685_database_for_cache_dictionary.complex_key_simple_attributes_source_table
+(
+   id UInt64,
+   id_key String,
+   value_first String,
+   value_second String
+)
+ENGINE = TinyLog;
+
+INSERT INTO 01685_database_for_cache_dictionary.complex_key_simple_attributes_source_table VALUES(0, 'id_key_0', 'value_0', 'value_second_0');
+INSERT INTO 01685_database_for_cache_dictionary.complex_key_simple_attributes_source_table VALUES(1, 'id_key_1', 'value_1', 'value_second_1');
+INSERT INTO 01685_database_for_cache_dictionary.complex_key_simple_attributes_source_table VALUES(2, 'id_key_2', 'value_2', 'value_second_2');
+
+CREATE DICTIONARY 01685_database_for_cache_dictionary.cache_dictionary_complex_key_simple_attributes
+(
+   id UInt64,
+   id_key String,
+   value_first String DEFAULT 'value_first_default',
+   value_second String DEFAULT 'value_second_default'
+)
+PRIMARY KEY id, id_key
+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'complex_key_simple_attributes_source_table' DB '01685_database_for_cache_dictionary'))
+LIFETIME(MIN 1 MAX 1000)
+LAYOUT(COMPLEX_KEY_SSD_CACHE(BLOCK_SIZE 4096 FILE_SIZE 8192 PATH '/var/lib/clickhouse/clickhouse_dicts/0d'));
+
+SELECT 'Dictionary cache_dictionary_complex_key_simple_attributes';
+SELECT 'dictGet existing value';
+SELECT dictGet('01685_database_for_cache_dictionary.cache_dictionary_complex_key_simple_attributes', 'value_first', (number, concat('id_key_', toString(number)))) as value_first,
+    dictGet('01685_database_for_cache_dictionary.cache_dictionary_complex_key_simple_attributes', 'value_second', (number, concat('id_key_', toString(number)))) as value_second FROM system.numbers LIMIT 3;
+SELECT 'dictGet with non existing value';
+SELECT dictGet('01685_database_for_cache_dictionary.cache_dictionary_complex_key_simple_attributes', 'value_first', (number, concat('id_key_', toString(number)))) as value_first,
+    dictGet('01685_database_for_cache_dictionary.cache_dictionary_complex_key_simple_attributes', 'value_second', (number, concat('id_key_', toString(number)))) as value_second FROM system.numbers LIMIT 4;
+SELECT 'dictGetOrDefault existing value';
+SELECT dictGetOrDefault('01685_database_for_cache_dictionary.cache_dictionary_complex_key_simple_attributes', 'value_first', (number, concat('id_key_', toString(number))), toString('default')) as value_first,
+    dictGetOrDefault('01685_database_for_cache_dictionary.cache_dictionary_complex_key_simple_attributes', 'value_second', (number, concat('id_key_', toString(number))), toString('default')) as value_second FROM system.numbers LIMIT 3;
+SELECT 'dictGetOrDefault non existing value';
+SELECT dictGetOrDefault('01685_database_for_cache_dictionary.cache_dictionary_complex_key_simple_attributes', 'value_first', (number, concat('id_key_', toString(number))), toString('default')) as value_first,
+    dictGetOrDefault('01685_database_for_cache_dictionary.cache_dictionary_complex_key_simple_attributes', 'value_second', (number, concat('id_key_', toString(number))), toString('default')) as value_second FROM system.numbers LIMIT 4;
+SELECT 'dictHas';
+SELECT dictHas('01685_database_for_cache_dictionary.cache_dictionary_complex_key_simple_attributes', (number, concat('id_key_', toString(number)))) FROM system.numbers LIMIT 4;
+SELECT 'select all values as input stream';
+SELECT * FROM 01685_database_for_cache_dictionary.cache_dictionary_complex_key_simple_attributes;
+
+DROP DICTIONARY 01685_database_for_cache_dictionary.cache_dictionary_complex_key_simple_attributes;
+DROP TABLE 01685_database_for_cache_dictionary.complex_key_simple_attributes_source_table;
+
+CREATE TABLE 01685_database_for_cache_dictionary.complex_key_complex_attributes_source_table
+(
+   id UInt64,
+   id_key String,
+   value_first String,
+   value_second Nullable(String)
+)
+ENGINE = TinyLog;
+
+INSERT INTO 01685_database_for_cache_dictionary.complex_key_complex_attributes_source_table VALUES(0, 'id_key_0', 'value_0', 'value_second_0');
+INSERT INTO 01685_database_for_cache_dictionary.complex_key_complex_attributes_source_table VALUES(1, 'id_key_1', 'value_1', NULL);
+INSERT INTO 01685_database_for_cache_dictionary.complex_key_complex_attributes_source_table VALUES(2, 'id_key_2', 'value_2', 'value_second_2');
+
+CREATE DICTIONARY 01685_database_for_cache_dictionary.cache_dictionary_complex_key_complex_attributes
+(
+    id UInt64,
+    id_key String,
+
+    value_first String DEFAULT 'value_first_default',
+    value_second Nullable(String) DEFAULT 'value_second_default'
+)
+PRIMARY KEY id, id_key
+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'complex_key_complex_attributes_source_table' DB '01685_database_for_cache_dictionary'))
+LIFETIME(MIN 1 MAX 1000)
+LAYOUT(COMPLEX_KEY_SSD_CACHE(BLOCK_SIZE 4096 FILE_SIZE 8192 PATH '/var/lib/clickhouse/clickhouse_dicts/1d'));
+
+SELECT 'Dictionary cache_dictionary_complex_key_complex_attributes';
+SELECT 'dictGet existing value';
+SELECT dictGet('01685_database_for_cache_dictionary.cache_dictionary_complex_key_complex_attributes', 'value_first', (number, concat('id_key_', toString(number)))) as value_first,
+    dictGet('01685_database_for_cache_dictionary.cache_dictionary_complex_key_complex_attributes', 'value_second', (number, concat('id_key_', toString(number)))) as value_second FROM system.numbers LIMIT 3;
+SELECT 'dictGet with non existing value';
+SELECT dictGet('01685_database_for_cache_dictionary.cache_dictionary_complex_key_complex_attributes', 'value_first', (number, concat('id_key_', toString(number)))) as value_first,
+    dictGet('01685_database_for_cache_dictionary.cache_dictionary_complex_key_complex_attributes', 'value_second', (number, concat('id_key_', toString(number)))) as value_second FROM system.numbers LIMIT 4;
+SELECT 'dictGetOrDefault existing value';
+SELECT dictGetOrDefault('01685_database_for_cache_dictionary.cache_dictionary_complex_key_complex_attributes', 'value_first', (number, concat('id_key_', toString(number))), toString('default')) as value_first,
+    dictGetOrDefault('01685_database_for_cache_dictionary.cache_dictionary_complex_key_complex_attributes', 'value_second', (number, concat('id_key_', toString(number))), toString('default')) as value_second FROM system.numbers LIMIT 3;
+SELECT 'dictGetOrDefault non existing value';
+SELECT dictGetOrDefault('01685_database_for_cache_dictionary.cache_dictionary_complex_key_complex_attributes', 'value_first', (number, concat('id_key_', toString(number))), toString('default')) as value_first,
+    dictGetOrDefault('01685_database_for_cache_dictionary.cache_dictionary_complex_key_complex_attributes', 'value_second', (number, concat('id_key_', toString(number))), toString('default')) as value_second FROM system.numbers LIMIT 4;
+SELECT 'dictHas';
+SELECT dictHas('01685_database_for_cache_dictionary.cache_dictionary_complex_key_complex_attributes', (number, concat('id_key_', toString(number)))) FROM system.numbers LIMIT 4;
+SELECT 'select all values as input stream';
+SELECT * FROM 01685_database_for_cache_dictionary.cache_dictionary_complex_key_complex_attributes;
+
+DROP DICTIONARY 01685_database_for_cache_dictionary.cache_dictionary_complex_key_complex_attributes;
+DROP TABLE 01685_database_for_cache_dictionary.complex_key_complex_attributes_source_table;
+
+DROP DATABASE 01685_database_for_cache_dictionary;
+                                                                                                                                          
diff --git a/tests/queries/0_stateless/arcadia_skip_list.txt b/tests/queries/0_stateless/arcadia_skip_list.txt
index c1e991ff6b25..6926f16e0274 100644
--- a/tests/queries/0_stateless/arcadia_skip_list.txt
+++ b/tests/queries/0_stateless/arcadia_skip_list.txt
@@ -212,3 +212,9 @@
 01017_uniqCombined_memory_usage
 01747_join_view_filter_dictionary
 01748_dictionary_table_dot
+00950_dict_get,
+01683_flat_dictionary
+01681_cache_dictionary_simple_key
+01682_cache_dictionary_complex_key
+01684_ssd_cache_dictionary_simple_key
+01685_ssd_cache_dictionary_complex_key
diff --git a/tests/queries/skip_list.json b/tests/queries/skip_list.json
index 1200d8f54360..e14ea250b8d4 100644
--- a/tests/queries/skip_list.json
+++ b/tests/queries/skip_list.json
@@ -760,6 +760,12 @@
         "polygon_dicts", // they use an explicitly specified database
         "01658_read_file_to_stringcolumn",
         "01721_engine_file_truncate_on_insert", // It's ok to execute in parallel but not several instances of the same test.
-        "01748_dictionary_table_dot" // creates database
+        "01748_dictionary_table_dot", // creates database
+        "00950_dict_get",
+        "01683_flat_dictionary",
+        "01681_cache_dictionary_simple_key",
+        "01682_cache_dictionary_complex_key",
+        "01684_ssd_cache_dictionary_simple_key",
+        "01685_ssd_cache_dictionary_complex_key"
     ]
 }
