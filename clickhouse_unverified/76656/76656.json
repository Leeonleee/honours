{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 76656,
  "instance_id": "ClickHouse__ClickHouse-76656",
  "issue_numbers": [
    "72238",
    "75696"
  ],
  "base_commit": "28961a9697f55ad958e6bcdc38e50835dcbb1d56",
  "patch": "diff --git a/src/Analyzer/ConstantNode.cpp b/src/Analyzer/ConstantNode.cpp\nindex 3688a06edb29..12ed95c79c3e 100644\n--- a/src/Analyzer/ConstantNode.cpp\n+++ b/src/Analyzer/ConstantNode.cpp\n@@ -232,6 +232,9 @@ ASTPtr ConstantNode::toASTImpl(const ConvertToASTOptions & options) const\n         return makeASTFunction(\"_CAST\", std::move(constant_value_ast), std::move(constant_type_name_ast));\n     }\n \n+    if (isBool(constant_value_type))\n+        constant_value_ast->custom_type = constant_value_type;\n+\n     return constant_value_ast;\n }\n \ndiff --git a/src/Analyzer/QueryTreeBuilder.cpp b/src/Analyzer/QueryTreeBuilder.cpp\nindex 49f709e88e1f..7e284e7780ca 100644\n--- a/src/Analyzer/QueryTreeBuilder.cpp\n+++ b/src/Analyzer/QueryTreeBuilder.cpp\n@@ -619,8 +619,10 @@ QueryTreeNodePtr QueryTreeBuilder::buildExpression(const ASTPtr & expression, co\n     }\n     else if (const auto * ast_literal = expression->as<ASTLiteral>())\n     {\n-        if (context->getSettingsRef()[Setting::allow_experimental_variant_type] && context->getSettingsRef()[Setting::use_variant_as_common_type])\n-            result = std::make_shared<ConstantNode>(ast_literal->value, applyVisitor(FieldToDataType<LeastSupertypeOnError::Variant>(), ast_literal->value));\n+        if (ast_literal->custom_type)\n+            result = std::make_shared<ConstantNode>(ast_literal->value, ast_literal->custom_type);\n+        else if (context->getSettingsRef()[Setting::allow_experimental_variant_type] && context->getSettingsRef()[Setting::use_variant_as_common_type])\n+            result = std::make_shared<ConstantNode>(ast_literal->value, ast_literal->custom_type ? ast_literal->custom_type : applyVisitor(FieldToDataType<LeastSupertypeOnError::Variant>(), ast_literal->value));\n         else\n             result = std::make_shared<ConstantNode>(ast_literal->value);\n     }\ndiff --git a/src/Parsers/ASTLiteral.cpp b/src/Parsers/ASTLiteral.cpp\nindex 9f8dfe1dea19..b71c75492991 100644\n--- a/src/Parsers/ASTLiteral.cpp\n+++ b/src/Parsers/ASTLiteral.cpp\n@@ -1,6 +1,7 @@\n #include <Common/SipHash.h>\n #include <Common/FieldVisitorToString.h>\n #include <Common/FieldVisitorHash.h>\n+#include <DataTypes/IDataType.h>\n #include <Parsers/ASTLiteral.h>\n #include <IO/WriteHelpers.h>\n #include <IO/WriteBufferFromString.h>\n@@ -152,7 +153,9 @@ String FieldVisitorToStringPostgreSQL::operator() (const String & x) const\n \n void ASTLiteral::formatImplWithoutAlias(WriteBuffer & ostr, const FormatSettings & settings, IAST::FormatState &, IAST::FormatStateStacked) const\n {\n-    if (settings.literal_escaping_style == LiteralEscapingStyle::Regular)\n+    if (custom_type && isBool(custom_type) && isInt64OrUInt64FieldType(value.getType()))\n+        ostr << applyVisitor(FieldVisitorToString(), Field(value.safeGet<UInt64>() != 0));\n+    else if (settings.literal_escaping_style == LiteralEscapingStyle::Regular)\n         ostr << applyVisitor(FieldVisitorToString(), value);\n     else\n         ostr << applyVisitor(FieldVisitorToStringPostgreSQL(), value);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03360_bool_remote.reference b/tests/queries/0_stateless/03360_bool_remote.reference\nnew file mode 100644\nindex 000000000000..b979d62f4fa8\n--- /dev/null\n+++ b/tests/queries/0_stateless/03360_bool_remote.reference\n@@ -0,0 +1,3 @@\n+true\n+true\n+true\ndiff --git a/tests/queries/0_stateless/03360_bool_remote.sql b/tests/queries/0_stateless/03360_bool_remote.sql\nnew file mode 100644\nindex 000000000000..69c9b6da2ce6\n--- /dev/null\n+++ b/tests/queries/0_stateless/03360_bool_remote.sql\n@@ -0,0 +1,3 @@\n+SELECT true AS x FROM remote('127.0.0.{1,2}', system.one) LIMIT 1;\n+SELECT materialize(true) AS x FROM remote('127.0.0.{1,2}', system.one) LIMIT 1;\n+SELECT true AS x FROM remote('127.0.0.{1,2}', system.one) GROUP BY x;\n",
  "problem_statement": "`NOT_FOUND_COLUMN_IN_BLOCK` around bool representation (distributed query + new analyzer)\n**Describe what's wrong**\r\n\r\nUsing ClickHouse 24.10.1.2812 (and earlier versions too) with:\r\n\r\n```\r\nSETTINGS\r\n  allow_experimental_analyzer=1,\r\n  max_parallel_replicas=2,\r\n  allow_experimental_parallel_reading_from_replicas=1,\r\n  parallel_replicas_for_non_replicated_merge_tree=1,\r\n  cluster_for_parallel_replicas = 'local_cluster';\r\n```\r\n\r\nAnd a distributed table, even if there is a single replica.\r\n\r\nAny query that groups on a boolean expression using `True` or `False` will fails with `NOT_FOUND_COLUMN_IN_BLOCK`:\r\n\r\n```sql\r\nSELECT True AS expr FROM any_distributed_table GROUP BY expr\r\n```\r\n\r\nError:\r\n\r\n```\r\nCannot find column `_CAST(true_Bool, 'Bool'_String)` in source stream, there are only columns: [_CAST(1_Bool, 'Bool'_String)]. (THERE_IS_NO_COLUMN)\r\n```\r\n\r\nEither:\r\n- disabling parallel replicas\r\n- disabling experimental analyzer\r\n- use 0 or 1 instead of False or True\r\n\r\nWill fix the error.\r\n\nBool literals may break distributed queries\n```sql\n:) SELECT materialize(true) as x FROM re2.t LIMIT 1 SETTINGS max_parallel_replicas = 2, allow_experimental_parallel_reading_from_replicas = 1, cluster_for_parallel_replicas='both'\n\nSELECT materialize(true) AS x\nFROM re2.t\nLIMIT 1\nSETTINGS max_parallel_replicas = 2, allow_experimental_parallel_reading_from_replicas = 1, cluster_for_parallel_replicas = 'both'\n\nQuery id: cdac03e2-7472-4399-8d5d-5d4b54688dd4\n\n\nElapsed: 0.007 sec. \n\nReceived exception from server (version 25.2.1):\nCode: 8. DB::Exception: Received from localhost:9000. DB::Exception: Cannot find column `materialize(1_Bool)` in source stream, there are only columns: [materialize(1_UInt8)]. (THERE_IS_NO_COLUMN)\n```\n",
  "hints_text": "similar to https://github.com/ClickHouse/ClickHouse/issues/75696\nt reproduces without parallel replicas\n```\nSELECT materialize(true) as x from remote('127.0.0.{1,2}', system.one) limit 1\n\nSELECT materialize(true) AS x\nFROM remote('127.0.0.{1,2}', system.one)\nLIMIT 1\n\nQuery id: 0881554d-8c3f-486b-b4a5-517023b5cf89\n\n\nElapsed: 0.003 sec. \n\nReceived exception from server (version 25.2.1):\nCode: 8. DB::Exception: Received from localhost:9000. DB::Exception: Cannot find column `materialize(1_Bool)` in source stream, there are only columns: [materialize(1_UInt8)]. (THERE_IS_NO_COLUMN)\n```\nThe repro is even simpler:\n\n```sql\nSELECT true AS x\nFROM remote('127.0.0.{1,2}', system.one)\nLIMIT 1;\n```\n\nIt seems like we handled the `Bool` data type incorrectly during execution name calculation for `ConstantNode`.\nIt happens because `_CAST(true, 'Bool')` expression constant folds into constant `UInt64_1` with type `Bool`. The constant folding always happens on the follower node, which leads to different execution names for constants. \n\nAs a workaround, you can use `1` and `0` instead of `true` and `false` right now.\n\nOptions to fix the issue:\n1. Change the behavior of `FieldVisitorToString`:\nhttps://github.com/ClickHouse/ClickHouse/blob/58d1f5d49e2db154c65022d025f21d6456f23033/src/Common/FieldVisitorToString.cpp#L108\n2. Change the behavior of `_CAST` function.\n\nseems another instance of this bug:\nhttps://github.com/ClickHouse/ClickHouse/issues/72238",
  "created_at": "2025-02-23T17:46:52Z"
}