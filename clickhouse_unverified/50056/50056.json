{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 50056,
  "instance_id": "ClickHouse__ClickHouse-50056",
  "issue_numbers": [
    "50039"
  ],
  "base_commit": "27e12fb5c95df7386eaec6cf816bd6ff609fa073",
  "patch": "diff --git a/src/Functions/FunctionsComparison.h b/src/Functions/FunctionsComparison.h\nindex 2b9298bd7e87..a9c8bbaa183f 100644\n--- a/src/Functions/FunctionsComparison.h\n+++ b/src/Functions/FunctionsComparison.h\n@@ -591,7 +591,7 @@ template <> struct CompileOp<NotEqualsOp>\n {\n     static llvm::Value * compile(llvm::IRBuilder<> & b, llvm::Value * x, llvm::Value * y, bool /*is_signed*/)\n     {\n-        return x->getType()->isIntegerTy() ? b.CreateICmpNE(x, y) : b.CreateFCmpONE(x, y);\n+        return x->getType()->isIntegerTy() ? b.CreateICmpNE(x, y) : b.CreateFCmpUNE(x, y);\n     }\n };\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02763_jit_compare_functions_nan.reference b/tests/queries/0_stateless/02763_jit_compare_functions_nan.reference\nnew file mode 100644\nindex 000000000000..0fc42c1b7126\n--- /dev/null\n+++ b/tests/queries/0_stateless/02763_jit_compare_functions_nan.reference\n@@ -0,0 +1,7 @@\n+--\n+0\n+0\n+0\n+0\n+0\n+0\ndiff --git a/tests/queries/0_stateless/02763_jit_compare_functions_nan.sql b/tests/queries/0_stateless/02763_jit_compare_functions_nan.sql\nnew file mode 100644\nindex 000000000000..61d165139d68\n--- /dev/null\n+++ b/tests/queries/0_stateless/02763_jit_compare_functions_nan.sql\n@@ -0,0 +1,25 @@\n+SET compile_expressions = 1;\n+SET min_count_to_compile_expression = 0;\n+\n+DROP TABLE IF EXISTS test_table_1;\n+DROP TABLE IF EXISTS test_table_2;\n+\n+CREATE TABLE test_table_1 (id UInt32) ENGINE = MergeTree ORDER BY (id);\n+create table test_table_2 (id UInt32) ENGINE = MergeTree ORDER BY (id);\n+INSERT INTO test_table_1 VALUES (2);\n+INSERT INTO test_table_2 VALUES (2);\n+\n+select t1.id, t2.id FROM test_table_1 AS t1 RIGHT JOIN test_table_2 AS t2 ON (t1.id = t2.id)\n+WHERE (acos(t2.id) <> atan(t1.id)) and (not (acos(t2.id) <> atan(t1.id)));\n+\n+DROP TABLE test_table_1;\n+DROP TABLE test_table_2;\n+\n+SELECT '--';\n+\n+SELECT (acos(a) <> atan(b)) and (not (acos(a) <> atan(b))) r FROM (SELECT 2 a, 2 b);\n+SELECT (acos(a) <> atan(b)) and (not (acos(a) <> atan(b))) r FROM (SELECT 2 a, 2 b);\n+SELECT (acos(a) <> atan(b)) and (not (acos(a) <> atan(b))) r FROM (SELECT 2 a, 2 b);\n+SELECT (acos(a) <> atan(b)) and (not (acos(a) <> atan(b))) r FROM (SELECT 2 a, 2 b);\n+SELECT (acos(a) <> atan(b)) and (not (acos(a) <> atan(b))) r FROM (SELECT 2 a, 2 b);\n+SELECT (acos(a) <> atan(b)) and (not (acos(a) <> atan(b))) r FROM (SELECT 2 a, 2 b);\n",
  "problem_statement": "Wrong result of the boolean expression with JIT (`compile_expressions`) while comparing NaNs\n**Describe what's wrong**\r\n\r\nThe SELECT statement with contradictory WHERE conditions should return empty results. However, it outputs one row.\r\n\r\n**Does it reproduce on recent release?**\r\n\r\nIt can be reproduced in the latest version.\r\n\r\n**How to reproduce**\r\n\r\nVersion: 23.5.1.1 (commit 30464b939781e3aa0897acf9a38839760a2282f8)\r\n\r\n_Set up database_\r\n\r\n```sql\r\ncreate table t3 (pkey UInt32, primary key(pkey)) engine = MergeTree;\r\ncreate table t5 (pkey UInt32, primary key(pkey)) engine = MergeTree;\r\ninsert into t3 (pkey) values (2);\r\ninsert into t5 (pkey) values (2);\r\n```\r\n\r\n_bug-triggering query_\r\n\r\n```sql\r\nselect *\r\nfrom\r\n  t5 as ref_0\r\n    RIGHT join t3 as ref_3\r\n    on (ref_0.pkey = ref_3.pkey)\r\nwhere (acos(ref_3.pkey) <> atan(ref_0.pkey)) and\r\n      (not (acos(ref_3.pkey) <> atan(ref_0.pkey)));\r\n```\r\n\r\n**Expected behavior**\r\n\r\nThe query must output empty because the conditions `acos(ref_3.pkey) <> atan(ref_0.pkey)` and `not (acos(ref_3.pkey) <> atan(ref_0.pkey))` are contradictory. \r\n\r\n**Actual behavior**\r\n\r\nIt outputs one row\r\n```\r\n\u250c\u2500pkey\u2500\u252c\u2500ref_3.pkey\u2500\u2510\r\n\u2502    2 \u2502          2 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.003 sec.\r\n```\r\n\r\n**Additional context**\r\n\r\nThe earliest reproducible version is 21.7 in [fiddle](https://fiddle.clickhouse.com/)..\r\n\r\n\r\n\r\n\n",
  "hints_text": "I cannot reproduce\r\n\r\nhttps://fiddle.clickhouse.com/70a6853f-e22f-42ef-a998-456f8039e411\r\n\r\n```\r\ncurl https://clickhouse.com/ | sh\r\n\r\n./clickhouse local -mn\r\n\r\nClickHouse local version 23.5.1.1684 (official build).\r\n\r\n:) create table t3 (pkey UInt32, primary key(pkey)) engine = MergeTree;\r\ncreate table t5 (pkey UInt32, primary key(pkey)) engine = MergeTree;\r\ninsert into t3 (pkey) values (2);\r\ninsert into t5 (pkey) values (2);\r\n\r\n\r\nSELECT *\r\nFROM t5 AS ref_0\r\nRIGHT JOIN t3 AS ref_3 ON ref_0.pkey = ref_3.pkey\r\nWHERE (acos(ref_3.pkey) != atan(ref_0.pkey)) AND (NOT (acos(ref_3.pkey) != atan(ref_0.pkey)))\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.002 sec.\r\n\r\nSELECT *\r\nFROM t5 AS ref_0\r\nRIGHT JOIN t3 AS ref_3 ON ref_0.pkey = ref_3.pkey\r\nWHERE (acos(ref_3.pkey) != atan(ref_0.pkey)) AND (NOT (acos(ref_3.pkey) != atan(ref_0.pkey)))\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.001 sec.\r\n```\r\n\n@den-crane I also cannot reproduce it in fiddle. But I can reproduce it on my local machine. Perhaps this bug is involved by the recent commits? Here are the commands I used to build ClickHouse:\r\n```\r\ngit clone --recursive --shallow-submodules https://github.com/ClickHouse/ClickHouse.git\r\ncd ClickHouse\r\nmkdir build\r\ncmake -S . -B build\r\ncmake --build build\r\n```\nAnd the weird thing is, at the first several time, the query output an empty result. But after several tries, the results become incorrect:\r\n```\r\nroot@24ad407b8aea:~/re# clickhouse client -d testdb\r\nClickHouse client version 23.5.1.1.\r\nConnecting to database testdb at localhost:9000 as user default.\r\nConnected to ClickHouse server version 23.5.1 revision 54462.\r\n\r\n24ad407b8aea :) select *\r\nfrom\r\n  t5 as ref_0\r\n    RIGHT join t3 as ref_3\r\n    on (ref_0.pkey = ref_3.pkey)\r\nwhere (acos(ref_3.pkey) <> atan(ref_0.pkey)) and\r\n      (not (acos(ref_3.pkey) <> atan(ref_0.pkey)));\r\n\r\nSELECT *\r\nFROM t5 AS ref_0\r\nRIGHT JOIN t3 AS ref_3 ON ref_0.pkey = ref_3.pkey\r\nWHERE (acos(ref_3.pkey) != atan(ref_0.pkey)) AND (NOT (acos(ref_3.pkey) != atan(ref_0.pkey)))\r\n\r\nQuery id: f710826c-94d7-402c-a183-b8dc68f4ddb4\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.003 sec. \r\n\r\n24ad407b8aea :) select *\r\nfrom\r\n  t5 as ref_0\r\n    RIGHT join t3 as ref_3\r\n    on (ref_0.pkey = ref_3.pkey)\r\nwhere (acos(ref_3.pkey) <> atan(ref_0.pkey)) and\r\n      (not (acos(ref_3.pkey) <> atan(ref_0.pkey)));\r\n\r\nSELECT *\r\nFROM t5 AS ref_0\r\nRIGHT JOIN t3 AS ref_3 ON ref_0.pkey = ref_3.pkey\r\nWHERE (acos(ref_3.pkey) != atan(ref_0.pkey)) AND (NOT (acos(ref_3.pkey) != atan(ref_0.pkey)))\r\n\r\nQuery id: dd94a852-c5d7-42a7-b92e-299d2e9f52cf\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.003 sec. \r\n\r\n24ad407b8aea :) select *\r\nfrom\r\n  t5 as ref_0\r\n    RIGHT join t3 as ref_3\r\n    on (ref_0.pkey = ref_3.pkey)\r\nwhere (acos(ref_3.pkey) <> atan(ref_0.pkey)) and\r\n      (not (acos(ref_3.pkey) <> atan(ref_0.pkey)));\r\n\r\nSELECT *\r\nFROM t5 AS ref_0\r\nRIGHT JOIN t3 AS ref_3 ON ref_0.pkey = ref_3.pkey\r\nWHERE (acos(ref_3.pkey) != atan(ref_0.pkey)) AND (NOT (acos(ref_3.pkey) != atan(ref_0.pkey)))\r\n\r\nQuery id: ec157025-d525-49d6-b99a-ae57cb8ad059\r\n\r\n\u250c\u2500pkey\u2500\u252c\u2500ref_3.pkey\u2500\u2510\r\n\u2502    2 \u2502          2 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.020 sec.\r\n```\nright, seems the bug in compile_expressions\r\n\r\nhttps://fiddle.clickhouse.com/c8391cfe-c557-4af3-8f73-4d816e20ed3b\r\n\r\n\nhttps://fiddle.clickhouse.com/25f9d591-5bd8-46d0-ad62-1f01a2a07c04\r\nsimpler example:\r\n\r\n```\r\nselect (acos(a) <> atan(b)) and  (not (acos(a) <> atan(b))) r from (select 2 a, 2 b);\r\nselect (acos(a) <> atan(b)) and  (not (acos(a) <> atan(b))) r from (select 2 a, 2 b);\r\nselect (acos(a) <> atan(b)) and  (not (acos(a) <> atan(b))) r from (select 2 a, 2 b);\r\nselect (acos(a) <> atan(b)) and  (not (acos(a) <> atan(b))) r from (select 2 a, 2 b);\r\nselect (acos(a) <> atan(b)) and  (not (acos(a) <> atan(b))) r from (select 2 a, 2 b);\r\nselect (acos(a) <> atan(b)) and  (not (acos(a) <> atan(b))) r from (select 2 a, 2 b);\r\n\r\n0\r\n0\r\n0\r\n1\r\n1\r\n1\r\n```\r\n\r\n```\r\nset compile_expressions = 0;\r\n\r\nselect (acos(a) <> atan(b)) and  (not (acos(a) <> atan(b))) r from (select 2 a, 2 b);\r\nselect (acos(a) <> atan(b)) and  (not (acos(a) <> atan(b))) r from (select 2 a, 2 b);\r\nselect (acos(a) <> atan(b)) and  (not (acos(a) <> atan(b))) r from (select 2 a, 2 b);\r\nselect (acos(a) <> atan(b)) and  (not (acos(a) <> atan(b))) r from (select 2 a, 2 b);\r\nselect (acos(a) <> atan(b)) and  (not (acos(a) <> atan(b))) r from (select 2 a, 2 b);\r\nselect (acos(a) <> atan(b)) and  (not (acos(a) <> atan(b))) r from (select 2 a, 2 b);\r\n\r\n0\r\n0\r\n0\r\n0\r\n0\r\n0\r\n\n@JZuming  Please rename the issue to `wrong result of the boolean expression with compile_expressions`\n@den-crane The issue is renamed now.",
  "created_at": "2023-05-21T17:39:50Z"
}