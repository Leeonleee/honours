{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 60546,
  "instance_id": "ClickHouse__ClickHouse-60546",
  "issue_numbers": [
    "59418"
  ],
  "base_commit": "0d2414c92e866d349850a47b22c541cc03714dd0",
  "patch": "diff --git a/src/Processors/QueryPlan/ReadFromSystemNumbersStep.cpp b/src/Processors/QueryPlan/ReadFromSystemNumbersStep.cpp\nindex c72c63d09c44..a294683c6404 100644\n--- a/src/Processors/QueryPlan/ReadFromSystemNumbersStep.cpp\n+++ b/src/Processors/QueryPlan/ReadFromSystemNumbersStep.cpp\n@@ -26,9 +26,11 @@ namespace\n class NumbersSource : public ISource\n {\n public:\n-    NumbersSource(UInt64 block_size_, UInt64 offset_, UInt64 step_)\n+    NumbersSource(UInt64 block_size_, UInt64 offset_, std::optional<UInt64> limit_, UInt64 step_)\n         : ISource(createHeader()), block_size(block_size_), next(offset_), step(step_)\n     {\n+        if (limit_.has_value())\n+            end = limit_.value() + offset_;\n     }\n \n     String getName() const override { return \"Numbers\"; }\n@@ -38,24 +40,32 @@ class NumbersSource : public ISource\n protected:\n     Chunk generate() override\n     {\n-        auto column = ColumnUInt64::create(block_size);\n+        UInt64 real_block_size = block_size;\n+        if (end.has_value())\n+        {\n+            if (end.value() <= next)\n+                return {};\n+            real_block_size = std::min(block_size, end.value() - next);\n+        }\n+        auto column = ColumnUInt64::create(real_block_size);\n         ColumnUInt64::Container & vec = column->getData();\n \n         UInt64 curr = next; /// The local variable for some reason works faster (>20%) than member of class.\n         UInt64 * pos = vec.data(); /// This also accelerates the code.\n-        UInt64 * end = &vec[block_size];\n-        iota(pos, static_cast<size_t>(end - pos), curr);\n+        UInt64 * end_ = &vec[real_block_size];\n+        iota(pos, static_cast<size_t>(end_ - pos), curr);\n \n         next += step;\n \n         progress(column->size(), column->byteSize());\n \n-        return {Columns{std::move(column)}, block_size};\n+        return {Columns{std::move(column)}, real_block_size};\n     }\n \n private:\n     UInt64 block_size;\n     UInt64 next;\n+    std::optional<UInt64> end; /// not included\n     UInt64 step;\n };\n \n@@ -478,7 +488,7 @@ Pipe ReadFromSystemNumbersStep::makePipe()\n     for (size_t i = 0; i < num_streams; ++i)\n     {\n         auto source\n-            = std::make_shared<NumbersSource>(max_block_size, numbers_storage.offset + i * max_block_size, num_streams * max_block_size);\n+            = std::make_shared<NumbersSource>(max_block_size, numbers_storage.offset + i * max_block_size, numbers_storage.limit, num_streams * max_block_size);\n \n         if (numbers_storage.limit && i == 0)\n         {\n",
  "test_patch": "diff --git a/tests/integration/test_storage_numbers/test.py b/tests/integration/test_storage_numbers/test.py\nindex 61fe8719ea2e..cbd7793fd8c5 100644\n--- a/tests/integration/test_storage_numbers/test.py\n+++ b/tests/integration/test_storage_numbers/test.py\n@@ -242,3 +242,19 @@ def test_overflow(started_cluster):\n     )\n     assert response == \"(18446744073709551614),(18446744073709551615),(0),(1),(2)\"\n     check_read_rows(\"test_overflow\", 5)\n+\n+\n+def test_non_number_filter(started_cluster):\n+    response = node.query(\n+        \"SELECT toString(number) as a FROM numbers(3) WHERE a = '1' FORMAT Values\",\n+        query_id=\"test_non_number_filter\",\n+    )\n+    assert response == \"('1')\"\n+    check_read_rows(\"test_non_number_filter\", 3)\n+\n+    response = node.query(\n+        \"SELECT toString(number) as a FROM numbers(1, 4) WHERE a = '1' FORMAT Values SETTINGS max_block_size = 3\",\n+        query_id=\"test_non_number_filter2\",\n+    )\n+    assert response == \"('1')\"\n+    check_read_rows(\"test_non_number_filter2\", 4)\n",
  "problem_statement": "numbers(xx) read more rows, than it was before\n**Describe the situation**\r\nJust not to forget.\r\nhttps://github.com/ClickHouse/ClickHouse/pull/50909#issuecomment-1869094989\r\n\r\n**How to reproduce**\r\nhttps://fiddle.clickhouse.com/87861a7b-30c4-45c2-862e-07cdfb63588d\r\n23.11\r\n```\r\n\t\"rows_before_limit_at_least\": 65409,\r\n\r\n\t\"statistics\":\r\n\t{\r\n\t\t\"elapsed\": 0.002581122,\r\n\t\t\"rows_read\": 65409,\r\n\t\t\"bytes_read\": 523272\r\n\t}\r\n```\r\nhttps://fiddle.clickhouse.com/29e9744f-0726-4f2c-97c7-4a8362eac102\r\n\r\n23.10\r\n```\r\n\t\"rows_before_limit_at_least\": 3,\r\n\r\n\t\"statistics\":\r\n\t{\r\n\t\t\"elapsed\": 0.002170152,\r\n\t\t\"rows_read\": 3,\r\n\t\t\"bytes_read\": 24\r\n\t}\r\n```\r\n\n",
  "hints_text": "We can simplify the query to \r\n```\r\nSELECT  toString(number) as a\r\n  FROM numbers(3)\r\n  WHERE a = '1' format JSON\r\n```",
  "created_at": "2024-02-29T11:26:41Z",
  "modified_files": [
    "src/Processors/QueryPlan/ReadFromSystemNumbersStep.cpp"
  ],
  "modified_test_files": [
    "tests/integration/test_storage_numbers/test.py"
  ]
}