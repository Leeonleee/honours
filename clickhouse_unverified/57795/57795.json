{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 57795,
  "instance_id": "ClickHouse__ClickHouse-57795",
  "issue_numbers": [
    "57686"
  ],
  "base_commit": "6567fb2c0881b087033264f4c551467a26d0c3aa",
  "patch": "diff --git a/src/AggregateFunctions/AggregateFunctionSumMap.cpp b/src/AggregateFunctions/AggregateFunctionSumMap.cpp\nindex 04bc908396a7..9f0873a6c9c4 100644\n--- a/src/AggregateFunctions/AggregateFunctionSumMap.cpp\n+++ b/src/AggregateFunctions/AggregateFunctionSumMap.cpp\n@@ -254,11 +254,20 @@ class AggregateFunctionMapBase : public IAggregateFunctionDataHelper<\n             if (it != merged_maps.end())\n             {\n                 for (size_t col = 0; col < values_types.size(); ++col)\n+                {\n                     if (!elem.second[col].isNull())\n-                        applyVisitor(Visitor(elem.second[col]), it->second[col]);\n+                    {\n+                        if (it->second[col].isNull())\n+                            it->second[col] = elem.second[col];\n+                        else\n+                            applyVisitor(Visitor(elem.second[col]), it->second[col]);\n+                    }\n+                }\n             }\n             else\n+            {\n                 merged_maps[elem.first] = elem.second;\n+            }\n         }\n     }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02480_max_map_null_totals.reference b/tests/queries/0_stateless/02480_max_map_null_totals.reference\nindex 5cc9b5a495f9..8fa02ad2a394 100644\n--- a/tests/queries/0_stateless/02480_max_map_null_totals.reference\n+++ b/tests/queries/0_stateless/02480_max_map_null_totals.reference\n@@ -1,119 +1,119 @@\n ([-1,0],[0,0])\n-([1,2],[0,2])\n ([0,1],[0,1])\n+([1,2],[0,2])\n \n-([-1,0,1,2],[0,0,0,2])\n+([-1,0,1,2],[0,0,1,2])\n ([-1,0],[0,0])\n-([1,2],[0,2])\n+([-1,0,1,2],[0,0,1,2])\n ([0,1],[0,1])\n-([-1,0,1,2],[0,0,0,2])\n-([-1,0],[0,0])\n ([1,2],[0,2])\n-([0,1],[0,1])\n-([-1,0,1,2],[0,0,0,2])\n ([-1,0],[0,0])\n+([-1,0,1,2],[0,0,1,2])\n+([0,1],[0,1])\n ([1,2],[0,2])\n+([-1,0],[0,0])\n ([0,1],[0,1])\n+([1,2],[0,2])\n \n-([-1,0,1,2],[0,0,0,2])\n+([-1,0,1,2],[0,0,1,2])\n ([-1,0],[0,0])\n-([1,2],[0,2])\n+([-1,0,1,2],[0,0,1,2])\n ([0,1],[0,1])\n-([-1,0,1,2],[0,0,0,2])\n-([-1,0],[0,0])\n ([1,2],[0,2])\n+([-1,0],[0,0])\n+([-1,0,1,2],[0,0,1,2])\n ([0,1],[0,1])\n-([-1,0,1,2],[0,0,0,2])\n+([1,2],[0,2])\n ([0],[0])\n-([2],[2])\n ([1],[1])\n+([2],[2])\n \n-([0,2],[0,2])\n+([0,1,2],[0,1,2])\n ([0],[0])\n-([2],[2])\n+([0,1,2],[0,1,2])\n ([1],[1])\n-([0,2],[0,2])\n-([0],[0])\n ([2],[2])\n+([0],[0])\n+([0,1,2],[0,1,2])\n ([1],[1])\n-([0,2],[0,2])\n+([2],[2])\n -\n ([-1,0],[0,0])\n-([1,2],[0,2])\n ([0,1],[0,1])\n+([1,2],[0,2])\n \n-([-1,0,1,2],[0,0,0,2])\n+([-1,0,1,2],[0,0,1,2])\n ([-1,0],[0,0])\n-([1,2],[0,2])\n+([-1,0,1,2],[0,0,1,2])\n ([0,1],[0,1])\n-([-1,0,1,2],[0,0,0,2])\n-([-1,0],[0,0])\n ([1,2],[0,2])\n-([0,1],[0,1])\n-([-1,0,1,2],[0,0,0,2])\n ([-1,0],[0,0])\n+([-1,0,1,2],[0,0,1,2])\n+([0,1],[0,1])\n ([1,2],[0,2])\n+([-1,0],[0,0])\n ([0,1],[0,1])\n+([1,2],[0,2])\n \n-([-1,0,1,2],[0,0,0,2])\n+([-1,0,1,2],[0,0,1,2])\n ([-1,0],[0,0])\n-([1,2],[0,2])\n+([-1,0,1,2],[0,0,1,2])\n ([0,1],[0,1])\n-([-1,0,1,2],[0,0,0,2])\n-([-1,0],[0,0])\n ([1,2],[0,2])\n+([-1,0],[0,0])\n+([-1,0,1,2],[0,0,1,2])\n ([0,1],[0,1])\n-([-1,0,1,2],[0,0,0,2])\n+([1,2],[0,2])\n ([0],[0])\n-([2],[2])\n ([1],[1])\n+([2],[2])\n \n-([0,2],[0,2])\n+([0,1,2],[0,1,2])\n ([0],[0])\n-([2],[2])\n+([0,1,2],[0,1,2])\n ([1],[1])\n-([0,2],[0,2])\n-([0],[0])\n ([2],[2])\n+([0],[0])\n+([0,1,2],[0,1,2])\n ([1],[1])\n-([0,2],[0,2])\n+([2],[2])\n -\n ([-1,0],[0,0])\n-([1,2],[0,2])\n ([0,1],[0,1])\n+([1,2],[0,2])\n \n-([-1,0,1,2],[0,0,0,2])\n+([-1,0,1,2],[0,0,1,2])\n ([-1,0],[0,0])\n-([1,2],[0,2])\n+([-1,0,1,2],[0,0,1,2])\n ([0,1],[0,1])\n-([-1,0,1,2],[0,0,0,2])\n-([-1,0],[0,0])\n ([1,2],[0,2])\n-([0,1],[0,1])\n-([-1,0,1,2],[0,0,0,2])\n ([-1,0],[0,0])\n+([-1,0,1,2],[0,0,1,2])\n+([0,1],[0,1])\n ([1,2],[0,2])\n+([-1,0],[0,0])\n ([0,1],[0,1])\n+([1,2],[0,2])\n \n-([-1,0,1,2],[0,0,0,2])\n+([-1,0,1,2],[0,0,1,2])\n ([-1,0],[0,0])\n-([1,2],[0,2])\n+([-1,0,1,2],[0,0,1,2])\n ([0,1],[0,1])\n-([-1,0,1,2],[0,0,0,2])\n-([-1,0],[0,0])\n ([1,2],[0,2])\n+([-1,0],[0,0])\n+([-1,0,1,2],[0,0,1,2])\n ([0,1],[0,1])\n-([-1,0,1,2],[0,0,0,2])\n+([1,2],[0,2])\n ([0],[0])\n-([2],[2])\n ([1],[1])\n+([2],[2])\n \n-([0,2],[0,2])\n+([0,1,2],[0,1,2])\n ([0],[0])\n-([2],[2])\n+([0,1,2],[0,1,2])\n ([1],[1])\n-([0,2],[0,2])\n-([0],[0])\n ([2],[2])\n+([0],[0])\n+([0,1,2],[0,1,2])\n ([1],[1])\n-([0,2],[0,2])\n+([2],[2])\ndiff --git a/tests/queries/0_stateless/02480_max_map_null_totals.sql b/tests/queries/0_stateless/02480_max_map_null_totals.sql\nindex 81e2a5c42437..2c970e25fd5c 100644\n--- a/tests/queries/0_stateless/02480_max_map_null_totals.sql\n+++ b/tests/queries/0_stateless/02480_max_map_null_totals.sql\n@@ -1,39 +1,39 @@\n-SELECT maxMap([number % 3, number % 4 - 1], [number, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS;\n-SELECT maxMap([number % 3, number % 4 - 1], [number, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP;\n-SELECT maxMap([number % 3, number % 4 - 1], [number, NULL]) FROM numbers(3) GROUP BY number WITH CUBE;\n+SELECT maxMap([number % 3, number % 4 - 1], [number, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number;\n+SELECT maxMap([number % 3, number % 4 - 1], [number, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number;\n+SELECT maxMap([number % 3, number % 4 - 1], [number, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number;\n \n-SELECT minMap([number % 3, number % 4 - 1], [number, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS;\n-SELECT minMap([number % 3, number % 4 - 1], [number, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP;\n-SELECT minMap([number % 3, number % 4 - 1], [number, NULL]) FROM numbers(3) GROUP BY number WITH CUBE;\n+SELECT minMap([number % 3, number % 4 - 1], [number, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number;\n+SELECT minMap([number % 3, number % 4 - 1], [number, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number;\n+SELECT minMap([number % 3, number % 4 - 1], [number, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number;\n \n-SELECT sumMap([number % 3, number % 4 - 1], [number, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS;\n-SELECT sumMap([number % 3, number % 4 - 1], [number, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP;\n-SELECT sumMap([number % 3, number % 4 - 1], [number, NULL]) FROM numbers(3) GROUP BY number WITH CUBE;\n+SELECT sumMap([number % 3, number % 4 - 1], [number, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number;\n+SELECT sumMap([number % 3, number % 4 - 1], [number, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number;\n+SELECT sumMap([number % 3, number % 4 - 1], [number, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number;\n \n SELECT '-';\n \n-SELECT maxMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS;\n-SELECT maxMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP;\n-SELECT maxMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH CUBE;\n+SELECT maxMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number;\n+SELECT maxMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number;\n+SELECT maxMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number;\n \n-SELECT minMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS;\n-SELECT minMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP;\n-SELECT minMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH CUBE;\n+SELECT minMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number;\n+SELECT minMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number;\n+SELECT minMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number;\n \n-SELECT sumMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS;\n-SELECT sumMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP;\n-SELECT sumMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH CUBE;\n+SELECT sumMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number;\n+SELECT sumMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number;\n+SELECT sumMap([number % 3, number % 4 - 1], [number :: Float64, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number;\n \n SELECT '-';\n \n-SELECT maxMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS;\n-SELECT maxMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP;\n-SELECT maxMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH CUBE;\n+SELECT maxMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number;\n+SELECT maxMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number;\n+SELECT maxMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number;\n \n-SELECT minMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS;\n-SELECT minMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP;\n-SELECT minMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH CUBE;\n+SELECT minMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number;\n+SELECT minMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number;\n+SELECT minMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number;\n \n-SELECT sumMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS;\n-SELECT sumMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP;\n-SELECT sumMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH CUBE;\n+SELECT sumMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH TOTALS ORDER BY number;\n+SELECT sumMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH ROLLUP ORDER BY number;\n+SELECT sumMap([number % 3, number % 4 - 1], [number :: UInt256, NULL]) FROM numbers(3) GROUP BY number WITH CUBE ORDER BY number;\n\\ No newline at end of file\n",
  "problem_statement": "Wrong value of `TOTALS` in function `maxMap`\n```sql\r\nSELECT maxMap([number % 3, (number % 4) - 1], [number, NULL])\r\nFROM numbers(3)\r\nGROUP BY number\r\n    WITH TOTALS\r\nORDER BY number ASC;\r\n```\r\n\r\n```\r\n\u250c\u2500maxMap(array(modulo(number, 3), minus(modulo(number, 4), 1)), array(number, NULL))\u2500\u2510\r\n\u2502 ([-1,0],[0,0])                                                                     \u2502\r\n\u2502 ([0,1],[0,1])                                                                      \u2502\r\n\u2502 ([1,2],[0,2])                                                                      \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nTotals:\r\n\u250c\u2500maxMap(array(modulo(number, 3), minus(modulo(number, 4), 1)), array(number, NULL))\u2500\u2510\r\n\u2502 ([-1,0,1,2],[0,0,0,2])                                                             \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nWe should have totals: `[-1,0,1,2],[0,0,1,2]` because we have value `1` for key `1` in the second row. This behaviour is reflected in test `02480_max_map_null_totals`, but it's wrong.\r\n\r\nHowever it works correctly with settings `group_by_two_level_threshold = 1, max_bytes_before_external_group_by = 1`:\r\n\r\n```sql\r\nSELECT maxMap([number % 3, (number % 4) - 1], [number, NULL])\r\nFROM numbers(3)\r\nGROUP BY number\r\n    WITH TOTALS\r\nORDER BY number ASC\r\nSETTINGS group_by_two_level_threshold = 1, max_bytes_before_external_group_by = 1;\r\n```\r\n\r\n```\r\n\u250c\u2500maxMap(array(modulo(number, 3), minus(modulo(number, 4), 1)), array(number, NULL))\u2500\u2510\r\n\u2502 ([-1,0],[0,0])                                                                     \u2502\r\n\u2502 ([0,1],[0,1])                                                                      \u2502\r\n\u2502 ([1,2],[0,2])                                                                      \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nTotals:\r\n\u250c\u2500maxMap(array(modulo(number, 3), minus(modulo(number, 4), 1)), array(number, NULL))\u2500\u2510\r\n\u2502 ([-1,0,1,2],[0,0,1,2])                                                             \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\n",
  "hints_text": "",
  "created_at": "2023-12-12T17:40:41Z",
  "modified_files": [
    "src/AggregateFunctions/AggregateFunctionSumMap.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/02480_max_map_null_totals.reference",
    "tests/queries/0_stateless/02480_max_map_null_totals.sql"
  ]
}