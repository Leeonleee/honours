{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 15321,
  "instance_id": "ClickHouse__ClickHouse-15321",
  "issue_numbers": [
    "15268"
  ],
  "base_commit": "5d8de1f65d8b3728847ae6a5ae5aca8f6f070c2e",
  "patch": "diff --git a/programs/client/Suggest.cpp b/programs/client/Suggest.cpp\nindex ac18a131c3ac..e85e7a21261f 100644\n--- a/programs/client/Suggest.cpp\n+++ b/programs/client/Suggest.cpp\n@@ -80,7 +80,7 @@ Suggest::Suggest()\n              \"WITH\",         \"TOTALS\",   \"HAVING\", \"ORDER\",     \"COLLATE\",  \"LIMIT\",       \"UNION\",    \"AND\",         \"OR\",      \"ASC\",\n              \"IN\",           \"KILL\",     \"QUERY\",  \"SYNC\",      \"ASYNC\",    \"TEST\",        \"BETWEEN\",  \"TRUNCATE\",    \"USER\",    \"ROLE\",\n              \"PROFILE\",      \"QUOTA\",    \"POLICY\", \"ROW\",       \"GRANT\",    \"REVOKE\",      \"OPTION\",   \"ADMIN\",       \"EXCEPT\",  \"REPLACE\",\n-             \"IDENTIFIED\",   \"HOST\",     \"NAME\",   \"READONLY\",  \"WRITABLE\", \"PERMISSIVE\",  \"FOR\",      \"RESTRICTIVE\", \"FOR\",     \"RANDOMIZED\",\n+             \"IDENTIFIED\",   \"HOST\",     \"NAME\",   \"READONLY\",  \"WRITABLE\", \"PERMISSIVE\",  \"FOR\",      \"RESTRICTIVE\", \"RANDOMIZED\",\n              \"INTERVAL\",     \"LIMITS\",   \"ONLY\",   \"TRACKING\",  \"IP\",       \"REGEXP\",      \"ILIKE\"};\n }\n \ndiff --git a/programs/format/CMakeLists.txt b/programs/format/CMakeLists.txt\nindex ab06708cd3a8..49f17ef163f8 100644\n--- a/programs/format/CMakeLists.txt\n+++ b/programs/format/CMakeLists.txt\n@@ -5,6 +5,9 @@ set (CLICKHOUSE_FORMAT_LINK\n         boost::program_options\n         clickhouse_common_io\n         clickhouse_parsers\n+        clickhouse_functions\n+        clickhouse_aggregate_functions\n+        clickhouse_table_functions\n         dbms\n )\n \ndiff --git a/programs/format/Format.cpp b/programs/format/Format.cpp\nindex daf2d6715682..01f952bf95ee 100644\n--- a/programs/format/Format.cpp\n+++ b/programs/format/Format.cpp\n@@ -1,13 +1,29 @@\n #include <iostream>\n+#include <string_view>\n+#include <functional>\n #include <boost/program_options.hpp>\n \n #include <IO/ReadBufferFromFileDescriptor.h>\n #include <IO/ReadHelpers.h>\n+#include <IO/WriteBufferFromFileDescriptor.h>\n #include <Parsers/ParserQuery.h>\n #include <Parsers/parseQuery.h>\n #include <Parsers/formatAST.h>\n+#include <Parsers/obfuscateQueries.h>\n #include <Common/TerminalSize.h>\n \n+#include <Interpreters/Context.h>\n+#include <Functions/FunctionFactory.h>\n+#include <Functions/registerFunctions.h>\n+#include <AggregateFunctions/AggregateFunctionFactory.h>\n+#include <AggregateFunctions/registerAggregateFunctions.h>\n+#include <TableFunctions/TableFunctionFactory.h>\n+#include <TableFunctions/registerTableFunctions.h>\n+#include <Storages/StorageFactory.h>\n+#include <Storages/registerStorages.h>\n+#include <DataTypes/DataTypeFactory.h>\n+\n+\n #pragma GCC diagnostic ignored \"-Wunused-function\"\n #pragma GCC diagnostic ignored \"-Wmissing-declarations\"\n \n@@ -22,6 +38,8 @@ int mainEntryClickHouseFormat(int argc, char ** argv)\n         (\"oneline\", \"format in single line\")\n         (\"quiet,q\", \"just check syntax, no output on success\")\n         (\"multiquery,n\", \"allow multiple queries in the same file\")\n+        (\"obfuscate\", \"obfuscate instead of formatting\")\n+        (\"seed\", po::value<std::string>(), \"seed (arbitrary string) that determines the result of obfuscation\")\n     ;\n \n     boost::program_options::variables_map options;\n@@ -40,10 +58,17 @@ int mainEntryClickHouseFormat(int argc, char ** argv)\n         bool oneline = options.count(\"oneline\");\n         bool quiet = options.count(\"quiet\");\n         bool multiple = options.count(\"multiquery\");\n+        bool obfuscate = options.count(\"obfuscate\");\n+\n+        if (quiet && (hilite || oneline || obfuscate))\n+        {\n+            std::cerr << \"Options 'hilite' or 'oneline' or 'obfuscate' have no sense in 'quiet' mode.\" << std::endl;\n+            return 2;\n+        }\n \n-        if (quiet && (hilite || oneline))\n+        if (obfuscate && (hilite || oneline || quiet))\n         {\n-            std::cerr << \"Options 'hilite' or 'oneline' have no sense in 'quiet' mode.\" << std::endl;\n+            std::cerr << \"Options 'hilite' or 'oneline' or 'quiet' have no sense in 'obfuscate' mode.\" << std::endl;\n             return 2;\n         }\n \n@@ -51,21 +76,66 @@ int mainEntryClickHouseFormat(int argc, char ** argv)\n         ReadBufferFromFileDescriptor in(STDIN_FILENO);\n         readStringUntilEOF(query, in);\n \n-        const char * pos = query.data();\n-        const char * end = pos + query.size();\n-\n-        ParserQuery parser(end);\n-        do\n+        if (obfuscate)\n         {\n-            ASTPtr res = parseQueryAndMovePosition(parser, pos, end, \"query\", multiple, 0, DBMS_DEFAULT_MAX_PARSER_DEPTH);\n-            if (!quiet)\n+            WordMap obfuscated_words_map;\n+            WordSet used_nouns;\n+            SipHash hash_func;\n+\n+            if (options.count(\"seed\"))\n             {\n-                formatAST(*res, std::cout, hilite, oneline);\n-                if (multiple)\n-                    std::cout << \"\\n;\\n\";\n-                std::cout << std::endl;\n+                std::string seed;\n+                hash_func.update(options[\"seed\"].as<std::string>());\n             }\n-        } while (multiple && pos != end);\n+\n+            SharedContextHolder shared_context = Context::createShared();\n+            Context context = Context::createGlobal(shared_context.get());\n+            context.makeGlobalContext();\n+\n+            registerFunctions();\n+            registerAggregateFunctions();\n+            registerTableFunctions();\n+            registerStorages();\n+\n+            std::unordered_set<std::string> additional_names;\n+\n+            auto all_known_storage_names = StorageFactory::instance().getAllRegisteredNames();\n+            auto all_known_data_type_names = DataTypeFactory::instance().getAllRegisteredNames();\n+\n+            additional_names.insert(all_known_storage_names.begin(), all_known_storage_names.end());\n+            additional_names.insert(all_known_data_type_names.begin(), all_known_data_type_names.end());\n+\n+            KnownIdentifierFunc is_known_identifier = [&](std::string_view name)\n+            {\n+                std::string what(name);\n+\n+                return FunctionFactory::instance().tryGet(what, context) != nullptr\n+                    || AggregateFunctionFactory::instance().isAggregateFunctionName(what)\n+                    || TableFunctionFactory::instance().isTableFunctionName(what)\n+                    || additional_names.count(what);\n+            };\n+\n+            WriteBufferFromFileDescriptor out(STDOUT_FILENO);\n+            obfuscateQueries(query, out, obfuscated_words_map, used_nouns, hash_func, is_known_identifier);\n+        }\n+        else\n+        {\n+            const char * pos = query.data();\n+            const char * end = pos + query.size();\n+\n+            ParserQuery parser(end);\n+            do\n+            {\n+                ASTPtr res = parseQueryAndMovePosition(parser, pos, end, \"query\", multiple, 0, DBMS_DEFAULT_MAX_PARSER_DEPTH);\n+                if (!quiet)\n+                {\n+                    formatAST(*res, std::cout, hilite, oneline);\n+                    if (multiple)\n+                        std::cout << \"\\n;\\n\";\n+                    std::cout << std::endl;\n+                }\n+            } while (multiple && pos != end);\n+        }\n     }\n     catch (...)\n     {\ndiff --git a/src/Common/BitHelpers.h b/src/Common/BitHelpers.h\nindex 699e379b8d36..e79daeba14ed 100644\n--- a/src/Common/BitHelpers.h\n+++ b/src/Common/BitHelpers.h\n@@ -1,22 +1,12 @@\n #pragma once\n \n #include <cstddef>\n+#include <cstdint>\n #include <cassert>\n #include <type_traits>\n #include <common/defines.h>\n \n \n-/** Returns log2 of number, rounded down.\n-  * Compiles to single 'bsr' instruction on x86.\n-  * For zero argument, result is unspecified.\n-  */\n-inline unsigned int bitScanReverse(unsigned int x)\n-{\n-    assert(x != 0);\n-    return sizeof(unsigned int) * 8 - 1 - __builtin_clz(x);\n-}\n-\n-\n /** For zero argument, result is zero.\n   * For arguments with most significand bit set, result is n.\n   * For other arguments, returns value, rounded up to power of two.\n@@ -41,10 +31,9 @@ inline size_t roundUpToPowerOfTwoOrZero(size_t n)\n \n \n template <typename T>\n-inline size_t getLeadingZeroBits(T x)\n+inline size_t getLeadingZeroBitsUnsafe(T x)\n {\n-    if (!x)\n-        return sizeof(x) * 8;\n+    assert(x != 0);\n \n     if constexpr (sizeof(T) <= sizeof(unsigned int))\n     {\n@@ -60,10 +49,32 @@ inline size_t getLeadingZeroBits(T x)\n     }\n }\n \n+\n+template <typename T>\n+inline size_t getLeadingZeroBits(T x)\n+{\n+    if (!x)\n+        return sizeof(x) * 8;\n+\n+    return getLeadingZeroBitsUnsafe(x);\n+}\n+\n+/** Returns log2 of number, rounded down.\n+  * Compiles to single 'bsr' instruction on x86.\n+  * For zero argument, result is unspecified.\n+  */\n+template <typename T>\n+inline uint32_t bitScanReverse(T x)\n+{\n+    return (std::max<size_t>(sizeof(T), sizeof(unsigned int))) * 8 - 1 - getLeadingZeroBitsUnsafe(x);\n+}\n+\n // Unsafe since __builtin_ctz()-family explicitly state that result is undefined on x == 0\n template <typename T>\n inline size_t getTrailingZeroBitsUnsafe(T x)\n {\n+    assert(x != 0);\n+\n     if constexpr (sizeof(T) <= sizeof(unsigned int))\n     {\n         return __builtin_ctz(x);\n@@ -88,8 +99,8 @@ inline size_t getTrailingZeroBits(T x)\n }\n \n /** Returns a mask that has '1' for `bits` LSB set:\n- * maskLowBits<UInt8>(3) => 00000111\n- */\n+  * maskLowBits<UInt8>(3) => 00000111\n+  */\n template <typename T>\n inline T maskLowBits(unsigned char bits)\n {\ndiff --git a/src/Common/StringUtils/StringUtils.h b/src/Common/StringUtils/StringUtils.h\nindex a1e8fb794359..904e3035dd8b 100644\n--- a/src/Common/StringUtils/StringUtils.h\n+++ b/src/Common/StringUtils/StringUtils.h\n@@ -67,10 +67,19 @@ inline bool isASCII(char c)\n     return static_cast<unsigned char>(c) < 0x80;\n }\n \n+inline bool isLowerAlphaASCII(char c)\n+{\n+    return (c >= 'a' && c <= 'z');\n+}\n+\n+inline bool isUpperAlphaASCII(char c)\n+{\n+    return (c >= 'A' && c <= 'Z');\n+}\n+\n inline bool isAlphaASCII(char c)\n {\n-    return (c >= 'a' && c <= 'z')\n-        || (c >= 'A' && c <= 'Z');\n+    return isLowerAlphaASCII(c) || isUpperAlphaASCII(c);\n }\n \n inline bool isNumericASCII(char c)\n@@ -122,6 +131,16 @@ inline bool isPrintableASCII(char c)\n     return uc >= 32 && uc <= 126;   /// 127 is ASCII DEL.\n }\n \n+inline bool isPunctuationASCII(char c)\n+{\n+    uint8_t uc = c;\n+    return (uc >= 33 && uc <= 47)\n+        || (uc >= 58 && uc <= 64)\n+        || (uc >= 91 && uc <= 96)\n+        || (uc >= 123 && uc <= 125);\n+}\n+\n+\n inline bool isValidIdentifier(const std::string_view & str)\n {\n     return !str.empty() && isValidIdentifierBegin(str[0]) && std::all_of(str.begin() + 1, str.end(), isWordCharASCII);\ndiff --git a/src/Parsers/obfuscateQueries.cpp b/src/Parsers/obfuscateQueries.cpp\nnew file mode 100644\nindex 000000000000..32382b70bd7c\n--- /dev/null\n+++ b/src/Parsers/obfuscateQueries.cpp\n@@ -0,0 +1,937 @@\n+#include <cassert>\n+\n+#include <Parsers/obfuscateQueries.h>\n+#include <Parsers/Lexer.h>\n+#include <Poco/String.h>\n+#include <Common/Exception.h>\n+#include <Common/StringUtils/StringUtils.h>\n+#include <Common/BitHelpers.h>\n+#include <IO/WriteHelpers.h>\n+#include <IO/WriteBuffer.h>\n+#include <IO/ReadHelpers.h>\n+#include <IO/ReadBufferFromMemory.h>\n+\n+\n+namespace DB\n+{\n+\n+namespace ErrorCodes\n+{\n+    extern const int TOO_MANY_TEMPORARY_COLUMNS;\n+}\n+\n+\n+namespace\n+{\n+\n+const std::unordered_set<std::string_view> keywords\n+{\n+    \"CREATE\",       \"DATABASE\", \"IF\",     \"NOT\",       \"EXISTS\",   \"TEMPORARY\",   \"TABLE\",    \"ON\",          \"CLUSTER\", \"DEFAULT\",\n+    \"MATERIALIZED\", \"ALIAS\",    \"ENGINE\", \"AS\",        \"VIEW\",     \"POPULATE\",    \"SETTINGS\", \"ATTACH\",      \"DETACH\",  \"DROP\",\n+    \"RENAME\",       \"TO\",       \"ALTER\",  \"ADD\",       \"MODIFY\",   \"CLEAR\",       \"COLUMN\",   \"AFTER\",       \"COPY\",    \"PROJECT\",\n+    \"PRIMARY\",      \"KEY\",      \"CHECK\",  \"PARTITION\", \"PART\",     \"FREEZE\",      \"FETCH\",    \"FROM\",        \"SHOW\",    \"INTO\",\n+    \"OUTFILE\",      \"FORMAT\",   \"TABLES\", \"DATABASES\", \"LIKE\",     \"PROCESSLIST\", \"CASE\",     \"WHEN\",        \"THEN\",    \"ELSE\",\n+    \"END\",          \"DESCRIBE\", \"DESC\",   \"USE\",       \"SET\",      \"OPTIMIZE\",    \"FINAL\",    \"DEDUPLICATE\", \"INSERT\",  \"VALUES\",\n+    \"SELECT\",       \"DISTINCT\", \"SAMPLE\", \"ARRAY\",     \"JOIN\",     \"GLOBAL\",      \"LOCAL\",    \"ANY\",         \"ALL\",     \"INNER\",\n+    \"LEFT\",         \"RIGHT\",    \"FULL\",   \"OUTER\",     \"CROSS\",    \"USING\",       \"PREWHERE\", \"WHERE\",       \"GROUP\",   \"BY\",\n+    \"WITH\",         \"TOTALS\",   \"HAVING\", \"ORDER\",     \"COLLATE\",  \"LIMIT\",       \"UNION\",    \"AND\",         \"OR\",      \"ASC\",\n+    \"IN\",           \"KILL\",     \"QUERY\",  \"SYNC\",      \"ASYNC\",    \"TEST\",        \"BETWEEN\",  \"TRUNCATE\",    \"USER\",    \"ROLE\",\n+    \"PROFILE\",      \"QUOTA\",    \"POLICY\", \"ROW\",       \"GRANT\",    \"REVOKE\",      \"OPTION\",   \"ADMIN\",       \"EXCEPT\",  \"REPLACE\",\n+    \"IDENTIFIED\",   \"HOST\",     \"NAME\",   \"READONLY\",  \"WRITABLE\", \"PERMISSIVE\",  \"FOR\",      \"RESTRICTIVE\", \"RANDOMIZED\",\n+    \"INTERVAL\",     \"LIMITS\",   \"ONLY\",   \"TRACKING\",  \"IP\",       \"REGEXP\",      \"ILIKE\",    \"DICTIONARY\"\n+};\n+\n+const std::unordered_set<std::string_view> keep_words\n+{\n+    \"id\", \"name\", \"value\", \"num\",\n+    \"Id\", \"Name\", \"Value\", \"Num\",\n+    \"ID\", \"NAME\", \"VALUE\", \"NUM\",\n+};\n+\n+/// The list of nouns collected from here: http://www.desiquintans.com/nounlist, Public domain.\n+std::initializer_list<std::string_view> nouns\n+{\n+\"aardvark\", \"abacus\", \"abbey\", \"abbreviation\", \"abdomen\", \"ability\", \"abnormality\", \"abolishment\", \"abortion\",\n+\"abrogation\", \"absence\", \"abundance\", \"abuse\", \"academics\", \"academy\", \"accelerant\", \"accelerator\", \"accent\", \"acceptance\", \"access\",\n+\"accessory\", \"accident\", \"accommodation\", \"accompanist\", \"accomplishment\", \"accord\", \"accordance\", \"accordion\", \"account\", \"accountability\",\n+\"accountant\", \"accounting\", \"accuracy\", \"accusation\", \"acetate\", \"achievement\", \"achiever\", \"acid\", \"acknowledgment\", \"acorn\", \"acoustics\",\n+\"acquaintance\", \"acquisition\", \"acre\", \"acrylic\", \"act\", \"action\", \"activation\", \"activist\", \"activity\", \"actor\", \"actress\", \"acupuncture\",\n+\"ad\", \"adaptation\", \"adapter\", \"addiction\", \"addition\", \"address\", \"adjective\", \"adjustment\", \"admin\", \"administration\", \"administrator\",\n+\"admire\", \"admission\", \"adobe\", \"adoption\", \"adrenalin\", \"adrenaline\", \"adult\", \"adulthood\", \"advance\", \"advancement\", \"advantage\", \"advent\",\n+\"adverb\", \"advertisement\", \"advertising\", \"advice\", \"adviser\", \"advocacy\", \"advocate\", \"affair\", \"affect\", \"affidavit\", \"affiliate\",\n+\"affinity\", \"afoul\", \"afterlife\", \"aftermath\", \"afternoon\", \"aftershave\", \"aftershock\", \"afterthought\", \"age\", \"agency\", \"agenda\", \"agent\",\n+\"aggradation\", \"aggression\", \"aglet\", \"agony\", \"agreement\", \"agriculture\", \"aid\", \"aide\", \"aim\", \"air\", \"airbag\", \"airbus\", \"aircraft\",\n+\"airfare\", \"airfield\", \"airforce\", \"airline\", \"airmail\", \"airman\", \"airplane\", \"airport\", \"airship\", \"airspace\", \"alarm\", \"alb\", \"albatross\",\n+\"album\", \"alcohol\", \"alcove\", \"alder\", \"ale\", \"alert\", \"alfalfa\", \"algebra\", \"algorithm\", \"alias\", \"alibi\", \"alien\", \"allegation\", \"allergist\",\n+\"alley\", \"alliance\", \"alligator\", \"allocation\", \"allowance\", \"alloy\", \"alluvium\", \"almanac\", \"almighty\", \"almond\", \"alpaca\", \"alpenglow\",\n+\"alpenhorn\", \"alpha\", \"alphabet\", \"altar\", \"alteration\", \"alternative\", \"altitude\", \"alto\", \"aluminium\", \"aluminum\", \"amazement\", \"amazon\",\n+\"ambassador\", \"amber\", \"ambience\", \"ambiguity\", \"ambition\", \"ambulance\", \"amendment\", \"amenity\", \"ammunition\", \"amnesty\", \"amount\", \"amusement\",\n+\"anagram\", \"analgesia\", \"analog\", \"analogue\", \"analogy\", \"analysis\", \"analyst\", \"analytics\", \"anarchist\", \"anarchy\", \"anatomy\", \"ancestor\",\n+\"anchovy\", \"android\", \"anesthesiologist\", \"anesthesiology\", \"angel\", \"anger\", \"angina\", \"angiosperm\", \"angle\", \"angora\", \"angstrom\",\n+\"anguish\", \"animal\", \"anime\", \"anise\", \"ankle\", \"anklet\", \"anniversary\", \"announcement\", \"annual\", \"anorak\", \"answer\", \"ant\", \"anteater\",\n+\"antecedent\", \"antechamber\", \"antelope\", \"antennae\", \"anterior\", \"anthropology\", \"antibody\", \"anticipation\", \"anticodon\", \"antigen\",\n+\"antique\", \"antiquity\", \"antler\", \"antling\", \"anxiety\", \"anybody\", \"anyone\", \"anything\", \"anywhere\", \"apartment\", \"ape\", \"aperitif\",\n+\"apology\", \"app\", \"apparatus\", \"apparel\", \"appeal\", \"appearance\", \"appellation\", \"appendix\", \"appetiser\", \"appetite\", \"appetizer\", \"applause\",\n+\"apple\", \"applewood\", \"appliance\", \"application\", \"appointment\", \"appreciation\", \"apprehension\", \"approach\", \"appropriation\", \"approval\",\n+\"apricot\", \"apron\", \"apse\", \"aquarium\", \"aquifer\", \"arcade\", \"arch\", \"archaeologist\", \"archaeology\", \"archeology\", \"archer\",\n+\"architect\", \"architecture\", \"archives\", \"area\", \"arena\", \"argument\", \"arithmetic\", \"ark\", \"arm\", \"armadillo\", \"armament\",\n+\"armchair\", \"armoire\", \"armor\", \"armour\", \"armpit\", \"armrest\", \"army\", \"arrangement\", \"array\", \"arrest\", \"arrival\", \"arrogance\", \"arrow\",\n+\"art\", \"artery\", \"arthur\", \"artichoke\", \"article\", \"artifact\", \"artificer\", \"artist\", \"ascend\", \"ascent\", \"ascot\", \"ash\", \"ashram\", \"ashtray\",\n+\"aside\", \"asparagus\", \"aspect\", \"asphalt\", \"aspic\", \"assassination\", \"assault\", \"assembly\", \"assertion\", \"assessment\", \"asset\",\n+\"assignment\", \"assist\", \"assistance\", \"assistant\", \"associate\", \"association\", \"assumption\", \"assurance\", \"asterisk\", \"astrakhan\", \"astrolabe\",\n+\"astrologer\", \"astrology\", \"astronomy\", \"asymmetry\", \"atelier\", \"atheist\", \"athlete\", \"athletics\", \"atmosphere\", \"atom\", \"atrium\", \"attachment\",\n+\"attack\", \"attacker\", \"attainment\", \"attempt\", \"attendance\", \"attendant\", \"attention\", \"attenuation\", \"attic\", \"attitude\", \"attorney\",\n+\"attraction\", \"attribute\", \"auction\", \"audience\", \"audit\", \"auditorium\", \"aunt\", \"authentication\", \"authenticity\", \"author\", \"authorisation\",\n+\"authority\", \"authorization\", \"auto\", \"autoimmunity\", \"automation\", \"automaton\", \"autumn\", \"availability\", \"avalanche\", \"avenue\", \"average\",\n+\"avocado\", \"award\", \"awareness\", \"awe\", \"axis\", \"azimuth\", \"babe\", \"baboon\", \"babushka\", \"baby\", \"bachelor\", \"back\", \"backbone\",\n+\"backburn\", \"backdrop\", \"background\", \"backpack\", \"backup\", \"backyard\", \"bacon\", \"bacterium\", \"badge\", \"badger\", \"bafflement\", \"bag\",\n+\"bagel\", \"baggage\", \"baggie\", \"baggy\", \"bagpipe\", \"bail\", \"bait\", \"bake\", \"baker\", \"bakery\", \"bakeware\", \"balaclava\", \"balalaika\", \"balance\",\n+\"balcony\", \"ball\", \"ballet\", \"balloon\", \"balloonist\", \"ballot\", \"ballpark\", \"bamboo\", \"ban\", \"banana\", \"band\", \"bandana\", \"bandanna\",\n+\"bandolier\", \"bandwidth\", \"bangle\", \"banjo\", \"bank\", \"bankbook\", \"banker\", \"banking\", \"bankruptcy\", \"banner\", \"banquette\", \"banyan\",\n+\"baobab\", \"bar\", \"barbecue\", \"barbeque\", \"barber\", \"barbiturate\", \"bargain\", \"barge\", \"baritone\", \"barium\", \"bark\", \"barley\", \"barn\",\n+\"barometer\", \"barracks\", \"barrage\", \"barrel\", \"barrier\", \"barstool\", \"bartender\", \"base\", \"baseball\", \"baseboard\", \"baseline\", \"basement\",\n+\"basics\", \"basil\", \"basin\", \"basis\", \"basket\", \"basketball\", \"bass\", \"bassinet\", \"bassoon\", \"bat\", \"bath\", \"bather\", \"bathhouse\", \"bathrobe\",\n+\"bathroom\", \"bathtub\", \"battalion\", \"batter\", \"battery\", \"batting\", \"battle\", \"battleship\", \"bay\", \"bayou\", \"beach\", \"bead\", \"beak\",\n+\"beam\", \"bean\", \"beancurd\", \"beanie\", \"beanstalk\", \"bear\", \"beard\", \"beast\", \"beastie\", \"beat\", \"beating\", \"beauty\", \"beaver\", \"beck\",\n+\"bed\", \"bedrock\", \"bedroom\", \"bee\", \"beech\", \"beef\", \"beer\", \"beet\", \"beetle\", \"beggar\", \"beginner\", \"beginning\", \"begonia\", \"behalf\",\n+\"behavior\", \"behaviour\", \"beheading\", \"behest\", \"behold\", \"being\", \"belfry\", \"belief\", \"believer\", \"bell\", \"belligerency\", \"bellows\",\n+\"belly\", \"belt\", \"bench\", \"bend\", \"beneficiary\", \"benefit\", \"beret\", \"berry\", \"bestseller\", \"bet\", \"beverage\", \"beyond\",\n+\"bias\", \"bibliography\", \"bicycle\", \"bid\", \"bidder\", \"bidding\", \"bidet\", \"bifocals\", \"bijou\", \"bike\", \"bikini\", \"bill\", \"billboard\", \"billing\",\n+\"billion\", \"bin\", \"binoculars\", \"biology\", \"biopsy\", \"biosphere\", \"biplane\", \"birch\", \"bird\", \"birdbath\", \"birdcage\",\n+\"birdhouse\", \"birth\", \"birthday\", \"biscuit\", \"bit\", \"bite\", \"bitten\", \"bitter\", \"black\", \"blackberry\", \"blackbird\", \"blackboard\", \"blackfish\",\n+\"blackness\", \"bladder\", \"blade\", \"blame\", \"blank\", \"blanket\", \"blast\", \"blazer\", \"blend\", \"blessing\", \"blight\", \"blind\", \"blinker\", \"blister\",\n+\"blizzard\", \"block\", \"blocker\", \"blog\", \"blogger\", \"blood\", \"bloodflow\", \"bloom\", \"bloomer\", \"blossom\", \"blouse\", \"blow\", \"blowgun\",\n+\"blowhole\", \"blue\", \"blueberry\", \"blush\", \"boar\", \"board\", \"boat\", \"boatload\", \"boatyard\", \"bob\", \"bobcat\", \"body\", \"bog\", \"bolero\",\n+\"bolt\", \"bomb\", \"bomber\", \"bombing\", \"bond\", \"bonding\", \"bondsman\", \"bone\", \"bonfire\", \"bongo\", \"bonnet\", \"bonsai\", \"bonus\", \"boogeyman\",\n+\"book\", \"bookcase\", \"bookend\", \"booking\", \"booklet\", \"bookmark\", \"boolean\", \"boom\", \"boon\", \"boost\", \"booster\", \"boot\", \"bootee\", \"bootie\",\n+\"booty\", \"border\", \"bore\", \"borrower\", \"borrowing\", \"bosom\", \"boss\", \"botany\", \"bother\", \"bottle\", \"bottling\", \"bottom\",\n+\"boudoir\", \"bough\", \"boulder\", \"boulevard\", \"boundary\", \"bouquet\", \"bourgeoisie\", \"bout\", \"boutique\", \"bow\", \"bower\", \"bowl\", \"bowler\",\n+\"bowling\", \"bowtie\", \"box\", \"boxer\", \"boxspring\", \"boy\", \"boycott\", \"boyfriend\", \"boyhood\", \"boysenberry\", \"bra\", \"brace\", \"bracelet\",\n+\"bracket\", \"brain\", \"brake\", \"bran\", \"branch\", \"brand\", \"brandy\", \"brass\", \"brassiere\", \"bratwurst\", \"bread\", \"breadcrumb\", \"breadfruit\",\n+\"break\", \"breakdown\", \"breakfast\", \"breakpoint\", \"breakthrough\", \"breast\", \"breastplate\", \"breath\", \"breeze\", \"brewer\", \"bribery\", \"brick\",\n+\"bricklaying\", \"bride\", \"bridge\", \"brief\", \"briefing\", \"briefly\", \"briefs\", \"brilliant\", \"brink\", \"brisket\", \"broad\", \"broadcast\", \"broccoli\",\n+\"brochure\", \"brocolli\", \"broiler\", \"broker\", \"bronchitis\", \"bronco\", \"bronze\", \"brooch\", \"brood\", \"brook\", \"broom\", \"brother\",\n+\"brow\", \"brown\", \"brownie\", \"browser\", \"browsing\", \"brunch\", \"brush\", \"brushfire\", \"brushing\", \"bubble\", \"buck\", \"bucket\", \"buckle\",\n+\"buckwheat\", \"bud\", \"buddy\", \"budget\", \"buffalo\", \"buffer\", \"buffet\", \"bug\", \"buggy\", \"bugle\", \"builder\", \"building\", \"bulb\", \"bulk\",\n+\"bull\", \"bulldozer\", \"bullet\", \"bump\", \"bumper\", \"bun\", \"bunch\", \"bungalow\", \"bunghole\", \"bunkhouse\", \"burden\", \"bureau\",\n+\"burglar\", \"burial\", \"burlesque\", \"burn\", \"burning\", \"burrito\", \"burro\", \"burrow\", \"burst\", \"bus\", \"bush\", \"business\", \"businessman\",\n+\"bust\", \"bustle\", \"butane\", \"butcher\", \"butler\", \"butter\", \"butterfly\", \"button\", \"buy\", \"buyer\", \"buying\", \"buzz\", \"buzzard\",\n+\"cabana\", \"cabbage\", \"cabin\", \"cabinet\", \"cable\", \"caboose\", \"cacao\", \"cactus\", \"caddy\", \"cadet\", \"cafe\", \"caffeine\", \"caftan\", \"cage\",\n+\"cake\", \"calcification\", \"calculation\", \"calculator\", \"calculus\", \"calendar\", \"calf\", \"caliber\", \"calibre\", \"calico\", \"call\", \"calm\",\n+\"calorie\", \"camel\", \"cameo\", \"camera\", \"camp\", \"campaign\", \"campaigning\", \"campanile\", \"camper\", \"campus\", \"can\", \"canal\", \"cancer\",\n+\"candelabra\", \"candidacy\", \"candidate\", \"candle\", \"candy\", \"cane\", \"cannibal\", \"cannon\", \"canoe\", \"canon\", \"canopy\", \"cantaloupe\", \"canteen\",\n+\"canvas\", \"cap\", \"capability\", \"capacity\", \"cape\", \"caper\", \"capital\", \"capitalism\", \"capitulation\", \"capon\", \"cappelletti\", \"cappuccino\",\n+\"captain\", \"caption\", \"captor\", \"car\", \"carabao\", \"caramel\", \"caravan\", \"carbohydrate\", \"carbon\", \"carboxyl\", \"card\", \"cardboard\", \"cardigan\",\n+\"care\", \"career\", \"cargo\", \"caribou\", \"carload\", \"carnation\", \"carnival\", \"carol\", \"carotene\", \"carp\", \"carpenter\", \"carpet\", \"carpeting\",\n+\"carport\", \"carriage\", \"carrier\", \"carrot\", \"carry\", \"cart\", \"cartel\", \"carter\", \"cartilage\", \"cartload\", \"cartoon\", \"cartridge\", \"carving\",\n+\"cascade\", \"case\", \"casement\", \"cash\", \"cashew\", \"cashier\", \"casino\", \"casket\", \"cassava\", \"casserole\", \"cassock\", \"cast\", \"castanet\",\n+\"castle\", \"casualty\", \"cat\", \"catacomb\", \"catalogue\", \"catalysis\", \"catalyst\", \"catamaran\", \"catastrophe\", \"catch\", \"catcher\", \"category\",\n+\"caterpillar\", \"cathedral\", \"cation\", \"catsup\", \"cattle\", \"cauliflower\", \"causal\", \"cause\", \"causeway\", \"caution\", \"cave\", \"caviar\",\n+\"cayenne\", \"ceiling\", \"celebration\", \"celebrity\", \"celeriac\", \"celery\", \"cell\", \"cellar\", \"cello\", \"celsius\", \"cement\", \"cemetery\", \"cenotaph\",\n+\"census\", \"cent\", \"center\", \"centimeter\", \"centre\", \"centurion\", \"century\", \"cephalopod\", \"ceramic\", \"ceramics\", \"cereal\", \"ceremony\",\n+\"certainty\", \"certificate\", \"certification\", \"cesspool\", \"chafe\", \"chain\", \"chainstay\", \"chair\", \"chairlift\", \"chairman\", \"chairperson\",\n+\"chaise\", \"chalet\", \"chalice\", \"chalk\", \"challenge\", \"chamber\", \"champagne\", \"champion\", \"championship\", \"chance\", \"chandelier\", \"change\",\n+\"channel\", \"chaos\", \"chap\", \"chapel\", \"chaplain\", \"chapter\", \"character\", \"characteristic\", \"characterization\", \"chard\", \"charge\", \"charger\",\n+\"charity\", \"charlatan\", \"charm\", \"charset\", \"chart\", \"charter\", \"chasm\", \"chassis\", \"chastity\", \"chasuble\", \"chateau\", \"chatter\", \"chauffeur\",\n+\"chauvinist\", \"check\", \"checkbook\", \"checking\", \"checkout\", \"checkroom\", \"cheddar\", \"cheek\", \"cheer\", \"cheese\", \"cheesecake\", \"cheetah\",\n+\"chef\", \"chem\", \"chemical\", \"chemistry\", \"chemotaxis\", \"cheque\", \"cherry\", \"chess\", \"chest\", \"chestnut\", \"chick\", \"chicken\", \"chicory\",\n+\"chief\", \"chiffonier\", \"child\", \"childbirth\", \"childhood\", \"chili\", \"chill\", \"chime\", \"chimpanzee\", \"chin\", \"chinchilla\", \"chino\", \"chip\",\n+\"chipmunk\", \"chivalry\", \"chive\", \"chives\", \"chocolate\", \"choice\", \"choir\", \"choker\", \"cholesterol\", \"choosing\", \"chop\",\n+\"chops\", \"chopstick\", \"chopsticks\", \"chord\", \"chorus\", \"chow\", \"chowder\", \"chrome\", \"chromolithograph\", \"chronicle\", \"chronograph\", \"chronometer\",\n+\"chrysalis\", \"chub\", \"chuck\", \"chug\", \"church\", \"churn\", \"chutney\", \"cicada\", \"cigarette\", \"cilantro\", \"cinder\", \"cinema\", \"cinnamon\",\n+\"circadian\", \"circle\", \"circuit\", \"circulation\", \"circumference\", \"circumstance\", \"cirrhosis\", \"cirrus\", \"citizen\", \"citizenship\", \"citron\",\n+\"citrus\", \"city\", \"civilian\", \"civilisation\", \"civilization\", \"claim\", \"clam\", \"clamp\", \"clan\", \"clank\", \"clapboard\", \"clarification\",\n+\"clarinet\", \"clarity\", \"clasp\", \"class\", \"classic\", \"classification\", \"classmate\", \"classroom\", \"clause\", \"clave\", \"clavicle\", \"clavier\",\n+\"claw\", \"clay\", \"cleaner\", \"clearance\", \"clearing\", \"cleat\", \"cleavage\", \"clef\", \"cleft\", \"clergyman\", \"cleric\", \"clerk\", \"click\", \"client\",\n+\"cliff\", \"climate\", \"climb\", \"clinic\", \"clip\", \"clipboard\", \"clipper\", \"cloak\", \"cloakroom\", \"clock\", \"clockwork\", \"clogs\", \"cloister\",\n+\"clone\", \"close\", \"closet\", \"closing\", \"closure\", \"cloth\", \"clothes\", \"clothing\", \"cloud\", \"cloudburst\", \"clove\", \"clover\", \"cloves\",\n+\"club\", \"clue\", \"cluster\", \"clutch\", \"coach\", \"coal\", \"coalition\", \"coast\", \"coaster\", \"coat\", \"cob\", \"cobbler\", \"cobweb\",\n+\"cock\", \"cockpit\", \"cockroach\", \"cocktail\", \"cocoa\", \"coconut\", \"cod\", \"code\", \"codepage\", \"codling\", \"codon\", \"codpiece\", \"coevolution\",\n+\"cofactor\", \"coffee\", \"coffin\", \"cohesion\", \"cohort\", \"coil\", \"coin\", \"coincidence\", \"coinsurance\", \"coke\", \"cold\", \"coleslaw\", \"coliseum\",\n+\"collaboration\", \"collagen\", \"collapse\", \"collar\", \"collard\", \"collateral\", \"colleague\", \"collection\", \"collectivisation\", \"collectivization\",\n+\"collector\", \"college\", \"collision\", \"colloquy\", \"colon\", \"colonial\", \"colonialism\", \"colonisation\", \"colonization\", \"colony\", \"color\",\n+\"colorlessness\", \"colt\", \"column\", \"columnist\", \"comb\", \"combat\", \"combination\", \"combine\", \"comeback\", \"comedy\", \"comestible\", \"comfort\",\n+\"comfortable\", \"comic\", \"comics\", \"comma\", \"command\", \"commander\", \"commandment\", \"comment\", \"commerce\", \"commercial\", \"commission\",\n+\"commitment\", \"committee\", \"commodity\", \"common\", \"commonsense\", \"commotion\", \"communicant\", \"communication\", \"communion\", \"communist\",\n+\"community\", \"commuter\", \"company\", \"comparison\", \"compass\", \"compassion\", \"compassionate\", \"compensation\", \"competence\", \"competition\",\n+\"competitor\", \"complaint\", \"complement\", \"completion\", \"complex\", \"complexity\", \"compliance\", \"complication\", \"complicity\", \"compliment\",\n+\"component\", \"comportment\", \"composer\", \"composite\", \"composition\", \"compost\", \"comprehension\", \"compress\", \"compromise\", \"comptroller\",\n+\"compulsion\", \"computer\", \"comradeship\", \"con\", \"concentrate\", \"concentration\", \"concept\", \"conception\", \"concern\", \"concert\", \"conclusion\",\n+\"concrete\", \"condition\", \"conditioner\", \"condominium\", \"condor\", \"conduct\", \"conductor\", \"cone\", \"confectionery\", \"conference\", \"confidence\",\n+\"confidentiality\", \"configuration\", \"confirmation\", \"conflict\", \"conformation\", \"confusion\", \"conga\", \"congo\", \"congregation\", \"congress\",\n+\"congressman\", \"congressperson\", \"conifer\", \"connection\", \"connotation\", \"conscience\", \"consciousness\", \"consensus\", \"consent\", \"consequence\",\n+\"conservation\", \"conservative\", \"consideration\", \"consignment\", \"consist\", \"consistency\", \"console\", \"consonant\", \"conspiracy\", \"conspirator\",\n+\"constant\", \"constellation\", \"constitution\", \"constraint\", \"construction\", \"consul\", \"consulate\", \"consulting\", \"consumer\", \"consumption\",\n+\"contact\", \"contact lens\", \"contagion\", \"container\", \"content\", \"contention\", \"contest\", \"context\", \"continent\", \"contingency\", \"continuity\",\n+\"contour\", \"contract\", \"contractor\", \"contrail\", \"contrary\", \"contrast\", \"contribution\", \"contributor\", \"control\", \"controller\", \"controversy\",\n+\"convection\", \"convenience\", \"convention\", \"conversation\", \"conversion\", \"convert\", \"convertible\", \"conviction\", \"cook\", \"cookbook\",\n+\"cookie\", \"cooking\", \"coonskin\", \"cooperation\", \"coordination\", \"coordinator\", \"cop\", \"cope\", \"copper\", \"copy\", \"copying\",\n+\"copyright\", \"copywriter\", \"coral\", \"cord\", \"corduroy\", \"core\", \"cork\", \"cormorant\", \"corn\", \"corner\", \"cornerstone\", \"cornet\", \"cornflakes\",\n+\"cornmeal\", \"corporal\", \"corporation\", \"corporatism\", \"corps\", \"corral\", \"correspondence\", \"correspondent\", \"corridor\", \"corruption\",\n+\"corsage\", \"cosset\", \"cost\", \"costume\", \"cot\", \"cottage\", \"cotton\", \"couch\", \"cougar\", \"cough\", \"council\", \"councilman\", \"councilor\",\n+\"councilperson\", \"counsel\", \"counseling\", \"counselling\", \"counsellor\", \"counselor\", \"count\", \"counter\", \"counterpart\",\n+\"counterterrorism\", \"countess\", \"country\", \"countryside\", \"county\", \"couple\", \"coupon\", \"courage\", \"course\", \"court\", \"courthouse\", \"courtroom\",\n+\"cousin\", \"covariate\", \"cover\", \"coverage\", \"coverall\", \"cow\", \"cowbell\", \"cowboy\", \"coyote\", \"crab\", \"crack\", \"cracker\", \"crackers\",\n+\"cradle\", \"craft\", \"craftsman\", \"cranberry\", \"crane\", \"cranky\", \"crash\", \"crate\", \"cravat\", \"craw\", \"crawdad\", \"crayfish\", \"crayon\",\n+\"crazy\", \"cream\", \"creation\", \"creationism\", \"creationist\", \"creative\", \"creativity\", \"creator\", \"creature\", \"creche\", \"credential\",\n+\"credenza\", \"credibility\", \"credit\", \"creditor\", \"creek\", \"creme brulee\", \"crepe\", \"crest\", \"crew\", \"crewman\", \"crewmate\", \"crewmember\",\n+\"crewmen\", \"cria\", \"crib\", \"cribbage\", \"cricket\", \"cricketer\", \"crime\", \"criminal\", \"crinoline\", \"crisis\", \"crisp\", \"criteria\", \"criterion\",\n+\"critic\", \"criticism\", \"crocodile\", \"crocus\", \"croissant\", \"crook\", \"crop\", \"cross\", \"crotch\",\n+\"croup\", \"crow\", \"crowd\", \"crown\", \"crucifixion\", \"crude\", \"cruelty\", \"cruise\", \"crumb\", \"crunch\", \"crusader\", \"crush\", \"crust\", \"cry\",\n+\"crystal\", \"crystallography\", \"cub\", \"cube\", \"cuckoo\", \"cucumber\", \"cue\", \"cuisine\", \"cultivar\", \"cultivator\", \"culture\",\n+\"culvert\", \"cummerbund\", \"cup\", \"cupboard\", \"cupcake\", \"cupola\", \"curd\", \"cure\", \"curio\", \"curiosity\", \"curl\", \"curler\", \"currant\", \"currency\",\n+\"current\", \"curriculum\", \"curry\", \"curse\", \"cursor\", \"curtailment\", \"curtain\", \"curve\", \"cushion\", \"custard\", \"custody\", \"custom\", \"customer\",\n+\"cut\", \"cuticle\", \"cutlet\", \"cutover\", \"cutting\", \"cyclamen\", \"cycle\", \"cyclone\", \"cyclooxygenase\", \"cygnet\", \"cylinder\", \"cymbal\", \"cynic\",\n+\"cyst\", \"cytokine\", \"cytoplasm\", \"dad\", \"daddy\", \"daffodil\", \"dagger\", \"dahlia\", \"daikon\", \"daily\", \"dairy\", \"daisy\", \"dam\", \"damage\",\n+\"dame\", \"dance\", \"dancer\", \"dancing\", \"dandelion\", \"danger\", \"dare\", \"dark\", \"darkness\", \"darn\", \"dart\", \"dash\", \"dashboard\",\n+\"data\", \"database\", \"date\", \"daughter\", \"dawn\", \"day\", \"daybed\", \"daylight\", \"dead\", \"deadline\", \"deal\", \"dealer\", \"dealing\", \"dearest\",\n+\"death\", \"deathwatch\", \"debate\", \"debris\", \"debt\", \"debtor\", \"decade\", \"decadence\", \"decency\", \"decimal\", \"decision\",\n+\"deck\", \"declaration\", \"declination\", \"decline\", \"decoder\", \"decongestant\", \"decoration\", \"decrease\", \"decryption\", \"dedication\", \"deduce\",\n+\"deduction\", \"deed\", \"deep\", \"deer\", \"default\", \"defeat\", \"defendant\", \"defender\", \"defense\", \"deficit\", \"definition\", \"deformation\",\n+\"degradation\", \"degree\", \"delay\", \"deliberation\", \"delight\", \"delivery\", \"demand\", \"democracy\", \"democrat\", \"demon\", \"demur\", \"den\",\n+\"denim\", \"denominator\", \"density\", \"dentist\", \"deodorant\", \"department\", \"departure\", \"dependency\", \"dependent\", \"deployment\", \"deposit\",\n+\"deposition\", \"depot\", \"depression\", \"depressive\", \"depth\", \"deputy\", \"derby\", \"derivation\", \"derivative\", \"derrick\", \"descendant\", \"descent\",\n+\"description\", \"desert\", \"design\", \"designation\", \"designer\", \"desire\", \"desk\", \"desktop\", \"dessert\", \"destination\", \"destiny\", \"destroyer\",\n+\"destruction\", \"detail\", \"detainee\", \"detainment\", \"detection\", \"detective\", \"detector\", \"detention\", \"determination\", \"detour\", \"devastation\",\n+\"developer\", \"developing\", \"development\", \"developmental\", \"deviance\", \"deviation\", \"device\", \"devil\", \"dew\", \"dhow\", \"diabetes\", \"diadem\",\n+\"diagnosis\", \"diagram\", \"dial\", \"dialect\", \"dialogue\", \"diam\", \"diamond\", \"diaper\", \"diaphragm\", \"diarist\", \"diary\", \"dibble\", \"dickey\", \"dictaphone\", \"dictator\", \"diction\", \"dictionary\", \"die\", \"diesel\", \"diet\", \"difference\", \"differential\", \"difficulty\", \"diffuse\",\n+\"dig\", \"digestion\", \"digestive\", \"digger\", \"digging\", \"digit\", \"dignity\", \"dilapidation\", \"dill\", \"dilution\", \"dime\", \"dimension\", \"dimple\",\n+\"diner\", \"dinghy\", \"dining\", \"dinner\", \"dinosaur\", \"dioxide\", \"dip\", \"diploma\", \"diplomacy\", \"dipstick\", \"direction\", \"directive\", \"director\",\n+\"directory\", \"dirndl\", \"dirt\", \"disability\", \"disadvantage\", \"disagreement\", \"disappointment\", \"disarmament\", \"disaster\", \"discharge\",\n+\"discipline\", \"disclaimer\", \"disclosure\", \"disco\", \"disconnection\", \"discount\", \"discourse\", \"discovery\", \"discrepancy\", \"discretion\",\n+\"discrimination\", \"discussion\", \"disdain\", \"disease\", \"disembodiment\", \"disengagement\", \"disguise\", \"disgust\", \"dish\", \"dishwasher\",\n+\"disk\", \"disparity\", \"dispatch\", \"displacement\", \"display\", \"disposal\", \"disposer\", \"disposition\", \"dispute\", \"disregard\", \"disruption\",\n+\"dissemination\", \"dissonance\", \"distance\", \"distinction\", \"distortion\", \"distribution\", \"distributor\", \"district\", \"divalent\", \"divan\",\n+\"diver\", \"diversity\", \"divide\", \"dividend\", \"divider\", \"divine\", \"diving\", \"division\", \"divorce\", \"doc\", \"dock\", \"doctor\", \"doctorate\",\n+\"doctrine\", \"document\", \"documentary\", \"documentation\", \"doe\", \"dog\", \"doggie\", \"dogsled\", \"dogwood\", \"doing\", \"doll\", \"dollar\", \"dollop\",\n+\"dolman\", \"dolor\", \"dolphin\", \"domain\", \"dome\", \"domination\", \"donation\", \"donkey\", \"donor\", \"donut\", \"door\", \"doorbell\", \"doorknob\",\n+\"doorpost\", \"doorway\", \"dory\", \"dose\", \"dot\", \"double\", \"doubling\", \"doubt\", \"doubter\", \"dough\", \"doughnut\", \"down\", \"downfall\", \"downforce\",\n+\"downgrade\", \"download\", \"downstairs\", \"downtown\", \"downturn\", \"dozen\", \"draft\", \"drag\", \"dragon\", \"dragonfly\", \"dragonfruit\", \"dragster\",\n+\"drain\", \"drainage\", \"drake\", \"drama\", \"dramaturge\", \"drapes\", \"draw\", \"drawbridge\", \"drawer\", \"drawing\", \"dream\", \"dreamer\", \"dredger\",\n+\"dress\", \"dresser\", \"dressing\", \"drill\", \"drink\", \"drinking\", \"drive\", \"driver\", \"driveway\", \"driving\", \"drizzle\", \"dromedary\", \"drop\",\n+\"drudgery\", \"drug\", \"drum\", \"drummer\", \"drunk\", \"dryer\", \"duck\", \"duckling\", \"dud\", \"dude\", \"due\", \"duel\", \"dueling\", \"duffel\", \"dugout\",\n+\"dulcimer\", \"dumbwaiter\", \"dump\", \"dump truck\", \"dune\", \"dune buggy\", \"dungarees\", \"dungeon\", \"duplexer\", \"duration\", \"durian\", \"dusk\",\n+\"dust\", \"dust storm\", \"duster\", \"duty\", \"dwarf\", \"dwell\", \"dwelling\", \"dynamics\", \"dynamite\", \"dynamo\", \"dynasty\", \"dysfunction\",\n+\"eagle\", \"eaglet\", \"ear\", \"eardrum\", \"earmuffs\", \"earnings\", \"earplug\", \"earring\", \"earrings\", \"earth\", \"earthquake\",\n+\"earthworm\", \"ease\", \"easel\", \"east\", \"eating\", \"eaves\", \"eavesdropper\", \"ecclesia\", \"echidna\", \"eclipse\", \"ecliptic\", \"ecology\", \"economics\",\n+\"economy\", \"ecosystem\", \"ectoderm\", \"ectodermal\", \"ecumenist\", \"eddy\", \"edge\", \"edger\", \"edible\", \"editing\", \"edition\", \"editor\", \"editorial\",\n+\"education\", \"eel\", \"effacement\", \"effect\", \"effective\", \"effectiveness\", \"effector\", \"efficacy\", \"efficiency\", \"effort\", \"egg\", \"egghead\",\n+\"eggnog\", \"eggplant\", \"ego\", \"eicosanoid\", \"ejector\", \"elbow\", \"elderberry\", \"election\", \"electricity\", \"electrocardiogram\", \"electronics\",\n+\"element\", \"elephant\", \"elevation\", \"elevator\", \"eleventh\", \"elf\", \"elicit\", \"eligibility\", \"elimination\", \"elite\", \"elixir\", \"elk\",\n+\"ellipse\", \"elm\", \"elongation\", \"elver\", \"email\", \"emanate\", \"embarrassment\", \"embassy\", \"embellishment\", \"embossing\", \"embryo\", \"emerald\",\n+\"emergence\", \"emergency\", \"emergent\", \"emery\", \"emission\", \"emitter\", \"emotion\", \"emphasis\", \"empire\", \"employ\", \"employee\", \"employer\",\n+\"employment\", \"empowerment\", \"emu\", \"enactment\", \"encirclement\", \"enclave\", \"enclosure\", \"encounter\", \"encouragement\", \"encyclopedia\",\n+\"end\", \"endive\", \"endoderm\", \"endorsement\", \"endothelium\", \"endpoint\", \"enemy\", \"energy\", \"enforcement\", \"engagement\", \"engine\", \"engineer\",\n+\"engineering\", \"enigma\", \"enjoyment\", \"enquiry\", \"enrollment\", \"enterprise\", \"entertainment\", \"enthusiasm\", \"entirety\", \"entity\", \"entrance\",\n+\"entree\", \"entrepreneur\", \"entry\", \"envelope\", \"environment\", \"envy\", \"enzyme\", \"epauliere\", \"epee\", \"ephemera\", \"ephemeris\", \"ephyra\",\n+\"epic\", \"episode\", \"epithelium\", \"epoch\", \"eponym\", \"epoxy\", \"equal\", \"equality\", \"equation\", \"equinox\", \"equipment\", \"equity\", \"equivalent\",\n+\"era\", \"eraser\", \"erection\", \"erosion\", \"error\", \"escalator\", \"escape\", \"escort\", \"espadrille\", \"espalier\", \"essay\", \"essence\", \"essential\",\n+\"establishment\", \"estate\", \"estimate\", \"estrogen\", \"estuary\", \"eternity\", \"ethernet\", \"ethics\", \"ethnicity\", \"ethyl\", \"euphonium\", \"eurocentrism\",\n+\"evaluation\", \"evaluator\", \"evaporation\", \"eve\", \"evening\", \"event\", \"everybody\", \"everyone\", \"everything\", \"eviction\",\n+\"evidence\", \"evil\", \"evocation\", \"evolution\", \"exaggeration\", \"exam\", \"examination\", \"examiner\", \"example\",\n+\"exasperation\", \"excellence\", \"exception\", \"excerpt\", \"excess\", \"exchange\", \"excitement\", \"exclamation\", \"excursion\", \"excuse\", \"execution\",\n+\"executive\", \"executor\", \"exercise\", \"exhaust\", \"exhaustion\", \"exhibit\", \"exhibition\", \"exile\", \"existence\", \"exit\", \"exocrine\", \"expansion\",\n+\"expansionism\", \"expectancy\", \"expectation\", \"expedition\", \"expense\", \"experience\", \"experiment\", \"experimentation\", \"expert\", \"expertise\",\n+\"explanation\", \"exploration\", \"explorer\", \"explosion\", \"export\", \"expose\", \"exposition\", \"exposure\", \"expression\", \"extension\", \"extent\",\n+\"exterior\", \"external\", \"extinction\", \"extreme\", \"extremist\", \"eye\", \"eyeball\", \"eyebrow\", \"eyebrows\", \"eyeglasses\", \"eyelash\", \"eyelashes\",\n+\"eyelid\", \"eyelids\", \"eyeliner\", \"eyestrain\", \"eyrie\", \"fabric\", \"face\", \"facelift\", \"facet\", \"facility\", \"facsimile\", \"fact\", \"factor\",\n+\"factory\", \"faculty\", \"fahrenheit\", \"fail\", \"failure\", \"fairness\", \"fairy\", \"faith\", \"faithful\", \"fall\", \"fallacy\", \"fame\",\n+\"familiar\", \"familiarity\", \"family\", \"fan\", \"fang\", \"fanlight\", \"fanny\", \"fantasy\", \"farm\", \"farmer\", \"farming\", \"farmland\",\n+\"farrow\", \"fascia\", \"fashion\", \"fat\", \"fate\", \"father\", \"fatigue\", \"fatigues\", \"faucet\", \"fault\", \"fav\", \"fava\", \"favor\",\n+\"favorite\", \"fawn\", \"fax\", \"fear\", \"feast\", \"feather\", \"feature\", \"fedelini\", \"federation\", \"fedora\", \"fee\", \"feed\", \"feedback\", \"feeding\",\n+\"feel\", \"feeling\", \"fellow\", \"felony\", \"female\", \"fen\", \"fence\", \"fencing\", \"fender\", \"feng\", \"fennel\", \"ferret\", \"ferry\", \"ferryboat\",\n+\"fertilizer\", \"festival\", \"fetus\", \"few\", \"fiber\", \"fiberglass\", \"fibre\", \"fibroblast\", \"fibrosis\", \"ficlet\", \"fiction\", \"fiddle\", \"field\",\n+\"fiery\", \"fiesta\", \"fifth\", \"fig\", \"fight\", \"fighter\", \"figure\", \"figurine\", \"file\", \"filing\", \"fill\", \"fillet\", \"filly\", \"film\", \"filter\",\n+\"filth\", \"final\", \"finance\", \"financing\", \"finding\", \"fine\", \"finer\", \"finger\", \"fingerling\", \"fingernail\", \"finish\", \"finisher\", \"fir\",\n+\"fire\", \"fireman\", \"fireplace\", \"firewall\", \"firm\", \"first\", \"fish\", \"fishbone\", \"fisherman\", \"fishery\", \"fishing\", \"fishmonger\", \"fishnet\",\n+\"fisting\", \"fit\", \"fitness\", \"fix\", \"fixture\", \"flag\", \"flair\", \"flame\", \"flan\", \"flanker\", \"flare\", \"flash\", \"flat\", \"flatboat\", \"flavor\",\n+\"flax\", \"fleck\", \"fledgling\", \"fleece\", \"flesh\", \"flexibility\", \"flick\", \"flicker\", \"flight\", \"flint\", \"flintlock\", \"flock\",\n+\"flood\", \"floodplain\", \"floor\", \"floozie\", \"flour\", \"flow\", \"flower\", \"flu\", \"flugelhorn\", \"fluke\", \"flume\", \"flung\", \"flute\", \"fly\",\n+\"flytrap\", \"foal\", \"foam\", \"fob\", \"focus\", \"fog\", \"fold\", \"folder\", \"folk\", \"folklore\", \"follower\", \"following\", \"fondue\", \"font\", \"food\",\n+\"foodstuffs\", \"fool\", \"foot\", \"footage\", \"football\", \"footnote\", \"footprint\", \"footrest\", \"footstep\", \"footstool\", \"footwear\", \"forage\",\n+\"forager\", \"foray\", \"force\", \"ford\", \"forearm\", \"forebear\", \"forecast\", \"forehead\", \"foreigner\", \"forelimb\", \"forest\", \"forestry\", \"forever\",\n+\"forgery\", \"fork\", \"form\", \"formal\", \"formamide\", \"format\", \"formation\", \"former\", \"formicarium\", \"formula\", \"fort\", \"forte\", \"fortnight\",\n+\"fortress\", \"fortune\", \"forum\", \"foundation\", \"founder\", \"founding\", \"fountain\", \"fourths\", \"fowl\", \"fox\", \"foxglove\", \"fraction\", \"fragrance\",\n+\"frame\", \"framework\", \"fratricide\", \"fraud\", \"fraudster\", \"freak\", \"freckle\", \"freedom\", \"freelance\", \"freezer\", \"freezing\", \"freight\",\n+\"freighter\", \"frenzy\", \"freon\", \"frequency\", \"fresco\", \"friction\", \"fridge\", \"friend\", \"friendship\", \"fries\", \"frigate\", \"fright\", \"fringe\",\n+\"fritter\", \"frock\", \"frog\", \"front\", \"frontier\", \"frost\", \"frosting\", \"frown\", \"fruit\", \"frustration\", \"fry\", \"fuel\", \"fugato\",\n+\"fulfillment\", \"full\", \"fun\", \"function\", \"functionality\", \"fund\", \"funding\", \"fundraising\", \"funeral\", \"fur\", \"furnace\", \"furniture\",\n+\"furry\", \"fusarium\", \"futon\", \"future\", \"gadget\", \"gaffe\", \"gaffer\", \"gain\", \"gaiters\", \"gale\", \"gallery\", \"galley\",\n+\"gallon\", \"galoshes\", \"gambling\", \"game\", \"gamebird\", \"gaming\", \"gander\", \"gang\", \"gap\", \"garage\", \"garb\", \"garbage\", \"garden\",\n+\"garlic\", \"garment\", \"garter\", \"gas\", \"gasket\", \"gasoline\", \"gasp\", \"gastronomy\", \"gastropod\", \"gate\", \"gateway\", \"gather\", \"gathering\",\n+\"gator\", \"gauge\", \"gauntlet\", \"gavel\", \"gazebo\", \"gazelle\", \"gear\", \"gearshift\", \"geek\", \"gel\", \"gelatin\", \"gelding\", \"gem\", \"gemsbok\",\n+\"gender\", \"gene\", \"general\", \"generation\", \"generator\", \"generosity\", \"genetics\", \"genie\", \"genius\", \"genocide\", \"genre\", \"gentleman\",\n+\"geography\", \"geology\", \"geometry\", \"geranium\", \"gerbil\", \"gesture\", \"geyser\", \"gherkin\", \"ghost\", \"giant\", \"gift\", \"gig\", \"gigantism\",\n+\"giggle\", \"ginger\", \"gingerbread\", \"ginseng\", \"giraffe\", \"girdle\", \"girl\", \"girlfriend\", \"git\", \"glacier\", \"gladiolus\", \"glance\", \"gland\",\n+\"glass\", \"glasses\", \"glee\", \"glen\", \"glider\", \"gliding\", \"glimpse\", \"globe\", \"glockenspiel\", \"gloom\", \"glory\", \"glove\", \"glow\", \"glucose\",\n+\"glue\", \"glut\", \"glutamate\", \"gnat\", \"gnu\", \"goal\", \"goat\", \"gobbler\", \"god\", \"goddess\", \"godfather\", \"godmother\", \"godparent\",\n+\"goggles\", \"going\", \"gold\", \"goldfish\", \"golf\", \"gondola\", \"gong\", \"good\", \"goodbye\", \"goodie\", \"goodness\", \"goodnight\",\n+\"goodwill\", \"goose\", \"gopher\", \"gorilla\", \"gosling\", \"gossip\", \"governance\", \"government\", \"governor\", \"gown\", \"grace\", \"grade\",\n+\"gradient\", \"graduate\", \"graduation\", \"graffiti\", \"graft\", \"grain\", \"gram\", \"grammar\", \"gran\", \"grand\", \"grandchild\", \"granddaughter\",\n+\"grandfather\", \"grandma\", \"grandmom\", \"grandmother\", \"grandpa\", \"grandparent\", \"grandson\", \"granny\", \"granola\", \"grant\", \"grape\", \"grapefruit\",\n+\"graph\", \"graphic\", \"grasp\", \"grass\", \"grasshopper\", \"grassland\", \"gratitude\", \"gravel\", \"gravitas\", \"gravity\", \"gravy\", \"gray\", \"grease\",\n+\"greatness\", \"greed\", \"green\", \"greenhouse\", \"greens\", \"grenade\", \"grey\", \"grid\", \"grief\",\n+\"grill\", \"grin\", \"grip\", \"gripper\", \"grit\", \"grocery\", \"ground\", \"group\", \"grouper\", \"grouse\", \"grove\", \"growth\", \"grub\", \"guacamole\",\n+\"guarantee\", \"guard\", \"guava\", \"guerrilla\", \"guess\", \"guest\", \"guestbook\", \"guidance\", \"guide\", \"guideline\", \"guilder\", \"guilt\", \"guilty\",\n+\"guinea\", \"guitar\", \"guitarist\", \"gum\", \"gumshoe\", \"gun\", \"gunpowder\", \"gutter\", \"guy\", \"gym\", \"gymnast\", \"gymnastics\", \"gynaecology\",\n+\"gyro\", \"habit\", \"habitat\", \"hacienda\", \"hacksaw\", \"hackwork\", \"hail\", \"hair\", \"haircut\", \"hake\", \"half\",\n+\"halibut\", \"hall\", \"halloween\", \"hallway\", \"halt\", \"ham\", \"hamburger\", \"hammer\", \"hammock\", \"hamster\", \"hand\", \"handball\",\n+\"handful\", \"handgun\", \"handicap\", \"handle\", \"handlebar\", \"handmaiden\", \"handover\", \"handrail\", \"handsaw\", \"hanger\", \"happening\", \"happiness\",\n+\"harald\", \"harbor\", \"harbour\", \"hardboard\", \"hardcover\", \"hardening\", \"hardhat\", \"hardship\", \"hardware\", \"hare\", \"harm\",\n+\"harmonica\", \"harmonise\", \"harmonize\", \"harmony\", \"harp\", \"harpooner\", \"harpsichord\", \"harvest\", \"harvester\", \"hash\", \"hashtag\", \"hassock\",\n+\"haste\", \"hat\", \"hatbox\", \"hatchet\", \"hatchling\", \"hate\", \"hatred\", \"haunt\", \"haven\", \"haversack\", \"havoc\", \"hawk\", \"hay\", \"haze\", \"hazel\",\n+\"hazelnut\", \"head\", \"headache\", \"headlight\", \"headline\", \"headphones\", \"headquarters\", \"headrest\", \"health\", \"hearing\",\n+\"hearsay\", \"heart\", \"heartache\", \"heartbeat\", \"hearth\", \"hearthside\", \"heartwood\", \"heat\", \"heater\", \"heating\", \"heaven\",\n+\"heavy\", \"hectare\", \"hedge\", \"hedgehog\", \"heel\", \"heifer\", \"height\", \"heir\", \"heirloom\", \"helicopter\", \"helium\", \"hell\", \"hellcat\", \"hello\",\n+\"helmet\", \"helo\", \"help\", \"hemisphere\", \"hemp\", \"hen\", \"hepatitis\", \"herb\", \"herbs\", \"heritage\", \"hermit\", \"hero\", \"heroine\", \"heron\",\n+\"herring\", \"hesitation\", \"hexagon\", \"heyday\", \"hiccups\", \"hide\", \"hierarchy\", \"high\", \"highland\", \"highlight\",\n+\"highway\", \"hike\", \"hiking\", \"hill\", \"hint\", \"hip\", \"hippodrome\", \"hippopotamus\", \"hire\", \"hiring\", \"historian\", \"history\", \"hit\", \"hive\",\n+\"hobbit\", \"hobby\", \"hockey\", \"hoe\", \"hog\", \"hold\", \"holder\", \"hole\", \"holiday\", \"home\", \"homeland\", \"homeownership\", \"hometown\", \"homework\",\n+\"homicide\", \"homogenate\", \"homonym\", \"honesty\", \"honey\", \"honeybee\", \"honeydew\", \"honor\", \"honoree\", \"hood\",\n+\"hoof\", \"hook\", \"hop\", \"hope\", \"hops\", \"horde\", \"horizon\", \"hormone\", \"horn\", \"hornet\", \"horror\", \"horse\", \"horseradish\", \"horst\", \"hose\",\n+\"hosiery\", \"hospice\", \"hospital\", \"hospitalisation\", \"hospitality\", \"hospitalization\", \"host\", \"hostel\", \"hostess\", \"hotdog\", \"hotel\",\n+\"hound\", \"hour\", \"hourglass\", \"house\", \"houseboat\", \"household\", \"housewife\", \"housework\", \"housing\", \"hovel\", \"hovercraft\", \"howard\",\n+\"howitzer\", \"hub\", \"hubcap\", \"hubris\", \"hug\", \"hugger\", \"hull\", \"human\", \"humanity\", \"humidity\", \"hummus\", \"humor\", \"humour\", \"hunchback\",\n+\"hundred\", \"hunger\", \"hunt\", \"hunter\", \"hunting\", \"hurdle\", \"hurdler\", \"hurricane\", \"hurry\", \"hurt\", \"husband\", \"hut\", \"hutch\", \"hyacinth\",\n+\"hybridisation\", \"hybridization\", \"hydrant\", \"hydraulics\", \"hydrocarb\", \"hydrocarbon\", \"hydrofoil\", \"hydrogen\", \"hydrolyse\", \"hydrolysis\",\n+\"hydrolyze\", \"hydroxyl\", \"hyena\", \"hygienic\", \"hype\", \"hyphenation\", \"hypochondria\", \"hypothermia\", \"hypothesis\", \"ice\",\n+\"iceberg\", \"icebreaker\", \"icecream\", \"icicle\", \"icing\", \"icon\", \"icy\", \"id\", \"idea\", \"ideal\", \"identification\", \"identity\", \"ideology\",\n+\"idiom\", \"idiot\", \"igloo\", \"ignorance\", \"ignorant\", \"ikebana\", \"illegal\", \"illiteracy\", \"illness\", \"illusion\", \"illustration\", \"image\",\n+\"imagination\", \"imbalance\", \"imitation\", \"immigrant\", \"immigration\", \"immortal\", \"impact\", \"impairment\", \"impala\", \"impediment\", \"implement\",\n+\"implementation\", \"implication\", \"import\", \"importance\", \"impostor\", \"impress\", \"impression\", \"imprisonment\", \"impropriety\", \"improvement\",\n+\"impudence\", \"impulse\", \"inability\", \"inauguration\", \"inbox\", \"incandescence\", \"incarnation\", \"incense\", \"incentive\",\n+\"inch\", \"incidence\", \"incident\", \"incision\", \"inclusion\", \"income\", \"incompetence\", \"inconvenience\", \"increase\", \"incubation\", \"independence\",\n+\"independent\", \"index\", \"indication\", \"indicator\", \"indigence\", \"individual\", \"industrialisation\", \"industrialization\", \"industry\", \"inequality\",\n+\"inevitable\", \"infancy\", \"infant\", \"infarction\", \"infection\", \"infiltration\", \"infinite\", \"infix\", \"inflammation\", \"inflation\", \"influence\",\n+\"influx\", \"info\", \"information\", \"infrastructure\", \"infusion\", \"inglenook\", \"ingrate\", \"ingredient\", \"inhabitant\", \"inheritance\", \"inhibition\",\n+\"inhibitor\", \"initial\", \"initialise\", \"initialize\", \"initiative\", \"injunction\", \"injury\", \"injustice\", \"ink\", \"inlay\", \"inn\", \"innervation\",\n+\"innocence\", \"innocent\", \"innovation\", \"input\", \"inquiry\", \"inscription\", \"insect\", \"insectarium\", \"insert\", \"inside\", \"insight\", \"insolence\",\n+\"insomnia\", \"inspection\", \"inspector\", \"inspiration\", \"installation\", \"instance\", \"instant\", \"instinct\", \"institute\", \"institution\",\n+\"instruction\", \"instructor\", \"instrument\", \"instrumentalist\", \"instrumentation\", \"insulation\", \"insurance\", \"insurgence\", \"insurrection\",\n+\"integer\", \"integral\", \"integration\", \"integrity\", \"intellect\", \"intelligence\", \"intensity\", \"intent\", \"intention\", \"intentionality\",\n+\"interaction\", \"interchange\", \"interconnection\", \"intercourse\", \"interest\", \"interface\", \"interferometer\", \"interior\", \"interject\", \"interloper\",\n+\"internet\", \"interpretation\", \"interpreter\", \"interval\", \"intervenor\", \"intervention\", \"interview\", \"interviewer\", \"intestine\", \"introduction\",\n+\"intuition\", \"invader\", \"invasion\", \"invention\", \"inventor\", \"inventory\", \"inverse\", \"inversion\", \"investigation\", \"investigator\", \"investment\",\n+\"investor\", \"invitation\", \"invite\", \"invoice\", \"involvement\", \"iridescence\", \"iris\", \"iron\", \"ironclad\", \"irony\", \"irrigation\", \"ischemia\",\n+\"island\", \"isogloss\", \"isolation\", \"issue\", \"item\", \"itinerary\", \"ivory\", \"jack\", \"jackal\", \"jacket\", \"jackfruit\", \"jade\", \"jaguar\",\n+\"jail\", \"jailhouse\", \"jalape\u00f1o\", \"jam\", \"jar\", \"jasmine\", \"jaw\", \"jazz\", \"jealousy\", \"jeans\", \"jeep\", \"jelly\", \"jellybeans\", \"jellyfish\",\n+\"jerk\", \"jet\", \"jewel\", \"jeweller\", \"jewellery\", \"jewelry\", \"jicama\", \"jiffy\", \"job\", \"jockey\", \"jodhpurs\", \"joey\", \"jogging\", \"joint\",\n+\"joke\", \"jot\", \"journal\", \"journalism\", \"journalist\", \"journey\", \"joy\", \"judge\", \"judgment\", \"judo\", \"jug\", \"juggernaut\", \"juice\", \"julienne\",\n+\"jumbo\", \"jump\", \"jumper\", \"jumpsuit\", \"jungle\", \"junior\", \"junk\", \"junker\", \"junket\", \"jury\", \"justice\", \"justification\", \"jute\", \"kale\",\n+\"kamikaze\", \"kangaroo\", \"karate\", \"kayak\", \"kazoo\", \"kebab\", \"keep\", \"keeper\", \"kendo\", \"kennel\", \"ketch\", \"ketchup\", \"kettle\", \"kettledrum\",\n+\"key\", \"keyboard\", \"keyboarding\", \"keystone\", \"kick\", \"kid\", \"kidney\", \"kielbasa\", \"kill\", \"killer\", \"killing\", \"kilogram\",\n+\"kilometer\", \"kilt\", \"kimono\", \"kinase\", \"kind\", \"kindness\", \"king\", \"kingdom\", \"kingfish\", \"kiosk\", \"kiss\", \"kit\", \"kitchen\", \"kite\",\n+\"kitsch\", \"kitten\", \"kitty\", \"kiwi\", \"knee\", \"kneejerk\", \"knickers\", \"knife\", \"knight\", \"knitting\", \"knock\", \"knot\",\n+\"knowledge\", \"knuckle\", \"koala\", \"kohlrabi\", \"kumquat\", \"lab\", \"label\", \"labor\", \"laboratory\", \"laborer\", \"labour\", \"labourer\", \"lace\",\n+\"lack\", \"lacquerware\", \"lad\", \"ladder\", \"ladle\", \"lady\", \"ladybug\", \"lag\", \"lake\", \"lamb\", \"lambkin\", \"lament\", \"lamp\", \"lanai\", \"land\",\n+\"landform\", \"landing\", \"landmine\", \"landscape\", \"lane\", \"language\", \"lantern\", \"lap\", \"laparoscope\", \"lapdog\", \"laptop\", \"larch\", \"lard\",\n+\"larder\", \"lark\", \"larva\", \"laryngitis\", \"lasagna\", \"lashes\", \"last\", \"latency\", \"latex\", \"lathe\", \"latitude\", \"latte\", \"latter\", \"laugh\",\n+\"laughter\", \"laundry\", \"lava\", \"law\", \"lawmaker\", \"lawn\", \"lawsuit\", \"lawyer\", \"lay\", \"layer\", \"layout\", \"lead\", \"leader\", \"leadership\",\n+\"leading\", \"leaf\", \"league\", \"leaker\", \"leap\", \"learning\", \"leash\", \"leather\", \"leave\", \"leaver\", \"lecture\", \"leek\", \"leeway\", \"left\",\n+\"leg\", \"legacy\", \"legal\", \"legend\", \"legging\", \"legislation\", \"legislator\", \"legislature\", \"legitimacy\", \"legume\", \"leisure\", \"lemon\",\n+\"lemonade\", \"lemur\", \"lender\", \"lending\", \"length\", \"lens\", \"lentil\", \"leopard\", \"leprosy\", \"leptocephalus\", \"lesson\", \"letter\",\n+\"lettuce\", \"level\", \"lever\", \"leverage\", \"leveret\", \"liability\", \"liar\", \"liberty\", \"libido\", \"library\", \"licence\", \"license\", \"licensing\",\n+\"licorice\", \"lid\", \"lie\", \"lieu\", \"lieutenant\", \"life\", \"lifestyle\", \"lifetime\", \"lift\", \"ligand\", \"light\", \"lighting\", \"lightning\",\n+\"lightscreen\", \"ligula\", \"likelihood\", \"likeness\", \"lilac\", \"lily\", \"limb\", \"lime\", \"limestone\", \"limit\", \"limitation\", \"limo\", \"line\",\n+\"linen\", \"liner\", \"linguist\", \"linguistics\", \"lining\", \"link\", \"linkage\", \"linseed\", \"lion\", \"lip\", \"lipid\", \"lipoprotein\", \"lipstick\",\n+\"liquid\", \"liquidity\", \"liquor\", \"list\", \"listening\", \"listing\", \"literate\", \"literature\", \"litigation\", \"litmus\", \"litter\", \"littleneck\",\n+\"liver\", \"livestock\", \"living\", \"lizard\", \"llama\", \"load\", \"loading\", \"loaf\", \"loafer\", \"loan\", \"lobby\", \"lobotomy\", \"lobster\", \"local\",\n+\"locality\", \"location\", \"lock\", \"locker\", \"locket\", \"locomotive\", \"locust\", \"lode\", \"loft\", \"log\", \"loggia\", \"logic\", \"login\", \"logistics\",\n+\"logo\", \"loincloth\", \"lollipop\", \"loneliness\", \"longboat\", \"longitude\", \"look\", \"lookout\", \"loop\", \"loophole\", \"loquat\", \"lord\", \"loss\",\n+\"lot\", \"lotion\", \"lottery\", \"lounge\", \"louse\", \"lout\", \"love\", \"lover\", \"lox\", \"loyalty\", \"luck\", \"luggage\", \"lumber\", \"lumberman\", \"lunch\",\n+\"luncheonette\", \"lunchmeat\", \"lunchroom\", \"lung\", \"lunge\", \"lust\", \"lute\", \"luxury\", \"lychee\", \"lycra\", \"lye\", \"lymphocyte\", \"lynx\",\n+\"lyocell\", \"lyre\", \"lyrics\", \"lysine\", \"mRNA\", \"macadamia\", \"macaroni\", \"macaroon\", \"macaw\", \"machine\", \"machinery\", \"macrame\", \"macro\",\n+\"macrofauna\", \"madam\", \"maelstrom\", \"maestro\", \"magazine\", \"maggot\", \"magic\", \"magnet\", \"magnitude\", \"maid\", \"maiden\", \"mail\", \"mailbox\",\n+\"mailer\", \"mailing\", \"mailman\", \"main\", \"mainland\", \"mainstream\", \"maintainer\", \"maintenance\", \"maize\", \"major\", \"majority\",\n+\"makeover\", \"maker\", \"makeup\", \"making\", \"male\", \"malice\", \"mall\", \"mallard\", \"mallet\", \"malnutrition\", \"mama\", \"mambo\", \"mammoth\", \"man\",\n+\"manacle\", \"management\", \"manager\", \"manatee\", \"mandarin\", \"mandate\", \"mandolin\", \"mangle\", \"mango\", \"mangrove\", \"manhunt\", \"maniac\",\n+\"manicure\", \"manifestation\", \"manipulation\", \"mankind\", \"manner\", \"manor\", \"mansard\", \"manservant\", \"mansion\", \"mantel\", \"mantle\", \"mantua\",\n+\"manufacturer\", \"manufacturing\", \"many\", \"map\", \"maple\", \"mapping\", \"maracas\", \"marathon\", \"marble\", \"march\", \"mare\", \"margarine\", \"margin\",\n+\"mariachi\", \"marimba\", \"marines\", \"marionberry\", \"mark\", \"marker\", \"market\", \"marketer\", \"marketing\", \"marketplace\", \"marksman\", \"markup\",\n+\"marmalade\", \"marriage\", \"marsh\", \"marshland\", \"marshmallow\", \"marten\", \"marxism\", \"mascara\", \"mask\", \"masonry\", \"mass\", \"massage\", \"mast\",\n+\"master\", \"masterpiece\", \"mastication\", \"mastoid\", \"mat\", \"match\", \"matchmaker\", \"mate\", \"material\", \"maternity\", \"math\", \"mathematics\",\n+\"matrix\", \"matter\", \"mattock\", \"mattress\", \"max\", \"maximum\", \"maybe\", \"mayonnaise\", \"mayor\", \"meadow\", \"meal\", \"mean\", \"meander\", \"meaning\",\n+\"means\", \"meantime\", \"measles\", \"measure\", \"measurement\", \"meat\", \"meatball\", \"meatloaf\", \"mecca\", \"mechanic\", \"mechanism\", \"med\", \"medal\",\n+\"media\", \"median\", \"medication\", \"medicine\", \"medium\", \"meet\", \"meeting\", \"melatonin\", \"melody\", \"melon\", \"member\", \"membership\", \"membrane\",\n+\"meme\", \"memo\", \"memorial\", \"memory\", \"men\", \"menopause\", \"menorah\", \"mention\", \"mentor\", \"menu\", \"merchandise\", \"merchant\", \"mercury\",\n+\"meridian\", \"meringue\", \"merit\", \"mesenchyme\", \"mess\", \"message\", \"messenger\", \"messy\", \"metabolite\", \"metal\", \"metallurgist\", \"metaphor\",\n+\"meteor\", \"meteorology\", \"meter\", \"methane\", \"method\", \"methodology\", \"metric\", \"metro\", \"metronome\", \"mezzanine\", \"microlending\", \"micronutrient\",\n+\"microphone\", \"microwave\", \"midden\", \"middle\", \"middleman\", \"midline\", \"midnight\", \"midwife\", \"might\", \"migrant\", \"migration\",\n+\"mile\", \"mileage\", \"milepost\", \"milestone\", \"military\", \"milk\", \"milkshake\", \"mill\", \"millennium\", \"millet\", \"millimeter\", \"million\",\n+\"millisecond\", \"millstone\", \"mime\", \"mimosa\", \"min\", \"mincemeat\", \"mind\", \"mine\", \"mineral\", \"mineshaft\", \"mini\", \"minibus\",\n+\"minimalism\", \"minimum\", \"mining\", \"minion\", \"minister\", \"mink\", \"minnow\", \"minor\", \"minority\", \"mint\", \"minute\", \"miracle\",\n+\"mirror\", \"miscarriage\", \"miscommunication\", \"misfit\", \"misnomer\", \"misogyny\", \"misplacement\", \"misreading\", \"misrepresentation\", \"miss\",\n+\"missile\", \"mission\", \"missionary\", \"mist\", \"mistake\", \"mister\", \"misunderstand\", \"miter\", \"mitten\", \"mix\", \"mixer\", \"mixture\", \"moai\",\n+\"moat\", \"mob\", \"mobile\", \"mobility\", \"mobster\", \"moccasins\", \"mocha\", \"mochi\", \"mode\", \"model\", \"modeling\", \"modem\", \"modernist\", \"modernity\",\n+\"modification\", \"molar\", \"molasses\", \"molding\", \"mole\", \"molecule\", \"mom\", \"moment\", \"monastery\", \"monasticism\", \"money\", \"monger\", \"monitor\",\n+\"monitoring\", \"monk\", \"monkey\", \"monocle\", \"monopoly\", \"monotheism\", \"monsoon\", \"monster\", \"month\", \"monument\", \"mood\", \"moody\", \"moon\",\n+\"moonlight\", \"moonscape\", \"moonshine\", \"moose\", \"mop\", \"morale\", \"morbid\", \"morbidity\", \"morning\", \"moron\", \"morphology\", \"morsel\", \"mortal\",\n+\"mortality\", \"mortgage\", \"mortise\", \"mosque\", \"mosquito\", \"most\", \"motel\", \"moth\", \"mother\", \"motion\", \"motivation\",\n+\"motive\", \"motor\", \"motorboat\", \"motorcar\", \"motorcycle\", \"mound\", \"mountain\", \"mouse\", \"mouser\", \"mousse\", \"moustache\", \"mouth\", \"mouton\",\n+\"movement\", \"mover\", \"movie\", \"mower\", \"mozzarella\", \"mud\", \"muffin\", \"mug\", \"mukluk\", \"mule\", \"multimedia\", \"murder\", \"muscat\", \"muscatel\",\n+\"muscle\", \"musculature\", \"museum\", \"mushroom\", \"music\", \"musician\", \"muskrat\", \"mussel\", \"mustache\", \"mustard\",\n+\"mutation\", \"mutt\", \"mutton\", \"mycoplasma\", \"mystery\", \"myth\", \"mythology\", \"nail\", \"name\", \"naming\", \"nanoparticle\", \"napkin\", \"narrative\",\n+\"nasal\", \"nation\", \"nationality\", \"native\", \"naturalisation\", \"nature\", \"navigation\", \"necessity\", \"neck\", \"necklace\", \"necktie\", \"nectar\",\n+\"nectarine\", \"need\", \"needle\", \"neglect\", \"negligee\", \"negotiation\", \"neighbor\", \"neighborhood\", \"neighbour\", \"neighbourhood\", \"neologism\",\n+\"neon\", \"neonate\", \"nephew\", \"nerve\", \"nest\", \"nestling\", \"nestmate\", \"net\", \"netball\", \"netbook\", \"netsuke\", \"network\", \"networking\",\n+\"neurobiologist\", \"neuron\", \"neuropathologist\", \"neuropsychiatry\", \"news\", \"newsletter\", \"newspaper\", \"newsprint\", \"newsstand\", \"nexus\",\n+\"nibble\", \"nicety\", \"niche\", \"nick\", \"nickel\", \"nickname\", \"niece\", \"night\", \"nightclub\", \"nightgown\", \"nightingale\", \"nightlife\", \"nightlight\",\n+\"nightmare\", \"ninja\", \"nit\", \"nitrogen\", \"nobody\", \"nod\", \"node\", \"noir\", \"noise\", \"nonbeliever\", \"nonconformist\", \"nondisclosure\", \"nonsense\",\n+\"noodle\", \"noodles\", \"noon\", \"norm\", \"normal\", \"normalisation\", \"normalization\", \"north\", \"nose\", \"notation\", \"note\", \"notebook\", \"notepad\",\n+\"nothing\", \"notice\", \"notion\", \"notoriety\", \"nougat\", \"noun\", \"nourishment\", \"novel\", \"nucleotidase\", \"nucleotide\", \"nudge\", \"nuke\",\n+\"number\", \"numeracy\", \"numeric\", \"numismatist\", \"nun\", \"nurse\", \"nursery\", \"nursing\", \"nurture\", \"nut\", \"nutmeg\", \"nutrient\", \"nutrition\",\n+\"nylon\", \"nymph\", \"oak\", \"oar\", \"oasis\", \"oat\", \"oatmeal\", \"oats\", \"obedience\", \"obesity\", \"obi\", \"object\", \"objection\", \"objective\",\n+\"obligation\", \"oboe\", \"observation\", \"observatory\", \"obsession\", \"obsidian\", \"obstacle\", \"occasion\", \"occupation\", \"occurrence\", \"ocean\",\n+\"ocelot\", \"octagon\", \"octave\", \"octavo\", \"octet\", \"octopus\", \"odometer\", \"odyssey\", \"oeuvre\", \"offence\", \"offense\", \"offer\",\n+\"offering\", \"office\", \"officer\", \"official\", \"offset\", \"oil\", \"okra\", \"oldie\", \"oleo\", \"olive\", \"omega\", \"omelet\", \"omission\", \"omnivore\",\n+\"oncology\", \"onion\", \"online\", \"onset\", \"opening\", \"opera\", \"operating\", \"operation\", \"operator\", \"ophthalmologist\", \"opinion\", \"opium\",\n+\"opossum\", \"opponent\", \"opportunist\", \"opportunity\", \"opposite\", \"opposition\", \"optimal\", \"optimisation\", \"optimist\", \"optimization\",\n+\"option\", \"orange\", \"orangutan\", \"orator\", \"orchard\", \"orchestra\", \"orchid\", \"order\", \"ordinary\", \"ordination\", \"ore\", \"oregano\", \"organ\",\n+\"organisation\", \"organising\", \"organization\", \"organizing\", \"orient\", \"orientation\", \"origin\", \"original\", \"originality\", \"ornament\",\n+\"osmosis\", \"osprey\", \"ostrich\", \"other\", \"otter\", \"ottoman\", \"ounce\", \"outback\", \"outcome\", \"outfielder\", \"outfit\", \"outhouse\", \"outlaw\",\n+\"outlay\", \"outlet\", \"outline\", \"outlook\", \"output\", \"outrage\", \"outrigger\", \"outrun\", \"outset\", \"outside\", \"oval\", \"ovary\", \"oven\", \"overcharge\",\n+\"overclocking\", \"overcoat\", \"overexertion\", \"overflight\", \"overhead\", \"overheard\", \"overload\", \"overnighter\", \"overshoot\", \"oversight\",\n+\"overview\", \"overweight\", \"owl\", \"owner\", \"ownership\", \"ox\", \"oxford\", \"oxygen\", \"oyster\", \"ozone\", \"pace\", \"pacemaker\", \"pack\", \"package\",\n+\"packaging\", \"packet\", \"pad\", \"paddle\", \"paddock\", \"pagan\", \"page\", \"pagoda\", \"pail\", \"pain\", \"paint\", \"painter\", \"painting\", \"paintwork\",\n+\"pair\", \"pajamas\", \"palace\", \"palate\", \"palm\", \"pamphlet\", \"pan\", \"pancake\", \"pancreas\", \"panda\", \"panel\", \"panic\", \"pannier\", \"panpipe\",\n+\"pansy\", \"panther\", \"panties\", \"pantologist\", \"pantology\", \"pantry\", \"pants\", \"pantsuit\", \"panty\", \"pantyhose\", \"papa\", \"papaya\", \"paper\",\n+\"paperback\", \"paperwork\", \"parable\", \"parachute\", \"parade\", \"paradise\", \"paragraph\", \"parallelogram\", \"paramecium\", \"paramedic\", \"parameter\",\n+\"paranoia\", \"parcel\", \"parchment\", \"pard\", \"pardon\", \"parent\", \"parenthesis\", \"parenting\", \"park\", \"parka\", \"parking\", \"parliament\",\n+\"parole\", \"parrot\", \"parser\", \"parsley\", \"parsnip\", \"part\", \"participant\", \"participation\", \"particle\", \"particular\", \"partner\", \"partnership\",\n+\"partridge\", \"party\", \"pass\", \"passage\", \"passbook\", \"passenger\", \"passing\", \"passion\", \"passive\", \"passport\", \"password\", \"past\", \"pasta\",\n+\"paste\", \"pastor\", \"pastoralist\", \"pastry\", \"pasture\", \"pat\", \"patch\", \"pate\", \"patent\", \"patentee\", \"path\", \"pathogenesis\", \"pathology\",\n+\"pathway\", \"patience\", \"patient\", \"patina\", \"patio\", \"patriarch\", \"patrimony\", \"patriot\", \"patrol\", \"patroller\", \"patrolling\", \"patron\",\n+\"pattern\", \"patty\", \"pattypan\", \"pause\", \"pavement\", \"pavilion\", \"paw\", \"pawnshop\", \"pay\", \"payee\", \"payment\", \"payoff\", \"pea\", \"peace\",\n+\"peach\", \"peacoat\", \"peacock\", \"peak\", \"peanut\", \"pear\", \"pearl\", \"peasant\", \"pecan\", \"pecker\", \"pedal\", \"peek\", \"peen\", \"peer\",\n+\"pegboard\", \"pelican\", \"pelt\", \"pen\", \"penalty\", \"pence\", \"pencil\", \"pendant\", \"pendulum\", \"penguin\", \"penicillin\", \"peninsula\", \"penis\",\n+\"pennant\", \"penny\", \"pension\", \"pentagon\", \"peony\", \"people\", \"pepper\", \"pepperoni\", \"percent\", \"percentage\", \"perception\", \"perch\",\n+\"perennial\", \"perfection\", \"performance\", \"perfume\", \"period\", \"periodical\", \"peripheral\", \"permafrost\", \"permission\", \"permit\", \"perp\",\n+\"perpendicular\", \"persimmon\", \"person\", \"personal\", \"personality\", \"personnel\", \"perspective\", \"pest\", \"pet\", \"petal\", \"petition\", \"petitioner\",\n+\"petticoat\", \"pew\", \"pharmacist\", \"pharmacopoeia\", \"phase\", \"pheasant\", \"phenomenon\", \"phenotype\", \"pheromone\", \"philanthropy\", \"philosopher\",\n+\"philosophy\", \"phone\", \"phosphate\", \"photo\", \"photodiode\", \"photograph\", \"photographer\", \"photography\", \"photoreceptor\", \"phrase\", \"phrasing\",\n+\"physical\", \"physics\", \"physiology\", \"pianist\", \"piano\", \"piccolo\", \"pick\", \"pickax\", \"pickaxe\", \"picket\", \"pickle\", \"pickup\", \"picnic\",\n+\"picture\", \"picturesque\", \"pie\", \"piece\", \"pier\", \"piety\", \"pig\", \"pigeon\", \"piglet\", \"pigpen\", \"pigsty\", \"pike\", \"pilaf\", \"pile\", \"pilgrim\",\n+\"pilgrimage\", \"pill\", \"pillar\", \"pillbox\", \"pillow\", \"pilot\", \"pimp\", \"pimple\", \"pin\", \"pinafore\", \"pine\", \"pineapple\",\n+\"pinecone\", \"ping\", \"pink\", \"pinkie\", \"pinot\", \"pinstripe\", \"pint\", \"pinto\", \"pinworm\", \"pioneer\", \"pipe\", \"pipeline\", \"piracy\", \"pirate\",\n+\"pistol\", \"pit\", \"pita\", \"pitch\", \"pitcher\", \"pitching\", \"pith\", \"pizza\", \"place\", \"placebo\", \"placement\", \"placode\", \"plagiarism\",\n+\"plain\", \"plaintiff\", \"plan\", \"plane\", \"planet\", \"planning\", \"plant\", \"plantation\", \"planter\", \"planula\", \"plaster\", \"plasterboard\",\n+\"plastic\", \"plate\", \"platelet\", \"platform\", \"platinum\", \"platter\", \"platypus\", \"play\", \"player\", \"playground\", \"playroom\", \"playwright\",\n+\"plea\", \"pleasure\", \"pleat\", \"pledge\", \"plenty\", \"plier\", \"pliers\", \"plight\", \"plot\", \"plough\", \"plover\", \"plow\", \"plowman\", \"plug\",\n+\"plugin\", \"plum\", \"plumber\", \"plume\", \"plunger\", \"plywood\", \"pneumonia\", \"pocket\", \"pocketbook\", \"pod\", \"podcast\", \"poem\",\n+\"poet\", \"poetry\", \"poignance\", \"point\", \"poison\", \"poisoning\", \"poker\", \"polarisation\", \"polarization\", \"pole\", \"polenta\", \"police\",\n+\"policeman\", \"policy\", \"polish\", \"politician\", \"politics\", \"poll\", \"polliwog\", \"pollutant\", \"pollution\", \"polo\", \"polyester\", \"polyp\",\n+\"pomegranate\", \"pomelo\", \"pompom\", \"poncho\", \"pond\", \"pony\", \"pool\", \"poor\", \"pop\", \"popcorn\", \"poppy\", \"popsicle\", \"popularity\", \"population\",\n+\"populist\", \"porcelain\", \"porch\", \"porcupine\", \"pork\", \"porpoise\", \"port\", \"porter\", \"portfolio\", \"porthole\", \"portion\", \"portrait\",\n+\"position\", \"possession\", \"possibility\", \"possible\", \"post\", \"postage\", \"postbox\", \"poster\", \"posterior\", \"postfix\", \"pot\", \"potato\",\n+\"potential\", \"pottery\", \"potty\", \"pouch\", \"poultry\", \"pound\", \"pounding\", \"poverty\", \"powder\", \"power\", \"practice\", \"practitioner\", \"prairie\",\n+\"praise\", \"pray\", \"prayer\", \"precedence\", \"precedent\", \"precipitation\", \"precision\", \"predecessor\", \"preface\", \"preference\", \"prefix\",\n+\"pregnancy\", \"prejudice\", \"prelude\", \"premeditation\", \"premier\", \"premise\", \"premium\", \"preoccupation\", \"preparation\", \"prescription\",\n+\"presence\", \"present\", \"presentation\", \"preservation\", \"preserves\", \"presidency\", \"president\", \"press\", \"pressroom\", \"pressure\", \"pressurisation\",\n+\"pressurization\", \"prestige\", \"presume\", \"pretzel\", \"prevalence\", \"prevention\", \"prey\", \"price\", \"pricing\", \"pride\", \"priest\", \"priesthood\",\n+\"primary\", \"primate\", \"prince\", \"princess\", \"principal\", \"principle\", \"print\", \"printer\", \"printing\", \"prior\", \"priority\", \"prison\",\n+\"prisoner\", \"privacy\", \"private\", \"privilege\", \"prize\", \"prizefight\", \"probability\", \"probation\", \"probe\", \"problem\", \"procedure\", \"proceedings\",\n+\"process\", \"processing\", \"processor\", \"proctor\", \"procurement\", \"produce\", \"producer\", \"product\", \"production\", \"productivity\", \"profession\",\n+\"professional\", \"professor\", \"profile\", \"profit\", \"progenitor\", \"program\", \"programme\", \"programming\", \"progress\", \"progression\", \"prohibition\",\n+\"project\", \"proliferation\", \"promenade\", \"promise\", \"promotion\", \"prompt\", \"pronoun\", \"pronunciation\", \"proof\", \"propaganda\",\n+\"propane\", \"property\", \"prophet\", \"proponent\", \"proportion\", \"proposal\", \"proposition\", \"proprietor\", \"prose\", \"prosecution\", \"prosecutor\",\n+\"prospect\", \"prosperity\", \"prostacyclin\", \"prostanoid\", \"prostrate\", \"protection\", \"protein\", \"protest\", \"protocol\", \"providence\", \"provider\",\n+\"province\", \"provision\", \"prow\", \"proximal\", \"proximity\", \"prune\", \"pruner\", \"pseudocode\", \"pseudoscience\", \"psychiatrist\", \"psychoanalyst\",\n+\"psychologist\", \"psychology\", \"ptarmigan\", \"pub\", \"public\", \"publication\", \"publicity\", \"publisher\", \"publishing\", \"pudding\", \"puddle\",\n+\"puffin\", \"pug\", \"puggle\", \"pulley\", \"pulse\", \"puma\", \"pump\", \"pumpernickel\", \"pumpkin\", \"pumpkinseed\", \"pun\", \"punch\", \"punctuation\",\n+\"punishment\", \"pup\", \"pupa\", \"pupil\", \"puppet\", \"puppy\", \"purchase\", \"puritan\", \"purity\", \"purple\", \"purpose\", \"purr\", \"purse\", \"pursuit\",\n+\"push\", \"pusher\", \"put\", \"puzzle\", \"pyramid\", \"pyridine\", \"quadrant\", \"quail\", \"qualification\", \"quality\", \"quantity\", \"quart\", \"quarter\",\n+\"quartet\", \"quartz\", \"queen\", \"query\", \"quest\", \"question\", \"questioner\", \"questionnaire\", \"quiche\", \"quicksand\", \"quiet\", \"quill\", \"quilt\",\n+\"quince\", \"quinoa\", \"quit\", \"quiver\", \"quota\", \"quotation\", \"quote\", \"rabbi\", \"rabbit\", \"raccoon\", \"race\", \"racer\", \"racing\", \"racism\",\n+\"racist\", \"rack\", \"radar\", \"radiator\", \"radio\", \"radiosonde\", \"radish\", \"raffle\", \"raft\", \"rag\", \"rage\", \"raid\", \"rail\", \"railing\", \"railroad\",\n+\"railway\", \"raiment\", \"rain\", \"rainbow\", \"raincoat\", \"rainmaker\", \"rainstorm\", \"rainy\", \"raise\", \"raisin\", \"rake\", \"rally\", \"ram\", \"rambler\",\n+\"ramen\", \"ramie\", \"ranch\", \"rancher\", \"randomisation\", \"randomization\", \"range\", \"ranger\", \"rank\", \"rap\", \"rape\", \"raspberry\", \"rat\",\n+\"rate\", \"ratepayer\", \"rating\", \"ratio\", \"rationale\", \"rations\", \"raven\", \"ravioli\", \"rawhide\", \"ray\", \"rayon\", \"razor\", \"reach\", \"reactant\",\n+\"reaction\", \"read\", \"reader\", \"readiness\", \"reading\", \"real\", \"reality\", \"realization\", \"realm\", \"reamer\", \"rear\", \"reason\", \"reasoning\",\n+\"rebel\", \"rebellion\", \"reboot\", \"recall\", \"recapitulation\", \"receipt\", \"receiver\", \"reception\", \"receptor\", \"recess\", \"recession\", \"recipe\",\n+\"recipient\", \"reciprocity\", \"reclamation\", \"recliner\", \"recognition\", \"recollection\", \"recommendation\", \"reconsideration\", \"record\",\n+\"recorder\", \"recording\", \"recovery\", \"recreation\", \"recruit\", \"rectangle\", \"red\", \"redesign\", \"redhead\", \"redirect\", \"rediscovery\", \"reduction\",\n+\"reef\", \"refectory\", \"reference\", \"referendum\", \"reflection\", \"reform\", \"refreshments\", \"refrigerator\", \"refuge\", \"refund\", \"refusal\",\n+\"refuse\", \"regard\", \"regime\", \"region\", \"regionalism\", \"register\", \"registration\", \"registry\", \"regret\", \"regulation\", \"regulator\",\n+\"rehospitalization\", \"reindeer\", \"reinscription\", \"reject\", \"relation\", \"relationship\", \"relative\", \"relaxation\", \"relay\", \"release\",\n+\"reliability\", \"relief\", \"religion\", \"relish\", \"reluctance\", \"remains\", \"remark\", \"reminder\", \"remnant\", \"remote\", \"removal\", \"renaissance\",\n+\"rent\", \"reorganisation\", \"reorganization\", \"repair\", \"reparation\", \"repayment\", \"repeat\", \"replacement\", \"replica\", \"replication\", \"reply\",\n+\"report\", \"reporter\", \"reporting\", \"repository\", \"representation\", \"representative\", \"reprocessing\", \"republic\", \"republican\", \"reputation\",\n+\"request\", \"requirement\", \"resale\", \"rescue\", \"research\", \"researcher\", \"resemblance\", \"reservation\", \"reserve\", \"reservoir\", \"reset\",\n+\"residence\", \"resident\", \"residue\", \"resist\", \"resistance\", \"resolution\", \"resolve\", \"resort\", \"resource\", \"respect\", \"respite\", \"response\",\n+\"responsibility\", \"rest\", \"restaurant\", \"restoration\", \"restriction\", \"restroom\", \"restructuring\", \"result\", \"resume\", \"retailer\", \"retention\",\n+\"rethinking\", \"retina\", \"retirement\", \"retouching\", \"retreat\", \"retrospect\", \"retrospective\", \"retrospectivity\", \"return\", \"reunion\",\n+\"revascularisation\", \"revascularization\", \"reveal\", \"revelation\", \"revenant\", \"revenge\", \"revenue\", \"reversal\", \"reverse\", \"review\",\n+\"revitalisation\", \"revitalization\", \"revival\", \"revolution\", \"revolver\", \"reward\", \"rhetoric\", \"rheumatism\", \"rhinoceros\", \"rhubarb\",\n+\"rhyme\", \"rhythm\", \"rib\", \"ribbon\", \"rice\", \"riddle\", \"ride\", \"rider\", \"ridge\", \"riding\", \"rifle\", \"right\", \"rim\", \"ring\", \"ringworm\",\n+\"riot\", \"rip\", \"ripple\", \"rise\", \"riser\", \"risk\", \"rite\", \"ritual\", \"river\", \"riverbed\", \"rivulet\", \"road\", \"roadway\", \"roar\", \"roast\",\n+\"robe\", \"robin\", \"robot\", \"robotics\", \"rock\", \"rocker\", \"rocket\", \"rod\", \"role\", \"roll\", \"roller\", \"romaine\", \"romance\",\n+\"roof\", \"room\", \"roommate\", \"rooster\", \"root\", \"rope\", \"rose\", \"rosemary\", \"roster\", \"rostrum\", \"rotation\", \"round\", \"roundabout\", \"route\",\n+\"router\", \"routine\", \"row\", \"rowboat\", \"rowing\", \"rubber\", \"rubric\", \"ruby\", \"ruckus\", \"rudiment\", \"ruffle\", \"rug\", \"rugby\",\n+\"ruin\", \"rule\", \"ruler\", \"ruling\", \"rum\", \"rumor\", \"run\", \"runaway\", \"runner\", \"running\", \"runway\", \"rush\", \"rust\", \"rutabaga\", \"rye\",\n+\"sabre\", \"sac\", \"sack\", \"saddle\", \"sadness\", \"safari\", \"safe\", \"safeguard\", \"safety\", \"saffron\", \"sage\", \"sail\", \"sailboat\", \"sailing\",\n+\"sailor\", \"saint\", \"sake\", \"salad\", \"salami\", \"salary\", \"sale\", \"salesman\", \"salmon\", \"salon\", \"saloon\", \"salsa\", \"salt\", \"salute\", \"samovar\",\n+\"sampan\", \"sample\", \"samurai\", \"sanction\", \"sanctity\", \"sanctuary\", \"sand\", \"sandal\", \"sandbar\", \"sandpaper\", \"sandwich\", \"sanity\", \"sardine\",\n+\"sari\", \"sarong\", \"sash\", \"satellite\", \"satin\", \"satire\", \"satisfaction\", \"sauce\", \"saucer\", \"sauerkraut\", \"sausage\", \"savage\", \"savannah\",\n+\"saving\", \"savings\", \"savior\", \"saviour\", \"savory\", \"saw\", \"saxophone\", \"scaffold\", \"scale\", \"scallion\", \"scallops\", \"scalp\", \"scam\",\n+\"scanner\", \"scarecrow\", \"scarf\", \"scarification\", \"scenario\", \"scene\", \"scenery\", \"scent\", \"schedule\", \"scheduling\", \"schema\", \"scheme\",\n+\"schizophrenic\", \"schnitzel\", \"scholar\", \"scholarship\", \"school\", \"schoolhouse\", \"schooner\", \"science\", \"scientist\", \"scimitar\", \"scissors\",\n+\"scooter\", \"scope\", \"score\", \"scorn\", \"scorpion\", \"scotch\", \"scout\", \"scow\", \"scrambled\", \"scrap\", \"scraper\", \"scratch\", \"screamer\",\n+\"screen\", \"screening\", \"screenwriting\", \"screw\", \"screwdriver\", \"scrim\", \"scrip\", \"script\", \"scripture\", \"scrutiny\", \"sculpting\",\n+\"sculptural\", \"sculpture\", \"sea\", \"seabass\", \"seafood\", \"seagull\", \"seal\", \"seaplane\", \"search\", \"seashore\", \"seaside\", \"season\", \"seat\",\n+\"seaweed\", \"second\", \"secrecy\", \"secret\", \"secretariat\", \"secretary\", \"secretion\", \"section\", \"sectional\", \"sector\", \"security\", \"sediment\",\n+\"seed\", \"seeder\", \"seeker\", \"seep\", \"segment\", \"seizure\", \"selection\", \"self\", \"seller\",\n+\"selling\", \"semantics\", \"semester\", \"semicircle\", \"semicolon\", \"semiconductor\", \"seminar\", \"senate\", \"senator\", \"sender\", \"senior\", \"sense\",\n+\"sensibility\", \"sensitive\", \"sensitivity\", \"sensor\", \"sentence\", \"sentencing\", \"sentiment\", \"sepal\", \"separation\", \"septicaemia\", \"sequel\",\n+\"sequence\", \"serial\", \"series\", \"sermon\", \"serum\", \"serval\", \"servant\", \"server\", \"service\", \"servitude\", \"sesame\", \"session\", \"set\",\n+\"setback\", \"setting\", \"settlement\", \"settler\", \"severity\", \"sewer\", \"sex\", \"sexuality\", \"shack\", \"shackle\", \"shade\", \"shadow\", \"shadowbox\",\n+\"shakedown\", \"shaker\", \"shallot\", \"shallows\", \"shame\", \"shampoo\", \"shanty\", \"shape\", \"share\", \"shareholder\", \"shark\", \"shaw\", \"shawl\",\n+\"shear\", \"shearling\", \"sheath\", \"shed\", \"sheep\", \"sheet\", \"shelf\", \"shell\", \"shelter\", \"sherbet\", \"sherry\", \"shield\", \"shift\", \"shin\",\n+\"shine\", \"shingle\", \"ship\", \"shipper\", \"shipping\", \"shipyard\", \"shirt\", \"shirtdress\", \"shoat\", \"shock\", \"shoe\",\n+\"shoehorn\", \"shoelace\", \"shoemaker\", \"shoes\", \"shoestring\", \"shofar\", \"shoot\", \"shootdown\", \"shop\", \"shopper\", \"shopping\", \"shore\", \"shoreline\",\n+\"short\", \"shortage\", \"shorts\", \"shortwave\", \"shot\", \"shoulder\", \"shout\", \"shovel\", \"show\", \"shower\", \"shred\", \"shrimp\",\n+\"shrine\", \"shutdown\", \"sibling\", \"sick\", \"sickness\", \"side\", \"sideboard\", \"sideburns\", \"sidecar\", \"sidestream\", \"sidewalk\", \"siding\",\n+\"siege\", \"sigh\", \"sight\", \"sightseeing\", \"sign\", \"signal\", \"signature\", \"signet\", \"significance\", \"signify\", \"signup\", \"silence\", \"silica\",\n+\"silicon\", \"silk\", \"silkworm\", \"sill\", \"silly\", \"silo\", \"silver\", \"similarity\", \"simple\", \"simplicity\", \"simplification\", \"simvastatin\",\n+\"sin\", \"singer\", \"singing\", \"singular\", \"sink\", \"sinuosity\", \"sip\", \"sir\", \"sister\", \"sitar\", \"site\", \"situation\", \"size\",\n+\"skate\", \"skating\", \"skean\", \"skeleton\", \"ski\", \"skiing\", \"skill\", \"skin\", \"skirt\", \"skull\", \"skullcap\", \"skullduggery\", \"skunk\", \"sky\",\n+\"skylight\", \"skyline\", \"skyscraper\", \"skywalk\", \"slang\", \"slapstick\", \"slash\", \"slate\", \"slavery\", \"slaw\", \"sled\", \"sledge\",\n+\"sleep\", \"sleepiness\", \"sleeping\", \"sleet\", \"sleuth\", \"slice\", \"slide\", \"slider\", \"slime\", \"slip\", \"slipper\", \"slippers\", \"slope\", \"slot\",\n+\"sloth\", \"slump\", \"smell\", \"smelting\", \"smile\", \"smith\", \"smock\", \"smog\", \"smoke\", \"smoking\", \"smolt\", \"smuggling\", \"snack\", \"snail\",\n+\"snake\", \"snakebite\", \"snap\", \"snarl\", \"sneaker\", \"sneakers\", \"sneeze\", \"sniffle\", \"snob\", \"snorer\", \"snow\", \"snowboarding\", \"snowflake\",\n+\"snowman\", \"snowmobiling\", \"snowplow\", \"snowstorm\", \"snowsuit\", \"snuck\", \"snug\", \"snuggle\", \"soap\", \"soccer\", \"socialism\", \"socialist\",\n+\"society\", \"sociology\", \"sock\", \"socks\", \"soda\", \"sofa\", \"softball\", \"softdrink\", \"softening\", \"software\", \"soil\", \"soldier\", \"sole\",\n+\"solicitation\", \"solicitor\", \"solidarity\", \"solidity\", \"soliloquy\", \"solitaire\", \"solution\", \"solvency\", \"sombrero\", \"somebody\", \"someone\",\n+\"someplace\", \"somersault\", \"something\", \"somewhere\", \"son\", \"sonar\", \"sonata\", \"song\", \"songbird\", \"sonnet\", \"soot\", \"sophomore\", \"soprano\",\n+\"sorbet\", \"sorghum\", \"sorrel\", \"sorrow\", \"sort\", \"soul\", \"soulmate\", \"sound\", \"soundness\", \"soup\", \"source\", \"sourwood\", \"sousaphone\",\n+\"south\", \"southeast\", \"souvenir\", \"sovereignty\", \"sow\", \"soy\", \"soybean\", \"space\", \"spacing\", \"spade\", \"spaghetti\", \"span\", \"spandex\",\n+\"spank\", \"sparerib\", \"spark\", \"sparrow\", \"spasm\", \"spat\", \"spatula\", \"spawn\", \"speaker\", \"speakerphone\", \"speaking\", \"spear\", \"spec\",\n+\"special\", \"specialist\", \"specialty\", \"species\", \"specification\", \"spectacle\", \"spectacles\", \"spectrograph\", \"spectrum\", \"speculation\",\n+\"speech\", \"speed\", \"speedboat\", \"spell\", \"spelling\", \"spelt\", \"spending\", \"sphere\", \"sphynx\", \"spice\", \"spider\", \"spiderling\", \"spike\",\n+\"spill\", \"spinach\", \"spine\", \"spiral\", \"spirit\", \"spiritual\", \"spirituality\", \"spit\", \"spite\", \"spleen\", \"splendor\", \"split\", \"spokesman\",\n+\"spokeswoman\", \"sponge\", \"sponsor\", \"sponsorship\", \"spool\", \"spoon\", \"spork\", \"sport\", \"sportsman\", \"spot\", \"spotlight\", \"spouse\", \"sprag\",\n+\"sprat\", \"spray\", \"spread\", \"spreadsheet\", \"spree\", \"spring\", \"sprinkles\", \"sprinter\", \"sprout\", \"spruce\", \"spud\", \"spume\", \"spur\", \"spy\",\n+\"spyglass\", \"square\", \"squash\", \"squatter\", \"squeegee\", \"squid\", \"squirrel\", \"stab\", \"stability\", \"stable\", \"stack\", \"stacking\", \"stadium\",\n+\"staff\", \"stag\", \"stage\", \"stain\", \"stair\", \"staircase\", \"stake\", \"stalk\", \"stall\", \"stallion\", \"stamen\", \"stamina\", \"stamp\", \"stance\",\n+\"stand\", \"standard\", \"standardisation\", \"standardization\", \"standing\", \"standoff\", \"standpoint\", \"star\", \"starboard\", \"start\", \"starter\",\n+\"state\", \"statement\", \"statin\", \"station\", \"statistic\", \"statistics\", \"statue\", \"status\", \"statute\", \"stay\", \"steak\",\n+\"stealth\", \"steam\", \"steamroller\", \"steel\", \"steeple\", \"stem\", \"stench\", \"stencil\", \"step\",\n+\"stepdaughter\", \"stepmother\",\n+\"stepson\", \"stereo\", \"stew\", \"steward\", \"stick\", \"sticker\", \"stiletto\", \"still\", \"stimulation\", \"stimulus\", \"sting\",\n+\"stinger\", \"stitch\", \"stitcher\", \"stock\", \"stockings\", \"stole\", \"stomach\", \"stone\", \"stonework\", \"stool\",\n+\"stop\", \"stopsign\", \"stopwatch\", \"storage\", \"store\", \"storey\", \"storm\", \"story\", \"storyboard\", \"stot\", \"stove\", \"strait\",\n+\"strand\", \"stranger\", \"strap\", \"strategy\", \"straw\", \"strawberry\", \"strawman\", \"stream\", \"street\", \"streetcar\", \"strength\", \"stress\",\n+\"stretch\", \"strife\", \"strike\", \"string\", \"strip\", \"stripe\", \"strobe\", \"stroke\", \"structure\", \"strudel\", \"struggle\", \"stucco\", \"stud\",\n+\"student\", \"studio\", \"study\", \"stuff\", \"stumbling\", \"stump\", \"stupidity\", \"sturgeon\", \"sty\", \"style\", \"styling\", \"stylus\", \"sub\", \"subcomponent\",\n+\"subconscious\", \"subcontractor\", \"subexpression\", \"subgroup\", \"subject\", \"submarine\", \"submitter\", \"subprime\", \"subroutine\", \"subscription\",\n+\"subsection\", \"subset\", \"subsidence\", \"subsidiary\", \"subsidy\", \"substance\", \"substitution\", \"subtitle\", \"suburb\", \"subway\", \"success\",\n+\"succotash\", \"suck\", \"sucker\", \"suede\", \"suet\", \"suffocation\", \"sugar\", \"suggestion\", \"suicide\", \"suit\", \"suitcase\", \"suite\", \"sulfur\",\n+\"sultan\", \"sum\", \"summary\", \"summer\", \"summit\", \"sun\", \"sunbeam\", \"sunbonnet\", \"sundae\", \"sunday\", \"sundial\", \"sunflower\", \"sunglasses\",\n+\"sunlamp\", \"sunlight\", \"sunrise\", \"sunroom\", \"sunset\", \"sunshine\", \"superiority\", \"supermarket\", \"supernatural\", \"supervision\", \"supervisor\",\n+\"supper\", \"supplement\", \"supplier\", \"supply\", \"support\", \"supporter\", \"suppression\", \"supreme\", \"surface\", \"surfboard\", \"surge\", \"surgeon\",\n+\"surgery\", \"surname\", \"surplus\", \"surprise\", \"surround\", \"surroundings\", \"surrounds\", \"survey\", \"survival\", \"survivor\", \"sushi\", \"suspect\",\n+\"suspenders\", \"suspension\", \"sustainment\", \"sustenance\", \"swallow\", \"swamp\", \"swan\", \"swanling\", \"swath\", \"sweat\", \"sweater\", \"sweatshirt\",\n+\"sweatshop\", \"sweatsuit\", \"sweets\", \"swell\", \"swim\", \"swimming\", \"swimsuit\", \"swine\", \"swing\", \"switch\", \"switchboard\", \"switching\",\n+\"swivel\", \"sword\", \"swordfight\", \"swordfish\", \"sycamore\", \"symbol\", \"symmetry\", \"sympathy\", \"symptom\", \"syndicate\", \"syndrome\", \"synergy\",\n+\"synod\", \"synonym\", \"synthesis\", \"syrup\", \"system\", \"tab\", \"tabby\", \"tabernacle\", \"table\", \"tablecloth\", \"tablet\", \"tabletop\",\n+\"tachometer\", \"tackle\", \"taco\", \"tactics\", \"tactile\", \"tadpole\", \"tag\", \"tail\", \"tailbud\", \"tailor\", \"tailspin\", \"takeover\",\n+\"tale\", \"talent\", \"talk\", \"talking\", \"tamale\", \"tambour\", \"tambourine\", \"tan\", \"tandem\", \"tangerine\", \"tank\",\n+\"tanker\", \"tankful\", \"tap\", \"tape\", \"tapioca\", \"target\", \"taro\", \"tarragon\", \"tart\", \"task\", \"tassel\", \"taste\", \"tatami\", \"tattler\",\n+\"tattoo\", \"tavern\", \"tax\", \"taxi\", \"taxicab\", \"taxpayer\", \"tea\", \"teacher\", \"teaching\", \"team\", \"teammate\", \"teapot\", \"tear\", \"tech\",\n+\"technician\", \"technique\", \"technologist\", \"technology\", \"tectonics\", \"teen\", \"teenager\", \"teepee\", \"telephone\", \"telescreen\", \"teletype\",\n+\"television\", \"tell\", \"teller\", \"temp\", \"temper\", \"temperature\", \"temple\", \"tempo\", \"temporariness\", \"temporary\", \"temptation\", \"temptress\",\n+\"tenant\", \"tendency\", \"tender\", \"tenement\", \"tenet\", \"tennis\", \"tenor\", \"tension\", \"tensor\", \"tent\", \"tentacle\", \"tenth\", \"tepee\", \"teriyaki\",\n+\"term\", \"terminal\", \"termination\", \"terminology\", \"termite\", \"terrace\", \"terracotta\", \"terrapin\", \"terrarium\", \"territory\", \"terror\",\n+\"terrorism\", \"terrorist\", \"test\", \"testament\", \"testimonial\", \"testimony\", \"testing\", \"text\", \"textbook\", \"textual\", \"texture\", \"thanks\",\n+\"thaw\", \"theater\", \"theft\", \"theism\", \"theme\", \"theology\", \"theory\", \"therapist\", \"therapy\", \"thermals\", \"thermometer\", \"thermostat\",\n+\"thesis\", \"thickness\", \"thief\", \"thigh\", \"thing\", \"thinking\", \"thirst\", \"thistle\", \"thong\", \"thongs\", \"thorn\", \"thought\", \"thousand\",\n+\"thread\", \"threat\", \"threshold\", \"thrift\", \"thrill\", \"throat\", \"throne\", \"thrush\", \"thrust\", \"thug\", \"thumb\", \"thump\", \"thunder\", \"thunderbolt\",\n+\"thunderhead\", \"thunderstorm\", \"thyme\", \"tiara\", \"tic\", \"tick\", \"ticket\", \"tide\", \"tie\", \"tiger\", \"tights\", \"tile\", \"till\", \"tilt\", \"timbale\",\n+\"timber\", \"time\", \"timeline\", \"timeout\", \"timer\", \"timetable\", \"timing\", \"timpani\", \"tin\", \"tinderbox\", \"tinkle\", \"tintype\", \"tip\", \"tire\",\n+\"tissue\", \"titanium\", \"title\", \"toad\", \"toast\", \"toaster\", \"tobacco\", \"today\", \"toe\", \"toenail\", \"toffee\", \"tofu\", \"tog\", \"toga\", \"toilet\",\n+\"tolerance\", \"tolerant\", \"toll\", \"tomatillo\", \"tomato\", \"tomb\", \"tomography\", \"tomorrow\", \"ton\", \"tonality\", \"tone\", \"tongue\",\n+\"tonic\", \"tonight\", \"tool\", \"toot\", \"tooth\", \"toothbrush\", \"toothpaste\", \"toothpick\", \"top\", \"topic\", \"topsail\", \"toque\",\n+\"toreador\", \"tornado\", \"torso\", \"torte\", \"tortellini\", \"tortilla\", \"tortoise\", \"tosser\", \"total\", \"tote\", \"touch\", \"tour\",\n+\"tourism\", \"tourist\", \"tournament\", \"towel\", \"tower\", \"town\", \"townhouse\", \"township\", \"toy\", \"trace\", \"trachoma\", \"track\",\n+\"tracking\", \"tracksuit\", \"tract\", \"tractor\", \"trade\", \"trader\", \"trading\", \"tradition\", \"traditionalism\", \"traffic\", \"trafficker\", \"tragedy\",\n+\"trail\", \"trailer\", \"trailpatrol\", \"train\", \"trainer\", \"training\", \"trait\", \"tram\", \"tramp\", \"trance\", \"transaction\", \"transcript\", \"transfer\",\n+\"transformation\", \"transit\", \"transition\", \"translation\", \"transmission\", \"transom\", \"transparency\", \"transplantation\", \"transport\",\n+\"transportation\", \"trap\", \"trapdoor\", \"trapezium\", \"trapezoid\", \"trash\", \"travel\", \"traveler\", \"tray\", \"treasure\", \"treasury\", \"treat\",\n+\"treatment\", \"treaty\", \"tree\", \"trek\", \"trellis\", \"tremor\", \"trench\", \"trend\", \"triad\", \"trial\", \"triangle\", \"tribe\", \"tributary\", \"trick\",\n+\"trigger\", \"trigonometry\", \"trillion\", \"trim\", \"trinket\", \"trip\", \"tripod\", \"tritone\", \"triumph\", \"trolley\", \"trombone\", \"troop\", \"trooper\",\n+\"trophy\", \"trouble\", \"trousers\", \"trout\", \"trove\", \"trowel\", \"truck\", \"trumpet\", \"trunk\", \"trust\", \"trustee\", \"truth\", \"try\", \"tsunami\",\n+\"tub\", \"tuba\", \"tube\", \"tuber\", \"tug\", \"tugboat\", \"tuition\", \"tulip\", \"tumbler\", \"tummy\", \"tuna\", \"tune\", \"tunic\", \"tunnel\",\n+\"turban\", \"turf\", \"turkey\", \"turmeric\", \"turn\", \"turning\", \"turnip\", \"turnover\", \"turnstile\", \"turret\", \"turtle\", \"tusk\", \"tussle\", \"tutu\",\n+\"tuxedo\", \"tweet\", \"tweezers\", \"twig\", \"twilight\", \"twine\", \"twins\", \"twist\", \"twister\", \"twitter\", \"type\", \"typeface\", \"typewriter\",\n+\"typhoon\", \"ukulele\", \"ultimatum\", \"umbrella\", \"unblinking\", \"uncertainty\", \"uncle\", \"underclothes\", \"underestimate\", \"underground\",\n+\"underneath\", \"underpants\", \"underpass\", \"undershirt\", \"understanding\", \"understatement\", \"undertaker\", \"underwear\", \"underweight\", \"underwire\",\n+\"underwriting\", \"unemployment\", \"unibody\", \"uniform\", \"uniformity\", \"union\", \"unique\", \"unit\", \"unity\", \"universe\", \"university\", \"update\",\n+\"upgrade\", \"uplift\", \"upper\", \"upstairs\", \"upward\", \"urge\", \"urgency\", \"urn\", \"usage\", \"use\", \"user\", \"usher\", \"usual\", \"utensil\", \"utilisation\",\n+\"utility\", \"utilization\", \"vacation\", \"vaccine\", \"vacuum\", \"vagrant\", \"valance\", \"valentine\", \"validate\", \"validity\", \"valley\", \"valuable\",\n+\"value\", \"vampire\", \"van\", \"vanadyl\", \"vane\", \"vanilla\", \"vanity\", \"variability\", \"variable\", \"variant\", \"variation\", \"variety\", \"vascular\",\n+\"vase\", \"vault\", \"vaulting\", \"veal\", \"vector\", \"vegetable\", \"vegetarian\", \"vegetarianism\", \"vegetation\", \"vehicle\", \"veil\", \"vein\", \"veldt\",\n+\"vellum\", \"velocity\", \"velodrome\", \"velvet\", \"vendor\", \"veneer\", \"vengeance\", \"venison\", \"venom\", \"venti\", \"venture\", \"venue\", \"veranda\",\n+\"verb\", \"verdict\", \"verification\", \"vermicelli\", \"vernacular\", \"verse\", \"version\", \"vertigo\", \"verve\", \"vessel\", \"vest\", \"vestment\",\n+\"vet\", \"veteran\", \"veterinarian\", \"veto\", \"viability\", \"vibe\", \"vibraphone\", \"vibration\", \"vibrissae\", \"vice\", \"vicinity\", \"victim\",\n+\"victory\", \"video\", \"view\", \"viewer\", \"vignette\", \"villa\", \"village\", \"vine\", \"vinegar\", \"vineyard\", \"vintage\", \"vintner\", \"vinyl\", \"viola\",\n+\"violation\", \"violence\", \"violet\", \"violin\", \"virginal\", \"virtue\", \"virus\", \"visa\", \"viscose\", \"vise\", \"vision\", \"visit\", \"visitor\",\n+\"visor\", \"vista\", \"visual\", \"vitality\", \"vitamin\", \"vitro\", \"vivo\", \"vixen\", \"vodka\", \"vogue\", \"voice\", \"void\", \"vol\", \"volatility\",\n+\"volcano\", \"volleyball\", \"volume\", \"volunteer\", \"volunteering\", \"vomit\", \"vote\", \"voter\", \"voting\", \"voyage\", \"vulture\", \"wad\", \"wafer\",\n+\"waffle\", \"wage\", \"wagon\", \"waist\", \"waistband\", \"wait\", \"waiter\", \"waiting\", \"waitress\", \"waiver\", \"wake\", \"walk\", \"walker\", \"walking\",\n+\"walkway\", \"wall\", \"wallaby\", \"wallet\", \"walnut\", \"walrus\", \"wampum\", \"wannabe\", \"want\", \"war\", \"warden\", \"wardrobe\", \"warfare\", \"warlock\",\n+\"warlord\", \"warming\", \"warmth\", \"warning\", \"warrant\", \"warren\", \"warrior\", \"wasabi\", \"wash\", \"washbasin\", \"washcloth\", \"washer\",\n+\"washtub\", \"wasp\", \"waste\", \"wastebasket\", \"wasting\", \"watch\", \"watcher\", \"watchmaker\", \"water\", \"waterbed\", \"watercress\", \"waterfall\",\n+\"waterfront\", \"watermelon\", \"waterskiing\", \"waterspout\", \"waterwheel\", \"wave\", \"waveform\", \"wax\", \"way\", \"weakness\", \"wealth\", \"weapon\",\n+\"wear\", \"weasel\", \"weather\", \"web\", \"webinar\", \"webmail\", \"webpage\", \"website\", \"wedding\", \"wedge\", \"weed\", \"weeder\", \"weedkiller\", \"week\",\n+\"weekend\", \"weekender\", \"weight\", \"weird\", \"welcome\", \"welfare\", \"well\", \"west\", \"western\", \"wetland\", \"wetsuit\",\n+\"whack\", \"whale\", \"wharf\", \"wheat\", \"wheel\", \"whelp\", \"whey\", \"whip\", \"whirlpool\", \"whirlwind\", \"whisker\", \"whiskey\", \"whisper\", \"whistle\",\n+\"white\", \"whole\", \"wholesale\", \"wholesaler\", \"whorl\", \"wick\", \"widget\", \"widow\", \"width\", \"wife\", \"wifi\", \"wild\", \"wildebeest\", \"wilderness\",\n+\"wildlife\", \"will\", \"willingness\", \"willow\", \"win\", \"wind\", \"windage\", \"window\", \"windscreen\", \"windshield\", \"wine\", \"winery\",\n+\"wing\", \"wingman\", \"wingtip\", \"wink\", \"winner\", \"winter\", \"wire\", \"wiretap\", \"wiring\", \"wisdom\", \"wiseguy\", \"wish\", \"wisteria\", \"wit\",\n+\"witch\", \"withdrawal\", \"witness\", \"wok\", \"wolf\", \"woman\", \"wombat\", \"wonder\", \"wont\", \"wood\", \"woodchuck\", \"woodland\",\n+\"woodshed\", \"woodwind\", \"wool\", \"woolens\", \"word\", \"wording\", \"work\", \"workbench\", \"worker\", \"workforce\", \"workhorse\", \"working\", \"workout\",\n+\"workplace\", \"workshop\", \"world\", \"worm\", \"worry\", \"worship\", \"worshiper\", \"worth\", \"wound\", \"wrap\", \"wraparound\", \"wrapper\", \"wrapping\",\n+\"wreck\", \"wrecker\", \"wren\", \"wrench\", \"wrestler\", \"wriggler\", \"wrinkle\", \"wrist\", \"writer\", \"writing\", \"wrong\", \"xylophone\", \"yacht\",\n+\"yahoo\", \"yak\", \"yam\", \"yang\", \"yard\", \"yarmulke\", \"yarn\", \"yawl\", \"year\", \"yeast\", \"yellow\", \"yellowjacket\", \"yesterday\", \"yew\", \"yin\",\n+\"yoga\", \"yogurt\", \"yoke\", \"yolk\", \"young\", \"youngster\", \"yourself\", \"youth\", \"yoyo\", \"yurt\", \"zampone\", \"zebra\", \"zebrafish\", \"zen\",\n+\"zephyr\", \"zero\", \"ziggurat\", \"zinc\", \"zipper\", \"zither\", \"zombie\", \"zone\", \"zoo\", \"zoologist\", \"zoology\", \"zucchini\"\n+};\n+\n+\n+std::string_view obfuscateWord(std::string_view src, WordMap & obfuscate_map, WordSet & used_nouns, SipHash hash_func)\n+{\n+    /// Prevent using too many nouns\n+    if (obfuscate_map.size() * 2 > nouns.size())\n+        throw Exception(\"Too many unique identifiers in queries\", ErrorCodes::TOO_MANY_TEMPORARY_COLUMNS);\n+\n+    std::string_view & mapped = obfuscate_map[src];\n+    if (!mapped.empty())\n+        return mapped;\n+\n+    hash_func.update(src.data(), src.size());\n+    std::string_view noun = nouns.begin()[hash_func.get64() % nouns.size()];\n+\n+    /// Prevent collisions\n+    while (!used_nouns.insert(noun).second)\n+    {\n+        hash_func.update('\\0');\n+        noun = nouns.begin()[hash_func.get64() % nouns.size()];\n+    }\n+\n+    mapped = noun;\n+    return mapped;\n+}\n+\n+\n+void obfuscateIdentifier(std::string_view src, WriteBuffer & result, WordMap & obfuscate_map, WordSet & used_nouns, SipHash hash_func)\n+{\n+    /// Find words in form 'snake_case', 'CamelCase' or 'ALL_CAPS'.\n+\n+    const char * src_pos = src.data();\n+    const char * src_end = src_pos + src.size();\n+\n+    const char * word_begin = src_pos;\n+    bool word_has_alphanumerics = false;\n+\n+    auto append_word = [&]\n+    {\n+        std::string_view word(word_begin, src_pos - word_begin);\n+\n+        if (keep_words.count(word))\n+        {\n+            result.write(word.data(), word.size());\n+        }\n+        else\n+        {\n+            std::string_view obfuscated_word = obfuscateWord(word, obfuscate_map, used_nouns, hash_func);\n+\n+            /// Match the style of source word.\n+            bool first_caps = !word.empty() && isUpperAlphaASCII(word[0]);\n+            bool all_caps = first_caps && word.size() >= 2 && isUpperAlphaASCII(word[1]);\n+\n+            for (size_t i = 0, size = obfuscated_word.size(); i < size; ++i)\n+            {\n+                if (all_caps || (i == 0 && first_caps))\n+                    result.write(toUpperIfAlphaASCII(obfuscated_word[i]));\n+                else\n+                    result.write(obfuscated_word[i]);\n+            }\n+        }\n+\n+        word_begin = src_pos;\n+        word_has_alphanumerics = false;\n+    };\n+\n+    while (src_pos < src_end)\n+    {\n+        if (isAlphaNumericASCII(src_pos[0]))\n+            word_has_alphanumerics = true;\n+\n+        if (word_has_alphanumerics && src_pos[0] == '_')\n+        {\n+            append_word();\n+            result.write('_');\n+            ++word_begin;\n+        }\n+        else if (word_has_alphanumerics && isUpperAlphaASCII(src_pos[0]) && isLowerAlphaASCII(src_pos[-1])) /// xX\n+        {\n+            append_word();\n+        }\n+\n+        ++src_pos;\n+    }\n+\n+    if (word_begin < src_pos)\n+        append_word();\n+}\n+\n+\n+void obfuscateLiteral(std::string_view src, WriteBuffer & result, SipHash hash_func)\n+{\n+    const char * src_pos = src.data();\n+    const char * src_end = src_pos + src.size();\n+\n+    while (src_pos < src_end)\n+    {\n+        /// Date\n+        if (src_pos + strlen(\"0000-00-00\") <= src_end\n+            && isNumericASCII(src_pos[0])\n+            && isNumericASCII(src_pos[1])\n+            && isNumericASCII(src_pos[2])\n+            && isNumericASCII(src_pos[3])\n+            && src_pos[4] == '-'\n+            && isNumericASCII(src_pos[5])\n+            && isNumericASCII(src_pos[6])\n+            && src_pos[7] == '-'\n+            && isNumericASCII(src_pos[8])\n+            && isNumericASCII(src_pos[9]))\n+        {\n+            DayNum date;\n+            ReadBufferFromMemory in(src_pos, strlen(\"0000-00-00\"));\n+            readDateText(date, in);\n+\n+            SipHash hash_func_date = hash_func;\n+\n+            if (date != 0)\n+            {\n+                date += hash_func_date.get64() % 256;\n+            }\n+\n+            writeDateText(date, result);\n+            src_pos += strlen(\"0000-00-00\");\n+\n+            /// DateTime\n+            if (src_pos + strlen(\" 00:00:00\") <= src_end\n+                && isNumericASCII(src_pos[1])\n+                && isNumericASCII(src_pos[2])\n+                && src_pos[3] == ':'\n+                && isNumericASCII(src_pos[4])\n+                && isNumericASCII(src_pos[5])\n+                && src_pos[6] == ':'\n+                && isNumericASCII(src_pos[7])\n+                && isNumericASCII(src_pos[8]))\n+            {\n+                result.write(src_pos[0]);\n+\n+                hash_func_date.update(src_pos + 1, strlen(\"00:00:00\"));\n+\n+                uint64_t hash_value = hash_func_date.get64();\n+                uint32_t new_hour = hash_value % 24;\n+                hash_value /= 24;\n+                uint32_t new_minute = hash_value % 60;\n+                hash_value /= 60;\n+                uint32_t new_second = hash_value % 60;\n+\n+                result.write('0' + (new_hour / 10));\n+                result.write('0' + (new_hour % 10));\n+                result.write(':');\n+                result.write('0' + (new_minute / 10));\n+                result.write('0' + (new_minute % 10));\n+                result.write(':');\n+                result.write('0' + (new_second / 10));\n+                result.write('0' + (new_second % 10));\n+\n+                src_pos += strlen(\" 00:00:00\");\n+            }\n+        }\n+        else if (isNumericASCII(src_pos[0]))\n+        {\n+            /// Number\n+            if (src_pos[0] == '0' || src_pos[0] == '1')\n+            {\n+                /// Keep zero and one as is.\n+                result.write(src_pos[0]);\n+                ++src_pos;\n+            }\n+            else\n+            {\n+                ReadBufferFromMemory in(src_pos, src_end - src_pos);\n+                uint64_t num;\n+                readIntText(num, in);\n+                SipHash hash_func_num = hash_func;\n+                hash_func_num.update(src_pos, in.count());\n+                src_pos += in.count();\n+\n+                /// Obfuscate number but keep it within same power of two range.\n+\n+                uint64_t obfuscated = hash_func_num.get64();\n+                uint64_t log2 = bitScanReverse(num);\n+\n+                obfuscated = (1ULL << log2) + obfuscated % (1ULL << log2);\n+                writeIntText(obfuscated, result);\n+            }\n+        }\n+        else if (src_pos + 1 < src_end\n+            && (src_pos[0] == 'e' || src_pos[0] == 'E')\n+            && (isNumericASCII(src_pos[1]) || (src_pos[1] == '-' && src_pos + 2 < src_end && isNumericASCII(src_pos[2]))))\n+        {\n+            /// Something like an exponent of floating point number. Keep it as is.\n+            /// But if it looks like a large number, overflow it into 16 bit.\n+\n+            result.write(src_pos[0]);\n+            ++src_pos;\n+\n+            ReadBufferFromMemory in(src_pos, src_end - src_pos);\n+            int16_t num;\n+            readIntText(num, in);\n+            writeIntText(num, result);\n+            src_pos += in.count();\n+        }\n+        else if (isAlphaASCII(src_pos[0]))\n+        {\n+            /// Alphabetial characters\n+\n+            const char * alpha_end = src_pos + 1;\n+            while (alpha_end < src_end && isAlphaASCII(*alpha_end))\n+                ++alpha_end;\n+\n+            hash_func.update(src_pos, alpha_end - src_pos);\n+            pcg64 rng(hash_func.get64());\n+\n+            while (src_pos < alpha_end)\n+            {\n+                auto random = rng();\n+                if (isLowerAlphaASCII(*src_pos))\n+                    result.write('a' + random % 26);\n+                else\n+                    result.write('A' + random % 26);\n+\n+                ++src_pos;\n+            }\n+        }\n+        else if (isASCII(src_pos[0]))\n+        {\n+            /// Punctuation, whitespace and control characters - keep as is.\n+\n+            result.write(src_pos[0]);\n+            ++src_pos;\n+        }\n+        else if (src_pos[0] <= '\\xBF')\n+        {\n+            /// Continuation of UTF-8 sequence.\n+            hash_func.update(src_pos[0]);\n+            uint64_t hash = hash_func.get64();\n+\n+            char c = 0x80 + hash % (0xC0 - 0x80);\n+            result.write(c);\n+\n+            ++src_pos;\n+        }\n+        else\n+        {\n+            /// Start of UTF-8 sequence.\n+            hash_func.update(src_pos[0]);\n+            uint64_t hash = hash_func.get64();\n+\n+            if (src_pos[0] < '\\xE0')\n+            {\n+                char c = 0xC0 + hash % 32;\n+                result.write(c);\n+            }\n+            else if (src_pos[0] < '\\xF0')\n+            {\n+                char c = 0xE0 + hash % 16;\n+                result.write(c);\n+            }\n+            else\n+            {\n+                char c = 0xF0 + hash % 8;\n+                result.write(c);\n+            }\n+\n+            ++src_pos;\n+        }\n+    }\n+}\n+\n+}\n+\n+\n+void obfuscateQueries(\n+    std::string_view src,\n+    WriteBuffer & result,\n+    WordMap & obfuscate_map,\n+    WordSet & used_nouns,\n+    SipHash hash_func,\n+    KnownIdentifierFunc known_identifier_func)\n+{\n+    Lexer lexer(src.data(), src.data() + src.size());\n+    while (true)\n+    {\n+        Token token = lexer.nextToken();\n+        std::string_view whole_token(token.begin, token.size());\n+\n+        if (token.isEnd())\n+            break;\n+\n+        if (token.type == TokenType::BareWord)\n+        {\n+            std::string whole_token_uppercase(whole_token);\n+            Poco::toUpperInPlace(whole_token_uppercase);\n+\n+            if (keywords.count(whole_token_uppercase)\n+                || known_identifier_func(whole_token))\n+            {\n+                /// Keep keywords as is.\n+                result.write(token.begin, token.size());\n+            }\n+            else\n+            {\n+                /// Obfuscate identifiers\n+                obfuscateIdentifier(whole_token, result, obfuscate_map, used_nouns, hash_func);\n+            }\n+        }\n+        else if (token.type == TokenType::QuotedIdentifier)\n+        {\n+            assert(token.size() >= 2);\n+\n+            /// Write quotes and the obfuscated content inside.\n+            result.write(*token.begin);\n+            obfuscateIdentifier({token.begin + 1, token.size() - 2}, result, obfuscate_map, used_nouns, hash_func);\n+            result.write(token.end[-1]);\n+        }\n+        else if (token.type == TokenType::Number)\n+        {\n+            obfuscateLiteral(whole_token, result, hash_func);\n+        }\n+        else if (token.type == TokenType::StringLiteral)\n+        {\n+            assert(token.size() >= 2);\n+\n+            result.write(*token.begin);\n+            obfuscateLiteral({token.begin + 1, token.size() - 2}, result, hash_func);\n+            result.write(token.end[-1]);\n+        }\n+        else if (token.type == TokenType::Comment)\n+        {\n+            /// Skip comments - they may contain confidential info.\n+        }\n+        else\n+        {\n+            /// Everyting else is kept as is.\n+            result.write(token.begin, token.size());\n+        }\n+    }\n+}\n+\n+}\n+\ndiff --git a/src/Parsers/obfuscateQueries.h b/src/Parsers/obfuscateQueries.h\nnew file mode 100644\nindex 000000000000..0a192649a928\n--- /dev/null\n+++ b/src/Parsers/obfuscateQueries.h\n@@ -0,0 +1,50 @@\n+#pragma once\n+\n+#include <string>\n+#include <unordered_set>\n+#include <unordered_map>\n+#include <string_view>\n+#include <functional>\n+\n+#include <Common/SipHash.h>\n+\n+\n+namespace DB\n+{\n+\n+class WriteBuffer;\n+\n+using WordMap = std::unordered_map<std::string_view, std::string_view>;\n+using WordSet = std::unordered_set<std::string_view>;\n+using KnownIdentifierFunc = std::function<bool(std::string_view)>;\n+\n+/** Takes one or multiple queries and obfuscates them by replacing identifiers to pseudorandom words\n+  * and replacing literals to random values, while preserving the structure of the queries and the general sense.\n+  *\n+  * Its intended use case is when the user wants to share their queries for testing and debugging\n+  * but is afraid to disclose the details about their column names, domain area and values of constants.\n+  *\n+  * It can obfuscate multiple queries in consistent fashion - identical names will be transformed to identical results.\n+  *\n+  * The function is not guaranteed to always give correct result or to be secure. It's implemented in \"best effort\" fashion.\n+  *\n+  * @param src - a string with source queries.\n+  * @param result - where the obfuscated queries will be written.\n+  * @param obfuscate_map - information about substituted identifiers\n+  *  (pass empty map at the beginning or reuse it from previous invocation to get consistent result)\n+  * @param used_nouns - information about words used for substitution\n+  *  (pass empty set at the beginning or reuse it from previous invocation to get consistent result)\n+  * @param hash_func - hash function that will be used as a pseudorandom source,\n+  *  it's recommended to preseed the function before passing here.\n+  * @param known_identifier_func - a function that returns true if identifier is known name\n+  *  (of function, aggregate function, etc. that should be kept as is). If it returns false, identifier will be obfuscated.\n+  */\n+void obfuscateQueries(\n+    std::string_view src,\n+    WriteBuffer & result,\n+    WordMap & obfuscate_map,\n+    WordSet & used_nouns,\n+    SipHash hash_func,\n+    KnownIdentifierFunc known_identifier_func);\n+\n+}\ndiff --git a/src/Parsers/ya.make b/src/Parsers/ya.make\nindex 0a0c301b7224..4ec97b8b55b9 100644\n--- a/src/Parsers/ya.make\n+++ b/src/Parsers/ya.make\n@@ -85,6 +85,7 @@ SRCS(\n     MySQL/ASTDeclareReference.cpp\n     MySQL/ASTDeclareSubPartition.cpp\n     MySQL/ASTDeclareTableOptions.cpp\n+    obfuscateQueries.cpp\n     parseDatabaseAndTableName.cpp\n     parseIdentifierOrStringLiteral.cpp\n     parseIntervalKind.cpp\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01508_query_obfuscator.reference b/tests/queries/0_stateless/01508_query_obfuscator.reference\nnew file mode 100644\nindex 000000000000..0064ac73a09a\n--- /dev/null\n+++ b/tests/queries/0_stateless/01508_query_obfuscator.reference\n@@ -0,0 +1,16 @@\n+SELECT 116, 'Qqfu://2020-02-10isqkc1203 sp 2000-05-27T18:38:01', 13e100, Residue_id_breakfastDevice, park(Innervation), avgIf(remote('128.0.0.1'))\n+SELECT shell_dust_tintype between crumb and shoat, case when peach >= 116 then bombing else null end\n+\n+SELECT\n+    ChimeID,\n+    Testimonial.ID, Testimonial.SipCauseway,\n+    TankfulTRUMPET,\n+    HUMIDITY.TermiteName, HUMIDITY.TermiteSculptural, HUMIDITY.TermiteGuilt, HUMIDITY.TermiteIntensity, HUMIDITY.SipCauseway, HUMIDITY.Coat\n+FROM merge.tinkle_efficiency\n+WHERE\n+    FaithSeller >= '2020-10-13' AND FaithSeller <= '2020-10-21'\n+    AND MandolinID = 30750384\n+    AND intHash32(GafferID) = 448362928 AND intHash64(GafferID) = 12572659331310383983\n+    AND ChimeID IN (8195672321757027078, 7079643623150622129, 5057006826979676478, 7886875230160484653, 7494974311229040743)\n+    AND Stot = 1\n+\ndiff --git a/tests/queries/0_stateless/01508_query_obfuscator.sh b/tests/queries/0_stateless/01508_query_obfuscator.sh\nnew file mode 100755\nindex 000000000000..d60e42489faa\n--- /dev/null\n+++ b/tests/queries/0_stateless/01508_query_obfuscator.sh\n@@ -0,0 +1,22 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+. \"$CURDIR\"/../shell_config.sh\n+\n+$CLICKHOUSE_FORMAT --seed Hello --obfuscate <<< \"SELECT 123, 'Test://2020-01-01hello1234 at 2000-01-01T01:02:03', 12e100, Gibberish_id_testCool, hello(World), avgIf(remote('127.0.0.1'))\"\n+$CLICKHOUSE_FORMAT --seed Hello --obfuscate <<< \"SELECT cost_first_screen between a and b, case when x >= 123 then y else null end\"\n+\n+$CLICKHOUSE_FORMAT --seed Hello --obfuscate <<< \"\n+SELECT\n+    VisitID,\n+    Goals.ID, Goals.EventTime,\n+    WatchIDs,\n+    EAction.ProductName, EAction.ProductPrice, EAction.ProductCurrency, EAction.ProductQuantity, EAction.EventTime, EAction.Type\n+FROM merge.visits_v2\n+WHERE\n+    StartDate >= '2020-09-17' AND StartDate <= '2020-09-25'\n+    AND CounterID = 24226447\n+    AND intHash32(UserID) = 416638616 AND intHash64(UserID) = 13269091395366875299\n+    AND VisitID IN (5653048135597886819, 5556254872710352304, 5516214175671455313, 5476714937521999313, 5464051549483503043)\n+    AND Sign = 1\n+\"\n",
  "problem_statement": "Query obfuscator\n**Use case**\r\nA friend wants to show me a set of queries, but is afraid to reveal the names of columns (domain area) and the values of constants.\r\n\r\n**Describe the solution you'd like**\r\nA simple ad-hoc solution that will be mostly acceptable.\r\n\r\nUse Lexer to tokenize query and replace tokens. Use a list of english nouns or similar words for replacements. The user will specify a salt in command line to make deterministic pseudorandom unpredictable replacement.\r\n\r\nSplit identifiers to words according to their style (snake_case, CamelCase, ALL_CAPS). If identifier is too complex, treat it as a single word. These words will be replaced with english nouns selected by the value of a SipHash from the word and the salt. Save all replacements in a map to track collisions. In case of collision, add 1 to the salt and repeat to select another noun. Keep the style of replaced identifiers for convenience. Keep some words like `id`, `num`, `value` unreplaced.\r\n\r\nFor literals in a query: for numbers, dates, datetimes, apply a model similar to clickhouse-obfuscator. For string literals, keep punctuation charaters as is to keep the meaning of LIKE and regexp. Replace alphanumeric parts to a gibberish of similar length (maybe keeping alpha and numerics). Replace valid UTF-8 to another valid UTF-8 while keeping the number of leading zeros in bytes.\r\n\r\nKeep the keywords in the query as is. (Lexer does not know about keywords, so we have to list them explicitly).\n",
  "hints_text": "",
  "created_at": "2020-09-26T00:01:58Z",
  "modified_files": [
    "programs/client/Suggest.cpp",
    "programs/format/CMakeLists.txt",
    "programs/format/Format.cpp",
    "src/Common/BitHelpers.h",
    "src/Common/StringUtils/StringUtils.h",
    "b/src/Parsers/obfuscateQueries.cpp",
    "b/src/Parsers/obfuscateQueries.h",
    "src/Parsers/ya.make"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01508_query_obfuscator.reference",
    "b/tests/queries/0_stateless/01508_query_obfuscator.sh"
  ]
}