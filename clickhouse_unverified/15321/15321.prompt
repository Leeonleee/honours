You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Query obfuscator
**Use case**
A friend wants to show me a set of queries, but is afraid to reveal the names of columns (domain area) and the values of constants.

**Describe the solution you'd like**
A simple ad-hoc solution that will be mostly acceptable.

Use Lexer to tokenize query and replace tokens. Use a list of english nouns or similar words for replacements. The user will specify a salt in command line to make deterministic pseudorandom unpredictable replacement.

Split identifiers to words according to their style (snake_case, CamelCase, ALL_CAPS). If identifier is too complex, treat it as a single word. These words will be replaced with english nouns selected by the value of a SipHash from the word and the salt. Save all replacements in a map to track collisions. In case of collision, add 1 to the salt and repeat to select another noun. Keep the style of replaced identifiers for convenience. Keep some words like `id`, `num`, `value` unreplaced.

For literals in a query: for numbers, dates, datetimes, apply a model similar to clickhouse-obfuscator. For string literals, keep punctuation charaters as is to keep the meaning of LIKE and regexp. Replace alphanumeric parts to a gibberish of similar length (maybe keeping alpha and numerics). Replace valid UTF-8 to another valid UTF-8 while keeping the number of leading zeros in bytes.

Keep the keywords in the query as is. (Lexer does not know about keywords, so we have to list them explicitly).
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
