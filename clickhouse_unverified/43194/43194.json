{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 43194,
  "instance_id": "ClickHouse__ClickHouse-43194",
  "issue_numbers": [
    "7644"
  ],
  "base_commit": "ebde28bc50b8569221b5833dff827c7348214f99",
  "patch": "diff --git a/programs/server/MetricsTransmitter.cpp b/programs/server/MetricsTransmitter.cpp\nindex 8ad519ba5aa7..f7829a49a39f 100644\n--- a/programs/server/MetricsTransmitter.cpp\n+++ b/programs/server/MetricsTransmitter.cpp\n@@ -123,7 +123,7 @@ void MetricsTransmitter::transmit(std::vector<ProfileEvents::Count> & prev_count\n     {\n         for (const auto & name_value : async_metrics_values)\n         {\n-            key_vals.emplace_back(asynchronous_metrics_path_prefix + name_value.first, name_value.second);\n+            key_vals.emplace_back(asynchronous_metrics_path_prefix + name_value.first, name_value.second.value);\n         }\n     }\n \ndiff --git a/src/Common/Exception.h b/src/Common/Exception.h\nindex c5259d157b28..84687581e52a 100644\n--- a/src/Common/Exception.h\n+++ b/src/Common/Exception.h\n@@ -12,6 +12,7 @@\n \n #include <fmt/format.h>\n \n+\n namespace Poco { class Logger; }\n \n \ndiff --git a/src/Interpreters/AsynchronousMetricLog.cpp b/src/Interpreters/AsynchronousMetricLog.cpp\nindex 228934d5f4d6..6176bb781ab7 100644\n--- a/src/Interpreters/AsynchronousMetricLog.cpp\n+++ b/src/Interpreters/AsynchronousMetricLog.cpp\n@@ -47,7 +47,7 @@ void AsynchronousMetricLog::addValues(const AsynchronousMetricValues & values)\n     for (const auto & [key, value] : values)\n     {\n         element.metric_name = key;\n-        element.value = round(value * precision) / precision;\n+        element.value = round(value.value * precision) / precision;\n \n         add(element);\n     }\ndiff --git a/src/Interpreters/AsynchronousMetricLog.h b/src/Interpreters/AsynchronousMetricLog.h\nindex 900d84868bd6..8a19fae29e90 100644\n--- a/src/Interpreters/AsynchronousMetricLog.h\n+++ b/src/Interpreters/AsynchronousMetricLog.h\n@@ -1,6 +1,7 @@\n #pragma once\n \n #include <Interpreters/SystemLog.h>\n+#include <Interpreters/AsynchronousMetrics.h>\n #include <Common/ProfileEvents.h>\n #include <Common/CurrentMetrics.h>\n #include <Core/NamesAndTypes.h>\n@@ -14,12 +15,8 @@\n namespace DB\n {\n \n-using AsynchronousMetricValue = double;\n-using AsynchronousMetricValues = std::unordered_map<std::string, AsynchronousMetricValue>;\n-\n /** AsynchronousMetricLog is a log of metric values measured at regular time interval.\n   */\n-\n struct AsynchronousMetricLogElement\n {\n     UInt16 event_date;\ndiff --git a/src/Interpreters/AsynchronousMetrics.cpp b/src/Interpreters/AsynchronousMetrics.cpp\nindex 488ac77e9564..291bca4277d8 100644\n--- a/src/Interpreters/AsynchronousMetrics.cpp\n+++ b/src/Interpreters/AsynchronousMetrics.cpp\n@@ -15,7 +15,6 @@\n #include <Common/getCurrentProcessFDCount.h>\n #include <Common/getMaxFileDescriptorCount.h>\n #include <Interpreters/Cache/FileCache.h>\n-#include <Server/ProtocolServerAdapter.h>\n #include <Storages/MarkCache.h>\n #include <Storages/StorageMergeTree.h>\n #include <Storages/StorageReplicatedMergeTree.h>\n@@ -24,15 +23,16 @@\n #include <IO/MMappedFileCache.h>\n #include <IO/ReadHelpers.h>\n #include <Databases/IDatabase.h>\n+#include <base/errnoToString.h>\n #include <chrono>\n \n-\n #include \"config.h\"\n \n #if USE_JEMALLOC\n #    include <jemalloc/jemalloc.h>\n #endif\n \n+\n namespace DB\n {\n \n@@ -123,9 +123,9 @@ void AsynchronousMetrics::openSensors()\n         {\n             LOG_WARNING(\n                 &Poco::Logger::get(\"AsynchronousMetrics\"),\n-                \"Thermal monitor '{}' exists but could not be read, error {}.\",\n+                \"Thermal monitor '{}' exists but could not be read: {}.\",\n                 thermal_device_index,\n-                e.getErrno());\n+                errnoToString(e.getErrno()));\n             continue;\n         }\n \n@@ -252,10 +252,10 @@ void AsynchronousMetrics::openSensorsChips()\n             {\n                 LOG_WARNING(\n                     &Poco::Logger::get(\"AsynchronousMetrics\"),\n-                    \"Hardware monitor '{}', sensor '{}' exists but could not be read, error {}.\",\n+                    \"Hardware monitor '{}', sensor '{}' exists but could not be read: {}.\",\n                     hwmon_name,\n                     sensor_name,\n-                    e.getErrno());\n+                    errnoToString(e.getErrno()));\n                 continue;\n             }\n \n@@ -386,14 +386,15 @@ uint64_t updateJemallocEpoch()\n }\n \n template <typename Value>\n-static Value saveJemallocMetricImpl(AsynchronousMetricValues & values,\n+static Value saveJemallocMetricImpl(\n+    AsynchronousMetricValues & values,\n     const std::string & jemalloc_full_name,\n     const std::string & clickhouse_full_name)\n {\n     Value value{};\n     size_t size = sizeof(value);\n     mallctl(jemalloc_full_name.c_str(), &value, &size, nullptr, 0);\n-    values[clickhouse_full_name] = value;\n+    values[clickhouse_full_name] = AsynchronousMetricValue(value, \"An internal metric of the low-level memory allocator (jemalloc). See https://jemalloc.net/jemalloc.3.html\");\n     return value;\n }\n \n@@ -570,85 +571,93 @@ void AsynchronousMetrics::update(TimePoint update_time)\n     previous_update_time = update_time;\n \n     /// This is also a good indicator of system responsiveness.\n-    new_values[\"Jitter\"] = std::chrono::duration_cast<std::chrono::nanoseconds>(current_time - update_time).count() / 1e9;\n+    new_values[\"Jitter\"] = { std::chrono::duration_cast<std::chrono::nanoseconds>(current_time - update_time).count() / 1e9,\n+        \"The difference in time the thread for calculation of the asynchronous metrics was scheduled to wake up and the time it was in fact, woken up.\"\n+        \" A proxy-indicator of overall system latency and responsiveness.\" };\n \n+    if (auto mark_cache = getContext()->getMarkCache())\n     {\n-        if (auto mark_cache = getContext()->getMarkCache())\n-        {\n-            new_values[\"MarkCacheBytes\"] = mark_cache->weight();\n-            new_values[\"MarkCacheFiles\"] = mark_cache->count();\n-        }\n+        new_values[\"MarkCacheBytes\"] = { mark_cache->weight(), \"Total size of mark cache in bytes\" };\n+        new_values[\"MarkCacheFiles\"] = { mark_cache->count(), \"Total number of mark files cached in the mark cache\" };\n     }\n \n+    if (auto uncompressed_cache = getContext()->getUncompressedCache())\n     {\n-        if (auto uncompressed_cache = getContext()->getUncompressedCache())\n-        {\n-            new_values[\"UncompressedCacheBytes\"] = uncompressed_cache->weight();\n-            new_values[\"UncompressedCacheCells\"] = uncompressed_cache->count();\n-        }\n+        new_values[\"UncompressedCacheBytes\"] = { uncompressed_cache->weight(),\n+            \"Total size of uncompressed cache in bytes. Uncompressed cache does not usually improve the performance and should be mostly avoided.\" };\n+        new_values[\"UncompressedCacheCells\"] = { uncompressed_cache->count(),\n+            \"Total number of entries in the uncompressed cache. Each entry represents a decompressed block of data. Uncompressed cache does not usually improve performance and should be mostly avoided.\" };\n     }\n \n+    if (auto index_mark_cache = getContext()->getIndexMarkCache())\n     {\n-        if (auto index_mark_cache = getContext()->getIndexMarkCache())\n-        {\n-            new_values[\"IndexMarkCacheBytes\"] = index_mark_cache->weight();\n-            new_values[\"IndexMarkCacheFiles\"] = index_mark_cache->count();\n-        }\n+        new_values[\"IndexMarkCacheBytes\"] = { index_mark_cache->weight(), \"Total size of mark cache for secondary indices in bytes.\" };\n+        new_values[\"IndexMarkCacheFiles\"] = { index_mark_cache->count(), \"Total number of mark files cached in the mark cache for secondary indices.\" };\n     }\n \n+    if (auto index_uncompressed_cache = getContext()->getIndexUncompressedCache())\n     {\n-        if (auto index_uncompressed_cache = getContext()->getIndexUncompressedCache())\n-        {\n-            new_values[\"IndexUncompressedCacheBytes\"] = index_uncompressed_cache->weight();\n-            new_values[\"IndexUncompressedCacheCells\"] = index_uncompressed_cache->count();\n-        }\n+        new_values[\"IndexUncompressedCacheBytes\"] = { index_uncompressed_cache->weight(),\n+            \"Total size of uncompressed cache in bytes for secondary indices. Uncompressed cache does not usually improve the performance and should be mostly avoided.\" };\n+        new_values[\"IndexUncompressedCacheCells\"] = { index_uncompressed_cache->count(),\n+            \"Total number of entries in the uncompressed cache for secondary indices. Each entry represents a decompressed block of data. Uncompressed cache does not usually improve performance and should be mostly avoided.\" };\n     }\n \n+    if (auto mmap_cache = getContext()->getMMappedFileCache())\n     {\n-        if (auto mmap_cache = getContext()->getMMappedFileCache())\n-        {\n-            new_values[\"MMapCacheCells\"] = mmap_cache->count();\n-        }\n+        new_values[\"MMapCacheCells\"] = { mmap_cache->count(),\n+            \"The number of files opened with `mmap` (mapped in memory).\"\n+            \" This is used for queries with the setting `local_filesystem_read_method` set to  `mmap`.\"\n+            \" The files opened with `mmap` are kept in the cache to avoid costly TLB flushes.\"};\n     }\n \n     {\n         auto caches = FileCacheFactory::instance().getAll();\n+        size_t total_bytes = 0;\n+        size_t total_files = 0;\n+\n         for (const auto & [_, cache_data] : caches)\n         {\n-            new_values[\"FilesystemCacheBytes\"] = cache_data->cache->getUsedCacheSize();\n-            new_values[\"FilesystemCacheFiles\"] = cache_data->cache->getFileSegmentsNum();\n+            total_bytes += cache_data->cache->getUsedCacheSize();\n+            total_files += cache_data->cache->getFileSegmentsNum();\n         }\n+\n+        new_values[\"FilesystemCacheBytes\"] = { total_bytes,\n+            \"Total bytes in the `cache` virtual filesystem. This cache is hold on disk.\" };\n+        new_values[\"FilesystemCacheFiles\"] = { total_files,\n+            \"Total number of cached file segments in the `cache` virtual filesystem. This cache is hold on disk.\" };\n     }\n \n #if USE_ROCKSDB\n+    if (auto metadata_cache = getContext()->tryGetMergeTreeMetadataCache())\n     {\n-        if (auto metadata_cache = getContext()->tryGetMergeTreeMetadataCache())\n-        {\n-            new_values[\"MergeTreeMetadataCacheSize\"] = metadata_cache->getEstimateNumKeys();\n-        }\n+        new_values[\"MergeTreeMetadataCacheSize\"] = { metadata_cache->getEstimateNumKeys(),\n+            \"The size of the metadata cache for tables. This cache is experimental and not used in production.\" };\n     }\n #endif\n \n #if USE_EMBEDDED_COMPILER\n+    if (auto * compiled_expression_cache = CompiledExpressionCacheFactory::instance().tryGetCache())\n     {\n-        if (auto * compiled_expression_cache = CompiledExpressionCacheFactory::instance().tryGetCache())\n-        {\n-            new_values[\"CompiledExpressionCacheBytes\"] = compiled_expression_cache->weight();\n-            new_values[\"CompiledExpressionCacheCount\"]  = compiled_expression_cache->count();\n-        }\n+        new_values[\"CompiledExpressionCacheBytes\"] = { compiled_expression_cache->weight(),\n+            \"Total bytes used for the cache of JIT-compiled code.\" };\n+        new_values[\"CompiledExpressionCacheCount\"] = { compiled_expression_cache->count(),\n+            \"Total entries in the cache of JIT-compiled code.\" };\n     }\n #endif\n \n+    new_values[\"Uptime\"] = { getContext()->getUptimeSeconds(),\n+        \"The server uptime in seconds. It includes the time spent for server initialization before accepting connections.\" };\n \n-    new_values[\"Uptime\"] = getContext()->getUptimeSeconds();\n-\n+    if (const auto stats = getHashTablesCacheStatistics())\n     {\n-        if (const auto stats = getHashTablesCacheStatistics())\n-        {\n-            new_values[\"HashTableStatsCacheEntries\"] = stats->entries;\n-            new_values[\"HashTableStatsCacheHits\"] = stats->hits;\n-            new_values[\"HashTableStatsCacheMisses\"] = stats->misses;\n-        }\n+        new_values[\"HashTableStatsCacheEntries\"] = { stats->entries,\n+            \"The number of entries in the cache of hash table sizes.\"\n+            \" The cache for hash table sizes is used for predictive optimization of GROUP BY.\" };\n+        new_values[\"HashTableStatsCacheHits\"] = { stats->hits,\n+            \"The number of times the prediction of a hash table size was correct.\" };\n+        new_values[\"HashTableStatsCacheMisses\"] = { stats->misses,\n+            \"The number of times the prediction of a hash table size was incorrect.\" };\n     }\n \n #if defined(OS_LINUX) || defined(OS_FREEBSD)\n@@ -660,7 +669,7 @@ void AsynchronousMetrics::update(TimePoint update_time)\n     // the following calls will return stale values. It increments and returns\n     // the current epoch number, which might be useful to log as a sanity check.\n     auto epoch = updateJemallocEpoch();\n-    new_values[\"jemalloc.epoch\"] = epoch;\n+    new_values[\"jemalloc.epoch\"] = { epoch, \"An internal incremental update number of the statistics of jemalloc (Jason Evans' memory allocator), used in all other `jemalloc` metrics.\" };\n \n     // Collect the statistics themselves.\n     saveJemallocMetric<size_t>(new_values, \"allocated\");\n@@ -685,13 +694,24 @@ void AsynchronousMetrics::update(TimePoint update_time)\n     {\n         MemoryStatisticsOS::Data & data = memory_statistics_data;\n \n-        new_values[\"MemoryVirtual\"] = data.virt;\n-        new_values[\"MemoryResident\"] = data.resident;\n+        new_values[\"MemoryVirtual\"] = { data.virt,\n+            \"The size of the virtual address space allocated by the server process, in bytes.\"\n+            \" The size of the virtual address space is usually much greater than the physical memory consumption, and should not be used as an estimate for the memory consumption.\"\n+            \" The large values of this metric are totally normal, and makes only technical sense.\"};\n+        new_values[\"MemoryResident\"] = { data.resident,\n+            \"The amount of physical memory used by the server process, in bytes.\" };\n #if !defined(OS_FREEBSD)\n-        new_values[\"MemoryShared\"] = data.shared;\n+        new_values[\"MemoryShared\"] = { data.shared,\n+            \"The amount of memory used by the server process, that is also shared by another processes, in bytes.\"\n+            \" ClickHouse does not use shared memory, but some memory can be labeled by OS as shared for its own reasons.\"\n+            \" This metric does not make a lot of sense to watch, and it exists only for completeness reasons.\"};\n #endif\n-        new_values[\"MemoryCode\"] = data.code;\n-        new_values[\"MemoryDataAndStack\"] = data.data_and_stack;\n+        new_values[\"MemoryCode\"] = { data.code,\n+            \"The amount of virtual memory mapped for the pages of machine code of the server process, in bytes.\" };\n+        new_values[\"MemoryDataAndStack\"] = { data.data_and_stack,\n+            \"The amount of virtual memory mapped for the use of stack and for the allocated memory, in bytes.\"\n+            \" It is unspecified whether it includes the per-thread stacks and most of the allocated memory, that is allocated with the 'mmap' system call.\"\n+            \" This metric exists only for completeness reasons. I recommend to use the `MemoryResident` metric for monitoring.\"};\n \n         /// We must update the value of total_memory_tracker periodically.\n         /// Otherwise it might be calculated incorrectly - it can include a \"drift\" of memory amount.\n@@ -754,11 +774,22 @@ void AsynchronousMetrics::update(TimePoint update_time)\n             assertChar('/', *loadavg);\n             readText(threads_total, *loadavg);\n \n-            new_values[\"LoadAverage1\"] = loadavg1;\n-            new_values[\"LoadAverage5\"] = loadavg5;\n-            new_values[\"LoadAverage15\"] = loadavg15;\n-            new_values[\"OSThreadsRunnable\"] = threads_runnable;\n-            new_values[\"OSThreadsTotal\"] = threads_total;\n+#define LOAD_AVERAGE_DOCUMENTATION \\\n+    \" The load represents the number of threads across all the processes (the scheduling entities of the OS kernel),\" \\\n+    \" that are currently running by CPU or waiting for IO, or ready to run but not being scheduled at this point of time.\" \\\n+    \" This number includes all the processes, not only clickhouse-server. The number can be greater than the number of CPU cores,\" \\\n+    \" if the system is overloaded, and many processes are ready to run but waiting for CPU or IO.\"\n+\n+            new_values[\"LoadAverage1\"] = { loadavg1,\n+                \"The whole system load, averaged with exponential smoothing over 1 minute.\" LOAD_AVERAGE_DOCUMENTATION };\n+            new_values[\"LoadAverage5\"] = { loadavg5,\n+                \"The whole system load, averaged with exponential smoothing over 5 minutes.\" LOAD_AVERAGE_DOCUMENTATION };\n+            new_values[\"LoadAverage15\"] = { loadavg15,\n+                \"The whole system load, averaged with exponential smoothing over 15 minutes.\" LOAD_AVERAGE_DOCUMENTATION };\n+            new_values[\"OSThreadsRunnable\"] = { threads_runnable,\n+                \"The total number of 'runnable' threads, as the OS kernel scheduler seeing it.\" };\n+            new_values[\"OSThreadsTotal\"] = { threads_total,\n+                \"The total number of threads, as the OS kernel scheduler seeing it.\" };\n         }\n         catch (...)\n         {\n@@ -775,7 +806,7 @@ void AsynchronousMetrics::update(TimePoint update_time)\n             Float64 uptime_seconds = 0;\n             readText(uptime_seconds, *uptime);\n \n-            new_values[\"OSUptime\"] = uptime_seconds;\n+            new_values[\"OSUptime\"] = { uptime_seconds, \"The uptime of the host server (the machine where ClickHouse is running), in seconds.\" };\n         }\n         catch (...)\n         {\n@@ -838,16 +869,43 @@ void AsynchronousMetrics::update(TimePoint update_time)\n                         else\n                             delta_values_all_cpus = delta_values;\n \n-                        new_values[\"OSUserTime\" + cpu_suffix] = delta_values.user * multiplier;\n-                        new_values[\"OSNiceTime\" + cpu_suffix] = delta_values.nice * multiplier;\n-                        new_values[\"OSSystemTime\" + cpu_suffix] = delta_values.system * multiplier;\n-                        new_values[\"OSIdleTime\" + cpu_suffix] = delta_values.idle * multiplier;\n-                        new_values[\"OSIOWaitTime\" + cpu_suffix] = delta_values.iowait * multiplier;\n-                        new_values[\"OSIrqTime\" + cpu_suffix] = delta_values.irq * multiplier;\n-                        new_values[\"OSSoftIrqTime\" + cpu_suffix] = delta_values.softirq * multiplier;\n-                        new_values[\"OSStealTime\" + cpu_suffix] = delta_values.steal * multiplier;\n-                        new_values[\"OSGuestTime\" + cpu_suffix] = delta_values.guest * multiplier;\n-                        new_values[\"OSGuestNiceTime\" + cpu_suffix] = delta_values.guest_nice * multiplier;\n+                        new_values[\"OSUserTime\" + cpu_suffix] = { delta_values.user * multiplier,\n+                            \"The ratio of time the CPU core was running userspace code. This is a system-wide metric, it includes all the processes on the host machine, not just clickhouse-server.\"\n+                            \" This includes also the time when the CPU was under-utilized due to the reasons internal to the CPU (memory loads, pipeline stalls, branch mispredictions, running another SMT core).\"\n+                            \" The value for a single CPU core will be in the interval [0..1]. The value for all CPU cores is calculated as a sum across them [0..num cores].\"};\n+                        new_values[\"OSNiceTime\" + cpu_suffix] = { delta_values.nice * multiplier,\n+                            \"The ratio of time the CPU core was running userspace code with higher priority. This is a system-wide metric, it includes all the processes on the host machine, not just clickhouse-server.\"\n+                            \" The value for a single CPU core will be in the interval [0..1]. The value for all CPU cores is calculated as a sum across them [0..num cores].\"};\n+                        new_values[\"OSSystemTime\" + cpu_suffix] = { delta_values.system * multiplier,\n+                            \"The ratio of time the CPU core was running OS kernel (system) code. This is a system-wide metric, it includes all the processes on the host machine, not just clickhouse-server.\"\n+                            \" The value for a single CPU core will be in the interval [0..1]. The value for all CPU cores is calculated as a sum across them [0..num cores].\"};\n+                        new_values[\"OSIdleTime\" + cpu_suffix] = { delta_values.idle * multiplier,\n+                            \"The ratio of time the CPU core was idle (not even ready to run a process waiting for IO) from the OS kernel standpoint. This is a system-wide metric, it includes all the processes on the host machine, not just clickhouse-server.\"\n+                            \" This does not include the time when the CPU was under-utilized due to the reasons internal to the CPU (memory loads, pipeline stalls, branch mispredictions, running another SMT core).\"\n+                            \" The value for a single CPU core will be in the interval [0..1]. The value for all CPU cores is calculated as a sum across them [0..num cores].\"};\n+                        new_values[\"OSIOWaitTime\" + cpu_suffix] = { delta_values.iowait * multiplier,\n+                            \"The ratio of time the CPU core was not running the code but when the OS kernel did not run any other process on this CPU as the processes were waiting for IO. This is a system-wide metric, it includes all the processes on the host machine, not just clickhouse-server.\"\n+                            \" The value for a single CPU core will be in the interval [0..1]. The value for all CPU cores is calculated as a sum across them [0..num cores].\"};\n+                        new_values[\"OSIrqTime\" + cpu_suffix] = { delta_values.irq * multiplier,\n+                            \"The ratio of time spent for running hardware interrupt requests on the CPU. This is a system-wide metric, it includes all the processes on the host machine, not just clickhouse-server.\"\n+                            \" A high number of this metric may indicate hardware misconfiguration or a very high network load.\"\n+                            \" The value for a single CPU core will be in the interval [0..1]. The value for all CPU cores is calculated as a sum across them [0..num cores].\"};\n+                        new_values[\"OSSoftIrqTime\" + cpu_suffix] = { delta_values.softirq * multiplier,\n+                            \"The ratio of time spent for running software interrupt requests on the CPU. This is a system-wide metric, it includes all the processes on the host machine, not just clickhouse-server.\"\n+                            \" A high number of this metric may indicate inefficient software running on the system.\"\n+                            \" The value for a single CPU core will be in the interval [0..1]. The value for all CPU cores is calculated as a sum across them [0..num cores].\"};\n+                        new_values[\"OSStealTime\" + cpu_suffix] = { delta_values.steal * multiplier,\n+                            \"The ratio of time spent in other operating systems by the CPU when running in a virtualized environment. This is a system-wide metric, it includes all the processes on the host machine, not just clickhouse-server.\"\n+                            \" Not every virtualized environments present this metric, and most of them don't.\"\n+                            \" The value for a single CPU core will be in the interval [0..1]. The value for all CPU cores is calculated as a sum across them [0..num cores].\"};\n+                        new_values[\"OSGuestTime\" + cpu_suffix] = { delta_values.guest * multiplier,\n+                            \"The ratio of time spent running a virtual CPU for guest operating systems under the control of the Linux kernel (See `man procfs`). This is a system-wide metric, it includes all the processes on the host machine, not just clickhouse-server.\"\n+                            \" This metric is irrelevant for ClickHouse, but still exists for completeness.\"\n+                            \" The value for a single CPU core will be in the interval [0..1]. The value for all CPU cores is calculated as a sum across them [0..num cores].\"};\n+                        new_values[\"OSGuestNiceTime\" + cpu_suffix] = { delta_values.guest_nice * multiplier,\n+                            \"The ratio of time spent running a virtual CPU for guest operating systems under the control of the Linux kernel, when a guest was set to a higher priority (See `man procfs`). This is a system-wide metric, it includes all the processes on the host machine, not just clickhouse-server.\"\n+                            \" This metric is irrelevant for ClickHouse, but still exists for completeness.\"\n+                            \" The value for a single CPU core will be in the interval [0..1]. The value for all CPU cores is calculated as a sum across them [0..num cores].\"};\n                     }\n \n                     prev_values = current_values;\n@@ -872,14 +930,18 @@ void AsynchronousMetrics::update(TimePoint update_time)\n                     UInt64 processes_running = 0;\n                     readText(processes_running, *proc_stat);\n                     skipToNextLineOrEOF(*proc_stat);\n-                    new_values[\"OSProcessesRunning\"] = processes_running;\n+                    new_values[\"OSProcessesRunning\"] = { processes_running,\n+                        \"The number of runnable (running or ready to run) threads by the operating system.\"\n+                        \" This is a system-wide metric, it includes all the processes on the host machine, not just clickhouse-server.\" };\n                 }\n                 else if (name == \"procs_blocked\")\n                 {\n                     UInt64 processes_blocked = 0;\n                     readText(processes_blocked, *proc_stat);\n                     skipToNextLineOrEOF(*proc_stat);\n-                    new_values[\"OSProcessesBlocked\"] = processes_blocked;\n+                    new_values[\"OSProcessesBlocked\"] = { processes_blocked,\n+                        \"Number of threads blocked waiting for I/O to complete (`man procfs`).\"\n+                        \" This is a system-wide metric, it includes all the processes on the host machine, not just clickhouse-server.\" };\n                 }\n                 else\n                     skipToNextLineOrEOF(*proc_stat);\n@@ -889,25 +951,45 @@ void AsynchronousMetrics::update(TimePoint update_time)\n             {\n                 ProcStatValuesOther delta_values = current_other_values - proc_stat_values_other;\n \n-                new_values[\"OSInterrupts\"] = delta_values.interrupts;\n-                new_values[\"OSContextSwitches\"] = delta_values.context_switches;\n-                new_values[\"OSProcessesCreated\"] = delta_values.processes_created;\n+                new_values[\"OSInterrupts\"] = { delta_values.interrupts, \"The number of interrupts on the host machine. This is a system-wide metric, it includes all the processes on the host machine, not just clickhouse-server.\" };\n+                new_values[\"OSContextSwitches\"] = { delta_values.context_switches, \"The number of context switches that the system underwent on the host machine. This is a system-wide metric, it includes all the processes on the host machine, not just clickhouse-server.\" };\n+                new_values[\"OSProcessesCreated\"] = { delta_values.processes_created, \"The number of processes created. This is a system-wide metric, it includes all the processes on the host machine, not just clickhouse-server.\" };\n \n                 /// Also write values normalized to 0..1 by diving to the number of CPUs.\n                 /// These values are good to be averaged across the cluster of non-uniform servers.\n \n                 if (num_cpus)\n                 {\n-                    new_values[\"OSUserTimeNormalized\"] = delta_values_all_cpus.user * multiplier / num_cpus;\n-                    new_values[\"OSNiceTimeNormalized\"] = delta_values_all_cpus.nice * multiplier / num_cpus;\n-                    new_values[\"OSSystemTimeNormalized\"] = delta_values_all_cpus.system * multiplier / num_cpus;\n-                    new_values[\"OSIdleTimeNormalized\"] = delta_values_all_cpus.idle * multiplier / num_cpus;\n-                    new_values[\"OSIOWaitTimeNormalized\"] = delta_values_all_cpus.iowait * multiplier / num_cpus;\n-                    new_values[\"OSIrqTimeNormalized\"] = delta_values_all_cpus.irq * multiplier / num_cpus;\n-                    new_values[\"OSSoftIrqTimeNormalized\"] = delta_values_all_cpus.softirq * multiplier / num_cpus;\n-                    new_values[\"OSStealTimeNormalized\"] = delta_values_all_cpus.steal * multiplier / num_cpus;\n-                    new_values[\"OSGuestTimeNormalized\"] = delta_values_all_cpus.guest * multiplier / num_cpus;\n-                    new_values[\"OSGuestNiceTimeNormalized\"] = delta_values_all_cpus.guest_nice * multiplier / num_cpus;\n+                    new_values[\"OSUserTimeNormalized\"] = { delta_values_all_cpus.user * multiplier / num_cpus,\n+                        \"The value is similar to `OSUserTime` but divided to the number of CPU cores to be measured in the [0..1] interval regardless of the number of cores.\"\n+                        \" This allows you to average the values of this metric across multiple servers in a cluster even if the number of cores is non-uniform, and still get the average resource utilization metric.\"};\n+                    new_values[\"OSNiceTimeNormalized\"] = { delta_values_all_cpus.nice * multiplier / num_cpus,\n+                        \"The value is similar to `OSNiceTime` but divided to the number of CPU cores to be measured in the [0..1] interval regardless of the number of cores.\"\n+                        \" This allows you to average the values of this metric across multiple servers in a cluster even if the number of cores is non-uniform, and still get the average resource utilization metric.\"};\n+                    new_values[\"OSSystemTimeNormalized\"] = { delta_values_all_cpus.system * multiplier / num_cpus,\n+                        \"The value is similar to `OSSystemTime` but divided to the number of CPU cores to be measured in the [0..1] interval regardless of the number of cores.\"\n+                        \" This allows you to average the values of this metric across multiple servers in a cluster even if the number of cores is non-uniform, and still get the average resource utilization metric.\"};\n+                    new_values[\"OSIdleTimeNormalized\"] = { delta_values_all_cpus.idle * multiplier / num_cpus,\n+                        \"The value is similar to `OSIdleTime` but divided to the number of CPU cores to be measured in the [0..1] interval regardless of the number of cores.\"\n+                        \" This allows you to average the values of this metric across multiple servers in a cluster even if the number of cores is non-uniform, and still get the average resource utilization metric.\"};\n+                    new_values[\"OSIOWaitTimeNormalized\"] = { delta_values_all_cpus.iowait * multiplier / num_cpus,\n+                        \"The value is similar to `OSIOWaitTime` but divided to the number of CPU cores to be measured in the [0..1] interval regardless of the number of cores.\"\n+                        \" This allows you to average the values of this metric across multiple servers in a cluster even if the number of cores is non-uniform, and still get the average resource utilization metric.\"};\n+                    new_values[\"OSIrqTimeNormalized\"] = { delta_values_all_cpus.irq * multiplier / num_cpus,\n+                        \"The value is similar to `OSIrqTime` but divided to the number of CPU cores to be measured in the [0..1] interval regardless of the number of cores.\"\n+                        \" This allows you to average the values of this metric across multiple servers in a cluster even if the number of cores is non-uniform, and still get the average resource utilization metric.\"};\n+                    new_values[\"OSSoftIrqTimeNormalized\"] = { delta_values_all_cpus.softirq * multiplier / num_cpus,\n+                        \"The value is similar to `OSSoftIrqTime` but divided to the number of CPU cores to be measured in the [0..1] interval regardless of the number of cores.\"\n+                        \" This allows you to average the values of this metric across multiple servers in a cluster even if the number of cores is non-uniform, and still get the average resource utilization metric.\"};\n+                    new_values[\"OSStealTimeNormalized\"] = { delta_values_all_cpus.steal * multiplier / num_cpus,\n+                        \"The value is similar to `OSStealTime` but divided to the number of CPU cores to be measured in the [0..1] interval regardless of the number of cores.\"\n+                        \" This allows you to average the values of this metric across multiple servers in a cluster even if the number of cores is non-uniform, and still get the average resource utilization metric.\"};\n+                    new_values[\"OSGuestTimeNormalized\"] = { delta_values_all_cpus.guest * multiplier / num_cpus,\n+                        \"The value is similar to `OSGuestTime` but divided to the number of CPU cores to be measured in the [0..1] interval regardless of the number of cores.\"\n+                        \" This allows you to average the values of this metric across multiple servers in a cluster even if the number of cores is non-uniform, and still get the average resource utilization metric.\"};\n+                    new_values[\"OSGuestNiceTimeNormalized\"] = { delta_values_all_cpus.guest_nice * multiplier / num_cpus,\n+                        \"The value is similar to `OSGuestNiceTime` but divided to the number of CPU cores to be measured in the [0..1] interval regardless of the number of cores.\"\n+                        \" This allows you to average the values of this metric across multiple servers in a cluster even if the number of cores is non-uniform, and still get the average resource utilization metric.\"};\n                 }\n             }\n \n@@ -962,39 +1044,47 @@ void AsynchronousMetrics::update(TimePoint update_time)\n \n                 if (name == \"MemTotal:\")\n                 {\n-                    new_values[\"OSMemoryTotal\"] = bytes;\n+                    new_values[\"OSMemoryTotal\"] = { bytes, \"The total amount of memory on the host system, in bytes.\" };\n                 }\n                 else if (name == \"MemFree:\")\n                 {\n-                    /// We cannot simply name this metric \"Free\", because it confuses users.\n-                    /// See https://www.linuxatemyram.com/\n-                    /// For convenience we also provide OSMemoryFreePlusCached, that should be somewhat similar to OSMemoryAvailable.\n-\n                     free_plus_cached_bytes += bytes;\n-                    new_values[\"OSMemoryFreeWithoutCached\"] = bytes;\n+                    new_values[\"OSMemoryFreeWithoutCached\"] = { bytes,\n+                        \"The amount of free memory on the host system, in bytes.\"\n+                        \" This does not include the memory used by the OS page cache memory, in bytes.\"\n+                        \" The page cache memory is also available for usage by programs, so the value of this metric can be confusing.\"\n+                        \" See the `OSMemoryAvailable` metric instead.\"\n+                        \" For convenience we also provide the `OSMemoryFreePlusCached` metric, that should be somewhat similar to OSMemoryAvailable.\"\n+                        \" See also https://www.linuxatemyram.com/.\"\n+                        \" This is a system-wide metric, it includes all the processes on the host machine, not just clickhouse-server.\" };\n                 }\n                 else if (name == \"MemAvailable:\")\n                 {\n-                    new_values[\"OSMemoryAvailable\"] = bytes;\n+                    new_values[\"OSMemoryAvailable\"] = { bytes, \"The amount of memory available to be used by programs, in bytes. This is very similar to the `OSMemoryFreePlusCached` metric.\"\n+                        \" This is a system-wide metric, it includes all the processes on the host machine, not just clickhouse-server.\" };\n                 }\n                 else if (name == \"Buffers:\")\n                 {\n-                    new_values[\"OSMemoryBuffers\"] = bytes;\n+                    new_values[\"OSMemoryBuffers\"] = { bytes, \"The amount of memory used by OS kernel buffers, in bytes. This should be typically small, and large values may indicate a misconfiguration of the OS.\"\n+                        \" This is a system-wide metric, it includes all the processes on the host machine, not just clickhouse-server.\" };\n                 }\n                 else if (name == \"Cached:\")\n                 {\n                     free_plus_cached_bytes += bytes;\n-                    new_values[\"OSMemoryCached\"] = bytes;\n+                    new_values[\"OSMemoryCached\"] = { bytes, \"The amount of memory used by the OS page cache, in bytes. Typically, almost all available memory is used by the OS page cache - high values of this metric are normal and expected.\"\n+                        \" This is a system-wide metric, it includes all the processes on the host machine, not just clickhouse-server.\" };\n                 }\n                 else if (name == \"SwapCached:\")\n                 {\n-                    new_values[\"OSMemorySwapCached\"] = bytes;\n+                    new_values[\"OSMemorySwapCached\"] = { bytes, \"The amount of memory in swap that was also loaded in RAM. Swap should be disabled on production systems. If the value of this metric is large, it indicates a misconfiguration.\"\n+                        \" This is a system-wide metric, it includes all the processes on the host machine, not just clickhouse-server.\" };\n                 }\n \n                 skipToNextLineOrEOF(*meminfo);\n             }\n \n-            new_values[\"OSMemoryFreePlusCached\"] = free_plus_cached_bytes;\n+            new_values[\"OSMemoryFreePlusCached\"] = { free_plus_cached_bytes, \"The amount of free memory plus OS page cache memory on the host system, in bytes. This memory is available to be used by programs. The value should be very similar to `OSMemoryAvailable`.\"\n+                \" This is a system-wide metric, it includes all the processes on the host machine, not just clickhouse-server.\" };\n         }\n         catch (...)\n         {\n@@ -1043,7 +1133,7 @@ void AsynchronousMetrics::update(TimePoint update_time)\n                     if (auto colon = s.find_first_of(':'))\n                     {\n                         auto mhz = std::stod(s.substr(colon + 2));\n-                        new_values[fmt::format(\"CPUFrequencyMHz_{}\", core_id)] = mhz;\n+                        new_values[fmt::format(\"CPUFrequencyMHz_{}\", core_id)] = { mhz, \"The current frequency of the CPU, in MHz. Most of the modern CPUs adjust the frequency dynamically for power saving and Turbo Boosting.\" };\n                     }\n                 }\n             }\n@@ -1062,7 +1152,8 @@ void AsynchronousMetrics::update(TimePoint update_time)\n \n             uint64_t open_files = 0;\n             readText(open_files, *file_nr);\n-            new_values[\"OSOpenFiles\"] = open_files;\n+            new_values[\"OSOpenFiles\"] = { open_files, \"The total number of opened files on the host machine.\"\n+                \" This is a system-wide metric, it includes all the processes on the host machine, not just clickhouse-server.\" };\n         }\n         catch (...)\n         {\n@@ -1083,7 +1174,17 @@ void AsynchronousMetrics::update(TimePoint update_time)\n \n             BlockDeviceStatValues current_values{};\n             BlockDeviceStatValues & prev_values = block_device_stats[name];\n-            current_values.read(*device);\n+\n+            try\n+            {\n+                current_values.read(*device);\n+            }\n+            catch (const ErrnoException & e)\n+            {\n+                LOG_DEBUG(log, \"Cannot read statistics about the block device '{}': {}.\",\n+                    name, errnoToString(e.getErrno()));\n+                continue;\n+            }\n \n             BlockDeviceStatValues delta_values = current_values - prev_values;\n             prev_values = current_values;\n@@ -1097,42 +1198,89 @@ void AsynchronousMetrics::update(TimePoint update_time)\n             /// Always in milliseconds according to the docs.\n             static constexpr double time_multiplier = 1e-6;\n \n-            new_values[\"BlockReadOps_\" + name] = delta_values.read_ios;\n-            new_values[\"BlockWriteOps_\" + name] = delta_values.write_ios;\n-            new_values[\"BlockDiscardOps_\" + name] = delta_values.discard_ops;\n-\n-            new_values[\"BlockReadMerges_\" + name] = delta_values.read_merges;\n-            new_values[\"BlockWriteMerges_\" + name] = delta_values.write_merges;\n-            new_values[\"BlockDiscardMerges_\" + name] = delta_values.discard_merges;\n-\n-            new_values[\"BlockReadBytes_\" + name] = delta_values.read_sectors * sector_size;\n-            new_values[\"BlockWriteBytes_\" + name] = delta_values.write_sectors * sector_size;\n-            new_values[\"BlockDiscardBytes_\" + name] = delta_values.discard_sectors * sector_size;\n-\n-            new_values[\"BlockReadTime_\" + name] = delta_values.read_ticks * time_multiplier;\n-            new_values[\"BlockWriteTime_\" + name] = delta_values.write_ticks * time_multiplier;\n-            new_values[\"BlockDiscardTime_\" + name] = delta_values.discard_ticks * time_multiplier;\n-\n-            new_values[\"BlockInFlightOps_\" + name] = delta_values.in_flight_ios;\n-\n-            new_values[\"BlockActiveTime_\" + name] = delta_values.io_ticks * time_multiplier;\n-            new_values[\"BlockQueueTime_\" + name] = delta_values.time_in_queue * time_multiplier;\n+#define BLOCK_DEVICE_EXPLANATION \\\n+    \" This is a system-wide metric, it includes all the processes on the host machine, not just clickhouse-server.\" \\\n+    \" Source: `/sys/block`. See https://www.kernel.org/doc/Documentation/block/stat.txt\"\n+\n+            new_values[\"BlockReadOps_\" + name] = { delta_values.read_ios,\n+                \"Number of read operations requested from the block device.\"\n+                BLOCK_DEVICE_EXPLANATION };\n+            new_values[\"BlockWriteOps_\" + name] = { delta_values.write_ios,\n+                \"Number of write operations requested from the block device.\"\n+                BLOCK_DEVICE_EXPLANATION };\n+            new_values[\"BlockDiscardOps_\" + name] = { delta_values.discard_ops,\n+                \"Number of discard operations requested from the block device. These operations are relevant for SSD.\"\n+                \" Discard operations are not used by ClickHouse, but can be used by other processes on the system.\"\n+                BLOCK_DEVICE_EXPLANATION };\n+\n+            new_values[\"BlockReadMerges_\" + name] = { delta_values.read_merges,\n+                \"Number of read operations requested from the block device and merged together by the OS IO scheduler.\"\n+                BLOCK_DEVICE_EXPLANATION };\n+            new_values[\"BlockWriteMerges_\" + name] = { delta_values.write_merges,\n+                \"Number of write operations requested from the block device and merged together by the OS IO scheduler.\"\n+                BLOCK_DEVICE_EXPLANATION };\n+            new_values[\"BlockDiscardMerges_\" + name] = { delta_values.discard_merges,\n+                \"Number of discard operations requested from the block device and merged together by the OS IO scheduler.\"\n+                \" These operations are relevant for SSD. Discard operations are not used by ClickHouse, but can be used by other processes on the system.\"\n+                BLOCK_DEVICE_EXPLANATION };\n+\n+            new_values[\"BlockReadBytes_\" + name] = { delta_values.read_sectors * sector_size,\n+                \"Number of bytes read from the block device.\"\n+                \" It can be lower than the number of bytes read from the filesystem due to the usage of the OS page cache, that saves IO.\"\n+                BLOCK_DEVICE_EXPLANATION };\n+            new_values[\"BlockWriteBytes_\" + name] = { delta_values.write_sectors * sector_size,\n+                \"Number of bytes written to the block device.\"\n+                \" It can be lower than the number of bytes written to the filesystem due to the usage of the OS page cache, that saves IO.\"\n+                \" A write to the block device may happen later than the corresponding write to the filesystem due to write-through caching.\"\n+                BLOCK_DEVICE_EXPLANATION };\n+            new_values[\"BlockDiscardBytes_\" + name] = { delta_values.discard_sectors * sector_size,\n+                \"Number of discarded bytes on the block device.\"\n+                \" These operations are relevant for SSD. Discard operations are not used by ClickHouse, but can be used by other processes on the system.\"\n+                BLOCK_DEVICE_EXPLANATION };\n+\n+            new_values[\"BlockReadTime_\" + name] = { delta_values.read_ticks * time_multiplier,\n+                \"Time in seconds spend in read operations requested from the block device, summed across all the operations.\"\n+                BLOCK_DEVICE_EXPLANATION };\n+            new_values[\"BlockWriteTime_\" + name] = { delta_values.write_ticks * time_multiplier,\n+                \"Time in seconds spend in write operations requested from the block device, summed across all the operations.\"\n+                BLOCK_DEVICE_EXPLANATION };\n+            new_values[\"BlockDiscardTime_\" + name] = { delta_values.discard_ticks * time_multiplier,\n+                \"Time in seconds spend in discard operations requested from the block device, summed across all the operations.\"\n+                \" These operations are relevant for SSD. Discard operations are not used by ClickHouse, but can be used by other processes on the system.\"\n+                BLOCK_DEVICE_EXPLANATION };\n+\n+            new_values[\"BlockInFlightOps_\" + name] = { delta_values.in_flight_ios,\n+                \"This value counts the number of I/O requests that have been issued to\"\n+                \" the device driver but have not yet completed. It does not include IO\"\n+                \" requests that are in the queue but not yet issued to the device driver.\"\n+                BLOCK_DEVICE_EXPLANATION };\n+            new_values[\"BlockActiveTime_\" + name] = { delta_values.io_ticks * time_multiplier,\n+                \"Time in seconds the block device had the IO requests queued.\"\n+                BLOCK_DEVICE_EXPLANATION };\n+            new_values[\"BlockQueueTime_\" + name] = { delta_values.time_in_queue * time_multiplier,\n+                \"This value counts the number of milliseconds that IO requests have waited\"\n+                \" on this block device. If there are multiple IO requests waiting, this\"\n+                \" value will increase as the product of the number of milliseconds times the\"\n+                \" number of requests waiting.\"\n+                BLOCK_DEVICE_EXPLANATION };\n \n             if (delta_values.in_flight_ios)\n             {\n                 /// TODO Check if these values are meaningful.\n \n-                new_values[\"BlockActiveTimePerOp_\" + name] = delta_values.io_ticks * time_multiplier / delta_values.in_flight_ios;\n-                new_values[\"BlockQueueTimePerOp_\" + name] = delta_values.time_in_queue * time_multiplier / delta_values.in_flight_ios;\n+                new_values[\"BlockActiveTimePerOp_\" + name] = { delta_values.io_ticks * time_multiplier / delta_values.in_flight_ios,\n+                    \"Similar to the `BlockActiveTime` metrics, but the value is divided to the number of IO operations to count the per-operation time.\" };\n+                new_values[\"BlockQueueTimePerOp_\" + name] = { delta_values.time_in_queue * time_multiplier / delta_values.in_flight_ios,\n+                    \"Similar to the `BlockQueueTime` metrics, but the value is divided to the number of IO operations to count the per-operation time.\" };\n             }\n         }\n     }\n     catch (...)\n     {\n-        tryLogCurrentException(__PRETTY_FUNCTION__);\n+        LOG_DEBUG(log, \"Cannot read statistics from block devices: {}\", getCurrentExceptionMessage(false));\n \n         /// Try to reopen block devices in case of error\n-        /// (i.e. ENOENT means that some disk had been replaced, and it may apperas with a new name)\n+        /// (i.e. ENOENT or ENODEV means that some disk had been replaced, and it may appear with a new name)\n         try\n         {\n             openBlockDevices();\n@@ -1211,15 +1359,31 @@ void AsynchronousMetrics::update(TimePoint update_time)\n \n                 if (!first_run)\n                 {\n-                    new_values[\"NetworkReceiveBytes_\" + interface_name] = delta_values.recv_bytes;\n-                    new_values[\"NetworkReceivePackets_\" + interface_name] = delta_values.recv_packets;\n-                    new_values[\"NetworkReceiveErrors_\" + interface_name] = delta_values.recv_errors;\n-                    new_values[\"NetworkReceiveDrop_\" + interface_name] = delta_values.recv_drop;\n-\n-                    new_values[\"NetworkSendBytes_\" + interface_name] = delta_values.send_bytes;\n-                    new_values[\"NetworkSendPackets_\" + interface_name] = delta_values.send_packets;\n-                    new_values[\"NetworkSendErrors_\" + interface_name] = delta_values.send_errors;\n-                    new_values[\"NetworkSendDrop_\" + interface_name] = delta_values.send_drop;\n+                    new_values[\"NetworkReceiveBytes_\" + interface_name] = { delta_values.recv_bytes,\n+                        \" Number of bytes received via the network interface.\"\n+                        \" This is a system-wide metric, it includes all the processes on the host machine, not just clickhouse-server.\" };\n+                    new_values[\"NetworkReceivePackets_\" + interface_name] = { delta_values.recv_packets,\n+                        \" Number of network packets received via the network interface.\"\n+                        \" This is a system-wide metric, it includes all the processes on the host machine, not just clickhouse-server.\" };\n+                    new_values[\"NetworkReceiveErrors_\" + interface_name] = { delta_values.recv_errors,\n+                        \" Number of times error happened receiving via the network interface.\"\n+                        \" This is a system-wide metric, it includes all the processes on the host machine, not just clickhouse-server.\" };\n+                    new_values[\"NetworkReceiveDrop_\" + interface_name] = { delta_values.recv_drop,\n+                        \" Number of bytes a packet was dropped while received via the network interface.\"\n+                        \" This is a system-wide metric, it includes all the processes on the host machine, not just clickhouse-server.\" };\n+\n+                    new_values[\"NetworkSendBytes_\" + interface_name] = { delta_values.send_bytes,\n+                        \" Number of bytes sent via the network interface.\"\n+                        \" This is a system-wide metric, it includes all the processes on the host machine, not just clickhouse-server.\" };\n+                    new_values[\"NetworkSendPackets_\" + interface_name] = { delta_values.send_packets,\n+                        \" Number of network packets sent via the network interface.\"\n+                        \" This is a system-wide metric, it includes all the processes on the host machine, not just clickhouse-server.\" };\n+                    new_values[\"NetworkSendErrors_\" + interface_name] = { delta_values.send_errors,\n+                        \" Number of times error (e.g. TCP retransmit) happened while sending via the network interface.\"\n+                        \" This is a system-wide metric, it includes all the processes on the host machine, not just clickhouse-server.\" };\n+                    new_values[\"NetworkSendDrop_\" + interface_name] = { delta_values.send_drop,\n+                        \" Number of times a packed was dropped while sending via the network interface.\"\n+                        \" This is a system-wide metric, it includes all the processes on the host machine, not just clickhouse-server.\" };\n                 }\n             }\n         }\n@@ -1238,7 +1402,8 @@ void AsynchronousMetrics::update(TimePoint update_time)\n             in.rewind();\n             Int64 temperature = 0;\n             readText(temperature, in);\n-            new_values[fmt::format(\"Temperature{}\", i)] = temperature * 0.001;\n+            new_values[fmt::format(\"Temperature{}\", i)] = { temperature * 0.001,\n+                \"The temperature of the corresponding device in \u2103. A sensor can return an unrealistic value. Source: `/sys/class/thermal`\" };\n         }\n     }\n     catch (...)\n@@ -1271,13 +1436,17 @@ void AsynchronousMetrics::update(TimePoint update_time)\n                 }\n                 catch (const ErrnoException & e)\n                 {\n-                    LOG_DEBUG(&Poco::Logger::get(\"AsynchronousMetrics\"), \"Hardware monitor '{}', sensor '{}' exists but could not be read, error {}.\", hwmon_name, sensor_name, e.getErrno());\n+                    LOG_DEBUG(log, \"Hardware monitor '{}', sensor '{}' exists but could not be read: {}.\",\n+                        hwmon_name, sensor_name, errnoToString(e.getErrno()));\n+                    continue;\n                 }\n \n                 if (sensor_name.empty())\n-                    new_values[fmt::format(\"Temperature_{}\", hwmon_name)] = temperature * 0.001;\n+                    new_values[fmt::format(\"Temperature_{}\", hwmon_name)] = { temperature * 0.001,\n+                        \"The temperature reported by the corresponding hardware monitor in \u2103. A sensor can return an unrealistic value. Source: `/sys/class/hwmon`\" };\n                 else\n-                    new_values[fmt::format(\"Temperature_{}_{}\", hwmon_name, sensor_name)] = temperature * 0.001;\n+                    new_values[fmt::format(\"Temperature_{}_{}\", hwmon_name, sensor_name)] = { temperature * 0.001,\n+                        \"The temperature reported by the corresponding hardware monitor and the corresponding sensor in \u2103. A sensor can return an unrealistic value. Source: `/sys/class/hwmon`\" };\n             }\n         }\n     }\n@@ -1313,7 +1482,11 @@ void AsynchronousMetrics::update(TimePoint update_time)\n                 in.rewind();\n                 uint64_t errors = 0;\n                 readText(errors, in);\n-                new_values[fmt::format(\"EDAC{}_Correctable\", i)] = errors;\n+                new_values[fmt::format(\"EDAC{}_Correctable\", i)] = { errors,\n+                    \"The number of correctable ECC memory errors.\"\n+                    \" A high number of this value indicates bad RAM which has to be immediately replaced,\"\n+                    \" because in presence of a high number of corrected errors, a number of silent errors may happen as well, leading to data corruption.\"\n+                    \" Source: `/sys/devices/system/edac/mc/`\" };\n             }\n \n             if (edac[i].second)\n@@ -1322,7 +1495,11 @@ void AsynchronousMetrics::update(TimePoint update_time)\n                 in.rewind();\n                 uint64_t errors = 0;\n                 readText(errors, in);\n-                new_values[fmt::format(\"EDAC{}_Uncorrectable\", i)] = errors;\n+                new_values[fmt::format(\"EDAC{}_Uncorrectable\", i)] = { errors,\n+                    \"The number of uncorrectable ECC memory errors.\"\n+                    \" A non-zero number of this value indicates bad RAM which has to be immediately replaced,\"\n+                    \" because it indicates potential data corruption.\"\n+                    \" Source: `/sys/devices/system/edac/mc/`\" };\n             }\n         }\n     }\n@@ -1346,24 +1523,36 @@ void AsynchronousMetrics::update(TimePoint update_time)\n     {\n         auto stat = getStatVFS(getContext()->getPath());\n \n-        new_values[\"FilesystemMainPathTotalBytes\"] = stat.f_blocks * stat.f_frsize;\n-        new_values[\"FilesystemMainPathAvailableBytes\"] = stat.f_bavail * stat.f_frsize;\n-        new_values[\"FilesystemMainPathUsedBytes\"] = (stat.f_blocks - stat.f_bavail) * stat.f_frsize;\n-        new_values[\"FilesystemMainPathTotalINodes\"] = stat.f_files;\n-        new_values[\"FilesystemMainPathAvailableINodes\"] = stat.f_favail;\n-        new_values[\"FilesystemMainPathUsedINodes\"] = stat.f_files - stat.f_favail;\n+        new_values[\"FilesystemMainPathTotalBytes\"] = { stat.f_blocks * stat.f_frsize,\n+            \"The size of the volume where the main ClickHouse path is mounted, in bytes.\" };\n+        new_values[\"FilesystemMainPathAvailableBytes\"] = { stat.f_bavail * stat.f_frsize,\n+            \"Available bytes on the volume where the main ClickHouse path is mounted.\" };\n+        new_values[\"FilesystemMainPathUsedBytes\"] = { (stat.f_blocks - stat.f_bavail) * stat.f_frsize,\n+            \"Used bytes on the volume where the main ClickHouse path is mounted.\" };\n+        new_values[\"FilesystemMainPathTotalINodes\"] = { stat.f_files,\n+            \"The total number of inodes on the volume where the main ClickHouse path is mounted. If it is less than 25 million, it indicates a misconfiguration.\" };\n+        new_values[\"FilesystemMainPathAvailableINodes\"] = { stat.f_favail,\n+            \"The number of available inodes on the volume where the main ClickHouse path is mounted. If it is close to zero, it indicates a misconfiguration, and you will get 'no space left on device' even when the disk is not full.\" };\n+        new_values[\"FilesystemMainPathUsedINodes\"] = { stat.f_files - stat.f_favail,\n+            \"The number of used inodes on the volume where the main ClickHouse path is mounted. This value mostly corresponds to the number of files.\" };\n     }\n \n     {\n         /// Current working directory of the server is the directory with logs.\n         auto stat = getStatVFS(\".\");\n \n-        new_values[\"FilesystemLogsPathTotalBytes\"] = stat.f_blocks * stat.f_frsize;\n-        new_values[\"FilesystemLogsPathAvailableBytes\"] = stat.f_bavail * stat.f_frsize;\n-        new_values[\"FilesystemLogsPathUsedBytes\"] = (stat.f_blocks - stat.f_bavail) * stat.f_frsize;\n-        new_values[\"FilesystemLogsPathTotalINodes\"] = stat.f_files;\n-        new_values[\"FilesystemLogsPathAvailableINodes\"] = stat.f_favail;\n-        new_values[\"FilesystemLogsPathUsedINodes\"] = stat.f_files - stat.f_favail;\n+        new_values[\"FilesystemLogsPathTotalBytes\"] = { stat.f_blocks * stat.f_frsize,\n+            \"The size of the volume where ClickHouse logs path is mounted, in bytes. It's recommended to have at least 10 GB for logs.\" };\n+        new_values[\"FilesystemLogsPathAvailableBytes\"] = { stat.f_bavail * stat.f_frsize,\n+            \"Available bytes on the volume where ClickHouse logs path is mounted. If this value approaches zero, you should tune the log rotation in the configuration file.\" };\n+        new_values[\"FilesystemLogsPathUsedBytes\"] = { (stat.f_blocks - stat.f_bavail) * stat.f_frsize,\n+            \"Used bytes on the volume where ClickHouse logs path is mounted.\" };\n+        new_values[\"FilesystemLogsPathTotalINodes\"] = { stat.f_files,\n+            \"The total number of inodes on the volume where ClickHouse logs path is mounted.\" };\n+        new_values[\"FilesystemLogsPathAvailableINodes\"] = { stat.f_favail,\n+            \"The number of available inodes on the volume where ClickHouse logs path is mounted.\" };\n+        new_values[\"FilesystemLogsPathUsedINodes\"] = { stat.f_files - stat.f_favail,\n+            \"The number of used inodes on the volume where ClickHouse logs path is mounted.\" };\n     }\n \n     /// Free and total space on every configured disk.\n@@ -1380,10 +1569,14 @@ void AsynchronousMetrics::update(TimePoint update_time)\n             auto available = disk->getAvailableSpace();\n             auto unreserved = disk->getUnreservedSpace();\n \n-            new_values[fmt::format(\"DiskTotal_{}\", name)] = total;\n-            new_values[fmt::format(\"DiskUsed_{}\", name)] = total - available;\n-            new_values[fmt::format(\"DiskAvailable_{}\", name)] = available;\n-            new_values[fmt::format(\"DiskUnreserved_{}\", name)] = unreserved;\n+            new_values[fmt::format(\"DiskTotal_{}\", name)] = { total,\n+                \"The total size in bytes of the disk (virtual filesystem). Remote filesystems can show a large value like 16 EiB.\" };\n+            new_values[fmt::format(\"DiskUsed_{}\", name)] = { total - available,\n+                \"Used bytes on the disk (virtual filesystem). Remote filesystems not always provide this information.\" };\n+            new_values[fmt::format(\"DiskAvailable_{}\", name)] = { available,\n+                \"Available bytes on the disk (virtual filesystem). Remote filesystems can show a large value like 16 EiB.\" };\n+            new_values[fmt::format(\"DiskUnreserved_{}\", name)] = { unreserved,\n+                \"Available bytes on the disk (virtual filesystem) without the reservations for merges, fetches, and moves. Remote filesystems can show a large value like 16 EiB.\" };\n         }\n     }\n \n@@ -1463,44 +1656,46 @@ void AsynchronousMetrics::update(TimePoint update_time)\n             }\n         }\n \n-        new_values[\"ReplicasMaxQueueSize\"] = max_queue_size;\n-        new_values[\"ReplicasMaxInsertsInQueue\"] = max_inserts_in_queue;\n-        new_values[\"ReplicasMaxMergesInQueue\"] = max_merges_in_queue;\n+        new_values[\"ReplicasMaxQueueSize\"] = { max_queue_size, \"Maximum queue size (in the number of operations like get, merge) across Replicated tables.\" };\n+        new_values[\"ReplicasMaxInsertsInQueue\"] = { max_inserts_in_queue, \"Maximum number of INSERT operations in the queue (still to be replicated) across Replicated tables.\" };\n+        new_values[\"ReplicasMaxMergesInQueue\"] = { max_merges_in_queue, \"Maximum number of merge operations in the queue (still to be applied) across Replicated tables.\" };\n \n-        new_values[\"ReplicasSumQueueSize\"] = sum_queue_size;\n-        new_values[\"ReplicasSumInsertsInQueue\"] = sum_inserts_in_queue;\n-        new_values[\"ReplicasSumMergesInQueue\"] = sum_merges_in_queue;\n+        new_values[\"ReplicasSumQueueSize\"] = { sum_queue_size, \"Sum queue size (in the number of operations like get, merge) across Replicated tables.\" };\n+        new_values[\"ReplicasSumInsertsInQueue\"] = { sum_inserts_in_queue, \"Sum of INSERT operations in the queue (still to be replicated) across Replicated tables.\" };\n+        new_values[\"ReplicasSumMergesInQueue\"] = { sum_merges_in_queue, \"Sum of merge operations in the queue (still to be applied) across Replicated tables.\" };\n \n-        new_values[\"ReplicasMaxAbsoluteDelay\"] = max_absolute_delay;\n-        new_values[\"ReplicasMaxRelativeDelay\"] = max_relative_delay;\n+        new_values[\"ReplicasMaxAbsoluteDelay\"] = { max_absolute_delay, \"Maximum difference in seconds between the most fresh replicated part and the most fresh data part still to be replicated, across Replicated tables. A very high value indicates a replica with no data.\" };\n+        new_values[\"ReplicasMaxRelativeDelay\"] = { max_relative_delay, \"Maximum difference between the replica delay and the delay of the most up-to-date replica of the same table, across Replicated tables.\" };\n \n-        new_values[\"MaxPartCountForPartition\"] = max_part_count_for_partition;\n+        new_values[\"MaxPartCountForPartition\"] = { max_part_count_for_partition, \"Maximum number of parts per partition across all partitions of all tables of MergeTree family. Values larger than 300 indicates misconfiguration, overload, or massive data loading.\" };\n \n-        new_values[\"NumberOfDatabases\"] = number_of_databases;\n-        new_values[\"NumberOfTables\"] = total_number_of_tables;\n+        new_values[\"NumberOfDatabases\"] = { number_of_databases, \"Total number of databases on the server.\" };\n+        new_values[\"NumberOfTables\"] = { total_number_of_tables, \"Total number of tables summed across the databases on the server, excluding the databases that cannot contain MergeTree tables.\"\n+            \" The excluded database engines are those who generate the set of tables on the fly, like `Lazy`, `MySQL`, `PostgreSQL`, `SQlite`.\"};\n \n-        new_values[\"TotalBytesOfMergeTreeTables\"] = total_number_of_bytes;\n-        new_values[\"TotalRowsOfMergeTreeTables\"] = total_number_of_rows;\n-        new_values[\"TotalPartsOfMergeTreeTables\"] = total_number_of_parts;\n+        new_values[\"TotalBytesOfMergeTreeTables\"] = { total_number_of_bytes, \"Total amount of bytes (compressed, including data and indices) stored in all tables of MergeTree family.\" };\n+        new_values[\"TotalRowsOfMergeTreeTables\"] = { total_number_of_rows, \"Total amount of rows (records) stored in all tables of MergeTree family.\" };\n+        new_values[\"TotalPartsOfMergeTreeTables\"] = { total_number_of_parts, \"Total amount of data parts in all tables of MergeTree family.\"\n+            \" Numbers larger than 10 000 will negatively affect the server startup time and it may indicate unreasonable choice of the partition key.\" };\n \n-        auto get_metric_name = [](const String & name) -> const char *\n+        auto get_metric_name_doc = [](const String & name) -> std::pair<const char *, const char *>\n         {\n-            static std::map<String, const char *> metric_map =\n+            static std::map<String, std::pair<const char *, const char *>> metric_map =\n             {\n-                {\"tcp_port\", \"TCPThreads\"},\n-                {\"tcp_port_secure\", \"TCPSecureThreads\"},\n-                {\"http_port\", \"HTTPThreads\"},\n-                {\"https_port\", \"HTTPSecureThreads\"},\n-                {\"interserver_http_port\", \"InterserverThreads\"},\n-                {\"interserver_https_port\", \"InterserverSecureThreads\"},\n-                {\"mysql_port\", \"MySQLThreads\"},\n-                {\"postgresql_port\", \"PostgreSQLThreads\"},\n-                {\"grpc_port\", \"GRPCThreads\"},\n-                {\"prometheus.port\", \"PrometheusThreads\"}\n+                {\"tcp_port\", {\"TCPThreads\", \"Number of threads in the server of the TCP protocol (without TLS).\"}},\n+                {\"tcp_port_secure\", {\"TCPSecureThreads\", \"Number of threads in the server of the TCP protocol (with TLS).\"}},\n+                {\"http_port\", {\"HTTPThreads\", \"Number of threads in the server of the HTTP interface (without TLS).\"}},\n+                {\"https_port\", {\"HTTPSecureThreads\", \"Number of threads in the server of the HTTPS interface.\"}},\n+                {\"interserver_http_port\", {\"InterserverThreads\", \"Number of threads in the server of the replicas communication protocol (without TLS).\"}},\n+                {\"interserver_https_port\", {\"InterserverSecureThreads\", \"Number of threads in the server of the replicas communication protocol (with TLS).\"}},\n+                {\"mysql_port\", {\"MySQLThreads\", \"Number of threads in the server of the MySQL compatibility protocol.\"}},\n+                {\"postgresql_port\", {\"PostgreSQLThreads\", \"Number of threads in the server of the PostgreSQL compatibility protocol.\"}},\n+                {\"grpc_port\", {\"GRPCThreads\", \"Number of threads in the server of the GRPC protocol.\"}},\n+                {\"prometheus.port\", {\"PrometheusThreads\", \"Number of threads in the server of the Prometheus endpoint. Note: prometheus endpoints can be also used via the usual HTTP/HTTPs ports.\"}}\n             };\n             auto it = metric_map.find(name);\n             if (it == metric_map.end())\n-                return nullptr;\n+                return { nullptr, nullptr };\n             else\n                 return it->second;\n         };\n@@ -1508,8 +1703,8 @@ void AsynchronousMetrics::update(TimePoint update_time)\n         const auto server_metrics = protocol_server_metrics_func();\n         for (const auto & server_metric : server_metrics)\n         {\n-            if (const auto * name = get_metric_name(server_metric.port_name))\n-                new_values[name] = server_metric.current_threads;\n+            if (auto name_doc = get_metric_name_doc(server_metric.port_name); name_doc.first != nullptr)\n+                new_values[name_doc.first] = { server_metric.current_threads, name_doc.second };\n         }\n     }\n #if USE_NURAFT\n@@ -1522,14 +1717,14 @@ void AsynchronousMetrics::update(TimePoint update_time)\n             size_t is_observer = 0;\n             size_t is_standalone = 0;\n             size_t znode_count = 0;\n-            size_t watch_count =0;\n+            size_t watch_count = 0;\n             size_t ephemerals_count = 0;\n-            size_t approximate_data_size =0;\n+            size_t approximate_data_size = 0;\n             size_t key_arena_size = 0;\n-            size_t latest_snapshot_size =0;\n-            size_t open_file_descriptor_count =0;\n-            size_t max_file_descriptor_count =0;\n-            size_t followers =0;\n+            size_t latest_snapshot_size = 0;\n+            size_t open_file_descriptor_count = 0;\n+            size_t max_file_descriptor_count = 0;\n+            size_t followers = 0;\n             size_t synced_followers = 0;\n             size_t zxid = 0;\n             size_t session_with_watches = 0;\n@@ -1570,29 +1765,29 @@ void AsynchronousMetrics::update(TimePoint update_time)\n                 }\n             }\n \n-            new_values[\"KeeperIsLeader\"] = is_leader;\n-            new_values[\"KeeperIsFollower\"] = is_follower;\n-            new_values[\"KeeperIsObserver\"] = is_observer;\n-            new_values[\"KeeperIsStandalone\"] = is_standalone;\n-\n-            new_values[\"KeeperZnodeCount\"] = znode_count;\n-            new_values[\"KeeperWatchCount\"] = watch_count;\n-            new_values[\"KeeperEphemeralsCount\"] = ephemerals_count;\n-\n-            new_values[\"KeeperApproximateDataSize\"] = approximate_data_size;\n-            new_values[\"KeeperKeyArenaSize\"] = key_arena_size;\n-            new_values[\"KeeperLatestSnapshotSize\"] = latest_snapshot_size;\n-\n-            new_values[\"KeeperOpenFileDescriptorCount\"] = open_file_descriptor_count;\n-            new_values[\"KeeperMaxFileDescriptorCount\"] = max_file_descriptor_count;\n-\n-            new_values[\"KeeperFollowers\"] = followers;\n-            new_values[\"KeeperSyncedFollowers\"] = synced_followers;\n-            new_values[\"KeeperZxid\"] = zxid;\n-            new_values[\"KeeperSessionWithWatches\"] = session_with_watches;\n-            new_values[\"KeeperPathsWatched\"] = paths_watched;\n-            new_values[\"KeeperSnapshotDirSize\"] = snapshot_dir_size;\n-            new_values[\"KeeperLogDirSize\"] = log_dir_size;\n+            new_values[\"KeeperIsLeader\"] = { is_leader, \"1 if ClickHouse Keeper is a leader, 0 otherwise.\" };\n+            new_values[\"KeeperIsFollower\"] = { is_follower, \"1 if ClickHouse Keeper is a follower, 0 otherwise.\" };\n+            new_values[\"KeeperIsObserver\"] = { is_observer, \"1 if ClickHouse Keeper is an observer, 0 otherwise.\" };\n+            new_values[\"KeeperIsStandalone\"] = { is_standalone, \"1 if ClickHouse Keeper is in a standalone mode, 0 otherwise.\" };\n+\n+            new_values[\"KeeperZnodeCount\"] = { znode_count, \"The number of nodes (data entries) in ClickHouse Keeper.\" };\n+            new_values[\"KeeperWatchCount\"] = { watch_count, \"The number of watches in ClickHouse Keeper.\" };\n+            new_values[\"KeeperEphemeralsCount\"] = { ephemerals_count, \"The number of ephemeral nodes in ClickHouse Keeper.\" };\n+\n+            new_values[\"KeeperApproximateDataSize\"] = { approximate_data_size, \"The approximate data size of ClickHouse Keeper, in bytes.\" };\n+            new_values[\"KeeperKeyArenaSize\"] = { key_arena_size, \"The size in bytes of the memory arena for keys in ClickHouse Keeper.\" };\n+            new_values[\"KeeperLatestSnapshotSize\"] = { latest_snapshot_size, \"The uncompressed size in bytes of the latest snapshot created by ClickHouse Keeper.\" };\n+\n+            new_values[\"KeeperOpenFileDescriptorCount\"] = { open_file_descriptor_count, \"The number of open file descriptors in ClickHouse Keeper.\" };\n+            new_values[\"KeeperMaxFileDescriptorCount\"] = { max_file_descriptor_count, \"The maximum number of open file descriptors in ClickHouse Keeper.\" };\n+\n+            new_values[\"KeeperFollowers\"] = { followers, \"The number of followers of ClickHouse Keeper.\" };\n+            new_values[\"KeeperSyncedFollowers\"] = { synced_followers, \"The number of followers of ClickHouse Keeper who are also in-sync.\" };\n+            new_values[\"KeeperZxid\"] = { zxid, \"The current transaction id number (zxid) in ClickHouse Keeper.\" };\n+            new_values[\"KeeperSessionWithWatches\"] = { session_with_watches, \"The number of client sessions of ClickHouse Keeper having watches.\" };\n+            new_values[\"KeeperPathsWatched\"] = { paths_watched, \"The number of different paths watched by the clients of ClickHouse Keeper.\" };\n+            new_values[\"KeeperSnapshotDirSize\"] = { snapshot_dir_size, \"The size of the snapshots directory of ClickHouse Keeper, in bytes.\" };\n+            new_values[\"KeeperLogDirSize\"] = { log_dir_size, \"The size of the logs directory of ClickHouse Keeper, in bytes.\" };\n         }\n     }\n #endif\n@@ -1601,7 +1796,7 @@ void AsynchronousMetrics::update(TimePoint update_time)\n \n     /// Add more metrics as you wish.\n \n-    new_values[\"AsynchronousMetricsCalculationTimeSpent\"] = watch.elapsedSeconds();\n+    new_values[\"AsynchronousMetricsCalculationTimeSpent\"] = { watch.elapsedSeconds(), \"Time in seconds spent for calculation of asynchronous metrics (this is the overhead of asynchronous metrics).\" };\n \n     /// Log the new metrics.\n     if (auto asynchronous_metric_log = getContext()->getAsynchronousMetricLog())\n@@ -1681,11 +1876,10 @@ void AsynchronousMetrics::updateHeavyMetricsIfNeeded(TimePoint current_time, Tim\n                  update_period.count(),\n                  heavy_metric_update_period.count(),\n                  watch.elapsedSeconds());\n-\n     }\n \n-    new_values[\"NumberOfDetachedParts\"] = detached_parts_stats.count;\n-    new_values[\"NumberOfDetachedByUserParts\"] = detached_parts_stats.detached_by_user;\n+    new_values[\"NumberOfDetachedParts\"] = { detached_parts_stats.count, \"The total number of parts detached from MergeTree tables. A part can be detached by a user with the `ALTER TABLE DETACH` query or by the server itself it the part is broken, unexpected or unneeded. The server does not care about detached parts and they can be removed.\" };\n+    new_values[\"NumberOfDetachedByUserParts\"] = { detached_parts_stats.detached_by_user, \"The total number of parts detached from MergeTree tables by users with the `ALTER TABLE DETACH` query (as opposed to unexpected, broken or ignored parts). The server does not care about detached parts and they can be removed.\" };\n }\n \n }\ndiff --git a/src/Interpreters/AsynchronousMetrics.h b/src/Interpreters/AsynchronousMetrics.h\nindex 6e32bdb43b81..22ed2e862ead 100644\n--- a/src/Interpreters/AsynchronousMetrics.h\n+++ b/src/Interpreters/AsynchronousMetrics.h\n@@ -18,16 +18,25 @@\n \n namespace Poco\n {\n-class Logger;\n+    class Logger;\n }\n \n namespace DB\n {\n \n-class ProtocolServerAdapter;\n class ReadBuffer;\n \n-using AsynchronousMetricValue = double;\n+struct AsynchronousMetricValue\n+{\n+    double value;\n+    const char * documentation;\n+\n+    template <typename T>\n+    AsynchronousMetricValue(T value_, const char * documentation_)\n+        : value(static_cast<double>(value_)), documentation(documentation_) {}\n+    AsynchronousMetricValue() = default; /// For std::unordered_map::operator[].\n+};\n+\n using AsynchronousMetricValues = std::unordered_map<std::string, AsynchronousMetricValue>;\n \n struct ProtocolServerMetrics\n@@ -42,6 +51,9 @@ struct ProtocolServerMetrics\n   *\n   * This includes both ClickHouse-related metrics (like memory usage of ClickHouse process)\n   *  and common OS-related metrics (like total memory usage on the server).\n+  *\n+  * All the values are either gauge type (like the total number of tables, the current memory usage).\n+  * Or delta-counters representing some accumulation during the interval of time.\n   */\n class AsynchronousMetrics : WithContext\n {\ndiff --git a/src/Server/PrometheusMetricsWriter.cpp b/src/Server/PrometheusMetricsWriter.cpp\nindex 9168eb5f24d9..843d1e644635 100644\n--- a/src/Server/PrometheusMetricsWriter.cpp\n+++ b/src/Server/PrometheusMetricsWriter.cpp\n@@ -108,11 +108,16 @@ void PrometheusMetricsWriter::write(WriteBuffer & wb) const\n \n             if (!replaceInvalidChars(key))\n                 continue;\n+\n             auto value = name_value.second;\n \n+            std::string metric_doc{value.documentation};\n+            convertHelpToSingleLine(metric_doc);\n+\n             // TODO: add HELP section? asynchronous_metrics contains only key and value\n+            writeOutLine(wb, \"# HELP\", key, metric_doc);\n             writeOutLine(wb, \"# TYPE\", key, \"gauge\");\n-            writeOutLine(wb, key, value);\n+            writeOutLine(wb, key, value.value);\n         }\n     }\n \ndiff --git a/src/Server/PrometheusMetricsWriter.h b/src/Server/PrometheusMetricsWriter.h\nindex 4422ced625e1..0c2dde1f66f0 100644\n--- a/src/Server/PrometheusMetricsWriter.h\n+++ b/src/Server/PrometheusMetricsWriter.h\n@@ -3,11 +3,11 @@\n #include <string>\n \n #include <Interpreters/AsynchronousMetrics.h>\n-\n #include <IO/WriteBuffer.h>\n \n #include <Poco/Util/AbstractConfiguration.h>\n \n+\n namespace DB\n {\n \ndiff --git a/src/Server/ProtocolServerAdapter.h b/src/Server/ProtocolServerAdapter.h\nindex 850640ab70ad..514354f9723d 100644\n--- a/src/Server/ProtocolServerAdapter.h\n+++ b/src/Server/ProtocolServerAdapter.h\n@@ -6,8 +6,10 @@\n #include <memory>\n #include <string>\n \n+\n namespace DB\n {\n+\n class GRPCServer;\n class TCPServer;\n \ndiff --git a/src/Storages/System/StorageSystemAsynchronousMetrics.cpp b/src/Storages/System/StorageSystemAsynchronousMetrics.cpp\nindex 70e124406781..e2f62b902b71 100644\n--- a/src/Storages/System/StorageSystemAsynchronousMetrics.cpp\n+++ b/src/Storages/System/StorageSystemAsynchronousMetrics.cpp\n@@ -12,6 +12,7 @@ NamesAndTypesList StorageSystemAsynchronousMetrics::getNamesAndTypes()\n     return {\n         {\"metric\", std::make_shared<DataTypeString>()},\n         {\"value\", std::make_shared<DataTypeFloat64>()},\n+        {\"description\", std::make_shared<DataTypeString>()},\n     };\n }\n \n@@ -27,7 +28,8 @@ void StorageSystemAsynchronousMetrics::fillData(MutableColumns & res_columns, Co\n     for (const auto & name_value : async_metrics_values)\n     {\n         res_columns[0]->insert(name_value.first);\n-        res_columns[1]->insert(name_value.second);\n+        res_columns[1]->insert(name_value.second.value);\n+        res_columns[2]->insert(name_value.second.documentation);\n     }\n }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02117_show_create_table_system.reference b/tests/queries/0_stateless/02117_show_create_table_system.reference\nindex 4ffa31a56182..f2726f17e881 100644\n--- a/tests/queries/0_stateless/02117_show_create_table_system.reference\n+++ b/tests/queries/0_stateless/02117_show_create_table_system.reference\n@@ -23,7 +23,8 @@ COMMENT 'SYSTEM TABLE is built on the fly.'\n CREATE TABLE system.asynchronous_metrics\n (\n     `metric` String,\n-    `value` Float64\n+    `value` Float64,\n+    `description` String\n )\n ENGINE = SystemAsynchronousMetrics\n COMMENT 'SYSTEM TABLE is built on the fly.'\ndiff --git a/tests/queries/0_stateless/02480_every_asynchronous_metric_must_have_documentation.reference b/tests/queries/0_stateless/02480_every_asynchronous_metric_must_have_documentation.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/02480_every_asynchronous_metric_must_have_documentation.sql b/tests/queries/0_stateless/02480_every_asynchronous_metric_must_have_documentation.sql\nnew file mode 100644\nindex 000000000000..3f0ab58cc432\n--- /dev/null\n+++ b/tests/queries/0_stateless/02480_every_asynchronous_metric_must_have_documentation.sql\n@@ -0,0 +1,1 @@\n+SELECT metric FROM system.asynchronous_metrics WHERE length(description) < 10;\n",
  "problem_statement": "Document system.asynchronous_metrics\nDefined in https://github.com/ClickHouse/ClickHouse/blob/master/dbms/src/Interpreters/AsynchronousMetrics.cpp\r\n\r\ncc @alexey-milovidov \ud83d\ude04 \n",
  "hints_text": "https://clickhouse.yandex/docs/en/operations/system_tables/#system_tables-asynchronous_metrics\n@BayoNet The meaning of each metric is still undocumented. Can you please re-open this?\n@alexey-milovidov Do we need extra documentation here? \r\nhttps://clickhouse.tech/docs/en/operations/system-tables/asynchronous_metric_log/\r\nhttps://clickhouse.tech/docs/en/operations/system-tables/asynchronous_metrics/\n@olgarev Yes, we need to provide description on the existing metrics.\nInternal documentation ticket: DOCSUP-9153 - cancelled. Waiting for descriptions in the `asynchronous_metrics` and `asynchronous_metric_log` tables.\r\n\r\n",
  "created_at": "2022-11-13T02:38:54Z",
  "modified_files": [
    "programs/server/MetricsTransmitter.cpp",
    "src/Common/Exception.h",
    "src/Interpreters/AsynchronousMetricLog.cpp",
    "src/Interpreters/AsynchronousMetricLog.h",
    "src/Interpreters/AsynchronousMetrics.cpp",
    "src/Interpreters/AsynchronousMetrics.h",
    "src/Server/PrometheusMetricsWriter.cpp",
    "src/Server/PrometheusMetricsWriter.h",
    "src/Server/ProtocolServerAdapter.h",
    "src/Storages/System/StorageSystemAsynchronousMetrics.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/02117_show_create_table_system.reference",
    "b/tests/queries/0_stateless/02480_every_asynchronous_metric_must_have_documentation.sql"
  ]
}