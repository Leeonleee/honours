{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 72656,
  "instance_id": "ClickHouse__ClickHouse-72656",
  "issue_numbers": [
    "59620"
  ],
  "base_commit": "dc4bbc8d733e0fb237357f971ceddc4e0b58c223",
  "patch": "diff --git a/src/Core/Settings.cpp b/src/Core/Settings.cpp\nindex c70398074dec..19ec3821d2db 100644\n--- a/src/Core/Settings.cpp\n+++ b/src/Core/Settings.cpp\n@@ -1816,6 +1816,22 @@ Possible values:\n \n - 0 \u2014 Disabled.\n - 1 \u2014 Enabled.\n+)\", 0) \\\n+    DECLARE(Map, http_response_headers, \"\", R\"(\n+Allows to add or override HTTP headers which the server will return in the response with a successful query result.\n+This only affects the HTTP interface.\n+\n+If the header is already set by default, the provided value will override it.\n+If the header was not set by default, it will be added to the list of headers.\n+Headers that are set by the server by default and not overridden by this setting, will remain.\n+\n+The setting allows you to set a header to a constant value. Currently there is no way to set a header to a dynamically calculated value.\n+\n+Neither names or values can contain ASCII control characters.\n+\n+If you implement a UI application which allows users to modify settings but at the same time makes decisions based on the returned headers, it is recommended to restrict this setting to readonly.\n+\n+Example: `SET http_response_headers = '{\"Content-Type\": \"image/png\"}'`\n )\", 0) \\\n     \\\n     DECLARE(String, count_distinct_implementation, \"uniqExact\", R\"(\ndiff --git a/src/Core/SettingsChangesHistory.cpp b/src/Core/SettingsChangesHistory.cpp\nindex cdff71bfb48a..aeeb9f0fdd41 100644\n--- a/src/Core/SettingsChangesHistory.cpp\n+++ b/src/Core/SettingsChangesHistory.cpp\n@@ -67,6 +67,7 @@ static std::initializer_list<std::pair<ClickHouseVersion, SettingsChangesHistory\n             {\"max_bytes_ratio_before_external_group_by\", 0., 0., \"New setting.\"},\n             {\"max_bytes_ratio_before_external_sort\", 0., 0., \"New setting.\"},\n             {\"use_async_executor_for_materialized_views\", false, false, \"New setting.\"},\n+            {\"http_response_headers\", \"\", \"\", \"New setting.\"},\n         }\n     },\n     {\"24.11\",\ndiff --git a/src/Interpreters/executeQuery.cpp b/src/Interpreters/executeQuery.cpp\nindex a94eca3d7b1c..2139353917ee 100644\n--- a/src/Interpreters/executeQuery.cpp\n+++ b/src/Interpreters/executeQuery.cpp\n@@ -163,6 +163,7 @@ namespace Setting\n     extern const SettingsSeconds wait_for_async_insert_timeout;\n     extern const SettingsBool implicit_select;\n     extern const SettingsBool enforce_strict_identifier_format;\n+    extern const SettingsMap http_response_headers;\n }\n \n namespace ErrorCodes\n@@ -179,6 +180,7 @@ namespace ErrorCodes\n     extern const int SYNTAX_ERROR;\n     extern const int SUPPORT_IS_DISABLED;\n     extern const int INCORRECT_QUERY;\n+    extern const int BAD_ARGUMENTS;\n }\n \n namespace FailPoints\n@@ -1682,6 +1684,33 @@ void executeQuery(\n     /// But `session_timezone` setting could be modified in the query itself, so we update the value.\n     result_details.timezone = DateLUT::instance().getTimeZone();\n \n+    const Map & additional_http_headers = context->getSettingsRef()[Setting::http_response_headers].value;\n+    if (!additional_http_headers.empty())\n+    {\n+        for (const auto & key_value : additional_http_headers)\n+        {\n+            if (key_value.getType() != Field::Types::Tuple\n+                || key_value.safeGet<Tuple>().size() != 2)\n+                throw Exception(ErrorCodes::BAD_ARGUMENTS, \"The value of the `additional_http_headers` setting must be a Map\");\n+\n+            if (key_value.safeGet<Tuple>().at(0).getType() != Field::Types::String)\n+                throw Exception(ErrorCodes::BAD_ARGUMENTS, \"The keys of the `additional_http_headers` setting must be Strings\");\n+\n+            if (key_value.safeGet<Tuple>().at(1).getType() != Field::Types::String)\n+                throw Exception(ErrorCodes::BAD_ARGUMENTS, \"The values of the `additional_http_headers` setting must be Strings\");\n+\n+            String key = key_value.safeGet<Tuple>().at(0).safeGet<String>();\n+            String value = key_value.safeGet<Tuple>().at(1).safeGet<String>();\n+\n+            if (std::find_if(key.begin(), key.end(), isControlASCII) != key.end()\n+                || std::find_if(value.begin(), value.end(), isControlASCII) != value.end())\n+                throw Exception(ErrorCodes::BAD_ARGUMENTS, \"The values of the `additional_http_headers` cannot contain ASCII control characters\");\n+\n+            if (!result_details.additional_headers.emplace(key, value).second)\n+                throw Exception(ErrorCodes::BAD_ARGUMENTS, \"There are duplicate entries in the `additional_http_headers` setting\");\n+        }\n+    }\n+\n     auto & pipeline = streams.pipeline;\n \n     std::unique_ptr<WriteBuffer> compressed_buffer;\ndiff --git a/src/Interpreters/executeQuery.h b/src/Interpreters/executeQuery.h\nindex c6b3e1fc34ec..e46a40efaa38 100644\n--- a/src/Interpreters/executeQuery.h\n+++ b/src/Interpreters/executeQuery.h\n@@ -24,6 +24,7 @@ struct QueryResultDetails\n     std::optional<String> content_type = {};\n     std::optional<String> format = {};\n     std::optional<String> timezone = {};\n+    std::unordered_map<String, String> additional_headers = {};\n };\n \n using SetResultDetailsFunc = std::function<void(const QueryResultDetails &)>;\n@@ -42,7 +43,7 @@ void executeQuery(\n     WriteBuffer & ostr,                 /// Where to write query output to.\n     bool allow_into_outfile,            /// If true and the query contains INTO OUTFILE section, redirect output to that file.\n     ContextMutablePtr context,          /// DB, tables, data types, storage engines, functions, aggregate functions...\n-    SetResultDetailsFunc set_result_details, /// If a non-empty callback is passed, it will be called with the query id, the content-type, the format, and the timezone.\n+    SetResultDetailsFunc set_result_details, /// If a non-empty callback is passed, it will be called with the query id, the content-type, the format, and the timezone, as well as additional headers.\n     QueryFlags flags = {},\n     const std::optional<FormatSettings> & output_format_settings = std::nullopt, /// Format settings for output format, will be calculated from the context if not set.\n     HandleExceptionInOutputFormatFunc handle_exception_in_output_format = {} /// If a non-empty callback is passed, it will be called on exception with created output format.\ndiff --git a/src/Server/HTTPHandler.cpp b/src/Server/HTTPHandler.cpp\nindex 74c060b8340d..8ff6c6810884 100644\n--- a/src/Server/HTTPHandler.cpp\n+++ b/src/Server/HTTPHandler.cpp\n@@ -524,6 +524,9 @@ void HTTPHandler::processQuery(\n \n         if (details.timezone)\n             response.add(\"X-ClickHouse-Timezone\", *details.timezone);\n+\n+        for (const auto & [name, value] : details.additional_headers)\n+            response.set(name, value);\n     };\n \n     auto handle_exception_in_output_format = [&](IOutputFormat & current_output_format,\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03277_http_response_headers.reference b/tests/queries/0_stateless/03277_http_response_headers.reference\nnew file mode 100644\nindex 000000000000..57a820de8f5f\n--- /dev/null\n+++ b/tests/queries/0_stateless/03277_http_response_headers.reference\n@@ -0,0 +1,17 @@\n+We can add a new header:\n+> POST /?http_response_headers={'My-New-Header':'Hello,+world.'} HTTP/1.1\r\n+< My-New-Header: Hello, world.\r\n+It works even with the settings clause:\n+< My-New-Header: Hello, world.\r\n+Check the default header value:\n+> Content-Type: application/x-www-form-urlencoded\r\n+< Content-Type: text/tab-separated-values; charset=UTF-8\r\n+Check that we can override it:\n+> POST /?http_response_headers={'Content-Type':'image/png'} HTTP/1.1\r\n+> Content-Type: application/x-www-form-urlencoded\r\n+< Content-Type: image/png\r\n+It does not allow bad characters:\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+It does not let duplicate entries:\n+BAD_ARGUMENTS\ndiff --git a/tests/queries/0_stateless/03277_http_response_headers.sh b/tests/queries/0_stateless/03277_http_response_headers.sh\nnew file mode 100755\nindex 000000000000..f5f0223bf94a\n--- /dev/null\n+++ b/tests/queries/0_stateless/03277_http_response_headers.sh\n@@ -0,0 +1,24 @@\n+#!/usr/bin/env bash\n+\n+CUR_DIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CUR_DIR\"/../shell_config.sh\n+\n+echo \"We can add a new header:\"\n+${CLICKHOUSE_CURL} -sS --globoff -v \"http://localhost:8123/?http_response_headers={'My-New-Header':'Hello,+world.'}\" -d \"SELECT 1\" 2>&1 | grep -i 'My-New'\n+\n+echo \"It works even with the settings clause:\"\n+${CLICKHOUSE_CURL} -sS --globoff -v \"http://localhost:8123/\" -d \"SELECT 1 SETTINGS http_response_headers = \\$\\${'My-New-Header':'Hello, world.'}\\$\\$\" 2>&1 | grep -i 'My-New'\n+\n+echo \"Check the default header value:\"\n+${CLICKHOUSE_CURL} -sS --globoff -v \"http://localhost:8123/\" -d \"SELECT 1\" 2>&1 | grep -i 'Content-Type'\n+\n+echo \"Check that we can override it:\"\n+${CLICKHOUSE_CURL} -sS --globoff -v \"http://localhost:8123/?http_response_headers={'Content-Type':'image/png'}\" -d \"SELECT 1\" 2>&1 | grep -i 'Content-Type'\n+\n+echo \"It does not allow bad characters:\"\n+${CLICKHOUSE_CURL} -sS --globoff -v \"http://localhost:8123/\" -d \"SELECT 1 SETTINGS http_response_headers = \\$\\${'My-New-Header':'Hello,\\n\\nworld.'}\\$\\$\" 2>&1 | grep -o -F 'BAD_ARGUMENTS'\n+${CLICKHOUSE_CURL} -sS --globoff -v \"http://localhost:8123/\" -d \"SELECT 1 SETTINGS http_response_headers = \\$\\${'My\\rNew-Header':'Hello, world.'}\\$\\$\" 2>&1 | grep -o -F 'BAD_ARGUMENTS'\n+\n+echo \"It does not let duplicate entries:\"\n+${CLICKHOUSE_CURL} -sS --globoff -v \"http://localhost:8123/\" -d \"SELECT 1 SETTINGS http_response_headers = \\$\\${'a':'b','a':'c'}\\$\\$\" 2>&1 | grep -o -F 'BAD_ARGUMENTS'\n",
  "problem_statement": "A setting `http_response_headers`\n**Use case**\r\n\r\nOften times ClickHouse is queried directly from the browser.\r\nLet's allow to set up headers for caching in the browser, to change the content-type of the response, or set a cookie.\r\n\r\n**Describe the solution you'd like**\r\n\r\nA setting `http_response_headers` which is a `Map(String, String)`.\r\nThe headers are either added to the response or override the response.\r\nThe headers should be checked for the allowed set of characters.\r\nSome headers cannot be overridden.\r\n\r\n**Caveats?**\r\n\r\nThe expected scenario is when you configure this setting inside a view or parameterized view or on a user level, and keep it readonly. But I don't see any caveats even if it is controlled by a client.\n",
  "hints_text": "In further versions of the implementation for dynamic handlers maybe useful to set headers from query result (somehow).\nOk, but I thought about making it also a query-level setting.\r\n\r\n```\r\nSELECT screenshot FROM table FORMAT Raw\r\nSETTINGS http_response_headers = [('Content-Type', 'image/png')]\r\n```\nI could take that too.\n* https://github.com/ClickHouse/ClickHouse/pull/65254\n@GSokol, thank you, this will be wonderful!\r\n\r\n@den-crane, the linked PR looks very ad-hoc compared to this feature request.\r\nFor example, I want `image/png` for RawBLOB.\n> @den-crane, the linked PR looks very ad-hoc compared to this feature request.\r\n> For example, I want `image/png` for RawBLOB.\r\n\r\nI just don't like that Clickhouse has two ways to define Content-Type\nThis feature is relevant and we need it!\nI need this.",
  "created_at": "2024-11-30T21:04:25Z"
}