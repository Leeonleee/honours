{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 70979,
  "instance_id": "ClickHouse__ClickHouse-70979",
  "issue_numbers": [
    "70973"
  ],
  "base_commit": "ac766ae2d81564ceadc717122952ada2c964cd20",
  "patch": "diff --git a/base/base/StringRef.h b/base/base/StringRef.h\nindex af3441c2a75c..aa2bce71032b 100644\n--- a/base/base/StringRef.h\n+++ b/base/base/StringRef.h\n@@ -369,11 +369,15 @@ namespace PackedZeroTraits\n {\n     template <typename Second, template <typename, typename> class PackedPairNoInit>\n     inline bool check(const PackedPairNoInit<StringRef, Second> p)\n-    { return 0 == p.key.size; }\n+    {\n+        return 0 == p.key.size;\n+    }\n \n     template <typename Second, template <typename, typename> class PackedPairNoInit>\n     inline void set(PackedPairNoInit<StringRef, Second> & p)\n-    { p.key.size = 0; }\n+    {\n+        p.key.size = 0;\n+    }\n }\n \n \ndiff --git a/src/Common/HashTable/HashTable.h b/src/Common/HashTable/HashTable.h\nindex 05a257de2e2a..f4374a0f2ca6 100644\n--- a/src/Common/HashTable/HashTable.h\n+++ b/src/Common/HashTable/HashTable.h\n@@ -67,19 +67,6 @@ struct HashTableNoState\n };\n \n \n-/// These functions can be overloaded for custom types.\n-namespace ZeroTraits\n-{\n-\n-template <typename T>\n-bool check(const T x) { return x == T{}; }\n-\n-template <typename T>\n-void set(T & x) { x = T{}; }\n-\n-}\n-\n-\n /** Numbers are compared bitwise.\n   * Complex types are compared by operator== as usual (this is important if there are gaps).\n   *\n@@ -87,18 +74,32 @@ void set(T & x) { x = T{}; }\n   * Otherwise the invariants in hash table probing do not met when NaNs are present.\n   */\n template <typename T>\n-inline bool bitEquals(T && a, T && b)\n+inline bool bitEquals(T a, T b)\n {\n-    using RealT = std::decay_t<T>;\n-\n-    if constexpr (std::is_floating_point_v<RealT>)\n-        /// Note that memcmp with constant size is compiler builtin.\n-        return 0 == memcmp(&a, &b, sizeof(RealT)); /// NOLINT\n+    if constexpr (std::is_floating_point_v<T>)\n+        /// Note that memcmp with constant size is a compiler builtin.\n+        return 0 == memcmp(&a, &b, sizeof(T)); /// NOLINT\n     else\n         return a == b;\n }\n \n \n+/// These functions can be overloaded for custom types.\n+namespace ZeroTraits\n+{\n+\n+template <typename T>\n+bool check(const T x)\n+{\n+    return bitEquals(x, T{});\n+}\n+\n+template <typename T>\n+void set(T & x) { x = T{}; }\n+\n+}\n+\n+\n /**\n   * getKey/Mapped -- methods to get key/\"mapped\" values from the LookupResult returned by find() and\n   * emplace() methods of HashTable. Must not be called for a null LookupResult.\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03254_uniq_exact_two_level_negative_zero.reference b/tests/queries/0_stateless/03254_uniq_exact_two_level_negative_zero.reference\nnew file mode 100644\nindex 000000000000..771c05369c19\n--- /dev/null\n+++ b/tests/queries/0_stateless/03254_uniq_exact_two_level_negative_zero.reference\n@@ -0,0 +1,1 @@\n+7992019\ndiff --git a/tests/queries/0_stateless/03254_uniq_exact_two_level_negative_zero.sql b/tests/queries/0_stateless/03254_uniq_exact_two_level_negative_zero.sql\nnew file mode 100644\nindex 000000000000..3237818d2901\n--- /dev/null\n+++ b/tests/queries/0_stateless/03254_uniq_exact_two_level_negative_zero.sql\n@@ -0,0 +1,1 @@\n+WITH number % 1000 = 0 ? (rand() % 2 ? 0.0 : -0.0) : number::Float64 AS x SELECT length(uniqExactState(x)::String) FROM numbers(1000000);\n",
  "problem_statement": "Function `uniqExact` is confused with -0.0 and 0.0 when using a two-level structure.\n**Describe what's wrong**\r\n\r\n```\r\nWITH number % 1000 = 0 ? (rand() % 2 ? 0.0 : -0.0) : number::Float64 AS x SELECT uniqExactState(x) FROM numbers(1000000)\r\n```\r\n\r\n```\r\nCode: 49. DB::Exception: Code: 49. DB::Exception: No more than one zero value expected. (LOGICAL_ERROR) (version 24.10.1.1). (LOGICAL_ERROR) (version 24.10.1.1)\r\n```\r\n\r\n**Does it reproduce on the most recent release?**\r\n\r\nYes.\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2024-10-23T15:22:08Z",
  "modified_files": [
    "base/base/StringRef.h",
    "src/Common/HashTable/HashTable.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03254_uniq_exact_two_level_negative_zero.reference",
    "b/tests/queries/0_stateless/03254_uniq_exact_two_level_negative_zero.sql"
  ]
}