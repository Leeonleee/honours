diff --git a/src/Interpreters/InterpreterSelectQuery.cpp b/src/Interpreters/InterpreterSelectQuery.cpp
index 290bc26856a0..a189ca38753b 100644
--- a/src/Interpreters/InterpreterSelectQuery.cpp
+++ b/src/Interpreters/InterpreterSelectQuery.cpp
@@ -853,14 +853,14 @@ void InterpreterSelectQuery::executeImpl(TPipeline & pipeline, const BlockInputS
                 {
                     pipeline.addSimpleTransform([&](const Block & block, QueryPipeline::StreamType stream_type) -> ProcessorPtr
                     {
-                        if (stream_type == QueryPipeline::StreamType::Totals)
-                            return nullptr;
+                        bool on_totals = stream_type == QueryPipeline::StreamType::Totals;
 
                         return std::make_shared<FilterTransform>(
                             block,
                             expressions.filter_info->actions,
                             expressions.filter_info->column_name,
-                            expressions.filter_info->do_remove_column);
+                            expressions.filter_info->do_remove_column,
+                            on_totals);
                     });
                 }
                 else
@@ -1608,9 +1608,10 @@ void InterpreterSelectQuery::executeWhere(Pipeline & pipeline, const ExpressionA
 
 void InterpreterSelectQuery::executeWhere(QueryPipeline & pipeline, const ExpressionActionsPtr & expression, bool remove_filter)
 {
-    pipeline.addSimpleTransform([&](const Block & block)
+    pipeline.addSimpleTransform([&](const Block & block, QueryPipeline::StreamType stream_type)
     {
-        return std::make_shared<FilterTransform>(block, expression, getSelectQuery().where()->getColumnName(), remove_filter);
+        bool on_totals = stream_type == QueryPipeline::StreamType::Totals;
+        return std::make_shared<FilterTransform>(block, expression, getSelectQuery().where()->getColumnName(), remove_filter, on_totals);
     });
 }
 
@@ -1869,11 +1870,10 @@ void InterpreterSelectQuery::executeHaving(QueryPipeline & pipeline, const Expre
 {
     pipeline.addSimpleTransform([&](const Block & header, QueryPipeline::StreamType stream_type) -> ProcessorPtr
     {
-        if (stream_type == QueryPipeline::StreamType::Totals)
-            return nullptr;
+        bool on_totals = stream_type == QueryPipeline::StreamType::Totals;
 
         /// TODO: do we need to save filter there?
-        return std::make_shared<FilterTransform>(header, expression, getSelectQuery().having()->getColumnName(), false);
+        return std::make_shared<FilterTransform>(header, expression, getSelectQuery().having()->getColumnName(), false, on_totals);
     });
 }
 
diff --git a/src/Processors/Transforms/FilterTransform.cpp b/src/Processors/Transforms/FilterTransform.cpp
index 9d4c97183b5f..e35a399a0eec 100644
--- a/src/Processors/Transforms/FilterTransform.cpp
+++ b/src/Processors/Transforms/FilterTransform.cpp
@@ -47,11 +47,13 @@ FilterTransform::FilterTransform(
     const Block & header_,
     ExpressionActionsPtr expression_,
     String filter_column_name_,
-    bool remove_filter_column_)
+    bool remove_filter_column_,
+    bool on_totals_)
     : ISimpleTransform(header_, transformHeader(header_, expression_, filter_column_name_, remove_filter_column_), true)
     , expression(std::move(expression_))
     , filter_column_name(std::move(filter_column_name_))
     , remove_filter_column(remove_filter_column_)
+    , on_totals(on_totals_)
 {
     transformed_header = getInputPort().getHeader();
     expression->execute(transformed_header);
@@ -64,11 +66,12 @@ FilterTransform::FilterTransform(
 
 IProcessor::Status FilterTransform::prepare()
 {
-    if (constant_filter_description.always_false
-        /// Optimization for `WHERE column in (empty set)`.
-        /// The result will not change after set was created, so we can skip this check.
-        /// It is implemented in prepare() stop pipeline before reading from input port.
-        || (!are_prepared_sets_initialized && expression->checkColumnIsAlwaysFalse(filter_column_name)))
+    if (!on_totals
+        && (constant_filter_description.always_false
+            /// Optimization for `WHERE column in (empty set)`.
+            /// The result will not change after set was created, so we can skip this check.
+            /// It is implemented in prepare() stop pipeline before reading from input port.
+            || (!are_prepared_sets_initialized && expression->checkColumnIsAlwaysFalse(filter_column_name))))
     {
         input.close();
         output.finish();
@@ -99,12 +102,17 @@ void FilterTransform::transform(Chunk & chunk)
     {
         Block block = getInputPort().getHeader().cloneWithColumns(columns);
         columns.clear();
-        expression->execute(block);
+
+        if (on_totals)
+            expression->executeOnTotals(block);
+        else
+            expression->execute(block);
+
         num_rows_before_filtration = block.rows();
         columns = block.getColumns();
     }
 
-    if (constant_filter_description.always_true)
+    if (constant_filter_description.always_true || on_totals)
     {
         chunk.setColumns(std::move(columns), num_rows_before_filtration);
         removeFilterIfNeed(chunk);
diff --git a/src/Processors/Transforms/FilterTransform.h b/src/Processors/Transforms/FilterTransform.h
index 2eb321474de3..45ec9da2ea3f 100644
--- a/src/Processors/Transforms/FilterTransform.h
+++ b/src/Processors/Transforms/FilterTransform.h
@@ -16,7 +16,8 @@ class FilterTransform : public ISimpleTransform
 {
 public:
     FilterTransform(
-        const Block & header_, ExpressionActionsPtr expression_, String filter_column_name_, bool remove_filter_column_);
+        const Block & header_, ExpressionActionsPtr expression_, String filter_column_name_,
+        bool remove_filter_column_, bool on_totals_ = false);
 
     String getName() const override { return "FilterTransform"; }
 
@@ -29,6 +30,7 @@ class FilterTransform : public ISimpleTransform
     ExpressionActionsPtr expression;
     String filter_column_name;
     bool remove_filter_column;
+    bool on_totals;
 
     ConstantFilterDescription constant_filter_description;
     size_t filter_column_position = 0;
