{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 6550,
  "instance_id": "ClickHouse__ClickHouse-6550",
  "issue_numbers": [
    "6125"
  ],
  "base_commit": "e4dda4332ef2a9ed7e87b6c681dd2cdd74c534a4",
  "patch": "diff --git a/dbms/src/Interpreters/Set.cpp b/dbms/src/Interpreters/Set.cpp\nindex 7840a314380f..4313decd36d6 100644\n--- a/dbms/src/Interpreters/Set.cpp\n+++ b/dbms/src/Interpreters/Set.cpp\n@@ -320,13 +320,7 @@ ColumnPtr Set::execute(const Block & block, bool negative) const\n         return res;\n     }\n \n-    if (data_types.size() != num_key_columns)\n-    {\n-        std::stringstream message;\n-        message << \"Number of columns in section IN doesn't match. \"\n-            << num_key_columns << \" at left, \" << data_types.size() << \" at right.\";\n-        throw Exception(message.str(), ErrorCodes::NUMBER_OF_COLUMNS_DOESNT_MATCH);\n-    }\n+    checkColumnsNumber(num_key_columns);\n \n     /// Remember the columns we will work with. Also check that the data types are correct.\n     ColumnRawPtrs key_columns;\n@@ -337,11 +331,7 @@ ColumnPtr Set::execute(const Block & block, bool negative) const\n \n     for (size_t i = 0; i < num_key_columns; ++i)\n     {\n-        if (!removeNullable(data_types[i])->equals(*removeNullable(block.safeGetByPosition(i).type)))\n-            throw Exception(\"Types of column \" + toString(i + 1) + \" in section IN don't match: \"\n-                + data_types[i]->getName() + \" on the right, \" + block.safeGetByPosition(i).type->getName() +\n-                \" on the left.\", ErrorCodes::TYPE_MISMATCH);\n-\n+        checkTypesEqual(i, block.safeGetByPosition(i).type);\n         materialized_columns.emplace_back(block.safeGetByPosition(i).column->convertToFullColumnIfConst());\n         key_columns.emplace_back() = materialized_columns.back().get();\n     }\n@@ -421,6 +411,24 @@ void Set::executeOrdinary(\n     }\n }\n \n+void Set::checkColumnsNumber(size_t num_key_columns) const\n+{\n+    if (data_types.size() != num_key_columns)\n+    {\n+        std::stringstream message;\n+        message << \"Number of columns in section IN doesn't match. \"\n+                << num_key_columns << \" at left, \" << data_types.size() << \" at right.\";\n+        throw Exception(message.str(), ErrorCodes::NUMBER_OF_COLUMNS_DOESNT_MATCH);\n+    }\n+}\n+\n+void Set::checkTypesEqual(size_t set_type_idx, const DataTypePtr & other_type) const\n+{\n+    if (!removeNullable(data_types[set_type_idx])->equals(*removeNullable(other_type)))\n+        throw Exception(\"Types of column \" + toString(set_type_idx + 1) + \" in section IN don't match: \"\n+                        + data_types[set_type_idx]->getName() + \" on the right, \" + other_type->getName() +\n+                        \" on the left.\", ErrorCodes::TYPE_MISMATCH);\n+}\n \n MergeTreeSetIndex::MergeTreeSetIndex(const Columns & set_elements, std::vector<KeyTuplePositionMapping> && index_mapping_)\n     : indexes_mapping(std::move(index_mapping_))\ndiff --git a/dbms/src/Interpreters/Set.h b/dbms/src/Interpreters/Set.h\nindex aad10451de09..a252f1ebc1e5 100644\n--- a/dbms/src/Interpreters/Set.h\n+++ b/dbms/src/Interpreters/Set.h\n@@ -70,6 +70,9 @@ class Set\n     bool hasExplicitSetElements() const { return fill_set_elements; }\n     Columns getSetElements() const { return { set_elements.begin(), set_elements.end() }; }\n \n+    void checkColumnsNumber(size_t num_key_columns) const;\n+    void checkTypesEqual(size_t set_type_idx, const DataTypePtr & other_type) const;\n+\n private:\n     size_t keys_size = 0;\n     Sizes key_sizes;\ndiff --git a/dbms/src/Storages/MergeTree/KeyCondition.cpp b/dbms/src/Storages/MergeTree/KeyCondition.cpp\nindex 790c72329a20..0ebe8f79abab 100644\n--- a/dbms/src/Storages/MergeTree/KeyCondition.cpp\n+++ b/dbms/src/Storages/MergeTree/KeyCondition.cpp\n@@ -546,11 +546,13 @@ bool KeyCondition::tryPrepareSetIndex(\n         }\n     };\n \n+    size_t left_args_count = 1;\n     const auto * left_arg_tuple = left_arg->as<ASTFunction>();\n     if (left_arg_tuple && left_arg_tuple->name == \"tuple\")\n     {\n         const auto & tuple_elements = left_arg_tuple->arguments->children;\n-        for (size_t i = 0; i < tuple_elements.size(); ++i)\n+        left_args_count = tuple_elements.size();\n+        for (size_t i = 0; i < left_args_count; ++i)\n             get_key_tuple_position_mapping(tuple_elements[i], i);\n     }\n     else\n@@ -577,6 +579,10 @@ bool KeyCondition::tryPrepareSetIndex(\n     if (!prepared_set->hasExplicitSetElements())\n         return false;\n \n+    prepared_set->checkColumnsNumber(left_args_count);\n+    for (size_t i = 0; i < indexes_mapping.size(); ++i)\n+        prepared_set->checkTypesEqual(indexes_mapping[i].tuple_index, removeLowCardinality(data_types[i]));\n+\n     out.set_index = std::make_shared<MergeTreeSetIndex>(prepared_set->getSetElements(), std::move(indexes_mapping));\n \n     return true;\n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/00981_in_subquery_with_tuple.reference b/dbms/tests/queries/0_stateless/00981_in_subquery_with_tuple.reference\nnew file mode 100644\nindex 000000000000..673d035ede60\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/00981_in_subquery_with_tuple.reference\n@@ -0,0 +1,7 @@\n+OK1\n+OK2\n+OK3\n+OK4\n+OK5\n+2019-08-11\tworld\n+2019-08-12\thello\ndiff --git a/dbms/tests/queries/0_stateless/00981_in_subquery_with_tuple.sh b/dbms/tests/queries/0_stateless/00981_in_subquery_with_tuple.sh\nnew file mode 100755\nindex 000000000000..89dc15cedf6f\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/00981_in_subquery_with_tuple.sh\n@@ -0,0 +1,21 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+. $CURDIR/../shell_config.sh\n+\n+$CLICKHOUSE_CLIENT --query=\"DROP TABLE IF EXISTS bug\";\n+$CLICKHOUSE_CLIENT --query=\"CREATE TABLE bug (d Date, s String) ENGINE = MergeTree(d, s, 8192)\";\n+$CLICKHOUSE_CLIENT --query=\"INSERT INTO bug VALUES ('2019-08-09', 'hello'), ('2019-08-10', 'world'), ('2019-08-11', 'world'), ('2019-08-12', 'hello')\";\n+\n+#SET force_primary_key = 1;\n+\n+$CLICKHOUSE_CLIENT --query=\"SELECT * FROM bug WHERE (s, d) IN (SELECT (s, max(d)) FROM bug GROUP BY s) ORDER BY d\" 2>&1 | grep \"Number of columns in section IN doesn't match\" > /dev/null && echo \"OK1\";\n+$CLICKHOUSE_CLIENT --query=\"SELECT * FROM bug WHERE (s, d, s) IN (SELECT s, max(d) FROM bug GROUP BY s)\" 2>&1 | grep \"Number of columns in section IN doesn't match\" > /dev/null && echo \"OK2\";\n+$CLICKHOUSE_CLIENT --query=\"SELECT * FROM bug WHERE (s, d) IN (SELECT s, max(d), s FROM bug GROUP BY s)\" 2>&1 | grep \"Number of columns in section IN doesn't match\" > /dev/null && echo \"OK3\";\n+\n+$CLICKHOUSE_CLIENT --query=\"SELECT * FROM bug WHERE (s, toDateTime(d)) IN (SELECT s, max(d) FROM bug GROUP BY s)\" 2>&1 | grep \"Types of column 2 in section IN don't match\" > /dev/null && echo \"OK4\";\n+$CLICKHOUSE_CLIENT --query=\"SELECT * FROM bug WHERE (s, d) IN (SELECT s, toDateTime(max(d)) FROM bug GROUP BY s)\" 2>&1 | grep \"Types of column 2 in section IN don't match\" > /dev/null && echo \"OK5\";\n+\n+$CLICKHOUSE_CLIENT --query=\"SELECT * FROM bug WHERE (s, d) IN (SELECT s, max(d) FROM bug GROUP BY s) ORDER BY d\";\n+\n+$CLICKHOUSE_CLIENT --query=\"DROP TABLE bug\";\n",
  "problem_statement": "NPE when using IN clause with a subquery with a tuple\n\r\n**Describe the bug**\r\n`... where (a,b) in (select (a, b) from ...)` is stated to be not supported anymore in the changelog, but it also shouldn't crash the server.\r\n\r\n**How to reproduce**\r\n`create table bug(historydate Date, guid String) Engine=MergeTree(historydate, guid, 8192)`\r\n\r\n`select 1 from bug where (guid, historydate) in (select (guid, max(historydate)) from bug group by guid)\r\n`\r\n* Which ClickHouse server version to use\r\nSelf-built from today's master, git sha adfc369172\r\n\r\n**Expected behavior**\r\nA syntax error, or (better) supporting this type of queries\r\n\r\n**Error message and/or stacktrace**\r\n```\r\n2019.07.23 14:33:34.764115 [ 47 ] {} <Error> BaseDaemon: ########################################\r\n2019.07.23 14:33:34.764190 [ 47 ] {} <Error> BaseDaemon: (version 19.12.1.1) (from thread 28) Received signal Segmentation fault (11).\r\n2019.07.23 14:33:34.764222 [ 47 ] {} <Error> BaseDaemon: Address: 0x9 Access: write. Address not mapped to object.\r\n2019.07.23 14:33:35.382038 [ 47 ] {} <Error> BaseDaemon: 0. ./clickhouse-server(StackTrace::StackTrace(ucontext const&)+0x22) [0x7218fb2]\r\n1. ./clickhouse-server() [0x32fc89d]\r\n2. /lib/x86_64-linux-gnu/libpthread.so.0(+0x11390) [0x7f3dd75e4390]\r\n3. ./clickhouse-server(DB::MergeTreeSetIndex::MergeTreeSetIndex(std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > > const&, std::vector<DB::MergeTreeSetIndex::KeyTuplePositionMapping, std::allocator<DB::MergeTreeSetIndex::KeyTuplePositionMapping> >&&)+0x1d5) [0x5fd1205]\r\n4. ./clickhouse-server(DB::KeyCondition::tryPrepareSetIndex(std::vector<std::shared_ptr<DB::IAST>, std::allocator<std::shared_ptr<DB::IAST> > > const&, DB::Context const&, DB::KeyCondition::RPNElement&, unsigned long&)+0xac2) [0x62cea42]\r\n5. ./clickhouse-server(DB::KeyCondition::atomFromAST(std::shared_ptr<DB::IAST> const&, DB::Context const&, DB::Block&, DB::KeyCondition::RPNElement&)+0x216) [0x62d22f6]\r\n6. ./clickhouse-server(DB::KeyCondition::traverseAST(std::shared_ptr<DB::IAST> const&, DB::Context const&, DB::Block&)+0xfe) [0x62d56de]\r\n7. ./clickhouse-server(DB::KeyCondition::KeyCondition(DB::SelectQueryInfo const&, DB::Context const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::shared_ptr<DB::ExpressionActions> const&)+0x430) [0x62d5ed0]\r\n8. ./clickhouse-server(DB::MergeTreeDataSelectExecutor::readFromParts(std::vector<std::shared_ptr<DB::MergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::MergeTreeDataPart const> > >, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, DB::SelectQueryInfo const&, DB::Context const&, unsigned long, unsigned int, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, long> > > const*) const+0x588) [0x6273988]\r\n9. ./clickhouse-server(DB::MergeTreeDataSelectExecutor::read(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, DB::SelectQueryInfo const&, DB::Context const&, unsigned long, unsigned int, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, long, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, long> > > const*) const+0x70) [0x6278090]\r\n10. ./clickhouse-server(DB::StorageMergeTree::read(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, DB::SelectQueryInfo const&, DB::Context const&, DB::QueryProcessingStage::Enum, unsigned long, unsigned int)+0x31) [0x618ce11]\r\n11. ./clickhouse-server(void DB::InterpreterSelectQuery::executeFetchColumns<DB::InterpreterSelectQuery::Pipeline>(DB::QueryProcessingStage::Enum, DB::InterpreterSelectQuery::Pipeline&, std::shared_ptr<DB::PrewhereInfo> const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x199b) [0x6571a7b]\r\n12. ./clickhouse-server(void DB::InterpreterSelectQuery::executeImpl<DB::InterpreterSelectQuery::Pipeline>(DB::InterpreterSelectQuery::Pipeline&, std::shared_ptr<DB::IBlockInputStream> const&, bool)+0x6b1) [0x65779d1]\r\n13. ./clickhouse-server(DB::InterpreterSelectQuery::executeWithMultipleStreams()+0x4c) [0x656901c]\r\n14. ./clickhouse-server(DB::InterpreterSelectWithUnionQuery::executeWithMultipleStreams()+0x64) [0x5f118c4]\r\n15. ./clickhouse-server(DB::InterpreterSelectWithUnionQuery::execute()+0x35) [0x5f131c5]\r\n16. ./clickhouse-server() [0x6032908]\r\n17. ./clickhouse-server(DB::executeQuery(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool)+0x174) [0x6034f14]\r\n18. ./clickhouse-server(DB::TCPHandler::runImpl()+0x5fe) [0x31f51be]\r\n19. ./clickhouse-server(DB::TCPHandler::run()+0x2b) [0x31f685b]\r\n20. ./clickhouse-server(Poco::Net::TCPServerConnection::start()+0xf) [0x6b490ff]\r\n21. ./clickhouse-server(Poco::Net::TCPServerDispatcher::run()+0x166) [0x6b9b286]\r\n22. ./clickhouse-server(Poco::PooledThread::run()+0x77) [0x7312d17]\r\n23. ./clickhouse-server(Poco::ThreadImpl::runnableEntry(void*)+0x38) [0x72c83a8]\r\n24. ./clickhouse-server() [0x78632bf]\r\n25. /lib/x86_64-linux-gnu/libpthread.so.0(+0x76ba) [0x7f3dd75da6ba]\r\n26. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f3dd6bfb41d]\r\n\r\n\r\n\r\n```\n",
  "hints_text": "",
  "created_at": "2019-08-19T16:54:59Z",
  "modified_files": [
    "dbms/src/Interpreters/Set.cpp",
    "dbms/src/Interpreters/Set.h",
    "dbms/src/Storages/MergeTree/KeyCondition.cpp"
  ],
  "modified_test_files": [
    "b/dbms/tests/queries/0_stateless/00981_in_subquery_with_tuple.reference",
    "b/dbms/tests/queries/0_stateless/00981_in_subquery_with_tuple.sh"
  ]
}