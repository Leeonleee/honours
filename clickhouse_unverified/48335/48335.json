{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 48335,
  "instance_id": "ClickHouse__ClickHouse-48335",
  "issue_numbers": [
    "48334"
  ],
  "base_commit": "d7879c16e487798e2fd38be4a15c78c046d9a4ff",
  "patch": "diff --git a/docs/en/operations/settings/settings.md b/docs/en/operations/settings/settings.md\nindex da503bc02aad..0216938f8ec0 100644\n--- a/docs/en/operations/settings/settings.md\n+++ b/docs/en/operations/settings/settings.md\n@@ -4071,6 +4071,36 @@ SELECT sum(number) FROM numbers(10000000000) SETTINGS partial_result_on_first_ca\n Possible values: `true`, `false`\n \n Default value: `false`\n+\n+## check_dictionary_primary_key {#check_dictionary_primary_key}\n+\n+Enables the check at dictionay creation, dictionaries without word complex-key* in a layout have a key with UInt64 type. The primary key data type must be one of unsigned [integer types](../../sql-reference/data-types/int-uint.md): `UInt8`, `UInt16`, `UInt32`, `UInt64`.\n+Possible values:\n+\n+-   true  \u2014 The check is enabled.\n+-   false \u2014 The check is disabled at dictionay creation.\n+\n+Default value: `true`.\n+\n+If you already have dictionay with incorrect primar key and do not want the server to raise an exception during startup, set `check_dictionary_primary_key` to `false`.\n+\n+Or you can create dictionay with settings `check_dictionary_primary_key` to `false`.\n+\n+**Example**\n+\n+```sql\n+CREATE DICTIONARY test\n+(\n+    `id` Int128,\n+    `name` String\n+)\n+PRIMARY KEY id\n+SOURCE(CLICKHOUSE(TABLE 'test_local'))\n+LIFETIME(MIN 0 MAX 300)\n+LAYOUT(HASHED())\n+SETTINGS(check_dictionary_primary_key = 0);\n+```\n+\n ## function_json_value_return_type_allow_nullable\n \n Control whether allow to return `NULL` when value is not exist for JSON_VALUE function.\ndiff --git a/src/Core/Settings.h b/src/Core/Settings.h\nindex 44b68f459bd2..d8d92a70f5cc 100644\n--- a/src/Core/Settings.h\n+++ b/src/Core/Settings.h\n@@ -951,6 +951,7 @@ class IColumn;\n     M(Bool, regexp_dict_allow_hyperscan, true, \"Allow regexp_tree dictionary using Hyperscan library.\", 0) \\\n     \\\n     M(Bool, dictionary_use_async_executor, false, \"Execute a pipeline for reading from a dictionary with several threads. It's supported only by DIRECT dictionary with CLICKHOUSE source.\", 0) \\\n+    M(Bool, check_dictionary_primary_key, true, \"Check primary key type for simple dictionary is native unsigned integer\", 0) \\\n \n // End of FORMAT_FACTORY_SETTINGS\n // Please add settings non-related to formats into the COMMON_SETTINGS above.\ndiff --git a/src/Dictionaries/getDictionaryConfigurationFromAST.cpp b/src/Dictionaries/getDictionaryConfigurationFromAST.cpp\nindex 0de8b843604b..5aecd54c115f 100644\n--- a/src/Dictionaries/getDictionaryConfigurationFromAST.cpp\n+++ b/src/Dictionaries/getDictionaryConfigurationFromAST.cpp\n@@ -19,6 +19,7 @@\n #include <Functions/FunctionFactory.h>\n #include <Common/isLocalAddress.h>\n #include <Interpreters/Context.h>\n+#include <DataTypes/DataTypeFactory.h>\n \n \n namespace DB\n@@ -341,7 +342,9 @@ void buildPrimaryKeyConfiguration(\n     AutoPtr<Element> root,\n     bool complex,\n     const Names & key_names,\n-    const ASTExpressionList * dictionary_attributes)\n+    const ASTExpressionList * dictionary_attributes,\n+    const ASTDictionarySettings * dict_settings,\n+    ContextPtr context)\n {\n     const auto & children = dictionary_attributes->children;\n \n@@ -376,6 +379,26 @@ void buildPrimaryKeyConfiguration(\n \n         const ASTDictionaryAttributeDeclaration * dict_attr = (*it)->as<const ASTDictionaryAttributeDeclaration>();\n \n+        auto key_type = DataTypeFactory::instance().tryGet(dict_attr->type);\n+\n+        auto check_dictionary_primary_key = context->getSettingsRef().check_dictionary_primary_key;\n+\n+        if (dict_settings)\n+        {\n+            if (const auto * check_dictionary_primary_key_change = dict_settings->changes.tryGet(\"check_dictionary_primary_key\"))\n+            {\n+                check_dictionary_primary_key = check_dictionary_primary_key_change->get<bool>();\n+            }\n+        }\n+\n+        if (check_dictionary_primary_key && !WhichDataType(key_type).isNativeUInt())\n+        {\n+            throw Exception(ErrorCodes::INCORRECT_DICTIONARY_DEFINITION,\n+                \"Invalid Primary key type for simple dictionary: {}. Must be native unsigned integer type. \"\n+                \"To avoid checking it, please set check_dictionary_primary_key=false\",\n+                dict_attr->name);\n+        }\n+\n         AutoPtr<Text> name(doc->createTextNode(dict_attr->name));\n         name_element->appendChild(name);\n \n@@ -614,7 +637,7 @@ getDictionaryConfigurationFromAST(const ASTCreateQuery & query, ContextPtr conte\n \n     checkPrimaryKey(all_attr_names_and_types, pk_attrs);\n \n-    buildPrimaryKeyConfiguration(xml_document, structure_element, complex, pk_attrs, query.dictionary_attributes_list);\n+    buildPrimaryKeyConfiguration(xml_document, structure_element, complex, pk_attrs, query.dictionary_attributes_list, query.dictionary->dict_settings, context);\n \n     buildLayoutConfiguration(xml_document, current_dictionary, query.dictionary->dict_settings, dictionary_layout);\n     buildSourceConfiguration(xml_document, current_dictionary, query.dictionary->source, query.dictionary->dict_settings, context);\n",
  "test_patch": "diff --git a/tests/integration/test_backup_restore_new/test.py b/tests/integration/test_backup_restore_new/test.py\nindex ed9747f940ba..e05fb5304f4f 100644\n--- a/tests/integration/test_backup_restore_new/test.py\n+++ b/tests/integration/test_backup_restore_new/test.py\n@@ -689,7 +689,7 @@ def test_dependencies():\n         \"CREATE DICTIONARY test.dict1(x UInt32, w String) PRIMARY KEY x SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() DB 'test' TABLE 'view')) LAYOUT(FLAT()) LIFETIME(0)\"\n     )\n     instance.query(\n-        \"CREATE DICTIONARY test.dict2(x UInt32, w String) PRIMARY KEY w SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() DB 'test' TABLE 'dict1')) LAYOUT(FLAT()) LIFETIME(0)\"\n+        \"CREATE DICTIONARY test.dict2(x UInt32, w String) PRIMARY KEY w SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() DB 'test' TABLE 'dict1')) LAYOUT(FLAT()) LIFETIME(0) SETTINGS(check_dictionary_primary_key = 0)\"\n     )\n     instance.query(\n         \"CREATE TABLE test.table2(k String, v Int32 DEFAULT dictGet('test.dict2', 'x', k) - 1) ENGINE=MergeTree ORDER BY tuple()\"\n@@ -1421,7 +1421,8 @@ def test_tables_dependency():\n     instance.query(f\"CREATE MATERIALIZED VIEW {t3} TO {t2} AS SELECT x, y FROM {t1}\")\n \n     instance.query(\n-        f\"CREATE DICTIONARY {t4} (x Int64, y String) PRIMARY KEY x SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() TABLE '{t1.split('.')[1]}' DB '{t1.split('.')[0]}')) LAYOUT(FLAT()) LIFETIME(4)\"\n+        f\"CREATE DICTIONARY {t4} (x Int64, y String) PRIMARY KEY x SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() TABLE '{t1.split('.')[1]}' DB '{t1.split('.')[0]}')) \"\n+        f\"LAYOUT(FLAT()) LIFETIME(4) SETTINGS(check_dictionary_primary_key = 0)\"\n     )\n \n     instance.query(f\"CREATE TABLE {t5} AS dictionary({t4})\")\n@@ -1433,7 +1434,8 @@ def test_tables_dependency():\n     instance.query(f\"CREATE VIEW {t7} AS SELECT sum(x) FROM (SELECT x FROM {t6})\")\n \n     instance.query(\n-        f\"CREATE DICTIONARY {t8} (x Int64, y String) PRIMARY KEY x SOURCE(CLICKHOUSE(TABLE '{t1.split('.')[1]}' DB '{t1.split('.')[0]}')) LAYOUT(FLAT()) LIFETIME(9)\"\n+        f\"CREATE DICTIONARY {t8} (x Int64, y String) PRIMARY KEY x SOURCE(CLICKHOUSE(TABLE '{t1.split('.')[1]}' DB '{t1.split('.')[0]}')) \"\n+        f\"LAYOUT(FLAT()) LIFETIME(9) SETTINGS(check_dictionary_primary_key = 0)\"\n     )\n \n     instance.query(f\"CREATE TABLE {t9}(a Int64) ENGINE=Log\")\ndiff --git a/tests/integration/test_backup_restore_on_cluster/test.py b/tests/integration/test_backup_restore_on_cluster/test.py\nindex 9ed39627d821..8f04e6a5ab00 100644\n--- a/tests/integration/test_backup_restore_on_cluster/test.py\n+++ b/tests/integration/test_backup_restore_on_cluster/test.py\n@@ -884,7 +884,7 @@ def test_tables_dependency():\n \n     node1.query(\n         \"CREATE DICTIONARY mydb.dict ON CLUSTER 'cluster' (x Int64, y String) PRIMARY KEY x \"\n-        \"SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() DB 'mydb' TABLE 'src')) LAYOUT(FLAT()) LIFETIME(0)\"\n+        \"SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() DB 'mydb' TABLE 'src')) LAYOUT(FLAT()) LIFETIME(0) SETTINGS(check_dictionary_primary_key = 0)\"\n     )\n \n     node1.query(\ndiff --git a/tests/integration/test_backward_compatibility/test_convert_ordinary.py b/tests/integration/test_backward_compatibility/test_convert_ordinary.py\nindex 8b1afd358ebb..dd0699fe3af4 100644\n--- a/tests/integration/test_backward_compatibility/test_convert_ordinary.py\n+++ b/tests/integration/test_backward_compatibility/test_convert_ordinary.py\n@@ -116,12 +116,16 @@ def create_some_tables(db):\n     node.query(\n         \"CREATE DICTIONARY {}.d1 (n int DEFAULT 0, m int DEFAULT 1) PRIMARY KEY n \"\n         \"SOURCE(CLICKHOUSE(HOST 'localhost' PORT 9000 USER 'default' TABLE 'rmt1' PASSWORD '' DB '{}')) \"\n-        \"LIFETIME(MIN 1 MAX 10) LAYOUT(FLAT())\".format(db, db)\n+        \"LIFETIME(MIN 1 MAX 10) LAYOUT(FLAT()) SETTINGS(check_dictionary_primary_key = 0)\".format(\n+            db, db\n+        )\n     )\n     node.query(\n         \"CREATE DICTIONARY {}.d2 (n int DEFAULT 0, m int DEFAULT 1) PRIMARY KEY n \"\n         \"SOURCE(CLICKHOUSE(HOST 'localhost' PORT 9000 USER 'default' TABLE 'rmt2' PASSWORD '' DB '{}')) \"\n-        \"LIFETIME(MIN 1 MAX 10) LAYOUT(FLAT())\".format(db, db)\n+        \"LIFETIME(MIN 1 MAX 10) LAYOUT(FLAT()) SETTINGS(check_dictionary_primary_key = 0)\".format(\n+            db, db\n+        )\n     )\n     node.query(\n         \"CREATE TABLE {}.merge (n int) ENGINE=Merge('{}', '(mt)|(mv)')\".format(db, db)\ndiff --git a/tests/integration/test_dictionaries_access/test.py b/tests/integration/test_dictionaries_access/test.py\nindex 993c8259f321..d54518477e87 100644\n--- a/tests/integration/test_dictionaries_access/test.py\n+++ b/tests/integration/test_dictionaries_access/test.py\n@@ -33,7 +33,7 @@ def clear_after_test():\n     CREATE DICTIONARY test_dict(x Int32, y Int32) PRIMARY KEY x\n     LAYOUT(FLAT())\n     SOURCE(CLICKHOUSE(HOST 'localhost' PORT 9000 USER 'default' TABLE 'test_table' DB 'default'))\n-    LIFETIME(0)\n+    LIFETIME(0) SETTINGS(check_dictionary_primary_key = 0)\n     \"\"\"\n \n drop_query = \"DROP DICTIONARY test_dict\"\ndiff --git a/tests/integration/test_dictionaries_ddl/test.py b/tests/integration/test_dictionaries_ddl/test.py\nindex 7dda6fc245ae..6ae527223a52 100644\n--- a/tests/integration/test_dictionaries_ddl/test.py\n+++ b/tests/integration/test_dictionaries_ddl/test.py\n@@ -156,6 +156,7 @@ def test_create_and_select_mysql(started_cluster, clickhouse, name, layout):\n     ))\n     {}\n     LIFETIME(MIN 1 MAX 3)\n+    SETTINGS(check_dictionary_primary_key = 0)\n     \"\"\".format(\n             name, name, layout\n         )\n@@ -398,6 +399,7 @@ def test_dictionary_with_where(started_cluster):\n     ))\n     LAYOUT(FLAT())\n     LIFETIME(MIN 1 MAX 3)\n+    SETTINGS(check_dictionary_primary_key = 0)\n     \"\"\"\n     )\n \ndiff --git a/tests/integration/test_dictionaries_dependency_xml/test.py b/tests/integration/test_dictionaries_dependency_xml/test.py\nindex 3f4c3320920b..0f75aefa97a5 100644\n--- a/tests/integration/test_dictionaries_dependency_xml/test.py\n+++ b/tests/integration/test_dictionaries_dependency_xml/test.py\n@@ -114,7 +114,7 @@ def test_dependent_tables(started_cluster):\n     query(\n         \"create dictionary a.d (n int default 0, m int default 42) primary key n \"\n         \"source(clickhouse(host 'localhost' port tcpPort() user 'default' table 'src' password '' db 'lazy'))\"\n-        \"lifetime(min 1 max 10) layout(flat())\"\n+        \"lifetime(min 1 max 10) layout(flat()) SETTINGS(check_dictionary_primary_key = 0)\"\n     )\n     query(\"create table system.join (n int, m int) engine=Join(any, left, n)\")\n     query(\"insert into system.join values (1, 1)\")\n@@ -126,7 +126,7 @@ def test_dependent_tables(started_cluster):\n     query(\n         \"create dictionary test.d (n int default 0, m int default 42) primary key n \"\n         \"source(clickhouse(host 'localhost' port tcpPort() user 'default' table 'src' password '' db 'default'))\"\n-        \"lifetime(min 1 max 10) layout(flat())\"\n+        \"lifetime(min 1 max 10) layout(flat()) SETTINGS(check_dictionary_primary_key = 0)\"\n     )\n     query(\n         \"create table join (n int, m default dictGet('a.d', 'm', toUInt64(3)),\"\ndiff --git a/tests/integration/test_mask_sensitive_info/configs/disable_check_dictionary_primary_key.xml b/tests/integration/test_mask_sensitive_info/configs/disable_check_dictionary_primary_key.xml\nnew file mode 100644\nindex 000000000000..c48d5f3f3ef1\n--- /dev/null\n+++ b/tests/integration/test_mask_sensitive_info/configs/disable_check_dictionary_primary_key.xml\n@@ -0,0 +1,7 @@\n+<clickhouse>\n+    <profiles>\n+        <default>\n+            <check_dictionary_primary_key>0</check_dictionary_primary_key>\n+        </default>\n+    </profiles>\n+</clickhouse>\ndiff --git a/tests/integration/test_mask_sensitive_info/test.py b/tests/integration/test_mask_sensitive_info/test.py\nindex 92232f7e6a8b..1806134c486f 100644\n--- a/tests/integration/test_mask_sensitive_info/test.py\n+++ b/tests/integration/test_mask_sensitive_info/test.py\n@@ -9,6 +9,9 @@\n     main_configs=[\n         \"configs/named_collections.xml\",\n     ],\n+    user_configs=[\n+        \"configs/disable_check_dictionary_primary_key.xml\",\n+    ],\n     with_zookeeper=True,\n )\n \ndiff --git a/tests/integration/test_replicated_database/test.py b/tests/integration/test_replicated_database/test.py\nindex 2ab2fe499ff4..16a9c55cc569 100644\n--- a/tests/integration/test_replicated_database/test.py\n+++ b/tests/integration/test_replicated_database/test.py\n@@ -698,12 +698,12 @@ def create_some_tables(db):\n     main_node.query(\n         f\"CREATE DICTIONARY {db}.d1 (n int DEFAULT 0, m int DEFAULT 1) PRIMARY KEY n \"\n         \"SOURCE(CLICKHOUSE(HOST 'localhost' PORT 9000 USER 'default' TABLE 'rmt1' PASSWORD '' DB 'recover')) \"\n-        \"LIFETIME(MIN 1 MAX 10) LAYOUT(FLAT())\"\n+        \"LIFETIME(MIN 1 MAX 10) LAYOUT(FLAT()) SETTINGS(check_dictionary_primary_key = 0)\"\n     )\n     dummy_node.query(\n         f\"CREATE DICTIONARY {db}.d2 (n int DEFAULT 0, m int DEFAULT 1) PRIMARY KEY n \"\n         \"SOURCE(CLICKHOUSE(HOST 'localhost' PORT 9000 USER 'default' TABLE 'rmt2' PASSWORD '' DB 'recover')) \"\n-        \"LIFETIME(MIN 1 MAX 10) LAYOUT(FLAT())\"\n+        \"LIFETIME(MIN 1 MAX 10) LAYOUT(FLAT()) SETTINGS(check_dictionary_primary_key = 0)\"\n     )\n \n \n@@ -766,7 +766,7 @@ def test_recover_staled_replica(started_cluster):\n         main_node.query_with_retry(\n             \"CREATE DICTIONARY recover.d2 (n int DEFAULT 0, m int DEFAULT 1) PRIMARY KEY n \"\n             \"SOURCE(CLICKHOUSE(HOST 'localhost' PORT 9000 USER 'default' TABLE 'rmt1' PASSWORD '' DB 'recover')) \"\n-            \"LIFETIME(MIN 1 MAX 10) LAYOUT(FLAT());\",\n+            \"LIFETIME(MIN 1 MAX 10) LAYOUT(FLAT()) SETTINGS(check_dictionary_primary_key = 0);\",\n             settings=settings,\n         )\n \ndiff --git a/tests/queries/0_stateless/00962_live_view_periodic_refresh_dictionary.py b/tests/queries/0_stateless/00962_live_view_periodic_refresh_dictionary.py\nindex 9d2a26c83c05..6b824f18dde7 100755\n--- a/tests/queries/0_stateless/00962_live_view_periodic_refresh_dictionary.py\n+++ b/tests/queries/0_stateless/00962_live_view_periodic_refresh_dictionary.py\n@@ -38,7 +38,7 @@\n     client1.expect(prompt)\n     client1.send(\n         \"CREATE DICTIONARY test.dict(a Int32, b Int32) PRIMARY KEY a LAYOUT(FLAT()) \"\n-        + \"SOURCE(CLICKHOUSE(db 'test' table 'mt')) LIFETIME(1)\"\n+        + \"SOURCE(CLICKHOUSE(db 'test' table 'mt')) LIFETIME(1) SETTINGS(check_dictionary_primary_key = 0)\"\n     )\n     client1.expect(prompt)\n     client1.send(\"CREATE LIVE VIEW test.lv WITH REFRESH 1 AS SELECT * FROM test.dict\")\ndiff --git a/tests/queries/0_stateless/01042_system_reload_dictionary_reloads_completely.sh b/tests/queries/0_stateless/01042_system_reload_dictionary_reloads_completely.sh\nindex f2b30e05040d..3cd945cfee34 100755\n--- a/tests/queries/0_stateless/01042_system_reload_dictionary_reloads_completely.sh\n+++ b/tests/queries/0_stateless/01042_system_reload_dictionary_reloads_completely.sh\n@@ -23,7 +23,8 @@ CREATE DICTIONARY dictdb_01042.dict\n PRIMARY KEY x\n SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'table' DB 'dictdb_01042' UPDATE_FIELD 'insert_time'))\n LAYOUT(FLAT())\n-LIFETIME(1);\n+LIFETIME(1)\n+SETTINGS(check_dictionary_primary_key = 0);\n EOF\n \n $CLICKHOUSE_CLIENT --query \"SELECT '12 -> ', dictGetInt64('dictdb_01042.dict', 'y', toUInt64(12))\"\ndiff --git a/tests/queries/0_stateless/01043_dictionary_attribute_properties_values.sql b/tests/queries/0_stateless/01043_dictionary_attribute_properties_values.sql\nindex 5d629d4e8db8..9d7c5d5196dc 100644\n--- a/tests/queries/0_stateless/01043_dictionary_attribute_properties_values.sql\n+++ b/tests/queries/0_stateless/01043_dictionary_attribute_properties_values.sql\n@@ -17,7 +17,8 @@ CREATE DICTIONARY dictdb_01043.dict\n PRIMARY KEY key\n SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'dicttbl' DB 'dictdb_01043'))\n LAYOUT(FLAT())\n-LIFETIME(1);\n+LIFETIME(1)\n+SETTINGS(check_dictionary_primary_key = 0);\n \n \n SELECT dictGetString('dictdb_01043.dict', 'value_default', toUInt64(12));\ndiff --git a/tests/queries/0_stateless/01160_table_dependencies.sh b/tests/queries/0_stateless/01160_table_dependencies.sh\nindex a0a3f05c6a94..650b89816d7f 100755\n--- a/tests/queries/0_stateless/01160_table_dependencies.sh\n+++ b/tests/queries/0_stateless/01160_table_dependencies.sh\n@@ -16,14 +16,14 @@ $CLICKHOUSE_CLIENT -q \"create table dict_src (n int, m int, s String) engine=Mer\n $CLICKHOUSE_CLIENT -q \"create dictionary dict1 (n int default 0, m int default 1, s String default 'qqq')\n PRIMARY KEY n\n SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'dict_src' PASSWORD '' DB '$CLICKHOUSE_DATABASE'))\n-LIFETIME(MIN 1 MAX 10) LAYOUT(FLAT());\"\n+LIFETIME(MIN 1 MAX 10) LAYOUT(FLAT()) SETTINGS(check_dictionary_primary_key = 0);\"\n \n $CLICKHOUSE_CLIENT -q \"create table join(n int, m int default dictGet('$CLICKHOUSE_DATABASE.dict1', 'm', 42::UInt64)) engine=Join(any, left, n);\"\n \n $CLICKHOUSE_CLIENT -q \"create dictionary dict2 (n int default 0, m int DEFAULT 2)\n PRIMARY KEY n\n SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'join' PASSWORD '' DB '$CLICKHOUSE_DATABASE'))\n-LIFETIME(MIN 1 MAX 10) LAYOUT(FLAT());\"\n+LIFETIME(MIN 1 MAX 10) LAYOUT(FLAT()) SETTINGS(check_dictionary_primary_key = 0);\"\n \n $CLICKHOUSE_CLIENT -q \"create table s (x default joinGet($CLICKHOUSE_DATABASE.join, 'm', 42::int)) engine=Set\"\n \n@@ -102,7 +102,7 @@ $CLICKHOUSE_CLIENT -q \"create table ${CLICKHOUSE_DATABASE}_1.xdict_src (n int, m\n $CLICKHOUSE_CLIENT -q \"create dictionary ${CLICKHOUSE_DATABASE}_1.ydict1 (n int default 0, m int default 1, s String default 'qqq')\n PRIMARY KEY n\n SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'xdict_src' PASSWORD '' DB '${CLICKHOUSE_DATABASE}_1'))\n-LIFETIME(MIN 1 MAX 10) LAYOUT(FLAT());\"\n+LIFETIME(MIN 1 MAX 10) LAYOUT(FLAT()) SETTINGS(check_dictionary_primary_key = 0);\"\n \n $CLICKHOUSE_CLIENT -q \"create table ${CLICKHOUSE_DATABASE}_1.zjoin(n int, m int default dictGet('${CLICKHOUSE_DATABASE}_1.ydict1', 'm', 42::UInt64)) engine=Join(any, left, n);\"\n $CLICKHOUSE_CLIENT -q \"drop database ${CLICKHOUSE_DATABASE}_1\"\ndiff --git a/tests/queries/0_stateless/02364_dictionary_datetime_64_attribute_crash.sql b/tests/queries/0_stateless/02364_dictionary_datetime_64_attribute_crash.sql\nindex 77fc9e1183bf..6dcea0ac4424 100644\n--- a/tests/queries/0_stateless/02364_dictionary_datetime_64_attribute_crash.sql\n+++ b/tests/queries/0_stateless/02364_dictionary_datetime_64_attribute_crash.sql\n@@ -9,7 +9,8 @@ CREATE DICTIONARY datDictionary\n PRIMARY KEY blockNum\n SOURCE(CLICKHOUSE(TABLE 'dat'))\n LIFETIME(MIN 0 MAX 1000)\n-LAYOUT(FLAT());\n+LAYOUT(FLAT())\n+SETTINGS(check_dictionary_primary_key = 0);\n \n select (select eventTimestamp from datDictionary);\n select count(*) from dat where eventTimestamp >= (select eventTimestamp from datDictionary);\ndiff --git a/tests/queries/0_stateless/02390_prometheus_ClickHouseStatusInfo_DictionaryStatus.sh b/tests/queries/0_stateless/02390_prometheus_ClickHouseStatusInfo_DictionaryStatus.sh\nindex 65025858e200..92879ae9cb45 100755\n--- a/tests/queries/0_stateless/02390_prometheus_ClickHouseStatusInfo_DictionaryStatus.sh\n+++ b/tests/queries/0_stateless/02390_prometheus_ClickHouseStatusInfo_DictionaryStatus.sh\n@@ -13,7 +13,7 @@ function get_dictionary_status()\n     }\n }\n \n-$CLICKHOUSE_CLIENT -q \"CREATE DICTIONARY dict (key Int, value String) PRIMARY KEY key SOURCE(CLICKHOUSE(TABLE data)) LAYOUT(HASHED()) LIFETIME(0)\"\n+$CLICKHOUSE_CLIENT -q \"CREATE DICTIONARY dict (key Int, value String) PRIMARY KEY key SOURCE(CLICKHOUSE(TABLE data)) LAYOUT(HASHED()) LIFETIME(0) SETTINGS(check_dictionary_primary_key = 0)\"\n uuid=\"$($CLICKHOUSE_CLIENT -q \"SELECT uuid FROM system.dictionaries WHERE database = '$CLICKHOUSE_DATABASE' AND name = 'dict'\")\"\n \n echo 'status before reload'\ndiff --git a/tests/queries/0_stateless/02391_hashed_dictionary_shards.sql b/tests/queries/0_stateless/02391_hashed_dictionary_shards.sql\nindex ac43c12afc08..48f920e00eb8 100644\n--- a/tests/queries/0_stateless/02391_hashed_dictionary_shards.sql\n+++ b/tests/queries/0_stateless/02391_hashed_dictionary_shards.sql\n@@ -87,7 +87,8 @@ CREATE DICTIONARY test_dictionary_10_shards_string\n ) PRIMARY KEY key\n SOURCE(CLICKHOUSE(TABLE test_table_string))\n LAYOUT(SPARSE_HASHED(SHARDS 10))\n-LIFETIME(0);\n+LIFETIME(0)\n+SETTINGS(check_dictionary_primary_key = 0);\n \n SYSTEM RELOAD DICTIONARY test_dictionary_10_shards_string; -- { serverError CANNOT_PARSE_TEXT }\n \ndiff --git a/tests/queries/0_stateless/02525_range_hashed_dictionary_update_field.sql b/tests/queries/0_stateless/02525_range_hashed_dictionary_update_field.sql\nindex 2534333afcd6..9f36f69236c0 100644\n--- a/tests/queries/0_stateless/02525_range_hashed_dictionary_update_field.sql\n+++ b/tests/queries/0_stateless/02525_range_hashed_dictionary_update_field.sql\n@@ -18,7 +18,8 @@ CREATE DICTIONARY test_dictionary\n LAYOUT(RANGE_HASHED())\n RANGE(MIN start MAX end)\n SOURCE(CLICKHOUSE(TABLE 'test_table' UPDATE_FIELD 'insert_time' UPDATE_LAG 10))\n-LIFETIME(MIN 1 MAX 2);\n+LIFETIME(MIN 1 MAX 2)\n+SETTINGS(check_dictionary_primary_key = 0);\n \n INSERT INTO test_table VALUES (1, 0, 100, '2022-12-26 11:38:34'), (1, 101, 200, '2022-12-26 11:38:34'), (2, 0, 999, '2022-12-26 11:38:34'), (2, 1000, 10000, '2022-12-26 11:38:34');\n \ndiff --git a/tests/queries/0_stateless/02707_check_sample_dict_key_is_correct.reference b/tests/queries/0_stateless/02707_check_sample_dict_key_is_correct.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/02707_check_sample_dict_key_is_correct.sql b/tests/queries/0_stateless/02707_check_sample_dict_key_is_correct.sql\nnew file mode 100644\nindex 000000000000..35cc14e73f1f\n--- /dev/null\n+++ b/tests/queries/0_stateless/02707_check_sample_dict_key_is_correct.sql\n@@ -0,0 +1,41 @@\n+DROP DICTIONARY IF EXISTS test_sample_key_dict1;\n+DROP DICTIONARY IF EXISTS test_sample_key_dict2;\n+DROP table IF EXISTS test_sample_key_local;\n+\n+-- create local table\n+CREATE TABLE test_sample_key_local\n+(\n+    `id` Int128,\n+    `name` String\n+)\n+ENGINE = Memory;\n+\n+\n+-- create DICTIONARY with default settings check_dictionary_primary_key = 1\n+CREATE DICTIONARY test_sample_key_dict1\n+(\n+    `id` Int128,\n+    `name` String\n+)\n+PRIMARY KEY id\n+SOURCE(CLICKHOUSE(TABLE 'test_sample_key_local'))\n+LIFETIME(MIN 0 MAX 300)\n+LAYOUT(HASHED()); -- { serverError 489 }\n+\n+\n+-- create DICTIONARY with settings check_dictionary_primary_key = 0\n+CREATE DICTIONARY test_sample_key_dict2\n+(\n+    `id` Int128,\n+    `name` String\n+)\n+PRIMARY KEY id\n+SOURCE(CLICKHOUSE(TABLE 'test_sample_key_local'))\n+LIFETIME(MIN 0 MAX 300)\n+LAYOUT(HASHED())\n+SETTINGS(check_dictionary_primary_key = 0);\n+\n+\n+DROP DICTIONARY IF EXISTS test_sample_key_dict1;\n+DROP DICTIONARY IF EXISTS test_sample_key_dict2;\n+DROP table IF EXISTS test_sample_key_local;\n\\ No newline at end of file\n",
  "problem_statement": "Check primary key type for simple dictionary, to avoid misuse of dictionary tables\n**Describe the issue**\r\nThe primary key type for simple dictionary should be UInt64, but we never check it. The implicit conversion may cause some problems\r\n\r\n**How to reproduce**\r\n```sql\r\nCREATE TABLE test_sample_key_local\r\n(\r\n    `num` Int128, \r\n    `str` String \r\n)\r\nENGINE = Memory\r\n\r\nCREATE DICTIONARY test_sample_key_dict\r\n(\r\n    `num` Int128,\r\n    `str` String\r\n)\r\nPRIMARY KEY num\r\nSOURCE(CLICKHOUSE(TABLE 'test_sample_key_local' password 'NTliOGQ3YjRiY2MyNTc4'))\r\nLIFETIME(MIN 0 MAX 300)\r\nLAYOUT(HASHED()); \r\n\r\ninsert into test_sample_key_local values (18446744073709551618, '18446744073709551618');\r\n\r\nsystem reload dictionary test_sample_key_dict;\r\n\r\nselect * from test_sample_key_dict;\r\n\u250c\u2500num\u2500\u252c\u2500str\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502   2 \u2502 18446744073709551618 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n```\r\nUsers can use this dictionary incorrectly without realizing it.\r\n\r\n**Expected behavior**\r\n\r\nWhen create a simple dictionary with  primary key type is not native unsigned integer, throw an exception.  Add a check or not option for compatibility.\n",
  "hints_text": "",
  "created_at": "2023-04-03T10:01:37Z"
}