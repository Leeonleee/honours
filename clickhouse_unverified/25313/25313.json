{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 25313,
  "instance_id": "ClickHouse__ClickHouse-25313",
  "issue_numbers": [
    "20480"
  ],
  "base_commit": "7180cf23677e02986c7661a62111cc4a07141e29",
  "patch": "diff --git a/src/AggregateFunctions/ReservoirSamplerDeterministic.h b/src/AggregateFunctions/ReservoirSamplerDeterministic.h\nindex 468a5c7c6a0a..2687e0b4a673 100644\n--- a/src/AggregateFunctions/ReservoirSamplerDeterministic.h\n+++ b/src/AggregateFunctions/ReservoirSamplerDeterministic.h\n@@ -59,9 +59,10 @@ template <typename T,\n     ReservoirSamplerDeterministicOnEmpty OnEmpty = ReservoirSamplerDeterministicOnEmpty::THROW>\n class ReservoirSamplerDeterministic\n {\n-    bool good(const UInt32 hash)\n+private:\n+    bool good(UInt32 hash) const\n     {\n-        return !(hash & skip_mask);\n+        return (hash & skip_mask) == 0;\n     }\n \n public:\n@@ -77,15 +78,12 @@ class ReservoirSamplerDeterministic\n         total_values = 0;\n     }\n \n-    void insert(const T & v, const UInt64 determinator)\n+    void insert(const T & v, UInt64 determinator)\n     {\n         if (isNaN(v))\n             return;\n \n-        const UInt32 hash = intHash64(determinator);\n-        if (!good(hash))\n-            return;\n-\n+        UInt32 hash = intHash64(determinator);\n         insertImpl(v, hash);\n         sorted = false;\n         ++total_values;\n@@ -144,8 +142,7 @@ class ReservoirSamplerDeterministic\n             setSkipDegree(b.skip_degree);\n \n         for (const auto & sample : b.samples)\n-            if (good(sample.second))\n-                insertImpl(sample.first, sample.second);\n+            insertImpl(sample.first, sample.second);\n \n         total_values += b.total_values;\n     }\n@@ -220,10 +217,19 @@ class ReservoirSamplerDeterministic\n \n     void insertImpl(const T & v, const UInt32 hash)\n     {\n+        if (!good(hash))\n+            return;\n+\n         /// Make a room for plus one element.\n         while (samples.size() >= max_sample_size)\n+        {\n             setSkipDegree(skip_degree + 1);\n \n+            /// Still good?\n+            if (!good(hash))\n+                return;\n+        }\n+\n         samples.emplace_back(v, hash);\n     }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00273_quantiles.reference b/tests/queries/0_stateless/00273_quantiles.reference\nindex aefb00846486..ac9db31bae42 100644\n--- a/tests/queries/0_stateless/00273_quantiles.reference\n+++ b/tests/queries/0_stateless/00273_quantiles.reference\n@@ -6,17 +6,17 @@\n [0,1,10,50,100,200,300,400,500,600,700,800,900,950,990,999,1000]\n [0,1,10,50,99.6,199.7,299.8,399.9,500,600.1,700.2,800.3,900.4,950,990,999,1000]\n [0,1,10,50,100,200,300,400,500,600,700,800,900,950,990,999,1000]\n-1\t333334\t[699144.2,835663,967429.2]\t[699999,833333,966666]\n-2\t266667\t[426549.5,536255.5,638957.6]\t[426665,533332,639999]\n+1\t333334\t[699140.3,835642,967430.8]\t[699999,833333,966666]\n+2\t266667\t[426546,536239,638933.4]\t[426665,533332,639999]\n 3\t114285\t[296938,342324,388778]\t[297142,342856,388570]\n-4\t63492\t[228370.2,254019.5,279351.4]\t[228571,253968,279364]\n-5\t40404\t[185603.4,202009,218107]\t[185858,202020,218181]\n-6\t27972\t[156598.7,167866,179118.3]\t[156643,167832,179020]\n+4\t63492\t[228369.80000000002,254011,279351.6]\t[228571,253968,279364]\n+5\t40404\t[185602.3,202005,218108.5]\t[185858,202020,218181]\n+6\t27972\t[156598.6,167864,179118.40000000002]\t[156643,167832,179020]\n 7\t20513\t[135400.8,143550,151792.6]\t[135384,143589,151794]\n 8\t15686\t[119239.20000000001,125463,131772.40000000002]\t[119215,125490,131764]\n-9\t12384\t[106510.20000000001,111539,116415.7]\t[106501,111455,116408]\n+9\t12384\t[106509.79999999999,111538,116415.8]\t[106501,111455,116408]\n 10\t10025\t[96223.2,100346,104288.7]\t[96240,100250,104260]\n-11\t8282\t[87732.8,91036,94410.20000000001]\t[87784,91097,94409]\n+11\t8282\t[87732.70000000001,91035,94408.6]\t[87784,91097,94409]\n 12\t6957\t[80694.6,83477,86259.4]\t[80694,83477,86260]\n 13\t5925\t[74666.40000000001,77036,79405.6]\t[74666,77036,79406]\n 14\t5109\t[69475.8,71519,73562.2]\t[69475,71519,73563]\ndiff --git a/tests/queries/0_stateless/01533_quantile_deterministic_assert.reference b/tests/queries/0_stateless/01533_quantile_deterministic_assert.reference\nindex 231c72269ca1..1f6132cdec2a 100644\n--- a/tests/queries/0_stateless/01533_quantile_deterministic_assert.reference\n+++ b/tests/queries/0_stateless/01533_quantile_deterministic_assert.reference\n@@ -1,1 +1,1 @@\n-3998\n+3997.5\ndiff --git a/tests/queries/0_stateless/01913_quantile_deterministic.reference b/tests/queries/0_stateless/01913_quantile_deterministic.reference\nnew file mode 100644\nindex 000000000000..a39d3d91e8af\n--- /dev/null\n+++ b/tests/queries/0_stateless/01913_quantile_deterministic.reference\n@@ -0,0 +1,20 @@\n+492708\n+492708\n+492708\n+492708\n+492708\n+492708\n+492708\n+492708\n+492708\n+492708\n+492708\n+492708\n+492708\n+492708\n+492708\n+492708\n+492708\n+492708\n+492708\n+492708\ndiff --git a/tests/queries/0_stateless/01913_quantile_deterministic.sh b/tests/queries/0_stateless/01913_quantile_deterministic.sh\nnew file mode 100755\nindex 000000000000..5a2c72796785\n--- /dev/null\n+++ b/tests/queries/0_stateless/01913_quantile_deterministic.sh\n@@ -0,0 +1,18 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+${CLICKHOUSE_CLIENT} --query \"DROP TABLE IF EXISTS d\"\n+${CLICKHOUSE_CLIENT} --query \"CREATE TABLE d (oid UInt64) ENGINE = MergeTree ORDER BY oid\"\n+${CLICKHOUSE_CLIENT} --min_insert_block_size_rows 0 --min_insert_block_size_bytes 0 --max_block_size 8192 --query \"insert into d select * from numbers(1000000)\"\n+\n+# In previous ClickHouse versions there was a mistake that makes quantileDeterministic functions not really deterministic (in edge cases).\n+\n+for _ in {1..20};\n+do\n+    ${CLICKHOUSE_CLIENT} --query \"SELECT medianDeterministic(oid, oid) FROM d\"\n+done\n+\n+${CLICKHOUSE_CLIENT} --query \"DROP TABLE d\"\n",
  "problem_statement": "quantileDeterministic and friends are not deterministic\n**Describe the bug**\r\nI've found that quantileDeterministic and relevant functions are not deterministic\r\n\r\nOn 21.2.3 release:\r\n```sql\r\nSELECT medianDeterministic(oid, oid) FROM ztf.dr4_meta\r\n\r\n\u250c\u2500medianDeterministic(oid, oid)\u2500\u2510\r\n\u2502               686709400040570 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nSELECT medianDeterministic(oid, oid) FROM ztf.dr4_meta\r\n\r\n\u250c\u2500medianDeterministic(oid, oid)\u2500\u2510\r\n\u2502               686315850035097 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nSELECT medianDeterministic(oid, oid) FROM ztf.dr4_meta\r\n\r\n\u250c\u2500medianDeterministic(oid, oid)\u2500\u2510\r\n\u2502               686316400060683 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n**Does it reproduce on recent release?**\r\nYes\r\n\r\n**How to reproduce**\r\n* Which ClickHouse server version to use: 21.2.3\r\n* `CREATE TABLE` statements for all tables involved\r\n```sql\r\nCREATE TABLE dr4_meta\r\n(\r\n    `oid` UInt64 CODEC(Delta(8), LZ4),\r\n    `nobs` UInt16 CODEC(T64, LZ4),\r\n    `ngoodobs` UInt16 CODEC(T64, LZ4),\r\n    `filter` UInt8 CODEC(T64, LZ4),\r\n    `fieldid` UInt16 CODEC(T64, LZ4),\r\n    `rcid` UInt8,\r\n    `ra` Float64,\r\n    `dec` Float64,\r\n    `h3index10` UInt64,\r\n    `durgood` Float64,\r\n    `mingoodmag` Float32,\r\n    `maxgoodmag` Float32,\r\n    `meangoodmag` Float32\r\n)\r\nENGINE = MergeTree()\r\nORDER BY oid\r\n```\r\n* Sample data for all these tables, use [clickhouse-obfuscator](https://github.com/ClickHouse/ClickHouse/blob/master/programs/obfuscator/Obfuscator.cpp#L42-L80) if necessary\r\n[100GB tar](https://drive.google.com/file/d/1lRqzJx650MrTuY8SGfMTO9E_5U8xldL-/view?usp=sharing) of dr4_meta table\r\n\r\n**Additional context**\r\n20.6.4.1 works fine and always return `686316400060683`, while current version returns this or some other values. If `max_threads=1` is applied current version always returns `686709400040570`\n",
  "hints_text": "21.3.1.5998.\r\n\r\n```\r\nCREATE TABLE d (oid UInt64 CODEC(Delta(8), LZ4)  )\u3000    ENGINE = MergeTree()\u3000    ORDER BY oid\u3000;\r\ninsert into d select cityHash64(number) oid from numbers(100000000)\u3000;\r\n\r\nfor i in `seq 20`; do clickhouse-client -q 'SELECT medianDeterministic(oid, oid) FROM d'; done\r\n9167152341473662000\r\n9163761196733049000\r\n9167152341473662000\r\n9163761196733049000\r\n9163761196733049000\r\n9163761196733049000\r\n9160680780339508000\r\n9160680780339508000\r\n9163761196733049000\r\n9163761196733049000\r\n9163761196733049000\r\n9160680780339508000\r\n9163761196733049000\r\n9160680780339508000\r\n9160680780339508000\r\n9163761196733049000\r\n9163761196733049000\r\n9160680780339508000\r\n9163761196733049000\r\n9163761196733049000\r\n\r\nfor i in `seq 20`; do clickhouse-client --max_threads=1 -q 'SELECT medianDeterministic(oid, oid) FROM d'; done\r\n9163761196733049000\r\n9163761196733049000\r\n9163761196733049000\r\n9163761196733049000\r\n9163761196733049000\r\n9163761196733049000\r\n9163761196733049000\r\n9163761196733049000\r\n9163761196733049000\r\n9163761196733049000\r\n9163761196733049000\r\n9163761196733049000\r\n9163761196733049000\r\n9163761196733049000\r\n9163761196733049000\r\n9163761196733049000\r\n9163761196733049000\r\n9163761196733049000\r\n9163761196733049000\r\n9163761196733049000\r\n\r\n```\neven without cityHash64 (faster insert)\r\n\r\n```\r\nCREATE TABLE d (oid UInt64 CODEC(Delta(8), LZ4)  )\u3000    ENGINE = MergeTree()\u3000    ORDER BY oid\u3000;\r\ninsert into d select (number) oid from numbers(100000000)\u3000;\r\n\r\nfor i in `seq 20`; do clickhouse-client -q 'SELECT medianDeterministic(oid, oid) FROM d'; done\r\n49497039\r\n49496900\r\n49496900\r\n49496900\r\n49497039\r\n49496900\r\n49497039\r\n49497039\r\n49497039\r\n49497039\r\n49497039\r\n49497178\r\n49496900\r\n49497039\r\n49497178\r\n49497039\r\n49497039\r\n49497178\r\n49497039\r\n49497039\r\n```\n> even without cityHash64 (faster insert)\r\n\r\nThis test is failing on all checked versions (I've checked 20.8 / 20.7 / 20.5 / 19.11 / 18.16 )\r\n\nem, I just read medianDeterministic description. \r\n1. I think the second argument -- determinant must be constant. \r\n2. determinizm depends of a determinant.\r\n\r\n\r\n```\r\nCREATE TABLE d (oid UInt64 CODEC(Delta(8), LZ4)  )\u3000    ENGINE = MergeTree()\u3000    ORDER BY oid\u3000;\r\ninsert into d select (number%11115) oid from numbers(100000000)\u3000;\r\n\r\nfor i in `seq 20`; do clickhouse-client -q 'SELECT medianDeterministic(oid, 111) FROM d'; done\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n\r\nfor i in `seq 20`; do clickhouse-client -q 'SELECT medianDeterministic(oid, 222) FROM d'; done\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n3\r\n```\nI don't think so, look, if it is a constant it gives you non-realistic answer, see your own example. [Docs says](https://clickhouse.tech/docs/en/sql-reference/aggregate-functions/reference/quantiledeterministic/) \"If the same determinator value occures too often, the function works incorrectly\", try quantilesDeterministic(0.25, 0.5, 0.75)(x, CONSTANT) to see it.\r\n\r\nIf I understand correct this deterministic should be a column and hashes of its values are used to get random number for the next step of the reservoir sampling algorithm. In my particular case all `oid` values are unique that's why I assume it is ok to use them as a deterministic",
  "created_at": "2021-06-16T06:51:07Z"
}