{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 30325,
  "instance_id": "ClickHouse__ClickHouse-30325",
  "issue_numbers": [
    "29617"
  ],
  "base_commit": "503a418dedf0011e9040c3a1b6913e0b5488be4c",
  "patch": "diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt\nindex 87e6cc86d949..45a8f15b3f74 100644\n--- a/src/CMakeLists.txt\n+++ b/src/CMakeLists.txt\n@@ -188,6 +188,8 @@ endmacro()\n add_object_library(clickhouse_access Access)\n add_object_library(clickhouse_backups Backups)\n add_object_library(clickhouse_core Core)\n+add_library (clickhouse_core_settings_enums Core/SettingsEnums.cpp)\n+target_link_libraries(clickhouse_core_settings_enums PRIVATE common clickhouse_common_io)\n add_object_library(clickhouse_core_mysql Core/MySQL)\n add_object_library(clickhouse_compression Compression)\n add_object_library(clickhouse_querypipeline QueryPipeline)\ndiff --git a/src/Client/ConnectionPoolWithFailover.cpp b/src/Client/ConnectionPoolWithFailover.cpp\nindex aaffe85ae2e1..13d39980e1ca 100644\n--- a/src/Client/ConnectionPoolWithFailover.cpp\n+++ b/src/Client/ConnectionPoolWithFailover.cpp\n@@ -29,15 +29,15 @@ ConnectionPoolWithFailover::ConnectionPoolWithFailover(\n         time_t decrease_error_period_,\n         size_t max_error_cap_)\n     : Base(std::move(nested_pools_), decrease_error_period_, max_error_cap_, &Poco::Logger::get(\"ConnectionPoolWithFailover\"))\n-    , default_load_balancing(load_balancing)\n+    , get_priority_load_balancing(load_balancing)\n {\n     const std::string & local_hostname = getFQDNOrHostName();\n \n-    hostname_differences.resize(nested_pools.size());\n+    get_priority_load_balancing.hostname_differences.resize(nested_pools.size());\n     for (size_t i = 0; i < nested_pools.size(); ++i)\n     {\n         ConnectionPool & connection_pool = dynamic_cast<ConnectionPool &>(*nested_pools[i]);\n-        hostname_differences[i] = getHostNameDifference(local_hostname, connection_pool.getHost());\n+        get_priority_load_balancing.hostname_differences[i] = getHostNameDifference(local_hostname, connection_pool.getHost());\n     }\n }\n \n@@ -51,36 +51,15 @@ IConnectionPool::Entry ConnectionPoolWithFailover::get(const ConnectionTimeouts\n     };\n \n     size_t offset = 0;\n+    LoadBalancing load_balancing = get_priority_load_balancing.load_balancing;\n     if (settings)\n-        offset = settings->load_balancing_first_offset % nested_pools.size();\n-    GetPriorityFunc get_priority;\n-    switch (settings ? LoadBalancing(settings->load_balancing) : default_load_balancing)\n     {\n-    case LoadBalancing::NEAREST_HOSTNAME:\n-        get_priority = [&](size_t i) { return hostname_differences[i]; };\n-        break;\n-    case LoadBalancing::IN_ORDER:\n-        get_priority = [](size_t i) { return i; };\n-        break;\n-    case LoadBalancing::RANDOM:\n-        break;\n-    case LoadBalancing::FIRST_OR_RANDOM:\n-        get_priority = [offset](size_t i) -> size_t { return i != offset; };\n-        break;\n-    case LoadBalancing::ROUND_ROBIN:\n-        if (last_used >= nested_pools.size())\n-            last_used = 0;\n-        ++last_used;\n-        /* Consider nested_pools.size() equals to 5\n-         * last_used = 1 -> get_priority: 0 1 2 3 4\n-         * last_used = 2 -> get_priority: 4 0 1 2 3\n-         * last_used = 3 -> get_priority: 4 3 0 1 2\n-         * ...\n-         * */\n-        get_priority = [&](size_t i) { ++i; return i < last_used ? nested_pools.size() - i : i - last_used; };\n-        break;\n+        offset = settings->load_balancing_first_offset % nested_pools.size();\n+        load_balancing = LoadBalancing(settings->load_balancing);\n     }\n \n+    GetPriorityFunc get_priority = get_priority_load_balancing.getPriorityFunc(load_balancing, offset, nested_pools.size());\n+\n     UInt64 max_ignored_errors = settings ? settings->distributed_replica_max_ignored_errors.value : 0;\n     bool fallback_to_stale_replicas = settings ? settings->fallback_to_stale_replicas_for_distributed_queries.value : true;\n \n@@ -173,38 +152,14 @@ std::vector<ConnectionPoolWithFailover::TryResult> ConnectionPoolWithFailover::g\n ConnectionPoolWithFailover::Base::GetPriorityFunc ConnectionPoolWithFailover::makeGetPriorityFunc(const Settings * settings)\n {\n     size_t offset = 0;\n+    LoadBalancing load_balancing = get_priority_load_balancing.load_balancing;\n     if (settings)\n-        offset = settings->load_balancing_first_offset % nested_pools.size();\n-\n-    GetPriorityFunc get_priority;\n-    switch (settings ? LoadBalancing(settings->load_balancing) : default_load_balancing)\n     {\n-        case LoadBalancing::NEAREST_HOSTNAME:\n-            get_priority = [&](size_t i) { return hostname_differences[i]; };\n-            break;\n-        case LoadBalancing::IN_ORDER:\n-            get_priority = [](size_t i) { return i; };\n-            break;\n-        case LoadBalancing::RANDOM:\n-            break;\n-        case LoadBalancing::FIRST_OR_RANDOM:\n-            get_priority = [offset](size_t i) -> size_t { return i != offset; };\n-            break;\n-        case LoadBalancing::ROUND_ROBIN:\n-            if (last_used >= nested_pools.size())\n-                last_used = 0;\n-            ++last_used;\n-            /* Consider nested_pools.size() equals to 5\n-             * last_used = 1 -> get_priority: 0 1 2 3 4\n-             * last_used = 2 -> get_priority: 5 0 1 2 3\n-             * last_used = 3 -> get_priority: 5 4 0 1 2\n-             * ...\n-             * */\n-            get_priority = [&](size_t i) { ++i; return i < last_used ? nested_pools.size() - i : i - last_used; };\n-            break;\n+        offset = settings->load_balancing_first_offset % nested_pools.size();\n+        load_balancing = LoadBalancing(settings->load_balancing);\n     }\n \n-    return get_priority;\n+    return get_priority_load_balancing.getPriorityFunc(load_balancing, offset, nested_pools.size());\n }\n \n std::vector<ConnectionPoolWithFailover::TryResult> ConnectionPoolWithFailover::getManyImpl(\ndiff --git a/src/Client/ConnectionPoolWithFailover.h b/src/Client/ConnectionPoolWithFailover.h\nindex ce70c27838ba..0ec02cc48dec 100644\n--- a/src/Client/ConnectionPoolWithFailover.h\n+++ b/src/Client/ConnectionPoolWithFailover.h\n@@ -1,6 +1,7 @@\n #pragma once\n \n #include <Common/PoolWithFailoverBase.h>\n+#include <Common/GetPriorityForLoadBalancing.h>\n #include <Client/ConnectionPool.h>\n \n #include <chrono>\n@@ -110,9 +111,7 @@ class ConnectionPoolWithFailover : public IConnectionPool, private PoolWithFailo\n     GetPriorityFunc makeGetPriorityFunc(const Settings * settings);\n \n private:\n-    std::vector<size_t> hostname_differences; /// Distances from name of this host to the names of hosts of pools.\n-    size_t last_used = 0; /// Last used for round_robin policy.\n-    LoadBalancing default_load_balancing;\n+    GetPriorityForLoadBalancing get_priority_load_balancing;\n };\n \n using ConnectionPoolWithFailoverPtr = std::shared_ptr<ConnectionPoolWithFailover>;\ndiff --git a/src/Common/GetPriorityForLoadBalancing.cpp b/src/Common/GetPriorityForLoadBalancing.cpp\nnew file mode 100644\nindex 000000000000..fa0eeb14bedf\n--- /dev/null\n+++ b/src/Common/GetPriorityForLoadBalancing.cpp\n@@ -0,0 +1,42 @@\n+#include <Common/GetPriorityForLoadBalancing.h>\n+\n+namespace DB\n+{\n+\n+std::function<size_t(size_t index)> GetPriorityForLoadBalancing::getPriorityFunc(LoadBalancing load_balance, size_t offset, size_t pool_size) const\n+{\n+    std::function<size_t(size_t index)> get_priority;\n+    switch (load_balance)\n+    {\n+        case LoadBalancing::NEAREST_HOSTNAME:\n+            get_priority = [&](size_t i) { return hostname_differences[i]; };\n+            break;\n+        case LoadBalancing::IN_ORDER:\n+            get_priority = [](size_t i) { return i; };\n+            break;\n+        case LoadBalancing::RANDOM:\n+            break;\n+        case LoadBalancing::FIRST_OR_RANDOM:\n+            get_priority = [offset](size_t i) -> size_t { return i != offset; };\n+            break;\n+        case LoadBalancing::ROUND_ROBIN:\n+            if (last_used >= pool_size)\n+                last_used = 0;\n+            ++last_used;\n+            /* Consider pool_size equals to 5\n+             * last_used = 1 -> get_priority: 0 1 2 3 4\n+             * last_used = 2 -> get_priority: 4 0 1 2 3\n+             * last_used = 3 -> get_priority: 4 3 0 1 2\n+             * ...\n+             * */\n+            get_priority = [&](size_t i)\n+            {\n+                ++i;\n+                return i < last_used ? pool_size - i : i - last_used;\n+            };\n+            break;\n+    }\n+    return get_priority;\n+}\n+\n+}\ndiff --git a/src/Common/GetPriorityForLoadBalancing.h b/src/Common/GetPriorityForLoadBalancing.h\nnew file mode 100644\nindex 000000000000..4ec686188e4c\n--- /dev/null\n+++ b/src/Common/GetPriorityForLoadBalancing.h\n@@ -0,0 +1,29 @@\n+#pragma once\n+\n+#include <Core/SettingsEnums.h>\n+\n+namespace DB\n+{\n+\n+class GetPriorityForLoadBalancing\n+{\n+public:\n+    GetPriorityForLoadBalancing(LoadBalancing load_balancing_) : load_balancing(load_balancing_) {}\n+    GetPriorityForLoadBalancing(){}\n+\n+    bool operator!=(const GetPriorityForLoadBalancing & other)\n+    {\n+        return load_balancing != other.load_balancing || hostname_differences != other.hostname_differences;\n+    }\n+\n+    std::function<size_t(size_t index)> getPriorityFunc(LoadBalancing load_balance, size_t offset, size_t pool_size) const;\n+\n+    std::vector<size_t> hostname_differences; /// Distances from name of this host to the names of hosts of pools.\n+\n+    LoadBalancing load_balancing = LoadBalancing::RANDOM;\n+\n+private:\n+    mutable size_t last_used = 0; /// Last used for round_robin policy.\n+};\n+\n+}\ndiff --git a/src/Common/ZooKeeper/CMakeLists.txt b/src/Common/ZooKeeper/CMakeLists.txt\nindex d29fba532775..5797a0a5e21d 100644\n--- a/src/Common/ZooKeeper/CMakeLists.txt\n+++ b/src/Common/ZooKeeper/CMakeLists.txt\n@@ -4,7 +4,7 @@ add_headers_and_sources(clickhouse_common_zookeeper .)\n \n add_library(clickhouse_common_zookeeper ${clickhouse_common_zookeeper_headers} ${clickhouse_common_zookeeper_sources})\n \n-target_link_libraries (clickhouse_common_zookeeper PUBLIC clickhouse_common_io common PRIVATE string_utils)\n+target_link_libraries (clickhouse_common_zookeeper PUBLIC clickhouse_core_settings_enums clickhouse_common_io common PRIVATE string_utils)\n \n if (ENABLE_EXAMPLES)\n     add_subdirectory(examples)\ndiff --git a/src/Common/ZooKeeper/ZooKeeper.cpp b/src/Common/ZooKeeper/ZooKeeper.cpp\nindex f05a10b8815a..171d787e92fb 100644\n--- a/src/Common/ZooKeeper/ZooKeeper.cpp\n+++ b/src/Common/ZooKeeper/ZooKeeper.cpp\n@@ -5,15 +5,15 @@\n \n #include <functional>\n #include <filesystem>\n-#include <pcg-random/pcg_random.hpp>\n \n-#include <base/logger_useful.h>\n #include <base/find_symbols.h>\n-#include <Common/randomSeed.h>\n+#include <base/getFQDNOrHostName.h>\n #include <Common/StringUtils/StringUtils.h>\n #include <Common/Exception.h>\n+#include <Common/isLocalAddress.h>\n \n #include <Poco/Net/NetException.h>\n+#include <Poco/Net/DNS.h>\n \n \n #define ZOOKEEPER_CONNECTION_TIMEOUT_MS 1000\n@@ -47,7 +47,7 @@ static void check(Coordination::Error code, const std::string & path)\n \n \n void ZooKeeper::init(const std::string & implementation_, const Strings & hosts_, const std::string & identity_,\n-                     int32_t session_timeout_ms_, int32_t operation_timeout_ms_, const std::string & chroot_)\n+                     int32_t session_timeout_ms_, int32_t operation_timeout_ms_, const std::string & chroot_, const GetPriorityForLoadBalancing & get_priority_load_balancing_)\n {\n     log = &Poco::Logger::get(\"ZooKeeper\");\n     hosts = hosts_;\n@@ -56,6 +56,7 @@ void ZooKeeper::init(const std::string & implementation_, const Strings & hosts_\n     operation_timeout_ms = operation_timeout_ms_;\n     chroot = chroot_;\n     implementation = implementation_;\n+    get_priority_load_balancing = get_priority_load_balancing_;\n \n     if (implementation == \"zookeeper\")\n     {\n@@ -65,14 +66,13 @@ void ZooKeeper::init(const std::string & implementation_, const Strings & hosts_\n         Coordination::ZooKeeper::Nodes nodes;\n         nodes.reserve(hosts.size());\n \n-        Strings shuffled_hosts = hosts;\n         /// Shuffle the hosts to distribute the load among ZooKeeper nodes.\n-        pcg64 generator(randomSeed());\n-        std::shuffle(shuffled_hosts.begin(), shuffled_hosts.end(), generator);\n+        std::vector<ShuffleHost> shuffled_hosts = shuffleHosts();\n \n         bool dns_error = false;\n-        for (auto & host_string : shuffled_hosts)\n+        for (auto & host : shuffled_hosts)\n         {\n+            auto & host_string = host.host;\n             try\n             {\n                 bool secure = bool(startsWith(host_string, \"secure://\"));\n@@ -153,23 +153,47 @@ void ZooKeeper::init(const std::string & implementation_, const Strings & hosts_\n     }\n }\n \n+std::vector<ShuffleHost> ZooKeeper::shuffleHosts() const\n+{\n+    std::function<size_t(size_t index)> get_priority = get_priority_load_balancing.getPriorityFunc(get_priority_load_balancing.load_balancing, 0, hosts.size());\n+    std::vector<ShuffleHost> shuffle_hosts;\n+    for (size_t i = 0; i < hosts.size(); ++i)\n+    {\n+        ShuffleHost shuffle_host;\n+        shuffle_host.host = hosts[i];\n+        if (get_priority)\n+            shuffle_host.priority = get_priority(i);\n+        shuffle_host.randomize();\n+        shuffle_hosts.emplace_back(shuffle_host);\n+    }\n+\n+    std::sort(\n+        shuffle_hosts.begin(), shuffle_hosts.end(),\n+        [](const ShuffleHost & lhs, const ShuffleHost & rhs)\n+        {\n+            return ShuffleHost::compare(lhs, rhs);\n+        });\n+\n+    return shuffle_hosts;\n+}\n+\n ZooKeeper::ZooKeeper(const std::string & hosts_string, const std::string & identity_, int32_t session_timeout_ms_,\n                      int32_t operation_timeout_ms_, const std::string & chroot_, const std::string & implementation_,\n-                     std::shared_ptr<DB::ZooKeeperLog> zk_log_)\n+                     std::shared_ptr<DB::ZooKeeperLog> zk_log_, const GetPriorityForLoadBalancing & get_priority_load_balancing_)\n {\n     zk_log = std::move(zk_log_);\n     Strings hosts_strings;\n     splitInto<','>(hosts_strings, hosts_string);\n \n-    init(implementation_, hosts_strings, identity_, session_timeout_ms_, operation_timeout_ms_, chroot_);\n+    init(implementation_, hosts_strings, identity_, session_timeout_ms_, operation_timeout_ms_, chroot_, get_priority_load_balancing_);\n }\n \n ZooKeeper::ZooKeeper(const Strings & hosts_, const std::string & identity_, int32_t session_timeout_ms_,\n                      int32_t operation_timeout_ms_, const std::string & chroot_, const std::string & implementation_,\n-                     std::shared_ptr<DB::ZooKeeperLog> zk_log_)\n+                     std::shared_ptr<DB::ZooKeeperLog> zk_log_, const GetPriorityForLoadBalancing & get_priority_load_balancing_)\n {\n     zk_log = std::move(zk_log_);\n-    init(implementation_, hosts_, identity_, session_timeout_ms_, operation_timeout_ms_, chroot_);\n+    init(implementation_, hosts_, identity_, session_timeout_ms_, operation_timeout_ms_, chroot_, get_priority_load_balancing_);\n }\n \n struct ZooKeeperArgs\n@@ -212,6 +236,10 @@ struct ZooKeeperArgs\n             {\n                 implementation = config.getString(config_name + \".\" + key);\n             }\n+            else if (key == \"zookeeper_load_balancing\")\n+            {\n+                get_priority_load_balancing.load_balancing = DB::SettingFieldLoadBalancingTraits::fromString(config.getString(config_name + \".\" + key));\n+            }\n             else\n                 throw KeeperException(std::string(\"Unknown key \") + key + \" in config file\", Coordination::Error::ZBADARGUMENTS);\n         }\n@@ -223,6 +251,15 @@ struct ZooKeeperArgs\n             if (chroot.back() == '/')\n                 chroot.pop_back();\n         }\n+\n+        /// init get_priority_load_balancing\n+        get_priority_load_balancing.hostname_differences.resize(hosts.size());\n+        const String & local_hostname = getFQDNOrHostName();\n+        for (size_t i = 0; i < hosts.size(); ++i)\n+        {\n+            const String & node_host = hosts[i].substr(0, hosts[i].find_last_of(':'));\n+            get_priority_load_balancing.hostname_differences[i] = DB::getHostNameDifference(local_hostname, node_host);\n+        }\n     }\n \n     Strings hosts;\n@@ -231,13 +268,14 @@ struct ZooKeeperArgs\n     int operation_timeout_ms;\n     std::string chroot;\n     std::string implementation;\n+    GetPriorityForLoadBalancing get_priority_load_balancing;\n };\n \n ZooKeeper::ZooKeeper(const Poco::Util::AbstractConfiguration & config, const std::string & config_name, std::shared_ptr<DB::ZooKeeperLog> zk_log_)\n     : zk_log(std::move(zk_log_))\n {\n     ZooKeeperArgs args(config, config_name);\n-    init(args.implementation, args.hosts, args.identity, args.session_timeout_ms, args.operation_timeout_ms, args.chroot);\n+    init(args.implementation, args.hosts, args.identity, args.session_timeout_ms, args.operation_timeout_ms, args.chroot, args.get_priority_load_balancing);\n }\n \n bool ZooKeeper::configChanged(const Poco::Util::AbstractConfiguration & config, const std::string & config_name) const\n@@ -248,6 +286,9 @@ bool ZooKeeper::configChanged(const Poco::Util::AbstractConfiguration & config,\n     if (args.implementation == implementation && implementation == \"testkeeper\")\n         return false;\n \n+    if (args.get_priority_load_balancing != get_priority_load_balancing)\n+        return true;\n+\n     return std::tie(args.implementation, args.hosts, args.identity, args.session_timeout_ms, args.operation_timeout_ms, args.chroot)\n         != std::tie(implementation, hosts, identity, session_timeout_ms, operation_timeout_ms, chroot);\n }\n@@ -756,7 +797,7 @@ bool ZooKeeper::waitForDisappear(const std::string & path, const WaitCondition &\n \n ZooKeeperPtr ZooKeeper::startNewSession() const\n {\n-    return std::make_shared<ZooKeeper>(hosts, identity, session_timeout_ms, operation_timeout_ms, chroot, implementation, zk_log);\n+    return std::make_shared<ZooKeeper>(hosts, identity, session_timeout_ms, operation_timeout_ms, chroot, implementation, zk_log, get_priority_load_balancing);\n }\n \n \ndiff --git a/src/Common/ZooKeeper/ZooKeeper.h b/src/Common/ZooKeeper/ZooKeeper.h\nindex 8e015b1f331d..392c04275452 100644\n--- a/src/Common/ZooKeeper/ZooKeeper.h\n+++ b/src/Common/ZooKeeper/ZooKeeper.h\n@@ -13,7 +13,10 @@\n #include <Common/Stopwatch.h>\n #include <Common/ZooKeeper/IKeeper.h>\n #include <Common/ZooKeeper/ZooKeeperConstants.h>\n+#include <Common/randomSeed.h>\n+#include <Common/GetPriorityForLoadBalancing.h>\n #include <unistd.h>\n+#include <random>\n \n \n namespace ProfileEvents\n@@ -37,6 +40,28 @@ namespace zkutil\n /// Preferred size of multi() command (in number of ops)\n constexpr size_t MULTI_BATCH_SIZE = 100;\n \n+struct ShuffleHost\n+{\n+    String host;\n+    Int64 priority = 0;\n+    UInt32 random = 0;\n+\n+    void randomize()\n+    {\n+        random = rng();\n+    }\n+\n+    static bool compare(const ShuffleHost & lhs, const ShuffleHost & rhs)\n+    {\n+        return std::forward_as_tuple(lhs.priority, lhs.random)\n+               < std::forward_as_tuple(rhs.priority, rhs.random);\n+    }\n+\n+private:\n+    std::minstd_rand rng = std::minstd_rand(randomSeed());\n+};\n+\n+using GetPriorityForLoadBalancing = DB::GetPriorityForLoadBalancing;\n \n /// ZooKeeper session. The interface is substantially different from the usual libzookeeper API.\n ///\n@@ -58,14 +83,16 @@ class ZooKeeper\n               int32_t operation_timeout_ms_ = Coordination::DEFAULT_OPERATION_TIMEOUT_MS,\n               const std::string & chroot_ = \"\",\n               const std::string & implementation_ = \"zookeeper\",\n-              std::shared_ptr<DB::ZooKeeperLog> zk_log_ = nullptr);\n+              std::shared_ptr<DB::ZooKeeperLog> zk_log_ = nullptr,\n+              const GetPriorityForLoadBalancing & get_priority_load_balancing_ = {});\n \n     ZooKeeper(const Strings & hosts_, const std::string & identity_ = \"\",\n               int32_t session_timeout_ms_ = Coordination::DEFAULT_SESSION_TIMEOUT_MS,\n               int32_t operation_timeout_ms_ = Coordination::DEFAULT_OPERATION_TIMEOUT_MS,\n               const std::string & chroot_ = \"\",\n               const std::string & implementation_ = \"zookeeper\",\n-              std::shared_ptr<DB::ZooKeeperLog> zk_log_ = nullptr);\n+              std::shared_ptr<DB::ZooKeeperLog> zk_log_ = nullptr,\n+              const GetPriorityForLoadBalancing & get_priority_load_balancing_ = {});\n \n     /** Config of the form:\n         <zookeeper>\n@@ -91,6 +118,8 @@ class ZooKeeper\n     */\n     ZooKeeper(const Poco::Util::AbstractConfiguration & config, const std::string & config_name, std::shared_ptr<DB::ZooKeeperLog> zk_log_);\n \n+    std::vector<ShuffleHost> shuffleHosts() const;\n+\n     /// Creates a new session with the same parameters. This method can be used for reconnecting\n     /// after the session has expired.\n     /// This object remains unchanged, and the new session is returned.\n@@ -284,7 +313,7 @@ class ZooKeeper\n     friend class EphemeralNodeHolder;\n \n     void init(const std::string & implementation_, const Strings & hosts_, const std::string & identity_,\n-              int32_t session_timeout_ms_, int32_t operation_timeout_ms_, const std::string & chroot_);\n+              int32_t session_timeout_ms_, int32_t operation_timeout_ms_, const std::string & chroot_, const GetPriorityForLoadBalancing & get_priority_load_balancing_);\n \n     /// The following methods don't any throw exceptions but return error codes.\n     Coordination::Error createImpl(const std::string & path, const std::string & data, int32_t mode, std::string & path_created);\n@@ -311,6 +340,8 @@ class ZooKeeper\n     Poco::Logger * log = nullptr;\n     std::shared_ptr<DB::ZooKeeperLog> zk_log;\n \n+    GetPriorityForLoadBalancing get_priority_load_balancing;\n+\n     AtomicStopwatch session_uptime;\n };\n \ndiff --git a/src/Core/SettingsEnums.cpp b/src/Core/SettingsEnums.cpp\nindex f54975888916..9ff86be52e51 100644\n--- a/src/Core/SettingsEnums.cpp\n+++ b/src/Core/SettingsEnums.cpp\n@@ -121,4 +121,5 @@ IMPLEMENT_SETTING_ENUM(EnumComparingMode, ErrorCodes::BAD_ARGUMENTS,\n     {{\"by_names\",   FormatSettings::EnumComparingMode::BY_NAMES},\n      {\"by_values\",  FormatSettings::EnumComparingMode::BY_VALUES},\n      {\"by_names_case_insensitive\", FormatSettings::EnumComparingMode::BY_NAMES_CASE_INSENSITIVE}})\n+\n }\n",
  "test_patch": "diff --git a/tests/config/config.d/zookeeper.xml b/tests/config/config.d/zookeeper.xml\nindex 4fa529a6180e..63057224ef9e 100644\n--- a/tests/config/config.d/zookeeper.xml\n+++ b/tests/config/config.d/zookeeper.xml\n@@ -1,5 +1,7 @@\n <clickhouse>\n     <zookeeper>\n+        <!--<zookeeper_load_balancing>random / in_order / nearest_hostname / first_or_random / round_robin</zookeeper_load_balancing>-->\n+        <zookeeper_load_balancing>random</zookeeper_load_balancing>\n         <node index=\"1\">\n             <host>localhost</host>\n             <port>9181</port>\ndiff --git a/tests/integration/test_zookeeper_config_load_balancing/__init__.py b/tests/integration/test_zookeeper_config_load_balancing/__init__.py\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/integration/test_zookeeper_config_load_balancing/configs/remote_servers.xml b/tests/integration/test_zookeeper_config_load_balancing/configs/remote_servers.xml\nnew file mode 100644\nindex 000000000000..63fdcea5dab5\n--- /dev/null\n+++ b/tests/integration/test_zookeeper_config_load_balancing/configs/remote_servers.xml\n@@ -0,0 +1,23 @@\n+<clickhouse>\n+    <remote_servers>\n+        <test_cluster>\n+            <shard>\n+                <replica>\n+                    <host>node1</host>\n+                    <port>9000</port>\n+                </replica>\n+\n+                <replica>\n+                    <host>node2</host>\n+                    <port>9000</port>\n+                </replica>\n+\n+                <replica>\n+                    <host>node3</host>\n+                    <port>9000</port>\n+                </replica>\n+\n+            </shard>\n+        </test_cluster>\n+    </remote_servers>\n+</clickhouse>\ndiff --git a/tests/integration/test_zookeeper_config_load_balancing/configs/remote_servers_nearest_hostname.xml b/tests/integration/test_zookeeper_config_load_balancing/configs/remote_servers_nearest_hostname.xml\nnew file mode 100644\nindex 000000000000..62f361049c95\n--- /dev/null\n+++ b/tests/integration/test_zookeeper_config_load_balancing/configs/remote_servers_nearest_hostname.xml\n@@ -0,0 +1,23 @@\n+<clickhouse>\n+    <remote_servers>\n+        <test_cluster>\n+            <shard>\n+                <replica>\n+                    <host>nod1</host>\n+                    <port>9000</port>\n+                </replica>\n+\n+                <replica>\n+                    <host>nod2</host>\n+                    <port>9000</port>\n+                </replica>\n+\n+                <replica>\n+                    <host>nod3</host>\n+                    <port>9000</port>\n+                </replica>\n+\n+            </shard>\n+        </test_cluster>\n+    </remote_servers>\n+</clickhouse>\ndiff --git a/tests/integration/test_zookeeper_config_load_balancing/configs/zookeeper_config_first_or_random.xml b/tests/integration/test_zookeeper_config_load_balancing/configs/zookeeper_config_first_or_random.xml\nnew file mode 100644\nindex 000000000000..9688480fa908\n--- /dev/null\n+++ b/tests/integration/test_zookeeper_config_load_balancing/configs/zookeeper_config_first_or_random.xml\n@@ -0,0 +1,19 @@\n+<clickhouse>\n+    <zookeeper>\n+        <!--<zookeeper_load_balancing>random / in_order / nearest_hostname / first_or_random / round_robin</zookeeper_load_balancing>-->\n+        <zookeeper_load_balancing>first_or_random</zookeeper_load_balancing>\n+        <node index=\"1\">\n+            <host>zoo1</host>\n+            <port>2181</port>\n+        </node>\n+        <node index=\"2\">\n+            <host>zoo2</host>\n+            <port>2181</port>\n+        </node>\n+        <node index=\"3\">\n+            <host>zoo3</host>\n+            <port>2181</port>\n+        </node>\n+        <session_timeout_ms>3000</session_timeout_ms>\n+    </zookeeper>\n+</clickhouse>\ndiff --git a/tests/integration/test_zookeeper_config_load_balancing/configs/zookeeper_config_in_order.xml b/tests/integration/test_zookeeper_config_load_balancing/configs/zookeeper_config_in_order.xml\nnew file mode 100644\nindex 000000000000..ebd266d80b03\n--- /dev/null\n+++ b/tests/integration/test_zookeeper_config_load_balancing/configs/zookeeper_config_in_order.xml\n@@ -0,0 +1,19 @@\n+<clickhouse>\n+    <zookeeper>\n+        <!--<zookeeper_load_balancing>random / in_order / nearest_hostname / first_or_random / round_robin</zookeeper_load_balancing>-->\n+        <zookeeper_load_balancing>in_order</zookeeper_load_balancing>\n+        <node index=\"1\">\n+            <host>zoo1</host>\n+            <port>2181</port>\n+        </node>\n+        <node index=\"2\">\n+            <host>zoo2</host>\n+            <port>2181</port>\n+        </node>\n+        <node index=\"3\">\n+            <host>zoo3</host>\n+            <port>2181</port>\n+        </node>\n+        <session_timeout_ms>3000</session_timeout_ms>\n+    </zookeeper>\n+</clickhouse>\ndiff --git a/tests/integration/test_zookeeper_config_load_balancing/configs/zookeeper_config_nearest_hostname.xml b/tests/integration/test_zookeeper_config_load_balancing/configs/zookeeper_config_nearest_hostname.xml\nnew file mode 100644\nindex 000000000000..265ebe05fab5\n--- /dev/null\n+++ b/tests/integration/test_zookeeper_config_load_balancing/configs/zookeeper_config_nearest_hostname.xml\n@@ -0,0 +1,19 @@\n+<clickhouse>\n+    <zookeeper>\n+        <!--<zookeeper_load_balancing>random / in_order / nearest_hostname / first_or_random / round_robin</zookeeper_load_balancing>-->\n+        <zookeeper_load_balancing>nearest_hostname</zookeeper_load_balancing>\n+        <node index=\"1\">\n+            <host>zoo1</host>\n+            <port>2181</port>\n+        </node>\n+        <node index=\"2\">\n+            <host>zoo2</host>\n+            <port>2181</port>\n+        </node>\n+        <node index=\"3\">\n+            <host>zoo3</host>\n+            <port>2181</port>\n+        </node>\n+        <session_timeout_ms>3000</session_timeout_ms>\n+    </zookeeper>\n+</clickhouse>\ndiff --git a/tests/integration/test_zookeeper_config_load_balancing/configs/zookeeper_config_round_robin.xml b/tests/integration/test_zookeeper_config_load_balancing/configs/zookeeper_config_round_robin.xml\nnew file mode 100644\nindex 000000000000..3b64d629e6e8\n--- /dev/null\n+++ b/tests/integration/test_zookeeper_config_load_balancing/configs/zookeeper_config_round_robin.xml\n@@ -0,0 +1,19 @@\n+<clickhouse>\n+    <zookeeper>\n+        <!--<zookeeper_load_balancing>random / in_order / nearest_hostname / first_or_random / round_robin</zookeeper_load_balancing>-->\n+        <zookeeper_load_balancing>round_robin</zookeeper_load_balancing>\n+        <node index=\"1\">\n+            <host>zoo1</host>\n+            <port>2181</port>\n+        </node>\n+        <node index=\"2\">\n+            <host>zoo2</host>\n+            <port>2181</port>\n+        </node>\n+        <node index=\"3\">\n+            <host>zoo3</host>\n+            <port>2181</port>\n+        </node>\n+        <session_timeout_ms>3000</session_timeout_ms>\n+    </zookeeper>\n+</clickhouse>\ndiff --git a/tests/integration/test_zookeeper_config_load_balancing/test.py b/tests/integration/test_zookeeper_config_load_balancing/test.py\nnew file mode 100644\nindex 000000000000..144ba14ce401\n--- /dev/null\n+++ b/tests/integration/test_zookeeper_config_load_balancing/test.py\n@@ -0,0 +1,35 @@\n+import time\n+import pytest\n+import logging\n+from helpers.cluster import ClickHouseCluster\n+\n+cluster = ClickHouseCluster(__file__, zookeeper_config_path='configs/zookeeper_config_first_or_random.xml')\n+\n+node1 = cluster.add_instance('node1', with_zookeeper=True,\n+                                main_configs=[\"configs/remote_servers.xml\", \"configs/zookeeper_config_first_or_random.xml\"])\n+node2 = cluster.add_instance('node2', with_zookeeper=True,\n+                                main_configs=[\"configs/remote_servers.xml\", \"configs/zookeeper_config_first_or_random.xml\"])\n+node3 = cluster.add_instance('node3', with_zookeeper=True,\n+                                main_configs=[\"configs/remote_servers.xml\", \"configs/zookeeper_config_first_or_random.xml\"])\n+\n+\n+@pytest.fixture(scope=\"module\")\n+def started_cluster():\n+    try:\n+        cluster.start()\n+\n+        yield cluster\n+\n+    finally:\n+        cluster.shutdown()\n+\n+\n+def test_first_or_random(started_cluster):\n+    print(str(node1.exec_in_container(['bash', '-c', \"lsof -a -i4 -i6 -itcp -w | grep ':2181' | grep ESTABLISHED\"], privileged=True, user='root')))\n+    assert '1' == str(node1.exec_in_container(['bash', '-c', \"lsof -a -i4 -i6 -itcp -w | grep 'roottestzookeeperconfigloadbalancing_zoo1_1.roottestzookeeperconfigloadbalancing_default:2181' | grep ESTABLISHED | wc -l\"], privileged=True, user='root')).strip()\n+\n+    print(str(node2.exec_in_container(['bash', '-c', \"lsof -a -i4 -i6 -itcp -w | grep ':2181' | grep ESTABLISHED\"], privileged=True, user='root')))\n+    assert '1' == str(node2.exec_in_container(['bash', '-c', \"lsof -a -i4 -i6 -itcp -w | grep 'roottestzookeeperconfigloadbalancing_zoo1_1.roottestzookeeperconfigloadbalancing_default:2181' | grep ESTABLISHED | wc -l\"], privileged=True, user='root')).strip()\n+\n+    print(str(node3.exec_in_container(['bash', '-c', \"lsof -a -i4 -i6 -itcp -w | grep ':2181' | grep ESTABLISHED\"], privileged=True, user='root')))\n+    assert '1' == str(node3.exec_in_container(['bash', '-c', \"lsof -a -i4 -i6 -itcp -w | grep 'roottestzookeeperconfigloadbalancing_zoo1_1.roottestzookeeperconfigloadbalancing_default:2181' | grep ESTABLISHED | wc -l\"], privileged=True, user='root')).strip()\ndiff --git a/tests/integration/test_zookeeper_config_load_balancing/test_in_order.py b/tests/integration/test_zookeeper_config_load_balancing/test_in_order.py\nnew file mode 100644\nindex 000000000000..095aba722179\n--- /dev/null\n+++ b/tests/integration/test_zookeeper_config_load_balancing/test_in_order.py\n@@ -0,0 +1,35 @@\n+import time\n+import pytest\n+import logging\n+from helpers.cluster import ClickHouseCluster\n+\n+cluster = ClickHouseCluster(__file__, zookeeper_config_path='configs/zookeeper_config_in_order.xml')\n+\n+node1 = cluster.add_instance('node1', with_zookeeper=True,\n+                                main_configs=[\"configs/remote_servers.xml\", \"configs/zookeeper_config_in_order.xml\"])\n+node2 = cluster.add_instance('node2', with_zookeeper=True,\n+                                main_configs=[\"configs/remote_servers.xml\", \"configs/zookeeper_config_in_order.xml\"])\n+node3 = cluster.add_instance('node3', with_zookeeper=True,\n+                                main_configs=[\"configs/remote_servers.xml\", \"configs/zookeeper_config_in_order.xml\"])\n+\n+\n+@pytest.fixture(scope=\"module\")\n+def started_cluster():\n+    try:\n+        cluster.start()\n+\n+        yield cluster\n+\n+    finally:\n+        cluster.shutdown()\n+\n+def test_in_order(started_cluster):\n+\n+    print(str(node1.exec_in_container(['bash', '-c', \"lsof -a -i4 -i6 -itcp -w | grep ':2181' | grep ESTABLISHED\"], privileged=True, user='root')))\n+    assert '1' == str(node1.exec_in_container(['bash', '-c', \"lsof -a -i4 -i6 -itcp -w | grep 'roottestzookeeperconfigloadbalancing_zoo1_1.roottestzookeeperconfigloadbalancing_default:2181' | grep ESTABLISHED | wc -l\"], privileged=True, user='root')).strip()\n+\n+    print(str(node2.exec_in_container(['bash', '-c', \"lsof -a -i4 -i6 -itcp -w | grep ':2181' | grep ESTABLISHED\"], privileged=True, user='root')))\n+    assert '1' == str(node2.exec_in_container(['bash', '-c', \"lsof -a -i4 -i6 -itcp -w | grep 'roottestzookeeperconfigloadbalancing_zoo1_1.roottestzookeeperconfigloadbalancing_default:2181' | grep ESTABLISHED | wc -l\"], privileged=True, user='root')).strip()\n+\n+    print(str(node3.exec_in_container(['bash', '-c', \"lsof -a -i4 -i6 -itcp -w | grep ':2181' | grep ESTABLISHED\"], privileged=True, user='root')))\n+    assert '1' == str(node3.exec_in_container(['bash', '-c', \"lsof -a -i4 -i6 -itcp -w | grep 'roottestzookeeperconfigloadbalancing_zoo1_1.roottestzookeeperconfigloadbalancing_default:2181' | grep ESTABLISHED | wc -l\"], privileged=True, user='root')).strip()\ndiff --git a/tests/integration/test_zookeeper_config_load_balancing/test_nearest_hostname.py b/tests/integration/test_zookeeper_config_load_balancing/test_nearest_hostname.py\nnew file mode 100644\nindex 000000000000..23c0386b1d2f\n--- /dev/null\n+++ b/tests/integration/test_zookeeper_config_load_balancing/test_nearest_hostname.py\n@@ -0,0 +1,35 @@\n+import time\n+import pytest\n+import logging\n+from helpers.cluster import ClickHouseCluster\n+\n+cluster = ClickHouseCluster(__file__, zookeeper_config_path='configs/zookeeper_config_nearest_hostname.xml')\n+\n+node1 = cluster.add_instance('nod1', with_zookeeper=True,\n+                                main_configs=[\"configs/remote_servers_nearest_hostname.xml\", \"configs/zookeeper_config_nearest_hostname.xml\"])\n+node2 = cluster.add_instance('nod2', with_zookeeper=True,\n+                                main_configs=[\"configs/remote_servers_nearest_hostname.xml\", \"configs/zookeeper_config_nearest_hostname.xml\"])\n+node3 = cluster.add_instance('nod3', with_zookeeper=True,\n+                                main_configs=[\"configs/remote_servers_nearest_hostname.xml\", \"configs/zookeeper_config_nearest_hostname.xml\"])\n+\n+\n+@pytest.fixture(scope=\"module\")\n+def started_cluster():\n+    try:\n+        cluster.start()\n+\n+        yield cluster\n+\n+    finally:\n+        cluster.shutdown()\n+\n+def test_nearest_hostname(started_cluster):\n+\n+    print(str(node1.exec_in_container(['bash', '-c', \"lsof -a -i4 -i6 -itcp -w | grep ':2181' | grep ESTABLISHED\"], privileged=True, user='root')))\n+    assert '1' == str(node1.exec_in_container(['bash', '-c', \"lsof -a -i4 -i6 -itcp -w | grep 'roottestzookeeperconfigloadbalancing_zoo1_1.roottestzookeeperconfigloadbalancing_default:2181' | grep ESTABLISHED | wc -l\"], privileged=True, user='root')).strip()\n+\n+    print(str(node2.exec_in_container(['bash', '-c', \"lsof -a -i4 -i6 -itcp -w | grep ':2181' | grep ESTABLISHED\"], privileged=True, user='root')))\n+    assert '1' == str(node2.exec_in_container(['bash', '-c', \"lsof -a -i4 -i6 -itcp -w | grep 'roottestzookeeperconfigloadbalancing_zoo2_1.roottestzookeeperconfigloadbalancing_default:2181' | grep ESTABLISHED | wc -l\"], privileged=True, user='root')).strip()\n+\n+    print(str(node3.exec_in_container(['bash', '-c', \"lsof -a -i4 -i6 -itcp -w | grep ':2181' | grep ESTABLISHED\"], privileged=True, user='root')))\n+    assert '1' == str(node3.exec_in_container(['bash', '-c', \"lsof -a -i4 -i6 -itcp -w | grep 'roottestzookeeperconfigloadbalancing_zoo3_1.roottestzookeeperconfigloadbalancing_default:2181' | grep ESTABLISHED | wc -l\"], privileged=True, user='root')).strip()\ndiff --git a/tests/integration/test_zookeeper_config_load_balancing/test_round_robin.py b/tests/integration/test_zookeeper_config_load_balancing/test_round_robin.py\nnew file mode 100644\nindex 000000000000..3623371c244a\n--- /dev/null\n+++ b/tests/integration/test_zookeeper_config_load_balancing/test_round_robin.py\n@@ -0,0 +1,41 @@\n+import time\n+import pytest\n+import logging\n+from helpers.cluster import ClickHouseCluster\n+\n+cluster = ClickHouseCluster(__file__, zookeeper_config_path='configs/zookeeper_config_round_robin.xml')\n+\n+node1 = cluster.add_instance('node1', with_zookeeper=True,\n+                                main_configs=[\"configs/remote_servers.xml\", \"configs/zookeeper_config_round_robin.xml\"])\n+node2 = cluster.add_instance('node2', with_zookeeper=True,\n+                                main_configs=[\"configs/remote_servers.xml\", \"configs/zookeeper_config_round_robin.xml\"])\n+node3 = cluster.add_instance('node3', with_zookeeper=True,\n+                                main_configs=[\"configs/remote_servers.xml\", \"configs/zookeeper_config_round_robin.xml\"])\n+\n+\n+@pytest.fixture(scope=\"module\")\n+def started_cluster():\n+    try:\n+        cluster.start()\n+\n+        yield cluster\n+\n+    finally:\n+        cluster.shutdown()\n+\n+\n+def test_round_robin(started_cluster):\n+\n+    started_cluster.stop_zookeeper_nodes([\"zoo1\"])\n+    time.sleep(1)\n+\n+    print(str(node1.exec_in_container(['bash', '-c', \"lsof -a -i4 -i6 -itcp -w | grep ':2181' | grep ESTABLISHED\"], privileged=True, user='root')))\n+    assert '1' == str(node1.exec_in_container(['bash', '-c', \"lsof -a -i4 -i6 -itcp -w | grep 'roottestzookeeperconfigloadbalancing_zoo2_1.roottestzookeeperconfigloadbalancing_default:2181' | grep ESTABLISHED | wc -l\"], privileged=True, user='root')).strip()\n+\n+    print(str(node2.exec_in_container(['bash', '-c', \"lsof -a -i4 -i6 -itcp -w | grep ':2181' | grep ESTABLISHED\"], privileged=True, user='root')))\n+    assert '1' == str(node2.exec_in_container(['bash', '-c', \"lsof -a -i4 -i6 -itcp -w | grep 'roottestzookeeperconfigloadbalancing_zoo2_1.roottestzookeeperconfigloadbalancing_default:2181' | grep ESTABLISHED | wc -l\"], privileged=True, user='root')).strip()\n+\n+    print(str(node3.exec_in_container(['bash', '-c', \"lsof -a -i4 -i6 -itcp -w | grep ':2181' | grep ESTABLISHED\"], privileged=True, user='root')))\n+    assert '1' == str(node3.exec_in_container(['bash', '-c', \"lsof -a -i4 -i6 -itcp -w | grep 'roottestzookeeperconfigloadbalancing_zoo2_1.roottestzookeeperconfigloadbalancing_default:2181' | grep ESTABLISHED | wc -l\"], privileged=True, user='root')).strip()\n+\n+    started_cluster.start_zookeeper_nodes([\"zoo1\"])\n",
  "problem_statement": "Zookeeper load balancing settings\nThere are use cases when one of the zookeeper nodes is preferred - same AZ in the cloud, or you just to avoid the situations when all the clickhouse nodes will connect accidentally to the same zookeeper node, etc. \r\n\r\nThe proposed solution is a setting \r\n```xml\r\n<zookeeper_load_balancing>random / in_order / nearest_hostname / first_or_random / round_robin</zookeeper_load_balancing>\r\n```\r\n\r\n`random` would be the default\n",
  "hints_text": "@filimonov Hi, may I take this task?\nSure. Check also https://github.com/ClickHouse/ClickHouse/blob/785cb6510f65050f706a95f258529c4097d9e453/src/Client/ConnectionPoolWithFailover.cpp#L44\nThanks for reminding.",
  "created_at": "2021-10-18T11:12:37Z"
}