diff --git a/src/Databases/DatabaseLazy.cpp b/src/Databases/DatabaseLazy.cpp
index 384c5ff47dd6..e6f69f797cff 100644
--- a/src/Databases/DatabaseLazy.cpp
+++ b/src/Databases/DatabaseLazy.cpp
@@ -8,6 +8,7 @@
 #include <IO/WriteHelpers.h>
 #include <Parsers/ASTCreateQuery.h>
 #include <Storages/IStorage.h>
+#include <Common/escapeForFileName.h>
 
 #include <common/logger_useful.h>
 #include <common/scope_guard_safe.h>
@@ -40,7 +41,7 @@ void DatabaseLazy::loadStoredObjects(
 {
     iterateMetadataFiles(local_context, [this](const String & file_name)
     {
-        const std::string table_name = file_name.substr(0, file_name.size() - 4);
+        const std::string table_name = unescapeForFileName(file_name.substr(0, file_name.size() - 4));
 
         fs::path detached_permanently_flag = fs::path(getMetadataPath()) / (file_name + detached_suffix);
         if (fs::exists(detached_permanently_flag))
diff --git a/src/Databases/DatabaseOrdinary.cpp b/src/Databases/DatabaseOrdinary.cpp
index 1bdb273c9fb6..a122c5fc1754 100644
--- a/src/Databases/DatabaseOrdinary.cpp
+++ b/src/Databases/DatabaseOrdinary.cpp
@@ -176,7 +176,7 @@ void DatabaseOrdinary::loadTablesMetadata(ContextPtr local_context, ParsedTables
                     /// if (create_query->uuid != UUIDHelpers::Nil)
                     ///     DatabaseCatalog::instance().addUUIDMapping(create_query->uuid);
 
-                    const std::string table_name = file_name.substr(0, file_name.size() - 4);
+                    const std::string table_name = unescapeForFileName(file_name.substr(0, file_name.size() - 4));
                     LOG_DEBUG(log, "Skipping permanently detached table {}.", backQuote(table_name));
                     return;
                 }
