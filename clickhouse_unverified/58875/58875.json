{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 58875,
  "instance_id": "ClickHouse__ClickHouse-58875",
  "issue_numbers": [
    "58172"
  ],
  "base_commit": "1d34f4a3047323f43675b3a11ddf60b2b5ac3ee8",
  "patch": "diff --git a/src/Storages/MergeTree/RPNBuilder.cpp b/src/Storages/MergeTree/RPNBuilder.cpp\nindex 3ffef1de718f..dc8c6b0c2300 100644\n--- a/src/Storages/MergeTree/RPNBuilder.cpp\n+++ b/src/Storages/MergeTree/RPNBuilder.cpp\n@@ -14,7 +14,9 @@\n #include <Columns/ColumnConst.h>\n #include <Columns/ColumnSet.h>\n \n+#include <Functions/indexHint.h>\n #include <Functions/IFunction.h>\n+#include <Functions/IFunctionAdaptors.h>\n \n #include <Storages/KeyDescription.h>\n \n@@ -390,6 +392,15 @@ size_t RPNBuilderFunctionTreeNode::getArgumentsSize() const\n     }\n     else\n     {\n+        // indexHint arguments are stored inside of `FunctionIndexHint` class,\n+        // because they are used only for index analysis.\n+        if (dag_node->function_base->getName() == \"indexHint\")\n+        {\n+            const auto * adaptor = typeid_cast<const FunctionToFunctionBaseAdaptor *>(dag_node->function_base.get());\n+            const auto * index_hint = typeid_cast<const FunctionIndexHint *>(adaptor->getFunction().get());\n+            return index_hint->getActions()->getOutputs().size();\n+        }\n+\n         return dag_node->children.size();\n     }\n }\n@@ -409,6 +420,15 @@ RPNBuilderTreeNode RPNBuilderFunctionTreeNode::getArgumentAt(size_t index) const\n     }\n     else\n     {\n+        // indexHint arguments are stored inside of `FunctionIndexHint` class,\n+        // because they are used only for index analysis.\n+        if (dag_node->function_base->getName() == \"indexHint\")\n+        {\n+            const auto * adaptor = typeid_cast<const FunctionToFunctionBaseAdaptor *>(dag_node->function_base.get());\n+            const auto * index_hint = typeid_cast<const FunctionIndexHint *>(adaptor->getFunction().get());\n+            return RPNBuilderTreeNode(index_hint->getActions()->getOutputs()[index], tree_context);\n+        }\n+\n         return RPNBuilderTreeNode(dag_node->children[index], tree_context);\n     }\n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02962_indexHint_rpn_construction.reference b/tests/queries/0_stateless/02962_indexHint_rpn_construction.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/02962_indexHint_rpn_construction.sql b/tests/queries/0_stateless/02962_indexHint_rpn_construction.sql\nnew file mode 100644\nindex 000000000000..3532bea57fa0\n--- /dev/null\n+++ b/tests/queries/0_stateless/02962_indexHint_rpn_construction.sql\n@@ -0,0 +1,20 @@\n+CREATE TABLE tab\n+(\n+    `foo` Array(LowCardinality(String)),\n+    INDEX idx foo TYPE bloom_filter GRANULARITY 1\n+)\n+ENGINE = MergeTree\n+PRIMARY KEY tuple();\n+\n+INSERT INTO tab SELECT if(number % 2, ['value'], [])\n+FROM system.numbers\n+LIMIT 10000;\n+\n+SELECT *\n+FROM tab\n+PREWHERE indexHint(indexHint(-1, 0.))\n+WHERE has(foo, 'b');\n+\n+SELECT *\n+FROM tab\n+PREWHERE indexHint(0);\n",
  "problem_statement": "Segfault in `MergeTreeIndexConditionBloomFilter::alwaysUnknownOrTrue()` \nhttps://s3.amazonaws.com/clickhouse-test-reports/58051/bbd7bc0dd9c31b2af69ca42ea19b78e830e39bc3/fuzzer_astfuzzerasan/report.html\r\n\r\n```sql\r\nCREATE TABLE tab\r\n(\r\n    `foo` Array(LowCardinality(String)),\r\n    INDEX idx foo TYPE bloom_filter GRANULARITY 1\r\n)\r\nENGINE = MergeTree\r\nPRIMARY KEY tuple();\r\n\r\nINSERT INTO tab SELECT if(number % 2, ['value'], [])\r\nFROM system.numbers\r\nLIMIT 10000;\r\n\r\nset allow_experimental_analyzer = 1;\r\n\r\nSELECT *\r\nFROM tab\r\nPREWHERE indexHint(indexHint(-1, 0.))\r\nWHERE has(foo, 'b');\r\n```\r\n\r\nException on client:\r\n```\r\nCode: 32. DB::Exception: Attempt to read after eof: while receiving packet from localhost:9000. (ATTEMPT_TO_READ_AFTER_EOF)\r\n\r\n1477758:2023.12.22 20:18:13.397693 [ 159142 ] {} <Fatal> BaseDaemon: ########## Short fault info ############\r\n1477759:2023.12.22 20:18:13.398066 [ 159142 ] {} <Fatal> BaseDaemon: (version 23.12.1.1, build id: 0EDF26E5AAE6D47134D8EF2DB475537CA0F237A7, git hash: b8d274d070b89bdfee578492f8210cd96859fdd8) (from thread 28612) Received signal 11\r\n1477760:2023.12.22 20:18:13.407030 [ 159142 ] {} <Fatal> BaseDaemon: Signal description: Segmentation fault\r\n1477761:2023.12.22 20:18:13.407289 [ 159142 ] {} <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Unknown si_code.\r\n1477762:2023.12.22 20:18:13.407505 [ 159142 ] {} <Fatal> BaseDaemon: Stack trace: 0x000000001236e0eb 0x000000001f0d115f 0x000000002018772c 0x0000000020185f1b 0x0000000020237d2a 0x000000002015c671 0x000000002015c113 0x000000001d88b0e6 0x000000001d88add1 0x000000001dedb1d6 0x000000001ded60de 0x000000001f7ba2e0 0x000000001f7cf872 0x00000000245f0299 0x00000000245f0ae8 0x00000000247f66a1 0x00000000247f2e9a 0x00000000247f18f5 0x00007f26214e29eb 0x00007f26215667cc\r\n1477763:2023.12.22 20:18:13.407825 [ 159142 ] {} <Fatal> BaseDaemon: ########################################\r\n1477764:2023.12.22 20:18:13.412282 [ 159142 ] {} <Fatal> BaseDaemon: (version 23.12.1.1, build id: 0EDF26E5AAE6D47134D8EF2DB475537CA0F237A7, git hash: b8d274d070b89bdfee578492f8210cd96859fdd8) (from thread 28612) (query_id: 6f0874e5-9c4d-498a-9fa7-fa0ccf9b6e5e) (query: SELECT * FROM tab PREWHERE indexHint(indexHint(-1, 0.)) WHERE has(foo, 'b')) Received signal Segmentation fault (11)\r\n1477765:2023.12.22 20:18:13.412819 [ 159142 ] {} <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Unknown si_code.\r\n1477766:2023.12.22 20:18:13.413178 [ 159142 ] {} <Fatal> BaseDaemon: Stack trace: 0x000000001236e0eb 0x000000001f0d115f 0x000000002018772c 0x0000000020185f1b 0x0000000020237d2a 0x000000002015c671 0x000000002015c113 0x000000001d88b0e6 0x000000001d88add1 0x000000001dedb1d6 0x000000001ded60de 0x000000001f7ba2e0 0x000000001f7cf872 0x00000000245f0299 0x00000000245f0ae8 0x00000000247f66a1 0x00000000247f2e9a 0x00000000247f18f5 0x00007f26214e29eb 0x00007f26215667cc\r\n\r\n```\r\n\r\ncc: @zhang2014, @novikd \n",
  "hints_text": "The issue also occurs with old analyzer in master:\r\n\r\n```sql\r\nCREATE TABLE tab\r\n(\r\n    `foo` Array(LowCardinality(String)),\r\n    INDEX idx foo TYPE bloom_filter GRANULARITY 1\r\n)\r\nENGINE = MergeTree\r\nPRIMARY KEY tuple();\r\n\r\nINSERT INTO tab SELECT if(number % 2, ['value'], [])\r\nFROM system.numbers\r\nLIMIT 10000;\r\n\r\nset allow_experimental_analyzer = 0;\r\n\r\nSELECT *\r\nFROM tab\r\nPREWHERE indexHint(1);\r\n```",
  "created_at": "2024-01-16T15:36:06Z",
  "modified_files": [
    "src/Storages/MergeTree/RPNBuilder.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02962_indexHint_rpn_construction.sql"
  ]
}