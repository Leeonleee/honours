You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Multi-threaded calculation of Window Functions 
As stated in https://github.com/ClickHouse/ClickHouse/issues/18097
"multithreaded calculation. This can be naturally implemented over hash-based partitioning."

Some synthetic example showing the potential improvements (multithreading archived by UNION ALL)

```sql
CREATE TABLE test.window_funtion_threading
Engine = MergeTree
ORDER BY (ac, nw)
AS SELECT
        toUInt64(rand(1) % 20000000) as ac,
        toFloat32(1) as wg,        
        toUInt16(rand(3) % 400) as nw
FROM numbers_mt(10000000);

-- existsing (window function executed in single thread)

SELECT
    nw,
    sum(WR) AS R,
    sumIf(WR, uniq_rows = 1) AS UNR
FROM
(
    SELECT
        uniq(nw) OVER (PARTITION BY ac) AS uniq_rows,
        AVG(wg) AS WR,
        ac,
        nw
    FROM test.window_funtion_threading
    GROUP BY ac, nw
)
GROUP BY nw
ORDER BY R DESC
LIMIT 10;

-- 10 rows in set. Elapsed: 3.353 sec. Processed 10.00 million rows, 140.00 MB (2.98 million rows/s., 41.75 MB/s.)

SELECT
    nw,
    sum(WR) AS R,
    sumIf(WR, uniq_rows = 1) AS UNR
FROM
(
    SELECT uniq(nw) OVER (PARTITION BY ac) AS uniq_rows, AVG(wg) AS WR,  ac, nw
        FROM test.window_funtion_threading
        WHERE (ac % 4) = 0
        GROUP BY ac, nw
    UNION ALL
    SELECT uniq(nw) OVER (PARTITION BY ac) AS uniq_rows, AVG(wg) AS WR,  ac, nw
        FROM test.window_funtion_threading
        WHERE (ac % 4) = 1
        GROUP BY ac, nw
    UNION ALL
    SELECT uniq(nw) OVER (PARTITION BY ac) AS uniq_rows, AVG(wg) AS WR,  ac, nw
        FROM test.window_funtion_threading
        WHERE (ac % 4) = 2
        GROUP BY ac, nw
    UNION ALL
    SELECT uniq(nw) OVER (PARTITION BY ac) AS uniq_rows, AVG(wg) AS WR,  ac, nw
        FROM test.window_funtion_threading
        WHERE (ac % 4) = 3
        GROUP BY ac, nw
)
GROUP BY nw
ORDER BY R DESC
LIMIT 10;

-- 10 rows in set. Elapsed: 1.456 sec. Processed 40.00 million rows, 560.00 MB (27.47 million rows/s., 384.53 MB/s.)
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
