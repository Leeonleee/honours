diff --git a/programs/server/config.xml b/programs/server/config.xml
index 0dc271692b88..6a40818332b2 100644
--- a/programs/server/config.xml
+++ b/programs/server/config.xml
@@ -1562,6 +1562,10 @@
         <max_entry_size_in_rows>30000000</max_entry_size_in_rows>
     </query_cache>
 
+    <backups>
+        <allowed_path>backups</allowed_path>
+    </backups>
+
     <!-- This allows to disable exposing addresses in stack traces for security reasons.
          Please be aware that it does not improve security much, but makes debugging much harder.
          The addresses that are small offsets from zero will be displayed nevertheless to show nullptr dereferences.
diff --git a/src/Formats/NativeWriter.cpp b/src/Formats/NativeWriter.cpp
index 70d5b7914a7a..b150561a5fca 100644
--- a/src/Formats/NativeWriter.cpp
+++ b/src/Formats/NativeWriter.cpp
@@ -49,8 +49,9 @@ static void writeData(const ISerialization & serialization, const ColumnPtr & co
 {
     /** If there are columns-constants - then we materialize them.
       * (Since the data type does not know how to serialize / deserialize constants.)
+      * The same for compressed columns in-memory.
       */
-    ColumnPtr full_column = column->convertToFullColumnIfConst();
+    ColumnPtr full_column = column->convertToFullColumnIfConst()->decompress();
 
     ISerialization::SerializeBinaryBulkSettings settings;
     settings.getter = [&ostr](ISerialization::SubstreamPath) -> WriteBuffer * { return &ostr; };
diff --git a/src/Storages/StorageMemory.cpp b/src/Storages/StorageMemory.cpp
index 0011e3c57a23..02d81eda59a8 100644
--- a/src/Storages/StorageMemory.cpp
+++ b/src/Storages/StorageMemory.cpp
@@ -79,11 +79,11 @@ class MemorySink : public SinkToStorage
             for (const auto & elem : block)
                 compressed_block.insert({ elem.column->compress(), elem.type, elem.name });
 
-            new_blocks.emplace_back(compressed_block);
+            new_blocks.push_back(std::move(compressed_block));
         }
         else
         {
-            new_blocks.emplace_back(block);
+            new_blocks.push_back(std::move(block));
         }
     }
 
@@ -472,9 +472,21 @@ void StorageMemory::restoreDataImpl(const BackupPtr & backup, const String & dat
 
         while (auto block = block_in.read())
         {
-            new_bytes += block.bytes();
-            new_rows += block.rows();
-            new_blocks.push_back(std::move(block));
+            if (compress)
+            {
+                Block compressed_block;
+                for (const auto & elem : block)
+                    compressed_block.insert({ elem.column->compress(), elem.type, elem.name });
+
+                new_blocks.push_back(std::move(compressed_block));
+            }
+            else
+            {
+                new_blocks.push_back(std::move(block));
+            }
+
+            new_bytes += new_blocks.back().bytes();
+            new_rows += new_blocks.back().rows();
         }
     }
 
