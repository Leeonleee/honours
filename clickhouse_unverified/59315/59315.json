{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 59315,
  "instance_id": "ClickHouse__ClickHouse-59315",
  "issue_numbers": [
    "57893"
  ],
  "base_commit": "8326f5ffb7af212ef13ef7979b731c9011549551",
  "patch": "diff --git a/programs/server/config.xml b/programs/server/config.xml\nindex 0dc271692b88..6a40818332b2 100644\n--- a/programs/server/config.xml\n+++ b/programs/server/config.xml\n@@ -1562,6 +1562,10 @@\n         <max_entry_size_in_rows>30000000</max_entry_size_in_rows>\n     </query_cache>\n \n+    <backups>\n+        <allowed_path>backups</allowed_path>\n+    </backups>\n+\n     <!-- This allows to disable exposing addresses in stack traces for security reasons.\n          Please be aware that it does not improve security much, but makes debugging much harder.\n          The addresses that are small offsets from zero will be displayed nevertheless to show nullptr dereferences.\ndiff --git a/src/Formats/NativeWriter.cpp b/src/Formats/NativeWriter.cpp\nindex 70d5b7914a7a..b150561a5fca 100644\n--- a/src/Formats/NativeWriter.cpp\n+++ b/src/Formats/NativeWriter.cpp\n@@ -49,8 +49,9 @@ static void writeData(const ISerialization & serialization, const ColumnPtr & co\n {\n     /** If there are columns-constants - then we materialize them.\n       * (Since the data type does not know how to serialize / deserialize constants.)\n+      * The same for compressed columns in-memory.\n       */\n-    ColumnPtr full_column = column->convertToFullColumnIfConst();\n+    ColumnPtr full_column = column->convertToFullColumnIfConst()->decompress();\n \n     ISerialization::SerializeBinaryBulkSettings settings;\n     settings.getter = [&ostr](ISerialization::SubstreamPath) -> WriteBuffer * { return &ostr; };\ndiff --git a/src/Storages/StorageMemory.cpp b/src/Storages/StorageMemory.cpp\nindex 0011e3c57a23..02d81eda59a8 100644\n--- a/src/Storages/StorageMemory.cpp\n+++ b/src/Storages/StorageMemory.cpp\n@@ -79,11 +79,11 @@ class MemorySink : public SinkToStorage\n             for (const auto & elem : block)\n                 compressed_block.insert({ elem.column->compress(), elem.type, elem.name });\n \n-            new_blocks.emplace_back(compressed_block);\n+            new_blocks.push_back(std::move(compressed_block));\n         }\n         else\n         {\n-            new_blocks.emplace_back(block);\n+            new_blocks.push_back(std::move(block));\n         }\n     }\n \n@@ -472,9 +472,21 @@ void StorageMemory::restoreDataImpl(const BackupPtr & backup, const String & dat\n \n         while (auto block = block_in.read())\n         {\n-            new_bytes += block.bytes();\n-            new_rows += block.rows();\n-            new_blocks.push_back(std::move(block));\n+            if (compress)\n+            {\n+                Block compressed_block;\n+                for (const auto & elem : block)\n+                    compressed_block.insert({ elem.column->compress(), elem.type, elem.name });\n+\n+                new_blocks.push_back(std::move(compressed_block));\n+            }\n+            else\n+            {\n+                new_blocks.push_back(std::move(block));\n+            }\n+\n+            new_bytes += new_blocks.back().bytes();\n+            new_rows += new_blocks.back().rows();\n         }\n     }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02973_backup_of_in_memory_compressed.reference b/tests/queries/0_stateless/02973_backup_of_in_memory_compressed.reference\nnew file mode 100644\nindex 000000000000..00479541d226\n--- /dev/null\n+++ b/tests/queries/0_stateless/02973_backup_of_in_memory_compressed.reference\n@@ -0,0 +1,2 @@\n+0\n+1000000\tHello, world\tHello, world\ndiff --git a/tests/queries/0_stateless/02973_backup_of_in_memory_compressed.sh b/tests/queries/0_stateless/02973_backup_of_in_memory_compressed.sh\nnew file mode 100755\nindex 000000000000..b212e42061fa\n--- /dev/null\n+++ b/tests/queries/0_stateless/02973_backup_of_in_memory_compressed.sh\n@@ -0,0 +1,31 @@\n+#!/usr/bin/env bash\n+# Tags: no-parallel, no-fasttest\n+# Because we are creating a backup with fixed path.\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+$CLICKHOUSE_CLIENT --multiquery \"\n+DROP TABLE IF EXISTS test;\n+CREATE TABLE test (x String) ENGINE = Memory SETTINGS compress = 1;\n+INSERT INTO test SELECT 'Hello, world' FROM numbers(1000000);\n+\"\n+\n+$CLICKHOUSE_CLIENT --multiquery \"\n+BACKUP TABLE test TO File('test.zip');\n+\" --format Null\n+\n+$CLICKHOUSE_CLIENT --multiquery \"\n+TRUNCATE TABLE test;\n+SELECT count() FROM test;\n+\"\n+\n+$CLICKHOUSE_CLIENT --multiquery \"\n+RESTORE TABLE test FROM File('test.zip');\n+\" --format Null\n+\n+$CLICKHOUSE_CLIENT --multiquery \"\n+SELECT count(), min(x), max(x) FROM test;\n+DROP TABLE test;\n+\"\n",
  "problem_statement": "Logical error \"Bad cast from type DB::ColumnCompressed to DB::ColumnVector<unsigned long>\" in upgrade check\n\r\n\r\n\r\n```\r\n2023.12.14 16:56:19.205987 [ 23952 ] {7ba4d3d0-56b3-43f4-8a56-5825dee631ef} <Error> executeQuery: Code: 49. DB::Exception: Got error from localhost:9000. DB::Exception: Bad cast from type DB::ColumnCompressed to DB::ColumnVector<unsigned long>. Stack trace:\r\n--\r\n7. ./build_docker/./src/Backups/IBackupEntriesLazyBatch.cpp:30: DB::IBackupEntriesLazyBatch::BackupEntryFromBatch::isReference() const @ 0x000000001179c36d in /usr/lib/debug/usr/bin/clickhouse.debug\r\n8. ./build_docker/./src/Backups/BackupFileInfo.cpp:0: void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<DB::buildFileInfosForBackupEntries(std::vector<std::pair<String, std::shared_ptr<DB::IBackupEntry const>>, std::allocator<std::pair<String, std::shared_ptr<DB::IBackupEntry const>>>> const&, std::shared_ptr<DB::IBackup const> const&, DB::ReadSettings const&, ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>&)::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x000000000ffa603a in /usr/lib/debug/usr/bin/clickhouse.debug\r\n9. ./base/base/../base/wide_integer_impl.h:809: ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::worker(std::__list_iterator<ThreadFromGlobalPoolImpl<false>, void*>) @ 0x000000000c5e1fb0 in /usr/lib/debug/usr/bin/clickhouse.debug\r\n10. ./build_docker/./src/Common/ThreadPool.cpp:0: void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000c5e5d3c in /usr/lib/debug/usr/bin/clickhouse.debug\r\n11. ./base/base/../base/wide_integer_impl.h:809: void* std::__thread_proxy[abi:v15000]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>>(void*) @ 0x000000000c5e45d3 in /usr/lib/debug/usr/bin/clickhouse.debug\r\n12. ? @ 0x00007f30996a2ac3 in ?\r\n13. ? @ 0x00007f3099734a40 in ?\r\n. (LOGICAL_ERROR) (version 23.11.2.11 (official build)) (from [::1]:45282) (comment: 02907_backup_mv_with_no_source_table.sh) (in query: backup database test_7 on cluster test_shard_localhost to Disk('backups', '02907_backup_mv_with_no_source_table_test_72');), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. ./build_docker/./src/Common/Exception.cpp:97: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000c4fd597 in /usr/lib/debug/usr/bin/clickhouse.debug\r\n1. ./contrib/llvm-project/libcxx/include/string:1499: DB::readException(DB::ReadBuffer&, String const&, bool) @ 0x000000000c563b9f in /usr/lib/debug/usr/bin/clickhouse.debug\r\n2. ./contrib/llvm-project/libcxx/include/string:1499: DB::BackupCoordinationStageSync::readCurrentState(std::vector<String, std::allocator<String>> const&, std::vector<String, std::allocator<String>> const&, String const&) const @ 0x000000000ffe4597 in /usr/lib/debug/usr/bin/clickhouse.debug\r\n3. ./contrib/llvm-project/libcxx/include/vector:951: DB::BackupCoordinationStageSync::waitImpl(std::vector<String, std::allocator<String>> const&, String const&, std::optional<std::chrono::duration<long long, std::ratio<1l, 1000l>>>) const @ 0x000000000ffde11c in /usr/lib/debug/usr/bin/clickhouse.debug\r\n4. ./build_docker/./src/Backups/BackupCoordinationRemote.cpp:275: DB::BackupCoordinationRemote::waitForStage(String const&) @ 0x000000000ffabcc3 in /usr/lib/debug/usr/bin/clickhouse.debug\r\n5. ./contrib/llvm-project/libcxx/include/vector:434: DB::BackupsWorker::doBackup(std::shared_ptr<DB::ASTBackupQuery> const&, String const&, String const&, DB::BackupInfo const&, DB::BackupSettings, std::shared_ptr<DB::IBackupCoordination>, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::Context>, bool) @ 0x000000000ff97d00 in /usr/lib/debug/usr/bin/clickhouse.debug\r\n6. ./build_docker/./src/Backups/BackupsWorker.cpp:0: DB::BackupsWorker::startMakingBackup(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&) @ 0x000000000ff92ff4 in /usr/lib/debug/usr/bin/clickhouse.debug\r\n7. ./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:606: DB::BackupsWorker::start(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>) @ 0x000000000ff928a3 in /usr/lib/debug/usr/bin/clickhouse.debug\r\n8. ./build_docker/./src/Interpreters/InterpreterBackupQuery.cpp:0: DB::InterpreterBackupQuery::execute() @ 0x0000000010ec64a0 in /usr/lib/debug/usr/bin/clickhouse.debug\r\n9. ./build_docker/./src/Interpreters/executeQuery.cpp:0: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x0000000011333ea2 in /usr/lib/debug/usr/bin/clickhouse.debug\r\n10. ./build_docker/./src/Interpreters/executeQuery.cpp:1287: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x000000001132dbba in /usr/lib/debug/usr/bin/clickhouse.debug\r\n11. ./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:612: DB::TCPHandler::runImpl() @ 0x0000000012238829 in /usr/lib/debug/usr/bin/clickhouse.debug\r\n12. ./build_docker/./src/Server/TCPHandler.cpp:2294: DB::TCPHandler::run() @ 0x000000001224d1b9 in /usr/lib/debug/usr/bin/clickhouse.debug\r\n13. ./build_docker/./base/poco/Net/src/TCPServerConnection.cpp:57: Poco::Net::TCPServerConnection::start() @ 0x0000000014c71eb2 in /usr/lib/debug/usr/bin/clickhouse.debug\r\n14. ./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:48: Poco::Net::TCPServerDispatcher::run() @ 0x0000000014c72cb1 in /usr/lib/debug/usr/bin/clickhouse.debug\r\n15. ./build_docker/./base/poco/Foundation/src/ThreadPool.cpp:202: Poco::PooledThread::run() @ 0x0000000014d69b47 in /usr/lib/debug/usr/bin/clickhouse.debug\r\n16. ./base/poco/Foundation/include/Poco/SharedPtr.h:231: Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000014d6813c in /usr/lib/debug/usr/bin/clickhouse.debug\r\n17. ? @ 0x00007f30996a2ac3 in ?\r\n18. ? @ 0x00007f3099734a40 in ?\r\n\r\n```\n",
  "hints_text": "https://s3.amazonaws.com/clickhouse-test-reports/58350/b1688b19538a8bd389e12575bb09a3b628a1a2fe/upgrade_check__debug_.html\ncc: @vitlibar \nhttps://s3.amazonaws.com/clickhouse-test-reports/58477/224a58ddc51d306af48aa2bde74d6e8f659bdc02/upgrade_check__tsan_.html\nhttps://s3.amazonaws.com/clickhouse-test-reports/59280/febd4ce8d794749da1346428709f72ce0e34495f/upgrade_check__asan_.html",
  "created_at": "2024-01-28T22:07:26Z"
}