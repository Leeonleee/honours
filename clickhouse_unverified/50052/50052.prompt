You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Unexpected part name: <projection name>
**INPUTS**
- `ReplicatedMergeTree` table projections (works fine)
- CH ver `23.1.6.42`
- system.mutations for `MATERIALIZE projection` has `is_done` equals to `0` for unexists parts

**Unexpected behaviour**
Hanging MATERIALIZE projection MUTATION in system.mutations for unexists parts

**Expected behavior**
0 system.mutations. 

**Additional info**

1. create particular table projections
2. MATERIALIZE them
3. wait a bit and check system.mutations
```sql
select mutation_id, command, is_done, parts_to_do, parts_to_do_names, latest_fail_reason from system.mutations where is_done=0
┌─mutation_id─┬─command───────────────────────────────────────────┬─is_done─┬─parts_to_do─┬─parts_to_do_names─────────────────────────────────────────────────────────────────────┬─latest_fail_reason─┐
│ 0000000005  │ MATERIALIZE PROJECTION device_agregation          │       0 │           2 │ ['b0d8617590929340bbb5fb58cf52bce4_60_65_2','b9186c325b4cfa4ca55dcba0e78fd4a3_0_5_1'] │                    │
│ 0000000006  │ MATERIALIZE PROJECTION users_agregation           │       0 │           2 │ ['b0d8617590929340bbb5fb58cf52bce4_60_65_2','b9186c325b4cfa4ca55dcba0e78fd4a3_0_5_1'] │                    │
│ 0000000007  │ MATERIALIZE PROJECTION messages_agregation        │       0 │           2 │ ['b0d8617590929340bbb5fb58cf52bce4_60_65_2','b9186c325b4cfa4ca55dcba0e78fd4a3_0_5_1'] │                    │
│ 0000000008  │ MATERIALIZE PROJECTION overlay_session_agregation │       0 │           2 │ ['b0d8617590929340bbb5fb58cf52bce4_60_65_2','b9186c325b4cfa4ca55dcba0e78fd4a3_0_5_1'] │                    │
└─────────────┴───────────────────────────────────────────────────┴─────────┴─────────────┴───────────────────────────────────────────────────────────────────────────────────────┴────────────────────┘
```
4. check CH tasks/processes
```sql
SELECT * FROM system.processes WHERE query not like 'SELECT%' LIMIT 10 FORMAT Vertical
Ok.

0 rows in set. Elapsed: 0.003 sec. 
```
5.  get part info for stucked parts
```sql
select partition, name, marks, rows, modification_time from system.parts where name IN('b0d8617590929340bbb5fb58cf52bce4_60_65_2','b9186c325b4cfa4ca55dcba0e78fd4a3_0_5_1')
Ok.

0 rows in set. Elapsed: 0.010 sec. Processed 3.64 thousand rows, 324.88 KB (357.75 thousand rows/s., 31.97 MB/s.)
```
6.  check if there any parts in this partition
```sql
select partition, name, marks, rows, modification_time from system.parts where partition_id IN('b0d8617590929340bbb5fb58cf52bce4', 'b9186c325b4cfa4ca55dcba0e78fd4a3')
┌─partition──┬─name─────────────────────────────────────────────┬─marks─┬───rows─┬───modification_time─┐
│ 20230410PM │ b0d8617590929340bbb5fb58cf52bce4_0_11_2_75       │    75 │ 592459 │ 2023-05-16 09:50:37 │
│ 20230410PM │ b0d8617590929340bbb5fb58cf52bce4_12_17_1_75      │    52 │ 409492 │ 2023-05-16 09:50:37 │
│ 20230410PM │ b0d8617590929340bbb5fb58cf52bce4_18_59_7_75      │    70 │ 561446 │ 2023-05-16 09:50:37 │
│ 20230410PM │ b0d8617590929340bbb5fb58cf52bce4_60_64_1         │    32 │ 250081 │ 2023-05-11 14:17:26 │
│ 20230410PM │ b0d8617590929340bbb5fb58cf52bce4_65_65_0         │     2 │    377 │ 2023-05-11 14:17:25 │
│ 20230410PM │ b0d8617590929340bbb5fb58cf52bce4_66_66_0_75      │     2 │    159 │ 2023-05-16 09:50:37 │
│ 20230512AM │ b9186c325b4cfa4ca55dcba0e78fd4a3_0_0_0           │     2 │   7950 │ 2023-05-12 06:59:15 │
│ 20230512AM │ b9186c325b4cfa4ca55dcba0e78fd4a3_1_1_0           │     2 │      2 │ 2023-05-12 07:19:39 │
│ 20230512AM │ b9186c325b4cfa4ca55dcba0e78fd4a3_2_2_0           │     2 │      3 │ 2023-05-12 07:19:50 │
│ 20230512AM │ b9186c325b4cfa4ca55dcba0e78fd4a3_3_3_0           │     2 │      1 │ 2023-05-12 07:19:50 │
│ 20230512AM │ b9186c325b4cfa4ca55dcba0e78fd4a3_4_4_0           │     2 │      3 │ 2023-05-12 07:20:00 │
│ 20230512AM │ b9186c325b4cfa4ca55dcba0e78fd4a3_5_5_0           │     2 │      2 │ 2023-05-12 07:20:04 │
│ 20230512AM │ b9186c325b4cfa4ca55dcba0e78fd4a3_6_3855_763_3860 │     2 │   7493 │ 2023-05-16 09:50:40 │
└────────────┴──────────────────────────────────────────────────┴───────┴────────┴─────────────────────┘
```
7. materialize device_agregation projection once again and grab some parts to check whether they are exists or not
```sql
ALTER TABLE analytics_local MATERIALIZE projection device_agregation
select parts_to_do, parts_to_do_names from system.mutations where is_done=0

-- 1864, '1e8ea56ef92907db5039c205765fda33_17_17_0_26','1ebc42839fc25ba80c59f25c930876bd_0_0_0_9','1eeded7867995ae3bf35178ebae6a49a_0_0_0_9',...

select partition, name, marks, rows, modification_time from system.parts where name IN('1e8ea56ef92907db5039c205765fda33_17_17_0_26','1ebc42839fc25ba80c59f25c930876bd_0_0_0_9')

┌─partition──┬─name────────────────────────────────────────┬─marks─┬─rows─┬───modification_time─┐
│ 20220307AM │ 1e8ea56ef92907db5039c205765fda33_17_17_0_26 │     2 │   10 │ 2023-05-16 09:49:30 │
│ 20210714AM │ 1ebc42839fc25ba80c59f25c930876bd_0_0_0_9    │     2 │ 1830 │ 2023-05-16 09:49:30 │
└────────────┴─────────────────────────────────────────────┴───────┴──────┴─────────────────────┘
```
8. wait a bit and check `system.mutations`
```sql
select mutation_id, command, is_done, parts_to_do, parts_to_do_names, latest_fail_reason from system.mutations where is_done=0

┌─mutation_id─┬─command───────────────────────────────────────────┬─is_done─┬─parts_to_do─┬─parts_to_do_names─────────────────────────────────────────────────────────────────────┬─latest_fail_reason─┐
│ 0000000005  │ MATERIALIZE PROJECTION device_agregation          │       0 │           2 │ ['b0d8617590929340bbb5fb58cf52bce4_60_65_2','b9186c325b4cfa4ca55dcba0e78fd4a3_0_5_1'] │                    │
│ 0000000006  │ MATERIALIZE PROJECTION users_agregation           │       0 │           2 │ ['b0d8617590929340bbb5fb58cf52bce4_60_65_2','b9186c325b4cfa4ca55dcba0e78fd4a3_0_5_1'] │                    │
│ 0000000007  │ MATERIALIZE PROJECTION messages_agregation        │       0 │           2 │ ['b0d8617590929340bbb5fb58cf52bce4_60_65_2','b9186c325b4cfa4ca55dcba0e78fd4a3_0_5_1'] │                    │
│ 0000000008  │ MATERIALIZE PROJECTION overlay_session_agregation │       0 │           2 │ ['b0d8617590929340bbb5fb58cf52bce4_60_65_2','b9186c325b4cfa4ca55dcba0e78fd4a3_0_5_1'] │                    │
│ 0000000009  │ MATERIALIZE PROJECTION device_agregation          │       0 │           2 │ ['b0d8617590929340bbb5fb58cf52bce4_60_65_2','b9186c325b4cfa4ca55dcba0e78fd4a3_0_5_1'] │                    │
└─────────────┴───────────────────────────────────────────────────┴─────────┴─────────────┴───────────────────────────────────────────────────────────────────────────────────────┴────────────────────┘
```

```sql
SELECT version()
┌─version()─┐
│ 23.1.6.42 │
└───────────┘
```

** Work Around ** 
As we dont have any procs/tasks related to particular mutations we can just kill mutations
```sql
KILL MUTATION ON CLUSTER '{cluster}' WHERE mutation_id IN(select mutation_id from system.mutations where is_done=0)
```
SELECT queries using a projection raise a `BAD_DATA_PART_NAME` error
**Describe what's wrong**

We have implemented a projection using the `GROUP BY` clause.

Queries activating the projection have been running without fault for months. But since a few weeks ago, sometimes we get a `BAD_DATA_PART_NAME` exception.

This has been the case for various queries that use the projection. 

**Does it reproduce on recent release?**

Unfortunately, I can't test on the latest. The CH version used is `22.12.3.5` 

**How to reproduce**

We found it really hard to reproduce. If we run an identical query 10 times, it only breaks 1 time.

**Expected behavior**

Queries using the projection always run.

**Error message and/or stacktrace**

```
DB::Exception: Unexpected part name: my_projection: While executing MergeTreeThread. (BAD_DATA_PART_NAME), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked const&, int, bool) @ 0xe750cda in /usr/bin/clickhouse
1. ? @ 0x82ec0c0 in /usr/bin/clickhouse
2. DB::MergeTreePartInfo::fromPartName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, StrongTypedef<unsigned int, DB::MergeTreeDataFormatVersionTag>) @ 0x14f4b32a in /usr/bin/clickhouse
3. DB::StorageReplicatedMergeTree::enqueuePartForCheck(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, long) @ 0x14a88c53 in /usr/bin/clickhouse
4. DB::MergeTreeReaderCompact::MergeTreeReaderCompact(std::__1::shared_ptr<DB::IMergeTreeDataPartInfoForReader>, DB::NamesAndTypesList, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::UncompressedCache*, DB::MarkCache*, std::__1::deque<DB::MarkRange, std::__1::allocator<DB::MarkRange>>, DB::MergeTreeReaderSettings, ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>*, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, double>>>, std::__1::function<void (DB::ReadBufferFromFileBase::ProfileInfo)> const&, int) @ 0x14f5e04c in /usr/bin/clickhouse
5. DB::MergeTreeDataPartCompact::getReader(DB::NamesAndTypesList const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::__1::deque<DB::MarkRange, std::__1::allocator<DB::MarkRange>> const&, DB::UncompressedCache*, DB::MarkCache*, DB::MergeTreeReaderSettings const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, double>>> const&, std::__1::function<void (DB::ReadBufferFromFileBase::ProfileInfo)> const&) const @ 0x14ea22d3 in /usr/bin/clickhouse
6. DB::IMergeTreeSelectAlgorithm::initializeMergeTreeReadersForPart(std::__1::shared_ptr<DB::IMergeTreeDataPart const>&, DB::MergeTreeReadTaskColumns const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::__1::deque<DB::MarkRange, std::__1::allocator<DB::MarkRange>> const&, std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, double, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, double>>> const&, std::__1::function<void (DB::ReadBufferFromFileBase::ProfileInfo)> const&) @ 0x15771c66 in /usr/bin/clickhouse
7. DB::MergeTreeThreadSelectAlgorithm::finalizeNewTask() @ 0x1579e5b9 in /usr/bin/clickhouse
8. DB::IMergeTreeSelectAlgorithm::read() @ 0x15770dfe in /usr/bin/clickhouse
9. DB::MergeTreeSource::tryGenerate() @ 0x1579f7bc in /usr/bin/clickhouse
10. DB::ISource::work() @ 0x153d3246 in /usr/bin/clickhouse
11. DB::ExecutionThreadContext::executeTask() @ 0x153ee2a6 in /usr/bin/clickhouse
12. DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*) @ 0x153e349c in /usr/bin/clickhouse
13. ? @ 0x153e55bd in /usr/bin/clickhouse
14. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0xe809f16 in /usr/bin/clickhouse
15. ? @ 0xe80f0e1 in /usr/bin/clickhouse
16. start_thread @ 0x74a4 in /lib/x86_64-linux-gnu/libpthread-2.24.so
17. clone @ 0xe8d0f in /lib/x86_64-linux-gnu/libc-2.24.so
```

**Additional context**

We run a 4-node cluster.
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
