diff --git a/src/Interpreters/ActionsDAG.cpp b/src/Interpreters/ActionsDAG.cpp
index c7fc284d8bf5..fe0bba2bf3ef 100644
--- a/src/Interpreters/ActionsDAG.cpp
+++ b/src/Interpreters/ActionsDAG.cpp
@@ -544,6 +544,11 @@ std::string ActionsDAG::dumpDAG() const
         out << "
";
     }
 
+    out << "Index:";
+    for (const auto * node : index)
+        out << ' ' << map[node];
+    out << '
';
+
     return out.str();
 }
 
@@ -692,7 +697,8 @@ ActionsDAGPtr ActionsDAG::merge(ActionsDAG && first, ActionsDAG && second)
     /// Will store merged result in `first`.
 
     /// This map contains nodes which should be removed from `first` index, cause they are used as inputs for `second`.
-    std::unordered_set<Node *> removed_first_result;
+    /// The second element is the number of removes (cause one node may be repeated several times in result).
+    std::unordered_map<Node *, size_t> removed_first_result;
     /// Map inputs of `second` to nodes of `first`.
     std::unordered_map<Node *, Node *> inputs_map;
 
@@ -717,7 +723,7 @@ ActionsDAGPtr ActionsDAG::merge(ActionsDAG && first, ActionsDAG && second)
             else
             {
                 inputs_map[node] = it->second.front();
-                removed_first_result.emplace(it->second.front());
+                removed_first_result[it->second.front()] += 1;
                 it->second.pop_front();
             }
         }
@@ -761,8 +767,12 @@ ActionsDAGPtr ActionsDAG::merge(ActionsDAG && first, ActionsDAG && second)
             auto cur = it;
             ++it;
 
-            if (removed_first_result.count(*cur))
+            auto jt = removed_first_result.find(*cur);
+            if (jt != removed_first_result.end() && jt->second > 0)
+            {
                 first.index.remove(cur);
+                --jt->second;
+            }
         }
 
         for (auto * node : second.index)
diff --git a/src/Interpreters/ExpressionActions.h b/src/Interpreters/ExpressionActions.h
index 5104f1e8e723..cbd92eb57e3c 100644
--- a/src/Interpreters/ExpressionActions.h
+++ b/src/Interpreters/ExpressionActions.h
@@ -87,6 +87,7 @@ class ExpressionActions
     const Actions & getActions() const { return actions; }
     const std::list<Node> & getNodes() const { return actions_dag->getNodes(); }
     const ActionsDAG & getActionsDAG() const { return *actions_dag; }
+    const ColumnNumbers & getResultPositions() const { return result_positions; }
 
     /// Get a list of input columns.
     Names getRequiredColumns() const;
diff --git a/src/Processors/QueryPlan/ExpressionStep.cpp b/src/Processors/QueryPlan/ExpressionStep.cpp
index f7ca0a972dca..e23954cc0632 100644
--- a/src/Processors/QueryPlan/ExpressionStep.cpp
+++ b/src/Processors/QueryPlan/ExpressionStep.cpp
@@ -100,6 +100,11 @@ void ExpressionStep::describeActions(FormatSettings & settings) const
         first = false;
         settings.out << action.toString() << '
';
     }
+
+    settings.out << prefix << "Positions:";
+    for (const auto & pos : expression->getResultPositions())
+        settings.out << ' ' << pos;
+    settings.out << '
';
 }
 
 JoinStep::JoinStep(const DataStream & input_stream_, JoinPtr join_)
