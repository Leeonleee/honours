diff --git a/src/Functions/array/range.cpp b/src/Functions/array/range.cpp
index 1a057458175b..ac9687869233 100644
--- a/src/Functions/array/range.cpp
+++ b/src/Functions/array/range.cpp
@@ -22,6 +22,11 @@ namespace ErrorCodes
 }
 
 
+/** Generates array
+  * range(size): [0, size)
+  * range(start, end): [start, end)
+  * range(start, end, step): [start, end) with step increments.
+  */
 class FunctionRange : public IFunction
 {
 public:
@@ -40,9 +45,9 @@ class FunctionRange : public IFunction
     {
         if (arguments.size() > 3 || arguments.empty())
         {
-            throw Exception{"Function " + getName() + " needs 1..3 arguments; passed "
-                            + std::to_string(arguments.size()) + ".",
-                            ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH};
+            throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH,
+                "Function {} needs 1..3 arguments; passed {}.",
+                getName(), arguments.size());
         }
 
         for (const auto & arg : arguments)
@@ -339,6 +344,18 @@ class FunctionRange : public IFunction
 
     ColumnPtr executeImpl(const ColumnsWithTypeAndName & arguments, const DataTypePtr & result_type, size_t input_rows_count) const override
     {
+        DataTypePtr elem_type = checkAndGetDataType<DataTypeArray>(result_type.get())->getNestedType();
+        WhichDataType which(elem_type);
+
+        if (!which.isUInt8()
+            && !which.isUInt16()
+            && !which.isUInt32()
+            && !which.isUInt64())
+        {
+            throw Exception{"Illegal columns of arguments of function " + getName()
+                + ", the function only implemented for unsigned integers up to 64 bit", ErrorCodes::ILLEGAL_COLUMN};
+        }
+
         ColumnPtr res;
         if (arguments.size() == 1)
         {
@@ -356,22 +373,24 @@ class FunctionRange : public IFunction
         Columns columns_holder(3);
         ColumnRawPtrs column_ptrs(3);
 
-        const auto return_type = checkAndGetDataType<DataTypeArray>(result_type.get())->getNestedType();
-
         for (size_t i = 0; i < arguments.size(); ++i)
         {
             if (i == 1)
-                columns_holder[i] = castColumn(arguments[i], return_type)->convertToFullColumnIfConst();
+                columns_holder[i] = castColumn(arguments[i], elem_type)->convertToFullColumnIfConst();
             else
-                columns_holder[i] = castColumn(arguments[i], return_type);
+                columns_holder[i] = castColumn(arguments[i], elem_type);
 
             column_ptrs[i] = columns_holder[i].get();
         }
 
-        // for step column, defaults to 1
+        /// Step is one by default.
         if (arguments.size() == 2)
         {
-            columns_holder[2] = return_type->createColumnConst(input_rows_count, 1);
+            /// Convert a column with constant 1 to the result type.
+            columns_holder[2] = castColumn(
+                {DataTypeUInt8().createColumnConst(input_rows_count, 1), std::make_shared<DataTypeUInt8>(), {}},
+                elem_type);
+
             column_ptrs[2] = columns_holder[2].get();
         }
 
@@ -385,7 +404,9 @@ class FunctionRange : public IFunction
             if ((res = executeConstStartStep<UInt8>(column_ptrs[1], start, step, input_rows_count)) ||
                 (res = executeConstStartStep<UInt16>(column_ptrs[1], start, step, input_rows_count)) ||
                 (res = executeConstStartStep<UInt32>(column_ptrs[1], start, step, input_rows_count)) ||
-                (res = executeConstStartStep<UInt64>(column_ptrs[1], start, step, input_rows_count))) {}
+                (res = executeConstStartStep<UInt64>(column_ptrs[1], start, step, input_rows_count)))
+            {
+            }
         }
         else if (is_start_const && !is_step_const)
         {
@@ -394,7 +415,9 @@ class FunctionRange : public IFunction
             if ((res = executeConstStart<UInt8>(column_ptrs[1], column_ptrs[2], start, input_rows_count)) ||
                 (res = executeConstStart<UInt16>(column_ptrs[1], column_ptrs[2], start, input_rows_count)) ||
                 (res = executeConstStart<UInt32>(column_ptrs[1], column_ptrs[2], start, input_rows_count)) ||
-                (res = executeConstStart<UInt64>(column_ptrs[1], column_ptrs[2], start, input_rows_count))) {}
+                (res = executeConstStart<UInt64>(column_ptrs[1], column_ptrs[2], start, input_rows_count)))
+            {
+            }
         }
         else if (!is_start_const && is_step_const)
         {
@@ -403,14 +426,18 @@ class FunctionRange : public IFunction
             if ((res = executeConstStep<UInt8>(column_ptrs[0], column_ptrs[1], step, input_rows_count)) ||
                 (res = executeConstStep<UInt16>(column_ptrs[0], column_ptrs[1], step, input_rows_count)) ||
                 (res = executeConstStep<UInt32>(column_ptrs[0], column_ptrs[1], step, input_rows_count)) ||
-                (res = executeConstStep<UInt64>(column_ptrs[0], column_ptrs[1], step, input_rows_count))) {}
+                (res = executeConstStep<UInt64>(column_ptrs[0], column_ptrs[1], step, input_rows_count)))
+            {
+            }
         }
         else
         {
             if ((res = executeGeneric<UInt8>(column_ptrs[0], column_ptrs[1], column_ptrs[2], input_rows_count)) ||
                 (res = executeGeneric<UInt16>(column_ptrs[0], column_ptrs[1], column_ptrs[2], input_rows_count)) ||
                 (res = executeGeneric<UInt32>(column_ptrs[0], column_ptrs[1], column_ptrs[2], input_rows_count)) ||
-                (res = executeGeneric<UInt64>(column_ptrs[0], column_ptrs[1], column_ptrs[2], input_rows_count))) {}
+                (res = executeGeneric<UInt64>(column_ptrs[0], column_ptrs[1], column_ptrs[2], input_rows_count)))
+            {
+            }
         }
 
         if (!res)
