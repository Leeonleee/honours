You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Out of bounds with URL table
### Describe the bug

Easy to reproduce.

### How to reproduce

Start a Nginx server and run:

```sql
CREATE TABLE t0 (c0 Int) ENGINE = URL('http://localhost:80/', Npy);
INSERT INTO TABLE t0 (c0) VALUES (1); --Logical error
```

### Error message and/or stacktrace

Stack trace:

```
contrib/llvm-project/libcxx/include/vector:1436: assertion __n < size() failed: vector[] index out of bounds
2025.06.05 11:42:43.373020 [ 1865797 ] {} <Fatal> BaseDaemon: ########## Short fault info ############
2025.06.05 11:42:43.373071 [ 1865797 ] {} <Fatal> BaseDaemon: (version 25.6.1.1907 (official build), build id: 80E02E073D3D35088B12FAFC651E3EB26A1C7C79, git hash: 4cf7125836d25379f4ac7a313a4e47121362a32a, architecture: x86_64) (from thread 1865072) Received signal 6
2025.06.05 11:42:43.373090 [ 1865797 ] {} <Fatal> BaseDaemon: Signal description: Aborted
2025.06.05 11:42:43.373100 [ 1865797 ] {} <Fatal> BaseDaemon: 
2025.06.05 11:42:43.373119 [ 1865797 ] {} <Fatal> BaseDaemon: Stack trace: 0x00007d1069ca50bd 0x00007d1069c456de 0x00007d1069c288cd 0x0000652502e4797d 0x00006524fa189d00 0x00006524fa18bbe5 0x00006524f9fa8dd1 0x00006524f9601139 0x00006524f9601933 0x00006524fa3be9d3 0x00006524fa2ac974 0x00006524fa2ac783 0x00006524fa2ac29b 0x00006524fa040d30 0x00006524fa035386 0x00006524fa034bca 0x00006524fa0487ff 0x00006524f9f6da96 0x00006524f9f62fca 0x00006524f9f7c464 0x00006524fe3d2c47 0x00006524fe3d3145 0x00006524fe37b77f 0x00006524fe379331 0x00007d1069ca2ef1 0x00007d1069d3445c
2025.06.05 11:42:43.373138 [ 1865797 ] {} <Fatal> BaseDaemon: ########################################
2025.06.05 11:42:43.373215 [ 1865797 ] {} <Fatal> BaseDaemon: (version 25.6.1.1907 (official build), build id: 80E02E073D3D35088B12FAFC651E3EB26A1C7C79, git hash: 4cf7125836d25379f4ac7a313a4e47121362a32a) (from thread 1865072) (query_id: 30f2cd19-580e-495e-beee-1dfb01464d46) (query: INSERT INTO TABLE t0 (c0) VALUES ) Received signal Aborted (6)
2025.06.05 11:42:43.373247 [ 1865797 ] {} <Fatal> BaseDaemon: 
2025.06.05 11:42:43.373274 [ 1865797 ] {} <Fatal> BaseDaemon: Stack trace: 0x00007d1069ca50bd 0x00007d1069c456de 0x00007d1069c288cd 0x0000652502e4797d 0x00006524fa189d00 0x00006524fa18bbe5 0x00006524f9fa8dd1 0x00006524f9601139 0x00006524f9601933 0x00006524fa3be9d3 0x00006524fa2ac974 0x00006524fa2ac783 0x00006524fa2ac29b 0x00006524fa040d30 0x00006524fa035386 0x00006524fa034bca 0x00006524fa0487ff 0x00006524f9f6da96 0x00006524f9f62fca 0x00006524f9f7c464 0x00006524fe3d2c47 0x00006524fe3d3145 0x00006524fe37b77f 0x00006524fe379331 0x00007d1069ca2ef1 0x00007d1069d3445c
2025.06.05 11:42:43.373348 [ 1865797 ] {} <Fatal> BaseDaemon: 3. __pthread_kill @ 0x00000000000a50bd
2025.06.05 11:42:43.373378 [ 1865797 ] {} <Fatal> BaseDaemon: 4. __GI_raise @ 0x00000000000456de
2025.06.05 11:42:43.373402 [ 1865797 ] {} <Fatal> BaseDaemon: 5. abort @ 0x00000000000288cd
2025.06.05 11:42:43.377225 [ 1865797 ] {} <Fatal> BaseDaemon: 6. contrib/llvm-project/libcxx/src/verbose_abort.cpp:74: ? @ 0x0000000021dff97d
2025.06.05 11:42:43.388116 [ 1865797 ] {} <Fatal> BaseDaemon: 7.0. inlined from contrib/llvm-project/libcxx/include/vector:1436: std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>>::operator[][abi:se190107](unsigned long)
2025.06.05 11:42:43.388158 [ 1865797 ] {} <Fatal> BaseDaemon: 7. src/Processors/Formats/Impl/NpyOutputFormat.cpp:72: DB::NpyOutputFormat::NpyOutputFormat(DB::WriteBuffer&, DB::Block const&) @ 0x0000000019141d00
2025.06.05 11:42:43.401948 [ 1865797 ] {} <Fatal> BaseDaemon: 8.0. inlined from contrib/llvm-project/libcxx/include/__memory/construct_at.h:41: DB::NpyOutputFormat* std::construct_at[abi:se190107]<DB::NpyOutputFormat, DB::WriteBuffer&, DB::Block const&, DB::NpyOutputFormat*>(DB::NpyOutputFormat*, DB::WriteBuffer&, DB::Block const&)
2025.06.05 11:42:43.401996 [ 1865797 ] {} <Fatal> BaseDaemon: 8.1. inlined from contrib/llvm-project/libcxx/include/__memory/construct_at.h:49: DB::NpyOutputFormat* std::__construct_at[abi:se190107]<DB::NpyOutputFormat, DB::WriteBuffer&, DB::Block const&, DB::NpyOutputFormat*>(DB::NpyOutputFormat*, DB::WriteBuffer&, DB::Block const&)
2025.06.05 11:42:43.402047 [ 1865797 ] {} <Fatal> BaseDaemon: 8.2. inlined from contrib/llvm-project/libcxx/include/__memory/allocator_traits.h:328: void std::allocator_traits<std::allocator<DB::NpyOutputFormat>>::construct[abi:se190107]<DB::NpyOutputFormat, DB::WriteBuffer&, DB::Block const&, void, 0>(std::allocator<DB::NpyOutputFormat>&, DB::NpyOutputFormat*, DB::WriteBuffer&, DB::Block const&)
2025.06.05 11:42:43.402079 [ 1865797 ] {} <Fatal> BaseDaemon: 8.3. inlined from contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:264: __shared_ptr_emplace<DB::WriteBuffer &, const DB::Block &, std::allocator<DB::NpyOutputFormat>, 0>
2025.06.05 11:42:43.402111 [ 1865797 ] {} <Fatal> BaseDaemon: 8.4. inlined from contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:843: std::shared_ptr<DB::NpyOutputFormat> std::allocate_shared[abi:se190107]<DB::NpyOutputFormat, std::allocator<DB::NpyOutputFormat>, DB::WriteBuffer&, DB::Block const&, 0>(std::allocator<DB::NpyOutputFormat> const&, DB::WriteBuffer&, DB::Block const&)
2025.06.05 11:42:43.402133 [ 1865797 ] {} <Fatal> BaseDaemon: 8.5. inlined from contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:851: std::shared_ptr<DB::NpyOutputFormat> std::make_shared[abi:se190107]<DB::NpyOutputFormat, DB::WriteBuffer&, DB::Block const&, 0>(DB::WriteBuffer&, DB::Block const&)
2025.06.05 11:42:43.402154 [ 1865797 ] {} <Fatal> BaseDaemon: 8.6. inlined from src/Processors/Formats/Impl/NpyOutputFormat.cpp:264: operator()
2025.06.05 11:42:43.402194 [ 1865797 ] {} <Fatal> BaseDaemon: 8.7. inlined from contrib/llvm-project/libcxx/include/__type_traits/invoke.h:149: decltype(std::declval<DB::registerOutputFormatNpy(DB::FormatFactory&)::$_0&>()(std::declval<DB::WriteBuffer&>(), std::declval<DB::Block const&>(), std::declval<DB::FormatSettings const&>())) std::__invoke[abi:se190107]<DB::registerOutputFormatNpy(DB::FormatFactory&)::$_0&, DB::WriteBuffer&, DB::Block const&, DB::FormatSettings const&>(DB::registerOutputFormatNpy(DB::FormatFactory&)::$_0&, DB::WriteBuffer&, DB::Block const&, DB::FormatSettings const&)
2025.06.05 11:42:43.402234 [ 1865797 ] {} <Fatal> BaseDaemon: 8.8. inlined from contrib/llvm-project/libcxx/include/__type_traits/invoke.h:216: std::shared_ptr<DB::IOutputFormat> std::__invoke_void_return_wrapper<std::shared_ptr<DB::IOutputFormat>, false>::__call[abi:se190107]<DB::registerOutputFormatNpy(DB::FormatFactory&)::$_0&, DB::WriteBuffer&, DB::Block const&, DB::FormatSettings const&>(DB::registerOutputFormatNpy(DB::FormatFactory&)::$_0&, DB::WriteBuffer&, DB::Block const&, DB::FormatSettings const&)
2025.06.05 11:42:43.402264 [ 1865797 ] {} <Fatal> BaseDaemon: 8.9. inlined from contrib/llvm-project/libcxx/include/__functional/function.h:210: ?
2025.06.05 11:42:43.402300 [ 1865797 ] {} <Fatal> BaseDaemon: 8. contrib/llvm-project/libcxx/include/__functional/function.h:610: ? @ 0x0000000019143be5
2025.06.05 11:42:43.429694 [ 1865797 ] {} <Fatal> BaseDaemon: 9.0. inlined from contrib/llvm-project/libcxx/include/__functional/function.h:716: ?
2025.06.05 11:42:43.429742 [ 1865797 ] {} <Fatal> BaseDaemon: 9.1. inlined from contrib/llvm-project/libcxx/include/__functional/function.h:989: ?
2025.06.05 11:42:43.429783 [ 1865797 ] {} <Fatal> BaseDaemon: 9. src/Formats/FormatFactory.cpp:633: DB::FormatFactory::getContentType(String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&) const @ 0x0000000018f60dd1
2025.06.05 11:42:43.494664 [ 1865797 ] {} <Fatal> BaseDaemon: 10. src/Storages/StorageURL.cpp:627: DB::StorageURLSink::initBuffers() @ 0x00000000185b9139
2025.06.05 11:42:43.557102 [ 1865797 ] {} <Fatal> BaseDaemon: 11. src/Storages/StorageURL.cpp:657: DB::StorageURLSink::consume(DB::Chunk&) @ 0x00000000185b9933
2025.06.05 11:42:43.562020 [ 1865797 ] {} <Fatal> BaseDaemon: 12. src/Processors/Sinks/SinkToStorage.cpp:10: DB::SinkToStorage::onConsume(DB::Chunk) @ 0x00000000193769d3
2025.06.05 11:42:43.573445 [ 1865797 ] {} <Fatal> BaseDaemon: 13.0. inlined from src/Processors/Transforms/ExceptionKeepingTransform.cpp:134: operator()
2025.06.05 11:42:43.573490 [ 1865797 ] {} <Fatal> BaseDaemon: 13.1. inlined from contrib/llvm-project/libcxx/include/__type_traits/invoke.h:149: decltype(std::declval<DB::ExceptionKeepingTransform::work()::$_1&>()()) std::__invoke[abi:se190107]<DB::ExceptionKeepingTransform::work()::$_1&>(DB::ExceptionKeepingTransform::work()::$_1&)
2025.06.05 11:42:43.573550 [ 1865797 ] {} <Fatal> BaseDaemon: 13.2. inlined from contrib/llvm-project/libcxx/include/__type_traits/invoke.h:224: void std::__invoke_void_return_wrapper<void, true>::__call[abi:se190107]<DB::ExceptionKeepingTransform::work()::$_1&>(DB::ExceptionKeepingTransform::work()::$_1&)
2025.06.05 11:42:43.573587 [ 1865797 ] {} <Fatal> BaseDaemon: 13.3. inlined from contrib/llvm-project/libcxx/include/__functional/function.h:210: ?
2025.06.05 11:42:43.573616 [ 1865797 ] {} <Fatal> BaseDaemon: 13. contrib/llvm-project/libcxx/include/__functional/function.h:610: ? @ 0x0000000019264974
2025.06.05 11:42:43.585163 [ 1865797 ] {} <Fatal> BaseDaemon: 14.0. inlined from contrib/llvm-project/libcxx/include/__functional/function.h:716: ?
2025.06.05 11:42:43.585207 [ 1865797 ] {} <Fatal> BaseDaemon: 14.1. inlined from contrib/llvm-project/libcxx/include/__functional/function.h:989: ?
2025.06.05 11:42:43.585248 [ 1865797 ] {} <Fatal> BaseDaemon: 14. src/Processors/Transforms/ExceptionKeepingTransform.cpp:103: DB::runStep(std::function<void ()>, std::shared_ptr<DB::ThreadGroup>&) @ 0x0000000019264783
2025.06.05 11:42:43.591975 [ 1865797 ] {} <Fatal> BaseDaemon: 15. src/Processors/Transforms/ExceptionKeepingTransform.cpp:134: DB::ExceptionKeepingTransform::work() @ 0x000000001926429b
2025.06.05 11:42:43.596173 [ 1865797 ] {} <Fatal> BaseDaemon: 16.0. inlined from src/Processors/Executors/ExecutionThreadContext.cpp:53: DB::executeJob(DB::ExecutingGraph::Node*, DB::ReadProgressCallback*)
2025.06.05 11:42:43.596214 [ 1865797 ] {} <Fatal> BaseDaemon: 16. src/Processors/Executors/ExecutionThreadContext.cpp:102: DB::ExecutionThreadContext::executeTask() @ 0x0000000018ff8d30
2025.06.05 11:42:43.611173 [ 1865797 ] {} <Fatal> BaseDaemon: 17. src/Processors/Executors/PipelineExecutor.cpp:306: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000018fed386
2025.06.05 11:42:43.625739 [ 1865797 ] {} <Fatal> BaseDaemon: 18. src/Processors/Executors/PipelineExecutor.cpp:177: DB::PipelineExecutor::executeStep(std::atomic<bool>*) @ 0x0000000018fecbca
2025.06.05 11:42:43.633282 [ 1865797 ] {} <Fatal> BaseDaemon: 19. src/Processors/Executors/PushingPipelineExecutor.cpp:131: DB::PushingPipelineExecutor::finish() @ 0x00000000190007ff
2025.06.05 11:42:43.676034 [ 1865797 ] {} <Fatal> BaseDaemon: 20.0. inlined from src/Server/TCPHandler.cpp:1156: operator()<DB::PushingPipelineExecutor>
2025.06.05 11:42:43.676069 [ 1865797 ] {} <Fatal> BaseDaemon: 20. src/Server/TCPHandler.cpp:1231: DB::TCPHandler::processInsertQuery(DB::QueryState&) @ 0x0000000018f25a96
2025.06.05 11:42:43.705150 [ 1865797 ] {} <Fatal> BaseDaemon: 21. src/Server/TCPHandler.cpp:696: DB::TCPHandler::runImpl() @ 0x0000000018f1afca
2025.06.05 11:42:43.759840 [ 1865797 ] {} <Fatal> BaseDaemon: 22. src/Server/TCPHandler.cpp:2677: DB::TCPHandler::run() @ 0x0000000018f34464
2025.06.05 11:42:43.762165 [ 1865797 ] {} <Fatal> BaseDaemon: 23. base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x000000001d38ac47
2025.06.05 11:42:43.765533 [ 1865797 ] {} <Fatal> BaseDaemon: 24. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x000000001d38b145
2025.06.05 11:42:43.769032 [ 1865797 ] {} <Fatal> BaseDaemon: 25. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x000000001d33377f
2025.06.05 11:42:43.772437 [ 1865797 ] {} <Fatal> BaseDaemon: 26. base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001d331331
2025.06.05 11:42:43.772474 [ 1865797 ] {} <Fatal> BaseDaemon: 27. start_thread @ 0x00000000000a2ef1
2025.06.05 11:42:43.772495 [ 1865797 ] {} <Fatal> BaseDaemon: 28. __clone3 @ 0x000000000013445c
2025.06.05 11:42:43.948879 [ 1865797 ] {} <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: 16208F7073B083097D27A7AF1A9E6ADF)
2025.06.05 11:42:44.346790 [ 1865797 ] {} <Fatal> BaseDaemon: Report this error to https://github.com/ClickHouse/ClickHouse/issues
2025.06.05 11:42:44.346955 [ 1865797 ] {} <Fatal> BaseDaemon: Changed settings: s3_truncate_on_insert = true, allow_reorder_prewhere_conditions = true, allow_suspicious_low_cardinality_types = true, allow_suspicious_fixed_string_types = true, allow_suspicious_indices = true, allow_suspicious_ttl_expressions = true, allow_suspicious_variant_types = true, allow_suspicious_primary_key = true, allow_suspicious_types_in_group_by = true, allow_suspicious_types_in_order_by = true, allow_nonconst_timezone_arguments = true, allow_nondeterministic_optimize_skip_unused_shards = true, allow_distributed_ddl = true, allow_suspicious_codecs = true, enable_zstd_qat_codec = true, enable_deflate_qpl_codec = true, max_execution_time = 240., allow_custom_error_code_in_throwif = true, allow_ddl = true, allow_introspection_functions = true, allow_execute_multiif_columnar = true, allow_drop_detached = true, allow_materialized_view_with_bad_select = true, allow_settings_after_format_in_insert = true, allow_nondeterministic_mutations = true, allow_non_metadata_alters = true, allow_experimental_kafka_offsets_storage_in_keeper = true, engine_file_truncate_on_insert = true, allow_unrestricted_reads_from_keeper = true, allow_deprecated_database_ordinary = true, allow_deprecated_syntax_for_merge_tree = true, allow_get_client_http_header = true, allow_create_index_without_type = true, allow_named_collection_override_by_default = true, allow_deprecated_error_prone_window_functions = true, allow_deprecated_snowflake_conversion_functions = true, allow_experimental_parallel_reading_from_replicas = 1, parallel_replicas_for_non_replicated_merge_tree = true, allow_experimental_analyzer = true, allow_experimental_variant_type = true, allow_experimental_dynamic_type = true, allow_experimental_json_type = true, allow_archive_path_syntax = true, allow_experimental_materialized_postgresql_table = true, allow_experimental_funnel_functions = true, allow_experimental_nlp_functions = true, allow_experimental_hash_functions = true, allow_experimental_object_type = true, allow_experimental_time_series_table = true, allow_experimental_vector_similarity_index = true, allow_experimental_codecs = true, allow_experimental_join_right_table_sorting = true, allow_experimental_statistics = true, allow_experimental_inverted_index = true, allow_experimental_full_text_index = true, allow_experimental_join_condition = true, allow_experimental_live_view = true, allow_experimental_window_view = true, allow_experimental_database_materialized_postgresql = true, allow_experimental_bfloat16_type = true, allow_experimental_shared_set_join = true, type_json_skip_duplicated_paths = true
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
