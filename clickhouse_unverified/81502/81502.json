{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 81502,
  "instance_id": "ClickHouse__ClickHouse-81502",
  "issue_numbers": [
    "81356"
  ],
  "base_commit": "95616d3becc1acf7d4506b5172d2bb1f9a6ad7a4",
  "patch": "diff --git a/src/Formats/FormatFactory.cpp b/src/Formats/FormatFactory.cpp\nindex 58660c2edad2..d587a5b6d6b1 100644\n--- a/src/Formats/FormatFactory.cpp\n+++ b/src/Formats/FormatFactory.cpp\n@@ -617,22 +617,9 @@ OutputFormatPtr FormatFactory::getOutputFormat(\n     return format;\n }\n \n-String FormatFactory::getContentType(\n-    const String & name,\n-    const ContextPtr & context,\n-    const std::optional<FormatSettings> & _format_settings) const\n+String FormatFactory::getContentType(const String & name, const std::optional<FormatSettings> & settings) const\n {\n-    const auto & output_getter = getCreators(name).output_creator;\n-    if (!output_getter)\n-        throw Exception(ErrorCodes::FORMAT_IS_NOT_SUITABLE_FOR_OUTPUT, \"Format {} is not suitable for output\", name);\n-\n-    auto format_settings = _format_settings ? *_format_settings : getFormatSettings(context);\n-\n-    Block empty_block;\n-    WriteBufferFromOwnString empty_buffer;\n-    auto format = output_getter(empty_buffer, empty_block, format_settings);\n-\n-    return format->getContentType();\n+    return getCreators(name).content_type(settings);\n }\n \n SchemaReaderPtr FormatFactory::getSchemaReader(\n@@ -861,6 +848,16 @@ void FormatFactory::markOutputFormatNotTTYFriendly(const String & name)\n     target = false;\n }\n \n+void FormatFactory::setContentType(const String & name, const String & content_type)\n+{\n+    getOrCreateCreators(name).content_type = [=](const std::optional<FormatSettings> &){ return content_type; };\n+}\n+\n+void FormatFactory::setContentType(const String & name, ContentTypeGetter content_type)\n+{\n+    getOrCreateCreators(name).content_type = content_type;\n+}\n+\n bool FormatFactory::checkIfFormatSupportsSubsetOfColumns(const String & name, const ContextPtr & context, const std::optional<FormatSettings> & format_settings_) const\n {\n     const auto & target = getCreators(name);\ndiff --git a/src/Formats/FormatFactory.h b/src/Formats/FormatFactory.h\nindex 0f741f32d1fc..b308eab7738b 100644\n--- a/src/Formats/FormatFactory.h\n+++ b/src/Formats/FormatFactory.h\n@@ -114,6 +114,9 @@ class FormatFactory final : private boost::noncopyable\n     /// The checker should return true if format support append.\n     using AppendSupportChecker = std::function<bool(const FormatSettings & settings)>;\n \n+    /// Obtain HTTP content-type for the output format.\n+    using ContentTypeGetter = std::function<String(const std::optional<FormatSettings> & settings)>;\n+\n     using SchemaReaderCreator = std::function<SchemaReaderPtr(ReadBuffer & in, const FormatSettings & settings)>;\n     using ExternalSchemaReaderCreator = std::function<ExternalSchemaReaderPtr(const FormatSettings & settings)>;\n \n@@ -140,6 +143,7 @@ class FormatFactory final : private boost::noncopyable\n         bool supports_parallel_formatting{false};\n         bool prefers_large_blocks{false};\n         bool is_tty_friendly{true}; /// If false, client will ask before output in the terminal.\n+        ContentTypeGetter content_type = [](const std::optional<FormatSettings> &){ return \"text/plain; charset=UTF-8\"; };\n         NonTrivialPrefixAndSuffixChecker non_trivial_prefix_and_suffix_checker;\n         AppendSupportChecker append_support_checker;\n         AdditionalInfoForSchemaCacheGetter additional_info_for_schema_cache_getter;\n@@ -188,10 +192,8 @@ class FormatFactory final : private boost::noncopyable\n         const ContextPtr & context,\n         const std::optional<FormatSettings> & _format_settings = std::nullopt) const;\n \n-    String getContentType(\n-        const String & name,\n-        const ContextPtr & context,\n-        const std::optional<FormatSettings> & format_settings = std::nullopt) const;\n+    /// Content-Type to set when sending HTTP response with this output format.\n+    String getContentType(const String & name, const std::optional<FormatSettings> & settings) const;\n \n     SchemaReaderPtr getSchemaReader(\n         const String & name,\n@@ -238,6 +240,9 @@ class FormatFactory final : private boost::noncopyable\n     void markOutputFormatPrefersLargeBlocks(const String & name);\n     void markOutputFormatNotTTYFriendly(const String & name);\n \n+    void setContentType(const String & name, const String & content_type);\n+    void setContentType(const String & name, ContentTypeGetter content_type);\n+\n     void markFormatSupportsSubsetOfColumns(const String & name);\n     void registerSubsetOfColumnsSupportChecker(const String & name, SubsetOfColumnsSupportChecker subset_of_columns_support_checker);\n     bool checkIfFormatSupportsSubsetOfColumns(const String & name, const ContextPtr & context, const std::optional<FormatSettings> & format_settings_ = std::nullopt) const;\ndiff --git a/src/Formats/NativeWriter.h b/src/Formats/NativeWriter.h\nindex 7c93dd972179..535e86b86255 100644\n--- a/src/Formats/NativeWriter.h\n+++ b/src/Formats/NativeWriter.h\n@@ -33,8 +33,6 @@ class NativeWriter\n     size_t write(const Block & block);\n     void flush();\n \n-    static String getContentType() { return \"application/octet-stream\"; }\n-\n     static void writeData(const ISerialization & serialization, const ColumnPtr & column, WriteBuffer & ostr, const std::optional<FormatSettings> & format_settings, UInt64 offset, UInt64 limit, UInt64 client_revision);\n \n private:\ndiff --git a/src/IO/WriteBufferFromHTTP.h b/src/IO/WriteBufferFromHTTP.h\nindex cc38dbe9b516..a20754069785 100644\n--- a/src/IO/WriteBufferFromHTTP.h\n+++ b/src/IO/WriteBufferFromHTTP.h\n@@ -19,6 +19,7 @@ namespace DB\n class WriteBufferFromHTTP : public WriteBufferFromOStream\n {\n     friend class BuilderWriteBufferFromHTTP;\n+\n     explicit WriteBufferFromHTTP(const HTTPConnectionGroupType & connection_group,\n                                  const Poco::URI & uri,\n                                  const std::string & method = Poco::Net::HTTPRequest::HTTP_POST, // POST or PUT only\n@@ -42,6 +43,7 @@ class WriteBufferFromHTTP : public WriteBufferFromOStream\n \n class BuilderWriteBufferFromHTTP\n {\n+private:\n     Poco::URI uri;\n     HTTPConnectionGroupType connection_group;\n     std::string method = Poco::Net::HTTPRequest::HTTP_POST; // POST or PUT only\n@@ -54,7 +56,8 @@ class BuilderWriteBufferFromHTTP\n \n public:\n     explicit BuilderWriteBufferFromHTTP(const Poco::URI & uri_) : uri(uri_)\n-    {}\n+    {\n+    }\n \n /// NOLINTBEGIN(bugprone-macro-parentheses)\n #define setterMember(name, member) \\\ndiff --git a/src/Interpreters/executeQuery.cpp b/src/Interpreters/executeQuery.cpp\nindex 73125416d9ff..7d09841d1a82 100644\n--- a/src/Interpreters/executeQuery.cpp\n+++ b/src/Interpreters/executeQuery.cpp\n@@ -1828,7 +1828,7 @@ void executeQuery(\n                 if (output_format && output_format->supportsWritingException())\n                 {\n                     /// Force an update of the headers before we start writing\n-                    result_details.content_type = output_format->getContentType();\n+                    result_details.content_type = FormatFactory::instance().getContentType(format_name, output_format_settings);\n                     result_details.format = format_name;\n \n                     fiu_do_on(FailPoints::execute_query_calling_empty_set_result_func_on_exception,\n@@ -1964,7 +1964,7 @@ void executeQuery(\n                 output_format->onProgress(progress);\n             });\n \n-            result_details.content_type = output_format->getContentType();\n+            result_details.content_type = FormatFactory::instance().getContentType(format_name, output_format_settings);\n             result_details.format = format_name;\n \n             pipeline.complete(output_format);\ndiff --git a/src/Processors/Formats/IOutputFormat.h b/src/Processors/Formats/IOutputFormat.h\nindex 452cc992daec..aafa44885b1a 100644\n--- a/src/Processors/Formats/IOutputFormat.h\n+++ b/src/Processors/Formats/IOutputFormat.h\n@@ -54,9 +54,6 @@ class IOutputFormat : public IProcessor\n     /// Set initial progress values on initialization of the format, before it starts writing the data.\n     void setProgress(Progress progress);\n \n-    /// Content-Type to set when sending HTTP response.\n-    virtual std::string getContentType() const { return \"text/plain; charset=UTF-8\"; }\n-\n     InputPort & getPort(PortKind kind) { return *std::next(inputs.begin(), kind); }\n \n     /// Compatibility with old interface.\ndiff --git a/src/Processors/Formats/Impl/ArrowBlockOutputFormat.cpp b/src/Processors/Formats/Impl/ArrowBlockOutputFormat.cpp\nindex e5f8f52f3feb..7c2918d544be 100644\n--- a/src/Processors/Formats/Impl/ArrowBlockOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/ArrowBlockOutputFormat.cpp\n@@ -135,6 +135,7 @@ void registerOutputFormatArrow(FormatFactory & factory)\n         });\n     factory.markFormatHasNoAppendSupport(\"Arrow\");\n     factory.markOutputFormatNotTTYFriendly(\"Arrow\");\n+    factory.setContentType(\"Arrow\", \"application/octet-stream\");\n \n     factory.registerOutputFormat(\n         \"ArrowStream\",\n@@ -147,6 +148,7 @@ void registerOutputFormatArrow(FormatFactory & factory)\n     factory.markFormatHasNoAppendSupport(\"ArrowStream\");\n     factory.markOutputFormatPrefersLargeBlocks(\"ArrowStream\");\n     factory.markOutputFormatNotTTYFriendly(\"ArrowStream\");\n+    factory.setContentType(\"ArrowStream\", \"application/octet-stream\");\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/ArrowBlockOutputFormat.h b/src/Processors/Formats/Impl/ArrowBlockOutputFormat.h\nindex 3c9778426259..d9215df629d5 100644\n--- a/src/Processors/Formats/Impl/ArrowBlockOutputFormat.h\n+++ b/src/Processors/Formats/Impl/ArrowBlockOutputFormat.h\n@@ -20,9 +20,7 @@ class ArrowBlockOutputFormat : public IOutputFormat\n public:\n     ArrowBlockOutputFormat(WriteBuffer & out_, const Block & header_, bool stream_, const FormatSettings & format_settings_);\n \n-    String getName() const override { return \"ArrowBlockOutputFormat\"; }\n-\n-    String getContentType() const override { return \"application/octet-stream\"; }\n+    String getName() const override { return \"Arrow\"; }\n \n private:\n     void consume(Chunk) override;\ndiff --git a/src/Processors/Formats/Impl/AvroRowOutputFormat.cpp b/src/Processors/Formats/Impl/AvroRowOutputFormat.cpp\nindex ce1c61c6a48a..27ec99e70eea 100644\n--- a/src/Processors/Formats/Impl/AvroRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/AvroRowOutputFormat.cpp\n@@ -637,6 +637,7 @@ void registerOutputFormatAvro(FormatFactory & factory)\n     });\n     factory.markFormatHasNoAppendSupport(\"Avro\");\n     factory.markOutputFormatNotTTYFriendly(\"Avro\");\n+    factory.setContentType(\"Avro\", \"application/octet-stream\");\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/BSONEachRowRowOutputFormat.cpp b/src/Processors/Formats/Impl/BSONEachRowRowOutputFormat.cpp\nindex db682d45bdd3..47c1516d3dcc 100644\n--- a/src/Processors/Formats/Impl/BSONEachRowRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/BSONEachRowRowOutputFormat.cpp\n@@ -546,6 +546,7 @@ void registerOutputFormatBSONEachRow(FormatFactory & factory)\n         { return std::make_shared<BSONEachRowRowOutputFormat>(buf, sample, _format_settings); });\n     factory.markOutputFormatSupportsParallelFormatting(\"BSONEachRow\");\n     factory.markOutputFormatNotTTYFriendly(\"BSONEachRow\");\n+    factory.setContentType(\"BSONEachRow\", \"application/octet-stream\");\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/BinaryRowOutputFormat.cpp b/src/Processors/Formats/Impl/BinaryRowOutputFormat.cpp\nindex 061bfb87fa7a..36ebecf7e4bc 100644\n--- a/src/Processors/Formats/Impl/BinaryRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/BinaryRowOutputFormat.cpp\n@@ -75,6 +75,9 @@ void registerOutputFormatRowBinary(FormatFactory & factory)\n     factory.markOutputFormatNotTTYFriendly(\"RowBinary\");\n     factory.markOutputFormatNotTTYFriendly(\"RowBinaryWithNames\");\n     factory.markOutputFormatNotTTYFriendly(\"RowBinaryWithNamesAndTypes\");\n+    factory.setContentType(\"RowBinary\", \"application/octet-stream\");\n+    factory.setContentType(\"RowBinaryWithNames\", \"application/octet-stream\");\n+    factory.setContentType(\"RowBinaryWithNamesAndTypes\", \"application/octet-stream\");\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/BinaryRowOutputFormat.h b/src/Processors/Formats/Impl/BinaryRowOutputFormat.h\nindex 1bad305ac5b1..79e23fcb20d1 100644\n--- a/src/Processors/Formats/Impl/BinaryRowOutputFormat.h\n+++ b/src/Processors/Formats/Impl/BinaryRowOutputFormat.h\n@@ -20,8 +20,6 @@ class BinaryRowOutputFormat final: public IRowOutputFormat\n \n     String getName() const override { return \"BinaryRowOutputFormat\"; }\n \n-    String getContentType() const override { return \"application/octet-stream\"; }\n-\n private:\n     void writeField(const IColumn & column, const ISerialization & serialization, size_t row_num) override;\n     void writePrefix() override;\ndiff --git a/src/Processors/Formats/Impl/CSVRowOutputFormat.cpp b/src/Processors/Formats/Impl/CSVRowOutputFormat.cpp\nindex 7c3192e91f13..d87ec8218045 100644\n--- a/src/Processors/Formats/Impl/CSVRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/CSVRowOutputFormat.cpp\n@@ -85,6 +85,8 @@ void registerOutputFormatCSV(FormatFactory & factory)\n             return std::make_shared<CSVRowOutputFormat>(buf, sample, with_names, with_types, format_settings);\n         });\n         factory.markOutputFormatSupportsParallelFormatting(format_name);\n+        /// https://www.iana.org/assignments/media-types/text/csv\n+        factory.setContentType(format_name, String(\"text/csv; charset=UTF-8; header=\") + (with_names ? \"present\" : \"absent\"));\n     };\n \n     registerWithNamesAndTypes(\"CSV\", register_func);\ndiff --git a/src/Processors/Formats/Impl/CSVRowOutputFormat.h b/src/Processors/Formats/Impl/CSVRowOutputFormat.h\nindex 35acacafe1b6..852e64d457da 100644\n--- a/src/Processors/Formats/Impl/CSVRowOutputFormat.h\n+++ b/src/Processors/Formats/Impl/CSVRowOutputFormat.h\n@@ -22,13 +22,7 @@ class CSVRowOutputFormat final : public IRowOutputFormat\n       */\n     CSVRowOutputFormat(WriteBuffer & out_, const Block & header_, bool with_names_, bool with_types, const FormatSettings & format_settings_);\n \n-    String getName() const override { return \"CSVRowOutputFormat\"; }\n-\n-    /// https://www.iana.org/assignments/media-types/text/csv\n-    String getContentType() const override\n-    {\n-        return String(\"text/csv; charset=UTF-8; header=\") + (with_names ? \"present\" : \"absent\");\n-    }\n+    String getName() const override { return \"CSV\"; }\n \n private:\n     void writeField(const IColumn & column, const ISerialization & serialization, size_t row_num) override;\ndiff --git a/src/Processors/Formats/Impl/CapnProtoRowOutputFormat.cpp b/src/Processors/Formats/Impl/CapnProtoRowOutputFormat.cpp\nindex e98c5cecfba8..3884c59a1134 100644\n--- a/src/Processors/Formats/Impl/CapnProtoRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/CapnProtoRowOutputFormat.cpp\n@@ -62,6 +62,7 @@ void registerOutputFormatCapnProto(FormatFactory & factory)\n                 format_settings);\n     });\n     factory.markOutputFormatNotTTYFriendly(\"CapnProto\");\n+    factory.setContentType(\"CapnProto\", \"application/octet-stream\");\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/JSONColumnsBlockOutputFormat.cpp b/src/Processors/Formats/Impl/JSONColumnsBlockOutputFormat.cpp\nindex 3c0a77e43791..03e183ce30ef 100644\n--- a/src/Processors/Formats/Impl/JSONColumnsBlockOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/JSONColumnsBlockOutputFormat.cpp\n@@ -51,6 +51,8 @@ void registerOutputFormatJSONColumns(FormatFactory & factory)\n     {\n         return std::make_shared<JSONColumnsBlockOutputFormat>(buf, sample, format_settings, format_settings.json.validate_utf8);\n     });\n+\n+    factory.setContentType(\"JSONColumns\", \"application/json; charset=UTF-8\");\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/JSONColumnsWithMetadataBlockOutputFormat.cpp b/src/Processors/Formats/Impl/JSONColumnsWithMetadataBlockOutputFormat.cpp\nindex edee669a8dd6..36ec195984c8 100644\n--- a/src/Processors/Formats/Impl/JSONColumnsWithMetadataBlockOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/JSONColumnsWithMetadataBlockOutputFormat.cpp\n@@ -112,6 +112,7 @@ void registerOutputFormatJSONColumnsWithMetadata(FormatFactory & factory)\n     });\n \n     factory.markFormatHasNoAppendSupport(\"JSONColumnsWithMetadata\");\n+    factory.setContentType(\"JSONColumnsWithMetadata\", \"application/json; charset=UTF-8\");\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/JSONCompactColumnsBlockOutputFormat.cpp b/src/Processors/Formats/Impl/JSONCompactColumnsBlockOutputFormat.cpp\nindex 54031e22091a..52d1927cfb87 100644\n--- a/src/Processors/Formats/Impl/JSONCompactColumnsBlockOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/JSONCompactColumnsBlockOutputFormat.cpp\n@@ -37,6 +37,7 @@ void registerOutputFormatJSONCompactColumns(FormatFactory & factory)\n     {\n         return std::make_shared<JSONCompactColumnsBlockOutputFormat>(buf, sample, format_settings);\n     });\n+    factory.setContentType(\"JSONCompactColumns\", \"application/json; charset=UTF-8\");\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/JSONCompactEachRowWithProgressRowOutputFormat.cpp b/src/Processors/Formats/Impl/JSONCompactEachRowWithProgressRowOutputFormat.cpp\nindex 4bce5573b1a6..3970be4a54e5 100644\n--- a/src/Processors/Formats/Impl/JSONCompactEachRowWithProgressRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/JSONCompactEachRowWithProgressRowOutputFormat.cpp\n@@ -117,6 +117,8 @@ void registerOutputFormatJSONCompactEachRowWithProgress(FormatFactory & factory)\n         return std::make_shared<JSONCompactEachRowWithProgressRowOutputFormat>(buf, sample, settings, false, false);\n     });\n \n+    factory.setContentType(\"JSONCompactEachRowWithProgress\", \"application/json; charset=UTF-8\");\n+\n     factory.registerOutputFormat(\"JSONCompactStringsEachRowWithProgress\", [](\n             WriteBuffer & buf,\n             const Block & sample,\n@@ -126,6 +128,8 @@ void registerOutputFormatJSONCompactEachRowWithProgress(FormatFactory & factory)\n         settings.json.serialize_as_strings = true;\n         return std::make_shared<JSONCompactEachRowWithProgressRowOutputFormat>(buf, sample, settings, false, false);\n     });\n+\n+    factory.setContentType(\"JSONCompactStringsEachRowWithProgress\", \"application/json; charset=UTF-8\");\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/JSONCompactRowOutputFormat.cpp b/src/Processors/Formats/Impl/JSONCompactRowOutputFormat.cpp\nindex a54f01473062..05d7d62dbd4f 100644\n--- a/src/Processors/Formats/Impl/JSONCompactRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/JSONCompactRowOutputFormat.cpp\n@@ -76,6 +76,7 @@ void registerOutputFormatJSONCompact(FormatFactory & factory)\n     });\n \n     factory.markOutputFormatSupportsParallelFormatting(\"JSONCompact\");\n+    factory.setContentType(\"JSONCompact\", \"application/json; charset=UTF-8\");\n \n     factory.registerOutputFormat(\"JSONCompactStrings\", [](\n         WriteBuffer & buf,\n@@ -86,6 +87,7 @@ void registerOutputFormatJSONCompact(FormatFactory & factory)\n     });\n \n     factory.markOutputFormatSupportsParallelFormatting(\"JSONCompactStrings\");\n+    factory.setContentType(\"JSONCompactStrings\", \"application/json; charset=UTF-8\");\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/JSONEachRowRowOutputFormat.cpp b/src/Processors/Formats/Impl/JSONEachRowRowOutputFormat.cpp\nindex f957f922d64e..e659e5f9e23e 100644\n--- a/src/Processors/Formats/Impl/JSONEachRowRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/JSONEachRowRowOutputFormat.cpp\n@@ -112,6 +112,10 @@ void registerOutputFormatJSONEachRow(FormatFactory & factory)\n             return std::make_shared<JSONEachRowRowOutputFormat>(buf, sample, settings, pretty_json);\n         });\n         factory.markOutputFormatSupportsParallelFormatting(format);\n+        factory.setContentType(format, [](const std::optional<FormatSettings> & settings)\n+        {\n+            return settings && settings->json.array_of_rows ? \"application/json; charset=UTF-8\" : \"application/x-ndjson; charset=UTF-8\";\n+        });\n     };\n \n     register_function(\"JSONEachRow\", false, false);\ndiff --git a/src/Processors/Formats/Impl/JSONEachRowRowOutputFormat.h b/src/Processors/Formats/Impl/JSONEachRowRowOutputFormat.h\nindex 417e95acbbf5..67c4f02b3586 100644\n--- a/src/Processors/Formats/Impl/JSONEachRowRowOutputFormat.h\n+++ b/src/Processors/Formats/Impl/JSONEachRowRowOutputFormat.h\n@@ -25,12 +25,6 @@ class JSONEachRowRowOutputFormat : public RowOutputFormatWithExceptionHandlerAda\n \n     String getName() const override { return \"JSONEachRowRowOutputFormat\"; }\n \n-    /// Content-Type to set when sending HTTP response.\n-    String getContentType() const override\n-    {\n-        return settings.json.array_of_rows ? \"application/json; charset=UTF-8\" : \"application/x-ndjson; charset=UTF-8\" ;\n-    }\n-\n protected:\n     void writeField(const IColumn & column, const ISerialization & serialization, size_t row_num) override;\n     void writeFieldDelimiter() override;\ndiff --git a/src/Processors/Formats/Impl/JSONEachRowWithProgressRowOutputFormat.cpp b/src/Processors/Formats/Impl/JSONEachRowWithProgressRowOutputFormat.cpp\nindex 9ec1f6fddeb1..5b5074b57992 100644\n--- a/src/Processors/Formats/Impl/JSONEachRowWithProgressRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/JSONEachRowWithProgressRowOutputFormat.cpp\n@@ -118,6 +118,7 @@ void registerOutputFormatJSONEachRowWithProgress(FormatFactory & factory)\n         settings.json.serialize_as_strings = false;\n         return std::make_shared<JSONEachRowWithProgressRowOutputFormat>(buf, sample, settings);\n     });\n+    factory.setContentType(\"JSONEachRowWithProgress\", \"application/json; charset=UTF-8\");\n \n     factory.registerOutputFormat(\"JSONStringsEachRowWithProgress\", [](\n             WriteBuffer & buf,\n@@ -128,6 +129,7 @@ void registerOutputFormatJSONEachRowWithProgress(FormatFactory & factory)\n         settings.json.serialize_as_strings = true;\n         return std::make_shared<JSONEachRowWithProgressRowOutputFormat>(buf, sample, settings);\n     });\n+    factory.setContentType(\"JSONStringsEachRowWithProgress\", \"application/json; charset=UTF-8\");\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/JSONObjectEachRowRowOutputFormat.cpp b/src/Processors/Formats/Impl/JSONObjectEachRowRowOutputFormat.cpp\nindex 9e5c6e7cfe6a..40ddb3d53781 100644\n--- a/src/Processors/Formats/Impl/JSONObjectEachRowRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/JSONObjectEachRowRowOutputFormat.cpp\n@@ -89,6 +89,7 @@ void registerOutputFormatJSONObjectEachRow(FormatFactory & factory)\n     });\n     factory.markOutputFormatSupportsParallelFormatting(\"JSONObjectEachRow\");\n     factory.markFormatHasNoAppendSupport(\"JSONObjectEachRow\");\n+    factory.setContentType(\"JSONObjectEachRow\", \"application/json; charset=UTF-8\");\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/JSONRowOutputFormat.cpp b/src/Processors/Formats/Impl/JSONRowOutputFormat.cpp\nindex 99c3bb4e6570..52357ab548a7 100644\n--- a/src/Processors/Formats/Impl/JSONRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/JSONRowOutputFormat.cpp\n@@ -158,6 +158,7 @@ void registerOutputFormatJSON(FormatFactory & factory)\n \n     factory.markOutputFormatSupportsParallelFormatting(\"JSON\");\n     factory.markFormatHasNoAppendSupport(\"JSON\");\n+    factory.setContentType(\"JSON\", \"application/json; charset=UTF-8\");\n \n     factory.registerOutputFormat(\"JSONStrings\", [](\n         WriteBuffer & buf,\n@@ -169,6 +170,7 @@ void registerOutputFormatJSON(FormatFactory & factory)\n \n     factory.markOutputFormatSupportsParallelFormatting(\"JSONStrings\");\n     factory.markFormatHasNoAppendSupport(\"JSONStrings\");\n+    factory.setContentType(\"JSONStrings\", \"application/json; charset=UTF-8\");\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/JSONRowOutputFormat.h b/src/Processors/Formats/Impl/JSONRowOutputFormat.h\nindex 35bc0f1d36aa..5373d5f1ea52 100644\n--- a/src/Processors/Formats/Impl/JSONRowOutputFormat.h\n+++ b/src/Processors/Formats/Impl/JSONRowOutputFormat.h\n@@ -24,8 +24,6 @@ class JSONRowOutputFormat : public RowOutputFormatWithExceptionHandlerAdaptor<Ro\n \n     String getName() const override { return \"JSONRowOutputFormat\"; }\n \n-    String getContentType() const override { return \"application/json; charset=UTF-8\"; }\n-\n     void setRowsBeforeLimit(size_t rows_before_limit_) override\n     {\n         statistics.applied_limit = true;\ndiff --git a/src/Processors/Formats/Impl/MsgPackRowOutputFormat.cpp b/src/Processors/Formats/Impl/MsgPackRowOutputFormat.cpp\nindex ce60674cdaeb..cc9db8f85294 100644\n--- a/src/Processors/Formats/Impl/MsgPackRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/MsgPackRowOutputFormat.cpp\n@@ -310,6 +310,7 @@ void registerOutputFormatMsgPack(FormatFactory & factory)\n     });\n     factory.markOutputFormatSupportsParallelFormatting(\"MsgPack\");\n     factory.markOutputFormatNotTTYFriendly(\"MsgPack\");\n+    factory.setContentType(\"MsgPack\", \"application/octet-stream\");\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/MySQLOutputFormat.cpp b/src/Processors/Formats/Impl/MySQLOutputFormat.cpp\nindex af61a0cac251..e3cbbc30828c 100644\n--- a/src/Processors/Formats/Impl/MySQLOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/MySQLOutputFormat.cpp\n@@ -146,6 +146,7 @@ void registerOutputFormatMySQLWire(FormatFactory & factory)\n            const Block & sample,\n            const FormatSettings & settings) { return std::make_shared<MySQLOutputFormat>(buf, sample, settings); });\n     factory.markOutputFormatNotTTYFriendly(\"MySQLWire\");\n+    factory.setContentType(\"MySQLWire\", \"application/octet-stream\");\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/NativeFormat.cpp b/src/Processors/Formats/Impl/NativeFormat.cpp\nindex f473a0554ab3..3553e43e807e 100644\n--- a/src/Processors/Formats/Impl/NativeFormat.cpp\n+++ b/src/Processors/Formats/Impl/NativeFormat.cpp\n@@ -83,11 +83,6 @@ class NativeOutputFormat final : public IOutputFormat\n \n     String getName() const override { return \"Native\"; }\n \n-    std::string getContentType() const override\n-    {\n-        return NativeWriter::getContentType();\n-    }\n-\n protected:\n     void consume(Chunk chunk) override\n     {\n@@ -143,6 +138,7 @@ void registerOutputFormatNative(FormatFactory & factory)\n         return std::make_shared<NativeOutputFormat>(buf, sample, settings, settings.client_protocol_version);\n     });\n     factory.markOutputFormatNotTTYFriendly(\"Native\");\n+    factory.setContentType(\"Native\", \"application/octet-stream\");\n }\n \n \ndiff --git a/src/Processors/Formats/Impl/NpyOutputFormat.cpp b/src/Processors/Formats/Impl/NpyOutputFormat.cpp\nindex 1b16dbf45096..93d7bd01d23a 100644\n--- a/src/Processors/Formats/Impl/NpyOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/NpyOutputFormat.cpp\n@@ -67,7 +67,7 @@ NpyOutputFormat::NpyOutputFormat(WriteBuffer & out_, const Block & header_) : IO\n {\n     const auto & header = getPort(PortKind::Main).getHeader();\n     auto data_types = header.getDataTypes();\n-    if (data_types.size() > 1)\n+    if (data_types.size() != 1)\n         throw Exception(ErrorCodes::TOO_MANY_COLUMNS, \"Expected single column for Npy output format, got {}\", data_types.size());\n     data_type = data_types[0];\n \n@@ -265,6 +265,7 @@ void registerOutputFormatNpy(FormatFactory & factory)\n     });\n     factory.markFormatHasNoAppendSupport(\"Npy\");\n     factory.markOutputFormatNotTTYFriendly(\"Npy\");\n+    factory.setContentType(\"Npy\", \"application/octet-stream\");\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/NpyOutputFormat.h b/src/Processors/Formats/Impl/NpyOutputFormat.h\nindex 279ebf74644c..77a0b3803b35 100644\n--- a/src/Processors/Formats/Impl/NpyOutputFormat.h\n+++ b/src/Processors/Formats/Impl/NpyOutputFormat.h\n@@ -20,8 +20,6 @@ class NpyOutputFormat : public IOutputFormat\n \n     String getName() const override { return \"NpyOutputFormat\"; }\n \n-    String getContentType() const override { return \"application/octet-stream\"; }\n-\n private:\n     String shapeStr() const;\n \ndiff --git a/src/Processors/Formats/Impl/ODBCDriver2BlockOutputFormat.cpp b/src/Processors/Formats/Impl/ODBCDriver2BlockOutputFormat.cpp\nindex 3b46d6cd4738..309673d1051c 100644\n--- a/src/Processors/Formats/Impl/ODBCDriver2BlockOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/ODBCDriver2BlockOutputFormat.cpp\n@@ -103,6 +103,7 @@ void registerOutputFormatODBCDriver2(FormatFactory & factory)\n             return std::make_shared<ODBCDriver2BlockOutputFormat>(buf, sample, format_settings);\n         });\n     factory.markOutputFormatNotTTYFriendly(\"ODBCDriver2\");\n+    factory.setContentType(\"ODBCDriver2\", \"application/octet-stream\");\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/ODBCDriver2BlockOutputFormat.h b/src/Processors/Formats/Impl/ODBCDriver2BlockOutputFormat.h\nindex 5d22354c819c..2488767c8b3f 100644\n--- a/src/Processors/Formats/Impl/ODBCDriver2BlockOutputFormat.h\n+++ b/src/Processors/Formats/Impl/ODBCDriver2BlockOutputFormat.h\n@@ -22,12 +22,7 @@ class ODBCDriver2BlockOutputFormat final : public IOutputFormat\n public:\n     ODBCDriver2BlockOutputFormat(WriteBuffer & out_, const Block & header_, const FormatSettings & format_settings_);\n \n-    String getName() const override { return \"ODBCDriver2BlockOutputFormat\"; }\n-\n-    std::string getContentType() const override\n-    {\n-        return \"application/octet-stream\";\n-    }\n+    String getName() const override { return \"ODBCDriver2\"; }\n \n private:\n     void consume(Chunk) override;\ndiff --git a/src/Processors/Formats/Impl/ORCBlockOutputFormat.cpp b/src/Processors/Formats/Impl/ORCBlockOutputFormat.cpp\nindex 52d5029b0a8a..bb37dd02401c 100644\n--- a/src/Processors/Formats/Impl/ORCBlockOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/ORCBlockOutputFormat.cpp\n@@ -589,6 +589,7 @@ void registerOutputFormatORC(FormatFactory & factory)\n     factory.markFormatHasNoAppendSupport(\"ORC\");\n     factory.markOutputFormatPrefersLargeBlocks(\"ORC\");\n     factory.markOutputFormatNotTTYFriendly(\"ORC\");\n+    factory.setContentType(\"ORC\", \"application/octet-stream\");\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/ParallelFormattingOutputFormat.h b/src/Processors/Formats/Impl/ParallelFormattingOutputFormat.h\nindex ef6ad5da47b4..ffa1de583130 100644\n--- a/src/Processors/Formats/Impl/ParallelFormattingOutputFormat.h\n+++ b/src/Processors/Formats/Impl/ParallelFormattingOutputFormat.h\n@@ -137,12 +137,6 @@ class ParallelFormattingOutputFormat : public IOutputFormat\n         started_suffix = true;\n     }\n \n-    String getContentType() const override\n-    {\n-        NullWriteBuffer buffer;\n-        return internal_formatter_creator(buffer)->getContentType();\n-    }\n-\n     bool supportsWritingException() const override\n     {\n         NullWriteBuffer buffer;\ndiff --git a/src/Processors/Formats/Impl/ParquetBlockOutputFormat.cpp b/src/Processors/Formats/Impl/ParquetBlockOutputFormat.cpp\nindex f72777a36461..fbe556540ee6 100644\n--- a/src/Processors/Formats/Impl/ParquetBlockOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/ParquetBlockOutputFormat.cpp\n@@ -592,6 +592,7 @@ void registerOutputFormatParquet(FormatFactory & factory)\n         });\n     factory.markFormatHasNoAppendSupport(\"Parquet\");\n     factory.markOutputFormatNotTTYFriendly(\"Parquet\");\n+    factory.setContentType(\"Parquet\", \"application/octet-stream\");\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/ParquetBlockOutputFormat.h b/src/Processors/Formats/Impl/ParquetBlockOutputFormat.h\nindex 4763763d9937..716e2cf980bf 100644\n--- a/src/Processors/Formats/Impl/ParquetBlockOutputFormat.h\n+++ b/src/Processors/Formats/Impl/ParquetBlockOutputFormat.h\n@@ -35,8 +35,6 @@ class ParquetBlockOutputFormat : public IOutputFormat\n \n     String getName() const override { return \"ParquetBlockOutputFormat\"; }\n \n-    String getContentType() const override { return \"application/octet-stream\"; }\n-\n private:\n     struct MemoryToken\n     {\ndiff --git a/src/Processors/Formats/Impl/PostgreSQLOutputFormat.cpp b/src/Processors/Formats/Impl/PostgreSQLOutputFormat.cpp\nindex 6b9b93e97700..0f7da266b5d4 100644\n--- a/src/Processors/Formats/Impl/PostgreSQLOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/PostgreSQLOutputFormat.cpp\n@@ -73,6 +73,7 @@ void registerOutputFormatPostgreSQLWire(FormatFactory & factory)\n            const Block & sample,\n            const FormatSettings & settings) { return std::make_shared<PostgreSQLOutputFormat>(buf, sample, settings); });\n     factory.markOutputFormatNotTTYFriendly(\"PostgreSQLWire\");\n+    factory.setContentType(\"PostgreSQLWire\", \"application/octet-stream\");\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/PrometheusTextOutputFormat.cpp b/src/Processors/Formats/Impl/PrometheusTextOutputFormat.cpp\nindex 54acfa917000..1977599e7939 100644\n--- a/src/Processors/Formats/Impl/PrometheusTextOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/PrometheusTextOutputFormat.cpp\n@@ -352,6 +352,9 @@ void registerOutputFormatPrometheus(FormatFactory & factory)\n     {\n         return std::make_shared<PrometheusTextOutputFormat>(buf, sample, settings);\n     });\n+\n+    /// https://github.com/prometheus/docs/blob/86386ed25bc8a5309492483ec7d18d0914043162/content/docs/instrumenting/exposition_formats.md\n+    factory.setContentType(FORMAT_NAME, \"text/plain; version=0.0.4; charset=UTF-8\");\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/PrometheusTextOutputFormat.h b/src/Processors/Formats/Impl/PrometheusTextOutputFormat.h\nindex 116121f5b958..a00f48d0f624 100644\n--- a/src/Processors/Formats/Impl/PrometheusTextOutputFormat.h\n+++ b/src/Processors/Formats/Impl/PrometheusTextOutputFormat.h\n@@ -22,9 +22,6 @@ class PrometheusTextOutputFormat : public IRowOutputFormat\n \n     String getName() const override { return \"PrometheusTextOutputFormat\"; }\n \n-    /// https://github.com/prometheus/docs/blob/86386ed25bc8a5309492483ec7d18d0914043162/content/docs/instrumenting/exposition_formats.md\n-    String getContentType() const override { return \"text/plain; version=0.0.4; charset=UTF-8\"; }\n-\n protected:\n \n     struct ColumnPositions\ndiff --git a/src/Processors/Formats/Impl/ProtobufListOutputFormat.cpp b/src/Processors/Formats/Impl/ProtobufListOutputFormat.cpp\nindex 90ff9ba6a153..2d197f30614f 100644\n--- a/src/Processors/Formats/Impl/ProtobufListOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/ProtobufListOutputFormat.cpp\n@@ -63,6 +63,7 @@ void registerOutputFormatProtobufList(FormatFactory & factory)\n                 settings.protobuf.google_protos_path);\n         });\n     factory.markOutputFormatNotTTYFriendly(\"ProtobufList\");\n+    factory.setContentType(\"ProtobufList\", \"application/octet-stream\");\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/ProtobufListOutputFormat.h b/src/Processors/Formats/Impl/ProtobufListOutputFormat.h\nindex 922ffafcc781..a8b9c7bce4ff 100644\n--- a/src/Processors/Formats/Impl/ProtobufListOutputFormat.h\n+++ b/src/Processors/Formats/Impl/ProtobufListOutputFormat.h\n@@ -31,9 +31,7 @@ class ProtobufListOutputFormat final : public IRowOutputFormat\n         bool defaults_for_nullable_google_wrappers_,\n         const String & google_protos_path);\n \n-    String getName() const override { return \"ProtobufListOutputFormat\"; }\n-\n-    String getContentType() const override { return \"application/octet-stream\"; }\n+    String getName() const override { return \"ProtobufList\"; }\n \n private:\n     void write(const Columns & columns, size_t row_num) override;\ndiff --git a/src/Processors/Formats/Impl/ProtobufRowOutputFormat.cpp b/src/Processors/Formats/Impl/ProtobufRowOutputFormat.cpp\nindex eaad782da270..71dd73bb4fc6 100644\n--- a/src/Processors/Formats/Impl/ProtobufRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/ProtobufRowOutputFormat.cpp\n@@ -69,6 +69,7 @@ void registerOutputFormatProtobuf(FormatFactory & factory)\n                     settings, with_length_delimiter);\n             });\n         factory.markOutputFormatNotTTYFriendly(name);\n+        factory.setContentType(name, \"application/octet-stream\");\n     }\n }\n \ndiff --git a/src/Processors/Formats/Impl/ProtobufRowOutputFormat.h b/src/Processors/Formats/Impl/ProtobufRowOutputFormat.h\nindex 72c5eced9fdc..5b386cda678d 100644\n--- a/src/Processors/Formats/Impl/ProtobufRowOutputFormat.h\n+++ b/src/Processors/Formats/Impl/ProtobufRowOutputFormat.h\n@@ -36,8 +36,6 @@ class ProtobufRowOutputFormat final : public IRowOutputFormat\n \n     String getName() const override { return \"ProtobufRowOutputFormat\"; }\n \n-    std::string getContentType() const override { return \"application/octet-stream\"; }\n-\n private:\n     void write(const Columns & columns, size_t row_num) override;\n     void writeField(const IColumn &, const ISerialization &, size_t) override {}\ndiff --git a/src/Processors/Formats/Impl/SQLInsertRowOutputFormat.cpp b/src/Processors/Formats/Impl/SQLInsertRowOutputFormat.cpp\nindex ac74f8736d3e..ddc2a02c5ec3 100644\n--- a/src/Processors/Formats/Impl/SQLInsertRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/SQLInsertRowOutputFormat.cpp\n@@ -102,6 +102,8 @@ void registerOutputFormatSQLInsert(FormatFactory & factory)\n     {\n         return std::make_shared<SQLInsertRowOutputFormat>(buf, sample, settings);\n     });\n+\n+    factory.setContentType(\"SQLInsert\", \"text/plain; charset=UTF-8\");\n }\n \n \ndiff --git a/src/Processors/Formats/Impl/SQLInsertRowOutputFormat.h b/src/Processors/Formats/Impl/SQLInsertRowOutputFormat.h\nindex 55b2d072af65..775f24e79eaf 100644\n--- a/src/Processors/Formats/Impl/SQLInsertRowOutputFormat.h\n+++ b/src/Processors/Formats/Impl/SQLInsertRowOutputFormat.h\n@@ -19,9 +19,6 @@ class SQLInsertRowOutputFormat : public IRowOutputFormat\n \n     String getName() const override { return \"SQLInsertRowOutputFormat\"; }\n \n-    /// https://www.iana.org/assignments/media-types/text/tab-separated-values\n-    String getContentType() const override { return \"text/tab-separated-values; charset=UTF-8\"; }\n-\n protected:\n     void writeField(const IColumn & column, const ISerialization & serialization, size_t row_num) override;\n     void writeFieldDelimiter() override;\ndiff --git a/src/Processors/Formats/Impl/TSKVRowOutputFormat.cpp b/src/Processors/Formats/Impl/TSKVRowOutputFormat.cpp\nindex b7d811029241..7c8f88e38607 100644\n--- a/src/Processors/Formats/Impl/TSKVRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/TSKVRowOutputFormat.cpp\n@@ -46,6 +46,7 @@ void registerOutputFormatTSKV(FormatFactory & factory)\n         return std::make_shared<TSKVRowOutputFormat>(buf, sample, settings);\n     });\n     factory.markOutputFormatSupportsParallelFormatting(\"TSKV\");\n+    factory.setContentType(\"TSKV\", \"text/tab-separated-values; charset=UTF-8\");\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/TabSeparatedRowOutputFormat.cpp b/src/Processors/Formats/Impl/TabSeparatedRowOutputFormat.cpp\nindex 27c680593fd1..f578bd65856a 100644\n--- a/src/Processors/Formats/Impl/TabSeparatedRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/TabSeparatedRowOutputFormat.cpp\n@@ -93,6 +93,8 @@ void registerOutputFormatTabSeparated(FormatFactory & factory)\n             });\n \n             factory.markOutputFormatSupportsParallelFormatting(format_name);\n+            /// https://www.iana.org/assignments/media-types/text/tab-separated-values\n+            factory.setContentType(format_name, \"text/tab-separated-values; charset=UTF-8\");\n         };\n \n         registerWithNamesAndTypes(is_raw ? \"TSVRaw\" : \"TSV\", register_func);\ndiff --git a/src/Processors/Formats/Impl/TabSeparatedRowOutputFormat.h b/src/Processors/Formats/Impl/TabSeparatedRowOutputFormat.h\nindex 7f25d5eac892..3fd0daed07d6 100644\n--- a/src/Processors/Formats/Impl/TabSeparatedRowOutputFormat.h\n+++ b/src/Processors/Formats/Impl/TabSeparatedRowOutputFormat.h\n@@ -28,9 +28,6 @@ class TabSeparatedRowOutputFormat : public IRowOutputFormat\n \n     String getName() const override { return \"TabSeparatedRowOutputFormat\"; }\n \n-    /// https://www.iana.org/assignments/media-types/text/tab-separated-values\n-    String getContentType() const override { return \"text/tab-separated-values; charset=UTF-8\"; }\n-\n protected:\n     void writeField(const IColumn & column, const ISerialization & serialization, size_t row_num) override;\n     void writeFieldDelimiter() final;\ndiff --git a/src/Processors/Formats/Impl/XMLRowOutputFormat.cpp b/src/Processors/Formats/Impl/XMLRowOutputFormat.cpp\nindex a89c17f218d8..5d64edaa7eb5 100644\n--- a/src/Processors/Formats/Impl/XMLRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/XMLRowOutputFormat.cpp\n@@ -261,6 +261,7 @@ void registerOutputFormatXML(FormatFactory & factory)\n \n     factory.markOutputFormatSupportsParallelFormatting(\"XML\");\n     factory.markFormatHasNoAppendSupport(\"XML\");\n+    factory.setContentType(\"XML\", \"application/xml; charset=UTF-8\");\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/XMLRowOutputFormat.h b/src/Processors/Formats/Impl/XMLRowOutputFormat.h\nindex eaaab5cfbe93..9e183af049b1 100644\n--- a/src/Processors/Formats/Impl/XMLRowOutputFormat.h\n+++ b/src/Processors/Formats/Impl/XMLRowOutputFormat.h\n@@ -54,8 +54,6 @@ class XMLRowOutputFormat final : public RowOutputFormatWithExceptionHandlerAdapt\n     }\n     void onRowsReadBeforeUpdate() override { row_count = getRowsReadBefore(); }\n \n-    String getContentType() const override { return \"application/xml; charset=UTF-8\"; }\n-\n     void writeExtremesElement(const char * title, const Columns & columns, size_t row_num);\n     void writeRowsBeforeLimitAtLeast();\n     void writeRowsBeforeAggregationAtLeast();\ndiff --git a/src/Storages/StorageURL.cpp b/src/Storages/StorageURL.cpp\nindex 0130790aaa68..ebbef0c8a3dc 100644\n--- a/src/Storages/StorageURL.cpp\n+++ b/src/Storages/StorageURL.cpp\n@@ -624,7 +624,7 @@ void StorageURLSink::initBuffers()\n     if (write_buf)\n         return;\n \n-    std::string content_type = FormatFactory::instance().getContentType(format, context, format_settings);\n+    std::string content_type = FormatFactory::instance().getContentType(format, format_settings);\n     std::string content_encoding = toContentEncodingName(compression_method);\n \n     auto poco_uri = Poco::URI(uri);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03534_npy_output_to_url.reference b/tests/queries/0_stateless/03534_npy_output_to_url.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/03534_npy_output_to_url.sql b/tests/queries/0_stateless/03534_npy_output_to_url.sql\nnew file mode 100644\nindex 000000000000..88beb5b15386\n--- /dev/null\n+++ b/tests/queries/0_stateless/03534_npy_output_to_url.sql\n@@ -0,0 +1,4 @@\n+DROP TABLE IF EXISTS t0;\n+CREATE TABLE t0 (c0 Int) ENGINE = URL('http://localhost:80/', Npy);\n+INSERT INTO TABLE t0 (c0) VALUES (1); -- { serverError POCO_EXCEPTION }\n+DROP TABLE t0;\n",
  "problem_statement": "Out of bounds with URL table\n### Describe the bug\n\nEasy to reproduce.\n\n### How to reproduce\n\nStart a Nginx server and run:\n\n```sql\nCREATE TABLE t0 (c0 Int) ENGINE = URL('http://localhost:80/', Npy);\nINSERT INTO TABLE t0 (c0) VALUES (1); --Logical error\n```\n\n### Error message and/or stacktrace\n\nStack trace:\n\n```\ncontrib/llvm-project/libcxx/include/vector:1436: assertion __n < size() failed: vector[] index out of bounds\n2025.06.05 11:42:43.373020 [ 1865797 ] {} <Fatal> BaseDaemon: ########## Short fault info ############\n2025.06.05 11:42:43.373071 [ 1865797 ] {} <Fatal> BaseDaemon: (version 25.6.1.1907 (official build), build id: 80E02E073D3D35088B12FAFC651E3EB26A1C7C79, git hash: 4cf7125836d25379f4ac7a313a4e47121362a32a, architecture: x86_64) (from thread 1865072) Received signal 6\n2025.06.05 11:42:43.373090 [ 1865797 ] {} <Fatal> BaseDaemon: Signal description: Aborted\n2025.06.05 11:42:43.373100 [ 1865797 ] {} <Fatal> BaseDaemon: \n2025.06.05 11:42:43.373119 [ 1865797 ] {} <Fatal> BaseDaemon: Stack trace: 0x00007d1069ca50bd 0x00007d1069c456de 0x00007d1069c288cd 0x0000652502e4797d 0x00006524fa189d00 0x00006524fa18bbe5 0x00006524f9fa8dd1 0x00006524f9601139 0x00006524f9601933 0x00006524fa3be9d3 0x00006524fa2ac974 0x00006524fa2ac783 0x00006524fa2ac29b 0x00006524fa040d30 0x00006524fa035386 0x00006524fa034bca 0x00006524fa0487ff 0x00006524f9f6da96 0x00006524f9f62fca 0x00006524f9f7c464 0x00006524fe3d2c47 0x00006524fe3d3145 0x00006524fe37b77f 0x00006524fe379331 0x00007d1069ca2ef1 0x00007d1069d3445c\n2025.06.05 11:42:43.373138 [ 1865797 ] {} <Fatal> BaseDaemon: ########################################\n2025.06.05 11:42:43.373215 [ 1865797 ] {} <Fatal> BaseDaemon: (version 25.6.1.1907 (official build), build id: 80E02E073D3D35088B12FAFC651E3EB26A1C7C79, git hash: 4cf7125836d25379f4ac7a313a4e47121362a32a) (from thread 1865072) (query_id: 30f2cd19-580e-495e-beee-1dfb01464d46) (query: INSERT INTO TABLE t0 (c0) VALUES ) Received signal Aborted (6)\n2025.06.05 11:42:43.373247 [ 1865797 ] {} <Fatal> BaseDaemon: \n2025.06.05 11:42:43.373274 [ 1865797 ] {} <Fatal> BaseDaemon: Stack trace: 0x00007d1069ca50bd 0x00007d1069c456de 0x00007d1069c288cd 0x0000652502e4797d 0x00006524fa189d00 0x00006524fa18bbe5 0x00006524f9fa8dd1 0x00006524f9601139 0x00006524f9601933 0x00006524fa3be9d3 0x00006524fa2ac974 0x00006524fa2ac783 0x00006524fa2ac29b 0x00006524fa040d30 0x00006524fa035386 0x00006524fa034bca 0x00006524fa0487ff 0x00006524f9f6da96 0x00006524f9f62fca 0x00006524f9f7c464 0x00006524fe3d2c47 0x00006524fe3d3145 0x00006524fe37b77f 0x00006524fe379331 0x00007d1069ca2ef1 0x00007d1069d3445c\n2025.06.05 11:42:43.373348 [ 1865797 ] {} <Fatal> BaseDaemon: 3. __pthread_kill @ 0x00000000000a50bd\n2025.06.05 11:42:43.373378 [ 1865797 ] {} <Fatal> BaseDaemon: 4. __GI_raise @ 0x00000000000456de\n2025.06.05 11:42:43.373402 [ 1865797 ] {} <Fatal> BaseDaemon: 5. abort @ 0x00000000000288cd\n2025.06.05 11:42:43.377225 [ 1865797 ] {} <Fatal> BaseDaemon: 6. contrib/llvm-project/libcxx/src/verbose_abort.cpp:74: ? @ 0x0000000021dff97d\n2025.06.05 11:42:43.388116 [ 1865797 ] {} <Fatal> BaseDaemon: 7.0. inlined from contrib/llvm-project/libcxx/include/vector:1436: std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>>::operator[][abi:se190107](unsigned long)\n2025.06.05 11:42:43.388158 [ 1865797 ] {} <Fatal> BaseDaemon: 7. src/Processors/Formats/Impl/NpyOutputFormat.cpp:72: DB::NpyOutputFormat::NpyOutputFormat(DB::WriteBuffer&, DB::Block const&) @ 0x0000000019141d00\n2025.06.05 11:42:43.401948 [ 1865797 ] {} <Fatal> BaseDaemon: 8.0. inlined from contrib/llvm-project/libcxx/include/__memory/construct_at.h:41: DB::NpyOutputFormat* std::construct_at[abi:se190107]<DB::NpyOutputFormat, DB::WriteBuffer&, DB::Block const&, DB::NpyOutputFormat*>(DB::NpyOutputFormat*, DB::WriteBuffer&, DB::Block const&)\n2025.06.05 11:42:43.401996 [ 1865797 ] {} <Fatal> BaseDaemon: 8.1. inlined from contrib/llvm-project/libcxx/include/__memory/construct_at.h:49: DB::NpyOutputFormat* std::__construct_at[abi:se190107]<DB::NpyOutputFormat, DB::WriteBuffer&, DB::Block const&, DB::NpyOutputFormat*>(DB::NpyOutputFormat*, DB::WriteBuffer&, DB::Block const&)\n2025.06.05 11:42:43.402047 [ 1865797 ] {} <Fatal> BaseDaemon: 8.2. inlined from contrib/llvm-project/libcxx/include/__memory/allocator_traits.h:328: void std::allocator_traits<std::allocator<DB::NpyOutputFormat>>::construct[abi:se190107]<DB::NpyOutputFormat, DB::WriteBuffer&, DB::Block const&, void, 0>(std::allocator<DB::NpyOutputFormat>&, DB::NpyOutputFormat*, DB::WriteBuffer&, DB::Block const&)\n2025.06.05 11:42:43.402079 [ 1865797 ] {} <Fatal> BaseDaemon: 8.3. inlined from contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:264: __shared_ptr_emplace<DB::WriteBuffer &, const DB::Block &, std::allocator<DB::NpyOutputFormat>, 0>\n2025.06.05 11:42:43.402111 [ 1865797 ] {} <Fatal> BaseDaemon: 8.4. inlined from contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:843: std::shared_ptr<DB::NpyOutputFormat> std::allocate_shared[abi:se190107]<DB::NpyOutputFormat, std::allocator<DB::NpyOutputFormat>, DB::WriteBuffer&, DB::Block const&, 0>(std::allocator<DB::NpyOutputFormat> const&, DB::WriteBuffer&, DB::Block const&)\n2025.06.05 11:42:43.402133 [ 1865797 ] {} <Fatal> BaseDaemon: 8.5. inlined from contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:851: std::shared_ptr<DB::NpyOutputFormat> std::make_shared[abi:se190107]<DB::NpyOutputFormat, DB::WriteBuffer&, DB::Block const&, 0>(DB::WriteBuffer&, DB::Block const&)\n2025.06.05 11:42:43.402154 [ 1865797 ] {} <Fatal> BaseDaemon: 8.6. inlined from src/Processors/Formats/Impl/NpyOutputFormat.cpp:264: operator()\n2025.06.05 11:42:43.402194 [ 1865797 ] {} <Fatal> BaseDaemon: 8.7. inlined from contrib/llvm-project/libcxx/include/__type_traits/invoke.h:149: decltype(std::declval<DB::registerOutputFormatNpy(DB::FormatFactory&)::$_0&>()(std::declval<DB::WriteBuffer&>(), std::declval<DB::Block const&>(), std::declval<DB::FormatSettings const&>())) std::__invoke[abi:se190107]<DB::registerOutputFormatNpy(DB::FormatFactory&)::$_0&, DB::WriteBuffer&, DB::Block const&, DB::FormatSettings const&>(DB::registerOutputFormatNpy(DB::FormatFactory&)::$_0&, DB::WriteBuffer&, DB::Block const&, DB::FormatSettings const&)\n2025.06.05 11:42:43.402234 [ 1865797 ] {} <Fatal> BaseDaemon: 8.8. inlined from contrib/llvm-project/libcxx/include/__type_traits/invoke.h:216: std::shared_ptr<DB::IOutputFormat> std::__invoke_void_return_wrapper<std::shared_ptr<DB::IOutputFormat>, false>::__call[abi:se190107]<DB::registerOutputFormatNpy(DB::FormatFactory&)::$_0&, DB::WriteBuffer&, DB::Block const&, DB::FormatSettings const&>(DB::registerOutputFormatNpy(DB::FormatFactory&)::$_0&, DB::WriteBuffer&, DB::Block const&, DB::FormatSettings const&)\n2025.06.05 11:42:43.402264 [ 1865797 ] {} <Fatal> BaseDaemon: 8.9. inlined from contrib/llvm-project/libcxx/include/__functional/function.h:210: ?\n2025.06.05 11:42:43.402300 [ 1865797 ] {} <Fatal> BaseDaemon: 8. contrib/llvm-project/libcxx/include/__functional/function.h:610: ? @ 0x0000000019143be5\n2025.06.05 11:42:43.429694 [ 1865797 ] {} <Fatal> BaseDaemon: 9.0. inlined from contrib/llvm-project/libcxx/include/__functional/function.h:716: ?\n2025.06.05 11:42:43.429742 [ 1865797 ] {} <Fatal> BaseDaemon: 9.1. inlined from contrib/llvm-project/libcxx/include/__functional/function.h:989: ?\n2025.06.05 11:42:43.429783 [ 1865797 ] {} <Fatal> BaseDaemon: 9. src/Formats/FormatFactory.cpp:633: DB::FormatFactory::getContentType(String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&) const @ 0x0000000018f60dd1\n2025.06.05 11:42:43.494664 [ 1865797 ] {} <Fatal> BaseDaemon: 10. src/Storages/StorageURL.cpp:627: DB::StorageURLSink::initBuffers() @ 0x00000000185b9139\n2025.06.05 11:42:43.557102 [ 1865797 ] {} <Fatal> BaseDaemon: 11. src/Storages/StorageURL.cpp:657: DB::StorageURLSink::consume(DB::Chunk&) @ 0x00000000185b9933\n2025.06.05 11:42:43.562020 [ 1865797 ] {} <Fatal> BaseDaemon: 12. src/Processors/Sinks/SinkToStorage.cpp:10: DB::SinkToStorage::onConsume(DB::Chunk) @ 0x00000000193769d3\n2025.06.05 11:42:43.573445 [ 1865797 ] {} <Fatal> BaseDaemon: 13.0. inlined from src/Processors/Transforms/ExceptionKeepingTransform.cpp:134: operator()\n2025.06.05 11:42:43.573490 [ 1865797 ] {} <Fatal> BaseDaemon: 13.1. inlined from contrib/llvm-project/libcxx/include/__type_traits/invoke.h:149: decltype(std::declval<DB::ExceptionKeepingTransform::work()::$_1&>()()) std::__invoke[abi:se190107]<DB::ExceptionKeepingTransform::work()::$_1&>(DB::ExceptionKeepingTransform::work()::$_1&)\n2025.06.05 11:42:43.573550 [ 1865797 ] {} <Fatal> BaseDaemon: 13.2. inlined from contrib/llvm-project/libcxx/include/__type_traits/invoke.h:224: void std::__invoke_void_return_wrapper<void, true>::__call[abi:se190107]<DB::ExceptionKeepingTransform::work()::$_1&>(DB::ExceptionKeepingTransform::work()::$_1&)\n2025.06.05 11:42:43.573587 [ 1865797 ] {} <Fatal> BaseDaemon: 13.3. inlined from contrib/llvm-project/libcxx/include/__functional/function.h:210: ?\n2025.06.05 11:42:43.573616 [ 1865797 ] {} <Fatal> BaseDaemon: 13. contrib/llvm-project/libcxx/include/__functional/function.h:610: ? @ 0x0000000019264974\n2025.06.05 11:42:43.585163 [ 1865797 ] {} <Fatal> BaseDaemon: 14.0. inlined from contrib/llvm-project/libcxx/include/__functional/function.h:716: ?\n2025.06.05 11:42:43.585207 [ 1865797 ] {} <Fatal> BaseDaemon: 14.1. inlined from contrib/llvm-project/libcxx/include/__functional/function.h:989: ?\n2025.06.05 11:42:43.585248 [ 1865797 ] {} <Fatal> BaseDaemon: 14. src/Processors/Transforms/ExceptionKeepingTransform.cpp:103: DB::runStep(std::function<void ()>, std::shared_ptr<DB::ThreadGroup>&) @ 0x0000000019264783\n2025.06.05 11:42:43.591975 [ 1865797 ] {} <Fatal> BaseDaemon: 15. src/Processors/Transforms/ExceptionKeepingTransform.cpp:134: DB::ExceptionKeepingTransform::work() @ 0x000000001926429b\n2025.06.05 11:42:43.596173 [ 1865797 ] {} <Fatal> BaseDaemon: 16.0. inlined from src/Processors/Executors/ExecutionThreadContext.cpp:53: DB::executeJob(DB::ExecutingGraph::Node*, DB::ReadProgressCallback*)\n2025.06.05 11:42:43.596214 [ 1865797 ] {} <Fatal> BaseDaemon: 16. src/Processors/Executors/ExecutionThreadContext.cpp:102: DB::ExecutionThreadContext::executeTask() @ 0x0000000018ff8d30\n2025.06.05 11:42:43.611173 [ 1865797 ] {} <Fatal> BaseDaemon: 17. src/Processors/Executors/PipelineExecutor.cpp:306: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000018fed386\n2025.06.05 11:42:43.625739 [ 1865797 ] {} <Fatal> BaseDaemon: 18. src/Processors/Executors/PipelineExecutor.cpp:177: DB::PipelineExecutor::executeStep(std::atomic<bool>*) @ 0x0000000018fecbca\n2025.06.05 11:42:43.633282 [ 1865797 ] {} <Fatal> BaseDaemon: 19. src/Processors/Executors/PushingPipelineExecutor.cpp:131: DB::PushingPipelineExecutor::finish() @ 0x00000000190007ff\n2025.06.05 11:42:43.676034 [ 1865797 ] {} <Fatal> BaseDaemon: 20.0. inlined from src/Server/TCPHandler.cpp:1156: operator()<DB::PushingPipelineExecutor>\n2025.06.05 11:42:43.676069 [ 1865797 ] {} <Fatal> BaseDaemon: 20. src/Server/TCPHandler.cpp:1231: DB::TCPHandler::processInsertQuery(DB::QueryState&) @ 0x0000000018f25a96\n2025.06.05 11:42:43.705150 [ 1865797 ] {} <Fatal> BaseDaemon: 21. src/Server/TCPHandler.cpp:696: DB::TCPHandler::runImpl() @ 0x0000000018f1afca\n2025.06.05 11:42:43.759840 [ 1865797 ] {} <Fatal> BaseDaemon: 22. src/Server/TCPHandler.cpp:2677: DB::TCPHandler::run() @ 0x0000000018f34464\n2025.06.05 11:42:43.762165 [ 1865797 ] {} <Fatal> BaseDaemon: 23. base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x000000001d38ac47\n2025.06.05 11:42:43.765533 [ 1865797 ] {} <Fatal> BaseDaemon: 24. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x000000001d38b145\n2025.06.05 11:42:43.769032 [ 1865797 ] {} <Fatal> BaseDaemon: 25. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x000000001d33377f\n2025.06.05 11:42:43.772437 [ 1865797 ] {} <Fatal> BaseDaemon: 26. base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001d331331\n2025.06.05 11:42:43.772474 [ 1865797 ] {} <Fatal> BaseDaemon: 27. start_thread @ 0x00000000000a2ef1\n2025.06.05 11:42:43.772495 [ 1865797 ] {} <Fatal> BaseDaemon: 28. __clone3 @ 0x000000000013445c\n2025.06.05 11:42:43.948879 [ 1865797 ] {} <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: 16208F7073B083097D27A7AF1A9E6ADF)\n2025.06.05 11:42:44.346790 [ 1865797 ] {} <Fatal> BaseDaemon: Report this error to https://github.com/ClickHouse/ClickHouse/issues\n2025.06.05 11:42:44.346955 [ 1865797 ] {} <Fatal> BaseDaemon: Changed settings: s3_truncate_on_insert = true, allow_reorder_prewhere_conditions = true, allow_suspicious_low_cardinality_types = true, allow_suspicious_fixed_string_types = true, allow_suspicious_indices = true, allow_suspicious_ttl_expressions = true, allow_suspicious_variant_types = true, allow_suspicious_primary_key = true, allow_suspicious_types_in_group_by = true, allow_suspicious_types_in_order_by = true, allow_nonconst_timezone_arguments = true, allow_nondeterministic_optimize_skip_unused_shards = true, allow_distributed_ddl = true, allow_suspicious_codecs = true, enable_zstd_qat_codec = true, enable_deflate_qpl_codec = true, max_execution_time = 240., allow_custom_error_code_in_throwif = true, allow_ddl = true, allow_introspection_functions = true, allow_execute_multiif_columnar = true, allow_drop_detached = true, allow_materialized_view_with_bad_select = true, allow_settings_after_format_in_insert = true, allow_nondeterministic_mutations = true, allow_non_metadata_alters = true, allow_experimental_kafka_offsets_storage_in_keeper = true, engine_file_truncate_on_insert = true, allow_unrestricted_reads_from_keeper = true, allow_deprecated_database_ordinary = true, allow_deprecated_syntax_for_merge_tree = true, allow_get_client_http_header = true, allow_create_index_without_type = true, allow_named_collection_override_by_default = true, allow_deprecated_error_prone_window_functions = true, allow_deprecated_snowflake_conversion_functions = true, allow_experimental_parallel_reading_from_replicas = 1, parallel_replicas_for_non_replicated_merge_tree = true, allow_experimental_analyzer = true, allow_experimental_variant_type = true, allow_experimental_dynamic_type = true, allow_experimental_json_type = true, allow_archive_path_syntax = true, allow_experimental_materialized_postgresql_table = true, allow_experimental_funnel_functions = true, allow_experimental_nlp_functions = true, allow_experimental_hash_functions = true, allow_experimental_object_type = true, allow_experimental_time_series_table = true, allow_experimental_vector_similarity_index = true, allow_experimental_codecs = true, allow_experimental_join_right_table_sorting = true, allow_experimental_statistics = true, allow_experimental_inverted_index = true, allow_experimental_full_text_index = true, allow_experimental_join_condition = true, allow_experimental_live_view = true, allow_experimental_window_view = true, allow_experimental_database_materialized_postgresql = true, allow_experimental_bfloat16_type = true, allow_experimental_shared_set_join = true, type_json_skip_duplicated_paths = true\n```\n",
  "hints_text": "",
  "created_at": "2025-06-07T23:55:14Z"
}