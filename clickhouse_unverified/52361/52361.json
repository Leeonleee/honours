{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 52361,
  "instance_id": "ClickHouse__ClickHouse-52361",
  "issue_numbers": [
    "52353"
  ],
  "base_commit": "0db9c798866951a5c5b4fee55e17c8b65afdeed2",
  "patch": "diff --git a/src/Storages/MergeTree/MergeTreeData.cpp b/src/Storages/MergeTree/MergeTreeData.cpp\nindex a820bacf9a3f..34be8156e71c 100644\n--- a/src/Storages/MergeTree/MergeTreeData.cpp\n+++ b/src/Storages/MergeTree/MergeTreeData.cpp\n@@ -465,9 +465,10 @@ void MergeTreeData::checkProperties(\n     const StorageInMemoryMetadata & new_metadata,\n     const StorageInMemoryMetadata & old_metadata,\n     bool attach,\n+    bool allow_empty_sorting_key,\n     ContextPtr local_context) const\n {\n-    if (!new_metadata.sorting_key.definition_ast)\n+    if (!new_metadata.sorting_key.definition_ast && !allow_empty_sorting_key)\n         throw Exception(ErrorCodes::BAD_ARGUMENTS, \"ORDER BY cannot be empty\");\n \n     KeyDescription new_sorting_key = new_metadata.sorting_key;\n@@ -580,6 +581,9 @@ void MergeTreeData::checkProperties(\n             if (projections_names.find(projection.name) != projections_names.end())\n                 throw Exception(ErrorCodes::LOGICAL_ERROR, \"Projection with name {} already exists\", backQuote(projection.name));\n \n+            /// We cannot alter a projection so far. So here we do not try to find a projection in old metadata.\n+            bool is_aggregate = projection.type == ProjectionDescription::Type::Aggregate;\n+            checkProperties(*projection.metadata, *projection.metadata, attach, is_aggregate, local_context);\n             projections_names.insert(projection.name);\n         }\n     }\n@@ -593,7 +597,7 @@ void MergeTreeData::setProperties(\n     bool attach,\n     ContextPtr local_context)\n {\n-    checkProperties(new_metadata, old_metadata, attach, local_context);\n+    checkProperties(new_metadata, old_metadata, attach, false, local_context);\n     setInMemoryMetadata(new_metadata);\n }\n \n@@ -3286,7 +3290,7 @@ void MergeTreeData::checkAlterIsPossible(const AlterCommands & commands, Context\n         }\n     }\n \n-    checkProperties(new_metadata, old_metadata, false, local_context);\n+    checkProperties(new_metadata, old_metadata, false, false, local_context);\n     checkTTLExpressions(new_metadata, old_metadata);\n \n     if (!columns_to_check_conversion.empty())\ndiff --git a/src/Storages/MergeTree/MergeTreeData.h b/src/Storages/MergeTree/MergeTreeData.h\nindex 8b5b50b1841d..28611d093860 100644\n--- a/src/Storages/MergeTree/MergeTreeData.h\n+++ b/src/Storages/MergeTree/MergeTreeData.h\n@@ -1229,7 +1229,7 @@ class MergeTreeData : public IStorage, public WithMutableContext\n     /// The same for clearOldTemporaryDirectories.\n     std::mutex clear_old_temporary_directories_mutex;\n \n-    void checkProperties(const StorageInMemoryMetadata & new_metadata, const StorageInMemoryMetadata & old_metadata, bool attach = false, ContextPtr local_context = nullptr) const;\n+    void checkProperties(const StorageInMemoryMetadata & new_metadata, const StorageInMemoryMetadata & old_metadata, bool attach, bool allow_empty_sorting_key, ContextPtr local_context) const;\n \n     void setProperties(const StorageInMemoryMetadata & new_metadata, const StorageInMemoryMetadata & old_metadata, bool attach = false, ContextPtr local_context = nullptr);\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02540_duplicate_primary_key.sql b/tests/queries/0_stateless/02540_duplicate_primary_key.sql\nindex a084d76964be..6905c9d5133e 100644\n--- a/tests/queries/0_stateless/02540_duplicate_primary_key.sql\n+++ b/tests/queries/0_stateless/02540_duplicate_primary_key.sql\n@@ -86,20 +86,4 @@ CREATE TABLE test\n )\n ENGINE = MergeTree\n PARTITION BY toYYYYMM(coverage)\n-ORDER BY (coverage, situation_name, NAME_toe, NAME_cockroach);\n-\n-insert into test select * from generateRandom() limit 10;\n-\n-with dissonance as (\n-    Select cast(toStartOfInterval(coverage, INTERVAL 1 day) as Date) as flour, count() as regulation\n-    from test\n-    group by flour having flour >= toDate(now())-100\n-    ),\n-cheetah as (\n-    Select flour, regulation from dissonance\n-    union distinct\n-    Select toDate(now())-1, ifnull((select regulation from dissonance where flour = toDate(now())-1),0) as regulation\n-)\n-Select flour, regulation from cheetah order by flour with fill step 1 limit 100 format Null;\n-\n-drop table test;\n+ORDER BY (coverage, situation_name, NAME_toe, NAME_cockroach); -- { serverError BAD_ARGUMENTS }\ndiff --git a/tests/queries/0_stateless/02540_duplicate_primary_key2.reference b/tests/queries/0_stateless/02540_duplicate_primary_key2.reference\nindex 08839f6bb296..e69de29bb2d1 100644\n--- a/tests/queries/0_stateless/02540_duplicate_primary_key2.reference\n+++ b/tests/queries/0_stateless/02540_duplicate_primary_key2.reference\n@@ -1,1 +0,0 @@\n-200\ndiff --git a/tests/queries/0_stateless/02540_duplicate_primary_key2.sql b/tests/queries/0_stateless/02540_duplicate_primary_key2.sql\nindex d0f02a894f2b..53800c955504 100644\n--- a/tests/queries/0_stateless/02540_duplicate_primary_key2.sql\n+++ b/tests/queries/0_stateless/02540_duplicate_primary_key2.sql\n@@ -88,12 +88,4 @@ CREATE TABLE test\n )\n ENGINE = MergeTree\n PARTITION BY toYYYYMM(timestamp)\n-ORDER BY (xxxx17, xxxx14, xxxx16, toStartOfDay(timestamp), left(xxxx19, 10), timestamp);\n-\n-INSERT INTO test SELECT * replace 1 as xxxx16 replace 1 as xxxx1 replace '2022-02-02 01:00:00' as timestamp replace 'Airtel' as xxxx14 FROM generateRandom() LIMIT 100;\n-INSERT INTO test SELECT * replace 1 as xxxx16 replace 1 as xxxx1 replace '2022-02-02 01:00:00' as timestamp replace 'BSNL' as xxxx14 FROM generateRandom() LIMIT 100;\n-INSERT INTO test SELECT * replace 1 as xxxx16 replace 1 as xxxx1 replace '2022-02-02 01:00:00' as timestamp replace 'xxx' as xxxx14 FROM generateRandom() LIMIT 100;\n-\n-select sum(1) from test where toStartOfInterval(timestamp, INTERVAL 1 day) >= TIMESTAMP '2022-02-01 01:00:00' and xxxx14 in ('Airtel', 'BSNL') and xxxx1 = 1 GROUP BY xxxx16;\n-\n-drop table test;\n+ORDER BY (xxxx17, xxxx14, xxxx16, toStartOfDay(timestamp), left(xxxx19, 10), timestamp); -- { serverError BAD_ARGUMENTS}\ndiff --git a/tests/queries/0_stateless/02816_check_projection_metadata.reference b/tests/queries/0_stateless/02816_check_projection_metadata.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/02816_check_projection_metadata.sql b/tests/queries/0_stateless/02816_check_projection_metadata.sql\nnew file mode 100644\nindex 000000000000..e7da043ad41b\n--- /dev/null\n+++ b/tests/queries/0_stateless/02816_check_projection_metadata.sql\n@@ -0,0 +1,3 @@\n+create table kek (uuid FixedString(16), id int, ns String, dt DateTime64(6), projection null_pk (select * order by ns, 1, 4)) engine=MergeTree order by (id, dt, uuid); -- {serverError ILLEGAL_COLUMN }\n+-- this query could segfault or throw LOGICAL_ERROR previously, when we did not check projection PK\n+-- insert into kek select * from generageRandom(10000);\n",
  "problem_statement": "Segfault in projections with `ORDER BY <constant>`\nIt's a logical error in debug build (trivial to reproduce), but it's known to cause a segmentation fault in release builds (example: https://pastila.nl/?00bfc54a/d23ec9236a59b1185278736662ecda54)\r\n\r\n\r\n```\r\ndell9510 :) create table kek (uuid FixedString(16), id int, ns Nullable(String), dt DateTime64(6), projection null_pk (select * order by ns, 1, 5)) engine=ReplicatedMergeTree('/test/kvsadjv', '1') order by (id, dt, uuid)\r\n\r\nCREATE TABLE kek\r\n(\r\n    `uuid` FixedString(16),\r\n    `id` int,\r\n    `ns` Nullable(String),\r\n    `dt` DateTime64(6),\r\n    PROJECTION null_pk\r\n    (\r\n        SELECT *\r\n        ORDER BY \r\n            ns,\r\n            1,\r\n            5\r\n    )\r\n)\r\nENGINE = ReplicatedMergeTree('/test/kvsadjv', '1')\r\nORDER BY (id, dt, uuid)\r\n\r\nQuery id: 2cb4516b-c68a-4194-8a7d-49b2ca309a8c\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.115 sec. \r\n\r\n\r\ndell9510 :) insert into kek select * from generateRandom('uuid FixedString(16), id int, ns Nullable(String), dt DateTime64(6)') limit 10\r\n\r\nINSERT INTO kek SELECT *\r\nFROM generateRandom('uuid FixedString(16), id int, ns Nullable(String), dt DateTime64(6)')\r\nLIMIT 10\r\n\r\nQuery id: 3e8a6a07-5e0d-4d52-abbc-5a6f1d9f5279\r\n\r\n[dell9510] 2023.07.20 11:46:08.050000 [ 859121 ] {3e8a6a07-5e0d-4d52-abbc-5a6f1d9f5279} <Fatal> : Logical error: 'Bad cast from type DB::ColumnConst to DB::ColumnVector<char8_t>'.\r\n[dell9510] 2023.07.20 11:46:08.052905 [ 859535 ] <Fatal> BaseDaemon: ########################################\r\n[dell9510] 2023.07.20 11:46:08.053272 [ 859535 ] <Fatal> BaseDaemon: (version 23.7.1.1, build id: B4E245EF0313762B1E9D01DB7DEC82B701F0141C, git hash: 482c8b5cde896ee4d84e4b8886c8a0726b4e0784) (from thread 859121) (query_id: 3e8a6a07-5e0d-4d52-abbc-5a6f1d9f5279) (query: insert into kek select * from generateRandom('uuid FixedString(16), id int, ns Nullable(String), dt DateTime64(6)') limit 10) Received signal Aborted (6)\r\n[dell9510] 2023.07.20 11:46:08.053674 [ 859535 ] <Fatal> BaseDaemon: \r\n[dell9510] 2023.07.20 11:46:08.053999 [ 859535 ] <Fatal> BaseDaemon: Stack trace: 0x00007f0508e5426c 0x00007f0508e04a08 0x00007f0508ded538 0x0000000025c31cb7 0x0000000025c31d35 0x0000000025c321b6 0x000000001b889fb7 0x000000001b88f50f 0x000000001b90e2fd 0x000000002e0e5065 0x000000003085b870 0x000000003084a35d 0x000000003084ac59 0x000000003084b996 0x0000000030acbb74 0x0000000030abd1e6 0x0000000030abbd0d 0x0000000030abae43 0x0000000030ab8390 0x0000000030c06e60 0x00000000315d5d91 0x000000003145f769 0x000000003145f715 0x000000003145f6f5 0x000000003145f6d5 0x000000003145f69d 0x0000000025c92456 0x0000000025c917b5 0x000000003145eeba 0x000000003145e886 0x0000000030f60050 0x0000000030f5fd41 0x0000000030f42d9e 0x0000000030f43124 0x0000000030f41f72 0x0000000030f414cd 0x0000000030f3fe14 0x0000000030f3fc6e 0x0000000030f3fc15 0x0000000030f3fbf9 0x0000000030f3fb5d\r\n[dell9510] 2023.07.20 11:46:08.054188 [ 859535 ] <Fatal> BaseDaemon: 4. ? @ 0x00007f0508e5426c in ?\r\n[dell9510] 2023.07.20 11:46:08.054344 [ 859535 ] <Fatal> BaseDaemon: 5. gsignal @ 0x00007f0508e04a08 in ?\r\n[dell9510] 2023.07.20 11:46:08.054450 [ 859535 ] <Fatal> BaseDaemon: 6. abort @ 0x00007f0508ded538 in ?\r\n[dell9510] 2023.07.20 11:46:08.217472 [ 859535 ] <Fatal> BaseDaemon: 7. /home/tavplubix/ch/ClickHouse/src/Common/Exception.cpp:43: DB::abortOnFailedAssertion(String const&) @ 0x0000000025c31cb7 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.07.20 11:46:08.285615 [ 859535 ] <Fatal> BaseDaemon: 8. /home/tavplubix/ch/ClickHouse/src/Common/Exception.cpp:66: DB::handle_error_code(String const&, int, bool, std::vector<void*, std::allocator<void*>> const&) @ 0x0000000025c31d35 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.07.20 11:46:08.345656 [ 859535 ] <Fatal> BaseDaemon: 9. /home/tavplubix/ch/ClickHouse/src/Common/Exception.cpp:96: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x0000000025c321b6 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.07.20 11:46:08.422750 [ 859535 ] <Fatal> BaseDaemon: 10. /home/tavplubix/ch/ClickHouse/src/Common/Exception.h:63: DB::Exception::Exception(String&&, int, bool) @ 0x000000001b889fb7 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.07.20 11:46:08.507042 [ 859535 ] <Fatal> BaseDaemon: 11. /home/tavplubix/ch/ClickHouse/src/Common/Exception.h:91: DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x000000001b88f50f in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.07.20 11:46:09.158475 [ 859535 ] <Fatal> BaseDaemon: 12. /home/tavplubix/ch/ClickHouse/src/Common/assert_cast.h:47: DB::ColumnVector<char8_t> const& assert_cast<DB::ColumnVector<char8_t> const&, DB::IColumn const&>(DB::IColumn const&) @ 0x000000001b90e2fd in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.07.20 11:46:09.259651 [ 859535 ] <Fatal> BaseDaemon: 13. /home/tavplubix/ch/ClickHouse/src/DataTypes/Serializations/SerializationNumber.cpp:123: DB::SerializationNumber<char8_t>::serializeBinary(DB::IColumn const&, unsigned long, DB::WriteBuffer&, DB::FormatSettings const&) const @ 0x000000002e0e5065 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.07.20 11:46:09.459803 [ 859535 ] <Fatal> BaseDaemon: 14. /home/tavplubix/ch/ClickHouse/src/Storages/MergeTree/MergeTreeDataPartWriterOnDisk.cpp:270: DB::MergeTreeDataPartWriterOnDisk::calculateAndSerializePrimaryIndex(DB::Block const&, std::vector<DB::Granule, std::allocator<DB::Granule>> const&) @ 0x000000003085b870 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.07.20 11:46:09.567925 [ 859535 ] <Fatal> BaseDaemon: 15. /home/tavplubix/ch/ClickHouse/src/Storages/MergeTree/MergeTreeDataPartWriterCompact.cpp:189: DB::MergeTreeDataPartWriterCompact::writeDataBlockPrimaryIndexAndSkipIndices(DB::Block const&, std::vector<DB::Granule, std::allocator<DB::Granule>> const&) @ 0x000000003084a35d in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.07.20 11:46:09.670621 [ 859535 ] <Fatal> BaseDaemon: 16. /home/tavplubix/ch/ClickHouse/src/Storages/MergeTree/MergeTreeDataPartWriterCompact.cpp:258: DB::MergeTreeDataPartWriterCompact::fillDataChecksums(DB::MergeTreeDataPartChecksums&) @ 0x000000003084ac59 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.07.20 11:46:09.766848 [ 859535 ] <Fatal> BaseDaemon: 17. /home/tavplubix/ch/ClickHouse/src/Storages/MergeTree/MergeTreeDataPartWriterCompact.cpp:0: DB::MergeTreeDataPartWriterCompact::fillChecksums(DB::MergeTreeDataPartChecksums&) @ 0x000000003084b996 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.07.20 11:46:09.937028 [ 859535 ] <Fatal> BaseDaemon: 18. /home/tavplubix/ch/ClickHouse/src/Storages/MergeTree/MergedBlockOutputStream.cpp:150: DB::MergedBlockOutputStream::finalizePartAsync(std::shared_ptr<DB::IMergeTreeDataPart> const&, bool, DB::NamesAndTypesList const*, DB::MergeTreeDataPartChecksums*) @ 0x0000000030acbb74 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.07.20 11:46:10.275947 [ 859535 ] <Fatal> BaseDaemon: 19. /home/tavplubix/ch/ClickHouse/src/Storages/MergeTree/MergeTreeDataWriter.cpp:678: DB::MergeTreeDataWriter::writeProjectionPartImpl(String const&, bool, DB::IMergeTreeDataPart*, DB::MergeTreeData const&, Poco::Logger*, DB::Block, DB::ProjectionDescription const&) @ 0x0000000030abd1e6 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.07.20 11:46:10.452652 [ 859535 ] <Fatal> BaseDaemon: 20. /home/tavplubix/ch/ClickHouse/src/Storages/MergeTree/MergeTreeDataWriter.cpp:696: DB::MergeTreeDataWriter::writeProjectionPart(DB::MergeTreeData const&, Poco::Logger*, DB::Block, DB::ProjectionDescription const&, DB::IMergeTreeDataPart*) @ 0x0000000030abbd0d in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.07.20 11:46:10.634576 [ 859535 ] <Fatal> BaseDaemon: 21. /home/tavplubix/ch/ClickHouse/src/Storages/MergeTree/MergeTreeDataWriter.cpp:554: DB::MergeTreeDataWriter::writeTempPartImpl(DB::BlockWithPartition&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::Context const>, long, bool) @ 0x0000000030abae43 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.07.20 11:46:10.822596 [ 859535 ] <Fatal> BaseDaemon: 22. /home/tavplubix/ch/ClickHouse/src/Storages/MergeTree/MergeTreeDataWriter.cpp:354: DB::MergeTreeDataWriter::writeTempPart(DB::BlockWithPartition&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::Context const>) @ 0x0000000030ab8390 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.07.20 11:46:11.191970 [ 859535 ] <Fatal> BaseDaemon: 23. /home/tavplubix/ch/ClickHouse/src/Storages/MergeTree/ReplicatedMergeTreeSink.cpp:460: DB::ReplicatedMergeTreeSinkImpl<false>::consume(DB::Chunk) @ 0x0000000030c06e60 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.07.20 11:46:11.241251 [ 859535 ] <Fatal> BaseDaemon: 24. /home/tavplubix/ch/ClickHouse/src/Processors/Sinks/SinkToStorage.cpp:18: DB::SinkToStorage::onConsume(DB::Chunk) @ 0x00000000315d5d91 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.07.20 11:46:11.349928 [ 859535 ] <Fatal> BaseDaemon: 25. /home/tavplubix/ch/ClickHouse/src/Processors/Transforms/ExceptionKeepingTransform.cpp:151: DB::ExceptionKeepingTransform::work()::$_1::operator()() const @ 0x000000003145f769 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.07.20 11:46:11.421108 [ 859535 ] <Fatal> BaseDaemon: 26. /home/tavplubix/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/invoke.h:394: decltype(std::declval<DB::ExceptionKeepingTransform::work()::$_1&>()()) std::__invoke[abi:v15000]<DB::ExceptionKeepingTransform::work()::$_1&>(DB::ExceptionKeepingTransform::work()::$_1&) @ 0x000000003145f715 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.07.20 11:46:11.484664 [ 859535 ] <Fatal> BaseDaemon: 27. /home/tavplubix/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/invoke.h:480: void std::__invoke_void_return_wrapper<void, true>::__call<DB::ExceptionKeepingTransform::work()::$_1&>(DB::ExceptionKeepingTransform::work()::$_1&) @ 0x000000003145f6f5 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.07.20 11:46:11.549829 [ 859535 ] <Fatal> BaseDaemon: 28. /home/tavplubix/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/function.h:235: std::__function::__default_alloc_func<DB::ExceptionKeepingTransform::work()::$_1, void ()>::operator()[abi:v15000]() @ 0x000000003145f6d5 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.07.20 11:46:11.618819 [ 859535 ] <Fatal> BaseDaemon: 29. /home/tavplubix/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/function.h:716: void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<DB::ExceptionKeepingTransform::work()::$_1, void ()>>(std::__function::__policy_storage const*) @ 0x000000003145f69d in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.07.20 11:46:11.666632 [ 859535 ] <Fatal> BaseDaemon: 30. /home/tavplubix/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/function.h:848: std::__function::__policy_func<void ()>::operator()[abi:v15000]() const @ 0x0000000025c92456 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.07.20 11:46:11.707585 [ 859535 ] <Fatal> BaseDaemon: 31. /home/tavplubix/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/function.h:1187: std::function<void ()>::operator()() const @ 0x0000000025c917b5 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.07.20 11:46:11.774232 [ 859535 ] <Fatal> BaseDaemon: 32. /home/tavplubix/ch/ClickHouse/src/Processors/Transforms/ExceptionKeepingTransform.cpp:115: DB::runStep(std::function<void ()>, DB::ThreadStatus*, std::atomic<unsigned long>*) @ 0x000000003145eeba in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.07.20 11:46:11.820088 [ 859535 ] <Fatal> BaseDaemon: 33. /home/tavplubix/ch/ClickHouse/src/Processors/Transforms/ExceptionKeepingTransform.cpp:151: DB::ExceptionKeepingTransform::work() @ 0x000000003145e886 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.07.20 11:46:11.861137 [ 859535 ] <Fatal> BaseDaemon: 34. /home/tavplubix/ch/ClickHouse/src/Processors/Executors/ExecutionThreadContext.cpp:47: DB::executeJob(DB::ExecutingGraph::Node*, DB::ReadProgressCallback*) @ 0x0000000030f60050 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.07.20 11:46:11.883706 [ 859535 ] <Fatal> BaseDaemon: 35. /home/tavplubix/ch/ClickHouse/src/Processors/Executors/ExecutionThreadContext.cpp:92: DB::ExecutionThreadContext::executeTask() @ 0x0000000030f5fd41 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.07.20 11:46:11.976163 [ 859535 ] <Fatal> BaseDaemon: 36. /home/tavplubix/ch/ClickHouse/src/Processors/Executors/PipelineExecutor.cpp:255: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000030f42d9e in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.07.20 11:46:12.047901 [ 859535 ] <Fatal> BaseDaemon: 37. /home/tavplubix/ch/ClickHouse/src/Processors/Executors/PipelineExecutor.cpp:221: DB::PipelineExecutor::executeSingleThread(unsigned long) @ 0x0000000030f43124 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.07.20 11:46:12.111743 [ 859535 ] <Fatal> BaseDaemon: 38. /home/tavplubix/ch/ClickHouse/src/Processors/Executors/PipelineExecutor.cpp:379: DB::PipelineExecutor::executeImpl(unsigned long) @ 0x0000000030f41f72 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.07.20 11:46:12.179938 [ 859535 ] <Fatal> BaseDaemon: 39. /home/tavplubix/ch/ClickHouse/src/Processors/Executors/PipelineExecutor.cpp:113: DB::PipelineExecutor::execute(unsigned long) @ 0x0000000030f414cd in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.07.20 11:46:12.219747 [ 859535 ] <Fatal> BaseDaemon: 40. /home/tavplubix/ch/ClickHouse/src/Processors/Executors/CompletedPipelineExecutor.cpp:48: DB::threadFunction(DB::CompletedPipelineExecutor::Data&, std::shared_ptr<DB::ThreadGroup>, unsigned long) @ 0x0000000030f3fe14 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.07.20 11:46:12.254194 [ 859535 ] <Fatal> BaseDaemon: 41. /home/tavplubix/ch/ClickHouse/src/Processors/Executors/CompletedPipelineExecutor.cpp:84: DB::CompletedPipelineExecutor::execute()::$_0::operator()() const @ 0x0000000030f3fc6e in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.07.20 11:46:12.287971 [ 859535 ] <Fatal> BaseDaemon: 42. /home/tavplubix/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/invoke.h:394: decltype(std::declval<DB::CompletedPipelineExecutor::execute()::$_0&>()()) std::__invoke[abi:v15000]<DB::CompletedPipelineExecutor::execute()::$_0&>(DB::CompletedPipelineExecutor::execute()::$_0&) @ 0x0000000030f3fc15 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.07.20 11:46:12.320521 [ 859535 ] <Fatal> BaseDaemon: 43. /home/tavplubix/ch/ClickHouse/contrib/llvm-project/libcxx/include/tuple:1789: decltype(auto) std::__apply_tuple_impl[abi:v15000]<DB::CompletedPipelineExecutor::execute()::$_0&, std::tuple<>&>(DB::CompletedPipelineExecutor::execute()::$_0&, std::tuple<>&, std::__tuple_indices<>) @ 0x0000000030f3fbf9 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.07.20 11:46:12.353158 [ 859535 ] <Fatal> BaseDaemon: 44. /home/tavplubix/ch/ClickHouse/contrib/llvm-project/libcxx/include/tuple:1798: decltype(auto) std::apply[abi:v15000]<DB::CompletedPipelineExecutor::execute()::$_0&, std::tuple<>&>(DB::CompletedPipelineExecutor::execute()::$_0&, std::tuple<>&) @ 0x0000000030f3fb5d in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.07.20 11:46:12.353355 [ 859535 ] <Fatal> BaseDaemon: Integrity check of the executable skipped because the reference checksum could not be read.\r\n[dell9510] 2023.07.20 11:46:15.699879 [ 859535 ] <Fatal> BaseDaemon: This ClickHouse version is not official and should be upgraded to the official build.\r\n[dell9510] 2023.07.20 11:46:15.700388 [ 859535 ] <Fatal> BaseDaemon: Changed settings: stream_like_engine_allow_direct_select = true, log_queries = true, distributed_ddl_task_timeout = 30, query_profiler_real_time_period_ns = 1000000000, query_profiler_cpu_time_period_ns = 1000000000, allow_experimental_analyzer = false, show_table_uuid_in_table_create_query_if_not_nil = false, database_atomic_wait_for_drop_and_detach_synchronously = false, allow_experimental_database_replicated = true, database_replicated_initial_query_timeout_sec = 30, database_replicated_always_detach_permanently = true, distributed_ddl_output_mode = 'none', distributed_ddl_entry_format_version = 3, background_pool_size = 16, default_database_engine = 'Atomic'\r\n\u2198 Progress: 20.00 rows, 892.00 B (1.81 rows/s., 80.95 B/s.)                                                                                                                                (0.0 CPU, 4.40 MB RAM)Exception on client:\r\nCode: 32. DB::Exception: Attempt to read after eof: while receiving packet from localhost:9000. (ATTEMPT_TO_READ_AFTER_EOF)\r\n```\n",
  "hints_text": "",
  "created_at": "2023-07-20T11:21:10Z",
  "modified_files": [
    "src/Storages/MergeTree/MergeTreeData.cpp",
    "src/Storages/MergeTree/MergeTreeData.h"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/02540_duplicate_primary_key.sql",
    "tests/queries/0_stateless/02540_duplicate_primary_key2.reference",
    "tests/queries/0_stateless/02540_duplicate_primary_key2.sql",
    "b/tests/queries/0_stateless/02816_check_projection_metadata.sql"
  ]
}