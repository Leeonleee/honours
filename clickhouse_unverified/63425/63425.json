{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 63425,
  "instance_id": "ClickHouse__ClickHouse-63425",
  "issue_numbers": [
    "63023"
  ],
  "base_commit": "08bcbfc2515ee9227c9ece20320b1841a8e5ffa2",
  "patch": "diff --git a/src/Parsers/ParserCreateIndexQuery.cpp b/src/Parsers/ParserCreateIndexQuery.cpp\nindex fd2bbbab1778..2fa34696c58f 100644\n--- a/src/Parsers/ParserCreateIndexQuery.cpp\n+++ b/src/Parsers/ParserCreateIndexQuery.cpp\n@@ -17,9 +17,9 @@ bool ParserCreateIndexDeclaration::parseImpl(Pos & pos, ASTPtr & node, Expected\n {\n     ParserKeyword s_type(Keyword::TYPE);\n     ParserKeyword s_granularity(Keyword::GRANULARITY);\n-    ParserToken open(TokenType::OpeningRoundBracket);\n-    ParserToken close(TokenType::ClosingRoundBracket);\n-    ParserOrderByExpressionList order_list;\n+    ParserToken open_p(TokenType::OpeningRoundBracket);\n+    ParserToken close_p(TokenType::ClosingRoundBracket);\n+    ParserOrderByExpressionList order_list_p;\n \n     ParserDataType data_type_p;\n     ParserExpression expression_p;\n@@ -29,17 +29,41 @@ bool ParserCreateIndexDeclaration::parseImpl(Pos & pos, ASTPtr & node, Expected\n     ASTPtr type;\n     ASTPtr granularity;\n \n-    /// Skip name parser for SQL-standard CREATE INDEX\n-    if (expression_p.parse(pos, expr, expected))\n+    if (open_p.ignore(pos, expected))\n     {\n-    }\n-    else if (open.ignore(pos, expected))\n-    {\n-        if (!order_list.parse(pos, expr, expected))\n+        ASTPtr order_list;\n+        if (!order_list_p.parse(pos, order_list, expected))\n+            return false;\n+\n+        if (!close_p.ignore(pos, expected))\n             return false;\n \n-        if (!close.ignore(pos, expected))\n+        if (order_list->children.empty())\n             return false;\n+\n+        /// CREATE INDEX with ASC, DESC is implemented only for SQL compatibility.\n+        /// ASC and DESC modifiers are not supported and are ignored further.\n+        if (order_list->children.size() == 1)\n+        {\n+            auto order_by_elem = order_list->children[0];\n+            expr = order_by_elem->children[0];\n+        }\n+        else\n+        {\n+            auto tuple_func = makeASTFunction(\"tuple\");\n+            tuple_func->arguments = std::make_shared<ASTExpressionList>();\n+\n+            for (const auto & order_by_elem : order_list->children)\n+            {\n+                auto elem_expr = order_by_elem->children[0];\n+                tuple_func->arguments->children.push_back(std::move(elem_expr));\n+            }\n+            expr = std::move(tuple_func);\n+        }\n+    }\n+    else if (!expression_p.parse(pos, expr, expected))\n+    {\n+        return false;\n     }\n \n     if (s_type.ignore(pos, expected))\n@@ -59,7 +83,9 @@ bool ParserCreateIndexDeclaration::parseImpl(Pos & pos, ASTPtr & node, Expected\n     index->part_of_create_index_query = true;\n \n     if (granularity)\n+    {\n         index->granularity = granularity->as<ASTLiteral &>().value.safeGet<UInt64>();\n+    }\n     else\n     {\n         auto index_type = index->getType();\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03146_create_index_compatibility.reference b/tests/queries/0_stateless/03146_create_index_compatibility.reference\nnew file mode 100644\nindex 000000000000..64f1d1382ee1\n--- /dev/null\n+++ b/tests/queries/0_stateless/03146_create_index_compatibility.reference\n@@ -0,0 +1,1 @@\n+CREATE TABLE default.t_index_3146\\n(\\n    `a` UInt64,\\n    `b` UInt64,\\n    INDEX i1 a TYPE minmax GRANULARITY 1,\\n    INDEX i2 (a, b) TYPE minmax GRANULARITY 1,\\n    INDEX i3 (a, b) TYPE minmax GRANULARITY 1,\\n    INDEX i4 a TYPE minmax GRANULARITY 1\\n)\\nENGINE = MergeTree\\nORDER BY tuple()\\nSETTINGS index_granularity = 8192\ndiff --git a/tests/queries/0_stateless/03146_create_index_compatibility.sql b/tests/queries/0_stateless/03146_create_index_compatibility.sql\nnew file mode 100644\nindex 000000000000..ede5bc0567a7\n--- /dev/null\n+++ b/tests/queries/0_stateless/03146_create_index_compatibility.sql\n@@ -0,0 +1,17 @@\n+DROP TABLE IF EXISTS t_index_3146;\n+\n+CREATE TABLE t_index_3146 (a UInt64, b UInt64) ENGINE = MergeTree ORDER BY tuple();\n+\n+SET allow_create_index_without_type = 1;\n+\n+CREATE INDEX i1 ON t_index_3146 (a) TYPE minmax;\n+CREATE INDEX i2 ON t_index_3146 (a, b) TYPE minmax;\n+CREATE INDEX i3 ON t_index_3146 (a DESC, b ASC) TYPE minmax;\n+CREATE INDEX i4 ON t_index_3146 a TYPE minmax;\n+CREATE INDEX i5 ON t_index_3146 (a); -- ignored\n+CREATE INDEX i6 ON t_index_3146 (a DESC, b ASC); -- ignored\n+CREATE INDEX i7 ON t_index_3146; -- { clientError SYNTAX_ERROR }\n+CREATE INDEX i8 ON t_index_3146 a, b TYPE minmax; -- { clientError SYNTAX_ERROR }\n+\n+SHOW CREATE TABLE t_index_3146;\n+DROP TABLE t_index_3146;\n",
  "problem_statement": "Logical error: 'Index declaration must have an expression'. \t\n\r\n```\r\n2024.04.25 21:23:18.955127 [ 167 ] {8f107f49-f224-457b-977b-3fd22d448272} <Debug> executeQuery: (from [::ffff:127.0.0.1]:48504) (comment: /workspace/ch/tests/queries/0_stateless/02813_create_index_noop.sql) CREATE INDEX idx_tab2_0 ON tab2 idx_tab2_0 (col1, col3) GRANULARITY 1 (stage: Complete)\r\n2024.04.25 21:23:18.956962 [ 167 ] {8f107f49-f224-457b-977b-3fd22d448272} <Debug> TCPHandler: Processed in 0.016745873 sec.\r\n2024.04.25 21:23:18.977597 [ 167 ] {} <Trace> TCP-Session: 62297577-51c8-4f1e-8113-6c9f4cb8520a Creating query context from session context, user_id: 94309d50-4f52-5250-31bd-74fecac179db, parent context user: default\r\n2024.04.25 21:23:18.980859 [ 167 ] {55a64e8c-f4cd-4b47-aca1-91d83a3ed96f} <Fatal> : Logical error: 'Index declaration must have an expression'.\r\n\r\n```\r\n\r\n\r\nThere was no stacktrace.\r\n\r\nhttps://s3.amazonaws.com/clickhouse-test-reports/62998/acd7292be0b7a633b5e4b2de1b5f61aa5a68904a/ast_fuzzer__msan_.html\n",
  "hints_text": "https://s3.amazonaws.com/clickhouse-test-reports/61935/376c54c7f99dee3e1833ccc9b0f15c1dd8654eeb/ast_fuzzer__asan_.html\r\n\r\nStack: https://s3.amazonaws.com/clickhouse-test-reports/61935/376c54c7f99dee3e1833ccc9b0f15c1dd8654eeb/ast_fuzzer__asan_/fatal.log\nReproducer:\r\n```sql\r\nCREATE INDEX idx_tab2_0 ON tab2 abracadabra ('World' IN (SELECT toFixedString('Hello', toUInt256(5)) GROUP BY concat(TRUNCATE(concat(7, NULL), toNullable(19), 1));\r\n```",
  "created_at": "2024-05-06T17:54:39Z"
}