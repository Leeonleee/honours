{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 23501,
  "instance_id": "ClickHouse__ClickHouse-23501",
  "issue_numbers": [
    "22736"
  ],
  "base_commit": "f125db243e5e42a008af74cf9d87b9b742409094",
  "patch": "diff --git a/src/Interpreters/JoinToSubqueryTransformVisitor.cpp b/src/Interpreters/JoinToSubqueryTransformVisitor.cpp\nindex 772077ba92ac..3cb8004a29f6 100644\n--- a/src/Interpreters/JoinToSubqueryTransformVisitor.cpp\n+++ b/src/Interpreters/JoinToSubqueryTransformVisitor.cpp\n@@ -11,6 +11,7 @@\n #include <Parsers/ASTExpressionList.h>\n #include <Parsers/ASTFunction.h>\n #include <Parsers/ASTAsterisk.h>\n+#include <Parsers/ASTColumnsMatcher.h>\n #include <Parsers/ASTQualifiedAsterisk.h>\n #include <Parsers/ParserTablesInSelectQuery.h>\n #include <Parsers/ExpressionListParsers.h>\n@@ -73,16 +74,29 @@ class ExtractAsterisksMatcher\n             }\n         }\n \n-        void addTableColumns(const String & table_name)\n+        using ShouldAddColumnPredicate = std::function<bool (const String&)>;\n+\n+        /// Add columns from table with table_name into select expression list\n+        /// Use should_add_column_predicate for check if column name should be added\n+        /// By default should_add_column_predicate returns true for any column name\n+        void addTableColumns(\n+            const String & table_name,\n+            ShouldAddColumnPredicate should_add_column_predicate = [](const String &) { return true; })\n         {\n             auto it = table_columns.find(table_name);\n             if (it == table_columns.end())\n                 throw Exception(\"Unknown qualified identifier: \" + table_name, ErrorCodes::UNKNOWN_IDENTIFIER);\n \n             for (const auto & column : it->second)\n-                new_select_expression_list->children.push_back(\n-                    std::make_shared<ASTIdentifier>(std::vector<String>{it->first, column.name}));\n+            {\n+                if (should_add_column_predicate(column.name))\n+                {\n+                    auto identifier = std::make_shared<ASTIdentifier>(std::vector<String>{it->first, column.name});\n+                    new_select_expression_list->children.emplace_back(std::move(identifier));\n+                }\n+            }\n         }\n+\n     };\n \n     static bool needChildVisit(const ASTPtr &, const ASTPtr &) { return false; }\n@@ -119,6 +133,13 @@ class ExtractAsterisksMatcher\n \n                 data.addTableColumns(identifier.name());\n             }\n+            else if (auto * columns_matcher = child->as<ASTColumnsMatcher>())\n+            {\n+                has_asterisks = true;\n+\n+                for (auto & table_name : data.tables_order)\n+                    data.addTableColumns(table_name, [&](const String & column_name) { return columns_matcher->isColumnMatching(column_name); });\n+            }\n             else\n                 data.new_select_expression_list->children.push_back(child);\n         }\n@@ -225,7 +246,7 @@ struct CollectColumnIdentifiersMatcher\n             : identifiers(identifiers_)\n         {}\n \n-        void addIdentirier(const ASTIdentifier & ident)\n+        void addIdentifier(const ASTIdentifier & ident)\n         {\n             for (const auto & aliases : ignored)\n                 if (aliases.count(ident.name()))\n@@ -267,7 +288,7 @@ struct CollectColumnIdentifiersMatcher\n \n     static void visit(const ASTIdentifier & ident, const ASTPtr &, Data & data)\n     {\n-        data.addIdentirier(ident);\n+        data.addIdentifier(ident);\n     }\n \n     static void visit(const ASTFunction & func, const ASTPtr &, Data & data)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01839_join_to_subqueries_rewriter_columns_matcher.reference b/tests/queries/0_stateless/01839_join_to_subqueries_rewriter_columns_matcher.reference\nnew file mode 100644\nindex 000000000000..8e1a7a2271f0\n--- /dev/null\n+++ b/tests/queries/0_stateless/01839_join_to_subqueries_rewriter_columns_matcher.reference\n@@ -0,0 +1,1 @@\n+a\tb\tc\ndiff --git a/tests/queries/0_stateless/01839_join_to_subqueries_rewriter_columns_matcher.sql b/tests/queries/0_stateless/01839_join_to_subqueries_rewriter_columns_matcher.sql\nnew file mode 100644\nindex 000000000000..979debbcbb80\n--- /dev/null\n+++ b/tests/queries/0_stateless/01839_join_to_subqueries_rewriter_columns_matcher.sql\n@@ -0,0 +1,4 @@\n+SELECT COLUMNS('test') FROM\n+    (SELECT 1 AS id, 'a' AS test) a\n+    LEFT JOIN (SELECT 1 AS id, 'b' AS test) b ON b.id = a.id\n+    LEFT JOIN (SELECT 1 AS id, 'c' AS test) c ON c.id = a.id;\n",
  "problem_statement": "Bug in COLUMNS function in query with 3+ joins\n**Describe the bug**\r\ncolumns('regexp') didn't return all columns by regexp where 3+ joins in query \r\n\r\n**Does it reproduce on recent release?**\r\nversion 21.3.4 revision 54447\r\n\r\n**How to reproduce**\r\n\r\nin query we have 3 columns 'test' but returned only one:\r\n\r\n```\r\nselect columns('test') from                                                                                                                                                               \r\n(select 1 as id, 'a' as test) a                                                                                                                                                                    \r\nleft join (select 1 as id, 'b' as test) b on b.id = a.id                                                                                                                                               \r\nleft join (select 1 as id, 'c' as test) c on c.id = a.id;                                                                                                                                               \r\n                                                                                                                               \r\nQuery id: 2fc3ebdf-8ec9-4684-af02-3b87bfe18705\r\n                                                   \r\n\u250c\u2500test\u2500\u2510                                           \r\n\u2502 c    \u2502                                           \r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518                                           \r\n                                                   \r\n1 rows in set. Elapsed: 0.007 sec.\r\n```\r\n\r\nbut if we change query:\r\n\r\n```\r\nselect  columns('test'), a.test as t1, b.test as t2, c.test as t3 from \r\n(select 1 as id, 'a' as test) a \r\nleft join (select 1 as id, 'b' as test) b on b.id = a.id \r\nleft join (select 1 as id, 'c' as test) c on c.id = a.id\r\n\r\nQuery id: 5bf07e05-ec0e-4017-853d-b7b23b8a6b16\r\n\r\n\u250c\u2500--a.test\u2500\u252c\u2500--b.test\u2500\u252c\u2500test\u2500\u252c\u2500t1\u2500\u252c\u2500t2\u2500\u252c\u2500t3\u2500\u2510\r\n\u2502 a        \u2502 b        \u2502 c    \u2502 a  \u2502 b  \u2502 c  \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 0.006 sec.\r\n```\n",
  "hints_text": "",
  "created_at": "2021-04-22T10:16:55Z"
}