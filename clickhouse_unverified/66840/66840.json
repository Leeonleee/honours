{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 66840,
  "instance_id": "ClickHouse__ClickHouse-66840",
  "issue_numbers": [
    "66836"
  ],
  "base_commit": "5611ef0d387e7c18a76dbcb1d1619d19ac60b501",
  "patch": "diff --git a/src/Parsers/ASTFunction.cpp b/src/Parsers/ASTFunction.cpp\nindex b04ec1c22b26..230d4c778e83 100644\n--- a/src/Parsers/ASTFunction.cpp\n+++ b/src/Parsers/ASTFunction.cpp\n@@ -329,19 +329,23 @@ void ASTFunction::formatImplWithoutAlias(const FormatSettings & settings, Format\n \n                 const auto * literal = arguments->children[0]->as<ASTLiteral>();\n                 const auto * function = arguments->children[0]->as<ASTFunction>();\n+                const auto * subquery = arguments->children[0]->as<ASTSubquery>();\n                 bool is_tuple = literal && literal->value.getType() == Field::Types::Tuple;\n-                // do not add parentheses for tuple literal, otherwise extra parens will be added `-((3, 7, 3), 1)` -> `-(((3, 7, 3), 1))`\n+                /// Do not add parentheses for tuple literal, otherwise extra parens will be added `-((3, 7, 3), 1)` -> `-(((3, 7, 3), 1))`\n                 bool literal_need_parens = literal && !is_tuple;\n \n-                // negate always requires parentheses, otherwise -(-1) will be printed as --1\n-                bool inside_parens = name == \"negate\" && (literal_need_parens || (function && function->name == \"negate\"));\n+                /// Negate always requires parentheses, otherwise -(-1) will be printed as --1\n+                /// Also extra parentheses are needed for subqueries, because NOT can be parsed as a function:\n+                /// not(SELECT 1) cannot be parsed, while not((SELECT 1)) can.\n+                bool inside_parens = (name == \"negate\" && (literal_need_parens || (function && function->name == \"negate\")))\n+                    || (subquery && name == \"not\");\n \n                 /// We DO need parentheses around a single literal\n                 /// For example, SELECT (NOT 0) + (NOT 0) cannot be transformed into SELECT NOT 0 + NOT 0, since\n                 /// this is equal to SELECT NOT (0 + NOT 0)\n                 bool outside_parens = frame.need_parens && !inside_parens;\n \n-                // do not add extra parentheses for functions inside negate, i.e. -(-toUInt64(-(1)))\n+                /// Do not add extra parentheses for functions inside negate, i.e. -(-toUInt64(-(1)))\n                 if (inside_parens)\n                     nested_need_parens.need_parens = false;\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03208_inconsistent_formatting_of_not_subquery.reference b/tests/queries/0_stateless/03208_inconsistent_formatting_of_not_subquery.reference\nnew file mode 100644\nindex 000000000000..a1afeb1ab82b\n--- /dev/null\n+++ b/tests/queries/0_stateless/03208_inconsistent_formatting_of_not_subquery.reference\n@@ -0,0 +1,1 @@\n+SELECT NOT ((SELECT 1))\ndiff --git a/tests/queries/0_stateless/03208_inconsistent_formatting_of_not_subquery.sh b/tests/queries/0_stateless/03208_inconsistent_formatting_of_not_subquery.sh\nnew file mode 100755\nindex 000000000000..594d316b6210\n--- /dev/null\n+++ b/tests/queries/0_stateless/03208_inconsistent_formatting_of_not_subquery.sh\n@@ -0,0 +1,7 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+$CLICKHOUSE_FORMAT --oneline --query \"SELECT NOT((SELECT 1))\"\n",
  "problem_statement": "Inconsistent formatting: query `SELECT NOT((SELECT 1))` cannot parse back\n```\r\nSELECT NOT((SELECT 1));\r\n```\r\nformatted as:\r\n```\r\nSELECT NOT(SELECT 1);\r\n```\n",
  "hints_text": "",
  "created_at": "2024-07-22T04:34:35Z"
}