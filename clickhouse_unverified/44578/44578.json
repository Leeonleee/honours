{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 44578,
  "instance_id": "ClickHouse__ClickHouse-44578",
  "issue_numbers": [
    "44536"
  ],
  "base_commit": "cbebb7a82665bb63a1a703c4779c304bae30c86e",
  "patch": "diff --git a/src/Storages/MergeTree/MergeTreeData.cpp b/src/Storages/MergeTree/MergeTreeData.cpp\nindex 4089ba9adb87..a8cfc72ad224 100644\n--- a/src/Storages/MergeTree/MergeTreeData.cpp\n+++ b/src/Storages/MergeTree/MergeTreeData.cpp\n@@ -1,34 +1,23 @@\n #include <Storages/MergeTree/MergeTreeData.h>\n \n #include <Backups/BackupEntriesCollector.h>\n-#include <Backups/BackupEntryFromImmutableFile.h>\n #include <Backups/BackupEntryFromSmallFile.h>\n #include <Backups/BackupEntryWrappedWith.h>\n #include <Backups/IBackup.h>\n #include <Backups/RestorerFromBackup.h>\n #include <Compression/CompressedReadBuffer.h>\n-#include <DataTypes/DataTypeArray.h>\n-#include <DataTypes/DataTypeDate.h>\n-#include <DataTypes/DataTypeDateTime.h>\n #include <DataTypes/DataTypeEnum.h>\n #include <DataTypes/DataTypeLowCardinality.h>\n-#include <DataTypes/DataTypeNullable.h>\n #include <DataTypes/DataTypeUUID.h>\n #include <DataTypes/DataTypeTuple.h>\n #include <DataTypes/NestedUtils.h>\n-#include <DataTypes/DataTypeObject.h>\n #include <DataTypes/ObjectUtils.h>\n-#include <Columns/ColumnObject.h>\n #include <DataTypes/hasNullable.h>\n #include <Disks/createVolume.h>\n #include <Disks/ObjectStorages/DiskObjectStorage.h>\n-#include <Functions/FunctionFactory.h>\n #include <Functions/IFunction.h>\n-#include <IO/ConcatReadBuffer.h>\n #include <IO/Operators.h>\n-#include <IO/ReadBufferFromMemory.h>\n #include <IO/WriteBufferFromString.h>\n-#include <IO/S3Common.h>\n #include <Interpreters/Aggregator.h>\n #include <Interpreters/ExpressionAnalyzer.h>\n #include <Interpreters/PartLog.h>\n@@ -56,7 +45,6 @@\n #include <Storages/MergeTree/MergeTreeDataPartWide.h>\n #include <Storages/MergeTree/DataPartStorageOnDisk.h>\n #include <Storages/MergeTree/checkDataPart.h>\n-#include <Storages/MergeTree/localBackup.h>\n #include <Storages/StorageMergeTree.h>\n #include <Storages/StorageReplicatedMergeTree.h>\n #include <Storages/VirtualColumnUtils.h>\n@@ -70,22 +58,17 @@\n #include <Common/quoteString.h>\n #include <Common/typeid_cast.h>\n #include <Common/noexcept_scope.h>\n-#include <Processors/QueryPlan/ReadFromMergeTree.h>\n #include <Processors/Formats/IInputFormat.h>\n #include <AggregateFunctions/AggregateFunctionCount.h>\n #include <Common/scope_guard_safe.h>\n \n-#include <boost/range/adaptor/filtered.hpp>\n #include <boost/range/algorithm_ext/erase.hpp>\n #include <boost/algorithm/string/join.hpp>\n-#include <boost/algorithm/string/replace.hpp>\n \n #include <base/insertAtEnd.h>\n-#include <base/sort.h>\n \n #include <algorithm>\n #include <atomic>\n-#include <iomanip>\n #include <optional>\n #include <set>\n #include <thread>\ndiff --git a/src/Storages/MergeTree/MergeTreeDataPartWriterCompact.cpp b/src/Storages/MergeTree/MergeTreeDataPartWriterCompact.cpp\nindex 020121e59d79..4c1d117ac730 100644\n--- a/src/Storages/MergeTree/MergeTreeDataPartWriterCompact.cpp\n+++ b/src/Storages/MergeTree/MergeTreeDataPartWriterCompact.cpp\n@@ -110,7 +110,7 @@ Granules getGranulesToWrite(const MergeTreeIndexGranularity & index_granularity,\n             .is_complete = (rows_left_in_block >= expected_rows_in_mark)\n         });\n         current_row += result.back().rows_to_write;\n-        current_mark++;\n+        ++current_mark;\n     }\n \n     return result;\n@@ -146,6 +146,7 @@ void MergeTreeDataPartWriterCompact::write(const Block & block, const IColumn::P\n     if (compute_granularity)\n     {\n         size_t index_granularity_for_block = computeIndexGranularity(block);\n+        assert(index_granularity_for_block >= 1);\n         fillIndexGranularity(index_granularity_for_block, block.rows());\n     }\n \ndiff --git a/src/Storages/MergeTree/MergeTreeDataPartWriterOnDisk.cpp b/src/Storages/MergeTree/MergeTreeDataPartWriterOnDisk.cpp\nindex a887b0ee3222..fbcf8cb241c1 100644\n--- a/src/Storages/MergeTree/MergeTreeDataPartWriterOnDisk.cpp\n+++ b/src/Storages/MergeTree/MergeTreeDataPartWriterOnDisk.cpp\n@@ -135,7 +135,9 @@ static size_t computeIndexGranularityImpl(\n     size_t rows_in_block = block.rows();\n     size_t index_granularity_for_block;\n     if (!can_use_adaptive_index_granularity)\n+    {\n         index_granularity_for_block = fixed_index_granularity_rows;\n+    }\n     else\n     {\n         size_t block_size_in_memory = block.bytes();\n@@ -152,11 +154,13 @@ static size_t computeIndexGranularityImpl(\n             index_granularity_for_block = index_granularity_bytes / size_of_row_in_bytes;\n         }\n     }\n-    if (index_granularity_for_block == 0) /// very rare case when index granularity bytes less then single row\n-        index_granularity_for_block = 1;\n-\n     /// We should be less or equal than fixed index granularity\n     index_granularity_for_block = std::min(fixed_index_granularity_rows, index_granularity_for_block);\n+\n+    /// very rare case when index granularity bytes less then single row\n+    if (index_granularity_for_block == 0)\n+        index_granularity_for_block = 1;\n+\n     return index_granularity_for_block;\n }\n \ndiff --git a/src/Storages/MergeTree/MergeTreeSettings.cpp b/src/Storages/MergeTree/MergeTreeSettings.cpp\nindex 5b78a59687ba..2bf717c883a9 100644\n--- a/src/Storages/MergeTree/MergeTreeSettings.cpp\n+++ b/src/Storages/MergeTree/MergeTreeSettings.cpp\n@@ -99,6 +99,15 @@ void MergeTreeSettings::sanityCheck(size_t background_pool_tasks) const\n             background_pool_tasks);\n     }\n \n+    // Zero index_granularity is nonsensical.\n+    if (index_granularity < 1)\n+    {\n+        throw Exception(\n+            ErrorCodes::BAD_ARGUMENTS,\n+            \"index_granularity: value {} makes no sense\",\n+            index_granularity);\n+    }\n+\n     // The min_index_granularity_bytes value is 1024 b and index_granularity_bytes is 10 mb by default.\n     // If index_granularity_bytes is not disabled i.e > 0 b, then always ensure that it's greater than\n     // min_index_granularity_bytes. This is mainly a safeguard against accidents whereby a really low\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02514_bad_index_granularity.reference b/tests/queries/0_stateless/02514_bad_index_granularity.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/02514_bad_index_granularity.sql b/tests/queries/0_stateless/02514_bad_index_granularity.sql\nnew file mode 100644\nindex 000000000000..975af2d07283\n--- /dev/null\n+++ b/tests/queries/0_stateless/02514_bad_index_granularity.sql\n@@ -0,0 +1,7 @@\n+CREATE TABLE t\n+(\n+    id Int64,\n+    d String,\n+    p Map(String, String)\n+)\n+ENGINE = ReplacingMergeTree order by id settings index_granularity = 0; -- { serverError BAD_ARGUMENTS }\n",
  "problem_statement": "CH hangs with insertion (index_granularity  = 0)\n```sql\r\nCREATE TABLE t\r\n(\r\n   id Int64, \r\n   d String,\r\n   p Map(String, String)\r\n   \r\n)\r\nENGINE = ReplacingMergeTree order by id settings index_granularity  = 0;\r\n\r\n\r\ninsert into t values (1,  's', {'a':'b'});\r\n\r\nCH starts eating RAM until it crashes\r\n\r\nthe same with\r\n\r\ninsert into t select 1,  's', map('a','b');\r\n\r\n```\r\n\n",
  "hints_text": "I mistyped `index_granularity` instead of `index_granularity_bytes`\nReproduced.\r\n\r\n```\r\nmilovidov-desktop :) SELECT arrayStringConcat(arrayMap(x -> demangle(addressToSymbol(x)) || ': ' || addressToLine(x), trace), '\\n') FROM system.stack_trace WHERE query_id != '' \\G\r\n\r\nSELECT arrayStringConcat(arrayMap(x -> concat(demangle(addressToSymbol(x)), ': ', addressToLine(x)), trace), '\\n')\r\nFROM system.stack_trace\r\nWHERE query_id != ''\r\n\r\nQuery id: 690bd1a1-05f9-4263-857c-b72e99e422f4\r\n\r\nRow 1:\r\n\u2500\u2500\u2500\u2500\u2500\u2500\r\n...\r\n\r\nRow 2:\r\n\u2500\u2500\u2500\u2500\u2500\u2500\r\narrayStringConcat(arrayMap(lambda(tuple(x), concat(demangle(addressToSymbol(x)), ': ', addressToLine(x))), trace), '\\n'): : \r\nDB::MergeTreeIndexGranularity::appendMark(unsigned long): /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\nDB::MergeTreeDataPartWriterCompact::fillIndexGranularity(unsigned long, unsigned long): /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\nDB::MergeTreeDataPartWriterCompact::write(DB::Block const&, DB::PODArray<unsigned long, 4096ul, Allocator<false, false>, 63ul, 64ul> const*): /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\nDB::MergedBlockOutputStream::writeWithPermutation(DB::Block const&, DB::PODArray<unsigned long, 4096ul, Allocator<false, false>, 63ul, 64ul> const*): /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\nDB::MergeTreeDataWriter::writeTempPartImpl(DB::BlockWithPartition&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::__1::shared_ptr<DB::Context const>, long, bool): /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\nDB::MergeTreeDataWriter::writeTempPart(DB::BlockWithPartition&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::__1::shared_ptr<DB::Context const>): /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\nDB::MergeTreeSink::consume(DB::Chunk): /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\nDB::SinkToStorage::onConsume(DB::Chunk): /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\nvoid std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<DB::ExceptionKeepingTransform::work()::$_1, void ()>>(std::__1::__function::__policy_storage const*): /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\nDB::runStep(std::__1::function<void ()>, DB::ThreadStatus*, std::__1::atomic<unsigned long>*): /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\nDB::ExceptionKeepingTransform::work(): /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\nDB::ExecutionThreadContext::executeTask(): /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\nDB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*): /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\nDB::PipelineExecutor::executeStep(std::__1::atomic<bool>*): /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\nDB::TCPHandler::processInsertQuery(): /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\nDB::TCPHandler::runImpl(): /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\nDB::TCPHandler::run(): /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\nPoco::Net::TCPServerConnection::start(): /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\nPoco::Net::TCPServerDispatcher::run(): /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\nPoco::PooledThread::run(): /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\nPoco::ThreadImpl::runnableEntry(void*): /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n```",
  "created_at": "2022-12-25T15:09:18Z",
  "modified_files": [
    "src/Storages/MergeTree/MergeTreeData.cpp",
    "src/Storages/MergeTree/MergeTreeDataPartWriterCompact.cpp",
    "src/Storages/MergeTree/MergeTreeDataPartWriterOnDisk.cpp",
    "src/Storages/MergeTree/MergeTreeSettings.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02514_bad_index_granularity.sql"
  ]
}