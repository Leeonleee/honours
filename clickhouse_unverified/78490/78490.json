{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 78490,
  "instance_id": "ClickHouse__ClickHouse-78490",
  "issue_numbers": [
    "71050"
  ],
  "base_commit": "268b034eb470737e053e28ba5b86bc4577432da1",
  "patch": "diff --git a/src/Client/ClientBase.cpp b/src/Client/ClientBase.cpp\nindex 45388d290766..7d23d97562e5 100644\n--- a/src/Client/ClientBase.cpp\n+++ b/src/Client/ClientBase.cpp\n@@ -61,6 +61,7 @@\n #include <Interpreters/ReplaceQueryParameterVisitor.h>\n #include <Interpreters/ProfileEventsExt.h>\n #include <Interpreters/InterpreterSetQuery.h>\n+#include <Interpreters/processColumnTransformers.h>\n #include <IO/Ask.h>\n #include <IO/ReadHelpers.h>\n #include <IO/WriteBufferFromOStream.h>\n@@ -1903,6 +1904,19 @@ void ClientBase::sendData(Block & sample, const ColumnsDescription & columns_des\n             columns_for_storage_file.add(std::move(column));\n         }\n \n+        if (parsed_insert_query->columns)\n+        {\n+            auto columns = processColumnTransformers(client_context->getCurrentDatabase(), client_context->getInsertionTable(), columns_for_storage_file, parsed_insert_query->columns);\n+            ColumnsDescription reordered_description{};\n+            for (const auto & col_name : columns->children)\n+            {\n+                auto col = columns_for_storage_file.get(col_name->getColumnName());\n+                reordered_description.add(std::move(col));\n+            }\n+\n+            columns_for_storage_file = std::move(reordered_description);\n+        }\n+\n         StorageFile::CommonArguments args{\n             WithContext(client_context),\n             parsed_insert_query->table_id,\ndiff --git a/src/Interpreters/processColumnTransformers.cpp b/src/Interpreters/processColumnTransformers.cpp\nindex 5ef331eb1196..94b369ddf7f1 100644\n--- a/src/Interpreters/processColumnTransformers.cpp\n+++ b/src/Interpreters/processColumnTransformers.cpp\n@@ -12,27 +12,29 @@\n namespace DB\n {\n \n-ASTPtr processColumnTransformers(\n-        const String & current_database,\n-        const StoragePtr & table,\n-        const StorageMetadataPtr & metadata_snapshot,\n-        ASTPtr query_columns)\n+namespace\n+{\n+ASTPtr processColumnTransformersImpl(\n+    const ColumnsDescription & columns,\n+    const NamesAndTypesList & virtual_columns,\n+    ASTPtr query_columns,\n+    const String & current_database,\n+    const StorageID & storage_id)\n {\n-    const auto & columns = metadata_snapshot->getColumns();\n     auto names_and_types = columns.getOrdinary();\n     removeDuplicateColumns(names_and_types);\n \n     TablesWithColumns tables_with_columns;\n     {\n         auto table_expr = std::make_shared<ASTTableExpression>();\n-        table_expr->database_and_table_name = std::make_shared<ASTTableIdentifier>(table->getStorageID());\n+        table_expr->database_and_table_name = std::make_shared<ASTTableIdentifier>(storage_id);\n         table_expr->children.push_back(table_expr->database_and_table_name);\n         tables_with_columns.emplace_back(DatabaseAndTableWithAlias(*table_expr, current_database), names_and_types);\n     }\n \n     tables_with_columns[0].addHiddenColumns(columns.getMaterialized());\n     tables_with_columns[0].addHiddenColumns(columns.getAliases());\n-    tables_with_columns[0].addHiddenColumns(table->getVirtualsList());\n+    tables_with_columns[0].addHiddenColumns(virtual_columns);\n \n     NameSet source_columns_set;\n     for (const auto & identifier : query_columns->children)\n@@ -45,5 +47,24 @@ ASTPtr processColumnTransformers(\n \n     return columns_ast;\n }\n+}\n+\n+ASTPtr processColumnTransformers(\n+        const String & current_database,\n+        const StoragePtr & table,\n+        const StorageMetadataPtr & metadata_snapshot,\n+        ASTPtr query_columns)\n+{\n+    return processColumnTransformersImpl(metadata_snapshot->columns, table->getVirtualsList(), query_columns, current_database, table->getStorageID());\n+}\n+\n+ASTPtr processColumnTransformers(\n+        const String & current_database,\n+        const StorageID & table_id,\n+        const ColumnsDescription & columns,\n+        ASTPtr query_columns)\n+{\n+    return processColumnTransformersImpl(columns, {}, query_columns, current_database, table_id);\n+}\n \n }\ndiff --git a/src/Interpreters/processColumnTransformers.h b/src/Interpreters/processColumnTransformers.h\nindex 8c15cf60a022..7408b09563ca 100644\n--- a/src/Interpreters/processColumnTransformers.h\n+++ b/src/Interpreters/processColumnTransformers.h\n@@ -8,6 +8,8 @@ namespace DB\n \n struct StorageInMemoryMetadata;\n using StorageMetadataPtr = std::shared_ptr<const StorageInMemoryMetadata>;\n+class ColumnsDescription;\n+struct StorageID;\n \n /// Process column transformers (e.g. * EXCEPT(a)), asterisks and qualified columns.\n ASTPtr processColumnTransformers(\n@@ -16,4 +18,10 @@ ASTPtr processColumnTransformers(\n         const StorageMetadataPtr & metadata_snapshot,\n         ASTPtr query_columns);\n \n+ASTPtr processColumnTransformers(\n+        const String & current_database,\n+        const StorageID & table_id,\n+        const ColumnsDescription & columns,\n+        ASTPtr query_columns);\n+\n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02878_use_structure_from_insertion_table_with_explicit_insert_columns.reference b/tests/queries/0_stateless/02878_use_structure_from_insertion_table_with_explicit_insert_columns.reference\nindex 06f682a236f5..dce438dd7c24 100644\n--- a/tests/queries/0_stateless/02878_use_structure_from_insertion_table_with_explicit_insert_columns.reference\n+++ b/tests/queries/0_stateless/02878_use_structure_from_insertion_table_with_explicit_insert_columns.reference\n@@ -2,3 +2,6 @@\n 0\t0\n 42\t0\n 42\t0\n+42\tworld\n+42\tworld\n+42\tworld\ndiff --git a/tests/queries/0_stateless/02878_use_structure_from_insertion_table_with_explicit_insert_columns.sh b/tests/queries/0_stateless/02878_use_structure_from_insertion_table_with_explicit_insert_columns.sh\nindex dd08724456bd..1672550b01e7 100755\n--- a/tests/queries/0_stateless/02878_use_structure_from_insertion_table_with_explicit_insert_columns.sh\n+++ b/tests/queries/0_stateless/02878_use_structure_from_insertion_table_with_explicit_insert_columns.sh\n@@ -15,3 +15,16 @@ select * from test order by x;\n \"\n \n rm $CLICKHOUSE_TEST_UNIQUE_NAME.native\n+\n+$CLICKHOUSE_LOCAL -q \"select 'world' as y, 42 as x format Values\" > $CLICKHOUSE_TEST_UNIQUE_NAME.values\n+$CLICKHOUSE_LOCAL -q \"\n+create table test_infile (val UInt64, key String) engine=Memory;\n+insert into test_infile select * from file('$CLICKHOUSE_TEST_UNIQUE_NAME.values'); -- { serverError CANNOT_PARSE_TEXT }\n+insert into test_infile from infile '$CLICKHOUSE_TEST_UNIQUE_NAME.values' FORMAT Values; -- { clientError CANNOT_PARSE_TEXT }\n+insert into test_infile (key, val) from infile '$CLICKHOUSE_TEST_UNIQUE_NAME.values' FORMAT Values;\n+insert into test_infile (* EXCEPT 'val', * EXCEPT 'key') from infile '$CLICKHOUSE_TEST_UNIQUE_NAME.values' FORMAT Values;\n+insert into test_infile (* EXCEPT 'val', test_infile.val) from infile '$CLICKHOUSE_TEST_UNIQUE_NAME.values' FORMAT Values;\n+select * from test_infile order by key, val;\n+\"\n+\n+rm $CLICKHOUSE_TEST_UNIQUE_NAME.values\n",
  "problem_statement": "INSERT INTO FUNCTION seems to ignore column list\n**Describe the bug**\r\nBy issuing an `ALTER TABLE ... MODIFY COLUMN ... FIRST` before, the inserts go to the wrong columns.\r\n\r\n**How to reproduce**\r\nRun:\r\n\r\n```sql\r\nCREATE TABLE t0 (c0 Int, c1 Int) ENGINE = Memory();\r\nALTER TABLE t0 MODIFY COLUMN c1 Int FIRST;\r\nINSERT INTO TABLE t0 (c0, c1) VALUES (1, 2);\r\nSELECT c0, c1 FROM t0; --1, 2\r\nINSERT INTO TABLE FUNCTION file('<path to file>', 'CSV', 'c0 Int, c1 Int') SELECT c0, c1 FROM t0;\r\nTRUNCATE t0;\r\nINSERT INTO TABLE t0 (c0, c1) FROM INFILE '<path to file>' FORMAT CSV;\r\nSELECT c0, c1 FROM t0; --2, 1\r\n```\r\n\n",
  "hints_text": "Another case without alter:\n```sql\nCREATE TABLE t0 (c0 Int, c1 String) ENGINE = Memory;\nINSERT INTO TABLE t0 (c1, c0) VALUES ('b', 2), ('a', 1);\nSELECT c1, c0 FROM t0 ORDER BY c1, c0;\n/*\na 1\nb 2\n*/\nINSERT INTO TABLE FUNCTION file('<path to file>', 'Values', 'c1 String, c0 Int') SELECT c1, c0 FROM t0;\nTRUNCATE t0;\nINSERT INTO TABLE t0 (c1, c0) FROM INFILE '<path to file>' FORMAT Values; --parser error\n```\nOn this case, the table gets corrupted:\n\n```sql\nCREATE TABLE t0 (c0 Enum('a' = 1), c1 Int) ENGINE = MergeTree() PARTITION BY (c1, c0) ORDER BY tuple();\nINSERT INTO TABLE t0 (c0, c1) VALUES ('a', 2);\nINSERT INTO TABLE FUNCTION file('<path to file>', 'MsgPack', 'c1 Int, c0 Enum(\\'a\\' = 1)') SELECT c1, c0 FROM t0;\nINSERT INTO TABLE t0 (c1, c0) FROM INFILE '<path to file>' FORMAT MsgPack;\nDELETE FROM t0 WHERE c0 = 0;\n/*\n<Error> MergeTreeBackgroundExecutor: Exception while executing background task {24f5cb06-f04f-43e4-81c4-5ce0af4ef054::1-2_2_2_0_3}: Code: 691. DB::Exception: Unexpected value 2 in enum. (UNKNOWN_ELEMENT_OF_ENUM), Stack trace (when copying this message, always include the lines below):\n\n0. contrib/llvm-project/libcxx/include/__exception/exception.h:113: Poco::Exception::Exception(String const&, int) @ 0x000000001aa64192\n1. src/Common/Exception.cpp:108: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fc28b59\n2. src/Common/Exception.h:112: DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009f9d88c\n3. src/Common/Exception.h:130: DB::Exception::Exception<String>(int, FormatStringHelperImpl<std::type_identity<String>::type>, String&&) @ 0x0000000009f9d56b\n4. src/DataTypes/EnumValues.h:41: DB::EnumValues<_BitInt(8)>::findByValue(DB::EnumValues<_BitInt(8)> const&) const @ 0x000000000b157171\n5. src/DataTypes/EnumValues.h:54: DB::SerializationEnum<_BitInt(8)>::serializeTextQuoted(DB::IColumn const&, unsigned long, DB::WriteBuffer&, DB::FormatSettings const&) const @ 0x0000000013b312e9\n6. src/DataTypes/Serializations/SerializationTuple.cpp:144: DB::SerializationTuple::serializeText(DB::IColumn const&, unsigned long, DB::WriteBuffer&, DB::FormatSettings const&) const @ 0x0000000013ba7774\n7. src/Storages/MergeTree/MergeTreePartition.cpp:398: DB::MergeTreePartition::serializeText(std::shared_ptr<DB::StorageInMemoryMetadata const>, DB::WriteBuffer&, DB::FormatSettings const&) const @ 0x000000001631dc07\n8. src/Storages/MergeTree/MergeTreePartition.cpp:407: DB::MergeTreePartition::serializeToString(std::shared_ptr<DB::StorageInMemoryMetadata const>) const @ 0x000000001631df90\n9. src/Storages/MergeTree/MergeList.cpp:70: DB::MergeListElement::MergeListElement(DB::StorageID const&, std::shared_ptr<DB::FutureMergedMutatedPart>, std::shared_ptr<DB::Context const> const&) @ 0x000000001616374b\n10. contrib/llvm-project/libcxx/include/__memory/construct_at.h:41: std::__list_iterator<DB::MergeListElement, void*> std::list<DB::MergeListElement, std::allocator<DB::MergeListElement>>::emplace<DB::StorageID, std::shared_ptr<DB::FutureMergedMutatedPart>&, std::shared_ptr<DB::Context>&>(std::__list_const_iterator<DB::MergeListElement, void*>, DB::StorageID&&, std::shared_ptr<DB::FutureMergedMutatedPart>&, std::shared_ptr<DB::Context>&) @ 0x000000001616254f\n11. src/Storages/MergeTree/BackgroundProcessList.h:75: std::unique_ptr<DB::BackgroundProcessListEntry<DB::MergeListElement, DB::MergeInfo>, std::default_delete<DB::BackgroundProcessListEntry<DB::MergeListElement, DB::MergeInfo>>> DB::BackgroundProcessList<DB::MergeListElement, DB::MergeInfo>::insert<DB::StorageID, std::shared_ptr<DB::FutureMergedMutatedPart>&, std::shared_ptr<DB::Context>&>(DB::StorageID&&, std::shared_ptr<DB::FutureMergedMutatedPart>&, std::shared_ptr<DB::Context>&) @ 0x0000000016161576\n12. src/Storages/MergeTree/MutatePlainMergeTreeTask.cpp:39: DB::MutatePlainMergeTreeTask::prepare() @ 0x00000000165127b4\n13. src/Storages/MergeTree/MutatePlainMergeTreeTask.cpp:92: DB::MutatePlainMergeTreeTask::executeStep() @ 0x0000000016512e65\n14. src/Storages/MergeTree/MergeTreeBackgroundExecutor.cpp:318: DB::MergeTreeBackgroundExecutor<DB::DynamicRuntimeQueue>::routine(std::shared_ptr<DB::TaskRuntimeData>) @ 0x00000000161969f0\n15. src/Storages/MergeTree/MergeTreeBackgroundExecutor.cpp:363: DB::MergeTreeBackgroundExecutor<DB::DynamicRuntimeQueue>::threadFunction() @ 0x0000000016197333\n16. contrib/llvm-project/libcxx/include/__functional/function.h:716: ? @ 0x000000000fd40973\n17. contrib/llvm-project/libcxx/include/__type_traits/invoke.h:117: ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()() @ 0x000000000fd467e2\n18. contrib/llvm-project/libcxx/include/__functional/function.h:716: ? @ 0x000000000fd3e0b2\n19. contrib/llvm-project/libcxx/include/__type_traits/invoke.h:117: void* std::__thread_proxy[abi:se190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000000fd443a0\n20. ? @ 0x00007ffff7ca1e2e\n21. ? @ 0x00007ffff7d33a4c\n*/\n```",
  "created_at": "2025-03-31T18:35:30Z"
}