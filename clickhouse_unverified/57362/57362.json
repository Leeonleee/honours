{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 57362,
  "instance_id": "ClickHouse__ClickHouse-57362",
  "issue_numbers": [
    "54962"
  ],
  "base_commit": "4c0efb026234961d977c3100c48adb7afe346bc0",
  "patch": "diff --git a/src/TableFunctions/TableFunctionDictionary.cpp b/src/TableFunctions/TableFunctionDictionary.cpp\nindex 5249487f1f5a..867fbf5b11e4 100644\n--- a/src/TableFunctions/TableFunctionDictionary.cpp\n+++ b/src/TableFunctions/TableFunctionDictionary.cpp\n@@ -2,6 +2,8 @@\n \n #include <Parsers/ASTLiteral.h>\n \n+#include <Access/Common/AccessFlags.h>\n+\n #include <DataTypes/DataTypeArray.h>\n #include <DataTypes/DataTypeString.h>\n #include <DataTypes/DataTypesNumber.h>\n@@ -78,6 +80,7 @@ ColumnsDescription TableFunctionDictionary::getActualTableStructure(ContextPtr c\n StoragePtr TableFunctionDictionary::executeImpl(\n     const ASTPtr &, ContextPtr context, const std::string & table_name, ColumnsDescription, bool is_insert_query) const\n {\n+    context->checkAccess(AccessType::dictGet, getDatabaseName(), table_name);\n     StorageID dict_id(getDatabaseName(), table_name);\n     auto dictionary_table_structure = getActualTableStructure(context, is_insert_query);\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02916_dictionary_access.reference b/tests/queries/0_stateless/02916_dictionary_access.reference\nnew file mode 100644\nindex 000000000000..d7d02e376899\n--- /dev/null\n+++ b/tests/queries/0_stateless/02916_dictionary_access.reference\n@@ -0,0 +1,3 @@\n+0\n+ACCESS_DENIED\n+ACCESS_DENIED\ndiff --git a/tests/queries/0_stateless/02916_dictionary_access.sh b/tests/queries/0_stateless/02916_dictionary_access.sh\nnew file mode 100755\nindex 000000000000..08ee517ab3b1\n--- /dev/null\n+++ b/tests/queries/0_stateless/02916_dictionary_access.sh\n@@ -0,0 +1,37 @@\n+#!/usr/bin/env bash\n+\n+CUR_DIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CUR_DIR\"/../shell_config.sh\n+\n+username=\"user_${CLICKHOUSE_TEST_UNIQUE_NAME}\"\n+dictname=\"dict_${CLICKHOUSE_TEST_UNIQUE_NAME}\"\n+\n+${CLICKHOUSE_CLIENT} -nm --query \"\n+    CREATE DICTIONARY IF NOT EXISTS ${dictname}\n+    (\n+        id UInt64,\n+        value UInt64\n+    )\n+    PRIMARY KEY id\n+    SOURCE(NULL())\n+    LAYOUT(FLAT())\n+    LIFETIME(MIN 0 MAX 1000);\n+    CREATE USER IF NOT EXISTS ${username} NOT IDENTIFIED;\n+    GRANT CREATE TEMPORARY TABLE ON *.* to ${username};\n+    SELECT * FROM dictionary(${dictname});\n+    SELECT dictGet(${dictname}, 'value', 1);\n+\"\n+\n+$CLICKHOUSE_CLIENT -nm --user=\"${username}\" --query \"\n+    SELECT * FROM dictionary(${dictname});\n+\" 2>&1 | grep -o ACCESS_DENIED | uniq\n+\n+$CLICKHOUSE_CLIENT -nm --user=\"${username}\" --query \"\n+    SELECT dictGet(${dictname}, 'value', 1);\n+\" 2>&1 | grep -o ACCESS_DENIED | uniq\n+\n+${CLICKHOUSE_CLIENT} -nm --query \"\n+    DROP DICTIONARY IF EXISTS ${dictname};\n+    DROP USER IF EXISTS ${username};\n+\"\n",
  "problem_statement": "non-granted dictionary can be accessed through table function\n## Problem\r\n**Describe the unexpected behaviour**\r\nA clear and concise description of what works not as it is supposed to.\r\n\r\nA user with `CREATE TEMPORARY TABLE ON *.*` can read any dictionary. Even those which will raise `ACCESS_DENIED` when accesses through `dictGet`\r\n\r\n\r\n##  Steps to reproduce\r\nClickhouse version `23.8.2`\r\nAs `admin` user\r\n```\r\nCREATE DICTIONARY dict\r\n(\r\n    id UInt64,\r\n    value String\r\n)\r\nPRIMARY KEY id\r\nSOURCE(NULL())\r\nLAYOUT(FLAT())\r\nLIFETIME(MIN 0 MAX 1000);\r\n\r\nCREATE USER user NOT IDENTIFIED;\r\ngrant CREATE TEMPORARY TABLE ON *.* to user;\r\n```\r\nAs user `user`\r\n```\r\nselect dictGet(dict, 'value', 1); // ACCESS_DENIED\r\nselect * from dictionary(dict); // OK\r\n```\r\n\r\n## Expected behavior\r\nThe same access checks should apply for select `dictGet` and `select * from dictionary`\n",
  "hints_text": "",
  "created_at": "2023-11-29T13:57:53Z",
  "modified_files": [
    "src/TableFunctions/TableFunctionDictionary.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02916_dictionary_access.reference",
    "b/tests/queries/0_stateless/02916_dictionary_access.sh"
  ]
}