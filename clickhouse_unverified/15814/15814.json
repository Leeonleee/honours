{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 15814,
  "instance_id": "ClickHouse__ClickHouse-15814",
  "issue_numbers": [
    "15776"
  ],
  "base_commit": "554fa482e656630fc080d7995405ce4010e6fa5f",
  "patch": "diff --git a/src/DataStreams/FilterBlockInputStream.cpp b/src/DataStreams/FilterBlockInputStream.cpp\ndeleted file mode 100644\nindex 83b36c97db77..000000000000\n--- a/src/DataStreams/FilterBlockInputStream.cpp\n+++ /dev/null\n@@ -1,192 +0,0 @@\n-#include <Columns/ColumnsNumber.h>\n-#include <Columns/ColumnsCommon.h>\n-#include <Columns/ColumnConst.h>\n-#include <Columns/FilterDescription.h>\n-#include <Interpreters/ExpressionActions.h>\n-#include <Common/typeid_cast.h>\n-\n-#include <DataStreams/FilterBlockInputStream.h>\n-\n-\n-namespace DB\n-{\n-\n-namespace ErrorCodes\n-{\n-}\n-\n-\n-FilterBlockInputStream::FilterBlockInputStream(const BlockInputStreamPtr & input, ExpressionActionsPtr expression_,\n-                                               String filter_column_name_, bool remove_filter_)\n-    : remove_filter(remove_filter_)\n-    , expression(std::move(expression_))\n-    , filter_column_name(std::move(filter_column_name_))\n-{\n-    children.push_back(input);\n-\n-    /// Determine position of filter column.\n-    header = input->getHeader();\n-    expression->execute(header);\n-\n-    filter_column = header.getPositionByName(filter_column_name);\n-    auto & column_elem = header.safeGetByPosition(filter_column);\n-\n-    /// Isn't the filter already constant?\n-    if (column_elem.column)\n-        constant_filter_description = ConstantFilterDescription(*column_elem.column);\n-\n-    if (!constant_filter_description.always_false\n-        && !constant_filter_description.always_true)\n-    {\n-        /// Replace the filter column to a constant with value 1.\n-        FilterDescription filter_description_check(*column_elem.column);\n-        column_elem.column = column_elem.type->createColumnConst(header.rows(), 1u);\n-    }\n-\n-    if (remove_filter)\n-        header.erase(filter_column_name);\n-}\n-\n-\n-String FilterBlockInputStream::getName() const { return \"Filter\"; }\n-\n-\n-Block FilterBlockInputStream::getTotals()\n-{\n-    totals = children.back()->getTotals();\n-    expression->execute(totals);\n-\n-    return totals;\n-}\n-\n-\n-Block FilterBlockInputStream::getHeader() const\n-{\n-    return header;\n-}\n-\n-\n-Block FilterBlockInputStream::readImpl()\n-{\n-    Block res;\n-\n-    if (constant_filter_description.always_false)\n-        return removeFilterIfNeed(std::move(res));\n-\n-    if (expression->checkColumnIsAlwaysFalse(filter_column_name))\n-        return {};\n-\n-    /// Until non-empty block after filtering or end of stream.\n-    while (true)\n-    {\n-        res = children.back()->read();\n-        if (!res)\n-            return res;\n-\n-        expression->execute(res);\n-\n-        if (constant_filter_description.always_true)\n-            return removeFilterIfNeed(std::move(res));\n-\n-        size_t columns = res.columns();\n-        ColumnPtr column = res.safeGetByPosition(filter_column).column;\n-\n-        /** It happens that at the stage of analysis of expressions (in sample_block) the columns-constants have not been calculated yet,\n-            *  and now - are calculated. That is, not all cases are covered by the code above.\n-            * This happens if the function returns a constant for a non-constant argument.\n-            * For example, `ignore` function.\n-            */\n-        constant_filter_description = ConstantFilterDescription(*column);\n-\n-        if (constant_filter_description.always_false)\n-        {\n-            res.clear();\n-            return res;\n-        }\n-\n-        if (constant_filter_description.always_true)\n-            return removeFilterIfNeed(std::move(res));\n-\n-        FilterDescription filter_and_holder(*column);\n-\n-        /** Let's find out how many rows will be in result.\n-          * To do this, we filter out the first non-constant column\n-          *  or calculate number of set bytes in the filter.\n-          */\n-        size_t first_non_constant_column = 0;\n-        for (size_t i = 0; i < columns; ++i)\n-        {\n-            if (!isColumnConst(*res.safeGetByPosition(i).column))\n-            {\n-                first_non_constant_column = i;\n-\n-                if (first_non_constant_column != static_cast<size_t>(filter_column))\n-                    break;\n-            }\n-        }\n-\n-        size_t filtered_rows = 0;\n-        if (first_non_constant_column != static_cast<size_t>(filter_column))\n-        {\n-            ColumnWithTypeAndName & current_column = res.safeGetByPosition(first_non_constant_column);\n-            current_column.column = current_column.column->filter(*filter_and_holder.data, -1);\n-            filtered_rows = current_column.column->size();\n-        }\n-        else\n-        {\n-            filtered_rows = countBytesInFilter(*filter_and_holder.data);\n-        }\n-\n-        /// If the current block is completely filtered out, let's move on to the next one.\n-        if (filtered_rows == 0)\n-            continue;\n-\n-        /// If all the rows pass through the filter.\n-        if (filtered_rows == filter_and_holder.data->size())\n-        {\n-            /// Replace the column with the filter by a constant.\n-            res.safeGetByPosition(filter_column).column = res.safeGetByPosition(filter_column).type->createColumnConst(filtered_rows, 1u);\n-            /// No need to touch the rest of the columns.\n-            return removeFilterIfNeed(std::move(res));\n-        }\n-\n-        /// Filter the rest of the columns.\n-        for (size_t i = 0; i < columns; ++i)\n-        {\n-            ColumnWithTypeAndName & current_column = res.safeGetByPosition(i);\n-\n-            if (i == static_cast<size_t>(filter_column))\n-            {\n-                /// The column with filter itself is replaced with a column with a constant `1`, since after filtering, nothing else will remain.\n-                /// NOTE User could pass column with something different than 0 and 1 for filter.\n-                /// Example:\n-                ///  SELECT materialize(100) AS x WHERE x\n-                /// will work incorrectly.\n-                current_column.column = current_column.type->createColumnConst(filtered_rows, 1u);\n-                continue;\n-            }\n-\n-            if (i == first_non_constant_column)\n-                continue;\n-\n-            if (isColumnConst(*current_column.column))\n-                current_column.column = current_column.column->cut(0, filtered_rows);\n-            else\n-                current_column.column = current_column.column->filter(*filter_and_holder.data, -1);\n-        }\n-\n-        return removeFilterIfNeed(std::move(res));\n-    }\n-}\n-\n-\n-Block FilterBlockInputStream::removeFilterIfNeed(Block && block) const\n-{\n-    if (block && remove_filter)\n-        block.erase(static_cast<size_t>(filter_column));\n-\n-    return std::move(block);\n-}\n-\n-\n-}\ndiff --git a/src/DataStreams/FilterBlockInputStream.h b/src/DataStreams/FilterBlockInputStream.h\ndeleted file mode 100644\nindex a60f8e8d6990..000000000000\n--- a/src/DataStreams/FilterBlockInputStream.h\n+++ /dev/null\n@@ -1,46 +0,0 @@\n-#pragma once\n-\n-#include <DataStreams/IBlockInputStream.h>\n-#include <Columns/FilterDescription.h>\n-\n-\n-namespace DB\n-{\n-\n-class ExpressionActions;\n-\n-\n-/** Implements WHERE, HAVING operations.\n-  * A stream of blocks and an expression, which adds to the block one ColumnUInt8 column containing the filtering conditions, are passed as input.\n-  * The expression is evaluated and a stream of blocks is returned, which contains only the filtered rows.\n-  */\n-class FilterBlockInputStream : public IBlockInputStream\n-{\n-private:\n-    using ExpressionActionsPtr = std::shared_ptr<ExpressionActions>;\n-\n-public:\n-    FilterBlockInputStream(const BlockInputStreamPtr & input, ExpressionActionsPtr expression_,\n-                           String filter_column_name_, bool remove_filter_ = false);\n-\n-    String getName() const override;\n-    Block getTotals() override;\n-    Block getHeader() const override;\n-\n-protected:\n-    Block readImpl() override;\n-\n-    bool remove_filter;\n-\n-private:\n-    ExpressionActionsPtr expression;\n-    Block header;\n-    String filter_column_name;\n-    ssize_t filter_column;\n-\n-    ConstantFilterDescription constant_filter_description;\n-\n-    Block removeFilterIfNeed(Block && block) const;\n-};\n-\n-}\ndiff --git a/src/DataStreams/OneBlockInputStream.h b/src/DataStreams/OneBlockInputStream.h\nindex 06f945b58038..d401082ce623 100644\n--- a/src/DataStreams/OneBlockInputStream.h\n+++ b/src/DataStreams/OneBlockInputStream.h\n@@ -7,7 +7,6 @@ namespace DB\n {\n \n /** A stream of blocks from which you can read one block.\n-  * Also see BlocksListBlockInputStream.\n   */\n class OneBlockInputStream : public IBlockInputStream\n {\ndiff --git a/src/DataStreams/PushingToViewsBlockOutputStream.cpp b/src/DataStreams/PushingToViewsBlockOutputStream.cpp\nindex dc28d59b5324..3baa2b30c3fe 100644\n--- a/src/DataStreams/PushingToViewsBlockOutputStream.cpp\n+++ b/src/DataStreams/PushingToViewsBlockOutputStream.cpp\n@@ -1,6 +1,7 @@\n #include <DataStreams/ConvertingBlockInputStream.h>\n #include <DataStreams/PushingToViewsBlockOutputStream.h>\n #include <DataStreams/SquashingBlockInputStream.h>\n+#include <DataStreams/OneBlockInputStream.h>\n #include <DataTypes/NestedUtils.h>\n #include <Interpreters/InterpreterSelectQuery.h>\n #include <Interpreters/InterpreterInsertQuery.h>\ndiff --git a/src/DataStreams/PushingToViewsBlockOutputStream.h b/src/DataStreams/PushingToViewsBlockOutputStream.h\nindex ca09126a5612..18dc3ffd8009 100644\n--- a/src/DataStreams/PushingToViewsBlockOutputStream.h\n+++ b/src/DataStreams/PushingToViewsBlockOutputStream.h\n@@ -2,7 +2,6 @@\n \n #include <DataStreams/copyData.h>\n #include <DataStreams/IBlockOutputStream.h>\n-#include <DataStreams/OneBlockInputStream.h>\n #include <DataStreams/MaterializingBlockInputStream.h>\n #include <Storages/StorageMaterializedView.h>\n \ndiff --git a/src/DataStreams/ya.make b/src/DataStreams/ya.make\nindex 636224678d77..0c46e42d4565 100644\n--- a/src/DataStreams/ya.make\n+++ b/src/DataStreams/ya.make\n@@ -25,7 +25,6 @@ SRCS(\n     DistinctSortedBlockInputStream.cpp\n     ExecutionSpeedLimits.cpp\n     ExpressionBlockInputStream.cpp\n-    FilterBlockInputStream.cpp\n     finalizeBlock.cpp\n     IBlockInputStream.cpp\n     InputStreamFromASTInsertQuery.cpp\ndiff --git a/src/Interpreters/ActionsVisitor.cpp b/src/Interpreters/ActionsVisitor.cpp\nindex 344107366054..e0e921b003bb 100644\n--- a/src/Interpreters/ActionsVisitor.cpp\n+++ b/src/Interpreters/ActionsVisitor.cpp\n@@ -15,8 +15,6 @@\n #include <DataTypes/DataTypeLowCardinality.h>\n #include <DataTypes/FieldToDataType.h>\n \n-#include <DataStreams/LazyBlockInputStream.h>\n-\n #include <Columns/ColumnSet.h>\n #include <Columns/ColumnConst.h>\n \ndiff --git a/src/Interpreters/ClusterProxy/SelectStreamFactory.cpp b/src/Interpreters/ClusterProxy/SelectStreamFactory.cpp\nindex ed7bd2cf71fc..c642b84afca8 100644\n--- a/src/Interpreters/ClusterProxy/SelectStreamFactory.cpp\n+++ b/src/Interpreters/ClusterProxy/SelectStreamFactory.cpp\n@@ -97,7 +97,6 @@ auto createLocalPipe(\n     /* Now we don't need to materialize constants, because RemoteBlockInputStream will ignore constant and take it from header.\n      * So, streams from different threads will always have the same header.\n      */\n-    /// return std::make_shared<MaterializingBlockInputStream>(stream);\n \n     pipeline.setMaxThreads(1);\n     return QueryPipeline::getPipe(std::move(pipeline));\ndiff --git a/src/Interpreters/InterpreterWatchQuery.cpp b/src/Interpreters/InterpreterWatchQuery.cpp\nindex 30316a2dd791..757a2d1738b4 100644\n--- a/src/Interpreters/InterpreterWatchQuery.cpp\n+++ b/src/Interpreters/InterpreterWatchQuery.cpp\n@@ -16,7 +16,6 @@ limitations under the License. */\n #include <Interpreters/Context.h>\n #include <Access/AccessFlags.h>\n #include <DataStreams/IBlockInputStream.h>\n-#include <DataStreams/OneBlockInputStream.h>\n #include <DataStreams/StreamLocalLimits.h>\n \n \ndiff --git a/src/Interpreters/JoinSwitcher.h b/src/Interpreters/JoinSwitcher.h\nindex 23f5dff54d7a..1fd719cd5dc9 100644\n--- a/src/Interpreters/JoinSwitcher.h\n+++ b/src/Interpreters/JoinSwitcher.h\n@@ -5,7 +5,8 @@\n #include <Core/Block.h>\n #include <Interpreters/IJoin.h>\n #include <Interpreters/TableJoin.h>\n-#include <DataStreams/OneBlockInputStream.h>\n+#include <DataStreams/IBlockInputStream.h>\n+\n \n namespace DB\n {\ndiff --git a/src/Interpreters/MergeJoin.cpp b/src/Interpreters/MergeJoin.cpp\nindex c9072ec34804..665ec4d60f3b 100644\n--- a/src/Interpreters/MergeJoin.cpp\n+++ b/src/Interpreters/MergeJoin.cpp\n@@ -10,12 +10,12 @@\n #include <DataStreams/materializeBlock.h>\n #include <DataStreams/TemporaryFileStream.h>\n #include <Processors/Sources/SourceFromInputStream.h>\n-#include <DataStreams/OneBlockInputStream.h>\n #include <Processors/QueryPipeline.h>\n #include <Processors/Transforms/MergeSortingTransform.h>\n #include <Processors/Executors/PipelineExecutingBlockInputStream.h>\n #include <DataStreams/BlocksListBlockInputStream.h>\n \n+\n namespace DB\n {\n \ndiff --git a/src/Interpreters/SubqueryForSet.cpp b/src/Interpreters/SubqueryForSet.cpp\nindex 17ea813c545c..6ca0ecc50c82 100644\n--- a/src/Interpreters/SubqueryForSet.cpp\n+++ b/src/Interpreters/SubqueryForSet.cpp\n@@ -3,7 +3,7 @@\n #include <Interpreters/IJoin.h>\n #include <Interpreters/MergeJoin.h>\n #include <Interpreters/ExpressionActions.h>\n-#include <DataStreams/LazyBlockInputStream.h>\n+\n \n namespace DB\n {\ndiff --git a/src/Processors/Merges/Algorithms/SummingSortedAlgorithm.cpp b/src/Processors/Merges/Algorithms/SummingSortedAlgorithm.cpp\nindex 080dbc00c2c0..17e5e4364ffd 100644\n--- a/src/Processors/Merges/Algorithms/SummingSortedAlgorithm.cpp\n+++ b/src/Processors/Merges/Algorithms/SummingSortedAlgorithm.cpp\n@@ -440,7 +440,7 @@ static void setRow(Row & row, const ColumnRawPtrs & raw_columns, size_t row_num,\n             if (i < column_names.size())\n                 column_name = column_names[i];\n \n-            throw Exception(\"MergingSortedBlockInputStream failed to read row \" + toString(row_num)\n+            throw Exception(\"SummingSortedAlgorithm failed to read row \" + toString(row_num)\n                             + \" of column \" + toString(i) + (column_name.empty() ? \"\" : \" (\" + column_name + \")\"),\n                             ErrorCodes::CORRUPTED_DATA);\n         }\ndiff --git a/src/Storages/Kafka/StorageKafka.cpp b/src/Storages/Kafka/StorageKafka.cpp\nindex 02b34c6b3f26..a63a43097753 100644\n--- a/src/Storages/Kafka/StorageKafka.cpp\n+++ b/src/Storages/Kafka/StorageKafka.cpp\n@@ -2,7 +2,6 @@\n #include <Storages/Kafka/parseSyslogLevel.h>\n \n #include <DataStreams/IBlockInputStream.h>\n-#include <DataStreams/LimitBlockInputStream.h>\n #include <DataStreams/UnionBlockInputStream.h>\n #include <DataStreams/copyData.h>\n #include <DataTypes/DataTypeDateTime.h>\ndiff --git a/src/Storages/LiveView/LiveViewEventsBlockInputStream.h b/src/Storages/LiveView/LiveViewEventsBlockInputStream.h\nindex 4060b17c1ede..0df78b981b97 100644\n--- a/src/Storages/LiveView/LiveViewEventsBlockInputStream.h\n+++ b/src/Storages/LiveView/LiveViewEventsBlockInputStream.h\n@@ -16,7 +16,6 @@ limitations under the License. */\n #include <DataTypes/DataTypeString.h>\n #include <Columns/ColumnString.h>\n #include <Columns/ColumnsNumber.h>\n-#include <DataStreams/OneBlockInputStream.h>\n #include <DataStreams/IBlockInputStream.h>\n #include <Storages/LiveView/StorageLiveView.h>\n \ndiff --git a/src/Storages/LiveView/StorageLiveView.cpp b/src/Storages/LiveView/StorageLiveView.cpp\nindex 7095357a161e..33fb1f4e2fab 100644\n--- a/src/Storages/LiveView/StorageLiveView.cpp\n+++ b/src/Storages/LiveView/StorageLiveView.cpp\n@@ -16,7 +16,6 @@ limitations under the License. */\n #include <Interpreters/Context.h>\n #include <Interpreters/InterpreterSelectQuery.h>\n #include <DataStreams/IBlockOutputStream.h>\n-#include <DataStreams/OneBlockInputStream.h>\n #include <DataStreams/BlocksSource.h>\n #include <DataStreams/MaterializingBlockInputStream.h>\n #include <DataStreams/SquashingBlockInputStream.h>\ndiff --git a/src/Storages/RabbitMQ/StorageRabbitMQ.cpp b/src/Storages/RabbitMQ/StorageRabbitMQ.cpp\nindex 78aad9e6a2d6..6565afeb32de 100644\n--- a/src/Storages/RabbitMQ/StorageRabbitMQ.cpp\n+++ b/src/Storages/RabbitMQ/StorageRabbitMQ.cpp\n@@ -1,7 +1,6 @@\n #include <Storages/RabbitMQ/StorageRabbitMQ.h>\n #include <DataStreams/IBlockInputStream.h>\n #include <DataStreams/ConvertingBlockInputStream.h>\n-#include <DataStreams/LimitBlockInputStream.h>\n #include <DataStreams/UnionBlockInputStream.h>\n #include <DataStreams/copyData.h>\n #include <DataTypes/DataTypeDateTime.h>\ndiff --git a/src/Storages/StorageDistributed.cpp b/src/Storages/StorageDistributed.cpp\nindex b06434b63172..81815be7afb9 100644\n--- a/src/Storages/StorageDistributed.cpp\n+++ b/src/Storages/StorageDistributed.cpp\n@@ -1,7 +1,5 @@\n #include <Storages/StorageDistributed.h>\n \n-#include <DataStreams/OneBlockInputStream.h>\n-\n #include <Databases/IDatabase.h>\n #include <Disks/StoragePolicy.h>\n #include <Disks/DiskLocal.h>\ndiff --git a/src/Storages/StorageFile.cpp b/src/Storages/StorageFile.cpp\nindex 8f7e1563a629..63b38a6e0260 100644\n--- a/src/Storages/StorageFile.cpp\n+++ b/src/Storages/StorageFile.cpp\n@@ -17,7 +17,6 @@\n #include <DataStreams/IBlockInputStream.h>\n #include <DataStreams/IBlockOutputStream.h>\n #include <DataStreams/AddingDefaultsBlockInputStream.h>\n-#include <DataStreams/narrowBlockInputStreams.h>\n \n #include <Common/escapeForFileName.h>\n #include <Common/typeid_cast.h>\ndiff --git a/src/Storages/StorageHDFS.cpp b/src/Storages/StorageHDFS.cpp\nindex 65b1eed7793b..1d72107bc7bf 100644\n--- a/src/Storages/StorageHDFS.cpp\n+++ b/src/Storages/StorageHDFS.cpp\n@@ -17,7 +17,6 @@\n #include <DataStreams/IBlockOutputStream.h>\n #include <DataStreams/OwningBlockInputStream.h>\n #include <DataStreams/IBlockInputStream.h>\n-#include <DataStreams/narrowBlockInputStreams.h>\n \n #include <Common/parseGlobs.h>\n #include <Poco/URI.h>\ndiff --git a/src/Storages/StorageNull.h b/src/Storages/StorageNull.h\nindex b5387c6b924c..44dbda3b15df 100644\n--- a/src/Storages/StorageNull.h\n+++ b/src/Storages/StorageNull.h\n@@ -4,7 +4,6 @@\n \n #include <Core/NamesAndTypes.h>\n #include <Storages/IStorage.h>\n-#include <DataStreams/NullBlockInputStream.h>\n #include <DataStreams/NullBlockOutputStream.h>\n #include <Processors/Sources/NullSource.h>\n #include <Processors/Pipe.h>\ndiff --git a/src/Storages/StorageReplicatedMergeTree.cpp b/src/Storages/StorageReplicatedMergeTree.cpp\nindex bfb61f163eeb..2ac8ddb7846c 100644\n--- a/src/Storages/StorageReplicatedMergeTree.cpp\n+++ b/src/Storages/StorageReplicatedMergeTree.cpp\n@@ -47,7 +47,6 @@\n #include <Interpreters/Context.h>\n \n #include <DataStreams/RemoteBlockInputStream.h>\n-#include <DataStreams/NullBlockOutputStream.h>\n #include <DataStreams/copyData.h>\n \n #include <Poco/DirectoryIterator.h>\ndiff --git a/src/Storages/StorageStripeLog.cpp b/src/Storages/StorageStripeLog.cpp\nindex c4344cf6f1fd..d24c171caa57 100644\n--- a/src/Storages/StorageStripeLog.cpp\n+++ b/src/Storages/StorageStripeLog.cpp\n@@ -18,7 +18,6 @@\n #include <DataStreams/IBlockOutputStream.h>\n #include <DataStreams/NativeBlockInputStream.h>\n #include <DataStreams/NativeBlockOutputStream.h>\n-#include <DataStreams/NullBlockInputStream.h>\n \n #include <DataTypes/DataTypeFactory.h>\n \ndiff --git a/src/Storages/StorageValues.cpp b/src/Storages/StorageValues.cpp\nindex a07d49fd3f82..140a3c62eae5 100644\n--- a/src/Storages/StorageValues.cpp\n+++ b/src/Storages/StorageValues.cpp\n@@ -1,7 +1,6 @@\n #include <Storages/IStorage.h>\n #include <Storages/ColumnsDescription.h>\n #include <Storages/StorageValues.h>\n-#include <DataStreams/OneBlockInputStream.h>\n #include <Processors/Sources/SourceFromSingleChunk.h>\n #include <Processors/Pipe.h>\n \ndiff --git a/src/Storages/System/StorageSystemColumns.cpp b/src/Storages/System/StorageSystemColumns.cpp\nindex 8a7368d5ace7..17378f8d6bf9 100644\n--- a/src/Storages/System/StorageSystemColumns.cpp\n+++ b/src/Storages/System/StorageSystemColumns.cpp\n@@ -5,7 +5,6 @@\n #include <Columns/ColumnString.h>\n #include <DataTypes/DataTypeString.h>\n #include <DataTypes/DataTypesNumber.h>\n-#include <DataStreams/NullBlockInputStream.h>\n #include <Storages/VirtualColumnUtils.h>\n #include <Parsers/queryToString.h>\n #include <Parsers/ASTSelectQuery.h>\ndiff --git a/src/Storages/System/StorageSystemDetachedParts.cpp b/src/Storages/System/StorageSystemDetachedParts.cpp\nindex 5a233ed7a33b..bc5b3593991a 100644\n--- a/src/Storages/System/StorageSystemDetachedParts.cpp\n+++ b/src/Storages/System/StorageSystemDetachedParts.cpp\n@@ -3,7 +3,6 @@\n #include <DataTypes/DataTypeString.h>\n #include <DataTypes/DataTypesNumber.h>\n #include <DataTypes/DataTypeNullable.h>\n-#include <DataStreams/OneBlockInputStream.h>\n #include <ext/shared_ptr_helper.h>\n #include <Storages/IStorage.h>\n #include <Storages/System/StorageSystemPartsBase.h>\ndiff --git a/src/Storages/System/StorageSystemDisks.cpp b/src/Storages/System/StorageSystemDisks.cpp\nindex ed831927f161..4e9a654025af 100644\n--- a/src/Storages/System/StorageSystemDisks.cpp\n+++ b/src/Storages/System/StorageSystemDisks.cpp\n@@ -1,4 +1,3 @@\n-#include <DataStreams/OneBlockInputStream.h>\n #include <Storages/System/StorageSystemDisks.h>\n #include <Processors/Sources/SourceFromSingleChunk.h>\n #include <Interpreters/Context.h>\ndiff --git a/src/Storages/System/StorageSystemMutations.cpp b/src/Storages/System/StorageSystemMutations.cpp\nindex 04dc8f1024ae..32f672b84017 100644\n--- a/src/Storages/System/StorageSystemMutations.cpp\n+++ b/src/Storages/System/StorageSystemMutations.cpp\n@@ -3,7 +3,6 @@\n #include <DataTypes/DataTypesNumber.h>\n #include <DataTypes/DataTypeDateTime.h>\n #include <DataTypes/DataTypeArray.h>\n-#include <DataStreams/OneBlockInputStream.h>\n #include <Storages/MergeTree/MergeTreeData.h>\n #include <Storages/MergeTree/MergeTreeMutationStatus.h>\n #include <Storages/VirtualColumnUtils.h>\ndiff --git a/src/Storages/System/StorageSystemParts.cpp b/src/Storages/System/StorageSystemParts.cpp\nindex 06171fc39ba9..757aea661e2d 100644\n--- a/src/Storages/System/StorageSystemParts.cpp\n+++ b/src/Storages/System/StorageSystemParts.cpp\n@@ -7,7 +7,6 @@\n #include <DataTypes/DataTypesNumber.h>\n #include <DataTypes/DataTypeDateTime.h>\n #include <DataTypes/DataTypeDate.h>\n-#include <DataStreams/OneBlockInputStream.h>\n #include <Storages/VirtualColumnUtils.h>\n #include <Databases/IDatabase.h>\n #include <Parsers/queryToString.h>\ndiff --git a/src/Storages/System/StorageSystemPartsBase.cpp b/src/Storages/System/StorageSystemPartsBase.cpp\nindex f590244116d7..faa2ec0e1c33 100644\n--- a/src/Storages/System/StorageSystemPartsBase.cpp\n+++ b/src/Storages/System/StorageSystemPartsBase.cpp\n@@ -6,7 +6,6 @@\n #include <DataTypes/DataTypesNumber.h>\n #include <DataTypes/DataTypeDateTime.h>\n #include <DataTypes/DataTypeDate.h>\n-#include <DataStreams/OneBlockInputStream.h>\n #include <Storages/MergeTree/MergeTreeData.h>\n #include <Storages/VirtualColumnUtils.h>\n #include <Access/ContextAccess.h>\ndiff --git a/src/Storages/System/StorageSystemPartsColumns.cpp b/src/Storages/System/StorageSystemPartsColumns.cpp\nindex 0851e389e4fd..c570cc85e8bb 100644\n--- a/src/Storages/System/StorageSystemPartsColumns.cpp\n+++ b/src/Storages/System/StorageSystemPartsColumns.cpp\n@@ -6,7 +6,6 @@\n #include <DataTypes/DataTypesNumber.h>\n #include <DataTypes/DataTypeDateTime.h>\n #include <DataTypes/DataTypeDate.h>\n-#include <DataStreams/OneBlockInputStream.h>\n #include <Storages/VirtualColumnUtils.h>\n #include <Databases/IDatabase.h>\n #include <Parsers/queryToString.h>\ndiff --git a/src/Storages/System/StorageSystemReplicas.cpp b/src/Storages/System/StorageSystemReplicas.cpp\nindex f28ecdb7f653..7ab6e939815d 100644\n--- a/src/Storages/System/StorageSystemReplicas.cpp\n+++ b/src/Storages/System/StorageSystemReplicas.cpp\n@@ -2,7 +2,6 @@\n #include <DataTypes/DataTypeString.h>\n #include <DataTypes/DataTypesNumber.h>\n #include <DataTypes/DataTypeDateTime.h>\n-#include <DataStreams/OneBlockInputStream.h>\n #include <Storages/System/StorageSystemReplicas.h>\n #include <Storages/StorageReplicatedMergeTree.h>\n #include <Storages/VirtualColumnUtils.h>\ndiff --git a/src/Storages/System/StorageSystemStoragePolicies.cpp b/src/Storages/System/StorageSystemStoragePolicies.cpp\nindex c8d266644ebe..415e7ce2c783 100644\n--- a/src/Storages/System/StorageSystemStoragePolicies.cpp\n+++ b/src/Storages/System/StorageSystemStoragePolicies.cpp\n@@ -2,7 +2,6 @@\n \n #include <Columns/ColumnArray.h>\n #include <Columns/ColumnNullable.h>\n-#include <DataStreams/OneBlockInputStream.h>\n #include <DataTypes/DataTypeArray.h>\n #include <DataTypes/DataTypeNullable.h>\n #include <Processors/Sources/SourceFromSingleChunk.h>\ndiff --git a/src/Storages/System/StorageSystemTables.cpp b/src/Storages/System/StorageSystemTables.cpp\nindex 0ad961ad7d86..78a6ef9b1e0c 100644\n--- a/src/Storages/System/StorageSystemTables.cpp\n+++ b/src/Storages/System/StorageSystemTables.cpp\n@@ -3,7 +3,6 @@\n #include <DataTypes/DataTypeString.h>\n #include <DataTypes/DataTypeDateTime.h>\n #include <DataTypes/DataTypeNullable.h>\n-#include <DataStreams/OneBlockInputStream.h>\n #include <Storages/System/StorageSystemTables.h>\n #include <Storages/VirtualColumnUtils.h>\n #include <Databases/IDatabase.h>\n",
  "test_patch": "diff --git a/src/DataStreams/tests/CMakeLists.txt b/src/DataStreams/tests/CMakeLists.txt\nindex d01c79aee5fc..e69de29bb2d1 100644\n--- a/src/DataStreams/tests/CMakeLists.txt\n+++ b/src/DataStreams/tests/CMakeLists.txt\n@@ -1,4 +0,0 @@\n-set(SRCS)\n-\n-add_executable (finish_sorting_stream finish_sorting_stream.cpp ${SRCS})\n-target_link_libraries (finish_sorting_stream PRIVATE clickhouse_aggregate_functions dbms)\ndiff --git a/src/DataStreams/tests/finish_sorting_stream.cpp b/src/DataStreams/tests/finish_sorting_stream.cpp\ndeleted file mode 100644\nindex 7ce342d3e8ea..000000000000\n--- a/src/DataStreams/tests/finish_sorting_stream.cpp\n+++ /dev/null\n@@ -1,132 +0,0 @@\n-#include <iostream>\n-#include <iomanip>\n-#include <pcg_random.hpp>\n-\n-#include <DataTypes/DataTypesNumber.h>\n-#include <Columns/ColumnsNumber.h>\n-#include <Core/SortDescription.h>\n-\n-#include <Interpreters/sortBlock.h>\n-#include <Processors/Transforms/FinishSortingTransform.h>\n-#include <Processors/Sources/SourceFromInputStream.h>\n-#include <Processors/QueryPipeline.h>\n-#include <Processors/Executors/PipelineExecutingBlockInputStream.h>\n-#include <Processors/Transforms/MergeSortingTransform.h>\n-#include <DataStreams/BlocksListBlockInputStream.h>\n-\n-\n-using namespace DB;\n-\n-namespace DB\n-{\n-    namespace ErrorCodes\n-    {\n-        extern const int LOGICAL_ERROR;\n-    }\n-}\n-\n-\n-int main(int argc, char ** argv)\n-{\n-    pcg64 rng;\n-\n-    try\n-    {\n-        size_t m = argc >= 2 ? std::stol(argv[1]) : 2;\n-        size_t n = argc >= 3 ? std::stol(argv[2]) : 10;\n-\n-        SortDescription sort_descr;\n-        sort_descr.emplace_back(\"col1\", 1, 1);\n-        Block block_header;\n-        BlocksList blocks;\n-\n-        for (size_t t = 0; t < m; ++t)\n-        {\n-            Block block;\n-            for (size_t i = 0; i < 2; ++i)\n-            {\n-                ColumnWithTypeAndName column;\n-                column.name = \"col\" + std::to_string(i + 1);\n-                column.type = std::make_shared<DataTypeInt32>();\n-\n-                auto col = ColumnInt32::create();\n-                auto & vec = col->getData();\n-                vec.resize(n);\n-\n-                for (size_t j = 0; j < n; ++j)\n-                    vec[j] = rng() % 10;\n-\n-                column.column = std::move(col);\n-                block.insert(column);\n-            }\n-\n-            if (!block_header)\n-                block_header = block.cloneEmpty();\n-\n-            sortBlock(block, sort_descr);\n-            blocks.emplace_back(std::move(block));\n-        }\n-\n-        auto blocks_stream = std::make_shared<BlocksListBlockInputStream>(std::move(blocks));\n-        Pipe source(std::make_shared<SourceFromInputStream>(std::move(blocks_stream)));\n-        QueryPipeline pipeline;\n-        pipeline.init(std::move(source));\n-\n-        pipeline.addTransform(std::make_shared<MergeSortingTransform>(pipeline.getHeader(), sort_descr, n, 0, 0, 0, nullptr, 0));\n-\n-        SortDescription sort_descr_final;\n-        sort_descr_final.emplace_back(\"col1\", 1, 1);\n-        sort_descr_final.emplace_back(\"col2\", 1, 1);\n-\n-        pipeline.addSimpleTransform([&](const Block & header)\n-        {\n-            return std::make_shared<FinishSortingTransform>(header, sort_descr, sort_descr_final, n, 0);\n-        });\n-\n-        auto stream = std::make_shared<PipelineExecutingBlockInputStream>(std::move(pipeline));\n-\n-        {\n-            Stopwatch stopwatch;\n-            stopwatch.start();\n-\n-            Block res_block = block_header;\n-\n-            while (Block block = stream->read())\n-            {\n-                for (size_t i = 0; i < block.columns(); ++i)\n-                {\n-                    MutableColumnPtr ptr = IColumn::mutate(std::move(res_block.getByPosition(i).column));\n-                    ptr->insertRangeFrom(*block.getByPosition(i).column.get(), 0, block.rows());\n-                }\n-            }\n-\n-            if (res_block.rows() != n * m)\n-                throw Exception(\"Result block size mismatch\", ErrorCodes::LOGICAL_ERROR);\n-\n-            const auto & columns = res_block.getColumns();\n-\n-            for (size_t i = 1; i < res_block.rows(); ++i)\n-                for (const auto & col : columns)\n-                {\n-                    int res = col->compareAt(i - 1, i, *col, 1);\n-                    if (res < 0)\n-                        break;\n-                    else if (res > 0)\n-                        throw Exception(\"Result stream not sorted\", ErrorCodes::LOGICAL_ERROR);\n-                }\n-\n-            stopwatch.stop();\n-            std::cout << std::fixed << std::setprecision(2)\n-                << \"Elapsed \" << stopwatch.elapsedSeconds() << \" sec.\"\n-                << \", \" << n / stopwatch.elapsedSeconds() << \" rows/sec.\"\n-                << std::endl;\n-        }\n-    }\n-    catch (const Exception & e)\n-    {\n-        std::cerr << e.displayText() << std::endl;\n-        return -1;\n-    }\n-\n-    return 0;\n-}\n",
  "problem_statement": "test finish_sorting_stream can not work properly\n**Describe the bug**\r\n\r\n**How to reproduce**\r\njust run test finish_sorting_stream\r\n\r\n**Expected behavior**\r\nWork as expection\r\n\r\n**Error message and/or stacktrace**\r\nwhen run finish_sorting_stream in DEBUG mode, i got the following errors:\r\n\r\n```\r\nAssertion failed: (false), function Exception, file /Users/xxxxxxx/OpenSource/ClickHouse/src/Common/Exception.cpp, line 45.\r\nSignal: SIGABRT (signal SIGABRT)\r\nTerminated due to signal 6\r\n```\r\n\r\n**Additional context**\r\n\r\n```C++\r\n            Block res_block = block_header;\r\n\r\n            while (Block block = stream->read())\r\n            {\r\n                for (size_t i = 0; i < block.columns(); ++i)\r\n                {\r\n                    MutableColumnPtr ptr = IColumn::mutate(std::move(res_block.getByPosition(i).column));\r\n                    ptr->insertRangeFrom(*block.getByPosition(i).column.get(), 0, block.rows());\r\n                }\r\n            }\r\n```\r\n\r\nI believe there were some changed invariants, after the first iteration, \r\n `res_block.getByPosition(i).column` becomes null.\r\n\n",
  "hints_text": "By reading comments from COW.h I can fix the null ptr\r\n```c++\r\nfor (size_t i = 0; i < block.columns(); ++i)\r\n{\r\n    MutableColumnPtr ptr = IColumn::mutate(std::move(res_block.getByPosition(i).column));\r\n    ptr->insertRangeFrom(*block.getByPosition(i).column.get(), 0, block.rows());\r\n    res_block.getByPosition(i).column = std::move(ptr);\r\n}\r\n```\r\n\r\nBUT, failed at check whether the stream is sorted or not\r\n\r\n``` C++\r\n// will failed at check the second cols\r\nfor (size_t i = 1; i < res_block.rows(); ++i)\r\n    for (const auto & col : columns)\r\n    {\r\n        int res = col->compareAt(i - 1, i, *col, 1);\r\n        if (res < 0)\r\n            break;\r\n        else if (res > 0)\r\n            throw Exception(\"Result stream not sorted\", ErrorCodes::LOGICAL_ERROR);\r\n    }\r\n``` \r\n\r\nAnyone can share information about how to fix it? \nAs the test is not automated (It's not a unit test, it's not a functional test. I wouldn't even say that it's a test - it's just an example program), the simplest solution is to remove it. FinishSorting transform is well covered by functional tests.",
  "created_at": "2020-10-10T16:31:35Z"
}