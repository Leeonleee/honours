{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 9227,
  "instance_id": "ClickHouse__ClickHouse-9227",
  "issue_numbers": [
    "8669"
  ],
  "base_commit": "3e0b76a07753d0a655dcca76db6b5a4a070e4748",
  "patch": "diff --git a/dbms/src/Interpreters/InterpreterAlterQuery.cpp b/dbms/src/Interpreters/InterpreterAlterQuery.cpp\nindex b155019187bc..841b1504d2f9 100644\n--- a/dbms/src/Interpreters/InterpreterAlterQuery.cpp\n+++ b/dbms/src/Interpreters/InterpreterAlterQuery.cpp\n@@ -109,7 +109,7 @@ BlockIO InterpreterAlterQuery::execute()\n         auto table_lock_holder = table->lockAlterIntention(context.getCurrentQueryId());\n         StorageInMemoryMetadata metadata = table->getInMemoryMetadata();\n         alter_commands.validate(metadata, context);\n-        alter_commands.prepare(metadata, context);\n+        alter_commands.prepare(metadata);\n         table->checkAlterIsPossible(alter_commands, context.getSettingsRef());\n         table->alter(alter_commands, context, table_lock_holder);\n     }\ndiff --git a/dbms/src/Interpreters/evaluateMissingDefaults.cpp b/dbms/src/Interpreters/evaluateMissingDefaults.cpp\nindex bef414887932..d2907c0f0e48 100644\n--- a/dbms/src/Interpreters/evaluateMissingDefaults.cpp\n+++ b/dbms/src/Interpreters/evaluateMissingDefaults.cpp\n@@ -7,6 +7,8 @@\n #include <Interpreters/ExpressionActions.h>\n #include <Parsers/ASTExpressionList.h>\n #include <Parsers/ASTWithAlias.h>\n+#include <Parsers/ASTLiteral.h>\n+#include <Parsers/ASTFunction.h>\n #include <utility>\n #include <DataTypes/DataTypesNumber.h>\n \n@@ -27,8 +29,10 @@ static ASTPtr requiredExpressions(Block & block, const NamesAndTypesList & requi\n \n         /// expressions must be cloned to prevent modification by the ExpressionAnalyzer\n         if (it != column_defaults.end())\n-            default_expr_list->children.emplace_back(\n-                setAlias(it->second.expression->clone(), it->first));\n+        {\n+            auto cast_func = makeASTFunction(\"CAST\", it->second.expression->clone(), std::make_shared<ASTLiteral>(column.type->getName()));\n+            default_expr_list->children.emplace_back(setAlias(cast_func, it->first));\n+        }\n     }\n \n     if (default_expr_list->children.empty())\ndiff --git a/dbms/src/Storages/AlterCommands.cpp b/dbms/src/Storages/AlterCommands.cpp\nindex d37ea2235f11..49286108e649 100644\n--- a/dbms/src/Storages/AlterCommands.cpp\n+++ b/dbms/src/Storages/AlterCommands.cpp\n@@ -7,14 +7,14 @@\n #include <Interpreters/SyntaxAnalyzer.h>\n #include <Interpreters/ExpressionAnalyzer.h>\n #include <Interpreters/ExpressionActions.h>\n-#include <Parsers/ASTIdentifier.h>\n-#include <Parsers/ASTIndexDeclaration.h>\n+#include <Parsers/ASTAlterQuery.h>\n+#include <Parsers/ASTColumnDeclaration.h>\n #include <Parsers/ASTConstraintDeclaration.h>\n #include <Parsers/ASTExpressionList.h>\n-#include <Parsers/ASTLiteral.h>\n #include <Parsers/ASTFunction.h>\n-#include <Parsers/ASTAlterQuery.h>\n-#include <Parsers/ASTColumnDeclaration.h>\n+#include <Parsers/ASTIdentifier.h>\n+#include <Parsers/ASTIndexDeclaration.h>\n+#include <Parsers/ASTLiteral.h>\n #include <Parsers/ASTSetQuery.h>\n #include <Parsers/ASTCreateQuery.h>\n #include <Common/typeid_cast.h>\n@@ -30,8 +30,10 @@ namespace ErrorCodes\n {\n     extern const int ILLEGAL_COLUMN;\n     extern const int BAD_ARGUMENTS;\n+    extern const int NOT_FOUND_COLUMN_IN_BLOCK;\n     extern const int LOGICAL_ERROR;\n     extern const int UNKNOWN_SETTING;\n+    extern const int DUPLICATE_COLUMN;\n }\n \n \n@@ -498,189 +500,98 @@ void AlterCommands::apply(StorageInMemoryMetadata & metadata) const\n }\n \n \n-void AlterCommands::prepare(const StorageInMemoryMetadata & metadata, const Context & context)\n+void AlterCommands::prepare(const StorageInMemoryMetadata & metadata)\n {\n-    /// A temporary object that is used to keep track of the current state of columns after applying a subset of commands.\n     auto columns = metadata.columns;\n \n-    /// Default expressions will be added to this list for type deduction.\n-    auto default_expr_list = std::make_shared<ASTExpressionList>();\n-    /// We will save ALTER ADD/MODIFY command indices (only the last for each column) for possible modification\n-    /// (we might need to add deduced types or modify default expressions).\n-    /// Saving indices because we can add new commands later and thus cause vector resize.\n-    std::unordered_map<String, size_t> column_to_command_idx;\n-\n     for (size_t i = 0; i < size(); ++i)\n     {\n         auto & command = (*this)[i];\n-        if (command.type == AlterCommand::ADD_COLUMN || command.type == AlterCommand::MODIFY_COLUMN)\n+        bool has_column = columns.has(command.column_name) || columns.hasNested(command.column_name);\n+        if (command.type == AlterCommand::MODIFY_COLUMN)\n         {\n-            const auto & column_name = command.column_name;\n-\n-            if (command.type == AlterCommand::ADD_COLUMN)\n-            {\n-                if (columns.has(column_name) || columns.hasNested(column_name))\n-                {\n-                    if (command.if_not_exists)\n-                        command.ignore = true;\n-                }\n-            }\n-            else if (command.type == AlterCommand::MODIFY_COLUMN)\n-            {\n-                if (!columns.has(column_name))\n-                    if (command.if_exists)\n-                        command.ignore = true;\n-\n-                if (!command.ignore)\n-                    columns.remove(column_name);\n-            }\n+            if (!has_column && command.if_exists)\n+                command.ignore = true;\n \n-            if (!command.ignore)\n+            if (has_column && command.data_type)\n             {\n-                column_to_command_idx[column_name] = i;\n-\n-                /// we're creating dummy DataTypeUInt8 in order to prevent the NullPointerException in ExpressionActions\n-                columns.add(\n-                    ColumnDescription(column_name, command.data_type ? command.data_type : std::make_shared<DataTypeUInt8>(), false));\n-\n-                if (command.default_expression)\n+                auto column_from_table = columns.get(command.column_name);\n+                if (!command.default_expression && column_from_table.default_desc.expression)\n                 {\n-                    if (command.data_type)\n-                    {\n-                        const auto & final_column_name = column_name;\n-                        const auto tmp_column_name = final_column_name + \"_tmp\";\n-\n-                        default_expr_list->children.emplace_back(setAlias(\n-                            makeASTFunction(\"CAST\", std::make_shared<ASTIdentifier>(tmp_column_name),\n-                                std::make_shared<ASTLiteral>(command.data_type->getName())),\n-                            final_column_name));\n-\n-                        default_expr_list->children.emplace_back(setAlias(command.default_expression->clone(), tmp_column_name));\n-                    }\n-                    else\n-                    {\n-                        /// no type explicitly specified, will deduce later\n-                        default_expr_list->children.emplace_back(\n-                            setAlias(command.default_expression->clone(), column_name));\n-                    }\n+                    command.default_kind = column_from_table.default_desc.kind;\n+                    command.default_expression = column_from_table.default_desc.expression;\n                 }\n             }\n         }\n-        else if (command.type == AlterCommand::DROP_COLUMN)\n+        else if (command.type == AlterCommand::ADD_COLUMN)\n         {\n-            if (columns.has(command.column_name) || columns.hasNested(command.column_name))\n-                columns.remove(command.column_name);\n-            else if (command.if_exists)\n+            if (has_column && command.if_not_exists)\n                 command.ignore = true;\n         }\n-        else if (command.type == AlterCommand::COMMENT_COLUMN)\n+        else if (command.type == AlterCommand::DROP_COLUMN\n+                || command.type == AlterCommand::COMMENT_COLUMN)\n         {\n-            if (!columns.has(command.column_name) && command.if_exists)\n+            if (!has_column && command.if_exists)\n                 command.ignore = true;\n         }\n     }\n-\n-    /** Existing defaulted columns may require default expression extensions with a type conversion,\n-        *  therefore we add them to default_expr_list to recalculate their types */\n-    for (const auto & column : columns)\n-    {\n-        if (column.default_desc.expression)\n-        {\n-            const auto tmp_column_name = column.name + \"_tmp\";\n-\n-            default_expr_list->children.emplace_back(setAlias(\n-                    makeASTFunction(\"CAST\", std::make_shared<ASTIdentifier>(tmp_column_name),\n-                        std::make_shared<ASTLiteral>(column.type->getName())),\n-                    column.name));\n-\n-            default_expr_list->children.emplace_back(setAlias(column.default_desc.expression->clone(), tmp_column_name));\n-        }\n-    }\n-\n-    ASTPtr query = default_expr_list;\n-    auto syntax_result = SyntaxAnalyzer(context).analyze(query, columns.getAll());\n-    const auto actions = ExpressionAnalyzer(query, syntax_result, context).getActions(true);\n-    const auto block = actions->getSampleBlock();\n-\n-    /// set deduced types, modify default expression if necessary\n-    for (const auto & column : columns)\n-    {\n-        AlterCommand * command = nullptr;\n-        auto command_it = column_to_command_idx.find(column.name);\n-        if (command_it != column_to_command_idx.end())\n-            command = &(*this)[command_it->second];\n-\n-        if (!(command && command->default_expression) && !column.default_desc.expression)\n-            continue;\n-\n-        const DataTypePtr & explicit_type = command ? command->data_type : column.type;\n-        if (explicit_type)\n-        {\n-            const auto & tmp_column = block.getByName(column.name + \"_tmp\");\n-            const auto & deduced_type = tmp_column.type;\n-            if (!explicit_type->equals(*deduced_type))\n-            {\n-                if (!command)\n-                {\n-#if !__clang__\n-#    pragma GCC diagnostic push\n-#    pragma GCC diagnostic ignored \"-Wmissing-field-initializers\"\n-#endif\n-                    /// We completely sure, that we initialize all required fields\n-                    AlterCommand aux_command{\n-                        .type = AlterCommand::MODIFY_COLUMN,\n-                        .column_name = column.name,\n-                        .data_type = explicit_type,\n-                        .default_kind = column.default_desc.kind,\n-                        .default_expression = column.default_desc.expression\n-                    };\n-#if !__clang__\n-#    pragma GCC diagnostic pop\n-#endif\n-\n-                    /// column has no associated alter command, let's create it\n-                    /// add a new alter command to modify existing column\n-                    this->emplace_back(aux_command);\n-\n-                    command = &back();\n-                }\n-\n-                command->default_expression = makeASTFunction(\"CAST\",\n-                    command->default_expression->clone(),\n-                    std::make_shared<ASTLiteral>(explicit_type->getName()));\n-            }\n-        }\n-        else\n-        {\n-            /// just set deduced type\n-            command->data_type = block.getByName(column.name).type;\n-        }\n-    }\n     prepared = true;\n }\n \n void AlterCommands::validate(const StorageInMemoryMetadata & metadata, const Context & context) const\n {\n+    auto all_columns = metadata.columns;\n     for (size_t i = 0; i < size(); ++i)\n     {\n         auto & command = (*this)[i];\n-        if (command.type == AlterCommand::ADD_COLUMN || command.type == AlterCommand::MODIFY_COLUMN)\n-        {\n-            const auto & column_name = command.column_name;\n \n-            if (command.type == AlterCommand::ADD_COLUMN)\n+        const auto & column_name = command.column_name;\n+        if (command.type == AlterCommand::ADD_COLUMN)\n+        {\n+            if (metadata.columns.has(column_name) || metadata.columns.hasNested(column_name))\n             {\n-                if (metadata.columns.has(column_name) || metadata.columns.hasNested(column_name))\n-                    if (!command.if_not_exists)\n-                        throw Exception{\"Cannot add column \" + column_name + \": column with this name already exists\", ErrorCodes::ILLEGAL_COLUMN};\n+                if (!command.if_not_exists)\n+                    throw Exception{\"Cannot add column \" + backQuote(column_name) + \": column with this name already exists\",\n+                                    ErrorCodes::DUPLICATE_COLUMN};\n+                else\n+                    continue;\n             }\n-            else if (command.type == AlterCommand::MODIFY_COLUMN)\n+\n+            if (!command.data_type)\n+                throw Exception{\"Data type have to be specified for column \" + backQuote(column_name) + \" to add\",\n+                                ErrorCodes::BAD_ARGUMENTS};\n+\n+            if (command.default_expression)\n+                validateDefaultExpressionForColumn(command.default_expression, column_name, command.data_type, all_columns, context);\n+\n+            all_columns.add(ColumnDescription(column_name, command.data_type, false));\n+        }\n+        else if (command.type == AlterCommand::MODIFY_COLUMN)\n+        {\n+            if (!metadata.columns.has(column_name))\n             {\n-                if (!metadata.columns.has(column_name))\n-                    if (!command.if_exists)\n-                        throw Exception{\"Wrong column name. Cannot find column \" + column_name + \" to modify\", ErrorCodes::ILLEGAL_COLUMN};\n+                if (!command.if_exists)\n+                    throw Exception{\"Wrong column name. Cannot find column \" + backQuote(column_name) + \" to modify\",\n+                                    ErrorCodes::NOT_FOUND_COLUMN_IN_BLOCK};\n+                else\n+                    continue;\n             }\n \n+            auto column_in_table = metadata.columns.get(column_name);\n+            if (command.default_expression)\n+            {\n+                if (!command.data_type)\n+                    validateDefaultExpressionForColumn(\n+                        command.default_expression, column_name, column_in_table.type, all_columns, context);\n+                else\n+                    validateDefaultExpressionForColumn(\n+                        command.default_expression, column_name, command.data_type, all_columns, context);\n+            }\n+            else if (column_in_table.default_desc.expression && command.data_type)\n+            {\n+                validateDefaultExpressionForColumn(\n+                    column_in_table.default_desc.expression, column_name, command.data_type, all_columns, context);\n+            }\n         }\n         else if (command.type == AlterCommand::DROP_COLUMN)\n         {\n@@ -689,35 +600,61 @@ void AlterCommands::validate(const StorageInMemoryMetadata & metadata, const Con\n                 for (const ColumnDescription & column : metadata.columns)\n                 {\n                     const auto & default_expression = column.default_desc.expression;\n-                    if (!default_expression)\n-                        continue;\n-\n-                    ASTPtr query = default_expression->clone();\n-                    auto syntax_result = SyntaxAnalyzer(context).analyze(query, metadata.columns.getAll());\n-                    const auto actions = ExpressionAnalyzer(query, syntax_result, context).getActions(true);\n-                    const auto required_columns = actions->getRequiredColumns();\n-\n-                    if (required_columns.end() != std::find(required_columns.begin(), required_columns.end(), command.column_name))\n-                        throw Exception(\n-                            \"Cannot drop column \" + command.column_name + \", because column \" + column.name +\n-                            \" depends on it\", ErrorCodes::ILLEGAL_COLUMN);\n+                    if (default_expression)\n+                    {\n+                        ASTPtr query = default_expression->clone();\n+                        auto syntax_result = SyntaxAnalyzer(context).analyze(query, metadata.columns.getAll());\n+                        const auto actions = ExpressionAnalyzer(query, syntax_result, context).getActions(true);\n+                        const auto required_columns = actions->getRequiredColumns();\n+\n+                        if (required_columns.end() != std::find(required_columns.begin(), required_columns.end(), command.column_name))\n+                            throw Exception(\n+                                \"Cannot drop column \" + backQuote(command.column_name) + \", because column \" + backQuote(column.name) + \" depends on it\",\n+                                ErrorCodes::ILLEGAL_COLUMN);\n+                    }\n                 }\n             }\n             else if (!command.if_exists)\n-                throw Exception(\"Wrong column name. Cannot find column \" + command.column_name + \" to drop\",\n-                    ErrorCodes::ILLEGAL_COLUMN);\n+                throw Exception(\n+                    \"Wrong column name. Cannot find column \" + backQuote(command.column_name) + \" to drop\",\n+                    ErrorCodes::NOT_FOUND_COLUMN_IN_BLOCK);\n         }\n         else if (command.type == AlterCommand::COMMENT_COLUMN)\n         {\n             if (!metadata.columns.has(command.column_name))\n             {\n                 if (!command.if_exists)\n-                    throw Exception{\"Wrong column name. Cannot find column \" + command.column_name + \" to comment\", ErrorCodes::ILLEGAL_COLUMN};\n+                    throw Exception{\"Wrong column name. Cannot find column \" + backQuote(command.column_name) + \" to comment\",\n+                                    ErrorCodes::NOT_FOUND_COLUMN_IN_BLOCK};\n             }\n         }\n     }\n }\n \n+void AlterCommands::validateDefaultExpressionForColumn(\n+    const ASTPtr default_expression,\n+    const String & column_name,\n+    const DataTypePtr column_type,\n+    const ColumnsDescription & all_columns,\n+    const Context & context) const\n+{\n+\n+    try\n+    {\n+        String tmp_column_name = \"__tmp\" + column_name;\n+        auto copy_expression = default_expression->clone();\n+        auto default_with_cast = makeASTFunction(\"CAST\", copy_expression, std::make_shared<ASTLiteral>(column_type->getName()));\n+        auto query_with_alias = setAlias(default_with_cast, tmp_column_name);\n+        auto syntax_result = SyntaxAnalyzer(context).analyze(query_with_alias, all_columns.getAll());\n+        ExpressionAnalyzer(query_with_alias, syntax_result, context).getActions(true);\n+    }\n+    catch (Exception & ex)\n+    {\n+        ex.addMessage(\"default expression and column type are incompatible. Cannot alter column \" + backQuote(column_name));\n+        throw;\n+    }\n+}\n+\n bool AlterCommands::isModifyingData() const\n {\n     for (const auto & param : *this)\ndiff --git a/dbms/src/Storages/AlterCommands.h b/dbms/src/Storages/AlterCommands.h\nindex b2de48e515ab..2b070f93f6d0 100644\n--- a/dbms/src/Storages/AlterCommands.h\n+++ b/dbms/src/Storages/AlterCommands.h\n@@ -4,7 +4,7 @@\n #include <Core/NamesAndTypes.h>\n #include <Storages/IStorage_fwd.h>\n #include <Storages/StorageInMemoryMetadata.h>\n-\n+#include <Storages/ColumnsDescription.h>\n \n #include <Common/SettingsChanges.h>\n \n@@ -117,6 +117,17 @@ class AlterCommands : public std::vector<AlterCommand>\n {\n private:\n     bool prepared = false;\n+private:\n+\n+    /// Validate that default expression and type are compatible, i.e. default\n+    /// expression result can be casted to column_type\n+    void validateDefaultExpressionForColumn(\n+        const ASTPtr default_expression,\n+        const String & column_name,\n+        const DataTypePtr column_type,\n+        const ColumnsDescription & all_columns,\n+        const Context & context) const;\n+\n public:\n     /// Validate that commands can be applied to metadata.\n     /// Checks that all columns exist and dependecies between them.\n@@ -124,9 +135,9 @@ class AlterCommands : public std::vector<AlterCommand>\n     /// More accurate check have to be performed with storage->checkAlterIsPossible.\n     void validate(const StorageInMemoryMetadata & metadata, const Context & context) const;\n \n-    /// Prepare alter commands. Set ignore flag to some of them\n-    /// and additional commands for dependent columns.\n-    void prepare(const StorageInMemoryMetadata & metadata, const Context & context);\n+    /// Prepare alter commands. Set ignore flag to some of them and set some\n+    /// parts to commands from storage's metadata (for example, absent default)\n+    void prepare(const StorageInMemoryMetadata & metadata);\n \n     /// Apply all alter command in sequential order to storage metadata.\n     /// Commands have to be prepared before apply.\n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/00061_merge_tree_alter.reference b/dbms/tests/queries/0_stateless/00061_merge_tree_alter.reference\nindex c7050040e8fa..571affd7231a 100644\n--- a/dbms/tests/queries/0_stateless/00061_merge_tree_alter.reference\n+++ b/dbms/tests/queries/0_stateless/00061_merge_tree_alter.reference\n@@ -38,8 +38,8 @@ k\tUInt64\n i32\tInt32\t\t\t\t\t\n n.ui8\tArray(UInt8)\t\t\t\t\t\n n.s\tArray(String)\t\t\t\t\t\n-s\tInt64\t\t\t\t\t\n-CREATE TABLE default.alter_00061 (`d` Date, `k` UInt64, `i32` Int32, `n.ui8` Array(UInt8), `n.s` Array(String), `s` Int64) ENGINE = MergeTree(d, k, 8192)\n+s\tInt64\tDEFAULT\t\\'0\\'\t\t\t\n+CREATE TABLE default.alter_00061 (`d` Date, `k` UInt64, `i32` Int32, `n.ui8` Array(UInt8), `n.s` Array(String), `s` Int64 DEFAULT \\'0\\') ENGINE = MergeTree(d, k, 8192)\n 2015-01-01\t6\t38\t[10,20,30]\t['asd','qwe','qwe']\t100500\n 2015-01-01\t7\t39\t[10,20,30]\t['120','130','140']\t0\n 2015-01-01\t8\t40\t[1,2,3]\t['12','13','14']\t0\n@@ -49,9 +49,9 @@ k\tUInt64\n i32\tInt32\t\t\t\t\t\n n.ui8\tArray(UInt8)\t\t\t\t\t\n n.s\tArray(String)\t\t\t\t\t\n-s\tUInt32\t\t\t\t\t\n+s\tUInt32\tDEFAULT\t\\'0\\'\t\t\t\n n.d\tArray(Date)\t\t\t\t\t\n-CREATE TABLE default.alter_00061 (`d` Date, `k` UInt64, `i32` Int32, `n.ui8` Array(UInt8), `n.s` Array(String), `s` UInt32, `n.d` Array(Date)) ENGINE = MergeTree(d, k, 8192)\n+CREATE TABLE default.alter_00061 (`d` Date, `k` UInt64, `i32` Int32, `n.ui8` Array(UInt8), `n.s` Array(String), `s` UInt32 DEFAULT \\'0\\', `n.d` Array(Date)) ENGINE = MergeTree(d, k, 8192)\n 2015-01-01\t6\t38\t[10,20,30]\t['asd','qwe','qwe']\t100500\t['0000-00-00','0000-00-00','0000-00-00']\n 2015-01-01\t7\t39\t[10,20,30]\t['120','130','140']\t0\t['0000-00-00','0000-00-00','0000-00-00']\n 2015-01-01\t8\t40\t[1,2,3]\t['12','13','14']\t0\t['0000-00-00','0000-00-00','0000-00-00']\n@@ -64,8 +64,8 @@ d\tDate\n k\tUInt64\t\t\t\t\t\n i32\tInt32\t\t\t\t\t\n n.s\tArray(String)\t\t\t\t\t\n-s\tUInt32\t\t\t\t\t\n-CREATE TABLE default.alter_00061 (`d` Date, `k` UInt64, `i32` Int32, `n.s` Array(String), `s` UInt32) ENGINE = MergeTree(d, k, 8192)\n+s\tUInt32\tDEFAULT\t\\'0\\'\t\t\t\n+CREATE TABLE default.alter_00061 (`d` Date, `k` UInt64, `i32` Int32, `n.s` Array(String), `s` UInt32 DEFAULT \\'0\\') ENGINE = MergeTree(d, k, 8192)\n 2015-01-01\t6\t38\t['asd','qwe','qwe']\t100500\n 2015-01-01\t7\t39\t['120','130','140']\t0\n 2015-01-01\t8\t40\t['12','13','14']\t0\n@@ -73,8 +73,8 @@ CREATE TABLE default.alter_00061 (`d` Date, `k` UInt64, `i32` Int32, `n.s` Array\n d\tDate\t\t\t\t\t\n k\tUInt64\t\t\t\t\t\n i32\tInt32\t\t\t\t\t\n-s\tUInt32\t\t\t\t\t\n-CREATE TABLE default.alter_00061 (`d` Date, `k` UInt64, `i32` Int32, `s` UInt32) ENGINE = MergeTree(d, k, 8192)\n+s\tUInt32\tDEFAULT\t\\'0\\'\t\t\t\n+CREATE TABLE default.alter_00061 (`d` Date, `k` UInt64, `i32` Int32, `s` UInt32 DEFAULT \\'0\\') ENGINE = MergeTree(d, k, 8192)\n 2015-01-01\t6\t38\t100500\n 2015-01-01\t7\t39\t0\n 2015-01-01\t8\t40\t0\n@@ -82,10 +82,10 @@ CREATE TABLE default.alter_00061 (`d` Date, `k` UInt64, `i32` Int32, `s` UInt32)\n d\tDate\t\t\t\t\t\n k\tUInt64\t\t\t\t\t\n i32\tInt32\t\t\t\t\t\n-s\tUInt32\t\t\t\t\t\n+s\tUInt32\tDEFAULT\t\\'0\\'\t\t\t\n n.s\tArray(String)\t\t\t\t\t\n n.d\tArray(Date)\t\t\t\t\t\n-CREATE TABLE default.alter_00061 (`d` Date, `k` UInt64, `i32` Int32, `s` UInt32, `n.s` Array(String), `n.d` Array(Date)) ENGINE = MergeTree(d, k, 8192)\n+CREATE TABLE default.alter_00061 (`d` Date, `k` UInt64, `i32` Int32, `s` UInt32 DEFAULT \\'0\\', `n.s` Array(String), `n.d` Array(Date)) ENGINE = MergeTree(d, k, 8192)\n 2015-01-01\t6\t38\t100500\t[]\t[]\n 2015-01-01\t7\t39\t0\t[]\t[]\n 2015-01-01\t8\t40\t0\t[]\t[]\n@@ -93,8 +93,8 @@ CREATE TABLE default.alter_00061 (`d` Date, `k` UInt64, `i32` Int32, `s` UInt32,\n d\tDate\t\t\t\t\t\n k\tUInt64\t\t\t\t\t\n i32\tInt32\t\t\t\t\t\n-s\tUInt32\t\t\t\t\t\n-CREATE TABLE default.alter_00061 (`d` Date, `k` UInt64, `i32` Int32, `s` UInt32) ENGINE = MergeTree(d, k, 8192)\n+s\tUInt32\tDEFAULT\t\\'0\\'\t\t\t\n+CREATE TABLE default.alter_00061 (`d` Date, `k` UInt64, `i32` Int32, `s` UInt32 DEFAULT \\'0\\') ENGINE = MergeTree(d, k, 8192)\n 2015-01-01\t6\t38\t100500\n 2015-01-01\t7\t39\t0\n 2015-01-01\t8\t40\t0\ndiff --git a/dbms/tests/queries/0_stateless/00062_replicated_merge_tree_alter_zookeeper.reference b/dbms/tests/queries/0_stateless/00062_replicated_merge_tree_alter_zookeeper.reference\nindex 29c265b2b9f3..6f2eb080286a 100644\n--- a/dbms/tests/queries/0_stateless/00062_replicated_merge_tree_alter_zookeeper.reference\n+++ b/dbms/tests/queries/0_stateless/00062_replicated_merge_tree_alter_zookeeper.reference\n@@ -85,16 +85,16 @@ i32\tInt32\n dt\tDateTime\t\t\t\t\t\n n.ui8\tArray(UInt8)\t\t\t\t\t\n n.s\tArray(String)\t\t\t\t\t\n-s\tInt64\t\t\t\t\t\n-CREATE TABLE test.replicated_alter1 (`d` Date, `k` UInt64, `i32` Int32, `dt` DateTime, `n.ui8` Array(UInt8), `n.s` Array(String), `s` Int64) ENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test/alter\\', \\'r1\\', d, k, 8192)\n+s\tInt64\tDEFAULT\t\\'0\\'\t\t\t\n+CREATE TABLE test.replicated_alter1 (`d` Date, `k` UInt64, `i32` Int32, `dt` DateTime, `n.ui8` Array(UInt8), `n.s` Array(String), `s` Int64 DEFAULT \\'0\\') ENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test/alter\\', \\'r1\\', d, k, 8192)\n d\tDate\t\t\t\t\t\n k\tUInt64\t\t\t\t\t\n i32\tInt32\t\t\t\t\t\n dt\tDateTime\t\t\t\t\t\n n.ui8\tArray(UInt8)\t\t\t\t\t\n n.s\tArray(String)\t\t\t\t\t\n-s\tInt64\t\t\t\t\t\n-CREATE TABLE test.replicated_alter2 (`d` Date, `k` UInt64, `i32` Int32, `dt` DateTime, `n.ui8` Array(UInt8), `n.s` Array(String), `s` Int64) ENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test/alter\\', \\'r2\\', d, k, 8192)\n+s\tInt64\tDEFAULT\t\\'0\\'\t\t\t\n+CREATE TABLE test.replicated_alter2 (`d` Date, `k` UInt64, `i32` Int32, `dt` DateTime, `n.ui8` Array(UInt8), `n.s` Array(String), `s` Int64 DEFAULT \\'0\\') ENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test/alter\\', \\'r2\\', d, k, 8192)\n 2015-01-01\t6\t38\t2014-07-15 13:26:50\t[10,20,30]\t['asd','qwe','qwe']\t100500\n 2015-01-01\t7\t39\t2014-07-14 13:26:50\t[10,20,30]\t['120','130','140']\t0\n 2015-01-01\t8\t40\t2012-12-12 12:12:12\t[1,2,3]\t['12','13','14']\t0\n@@ -106,18 +106,18 @@ i32\tInt32\n dt\tDateTime\t\t\t\t\t\n n.ui8\tArray(UInt8)\t\t\t\t\t\n n.s\tArray(String)\t\t\t\t\t\n-s\tUInt32\t\t\t\t\t\n+s\tUInt32\tDEFAULT\t\\'0\\'\t\t\t\n n.d\tArray(Date)\t\t\t\t\t\n-CREATE TABLE test.replicated_alter1 (`d` Date, `k` UInt64, `i32` Int32, `dt` DateTime, `n.ui8` Array(UInt8), `n.s` Array(String), `s` UInt32, `n.d` Array(Date)) ENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test/alter\\', \\'r1\\', d, k, 8192)\n+CREATE TABLE test.replicated_alter1 (`d` Date, `k` UInt64, `i32` Int32, `dt` DateTime, `n.ui8` Array(UInt8), `n.s` Array(String), `s` UInt32 DEFAULT \\'0\\', `n.d` Array(Date)) ENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test/alter\\', \\'r1\\', d, k, 8192)\n d\tDate\t\t\t\t\t\n k\tUInt64\t\t\t\t\t\n i32\tInt32\t\t\t\t\t\n dt\tDateTime\t\t\t\t\t\n n.ui8\tArray(UInt8)\t\t\t\t\t\n n.s\tArray(String)\t\t\t\t\t\n-s\tUInt32\t\t\t\t\t\n+s\tUInt32\tDEFAULT\t\\'0\\'\t\t\t\n n.d\tArray(Date)\t\t\t\t\t\n-CREATE TABLE test.replicated_alter2 (`d` Date, `k` UInt64, `i32` Int32, `dt` DateTime, `n.ui8` Array(UInt8), `n.s` Array(String), `s` UInt32, `n.d` Array(Date)) ENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test/alter\\', \\'r2\\', d, k, 8192)\n+CREATE TABLE test.replicated_alter2 (`d` Date, `k` UInt64, `i32` Int32, `dt` DateTime, `n.ui8` Array(UInt8), `n.s` Array(String), `s` UInt32 DEFAULT \\'0\\', `n.d` Array(Date)) ENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test/alter\\', \\'r2\\', d, k, 8192)\n 2015-01-01\t6\t38\t2014-07-15 13:26:50\t[10,20,30]\t['asd','qwe','qwe']\t100500\t['0000-00-00','0000-00-00','0000-00-00']\n 2015-01-01\t7\t39\t2014-07-14 13:26:50\t[10,20,30]\t['120','130','140']\t0\t['0000-00-00','0000-00-00','0000-00-00']\n 2015-01-01\t8\t40\t2012-12-12 12:12:12\t[1,2,3]\t['12','13','14']\t0\t['0000-00-00','0000-00-00','0000-00-00']\n@@ -128,15 +128,15 @@ k\tUInt64\n i32\tInt32\t\t\t\t\t\n dt\tDateTime\t\t\t\t\t\n n.s\tArray(String)\t\t\t\t\t\n-s\tUInt32\t\t\t\t\t\n-CREATE TABLE test.replicated_alter1 (`d` Date, `k` UInt64, `i32` Int32, `dt` DateTime, `n.s` Array(String), `s` UInt32) ENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test/alter\\', \\'r1\\', d, k, 8192)\n+s\tUInt32\tDEFAULT\t\\'0\\'\t\t\t\n+CREATE TABLE test.replicated_alter1 (`d` Date, `k` UInt64, `i32` Int32, `dt` DateTime, `n.s` Array(String), `s` UInt32 DEFAULT \\'0\\') ENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test/alter\\', \\'r1\\', d, k, 8192)\n d\tDate\t\t\t\t\t\n k\tUInt64\t\t\t\t\t\n i32\tInt32\t\t\t\t\t\n dt\tDateTime\t\t\t\t\t\n n.s\tArray(String)\t\t\t\t\t\n-s\tUInt32\t\t\t\t\t\n-CREATE TABLE test.replicated_alter2 (`d` Date, `k` UInt64, `i32` Int32, `dt` DateTime, `n.s` Array(String), `s` UInt32) ENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test/alter\\', \\'r2\\', d, k, 8192)\n+s\tUInt32\tDEFAULT\t\\'0\\'\t\t\t\n+CREATE TABLE test.replicated_alter2 (`d` Date, `k` UInt64, `i32` Int32, `dt` DateTime, `n.s` Array(String), `s` UInt32 DEFAULT \\'0\\') ENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test/alter\\', \\'r2\\', d, k, 8192)\n 2015-01-01\t6\t38\t2014-07-15 13:26:50\t['asd','qwe','qwe']\t100500\n 2015-01-01\t7\t39\t2014-07-14 13:26:50\t['120','130','140']\t0\n 2015-01-01\t8\t40\t2012-12-12 12:12:12\t['12','13','14']\t0\n@@ -146,14 +146,14 @@ d\tDate\n k\tUInt64\t\t\t\t\t\n i32\tInt32\t\t\t\t\t\n dt\tDateTime\t\t\t\t\t\n-s\tUInt32\t\t\t\t\t\n-CREATE TABLE test.replicated_alter1 (`d` Date, `k` UInt64, `i32` Int32, `dt` DateTime, `s` UInt32) ENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test/alter\\', \\'r1\\', d, k, 8192)\n+s\tUInt32\tDEFAULT\t\\'0\\'\t\t\t\n+CREATE TABLE test.replicated_alter1 (`d` Date, `k` UInt64, `i32` Int32, `dt` DateTime, `s` UInt32 DEFAULT \\'0\\') ENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test/alter\\', \\'r1\\', d, k, 8192)\n d\tDate\t\t\t\t\t\n k\tUInt64\t\t\t\t\t\n i32\tInt32\t\t\t\t\t\n dt\tDateTime\t\t\t\t\t\n-s\tUInt32\t\t\t\t\t\n-CREATE TABLE test.replicated_alter2 (`d` Date, `k` UInt64, `i32` Int32, `dt` DateTime, `s` UInt32) ENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test/alter\\', \\'r2\\', d, k, 8192)\n+s\tUInt32\tDEFAULT\t\\'0\\'\t\t\t\n+CREATE TABLE test.replicated_alter2 (`d` Date, `k` UInt64, `i32` Int32, `dt` DateTime, `s` UInt32 DEFAULT \\'0\\') ENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test/alter\\', \\'r2\\', d, k, 8192)\n 2015-01-01\t6\t38\t2014-07-15 13:26:50\t100500\n 2015-01-01\t7\t39\t2014-07-14 13:26:50\t0\n 2015-01-01\t8\t40\t2012-12-12 12:12:12\t0\n@@ -163,18 +163,18 @@ d\tDate\n k\tUInt64\t\t\t\t\t\n i32\tInt32\t\t\t\t\t\n dt\tDateTime\t\t\t\t\t\n-s\tUInt32\t\t\t\t\t\n+s\tUInt32\tDEFAULT\t\\'0\\'\t\t\t\n n.s\tArray(String)\t\t\t\t\t\n n.d\tArray(Date)\t\t\t\t\t\n-CREATE TABLE test.replicated_alter1 (`d` Date, `k` UInt64, `i32` Int32, `dt` DateTime, `s` UInt32, `n.s` Array(String), `n.d` Array(Date)) ENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test/alter\\', \\'r1\\', d, k, 8192)\n+CREATE TABLE test.replicated_alter1 (`d` Date, `k` UInt64, `i32` Int32, `dt` DateTime, `s` UInt32 DEFAULT \\'0\\', `n.s` Array(String), `n.d` Array(Date)) ENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test/alter\\', \\'r1\\', d, k, 8192)\n d\tDate\t\t\t\t\t\n k\tUInt64\t\t\t\t\t\n i32\tInt32\t\t\t\t\t\n dt\tDateTime\t\t\t\t\t\n-s\tUInt32\t\t\t\t\t\n+s\tUInt32\tDEFAULT\t\\'0\\'\t\t\t\n n.s\tArray(String)\t\t\t\t\t\n n.d\tArray(Date)\t\t\t\t\t\n-CREATE TABLE test.replicated_alter2 (`d` Date, `k` UInt64, `i32` Int32, `dt` DateTime, `s` UInt32, `n.s` Array(String), `n.d` Array(Date)) ENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test/alter\\', \\'r2\\', d, k, 8192)\n+CREATE TABLE test.replicated_alter2 (`d` Date, `k` UInt64, `i32` Int32, `dt` DateTime, `s` UInt32 DEFAULT \\'0\\', `n.s` Array(String), `n.d` Array(Date)) ENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test/alter\\', \\'r2\\', d, k, 8192)\n 2015-01-01\t6\t38\t2014-07-15 13:26:50\t100500\t[]\t[]\n 2015-01-01\t7\t39\t2014-07-14 13:26:50\t0\t[]\t[]\n 2015-01-01\t8\t40\t2012-12-12 12:12:12\t0\t[]\t[]\n@@ -184,14 +184,14 @@ d\tDate\n k\tUInt64\t\t\t\t\t\n i32\tInt32\t\t\t\t\t\n dt\tDateTime\t\t\t\t\t\n-s\tUInt32\t\t\t\t\t\n-CREATE TABLE test.replicated_alter1 (`d` Date, `k` UInt64, `i32` Int32, `dt` DateTime, `s` UInt32) ENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test/alter\\', \\'r1\\', d, k, 8192)\n+s\tUInt32\tDEFAULT\t\\'0\\'\t\t\t\n+CREATE TABLE test.replicated_alter1 (`d` Date, `k` UInt64, `i32` Int32, `dt` DateTime, `s` UInt32 DEFAULT \\'0\\') ENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test/alter\\', \\'r1\\', d, k, 8192)\n d\tDate\t\t\t\t\t\n k\tUInt64\t\t\t\t\t\n i32\tInt32\t\t\t\t\t\n dt\tDateTime\t\t\t\t\t\n-s\tUInt32\t\t\t\t\t\n-CREATE TABLE test.replicated_alter2 (`d` Date, `k` UInt64, `i32` Int32, `dt` DateTime, `s` UInt32) ENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test/alter\\', \\'r2\\', d, k, 8192)\n+s\tUInt32\tDEFAULT\t\\'0\\'\t\t\t\n+CREATE TABLE test.replicated_alter2 (`d` Date, `k` UInt64, `i32` Int32, `dt` DateTime, `s` UInt32 DEFAULT \\'0\\') ENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test/alter\\', \\'r2\\', d, k, 8192)\n 2015-01-01\t6\t38\t2014-07-15 13:26:50\t100500\n 2015-01-01\t7\t39\t2014-07-14 13:26:50\t0\n 2015-01-01\t8\t40\t2012-12-12 12:12:12\t0\n@@ -201,14 +201,14 @@ d\tDate\n k\tUInt64\t\t\t\t\t\n i32\tInt32\t\t\t\t\t\n dt\tDate\t\t\t\t\t\n-s\tDateTime\t\t\t\t\t\n-CREATE TABLE test.replicated_alter1 (`d` Date, `k` UInt64, `i32` Int32, `dt` Date, `s` DateTime) ENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test/alter\\', \\'r1\\', d, k, 8192)\n+s\tDateTime\tDEFAULT\t\\'0000-00-00 00:00:00\\'\t\t\t\n+CREATE TABLE test.replicated_alter1 (`d` Date, `k` UInt64, `i32` Int32, `dt` Date, `s` DateTime DEFAULT \\'0000-00-00 00:00:00\\') ENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test/alter\\', \\'r1\\', d, k, 8192)\n d\tDate\t\t\t\t\t\n k\tUInt64\t\t\t\t\t\n i32\tInt32\t\t\t\t\t\n dt\tDate\t\t\t\t\t\n-s\tDateTime\t\t\t\t\t\n-CREATE TABLE test.replicated_alter2 (`d` Date, `k` UInt64, `i32` Int32, `dt` Date, `s` DateTime) ENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test/alter\\', \\'r2\\', d, k, 8192)\n+s\tDateTime\tDEFAULT\t\\'0000-00-00 00:00:00\\'\t\t\t\n+CREATE TABLE test.replicated_alter2 (`d` Date, `k` UInt64, `i32` Int32, `dt` Date, `s` DateTime DEFAULT \\'0000-00-00 00:00:00\\') ENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/test/alter\\', \\'r2\\', d, k, 8192)\n 2015-01-01\t6\t38\t2014-07-15\t1970-01-02 06:55:00\n 2015-01-01\t7\t39\t2014-07-14\t0000-00-00 00:00:00\n 2015-01-01\t8\t40\t2012-12-12\t0000-00-00 00:00:00\ndiff --git a/dbms/tests/queries/0_stateless/00062_replicated_merge_tree_alter_zookeeper.sql b/dbms/tests/queries/0_stateless/00062_replicated_merge_tree_alter_zookeeper.sql\nindex 7686c27fe34b..3ba1af5d547b 100644\n--- a/dbms/tests/queries/0_stateless/00062_replicated_merge_tree_alter_zookeeper.sql\n+++ b/dbms/tests/queries/0_stateless/00062_replicated_merge_tree_alter_zookeeper.sql\n@@ -95,7 +95,7 @@ DESC TABLE test.replicated_alter2;\n SHOW CREATE TABLE test.replicated_alter2;\n SELECT * FROM test.replicated_alter1 ORDER BY k;\n \n-ALTER TABLE test.replicated_alter1 MODIFY COLUMN dt Date, MODIFY COLUMN s DateTime;\n+ALTER TABLE test.replicated_alter1 MODIFY COLUMN dt Date, MODIFY COLUMN s DateTime DEFAULT '0000-00-00 00:00:00';\n \n DESC TABLE test.replicated_alter1;\n SHOW CREATE TABLE test.replicated_alter1;\ndiff --git a/dbms/tests/queries/0_stateless/00079_defaulted_columns.reference b/dbms/tests/queries/0_stateless/00079_defaulted_columns.reference\nindex 207f25399fc0..03fd13f90441 100644\n--- a/dbms/tests/queries/0_stateless/00079_defaulted_columns.reference\n+++ b/dbms/tests/queries/0_stateless/00079_defaulted_columns.reference\n@@ -28,13 +28,13 @@ some string\t11\n payload\tString\t\t\t\t\t\n date\tDate\tMATERIALIZED\ttoday()\t\t\t\n key\tUInt64\tMATERIALIZED\t0 * rand()\t\t\t\n-payload_length\tUInt16\tDEFAULT\tlength(payload) % 65535\t\t\t\n+payload_length\tUInt64\tDEFAULT\tlength(payload) % 65535\t\t\t\n hello clickhouse\t16\n some string\t11\n payload\tString\t\t\t\t\t\n date\tDate\tMATERIALIZED\ttoday()\t\t\t\n key\tUInt64\tMATERIALIZED\t0 * rand()\t\t\t\n-payload_length\tUInt16\tDEFAULT\tCAST(length(payload), \\'UInt16\\')\t\t\t\n+payload_length\tUInt16\tDEFAULT\tlength(payload)\t\t\t\n payload\tString\t\t\t\t\t\n date\tDate\tMATERIALIZED\ttoday()\t\t\t\n key\tUInt64\tMATERIALIZED\t0 * rand()\t\t\t\ndiff --git a/dbms/tests/queries/0_stateless/00079_defaulted_columns.sql b/dbms/tests/queries/0_stateless/00079_defaulted_columns.sql\nindex 8137b57dcbd7..77178478a4dc 100644\n--- a/dbms/tests/queries/0_stateless/00079_defaulted_columns.sql\n+++ b/dbms/tests/queries/0_stateless/00079_defaulted_columns.sql\n@@ -20,7 +20,7 @@ create table defaulted (payload String, date materialized today(), key materiali\n desc table defaulted;\n insert into defaulted (payload) values ('hello clickhouse');\n select * from defaulted;\n-alter table defaulted add column payload_length materialized length(payload);\n+alter table defaulted add column payload_length UInt64 materialized length(payload);\n desc table defaulted;\n select *, payload_length from defaulted;\n insert into defaulted (payload) values ('some string');\ndiff --git a/dbms/tests/queries/0_stateless/00229_prewhere_column_missing.sql b/dbms/tests/queries/0_stateless/00229_prewhere_column_missing.sql\nindex da4cce9a9922..324e37bfce7b 100644\n--- a/dbms/tests/queries/0_stateless/00229_prewhere_column_missing.sql\n+++ b/dbms/tests/queries/0_stateless/00229_prewhere_column_missing.sql\n@@ -16,7 +16,7 @@ select *, length(arr) as l from prewhere_column_missing;\n select *, length(arr) as l from prewhere_column_missing where l = 0;\n select *, length(arr) as l from prewhere_column_missing prewhere l = 0;\n \n-alter table prewhere_column_missing add column hash_x default intHash64(x);\n+alter table prewhere_column_missing add column hash_x UInt64 default intHash64(x);\n \n select * from prewhere_column_missing;\n select * from prewhere_column_missing where hash_x = intHash64(x);\ndiff --git a/dbms/tests/queries/0_stateless/00262_alter_alias.sql b/dbms/tests/queries/0_stateless/00262_alter_alias.sql\nindex 5a7007a6e0c1..56dbda65be7e 100644\n--- a/dbms/tests/queries/0_stateless/00262_alter_alias.sql\n+++ b/dbms/tests/queries/0_stateless/00262_alter_alias.sql\n@@ -11,7 +11,7 @@ select array from aliases_test;\n alter table aliases_test modify column array default [0, 1, 2];\n select array from aliases_test;\n \n-alter table aliases_test add column struct.key default [0, 1, 2], add column struct.value default array;\n+alter table aliases_test add column struct.key Array(UInt8) default [0, 1, 2], add column struct.value Array(UInt8) default array;\n select struct.key, struct.value from aliases_test;\n \n alter table aliases_test modify column struct.value alias array;\ndiff --git a/dbms/tests/queries/0_stateless/00575_illegal_column_exception_when_drop_depen_column.sh b/dbms/tests/queries/0_stateless/00575_illegal_column_exception_when_drop_depen_column.sh\nindex 584cb2b218e2..293fce4c8d22 100755\n--- a/dbms/tests/queries/0_stateless/00575_illegal_column_exception_when_drop_depen_column.sh\n+++ b/dbms/tests/queries/0_stateless/00575_illegal_column_exception_when_drop_depen_column.sh\n@@ -4,7 +4,7 @@ CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n . $CURDIR/../shell_config.sh\n \n \n-exception_pattern=\"Code: 44.*Cannot drop column id, because column id2 depends on it\"\n+exception_pattern=\"Code: 44.*Cannot drop column \\`id\\`, because column \\`id2\\` depends on it\"\n \n ${CLICKHOUSE_CLIENT} --query \"DROP TABLE IF EXISTS test_00575;\"\n ${CLICKHOUSE_CLIENT} --query \"CREATE TABLE test_00575 (dt Date DEFAULT now(), id UInt32, id2 UInt32 DEFAULT id + 1) ENGINE = MergeTree(dt, dt, 8192);\"\ndiff --git a/dbms/tests/queries/0_stateless/00721_force_by_identical_result_after_merge_zookeeper.sql b/dbms/tests/queries/0_stateless/00721_force_by_identical_result_after_merge_zookeeper.sql\nindex aa386829276f..d9034c9d6cd2 100644\n--- a/dbms/tests/queries/0_stateless/00721_force_by_identical_result_after_merge_zookeeper.sql\n+++ b/dbms/tests/queries/0_stateless/00721_force_by_identical_result_after_merge_zookeeper.sql\n@@ -9,7 +9,7 @@ SYSTEM SYNC REPLICA byte_identical_r2;\n \n -- Add a column with a default expression that will yield different values on different replicas.\n -- Call optimize to materialize it. Replicas should compare checksums and restore consistency.\n-ALTER TABLE byte_identical_r1 ADD COLUMN y DEFAULT rand();\n+ALTER TABLE byte_identical_r1 ADD COLUMN y UInt64 DEFAULT rand();\n OPTIMIZE TABLE byte_identical_r1 PARTITION tuple() FINAL;\n \n SELECT x, t1.y - t2.y FROM byte_identical_r1 t1 SEMI LEFT JOIN byte_identical_r2 t2 USING x ORDER BY x;\ndiff --git a/dbms/tests/queries/0_stateless/00916_add_materialized_column_after.sql b/dbms/tests/queries/0_stateless/00916_add_materialized_column_after.sql\nindex b52a471b2b7b..6a1f9bca955c 100644\n--- a/dbms/tests/queries/0_stateless/00916_add_materialized_column_after.sql\n+++ b/dbms/tests/queries/0_stateless/00916_add_materialized_column_after.sql\n@@ -1,7 +1,7 @@\n DROP TABLE IF EXISTS add_materialized_column_after;\n \n CREATE TABLE add_materialized_column_after (x UInt32, z UInt64) ENGINE MergeTree ORDER BY x;\n-ALTER TABLE add_materialized_column_after ADD COLUMN y MATERIALIZED toString(x) AFTER x;\n+ALTER TABLE add_materialized_column_after ADD COLUMN y String MATERIALIZED toString(x) AFTER x;\n \n DESC TABLE add_materialized_column_after;\n \ndiff --git a/dbms/tests/queries/0_stateless/01079_alter_default_zookeeper.reference b/dbms/tests/queries/0_stateless/01079_alter_default_zookeeper.reference\nnew file mode 100644\nindex 000000000000..35ba20aff3ea\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/01079_alter_default_zookeeper.reference\n@@ -0,0 +1,11 @@\n+CREATE TABLE default.alter_default (`date` Date, `key` UInt64, `value` String DEFAULT \\'10\\') ENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/alter_default\\', \\'1\\') ORDER BY key SETTINGS index_granularity = 8192\n+1000\n+CREATE TABLE default.alter_default (`date` Date, `key` UInt64, `value` UInt64 DEFAULT \\'10\\') ENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/alter_default\\', \\'1\\') ORDER BY key SETTINGS index_granularity = 8192\n+CREATE TABLE default.alter_default (`date` Date, `key` UInt64, `value` UInt64 DEFAULT 10) ENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/alter_default\\', \\'1\\') ORDER BY key SETTINGS index_granularity = 8192\n+1000\n+CREATE TABLE default.alter_default (`date` Date, `key` UInt64, `value` UInt64 DEFAULT 100) ENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/alter_default\\', \\'1\\') ORDER BY key SETTINGS index_granularity = 8192\n+CREATE TABLE default.alter_default (`date` Date, `key` UInt64, `value` UInt16 DEFAULT 100) ENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/alter_default\\', \\'1\\') ORDER BY key SETTINGS index_granularity = 8192\n+10000\n+CREATE TABLE default.alter_default (`date` Date, `key` UInt64, `value` UInt8 DEFAULT 10) ENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/alter_default\\', \\'1\\') ORDER BY key SETTINGS index_granularity = 8192\n+CREATE TABLE default.alter_default (`date` Date, `key` UInt64, `value` UInt8 DEFAULT 10, `better_column` UInt8 DEFAULT \\'1\\') ENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/alter_default\\', \\'1\\') ORDER BY key SETTINGS index_granularity = 8192\n+CREATE TABLE default.alter_default (`date` Date, `key` UInt64, `value` UInt8 DEFAULT 10, `better_column` UInt8 DEFAULT \\'1\\', `other_date` String DEFAULT 1) ENGINE = ReplicatedMergeTree(\\'/clickhouse/tables/alter_default\\', \\'1\\') ORDER BY key SETTINGS index_granularity = 8192\ndiff --git a/dbms/tests/queries/0_stateless/01079_alter_default_zookeeper.sql b/dbms/tests/queries/0_stateless/01079_alter_default_zookeeper.sql\nnew file mode 100644\nindex 000000000000..8779851e308b\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/01079_alter_default_zookeeper.sql\n@@ -0,0 +1,60 @@\n+DROP TABLE IF EXISTS alter_default;\n+\n+CREATE TABLE alter_default\n+(\n+  date Date,\n+  key UInt64\n+)\n+ENGINE ReplicatedMergeTree('/clickhouse/tables/alter_default', '1')\n+ORDER BY key;\n+\n+INSERT INTO alter_default select toDate('2020-01-05'), number from system.numbers limit 100;\n+\n+-- Cannot add column without type\n+ALTER TABLE alter_default ADD COLUMN value DEFAULT '10'; --{serverError 36}\n+\n+ALTER TABLE alter_default ADD COLUMN value String DEFAULT '10';\n+\n+SHOW CREATE TABLE alter_default;\n+\n+SELECT sum(cast(value as UInt64)) FROM alter_default;\n+\n+ALTER TABLE alter_default MODIFY COLUMN value UInt64;\n+\n+SHOW CREATE TABLE alter_default;\n+\n+ALTER TABLE alter_default MODIFY COLUMN value UInt64 DEFAULT 10;\n+\n+SHOW CREATE TABLE alter_default;\n+\n+SELECT sum(value) from alter_default;\n+\n+ALTER TABLE alter_default MODIFY COLUMN value DEFAULT 100;\n+\n+SHOW CREATE TABLE alter_default;\n+\n+ALTER TABLE alter_default MODIFY COLUMN value UInt16 DEFAULT 100;\n+\n+SHOW CREATE TABLE alter_default;\n+\n+SELECT sum(value) from alter_default;\n+\n+ALTER TABLE alter_default MODIFY COLUMN value UInt8 DEFAULT 10;\n+\n+SHOW CREATE TABLE alter_default;\n+\n+ALTER TABLE alter_default ADD COLUMN bad_column UInt8 DEFAULT 'q'; --{serverError 6}\n+\n+ALTER TABLE alter_default ADD COLUMN better_column UInt8 DEFAULT '1';\n+\n+SHOW CREATE TABLE alter_default;\n+\n+ALTER TABLE alter_default ADD COLUMN other_date String DEFAULT '0';\n+\n+ALTER TABLE alter_default MODIFY COLUMN other_date DateTime; --{serverError 41}\n+\n+ALTER TABLE alter_default MODIFY COLUMN other_date DEFAULT 1;\n+\n+SHOW CREATE TABLE alter_default;\n+\n+DROP TABLE IF EXISTS alter_default;\n",
  "problem_statement": "Inconsistent ALTER behaviour.\n**Describe the bug or unexpected behavior**\r\nModification of type of column with non-materialized defaults leads to wrong default values.\r\n\r\n**How to reproduce**\r\n```\r\nCREATE TABLE test_alter_on_mutation\r\n(\r\n  date Date,\r\n  key UInt64\r\n)\r\nENGINE ReplicatedMergeTree('/clickhouse/tables/test_alter_on_mutation', '1')\r\nORDER BY key;\r\n\r\nINSERT INTO test_alter_on_mutation select toDate('2020-01-05'), number from system.numbers limit 100;\r\n\r\nALTER TABLE test_alter_on_mutation ADD COLUMN value String DEFAULT '10';\r\n\r\nSELECT sum(cast(value as UInt64)) from test_alter_on_mutation;\r\n\r\n\u250c\u2500sum(CAST(value, 'UInt64'))\u2500\u2510\r\n\u2502                       1000 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n-- OPTIMIZE TABLE test_alter_on_mutation FINAL;\r\n\r\nALTER TABLE test_alter_on_mutation MODIFY COLUMN value UInt64;\r\n\r\nSELECT sum(value) from test_alter_on_mutation;\r\n\r\n\u250c\u2500sum(value)\u2500\u2510\r\n\u2502          0 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\n",
  "hints_text": "",
  "created_at": "2020-02-19T15:10:11Z"
}