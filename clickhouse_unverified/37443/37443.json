{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 37443,
  "instance_id": "ClickHouse__ClickHouse-37443",
  "issue_numbers": [
    "37298"
  ],
  "base_commit": "ce48e8e1028ce394eeaf32d4e0240d38b0467932",
  "patch": "diff --git a/src/Functions/normalizeString.cpp b/src/Functions/normalizeString.cpp\nindex 8989e56d0d3e..9b1d1292d2c5 100644\n--- a/src/Functions/normalizeString.cpp\n+++ b/src/Functions/normalizeString.cpp\n@@ -106,7 +106,7 @@ struct NormalizeUTF8Impl\n             size_t from_size = offsets[i] - current_from_offset - 1;\n \n             from_uchars.resize(from_size + 1);\n-            int32_t from_code_points;\n+            int32_t from_code_points = 0;\n             u_strFromUTF8(\n                 from_uchars.data(),\n                 from_uchars.size(),\n@@ -133,7 +133,7 @@ struct NormalizeUTF8Impl\n             if (res_data.size() < max_to_size)\n                 res_data.resize(max_to_size);\n \n-            int32_t to_size;\n+            int32_t to_size = 0;\n             u_strToUTF8(\n                 reinterpret_cast<char*>(&res_data[current_to_offset]),\n                 res_data.size() - current_to_offset,\n@@ -151,6 +151,8 @@ struct NormalizeUTF8Impl\n \n             current_from_offset = offsets[i];\n         }\n+\n+        res_data.resize(current_to_offset);\n     }\n \n     [[noreturn]] static void vectorFixed(const ColumnString::Chars &, size_t, ColumnString::Chars &)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02311_normalize_utf8_constant.reference b/tests/queries/0_stateless/02311_normalize_utf8_constant.reference\nnew file mode 100644\nindex 000000000000..efd3caf8a450\n--- /dev/null\n+++ b/tests/queries/0_stateless/02311_normalize_utf8_constant.reference\n@@ -0,0 +1,1 @@\n+\u00e2\t\u00e2\ta\u0302\t\u00e2\ta\u0302\tC3A2\tC3A2\t61CC82\tC3A2\t61CC82\ndiff --git a/tests/queries/0_stateless/02311_normalize_utf8_constant.sql b/tests/queries/0_stateless/02311_normalize_utf8_constant.sql\nnew file mode 100644\nindex 000000000000..2747aa073ec7\n--- /dev/null\n+++ b/tests/queries/0_stateless/02311_normalize_utf8_constant.sql\n@@ -0,0 +1,13 @@\n+-- Tags: no-fasttest\n+\n+SELECT\n+    '\u00e2' AS s,\n+    normalizeUTF8NFC(s) s1,\n+    normalizeUTF8NFD(s) s2,\n+    normalizeUTF8NFKC(s) s3,\n+    normalizeUTF8NFKD(s) s4,\n+    hex(s),\n+    hex(s1),\n+    hex(s2),\n+    hex(s3),\n+    hex(s4);\n",
  "problem_statement": "hex(normalizeUTF8NFC LOGICAL_ERROR\n```sql\r\nSELECT hex(normalizeUTF8NFC('\u00e2'))\r\n\r\nReceived exception from server (version 22.4.5):\r\nCode: 49. DB::Exception: Received from localhost:9000.\r\n DB::Exception: Column size mismatch (internal logical error): \r\nWhile processing hex(normalizeUTF8NFC('\u00e2')). (LOGICAL_ERROR)\r\n```\r\n\r\n```sql\r\nSELECT\r\n    '\u00e2' AS s,\r\n    normalizeUTF8NFC(s) s1,\r\n    normalizeUTF8NFD(s) s2,\r\n    normalizeUTF8NFKC(s) s3,\r\n    normalizeUTF8NFKD(s) s4,\r\n    hex(s),\r\n    hex(s1),    \r\n    hex(s2),\r\n    hex(s3),\r\n    hex(s4)\r\n```\n",
  "hints_text": "This is a major issue.\r\nLet's fix it in one or two days or throw away these functions.\n@kitaisreal also the class name is wrong:\r\n\r\n`EncodeToBinaryRepr`\r\n\r\nshould be\r\n\r\n`EncodeToBinaryRepresentation`",
  "created_at": "2022-05-23T10:23:25Z"
}