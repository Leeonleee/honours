{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 57073,
  "instance_id": "ClickHouse__ClickHouse-57073",
  "issue_numbers": [
    "57059"
  ],
  "base_commit": "e4f66b846912fa076b9fb5feaa4bc3b60d1db35d",
  "patch": "diff --git a/src/Functions/bitCount.cpp b/src/Functions/bitCount.cpp\nindex 566a11481be9..f1a3ac897c18 100644\n--- a/src/Functions/bitCount.cpp\n+++ b/src/Functions/bitCount.cpp\n@@ -1,6 +1,7 @@\n #include <base/bit_cast.h>\n #include <Functions/FunctionFactory.h>\n #include <Functions/FunctionUnaryArithmetic.h>\n+#include <bit>\n \n \n namespace DB\n@@ -21,19 +22,19 @@ struct BitCountImpl\n         {\n             ResultType res = 0;\n             for (auto item : a.items)\n-                res += __builtin_popcountll(item);\n+                res += std::popcount(item);\n             return res;\n         }\n         if constexpr (std::is_same_v<A, UInt64> || std::is_same_v<A, Int64>)\n-            return __builtin_popcountll(a);\n+            return std::popcount(static_cast<UInt64>(a));\n         if constexpr (std::is_same_v<A, UInt32> || std::is_same_v<A, Int32> || std::is_unsigned_v<A>)\n-            return __builtin_popcount(a);\n+            return std::popcount(static_cast<UInt32>(a));\n         if constexpr (std::is_same_v<A, Int16>)\n-            return __builtin_popcount(static_cast<UInt16>(a));\n+            return std::popcount(static_cast<UInt16>(a));\n         if constexpr (std::is_same_v<A, Int8>)\n-            return __builtin_popcount(static_cast<UInt8>(a));\n+            return std::popcount(static_cast<uint8_t>(a));\n         else\n-            return __builtin_popcountll(bit_cast<uint64_t>(a));\n+            return std::popcount(bit_cast<uint64_t>(a));\n     }\n \n #if USE_EMBEDDED_COMPILER\ndiff --git a/src/Functions/bitHammingDistance.cpp b/src/Functions/bitHammingDistance.cpp\nindex 2eaa397dd041..f00f38b61af6 100644\n--- a/src/Functions/bitHammingDistance.cpp\n+++ b/src/Functions/bitHammingDistance.cpp\n@@ -2,20 +2,44 @@\n #include <Functions/FunctionFactory.h>\n #include <bit>\n \n+\n namespace DB\n {\n+\n+namespace ErrorCodes\n+{\n+    extern const int ILLEGAL_COLUMN;\n+}\n+\n template <typename A, typename B>\n struct BitHammingDistanceImpl\n {\n-    using ResultType = UInt8;\n+    using ResultType = std::conditional_t<(sizeof(A) * 8 >= 256), UInt16, UInt8>;\n     static constexpr bool allow_fixed_string = true;\n     static constexpr bool allow_string_integer = false;\n \n     template <typename Result = ResultType>\n     static inline NO_SANITIZE_UNDEFINED Result apply(A a, B b)\n     {\n-        UInt64 res = static_cast<UInt64>(a) ^ static_cast<UInt64>(b);\n-        return std::popcount(res);\n+        /// Note: it's unspecified if signed integers should be promoted with sign-extension or with zero-fill.\n+        /// This behavior can change in the future.\n+\n+        if constexpr (sizeof(A) <= sizeof(UInt64) && sizeof(B) <= sizeof(UInt64))\n+        {\n+            UInt64 res = static_cast<UInt64>(a) ^ static_cast<UInt64>(b);\n+            return std::popcount(res);\n+        }\n+        else if constexpr (is_big_int_v<A> && is_big_int_v<B>)\n+        {\n+            auto xored = a ^ b;\n+\n+            ResultType res = 0;\n+            for (auto item : xored.items)\n+                res += std::popcount(item);\n+            return res;\n+        }\n+        else\n+            throw Exception(ErrorCodes::ILLEGAL_COLUMN, \"Unsupported data type combination in function 'bitHammingDistance'\");\n     }\n \n #if USE_EMBEDDED_COMPILER\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02921_bit_hamming_distance_big_int.reference b/tests/queries/0_stateless/02921_bit_hamming_distance_big_int.reference\nnew file mode 100644\nindex 000000000000..62245f5d1761\n--- /dev/null\n+++ b/tests/queries/0_stateless/02921_bit_hamming_distance_big_int.reference\n@@ -0,0 +1,9 @@\n+314776434768051644139306697240981192872\t0\t74\t74\n+14776434768051644139306697240981192872314776434768051644139306697240981192872\t0\t141\t141\n+314776434768051644139306697240981192872\t14776434768051644139306697240981192872314776434768051644139306697240981192872\t115\t115\n+-25505932152886819324067910190787018584\t0\t74\t74\n+14776434768051644139306697240981192872314776434768051644139306697240981192872\t0\t141\t141\n+-25505932152886819324067910190787018584\t14776434768051644139306697240981192872314776434768051644139306697240981192872\t99\t99\n+314776434768051644139306697240981192872\t0\t74\t74\n+14776434768051644139306697240981192872314776434768051644139306697240981192872\t0\t141\t141\n+314776434768051644139306697240981192872\t14776434768051644139306697240981192872314776434768051644139306697240981192872\t115\t115\ndiff --git a/tests/queries/0_stateless/02921_bit_hamming_distance_big_int.sql b/tests/queries/0_stateless/02921_bit_hamming_distance_big_int.sql\nnew file mode 100644\nindex 000000000000..6f241e104b69\n--- /dev/null\n+++ b/tests/queries/0_stateless/02921_bit_hamming_distance_big_int.sql\n@@ -0,0 +1,12 @@\n+SELECT 314776434768051644139306697240981192872::UInt128 AS x, 0::UInt128 AS y, bitCount(bitXor(x, y)) AS a, bitHammingDistance(x, y) AS b;\n+SELECT 14776434768051644139306697240981192872314776434768051644139306697240981192872::UInt256 AS x, 0::UInt128 AS y, bitCount(bitXor(x, y)) AS a, bitHammingDistance(x, y) AS b;\n+SELECT 314776434768051644139306697240981192872::UInt128 AS x, 14776434768051644139306697240981192872314776434768051644139306697240981192872::UInt256 AS y, bitCount(bitXor(x, y)) AS a, bitHammingDistance(x, y) AS b;\n+\n+SELECT 314776434768051644139306697240981192872::Int128 AS x, 0::UInt128 AS y, bitCount(bitXor(x, y)) AS a, bitHammingDistance(x, y) AS b;\n+SELECT 14776434768051644139306697240981192872314776434768051644139306697240981192872::Int256 AS x, 0::UInt128 AS y, bitCount(bitXor(x, y)) AS a, bitHammingDistance(x, y) AS b;\n+SELECT 314776434768051644139306697240981192872::Int128 AS x, 14776434768051644139306697240981192872314776434768051644139306697240981192872::UInt256 AS y, bitCount(bitXor(x, y)) AS a, bitHammingDistance(x, y) AS b;\n+\n+SELECT 314776434768051644139306697240981192872::UInt128 AS x, 0::Int128 AS y, bitCount(bitXor(x, y)) AS a, bitHammingDistance(x, y) AS b;\n+SELECT 14776434768051644139306697240981192872314776434768051644139306697240981192872::UInt256 AS x, 0::Int128 AS y, bitCount(bitXor(x, y)) AS a, bitHammingDistance(x, y) AS b;\n+SELECT 314776434768051644139306697240981192872::UInt128 AS x, 14776434768051644139306697240981192872314776434768051644139306697240981192872::Int256 AS y, bitCount(bitXor(x, y)) AS a, bitHammingDistance(x, y) AS b;\n+\n",
  "problem_statement": "`bitHammingDistance` is wrong for big integer data types.\n```\r\nmilovidov-desktop :) SELECT 314776434768051644139306697240981192872::UInt128 AS x, 0::UInt128 AS y, bitCount(bitXor(x, y)) AS a, bitHammingDistance(x, y) AS b\r\n\r\nSELECT\r\n    CAST('314776434768051644139306697240981192872', 'UInt128') AS x,\r\n    CAST('0', 'UInt128') AS y,\r\n    bitCount(bitXor(x, y)) AS a,\r\n    bitHammingDistance(x, y) AS b\r\n\r\nQuery id: b7b00e85-2c4e-428c-8698-e15eea5fae15\r\n\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500x\u2500\u252c\u2500y\u2500\u252c\u2500\u2500a\u2500\u252c\u2500\u2500b\u2500\u2510\r\n\u2502 314776434768051644139306697240981192872 \u2502 0 \u2502 74 \u2502 32 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.001 sec.\r\n```\r\n\n",
  "hints_text": "",
  "created_at": "2023-11-21T17:38:54Z",
  "modified_files": [
    "src/Functions/bitCount.cpp",
    "src/Functions/bitHammingDistance.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02921_bit_hamming_distance_big_int.reference",
    "b/tests/queries/0_stateless/02921_bit_hamming_distance_big_int.sql"
  ]
}