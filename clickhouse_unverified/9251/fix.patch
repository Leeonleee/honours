diff --git a/dbms/src/Interpreters/CrossToInnerJoinVisitor.cpp b/dbms/src/Interpreters/CrossToInnerJoinVisitor.cpp
index 54d5205c4c29..740fe35e9368 100644
--- a/dbms/src/Interpreters/CrossToInnerJoinVisitor.cpp
+++ b/dbms/src/Interpreters/CrossToInnerJoinVisitor.cpp
@@ -124,15 +124,12 @@ class CheckExpressionVisitorData
         {
             /// leave other comparisons as is
         }
-        else if (functionIsLikeOperator(node.name)) /// LIKE, NOT LIKE
+        else if (functionIsLikeOperator(node.name) || /// LIKE, NOT LIKE
+                 functionIsInOperator(node.name))  /// IN, NOT IN
         {
-            /// leave as is
-        }
-        else if (functionIsInOperator(node.name)) /// IN, NOT IN
-        {
-            if (auto ident = node.arguments->children.at(0)->as<ASTIdentifier>())
-                if (size_t min_table = checkIdentifier(*ident))
-                    asts_to_join_on[min_table].push_back(ast);
+            /// leave as is. It's not possible to make push down here cause of unknown aliases and not implemented JOIN predicates.
+            ///     select a as b form t1, t2 where t1.x = t2.x and b in(42)
+            ///     select a as b form t1 inner join t2 on t1.x = t2.x and b in(42)
         }
         else
         {
@@ -202,16 +199,6 @@ class CheckExpressionVisitorData
         }
         return 0;
     }
-
-    size_t checkIdentifier(const ASTIdentifier & identifier)
-    {
-        size_t best_table_pos = 0;
-        bool match = IdentifierSemantic::chooseTable(identifier, tables, best_table_pos);
-
-        if (match && joined_tables[best_table_pos].canAttachOnExpression())
-            return best_table_pos;
-        return 0;
-    }
 };
 
 using CheckExpressionMatcher = ConstOneTypeMatcher<CheckExpressionVisitorData, false>;
