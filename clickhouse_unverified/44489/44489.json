{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 44489,
  "instance_id": "ClickHouse__ClickHouse-44489",
  "issue_numbers": [
    "44467"
  ],
  "base_commit": "40b00432d2beb246ce89d19924cbaf0c1b211fee",
  "patch": "diff --git a/src/AggregateFunctions/AggregateFunctionSparkbar.h b/src/AggregateFunctions/AggregateFunctionSparkbar.h\nindex 882575e20059..8cf84660775d 100644\n--- a/src/AggregateFunctions/AggregateFunctionSparkbar.h\n+++ b/src/AggregateFunctions/AggregateFunctionSparkbar.h\n@@ -1,14 +1,19 @@\n #pragma once\n \n+#include <array>\n+#include <string_view>\n #include <DataTypes/DataTypeString.h>\n #include <AggregateFunctions/IAggregateFunction.h>\n #include <base/range.h>\n #include <IO/ReadHelpers.h>\n #include <IO/WriteHelpers.h>\n #include <Columns/ColumnString.h>\n+#include <Common/PODArray.h>\n #include <Common/logger_useful.h>\n #include <IO/ReadBufferFromString.h>\n #include <Common/HashTable/HashMap.h>\n+#include <Columns/IColumn.h>\n+\n \n namespace DB\n {\n@@ -105,24 +110,12 @@ class AggregateFunctionSparkbar final\n     bool specified_min_max_x;\n \n     template <class T>\n-    String getBar(const T value) const\n+    size_t updateFrame(ColumnString::Chars & frame, const T value) const\n     {\n-        if (isNaN(value) || value > 8 || value < 1)\n-            return \" \";\n-\n-        // \u2581\u2582\u2583\u2584\u2585\u2586\u2587\u2588\n-        switch (static_cast<UInt8>(value))\n-        {\n-            case 1: return \"\u2581\";\n-            case 2: return \"\u2582\";\n-            case 3: return \"\u2583\";\n-            case 4: return \"\u2584\";\n-            case 5: return \"\u2585\";\n-            case 6: return \"\u2586\";\n-            case 7: return \"\u2587\";\n-            case 8: return \"\u2588\";\n-        }\n-        return \" \";\n+        static constexpr std::array<std::string_view, 9> bars{\" \", \"\u2581\", \"\u2582\", \"\u2583\", \"\u2584\", \"\u2585\", \"\u2586\", \"\u2587\", \"\u2588\"};\n+        const auto & bar = (isNaN(value) || value > 8 || value < 1) ? bars[0] : bars[static_cast<UInt8>(value)];\n+        frame.insert(bar.begin(), bar.end());\n+        return bar.size();\n     }\n \n     /**\n@@ -136,11 +129,19 @@ class AggregateFunctionSparkbar final\n      *  the actual y value of the first position + the actual second position y*0.1, and the remaining y*0.9 is reserved for the next bucket.\n      *  The next bucket will use the last y*0.9 + the actual third position y*0.2, and the remaining y*0.8 will be reserved for the next bucket. And so on.\n      */\n-    String render(const AggregateFunctionSparkbarData<X, Y> & data) const\n+    void render(ColumnString & to_column, const AggregateFunctionSparkbarData<X, Y> & data) const\n     {\n-        String value;\n+        size_t sz = 0;\n+        auto & values = to_column.getChars();\n+        auto & offsets = to_column.getOffsets();\n+        auto update_column = [&] ()\n+        {\n+            values.push_back('\\0');\n+            offsets.push_back(offsets.empty() ? sz + 1 : offsets.back() + sz + 1);\n+        };\n+\n         if (data.points.empty() || !width)\n-            return value;\n+            return update_column();\n \n         size_t diff_x;\n         X min_x_local;\n@@ -167,13 +168,13 @@ class AggregateFunctionSparkbar final\n                 {\n                     auto it = data.points.find(static_cast<X>(min_x_local + i));\n                     bool found = it != data.points.end();\n-                    value += getBar(found ? std::round(((it->getMapped() - min_y) / diff_y) * 7) + 1 : 0.0);\n+                    sz += updateFrame(values, found ? std::round(((it->getMapped() - min_y) / diff_y) * 7) + 1 : 0.0);\n                 }\n             }\n             else\n             {\n                 for (size_t i = 0; i <= diff_x; ++i)\n-                    value += getBar(data.points.has(min_x_local + static_cast<X>(i)) ? 1 : 0);\n+                    sz += updateFrame(values, data.points.has(min_x_local + static_cast<X>(i)) ? 1 : 0);\n             }\n         }\n         else\n@@ -236,25 +237,25 @@ class AggregateFunctionSparkbar final\n             }\n \n             if (!min_y || !max_y) // No value is set\n-                return {};\n+                return update_column();\n \n             Float64 diff_y = max_y.value() - min_y.value();\n \n-            auto get_bars = [&] (const std::optional<Float64> & point_y)\n+            auto update_frame = [&] (const std::optional<Float64> & point_y)\n             {\n-                value += getBar(point_y ? std::round(((point_y.value() - min_y.value()) / diff_y) * 7) + 1 : 0);\n+                sz += updateFrame(values, point_y ? std::round(((point_y.value() - min_y.value()) / diff_y) * 7) + 1 : 0);\n             };\n-            auto get_bars_for_constant = [&] (const std::optional<Float64> & point_y)\n+            auto update_frame_for_constant = [&] (const std::optional<Float64> & point_y)\n             {\n-                value += getBar(point_y ? 1 : 0);\n+                sz += updateFrame(values, point_y ? 1 : 0);\n             };\n \n             if (diff_y != 0.0)\n-                std::for_each(new_points.begin(), new_points.end(), get_bars);\n+                std::for_each(new_points.begin(), new_points.end(), update_frame);\n             else\n-                std::for_each(new_points.begin(), new_points.end(), get_bars_for_constant);\n+                std::for_each(new_points.begin(), new_points.end(), update_frame_for_constant);\n         }\n-        return value;\n+        update_column();\n     }\n \n \n@@ -314,8 +315,7 @@ class AggregateFunctionSparkbar final\n     {\n         auto & to_column = assert_cast<ColumnString &>(to);\n         const auto & data = this->data(place);\n-        const String & value = render(data);\n-        to_column.insertData(value.data(), value.size());\n+        render(to_column, data);\n     }\n };\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02016_aggregation_spark_bar.sql b/tests/queries/0_stateless/02016_aggregation_spark_bar.sql\nindex 8b5b62305ecb..5237f832d25e 100644\n--- a/tests/queries/0_stateless/02016_aggregation_spark_bar.sql\n+++ b/tests/queries/0_stateless/02016_aggregation_spark_bar.sql\n@@ -35,3 +35,10 @@ SELECT sparkbar(5,toDate('2020-01-01'),toDate('2020-01-10'))(event_date,cnt) FRO\n DROP TABLE IF EXISTS spark_bar_test;\n \n WITH number DIV 50 AS k, number % 50 AS value SELECT k, sparkbar(50, 0, 99)(number, value) FROM numbers(100) GROUP BY k ORDER BY k;\n+\n+-- OOM guard\n+DROP TABLE IF EXISTS spark_bar_oom;\n+CREATE TABLE spark_bar_oom (x UInt64, y UInt8) Engine=MergeTree ORDER BY tuple();\n+INSERT INTO spark_bar_oom VALUES (18446744073709551615,255),(0,0),(0,0),(4036797895307271799,163);\n+SELECT sparkbar(9)(x,y) FROM spark_bar_oom SETTINGS max_memory_usage = 100000000; -- { serverError 241 }\n+DROP TABLE IF EXISTS spark_bar_oom;\n",
  "problem_statement": "sparkbar aggregate function causes server to be killed with OOM\n**Describe what's wrong**\r\nUsing `sparkbar` aggregate function on tables that contain large UInt64 values causes OOM (Out of Memory) Killer process to kill ClickHouse server irrespective of any memory usage restrictions set.\r\n\r\n**Does it reproduce on recent release?**\r\nYes. Any version `>=21.11` including the latest `22.12`. Also reproducible on ClickHouse.Cloud.\r\n\r\n**How to reproduce**\r\n\r\n```sql\r\nDROP TABLE IF EXISTS test; \r\nCREATE TABLE test (x UInt64, y UInt8) Engine=MergeTree ORDER BY tuple();\r\nINSERT INTO test VALUES (18446744073709551615,255),(0,0),(0,0),(4036797895307271799,163)\r\nSELECT sparkbar(9)(x,y) FROM test;\r\n```\r\n\r\n**Expected behavior**\r\n\r\nMemory restrictions should be enforced and server should not be killed with OOM.\r\n\r\n**Error message and/or stacktrace**\r\n\r\n```\r\n2022.12.20 01:48:30.983421 [ 1 ] {} <Fatal> Application: Child process was terminated by signal 9 (KILL). If it is not done by 'forcestop' command or manually, the possible cause is OOM Killer (see 'dmesg' and look at the '/var/log/kern.log' for the details).\r\n```\r\n\r\n\n",
  "hints_text": "Ref: https://github.com/ClickHouse/ClickHouse/pull/27481\r\ncc: @nicelulu, @evillique ",
  "created_at": "2022-12-21T14:19:35Z"
}