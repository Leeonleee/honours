{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 43788,
  "instance_id": "ClickHouse__ClickHouse-43788",
  "issue_numbers": [
    "6827"
  ],
  "base_commit": "44312e3e9712002c6a9cf6ba56487bd82d8b6daa",
  "patch": "diff --git a/docs/en/sql-reference/functions/url-functions.md b/docs/en/sql-reference/functions/url-functions.md\nindex b03ca88fc614..b515f6ad5180 100644\n--- a/docs/en/sql-reference/functions/url-functions.md\n+++ b/docs/en/sql-reference/functions/url-functions.md\n@@ -464,5 +464,39 @@ Removes the query string and fragment identifier. The question mark and number s\n \n ### cutURLParameter(URL, name)\n \n-Removes the \u2018name\u2019 URL parameter, if present. This function works under the assumption that the parameter name is encoded in the URL exactly the same way as in the passed argument.\n+Removes the `name` parameter from URL, if present. This function does not encode or decode characters in parameter names, e.g. `Client ID` and `Client%20ID` are treated as different parameter names.\n \n+**Syntax**\n+\n+``` sql\n+cutURLParameter(URL, name)\n+```\n+\n+**Arguments**\n+\n+-   `url` \u2014 URL. [String](../../sql-reference/data-types/string.md).\n+-   `name` \u2014 name of URL parameter. [String](../../sql-reference/data-types/string.md) or [Array](../../sql-reference/data-types/array.md) of Strings.\n+\n+**Returned value**\n+\n+-   URL with `name` URL parameter removed.\n+\n+Type: `String`.\n+\n+**Example**\n+\n+Query:\n+\n+``` sql\n+SELECT\n+    cutURLParameter('http://bigmir.net/?a=b&c=d&e=f#g', 'a') as url_without_a,\n+    cutURLParameter('http://bigmir.net/?a=b&c=d&e=f#g', ['c', 'e']) as url_without_c_and_e;\n+```\n+\n+Result:\n+\n+``` text\n+\u250c\u2500url_without_a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500url_without_c_and_e\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 http://bigmir.net/?c=d&e=f#g \u2502 http://bigmir.net/?a=b#g \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\ndiff --git a/docs/ru/sql-reference/functions/url-functions.md b/docs/ru/sql-reference/functions/url-functions.md\nindex 34bb88f49912..3c6e6151ef82 100644\n--- a/docs/ru/sql-reference/functions/url-functions.md\n+++ b/docs/ru/sql-reference/functions/url-functions.md\n@@ -404,5 +404,39 @@ SELECT netloc('http://paul@www.example.com:80/');\n \n ### cutURLParameter(URL, name) {#cuturlparameterurl-name}\n \n-\u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 URL \u0441 \u0438\u043c\u0435\u043d\u0435\u043c name, \u0435\u0441\u043b\u0438 \u0442\u0430\u043a\u043e\u0439 \u0435\u0441\u0442\u044c. \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043f\u0440\u0438 \u0434\u043e\u043f\u0443\u0449\u0435\u043d\u0438\u0438, \u0447\u0442\u043e \u0438\u043c\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u043e \u0432 URL \u0432 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438 \u0442\u0430\u043a\u0438\u043c \u0436\u0435 \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0447\u0442\u043e \u0438 \u0432 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u043e\u043c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0435.\n+\u0423\u0434\u0430\u043b\u044f\u0435\u0442 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c `name` \u0438\u0437 URL, \u0435\u0441\u043b\u0438 \u0442\u0430\u043a\u043e\u0439 \u0435\u0441\u0442\u044c. \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0435 \u043a\u043e\u0434\u0438\u0440\u0443\u0435\u0442 \u0438\u043b\u0438 \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u0443\u0435\u0442 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0432 \u0438\u043c\u0435\u043d\u0430\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 `Client ID` \u0438 `Client%20ID` \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043a\u0430\u043a \u0440\u0430\u0437\u043d\u044b\u0435 \u0438\u043c\u0435\u043d\u0430 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432.\n \n+**\u0421\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441**\n+\n+``` sql\n+cutURLParameter(URL, name)\n+```\n+\n+**\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b**\n+\n+-   `url` \u2014 URL. [String](../../sql-reference/data-types/string.md).\n+-   `name` \u2014 \u0438\u043c\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 URL. [String](../../sql-reference/data-types/string.md) \u0438\u043b\u0438 [Array](../../sql-reference/data-types/array.md) \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0438\u0437 \u0441\u0442\u0440\u043e\u043a.\n+\n+**\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435**\n+\n+-   URL \u0441 \u0443\u0434\u0430\u043b\u0451\u043d\u043d\u044b\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c URL \u0441 \u0438\u043c\u0435\u043d\u0435\u043c `name`.\n+\n+Type: `String`.\n+\n+**\u041f\u0440\u0438\u043c\u0435\u0440**\n+\n+\u0417\u0430\u043f\u0440\u043e\u0441:\n+\n+``` sql\n+SELECT\n+    cutURLParameter('http://bigmir.net/?a=b&c=d&e=f#g', 'a') as url_without_a,\n+    cutURLParameter('http://bigmir.net/?a=b&c=d&e=f#g', ['c', 'e']) as url_without_c_and_e;\n+```\n+\n+\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n+\n+``` text\n+\u250c\u2500url_without_a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500url_without_c_and_e\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 http://bigmir.net/?c=d&e=f#g \u2502 http://bigmir.net/?a=b#g \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\ndiff --git a/src/Functions/URL/cutURLParameter.cpp b/src/Functions/URL/cutURLParameter.cpp\nindex 6077b068bd08..7a2b96ec874b 100644\n--- a/src/Functions/URL/cutURLParameter.cpp\n+++ b/src/Functions/URL/cutURLParameter.cpp\n@@ -1,82 +1,174 @@\n+#include <Columns/ColumnString.h>\n+#include <DataTypes/DataTypeArray.h>\n+#include <DataTypes/DataTypeString.h>\n+#include <Functions/FunctionHelpers.h>\n #include <Functions/FunctionFactory.h>\n-#include <Functions/FunctionsStringSearchToString.h>\n #include <base/find_symbols.h>\n \n namespace DB\n {\n \n-struct CutURLParameterImpl\n+namespace ErrorCodes\n {\n+    extern const int ILLEGAL_TYPE_OF_ARGUMENT;\n+    extern const int ILLEGAL_COLUMN;\n+}\n+\n+class FunctionCutURLParameter : public IFunction\n+{\n+public:\n+    static constexpr auto name = \"cutURLParameter\";\n+    static FunctionPtr create(ContextPtr) { return std::make_shared<FunctionCutURLParameter>(); }\n+\n+    String getName() const override { return name; }\n+\n+    size_t getNumberOfArguments() const override { return 2; }\n+\n+    bool useDefaultImplementationForConstants() const override { return true; }\n+    ColumnNumbers getArgumentsThatAreAlwaysConstant() const override { return {1}; }\n+\n+    bool isSuitableForShortCircuitArgumentsExecution(const DataTypesWithConstInfo & /*arguments*/) const override { return true; }\n+\n+    DataTypePtr getReturnTypeImpl(const DataTypes & arguments) const override\n+    {\n+        if (!isString(arguments[0]))\n+            throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,\n+                \"Illegal type {} of argument of function {}\",\n+                arguments[0]->getName(), getName());\n+\n+        if (!isString(arguments[1]) && !isArray(arguments[1]))\n+            throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,\n+                \"Illegal type {} of argument of function {}\",\n+                 arguments[1]->getName(), getName());\n+\n+        return std::make_shared<DataTypeString>();\n+    }\n+\n+    ColumnPtr executeImpl(const ColumnsWithTypeAndName & arguments, const DataTypePtr &, size_t /*input_rows_count*/) const override\n+    {\n+        const ColumnPtr column = arguments[0].column;\n+        const ColumnPtr column_needle = arguments[1].column;\n+\n+        const ColumnConst * col_needle = typeid_cast<const ColumnConst *>(&*column_needle);\n+        const ColumnArray * col_needle_const_array = checkAndGetColumnConstData<ColumnArray>(column_needle.get());\n+\n+        if (!col_needle && !col_needle_const_array)\n+            throw Exception(ErrorCodes::ILLEGAL_COLUMN,\n+                \"Second argument of function {} must be constant string or constant array\",\n+                getName());\n+\n+        if (col_needle_const_array)\n+        {\n+            if (!col_needle_const_array->getData().empty() && typeid_cast<const DataTypeArray &>(*arguments[1].type).getNestedType()->getTypeId() != TypeIndex::String)\n+                throw Exception(ErrorCodes::ILLEGAL_COLUMN,\n+                    \"Second argument of function {} must be constant array of strings\",\n+                    getName());\n+        }\n+\n+        if (const ColumnString * col = checkAndGetColumn<ColumnString>(column.get()))\n+        {\n+            auto col_res = ColumnString::create();\n+\n+            ColumnString::Chars & vec_res = col_res->getChars();\n+            ColumnString::Offsets & offsets_res = col_res->getOffsets();\n+            vector(col->getChars(), col->getOffsets(), col_needle, col_needle_const_array, vec_res, offsets_res);\n+            return col_res;\n+        }\n+        else\n+            throw Exception(ErrorCodes::ILLEGAL_COLUMN,\n+                \"Illegal column {} of argument of function {}\",\n+                arguments[0].column->getName(), getName());\n+    }\n+\n+    static void cutURL(ColumnString::Chars & data, String pattern, size_t prev_offset, size_t & cur_offset)\n+    {\n+        pattern += '=';\n+        const char * param_str = pattern.c_str();\n+        size_t param_len = pattern.size();\n+\n+        const char * url_begin = reinterpret_cast<const char *>(&data[prev_offset]);\n+        const char * url_end = reinterpret_cast<const char *>(&data[cur_offset - 2]);\n+        const char * begin_pos = url_begin;\n+        const char * end_pos = begin_pos;\n+\n+        do\n+        {\n+            const char * query_string_begin = find_first_symbols<'?', '#'>(url_begin, url_end);\n+            if (query_string_begin + 1 >= url_end)\n+                break;\n+\n+            const char * pos = static_cast<const char *>(memmem(query_string_begin + 1, url_end - query_string_begin - 1, param_str, param_len));\n+            if (pos == nullptr)\n+                break;\n+\n+            if (pos[-1] != '?' && pos[-1] != '#' && pos[-1] != '&')\n+            {\n+                pos = nullptr;\n+                break;\n+            }\n+\n+            begin_pos = pos;\n+            end_pos = begin_pos + param_len;\n+\n+            /// Skip the value.\n+            while (*end_pos && *end_pos != '&' && *end_pos != '#')\n+                ++end_pos;\n+\n+            /// Capture '&' before or after the parameter.\n+            if (*end_pos == '&')\n+                ++end_pos;\n+            else if (begin_pos[-1] == '&')\n+                --begin_pos;\n+        } while (false);\n+\n+        size_t cut_length = end_pos - begin_pos;\n+        cur_offset -= cut_length;\n+        data.erase(data.begin() + prev_offset + (begin_pos - url_begin), data.begin() + prev_offset+  (end_pos - url_begin));\n+    }\n+\n     static void vector(const ColumnString::Chars & data,\n         const ColumnString::Offsets & offsets,\n-        std::string pattern,\n+        const ColumnConst * col_needle,\n+        const ColumnArray * col_needle_const_array,\n         ColumnString::Chars & res_data, ColumnString::Offsets & res_offsets)\n     {\n         res_data.reserve(data.size());\n         res_offsets.resize(offsets.size());\n \n-        pattern += '=';\n-        const char * param_str = pattern.c_str();\n-        size_t param_len = pattern.size();\n-\n         size_t prev_offset = 0;\n+        size_t cur_offset;\n+        size_t cur_len;\n         size_t res_offset = 0;\n+        size_t cur_res_offset;\n \n         for (size_t i = 0; i < offsets.size(); ++i)\n         {\n-            size_t cur_offset = offsets[i];\n-\n-            const char * url_begin = reinterpret_cast<const char *>(&data[prev_offset]);\n-            const char * url_end = reinterpret_cast<const char *>(&data[cur_offset]) - 1;\n-            const char * begin_pos = url_begin;\n-            const char * end_pos = begin_pos;\n+            cur_offset = offsets[i];\n+            cur_len = cur_offset - prev_offset;\n+            cur_res_offset = res_offset + cur_len;\n+            res_data.resize(cur_res_offset);\n+            memcpySmallAllowReadWriteOverflow15(&res_data[res_offset], &data[prev_offset], cur_len);\n \n-            do\n+            if (col_needle_const_array)\n             {\n-                const char * query_string_begin = find_first_symbols<'?', '#'>(url_begin, url_end);\n-                if (query_string_begin + 1 >= url_end)\n-                    break;\n-\n-                const char * pos = static_cast<const char *>(memmem(query_string_begin + 1, url_end - query_string_begin - 1, param_str, param_len));\n-                if (pos == nullptr)\n-                    break;\n-\n-                if (pos[-1] != '?' && pos[-1] != '#' && pos[-1] != '&')\n+                size_t num_needles = col_needle_const_array->getData().size();\n+                for (size_t j = 0; j < num_needles; ++j)\n                 {\n-                    pos = nullptr;\n-                    break;\n+                    auto field = col_needle_const_array->getData()[j];\n+                    cutURL(res_data, field.get<String>(), res_offset, cur_res_offset);\n                 }\n-\n-                begin_pos = pos;\n-                end_pos = begin_pos + param_len;\n-\n-                /// Skip the value.\n-                while (*end_pos && *end_pos != '&' && *end_pos != '#')\n-                    ++end_pos;\n-\n-                /// Capture '&' before or after the parameter.\n-                if (*end_pos == '&')\n-                    ++end_pos;\n-                else if (begin_pos[-1] == '&')\n-                    --begin_pos;\n-            } while (false);\n-\n-            size_t cut_length = (url_end - url_begin) - (end_pos - begin_pos);\n-            res_data.resize(res_offset + cut_length + 1);\n-            memcpySmallAllowReadWriteOverflow15(&res_data[res_offset], url_begin, begin_pos - url_begin);\n-            memcpySmallAllowReadWriteOverflow15(&res_data[res_offset] + (begin_pos - url_begin), end_pos, url_end - end_pos);\n-            res_offset += cut_length + 1;\n-            res_data[res_offset - 1] = 0;\n-            res_offsets[i] = res_offset;\n-\n+            }\n+            else\n+            {\n+                cutURL(res_data, col_needle->getValue<String>(), res_offset, cur_res_offset);\n+            }\n+            res_offsets[i] = cur_res_offset;\n+            res_offset = cur_res_offset;\n             prev_offset = cur_offset;\n         }\n     }\n };\n \n-struct NameCutURLParameter { static constexpr auto name = \"cutURLParameter\"; };\n-using FunctionCutURLParameter = FunctionsStringSearchToString<CutURLParameterImpl, NameCutURLParameter>;\n-\n REGISTER_FUNCTION(CutURLParameter)\n {\n     factory.registerFunction<FunctionCutURLParameter>();\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02483_cuturlparameter_with_arrays.reference b/tests/queries/0_stateless/02483_cuturlparameter_with_arrays.reference\nnew file mode 100644\nindex 000000000000..dd677873c7c4\n--- /dev/null\n+++ b/tests/queries/0_stateless/02483_cuturlparameter_with_arrays.reference\n@@ -0,0 +1,117 @@\n+-- { echoOn }\n+SELECT\n+    cutURLParameter('http://bigmir.net/?a=b&c=d', []),\n+    cutURLParameter('http://bigmir.net/?a=b&c=d', ['a']),\n+    cutURLParameter('http://bigmir.net/?a=b&c=d', ['a', 'c']),\n+    cutURLParameter('http://bigmir.net/?a=b&c=d', ['c']),\n+    cutURLParameter('http://bigmir.net/?a=b&c=d#e=f', ['a', 'e']),\n+    cutURLParameter('http://bigmir.net/?a&c=d#e=f', ['c', 'e']),\n+    cutURLParameter('http://bigmir.net/?a&c=d#e=f', ['e']),\n+    cutURLParameter('http://bigmir.net/?a=b&c=d#e=f&g=h', ['b', 'g']),\n+    cutURLParameter('http://bigmir.net/?a=b&c=d#e', ['a', 'e']),\n+    cutURLParameter('http://bigmir.net/?a=b&c=d#e&g=h', ['c', 'g']),\n+    cutURLParameter('http://bigmir.net/?a=b&c=d#e&g=h', ['e', 'g']),\n+    cutURLParameter('http://bigmir.net/?a=b&c=d#test?e=f&g=h', ['test', 'e']),\n+    cutURLParameter('http://bigmir.net/?a=b&c=d#test?e=f&g=h', ['test', 'g']),\n+    cutURLParameter('//bigmir.net/?a=b&c=d', []),\n+    cutURLParameter('//bigmir.net/?a=b&c=d', ['a']),\n+    cutURLParameter('//bigmir.net/?a=b&c=d', ['a', 'c']),\n+    cutURLParameter('//bigmir.net/?a=b&c=d#e=f', ['a', 'e']),\n+    cutURLParameter('//bigmir.net/?a&c=d#e=f', ['a']),\n+    cutURLParameter('//bigmir.net/?a&c=d#e=f', ['a', 'c']),\n+    cutURLParameter('//bigmir.net/?a&c=d#e=f', ['a', 'e']),\n+    cutURLParameter('//bigmir.net/?a=b&c=d#e=f&g=h', ['c', 'g']),\n+    cutURLParameter('//bigmir.net/?a=b&c=d#e', ['a', 'c']),\n+    cutURLParameter('//bigmir.net/?a=b&c=d#e', ['a', 'e']),\n+    cutURLParameter('//bigmir.net/?a=b&c=d#e&g=h', ['c', 'e']),\n+    cutURLParameter('//bigmir.net/?a=b&c=d#e&g=h', ['e', 'g']),\n+    cutURLParameter('//bigmir.net/?a=b&c=d#test?e=f&g=h', ['test', 'e']),\n+    cutURLParameter('//bigmir.net/?a=b&c=d#test?e=f&g=h', ['test', 'g'])\n+    FORMAT Vertical;\n+Row 1:\n+\u2500\u2500\u2500\u2500\u2500\u2500\n+cutURLParameter('http://bigmir.net/?a=b&c=d', []):                         http://bigmir.net/?a=b&c=d\n+cutURLParameter('http://bigmir.net/?a=b&c=d', ['a']):                      http://bigmir.net/?c=d\n+cutURLParameter('http://bigmir.net/?a=b&c=d', ['a', 'c']):                 http://bigmir.net/?\n+cutURLParameter('http://bigmir.net/?a=b&c=d', ['c']):                      http://bigmir.net/?a=b\n+cutURLParameter('http://bigmir.net/?a=b&c=d#e=f', ['a', 'e']):             http://bigmir.net/?c=d#\n+cutURLParameter('http://bigmir.net/?a&c=d#e=f', ['c', 'e']):               http://bigmir.net/?a#\n+cutURLParameter('http://bigmir.net/?a&c=d#e=f', ['e']):                    http://bigmir.net/?a&c=d#\n+cutURLParameter('http://bigmir.net/?a=b&c=d#e=f&g=h', ['b', 'g']):         http://bigmir.net/?a=b&c=d#e=f\n+cutURLParameter('http://bigmir.net/?a=b&c=d#e', ['a', 'e']):               http://bigmir.net/?c=d#e\n+cutURLParameter('http://bigmir.net/?a=b&c=d#e&g=h', ['c', 'g']):           http://bigmir.net/?a=b#e\n+cutURLParameter('http://bigmir.net/?a=b&c=d#e&g=h', ['e', 'g']):           http://bigmir.net/?a=b&c=d#e\n+cutURLParameter('http://bigmir.net/?a=b&c=d#test?e=f&g=h', ['test', 'e']): http://bigmir.net/?a=b&c=d#test?g=h\n+cutURLParameter('http://bigmir.net/?a=b&c=d#test?e=f&g=h', ['test', 'g']): http://bigmir.net/?a=b&c=d#test?e=f\n+cutURLParameter('//bigmir.net/?a=b&c=d', []):                              //bigmir.net/?a=b&c=d\n+cutURLParameter('//bigmir.net/?a=b&c=d', ['a']):                           //bigmir.net/?c=d\n+cutURLParameter('//bigmir.net/?a=b&c=d', ['a', 'c']):                      //bigmir.net/?\n+cutURLParameter('//bigmir.net/?a=b&c=d#e=f', ['a', 'e']):                  //bigmir.net/?c=d#\n+cutURLParameter('//bigmir.net/?a&c=d#e=f', ['a']):                         //bigmir.net/?a&c=d#e=f\n+cutURLParameter('//bigmir.net/?a&c=d#e=f', ['a', 'c']):                    //bigmir.net/?a#e=f\n+cutURLParameter('//bigmir.net/?a&c=d#e=f', ['a', 'e']):                    //bigmir.net/?a&c=d#\n+cutURLParameter('//bigmir.net/?a=b&c=d#e=f&g=h', ['c', 'g']):              //bigmir.net/?a=b#e=f\n+cutURLParameter('//bigmir.net/?a=b&c=d#e', ['a', 'c']):                    //bigmir.net/?#e\n+cutURLParameter('//bigmir.net/?a=b&c=d#e', ['a', 'e']):                    //bigmir.net/?c=d#e\n+cutURLParameter('//bigmir.net/?a=b&c=d#e&g=h', ['c', 'e']):                //bigmir.net/?a=b#e&g=h\n+cutURLParameter('//bigmir.net/?a=b&c=d#e&g=h', ['e', 'g']):                //bigmir.net/?a=b&c=d#e\n+cutURLParameter('//bigmir.net/?a=b&c=d#test?e=f&g=h', ['test', 'e']):      //bigmir.net/?a=b&c=d#test?g=h\n+cutURLParameter('//bigmir.net/?a=b&c=d#test?e=f&g=h', ['test', 'g']):      //bigmir.net/?a=b&c=d#test?e=f\n+SELECT\n+    cutURLParameter(materialize('http://bigmir.net/?a=b&c=d'), []),\n+    cutURLParameter(materialize('http://bigmir.net/?a=b&c=d'), ['a']),\n+    cutURLParameter(materialize('http://bigmir.net/?a=b&c=d'), ['a', 'c']),\n+    cutURLParameter(materialize('http://bigmir.net/?a=b&c=d'), ['c']),\n+    cutURLParameter(materialize('http://bigmir.net/?a=b&c=d#e=f'), ['a', 'e']),\n+    cutURLParameter(materialize('http://bigmir.net/?a&c=d#e=f'), ['c', 'e']),\n+    cutURLParameter(materialize('http://bigmir.net/?a&c=d#e=f'), ['e']),\n+    cutURLParameter(materialize('http://bigmir.net/?a=b&c=d#e=f&g=h'), ['b', 'g']),\n+    cutURLParameter(materialize('http://bigmir.net/?a=b&c=d#e'), ['a', 'e']),\n+    cutURLParameter(materialize('http://bigmir.net/?a=b&c=d#e&g=h'), ['c', 'g']),\n+    cutURLParameter(materialize('http://bigmir.net/?a=b&c=d#e&g=h'), ['e', 'g']),\n+    cutURLParameter(materialize('http://bigmir.net/?a=b&c=d#test?e=f&g=h'), ['test', 'e']),\n+    cutURLParameter(materialize('http://bigmir.net/?a=b&c=d#test?e=f&g=h'), ['test', 'g']),\n+    cutURLParameter(materialize('//bigmir.net/?a=b&c=d'), []),\n+    cutURLParameter(materialize('//bigmir.net/?a=b&c=d'), ['a']),\n+    cutURLParameter(materialize('//bigmir.net/?a=b&c=d'), ['a', 'c']),\n+    cutURLParameter(materialize('//bigmir.net/?a=b&c=d#e=f'), ['a', 'e']),\n+    cutURLParameter(materialize('//bigmir.net/?a&c=d#e=f'), ['a']),\n+    cutURLParameter(materialize('//bigmir.net/?a&c=d#e=f'), ['a', 'c']),\n+    cutURLParameter(materialize('//bigmir.net/?a&c=d#e=f'), ['a', 'e']),\n+    cutURLParameter(materialize('//bigmir.net/?a=b&c=d#e=f&g=h'), ['c', 'g']),\n+    cutURLParameter(materialize('//bigmir.net/?a=b&c=d#e'), ['a', 'c']),\n+    cutURLParameter(materialize('//bigmir.net/?a=b&c=d#e'), ['a', 'e']),\n+    cutURLParameter(materialize('//bigmir.net/?a=b&c=d#e&g=h'), ['c', 'e']),\n+    cutURLParameter(materialize('//bigmir.net/?a=b&c=d#e&g=h'), ['e', 'g']),\n+    cutURLParameter(materialize('//bigmir.net/?a=b&c=d#test?e=f&g=h'), ['test', 'e']),\n+    cutURLParameter(materialize('//bigmir.net/?a=b&c=d#test?e=f&g=h'), ['test', 'g'])\n+    FORMAT Vertical;\n+Row 1:\n+\u2500\u2500\u2500\u2500\u2500\u2500\n+cutURLParameter(materialize('http://bigmir.net/?a=b&c=d'), []):                         http://bigmir.net/?a=b&c=d\n+cutURLParameter(materialize('http://bigmir.net/?a=b&c=d'), ['a']):                      http://bigmir.net/?c=d\n+cutURLParameter(materialize('http://bigmir.net/?a=b&c=d'), ['a', 'c']):                 http://bigmir.net/?\n+cutURLParameter(materialize('http://bigmir.net/?a=b&c=d'), ['c']):                      http://bigmir.net/?a=b\n+cutURLParameter(materialize('http://bigmir.net/?a=b&c=d#e=f'), ['a', 'e']):             http://bigmir.net/?c=d#\n+cutURLParameter(materialize('http://bigmir.net/?a&c=d#e=f'), ['c', 'e']):               http://bigmir.net/?a#\n+cutURLParameter(materialize('http://bigmir.net/?a&c=d#e=f'), ['e']):                    http://bigmir.net/?a&c=d#\n+cutURLParameter(materialize('http://bigmir.net/?a=b&c=d#e=f&g=h'), ['b', 'g']):         http://bigmir.net/?a=b&c=d#e=f\n+cutURLParameter(materialize('http://bigmir.net/?a=b&c=d#e'), ['a', 'e']):               http://bigmir.net/?c=d#e\n+cutURLParameter(materialize('http://bigmir.net/?a=b&c=d#e&g=h'), ['c', 'g']):           http://bigmir.net/?a=b#e\n+cutURLParameter(materialize('http://bigmir.net/?a=b&c=d#e&g=h'), ['e', 'g']):           http://bigmir.net/?a=b&c=d#e\n+cutURLParameter(materialize('http://bigmir.net/?a=b&c=d#test?e=f&g=h'), ['test', 'e']): http://bigmir.net/?a=b&c=d#test?g=h\n+cutURLParameter(materialize('http://bigmir.net/?a=b&c=d#test?e=f&g=h'), ['test', 'g']): http://bigmir.net/?a=b&c=d#test?e=f\n+cutURLParameter(materialize('//bigmir.net/?a=b&c=d'), []):                              //bigmir.net/?a=b&c=d\n+cutURLParameter(materialize('//bigmir.net/?a=b&c=d'), ['a']):                           //bigmir.net/?c=d\n+cutURLParameter(materialize('//bigmir.net/?a=b&c=d'), ['a', 'c']):                      //bigmir.net/?\n+cutURLParameter(materialize('//bigmir.net/?a=b&c=d#e=f'), ['a', 'e']):                  //bigmir.net/?c=d#\n+cutURLParameter(materialize('//bigmir.net/?a&c=d#e=f'), ['a']):                         //bigmir.net/?a&c=d#e=f\n+cutURLParameter(materialize('//bigmir.net/?a&c=d#e=f'), ['a', 'c']):                    //bigmir.net/?a#e=f\n+cutURLParameter(materialize('//bigmir.net/?a&c=d#e=f'), ['a', 'e']):                    //bigmir.net/?a&c=d#\n+cutURLParameter(materialize('//bigmir.net/?a=b&c=d#e=f&g=h'), ['c', 'g']):              //bigmir.net/?a=b#e=f\n+cutURLParameter(materialize('//bigmir.net/?a=b&c=d#e'), ['a', 'c']):                    //bigmir.net/?#e\n+cutURLParameter(materialize('//bigmir.net/?a=b&c=d#e'), ['a', 'e']):                    //bigmir.net/?c=d#e\n+cutURLParameter(materialize('//bigmir.net/?a=b&c=d#e&g=h'), ['c', 'e']):                //bigmir.net/?a=b#e&g=h\n+cutURLParameter(materialize('//bigmir.net/?a=b&c=d#e&g=h'), ['e', 'g']):                //bigmir.net/?a=b&c=d#e\n+cutURLParameter(materialize('//bigmir.net/?a=b&c=d#test?e=f&g=h'), ['test', 'e']):      //bigmir.net/?a=b&c=d#test?g=h\n+cutURLParameter(materialize('//bigmir.net/?a=b&c=d#test?e=f&g=h'), ['test', 'g']):      //bigmir.net/?a=b&c=d#test?e=f\ndiff --git a/tests/queries/0_stateless/02483_cuturlparameter_with_arrays.sql b/tests/queries/0_stateless/02483_cuturlparameter_with_arrays.sql\nnew file mode 100644\nindex 000000000000..ea2d6ae104f1\n--- /dev/null\n+++ b/tests/queries/0_stateless/02483_cuturlparameter_with_arrays.sql\n@@ -0,0 +1,61 @@\n+-- { echoOn }\n+SELECT\n+    cutURLParameter('http://bigmir.net/?a=b&c=d', []),\n+    cutURLParameter('http://bigmir.net/?a=b&c=d', ['a']),\n+    cutURLParameter('http://bigmir.net/?a=b&c=d', ['a', 'c']),\n+    cutURLParameter('http://bigmir.net/?a=b&c=d', ['c']),\n+    cutURLParameter('http://bigmir.net/?a=b&c=d#e=f', ['a', 'e']),\n+    cutURLParameter('http://bigmir.net/?a&c=d#e=f', ['c', 'e']),\n+    cutURLParameter('http://bigmir.net/?a&c=d#e=f', ['e']),\n+    cutURLParameter('http://bigmir.net/?a=b&c=d#e=f&g=h', ['b', 'g']),\n+    cutURLParameter('http://bigmir.net/?a=b&c=d#e', ['a', 'e']),\n+    cutURLParameter('http://bigmir.net/?a=b&c=d#e&g=h', ['c', 'g']),\n+    cutURLParameter('http://bigmir.net/?a=b&c=d#e&g=h', ['e', 'g']),\n+    cutURLParameter('http://bigmir.net/?a=b&c=d#test?e=f&g=h', ['test', 'e']),\n+    cutURLParameter('http://bigmir.net/?a=b&c=d#test?e=f&g=h', ['test', 'g']),\n+    cutURLParameter('//bigmir.net/?a=b&c=d', []),\n+    cutURLParameter('//bigmir.net/?a=b&c=d', ['a']),\n+    cutURLParameter('//bigmir.net/?a=b&c=d', ['a', 'c']),\n+    cutURLParameter('//bigmir.net/?a=b&c=d#e=f', ['a', 'e']),\n+    cutURLParameter('//bigmir.net/?a&c=d#e=f', ['a']),\n+    cutURLParameter('//bigmir.net/?a&c=d#e=f', ['a', 'c']),\n+    cutURLParameter('//bigmir.net/?a&c=d#e=f', ['a', 'e']),\n+    cutURLParameter('//bigmir.net/?a=b&c=d#e=f&g=h', ['c', 'g']),\n+    cutURLParameter('//bigmir.net/?a=b&c=d#e', ['a', 'c']),\n+    cutURLParameter('//bigmir.net/?a=b&c=d#e', ['a', 'e']),\n+    cutURLParameter('//bigmir.net/?a=b&c=d#e&g=h', ['c', 'e']),\n+    cutURLParameter('//bigmir.net/?a=b&c=d#e&g=h', ['e', 'g']),\n+    cutURLParameter('//bigmir.net/?a=b&c=d#test?e=f&g=h', ['test', 'e']),\n+    cutURLParameter('//bigmir.net/?a=b&c=d#test?e=f&g=h', ['test', 'g'])\n+    FORMAT Vertical;\n+\n+SELECT\n+    cutURLParameter(materialize('http://bigmir.net/?a=b&c=d'), []),\n+    cutURLParameter(materialize('http://bigmir.net/?a=b&c=d'), ['a']),\n+    cutURLParameter(materialize('http://bigmir.net/?a=b&c=d'), ['a', 'c']),\n+    cutURLParameter(materialize('http://bigmir.net/?a=b&c=d'), ['c']),\n+    cutURLParameter(materialize('http://bigmir.net/?a=b&c=d#e=f'), ['a', 'e']),\n+    cutURLParameter(materialize('http://bigmir.net/?a&c=d#e=f'), ['c', 'e']),\n+    cutURLParameter(materialize('http://bigmir.net/?a&c=d#e=f'), ['e']),\n+    cutURLParameter(materialize('http://bigmir.net/?a=b&c=d#e=f&g=h'), ['b', 'g']),\n+    cutURLParameter(materialize('http://bigmir.net/?a=b&c=d#e'), ['a', 'e']),\n+    cutURLParameter(materialize('http://bigmir.net/?a=b&c=d#e&g=h'), ['c', 'g']),\n+    cutURLParameter(materialize('http://bigmir.net/?a=b&c=d#e&g=h'), ['e', 'g']),\n+    cutURLParameter(materialize('http://bigmir.net/?a=b&c=d#test?e=f&g=h'), ['test', 'e']),\n+    cutURLParameter(materialize('http://bigmir.net/?a=b&c=d#test?e=f&g=h'), ['test', 'g']),\n+    cutURLParameter(materialize('//bigmir.net/?a=b&c=d'), []),\n+    cutURLParameter(materialize('//bigmir.net/?a=b&c=d'), ['a']),\n+    cutURLParameter(materialize('//bigmir.net/?a=b&c=d'), ['a', 'c']),\n+    cutURLParameter(materialize('//bigmir.net/?a=b&c=d#e=f'), ['a', 'e']),\n+    cutURLParameter(materialize('//bigmir.net/?a&c=d#e=f'), ['a']),\n+    cutURLParameter(materialize('//bigmir.net/?a&c=d#e=f'), ['a', 'c']),\n+    cutURLParameter(materialize('//bigmir.net/?a&c=d#e=f'), ['a', 'e']),\n+    cutURLParameter(materialize('//bigmir.net/?a=b&c=d#e=f&g=h'), ['c', 'g']),\n+    cutURLParameter(materialize('//bigmir.net/?a=b&c=d#e'), ['a', 'c']),\n+    cutURLParameter(materialize('//bigmir.net/?a=b&c=d#e'), ['a', 'e']),\n+    cutURLParameter(materialize('//bigmir.net/?a=b&c=d#e&g=h'), ['c', 'e']),\n+    cutURLParameter(materialize('//bigmir.net/?a=b&c=d#e&g=h'), ['e', 'g']),\n+    cutURLParameter(materialize('//bigmir.net/?a=b&c=d#test?e=f&g=h'), ['test', 'e']),\n+    cutURLParameter(materialize('//bigmir.net/?a=b&c=d#test?e=f&g=h'), ['test', 'g'])\n+    FORMAT Vertical;\n+-- { echoOff }\n",
  "problem_statement": "Please add array version for cutURLParameter to cut multiple parameters at a time\nPlease add a version of cutURLParameter that takes a string[] \r\n\r\nCurrently you have to write the following :\r\n\r\n```\r\nselect\r\n        cutURLParameter(\r\n        cutURLParameter(\r\n        cutURLParameter(\r\n        cutURLParameter(\r\n        cutURLParameter(\r\n        cutURLParameter(\r\n        cutURLParameter(\r\n        cutURLParameter(\r\n        cutURLParameter(\r\n            cutFragment(uri),\r\n        'variation'), \r\n        'reference'), \r\n        'gclid'), \r\n        'affiliate'), \r\n        'utm_source'), \r\n        'utm_content'), \r\n        'utm_term'), \r\n        'utm_medium'), \r\n        'utm_campaign')\r\n...\r\n```\r\n\r\nwould be nice to simplify it to \r\n\r\n```\r\nselect\r\n        cutURLParameters(\r\n            cutFragment(uri),\r\n        ['variation', \r\n        'reference', \r\n        'gclid', \r\n        'affiliate', \r\n        'utm_source', \r\n        'utm_content', \r\n        'utm_term', \r\n        'utm_medium', \r\n        'utm_campaign'])\r\n...\r\n```\r\n\r\nor even\r\n\r\n```\r\nwith ['variation', 'reference', 'gclid', 'affiliate', 'utm_source', 'utm_content', 'utm_term', 'utm_medium', 'utm_campaign'] as stripParams\r\n\r\nselect cutURLParameters(cutFragment(url), stripParams)\r\n...\r\n```\r\n\n",
  "hints_text": "The motivation is clear, we need to do it.",
  "created_at": "2022-11-29T07:57:12Z",
  "modified_files": [
    "docs/en/sql-reference/functions/url-functions.md",
    "docs/ru/sql-reference/functions/url-functions.md",
    "src/Functions/URL/cutURLParameter.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02483_cuturlparameter_with_arrays.reference",
    "b/tests/queries/0_stateless/02483_cuturlparameter_with_arrays.sql"
  ]
}