diff --git a/docs/en/sql-reference/functions/url-functions.md b/docs/en/sql-reference/functions/url-functions.md
index b03ca88fc614..b515f6ad5180 100644
--- a/docs/en/sql-reference/functions/url-functions.md
+++ b/docs/en/sql-reference/functions/url-functions.md
@@ -464,5 +464,39 @@ Removes the query string and fragment identifier. The question mark and number s
 
 ### cutURLParameter(URL, name)
 
-Removes the ‘name’ URL parameter, if present. This function works under the assumption that the parameter name is encoded in the URL exactly the same way as in the passed argument.
+Removes the `name` parameter from URL, if present. This function does not encode or decode characters in parameter names, e.g. `Client ID` and `Client%20ID` are treated as different parameter names.
 
+**Syntax**
+
+``` sql
+cutURLParameter(URL, name)
+```
+
+**Arguments**
+
+-   `url` — URL. [String](../../sql-reference/data-types/string.md).
+-   `name` — name of URL parameter. [String](../../sql-reference/data-types/string.md) or [Array](../../sql-reference/data-types/array.md) of Strings.
+
+**Returned value**
+
+-   URL with `name` URL parameter removed.
+
+Type: `String`.
+
+**Example**
+
+Query:
+
+``` sql
+SELECT
+    cutURLParameter('http://bigmir.net/?a=b&c=d&e=f#g', 'a') as url_without_a,
+    cutURLParameter('http://bigmir.net/?a=b&c=d&e=f#g', ['c', 'e']) as url_without_c_and_e;
+```
+
+Result:
+
+``` text
+┌─url_without_a────────────────┬─url_without_c_and_e──────┐
+│ http://bigmir.net/?c=d&e=f#g │ http://bigmir.net/?a=b#g │
+└──────────────────────────────┴──────────────────────────┘
+```
diff --git a/docs/ru/sql-reference/functions/url-functions.md b/docs/ru/sql-reference/functions/url-functions.md
index 34bb88f49912..3c6e6151ef82 100644
--- a/docs/ru/sql-reference/functions/url-functions.md
+++ b/docs/ru/sql-reference/functions/url-functions.md
@@ -404,5 +404,39 @@ SELECT netloc('http://paul@www.example.com:80/');
 
 ### cutURLParameter(URL, name) {#cuturlparameterurl-name}
 
-Удаляет параметр URL с именем name, если такой есть. Функция работает при допущении, что имя параметра закодировано в URL в точности таким же образом, что и в переданном аргументе.
+Удаляет параметр с именем `name` из URL, если такой есть. Функция не кодирует или декодирует символы в именах параметров. Например `Client ID` и `Client%20ID` обрабатываются как разные имена параметров.
 
+**Синтаксис**
+
+``` sql
+cutURLParameter(URL, name)
+```
+
+**Аргументы**
+
+-   `url` — URL. [String](../../sql-reference/data-types/string.md).
+-   `name` — имя параметра URL. [String](../../sql-reference/data-types/string.md) или [Array](../../sql-reference/data-types/array.md) состоящий из строк.
+
+**Возвращаемое значение**
+
+-   URL с удалённым параметром URL с именем `name`.
+
+Type: `String`.
+
+**Пример**
+
+Запрос:
+
+``` sql
+SELECT
+    cutURLParameter('http://bigmir.net/?a=b&c=d&e=f#g', 'a') as url_without_a,
+    cutURLParameter('http://bigmir.net/?a=b&c=d&e=f#g', ['c', 'e']) as url_without_c_and_e;
+```
+
+Результат:
+
+``` text
+┌─url_without_a────────────────┬─url_without_c_and_e──────┐
+│ http://bigmir.net/?c=d&e=f#g │ http://bigmir.net/?a=b#g │
+└──────────────────────────────┴──────────────────────────┘
+```
diff --git a/src/Functions/URL/cutURLParameter.cpp b/src/Functions/URL/cutURLParameter.cpp
index 6077b068bd08..7a2b96ec874b 100644
--- a/src/Functions/URL/cutURLParameter.cpp
+++ b/src/Functions/URL/cutURLParameter.cpp
@@ -1,82 +1,174 @@
+#include <Columns/ColumnString.h>
+#include <DataTypes/DataTypeArray.h>
+#include <DataTypes/DataTypeString.h>
+#include <Functions/FunctionHelpers.h>
 #include <Functions/FunctionFactory.h>
-#include <Functions/FunctionsStringSearchToString.h>
 #include <base/find_symbols.h>
 
 namespace DB
 {
 
-struct CutURLParameterImpl
+namespace ErrorCodes
 {
+    extern const int ILLEGAL_TYPE_OF_ARGUMENT;
+    extern const int ILLEGAL_COLUMN;
+}
+
+class FunctionCutURLParameter : public IFunction
+{
+public:
+    static constexpr auto name = "cutURLParameter";
+    static FunctionPtr create(ContextPtr) { return std::make_shared<FunctionCutURLParameter>(); }
+
+    String getName() const override { return name; }
+
+    size_t getNumberOfArguments() const override { return 2; }
+
+    bool useDefaultImplementationForConstants() const override { return true; }
+    ColumnNumbers getArgumentsThatAreAlwaysConstant() const override { return {1}; }
+
+    bool isSuitableForShortCircuitArgumentsExecution(const DataTypesWithConstInfo & /*arguments*/) const override { return true; }
+
+    DataTypePtr getReturnTypeImpl(const DataTypes & arguments) const override
+    {
+        if (!isString(arguments[0]))
+            throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,
+                "Illegal type {} of argument of function {}",
+                arguments[0]->getName(), getName());
+
+        if (!isString(arguments[1]) && !isArray(arguments[1]))
+            throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,
+                "Illegal type {} of argument of function {}",
+                 arguments[1]->getName(), getName());
+
+        return std::make_shared<DataTypeString>();
+    }
+
+    ColumnPtr executeImpl(const ColumnsWithTypeAndName & arguments, const DataTypePtr &, size_t /*input_rows_count*/) const override
+    {
+        const ColumnPtr column = arguments[0].column;
+        const ColumnPtr column_needle = arguments[1].column;
+
+        const ColumnConst * col_needle = typeid_cast<const ColumnConst *>(&*column_needle);
+        const ColumnArray * col_needle_const_array = checkAndGetColumnConstData<ColumnArray>(column_needle.get());
+
+        if (!col_needle && !col_needle_const_array)
+            throw Exception(ErrorCodes::ILLEGAL_COLUMN,
+                "Second argument of function {} must be constant string or constant array",
+                getName());
+
+        if (col_needle_const_array)
+        {
+            if (!col_needle_const_array->getData().empty() && typeid_cast<const DataTypeArray &>(*arguments[1].type).getNestedType()->getTypeId() != TypeIndex::String)
+                throw Exception(ErrorCodes::ILLEGAL_COLUMN,
+                    "Second argument of function {} must be constant array of strings",
+                    getName());
+        }
+
+        if (const ColumnString * col = checkAndGetColumn<ColumnString>(column.get()))
+        {
+            auto col_res = ColumnString::create();
+
+            ColumnString::Chars & vec_res = col_res->getChars();
+            ColumnString::Offsets & offsets_res = col_res->getOffsets();
+            vector(col->getChars(), col->getOffsets(), col_needle, col_needle_const_array, vec_res, offsets_res);
+            return col_res;
+        }
+        else
+            throw Exception(ErrorCodes::ILLEGAL_COLUMN,
+                "Illegal column {} of argument of function {}",
+                arguments[0].column->getName(), getName());
+    }
+
+    static void cutURL(ColumnString::Chars & data, String pattern, size_t prev_offset, size_t & cur_offset)
+    {
+        pattern += '=';
+        const char * param_str = pattern.c_str();
+        size_t param_len = pattern.size();
+
+        const char * url_begin = reinterpret_cast<const char *>(&data[prev_offset]);
+        const char * url_end = reinterpret_cast<const char *>(&data[cur_offset - 2]);
+        const char * begin_pos = url_begin;
+        const char * end_pos = begin_pos;
+
+        do
+        {
+            const char * query_string_begin = find_first_symbols<'?', '#'>(url_begin, url_end);
+            if (query_string_begin + 1 >= url_end)
+                break;
+
+            const char * pos = static_cast<const char *>(memmem(query_string_begin + 1, url_end - query_string_begin - 1, param_str, param_len));
+            if (pos == nullptr)
+                break;
+
+            if (pos[-1] != '?' && pos[-1] != '#' && pos[-1] != '&')
+            {
+                pos = nullptr;
+                break;
+            }
+
+            begin_pos = pos;
+            end_pos = begin_pos + param_len;
+
+            /// Skip the value.
+            while (*end_pos && *end_pos != '&' && *end_pos != '#')
+                ++end_pos;
+
+            /// Capture '&' before or after the parameter.
+            if (*end_pos == '&')
+                ++end_pos;
+            else if (begin_pos[-1] == '&')
+                --begin_pos;
+        } while (false);
+
+        size_t cut_length = end_pos - begin_pos;
+        cur_offset -= cut_length;
+        data.erase(data.begin() + prev_offset + (begin_pos - url_begin), data.begin() + prev_offset+  (end_pos - url_begin));
+    }
+
     static void vector(const ColumnString::Chars & data,
         const ColumnString::Offsets & offsets,
-        std::string pattern,
+        const ColumnConst * col_needle,
+        const ColumnArray * col_needle_const_array,
         ColumnString::Chars & res_data, ColumnString::Offsets & res_offsets)
     {
         res_data.reserve(data.size());
         res_offsets.resize(offsets.size());
 
-        pattern += '=';
-        const char * param_str = pattern.c_str();
-        size_t param_len = pattern.size();
-
         size_t prev_offset = 0;
+        size_t cur_offset;
+        size_t cur_len;
         size_t res_offset = 0;
+        size_t cur_res_offset;
 
         for (size_t i = 0; i < offsets.size(); ++i)
         {
-            size_t cur_offset = offsets[i];
-
-            const char * url_begin = reinterpret_cast<const char *>(&data[prev_offset]);
-            const char * url_end = reinterpret_cast<const char *>(&data[cur_offset]) - 1;
-            const char * begin_pos = url_begin;
-            const char * end_pos = begin_pos;
+            cur_offset = offsets[i];
+            cur_len = cur_offset - prev_offset;
+            cur_res_offset = res_offset + cur_len;
+            res_data.resize(cur_res_offset);
+            memcpySmallAllowReadWriteOverflow15(&res_data[res_offset], &data[prev_offset], cur_len);
 
-            do
+            if (col_needle_const_array)
             {
-                const char * query_string_begin = find_first_symbols<'?', '#'>(url_begin, url_end);
-                if (query_string_begin + 1 >= url_end)
-                    break;
-
-                const char * pos = static_cast<const char *>(memmem(query_string_begin + 1, url_end - query_string_begin - 1, param_str, param_len));
-                if (pos == nullptr)
-                    break;
-
-                if (pos[-1] != '?' && pos[-1] != '#' && pos[-1] != '&')
+                size_t num_needles = col_needle_const_array->getData().size();
+                for (size_t j = 0; j < num_needles; ++j)
                 {
-                    pos = nullptr;
-                    break;
+                    auto field = col_needle_const_array->getData()[j];
+                    cutURL(res_data, field.get<String>(), res_offset, cur_res_offset);
                 }
-
-                begin_pos = pos;
-                end_pos = begin_pos + param_len;
-
-                /// Skip the value.
-                while (*end_pos && *end_pos != '&' && *end_pos != '#')
-                    ++end_pos;
-
-                /// Capture '&' before or after the parameter.
-                if (*end_pos == '&')
-                    ++end_pos;
-                else if (begin_pos[-1] == '&')
-                    --begin_pos;
-            } while (false);
-
-            size_t cut_length = (url_end - url_begin) - (end_pos - begin_pos);
-            res_data.resize(res_offset + cut_length + 1);
-            memcpySmallAllowReadWriteOverflow15(&res_data[res_offset], url_begin, begin_pos - url_begin);
-            memcpySmallAllowReadWriteOverflow15(&res_data[res_offset] + (begin_pos - url_begin), end_pos, url_end - end_pos);
-            res_offset += cut_length + 1;
-            res_data[res_offset - 1] = 0;
-            res_offsets[i] = res_offset;
-
+            }
+            else
+            {
+                cutURL(res_data, col_needle->getValue<String>(), res_offset, cur_res_offset);
+            }
+            res_offsets[i] = cur_res_offset;
+            res_offset = cur_res_offset;
             prev_offset = cur_offset;
         }
     }
 };
 
-struct NameCutURLParameter { static constexpr auto name = "cutURLParameter"; };
-using FunctionCutURLParameter = FunctionsStringSearchToString<CutURLParameterImpl, NameCutURLParameter>;
-
 REGISTER_FUNCTION(CutURLParameter)
 {
     factory.registerFunction<FunctionCutURLParameter>();
