{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 46653,
  "instance_id": "ClickHouse__ClickHouse-46653",
  "issue_numbers": [
    "45440"
  ],
  "base_commit": "2d4eae386a40f9f276d7d1a98f84d6ac0fab866d",
  "patch": "diff --git a/src/Interpreters/ActionsDAG.cpp b/src/Interpreters/ActionsDAG.cpp\nindex 96e7daa306fd..d3eb87161a15 100644\n--- a/src/Interpreters/ActionsDAG.cpp\n+++ b/src/Interpreters/ActionsDAG.cpp\n@@ -1943,6 +1943,9 @@ ActionsDAGPtr ActionsDAG::cloneActionsForFilterPushDown(\n     }\n \n     auto conjunction = getConjunctionNodes(predicate, allowed_nodes);\n+    if (conjunction.rejected.size() == 1 && WhichDataType{conjunction.rejected.front()->result_type}.isFloat())\n+        return nullptr;\n+\n     auto actions = cloneActionsForConjunction(conjunction.allowed, all_inputs);\n     if (!actions)\n         return nullptr;\n@@ -2008,10 +2011,12 @@ ActionsDAGPtr ActionsDAG::cloneActionsForFilterPushDown(\n                 node.children.swap(new_children);\n                 *predicate = std::move(node);\n             }\n-            else\n+            else if (!WhichDataType{new_children.front()->result_type}.isFloat())\n             {\n                 /// If type is different, cast column.\n                 /// This case is possible, cause AND can use any numeric type as argument.\n+                /// But casting floats to UInt8 or Bool produces different results.\n+                /// so we can't apply this optimization to them.\n                 Node node;\n                 node.type = ActionType::COLUMN;\n                 node.result_name = predicate->result_type->getName();\n@@ -2033,8 +2038,20 @@ ActionsDAGPtr ActionsDAG::cloneActionsForFilterPushDown(\n         else\n         {\n             /// Predicate is function AND, which still have more then one argument.\n+            /// Or there is only one argument that is a float and we can't just\n+            /// remove the AND.\n             /// Just update children and rebuild it.\n             predicate->children.swap(new_children);\n+            if (WhichDataType{predicate->children.front()->result_type}.isFloat())\n+            {\n+                Node node;\n+                node.type = ActionType::COLUMN;\n+                node.result_name = \"1\";\n+                node.column = DataTypeUInt8().createColumnConst(0, 1u);\n+                node.result_type = std::make_shared<DataTypeUInt8>();\n+                const auto * const_col = &nodes.emplace_back(std::move(node));\n+                predicate->children.emplace_back(const_col);\n+            }\n             auto arguments = prepareFunctionArguments(predicate->children);\n \n             FunctionOverloadResolverPtr func_builder_and = std::make_unique<FunctionToOverloadResolverAdaptor>(std::make_shared<FunctionAnd>());\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02667_and_consistency.reference b/tests/queries/0_stateless/02667_and_consistency.reference\nnew file mode 100644\nindex 000000000000..bcb2b5aecfb8\n--- /dev/null\n+++ b/tests/queries/0_stateless/02667_and_consistency.reference\n@@ -0,0 +1,23 @@\n+true\n+=====\n+true\n+=====\n+true\n+=====\n+true\n+=====\n+=====\n+1\n+=====\n+=====\n+allow_experimental_analyzer\n+true\n+#45440\n+2086579505\t0\t1\t0\t0\n+-542998757\t-542998757\t1\t0\t0\n+=\n+2086579505\t0\t1\t0\t0\n+-542998757\t-542998757\t1\t0\t0\n+=\n+2086579505\t0\t1\t0\t0\n+-542998757\t-542998757\t1\t0\t0\ndiff --git a/tests/queries/0_stateless/02667_and_consistency.sql b/tests/queries/0_stateless/02667_and_consistency.sql\nnew file mode 100644\nindex 000000000000..f02185a1a528\n--- /dev/null\n+++ b/tests/queries/0_stateless/02667_and_consistency.sql\n@@ -0,0 +1,106 @@\n+SELECT toBool(sin(SUM(number))) AS x\n+FROM\n+(\n+    SELECT 1 AS number\n+)\n+GROUP BY number\n+HAVING 1 AND sin(sum(number))\n+SETTINGS enable_optimize_predicate_expression = 0;\n+\n+SELECT '=====';\n+\n+SELECT toBool(sin(SUM(number))) AS x\n+FROM\n+(\n+    SELECT 1 AS number\n+)\n+GROUP BY number\n+HAVING 1 AND sin(1)\n+SETTINGS enable_optimize_predicate_expression = 0;\n+\n+SELECT '=====';\n+\n+SELECT toBool(sin(SUM(number))) AS x\n+FROM\n+(\n+    SELECT 1 AS number\n+)\n+GROUP BY number\n+HAVING x AND sin(sum(number))\n+SETTINGS enable_optimize_predicate_expression = 1;\n+\n+SELECT '=====';\n+\n+SELECT toBool(sin(SUM(number))) AS x\n+FROM\n+(\n+    SELECT 1 AS number\n+)\n+GROUP BY number\n+HAVING 1 AND sin(sum(number))\n+SETTINGS enable_optimize_predicate_expression = 0;\n+\n+SELECT '=====';\n+\n+SELECT toBool(sin(SUM(number))) AS x\n+FROM\n+(\n+    SELECT 1 AS number\n+)\n+GROUP BY number\n+HAVING 1 AND sin(sum(number))\n+SETTINGS enable_optimize_predicate_expression = 1; -- { serverError 59 }\n+\n+SELECT '=====';\n+\n+SELECT 1 and sin(1);\n+\n+SELECT '=====';\n+\n+SELECT toBool(sin(SUM(number))) AS x\n+FROM\n+(\n+    SELECT 1 AS number\n+)\n+GROUP BY number\n+HAVING x AND sin(1)\n+SETTINGS enable_optimize_predicate_expression = 0; -- { serverError 59 }\n+\n+SELECT '=====';\n+SELECT 'allow_experimental_analyzer';\n+\n+SET allow_experimental_analyzer = 1;\n+\n+SELECT toBool(sin(SUM(number))) AS x\n+FROM\n+(\n+    SELECT 1 AS number\n+)\n+GROUP BY number\n+HAVING 1 AND sin(sum(number))\n+SETTINGS enable_optimize_predicate_expression = 1;\n+\n+select '#45440';\n+\n+DROP TABLE IF EXISTS t2;\n+CREATE TABLE t2(c0 Int32) ENGINE = MergeTree ORDER BY c0;\n+INSERT INTO t2 VALUES (928386547), (1541944097), (2086579505), (1990427322), (-542998757), (390253678), (554855248), (203290629), (1504693323);\n+\n+SELECT\n+    MAX(left.c0),\n+    min2(left.c0, -(-left.c0) * (radians(left.c0) - radians(left.c0))) AS g,\n+    (((-1925024212 IS NOT NULL) IS NOT NULL) != radians(tan(1216286224))) AND cos(lcm(MAX(left.c0), -1966575216) OR (MAX(left.c0) * 1180517420)) AS h,\n+    NOT h,\n+    h IS NULL\n+FROM t2 AS left\n+GROUP BY g;\n+select '=';\n+SELECT MAX(left.c0), min2(left.c0, -(-left.c0) * (radians(left.c0) - radians(left.c0))) as g, (((-1925024212 IS NOT NULL) IS NOT NULL) != radians(tan(1216286224))) AND cos(lcm(MAX(left.c0), -1966575216) OR (MAX(left.c0) * 1180517420)) as h, not h, h is null\n+                  FROM t2 AS left\n+                  GROUP BY g HAVING h SETTINGS enable_optimize_predicate_expression = 0;\n+select '=';\n+SELECT MAX(left.c0), min2(left.c0, -(-left.c0) * (radians(left.c0) - radians(left.c0))) as g, (((-1925024212 IS NOT NULL) IS NOT NULL) != radians(tan(1216286224))) AND cos(lcm(MAX(left.c0), -1966575216) OR (MAX(left.c0) * 1180517420)) as h, not h, h is null\n+                  FROM t2 AS left\n+                  GROUP BY g HAVING h SETTINGS enable_optimize_predicate_expression = 1;\n+\n+DROP TABLE IF EXISTS t2;\n",
  "problem_statement": "HAVING 1 returns no results\nBased on https://s3.amazonaws.com/clickhouse-test-reports/45420/df3776d24b330357cc8e69c4d1273e5dea56e4bf/sqlancer__release_/TLPHaving.err\r\n\r\nMay be the same as https://github.com/ClickHouse/ClickHouse/issues/45218\r\n\r\n```\r\nCREATE TABLE t2(c0 Int32) ENGINE = MergeTree ORDER BY c0;\r\nINSERT INTO t2 VALUES (928386547), (1541944097), (2086579505), (1990427322), (-542998757), (390253678), (554855248), (203290629), (1504693323);\r\n\r\nSELECT\r\n    MAX(left.c0),\r\n    min2(left.c0, -(-left.c0) * (radians(left.c0) - radians(left.c0))) AS g,\r\n    (((-1925024212 IS NOT NULL) IS NOT NULL) != radians(tan(1216286224))) AND cos(lcm(MAX(left.c0), -1966575216) OR (MAX(left.c0) * 1180517420)) AS h,\r\n    NOT h,\r\n    h IS NULL\r\nFROM t2 AS left\r\nGROUP BY g\r\n\r\nQuery id: f4fc9574-c0f9-432b-8c51-6d817a866e41\r\n\r\n\u250c\u2500\u2500\u2500\u2500MAX(c0)\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500g\u2500\u252c\u2500h\u2500\u252c\u2500not(h)\u2500\u252c\u2500isNull(h)\u2500\u2510\r\n\u2502 2086579505 \u2502          0 \u2502 1 \u2502      0 \u2502         0 \u2502\r\n\u2502 -542998757 \u2502 -542998757 \u2502 1 \u2502      0 \u2502         0 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n2 rows in set. Elapsed: 0.003 sec.\r\n\r\nip-172-31-0-52 :) SELECT MAX(left.c0), min2(left.c0, -(-left.c0) * (radians(left.c0) - radians(left.c0))) as g, (((-1925024212 IS NOT NULL) IS NOT NULL) != radians(tan(1216286224))) AND cos(lcm(MAX(left.c0), -1966575216) OR (MAX(left.c0) * 1180517420)) as h, not h, h is null\r\n                  FROM t2 AS left\r\n                  GROUP BY g HAVING h\r\n\r\nSELECT\r\n    MAX(left.c0),\r\n    min2(left.c0, -(-left.c0) * (radians(left.c0) - radians(left.c0))) AS g,\r\n    (((-1925024212 IS NOT NULL) IS NOT NULL) != radians(tan(1216286224))) AND cos(lcm(MAX(left.c0), -1966575216) OR (MAX(left.c0) * 1180517420)) AS h,\r\n    NOT h,\r\n    h IS NULL\r\nFROM t2 AS left\r\nGROUP BY g\r\nHAVING h\r\n\r\nQuery id: d56ceae9-bfc0-482e-9e4b-7b25e57f262b\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.003 sec.\r\n```\n",
  "hints_text": "",
  "created_at": "2023-02-21T14:51:13Z"
}