{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 58359,
  "instance_id": "ClickHouse__ClickHouse-58359",
  "issue_numbers": [
    "58312"
  ],
  "base_commit": "ed8ba9c56699ee7e6c0e4f8b347c288a3374fd31",
  "patch": "diff --git a/programs/local/LocalServer.cpp b/programs/local/LocalServer.cpp\nindex b425258b2d3d..54fc01a41696 100644\n--- a/programs/local/LocalServer.cpp\n+++ b/programs/local/LocalServer.cpp\n@@ -744,7 +744,7 @@ void LocalServer::processConfig()\n \n         LOG_DEBUG(log, \"Loading metadata from {}\", path);\n         auto startup_system_tasks = loadMetadataSystem(global_context);\n-        attachSystemTablesLocal(global_context, *createMemoryDatabaseIfNotExists(global_context, DatabaseCatalog::SYSTEM_DATABASE));\n+        attachSystemTablesServer(global_context, *createMemoryDatabaseIfNotExists(global_context, DatabaseCatalog::SYSTEM_DATABASE), false);\n         attachInformationSchema(global_context, *createMemoryDatabaseIfNotExists(global_context, DatabaseCatalog::INFORMATION_SCHEMA));\n         attachInformationSchema(global_context, *createMemoryDatabaseIfNotExists(global_context, DatabaseCatalog::INFORMATION_SCHEMA_UPPERCASE));\n         waitLoad(TablesLoaderForegroundPoolId, startup_system_tasks);\n@@ -763,7 +763,7 @@ void LocalServer::processConfig()\n     }\n     else if (!config().has(\"no-system-tables\"))\n     {\n-        attachSystemTablesLocal(global_context, *createMemoryDatabaseIfNotExists(global_context, DatabaseCatalog::SYSTEM_DATABASE));\n+        attachSystemTablesServer(global_context, *createMemoryDatabaseIfNotExists(global_context, DatabaseCatalog::SYSTEM_DATABASE), false);\n         attachInformationSchema(global_context, *createMemoryDatabaseIfNotExists(global_context, DatabaseCatalog::INFORMATION_SCHEMA));\n         attachInformationSchema(global_context, *createMemoryDatabaseIfNotExists(global_context, DatabaseCatalog::INFORMATION_SCHEMA_UPPERCASE));\n     }\ndiff --git a/src/Storages/System/attachSystemTables.cpp b/src/Storages/System/attachSystemTables.cpp\nindex b907b97f0dd2..e6677162f297 100644\n--- a/src/Storages/System/attachSystemTables.cpp\n+++ b/src/Storages/System/attachSystemTables.cpp\n@@ -109,7 +109,7 @@\n namespace DB\n {\n \n-void attachSystemTablesLocal(ContextPtr context, IDatabase & system_database)\n+void attachSystemTablesServer(ContextPtr context, IDatabase & system_database, bool has_zookeeper)\n {\n     attach<StorageSystemOne>(context, system_database, \"one\");\n     attach<StorageSystemNumbers>(context, system_database, \"numbers\", false);\n@@ -170,11 +170,6 @@ void attachSystemTablesLocal(ContextPtr context, IDatabase & system_database)\n #if USE_ROCKSDB\n     attach<StorageSystemRocksDB>(context, system_database, \"rocksdb\");\n #endif\n-}\n-\n-void attachSystemTablesServer(ContextPtr context, IDatabase & system_database, bool has_zookeeper)\n-{\n-    attachSystemTablesLocal(context, system_database);\n \n     attach<StorageSystemParts>(context, system_database, \"parts\");\n     attach<StorageSystemProjectionParts>(context, system_database, \"projection_parts\");\ndiff --git a/src/Storages/System/attachSystemTables.h b/src/Storages/System/attachSystemTables.h\nindex 4c1a79f84dd9..15a25a38afc2 100644\n--- a/src/Storages/System/attachSystemTables.h\n+++ b/src/Storages/System/attachSystemTables.h\n@@ -10,7 +10,6 @@ class AsynchronousMetrics;\n class IDatabase;\n \n void attachSystemTablesServer(ContextPtr context, IDatabase & system_database, bool has_zookeeper);\n-void attachSystemTablesLocal(ContextPtr context, IDatabase & system_database);\n void attachSystemTablesAsync(ContextPtr context, IDatabase & system_database, AsynchronousMetrics & async_metrics);\n \n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02956_clickhouse_local_system_parts.reference b/tests/queries/0_stateless/02956_clickhouse_local_system_parts.reference\nnew file mode 100644\nindex 000000000000..30365d839303\n--- /dev/null\n+++ b/tests/queries/0_stateless/02956_clickhouse_local_system_parts.reference\n@@ -0,0 +1,1 @@\n+test\tall_1_1_0\t1\ndiff --git a/tests/queries/0_stateless/02956_clickhouse_local_system_parts.sh b/tests/queries/0_stateless/02956_clickhouse_local_system_parts.sh\nnew file mode 100755\nindex 000000000000..e9d8eb081fb7\n--- /dev/null\n+++ b/tests/queries/0_stateless/02956_clickhouse_local_system_parts.sh\n@@ -0,0 +1,8 @@\n+#!/usr/bin/env bash\n+# Tags: no-fasttest\n+\n+CUR_DIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CUR_DIR\"/../shell_config.sh\n+\n+$CLICKHOUSE_LOCAL --multiquery \"CREATE TABLE test (x UInt8) ENGINE = MergeTree ORDER BY (); INSERT INTO test SELECT 1; SELECT table, name, rows FROM system.parts WHERE database = currentDatabase();\"\n",
  "problem_statement": "system.parts not available for clickhouse local\nExpected system.parts to be available but it disabled for clickhouse local. Why is system.parts not enabled for clickhouse-local?\r\n\r\nhttps://github.com/ClickHouse/ClickHouse/blob/master/src/Storages/System/attachSystemTables.cpp#L178-L181\r\n\n",
  "hints_text": "You even do not have a server for creating parts. Local mode is just a command without a running server.\nYou can create table with MergeTree engine in local mode, so having system.parts make sense",
  "created_at": "2023-12-29T20:29:23Z"
}