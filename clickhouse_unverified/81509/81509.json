{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 81509,
  "instance_id": "ClickHouse__ClickHouse-81509",
  "issue_numbers": [
    "65252"
  ],
  "base_commit": "7f5f37cf060b1f066ab8ed5d905e82de1274f7eb",
  "patch": "diff --git a/programs/main.cpp b/programs/main.cpp\nindex f79e6eb7fb84..bfd9801d4d36 100644\n--- a/programs/main.cpp\n+++ b/programs/main.cpp\n@@ -283,6 +283,22 @@ int main(int argc_, char ** argv_)\n         }\n     }\n \n+    /// If host/port arguments are passed to clickhouse/ch shortcuts,\n+    /// interpret it as clickhouse-client invocation for usability.\n+    if (main_func == printHelp && argv.size() >= 2)\n+    {\n+        for (size_t i = 1, num_args = argv.size(); i < num_args; ++i)\n+        {\n+            if ((i + 1 < num_args && argv[i] == std::string_view(\"--host\")) || startsWith(argv[i], \"--host=\")\n+                || (i + 1 < num_args && argv[i] == std::string_view(\"--port\")) || startsWith(argv[i], \"--port=\")\n+                || startsWith(argv[i], \"-h\"))\n+            {\n+                main_func = mainEntryClickHouseClient;\n+                break;\n+            }\n+        }\n+    }\n+\n     /// Interpret binary without argument or with arguments starts with dash\n     /// ('-') as clickhouse-local for better usability:\n     ///\n@@ -295,6 +311,7 @@ int main(int argc_, char ** argv_)\n     ///\n     std::error_code ec;\n     if (main_func == printHelp && !argv.empty()\n+        && (argv.size() < 2 || argv[1] != std::string_view(\"--help\"))\n         && (argv.size() == 1 || argv[1][0] == '-' || std::string_view(argv[1]).contains(' ')\n             || std::filesystem::is_regular_file(std::filesystem::path{argv[1]}, ec)))\n     {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03536_ch_as_client_and_local.reference b/tests/queries/0_stateless/03536_ch_as_client_and_local.reference\nnew file mode 100644\nindex 000000000000..5f04aa870e96\n--- /dev/null\n+++ b/tests/queries/0_stateless/03536_ch_as_client_and_local.reference\n@@ -0,0 +1,7 @@\n+Use one of the following commands:\n+Use one of the following commands:\n+Use one of the following commands:\n+Overlay\n+Overlay\n+Atomic\n+Atomic\ndiff --git a/tests/queries/0_stateless/03536_ch_as_client_and_local.sh b/tests/queries/0_stateless/03536_ch_as_client_and_local.sh\nnew file mode 100755\nindex 000000000000..323843d0b0c7\n--- /dev/null\n+++ b/tests/queries/0_stateless/03536_ch_as_client_and_local.sh\n@@ -0,0 +1,22 @@\n+#!/usr/bin/env bash\n+\n+CUR_DIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CUR_DIR\"/../shell_config.sh\n+\n+CLICKHOUSE_BINARY_CH=${CLICKHOUSE_BINARY/clickhouse/ch}\n+\n+# Invocation with unknown tool name prints help:\n+${CLICKHOUSE_BINARY} test 2>&1 | grep -F 'Use one of the following commands'\n+\n+# Invocation with --help works the same:\n+${CLICKHOUSE_BINARY} --help 2>&1 | grep -F 'Use one of the following commands'\n+${CLICKHOUSE_BINARY_CH} --help 2>&1 | grep -F 'Use one of the following commands'\n+\n+# This is recognized as clickhouse-local:\n+${CLICKHOUSE_BINARY} --query \"SELECT engine FROM system.databases WHERE name = currentDatabase()\"\n+${CLICKHOUSE_BINARY_CH} --query \"SELECT engine FROM system.databases WHERE name = currentDatabase()\"\n+\n+# This is recognized as clickhouse-client:\n+${CLICKHOUSE_BINARY} --host ${CLICKHOUSE_HOST} --port ${CLICKHOUSE_PORT_TCP} --query \"SELECT engine FROM system.databases WHERE name = currentDatabase()\"\n+${CLICKHOUSE_BINARY_CH} --query \"SELECT engine FROM system.databases WHERE name = currentDatabase()\" -h${CLICKHOUSE_HOST} --port=${CLICKHOUSE_PORT_TCP}\n",
  "problem_statement": "Unify calling of calling `client` or `local` with `clickhouse` and `ch` shortcuts\nRecently we added `ch` and `clickhouse` shortcuts that run `clickhouse-local`.\r\n\r\nLet's make it so that if `--host` or `--port` or `--user` or `--password` arguments, or a connection string is present, it will invoke `clickhouse-client`.\n",
  "hints_text": "",
  "created_at": "2025-06-08T04:06:38Z"
}