{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 44705,
  "instance_id": "ClickHouse__ClickHouse-44705",
  "issue_numbers": [
    "44661"
  ],
  "base_commit": "4f730465207633e7bc586523e60f85639d32baa5",
  "patch": "diff --git a/src/Interpreters/InterpreterDeleteQuery.cpp b/src/Interpreters/InterpreterDeleteQuery.cpp\nindex b5b8ae81366a..720a179a9d47 100644\n--- a/src/Interpreters/InterpreterDeleteQuery.cpp\n+++ b/src/Interpreters/InterpreterDeleteQuery.cpp\n@@ -23,6 +23,7 @@ namespace ErrorCodes\n {\n     extern const int TABLE_IS_READ_ONLY;\n     extern const int SUPPORT_IS_DISABLED;\n+    extern const int BAD_ARGUMENTS;\n }\n \n \n@@ -58,8 +59,7 @@ BlockIO InterpreterDeleteQuery::execute()\n     auto table_lock = table->lockForShare(getContext()->getCurrentQueryId(), getContext()->getSettingsRef().lock_acquire_timeout);\n     auto metadata_snapshot = table->getInMemoryMetadataPtr();\n \n-    auto merge_tree = std::dynamic_pointer_cast<MergeTreeData>(table);\n-    if (!merge_tree)\n+    if (table->supportsDelete())\n     {\n         /// Convert to MutationCommand\n         MutationCommands mutation_commands;\n@@ -75,39 +75,45 @@ BlockIO InterpreterDeleteQuery::execute()\n         table->mutate(mutation_commands, getContext());\n         return {};\n     }\n+    else if (table->supportsLightweightDelete())\n+    {\n+        if (!getContext()->getSettingsRef().allow_experimental_lightweight_delete)\n+            throw Exception(ErrorCodes::SUPPORT_IS_DISABLED, \"Lightweight delete mutate is experimental. Set `allow_experimental_lightweight_delete` setting to enable it\");\n+\n+        /// Convert to MutationCommand\n+        MutationCommands mutation_commands;\n+        MutationCommand mut_command;\n+\n+        /// Build \"UPDATE _row_exists = 0 WHERE predicate\" query\n+        mut_command.type = MutationCommand::Type::UPDATE;\n+        mut_command.predicate = delete_query.predicate;\n+\n+        auto command = std::make_shared<ASTAlterCommand>();\n+        command->type = ASTAlterCommand::UPDATE;\n+        command->predicate = delete_query.predicate;\n+        command->update_assignments = std::make_shared<ASTExpressionList>();\n+        auto set_row_does_not_exist = std::make_shared<ASTAssignment>();\n+        set_row_does_not_exist->column_name = LightweightDeleteDescription::FILTER_COLUMN.name;\n+        auto zero_value = std::make_shared<ASTLiteral>(DB::Field(UInt8(0)));\n+        set_row_does_not_exist->children.push_back(zero_value);\n+        command->update_assignments->children.push_back(set_row_does_not_exist);\n+        command->children.push_back(command->predicate);\n+        command->children.push_back(command->update_assignments);\n+        mut_command.column_to_update_expression[set_row_does_not_exist->column_name] = zero_value;\n+        mut_command.ast = command->ptr();\n+\n+        mutation_commands.emplace_back(mut_command);\n+\n+        table->checkMutationIsPossible(mutation_commands, getContext()->getSettingsRef());\n+        MutationsInterpreter(table, metadata_snapshot, mutation_commands, getContext(), false).validate();\n+        table->mutate(mutation_commands, getContext());\n \n-    if (!getContext()->getSettingsRef().allow_experimental_lightweight_delete)\n-        throw Exception(ErrorCodes::SUPPORT_IS_DISABLED, \"Lightweight delete mutate is experimental. Set `allow_experimental_lightweight_delete` setting to enable it\");\n-\n-    /// Convert to MutationCommand\n-    MutationCommands mutation_commands;\n-    MutationCommand mut_command;\n-\n-    /// Build \"UPDATE _row_exists = 0 WHERE predicate\" query\n-    mut_command.type = MutationCommand::Type::UPDATE;\n-    mut_command.predicate = delete_query.predicate;\n-\n-    auto command = std::make_shared<ASTAlterCommand>();\n-    command->type = ASTAlterCommand::UPDATE;\n-    command->predicate = delete_query.predicate;\n-    command->update_assignments = std::make_shared<ASTExpressionList>();\n-    auto set_row_does_not_exist = std::make_shared<ASTAssignment>();\n-    set_row_does_not_exist->column_name = LightweightDeleteDescription::FILTER_COLUMN.name;\n-    auto zero_value = std::make_shared<ASTLiteral>(DB::Field(UInt8(0)));\n-    set_row_does_not_exist->children.push_back(zero_value);\n-    command->update_assignments->children.push_back(set_row_does_not_exist);\n-    command->children.push_back(command->predicate);\n-    command->children.push_back(command->update_assignments);\n-    mut_command.column_to_update_expression[set_row_does_not_exist->column_name] = zero_value;\n-    mut_command.ast = command->ptr();\n-\n-    mutation_commands.emplace_back(mut_command);\n-\n-    table->checkMutationIsPossible(mutation_commands, getContext()->getSettingsRef());\n-    MutationsInterpreter(table, metadata_snapshot, mutation_commands, getContext(), false).validate();\n-    table->mutate(mutation_commands, getContext());\n-\n-    return {};\n+        return {};\n+    }\n+    else\n+    {\n+        throw Exception(ErrorCodes::BAD_ARGUMENTS, \"DELETE query is not supported for table\");\n+    }\n }\n \n }\ndiff --git a/src/Storages/IStorage.h b/src/Storages/IStorage.h\nindex a0585e9c9a12..2c4ea91869cd 100644\n--- a/src/Storages/IStorage.h\n+++ b/src/Storages/IStorage.h\n@@ -241,6 +241,10 @@ class IStorage : public std::enable_shared_from_this<IStorage>, public TypePromo\n     /// Return true if storage can execute lightweight delete mutations.\n     virtual bool supportsLightweightDelete() const { return false; }\n \n+    /// Return true if storage can execute 'DELETE FROM' mutations. This is different from lightweight delete\n+    /// because those are internally translated into 'ALTER UDPATE' mutations.\n+    virtual bool supportsDelete() const { return false; }\n+\n private:\n \n     StorageID storage_id;\ndiff --git a/src/Storages/RocksDB/StorageEmbeddedRocksDB.h b/src/Storages/RocksDB/StorageEmbeddedRocksDB.h\nindex ca0ab7a18408..eec817acd557 100644\n--- a/src/Storages/RocksDB/StorageEmbeddedRocksDB.h\n+++ b/src/Storages/RocksDB/StorageEmbeddedRocksDB.h\n@@ -80,6 +80,8 @@ class StorageEmbeddedRocksDB final : public IStorage, public IKeyValueEntity, Wi\n         const std::vector<std::string> & keys,\n         PaddedPODArray<UInt8> * out_null_map) const;\n \n+    bool supportsDelete() const override { return true; }\n+\n private:\n     const String primary_key;\n     using RocksDBPtr = std::unique_ptr<rocksdb::DB>;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02319_lightweight_delete_on_merge_tree.sql b/tests/queries/0_stateless/02319_lightweight_delete_on_merge_tree.sql\nindex 67513a1cdff6..c7f8b67e7406 100644\n--- a/tests/queries/0_stateless/02319_lightweight_delete_on_merge_tree.sql\n+++ b/tests/queries/0_stateless/02319_lightweight_delete_on_merge_tree.sql\n@@ -103,7 +103,7 @@ ALTER TABLE t_proj ADD PROJECTION p_1 (SELECT avg(a), avg(b), count());\n \n INSERT INTO t_proj SELECT number + 1, number + 1  FROM numbers(1000);\n \n-DELETE FROM t_proj WHERE a < 100; -- { serverError NOT_IMPLEMENTED }\n+DELETE FROM t_proj WHERE a < 100; -- { serverError BAD_ARGUMENTS }\n \n SELECT avg(a), avg(b), count() FROM t_proj;\n \ndiff --git a/tests/queries/0_stateless/02518_delete_on_materialized_view.reference b/tests/queries/0_stateless/02518_delete_on_materialized_view.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/02518_delete_on_materialized_view.sql b/tests/queries/0_stateless/02518_delete_on_materialized_view.sql\nnew file mode 100644\nindex 000000000000..73abca4ea53c\n--- /dev/null\n+++ b/tests/queries/0_stateless/02518_delete_on_materialized_view.sql\n@@ -0,0 +1,14 @@\n+DROP TABLE IF EXISTS kek;\n+DROP TABLE IF EXISTS kekv;\n+\n+CREATE TABLE kek (a UInt32) ENGINE = MergeTree ORDER BY a;\n+CREATE MATERIALIZED VIEW kekv ENGINE = MergeTree ORDER BY tuple() AS SELECT * FROM kek;\n+\n+INSERT INTO kek VALUES (1);\n+DELETE FROM kekv WHERE a = 1; -- { serverError BAD_ARGUMENTS}\n+\n+SET allow_experimental_lightweight_delete=1;\n+DELETE FROM kekv WHERE a = 1; -- { serverError BAD_ARGUMENTS}\n+\n+DROP TABLE IF EXISTS kek;\n+DROP TABLE IF EXISTS kekv;\n",
  "problem_statement": "Crash in lightweight delete on `MATERIALIZED VIEW` table\n**Does it reproduce on recent release?**\r\n\r\n```sql\r\nDROP TABLE IF EXISTS kek;\r\nDROP TABLE IF EXISTS kekv;\r\n\r\nCREATE TABLE kek (a UInt32) ENGINE = MergeTree ORDER BY a;\r\nCREATE MATERIALIZED VIEW kekv ENGINE = MergeTree ORDER BY tuple() AS SELECT * FROM kek;\r\n\r\nINSERT INTO kek VALUES (1);\r\nDELETE FROM kekv WHERE a = 1; -- actually any condition here\r\n\r\nDROP TABLE IF EXISTS kek;\r\nDROP TABLE IF EXISTS kekv;\r\n```\r\n\r\n**Enable crash reporting**\r\n\r\n```\r\n2022.12.27 23:48:52.071005 [ 4090961 ] <Fatal> BaseDaemon: ########################################\r\n2022.12.27 23:48:52.071101 [ 4090961 ] <Fatal> BaseDaemon: (version 22.13.1.1, build id: 71CAD059AB226CD1299F680DAC2E55D17A70489B) (from thread 4090648) (query_id: 97abba4b-654a-44bb-8c1f-2a3639ea613f) (query: DELETE FROM kekv WHERE a = 1;) Received signal Segmentation fault (11)\r\n2022.12.27 23:48:52.071145 [ 4090961 ] <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Address not mapped to object.\r\n2022.12.27 23:48:52.071181 [ 4090961 ] <Fatal> BaseDaemon: Stack trace: 0x1602108a 0x16021164 0x1667b50c 0x1665f48e 0x1666206b 0x160c042d 0x158fbb49 0x15c3256e 0x15c2fbd6 0x167942c4 0x167a29f9 0x18bc07c7 0x18bc0cad 0x18d314e7 0x18d2f0c3 0x7fa61aa55609 0x7fa61a97a163\r\n2022.12.27 23:48:52.080770 [ 4090961 ] <Fatal> BaseDaemon: 3. ./build_clang/./src/Storages/MutationCommands.cpp:163: DB::MutationCommands::ast(bool) const @ 0x1602108a in /usr/local/bin/clickhouse\r\n2022.12.27 23:48:52.088590 [ 4090961 ] <Fatal> BaseDaemon: 4. ./build_clang/./src/Storages/MutationCommands.cpp:172: DB::MutationCommands::writeText(DB::WriteBuffer&, bool) const @ 0x16021164 in /usr/local/bin/clickhouse\r\n2022.12.27 23:48:52.097455 [ 4090961 ] <Fatal> BaseDaemon: 5.1. inlined from ./build_clang/./src/IO/WriteHelpers.h:187: DB::writeString(char const*, unsigned long, DB::WriteBuffer&)\r\n2022.12.27 23:48:52.097504 [ 4090961 ] <Fatal> BaseDaemon: 5.2. inlined from ./build_clang/./src/IO/WriteHelpers.h:878: DB::writeText(std::__1::basic_string_view<char, std::__1::char_traits<char>>, DB::WriteBuffer&)\r\n2022.12.27 23:48:52.097522 [ 4090961 ] <Fatal> BaseDaemon: 5.3. inlined from ./build_clang/./src/IO/Operators.h:44: DB::WriteBuffer& DB::operator<<<char [2]>(DB::WriteBuffer&, char const (&) [2])\r\n2022.12.27 23:48:52.097551 [ 4090961 ] <Fatal> BaseDaemon: 5. ./build_clang/./src/Storages/MergeTree/MergeTreeMutationEntry.cpp:65: DB::MergeTreeMutationEntry::MergeTreeMutationEntry(DB::MutationCommands, std::__1::shared_ptr<DB::IDisk>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, unsigned long, DB::TransactionID const&, DB::WriteSettings const&) @ 0x1667b50c in /usr/local/bin/clickhouse\r\n2022.12.27 23:48:52.160053 [ 4090961 ] <Fatal> BaseDaemon: 6. ./build_clang/./src/Storages/StorageMergeTree.cpp:423: DB::StorageMergeTree::startMutation(DB::MutationCommands const&, std::__1::shared_ptr<DB::Context const>) @ 0x1665f48e in /usr/local/bin/clickhouse\r\n2022.12.27 23:48:52.222058 [ 4090961 ] <Fatal> BaseDaemon: 7. ./build_clang/./src/Storages/StorageMergeTree.cpp:0: DB::StorageMergeTree::mutate(DB::MutationCommands const&, std::__1::shared_ptr<DB::Context const>) @ 0x1666206b in /usr/local/bin/clickhouse\r\n2022.12.27 23:48:52.257567 [ 4090961 ] <Fatal> BaseDaemon: 8.1. inlined from ./build_clang/./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:701: ~shared_ptr\r\n2022.12.27 23:48:52.257604 [ 4090961 ] <Fatal> BaseDaemon: 8. ./build_clang/./src/Storages/StorageMaterializedView.cpp:326: DB::StorageMaterializedView::mutate(DB::MutationCommands const&, std::__1::shared_ptr<DB::Context const>) @ 0x160c042d in /usr/local/bin/clickhouse\r\n2022.12.27 23:48:52.269200 [ 4090961 ] <Fatal> BaseDaemon: 9.1. inlined from ./build_clang/./src/QueryPipeline/BlockIO.h:14: BlockIO\r\n2022.12.27 23:48:52.269228 [ 4090961 ] <Fatal> BaseDaemon: 9. ./build_clang/./src/Interpreters/InterpreterDeleteQuery.cpp:77: DB::InterpreterDeleteQuery::execute() @ 0x158fbb49 in /usr/local/bin/clickhouse\r\n2022.12.27 23:48:52.312177 [ 4090961 ] <Fatal> BaseDaemon: 10. ./build_clang/./src/Interpreters/executeQuery.cpp:0: DB::executeQueryImpl(char const*, char const*, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x15c3256e in /usr/local/bin/clickhouse\r\n2022.12.27 23:48:52.358332 [ 4090961 ] <Fatal> BaseDaemon: 11. ./build_clang/./src/Interpreters/executeQuery.cpp:1083: DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x15c2fbd6 in /usr/local/bin/clickhouse\r\n2022.12.27 23:48:52.390551 [ 4090961 ] <Fatal> BaseDaemon: 12. ./build_clang/./src/Server/TCPHandler.cpp:0: DB::TCPHandler::runImpl() @ 0x167942c4 in /usr/local/bin/clickhouse\r\n2022.12.27 23:48:52.440488 [ 4090961 ] <Fatal> BaseDaemon: 13. ./build_clang/./src/Server/TCPHandler.cpp:1922: DB::TCPHandler::run() @ 0x167a29f9 in /usr/local/bin/clickhouse\r\n2022.12.27 23:48:52.442312 [ 4090961 ] <Fatal> BaseDaemon: 14. ./build_clang/./contrib/poco/Net/src/TCPServerConnection.cpp:57: Poco::Net::TCPServerConnection::start() @ 0x18bc07c7 in /usr/local/bin/clickhouse\r\n2022.12.27 23:48:52.445233 [ 4090961 ] <Fatal> BaseDaemon: 15.1. inlined from ./build_clang/./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:48: std::__1::default_delete<Poco::Net::TCPServerConnection>::operator()[abi:v15000](Poco::Net::TCPServerConnection*) const\r\n2022.12.27 23:48:52.445255 [ 4090961 ] <Fatal> BaseDaemon: 15.2. inlined from ./build_clang/./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:305: std::__1::unique_ptr<Poco::Net::TCPServerConnection, std::__1::default_delete<Poco::Net::TCPServerConnection>>::reset[abi:v15000](Poco::Net::TCPServerConnection*)\r\n2022.12.27 23:48:52.445278 [ 4090961 ] <Fatal> BaseDaemon: 15.3. inlined from ./build_clang/./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:259: ~unique_ptr\r\n2022.12.27 23:48:52.445312 [ 4090961 ] <Fatal> BaseDaemon: 15. ./build_clang/./contrib/poco/Net/src/TCPServerDispatcher.cpp:116: Poco::Net::TCPServerDispatcher::run() @ 0x18bc0cad in /usr/local/bin/clickhouse\r\n2022.12.27 23:48:52.448782 [ 4090961 ] <Fatal> BaseDaemon: 16. ./build_clang/./contrib/poco/Foundation/src/ThreadPool.cpp:213: Poco::PooledThread::run() @ 0x18d314e7 in /usr/local/bin/clickhouse\r\n2022.12.27 23:48:52.451637 [ 4090961 ] <Fatal> BaseDaemon: 17.1. inlined from ./build_clang/./contrib/poco/Foundation/include/Poco/SharedPtr.h:156: Poco::SharedPtr<Poco::Runnable, Poco::ReferenceCounter, Poco::ReleasePolicy<Poco::Runnable>>::assign(Poco::Runnable*)\r\n2022.12.27 23:48:52.451660 [ 4090961 ] <Fatal> BaseDaemon: 17.2. inlined from ./build_clang/./contrib/poco/Foundation/include/Poco/SharedPtr.h:208: Poco::SharedPtr<Poco::Runnable, Poco::ReferenceCounter, Poco::ReleasePolicy<Poco::Runnable>>::operator=(Poco::Runnable*)\r\n2022.12.27 23:48:52.451685 [ 4090961 ] <Fatal> BaseDaemon: 17. ./build_clang/./contrib/poco/Foundation/src/Thread_POSIX.cpp:360: Poco::ThreadImpl::runnableEntry(void*) @ 0x18d2f0c3 in /usr/local/bin/clickhouse\r\n2022.12.27 23:48:52.451721 [ 4090961 ] <Fatal> BaseDaemon: 18. ? @ 0x7fa61aa55609 in ?\r\n2022.12.27 23:48:52.451762 [ 4090961 ] <Fatal> BaseDaemon: 19. clone @ 0x7fa61a97a163 in ?\r\n2022.12.27 23:48:52.451794 [ 4090961 ] <Fatal> BaseDaemon: Integrity check of the executable skipped because the reference checksum could not be read.\r\nError on processing query: Code: 32. DB::Exception: Attempt to read after eof: while receiving packet from localhost:9000. (ATTEMPT_TO_READ_AFTER_EOF) (version 22.13.1.1)\r\n(query: DELETE FROM kekv WHERE a = 1; -- actually any condition here)\r\n```\r\n\r\n\r\n**Additional context**\r\n\r\nThe bug is [here](https://github.com/ClickHouse/ClickHouse/blob/2892d447d4acfc9878108c17f775db8b62aa48c4/src/Interpreters/InterpreterDeleteQuery.cpp#L61-L80).\n",
  "hints_text": "Looks like in this commit the DELETE mutation was mistakenly enabled for all storages other than MergeTree, while it should have been enabled just for RocksDB\r\nhttps://github.com/ClickHouse/ClickHouse/commit/0e6b3b870acb12efbbd27eaef67c9ed1f267b704#diff-9b3ae52f39d9c550bfce3a8babdbc528e8f5c00c38c5a88ccca6263705f7d19cR64",
  "created_at": "2022-12-29T11:26:48Z"
}