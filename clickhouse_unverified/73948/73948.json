{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 73948,
  "instance_id": "ClickHouse__ClickHouse-73948",
  "issue_numbers": [
    "50957"
  ],
  "base_commit": "321d3f10bf22a7644b4ee9ca92e85252a71bce2b",
  "patch": "diff --git a/src/Functions/globalVariable.cpp b/src/Functions/globalVariable.cpp\nindex 7abc83d8f143..cca0510fae41 100644\n--- a/src/Functions/globalVariable.cpp\n+++ b/src/Functions/globalVariable.cpp\n@@ -82,7 +82,8 @@ class FunctionGlobalVariable : public IFunction\n         {\"version\", {std::make_shared<DataTypeString>(), \"5.7.30\"}},\n         {\"version_comment\", {std::make_shared<DataTypeString>(), \"\"}},\n         {\"transaction_isolation\", {std::make_shared<DataTypeString>(), \"READ-UNCOMMITTED\"}},\n-        {\"track_system_variables\", {std::make_shared<DataTypeString>(), \"\"}},\n+        {\"session_track_system_variables\", {std::make_shared<DataTypeString>(), \"\"}},\n+        {\"sql_mode\", {std::make_shared<DataTypeString>(), \"ALLOW_INVALID_DATES,ANSI_QUOTES,IGNORE_SPACE,NO_AUTO_VALUE_ON_ZERO,NO_DIR_IN_CREATE,ONLY_FULL_GROUP_BY,PAD_CHAR_TO_FULL_LENGTH,PIPES_AS_CONCAT,REAL_AS_FLOAT\"}},\n     };\n };\n \ndiff --git a/src/Server/MySQLHandler.cpp b/src/Server/MySQLHandler.cpp\nindex aa09b84a2b6a..69db3758eee2 100644\n--- a/src/Server/MySQLHandler.cpp\n+++ b/src/Server/MySQLHandler.cpp\n@@ -170,6 +170,30 @@ static String killConnectionIdReplacementQuery(const String & query)\n     return query;\n }\n \n+\n+/** MySQL returns this error code, HY000, so should we.\n+  *\n+  * These error codes represent the worst legacy practices in software engineering from 1970s\n+  * (fixed-size fields, short variable names, cryptic abbreviations, lack of documentation, made-up alphabets)\n+  * We should never ever fall into these practices, and having this compatibility error code is probably the only exception.\n+  *\n+  * You might be wondering, why it is HY000, and more precisely, what do the letters H and Y mean?\n+  * The history does not know. The best answer I found is:\n+  * https://dba.stackexchange.com/questions/241506/what-does-hy-stand-for-in-error-code\n+  * Also, https://en.wikipedia.org/wiki/SQLSTATE\n+  *\n+  * Apparently, they decide to allocate alphanumeric characters for some meaning,\n+  * then split their range (0..9A..Z) to some intervals for the system, user, and other categories,\n+  * and the letter H appeared to be the first in some category.\n+  *\n+  * Also, the letter Y is chosen, because it is the highest, but someone afraid to took letter Z,\n+  * and decided that the second highest letter is good enough.\n+  *\n+  * This will forever remind us about the mistakes made by previous generations of software engineers.\n+  */\n+static constexpr const char * mysql_error_code = \"HY000\";\n+\n+\n MySQLHandler::MySQLHandler(\n     IServer & server_,\n     TCPServer & tcp_server_,\n@@ -257,7 +281,7 @@ void MySQLHandler::run()\n         catch (const Exception & exc)\n         {\n             log->log(exc);\n-            packet_endpoint->sendPacket(ERRPacket(exc.code(), \"00000\", exc.message()));\n+            packet_endpoint->sendPacket(ERRPacket(exc.code(), mysql_error_code, exc.message()));\n         }\n \n         OKPacket ok_packet(0, handshake_response.capability_flags, 0, 0, 0);\n@@ -321,7 +345,7 @@ void MySQLHandler::run()\n             catch (...)\n             {\n                 tryLogCurrentException(log, \"MySQLHandler: Cannot read packet: \");\n-                packet_endpoint->sendPacket(ERRPacket(getCurrentExceptionCode(), \"00000\", getCurrentExceptionMessage(false)));\n+                packet_endpoint->sendPacket(ERRPacket(getCurrentExceptionCode(), mysql_error_code, getCurrentExceptionMessage(false)));\n             }\n         }\n     }\n@@ -400,7 +424,7 @@ void MySQLHandler::authenticate(const String & user_name, const String & auth_pl\n     catch (const Exception & exc)\n     {\n         LOG_ERROR(log, \"Authentication for user {} failed.\", user_name);\n-        packet_endpoint->sendPacket(ERRPacket(exc.code(), \"00000\", exc.message()));\n+        packet_endpoint->sendPacket(ERRPacket(exc.code(), mysql_error_code, exc.message()));\n         throw;\n     }\n     LOG_DEBUG(log, \"Authentication for user {} succeeded.\", user_name);\n",
  "test_patch": "diff --git a/tests/integration/test_mysql_protocol/test.py b/tests/integration/test_mysql_protocol/test.py\nindex 2ad11ae4f99a..02bdac89843f 100644\n--- a/tests/integration/test_mysql_protocol/test.py\n+++ b/tests/integration/test_mysql_protocol/test.py\n@@ -178,7 +178,7 @@ def test_mysql_client(started_cluster):\n \n     assert (\n         \"mysql: [Warning] Using a password on the command line interface can be insecure.\\n\"\n-        \"ERROR 194 (00000): default: Authentication failed: password is incorrect, or there is no user with such name\"\n+        \"ERROR 194 (HY000): default: Authentication failed: password is incorrect, or there is no user with such name\"\n         in stderr.decode()\n     )\n \n@@ -198,7 +198,7 @@ def test_mysql_client(started_cluster):\n     expected_msg = \"\\n\".join(\n         [\n             \"mysql: [Warning] Using a password on the command line interface can be insecure.\",\n-            \"ERROR 81 (00000) at line 1: Code: 81. DB::Exception: Database system2 does not exist\",\n+            \"ERROR 81 (HY000) at line 1: Code: 81. DB::Exception: Database system2 does not exist\",\n         ]\n     )\n     assert stderr[: len(expected_msg)].decode() == expected_msg\n@@ -242,7 +242,7 @@ def test_mysql_client_exception(started_cluster):\n     expected_msg = \"\\n\".join(\n         [\n             \"mysql: [Warning] Using a password on the command line interface can be insecure.\",\n-            \"ERROR 279 (00000) at line 1: Code: 279. DB::Exception: Connections to mysql failed: default@127.0.0.1:10086 as user default\",\n+            \"ERROR 279 (HY000) at line 1: Code: 279. DB::Exception: Connections to mysql failed: default@127.0.0.1:10086 as user default\",\n         ]\n     )\n     assert stderr[: len(expected_msg)].decode() == expected_msg\ndiff --git a/tests/queries/0_stateless/01176_mysql_client_interactive.expect b/tests/queries/0_stateless/01176_mysql_client_interactive.expect\nindex 6bfff6dfab34..83642003ba40 100755\n--- a/tests/queries/0_stateless/01176_mysql_client_interactive.expect\n+++ b/tests/queries/0_stateless/01176_mysql_client_interactive.expect\n@@ -35,18 +35,18 @@ expect \"1 row in set\"\n \n # exception before start\n send -- \"select * from table_that_does_not_exist;\\r\"\n-expect \"ERROR 60 (00000): Code: 60\"\n+expect \"ERROR 60 (HY000): Code: 60\"\n \n # exception after start\n send -- \"select throwIf(number) from numbers(2) settings max_block_size=1;\\r\"\n-expect \"ERROR 395 (00000): Code: 395\"\n+expect \"ERROR 395 (HY000): Code: 395\"\n \n # other formats\n send -- \"select * from system.one format TSV;\\r\"\n-expect \"ERROR 1 (00000): Code: 1\"\n+expect \"ERROR 1 (HY000): Code: 1\"\n \n send -- \"select * from system.one format JSON;\\r\"\n-expect \"ERROR 1 (00000): Code: 1\"\n+expect \"ERROR 1 (HY000): Code: 1\"\n \n send -- \"select * from system.one format MySQLWire;\\r\"\n expect \"| dummy |\"\n",
  "problem_statement": "MySQL interface sends SQLSTATE 00000 instead of HY000 for failed queries\nServer: docker image clickhouse/clickhouse-server:23.5-alpine\r\nClient: mysql --version mysql  Ver 8.0.33-0ubuntu0.22.04.2 for Linux on x86_64 ((Ubuntu))\r\n\r\nServer config:\r\n```\r\n<clickhouse>\r\n    <mysql_port>3306</mysql_port>\r\n</clickhouse>\r\n```\r\n\r\n1. I connect to clickhouse with a mysql client:\r\n```\r\nReading table information for completion of table and column names\r\nYou can turn off this feature to get a quicker startup with -A\r\n\r\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\r\nYour MySQL connection id is 17\r\nServer version: 23.5.1.3174-ClickHouse \r\n```\r\n\r\n2. I execute an invalid query:\r\n```\r\nmysql> select foo bar;\r\nERROR 47 (00000): Code: 47. DB::Exception: Missing columns: 'foo' while processing query: 'SELECT foo AS bar', required columns: 'foo'. (UNKNOWN_IDENTIFIER) (version 23.5.1.3174 (official build))\r\n```\r\n=> the query failed, server response indicates error code 47 with SQLSTATE 00000.\r\n\r\n3. By definition, the first two characters of an SQLSTATE value indicate the error class (https://dev.mysql.com/doc/refman/8.0/en/error-message-elements.html). Class = '00' indicates success.\r\n\r\n=> So many client libraries such as PHP's pdo_mysql treat the **failed** query as a **successful** query.\r\n\r\nFrom my understanding of the MySQL documentation, \"HY000\" should be used instead of \"00000\", but I'm not a mysql core expert and the final decision is up to you.\r\n\r\n\r\n     \n",
  "hints_text": "",
  "created_at": "2024-12-29T02:42:04Z"
}