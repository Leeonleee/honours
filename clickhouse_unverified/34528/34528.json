{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 34528,
  "instance_id": "ClickHouse__ClickHouse-34528",
  "issue_numbers": [
    "34493"
  ],
  "base_commit": "c347438612f70def27a7675bb13faa9ff1de98e8",
  "patch": "diff --git a/src/Storages/MergeTree/KeyCondition.cpp b/src/Storages/MergeTree/KeyCondition.cpp\nindex 8ce65211e3eb..323b59e29021 100644\n--- a/src/Storages/MergeTree/KeyCondition.cpp\n+++ b/src/Storages/MergeTree/KeyCondition.cpp\n@@ -1292,8 +1292,8 @@ bool KeyCondition::tryParseAtomFromAST(const ASTPtr & node, ContextPtr context,\n                 key_expr_type_not_null = key_expr_type;\n \n             bool cast_not_needed = is_set_const /// Set args are already casted inside Set::createFromAST\n-                || ((isNativeNumber(key_expr_type_not_null) || isDateTime(key_expr_type_not_null))\n-                    && (isNativeNumber(const_type) || isDateTime(const_type))); /// Numbers and DateTime are accurately compared without cast.\n+                || ((isNativeInteger(key_expr_type_not_null) || isDateTime(key_expr_type_not_null))\n+                    && (isNativeInteger(const_type) || isDateTime(const_type))); /// Native integers and DateTime are accurately compared without cast.\n \n             if (!cast_not_needed && !key_expr_type_not_null->equals(*const_type))\n             {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02207_key_condition_floats.reference b/tests/queries/0_stateless/02207_key_condition_floats.reference\nnew file mode 100644\nindex 000000000000..6c78023f8c0b\n--- /dev/null\n+++ b/tests/queries/0_stateless/02207_key_condition_floats.reference\n@@ -0,0 +1,9 @@\n+2\n+2\n+2\n+2\n+2\n+2\n+2\n+2\n+1\ndiff --git a/tests/queries/0_stateless/02207_key_condition_floats.sql b/tests/queries/0_stateless/02207_key_condition_floats.sql\nnew file mode 100644\nindex 000000000000..65527c652909\n--- /dev/null\n+++ b/tests/queries/0_stateless/02207_key_condition_floats.sql\n@@ -0,0 +1,34 @@\n+DROP TABLE IF EXISTS t_key_condition_float;\n+\n+CREATE TABLE t_key_condition_float (a Float32)\n+ENGINE = MergeTree ORDER BY a;\n+\n+INSERT INTO t_key_condition_float VALUES (0.1), (0.2);\n+\n+SELECT count() FROM t_key_condition_float WHERE a > 0;\n+SELECT count() FROM t_key_condition_float WHERE a > 0.0;\n+SELECT count() FROM t_key_condition_float WHERE a > 0::Float32;\n+SELECT count() FROM t_key_condition_float WHERE a > 0::Float64;\n+\n+DROP TABLE t_key_condition_float;\n+\n+CREATE TABLE t_key_condition_float (a Float64)\n+ENGINE = MergeTree ORDER BY a;\n+\n+INSERT INTO t_key_condition_float VALUES (0.1), (0.2);\n+\n+SELECT count() FROM t_key_condition_float WHERE a > 0;\n+SELECT count() FROM t_key_condition_float WHERE a > 0.0;\n+SELECT count() FROM t_key_condition_float WHERE a > 0::Float32;\n+SELECT count() FROM t_key_condition_float WHERE a > 0::Float64;\n+\n+DROP TABLE t_key_condition_float;\n+\n+CREATE TABLE t_key_condition_float (a UInt64)\n+ENGINE = MergeTree ORDER BY a;\n+\n+INSERT INTO t_key_condition_float VALUES (1), (2);\n+\n+SELECT count() FROM t_key_condition_float WHERE a > 1.5;\n+\n+DROP TABLE t_key_condition_float;\n",
  "problem_statement": "wrong float comparison with constant for Float32\n\r\ncreate table test1 (a Float32,  b Float32 ) engine = MergeTree order by a ;\r\ninsert into test1 values (0.1,0.1), (0.2,0.2);\r\nselect count() from test1 where b = 0.1;\r\n0 \r\nselect count() from test1 where b = toFloat32(0.1);\r\n1\r\nselect count() from test1 where a > 0;\r\n0\r\nselect count() from test1 where a > 0.0;\r\n2\r\nselect count() from test1 where b > 0;\r\n2\r\n\r\nversion 22.1.3.7  \r\n\n",
  "hints_text": "Looks like a bug in index analysis (KeyCondition).\nThe fact that `SELECT 0.1::Float32 != 0.1` is ok,\r\nbut the issue that `a > 0` did not find records is a bug.",
  "created_at": "2022-02-11T14:18:40Z"
}