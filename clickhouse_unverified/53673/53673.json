{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 53673,
  "instance_id": "ClickHouse__ClickHouse-53673",
  "issue_numbers": [
    "53503"
  ],
  "base_commit": "b504df80b7664db8d94fc039b112f615116a32ef",
  "patch": "diff --git a/programs/benchmark/Benchmark.cpp b/programs/benchmark/Benchmark.cpp\nindex c5acd10f791c..a5564f47784c 100644\n--- a/programs/benchmark/Benchmark.cpp\n+++ b/programs/benchmark/Benchmark.cpp\n@@ -5,6 +5,7 @@\n #include <fstream>\n #include <iomanip>\n #include <random>\n+#include <string_view>\n #include <pcg_random.hpp>\n #include <Poco/Util/Application.h>\n #include <Common/Stopwatch.h>\n@@ -48,6 +49,7 @@ namespace DB\n {\n \n using Ports = std::vector<UInt16>;\n+static constexpr std::string_view DEFAULT_CLIENT_NAME = \"benchmark\";\n \n namespace ErrorCodes\n {\n@@ -122,7 +124,7 @@ class Benchmark : public Poco::Util::Application\n                 default_database_, user_, password_, quota_key_,\n                 /* cluster_= */ \"\",\n                 /* cluster_secret_= */ \"\",\n-                /* client_name_= */ \"benchmark\",\n+                /* client_name_= */ std::string(DEFAULT_CLIENT_NAME),\n                 Protocol::Compression::Enable,\n                 secure));\n \n@@ -135,6 +137,8 @@ class Benchmark : public Poco::Util::Application\n \n         global_context->makeGlobalContext();\n         global_context->setSettings(settings);\n+        global_context->setClientName(std::string(DEFAULT_CLIENT_NAME));\n+        global_context->setQueryKindInitial();\n \n         std::cerr << std::fixed << std::setprecision(3);\n \ndiff --git a/programs/client/Client.cpp b/programs/client/Client.cpp\nindex e73f77819ad6..929e59ed8529 100644\n--- a/programs/client/Client.cpp\n+++ b/programs/client/Client.cpp\n@@ -1243,6 +1243,7 @@ void Client::processConfig()\n             global_context->getSettingsRef().max_insert_block_size);\n     }\n \n+    global_context->setClientName(std::string(DEFAULT_CLIENT_NAME));\n     global_context->setQueryKindInitial();\n     global_context->setQuotaClientKey(config().getString(\"quota_key\", \"\"));\n     global_context->setQueryKind(query_kind);\ndiff --git a/src/Client/ClientBase.h b/src/Client/ClientBase.h\nindex bd17318d1dff..d877905302d6 100644\n--- a/src/Client/ClientBase.h\n+++ b/src/Client/ClientBase.h\n@@ -1,5 +1,6 @@\n #pragma once\n \n+#include <string_view>\n #include \"Common/NamePrompter.h\"\n #include <Parsers/ASTCreateQuery.h>\n #include <Common/ProgressIndication.h>\n@@ -24,6 +25,7 @@ namespace po = boost::program_options;\n namespace DB\n {\n \n+static constexpr std::string_view DEFAULT_CLIENT_NAME = \"client\";\n \n static const NameSet exit_strings\n {\ndiff --git a/src/Client/Connection.cpp b/src/Client/Connection.cpp\nindex 3e12e60be08e..859afb5ea441 100644\n--- a/src/Client/Connection.cpp\n+++ b/src/Client/Connection.cpp\n@@ -12,6 +12,7 @@\n #include <IO/TimeoutSetter.h>\n #include <Formats/NativeReader.h>\n #include <Formats/NativeWriter.h>\n+#include <Client/ClientBase.h>\n #include <Client/Connection.h>\n #include <Client/ConnectionParameters.h>\n #include <Common/ClickHouseRevision.h>\n@@ -1204,7 +1205,7 @@ ServerConnectionPtr Connection::createConnection(const ConnectionParameters & pa\n         parameters.quota_key,\n         \"\", /* cluster */\n         \"\", /* cluster_secret */\n-        \"client\",\n+        std::string(DEFAULT_CLIENT_NAME),\n         parameters.compression,\n         parameters.security);\n }\ndiff --git a/src/Common/ErrorCodes.cpp b/src/Common/ErrorCodes.cpp\nindex a32778211119..f23685c37d14 100644\n--- a/src/Common/ErrorCodes.cpp\n+++ b/src/Common/ErrorCodes.cpp\n@@ -584,6 +584,7 @@\n     M(699, INVALID_REDIS_TABLE_STRUCTURE) \\\n     M(700, USER_SESSION_LIMIT_EXCEEDED)  \\\n     M(701, CLUSTER_DOESNT_EXIST) \\\n+    M(702, CLIENT_INFO_DOES_NOT_MATCH) \\\n     \\\n     M(999, KEEPER_EXCEPTION) \\\n     M(1000, POCO_EXCEPTION) \\\ndiff --git a/src/Interpreters/ClientInfo.cpp b/src/Interpreters/ClientInfo.cpp\nindex 6c09b327ca13..d007341a1acb 100644\n--- a/src/Interpreters/ClientInfo.cpp\n+++ b/src/Interpreters/ClientInfo.cpp\n@@ -9,6 +9,7 @@\n \n #include \"config_version.h\"\n \n+#include <format>\n \n namespace DB\n {\n@@ -18,7 +19,6 @@ namespace ErrorCodes\n     extern const int LOGICAL_ERROR;\n }\n \n-\n void ClientInfo::write(WriteBuffer & out, UInt64 server_protocol_revision) const\n {\n     if (server_protocol_revision < DBMS_MIN_REVISION_WITH_CLIENT_INFO)\n@@ -199,6 +199,20 @@ void ClientInfo::setInitialQuery()\n         client_name = (VERSION_NAME \" \") + client_name;\n }\n \n+bool ClientInfo::clientVersionEquals(const ClientInfo & other, bool compare_patch) const\n+{\n+    bool patch_equals = compare_patch ? client_version_patch == other.client_version_patch : true;\n+    return client_version_major == other.client_version_major &&\n+           client_version_minor == other.client_version_minor &&\n+           patch_equals &&\n+           client_tcp_protocol_version == other.client_tcp_protocol_version;\n+}\n+\n+String ClientInfo::getVersionStr() const\n+{\n+    return std::format(\"{}.{}.{} ({})\", client_version_major, client_version_minor, client_version_patch, client_tcp_protocol_version);\n+}\n+\n \n void ClientInfo::fillOSUserHostNameAndVersionInfo()\n {\n@@ -216,5 +230,27 @@ void ClientInfo::fillOSUserHostNameAndVersionInfo()\n     client_tcp_protocol_version = DBMS_TCP_PROTOCOL_VERSION;\n }\n \n+String toString(ClientInfo::Interface interface)\n+{\n+    switch (interface)\n+    {\n+        case ClientInfo::Interface::TCP:\n+            return \"TCP\";\n+        case ClientInfo::Interface::HTTP:\n+            return \"HTTP\";\n+        case ClientInfo::Interface::GRPC:\n+            return \"GRPC\";\n+        case ClientInfo::Interface::MYSQL:\n+            return \"MYSQL\";\n+        case ClientInfo::Interface::POSTGRESQL:\n+            return \"POSTGRESQL\";\n+        case ClientInfo::Interface::LOCAL:\n+            return \"LOCAL\";\n+        case ClientInfo::Interface::TCP_INTERSERVER:\n+            return \"TCP_INTERSERVER\";\n+    }\n+\n+    return std::format(\"Unknown {}!\\n\", static_cast<int>(interface));\n+}\n \n }\ndiff --git a/src/Interpreters/ClientInfo.h b/src/Interpreters/ClientInfo.h\nindex 5c5a284d63b8..798fc95954c2 100644\n--- a/src/Interpreters/ClientInfo.h\n+++ b/src/Interpreters/ClientInfo.h\n@@ -48,7 +48,6 @@ class ClientInfo\n         SECONDARY_QUERY = 2,    /// Query that was initiated by another query for distributed or ON CLUSTER query execution.\n     };\n \n-\n     QueryKind query_kind = QueryKind::NO_QUERY;\n \n     /// Current values are not serialized, because it is passed separately.\n@@ -135,8 +134,14 @@ class ClientInfo\n     /// Initialize parameters on client initiating query.\n     void setInitialQuery();\n \n+    bool clientVersionEquals(const ClientInfo & other, bool compare_patch) const;\n+\n+    String getVersionStr() const;\n+\n private:\n     void fillOSUserHostNameAndVersionInfo();\n };\n \n+String toString(ClientInfo::Interface interface);\n+\n }\ndiff --git a/src/Interpreters/Session.cpp b/src/Interpreters/Session.cpp\nindex e0b5db445939..439bf6056bab 100644\n--- a/src/Interpreters/Session.cpp\n+++ b/src/Interpreters/Session.cpp\n@@ -302,7 +302,6 @@ Session::~Session()\n         LOG_DEBUG(log, \"{} Logout, user_id: {}\", toString(auth_id), toString(*user_id));\n         if (auto session_log = getSessionLog())\n         {\n-            /// TODO: We have to ensure that the same info is added to the session log on a LoginSuccess event and on the corresponding Logout event.\n             session_log->addLogOut(auth_id, user, getClientInfo());\n         }\n     }\ndiff --git a/src/Server/TCPHandler.cpp b/src/Server/TCPHandler.cpp\nindex ac3928b4abe5..983d88b13fc4 100644\n--- a/src/Server/TCPHandler.cpp\n+++ b/src/Server/TCPHandler.cpp\n@@ -83,6 +83,22 @@ namespace ProfileEvents\n     extern const Event MergeTreeAllRangesAnnouncementsSentElapsedMicroseconds;\n }\n \n+namespace DB::ErrorCodes\n+{\n+    extern const int LOGICAL_ERROR;\n+    extern const int ATTEMPT_TO_READ_AFTER_EOF;\n+    extern const int CLIENT_HAS_CONNECTED_TO_WRONG_PORT;\n+    extern const int UNKNOWN_EXCEPTION;\n+    extern const int UNKNOWN_PACKET_FROM_CLIENT;\n+    extern const int POCO_EXCEPTION;\n+    extern const int SOCKET_TIMEOUT;\n+    extern const int UNEXPECTED_PACKET_FROM_CLIENT;\n+    extern const int UNKNOWN_PROTOCOL;\n+    extern const int AUTHENTICATION_FAILED;\n+    extern const int QUERY_WAS_CANCELLED;\n+    extern const int CLIENT_INFO_DOES_NOT_MATCH;\n+}\n+\n namespace\n {\n NameToNameMap convertToQueryParameters(const Settings & passed_params)\n@@ -98,26 +114,56 @@ NameToNameMap convertToQueryParameters(const Settings & passed_params)\n     return query_parameters;\n }\n \n+void validateClientInfo(const ClientInfo & session_client_info, const ClientInfo & client_info)\n+{\n+    // Secondary query may contain different client_info.\n+    // In the case of select from distributed table or 'select * from remote' from non-tcp handler. Server sends the initial client_info data.\n+    //\n+    // Example 1: curl -q -s --max-time 60 -sS \"http://127.0.0.1:8123/?\" -d \"SELECT 1 FROM remote('127.0.0.1', system.one)\"\n+    // HTTP handler initiates TCP connection with remote 127.0.0.1 (session on remote 127.0.0.1 use TCP interface)\n+    // HTTP handler sends client_info with HTTP interface and HTTP data by TCP protocol in Protocol::Client::Query message.\n+    //\n+    // Example 2: select * from <distributed_table>  --host shard_1 // distributed table has 2 shards: shard_1, shard_2\n+    // shard_1 receives a message with 'ClickHouse client' client_name\n+    // shard_1 initiates TCP connection with shard_2 with 'ClickHouse server' client_name.\n+    // shard_1 sends 'ClickHouse client' client_name in Protocol::Client::Query message to shard_2.\n+    if (client_info.query_kind == ClientInfo::QueryKind::SECONDARY_QUERY)\n+        return;\n+\n+    if (session_client_info.interface != client_info.interface)\n+    {\n+        throw Exception(\n+            DB::ErrorCodes::CLIENT_INFO_DOES_NOT_MATCH,\n+            \"Client info's interface does not match: {} not equal to {}\",\n+            toString(session_client_info.interface),\n+            toString(client_info.interface));\n+    }\n+\n+    if (session_client_info.interface == ClientInfo::Interface::TCP)\n+    {\n+        if (session_client_info.client_name != client_info.client_name)\n+            throw Exception(\n+                DB::ErrorCodes::CLIENT_INFO_DOES_NOT_MATCH,\n+                \"Client info's client_name does not match: {} not equal to {}\",\n+                session_client_info.client_name,\n+                client_info.client_name);\n+\n+        // TCP handler got patch version 0 always for backward compatibility.\n+        if (!session_client_info.clientVersionEquals(client_info, false))\n+            throw Exception(\n+                DB::ErrorCodes::CLIENT_INFO_DOES_NOT_MATCH,\n+                \"Client info's version does not match: {} not equal to {}\",\n+                session_client_info.getVersionStr(),\n+                client_info.getVersionStr());\n+\n+        // os_user, quota_key, client_trace_context can be different.\n+    }\n+}\n }\n \n namespace DB\n {\n \n-namespace ErrorCodes\n-{\n-    extern const int LOGICAL_ERROR;\n-    extern const int ATTEMPT_TO_READ_AFTER_EOF;\n-    extern const int CLIENT_HAS_CONNECTED_TO_WRONG_PORT;\n-    extern const int UNKNOWN_EXCEPTION;\n-    extern const int UNKNOWN_PACKET_FROM_CLIENT;\n-    extern const int POCO_EXCEPTION;\n-    extern const int SOCKET_TIMEOUT;\n-    extern const int UNEXPECTED_PACKET_FROM_CLIENT;\n-    extern const int UNKNOWN_PROTOCOL;\n-    extern const int AUTHENTICATION_FAILED;\n-    extern const int QUERY_WAS_CANCELLED;\n-}\n-\n TCPHandler::TCPHandler(IServer & server_, TCPServer & tcp_server_, const Poco::Net::StreamSocket & socket_, bool parse_proxy_protocol_, std::string server_display_name_)\n     : Poco::Net::TCPServerConnection(socket_)\n     , server(server_)\n@@ -1484,7 +1530,10 @@ void TCPHandler::receiveQuery()\n     /// Read client info.\n     ClientInfo client_info = session->getClientInfo();\n     if (client_tcp_protocol_version >= DBMS_MIN_REVISION_WITH_CLIENT_INFO)\n+    {\n         client_info.read(*in, client_tcp_protocol_version);\n+        validateClientInfo(session->getClientInfo(), client_info);\n+    }\n \n     /// Per query settings are also passed via TCP.\n     /// We need to check them before applying due to they can violate the settings constraints.\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01601_proxy_protocol.sh b/tests/queries/0_stateless/01601_proxy_protocol.sh\nindex 5f4ec6cc597d..c8ee3ad1f7b3 100755\n--- a/tests/queries/0_stateless/01601_proxy_protocol.sh\n+++ b/tests/queries/0_stateless/01601_proxy_protocol.sh\n@@ -6,4 +6,4 @@ CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n # shellcheck source=../shell_config.sh\n . \"$CURDIR\"/../shell_config.sh\n \n-printf \"PROXY TCP4 255.255.255.255 255.255.255.255 65535 65535\\r\\n\\0\\21ClickHouse client\\24\\r\\253\\251\\3\\0\\7default\\0\\4\\1\\0\\1\\0\\0\\t0.0.0.0:0\\1\\tmilovidov\\21milovidov-desktop\\vClickHouse \\24\\r\\253\\251\\3\\0\\1\\0\\0\\0\\2\\1\\25SELECT 'Hello, world'\\2\\0\\247\\203\\254l\\325\\\\z|\\265\\254F\\275\\333\\206\\342\\24\\202\\24\\0\\0\\0\\n\\0\\0\\0\\240\\1\\0\\2\\377\\377\\377\\377\\0\\0\\0\" | nc \"${CLICKHOUSE_HOST}\" \"${CLICKHOUSE_PORT_TCP_WITH_PROXY}\" | head -c150 | grep --text -o -F 'Hello, world'\n+printf \"PROXY TCP4 255.255.255.255 255.255.255.255 65535 65535\\r\\n\\0\\21ClickHouse client\\24\\r\\253\\251\\3\\0\\7default\\0\\4\\1\\0\\1\\0\\0\\t0.0.0.0:0\\1\\tmilovidov\\21milovidov-desktop\\21ClickHouse client\\24\\r\\253\\251\\3\\0\\1\\0\\0\\0\\2\\1\\25SELECT 'Hello, world'\\2\\0\\247\\203\\254l\\325\\\\z|\\265\\254F\\275\\333\\206\\342\\24\\202\\24\\0\\0\\0\\n\\0\\0\\0\\240\\1\\0\\2\\377\\377\\377\\377\\0\\0\\0\" | nc \"${CLICKHOUSE_HOST}\" \"${CLICKHOUSE_PORT_TCP_WITH_PROXY}\" | head -c150 | grep --text -o -F 'Hello, world'\ndiff --git a/tests/queries/0_stateless/02010_lc_native.python b/tests/queries/0_stateless/02010_lc_native.python\nindex a197d32a3b90..6c4220855c86 100755\n--- a/tests/queries/0_stateless/02010_lc_native.python\n+++ b/tests/queries/0_stateless/02010_lc_native.python\n@@ -8,6 +8,7 @@ import uuid\n CLICKHOUSE_HOST = os.environ.get(\"CLICKHOUSE_HOST\", \"127.0.0.1\")\n CLICKHOUSE_PORT = int(os.environ.get(\"CLICKHOUSE_PORT_TCP\", \"900000\"))\n CLICKHOUSE_DATABASE = os.environ.get(\"CLICKHOUSE_DATABASE\", \"default\")\n+CLIENT_NAME = \"simple native protocol\"\n \n \n def writeVarUInt(x, ba):\n@@ -86,7 +87,7 @@ def readStringBinary(s):\n def sendHello(s):\n     ba = bytearray()\n     writeVarUInt(0, ba)  # Hello\n-    writeStringBinary(\"simple native protocol\", ba)\n+    writeStringBinary(CLIENT_NAME, ba)\n     writeVarUInt(21, ba)\n     writeVarUInt(9, ba)\n     writeVarUInt(54449, ba)\n@@ -123,7 +124,7 @@ def serializeClientInfo(ba, query_id):\n     ba.append(1)  # TCP\n     writeStringBinary(\"os_user\", ba)  # os_user\n     writeStringBinary(\"client_hostname\", ba)  # client_hostname\n-    writeStringBinary(\"client_name\", ba)  # client_name\n+    writeStringBinary(CLIENT_NAME, ba)  # client_name\n     writeVarUInt(21, ba)\n     writeVarUInt(9, ba)\n     writeVarUInt(54449, ba)\ndiff --git a/tests/queries/0_stateless/02270_client_name.reference b/tests/queries/0_stateless/02270_client_name.reference\nindex fbb2921010e6..8d1f2863fade 100644\n--- a/tests/queries/0_stateless/02270_client_name.reference\n+++ b/tests/queries/0_stateless/02270_client_name.reference\n@@ -1,1 +1,1 @@\n-\"ClickHouse\"\n+\"ClickHouse client\"\ndiff --git a/tests/queries/0_stateless/02458_insert_select_progress_tcp.python b/tests/queries/0_stateless/02458_insert_select_progress_tcp.python\nindex 696eb01ff7e0..92240e109c1e 100644\n--- a/tests/queries/0_stateless/02458_insert_select_progress_tcp.python\n+++ b/tests/queries/0_stateless/02458_insert_select_progress_tcp.python\n@@ -8,6 +8,7 @@ import json\n CLICKHOUSE_HOST = os.environ.get(\"CLICKHOUSE_HOST\", \"127.0.0.1\")\n CLICKHOUSE_PORT = int(os.environ.get(\"CLICKHOUSE_PORT_TCP\", \"900000\"))\n CLICKHOUSE_DATABASE = os.environ.get(\"CLICKHOUSE_DATABASE\", \"default\")\n+CLIENT_NAME = \"simple native protocol\"\n \n \n def writeVarUInt(x, ba):\n@@ -86,7 +87,7 @@ def readStringBinary(s):\n def sendHello(s):\n     ba = bytearray()\n     writeVarUInt(0, ba)  # Hello\n-    writeStringBinary(\"simple native protocol\", ba)\n+    writeStringBinary(CLIENT_NAME, ba)\n     writeVarUInt(21, ba)\n     writeVarUInt(9, ba)\n     writeVarUInt(54449, ba)\n@@ -123,7 +124,7 @@ def serializeClientInfo(ba, query_id):\n     ba.append(1)  # TCP\n     writeStringBinary(\"os_user\", ba)  # os_user\n     writeStringBinary(\"client_hostname\", ba)  # client_hostname\n-    writeStringBinary(\"client_name\", ba)  # client_name\n+    writeStringBinary(CLIENT_NAME, ba)  # client_name\n     writeVarUInt(21, ba)\n     writeVarUInt(9, ba)\n     writeVarUInt(54449, ba)\ndiff --git a/tests/queries/0_stateless/02750_settings_alias_tcp_protocol.python b/tests/queries/0_stateless/02750_settings_alias_tcp_protocol.python\nindex 768fb2144e34..48b27d434eca 100644\n--- a/tests/queries/0_stateless/02750_settings_alias_tcp_protocol.python\n+++ b/tests/queries/0_stateless/02750_settings_alias_tcp_protocol.python\n@@ -8,6 +8,7 @@ import json\n CLICKHOUSE_HOST = os.environ.get(\"CLICKHOUSE_HOST\", \"127.0.0.1\")\n CLICKHOUSE_PORT = int(os.environ.get(\"CLICKHOUSE_PORT_TCP\", \"900000\"))\n CLICKHOUSE_DATABASE = os.environ.get(\"CLICKHOUSE_DATABASE\", \"default\")\n+CLIENT_NAME = \"simple native protocol\"\n \n \n def writeVarUInt(x, ba):\n@@ -86,7 +87,7 @@ def readStringBinary(s):\n def sendHello(s):\n     ba = bytearray()\n     writeVarUInt(0, ba)  # Hello\n-    writeStringBinary(\"simple native protocol\", ba)\n+    writeStringBinary(CLIENT_NAME, ba)\n     writeVarUInt(21, ba)\n     writeVarUInt(9, ba)\n     writeVarUInt(54449, ba)\n@@ -116,7 +117,7 @@ def serializeClientInfo(ba, query_id):\n     ba.append(1)  # TCP\n     writeStringBinary(\"os_user\", ba)  # os_user\n     writeStringBinary(\"client_hostname\", ba)  # client_hostname\n-    writeStringBinary(\"client_name\", ba)  # client_name\n+    writeStringBinary(CLIENT_NAME, ba)  # client_name\n     writeVarUInt(21, ba)\n     writeVarUInt(9, ba)\n     writeVarUInt(54449, ba)\ndiff --git a/tests/queries/0_stateless/02865_tcp_proxy_query_packet_validation.reference b/tests/queries/0_stateless/02865_tcp_proxy_query_packet_validation.reference\nnew file mode 100644\nindex 000000000000..1f966c6731bd\n--- /dev/null\n+++ b/tests/queries/0_stateless/02865_tcp_proxy_query_packet_validation.reference\n@@ -0,0 +1,2 @@\n+client_name does not match\n+version does not match\ndiff --git a/tests/queries/0_stateless/02865_tcp_proxy_query_packet_validation.sh b/tests/queries/0_stateless/02865_tcp_proxy_query_packet_validation.sh\nnew file mode 100755\nindex 000000000000..fbbb7d11ec0d\n--- /dev/null\n+++ b/tests/queries/0_stateless/02865_tcp_proxy_query_packet_validation.sh\n@@ -0,0 +1,10 @@\n+#!/usr/bin/env bash\n+# Tags: no-fasttest\n+# Tag no-fasttest: nc - command not found\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+printf \"PROXY TCP4 255.255.255.255 255.255.255.255 65535 65535\\r\\n\\0\\21ClickHouse client\\24\\r\\253\\251\\3\\0\\7default\\0\\4\\1\\0\\1\\0\\0\\t0.0.0.0:0\\1\\6hacker\\16hacker-desktop\\15Hacker client\\24\\r\\253\\251\\3\\0\\1\\0\\0\\0\\2\\1\\25SELECT 'Hello, world'\\2\\0\\247\\203\\254l\\325\\\\z|\\265\\254F\\275\\333\\206\\342\\24\\202\\24\\0\\0\\0\\n\\0\\0\\0\\240\\1\\0\\2\\377\\377\\377\\377\\0\\0\\0\" | nc \"${CLICKHOUSE_HOST}\" \"${CLICKHOUSE_PORT_TCP_WITH_PROXY}\" | head -c250 | grep --text -o -F 'client_name does not match'\n+printf \"PROXY TCP4 255.255.255.255 255.255.255.255 65535 65535\\r\\n\\0\\21ClickHouse client\\24\\r\\253\\251\\3\\0\\7default\\0\\4\\1\\0\\1\\0\\0\\t0.0.0.0:0\\1\\6hacker\\16hacker-desktop\\21ClickHouse client\\20\\r\\253\\251\\3\\0\\1\\0\\0\\0\\2\\1\\25SELECT 'Hello, world'\\2\\0\\247\\203\\254l\\325\\\\z|\\265\\254F\\275\\333\\206\\342\\24\\202\\24\\0\\0\\0\\n\\0\\0\\0\\240\\1\\0\\2\\377\\377\\377\\377\\0\\0\\0\" | nc \"${CLICKHOUSE_HOST}\" \"${CLICKHOUSE_PORT_TCP_WITH_PROXY}\" | head -c250 | grep --text -o -F 'version does not match'\n",
  "problem_statement": "Validate client_info in query message in TCP handler \n**Describe the unexpected behavior.**\r\nDuring a TCP session, the client authenticates as `Alice`, \u00a0with interface 'TCP' (set in `TCPHandler::makeSession()`) on the server side.\r\n\r\nAfter session setup, the client sends `Protocol::Client::Query` packet, the TCP handler accepts it, and then **reads client_info**.\r\n\r\n```cpp\r\n\u00a0 \u00a0 ClientInfo client_info = session->getClientInfo();\u00a0\r\n\u00a0 \u00a0 if (client_tcp_protocol_version >= DBMS_MIN_REVISION_WITH_CLIENT_INFO)\r\n\u00a0 \u00a0 \u00a0 \u00a0 client_info.read(*in, client_tcp_protocol_version);\u00a0\r\n```\r\n\r\nThis `client_info` is not validated and can differ from session->getClientInfo(). This client info can contain different interface, hostname, client_name and several other parameters.\r\n\r\n**How to reproduce**\r\nConnect to the ClickHouse server using the TCP protocol and authenticate.\r\nSend a query packet with different ClientInfo\r\n\r\n**Expected behavior**\r\nThe TCP handler verifies `ClientInfo` from the client if a session is started. `ClientInfo` must match. If it does not match, send an error to the client.\r\n\n",
  "hints_text": "",
  "created_at": "2023-08-22T06:48:56Z"
}