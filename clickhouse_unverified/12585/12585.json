{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 12585,
  "instance_id": "ClickHouse__ClickHouse-12585",
  "issue_numbers": [
    "7323"
  ],
  "base_commit": "b8cc2bee53f5513ebbcbe586e2fdf8d45fbdcb18",
  "patch": "diff --git a/src/DataTypes/NumberTraits.h b/src/DataTypes/NumberTraits.h\nindex 63edafa6810a..4d1551bfa2e5 100644\n--- a/src/DataTypes/NumberTraits.h\n+++ b/src/DataTypes/NumberTraits.h\n@@ -100,10 +100,12 @@ template <typename A, typename B> struct ResultOfIntegerDivision\n     */\n template <typename A, typename B> struct ResultOfModulo\n {\n-    using Type = typename Construct<\n-        is_signed_v<A> || is_signed_v<B>,\n-        false,\n-        sizeof(B)>::Type;\n+    using Type = std::conditional_t<std::is_floating_point_v<A> || std::is_floating_point_v<B>,\n+        Float64,\n+        typename Construct<\n+            is_signed_v<A> || is_signed_v<B>,\n+            false,\n+            sizeof(B)>::Type>;\n };\n \n template <typename A> struct ResultOfNegate\ndiff --git a/src/Functions/DivisionUtils.h b/src/Functions/DivisionUtils.h\nindex cab947b92a2e..25fd62b1b322 100644\n--- a/src/Functions/DivisionUtils.h\n+++ b/src/Functions/DivisionUtils.h\n@@ -1,5 +1,6 @@\n #pragma once\n \n+#include <cmath>\n #include <type_traits>\n #include <Common/Exception.h>\n #include <DataTypes/NumberTraits.h>\n@@ -86,8 +87,16 @@ struct ModuloImpl\n     template <typename Result = ResultType>\n     static inline Result apply(A a, B b)\n     {\n-        throwIfDivisionLeadsToFPE(typename NumberTraits::ToInteger<A>::Type(a), typename NumberTraits::ToInteger<B>::Type(b));\n-        return typename NumberTraits::ToInteger<A>::Type(a) % typename NumberTraits::ToInteger<B>::Type(b);\n+        if constexpr (std::is_floating_point_v<ResultType>)\n+        {\n+            /// This computation is similar to `fmod` but the latter is not inlined and has 40 times worse performance.\n+            return ResultType(a) - trunc(ResultType(a) / ResultType(b)) * ResultType(b);\n+        }\n+        else\n+        {\n+            throwIfDivisionLeadsToFPE(typename NumberTraits::ToInteger<A>::Type(a), typename NumberTraits::ToInteger<B>::Type(b));\n+            return typename NumberTraits::ToInteger<A>::Type(a) % typename NumberTraits::ToInteger<B>::Type(b);\n+        }\n     }\n \n #if USE_EMBEDDED_COMPILER\ndiff --git a/src/Functions/FunctionBinaryArithmetic.h b/src/Functions/FunctionBinaryArithmetic.h\nindex dbead7bff01e..fc45807050b3 100644\n--- a/src/Functions/FunctionBinaryArithmetic.h\n+++ b/src/Functions/FunctionBinaryArithmetic.h\n@@ -506,10 +506,11 @@ struct BinaryOperationTraits\n         /// greatest(Date, Date) -> Date\n         Case<std::is_same_v<LeftDataType, RightDataType> && (std::is_same_v<Op, LeastBaseImpl<T0, T1>> || std::is_same_v<Op, GreatestBaseImpl<T0, T1>>),\n             LeftDataType>,\n-        /// Date % Int32 -> int32\n+        /// Date % Int32 -> Int32\n+        /// Date % Float -> Float64\n         Case<std::is_same_v<Op, ModuloImpl<T0, T1>>, Switch<\n             Case<IsDateOrDateTime<LeftDataType> && IsIntegral<RightDataType>, RightDataType>,\n-            Case<IsDateOrDateTime<LeftDataType> && IsFloatingPoint<RightDataType>, DataTypeInt32>>>>;\n+            Case<IsDateOrDateTime<LeftDataType> && IsFloatingPoint<RightDataType>, DataTypeFloat64>>>>;\n };\n \n \ndiff --git a/src/Functions/modulo.cpp b/src/Functions/modulo.cpp\nindex c90a590da617..68cdceed6eab 100644\n--- a/src/Functions/modulo.cpp\n+++ b/src/Functions/modulo.cpp\n@@ -102,6 +102,7 @@ using FunctionModulo = FunctionBinaryArithmetic<ModuloImpl, NameModulo, false>;\n void registerFunctionModulo(FunctionFactory & factory)\n {\n     factory.registerFunction<FunctionModulo>();\n+    factory.registerAlias(\"mod\", \"modulo\", FunctionFactory::CaseInsensitive);\n }\n \n }\ndiff --git a/src/Functions/moduloOrZero.cpp b/src/Functions/moduloOrZero.cpp\nindex 22ef069defdf..457c67c9e932 100644\n--- a/src/Functions/moduloOrZero.cpp\n+++ b/src/Functions/moduloOrZero.cpp\n@@ -14,10 +14,18 @@ struct ModuloOrZeroImpl\n     template <typename Result = ResultType>\n     static inline Result apply(A a, B b)\n     {\n-        if (unlikely(divisionLeadsToFPE(a, b)))\n-            return 0;\n-\n-        return ModuloImpl<A, B>::template apply<Result>(a, b);\n+        if constexpr (std::is_floating_point_v<ResultType>)\n+        {\n+            /// This computation is similar to `fmod` but the latter is not inlined and has 40 times worse performance.\n+            return ResultType(a) - trunc(ResultType(a) / ResultType(b)) * ResultType(b);\n+        }\n+        else\n+        {\n+            if (unlikely(divisionLeadsToFPE(a, b)))\n+                return 0;\n+\n+            return ModuloImpl<A, B>::template apply<Result>(a, b);\n+        }\n     }\n \n #if USE_EMBEDDED_COMPILER\n",
  "test_patch": "diff --git a/tests/performance/float_mod.xml b/tests/performance/float_mod.xml\nnew file mode 100644\nindex 000000000000..448a5faaa5c7\n--- /dev/null\n+++ b/tests/performance/float_mod.xml\n@@ -0,0 +1,3 @@\n+<test>\n+    <query>SELECT count() FROM numbers(100000000) WHERE NOT ignore(number % 1.1)</query>\n+</test>\ndiff --git a/tests/queries/0_stateless/01412_mod_float.reference b/tests/queries/0_stateless/01412_mod_float.reference\nnew file mode 100644\nindex 000000000000..77e3431f7a97\n--- /dev/null\n+++ b/tests/queries/0_stateless/01412_mod_float.reference\n@@ -0,0 +1,3 @@\n+1\t-1\t1\t-1\n+0.125\t-0.125\t0.125\t-0.125\n+1\t-1\t1\t-1\ndiff --git a/tests/queries/0_stateless/01412_mod_float.sql b/tests/queries/0_stateless/01412_mod_float.sql\nnew file mode 100644\nindex 000000000000..147cb88ff240\n--- /dev/null\n+++ b/tests/queries/0_stateless/01412_mod_float.sql\n@@ -0,0 +1,3 @@\n+WITH 8.5 AS a, 2.5 AS b SELECT a % b, -a % b, a % -b, -a % -b;\n+WITH 10.125 AS a, 2.5 AS b SELECT a % b, -a % b, a % -b, -a % -b;\n+WITH 8.5 AS a, 2.5 AS b SELECT mod(a, b), MOD(-a, b), modulo(a, -b), moduloOrZero(-a, -b);\n",
  "problem_statement": "The mod() function only supports integers.\nThe function `mod(8.5,2.5)` is valid in most databases. It does not work as expected in ClickHouse. In ClickHouse the arguments are truncated to integers.\n",
  "hints_text": "",
  "created_at": "2020-07-20T01:06:24Z"
}