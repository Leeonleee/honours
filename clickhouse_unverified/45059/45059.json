{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 45059,
  "instance_id": "ClickHouse__ClickHouse-45059",
  "issue_numbers": [
    "44577"
  ],
  "base_commit": "119501f1d9e33653e2cd5de6c82ed8a54f860581",
  "patch": "diff --git a/src/Analyzer/Passes/QueryAnalysisPass.cpp b/src/Analyzer/Passes/QueryAnalysisPass.cpp\nindex 8d923d2a69d7..ee37180a4e7f 100644\n--- a/src/Analyzer/Passes/QueryAnalysisPass.cpp\n+++ b/src/Analyzer/Passes/QueryAnalysisPass.cpp\n@@ -5503,9 +5503,15 @@ void QueryAnalyzer::resolveQueryJoinTreeNode(QueryTreeNodePtr & join_tree_node,\n \n             std::unordered_set<String> array_join_column_names;\n \n-            /// Wrap array join expressions into column nodes, where array join expression is inner expression.\n+            /// Wrap array join expressions into column nodes, where array join expression is inner expression\n \n-            for (auto & array_join_expression : array_join_node.getJoinExpressions().getNodes())\n+            auto & array_join_nodes = array_join_node.getJoinExpressions().getNodes();\n+            size_t array_join_nodes_size = array_join_nodes.size();\n+\n+            std::vector<QueryTreeNodePtr> array_join_column_expressions;\n+            array_join_column_expressions.reserve(array_join_nodes_size);\n+\n+            for (auto & array_join_expression : array_join_nodes)\n             {\n                 auto array_join_expression_alias = array_join_expression->getAlias();\n                 if (!array_join_expression_alias.empty() && scope.alias_name_to_expression_node.contains(array_join_expression_alias))\n@@ -5556,12 +5562,26 @@ void QueryAnalyzer::resolveQueryJoinTreeNode(QueryTreeNodePtr & join_tree_node,\n                 array_join_column_names.emplace(array_join_column_name);\n \n                 auto array_join_column = std::make_shared<ColumnNode>(NameAndTypePair{array_join_column_name, result_type}, array_join_expression, join_tree_node);\n-                array_join_expression = std::move(array_join_column);\n-                array_join_expression->setAlias(array_join_expression_alias);\n+                array_join_column->setAlias(array_join_expression_alias);\n+                array_join_column_expressions.push_back(std::move(array_join_column));\n+            }\n \n-                auto it = scope.alias_name_to_expression_node.find(array_join_expression_alias);\n+            /** Allow to resolve ARRAY JOIN columns from aliases with types after ARRAY JOIN only after ARRAY JOIN expression list is resolved, because\n+              * during resolution of ARRAY JOIN expression list we must use column type before ARRAY JOIN.\n+              *\n+              * Example: SELECT id, value_element FROM test_table ARRAY JOIN [[1,2,3]] AS value_element, value_element AS value\n+              * It is expected that `value_element AS value` expression inside ARRAY JOIN expression list will be\n+              * resolved as `value_element` expression with type before ARRAY JOIN.\n+              * And it is expected that `value_element` inside projection expression list will be resolved as `value_element` expression\n+              * with type after ARRAY JOIN.\n+              */\n+            for (size_t i = 0; i < array_join_nodes_size; ++i)\n+            {\n+                auto & array_join_expression = array_join_nodes[i];\n+                array_join_expression = std::move(array_join_column_expressions[i]);\n+                auto it = scope.alias_name_to_expression_node.find(array_join_expression->getAlias());\n                 if (it != scope.alias_name_to_expression_node.end())\n-                    it->second = array_join_expression;\n+                    it->second = array_join_nodes[i];\n             }\n \n             break;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02521_analyzer_array_join_crash.reference b/tests/queries/0_stateless/02521_analyzer_array_join_crash.reference\nnew file mode 100644\nindex 000000000000..59da8ccad1a7\n--- /dev/null\n+++ b/tests/queries/0_stateless/02521_analyzer_array_join_crash.reference\n@@ -0,0 +1,11 @@\n+-- { echoOn }\n+\n+SELECT id, value_element, value FROM test_table ARRAY JOIN [[1,2,3]] AS value_element, value_element AS value;\n+0\t[1,2,3]\t[1,2,3]\n+SELECT id, value_element, value FROM test_table ARRAY JOIN [[1,2,3]] AS value_element ARRAY JOIN value_element AS value;\n+0\t[1,2,3]\t1\n+0\t[1,2,3]\t2\n+0\t[1,2,3]\t3\n+SELECT value_element, value FROM test_table ARRAY JOIN [1048577] AS value_element, arrayMap(x -> value_element, ['']) AS value;\n+1048577\t[1048577]\n+SELECT arrayFilter(x -> notEmpty(concat(x)), [NULL, NULL]) FROM system.one ARRAY JOIN [1048577] AS elem, arrayMap(x -> concat(x, elem, ''), ['']) AS unused; -- { serverError 44 }\ndiff --git a/tests/queries/0_stateless/02521_analyzer_array_join_crash.sql b/tests/queries/0_stateless/02521_analyzer_array_join_crash.sql\nnew file mode 100644\nindex 000000000000..c7641a3bee04\n--- /dev/null\n+++ b/tests/queries/0_stateless/02521_analyzer_array_join_crash.sql\n@@ -0,0 +1,24 @@\n+SET allow_experimental_analyzer = 1;\n+\n+DROP TABLE IF EXISTS test_table;\n+CREATE TABLE test_table\n+(\n+    id UInt64,\n+    value String\n+) ENGINE = MergeTree ORDER BY id;\n+\n+INSERT INTO test_table VALUES (0, 'Value');\n+\n+-- { echoOn }\n+\n+SELECT id, value_element, value FROM test_table ARRAY JOIN [[1,2,3]] AS value_element, value_element AS value;\n+\n+SELECT id, value_element, value FROM test_table ARRAY JOIN [[1,2,3]] AS value_element ARRAY JOIN value_element AS value;\n+\n+SELECT value_element, value FROM test_table ARRAY JOIN [1048577] AS value_element, arrayMap(x -> value_element, ['']) AS value;\n+\n+SELECT arrayFilter(x -> notEmpty(concat(x)), [NULL, NULL]) FROM system.one ARRAY JOIN [1048577] AS elem, arrayMap(x -> concat(x, elem, ''), ['']) AS unused; -- { serverError 44 }\n+\n+-- { echoOff }\n+\n+DROP TABLE test_table;\n",
  "problem_statement": "(with new Analyzer) logical error when using ARRAY JOIN\n**Describe the bug**\r\n```\r\nmilovidov-desktop :) SET allow_experimental_analyzer = 1\r\n\r\nSET allow_experimental_analyzer = 1\r\n\r\nQuery id: b4494b8c-9f14-4d46-8db9-2cb992dcfcb6\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.001 sec. \r\n\r\nmilovidov-desktop :) SELECT arrayFilter(x -> notEmpty(concat(x)), [NULL, NULL]) FROM system.one ARRAY JOIN [1048577] AS elem, arrayMap(x -> concat(x, elem, ''), ['']) AS unused\r\n\r\nSELECT arrayFilter(x -> notEmpty(concat(x)), [NULL, NULL])\r\nFROM system.one\r\nARRAY JOIN\r\n    [1048577] AS elem,\r\n    arrayMap(x -> concat(x, elem, ''), ['']) AS unused\r\n\r\nQuery id: ca118c75-812b-4c83-bd30-1af64ed38635\r\n\r\n\r\n0 rows in set. Elapsed: 0.003 sec. \r\n\r\nReceived exception from server (version 22.13.1):\r\nCode: 49. DB::Exception: Received from localhost:9000. DB::Exception: Cannot capture column 3 because it has incompatible type: got Array(UInt32), but UInt32 is expected.. (LOGICAL_ERROR)\r\n```\n",
  "hints_text": "",
  "created_at": "2023-01-09T12:16:52Z"
}