diff --git a/src/Columns/ColumnLowCardinality.h b/src/Columns/ColumnLowCardinality.h
index 92bf7ff0f95e..fc607021ccfe 100644
--- a/src/Columns/ColumnLowCardinality.h
+++ b/src/Columns/ColumnLowCardinality.h
@@ -187,6 +187,7 @@ class ColumnLowCardinality final : public COWHelper<IColumn, ColumnLowCardinalit
      * So LC(Nullable(T)) would return true, LC(U) -- false.
      */
     bool nestedIsNullable() const { return isColumnNullable(*dictionary.getColumnUnique().getNestedColumn()); }
+    void nestedToNullable() { dictionary.getColumnUnique().nestedToNullable(); }
 
     const IColumnUnique & getDictionary() const { return dictionary.getColumnUnique(); }
     const ColumnPtr & getDictionaryPtr() const { return dictionary.getColumnUniquePtr(); }
diff --git a/src/Columns/ColumnUnique.h b/src/Columns/ColumnUnique.h
index 652487c2b090..820833391077 100644
--- a/src/Columns/ColumnUnique.h
+++ b/src/Columns/ColumnUnique.h
@@ -50,6 +50,7 @@ class ColumnUnique final : public COWHelper<IColumnUnique, ColumnUnique<ColumnTy
     const ColumnPtr & getNestedColumn() const override;
     const ColumnPtr & getNestedNotNullableColumn() const override { return column_holder; }
     bool nestedColumnIsNullable() const override { return is_nullable; }
+    void nestedToNullable() override;
 
     size_t uniqueInsert(const Field & x) override;
     size_t uniqueInsertFrom(const IColumn & src, size_t n) override;
@@ -263,6 +264,13 @@ void ColumnUnique<ColumnType>::updateNullMask()
     }
 }
 
+template <typename ColumnType>
+void ColumnUnique<ColumnType>::nestedToNullable()
+{
+    is_nullable = true;
+    createNullMask();
+}
+
 template <typename ColumnType>
 const ColumnPtr & ColumnUnique<ColumnType>::getNestedColumn() const
 {
diff --git a/src/Columns/IColumnUnique.h b/src/Columns/IColumnUnique.h
index 5558f493b925..731445e2b80b 100644
--- a/src/Columns/IColumnUnique.h
+++ b/src/Columns/IColumnUnique.h
@@ -24,6 +24,7 @@ class IColumnUnique : public IColumn
     virtual const ColumnPtr & getNestedNotNullableColumn() const = 0;
 
     virtual bool nestedColumnIsNullable() const = 0;
+    virtual void nestedToNullable() = 0;
 
     /// Returns array with StringRefHash calculated for each row of getNestedNotNullableColumn() column.
     /// Returns nullptr if nested column doesn't contain strings. Otherwise calculates hash (if it wasn't).
diff --git a/src/Interpreters/TableJoin.cpp b/src/Interpreters/TableJoin.cpp
index c50c61c418c4..f547e011a737 100644
--- a/src/Interpreters/TableJoin.cpp
+++ b/src/Interpreters/TableJoin.cpp
@@ -214,12 +214,12 @@ Block TableJoin::getRequiredRightKeys(const Block & right_table_keys, std::vecto
 
 bool TableJoin::leftBecomeNullable(const DataTypePtr & column_type) const
 {
-    return forceNullableLeft() && column_type->canBeInsideNullable();
+    return forceNullableLeft() && JoinCommon::canBecomeNullable(column_type);
 }
 
 bool TableJoin::rightBecomeNullable(const DataTypePtr & column_type) const
 {
-    return forceNullableRight() && column_type->canBeInsideNullable();
+    return forceNullableRight() && JoinCommon::canBecomeNullable(column_type);
 }
 
 void TableJoin::addJoinedColumn(const NameAndTypePair & joined_column)
@@ -233,7 +233,7 @@ void TableJoin::addJoinedColumn(const NameAndTypePair & joined_column)
     }
 
     if (rightBecomeNullable(type))
-        type = makeNullable(type);
+        type = JoinCommon::convertTypeToNullable(type);
 
     columns_added_by_join.emplace_back(joined_column.name, type);
 }
@@ -265,7 +265,7 @@ void TableJoin::addJoinedColumnsAndCorrectTypes(ColumnsWithTypeAndName & columns
             /// No need to nullify constants
             bool is_column_const = col.column && isColumnConst(*col.column);
             if (!is_column_const)
-                col.type = makeNullable(col.type);
+                col.type = JoinCommon::convertTypeToNullable(col.type);
         }
     }
 
diff --git a/src/Interpreters/join_common.cpp b/src/Interpreters/join_common.cpp
index 03fa7cdd0eff..cc51848b4a44 100644
--- a/src/Interpreters/join_common.cpp
+++ b/src/Interpreters/join_common.cpp
@@ -49,20 +49,53 @@ ColumnPtr changeLowCardinality(const ColumnPtr & column, const ColumnPtr & dst_s
 namespace JoinCommon
 {
 
-void convertColumnToNullable(ColumnWithTypeAndName & column, bool low_card_nullability)
+
+bool canBecomeNullable(const DataTypePtr & type)
+{
+    bool can_be_inside = type->canBeInsideNullable();
+    if (const auto * low_cardinality_type = typeid_cast<const DataTypeLowCardinality *>(type.get()))
+        can_be_inside |= low_cardinality_type->getDictionaryType()->canBeInsideNullable();
+    return can_be_inside;
+}
+
+/// Add nullability to type.
+/// Note: LowCardinality(T) transformed to LowCardinality(Nullable(T))
+DataTypePtr convertTypeToNullable(const DataTypePtr & type)
 {
-    if (low_card_nullability && column.type->lowCardinality())
+    if (const auto * low_cardinality_type = typeid_cast<const DataTypeLowCardinality *>(type.get()))
+    {
+        const auto & dict_type = low_cardinality_type->getDictionaryType();
+        if (dict_type->canBeInsideNullable())
+            return std::make_shared<DataTypeLowCardinality>(makeNullable(dict_type));
+    }
+    return makeNullable(type);
+}
+
+void convertColumnToNullable(ColumnWithTypeAndName & column, bool remove_low_card)
+{
+    if (remove_low_card && column.type->lowCardinality())
     {
         column.column = recursiveRemoveLowCardinality(column.column);
         column.type = recursiveRemoveLowCardinality(column.type);
     }
 
-    if (column.type->isNullable() || !column.type->canBeInsideNullable())
+    if (column.type->isNullable() || !canBecomeNullable(column.type))
         return;
 
-    column.type = makeNullable(column.type);
+    column.type = convertTypeToNullable(column.type);
+
     if (column.column)
-        column.column = makeNullable(column.column);
+    {
+        if (column.column->lowCardinality())
+        {
+            /// Convert nested to nullable, not LowCardinality itself
+            ColumnLowCardinality * col_as_lc = assert_cast<ColumnLowCardinality *>(column.column->assumeMutable().get());
+            if (!col_as_lc->nestedIsNullable())
+                col_as_lc->nestedToNullable();
+        }
+        else
+            column.column = makeNullable(column.column);
+    }
 }
 
 void convertColumnsToNullable(Block & block, size_t starting_pos)
diff --git a/src/Interpreters/join_common.h b/src/Interpreters/join_common.h
index cec414384484..9a000aa107af 100644
--- a/src/Interpreters/join_common.h
+++ b/src/Interpreters/join_common.h
@@ -15,8 +15,9 @@ using ColumnRawPtrs = std::vector<const IColumn *>;
 
 namespace JoinCommon
 {
-
-void convertColumnToNullable(ColumnWithTypeAndName & column, bool low_card_nullability = false);
+bool canBecomeNullable(const DataTypePtr & type);
+DataTypePtr convertTypeToNullable(const DataTypePtr & type);
+void convertColumnToNullable(ColumnWithTypeAndName & column, bool remove_low_card = false);
 void convertColumnsToNullable(Block & block, size_t starting_pos = 0);
 void removeColumnNullability(ColumnWithTypeAndName & column);
 void changeColumnRepresentation(const ColumnPtr & src_column, ColumnPtr & dst_column);
