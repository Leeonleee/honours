{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 23237,
  "instance_id": "ClickHouse__ClickHouse-23237",
  "issue_numbers": [
    "15101"
  ],
  "base_commit": "d3f4fb404a6da659ac2cf06e2d71fe05edf2db4b",
  "patch": "diff --git a/src/Columns/ColumnLowCardinality.h b/src/Columns/ColumnLowCardinality.h\nindex 92bf7ff0f95e..fc607021ccfe 100644\n--- a/src/Columns/ColumnLowCardinality.h\n+++ b/src/Columns/ColumnLowCardinality.h\n@@ -187,6 +187,7 @@ class ColumnLowCardinality final : public COWHelper<IColumn, ColumnLowCardinalit\n      * So LC(Nullable(T)) would return true, LC(U) -- false.\n      */\n     bool nestedIsNullable() const { return isColumnNullable(*dictionary.getColumnUnique().getNestedColumn()); }\n+    void nestedToNullable() { dictionary.getColumnUnique().nestedToNullable(); }\n \n     const IColumnUnique & getDictionary() const { return dictionary.getColumnUnique(); }\n     const ColumnPtr & getDictionaryPtr() const { return dictionary.getColumnUniquePtr(); }\ndiff --git a/src/Columns/ColumnUnique.h b/src/Columns/ColumnUnique.h\nindex 652487c2b090..820833391077 100644\n--- a/src/Columns/ColumnUnique.h\n+++ b/src/Columns/ColumnUnique.h\n@@ -50,6 +50,7 @@ class ColumnUnique final : public COWHelper<IColumnUnique, ColumnUnique<ColumnTy\n     const ColumnPtr & getNestedColumn() const override;\n     const ColumnPtr & getNestedNotNullableColumn() const override { return column_holder; }\n     bool nestedColumnIsNullable() const override { return is_nullable; }\n+    void nestedToNullable() override;\n \n     size_t uniqueInsert(const Field & x) override;\n     size_t uniqueInsertFrom(const IColumn & src, size_t n) override;\n@@ -263,6 +264,13 @@ void ColumnUnique<ColumnType>::updateNullMask()\n     }\n }\n \n+template <typename ColumnType>\n+void ColumnUnique<ColumnType>::nestedToNullable()\n+{\n+    is_nullable = true;\n+    createNullMask();\n+}\n+\n template <typename ColumnType>\n const ColumnPtr & ColumnUnique<ColumnType>::getNestedColumn() const\n {\ndiff --git a/src/Columns/IColumnUnique.h b/src/Columns/IColumnUnique.h\nindex 5558f493b925..731445e2b80b 100644\n--- a/src/Columns/IColumnUnique.h\n+++ b/src/Columns/IColumnUnique.h\n@@ -24,6 +24,7 @@ class IColumnUnique : public IColumn\n     virtual const ColumnPtr & getNestedNotNullableColumn() const = 0;\n \n     virtual bool nestedColumnIsNullable() const = 0;\n+    virtual void nestedToNullable() = 0;\n \n     /// Returns array with StringRefHash calculated for each row of getNestedNotNullableColumn() column.\n     /// Returns nullptr if nested column doesn't contain strings. Otherwise calculates hash (if it wasn't).\ndiff --git a/src/Interpreters/TableJoin.cpp b/src/Interpreters/TableJoin.cpp\nindex c50c61c418c4..f547e011a737 100644\n--- a/src/Interpreters/TableJoin.cpp\n+++ b/src/Interpreters/TableJoin.cpp\n@@ -214,12 +214,12 @@ Block TableJoin::getRequiredRightKeys(const Block & right_table_keys, std::vecto\n \n bool TableJoin::leftBecomeNullable(const DataTypePtr & column_type) const\n {\n-    return forceNullableLeft() && column_type->canBeInsideNullable();\n+    return forceNullableLeft() && JoinCommon::canBecomeNullable(column_type);\n }\n \n bool TableJoin::rightBecomeNullable(const DataTypePtr & column_type) const\n {\n-    return forceNullableRight() && column_type->canBeInsideNullable();\n+    return forceNullableRight() && JoinCommon::canBecomeNullable(column_type);\n }\n \n void TableJoin::addJoinedColumn(const NameAndTypePair & joined_column)\n@@ -233,7 +233,7 @@ void TableJoin::addJoinedColumn(const NameAndTypePair & joined_column)\n     }\n \n     if (rightBecomeNullable(type))\n-        type = makeNullable(type);\n+        type = JoinCommon::convertTypeToNullable(type);\n \n     columns_added_by_join.emplace_back(joined_column.name, type);\n }\n@@ -265,7 +265,7 @@ void TableJoin::addJoinedColumnsAndCorrectTypes(ColumnsWithTypeAndName & columns\n             /// No need to nullify constants\n             bool is_column_const = col.column && isColumnConst(*col.column);\n             if (!is_column_const)\n-                col.type = makeNullable(col.type);\n+                col.type = JoinCommon::convertTypeToNullable(col.type);\n         }\n     }\n \ndiff --git a/src/Interpreters/join_common.cpp b/src/Interpreters/join_common.cpp\nindex 03fa7cdd0eff..cc51848b4a44 100644\n--- a/src/Interpreters/join_common.cpp\n+++ b/src/Interpreters/join_common.cpp\n@@ -49,20 +49,53 @@ ColumnPtr changeLowCardinality(const ColumnPtr & column, const ColumnPtr & dst_s\n namespace JoinCommon\n {\n \n-void convertColumnToNullable(ColumnWithTypeAndName & column, bool low_card_nullability)\n+\n+bool canBecomeNullable(const DataTypePtr & type)\n+{\n+    bool can_be_inside = type->canBeInsideNullable();\n+    if (const auto * low_cardinality_type = typeid_cast<const DataTypeLowCardinality *>(type.get()))\n+        can_be_inside |= low_cardinality_type->getDictionaryType()->canBeInsideNullable();\n+    return can_be_inside;\n+}\n+\n+/// Add nullability to type.\n+/// Note: LowCardinality(T) transformed to LowCardinality(Nullable(T))\n+DataTypePtr convertTypeToNullable(const DataTypePtr & type)\n {\n-    if (low_card_nullability && column.type->lowCardinality())\n+    if (const auto * low_cardinality_type = typeid_cast<const DataTypeLowCardinality *>(type.get()))\n+    {\n+        const auto & dict_type = low_cardinality_type->getDictionaryType();\n+        if (dict_type->canBeInsideNullable())\n+            return std::make_shared<DataTypeLowCardinality>(makeNullable(dict_type));\n+    }\n+    return makeNullable(type);\n+}\n+\n+void convertColumnToNullable(ColumnWithTypeAndName & column, bool remove_low_card)\n+{\n+    if (remove_low_card && column.type->lowCardinality())\n     {\n         column.column = recursiveRemoveLowCardinality(column.column);\n         column.type = recursiveRemoveLowCardinality(column.type);\n     }\n \n-    if (column.type->isNullable() || !column.type->canBeInsideNullable())\n+    if (column.type->isNullable() || !canBecomeNullable(column.type))\n         return;\n \n-    column.type = makeNullable(column.type);\n+    column.type = convertTypeToNullable(column.type);\n+\n     if (column.column)\n-        column.column = makeNullable(column.column);\n+    {\n+        if (column.column->lowCardinality())\n+        {\n+            /// Convert nested to nullable, not LowCardinality itself\n+            ColumnLowCardinality * col_as_lc = assert_cast<ColumnLowCardinality *>(column.column->assumeMutable().get());\n+            if (!col_as_lc->nestedIsNullable())\n+                col_as_lc->nestedToNullable();\n+        }\n+        else\n+            column.column = makeNullable(column.column);\n+    }\n }\n \n void convertColumnsToNullable(Block & block, size_t starting_pos)\ndiff --git a/src/Interpreters/join_common.h b/src/Interpreters/join_common.h\nindex cec414384484..9a000aa107af 100644\n--- a/src/Interpreters/join_common.h\n+++ b/src/Interpreters/join_common.h\n@@ -15,8 +15,9 @@ using ColumnRawPtrs = std::vector<const IColumn *>;\n \n namespace JoinCommon\n {\n-\n-void convertColumnToNullable(ColumnWithTypeAndName & column, bool low_card_nullability = false);\n+bool canBecomeNullable(const DataTypePtr & type);\n+DataTypePtr convertTypeToNullable(const DataTypePtr & type);\n+void convertColumnToNullable(ColumnWithTypeAndName & column, bool remove_low_card = false);\n void convertColumnsToNullable(Block & block, size_t starting_pos = 0);\n void removeColumnNullability(ColumnWithTypeAndName & column);\n void changeColumnRepresentation(const ColumnPtr & src_column, ColumnPtr & dst_column);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01049_join_low_card_bug.reference b/tests/queries/0_stateless/01049_join_low_card_bug.reference\nindex ece76c99662a..b4ed81766524 100644\n--- a/tests/queries/0_stateless/01049_join_low_card_bug.reference\n+++ b/tests/queries/0_stateless/01049_join_low_card_bug.reference\n@@ -38,22 +38,22 @@ str\tNullable(String)\n \\N\tstr\tNullable(String)\tLowCardinality(String)\n \\N\tstr\tNullable(String)\tLowCardinality(String)\n \\N\tstr\tNullable(String)\tLowCardinality(String)\n-\tLowCardinality(String)\n-str\tLowCardinality(String)\n-\tLowCardinality(String)\n-str\tLowCardinality(String)\n-\tstr\tLowCardinality(String)\n-\tstr\tLowCardinality(String)\n-\tstr\tLowCardinality(String)\n-\tstr\tLowCardinality(String)\n-\tLowCardinality(String)\n-str\tLowCardinality(String)\n-\tLowCardinality(String)\n-str\tLowCardinality(String)\n-\tstr\tLowCardinality(String)\n-\tstr\tLowCardinality(String)\n-\tstr\tLowCardinality(String)\n-\tstr\tLowCardinality(String)\n+\\N\tLowCardinality(Nullable(String))\n+str\tLowCardinality(Nullable(String))\n+\\N\tLowCardinality(Nullable(String))\n+str\tLowCardinality(Nullable(String))\n+\\N\tstr\tLowCardinality(Nullable(String))\n+\\N\tstr\tLowCardinality(Nullable(String))\n+\\N\tstr\tLowCardinality(Nullable(String))\n+\\N\tstr\tLowCardinality(Nullable(String))\n+\\N\tLowCardinality(Nullable(String))\n+str\tLowCardinality(Nullable(String))\n+\\N\tLowCardinality(Nullable(String))\n+str\tLowCardinality(Nullable(String))\n+\\N\tstr\tLowCardinality(Nullable(String))\n+\\N\tstr\tLowCardinality(Nullable(String))\n+\\N\tstr\tLowCardinality(Nullable(String))\n+\\N\tstr\tLowCardinality(Nullable(String))\n \\N\tNullable(String)\n str\tNullable(String)\n \\N\tNullable(String)\n@@ -62,14 +62,14 @@ str\tNullable(String)\n \\N\tstr\tNullable(String)\n \\N\tstr\tNullable(String)\n \\N\tstr\tNullable(String)\n-\tLowCardinality(String)\n-str\tLowCardinality(String)\n-\tLowCardinality(String)\n-str\tLowCardinality(String)\n-\tstr\tLowCardinality(String)\n-\tstr\tLowCardinality(String)\n-\tstr\tLowCardinality(String)\n-\tstr\tLowCardinality(String)\n+\\N\tLowCardinality(Nullable(String))\n+str\tLowCardinality(Nullable(String))\n+\\N\tLowCardinality(Nullable(String))\n+str\tLowCardinality(Nullable(String))\n+\\N\tstr\tLowCardinality(Nullable(String))\n+\\N\tstr\tLowCardinality(Nullable(String))\n+\\N\tstr\tLowCardinality(Nullable(String))\n+\\N\tstr\tLowCardinality(Nullable(String))\n \\N\tNullable(String)\n str\tNullable(String)\n \\N\tNullable(String)\ndiff --git a/tests/queries/0_stateless/01049_join_low_card_bug.sql b/tests/queries/0_stateless/01049_join_low_card_bug.sql\nindex dee7f5923aa1..07558770abf6 100644\n--- a/tests/queries/0_stateless/01049_join_low_card_bug.sql\n+++ b/tests/queries/0_stateless/01049_join_low_card_bug.sql\n@@ -76,7 +76,6 @@ SELECT l.lc, r.lc, toTypeName(l.lc), toTypeName(materialize(r.lc)) FROM nl AS l\n SELECT l.lc, r.lc, toTypeName(l.lc), toTypeName(materialize(r.lc)) FROM nl AS l FULL JOIN r_lc AS r USING (x);\n SELECT l.lc, r.lc, toTypeName(l.lc), toTypeName(materialize(r.lc)) FROM nl AS l FULL JOIN r_lc AS r USING (lc);\n \n--- TODO: LC nullability\n SET join_use_nulls = 1;\n \n SELECT lc, toTypeName(lc) FROM l_lc AS l RIGHT JOIN r_lc AS r USING (x);\ndiff --git a/tests/queries/0_stateless/01142_join_lc_and_nullable_in_key.reference b/tests/queries/0_stateless/01142_join_lc_and_nullable_in_key.reference\nindex d1b29b46df69..c6bdcb773b23 100644\n--- a/tests/queries/0_stateless/01142_join_lc_and_nullable_in_key.reference\n+++ b/tests/queries/0_stateless/01142_join_lc_and_nullable_in_key.reference\n@@ -14,16 +14,16 @@\n 1\tl\t\\N\tNullable(String)\n -\n 1\tl\t\\N\tNullable(String)\n-2\t\t\\N\tNullable(String)\n+2\t\\N\t\\N\tNullable(String)\n 1\tl\t\\N\tNullable(String)\n-2\t\t\\N\tNullable(String)\n+2\t\\N\t\\N\tNullable(String)\n -\n 1\tl\t\\N\tNullable(String)\n-\\N\t\t\\N\tNullable(String)\n+\\N\t\\N\t\\N\tNullable(String)\n 1\tl\t\\N\tNullable(String)\n-\\N\t\t\\N\tNullable(String)\n+\\N\t\\N\t\\N\tNullable(String)\n -\n 1\tl\t\\N\tNullable(String)\n-\\N\t\t\\N\tNullable(String)\n+\\N\t\\N\t\\N\tNullable(String)\n 1\tl\t\\N\tNullable(String)\n-\\N\t\t\\N\tNullable(String)\n+\\N\t\\N\t\\N\tNullable(String)\ndiff --git a/tests/queries/0_stateless/01142_merge_join_lc_and_nullable_in_key.reference b/tests/queries/0_stateless/01142_merge_join_lc_and_nullable_in_key.reference\nindex d1b29b46df69..c6bdcb773b23 100644\n--- a/tests/queries/0_stateless/01142_merge_join_lc_and_nullable_in_key.reference\n+++ b/tests/queries/0_stateless/01142_merge_join_lc_and_nullable_in_key.reference\n@@ -14,16 +14,16 @@\n 1\tl\t\\N\tNullable(String)\n -\n 1\tl\t\\N\tNullable(String)\n-2\t\t\\N\tNullable(String)\n+2\t\\N\t\\N\tNullable(String)\n 1\tl\t\\N\tNullable(String)\n-2\t\t\\N\tNullable(String)\n+2\t\\N\t\\N\tNullable(String)\n -\n 1\tl\t\\N\tNullable(String)\n-\\N\t\t\\N\tNullable(String)\n+\\N\t\\N\t\\N\tNullable(String)\n 1\tl\t\\N\tNullable(String)\n-\\N\t\t\\N\tNullable(String)\n+\\N\t\\N\t\\N\tNullable(String)\n -\n 1\tl\t\\N\tNullable(String)\n-\\N\t\t\\N\tNullable(String)\n+\\N\t\\N\t\\N\tNullable(String)\n 1\tl\t\\N\tNullable(String)\n-\\N\t\t\\N\tNullable(String)\n+\\N\t\\N\t\\N\tNullable(String)\ndiff --git a/tests/queries/0_stateless/01477_lc_in_merge_join_left_key.reference b/tests/queries/0_stateless/01477_lc_in_merge_join_left_key.reference\nindex 0612b4ca23ee..ac4d0a3d21ae 100644\n--- a/tests/queries/0_stateless/01477_lc_in_merge_join_left_key.reference\n+++ b/tests/queries/0_stateless/01477_lc_in_merge_join_left_key.reference\n@@ -19,17 +19,17 @@\n 1\t\\N\tl\tNullable(String)\tLowCardinality(String)\n -\n 1\tl\t\\N\tLowCardinality(String)\tNullable(String)\n-2\t\t\\N\tLowCardinality(String)\tNullable(String)\n-1\tl\t\\N\tLowCardinality(String)\tNullable(String)\n-2\t\t\\N\tLowCardinality(String)\tNullable(String)\n+2\t\\N\t\\N\tLowCardinality(Nullable(String))\tNullable(String)\n+1\tl\t\\N\tLowCardinality(Nullable(String))\tNullable(String)\n+2\t\\N\t\\N\tLowCardinality(Nullable(String))\tNullable(String)\n -\n-\\N\t\\N\t\tNullable(String)\tLowCardinality(String)\n+\\N\t\\N\t\\N\tNullable(String)\tLowCardinality(Nullable(String))\n 1\t\\N\tl\tNullable(String)\tLowCardinality(String)\n-1\t\\N\tl\tNullable(String)\tLowCardinality(String)\n-\\N\t\\N\t\tNullable(String)\tLowCardinality(String)\n+1\t\\N\tl\tNullable(String)\tLowCardinality(Nullable(String))\n+\\N\t\\N\t\\N\tNullable(String)\tLowCardinality(Nullable(String))\n -\n 1\tl\t\\N\tLowCardinality(String)\tNullable(String)\n-\\N\t\t\\N\tLowCardinality(String)\tNullable(String)\n-1\tl\t\\N\tLowCardinality(String)\tNullable(String)\n-\\N\t\t\\N\tLowCardinality(String)\tNullable(String)\n+\\N\t\\N\t\\N\tLowCardinality(Nullable(String))\tNullable(String)\n+1\tl\t\\N\tLowCardinality(Nullable(String))\tNullable(String)\n+\\N\t\\N\t\\N\tLowCardinality(Nullable(String))\tNullable(String)\n -\n",
  "problem_statement": "join_use_nulls on LowCardinality type does not work\n**Describe the bug**\r\nWhen I use the `set join_use_nulls = 1;` setting, LowCardinality columns still show up with the default `\"\"` value.\r\n\r\n**How to reproduce**\r\n* Which ClickHouse server version to use\r\n20.6.5.8\r\n\r\n* Queries to run that lead to unexpected result\r\n```sql\r\ncreate table left (\r\n    id integer\r\n) ENGINE = Memory();\r\n\r\ncreate table right (\r\n    id integer,\r\n    batch LowCardinality(String)\r\n) ENGINE = Memory();\r\n\r\ninsert into left (id) select * from system.numbers limit 10;\r\ninsert into right (id, batch) values (0, 'test'), (1, 'test'), (2, 'test');\r\n\r\nset join_use_nulls = 1;\r\nselect * from left left outer join right on left.id = right.id;\r\n```\r\n\r\nResults:\r\n```\r\n0\t0     test\r\n1\t1     test\r\n2\t2     test\r\n3\tnull  \"\"\r\n4\tnull  \"\"\r\n5\tnull  \"\"\r\n6\tnull  \"\"\r\n7\tnull  \"\"\r\n8\tnull  \"\"\r\n9\tnull  \"\"\r\n```\r\n\r\n**Expected behavior**\r\n```\r\n0\t0       test \r\n1\t1       test \r\n2\t2       test \r\n3\tnull\tnull \r\n4\tnull\tnull \r\n5\tnull\tnull \r\n6\tnull\tnull \r\n7\tnull\tnull \r\n8\tnull\tnull \r\n9\tnull\tnull \r\n```\n",
  "hints_text": "WA:\r\n\r\n```\r\nSELECT *\r\nFROM left\r\nLEFT JOIN\r\n(\r\n    SELECT\r\n        id,\r\n        cast(batch, 'LowCardinality(Nullable(String))')\r\n    FROM right\r\n) AS right ON left.id = right.id\r\n\r\n\u250c\u2500id\u2500\u252c\u2500right.id\u2500\u252c\u2500cast(batch, 'LowCardinality(Nullable(String))')\u2500\u2510\r\n\u2502  0 \u2502        0 \u2502 test                                            \u2502\r\n\u2502  1 \u2502        1 \u2502 test                                            \u2502\r\n\u2502  2 \u2502        2 \u2502 test                                            \u2502\r\n\u2502  3 \u2502     \u1d3a\u1d41\u1d38\u1d38 \u2502 \u1d3a\u1d41\u1d38\u1d38                                            \u2502\r\n\u2502  4 \u2502     \u1d3a\u1d41\u1d38\u1d38 \u2502 \u1d3a\u1d41\u1d38\u1d38                                            \u2502\r\n\u2502  5 \u2502     \u1d3a\u1d41\u1d38\u1d38 \u2502 \u1d3a\u1d41\u1d38\u1d38                                            \u2502\r\n\u2502  6 \u2502     \u1d3a\u1d41\u1d38\u1d38 \u2502 \u1d3a\u1d41\u1d38\u1d38                                            \u2502\r\n\u2502  7 \u2502     \u1d3a\u1d41\u1d38\u1d38 \u2502 \u1d3a\u1d41\u1d38\u1d38                                            \u2502\r\n\u2502  8 \u2502     \u1d3a\u1d41\u1d38\u1d38 \u2502 \u1d3a\u1d41\u1d38\u1d38                                            \u2502\r\n\u2502  9 \u2502     \u1d3a\u1d41\u1d38\u1d38 \u2502 \u1d3a\u1d41\u1d38\u1d38                                            \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n```\nSome of types are not allowed inside Nullable yet. LC - one of them. There's also tuples and arrays. You may check it with\r\n```\r\nSELECT toTypeName(toNullable(something))\r\n```\r\nFor LC it returns\r\n```\r\nSELECT toTypeName(toNullable(toLowCardinality('c')))\r\n\r\n\u250c\u2500toTypeName(toNullable(toLowCardinality('c')))\u2500\u2510\r\n\u2502 LowCardinality(Nullable(String))              \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\nUnfortunately it's not the same as `Nullable(LowCardianlity(String))` which is not supported. So JOIN cannot change it's nullability the same way as all other types.\n@4ertus2 but LowCardinality of Nullable is Ok.\nWorks perfectly on version 20.13-testing.\r\nI will add a test.\n@KochetovNicolai It does not work.\n@KochetovNicolai it still does not work.",
  "created_at": "2021-04-17T19:05:03Z"
}