{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 61249,
  "instance_id": "ClickHouse__ClickHouse-61249",
  "issue_numbers": [
    "60214"
  ],
  "base_commit": "19b1a675a1aeaeed193853ee51061fe666cce1ab",
  "patch": "diff --git a/src/Functions/array/arrayIndex.h b/src/Functions/array/arrayIndex.h\nindex 3b19f0b486ac..cd537763b4a3 100644\n--- a/src/Functions/array/arrayIndex.h\n+++ b/src/Functions/array/arrayIndex.h\n@@ -1007,8 +1007,13 @@ class FunctionArrayIndex : public IFunction\n                         if (!(*null_map)[row])\n                             continue;\n                     }\n-                    else if (!applyVisitor(FieldVisitorAccurateEquals(), arr[i], value))\n-                        continue;\n+                    else\n+                    {\n+                        if (null_map && (*null_map)[row])\n+                            continue;\n+                        if (!applyVisitor(FieldVisitorAccurateEquals(), arr[i], value))\n+                            continue;\n+                    }\n \n                     ConcreteAction::apply(data[row], i);\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00662_has_nullable.reference b/tests/queries/0_stateless/00662_has_nullable.reference\nnew file mode 100644\nindex 000000000000..1ac93f25a392\n--- /dev/null\n+++ b/tests/queries/0_stateless/00662_has_nullable.reference\n@@ -0,0 +1,14 @@\n+Nullable(UInt64), non-null array\n+1\t1\n+\\N\t0\n+Non-nullable UInt64, nullable array\n+0\t0\n+1\t1\n+2\t1\n+Nullable(UInt64), nullable array\n+0\t0\n+\\N\t1\n+1\t1\n+All NULLs\n+0\t0\n+\\N\t1\ndiff --git a/tests/queries/0_stateless/00662_has_nullable.sql b/tests/queries/0_stateless/00662_has_nullable.sql\nnew file mode 100644\nindex 000000000000..3fd3bd46baa7\n--- /dev/null\n+++ b/tests/queries/0_stateless/00662_has_nullable.sql\n@@ -0,0 +1,39 @@\n+DROP TABLE IF EXISTS 00662_has_nullable;\n+\n+SELECT 'Nullable(UInt64), non-null array';\n+CREATE TABLE 00662_has_nullable(a Nullable(UInt64)) ENGINE = Memory;\n+\n+INSERT INTO 00662_has_nullable VALUES (1), (Null);\n+SELECT a, has([0, 1], a) FROM 00662_has_nullable;\n+\n+DROP TABLE 00662_has_nullable;\n+\n+--------------------------------------------------------------------------------\n+\n+SELECT 'Non-nullable UInt64, nullable array';\n+CREATE TABLE 00662_has_nullable(a UInt64) ENGINE = Memory;\n+\n+INSERT INTO 00662_has_nullable VALUES (0), (1), (2);\n+SELECT a, has([NULL, 1, 2], a) FROM 00662_has_nullable;\n+\n+DROP TABLE 00662_has_nullable;\n+\n+--------------------------------------------------------------------------------\n+\n+SELECT 'Nullable(UInt64), nullable array';\n+CREATE TABLE 00662_has_nullable(a Nullable(UInt64)) ENGINE = Memory;\n+\n+INSERT INTO 00662_has_nullable VALUES (0), (Null), (1);\n+SELECT a, has([NULL, 1, 2], a) FROM 00662_has_nullable;\n+\n+DROP TABLE 00662_has_nullable;\n+\n+--------------------------------------------------------------------------------\n+\n+SELECT 'All NULLs';\n+CREATE TABLE 00662_has_nullable(a Nullable(UInt64)) ENGINE = Memory;\n+\n+INSERT INTO 00662_has_nullable VALUES (0), (Null);\n+SELECT a, has([NULL, NULL], a) FROM 00662_has_nullable;\n+\n+DROP TABLE 00662_has_nullable;\n",
  "problem_statement": "Function 'has' works incorrectly with 'Nullable' columns\n**Describe what's wrong**\r\n\r\nFunction `has` works incorrectly when the second argument is a `nullable` column.\r\n\r\nIt may return 1 for expression `has([0, 1], a)`, when `a` is `Null`.\r\n\r\nIt looks like that for nullable columns the function uses an `underlying` column (`assumeNotNullable`), and the null bitmap is ignored.\r\n\r\n(the result for second query is wrong)\r\nhttps://fiddle.clickhouse.com/d508fc65-6e05-495f-a923-a142f6b906b7\r\n\r\n**Does it reproduce on the most recent release?**\r\n\r\nYes\r\n\r\n\r\n**How to reproduce**\r\n\r\n* Which ClickHouse server version to use\r\n23.8/24.1/latest\r\n\r\n* `CREATE TABLE` statements for all tables involved\r\n```sql\r\nCREATE TABLE test (a Nullable(Int64)) ENGINE=Memory;\r\n```\r\n* Sample data for all these tables, use [clickhouse-obfuscator](https://github.com/ClickHouse/ClickHouse/blob/master/programs/obfuscator/Obfuscator.cpp#L42-L80) if necessary\r\n```sql\r\nINSERT INTO test VALUES (1), (Null);\r\n```\r\n* Queries to run that lead to an unexpected result\r\n```sql\r\nSELECT a, has([0, 1], a) as b FROM test;\r\n\r\n-----\r\n1\t1\r\n\\N\t1\r\n-----\r\n```\r\n\r\n**Expected behavior**\r\n`has` should return 0 if the value is `Null` and `Null` is missing in the array\r\n```\r\n-----\r\n1\t1\r\n\\N\t0\r\n-----\r\n```\r\n\r\n> A clear and concise description of what you expected to happen.\r\n\r\n\n",
  "hints_text": "@myrrc, you can take a look - it might be related to https://github.com/ClickHouse/ClickHouse/pull/12550\nI'll have a look this week\n",
  "created_at": "2024-03-12T14:52:32Z"
}