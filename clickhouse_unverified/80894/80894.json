{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 80894,
  "instance_id": "ClickHouse__ClickHouse-80894",
  "issue_numbers": [
    "80620"
  ],
  "base_commit": "cf3fbd0de094a73a3e729266348d29bcf07e8f02",
  "patch": "diff --git a/src/Analyzer/Resolve/QueryAnalyzer.cpp b/src/Analyzer/Resolve/QueryAnalyzer.cpp\nindex 0e1921fc2503..18e69ee07eab 100644\n--- a/src/Analyzer/Resolve/QueryAnalyzer.cpp\n+++ b/src/Analyzer/Resolve/QueryAnalyzer.cpp\n@@ -1790,7 +1790,8 @@ void QueryAnalyzer::updateMatchedColumnsFromJoinUsing(\n     const auto & join_tree = nearest_query_scope_query_node->getJoinTree();\n \n     const auto * join_node = join_tree->as<JoinNode>();\n-    if (join_node && join_node->isUsingJoinExpression())\n+    bool join_node_in_resolve_process = scope.table_expressions_in_resolve_process.contains(join_node);\n+    if (!join_node_in_resolve_process && join_node && join_node->isUsingJoinExpression())\n     {\n         const auto & join_using_list = join_node->getJoinExpression()->as<ListNode &>();\n         const auto & join_using_nodes = join_using_list.getNodes();\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03522_join_resolve_matcher_recursive_bug.reference b/tests/queries/0_stateless/03522_join_resolve_matcher_recursive_bug.reference\nnew file mode 100644\nindex 000000000000..573541ac9702\n--- /dev/null\n+++ b/tests/queries/0_stateless/03522_join_resolve_matcher_recursive_bug.reference\n@@ -0,0 +1,1 @@\n+0\ndiff --git a/tests/queries/0_stateless/03522_join_resolve_matcher_recursive_bug.sql b/tests/queries/0_stateless/03522_join_resolve_matcher_recursive_bug.sql\nnew file mode 100644\nindex 000000000000..b3dcfc1d60ee\n--- /dev/null\n+++ b/tests/queries/0_stateless/03522_join_resolve_matcher_recursive_bug.sql\n@@ -0,0 +1,3 @@\n+SET enable_analyzer = 1;\n+SELECT 1 FROM (SELECT 1) tx JOIN VALUES ((*)) ty USING (c0); -- { serverError UNKNOWN_IDENTIFIER }\n+SELECT * FROM numbers(1) AS t1 FULL JOIN numbers(1, 46 AND (1 IS NULL) AND (* AND 3) ) AS t2 USING (number);\n",
  "problem_statement": "Logical error: 'Bad cast from type DB::IdentifierNode to DB::ColumnNode'\n### Describe the bug\n\nEasy to reproduce.\n\n### How to reproduce\n\nOn a debug build run:\n\n```sql\nCREATE FUNCTION f0 AS (x) -> x;\nSELECT 1 FROM (SELECT 1) tx JOIN VALUES(f0(*)) ty USING (c0);\n```\n\n### Error message and/or stacktrace\n\nStack trace:\n\n```\n<Fatal> : Logical error: 'Bad cast from type DB::IdentifierNode to DB::ColumnNode'.\n<Fatal> : Stack trace (when copying this message, always include the lines below):\n\n0. contrib/llvm-project/libcxx/include/__exception/exception.h:113: Poco::Exception::Exception(String const&, int) @ 0x000000001d6ae8b2\n1. src/Common/Exception.cpp:110: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000121d4766\n2. src/Common/Exception.h:119: DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000bac9b4c\n3. src/Common/Exception.h:137: DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x000000000bac8b96\n4. src/Common/typeid_cast.h:31: T typeid_cast<DB::ColumnNode&, DB::IQueryTreeNode>(DB::IQueryTreeNode&) @ 0x0000000016822793\n5. src/Common/TypePromotion.h:31: DB::QueryAnalyzer::updateMatchedColumnsFromJoinUsing(std::vector<std::pair<std::shared_ptr<DB::IQueryTreeNode>, String>, std::allocator<std::pair<std::shared_ptr<DB::IQueryTreeNode>, String>>>&, std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000016873926\n6. src/Analyzer/Resolve/QueryAnalyzer.cpp:2213: DB::QueryAnalyzer::resolveUnqualifiedMatcher(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000016881bca\n7. src/Analyzer/Resolve/QueryAnalyzer.cpp:2243: DB::QueryAnalyzer::resolveMatcher(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000016882ef4\n8. src/Analyzer/Resolve/QueryAnalyzer.cpp:3872: DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000016860ba8\n9. src/Analyzer/Resolve/QueryAnalyzer.cpp:4063: DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x000000001685fcb1\n10. src/Analyzer/Resolve/QueryAnalyzer.cpp:2942: DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000016876d57\n11. src/Analyzer/Resolve/QueryAnalyzer.cpp:3912: DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000001686091e\n12. src/Analyzer/Resolve/QueryAnalyzer.cpp:4885: DB::QueryAnalyzer::resolveTableFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&, bool) @ 0x000000001686383d\n13. src/Analyzer/Resolve/QueryAnalyzer.cpp:5480: DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001688cecf\n14. src/Analyzer/Resolve/QueryAnalyzer.cpp:5274: DB::QueryAnalyzer::resolveJoin(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001688e581\n15. src/Analyzer/Resolve/QueryAnalyzer.cpp:5499: DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000001688cee2\n16. src/Analyzer/Resolve/QueryAnalyzer.cpp:5738: DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000016859f04\n17. src/Analyzer/Resolve/QueryAnalyzer.cpp:179: DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000016859019\n18. src/Analyzer/Resolve/QueryAnalysisPass.cpp:18: DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000016858810\n19. src/Analyzer/QueryTreePassManager.cpp:187: DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x00000000168b5cb3\n20. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:165: DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x000000001727c607\n21. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:182: DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000001727adad\n22. contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:634: std::__unique_if<DB::InterpreterSelectQueryAnalyzer>::__unique_single std::make_unique[abi:se190107]<DB::InterpreterSelectQueryAnalyzer, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context> const&, DB::SelectQueryOptions const&>(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context> const&, DB::SelectQueryOptions const&) @ 0x000000001727d850\n23. contrib/llvm-project/libcxx/include/__functional/function.h:716: ? @ 0x0000000017214144\n24. src/Interpreters/executeQuery.cpp:1454: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x000000001754b3c0\n25. src/Interpreters/executeQuery.cpp:1714: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x0000000017545eb1\n26. src/Client/LocalConnection.cpp:263: DB::LocalConnection::sendQuery(DB::ConnectionTimeouts const&, String const&, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>> const&, String const&, unsigned long, DB::Settings const*, DB::ClientInfo const*, bool, std::vector<String, std::allocator<String>> const&, std::function<void (DB::Progress const&)>) @ 0x00000000191d174f\n27. src/Client/ClientBase.cpp:1255: DB::ClientBase::processOrdinaryQuery(String, std::shared_ptr<DB::IAST>) @ 0x000000001916fbb8\n28. src/Client/ClientBase.cpp:2274: DB::ClientBase::processParsedSingleQuery(std::basic_string_view<char, std::char_traits<char>>, std::shared_ptr<DB::IAST>, bool&, unsigned long) @ 0x000000001916dffd\n29. src/Client/ClientBase.cpp:2646: DB::ClientBase::executeMultiQuery(String const&) @ 0x00000000191794d9\n30. src/Client/ClientBase.cpp:2833: DB::ClientBase::processQueryText(String const&) @ 0x000000001917a5fb\n31. src/Client/ClientBase.cpp:3388: DB::ClientBase::runInteractive() @ 0x0000000019181aeb\n```\n",
  "hints_text": "Fine in 25.5. Could you please bisect and report it to revert or fix before 25.6?\nThis PR: https://github.com/ClickHouse/ClickHouse/pull/75676 broke this",
  "created_at": "2025-05-27T13:54:05Z"
}