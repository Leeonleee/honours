diff --git a/tests/queries/0_stateless/00940_order_by_read_in_order_query_plan.reference b/tests/queries/0_stateless/00940_order_by_read_in_order_query_plan.reference
new file mode 100644
index 000000000000..f08c4cfd3e5e
--- /dev/null
+++ b/tests/queries/0_stateless/00940_order_by_read_in_order_query_plan.reference
@@ -0,0 +1,405 @@
+-- { echoOn }
+
+-- Exact match, single key
+select * from tab order by (a + b) * c;
+0	0	0	0
+0	0	0	0
+1	1	1	1
+1	1	1	1
+2	2	2	2
+2	2	2	2
+3	3	3	3
+3	3	3	3
+4	4	4	4
+4	4	4	4
+select * from (explain plan actions = 1 select * from tab order by (a + b) * c) where explain like '%sort description%';
+  Prefix sort description: multiply(plus(a, b), c) ASC
+  Result sort description: multiply(plus(a, b), c) ASC
+select * from tab order by (a + b) * c desc;
+4	4	4	4
+4	4	4	4
+3	3	3	3
+3	3	3	3
+2	2	2	2
+2	2	2	2
+1	1	1	1
+1	1	1	1
+0	0	0	0
+0	0	0	0
+select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc) where explain like '%sort description%';
+  Prefix sort description: multiply(plus(a, b), c) DESC
+  Result sort description: multiply(plus(a, b), c) DESC
+-- Exact match, full key
+select * from tab order by (a + b) * c, sin(a / b);
+0	0	0	0
+0	0	0	0
+1	1	1	1
+1	1	1	1
+2	2	2	2
+2	2	2	2
+3	3	3	3
+3	3	3	3
+4	4	4	4
+4	4	4	4
+select * from (explain plan actions = 1 select * from tab order by (a + b) * c, sin(a / b)) where explain like '%sort description%';
+  Prefix sort description: multiply(plus(a, b), c) ASC, sin(divide(a, b)) ASC
+  Result sort description: multiply(plus(a, b), c) ASC, sin(divide(a, b)) ASC
+select * from tab order by (a + b) * c desc, sin(a / b) desc;
+4	4	4	4
+4	4	4	4
+3	3	3	3
+3	3	3	3
+2	2	2	2
+2	2	2	2
+1	1	1	1
+1	1	1	1
+0	0	0	0
+0	0	0	0
+select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, sin(a / b) desc) where explain like '%sort description%';
+  Prefix sort description: multiply(plus(a, b), c) DESC, sin(divide(a, b)) DESC
+  Result sort description: multiply(plus(a, b), c) DESC, sin(divide(a, b)) DESC
+-- Exact match, mixed direction
+select * from tab order by (a + b) * c desc, sin(a / b);
+4	4	4	4
+4	4	4	4
+3	3	3	3
+3	3	3	3
+2	2	2	2
+2	2	2	2
+1	1	1	1
+1	1	1	1
+0	0	0	0
+0	0	0	0
+select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, sin(a / b)) where explain like '%sort description%';
+  Prefix sort description: multiply(plus(a, b), c) DESC
+  Result sort description: multiply(plus(a, b), c) DESC, sin(divide(a, b)) ASC
+select * from tab order by (a + b) * c, sin(a / b) desc;
+0	0	0	0
+0	0	0	0
+1	1	1	1
+1	1	1	1
+2	2	2	2
+2	2	2	2
+3	3	3	3
+3	3	3	3
+4	4	4	4
+4	4	4	4
+select * from (explain plan actions = 1 select * from tab order by (a + b) * c, sin(a / b) desc) where explain like '%sort description%';
+  Prefix sort description: multiply(plus(a, b), c) ASC
+  Result sort description: multiply(plus(a, b), c) ASC, sin(divide(a, b)) DESC
+-- Wrong order, full sort
+select * from tab order by sin(a / b), (a + b) * c;
+1	1	1	1
+1	1	1	1
+2	2	2	2
+2	2	2	2
+3	3	3	3
+3	3	3	3
+4	4	4	4
+4	4	4	4
+0	0	0	0
+0	0	0	0
+select * from (explain plan actions = 1 select * from tab order by sin(a / b), (a + b) * c) where explain ilike '%sort description%';
+  Sort description: sin(divide(a, b)) ASC, multiply(plus(a, b), c) ASC
+-- Fixed point
+select * from tab where (a + b) * c = 8 order by sin(a / b);
+2	2	2	2
+2	2	2	2
+select * from (explain plan actions = 1 select * from tab where (a + b) * c = 8 order by sin(a / b)) where explain ilike '%sort description%';
+  Prefix sort description: sin(divide(a, b)) ASC
+  Result sort description: sin(divide(a, b)) ASC
+select * from tab where d + 1 = 2 order by (d + 1) * 4, (a + b) * c;
+1	1	1	1
+1	1	1	1
+select * from (explain plan actions = 1 select * from tab where d + 1 = 2 order by (d + 1) * 4, (a + b) * c) where explain ilike '%sort description%';
+  Prefix sort description: multiply(plus(d, 1), 4) ASC, multiply(plus(a, b), c) ASC
+  Result sort description: multiply(plus(d, 1), 4) ASC, multiply(plus(a, b), c) ASC
+select * from tab where d + 1 = 3 and (a + b) = 4 and c = 2 order by (d + 1) * 4, sin(a / b);
+2	2	2	2
+2	2	2	2
+select * from (explain plan actions = 1 select * from tab where d + 1 = 3 and (a + b) = 4 and c = 2 order by (d + 1) * 4, sin(a / b)) where explain ilike '%sort description%';
+  Prefix sort description: multiply(plus(d, 1), 4) ASC, sin(divide(a, b)) ASC
+  Result sort description: multiply(plus(d, 1), 4) ASC, sin(divide(a, b)) ASC
+-- Wrong order with fixed point
+select * from tab where (a + b) * c = 8 order by sin(b / a);
+2	2	2	2
+2	2	2	2
+select * from (explain plan actions = 1 select * from tab where (a + b) * c = 8 order by sin(b / a)) where explain ilike '%sort description%';
+  Sort description: sin(divide(b, a)) ASC
+-- Monotonicity
+select * from tab order by intDiv((a + b) * c, 2);
+0	0	0	0
+0	0	0	0
+1	1	1	1
+1	1	1	1
+2	2	2	2
+2	2	2	2
+3	3	3	3
+3	3	3	3
+4	4	4	4
+4	4	4	4
+select * from (explain plan actions = 1 select * from tab order by intDiv((a + b) * c, 2)) where explain like '%sort description%';
+  Prefix sort description: intDiv(multiply(plus(a, b), c), 2) ASC
+  Result sort description: intDiv(multiply(plus(a, b), c), 2) ASC
+select * from tab order by intDiv((a + b) * c, 2), sin(a / b);
+0	0	0	0
+0	0	0	0
+1	1	1	1
+1	1	1	1
+2	2	2	2
+2	2	2	2
+3	3	3	3
+3	3	3	3
+4	4	4	4
+4	4	4	4
+select * from (explain plan actions = 1 select * from tab order by intDiv((a + b) * c, 2), sin(a / b)) where explain like '%sort description%';
+  Prefix sort description: intDiv(multiply(plus(a, b), c), 2) ASC
+  Result sort description: intDiv(multiply(plus(a, b), c), 2) ASC, sin(divide(a, b)) ASC
+-- select * from tab order by (a + b) * c, intDiv(sin(a / b), 2);
+select * from (explain plan actions = 1 select * from tab order by (a + b) * c, intDiv(sin(a / b), 2)) where explain like '%sort description%';
+  Prefix sort description: multiply(plus(a, b), c) ASC, intDiv(sin(divide(a, b)), 2) ASC
+  Result sort description: multiply(plus(a, b), c) ASC, intDiv(sin(divide(a, b)), 2) ASC
+-- select * from tab order by (a + b) * c desc , intDiv(sin(a / b), 2);
+select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc , intDiv(sin(a / b), 2)) where explain like '%sort description%';
+  Prefix sort description: multiply(plus(a, b), c) DESC
+  Result sort description: multiply(plus(a, b), c) DESC, intDiv(sin(divide(a, b)), 2) ASC
+-- select * from tab order by (a + b) * c, intDiv(sin(a / b), 2) desc;
+select * from (explain plan actions = 1 select * from tab order by (a + b) * c, intDiv(sin(a / b), 2) desc) where explain like '%sort description%';
+  Prefix sort description: multiply(plus(a, b), c) ASC
+  Result sort description: multiply(plus(a, b), c) ASC, intDiv(sin(divide(a, b)), 2) DESC
+-- select * from tab order by (a + b) * c desc, intDiv(sin(a / b), 2) desc;
+select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, intDiv(sin(a / b), 2) desc) where explain like '%sort description%';
+  Prefix sort description: multiply(plus(a, b), c) DESC, intDiv(sin(divide(a, b)), 2) DESC
+  Result sort description: multiply(plus(a, b), c) DESC, intDiv(sin(divide(a, b)), 2) DESC
+-- select * from tab order by (a + b) * c desc, intDiv(sin(a / b), -2);
+select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, intDiv(sin(a / b), -2)) where explain like '%sort description%';
+  Prefix sort description: multiply(plus(a, b), c) DESC, intDiv(sin(divide(a, b)), -2) ASC
+  Result sort description: multiply(plus(a, b), c) DESC, intDiv(sin(divide(a, b)), -2) ASC
+-- select * from tab order by (a + b) * c desc, intDiv(intDiv(sin(a / b), -2), -3);
+select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, intDiv(intDiv(sin(a / b), -2), -3)) where explain like '%sort description%';
+  Prefix sort description: multiply(plus(a, b), c) DESC
+  Result sort description: multiply(plus(a, b), c) DESC, intDiv(intDiv(sin(divide(a, b)), -2), -3) ASC
+-- select * from tab order by (a + b) * c, intDiv(intDiv(sin(a / b), -2), -3);
+select * from (explain plan actions = 1 select * from tab order by (a + b) * c, intDiv(intDiv(sin(a / b), -2), -3)) where explain like '%sort description%';
+  Prefix sort description: multiply(plus(a, b), c) ASC, intDiv(intDiv(sin(divide(a, b)), -2), -3) ASC
+  Result sort description: multiply(plus(a, b), c) ASC, intDiv(intDiv(sin(divide(a, b)), -2), -3) ASC
+-- Aliases
+select * from (select *, a + b as x from tab) order by x * c;
+0	0	0	0	0
+0	0	0	0	0
+1	1	1	1	2
+1	1	1	1	2
+2	2	2	2	4
+2	2	2	2	4
+3	3	3	3	6
+3	3	3	3	6
+4	4	4	4	8
+4	4	4	4	8
+select * from (explain plan actions = 1 select * from (select *, a + b as x from tab) order by x * c) where explain like '%sort description%';
+  Prefix sort description: multiply(x, c) ASC
+  Result sort description: multiply(x, c) ASC
+select * from (select *, a + b as x, a / b as y from tab) order by x * c, sin(y);
+0	0	0	0	0	nan
+0	0	0	0	0	nan
+1	1	1	1	2	1
+1	1	1	1	2	1
+2	2	2	2	4	1
+2	2	2	2	4	1
+3	3	3	3	6	1
+3	3	3	3	6	1
+4	4	4	4	8	1
+4	4	4	4	8	1
+select * from (explain plan actions = 1 select * from (select *, a + b as x, a / b as y from tab) order by x * c, sin(y)) where explain like '%sort description%';
+  Prefix sort description: multiply(x, c) ASC, sin(y) ASC
+  Result sort description: multiply(x, c) ASC, sin(y) ASC
+select * from (select *, a / b as y from (select *, a + b as x from tab)) order by x * c, sin(y);
+0	0	0	0	0	nan
+0	0	0	0	0	nan
+1	1	1	1	2	1
+1	1	1	1	2	1
+2	2	2	2	4	1
+2	2	2	2	4	1
+3	3	3	3	6	1
+3	3	3	3	6	1
+4	4	4	4	8	1
+4	4	4	4	8	1
+select * from (explain plan actions = 1 select * from (select *, a / b as y from (select *, a + b as x from tab)) order by x * c, sin(y)) where explain like '%sort description%';
+  Prefix sort description: multiply(x, c) ASC, sin(y) ASC
+  Result sort description: multiply(x, c) ASC, sin(y) ASC
+-- { echoOn }
+
+select * from tab2 order by toTimeZone(toTimezone(x, 'UTC'), 'CET'), intDiv(intDiv(y, -2), -3);
+2020-02-02 00:00:00	0	0
+2020-02-02 00:00:00	0	0
+2020-02-03 00:00:00	1	1
+2020-02-03 00:00:00	1	1
+2020-02-04 00:00:00	2	2
+2020-02-04 00:00:00	2	2
+2020-02-05 00:00:00	3	3
+2020-02-05 00:00:00	3	3
+select * from (explain plan actions = 1 select * from tab2 order by toTimeZone(toTimezone(x, 'UTC'), 'CET'), intDiv(intDiv(y, -2), -3)) where explain like '%sort description%';
+  Prefix sort description: toTimeZone(toTimezone(x, \'UTC\'), \'CET\') ASC, intDiv(intDiv(y, -2), -3) ASC
+  Result sort description: toTimeZone(toTimezone(x, \'UTC\'), \'CET\') ASC, intDiv(intDiv(y, -2), -3) ASC
+select * from tab2 order by toStartOfDay(x), intDiv(intDiv(y, -2), -3);
+2020-02-02 00:00:00	0	0
+2020-02-02 00:00:00	0	0
+2020-02-03 00:00:00	1	1
+2020-02-03 00:00:00	1	1
+2020-02-04 00:00:00	2	2
+2020-02-04 00:00:00	2	2
+2020-02-05 00:00:00	3	3
+2020-02-05 00:00:00	3	3
+select * from (explain plan actions = 1 select * from tab2 order by toStartOfDay(x), intDiv(intDiv(y, -2), -3)) where explain like '%sort description%';
+  Prefix sort description: toStartOfDay(x) ASC
+  Result sort description: toStartOfDay(x) ASC, intDiv(intDiv(y, -2), -3) ASC
+-- select * from tab2 where toTimezone(x, 'CET') = '2020-02-03 01:00:00' order by intDiv(intDiv(y, -2), -3);
+select * from (explain plan actions = 1 select * from tab2 where toTimezone(x, 'CET') = '2020-02-03 01:00:00' order by intDiv(intDiv(y, -2), -3)) where explain like '%sort description%';
+  Prefix sort description: intDiv(intDiv(y, -2), -3) ASC
+  Result sort description: intDiv(intDiv(y, -2), -3) ASC
+-- { echoOn }
+
+-- Union (not fully supported)
+select * from (select * from tab union all select * from tab3) order by (a + b) * c, sin(a / b);
+0	0	0	0
+0	0	0	0
+0	0	0	0
+0	0	0	0
+1	1	1	1
+1	1	1	1
+1	1	1	1
+1	1	1	1
+2	2	2	2
+2	2	2	2
+2	2	2	2
+2	2	2	2
+3	3	3	3
+3	3	3	3
+3	3	3	3
+3	3	3	3
+4	4	4	4
+4	4	4	4
+4	4	4	4
+4	4	4	4
+select * from (explain plan actions = 1 select * from (select * from tab union all select * from tab3) order by (a + b) * c, sin(a / b)) where explain like '%sort description%' or explain like '%ReadType%';
+  Prefix sort description: multiply(plus(a, b), c) ASC, sin(divide(a, b)) ASC
+  Result sort description: multiply(plus(a, b), c) ASC, sin(divide(a, b)) ASC
+        ReadType: InOrder
+        ReadType: InOrder
+select * from (select * from tab where (a + b) * c = 8 union all select * from tab3 where (a + b) * c = 18) order by sin(a / b);
+2	2	2	2
+2	2	2	2
+3	3	3	3
+3	3	3	3
+select * from (explain plan actions = 1 select * from (select * from tab where (a + b) * c = 8 union all select * from tab3 where (a + b) * c = 18) order by sin(a / b)) where explain like '%sort description%' or explain like '%ReadType%';
+  Prefix sort description: sin(divide(a, b)) ASC
+  Result sort description: sin(divide(a, b)) ASC
+          ReadType: InOrder
+          ReadType: InOrder
+select * from (select * from tab where (a + b) * c = 8 union all select * from tab4) order by sin(a / b);
+2	2	2	2
+2	2	2	2
+1	1	1	1
+2	2	2	2
+3	3	3	3
+4	4	4	4
+1	1	1	1
+2	2	2	2
+3	3	3	3
+4	4	4	4
+0	0	0	0
+0	0	0	0
+select * from (explain plan actions = 1 select * from (select * from tab where (a + b) * c = 8 union all select * from tab4) order by sin(a / b)) where explain like '%sort description%' or explain like '%ReadType%';
+  Prefix sort description: sin(divide(a, b)) ASC
+  Result sort description: sin(divide(a, b)) ASC
+          ReadType: InOrder
+        ReadType: InOrder
+select * from (select * from tab union all select * from tab5) order by (a + b) * c;
+0	0	0	0
+0	0	0	0
+0	0	0	0
+0	0	0	0
+1	1	1	1
+1	1	1	1
+1	1	1	1
+1	1	1	1
+2	2	2	2
+2	2	2	2
+2	2	2	2
+2	2	2	2
+3	3	3	3
+3	3	3	3
+3	3	3	3
+3	3	3	3
+4	4	4	4
+4	4	4	4
+4	4	4	4
+4	4	4	4
+select * from (explain plan actions = 1 select * from (select * from tab union all select * from tab5) order by (a + b) * c) where explain like '%sort description%' or explain like '%ReadType%';
+  Prefix sort description: multiply(plus(a, b), c) ASC
+  Result sort description: multiply(plus(a, b), c) ASC
+        ReadType: InOrder
+        ReadType: InOrder
+select * from (select * from tab union all select * from tab5) order by (a + b) * c, sin(a / b);
+0	0	0	0
+0	0	0	0
+0	0	0	0
+0	0	0	0
+1	1	1	1
+1	1	1	1
+1	1	1	1
+1	1	1	1
+2	2	2	2
+2	2	2	2
+2	2	2	2
+2	2	2	2
+3	3	3	3
+3	3	3	3
+3	3	3	3
+3	3	3	3
+4	4	4	4
+4	4	4	4
+4	4	4	4
+4	4	4	4
+select * from (explain plan actions = 1 select * from (select * from tab union all select * from tab5) order by (a + b) * c, sin(a / b)) where explain like '%sort description%' or explain like '%ReadType%';
+  Prefix sort description: multiply(plus(a, b), c) ASC, sin(divide(a, b)) ASC
+  Result sort description: multiply(plus(a, b), c) ASC, sin(divide(a, b)) ASC
+        ReadType: InOrder
+      Prefix sort description: multiply(plus(a, b), c) ASC
+      Result sort description: multiply(plus(a, b), c) ASC, sin(divide(a, b)) ASC
+          ReadType: InOrder
+-- Union with limit
+select * from (select * from tab union all select * from tab5) order by (a + b) * c, sin(a / b) limit 3;
+0	0	0	0
+0	0	0	0
+0	0	0	0
+select * from (explain plan actions = 1 select * from (select * from tab union all select * from tab5) order by (a + b) * c, sin(a / b) limit 3) where explain ilike '%sort description%' or explain like '%ReadType%' or explain like '%Limit%';
+  Limit (preliminary LIMIT (without OFFSET))
+  Limit 3
+    Prefix sort description: multiply(plus(a, b), c) ASC, sin(divide(a, b)) ASC
+    Result sort description: multiply(plus(a, b), c) ASC, sin(divide(a, b)) ASC
+    Limit 3
+          ReadType: InOrder
+        Prefix sort description: multiply(plus(a, b), c) ASC
+        Result sort description: multiply(plus(a, b), c) ASC, sin(divide(a, b)) ASC
+            ReadType: InOrder
+-- In this example, we read-in-order from tab up to ((a + b) * c, sin(a / b)) and from tab5 up to ((a + b) * c).
+-- In case of tab5, there would be two finish sorting transforms: ((a + b) * c) -> ((a + b) * c, sin(a / b)) -> ((a + b) * c, sin(a / b), d).
+-- It's important that ((a + b) * c) -> ((a + b) * c does not have LIMIT. We can add LIMIT WITH TIES later, when sorting alog support it.
+-- In case of tab4, we do full sorting by ((a + b) * c, sin(a / b), d) with LIMIT. We can replace it to sorting by ((a + b) * c, sin(a / b)) and LIMIT WITH TIES, when sorting alog support it.
+select * from (select * from tab union all select * from tab5 union all select * from tab4) order by (a + b) * c, sin(a / b), d limit 3;
+0	0	0	0
+0	0	0	0
+0	0	0	0
+select * from (explain plan actions = 1 select * from (select * from tab union all select * from tab5 union all select * from tab4) order by (a + b) * c, sin(a / b), d limit 3) where explain ilike '%sort description%' or explain like '%ReadType%' or explain like '%Limit%';
+  Limit (preliminary LIMIT (without OFFSET))
+  Limit 3
+    Prefix sort description: multiply(plus(a, b), c) ASC, sin(divide(a, b)) ASC
+    Result sort description: multiply(plus(a, b), c) ASC, sin(divide(a, b)) ASC, d ASC
+    Limit 3
+          ReadType: InOrder
+        Prefix sort description: multiply(plus(a, b), c) ASC
+        Result sort description: multiply(plus(a, b), c) ASC, sin(divide(a, b)) ASC
+            ReadType: InOrder
+        Sort description: multiply(plus(a, b), c) ASC, sin(divide(a, b)) ASC, d ASC
+        Limit 3
+            ReadType: Default
diff --git a/tests/queries/0_stateless/00940_order_by_read_in_order_query_plan.sql b/tests/queries/0_stateless/00940_order_by_read_in_order_query_plan.sql
new file mode 100644
index 000000000000..e694ccf84ee5
--- /dev/null
+++ b/tests/queries/0_stateless/00940_order_by_read_in_order_query_plan.sql
@@ -0,0 +1,144 @@
+SET optimize_read_in_order = 1, query_plan_read_in_order=1;
+
+create table tab (a UInt32, b UInt32, c UInt32, d UInt32) engine = MergeTree order by ((a + b) * c, sin(a / b));
+insert into tab select number, number, number, number from numbers(5);
+insert into tab select number, number, number, number from numbers(5);
+
+-- { echoOn }
+
+-- Exact match, single key
+select * from tab order by (a + b) * c;
+select * from (explain plan actions = 1 select * from tab order by (a + b) * c) where explain like '%sort description%';
+
+select * from tab order by (a + b) * c desc;
+select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc) where explain like '%sort description%';
+
+-- Exact match, full key
+select * from tab order by (a + b) * c, sin(a / b);
+select * from (explain plan actions = 1 select * from tab order by (a + b) * c, sin(a / b)) where explain like '%sort description%';
+
+select * from tab order by (a + b) * c desc, sin(a / b) desc;
+select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, sin(a / b) desc) where explain like '%sort description%';
+
+-- Exact match, mixed direction
+select * from tab order by (a + b) * c desc, sin(a / b);
+select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, sin(a / b)) where explain like '%sort description%';
+
+select * from tab order by (a + b) * c, sin(a / b) desc;
+select * from (explain plan actions = 1 select * from tab order by (a + b) * c, sin(a / b) desc) where explain like '%sort description%';
+
+-- Wrong order, full sort
+select * from tab order by sin(a / b), (a + b) * c;
+select * from (explain plan actions = 1 select * from tab order by sin(a / b), (a + b) * c) where explain ilike '%sort description%';
+
+-- Fixed point
+select * from tab where (a + b) * c = 8 order by sin(a / b);
+select * from (explain plan actions = 1 select * from tab where (a + b) * c = 8 order by sin(a / b)) where explain ilike '%sort description%';
+
+select * from tab where d + 1 = 2 order by (d + 1) * 4, (a + b) * c;
+select * from (explain plan actions = 1 select * from tab where d + 1 = 2 order by (d + 1) * 4, (a + b) * c) where explain ilike '%sort description%';
+
+select * from tab where d + 1 = 3 and (a + b) = 4 and c = 2 order by (d + 1) * 4, sin(a / b);
+select * from (explain plan actions = 1 select * from tab where d + 1 = 3 and (a + b) = 4 and c = 2 order by (d + 1) * 4, sin(a / b)) where explain ilike '%sort description%';
+
+-- Wrong order with fixed point
+select * from tab where (a + b) * c = 8 order by sin(b / a);
+select * from (explain plan actions = 1 select * from tab where (a + b) * c = 8 order by sin(b / a)) where explain ilike '%sort description%';
+
+-- Monotonicity
+select * from tab order by intDiv((a + b) * c, 2);
+select * from (explain plan actions = 1 select * from tab order by intDiv((a + b) * c, 2)) where explain like '%sort description%';
+
+select * from tab order by intDiv((a + b) * c, 2), sin(a / b);
+select * from (explain plan actions = 1 select * from tab order by intDiv((a + b) * c, 2), sin(a / b)) where explain like '%sort description%';
+
+-- select * from tab order by (a + b) * c, intDiv(sin(a / b), 2);
+select * from (explain plan actions = 1 select * from tab order by (a + b) * c, intDiv(sin(a / b), 2)) where explain like '%sort description%';
+
+-- select * from tab order by (a + b) * c desc , intDiv(sin(a / b), 2);
+select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc , intDiv(sin(a / b), 2)) where explain like '%sort description%';
+
+-- select * from tab order by (a + b) * c, intDiv(sin(a / b), 2) desc;
+select * from (explain plan actions = 1 select * from tab order by (a + b) * c, intDiv(sin(a / b), 2) desc) where explain like '%sort description%';
+
+-- select * from tab order by (a + b) * c desc, intDiv(sin(a / b), 2) desc;
+select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, intDiv(sin(a / b), 2) desc) where explain like '%sort description%';
+
+-- select * from tab order by (a + b) * c desc, intDiv(sin(a / b), -2);
+select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, intDiv(sin(a / b), -2)) where explain like '%sort description%';
+
+-- select * from tab order by (a + b) * c desc, intDiv(intDiv(sin(a / b), -2), -3);
+select * from (explain plan actions = 1 select * from tab order by (a + b) * c desc, intDiv(intDiv(sin(a / b), -2), -3)) where explain like '%sort description%';
+
+-- select * from tab order by (a + b) * c, intDiv(intDiv(sin(a / b), -2), -3);
+select * from (explain plan actions = 1 select * from tab order by (a + b) * c, intDiv(intDiv(sin(a / b), -2), -3)) where explain like '%sort description%';
+
+-- Aliases
+select * from (select *, a + b as x from tab) order by x * c;
+select * from (explain plan actions = 1 select * from (select *, a + b as x from tab) order by x * c) where explain like '%sort description%';
+
+select * from (select *, a + b as x, a / b as y from tab) order by x * c, sin(y);
+select * from (explain plan actions = 1 select * from (select *, a + b as x, a / b as y from tab) order by x * c, sin(y)) where explain like '%sort description%';
+
+select * from (select *, a / b as y from (select *, a + b as x from tab)) order by x * c, sin(y);
+select * from (explain plan actions = 1 select * from (select *, a / b as y from (select *, a + b as x from tab)) order by x * c, sin(y)) where explain like '%sort description%';
+
+-- { echoOff }
+
+create table tab2 (x DateTime, y UInt32, z UInt32) engine = MergeTree order by (x, y);
+insert into tab2 select toDate('2020-02-02') + number, number, number from numbers(4);
+insert into tab2 select toDate('2020-02-02') + number, number, number from numbers(4);
+
+-- { echoOn }
+
+select * from tab2 order by toTimeZone(toTimezone(x, 'UTC'), 'CET'), intDiv(intDiv(y, -2), -3);
+select * from (explain plan actions = 1 select * from tab2 order by toTimeZone(toTimezone(x, 'UTC'), 'CET'), intDiv(intDiv(y, -2), -3)) where explain like '%sort description%';
+
+select * from tab2 order by toStartOfDay(x), intDiv(intDiv(y, -2), -3);
+select * from (explain plan actions = 1 select * from tab2 order by toStartOfDay(x), intDiv(intDiv(y, -2), -3)) where explain like '%sort description%';
+
+-- select * from tab2 where toTimezone(x, 'CET') = '2020-02-03 01:00:00' order by intDiv(intDiv(y, -2), -3);
+select * from (explain plan actions = 1 select * from tab2 where toTimezone(x, 'CET') = '2020-02-03 01:00:00' order by intDiv(intDiv(y, -2), -3)) where explain like '%sort description%';
+
+-- { echoOff }
+
+create table tab3 (a UInt32, b UInt32, c UInt32, d UInt32) engine = MergeTree order by ((a + b) * c, sin(a / b));
+insert into tab3 select number, number, number, number from numbers(5);
+insert into tab3 select number, number, number, number from numbers(5);
+
+create table tab4 (a UInt32, b UInt32, c UInt32, d UInt32) engine = MergeTree order by sin(a / b);
+insert into tab4 select number, number, number, number from numbers(5);
+insert into tab4 select number, number, number, number from numbers(5);
+
+create table tab5 (a UInt32, b UInt32, c UInt32, d UInt32) engine = MergeTree order by (a + b) * c;
+insert into tab5 select number, number, number, number from numbers(5);
+insert into tab5 select number, number, number, number from numbers(5);
+
+-- { echoOn }
+
+-- Union (not fully supported)
+select * from (select * from tab union all select * from tab3) order by (a + b) * c, sin(a / b);
+select * from (explain plan actions = 1 select * from (select * from tab union all select * from tab3) order by (a + b) * c, sin(a / b)) where explain like '%sort description%' or explain like '%ReadType%';
+
+select * from (select * from tab where (a + b) * c = 8 union all select * from tab3 where (a + b) * c = 18) order by sin(a / b);
+select * from (explain plan actions = 1 select * from (select * from tab where (a + b) * c = 8 union all select * from tab3 where (a + b) * c = 18) order by sin(a / b)) where explain like '%sort description%' or explain like '%ReadType%';
+
+select * from (select * from tab where (a + b) * c = 8 union all select * from tab4) order by sin(a / b);
+select * from (explain plan actions = 1 select * from (select * from tab where (a + b) * c = 8 union all select * from tab4) order by sin(a / b)) where explain like '%sort description%' or explain like '%ReadType%';
+
+select * from (select * from tab union all select * from tab5) order by (a + b) * c;
+select * from (explain plan actions = 1 select * from (select * from tab union all select * from tab5) order by (a + b) * c) where explain like '%sort description%' or explain like '%ReadType%';
+
+select * from (select * from tab union all select * from tab5) order by (a + b) * c, sin(a / b);
+select * from (explain plan actions = 1 select * from (select * from tab union all select * from tab5) order by (a + b) * c, sin(a / b)) where explain like '%sort description%' or explain like '%ReadType%';
+
+-- Union with limit
+select * from (select * from tab union all select * from tab5) order by (a + b) * c, sin(a / b) limit 3;
+select * from (explain plan actions = 1 select * from (select * from tab union all select * from tab5) order by (a + b) * c, sin(a / b) limit 3) where explain ilike '%sort description%' or explain like '%ReadType%' or explain like '%Limit%';
+
+-- In this example, we read-in-order from tab up to ((a + b) * c, sin(a / b)) and from tab5 up to ((a + b) * c).
+-- In case of tab5, there would be two finish sorting transforms: ((a + b) * c) -> ((a + b) * c, sin(a / b)) -> ((a + b) * c, sin(a / b), d).
+-- It's important that ((a + b) * c) -> ((a + b) * c does not have LIMIT. We can add LIMIT WITH TIES later, when sorting alog support it.
+-- In case of tab4, we do full sorting by ((a + b) * c, sin(a / b), d) with LIMIT. We can replace it to sorting by ((a + b) * c, sin(a / b)) and LIMIT WITH TIES, when sorting alog support it.
+select * from (select * from tab union all select * from tab5 union all select * from tab4) order by (a + b) * c, sin(a / b), d limit 3;
+select * from (explain plan actions = 1 select * from (select * from tab union all select * from tab5 union all select * from tab4) order by (a + b) * c, sin(a / b), d limit 3) where explain ilike '%sort description%' or explain like '%ReadType%' or explain like '%Limit%';
diff --git a/tests/queries/0_stateless/01562_optimize_monotonous_functions_in_order_by.reference b/tests/queries/0_stateless/01562_optimize_monotonous_functions_in_order_by.reference
index 45a1a094c494..8c8bb73b8012 100644
--- a/tests/queries/0_stateless/01562_optimize_monotonous_functions_in_order_by.reference
+++ b/tests/queries/0_stateless/01562_optimize_monotonous_functions_in_order_by.reference
@@ -17,7 +17,7 @@ ORDER BY toDate(timestamp) ASC
 LIMIT 10
 Expression (Projection)
   Limit (preliminary LIMIT (without OFFSET))
-    Sorting
+    Sorting (Sorting for ORDER BY)
       Expression (Before ORDER BY)
         ReadFromMergeTree (default.test_order_by)
 SELECT
@@ -30,7 +30,7 @@ ORDER BY
 LIMIT 10
 Expression (Projection)
   Limit (preliminary LIMIT (without OFFSET))
-    Sorting
+    Sorting (Sorting for ORDER BY)
       Expression (Before ORDER BY)
         ReadFromMergeTree (default.test_order_by)
 SELECT
diff --git a/tests/queries/0_stateless/01576_alias_column_rewrite.reference b/tests/queries/0_stateless/01576_alias_column_rewrite.reference
index 830db82274f1..2b7fdfaa6422 100644
--- a/tests/queries/0_stateless/01576_alias_column_rewrite.reference
+++ b/tests/queries/0_stateless/01576_alias_column_rewrite.reference
@@ -28,12 +28,12 @@ Expression (Projection)
         ReadFromMergeTree (default.test_table)
 Expression (Projection)
   Limit (preliminary LIMIT (without OFFSET))
-    Sorting
+    Sorting (Sorting for ORDER BY)
       Expression (Before ORDER BY)
         ReadFromMergeTree (default.test_table)
 Expression ((Projection + Before ORDER BY [lifted up part]))
   Limit (preliminary LIMIT (without OFFSET))
-    Sorting
+    Sorting (Sorting for ORDER BY)
       Expression (Before ORDER BY)
         ReadFromMergeTree (default.test_table)
 optimize_aggregation_in_order
diff --git a/tests/queries/0_stateless/01655_plan_optimizations_optimize_read_in_window_order.sh b/tests/queries/0_stateless/01655_plan_optimizations_optimize_read_in_window_order.sh
index 328d181fadd7..a606f1a2f9ea 100755
--- a/tests/queries/0_stateless/01655_plan_optimizations_optimize_read_in_window_order.sh
+++ b/tests/queries/0_stateless/01655_plan_optimizations_optimize_read_in_window_order.sh
@@ -19,25 +19,25 @@ $CLICKHOUSE_CLIENT -q "optimize table ${name}_n_x final"
 
 echo 'Partial sorting plan'
 echo '  optimize_read_in_window_order=0'
-$CLICKHOUSE_CLIENT -q "explain plan actions=1, description=1 select n, sum(x) OVER (ORDER BY n, x ROWS BETWEEN 100 PRECEDING AND CURRENT ROW) from ${name}_n SETTINGS optimize_read_in_window_order=0" | grep -i "sort description"
+$CLICKHOUSE_CLIENT -q "explain plan actions=1, description=1 select n, sum(x) OVER (ORDER BY n, x ROWS BETWEEN 100 PRECEDING AND CURRENT ROW) from ${name}_n SETTINGS optimize_read_in_order=0,optimize_read_in_window_order=0" | grep -i "sort description"
 
 echo '  optimize_read_in_window_order=1'
-$CLICKHOUSE_CLIENT -q "explain plan actions=1, description=1 select n, sum(x) OVER (ORDER BY n, x ROWS BETWEEN 100 PRECEDING AND CURRENT ROW) from ${name}_n SETTINGS optimize_read_in_window_order=1" | grep -i "sort description"
+$CLICKHOUSE_CLIENT -q "explain plan actions=1, description=1 select n, sum(x) OVER (ORDER BY n, x ROWS BETWEEN 100 PRECEDING AND CURRENT ROW) from ${name}_n SETTINGS optimize_read_in_order=1" | grep -i "sort description"
 
 echo 'No sorting plan'
 echo '  optimize_read_in_window_order=0'
-$CLICKHOUSE_CLIENT -q "explain plan actions=1, description=1 select n, sum(x) OVER (ORDER BY n, x ROWS BETWEEN 100 PRECEDING AND CURRENT ROW) from ${name}_n_x SETTINGS optimize_read_in_window_order=0" | grep -i "sort description"
+$CLICKHOUSE_CLIENT -q "explain plan actions=1, description=1 select n, sum(x) OVER (ORDER BY n, x ROWS BETWEEN 100 PRECEDING AND CURRENT ROW) from ${name}_n_x SETTINGS optimize_read_in_order=0,optimize_read_in_window_order=0" | grep -i "sort description"
 
 echo '  optimize_read_in_window_order=1'
-$CLICKHOUSE_CLIENT -q "explain plan actions=1, description=1 select n, sum(x) OVER (ORDER BY n, x ROWS BETWEEN 100 PRECEDING AND CURRENT ROW) from ${name}_n_x SETTINGS optimize_read_in_window_order=1" | grep -i "sort description"
+$CLICKHOUSE_CLIENT -q "explain plan actions=1, description=1 select n, sum(x) OVER (ORDER BY n, x ROWS BETWEEN 100 PRECEDING AND CURRENT ROW) from ${name}_n_x SETTINGS optimize_read_in_order=1" | grep -i "sort description"
 
 echo 'Complex ORDER BY'
 $CLICKHOUSE_CLIENT -q "CREATE TABLE ${name}_complex (unique1 Int32, unique2 Int32, ten Int32) ENGINE=MergeTree ORDER BY tuple() SETTINGS index_granularity = 8192"
 $CLICKHOUSE_CLIENT -q "INSERT INTO ${name}_complex VALUES (1, 2, 3), (2, 3, 4), (3, 4, 5)"
 echo '  optimize_read_in_window_order=0'
-$CLICKHOUSE_CLIENT -q "SELECT ten, sum(unique1) + sum(unique2) AS res, rank() OVER (ORDER BY sum(unique1) + sum(unique2) ASC) AS rank FROM ${name}_complex GROUP BY ten ORDER BY ten ASC SETTINGS optimize_read_in_window_order=0"
+$CLICKHOUSE_CLIENT -q "SELECT ten, sum(unique1) + sum(unique2) AS res, rank() OVER (ORDER BY sum(unique1) + sum(unique2) ASC) AS rank FROM ${name}_complex GROUP BY ten ORDER BY ten ASC SETTINGS optimize_read_in_order=0,optimize_read_in_window_order=0"
 echo '  optimize_read_in_window_order=1'
-$CLICKHOUSE_CLIENT -q "SELECT ten, sum(unique1) + sum(unique2) AS res, rank() OVER (ORDER BY sum(unique1) + sum(unique2) ASC) AS rank FROM ${name}_complex GROUP BY ten ORDER BY ten ASC SETTINGS optimize_read_in_window_order=1"
+$CLICKHOUSE_CLIENT -q "SELECT ten, sum(unique1) + sum(unique2) AS res, rank() OVER (ORDER BY sum(unique1) + sum(unique2) ASC) AS rank FROM ${name}_complex GROUP BY ten ORDER BY ten ASC SETTINGS optimize_read_in_order=1"
 
 $CLICKHOUSE_CLIENT -q "drop table ${name}"
 $CLICKHOUSE_CLIENT -q "drop table ${name}_n"
diff --git a/tests/queries/0_stateless/01655_plan_optimizations_optimize_read_in_window_order_long.sh b/tests/queries/0_stateless/01655_plan_optimizations_optimize_read_in_window_order_long.sh
index 297688a29c32..fc79725aebef 100755
--- a/tests/queries/0_stateless/01655_plan_optimizations_optimize_read_in_window_order_long.sh
+++ b/tests/queries/0_stateless/01655_plan_optimizations_optimize_read_in_window_order_long.sh
@@ -19,16 +19,16 @@ $CLICKHOUSE_CLIENT -q "create table ${name}_n_x engine=MergeTree order by (n, x)
 $CLICKHOUSE_CLIENT -q "optimize table ${name}_n final"
 $CLICKHOUSE_CLIENT -q "optimize table ${name}_n_x final"
 
-$CLICKHOUSE_CLIENT -q "select n, sum(x) OVER (ORDER BY n, x ROWS BETWEEN 100 PRECEDING AND CURRENT ROW) from ${name}_n SETTINGS optimize_read_in_window_order=0, max_memory_usage=$max_memory_usage, max_threads=1 format Null" 2>&1 | grep -F -q "MEMORY_LIMIT_EXCEEDED" && echo 'OK' || echo 'FAIL'
-$CLICKHOUSE_CLIENT -q "select n, sum(x) OVER (ORDER BY n, x ROWS BETWEEN 100 PRECEDING AND CURRENT ROW) from ${name}_n SETTINGS optimize_read_in_window_order=1, max_memory_usage=$max_memory_usage, max_threads=1 format Null"
+$CLICKHOUSE_CLIENT -q "select n, sum(x) OVER (ORDER BY n, x ROWS BETWEEN 100 PRECEDING AND CURRENT ROW) from ${name}_n SETTINGS optimize_read_in_order=0, optimize_read_in_window_order=0, max_memory_usage=$max_memory_usage, max_threads=1 format Null" 2>&1 | grep -F -q "MEMORY_LIMIT_EXCEEDED" && echo 'OK' || echo 'FAIL'
+$CLICKHOUSE_CLIENT -q "select n, sum(x) OVER (ORDER BY n, x ROWS BETWEEN 100 PRECEDING AND CURRENT ROW) from ${name}_n SETTINGS optimize_read_in_order=1, max_memory_usage=$max_memory_usage, max_threads=1 format Null"
 
-$CLICKHOUSE_CLIENT -q "select n, sum(x) OVER (ORDER BY n, x ROWS BETWEEN 100 PRECEDING AND CURRENT ROW) from ${name}_n_x SETTINGS optimize_read_in_window_order=0, max_memory_usage=$max_memory_usage, max_threads=1 format Null" 2>&1 | grep -F -q "MEMORY_LIMIT_EXCEEDED" && echo 'OK' || echo 'FAIL'
-$CLICKHOUSE_CLIENT -q "select n, sum(x) OVER (ORDER BY n, x ROWS BETWEEN 100 PRECEDING AND CURRENT ROW) from ${name}_n_x SETTINGS optimize_read_in_window_order=1, max_memory_usage=$max_memory_usage, max_threads=1 format Null"
+$CLICKHOUSE_CLIENT -q "select n, sum(x) OVER (ORDER BY n, x ROWS BETWEEN 100 PRECEDING AND CURRENT ROW) from ${name}_n_x SETTINGS optimize_read_in_order=0, optimize_read_in_window_order=0, max_memory_usage=$max_memory_usage, max_threads=1 format Null" 2>&1 | grep -F -q "MEMORY_LIMIT_EXCEEDED" && echo 'OK' || echo 'FAIL'
+$CLICKHOUSE_CLIENT -q "select n, sum(x) OVER (ORDER BY n, x ROWS BETWEEN 100 PRECEDING AND CURRENT ROW) from ${name}_n_x SETTINGS optimize_read_in_order=1, max_memory_usage=$max_memory_usage, max_threads=1 format Null"
 
-$CLICKHOUSE_CLIENT -q "select n, sum(x) OVER (PARTITION BY n ORDER BY x ROWS BETWEEN 100 PRECEDING AND CURRENT ROW) from ${name}_n_x SETTINGS optimize_read_in_window_order=0, max_memory_usage=$max_memory_usage, max_threads=1 format Null" 2>&1 | grep -F -q "MEMORY_LIMIT_EXCEEDED" && echo 'OK' || echo 'FAIL'
-$CLICKHOUSE_CLIENT -q "select n, sum(x) OVER (PARTITION BY n ORDER BY x ROWS BETWEEN 100 PRECEDING AND CURRENT ROW) from ${name}_n_x SETTINGS optimize_read_in_window_order=1, max_memory_usage=$max_memory_usage, max_threads=1 format Null"
+$CLICKHOUSE_CLIENT -q "select n, sum(x) OVER (PARTITION BY n ORDER BY x ROWS BETWEEN 100 PRECEDING AND CURRENT ROW) from ${name}_n_x SETTINGS optimize_read_in_order=0, optimize_read_in_window_order=0, max_memory_usage=$max_memory_usage, max_threads=1 format Null" 2>&1 | grep -F -q "MEMORY_LIMIT_EXCEEDED" && echo 'OK' || echo 'FAIL'
+$CLICKHOUSE_CLIENT -q "select n, sum(x) OVER (PARTITION BY n ORDER BY x ROWS BETWEEN 100 PRECEDING AND CURRENT ROW) from ${name}_n_x SETTINGS optimize_read_in_order=1, max_memory_usage=$max_memory_usage, max_threads=1 format Null"
 
-$CLICKHOUSE_CLIENT -q "select n, sum(x) OVER (PARTITION BY n+x%2 ORDER BY n, x ROWS BETWEEN 100 PRECEDING AND CURRENT ROW) from ${name}_n_x SETTINGS optimize_read_in_window_order=1, max_memory_usage=$max_memory_usage, max_threads=1 format Null" 2>&1 | grep -F -q "MEMORY_LIMIT_EXCEEDED" && echo 'OK' || echo 'FAIL'
+$CLICKHOUSE_CLIENT -q "select n, sum(x) OVER (PARTITION BY n+x%2 ORDER BY n, x ROWS BETWEEN 100 PRECEDING AND CURRENT ROW) from ${name}_n_x SETTINGS optimize_read_in_order=1, max_memory_usage=$max_memory_usage, max_threads=1 format Null" 2>&1 | grep -F -q "MEMORY_LIMIT_EXCEEDED" && echo 'OK' || echo 'FAIL'
 
 $CLICKHOUSE_CLIENT -q "drop table ${name}"
 $CLICKHOUSE_CLIENT -q "drop table ${name}_n"
diff --git a/tests/queries/0_stateless/01952_optimize_distributed_group_by_sharding_key.reference b/tests/queries/0_stateless/01952_optimize_distributed_group_by_sharding_key.reference
index 9592ed5691d6..9016e7311064 100644
--- a/tests/queries/0_stateless/01952_optimize_distributed_group_by_sharding_key.reference
+++ b/tests/queries/0_stateless/01952_optimize_distributed_group_by_sharding_key.reference
@@ -18,11 +18,12 @@ Union
 explain select distinct on (k1) k2 from remote('127.{1,2}', view(select 1 k1, 2 k2, 3 v from numbers(2)), cityHash64(k1, k2)); -- not optimized
 Expression (Projection)
   LimitBy
-    Expression (Before LIMIT BY)
-      Union
+    Union
+      Expression (Before LIMIT BY)
         LimitBy
           Expression ((Before LIMIT BY + (Before ORDER BY + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Projection + Before ORDER BY))))))
             ReadFromStorage (SystemNumbers)
+      Expression
         ReadFromRemote (Read from remote replica)
 explain select distinct on (k1, k2) v from remote('127.{1,2}', view(select 1 k1, 2 k2, 3 v from numbers(2)), cityHash64(k1, k2)); -- optimized
 Union
diff --git a/tests/queries/0_stateless/02155_read_in_order_max_rows_to_read.reference b/tests/queries/0_stateless/02155_read_in_order_max_rows_to_read.reference
index b73ab43cabb6..fc8a8ffc5511 100644
--- a/tests/queries/0_stateless/02155_read_in_order_max_rows_to_read.reference
+++ b/tests/queries/0_stateless/02155_read_in_order_max_rows_to_read.reference
@@ -4,3 +4,5 @@
 2
 3
 4
+10
+20
diff --git a/tests/queries/0_stateless/02155_read_in_order_max_rows_to_read.sql b/tests/queries/0_stateless/02155_read_in_order_max_rows_to_read.sql
index 9846c1208a13..314d0610d128 100644
--- a/tests/queries/0_stateless/02155_read_in_order_max_rows_to_read.sql
+++ b/tests/queries/0_stateless/02155_read_in_order_max_rows_to_read.sql
@@ -13,8 +13,7 @@ SELECT a FROM t_max_rows_to_read WHERE a = 10 SETTINGS max_rows_to_read = 4;
 
 SELECT a FROM t_max_rows_to_read ORDER BY a LIMIT 5 SETTINGS max_rows_to_read = 12;
 
--- This should work, but actually it doesn't. Need to investigate.
--- SELECT a FROM t_max_rows_to_read WHERE a > 10 ORDER BY a LIMIT 5 SETTINGS max_rows_to_read = 20;
+SELECT a FROM t_max_rows_to_read WHERE a = 10 OR a = 20 SETTINGS max_rows_to_read = 12;
 
 SELECT a FROM t_max_rows_to_read ORDER BY a LIMIT 20 FORMAT Null SETTINGS max_rows_to_read = 12; -- { serverError 158 }
 SELECT a FROM t_max_rows_to_read WHERE a > 10 ORDER BY a LIMIT 5 FORMAT Null SETTINGS max_rows_to_read = 12; -- { serverError 158 }
diff --git a/tests/queries/0_stateless/02317_distinct_in_order_optimization_explain.reference b/tests/queries/0_stateless/02317_distinct_in_order_optimization_explain.reference
index 2511c806e1bf..f85b9cd9e866 100644
--- a/tests/queries/0_stateless/02317_distinct_in_order_optimization_explain.reference
+++ b/tests/queries/0_stateless/02317_distinct_in_order_optimization_explain.reference
@@ -59,8 +59,6 @@ Sorting (Stream): a ASC, b ASC
 -- check that reading in order optimization for ORDER BY and DISTINCT applied correctly in the same query
 -- disabled, check that sorting description for ReadFromMergeTree match ORDER BY columns
 Sorting (Stream): a ASC
-Sorting (Stream): a ASC
-Sorting (Stream): a ASC
 -- enabled, check that ReadFromMergeTree sorting description is overwritten by DISTINCT optimization i.e. it contains columns from DISTINCT clause
 Sorting (Stream): a ASC, b ASC
 Sorting (Stream): a ASC, b ASC
@@ -71,12 +69,8 @@ Sorting (Stream): a DESC, b DESC
 Sorting (Stream): a DESC, b DESC
 -- enabled, check that ReadFromMergeTree sorting description is NOT overwritten by DISTINCT optimization (1), - it contains columns from ORDER BY clause
 Sorting (Stream): a ASC, b ASC
-Sorting (Stream): a ASC, b ASC
-Sorting (Stream): a ASC, b ASC
 -- enabled, check that ReadFromMergeTree sorting description is NOT overwritten by DISTINCT optimization (2), - direction used from ORDER BY clause
 Sorting (Stream): a DESC, b DESC
-Sorting (Stream): a DESC, b DESC
-Sorting (Stream): a DESC, b DESC
 -- enabled, check that disabling other 'read in order' optimizations do not disable distinct in order optimization
 Sorting (Stream): a ASC, b ASC
 Sorting (Stream): a ASC, b ASC
diff --git a/tests/queries/0_stateless/02377_optimize_sorting_by_input_stream_properties_explain.reference b/tests/queries/0_stateless/02377_optimize_sorting_by_input_stream_properties_explain.reference
index a7498e68bc08..ba924f5daa2d 100644
--- a/tests/queries/0_stateless/02377_optimize_sorting_by_input_stream_properties_explain.reference
+++ b/tests/queries/0_stateless/02377_optimize_sorting_by_input_stream_properties_explain.reference
@@ -1,82 +1,86 @@
 -- EXPLAIN PLAN sorting for MergeTree w/o sorting key
--- QUERY: set optimize_read_in_order=1;EXPLAIN PLAN actions=1, header=1, sorting=1 SELECT a FROM optimize_sorting ORDER BY a
+-- QUERY: set optimize_read_in_order=1;set max_threads=3;EXPLAIN PLAN actions=1, header=1, sorting=1 SELECT a FROM optimize_sorting ORDER BY a
 Sorting (Global): a ASC
 Sorting (Sorting for ORDER BY)
 Sorting (Global): a ASC
 Sorting (None)
 Sorting (None)
 -- disable optimization -> sorting order is NOT propagated from subquery -> full sort
--- QUERY: set optimize_sorting_by_input_stream_properties=0;set max_threads=1;EXPLAIN PIPELINE SELECT a FROM (SELECT a FROM optimize_sorting) ORDER BY a
-MergeSortingTransform
-LimitsCheckingTransform
-PartialSortingTransform
+-- QUERY: set optimize_sorting_by_input_stream_properties=0;set query_plan_read_in_order=0;set max_threads=3;EXPLAIN PIPELINE SELECT a FROM (SELECT a FROM optimize_sorting) ORDER BY a
+MergingSortedTransform 3 → 1
+MergeSortingTransform × 3
+LimitsCheckingTransform × 3
+PartialSortingTransform × 3
 -- enable optimization -> sorting order is propagated from subquery -> merge sort
--- QUERY: set optimize_sorting_by_input_stream_properties=1;set max_threads=1;EXPLAIN PIPELINE SELECT a FROM (SELECT a FROM optimize_sorting) ORDER BY a
-MergeSortingTransform
+-- QUERY: set optimize_sorting_by_input_stream_properties=1;set query_plan_read_in_order=1;set optimize_read_in_order=1;set max_threads=3;EXPLAIN PIPELINE SELECT a FROM (SELECT a FROM optimize_sorting) ORDER BY a
+MergingSortedTransform 3 → 1
 -- enable optimization -> there is no sorting order to propagate from subquery -> full sort
--- QUERY: set optimize_sorting_by_input_stream_properties=1;set max_threads=1;EXPLAIN PIPELINE SELECT c FROM (SELECT c FROM optimize_sorting) ORDER BY c
-MergeSortingTransform
-LimitsCheckingTransform
-PartialSortingTransform
+-- QUERY: set optimize_sorting_by_input_stream_properties=1;set query_plan_read_in_order=1;set optimize_read_in_order=1;set max_threads=3;EXPLAIN PIPELINE SELECT c FROM (SELECT c FROM optimize_sorting) ORDER BY c
+MergingSortedTransform 3 → 1
+MergeSortingTransform × 3
+LimitsCheckingTransform × 3
+PartialSortingTransform × 3
 -- ExpressionStep preserves sort mode
--- QUERY: set optimize_read_in_order=1;EXPLAIN PLAN actions=1, header=1, sorting=1 SELECT a FROM optimize_sorting ORDER BY a
+-- QUERY: set optimize_read_in_order=1;set max_threads=3;EXPLAIN PLAN actions=1, header=1, sorting=1 SELECT a FROM optimize_sorting ORDER BY a
 Sorting (Global): a ASC
+Sorting (Sorting for ORDER BY)
 Sorting (Global): a ASC
+Sorting (Chunk): a ASC
 Sorting (Stream): a ASC
-Sorting (Stream): a ASC
--- QUERY: set optimize_read_in_order=1;EXPLAIN PLAN actions=1, header=1, sorting=1 SELECT a FROM optimize_sorting ORDER BY a+1
+-- QUERY: set optimize_read_in_order=1;set max_threads=3;EXPLAIN PLAN actions=1, header=1, sorting=1 SELECT a FROM optimize_sorting ORDER BY a+1
 Sorting (None)
 Sorting (Sorting for ORDER BY)
 Sorting (Global): plus(a, 1) ASC
 Sorting (Chunk): a ASC
 Sorting (Chunk): a ASC
 -- ExpressionStep breaks sort mode
--- QUERY: set optimize_read_in_order=1;EXPLAIN PLAN actions=1, header=1, sorting=1 SELECT a+1 FROM optimize_sorting ORDER BY a+1
+-- QUERY: set optimize_read_in_order=1;set max_threads=3;EXPLAIN PLAN actions=1, header=1, sorting=1 SELECT a+1 FROM optimize_sorting ORDER BY a+1
 Sorting (Global): plus(a, 1) ASC
 Sorting (Sorting for ORDER BY)
 Sorting (Global): plus(a, 1) ASC
 Sorting (None)
 Sorting (Chunk): a ASC
 -- FilterStep preserves sort mode
--- QUERY: set optimize_read_in_order=1;EXPLAIN PLAN actions=1, header=1, sorting=1 SELECT a FROM optimize_sorting WHERE a > 0
+-- QUERY: set optimize_read_in_order=1;set max_threads=3;EXPLAIN PLAN actions=1, header=1, sorting=1 SELECT a FROM optimize_sorting WHERE a > 0
 Sorting (Chunk): a ASC
 Sorting (Chunk): a ASC
 Sorting (Chunk): a ASC
--- QUERY: set optimize_read_in_order=1;EXPLAIN PLAN actions=1, header=1, sorting=1 SELECT a FROM optimize_sorting WHERE a+1 > 0
+-- QUERY: set optimize_read_in_order=1;set max_threads=3;EXPLAIN PLAN actions=1, header=1, sorting=1 SELECT a FROM optimize_sorting WHERE a+1 > 0
 Sorting (Chunk): a ASC
 Sorting (Chunk): a ASC
 Sorting (Chunk): a ASC
--- QUERY: set optimize_read_in_order=1;EXPLAIN PLAN actions=1, header=1, sorting=1 SELECT a, a+1 FROM optimize_sorting WHERE a+1 > 0
+-- QUERY: set optimize_read_in_order=1;set max_threads=3;EXPLAIN PLAN actions=1, header=1, sorting=1 SELECT a, a+1 FROM optimize_sorting WHERE a+1 > 0
 Sorting (Chunk): a ASC
 Sorting (Chunk): a ASC
 Sorting (Chunk): a ASC
 -- FilterStep breaks sort mode
--- QUERY: set optimize_read_in_order=1;EXPLAIN PLAN actions=1, header=1, sorting=1 SELECT a > 0 FROM optimize_sorting WHERE a > 0
+-- QUERY: set optimize_read_in_order=1;set max_threads=3;EXPLAIN PLAN actions=1, header=1, sorting=1 SELECT a > 0 FROM optimize_sorting WHERE a > 0
 Sorting (None)
 Sorting (None)
 Sorting (Chunk): a ASC
--- QUERY: set optimize_read_in_order=1;EXPLAIN PLAN actions=1, header=1, sorting=1 SELECT a+1 FROM optimize_sorting WHERE a+1 > 0
+-- QUERY: set optimize_read_in_order=1;set max_threads=3;EXPLAIN PLAN actions=1, header=1, sorting=1 SELECT a+1 FROM optimize_sorting WHERE a+1 > 0
 Sorting (None)
 Sorting (None)
 Sorting (Chunk): a ASC
 -- aliases break sorting order
--- QUERY: set optimize_read_in_order=1;EXPLAIN PLAN actions=1, header=1, sorting=1 SELECT a FROM (SELECT sipHash64(a) AS a FROM (SELECT a FROM optimize_sorting ORDER BY a)) ORDER BY a
+-- QUERY: set optimize_read_in_order=1;set max_threads=3;EXPLAIN PLAN actions=1, header=1, sorting=1 SELECT a FROM (SELECT sipHash64(a) AS a FROM (SELECT a FROM optimize_sorting ORDER BY a)) ORDER BY a
 Sorting (Global): a ASC
 Sorting (Sorting for ORDER BY)
 Sorting (Global): a ASC
 Sorting (None)
+Sorting (Sorting for ORDER BY)
 Sorting (Global): a ASC
-Sorting (Stream): a ASC
+Sorting (Chunk): a ASC
 Sorting (Stream): a ASC
 -- aliases DONT break sorting order
--- QUERY: set optimize_read_in_order=1;EXPLAIN PLAN actions=1, header=1, sorting=1 SELECT a, b FROM (SELECT x AS a, y AS b FROM (SELECT a AS x, b AS y FROM optimize_sorting) ORDER BY x, y)
+-- QUERY: set optimize_read_in_order=1;set max_threads=3;EXPLAIN PLAN actions=1, header=1, sorting=1 SELECT a, b FROM (SELECT x AS a, y AS b FROM (SELECT a AS x, b AS y FROM optimize_sorting) ORDER BY x, y)
 Sorting (Global): x ASC, y ASC
 Sorting (Sorting for ORDER BY)
 Sorting (Global): x ASC, y ASC
 Sorting (Chunk): a ASC, b ASC
-Sorting (Chunk): a ASC, b ASC
+Sorting (Stream): a ASC, b ASC
 -- actions chain breaks sorting order: input(column a)->sipHash64(column a)->alias(sipHash64(column a), a)->plus(alias a, 1)
--- QUERY: set optimize_read_in_order=1;EXPLAIN PLAN actions=1, header=1, sorting=1 SELECT a, z FROM (SELECT sipHash64(a) AS a, a + 1 AS z FROM (SELECT a FROM optimize_sorting ORDER BY a + 1)) ORDER BY a + 1
+-- QUERY: set optimize_read_in_order=1;set max_threads=3;EXPLAIN PLAN actions=1, header=1, sorting=1 SELECT a, z FROM (SELECT sipHash64(a) AS a, a + 1 AS z FROM (SELECT a FROM optimize_sorting ORDER BY a + 1)) ORDER BY a + 1
 Sorting (None)
 Sorting (Sorting for ORDER BY)
 Sorting (Global): plus(a, 1) ASC
@@ -86,8 +90,9 @@ Sorting (Global): plus(a, 1) ASC
 Sorting (Chunk): a ASC
 Sorting (Chunk): a ASC
 -- check that correct sorting info is provided in case of only prefix of sorting key is in ORDER BY clause but all sorting key columns returned by query
--- QUERY: set optimize_read_in_order=1;EXPLAIN PLAN sorting=1 SELECT a, b FROM optimize_sorting ORDER BY a
+-- QUERY: set optimize_read_in_order=1;set max_threads=3;EXPLAIN PLAN sorting=1 SELECT a, b FROM optimize_sorting ORDER BY a
 Sorting (Global): a ASC
+Sorting (Sorting for ORDER BY)
 Sorting (Global): a ASC
-Sorting (Stream): a ASC
+Sorting (Chunk): a ASC, b ASC
 Sorting (Stream): a ASC
diff --git a/tests/queries/0_stateless/02377_optimize_sorting_by_input_stream_properties_explain.sh b/tests/queries/0_stateless/02377_optimize_sorting_by_input_stream_properties_explain.sh
index a308d9bcbc1a..62051701cb6a 100755
--- a/tests/queries/0_stateless/02377_optimize_sorting_by_input_stream_properties_explain.sh
+++ b/tests/queries/0_stateless/02377_optimize_sorting_by_input_stream_properties_explain.sh
@@ -4,9 +4,9 @@ CURDIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
 # shellcheck source=../shell_config.sh
 . "$CURDIR"/../shell_config.sh
 
-DISABLE_OPTIMIZATION="set optimize_sorting_by_input_stream_properties=0;set max_threads=1"
-ENABLE_OPTIMIZATION="set optimize_sorting_by_input_stream_properties=1;set max_threads=1"
-MAKE_OUTPUT_STABLE="set optimize_read_in_order=1"
+DISABLE_OPTIMIZATION="set optimize_sorting_by_input_stream_properties=0;set query_plan_read_in_order=0;set max_threads=3"
+ENABLE_OPTIMIZATION="set optimize_sorting_by_input_stream_properties=1;set query_plan_read_in_order=1;set optimize_read_in_order=1;set max_threads=3"
+MAKE_OUTPUT_STABLE="set optimize_read_in_order=1;set max_threads=3"
 GREP_SORTING="grep 'PartialSortingTransform\|LimitsCheckingTransform\|MergeSortingTransform\|MergingSortedTransform'"
 GREP_SORTMODE="grep 'Sorting ('"
 TRIM_LEADING_SPACES="sed -e 's/^[ \t]*//'"
diff --git a/tests/queries/0_stateless/02381_join_dup_columns_in_plan.reference b/tests/queries/0_stateless/02381_join_dup_columns_in_plan.reference
index d2f1b4efdd51..bbf288c45d7a 100644
--- a/tests/queries/0_stateless/02381_join_dup_columns_in_plan.reference
+++ b/tests/queries/0_stateless/02381_join_dup_columns_in_plan.reference
@@ -8,22 +8,19 @@ Header: key String
     Header: key String
       ReadFromStorage
       Header: dummy UInt8
-    Expression
+    Union
     Header: s2.key String
             value String
-      Union
-      Header: key String
+      Expression
+      Header: s2.key String
               value String
-        Expression
-        Header: key String
-                value String
-          ReadFromStorage
-          Header: dummy UInt8
-        Expression
-        Header: key String
-                value String
-          ReadFromStorage
-          Header: dummy UInt8
+        ReadFromStorage
+        Header: dummy UInt8
+      Expression
+      Header: s2.key String
+              value String
+        ReadFromStorage
+        Header: dummy UInt8
 Expression
 Header: key String
         value String
@@ -40,19 +37,16 @@ Header: key String
     Sorting
     Header: s2.key String
             value String
-      Expression
+      Union
       Header: s2.key String
               value String
-        Union
-        Header: key String
+        Expression
+        Header: s2.key String
                 value String
-          Expression
-          Header: key String
-                  value String
-            ReadFromStorage
-            Header: dummy UInt8
-          Expression
-          Header: key String
-                  value String
-            ReadFromStorage
-            Header: dummy UInt8
+          ReadFromStorage
+          Header: dummy UInt8
+        Expression
+        Header: s2.key String
+                value String
+          ReadFromStorage
+          Header: dummy UInt8
