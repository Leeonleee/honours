{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 28633,
  "instance_id": "ClickHouse__ClickHouse-28633",
  "issue_numbers": [
    "25963"
  ],
  "base_commit": "cd1e72e312de0af9b5982137dea7f7f9bdbff16f",
  "patch": "diff --git a/src/Common/ErrorCodes.cpp b/src/Common/ErrorCodes.cpp\nindex 53276f5b1960..b6d9b65c28bc 100644\n--- a/src/Common/ErrorCodes.cpp\n+++ b/src/Common/ErrorCodes.cpp\n@@ -588,6 +588,7 @@\n     M(618, LZ4_DECODER_FAILED) \\\n     M(619, POSTGRESQL_REPLICATION_INTERNAL_ERROR) \\\n     M(620, QUERY_NOT_ALLOWED) \\\n+    M(621, CANNOT_NORMALIZE_STRING) \\\n     \\\n     M(999, KEEPER_EXCEPTION) \\\n     M(1000, POCO_EXCEPTION) \\\ndiff --git a/src/Functions/normalizeString.cpp b/src/Functions/normalizeString.cpp\nnew file mode 100644\nindex 000000000000..5beca566cd10\n--- /dev/null\n+++ b/src/Functions/normalizeString.cpp\n@@ -0,0 +1,182 @@\n+#if !defined(ARCADIA_BUILD)\n+#    include \"config_core.h\"\n+#endif\n+\n+#if USE_ICU\n+#include <Functions/FunctionFactory.h>\n+#include <Functions/FunctionStringToString.h>\n+#include <unicode/rep.h>\n+#include <unicode/unistr.h>\n+#include <unicode/unorm2.h>\n+#include <unicode/ustring.h>\n+#include <unicode/utypes.h>\n+#include \"common/logger_useful.h\"\n+#include \"Columns/ColumnString.h\"\n+#include \"Parsers/IAST_fwd.h\"\n+\n+namespace DB\n+{\n+\n+namespace ErrorCodes\n+{\n+    extern const int ILLEGAL_COLUMN;\n+    extern const int CANNOT_NORMALIZE_STRING;\n+}\n+\n+namespace\n+{\n+\n+// Expansion factors are specified for UTF-32, since icu uses UTF-32 for normalization\n+// Maximum expansion factors for different normalization forms\n+// https://unicode.org/faq/normalization.html#12\n+\n+struct NormalizeNFCImpl\n+{\n+    static constexpr auto name = \"normalizeUTF8NFC\";\n+\n+    static constexpr auto expansionFactor = 3;\n+\n+    static const UNormalizer2 *getNormalizer(UErrorCode *err)\n+    {\n+        return unorm2_getNFCInstance(err);\n+    }\n+};\n+\n+struct NormalizeNFDImpl\n+{\n+    static constexpr auto name = \"normalizeUTF8NFD\";\n+\n+    static constexpr auto expansionFactor = 4;\n+\n+    static const UNormalizer2 *getNormalizer(UErrorCode *err)\n+    {\n+        return unorm2_getNFDInstance(err);\n+    }\n+};\n+\n+struct NormalizeNFKCImpl\n+{\n+    static constexpr auto name = \"normalizeUTF8NFKC\";\n+\n+    static constexpr auto expansionFactor = 18;\n+\n+    static const UNormalizer2 *getNormalizer(UErrorCode *err)\n+    {\n+        return unorm2_getNFKCInstance(err);\n+    }\n+};\n+\n+\n+struct NormalizeNFKDImpl\n+{\n+    static constexpr auto name = \"normalizeUTF8NFKD\";\n+\n+    static constexpr auto expansionFactor = 18;\n+\n+    static const UNormalizer2 *getNormalizer(UErrorCode *err)\n+    {\n+        return unorm2_getNFKDInstance(err);\n+    }\n+};\n+\n+template<typename NormalizeImpl>\n+struct NormalizeUTF8Impl\n+{\n+\n+    static void vector(const ColumnString::Chars & data,\n+        const ColumnString::Offsets & offsets,\n+        ColumnString::Chars & res_data,\n+        ColumnString::Offsets & res_offsets)\n+    {\n+        UErrorCode err = U_ZERO_ERROR;\n+\n+        const UNormalizer2 *normalizer = NormalizeImpl::getNormalizer(&err);\n+        if (U_FAILURE(err))\n+            throw Exception(ErrorCodes::CANNOT_NORMALIZE_STRING, \"Normalization failed (getNormalizer): {}\", u_errorName(err));\n+\n+        size_t size = offsets.size();\n+        res_offsets.resize(size);\n+\n+        ColumnString::Offset current_from_offset = 0;\n+        ColumnString::Offset current_to_offset = 0;\n+\n+        icu::UnicodeString to_string;\n+\n+        PODArray<UChar> from_uchars;\n+        PODArray<UChar> to_uchars;\n+\n+        for (size_t i = 0; i < size; ++i)\n+        {\n+            size_t from_size = offsets[i] - current_from_offset - 1;\n+\n+            from_uchars.resize(from_size + 1);\n+            int32_t from_code_points;\n+            u_strFromUTF8(\n+                from_uchars.data(),\n+                from_uchars.size(),\n+                &from_code_points,\n+                reinterpret_cast<const char*>(&data[current_from_offset]),\n+                from_size,\n+                &err);\n+            if (U_FAILURE(err))\n+                throw Exception(ErrorCodes::CANNOT_NORMALIZE_STRING, \"Normalization failed (strFromUTF8): {}\", u_errorName(err));\n+\n+            to_uchars.resize(from_code_points * NormalizeImpl::expansionFactor + 1);\n+\n+            int32_t to_code_points = unorm2_normalize(\n+                normalizer,\n+                from_uchars.data(),\n+                from_code_points,\n+                to_uchars.data(),\n+                to_uchars.size(),\n+                &err);\n+            if (U_FAILURE(err))\n+                throw Exception(ErrorCodes::CANNOT_NORMALIZE_STRING, \"Normalization failed (normalize): {}\", u_errorName(err));\n+\n+            size_t max_to_size = current_to_offset + 4 * to_code_points + 1;\n+            if (res_data.size() < max_to_size)\n+                res_data.resize(max_to_size);\n+\n+            int32_t to_size;\n+            u_strToUTF8(\n+                reinterpret_cast<char*>(&res_data[current_to_offset]),\n+                res_data.size() - current_to_offset,\n+                &to_size,\n+                to_uchars.data(),\n+                to_code_points,\n+                &err);\n+            if (U_FAILURE(err))\n+                throw Exception(ErrorCodes::CANNOT_NORMALIZE_STRING, \"Normalization failed (strToUTF8): {}\", u_errorName(err));\n+\n+            current_to_offset += to_size;\n+            res_data[current_to_offset] = 0;\n+            ++current_to_offset;\n+            res_offsets[i] = current_to_offset;\n+\n+            current_from_offset = offsets[i];\n+        }\n+    }\n+\n+    [[noreturn]] static void vectorFixed(const ColumnString::Chars &, size_t, ColumnString::Chars &)\n+    {\n+        throw Exception(\"Cannot apply function normalizeUTF8 to fixed string.\", ErrorCodes::ILLEGAL_COLUMN);\n+    }\n+};\n+\n+using FunctionNormalizeUTF8NFC = FunctionStringToString<NormalizeUTF8Impl<NormalizeNFCImpl>, NormalizeNFCImpl>;\n+using FunctionNormalizeUTF8NFD = FunctionStringToString<NormalizeUTF8Impl<NormalizeNFDImpl>, NormalizeNFDImpl>;\n+using FunctionNormalizeUTF8NFKC = FunctionStringToString<NormalizeUTF8Impl<NormalizeNFKCImpl>, NormalizeNFKCImpl>;\n+using FunctionNormalizeUTF8NFKD = FunctionStringToString<NormalizeUTF8Impl<NormalizeNFKDImpl>, NormalizeNFKDImpl>;\n+}\n+\n+void registerFunctionNormalizeUTF8(FunctionFactory & factory)\n+{\n+    factory.registerFunction<FunctionNormalizeUTF8NFC>();\n+    factory.registerFunction<FunctionNormalizeUTF8NFD>();\n+    factory.registerFunction<FunctionNormalizeUTF8NFKC>();\n+    factory.registerFunction<FunctionNormalizeUTF8NFKD>();\n+}\n+\n+}\n+\n+#endif\ndiff --git a/src/Functions/registerFunctionsString.cpp b/src/Functions/registerFunctionsString.cpp\nindex ba6a294abbac..f2439a3373bb 100644\n--- a/src/Functions/registerFunctionsString.cpp\n+++ b/src/Functions/registerFunctionsString.cpp\n@@ -52,6 +52,10 @@ void registerFunctionSynonyms(FunctionFactory &);\n void registerFunctionLemmatize(FunctionFactory &);\n #endif\n \n+#if USE_ICU\n+void registerFunctionNormalizeUTF8(FunctionFactory &);\n+#endif\n+\n void registerFunctionsString(FunctionFactory & factory)\n {\n     registerFunctionRepeat(factory);\n@@ -97,6 +101,10 @@ void registerFunctionsString(FunctionFactory & factory)\n     registerFunctionSynonyms(factory);\n     registerFunctionLemmatize(factory);\n #endif\n+\n+#if USE_ICU\n+    registerFunctionNormalizeUTF8(factory);\n+#endif\n }\n \n }\n",
  "test_patch": "diff --git a/tests/performance/normalize_utf8.xml b/tests/performance/normalize_utf8.xml\nnew file mode 100644\nindex 000000000000..de9bd87fdf82\n--- /dev/null\n+++ b/tests/performance/normalize_utf8.xml\n@@ -0,0 +1,15 @@\n+<test>\n+    <preconditions>\n+        <table_exists>hits_10m_single</table_exists>\n+    </preconditions>\n+\n+    <create_query>CREATE TABLE strings (words String) ENGINE Memory</create_query>\n+    <fill_query>INSERT INTO strings SELECT SearchPhrase FROM hits_10m_single WHERE length(SearchPhrase) > 0</fill_query>\n+\n+    <query>SELECT normalizeUTF8NFC(words) FROM strings FORMAT Null</query>\n+    <query>SELECT normalizeUTF8NFD(words) FROM strings FORMAT Null</query>\n+    <query>SELECT normalizeUTF8NFKC(words) FROM strings FORMAT Null</query>\n+    <query>SELECT normalizeUTF8NFKD(words) FROM strings FORMAT Null</query>\n+\n+    <drop_query>DROP TABLE IF EXISTS strings</drop_query>\n+</test>\ndiff --git a/tests/queries/0_stateless/02011_normalize_utf8.reference b/tests/queries/0_stateless/02011_normalize_utf8.reference\nnew file mode 100644\nindex 000000000000..b97f0ee5a01b\n--- /dev/null\n+++ b/tests/queries/0_stateless/02011_normalize_utf8.reference\n@@ -0,0 +1,11 @@\n+\u0451\t\u0435\u0308\t2\t4\t\u0451\t\u0451\t2\t2\n+1\t\u0435\u0308\t4\t\u0451\t2\t\u0435\u0308\t4\t\u0451\t2\t\u0435\u0308\t4\n+2\t\u0451\t2\t\u0451\t2\t\u0435\u0308\t4\t\u0451\t2\t\u0435\u0308\t4\n+3\t\u0c1c\u0c4d\u0c1e\u200c\u0c3e\t15\t\u0c1c\u0c4d\u0c1e\u200c\u0c3e\t15\t\u0c1c\u0c4d\u0c1e\u200c\u0c3e\t15\t\u0c1c\u0c4d\u0c1e\u200c\u0c3e\t15\t\u0c1c\u0c4d\u0c1e\u200c\u0c3e\t15\n+4\t\u672c\u6c17\u3067\u3059\u304b\t15\t\u672c\u6c17\u3067\u3059\u304b\t15\t\u672c\u6c17\u3066\u3099\u3059\u304b\t18\t\u672c\u6c17\u3067\u3059\u304b\t15\t\u672c\u6c17\u3066\u3099\u3059\u304b\t18\n+5\t\ufdfa\t3\t\ufdfa\t3\t\ufdfa\t3\t\u0635\u0644\u0649 \u0627\u0644\u0644\u0647 \u0639\u0644\u064a\u0647 \u0648\u0633\u0644\u0645\t33\t\u0635\u0644\u0649 \u0627\u0644\u0644\u0647 \u0639\u0644\u064a\u0647 \u0648\u0633\u0644\u0645\t33\n+6\t\u1f82\t3\t\u1f82\t3\t\u03b1\u0313\u0300\u0345\t8\t\u1f82\t3\t\u03b1\u0313\u0300\u0345\t8\n+7\t\u0390\t2\t\u0390\t2\t\u03b9\u0308\u0301\t6\t\u0390\t2\t\u03b9\u0308\u0301\t6\n+8\t\u05e9\u05bc\u05c1\t6\t\u05e9\u05bc\u05c1\t6\t\u05e9\u05bc\u05c1\t6\t\u05e9\u05bc\u05c1\t6\t\u05e9\u05bc\u05c1\t6\n+9\t\ud834\udd58\ud834\udd65\ud834\udd6e\t12\t\ud834\udd58\ud834\udd65\ud834\udd6e\t12\t\ud834\udd58\ud834\udd65\ud834\udd6e\t12\t\ud834\udd58\ud834\udd65\ud834\udd6e\t12\t\ud834\udd58\ud834\udd65\ud834\udd6e\t12\n+10\tQ\u0339\u0323\u0329\u032d\u0330\u0330\u0339\u0304\u036c\u033f\u034b\u0303\u1e77\u032c\u0330\u0365e\u0318\u035a\u0348\u0330\u033a\u030d\u0350s\u034e\u031c\u0316t\u0354\u0323\u032f\u0332\u031c\u0320\u0363\u0311\u0368\u0309\u0308\u0308o\u0332\u0359\u033a\u034a\u036f\u0363\u0310\u030b\u0302\u0314 \u0333\u0349\u034d\u0312\u0302\u00e8\u0317\u0365\u036f\u0368\u030d\u036e\u035b \u0326\u0339\u0323\u0330\u0310\u0305\u0311\u0351\u0305\u0302t\u0359\u032d\u033b\u0316\u035b\u033ee\u033a\u0359\u0363\u0352\u031a\u1e63\u0320\u0349\u0353\u0354\u0332\u0326\u030et\u0316\u0356\u031d\u0353\u0323\u036d\u0351\u0308\u0301\u0302\u1ecf\u0325\u0355\u0348\u035b\u0313 \u0300\u0366\u033d\u0345Z\u036f\u0311\u030ea\u0346l\u033b\u0368\u030b\u0367\u0363\u0368\u036cg\u0349\u0319\u031f\u033e\u0305\u033e\u036co\u0320\u036e\u0352\t281\tQ\u0339\u0323\u0329\u032d\u0330\u0330\u0339\u0304\u036c\u033f\u034b\u0303\u1e77\u032c\u0330\u0365e\u0318\u035a\u0348\u0330\u033a\u030d\u0350s\u034e\u031c\u0316t\u0354\u0323\u032f\u0332\u031c\u0320\u0363\u0311\u0368\u0309\u0308\u0308o\u0332\u0359\u033a\u034a\u036f\u0363\u0310\u030b\u0302\u0314 \u0333\u0349\u034d\u0312\u0302\u00e8\u0317\u0365\u036f\u0368\u030d\u036e\u035b \u0326\u0339\u0323\u0330\u0310\u0305\u0311\u0351\u0305\u0302t\u0359\u032d\u033b\u0316\u035b\u033ee\u033a\u0359\u0363\u0352\u031a\u1e63\u0320\u0349\u0353\u0354\u0332\u0326\u030et\u0316\u0356\u031d\u0353\u0323\u036d\u0351\u0308\u0301\u0302\u1ecf\u0325\u0355\u0348\u035b\u0313 \u0300\u0366\u033d\u0345Z\u036f\u0311\u030ea\u0346l\u033b\u0368\u030b\u0367\u0363\u0368\u036cg\u0349\u0319\u031f\u033e\u0305\u033e\u036co\u0320\u036e\u0352\t281\tQ\u0339\u0323\u0329\u032d\u0330\u0330\u0339\u0304\u036c\u033f\u034b\u0303u\u032d\u032c\u0330\u0365e\u0318\u035a\u0348\u0330\u033a\u030d\u0350s\u034e\u031c\u0316t\u0354\u0323\u032f\u0332\u031c\u0320\u0363\u0311\u0368\u0309\u0308\u0308o\u0332\u0359\u033a\u034a\u036f\u0363\u0310\u030b\u0302\u0314 \u0333\u0349\u034d\u0312\u0302e\u0317\u0300\u0365\u036f\u0368\u030d\u036e\u035b \u0326\u0339\u0323\u0330\u0310\u0305\u0311\u0351\u0305\u0302t\u0359\u032d\u033b\u0316\u035b\u033ee\u033a\u0359\u0363\u0352\u031as\u0323\u0320\u0349\u0353\u0354\u0332\u0326\u030et\u0316\u0356\u031d\u0353\u0323\u036d\u0351\u0308\u0301\u0302o\u0325\u0355\u0348\u0309\u035b\u0313 \u0300\u0366\u033d\u0345Z\u036f\u0311\u030ea\u0346l\u033b\u0368\u030b\u0367\u0363\u0368\u036cg\u0349\u0319\u031f\u033e\u0305\u033e\u036co\u0320\u036e\u0352\t282\tQ\u0339\u0323\u0329\u032d\u0330\u0330\u0339\u0304\u036c\u033f\u034b\u0303\u1e77\u032c\u0330\u0365e\u0318\u035a\u0348\u0330\u033a\u030d\u0350s\u034e\u031c\u0316t\u0354\u0323\u032f\u0332\u031c\u0320\u0363\u0311\u0368\u0309\u0308\u0308o\u0332\u0359\u033a\u034a\u036f\u0363\u0310\u030b\u0302\u0314 \u0333\u0349\u034d\u0312\u0302\u00e8\u0317\u0365\u036f\u0368\u030d\u036e\u035b \u0326\u0339\u0323\u0330\u0310\u0305\u0311\u0351\u0305\u0302t\u0359\u032d\u033b\u0316\u035b\u033ee\u033a\u0359\u0363\u0352\u031a\u1e63\u0320\u0349\u0353\u0354\u0332\u0326\u030et\u0316\u0356\u031d\u0353\u0323\u036d\u0351\u0308\u0301\u0302\u1ecf\u0325\u0355\u0348\u035b\u0313 \u0300\u0366\u033d\u0345Z\u036f\u0311\u030ea\u0346l\u033b\u0368\u030b\u0367\u0363\u0368\u036cg\u0349\u0319\u031f\u033e\u0305\u033e\u036co\u0320\u036e\u0352\t281\tQ\u0339\u0323\u0329\u032d\u0330\u0330\u0339\u0304\u036c\u033f\u034b\u0303u\u032d\u032c\u0330\u0365e\u0318\u035a\u0348\u0330\u033a\u030d\u0350s\u034e\u031c\u0316t\u0354\u0323\u032f\u0332\u031c\u0320\u0363\u0311\u0368\u0309\u0308\u0308o\u0332\u0359\u033a\u034a\u036f\u0363\u0310\u030b\u0302\u0314 \u0333\u0349\u034d\u0312\u0302e\u0317\u0300\u0365\u036f\u0368\u030d\u036e\u035b \u0326\u0339\u0323\u0330\u0310\u0305\u0311\u0351\u0305\u0302t\u0359\u032d\u033b\u0316\u035b\u033ee\u033a\u0359\u0363\u0352\u031as\u0323\u0320\u0349\u0353\u0354\u0332\u0326\u030et\u0316\u0356\u031d\u0353\u0323\u036d\u0351\u0308\u0301\u0302o\u0325\u0355\u0348\u0309\u035b\u0313 \u0300\u0366\u033d\u0345Z\u036f\u0311\u030ea\u0346l\u033b\u0368\u030b\u0367\u0363\u0368\u036cg\u0349\u0319\u031f\u033e\u0305\u033e\u036co\u0320\u036e\u0352\t282\ndiff --git a/tests/queries/0_stateless/02011_normalize_utf8.sql b/tests/queries/0_stateless/02011_normalize_utf8.sql\nnew file mode 100644\nindex 000000000000..5abb6b4d8fb1\n--- /dev/null\n+++ b/tests/queries/0_stateless/02011_normalize_utf8.sql\n@@ -0,0 +1,44 @@\n+-- Tags: no-fasttest\n+\n+DROP TABLE IF EXISTS normalize_test;\n+CREATE TABLE normalize_test (id int, value String) ENGINE = MergeTree ORDER BY value;\n+\n+\n+SELECT\n+    '\u0451' AS norm, '\u0435\u0308' AS denorm,\n+    length(norm), length(denorm),\n+    normalizeUTF8NFC(norm) AS norm_nfc,\n+    normalizeUTF8NFC(denorm) AS denorm_nfc,\n+    length(norm_nfc),\n+    length(denorm_nfc);\n+\n+\n+INSERT INTO normalize_test (id, value) VALUES (1, '\u0435\u0308');\n+INSERT INTO normalize_test (id, value) VALUES (2, '\u0451');\n+INSERT INTO normalize_test (id, value) VALUES (3, '\u0c1c\u0c4d\u0c1e\u200c\u0c3e');\n+INSERT INTO normalize_test (id, value) VALUES (4, '\u672c\u6c17\u3067\u3059\u304b');\n+INSERT INTO normalize_test (id, value) VALUES (5, '\ufdfa');\n+INSERT INTO normalize_test (id, value) VALUES (6, '\u1f82');\n+INSERT INTO normalize_test (id, value) VALUES (7, '\u0390');\n+INSERT INTO normalize_test (id, value) VALUES (8, '\u05e9\u05bc\u05c1');\n+INSERT INTO normalize_test (id, value) VALUES (9, '\ud834\udd58\ud834\udd65\ud834\udd6e');\n+\n+\n+INSERT INTO normalize_test (id, value) VALUES (10, 'Q\u0339\u0323\u0329\u032d\u0330\u0330\u0339\u0304\u036c\u033f\u034b\u0303\u1e77\u032c\u0330\u0365e\u0318\u035a\u0348\u0330\u033a\u030d\u0350s\u034e\u031c\u0316t\u0354\u0323\u032f\u0332\u031c\u0320\u0363\u0311\u0368\u0309\u0308\u0308o\u0332\u0359\u033a\u034a\u036f\u0363\u0310\u030b\u0302\u0314 \u0333\u0349\u034d\u0312\u0302\u00e8\u0317\u0365\u036f\u0368\u030d\u036e\u035b \u0326\u0339\u0323\u0330\u0310\u0305\u0311\u0351\u0305\u0302t\u0359\u032d\u033b\u0316\u035b\u033ee\u033a\u0359\u0363\u0352\u031a\u1e63\u0320\u0349\u0353\u0354\u0332\u0326\u030et\u0316\u0356\u031d\u0353\u0323\u036d\u0351\u0308\u0301\u0302\u1ecf\u0325\u0355\u0348\u035b\u0313 \u0300\u0366\u033d\u0345Z\u036f\u0311\u030ea\u0346l\u033b\u0368\u030b\u0367\u0363\u0368\u036cg\u0349\u0319\u031f\u033e\u0305\u033e\u036co\u0320\u036e\u0352');\n+\n+\n+\n+SELECT\n+    id, value, length(value),\n+    normalizeUTF8NFC(value) AS nfc, length(nfc) AS nfc_len,\n+    normalizeUTF8NFD(value) AS nfd, length(nfd) AS nfd_len,\n+    normalizeUTF8NFKC(value) AS nfkc, length(nfkc) AS nfkc_len,\n+    normalizeUTF8NFKD(value) AS nfkd, length(nfkd) AS nfkd_len\n+FROM normalize_test\n+ORDER BY id;\n+\n+\n+SELECT char(228) AS value, normalizeUTF8NFC(value); -- { serverError 621 }\n+SELECT char(228) AS value, normalizeUTF8NFD(value); -- { serverError 621 }\n+SELECT char(228) AS value, normalizeUTF8NFKC(value); -- { serverError 621 }\n+SELECT char(228) AS value, normalizeUTF8NFKD(value); -- { serverError 621 }\n",
  "problem_statement": "Unicode normalization/decomposition functions; diacritics removal.\n**Use case**\r\nText preprocessing and matching inside ClickHouse.\r\n\r\n**Describe the solution you'd like**\r\nWrap functions from `icu` library. The functions should work on UTF-8 data.\r\n\r\n**Additional context**\r\nSee also a sibling task: #17182.\r\n\n",
  "hints_text": "I will be working on this task",
  "created_at": "2021-09-05T23:41:57Z"
}