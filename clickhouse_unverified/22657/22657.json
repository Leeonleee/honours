{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 22657,
  "instance_id": "ClickHouse__ClickHouse-22657",
  "issue_numbers": [
    "22491"
  ],
  "base_commit": "cf2931384bd08d50b6d721a3823eb611c4545862",
  "patch": "diff --git a/src/Interpreters/ApplyWithSubqueryVisitor.cpp b/src/Interpreters/ApplyWithSubqueryVisitor.cpp\nindex f3d0c82e5f1b..27e0e438a718 100644\n--- a/src/Interpreters/ApplyWithSubqueryVisitor.cpp\n+++ b/src/Interpreters/ApplyWithSubqueryVisitor.cpp\n@@ -13,28 +13,7 @@ namespace DB\n void ApplyWithSubqueryVisitor::visit(ASTPtr & ast, const Data & data)\n {\n     if (auto * node_select = ast->as<ASTSelectQuery>())\n-    {\n-        std::optional<Data> new_data;\n-        if (auto with = node_select->with())\n-        {\n-            for (auto & child : with->children)\n-            {\n-                visit(child, new_data ? *new_data : data);\n-                if (auto * ast_with_elem = child->as<ASTWithElement>())\n-                {\n-                    if (!new_data)\n-                        new_data = data;\n-                    new_data->subqueries[ast_with_elem->name] = ast_with_elem->subquery;\n-                }\n-            }\n-        }\n-\n-        for (auto & child : node_select->children)\n-        {\n-            if (child != node_select->with())\n-                visit(child, new_data ? *new_data : data);\n-        }\n-    }\n+        visit(*node_select, data);\n     else\n     {\n         for (auto & child : ast->children)\n@@ -46,6 +25,36 @@ void ApplyWithSubqueryVisitor::visit(ASTPtr & ast, const Data & data)\n     }\n }\n \n+void ApplyWithSubqueryVisitor::visit(ASTSelectQuery & ast, const Data & data)\n+{\n+    std::optional<Data> new_data;\n+    if (auto with = ast.with())\n+    {\n+        for (auto & child : with->children)\n+        {\n+            visit(child, new_data ? *new_data : data);\n+            if (auto * ast_with_elem = child->as<ASTWithElement>())\n+            {\n+                if (!new_data)\n+                    new_data = data;\n+                new_data->subqueries[ast_with_elem->name] = ast_with_elem->subquery;\n+            }\n+        }\n+    }\n+\n+    for (auto & child : ast.children)\n+    {\n+        if (child != ast.with())\n+            visit(child, new_data ? *new_data : data);\n+    }\n+}\n+\n+void ApplyWithSubqueryVisitor::visit(ASTSelectWithUnionQuery & ast, const Data & data)\n+{\n+    for (auto & child : ast.children)\n+        visit(child, data);\n+}\n+\n void ApplyWithSubqueryVisitor::visit(ASTTableExpression & table, const Data & data)\n {\n     if (table.database_and_table_name)\ndiff --git a/src/Interpreters/ApplyWithSubqueryVisitor.h b/src/Interpreters/ApplyWithSubqueryVisitor.h\nindex ed3f9fbcd3ef..3b17de1d6910 100644\n--- a/src/Interpreters/ApplyWithSubqueryVisitor.h\n+++ b/src/Interpreters/ApplyWithSubqueryVisitor.h\n@@ -7,6 +7,8 @@\n namespace DB\n {\n class ASTFunction;\n+class ASTSelectQuery;\n+class ASTSelectWithUnionQuery;\n struct ASTTableExpression;\n \n class ApplyWithSubqueryVisitor\n@@ -18,9 +20,13 @@ class ApplyWithSubqueryVisitor\n     };\n \n     static void visit(ASTPtr & ast) { visit(ast, {}); }\n+    static void visit(ASTSelectQuery & select) { visit(select, {}); }\n+    static void visit(ASTSelectWithUnionQuery & select) { visit(select, {}); }\n \n private:\n     static void visit(ASTPtr & ast, const Data & data);\n+    static void visit(ASTSelectQuery & ast, const Data & data);\n+    static void visit(ASTSelectWithUnionQuery & ast, const Data & data);\n     static void visit(ASTTableExpression & table, const Data & data);\n     static void visit(ASTFunction & func, const Data & data);\n };\ndiff --git a/src/Interpreters/InterpreterCreateQuery.cpp b/src/Interpreters/InterpreterCreateQuery.cpp\nindex 8cd93546ad0a..26ab435aaf16 100644\n--- a/src/Interpreters/InterpreterCreateQuery.cpp\n+++ b/src/Interpreters/InterpreterCreateQuery.cpp\n@@ -59,6 +59,7 @@\n #include <Interpreters/QueryLog.h>\n #include <Interpreters/addTypeConversionToAST.h>\n #include <Interpreters/FunctionNameNormalizer.h>\n+#include <Interpreters/ApplyWithSubqueryVisitor.h>\n \n #include <TableFunctions/TableFunctionFactory.h>\n #include <common/logger_useful.h>\n@@ -887,6 +888,8 @@ BlockIO InterpreterCreateQuery::createTable(ASTCreateQuery & create)\n \n     if (create.select && create.isView())\n     {\n+        // Expand CTE before filling default database\n+        ApplyWithSubqueryVisitor().visit(*create.select);\n         AddDefaultDatabaseVisitor visitor(current_database);\n         visitor.visit(*create.select);\n     }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01711_cte_subquery_fix.sql b/tests/queries/0_stateless/01711_cte_subquery_fix.sql\nindex ddea548eada2..10ad90192091 100644\n--- a/tests/queries/0_stateless/01711_cte_subquery_fix.sql\n+++ b/tests/queries/0_stateless/01711_cte_subquery_fix.sql\n@@ -1,3 +1,7 @@\n drop table if exists t;\n create table t engine = Memory as with cte as (select * from numbers(10)) select * from cte;\n drop table t;\n+\n+drop table if exists view1;\n+create view view1 as with t as (select number n from numbers(3)) select n from t;\n+drop table view1;\n",
  "problem_statement": "create view statement support CTE expression\n\r\n\r\nsuch as\r\n```\r\ncreate view view1 as \r\nwith t as (select number n from numbers(3))\r\nselect n from t\r\n```\n",
  "hints_text": "",
  "created_at": "2021-04-05T06:37:33Z"
}