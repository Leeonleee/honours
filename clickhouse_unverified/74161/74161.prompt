You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Crash with compressed Memory table
**Describe the bug**
This issue seems related to the new compress option in Memory tables.

**How to reproduce**
Run Fiddle: https://fiddle.clickhouse.com/e26c87f8-799b-4654-bf43-e417fbe1c7a1

Stack trace:
```
[d28447233afa] 2024.12.31 11:59:22.842413 [ 742 ] <Fatal> BaseDaemon: ########################################
[d28447233afa] 2024.12.31 11:59:22.842464 [ 742 ] <Fatal> BaseDaemon: (version 24.12.1.1614 (official build), build id: D42FA6B71E61504F4A8AE09C18B3C5A505E0D437, git hash: a6d2b2e35b221d8bd94f31542e54468a138a2144) (from thread 740) (query_id: 3317a45c-fba3-4981-ba99-1a17d59598ac) (query: SELECT t0.c0.null FROM t0;) Received signal Segmentation fault (11)
[d28447233afa] 2024.12.31 11:59:22.842496 [ 742 ] <Fatal> BaseDaemon: Address: 0xd. Access: write. Address not mapped to object.
[d28447233afa] 2024.12.31 11:59:22.842523 [ 742 ] <Fatal> BaseDaemon: Stack trace: 0x000000000daa0b35 0x000072d1fe8ef520 0x0000000011398c13 0x000000001131bdce 0x000000001131c7c5 0x0000000012d32cc9 0x0000000013b98352 0x000000001373a6bb 0x000000001373a3c7 0x0000000013754be7 0x0000000013747ec5 0x0000000013747256 0x000000001375848a 0x000000000d825ec2 0x000000000d82d27a 0x000072d1fe941ac3 0x000072d1fe9d2a04
[d28447233afa] 2024.12.31 11:59:22.842588 [ 742 ] <Fatal> BaseDaemon: 0. signalHandler(int, siginfo_t*, void*) @ 0x000000000daa0b35
[d28447233afa] 2024.12.31 11:59:22.842617 [ 742 ] <Fatal> BaseDaemon: 1. ? @ 0x000072d1fe8ef520
[d28447233afa] 2024.12.31 11:59:22.842666 [ 742 ] <Fatal> BaseDaemon: 2. DB::SerializationNullable::enumerateStreams(DB::ISerialization::EnumerateStreamsSettings&, std::function<void (DB::ISerialization::SubstreamPath const&)> const&, DB::ISerialization::SubstreamData const&) const @ 0x0000000011398c13
[d28447233afa] 2024.12.31 11:59:22.842716 [ 742 ] <Fatal> BaseDaemon: 3. DB::IDataType::getSubcolumnData(std::basic_string_view<char, std::char_traits<char>>, DB::ISerialization::SubstreamData const&, bool) @ 0x000000001131bdce
[d28447233afa] 2024.12.31 11:59:22.842758 [ 742 ] <Fatal> BaseDaemon: 4. DB::IDataType::tryGetSubcolumn(std::basic_string_view<char, std::char_traits<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const @ 0x000000001131c7c5
[d28447233afa] 2024.12.31 11:59:22.842800 [ 742 ] <Fatal> BaseDaemon: 5. DB::tryGetSubcolumnFromBlock(DB::Block const&, std::shared_ptr<DB::IDataType const> const&, DB::NameAndTypePair const&) @ 0x0000000012d32cc9
[d28447233afa] 2024.12.31 11:59:22.842846 [ 742 ] <Fatal> BaseDaemon: 6. DB::MemorySource::generate() @ 0x0000000013b98352
[d28447233afa] 2024.12.31 11:59:22.842875 [ 742 ] <Fatal> BaseDaemon: 7. DB::ISource::tryGenerate() @ 0x000000001373a6bb
[d28447233afa] 2024.12.31 11:59:22.842910 [ 742 ] <Fatal> BaseDaemon: 8. DB::ISource::work() @ 0x000000001373a3c7
[d28447233afa] 2024.12.31 11:59:22.842945 [ 742 ] <Fatal> BaseDaemon: 9. DB::ExecutionThreadContext::executeTask() @ 0x0000000013754be7
[d28447233afa] 2024.12.31 11:59:22.842990 [ 742 ] <Fatal> BaseDaemon: 10. DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000013747ec5
[d28447233afa] 2024.12.31 11:59:22.843027 [ 742 ] <Fatal> BaseDaemon: 11. DB::PipelineExecutor::execute(unsigned long, bool) @ 0x0000000013747256
[d28447233afa] 2024.12.31 11:59:22.843066 [ 742 ] <Fatal> BaseDaemon: 12. void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000001375848a
[d28447233afa] 2024.12.31 11:59:22.843107 [ 742 ] <Fatal> BaseDaemon: 13. ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x000000000d825ec2
[d28447233afa] 2024.12.31 11:59:22.843150 [ 742 ] <Fatal> BaseDaemon: 14. void* std::__thread_proxy[abi:v15007]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000000d82d27a
[d28447233afa] 2024.12.31 11:59:22.843272 [ 742 ] <Fatal> BaseDaemon: 15. ? @ 0x000072d1fe941ac3
[d28447233afa] 2024.12.31 11:59:22.843299 [ 742 ] <Fatal> BaseDaemon: 16. ? @ 0x000072d1fe9d2a04
[d28447233afa] 2024.12.31 11:59:22.970662 [ 742 ] <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: 6A95C25ADFFC7734E1D1FED3ECF8DAB1)
[d28447233afa] 2024.12.31 11:59:22.970907 [ 742 ] <Fatal> BaseDaemon: Report this error to https://github.com/ClickHouse/ClickHouse/issues
[d28447233afa] 2024.12.31 11:59:22.971056 [ 742 ] <Fatal> BaseDaemon: Changed settings: output_format_pretty_color = 0, output_format_pretty_grid_charset = 'ASCII'
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
