{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 74161,
  "instance_id": "ClickHouse__ClickHouse-74161",
  "issue_numbers": [
    "74009"
  ],
  "base_commit": "f90551824bb90ade2d8a1d8edd7b0a3c0a459617",
  "patch": "diff --git a/src/Interpreters/getColumnFromBlock.cpp b/src/Interpreters/getColumnFromBlock.cpp\nindex 799e11ddaa7b..730e63ee0ef7 100644\n--- a/src/Interpreters/getColumnFromBlock.cpp\n+++ b/src/Interpreters/getColumnFromBlock.cpp\n@@ -52,7 +52,7 @@ ColumnPtr tryGetSubcolumnFromBlock(const Block & block, const DataTypePtr & requ\n         return elem_column;\n     }\n \n-    auto elem_column = elem->type->tryGetSubcolumn(subcolumn_name, elem->column);\n+    auto elem_column = elem->type->tryGetSubcolumn(subcolumn_name, elem->column->decompress());\n     auto elem_type = elem->type->tryGetSubcolumnType(subcolumn_name);\n \n     if (!elem_type || !elem_column)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03305_compressed_memory_eng_crash_reading_subcolumn.reference b/tests/queries/0_stateless/03305_compressed_memory_eng_crash_reading_subcolumn.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/03305_compressed_memory_eng_crash_reading_subcolumn.sql b/tests/queries/0_stateless/03305_compressed_memory_eng_crash_reading_subcolumn.sql\nnew file mode 100644\nindex 000000000000..ca89f37559d4\n--- /dev/null\n+++ b/tests/queries/0_stateless/03305_compressed_memory_eng_crash_reading_subcolumn.sql\n@@ -0,0 +1,8 @@\n+DROP TABLE IF EXISTS t0;\n+\n+CREATE TABLE t0 (c0 Nullable(Int)) ENGINE = Memory() SETTINGS compress = 1;\n+INSERT INTO TABLE t0 (c0) VALUES (1);\n+\n+SELECT t0.c0.null FROM t0 FORMAT Null SETTINGS enable_analyzer = 1;\n+\n+DROP TABLE t0;\n",
  "problem_statement": "Crash with compressed Memory table\n**Describe the bug**\r\nThis issue seems related to the new compress option in Memory tables.\r\n\r\n**How to reproduce**\r\nRun Fiddle: https://fiddle.clickhouse.com/e26c87f8-799b-4654-bf43-e417fbe1c7a1\r\n\r\nStack trace:\r\n```\r\n[d28447233afa] 2024.12.31 11:59:22.842413 [ 742 ] <Fatal> BaseDaemon: ########################################\r\n[d28447233afa] 2024.12.31 11:59:22.842464 [ 742 ] <Fatal> BaseDaemon: (version 24.12.1.1614 (official build), build id: D42FA6B71E61504F4A8AE09C18B3C5A505E0D437, git hash: a6d2b2e35b221d8bd94f31542e54468a138a2144) (from thread 740) (query_id: 3317a45c-fba3-4981-ba99-1a17d59598ac) (query: SELECT t0.c0.null FROM t0;) Received signal Segmentation fault (11)\r\n[d28447233afa] 2024.12.31 11:59:22.842496 [ 742 ] <Fatal> BaseDaemon: Address: 0xd. Access: write. Address not mapped to object.\r\n[d28447233afa] 2024.12.31 11:59:22.842523 [ 742 ] <Fatal> BaseDaemon: Stack trace: 0x000000000daa0b35 0x000072d1fe8ef520 0x0000000011398c13 0x000000001131bdce 0x000000001131c7c5 0x0000000012d32cc9 0x0000000013b98352 0x000000001373a6bb 0x000000001373a3c7 0x0000000013754be7 0x0000000013747ec5 0x0000000013747256 0x000000001375848a 0x000000000d825ec2 0x000000000d82d27a 0x000072d1fe941ac3 0x000072d1fe9d2a04\r\n[d28447233afa] 2024.12.31 11:59:22.842588 [ 742 ] <Fatal> BaseDaemon: 0. signalHandler(int, siginfo_t*, void*) @ 0x000000000daa0b35\r\n[d28447233afa] 2024.12.31 11:59:22.842617 [ 742 ] <Fatal> BaseDaemon: 1. ? @ 0x000072d1fe8ef520\r\n[d28447233afa] 2024.12.31 11:59:22.842666 [ 742 ] <Fatal> BaseDaemon: 2. DB::SerializationNullable::enumerateStreams(DB::ISerialization::EnumerateStreamsSettings&, std::function<void (DB::ISerialization::SubstreamPath const&)> const&, DB::ISerialization::SubstreamData const&) const @ 0x0000000011398c13\r\n[d28447233afa] 2024.12.31 11:59:22.842716 [ 742 ] <Fatal> BaseDaemon: 3. DB::IDataType::getSubcolumnData(std::basic_string_view<char, std::char_traits<char>>, DB::ISerialization::SubstreamData const&, bool) @ 0x000000001131bdce\r\n[d28447233afa] 2024.12.31 11:59:22.842758 [ 742 ] <Fatal> BaseDaemon: 4. DB::IDataType::tryGetSubcolumn(std::basic_string_view<char, std::char_traits<char>>, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) const @ 0x000000001131c7c5\r\n[d28447233afa] 2024.12.31 11:59:22.842800 [ 742 ] <Fatal> BaseDaemon: 5. DB::tryGetSubcolumnFromBlock(DB::Block const&, std::shared_ptr<DB::IDataType const> const&, DB::NameAndTypePair const&) @ 0x0000000012d32cc9\r\n[d28447233afa] 2024.12.31 11:59:22.842846 [ 742 ] <Fatal> BaseDaemon: 6. DB::MemorySource::generate() @ 0x0000000013b98352\r\n[d28447233afa] 2024.12.31 11:59:22.842875 [ 742 ] <Fatal> BaseDaemon: 7. DB::ISource::tryGenerate() @ 0x000000001373a6bb\r\n[d28447233afa] 2024.12.31 11:59:22.842910 [ 742 ] <Fatal> BaseDaemon: 8. DB::ISource::work() @ 0x000000001373a3c7\r\n[d28447233afa] 2024.12.31 11:59:22.842945 [ 742 ] <Fatal> BaseDaemon: 9. DB::ExecutionThreadContext::executeTask() @ 0x0000000013754be7\r\n[d28447233afa] 2024.12.31 11:59:22.842990 [ 742 ] <Fatal> BaseDaemon: 10. DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000013747ec5\r\n[d28447233afa] 2024.12.31 11:59:22.843027 [ 742 ] <Fatal> BaseDaemon: 11. DB::PipelineExecutor::execute(unsigned long, bool) @ 0x0000000013747256\r\n[d28447233afa] 2024.12.31 11:59:22.843066 [ 742 ] <Fatal> BaseDaemon: 12. void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000001375848a\r\n[d28447233afa] 2024.12.31 11:59:22.843107 [ 742 ] <Fatal> BaseDaemon: 13. ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x000000000d825ec2\r\n[d28447233afa] 2024.12.31 11:59:22.843150 [ 742 ] <Fatal> BaseDaemon: 14. void* std::__thread_proxy[abi:v15007]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000000d82d27a\r\n[d28447233afa] 2024.12.31 11:59:22.843272 [ 742 ] <Fatal> BaseDaemon: 15. ? @ 0x000072d1fe941ac3\r\n[d28447233afa] 2024.12.31 11:59:22.843299 [ 742 ] <Fatal> BaseDaemon: 16. ? @ 0x000072d1fe9d2a04\r\n[d28447233afa] 2024.12.31 11:59:22.970662 [ 742 ] <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: 6A95C25ADFFC7734E1D1FED3ECF8DAB1)\r\n[d28447233afa] 2024.12.31 11:59:22.970907 [ 742 ] <Fatal> BaseDaemon: Report this error to https://github.com/ClickHouse/ClickHouse/issues\r\n[d28447233afa] 2024.12.31 11:59:22.971056 [ 742 ] <Fatal> BaseDaemon: Changed settings: output_format_pretty_color = 0, output_format_pretty_grid_charset = 'ASCII'\r\n```\n",
  "hints_text": "",
  "created_at": "2025-01-03T16:15:27Z"
}