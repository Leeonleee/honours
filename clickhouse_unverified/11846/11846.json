{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 11846,
  "instance_id": "ClickHouse__ClickHouse-11846",
  "issue_numbers": [
    "3933"
  ],
  "base_commit": "59d3e200ce48bd42f5df5241e749126c33181eea",
  "patch": "diff --git a/src/Functions/FunctionsMiscellaneous.h b/src/Functions/FunctionsMiscellaneous.h\nindex 3e2938f386b6..5703f72ce2ad 100644\n--- a/src/Functions/FunctionsMiscellaneous.h\n+++ b/src/Functions/FunctionsMiscellaneous.h\n@@ -8,11 +8,13 @@\n #include <Columns/ColumnFunction.h>\n #include <DataTypes/DataTypesNumber.h>\n \n+\n namespace DB\n {\n namespace ErrorCodes\n {\n     extern const int LOGICAL_ERROR;\n+    extern const int BAD_ARGUMENTS;\n }\n \n class ExecutableFunctionExpression : public IExecutableFunctionImpl\n@@ -203,6 +205,11 @@ class FunctionCaptureOverloadResolver : public IFunctionOverloadResolverImpl\n             const String & expression_return_name_)\n         : expression_actions(std::move(expression_actions_))\n     {\n+        /// Check that expression does not contain unusual actions that will break blocks structure.\n+        for (const auto & action : expression_actions->getActions())\n+            if (action.type == ExpressionAction::Type::JOIN || action.type == ExpressionAction::Type::ARRAY_JOIN)\n+                throw Exception(\"Expression with arrayJoin or other unusual action cannot be captured\", ErrorCodes::BAD_ARGUMENTS);\n+\n         std::unordered_map<std::string, DataTypePtr> arguments_map;\n \n         const auto & all_arguments = expression_actions->getRequiredColumnsWithTypes();\ndiff --git a/src/Functions/array/FunctionArrayMapped.h b/src/Functions/array/FunctionArrayMapped.h\nindex ee4c5c083d83..346f2e35555f 100644\n--- a/src/Functions/array/FunctionArrayMapped.h\n+++ b/src/Functions/array/FunctionArrayMapped.h\n@@ -33,7 +33,8 @@ namespace ErrorCodes\n   * arrayMap(x1,...,xn -> expression, array1,...,arrayn) - apply the expression to each element of the array (or set of parallel arrays).\n   * arrayFilter(x -> predicate, array) - leave in the array only the elements for which the expression is true.\n   *\n-  * For some functions arrayCount, arrayExists, arrayAll, an overload of the form f(array) is available, which works in the same way as f(x -> x, array).\n+  * For some functions arrayCount, arrayExists, arrayAll, an overload of the form f(array) is available,\n+  *  which works in the same way as f(x -> x, array).\n   *\n   * See the example of Impl template parameter in arrayMap.cpp\n   */\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01330_array_join_in_higher_order_function.reference b/tests/queries/0_stateless/01330_array_join_in_higher_order_function.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/01330_array_join_in_higher_order_function.sql b/tests/queries/0_stateless/01330_array_join_in_higher_order_function.sql\nnew file mode 100644\nindex 000000000000..456b24a03d04\n--- /dev/null\n+++ b/tests/queries/0_stateless/01330_array_join_in_higher_order_function.sql\n@@ -0,0 +1,1 @@\n+SELECT arrayMap(x -> arrayJoin([x, 1]), [1, 2]); -- { serverError 36 }\n",
  "problem_statement": "arrayMap, array and arrayJoin combination leads to client error\n```sql\r\n:) SELECT arrayMap(x -> [arrayJoin([x, 'a'])], ['b', 'c', 'd'])\r\n\r\nSELECT arrayMap(x -> [arrayJoin([x, 'a'])], ['b', 'c', 'd'])\r\n\r\n__arrayMap(lambda(tuple(x), array(arrayJoin(array(x, 'a')))), ['b', 'c', 'd'])__\r\n_ [['\\0\\0\\0\\0'],[''],['']]                                                     _\r\n________________________________________________________________________________\r\n_ Progress: 1.00 rows, 1.00 B (352.94 rows/s., 352.94 B/s.)\r\nException on client:\r\nCode: 62. DB::Exception: Empty query: while receiving packet from localhost:9000, 127.0.0.1\r\n```\r\n\r\nserver logs:\r\n\r\n```\r\n2018.12.26 17:13:47.105472 [ 42 ] {7c445650-351b-4f6e-b2aa-c1ca1e38dea4} <Debug> executeQuery: (from 127.0.0.1:59036) SELECT arrayMap(x -> [arrayJoin([x, 'a'])], ['b', 'c', 'd')                                                                                                                                                                                  \r\n2018.12.26 17:13:47.106533 [ 42 ] {7c445650-351b-4f6e-b2aa-c1ca1e38dea4} <Trace> InterpreterSelectQuery: FetchColumns -> Complete                                                  \r\n2018.12.26 17:13:47.106628 [ 42 ] {7c445650-351b-4f6e-b2aa-c1ca1e38dea4} <Debug> executeQuery: Query pipeline:                                                                     \r\nExpression                                                                                                                                                                         \r\n Expression                                                                                                                                                                        \r\n  One                                                                                                                                                                              \r\n                                                                                                                                                                                   \r\n2018.12.26 17:13:47.106659 [ 70 ] {} <Trace> SystemLog (system.query_log): Flushing system log                                                                                     \r\n2018.12.26 17:13:47.107198 [ 2356 ] {7c445650-351b-4f6e-b2aa-c1ca1e38dea4} <Trace> ThreadStatus: Thread 2356 exited                                                                \r\n2018.12.26 17:13:47.107354 [ 71 ] {} <Trace> SystemLog (system.query_thread_log): Flushing system log                                                                              \r\n2018.12.26 17:13:47.107440 [ 42 ] {7c445650-351b-4f6e-b2aa-c1ca1e38dea4} <Information> executeQuery: Read 1 rows, 1.00 B in 0.002 sec., 536 rows/sec., 536.79 B/sec.               \r\n2018.12.26 17:13:47.107484 [ 42 ] {7c445650-351b-4f6e-b2aa-c1ca1e38dea4} <Debug> MemoryTracker: Peak memory usage (for query): 1.01 MiB.                                           \r\n2018.12.26 17:13:47.107648 [ 42 ] {} <Debug> MemoryTracker: Peak memory usage (total): 1.01 MiB.                                                                                   \r\n2018.12.26 17:13:47.107684 [ 42 ] {} <Information> TCPHandler: Processed in 0.003 sec.                                                                                             \r\n2018.12.26 17:13:47.108025 [ 42 ] {} <Error> ServerErrorHandler: Code: 210, e.displayText() = DB::NetException: Connection reset by peer, while reading from socket (127.0.0.1:5036), e.what() = DB::NetException, Stack trace:                                                                                                                                    \r\n                                                                                                                                                                                   \r\n0. /usr/lib64/libclickhouse.so.18.16(StackTrace::StackTrace()+0x27) [0x7f65203b8cd7]                                                                                               \r\n1. clickhouse-server(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x39) [0x276a9d9]                      \r\n2. /usr/lib64/libclickhouse.so.18.16(DB::ReadBufferFromPocoSocket::nextImpl()+0x302) [0x7f65203d7362]                                                                              3. clickhouse-server(DB::TCPHandler::runImpl()+0x854) [0x2779fc4]                                                                                                                  \r\n4. clickhouse-server(DB::TCPHandler::run()+0x2b) [0x277aebb]                                                                                                                       \r\n5. clickhouse-server(Poco::Net::TCPServerConnection::start()+0x1e) [0x57d9e5e]                                                                                                    \r\n6. clickhouse-server(Poco::Net::TCPServerDispatcher::run()+0x11e) [0x57da87e]                                                                                                      \r\n7. clickhouse-server(Poco::PooledThread::run()+0x87) [0x57e3d57]                                                                                                                   \r\n8. /usr/lib64/libclickhouse.so.18.16(Poco::ThreadImpl::runnableEntry(void*)+0x58) [0x7f6520489438]                                                                                 \r\n9. /usr/lib64/libstdc++.so.6(+0xea6de) [0x7f651ee3c6de]                                                                                                                            \r\n10. /lib64/libpthread.so.0(+0x796a) [0x7f651f38996a]                                                                                                                               \r\n11. /lib64/libc.so.6(clone+0x3f) [0x7f651e4def4f]\r\n```\n",
  "hints_text": "sorry, maybe you have a confusion with arrayStringConcat vs arrayJoin?\r\n\r\nSELECT arrayMap(x -> arrayStringConcat([x, 'a']), ['b', 'c', 'd'])\r\nSELECT arrayStringConcat(['b', 'c', 'd'], 'a')\r\nSELECT toString(arrayJoin(arrayMap(x -> arrayConcat([x], ['a']), ['b', 'c', 'd'])))\nConfirmed.\r\nYou cannot use arrayJoin inside higher order functions.\r\n\r\n`SELECT arrayMap(x -> arrayJoin([x, 1]), [1, 2])`\nI wanted to build all possible combinations\r\n\r\n```\r\nb c d\r\na a a\r\nb c a\r\nb a a\r\nb a d\r\na a d\r\na c d\r\na a d\r\n```\r\n\r\n(`['b', 'c', 'd']` is small but dynamic array)\nThat's awful, the query breaks client-server protocol:\r\n\r\n```\r\nmilovidov-desktop :) SELECT arrayMap(x -> arrayJoin([x, 1]), [1, 2])\r\n\r\nSELECT arrayMap(x -> arrayJoin([x, 1]), [1, 2])\r\n\r\n\u250c\u2500arrayMap(lambda(tuple(x), arrayJoin(array(x, 1))), [1, 2])\u2500\u2510\r\n\u2502 [1,1]                                                      \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\u2191 Progress: 1.00 rows, 1.00 B (65.27 rows/s., 65.27 B/s.) \r\nException on client:\r\nCode: 261. DB::Exception: Unknown BlockInfo field number: 268435455: while receiving packet from localhost:9000\r\n```",
  "created_at": "2020-06-21T18:24:09Z"
}