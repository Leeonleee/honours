diff --git a/src/Storages/MergeTree/DataPartStorageOnDisk.cpp b/src/Storages/MergeTree/DataPartStorageOnDisk.cpp
index b210f3953f79..f3b228a0748e 100644
--- a/src/Storages/MergeTree/DataPartStorageOnDisk.cpp
+++ b/src/Storages/MergeTree/DataPartStorageOnDisk.cpp
@@ -268,9 +268,10 @@ void DataPartStorageOnDisk::remove(
 
     // Record existing projection directories so we don't remove them twice
     std::unordered_set<String> projection_directories;
+    std::string proj_suffix = ".proj";
     for (const auto & projection : projections)
     {
-        std::string proj_dir_name = projection.name + ".proj";
+        std::string proj_dir_name = projection.name + proj_suffix;
         projection_directories.emplace(proj_dir_name);
 
         clearDirectory(
@@ -278,6 +279,40 @@ void DataPartStorageOnDisk::remove(
             can_remove_shared_data, names_not_to_remove, projection.checksums, {}, log, true);
     }
 
+    /// It is possible that we are removing the part which have a written but not loaded projection.
+    /// Such a part can appear server was restarted after DROP PROJECTION but before old part was removed.
+    /// In this case, the old part will load only projections from metadata.
+    /// See test 01701_clear_projection_and_part.
+    for (const auto & [name, _] : checksums.files)
+    {
+        if (endsWith(name, proj_suffix) && !projection_directories.contains(name) && disk->isDirectory(fs::path(to) / name))
+        {
+
+            /// If we have a directory with suffix '.proj' it is likely a projection.
+            /// Try to load checksums for it (to avoid recursive removing fallback).
+            std::string checksum_path = fs::path(to) / name / "checksums.txt";
+            if (disk->exists(checksum_path))
+            {
+                try
+                {
+                    MergeTreeDataPartChecksums tmp_checksums;
+                    auto in = disk->readFile(checksum_path, {});
+                    tmp_checksums.read(*in);
+
+                    projection_directories.emplace(name);
+
+                    clearDirectory(
+                        fs::path(to) / name,
+                        can_remove_shared_data, names_not_to_remove, tmp_checksums, {}, log, true);
+                }
+                catch (...)
+                {
+                    LOG_ERROR(log, "Cannot load checksums from {}", checksum_path);
+                }
+            }
+        }
+    }
+
     clearDirectory(to, can_remove_shared_data, names_not_to_remove, checksums, projection_directories, log, false);
 }
 
@@ -343,7 +378,6 @@ void DataPartStorageOnDisk::clearDirectory(
         /// Recursive directory removal does many excessive "stat" syscalls under the hood.
 
         LOG_ERROR(log, "Cannot quickly remove directory {} by removing files; fallback to recursive removal. Reason: {}", fullPath(disk, dir), getCurrentExceptionMessage(false));
-
         disk->removeSharedRecursive(fs::path(dir) / "", !can_remove_shared_data, names_not_to_remove);
     }
 }
