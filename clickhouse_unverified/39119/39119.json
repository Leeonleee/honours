{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 39119,
  "instance_id": "ClickHouse__ClickHouse-39119",
  "issue_numbers": [
    "38629"
  ],
  "base_commit": "b35ad0dbdc11d75b20ecb199e5ab683d714b4850",
  "patch": "diff --git a/src/Storages/MergeTree/DataPartStorageOnDisk.cpp b/src/Storages/MergeTree/DataPartStorageOnDisk.cpp\nindex b210f3953f79..f3b228a0748e 100644\n--- a/src/Storages/MergeTree/DataPartStorageOnDisk.cpp\n+++ b/src/Storages/MergeTree/DataPartStorageOnDisk.cpp\n@@ -268,9 +268,10 @@ void DataPartStorageOnDisk::remove(\n \n     // Record existing projection directories so we don't remove them twice\n     std::unordered_set<String> projection_directories;\n+    std::string proj_suffix = \".proj\";\n     for (const auto & projection : projections)\n     {\n-        std::string proj_dir_name = projection.name + \".proj\";\n+        std::string proj_dir_name = projection.name + proj_suffix;\n         projection_directories.emplace(proj_dir_name);\n \n         clearDirectory(\n@@ -278,6 +279,40 @@ void DataPartStorageOnDisk::remove(\n             can_remove_shared_data, names_not_to_remove, projection.checksums, {}, log, true);\n     }\n \n+    /// It is possible that we are removing the part which have a written but not loaded projection.\n+    /// Such a part can appear server was restarted after DROP PROJECTION but before old part was removed.\n+    /// In this case, the old part will load only projections from metadata.\n+    /// See test 01701_clear_projection_and_part.\n+    for (const auto & [name, _] : checksums.files)\n+    {\n+        if (endsWith(name, proj_suffix) && !projection_directories.contains(name) && disk->isDirectory(fs::path(to) / name))\n+        {\n+\n+            /// If we have a directory with suffix '.proj' it is likely a projection.\n+            /// Try to load checksums for it (to avoid recursive removing fallback).\n+            std::string checksum_path = fs::path(to) / name / \"checksums.txt\";\n+            if (disk->exists(checksum_path))\n+            {\n+                try\n+                {\n+                    MergeTreeDataPartChecksums tmp_checksums;\n+                    auto in = disk->readFile(checksum_path, {});\n+                    tmp_checksums.read(*in);\n+\n+                    projection_directories.emplace(name);\n+\n+                    clearDirectory(\n+                        fs::path(to) / name,\n+                        can_remove_shared_data, names_not_to_remove, tmp_checksums, {}, log, true);\n+                }\n+                catch (...)\n+                {\n+                    LOG_ERROR(log, \"Cannot load checksums from {}\", checksum_path);\n+                }\n+            }\n+        }\n+    }\n+\n     clearDirectory(to, can_remove_shared_data, names_not_to_remove, checksums, projection_directories, log, false);\n }\n \n@@ -343,7 +378,6 @@ void DataPartStorageOnDisk::clearDirectory(\n         /// Recursive directory removal does many excessive \"stat\" syscalls under the hood.\n \n         LOG_ERROR(log, \"Cannot quickly remove directory {} by removing files; fallback to recursive removal. Reason: {}\", fullPath(disk, dir), getCurrentExceptionMessage(false));\n-\n         disk->removeSharedRecursive(fs::path(dir) / \"\", !can_remove_shared_data, names_not_to_remove);\n     }\n }\n",
  "test_patch": "diff --git a/docker/test/stress/run.sh b/docker/test/stress/run.sh\nindex b2c6036ba318..fcf99b34064e 100755\n--- a/docker/test/stress/run.sh\n+++ b/docker/test/stress/run.sh\n@@ -352,7 +352,6 @@ else\n     mv /var/log/clickhouse-server/clickhouse-server.log /var/log/clickhouse-server/clickhouse-server.backward.clean.log\n \n     # Error messages (we should ignore some errors)\n-    # FIXME https://github.com/ClickHouse/ClickHouse/issues/38629 (\"pp.proj, errno: 21\")\n     # FIXME https://github.com/ClickHouse/ClickHouse/issues/38643 (\"Unknown index: idx.\")\n     echo \"Check for Error messages in server log:\"\n     zgrep -Fav -e \"Code: 236. DB::Exception: Cancelled merging parts\" \\\n@@ -376,7 +375,6 @@ else\n                -e \"and a merge is impossible: we didn't find\" \\\n                -e \"found in queue and some source parts for it was lost\" \\\n                -e \"is lost forever.\" \\\n-               -e \"pp.proj, errno: 21\" \\\n                -e \"Unknown index: idx.\" \\\n         /var/log/clickhouse-server/clickhouse-server.backward.clean.log | zgrep -Fa \"<Error>\" > /test_output/bc_check_error_messages.txt \\\n         && echo -e 'Backward compatibility check: Error message in clickhouse-server.log (see bc_check_error_messages.txt)\\tFAIL' >> /test_output/test_results.tsv \\\ndiff --git a/tests/queries/0_stateless/01701_clear_projection_and_part_remove.reference b/tests/queries/0_stateless/01701_clear_projection_and_part_remove.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/01701_clear_projection_and_part_remove.sql b/tests/queries/0_stateless/01701_clear_projection_and_part_remove.sql\nnew file mode 100644\nindex 000000000000..e6cc4cbdb108\n--- /dev/null\n+++ b/tests/queries/0_stateless/01701_clear_projection_and_part_remove.sql\n@@ -0,0 +1,19 @@\n+drop table if exists tp_1;\n+-- In this test, we are going to create an old part with written projection which does not exist in table metadata\n+create table tp_1 (x Int32, y Int32, projection p (select x, y order by x)) engine = MergeTree order by y partition by intDiv(y, 100) settings old_parts_lifetime=1;\n+insert into tp_1 select number, number from numbers(3);\n+set mutations_sync = 2;\n+alter table tp_1 add projection pp (select x, count() group by x);\n+insert into tp_1 select number, number from numbers(4);\n+-- Here we have a part with written projection pp\n+alter table tp_1 detach partition '0';\n+-- Move part to detached\n+alter table tp_1 clear projection pp;\n+-- Remove projection from table metadata\n+alter table tp_1 drop projection pp;\n+-- Now, we don't load projection pp for attached part, but it is written on disk\n+alter table tp_1 attach partition '0';\n+-- Make this part obsolete\n+optimize table tp_1 final;\n+-- Now, DROP TABLE triggers part removal\n+drop table tp_1;\n",
  "problem_statement": "BC check: Cannot quickly remove directory ... by removing files\nhttps://s3.amazonaws.com/clickhouse-test-reports/0/bd4a208428c8f17c4c3148886e6bf008bb064f58/stress_test__memory__actions_.html\r\n\r\n```\r\n2022.06.30 05:04:05.434426 [ 461303 ] {} <Error> test_35.tp_1 (1ff2034b-af50-401f-90fd-ac714bb9d202): Cannot quickly remove directory /var/lib/clickhouse/store/1ff/1ff2034b-af50-401f-90fd-ac714bb9d202/delete_tmp_all_0_0_0_2 by removing files; fallback to recursive removal. Reason: Code: 458. DB::ErrnoException: Cannot unlink file /var/lib/clickhouse/store/1ff/1ff2034b-af50-401f-90fd-ac714bb9d202/delete_tmp_all_0_0_0_2/pp.proj, errno: 21, strerror: Is a directory. (CANNOT_UNLINK) (version 22.7.1.1 (official build))\r\n2022.06.30 05:04:05.434439 [ 461316 ] {} <Error> test_35.tp_2 (2c15d3ff-aa27-4370-b90d-fa14236c603b): Cannot quickly remove directory /var/lib/clickhouse/store/2c1/2c15d3ff-aa27-4370-b90d-fa14236c603b/delete_tmp_all_0_0_0_2 by removing files; fallback to recursive removal. Reason: Code: 458. DB::ErrnoException: Cannot unlink file /var/lib/clickhouse/store/2c1/2c15d3ff-aa27-4370-b90d-fa14236c603b/delete_tmp_all_0_0_0_2/pp.proj, errno: 21, strerror: Is a directory. (CANNOT_UNLINK) (version 22.7.1.1 (official build))\r\n2022.06.30 05:04:05.436398 [ 461303 ] {} <Error> test_35.tp_1 (1ff2034b-af50-401f-90fd-ac714bb9d202): Cannot quickly remove directory /var/lib/clickhouse/store/1ff/1ff2034b-af50-401f-90fd-ac714bb9d202/delete_tmp_all_1_1_0_2 by removing files; fallback to recursive removal. Reason: Code: 458. DB::ErrnoException: Cannot unlink file /var/lib/clickhouse/store/1ff/1ff2034b-af50-401f-90fd-ac714bb9d202/delete_tmp_all_1_1_0_2/pp.proj, errno: 21, strerror: Is a directory. (CANNOT_UNLINK) (version 22.7.1.1 (official build))\r\n2022.06.30 05:04:05.436486 [ 461316 ] {} <Error> test_35.tp_2 (2c15d3ff-aa27-4370-b90d-fa14236c603b): Cannot quickly remove directory /var/lib/clickhouse/store/2c1/2c15d3ff-aa27-4370-b90d-fa14236c603b/delete_tmp_all_1_1_0_2 by removing files; fallback to recursive removal. Reason: Code: 458. DB::ErrnoException: Cannot unlink file /var/lib/clickhouse/store/2c1/2c15d3ff-aa27-4370-b90d-fa14236c603b/delete_tmp_all_1_1_0_2/pp.proj, errno: 21, strerror: Is a directory. (CANNOT_UNLINK) (version 22.7.1.1 (official build))\r\n```\r\n\r\nSeems like the issue was introduced in #36555\n",
  "hints_text": "https://s3.amazonaws.com/clickhouse-test-reports/38680/a3d3e03b14b5db3c0b275da557e16f2c61715328/stress_test__undefined__actions_.html\nhttps://s3.amazonaws.com/clickhouse-test-reports/38749/8e9c1eaa73b78390d78a25b2867bcfc0d55412a7/stress_test__address__actions_.html\nMore failures: https://github.com/ClickHouse/ClickHouse/issues/38791\nIf fails too often (almost on every commit in master), let's temporarily disable `01710_projection_fetch_long`: #38798\n>If fails too often (almost on every commit in master), let's temporarily disable 01710_projection_fetch_long: https://github.com/ClickHouse/ClickHouse/pull/38798\r\n\r\nIt did not help? Fail from today's master\r\nhttps://s3.amazonaws.com/clickhouse-test-reports/38978/e898f65cc523b8b06b1e903ea113818419ca8b68/stress_test__undefined__actions_.html\nThat's really funny. There's `tp_1` table in error message and `01710_projection_fetch_long` is the only test that creates table with this name, so `no-backward-compatibility-check` tag was ignored for some reason and this test was run in BC check. Seems like after #38717 BC check took old version of the test that does not contain `no-backward-compatibility-check` tag yet... \r\ncc: @Avogar \nSuppressed this failure another way\n> Seems like after https://github.com/ClickHouse/ClickHouse/pull/38978 BC check took old version of the test that does not contain no-backward-compatibility-check tag yet...\r\n\r\nYeah, that's not good, I didn't think about such problem. We can process these tags in a different way, we can find all tests with this tag from current repo (just grep files with this tag) and add them in skip list while running clickhouse-test, so tests with this tag in current repo and without it in previous won't be run. What do you think?\nI think it's minor issue, because `no-backward-compatibility-check` should not be needed at all after #38717. Seems like the only case when we may need it is when something is broken in master and we want to temporarily suppress it, this should not happen often. I'm mostly fine with available ways to suppress a failure (the list of error to ignore, ability to disable test with all builds except release (and therefore in Stress Tests)). And sometimes we will need ad-hoc ways to suppress failures anyway (like in  https://github.com/ClickHouse/ClickHouse/pull/38965/commits/4d43e8aa152a96a122cb1fe02b6a3f006a812455).\n>I think it's minor issue, because no-backward-compatibility-check should not be needed at all after https://github.com/ClickHouse/ClickHouse/pull/38978.\r\n\r\nIs it a wrong link? This one is about integration tests. Not about stress.\n> > I think it's minor issue, because no-backward-compatibility-check should not be needed at all after #38978.\r\n> \r\n> Is it a wrong link? This one is about integration tests. Not about stress.\r\n\r\nYep, I meant #38717, sorry ",
  "created_at": "2022-07-12T08:30:17Z"
}