diff --git a/src/Processors/Transforms/TotalsHavingTransform.cpp b/src/Processors/Transforms/TotalsHavingTransform.cpp
index 65043f65e1a6..738b0062e6c5 100644
--- a/src/Processors/Transforms/TotalsHavingTransform.cpp
+++ b/src/Processors/Transforms/TotalsHavingTransform.cpp
@@ -13,6 +13,7 @@ namespace DB
 namespace ErrorCodes
 {
     extern const int LOGICAL_ERROR;
+    extern const int ILLEGAL_COLUMN;
 }
 
 void finalizeChunk(Chunk & chunk)
@@ -156,6 +157,13 @@ void TotalsHavingTransform::transform(Chunk & chunk)
         /// Compute the expression in HAVING.
         const auto & cur_header = final ? finalized_header : getInputPort().getHeader();
         auto finalized_block = cur_header.cloneWithColumns(finalized.detachColumns());
+
+        for (const ExpressionAction & action : expression->getActions())
+        {
+            if (action.type == ExpressionAction::ARRAY_JOIN)
+                throw Exception("Having clause cannot contain arrayJoin", ErrorCodes::ILLEGAL_COLUMN);
+        }
+
         expression->execute(finalized_block);
         auto columns = finalized_block.getColumns();
 
@@ -222,6 +230,9 @@ void TotalsHavingTransform::addToTotals(const Chunk & chunk, const IColumn::Filt
             const ColumnAggregateFunction::Container & vec = column->getData();
             size_t size = vec.size();
 
+            if (filter && filter->size() != size)
+                throw Exception("Filter has size which differs from column size", ErrorCodes::LOGICAL_ERROR);
+
             if (filter)
             {
                 for (size_t row = 0; row < size; ++row)
