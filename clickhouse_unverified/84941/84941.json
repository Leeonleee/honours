{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 84941,
  "instance_id": "ClickHouse__ClickHouse-84941",
  "issue_numbers": [
    "84368"
  ],
  "base_commit": "b3a6d835c4238b9f79aa44386857c966cbd66ecf",
  "patch": "diff --git a/src/Storages/StorageMergeTree.cpp b/src/Storages/StorageMergeTree.cpp\nindex 6e4d4b5bef71..aae11a957aaa 100644\n--- a/src/Storages/StorageMergeTree.cpp\n+++ b/src/Storages/StorageMergeTree.cpp\n@@ -586,9 +586,9 @@ Int64 StorageMergeTree::startMutation(const MutationCommands & commands, Context\n     }\n \n     MergeTreeMutationEntry entry(commands, disk, relative_data_path, insert_increment.get(), current_tid, getContext()->getWriteSettings());\n-    PlainCommittingBlockHolder block_holder(allocateBlockNumber(CommittingBlock::Op::Mutation), *this);\n+    auto block_holder = allocateBlockNumber(CommittingBlock::Op::Mutation);\n \n-    Int64 version = block_holder.block.number;\n+    Int64 version = block_holder->block.number;\n     entry.commit(version);\n     String mutation_id = entry.file_name;\n     if (txn)\n@@ -781,7 +781,7 @@ QueryPipeline StorageMergeTree::updateLightweight(const MutationCommands & comma\n \n     PlainLightweightUpdateHolder update_holder;\n     update_holder.update_lock = getLockForLightweightUpdate(commands, context_copy);\n-    update_holder.block_holder = std::make_unique<PlainCommittingBlockHolder>(allocateBlockNumber(CommittingBlock::Op::Update), *this);\n+    update_holder.block_holder = allocateBlockNumber(CommittingBlock::Op::Update);\n \n     auto all_partitions = getAllPartitionIds();\n     auto partition_id_to_max_block = std::make_shared<PartitionIdToMaxBlock>();\n@@ -2421,11 +2421,14 @@ void StorageMergeTree::replacePartitionFrom(const StoragePtr & source_table, con\n         return;\n \n     MergeTreePartInfo drop_range;\n+    std::unique_ptr<PlainCommittingBlockHolder> block_holder;\n+\n     if (replace)\n     {\n+        block_holder = allocateBlockNumber(CommittingBlock::Op::NewPart);\n         drop_range.setPartitionId(partition_id);\n         drop_range.min_block = 0;\n-        drop_range.max_block = allocateBlockNumber(CommittingBlock::Op::NewPart).number; // there will be a \"hole\" in block numbers\n+        drop_range.max_block = block_holder->block.number; // there will be a \"hole\" in block numbers\n         drop_range.level = std::numeric_limits<decltype(drop_range.level)>::max();\n     }\n \n@@ -2858,28 +2861,28 @@ void StorageMergeTree::assertNotReadonly() const\n \n std::unique_ptr<PlainCommittingBlockHolder> StorageMergeTree::fillNewPartName(MutableDataPartPtr & part, DataPartsLock &)\n {\n-    auto block = allocateBlockNumber(CommittingBlock::Op::NewPart);\n+    auto block_holder = allocateBlockNumber(CommittingBlock::Op::NewPart);\n \n-    part->info.min_block = block.number;\n-    part->info.max_block = block.number;\n+    part->info.min_block = block_holder->block.number;\n+    part->info.max_block = block_holder->block.number;\n     part->setName(part->getNewName(part->info));\n \n-    return std::make_unique<PlainCommittingBlockHolder>(std::move(block), *this);\n+    return block_holder;\n }\n \n std::unique_ptr<PlainCommittingBlockHolder> StorageMergeTree::fillNewPartNameAndResetLevel(MutableDataPartPtr & part, DataPartsLock &)\n {\n-    auto block = allocateBlockNumber(CommittingBlock::Op::NewPart);\n+    auto block_holder = allocateBlockNumber(CommittingBlock::Op::NewPart);\n \n-    part->info.min_block = block.number;\n-    part->info.max_block = block.number;\n+    part->info.min_block = block_holder->block.number;\n+    part->info.max_block = block_holder->block.number;\n     part->info.mutation = 0;\n \n     bool keep_non_zero_level = merging_params.mode != MergeTreeData::MergingParams::Ordinary;\n     part->info.level = (keep_non_zero_level && part->info.level > 0) ? 1 : 0;\n     part->setName(part->getNewName(part->info));\n \n-    return std::make_unique<PlainCommittingBlockHolder>(std::move(block), *this);\n+    return block_holder;\n }\n \n void StorageMergeTree::removeCommittingBlock(CommittingBlock block)\n@@ -2889,15 +2892,16 @@ void StorageMergeTree::removeCommittingBlock(CommittingBlock block)\n     committing_blocks_cv.notify_one();\n }\n \n-CommittingBlock StorageMergeTree::allocateBlockNumber(CommittingBlock::Op op)\n+std::unique_ptr<PlainCommittingBlockHolder> StorageMergeTree::allocateBlockNumber(CommittingBlock::Op op)\n {\n     std::lock_guard lock(committing_blocks_mutex);\n \n-    auto block = CommittingBlock(op, increment.get());\n-    committing_blocks.insert(block);\n+    CommittingBlock block(op, increment.get());\n+    auto block_holder = std::make_unique<PlainCommittingBlockHolder>(std::move(block), *this);\n+    committing_blocks.insert(block_holder->block);\n \n-    LOG_DEBUG(log, \"Allocated block number {}\", block.number);\n-    return block;\n+    LOG_DEBUG(log, \"Allocated block number {}\", block_holder->block.number);\n+    return block_holder;\n }\n \n void StorageMergeTree::waitForCommittingInsertsAndMutations(Int64 max_block_number, size_t timeout_ms) const\ndiff --git a/src/Storages/StorageMergeTree.h b/src/Storages/StorageMergeTree.h\nindex 5059660f87bb..00cbc7acdad8 100644\n--- a/src/Storages/StorageMergeTree.h\n+++ b/src/Storages/StorageMergeTree.h\n@@ -163,7 +163,7 @@ class StorageMergeTree final : public MergeTreeData\n     mutable std::condition_variable committing_blocks_cv;\n \n     void removeCommittingBlock(CommittingBlock block);\n-    CommittingBlock allocateBlockNumber(CommittingBlock::Op op);\n+    std::unique_ptr<PlainCommittingBlockHolder> allocateBlockNumber(CommittingBlock::Op op);\n     void waitForCommittingInsertsAndMutations(Int64 max_block_number, size_t timeout_ms) const;\n     CommittingBlocksSet getCommittingBlocks() const;\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03100_lwu_39_after_replace_partition.reference b/tests/queries/0_stateless/03100_lwu_39_after_replace_partition.reference\nnew file mode 100644\nindex 000000000000..51993f072d58\n--- /dev/null\n+++ b/tests/queries/0_stateless/03100_lwu_39_after_replace_partition.reference\n@@ -0,0 +1,2 @@\n+2\n+2\ndiff --git a/tests/queries/0_stateless/03100_lwu_39_after_replace_partition.sql b/tests/queries/0_stateless/03100_lwu_39_after_replace_partition.sql\nnew file mode 100644\nindex 000000000000..0b1df5b3d249\n--- /dev/null\n+++ b/tests/queries/0_stateless/03100_lwu_39_after_replace_partition.sql\n@@ -0,0 +1,25 @@\n+DROP TABLE IF EXISTS t_lwu_replace;\n+\n+SET allow_experimental_lightweight_update = 1;\n+\n+CREATE TABLE t_lwu_replace (c0 Int)\n+ENGINE = MergeTree ORDER BY tuple()\n+SETTINGS enable_block_number_column = 1, enable_block_offset_column = 1;\n+\n+INSERT INTO TABLE t_lwu_replace (c0) VALUES (1);\n+ALTER TABLE t_lwu_replace REPLACE PARTITION ID '0' FROM t_lwu_replace;\n+UPDATE t_lwu_replace SET c0 = 2 WHERE TRUE;\n+\n+SELECT * FROM t_lwu_replace ORDER BY c0;\n+DROP TABLE IF EXISTS t_lwu_replace;\n+\n+CREATE TABLE t_lwu_replace (c0 Int)\n+ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/t_lwu_replace', '1') ORDER BY tuple()\n+SETTINGS enable_block_number_column = 1, enable_block_offset_column = 1;\n+\n+INSERT INTO TABLE t_lwu_replace (c0) VALUES (1);\n+ALTER TABLE t_lwu_replace REPLACE PARTITION ID '0' FROM t_lwu_replace;\n+UPDATE t_lwu_replace SET c0 = 2 WHERE TRUE;\n+\n+SELECT * FROM t_lwu_replace ORDER BY c0;\n+DROP TABLE IF EXISTS t_lwu_replace;\n",
  "problem_statement": "LWU after ALTER taking too long\n### Describe the bug\n\nEasy to reproduce.\n\n### How to reproduce\n\nRun: \n```sql\nCREATE DATABASE d0 ENGINE = Atomic;\nCREATE TABLE d0.t0 (c0 Int) ENGINE = MergeTree() ORDER BY tuple();\nINSERT INTO TABLE d0.t0 (c0) VALUES (1);\nALTER TABLE d0.t0 REPLACE PARTITION ID '0' FROM d0.t0;\nUPDATE d0.t0 SET c0 = 2 WHERE TRUE; --times out eventually\n```\n\n### Error message and/or stacktrace\n\nThe timeout error:\n\n```\n <Error> executeQuery: Code: 159. DB::Exception: Failed to wait (120000 ms) for inserts and mutations to commit up to block number 3. (TIMEOUT_EXCEEDED) (version 25.8.1.976 (official build)) (from 127.0.0.1:55810) (query 5, line 5) (in query: UPDATE d0.t0 SET c0 = 2 WHERE TRUE;), Stack trace (when copying this message, always include the lines below):\n\n0. contrib/llvm-project/libcxx/include/__exception/exception.h:113: Poco::Exception::Exception(String const&, int) @ 0x000000002663c8f2\n1. src/Common/Exception.cpp:115: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000140c1fe6\n2. src/Common/Exception.h:119: DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cdb55ac\n3. src/Common/Exception.h:137: DB::Exception::Exception<unsigned long&, long&>(int, FormatStringHelperImpl<std::type_identity<unsigned long&>::type, std::type_identity<long&>::type>, unsigned long&, long&) @ 0x000000001de70936\n4. src/Storages/StorageMergeTree.cpp:2923: DB::StorageMergeTree::waitForCommittingInsertsAndMutations(long, unsigned long) const @ 0x000000001de47ad1\n5. src/Storages/StorageMergeTree.cpp:791: DB::StorageMergeTree::updateLightweight(DB::MutationCommands const&, std::shared_ptr<DB::Context const>) @ 0x000000001de47190\n6. src/Interpreters/InterpreterUpdateQuery.cpp:108: DB::InterpreterUpdateQuery::execute() @ 0x000000001b347274\n7. src/Interpreters/executeQuery.cpp:1561: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x000000001b2c3243\n8. src/Interpreters/executeQuery.cpp:1769: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x000000001b2bd1bb\n9. src/Server/TCPHandler.cpp:723: DB::TCPHandler::runImpl() @ 0x000000001e5420d2\n10. src/Server/TCPHandler.cpp:2727: DB::TCPHandler::run() @ 0x000000001e55b864\n11. base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x00000000266f29c7\n12. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x00000000266f2fa5\n13. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x000000002669293f\n14. base/poco/Foundation/src/Thread_POSIX.cpp:341: Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000026690011\n15. start_thread @ 0x00000000000a27f1\n16. __clone3 @ 0x0000000000133c9c\n```\n",
  "hints_text": "",
  "created_at": "2025-08-01T23:11:55Z"
}