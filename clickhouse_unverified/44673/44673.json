{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 44673,
  "instance_id": "ClickHouse__ClickHouse-44673",
  "issue_numbers": [
    "43687"
  ],
  "base_commit": "d42d9f70c81299fd6ea1afa8742883a4e7358ad5",
  "patch": "diff --git a/src/Processors/QueryPlan/CreatingSetsStep.h b/src/Processors/QueryPlan/CreatingSetsStep.h\nindex 9995af7bca7d..b4777578a30f 100644\n--- a/src/Processors/QueryPlan/CreatingSetsStep.h\n+++ b/src/Processors/QueryPlan/CreatingSetsStep.h\n@@ -44,9 +44,6 @@ class CreatingSetsStep : public IQueryPlanStep\n     QueryPipelineBuilderPtr updatePipeline(QueryPipelineBuilders pipelines, const BuildQueryPipelineSettings &) override;\n \n     void describePipeline(FormatSettings & settings) const override;\n-\n-private:\n-    Processors processors;\n };\n \n void addCreatingSetsStep(QueryPlan & query_plan, PreparedSets::SubqueriesForSets subqueries_for_sets, ContextPtr context);\ndiff --git a/src/Processors/QueryPlan/IQueryPlanStep.cpp b/src/Processors/QueryPlan/IQueryPlanStep.cpp\nindex b36d1f0e12fc..a0035089c293 100644\n--- a/src/Processors/QueryPlan/IQueryPlanStep.cpp\n+++ b/src/Processors/QueryPlan/IQueryPlanStep.cpp\n@@ -113,4 +113,9 @@ void IQueryPlanStep::describePipeline(const Processors & processors, FormatSetti\n         doDescribeProcessor(*prev, count, settings);\n }\n \n+void IQueryPlanStep::appendExtraProcessors(const Processors & extra_processors)\n+{\n+    processors.insert(processors.end(), extra_processors.begin(), extra_processors.end());\n+}\n+\n }\ndiff --git a/src/Processors/QueryPlan/IQueryPlanStep.h b/src/Processors/QueryPlan/IQueryPlanStep.h\nindex 1e00d76b66f7..316ecff9c2e3 100644\n--- a/src/Processors/QueryPlan/IQueryPlanStep.h\n+++ b/src/Processors/QueryPlan/IQueryPlanStep.h\n@@ -110,6 +110,9 @@ class IQueryPlanStep\n     /// Get description of processors added in current step. Should be called after updatePipeline().\n     virtual void describePipeline(FormatSettings & /*settings*/) const {}\n \n+    /// Append extra processors for this step.\n+    void appendExtraProcessors(const Processors & extra_processors);\n+\n protected:\n     DataStreams input_streams;\n     std::optional<DataStream> output_stream;\n@@ -117,6 +120,10 @@ class IQueryPlanStep\n     /// Text description about what current step does.\n     std::string step_description;\n \n+    /// This field is used to store added processors from this step.\n+    /// It is used only for introspection (EXPLAIN PIPELINE).\n+    Processors processors;\n+\n     static void describePipeline(const Processors & processors, FormatSettings & settings);\n };\n \ndiff --git a/src/Processors/QueryPlan/ISourceStep.h b/src/Processors/QueryPlan/ISourceStep.h\nindex 08c939b626d3..744b6f9b5c4a 100644\n--- a/src/Processors/QueryPlan/ISourceStep.h\n+++ b/src/Processors/QueryPlan/ISourceStep.h\n@@ -15,10 +15,6 @@ class ISourceStep : public IQueryPlanStep\n     virtual void initializePipeline(QueryPipelineBuilder & pipeline, const BuildQueryPipelineSettings & settings) = 0;\n \n     void describePipeline(FormatSettings & settings) const override;\n-\n-protected:\n-    /// We collect processors got after pipeline transformation.\n-    Processors processors;\n };\n \n }\ndiff --git a/src/Processors/QueryPlan/ITransformingStep.cpp b/src/Processors/QueryPlan/ITransformingStep.cpp\nindex 64ad2ec56260..195fa9ad68cb 100644\n--- a/src/Processors/QueryPlan/ITransformingStep.cpp\n+++ b/src/Processors/QueryPlan/ITransformingStep.cpp\n@@ -70,9 +70,4 @@ void ITransformingStep::describePipeline(FormatSettings & settings) const\n     IQueryPlanStep::describePipeline(processors, settings);\n }\n \n-void ITransformingStep::appendExtraProcessors(const Processors & extra_processors)\n-{\n-    processors.insert(processors.end(), extra_processors.begin(), extra_processors.end());\n-}\n-\n }\ndiff --git a/src/Processors/QueryPlan/ITransformingStep.h b/src/Processors/QueryPlan/ITransformingStep.h\nindex 8b16e982af51..1513b4307f8e 100644\n--- a/src/Processors/QueryPlan/ITransformingStep.h\n+++ b/src/Processors/QueryPlan/ITransformingStep.h\n@@ -75,9 +75,6 @@ class ITransformingStep : public IQueryPlanStep\n \n     void describePipeline(FormatSettings & settings) const override;\n \n-    /// Append extra processors for this step.\n-    void appendExtraProcessors(const Processors & extra_processors);\n-\n     /// Enforcement is supposed to be done through the special settings that will be taken into account by remote nodes during query planning (e.g. force_aggregation_in_order).\n     /// Should be called only if data_stream_traits.can_enforce_sorting_properties_in_distributed_query == true.\n     virtual void adjustSettingsToEnforceSortingPropertiesInDistributedQuery(ContextMutablePtr) const\n@@ -100,8 +97,7 @@ class ITransformingStep : public IQueryPlanStep\n private:\n     virtual void updateOutputStream() = 0;\n \n-    /// We collect processors got after pipeline transformation.\n-    Processors processors;\n+    /// If we should collect processors got after pipeline transformation.\n     bool collect_processors;\n \n     const DataStreamTraits data_stream_traits;\ndiff --git a/src/Processors/QueryPlan/IntersectOrExceptStep.cpp b/src/Processors/QueryPlan/IntersectOrExceptStep.cpp\nindex c031303cc7f7..afdff44020f5 100644\n--- a/src/Processors/QueryPlan/IntersectOrExceptStep.cpp\n+++ b/src/Processors/QueryPlan/IntersectOrExceptStep.cpp\n@@ -42,10 +42,10 @@ IntersectOrExceptStep::IntersectOrExceptStep(\n QueryPipelineBuilderPtr IntersectOrExceptStep::updatePipeline(QueryPipelineBuilders pipelines, const BuildQueryPipelineSettings &)\n {\n     auto pipeline = std::make_unique<QueryPipelineBuilder>();\n-    QueryPipelineProcessorsCollector collector(*pipeline, this);\n \n     if (pipelines.empty())\n     {\n+        QueryPipelineProcessorsCollector collector(*pipeline, this);\n         pipeline->init(Pipe(std::make_shared<NullSource>(output_stream->header)));\n         processors = collector.detachProcessors();\n         return pipeline;\n@@ -56,6 +56,7 @@ QueryPipelineBuilderPtr IntersectOrExceptStep::updatePipeline(QueryPipelineBuild\n         /// Just in case.\n         if (!isCompatibleHeader(cur_pipeline->getHeader(), getOutputStream().header))\n         {\n+            QueryPipelineProcessorsCollector collector(*cur_pipeline, this);\n             auto converting_dag = ActionsDAG::makeConvertingActions(\n                 cur_pipeline->getHeader().getColumnsWithTypeAndName(),\n                 getOutputStream().header.getColumnsWithTypeAndName(),\n@@ -66,16 +67,20 @@ QueryPipelineBuilderPtr IntersectOrExceptStep::updatePipeline(QueryPipelineBuild\n             {\n                 return std::make_shared<ExpressionTransform>(cur_header, converting_actions);\n             });\n+\n+            auto added_processors = collector.detachProcessors();\n+            processors.insert(processors.end(), added_processors.begin(), added_processors.end());\n         }\n \n         /// For the case of union.\n         cur_pipeline->addTransform(std::make_shared<ResizeProcessor>(header, cur_pipeline->getNumStreams(), 1));\n     }\n \n-    *pipeline = QueryPipelineBuilder::unitePipelines(std::move(pipelines), max_threads);\n-    pipeline->addTransform(std::make_shared<IntersectOrExceptTransform>(header, current_operator));\n+    *pipeline = QueryPipelineBuilder::unitePipelines(std::move(pipelines), max_threads, &processors);\n+    auto transform = std::make_shared<IntersectOrExceptTransform>(header, current_operator);\n+    processors.push_back(transform);\n+    pipeline->addTransform(std::move(transform));\n \n-    processors = collector.detachProcessors();\n     return pipeline;\n }\n \ndiff --git a/src/Processors/QueryPlan/IntersectOrExceptStep.h b/src/Processors/QueryPlan/IntersectOrExceptStep.h\nindex d7eab574431d..d15d2802456a 100644\n--- a/src/Processors/QueryPlan/IntersectOrExceptStep.h\n+++ b/src/Processors/QueryPlan/IntersectOrExceptStep.h\n@@ -24,7 +24,6 @@ class IntersectOrExceptStep : public IQueryPlanStep\n     Block header;\n     Operator current_operator;\n     size_t max_threads;\n-    Processors processors;\n };\n \n }\ndiff --git a/src/Processors/QueryPlan/JoinStep.h b/src/Processors/QueryPlan/JoinStep.h\nindex fc7f74d4fe8d..a814d541574f 100644\n--- a/src/Processors/QueryPlan/JoinStep.h\n+++ b/src/Processors/QueryPlan/JoinStep.h\n@@ -37,7 +37,6 @@ class JoinStep : public IQueryPlanStep\n     size_t max_block_size;\n     size_t max_streams;\n     bool keep_left_read_in_order;\n-    Processors processors;\n };\n \n /// Special step for the case when Join is already filled.\ndiff --git a/src/Processors/QueryPlan/UnionStep.cpp b/src/Processors/QueryPlan/UnionStep.cpp\nindex 6290c7417dbc..e111890a8332 100644\n--- a/src/Processors/QueryPlan/UnionStep.cpp\n+++ b/src/Processors/QueryPlan/UnionStep.cpp\n@@ -62,10 +62,10 @@ void UnionStep::updateOutputSortDescription()\n QueryPipelineBuilderPtr UnionStep::updatePipeline(QueryPipelineBuilders pipelines, const BuildQueryPipelineSettings &)\n {\n     auto pipeline = std::make_unique<QueryPipelineBuilder>();\n-    QueryPipelineProcessorsCollector collector(*pipeline, this);\n \n     if (pipelines.empty())\n     {\n+        QueryPipelineProcessorsCollector collector(*pipeline, this);\n         pipeline->init(Pipe(std::make_shared<NullSource>(output_stream->header)));\n         processors = collector.detachProcessors();\n         return pipeline;\n@@ -80,6 +80,7 @@ QueryPipelineBuilderPtr UnionStep::updatePipeline(QueryPipelineBuilders pipeline\n         /// But, just in case, convert it to the same header if not.\n         if (!isCompatibleHeader(cur_pipeline->getHeader(), getOutputStream().header))\n         {\n+            QueryPipelineProcessorsCollector collector(*cur_pipeline, this);\n             auto converting_dag = ActionsDAG::makeConvertingActions(\n                 cur_pipeline->getHeader().getColumnsWithTypeAndName(),\n                 getOutputStream().header.getColumnsWithTypeAndName(),\n@@ -90,12 +91,13 @@ QueryPipelineBuilderPtr UnionStep::updatePipeline(QueryPipelineBuilders pipeline\n             {\n                 return std::make_shared<ExpressionTransform>(cur_header, converting_actions);\n             });\n+\n+            auto added_processors = collector.detachProcessors();\n+            processors.insert(processors.end(), added_processors.begin(), added_processors.end());\n         }\n     }\n \n-    *pipeline = QueryPipelineBuilder::unitePipelines(std::move(pipelines), max_threads);\n-\n-    processors = collector.detachProcessors();\n+    *pipeline = QueryPipelineBuilder::unitePipelines(std::move(pipelines), max_threads, &processors);\n     return pipeline;\n }\n \ndiff --git a/src/Processors/QueryPlan/UnionStep.h b/src/Processors/QueryPlan/UnionStep.h\nindex a5a2f6b356e4..6278de076730 100644\n--- a/src/Processors/QueryPlan/UnionStep.h\n+++ b/src/Processors/QueryPlan/UnionStep.h\n@@ -24,7 +24,6 @@ class UnionStep : public IQueryPlanStep\n private:\n     Block header;\n     size_t max_threads;\n-    Processors processors;\n };\n \n }\ndiff --git a/src/QueryPipeline/QueryPipelineBuilder.cpp b/src/QueryPipeline/QueryPipelineBuilder.cpp\nindex 626296834a24..a3b3438306eb 100644\n--- a/src/QueryPipeline/QueryPipelineBuilder.cpp\n+++ b/src/QueryPipeline/QueryPipelineBuilder.cpp\n@@ -309,6 +309,7 @@ QueryPipelineBuilder QueryPipelineBuilder::unitePipelines(\n         pipeline.limitMaxThreads(max_threads_limit);\n     }\n \n+    pipeline.setCollectedProcessors(nullptr);\n     return pipeline;\n }\n \n@@ -384,11 +385,7 @@ std::unique_ptr<QueryPipelineBuilder> QueryPipelineBuilder::joinPipelinesRightLe\n     /// Collect the NEW processors for the right pipeline.\n     QueryPipelineProcessorsCollector collector(*right);\n     /// Remember the last step of the right pipeline.\n-    ExpressionStep * step = typeid_cast<ExpressionStep *>(right->pipe.processors->back()->getQueryPlanStep());\n-    if (!step)\n-    {\n-        throw Exception(ErrorCodes::LOGICAL_ERROR, \"The top step of the right pipeline should be ExpressionStep\");\n-    }\n+    IQueryPlanStep * step = right->pipe.processors->back()->getQueryPlanStep();\n \n     /// In case joined subquery has totals, and we don't, add default chunk to totals.\n     bool default_totals = false;\n@@ -560,7 +557,8 @@ std::unique_ptr<QueryPipelineBuilder> QueryPipelineBuilder::joinPipelinesRightLe\n \n     /// Move the collected processors to the last step in the right pipeline.\n     Processors processors = collector.detachProcessors();\n-    step->appendExtraProcessors(processors);\n+    if (step)\n+        step->appendExtraProcessors(processors);\n \n     left->pipe.processors->insert(left->pipe.processors->end(), right->pipe.processors->begin(), right->pipe.processors->end());\n     left->resources = std::move(right->resources);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02516_join_with_totals_and_subquery_bug.reference b/tests/queries/0_stateless/02516_join_with_totals_and_subquery_bug.reference\nnew file mode 100644\nindex 000000000000..fd0b223f8e57\n--- /dev/null\n+++ b/tests/queries/0_stateless/02516_join_with_totals_and_subquery_bug.reference\n@@ -0,0 +1,7 @@\n+1\n+1\n+\n+0\n+\\N\n+\n+100000000000000000000\ndiff --git a/tests/queries/0_stateless/02516_join_with_totals_and_subquery_bug.sql b/tests/queries/0_stateless/02516_join_with_totals_and_subquery_bug.sql\nnew file mode 100644\nindex 000000000000..b6e60aa2e1f1\n--- /dev/null\n+++ b/tests/queries/0_stateless/02516_join_with_totals_and_subquery_bug.sql\n@@ -0,0 +1,53 @@\n+SELECT *\n+FROM\n+(\n+    SELECT 1 AS a\n+) AS t1\n+INNER JOIN\n+(\n+    SELECT 1 AS a\n+    GROUP BY 1\n+        WITH TOTALS\n+    UNION ALL\n+    SELECT 1\n+    GROUP BY 1\n+        WITH TOTALS\n+) AS t2 USING (a);\n+\n+SELECT a\n+FROM\n+(\n+    SELECT\n+        NULL AS a,\n+        NULL AS b,\n+        NULL AS c\n+    UNION ALL\n+    SELECT\n+        100000000000000000000.,\n+        NULL,\n+        NULL\n+    WHERE 0\n+    GROUP BY\n+        GROUPING SETS ((NULL))\n+        WITH TOTALS\n+) AS js1\n+ALL LEFT JOIN\n+(\n+    SELECT\n+        NULL AS a,\n+        2147483647 AS d\n+    GROUP BY\n+        NULL,\n+        '214748364.8'\n+        WITH CUBE\n+        WITH TOTALS\n+    UNION ALL\n+    SELECT\n+        2147483646,\n+        NULL\n+    GROUP BY\n+        base58Encode(materialize(NULL)),\n+        NULL\n+        WITH TOTALS\n+) AS js2 USING (a)\n+ORDER BY b ASC NULLS FIRST;\n",
  "problem_statement": "The top step of the right pipeline should be ExpressionStep\n**Describe the bug**\r\n[A link to the report](https://s3.amazonaws.com/clickhouse-test-reports/43600/d0f1198be66de6678f74e28d0c0b30cda07df8d5/fuzzer_astfuzzerasan//report.html)\r\n\r\n**How to reproduce**\r\n```\r\nSELECT 0. FROM (SELECT 7, NULL AS a, '0.0001048576', NULL, 256, NULL AS b GROUP BY '214748364.7' WITH TOTALS) AS js1 ANY RIGHT JOIN (SELECT NULL AS a, NULL AS b WHERE 34 WITH TOTALS UNION ALL SELECT NULL AS a, NULL AS b WITH TOTALS) AS js2 USING (a, b) WHERE NULL / 2 GROUP BY NULL WITH TOTALS ORDER BY '0.07' ASC NULLS FIRST\r\n\r\nSELECT 0.\r\nFROM\r\n(\r\n    SELECT\r\n        7,\r\n        NULL AS a,\r\n        '0.0001048576',\r\n        NULL,\r\n        256,\r\n        NULL AS b\r\n    GROUP BY '214748364.7'\r\n        WITH TOTALS\r\n) AS js1\r\nANY RIGHT JOIN\r\n(\r\n    SELECT\r\n        NULL AS a,\r\n        NULL AS b\r\n    WHERE 34\r\n        WITH TOTALS\r\n    UNION ALL\r\n    SELECT\r\n        NULL AS a,\r\n        NULL AS b\r\n        WITH TOTALS\r\n) AS js2 USING (a, b)\r\nWHERE NULL / 2\r\nGROUP BY NULL\r\n    WITH TOTALS\r\nORDER BY '0.07' ASC NULLS FIRST\r\n\r\nQuery id: fff1d1ff-4c49-4e96-b36f-33dbc695400c\r\n\r\n\r\n0 rows in set. Elapsed: 0.013 sec. \r\n\r\nReceived exception from server (version 22.12.1):\r\nCode: 49. DB::Exception: Received from localhost:9000. DB::Exception: The top step of the right pipeline should be ExpressionStep. (LOGICAL_ERROR)\r\n```\r\n\n",
  "hints_text": "https://github.com/ClickHouse/ClickHouse/pull/35612/files\nhttps://s3.amazonaws.com/clickhouse-test-reports/44157/d54f739836fa998f0e32458bcaf3dad545e25526/fuzzer_astfuzzerubsan//report.html\nAlways reproduced, unconditionally:\r\n\r\n```\r\nSELECT a\r\nFROM\r\n(\r\n    SELECT\r\n        NULL AS a,\r\n        NULL AS b,\r\n        NULL AS c\r\n    UNION ALL\r\n    SELECT\r\n        100000000000000000000.,\r\n        NULL,\r\n        NULL\r\n    WHERE 0\r\n    GROUP BY\r\n        GROUPING SETS ((NULL))\r\n        WITH TOTALS\r\n) AS js1\r\nALL LEFT JOIN\r\n(\r\n    SELECT\r\n        NULL AS a,\r\n        2147483647 AS d\r\n    GROUP BY\r\n        NULL,\r\n        '214748364.8'\r\n        WITH CUBE\r\n        WITH TOTALS\r\n    UNION ALL\r\n    SELECT\r\n        2147483646,\r\n        NULL\r\n    GROUP BY\r\n        base64Encode(materialize(NULL)),\r\n        NULL\r\n        WITH TOTALS\r\n) AS js2 USING (a)\r\nORDER BY b ASC NULLS FIRST\r\n```\n```\r\nSELECT *\r\nFROM\r\n(\r\n    SELECT 1 AS a\r\n) AS t1\r\nINNER JOIN\r\n(\r\n    SELECT 1 AS a\r\n    GROUP BY 1\r\n        WITH TOTALS\r\n    UNION ALL\r\n    SELECT 1\r\n    GROUP BY 1\r\n        WITH TOTALS\r\n) AS t2 USING (a)\r\n```",
  "created_at": "2022-12-28T13:04:32Z"
}