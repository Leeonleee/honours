{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 12103,
  "instance_id": "ClickHouse__ClickHouse-12103",
  "issue_numbers": [
    "12030"
  ],
  "base_commit": "072a8e0e40f79c23a28db217d66d20e59f98d769",
  "patch": "diff --git a/src/Processors/QueryPipeline.cpp b/src/Processors/QueryPipeline.cpp\nindex fa04082c82ff..f3635ac5408e 100644\n--- a/src/Processors/QueryPipeline.cpp\n+++ b/src/Processors/QueryPipeline.cpp\n@@ -564,8 +564,13 @@ void QueryPipeline::setOutputFormat(ProcessorPtr output)\n }\n \n void QueryPipeline::unitePipelines(\n-    std::vector<std::unique_ptr<QueryPipeline>> pipelines, const Block & common_header)\n+    std::vector<std::unique_ptr<QueryPipeline>> pipelines, const Block & common_header, size_t max_threads_limit)\n {\n+    /// Should we limit the number of threads for united pipeline. True if all pipelines have max_threads != 0.\n+    /// If true, result max_threads will be sum(max_threads).\n+    /// Note: it may be > than settings.max_threads, so we should apply this limit again.\n+    bool will_limit_max_threads = !initialized() || max_threads != 0;\n+\n     if (initialized())\n     {\n         addSimpleTransform([&](const Block & header)\n@@ -630,9 +635,20 @@ void QueryPipeline::unitePipelines(\n         interpreter_context.insert(interpreter_context.end(), pipeline.interpreter_context.begin(), pipeline.interpreter_context.end());\n         storage_holders.insert(storage_holders.end(), pipeline.storage_holders.begin(), pipeline.storage_holders.end());\n \n-        max_threads = std::max(max_threads, pipeline.max_threads);\n+        max_threads += pipeline.max_threads;\n+        will_limit_max_threads = will_limit_max_threads && pipeline.max_threads != 0;\n+\n+        /// If one of pipelines uses more threads then current limit, will keep it.\n+        /// It may happen if max_distributed_connections > max_threads\n+        if (pipeline.max_threads > max_threads_limit)\n+            max_threads_limit = pipeline.max_threads;\n     }\n \n+    if (!will_limit_max_threads)\n+        max_threads = 0;\n+    else\n+        limitMaxThreads(max_threads_limit);\n+\n     if (!extremes.empty())\n     {\n         if (extremes.size() == 1)\ndiff --git a/src/Processors/QueryPipeline.h b/src/Processors/QueryPipeline.h\nindex 7990b0b79f52..7bd16ff62fdf 100644\n--- a/src/Processors/QueryPipeline.h\n+++ b/src/Processors/QueryPipeline.h\n@@ -161,7 +161,7 @@ class QueryPipeline\n \n     /// Unite several pipelines together. Result pipeline would have common_header structure.\n     /// If collector is used, it will collect only newly-added processors, but not processors from pipelines.\n-    void unitePipelines(std::vector<std::unique_ptr<QueryPipeline>> pipelines, const Block & common_header);\n+    void unitePipelines(std::vector<std::unique_ptr<QueryPipeline>> pipelines, const Block & common_header, size_t max_threads_limit = 0);\n \n     PipelineExecutorPtr execute();\n \ndiff --git a/src/Processors/QueryPlan/UnionStep.cpp b/src/Processors/QueryPlan/UnionStep.cpp\nindex a8897e778a1f..b645eb3f3d75 100644\n--- a/src/Processors/QueryPlan/UnionStep.cpp\n+++ b/src/Processors/QueryPlan/UnionStep.cpp\n@@ -30,15 +30,7 @@ QueryPipelinePtr UnionStep::updatePipeline(QueryPipelines pipelines)\n         return pipeline;\n     }\n \n-    size_t num_pipelines = pipelines.size();\n-    pipeline->unitePipelines(std::move(pipelines), output_stream->header);\n-\n-    if (num_pipelines > 1)\n-    {\n-        // nested queries can force 1 thread (due to simplicity)\n-        // but in case of union this cannot be done.\n-        pipeline->setMaxThreads(std::min<UInt64>(num_pipelines, max_threads));\n-    }\n+    pipeline->unitePipelines(std::move(pipelines), output_stream->header ,max_threads);\n \n     processors = collector.detachProcessors();\n     return pipeline;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01358_union_threads_bug.reference b/tests/queries/0_stateless/01358_union_threads_bug.reference\nnew file mode 100644\nindex 000000000000..4397f4e2fdd5\n--- /dev/null\n+++ b/tests/queries/0_stateless/01358_union_threads_bug.reference\n@@ -0,0 +1,2 @@\n+300\n+1\ndiff --git a/tests/queries/0_stateless/01358_union_threads_bug.sql b/tests/queries/0_stateless/01358_union_threads_bug.sql\nnew file mode 100644\nindex 000000000000..0c07364f41ca\n--- /dev/null\n+++ b/tests/queries/0_stateless/01358_union_threads_bug.sql\n@@ -0,0 +1,7 @@\n+set log_queries = 1;\n+set max_threads = 16;\n+\n+SELECT count() FROM (SELECT number FROM numbers_mt(1000000) ORDER BY number DESC LIMIT 100 UNION ALL SELECT number FROM numbers_mt(1000000) ORDER BY number DESC LIMIT 100 UNION ALL SELECT number FROM numbers_mt(1000000) ORDER BY number DESC LIMIT 100);\n+\n+system flush logs;\n+select length(thread_ids) >= 16 from system.query_log where event_date >= today() - 1 and query like '%SELECT count() FROM (SELECT number FROM numbers_mt(1000000) ORDER BY number DESC LIMIT 100 UNION ALL SELECT number FROM numbers_mt(1000000) ORDER BY number DESC LIMIT 100 UNION ALL SELECT number FROM numbers_mt(1000000) ORDER BY number DESC LIMIT 100)%' and type = 'QueryFinish' order by query_start_time desc limit 1;\n",
  "problem_statement": "Processors performance downgrade with UNION & LIMIT\n```sql\r\nSELECT count()\r\nFROM \r\n(\r\n    SELECT number\r\n    FROM numbers_mt(100000000)\r\n    ORDER BY number DESC\r\n    LIMIT 100\r\n    UNION ALL\r\n    SELECT number\r\n    FROM numbers_mt(100000000)\r\n    ORDER BY number DESC\r\n    LIMIT 100\r\n    UNION ALL\r\n    SELECT number\r\n    FROM numbers_mt(100000000)\r\n    ORDER BY number DESC\r\n    LIMIT 100\r\n)\r\n\r\n\r\nSET experimental_use_processors = 0;\r\n-- 1 rows in set. Elapsed: 1.581 sec. Processed 300.00 million rows, 2.40 GB (189.78 million rows/s., 1.52 GB/s.) \r\n\r\nSET experimental_use_processors = 1;\r\n-- 1 rows in set. Elapsed: 3.569 sec. Processed 300.00 million rows, 2.40 GB (84.06 million rows/s., 672.50 MB/s.) \r\n```\r\n\r\nSimilar for MergeTree:\r\n\r\n```sql\r\ncreate table test engine=MergeTree order by tuple() as select * from numbers(30000000);\r\n\r\nselect count() from (select number from test group by number order by number limit 10 union all select number from test group by number order by number limit 10);\r\n\r\nset experimental_use_processors=0;\r\n-- Elapsed: 2.664 sec\r\n\r\nset experimental_use_processors=1;\r\n-- Elapsed: 3.656 sec\r\n```\n",
  "hints_text": "",
  "created_at": "2020-07-03T08:27:11Z"
}