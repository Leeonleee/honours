{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 9391,
  "instance_id": "ClickHouse__ClickHouse-9391",
  "issue_numbers": [
    "9388"
  ],
  "base_commit": "ab0bb7a48eeffb48964e757d85fe9d3f7ac80d3a",
  "patch": "diff --git a/dbms/src/Columns/ColumnAggregateFunction.cpp b/dbms/src/Columns/ColumnAggregateFunction.cpp\nindex 845ae47e623e..e0808f01c85d 100644\n--- a/dbms/src/Columns/ColumnAggregateFunction.cpp\n+++ b/dbms/src/Columns/ColumnAggregateFunction.cpp\n@@ -157,6 +157,21 @@ void ColumnAggregateFunction::ensureOwnership()\n }\n \n \n+bool ColumnAggregateFunction::structureEquals(const IColumn & to) const\n+{\n+    const auto * to_concrete = typeid_cast<const ColumnAggregateFunction *>(&to);\n+    if (!to_concrete)\n+        return false;\n+\n+    /// AggregateFunctions must be the same.\n+\n+    const IAggregateFunction & func_this = *func;\n+    const IAggregateFunction & func_to = *to_concrete->func;\n+\n+    return typeid(func_this) == typeid(func_to);\n+}\n+\n+\n void ColumnAggregateFunction::insertRangeFrom(const IColumn & from, size_t start, size_t length)\n {\n     const ColumnAggregateFunction & from_concrete = assert_cast<const ColumnAggregateFunction &>(from);\ndiff --git a/dbms/src/Columns/ColumnAggregateFunction.h b/dbms/src/Columns/ColumnAggregateFunction.h\nindex af1825dca879..8e17a28cf4ed 100644\n--- a/dbms/src/Columns/ColumnAggregateFunction.h\n+++ b/dbms/src/Columns/ColumnAggregateFunction.h\n@@ -204,6 +204,8 @@ class ColumnAggregateFunction final : public COWHelper<IColumn, ColumnAggregateF\n     }\n \n     void getExtremes(Field & min, Field & max) const override;\n+\n+    bool structureEquals(const IColumn &) const override;\n };\n \n \n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/01088_array_slice_of_aggregate_functions.reference b/dbms/tests/queries/0_stateless/01088_array_slice_of_aggregate_functions.reference\nnew file mode 100644\nindex 000000000000..57fed5c75ed2\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/01088_array_slice_of_aggregate_functions.reference\n@@ -0,0 +1,1 @@\n+['\\0\u0001\\0\\0\\0\\0']\ndiff --git a/dbms/tests/queries/0_stateless/01088_array_slice_of_aggregate_functions.sql b/dbms/tests/queries/0_stateless/01088_array_slice_of_aggregate_functions.sql\nnew file mode 100644\nindex 000000000000..ba525f30228f\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/01088_array_slice_of_aggregate_functions.sql\n@@ -0,0 +1,1 @@\n+select arraySlice(groupArray(x),1,1) as y from (select uniqState(number) as x from numbers(10) group by number);\n",
  "problem_statement": "arraySlice: Method structureEquals is not supported for AggregateFunction(uniq)\nThis works:\r\n```\r\nselect groupArray(x) as y from (select uniqState(number) as x from numbers(10) group by number);\r\n```\r\nThis not\r\n```\r\nselect arraySlice(groupArray(x),1,1) as y from (select uniqState(number) as x from numbers(10) group by number);\r\n\r\n\u2192 Progress: 0.00 rows, 0.00 B (0.00 rows/s., 0.00 B/s.) Received exception from server (version 20.2.1):\r\nCode: 48. DB::Exception: Received from localhost:9000. DB::Exception: Method structureEquals is not supported for AggregateFunction(uniq). Stack trace:\r\n```\n",
  "hints_text": "",
  "created_at": "2020-02-26T19:06:39Z",
  "modified_files": [
    "dbms/src/Columns/ColumnAggregateFunction.cpp",
    "dbms/src/Columns/ColumnAggregateFunction.h"
  ],
  "modified_test_files": [
    "b/dbms/tests/queries/0_stateless/01088_array_slice_of_aggregate_functions.reference",
    "b/dbms/tests/queries/0_stateless/01088_array_slice_of_aggregate_functions.sql"
  ]
}