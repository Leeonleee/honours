You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Deadlock in LDAP assigned role update
We've been experiencing problems where some of our ClickHouse nodes suddenly become unresponsive and require a restart to resolve the issue. When becoming unresponsive, the host system is basically idle (no CPU/memory/IO usage) and connection attempts via `clickhouse-client` get stuck at (no smiley prompt):

```
ClickHouse client version 23.3.6.7 (official build).
Connecting to localhost:9000 as user [...].
Connected to ClickHouse server version 23.3.6 revision 54462.
```

The `/ping` endpoint, which we use for health checks, still returns `200 OK` and affected nodes eventually get behind replication as reported by the `/replicas_status` endpoint. A restart seems to be the only way to resolve it. 

**Analysis**

We eventually tracked it down to the LDAP integration and the update of assigned roles:
```
*GIVEN* an LDAP user that successfully connected to clickhouse node n
*AND* the verification cooldown expired (if configured)
*AND* the LDAP groups of the user changed compared to the last connection
*AND* the LDAP user has groups matching the configured role mapping prefix
*AND* any of the matching groups does not exist in ClickHouse (important!) 
*WHEN* the LDAP user connects to clickhouse node n again
*THEN* deadlock
```
The reason for this can be found in [LDAPAccessStorage::updateAssignedRolesNoLock](https://github.com/ClickHouse/ClickHouse/blob/70d1adf/src/Access/LDAPAccessStorage.cpp#L304-L315). The `update_func`, which we pass to [MemoryAccessStorage::updateImpl](https://github.com/ClickHouse/ClickHouse/blob/13d9952/src/Access/MemoryAccessStorage.cpp#L177-L181), calls [LDAPAccessStorage::assignRolesNoLock](https://github.com/ClickHouse/ClickHouse/blob/70d1adf/src/Access/LDAPAccessStorage.cpp#L207), which [tries to find](https://github.com/ClickHouse/ClickHouse/blob/70d1adf/src/Access/LDAPAccessStorage.cpp#L218) the ClickHouse role via `access_control.find<Role>(role_name)`. [AccessControl](https://github.com/ClickHouse/ClickHouse/blob/2f46ae8/src/Access/AccessControl.h#L50) inherits the implementation from [MultipleAccessStorage::findImpl](https://github.com/ClickHouse/ClickHouse/blob/583d9b3/src/Access/MultipleAccessStorage.cpp#L101-L115), which simply iterates all known storages, including `LDAPAccessStorage`, which [delegates](https://github.com/ClickHouse/ClickHouse/blob/70d1adf/src/Access/LDAPAccessStorage.cpp#L418-L422) to [MemoryAccessStorage::findImpl](https://github.com/ClickHouse/ClickHouse/blob/13d9952227162b63ae5e4ae98b0a40677c169b97/src/Access/MemoryAccessStorage.cpp#L18-L28), which tries to [acquire](https://github.com/ClickHouse/ClickHouse/blob/13d9952227162b63ae5e4ae98b0a40677c169b97/src/Access/MemoryAccessStorage.cpp#L20) the already by [MemoryAccessStorage::updateImpl](https://github.com/ClickHouse/ClickHouse/blob/13d9952/src/Access/MemoryAccessStorage.cpp#L179) acquired mutex, which leads to a deadlock. Further connection attempts then wait for the same mutex and eventually all processing stops.

There is a [simple fix](https://github.com/jmaicher/ClickHouse/commit/3fdd1afd8016bc821bde5cc6adae3b73c15de9db#diff-358f3c1661944b123f22ef200938d1d8f3e27534603b5e885e465b35f43a4875R60): We can use [std::recursive_mutex](https://en.cppreference.com/w/cpp/thread/recursive_mutex) instead of [std::mutex](https://en.cppreference.com/w/cpp/thread/mutex) in [MemoryAccessStorage](https://github.com/ClickHouse/ClickHouse/blob/bb57caa/src/Access/MemoryAccessStorage.h#L60), which allows the same thread to acquire the lock again. I verified this with a local build, and it works. But there might be a better solution.

**Does it reproduce on recent release?**

Yes, reproduced on master.

**How to reproduce**

See description above.

**Expected behavior**

The roles are updated without deadlock.
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
