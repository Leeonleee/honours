{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 42044,
  "instance_id": "ClickHouse__ClickHouse-42044",
  "issue_numbers": [
    "39248"
  ],
  "base_commit": "011748e4313942a4935252d627c29bbedd4f9848",
  "patch": "diff --git a/src/DataTypes/Serializations/SerializationDate.cpp b/src/DataTypes/Serializations/SerializationDate.cpp\nindex 60db191a9dcb..678817017e0b 100644\n--- a/src/DataTypes/Serializations/SerializationDate.cpp\n+++ b/src/DataTypes/Serializations/SerializationDate.cpp\n@@ -76,9 +76,9 @@ void SerializationDate::serializeTextCSV(const IColumn & column, size_t row_num,\n \n void SerializationDate::deserializeTextCSV(IColumn & column, ReadBuffer & istr, const FormatSettings &) const\n {\n-    LocalDate value;\n+    DayNum value;\n     readCSV(value, istr);\n-    assert_cast<ColumnUInt16 &>(column).getData().push_back(value.getDayNum());\n+    assert_cast<ColumnUInt16 &>(column).getData().push_back(value);\n }\n \n }\ndiff --git a/src/IO/ReadHelpers.h b/src/IO/ReadHelpers.h\nindex d5b0ce4bebe8..27a24eef8047 100644\n--- a/src/IO/ReadHelpers.h\n+++ b/src/IO/ReadHelpers.h\n@@ -1095,6 +1095,7 @@ inline void readText(is_floating_point auto & x, ReadBuffer & buf) { readFloatTe\n \n inline void readText(String & x, ReadBuffer & buf) { readEscapedString(x, buf); }\n inline void readText(LocalDate & x, ReadBuffer & buf) { readDateText(x, buf); }\n+inline void readText(DayNum & x, ReadBuffer & buf) { readDateText(x, buf); }\n inline void readText(LocalDateTime & x, ReadBuffer & buf) { readDateTimeText(x, buf); }\n inline void readText(UUID & x, ReadBuffer & buf) { readUUIDText(x, buf); }\n \n@@ -1176,6 +1177,7 @@ inline void readCSV(T & x, ReadBuffer & buf)\n \n inline void readCSV(String & x, ReadBuffer & buf, const FormatSettings::CSV & settings) { readCSVString(x, buf, settings); }\n inline void readCSV(LocalDate & x, ReadBuffer & buf) { readCSVSimple(x, buf); }\n+inline void readCSV(DayNum & x, ReadBuffer & buf) { readCSVSimple(x, buf); }\n inline void readCSV(LocalDateTime & x, ReadBuffer & buf) { readCSVSimple(x, buf); }\n inline void readCSV(UUID & x, ReadBuffer & buf) { readCSVSimple(x, buf); }\n inline void readCSV(UInt128 & x, ReadBuffer & buf) { readCSVSimple(x, buf); }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02457_csv_parse_date_out_of_range.reference b/tests/queries/0_stateless/02457_csv_parse_date_out_of_range.reference\nnew file mode 100644\nindex 000000000000..544e8100fa46\n--- /dev/null\n+++ b/tests/queries/0_stateless/02457_csv_parse_date_out_of_range.reference\n@@ -0,0 +1,2 @@\n+above\t2149-06-06\n+below\t1970-01-01\ndiff --git a/tests/queries/0_stateless/02457_csv_parse_date_out_of_range.sh b/tests/queries/0_stateless/02457_csv_parse_date_out_of_range.sh\nnew file mode 100755\nindex 000000000000..297f7e31bab1\n--- /dev/null\n+++ b/tests/queries/0_stateless/02457_csv_parse_date_out_of_range.sh\n@@ -0,0 +1,15 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+$CLICKHOUSE_CLIENT --query=\"DROP TABLE IF EXISTS test_date_out_of_range sync\";\n+$CLICKHOUSE_CLIENT --query=\"CREATE TABLE test_date_out_of_range (f String, t Date) engine=Memory()\";\n+\n+printf '\"above\", 2200-12-31\n+\"below\", 1900-01-01\n+' | $CLICKHOUSE_CLIENT --input_format_defaults_for_omitted_fields=1 --input_format_csv_empty_as_default=1 --query=\"INSERT INTO test_date_out_of_range FORMAT CSV\";\n+\n+$CLICKHOUSE_CLIENT --query=\"SELECT * FROM test_date_out_of_range\";\n+$CLICKHOUSE_CLIENT --query=\"DROP TABLE test_date_out_of_range\";\n\\ No newline at end of file\n",
  "problem_statement": "Parsing out of range dates in CSV lead to unexpected result\nWhen you parse Date column which have values bigger than by different format \r\n\r\n```sql\r\nDROP TABLE IF EXISTS test_date_imports;\r\ncreate temporary table test_date_imports (f String, t Date);\r\ninsert into test_date_imports(t) format TSV 2200-01-01\r\ninsert into test_date_imports format CSV 'csv',2200-01-01\r\ninsert into test_date_imports format JSONEachRow {\"f\":\"JSONEachRow\",\"t\":\"2200-01-01\"}\r\ninsert into test_date_imports values ('values','2200-01-01')\r\n\r\nSELECT * FROM test_date_imports FORMAT PrettyCompactMonoBlock;\r\n\r\n\u250c\u2500f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500t\u2500\u2510\r\n\u2502             \u2502 2149-06-06 \u2502\r\n\u2502 csv         \u2502 2020-07-27 \u2502<-- it looks like parsing happened via Date32 or DateTime64 path, and then casted with overflow\r\n\u2502 JSONEachRow \u2502 2149-06-06 \u2502\r\n\u2502 values      \u2502 2149-06-06 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nTRUNCATE TABLE test_date_imports;\r\ninsert into test_date_imports(t) format TSV 9999-01-01\r\ninsert into test_date_imports format CSV 'csv',9999-01-01\r\ninsert into test_date_imports format JSONEachRow {\"f\":\"JSONEachRow\",\"t\":\"9999-01-01\"}\r\ninsert into test_date_imports values ('values','9999-01-01')\r\n\r\nSELECT * FROM test_date_imports FORMAT PrettyCompactMonoBlock\r\n\r\nSELECT * FROM test_date_imports FORMAT PrettyCompactMonoBlock\r\n\u250c\u2500f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500t\u2500\u2510\r\n\u2502             \u2502 2149-06-06 \u2502\r\n\u2502 csv         \u2502 2104-06-06 \u2502\r\n\u2502 JSONEachRow \u2502 2149-06-06 \u2502\r\n\u2502 values      \u2502 2149-06-06 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n4 rows in set. Elapsed: 0.002 sec. \r\n```\r\n\r\nP.S. It's not the edge case found by QA. It's a real-life case from the end-user report. IRL it was the '[end of time](https://softwareengineering.stackexchange.com/questions/164843/is-there-a-constant-for-end-of-time)' date exported by another database as '9999-12-31' which was always stored in ClickHouse as '2149-06-06' but after importing from CSV as '2104-06-06'\n",
  "hints_text": "",
  "created_at": "2022-10-03T22:40:36Z",
  "modified_files": [
    "src/DataTypes/Serializations/SerializationDate.cpp",
    "src/IO/ReadHelpers.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02457_csv_parse_date_out_of_range.reference",
    "b/tests/queries/0_stateless/02457_csv_parse_date_out_of_range.sh"
  ]
}