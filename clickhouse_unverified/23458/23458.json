{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 23458,
  "instance_id": "ClickHouse__ClickHouse-23458",
  "issue_numbers": [
    "23435"
  ],
  "base_commit": "b1081bcf544f56f7c1579c359b161b7546c35966",
  "patch": "diff --git a/src/Storages/System/IStorageSystemOneBlock.h b/src/Storages/System/IStorageSystemOneBlock.h\nindex 36e92d5a1f42..fdc966130ad2 100644\n--- a/src/Storages/System/IStorageSystemOneBlock.h\n+++ b/src/Storages/System/IStorageSystemOneBlock.h\n@@ -12,7 +12,16 @@ namespace DB\n class Context;\n \n \n-/** Base class for system tables whose all columns have String type.\n+/** IStorageSystemOneBlock is base class for system tables whose all columns can be synchronously fetched.\n+  *\n+  * Client class need to provide static method static NamesAndTypesList getNamesAndTypes() that will return list of column names and\n+  * their types. IStorageSystemOneBlock during read will create result columns in same order as result of getNamesAndTypes\n+  * and pass it with fillData method.\n+  *\n+  * Client also must override fillData and fill result columns.\n+  *\n+  * If subclass want to support virtual columns, it should override getVirtuals method of IStorage interface.\n+  * IStorageSystemOneBlock will add virtuals columns at the end of result columns of fillData method.\n   */\n template <typename Self>\n class IStorageSystemOneBlock : public IStorage\n@@ -41,9 +50,10 @@ class IStorageSystemOneBlock : public IStorage\n         size_t /*max_block_size*/,\n         unsigned /*num_streams*/) override\n     {\n-        metadata_snapshot->check(column_names, getVirtuals(), getStorageID());\n+        auto virtuals_names_and_types = getVirtuals();\n+        metadata_snapshot->check(column_names, virtuals_names_and_types, getStorageID());\n \n-        Block sample_block = metadata_snapshot->getSampleBlock();\n+        Block sample_block = metadata_snapshot->getSampleBlockWithVirtuals(virtuals_names_and_types);\n         MutableColumns res_columns = sample_block.cloneEmptyColumns();\n         fillData(res_columns, context, query_info);\n \ndiff --git a/src/Storages/System/StorageSystemDictionaries.cpp b/src/Storages/System/StorageSystemDictionaries.cpp\nindex a362e6a44e36..c76dba9df583 100644\n--- a/src/Storages/System/StorageSystemDictionaries.cpp\n+++ b/src/Storages/System/StorageSystemDictionaries.cpp\n@@ -50,6 +50,13 @@ NamesAndTypesList StorageSystemDictionaries::getNamesAndTypes()\n     };\n }\n \n+NamesAndTypesList StorageSystemDictionaries::getVirtuals() const\n+{\n+    return {\n+        {\"key\", std::make_shared<DataTypeString>()}\n+    };\n+}\n+\n void StorageSystemDictionaries::fillData(MutableColumns & res_columns, ContextPtr context, const SelectQueryInfo & /*query_info*/) const\n {\n     const auto access = context->getAccess();\n@@ -128,6 +135,9 @@ void StorageSystemDictionaries::fillData(MutableColumns & res_columns, ContextPt\n         else\n             res_columns[i++]->insertDefault();\n \n+        /// Start fill virtual columns\n+\n+        res_columns[i++]->insert(dictionary_structure.getKeyDescription());\n     }\n }\n \ndiff --git a/src/Storages/System/StorageSystemDictionaries.h b/src/Storages/System/StorageSystemDictionaries.h\nindex 63b33adaaffd..aa65a9461278 100644\n--- a/src/Storages/System/StorageSystemDictionaries.h\n+++ b/src/Storages/System/StorageSystemDictionaries.h\n@@ -18,6 +18,8 @@ class StorageSystemDictionaries final : public ext::shared_ptr_helper<StorageSys\n \n     static NamesAndTypesList getNamesAndTypes();\n \n+    NamesAndTypesList getVirtuals() const override;\n+\n protected:\n     using IStorageSystemOneBlock::IStorageSystemOneBlock;\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01838_system_dictionaries_virtual_key_column.reference b/tests/queries/0_stateless/01838_system_dictionaries_virtual_key_column.reference\nnew file mode 100644\nindex 000000000000..f0543d9221e8\n--- /dev/null\n+++ b/tests/queries/0_stateless/01838_system_dictionaries_virtual_key_column.reference\n@@ -0,0 +1,4 @@\n+simple key\n+example_simple_key_dictionary\tUInt64\n+complex key\n+example_complex_key_dictionary\t(UInt64, String)\ndiff --git a/tests/queries/0_stateless/01838_system_dictionaries_virtual_key_column.sql b/tests/queries/0_stateless/01838_system_dictionaries_virtual_key_column.sql\nnew file mode 100644\nindex 000000000000..97d96f643cf9\n--- /dev/null\n+++ b/tests/queries/0_stateless/01838_system_dictionaries_virtual_key_column.sql\n@@ -0,0 +1,26 @@\n+DROP DICTIONARY IF EXISTS example_simple_key_dictionary;\n+CREATE DICTIONARY example_simple_key_dictionary (\n+    id UInt64,\n+    value UInt64\n+)\n+PRIMARY KEY id\n+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE '' DATABASE currentDatabase()))\n+LAYOUT(DIRECT());\n+\n+SELECT 'simple key';\n+\n+SELECT name, key FROM system.dictionaries WHERE name='example_simple_key_dictionary' AND database=currentDatabase();\n+\n+DROP DICTIONARY IF EXISTS example_complex_key_dictionary;\n+CREATE DICTIONARY example_complex_key_dictionary (\n+    id UInt64,\n+    id_key String,\n+    value UInt64\n+)\n+PRIMARY KEY id, id_key\n+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE '' DATABASE currentDatabase()))\n+LAYOUT(COMPLEX_KEY_DIRECT());\n+\n+SELECT 'complex key';\n+\n+SELECT name, key FROM system.dictionaries WHERE name='example_complex_key_dictionary' AND database=currentDatabase();\n",
  "problem_statement": "Can`t connect to clickhouse with tabix after update to ch version 21.4.4.30\nCan`t connect to direct ch with tabix after update to version 21.4.4.30 with error \r\nCode: 47, e.displayText() = DB::Exception: Missing columns: 'key' while processing query: 'SELECT name, key, attribute.names, attribute.types FROM system.dictionaries ARRAY JOIN attribute ORDER BY name ASC, attribute.names ASC', required columns: 'name' 'key', maybe you meant: ['name'], arrayJoin columns: 'attribute.names' 'attribute.types' (version 21.4.4.30 (official build))\r\nsystem.dictionaries have been modified at version 21.4.4.30\r\n[https://github.com/ClickHouse/ClickHouse/commit/a53c90e509d0ab9596e73747f085cf0191284311?branch=a53c90e509d0ab9596e73747f085cf0191284311&diff=unified](url) @kitaisreal\r\n\n",
  "hints_text": "@AlexanderDobrokhodov we modified structure of our system.dictionaries table, it is backward incompatible change. It is not a bug.\nYes, this is really not a bug. Is there any way to fix this problem from the tabix side? Unfortunately, there is no activity in the tabix theme.\nhttps://github.com/tabixio/tabix/ is opensource . fork -> fix\n@AlexanderDobrokhodov, @den-crane yes I checked repository there are no activity, will fix it with virtual `key` column in system.dictionaries.",
  "created_at": "2021-04-21T22:15:03Z",
  "modified_files": [
    "src/Storages/System/IStorageSystemOneBlock.h",
    "src/Storages/System/StorageSystemDictionaries.cpp",
    "src/Storages/System/StorageSystemDictionaries.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01838_system_dictionaries_virtual_key_column.reference",
    "b/tests/queries/0_stateless/01838_system_dictionaries_virtual_key_column.sql"
  ]
}