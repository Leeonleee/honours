{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 16636,
  "instance_id": "ClickHouse__ClickHouse-16636",
  "issue_numbers": [
    "16632"
  ],
  "base_commit": "55fd29fdf9db8bde06b5b112d354aec4114b95ce",
  "patch": "diff --git a/src/Functions/acosh.cpp b/src/Functions/acosh.cpp\nnew file mode 100644\nindex 000000000000..20473faafc7f\n--- /dev/null\n+++ b/src/Functions/acosh.cpp\n@@ -0,0 +1,21 @@\n+#include <Functions/FunctionFactory.h>\n+#include <Functions/FunctionMathUnary.h>\n+\n+namespace DB\n+{\n+namespace\n+{\n+    struct AcoshName\n+    {\n+        static constexpr auto name = \"acosh\";\n+    };\n+    using FunctionAcosh = FunctionMathUnary<UnaryFunctionVectorized<AcoshName, acosh>>;\n+\n+}\n+\n+void registerFunctionAcosh(FunctionFactory & factory)\n+{\n+    factory.registerFunction<FunctionAcosh>();\n+}\n+\n+}\ndiff --git a/src/Functions/asinh.cpp b/src/Functions/asinh.cpp\nnew file mode 100644\nindex 000000000000..fd2ac6c7a9f1\n--- /dev/null\n+++ b/src/Functions/asinh.cpp\n@@ -0,0 +1,21 @@\n+#include <Functions/FunctionFactory.h>\n+#include <Functions/FunctionMathUnary.h>\n+\n+namespace DB\n+{\n+namespace\n+{\n+    struct AsinhName\n+    {\n+        static constexpr auto name = \"asinh\";\n+    };\n+    using FunctionAsinh = FunctionMathUnary<UnaryFunctionVectorized<AsinhName, asinh>>;\n+\n+}\n+\n+void registerFunctionAsinh(FunctionFactory & factory)\n+{\n+    factory.registerFunction<FunctionAsinh>();\n+}\n+\n+}\ndiff --git a/src/Functions/atan2.cpp b/src/Functions/atan2.cpp\nnew file mode 100644\nindex 000000000000..0e363440d090\n--- /dev/null\n+++ b/src/Functions/atan2.cpp\n@@ -0,0 +1,21 @@\n+#include <Functions/FunctionFactory.h>\n+#include <Functions/FunctionMathBinaryFloat64.h>\n+\n+namespace DB\n+{\n+namespace\n+{\n+    struct Atan2Name\n+    {\n+        static constexpr auto name = \"atan2\";\n+    };\n+    using FunctionAtan2 = FunctionMathBinaryFloat64<BinaryFunctionVectorized<Atan2Name, atan2>>;\n+\n+}\n+\n+void registerFunctionAtan2(FunctionFactory & factory)\n+{\n+    factory.registerFunction<FunctionAtan2>(FunctionFactory::CaseInsensitive);\n+}\n+\n+}\ndiff --git a/src/Functions/atanh.cpp b/src/Functions/atanh.cpp\nnew file mode 100644\nindex 000000000000..a8154c719fcb\n--- /dev/null\n+++ b/src/Functions/atanh.cpp\n@@ -0,0 +1,21 @@\n+#include <Functions/FunctionFactory.h>\n+#include <Functions/FunctionMathUnary.h>\n+\n+namespace DB\n+{\n+namespace\n+{\n+    struct AtanhName\n+    {\n+        static constexpr auto name = \"atanh\";\n+    };\n+    using FunctionAtanh = FunctionMathUnary<UnaryFunctionVectorized<AtanhName, atanh>>;\n+\n+}\n+\n+void registerFunctionAtanh(FunctionFactory & factory)\n+{\n+    factory.registerFunction<FunctionAtanh>();\n+}\n+\n+}\ndiff --git a/src/Functions/cosh.cpp b/src/Functions/cosh.cpp\nnew file mode 100644\nindex 000000000000..88753fcb95ba\n--- /dev/null\n+++ b/src/Functions/cosh.cpp\n@@ -0,0 +1,21 @@\n+#include <Functions/FunctionFactory.h>\n+#include <Functions/FunctionMathUnary.h>\n+\n+namespace DB\n+{\n+namespace\n+{\n+    struct CoshName\n+    {\n+        static constexpr auto name = \"cosh\";\n+    };\n+    using FunctionCosh = FunctionMathUnary<UnaryFunctionVectorized<CoshName, cosh>>;\n+\n+}\n+\n+void registerFunctionCosh(FunctionFactory & factory)\n+{\n+    factory.registerFunction<FunctionCosh>();\n+}\n+\n+}\ndiff --git a/src/Functions/hypot.cpp b/src/Functions/hypot.cpp\nnew file mode 100644\nindex 000000000000..00297713d119\n--- /dev/null\n+++ b/src/Functions/hypot.cpp\n@@ -0,0 +1,21 @@\n+#include <Functions/FunctionFactory.h>\n+#include <Functions/FunctionMathBinaryFloat64.h>\n+\n+namespace DB\n+{\n+namespace\n+{\n+    struct HypotName\n+    {\n+        static constexpr auto name = \"hypot\";\n+    };\n+    using FunctionHypot = FunctionMathBinaryFloat64<BinaryFunctionVectorized<HypotName, hypot>>;\n+\n+}\n+\n+void registerFunctionHypot(FunctionFactory & factory)\n+{\n+    factory.registerFunction<FunctionHypot>(FunctionFactory::CaseInsensitive);\n+}\n+\n+}\ndiff --git a/src/Functions/log1p.cpp b/src/Functions/log1p.cpp\nnew file mode 100644\nindex 000000000000..dc3a16224be2\n--- /dev/null\n+++ b/src/Functions/log1p.cpp\n@@ -0,0 +1,21 @@\n+#include <Functions/FunctionFactory.h>\n+#include <Functions/FunctionMathUnary.h>\n+\n+namespace DB\n+{\n+namespace\n+{\n+    struct Log1pName\n+    {\n+        static constexpr auto name = \"log1p\";\n+    };\n+    using FunctionLog1p = FunctionMathUnary<UnaryFunctionVectorized<Log1pName, log1p>>;\n+\n+}\n+\n+void registerFunctionLog1p(FunctionFactory & factory)\n+{\n+    factory.registerFunction<FunctionLog1p>();\n+}\n+\n+}\ndiff --git a/src/Functions/registerFunctionsMath.cpp b/src/Functions/registerFunctionsMath.cpp\nindex e102c7250508..004fccfbec18 100644\n--- a/src/Functions/registerFunctionsMath.cpp\n+++ b/src/Functions/registerFunctionsMath.cpp\n@@ -1,6 +1,5 @@\n namespace DB\n {\n-\n class FunctionFactory;\n \n void registerFunctionE(FunctionFactory & factory);\n@@ -9,6 +8,7 @@ void registerFunctionExp(FunctionFactory & factory);\n void registerFunctionLog(FunctionFactory & factory);\n void registerFunctionExp2(FunctionFactory & factory);\n void registerFunctionLog2(FunctionFactory & factory);\n+void registerFunctionLog1p(FunctionFactory & factory);\n void registerFunctionExp10(FunctionFactory & factory);\n void registerFunctionLog10(FunctionFactory & factory);\n void registerFunctionSqrt(FunctionFactory & factory);\n@@ -23,8 +23,15 @@ void registerFunctionTan(FunctionFactory & factory);\n void registerFunctionAsin(FunctionFactory & factory);\n void registerFunctionAcos(FunctionFactory & factory);\n void registerFunctionAtan(FunctionFactory & factory);\n+void registerFunctionAtan2(FunctionFactory & factory);\n void registerFunctionSigmoid(FunctionFactory & factory);\n+void registerFunctionHypot(FunctionFactory & factory);\n+void registerFunctionSinh(FunctionFactory & factory);\n+void registerFunctionCosh(FunctionFactory & factory);\n void registerFunctionTanh(FunctionFactory & factory);\n+void registerFunctionAsinh(FunctionFactory & factory);\n+void registerFunctionAcosh(FunctionFactory & factory);\n+void registerFunctionAtanh(FunctionFactory & factory);\n void registerFunctionPow(FunctionFactory & factory);\n \n \n@@ -36,6 +43,7 @@ void registerFunctionsMath(FunctionFactory & factory)\n     registerFunctionLog(factory);\n     registerFunctionExp2(factory);\n     registerFunctionLog2(factory);\n+    registerFunctionLog1p(factory);\n     registerFunctionExp10(factory);\n     registerFunctionLog10(factory);\n     registerFunctionSqrt(factory);\n@@ -50,8 +58,15 @@ void registerFunctionsMath(FunctionFactory & factory)\n     registerFunctionAsin(factory);\n     registerFunctionAcos(factory);\n     registerFunctionAtan(factory);\n+    registerFunctionAtan2(factory);\n     registerFunctionSigmoid(factory);\n+    registerFunctionHypot(factory);\n+    registerFunctionSinh(factory);\n+    registerFunctionCosh(factory);\n     registerFunctionTanh(factory);\n+    registerFunctionAsinh(factory);\n+    registerFunctionAcosh(factory);\n+    registerFunctionAtanh(factory);\n     registerFunctionPow(factory);\n }\n \ndiff --git a/src/Functions/sinh.cpp b/src/Functions/sinh.cpp\nnew file mode 100644\nindex 000000000000..84fe0e805b7a\n--- /dev/null\n+++ b/src/Functions/sinh.cpp\n@@ -0,0 +1,21 @@\n+#include <Functions/FunctionFactory.h>\n+#include <Functions/FunctionMathUnary.h>\n+\n+namespace DB\n+{\n+namespace\n+{\n+    struct SinhName\n+    {\n+        static constexpr auto name = \"sinh\";\n+    };\n+    using FunctionSinh = FunctionMathUnary<UnaryFunctionVectorized<SinhName, sinh>>;\n+\n+}\n+\n+void registerFunctionSinh(FunctionFactory & factory)\n+{\n+    factory.registerFunction<FunctionSinh>();\n+}\n+\n+}\ndiff --git a/src/Functions/ya.make b/src/Functions/ya.make\nindex 3aea31aa5382..491c46414fa0 100644\n--- a/src/Functions/ya.make\n+++ b/src/Functions/ya.make\n@@ -34,27 +34,92 @@ PEERDIR(\n # \"Arcadia\" build is slightly deficient. It lacks many libraries that we need.\n \n SRCS(\n+    CRC.cpp\n+    FunctionFQDN.cpp\n+    FunctionFactory.cpp\n+    FunctionHelpers.cpp\n+    FunctionJoinGet.cpp\n+    FunctionsAES.cpp\n+    FunctionsCoding.cpp\n+    FunctionsConversion.cpp\n+    FunctionsEmbeddedDictionaries.cpp\n+    FunctionsExternalDictionaries.cpp\n+    FunctionsExternalModels.cpp\n+    FunctionsHashing.cpp\n+    FunctionsJSON.cpp\n+    FunctionsLogical.cpp\n+    FunctionsRandom.cpp\n+    FunctionsRound.cpp\n+    FunctionsStringArray.cpp\n+    FunctionsStringSimilarity.cpp\n+    GatherUtils/concat.cpp\n+    GatherUtils/createArraySink.cpp\n+    GatherUtils/createArraySource.cpp\n+    GatherUtils/createValueSource.cpp\n+    GatherUtils/has_all.cpp\n+    GatherUtils/has_any.cpp\n+    GatherUtils/has_substr.cpp\n+    GatherUtils/push.cpp\n+    GatherUtils/resizeConstantSize.cpp\n+    GatherUtils/resizeDynamicSize.cpp\n+    GatherUtils/sliceDynamicOffsetBounded.cpp\n+    GatherUtils/sliceDynamicOffsetUnbounded.cpp\n+    GatherUtils/sliceFromLeftConstantOffsetBounded.cpp\n+    GatherUtils/sliceFromLeftConstantOffsetUnbounded.cpp\n+    GatherUtils/sliceFromRightConstantOffsetBounded.cpp\n+    GatherUtils/sliceFromRightConstantOffsetUnbounded.cpp\n+    GeoHash.cpp\n+    IFunction.cpp\n+    TargetSpecific.cpp\n+    URL/URLHierarchy.cpp\n+    URL/URLPathHierarchy.cpp\n+    URL/basename.cpp\n+    URL/cutFragment.cpp\n+    URL/cutQueryString.cpp\n+    URL/cutQueryStringAndFragment.cpp\n+    URL/cutToFirstSignificantSubdomain.cpp\n+    URL/cutURLParameter.cpp\n+    URL/cutWWW.cpp\n+    URL/decodeURLComponent.cpp\n+    URL/domain.cpp\n+    URL/domainWithoutWWW.cpp\n+    URL/extractURLParameter.cpp\n+    URL/extractURLParameterNames.cpp\n+    URL/extractURLParameters.cpp\n+    URL/firstSignificantSubdomain.cpp\n+    URL/fragment.cpp\n+    URL/netloc.cpp\n+    URL/path.cpp\n+    URL/pathFull.cpp\n+    URL/port.cpp\n+    URL/protocol.cpp\n+    URL/queryString.cpp\n+    URL/queryStringAndFragment.cpp\n+    URL/registerFunctionsURL.cpp\n+    URL/tldLookup.generated.cpp\n+    URL/topLevelDomain.cpp\n     abs.cpp\n     acos.cpp\n+    acosh.cpp\n     addDays.cpp\n     addHours.cpp\n     addMinutes.cpp\n     addMonths.cpp\n     addQuarters.cpp\n-    addressToLine.cpp\n-    addressToSymbol.cpp\n     addSeconds.cpp\n     addWeeks.cpp\n     addYears.cpp\n+    addressToLine.cpp\n+    addressToSymbol.cpp\n     aes_decrypt_mysql.cpp\n     aes_encrypt_mysql.cpp\n     appendTrailingCharIfAbsent.cpp\n-    array/arrayAll.cpp\n+    array/array.cpp\n     array/arrayAUC.cpp\n+    array/arrayAll.cpp\n     array/arrayCompact.cpp\n     array/arrayConcat.cpp\n     array/arrayCount.cpp\n-    array/array.cpp\n     array/arrayCumSum.cpp\n     array/arrayCumSumNonNegative.cpp\n     array/arrayDifference.cpp\n@@ -93,9 +158,9 @@ SRCS(\n     array/countEqual.cpp\n     array/emptyArray.cpp\n     array/emptyArrayToSingle.cpp\n+    array/has.cpp\n     array/hasAll.cpp\n     array/hasAny.cpp\n-    array/has.cpp\n     array/hasSubstr.cpp\n     array/indexOf.cpp\n     array/length.cpp\n@@ -104,8 +169,11 @@ SRCS(\n     array/range.cpp\n     array/registerFunctionsArray.cpp\n     asin.cpp\n+    asinh.cpp\n     assumeNotNull.cpp\n     atan.cpp\n+    atan2.cpp\n+    atanh.cpp\n     bar.cpp\n     base64Decode.cpp\n     base64Encode.cpp\n@@ -113,7 +181,6 @@ SRCS(\n     bitBoolMaskAnd.cpp\n     bitBoolMaskOr.cpp\n     bitCount.cpp\n-    bitmaskToList.cpp\n     bitNot.cpp\n     bitOr.cpp\n     bitRotateLeft.cpp\n@@ -121,11 +188,12 @@ SRCS(\n     bitShiftLeft.cpp\n     bitShiftRight.cpp\n     bitSwapLastTwo.cpp\n+    bitTest.cpp\n     bitTestAll.cpp\n     bitTestAny.cpp\n-    bitTest.cpp\n     bitWrapperFunc.cpp\n     bitXor.cpp\n+    bitmaskToList.cpp\n     blockNumber.cpp\n     blockSerializedSize.cpp\n     blockSize.cpp\n@@ -136,8 +204,8 @@ SRCS(\n     concat.cpp\n     convertCharset.cpp\n     cos.cpp\n+    cosh.cpp\n     countDigits.cpp\n-    CRC.cpp\n     currentDatabase.cpp\n     currentUser.cpp\n     dateDiff.cpp\n@@ -153,16 +221,16 @@ SRCS(\n     encrypt.cpp\n     endsWith.cpp\n     equals.cpp\n-    erfc.cpp\n     erf.cpp\n+    erfc.cpp\n     errorCodeToName.cpp\n     evalMLMethod.cpp\n+    exp.cpp\n     exp10.cpp\n     exp2.cpp\n-    exp.cpp\n+    extract.cpp\n     extractAllGroupsHorizontal.cpp\n     extractAllGroupsVertical.cpp\n-    extract.cpp\n     extractGroups.cpp\n     extractTimeZoneFromFunctionArguments.cpp\n     filesystem.cpp\n@@ -176,47 +244,13 @@ SRCS(\n     fromUnixTimestamp64Micro.cpp\n     fromUnixTimestamp64Milli.cpp\n     fromUnixTimestamp64Nano.cpp\n-    FunctionFactory.cpp\n-    FunctionFQDN.cpp\n-    FunctionHelpers.cpp\n-    FunctionJoinGet.cpp\n-    FunctionsAES.cpp\n-    FunctionsCoding.cpp\n-    FunctionsConversion.cpp\n-    FunctionsEmbeddedDictionaries.cpp\n-    FunctionsExternalDictionaries.cpp\n-    FunctionsExternalModels.cpp\n-    FunctionsHashing.cpp\n-    FunctionsJSON.cpp\n-    FunctionsLogical.cpp\n-    FunctionsRandom.cpp\n-    FunctionsRound.cpp\n-    FunctionsStringArray.cpp\n-    FunctionsStringSimilarity.cpp\n     fuzzBits.cpp\n-    GatherUtils/concat.cpp\n-    GatherUtils/createArraySink.cpp\n-    GatherUtils/createArraySource.cpp\n-    GatherUtils/createValueSource.cpp\n-    GatherUtils/has_all.cpp\n-    GatherUtils/has_any.cpp\n-    GatherUtils/has_substr.cpp\n-    GatherUtils/push.cpp\n-    GatherUtils/resizeConstantSize.cpp\n-    GatherUtils/resizeDynamicSize.cpp\n-    GatherUtils/sliceDynamicOffsetBounded.cpp\n-    GatherUtils/sliceDynamicOffsetUnbounded.cpp\n-    GatherUtils/sliceFromLeftConstantOffsetBounded.cpp\n-    GatherUtils/sliceFromLeftConstantOffsetUnbounded.cpp\n-    GatherUtils/sliceFromRightConstantOffsetBounded.cpp\n-    GatherUtils/sliceFromRightConstantOffsetUnbounded.cpp\n     gcd.cpp\n     generateUUIDv4.cpp\n-    GeoHash.cpp\n+    geoToH3.cpp\n     geohashDecode.cpp\n     geohashEncode.cpp\n     geohashesInBox.cpp\n-    geoToH3.cpp\n     getMacro.cpp\n     getScalar.cpp\n     getSetting.cpp\n@@ -233,20 +267,20 @@ SRCS(\n     h3HexAreaM2.cpp\n     h3IndexesAreNeighbors.cpp\n     h3IsValid.cpp\n-    h3kRing.cpp\n     h3ToChildren.cpp\n     h3ToParent.cpp\n     h3ToString.cpp\n+    h3kRing.cpp\n     hasColumnInTable.cpp\n     hasThreadFuzzer.cpp\n-    hasTokenCaseInsensitive.cpp\n     hasToken.cpp\n+    hasTokenCaseInsensitive.cpp\n     hostName.cpp\n+    hypot.cpp\n     identity.cpp\n     if.cpp\n     ifNotFinite.cpp\n     ifNull.cpp\n-    IFunction.cpp\n     ignore.cpp\n     ilike.cpp\n     in.cpp\n@@ -272,9 +306,10 @@ SRCS(\n     lessOrEquals.cpp\n     lgamma.cpp\n     like.cpp\n+    log.cpp\n     log10.cpp\n+    log1p.cpp\n     log2.cpp\n-    log.cpp\n     logTrace.cpp\n     lowCardinalityIndices.cpp\n     lowCardinalityKeys.cpp\n@@ -292,56 +327,56 @@ SRCS(\n     multiMatchAllIndices.cpp\n     multiMatchAny.cpp\n     multiMatchAnyIndex.cpp\n-    multiply.cpp\n+    multiSearchAllPositions.cpp\n     multiSearchAllPositionsCaseInsensitive.cpp\n     multiSearchAllPositionsCaseInsensitiveUTF8.cpp\n-    multiSearchAllPositions.cpp\n     multiSearchAllPositionsUTF8.cpp\n+    multiSearchAny.cpp\n     multiSearchAnyCaseInsensitive.cpp\n     multiSearchAnyCaseInsensitiveUTF8.cpp\n-    multiSearchAny.cpp\n     multiSearchAnyUTF8.cpp\n+    multiSearchFirstIndex.cpp\n     multiSearchFirstIndexCaseInsensitive.cpp\n     multiSearchFirstIndexCaseInsensitiveUTF8.cpp\n-    multiSearchFirstIndex.cpp\n     multiSearchFirstIndexUTF8.cpp\n+    multiSearchFirstPosition.cpp\n     multiSearchFirstPositionCaseInsensitive.cpp\n     multiSearchFirstPositionCaseInsensitiveUTF8.cpp\n-    multiSearchFirstPosition.cpp\n     multiSearchFirstPositionUTF8.cpp\n+    multiply.cpp\n     negate.cpp\n     neighbor.cpp\n-    normalizedQueryHash.cpp\n     normalizeQuery.cpp\n+    normalizedQueryHash.cpp\n     notEmpty.cpp\n     notEquals.cpp\n     notILike.cpp\n     notLike.cpp\n-    now64.cpp\n     now.cpp\n+    now64.cpp\n     nullIf.cpp\n     pi.cpp\n     plus.cpp\n     pointInEllipses.cpp\n     pointInPolygon.cpp\n+    position.cpp\n     positionCaseInsensitive.cpp\n     positionCaseInsensitiveUTF8.cpp\n-    position.cpp\n     positionUTF8.cpp\n     pow.cpp\n+    rand.cpp\n     rand64.cpp\n     randConstant.cpp\n-    rand.cpp\n     randomFixedString.cpp\n     randomPrintableASCII.cpp\n     randomString.cpp\n     randomStringUTF8.cpp\n     regexpQuoteMeta.cpp\n+    registerFunctions.cpp\n     registerFunctionsArithmetic.cpp\n     registerFunctionsComparison.cpp\n     registerFunctionsConditional.cpp\n     registerFunctionsConsistentHashing.cpp\n-    registerFunctions.cpp\n     registerFunctionsDateTime.cpp\n     registerFunctionsFormatting.cpp\n     registerFunctionsGeo.cpp\n@@ -379,6 +414,7 @@ SRCS(\n     runningDifferenceStartingWithFirstValue.cpp\n     sigmoid.cpp\n     sin.cpp\n+    sinh.cpp\n     sleep.cpp\n     sleepEachRow.cpp\n     sqrt.cpp\n@@ -395,7 +431,6 @@ SRCS(\n     subtractYears.cpp\n     tan.cpp\n     tanh.cpp\n-    TargetSpecific.cpp\n     tgamma.cpp\n     throwIf.cpp\n     tid.cpp\n@@ -404,7 +439,6 @@ SRCS(\n     timezone.cpp\n     toColumnTypeName.cpp\n     toCustomWeek.cpp\n-    today.cpp\n     toDayOfMonth.cpp\n     toDayOfWeek.cpp\n     toDayOfYear.cpp\n@@ -431,8 +465,8 @@ SRCS(\n     toStartOfFifteenMinutes.cpp\n     toStartOfFiveMinute.cpp\n     toStartOfHour.cpp\n-    toStartOfInterval.cpp\n     toStartOfISOYear.cpp\n+    toStartOfInterval.cpp\n     toStartOfMinute.cpp\n     toStartOfMonth.cpp\n     toStartOfQuarter.cpp\n@@ -446,10 +480,11 @@ SRCS(\n     toUnixTimestamp64Milli.cpp\n     toUnixTimestamp64Nano.cpp\n     toValidUTF8.cpp\n-    toYear.cpp\n     toYYYYMM.cpp\n     toYYYYMMDD.cpp\n     toYYYYMMDDhhmmss.cpp\n+    toYear.cpp\n+    today.cpp\n     transform.cpp\n     trap.cpp\n     trim.cpp\n@@ -459,33 +494,6 @@ SRCS(\n     upper.cpp\n     upperUTF8.cpp\n     uptime.cpp\n-    URL/basename.cpp\n-    URL/cutFragment.cpp\n-    URL/cutQueryStringAndFragment.cpp\n-    URL/cutQueryString.cpp\n-    URL/cutToFirstSignificantSubdomain.cpp\n-    URL/cutURLParameter.cpp\n-    URL/cutWWW.cpp\n-    URL/decodeURLComponent.cpp\n-    URL/domain.cpp\n-    URL/domainWithoutWWW.cpp\n-    URL/extractURLParameter.cpp\n-    URL/extractURLParameterNames.cpp\n-    URL/extractURLParameters.cpp\n-    URL/firstSignificantSubdomain.cpp\n-    URL/fragment.cpp\n-    URL/netloc.cpp\n-    URL/path.cpp\n-    URL/pathFull.cpp\n-    URL/port.cpp\n-    URL/protocol.cpp\n-    URL/queryStringAndFragment.cpp\n-    URL/queryString.cpp\n-    URL/registerFunctionsURL.cpp\n-    URL/tldLookup.generated.cpp\n-    URL/topLevelDomain.cpp\n-    URL/URLHierarchy.cpp\n-    URL/URLPathHierarchy.cpp\n     version.cpp\n     visibleWidth.cpp\n     visitParamExtractBool.cpp\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00087_math_functions.reference b/tests/queries/0_stateless/00087_math_functions.reference\nindex 3e709ddfe522..e02aac11fafc 100644\n--- a/tests/queries/0_stateless/00087_math_functions.reference\n+++ b/tests/queries/0_stateless/00087_math_functions.reference\n@@ -72,3 +72,43 @@\n 1\n 1\n 1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\ndiff --git a/tests/queries/0_stateless/00087_math_functions.sql b/tests/queries/0_stateless/00087_math_functions.sql\nindex 8de8a774ff8f..e40acfb3481d 100644\n--- a/tests/queries/0_stateless/00087_math_functions.sql\n+++ b/tests/queries/0_stateless/00087_math_functions.sql\n@@ -56,6 +56,12 @@ select log2(2) = 1;\n select log2(4) = 2;\n select sum(abs(log2(exp2(x)) - x) < 1.0e-9) / count() from system.one array join range(1000) as x;\n \n+select log1p(-1) = -inf;\n+select log1p(0) = 0;\n+select abs(log1p(exp(2) - 1) - 2) < 1e8;\n+select abs(log1p(exp(3) - 1) - 3) < 1e8;\n+select sum(abs(log1p(exp(x) - 1) - x) < 1e-8) / count() from system.one array join range(100) as x;\n+\n select sin(0) = 0;\n select sin(pi() / 4) = 1 / sqrt(2);\n select sin(pi() / 2) = 1;\n@@ -82,6 +88,48 @@ select acos(-1) = pi();\n select atan(0) = 0;\n select atan(1) = pi() / 4;\n \n+select atan2(0, 1) = 0;\n+select atan2(0, 2) = 0;\n+select atan2(1, 0) = pi() / 2;\n+select atan2(1, 1) = pi() / 4;\n+select atan2(-1, -1) = -3 * pi() / 4;\n+\n+select hypot(0, 1) = 1;\n+select hypot(1, 0) = 1;\n+select hypot(1, 1) = sqrt(2);\n+select hypot(-1, 1) = sqrt(2);\n+select hypot(3, 4) = 5;\n+\n+select sinh(0) = 0;\n+select sinh(1) = -sinh(-1);\n+select abs(sinh(1) - 0.5 * (e() - exp(-1))) < 1e-6;\n+select abs(sinh(2) - 0.5 * (exp(2) - exp(-2))) < 1e-6;\n+select sum(abs(sinh(x) - 0.5 * (exp(x) - exp(-x))) < 1e-6) / count() from system.one array join range(10) as x;\n+\n+select cosh(0) = 1;\n+select cosh(1) = cosh(-1);\n+select abs(cosh(1) - 0.5 * (e() + exp(-1))) < 1e-6;\n+select abs(pow(cosh(1), 2) - pow(sinh(1), 2) - 1) < 1e-6;\n+select sum(abs(cosh(x) * cosh(x) - sinh(x) * sinh(x) - 1) < 1e-6) / count() from system.one array join range(10) as x;\n+\n+select asinh(0) = 0;\n+select asinh(1) = -asinh(-1);\n+select abs(asinh(1) - ln(1 + sqrt(2))) < 1e-9;\n+select abs(asinh(sinh(1)) - 1) < 1e-9;\n+select sum(abs(asinh(sinh(x)) - x) < 1e-9) / count() from system.one array join range(100) as x;\n+\n+select acosh(1) = 0;\n+select abs(acosh(2) - ln(2 + sqrt(3))) < 1e-9;\n+select abs(acosh(cosh(2)) - 2) < 1e-9;\n+select abs(acosh(cosh(3)) - 3) < 1e-9;\n+select sum(abs(acosh(cosh(x)) - x) < 1e-9) / count() from system.one array join range(1, 101) as x;\n+\n+select atanh(0) = 0;\n+select atanh(0.5) = -atanh(-0.5);\n+select abs(atanh(0.9) - 0.5 * ln(19)) < 1e-5;\n+select abs(atanh(tanh(1)) - 1) < 1e-5;\n+select sum(abs(atanh(tanh(x)) - x) < 1e-5) / count() from system.one array join range(10) as x;\n+\n select erf(0) = 0;\n select erf(-10) = -1;\n select erf(10) = 1;\n",
  "problem_statement": "Add atan2 function\n`atan2` is used when `x` and `y` coordinates are given, in this case it has better performance and wider range than `atan`. See [Wikipedia article](https://en.wikipedia.org/wiki/Atan2) for the full description and motivation\n",
  "hints_text": "Can be added very easily, see `src/Functions/pow.cpp`\n`hypot` can also be added just in case.",
  "created_at": "2020-11-03T13:04:02Z",
  "modified_files": [
    "b/src/Functions/acosh.cpp",
    "b/src/Functions/asinh.cpp",
    "b/src/Functions/atan2.cpp",
    "b/src/Functions/atanh.cpp",
    "b/src/Functions/cosh.cpp",
    "b/src/Functions/hypot.cpp",
    "b/src/Functions/log1p.cpp",
    "src/Functions/registerFunctionsMath.cpp",
    "b/src/Functions/sinh.cpp",
    "src/Functions/ya.make"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/00087_math_functions.reference",
    "tests/queries/0_stateless/00087_math_functions.sql"
  ]
}