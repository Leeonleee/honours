diff --git a/programs/server/Server.cpp b/programs/server/Server.cpp
index 11b8c2b25402..17aec8e59a93 100644
--- a/programs/server/Server.cpp
+++ b/programs/server/Server.cpp
@@ -850,7 +850,10 @@ if (ThreadFuzzer::instance().isEffective())
             global_context->setClustersConfig(config);
             global_context->setMacros(std::make_unique<Macros>(*config, "macros", log));
             global_context->setExternalAuthenticatorsConfig(*config);
-            global_context->setExternalModelsConfig(config);
+
+            global_context->loadOrReloadDictionaries(*config);
+            global_context->loadOrReloadModels(*config);
+            global_context->loadOrReloadUserDefinedExecutableFunctions(*config);
 
             /// Setup protection to avoid accidental DROP for big tables (that are greater than 50 GB by default)
             if (config->has("max_table_size_to_drop"))
@@ -1469,22 +1472,44 @@ if (ThreadFuzzer::instance().isEffective())
         /// try to load dictionaries immediately, throw on error and die
         try
         {
-            global_context->loadDictionaries(config());
+            global_context->loadOrReloadDictionaries(config());
+        }
+        catch (...)
+        {
+            tryLogCurrentException(log, "Caught exception while loading dictionaries.");
+            throw;
+        }
+
+        /// try to load embedded dictionaries immediately, throw on error and die
+        try
+        {
+            global_context->tryCreateEmbeddedDictionaries(config());
+        }
+        catch (...)
+        {
+            tryLogCurrentException(log, "Caught exception while loading embedded dictionaries.");
+            throw;
+        }
+
+        /// try to load models immediately, throw on error and die
+        try
+        {
+            global_context->loadOrReloadModels(config());
         }
         catch (...)
         {
-            LOG_ERROR(log, "Caught exception while loading dictionaries.");
+            tryLogCurrentException(log, "Caught exception while loading dictionaries.");
             throw;
         }
 
         /// try to load user defined executable functions, throw on error and die
         try
         {
-            global_context->loadUserDefinedExecutableFunctions(config());
+            global_context->loadOrReloadUserDefinedExecutableFunctions(config());
         }
         catch (...)
         {
-            LOG_ERROR(log, "Caught exception while loading user defined executable functions.");
+            tryLogCurrentException(log, "Caught exception while loading user defined executable functions.");
             throw;
         }
 
diff --git a/src/Interpreters/Context.cpp b/src/Interpreters/Context.cpp
index 7e43343ab34b..15a683c23bbe 100644
--- a/src/Interpreters/Context.cpp
+++ b/src/Interpreters/Context.cpp
@@ -14,6 +14,7 @@
 #include <Common/Throttler.h>
 #include <Common/thread_local_rng.h>
 #include <Common/FieldVisitorToString.h>
+#include <Common/getMultipleKeysFromConfig.h>
 #include <Coordination/KeeperDispatcher.h>
 #include <Compression/ICompressionCodec.h>
 #include <Core/BackgroundSchedulePool.h>
@@ -187,10 +188,14 @@ struct ContextSharedPart
     mutable std::optional<ExternalDictionariesLoader> external_dictionaries_loader;
     mutable std::optional<ExternalUserDefinedExecutableFunctionsLoader> external_user_defined_executable_functions_loader;
     mutable std::optional<ExternalModelsLoader> external_models_loader;
-    ConfigurationPtr external_models_config;
+
+    ExternalLoaderXMLConfigRepository * external_models_config_repository = nullptr;
     scope_guard models_repository_guard;
 
+    ExternalLoaderXMLConfigRepository * external_dictionaries_config_repository = nullptr;
     scope_guard dictionaries_xmls;
+
+    ExternalLoaderXMLConfigRepository * user_defined_executable_functions_config_repository = nullptr;
     scope_guard user_defined_executable_functions_xmls;
 
 #if USE_NLP
@@ -1325,6 +1330,11 @@ const ExternalDictionariesLoader & Context::getExternalDictionariesLoader() cons
 ExternalDictionariesLoader & Context::getExternalDictionariesLoader()
 {
     std::lock_guard lock(shared->external_dictionaries_mutex);
+    return getExternalDictionariesLoaderUnlocked();
+}
+
+ExternalDictionariesLoader & Context::getExternalDictionariesLoaderUnlocked()
+{
     if (!shared->external_dictionaries_loader)
         shared->external_dictionaries_loader.emplace(getGlobalContext());
     return *shared->external_dictionaries_loader;
@@ -1338,6 +1348,11 @@ const ExternalUserDefinedExecutableFunctionsLoader & Context::getExternalUserDef
 ExternalUserDefinedExecutableFunctionsLoader & Context::getExternalUserDefinedExecutableFunctionsLoader()
 {
     std::lock_guard lock(shared->external_user_defined_executable_functions_mutex);
+    return getExternalUserDefinedExecutableFunctionsLoaderUnlocked();
+}
+
+ExternalUserDefinedExecutableFunctionsLoader & Context::getExternalUserDefinedExecutableFunctionsLoaderUnlocked()
+{
     if (!shared->external_user_defined_executable_functions_loader)
         shared->external_user_defined_executable_functions_loader.emplace(getGlobalContext());
     return *shared->external_user_defined_executable_functions_loader;
@@ -1361,20 +1376,29 @@ ExternalModelsLoader & Context::getExternalModelsLoaderUnlocked()
     return *shared->external_models_loader;
 }
 
-void Context::setExternalModelsConfig(const ConfigurationPtr & config, const std::string & config_name)
+void Context::loadOrReloadModels(const Poco::Util::AbstractConfiguration & config)
 {
+    auto patterns_values = getMultipleValuesFromConfig(config, "", "models_config");
+    std::unordered_set<std::string> patterns(patterns_values.begin(), patterns_values.end());
+
     std::lock_guard lock(shared->external_models_mutex);
 
-    if (shared->external_models_config && isSameConfigurationWithMultipleKeys(*config, *shared->external_models_config, "", config_name))
+    auto & external_models_loader = getExternalModelsLoaderUnlocked();
+
+    if (shared->external_models_config_repository)
+    {
+        shared->external_models_config_repository->updatePatterns(patterns);
+        external_models_loader.reloadConfig(shared->external_models_config_repository->getName());
         return;
+    }
 
-    shared->external_models_config = config;
-    shared->models_repository_guard .reset();
-    shared->models_repository_guard = getExternalModelsLoaderUnlocked().addConfigRepository(
-        std::make_unique<ExternalLoaderXMLConfigRepository>(*config, config_name));
+    auto app_path = getPath();
+    auto config_path = getConfigRef().getString("config-file", "config.xml");
+    auto repository = std::make_unique<ExternalLoaderXMLConfigRepository>(app_path, config_path, patterns);
+    shared->external_models_config_repository = repository.get();
+    shared->models_repository_guard = external_models_loader.addConfigRepository(std::move(repository));
 }
 
-
 EmbeddedDictionaries & Context::getEmbeddedDictionariesImpl(const bool throw_on_error) const
 {
     std::lock_guard lock(shared->embedded_dictionaries_mutex);
@@ -1393,27 +1417,58 @@ EmbeddedDictionaries & Context::getEmbeddedDictionariesImpl(const bool throw_on_
 }
 
 
-void Context::tryCreateEmbeddedDictionaries() const
+void Context::tryCreateEmbeddedDictionaries(const Poco::Util::AbstractConfiguration & config) const
 {
-    static_cast<void>(getEmbeddedDictionariesImpl(true));
+    if (!config.getBool("dictionaries_lazy_load", true))
+        static_cast<void>(getEmbeddedDictionariesImpl(true));
 }
 
-void Context::loadDictionaries(const Poco::Util::AbstractConfiguration & config)
+void Context::loadOrReloadDictionaries(const Poco::Util::AbstractConfiguration & config)
 {
-    if (!config.getBool("dictionaries_lazy_load", true))
+    bool dictionaries_lazy_load = config.getBool("dictionaries_lazy_load", true);
+    auto patterns_values = getMultipleValuesFromConfig(config, "", "dictionaries_config");
+    std::unordered_set<std::string> patterns(patterns_values.begin(), patterns_values.end());
+
+    std::lock_guard lock(shared->external_dictionaries_mutex);
+
+    auto & external_dictionaries_loader = getExternalDictionariesLoaderUnlocked();
+    external_dictionaries_loader.enableAlwaysLoadEverything(!dictionaries_lazy_load);
+
+    if (shared->external_dictionaries_config_repository)
     {
-        tryCreateEmbeddedDictionaries();
-        getExternalDictionariesLoader().enableAlwaysLoadEverything(true);
+        shared->external_dictionaries_config_repository->updatePatterns(patterns);
+        external_dictionaries_loader.reloadConfig(shared->external_dictionaries_config_repository->getName());
+        return;
     }
-    shared->dictionaries_xmls = getExternalDictionariesLoader().addConfigRepository(
-        std::make_unique<ExternalLoaderXMLConfigRepository>(config, "dictionaries_config"));
+
+    auto app_path = getPath();
+    auto config_path = getConfigRef().getString("config-file", "config.xml");
+    auto repository = std::make_unique<ExternalLoaderXMLConfigRepository>(app_path, config_path, patterns);
+    shared->external_dictionaries_config_repository = repository.get();
+    shared->dictionaries_xmls = external_dictionaries_loader.addConfigRepository(std::move(repository));
 }
 
-void Context::loadUserDefinedExecutableFunctions(const Poco::Util::AbstractConfiguration & config)
+void Context::loadOrReloadUserDefinedExecutableFunctions(const Poco::Util::AbstractConfiguration & config)
 {
-    getExternalUserDefinedExecutableFunctionsLoader().enableAlwaysLoadEverything(true);
-    shared->user_defined_executable_functions_xmls = getExternalUserDefinedExecutableFunctionsLoader().addConfigRepository(
-        std::make_unique<ExternalLoaderXMLConfigRepository>(config, "user_defined_executable_functions_config"));
+    auto patterns_values = getMultipleValuesFromConfig(config, "", "user_defined_executable_functions_config");
+    std::unordered_set<std::string> patterns(patterns_values.begin(), patterns_values.end());
+
+    std::lock_guard lock(shared->external_user_defined_executable_functions_mutex);
+
+    auto & external_user_defined_executable_functions_loader = getExternalUserDefinedExecutableFunctionsLoaderUnlocked();
+
+    if (shared->user_defined_executable_functions_config_repository)
+    {
+        shared->user_defined_executable_functions_config_repository->updatePatterns(patterns);
+        external_user_defined_executable_functions_loader.reloadConfig(shared->user_defined_executable_functions_config_repository->getName());
+        return;
+    }
+
+    auto app_path = getPath();
+    auto config_path = getConfigRef().getString("config-file", "config.xml");
+    auto repository = std::make_unique<ExternalLoaderXMLConfigRepository>(app_path, config_path, patterns);
+    shared->user_defined_executable_functions_config_repository = repository.get();
+    shared->user_defined_executable_functions_xmls = external_user_defined_executable_functions_loader.addConfigRepository(std::move(repository));
 }
 
 #if USE_NLP
diff --git a/src/Interpreters/Context.h b/src/Interpreters/Context.h
index 118ab32f7724..5b19bc637bcb 100644
--- a/src/Interpreters/Context.h
+++ b/src/Interpreters/Context.h
@@ -549,20 +549,21 @@ class Context: public std::enable_shared_from_this<Context>
     const ExternalUserDefinedExecutableFunctionsLoader & getExternalUserDefinedExecutableFunctionsLoader() const;
     EmbeddedDictionaries & getEmbeddedDictionaries();
     ExternalDictionariesLoader & getExternalDictionariesLoader();
+    ExternalDictionariesLoader & getExternalDictionariesLoaderUnlocked();
     ExternalUserDefinedExecutableFunctionsLoader & getExternalUserDefinedExecutableFunctionsLoader();
+    ExternalUserDefinedExecutableFunctionsLoader & getExternalUserDefinedExecutableFunctionsLoaderUnlocked();
     ExternalModelsLoader & getExternalModelsLoader();
     ExternalModelsLoader & getExternalModelsLoaderUnlocked();
-    void tryCreateEmbeddedDictionaries() const;
-    void loadDictionaries(const Poco::Util::AbstractConfiguration & config);
-    void loadUserDefinedExecutableFunctions(const Poco::Util::AbstractConfiguration & config);
+    void tryCreateEmbeddedDictionaries(const Poco::Util::AbstractConfiguration & config) const;
+    void loadOrReloadDictionaries(const Poco::Util::AbstractConfiguration & config);
+    void loadOrReloadUserDefinedExecutableFunctions(const Poco::Util::AbstractConfiguration & config);
+    void loadOrReloadModels(const Poco::Util::AbstractConfiguration & config);
 
 #if USE_NLP
     SynonymsExtensions & getSynonymsExtensions() const;
     Lemmatizers & getLemmatizers() const;
 #endif
 
-    void setExternalModelsConfig(const ConfigurationPtr & config, const std::string & config_name = "models_config");
-
     /// I/O formats.
     BlockInputStreamPtr getInputFormat(const String & name, ReadBuffer & buf, const Block & sample, UInt64 max_block_size) const;
 
diff --git a/src/Interpreters/ExternalLoaderXMLConfigRepository.cpp b/src/Interpreters/ExternalLoaderXMLConfigRepository.cpp
index 00c31110ea49..ba4d9beffe3f 100644
--- a/src/Interpreters/ExternalLoaderXMLConfigRepository.cpp
+++ b/src/Interpreters/ExternalLoaderXMLConfigRepository.cpp
@@ -1,20 +1,26 @@
 #include <Interpreters/ExternalLoaderXMLConfigRepository.h>
 
+#include <filesystem>
+
 #include <Common/StringUtils/StringUtils.h>
 #include <Common/Config/ConfigProcessor.h>
 #include <Common/getMultipleKeysFromConfig.h>
 #include <Poco/Glob.h>
 #include <Common/filesystemHelpers.h>
-#include <filesystem>
 
 
 namespace fs = std::filesystem;
 
 namespace DB
 {
+
 ExternalLoaderXMLConfigRepository::ExternalLoaderXMLConfigRepository(
-    const Poco::Util::AbstractConfiguration & main_config_, const std::string & config_key_)
-    : main_config(main_config_), config_key(config_key_)
+    const std::string & app_path_,
+    const std::string & main_config_path_,
+    const std::unordered_set<std::string> & patterns_)
+    : app_path(app_path_)
+    , main_config_path(main_config_path_)
+    , patterns(patterns_)
 {
 }
 
@@ -25,20 +31,25 @@ Poco::Timestamp ExternalLoaderXMLConfigRepository::getUpdateTime(const std::stri
 
 std::set<std::string> ExternalLoaderXMLConfigRepository::getAllLoadablesDefinitionNames()
 {
-    std::set<std::string> files;
+    std::unordered_set<std::string> patterns_copy;
 
-    auto patterns = getMultipleValuesFromConfig(main_config, "", config_key);
+    {
+        std::lock_guard<std::mutex> lock(patterns_mutex);
+        patterns_copy = patterns;
+    }
 
-    for (auto & pattern : patterns)
+    const String config_dir = fs::path(main_config_path).parent_path();
+    std::set<std::string> files;
+
+    for (const auto & pattern : patterns_copy)
     {
         if (pattern.empty())
             continue;
 
         if (pattern[0] != '/')
         {
-            const auto app_config_path = main_config.getString("config-file", "config.xml");
-            const String config_dir = fs::path(app_config_path).parent_path();
             const String absolute_path = fs::path(config_dir) / pattern;
+
             Poco::Glob::glob(absolute_path, files, 0);
             if (!files.empty())
                 continue;
@@ -47,10 +58,10 @@ std::set<std::string> ExternalLoaderXMLConfigRepository::getAllLoadablesDefiniti
         Poco::Glob::glob(pattern, files, 0);
     }
 
-    for (std::set<std::string>::iterator it = files.begin(); it != files.end();)
+    for (auto it = files.begin(); it != files.end();)
     {
         if (ConfigProcessor::isPreprocessedFile(*it))
-            files.erase(it++);
+            it = files.erase(it);
         else
             ++it;
     }
@@ -58,6 +69,16 @@ std::set<std::string> ExternalLoaderXMLConfigRepository::getAllLoadablesDefiniti
     return files;
 }
 
+void ExternalLoaderXMLConfigRepository::updatePatterns(const std::unordered_set<std::string> & patterns_)
+{
+    std::lock_guard<std::mutex> lock(patterns_mutex);
+
+    if (patterns == patterns_)
+        return;
+
+    patterns = patterns_;
+}
+
 bool ExternalLoaderXMLConfigRepository::exists(const std::string & definition_entity_name)
 {
     return fs::exists(fs::path(definition_entity_name));
@@ -68,7 +89,7 @@ Poco::AutoPtr<Poco::Util::AbstractConfiguration> ExternalLoaderXMLConfigReposito
 {
     ConfigProcessor config_processor{config_file};
     ConfigProcessor::LoadedConfig preprocessed = config_processor.loadConfig();
-    config_processor.savePreprocessedConfig(preprocessed, main_config.getString("path", DBMS_DEFAULT_PATH));
+    config_processor.savePreprocessedConfig(preprocessed, app_path);
     return preprocessed.configuration;
 }
 
diff --git a/src/Interpreters/ExternalLoaderXMLConfigRepository.h b/src/Interpreters/ExternalLoaderXMLConfigRepository.h
index 76f51f04397d..99fe1aea1c4f 100644
--- a/src/Interpreters/ExternalLoaderXMLConfigRepository.h
+++ b/src/Interpreters/ExternalLoaderXMLConfigRepository.h
@@ -1,10 +1,13 @@
 #pragma once
 
+#include <unordered_set>
+#include <mutex>
+
 #include <common/types.h>
-#include <unordered_map>
 #include <Interpreters/IExternalLoaderConfigRepository.h>
 #include <Poco/Timestamp.h>
 
+
 namespace DB
 {
 
@@ -13,7 +16,7 @@ namespace DB
 class ExternalLoaderXMLConfigRepository : public IExternalLoaderConfigRepository
 {
 public:
-    ExternalLoaderXMLConfigRepository(const Poco::Util::AbstractConfiguration & main_config_, const std::string & config_key_);
+    ExternalLoaderXMLConfigRepository(const std::string & app_path_, const std::string & main_config_path_, const std::unordered_set<std::string> & patterns_);
 
     std::string getName() const override { return name; }
 
@@ -29,14 +32,20 @@ class ExternalLoaderXMLConfigRepository : public IExternalLoaderConfigRepository
     /// May contain definition about several entities (several dictionaries in one .xml file)
     LoadablesConfigurationPtr load(const std::string & config_file) override;
 
+    void updatePatterns(const std::unordered_set<std::string> & patterns_);
+
 private:
+
     const String name;
 
-    /// Main server config (config.xml).
-    const Poco::Util::AbstractConfiguration & main_config;
+    const std::string app_path;
+
+    const std::string main_config_path;
+
+    std::unordered_set<std::string> patterns;
+
+    mutable std::mutex patterns_mutex;
 
-    /// Key which contains path to directory with .xml configs for entries
-    std::string config_key;
 };
 
 }
diff --git a/src/Interpreters/ExternalUserDefinedExecutableFunctionsLoader.cpp b/src/Interpreters/ExternalUserDefinedExecutableFunctionsLoader.cpp
index 0b1c30f2b142..f8d2c0a86ef0 100644
--- a/src/Interpreters/ExternalUserDefinedExecutableFunctionsLoader.cpp
+++ b/src/Interpreters/ExternalUserDefinedExecutableFunctionsLoader.cpp
@@ -24,6 +24,7 @@ ExternalUserDefinedExecutableFunctionsLoader::ExternalUserDefinedExecutableFunct
     setConfigSettings({"function", "name", "database", "uuid"});
     enableAsyncLoading(false);
     enablePeriodicUpdates(true);
+    enableAlwaysLoadEverything(true);
 }
 
 ExternalUserDefinedExecutableFunctionsLoader::UserDefinedExecutableFunctionPtr ExternalUserDefinedExecutableFunctionsLoader::getUserDefinedFunction(const std::string & user_defined_function_name) const
