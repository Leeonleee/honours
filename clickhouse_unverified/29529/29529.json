{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 29529,
  "instance_id": "ClickHouse__ClickHouse-29529",
  "issue_numbers": [
    "28142"
  ],
  "base_commit": "0c33f1121bd00e718d63764418a8a8a9059252b9",
  "patch": "diff --git a/programs/server/Server.cpp b/programs/server/Server.cpp\nindex 11b8c2b25402..17aec8e59a93 100644\n--- a/programs/server/Server.cpp\n+++ b/programs/server/Server.cpp\n@@ -850,7 +850,10 @@ if (ThreadFuzzer::instance().isEffective())\n             global_context->setClustersConfig(config);\n             global_context->setMacros(std::make_unique<Macros>(*config, \"macros\", log));\n             global_context->setExternalAuthenticatorsConfig(*config);\n-            global_context->setExternalModelsConfig(config);\n+\n+            global_context->loadOrReloadDictionaries(*config);\n+            global_context->loadOrReloadModels(*config);\n+            global_context->loadOrReloadUserDefinedExecutableFunctions(*config);\n \n             /// Setup protection to avoid accidental DROP for big tables (that are greater than 50 GB by default)\n             if (config->has(\"max_table_size_to_drop\"))\n@@ -1469,22 +1472,44 @@ if (ThreadFuzzer::instance().isEffective())\n         /// try to load dictionaries immediately, throw on error and die\n         try\n         {\n-            global_context->loadDictionaries(config());\n+            global_context->loadOrReloadDictionaries(config());\n+        }\n+        catch (...)\n+        {\n+            tryLogCurrentException(log, \"Caught exception while loading dictionaries.\");\n+            throw;\n+        }\n+\n+        /// try to load embedded dictionaries immediately, throw on error and die\n+        try\n+        {\n+            global_context->tryCreateEmbeddedDictionaries(config());\n+        }\n+        catch (...)\n+        {\n+            tryLogCurrentException(log, \"Caught exception while loading embedded dictionaries.\");\n+            throw;\n+        }\n+\n+        /// try to load models immediately, throw on error and die\n+        try\n+        {\n+            global_context->loadOrReloadModels(config());\n         }\n         catch (...)\n         {\n-            LOG_ERROR(log, \"Caught exception while loading dictionaries.\");\n+            tryLogCurrentException(log, \"Caught exception while loading dictionaries.\");\n             throw;\n         }\n \n         /// try to load user defined executable functions, throw on error and die\n         try\n         {\n-            global_context->loadUserDefinedExecutableFunctions(config());\n+            global_context->loadOrReloadUserDefinedExecutableFunctions(config());\n         }\n         catch (...)\n         {\n-            LOG_ERROR(log, \"Caught exception while loading user defined executable functions.\");\n+            tryLogCurrentException(log, \"Caught exception while loading user defined executable functions.\");\n             throw;\n         }\n \ndiff --git a/src/Interpreters/Context.cpp b/src/Interpreters/Context.cpp\nindex 7e43343ab34b..15a683c23bbe 100644\n--- a/src/Interpreters/Context.cpp\n+++ b/src/Interpreters/Context.cpp\n@@ -14,6 +14,7 @@\n #include <Common/Throttler.h>\n #include <Common/thread_local_rng.h>\n #include <Common/FieldVisitorToString.h>\n+#include <Common/getMultipleKeysFromConfig.h>\n #include <Coordination/KeeperDispatcher.h>\n #include <Compression/ICompressionCodec.h>\n #include <Core/BackgroundSchedulePool.h>\n@@ -187,10 +188,14 @@ struct ContextSharedPart\n     mutable std::optional<ExternalDictionariesLoader> external_dictionaries_loader;\n     mutable std::optional<ExternalUserDefinedExecutableFunctionsLoader> external_user_defined_executable_functions_loader;\n     mutable std::optional<ExternalModelsLoader> external_models_loader;\n-    ConfigurationPtr external_models_config;\n+\n+    ExternalLoaderXMLConfigRepository * external_models_config_repository = nullptr;\n     scope_guard models_repository_guard;\n \n+    ExternalLoaderXMLConfigRepository * external_dictionaries_config_repository = nullptr;\n     scope_guard dictionaries_xmls;\n+\n+    ExternalLoaderXMLConfigRepository * user_defined_executable_functions_config_repository = nullptr;\n     scope_guard user_defined_executable_functions_xmls;\n \n #if USE_NLP\n@@ -1325,6 +1330,11 @@ const ExternalDictionariesLoader & Context::getExternalDictionariesLoader() cons\n ExternalDictionariesLoader & Context::getExternalDictionariesLoader()\n {\n     std::lock_guard lock(shared->external_dictionaries_mutex);\n+    return getExternalDictionariesLoaderUnlocked();\n+}\n+\n+ExternalDictionariesLoader & Context::getExternalDictionariesLoaderUnlocked()\n+{\n     if (!shared->external_dictionaries_loader)\n         shared->external_dictionaries_loader.emplace(getGlobalContext());\n     return *shared->external_dictionaries_loader;\n@@ -1338,6 +1348,11 @@ const ExternalUserDefinedExecutableFunctionsLoader & Context::getExternalUserDef\n ExternalUserDefinedExecutableFunctionsLoader & Context::getExternalUserDefinedExecutableFunctionsLoader()\n {\n     std::lock_guard lock(shared->external_user_defined_executable_functions_mutex);\n+    return getExternalUserDefinedExecutableFunctionsLoaderUnlocked();\n+}\n+\n+ExternalUserDefinedExecutableFunctionsLoader & Context::getExternalUserDefinedExecutableFunctionsLoaderUnlocked()\n+{\n     if (!shared->external_user_defined_executable_functions_loader)\n         shared->external_user_defined_executable_functions_loader.emplace(getGlobalContext());\n     return *shared->external_user_defined_executable_functions_loader;\n@@ -1361,20 +1376,29 @@ ExternalModelsLoader & Context::getExternalModelsLoaderUnlocked()\n     return *shared->external_models_loader;\n }\n \n-void Context::setExternalModelsConfig(const ConfigurationPtr & config, const std::string & config_name)\n+void Context::loadOrReloadModels(const Poco::Util::AbstractConfiguration & config)\n {\n+    auto patterns_values = getMultipleValuesFromConfig(config, \"\", \"models_config\");\n+    std::unordered_set<std::string> patterns(patterns_values.begin(), patterns_values.end());\n+\n     std::lock_guard lock(shared->external_models_mutex);\n \n-    if (shared->external_models_config && isSameConfigurationWithMultipleKeys(*config, *shared->external_models_config, \"\", config_name))\n+    auto & external_models_loader = getExternalModelsLoaderUnlocked();\n+\n+    if (shared->external_models_config_repository)\n+    {\n+        shared->external_models_config_repository->updatePatterns(patterns);\n+        external_models_loader.reloadConfig(shared->external_models_config_repository->getName());\n         return;\n+    }\n \n-    shared->external_models_config = config;\n-    shared->models_repository_guard .reset();\n-    shared->models_repository_guard = getExternalModelsLoaderUnlocked().addConfigRepository(\n-        std::make_unique<ExternalLoaderXMLConfigRepository>(*config, config_name));\n+    auto app_path = getPath();\n+    auto config_path = getConfigRef().getString(\"config-file\", \"config.xml\");\n+    auto repository = std::make_unique<ExternalLoaderXMLConfigRepository>(app_path, config_path, patterns);\n+    shared->external_models_config_repository = repository.get();\n+    shared->models_repository_guard = external_models_loader.addConfigRepository(std::move(repository));\n }\n \n-\n EmbeddedDictionaries & Context::getEmbeddedDictionariesImpl(const bool throw_on_error) const\n {\n     std::lock_guard lock(shared->embedded_dictionaries_mutex);\n@@ -1393,27 +1417,58 @@ EmbeddedDictionaries & Context::getEmbeddedDictionariesImpl(const bool throw_on_\n }\n \n \n-void Context::tryCreateEmbeddedDictionaries() const\n+void Context::tryCreateEmbeddedDictionaries(const Poco::Util::AbstractConfiguration & config) const\n {\n-    static_cast<void>(getEmbeddedDictionariesImpl(true));\n+    if (!config.getBool(\"dictionaries_lazy_load\", true))\n+        static_cast<void>(getEmbeddedDictionariesImpl(true));\n }\n \n-void Context::loadDictionaries(const Poco::Util::AbstractConfiguration & config)\n+void Context::loadOrReloadDictionaries(const Poco::Util::AbstractConfiguration & config)\n {\n-    if (!config.getBool(\"dictionaries_lazy_load\", true))\n+    bool dictionaries_lazy_load = config.getBool(\"dictionaries_lazy_load\", true);\n+    auto patterns_values = getMultipleValuesFromConfig(config, \"\", \"dictionaries_config\");\n+    std::unordered_set<std::string> patterns(patterns_values.begin(), patterns_values.end());\n+\n+    std::lock_guard lock(shared->external_dictionaries_mutex);\n+\n+    auto & external_dictionaries_loader = getExternalDictionariesLoaderUnlocked();\n+    external_dictionaries_loader.enableAlwaysLoadEverything(!dictionaries_lazy_load);\n+\n+    if (shared->external_dictionaries_config_repository)\n     {\n-        tryCreateEmbeddedDictionaries();\n-        getExternalDictionariesLoader().enableAlwaysLoadEverything(true);\n+        shared->external_dictionaries_config_repository->updatePatterns(patterns);\n+        external_dictionaries_loader.reloadConfig(shared->external_dictionaries_config_repository->getName());\n+        return;\n     }\n-    shared->dictionaries_xmls = getExternalDictionariesLoader().addConfigRepository(\n-        std::make_unique<ExternalLoaderXMLConfigRepository>(config, \"dictionaries_config\"));\n+\n+    auto app_path = getPath();\n+    auto config_path = getConfigRef().getString(\"config-file\", \"config.xml\");\n+    auto repository = std::make_unique<ExternalLoaderXMLConfigRepository>(app_path, config_path, patterns);\n+    shared->external_dictionaries_config_repository = repository.get();\n+    shared->dictionaries_xmls = external_dictionaries_loader.addConfigRepository(std::move(repository));\n }\n \n-void Context::loadUserDefinedExecutableFunctions(const Poco::Util::AbstractConfiguration & config)\n+void Context::loadOrReloadUserDefinedExecutableFunctions(const Poco::Util::AbstractConfiguration & config)\n {\n-    getExternalUserDefinedExecutableFunctionsLoader().enableAlwaysLoadEverything(true);\n-    shared->user_defined_executable_functions_xmls = getExternalUserDefinedExecutableFunctionsLoader().addConfigRepository(\n-        std::make_unique<ExternalLoaderXMLConfigRepository>(config, \"user_defined_executable_functions_config\"));\n+    auto patterns_values = getMultipleValuesFromConfig(config, \"\", \"user_defined_executable_functions_config\");\n+    std::unordered_set<std::string> patterns(patterns_values.begin(), patterns_values.end());\n+\n+    std::lock_guard lock(shared->external_user_defined_executable_functions_mutex);\n+\n+    auto & external_user_defined_executable_functions_loader = getExternalUserDefinedExecutableFunctionsLoaderUnlocked();\n+\n+    if (shared->user_defined_executable_functions_config_repository)\n+    {\n+        shared->user_defined_executable_functions_config_repository->updatePatterns(patterns);\n+        external_user_defined_executable_functions_loader.reloadConfig(shared->user_defined_executable_functions_config_repository->getName());\n+        return;\n+    }\n+\n+    auto app_path = getPath();\n+    auto config_path = getConfigRef().getString(\"config-file\", \"config.xml\");\n+    auto repository = std::make_unique<ExternalLoaderXMLConfigRepository>(app_path, config_path, patterns);\n+    shared->user_defined_executable_functions_config_repository = repository.get();\n+    shared->user_defined_executable_functions_xmls = external_user_defined_executable_functions_loader.addConfigRepository(std::move(repository));\n }\n \n #if USE_NLP\ndiff --git a/src/Interpreters/Context.h b/src/Interpreters/Context.h\nindex 118ab32f7724..5b19bc637bcb 100644\n--- a/src/Interpreters/Context.h\n+++ b/src/Interpreters/Context.h\n@@ -549,20 +549,21 @@ class Context: public std::enable_shared_from_this<Context>\n     const ExternalUserDefinedExecutableFunctionsLoader & getExternalUserDefinedExecutableFunctionsLoader() const;\n     EmbeddedDictionaries & getEmbeddedDictionaries();\n     ExternalDictionariesLoader & getExternalDictionariesLoader();\n+    ExternalDictionariesLoader & getExternalDictionariesLoaderUnlocked();\n     ExternalUserDefinedExecutableFunctionsLoader & getExternalUserDefinedExecutableFunctionsLoader();\n+    ExternalUserDefinedExecutableFunctionsLoader & getExternalUserDefinedExecutableFunctionsLoaderUnlocked();\n     ExternalModelsLoader & getExternalModelsLoader();\n     ExternalModelsLoader & getExternalModelsLoaderUnlocked();\n-    void tryCreateEmbeddedDictionaries() const;\n-    void loadDictionaries(const Poco::Util::AbstractConfiguration & config);\n-    void loadUserDefinedExecutableFunctions(const Poco::Util::AbstractConfiguration & config);\n+    void tryCreateEmbeddedDictionaries(const Poco::Util::AbstractConfiguration & config) const;\n+    void loadOrReloadDictionaries(const Poco::Util::AbstractConfiguration & config);\n+    void loadOrReloadUserDefinedExecutableFunctions(const Poco::Util::AbstractConfiguration & config);\n+    void loadOrReloadModels(const Poco::Util::AbstractConfiguration & config);\n \n #if USE_NLP\n     SynonymsExtensions & getSynonymsExtensions() const;\n     Lemmatizers & getLemmatizers() const;\n #endif\n \n-    void setExternalModelsConfig(const ConfigurationPtr & config, const std::string & config_name = \"models_config\");\n-\n     /// I/O formats.\n     BlockInputStreamPtr getInputFormat(const String & name, ReadBuffer & buf, const Block & sample, UInt64 max_block_size) const;\n \ndiff --git a/src/Interpreters/ExternalLoaderXMLConfigRepository.cpp b/src/Interpreters/ExternalLoaderXMLConfigRepository.cpp\nindex 00c31110ea49..ba4d9beffe3f 100644\n--- a/src/Interpreters/ExternalLoaderXMLConfigRepository.cpp\n+++ b/src/Interpreters/ExternalLoaderXMLConfigRepository.cpp\n@@ -1,20 +1,26 @@\n #include <Interpreters/ExternalLoaderXMLConfigRepository.h>\n \n+#include <filesystem>\n+\n #include <Common/StringUtils/StringUtils.h>\n #include <Common/Config/ConfigProcessor.h>\n #include <Common/getMultipleKeysFromConfig.h>\n #include <Poco/Glob.h>\n #include <Common/filesystemHelpers.h>\n-#include <filesystem>\n \n \n namespace fs = std::filesystem;\n \n namespace DB\n {\n+\n ExternalLoaderXMLConfigRepository::ExternalLoaderXMLConfigRepository(\n-    const Poco::Util::AbstractConfiguration & main_config_, const std::string & config_key_)\n-    : main_config(main_config_), config_key(config_key_)\n+    const std::string & app_path_,\n+    const std::string & main_config_path_,\n+    const std::unordered_set<std::string> & patterns_)\n+    : app_path(app_path_)\n+    , main_config_path(main_config_path_)\n+    , patterns(patterns_)\n {\n }\n \n@@ -25,20 +31,25 @@ Poco::Timestamp ExternalLoaderXMLConfigRepository::getUpdateTime(const std::stri\n \n std::set<std::string> ExternalLoaderXMLConfigRepository::getAllLoadablesDefinitionNames()\n {\n-    std::set<std::string> files;\n+    std::unordered_set<std::string> patterns_copy;\n \n-    auto patterns = getMultipleValuesFromConfig(main_config, \"\", config_key);\n+    {\n+        std::lock_guard<std::mutex> lock(patterns_mutex);\n+        patterns_copy = patterns;\n+    }\n \n-    for (auto & pattern : patterns)\n+    const String config_dir = fs::path(main_config_path).parent_path();\n+    std::set<std::string> files;\n+\n+    for (const auto & pattern : patterns_copy)\n     {\n         if (pattern.empty())\n             continue;\n \n         if (pattern[0] != '/')\n         {\n-            const auto app_config_path = main_config.getString(\"config-file\", \"config.xml\");\n-            const String config_dir = fs::path(app_config_path).parent_path();\n             const String absolute_path = fs::path(config_dir) / pattern;\n+\n             Poco::Glob::glob(absolute_path, files, 0);\n             if (!files.empty())\n                 continue;\n@@ -47,10 +58,10 @@ std::set<std::string> ExternalLoaderXMLConfigRepository::getAllLoadablesDefiniti\n         Poco::Glob::glob(pattern, files, 0);\n     }\n \n-    for (std::set<std::string>::iterator it = files.begin(); it != files.end();)\n+    for (auto it = files.begin(); it != files.end();)\n     {\n         if (ConfigProcessor::isPreprocessedFile(*it))\n-            files.erase(it++);\n+            it = files.erase(it);\n         else\n             ++it;\n     }\n@@ -58,6 +69,16 @@ std::set<std::string> ExternalLoaderXMLConfigRepository::getAllLoadablesDefiniti\n     return files;\n }\n \n+void ExternalLoaderXMLConfigRepository::updatePatterns(const std::unordered_set<std::string> & patterns_)\n+{\n+    std::lock_guard<std::mutex> lock(patterns_mutex);\n+\n+    if (patterns == patterns_)\n+        return;\n+\n+    patterns = patterns_;\n+}\n+\n bool ExternalLoaderXMLConfigRepository::exists(const std::string & definition_entity_name)\n {\n     return fs::exists(fs::path(definition_entity_name));\n@@ -68,7 +89,7 @@ Poco::AutoPtr<Poco::Util::AbstractConfiguration> ExternalLoaderXMLConfigReposito\n {\n     ConfigProcessor config_processor{config_file};\n     ConfigProcessor::LoadedConfig preprocessed = config_processor.loadConfig();\n-    config_processor.savePreprocessedConfig(preprocessed, main_config.getString(\"path\", DBMS_DEFAULT_PATH));\n+    config_processor.savePreprocessedConfig(preprocessed, app_path);\n     return preprocessed.configuration;\n }\n \ndiff --git a/src/Interpreters/ExternalLoaderXMLConfigRepository.h b/src/Interpreters/ExternalLoaderXMLConfigRepository.h\nindex 76f51f04397d..99fe1aea1c4f 100644\n--- a/src/Interpreters/ExternalLoaderXMLConfigRepository.h\n+++ b/src/Interpreters/ExternalLoaderXMLConfigRepository.h\n@@ -1,10 +1,13 @@\n #pragma once\n \n+#include <unordered_set>\n+#include <mutex>\n+\n #include <common/types.h>\n-#include <unordered_map>\n #include <Interpreters/IExternalLoaderConfigRepository.h>\n #include <Poco/Timestamp.h>\n \n+\n namespace DB\n {\n \n@@ -13,7 +16,7 @@ namespace DB\n class ExternalLoaderXMLConfigRepository : public IExternalLoaderConfigRepository\n {\n public:\n-    ExternalLoaderXMLConfigRepository(const Poco::Util::AbstractConfiguration & main_config_, const std::string & config_key_);\n+    ExternalLoaderXMLConfigRepository(const std::string & app_path_, const std::string & main_config_path_, const std::unordered_set<std::string> & patterns_);\n \n     std::string getName() const override { return name; }\n \n@@ -29,14 +32,20 @@ class ExternalLoaderXMLConfigRepository : public IExternalLoaderConfigRepository\n     /// May contain definition about several entities (several dictionaries in one .xml file)\n     LoadablesConfigurationPtr load(const std::string & config_file) override;\n \n+    void updatePatterns(const std::unordered_set<std::string> & patterns_);\n+\n private:\n+\n     const String name;\n \n-    /// Main server config (config.xml).\n-    const Poco::Util::AbstractConfiguration & main_config;\n+    const std::string app_path;\n+\n+    const std::string main_config_path;\n+\n+    std::unordered_set<std::string> patterns;\n+\n+    mutable std::mutex patterns_mutex;\n \n-    /// Key which contains path to directory with .xml configs for entries\n-    std::string config_key;\n };\n \n }\ndiff --git a/src/Interpreters/ExternalUserDefinedExecutableFunctionsLoader.cpp b/src/Interpreters/ExternalUserDefinedExecutableFunctionsLoader.cpp\nindex 0b1c30f2b142..f8d2c0a86ef0 100644\n--- a/src/Interpreters/ExternalUserDefinedExecutableFunctionsLoader.cpp\n+++ b/src/Interpreters/ExternalUserDefinedExecutableFunctionsLoader.cpp\n@@ -24,6 +24,7 @@ ExternalUserDefinedExecutableFunctionsLoader::ExternalUserDefinedExecutableFunct\n     setConfigSettings({\"function\", \"name\", \"database\", \"uuid\"});\n     enableAsyncLoading(false);\n     enablePeriodicUpdates(true);\n+    enableAlwaysLoadEverything(true);\n }\n \n ExternalUserDefinedExecutableFunctionsLoader::UserDefinedExecutableFunctionPtr ExternalUserDefinedExecutableFunctionsLoader::getUserDefinedFunction(const std::string & user_defined_function_name) const\n",
  "test_patch": "diff --git a/tests/integration/test_dictionaries_config_reload/__init__.py b/tests/integration/test_dictionaries_config_reload/__init__.py\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/integration/test_dictionaries_config_reload/config/dictionaries_config.xml b/tests/integration/test_dictionaries_config_reload/config/dictionaries_config.xml\nnew file mode 100644\nindex 000000000000..7e62283a83c2\n--- /dev/null\n+++ b/tests/integration/test_dictionaries_config_reload/config/dictionaries_config.xml\n@@ -0,0 +1,2 @@\n+<yandex>\n+</yandex>\ndiff --git a/tests/integration/test_dictionaries_config_reload/dictionaries/dictionary_config.xml b/tests/integration/test_dictionaries_config_reload/dictionaries/dictionary_config.xml\nnew file mode 100644\nindex 000000000000..5d6064c30ebb\n--- /dev/null\n+++ b/tests/integration/test_dictionaries_config_reload/dictionaries/dictionary_config.xml\n@@ -0,0 +1,28 @@\n+<dictionaries>\n+    <dictionary>\n+        <name>test_dictionary_1</name>\n+\n+        <structure>\n+            <id>\n+                <name>id</name>\n+                <type>UInt64</type>\n+            </id>\n+            <attribute>\n+                <name>value_1</name>\n+                <type>String</type>\n+                <null_value></null_value>\n+            </attribute>\n+        </structure>\n+\n+        <source>\n+            <clickhouse>\n+                <table>dictionary_values</table>\n+            </clickhouse>\n+        </source>\n+\n+        <layout>\n+            <direct/>\n+        </layout>\n+\n+    </dictionary>\n+</dictionaries>\ndiff --git a/tests/integration/test_dictionaries_config_reload/dictionaries/dictionary_config2.xml b/tests/integration/test_dictionaries_config_reload/dictionaries/dictionary_config2.xml\nnew file mode 100644\nindex 000000000000..2f400cba0f72\n--- /dev/null\n+++ b/tests/integration/test_dictionaries_config_reload/dictionaries/dictionary_config2.xml\n@@ -0,0 +1,28 @@\n+<dictionaries>\n+    <dictionary>\n+        <name>test_dictionary_2</name>\n+\n+        <structure>\n+            <id>\n+                <name>id</name>\n+                <type>UInt64</type>\n+            </id>\n+            <attribute>\n+                <name>value_2</name>\n+                <type>String</type>\n+                <null_value></null_value>\n+            </attribute>\n+        </structure>\n+\n+        <source>\n+            <clickhouse>\n+                <table>dictionary_values</table>\n+            </clickhouse>\n+        </source>\n+\n+        <layout>\n+            <direct/>\n+        </layout>\n+\n+    </dictionary>\n+</dictionaries>\ndiff --git a/tests/integration/test_dictionaries_config_reload/test.py b/tests/integration/test_dictionaries_config_reload/test.py\nnew file mode 100644\nindex 000000000000..6f6e2488abce\n--- /dev/null\n+++ b/tests/integration/test_dictionaries_config_reload/test.py\n@@ -0,0 +1,65 @@\n+import os\n+import sys\n+import time\n+import logging\n+import pytest\n+\n+sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n+SCRIPT_DIR = os.path.dirname(os.path.realpath(__file__))\n+\n+from helpers.cluster import ClickHouseCluster\n+\n+cluster = ClickHouseCluster(__file__)\n+node = cluster.add_instance('node', stay_alive=True, main_configs=['config/dictionaries_config.xml'])\n+\n+\n+def copy_file_to_container(local_path, dist_path, container_id):\n+    os.system(\"docker cp {local} {cont_id}:{dist}\".format(local=local_path, cont_id=container_id, dist=dist_path))\n+\n+\n+config = '''<yandex>\n+    <dictionaries_config>/etc/clickhouse-server/dictionaries/{dictionaries_config}</dictionaries_config>\n+</yandex>'''\n+\n+\n+@pytest.fixture(scope=\"module\")\n+def started_cluster():\n+    try:\n+        cluster.start()\n+\n+        copy_file_to_container(os.path.join(SCRIPT_DIR, 'dictionaries/.'), '/etc/clickhouse-server/dictionaries', node.docker_id)\n+\n+        node.query(\"CREATE TABLE dictionary_values (id UInt64, value_1 String, value_2 String) ENGINE=TinyLog;\")\n+        node.query(\"INSERT INTO dictionary_values VALUES (0, 'Value_1', 'Value_2')\")\n+\n+        node.restart_clickhouse()\n+\n+        yield cluster\n+\n+    finally:\n+        cluster.shutdown()\n+\n+\n+def change_config(dictionaries_config):\n+    node.replace_config(\"/etc/clickhouse-server/config.d/dictionaries_config.xml\", config.format(dictionaries_config=dictionaries_config))\n+    node.query(\"SYSTEM RELOAD CONFIG;\")\n+\n+\n+def test(started_cluster):\n+    # Set config with the path to the first dictionary.\n+    change_config(\"dictionary_config.xml\")\n+\n+    time.sleep(10)\n+\n+    assert node.query(\"SELECT dictGet('test_dictionary_1', 'value_1', toUInt64(0));\") == 'Value_1\\n'\n+\n+    # Change path to the second dictionary in config.\n+    change_config(\"dictionary_config2.xml\")\n+\n+    time.sleep(10)\n+\n+    # Check that the new dictionary is loaded.\n+    assert node.query(\"SELECT dictGet('test_dictionary_2', 'value_2', toUInt64(0));\") == 'Value_2\\n'\n+\n+    # Check that the previous dictionary was unloaded.\n+    node.query_and_get_error(\"SELECT dictGet('test_dictionary_1', 'value', toUInt64(0));\")\ndiff --git a/tests/integration/test_executable_user_defined_functions_config_reload/__init__.py b/tests/integration/test_executable_user_defined_functions_config_reload/__init__.py\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/integration/test_executable_user_defined_functions_config_reload/config/executable_user_defined_functions_config.xml b/tests/integration/test_executable_user_defined_functions_config_reload/config/executable_user_defined_functions_config.xml\nnew file mode 100644\nindex 000000000000..7e62283a83c2\n--- /dev/null\n+++ b/tests/integration/test_executable_user_defined_functions_config_reload/config/executable_user_defined_functions_config.xml\n@@ -0,0 +1,2 @@\n+<yandex>\n+</yandex>\ndiff --git a/tests/integration/test_executable_user_defined_functions_config_reload/functions/test_function_config.xml b/tests/integration/test_executable_user_defined_functions_config_reload/functions/test_function_config.xml\nnew file mode 100644\nindex 000000000000..f2a7d6e67b18\n--- /dev/null\n+++ b/tests/integration/test_executable_user_defined_functions_config_reload/functions/test_function_config.xml\n@@ -0,0 +1,14 @@\n+<functions>\n+    <function>\n+        <type>executable</type>\n+        <name>test_function_1</name>\n+        <return_type>String</return_type>\n+        <argument>\n+            <type>UInt64</type>\n+        </argument>\n+        <format>TabSeparated</format>\n+        <command>while read read_data; do printf \"Key_1 $read_data\\n\"; done</command>\n+        <lifetime>0</lifetime>\n+    </function>\n+</functions>\n+\ndiff --git a/tests/integration/test_executable_user_defined_functions_config_reload/functions/test_function_config2.xml b/tests/integration/test_executable_user_defined_functions_config_reload/functions/test_function_config2.xml\nnew file mode 100644\nindex 000000000000..fe02146a6b89\n--- /dev/null\n+++ b/tests/integration/test_executable_user_defined_functions_config_reload/functions/test_function_config2.xml\n@@ -0,0 +1,14 @@\n+<functions>\n+    <function>\n+        <type>executable</type>\n+        <name>test_function_2</name>\n+        <return_type>String</return_type>\n+        <argument>\n+            <type>UInt64</type>\n+        </argument>\n+        <format>TabSeparated</format>\n+        <command>while read read_data; do printf \"Key_2 $read_data\\n\"; done</command>\n+        <lifetime>0</lifetime>\n+    </function>\n+</functions>\n+\ndiff --git a/tests/integration/test_executable_user_defined_functions_config_reload/test.py b/tests/integration/test_executable_user_defined_functions_config_reload/test.py\nnew file mode 100644\nindex 000000000000..e5c4f4edb4e3\n--- /dev/null\n+++ b/tests/integration/test_executable_user_defined_functions_config_reload/test.py\n@@ -0,0 +1,61 @@\n+import os\n+import sys\n+import time\n+import logging\n+import pytest\n+\n+sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n+SCRIPT_DIR = os.path.dirname(os.path.realpath(__file__))\n+\n+from helpers.cluster import ClickHouseCluster\n+\n+cluster = ClickHouseCluster(__file__)\n+node = cluster.add_instance('node', stay_alive=True, main_configs=['config/executable_user_defined_functions_config.xml'])\n+\n+\n+def copy_file_to_container(local_path, dist_path, container_id):\n+    os.system(\"docker cp {local} {cont_id}:{dist}\".format(local=local_path, cont_id=container_id, dist=dist_path))\n+\n+\n+config = '''<yandex>\n+    <user_defined_executable_functions_config>/etc/clickhouse-server/functions/{user_defined_executable_functions_config}</user_defined_executable_functions_config>\n+</yandex>'''\n+\n+\n+@pytest.fixture(scope=\"module\")\n+def started_cluster():\n+    try:\n+        cluster.start()\n+\n+        copy_file_to_container(os.path.join(SCRIPT_DIR, 'functions/.'), '/etc/clickhouse-server/functions', node.docker_id)\n+        node.restart_clickhouse()\n+\n+        yield cluster\n+\n+    finally:\n+        cluster.shutdown()\n+\n+\n+def change_config(user_defined_executable_functions_config):\n+    node.replace_config(\"/etc/clickhouse-server/config.d/executable_user_defined_functions_config.xml\", config.format(user_defined_executable_functions_config=user_defined_executable_functions_config))\n+    node.query(\"SYSTEM RELOAD CONFIG;\")\n+\n+\n+def test(started_cluster):\n+    # Set config with the path to the first executable user defined function.\n+    change_config(\"test_function_config.xml\")\n+\n+    time.sleep(10)\n+\n+    assert node.query(\"SELECT test_function_1(toUInt64(1));\") == 'Key_1 1\\n'\n+\n+    # Change path to the second executable user defined function in config.\n+    change_config(\"test_function_config2.xml\")\n+\n+    time.sleep(10)\n+\n+    # Check that the new executable user defined function is loaded.\n+    assert node.query(\"SELECT test_function_2(toUInt64(1))\") == 'Key_2 1\\n'\n+\n+    # Check that the previous executable user defined function was unloaded.\n+    node.query_and_get_error(\"SELECT test_function_1(toUInt64(1));\")\n",
  "problem_statement": "Add support for relative paths to load external machine learning models.\n> You have to provide the following information whenever possible.\r\n\r\nRelative paths for ml models works wrong\r\n\r\n> A clear and concise description of what works not as it is supposed to.\r\n\r\nIt's possibly broken here https://github.com/ClickHouse/ClickHouse/commit/cc65a1db972973470c282e0795818af9e0a8c0a9\r\nIn [this](https://github.com/ClickHouse/ClickHouse/blob/master/src/Interpreters/ExternalLoaderXMLConfigRepository.cpp#L39) string there is always returned default value, so if the config path is overridden we got the wrong path for the models.\r\n\r\n**Does it reproduce on recent release?**\r\n\r\nYes\r\n\r\n**How to reproduce**\r\n\r\nUse clickhouse version 21.5>\r\nSet a relative path to ml models in config.xml\r\nUser --config arg on server startup\r\nPlace ml models to the target directory\r\n`SELECT COUNT(*) FROM system.models` remains zero\r\n\r\n**Expected behavior**\r\nAs in exteranal dictionary loader\r\n\n",
  "hints_text": "Seems there is no bug in config we search dictionaries and models relative to clickhouse-binary not config. For example.\r\nFolder structure:\r\nclickhouse\r\ndictionaries/simple_dictionary.xml\r\nml_models/simple_model.xml\r\ntest_config_dir/config.xml\r\n\r\nIn config.xml:\r\n```xml\r\n<dictionaries_config>./dictionaries/*_dictionary.xml</dictionaries_config>\r\n<models_config>./ml_models/*_model.xml</models_config>\r\n```\r\nCheck queries:\r\n```\r\nSELECT COUNT(*) FROM system.dictionaries;\r\n\u250c\u2500count()\u2500\u2510\r\n\u2502       1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n```\r\nSELECT COUNT(*) FROM system.models;\r\n\u250c\u2500count()\u2500\u2510\r\n\u2502       1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\nYour example is correct, because code in link always returns clickhouse-binary path.\r\nFor example:\r\nFolder structure:\r\nclickhouse - binary can be anywhere\r\n/etc/clickhouse-server/dict.d/simple_dictionary.xml\r\n/etc/clickhouse-server/model.d/simple_model.xml\r\n/etc/clickhouse-server/config.xml\r\nIn config.xml:\r\n`<dictionaries_config>./dict.d/*_dictionary.xml</dictionaries_config>\r\n<models_config>./model.d/*_model.xml</models_config>`\r\n\r\nrun server with `clickhouse-server --config /etc/clickhouse-server/config.xml` and get 1 dictionary and 0 models.\r\nBut before linked pr clickhouse manages to find this model.",
  "created_at": "2021-09-29T12:56:47Z"
}