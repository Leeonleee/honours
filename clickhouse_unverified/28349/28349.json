{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 28349,
  "instance_id": "ClickHouse__ClickHouse-28349",
  "issue_numbers": [
    "27691"
  ],
  "base_commit": "00bea71610f0bac887662baa317203f4484de764",
  "patch": "diff --git a/src/Interpreters/join_common.cpp b/src/Interpreters/join_common.cpp\nindex 9890a130c331..b097a8f61929 100644\n--- a/src/Interpreters/join_common.cpp\n+++ b/src/Interpreters/join_common.cpp\n@@ -9,7 +9,6 @@\n #include <DataTypes/DataTypeLowCardinality.h>\n #include <DataTypes/DataTypeNullable.h>\n #include <DataTypes/DataTypesNumber.h>\n-#include <DataTypes/getLeastSupertype.h>\n \n #include <IO/WriteHelpers.h>\n \n@@ -30,12 +29,41 @@ namespace ErrorCodes\n namespace\n {\n \n+void insertFromNullableOrDefault(MutableColumnPtr & dst, const ColumnNullable * nullable_col)\n+{\n+    const auto & nested = nullable_col->getNestedColumn();\n+    const auto & nullmap = nullable_col->getNullMapColumn().getData();\n+    if (auto * lc = typeid_cast<ColumnLowCardinality *>(dst.get()); lc && !nested.lowCardinality())\n+    {\n+        for (size_t i = 0; i < nullable_col->size(); ++i)\n+        {\n+            if (nullmap[i])\n+                lc->insertDefault();\n+            else\n+                lc->insertRangeFromFullColumn(nested, i, 1);\n+        }\n+    }\n+    else\n+    {\n+        for (size_t i = 0; i < nullable_col->size(); ++i)\n+        {\n+            if (nullmap[i])\n+                dst->insertDefault();\n+            else\n+                dst->insertFrom(nested, i);\n+        }\n+    }\n+}\n+\n ColumnPtr changeLowCardinality(const ColumnPtr & column, const ColumnPtr & dst_sample)\n {\n     if (dst_sample->lowCardinality())\n     {\n         MutableColumnPtr lc = dst_sample->cloneEmpty();\n-        typeid_cast<ColumnLowCardinality &>(*lc).insertRangeFromFullColumn(*column, 0, column->size());\n+        if (const auto * nullable_col = typeid_cast<const ColumnNullable *>(column.get()))\n+            insertFromNullableOrDefault(lc, nullable_col);\n+        else\n+            typeid_cast<ColumnLowCardinality &>(*lc).insertRangeFromFullColumn(*column, 0, column->size());\n         return lc;\n     }\n \n@@ -190,9 +218,9 @@ void removeColumnNullability(ColumnWithTypeAndName & column)\n \n         if (column.column && column.column->isNullable())\n         {\n-            const auto * nullable_column = checkAndGetColumn<ColumnNullable>(*column.column);\n-            ColumnPtr nested_column = nullable_column->getNestedColumnPtr();\n-            MutableColumnPtr mutable_column = IColumn::mutate(std::move(nested_column));\n+            const auto * nullable_col = checkAndGetColumn<ColumnNullable>(*column.column);\n+            MutableColumnPtr mutable_column = nullable_col->getNestedColumn().cloneEmpty();\n+            insertFromNullableOrDefault(mutable_column, nullable_col);\n             column.column = std::move(mutable_column);\n         }\n     }\ndiff --git a/src/Processors/Transforms/JoiningTransform.cpp b/src/Processors/Transforms/JoiningTransform.cpp\nindex 95a12e2291d5..f099f41f4722 100644\n--- a/src/Processors/Transforms/JoiningTransform.cpp\n+++ b/src/Processors/Transforms/JoiningTransform.cpp\n@@ -1,8 +1,8 @@\n #include <Processors/Transforms/JoiningTransform.h>\n #include <Interpreters/ExpressionAnalyzer.h>\n #include <Interpreters/join_common.h>\n-#include <DataStreams/IBlockInputStream.h>\n \n+#include <common/logger_useful.h>\n \n namespace DB\n {\n@@ -15,7 +15,9 @@ namespace ErrorCodes\n Block JoiningTransform::transformHeader(Block header, const JoinPtr & join)\n {\n     ExtraBlockPtr tmp;\n+    LOG_DEBUG(&Poco::Logger::get(\"JoiningTransform\"), \"Before join block: '{}'\", header.dumpStructure());\n     join->joinBlock(header, tmp);\n+    LOG_DEBUG(&Poco::Logger::get(\"JoiningTransform\"), \"After join block: '{}'\", header.dumpStructure());\n     return header;\n }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00445_join_nullable_keys.reference b/tests/queries/0_stateless/00445_join_nullable_keys.reference\nindex f7675766dc97..afc8003910cf 100644\n--- a/tests/queries/0_stateless/00445_join_nullable_keys.reference\n+++ b/tests/queries/0_stateless/00445_join_nullable_keys.reference\n@@ -22,3 +22,13 @@\n 13\t\t13\n 14\t\t14\n \\N\t\t8\n+0\t0\n+0\t2\n+0\t4\n+0\t6\n+0\t8\n+1\t1\n+3\t3\n+5\t5\n+7\t7\n+9\t9\ndiff --git a/tests/queries/0_stateless/00445_join_nullable_keys.sql b/tests/queries/0_stateless/00445_join_nullable_keys.sql\nindex 2b8f2ca5f44b..a0453356e983 100644\n--- a/tests/queries/0_stateless/00445_join_nullable_keys.sql\n+++ b/tests/queries/0_stateless/00445_join_nullable_keys.sql\n@@ -30,3 +30,13 @@ ANY RIGHT JOIN\n (\n     SELECT nullIf(number, 8) AS k, toString(number) AS b FROM system.numbers LIMIT 5, 10\n ) js2 USING (k) ORDER BY k;\n+\n+SELECT k, b\n+FROM\n+(\n+    SELECT number + 1 AS k FROM numbers(10)\n+) js1\n+RIGHT JOIN\n+(\n+    SELECT nullIf(number, if(number % 2 == 0, number, 0)) AS k, number AS b FROM numbers(10)\n+) js2 USING (k) ORDER BY k, b;\ndiff --git a/tests/queries/0_stateless/01142_join_lc_and_nullable_in_key.reference b/tests/queries/0_stateless/01142_join_lc_and_nullable_in_key.reference\nindex c6bdcb773b23..01efbb7c64b8 100644\n--- a/tests/queries/0_stateless/01142_join_lc_and_nullable_in_key.reference\n+++ b/tests/queries/0_stateless/01142_join_lc_and_nullable_in_key.reference\n@@ -13,6 +13,8 @@\n 0\t\t\\N\tNullable(String)\n 1\tl\t\\N\tNullable(String)\n -\n+0\t\n+-\n 1\tl\t\\N\tNullable(String)\n 2\t\\N\t\\N\tNullable(String)\n 1\tl\t\\N\tNullable(String)\n@@ -27,3 +29,6 @@\n \\N\t\\N\t\\N\tNullable(String)\n 1\tl\t\\N\tNullable(String)\n \\N\t\\N\t\\N\tNullable(String)\n+-\n+\\N\t\\N\n+-\ndiff --git a/tests/queries/0_stateless/01142_join_lc_and_nullable_in_key.sql b/tests/queries/0_stateless/01142_join_lc_and_nullable_in_key.sql\nindex edaf2870e898..38b728371742 100644\n--- a/tests/queries/0_stateless/01142_join_lc_and_nullable_in_key.sql\n+++ b/tests/queries/0_stateless/01142_join_lc_and_nullable_in_key.sql\n@@ -27,6 +27,10 @@ SELECT x, lc, materialize(r.lc) y, toTypeName(y) FROM t AS l FULL JOIN nr AS r U\n \n SELECT '-';\n \n+SELECT x, lc FROM t AS l RIGHT JOIN nr AS r USING (lc);\n+\n+SELECT '-';\n+\n SET join_use_nulls = 1;\n \n SELECT x, lc, r.lc, toTypeName(r.lc) FROM t AS l LEFT JOIN nr AS r USING (x) ORDER BY x;\n@@ -45,6 +49,11 @@ SELECT x, lc, materialize(r.lc) y, toTypeName(y) FROM t AS l LEFT JOIN nr AS r U\n SELECT x, lc, materialize(r.lc) y, toTypeName(y) FROM t AS l RIGHT JOIN nr AS r USING (lc) ORDER BY x;\n SELECT x, lc, materialize(r.lc) y, toTypeName(y) FROM t AS l FULL JOIN nr AS r USING (lc) ORDER BY x;\n \n+SELECT '-';\n+\n+SELECT x, lc FROM t AS l RIGHT JOIN nr AS r USING (lc);\n+\n+SELECT '-';\n \n DROP TABLE t;\n DROP TABLE nr;\n",
  "problem_statement": "Logical error: 'ColumnUnique can't contain null values.'\n#27685\n",
  "hints_text": "@KochetovNicolai Reproduced in https://github.com/ClickHouse/ClickHouse/pull/27895\n@KochetovNicolai This is reproduced in master: https://clickhouse-test-reports.s3.yandex.net/0/96a5c4b033e57dcc0072cd4cbd7727e2c10a8196/fuzzer_debug/report.html\nDear @KochetovNicolai \r\nHere is another report from master:\r\nhttps://clickhouse-test-reports.s3.yandex.net/0/0486d1bd37140ce36ed3170d043c5266efca1f96/fuzzer_debug/report.html\nFrom `tests/queries/0_stateless/01142_join_lc_and_nullable_in_key.sql`\r\n```\r\nCREATE TABLE t (`x` UInt32, `lc` LowCardinality(String)) ENGINE = Memory;\r\nCREATE TABLE nr (`x` Nullable(UInt32), `lc` Nullable(String)) ENGINE = Memory;\r\nINSERT INTO t VALUES (1, 'l');\r\nINSERT INTO nr VALUES (2, NULL);\r\n\r\nSELECT\r\n    NULL,\r\n    x\r\nFROM t AS l\r\nRIGHT JOIN nr AS r USING (lc)\r\nORDER BY x ASC NULLS LAST;\r\n\r\nCode: 49. DB::Exception: Received from localhost:9000. DB::Exception: ColumnUnique can't contain null values.: While executing JoiningTransform. (LOGICAL_ERROR)\r\n```\nOne more: https://clickhouse-test-reports.s3.yandex.net/0/3644f2a7546b866d2fcb0dab6198a191ca4d0c8d/fuzzer_debug/report.html#fail1",
  "created_at": "2021-08-30T11:14:17Z"
}