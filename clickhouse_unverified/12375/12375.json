{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 12375,
  "instance_id": "ClickHouse__ClickHouse-12375",
  "issue_numbers": [
    "10437"
  ],
  "base_commit": "fdd8b09ffe7cb7353855f51b05583700dc19827f",
  "patch": "diff --git a/src/Processors/Transforms/FillingTransform.cpp b/src/Processors/Transforms/FillingTransform.cpp\nindex e8d56389eacd..292b86a1446f 100644\n--- a/src/Processors/Transforms/FillingTransform.cpp\n+++ b/src/Processors/Transforms/FillingTransform.cpp\n@@ -18,11 +18,7 @@ FillingTransform::FillingTransform(\n         , filling_row(sort_description_)\n         , next_row(sort_description_)\n {\n-    std::vector<bool> is_fill_column(header_.columns());\n-    for (const auto & elem : sort_description)\n-        is_fill_column[header_.getPositionByName(elem.column_name)] = true;\n-\n-    auto try_convert_fields = [](FillColumnDescription & descr, const DataTypePtr & type)\n+    auto try_convert_fields = [](auto & descr, const auto & type)\n     {\n         auto max_type = Field::Types::Null;\n         WhichDataType which(type);\n@@ -49,30 +45,32 @@ FillingTransform::FillingTransform(\n         return true;\n     };\n \n-    for (size_t i = 0; i < header_.columns(); ++i)\n+    std::vector<bool> is_fill_column(header_.columns());\n+    for (size_t i = 0; i < sort_description.size(); ++i)\n     {\n-        if (is_fill_column[i])\n-        {\n-            size_t pos = fill_column_positions.size();\n-            auto & descr = filling_row.getFillDescription(pos);\n-            auto type = header_.getByPosition(i).type;\n-            if (!try_convert_fields(descr, type))\n-                throw Exception(\"Incompatible types of WITH FILL expression values with column type \"\n-                    + type->getName(), ErrorCodes::INVALID_WITH_FILL_EXPRESSION);\n-\n-            if (type->isValueRepresentedByUnsignedInteger() &&\n-                ((!descr.fill_from.isNull() && less(descr.fill_from, Field{0}, 1)) ||\n-                    (!descr.fill_to.isNull() && less(descr.fill_to, Field{0}, 1))))\n-            {\n-                throw Exception(\"WITH FILL bound values cannot be negative for unsigned type \"\n-                    + type->getName(), ErrorCodes::INVALID_WITH_FILL_EXPRESSION);\n-            }\n+        size_t block_position = header_.getPositionByName(sort_description[i].column_name);\n+        is_fill_column[block_position] = true;\n+        fill_column_positions.push_back(block_position);\n \n-            fill_column_positions.push_back(i);\n+        auto & descr = filling_row.getFillDescription(i);\n+        const auto & type = header_.getByPosition(block_position).type;\n+\n+        if (!try_convert_fields(descr, type))\n+            throw Exception(\"Incompatible types of WITH FILL expression values with column type \"\n+                + type->getName(), ErrorCodes::INVALID_WITH_FILL_EXPRESSION);\n+\n+        if (type->isValueRepresentedByUnsignedInteger() &&\n+            ((!descr.fill_from.isNull() && less(descr.fill_from, Field{0}, 1)) ||\n+                (!descr.fill_to.isNull() && less(descr.fill_to, Field{0}, 1))))\n+        {\n+            throw Exception(\"WITH FILL bound values cannot be negative for unsigned type \"\n+                + type->getName(), ErrorCodes::INVALID_WITH_FILL_EXPRESSION);\n         }\n-        else\n-            other_column_positions.push_back(i);\n     }\n+\n+    for (size_t i = 0; i < header_.columns(); ++i)\n+        if (!is_fill_column[i])\n+            other_column_positions.push_back(i);\n }\n \n IProcessor::Status FillingTransform::prepare()\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01379_with_fill_several_columns.reference b/tests/queries/0_stateless/01379_with_fill_several_columns.reference\nnew file mode 100644\nindex 000000000000..f3362a47aab0\n--- /dev/null\n+++ b/tests/queries/0_stateless/01379_with_fill_several_columns.reference\n@@ -0,0 +1,21 @@\n+1970-01-11\t1970-01-02\toriginal\n+0000-00-00\t1970-01-03\t\n+0000-00-00\t1970-01-04\t\n+1970-02-10\t1970-01-05\toriginal\n+0000-00-00\t1970-01-06\t\n+0000-00-00\t1970-01-07\t\n+1970-03-12\t1970-01-08\toriginal\n+===============\n+1970-01-11\t1970-01-02\toriginal\n+1970-01-16\t0000-00-00\t\n+1970-01-21\t0000-00-00\t\n+1970-01-26\t0000-00-00\t\n+1970-01-31\t0000-00-00\t\n+1970-02-05\t0000-00-00\t\n+1970-02-10\t1970-01-05\toriginal\n+1970-02-15\t0000-00-00\t\n+1970-02-20\t0000-00-00\t\n+1970-02-25\t0000-00-00\t\n+1970-03-02\t0000-00-00\t\n+1970-03-07\t0000-00-00\t\n+1970-03-12\t1970-01-08\toriginal\ndiff --git a/tests/queries/0_stateless/01379_with_fill_several_columns.sql b/tests/queries/0_stateless/01379_with_fill_several_columns.sql\nnew file mode 100644\nindex 000000000000..5d1cb4e68281\n--- /dev/null\n+++ b/tests/queries/0_stateless/01379_with_fill_several_columns.sql\n@@ -0,0 +1,21 @@\n+SELECT \n+    toDate((number * 10) * 86400) AS d1, \n+    toDate(number * 86400) AS d2, \n+    'original' AS source\n+FROM numbers(10)\n+WHERE (number % 3) = 1\n+ORDER BY \n+    d2 WITH FILL, \n+    d1 WITH FILL STEP 5;\n+\n+SELECT '===============';\n+\n+SELECT \n+    toDate((number * 10) * 86400) AS d1, \n+    toDate(number * 86400) AS d2, \n+    'original' AS source\n+FROM numbers(10)\n+WHERE (number % 3) = 1\n+ORDER BY \n+    d1 WITH FILL STEP 5,\n+    d2 WITH FILL;\n\\ No newline at end of file\n",
  "problem_statement": "Mat view subquery + buffer table results in DB::Exception: There is no query\n```\r\nCREATE TABLE t1 (\r\n  i UInt32,\r\n  time DateTime\r\n) ENGINE = MergeTree()\r\nPARTITION BY time\r\nORDER BY time\r\n\r\nCREATE TABLE t2 (\r\n  i UInt32,\r\n  time DateTime\r\n) ENGINE = MergeTree()\r\nPARTITION BY time\r\nORDER BY time\r\n\r\nCREATE MATERIALIZED VIEW mv1\r\nTO t2\r\nAS SELECT * FROM (SELECT * FROM t1)\r\n\r\nCREATE TABLE b1 AS t1\r\nENGINE = Buffer(default, t1, 1, 0, 0, 1, 1, 1, 1)\r\n\r\nvmihailenco :) INSERT INTO b1 VALUES (1, now());\r\n\r\nINSERT INTO b1 VALUES\r\n\r\nReceived exception from server (version 20.3.7):\r\nCode: 393. DB::Exception: Received from localhost:9000. DB::Exception: There is no query.\r\n```\n",
  "hints_text": "I'm having same issue,\r\nI have \r\n1. table A engine ReplaceMergeTree()\r\n2. MV B on table A\r\n3. Buffer table on table A\r\n\r\nData is not written to the destination A table from the buffer.\r\nEven DROPing the Buffer that should trigger flush the data fails\r\n\r\n```\r\n2020.05.02 21:31:28.038219 [ 526 ] {06a0c14c-6c81-4204-9ab7-968755e881ce} <Error> virtual void DB::StorageBuffer::shutdown(): Code: 393, e.displayText() = DB::Exception: There is no query, Stack trace (when copying this message, always include the lines below):\r\n\r\n0. Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0xbecd55c in /usr/bin/clickhouse\r\n1. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x5009d49 in /usr/bin/clickhouse\r\n2. ? @ 0x4bfb800 in /usr/bin/clickhouse\r\n3. DB::Context::getSampleBlockCache() const @ 0x8cdcb99 in /usr/bin/clickhouse\r\n4. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&) @ 0x8da5c02 in /usr/bin/clickhouse\r\n5. ? @ 0x8f365b9 in /usr/bin/clickhouse\r\n6. DB::getDatabaseAndTablesWithColumnNames(std::__1::vector<DB::ASTTableExpression const*, std::__1::allocator<DB::ASTTableExpression const*> > const&, DB::Context const&, bool) @ 0x8f394f8 in /usr/bin/clickhouse\r\n7. DB::SyntaxAnalyzer::analyze(std::__1::shared_ptr<DB::IAST>&, DB::NamesAndTypesList const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::IStorage>, DB::NamesAndTypesList const&) const @ 0x8ef3983 in /usr/bin/clickhouse\r\n8. ? @ 0x8d6d616 in /usr/bin/clickhouse\r\n9. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6e8c8 in /usr/bin/clickhouse\r\n10. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6f9f5 in /usr/bin/clickhouse\r\n11. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8da5236 in /usr/bin/clickhouse\r\n12. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6f2af in /usr/bin/clickhouse\r\n13. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6f9f5 in /usr/bin/clickhouse\r\n14. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8da5236 in /usr/bin/clickhouse\r\n15. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6f2af in /usr/bin/clickhouse\r\n16. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6f9f5 in /usr/bin/clickhouse\r\n17. DB::PushingToViewsBlockOutputStream::PushingToViewsBlockOutputStream(std::__1::shared_ptr<DB::IStorage> const&, DB::Context const&, std::__1::shared_ptr<DB::IAST> const&, bool) @ 0x96f8baa in /usr/bin/clickhouse\r\n18. DB::InterpreterInsertQuery::execute() @ 0x8d4f07f in /usr/bin/clickhouse\r\n19. DB::StorageBuffer::writeBlockToDestination(DB::Block const&, std::__1::shared_ptr<DB::IStorage>) @ 0x99469fe in /usr/bin/clickhouse\r\n20. DB::StorageBuffer::flushBuffer(DB::StorageBuffer::Buffer&, bool, bool) @ 0x994796f in /usr/bin/clickhouse\r\n21. DB::StorageBuffer::optimize(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::IAST> const&, bool, bool, DB::Context const&) @ 0x9947baf in /usr/bin/clickhouse\r\n22. DB::StorageBuffer::shutdown() @ 0x9944103 in /usr/bin/clickhouse\r\n23. DB::InterpreterDropQuery::executeToTable(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::ASTDropQuery::Kind, bool, bool, bool) @ 0x8d47dd0 in /usr/bin/clickhouse\r\n24. DB::InterpreterDropQuery::execute() @ 0x8d49e3e in /usr/bin/clickhouse\r\n25. ? @ 0x8f2f50a in /usr/bin/clickhouse\r\n26. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, DB::Context&, std::__1::function<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>, std::__1::function<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>) @ 0x8f32b06 in /usr/bin/clickhouse\r\n27. DB::HTTPHandler::processQuery(Poco::Net::HTTPServerRequest&, HTMLForm&, Poco::Net::HTTPServerResponse&, DB::HTTPHandler::Output&) @ 0x5084816 in /usr/bin/clickhouse\r\n28. DB::HTTPHandler::handleRequest(Poco::Net::HTTPServerRequest&, Poco::Net::HTTPServerResponse&) @ 0x5087f03 in /usr/bin/clickhouse\r\n29. Poco::Net::HTTPServerConnection::run() @ 0x9e0480c in /usr/bin/clickhouse\r\n30. Poco::Net::TCPServerConnection::start() @ 0x9e01297 in /usr/bin/clickhouse\r\n31. Poco::Net::TCPServerDispatcher::run() @ 0x9e0168d in /usr/bin/clickhouse\r\n (version 20.2.1.2442 (official build))\r\n```",
  "created_at": "2020-07-09T22:55:00Z"
}