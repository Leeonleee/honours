{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 9106,
  "instance_id": "ClickHouse__ClickHouse-9106",
  "issue_numbers": [
    "9064"
  ],
  "base_commit": "7aeb9009227dcc9e068b0d165065e666ae9ad071",
  "patch": "diff --git a/dbms/src/Storages/MergeTree/MergeTreeRangeReader.cpp b/dbms/src/Storages/MergeTree/MergeTreeRangeReader.cpp\nindex 56e5cfdb3d2d..cd458669d81f 100644\n--- a/dbms/src/Storages/MergeTree/MergeTreeRangeReader.cpp\n+++ b/dbms/src/Storages/MergeTree/MergeTreeRangeReader.cpp\n@@ -333,8 +333,8 @@ void MergeTreeRangeReader::ReadResult::optimize()\n             filter_holder_original = std::move(filter_holder);\n             filter = new_filter.get();\n             filter_holder = std::move(new_filter);\n+            need_filter = true;\n         }\n-        need_filter = true;\n     }\n     /// Another guess, if it's worth filtering at PREWHERE\n     else if (countBytesInResultFilter(filter->getData()) < 0.6 * filter->size())\n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/01079_new_range_reader_segfault.reference b/dbms/tests/queries/0_stateless/01079_new_range_reader_segfault.reference\nnew file mode 100644\nindex 000000000000..257cc5642cb1\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/01079_new_range_reader_segfault.reference\n@@ -0,0 +1,1 @@\n+foo\ndiff --git a/dbms/tests/queries/0_stateless/01079_new_range_reader_segfault.sql b/dbms/tests/queries/0_stateless/01079_new_range_reader_segfault.sql\nnew file mode 100644\nindex 000000000000..9c3f073c72f3\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/01079_new_range_reader_segfault.sql\n@@ -0,0 +1,11 @@\n+drop table if exists t;\n+\n+create table t (a Int) engine = MergeTree order by a;\n+\n+-- some magic to satisfy conditions to run optimizations in MergeTreeRangeReader\n+insert into t select number < 20 ? 0 : 1 from numbers(50);\n+alter table t add column s String default 'foo';\n+\n+select s from t prewhere a != 1 where rand() % 2 = 0 limit 1;\n+\n+drop table t;\n",
  "problem_statement": "Crash in MergeTreeRangeReader\n```\r\n2020.02.10 16:08:10.340353 [ 70 ] {} <Fatal> BaseDaemon: ########################################\r\n2020.02.10 16:08:10.340480 [ 70 ] {} <Fatal> BaseDaemon: (version 20.1.3.7 (official build)) (from thread 60) (query_id: e3ad3aef-c6fb-4f93-aafc-9ac8182f7cc1) Received signal Segmentation fault (11).\r\n2020.02.10 16:08:10.340559 [ 70 ] {} <Fatal> BaseDaemon: Address: 0x18 Access: read. Address not mapped to object.\r\n2020.02.10 16:08:10.340604 [ 70 ] {} <Fatal> BaseDaemon: Stack trace: 0x8e5378e 0x97a27f5 0x97a5f3f 0x97684c6 0x9769cc3 0x91a4c87 0x91d6e84 0x91d70a3 0x8a6d24f 0x94a6871 0x8a6d24f 0x949c1c8 0x8a6d24f 0x94e9580 0x94e9b05 0x4fa3a77 0x4fa202f 0x7f80b7a84fa3 0x7f80b79a64cf\r\n2020.02.10 16:08:10.434034 [ 70 ] {} <Fatal> BaseDaemon: 3. 0x8e5378e DB::ColumnVector<long>::filter(DB::PODArray<unsigned char, 4096ul, Allocator<false, false>, 15ul, 16ul> const&, long) const  in /usr/bin/clickhouse\r\n2020.02.10 16:08:10.434106 [ 70 ] {} <Fatal> BaseDaemon: 4. 0x97a27f5 DB::MergeTreeRangeReader::filterColumns(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > >&, DB::PODArray<unsigned char, 4096ul, Allocator<false, false>, 15ul, 16ul> const&) const  in /usr/bin/clickhouse\r\n2020.02.10 16:08:10.620361 [ 70 ] {} <Fatal> BaseDaemon: 5. 0x97a5f3f DB::MergeTreeRangeReader::read(unsigned long, std::__1::vector<DB::MarkRange, std::__1::allocator<DB::MarkRange> >&)  in /usr/bin/clickhouse\r\n2020.02.10 16:08:10.620406 [ 70 ] {} <Fatal> BaseDaemon: 6. 0x97684c6 DB::MergeTreeBaseSelectProcessor::readFromPartImpl()  in /usr/bin/clickhouse\r\n2020.02.10 16:08:10.620426 [ 70 ] {} <Fatal> BaseDaemon: 7. 0x9769cc3 DB::MergeTreeBaseSelectProcessor::generate()  in /usr/bin/clickhouse\r\n2020.02.10 16:08:10.620452 [ 70 ] {} <Fatal> BaseDaemon: 8. 0x91a4c87 DB::ISource::work()  in /usr/bin/clickhouse\r\n2020.02.10 16:08:10.751008 [ 70 ] {} <Fatal> BaseDaemon: 9. 0x91d6e84 DB::TreeExecutorBlockInputStream::execute()  in /usr/bin/clickhouse\r\n2020.02.10 16:08:10.751049 [ 70 ] {} <Fatal> BaseDaemon: 10. 0x91d70a3 DB::TreeExecutorBlockInputStream::readImpl()  in /usr/bin/clickhouse\r\n2020.02.10 16:08:10.839856 [ 70 ] {} <Fatal> BaseDaemon: 11. 0x8a6d24f DB::IBlockInputStream::read()  in /usr/bin/clickhouse\r\n2020.02.10 16:08:10.982566 [ 70 ] {} <Fatal> BaseDaemon: 12. 0x94a6871 DB::FilterBlockInputStream::readImpl()  in /usr/bin/clickhouse\r\n2020.02.10 16:08:10.982608 [ 70 ] {} <Fatal> BaseDaemon: 13. 0x8a6d24f DB::IBlockInputStream::read()  in /usr/bin/clickhouse\r\n2020.02.10 16:08:10.982628 [ 70 ] {} <Fatal> BaseDaemon: 14. 0x949c1c8 DB::ExpressionBlockInputStream::readImpl()  in /usr/bin/clickhouse\r\n2020.02.10 16:08:10.982647 [ 70 ] {} <Fatal> BaseDaemon: 15. 0x8a6d24f DB::IBlockInputStream::read()  in /usr/bin/clickhouse\r\n2020.02.10 16:08:10.982676 [ 70 ] {} <Fatal> BaseDaemon: 16. 0x94e9580 DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::__1::shared_ptr<DB::ThreadGroupStatus>, unsigned long)  in /usr/bin/clickhouse\r\n2020.02.10 16:08:10.982727 [ 70 ] {} <Fatal> BaseDaemon: 17. 0x94e9b05 ThreadFromGlobalPool::ThreadFromGlobalPool<void (DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::*)(std::__1::shared_ptr<DB::ThreadGroupStatus>, unsigned long), DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>*, std::__1::shared_ptr<DB::ThreadGroupStatus>, unsigned long&>(void (DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::*&&)(std::__1::shared_ptr<DB::ThreadGroupStatus>, unsigned long), DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>*&&, std::__1::shared_ptr<DB::ThreadGroupStatus>&&, unsigned long&)::'lambda'()::operator()() const  in /usr/bin/clickhouse\r\n2020.02.10 16:08:11.105574 [ 70 ] {} <Fatal> BaseDaemon: 18. 0x4fa3a77 ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>)  in /usr/bin/clickhouse\r\n2020.02.10 16:08:11.172058 [ 70 ] {} <Fatal> BaseDaemon: 19. 0x4fa202f ?  in /usr/bin/clickhouse\r\n2020.02.10 16:08:11.172139 [ 70 ] {} <Fatal> BaseDaemon: 20. 0x7fa3 start_thread  in /lib/x86_64-linux-gnu/libpthread-2.28.so\r\n2020.02.10 16:08:11.172176 [ 70 ] {} <Fatal> BaseDaemon: 21. 0xf94cf __clone  in /lib/x86_64-linux-gnu/libc-2.28.so\r\n```\r\n\r\nSchema\r\n```\r\nCREATE TABLE yad_auto.yad_stats_b (`date` Date, `client` String, `cid` Int64, `bid` Int64, `gid` Int64, `type` UInt8, `device` UInt8, `slot` UInt8, `shows` Int32, `clicks` Int32, `sum` Float64, `trans` Float64, `trans_mcf` Int32, `val` Float64, `marg` Float64, `calls` Int32, `bcalls` Int32, `goal1` Int32, `goal2` Int32, `goal3` Int32, `goal4` Int32, `goal5` Int32, `goal6` Int32, `goal7` Int32, `goal8` Int32, `goal9` Int32, `goal10` Int32, `goal11` Int32, `goal12` Int32, `goal13` Int32, `goal14` Int32, `goal15` Int32, `goal16` Int32, `goal17` Int32, `goal18` Int32, `goal19` Int32, `goal20` Int32, `newUsers` Int32, `bounces` Int32, `sessions` Int32, `timeOnPage` Int32, `pageviews` Int32, `exits` Int32, `pageDepthOnSession` Int32, `avg_show_pos` Float64, `avg_click_pos` Float64, `clicks_avr` Int32, `shows_avr` Int32, `val_mcf` Float64 DEFAULT 0.) ENGINE = ReplicatedSummingMergeTree('/clickhouse_perftest/tables/{shard}/yad_stats_b', '{replica}', date, (client, cid, bid, gid, device, date, type, slot), 8192)\r\n```\r\n\r\nAffected query\r\n```\r\nSELECT\r\ndate,\r\nclient,\r\n \r\nSUM(shows) AS sshows,\r\nSUM(clicks) AS clicks,\r\nSUM(sum) AS sum,\r\n \r\nSUM(trans) AS trans,\r\nSUM(val) AS val,\r\nSUM(marg) AS marg,\r\nSUM(trans_mcf) AS trans_mcf,\r\nSUM(val_mcf) AS val_mcf,\r\n \r\nSUM(calls) AS calls,\r\nSUM(bcalls) AS bcalls,\r\n \r\nSUM(goal1) AS goal1,\r\nSUM(goal2) AS goal2,\r\nSUM(goal3) AS goal3,\r\nSUM(goal4) AS goal4,\r\nSUM(goal5) AS goal5,\r\nSUM(goal6) AS goal6,\r\nSUM(goal7) AS goal7,\r\nSUM(goal8) AS goal8,\r\nSUM(goal9) AS goal9,\r\nSUM(goal10) AS goal10,\r\nSUM(goal11) AS goal11,\r\nSUM(goal12) AS goal12,\r\nSUM(goal13) AS goal13,\r\nSUM(goal14) AS goal14,\r\nSUM(goal15) AS goal15,\r\nSUM(goal16) AS goal16,\r\nSUM(goal17) AS goal17,\r\nSUM(goal18) AS goal18,\r\nSUM(goal19) AS goal19,\r\nSUM(goal20) AS goal20,\r\n \r\nSUM(newUsers) AS newUsers,\r\nSUM(bounces) AS bounces,\r\nSUM(sessions) AS sessions,\r\nSUM(timeOnPage) AS timeOnPage,\r\nSUM(pageviews) AS pageviews,\r\nSUM(exits) AS exits,\r\n \r\nSUM(avg_click_pos) AS avg_click_pos,\r\nSUM(avg_show_pos) AS avg_show_pos,\r\nSUM(shows_avr) AS shows_pos,\r\nSUM(clicks_avr) AS clicks_pos,\r\n \r\nsumIf(shows, slot=0) as shows_premium,\r\nsumIf(shows, slot=1) as shows_other\r\nFROM `yad_stats_b`\r\nWHERE ( (client='pro-vseinstrumenti' and cid !=0 ) ) and (date BETWEEN '2019-01-01' AND '2020-06-02') and (cid+bid > 0)\r\nGROUP BY date, client\r\nORDER BY date asc\r\n```\r\n\r\nQuery is OK if replace `cid !=0` with `cid> 0`\n",
  "hints_text": "Looks like a duplicate of #8997\ncrashes even with this query:\r\nSELECT\r\n    date,\r\n    client,\r\n    \r\n  SUM(shows) AS sshows,\r\n  SUM(clicks) AS clicks,\r\n  SUM(sum) AS sum,\r\n\r\n  SUM(trans) AS trans,\r\n  SUM(val) AS val,\r\n  SUM(marg) AS marg,\r\n  SUM(trans_mcf) AS trans_mcf,\r\n  SUM(val_mcf) AS val_mcf\r\n\r\n   FROM yad_auto.`yad_stats_b`\r\n   WHERE ( (client='login'  and cid !=0  ) ) and (date BETWEEN '2019-06-01' AND '2019-06-01') \r\n  GROUP BY date, client\nI'm not sure, that it's the same issue. @grootman2007, please, can you try to reproduce on 20.1.4?\n@CurtizJ I tried version 20.1.2.4 (cause could not find 20.1.4) - it has the same problem:\r\n\r\n\r\n<pre><code>\r\n\r\n 2020.02.13 13:38:04.612055 [ 106 ] {} <Fatal> BaseDaemon: ########################################\r\n2020.02.13 13:38:04.612147 [ 106 ] {} <Fatal> BaseDaemon: (version 20.1.2.4 (official build)) (from thread 55) (query_id: f448f6d0-8639-4748-a1b2-3e534482dbe7) Received signal Segmentation fault (11).\r\n2020.02.13 13:38:04.612188 [ 106 ] {} <Fatal> BaseDaemon: Address: 0x18 Access: read. Address not mapped to object.\r\n2020.02.13 13:38:04.612215 [ 106 ] {} <Fatal> BaseDaemon: Stack trace: 0x8e537ce 0x97a2495 0x97a5bdf 0x9768166 0x9769963 0x91a4c27 0x91d6e24 0x91d7043 0x8a6d32f 0x94a6811 0x8a6d32f 0x949c168 0x8a6d32f 0x94e9520 0x94e9aa5 0x4fa3b77 0x4fa212f 0x7f3c7905cfa3 0x7f3c78f7e4cf\r\n2020.02.13 13:38:04.661587 [ 106 ] {} <Fatal> BaseDaemon: 3. 0x8e537ce DB::ColumnVector<long>::filter(DB::PODArray<unsigned char, 4096ul, Allocator<false, false>, 15ul, 16ul> const&, long) const  in /usr/bin/clickhouse\r\n2020.02.13 13:38:04.661649 [ 106 ] {} <Fatal> BaseDaemon: 4. 0x97a2495 DB::MergeTreeRangeReader::filterColumns(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > >&, DB::PODArray<unsigned char, 4096ul, Allocator<false, false>, 15ul, 16ul> const&) const  in /usr/bin/clickhouse\r\n2020.02.13 13:38:04.661710 [ 106 ] {} <Fatal> BaseDaemon: 5. 0x97a5bdf DB::MergeTreeRangeReader::read(unsigned long, std::__1::vector<DB::MarkRange, std::__1::allocator<DB::MarkRange> >&)  in /usr/bin/clickhouse\r\n2020.02.13 13:38:04.661733 [ 106 ] {} <Fatal> BaseDaemon: 6. 0x9768166 DB::MergeTreeBaseSelectProcessor::readFromPartImpl()  in /usr/bin/clickhouse\r\n2020.02.13 13:38:04.661753 [ 106 ] {} <Fatal> BaseDaemon: 7. 0x9769963 DB::MergeTreeBaseSelectProcessor::generate()  in /usr/bin/clickhouse\r\n2020.02.13 13:38:04.661778 [ 106 ] {} <Fatal> BaseDaemon: 8. 0x91a4c27 DB::ISource::work()  in /usr/bin/clickhouse\r\n2020.02.13 13:38:04.661802 [ 106 ] {} <Fatal> BaseDaemon: 9. 0x91d6e24 DB::TreeExecutorBlockInputStream::execute()  in /usr/bin/clickhouse\r\n2020.02.13 13:38:04.661820 [ 106 ] {} <Fatal> BaseDaemon: 10. 0x91d7043 DB::TreeExecutorBlockInputStream::readImpl()  in /usr/bin/clickhouse\r\n2020.02.13 13:38:04.661853 [ 106 ] {} <Fatal> BaseDaemon: 11. 0x8a6d32f DB::IBlockInputStream::read()  in /usr/bin/clickhouse\r\n2020.02.13 13:38:04.661880 [ 106 ] {} <Fatal> BaseDaemon: 12. 0x94a6811 DB::FilterBlockInputStream::readImpl()  in /usr/bin/clickhouse\r\n2020.02.13 13:38:04.661899 [ 106 ] {} <Fatal> BaseDaemon: 13. 0x8a6d32f DB::IBlockInputStream::read()  in /usr/bin/clickhouse\r\n2020.02.13 13:38:04.661917 [ 106 ] {} <Fatal> BaseDaemon: 14. 0x949c168 DB::ExpressionBlockInputStream::readImpl()  in /usr/bin/clickhouse\r\n2020.02.13 13:38:04.661934 [ 106 ] {} <Fatal> BaseDaemon: 15. 0x8a6d32f DB::IBlockInputStream::read()  in /usr/bin/clickhouse\r\n2020.02.13 13:38:04.661956 [ 106 ] {} <Fatal> BaseDaemon: 16. 0x94e9520 DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::__1::shared_ptr<DB::ThreadGroupStatus>, unsigned long)  in /usr/bin/clickhouse\r\n2020.02.13 13:38:04.661998 [ 106 ] {} <Fatal> BaseDaemon: 17. 0x94e9aa5 ThreadFromGlobalPool::ThreadFromGlobalPool<void (DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::*)(std::__1::shared_ptr<DB::ThreadGroupStatus>, unsigned long), DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>*, std::__1::shared_ptr<DB::ThreadGroupStatus>, unsigned long&>(void (DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::*&&)(std::__1::shared_ptr<DB::ThreadGroupStatus>, unsigned long), DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>*&&, std::__1::shared_ptr<DB::ThreadGroupStatus>&&, unsigned long&)::'lambda'()::operator()() const  in /usr/bin/clickhouse\r\n2020.02.13 13:38:04.662038 [ 106 ] {} <Fatal> BaseDaemon: 18. 0x4fa3b77 ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>)  in /usr/bin/clickhouse\r\n2020.02.13 13:38:04.662057 [ 106 ] {} <Fatal> BaseDaemon: 19. 0x4fa212f ?  in /usr/bin/clickhouse\r\n2020.02.13 13:38:04.662077 [ 106 ] {} <Fatal> BaseDaemon: 20. 0x7fa3 start_thread  in /lib/x86_64-linux-gnu/libpthread-2.28.so\r\n2020.02.13 13:38:04.662100 [ 106 ] {} <Fatal> BaseDaemon: 21. 0xf94cf clone  in /lib/x86_64-linux-gnu/libc-2.28.so\r\n</code></pre>\r\n\nHere you can find version 20.1.4.14\r\nhttps://repo.yandex.ru/clickhouse/deb/stable/main/\r\n\n@CurtizJ same output with 20.1.4.14:\r\n\r\n<code><pre>\r\n2020.02.13 14:33:48.410856 [ 126 ] {} <Fatal> BaseDaemon: ########################################\r\n2020.02.13 14:33:48.472786 [ 126 ] {} <Fatal> BaseDaemon: (version 20.1.4.14 (official build)) (from thread 100) (query_id: 622a74cc-6bd6-40cf-85bb-446c6eef5db9) Received signal Segmentation fault (11).\r\n2020.02.13 14:33:48.472851 [ 126 ] {} <Fatal> BaseDaemon: Address: 0x18 Access: read. Address not mapped to object.\r\n2020.02.13 14:33:48.472881 [ 126 ] {} <Fatal> BaseDaemon: Stack trace: 0x8e55ede 0x97a6605 0x97a9d7f 0x976c2d6 0x976dad3 0x91a7ef7 0x91da0f4 0x91da313 0x8a6f42f 0x94a9a11 0x8a6f42f 0x949f368 0x8a6f42f 0x94ec720 0x94ecca5 0x4fa4fd7 0x4fa358f 0x7f7366c0cfa3 0x7f7366b2e4cf\r\n2020.02.13 14:33:49.488277 [ 127 ] {} <Fatal> BaseDaemon: ########################################\r\n2020.02.13 14:33:49.488387 [ 127 ] {} <Fatal> BaseDaemon: (version 20.1.4.14 (official build)) (from thread 68) (query_id: 622a74cc-6bd6-40cf-85bb-446c6eef5db9) Received signal Segmentation fault (11).\r\n2020.02.13 14:33:49.488461 [ 127 ] {} <Fatal> BaseDaemon: Address: 0x18 Access: read. Address not mapped to object.\r\n2020.02.13 14:33:49.488484 [ 127 ] {} <Fatal> BaseDaemon: Stack trace: 0x8e55ede 0x97a6605 0x97a9d7f 0x976c2d6 0x976dad3 0x91a7ef7 0x91da0f4 0x91da313 0x8a6f42f 0x94a9a11 0x8a6f42f 0x949f368 0x8a6f42f 0x94ec720 0x94ecca5 0x4fa4fd7 0x4fa358f 0x7f7366c0cfa3 0x7f7366b2e4cf\r\n2020.02.13 14:33:51.231817 [ 126 ] {} <Fatal> BaseDaemon: 3. 0x8e55ede DB::ColumnVector<long>::filter(DB::PODArray<unsigned char, 4096ul, Allocator<false, false>, 15ul, 16ul> const&, long) const  in /usr/bin/clickhouse\r\n2020.02.13 14:33:51.231817 [ 127 ] {} <Fatal> BaseDaemon: 3. 0x8e55ede DB::ColumnVector<long>::filter(DB::PODArray<unsigned char, 4096ul, Allocator<false, false>, 15ul, 16ul> const&, long) const  in /usr/bin/clickhouse\r\n2020.02.13 14:33:51.231878 [ 126 ] {} <Fatal> BaseDaemon: 4. 0x97a6605 DB::MergeTreeRangeReader::filterColumns(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > >&, DB::PODArray<unsigned char, 4096ul, Allocator<false, false>, 15ul, 16ul> const&) const  in /usr/bin/clickhouse\r\n2020.02.13 14:33:51.231885 [ 127 ] {} <Fatal> BaseDaemon: 4. 0x97a6605 DB::MergeTreeRangeReader::filterColumns(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > >&, DB::PODArray<unsigned char, 4096ul, Allocator<false, false>, 15ul, 16ul> const&) const  in /usr/bin/clickhouse\r\n2020.02.13 14:33:51.268662 [ 126 ] {} <Fatal> BaseDaemon: 5. 0x97a9d7f DB::MergeTreeRangeReader::read(unsigned long, std::__1::vector<DB::MarkRange, std::__1::allocator<DB::MarkRange> >&)  in /usr/bin/clickhouse\r\n2020.02.13 14:33:51.268685 [ 127 ] {} <Fatal> BaseDaemon: 5. 0x97a9d7f DB::MergeTreeRangeReader::read(unsigned long, std::__1::vector<DB::MarkRange, std::__1::allocator<DB::MarkRange> >&)  in /usr/bin/clickhouse\r\n2020.02.13 14:33:51.268694 [ 126 ] {} <Fatal> BaseDaemon: 6. 0x976c2d6 DB::MergeTreeBaseSelectProcessor::readFromPartImpl()  in /usr/bin/clickhouse\r\n2020.02.13 14:33:51.268734 [ 127 ] {} <Fatal> BaseDaemon: 6. 0x976c2d6 DB::MergeTreeBaseSelectProcessor::readFromPartImpl()  in /usr/bin/clickhouse\r\n2020.02.13 14:33:51.268749 [ 126 ] {} <Fatal> BaseDaemon: 7. 0x976dad3 DB::MergeTreeBaseSelectProcessor::generate()  in /usr/bin/clickhouse\r\n2020.02.13 14:33:51.268750 [ 127 ] {} <Fatal> BaseDaemon: 7. 0x976dad3 DB::MergeTreeBaseSelectProcessor::generate()  in /usr/bin/clickhouse\r\n2020.02.13 14:33:51.398847 [ 127 ] {} <Fatal> BaseDaemon: 8. 0x91a7ef7 DB::ISource::work()  in /usr/bin/clickhouse\r\n2020.02.13 14:33:51.398847 [ 126 ] {} <Fatal> BaseDaemon: 8. 0x91a7ef7 DB::ISource::work()  in /usr/bin/clickhouse\r\n2020.02.13 14:33:51.523972 [ 126 ] {} <Fatal> BaseDaemon: 9. 0x91da0f4 DB::TreeExecutorBlockInputStream::execute()  in /usr/bin/clickhouse\r\n2020.02.13 14:33:51.523973 [ 127 ] {} <Fatal> BaseDaemon: 9. 0x91da0f4 DB::TreeExecutorBlockInputStream::execute()  in /usr/bin/clickhouse\r\n2020.02.13 14:33:51.524006 [ 126 ] {} <Fatal> BaseDaemon: 10. 0x91da313 DB::TreeExecutorBlockInputStream::readImpl()  in /usr/bin/clickhouse\r\n2020.02.13 14:33:51.524021 [ 127 ] {} <Fatal> BaseDaemon: 10. 0x91da313 DB::TreeExecutorBlockInputStream::readImpl()  in /usr/bin/clickhouse\r\n2020.02.13 14:33:51.587953 [ 126 ] {} <Fatal> BaseDaemon: 11. 0x8a6f42f DB::IBlockInputStream::read()  in /usr/bin/clickhouse\r\n2020.02.13 14:33:51.587964 [ 127 ] {} <Fatal> BaseDaemon: 11. 0x8a6f42f DB::IBlockInputStream::read()  in /usr/bin/clickhouse\r\n2020.02.13 14:33:51.697405 [ 126 ] {} <Fatal> BaseDaemon: 12. 0x94a9a11 DB::FilterBlockInputStream::readImpl()  in /usr/bin/clickhouse\r\n2020.02.13 14:33:51.697429 [ 127 ] {} <Fatal> BaseDaemon: 12. 0x94a9a11 DB::FilterBlockInputStream::readImpl()  in /usr/bin/clickhouse\r\n2020.02.13 14:33:51.697437 [ 126 ] {} <Fatal> BaseDaemon: 13. 0x8a6f42f DB::IBlockInputStream::read()  in /usr/bin/clickhouse\r\n2020.02.13 14:33:51.697479 [ 127 ] {} <Fatal> BaseDaemon: 13. 0x8a6f42f DB::IBlockInputStream::read()  in /usr/bin/clickhouse\r\n2020.02.13 14:33:51.697495 [ 126 ] {} <Fatal> BaseDaemon: 14. 0x949f368 DB::ExpressionBlockInputStream::readImpl()  in /usr/bin/clickhouse\r\n2020.02.13 14:33:51.697495 [ 127 ] {} <Fatal> BaseDaemon: 14. 0x949f368 DB::ExpressionBlockInputStream::readImpl()  in /usr/bin/clickhouse\r\n2020.02.13 14:33:51.697520 [ 126 ] {} <Fatal> BaseDaemon: 15. 0x8a6f42f DB::IBlockInputStream::read()  in /usr/bin/clickhouse\r\n2020.02.13 14:33:51.697529 [ 127 ] {} <Fatal> BaseDaemon: 15. 0x8a6f42f DB::IBlockInputStream::read()  in /usr/bin/clickhouse\r\n2020.02.13 14:33:51.697542 [ 126 ] {} <Fatal> BaseDaemon: 16. 0x94ec720 DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::__1::shared_ptr<DB::ThreadGroupStatus>, unsigned long)  in /usr/bin/clickhouse\r\n2020.02.13 14:33:51.697549 [ 127 ] {} <Fatal> BaseDaemon: 16. 0x94ec720 DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::__1::shared_ptr<DB::ThreadGroupStatus>, unsigned long)  in /usr/bin/clickhouse\r\n2020.02.13 14:33:51.697592 [ 126 ] {} <Fatal> BaseDaemon: 17. 0x94ecca5 ThreadFromGlobalPool::ThreadFromGlobalPool<void (DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::*)(std::__1::shared_ptr<DB::ThreadGroupStatus>, unsigned long), DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>*, std::__1::shared_ptr<DB::ThreadGroupStatus>, unsigned long&>(void (DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::*&&)(std::__1::shared_ptr<DB::ThreadGroupStatus>, unsigned long), DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>*&&, std::__1::shared_ptr<DB::ThreadGroupStatus>&&, unsigned long&)::'lambda'()::operator()() const  in /usr/bin/clickhouse\r\n2020.02.13 14:33:51.697598 [ 127 ] {} <Fatal> BaseDaemon: 17. 0x94ecca5 ThreadFromGlobalPool::ThreadFromGlobalPool<void (DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::*)(std::__1::shared_ptr<DB::ThreadGroupStatus>, unsigned long), DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>*, std::__1::shared_ptr<DB::ThreadGroupStatus>, unsigned long&>(void (DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::*&&)(std::__1::shared_ptr<DB::ThreadGroupStatus>, unsigned long), DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>*&&, std::__1::shared_ptr<DB::ThreadGroupStatus>&&, unsigned long&)::'lambda'()::operator()() const  in /usr/bin/clickhouse\r\n2020.02.13 14:33:51.837077 [ 126 ] {} <Fatal> BaseDaemon: 18. 0x4fa4fd7 ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>)  in /usr/bin/clickhouse\r\n2020.02.13 14:33:51.837077 [ 127 ] {} <Fatal> BaseDaemon: 18. 0x4fa4fd7 ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>)  in /usr/bin/clickhouse\r\n2020.02.13 14:33:51.837131 [ 126 ] {} <Fatal> BaseDaemon: 19. 0x4fa358f ?  in /usr/bin/clickhouse\r\n2020.02.13 14:33:51.837136 [ 127 ] {} <Fatal> BaseDaemon: 19. 0x4fa358f ?  in /usr/bin/clickhouse\r\n2020.02.13 14:33:51.837155 [ 126 ] {} <Fatal> BaseDaemon: 20. 0x7fa3 start_thread  in /lib/x86_64-linux-gnu/libpthread-2.28.so\r\n2020.02.13 14:33:51.837155 [ 127 ] {} <Fatal> BaseDaemon: 20. 0x7fa3 start_thread  in /lib/x86_64-linux-gnu/libpthread-2.28.so\r\n2020.02.13 14:33:51.837178 [ 126 ] {} <Fatal> BaseDaemon: 21. 0xf94cf __clone  in /lib/x86_64-linux-gnu/libc-2.28.so\r\n2020.02.13 14:33:51.837184 [ 127 ] {} <Fatal> BaseDaemon: 21. 0xf94cf __clone  in /lib/x86_64-linux-gnu/libc-2.28.so\r\n</pre></code>\nWell then, it's a new issue. Thanks.",
  "created_at": "2020-02-13T21:22:11Z",
  "modified_files": [
    "dbms/src/Storages/MergeTree/MergeTreeRangeReader.cpp"
  ],
  "modified_test_files": [
    "b/dbms/tests/queries/0_stateless/01079_new_range_reader_segfault.reference",
    "b/dbms/tests/queries/0_stateless/01079_new_range_reader_segfault.sql"
  ]
}