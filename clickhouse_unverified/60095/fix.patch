diff --git a/programs/server/config.d/filesystem_cache_log.xml b/programs/server/config.d/filesystem_cache_log.xml
new file mode 120000
index 000000000000..aa89e44c64f7
--- /dev/null
+++ b/programs/server/config.d/filesystem_cache_log.xml
@@ -0,0 +1,1 @@
+../../../tests/config/config.d/filesystem_cache_log.xml
\ No newline at end of file
diff --git a/programs/server/config.d/filesystem_caches_path.xml b/programs/server/config.d/filesystem_caches_path.xml
new file mode 100644
index 000000000000..87555d1f81cb
--- /dev/null
+++ b/programs/server/config.d/filesystem_caches_path.xml
@@ -0,0 +1,4 @@
+<clickhouse>
+    <filesystem_caches_path>/tmp/filesystem_caches/</filesystem_caches_path>
+    <custom_cached_disks_base_directory replace="replace">/tmp/filesystem_caches/</custom_cached_disks_base_directory>
+</clickhouse>
diff --git a/src/Access/Common/AccessFlags.cpp b/src/Access/Common/AccessFlags.cpp
index 904018b07056..d3b6d5a98188 100644
--- a/src/Access/Common/AccessFlags.cpp
+++ b/src/Access/Common/AccessFlags.cpp
@@ -1,7 +1,6 @@
 #include <Access/Common/AccessFlags.h>
 #include <Access/Common/AccessType.h>
 #include <Common/Exception.h>
-#include <base/types.h>
 #include <boost/algorithm/string/case_conv.hpp>
 #include <boost/algorithm/string/replace.hpp>
 #include <boost/algorithm/string/split.hpp>
diff --git a/src/Client/ClientBase.cpp b/src/Client/ClientBase.cpp
index 6c39c3ebc95d..48962880b8f2 100644
--- a/src/Client/ClientBase.cpp
+++ b/src/Client/ClientBase.cpp
@@ -1915,7 +1915,7 @@ void ClientBase::processParsedSingleQuery(const String & full_query, const Strin
             for (const auto & [name, value] : set_query->query_parameters)
                 query_parameters.insert_or_assign(name, value);
 
-            global_context->addQueryParameters(set_query->query_parameters);
+            global_context->addQueryParameters(NameToNameMap{set_query->query_parameters.begin(), set_query->query_parameters.end()});
         }
         if (const auto * use_query = parsed_query->as<ASTUseQuery>())
         {
diff --git a/src/IO/WriteHelpers.cpp b/src/IO/WriteHelpers.cpp
index 9dddcd4b60f5..88c706a590f1 100644
--- a/src/IO/WriteHelpers.cpp
+++ b/src/IO/WriteHelpers.cpp
@@ -91,7 +91,8 @@ static inline void writeProbablyQuotedStringImpl(StringRef s, WriteBuffer & buf,
     if (isValidIdentifier(s.toView())
         /// This are valid identifiers but are problematic if present unquoted in SQL query.
         && !(s.size == strlen("distinct") && 0 == strncasecmp(s.data, "distinct", strlen("distinct")))
-        && !(s.size == strlen("all") && 0 == strncasecmp(s.data, "all", strlen("all"))))
+        && !(s.size == strlen("all") && 0 == strncasecmp(s.data, "all", strlen("all")))
+        && !(s.size == strlen("table") && 0 == strncasecmp(s.data, "table", strlen("table"))))
     {
         writeString(s, buf);
     }
diff --git a/src/Interpreters/InterpreterSetQuery.cpp b/src/Interpreters/InterpreterSetQuery.cpp
index 261c781e0baa..7e68fc5c4c15 100644
--- a/src/Interpreters/InterpreterSetQuery.cpp
+++ b/src/Interpreters/InterpreterSetQuery.cpp
@@ -19,7 +19,7 @@ BlockIO InterpreterSetQuery::execute()
     getContext()->checkSettingsConstraints(ast.changes, SettingSource::QUERY);
     auto session_context = getContext()->getSessionContext();
     session_context->applySettingsChanges(ast.changes);
-    session_context->addQueryParameters(ast.query_parameters);
+    session_context->addQueryParameters(NameToNameMap{ast.query_parameters.begin(), ast.query_parameters.end()});
     session_context->resetSettingsToDefaultValue(ast.default_settings);
     return {};
 }
diff --git a/src/Interpreters/InterpreterSystemQuery.cpp b/src/Interpreters/InterpreterSystemQuery.cpp
index 266b2ac9fc92..a078d99facfd 100644
--- a/src/Interpreters/InterpreterSystemQuery.cpp
+++ b/src/Interpreters/InterpreterSystemQuery.cpp
@@ -20,7 +20,6 @@
 #include <Interpreters/ActionLocksManager.h>
 #include <Interpreters/InterpreterCreateQuery.h>
 #include <Interpreters/InterpreterRenameQuery.h>
-#include <Interpreters/QueryLog.h>
 #include <Interpreters/executeDDLQueryOnCluster.h>
 #include <Interpreters/QueryThreadLog.h>
 #include <Interpreters/QueryViewsLog.h>
@@ -36,7 +35,6 @@
 #include <Interpreters/ProcessorsProfileLog.h>
 #include <Interpreters/AsynchronousInsertLog.h>
 #include <Interpreters/BackupLog.h>
-#include <IO/S3/BlobStorageLogWriter.h>
 #include <Interpreters/JIT/CompiledExpressionCache.h>
 #include <Interpreters/TransactionLog.h>
 #include <Interpreters/AsynchronousInsertQueue.h>
@@ -44,7 +42,6 @@
 #include <Access/AccessControl.h>
 #include <Access/ContextAccess.h>
 #include <Access/Common/AllowedClientHosts.h>
-#include <Databases/IDatabase.h>
 #include <Databases/DatabaseReplicated.h>
 #include <Disks/ObjectStorages/IMetadataStorage.h>
 #include <Storages/StorageDistributed.h>
@@ -362,18 +359,22 @@ BlockIO InterpreterSystemQuery::execute()
             getContext()->checkAccess(AccessType::SYSTEM_DROP_QUERY_CACHE);
             getContext()->clearQueryCache();
             break;
-#if USE_EMBEDDED_COMPILER
         case Type::DROP_COMPILED_EXPRESSION_CACHE:
+#if USE_EMBEDDED_COMPILER
             getContext()->checkAccess(AccessType::SYSTEM_DROP_COMPILED_EXPRESSION_CACHE);
             if (auto * cache = CompiledExpressionCacheFactory::instance().tryGetCache())
                 cache->clear();
             break;
+#else
+            throw Exception(ErrorCodes::SUPPORT_IS_DISABLED, "The server was compiled without the support for JIT compilation");
 #endif
-#if USE_AWS_S3
         case Type::DROP_S3_CLIENT_CACHE:
+#if USE_AWS_S3
             getContext()->checkAccess(AccessType::SYSTEM_DROP_S3_CLIENT_CACHE);
             S3::ClientCacheRegistry::instance().clearCacheForAll();
             break;
+#else
+            throw Exception(ErrorCodes::SUPPORT_IS_DISABLED, "The server was compiled without the support for AWS S3");
 #endif
 
         case Type::DROP_FILESYSTEM_CACHE:
@@ -768,6 +769,12 @@ BlockIO InterpreterSystemQuery::execute()
             flushJemallocProfile("/tmp/jemalloc_clickhouse");
             break;
         }
+#else
+        case Type::JEMALLOC_PURGE:
+        case Type::JEMALLOC_ENABLE_PROFILE:
+        case Type::JEMALLOC_DISABLE_PROFILE:
+        case Type::JEMALLOC_FLUSH_PROFILE:
+            throw Exception(ErrorCodes::SUPPORT_IS_DISABLED, "The server was compiled without JEMalloc");
 #endif
         default:
             throw Exception(ErrorCodes::BAD_ARGUMENTS, "Unknown type of SYSTEM query");
@@ -1081,7 +1088,9 @@ void InterpreterSystemQuery::syncReplica(ASTSystemQuery & query)
     {
         LOG_TRACE(log, "Synchronizing entries in replica's queue with table's log and waiting for current last entry to be processed");
         auto sync_timeout = getContext()->getSettingsRef().receive_timeout.totalMilliseconds();
-        if (!storage_replicated->waitForProcessingQueue(sync_timeout, query.sync_replica_mode, query.src_replicas))
+
+        std::unordered_set<std::string> replicas(query.src_replicas.begin(), query.src_replicas.end());
+        if (!storage_replicated->waitForProcessingQueue(sync_timeout, query.sync_replica_mode, replicas))
         {
             LOG_ERROR(log, "SYNC REPLICA {}: Timed out.", table_id.getNameForLogs());
             throw Exception(ErrorCodes::TIMEOUT_EXCEEDED, "SYNC REPLICA {}: command timed out. " \
@@ -1186,9 +1195,7 @@ AccessRightsElements InterpreterSystemQuery::getRequiredAccessForDDLOnCluster()
         case Type::DROP_MARK_CACHE:
         case Type::DROP_MMAP_CACHE:
         case Type::DROP_QUERY_CACHE:
-#if USE_EMBEDDED_COMPILER
         case Type::DROP_COMPILED_EXPRESSION_CACHE:
-#endif
         case Type::DROP_UNCOMPRESSED_CACHE:
         case Type::DROP_INDEX_MARK_CACHE:
         case Type::DROP_INDEX_UNCOMPRESSED_CACHE:
@@ -1196,9 +1203,7 @@ AccessRightsElements InterpreterSystemQuery::getRequiredAccessForDDLOnCluster()
         case Type::SYNC_FILESYSTEM_CACHE:
         case Type::DROP_SCHEMA_CACHE:
         case Type::DROP_FORMAT_SCHEMA_CACHE:
-#if USE_AWS_S3
         case Type::DROP_S3_CLIENT_CACHE:
-#endif
         {
             required_access.emplace_back(AccessType::SYSTEM_DROP_CACHE);
             break;
@@ -1414,7 +1419,6 @@ AccessRightsElements InterpreterSystemQuery::getRequiredAccessForDDLOnCluster()
             required_access.emplace_back(AccessType::SYSTEM_LISTEN);
             break;
         }
-#if USE_JEMALLOC
         case Type::JEMALLOC_PURGE:
         case Type::JEMALLOC_ENABLE_PROFILE:
         case Type::JEMALLOC_DISABLE_PROFILE:
@@ -1423,7 +1427,6 @@ AccessRightsElements InterpreterSystemQuery::getRequiredAccessForDDLOnCluster()
             required_access.emplace_back(AccessType::SYSTEM_JEMALLOC);
             break;
         }
-#endif
         case Type::STOP_THREAD_FUZZER:
         case Type::START_THREAD_FUZZER:
         case Type::ENABLE_FAILPOINT:
diff --git a/src/Interpreters/executeQuery.cpp b/src/Interpreters/executeQuery.cpp
index 49572342f4ea..46e3e3344cfb 100644
--- a/src/Interpreters/executeQuery.cpp
+++ b/src/Interpreters/executeQuery.cpp
@@ -103,6 +103,7 @@ namespace ErrorCodes
     extern const int NOT_IMPLEMENTED;
     extern const int QUERY_WAS_CANCELLED;
     extern const int INCORRECT_DATA;
+    extern const int SYNTAX_ERROR;
 }
 
 namespace FailPoints
@@ -726,16 +727,32 @@ static std::tuple<ASTPtr, BlockIO> executeQueryImpl(
             /// TODO: parser should fail early when max_query_size limit is reached.
             ast = parseQuery(parser, begin, end, "", max_query_size, settings.max_parser_depth);
 
-#if 0
+#ifndef NDEBUG
             /// Verify that AST formatting is consistent:
             /// If you format AST, parse it back, and format it again, you get the same string.
 
             String formatted1 = ast->formatWithPossiblyHidingSensitiveData(0, true, true);
 
-            ASTPtr ast2 = parseQuery(parser,
-                formatted1.data(),
-                formatted1.data() + formatted1.size(),
-                "", max_query_size, settings.max_parser_depth);
+            /// The query can become more verbose after formatting, so:
+            size_t new_max_query_size = max_query_size > 0 ? (1000 + 2 * max_query_size) : 0;
+
+            ASTPtr ast2;
+            try
+            {
+                ast2 = parseQuery(parser,
+                    formatted1.data(),
+                    formatted1.data() + formatted1.size(),
+                    "", new_max_query_size, settings.max_parser_depth);
+            }
+            catch (const Exception & e)
+            {
+                if (e.code() == ErrorCodes::SYNTAX_ERROR)
+                    throw Exception(ErrorCodes::LOGICAL_ERROR,
+                        "Inconsistent AST formatting: the query:
{}
cannot parse.",
+                        formatted1);
+                else
+                    throw;
+            }
 
             chassert(ast2);
 
diff --git a/src/Parsers/ASTAlterQuery.cpp b/src/Parsers/ASTAlterQuery.cpp
index d22314bbaaad..605cc4ade42e 100644
--- a/src/Parsers/ASTAlterQuery.cpp
+++ b/src/Parsers/ASTAlterQuery.cpp
@@ -456,13 +456,13 @@ void ASTAlterCommand::formatImpl(const FormatSettings & settings, FormatState &
     }
     else if (type == ASTAlterCommand::MODIFY_QUERY)
     {
-        settings.ostr << (settings.hilite ? hilite_keyword : "") << "MODIFY QUERY " << settings.nl_or_ws
+        settings.ostr << (settings.hilite ? hilite_keyword : "") << "MODIFY QUERY" << settings.nl_or_ws
                       << (settings.hilite ? hilite_none : "");
         select->formatImpl(settings, state, frame);
     }
     else if (type == ASTAlterCommand::MODIFY_REFRESH)
     {
-        settings.ostr << (settings.hilite ? hilite_keyword : "") << "MODIFY REFRESH " << settings.nl_or_ws
+        settings.ostr << (settings.hilite ? hilite_keyword : "") << "MODIFY" << settings.nl_or_ws
                       << (settings.hilite ? hilite_none : "");
         refresh->formatImpl(settings, state, frame);
     }
@@ -630,16 +630,19 @@ void ASTAlterQuery::formatQueryImpl(const FormatSettings & settings, FormatState
 
     if (table)
     {
+        settings.ostr << indent_str;
         if (database)
         {
-            settings.ostr << indent_str << backQuoteIfNeed(getDatabase());
-            settings.ostr << ".";
+            database->formatImpl(settings, state, frame);
+            settings.ostr << '.';
         }
-        settings.ostr << indent_str << backQuoteIfNeed(getTable());
+
+        table->formatImpl(settings, state, frame);
     }
     else if (alter_object == AlterObjectType::DATABASE && database)
     {
-        settings.ostr << indent_str << backQuoteIfNeed(getDatabase());
+        settings.ostr << indent_str;
+        database->formatImpl(settings, state, frame);
     }
 
     formatOnCluster(settings);
diff --git a/src/Parsers/ASTCheckQuery.h b/src/Parsers/ASTCheckQuery.h
index c9a17ca4a549..5e9032e77fb7 100644
--- a/src/Parsers/ASTCheckQuery.h
+++ b/src/Parsers/ASTCheckQuery.h
@@ -49,10 +49,11 @@ struct ASTCheckTableQuery : public ASTQueryWithTableAndOutput
         {
             if (database)
             {
-                settings.ostr << (settings.hilite ? hilite_keyword : "") << indent_str << backQuoteIfNeed(getDatabase()) << (settings.hilite ? hilite_none : "");
-                settings.ostr << ".";
+                database->formatImpl(settings, state, frame);
+                settings.ostr << '.';
             }
-            settings.ostr << (settings.hilite ? hilite_keyword : "") << indent_str << backQuoteIfNeed(getTable()) << (settings.hilite ? hilite_none : "");
+
+            table->formatImpl(settings, state, frame);
         }
 
         if (partition)
diff --git a/src/Parsers/ASTCreateIndexQuery.cpp b/src/Parsers/ASTCreateIndexQuery.cpp
index 4e03dad5b5b7..84493ff22f15 100644
--- a/src/Parsers/ASTCreateIndexQuery.cpp
+++ b/src/Parsers/ASTCreateIndexQuery.cpp
@@ -48,10 +48,11 @@ void ASTCreateIndexQuery::formatQueryImpl(const FormatSettings & settings, Forma
     {
         if (database)
         {
-            settings.ostr << indent_str << backQuoteIfNeed(getDatabase());
-            settings.ostr << ".";
+            database->formatImpl(settings, state, frame);
+            settings.ostr << '.';
         }
-        settings.ostr << indent_str << backQuoteIfNeed(getTable());
+
+        table->formatImpl(settings, state, frame);
     }
 
     formatOnCluster(settings);
diff --git a/src/Parsers/ASTCreateIndexQuery.h b/src/Parsers/ASTCreateIndexQuery.h
index b7577f2634e8..f5e35e270e94 100644
--- a/src/Parsers/ASTCreateIndexQuery.h
+++ b/src/Parsers/ASTCreateIndexQuery.h
@@ -16,7 +16,7 @@ class ASTCreateIndexQuery : public ASTQueryWithTableAndOutput, public ASTQueryWi
 public:
     ASTPtr index_name;
 
-    /// Stores the IndexDeclaration here.
+    /// Stores the ASTIndexDeclaration here.
     ASTPtr index_decl;
 
     bool if_not_exists{false};
diff --git a/src/Parsers/ASTCreateQuery.cpp b/src/Parsers/ASTCreateQuery.cpp
index 129ce1b0ee34..e8ccb8e9377f 100644
--- a/src/Parsers/ASTCreateQuery.cpp
+++ b/src/Parsers/ASTCreateQuery.cpp
@@ -272,8 +272,9 @@ void ASTCreateQuery::formatQueryImpl(const FormatSettings & settings, FormatStat
         settings.ostr << (settings.hilite ? hilite_keyword : "")
             << (attach ? "ATTACH DATABASE " : "CREATE DATABASE ")
             << (if_not_exists ? "IF NOT EXISTS " : "")
-            << (settings.hilite ? hilite_none : "")
-            << backQuoteIfNeed(getDatabase());
+            << (settings.hilite ? hilite_none : "");
+
+        database->formatImpl(settings, state, frame);
 
         if (uuid != UUIDHelpers::Nil)
         {
@@ -328,8 +329,15 @@ void ASTCreateQuery::formatQueryImpl(const FormatSettings & settings, FormatStat
         settings.ostr << (settings.hilite ? hilite_keyword : "") << (temporary ? "TEMPORARY " : "")
                 << what << " "
                 << (if_not_exists ? "IF NOT EXISTS " : "")
-            << (settings.hilite ? hilite_none : "")
-            << (database ? backQuoteIfNeed(getDatabase()) + "." : "") << backQuoteIfNeed(getTable());
+            << (settings.hilite ? hilite_none : "");
+
+        if (database)
+        {
+            database->formatImpl(settings, state, frame);
+            settings.ostr << '.';
+        }
+
+        table->formatImpl(settings, state, frame);
 
         if (uuid != UUIDHelpers::Nil)
             settings.ostr << (settings.hilite ? hilite_keyword : "") << " UUID " << (settings.hilite ? hilite_none : "")
@@ -361,8 +369,16 @@ void ASTCreateQuery::formatQueryImpl(const FormatSettings & settings, FormatStat
 
         /// Always DICTIONARY
         settings.ostr << (settings.hilite ? hilite_keyword : "") << action << " DICTIONARY "
-                      << (if_not_exists ? "IF NOT EXISTS " : "") << (settings.hilite ? hilite_none : "")
-                      << (database ? backQuoteIfNeed(getDatabase()) + "." : "") << backQuoteIfNeed(getTable());
+                      << (if_not_exists ? "IF NOT EXISTS " : "") << (settings.hilite ? hilite_none : "");
+
+        if (database)
+        {
+            database->formatImpl(settings, state, frame);
+            settings.ostr << '.';
+        }
+
+        table->formatImpl(settings, state, frame);
+
         if (uuid != UUIDHelpers::Nil)
             settings.ostr << (settings.hilite ? hilite_keyword : "") << " UUID " << (settings.hilite ? hilite_none : "")
                           << quoteString(toString(uuid));
diff --git a/src/Parsers/ASTDeleteQuery.cpp b/src/Parsers/ASTDeleteQuery.cpp
index 09dc4b936ae3..1e8303dac620 100644
--- a/src/Parsers/ASTDeleteQuery.cpp
+++ b/src/Parsers/ASTDeleteQuery.cpp
@@ -36,10 +36,11 @@ void ASTDeleteQuery::formatQueryImpl(const FormatSettings & settings, FormatStat
 
     if (database)
     {
-        settings.ostr << backQuoteIfNeed(getDatabase());
-        settings.ostr << ".";
+        database->formatImpl(settings, state, frame);
+        settings.ostr << '.';
     }
-    settings.ostr << backQuoteIfNeed(getTable());
+
+    table->formatImpl(settings, state, frame);
 
     formatOnCluster(settings);
 
diff --git a/src/Parsers/ASTDescribeCacheQuery.cpp b/src/Parsers/ASTDescribeCacheQuery.cpp
new file mode 100644
index 000000000000..6daedfdb3a45
--- /dev/null
+++ b/src/Parsers/ASTDescribeCacheQuery.cpp
@@ -0,0 +1,23 @@
+#include <Parsers/ASTDescribeCacheQuery.h>
+#include <Common/quoteString.h>
+
+
+namespace DB
+{
+
+String ASTDescribeCacheQuery::getID(char) const { return "DescribeCacheQuery"; }
+
+ASTPtr ASTDescribeCacheQuery::clone() const
+{
+    auto res = std::make_shared<ASTDescribeCacheQuery>(*this);
+    cloneOutputOptions(*res);
+    return res;
+}
+
+void ASTDescribeCacheQuery::formatQueryImpl(const FormatSettings & settings, FormatState &, FormatStateStacked) const
+{
+    settings.ostr << (settings.hilite ? hilite_keyword : "") << "DESCRIBE FILESYSTEM CACHE" << (settings.hilite ? hilite_none : "")
+        << " " << quoteString(cache_name);
+}
+
+}
diff --git a/src/Parsers/ASTDescribeCacheQuery.h b/src/Parsers/ASTDescribeCacheQuery.h
index 3d1cbaef070c..55b841e03f66 100644
--- a/src/Parsers/ASTDescribeCacheQuery.h
+++ b/src/Parsers/ASTDescribeCacheQuery.h
@@ -1,6 +1,8 @@
 #pragma once
+
 #include <Parsers/ASTQueryWithOutput.h>
 
+
 namespace DB
 {
 
@@ -9,20 +11,11 @@ class ASTDescribeCacheQuery : public ASTQueryWithOutput
 public:
     String cache_name;
 
-    String getID(char) const override { return "DescribeCacheQuery"; }
-
-    ASTPtr clone() const override
-    {
-        auto res = std::make_shared<ASTDescribeCacheQuery>(*this);
-        cloneOutputOptions(*res);
-        return res;
-    }
+    String getID(char) const override;
+    ASTPtr clone() const override;
 
 protected:
-    void formatQueryImpl(const FormatSettings & settings, FormatState &, FormatStateStacked) const override
-    {
-        settings.ostr << (settings.hilite ? hilite_keyword : "") << "DESCRIBE FILESYSTEM CACHE" << (settings.hilite ? hilite_none : "") << " " << cache_name;
-    }
+    void formatQueryImpl(const FormatSettings & settings, FormatState &, FormatStateStacked) const override;
 };
 
 }
diff --git a/src/Parsers/ASTDropIndexQuery.cpp b/src/Parsers/ASTDropIndexQuery.cpp
index 6866770d2ab3..1a1481ea27f4 100644
--- a/src/Parsers/ASTDropIndexQuery.cpp
+++ b/src/Parsers/ASTDropIndexQuery.cpp
@@ -43,10 +43,11 @@ void ASTDropIndexQuery::formatQueryImpl(const FormatSettings & settings, FormatS
     {
         if (database)
         {
-            settings.ostr << indent_str << backQuoteIfNeed(getDatabase());
-            settings.ostr << ".";
+            database->formatImpl(settings, state, frame);
+            settings.ostr << '.';
         }
-        settings.ostr << indent_str << backQuoteIfNeed(getTable());
+
+        table->formatImpl(settings, state, frame);
     }
 
     formatOnCluster(settings);
diff --git a/src/Parsers/ASTDropQuery.cpp b/src/Parsers/ASTDropQuery.cpp
index ad1294c6e717..f41f28f745d0 100644
--- a/src/Parsers/ASTDropQuery.cpp
+++ b/src/Parsers/ASTDropQuery.cpp
@@ -32,7 +32,7 @@ ASTPtr ASTDropQuery::clone() const
     return res;
 }
 
-void ASTDropQuery::formatQueryImpl(const FormatSettings & settings, FormatState &, FormatStateStacked) const
+void ASTDropQuery::formatQueryImpl(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const
 {
     settings.ostr << (settings.hilite ? hilite_keyword : "");
     if (kind == ASTDropQuery::Kind::Drop)
@@ -47,7 +47,6 @@ void ASTDropQuery::formatQueryImpl(const FormatSettings & settings, FormatState
     if (temporary)
         settings.ostr << "TEMPORARY ";
 
-
     if (!table && database)
         settings.ostr << "DATABASE ";
     else if (is_dictionary)
@@ -66,9 +65,19 @@ void ASTDropQuery::formatQueryImpl(const FormatSettings & settings, FormatState
     settings.ostr << (settings.hilite ? hilite_none : "");
 
     if (!table && database)
-        settings.ostr << backQuoteIfNeed(getDatabase());
+    {
+        database->formatImpl(settings, state, frame);
+    }
     else
-        settings.ostr << (database ? backQuoteIfNeed(getDatabase()) + "." : "") << backQuoteIfNeed(getTable());
+    {
+        if (database)
+        {
+            database->formatImpl(settings, state, frame);
+            settings.ostr << '.';
+        }
+
+        table->formatImpl(settings, state, frame);
+    }
 
     formatOnCluster(settings);
 
diff --git a/src/Parsers/ASTExpressionList.cpp b/src/Parsers/ASTExpressionList.cpp
index 2590c6b29417..61ac482af827 100644
--- a/src/Parsers/ASTExpressionList.cpp
+++ b/src/Parsers/ASTExpressionList.cpp
@@ -17,21 +17,23 @@ void ASTExpressionList::formatImpl(const FormatSettings & settings, FormatState
     if (frame.expression_list_prepend_whitespace)
         settings.ostr << ' ';
 
-    for (ASTs::const_iterator it = children.begin(); it != children.end(); ++it)
+    for (size_t i = 0, size = children.size(); i < size; ++i)
     {
-        if (it != children.begin())
+        if (i)
         {
             if (separator)
                 settings.ostr << separator;
             settings.ostr << ' ';
         }
 
+        FormatStateStacked frame_nested = frame;
+        frame_nested.surround_each_list_element_with_parens = false;
+        frame_nested.list_element_index = i;
+
         if (frame.surround_each_list_element_with_parens)
             settings.ostr << "(";
 
-        FormatStateStacked frame_nested = frame;
-        frame_nested.surround_each_list_element_with_parens = false;
-        (*it)->formatImpl(settings, state, frame_nested);
+        children[i]->formatImpl(settings, state, frame_nested);
 
         if (frame.surround_each_list_element_with_parens)
             settings.ostr << ")";
@@ -50,25 +52,23 @@ void ASTExpressionList::formatImplMultiline(const FormatSettings & settings, For
 
     ++frame.indent;
 
-    for (ASTs::const_iterator it = children.begin(); it != children.end(); ++it)
+    for (size_t i = 0, size = children.size(); i < size; ++i)
     {
-        if (it != children.begin())
-        {
-            if (separator)
-                settings.ostr << separator;
-        }
+        if (i && separator)
+            settings.ostr << separator;
 
-        if (children.size() > 1 || frame.expression_list_always_start_on_new_line)
+        if (size > 1 || frame.expression_list_always_start_on_new_line)
             settings.ostr << indent_str;
 
         FormatStateStacked frame_nested = frame;
         frame_nested.expression_list_always_start_on_new_line = false;
         frame_nested.surround_each_list_element_with_parens = false;
+        frame_nested.list_element_index = i;
 
         if (frame.surround_each_list_element_with_parens)
             settings.ostr << "(";
 
-        (*it)->formatImpl(settings, state, frame_nested);
+        children[i]->formatImpl(settings, state, frame_nested);
 
         if (frame.surround_each_list_element_with_parens)
             settings.ostr << ")";
diff --git a/src/Parsers/ASTFunction.cpp b/src/Parsers/ASTFunction.cpp
index ba4c7db96e63..69a2e7c9ada8 100644
--- a/src/Parsers/ASTFunction.cpp
+++ b/src/Parsers/ASTFunction.cpp
@@ -813,8 +813,7 @@ void ASTFunction::formatImplWithoutAlias(const FormatSettings & settings, Format
 
     /// Should this function to be written as operator?
     bool written = false;
-
-    if (arguments && !parameters)
+    if (arguments && !parameters && nulls_action == NullsAction::EMPTY)
     {
         /// Unary prefix operators.
         if (arguments->children.size() == 1)
@@ -1049,8 +1048,10 @@ void ASTFunction::formatImplWithoutAlias(const FormatSettings & settings, Format
             {
                 /// Special case: zero elements tuple in lhs of lambda is printed as ().
                 /// Special case: one-element tuple in lhs of lambda is printed as its element.
+                /// If lambda function is not the first element in the list, it has to be put in parentheses.
+                /// Example: f(x, (y -> z)) should not be printed as f((x, y) -> z).
 
-                if (frame.need_parens)
+                if (frame.need_parens || frame.list_element_index > 0)
                     settings.ostr << '(';
 
                 if (first_argument_is_tuple
@@ -1067,7 +1068,7 @@ void ASTFunction::formatImplWithoutAlias(const FormatSettings & settings, Format
 
                 settings.ostr << (settings.hilite ? hilite_operator : "") << " -> " << (settings.hilite ? hilite_none : "");
                 arguments->children[1]->formatImpl(settings, state, nested_need_parens);
-                if (frame.need_parens)
+                if (frame.need_parens || frame.list_element_index > 0)
                     settings.ostr << ')';
                 written = true;
             }
@@ -1244,6 +1245,7 @@ void ASTFunction::formatImplWithoutAlias(const FormatSettings & settings, Format
                 continue;
             }
 
+            nested_dont_need_parens.list_element_index = i;
             argument->formatImpl(settings, state, nested_dont_need_parens);
         }
     }
diff --git a/src/Parsers/ASTIndexDeclaration.cpp b/src/Parsers/ASTIndexDeclaration.cpp
index 12d59681cc39..8dac5389c803 100644
--- a/src/Parsers/ASTIndexDeclaration.cpp
+++ b/src/Parsers/ASTIndexDeclaration.cpp
@@ -36,7 +36,7 @@ void ASTIndexDeclaration::formatImpl(const FormatSettings & s, FormatState & sta
                 s.ostr << ")";
             }
             else
-            expr->formatImpl(s, state, frame);
+                expr->formatImpl(s, state, frame);
         }
         else
         {
@@ -59,4 +59,3 @@ void ASTIndexDeclaration::formatImpl(const FormatSettings & s, FormatState & sta
 }
 
 }
-
diff --git a/src/Parsers/ASTInsertQuery.cpp b/src/Parsers/ASTInsertQuery.cpp
index 88e087dd4eeb..eb4bcce65785 100644
--- a/src/Parsers/ASTInsertQuery.cpp
+++ b/src/Parsers/ASTInsertQuery.cpp
@@ -68,8 +68,13 @@ void ASTInsertQuery::formatImpl(const FormatSettings & settings, FormatState & s
     }
     else
     {
-        settings.ostr << (settings.hilite ? hilite_none : "")
-                      << (database ? backQuoteIfNeed(getDatabase()) + "." : "") << backQuoteIfNeed(getTable());
+        if (database)
+        {
+            database->formatImpl(settings, state, frame);
+            settings.ostr << '.';
+        }
+
+        table->formatImpl(settings, state, frame);
     }
 
     if (columns)
diff --git a/src/Parsers/ASTOptimizeQuery.cpp b/src/Parsers/ASTOptimizeQuery.cpp
index 173310f79309..d9406a9eca07 100644
--- a/src/Parsers/ASTOptimizeQuery.cpp
+++ b/src/Parsers/ASTOptimizeQuery.cpp
@@ -7,8 +7,15 @@ namespace DB
 
 void ASTOptimizeQuery::formatQueryImpl(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const
 {
-    settings.ostr << (settings.hilite ? hilite_keyword : "") << "OPTIMIZE TABLE " << (settings.hilite ? hilite_none : "")
-                  << (database ? backQuoteIfNeed(getDatabase()) + "." : "") << backQuoteIfNeed(getTable());
+    settings.ostr << (settings.hilite ? hilite_keyword : "") << "OPTIMIZE TABLE " << (settings.hilite ? hilite_none : "");
+
+    if (database)
+    {
+        database->formatImpl(settings, state, frame);
+        settings.ostr << '.';
+    }
+
+    table->formatImpl(settings, state, frame);
 
     formatOnCluster(settings);
 
diff --git a/src/Parsers/ASTQueryWithTableAndOutput.cpp b/src/Parsers/ASTQueryWithTableAndOutput.cpp
index a216aeaa11f1..85bfe2ae80fc 100644
--- a/src/Parsers/ASTQueryWithTableAndOutput.cpp
+++ b/src/Parsers/ASTQueryWithTableAndOutput.cpp
@@ -64,11 +64,5 @@ void ASTQueryWithTableAndOutput::cloneTableOptions(ASTQueryWithTableAndOutput &
         cloned.children.push_back(cloned.table);
     }
 }
-void ASTQueryWithTableAndOutput::formatHelper(const FormatSettings & settings, const char * name) const
-{
-    settings.ostr << (settings.hilite ? hilite_keyword : "") << name << " " << (settings.hilite ? hilite_none : "");
-    settings.ostr << (database ? backQuoteIfNeed(getDatabase()) + "." : "") << backQuoteIfNeed(getTable());
-}
 
 }
-
diff --git a/src/Parsers/ASTQueryWithTableAndOutput.h b/src/Parsers/ASTQueryWithTableAndOutput.h
index 10f0e76f29c0..1b8621fb63b6 100644
--- a/src/Parsers/ASTQueryWithTableAndOutput.h
+++ b/src/Parsers/ASTQueryWithTableAndOutput.h
@@ -28,9 +28,6 @@ class ASTQueryWithTableAndOutput : public ASTQueryWithOutput
     void setTable(const String & name);
 
     void cloneTableOptions(ASTQueryWithTableAndOutput & cloned) const;
-
-protected:
-    void formatHelper(const FormatSettings & settings, const char * name) const;
 };
 
 
@@ -52,9 +49,19 @@ class ASTQueryWithTableAndOutputImpl : public ASTQueryWithTableAndOutput
     QueryKind getQueryKind() const override { return QueryKind::Show; }
 
 protected:
-    void formatQueryImpl(const FormatSettings & settings, FormatState &, FormatStateStacked) const override
+    void formatQueryImpl(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const override
     {
-        formatHelper(settings, temporary ? AstIDAndQueryNames::QueryTemporary : AstIDAndQueryNames::Query);
+        settings.ostr << (settings.hilite ? hilite_keyword : "")
+            << (temporary ? AstIDAndQueryNames::QueryTemporary : AstIDAndQueryNames::Query)
+            << " " << (settings.hilite ? hilite_none : "");
+
+        if (database)
+        {
+            database->formatImpl(settings, state, frame);
+            settings.ostr << '.';
+        }
+
+        table->formatImpl(settings, state, frame);
     }
 };
 
diff --git a/src/Parsers/ASTRenameQuery.h b/src/Parsers/ASTRenameQuery.h
index 5d07cb976af7..901f0121a281 100644
--- a/src/Parsers/ASTRenameQuery.h
+++ b/src/Parsers/ASTRenameQuery.h
@@ -84,7 +84,7 @@ class ASTRenameQuery : public ASTQueryWithOutput, public ASTQueryWithOnCluster
     QueryKind getQueryKind() const override { return QueryKind::Rename; }
 
 protected:
-    void formatQueryImpl(const FormatSettings & settings, FormatState &, FormatStateStacked) const override
+    void formatQueryImpl(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const override
     {
         if (database)
         {
@@ -93,9 +93,9 @@ class ASTRenameQuery : public ASTQueryWithOutput, public ASTQueryWithOnCluster
             if (elements.at(0).if_exists)
                 settings.ostr << (settings.hilite ? hilite_keyword : "") << "IF EXISTS " << (settings.hilite ? hilite_none : "");
 
-            settings.ostr << backQuoteIfNeed(elements.at(0).from.getDatabase());
+            elements.at(0).from.database->formatImpl(settings, state, frame);
             settings.ostr << (settings.hilite ? hilite_keyword : "") << " TO " << (settings.hilite ? hilite_none : "");
-            settings.ostr << backQuoteIfNeed(elements.at(0).to.getDatabase());
+            elements.at(0).to.database->formatImpl(settings, state, frame);
             formatOnCluster(settings);
             return;
         }
@@ -119,9 +119,26 @@ class ASTRenameQuery : public ASTQueryWithOutput, public ASTQueryWithOnCluster
 
             if (it->if_exists)
                 settings.ostr << (settings.hilite ? hilite_keyword : "") << "IF EXISTS " << (settings.hilite ? hilite_none : "");
-            settings.ostr << (it->from.database ? backQuoteIfNeed(it->from.getDatabase()) + "." : "") << backQuoteIfNeed(it->from.getTable())
-                << (settings.hilite ? hilite_keyword : "") << (exchange ? " AND " : " TO ") << (settings.hilite ? hilite_none : "")
-                << (it->to.database ? backQuoteIfNeed(it->to.getDatabase()) + "." : "") << backQuoteIfNeed(it->to.getTable());
+
+
+            if (it->from.database)
+            {
+                it->from.database->formatImpl(settings, state, frame);
+                settings.ostr << '.';
+            }
+
+            it->from.table->formatImpl(settings, state, frame);
+
+            settings.ostr << (settings.hilite ? hilite_keyword : "") << (exchange ? " AND " : " TO ") << (settings.hilite ? hilite_none : "");
+
+            if (it->to.database)
+            {
+                it->to.database->formatImpl(settings, state, frame);
+                settings.ostr << '.';
+            }
+
+            it->to.table->formatImpl(settings, state, frame);
+
         }
 
         formatOnCluster(settings);
diff --git a/src/Parsers/ASTSelectQuery.cpp b/src/Parsers/ASTSelectQuery.cpp
index 2115de1c1246..586477e1cfdc 100644
--- a/src/Parsers/ASTSelectQuery.cpp
+++ b/src/Parsers/ASTSelectQuery.cpp
@@ -108,12 +108,6 @@ void ASTSelectQuery::formatImpl(const FormatSettings & s, FormatState & state, F
     if (group_by_all)
         s.ostr << (s.hilite ? hilite_keyword : "") << s.nl_or_ws << indent_str << "GROUP BY ALL" << (s.hilite ? hilite_none : "");
 
-    if (group_by_with_rollup)
-        s.ostr << (s.hilite ? hilite_keyword : "") << s.nl_or_ws << indent_str << (s.one_line ? "" : "    ") << "WITH ROLLUP" << (s.hilite ? hilite_none : "");
-
-    if (group_by_with_cube)
-        s.ostr << (s.hilite ? hilite_keyword : "") << s.nl_or_ws << indent_str << (s.one_line ? "" : "    ") << "WITH CUBE" << (s.hilite ? hilite_none : "");
-
     if (group_by_with_grouping_sets && groupBy())
     {
         auto nested_frame = frame;
@@ -128,6 +122,12 @@ void ASTSelectQuery::formatImpl(const FormatSettings & s, FormatState & state, F
         s.ostr << ")";
     }
 
+    if (group_by_with_rollup)
+        s.ostr << (s.hilite ? hilite_keyword : "") << s.nl_or_ws << indent_str << (s.one_line ? "" : "    ") << "WITH ROLLUP" << (s.hilite ? hilite_none : "");
+
+    if (group_by_with_cube)
+        s.ostr << (s.hilite ? hilite_keyword : "") << s.nl_or_ws << indent_str << (s.one_line ? "" : "    ") << "WITH CUBE" << (s.hilite ? hilite_none : "");
+
     if (group_by_with_totals)
         s.ostr << (s.hilite ? hilite_keyword : "") << s.nl_or_ws << indent_str << (s.one_line ? "" : "    ") << "WITH TOTALS" << (s.hilite ? hilite_none : "");
 
diff --git a/src/Parsers/ASTSelectWithUnionQuery.cpp b/src/Parsers/ASTSelectWithUnionQuery.cpp
index c377e4bd66b6..cf72358dea71 100644
--- a/src/Parsers/ASTSelectWithUnionQuery.cpp
+++ b/src/Parsers/ASTSelectWithUnionQuery.cpp
@@ -63,17 +63,12 @@ void ASTSelectWithUnionQuery::formatQueryImpl(const FormatSettings & settings, F
 
         if (auto * node = (*it)->as<ASTSelectWithUnionQuery>())
         {
-            settings.ostr << settings.nl_or_ws << indent_str;
+            if (it != list_of_selects->children.begin())
+                settings.ostr << settings.nl_or_ws;
 
-            if (node->list_of_selects->children.size() == 1)
-            {
-                (node->list_of_selects->children.at(0))->formatImpl(settings, state, frame);
-            }
-            else
-            {
-                auto sub_query = std::make_shared<ASTSubquery>(*it);
-                sub_query->formatImpl(settings, state, frame);
-            }
+            settings.ostr << indent_str;
+            auto sub_query = std::make_shared<ASTSubquery>(*it);
+            sub_query->formatImpl(settings, state, frame);
         }
         else
         {
diff --git a/src/Parsers/ASTSetQuery.cpp b/src/Parsers/ASTSetQuery.cpp
index d41e9aba4cc7..94b44ed2fa7e 100644
--- a/src/Parsers/ASTSetQuery.cpp
+++ b/src/Parsers/ASTSetQuery.cpp
@@ -3,6 +3,7 @@
 #include <Common/SipHash.h>
 #include <Common/FieldVisitorHash.h>
 #include <Common/FieldVisitorToString.h>
+#include <Common/quoteString.h>
 #include <IO/Operators.h>
 #include <IO/WriteBufferFromString.h>
 
@@ -106,7 +107,7 @@ void ASTSetQuery::formatImpl(const FormatSettings & format, FormatState &, Forma
             first = false;
 
         formatSettingName(QUERY_PARAMETER_NAME_PREFIX + name, format.ostr);
-        format.ostr << " = " << value;
+        format.ostr << " = " << quoteString(value);
     }
 }
 
diff --git a/src/Parsers/ASTSetQuery.h b/src/Parsers/ASTSetQuery.h
index 944f08dcbaa0..42d63944b4fe 100644
--- a/src/Parsers/ASTSetQuery.h
+++ b/src/Parsers/ASTSetQuery.h
@@ -25,7 +25,7 @@ class ASTSetQuery : public IAST
     SettingsChanges changes;
     /// settings that will be reset to default value
     std::vector<String> default_settings;
-    NameToNameMap query_parameters;
+    NameToNameVector query_parameters;
 
     /** Get the text that identifies this element. */
     String getID(char) const override { return "Set"; }
diff --git a/src/Parsers/ASTSystemQuery.cpp b/src/Parsers/ASTSystemQuery.cpp
index fc4ecf4763af..0713737af952 100644
--- a/src/Parsers/ASTSystemQuery.cpp
+++ b/src/Parsers/ASTSystemQuery.cpp
@@ -7,9 +7,15 @@
 
 #include <magic_enum.hpp>
 
+
 namespace DB
 {
 
+namespace ErrorCodes
+{
+    extern const int LOGICAL_ERROR;
+}
+
 namespace
 {
     std::vector<std::string> getTypeIndexToTypeName()
@@ -85,7 +91,7 @@ void ASTSystemQuery::setTable(const String & name)
     }
 }
 
-void ASTSystemQuery::formatImpl(const FormatSettings & settings, FormatState &, FormatStateStacked) const
+void ASTSystemQuery::formatImpl(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const
 {
     auto print_identifier = [&](const String & identifier) -> WriteBuffer &
     {
@@ -104,9 +110,11 @@ void ASTSystemQuery::formatImpl(const FormatSettings & settings, FormatState &,
     {
         if (database)
         {
-            print_identifier(getDatabase()) << ".";
+            database->formatImpl(settings, state, frame);
+            settings.ostr << '.';
         }
-        print_identifier(getTable());
+
+        table->formatImpl(settings, state, frame);
         return settings.ostr;
     };
 
@@ -144,185 +152,273 @@ void ASTSystemQuery::formatImpl(const FormatSettings & settings, FormatState &,
     if (!cluster.empty())
         formatOnCluster(settings);
 
-    if (   type == Type::STOP_MERGES
-        || type == Type::START_MERGES
-        || type == Type::STOP_TTL_MERGES
-        || type == Type::START_TTL_MERGES
-        || type == Type::STOP_MOVES
-        || type == Type::START_MOVES
-        || type == Type::STOP_FETCHES
-        || type == Type::START_FETCHES
-        || type == Type::STOP_REPLICATED_SENDS
-        || type == Type::START_REPLICATED_SENDS
-        || type == Type::STOP_REPLICATION_QUEUES
-        || type == Type::START_REPLICATION_QUEUES
-        || type == Type::STOP_DISTRIBUTED_SENDS
-        || type == Type::START_DISTRIBUTED_SENDS
-        || type == Type::STOP_PULLING_REPLICATION_LOG
-        || type == Type::START_PULLING_REPLICATION_LOG
-        || type == Type::STOP_CLEANUP
-        || type == Type::START_CLEANUP)
+    switch (type)
     {
-        if (table)
+        case Type::STOP_MERGES:
+        case Type::START_MERGES:
+        case Type::STOP_TTL_MERGES:
+        case Type::START_TTL_MERGES:
+        case Type::STOP_MOVES:
+        case Type::START_MOVES:
+        case Type::STOP_FETCHES:
+        case Type::START_FETCHES:
+        case Type::STOP_REPLICATED_SENDS:
+        case Type::START_REPLICATED_SENDS:
+        case Type::STOP_REPLICATION_QUEUES:
+        case Type::START_REPLICATION_QUEUES:
+        case Type::STOP_DISTRIBUTED_SENDS:
+        case Type::START_DISTRIBUTED_SENDS:
+        case Type::STOP_PULLING_REPLICATION_LOG:
+        case Type::START_PULLING_REPLICATION_LOG:
+        case Type::STOP_CLEANUP:
+        case Type::START_CLEANUP:
         {
-            settings.ostr << ' ';
-            print_database_table();
+            if (table)
+            {
+                settings.ostr << ' ';
+                print_database_table();
+            }
+            else if (!volume.empty())
+            {
+                print_on_volume();
+            }
+            break;
         }
-        else if (!volume.empty())
-            print_on_volume();
-    }
-    else if (  type == Type::RESTART_REPLICA
-            || type == Type::RESTORE_REPLICA
-            || type == Type::SYNC_REPLICA
-            || type == Type::WAIT_LOADING_PARTS
-            || type == Type::FLUSH_DISTRIBUTED
-            || type == Type::RELOAD_DICTIONARY
-            || type == Type::RELOAD_MODEL
-            || type == Type::RELOAD_FUNCTION
-            || type == Type::RESTART_DISK
-            || type == Type::DROP_DISK_METADATA_CACHE)
-    {
-        if (table)
+        case Type::RESTART_REPLICA:
+        case Type::RESTORE_REPLICA:
+        case Type::SYNC_REPLICA:
+        case Type::WAIT_LOADING_PARTS:
+        case Type::FLUSH_DISTRIBUTED:
+        case Type::RELOAD_DICTIONARY:
+        case Type::RELOAD_MODEL:
+        case Type::RELOAD_FUNCTION:
+        case Type::RESTART_DISK:
+        case Type::DROP_DISK_METADATA_CACHE:
         {
-            settings.ostr << ' ';
-            print_database_table();
+            if (table)
+            {
+                settings.ostr << ' ';
+                print_database_table();
+            }
+            else if (!target_model.empty())
+            {
+                settings.ostr << ' ';
+                print_identifier(target_model);
+            }
+            else if (!target_function.empty())
+            {
+                settings.ostr << ' ';
+                print_identifier(target_function);
+            }
+            else if (!disk.empty())
+            {
+                settings.ostr << ' ';
+                print_identifier(disk);
+            }
+
+            if (sync_replica_mode != SyncReplicaMode::DEFAULT)
+            {
+                settings.ostr << ' ';
+                print_keyword(magic_enum::enum_name(sync_replica_mode));
+
+                // If the mode is LIGHTWEIGHT and specific source replicas are specified
+                if (sync_replica_mode == SyncReplicaMode::LIGHTWEIGHT && !src_replicas.empty())
+                {
+                    settings.ostr << ' ';
+                    print_keyword("FROM");
+                    settings.ostr << ' ';
+
+                    bool first = true;
+                    for (const auto & src : src_replicas)
+                    {
+                        if (!first)
+                            settings.ostr << ", ";
+                        first = false;
+                        settings.ostr << quoteString(src);
+                    }
+                }
+            }
+            break;
         }
-        else if (!target_model.empty())
+        case Type::SYNC_DATABASE_REPLICA:
         {
             settings.ostr << ' ';
-            print_identifier(target_model);
+            print_identifier(database->as<ASTIdentifier>()->name());
+            break;
         }
-        else if (!target_function.empty())
+        case Type::DROP_REPLICA:
+        case Type::DROP_DATABASE_REPLICA:
         {
-            settings.ostr << ' ';
-            print_identifier(target_function);
+            print_drop_replica();
+            break;
         }
-        else if (!disk.empty())
+        case Type::SUSPEND:
         {
-            settings.ostr << ' ';
-            print_identifier(disk);
+            print_keyword(" FOR ") << seconds;
+            print_keyword(" SECOND");
+            break;
         }
-
-        if (sync_replica_mode != SyncReplicaMode::DEFAULT)
+        case Type::DROP_FORMAT_SCHEMA_CACHE:
         {
-            settings.ostr << ' ';
-            print_keyword(magic_enum::enum_name(sync_replica_mode));
-
-            // If the mode is LIGHTWEIGHT and specific source replicas are specified
-            if (sync_replica_mode == SyncReplicaMode::LIGHTWEIGHT && !src_replicas.empty())
+            if (!schema_cache_format.empty())
             {
-                settings.ostr << ' ';
-                print_keyword("FROM");
-                settings.ostr << ' ';
-
-                for (auto it = src_replicas.begin(); it != src_replicas.end(); ++it)
-                {
-                    print_identifier(*it);
-
-                    // Add a comma and space after each identifier, except the last one
-                    if (std::next(it) != src_replicas.end())
-                        settings.ostr << ", ";
-                }
+                print_keyword(" FOR ");
+                print_identifier(schema_cache_format);
             }
+            break;
         }
-    }
-    else if (type == Type::SYNC_DATABASE_REPLICA)
-    {
-        settings.ostr << ' ';
-        print_identifier(database->as<ASTIdentifier>()->name());
-    }
-    else if (type == Type::DROP_REPLICA || type == Type::DROP_DATABASE_REPLICA)
-    {
-        print_drop_replica();
-    }
-    else if (type == Type::SUSPEND)
-    {
-        print_keyword(" FOR ") << seconds;
-        print_keyword(" SECOND");
-    }
-    else if (type == Type::DROP_FORMAT_SCHEMA_CACHE)
-    {
-        if (!schema_cache_format.empty())
-        {
-            print_keyword(" FOR ");
-            print_identifier(schema_cache_format);
-        }
-    }
-    else if (type == Type::DROP_FILESYSTEM_CACHE)
-    {
-        if (!filesystem_cache_name.empty())
+        case Type::DROP_FILESYSTEM_CACHE:
         {
-            settings.ostr << ' ';
-            print_identifier(filesystem_cache_name);
-            if (!key_to_drop.empty())
+            if (!filesystem_cache_name.empty())
             {
-                print_keyword(" KEY ");
-                print_identifier(key_to_drop);
-                if (offset_to_drop.has_value())
+                settings.ostr << ' ' << quoteString(filesystem_cache_name);
+                if (!key_to_drop.empty())
                 {
-                    print_keyword(" OFFSET ");
-                    settings.ostr << offset_to_drop.value();
+                    print_keyword(" KEY ");
+                    print_identifier(key_to_drop);
+                    if (offset_to_drop.has_value())
+                    {
+                        print_keyword(" OFFSET ");
+                        settings.ostr << offset_to_drop.value();
+                    }
                 }
             }
+            break;
         }
-    }
-    else if (type == Type::DROP_SCHEMA_CACHE)
-    {
-        if (!schema_cache_storage.empty())
+        case Type::DROP_SCHEMA_CACHE:
         {
-            print_keyword(" FOR ");
-            print_identifier(schema_cache_storage);
+            if (!schema_cache_storage.empty())
+            {
+                print_keyword(" FOR ");
+                print_identifier(schema_cache_storage);
+            }
+            break;
         }
-    }
-    else if (type == Type::UNFREEZE)
-    {
-        print_keyword(" WITH NAME ");
-        settings.ostr << quoteString(backup_name);
-    }
-    else if (type == Type::START_LISTEN || type == Type::STOP_LISTEN)
-    {
-        settings.ostr << ' ';
-        print_keyword(ServerType::serverTypeToString(server_type.type));
-
-        if (server_type.type == ServerType::Type::CUSTOM)
-            settings.ostr << ' ' << quoteString(server_type.custom_name);
-
-        bool comma = false;
-
-        if (!server_type.exclude_types.empty())
+        case Type::UNFREEZE:
         {
-            print_keyword(" EXCEPT");
-
-            for (auto cur_type : server_type.exclude_types)
-            {
-                if (cur_type == ServerType::Type::CUSTOM)
-                    continue;
+            print_keyword(" WITH NAME ");
+            settings.ostr << quoteString(backup_name);
+            break;
+        }
+        case Type::START_LISTEN:
+        case Type::STOP_LISTEN:
+        {
+            settings.ostr << ' ';
+            print_keyword(ServerType::serverTypeToString(server_type.type));
 
-                if (comma)
-                    settings.ostr << ',';
-                else
-                    comma = true;
+            if (server_type.type == ServerType::Type::CUSTOM)
+                settings.ostr << ' ' << quoteString(server_type.custom_name);
 
-                settings.ostr << ' ';
-                print_keyword(ServerType::serverTypeToString(cur_type));
-            }
+            bool comma = false;
 
-            if (server_type.exclude_types.contains(ServerType::Type::CUSTOM))
+            if (!server_type.exclude_types.empty())
             {
-                for (const auto & cur_name : server_type.exclude_custom_names)
+                print_keyword(" EXCEPT");
+
+                for (auto cur_type : server_type.exclude_types)
                 {
+                    if (cur_type == ServerType::Type::CUSTOM)
+                        continue;
+
                     if (comma)
                         settings.ostr << ',';
                     else
                         comma = true;
 
                     settings.ostr << ' ';
-                    print_keyword(ServerType::serverTypeToString(ServerType::Type::CUSTOM));
-                    settings.ostr << " " << quoteString(cur_name);
+                    print_keyword(ServerType::serverTypeToString(cur_type));
+                }
+
+                if (server_type.exclude_types.contains(ServerType::Type::CUSTOM))
+                {
+                    for (const auto & cur_name : server_type.exclude_custom_names)
+                    {
+                        if (comma)
+                            settings.ostr << ',';
+                        else
+                            comma = true;
+
+                        settings.ostr << ' ';
+                        print_keyword(ServerType::serverTypeToString(ServerType::Type::CUSTOM));
+                        settings.ostr << " " << quoteString(cur_name);
+                    }
                 }
             }
+            break;
+        }
+        case Type::ENABLE_FAILPOINT:
+        case Type::DISABLE_FAILPOINT:
+        {
+            settings.ostr << ' ';
+            print_identifier(fail_point_name);
+            break;
+        }
+        case Type::REFRESH_VIEW:
+        case Type::START_VIEW:
+        case Type::STOP_VIEW:
+        case Type::CANCEL_VIEW:
+        {
+            settings.ostr << ' ';
+            print_database_table();
+            break;
         }
+        case Type::TEST_VIEW:
+        {
+            settings.ostr << ' ';
+            print_database_table();
 
+            if (!fake_time_for_view)
+            {
+                settings.ostr << ' ';
+                print_keyword("UNSET FAKE TIME");
+            }
+            else
+            {
+                settings.ostr << ' ';
+                print_keyword("SET FAKE TIME");
+                settings.ostr << " '" << LocalDateTime(*fake_time_for_view) << "'";
+            }
+            break;
+        }
+        case Type::KILL:
+        case Type::SHUTDOWN:
+        case Type::DROP_DNS_CACHE:
+        case Type::DROP_MMAP_CACHE:
+        case Type::DROP_QUERY_CACHE:
+        case Type::DROP_MARK_CACHE:
+        case Type::DROP_INDEX_MARK_CACHE:
+        case Type::DROP_UNCOMPRESSED_CACHE:
+        case Type::DROP_INDEX_UNCOMPRESSED_CACHE:
+        case Type::DROP_COMPILED_EXPRESSION_CACHE:
+        case Type::DROP_S3_CLIENT_CACHE:
+        case Type::RESET_COVERAGE:
+        case Type::RESTART_REPLICAS:
+        case Type::JEMALLOC_PURGE:
+        case Type::JEMALLOC_ENABLE_PROFILE:
+        case Type::JEMALLOC_DISABLE_PROFILE:
+        case Type::JEMALLOC_FLUSH_PROFILE:
+        case Type::SYNC_TRANSACTION_LOG:
+        case Type::SYNC_FILE_CACHE:
+        case Type::SYNC_FILESYSTEM_CACHE:
+        case Type::REPLICA_READY:   /// Obsolete
+        case Type::REPLICA_UNREADY: /// Obsolete
+        case Type::RELOAD_DICTIONARIES:
+        case Type::RELOAD_EMBEDDED_DICTIONARIES:
+        case Type::RELOAD_MODELS:
+        case Type::RELOAD_FUNCTIONS:
+        case Type::RELOAD_CONFIG:
+        case Type::RELOAD_USERS:
+        case Type::RELOAD_ASYNCHRONOUS_METRICS:
+        case Type::FLUSH_LOGS:
+        case Type::FLUSH_ASYNC_INSERT_QUEUE:
+        case Type::START_THREAD_FUZZER:
+        case Type::STOP_THREAD_FUZZER:
+        case Type::START_VIEWS:
+        case Type::STOP_VIEWS:
+            break;
+        case Type::UNKNOWN:
+        case Type::END:
+            throw Exception(ErrorCodes::LOGICAL_ERROR, "Unknown SYSTEM command");
     }
 }
 
diff --git a/src/Parsers/ASTSystemQuery.h b/src/Parsers/ASTSystemQuery.h
index a74275f1638e..9aa90f499d05 100644
--- a/src/Parsers/ASTSystemQuery.h
+++ b/src/Parsers/ASTSystemQuery.h
@@ -28,16 +28,12 @@ class ASTSystemQuery : public IAST, public ASTQueryWithOnCluster
         DROP_INDEX_UNCOMPRESSED_CACHE,
         DROP_MMAP_CACHE,
         DROP_QUERY_CACHE,
-#if USE_EMBEDDED_COMPILER
         DROP_COMPILED_EXPRESSION_CACHE,
-#endif
         DROP_FILESYSTEM_CACHE,
         DROP_DISK_METADATA_CACHE,
         DROP_SCHEMA_CACHE,
         DROP_FORMAT_SCHEMA_CACHE,
-#if USE_AWS_S3
         DROP_S3_CLIENT_CACHE,
-#endif
         STOP_LISTEN,
         START_LISTEN,
         RESTART_REPLICAS,
@@ -46,12 +42,10 @@ class ASTSystemQuery : public IAST, public ASTQueryWithOnCluster
         WAIT_LOADING_PARTS,
         DROP_REPLICA,
         DROP_DATABASE_REPLICA,
-#if USE_JEMALLOC
         JEMALLOC_PURGE,
         JEMALLOC_ENABLE_PROFILE,
         JEMALLOC_DISABLE_PROFILE,
         JEMALLOC_FLUSH_PROFILE,
-#endif
         SYNC_REPLICA,
         SYNC_DATABASE_REPLICA,
         SYNC_TRANSACTION_LOG,
@@ -145,7 +139,7 @@ class ASTSystemQuery : public IAST, public ASTQueryWithOnCluster
 
     SyncReplicaMode sync_replica_mode = SyncReplicaMode::DEFAULT;
 
-    std::unordered_set<String> src_replicas;
+    std::vector<String> src_replicas;
 
     ServerType server_type;
 
diff --git a/src/Parsers/ASTUndropQuery.cpp b/src/Parsers/ASTUndropQuery.cpp
index 0b8a18b12c95..ab96ca4711e1 100644
--- a/src/Parsers/ASTUndropQuery.cpp
+++ b/src/Parsers/ASTUndropQuery.cpp
@@ -19,18 +19,25 @@ ASTPtr ASTUndropQuery::clone() const
     return res;
 }
 
-void ASTUndropQuery::formatQueryImpl(const FormatSettings & settings, FormatState &, FormatStateStacked) const
+void ASTUndropQuery::formatQueryImpl(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const
 {
-    settings.ostr << (settings.hilite ? hilite_keyword : "");
-    settings.ostr << "UNDROP ";
-    settings.ostr << "TABLE ";
-    settings.ostr << (settings.hilite ? hilite_none : "");
-
-    assert (table);
-    if (!database)
-        settings.ostr << backQuoteIfNeed(getTable());
-    else
-        settings.ostr << backQuoteIfNeed(getDatabase()) + "." << backQuoteIfNeed(getTable());
+    settings.ostr << (settings.hilite ? hilite_keyword : "")
+        << "UNDROP TABLE"
+        << (settings.hilite ? hilite_none : "")
+        << " ";
+
+    chassert(table);
+
+    if (table)
+    {
+        if (database)
+        {
+            database->formatImpl(settings, state, frame);
+            settings.ostr << '.';
+        }
+
+        table->formatImpl(settings, state, frame);
+    }
 
     if (uuid != UUIDHelpers::Nil)
         settings.ostr << (settings.hilite ? hilite_keyword : "") << " UUID " << (settings.hilite ? hilite_none : "")
diff --git a/src/Parsers/ASTWatchQuery.h b/src/Parsers/ASTWatchQuery.h
index 156fe6828bc7..80b675f513f2 100644
--- a/src/Parsers/ASTWatchQuery.h
+++ b/src/Parsers/ASTWatchQuery.h
@@ -40,22 +40,29 @@ class ASTWatchQuery : public ASTQueryWithTableAndOutput
     QueryKind getQueryKind() const override { return QueryKind::Create; }
 
 protected:
-    void formatQueryImpl(const FormatSettings & s, FormatState & state, FormatStateStacked frame) const override
+    void formatQueryImpl(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const override
     {
-        std::string indent_str = s.one_line ? "" : std::string(4 * frame.indent, ' ');
+        std::string indent_str = settings.one_line ? "" : std::string(4 * frame.indent, ' ');
 
-        s.ostr << (s.hilite ? hilite_keyword : "") << "WATCH " << (s.hilite ? hilite_none : "")
-            << (database ? backQuoteIfNeed(getDatabase()) + "." : "") << backQuoteIfNeed(getTable());
+        settings.ostr << (settings.hilite ? hilite_keyword : "") << "WATCH " << (settings.hilite ? hilite_none : "");
+
+        if (database)
+        {
+            database->formatImpl(settings, state, frame);
+            settings.ostr << '.';
+        }
+
+        table->formatImpl(settings, state, frame);
 
         if (is_watch_events)
         {
-            s.ostr << " " << (s.hilite ? hilite_keyword : "") << "EVENTS" << (s.hilite ? hilite_none : "");
+            settings.ostr << " " << (settings.hilite ? hilite_keyword : "") << "EVENTS" << (settings.hilite ? hilite_none : "");
         }
 
         if (limit_length)
         {
-            s.ostr << (s.hilite ? hilite_keyword : "") << s.nl_or_ws << indent_str << "LIMIT " << (s.hilite ? hilite_none : "");
-            limit_length->formatImpl(s, state, frame);
+            settings.ostr << (settings.hilite ? hilite_keyword : "") << settings.nl_or_ws << indent_str << "LIMIT " << (settings.hilite ? hilite_none : "");
+            limit_length->formatImpl(settings, state, frame);
         }
     }
 };
diff --git a/src/Parsers/ASTWindowDefinition.cpp b/src/Parsers/ASTWindowDefinition.cpp
index 29e42de3ce04..21c44a166af8 100644
--- a/src/Parsers/ASTWindowDefinition.cpp
+++ b/src/Parsers/ASTWindowDefinition.cpp
@@ -94,9 +94,9 @@ void ASTWindowDefinition::formatImpl(const FormatSettings & settings,
     if (!frame_is_default)
     {
         if (need_space)
-        {
             settings.ostr << " ";
-        }
+
+        format_frame.need_parens = true;
 
         settings.ostr << frame_type << " BETWEEN ";
         if (frame_begin_type == WindowFrame::BoundaryType::Current)
diff --git a/src/Parsers/ASTWindowDefinition.h b/src/Parsers/ASTWindowDefinition.h
index 507825f11d22..72ad8f6abdac 100644
--- a/src/Parsers/ASTWindowDefinition.h
+++ b/src/Parsers/ASTWindowDefinition.h
@@ -41,7 +41,6 @@ struct ASTWindowListElement : public IAST
     // ASTWindowDefinition
     ASTPtr definition;
 
-
     ASTPtr clone() const override;
 
     String getID(char delimiter) const override;
diff --git a/src/Parsers/Access/ASTCreateSettingsProfileQuery.cpp b/src/Parsers/Access/ASTCreateSettingsProfileQuery.cpp
index 3379486d789d..e1b42bfb33da 100644
--- a/src/Parsers/Access/ASTCreateSettingsProfileQuery.cpp
+++ b/src/Parsers/Access/ASTCreateSettingsProfileQuery.cpp
@@ -17,7 +17,7 @@ namespace
         {
             if (std::exchange(need_comma, true))
                 settings.ostr << ", ";
-            settings.ostr << backQuoteIfNeed(name);
+            settings.ostr << backQuote(name);
         }
     }
 
diff --git a/src/Parsers/Access/ASTCreateUserQuery.cpp b/src/Parsers/Access/ASTCreateUserQuery.cpp
index 96306fa0dd22..02735568a047 100644
--- a/src/Parsers/Access/ASTCreateUserQuery.cpp
+++ b/src/Parsers/Access/ASTCreateUserQuery.cpp
@@ -18,7 +18,6 @@ namespace
                       << quoteString(new_name);
     }
 
-
     void formatAuthenticationData(const ASTAuthenticationData & auth_data, const IAST::FormatSettings & settings)
     {
         auth_data.format(settings);
diff --git a/src/Parsers/Access/ASTGrantQuery.cpp b/src/Parsers/Access/ASTGrantQuery.cpp
index 331f1798d77f..f60fa7e4a233 100644
--- a/src/Parsers/Access/ASTGrantQuery.cpp
+++ b/src/Parsers/Access/ASTGrantQuery.cpp
@@ -93,6 +93,29 @@ namespace
         if (no_output)
             settings.ostr << (settings.hilite ? IAST::hilite_keyword : "") << "USAGE ON " << (settings.hilite ? IAST::hilite_none : "") << "*.*";
     }
+
+
+    void formatCurrentGrantsElements(const AccessRightsElements & elements, const IAST::FormatSettings & settings)
+    {
+        for (size_t i = 0; i != elements.size(); ++i)
+        {
+            const auto & element = elements[i];
+
+            bool next_element_on_same_db_and_table = false;
+            if (i != elements.size() - 1)
+            {
+                const auto & next_element = elements[i + 1];
+                if (element.sameDatabaseAndTableAndParameter(next_element))
+                    next_element_on_same_db_and_table = true;
+            }
+
+            if (!next_element_on_same_db_and_table)
+            {
+                settings.ostr << " ";
+                formatONClause(element, settings);
+            }
+        }
+    }
 }
 
 
@@ -148,9 +171,14 @@ void ASTGrantQuery::formatImpl(const FormatSettings & settings, FormatState &, F
                             "to grant or revoke, not both of them");
     }
     else if (current_grants)
-        settings.ostr << (settings.hilite ? hilite_keyword : "") << " CURRENT GRANTS" << (settings.hilite ? hilite_none : "");
+    {
+        settings.ostr << (settings.hilite ? hilite_keyword : "") << "CURRENT GRANTS" << (settings.hilite ? hilite_none : "");
+        formatCurrentGrantsElements(access_rights_elements, settings);
+    }
     else
+    {
         formatElementsWithoutOptions(access_rights_elements, settings);
+    }
 
     settings.ostr << (settings.hilite ? IAST::hilite_keyword : "") << (is_revoke ? " FROM " : " TO ")
                   << (settings.hilite ? IAST::hilite_none : "");
diff --git a/src/Parsers/Access/ASTSettingsProfileElement.cpp b/src/Parsers/Access/ASTSettingsProfileElement.cpp
index 7b29b15cb298..014b97132dea 100644
--- a/src/Parsers/Access/ASTSettingsProfileElement.cpp
+++ b/src/Parsers/Access/ASTSettingsProfileElement.cpp
@@ -18,7 +18,7 @@ namespace
         }
         else
         {
-            settings.ostr << backQuoteIfNeed(str);
+            settings.ostr << backQuote(str);
         }
     }
 }
diff --git a/src/Parsers/Access/ParserCreateUserQuery.cpp b/src/Parsers/Access/ParserCreateUserQuery.cpp
index bb90bc4c5a70..8e5a4d789c68 100644
--- a/src/Parsers/Access/ParserCreateUserQuery.cpp
+++ b/src/Parsers/Access/ParserCreateUserQuery.cpp
@@ -69,7 +69,6 @@ namespace
             bool expect_public_ssh_key = false;
             bool expect_http_auth_server = false;
 
-
             if (ParserKeyword{"WITH"}.ignore(pos, expected))
             {
                 for (auto check_type : collections::range(AuthenticationType::MAX))
diff --git a/src/Parsers/Access/ParserGrantQuery.cpp b/src/Parsers/Access/ParserGrantQuery.cpp
index f495cb60786f..bdb338e9338c 100644
--- a/src/Parsers/Access/ParserGrantQuery.cpp
+++ b/src/Parsers/Access/ParserGrantQuery.cpp
@@ -200,8 +200,10 @@ namespace
             if (!ParserKeyword{"ON"}.ignore(pos, expected))
                 return false;
 
-            String database_name, table_name;
-            bool any_database = false, any_table = false;
+            String database_name;
+            String table_name;
+            bool any_database = false;
+            bool any_table = false;
             if (!parseDatabaseAndTableNameOrAsterisks(pos, expected, database_name, any_database, table_name, any_table))
                 return false;
 
diff --git a/src/Parsers/Access/ParserUserNameWithHost.h b/src/Parsers/Access/ParserUserNameWithHost.h
index 453b816a98d9..8c85e733bef3 100644
--- a/src/Parsers/Access/ParserUserNameWithHost.h
+++ b/src/Parsers/Access/ParserUserNameWithHost.h
@@ -5,6 +5,7 @@
 
 namespace DB
 {
+
 /** Parses a user name.
   * It can be a simple string or identifier or something like `name@host`.
   */
diff --git a/src/Parsers/IAST.h b/src/Parsers/IAST.h
index fa2b3b0d1c0d..ee70fed0f072 100644
--- a/src/Parsers/IAST.h
+++ b/src/Parsers/IAST.h
@@ -256,6 +256,7 @@ class IAST : public std::enable_shared_from_this<IAST>, public TypePromotion<IAS
         bool expression_list_always_start_on_new_line = false;  /// Line feed and indent before expression list even if it's of single element.
         bool expression_list_prepend_whitespace = false; /// Prepend whitespace (if it is required)
         bool surround_each_list_element_with_parens = false;
+        size_t list_element_index = 0;
         const IAST * current_select = nullptr;
     };
 
diff --git a/src/Parsers/ParserCreateIndexQuery.cpp b/src/Parsers/ParserCreateIndexQuery.cpp
index 81954e3c2471..e654656b68ad 100644
--- a/src/Parsers/ParserCreateIndexQuery.cpp
+++ b/src/Parsers/ParserCreateIndexQuery.cpp
@@ -25,7 +25,6 @@ bool ParserCreateIndexDeclaration::parseImpl(Pos & pos, ASTPtr & node, Expected
     ParserUnsignedInteger granularity_p;
 
     ASTPtr expr;
-    ASTPtr order;
     ASTPtr type;
     ASTPtr granularity;
 
@@ -35,7 +34,7 @@ bool ParserCreateIndexDeclaration::parseImpl(Pos & pos, ASTPtr & node, Expected
     }
     else if (open.ignore(pos, expected))
     {
-        if (!order_list.parse(pos, order, expected))
+        if (!order_list.parse(pos, expr, expected))
             return false;
 
         if (!close.ignore(pos, expected))
@@ -72,7 +71,6 @@ bool ParserCreateIndexDeclaration::parseImpl(Pos & pos, ASTPtr & node, Expected
             index->granularity = ASTIndexDeclaration::DEFAULT_INDEX_GRANULARITY;
     }
     node = index;
-
     return true;
 }
 
diff --git a/src/Parsers/ParserCreateQuery.h b/src/Parsers/ParserCreateQuery.h
index 37b06e15384e..cb51922ffcff 100644
--- a/src/Parsers/ParserCreateQuery.h
+++ b/src/Parsers/ParserCreateQuery.h
@@ -228,11 +228,9 @@ bool IParserColumnDeclaration<NameParser>::parseImpl(Pos & pos, ASTPtr & node, E
             return false;
         if (!type_parser.parse(pos, type, expected))
             return false;
-        if (s_collate.ignore(pos, expected))
-        {
-            if (!collation_parser.parse(pos, collation_expression, expected))
-                return false;
-        }
+        if (s_collate.ignore(pos, expected)
+            && !collation_parser.parse(pos, collation_expression, expected))
+            return false;
     }
 
     if (allow_null_modifiers)
@@ -247,6 +245,11 @@ bool IParserColumnDeclaration<NameParser>::parseImpl(Pos & pos, ASTPtr & node, E
             null_modifier.emplace(true);
     }
 
+    /// Collate is also allowed after NULL/NOT NULL
+    if (!collation_expression && s_collate.ignore(pos, expected)
+        && !collation_parser.parse(pos, collation_expression, expected))
+        return false;
+
     Pos pos_before_specifier = pos;
     if (s_default.ignore(pos, expected) || s_materialized.ignore(pos, expected) || s_alias.ignore(pos, expected))
     {
diff --git a/src/Parsers/ParserSetQuery.cpp b/src/Parsers/ParserSetQuery.cpp
index 4df74c2dd822..4ad715ba499e 100644
--- a/src/Parsers/ParserSetQuery.cpp
+++ b/src/Parsers/ParserSetQuery.cpp
@@ -314,7 +314,7 @@ bool ParserSetQuery::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)
     }
 
     SettingsChanges changes;
-    NameToNameMap query_parameters;
+    NameToNameVector query_parameters;
     std::vector<String> default_settings;
 
     while (true)
@@ -330,7 +330,7 @@ bool ParserSetQuery::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)
             return false;
 
         if (!parameter.first.empty())
-            query_parameters.emplace(std::move(parameter));
+            query_parameters.emplace_back(std::move(parameter));
         else if (!name_of_default_setting.empty())
             default_settings.emplace_back(std::move(name_of_default_setting));
         else
diff --git a/src/Parsers/ParserSystemQuery.cpp b/src/Parsers/ParserSystemQuery.cpp
index 24979af9d406..a50e65aa1345 100644
--- a/src/Parsers/ParserSystemQuery.cpp
+++ b/src/Parsers/ParserSystemQuery.cpp
@@ -293,7 +293,7 @@ bool ParserSystemQuery::parseImpl(IParser::Pos & pos, ASTPtr & node, Expected &
                             ASTPtr replica_ast;
                             if (!ParserStringLiteral{}.parse(pos, replica_ast, expected))
                                 return false;
-                            res->src_replicas.insert(replica_ast->as<ASTLiteral &>().value.safeGet<String>());
+                            res->src_replicas.emplace_back(replica_ast->as<ASTLiteral &>().value.safeGet<String>());
                         } while (ParserToken{TokenType::Comma}.ignore(pos, expected));
                     }
                 }
diff --git a/src/Parsers/ParserUndropQuery.cpp b/src/Parsers/ParserUndropQuery.cpp
index 3784ab0f3539..e67fd7f5f01b 100644
--- a/src/Parsers/ParserUndropQuery.cpp
+++ b/src/Parsers/ParserUndropQuery.cpp
@@ -58,7 +58,7 @@ bool parseUndropQuery(IParser::Pos & pos, ASTPtr & node, Expected & expected)
     if (database)
         query->children.push_back(database);
 
-    assert (table);
+    chassert(table);
     query->children.push_back(table);
 
     query->cluster = cluster_str;
diff --git a/src/Parsers/TablePropertiesQueriesASTs.h b/src/Parsers/TablePropertiesQueriesASTs.h
index 038936a0297e..e8e4bd8adb36 100644
--- a/src/Parsers/TablePropertiesQueriesASTs.h
+++ b/src/Parsers/TablePropertiesQueriesASTs.h
@@ -86,10 +86,11 @@ using ASTShowCreateDictionaryQuery = ASTQueryWithTableAndOutputImpl<ASTShowCreat
 class ASTExistsDatabaseQuery : public ASTQueryWithTableAndOutputImpl<ASTExistsDatabaseQueryIDAndQueryNames>
 {
 protected:
-    void formatQueryImpl(const FormatSettings & settings, FormatState &, FormatStateStacked) const override
+    void formatQueryImpl(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const override
     {
         settings.ostr << (settings.hilite ? hilite_keyword : "") << ASTExistsDatabaseQueryIDAndQueryNames::Query
-                    << " " << (settings.hilite ? hilite_none : "") << backQuoteIfNeed(getDatabase());
+                    << " " << (settings.hilite ? hilite_none : "");
+        database->formatImpl(settings, state, frame);
     }
 
     QueryKind getQueryKind() const override { return QueryKind::Exists; }
@@ -98,10 +99,11 @@ class ASTExistsDatabaseQuery : public ASTQueryWithTableAndOutputImpl<ASTExistsDa
 class ASTShowCreateDatabaseQuery : public ASTQueryWithTableAndOutputImpl<ASTShowCreateDatabaseQueryIDAndQueryNames>
 {
 protected:
-    void formatQueryImpl(const FormatSettings & settings, FormatState &, FormatStateStacked) const override
+    void formatQueryImpl(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const override
     {
         settings.ostr << (settings.hilite ? hilite_keyword : "") << ASTShowCreateDatabaseQueryIDAndQueryNames::Query
-                      << " " << (settings.hilite ? hilite_none : "") << backQuoteIfNeed(getDatabase());
+                      << " " << (settings.hilite ? hilite_none : "");
+        database->formatImpl(settings, state, frame);
     }
 };
 
diff --git a/src/Parsers/parseIdentifierOrStringLiteral.cpp b/src/Parsers/parseIdentifierOrStringLiteral.cpp
index 3f2bd8ac8ad5..bb93145772a1 100644
--- a/src/Parsers/parseIdentifierOrStringLiteral.cpp
+++ b/src/Parsers/parseIdentifierOrStringLiteral.cpp
@@ -7,8 +7,10 @@
 #include <Parsers/ExpressionListParsers.h>
 #include <Common/typeid_cast.h>
 
+
 namespace DB
 {
+
 bool parseIdentifierOrStringLiteral(IParser::Pos & pos, Expected & expected, String & result)
 {
     return IParserBase::wrapParseImpl(pos, [&]
@@ -23,7 +25,7 @@ bool parseIdentifierOrStringLiteral(IParser::Pos & pos, Expected & expected, Str
         if (ParserStringLiteral().parse(pos, ast, expected))
         {
             result = ast->as<ASTLiteral &>().value.safeGet<String>();
-            return true;
+            return !result.empty();
         }
 
         return false;
diff --git a/src/Parsers/parseIdentifierOrStringLiteral.h b/src/Parsers/parseIdentifierOrStringLiteral.h
index d029c0c1371f..b450ce8f2f0f 100644
--- a/src/Parsers/parseIdentifierOrStringLiteral.h
+++ b/src/Parsers/parseIdentifierOrStringLiteral.h
@@ -3,11 +3,14 @@
 #include <Core/Types.h>
 #include <Parsers/IParser.h>
 
+
 namespace DB
 {
 
-/** Parses a name of an object which could be written in 3 forms:
-  * name, `name` or 'name' */
+/** Parses a name of an object which could be written in the following forms:
+  * name / `name` / "name" (identifier) or 'name'.
+  * Note that empty strings are not allowed.
+  */
 bool parseIdentifierOrStringLiteral(IParser::Pos & pos, Expected & expected, String & result);
 
 /** Parse a list of identifiers or string literals. */
diff --git a/src/Storages/MergeTree/registerStorageMergeTree.cpp b/src/Storages/MergeTree/registerStorageMergeTree.cpp
index da38b3ca07c3..2b24a56e9940 100644
--- a/src/Storages/MergeTree/registerStorageMergeTree.cpp
+++ b/src/Storages/MergeTree/registerStorageMergeTree.cpp
@@ -1,6 +1,5 @@
 #include <Databases/DatabaseReplicatedHelpers.h>
 #include <Storages/MergeTree/MergeTreeIndexMinMax.h>
-#include <Storages/MergeTree/MergeTreeIndexSet.h>
 #include <Storages/MergeTree/MergeTreeIndices.h>
 #include <Storages/StorageFactory.h>
 #include <Storages/StorageMergeTree.h>
@@ -9,16 +8,12 @@
 #include <Common/Macros.h>
 #include <Common/OptimizedRegularExpression.h>
 #include <Common/typeid_cast.h>
-#include <Common/thread_local_rng.h>
 
-#include <Parsers/ASTCreateQuery.h>
-#include <Parsers/ASTExpressionList.h>
 #include <Parsers/ASTFunction.h>
 #include <Parsers/ASTIdentifier.h>
 #include <Parsers/ASTSetQuery.h>
 
 #include <AggregateFunctions/AggregateFunctionFactory.h>
-#include <AggregateFunctions/parseAggregateFunctionParameters.h>
 
 #include <Interpreters/Context.h>
 #include <Interpreters/FunctionNameNormalizer.h>
diff --git a/utils/clickhouse-diagnostics/README.md b/utils/clickhouse-diagnostics/README.md
index 9a86ad535fd1..01bb543c9a58 100644
--- a/utils/clickhouse-diagnostics/README.md
+++ b/utils/clickhouse-diagnostics/README.md
@@ -318,7 +318,7 @@ SHOW ACCESS
 ```
 **result**
 ```
-CREATE USER default IDENTIFIED WITH plaintext_password SETTINGS PROFILE default
+CREATE USER default IDENTIFIED WITH plaintext_password SETTINGS PROFILE `default`
 CREATE SETTINGS PROFILE default SETTINGS max_memory_usage = 10000000000, load_balancing = 'random'
 CREATE SETTINGS PROFILE readonly SETTINGS readonly = 1
 CREATE QUOTA default KEYED BY user_name FOR INTERVAL 1 hour TRACKING ONLY TO default
