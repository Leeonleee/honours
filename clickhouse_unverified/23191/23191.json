{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 23191,
  "instance_id": "ClickHouse__ClickHouse-23191",
  "issue_numbers": [
    "22924",
    "10401"
  ],
  "base_commit": "c87f84681650a0212bc7afb1a813e693c6c33666",
  "patch": "diff --git a/src/Interpreters/QueryAliasesVisitor.cpp b/src/Interpreters/QueryAliasesVisitor.cpp\nindex d395bfc20e92..bd0b2e88d2f8 100644\n--- a/src/Interpreters/QueryAliasesVisitor.cpp\n+++ b/src/Interpreters/QueryAliasesVisitor.cpp\n@@ -15,15 +15,22 @@ namespace ErrorCodes\n     extern const int MULTIPLE_EXPRESSIONS_FOR_ALIAS;\n }\n \n-static String wrongAliasMessage(const ASTPtr & ast, const ASTPtr & prev_ast, const String & alias)\n+namespace\n {\n-    WriteBufferFromOwnString message;\n-    message << \"Different expressions with the same alias \" << backQuoteIfNeed(alias) << \":\\n\";\n-    formatAST(*ast, message, false, true);\n-    message << \"\\nand\\n\";\n-    formatAST(*prev_ast, message, false, true);\n-    message << '\\n';\n-    return message.str();\n+\n+    constexpr auto dummy_subquery_name_prefix = \"_subquery\";\n+\n+    String wrongAliasMessage(const ASTPtr & ast, const ASTPtr & prev_ast, const String & alias)\n+    {\n+        WriteBufferFromOwnString message;\n+        message << \"Different expressions with the same alias \" << backQuoteIfNeed(alias) << \":\\n\";\n+        formatAST(*ast, message, false, true);\n+        message << \"\\nand\\n\";\n+        formatAST(*prev_ast, message, false, true);\n+        message << '\\n';\n+        return message.str();\n+    }\n+\n }\n \n \n@@ -99,7 +106,7 @@ void QueryAliasesMatcher<T>::visit(const ASTSubquery & const_subquery, const AST\n         String alias;\n         do\n         {\n-            alias = \"_subquery\" + std::to_string(++subquery_index);\n+            alias = dummy_subquery_name_prefix + std::to_string(++subquery_index);\n         }\n         while (aliases.count(alias));\n \n@@ -124,6 +131,30 @@ void QueryAliasesMatcher<T>::visitOther(const ASTPtr & ast, Data & data)\n \n         aliases[alias] = ast;\n     }\n+\n+    /** QueryAliasesVisitor is executed before ExecuteScalarSubqueriesVisitor.\n+        For example we have subquery in our query (SELECT sum(number) FROM numbers(10)).\n+\n+        After running QueryAliasesVisitor it will be (SELECT sum(number) FROM numbers(10)) as _subquery_1\n+        and prefer_alias_to_column_name for this subquery will be true.\n+\n+        After running ExecuteScalarSubqueriesVisitor it will be converted to (45 as _subquery_1)\n+        and prefer_alias_to_column_name for ast literal will be true.\n+\n+        But if we send such query on remote host with Distributed engine for example we cannot send prefer_alias_to_column_name\n+        information for our ast node with query string. And this alias will be dropped because prefer_alias_to_column_name for ASTWIthAlias\n+        by default is false.\n+\n+        It is imporant that subquery can be converted to literal during ExecuteScalarSubqueriesVisitor.\n+        And code below check if we previously set for subquery alias as _subquery, and if it is true\n+        then set prefer_alias_to_column_name = true for node that was optimized during ExecuteScalarSubqueriesVisitor.\n+     */\n+\n+    if (auto * ast_with_alias = dynamic_cast<ASTWithAlias *>(ast.get()))\n+    {\n+        if (startsWith(alias, dummy_subquery_name_prefix))\n+            ast_with_alias->prefer_alias_to_column_name = true;\n+    }\n }\n \n /// Explicit template instantiations\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01813_distributed_scalar_subqueries_alias.reference b/tests/queries/0_stateless/01813_distributed_scalar_subqueries_alias.reference\nnew file mode 100644\nindex 000000000000..5565ed6787ff\n--- /dev/null\n+++ b/tests/queries/0_stateless/01813_distributed_scalar_subqueries_alias.reference\n@@ -0,0 +1,4 @@\n+0\n+1\n+0\n+1\ndiff --git a/tests/queries/0_stateless/01813_distributed_scalar_subqueries_alias.sql b/tests/queries/0_stateless/01813_distributed_scalar_subqueries_alias.sql\nnew file mode 100644\nindex 000000000000..722bd4af5bb4\n--- /dev/null\n+++ b/tests/queries/0_stateless/01813_distributed_scalar_subqueries_alias.sql\n@@ -0,0 +1,18 @@\n+DROP TABLE IF EXISTS data;\n+CREATE TABLE data (a Int64, b Int64) ENGINE = TinyLog();\n+\n+DROP TABLE IF EXISTS data_distributed;\n+CREATE TABLE data_distributed (a Int64, b Int64) ENGINE = Distributed(test_shard_localhost, currentDatabase(), 'data');\n+\n+INSERT INTO data VALUES (0, 0);\n+\n+SET prefer_localhost_replica = 1;\n+SELECT a / (SELECT sum(number) FROM numbers(10)) FROM data_distributed;\n+SELECT a < (SELECT 1) FROM data_distributed;\n+\n+SET prefer_localhost_replica = 0;\n+SELECT a / (SELECT sum(number) FROM numbers(10)) FROM data_distributed;\n+SELECT a < (SELECT 1) FROM data_distributed;\n+\n+DROP TABLE data_distributed;\n+DROP TABLE data;\n",
  "problem_statement": "\"Not found column in block\" in distributed query with subquery\n**How to reproduce**\r\n* Which ClickHouse server version to use\r\nlatest master/arcadia\r\n* Non-default settings, if any\r\n```sql\r\nSET prefer_localhost_replica=0\r\n```\r\n(With a local stream the query works fine)\r\n* `CREATE TABLE` statements for all tables involved\r\n```sql\r\ncreate table \"t0\" (a Int64, b Int64) engine = MergeTree() partition by a order by a;\r\ncreate table \"dist_t0\" (a Int64, b Int64) engine = Distributed(test_shard_localhost, default, t0);\r\n```\r\n* Sample data for all these tables\r\n```sql\r\ninsert into t0 values (0, 0);\r\n```\r\n* Queries to run that lead to unexpected result\r\n```sql\r\ndi.man.yp-c.yandex.net :) SELECT a / (SELECT sum(number) FROM numbers(10)) FROM dist_t0\r\n\r\nSELECT a / \r\n    (\r\n        SELECT sum(number)\r\n        FROM numbers(10)\r\n    )\r\nFROM dist_t0\r\n\r\nQuery id: 27b16db2-ad76-403c-8ac1-c03bfb9b0daf\r\n\r\n\r\n0 rows in set. Elapsed: 0.020 sec. \r\n\r\nReceived exception from server (version 21.5.1):\r\nCode: 10. DB::Exception: Received from localhost:9000. DB::Exception: Not found column divide(a, _subquery4) in block. There are only columns: divide(a, CAST(45, 'UInt64')): While executing Remote.\r\n```\r\n\nScalar subquery without alias doesn't work properly with distributed tables.\n**How to reproduce**\r\n```\r\nCREATE TABLE t_local (a Int) ENGINE = Log;\r\nINSERT INTO t_local SELECT number FROM numbers(10);\r\nCREATE TABLE t_dist(a Int) ENGINE = Distributed(test_shard_localhost, default, t_local);\r\nSET prefer_localhost_replica=0;\r\nSELECT a < (SELECT 1) FROM t_dist;\r\nCode: 10. DB::Exception: Received from localhost:9000. DB::Exception: Not found column less(a, _subquery5) in block. There are only columns: less(a, CAST(1, 'UInt8')): While executing SourceFromInputStream.\r\n```\r\n\r\nstacktrace:\r\n```\r\n2020.04.21 15:26:00.582945 [ 5311 ] {21b10232-b59a-400e-aca1-5924d348602f} <Error> executeQuery: Code: 10, e.displayText() = DB::Exception: Not found column less(a, _subquery5) in block. There are only columns: less(a, CAST(1, 'UInt8')): While executing SourceFromInputStream (version 20.4.1.1) (from [::1]:44348) (in query: SELECT a < (SELECT 1 FROM t_dist LIMIT 1) FROM t_dist), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. /home/ap11/ClickHouse/build_clang/../contrib/libcxx/include/exception:129: Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0xf363ab2 in /home/ap11/ClickHouse/build_clang/programs/clickhouse\r\n1. /home/ap11/ClickHouse/build_clang/../src/Common/Exception.cpp:33: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x8ea9e9e in /home/ap11/ClickHouse/build_clang/programs/clickhouse\r\n2. /home/ap11/ClickHouse/build_clang/../src/Core/Block.cpp:0: DB::Block::getByName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const @ 0xc93ce8e in /home/ap11/ClickHouse/build_clang/programs/clickhouse\r\n3. /home/ap11/ClickHouse/build_clang/../src/DataStreams/RemoteBlockInputStream.cpp:219: DB::RemoteBlockInputStream::readImpl() @ 0xca56b47 in /home/ap11/ClickHouse/build_clang/programs/clickhouse\r\n4. /home/ap11/ClickHouse/build_clang/../src/DataStreams/IBlockInputStream.cpp:0: DB::IBlockInputStream::read() @ 0xca45176 in /home/ap11/ClickHouse/build_clang/programs/clickhouse\r\n5. /home/ap11/ClickHouse/build_clang/../contrib/libcxx/include/vector:656: DB::SourceFromInputStream::generate() @ 0xd54a94b in /home/ap11/ClickHouse/build_clang/programs/clickhouse\r\n6. /home/ap11/ClickHouse/build_clang/../contrib/libcxx/include/vector:1003: DB::ISource::work() @ 0xd41e4af in /home/ap11/ClickHouse/build_clang/programs/clickhouse\r\n7. /home/ap11/ClickHouse/build_clang/../src/Processors/Sources/SourceFromInputStream.cpp:97: DB::SourceFromInputStream::work() @ 0xd54a7e9 in /home/ap11/ClickHouse/build_clang/programs/clickhouse\r\n8. /home/ap11/ClickHouse/build_clang/../src/Processors/Executors/PipelineExecutor.cpp:175: std::__1::__function::__func<DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1, std::__1::allocator<DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1>, void ()>::operator()() @ 0xd445621 in /home/ap11/ClickHouse/build_clang/programs/clickhouse\r\n9. /home/ap11/ClickHouse/build_clang/../contrib/libcxx/include/exception:180: DB::PipelineExecutor::executeSingleThread(unsigned long, unsigned long) @ 0xd444aac in /home/ap11/ClickHouse/build_clang/programs/clickhouse\r\n10. /home/ap11/ClickHouse/build_clang/../contrib/libcxx/include/vector:461: DB::PipelineExecutor::executeImpl(unsigned long) @ 0xd443714 in /home/ap11/ClickHouse/build_clang/programs/clickhouse\r\n11. /home/ap11/ClickHouse/build_clang/../contrib/libcxx/include/vector:1516: DB::PipelineExecutor::execute(unsigned long) @ 0xd442af5 in /home/ap11/ClickHouse/build_clang/programs/clickhouse\r\n12. /home/ap11/ClickHouse/build_clang/../contrib/libcxx/include/atomic:1036: std::__1::__function::__func<DB::TCPHandler::processOrdinaryQueryWithProcessors()::$_5, std::__1::allocator<DB::TCPHandler::processOrdinaryQueryWithProcessors()::$_5>, void ()>::operator()() @ 0x8f6044d in /home/ap11/ClickHouse/build_clang/programs/clickhouse\r\n13. /home/ap11/ClickHouse/build_clang/../contrib/libcxx/include/atomic:1036: ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::__1::__list_iterator<ThreadFromGlobalPool, void*>) @ 0x8ec6534 in /home/ap11/ClickHouse/build_clang/programs/clickhouse\r\n14. /home/ap11/ClickHouse/build_clang/../src/Common/ThreadPool.cpp:0: ThreadFromGlobalPool::ThreadFromGlobalPool<void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()>(void&&, void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()&&...)::'lambda'()::operator()() const @ 0x8ec863a in /home/ap11/ClickHouse/build_clang/programs/clickhouse\r\n15. /home/ap11/ClickHouse/build_clang/../contrib/libcxx/include/atomic:1036: ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x8ec43f4 in /home/ap11/ClickHouse/build_clang/programs/clickhouse\r\n16. /home/ap11/ClickHouse/build_clang/../contrib/libcxx/include/memory:2615: void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()> >(void*) @ 0x8ec73b0 in /home/ap11/ClickHouse/build_clang/programs/clickhouse\r\n17. start_thread @ 0x76db in /lib/x86_64-linux-gnu/libpthread-2.27.so\r\n18. /build/glibc-OTsEL5/glibc-2.27/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:97: __clone @ 0x12188f in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.27.so\r\n```\r\n\n",
  "hints_text": "\nThere's a workaround: add alias explicitly `SELECT a < (SELECT 1) s FROM t_dist`.\r\n\r\nQuery `SELECT a < ((SELECT 1) as s) FROM t_dist` also doesn't work without alias:\r\n```\r\nNot found column less(a, s) in block. There are only columns: less(a, CAST(1, 'UInt8'))\r\n```\r\nAlias fixes it `SELECT a < ((SELECT 1) as s) k FROM t_dist`\n@4ertus2 The issue is still relevant.\n```\r\nSELECT groupArray(\r\n    (\r\n        SELECT dummy\r\n        FROM system.one\r\n    ) AS k) AS n\r\nFROM clusterAllReplicas('test_cluster_two_shards', system, parts)\r\n\r\nQuery id: 987a9da9-d4f1-43e3-a632-7a4ffafa7900\r\n\r\n\u2197 Progress: 470.00 rows, 263.43 KB (3.95 thousand rows/s., 2.21 MB/s.)\r\nReceived exception from server (version 21.1.6):\r\nCode: 10. DB::Exception: Received from localhost:9000. DB::Exception: Not found column groupArray(k) in block. There are only columns: groupArray(cast(0, 'UInt8')): While executing Remote.\r\n\r\n```",
  "created_at": "2021-04-16T13:02:54Z"
}