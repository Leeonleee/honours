diff --git a/tests/queries/0_stateless/01271_show_privileges.reference b/tests/queries/0_stateless/01271_show_privileges.reference
index de6df7ac021a..dddedb25f5a7 100644
--- a/tests/queries/0_stateless/01271_show_privileges.reference
+++ b/tests/queries/0_stateless/01271_show_privileges.reference
@@ -114,6 +114,8 @@ SYSTEM DROP DNS CACHE	['SYSTEM DROP DNS','DROP DNS CACHE','DROP DNS']	GLOBAL	SYS
 SYSTEM DROP CONNECTIONS CACHE	['SYSTEM DROP CONNECTIONS CACHE','DROP CONNECTIONS CACHE']	GLOBAL	SYSTEM DROP CACHE
 SYSTEM PREWARM MARK CACHE	['SYSTEM PREWARM MARK','PREWARM MARK CACHE','PREWARM MARKS']	GLOBAL	SYSTEM DROP CACHE
 SYSTEM DROP MARK CACHE	['SYSTEM DROP MARK','DROP MARK CACHE','DROP MARKS']	GLOBAL	SYSTEM DROP CACHE
+SYSTEM PREWARM PRIMARY INDEX CACHE	['SYSTEM PREWARM PRIMARY INDEX','PREWARM PRIMARY INDEX CACHE','PREWARM PRIMARY INDEX']	GLOBAL	SYSTEM DROP CACHE
+SYSTEM DROP PRIMARY INDEX CACHE	['SYSTEM DROP PRIMARY INDEX','DROP PRIMARY INDEX CACHE','DROP PRIMARY INDEX']	GLOBAL	SYSTEM DROP CACHE
 SYSTEM DROP UNCOMPRESSED CACHE	['SYSTEM DROP UNCOMPRESSED','DROP UNCOMPRESSED CACHE','DROP UNCOMPRESSED']	GLOBAL	SYSTEM DROP CACHE
 SYSTEM DROP MMAP CACHE	['SYSTEM DROP MMAP','DROP MMAP CACHE','DROP MMAP']	GLOBAL	SYSTEM DROP CACHE
 SYSTEM DROP QUERY CACHE	['SYSTEM DROP QUERY','DROP QUERY CACHE','DROP QUERY']	GLOBAL	SYSTEM DROP CACHE
diff --git a/tests/queries/0_stateless/03128_merge_tree_index_lazy_load.reference b/tests/queries/0_stateless/03128_merge_tree_index_lazy_load.reference
index 022457178ec0..5022e543cd24 100644
--- a/tests/queries/0_stateless/03128_merge_tree_index_lazy_load.reference
+++ b/tests/queries/0_stateless/03128_merge_tree_index_lazy_load.reference
@@ -1,7 +1,7 @@
 0	0	0
-1	4	4
-2	8	8
-3	9	9
+1	4	0
+2	8	0
+3	9	0
 0	0	0
 1	4	0
 2	8	0
diff --git a/tests/queries/0_stateless/03273_primary_index_cache.reference b/tests/queries/0_stateless/03273_primary_index_cache.reference
new file mode 100644
index 000000000000..611787366ee8
--- /dev/null
+++ b/tests/queries/0_stateless/03273_primary_index_cache.reference
@@ -0,0 +1,16 @@
+0
+PrimaryIndexCacheBytes	0
+PrimaryIndexCacheFiles	0
+99
+0
+PrimaryIndexCacheBytes	1280
+PrimaryIndexCacheFiles	2
+0
+PrimaryIndexCacheBytes	0
+PrimaryIndexCacheFiles	0
+49
+0
+PrimaryIndexCacheBytes	640
+PrimaryIndexCacheFiles	1
+2	160	1280
+1	80	640
diff --git a/tests/queries/0_stateless/03273_primary_index_cache.sql b/tests/queries/0_stateless/03273_primary_index_cache.sql
new file mode 100644
index 000000000000..04a03797bcbe
--- /dev/null
+++ b/tests/queries/0_stateless/03273_primary_index_cache.sql
@@ -0,0 +1,45 @@
+-- Tags: no-parallel
+
+DROP TABLE IF EXISTS t_primary_index_cache;
+
+CREATE TABLE t_primary_index_cache (a UInt64, b UInt64)
+ENGINE = MergeTree ORDER BY a PARTITION BY a % 2
+SETTINGS use_primary_key_cache = 1, prewarm_primary_key_cache = 0, index_granularity = 64, index_granularity_bytes = '10M', min_bytes_for_wide_part = 0;
+
+SYSTEM DROP PRIMARY INDEX CACHE;
+
+INSERT INTO t_primary_index_cache SELECT number, number FROM numbers(10000);
+
+SYSTEM RELOAD ASYNCHRONOUS METRICS;
+SELECT sum(primary_key_bytes_in_memory) FROM system.parts WHERE table = 't_primary_index_cache' AND active;
+SELECT metric, value FROM system.asynchronous_metrics WHERE metric IN ('PrimaryIndexCacheFiles', 'PrimaryIndexCacheBytes') ORDER BY metric;
+
+SELECT count() FROM t_primary_index_cache WHERE a > 100 AND a < 200;
+
+SYSTEM RELOAD ASYNCHRONOUS METRICS;
+SELECT sum(primary_key_bytes_in_memory) FROM system.parts WHERE table = 't_primary_index_cache' AND active;
+SELECT metric, value FROM system.asynchronous_metrics WHERE metric IN ('PrimaryIndexCacheFiles', 'PrimaryIndexCacheBytes') ORDER BY metric;
+
+SYSTEM DROP PRIMARY INDEX CACHE;
+
+SYSTEM RELOAD ASYNCHRONOUS METRICS;
+SELECT sum(primary_key_bytes_in_memory) FROM system.parts WHERE table = 't_primary_index_cache' AND active;
+SELECT metric, value FROM system.asynchronous_metrics WHERE metric IN ('PrimaryIndexCacheFiles', 'PrimaryIndexCacheBytes') ORDER BY metric;
+
+SELECT count() FROM t_primary_index_cache WHERE a > 100 AND a < 200 AND a % 2 = 0;
+
+SYSTEM RELOAD ASYNCHRONOUS METRICS;
+SELECT sum(primary_key_bytes_in_memory) FROM system.parts WHERE table = 't_primary_index_cache' AND active;
+SELECT metric, value FROM system.asynchronous_metrics WHERE metric IN ('PrimaryIndexCacheFiles', 'PrimaryIndexCacheBytes') ORDER BY metric;
+
+SYSTEM FLUSH LOGS;
+
+SELECT
+    ProfileEvents['LoadedPrimaryIndexFiles'],
+    ProfileEvents['LoadedPrimaryIndexRows'],
+    ProfileEvents['LoadedPrimaryIndexBytes']
+FROM system.query_log
+WHERE query LIKE 'SELECT count() FROM t_primary_index_cache%' AND current_database = currentDatabase() AND type = 'QueryFinish'
+ORDER BY event_time_microseconds;
+
+DROP TABLE t_primary_index_cache;
diff --git a/tests/queries/0_stateless/03274_prewarm_primary_index_cache.reference b/tests/queries/0_stateless/03274_prewarm_primary_index_cache.reference
new file mode 100644
index 000000000000..1a9e1167eb4a
--- /dev/null
+++ b/tests/queries/0_stateless/03274_prewarm_primary_index_cache.reference
@@ -0,0 +1,22 @@
+449
+0
+449
+0
+898
+898
+0
+898
+898
+0
+898
+0
+898
+0
+0
+0
+0
+0
+0
+0
+1
+0
diff --git a/tests/queries/0_stateless/03274_prewarm_primary_index_cache.sql b/tests/queries/0_stateless/03274_prewarm_primary_index_cache.sql
new file mode 100644
index 000000000000..16e895a7798c
--- /dev/null
+++ b/tests/queries/0_stateless/03274_prewarm_primary_index_cache.sql
@@ -0,0 +1,74 @@
+-- Tags: no-parallel, no-shared-merge-tree
+
+DROP TABLE IF EXISTS t_prewarm_cache_rmt_1;
+DROP TABLE IF EXISTS t_prewarm_cache_rmt_2;
+
+CREATE TABLE t_prewarm_cache_rmt_1 (a UInt64, b UInt64, c UInt64)
+ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/03274_prewarm_mark_cache_smt/t_prewarm_cache', '1')
+ORDER BY a PARTITION BY a % 2
+SETTINGS prewarm_primary_key_cache = 1, use_primary_key_cache = 1;
+
+CREATE TABLE t_prewarm_cache_rmt_2 (a UInt64, b UInt64, c UInt64)
+ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/03274_prewarm_mark_cache_smt/t_prewarm_cache', '2')
+ORDER BY a PARTITION BY a % 2
+SETTINGS prewarm_primary_key_cache = 1, use_primary_key_cache = 1;
+
+SYSTEM DROP PRIMARY INDEX CACHE;
+SYSTEM STOP FETCHES t_prewarm_cache_rmt_2;
+
+-- Check that prewarm works on insert.
+INSERT INTO t_prewarm_cache_rmt_1 SELECT number, rand(), rand() FROM numbers(20000);
+
+SELECT count() FROM t_prewarm_cache_rmt_1 WHERE a % 2 = 0 AND a > 100 AND a < 1000;
+SELECT sum(primary_key_bytes_in_memory) FROM system.parts WHERE database = currentDatabase() AND table IN ('t_prewarm_cache_rmt_1', 't_prewarm_cache_rmt_2');
+
+-- Check that prewarm works on fetch.
+SYSTEM DROP PRIMARY INDEX CACHE;
+SYSTEM START FETCHES t_prewarm_cache_rmt_2;
+SYSTEM SYNC REPLICA t_prewarm_cache_rmt_2;
+
+SELECT count() FROM t_prewarm_cache_rmt_2 WHERE a % 2 = 0 AND a > 100 AND a < 1000;
+SELECT sum(primary_key_bytes_in_memory) FROM system.parts WHERE database = currentDatabase() AND table IN ('t_prewarm_cache_rmt_1', 't_prewarm_cache_rmt_2');
+
+-- Check that prewarm works on merge.
+INSERT INTO t_prewarm_cache_rmt_1 SELECT number, rand(), rand() FROM numbers(20000);
+OPTIMIZE TABLE t_prewarm_cache_rmt_1 FINAL;
+
+SYSTEM SYNC REPLICA t_prewarm_cache_rmt_2;
+
+SELECT count() FROM t_prewarm_cache_rmt_1 WHERE a % 2 = 0 AND a > 100 AND a < 1000;
+SELECT count() FROM t_prewarm_cache_rmt_2 WHERE a % 2 = 0 AND a > 100 AND a < 1000;
+SELECT sum(primary_key_bytes_in_memory) FROM system.parts WHERE database = currentDatabase() AND table IN ('t_prewarm_cache_rmt_1', 't_prewarm_cache_rmt_2');
+
+-- Check that prewarm works on restart.
+SYSTEM DROP PRIMARY INDEX CACHE;
+
+DETACH TABLE t_prewarm_cache_rmt_1;
+DETACH TABLE t_prewarm_cache_rmt_2;
+
+ATTACH TABLE t_prewarm_cache_rmt_1;
+ATTACH TABLE t_prewarm_cache_rmt_2;
+
+SELECT count() FROM t_prewarm_cache_rmt_1 WHERE a % 2 = 0 AND a > 100 AND a < 1000;
+SELECT count() FROM t_prewarm_cache_rmt_2 WHERE a % 2 = 0 AND a > 100 AND a < 1000;
+SELECT sum(primary_key_bytes_in_memory) FROM system.parts WHERE database = currentDatabase() AND table IN ('t_prewarm_cache_rmt_1', 't_prewarm_cache_rmt_2');
+
+SYSTEM DROP PRIMARY INDEX CACHE;
+
+SELECT count() FROM t_prewarm_cache_rmt_1 WHERE a % 2 = 0 AND a > 100 AND a < 1000;
+SELECT sum(primary_key_bytes_in_memory) FROM system.parts WHERE database = currentDatabase() AND table IN ('t_prewarm_cache_rmt_1', 't_prewarm_cache_rmt_2');
+
+--- Check that system query works.
+SYSTEM PREWARM PRIMARY INDEX CACHE t_prewarm_cache_rmt_1;
+
+SELECT count() FROM t_prewarm_cache_rmt_1 WHERE a % 2 = 0 AND a > 100 AND a < 1000;
+SELECT sum(primary_key_bytes_in_memory) FROM system.parts WHERE database = currentDatabase() AND table IN ('t_prewarm_cache_rmt_1', 't_prewarm_cache_rmt_2');
+
+SYSTEM FLUSH LOGS;
+
+SELECT ProfileEvents['LoadedPrimaryIndexFiles'] FROM system.query_log
+WHERE current_database = currentDatabase() AND type = 'QueryFinish' AND query LIKE 'SELECT count() FROM t_prewarm_cache%'
+ORDER BY event_time_microseconds;
+
+DROP TABLE IF EXISTS t_prewarm_cache_rmt_1;
+DROP TABLE IF EXISTS t_prewarm_cache_rmt_2;
