{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 68435,
  "instance_id": "ClickHouse__ClickHouse-68435",
  "issue_numbers": [
    "54965"
  ],
  "base_commit": "cb77472478f2fb41aaa0c83f90aadb8d1d9138e8",
  "patch": "diff --git a/src/Parsers/ExpressionListParsers.cpp b/src/Parsers/ExpressionListParsers.cpp\nindex d38dc6d5f370..ad6b8e13ea6a 100644\n--- a/src/Parsers/ExpressionListParsers.cpp\n+++ b/src/Parsers/ExpressionListParsers.cpp\n@@ -2811,8 +2811,8 @@ Action ParserExpressionImpl::tryParseOperator(Layers & layers, IParser::Pos & po\n     if (op.type == OperatorType::TupleElement)\n     {\n         ASTPtr tmp;\n-        if (asterisk_parser.parse(pos, tmp, expected) ||\n-            columns_matcher_parser.parse(pos, tmp, expected))\n+        if (asterisk_parser.parse(pos, tmp, expected)\n+            || columns_matcher_parser.parse(pos, tmp, expected))\n         {\n             if (auto * asterisk = tmp->as<ASTAsterisk>())\n             {\n@@ -2833,6 +2833,17 @@ Action ParserExpressionImpl::tryParseOperator(Layers & layers, IParser::Pos & po\n             layers.back()->pushOperand(std::move(tmp));\n             return Action::OPERATOR;\n         }\n+\n+        /// If it is an identifier,\n+        /// replace it with literal, because an expression `expr().elem`\n+        /// should be transformed to `tupleElement(expr(), 'elem')` for query analysis,\n+        /// otherwise the identifier `elem` will not be found.\n+        if (ParserIdentifier().parse(pos, tmp, expected))\n+        {\n+            layers.back()->pushOperator(op);\n+            layers.back()->pushOperand(std::make_shared<ASTLiteral>(tmp->as<ASTIdentifier>()->name()));\n+            return Action::OPERATOR;\n+        }\n     }\n \n     /// isNull & isNotNull are postfix unary operators\n@@ -2863,7 +2874,7 @@ Action ParserExpressionImpl::tryParseOperator(Layers & layers, IParser::Pos & po\n         layers.push_back(std::make_unique<ArrayElementLayer>());\n \n     if (op.type == OperatorType::StartBetween || op.type == OperatorType::StartNotBetween)\n-        layers.back()->between_counter++;\n+        ++layers.back()->between_counter;\n \n     return Action::OPERAND;\n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03224_tuple_element_identifier.reference b/tests/queries/0_stateless/03224_tuple_element_identifier.reference\nnew file mode 100644\nindex 000000000000..0fc9e7410c19\n--- /dev/null\n+++ b/tests/queries/0_stateless/03224_tuple_element_identifier.reference\n@@ -0,0 +1,4 @@\n+([('wtf')])\t[('wtf')]\twtf\n+([('wtf')])\t[('wtf')]\twtf\n+Hello\n+('Hello')\tHello\tHello\tHello\ndiff --git a/tests/queries/0_stateless/03224_tuple_element_identifier.sql b/tests/queries/0_stateless/03224_tuple_element_identifier.sql\nnew file mode 100644\nindex 000000000000..2a7fb9a97a3c\n--- /dev/null\n+++ b/tests/queries/0_stateless/03224_tuple_element_identifier.sql\n@@ -0,0 +1,13 @@\n+SET enable_analyzer = 1;\n+\n+SELECT JSONExtract('{\"hello\":[{\"world\":\"wtf\"}]}', 'Tuple(hello Array(Tuple(world String)))') AS x,\n+    x.hello, x.hello[1].world;\n+\n+SELECT JSONExtract('{\"hello\":[{\" wow \":\"wtf\"}]}', 'Tuple(hello Array(Tuple(` wow ` String)))') AS x,\n+    x.hello, x.hello[1].` wow `;\n+\n+SELECT JSONExtract('{\"hello\":[{\" wow \":\"wtf\"}]}', 'Tuple(hello Array(Tuple(` wow ` String)))') AS x,\n+    x.hello, x.hello[1].`wow`; -- { serverError NOT_FOUND_COLUMN_IN_BLOCK }\n+\n+SELECT ('Hello' AS world,).world;\n+SELECT ('Hello' AS world,) AS t, t.world, (t).world, identity(t).world;\n",
  "problem_statement": "The analyzer: named tuple element inside array don't always resolve\n```\r\nip-172-31-26-237.eu-central-1.compute.internal :) SELECT JSONExtract('{\"hello\":[{\"world\":\"wtf\"}]}', 'Tuple(hello Array(Tuple(world String)))') AS x, x.hello, x.hello[1].world SETTINGS allow_experimental_analyzer = 1\r\n\r\nSELECT\r\n    JSONExtract('{\"hello\":[{\"world\":\"wtf\"}]}', 'Tuple(hello Array(Tuple(world String)))') AS x,\r\n    x.hello,\r\n    tupleElement(x.hello[1], world)\r\nSETTINGS allow_experimental_analyzer = 1\r\n\r\nQuery id: 832974a1-0585-4606-a408-3ac1eb10f570\r\n\r\n\r\n0 rows in set. Elapsed: 0.041 sec. \r\n\r\nReceived exception:\r\nCode: 47. DB::Exception: Unknown expression or function identifier 'world' in scope SELECT JSONExtract('{\"hello\":[{\"world\":\"wtf\"}]}', 'Tuple(hello Array(Tuple(world String)))') AS x, x.hello, tupleElement(x.hello[1], world) SETTINGS allow_experimental_analyzer = 1. (UNKNOWN_IDENTIFIER)\r\n```\r\n\r\nBut this works:\r\n\r\n```\r\nip-172-31-26-237.eu-central-1.compute.internal :) SELECT JSONExtract('{\"hello\":[{\"world\":\"wtf\"}]}', 'Tuple(hello Array(Tuple(world String)))') AS x, x.hello, tupleElement(x.hello[1], 'world') SETTINGS allow_experimental_analyzer = 1\r\n\r\nSELECT\r\n    JSONExtract('{\"hello\":[{\"world\":\"wtf\"}]}', 'Tuple(hello Array(Tuple(world String)))') AS x,\r\n    x.hello,\r\n    tupleElement(x.hello[1], 'world')\r\nSETTINGS allow_experimental_analyzer = 1\r\n\r\nQuery id: b772a331-d83d-4c4e-ad8e-f269a57f9ec7\r\n\r\n\u250c\u2500x\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500x.hello\u2500\u2500\u2500\u252c\u2500tupleElement(arrayElement(x.hello, 1), 'world')\u2500\u2510\r\n\u2502 ([('wtf')]) \u2502 [('wtf')] \u2502 wtf                                             \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.002 sec.\r\n```\n",
  "hints_text": "Do you mean `x.hello[1].world`? It looks like a parsing issue: `x.hello[1].world` is replaced to `tupleElement(x.hello[1], world)`.\nYes, see the first line:\r\n\r\n```\r\nSELECT JSONExtract('{\"hello\":[{\"world\":\"wtf\"}]}', 'Tuple(hello Array(Tuple(world String)))') AS x, \r\n    x.hello, x.hello[1].world \r\nSETTINGS allow_experimental_analyzer = 1\r\n```\nThis is trivial:\r\n\r\n```\r\nmilovidov@milovidov-pc:~$ ch\r\nClickHouse local version 24.8.1.1.\r\n\r\n:) SELECT JSONExtract('{\"hello\":[{\"world\":\"wtf\"}]}', 'Tuple(hello Array(Tuple(world String)))') AS x, \r\n    x.hello, x.hello[1].world \r\n\r\nSELECT\r\n    JSONExtract('{\"hello\":[{\"world\":\"wtf\"}]}', 'Tuple(hello Array(Tuple(world String)))') AS x,\r\n    x.hello,\r\n    tupleElement(x.hello[1], world)\r\n\r\nQuery id: 3909982a-9f7d-4a7b-a046-6d879f731d17\r\n\r\n\r\nElapsed: 0.061 sec. \r\n\r\nReceived exception:\r\nCode: 47. DB::Exception: Unknown expression or function identifier 'world' in scope SELECT JSONExtract('{\"hello\":[{\"world\":\"wtf\"}]}', 'Tuple(hello Array(Tuple(world String)))') AS x, x.hello, tupleElement(x.hello[1], world). (UNKNOWN_IDENTIFIER)\r\n\r\n:) SELECT\r\n    JSONExtract('{\"hello\":[{\"world\":\"wtf\"}]}', 'Tuple(hello Array(Tuple(world String)))') AS x,\r\n    x.hello,\r\n    tupleElement(x.hello[1], 'world')\r\n\r\nSELECT\r\n    JSONExtract('{\"hello\":[{\"world\":\"wtf\"}]}', 'Tuple(hello Array(Tuple(world String)))') AS x,\r\n    x.hello,\r\n    tupleElement(x.hello[1], 'world')\r\n\r\nQuery id: b617cf49-39fa-4189-ba3a-50193b52e326\r\n\r\n   \u250c\u2500x\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500x.hello\u2500\u2500\u2500\u252c\u2500tupleElement(arrayElement(x.hello, 1), 'world')\u2500\u2510\r\n1. \u2502 ([('wtf')]) \u2502 [('wtf')] \u2502 wtf                                             \u2502\r\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.002 sec.\r\n```",
  "created_at": "2024-08-16T02:01:34Z"
}