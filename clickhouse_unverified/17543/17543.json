{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 17543,
  "instance_id": "ClickHouse__ClickHouse-17543",
  "issue_numbers": [
    "17279"
  ],
  "base_commit": "46e685e1b8e3e1150f978e885670dd058318924e",
  "patch": "diff --git a/base/daemon/SentryWriter.cpp b/base/daemon/SentryWriter.cpp\nindex 33f2b237dd56..b8f2e5073abc 100644\n--- a/base/daemon/SentryWriter.cpp\n+++ b/base/daemon/SentryWriter.cpp\n@@ -6,10 +6,12 @@\n \n #include <common/defines.h>\n #include <common/getFQDNOrHostName.h>\n+#include <common/getMemoryAmount.h>\n #include <common/logger_useful.h>\n \n #include <Common/SymbolIndex.h>\n #include <Common/StackTrace.h>\n+#include <Common/getNumberOfPhysicalCPUCores.h>\n \n #if !defined(ARCADIA_BUILD)\n #    include \"Common/config_version.h\"\n@@ -28,14 +30,13 @@ namespace\n \n bool initialized = false;\n bool anonymize = false;\n+std::string server_data_path;\n \n void setExtras()\n {\n-\n     if (!anonymize)\n-    {\n         sentry_set_extra(\"server_name\", sentry_value_new_string(getFQDNOrHostName().c_str()));\n-    }\n+\n     sentry_set_tag(\"version\", VERSION_STRING);\n     sentry_set_extra(\"version_githash\", sentry_value_new_string(VERSION_GITHASH));\n     sentry_set_extra(\"version_describe\", sentry_value_new_string(VERSION_DESCRIBE));\n@@ -44,6 +45,15 @@ void setExtras()\n     sentry_set_extra(\"version_major\", sentry_value_new_int32(VERSION_MAJOR));\n     sentry_set_extra(\"version_minor\", sentry_value_new_int32(VERSION_MINOR));\n     sentry_set_extra(\"version_patch\", sentry_value_new_int32(VERSION_PATCH));\n+    sentry_set_extra(\"version_official\", sentry_value_new_string(VERSION_OFFICIAL));\n+\n+    /// Sentry does not support 64-bit integers.\n+    sentry_set_extra(\"total_ram\", sentry_value_new_string(formatReadableSizeWithBinarySuffix(getMemoryAmountOrZero()).c_str()));\n+    sentry_set_extra(\"physical_cpu_cores\", sentry_value_new_int32(getNumberOfPhysicalCPUCores()));\n+\n+    if (!server_data_path.empty())\n+        sentry_set_extra(\"disk_free_space\", sentry_value_new_string(formatReadableSizeWithBinarySuffix(\n+            Poco::File(server_data_path).freeSpace()).c_str()));\n }\n \n void sentry_logger(sentry_level_e level, const char * message, va_list args, void *)\n@@ -98,6 +108,7 @@ void SentryWriter::initialize(Poco::Util::LayeredConfiguration & config)\n     }\n     if (enabled)\n     {\n+        server_data_path = config.getString(\"path\", \"\");\n         const std::filesystem::path & default_tmp_path = std::filesystem::path(config.getString(\"tmp_path\", Poco::Path::temp())) / \"sentry\";\n         const std::string & endpoint\n             = config.getString(\"send_crash_reports.endpoint\");\n",
  "test_patch": "diff --git a/tests/integration/test_grpc_protocol/configs/grpc_port.xml b/tests/integration/test_grpc_protocol/configs/grpc_port.xml\nindex 61922140bd3d..e4a8ba829f9d 100644\n--- a/tests/integration/test_grpc_protocol/configs/grpc_port.xml\n+++ b/tests/integration/test_grpc_protocol/configs/grpc_port.xml\n@@ -1,3 +1,3 @@\n <yandex>\n-    <grpc_port>9100</grpc_port>\n+    <grpc_port replace=\"replace\">9100</grpc_port>\n </yandex>\ndiff --git a/tests/integration/test_grpc_protocol_ssl/configs/grpc_config.xml b/tests/integration/test_grpc_protocol_ssl/configs/grpc_config.xml\nindex f40e73c5d996..396c8f9b7795 100644\n--- a/tests/integration/test_grpc_protocol_ssl/configs/grpc_config.xml\n+++ b/tests/integration/test_grpc_protocol_ssl/configs/grpc_config.xml\n@@ -1,6 +1,6 @@\n <yandex>\n-    <grpc_port>9100</grpc_port>\n-    <grpc>\n+    <grpc_port replace=\"replace\">9100</grpc_port>\n+    <grpc replace=\"replace\">\n         <enable_ssl>true</enable_ssl>\n \n         <!-- The following two files are used only if enable_ssl=1 -->\n",
  "problem_statement": "Write the number of CPU cores, memory amount, amount of free space in data dir to Sentry\n**Use case**\r\nIgnore reports from embarrassingly memory constrainted instances.\n",
  "hints_text": "",
  "created_at": "2020-11-29T08:32:29Z"
}