{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 63688,
  "instance_id": "ClickHouse__ClickHouse-63688",
  "issue_numbers": [
    "62594"
  ],
  "base_commit": "6c0450f8ffd30d9d069e8dea1c78f05e6042135f",
  "patch": "diff --git a/src/Interpreters/InterpreterSelectQueryAnalyzer.cpp b/src/Interpreters/InterpreterSelectQueryAnalyzer.cpp\nindex 539d7a59f6f1..d4af111eec04 100644\n--- a/src/Interpreters/InterpreterSelectQueryAnalyzer.cpp\n+++ b/src/Interpreters/InterpreterSelectQueryAnalyzer.cpp\n@@ -5,6 +5,8 @@\n #include <Parsers/ASTSelectQuery.h>\n #include <Parsers/ASTExpressionList.h>\n #include <Parsers/ASTSubquery.h>\n+#include <Parsers/ASTTablesInSelectQuery.h>\n+#include <Parsers/ASTIdentifier.h>\n \n #include <DataTypes/DataTypesNumber.h>\n \n@@ -38,22 +40,47 @@ namespace ErrorCodes\n namespace\n {\n \n-ASTPtr normalizeAndValidateQuery(const ASTPtr & query)\n+ASTPtr normalizeAndValidateQuery(const ASTPtr & query, const Names & column_names)\n {\n+    ASTPtr result_query;\n+\n     if (query->as<ASTSelectWithUnionQuery>() || query->as<ASTSelectQuery>())\n-    {\n-        return query;\n-    }\n+        result_query = query;\n     else if (auto * subquery = query->as<ASTSubquery>())\n-    {\n-        return subquery->children[0];\n-    }\n+        result_query = subquery->children[0];\n     else\n-    {\n         throw Exception(ErrorCodes::UNSUPPORTED_METHOD,\n             \"Expected ASTSelectWithUnionQuery or ASTSelectQuery. Actual {}\",\n             query->formatForErrorMessage());\n-    }\n+\n+    if (column_names.empty())\n+        return result_query;\n+\n+    /// The initial query the VIEW references to is wrapped here with another SELECT query to allow reading only necessary columns.\n+    auto select_query = std::make_shared<ASTSelectQuery>();\n+\n+    auto result_table_expression_ast = std::make_shared<ASTTableExpression>();\n+    result_table_expression_ast->children.push_back(std::make_shared<ASTSubquery>(std::move(result_query)));\n+    result_table_expression_ast->subquery = result_table_expression_ast->children.back();\n+\n+    auto tables_in_select_query_element_ast = std::make_shared<ASTTablesInSelectQueryElement>();\n+    tables_in_select_query_element_ast->children.push_back(std::move(result_table_expression_ast));\n+    tables_in_select_query_element_ast->table_expression = tables_in_select_query_element_ast->children.back();\n+\n+    ASTPtr tables_in_select_query_ast = std::make_shared<ASTTablesInSelectQuery>();\n+    tables_in_select_query_ast->children.push_back(std::move(tables_in_select_query_element_ast));\n+\n+    select_query->setExpression(ASTSelectQuery::Expression::TABLES, std::move(tables_in_select_query_ast));\n+\n+    auto projection_expression_list_ast = std::make_shared<ASTExpressionList>();\n+    projection_expression_list_ast->children.reserve(column_names.size());\n+\n+    for (const auto & column_name : column_names)\n+        projection_expression_list_ast->children.push_back(std::make_shared<ASTIdentifier>(column_name));\n+\n+    select_query->setExpression(ASTSelectQuery::Expression::SELECT, std::move(projection_expression_list_ast));\n+\n+    return select_query;\n }\n \n ContextMutablePtr buildContext(const ContextPtr & context, const SelectQueryOptions & select_query_options)\n@@ -125,8 +152,9 @@ QueryTreeNodePtr buildQueryTreeAndRunPasses(const ASTPtr & query,\n InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(\n     const ASTPtr & query_,\n     const ContextPtr & context_,\n-    const SelectQueryOptions & select_query_options_)\n-    : query(normalizeAndValidateQuery(query_))\n+    const SelectQueryOptions & select_query_options_,\n+    const Names & column_names)\n+    : query(normalizeAndValidateQuery(query_, column_names))\n     , context(buildContext(context_, select_query_options_))\n     , select_query_options(select_query_options_)\n     , query_tree(buildQueryTreeAndRunPasses(query, select_query_options, context, nullptr /*storage*/))\n@@ -138,8 +166,9 @@ InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(\n     const ASTPtr & query_,\n     const ContextPtr & context_,\n     const StoragePtr & storage_,\n-    const SelectQueryOptions & select_query_options_)\n-    : query(normalizeAndValidateQuery(query_))\n+    const SelectQueryOptions & select_query_options_,\n+    const Names & column_names)\n+    : query(normalizeAndValidateQuery(query_, column_names))\n     , context(buildContext(context_, select_query_options_))\n     , select_query_options(select_query_options_)\n     , query_tree(buildQueryTreeAndRunPasses(query, select_query_options, context, storage_))\ndiff --git a/src/Interpreters/InterpreterSelectQueryAnalyzer.h b/src/Interpreters/InterpreterSelectQueryAnalyzer.h\nindex 2ad7e6a50f30..73c524cbe282 100644\n--- a/src/Interpreters/InterpreterSelectQueryAnalyzer.h\n+++ b/src/Interpreters/InterpreterSelectQueryAnalyzer.h\n@@ -16,7 +16,8 @@ class InterpreterSelectQueryAnalyzer : public IInterpreter\n     /// Initialize interpreter with query AST\n     InterpreterSelectQueryAnalyzer(const ASTPtr & query_,\n         const ContextPtr & context_,\n-        const SelectQueryOptions & select_query_options_);\n+        const SelectQueryOptions & select_query_options_,\n+        const Names & column_names = {});\n \n     /** Initialize interpreter with query AST and storage.\n       * After query tree is built left most table expression is replaced with table node that\n@@ -25,7 +26,8 @@ class InterpreterSelectQueryAnalyzer : public IInterpreter\n     InterpreterSelectQueryAnalyzer(const ASTPtr & query_,\n         const ContextPtr & context_,\n         const StoragePtr & storage_,\n-        const SelectQueryOptions & select_query_options_);\n+        const SelectQueryOptions & select_query_options_,\n+        const Names & column_names = {});\n \n     /** Initialize interpreter with query tree.\n       * No query tree passes are applied.\ndiff --git a/src/Storages/StorageView.cpp b/src/Storages/StorageView.cpp\nindex db568a1d5ab2..016de94c17cf 100644\n--- a/src/Storages/StorageView.cpp\n+++ b/src/Storages/StorageView.cpp\n@@ -164,7 +164,7 @@ void StorageView::read(\n \n     if (context->getSettingsRef().allow_experimental_analyzer)\n     {\n-        InterpreterSelectQueryAnalyzer interpreter(current_inner_query, getViewContext(context, storage_snapshot), options);\n+        InterpreterSelectQueryAnalyzer interpreter(current_inner_query, getViewContext(context, storage_snapshot), options, column_names);\n         interpreter.addStorageLimits(*query_info.storage_limits);\n         query_plan = std::move(interpreter).extractQueryPlan();\n     }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01952_optimize_distributed_group_by_sharding_key.reference b/tests/queries/0_stateless/01952_optimize_distributed_group_by_sharding_key.reference\nindex 212dd348edb7..5acefdb365e9 100644\n--- a/tests/queries/0_stateless/01952_optimize_distributed_group_by_sharding_key.reference\n+++ b/tests/queries/0_stateless/01952_optimize_distributed_group_by_sharding_key.reference\n@@ -77,7 +77,7 @@ Expression (Project names)\n   Distinct (DISTINCT)\n     Union\n       Distinct (Preliminary DISTINCT)\n-        Expression ((Projection + (Change column names to column identifiers + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Project names + (Projection + Change column names to column identifiers)))))))\n+        Expression ((Projection + (Change column names to column identifiers + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Project names + (Projection + (Change column names to column identifiers + (Project names + (Projection + Change column names to column identifiers))))))))))\n           ReadFromSystemNumbers\n       ReadFromRemote (Read from remote replica)\n explain select distinct k1, k2 from remote('127.{1,2}', view(select 1 k1, 2 k2, 3 v from numbers(2)), cityHash64(k1, k2)); -- optimized\n@@ -85,7 +85,7 @@ Union\n   Expression (Project names)\n     Distinct (DISTINCT)\n       Distinct (Preliminary DISTINCT)\n-        Expression ((Projection + (Change column names to column identifiers + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Project names + (Projection + Change column names to column identifiers)))))))\n+        Expression ((Projection + (Change column names to column identifiers + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Project names + (Projection + (Change column names to column identifiers + (Project names + (Projection + Change column names to column identifiers))))))))))\n           ReadFromSystemNumbers\n   ReadFromRemote (Read from remote replica)\n explain select distinct on (k1) k2 from remote('127.{1,2}', view(select 1 k1, 2 k2, 3 v from numbers(2)), cityHash64(k1, k2)); -- not optimized\n@@ -94,7 +94,7 @@ Expression (Project names)\n     Union\n       Expression (Before LIMIT BY)\n         LimitBy\n-          Expression ((Before LIMIT BY + (Projection + (Change column names to column identifiers + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Project names + (Projection + Change column names to column identifiers))))))))\n+          Expression ((Before LIMIT BY + (Projection + (Change column names to column identifiers + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Project names + (Projection + (Change column names to column identifiers + (Project names + (Projection + Change column names to column identifiers)))))))))))\n             ReadFromSystemNumbers\n       Expression\n         ReadFromRemote (Read from remote replica)\n@@ -102,7 +102,7 @@ explain select distinct on (k1, k2) v from remote('127.{1,2}', view(select 1 k1,\n Union\n   Expression (Project names)\n     LimitBy\n-      Expression ((Before LIMIT BY + (Projection + (Change column names to column identifiers + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Project names + (Projection + Change column names to column identifiers))))))))\n+      Expression ((Before LIMIT BY + (Projection + (Change column names to column identifiers + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Project names + (Projection + (Change column names to column identifiers + (Project names + (Projection + Change column names to column identifiers)))))))))))\n         ReadFromSystemNumbers\n   ReadFromRemote (Read from remote replica)\n explain select distinct k1 from remote('127.{1,2}', view(select 1 k1, 2 k2, 3 v from numbers(2)), cityHash64(k1, k2)) order by v; -- not optimized\n@@ -113,7 +113,7 @@ Expression (Project names)\n         Sorting (Sorting for ORDER BY)\n           Expression (Before ORDER BY)\n             Distinct (Preliminary DISTINCT)\n-              Expression ((Projection + (Change column names to column identifiers + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Project names + (Projection + Change column names to column identifiers)))))))\n+              Expression ((Projection + (Change column names to column identifiers + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Project names + (Projection + (Change column names to column identifiers + (Project names + (Projection + Change column names to column identifiers))))))))))\n                 ReadFromSystemNumbers\n         ReadFromRemote (Read from remote replica)\n explain select distinct k1, k2 from remote('127.{1,2}', view(select 1 k1, 2 k2, 3 v from numbers(2)), cityHash64(k1, k2)) order by v; -- optimized\n@@ -124,7 +124,7 @@ Expression (Project names)\n         Sorting (Sorting for ORDER BY)\n           Expression (Before ORDER BY)\n             Distinct (Preliminary DISTINCT)\n-              Expression ((Projection + (Change column names to column identifiers + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Project names + (Projection + Change column names to column identifiers)))))))\n+              Expression ((Projection + (Change column names to column identifiers + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Project names + (Projection + (Change column names to column identifiers + (Project names + (Projection + Change column names to column identifiers))))))))))\n                 ReadFromSystemNumbers\n       ReadFromRemote (Read from remote replica)\n explain select distinct on (k1) k2 from remote('127.{1,2}', view(select 1 k1, 2 k2, 3 v from numbers(2)), cityHash64(k1, k2)) order by v; -- not optimized\n@@ -134,9 +134,9 @@ Expression (Project names)\n       Sorting (Merge sorted streams for ORDER BY, without aggregation)\n         Union\n           LimitBy\n-            Expression ((Before LIMIT BY + (Before ORDER BY + (Projection + (Change column names to column identifiers + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Project names + (Projection + Change column names to column identifiers))))))) [lifted up part]))\n+            Expression ((Before LIMIT BY + (Before ORDER BY + (Projection + (Change column names to column identifiers + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Project names + (Projection + (Change column names to column identifiers + (Project names + (Projection + Change column names to column identifiers)))))))))) [lifted up part]))\n               Sorting (Sorting for ORDER BY)\n-                Expression ((Before ORDER BY + (Projection + (Change column names to column identifiers + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Project names + (Projection + Change column names to column identifiers))))))))\n+                Expression ((Before ORDER BY + (Projection + (Change column names to column identifiers + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Project names + (Projection + (Change column names to column identifiers + (Project names + (Projection + Change column names to column identifiers)))))))))))\n                   ReadFromSystemNumbers\n           ReadFromRemote (Read from remote replica)\n explain select distinct on (k1, k2) v from remote('127.{1,2}', view(select 1 k1, 2 k2, 3 v from numbers(2)), cityHash64(k1, k2)) order by v; -- optimized\n@@ -144,8 +144,8 @@ Expression (Project names)\n   Sorting (Merge sorted streams after aggregation stage for ORDER BY)\n     Union\n       LimitBy\n-        Expression ((Before LIMIT BY + (Before ORDER BY + (Projection + (Change column names to column identifiers + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Project names + (Projection + Change column names to column identifiers))))))) [lifted up part]))\n+        Expression ((Before LIMIT BY + (Before ORDER BY + (Projection + (Change column names to column identifiers + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Project names + (Projection + (Change column names to column identifiers + (Project names + (Projection + Change column names to column identifiers)))))))))) [lifted up part]))\n           Sorting (Sorting for ORDER BY)\n-            Expression ((Before ORDER BY + (Projection + (Change column names to column identifiers + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Project names + (Projection + Change column names to column identifiers))))))))\n+            Expression ((Before ORDER BY + (Projection + (Change column names to column identifiers + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Project names + (Projection + (Change column names to column identifiers + (Project names + (Projection + Change column names to column identifiers)))))))))))\n               ReadFromSystemNumbers\n       ReadFromRemote (Read from remote replica)\ndiff --git a/tests/queries/0_stateless/03151_analyzer_view_read_only_necessary_columns.reference b/tests/queries/0_stateless/03151_analyzer_view_read_only_necessary_columns.reference\nnew file mode 100644\nindex 000000000000..0ec4e34ebfec\n--- /dev/null\n+++ b/tests/queries/0_stateless/03151_analyzer_view_read_only_necessary_columns.reference\n@@ -0,0 +1,8 @@\n+Expression ((Project names + Projection))\n+Header: sum(id) UInt64\n+  Aggregating\n+  Header: sum(__table1.id) UInt64\n+    Expression ((Before GROUP BY + (Change column names to column identifiers + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Project names + (Projection + (Change column names to column identifiers + (Project names + (Projection + Change column names to column identifiers))))))))))\n+    Header: __table1.id UInt64\n+      ReadFromPreparedSource (Read from NullSource)\n+      Header: id UInt64\ndiff --git a/tests/queries/0_stateless/03151_analyzer_view_read_only_necessary_columns.sql b/tests/queries/0_stateless/03151_analyzer_view_read_only_necessary_columns.sql\nnew file mode 100644\nindex 000000000000..40204b5cd039\n--- /dev/null\n+++ b/tests/queries/0_stateless/03151_analyzer_view_read_only_necessary_columns.sql\n@@ -0,0 +1,14 @@\n+DROP TABLE IF EXISTS test_table;\n+CREATE TABLE test_table\n+(\n+    id UInt64,\n+    value String\n+) ENGINE=MergeTree ORDER BY id;\n+\n+DROP VIEW IF EXISTS test_view;\n+CREATE VIEW test_view AS SELECT id, value FROM test_table;\n+\n+EXPLAIN header = 1 SELECT sum(id) FROM test_view settings allow_experimental_analyzer=1;\n+\n+DROP VIEW test_view;\n+DROP TABLE test_table;\n",
  "problem_statement": "Views very slow since upgrading to 24.3\n(you don't have to strictly follow this form)\r\n\r\n**Describe the situation**\r\nWe have several views which only point to a table.\r\n`CREATE VIEW v AS SELECT * FROM myTable`\r\nWe don't want our visualization tool (metabase) to directly access tables, in case we need to change something without changing the structure.\r\n\r\nSince 24.3 the performance of those views is very bad.\r\nWith version 24.2 running queries on the tables directly or the view was basically the same performance.\r\nNow, in 24.3, the views are several times slower.\r\nFrom what I could tell by checking things like htop during queries, the views now seem to load the entire table into RAM before doing anything.\r\nRAM and CPU spike massively during the query. \r\n\r\n**How to reproduce**\r\n* **Which ClickHouse server version to use** \r\n24.3\r\n* **Which interface to use, if matters**\r\nDoesn't matter. I could reproduce it with clickhouse-client and HTTP interface. Did not try other, but most likely same problem.\r\n* **Non-default settings, if any**\r\nNone\r\n* **`CREATE TABLE` statements for all tables involved**\r\nI was able to reproduce the problem with your sample dataset _UK property prices_\r\nhttps://clickhouse.com/docs/en/getting-started/example-datasets/uk-price-paid\r\n* **Sample data for all these tables, use [clickhouse-obfuscator]**\r\nData from the sample.\r\n* **Queries to run that lead to slow performance**\r\n`SELECT max(price) FROM uk_price_paid`\r\nThis takes around 15ms on my machine\r\n`CREATE VIEW priceView AS SELECT * FROM uk_price_paid`\r\n`SELECT max(price) FROM priceView`\r\nThis takes roughly 100ms on my machine with 24.3.\r\nWith 24.2 same performance as direct query on the table.\r\nThe bigger the table, the bigger the performance difference between view and table.\r\nMost likely due loading it all first.\r\n\r\n**Expected performance**\r\nView and table should have same performance as it has been the case in 24.2 and earlier.\r\n\n",
  "hints_text": "Can you test with\r\n\r\n`set allow_experimental_analyzer=0`\npls compare `explain pipeline` for both versions\n> Can you test with\r\n> \r\n> `set allow_experimental_analyzer=0`\r\n\r\nThis does it. Query times on the view are back to 24.2 values\r\n\r\n\r\n\r\n> pls compare `explain pipeline` for both versions\r\n\r\n**24.2**\r\n\r\n- Expression ((Projection + Before ORDER BY))                                                                                                                               \r\n- Aggregating                                                                                                                                                             \r\n- Expression ((Before GROUP BY + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Projection + Before ORDER BY)))))\r\n- ReadFromMergeTree (test.uk_price_paid)                                                                                                                              \r\n\r\n**24.3**\r\n\r\n- Expression ((Project names + Projection))\r\n- Aggregating\r\n- Expression ((Before GROUP BY + (Change column names to column identifiers + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Project names + (Projection + Change column names to column identifiers)))))))\r\n- ReadFromMergeTree (test.uk_price_paid)\n> > Can you test with\r\n> > `set allow_experimental_analyzer=0`\r\n> \r\n> This does it. Very times on the view are back to 24.2 values\r\n> \r\n> > pls compare `explain pipeline` for both versions\r\n> \r\n> **24.2**\r\n> \r\n> * Expression ((Projection + Before ORDER BY))\r\n> * Aggregating\r\n> * Expression ((Before GROUP BY + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Projection + Before ORDER BY)))))\r\n> * ReadFromMergeTree (test.uk_price_paid)\r\n> \r\n> **24.3**\r\n> \r\n> * Expression ((Project names + Projection))\r\n> * Aggregating\r\n> * Expression ((Before GROUP BY + (Change column names to column identifiers + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Project names + (Projection + Change column names to column identifiers)))))))\r\n> * ReadFromMergeTree (test.uk_price_paid)\r\n\r\nit is not the exact `explain pipeline` output, right. in particular it doesn't show the number of transforms for each step. \nSorry, I only did `explain` not `explain pipeline`.\r\n\r\nThis should be correct now\r\n24.2\r\n![Screenshot 2024-04-15 at 10 29 31](https://github.com/ClickHouse/ClickHouse/assets/24433671/60170963-f21b-450c-8a56-d45a24757a52)\r\n\r\n\r\n24.3\r\n![Screenshot 2024-04-15 at 10 26 45](https://github.com/ClickHouse/ClickHouse/assets/24433671/7b169467-a36c-451c-8203-7e3ee7df1659)\r\n\r\n\n``` sql\r\nEXPLAIN header = 1\r\nSELECT max(price)\r\nFROM uk_price_paid_view\r\nSETTINGS allow_experimental_analyzer = 0\r\n\r\n   \u250c\u2500explain\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n1. \u2502 Expression ((Projection + Before ORDER BY))                                                                                                                                \u2502\r\n2. \u2502 Header: max(price) UInt32                                                                                                                                                  \u2502\r\n3. \u2502   Aggregating                                                                                                                                                              \u2502\r\n4. \u2502   Header: max(price) UInt32                                                                                                                                                \u2502\r\n5. \u2502     Expression ((Before GROUP BY + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Projection + Before ORDER BY))))) \u2502\r\n6. \u2502     Header: price UInt32                                                                                                                                                   \u2502\r\n7. \u2502       ReadFromMergeTree (default.uk_price_paid)                                                                                                                            \u2502\r\n8. \u2502       Header: price UInt32                                                                                                                                                 \u2502\r\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n``` sql\r\nEXPLAIN header = 1\r\nSELECT max(price)\r\nFROM uk_price_paid_view\r\nSETTINGS allow_experimental_analyzer = 1\r\n\r\n    \u250c\u2500explain\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n 1. \u2502 Expression ((Project names + Projection))                                                                                                                                                                                                                  \u2502\r\n 2. \u2502 Header: max(price) UInt32                                                                                                                                                                                                                                  \u2502\r\n 3. \u2502   Aggregating                                                                                                                                                                                                                                              \u2502\r\n 4. \u2502   Header: max(__table1.price) UInt32                                                                                                                                                                                                                       \u2502\r\n 5. \u2502     Expression ((Before GROUP BY + (Change column names to column identifiers + (Convert VIEW subquery result to VIEW table structure + (Materialize constants after VIEW subquery + (Project names + (Projection + Change column names to column identifiers))))))) \u2502\r\n 6. \u2502     Header: __table1.price UInt32                                                                                                                                                                                                                          \u2502\r\n 7. \u2502       ReadFromMergeTree (default.uk_price_paid)                                                                                                                                                                                                            \u2502\r\n 8. \u2502       Header: price UInt32                                                                                                                                                                                                                                 \u2502\r\n 9. \u2502               date Date                                                                                                                                                                                                                                    \u2502\r\n10. \u2502               postcode1 LowCardinality(String)                                                                                                                                                                                                             \u2502\r\n11. \u2502               postcode2 LowCardinality(String)                                                                                                                                                                                                             \u2502\r\n12. \u2502               type Enum8('other' = 0, 'terraced' = 1, 'semi-detached' = 2, 'detached' = 3, 'flat' = 4)                                                                                                                                                     \u2502\r\n13. \u2502               is_new UInt8                                                                                                                                                                                                                                 \u2502\r\n14. \u2502               duration Enum8('unknown' = 0, 'freehold' = 1, 'leasehold' = 2)                                                                                                                                                                               \u2502\r\n15. \u2502               addr1 String                                                                                                                                                                                                                                 \u2502\r\n16. \u2502               addr2 String                                                                                                                                                                                                                                 \u2502\r\n17. \u2502               street LowCardinality(String)                                                                                                                                                                                                                \u2502\r\n18. \u2502               locality LowCardinality(String)                                                                                                                                                                                                              \u2502\r\n19. \u2502               town LowCardinality(String)                                                                                                                                                                                                                  \u2502\r\n20. \u2502               district LowCardinality(String)                                                                                                                                                                                                              \u2502\r\n21. \u2502               county LowCardinality(String)                                                                                                                                                                                                                \u2502\r\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nwe read unneeded columns. as far as I see we don't have the same parameter (required cols) in new interpreter, probably this logic just not implemented.\r\n\r\nhttps://github.com/ClickHouse/ClickHouse/blob/c17536c3b31ca48cdd1771266d8385628de622e5/src/Storages/StorageView.cpp#L165-L176\n@novikd could you pls take a look. maybe all the needed code is already in place and it is easy to fix\nFor us the new analyzer is unusable \u2014 most probably due to this. We use views with a lot of columns extensively.\n\nServer becomes unresponsive since all CPU and memory is consumed when running queries with `allow_experimental_analyzer = 1`. ",
  "created_at": "2024-05-13T10:42:51Z"
}