{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 50536,
  "instance_id": "ClickHouse__ClickHouse-50536",
  "issue_numbers": [
    "50530"
  ],
  "base_commit": "aa19b2fc407e2b0452a8fd23ca623febcec43d8c",
  "patch": "diff --git a/src/Parsers/ExpressionElementParsers.cpp b/src/Parsers/ExpressionElementParsers.cpp\nindex 28cef51e571e..3a7e8790bb47 100644\n--- a/src/Parsers/ExpressionElementParsers.cpp\n+++ b/src/Parsers/ExpressionElementParsers.cpp\n@@ -829,7 +829,11 @@ static bool parseNumber(char * buffer, size_t size, bool negative, int base, Fie\n \n     if (pos_integer == buffer + size && errno != ERANGE && (!negative || uint_value <= (1ULL << 63)))\n     {\n-        if (negative)\n+        /// -0 should be still parsed as UInt instead of Int,\n+        /// because otherwise it is not preserved during formatting-parsing roundtrip\n+        /// (the signedness is lost during formatting)\n+\n+        if (negative && uint_value != 0)\n             res = static_cast<Int64>(-uint_value);\n         else\n             res = uint_value;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02782_inconsistent_formatting_and_constant_folding.reference b/tests/queries/0_stateless/02782_inconsistent_formatting_and_constant_folding.reference\nnew file mode 100644\nindex 000000000000..39d23aa2298f\n--- /dev/null\n+++ b/tests/queries/0_stateless/02782_inconsistent_formatting_and_constant_folding.reference\n@@ -0,0 +1,4 @@\n+0\tUInt8\t-1\tInt8\t-0\tFloat64\n+0\n+0\n+0\ndiff --git a/tests/queries/0_stateless/02782_inconsistent_formatting_and_constant_folding.sql b/tests/queries/0_stateless/02782_inconsistent_formatting_and_constant_folding.sql\nnew file mode 100644\nindex 000000000000..31278862ab88\n--- /dev/null\n+++ b/tests/queries/0_stateless/02782_inconsistent_formatting_and_constant_folding.sql\n@@ -0,0 +1,41 @@\n+SELECT -0, toTypeName(-0), -1, toTypeName(-1), -0., toTypeName(-0.);\n+\n+DROP TABLE IF EXISTS t4;\n+DROP TABLE IF EXISTS t7;\n+\n+create table t4 (c26 String) engine = Log;\n+create view t7 as select max(ref_3.c26) as c_2_c46_1 from t4 as ref_3;\n+\n+select\n+        c_7_c4585_14 as c_4_c4593_5\n+      from\n+        (select\n+              avg(0) as c_7_c4572_1,\n+              max(-0) as c_7_c4585_14\n+            from\n+              t7 as ref_0\n+            group by ref_0.c_2_c46_1) as subq_0\n+where c_4_c4593_5 <= multiIf(true, 1, exp10(c_4_c4593_5) <= 1, 1, 1);\n+\n+select x as c\n+      from\n+        (select 1 AS k,\n+              max(0) as a,\n+              max(-0) as x\n+            from\n+              t7 GROUP BY k)\n+where NOT ignore(c);\n+\n+SELECT x\n+FROM\n+(\n+    SELECT\n+        avg(0) AS c_7_c4572_1,\n+        max(-0) AS x\n+    FROM t7 AS ref_0\n+    GROUP BY ref_0.c_2_c46_1\n+)\n+WHERE x <= multiIf(true, 1, exp10(x) <= 1, 1, 1);\n+\n+DROP TABLE t7;\n+DROP TABLE t4;\n",
  "problem_statement": "Server crashes triggered at DB::FunctionMathUnary\n**Describe what's wrong**\r\n\r\nThe SELECT statement makes the server crash.\r\n\r\n**Does it reproduce on recent release?**\r\n\r\nIt can be reproduced in the latest version.\r\n\r\n**How to reproduce**\r\n\r\nVersion: 23.5.1 (commit eb5985e5fc0e83c94aa1af134f2718e9fe87979c)\r\n\r\nEasy reproduce in ClickHouse fiddle: https://fiddle.clickhouse.com/528f832d-a684-4553-88ac-5ab0c660c4b3\r\n\r\n_Set up database_\r\n\r\n```sql\r\ncreate table t4 (c26 String) engine = Log;\r\ncreate view t7 as select max(ref_3.c26) as c_2_c46_1 from t4 as ref_3;\r\n```\r\n\r\n_SELECT statement_\r\n\r\n```sql\r\nselect 1\r\nfrom \r\n  (select    \r\n        subq_0.c_7_c4585_14 as c_4_c4593_5\r\n      from \r\n        (select  \r\n              avg(0) as c_7_c4572_1,  \r\n              max(-0) as c_7_c4585_14\r\n            from \r\n              t7 as ref_0\r\n            group by ref_0.c_2_c46_1) as subq_0\r\n  ) as subq_1\r\nwhere subq_1.c_4_c4593_5 <= multiIf(true, 1, exp10(subq_1.c_4_c4593_5) <= 1, 1, 1);\r\n```\r\n\r\n**Expected behavior**\r\n\r\nNo crash.\r\n\r\n**Actual behavior**\r\n\r\nThe server crashes.\r\n\r\nThe log:\r\n```\r\n[b6ac46c27d64] 2023.06.03 14:56:32.750565 [ 237202 ] <Fatal> BaseDaemon: ########################################\r\n[b6ac46c27d64] 2023.06.03 14:56:32.750713 [ 237202 ] <Fatal> BaseDaemon: (version 23.5.1.1, build id: EF69E3BCB567A95743EEA735927D4FA6876C5FC2) (from thread 236859) (query_id: 06128d92-cc10-467a-ada3-a531eb45aca2) (query: select 1\r\nfrom \r\n  (select    \r\n        subq_0.c_7_c4585_14 as c_4_c4593_5\r\n      from \r\n        (select  \r\n              avg(0) as c_7_c4572_1,  \r\n              max(-0) as c_7_c4585_14\r\n            from \r\n              t7 as ref_0\r\n            group by ref_0.c_2_c46_1) as subq_0\r\n  ) as subq_1\r\nwhere subq_1.c_4_c4593_5 <= multiIf(true, 1, exp10(subq_1.c_4_c4593_5) <= 1, 1, 1);) Received signal Segmentation fault (11)\r\n[b6ac46c27d64] 2023.06.03 14:56:32.750776 [ 237202 ] <Fatal> BaseDaemon: Address: 0x10. Access: read. Address not mapped to object.\r\n[b6ac46c27d64] 2023.06.03 14:56:32.750828 [ 237202 ] <Fatal> BaseDaemon: Stack trace: 0x000000000e432754 0x000000000cb6924a 0x000000000cb68f0e 0x0000000015ff926f 0x0000000015ff9b0f 0x0000000015ffab79 0x00000000166d724b 0x00000000182f7a45 0x000000001843ead1 0x00000000170f62c0 0x00000000170eeaa2 0x00000000170ecfd4 0x0000000017171d38 0x0000000017172771 0x00000000174349e7 0x0000000017431cef 0x00000000180c8fa4 0x00000000180d92d9 0x000000001a695f07 0x000000001a6963ed 0x000000001a7fd0e7 0x000000001a7fad02 0x00007fbdfd11a609 0x00007fbdfd03f133\r\n[b6ac46c27d64] 2023.06.03 14:56:34.088144 [ 237202 ] <Fatal> BaseDaemon: 3. DB::FunctionMathUnary<DB::UnaryFunctionVectorized<DB::(anonymous namespace)::Exp10Name, &preciseExp10(double)>>::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000e432754 in /usr/bin/clickhouse\r\n[b6ac46c27d64] 2023.06.03 14:56:35.398375 [ 237202 ] <Fatal> BaseDaemon: 4. DB::IFunction::executeImplDryRun(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000cb6924a in /usr/bin/clickhouse\r\n[b6ac46c27d64] 2023.06.03 14:56:36.702568 [ 237202 ] <Fatal> BaseDaemon: 5. DB::FunctionToExecutableFunctionAdaptor::executeDryRunImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000cb68f0e in /usr/bin/clickhouse\r\n[b6ac46c27d64] 2023.06.03 14:56:36.723286 [ 237202 ] <Fatal> BaseDaemon: 6. ./build/./src/Functions/IFunction.cpp:0: DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x0000000015ff926f in /usr/bin/clickhouse\r\n[b6ac46c27d64] 2023.06.03 14:56:36.744257 [ 237202 ] <Fatal> BaseDaemon: 7.1. inlined from ./build/./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:115: intrusive_ptr\r\n[b6ac46c27d64] 2023.06.03 14:56:36.744343 [ 237202 ] <Fatal> BaseDaemon: 7.2. inlined from ./build/./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:122: boost::intrusive_ptr<DB::IColumn const>::operator=(boost::intrusive_ptr<DB::IColumn const>&&)\r\n[b6ac46c27d64] 2023.06.03 14:56:36.744380 [ 237202 ] <Fatal> BaseDaemon: 7.3. inlined from ./build/./src/Common/COW.h:136: COW<DB::IColumn>::immutable_ptr<DB::IColumn>::operator=(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&&)\r\n[b6ac46c27d64] 2023.06.03 14:56:36.744415 [ 237202 ] <Fatal> BaseDaemon: 7. ./build/./src/Functions/IFunction.cpp:302: DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x0000000015ff9b0f in /usr/bin/clickhouse\r\n[b6ac46c27d64] 2023.06.03 14:56:36.766996 [ 237202 ] <Fatal> BaseDaemon: 8. ./build/./src/Functions/IFunction.cpp:0: DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x0000000015ffab79 in /usr/bin/clickhouse\r\n[b6ac46c27d64] 2023.06.03 14:56:37.000715 [ 237202 ] <Fatal> BaseDaemon: 9.1. inlined from ./build/./src/Interpreters/ActionsDAG.cpp:0: DB::executeActionForHeader(DB::ActionsDAG::Node const*, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>)\r\n[b6ac46c27d64] 2023.06.03 14:56:37.000827 [ 237202 ] <Fatal> BaseDaemon: 9. ./build/./src/Interpreters/ActionsDAG.cpp:654: DB::ActionsDAG::updateHeader(DB::Block) const @ 0x00000000166d724b in /usr/bin/clickhouse\r\n[b6ac46c27d64] 2023.06.03 14:56:37.016996 [ 237202 ] <Fatal> BaseDaemon: 10. ./build/./src/Processors/Transforms/FilterTransform.cpp:44: DB::FilterTransform::transformHeader(DB::Block, DB::ActionsDAG const*, String const&, bool) @ 0x00000000182f7a45 in /usr/bin/clickhouse\r\n[b6ac46c27d64] 2023.06.03 14:56:37.041544 [ 237202 ] <Fatal> BaseDaemon: 11. ./build/./src/Processors/QueryPlan/FilterStep.cpp:0: DB::FilterStep::FilterStep(DB::DataStream const&, std::shared_ptr<DB::ActionsDAG> const&, String, bool) @ 0x000000001843ead1 in /usr/bin/clickhouse\r\n[b6ac46c27d64] 2023.06.03 14:56:37.223589 [ 237202 ] <Fatal> BaseDaemon: 12.1. inlined from ./build/./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:0: std::__unique_if<DB::FilterStep>::__unique_single std::make_unique[abi:v15000]<DB::FilterStep, DB::DataStream const&, std::shared_ptr<DB::ActionsDAG> const&, String, bool&>(DB::DataStream const&, std::shared_ptr<DB::ActionsDAG> const&, String&&, bool&)\r\n[b6ac46c27d64] 2023.06.03 14:56:37.223651 [ 237202 ] <Fatal> BaseDaemon: 12. ./build/./src/Interpreters/InterpreterSelectQuery.cpp:2543: DB::InterpreterSelectQuery::executeWhere(DB::QueryPlan&, std::shared_ptr<DB::ActionsDAG> const&, bool) @ 0x00000000170f62c0 in /usr/bin/clickhouse\r\n[b6ac46c27d64] 2023.06.03 14:56:37.401327 [ 237202 ] <Fatal> BaseDaemon: 13. ./build/./src/Interpreters/InterpreterSelectQuery.cpp:1706: DB::InterpreterSelectQuery::executeImpl(DB::QueryPlan&, std::optional<DB::Pipe>) @ 0x00000000170eeaa2 in /usr/bin/clickhouse\r\n[b6ac46c27d64] 2023.06.03 14:56:37.572939 [ 237202 ] <Fatal> BaseDaemon: 14.1. inlined from ./build/./contrib/llvm-project/libcxx/include/optional:260: ~__optional_destruct_base\r\n[b6ac46c27d64] 2023.06.03 14:56:37.573016 [ 237202 ] <Fatal> BaseDaemon: 14. ./build/./src/Interpreters/InterpreterSelectQuery.cpp:886: DB::InterpreterSelectQuery::buildQueryPlan(DB::QueryPlan&) @ 0x00000000170ecfd4 in /usr/bin/clickhouse\r\n[b6ac46c27d64] 2023.06.03 14:56:37.628330 [ 237202 ] <Fatal> BaseDaemon: 15. ./build/./src/Interpreters/InterpreterSelectWithUnionQuery.cpp:352: DB::InterpreterSelectWithUnionQuery::buildQueryPlan(DB::QueryPlan&) @ 0x0000000017171d38 in /usr/bin/clickhouse\r\n[b6ac46c27d64] 2023.06.03 14:56:37.681823 [ 237202 ] <Fatal> BaseDaemon: 16.1. inlined from ./build/./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:603: shared_ptr<DB::Context, void>\r\n[b6ac46c27d64] 2023.06.03 14:56:37.681899 [ 237202 ] <Fatal> BaseDaemon: 16. ./build/./src/Interpreters/InterpreterSelectWithUnionQuery.cpp:380: DB::InterpreterSelectWithUnionQuery::execute() @ 0x0000000017172771 in /usr/bin/clickhouse\r\n[b6ac46c27d64] 2023.06.03 14:56:37.776182 [ 237202 ] <Fatal> BaseDaemon: 17. ./build/./src/Interpreters/executeQuery.cpp:0: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x00000000174349e7 in /usr/bin/clickhouse\r\n[b6ac46c27d64] 2023.06.03 14:56:37.878183 [ 237202 ] <Fatal> BaseDaemon: 18. ./build/./src/Interpreters/executeQuery.cpp:1180: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000017431cef in /usr/bin/clickhouse\r\n[b6ac46c27d64] 2023.06.03 14:56:37.943916 [ 237202 ] <Fatal> BaseDaemon: 19. ./build/./src/Server/TCPHandler.cpp:0: DB::TCPHandler::runImpl() @ 0x00000000180c8fa4 in /usr/bin/clickhouse\r\n[b6ac46c27d64] 2023.06.03 14:56:38.062867 [ 237202 ] <Fatal> BaseDaemon: 20. ./build/./src/Server/TCPHandler.cpp:2045: DB::TCPHandler::run() @ 0x00000000180d92d9 in /usr/bin/clickhouse\r\n[b6ac46c27d64] 2023.06.03 14:56:38.066402 [ 237202 ] <Fatal> BaseDaemon: 21. ./build/./base/poco/Net/src/TCPServerConnection.cpp:57: Poco::Net::TCPServerConnection::start() @ 0x000000001a695f07 in /usr/bin/clickhouse\r\n[b6ac46c27d64] 2023.06.03 14:56:38.071875 [ 237202 ] <Fatal> BaseDaemon: 22.1. inlined from ./build/./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:48: std::default_delete<Poco::Net::TCPServerConnection>::operator()[abi:v15000](Poco::Net::TCPServerConnection*) const\r\n[b6ac46c27d64] 2023.06.03 14:56:38.071948 [ 237202 ] <Fatal> BaseDaemon: 22.2. inlined from ./build/./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:305: std::unique_ptr<Poco::Net::TCPServerConnection, std::default_delete<Poco::Net::TCPServerConnection>>::reset[abi:v15000](Poco::Net::TCPServerConnection*)\r\n[b6ac46c27d64] 2023.06.03 14:56:38.071992 [ 237202 ] <Fatal> BaseDaemon: 22.3. inlined from ./build/./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:259: ~unique_ptr\r\n[b6ac46c27d64] 2023.06.03 14:56:38.072026 [ 237202 ] <Fatal> BaseDaemon: 22. ./build/./base/poco/Net/src/TCPServerDispatcher.cpp:116: Poco::Net::TCPServerDispatcher::run() @ 0x000000001a6963ed in /usr/bin/clickhouse\r\n[b6ac46c27d64] 2023.06.03 14:56:38.078567 [ 237202 ] <Fatal> BaseDaemon: 23. ./build/./base/poco/Foundation/src/ThreadPool.cpp:202: Poco::PooledThread::run() @ 0x000000001a7fd0e7 in /usr/bin/clickhouse\r\n[b6ac46c27d64] 2023.06.03 14:56:38.084298 [ 237202 ] <Fatal> BaseDaemon: 24.1. inlined from ./build/./base/poco/Foundation/include/Poco/SharedPtr.h:139: Poco::SharedPtr<Poco::Runnable, Poco::ReferenceCounter, Poco::ReleasePolicy<Poco::Runnable>>::assign(Poco::Runnable*)\r\n[b6ac46c27d64] 2023.06.03 14:56:38.084368 [ 237202 ] <Fatal> BaseDaemon: 24.2. inlined from ./build/./base/poco/Foundation/include/Poco/SharedPtr.h:180: Poco::SharedPtr<Poco::Runnable, Poco::ReferenceCounter, Poco::ReleasePolicy<Poco::Runnable>>::operator=(Poco::Runnable*)\r\n[b6ac46c27d64] 2023.06.03 14:56:38.084400 [ 237202 ] <Fatal> BaseDaemon: 24. ./build/./base/poco/Foundation/src/Thread_POSIX.cpp:350: Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001a7fad02 in /usr/bin/clickhouse\r\n[b6ac46c27d64] 2023.06.03 14:56:38.084446 [ 237202 ] <Fatal> BaseDaemon: 25. ? @ 0x00007fbdfd11a609 in ?\r\n[b6ac46c27d64] 2023.06.03 14:56:38.084494 [ 237202 ] <Fatal> BaseDaemon: 26. clone @ 0x00007fbdfd03f133 in ?\r\n[b6ac46c27d64] 2023.06.03 14:56:38.084533 [ 237202 ] <Fatal> BaseDaemon: Integrity check of the executable skipped because the reference checksum could not be read.\r\nError on processing query: Code: 32. DB::Exception: Attempt to read after eof: while receiving packet from localhost:9000. (ATTEMPT_TO_READ_AFTER_EOF) (version 23.5.1.1)\r\n(query: select 1\r\nfrom \r\n  (select    \r\n        subq_0.c_7_c4585_14 as c_4_c4593_5\r\n      from \r\n        (select  \r\n              avg(0) as c_7_c4572_1,  \r\n              max(-0) as c_7_c4585_14\r\n            from \r\n              t7 as ref_0\r\n            group by ref_0.c_2_c46_1) as subq_0\r\n  ) as subq_1\r\nwhere subq_1.c_4_c4593_5 <= multiIf(true, 1, exp10(subq_1.c_4_c4593_5) <= 1, 1, 1);)\r\n```\r\n\r\n**Additional context**\r\n\r\nThe earliest reproducible version is 21 in fiddle: https://fiddle.clickhouse.com/789af690-f306-431c-ab68-9572a58bfaca\r\n\r\n\n",
  "hints_text": "This query gives better diagnostic:\r\n\r\n```\r\nSELECT subq_0.c_7_c4585_14 AS c_4_c4593_5\r\nFROM\r\n(\r\n    SELECT\r\n        avg(0) AS c_7_c4572_1,\r\n        max(0) AS c_7_c4585_14\r\n    FROM t7 AS ref_0\r\n    GROUP BY ref_0.c_2_c46_1\r\n) AS subq_0\r\nWHERE c_4_c4593_5 <= multiIf(true, 1, exp10(c_4_c4593_5) <= 1, 1, 1)\r\n```\r\n\r\n```\r\nBad cast from type DB::ColumnVector<signed char> to DB::ColumnVector<char8_t>. (LOGICAL_ERROR)\r\n```",
  "created_at": "2023-06-04T00:51:30Z"
}