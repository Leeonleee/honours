diff --git a/.github/actions/common_setup/action.yml b/.github/actions/common_setup/action.yml
index b02413adc44c..e492fa97816d 100644
--- a/.github/actions/common_setup/action.yml
+++ b/.github/actions/common_setup/action.yml
@@ -18,9 +18,6 @@ runs:
           echo "Setup the common ENV variables"
           cat >> "$GITHUB_ENV" << 'EOF'
           TEMP_PATH=${{runner.temp}}/${{inputs.job_type}}
-          REPO_COPY=${{runner.temp}}/${{inputs.job_type}}/git-repo-copy
-          IMAGES_PATH=${{runner.temp}}/images_path
-          REPORTS_PATH=${{runner.temp}}/reports_dir
           EOF
           if [ -z "${{env.GITHUB_JOB_OVERRIDDEN}}" ] && [ "true" == "${{inputs.nested_job}}" ]; then
             echo "The GITHUB_JOB_OVERRIDDEN ENV is unset, and must be set for the nested jobs"
@@ -30,6 +27,4 @@ runs:
       shell: bash
       run: |
           # to remove every leftovers
-          sudo rm -fr "$TEMP_PATH"
-          mkdir -p "$REPO_COPY"
-          cp -a "$GITHUB_WORKSPACE"/. "$REPO_COPY"/
+          sudo rm -fr "$TEMP_PATH" && mkdir -p "$TEMP_PATH"
diff --git a/.github/workflows/backport_branches.yml b/.github/workflows/backport_branches.yml
index f6af4778cf13..ceb62083f78f 100644
--- a/.github/workflows/backport_branches.yml
+++ b/.github/workflows/backport_branches.yml
@@ -10,27 +10,19 @@ on: # yamllint disable-line rule:truthy
     branches:
       - 'backport/**'
 jobs:
-  CheckLabels:
+  RunConfig:
     runs-on: [self-hosted, style-checker]
-    # Run the first check always, even if the CI is cancelled
-    if: ${{ always() }}
+    outputs:
+      data: ${{ steps.runconfig.outputs.CI_DATA }}
     steps:
       - name: Check out repository code
         uses: ClickHouse/checkout@v1
         with:
-          clear-repository: true
+          clear-repository: true # to ensure correct digests
       - name: Labels check
         run: |
           cd "$GITHUB_WORKSPACE/tests/ci"
           python3 run_check.py
-  PythonUnitTests:
-    runs-on: [self-hosted, style-checker]
-    needs: CheckLabels
-    steps:
-      - name: Check out repository code
-        uses: ClickHouse/checkout@v1
-        with:
-          clear-repository: true
       - name: Python unit tests
         run: |
           cd "$GITHUB_WORKSPACE/tests/ci"
@@ -40,273 +32,235 @@ jobs:
             echo "Testing $dir"
             python3 -m unittest discover -s "$dir" -p 'test_*.py'
           done
-  DockerHubPushAarch64:
-    runs-on: [self-hosted, style-checker-aarch64]
-    needs: CheckLabels
-    steps:
-      - name: Check out repository code
-        uses: ClickHouse/checkout@v1
-        with:
-          clear-repository: true
-      - name: Images check
+      - name: PrepareRunConfig
+        id: runconfig
         run: |
-          cd "$GITHUB_WORKSPACE/tests/ci"
-          python3 docker_images_check.py --suffix aarch64
-      - name: Upload images files to artifacts
-        uses: actions/upload-artifact@v3
-        with:
-          name: changed_images_aarch64
-          path: ${{ runner.temp }}/docker_images_check/changed_images_aarch64.json
-  DockerHubPushAmd64:
-    runs-on: [self-hosted, style-checker]
-    needs: CheckLabels
-    steps:
-      - name: Check out repository code
-        uses: ClickHouse/checkout@v1
-        with:
-          clear-repository: true
-      - name: Images check
-        run: |
-          cd "$GITHUB_WORKSPACE/tests/ci"
-          python3 docker_images_check.py --suffix amd64
-      - name: Upload images files to artifacts
-        uses: actions/upload-artifact@v3
-        with:
-          name: changed_images_amd64
-          path: ${{ runner.temp }}/docker_images_check/changed_images_amd64.json
-  DockerHubPush:
-    needs: [DockerHubPushAmd64, DockerHubPushAarch64, PythonUnitTests]
-    runs-on: [self-hosted, style-checker]
-    steps:
-      - name: Check out repository code
-        uses: ClickHouse/checkout@v1
-        with:
-          clear-repository: true
-          fetch-depth: 0  # to find ancestor merge commits necessary for finding proper docker tags
-          filter: tree:0
-      - name: Download changed aarch64 images
-        uses: actions/download-artifact@v3
-        with:
-          name: changed_images_aarch64
-          path: ${{ runner.temp }}
-      - name: Download changed amd64 images
-        uses: actions/download-artifact@v3
-        with:
-          name: changed_images_amd64
-          path: ${{ runner.temp }}
-      - name: Images check
+            echo "::group::configure CI run"
+            python3 "$GITHUB_WORKSPACE/tests/ci/ci.py" --configure --outfile ${{ runner.temp }}/ci_run_data.json
+            echo "::endgroup::"
+
+            echo "::group::CI run configure results"
+            python3 -m json.tool ${{ runner.temp }}/ci_run_data.json
+            echo "::endgroup::"
+
+            {
+              echo 'CI_DATA<<EOF'
+              cat  ${{ runner.temp }}/ci_run_data.json
+              echo 'EOF'
+            } >> "$GITHUB_OUTPUT"
+      - name: Re-create GH statuses for skipped jobs if any
         run: |
-          cd "$GITHUB_WORKSPACE/tests/ci"
-          python3 docker_manifests_merge.py --suffix amd64 --suffix aarch64
-      - name: Upload images files to artifacts
-        uses: actions/upload-artifact@v3
-        with:
-          name: changed_images
-          path: ${{ runner.temp }}/changed_images.json
+            python3 "$GITHUB_WORKSPACE/tests/ci/ci.py" --infile ${{ runner.temp }}/ci_run_data.json --update-gh-statuses
+  BuildDockers:
+    needs: [RunConfig]
+    if: ${{ !failure() && !cancelled() }}
+    uses: ./.github/workflows/reusable_docker.yml
+    with:
+      data: ${{ needs.RunConfig.outputs.data }}
   CompatibilityCheckX86:
-    needs: [BuilderDebRelease]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
-      test_name: Compatibility check X86
+      test_name: Compatibility check (amd64)
       runner_type: style-checker
+      data: ${{ needs.RunConfig.outputs.data }}
       run_command: |
-        cd "$REPO_COPY/tests/ci"
         python3 compatibility_check.py --check-name "Compatibility check (amd64)" --check-glibc --check-distributions
   CompatibilityCheckAarch64:
-    needs: [BuilderDebAarch64]
+    needs: [RunConfig, BuilderDebAarch64]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
-      test_name: Compatibility check X86
+      test_name: Compatibility check (aarch64)
       runner_type: style-checker
+      data: ${{ needs.RunConfig.outputs.data }}
       run_command: |
-        cd "$REPO_COPY/tests/ci"
         python3 compatibility_check.py --check-name "Compatibility check (aarch64)" --check-glibc
 #########################################################################################
 #################################### ORDINARY BUILDS ####################################
 #########################################################################################
   BuilderDebRelease:
-    needs: [DockerHubPush]
+    needs: [RunConfig, BuildDockers]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: package_release
       checkout_depth: 0
+      data: ${{ needs.RunConfig.outputs.data }}
   BuilderDebAarch64:
-    needs: [DockerHubPush]
+    needs: [RunConfig, BuildDockers]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: package_aarch64
       checkout_depth: 0
+      data: ${{ needs.RunConfig.outputs.data }}
   BuilderDebAsan:
-    needs: [DockerHubPush]
+    needs: [RunConfig, BuildDockers]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: package_asan
+      data: ${{ needs.RunConfig.outputs.data }}
   BuilderDebTsan:
-    needs: [DockerHubPush]
+    needs: [RunConfig, BuildDockers]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: package_tsan
+      data: ${{ needs.RunConfig.outputs.data }}
   BuilderDebDebug:
-    needs: [DockerHubPush]
+    needs: [RunConfig, BuildDockers]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: package_debug
+      data: ${{ needs.RunConfig.outputs.data }}
   BuilderBinDarwin:
-    needs: [DockerHubPush]
+    needs: [RunConfig, BuildDockers]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: binary_darwin
+      data: ${{ needs.RunConfig.outputs.data }}
       checkout_depth: 0
   BuilderBinDarwinAarch64:
-    needs: [DockerHubPush]
+    needs: [RunConfig, BuildDockers]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: binary_darwin_aarch64
+      data: ${{ needs.RunConfig.outputs.data }}
       checkout_depth: 0
 ############################################################################################
 ##################################### Docker images  #######################################
 ############################################################################################
   DockerServerImages:
-    needs:
-      - BuilderDebRelease
-      - BuilderDebAarch64
-    runs-on: [self-hosted, style-checker]
-    steps:
-      - name: Check out repository code
-        uses: ClickHouse/checkout@v1
-        with:
-          clear-repository: true
-          fetch-depth: 0  # It MUST BE THE SAME for all dependencies and the job itself
-          filter: tree:0
-      - name: Check docker clickhouse/clickhouse-server building
-        run: |
-          cd "$GITHUB_WORKSPACE/tests/ci"
-          python3 docker_server.py --release-type head --no-push \
-            --image-repo clickhouse/clickhouse-server --image-path docker/server
-          python3 docker_server.py --release-type head --no-push \
-            --image-repo clickhouse/clickhouse-keeper --image-path docker/keeper
-      - name: Cleanup
-        if: always()
-        run: |
-          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
-          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
-          sudo rm -fr "$TEMP_PATH"
+    needs: [RunConfig, BuilderDebRelease, BuilderDebAarch64]
+    if: ${{ !failure() && !cancelled() }}
+    uses: ./.github/workflows/reusable_test.yml
+    with:
+      test_name: Docker server and keeper images
+      runner_type: style-checker
+      data: ${{ needs.RunConfig.outputs.data }}
+      checkout_depth: 0  # It MUST BE THE SAME for all dependencies and the job itself
+      run_command: |
+        cd "$GITHUB_WORKSPACE/tests/ci"
+        python3 docker_server.py --release-type head --no-push \
+          --image-repo clickhouse/clickhouse-server --image-path docker/server --allow-build-reuse
+        python3 docker_server.py --release-type head --no-push \
+          --image-repo clickhouse/clickhouse-keeper --image-path docker/keeper --allow-build-reuse
 ############################################################################################
 ##################################### BUILD REPORTER #######################################
 ############################################################################################
   BuilderReport:
     if: ${{ success() || failure() }}
     needs:
-      - BuilderDebRelease
+      - RunConfig
       - BuilderDebAarch64
       - BuilderDebAsan
-      - BuilderDebTsan
       - BuilderDebDebug
+      - BuilderDebRelease
+      - BuilderDebTsan
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: ClickHouse build check
       runner_type: style-checker
+      data: ${{ needs.RunConfig.outputs.data }}
       additional_envs: |
         NEEDS_DATA<<NDENV
         ${{ toJSON(needs) }}
         NDENV
       run_command: |
-        cd "$GITHUB_WORKSPACE/tests/ci"
         python3 build_report_check.py "$CHECK_NAME"
   BuilderSpecialReport:
-    if: ${{ success() || failure() }}
+    if: ${{ !failure() && !cancelled() }}
     needs:
+      - RunConfig
       - BuilderBinDarwin
       - BuilderBinDarwinAarch64
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: ClickHouse special build check
       runner_type: style-checker
+      data: ${{ needs.RunConfig.outputs.data }}
       additional_envs: |
         NEEDS_DATA<<NDENV
         ${{ toJSON(needs) }}
         NDENV
       run_command: |
-        cd "$GITHUB_WORKSPACE/tests/ci"
         python3 build_report_check.py "$CHECK_NAME"
 ############################################################################################
 #################################### INSTALL PACKAGES ######################################
 ############################################################################################
   InstallPackagesTestRelease:
-    needs: [BuilderDebRelease]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Install packages (amd64)
       runner_type: style-checker
+      data: ${{ needs.RunConfig.outputs.data }}
       run_command: |
-        cd "$REPO_COPY/tests/ci"
         python3 install_check.py "$CHECK_NAME"
   InstallPackagesTestAarch64:
-    needs: [BuilderDebAarch64]
+    needs: [RunConfig, BuilderDebAarch64]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Install packages (arm64)
       runner_type: style-checker-aarch64
+      data: ${{ needs.RunConfig.outputs.data }}
       run_command: |
-        cd "$REPO_COPY/tests/ci"
         python3 install_check.py "$CHECK_NAME"
 ##############################################################################################
 ########################### FUNCTIONAl STATELESS TESTS #######################################
 ##############################################################################################
   FunctionalStatelessTestAsan:
-    needs: [BuilderDebAsan]
+    needs: [RunConfig, BuilderDebAsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateless tests (asan)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=10800
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
 ##############################################################################################
 ############################ FUNCTIONAl STATEFUL TESTS #######################################
 ##############################################################################################
   FunctionalStatefulTestDebug:
-    needs: [BuilderDebDebug]
+    needs: [RunConfig, BuilderDebDebug]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateful tests (debug)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=3600
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
 ##############################################################################################
 ######################################### STRESS TESTS #######################################
 ##############################################################################################
   StressTestTsan:
-    needs: [BuilderDebTsan]
+    needs: [RunConfig, BuilderDebTsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stress test (tsan)
       runner_type: stress-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 stress_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
 #############################################################################################
 ############################# INTEGRATION TESTS #############################################
 #############################################################################################
   IntegrationTestsRelease:
-    needs: [BuilderDebRelease]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Integration tests (release)
       runner_type: stress-tester
-      batches: 4
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 integration_test_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   FinishCheck:
+    if: ${{ !failure() && !cancelled() }}
     needs:
-      - DockerHubPush
-      - DockerServerImages
       - BuilderReport
       - BuilderSpecialReport
       - FunctionalStatelessTestAsan
diff --git a/.github/workflows/docs_check.yml b/.github/workflows/docs_check.yml
deleted file mode 100644
index 6d449e74f304..000000000000
--- a/.github/workflows/docs_check.yml
+++ /dev/null
@@ -1,138 +0,0 @@
-name: DocsCheck
-
-env:
-  # Force the stdout and stderr streams to be unbuffered
-  PYTHONUNBUFFERED: 1
-
-on:  # yamllint disable-line rule:truthy
-  pull_request:
-    types:
-      - synchronize
-      - reopened
-      - opened
-    branches:
-      - master
-    paths:
-      - '**.md'
-      - 'docker/docs/**'
-      - 'docs/**'
-      - 'utils/check-style/aspell-ignore/**'
-      - 'tests/ci/docs_check.py'
-      - '.github/workflows/docs_check.yml'
-jobs:
-  CheckLabels:
-    runs-on: [self-hosted, style-checker]
-    steps:
-      - name: Check out repository code
-        uses: ClickHouse/checkout@v1
-        with:
-          clear-repository: true
-      - name: Labels check
-        run: |
-          cd "$GITHUB_WORKSPACE/tests/ci"
-          python3 run_check.py
-  DockerHubPushAarch64:
-    needs: CheckLabels
-    runs-on: [self-hosted, style-checker-aarch64]
-    steps:
-      - name: Check out repository code
-        uses: ClickHouse/checkout@v1
-        with:
-          clear-repository: true
-      - name: Images check
-        run: |
-          cd "$GITHUB_WORKSPACE/tests/ci"
-          python3 docker_images_check.py --suffix aarch64
-      - name: Upload images files to artifacts
-        uses: actions/upload-artifact@v3
-        with:
-          name: changed_images_aarch64
-          path: ${{ runner.temp }}/docker_images_check/changed_images_aarch64.json
-  DockerHubPushAmd64:
-    needs: CheckLabels
-    runs-on: [self-hosted, style-checker]
-    steps:
-      - name: Check out repository code
-        uses: ClickHouse/checkout@v1
-        with:
-          clear-repository: true
-      - name: Images check
-        run: |
-          cd "$GITHUB_WORKSPACE/tests/ci"
-          python3 docker_images_check.py --suffix amd64
-      - name: Upload images files to artifacts
-        uses: actions/upload-artifact@v3
-        with:
-          name: changed_images_amd64
-          path: ${{ runner.temp }}/docker_images_check/changed_images_amd64.json
-  DockerHubPush:
-    needs: [DockerHubPushAmd64, DockerHubPushAarch64]
-    runs-on: [self-hosted, style-checker]
-    steps:
-      - name: Check out repository code
-        uses: ClickHouse/checkout@v1
-        with:
-          clear-repository: true
-          fetch-depth: 0  # to find ancestor merge commits necessary for finding proper docker tags
-          filter: tree:0
-      - name: Download changed aarch64 images
-        uses: actions/download-artifact@v3
-        with:
-          name: changed_images_aarch64
-          path: ${{ runner.temp }}
-      - name: Download changed amd64 images
-        uses: actions/download-artifact@v3
-        with:
-          name: changed_images_amd64
-          path: ${{ runner.temp }}
-      - name: Images check
-        run: |
-          cd "$GITHUB_WORKSPACE/tests/ci"
-          python3 docker_manifests_merge.py --suffix amd64 --suffix aarch64
-      - name: Upload images files to artifacts
-        uses: actions/upload-artifact@v3
-        with:
-          name: changed_images
-          path: ${{ runner.temp }}/changed_images.json
-  StyleCheck:
-    needs: DockerHubPush
-    # We need additional `&& ! cancelled()` to have the job being able to cancel
-    if: ${{ success() || failure() || ( always() && ! cancelled() ) }}
-    uses: ./.github/workflows/reusable_test.yml
-    with:
-      test_name: Style check
-      runner_type: style-checker
-      run_command: |
-          cd "$REPO_COPY/tests/ci"
-          python3 style_check.py
-    secrets:
-      secret_envs: |
-        ROBOT_CLICKHOUSE_SSH_KEY<<RCSK
-        ${{secrets.ROBOT_CLICKHOUSE_SSH_KEY}}
-        RCSK
-  DocsCheck:
-    needs: DockerHubPush
-    uses: ./.github/workflows/reusable_test.yml
-    with:
-      test_name: Docs check
-      runner_type: func-tester-aarch64
-      additional_envs: |
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 docs_check.py
-  FinishCheck:
-    needs:
-      - StyleCheck
-      - DockerHubPush
-      - DocsCheck
-    runs-on: [self-hosted, style-checker]
-    steps:
-      - name: Check out repository code
-        uses: ClickHouse/checkout@v1
-        with:
-          clear-repository: true
-      - name: Finish label
-        run: |
-          cd "$GITHUB_WORKSPACE/tests/ci"
-          python3 finish_check.py
-          python3 merge_pr.py --check-approved
diff --git a/.github/workflows/jepsen.yml b/.github/workflows/jepsen.yml
index 163de7769af5..50118eaf6221 100644
--- a/.github/workflows/jepsen.yml
+++ b/.github/workflows/jepsen.yml
@@ -11,16 +11,14 @@ on: # yamllint disable-line rule:truthy
   workflow_call:
 jobs:
   KeeperJepsenRelease:
-    uses: ./.github/workflows/reusable_test.yml
+    uses: ./.github/workflows/reusable_simple_job.yml
     with:
       test_name: Jepsen keeper check
       runner_type: style-checker
       run_command: |
-        cd "$REPO_COPY/tests/ci"
         python3 jepsen_check.py keeper
   # ServerJepsenRelease:
-  #   runs-on: [self-hosted, style-checker]
-  #   uses: ./.github/workflows/reusable_test.yml
+  #   uses: ./.github/workflows/reusable_simple_job.yml
   #   with:
   #     test_name: Jepsen server check
   #     runner_type: style-checker
diff --git a/.github/workflows/libfuzzer.yml b/.github/workflows/libfuzzer.yml
index 1ca637c0d844..062ba99a8936 100644
--- a/.github/workflows/libfuzzer.yml
+++ b/.github/workflows/libfuzzer.yml
@@ -8,19 +8,26 @@ on: # yamllint disable-line rule:truthy
   #  schedule:
   #    - cron: '0 0 2 31 1' # never for now
   workflow_call:
+    inputs:
+      data:
+        description: json ci data
+        type: string
+        required: true
+
 jobs:
   BuilderFuzzers:
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: fuzzers
+      data: ${{ inputs.data }}
   libFuzzerTest:
     needs: [BuilderFuzzers]
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: libFuzzer tests
       runner_type: func-tester
+      data: ${{ inputs.data }}
       additional_envs: |
         KILL_TIMEOUT=10800
       run_command: |
-        cd "$REPO_COPY/tests/ci"
         python3 libfuzzer_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
diff --git a/.github/workflows/master.yml b/.github/workflows/master.yml
index 771de46be133..7947f082fc90 100644
--- a/.github/workflows/master.yml
+++ b/.github/workflows/master.yml
@@ -10,13 +10,15 @@ on: # yamllint disable-line rule:truthy
     branches:
       - 'master'
 jobs:
-  PythonUnitTests:
+  RunConfig:
     runs-on: [self-hosted, style-checker]
+    outputs:
+      data: ${{ steps.runconfig.outputs.CI_DATA }}
     steps:
       - name: Check out repository code
         uses: ClickHouse/checkout@v1
         with:
-          clear-repository: true
+          clear-repository: true # to ensure correct digests
       - name: Python unit tests
         run: |
           cd "$GITHUB_WORKSPACE/tests/ci"
@@ -26,243 +28,240 @@ jobs:
             echo "Testing $dir"
             python3 -m unittest discover -s "$dir" -p 'test_*.py'
           done
-  DockerHubPushAarch64:
-    runs-on: [self-hosted, style-checker-aarch64]
-    steps:
-      - name: Check out repository code
-        uses: ClickHouse/checkout@v1
-        with:
-          clear-repository: true
-      - name: Images check
+      - name: PrepareRunConfig
+        id: runconfig
         run: |
-          cd "$GITHUB_WORKSPACE/tests/ci"
-          python3 docker_images_check.py --suffix aarch64
-      - name: Upload images files to artifacts
-        uses: actions/upload-artifact@v3
-        with:
-          name: changed_images_aarch64
-          path: ${{ runner.temp }}/docker_images_check/changed_images_aarch64.json
-  DockerHubPushAmd64:
-    runs-on: [self-hosted, style-checker]
-    steps:
-      - name: Check out repository code
-        uses: ClickHouse/checkout@v1
-        with:
-          clear-repository: true
-      - name: Images check
-        run: |
-          cd "$GITHUB_WORKSPACE/tests/ci"
-          python3 docker_images_check.py --suffix amd64
-      - name: Upload images files to artifacts
-        uses: actions/upload-artifact@v3
-        with:
-          name: changed_images_amd64
-          path: ${{ runner.temp }}/docker_images_check/changed_images_amd64.json
-  DockerHubPush:
-    needs: [DockerHubPushAmd64, DockerHubPushAarch64, PythonUnitTests]
-    runs-on: [self-hosted, style-checker]
-    steps:
-      - name: Check out repository code
-        uses: ClickHouse/checkout@v1
-        with:
-          clear-repository: true
-          fetch-depth: 0  # to find ancestor merge commits necessary for finding proper docker tags
-          filter: tree:0
-      - name: Download changed aarch64 images
-        uses: actions/download-artifact@v3
-        with:
-          name: changed_images_aarch64
-          path: ${{ runner.temp }}
-      - name: Download changed amd64 images
-        uses: actions/download-artifact@v3
-        with:
-          name: changed_images_amd64
-          path: ${{ runner.temp }}
-      - name: Images check
+            echo "::group::configure CI run"
+            python3 "$GITHUB_WORKSPACE/tests/ci/ci.py" --configure --rebuild-all-binaries --outfile ${{ runner.temp }}/ci_run_data.json
+            echo "::endgroup::"
+
+            echo "::group::CI run configure results"
+            python3 -m json.tool ${{ runner.temp }}/ci_run_data.json
+            echo "::endgroup::"
+
+            {
+              echo 'CI_DATA<<EOF'
+              cat  ${{ runner.temp }}/ci_run_data.json
+              echo 'EOF'
+            } >> "$GITHUB_OUTPUT"
+      - name: Re-create GH statuses for skipped jobs if any
         run: |
-          cd "$GITHUB_WORKSPACE/tests/ci"
-          python3 docker_manifests_merge.py --suffix amd64 --suffix aarch64
-      - name: Upload images files to artifacts
-        uses: actions/upload-artifact@v3
-        with:
-          name: changed_images
-          path: ${{ runner.temp }}/changed_images.json
+            python3 "$GITHUB_WORKSPACE/tests/ci/ci.py" --infile ${{ runner.temp }}/ci_run_data.json --update-gh-statuses
+  BuildDockers:
+    needs: [RunConfig]
+    if: ${{ !failure() && !cancelled() }}
+    uses: ./.github/workflows/reusable_docker.yml
+    with:
+      data: ${{ needs.RunConfig.outputs.data }}
+      set_latest: true
   StyleCheck:
-    needs: DockerHubPush
-    if: ${{ success() || failure() }}
+    needs: [RunConfig, BuildDockers]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Style check
       runner_type: style-checker
+      data: ${{ needs.RunConfig.outputs.data }}
       run_command: |
-          cd "$REPO_COPY/tests/ci"
           python3 style_check.py --no-push
   CompatibilityCheckX86:
-    needs: [BuilderDebRelease]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
-      test_name: Compatibility check X86
+      test_name: Compatibility check (amd64)
       runner_type: style-checker
+      data: ${{ needs.RunConfig.outputs.data }}
       run_command: |
-        cd "$REPO_COPY/tests/ci"
         python3 compatibility_check.py --check-name "Compatibility check (amd64)" --check-glibc --check-distributions
   CompatibilityCheckAarch64:
-    needs: [BuilderDebAarch64]
+    needs: [RunConfig, BuilderDebAarch64]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
-      test_name: Compatibility check X86
+      test_name: Compatibility check (aarch64)
       runner_type: style-checker
+      data: ${{ needs.RunConfig.outputs.data }}
       run_command: |
-        cd "$REPO_COPY/tests/ci"
         python3 compatibility_check.py --check-name "Compatibility check (aarch64)" --check-glibc
 #########################################################################################
 #################################### ORDINARY BUILDS ####################################
 #########################################################################################
+# TODO: never skip builds!
   BuilderDebRelease:
-    needs: [DockerHubPush]
+    needs: [RunConfig, BuildDockers]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
-      checkout_depth: 0
       build_name: package_release
+      checkout_depth: 0
+      data: ${{ needs.RunConfig.outputs.data }}
   BuilderDebAarch64:
-    needs: [DockerHubPush]
+    needs: [RunConfig, BuildDockers]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
-      checkout_depth: 0
       build_name: package_aarch64
+      checkout_depth: 0
+      data: ${{ needs.RunConfig.outputs.data }}
   BuilderBinRelease:
-    needs: [DockerHubPush]
+    needs: [RunConfig, BuildDockers]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
-      checkout_depth: 0
       build_name: binary_release
+      checkout_depth: 0 # otherwise we will have no info about contributors
+      data: ${{ needs.RunConfig.outputs.data }}
   BuilderDebAsan:
-    needs: [DockerHubPush]
+    needs: [RunConfig, BuildDockers]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: package_asan
+      data: ${{ needs.RunConfig.outputs.data }}
   BuilderDebUBsan:
-    needs: [DockerHubPush]
+    needs: [RunConfig, BuildDockers]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: package_ubsan
+      data: ${{ needs.RunConfig.outputs.data }}
   BuilderDebTsan:
-    needs: [DockerHubPush]
+    needs: [RunConfig, BuildDockers]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: package_tsan
+      data: ${{ needs.RunConfig.outputs.data }}
   BuilderDebMsan:
-    needs: [DockerHubPush]
+    needs: [RunConfig, BuildDockers]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: package_msan
+      data: ${{ needs.RunConfig.outputs.data }}
   BuilderDebDebug:
-    needs: [DockerHubPush]
+    needs: [RunConfig, BuildDockers]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: package_debug
+      data: ${{ needs.RunConfig.outputs.data }}
 ##########################################################################################
 ##################################### SPECIAL BUILDS #####################################
 ##########################################################################################
   BuilderBinClangTidy:
-    needs: [DockerHubPush]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: binary_tidy
+      data: ${{ needs.RunConfig.outputs.data }}
   BuilderBinDarwin:
-    needs: [DockerHubPush]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: binary_darwin
+      data: ${{ needs.RunConfig.outputs.data }}
       checkout_depth: 0
   BuilderBinAarch64:
-    needs: [DockerHubPush]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: binary_aarch64
+      data: ${{ needs.RunConfig.outputs.data }}
       checkout_depth: 0
   BuilderBinFreeBSD:
-    needs: [DockerHubPush]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: binary_freebsd
+      data: ${{ needs.RunConfig.outputs.data }}
       checkout_depth: 0
   BuilderBinDarwinAarch64:
-    needs: [DockerHubPush]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: binary_darwin_aarch64
+      data: ${{ needs.RunConfig.outputs.data }}
       checkout_depth: 0
   BuilderBinPPC64:
-    needs: [DockerHubPush]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: binary_ppc64le
+      data: ${{ needs.RunConfig.outputs.data }}
       checkout_depth: 0
   BuilderBinAmd64Compat:
-    needs: [DockerHubPush]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: binary_amd64_compat
+      data: ${{ needs.RunConfig.outputs.data }}
       checkout_depth: 0
   BuilderBinAmd64Musl:
-    needs: [DockerHubPush]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: binary_amd64_musl
+      data: ${{ needs.RunConfig.outputs.data }}
       checkout_depth: 0
   BuilderBinAarch64V80Compat:
-    needs: [DockerHubPush]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: binary_aarch64_v80compat
+      data: ${{ needs.RunConfig.outputs.data }}
       checkout_depth: 0
   BuilderBinRISCV64:
-    needs: [DockerHubPush]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: binary_riscv64
+      data: ${{ needs.RunConfig.outputs.data }}
       checkout_depth: 0
   BuilderBinS390X:
-    needs: [DockerHubPush]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: binary_s390x
+      data: ${{ needs.RunConfig.outputs.data }}
       checkout_depth: 0
 ############################################################################################
 ##################################### Docker images  #######################################
 ############################################################################################
   DockerServerImages:
-    needs:
-      - BuilderDebRelease
-      - BuilderDebAarch64
-    runs-on: [self-hosted, style-checker]
-    steps:
-      - name: Check out repository code
-        uses: ClickHouse/checkout@v1
-        with:
-          clear-repository: true
-          fetch-depth: 0  # It MUST BE THE SAME for all dependencies and the job itself
-          filter: tree:0
-      - name: Check docker clickhouse/clickhouse-server building
-        run: |
-          cd "$GITHUB_WORKSPACE/tests/ci"
-          python3 docker_server.py --release-type head \
-            --image-repo clickhouse/clickhouse-server --image-path docker/server
-          python3 docker_server.py --release-type head \
-            --image-repo clickhouse/clickhouse-keeper --image-path docker/keeper
-      - name: Cleanup
-        if: always()
-        run: |
-          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
-          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
-          sudo rm -fr "$TEMP_PATH"
+    needs: [RunConfig, BuilderDebRelease, BuilderDebAarch64]
+    if: ${{ !failure() && !cancelled() }}
+    uses: ./.github/workflows/reusable_test.yml
+    with:
+      test_name: Docker server and keeper images
+      runner_type: style-checker
+      data: ${{ needs.RunConfig.outputs.data }}
+      # FIXME: avoid using 0 checkout
+      checkout_depth: 0  # It MUST BE THE SAME for all dependencies and the job itself
+      run_command: |
+        cd "$GITHUB_WORKSPACE/tests/ci"
+        python3 docker_server.py --release-type head \
+          --image-repo clickhouse/clickhouse-server --image-path docker/server
+        python3 docker_server.py --release-type head \
+          --image-repo clickhouse/clickhouse-keeper --image-path docker/keeper
 ############################################################################################
 ##################################### BUILD REPORTER #######################################
 ############################################################################################
   BuilderReport:
-    if: ${{ success() || failure() }}
     needs:
+      - RunConfig
       - BuilderBinRelease
       - BuilderDebAarch64
       - BuilderDebAsan
@@ -271,20 +270,22 @@ jobs:
       - BuilderDebRelease
       - BuilderDebTsan
       - BuilderDebUBsan
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: ClickHouse build check
       runner_type: style-checker
+      data: ${{ needs.RunConfig.outputs.data }}
       additional_envs: |
         NEEDS_DATA<<NDENV
         ${{ toJSON(needs) }}
         NDENV
       run_command: |
-        cd "$GITHUB_WORKSPACE/tests/ci"
         python3 build_report_check.py "$CHECK_NAME"
   BuilderSpecialReport:
-    if: ${{ success() || failure() }}
+    if: ${{ !failure() && !cancelled() }}
     needs:
+      - RunConfig
       - BuilderBinAarch64
       - BuilderBinDarwin
       - BuilderBinDarwinAarch64
@@ -295,16 +296,17 @@ jobs:
       - BuilderBinAmd64Compat
       - BuilderBinAarch64V80Compat
       - BuilderBinClangTidy
+      - BuilderBinAmd64Musl
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: ClickHouse special build check
       runner_type: style-checker
+      data: ${{ needs.RunConfig.outputs.data }}
       additional_envs: |
         NEEDS_DATA<<NDENV
         ${{ toJSON(needs) }}
         NDENV
       run_command: |
-        cd "$GITHUB_WORKSPACE/tests/ci"
         python3 build_report_check.py "$CHECK_NAME"
   MarkReleaseReady:
     needs:
@@ -326,491 +328,404 @@ jobs:
 #################################### INSTALL PACKAGES ######################################
 ############################################################################################
   InstallPackagesTestRelease:
-    needs: [BuilderDebRelease]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Install packages (amd64)
       runner_type: style-checker
+      data: ${{ needs.RunConfig.outputs.data }}
       run_command: |
-        cd "$REPO_COPY/tests/ci"
         python3 install_check.py "$CHECK_NAME"
   InstallPackagesTestAarch64:
-    needs: [BuilderDebAarch64]
+    needs: [RunConfig, BuilderDebAarch64]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Install packages (arm64)
       runner_type: style-checker-aarch64
+      data: ${{ needs.RunConfig.outputs.data }}
       run_command: |
-        cd "$REPO_COPY/tests/ci"
         python3 install_check.py "$CHECK_NAME"
 ##############################################################################################
 ########################### FUNCTIONAl STATELESS TESTS #######################################
 ##############################################################################################
   FunctionalStatelessTestRelease:
-    needs: [BuilderDebRelease]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateless tests (release)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=10800
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatelessTestReleaseDatabaseOrdinary:
-    needs: [BuilderDebRelease]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateless tests (release, DatabaseOrdinary)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=10800
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatelessTestReleaseDatabaseReplicated:
-    needs: [BuilderDebRelease]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateless tests (release, DatabaseReplicated)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=10800
-      batches: 4
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
-  FunctionalStatelessTestReleaseS3:
-    needs: [BuilderDebRelease]
+      data: ${{ needs.RunConfig.outputs.data }}
+  FunctionalStatelessTestReleaseAnalyzer:
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
-      test_name: Stateless tests (release, s3 storage)
+      test_name: Stateless tests (release, analyzer)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=10800
-      batches: 2
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
-  FunctionalStatelessTestReleaseAnalyzer:
-    needs: [BuilderDebRelease]
+      data: ${{ needs.RunConfig.outputs.data }}
+  FunctionalStatelessTestReleaseS3:
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
-      test_name: Stateless tests (release, analyzer)
+      test_name: Stateless tests (release, s3 storage)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=10800
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatelessTestAarch64:
-    needs: [BuilderDebAarch64]
+    needs: [RunConfig, BuilderDebAarch64]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateless tests (aarch64)
       runner_type: func-tester-aarch64
-      additional_envs: |
-        KILL_TIMEOUT=10800
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatelessTestAsan:
-    needs: [BuilderDebAsan]
+    needs: [RunConfig, BuilderDebAsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateless tests (asan)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=10800
-      batches: 4
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
+
   FunctionalStatelessTestTsan:
-    needs: [BuilderDebTsan]
+    needs: [RunConfig, BuilderDebTsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateless tests (tsan)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=10800
-      batches: 5
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
-  FunctionalStatelessTestUBsan:
-    needs: [BuilderDebUBsan]
+      data: ${{ needs.RunConfig.outputs.data }}
+  FunctionalStatelessTestMsan:
+    needs: [RunConfig, BuilderDebMsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
-      test_name: Stateless tests (ubsan)
+      test_name: Stateless tests (msan)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=10800
-      batches: 2
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
-  FunctionalStatelessTestMsan:
-    needs: [BuilderDebMsan]
+      data: ${{ needs.RunConfig.outputs.data }}
+  FunctionalStatelessTestUBsan:
+    needs: [RunConfig, BuilderDebUBsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
-      test_name: Stateless tests (msan)
+      test_name: Stateless tests (ubsan)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=10800
-      batches: 6
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatelessTestDebug:
-    needs: [BuilderDebDebug]
+    needs: [RunConfig, BuilderDebDebug]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateless tests (debug)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=10800
-      batches: 5
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
 ##############################################################################################
 ############################ FUNCTIONAl STATEFUL TESTS #######################################
 ##############################################################################################
   FunctionalStatefulTestRelease:
-    needs: [BuilderDebRelease]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateful tests (release)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=3600
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatefulTestAarch64:
-    needs: [BuilderDebAarch64]
+    needs: [RunConfig, BuilderDebAarch64]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateful tests (aarch64)
       runner_type: func-tester-aarch64
-      additional_envs: |
-        KILL_TIMEOUT=3600
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatefulTestAsan:
-    needs: [BuilderDebAsan]
+    needs: [RunConfig, BuilderDebAsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateful tests (asan)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=3600
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatefulTestTsan:
-    needs: [BuilderDebTsan]
+    needs: [RunConfig, BuilderDebTsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateful tests (tsan)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=3600
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatefulTestMsan:
-    needs: [BuilderDebMsan]
+    needs: [RunConfig, BuilderDebMsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateful tests (msan)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=3600
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatefulTestUBsan:
-    needs: [BuilderDebUBsan]
+    needs: [RunConfig, BuilderDebUBsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateful tests (ubsan)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=3600
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatefulTestDebug:
-    needs: [BuilderDebDebug]
+    needs: [RunConfig, BuilderDebDebug]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateful tests (debug)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=3600
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
 ##############################################################################################
 ########################### ClickBench #######################################################
 ##############################################################################################
   ClickBenchAMD64:
-    needs: [BuilderDebRelease]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: ClickBench (amd64)
       runner_type: func-tester
+      data: ${{ needs.RunConfig.outputs.data }}
       run_command: |
-        cd "$REPO_COPY/tests/ci"
         python3 clickbench.py "$CHECK_NAME"
   ClickBenchAarch64:
-    needs: [BuilderDebAarch64]
+    needs: [RunConfig, BuilderDebAarch64]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: ClickBench (aarch64)
       runner_type: func-tester-aarch64
+      data: ${{ needs.RunConfig.outputs.data }}
       run_command: |
-        cd "$REPO_COPY/tests/ci"
         python3 clickbench.py "$CHECK_NAME"
 ##############################################################################################
 ######################################### STRESS TESTS #######################################
 ##############################################################################################
   StressTestAsan:
-    needs: [BuilderDebAsan]
+    needs: [RunConfig, BuilderDebAsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stress test (asan)
       runner_type: stress-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 stress_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   StressTestTsan:
-    needs: [BuilderDebTsan]
+    needs: [RunConfig, BuilderDebTsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stress test (tsan)
       runner_type: stress-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 stress_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   StressTestMsan:
-    needs: [BuilderDebMsan]
+    needs: [RunConfig, BuilderDebMsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stress test (msan)
       runner_type: stress-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 stress_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   StressTestUBsan:
-    needs: [BuilderDebUBsan]
+    needs: [RunConfig, BuilderDebUBsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stress test (ubsan)
       runner_type: stress-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 stress_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   StressTestDebug:
-    needs: [BuilderDebDebug]
+    needs: [RunConfig, BuilderDebDebug]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stress test (debug)
       runner_type: stress-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 stress_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
 #############################################################################################
 ############################# INTEGRATION TESTS #############################################
 #############################################################################################
   IntegrationTestsAsan:
-    needs: [BuilderDebAsan]
+    needs: [RunConfig, BuilderDebAsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Integration tests (asan)
       runner_type: stress-tester
-      batches: 4
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 integration_test_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   IntegrationTestsAnalyzerAsan:
-    needs: [BuilderDebAsan]
+    needs: [RunConfig, BuilderDebAsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Integration tests (asan, analyzer)
       runner_type: stress-tester
-      batches: 6
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 integration_test_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   IntegrationTestsTsan:
-    needs: [BuilderDebTsan]
+    needs: [RunConfig, BuilderDebTsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Integration tests (tsan)
       runner_type: stress-tester
-      batches: 6
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 integration_test_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   IntegrationTestsRelease:
-    needs: [BuilderDebRelease]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Integration tests (release)
       runner_type: stress-tester
-      batches: 4
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 integration_test_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
 ##############################################################################################
 ##################################### AST FUZZERS ############################################
 ##############################################################################################
   ASTFuzzerTestAsan:
-    needs: [BuilderDebAsan]
+    needs: [RunConfig, BuilderDebAsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: AST fuzzer (asan)
       runner_type: fuzzer-unit-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 ast_fuzzer_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   ASTFuzzerTestTsan:
-    needs: [BuilderDebTsan]
+    needs: [RunConfig, BuilderDebTsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: AST fuzzer (tsan)
       runner_type: fuzzer-unit-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 ast_fuzzer_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   ASTFuzzerTestUBSan:
-    needs: [BuilderDebUBsan]
+    needs: [RunConfig, BuilderDebUBsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: AST fuzzer (ubsan)
       runner_type: fuzzer-unit-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 ast_fuzzer_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   ASTFuzzerTestMSan:
-    needs: [BuilderDebMsan]
+    needs: [RunConfig, BuilderDebMsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: AST fuzzer (msan)
       runner_type: fuzzer-unit-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 ast_fuzzer_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   ASTFuzzerTestDebug:
-    needs: [BuilderDebDebug]
+    needs: [RunConfig, BuilderDebDebug]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: AST fuzzer (debug)
       runner_type: fuzzer-unit-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 ast_fuzzer_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
 #############################################################################################
 #################################### UNIT TESTS #############################################
 #############################################################################################
   UnitTestsAsan:
-    needs: [BuilderDebAsan]
+    needs: [RunConfig, BuilderDebAsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Unit tests (asan)
       runner_type: fuzzer-unit-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 unit_tests_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   UnitTestsReleaseClang:
-    needs: [BuilderBinRelease]
+    needs: [RunConfig, BuilderBinRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Unit tests (release)
       runner_type: fuzzer-unit-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 unit_tests_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   UnitTestsTsan:
-    needs: [BuilderDebTsan]
+    needs: [RunConfig, BuilderDebTsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Unit tests (tsan)
       runner_type: fuzzer-unit-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 unit_tests_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   UnitTestsMsan:
-    needs: [BuilderDebMsan]
+    needs: [RunConfig, BuilderDebMsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Unit tests (msan)
       runner_type: fuzzer-unit-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 unit_tests_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   UnitTestsUBsan:
-    needs: [BuilderDebUBsan]
+    needs: [RunConfig, BuilderDebUBsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Unit tests (ubsan)
       runner_type: fuzzer-unit-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 unit_tests_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
 #############################################################################################
 #################################### PERFORMANCE TESTS ######################################
 #############################################################################################
   PerformanceComparisonX86:
-    needs: [BuilderDebRelease]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Performance Comparison
       runner_type: stress-tester
-      batches: 4
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 performance_comparison_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   PerformanceComparisonAarch:
-    needs: [BuilderDebAarch64]
+    needs: [RunConfig, BuilderDebAarch64]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Performance Comparison Aarch64
       runner_type: func-tester-aarch64
-      batches: 4
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 performance_comparison_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
 ##############################################################################################
 ###################################### SQLANCER FUZZERS ######################################
 ##############################################################################################
   SQLancerTestRelease:
-    needs: [BuilderDebRelease]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: SQLancer (release)
       runner_type: fuzzer-unit-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 sqlancer_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   SQLancerTestDebug:
-    needs: [BuilderDebDebug]
+    needs: [RunConfig, BuilderDebDebug]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: SQLancer (debug)
       runner_type: fuzzer-unit-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 sqlancer_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   FinishCheck:
+    if: ${{ !failure() && !cancelled() }}
     needs:
-      - DockerHubPush
-      - BuilderReport
-      - BuilderSpecialReport
       - MarkReleaseReady
       - FunctionalStatelessTestDebug
       - FunctionalStatelessTestRelease
diff --git a/.github/workflows/nightly.yml b/.github/workflows/nightly.yml
index 1e94f70b9e67..458f59dfd384 100644
--- a/.github/workflows/nightly.yml
+++ b/.github/workflows/nightly.yml
@@ -13,67 +13,36 @@ jobs:
   Debug:
     # The task for having a preserved ENV and event.json for later investigation
     uses: ./.github/workflows/debug.yml
-  DockerHubPushAarch64:
-    runs-on: [self-hosted, style-checker-aarch64]
-    steps:
-      - name: Check out repository code
-        uses: ClickHouse/checkout@v1
-        with:
-          clear-repository: true
-      - name: Images check
-        run: |
-          cd "$GITHUB_WORKSPACE/tests/ci"
-          python3 docker_images_check.py --suffix aarch64 --all
-      - name: Upload images files to artifacts
-        uses: actions/upload-artifact@v3
-        with:
-          name: changed_images_aarch64
-          path: ${{ runner.temp }}/docker_images_check/changed_images_aarch64.json
-  DockerHubPushAmd64:
+  RunConfig:
     runs-on: [self-hosted, style-checker]
+    outputs:
+      data: ${{ steps.runconfig.outputs.CI_DATA }}
     steps:
       - name: Check out repository code
         uses: ClickHouse/checkout@v1
         with:
-          clear-repository: true
-      - name: Images check
+          clear-repository: true # to ensure correct digests
+      - name: PrepareRunConfig
+        id: runconfig
         run: |
-          cd "$GITHUB_WORKSPACE/tests/ci"
-          python3 docker_images_check.py --suffix amd64 --all
-      - name: Upload images files to artifacts
-        uses: actions/upload-artifact@v3
-        with:
-          name: changed_images_amd64
-          path: ${{ runner.temp }}/docker_images_check/changed_images_amd64.json
-  DockerHubPush:
-    needs: [DockerHubPushAmd64, DockerHubPushAarch64]
-    runs-on: [self-hosted, style-checker]
-    steps:
-      - name: Check out repository code
-        uses: ClickHouse/checkout@v1
-        with:
-          clear-repository: true
-          fetch-depth: 0  # to find ancestor merge commits necessary for finding proper docker tags
-          filter: tree:0
-      - name: Download changed aarch64 images
-        uses: actions/download-artifact@v3
-        with:
-          name: changed_images_aarch64
-          path: ${{ runner.temp }}
-      - name: Download changed amd64 images
-        uses: actions/download-artifact@v3
-        with:
-          name: changed_images_amd64
-          path: ${{ runner.temp }}
-      - name: Images check
-        run: |
-          cd "$GITHUB_WORKSPACE/tests/ci"
-          python3 docker_manifests_merge.py --suffix amd64 --suffix aarch64
-      - name: Upload images files to artifacts
-        uses: actions/upload-artifact@v3
-        with:
-          name: changed_images
-          path: ${{ runner.temp }}/changed_images.json
+            echo "::group::configure CI run"
+            python3 "$GITHUB_WORKSPACE/tests/ci/ci.py" --configure --skip-jobs --rebuild-all-docker --outfile ${{ runner.temp }}/ci_run_data.json
+            echo "::endgroup::"
+
+            echo "::group::CI run configure results"
+            python3 -m json.tool ${{ runner.temp }}/ci_run_data.json
+            echo "::endgroup::"
+            {
+              echo 'CI_DATA<<EOF'
+              cat  ${{ runner.temp }}/ci_run_data.json
+              echo 'EOF'
+            } >> "$GITHUB_OUTPUT"
+  BuildDockers:
+    needs: [RunConfig]
+    uses: ./.github/workflows/reusable_docker.yml
+    with:
+      data: "${{ needs.RunConfig.outputs.data }}"
+      set_latest: true
   SonarCloud:
     runs-on: [self-hosted, builder]
     env:
diff --git a/.github/workflows/pull_request.yml b/.github/workflows/pull_request.yml
index 0be703e11967..9f4636f73a4b 100644
--- a/.github/workflows/pull_request.yml
+++ b/.github/workflows/pull_request.yml
@@ -24,26 +24,21 @@ on:  # yamllint disable-line rule:truthy
 ##################################### SMALL CHECKS #######################################
 ##########################################################################################
 jobs:
-  CheckLabels:
+  RunConfig:
     runs-on: [self-hosted, style-checker]
-    # Run the first check always, even if the CI is cancelled
-    if: ${{ always() }}
+    outputs:
+      data: ${{ steps.runconfig.outputs.CI_DATA }}
     steps:
       - name: Check out repository code
         uses: ClickHouse/checkout@v1
         with:
-          clear-repository: true
+          clear-repository: true # to ensure correct digests
+          fetch-depth: 0 # to get version
+          filter: tree:0
       - name: Labels check
         run: |
           cd "$GITHUB_WORKSPACE/tests/ci"
           python3 run_check.py
-  PythonUnitTests:
-    runs-on: [self-hosted, style-checker]
-    steps:
-      - name: Check out repository code
-        uses: ClickHouse/checkout@v1
-        with:
-          clear-repository: true
       - name: Python unit tests
         run: |
           cd "$GITHUB_WORKSPACE/tests/ci"
@@ -53,249 +48,258 @@ jobs:
             echo "Testing $dir"
             python3 -m unittest discover -s "$dir" -p 'test_*.py'
           done
-  DockerHubPushAarch64:
-    needs: CheckLabels
-    runs-on: [self-hosted, style-checker-aarch64]
-    steps:
-      - name: Check out repository code
-        uses: ClickHouse/checkout@v1
-        with:
-          clear-repository: true
-      - name: Images check
+      - name: PrepareRunConfig
+        id: runconfig
         run: |
-          cd "$GITHUB_WORKSPACE/tests/ci"
-          python3 docker_images_check.py --suffix aarch64
-      - name: Upload images files to artifacts
-        uses: actions/upload-artifact@v3
-        with:
-          name: changed_images_aarch64
-          path: ${{ runner.temp }}/docker_images_check/changed_images_aarch64.json
-  DockerHubPushAmd64:
-    needs: CheckLabels
-    runs-on: [self-hosted, style-checker]
-    steps:
-      - name: Check out repository code
-        uses: ClickHouse/checkout@v1
-        with:
-          clear-repository: true
-      - name: Images check
+            echo "::group::configure CI run"
+            python3 "$GITHUB_WORKSPACE/tests/ci/ci.py" --configure --outfile ${{ runner.temp }}/ci_run_data.json
+            echo "::endgroup::"
+
+            echo "::group::CI run configure results"
+            python3 -m json.tool ${{ runner.temp }}/ci_run_data.json
+            echo "::endgroup::"
+
+            {
+              echo 'CI_DATA<<EOF'
+              cat  ${{ runner.temp }}/ci_run_data.json
+              echo 'EOF'
+            } >> "$GITHUB_OUTPUT"
+      - name: Re-create GH statuses for skipped jobs if any
         run: |
-          cd "$GITHUB_WORKSPACE/tests/ci"
-          python3 docker_images_check.py --suffix amd64
-      - name: Upload images files to artifacts
-        uses: actions/upload-artifact@v3
-        with:
-          name: changed_images_amd64
-          path: ${{ runner.temp }}/docker_images_check/changed_images_amd64.json
-  DockerHubPush:
-    needs: [DockerHubPushAmd64, DockerHubPushAarch64, PythonUnitTests]
-    runs-on: [self-hosted, style-checker]
-    steps:
-      - name: Check out repository code
-        uses: ClickHouse/checkout@v1
-        with:
-          clear-repository: true
-          fetch-depth: 0  # to find ancestor merge commits necessary for finding proper docker tags
-          filter: tree:0
-      - name: Download changed aarch64 images
-        uses: actions/download-artifact@v3
-        with:
-          name: changed_images_aarch64
-          path: ${{ runner.temp }}
-      - name: Download changed amd64 images
-        uses: actions/download-artifact@v3
-        with:
-          name: changed_images_amd64
-          path: ${{ runner.temp }}
-      - name: Images check
+            python3 "$GITHUB_WORKSPACE/tests/ci/ci.py" --infile ${{ runner.temp }}/ci_run_data.json --update-gh-statuses
+      - name: Style check early
+        # hack to run style check before the docker build job if possible (style-check image not changed)
+        if: contains(fromJson(steps.runconfig.outputs.CI_DATA).jobs_data.jobs_to_do, 'Style check early')
         run: |
-          cd "$GITHUB_WORKSPACE/tests/ci"
-          python3 docker_manifests_merge.py --suffix amd64 --suffix aarch64
-      - name: Upload images files to artifacts
-        uses: actions/upload-artifact@v3
-        with:
-          name: changed_images
-          path: ${{ runner.temp }}/changed_images.json
+          DOCKER_TAG=$(echo '${{ toJson(fromJson(steps.runconfig.outputs.CI_DATA).docker_data.images) }}' | tr -d '
')
+          export DOCKER_TAG=$DOCKER_TAG
+          python3 ./tests/ci/style_check.py --no-push
+  BuildDockers:
+    needs: [RunConfig]
+    if: ${{ !failure() && !cancelled() }}
+    uses: ./.github/workflows/reusable_docker.yml
+    with:
+      data: ${{ needs.RunConfig.outputs.data }}
   StyleCheck:
-    needs: DockerHubPush
-    # We need additional `&& ! cancelled()` to have the job being able to cancel
-    if: ${{ success() || failure() || ( always() && ! cancelled() ) }}
+    needs: [RunConfig, BuildDockers]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Style check
       runner_type: style-checker
       run_command: |
-          cd "$REPO_COPY/tests/ci"
           python3 style_check.py
+      data: ${{ needs.RunConfig.outputs.data }}
     secrets:
       secret_envs: |
         ROBOT_CLICKHOUSE_SSH_KEY<<RCSK
         ${{secrets.ROBOT_CLICKHOUSE_SSH_KEY}}
         RCSK
+  DocsCheck:
+    needs: [RunConfig, StyleCheck]
+    if: ${{ !failure() && !cancelled() }}
+    uses: ./.github/workflows/reusable_test.yml
+    with:
+      test_name: Docs check
+      runner_type: func-tester-aarch64
+      data: ${{ needs.RunConfig.outputs.data }}
+      run_command: |
+        python3 docs_check.py
   FastTest:
-    needs: DockerHubPush
+    needs: [RunConfig, StyleCheck]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Fast tests
       runner_type: builder
+      data: ${{ needs.RunConfig.outputs.data }}
       run_command: |
-          cd "$REPO_COPY/tests/ci"
           python3 fast_test_check.py
   CompatibilityCheckX86:
-    needs: [BuilderDebRelease]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
-      test_name: Compatibility check X86
+      test_name: Compatibility check (amd64)
       runner_type: style-checker
+      data: ${{ needs.RunConfig.outputs.data }}
       run_command: |
-        cd "$REPO_COPY/tests/ci"
         python3 compatibility_check.py --check-name "Compatibility check (amd64)" --check-glibc --check-distributions
   CompatibilityCheckAarch64:
-    needs: [BuilderDebAarch64]
+    needs: [RunConfig, BuilderDebAarch64]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
-      test_name: Compatibility check X86
+      test_name: Compatibility check (aarch64)
       runner_type: style-checker
+      data: ${{ needs.RunConfig.outputs.data }}
       run_command: |
-        cd "$REPO_COPY/tests/ci"
         python3 compatibility_check.py --check-name "Compatibility check (aarch64)" --check-glibc
 #########################################################################################
 #################################### ORDINARY BUILDS ####################################
 #########################################################################################
+  BuilderDebDebug:
+    needs: [RunConfig, FastTest]
+    if: ${{ !failure() && !cancelled() }}
+    uses: ./.github/workflows/reusable_build.yml
+    with:
+      build_name: package_debug
+      data: ${{ needs.RunConfig.outputs.data }}
   BuilderDebRelease:
-    needs: [FastTest, StyleCheck]
+    needs: [RunConfig, FastTest]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: package_release
       checkout_depth: 0
+      data: ${{ needs.RunConfig.outputs.data }}
   BuilderDebAarch64:
-    needs: [FastTest, StyleCheck]
+    needs: [RunConfig, FastTest]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: package_aarch64
       checkout_depth: 0
+      data: ${{ needs.RunConfig.outputs.data }}
   BuilderBinRelease:
-    needs: [FastTest, StyleCheck]
+    needs: [RunConfig, FastTest]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: binary_release
+      data: ${{ needs.RunConfig.outputs.data }}
   BuilderDebAsan:
-    needs: [FastTest, StyleCheck]
+    needs: [RunConfig, FastTest]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: package_asan
+      data: ${{ needs.RunConfig.outputs.data }}
   BuilderDebUBsan:
-    needs: [FastTest, StyleCheck]
+    needs: [RunConfig, FastTest]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: package_ubsan
+      data: ${{ needs.RunConfig.outputs.data }}
   BuilderDebTsan:
-    needs: [FastTest, StyleCheck]
+    needs: [RunConfig, FastTest]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: package_tsan
+      data: ${{ needs.RunConfig.outputs.data }}
   BuilderDebMsan:
-    needs: [FastTest, StyleCheck]
+    needs: [RunConfig, FastTest]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: package_msan
-  BuilderDebDebug:
-    needs: [FastTest, StyleCheck]
-    uses: ./.github/workflows/reusable_build.yml
-    with:
-      build_name: package_debug
+      data: ${{ needs.RunConfig.outputs.data }}
 ##########################################################################################
 ##################################### SPECIAL BUILDS #####################################
 ##########################################################################################
   BuilderBinClangTidy:
-    needs: [FastTest, StyleCheck]
+    needs: [RunConfig, FastTest]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: binary_tidy
+      data: ${{ needs.RunConfig.outputs.data }}
   BuilderBinDarwin:
-    needs: [FastTest, StyleCheck]
+    needs: [RunConfig, FastTest]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: binary_darwin
+      data: ${{ needs.RunConfig.outputs.data }}
   BuilderBinAarch64:
-    needs: [FastTest, StyleCheck]
+    needs: [RunConfig, FastTest]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: binary_aarch64
+      data: ${{ needs.RunConfig.outputs.data }}
   BuilderBinFreeBSD:
-    needs: [FastTest, StyleCheck]
+    needs: [RunConfig, FastTest]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: binary_freebsd
+      data: ${{ needs.RunConfig.outputs.data }}
   BuilderBinDarwinAarch64:
-    needs: [FastTest, StyleCheck]
+    needs: [RunConfig, FastTest]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: binary_darwin_aarch64
+      data: ${{ needs.RunConfig.outputs.data }}
   BuilderBinPPC64:
-    needs: [FastTest, StyleCheck]
+    needs: [RunConfig, FastTest]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: binary_ppc64le
+      data: ${{ needs.RunConfig.outputs.data }}
   BuilderBinAmd64Compat:
-    needs: [FastTest, StyleCheck]
+    needs: [RunConfig, FastTest]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: binary_amd64_compat
+      data: ${{ needs.RunConfig.outputs.data }}
   BuilderBinAmd64Musl:
-    needs: [FastTest, StyleCheck]
+    needs: [RunConfig, FastTest]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: binary_amd64_musl
+      data: ${{ needs.RunConfig.outputs.data }}
   BuilderBinAarch64V80Compat:
-    needs: [FastTest, StyleCheck]
+    needs: [RunConfig, FastTest]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: binary_aarch64_v80compat
+      data: ${{ needs.RunConfig.outputs.data }}
   BuilderBinRISCV64:
-    needs: [FastTest, StyleCheck]
+    needs: [RunConfig, FastTest]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: binary_riscv64
+      data: ${{ needs.RunConfig.outputs.data }}
   BuilderBinS390X:
-    needs: [FastTest, StyleCheck]
+    needs: [RunConfig, FastTest]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: binary_s390x
+      data: ${{ needs.RunConfig.outputs.data }}
 ############################################################################################
 ##################################### Docker images  #######################################
 ############################################################################################
   DockerServerImages:
-    needs:
-      - BuilderDebRelease
-      - BuilderDebAarch64
-    runs-on: [self-hosted, style-checker]
-    steps:
-      - name: Check out repository code
-        uses: ClickHouse/checkout@v1
-        with:
-          clear-repository: true
-          fetch-depth: 0  # It MUST BE THE SAME for all dependencies and the job itself
-          filter: tree:0
-      - name: Check docker clickhouse/clickhouse-server building
-        run: |
-          cd "$GITHUB_WORKSPACE/tests/ci"
-          python3 docker_server.py --release-type head --no-push \
-            --image-repo clickhouse/clickhouse-server --image-path docker/server
-          python3 docker_server.py --release-type head --no-push \
-            --image-repo clickhouse/clickhouse-keeper --image-path docker/keeper
-      - name: Cleanup
-        if: always()
-        run: |
-          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
-          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
-          sudo rm -fr "$TEMP_PATH"
+    needs: [RunConfig, BuilderDebRelease, BuilderDebAarch64]
+    if: ${{ !failure() && !cancelled() }}
+    uses: ./.github/workflows/reusable_test.yml
+    with:
+      test_name: Docker server and keeper images
+      runner_type: style-checker
+      data: ${{ needs.RunConfig.outputs.data }}
+      checkout_depth: 0  # It MUST BE THE SAME for all dependencies and the job itself
+      run_command: |
+        cd "$GITHUB_WORKSPACE/tests/ci"
+        python3 docker_server.py --release-type head --no-push \
+          --image-repo clickhouse/clickhouse-server --image-path docker/server --allow-build-reuse
+        python3 docker_server.py --release-type head --no-push \
+          --image-repo clickhouse/clickhouse-keeper --image-path docker/keeper --allow-build-reuse
 ############################################################################################
 ##################################### BUILD REPORTER #######################################
 ############################################################################################
   BuilderReport:
-    if: ${{ success() || failure() }}
     needs:
+      - RunConfig
       - BuilderBinRelease
       - BuilderDebAarch64
       - BuilderDebAsan
@@ -304,20 +308,22 @@ jobs:
       - BuilderDebRelease
       - BuilderDebTsan
       - BuilderDebUBsan
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: ClickHouse build check
       runner_type: style-checker
+      data: ${{ needs.RunConfig.outputs.data }}
       additional_envs: |
         NEEDS_DATA<<NDENV
         ${{ toJSON(needs) }}
         NDENV
       run_command: |
-        cd "$GITHUB_WORKSPACE/tests/ci"
         python3 build_report_check.py "$CHECK_NAME"
   BuilderSpecialReport:
-    if: ${{ success() || failure() }}
+    if: ${{ !failure() && !cancelled() }}
     needs:
+      - RunConfig
       - BuilderBinAarch64
       - BuilderBinDarwin
       - BuilderBinDarwinAarch64
@@ -332,223 +338,159 @@ jobs:
     with:
       test_name: ClickHouse special build check
       runner_type: style-checker
+      data: ${{ needs.RunConfig.outputs.data }}
       additional_envs: |
         NEEDS_DATA<<NDENV
         ${{ toJSON(needs) }}
         NDENV
       run_command: |
-        cd "$GITHUB_WORKSPACE/tests/ci"
         python3 build_report_check.py "$CHECK_NAME"
 ############################################################################################
 #################################### INSTALL PACKAGES ######################################
 ############################################################################################
   InstallPackagesTestRelease:
-    needs: [BuilderDebRelease]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Install packages (amd64)
       runner_type: style-checker
+      data: ${{ needs.RunConfig.outputs.data }}
       run_command: |
-        cd "$REPO_COPY/tests/ci"
         python3 install_check.py "$CHECK_NAME"
   InstallPackagesTestAarch64:
-    needs: [BuilderDebAarch64]
+    needs: [RunConfig, BuilderDebAarch64]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Install packages (arm64)
       runner_type: style-checker-aarch64
+      data: ${{ needs.RunConfig.outputs.data }}
       run_command: |
-        cd "$REPO_COPY/tests/ci"
         python3 install_check.py "$CHECK_NAME"
 ##############################################################################################
 ########################### FUNCTIONAl STATELESS TESTS #######################################
 ##############################################################################################
   FunctionalStatelessTestRelease:
-    needs: [BuilderDebRelease]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateless tests (release)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=10800
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatelessTestReleaseDatabaseReplicated:
-    needs: [BuilderDebRelease]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateless tests (release, DatabaseReplicated)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=10800
-      batches: 4
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
-  FunctionalStatelessTestReleaseWideParts:
-    needs: [BuilderDebRelease]
-    uses: ./.github/workflows/reusable_test.yml
-    with:
-      test_name: Stateless tests (release, wide parts enabled)
-      runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=10800
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatelessTestReleaseAnalyzer:
-    needs: [BuilderDebRelease]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateless tests (release, analyzer)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=10800
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatelessTestReleaseS3:
-    needs: [BuilderDebRelease]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateless tests (release, s3 storage)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=10800
-      batches: 2
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatelessTestS3Debug:
-    needs: [BuilderDebDebug]
+    needs: [RunConfig, BuilderDebDebug]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateless tests (debug, s3 storage)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=10800
-      batches: 6
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatelessTestS3Tsan:
-    needs: [BuilderDebTsan]
+    needs: [RunConfig, BuilderDebTsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateless tests (tsan, s3 storage)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=10800
-      batches: 5
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatelessTestAarch64:
-    needs: [BuilderDebAarch64]
+    needs: [RunConfig, BuilderDebAarch64]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateless tests (aarch64)
       runner_type: func-tester-aarch64
-      additional_envs: |
-        KILL_TIMEOUT=10800
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatelessTestAsan:
-    needs: [BuilderDebAsan]
+    needs: [RunConfig, BuilderDebAsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateless tests (asan)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=10800
-      batches: 4
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatelessTestTsan:
-    needs: [BuilderDebTsan]
+    needs: [RunConfig, BuilderDebTsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateless tests (tsan)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=10800
-      batches: 5
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatelessTestMsan:
-    needs: [BuilderDebMsan]
+    needs: [RunConfig, BuilderDebMsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateless tests (msan)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=10800
-      batches: 6
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatelessTestUBsan:
-    needs: [BuilderDebUBsan]
+    needs: [RunConfig, BuilderDebUBsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateless tests (ubsan)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=10800
-      batches: 2
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatelessTestDebug:
-    needs: [BuilderDebDebug]
+    needs: [RunConfig, BuilderDebDebug]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateless tests (debug)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=10800
-      batches: 5
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatelessTestFlakyCheck:
-    needs: [BuilderDebAsan]
+    needs: [RunConfig, BuilderDebAsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateless tests flaky check (asan)
+      data: ${{ needs.RunConfig.outputs.data }}
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=3600
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
   TestsBugfixCheck:
-    needs: [CheckLabels, StyleCheck]
+    needs: [RunConfig, StyleCheck]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: tests bugfix validate check
       runner_type: func-tester
+      data: ${{ needs.RunConfig.outputs.data }}
       additional_envs: |
         KILL_TIMEOUT=3600
       run_command: |
-        cd "$REPO_COPY/tests/ci"
-
-        mkdir -p "${REPORTS_PATH}/integration"
-        mkdir -p "${REPORTS_PATH}/stateless"
-        cp -r ${REPORTS_PATH}/changed_images* ${REPORTS_PATH}/integration
-        cp -r ${REPORTS_PATH}/changed_images* ${REPORTS_PATH}/stateless
-
         TEMP_PATH="${TEMP_PATH}/integration" \
-          REPORTS_PATH="${REPORTS_PATH}/integration" \
           python3 integration_test_check.py "Integration $CHECK_NAME" \
             --validate-bugfix --post-commit-status=file || echo 'ignore exit code'
 
         TEMP_PATH="${TEMP_PATH}/stateless" \
-          REPORTS_PATH="${REPORTS_PATH}/stateless" \
           python3 functional_test_check.py "Stateless $CHECK_NAME" "$KILL_TIMEOUT" \
             --validate-bugfix --post-commit-status=file || echo 'ignore exit code'
 
@@ -557,462 +499,388 @@ jobs:
 ############################ FUNCTIONAl STATEFUL TESTS #######################################
 ##############################################################################################
   FunctionalStatefulTestRelease:
-    needs: [BuilderDebRelease]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateful tests (release)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=3600
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatefulTestAarch64:
-    needs: [BuilderDebAarch64]
+    needs: [RunConfig, BuilderDebAarch64]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateful tests (aarch64)
       runner_type: func-tester-aarch64
-      additional_envs: |
-        KILL_TIMEOUT=3600
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatefulTestAsan:
-    needs: [BuilderDebAsan]
+    needs: [RunConfig, BuilderDebAsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateful tests (asan)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=3600
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatefulTestTsan:
-    needs: [BuilderDebTsan]
+    needs: [RunConfig, BuilderDebTsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateful tests (tsan)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=3600
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatefulTestMsan:
-    needs: [BuilderDebMsan]
+    needs: [RunConfig, BuilderDebMsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateful tests (msan)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=3600
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatefulTestUBsan:
-    needs: [BuilderDebUBsan]
+    needs: [RunConfig, BuilderDebUBsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateful tests (ubsan)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=3600
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatefulTestDebug:
-    needs: [BuilderDebDebug]
+    needs: [RunConfig, BuilderDebDebug]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateful tests (debug)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=3600
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   # Parallel replicas
   FunctionalStatefulTestDebugParallelReplicas:
-    needs: [BuilderDebDebug]
+    needs: [RunConfig, BuilderDebDebug]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateful tests (debug, ParallelReplicas)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=3600
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatefulTestUBsanParallelReplicas:
-    needs: [BuilderDebUBsan]
+    needs: [RunConfig, BuilderDebUBsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateful tests (ubsan, ParallelReplicas)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=3600
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatefulTestMsanParallelReplicas:
-    needs: [BuilderDebMsan]
+    needs: [RunConfig, BuilderDebMsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateful tests (msan, ParallelReplicas)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=3600
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatefulTestTsanParallelReplicas:
-    needs: [BuilderDebTsan]
+    needs: [RunConfig, BuilderDebTsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateful tests (tsan, ParallelReplicas)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=3600
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatefulTestAsanParallelReplicas:
-    needs: [BuilderDebAsan]
+    needs: [RunConfig, BuilderDebAsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateful tests (asan, ParallelReplicas)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=3600
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatefulTestReleaseParallelReplicas:
-    needs: [BuilderDebRelease]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateful tests (release, ParallelReplicas)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=3600
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
 ##############################################################################################
 ########################### ClickBench #######################################################
 ##############################################################################################
   ClickBenchAMD64:
-    needs: [BuilderDebRelease]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: ClickBench (amd64)
       runner_type: func-tester
+      data: ${{ needs.RunConfig.outputs.data }}
       run_command: |
-        cd "$REPO_COPY/tests/ci"
         python3 clickbench.py "$CHECK_NAME"
   ClickBenchAarch64:
-    needs: [BuilderDebAarch64]
+    needs: [RunConfig, BuilderDebAarch64]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: ClickBench (aarch64)
       runner_type: func-tester-aarch64
+      data: ${{ needs.RunConfig.outputs.data }}
       run_command: |
-        cd "$REPO_COPY/tests/ci"
         python3 clickbench.py "$CHECK_NAME"
 ##############################################################################################
 ######################################### STRESS TESTS #######################################
 ##############################################################################################
   StressTestAsan:
-    needs: [BuilderDebAsan]
+    needs: [RunConfig, BuilderDebAsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stress test (asan)
       runner_type: stress-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 stress_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   StressTestTsan:
-    needs: [BuilderDebTsan]
+    needs: [RunConfig, BuilderDebTsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stress test (tsan)
       runner_type: stress-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 stress_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   StressTestMsan:
-    needs: [BuilderDebMsan]
+    needs: [RunConfig, BuilderDebMsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stress test (msan)
       runner_type: stress-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 stress_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   StressTestUBsan:
-    needs: [BuilderDebUBsan]
+    needs: [RunConfig, BuilderDebUBsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stress test (ubsan)
       runner_type: stress-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 stress_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   StressTestDebug:
-    needs: [BuilderDebDebug]
+    needs: [RunConfig, BuilderDebDebug]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stress test (debug)
       runner_type: stress-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 stress_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
 ##############################################################################################
 ######################################### UPGRADE CHECK ######################################
 ##############################################################################################
   UpgradeCheckAsan:
-    needs: [BuilderDebAsan]
+    needs: [RunConfig, BuilderDebAsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Upgrade check (asan)
       runner_type: stress-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 upgrade_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   UpgradeCheckTsan:
-    needs: [BuilderDebTsan]
+    needs: [RunConfig, BuilderDebTsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Upgrade check (tsan)
       runner_type: stress-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 upgrade_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   UpgradeCheckMsan:
-    needs: [BuilderDebMsan]
+    needs: [RunConfig, BuilderDebMsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Upgrade check (msan)
       runner_type: stress-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 upgrade_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   UpgradeCheckDebug:
-    needs: [BuilderDebDebug]
+    needs: [RunConfig, BuilderDebDebug]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Upgrade check (debug)
       runner_type: stress-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 upgrade_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
 ##############################################################################################
 ##################################### AST FUZZERS ############################################
 ##############################################################################################
   ASTFuzzerTestAsan:
-    needs: [BuilderDebAsan]
+    needs: [RunConfig, BuilderDebAsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: AST fuzzer (asan)
       runner_type: fuzzer-unit-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 ast_fuzzer_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   ASTFuzzerTestTsan:
-    needs: [BuilderDebTsan]
+    needs: [RunConfig, BuilderDebTsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: AST fuzzer (tsan)
       runner_type: fuzzer-unit-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 ast_fuzzer_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   ASTFuzzerTestUBSan:
-    needs: [BuilderDebUBsan]
+    needs: [RunConfig, BuilderDebUBsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: AST fuzzer (ubsan)
       runner_type: fuzzer-unit-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 ast_fuzzer_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   ASTFuzzerTestMSan:
-    needs: [BuilderDebMsan]
+    needs: [RunConfig, BuilderDebMsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: AST fuzzer (msan)
       runner_type: fuzzer-unit-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 ast_fuzzer_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   ASTFuzzerTestDebug:
-    needs: [BuilderDebDebug]
+    needs: [RunConfig, BuilderDebDebug]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: AST fuzzer (debug)
       runner_type: fuzzer-unit-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 ast_fuzzer_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
 #############################################################################################
 ############################# INTEGRATION TESTS #############################################
 #############################################################################################
   IntegrationTestsAsan:
-    needs: [BuilderDebAsan]
+    needs: [RunConfig, BuilderDebAsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Integration tests (asan)
       runner_type: stress-tester
-      batches: 4
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 integration_test_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   IntegrationTestsAnalyzerAsan:
-    needs: [BuilderDebAsan]
+    needs: [RunConfig, BuilderDebAsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Integration tests (asan, analyzer)
       runner_type: stress-tester
-      batches: 6
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 integration_test_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   IntegrationTestsTsan:
-    needs: [BuilderDebTsan]
+    needs: [RunConfig, BuilderDebTsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Integration tests (tsan)
       runner_type: stress-tester
-      batches: 6
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 integration_test_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   IntegrationTestsRelease:
-    needs: [BuilderDebRelease]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Integration tests (release)
       runner_type: stress-tester
-      batches: 4
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 integration_test_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   IntegrationTestsFlakyCheck:
-    needs: [BuilderDebAsan]
+    needs: [RunConfig, BuilderDebAsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Integration tests flaky check (asan)
       runner_type: stress-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 integration_test_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
 #############################################################################################
 #################################### UNIT TESTS #############################################
 #############################################################################################
   UnitTestsAsan:
-    needs: [BuilderDebAsan]
+    needs: [RunConfig, BuilderDebAsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Unit tests (asan)
       runner_type: fuzzer-unit-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 unit_tests_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   UnitTestsReleaseClang:
-    needs: [BuilderBinRelease]
+    needs: [RunConfig, BuilderBinRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Unit tests (release)
       runner_type: fuzzer-unit-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 unit_tests_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   UnitTestsTsan:
-    needs: [BuilderDebTsan]
+    needs: [RunConfig, BuilderDebTsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Unit tests (tsan)
       runner_type: fuzzer-unit-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 unit_tests_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   UnitTestsMsan:
-    needs: [BuilderDebMsan]
+    needs: [RunConfig, BuilderDebMsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Unit tests (msan)
       runner_type: fuzzer-unit-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 unit_tests_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   UnitTestsUBsan:
-    needs: [BuilderDebUBsan]
+    needs: [RunConfig, BuilderDebUBsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Unit tests (ubsan)
       runner_type: fuzzer-unit-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 unit_tests_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
 #############################################################################################
 #################################### PERFORMANCE TESTS ######################################
 #############################################################################################
   PerformanceComparisonX86:
-    needs: [BuilderDebRelease]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Performance Comparison
       runner_type: stress-tester
-      batches: 4
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 performance_comparison_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   PerformanceComparisonAarch:
-    needs: [BuilderDebAarch64]
+    needs: [RunConfig, BuilderDebAarch64]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Performance Comparison Aarch64
       runner_type: func-tester-aarch64
-      batches: 4
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 performance_comparison_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
 ##############################################################################################
 ###################################### SQLANCER FUZZERS ######################################
 ##############################################################################################
   SQLancerTestRelease:
-    needs: [BuilderDebRelease]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: SQLancer (release)
       runner_type: fuzzer-unit-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 sqlancer_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   SQLancerTestDebug:
-    needs: [BuilderDebDebug]
+    needs: [RunConfig, BuilderDebDebug]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: SQLancer (debug)
       runner_type: fuzzer-unit-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 sqlancer_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   FinishCheck:
+    if: ${{ !failure() && !cancelled() }}
     needs:
-      - StyleCheck
-      - DockerHubPush
-      - DockerServerImages
-      - CheckLabels
       - BuilderReport
       - BuilderSpecialReport
+      - DocsCheck
       - FastTest
       - FunctionalStatelessTestDebug
       - FunctionalStatelessTestRelease
       - FunctionalStatelessTestReleaseDatabaseReplicated
-      - FunctionalStatelessTestReleaseWideParts
       - FunctionalStatelessTestReleaseAnalyzer
       - FunctionalStatelessTestAarch64
       - FunctionalStatelessTestAsan
@@ -1080,28 +948,24 @@ jobs:
 ############################ SQLLOGIC TEST ###################################################
 ##############################################################################################
   SQLLogicTestRelease:
-    needs: [BuilderDebRelease]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Sqllogic test (release)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=10800
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 sqllogic_test.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
 ##############################################################################################
 ##################################### SQL TEST ###############################################
 ##############################################################################################
   SQLTest:
-    needs: [BuilderDebRelease]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: SQLTest
       runner_type: fuzzer-unit-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 sqltest.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
 #############################################################################################
 ###################################### NOT IN FINISH ########################################
 #############################################################################################
@@ -1111,13 +975,15 @@ jobs:
     # This is special test NOT INCLUDED in FinishCheck
     # When it's skipped, all dependent tasks will be skipped too.
     # DO NOT add it there
-    if: contains(github.event.pull_request.labels.*.name, 'jepsen-test')
-    needs: [BuilderBinRelease]
+    if: ${{ !failure() && !cancelled() && contains(github.event.pull_request.labels.*.name, 'jepsen-test') }}
+    needs: [RunConfig, BuilderBinRelease]
     uses: ./.github/workflows/jepsen.yml
 #############################################################################################
 ####################################### libFuzzer ###########################################
 #############################################################################################
   libFuzzer:
-    if: contains(github.event.pull_request.labels.*.name, 'libFuzzer')
-    needs: [DockerHubPush, StyleCheck]
+    if: ${{ !failure() && !cancelled() && contains(github.event.pull_request.labels.*.name, 'libFuzzer') }}
+    needs: [RunConfig, StyleCheck]
     uses: ./.github/workflows/libfuzzer.yml
+    with:
+      data: ${{ needs.RunConfig.outputs.data }}
diff --git a/.github/workflows/release_branches.yml b/.github/workflows/release_branches.yml
index b5771fa87ab9..4fecc5acf58b 100644
--- a/.github/workflows/release_branches.yml
+++ b/.github/workflows/release_branches.yml
@@ -13,171 +13,165 @@ on: # yamllint disable-line rule:truthy
       - '2[1-9].[1-9]'
 
 jobs:
-  DockerHubPushAarch64:
-    runs-on: [self-hosted, style-checker-aarch64]
-    steps:
-      - name: Check out repository code
-        uses: ClickHouse/checkout@v1
-        with:
-          clear-repository: true
-      - name: Images check
-        run: |
-          cd "$GITHUB_WORKSPACE/tests/ci"
-          python3 docker_images_check.py --suffix aarch64
-      - name: Upload images files to artifacts
-        uses: actions/upload-artifact@v3
-        with:
-          name: changed_images_aarch64
-          path: ${{ runner.temp }}/docker_images_check/changed_images_aarch64.json
-  DockerHubPushAmd64:
+  RunConfig:
     runs-on: [self-hosted, style-checker]
+    outputs:
+      data: ${{ steps.runconfig.outputs.CI_DATA }}
     steps:
       - name: Check out repository code
         uses: ClickHouse/checkout@v1
         with:
-          clear-repository: true
-      - name: Images check
+          clear-repository: true # to ensure correct digests
+      - name: Labels check
         run: |
           cd "$GITHUB_WORKSPACE/tests/ci"
-          python3 docker_images_check.py --suffix amd64
-      - name: Upload images files to artifacts
-        uses: actions/upload-artifact@v3
-        with:
-          name: changed_images_amd64
-          path: ${{ runner.temp }}/docker_images_check/changed_images_amd64.json
-  DockerHubPush:
-    needs: [DockerHubPushAmd64, DockerHubPushAarch64]
-    runs-on: [self-hosted, style-checker]
-    steps:
-      - name: Check out repository code
-        uses: ClickHouse/checkout@v1
-        with:
-          clear-repository: true
-          fetch-depth: 0  # to find ancestor merge commits necessary for finding proper docker tags
-          filter: tree:0
-      - name: Download changed aarch64 images
-        uses: actions/download-artifact@v3
-        with:
-          name: changed_images_aarch64
-          path: ${{ runner.temp }}
-      - name: Download changed amd64 images
-        uses: actions/download-artifact@v3
-        with:
-          name: changed_images_amd64
-          path: ${{ runner.temp }}
-      - name: Images check
+          python3 run_check.py
+      - name: Python unit tests
         run: |
           cd "$GITHUB_WORKSPACE/tests/ci"
-          python3 docker_manifests_merge.py --suffix amd64 --suffix aarch64
-      - name: Upload images files to artifacts
-        uses: actions/upload-artifact@v3
-        with:
-          name: changed_images
-          path: ${{ runner.temp }}/changed_images.json
+          echo "Testing the main ci directory"
+          python3 -m unittest discover -s . -p 'test_*.py'
+          for dir in *_lambda/; do
+            echo "Testing $dir"
+            python3 -m unittest discover -s "$dir" -p 'test_*.py'
+          done
+      - name: PrepareRunConfig
+        id: runconfig
+        run: |
+            echo "::group::configure CI run"
+            python3 "$GITHUB_WORKSPACE/tests/ci/ci.py" --configure --rebuild-all-binaries --outfile ${{ runner.temp }}/ci_run_data.json
+            echo "::endgroup::"
+            echo "::group::CI run configure results"
+            python3 -m json.tool ${{ runner.temp }}/ci_run_data.json
+            echo "::endgroup::"
+            {
+              echo 'CI_DATA<<EOF'
+              cat  ${{ runner.temp }}/ci_run_data.json
+              echo 'EOF'
+            } >> "$GITHUB_OUTPUT"
+      - name: Re-create GH statuses for skipped jobs if any
+        run: |
+            python3 "$GITHUB_WORKSPACE/tests/ci/ci.py" --infile ${{ runner.temp }}/ci_run_data.json --update-gh-statuses
+  BuildDockers:
+    needs: [RunConfig]
+    if: ${{ !failure() && !cancelled() }}
+    uses: ./.github/workflows/reusable_docker.yml
+    with:
+      data: ${{ needs.RunConfig.outputs.data }}
   CompatibilityCheckX86:
-    needs: [BuilderDebRelease]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
-      test_name: Compatibility check X86
+      test_name: Compatibility check (amd64)
       runner_type: style-checker
+      data: ${{ needs.RunConfig.outputs.data }}
       run_command: |
-        cd "$REPO_COPY/tests/ci"
         python3 compatibility_check.py --check-name "Compatibility check (amd64)" --check-glibc --check-distributions
   CompatibilityCheckAarch64:
-    needs: [BuilderDebAarch64]
+    needs: [RunConfig, BuilderDebAarch64]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
-      test_name: Compatibility check X86
+      test_name: Compatibility check (aarch64)
       runner_type: style-checker
+      data: ${{ needs.RunConfig.outputs.data }}
       run_command: |
-        cd "$REPO_COPY/tests/ci"
         python3 compatibility_check.py --check-name "Compatibility check (aarch64)" --check-glibc
 #########################################################################################
 #################################### ORDINARY BUILDS ####################################
 #########################################################################################
   BuilderDebRelease:
-    needs: [DockerHubPush]
+    needs: [RunConfig, BuildDockers]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: package_release
       checkout_depth: 0
+      data: ${{ needs.RunConfig.outputs.data }}
   BuilderDebAarch64:
-    needs: [DockerHubPush]
+    needs: [RunConfig, BuildDockers]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: package_aarch64
       checkout_depth: 0
+      data: ${{ needs.RunConfig.outputs.data }}
   BuilderDebAsan:
-    needs: [DockerHubPush]
+    needs: [RunConfig, BuildDockers]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: package_asan
+      data: ${{ needs.RunConfig.outputs.data }}
   BuilderDebUBsan:
-    needs: [DockerHubPush]
+    needs: [RunConfig, BuildDockers]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: package_ubsan
+      data: ${{ needs.RunConfig.outputs.data }}
   BuilderDebTsan:
-    needs: [DockerHubPush]
+    needs: [RunConfig, BuildDockers]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: package_tsan
+      data: ${{ needs.RunConfig.outputs.data }}
   BuilderDebMsan:
-    needs: [DockerHubPush]
+    needs: [RunConfig, BuildDockers]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: package_msan
+      data: ${{ needs.RunConfig.outputs.data }}
   BuilderDebDebug:
-    needs: [DockerHubPush]
+    needs: [RunConfig, BuildDockers]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: package_debug
+      data: ${{ needs.RunConfig.outputs.data }}
   BuilderBinDarwin:
-    needs: [DockerHubPush]
+    needs: [RunConfig, BuildDockers]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: binary_darwin
       checkout_depth: 0
+      data: ${{ needs.RunConfig.outputs.data }}
   BuilderBinDarwinAarch64:
-    needs: [DockerHubPush]
+    needs: [RunConfig, BuildDockers]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_build.yml
     with:
       build_name: binary_darwin_aarch64
       checkout_depth: 0
+      data: ${{ needs.RunConfig.outputs.data }}
 ############################################################################################
 ##################################### Docker images  #######################################
 ############################################################################################
   DockerServerImages:
-    needs:
-      - BuilderDebRelease
-      - BuilderDebAarch64
-    runs-on: [self-hosted, style-checker]
-    steps:
-      - name: Check out repository code
-        uses: ClickHouse/checkout@v1
-        with:
-          clear-repository: true
-          fetch-depth: 0  # It MUST BE THE SAME for all dependencies and the job itself
-          filter: tree:0
-      - name: Check docker clickhouse/clickhouse-server building
-        run: |
-          cd "$GITHUB_WORKSPACE/tests/ci"
-          python3 docker_server.py --release-type head --no-push \
-            --image-repo clickhouse/clickhouse-server --image-path docker/server
-          python3 docker_server.py --release-type head --no-push \
-            --image-repo clickhouse/clickhouse-keeper --image-path docker/keeper
-      - name: Cleanup
-        if: always()
-        run: |
-          docker ps --quiet | xargs --no-run-if-empty docker kill ||:
-          docker ps --all --quiet | xargs --no-run-if-empty docker rm -f ||:
-          sudo rm -fr "$TEMP_PATH"
+    needs: [RunConfig, BuilderDebRelease, BuilderDebAarch64]
+    if: ${{ !failure() && !cancelled() }}
+    uses: ./.github/workflows/reusable_test.yml
+    with:
+      test_name: Docker server and keeper images
+      runner_type: style-checker
+      data: ${{ needs.RunConfig.outputs.data }}
+      checkout_depth: 0
+      run_command: |
+        cd "$GITHUB_WORKSPACE/tests/ci"
+        python3 docker_server.py --release-type head --no-push \
+          --image-repo clickhouse/clickhouse-server --image-path docker/server --allow-build-reuse
+        python3 docker_server.py --release-type head --no-push \
+          --image-repo clickhouse/clickhouse-keeper --image-path docker/keeper --allow-build-reuse
 ############################################################################################
 ##################################### BUILD REPORTER #######################################
 ############################################################################################
   BuilderReport:
-    if: ${{ success() || failure() }}
     needs:
+      - RunConfig
       - BuilderDebRelease
       - BuilderDebAarch64
       - BuilderDebAsan
@@ -185,32 +179,39 @@ jobs:
       - BuilderDebUBsan
       - BuilderDebMsan
       - BuilderDebDebug
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: ClickHouse build check
       runner_type: style-checker
+      data: ${{ needs.RunConfig.outputs.data }}
       additional_envs: |
         NEEDS_DATA<<NDENV
         ${{ toJSON(needs) }}
         NDENV
       run_command: |
-        cd "$GITHUB_WORKSPACE/tests/ci"
         python3 build_report_check.py "$CHECK_NAME"
   BuilderSpecialReport:
-    if: ${{ success() || failure() }}
+    if: ${{ !failure() && !cancelled() }}
     needs:
-      - BuilderBinDarwin
-      - BuilderBinDarwinAarch64
+      - RunConfig
+      - BuilderDebRelease
+      - BuilderDebAarch64
+      - BuilderDebAsan
+      - BuilderDebTsan
+      - BuilderDebUBsan
+      - BuilderDebMsan
+      - BuilderDebDebug
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: ClickHouse special build check
       runner_type: style-checker
+      data: ${{ needs.RunConfig.outputs.data }}
       additional_envs: |
         NEEDS_DATA<<NDENV
         ${{ toJSON(needs) }}
         NDENV
       run_command: |
-        cd "$GITHUB_WORKSPACE/tests/ci"
         python3 build_report_check.py "$CHECK_NAME"
   MarkReleaseReady:
     needs:
@@ -232,282 +233,224 @@ jobs:
 #################################### INSTALL PACKAGES ######################################
 ############################################################################################
   InstallPackagesTestRelease:
-    needs: [BuilderDebRelease]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Install packages (amd64)
       runner_type: style-checker
+      data: ${{ needs.RunConfig.outputs.data }}
       run_command: |
-        cd "$REPO_COPY/tests/ci"
         python3 install_check.py "$CHECK_NAME"
   InstallPackagesTestAarch64:
-    needs: [BuilderDebAarch64]
+    needs: [RunConfig, BuilderDebAarch64]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Install packages (arm64)
       runner_type: style-checker-aarch64
+      data: ${{ needs.RunConfig.outputs.data }}
       run_command: |
-        cd "$REPO_COPY/tests/ci"
         python3 install_check.py "$CHECK_NAME"
 ##############################################################################################
 ########################### FUNCTIONAl STATELESS TESTS #######################################
 ##############################################################################################
   FunctionalStatelessTestRelease:
-    needs: [BuilderDebRelease]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateless tests (release)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=10800
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatelessTestAarch64:
-    needs: [BuilderDebAarch64]
+    needs: [RunConfig, BuilderDebAarch64]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateless tests (aarch64)
       runner_type: func-tester-aarch64
-      additional_envs: |
-        KILL_TIMEOUT=10800
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatelessTestAsan:
-    needs: [BuilderDebAsan]
+    needs: [RunConfig, BuilderDebAsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateless tests (asan)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=10800
-      batches: 4
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatelessTestTsan:
-    needs: [BuilderDebTsan]
+    needs: [RunConfig, BuilderDebTsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateless tests (tsan)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=10800
-      batches: 5
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
-  FunctionalStatelessTestUBsan:
-    needs: [BuilderDebUBsan]
+      data: ${{ needs.RunConfig.outputs.data }}
+  FunctionalStatelessTestMsan:
+    needs: [RunConfig, BuilderDebMsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
-      test_name: Stateless tests (ubsan)
+      test_name: Stateless tests (msan)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=10800
-      batches: 2
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
-  FunctionalStatelessTestMsan:
-    needs: [BuilderDebMsan]
+      data: ${{ needs.RunConfig.outputs.data }}
+  FunctionalStatelessTestUBsan:
+    needs: [RunConfig, BuilderDebUBsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
-      test_name: Stateless tests (msan)
+      test_name: Stateless tests (ubsan)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=10800
-      batches: 6
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatelessTestDebug:
-    needs: [BuilderDebDebug]
+    needs: [RunConfig, BuilderDebDebug]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateless tests (debug)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=10800
-      batches: 5
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
 ##############################################################################################
 ############################ FUNCTIONAl STATEFUL TESTS #######################################
 ##############################################################################################
   FunctionalStatefulTestRelease:
-    needs: [BuilderDebRelease]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateful tests (release)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=3600
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatefulTestAarch64:
-    needs: [BuilderDebAarch64]
+    needs: [RunConfig, BuilderDebAarch64]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateful tests (aarch64)
       runner_type: func-tester-aarch64
-      additional_envs: |
-        KILL_TIMEOUT=3600
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatefulTestAsan:
-    needs: [BuilderDebAsan]
+    needs: [RunConfig, BuilderDebAsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateful tests (asan)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=3600
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatefulTestTsan:
-    needs: [BuilderDebTsan]
+    needs: [RunConfig, BuilderDebTsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateful tests (tsan)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=3600
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatefulTestMsan:
-    needs: [BuilderDebMsan]
+    needs: [RunConfig, BuilderDebMsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateful tests (msan)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=3600
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatefulTestUBsan:
-    needs: [BuilderDebUBsan]
+    needs: [RunConfig, BuilderDebUBsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateful tests (ubsan)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=3600
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
   FunctionalStatefulTestDebug:
-    needs: [BuilderDebDebug]
+    needs: [RunConfig, BuilderDebDebug]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stateful tests (debug)
       runner_type: func-tester
-      additional_envs: |
-        KILL_TIMEOUT=3600
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 functional_test_check.py "$CHECK_NAME" "$KILL_TIMEOUT"
+      data: ${{ needs.RunConfig.outputs.data }}
 ##############################################################################################
 ######################################### STRESS TESTS #######################################
 ##############################################################################################
   StressTestAsan:
-    needs: [BuilderDebAsan]
+    needs: [RunConfig, BuilderDebAsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stress test (asan)
       runner_type: stress-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 stress_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   StressTestTsan:
-    needs: [BuilderDebTsan]
+    needs: [RunConfig, BuilderDebTsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stress test (tsan)
       runner_type: stress-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 stress_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   StressTestMsan:
-    needs: [BuilderDebMsan]
+    needs: [RunConfig, BuilderDebMsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stress test (msan)
       runner_type: stress-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 stress_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   StressTestUBsan:
-    needs: [BuilderDebUBsan]
+    needs: [RunConfig, BuilderDebUBsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stress test (ubsan)
       runner_type: stress-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 stress_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   StressTestDebug:
-    needs: [BuilderDebDebug]
+    needs: [RunConfig, BuilderDebDebug]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Stress test (debug)
       runner_type: stress-tester
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 stress_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
 #############################################################################################
 ############################# INTEGRATION TESTS #############################################
 #############################################################################################
   IntegrationTestsAsan:
-    needs: [BuilderDebAsan]
+    needs: [RunConfig, BuilderDebAsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Integration tests (asan)
       runner_type: stress-tester
-      batches: 4
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 integration_test_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   IntegrationTestsAnalyzerAsan:
-    needs: [BuilderDebAsan]
+    needs: [RunConfig, BuilderDebAsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Integration tests (asan, analyzer)
       runner_type: stress-tester
-      batches: 6
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 integration_test_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   IntegrationTestsTsan:
-    needs: [BuilderDebTsan]
+    needs: [RunConfig, BuilderDebTsan]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Integration tests (tsan)
       runner_type: stress-tester
-      batches: 6
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 integration_test_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   IntegrationTestsRelease:
-    needs: [BuilderDebRelease]
+    needs: [RunConfig, BuilderDebRelease]
+    if: ${{ !failure() && !cancelled() }}
     uses: ./.github/workflows/reusable_test.yml
     with:
       test_name: Integration tests (release)
       runner_type: stress-tester
-      batches: 4
-      run_command: |
-        cd "$REPO_COPY/tests/ci"
-        python3 integration_test_check.py "$CHECK_NAME"
+      data: ${{ needs.RunConfig.outputs.data }}
   FinishCheck:
+    if: ${{ !failure() && !cancelled() }}
     needs:
-      - DockerHubPush
       - DockerServerImages
       - BuilderReport
       - BuilderSpecialReport
diff --git a/.github/workflows/reusable_build.yml b/.github/workflows/reusable_build.yml
index f36b93bea588..b1bc64c1f692 100644
--- a/.github/workflows/reusable_build.yml
+++ b/.github/workflows/reusable_build.yml
@@ -22,6 +22,10 @@ name: Build ClickHouse
         description: the label of runner to use
         default: builder
         type: string
+      data:
+        description: json ci data
+        type: string
+        required: true
       additional_envs:
         description: additional ENV variables to setup the job
         type: string
@@ -29,6 +33,7 @@ name: Build ClickHouse
 jobs:
   Build:
     name: Build-${{inputs.build_name}}
+    if: contains(fromJson(inputs.data).jobs_data.jobs_to_do, inputs.build_name)
     env:
       GITHUB_JOB_OVERRIDDEN: Build-${{inputs.build_name}}
     runs-on: [self-hosted, '${{inputs.runner_type}}']
@@ -37,6 +42,7 @@ jobs:
         uses: ClickHouse/checkout@v1
         with:
           clear-repository: true
+          ref: ${{ fromJson(inputs.data).git_ref }}
           submodules: true
           fetch-depth: ${{inputs.checkout_depth}}
           filter: tree:0
@@ -44,6 +50,9 @@ jobs:
         run: |
           cat >> "$GITHUB_ENV" << 'EOF'
           ${{inputs.additional_envs}}
+          DOCKER_TAG<<DOCKER_JSON
+          ${{ toJson(fromJson(inputs.data).docker_data.images) }}
+          DOCKER_JSON
           EOF
           python3 "$GITHUB_WORKSPACE"/tests/ci/ci_config.py --build-name "${{inputs.build_name}}" >> "$GITHUB_ENV"
       - name: Apply sparse checkout for contrib # in order to check that it doesn't break build
@@ -60,20 +69,18 @@ jobs:
         uses: ./.github/actions/common_setup
         with:
           job_type: build_check
-      - name: Download changed images
-        uses: actions/download-artifact@v3
-        with:
-          name: changed_images
-          path: ${{ env.IMAGES_PATH }}
+      - name: Pre
+        run: |
+          python3 "$GITHUB_WORKSPACE/tests/ci/ci.py" --infile ${{ toJson(inputs.data) }} --pre --job-name '${{inputs.build_name}}'
       - name: Build
         run: |
-          cd "$REPO_COPY/tests/ci" && python3 build_check.py "$BUILD_NAME"
-      - name: Upload build URLs to artifacts
-        if: ${{ success() || failure() }}
-        uses: actions/upload-artifact@v3
-        with:
-          name: ${{ env.BUILD_URLS }}
-          path: ${{ env.TEMP_PATH }}/${{ env.BUILD_URLS }}.json
+          python3 "$GITHUB_WORKSPACE/tests/ci/build_check.py" "$BUILD_NAME"
+      - name: Post
+        run: |
+          python3 "$GITHUB_WORKSPACE/tests/ci/ci.py" --infile ${{ toJson(inputs.data) }} --post --job-name '${{inputs.build_name}}'
+      - name: Mark as done
+        run: |
+          python3 "$GITHUB_WORKSPACE/tests/ci/ci.py" --infile ${{ toJson(inputs.data) }} --mark-success --job-name '${{inputs.build_name}}'
       - name: Clean
         if: always()
         uses: ./.github/actions/clean
diff --git a/.github/workflows/reusable_docker.yml b/.github/workflows/reusable_docker.yml
new file mode 100644
index 000000000000..08a5740e7e06
--- /dev/null
+++ b/.github/workflows/reusable_docker.yml
@@ -0,0 +1,68 @@
+name: Build docker images
+'on':
+  workflow_call:
+    inputs:
+      data:
+        description: json with ci data from todo job
+        required: true
+        type: string
+      set_latest:
+        description: set latest tag for resulting multiarch manifest
+        required: false
+        type: boolean
+        default: false
+jobs:
+  DockerBuildAarch64:
+    runs-on: [self-hosted, style-checker-aarch64]
+    if: |
+      !failure() && !cancelled() && toJson(fromJson(inputs.data).docker_data.missing_aarch64) != '[]'
+    steps:
+      - name: Check out repository code
+        uses: ClickHouse/checkout@v1
+        with:
+          ref: ${{ fromJson(inputs.data).git_ref }}
+      - name: Build images
+        run: |
+          python3 "${GITHUB_WORKSPACE}/tests/ci/docker_images_check.py" \
+            --suffix aarch64 \
+            --image-tags '${{ toJson(fromJson(inputs.data).docker_data.images) }}' \
+            --missing-images '${{ toJson(fromJson(inputs.data).docker_data.missing_aarch64) }}'
+  DockerBuildAmd64:
+    runs-on: [self-hosted, style-checker]
+    if: |
+      !failure() && !cancelled() && toJson(fromJson(inputs.data).docker_data.missing_amd64) != '[]'
+    steps:
+      - name: Check out repository code
+        uses: ClickHouse/checkout@v1
+        with:
+          ref: ${{ fromJson(inputs.data).git_ref }}
+      - name: Build images
+        run: |
+          python3 "${GITHUB_WORKSPACE}/tests/ci/docker_images_check.py" \
+            --suffix amd64 \
+            --image-tags '${{ toJson(fromJson(inputs.data).docker_data.images) }}' \
+            --missing-images '${{ toJson(fromJson(inputs.data).docker_data.missing_amd64) }}'
+  DockerMultiArchManifest:
+    needs: [DockerBuildAmd64, DockerBuildAarch64]
+    runs-on: [self-hosted, style-checker]
+    if: |
+      !failure() && !cancelled() && toJson(fromJson(inputs.data).docker_data.missing_multi) != '[]'
+    steps:
+      - name: Check out repository code
+        uses: ClickHouse/checkout@v1
+        with:
+          ref: ${{ fromJson(inputs.data).git_ref }}
+      - name: Build images
+        run: |
+          cd "$GITHUB_WORKSPACE/tests/ci"
+          if [ "${{ inputs.set_latest }}" == "true" ]; then
+            echo "latest tag will be set for resulting manifests"
+            python3 docker_manifests_merge.py --suffix amd64 --suffix aarch64 \
+              --image-tags '${{ toJson(fromJson(inputs.data).docker_data.images) }}' \
+              --missing-images '${{ toJson(fromJson(inputs.data).docker_data.missing_multi) }}' \
+              --set-latest
+          else
+            python3 docker_manifests_merge.py --suffix amd64 --suffix aarch64 \
+              --image-tags '${{ toJson(fromJson(inputs.data).docker_data.images) }}' \
+              --missing-images '${{ toJson(fromJson(inputs.data).docker_data.missing_multi) }}'
+          fi
diff --git a/.github/workflows/reusable_simple_job.yml b/.github/workflows/reusable_simple_job.yml
new file mode 100644
index 000000000000..ea196a326647
--- /dev/null
+++ b/.github/workflows/reusable_simple_job.yml
@@ -0,0 +1,90 @@
+### For the pure soul wishes to move it to another place
+# https://github.com/orgs/community/discussions/9050
+
+name: Simple job
+'on':
+  workflow_call:
+    inputs:
+      test_name:
+        description: the value of test type from tests/ci/ci_config.py, ends up as $CHECK_NAME ENV
+        required: true
+        type: string
+      runner_type:
+        description: the label of runner to use
+        required: true
+        type: string
+      run_command:
+        description: the command to launch the check
+        default: ""
+        required: false
+        type: string
+      checkout_depth:
+        description: the value of the git shallow checkout
+        required: false
+        type: number
+        default: 1
+      submodules:
+        description: if the submodules should be checked out
+        required: false
+        type: boolean
+        default: false
+      additional_envs:
+        description: additional ENV variables to setup the job
+        type: string
+      working-directory:
+        description: sets custom working directory
+        type: string
+        default: ""
+      git_ref:
+        description: commit to use, merge commit for pr or head
+        required: false
+        type: string
+        default: ${{ github.event.after }} # no merge commit
+    secrets:
+      secret_envs:
+        description: if given, it's passed to the environments
+        required: false
+
+
+env:
+  # Force the stdout and stderr streams to be unbuffered
+  PYTHONUNBUFFERED: 1
+  CHECK_NAME: ${{inputs.test_name}}
+
+jobs:
+  Test:
+    runs-on: [self-hosted, '${{inputs.runner_type}}']
+    name: ${{inputs.test_name}}
+    env:
+      GITHUB_JOB_OVERRIDDEN: ${{inputs.test_name}}
+    steps:
+      - name: Check out repository code
+        uses: ClickHouse/checkout@v1
+        with:
+          clear-repository: true
+          ref: ${{ inputs.git_ref }}
+          submodules: ${{inputs.submodules}}
+          fetch-depth: ${{inputs.checkout_depth}}
+          filter: tree:0
+      - name: Set build envs
+        run: |
+          cat >> "$GITHUB_ENV" << 'EOF'
+          CHECK_NAME=${{ inputs.test_name }}
+          ${{inputs.additional_envs}}
+          ${{secrets.secret_envs}}
+          EOF
+      - name: Common setup
+        uses: ./.github/actions/common_setup
+        with:
+          job_type: test
+      - name: Run
+        run: |
+          if [ -n '${{ inputs.working-directory }}' ]; then
+            cd "${{ inputs.working-directory }}"
+          else
+            cd "$GITHUB_WORKSPACE/tests/ci"
+          fi
+          ${{ inputs.run_command }}
+      - name: Clean
+        if: always()
+        uses: ./.github/actions/clean
diff --git a/docker/keeper/Dockerfile b/docker/keeper/Dockerfile
index a238a9851d9f..06bb3f2cdda8 100644
--- a/docker/keeper/Dockerfile
+++ b/docker/keeper/Dockerfile
@@ -36,6 +36,7 @@ ARG REPO_CHANNEL="stable"
 ARG REPOSITORY="https://packages.clickhouse.com/tgz/${REPO_CHANNEL}"
 ARG VERSION="23.11.2.11"
 ARG PACKAGES="clickhouse-keeper"
+ARG DIRECT_DOWNLOAD_URLS=""
 
 # user/group precreated explicitly with fixed uid/gid on purpose.
 # It is especially important for rootless containers: in that case entrypoint
@@ -47,15 +48,27 @@ ARG PACKAGES="clickhouse-keeper"
 
 ARG TARGETARCH
 RUN arch=${TARGETARCH:-amd64} \
-    && for package in ${PACKAGES}; do \
-    ( \
-        cd /tmp \
-        && echo "Get ${REPOSITORY}/${package}-${VERSION}-${arch}.tgz" \
+    && cd /tmp && rm -f /tmp/*tgz && rm -f /tmp/*tgz.sha512 |: \
+    && if [ -n "${DIRECT_DOWNLOAD_URLS}" ]; then \
+        echo "installing from provided urls with tgz packages: ${DIRECT_DOWNLOAD_URLS}" \
+        && for url in $DIRECT_DOWNLOAD_URLS; do \
+            echo "Get ${url}" \
+            && wget -c -q "$url" \
+        ; done \
+    else \
+        for package in ${PACKAGES}; do \
+            cd /tmp \
+            && echo "Get ${REPOSITORY}/${package}-${VERSION}-${arch}.tgz" \
             && wget -c -q "${REPOSITORY}/${package}-${VERSION}-${arch}.tgz" \
             && wget -c -q "${REPOSITORY}/${package}-${VERSION}-${arch}.tgz.sha512" \
-            && sed 's:/output/:/tmp/:' < "${package}-${VERSION}-${arch}.tgz.sha512" | sha512sum -c \
-            && tar xvzf "${package}-${VERSION}-${arch}.tgz" --strip-components=1 -C / \
-    ) \
+        ; done \
+    fi \
+    && cat *.tgz.sha512 | sha512sum -c \
+    && for file in *.tgz; do \
+        if [ -f "$file" ]; then \
+            echo "Unpacking $file"; \
+            tar xvzf "$file" --strip-components=1 -C /; \
+        fi \
     ; done \
     && rm /tmp/*.tgz /install -r \
     && addgroup -S -g 101 clickhouse \
diff --git a/docker/packager/binary/build.sh b/docker/packager/binary/build.sh
index fd9bfcaabb2e..b63643419fe9 100755
--- a/docker/packager/binary/build.sh
+++ b/docker/packager/binary/build.sh
@@ -149,7 +149,7 @@ then
     mkdir -p "$PERF_OUTPUT"
     cp -r ../tests/performance "$PERF_OUTPUT"
     cp -r ../tests/config/top_level_domains  "$PERF_OUTPUT"
-    cp -r ../docker/test/performance-comparison/config "$PERF_OUTPUT" ||:
+    cp -r ../tests/performance/scripts/config "$PERF_OUTPUT" ||:
     for SRC in /output/clickhouse*; do
         # Copy all clickhouse* files except packages and bridges
         [[ "$SRC" != *.* ]] && [[ "$SRC" != *-bridge ]] && \
@@ -160,7 +160,7 @@ then
         ln -sf clickhouse "$PERF_OUTPUT"/clickhouse-keeper
     fi
 
-    cp -r ../docker/test/performance-comparison "$PERF_OUTPUT"/scripts ||:
+    cp -r ../tests/performance/scripts "$PERF_OUTPUT"/scripts ||:
     prepare_combined_output "$PERF_OUTPUT"
 
     # We have to know the revision that corresponds to this binary build.
diff --git a/docker/server/Dockerfile.alpine b/docker/server/Dockerfile.alpine
index 31dbc38708f4..e7b0d4e15e53 100644
--- a/docker/server/Dockerfile.alpine
+++ b/docker/server/Dockerfile.alpine
@@ -34,6 +34,7 @@ ARG REPO_CHANNEL="stable"
 ARG REPOSITORY="https://packages.clickhouse.com/tgz/${REPO_CHANNEL}"
 ARG VERSION="23.11.2.11"
 ARG PACKAGES="clickhouse-client clickhouse-server clickhouse-common-static"
+ARG DIRECT_DOWNLOAD_URLS=""
 
 # user/group precreated explicitly with fixed uid/gid on purpose.
 # It is especially important for rootless containers: in that case entrypoint
@@ -43,15 +44,26 @@ ARG PACKAGES="clickhouse-client clickhouse-server clickhouse-common-static"
 # The same uid / gid (101) is used both for alpine and ubuntu.
 
 RUN arch=${TARGETARCH:-amd64} \
-    && for package in ${PACKAGES}; do \
-    ( \
-        cd /tmp \
-        && echo "Get ${REPOSITORY}/${package}-${VERSION}-${arch}.tgz" \
+    && cd /tmp \
+    && if [ -n "${DIRECT_DOWNLOAD_URLS}" ]; then \
+        echo "installing from provided urls with tgz packages: ${DIRECT_DOWNLOAD_URLS}" \
+        && for url in $DIRECT_DOWNLOAD_URLS; do \
+            echo "Get ${url}" \
+            && wget -c -q "$url" \
+        ; done \
+    else \
+        for package in ${PACKAGES}; do \
+            echo "Get ${REPOSITORY}/${package}-${VERSION}-${arch}.tgz" \
             && wget -c -q "${REPOSITORY}/${package}-${VERSION}-${arch}.tgz" \
             && wget -c -q "${REPOSITORY}/${package}-${VERSION}-${arch}.tgz.sha512" \
-            && sed 's:/output/:/tmp/:' < "${package}-${VERSION}-${arch}.tgz.sha512" | sha512sum -c \
-            && tar xvzf "${package}-${VERSION}-${arch}.tgz" --strip-components=1 -C / \
-    ) \
+        ; done \
+    fi \
+    && cat *.tgz.sha512 | sed 's:/output/:/tmp/:' | sha512sum -c \
+    && for file in *.tgz; do \
+        if [ -f "$file" ]; then \
+            echo "Unpacking $file"; \
+            tar xvzf "$file" --strip-components=1 -C /; \
+        fi \
     ; done \
     && rm /tmp/*.tgz /install -r \
     && addgroup -S -g 101 clickhouse \
diff --git a/docker/server/Dockerfile.ubuntu b/docker/server/Dockerfile.ubuntu
index 6bbec625300f..8cb4bf94ac93 100644
--- a/docker/server/Dockerfile.ubuntu
+++ b/docker/server/Dockerfile.ubuntu
@@ -37,6 +37,7 @@ ARG PACKAGES="clickhouse-client clickhouse-server clickhouse-common-static"
 # from debs created by CI build, for example:
 # docker build . --network host --build-arg version="21.4.1.6282" --build-arg deb_location_url="https://..." -t ...
 ARG deb_location_url=""
+ARG DIRECT_DOWNLOAD_URLS=""
 
 # set non-empty single_binary_location_url to create docker image
 # from a single binary url (useful for non-standard builds - with sanitizers, for arm64).
@@ -44,6 +45,18 @@ ARG single_binary_location_url=""
 
 ARG TARGETARCH
 
+# install from direct URL
+RUN if [ -n "${DIRECT_DOWNLOAD_URLS}" ]; then \
+        echo "installing from custom predefined urls with deb packages: ${DIRECT_DOWNLOAD_URLS}" \
+        && rm -rf /tmp/clickhouse_debs \
+        && mkdir -p /tmp/clickhouse_debs \
+        && for url in $DIRECT_DOWNLOAD_URLS; do \
+            wget --progress=bar:force:noscroll "$url" -P /tmp/clickhouse_debs || exit 1 \
+        ; done \
+        && dpkg -i /tmp/clickhouse_debs/*.deb \
+        && rm -rf /tmp/* ; \
+    fi
+
 # install from a web location with deb packages
 RUN arch="${TARGETARCH:-amd64}" \
     && if [ -n "${deb_location_url}" ]; then \
diff --git a/utils/check-style/check-typos b/utils/check-style/check-typos
index 9194a9464a78..0486efb37b1b 100755
--- a/utils/check-style/check-typos
+++ b/utils/check-style/check-typos
@@ -4,6 +4,7 @@
 
 ROOT_PATH=$(git rev-parse --show-toplevel)
 
+#FIXME: check all (or almost all) repo
 codespell \
     --skip "*generated*,*gperf*,*.bin,*.mrk*,*.idx,checksums.txt,*.dat,*.pyc,*.kate-swp,*obfuscateQueries.cpp,d3-*.js,*.min.js,*.sum,${ROOT_PATH}/utils/check-style/aspell-ignore" \
     --ignore-words "${ROOT_PATH}/utils/check-style/codespell-ignore-words.list" \
