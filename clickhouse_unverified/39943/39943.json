{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 39943,
  "instance_id": "ClickHouse__ClickHouse-39943",
  "issue_numbers": [
    "39907"
  ],
  "base_commit": "b4f5d9ca10b2ee4285fce354c232b8d50c829380",
  "patch": "diff --git a/src/Storages/StorageFile.cpp b/src/Storages/StorageFile.cpp\nindex 672727b1478d..4f66c76f1eb2 100644\n--- a/src/Storages/StorageFile.cpp\n+++ b/src/Storages/StorageFile.cpp\n@@ -444,36 +444,24 @@ class StorageFileSource : public ISource\n \n     using FilesInfoPtr = std::shared_ptr<FilesInfo>;\n \n-    static Block getHeader(const StorageMetadataPtr & metadata_snapshot, bool need_path_column, bool need_file_column)\n+    static Block getBlockForSource(const Block & block_for_format, const FilesInfoPtr & files_info)\n     {\n-        auto header = metadata_snapshot->getSampleBlock();\n-\n-        /// Note: AddingDefaultsTransform doesn't change header.\n-\n-        if (need_path_column)\n-            header.insert(\n+        auto res = block_for_format;\n+        if (files_info->need_path_column)\n+        {\n+            res.insert(\n                 {DataTypeLowCardinality{std::make_shared<DataTypeString>()}.createColumn(),\n                  std::make_shared<DataTypeLowCardinality>(std::make_shared<DataTypeString>()),\n                  \"_path\"});\n-        if (need_file_column)\n-            header.insert(\n+        }\n+        if (files_info->need_file_column)\n+        {\n+            res.insert(\n                 {DataTypeLowCardinality{std::make_shared<DataTypeString>()}.createColumn(),\n                  std::make_shared<DataTypeLowCardinality>(std::make_shared<DataTypeString>()),\n                  \"_file\"});\n-\n-        return header;\n-    }\n-\n-    static Block getBlockForSource(\n-        const StorageFilePtr & storage,\n-        const StorageSnapshotPtr & storage_snapshot,\n-        const ColumnsDescription & columns_description,\n-        const FilesInfoPtr & files_info)\n-    {\n-        if (storage->supportsSubsetOfColumns())\n-            return storage_snapshot->getSampleBlockForColumns(columns_description.getNamesOfPhysical());\n-        else\n-            return getHeader(storage_snapshot->metadata, files_info->need_path_column, files_info->need_file_column);\n+        }\n+        return res;\n     }\n \n     StorageFileSource(\n@@ -483,13 +471,15 @@ class StorageFileSource : public ISource\n         UInt64 max_block_size_,\n         FilesInfoPtr files_info_,\n         ColumnsDescription columns_description_,\n+        const Block & block_for_format_,\n         std::unique_ptr<ReadBuffer> read_buf_)\n-        : ISource(getBlockForSource(storage_, storage_snapshot_, columns_description_, files_info_))\n+        : ISource(getBlockForSource(block_for_format_, files_info_))\n         , storage(std::move(storage_))\n         , storage_snapshot(storage_snapshot_)\n         , files_info(std::move(files_info_))\n         , read_buf(std::move(read_buf_))\n         , columns_description(std::move(columns_description_))\n+        , block_for_format(block_for_format_)\n         , context(context_)\n         , max_block_size(max_block_size_)\n     {\n@@ -533,15 +523,8 @@ class StorageFileSource : public ISource\n                 if (!read_buf)\n                     read_buf = createReadBuffer(current_path, storage->use_table_fd, storage->getName(), storage->table_fd, storage->compression_method, context);\n \n-                auto get_block_for_format = [&]() -> Block\n-                {\n-                    if (storage->supportsSubsetOfColumns())\n-                        return storage_snapshot->getSampleBlockForColumns(columns_description.getNamesOfPhysical());\n-                    return storage_snapshot->metadata->getSampleBlock();\n-                };\n-\n-                auto format = context->getInputFormat(\n-                    storage->format_name, *read_buf, get_block_for_format(), max_block_size, storage->format_settings);\n+                auto format\n+                    = context->getInputFormat(storage->format_name, *read_buf, block_for_format, max_block_size, storage->format_settings);\n \n                 QueryPipelineBuilder builder;\n                 builder.init(Pipe(format));\n@@ -627,6 +610,7 @@ class StorageFileSource : public ISource\n     std::unique_ptr<PullingPipelineExecutor> reader;\n \n     ColumnsDescription columns_description;\n+    Block block_for_format;\n \n     ContextPtr context;    /// TODO Untangle potential issues with context lifetime.\n     UInt64 max_block_size;\n@@ -693,13 +677,30 @@ Pipe StorageFile::read(\n \n     for (size_t i = 0; i < num_streams; ++i)\n     {\n-        const auto get_columns_for_format = [&]() -> ColumnsDescription\n+        ColumnsDescription columns_description;\n+        Block block_for_format;\n+        if (supportsSubsetOfColumns())\n         {\n-            if (supportsSubsetOfColumns())\n-                return storage_snapshot->getDescriptionForColumns(column_names);\n-            else\n-                return storage_snapshot->metadata->getColumns();\n-        };\n+            auto fetch_columns = column_names;\n+            const auto & virtuals = getVirtuals();\n+            std::erase_if(\n+                fetch_columns,\n+                [&](const String & col)\n+                {\n+                    return std::any_of(\n+                        virtuals.begin(), virtuals.end(), [&](const NameAndTypePair & virtual_col) { return col == virtual_col.name; });\n+                });\n+\n+            if (fetch_columns.empty())\n+                fetch_columns.push_back(ExpressionActions::getSmallestColumn(storage_snapshot->metadata->getColumns().getAllPhysical()));\n+            columns_description = storage_snapshot->getDescriptionForColumns(fetch_columns);\n+        }\n+        else\n+        {\n+            columns_description = storage_snapshot->metadata->getColumns();\n+        }\n+\n+        block_for_format = storage_snapshot->getSampleBlockForColumns(columns_description.getNamesOfPhysical());\n \n         /// In case of reading from fd we have to check whether we have already created\n         /// the read buffer from it in Storage constructor (for schema inference) or not.\n@@ -710,7 +711,14 @@ Pipe StorageFile::read(\n             read_buffer = std::move(peekable_read_buffer_from_fd);\n \n         pipes.emplace_back(std::make_shared<StorageFileSource>(\n-            this_ptr, storage_snapshot, context, max_block_size, files_info, get_columns_for_format(), std::move(read_buffer)));\n+            this_ptr,\n+            storage_snapshot,\n+            context,\n+            max_block_size,\n+            files_info,\n+            columns_description,\n+            block_for_format,\n+            std::move(read_buffer)));\n     }\n \n     return Pipe::unitePipes(std::move(pipes));\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02377_fix_file_virtual_column.reference b/tests/queries/0_stateless/02377_fix_file_virtual_column.reference\nnew file mode 100644\nindex 000000000000..c98e10593255\n--- /dev/null\n+++ b/tests/queries/0_stateless/02377_fix_file_virtual_column.reference\n@@ -0,0 +1,3 @@\n+1\ts\n+2\tx\n+3\ty\ndiff --git a/tests/queries/0_stateless/02377_fix_file_virtual_column.sql b/tests/queries/0_stateless/02377_fix_file_virtual_column.sql\nnew file mode 100644\nindex 000000000000..5d79e7f12cdb\n--- /dev/null\n+++ b/tests/queries/0_stateless/02377_fix_file_virtual_column.sql\n@@ -0,0 +1,7 @@\n+drop table if exists test_02377;\n+create table test_02377 (n UInt32, s String) engine=File(CSVWithNames);\n+insert into test_02377 values(1, 's') (2, 'x') (3, 'y');\n+select * from test_02377 order by n;\n+select *, _path, _file from test_02377 format Null;\n+select _path, _file from test_02377 format Null;\n+drop table test_02377;\n",
  "problem_statement": "Logical error: Invalid number of columns in chunk pushed to OutputPort (when selecting only virtual columns from File)\n```\r\nSELECT\r\n    _file,\r\n    _path\r\nFROM file('exists.csv', 'CSVWithNames')\r\n\r\nQuery id: 8bff0d32-cad0-4832-907a-be39f13ac49c\r\n\r\n\r\n0 rows in set. Elapsed: 0.099 sec.\r\n\r\nReceived exception from server (version 22.7.1):\r\nCode: 49. DB::Exception: Received from localhost:9000. DB::Exception: Invalid number of columns in chunk pushed to OutputPort. Expected 2, found 4\r\nHeader: _path LowCardinality(String) ColumnLowCardinality(size = 0, UInt8(size = 0), ColumnUnique(size = 1, String(size = 1))), _file LowCardinality(String) ColumnLowCardinality(size = 0, UInt8(size = 0), ColumnUnique(size = 1, String(size = 1)))\r\nChunk:  ColumnLowCardinality(size = 7385, UInt8(size = 7385), ColumnUnique(size = 1, String(size = 1))) ColumnLowCardinality(size = 7385, UInt8(size = 7385), ColumnUnique(size = 1, String(size = 1))) ColumnLowCardinality(size = 7385, UInt8(size = 7385), ColumnUnique(size = 2, String(size = 2))) ColumnLowCardinality(size = 7385, UInt8(size = 7385), ColumnUnique(size = 2, String(size = 2)))\r\n. (LOGICAL_ERROR)\r\n```\r\n\r\nVersion 22.7.1.2484\r\n\n",
  "hints_text": "```\r\n$ clickhouse-client \"select * from system.settings format CSVWithNames\" > /path/to/data/user_files/exists.csv\r\n\r\ndell9510 :) SELECT\r\n                _file,\r\n                _path\r\n            FROM file('exists.csv', 'CSVWithNames')\r\n\r\nSELECT\r\n    _file,\r\n    _path\r\nFROM file('exists.csv', 'CSVWithNames')\r\n\r\nQuery id: cfe62173-3b66-4e42-991f-6fc67c3fb77d\r\n\r\n[dell9510] 2022.08.05 11:12:27.960578 [ 1676485 ] {cfe62173-3b66-4e42-991f-6fc67c3fb77d} <Fatal> : Logical error: 'Invalid number of columns in chunk pushed to OutputPort. Expected 2, found 4\r\nHeader: _path LowCardinality(String) ColumnLowCardinality(size = 0, UInt8(size = 0), ColumnUnique(size = 1, String(size = 1))), _file LowCardinality(String) ColumnLowCardinality(size = 0, UInt8(size = 0), ColumnUnique(size = 1, String(size = 1)))\r\nChunk:  ColumnLowCardinality(size = 612, UInt8(size = 612), ColumnUnique(size = 1, String(size = 1))) ColumnLowCardinality(size = 612, UInt8(size = 612), ColumnUnique(size = 1, String(size = 1))) ColumnLowCardinality(size = 612, UInt8(size = 612), ColumnUnique(size = 2, String(size = 2))) ColumnLowCardinality(size = 612, UInt8(size = 612), ColumnUnique(size = 2, String(size = 2)))\r\n'.\r\n[dell9510] 2022.08.05 11:12:27.964097 [ 1753213 ] <Fatal> BaseDaemon: ########################################\r\n[dell9510] 2022.08.05 11:12:27.964797 [ 1753213 ] <Fatal> BaseDaemon: (version 22.8.1.1, build id: C44D241B3D99A20299843D913F1D0B8F72C845E6) (from thread 1676485) (query_id: cfe62173-3b66-4e42-991f-6fc67c3fb77d) (query: SELECT _file, _path FROM file('exists.csv', 'CSVWithNames')) Received signal Aborted (6)\r\n[dell9510] 2022.08.05 11:12:27.965227 [ 1753213 ] <Fatal> BaseDaemon: \r\n[dell9510] 2022.08.05 11:12:27.965470 [ 1753213 ] <Fatal> BaseDaemon: Stack trace: 0x7f288fe3936c 0x7f288fde9838 0x7f288fdd3535 0x20e1dfd7 0x20e1e095 0x20e1e152 0x2986efa6 0x2ab29fb1 0x210557de 0x2ab58e8d 0x2ab4993b 0x2ab49c24 0x2ab48a47 0x2ab48125 0x2ab74e5f 0x2ab74d0d 0x2ab74c95 0x2ab74c41 0x2ab74b52 0x2ab74a28 0x2ab74935 0x2ab748fd 0x2ab748d5 0x2ab748a0 0x20e7ab66 0x20e76c35 0x20f34883 0x20f3b9d1 0x20f3b955 0x20f3b885 0x20f3b14f 0x7f288fe3754d 0x7f288febc874\r\n[dell9510] 2022.08.05 11:12:27.965874 [ 1753213 ] <Fatal> BaseDaemon: 4. ? @ 0x7f288fe3936c in ?\r\n[dell9510] 2022.08.05 11:12:27.966074 [ 1753213 ] <Fatal> BaseDaemon: 5. gsignal @ 0x7f288fde9838 in ?\r\n[dell9510] 2022.08.05 11:12:27.966273 [ 1753213 ] <Fatal> BaseDaemon: 6. abort @ 0x7f288fdd3535 in ?\r\n[dell9510] 2022.08.05 11:12:28.152527 [ 1753213 ] <Fatal> BaseDaemon: 7. /home/tavplubix/ch/ClickHouse/src/Common/Exception.cpp:40: DB::abortOnFailedAssertion(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) @ 0x20e1dfd7 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2022.08.05 11:12:28.230414 [ 1753213 ] <Fatal> BaseDaemon: 8. /home/tavplubix/ch/ClickHouse/src/Common/Exception.cpp:63: DB::handle_error_code(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool, std::__1::vector<void*, std::__1::allocator<void*> > const&) @ 0x20e1e095 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2022.08.05 11:12:28.299564 [ 1753213 ] <Fatal> BaseDaemon: 9. /home/tavplubix/ch/ClickHouse/src/Common/Exception.cpp:70: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0x20e1e152 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2022.08.05 11:12:28.707400 [ 1753213 ] <Fatal> BaseDaemon: 10. /home/tavplubix/ch/ClickHouse/src/Common/Exception.h:37: DB::Exception::Exception<unsigned long, unsigned long, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(int, fmt::v8::basic_format_string<char, fmt::v8::type_identity<unsigned long>::type, fmt::v8::type_identity<unsigned long>::type, fmt::v8::type_identity<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >::type, fmt::v8::type_identity<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >::type>, unsigned long&&, unsigned long&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&&) @ 0x2986efa6 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2022.08.05 11:12:28.840951 [ 1753213 ] <Fatal> BaseDaemon: 11.1. inlined from /home/tavplubix/ch/ClickHouse/src/Processors/Port.h:408: DB::OutputPort::pushData(DB::Port::State::Data)\r\n[dell9510] 2022.08.05 11:12:28.841152 [ 1753213 ] <Fatal> BaseDaemon: 11. /home/tavplubix/ch/ClickHouse/src/Processors/ISource.cpp:40: DB::ISource::prepare() @ 0x2ab29fb1 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2022.08.05 11:12:29.277038 [ 1753213 ] <Fatal> BaseDaemon: 12. /home/tavplubix/ch/ClickHouse/src/Processors/IProcessor.h:190: DB::IProcessor::prepare(std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&) @ 0x210557de in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2022.08.05 11:12:29.436002 [ 1753213 ] <Fatal> BaseDaemon: 13. /home/tavplubix/ch/ClickHouse/src/Processors/Executors/ExecutingGraph.cpp:269: DB::ExecutingGraph::updateNode(unsigned long, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&) @ 0x2ab58e8d in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2022.08.05 11:12:29.568256 [ 1753213 ] <Fatal> BaseDaemon: 14. /home/tavplubix/ch/ClickHouse/src/Processors/Executors/PipelineExecutor.cpp:247: DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*) @ 0x2ab4993b in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2022.08.05 11:12:29.690883 [ 1753213 ] <Fatal> BaseDaemon: 15. /home/tavplubix/ch/ClickHouse/src/Processors/Executors/PipelineExecutor.cpp:194: DB::PipelineExecutor::executeSingleThread(unsigned long) @ 0x2ab49c24 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2022.08.05 11:12:29.806050 [ 1753213 ] <Fatal> BaseDaemon: 16. /home/tavplubix/ch/ClickHouse/src/Processors/Executors/PipelineExecutor.cpp:367: DB::PipelineExecutor::executeImpl(unsigned long) @ 0x2ab48a47 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2022.08.05 11:12:29.929807 [ 1753213 ] <Fatal> BaseDaemon: 17. /home/tavplubix/ch/ClickHouse/src/Processors/Executors/PipelineExecutor.cpp:89: DB::PipelineExecutor::execute(unsigned long) @ 0x2ab48125 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2022.08.05 11:12:30.077109 [ 1753213 ] <Fatal> BaseDaemon: 18. /home/tavplubix/ch/ClickHouse/src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:79: DB::threadFunction(DB::PullingAsyncPipelineExecutor::Data&, std::__1::shared_ptr<DB::ThreadGroupStatus>, unsigned long) @ 0x2ab74e5f in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2022.08.05 11:12:30.187050 [ 1753213 ] <Fatal> BaseDaemon: 19. /home/tavplubix/ch/ClickHouse/src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:107: DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0::operator()() const @ 0x2ab74d0d in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2022.08.05 11:12:30.294584 [ 1753213 ] <Fatal> BaseDaemon: 20. /home/tavplubix/ch/ClickHouse/contrib/libcxx/include/type_traits:3648: decltype(static_cast<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>(fp)()) std::__1::__invoke_constexpr<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&) @ 0x2ab74c95 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2022.08.05 11:12:30.401427 [ 1753213 ] <Fatal> BaseDaemon: 21. /home/tavplubix/ch/ClickHouse/contrib/libcxx/include/tuple:1595: decltype(auto) std::__1::__apply_tuple_impl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::__1::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::__1::tuple<>&, std::__1::__tuple_indices<>) @ 0x2ab74c41 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2022.08.05 11:12:30.510435 [ 1753213 ] <Fatal> BaseDaemon: 22. /home/tavplubix/ch/ClickHouse/contrib/libcxx/include/tuple:1604: decltype(auto) std::__1::apply<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::__1::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::__1::tuple<>&) @ 0x2ab74b52 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2022.08.05 11:12:30.610963 [ 1753213 ] <Fatal> BaseDaemon: 23. /home/tavplubix/ch/ClickHouse/src/Common/ThreadPool.h:187: ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()::operator()() @ 0x2ab74a28 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2022.08.05 11:12:30.734047 [ 1753213 ] <Fatal> BaseDaemon: 24. /home/tavplubix/ch/ClickHouse/contrib/libcxx/include/type_traits:3640: decltype(static_cast<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(fp)()) std::__1::__invoke<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&) @ 0x2ab74935 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2022.08.05 11:12:30.845006 [ 1753213 ] <Fatal> BaseDaemon: 25. /home/tavplubix/ch/ClickHouse/contrib/libcxx/include/__functional/invoke.h:62: void std::__1::__invoke_void_return_wrapper<void, true>::__call<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&>(ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&) @ 0x2ab748fd in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2022.08.05 11:12:30.952469 [ 1753213 ] <Fatal> BaseDaemon: 26. /home/tavplubix/ch/ClickHouse/contrib/libcxx/include/__functional/function.h:230: std::__1::__function::__default_alloc_func<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'(), void ()>::operator()() @ 0x2ab748d5 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2022.08.05 11:12:31.064367 [ 1753213 ] <Fatal> BaseDaemon: 27. /home/tavplubix/ch/ClickHouse/contrib/libcxx/include/__functional/function.h:711: void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'(), void ()> >(std::__1::__function::__policy_storage const*) @ 0x2ab748a0 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2022.08.05 11:12:31.130050 [ 1753213 ] <Fatal> BaseDaemon: 28. /home/tavplubix/ch/ClickHouse/contrib/libcxx/include/__functional/function.h:843: std::__1::__function::__policy_func<void ()>::operator()() const @ 0x20e7ab66 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2022.08.05 11:12:31.185955 [ 1753213 ] <Fatal> BaseDaemon: 29. /home/tavplubix/ch/ClickHouse/contrib/libcxx/include/__functional/function.h:1184: std::__1::function<void ()>::operator()() const @ 0x20e76c35 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2022.08.05 11:12:31.253725 [ 1753213 ] <Fatal> BaseDaemon: 30. /home/tavplubix/ch/ClickHouse/src/Common/ThreadPool.cpp:281: ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x20f34883 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2022.08.05 11:12:31.329086 [ 1753213 ] <Fatal> BaseDaemon: 31. /home/tavplubix/ch/ClickHouse/src/Common/ThreadPool.cpp:143: void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda0'()::operator()() const @ 0x20f3b9d1 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2022.08.05 11:12:31.406451 [ 1753213 ] <Fatal> BaseDaemon: 32. /home/tavplubix/ch/ClickHouse/contrib/libcxx/include/type_traits:3640: decltype(static_cast<void>(fp)()) std::__1::__invoke<void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda0'()>(void&&) @ 0x20f3b955 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2022.08.05 11:12:31.485137 [ 1753213 ] <Fatal> BaseDaemon: 33. /home/tavplubix/ch/ClickHouse/contrib/libcxx/include/thread:283: void std::__1::__thread_execute<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda0'()>(std::__1::tuple<void, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda0'()>&, std::__1::__tuple_indices<>) @ 0x20f3b885 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2022.08.05 11:12:31.567442 [ 1753213 ] <Fatal> BaseDaemon: 34. /home/tavplubix/ch/ClickHouse/contrib/libcxx/include/thread:293: void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda0'()> >(void*) @ 0x20f3b14f in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2022.08.05 11:12:31.567748 [ 1753213 ] <Fatal> BaseDaemon: 35. ? @ 0x7f288fe3754d in ?\r\n[dell9510] 2022.08.05 11:12:31.568058 [ 1753213 ] <Fatal> BaseDaemon: 36. clone @ 0x7f288febc874 in ?\r\n[dell9510] 2022.08.05 11:12:32.561290 [ 1753213 ] <Fatal> BaseDaemon: Integrity check of the executable skipped because the reference checksum could not be read. (calculated checksum: 591A7615D0C823CDB836625FF93C1614)\r\n\u2191 Progress: 612.00 rows, 2.56 KB (30.56 rows/s., 127.93 B/s.) \u2588\u2588\u2588\u258a                                                                                            (0.0 CPU, 93.21 KB RAM) 3%Exception on client:\r\nCode: 32. DB::Exception: Attempt to read after eof: while receiving packet from localhost:9000. (ATTEMPT_TO_READ_AFTER_EOF)\r\n\r\n```",
  "created_at": "2022-08-06T17:31:54Z"
}