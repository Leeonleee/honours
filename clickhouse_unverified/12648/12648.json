{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 12648,
  "instance_id": "ClickHouse__ClickHouse-12648",
  "issue_numbers": [
    "11066"
  ],
  "base_commit": "39ead5a4057b02f23f2370ec7f8a2b5d5dbd1ced",
  "patch": "diff --git a/src/Common/FieldVisitors.h b/src/Common/FieldVisitors.h\nindex d4b3b187ca49..7fd4b748dbb8 100644\n--- a/src/Common/FieldVisitors.h\n+++ b/src/Common/FieldVisitors.h\n@@ -124,9 +124,9 @@ class FieldVisitorConvertToNumber : public StaticVisitor<T>\n         throw Exception(\"Cannot convert Tuple to \" + demangle(typeid(T).name()), ErrorCodes::CANNOT_CONVERT_TYPE);\n     }\n \n-    T operator() (const UInt64 & x) const { return x; }\n-    T operator() (const Int64 & x) const { return x; }\n-    T operator() (const Float64 & x) const { return x; }\n+    T operator() (const UInt64 & x) const { return T(x); }\n+    T operator() (const Int64 & x) const { return T(x); }\n+    T operator() (const Float64 & x) const { return T(x); }\n \n     T operator() (const UInt128 &) const\n     {\n@@ -139,7 +139,7 @@ class FieldVisitorConvertToNumber : public StaticVisitor<T>\n         if constexpr (std::is_floating_point_v<T>)\n             return static_cast<T>(x.getValue()) / x.getScaleMultiplier();\n         else\n-            return x.getValue() / x.getScaleMultiplier();\n+            return static_cast<T>(x.getValue() / x.getScaleMultiplier());\n     }\n \n     T operator() (const AggregateFunctionStateData &) const\ndiff --git a/src/Common/HashTable/Hash.h b/src/Common/HashTable/Hash.h\nindex 9bd739d117f2..f2670432501b 100644\n--- a/src/Common/HashTable/Hash.h\n+++ b/src/Common/HashTable/Hash.h\n@@ -245,6 +245,13 @@ DEFINE_HASH(DB::Float64)\n #undef DEFINE_HASH\n \n \n+template <>\n+struct DefaultHash<DB::UInt128> : public DB::UInt128Hash {};\n+\n+template <>\n+struct DefaultHash<DB::UInt256> : public DB::UInt256Hash {};\n+\n+\n /// It is reasonable to use for UInt8, UInt16 with sufficient hash table size.\n struct TrivialHash\n {\ndiff --git a/src/Core/TypeListNumber.h b/src/Core/TypeListNumber.h\nindex 84b716fa5b8d..2c1c54ff8e62 100644\n--- a/src/Core/TypeListNumber.h\n+++ b/src/Core/TypeListNumber.h\n@@ -1,5 +1,7 @@\n #pragma once\n+\n #include <Core/Types.h>\n+#include <Common/UInt128.h>\n #include <Common/TypeList.h>\n \n namespace DB\n@@ -7,7 +9,9 @@ namespace DB\n \n using TypeListNativeNumbers = TypeList<UInt8, UInt16, UInt32, UInt64, Int8, Int16, Int32, Int64, Float32, Float64>;\n using TypeListDecimalNumbers = TypeList<Decimal32, Decimal64, Decimal128>;\n-using TypeListNumbers = TypeList<UInt8, UInt16, UInt32, UInt64, Int8, Int16, Int32, Int64, Float32, Float64,\n-    Decimal32, Decimal64, Decimal128>;\n+using TypeListNumbers = typename TypeListConcat<TypeListNativeNumbers, TypeListDecimalNumbers>::Type;\n+\n+/// Currently separate because UInt128 cannot be used in every context where other numbers can be used.\n+using TypeListNumbersAndUInt128 = typename AppendToTypeList<UInt128, TypeListNumbers>::Type;\n \n }\ndiff --git a/src/Functions/GatherUtils/ArraySinkVisitor.h b/src/Functions/GatherUtils/ArraySinkVisitor.h\nindex b3130e01a11a..6d4028a5e019 100644\n--- a/src/Functions/GatherUtils/ArraySinkVisitor.h\n+++ b/src/Functions/GatherUtils/ArraySinkVisitor.h\n@@ -13,7 +13,7 @@ struct GenericArraySink;\n template <typename ArraySink>\n struct NullableArraySink;\n \n-using NumericArraySinks = typename TypeListMap<NumericArraySink, TypeListNumbers>::Type;\n+using NumericArraySinks = typename TypeListMap<NumericArraySink, TypeListNumbersAndUInt128>::Type;\n using BasicArraySinks = typename AppendToTypeList<GenericArraySink, NumericArraySinks>::Type;\n using NullableArraySinks = typename TypeListMap<NullableArraySink, BasicArraySinks>::Type;\n using TypeListArraySinks = typename TypeListConcat<BasicArraySinks, NullableArraySinks>::Type;\ndiff --git a/src/Functions/GatherUtils/ArraySourceVisitor.h b/src/Functions/GatherUtils/ArraySourceVisitor.h\nindex 14ef3c205b58..a8cd8c62cba0 100644\n--- a/src/Functions/GatherUtils/ArraySourceVisitor.h\n+++ b/src/Functions/GatherUtils/ArraySourceVisitor.h\n@@ -16,7 +16,7 @@ struct NullableArraySource;\n template <typename Base>\n struct ConstSource;\n \n-using NumericArraySources = typename TypeListMap<NumericArraySource, TypeListNumbers>::Type;\n+using NumericArraySources = typename TypeListMap<NumericArraySource, TypeListNumbersAndUInt128>::Type;\n using BasicArraySources = typename AppendToTypeList<GenericArraySource, NumericArraySources>::Type;\n using NullableArraySources = typename TypeListMap<NullableArraySource, BasicArraySources>::Type;\n using BasicAndNullableArraySources = typename TypeListConcat<BasicArraySources, NullableArraySources>::Type;\ndiff --git a/src/Functions/GatherUtils/ValueSourceVisitor.h b/src/Functions/GatherUtils/ValueSourceVisitor.h\nindex ef4372087a54..6cb6f75ef262 100644\n--- a/src/Functions/GatherUtils/ValueSourceVisitor.h\n+++ b/src/Functions/GatherUtils/ValueSourceVisitor.h\n@@ -16,7 +16,7 @@ struct NullableValueSource;\n template <typename Base>\n struct ConstSource;\n \n-using NumericValueSources = typename TypeListMap<NumericValueSource, TypeListNumbers>::Type;\n+using NumericValueSources = typename TypeListMap<NumericValueSource, TypeListNumbersAndUInt128>::Type;\n using BasicValueSources = typename AppendToTypeList<GenericValueSource, NumericValueSources>::Type;\n using NullableValueSources = typename TypeListMap<NullableValueSource, BasicValueSources>::Type;\n using BasicAndNullableValueSources = typename TypeListConcat<BasicValueSources, NullableValueSources>::Type;\ndiff --git a/src/Functions/GatherUtils/createArraySink.cpp b/src/Functions/GatherUtils/createArraySink.cpp\nindex dbf75b2cf604..513fe1126082 100644\n--- a/src/Functions/GatherUtils/createArraySink.cpp\n+++ b/src/Functions/GatherUtils/createArraySink.cpp\n@@ -41,7 +41,7 @@ struct ArraySinkCreator<>\n \n std::unique_ptr<IArraySink> createArraySink(ColumnArray & col, size_t column_size)\n {\n-    using Creator = ApplyTypeListForClass<ArraySinkCreator, TypeListNumbers>::Type;\n+    using Creator = ApplyTypeListForClass<ArraySinkCreator, TypeListNumbersAndUInt128>::Type;\n     if (auto * column_nullable = typeid_cast<ColumnNullable *>(&col.getData()))\n     {\n         auto column = ColumnArray::create(column_nullable->getNestedColumnPtr()->assumeMutable(), col.getOffsetsPtr()->assumeMutable());\ndiff --git a/src/Functions/GatherUtils/createArraySource.cpp b/src/Functions/GatherUtils/createArraySource.cpp\nindex 0ad9f88c8194..93cace5304c6 100644\n--- a/src/Functions/GatherUtils/createArraySource.cpp\n+++ b/src/Functions/GatherUtils/createArraySource.cpp\n@@ -53,7 +53,7 @@ struct ArraySourceCreator<>\n \n std::unique_ptr<IArraySource> createArraySource(const ColumnArray & col, bool is_const, size_t total_rows)\n {\n-    using Creator = typename ApplyTypeListForClass<ArraySourceCreator, TypeListNumbers>::Type;\n+    using Creator = typename ApplyTypeListForClass<ArraySourceCreator, TypeListNumbersAndUInt128>::Type;\n     if (const auto * column_nullable = typeid_cast<const ColumnNullable *>(&col.getData()))\n     {\n         auto column = ColumnArray::create(column_nullable->getNestedColumnPtr(), col.getOffsetsPtr());\ndiff --git a/src/Functions/GatherUtils/createValueSource.cpp b/src/Functions/GatherUtils/createValueSource.cpp\nindex 8f06ab863332..02750869743b 100644\n--- a/src/Functions/GatherUtils/createValueSource.cpp\n+++ b/src/Functions/GatherUtils/createValueSource.cpp\n@@ -53,7 +53,7 @@ struct ValueSourceCreator<>\n \n std::unique_ptr<IValueSource> createValueSource(const IColumn & col, bool is_const, size_t total_rows)\n {\n-    using Creator = typename ApplyTypeListForClass<ValueSourceCreator, TypeListNumbers>::Type;\n+    using Creator = typename ApplyTypeListForClass<ValueSourceCreator, TypeListNumbersAndUInt128>::Type;\n     if (const auto * column_nullable = typeid_cast<const ColumnNullable *>(&col))\n     {\n         return Creator::create(column_nullable->getNestedColumn(), &column_nullable->getNullMapData(), is_const, total_rows);\ndiff --git a/src/Functions/if.cpp b/src/Functions/if.cpp\nindex 6e46a03c69a7..1593ab5164c9 100644\n--- a/src/Functions/if.cpp\n+++ b/src/Functions/if.cpp\n@@ -175,9 +175,6 @@ class FunctionIf : public FunctionIfBase</*null_is_false=*/false>\n     static FunctionPtr create(const Context &) { return std::make_shared<FunctionIf>(); }\n \n private:\n-    template <typename T0, typename T1>\n-    static constexpr bool allow_arrays = !std::is_same_v<T0, UInt128> && !std::is_same_v<T1, UInt128>;\n-\n     template <typename T0, typename T1>\n     static UInt32 decimalScale(Block & block [[maybe_unused]], const ColumnNumbers & arguments [[maybe_unused]])\n     {\n@@ -262,7 +259,7 @@ class FunctionIf : public FunctionIfBase</*null_is_false=*/false>\n     {\n         if constexpr (std::is_same_v<NumberTraits::Error, typename NumberTraits::ResultOfIf<T0, T1>::Type>)\n             return false;\n-        else if constexpr (allow_arrays<T0, T1>)\n+        else\n         {\n             using ResultType = typename NumberTraits::ResultOfIf<T0, T1>::Type;\n \n@@ -318,7 +315,7 @@ class FunctionIf : public FunctionIfBase</*null_is_false=*/false>\n     {\n         if constexpr (std::is_same_v<NumberTraits::Error, typename NumberTraits::ResultOfIf<T0, T1>::Type>)\n             return false;\n-        else if constexpr (allow_arrays<T0, T1>)\n+        else\n         {\n             using ResultType = typename NumberTraits::ResultOfIf<T0, T1>::Type;\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01413_if_array_uuid.reference b/tests/queries/0_stateless/01413_if_array_uuid.reference\nnew file mode 100644\nindex 000000000000..fbfa90bfc850\n--- /dev/null\n+++ b/tests/queries/0_stateless/01413_if_array_uuid.reference\n@@ -0,0 +1,5 @@\n+['00000000-e1fe-11e9-bb8f-853d60c00749']\n+['11111111-e1fe-11e9-bb8f-853d60c00749']\n+['00000000-e1fe-11e9-bb8f-853d60c00749']\n+['11111111-e1fe-11e9-bb8f-853d60c00749']\n+['00000000-e1fe-11e9-bb8f-853d60c00749']\ndiff --git a/tests/queries/0_stateless/01413_if_array_uuid.sql b/tests/queries/0_stateless/01413_if_array_uuid.sql\nnew file mode 100644\nindex 000000000000..6b8fa387c44d\n--- /dev/null\n+++ b/tests/queries/0_stateless/01413_if_array_uuid.sql\n@@ -0,0 +1,1 @@\n+SELECT if(number % 2 = 0, [toUUID('00000000-e1fe-11e9-bb8f-853d60c00749')], [toUUID('11111111-e1fe-11e9-bb8f-853d60c00749')]) FROM numbers(5);\n",
  "problem_statement": "Illegal column Array(UInt128) of third argument of function if.\n```\r\nWITH [toUUID('8a421510-e1fe-11e9-bb8f-853d60c00749')] AS uuid\r\nSELECT if(empty(materialize(uuid)), uuid, arrayPopFront(uuid))\r\n\r\nReceived exception from server (version 20.3.9):\r\nCode: 44. DB::Exception: Received from localhost:9000. DB::Exception: Illegal column Const(Array(UInt128)) of third argument of function if. \r\n\r\n0 rows in set. Elapsed: 0.001 sec. \r\n```\r\n\r\nOriginally has been detected executing ALTER TABLE UPDATE over Array(UUID) column.\r\n```\r\nALTER TABLE T\r\n    UPDATE unique_users1 = arrayMap(x -> toUUID(x), arrayFilter(x -> (length(x) = 36), unique_users)) WHERE length(unique_users1) = 0\r\n\r\nReceived exception from server (version 20.3.9):\r\nCode: 44. DB::Exception: Received from localhost:9000. DB::Exception: Illegal column Array(UInt128) of third argument of function if. \r\n```\n",
  "hints_text": "`SELECT if(number % 2 = 0, [toUUID('00000000-e1fe-11e9-bb8f-853d60c00749')], [toUUID('11111111-e1fe-11e9-bb8f-853d60c00749')]) FROM numbers(5)`",
  "created_at": "2020-07-21T21:17:41Z"
}