{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 66103,
  "instance_id": "ClickHouse__ClickHouse-66103",
  "issue_numbers": [
    "65869"
  ],
  "base_commit": "f01a285f6091265cfae72bb7fbf3186269804891",
  "patch": "diff --git a/src/AggregateFunctions/AggregateFunctionGroupArrayIntersect.cpp b/src/AggregateFunctions/AggregateFunctionGroupArrayIntersect.cpp\nindex 903adf5c5470..20acda213da2 100644\n--- a/src/AggregateFunctions/AggregateFunctionGroupArrayIntersect.cpp\n+++ b/src/AggregateFunctions/AggregateFunctionGroupArrayIntersect.cpp\n@@ -150,8 +150,18 @@ class AggregateFunctionGroupArrayIntersect\n \n     void deserialize(AggregateDataPtr __restrict place, ReadBuffer & buf, std::optional<size_t> /* version */, Arena *) const override\n     {\n-        readVarUInt(this->data(place).version, buf);\n-        this->data(place).value.read(buf);\n+        auto & set = this->data(place).value;\n+        auto & version = this->data(place).version;\n+        size_t size;\n+        readVarUInt(version, buf);\n+        readVarUInt(size, buf);\n+        set.reserve(size);\n+        for (size_t i = 0; i < size; ++i)\n+        {\n+            int key;\n+            readIntBinary(key, buf);\n+            set.insert(key);\n+        }\n     }\n \n     void insertResultInto(AggregateDataPtr __restrict place, IColumn & to, Arena *) const override\n@@ -292,7 +302,7 @@ class AggregateFunctionGroupArrayIntersectGeneric\n                 }\n                 return new_map;\n             };\n-            auto new_map = rhs_value.size() < set.size() ? create_new_map(rhs_value, set) : create_new_map(set, rhs_value);\n+            auto new_map = create_new_map(set, rhs_value);\n             set = std::move(new_map);\n         }\n     }\n@@ -316,11 +326,9 @@ class AggregateFunctionGroupArrayIntersectGeneric\n         readVarUInt(version, buf);\n         readVarUInt(size, buf);\n         set.reserve(size);\n-        UInt64 elem_version;\n         for (size_t i = 0; i < size; ++i)\n         {\n             auto key = readStringBinaryInto(*arena, buf);\n-            readVarUInt(elem_version, buf);\n             set.insert(key);\n         }\n     }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03198_group_array_intersect.reference b/tests/queries/0_stateless/03198_group_array_intersect.reference\nnew file mode 100644\nindex 000000000000..6a3ffdba388c\n--- /dev/null\n+++ b/tests/queries/0_stateless/03198_group_array_intersect.reference\n@@ -0,0 +1,4 @@\n+['0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0','1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0','3\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0','4\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0','5\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0']\n+['1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0','2\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0','3\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0','4\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0','5\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0','6\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0']\n+['1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0','2\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0','4\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0','5\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0']\n+['1\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0','4\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0','5\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0']\ndiff --git a/tests/queries/0_stateless/03198_group_array_intersect.sql b/tests/queries/0_stateless/03198_group_array_intersect.sql\nnew file mode 100644\nindex 000000000000..ab7ba0b0d703\n--- /dev/null\n+++ b/tests/queries/0_stateless/03198_group_array_intersect.sql\n@@ -0,0 +1,11 @@\n+DROP TABLE IF EXISTS test_numbers__fuzz_29;\n+SET max_threads=1, max_insert_threads=1;\n+CREATE TABLE test_numbers__fuzz_29 (`a` Array(Nullable(FixedString(19)))) ENGINE = MergeTree ORDER BY a SETTINGS allow_nullable_key=1;\n+\n+INSERT INTO test_numbers__fuzz_29 VALUES ([1,2,3,4,5,6]);\n+INSERT INTO test_numbers__fuzz_29 VALUES ([1,2,4,5]);\n+INSERT INTO test_numbers__fuzz_29 VALUES ([1,4,3,0,5,5,5]);\n+\n+SELECT arraySort(groupArrayIntersect(*)) FROM test_numbers__fuzz_29 GROUP BY a WITH ROLLUP ORDER BY ALL;\n+\n+DROP TABLE test_numbers__fuzz_29;\n",
  "problem_statement": "Add a test for #64933\n### Changelog category (leave one):\r\n- Not for changelog (changelog entry is not required)\r\n\r\n\r\n### Changelog entry (a user-readable short description of the changes that goes to CHANGELOG.md):\r\nThis closes #64933\r\n\r\n\r\n> Information about CI checks: https://clickhouse.com/docs/en/development/continuous-integration/\r\n\r\n#### CI Settings (Only check the boxes if you know what you are doing):\r\n- [ ] <!---ci_set_required--> Allow: All Required Checks\r\n- [ ] <!---ci_include_stateless--> Allow: Stateless tests\r\n- [ ] <!---ci_include_stateful--> Allow: Stateful tests\r\n- [ ] <!---ci_include_integration--> Allow: Integration Tests\r\n- [ ] <!---ci_include_performance--> Allow: Performance tests\r\n- [ ] <!---ci_set_builds--> Allow: All Builds\r\n- [ ] <!---batch_0_1--> Allow: batch 1, 2 for multi-batch jobs\r\n- [ ] <!---batch_2_3--> Allow: batch 3, 4, 5, 6 for multi-batch jobs\r\n---\r\n- [ ] <!---ci_exclude_style--> Exclude: Style check\r\n- [ ] <!---ci_exclude_fast--> Exclude: Fast test\r\n- [ ] <!---ci_exclude_asan--> Exclude: All with ASAN\r\n- [ ] <!---ci_exclude_tsan|msan|ubsan|coverage--> Exclude: All with TSAN, MSAN, UBSAN, Coverage\r\n- [ ] <!---ci_exclude_aarch64|release|debug--> Exclude: All with aarch64, release, debug\r\n---\r\n- [ ] <!---do_not_test--> Do not test\r\n- [ ] <!---woolen_wolfdog--> Woolen Wolfdog\r\n- [ ] <!---upload_all--> Upload binaries for special builds\r\n- [ ] <!---no_merge_commit--> Disable merge-commit\r\n- [ ] <!---no_ci_cache--> Disable CI cache\r\n\n",
  "hints_text": "<!-- automatic status comment for PR #65869 from ClickHouse/ClickHouse:add-test-64933 -->\n*This is an automated comment for commit e794f89ed37052c4ecd0e8a9106b06b8a08d3689 with description of existing statuses. It's updated for the latest CI running*\n\n[\u274c Click here](https://s3.amazonaws.com/clickhouse-test-reports/65869/e794f89ed37052c4ecd0e8a9106b06b8a08d3689/ci_running.html) to open a full report in a separate page\n\n<table>\n<thead><tr><th>Check name</th><th>Description</th><th>Status</th></tr></thead>\n<tbody>\n<tr><td>Flaky tests</td><td>Checks if new added or modified tests are flaky by running them repeatedly, in parallel, with more randomization. Functional tests are run 100 times with address sanitizer, and additional randomization of thread scheduling. Integration tests are run up to 10 times. If at least once a new test has failed, or was too long, this check will be red. We don't allow flaky tests, read <a href=\"https://clickhouse.com/blog/decorating-a-christmas-tree-with-the-help-of-flaky-tests/\">the doc</a></td><td><a href=\"https://s3.amazonaws.com/clickhouse-test-reports/65869/e794f89ed37052c4ecd0e8a9106b06b8a08d3689/stateless_tests_flaky_check__asan_.html\">\u274c failure</a></td></tr>\n<tr><td>Stateless tests</td><td>Runs stateless functional tests for ClickHouse binaries built in various configurations -- release, debug, with sanitizers, etc</td><td><a href=\"https://s3.amazonaws.com/clickhouse-test-reports/65869/e794f89ed37052c4ecd0e8a9106b06b8a08d3689/stateless_tests__asan__[4_4].html\">\u274c failure</a></td></tr>\n<tbody>\n</table>\n<details><summary>Successful checks</summary>\n<table>\n<thead><tr><th>Check name</th><th>Description</th><th>Status</th></tr></thead>\n<tbody>\n<tr><td>Builds</td><td>There's no description for the check yet, please add it to tests/ci/ci_config.py:CHECK_DESCRIPTIONS</td><td><a href=\"https://s3.amazonaws.com/clickhouse-test-reports/0/2fcca61fe9575f32239360033fa205425f633e95/builds/report.html\">\u2705 success</a></td></tr>\n<tr><td>ClickBench</td><td>Runs [ClickBench](https://github.com/ClickHouse/ClickBench/) with instant-attach table</td><td><a href=\"https://s3.amazonaws.com/clickhouse-test-reports/0/2fcca61fe9575f32239360033fa205425f633e95/clickbench__aarch64_.html\">\u2705 success</a></td></tr>\n<tr><td>Compatibility check</td><td>Checks that <b>clickhouse</b> binary runs on distributions with old libc versions. If it fails, ask a maintainer for help</td><td><a href=\"https://s3.amazonaws.com/clickhouse-test-reports/0/2fcca61fe9575f32239360033fa205425f633e95/compatibility_check__aarch64_.html\">\u2705 success</a></td></tr>\n<tr><td>Docker keeper image</td><td>The check to build and optionally push the mentioned image to docker hub</td><td><a href=\"https://s3.amazonaws.com/clickhouse-test-reports/0/2fcca61fe9575f32239360033fa205425f633e95/docker_keeper_image.html\">\u2705 success</a></td></tr>\n<tr><td>Docker server image</td><td>The check to build and optionally push the mentioned image to docker hub</td><td><a href=\"https://s3.amazonaws.com/clickhouse-test-reports/0/2fcca61fe9575f32239360033fa205425f633e95/docker_server_image.html\">\u2705 success</a></td></tr>\n<tr><td>Docs check</td><td>Builds and tests the documentation</td><td>\u2705 success</td></tr>\n<tr><td>Fast test</td><td>Normally this is the first check that is ran for a PR. It builds ClickHouse and runs most of <a href=\"https://clickhouse.com/docs/en/development/tests#functional-tests\">stateless functional tests</a>, omitting some. If it fails, further checks are not started until it is fixed. Look at the report to see which tests fail, then reproduce the failure locally as described <a href=\"https://clickhouse.com/docs/en/development/tests#functional-test-locally\">here</a></td><td><a href=\"https://s3.amazonaws.com/clickhouse-test-reports/65869/e794f89ed37052c4ecd0e8a9106b06b8a08d3689/fast_test.html\">\u2705 success</a></td></tr>\n<tr><td>Install packages</td><td>Checks that the built packages are installable in a clear environment</td><td><a href=\"https://s3.amazonaws.com/clickhouse-test-reports/0/2fcca61fe9575f32239360033fa205425f633e95/install_packages__aarch64_.html\">\u2705 success</a></td></tr>\n<tr><td>Integration tests</td><td>The integration tests report. In parenthesis the package type is given, and in square brackets are the optional part/total tests</td><td><a href=\"https://s3.amazonaws.com/clickhouse-test-reports/0/2fcca61fe9575f32239360033fa205425f633e95/integration_tests__aarch64__[1_6].html\">\u2705 success</a></td></tr>\n<tr><td>Performance Comparison</td><td>Measure changes in query performance. The performance test report is described in detail <a href=\"https://github.com/ClickHouse/ClickHouse/tree/master/docker/test/performance-comparison#how-to-read-the-report\">here</a>. In square brackets are the optional part/total tests</td><td><a href=\"https://s3.amazonaws.com/clickhouse-test-reports/0/2fcca61fe9575f32239360033fa205425f633e95/performance_comparison__release__[1_4]/report.html\">\u2705 success</a></td></tr>\n<tr><td>Stateful tests</td><td>Runs stateful functional tests for ClickHouse binaries built in various configurations -- release, debug, with sanitizers, etc</td><td><a href=\"https://s3.amazonaws.com/clickhouse-test-reports/0/2fcca61fe9575f32239360033fa205425f633e95/stateful_tests__aarch64_.html\">\u2705 success</a></td></tr>\n<tr><td>Style check</td><td>Runs a set of checks to keep the code style clean. If some of tests failed, see the related log from the report</td><td><a href=\"https://s3.amazonaws.com/clickhouse-test-reports/65869/e794f89ed37052c4ecd0e8a9106b06b8a08d3689/style_check.html\">\u2705 success</a></td></tr>\n<tr><td>Unit tests</td><td>Runs the unit tests for different release types</td><td><a href=\"https://s3.amazonaws.com/clickhouse-test-reports/0/2fcca61fe9575f32239360033fa205425f633e95/unit_tests__asan_.html\">\u2705 success</a></td></tr>\n<tbody>\n</table>\n</details>\n",
  "created_at": "2024-07-04T16:47:42Z",
  "modified_files": [
    "src/AggregateFunctions/AggregateFunctionGroupArrayIntersect.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03198_group_array_intersect.reference",
    "b/tests/queries/0_stateless/03198_group_array_intersect.sql"
  ]
}