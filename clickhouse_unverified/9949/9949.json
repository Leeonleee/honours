{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 9949,
  "instance_id": "ClickHouse__ClickHouse-9949",
  "issue_numbers": [
    "9699"
  ],
  "base_commit": "621bcaf2eba65d7352ac3bbc22ad1e77965977aa",
  "patch": "diff --git a/dbms/src/Storages/StorageMySQL.cpp b/dbms/src/Storages/StorageMySQL.cpp\nindex e0f8cc5813a0..6645b41376a1 100644\n--- a/dbms/src/Storages/StorageMySQL.cpp\n+++ b/dbms/src/Storages/StorageMySQL.cpp\n@@ -71,7 +71,7 @@ Pipes StorageMySQL::read(\n {\n     check(column_names_);\n     String query = transformQueryForExternalDatabase(\n-        *query_info_.query, getColumns().getOrdinary(), IdentifierQuotingStyle::BackticksMySQL, remote_database_name, remote_table_name, context_);\n+        query_info_, getColumns().getOrdinary(), IdentifierQuotingStyle::BackticksMySQL, remote_database_name, remote_table_name, context_);\n \n     Block sample_block;\n     for (const String & column_name : column_names_)\ndiff --git a/dbms/src/Storages/StorageXDBC.cpp b/dbms/src/Storages/StorageXDBC.cpp\nindex 932d77993682..cedd2abf38fd 100644\n--- a/dbms/src/Storages/StorageXDBC.cpp\n+++ b/dbms/src/Storages/StorageXDBC.cpp\n@@ -74,7 +74,7 @@ std::function<void(std::ostream &)> StorageXDBC::getReadPOSTDataCallback(const N\n     QueryProcessingStage::Enum & /*processed_stage*/,\n     size_t /*max_block_size*/) const\n {\n-    String query = transformQueryForExternalDatabase(*query_info.query,\n+    String query = transformQueryForExternalDatabase(query_info,\n         getColumns().getOrdinary(),\n         bridge_helper->getIdentifierQuotingStyle(),\n         remote_database_name,\ndiff --git a/dbms/src/Storages/transformQueryForExternalDatabase.cpp b/dbms/src/Storages/transformQueryForExternalDatabase.cpp\nindex 5ba7deadb33d..839175c9b724 100644\n--- a/dbms/src/Storages/transformQueryForExternalDatabase.cpp\n+++ b/dbms/src/Storages/transformQueryForExternalDatabase.cpp\n@@ -134,16 +134,15 @@ bool isCompatible(const IAST & node)\n \n \n String transformQueryForExternalDatabase(\n-    const IAST & query,\n+    const SelectQueryInfo & query_info,\n     const NamesAndTypesList & available_columns,\n     IdentifierQuotingStyle identifier_quoting_style,\n     const String & database,\n     const String & table,\n     const Context & context)\n {\n-    auto clone_query = query.clone();\n-    auto syntax_result = SyntaxAnalyzer(context).analyzeSelect(clone_query, available_columns);\n-    const Names used_columns = syntax_result->requiredSourceColumns();\n+    auto clone_query = query_info.query->clone();\n+    const Names used_columns = query_info.syntax_analyzer_result->requiredSourceColumns();\n \n     auto select = std::make_shared<ASTSelectQuery>();\n \ndiff --git a/dbms/src/Storages/transformQueryForExternalDatabase.h b/dbms/src/Storages/transformQueryForExternalDatabase.h\nindex 9b838da51271..09de53e36d3d 100644\n--- a/dbms/src/Storages/transformQueryForExternalDatabase.h\n+++ b/dbms/src/Storages/transformQueryForExternalDatabase.h\n@@ -3,6 +3,7 @@\n #include <Core/Types.h>\n #include <Core/NamesAndTypes.h>\n #include <Parsers/IdentifierQuotingStyle.h>\n+#include <Storages/SelectQueryInfo.h>\n \n \n namespace DB\n@@ -23,7 +24,7 @@ class Context;\n   * Compatible expressions are comparisons of identifiers, constants, and logical operations on them.\n   */\n String transformQueryForExternalDatabase(\n-    const IAST & query,\n+    const SelectQueryInfo & query_info,\n     const NamesAndTypesList & available_columns,\n     IdentifierQuotingStyle identifier_quoting_style,\n     const String & database,\n",
  "test_patch": "diff --git a/dbms/src/Storages/tests/gtest_transform_query_for_external_database.cpp b/dbms/src/Storages/tests/gtest_transform_query_for_external_database.cpp\nindex abf0b7a6361e..385e47201a51 100644\n--- a/dbms/src/Storages/tests/gtest_transform_query_for_external_database.cpp\n+++ b/dbms/src/Storages/tests/gtest_transform_query_for_external_database.cpp\n@@ -49,7 +49,10 @@ static void check(const std::string & query, const std::string & expected, const\n {\n     ParserSelectQuery parser;\n     ASTPtr ast = parseQuery(parser, query, 1000);\n-    std::string transformed_query = transformQueryForExternalDatabase(*ast, columns, IdentifierQuotingStyle::DoubleQuotes, \"test\", \"table\", context);\n+    SelectQueryInfo query_info;\n+    query_info.syntax_analyzer_result = SyntaxAnalyzer(context).analyzeSelect(ast, columns);\n+    query_info.query = ast;\n+    std::string transformed_query = transformQueryForExternalDatabase(query_info, columns, IdentifierQuotingStyle::DoubleQuotes, \"test\", \"table\", context);\n \n     EXPECT_EQ(transformed_query, expected);\n }\ndiff --git a/dbms/tests/integration/test_mysql_database_engine/test.py b/dbms/tests/integration/test_mysql_database_engine/test.py\nindex 9e776b65f32e..86e0b9df5fd7 100644\n--- a/dbms/tests/integration/test_mysql_database_engine/test.py\n+++ b/dbms/tests/integration/test_mysql_database_engine/test.py\n@@ -99,3 +99,24 @@ def test_clickhouse_dml_for_mysql_database(started_cluster):\n         assert clickhouse_node.query(\"SELECT count() FROM `test_database`.`test_table`\").rstrip() == '10000'\n \n         mysql_node.query(\"DROP DATABASE test_database\")\n+\n+\n+def test_clickhouse_join_for_mysql_database(started_cluster):\n+    with contextlib.closing(MySQLNodeInstance('root', 'clickhouse', '127.0.0.1', port=3308)) as mysql_node:\n+        mysql_node.query(\"CREATE DATABASE IF NOT EXISTS test DEFAULT CHARACTER SET 'utf8'\")\n+        mysql_node.query(\"CREATE TABLE test.t1_mysql_local (\"\n+                         \"pays    VARCHAR(55) DEFAULT 'FRA' NOT NULL,\"\n+                         \"service VARCHAR(5)  DEFAULT ''    NOT NULL,\"\n+                         \"opco    CHAR(3)     DEFAULT ''    NOT NULL\"\n+                         \")\")\n+        mysql_node.query(\"CREATE TABLE test.t2_mysql_local (\"\n+                         \"service VARCHAR(5) DEFAULT '' NOT NULL,\"\n+                         \"opco    VARCHAR(5) DEFAULT ''\"\n+                         \")\")\n+        clickhouse_node.query(\"CREATE TABLE default.t1_remote_mysql AS mysql('mysql1:3306','test','t1_mysql_local','root','clickhouse')\")\n+        clickhouse_node.query(\"CREATE TABLE default.t2_remote_mysql AS mysql('mysql1:3306','test','t2_mysql_local','root','clickhouse')\")\n+        assert clickhouse_node.query(\"SELECT s.pays \"\n+                              \"FROM default.t1_remote_mysql AS s \"\n+                              \"LEFT JOIN default.t1_remote_mysql AS s_ref \"\n+                              \"ON (s_ref.opco = s.opco AND s_ref.service = s.service)\") == ''\n+        mysql_node.query(\"DROP DATABASE test\")\n",
  "problem_statement": "mysql() table function + join = broken after update to 20.3.1.2564\n**Describe the bug**\r\nafter upgrade to Clickhouse Server 20.3.1.2564 some queries had broke\r\n\r\n**How to reproduce**\r\n* Test which works without errors\r\n```sql\r\nCREATE TABLE default.t1_local\r\n(\r\n    service String,\r\n    opco    String,\r\n    pays    String\r\n) ENGINE MergeTree() ORDER BY tuple();\r\n\r\nCREATE TABLE default.t2_local\r\n(\r\n    service String,\r\n    opco    String\r\n) ENGINE MergeTree() ORDER BY tuple();\r\n\r\nCREATE TABLE default.t1_remote AS remote('127.0.0.1:9000',default.t1_local,'default','');\r\nCREATE TABLE default.t2_remote AS remote('127.0.0.1:9000',default.t2_local,'default','');\r\n\r\n/* doesn't return any error and return empty recordset */\r\nSELECT s.pays\r\nFROM default.t1_remote AS s\r\nLEFT JOIN default.t2_remote AS s_ref ON (s_ref.opco = s.opco AND s_ref.service = s.service);\r\n\r\nDROP TABLE default.t1_remote;\r\nDROP TABLE default.t2_remote;\r\n```\r\n\r\n* Test which reproduces unexpected behavior\r\n** create tables on MySQL Server\r\n```sql\r\nCREATE DATABASE IF NOT EXISTS test;\r\nCREATE TABLE test.t1_mysql_local\r\n(\r\n    pays    VARCHAR(55) DEFAULT 'FRA' NOT NULL,\r\n    service VARCHAR(5)  DEFAULT ''    NOT NULL,\r\n    opco    CHAR(3)     DEFAULT ''    NOT NULL\r\n);\r\n\r\nCREATE TABLE test.t2_mysql_local\r\n(\r\n    service VARCHAR(5) DEFAULT '' NOT NULL,\r\n    opco    VARCHAR(5) DEFAULT ''\r\n);\r\n\r\n```\r\n** create mysql() table function tables on Clickhouse\r\n```sql\r\nCREATE TABLE default.t1_remote_mysql AS mysql('127.0.0.1:3306','test','t1_mysql_local','root','pass');\r\nCREATE TABLE default.t2_remote_mysql AS mysql('127.0.0.1:3306','test','t2_mysql_local','root','pass');\r\n```\r\n** query which return error\r\n```sql\r\nSELECT s.pays\r\nFROM default.t1_remote_mysql AS s\r\nLEFT JOIN default.t2_remote_mysql AS s_ref ON (s_ref.opco = s.opco AND s_ref.service = s.service);\r\n```\r\n** error message\r\n```\r\nCode: 47, e.displayText() = DB::Exception: Missing columns: 's_ref.opco' 's_ref.service' while processing query: 'SELECT pays FROM default.t1_remote_mysql AS s ALL LEFT JOIN default.t1_remote_mysql AS s_ref ON (s_ref.opco = opco) AND (s_ref.service = service)', required columns: 'pays' 's_ref.service' 's_ref.opco' 'opco' 'service', source columns: 'opco' 'service' 'pays', joined columns: (version 20.3.1.2564 (official build))\r\n```\r\n\r\n* WhichClickHouse server version to use\r\n20.3.1.2564\r\n\r\n* Which interface to use, if matters\r\nremote() and mysql() table functions + JOIN\r\n\r\n**Additional context**\r\n```\r\nSET send_logs_level='trace'; \r\nSET enable_debug_queries = 1;\r\n ANALYZE SELECT s.pays FROM default.t1_remote_mysql AS s LEFT JOIN default.t1_remote_mysql AS s_ref ON (s_ref.opco = s.opco AND s_ref.service = s.service);\r\n\r\nANALYZE SELECT s.pays\r\nFROM default.t1_remote_mysql AS s\r\nLEFT JOIN default.t1_remote_mysql AS s_ref ON (s_ref.opco = s.opco) AND (s_ref.service = s.service)\r\n\r\n[bdd2] 2020.03.17 06:56:04.933763 [ 88375 ] {b1442d2e-bd66-475a-9fd9-3efae1b1ba5d} <Debug> executeQuery: (from 127.0.0.1:51424) ANALYZE SELECT s.pays FROM default.t1_remote_mysql AS s LEFT JOIN default.t1_remote_mysql AS s_ref ON (s_ref.opco = s.opco) AND (s_ref.service = s.service)\r\n\u2191 Progress: 0.00 rows, 0.00 B (0.00 rows/s., 0.00 B/s.) [bdd2] 2020.03.17 06:56:04.935274 [ 88375 ] {b1442d2e-bd66-475a-9fd9-3efae1b1ba5d} <Trace> AccessRightsContext (default): Access granted: SELECT(service, opco) ON default.t1_remote_mysql\r\n[bdd2] 2020.03.17 06:56:04.935388 [ 88375 ] {b1442d2e-bd66-475a-9fd9-3efae1b1ba5d} <Debug> Join: setSampleBlock: s_ref.opco String String(size = 0), s_ref.service String String(size = 0)\r\n[bdd2] 2020.03.17 06:56:04.935602 [ 88375 ] {b1442d2e-bd66-475a-9fd9-3efae1b1ba5d} <Trace> AccessRightsContext (default): Access granted: SELECT(pays, service, opco) ON default.t1_remote_mysql\r\n[bdd2] 2020.03.17 06:56:04.935810 [ 88375 ] {b1442d2e-bd66-475a-9fd9-3efae1b1ba5d} <Debug> executeQuery: Query pipeline:\r\nOne\r\n\r\n\u250c\u2500explain\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 SELECT pays\r\nFROM default.t1_remote_mysql AS s\r\nALL LEFT JOIN default.t1_remote_mysql AS s_ref ON (s_ref.opco = opco) AND (s_ref.service = service) \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n[bdd2] 2020.03.17 06:56:04.936522 [ 88375 ] {b1442d2e-bd66-475a-9fd9-3efae1b1ba5d} <Information> executeQuery: Read 1 rows, 154.00 B in 0.003 sec., 375 rows/sec., 56.54 KiB/sec.\r\n[bdd2] 2020.03.17 06:56:04.936622 [ 88375 ] {b1442d2e-bd66-475a-9fd9-3efae1b1ba5d} <Debug> MemoryTracker: Peak memory usage (for query): 192.00 B.\r\n\r\n1 rows in set. Elapsed: 0.009 sec.\n",
  "hints_text": "",
  "created_at": "2020-03-30T17:15:17Z"
}