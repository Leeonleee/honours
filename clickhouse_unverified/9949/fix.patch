diff --git a/dbms/src/Storages/StorageMySQL.cpp b/dbms/src/Storages/StorageMySQL.cpp
index e0f8cc5813a0..6645b41376a1 100644
--- a/dbms/src/Storages/StorageMySQL.cpp
+++ b/dbms/src/Storages/StorageMySQL.cpp
@@ -71,7 +71,7 @@ Pipes StorageMySQL::read(
 {
     check(column_names_);
     String query = transformQueryForExternalDatabase(
-        *query_info_.query, getColumns().getOrdinary(), IdentifierQuotingStyle::BackticksMySQL, remote_database_name, remote_table_name, context_);
+        query_info_, getColumns().getOrdinary(), IdentifierQuotingStyle::BackticksMySQL, remote_database_name, remote_table_name, context_);
 
     Block sample_block;
     for (const String & column_name : column_names_)
diff --git a/dbms/src/Storages/StorageXDBC.cpp b/dbms/src/Storages/StorageXDBC.cpp
index 932d77993682..cedd2abf38fd 100644
--- a/dbms/src/Storages/StorageXDBC.cpp
+++ b/dbms/src/Storages/StorageXDBC.cpp
@@ -74,7 +74,7 @@ std::function<void(std::ostream &)> StorageXDBC::getReadPOSTDataCallback(const N
     QueryProcessingStage::Enum & /*processed_stage*/,
     size_t /*max_block_size*/) const
 {
-    String query = transformQueryForExternalDatabase(*query_info.query,
+    String query = transformQueryForExternalDatabase(query_info,
         getColumns().getOrdinary(),
         bridge_helper->getIdentifierQuotingStyle(),
         remote_database_name,
diff --git a/dbms/src/Storages/transformQueryForExternalDatabase.cpp b/dbms/src/Storages/transformQueryForExternalDatabase.cpp
index 5ba7deadb33d..839175c9b724 100644
--- a/dbms/src/Storages/transformQueryForExternalDatabase.cpp
+++ b/dbms/src/Storages/transformQueryForExternalDatabase.cpp
@@ -134,16 +134,15 @@ bool isCompatible(const IAST & node)
 
 
 String transformQueryForExternalDatabase(
-    const IAST & query,
+    const SelectQueryInfo & query_info,
     const NamesAndTypesList & available_columns,
     IdentifierQuotingStyle identifier_quoting_style,
     const String & database,
     const String & table,
     const Context & context)
 {
-    auto clone_query = query.clone();
-    auto syntax_result = SyntaxAnalyzer(context).analyzeSelect(clone_query, available_columns);
-    const Names used_columns = syntax_result->requiredSourceColumns();
+    auto clone_query = query_info.query->clone();
+    const Names used_columns = query_info.syntax_analyzer_result->requiredSourceColumns();
 
     auto select = std::make_shared<ASTSelectQuery>();
 
diff --git a/dbms/src/Storages/transformQueryForExternalDatabase.h b/dbms/src/Storages/transformQueryForExternalDatabase.h
index 9b838da51271..09de53e36d3d 100644
--- a/dbms/src/Storages/transformQueryForExternalDatabase.h
+++ b/dbms/src/Storages/transformQueryForExternalDatabase.h
@@ -3,6 +3,7 @@
 #include <Core/Types.h>
 #include <Core/NamesAndTypes.h>
 #include <Parsers/IdentifierQuotingStyle.h>
+#include <Storages/SelectQueryInfo.h>
 
 
 namespace DB
@@ -23,7 +24,7 @@ class Context;
   * Compatible expressions are comparisons of identifiers, constants, and logical operations on them.
   */
 String transformQueryForExternalDatabase(
-    const IAST & query,
+    const SelectQueryInfo & query_info,
     const NamesAndTypesList & available_columns,
     IdentifierQuotingStyle identifier_quoting_style,
     const String & database,
