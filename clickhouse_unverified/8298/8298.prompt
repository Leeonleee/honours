You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Engine JOIN crashes ClickHouse v19.15.3.6
1. Создание таблицы
```sql
CREATE TABLE `default`.`testJoinTable`
(
    number UInt64,
    data   String
)
ENGINE = Join(ALL, INNER, number);
​
INSERT INTO `default`.`testJoinTable`
VALUES
   (1, '1'),
   (2, '2'),
   (3, '3');
```

2. Запрос, вызывающий ошибку
```sql
SELECT *
FROM (SELECT * FROM `system`.`numbers` LIMIT 10)
ALL INNER JOIN `default`.`testJoinTable` USING `number`
```

3. Запрос, не вызывающий ошибку
```sql
SELECT *
FROM (SELECT * FROM `system`.`numbers` LIMIT 10)
ALL INNER JOIN (SELECT * FROM `default`.`testJoinTable`) USING `number`
```

4. При этом можно сделать так, хотя для JOIN таблиц это должно быть запрещено
```sql
SELECT  * FROM `default`.`testJoinTable` 
```

5. stacktrace
```
2019.10.31 13:15:40.960123 [ 109 ] {} <Fatal> BaseDaemon: ########################################
2019.10.31 13:15:40.960256 [ 109 ] {} <Fatal> BaseDaemon: (version 19.15.3.6 (official build)) (from thread 103) Received signal Segmentation fault (11).
2019.10.31 13:15:40.960305 [ 109 ] {} <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Address not mapped to object.
2019.10.31 13:15:40.960358 [ 109 ] {} <Fatal> BaseDaemon: Stack trace: 0x55f42afa813a 0x55f42afd4cc7 0x55f42af7f4fd 0x55f42b64e380 0x55f42b64f335 0x55f42b4e8c0d 0x55f42af5ad3e 0x55f42af3cc25 0x55f42af5c283 0x55f42af5e188 0x55f42b067006 0x55f42b0684dc 0x55f427cb882e 0x55f427cbaba9 0x55f42bae4e49 0x55f42bae13c0 0x55f42bae1add 0x55f42d16b901 0x55f42d1696ac 0x55f42d8deeb0 0x7f752c3c56db 0x7f752bce288f
2019.10.31 13:15:40.960441 [ 109 ] {} <Fatal> BaseDaemon: 3. 0x55f42afa813a ? /usr/bin/clickhouse
2019.10.31 13:15:40.960561 [ 109 ] {} <Fatal> BaseDaemon: 4. 0x55f42afd4cc7 void DB::Join::joinBlockImpl<(DB::ASTTableJoin::Kind)0, (DB::ASTTableJoin::Strictness)2, DB::Join::MapsTemplate<DB::JoinStuff::WithFlags<DB::RowRefList, false> > >(DB::Block&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, DB::Block const&, DB::Join::MapsTemplate<DB::JoinStuff::WithFlags<DB::RowRefList, false> > const&) const /usr/bin/clickhouse
2019.10.31 13:15:40.960616 [ 109 ] {} <Fatal> BaseDaemon: 5. 0x55f42af7f4fd DB::Join::joinBlock(DB::Block&) /usr/bin/clickhouse
2019.10.31 13:15:40.960662 [ 109 ] {} <Fatal> BaseDaemon: 6. 0x55f42b64e380 DB::ExpressionAction::execute(DB::Block&, bool) const /usr/bin/clickhouse
2019.10.31 13:15:40.960701 [ 109 ] {} <Fatal> BaseDaemon: 7. 0x55f42b64f335 DB::ExpressionActions::execute(DB::Block&, bool) const /usr/bin/clickhouse
2019.10.31 13:15:40.960763 [ 109 ] {} <Fatal> BaseDaemon: 8. 0x55f42b4e8c0d DB::ExpressionBlockInputStream::ExpressionBlockInputStream(std::shared_ptr<DB::IBlockInputStream> const&, std::shared_ptr<DB::ExpressionActions> const&) /usr/bin/clickhouse
2019.10.31 13:15:40.960815 [ 109 ] {} <Fatal> BaseDaemon: 9. 0x55f42af5ad3e void DB::InterpreterSelectQuery::executeImpl<DB::InterpreterSelectQuery::Pipeline>(DB::InterpreterSelectQuery::Pipeline&, std::shared_ptr<DB::IBlockInputStream> const&) /usr/bin/clickhouse
2019.10.31 13:15:40.960856 [ 109 ] {} <Fatal> BaseDaemon: 10. 0x55f42af3cc25 DB::InterpreterSelectQuery::executeWithMultipleStreams() /usr/bin/clickhouse
2019.10.31 13:15:40.960893 [ 109 ] {} <Fatal> BaseDaemon: 11. 0x55f42af5c283 DB::InterpreterSelectWithUnionQuery::executeWithMultipleStreams() /usr/bin/clickhouse
2019.10.31 13:15:40.960930 [ 109 ] {} <Fatal> BaseDaemon: 12. 0x55f42af5e188 DB::InterpreterSelectWithUnionQuery::execute() /usr/bin/clickhouse
2019.10.31 13:15:40.960964 [ 109 ] {} <Fatal> BaseDaemon: 13. 0x55f42b067006 ? /usr/bin/clickhouse
2019.10.31 13:15:40.961017 [ 109 ] {} <Fatal> BaseDaemon: 14. 0x55f42b0684dc DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, DB::Context&, std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>, std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>) /usr/bin/clickhouse
2019.10.31 13:15:40.961075 [ 109 ] {} <Fatal> BaseDaemon: 15. 0x55f427cb882e DB::HTTPHandler::processQuery(Poco::Net::HTTPServerRequest&, HTMLForm&, Poco::Net::HTTPServerResponse&, DB::HTTPHandler::Output&) /usr/bin/clickhouse
2019.10.31 13:15:40.961119 [ 109 ] {} <Fatal> BaseDaemon: 16. 0x55f427cbaba9 DB::HTTPHandler::handleRequest(Poco::Net::HTTPServerRequest&, Poco::Net::HTTPServerResponse&) /usr/bin/clickhouse
2019.10.31 13:15:40.961159 [ 109 ] {} <Fatal> BaseDaemon: 17. 0x55f42bae4e49 Poco::Net::HTTPServerConnection::run() /usr/bin/clickhouse
2019.10.31 13:15:40.961196 [ 109 ] {} <Fatal> BaseDaemon: 18. 0x55f42bae13c0 Poco::Net::TCPServerConnection::start() /usr/bin/clickhouse
2019.10.31 13:15:40.961233 [ 109 ] {} <Fatal> BaseDaemon: 19. 0x55f42bae1add Poco::Net::TCPServerDispatcher::run() /usr/bin/clickhouse
2019.10.31 13:15:40.961280 [ 109 ] {} <Fatal> BaseDaemon: 20. 0x55f42d16b901 Poco::PooledThread::run() /usr/bin/clickhouse
2019.10.31 13:15:40.961318 [ 109 ] {} <Fatal> BaseDaemon: 21. 0x55f42d1696ac Poco::ThreadImpl::runnableEntry(void*) /usr/bin/clickhouse
2019.10.31 13:15:40.961354 [ 109 ] {} <Fatal> BaseDaemon: 22. 0x55f42d8deeb0 ? /usr/bin/clickhouse
2019.10.31 13:15:40.961399 [ 109 ] {} <Fatal> BaseDaemon: 23. 0x7f752c3c56db start_thread /lib/x86_64-linux-gnu/libpthread-2.27.so
2019.10.31 13:15:40.961443 [ 109 ] {} <Fatal> BaseDaemon: 24. 0x7f752bce288f clone /lib/x86_64-linux-gnu/libc-2.27.so
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
