{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 33451,
  "instance_id": "ClickHouse__ClickHouse-33451",
  "issue_numbers": [
    "10298"
  ],
  "base_commit": "6dbbf6b4dd608afa4ba3436008aa7e1e9865430c",
  "patch": "diff --git a/docs/en/sql-reference/functions/url-functions.md b/docs/en/sql-reference/functions/url-functions.md\nindex ae2113a2b64b..98c3135f2b43 100644\n--- a/docs/en/sql-reference/functions/url-functions.md\n+++ b/docs/en/sql-reference/functions/url-functions.md\n@@ -360,6 +360,21 @@ SELECT decodeURLComponent('http://127.0.0.1:8123/?query=SELECT%201%3B') AS Decod\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n ```\n \n+### decodeURLFormComponent(URL) {#decodeurlformcomponenturl}\n+\n+Returns the decoded URL. Follows rfc-1866, plain plus(`+`) is decoded as space(` `).\n+Example:\n+\n+``` sql\n+SELECT decodeURLFormComponent('http://127.0.0.1:8123/?query=SELECT%201+2%2B3') AS DecodedURL;\n+```\n+\n+``` text\n+\u250c\u2500DecodedURL\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 http://127.0.0.1:8123/?query=SELECT 1 2+3 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n ### netloc {#netloc}\n \n Extracts network locality (`username:password@host:port`) from a URL.\ndiff --git a/src/Functions/URL/decodeURLComponent.cpp b/src/Functions/URL/decodeURLComponent.cpp\nindex b6abaab515e0..9ed290b1832e 100644\n--- a/src/Functions/URL/decodeURLComponent.cpp\n+++ b/src/Functions/URL/decodeURLComponent.cpp\n@@ -12,7 +12,7 @@ namespace ErrorCodes\n }\n \n /// We assume that size of the dst buf isn't less than src_size.\n-static size_t decodeURL(const char * src, size_t src_size, char * dst)\n+static size_t decodeURL(const char * src, size_t src_size, char * dst, bool plus_as_space)\n {\n     const char * src_prev_pos = src;\n     const char * src_curr_pos = src;\n@@ -21,12 +21,28 @@ static size_t decodeURL(const char * src, size_t src_size, char * dst)\n \n     while (true)\n     {\n-        src_curr_pos = find_first_symbols<'%'>(src_curr_pos, src_end);\n+        src_curr_pos = find_first_symbols<'%', '+'>(src_curr_pos, src_end);\n \n         if (src_curr_pos == src_end)\n         {\n             break;\n         }\n+        else if (*src_curr_pos == '+')\n+        {\n+            if (!plus_as_space)\n+            {\n+                ++src_curr_pos;\n+                continue;\n+            }\n+            size_t bytes_to_copy = src_curr_pos - src_prev_pos;\n+            memcpySmallAllowReadWriteOverflow15(dst_pos, src_prev_pos, bytes_to_copy);\n+            dst_pos += bytes_to_copy;\n+\n+            ++src_curr_pos;\n+            src_prev_pos = src_curr_pos;\n+            *dst_pos = ' ';\n+            ++dst_pos;\n+        }\n         else if (src_end - src_curr_pos < 3)\n         {\n             src_curr_pos = src_end;\n@@ -67,6 +83,7 @@ static size_t decodeURL(const char * src, size_t src_size, char * dst)\n \n \n /// Percent decode of URL data.\n+template <bool plus_as_space>\n struct DecodeURLComponentImpl\n {\n     static void vector(const ColumnString::Chars & data, const ColumnString::Offsets & offsets,\n@@ -83,7 +100,7 @@ struct DecodeURLComponentImpl\n         {\n             const char * src_data = reinterpret_cast<const char *>(&data[prev_offset]);\n             size_t src_size = offsets[i] - prev_offset;\n-            size_t dst_size = decodeURL(src_data, src_size, reinterpret_cast<char *>(res_data.data() + res_offset));\n+            size_t dst_size = decodeURL(src_data, src_size, reinterpret_cast<char *>(res_data.data() + res_offset), plus_as_space);\n \n             res_offset += dst_size;\n             res_offsets[i] = res_offset;\n@@ -101,11 +118,14 @@ struct DecodeURLComponentImpl\n \n \n struct NameDecodeURLComponent { static constexpr auto name = \"decodeURLComponent\"; };\n-using FunctionDecodeURLComponent = FunctionStringToString<DecodeURLComponentImpl, NameDecodeURLComponent>;\n+struct NameDecodeURLFormComponent { static constexpr auto name = \"decodeURLFormComponent\"; };\n+using FunctionDecodeURLComponent = FunctionStringToString<DecodeURLComponentImpl<false>, NameDecodeURLComponent>;\n+using FunctionDecodeURLFormComponent = FunctionStringToString<DecodeURLComponentImpl<true>, NameDecodeURLFormComponent>;\n \n void registerFunctionDecodeURLComponent(FunctionFactory & factory)\n {\n     factory.registerFunction<FunctionDecodeURLComponent>();\n+    factory.registerFunction<FunctionDecodeURLFormComponent>();\n }\n \n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00398_url_functions.reference b/tests/queries/0_stateless/00398_url_functions.reference\nindex 9cd18350d78a..e5f89fbea78d 100644\n--- a/tests/queries/0_stateless/00398_url_functions.reference\n+++ b/tests/queries/0_stateless/00398_url_functions.reference\n@@ -45,6 +45,7 @@ com\n /?query=hello world+foo+bar\n /?query=hello world+foo+bar\n /?query=hello world+foo+bar\n+/?query=hello world foo+bar\n \n /a/b/c\n /a/b/c\n@@ -57,6 +58,7 @@ query=hello world+foo+bar\n query=hello world+foo+bar\n query=hello world+foo+bar\n query=hello world+foo+bar\n+query=hello world foo+bar\n ====FRAGMENT====\n \n \n@@ -71,6 +73,7 @@ query=hello world+foo+bar#a=b\n query=hello world+foo+bar#a=b\n query=hello world+foo+bar#a=b\n #a=b\n+query=hello world foo+bar#a=b\n ====CUT TO FIRST SIGNIFICANT SUBDOMAIN====\n example.com\n example.com\ndiff --git a/tests/queries/0_stateless/00398_url_functions.sql b/tests/queries/0_stateless/00398_url_functions.sql\nindex af03a6d487a9..ea71ed226d70 100644\n--- a/tests/queries/0_stateless/00398_url_functions.sql\n+++ b/tests/queries/0_stateless/00398_url_functions.sql\n@@ -49,6 +49,7 @@ SELECT decodeURLComponent(pathFull('//127.0.0.1/?query=hello%20world+foo%2Bbar')\n SELECT decodeURLComponent(pathFull('http://127.0.0.1/?query=hello%20world+foo%2Bbar')) AS Path;\n SELECT decodeURLComponent(materialize(pathFull('http://127.0.0.1/?query=hello%20world+foo%2Bbar'))) AS Path;\n SELECT decodeURLComponent(materialize(pathFull('//127.0.0.1/?query=hello%20world+foo%2Bbar'))) AS Path;\n+SELECT decodeURLFormComponent(materialize(pathFull('//127.0.0.1/?query=hello%20world+foo%2Bbar'))) AS Path;\n SELECT path('http://127.0.0.1') AS Path;\n SELECT path('http://127.0.0.1/a/b/c') AS Path;\n SELECT path('http://127.0.0.1:443/a/b/c') AS Path;\n@@ -62,6 +63,7 @@ SELECT decodeURLComponent(queryString('http://127.0.0.1/?query=hello%20world+foo\n SELECT decodeURLComponent(queryString('http://127.0.0.1:443/?query=hello%20world+foo%2Bbar'));\n SELECT decodeURLComponent(queryString('http://paul@127.0.0.1:443/?query=hello%20world+foo%2Bbar'));\n SELECT decodeURLComponent(queryString('//paul@127.0.0.1:443/?query=hello%20world+foo%2Bbar'));\n+SELECT decodeURLFormComponent(queryString('//paul@127.0.0.1:443/?query=hello%20world+foo%2Bbar'));\n \n SELECT '====FRAGMENT====';\n SELECT decodeURLComponent(fragment('http://127.0.0.1/?query=hello%20world+foo%2Bbar'));\n@@ -78,6 +80,7 @@ SELECT decodeURLComponent(queryStringAndFragment('http://127.0.0.1/?query=hello%\n SELECT decodeURLComponent(queryStringAndFragment('http://paul@127.0.0.1/?query=hello%20world+foo%2Bbar#a=b'));\n SELECT decodeURLComponent(queryStringAndFragment('//paul@127.0.0.1/?query=hello%20world+foo%2Bbar#a=b'));\n SELECT decodeURLComponent(queryStringAndFragment('//paul@127.0.0.1/#a=b'));\n+SELECT decodeURLFormComponent(queryStringAndFragment('//paul@127.0.0.1/?query=hello%20world+foo%2Bbar#a=b'));\n \n SELECT '====CUT TO FIRST SIGNIFICANT SUBDOMAIN====';\n SELECT cutToFirstSignificantSubdomain('http://www.example.com');\n",
  "problem_statement": "[FEATURE REQUEST] implements rfc1866 part 8.2.1 compatible parsing for decodeURLComponent\n**Use case**\r\nJavascript `decodeURIComponent('1%202+3')`\r\nand ClickHouse `decodeURLComponent('1%202+3')`\r\nreturn same result\r\n```\r\n\"1 2+3\"\r\n```\r\nwhich compatible with http://www.faqs.org/rfcs/rfc3986.html\r\n\r\nbut other popular languages also follow http://www.faqs.org/rfcs/rfc1866.html \r\n```\r\n8.2.1. The form-urlencoded Media Type\r\n\r\n   The default encoding for all forms is `application/x-www-form-\r\n   urlencoded'. A form data set is represented in this media type as\r\n   follows:\r\n\r\n        1. The form field names and values are escaped: space\r\n        characters are replaced by `+'\r\n``` \r\nPHP\r\n`<? echo urldecode('1+2%203');?>`\r\nPython\r\n```\r\nimport urllib.parse\r\nprint(urllib.parse.unquote_plus('1+1%201'))\r\n```\r\nGolang\r\n```\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"net/url\"\r\n)\r\nfunc main() {\r\n\tfmt.Println(url.QueryUnescape(\"1+2%203\"))\r\n}\r\n```\r\n\r\nreturn same\r\n\"1 2 3\"\r\nA clear and concise description of what is the intended usage scenario is.\r\n\r\nSolution which I can propose, add second boolean parameter to `decodeURLComponent()`\r\nor implements separately function `decodeXWWWFormURLEncoded`\r\n\r\ncurrent workaround replaceAll(decodeURLComponent(\"1+2%203\"),'+',' ') corrupt data when data already contains \"+\" encoded as \"%xx\" \n",
  "hints_text": "@Slach We can name it `decodeURLFormComponent`.\n@alexey-milovidov yep I think a separate function will better",
  "created_at": "2022-01-07T12:57:02Z"
}