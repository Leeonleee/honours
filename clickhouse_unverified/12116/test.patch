diff --git a/tests/integration/test_dictionaries_depend_on_dictionaries/__init__.py b/tests/integration/test_dictionaries_dependency/__init__.py
similarity index 100%
rename from tests/integration/test_dictionaries_depend_on_dictionaries/__init__.py
rename to tests/integration/test_dictionaries_dependency/__init__.py
diff --git a/tests/integration/test_dictionaries_dependency/configs/disable_lazy_load.xml b/tests/integration/test_dictionaries_dependency/configs/disable_lazy_load.xml
new file mode 100644
index 000000000000..d01f7a0155b6
--- /dev/null
+++ b/tests/integration/test_dictionaries_dependency/configs/disable_lazy_load.xml
@@ -0,0 +1,4 @@
+<yandex>
+    <dictionaries_lazy_load>false</dictionaries_lazy_load>
+</yandex>
+
diff --git a/tests/integration/test_dictionaries_dependency/test.py b/tests/integration/test_dictionaries_dependency/test.py
new file mode 100644
index 000000000000..31c5a6c549a9
--- /dev/null
+++ b/tests/integration/test_dictionaries_dependency/test.py
@@ -0,0 +1,109 @@
+import pytest
+from helpers.cluster import ClickHouseCluster
+
+cluster = ClickHouseCluster(__file__)
+node1 = cluster.add_instance('node1', stay_alive=True)
+node2 = cluster.add_instance('node2', stay_alive=True, main_configs=['configs/disable_lazy_load.xml'])
+nodes = [node1, node2]
+
+
+@pytest.fixture(scope="module", autouse=True)
+def start_cluster():
+    try:
+        cluster.start()
+        for node in nodes:
+            node.query("CREATE DATABASE IF NOT EXISTS test")
+            node.query("CREATE DATABASE IF NOT EXISTS atest")
+            node.query("CREATE DATABASE IF NOT EXISTS ztest")
+            node.query("CREATE TABLE test.source(x UInt64, y UInt64) ENGINE=Log")
+            node.query("INSERT INTO test.source VALUES (5,6)")
+            
+            node.query("CREATE DICTIONARY test.dict(x UInt64, y UInt64) PRIMARY KEY x "\
+                        "SOURCE(CLICKHOUSE(HOST 'localhost' PORT 9000 USER 'default' TABLE 'source' DB 'test')) "\
+                        "LAYOUT(FLAT()) LIFETIME(0)")
+        yield cluster
+
+    finally:
+        cluster.shutdown()
+
+
+@pytest.fixture(autouse=True)
+def cleanup_after_test():
+    try:
+        yield
+    finally:
+        for node in nodes:
+            node.query("DROP DICTIONARY IF EXISTS test.adict")
+            node.query("DROP DICTIONARY IF EXISTS test.zdict")
+            node.query("DROP DICTIONARY IF EXISTS atest.dict")
+            node.query("DROP DICTIONARY IF EXISTS ztest.dict")
+            node.query("DROP TABLE IF EXISTS test.atbl")
+            node.query("DROP TABLE IF EXISTS test.ztbl")
+            node.query("DROP TABLE IF EXISTS atest.tbl")
+            node.query("DROP TABLE IF EXISTS ztest.tbl")
+            node.query("DROP DATABASE IF EXISTS dict_db")
+
+
+@pytest.mark.parametrize("node", nodes)
+def test_dependency_via_implicit_table(node):
+    d_names = ["test.adict", "test.zdict", "atest.dict", "ztest.dict"]
+    for d_name in d_names:
+        node.query("CREATE DICTIONARY {}(x UInt64, y UInt64) PRIMARY KEY x "\
+                   "SOURCE(CLICKHOUSE(HOST 'localhost' PORT 9000 USER 'default' TABLE 'dict' DB 'test')) "\
+                   "LAYOUT(FLAT()) LIFETIME(0)".format(d_name))
+    
+    def check():
+        for d_name in d_names:
+            assert node.query("SELECT dictGet({}, 'y', toUInt64(5))".format(d_name)) == "6
"
+    
+    check()
+
+    # Restart must not break anything.
+    node.restart_clickhouse()
+    check()
+
+
+@pytest.mark.parametrize("node", nodes)
+def test_dependency_via_explicit_table(node):
+    tbl_names = ["test.atbl", "test.ztbl", "atest.tbl", "ztest.tbl"]
+    d_names = ["test.other_{}".format(i) for i in range(0, len(tbl_names))]
+    for i in range(0, len(tbl_names)):
+        tbl_name = tbl_names[i]
+        tbl_database, tbl_shortname = tbl_name.split('.')
+        d_name = d_names[i]
+        node.query("CREATE TABLE {}(x UInt64, y UInt64) ENGINE=Dictionary('test.dict')".format(tbl_name))
+        node.query("CREATE DICTIONARY {}(x UInt64, y UInt64) PRIMARY KEY x "\
+                   "SOURCE(CLICKHOUSE(HOST 'localhost' PORT 9000 USER 'default' TABLE '{}' DB '{}')) "\
+                   "LAYOUT(FLAT()) LIFETIME(0)".format(d_name, tbl_shortname, tbl_database))
+    
+    def check():
+        for d_name in d_names:
+            assert node.query("SELECT dictGet({}, 'y', toUInt64(5))".format(d_name)) == "6
"
+    
+    check()
+
+    # Restart must not break anything.
+    node.restart_clickhouse()
+    check()
+
+
+@pytest.mark.skip(reason="TODO: should be fixed")
+@pytest.mark.parametrize("node", nodes)
+def test_dependency_via_dictionary_database(node):
+    node.query("CREATE DATABASE dict_db ENGINE=Dictionary")
+
+    d_names = ["test.adict", "test.zdict", "atest.dict", "ztest.dict"]
+    for d_name in d_names:
+        node.query("CREATE DICTIONARY {}(x UInt64, y UInt64) PRIMARY KEY x "\
+                   "SOURCE(CLICKHOUSE(HOST 'localhost' PORT 9000 USER 'default' TABLE 'test.dict' DB 'dict_db')) "\
+                   "LAYOUT(FLAT()) LIFETIME(0)".format(d_name))
+    
+    def check():
+        for d_name in d_names:
+            assert node.query("SELECT dictGet({}, 'y', toUInt64(5))".format(d_name)) == "6
"
+    
+    check()
+
+    # Restart must not break anything.
+    node.restart_clickhouse()
+    check()
diff --git a/tests/integration/test_dictionaries_dependency_xml/__init__.py b/tests/integration/test_dictionaries_dependency_xml/__init__.py
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/integration/test_dictionaries_depend_on_dictionaries/configs/config.xml b/tests/integration/test_dictionaries_dependency_xml/configs/config.xml
similarity index 100%
rename from tests/integration/test_dictionaries_depend_on_dictionaries/configs/config.xml
rename to tests/integration/test_dictionaries_dependency_xml/configs/config.xml
diff --git a/tests/integration/test_dictionaries_depend_on_dictionaries/configs/dictionaries/dep_x.xml b/tests/integration/test_dictionaries_dependency_xml/configs/dictionaries/dep_x.xml
similarity index 100%
rename from tests/integration/test_dictionaries_depend_on_dictionaries/configs/dictionaries/dep_x.xml
rename to tests/integration/test_dictionaries_dependency_xml/configs/dictionaries/dep_x.xml
diff --git a/tests/integration/test_dictionaries_depend_on_dictionaries/configs/dictionaries/dep_y.xml b/tests/integration/test_dictionaries_dependency_xml/configs/dictionaries/dep_y.xml
similarity index 100%
rename from tests/integration/test_dictionaries_depend_on_dictionaries/configs/dictionaries/dep_y.xml
rename to tests/integration/test_dictionaries_dependency_xml/configs/dictionaries/dep_y.xml
diff --git a/tests/integration/test_dictionaries_depend_on_dictionaries/configs/dictionaries/dep_z.xml b/tests/integration/test_dictionaries_dependency_xml/configs/dictionaries/dep_z.xml
similarity index 100%
rename from tests/integration/test_dictionaries_depend_on_dictionaries/configs/dictionaries/dep_z.xml
rename to tests/integration/test_dictionaries_dependency_xml/configs/dictionaries/dep_z.xml
diff --git a/tests/integration/test_dictionaries_depend_on_dictionaries/configs/users.xml b/tests/integration/test_dictionaries_dependency_xml/configs/users.xml
similarity index 100%
rename from tests/integration/test_dictionaries_depend_on_dictionaries/configs/users.xml
rename to tests/integration/test_dictionaries_dependency_xml/configs/users.xml
diff --git a/tests/integration/test_dictionaries_depend_on_dictionaries/test.py b/tests/integration/test_dictionaries_dependency_xml/test.py
similarity index 100%
rename from tests/integration/test_dictionaries_depend_on_dictionaries/test.py
rename to tests/integration/test_dictionaries_dependency_xml/test.py
