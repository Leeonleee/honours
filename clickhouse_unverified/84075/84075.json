{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 84075,
  "instance_id": "ClickHouse__ClickHouse-84075",
  "issue_numbers": [
    "81834"
  ],
  "base_commit": "c628514487f907bdfac9a5bcc27bcff5dc80fb52",
  "patch": "diff --git a/src/Interpreters/ActionsVisitor.cpp b/src/Interpreters/ActionsVisitor.cpp\nindex 171586c8a70f..8a58eb892020 100644\n--- a/src/Interpreters/ActionsVisitor.cpp\n+++ b/src/Interpreters/ActionsVisitor.cpp\n@@ -1055,7 +1055,11 @@ void ActionsMatcher::visit(const ASTFunction & node, const ASTPtr & ast, Data &\n             for (const auto & arg : node.arguments->children)\n             {\n                 visit(arg, index_hint_data);\n-                args.push_back({arg->getColumnNameWithoutAlias(), {}});\n+\n+                if (auto name_type = getNameAndTypeFromAST(arg, index_hint_data))\n+                    args.push_back({name_type->name, {}});\n+                else\n+                    throw Exception(ErrorCodes::UNEXPECTED_EXPRESSION, \"Unexpected element in AST inside the indexHint function: {}\", arg->getID());\n             }\n         }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03571_trying_to_get_name_of_not_a_column_asterisk.reference b/tests/queries/0_stateless/03571_trying_to_get_name_of_not_a_column_asterisk.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/03571_trying_to_get_name_of_not_a_column_asterisk.sql b/tests/queries/0_stateless/03571_trying_to_get_name_of_not_a_column_asterisk.sql\nnew file mode 100644\nindex 000000000000..04d4c987b4da\n--- /dev/null\n+++ b/tests/queries/0_stateless/03571_trying_to_get_name_of_not_a_column_asterisk.sql\n@@ -0,0 +1,9 @@\n+DROP TABLE IF EXISTS t0;\n+CREATE TABLE t0 (c0 Int) ENGINE = MergeTree ORDER BY tuple();\n+ALTER TABLE t0 MODIFY COLUMN c0 Int TTL indexHint(*); -- { serverError UNKNOWN_IDENTIFIER }\n+DROP TABLE t0;\n+\n+DROP TABLE IF EXISTS 02577_keepermap_delete_update;\n+CREATE TABLE 02577_keepermap_delete_update (key UInt64, value String, value2 UInt64) PRIMARY KEY(key);\n+DELETE FROM `02577_keepermap_delete_update` WHERE like(indexHint(*, indexHint(indexHint(toNullable(1.), 0, (20 IS NULL) IS NOT NULL, isNull(indexHint(indexHint(indexHint(indexHint(*), *), isZeroOrNull(materialize(indexHint(*, indexHint(toNullable(toInt128(100) IS NULL, 1.), toLowCardinality(0), isNullable(toNullable(20)) IS NULL, indexHint(isZeroOrNull(15), *, indexHint(*)), *), 100), 15))), indexHint(indexHint(isNullable(materialize(15 IS NOT NULL))), 100, *), 1, indexHint(indexHint(1, indexHint(100, *)), *)), toLowCardinality(15)), indexHint(*)), *)), value, 'Some%string'); -- { serverError UNKNOWN_IDENTIFIER }\n+DROP TABLE 02577_keepermap_delete_update;\n",
  "problem_statement": "Logical Error: Trying to get name of not a column: Asterisk\n### Describe the bug\n\nFrom this run: https://s3.amazonaws.com/clickhouse-test-reports/json.html?PR=81707&sha=e48035419022ec3f9c3e220e4cf2d50468c27f6b&name_0=PR&name_1=AST%20fuzzer%20%28amd_tsan%29\n\nSeems not related to https://github.com/ClickHouse/ClickHouse/issues/72537\n\n### How to reproduce\n\nRun Fiddle: https://fiddle.clickhouse.com/d751dd51-61e8-46f9-8fa1-c1496cdcd75c\n\n### Error message and/or stacktrace\n\nStack trace:\n\n```\n<Fatal> : Logical error: 'Trying to get name of not a column: Asterisk'.\n<Fatal> : Stack trace (when copying this message, always include the lines below):\n\n0. contrib/llvm-project/libcxx/include/__exception/exception.h:113: Poco::Exception::Exception(String const&, int) @ 0x000000001d4d28d2\n1. src/Common/Exception.cpp:110: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x0000000011e6f1c6\n2. src/Common/Exception.h:119: DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000ba670ac\n3. src/Common/Exception.h:137: DB::Exception::Exception<String>(int, FormatStringHelperImpl<std::type_identity<String>::type>, String&&) @ 0x000000000ba66d56\n4. src/Parsers/IAST.h:55: DB::IAST::appendColumnNameWithoutAlias(DB::WriteBuffer&) const @ 0x000000001203137a\n5. src/Parsers/IAST.cpp:263: DB::IAST::getColumnNameWithoutAlias() const @ 0x000000001a2c5e37\n6. src/Interpreters/ActionsVisitor.cpp:1058: DB::ActionsMatcher::visit(DB::ASTFunction const&, std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x0000000016f8e70f\n7. src/Interpreters/InDepthNodeVisitor.h:71: DB::InDepthNodeVisitor<DB::ActionsMatcher, true, false, std::shared_ptr<DB::IAST> const>::doVisit(std::shared_ptr<DB::IAST> const&) @ 0x0000000016f828b5\n8. src/Interpreters/InDepthNodeVisitor.h:61: DB::ExpressionAnalyzer::getRootActions(std::shared_ptr<DB::IAST> const&, bool, DB::ActionsDAG&, bool) @ 0x0000000016f697c8\n9. src/Interpreters/ExpressionAnalyzer.cpp:1870: DB::ExpressionAnalyzer::getActionsDAG(bool, bool) @ 0x0000000016f78e16\n10. src/Storages/TTLDescription.cpp:191: DB::buildExpressionAndSets(std::shared_ptr<DB::IAST>&, DB::NamesAndTypesList const&, std::shared_ptr<DB::Context const> const&) @ 0x00000000187b27c7\n11. src/Storages/TTLDescription.cpp:240: DB::TTLDescription::getTTLFromAST(std::shared_ptr<DB::IAST> const&, DB::ColumnsDescription const&, std::shared_ptr<DB::Context const>, DB::KeyDescription const&, bool) @ 0x00000000187b2eff\n12. src/Storages/AlterCommands.cpp:1369: DB::AlterCommands::apply(DB::StorageInMemoryMetadata&, std::shared_ptr<DB::Context const>) const @ 0x000000001844ceb6\n13. src/Storages/MergeTree/MergeTreeData.cpp:3762: DB::MergeTreeData::checkAlterIsPossible(DB::AlterCommands const&, std::shared_ptr<DB::Context const>) const @ 0x0000000018af695b\n14. src/Interpreters/InterpreterAlterQuery.cpp:216: DB::InterpreterAlterQuery::executeToTable(DB::ASTAlterQuery const&) @ 0x0000000016fe4bd7\n15. src/Interpreters/InterpreterAlterQuery.cpp:78: DB::InterpreterAlterQuery::execute() @ 0x0000000016fe28cd\n16. src/Interpreters/executeQuery.cpp:1523: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x0000000017376c97\n17. src/Interpreters/executeQuery.cpp:1715: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x0000000017370ff1\n18. src/Server/TCPHandler.cpp:687: DB::TCPHandler::runImpl() @ 0x00000000190fb846\n19. src/Server/TCPHandler.cpp:2677: DB::TCPHandler::run() @ 0x0000000019114dc4\n20. base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x000000001d577b27\n21. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x000000001d578025\n22. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x000000001d52065f\n23. base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001d51e211\n24. start_thread @ 0x00000000000a2ef1\n25. __clone3 @ 0x000000000013445c\n\n```\n",
  "hints_text": "",
  "created_at": "2025-07-20T04:56:10Z",
  "modified_files": [
    "src/Interpreters/ActionsVisitor.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03571_trying_to_get_name_of_not_a_column_asterisk.sql"
  ]
}