{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 16048,
  "instance_id": "ClickHouse__ClickHouse-16048",
  "issue_numbers": [
    "15732"
  ],
  "base_commit": "6512d84b314616f0ee2ae0e6e9a57af9242c06b9",
  "patch": "diff --git a/src/DataStreams/PushingToViewsBlockOutputStream.cpp b/src/DataStreams/PushingToViewsBlockOutputStream.cpp\nindex 3baa2b30c3fe..1252dd7f4de8 100644\n--- a/src/DataStreams/PushingToViewsBlockOutputStream.cpp\n+++ b/src/DataStreams/PushingToViewsBlockOutputStream.cpp\n@@ -10,6 +10,7 @@\n #include <Common/CurrentThread.h>\n #include <Common/setThreadName.h>\n #include <Common/ThreadPool.h>\n+#include <Common/checkStackSize.h>\n #include <Storages/MergeTree/ReplicatedMergeTreeBlockOutputStream.h>\n #include <Storages/StorageValues.h>\n #include <Storages/LiveView/StorageLiveView.h>\n@@ -29,6 +30,8 @@ PushingToViewsBlockOutputStream::PushingToViewsBlockOutputStream(\n     , context(context_)\n     , query_ptr(query_ptr_)\n {\n+    checkStackSize();\n+\n     /** TODO This is a very important line. At any insertion into the table one of streams should own lock.\n       * Although now any insertion into the table is done via PushingToViewsBlockOutputStream,\n       *  but it's clear that here is not the best place for this functionality.\ndiff --git a/src/Storages/StorageMaterializedView.cpp b/src/Storages/StorageMaterializedView.cpp\nindex 3e1df80ff421..dcf7105d7286 100644\n--- a/src/Storages/StorageMaterializedView.cpp\n+++ b/src/Storages/StorageMaterializedView.cpp\n@@ -21,6 +21,7 @@\n #include <Storages/SelectQueryDescription.h>\n \n #include <Common/typeid_cast.h>\n+#include <Common/checkStackSize.h>\n #include <Processors/Sources/SourceFromInputStream.h>\n \n \n@@ -29,6 +30,7 @@ namespace DB\n \n namespace ErrorCodes\n {\n+    extern const int BAD_ARGUMENTS;\n     extern const int NOT_IMPLEMENTED;\n     extern const int INCORRECT_QUERY;\n     extern const int QUERY_IS_NOT_SUPPORTED_IN_MATERIALIZED_VIEW;\n@@ -71,7 +73,11 @@ StorageMaterializedView::StorageMaterializedView(\n     setInMemoryMetadata(storage_metadata);\n \n     if (!has_inner_table)\n+    {\n+        if (query.to_table_id.database_name == table_id_.database_name && query.to_table_id.table_name == table_id_.table_name)\n+            throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Materialized view {} cannot point to itself\", table_id_.getFullTableName());\n         target_table_id = query.to_table_id;\n+    }\n     else if (attach_)\n     {\n         /// If there is an ATTACH request, then the internal table must already be created.\n@@ -319,11 +325,13 @@ void StorageMaterializedView::shutdown()\n \n StoragePtr StorageMaterializedView::getTargetTable() const\n {\n+    checkStackSize();\n     return DatabaseCatalog::instance().getTable(target_table_id, global_context);\n }\n \n StoragePtr StorageMaterializedView::tryGetTargetTable() const\n {\n+    checkStackSize();\n     return DatabaseCatalog::instance().tryGetTable(target_table_id, global_context);\n }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01527_materialized_view_stack_overflow.reference b/tests/queries/0_stateless/01527_materialized_view_stack_overflow.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/01527_materialized_view_stack_overflow.sql b/tests/queries/0_stateless/01527_materialized_view_stack_overflow.sql\nnew file mode 100644\nindex 000000000000..4a67ef4b2d84\n--- /dev/null\n+++ b/tests/queries/0_stateless/01527_materialized_view_stack_overflow.sql\n@@ -0,0 +1,28 @@\n+DROP TABLE IF EXISTS t;\n+DROP TABLE IF EXISTS v;\n+\n+CREATE TABLE t (c String) ENGINE = Memory;\n+\n+CREATE MATERIALIZED VIEW v to v AS SELECT c FROM t; -- { serverError 36 }\n+CREATE MATERIALIZED VIEW v to t AS SELECT * FROM v; -- { serverError 60 }\n+\n+DROP TABLE IF EXISTS t1;\n+DROP TABLE IF EXISTS t2;\n+DROP TABLE IF EXISTS v1;\n+DROP TABLE IF EXISTS v2;\n+\n+CREATE TABLE t1 (c String) ENGINE = Memory;\n+CREATE TABLE t2 (c String) ENGINE = Memory;\n+\n+CREATE MATERIALIZED VIEW v1 to t1 AS SELECT * FROM t2;\n+CREATE MATERIALIZED VIEW v2 to t2 AS SELECT * FROM t1;\n+\n+INSERT INTO t1 VALUES ('Hello'); -- { serverError 306 }\n+INSERT INTO t2 VALUES ('World'); -- { serverError 306 }\n+\n+DROP TABLE IF EXISTS t;\n+DROP TABLE IF EXISTS v;\n+DROP TABLE IF EXISTS t1;\n+DROP TABLE IF EXISTS t2;\n+DROP TABLE IF EXISTS v1;\n+DROP TABLE IF EXISTS v2;\n",
  "problem_statement": "Crash when use the same name for materialized view and TO table\nClickhouse crashes, when you specify the same name for materialized view and TO table.\r\n\r\n**How to reproduce**\r\n* version 20.9.2.20 (official build)\r\n\r\nCREATE TABLE table1( Col1 String )\r\nENGINE = MergeTree()\r\nORDER BY Col1;\r\n\r\nCREATE MATERIALIZED VIEW view1 to view1\r\nAS SELECT DISTINCT Col1 FROM table1;\r\n\r\nselect name, engine, total_rows, data_paths from system.tables;\r\n\r\n[osboxes] 2020.10.07 15:57:21.185817 [ 64414 ] {ad0193e0-ae82-40f3-b773-3091737e3d16} <Debug> executeQuery: (from 192.168.1.178:64108) select name, engine, total_rows, data_paths from system.tables;\r\nError on processing query: select name, engine, total_rows, data_paths from system.tables;\r\nCode: 32, e.displayText() = DB::Exception: Attempt to read after eof: while receiving packet from 192.168.1.144:9000, Stack trace (when copying this message, always include the lines below):\r\n\r\n0. Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x18e02790 in /usr/bin/clickhouse\r\n1. DB::throwReadAfterEOF() @ 0xe734291 in /usr/bin/clickhouse\r\n2. DB::readVarUInt(unsigned long&, DB::ReadBuffer&) @ 0xe931034 in /usr/bin/clickhouse\r\n3. DB::Connection::receivePacket() @ 0x16432957 in /usr/bin/clickhouse\r\n4. DB::Client::receiveAndProcessPacket(bool) @ 0xe8319c8 in /usr/bin/clickhouse\r\n5. DB::Client::receiveResult() @ 0xe833255 in /usr/bin/clickhouse\r\n6. DB::Client::processParsedSingleQuery() @ 0xe833b1d in /usr/bin/clickhouse\r\n7. DB::Client::processMultiQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) @ 0xe83636c in /usr/bin/clickhouse\r\n8. DB::Client::mainImpl() @ 0xe838b18 in /usr/bin/clickhouse\r\n9. DB::Client::main(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xe83a7da in /usr/bin/clickhouse\r\n10. Poco::Util::Application::run() @ 0x18d31827 in /usr/bin/clickhouse\r\n11. mainEntryClickHouseClient(int, char**) @ 0xe8028c9 in /usr/bin/clickhouse\r\n12. main @ 0xe71a891 in /usr/bin/clickhouse\r\n13. __libc_start_main @ 0x21b97 in /lib/x86_64-linux-gnu/libc-2.27.so\r\n14. _start @ 0xe71a02e in /usr/bin/clickhouse\r\n (version 20.9.2.20 (official build))\r\n\r\n\r\n**Expected behavior**\r\nI think the better solution is to forbid using the same names for materialized view and TO table\r\n\n",
  "hints_text": "",
  "created_at": "2020-10-16T00:46:15Z"
}