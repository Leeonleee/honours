{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 74577,
  "instance_id": "ClickHouse__ClickHouse-74577",
  "issue_numbers": [
    "73930",
    "66465"
  ],
  "base_commit": "c46bb0660cb105e03024801cadb052ab6c835f32",
  "patch": "diff --git a/src/Analyzer/Passes/RemoveUnusedProjectionColumnsPass.cpp b/src/Analyzer/Passes/RemoveUnusedProjectionColumnsPass.cpp\nindex 78228f8f4725..182ba1a0d2be 100644\n--- a/src/Analyzer/Passes/RemoveUnusedProjectionColumnsPass.cpp\n+++ b/src/Analyzer/Passes/RemoveUnusedProjectionColumnsPass.cpp\n@@ -154,6 +154,40 @@ void RemoveUnusedProjectionColumnsPass::run(QueryTreeNodePtr & query_tree_node,\n                 if (query_node->isDistinct())\n                     continue;\n             }\n+            else\n+            {\n+                auto * union_node = query_or_union_node->as<UnionNode>();\n+                chassert(union_node != nullptr);\n+\n+                /// We can't remove unused projections in the case of EXCEPT and INTERSECT\n+                /// because it can lead to incorrect query results. Example:\n+                ///\n+                /// SELECT count()\n+                /// FROM\n+                /// (\n+                ///     SELECT\n+                ///         1 AS a,\n+                ///         2 AS b\n+                ///     INTERSECT ALL\n+                ///     SELECT\n+                ///         1,\n+                ///         1\n+                /// )\n+                ///\n+                /// Will be transformed into the following query with output 1 instead of 0:\n+                ///\n+                /// SELECT count()\n+                /// FROM\n+                /// (\n+                ///     SELECT\n+                ///         1 AS a, -- we must keep at least 1 column\n+                ///     INTERSECT ALL\n+                ///     SELECT\n+                ///         1\n+                /// );\n+                if (union_node->getUnionMode() > SelectUnionMode::UNION_DISTINCT)\n+                    continue;\n+            }\n \n             auto used_projection_indexes = convertUsedColumnNamesToUsedProjectionIndexes(query_or_union_node, used_columns);\n             updateUsedProjectionIndexes(query_or_union_node, used_projection_indexes);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03312_analyzer_unused_projection_fix.reference b/tests/queries/0_stateless/03312_analyzer_unused_projection_fix.reference\nnew file mode 100644\nindex 000000000000..28195eae8962\n--- /dev/null\n+++ b/tests/queries/0_stateless/03312_analyzer_unused_projection_fix.reference\n@@ -0,0 +1,4 @@\n+0\n+1\n+1\t1\t2\n+1\t1\ndiff --git a/tests/queries/0_stateless/03312_analyzer_unused_projection_fix.sql b/tests/queries/0_stateless/03312_analyzer_unused_projection_fix.sql\nnew file mode 100644\nindex 000000000000..9cd88b4cba4b\n--- /dev/null\n+++ b/tests/queries/0_stateless/03312_analyzer_unused_projection_fix.sql\n@@ -0,0 +1,39 @@\n+SELECT count()\n+FROM\n+(\n+    SELECT\n+        1 AS a,\n+        2 AS b\n+    INTERSECT ALL\n+    SELECT\n+        1,\n+        1\n+);\n+\n+SELECT count()\n+FROM\n+(\n+    SELECT\n+        1 AS a,\n+        2 AS b\n+    EXCEPT ALL\n+    SELECT\n+        1,\n+        1\n+);\n+\n+-- THE RESULT CTE RETURNS 1 ROW WITH ALL COLUMN VALUES NULL. WHICH IS SUPPOSED TO BE THE EXPECTED BEHAVIOUR\n+WITH T1 AS (SELECT 1 A, 1 B UNION ALL SELECT 1 A, 1 B), \n+T2 AS (SELECT 1 A, 1 B),\n+T1_WITH_ROWNUM AS (SELECT A, B, ROW_NUMBER() OVER (PARTITION BY A, B ORDER BY A, B) RNK FROM T1),\n+T2_WITH_ROWNUM AS (SELECT A, B, ROW_NUMBER() OVER (PARTITION BY A, B ORDER BY A, B) RNK FROM T2),\n+RESULT AS (SELECT * FROM T1_WITH_ROWNUM EXCEPT SELECT * FROM T2_WITH_ROWNUM)\n+SELECT * FROM RESULT;\n+\n+-- HOWEVER UPON EXPLICITLY USING COLUMN NAMES RATHER THAN *,  NO RESULTS IN THE OUTPUT\n+WITH T1 AS (SELECT 1 A, 1 B UNION ALL SELECT 1 A, 1 B), \n+T2 AS (SELECT 1 A, 1 B),\n+T1_WITH_ROWNUM AS (SELECT A, B, ROW_NUMBER() OVER (PARTITION BY A, B ORDER BY A, B) RNK FROM T1),\n+T2_WITH_ROWNUM AS (SELECT A, B, ROW_NUMBER() OVER (PARTITION BY A, B ORDER BY A, B) RNK FROM T2),\n+RESULT AS (SELECT * FROM T1_WITH_ROWNUM EXCEPT SELECT * FROM T2_WITH_ROWNUM)\n+SELECT A,B FROM RESULT;\n",
  "problem_statement": "Analyzer: EXCEPT clause ignores unused projections in subqueries.\n> Please make sure that the version you're using is still supported (you can find the list [here](https://github.com/ClickHouse/ClickHouse/blob/master/SECURITY.md#scope-and-supported-versions)).\r\n\r\n> You have to provide the following information whenever possible.\r\n\r\n**Company or project name**\r\n\r\n> study\r\n\r\n**Describe what's wrong**\r\n\r\n> count() return 0 when the result has some rows when `except` is used.\r\n\r\n> A link to reproducer in [https://fiddle.clickhouse.com/](https://fiddle.clickhouse.com/).\r\n[https://fiddle.clickhouse.com/9f186eb5-b8a3-460d-9bbb-7424275bc16f](https://fiddle.clickhouse.com/9f186eb5-b8a3-460d-9bbb-7424275bc16f)\r\n**Does it reproduce on the most recent release?**\r\n\r\n[The list of releases](https://github.com/ClickHouse/ClickHouse/blob/master/utils/list-versions/version_date.tsv)\r\nyes, in ClickHouse local version 24.12.1.1417 (official build)\r\n**Enable crash reporting**\r\n\r\n> Change \"enabled\" to true in \"send_crash_reports\" section in `config.xml`:\r\n```\r\n<send_crash_reports>\r\n        <!-- Changing <enabled> to true allows sending crash reports to -->\r\n        <!-- the ClickHouse core developers team via Sentry https://sentry.io -->\r\n        <enabled>false</enabled>\r\n```\r\n\r\n**How to reproduce**\r\n\r\n* Which ClickHouse server version to use   24.12.1.1417\r\n* Which interface to use, if it matters\r\n* Non-default settings, if any\r\n* `CREATE TABLE` statements for all tables involved\r\n* Sample data for all these tables, use [clickhouse-obfuscator](https://github.com/ClickHouse/ClickHouse/blob/master/programs/obfuscator/Obfuscator.cpp#L42-L80) if necessary\r\n* Queries to run that lead to an unexpected result\r\n`select count(a)from(select 1 a,2 b union all select 1,1 except select 1,2);`\r\n**Expected behavior**\r\n\r\n> count() return 1.\r\n\r\n**Error message and/or stacktrace**\r\n\r\n> If applicable, add screenshots to help explain your problem.\r\n\r\n**Additional context**\r\n\r\n> Add any other context about the problem here.\r\n\nselecting columns explectInvalid results returned when using explicit columns names instead of * in SELECT query with NULL rows\nversion used \r\n```sql\r\nSELECT version(); -- 24.5.3.5\r\n```\r\n\r\nUse case : \r\nTrying to replicate the **EXCEPT ALL** logic supported by some other DBs like Postgres\r\nRemoving intersecting rows (without deleting more rows than that exists in the other table)\r\n```sql\r\n-- THE RESULT CTE RETURNS 1 ROW WITH ALL COLUMN VALUES NULL. WHICH IS SUPPOSED TO BE THE EXPECTED BEHAVIOUR\r\nWITH T1 AS (SELECT 1 A, 1 B UNION ALL SELECT 1 A, 1 B), \r\nT2 AS (SELECT 1 A, 1 B),\r\nT1_WITH_ROWNUM AS (SELECT A, B, ROW_NUMBER() OVER (PARTITION BY A, B ORDER BY A, B) RNK FROM T1),\r\nT2_WITH_ROWNUM AS (SELECT A, B, ROW_NUMBER() OVER (PARTITION BY A, B ORDER BY A, B) RNK FROM T2),\r\nRESULT AS (SELECT * FROM T1_WITH_ROWNUM EXCEPT SELECT * FROM T2_WITH_ROWNUM)\r\nSELECT * FROM RESULT; -- RETURNS 1 RESULT\r\n\r\n  A   B   RNK  \r\n --- --- ----- \r\n  1   1   2    \r\n```\r\n```sql\r\n-- HOWEVER UPON EXPLICITLY USING COLUMN NAMES RATHER THAN *,  NO RESULTS IN THE OUTPUT\r\nWITH T1 AS (SELECT 1 A, 1 B UNION ALL SELECT 1 A, 1 B), \r\nT2 AS (SELECT 1 A, 1 B),\r\nT1_WITH_ROWNUM AS (SELECT A, B, ROW_NUMBER() OVER (PARTITION BY A, B ORDER BY A, B) RNK FROM T1),\r\nT2_WITH_ROWNUM AS (SELECT A, B, ROW_NUMBER() OVER (PARTITION BY A, B ORDER BY A, B) RNK FROM T2),\r\nRESULT AS (SELECT * FROM T1_WITH_ROWNUM EXCEPT SELECT * FROM T2_WITH_ROWNUM)\r\nSELECT A,B FROM RESULT; -- RETURNS NO RESULT\r\n-- RETURNS NO RESULT\r\n\r\n-- EXPECTED RESULTED TO BE \r\n  A   B  \r\n --- --- \r\n  1   1  \r\n\r\n```\n",
  "hints_text": "Only with the analyzer. It seems the projection of the subquery is broken:\r\n\r\n```\r\nSELECT *\r\nFROM\r\n(\r\n    SELECT\r\n        1 AS a,\r\n        2 AS b\r\n    UNION ALL\r\n    SELECT\r\n        1,\r\n        1\r\n    EXCEPT\r\n    SELECT\r\n        1,\r\n        2\r\n)\r\n\r\nQuery id: 1200a288-5b77-4579-9700-1713a32fa62e\r\n\r\n   \u250c\u2500a\u2500\u252c\u2500b\u2500\u2510\r\n1. \u2502 1 \u2502 1 \u2502\r\n   \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.001 sec. \r\n\r\n:) select a from(select 1 a,2 b union all select 1,1 except select 1,2);\r\n\r\nSELECT a\r\nFROM\r\n(\r\n    SELECT\r\n        1 AS a,\r\n        2 AS b\r\n    UNION ALL\r\n    SELECT\r\n        1,\r\n        1\r\n    EXCEPT\r\n    SELECT\r\n        1,\r\n        2\r\n)\r\n\r\nQuery id: 0cc50f7d-1f48-4539-9424-4bff68c0906c\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.001 sec. \r\n```\nIt's likely related to `RemoveUnusedProjectionColumnsPass`. We can't remove unused projections in the presence of `EXCEPT`.\r\n\r\nTBH, I think I've already seen a similar issue, it's probably a duplicate. Need to check it.\nIt's a duplicate of #66465\nA workaround is `set allow_experimental_analyzer=0;`\r\nhttps://fiddle.clickhouse.com/19ae3540-a90d-4d51-aae3-181219305d8a",
  "created_at": "2025-01-14T17:18:09Z",
  "modified_files": [
    "src/Analyzer/Passes/RemoveUnusedProjectionColumnsPass.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03312_analyzer_unused_projection_fix.reference",
    "b/tests/queries/0_stateless/03312_analyzer_unused_projection_fix.sql"
  ]
}