{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 24316,
  "instance_id": "ClickHouse__ClickHouse-24316",
  "issue_numbers": [
    "23504"
  ],
  "base_commit": "56871aafec906e913c228af9a7e951cab553f5c4",
  "patch": "diff --git a/src/Common/isLocalAddress.cpp b/src/Common/isLocalAddress.cpp\nindex 4167a24ab219..9e22c58f94c0 100644\n--- a/src/Common/isLocalAddress.cpp\n+++ b/src/Common/isLocalAddress.cpp\n@@ -81,10 +81,41 @@ struct NetworkInterfaces\n \n bool isLocalAddress(const Poco::Net::IPAddress & address)\n {\n+    /** 127.0.0.1 is treat as local address unconditionally.\n+      * ::1 is also treat as local address unconditionally.\n+      *\n+      * 127.0.0.{2..255} are not treat as local addresses, because they are used in tests\n+      *  to emulate distributed queries across localhost.\n+      *\n+      * But 127.{0,1}.{0,1}.{0,1} are treat as local addresses,\n+      *  because they are used in Debian for localhost.\n+      */\n+    if (address.isLoopback())\n+    {\n+        if (address.family() == Poco::Net::AddressFamily::IPv4)\n+        {\n+            /// The address is located in memory in big endian form (network byte order).\n+            const unsigned char * digits = static_cast<const unsigned char *>(address.addr());\n+\n+            if (digits[0] == 127\n+                && digits[1] <= 1\n+                && digits[2] <= 1\n+                && digits[3] <= 1)\n+            {\n+                return true;\n+            }\n+        }\n+        else if (address.family() == Poco::Net::AddressFamily::IPv6)\n+        {\n+            return true;\n+        }\n+    }\n+\n     NetworkInterfaces interfaces;\n     return interfaces.hasAddress(address);\n }\n \n+\n bool isLocalAddress(const Poco::Net::SocketAddress & address, UInt16 clickhouse_port)\n {\n     return clickhouse_port == address.port() && isLocalAddress(address.host());\n",
  "test_patch": "diff --git a/src/Common/tests/gtest_local_address.cpp b/src/Common/tests/gtest_local_address.cpp\nindex 504fba197133..7f1d2dfc1a7a 100644\n--- a/src/Common/tests/gtest_local_address.cpp\n+++ b/src/Common/tests/gtest_local_address.cpp\n@@ -11,9 +11,30 @@ TEST(LocalAddress, SmokeTest)\n     std::string address_str;\n     DB::readString(address_str, cmd->out);\n     cmd->wait();\n-    std::cerr << \"Got Address:\" << address_str << std::endl;\n+    std::cerr << \"Got Address: \" << address_str << std::endl;\n \n     Poco::Net::IPAddress address(address_str);\n \n     EXPECT_TRUE(DB::isLocalAddress(address));\n }\n+\n+TEST(LocalAddress, Localhost)\n+{\n+    EXPECT_TRUE(DB::isLocalAddress(Poco::Net::IPAddress{\"127.0.0.1\"}));\n+    EXPECT_TRUE(DB::isLocalAddress(Poco::Net::IPAddress{\"127.0.1.1\"}));\n+    EXPECT_TRUE(DB::isLocalAddress(Poco::Net::IPAddress{\"127.1.1.1\"}));\n+    EXPECT_TRUE(DB::isLocalAddress(Poco::Net::IPAddress{\"127.1.0.1\"}));\n+    EXPECT_TRUE(DB::isLocalAddress(Poco::Net::IPAddress{\"127.1.0.0\"}));\n+    EXPECT_TRUE(DB::isLocalAddress(Poco::Net::IPAddress{\"::1\"}));\n+\n+    /// Make sure we don't mess with the byte order.\n+    EXPECT_FALSE(DB::isLocalAddress(Poco::Net::IPAddress{\"1.0.0.127\"}));\n+    EXPECT_FALSE(DB::isLocalAddress(Poco::Net::IPAddress{\"1.1.1.127\"}));\n+\n+    EXPECT_FALSE(DB::isLocalAddress(Poco::Net::IPAddress{\"0.0.0.0\"}));\n+    EXPECT_FALSE(DB::isLocalAddress(Poco::Net::IPAddress{\"::\"}));\n+    EXPECT_FALSE(DB::isLocalAddress(Poco::Net::IPAddress{\"::2\"}));\n+\n+    /// See the comment in the implementation of isLocalAddress.\n+    EXPECT_FALSE(DB::isLocalAddress(Poco::Net::IPAddress{\"127.0.0.2\"}));\n+}\n",
  "problem_statement": "Make is_local recognize loopback addresses 127.0.1.1\n127.0.1.1 is used in ubuntu / debian by default in /etc/hosts for fqdn.\r\n\r\nDue to the fact that address don't literally match the address of network interface isLocal fails to detect that address as local.\r\n\r\nSee\r\nhttps://www.debian.org/doc/manuals/debian-reference/ch05.en.html#_the_hostname_resolution\r\nhttps://serverfault.com/questions/363095/why-does-my-hostname-appear-with-the-address-127-0-1-1-rather-than-127-0-0-1-in\r\n\r\nhttps://github.com/ClickHouse/ClickHouse/blob/51ba12c2c3106d9277bbc223adfe41fdb3e45439/src/Common/isLocalAddress.cpp#L13\r\n\n",
  "hints_text": "Seems related to https://github.com/ClickHouse/ClickHouse/issues/9101 \nWhy it's needed in production use cases?\r\n\r\nWe use 127.0.0.{2..} in tests to distinguish these addresses from 127.0.0.1 and to check more cases.\r\nSo, if we will treat these addresses as local, our tests will cover less code paths.\n> Why it's needed in production use cases?\r\n\r\nReason is very simple. When you configure fqdn during ubuntu / debian installation (debian-installer-launcher)it adds a line \r\n```\r\n127.0.1.1 myclickhouse1.host.name.com\r\n```\r\nto /etc/hosts (motivation is explained [here](https://lists.debian.org/debian-devel/2013/08/msg00095.html) and [here](https://serverfault.com/questions/363095/why-does-my-hostname-appear-with-the-address-127-0-1-1-rather-than-127-0-0-1-in) )\r\n\r\nand later when you use `myclickhouse1.host.name.com` in `<remote_servers>` section, it is resolved to `127.0.1.1`, and not recognized by clickhouse as local address. \r\n\r\nSince that configuration is default for ubuntu / debian, i think clickhouse should be ready for that.\r\n\r\n> We use 127.0.0.{2..} in tests to distinguish these addresses from 127.0.0.1 and to check more cases.\r\n> So, if we will treat these addresses as local, our tests will cover less code paths.\r\n\r\nI guess we can add a setting for tests, something like \r\n```\r\n<consider_all_loopback_addresses_local>0</consider_all_loopback_addresses_local>\r\n```\r\n\n> I guess we can add a setting\r\n\r\nAdding a setting is too much.\n> > I guess we can add a setting\r\n> \r\n> Adding a setting is too much.\r\n\r\nAny better options if we want to have one behaviour for production usage, and another for tests ?  (the setting can also live in remote_servers). \n@filimonov ClickHouse works correctly regardless.\r\nWe can simply avoid implementing this feature.\r\n\r\nAnd you will not often use the generated FQDN in configuration of your cluster.\r\n\r\nFor example, I have `127.0.1.1 github-explorer.ru-central1.internal github-explorer` on one of the machines, but the .internal address has no use in ClickHouse cluster configuration.\n> @filimonov ClickHouse works correctly regardless\r\n\r\nIt's not:\r\n1. on cluster DDL have issues with recognizing itself and queries hang. See https://github.com/ClickHouse/ClickHouse/issues/18341 \r\n2. Prefer localhost replica don't work\nIt's better to avoid implementation of this feature.\nUnless you will show that there is popular scenario where this feature will make significant benefits.\nWell the problem is that for users which made a 'canonical setup' of Ubuntu / debian clickhouse can't work properly. And debugging the problem is not straight-forward. \r\n\r\nWe should either support that default configuration, either warn user (for example during server start) that we don't support that. Second option is bit worse but acceptable. \n> made a 'canonical setup' of Ubuntu / debian clickhouse can't work properly\r\n\r\nWhat is the issue? What is working in a wrong way?\nSuppose the host is named `myhost` and it is resolved to `127.0.1.1`.\r\nWhy exactly we need to treat `myhost` as local? What is the scenario?\r\nWhy the user will write `myhost` in some configuration or queries?\r\nIf we don't treat it as local, I assume that everything will work correctly.\n> and later when you use myclickhouse1.host.name.com in <remote_servers> section, it is resolved to 127.0.1.1, and not recognized by clickhouse as local address.\r\n\r\nBut everything should will work correctly regardless if we apply or don't apply localhost optimization.\n> on cluster DDL have issues with recognizing itself and queries hang. See #18341\r\n\r\nWe should rewrite the logic of ON CLUSTER queries to use host UUIDs or database UUIDs instead of IP addresses.\nI said before - there are 2 main issues.\r\n1) distributed ddl not working (it sees the task for `myclickhouse1.host.name.com` but it's resolved to 127.0.1.1 and which is 'not local') \r\n2) prefer localhost replica for distributed tables don't work (it thinks all nodes remote) \r\n\r\nYes, alternative are also possible - just get rid of isLocalAddress in most of contextes. ",
  "created_at": "2021-05-20T03:26:21Z"
}