diff --git a/programs/client/Client.cpp b/programs/client/Client.cpp
index 9c1c8338321c..a50538f01011 100644
--- a/programs/client/Client.cpp
+++ b/programs/client/Client.cpp
@@ -301,26 +301,9 @@ class Client : public Poco::Util::Application
         }
         catch (const Exception & e)
         {
-            bool print_stack_trace = config().getBool("stacktrace", false);
-
-            std::string text = e.displayText();
-
-            /** If exception is received from server, then stack trace is embedded in message.
-              * If exception is thrown on client, then stack trace is in separate field.
-              */
+            bool print_stack_trace = config().getBool("stacktrace", false) && e.code() != ErrorCodes::NETWORK_ERROR;
 
-            auto embedded_stack_trace_pos = text.find("Stack trace");
-            if (std::string::npos != embedded_stack_trace_pos && !print_stack_trace)
-                text.resize(embedded_stack_trace_pos);
-
-            std::cerr << "Code: " << e.code() << ". " << text << std::endl << std::endl;
-
-            /// Don't print the stack trace on the client if it was logged on the server.
-            /// Also don't print the stack trace in case of network errors.
-            if (print_stack_trace && e.code() != ErrorCodes::NETWORK_ERROR && std::string::npos == embedded_stack_trace_pos)
-            {
-                std::cerr << "Stack trace:" << std::endl << e.getStackTraceString();
-            }
+            std::cerr << getExceptionMessage(e, print_stack_trace, true) << std::endl << std::endl;
 
             /// If exception code isn't zero, we should return non-zero return code anyway.
             return e.code() ? e.code() : -1;
@@ -633,17 +616,10 @@ class Client : public Poco::Util::Application
                 }
                 catch (const Exception & e)
                 {
-                    // We don't need to handle the test hints in the interactive
-                    // mode.
-                    std::cerr << std::endl
-                              << "Exception on client:" << std::endl
-                              << "Code: " << e.code() << ". " << e.displayText() << std::endl;
-
-                    if (config().getBool("stacktrace", false))
-                        std::cerr << "Stack trace:" << std::endl << e.getStackTraceString() << std::endl;
-
-                    std::cerr << std::endl;
+                    /// We don't need to handle the test hints in the interactive mode.
 
+                    bool print_stack_trace = config().getBool("stacktrace", false);
+                    std::cerr << "Exception on client:" << std::endl << getExceptionMessage(e, print_stack_trace, true) << std::endl << std::endl;
                     client_exception = std::make_unique<Exception>(e);
                 }
 
@@ -940,18 +916,11 @@ class Client : public Poco::Util::Application
     {
         if (server_exception)
         {
-            std::string text = server_exception->displayText();
-            auto embedded_stack_trace_pos = text.find("Stack trace");
-            if (std::string::npos != embedded_stack_trace_pos && !config().getBool("stacktrace", false))
-            {
-                text.resize(embedded_stack_trace_pos);
-            }
+            bool print_stack_trace = config().getBool("stacktrace", false);
             std::cerr << "Received exception from server (version " << server_version << "):" << std::endl
-                      << "Code: " << server_exception->code() << ". " << text << std::endl;
+                << getExceptionMessage(*server_exception, print_stack_trace, true) << std::endl;
             if (is_interactive)
-            {
                 std::cerr << std::endl;
-            }
         }
 
         if (client_exception)
@@ -1410,8 +1379,7 @@ class Client : public Poco::Util::Application
                 {
                     // Just report it, we'll terminate below.
                     fmt::print(stderr,
-                        "Error while reconnecting to the server: Code: {}: {}
",
-                        getCurrentExceptionCode(),
+                        "Error while reconnecting to the server: {}
",
                         getCurrentExceptionMessage(true));
 
                     assert(!connection->isConnected());
@@ -2596,8 +2564,7 @@ class Client : public Poco::Util::Application
             }
             catch (const Exception & e)
             {
-                std::string text = e.displayText();
-                std::cerr << "Code: " << e.code() << ". " << text << std::endl;
+                std::cerr << getExceptionMessage(e, false) << std::endl;
                 std::cerr << "Table â„–" << i << std::endl << std::endl;
                 /// Avoid the case when error exit code can possibly overflow to normal (zero).
                 auto exit_code = e.code() % 256;
@@ -2740,8 +2707,7 @@ int mainEntryClickHouseClient(int argc, char ** argv)
     }
     catch (const DB::Exception & e)
     {
-        std::string text = e.displayText();
-        std::cerr << "Code: " << e.code() << ". " << text << std::endl;
+        std::cerr << DB::getExceptionMessage(e, false) << std::endl;
         return 1;
     }
     catch (...)
diff --git a/src/Common/Exception.cpp b/src/Common/Exception.cpp
index e98cd3c30464..641f8bbe0f0e 100644
--- a/src/Common/Exception.cpp
+++ b/src/Common/Exception.cpp
@@ -313,7 +313,7 @@ std::string getCurrentExceptionMessage(bool with_stacktrace, bool check_embedded
         try
         {
             stream << "Poco::Exception. Code: " << ErrorCodes::POCO_EXCEPTION << ", e.code() = " << e.code()
-                << ", e.displayText() = " << e.displayText()
+                << ", " << e.displayText()
                 << (with_stacktrace ? ", Stack trace (when copying this message, always include the lines below):

" + getExceptionStackTraceString(e) : "")
                 << (with_extra_info ? getExtraExceptionInfo(e) : "")
                 << " (version " << VERSION_STRING << VERSION_OFFICIAL << ")";
@@ -433,7 +433,12 @@ std::string getExceptionMessage(const Exception & e, bool with_stacktrace, bool
             }
         }
 
-        stream << "Code: " << e.code() << ", e.displayText() = " << text;
+        stream << "Code: " << e.code() << ". " << text;
+
+        if (!text.empty() && text.back() != '.')
+            stream << '.';
+
+        stream << " (" << ErrorCodes::getName(e.code()) << ")";
 
         if (with_stacktrace && !has_embedded_stack_trace)
             stream << ", Stack trace (when copying this message, always include the lines below):

" << e.getStackTraceString();
diff --git a/src/Server/GRPCServer.cpp b/src/Server/GRPCServer.cpp
index 82e5ed4d0db1..1f776ddb6bc1 100644
--- a/src/Server/GRPCServer.cpp
+++ b/src/Server/GRPCServer.cpp
@@ -1150,7 +1150,7 @@ namespace
     {
         io.onException();
 
-        LOG_ERROR(log, "Code: {}, e.displayText() = {}, Stack trace:

{}", exception.code(), exception.displayText(), exception.getStackTraceString());
+        LOG_ERROR(log, getExceptionMessage(exception, true));
 
         if (responder && !responder_finished)
         {
diff --git a/src/Server/TCPHandler.cpp b/src/Server/TCPHandler.cpp
index 108b7b8070a0..c63196208990 100644
--- a/src/Server/TCPHandler.cpp
+++ b/src/Server/TCPHandler.cpp
@@ -149,7 +149,7 @@ void TCPHandler::runImpl()
         if (!DatabaseCatalog::instance().isDatabaseExist(default_database))
         {
             Exception e("Database " + backQuote(default_database) + " doesn't exist", ErrorCodes::UNKNOWN_DATABASE);
-            LOG_ERROR(log, "Code: {}, e.displayText() = {}, Stack trace:

{}", e.code(), e.displayText(), e.getStackTraceString());
+            LOG_ERROR(log, getExceptionMessage(e, true));
             sendException(e, connection_context->getSettingsRef().calculate_text_stack_trace);
             return;
         }
@@ -422,7 +422,7 @@ void TCPHandler::runImpl()
                 }
 
                 const auto & e = *exception;
-                LOG_ERROR(log, "Code: {}, e.displayText() = {}, Stack trace:

{}", e.code(), e.displayText(), e.getStackTraceString());
+                LOG_ERROR(log, getExceptionMessage(e, true));
                 sendException(*exception, send_exception_with_stack_trace);
             }
         }
