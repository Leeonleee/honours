diff --git a/tests/integration/test_distributed_respect_user_timeouts/test.py b/tests/integration/test_distributed_respect_user_timeouts/test.py
index 662bf7fa6ded..a97c7c3d3556 100644
--- a/tests/integration/test_distributed_respect_user_timeouts/test.py
+++ b/tests/integration/test_distributed_respect_user_timeouts/test.py
@@ -33,7 +33,7 @@
                "ORDER BY node"),
 }
 
-EXCEPTION_NETWORK = 'e.displayText() = DB::NetException: '
+EXCEPTION_NETWORK = 'DB::NetException: '
 EXCEPTION_TIMEOUT = 'Timeout exceeded while reading from socket ('
 EXCEPTION_CONNECT = 'Timeout: connect timed out: '
 
@@ -76,13 +76,13 @@ def _check_exception(exception, expected_tries=3):
 
     for i, line in enumerate(lines[3:3 + expected_tries]):
         expected_lines = (
-            'Code: 209, ' + EXCEPTION_NETWORK + EXCEPTION_TIMEOUT,
-            'Code: 209, ' + EXCEPTION_NETWORK + EXCEPTION_CONNECT,
+            'Code: 209. ' + EXCEPTION_NETWORK + EXCEPTION_TIMEOUT,
+            'Code: 209. ' + EXCEPTION_NETWORK + EXCEPTION_CONNECT,
             EXCEPTION_TIMEOUT,
         )
 
         assert any(line.startswith(expected) for expected in expected_lines), \
-            'Unexpected exception at one of the connection attempts'
+            'Unexpected exception "{}" at one of the connection attempts'.format(line)
 
     assert lines[3 + expected_tries] == '', 'Wrong number of connect attempts'
 
diff --git a/tests/integration/test_mysql_protocol/test.py b/tests/integration/test_mysql_protocol/test.py
index 6533a6a23f95..070aa9967fc9 100644
--- a/tests/integration/test_mysql_protocol/test.py
+++ b/tests/integration/test_mysql_protocol/test.py
@@ -95,8 +95,11 @@ def test_mysql_client(started_cluster):
     '''.format(host=started_cluster.get_instance_ip('node'), port=server_port), demux=True)
 
     assert stdout.decode() == 'count()
1
'
-    assert stderr[0:182].decode() == "mysql: [Warning] Using a password on the command line interface can be insecure.
" \
-                            "ERROR 81 (00000) at line 1: Code: 81, e.displayText() = DB::Exception: Database system2 doesn't exist"
+    expected_msg = '
'.join([
+        "mysql: [Warning] Using a password on the command line interface can be insecure.",
+        "ERROR 81 (00000) at line 1: Code: 81. DB::Exception: Database system2 doesn't exist",
+    ])
+    assert stderr[:len(expected_msg)].decode() == expected_msg
 
     code, (stdout, stderr) = started_cluster.mysql_client_container.exec_run('''
         mysql --protocol tcp -h {host} -P {port} default -u default --password=123
@@ -122,8 +125,11 @@ def test_mysql_client_exception(started_cluster):
         -e "CREATE TABLE default.t1_remote_mysql AS mysql('127.0.0.1:10086','default','t1_local','default','');"
     '''.format(host=started_cluster.get_instance_ip('node'), port=server_port), demux=True)
 
-    assert stderr[0:258].decode() == "mysql: [Warning] Using a password on the command line interface can be insecure.
" \
-            "ERROR 1000 (00000) at line 1: Poco::Exception. Code: 1000, e.code() = 0, e.displayText() = Exception: Connections to all replicas failed: default@127.0.0.1:10086 as user default"
+    expected_msg = '
'.join([
+        "mysql: [Warning] Using a password on the command line interface can be insecure.",
+        "ERROR 1000 (00000) at line 1: Poco::Exception. Code: 1000, e.code() = 0, Exception: Connections to all replicas failed: default@127.0.0.1:10086 as user default",
+    ])
+    assert stderr[:len(expected_msg)].decode() == expected_msg
 
 
 def test_mysql_affected_rows(started_cluster):
@@ -328,8 +334,7 @@ def test_python_client(started_cluster):
     with pytest.raises(pymysql.InternalError) as exc_info:
         client.query('select name from tables')
 
-    assert exc_info.value.args[1][
-           0:77] == "Code: 60, e.displayText() = DB::Exception: Table default.tables doesn't exist"
+    assert exc_info.value.args[1].startswith("Code: 60. DB::Exception: Table default.tables doesn't exist"), exc_info.value.args[1]
 
     cursor = client.cursor(pymysql.cursors.DictCursor)
     cursor.execute("select 1 as a, 'тест' as b")
@@ -348,8 +353,7 @@ def test_python_client(started_cluster):
     with pytest.raises(pymysql.InternalError) as exc_info:
         client.query('select name from tables')
 
-    assert exc_info.value.args[1][
-           0:77] == "Code: 60, e.displayText() = DB::Exception: Table default.tables doesn't exist"
+    assert exc_info.value.args[1].startswith("Code: 60. DB::Exception: Table default.tables doesn't exist"), exc_info.value.args[1]
 
     cursor = client.cursor(pymysql.cursors.DictCursor)
     cursor.execute("select 1 as a, 'тест' as b")
@@ -360,7 +364,7 @@ def test_python_client(started_cluster):
     with pytest.raises(pymysql.InternalError) as exc_info:
         client.select_db('system2')
 
-    assert exc_info.value.args[1][0:73] == "Code: 81, e.displayText() = DB::Exception: Database system2 doesn't exist"
+    assert exc_info.value.args[1].startswith("Code: 81. DB::Exception: Database system2 doesn't exist"), exc_info.value.args[1]
 
     cursor = client.cursor(pymysql.cursors.DictCursor)
     cursor.execute('CREATE DATABASE x')
diff --git a/tests/integration/test_replicated_fetches_timeouts/test.py b/tests/integration/test_replicated_fetches_timeouts/test.py
index 963ec2487fdb..88763265270e 100644
--- a/tests/integration/test_replicated_fetches_timeouts/test.py
+++ b/tests/integration/test_replicated_fetches_timeouts/test.py
@@ -78,7 +78,7 @@ def test_no_stall(started_cluster):
                 """
                 SELECT count()
                 FROM system.replication_queue
-                WHERE last_exception LIKE '%e.displayText() = Timeout%'
+                WHERE last_exception LIKE '%Timeout%'
                     AND last_exception NOT LIKE '%connect timed out%'
                 """).strip())
 
diff --git a/tests/integration/test_storage_kafka/test.py b/tests/integration/test_storage_kafka/test.py
index 51b2052baae2..b9fc0b2272f0 100644
--- a/tests/integration/test_storage_kafka/test.py
+++ b/tests/integration/test_storage_kafka/test.py
@@ -66,7 +66,7 @@ def get_kafka_producer(port, serializer, retries):
         except Exception as e:
             errors += [str(e)]
             time.sleep(1)
-    
+
     raise Exception("Connection not establised, {}".format(errors))
 
 def producer_serializer(x):
@@ -1339,7 +1339,7 @@ def test_librdkafka_compression(kafka_cluster):
 
     Example of corruption:
 
-        2020.12.10 09:59:56.831507 [ 20 ] {} <Error> void DB::StorageKafka::threadFunc(size_t): Code: 27, e.displayText() = DB::Exception: Cannot parse input: expected '"' before: 'foo"}': (while reading the value of key value): (at row 1)
+        2020.12.10 09:59:56.831507 [ 20 ] {} <Error> void DB::StorageKafka::threadFunc(size_t): Code: 27. DB::Exception: Cannot parse input: expected '"' before: 'foo"}': (while reading the value of key value): (at row 1)
 
     To trigger this regression there should duplicated messages
 
diff --git a/tests/queries/0_stateless/00429_long_http_bufferization.sh b/tests/queries/0_stateless/00429_long_http_bufferization.sh
index aab9aeba9376..394e8e990522 100755
--- a/tests/queries/0_stateless/00429_long_http_bufferization.sh
+++ b/tests/queries/0_stateless/00429_long_http_bufferization.sh
@@ -18,7 +18,7 @@ function ch_url() {
 
 # Check correct exceptions handling
 
-exception_pattern="displayText() = DB::Exception:[[:print:]]*"
+exception_pattern="DB::Exception:[[:print:]]*"
 
 function check_only_exception() {
     local res
diff --git a/tests/queries/0_stateless/00900_long_parquet_load.reference b/tests/queries/0_stateless/00900_long_parquet_load.reference
index 621bca2ec0ea..36bbbc1b15df 100644
--- a/tests/queries/0_stateless/00900_long_parquet_load.reference
+++ b/tests/queries/0_stateless/00900_long_parquet_load.reference
@@ -89,7 +89,7 @@ idx10	['This','is','a','test']
 23.00
 24.00
 === Try load data from datapage_v2.snappy.parquet
-Code: 33. DB::ParsingEx---tion: Error while reading Parquet data: IOError: Not yet implemented: Unsupported encoding.: data for INSERT was parsed from stdin
+Code: 33. DB::ParsingEx---tion: Error while reading Parquet data: IOError: Not yet implemented: Unsupported encoding.: data for INSERT was parsed from stdin. (CANNOT_READ_ALL_DATA)
 
 === Try load data from dict-page-offset-zero.parquet
 1552
diff --git a/tests/queries/0_stateless/01175_distributed_ddl_output_mode_long.reference b/tests/queries/0_stateless/01175_distributed_ddl_output_mode_long.reference
index 0cc8c788fed1..ca79d4a022ee 100644
--- a/tests/queries/0_stateless/01175_distributed_ddl_output_mode_long.reference
+++ b/tests/queries/0_stateless/01175_distributed_ddl_output_mode_long.reference
@@ -1,25 +1,25 @@
 none
 Received exception from server:
-Code: 57. Error: Received from localhost:9000. Error: There was an error on [localhost:9000]: Code: 57, e.displayText() = Error: Table default.throw already exists
+Code: 57. Error: Received from localhost:9000. Error: There was an error on [localhost:9000]: Code: 57. Error: Table default.throw already exists. (TABLE_ALREADY_EXISTS)
 Received exception from server:
-Code: 159. Error: Received from localhost:9000. Error: Watching task <task> is executing longer than distributed_ddl_task_timeout (=8) seconds. There are 1 unfinished hosts (0 of them are currently active), they are going to execute the query in background.
+Code: 159. Error: Received from localhost:9000. Error: Watching task <task> is executing longer than distributed_ddl_task_timeout (=8) seconds. There are 1 unfinished hosts (0 of them are currently active), they are going to execute the query in background.(TIMEOUT_EXCEEDED)
 throw
 localhost	9000	0		0	0
-localhost	9000	57	Code: 57, e.displayText() = Error: Table default.throw already exists.	0	0
+localhost	9000	57	Code: 57. Error: Table default.throw already exists. (TABLE_ALREADY_EXISTS)	0	0
 Received exception from server:
-Code: 57. Error: Received from localhost:9000. Error: There was an error on [localhost:9000]: Code: 57, e.displayText() = Error: Table default.throw already exists
+Code: 57. Error: Received from localhost:9000. Error: There was an error on [localhost:9000]: Code: 57. Error: Table default.throw already exists. (TABLE_ALREADY_EXISTS)
 localhost	9000	0		1	0
 Received exception from server:
-Code: 159. Error: Received from localhost:9000. Error: Watching task <task> is executing longer than distributed_ddl_task_timeout (=8) seconds. There are 1 unfinished hosts (0 of them are currently active), they are going to execute the query in background.
+Code: 159. Error: Received from localhost:9000. Error: Watching task <task> is executing longer than distributed_ddl_task_timeout (=8) seconds. There are 1 unfinished hosts (0 of them are currently active), they are going to execute the query in background.(TIMEOUT_EXCEEDED)
 null_status_on_timeout
 localhost	9000	0		0	0
-localhost	9000	57	Code: 57, e.displayText() = Error: Table default.null_status already exists.	0	0
+localhost	9000	57	Code: 57. Error: Table default.null_status already exists. (TABLE_ALREADY_EXISTS)	0	0
 Received exception from server:
-Code: 57. Error: Received from localhost:9000. Error: There was an error on [localhost:9000]: Code: 57, e.displayText() = Error: Table default.null_status already exists
+Code: 57. Error: Received from localhost:9000. Error: There was an error on [localhost:9000]: Code: 57. Error: Table default.null_status already exists. (TABLE_ALREADY_EXISTS)
 localhost	9000	0		1	0
 localhost	1	\N	\N	1	0
 never_throw
 localhost	9000	0		0	0
-localhost	9000	57	Code: 57, e.displayText() = Error: Table default.never_throw already exists.	0	0
+localhost	9000	57	Code: 57. Error: Table default.never_throw already exists. (TABLE_ALREADY_EXISTS)	0	0
 localhost	9000	0		1	0
 localhost	1	\N	\N	1	0
diff --git a/tests/queries/0_stateless/01889_clickhouse_client_config_format.reference b/tests/queries/0_stateless/01889_clickhouse_client_config_format.reference
index aa7748928f13..202e32a583e5 100644
--- a/tests/queries/0_stateless/01889_clickhouse_client_config_format.reference
+++ b/tests/queries/0_stateless/01889_clickhouse_client_config_format.reference
@@ -13,4 +13,4 @@ yml
 yaml
 2
 ini
-Code: 347. Unknown format of '/config_default.ini' config
+Code: 347. Unknown format of '/config_default.ini' config. (CANNOT_LOAD_CONFIG)
