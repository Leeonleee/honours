{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 15199,
  "instance_id": "ClickHouse__ClickHouse-15199",
  "issue_numbers": [
    "9764"
  ],
  "base_commit": "71a860dc8f6161be20d03a76b03e954e9c1b756a",
  "patch": "diff --git a/docs/en/interfaces/formats.md b/docs/en/interfaces/formats.md\nindex d88fffd3bb88..d96d48bdca3c 100644\n--- a/docs/en/interfaces/formats.md\n+++ b/docs/en/interfaces/formats.md\n@@ -43,6 +43,7 @@ The supported formats are:\n | [PrettyNoEscapes](#prettynoescapes)                                                     | \u2717     | \u2714      |\n | [PrettySpace](#prettyspace)                                                             | \u2717     | \u2714      |\n | [Protobuf](#protobuf)                                                                   | \u2714     | \u2714      |\n+| [ProtobufSingle](#protobufsingle)                                                       | \u2714     | \u2714      |\n | [Avro](#data-format-avro)                                                               | \u2714     | \u2714      |\n | [AvroConfluent](#data-format-avro-confluent)                                            | \u2714     | \u2717      |\n | [Parquet](#data-format-parquet)                                                         | \u2714     | \u2714      |\n@@ -1076,6 +1077,10 @@ ClickHouse inputs and outputs protobuf messages in the `length-delimited` format\n It means before every message should be written its length as a [varint](https://developers.google.com/protocol-buffers/docs/encoding#varints).\n See also [how to read/write length-delimited protobuf messages in popular languages](https://cwiki.apache.org/confluence/display/GEODE/Delimiting+Protobuf+Messages).\n \n+## ProtobufSingle {#protobufsingle}\n+\n+Same as [Protobuf](#protobuf) but for storing/parsing single Protobuf message without length delimiters.\n+\n ## Avro {#data-format-avro}\n \n [Apache Avro](https://avro.apache.org/) is a row-oriented data serialization framework developed within Apache\u2019s Hadoop project.\ndiff --git a/docs/ru/interfaces/formats.md b/docs/ru/interfaces/formats.md\nindex a8d8e321632b..2745139998fb 100644\n--- a/docs/ru/interfaces/formats.md\n+++ b/docs/ru/interfaces/formats.md\n@@ -27,6 +27,7 @@ ClickHouse \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c (`INSERT`) \u0438 \u043e\u0442\u0434\u0430\u0432\u0430\u0442\u044c (`SELECT\n | [PrettyNoEscapes](#prettynoescapes)                             | \u2717      | \u2714      |\n | [PrettySpace](#prettyspace)                                     | \u2717      | \u2714      |\n | [Protobuf](#protobuf)                                           | \u2714      | \u2714      |\n+| [ProtobufSingle](#protobufsingle)                               | \u2714      | \u2714      |\n | [Parquet](#data-format-parquet)                                 | \u2714      | \u2714      |\n | [Arrow](#data-format-arrow)                                     | \u2714      | \u2714      |\n | [ArrowStream](#data-format-arrow-stream)                        | \u2714      | \u2714      |\n@@ -948,6 +949,10 @@ message MessageType {\n ClickHouse \u043f\u0438\u0448\u0435\u0442 \u0438 \u0447\u0438\u0442\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f `Protocol Buffers` \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 `length-delimited`. \u042d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u043f\u0435\u0440\u0435\u0434 \u043a\u0430\u0436\u0434\u044b\u043c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\u043c \u043f\u0438\u0448\u0435\u0442\u0441\u044f \u0435\u0433\u043e \u0434\u043b\u0438\u043d\u0430\n \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 [varint](https://developers.google.com/protocol-buffers/docs/encoding#varints). \u0421\u043c. \u0442\u0430\u043a\u0436\u0435 [\u043a\u0430\u043a \u0447\u0438\u0442\u0430\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f Protocol Buffers \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 length-delimited \u0432 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u044f\u0437\u044b\u043a\u0430\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f](https://cwiki.apache.org/confluence/display/GEODE/Delimiting+Protobuf+Messages).\n \n+## ProtobufSingle {#protobufsingle}\n+\n+\u0422\u043e \u0436\u0435, \u0447\u0442\u043e [Protobuf](#protobuf), \u043d\u043e \u0431\u0435\u0437 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0435\u0439. \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c / \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0437\u0430 \u0440\u0430\u0437.\n+\n ## Avro {#data-format-avro}\n \n [Apache Avro](https://avro.apache.org/) \u2014 \u044d\u0442\u043e \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a \u0434\u043b\u044f \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u0434\u0430\u043d\u043d\u044b\u0445. \u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043d \u0432 \u0440\u0430\u043c\u043a\u0430\u0445 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 Apache Hadoop.\n@@ -958,7 +963,7 @@ ClickHouse \u043f\u0438\u0448\u0435\u0442 \u0438 \u0447\u0438\u0442\u0430\u0435\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f `Protocol Buffers` \u0432 \n \n ## AvroConfluent {#data-format-avro-confluent}\n \n-\u0414\u043b\u044f \u0444\u043e\u0440\u043c\u0430\u0442\u0430 `AvroConfluent` ClickHouse \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 `Avro` \u0441 \u043e\u0434\u043d\u0438\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u043c. \u0422\u0430\u043a\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0441 [Kafka] (http://kafka.apache.org/) \u0438  \u0440\u0435\u0435\u0441\u0442\u0440\u043e\u043c \u0441\u0445\u0435\u043c [Confluent](https://docs.confluent.io/current/schema-registry/index.html). \n+\u0414\u043b\u044f \u0444\u043e\u0440\u043c\u0430\u0442\u0430 `AvroConfluent` ClickHouse \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0434\u0435\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 `Avro` \u0441 \u043e\u0434\u043d\u0438\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u043c. \u0422\u0430\u043a\u0438\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0441 [Kafka] (http://kafka.apache.org/) \u0438  \u0440\u0435\u0435\u0441\u0442\u0440\u043e\u043c \u0441\u0445\u0435\u043c [Confluent](https://docs.confluent.io/current/schema-registry/index.html).\n \n \u041a\u0430\u0436\u0434\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 `Avro` \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u0445\u0435\u043c\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d \u0434\u043b\u044f \u0444\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0441\u0445\u0435\u043c\u044b \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0440\u0435\u0435\u0441\u0442\u0440\u0430 \u0441\u0445\u0435\u043c.\n \n@@ -972,7 +977,7 @@ URL-\u0430\u0434\u0440\u0435\u0441 \u0440\u0435\u0435\u0441\u0442\u0440\u0430 \u0441\u0445\u0435\u043c \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\n \n ### \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 {#ispolzovanie}\n \n-\u0427\u0442\u043e\u0431\u044b \u0431\u044b\u0441\u0442\u0440\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0441\u0445\u0435\u043c\u044b, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 [kafkacat](https://github.com/edenhill/kafkacat) \u0441 \u044f\u0437\u044b\u043a\u043e\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 [clickhouse-local](../operations/utilities/clickhouse-local.md): \n+\u0427\u0442\u043e\u0431\u044b \u0431\u044b\u0441\u0442\u0440\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0441\u0445\u0435\u043c\u044b, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 [kafkacat](https://github.com/edenhill/kafkacat) \u0441 \u044f\u0437\u044b\u043a\u043e\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 [clickhouse-local](../operations/utilities/clickhouse-local.md):\n \n ``` bash\n $ kafkacat -b kafka-broker  -C -t topic1 -o beginning -f '%s' -c 3 | clickhouse-local   --input-format AvroConfluent --format_avro_schema_registry_url 'http://schema-registry' -S \"field1 Int64, field2 String\"  -q 'select *  from table'\ndiff --git a/src/Common/ErrorCodes.cpp b/src/Common/ErrorCodes.cpp\nindex bc4dc8435e80..b841368f662b 100644\n--- a/src/Common/ErrorCodes.cpp\n+++ b/src/Common/ErrorCodes.cpp\n@@ -509,6 +509,7 @@ namespace ErrorCodes\n     extern const int UNKNOWN_MYSQL_DATATYPES_SUPPORT_LEVEL = 543;\n     extern const int ROW_AND_ROWS_TOGETHER = 544;\n     extern const int FIRST_AND_NEXT_TOGETHER = 545;\n+    extern const int NO_ROW_DELIMITER = 546;\n \n     extern const int KEEPER_EXCEPTION = 999;\n     extern const int POCO_EXCEPTION = 1000;\ndiff --git a/src/Core/Settings.h b/src/Core/Settings.h\nindex 8f303e3fb486..d73098ca6e02 100644\n--- a/src/Core/Settings.h\n+++ b/src/Core/Settings.h\n@@ -398,7 +398,12 @@ class IColumn;\n     M(Bool, force_optimize_skip_unused_shards_no_nested, false, \"Obsolete setting, does nothing. Will be removed after 2020-12-01. Use force_optimize_skip_unused_shards_nesting instead.\", 0) \\\n     M(Bool, experimental_use_processors, true, \"Obsolete setting, does nothing. Will be removed after 2020-11-29.\", 0) \\\n     M(Bool, optimize_trivial_insert_select, true, \"Optimize trivial 'INSERT INTO table SELECT ... FROM TABLES' query\", 0) \\\n-    M(Bool, allow_experimental_database_atomic, true, \"Obsolete setting, does nothing. Will be removed after 2021-02-12\", 0)\n+    M(Bool, allow_experimental_database_atomic, true, \"Obsolete setting, does nothing. Will be removed after 2021-02-12\", 0) \\\n+    M(Bool, allow_non_metadata_alters, true, \"Allow to execute alters which affects not only tables metadata, but also data on disk\", 0) \\\n+    M(Bool, enable_global_with_statement, false, \"Propagate WITH statements to UNION queries and all subqueries\", 0)\n+\n+// End of COMMON_SETTINGS\n+// Please add settings related to formats into the FORMAT_FACTORY_SETTINGS below.\n \n #define FORMAT_FACTORY_SETTINGS(M) \\\n     M(Char, format_csv_delimiter, ',', \"The character to be considered as a delimiter in CSV data. If setting with a string, a string has to have a length of 1.\", 0) \\\n@@ -463,9 +468,10 @@ class IColumn;\n     \\\n     M(Bool, output_format_enable_streaming, false, \"Enable streaming in output formats that support it.\", 0) \\\n     M(Bool, output_format_write_statistics, true, \"Write statistics about read rows, bytes, time elapsed in suitable output formats.\", 0) \\\n-    M(Bool, allow_non_metadata_alters, true, \"Allow to execute alters which affects not only tables metadata, but also data on disk\", 0) \\\n-    M(Bool, output_format_pretty_row_numbers, false, \"Add row numbers before each row for pretty output format\", 0) \\\n-    M(Bool, enable_global_with_statement, false, \"Propagate WITH statements to UNION queries and all subqueries\", 0) \\\n+    M(Bool, output_format_pretty_row_numbers, false, \"Add row numbers before each row for pretty output format\", 0)\n+\n+// End of FORMAT_FACTORY_SETTINGS\n+// Please add settings non-related to formats into the COMMON_SETTINGS above.\n \n #define LIST_OF_SETTINGS(M)    \\\n     COMMON_SETTINGS(M)         \\\ndiff --git a/src/Formats/FormatFactory.cpp b/src/Formats/FormatFactory.cpp\nindex 4ee5309eacd4..6707653a84af 100644\n--- a/src/Formats/FormatFactory.cpp\n+++ b/src/Formats/FormatFactory.cpp\n@@ -8,6 +8,7 @@\n #include <DataStreams/ParallelParsingBlockInputStream.h>\n #include <Formats/FormatSettings.h>\n #include <Processors/Formats/IRowInputFormat.h>\n+#include <Processors/Formats/IRowOutputFormat.h>\n #include <Processors/Formats/InputStreamFromInputFormat.h>\n #include <Processors/Formats/OutputStreamToOutputFormat.h>\n #include <DataStreams/NativeBlockInputStream.h>\n@@ -203,7 +204,7 @@ BlockInputStreamPtr FormatFactory::getInput(\n \n \n BlockOutputStreamPtr FormatFactory::getOutput(\n-    const String & name, WriteBuffer & buf, const Block & sample, const Context & context, WriteCallback callback) const\n+    const String & name, WriteBuffer & buf, const Block & sample, const Context & context, WriteCallback callback, const bool ignore_no_row_delimiter) const\n {\n     if (!getCreators(name).output_processor_creator)\n     {\n@@ -221,7 +222,7 @@ BlockOutputStreamPtr FormatFactory::getOutput(\n                 output_getter(buf, sample, std::move(callback), format_settings), sample);\n     }\n \n-    auto format = getOutputFormat(name, buf, sample, context, std::move(callback));\n+    auto format = getOutputFormat(name, buf, sample, context, std::move(callback), ignore_no_row_delimiter);\n     return std::make_shared<MaterializingBlockOutputStream>(std::make_shared<OutputStreamToOutputFormat>(format), sample);\n }\n \n@@ -260,7 +261,7 @@ InputFormatPtr FormatFactory::getInputFormat(\n \n \n OutputFormatPtr FormatFactory::getOutputFormat(\n-    const String & name, WriteBuffer & buf, const Block & sample, const Context & context, WriteCallback callback) const\n+    const String & name, WriteBuffer & buf, const Block & sample, const Context & context, WriteCallback callback, const bool ignore_no_row_delimiter) const\n {\n     const auto & output_getter = getCreators(name).output_processor_creator;\n     if (!output_getter)\n@@ -269,10 +270,14 @@ OutputFormatPtr FormatFactory::getOutputFormat(\n     const Settings & settings = context.getSettingsRef();\n     FormatSettings format_settings = getOutputFormatSetting(settings, context);\n \n+    RowOutputFormatParams params;\n+    params.ignore_no_row_delimiter = ignore_no_row_delimiter;\n+    params.callback = std::move(callback);\n+\n     /** TODO: Materialization is needed, because formats can use the functions `IDataType`,\n       *  which only work with full columns.\n       */\n-    auto format = output_getter(buf, sample, std::move(callback), format_settings);\n+    auto format = output_getter(buf, sample, params, format_settings);\n \n     /// Enable auto-flush for streaming mode. Currently it is needed by INSERT WATCH query.\n     if (format_settings.enable_streaming)\ndiff --git a/src/Formats/FormatFactory.h b/src/Formats/FormatFactory.h\nindex de53490dd3b9..d49414e3944a 100644\n--- a/src/Formats/FormatFactory.h\n+++ b/src/Formats/FormatFactory.h\n@@ -27,6 +27,7 @@ class IInputFormat;\n class IOutputFormat;\n \n struct RowInputFormatParams;\n+struct RowOutputFormatParams;\n \n using InputFormatPtr = std::shared_ptr<IInputFormat>;\n using OutputFormatPtr = std::shared_ptr<IOutputFormat>;\n@@ -80,7 +81,7 @@ class FormatFactory final : private boost::noncopyable\n     using OutputProcessorCreator = std::function<OutputFormatPtr(\n             WriteBuffer & buf,\n             const Block & sample,\n-            WriteCallback callback,\n+            const RowOutputFormatParams & params,\n             const FormatSettings & settings)>;\n \n     struct Creators\n@@ -107,7 +108,7 @@ class FormatFactory final : private boost::noncopyable\n         ReadCallback callback = {}) const;\n \n     BlockOutputStreamPtr getOutput(const String & name, WriteBuffer & buf,\n-        const Block & sample, const Context & context, WriteCallback callback = {}) const;\n+        const Block & sample, const Context & context, WriteCallback callback = {}, const bool ignore_no_row_delimiter = false) const;\n \n     InputFormatPtr getInputFormat(\n         const String & name,\n@@ -118,7 +119,7 @@ class FormatFactory final : private boost::noncopyable\n         ReadCallback callback = {}) const;\n \n     OutputFormatPtr getOutputFormat(\n-        const String & name, WriteBuffer & buf, const Block & sample, const Context & context, WriteCallback callback = {}) const;\n+        const String & name, WriteBuffer & buf, const Block & sample, const Context & context, WriteCallback callback = {}, const bool ignore_no_row_delimiter = false) const;\n \n     /// Register format by its name.\n     void registerInputFormat(const String & name, InputCreator input_creator);\ndiff --git a/src/Formats/ProtobufReader.cpp b/src/Formats/ProtobufReader.cpp\nindex 70942ddd0315..8f28d279c06a 100644\n--- a/src/Formats/ProtobufReader.cpp\n+++ b/src/Formats/ProtobufReader.cpp\n@@ -38,26 +38,29 @@ namespace\n     // Those inequations helps checking conditions in ProtobufReader::SimpleReader.\n     constexpr Int64 END_OF_VARINT = -1;\n     constexpr Int64 END_OF_GROUP = -2;\n+    constexpr Int64 END_OF_FILE = -3;\n \n     Int64 decodeZigZag(UInt64 n) { return static_cast<Int64>((n >> 1) ^ (~(n & 1) + 1)); }\n \n-    [[noreturn]] void throwUnknownFormat()\n-    {\n-        throw Exception(\"Protobuf messages are corrupted or don't match the provided schema. Please note that Protobuf stream is length-delimited: every message is prefixed by its length in varint.\", ErrorCodes::UNKNOWN_PROTOBUF_FORMAT);\n-    }\n }\n \n \n // SimpleReader is an utility class to deserialize protobufs.\n // Knows nothing about protobuf schemas, just provides useful functions to deserialize data.\n-ProtobufReader::SimpleReader::SimpleReader(ReadBuffer & in_)\n+ProtobufReader::SimpleReader::SimpleReader(ReadBuffer & in_, const bool use_length_delimiters_)\n     : in(in_)\n     , cursor(0)\n     , current_message_level(0)\n     , current_message_end(0)\n     , field_end(0)\n     , last_string_pos(-1)\n+    , use_length_delimiters(use_length_delimiters_)\n+{\n+}\n+\n+[[noreturn]] void ProtobufReader::SimpleReader::throwUnknownFormat() const\n {\n+    throw Exception(std::string(\"Protobuf messages are corrupted or don't match the provided schema.\") + (use_length_delimiters ? \" Please note that Protobuf stream is length-delimited: every message is prefixed by its length in varint.\" : \"\"), ErrorCodes::UNKNOWN_PROTOBUF_FORMAT);\n }\n \n bool ProtobufReader::SimpleReader::startMessage()\n@@ -66,8 +69,16 @@ bool ProtobufReader::SimpleReader::startMessage()\n     assert(!current_message_level);\n     if (unlikely(in.eof()))\n         return false;\n-    size_t size_of_message = readVarint();\n-    current_message_end = cursor + size_of_message;\n+\n+    if (use_length_delimiters)\n+    {\n+        size_t size_of_message = readVarint();\n+        current_message_end = cursor + size_of_message;\n+    }\n+    else\n+    {\n+        current_message_end = END_OF_FILE;\n+    }\n     ++current_message_level;\n     field_end = cursor;\n     return true;\n@@ -150,8 +161,23 @@ bool ProtobufReader::SimpleReader::readFieldNumber(UInt32 & field_number)\n             throwUnknownFormat();\n     }\n \n-    if ((cursor >= current_message_end) && (current_message_end != END_OF_GROUP))\n-        return false;\n+    if (cursor >= current_message_end)\n+    {\n+        if (current_message_end == END_OF_FILE)\n+        {\n+            if (unlikely(in.eof()))\n+            {\n+                current_message_end = cursor;\n+                return false;\n+            }\n+        }\n+        else if (current_message_end == END_OF_GROUP)\n+        {\n+            /// We'll check for the `GROUP_END` marker later.\n+        }\n+        else\n+            return false;\n+    }\n \n     UInt64 varint = readVarint();\n     if (unlikely(varint & (static_cast<UInt64>(0xFFFFFFFF) << 32)))\n@@ -1077,8 +1103,8 @@ std::unique_ptr<ProtobufReader::IConverter> ProtobufReader::createConverter<goog\n \n \n ProtobufReader::ProtobufReader(\n-    ReadBuffer & in_, const google::protobuf::Descriptor * message_type, const std::vector<String> & column_names)\n-    : simple_reader(in_)\n+    ReadBuffer & in_, const google::protobuf::Descriptor * message_type, const std::vector<String> & column_names, const bool use_length_delimiters_)\n+    : simple_reader(in_, use_length_delimiters_)\n {\n     root_message = ProtobufColumnMatcher::matchColumns<ColumnMatcherTraits>(column_names, message_type);\n     setTraitsDataAfterMatchingColumns(root_message.get());\ndiff --git a/src/Formats/ProtobufReader.h b/src/Formats/ProtobufReader.h\nindex 0e43965a6ce4..b2a0714a57aa 100644\n--- a/src/Formats/ProtobufReader.h\n+++ b/src/Formats/ProtobufReader.h\n@@ -37,7 +37,7 @@ using AggregateFunctionPtr = std::shared_ptr<IAggregateFunction>;\n class ProtobufReader : private boost::noncopyable\n {\n public:\n-    ProtobufReader(ReadBuffer & in_, const google::protobuf::Descriptor * message_type, const std::vector<String> & column_names);\n+    ProtobufReader(ReadBuffer & in_, const google::protobuf::Descriptor * message_type, const std::vector<String> & column_names, const bool use_length_delimiters_);\n     ~ProtobufReader();\n \n     /// Should be called when we start reading a new message.\n@@ -93,7 +93,7 @@ class ProtobufReader : private boost::noncopyable\n     class SimpleReader\n     {\n     public:\n-        SimpleReader(ReadBuffer & in_);\n+        SimpleReader(ReadBuffer & in_, const bool use_length_delimiters_);\n         bool startMessage();\n         void endMessage(bool ignore_errors);\n         void startNestedMessage();\n@@ -126,6 +126,7 @@ class ProtobufReader : private boost::noncopyable\n         UInt64 continueReadingVarint(UInt64 first_byte);\n         void ignoreVarint();\n         void ignoreGroup();\n+        [[noreturn]] void throwUnknownFormat() const;\n \n         ReadBuffer & in;\n         Int64 cursor;\n@@ -134,6 +135,7 @@ class ProtobufReader : private boost::noncopyable\n         std::vector<Int64> parent_message_ends;\n         Int64 field_end;\n         Int64 last_string_pos;\n+        const bool use_length_delimiters;\n     };\n \n     class IConverter\ndiff --git a/src/Formats/ProtobufWriter.cpp b/src/Formats/ProtobufWriter.cpp\nindex b03500437b1b..e62d8fc4a585 100644\n--- a/src/Formats/ProtobufWriter.cpp\n+++ b/src/Formats/ProtobufWriter.cpp\n@@ -123,7 +123,11 @@ namespace\n \n // SimpleWriter is an utility class to serialize protobufs.\n // Knows nothing about protobuf schemas, just provides useful functions to serialize data.\n-ProtobufWriter::SimpleWriter::SimpleWriter(WriteBuffer & out_) : out(out_), current_piece_start(0), num_bytes_skipped(0)\n+ProtobufWriter::SimpleWriter::SimpleWriter(WriteBuffer & out_, const bool use_length_delimiters_)\n+    : out(out_)\n+    , current_piece_start(0)\n+    , num_bytes_skipped(0)\n+    , use_length_delimiters(use_length_delimiters_)\n {\n }\n \n@@ -136,8 +140,11 @@ void ProtobufWriter::SimpleWriter::startMessage()\n void ProtobufWriter::SimpleWriter::endMessage()\n {\n     pieces.emplace_back(current_piece_start, buffer.size());\n-    size_t size_of_message = buffer.size() - num_bytes_skipped;\n-    writeVarint(size_of_message, out);\n+    if (use_length_delimiters)\n+    {\n+        size_t size_of_message = buffer.size() - num_bytes_skipped;\n+        writeVarint(size_of_message, out);\n+    }\n     for (const auto & piece : pieces)\n         if (piece.end > piece.start)\n             out.write(reinterpret_cast<char *>(&buffer[piece.start]), piece.end - piece.start);\n@@ -827,8 +834,8 @@ std::unique_ptr<ProtobufWriter::IConverter> ProtobufWriter::createConverter<goog\n \n \n ProtobufWriter::ProtobufWriter(\n-    WriteBuffer & out, const google::protobuf::Descriptor * message_type, const std::vector<String> & column_names)\n-    : simple_writer(out)\n+    WriteBuffer & out, const google::protobuf::Descriptor * message_type, const std::vector<String> & column_names, const bool use_length_delimiters_)\n+    : simple_writer(out, use_length_delimiters_)\n {\n     std::vector<const google::protobuf::FieldDescriptor *> field_descriptors_without_match;\n     root_message = ProtobufColumnMatcher::matchColumns<ColumnMatcherTraits>(column_names, message_type, field_descriptors_without_match);\ndiff --git a/src/Formats/ProtobufWriter.h b/src/Formats/ProtobufWriter.h\nindex 10bbbb149768..44d3aac221e2 100644\n--- a/src/Formats/ProtobufWriter.h\n+++ b/src/Formats/ProtobufWriter.h\n@@ -37,7 +37,7 @@ using ConstAggregateDataPtr = const char *;\n class ProtobufWriter : private boost::noncopyable\n {\n public:\n-    ProtobufWriter(WriteBuffer & out, const google::protobuf::Descriptor * message_type, const std::vector<String> & column_names);\n+    ProtobufWriter(WriteBuffer & out, const google::protobuf::Descriptor * message_type, const std::vector<String> & column_names, const bool use_length_delimiters_);\n     ~ProtobufWriter();\n \n     /// Should be called at the beginning of writing a message.\n@@ -89,7 +89,7 @@ class ProtobufWriter : private boost::noncopyable\n     class SimpleWriter\n     {\n     public:\n-        SimpleWriter(WriteBuffer & out_);\n+        SimpleWriter(WriteBuffer & out_, const bool use_length_delimiters_);\n         ~SimpleWriter();\n \n         void startMessage();\n@@ -138,6 +138,7 @@ class ProtobufWriter : private boost::noncopyable\n         size_t current_piece_start;\n         size_t num_bytes_skipped;\n         std::vector<NestedInfo> nested_infos;\n+        const bool use_length_delimiters;\n     };\n \n     class IConverter\ndiff --git a/src/IO/WriteBuffer.h b/src/IO/WriteBuffer.h\nindex b8bf53e18fd9..4fdb814849e7 100644\n--- a/src/IO/WriteBuffer.h\n+++ b/src/IO/WriteBuffer.h\n@@ -60,7 +60,6 @@ class WriteBuffer : public BufferBase\n       */\n     virtual ~WriteBuffer() {}\n \n-\n     inline void nextIfAtEnd()\n     {\n         if (!hasPendingData())\ndiff --git a/src/Processors/Formats/IRowOutputFormat.cpp b/src/Processors/Formats/IRowOutputFormat.cpp\nindex bb74f1ce59e3..f5f01643f4ea 100644\n--- a/src/Processors/Formats/IRowOutputFormat.cpp\n+++ b/src/Processors/Formats/IRowOutputFormat.cpp\n@@ -21,12 +21,13 @@ void IRowOutputFormat::consume(DB::Chunk chunk)\n     {\n         if (!first_row)\n             writeRowBetweenDelimiter();\n-        first_row = false;\n \n         write(columns, row);\n \n-        if (write_single_row_callback)\n-            write_single_row_callback(columns, row);\n+        if (params.callback)\n+            params.callback(columns, row);\n+\n+        first_row = false;\n     }\n }\n \ndiff --git a/src/Processors/Formats/IRowOutputFormat.h b/src/Processors/Formats/IRowOutputFormat.h\nindex a702714a77d6..4312691ea5ee 100644\n--- a/src/Processors/Formats/IRowOutputFormat.h\n+++ b/src/Processors/Formats/IRowOutputFormat.h\n@@ -9,6 +9,22 @@\n namespace DB\n {\n \n+struct RowOutputFormatParams\n+{\n+    using WriteCallback = std::function<void(const Columns & columns,size_t row)>;\n+\n+    // Callback used to indicate that another row is written.\n+    WriteCallback callback;\n+\n+    /**\n+     * some buffers (kafka / rabbit) split the rows internally using callback\n+     * so we can push there formats without framing / delimiters\n+     * (like ProtobufSingle). In other cases you can't write more than single row\n+     * in unframed format.\n+     */\n+    bool ignore_no_row_delimiter = false;\n+};\n+\n class WriteBuffer;\n \n /** Output format that writes data row by row.\n@@ -17,6 +33,7 @@ class IRowOutputFormat : public IOutputFormat\n {\n protected:\n     DataTypes types;\n+    bool first_row = true;\n \n     void consume(Chunk chunk) override;\n     void consumeTotals(Chunk chunk) override;\n@@ -24,8 +41,10 @@ class IRowOutputFormat : public IOutputFormat\n     void finalize() override;\n \n public:\n-    IRowOutputFormat(const Block & header, WriteBuffer & out_, FormatFactory::WriteCallback callback)\n-        : IOutputFormat(header, out_), types(header.getDataTypes()), write_single_row_callback(callback)\n+    using Params = RowOutputFormatParams;\n+\n+    IRowOutputFormat(const Block & header, WriteBuffer & out_, const Params & params_)\n+        : IOutputFormat(header, out_), types(header.getDataTypes()), params(params_)\n     {\n     }\n \n@@ -55,12 +74,10 @@ class IRowOutputFormat : public IOutputFormat\n     virtual void writeLastSuffix() {}  /// Write something after resultset, totals end extremes.\n \n private:\n-    bool first_row = true;\n     bool prefix_written = false;\n     bool suffix_written = false;\n \n-    // Callback used to indicate that another row is written.\n-    FormatFactory::WriteCallback write_single_row_callback;\n+    Params params;\n \n     void writePrefixIfNot()\n     {\ndiff --git a/src/Processors/Formats/Impl/ArrowBlockOutputFormat.cpp b/src/Processors/Formats/Impl/ArrowBlockOutputFormat.cpp\nindex 81f3d92b8883..756172a5a68c 100644\n--- a/src/Processors/Formats/Impl/ArrowBlockOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/ArrowBlockOutputFormat.cpp\n@@ -79,7 +79,7 @@ void registerOutputFormatProcessorArrow(FormatFactory & factory)\n         \"Arrow\",\n         [](WriteBuffer & buf,\n            const Block & sample,\n-           FormatFactory::WriteCallback,\n+           const RowOutputFormatParams &,\n            const FormatSettings & format_settings)\n         {\n             return std::make_shared<ArrowBlockOutputFormat>(buf, sample, false, format_settings);\n@@ -89,7 +89,7 @@ void registerOutputFormatProcessorArrow(FormatFactory & factory)\n         \"ArrowStream\",\n         [](WriteBuffer & buf,\n            const Block & sample,\n-           FormatFactory::WriteCallback,\n+           const RowOutputFormatParams &,\n            const FormatSettings & format_settings)\n         {\n             return std::make_shared<ArrowBlockOutputFormat>(buf, sample, true, format_settings);\ndiff --git a/src/Processors/Formats/Impl/AvroRowOutputFormat.cpp b/src/Processors/Formats/Impl/AvroRowOutputFormat.cpp\nindex 82688fe407c1..81922bdde809 100644\n--- a/src/Processors/Formats/Impl/AvroRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/AvroRowOutputFormat.cpp\n@@ -347,8 +347,8 @@ static avro::Codec getCodec(const std::string & codec_name)\n }\n \n AvroRowOutputFormat::AvroRowOutputFormat(\n-    WriteBuffer & out_, const Block & header_, FormatFactory::WriteCallback callback, const FormatSettings & settings_)\n-    : IRowOutputFormat(header_, out_, callback)\n+    WriteBuffer & out_, const Block & header_, const RowOutputFormatParams & params_, const FormatSettings & settings_)\n+    : IRowOutputFormat(header_, out_, params_)\n     , settings(settings_)\n     , serializer(header_.getColumnsWithTypeAndName())\n     , file_writer(\n@@ -383,10 +383,10 @@ void registerOutputFormatProcessorAvro(FormatFactory & factory)\n     factory.registerOutputFormatProcessor(\"Avro\", [](\n         WriteBuffer & buf,\n         const Block & sample,\n-        FormatFactory::WriteCallback callback,\n+        const RowOutputFormatParams & params,\n         const FormatSettings & settings)\n     {\n-        return std::make_shared<AvroRowOutputFormat>(buf, sample, callback, settings);\n+        return std::make_shared<AvroRowOutputFormat>(buf, sample, params, settings);\n     });\n }\n \ndiff --git a/src/Processors/Formats/Impl/AvroRowOutputFormat.h b/src/Processors/Formats/Impl/AvroRowOutputFormat.h\nindex 4d404337d74e..08370154d9a7 100644\n--- a/src/Processors/Formats/Impl/AvroRowOutputFormat.h\n+++ b/src/Processors/Formats/Impl/AvroRowOutputFormat.h\n@@ -43,7 +43,7 @@ class AvroSerializer\n class AvroRowOutputFormat : public IRowOutputFormat\n {\n public:\n-    AvroRowOutputFormat(WriteBuffer & out_, const Block & header_, FormatFactory::WriteCallback callback, const FormatSettings & settings_);\n+    AvroRowOutputFormat(WriteBuffer & out_, const Block & header_, const RowOutputFormatParams & params_, const FormatSettings & settings_);\n     virtual ~AvroRowOutputFormat() override;\n \n     String getName() const override { return \"AvroRowOutputFormat\"; }\ndiff --git a/src/Processors/Formats/Impl/BinaryRowOutputFormat.cpp b/src/Processors/Formats/Impl/BinaryRowOutputFormat.cpp\nindex f228044f13de..d74a0a075fe6 100644\n--- a/src/Processors/Formats/Impl/BinaryRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/BinaryRowOutputFormat.cpp\n@@ -9,8 +9,8 @@\n namespace DB\n {\n \n-BinaryRowOutputFormat::BinaryRowOutputFormat(WriteBuffer & out_, const Block & header, bool with_names_, bool with_types_, FormatFactory::WriteCallback callback)\n-    : IRowOutputFormat(header, out_, callback), with_names(with_names_), with_types(with_types_)\n+BinaryRowOutputFormat::BinaryRowOutputFormat(WriteBuffer & out_, const Block & header, bool with_names_, bool with_types_, const RowOutputFormatParams & params_)\n+    : IRowOutputFormat(header, out_, params_), with_names(with_names_), with_types(with_types_)\n {\n }\n \n@@ -52,19 +52,19 @@ void registerOutputFormatProcessorRowBinary(FormatFactory & factory)\n     factory.registerOutputFormatProcessor(\"RowBinary\", [](\n         WriteBuffer & buf,\n         const Block & sample,\n-        FormatFactory::WriteCallback callback,\n+        const RowOutputFormatParams & params,\n         const FormatSettings &)\n     {\n-        return std::make_shared<BinaryRowOutputFormat>(buf, sample, false, false, callback);\n+        return std::make_shared<BinaryRowOutputFormat>(buf, sample, false, false, params);\n     });\n \n     factory.registerOutputFormatProcessor(\"RowBinaryWithNamesAndTypes\", [](\n         WriteBuffer & buf,\n         const Block & sample,\n-        FormatFactory::WriteCallback callback,\n+        const RowOutputFormatParams & params,\n         const FormatSettings &)\n     {\n-        return std::make_shared<BinaryRowOutputFormat>(buf, sample, true, true, callback);\n+        return std::make_shared<BinaryRowOutputFormat>(buf, sample, true, true, params);\n     });\n }\n \ndiff --git a/src/Processors/Formats/Impl/BinaryRowOutputFormat.h b/src/Processors/Formats/Impl/BinaryRowOutputFormat.h\nindex 0452a1e3e0fc..562ed7b18aa8 100644\n--- a/src/Processors/Formats/Impl/BinaryRowOutputFormat.h\n+++ b/src/Processors/Formats/Impl/BinaryRowOutputFormat.h\n@@ -17,7 +17,7 @@ class WriteBuffer;\n class BinaryRowOutputFormat: public IRowOutputFormat\n {\n public:\n-    BinaryRowOutputFormat(WriteBuffer & out_, const Block & header, bool with_names_, bool with_types_, FormatFactory::WriteCallback callback);\n+    BinaryRowOutputFormat(WriteBuffer & out_, const Block & header, bool with_names_, bool with_types_, const RowOutputFormatParams & params_);\n \n     String getName() const override { return \"BinaryRowOutputFormat\"; }\n \ndiff --git a/src/Processors/Formats/Impl/CSVRowOutputFormat.cpp b/src/Processors/Formats/Impl/CSVRowOutputFormat.cpp\nindex 2ff8defd3b00..2d6a49ccb6f9 100644\n--- a/src/Processors/Formats/Impl/CSVRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/CSVRowOutputFormat.cpp\n@@ -8,8 +8,8 @@ namespace DB\n {\n \n \n-CSVRowOutputFormat::CSVRowOutputFormat(WriteBuffer & out_, const Block & header_, bool with_names_, FormatFactory::WriteCallback callback, const FormatSettings & format_settings_)\n-    : IRowOutputFormat(header_, out_, callback), with_names(with_names_), format_settings(format_settings_)\n+CSVRowOutputFormat::CSVRowOutputFormat(WriteBuffer & out_, const Block & header_, bool with_names_, const RowOutputFormatParams & params_, const FormatSettings & format_settings_)\n+    : IRowOutputFormat(header_, out_, params_), with_names(with_names_), format_settings(format_settings_)\n {\n     const auto & sample = getPort(PortKind::Main).getHeader();\n     size_t columns = sample.columns();\n@@ -77,10 +77,10 @@ void registerOutputFormatProcessorCSV(FormatFactory & factory)\n         factory.registerOutputFormatProcessor(with_names ? \"CSVWithNames\" : \"CSV\", [=](\n             WriteBuffer & buf,\n             const Block & sample,\n-            FormatFactory::WriteCallback callback,\n+            const RowOutputFormatParams & params,\n             const FormatSettings & format_settings)\n         {\n-                return std::make_shared<CSVRowOutputFormat>(buf, sample, with_names, callback, format_settings);\n+                return std::make_shared<CSVRowOutputFormat>(buf, sample, with_names, params, format_settings);\n         });\n     }\n }\ndiff --git a/src/Processors/Formats/Impl/CSVRowOutputFormat.h b/src/Processors/Formats/Impl/CSVRowOutputFormat.h\nindex 05b097f75149..55803aeb53e2 100644\n--- a/src/Processors/Formats/Impl/CSVRowOutputFormat.h\n+++ b/src/Processors/Formats/Impl/CSVRowOutputFormat.h\n@@ -20,7 +20,7 @@ class CSVRowOutputFormat : public IRowOutputFormat\n     /** with_names - output in the first line a header with column names\n       * with_types - output in the next line header with the names of the types\n       */\n-    CSVRowOutputFormat(WriteBuffer & out_, const Block & header_, bool with_names_, FormatFactory::WriteCallback callback, const FormatSettings & format_settings_);\n+    CSVRowOutputFormat(WriteBuffer & out_, const Block & header_, bool with_names_, const RowOutputFormatParams & params_, const FormatSettings & format_settings_);\n \n     String getName() const override { return \"CSVRowOutputFormat\"; }\n \ndiff --git a/src/Processors/Formats/Impl/JSONCompactEachRowRowOutputFormat.cpp b/src/Processors/Formats/Impl/JSONCompactEachRowRowOutputFormat.cpp\nindex ab8fd164c3c1..e12ca966a93a 100644\n--- a/src/Processors/Formats/Impl/JSONCompactEachRowRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/JSONCompactEachRowRowOutputFormat.cpp\n@@ -10,11 +10,11 @@ namespace DB\n \n JSONCompactEachRowRowOutputFormat::JSONCompactEachRowRowOutputFormat(WriteBuffer & out_,\n         const Block & header_,\n-        FormatFactory::WriteCallback callback,\n+        const RowOutputFormatParams & params_,\n         const FormatSettings & settings_,\n         bool with_names_,\n         bool yield_strings_)\n-        : IRowOutputFormat(header_, out_, callback), settings(settings_), with_names(with_names_), yield_strings(yield_strings_)\n+        : IRowOutputFormat(header_, out_, params_), settings(settings_), with_names(with_names_), yield_strings(yield_strings_)\n {\n             const auto & sample = getPort(PortKind::Main).getHeader();\n             NamesAndTypesList columns(sample.getNamesAndTypesList());\n@@ -103,37 +103,37 @@ void registerOutputFormatProcessorJSONCompactEachRow(FormatFactory & factory)\n     factory.registerOutputFormatProcessor(\"JSONCompactEachRow\", [](\n             WriteBuffer & buf,\n             const Block & sample,\n-            FormatFactory::WriteCallback callback,\n+            const RowOutputFormatParams & params,\n             const FormatSettings & format_settings)\n     {\n-        return std::make_shared<JSONCompactEachRowRowOutputFormat>(buf, sample, callback, format_settings, false, false);\n+        return std::make_shared<JSONCompactEachRowRowOutputFormat>(buf, sample, params, format_settings, false, false);\n     });\n \n     factory.registerOutputFormatProcessor(\"JSONCompactEachRowWithNamesAndTypes\", [](\n             WriteBuffer &buf,\n             const Block &sample,\n-            FormatFactory::WriteCallback callback,\n+            const RowOutputFormatParams & params,\n             const FormatSettings &format_settings)\n     {\n-        return std::make_shared<JSONCompactEachRowRowOutputFormat>(buf, sample, callback, format_settings, true, false);\n+        return std::make_shared<JSONCompactEachRowRowOutputFormat>(buf, sample, params, format_settings, true, false);\n     });\n \n     factory.registerOutputFormatProcessor(\"JSONCompactStringsEachRow\", [](\n             WriteBuffer & buf,\n             const Block & sample,\n-            FormatFactory::WriteCallback callback,\n+            const RowOutputFormatParams & params,\n             const FormatSettings & format_settings)\n     {\n-        return std::make_shared<JSONCompactEachRowRowOutputFormat>(buf, sample, callback, format_settings, false, true);\n+        return std::make_shared<JSONCompactEachRowRowOutputFormat>(buf, sample, params, format_settings, false, true);\n     });\n \n     factory.registerOutputFormatProcessor(\"JSONCompactStringsEachRowWithNamesAndTypes\", [](\n             WriteBuffer &buf,\n             const Block &sample,\n-            FormatFactory::WriteCallback callback,\n+            const RowOutputFormatParams & params,\n             const FormatSettings &format_settings)\n     {\n-        return std::make_shared<JSONCompactEachRowRowOutputFormat>(buf, sample, callback, format_settings, true, true);\n+        return std::make_shared<JSONCompactEachRowRowOutputFormat>(buf, sample, params, format_settings, true, true);\n     });\n }\n \ndiff --git a/src/Processors/Formats/Impl/JSONCompactEachRowRowOutputFormat.h b/src/Processors/Formats/Impl/JSONCompactEachRowRowOutputFormat.h\nindex 56936783e78d..eb426bec15d7 100644\n--- a/src/Processors/Formats/Impl/JSONCompactEachRowRowOutputFormat.h\n+++ b/src/Processors/Formats/Impl/JSONCompactEachRowRowOutputFormat.h\n@@ -18,7 +18,7 @@ class JSONCompactEachRowRowOutputFormat : public IRowOutputFormat\n     JSONCompactEachRowRowOutputFormat(\n         WriteBuffer & out_,\n         const Block & header_,\n-        FormatFactory::WriteCallback callback,\n+        const RowOutputFormatParams & params_,\n         const FormatSettings & settings_,\n         bool with_names_,\n         bool yield_strings_);\ndiff --git a/src/Processors/Formats/Impl/JSONCompactRowOutputFormat.cpp b/src/Processors/Formats/Impl/JSONCompactRowOutputFormat.cpp\nindex c36942cff09a..97304afbebd9 100644\n--- a/src/Processors/Formats/Impl/JSONCompactRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/JSONCompactRowOutputFormat.cpp\n@@ -10,10 +10,10 @@ namespace DB\n JSONCompactRowOutputFormat::JSONCompactRowOutputFormat(\n     WriteBuffer & out_,\n     const Block & header,\n-    FormatFactory::WriteCallback callback,\n+    const RowOutputFormatParams & params_,\n     const FormatSettings & settings_,\n     bool yield_strings_)\n-    : JSONRowOutputFormat(out_, header, callback, settings_, yield_strings_)\n+    : JSONRowOutputFormat(out_, header, params_, settings_, yield_strings_)\n {\n }\n \n@@ -93,19 +93,19 @@ void registerOutputFormatProcessorJSONCompact(FormatFactory & factory)\n     factory.registerOutputFormatProcessor(\"JSONCompact\", [](\n         WriteBuffer & buf,\n         const Block & sample,\n-        FormatFactory::WriteCallback callback,\n+        const RowOutputFormatParams & params,\n         const FormatSettings & format_settings)\n     {\n-        return std::make_shared<JSONCompactRowOutputFormat>(buf, sample, callback, format_settings, false);\n+        return std::make_shared<JSONCompactRowOutputFormat>(buf, sample, params, format_settings, false);\n     });\n \n     factory.registerOutputFormatProcessor(\"JSONCompactStrings\", [](\n         WriteBuffer & buf,\n         const Block & sample,\n-        FormatFactory::WriteCallback callback,\n+        const RowOutputFormatParams & params,\n         const FormatSettings & format_settings)\n     {\n-        return std::make_shared<JSONCompactRowOutputFormat>(buf, sample, callback, format_settings, true);\n+        return std::make_shared<JSONCompactRowOutputFormat>(buf, sample, params, format_settings, true);\n     });\n }\n \ndiff --git a/src/Processors/Formats/Impl/JSONCompactRowOutputFormat.h b/src/Processors/Formats/Impl/JSONCompactRowOutputFormat.h\nindex 6585016c44f5..71ba3579837b 100644\n--- a/src/Processors/Formats/Impl/JSONCompactRowOutputFormat.h\n+++ b/src/Processors/Formats/Impl/JSONCompactRowOutputFormat.h\n@@ -19,7 +19,7 @@ class JSONCompactRowOutputFormat : public JSONRowOutputFormat\n     JSONCompactRowOutputFormat(\n         WriteBuffer & out_,\n         const Block & header,\n-        FormatFactory::WriteCallback callback,\n+        const RowOutputFormatParams & params_,\n         const FormatSettings & settings_,\n         bool yield_strings_);\n \ndiff --git a/src/Processors/Formats/Impl/JSONEachRowRowOutputFormat.cpp b/src/Processors/Formats/Impl/JSONEachRowRowOutputFormat.cpp\nindex 069499d99c16..b3b839496421 100644\n--- a/src/Processors/Formats/Impl/JSONEachRowRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/JSONEachRowRowOutputFormat.cpp\n@@ -11,10 +11,10 @@ namespace DB\n JSONEachRowRowOutputFormat::JSONEachRowRowOutputFormat(\n     WriteBuffer & out_,\n     const Block & header_,\n-    FormatFactory::WriteCallback callback,\n+    const RowOutputFormatParams & params_,\n     const FormatSettings & settings_,\n     bool yield_strings_)\n-    : IRowOutputFormat(header_, out_, callback), settings(settings_), yield_strings(yield_strings_)\n+    : IRowOutputFormat(header_, out_, params_), settings(settings_), yield_strings(yield_strings_)\n {\n     const auto & sample = getPort(PortKind::Main).getHeader();\n     size_t columns = sample.columns();\n@@ -71,19 +71,19 @@ void registerOutputFormatProcessorJSONEachRow(FormatFactory & factory)\n     factory.registerOutputFormatProcessor(\"JSONEachRow\", [](\n         WriteBuffer & buf,\n         const Block & sample,\n-        FormatFactory::WriteCallback callback,\n+        const RowOutputFormatParams & params,\n         const FormatSettings & format_settings)\n     {\n-        return std::make_shared<JSONEachRowRowOutputFormat>(buf, sample, callback, format_settings, false);\n+        return std::make_shared<JSONEachRowRowOutputFormat>(buf, sample, params, format_settings, false);\n     });\n \n     factory.registerOutputFormatProcessor(\"JSONStringsEachRow\", [](\n         WriteBuffer & buf,\n         const Block & sample,\n-        FormatFactory::WriteCallback callback,\n+        const RowOutputFormatParams & params,\n         const FormatSettings & format_settings)\n     {\n-        return std::make_shared<JSONEachRowRowOutputFormat>(buf, sample, callback, format_settings, true);\n+        return std::make_shared<JSONEachRowRowOutputFormat>(buf, sample, params, format_settings, true);\n     });\n }\n \ndiff --git a/src/Processors/Formats/Impl/JSONEachRowRowOutputFormat.h b/src/Processors/Formats/Impl/JSONEachRowRowOutputFormat.h\nindex 5346a1ab19f7..bd9cfff68c5b 100644\n--- a/src/Processors/Formats/Impl/JSONEachRowRowOutputFormat.h\n+++ b/src/Processors/Formats/Impl/JSONEachRowRowOutputFormat.h\n@@ -18,7 +18,7 @@ class JSONEachRowRowOutputFormat : public IRowOutputFormat\n     JSONEachRowRowOutputFormat(\n         WriteBuffer & out_,\n         const Block & header_,\n-        FormatFactory::WriteCallback callback,\n+        const RowOutputFormatParams & params_,\n         const FormatSettings & settings_,\n         bool yield_strings_);\n \ndiff --git a/src/Processors/Formats/Impl/JSONEachRowWithProgressRowOutputFormat.cpp b/src/Processors/Formats/Impl/JSONEachRowWithProgressRowOutputFormat.cpp\nindex 35720df96728..48c23abd6809 100644\n--- a/src/Processors/Formats/Impl/JSONEachRowWithProgressRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/JSONEachRowWithProgressRowOutputFormat.cpp\n@@ -33,19 +33,19 @@ void registerOutputFormatProcessorJSONEachRowWithProgress(FormatFactory & factor\n     factory.registerOutputFormatProcessor(\"JSONEachRowWithProgress\", [](\n             WriteBuffer & buf,\n             const Block & sample,\n-            FormatFactory::WriteCallback callback,\n+            const RowOutputFormatParams & params,\n             const FormatSettings & format_settings)\n     {\n-        return std::make_shared<JSONEachRowWithProgressRowOutputFormat>(buf, sample, callback, format_settings, false);\n+        return std::make_shared<JSONEachRowWithProgressRowOutputFormat>(buf, sample, params, format_settings, false);\n     });\n \n     factory.registerOutputFormatProcessor(\"JSONStringsEachRowWithProgress\", [](\n             WriteBuffer & buf,\n             const Block & sample,\n-            FormatFactory::WriteCallback callback,\n+            const RowOutputFormatParams & params,\n             const FormatSettings & format_settings)\n     {\n-        return std::make_shared<JSONEachRowWithProgressRowOutputFormat>(buf, sample, callback, format_settings, true);\n+        return std::make_shared<JSONEachRowWithProgressRowOutputFormat>(buf, sample, params, format_settings, true);\n     });\n }\n \ndiff --git a/src/Processors/Formats/Impl/JSONRowOutputFormat.cpp b/src/Processors/Formats/Impl/JSONRowOutputFormat.cpp\nindex 7dd7eb9953a4..517f126060ff 100644\n--- a/src/Processors/Formats/Impl/JSONRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/JSONRowOutputFormat.cpp\n@@ -10,10 +10,10 @@ namespace DB\n JSONRowOutputFormat::JSONRowOutputFormat(\n     WriteBuffer & out_,\n     const Block & header,\n-    FormatFactory::WriteCallback callback,\n+    const RowOutputFormatParams & params_,\n     const FormatSettings & settings_,\n     bool yield_strings_)\n-    : IRowOutputFormat(header, out_, callback), settings(settings_), yield_strings(yield_strings_)\n+    : IRowOutputFormat(header, out_, params_), settings(settings_), yield_strings(yield_strings_)\n {\n     const auto & sample = getPort(PortKind::Main).getHeader();\n     NamesAndTypesList columns(sample.getNamesAndTypesList());\n@@ -271,19 +271,19 @@ void registerOutputFormatProcessorJSON(FormatFactory & factory)\n     factory.registerOutputFormatProcessor(\"JSON\", [](\n         WriteBuffer & buf,\n         const Block & sample,\n-        FormatFactory::WriteCallback callback,\n+        const RowOutputFormatParams & params,\n         const FormatSettings & format_settings)\n     {\n-        return std::make_shared<JSONRowOutputFormat>(buf, sample, callback, format_settings, false);\n+        return std::make_shared<JSONRowOutputFormat>(buf, sample, params, format_settings, false);\n     });\n \n     factory.registerOutputFormatProcessor(\"JSONStrings\", [](\n         WriteBuffer & buf,\n         const Block & sample,\n-        FormatFactory::WriteCallback callback,\n+        const RowOutputFormatParams & params,\n         const FormatSettings & format_settings)\n     {\n-        return std::make_shared<JSONRowOutputFormat>(buf, sample, callback, format_settings, true);\n+        return std::make_shared<JSONRowOutputFormat>(buf, sample, params, format_settings, true);\n     });\n }\n \ndiff --git a/src/Processors/Formats/Impl/JSONRowOutputFormat.h b/src/Processors/Formats/Impl/JSONRowOutputFormat.h\nindex 4e9cceb717ec..88b74afbabdf 100644\n--- a/src/Processors/Formats/Impl/JSONRowOutputFormat.h\n+++ b/src/Processors/Formats/Impl/JSONRowOutputFormat.h\n@@ -19,7 +19,7 @@ class JSONRowOutputFormat : public IRowOutputFormat\n     JSONRowOutputFormat(\n         WriteBuffer & out_,\n         const Block & header,\n-        FormatFactory::WriteCallback callback,\n+        const RowOutputFormatParams & params_,\n         const FormatSettings & settings_,\n         bool yield_strings_);\n \ndiff --git a/src/Processors/Formats/Impl/MarkdownRowOutputFormat.cpp b/src/Processors/Formats/Impl/MarkdownRowOutputFormat.cpp\nindex ae793232cf42..51bba07d995c 100644\n--- a/src/Processors/Formats/Impl/MarkdownRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/MarkdownRowOutputFormat.cpp\n@@ -5,8 +5,8 @@\n namespace DB\n {\n \n-MarkdownRowOutputFormat::MarkdownRowOutputFormat(WriteBuffer & out_, const Block & header_, FormatFactory::WriteCallback callback, const FormatSettings & format_settings_)\n-    : IRowOutputFormat(header_, out_, callback), format_settings(format_settings_) {}\n+MarkdownRowOutputFormat::MarkdownRowOutputFormat(WriteBuffer & out_, const Block & header_, const RowOutputFormatParams & params_, const FormatSettings & format_settings_)\n+    : IRowOutputFormat(header_, out_, params_), format_settings(format_settings_) {}\n \n void MarkdownRowOutputFormat::writePrefix()\n {\n@@ -60,10 +60,10 @@ void registerOutputFormatProcessorMarkdown(FormatFactory & factory)\n     factory.registerOutputFormatProcessor(\"Markdown\", [](\n         WriteBuffer & buf,\n         const Block & sample,\n-        FormatFactory::WriteCallback callback,\n+        const RowOutputFormatParams & params,\n         const FormatSettings & settings)\n     {\n-        return std::make_shared<MarkdownRowOutputFormat>(buf, sample, callback, settings);\n+        return std::make_shared<MarkdownRowOutputFormat>(buf, sample, params, settings);\n     });\n }\n \ndiff --git a/src/Processors/Formats/Impl/MarkdownRowOutputFormat.h b/src/Processors/Formats/Impl/MarkdownRowOutputFormat.h\nindex 2f39cce01810..6bfb763d818d 100644\n--- a/src/Processors/Formats/Impl/MarkdownRowOutputFormat.h\n+++ b/src/Processors/Formats/Impl/MarkdownRowOutputFormat.h\n@@ -12,7 +12,7 @@ class ReadBuffer;\n class MarkdownRowOutputFormat : public IRowOutputFormat\n {\n public:\n-    MarkdownRowOutputFormat(WriteBuffer & out_, const Block & header_, FormatFactory::WriteCallback callback, const FormatSettings & format_settings_);\n+    MarkdownRowOutputFormat(WriteBuffer & out_, const Block & header_, const RowOutputFormatParams & params_, const FormatSettings & format_settings_);\n \n     /// Write higher part of markdown table like this:\n     /// |columnName1|columnName2|...|columnNameN|\ndiff --git a/src/Processors/Formats/Impl/MsgPackRowOutputFormat.cpp b/src/Processors/Formats/Impl/MsgPackRowOutputFormat.cpp\nindex cc0a5f297eab..bb20d3d98992 100644\n--- a/src/Processors/Formats/Impl/MsgPackRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/MsgPackRowOutputFormat.cpp\n@@ -24,8 +24,8 @@ namespace ErrorCodes\n     extern const int ILLEGAL_COLUMN;\n }\n \n-MsgPackRowOutputFormat::MsgPackRowOutputFormat(WriteBuffer & out_, const Block & header_, FormatFactory::WriteCallback callback)\n-    : IRowOutputFormat(header_, out_, callback), packer(out_) {}\n+MsgPackRowOutputFormat::MsgPackRowOutputFormat(WriteBuffer & out_, const Block & header_, const RowOutputFormatParams & params_)\n+    : IRowOutputFormat(header_, out_, params_), packer(out_) {}\n \n void MsgPackRowOutputFormat::serializeField(const IColumn & column, DataTypePtr data_type, size_t row_num)\n {\n@@ -154,10 +154,10 @@ void registerOutputFormatProcessorMsgPack(FormatFactory & factory)\n     factory.registerOutputFormatProcessor(\"MsgPack\", [](\n             WriteBuffer & buf,\n             const Block & sample,\n-            FormatFactory::WriteCallback callback,\n+            const RowOutputFormatParams & params,\n             const FormatSettings &)\n     {\n-        return std::make_shared<MsgPackRowOutputFormat>(buf, sample, callback);\n+        return std::make_shared<MsgPackRowOutputFormat>(buf, sample, params);\n     });\n }\n \ndiff --git a/src/Processors/Formats/Impl/MsgPackRowOutputFormat.h b/src/Processors/Formats/Impl/MsgPackRowOutputFormat.h\nindex 00bdfcc21cf5..b6764ed4a4f4 100644\n--- a/src/Processors/Formats/Impl/MsgPackRowOutputFormat.h\n+++ b/src/Processors/Formats/Impl/MsgPackRowOutputFormat.h\n@@ -20,7 +20,7 @@ namespace DB\n class MsgPackRowOutputFormat : public IRowOutputFormat\n {\n public:\n-    MsgPackRowOutputFormat(WriteBuffer & out_, const Block & header_, FormatFactory::WriteCallback callback);\n+    MsgPackRowOutputFormat(WriteBuffer & out_, const Block & header_, const RowOutputFormatParams & params_);\n \n     String getName() const override { return \"MsgPackRowOutputFormat\"; }\n \ndiff --git a/src/Processors/Formats/Impl/MySQLOutputFormat.cpp b/src/Processors/Formats/Impl/MySQLOutputFormat.cpp\nindex b3d4198a3969..067c5cb0ab94 100644\n--- a/src/Processors/Formats/Impl/MySQLOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/MySQLOutputFormat.cpp\n@@ -95,7 +95,7 @@ void registerOutputFormatProcessorMySQLWire(FormatFactory & factory)\n         \"MySQLWire\",\n         [](WriteBuffer & buf,\n            const Block & sample,\n-           FormatFactory::WriteCallback,\n+           const RowOutputFormatParams &,\n            const FormatSettings & settings) { return std::make_shared<MySQLOutputFormat>(buf, sample, settings); });\n }\n \ndiff --git a/src/Processors/Formats/Impl/NativeFormat.cpp b/src/Processors/Formats/Impl/NativeFormat.cpp\nindex bbc0d05272b0..86fafd4e2c35 100644\n--- a/src/Processors/Formats/Impl/NativeFormat.cpp\n+++ b/src/Processors/Formats/Impl/NativeFormat.cpp\n@@ -168,7 +168,7 @@ void registerOutputFormatProcessorNative(FormatFactory & factory)\n     factory.registerOutputFormatProcessor(\"Native\", [](\n         WriteBuffer & buf,\n         const Block & sample,\n-        FormatFactory::WriteCallback,\n+        const RowOutputFormatParams &,\n         const FormatSettings &)\n     {\n         return std::make_shared<NativeOutputFormatFromNativeBlockOutputStream>(sample, buf);\ndiff --git a/src/Processors/Formats/Impl/NullFormat.cpp b/src/Processors/Formats/Impl/NullFormat.cpp\nindex c8c773e7acfd..fda79d6981aa 100644\n--- a/src/Processors/Formats/Impl/NullFormat.cpp\n+++ b/src/Processors/Formats/Impl/NullFormat.cpp\n@@ -21,7 +21,7 @@ void registerOutputFormatProcessorNull(FormatFactory & factory)\n     factory.registerOutputFormatProcessor(\"Null\", [](\n         WriteBuffer & buf,\n         const Block & sample,\n-        FormatFactory::WriteCallback,\n+        const RowOutputFormatParams &,\n         const FormatSettings &)\n     {\n         return std::make_shared<NullOutputFormat>(sample, buf);\ndiff --git a/src/Processors/Formats/Impl/ODBCDriver2BlockOutputFormat.cpp b/src/Processors/Formats/Impl/ODBCDriver2BlockOutputFormat.cpp\nindex b7018a1c1e81..3dd72a7a5c79 100644\n--- a/src/Processors/Formats/Impl/ODBCDriver2BlockOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/ODBCDriver2BlockOutputFormat.cpp\n@@ -107,7 +107,7 @@ void ODBCDriver2BlockOutputFormat::writePrefix()\n void registerOutputFormatProcessorODBCDriver2(FormatFactory & factory)\n {\n     factory.registerOutputFormatProcessor(\n-        \"ODBCDriver2\", [](WriteBuffer & buf, const Block & sample, FormatFactory::WriteCallback, const FormatSettings & format_settings)\n+        \"ODBCDriver2\", [](WriteBuffer & buf, const Block & sample, const RowOutputFormatParams &, const FormatSettings & format_settings)\n         {\n             return std::make_shared<ODBCDriver2BlockOutputFormat>(buf, sample, format_settings);\n         });\ndiff --git a/src/Processors/Formats/Impl/ORCBlockOutputFormat.cpp b/src/Processors/Formats/Impl/ORCBlockOutputFormat.cpp\nindex 3bf2a9dbf597..019ffc73d813 100644\n--- a/src/Processors/Formats/Impl/ORCBlockOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/ORCBlockOutputFormat.cpp\n@@ -433,7 +433,7 @@ void registerOutputFormatProcessorORC(FormatFactory & factory)\n     factory.registerOutputFormatProcessor(\"ORC\", [](\n             WriteBuffer & buf,\n             const Block & sample,\n-            FormatFactory::WriteCallback,\n+            const RowOutputFormatParams &,\n             const FormatSettings & format_settings)\n     {\n         return std::make_shared<ORCBlockOutputFormat>(buf, sample, format_settings);\ndiff --git a/src/Processors/Formats/Impl/ParquetBlockOutputFormat.cpp b/src/Processors/Formats/Impl/ParquetBlockOutputFormat.cpp\nindex 695b8efa3fb7..78b6a9c53a44 100644\n--- a/src/Processors/Formats/Impl/ParquetBlockOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/ParquetBlockOutputFormat.cpp\n@@ -84,7 +84,7 @@ void registerOutputFormatProcessorParquet(FormatFactory & factory)\n         \"Parquet\",\n         [](WriteBuffer & buf,\n            const Block & sample,\n-           FormatFactory::WriteCallback,\n+           const RowOutputFormatParams &,\n            const FormatSettings & format_settings)\n         {\n             auto impl = std::make_shared<ParquetBlockOutputFormat>(buf, sample, format_settings);\ndiff --git a/src/Processors/Formats/Impl/PostgreSQLOutputFormat.cpp b/src/Processors/Formats/Impl/PostgreSQLOutputFormat.cpp\nindex d5e5d97e029d..50b3def929e3 100644\n--- a/src/Processors/Formats/Impl/PostgreSQLOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/PostgreSQLOutputFormat.cpp\n@@ -73,7 +73,7 @@ void registerOutputFormatProcessorPostgreSQLWire(FormatFactory & factory)\n         \"PostgreSQLWire\",\n         [](WriteBuffer & buf,\n            const Block & sample,\n-           const FormatFactory::WriteCallback &,\n+           const RowOutputFormatParams &,\n            const FormatSettings & settings) { return std::make_shared<PostgreSQLOutputFormat>(buf, sample, settings); });\n }\n }\ndiff --git a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp\nindex b07cf83eb85e..628a90beefb1 100644\n--- a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp\n@@ -403,7 +403,7 @@ void registerOutputFormatProcessorPretty(FormatFactory & factory)\n     factory.registerOutputFormatProcessor(\"Pretty\", [](\n         WriteBuffer & buf,\n         const Block & sample,\n-        FormatFactory::WriteCallback,\n+        const RowOutputFormatParams &,\n         const FormatSettings & format_settings)\n     {\n         return std::make_shared<PrettyBlockOutputFormat>(buf, sample, format_settings);\n@@ -412,7 +412,7 @@ void registerOutputFormatProcessorPretty(FormatFactory & factory)\n     factory.registerOutputFormatProcessor(\"PrettyNoEscapes\", [](\n         WriteBuffer & buf,\n         const Block & sample,\n-        FormatFactory::WriteCallback,\n+        const RowOutputFormatParams &,\n         const FormatSettings & format_settings)\n     {\n         FormatSettings changed_settings = format_settings;\ndiff --git a/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.cpp b/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.cpp\nindex e832dd833888..b81ba84c732a 100644\n--- a/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.cpp\n@@ -259,7 +259,7 @@ void registerOutputFormatProcessorPrettyCompact(FormatFactory & factory)\n         factory.registerOutputFormatProcessor(name, [mono_block = mono_block](\n             WriteBuffer & buf,\n             const Block & sample,\n-            FormatFactory::WriteCallback,\n+            const RowOutputFormatParams &,\n             const FormatSettings & format_settings)\n         {\n             return std::make_shared<PrettyCompactBlockOutputFormat>(buf, sample, format_settings, mono_block);\n@@ -269,7 +269,7 @@ void registerOutputFormatProcessorPrettyCompact(FormatFactory & factory)\n     factory.registerOutputFormatProcessor(\"PrettyCompactNoEscapes\", [](\n         WriteBuffer & buf,\n         const Block & sample,\n-        FormatFactory::WriteCallback,\n+        const RowOutputFormatParams &,\n         const FormatSettings & format_settings)\n     {\n         FormatSettings changed_settings = format_settings;\ndiff --git a/src/Processors/Formats/Impl/PrettySpaceBlockOutputFormat.cpp b/src/Processors/Formats/Impl/PrettySpaceBlockOutputFormat.cpp\nindex f1a5cbac8e03..f3fb27a5558d 100644\n--- a/src/Processors/Formats/Impl/PrettySpaceBlockOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/PrettySpaceBlockOutputFormat.cpp\n@@ -113,7 +113,7 @@ void registerOutputFormatProcessorPrettySpace(FormatFactory & factory)\n     factory.registerOutputFormatProcessor(\"PrettySpace\", [](\n         WriteBuffer & buf,\n         const Block & sample,\n-        FormatFactory::WriteCallback,\n+        const RowOutputFormatParams &,\n         const FormatSettings & format_settings)\n     {\n         return std::make_shared<PrettySpaceBlockOutputFormat>(buf, sample, format_settings);\n@@ -122,7 +122,7 @@ void registerOutputFormatProcessorPrettySpace(FormatFactory & factory)\n     factory.registerOutputFormatProcessor(\"PrettySpaceNoEscapes\", [](\n         WriteBuffer & buf,\n         const Block & sample,\n-        FormatFactory::WriteCallback,\n+        const RowOutputFormatParams &,\n         const FormatSettings & format_settings)\n     {\n         FormatSettings changed_settings = format_settings;\ndiff --git a/src/Processors/Formats/Impl/ProtobufRowInputFormat.cpp b/src/Processors/Formats/Impl/ProtobufRowInputFormat.cpp\nindex 50d9cef9bfc0..d1420d0d38e2 100644\n--- a/src/Processors/Formats/Impl/ProtobufRowInputFormat.cpp\n+++ b/src/Processors/Formats/Impl/ProtobufRowInputFormat.cpp\n@@ -11,10 +11,10 @@\n namespace DB\n {\n \n-ProtobufRowInputFormat::ProtobufRowInputFormat(ReadBuffer & in_, const Block & header_, Params params_, const FormatSchemaInfo & info_)\n+ProtobufRowInputFormat::ProtobufRowInputFormat(ReadBuffer & in_, const Block & header_, Params params_, const FormatSchemaInfo & info_, const bool use_length_delimiters_)\n     : IRowInputFormat(header_, in_, params_)\n     , data_types(header_.getDataTypes())\n-    , reader(in, ProtobufSchemas::instance().getMessageTypeForFormatSchema(info_), header_.getNames())\n+    , reader(in, ProtobufSchemas::instance().getMessageTypeForFormatSchema(info_), header_.getNames(), use_length_delimiters_)\n {\n }\n \n@@ -67,16 +67,20 @@ void ProtobufRowInputFormat::syncAfterError()\n \n void registerInputFormatProcessorProtobuf(FormatFactory & factory)\n {\n-    factory.registerInputFormatProcessor(\"Protobuf\", [](\n-        ReadBuffer & buf,\n-        const Block & sample,\n-        IRowInputFormat::Params params,\n-        const FormatSettings & settings)\n+    for (bool use_length_delimiters : {false, true})\n     {\n-        return std::make_shared<ProtobufRowInputFormat>(buf, sample, std::move(params),\n-            FormatSchemaInfo(settings.schema.format_schema, \"Protobuf\", true,\n-                             settings.schema.is_server, settings.schema.format_schema_path));\n-    });\n+        factory.registerInputFormatProcessor(use_length_delimiters ? \"Protobuf\" : \"ProtobufSingle\", [use_length_delimiters](\n+            ReadBuffer & buf,\n+            const Block & sample,\n+            IRowInputFormat::Params params,\n+            const FormatSettings & settings)\n+        {\n+            return std::make_shared<ProtobufRowInputFormat>(buf, sample, std::move(params),\n+                FormatSchemaInfo(settings.schema.format_schema, \"Protobuf\", true,\n+                                settings.schema.is_server, settings.schema.format_schema_path),\n+                use_length_delimiters);\n+        });\n+    }\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/ProtobufRowInputFormat.h b/src/Processors/Formats/Impl/ProtobufRowInputFormat.h\nindex 8dd36722efc9..c6bc350e8935 100644\n--- a/src/Processors/Formats/Impl/ProtobufRowInputFormat.h\n+++ b/src/Processors/Formats/Impl/ProtobufRowInputFormat.h\n@@ -16,17 +16,20 @@ class FormatSchemaInfo;\n \n \n /** Stream designed to deserialize data from the google protobuf format.\n-  * Each row is read as a separated message.\n-  * These messages are delimited according to documentation\n+  * One Protobuf message is parsed as one row of data.\n+  *\n+  * Input buffer may contain single protobuf message (use_length_delimiters_ = false),\n+  * or any number of messages (use_length_delimiters = true). In the second case\n+  * parser assumes messages are length-delimited according to documentation\n   * https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/util/delimited_message_util.h\n-  * Serializing in the protobuf format requires the 'format_schema' setting to be set, e.g.\n+  * Parsing of the protobuf format requires the 'format_schema' setting to be set, e.g.\n   * INSERT INTO table FORMAT Protobuf SETTINGS format_schema = 'schema:Message'\n   * where schema is the name of \"schema.proto\" file specifying protobuf schema.\n   */\n class ProtobufRowInputFormat : public IRowInputFormat\n {\n public:\n-    ProtobufRowInputFormat(ReadBuffer & in_, const Block & header_, Params params_, const FormatSchemaInfo & info_);\n+    ProtobufRowInputFormat(ReadBuffer & in_, const Block & header_, Params params_, const FormatSchemaInfo & info_, const bool use_length_delimiters_);\n     ~ProtobufRowInputFormat() override;\n \n     String getName() const override { return \"ProtobufRowInputFormat\"; }\ndiff --git a/src/Processors/Formats/Impl/ProtobufRowOutputFormat.cpp b/src/Processors/Formats/Impl/ProtobufRowOutputFormat.cpp\nindex a9efd08db51f..930a83c52daa 100644\n--- a/src/Processors/Formats/Impl/ProtobufRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/ProtobufRowOutputFormat.cpp\n@@ -14,23 +14,31 @@ namespace DB\n {\n namespace ErrorCodes\n {\n+    extern const int NO_ROW_DELIMITER;\n }\n \n \n ProtobufRowOutputFormat::ProtobufRowOutputFormat(\n     WriteBuffer & out_,\n     const Block & header,\n-    FormatFactory::WriteCallback callback,\n-    const FormatSchemaInfo & format_schema)\n-    : IRowOutputFormat(header, out_, callback)\n+    const RowOutputFormatParams & params_,\n+    const FormatSchemaInfo & format_schema,\n+    const bool use_length_delimiters_)\n+    : IRowOutputFormat(header, out_, params_)\n     , data_types(header.getDataTypes())\n-    , writer(out, ProtobufSchemas::instance().getMessageTypeForFormatSchema(format_schema), header.getNames())\n+    , writer(out, ProtobufSchemas::instance().getMessageTypeForFormatSchema(format_schema), header.getNames(), use_length_delimiters_)\n+    , throw_on_multiple_rows_undelimited(!use_length_delimiters_ && !params_.ignore_no_row_delimiter)\n {\n     value_indices.resize(header.columns());\n }\n \n void ProtobufRowOutputFormat::write(const Columns & columns, size_t row_num)\n {\n+    if (throw_on_multiple_rows_undelimited && !first_row)\n+    {\n+        throw Exception(\"The ProtobufSingle format can't be used to write multiple rows because this format doesn't have any row delimiter.\", ErrorCodes::NO_ROW_DELIMITER);\n+    }\n+\n     writer.startMessage();\n     std::fill(value_indices.begin(), value_indices.end(), 0);\n     size_t column_index;\n@@ -43,17 +51,21 @@ void ProtobufRowOutputFormat::write(const Columns & columns, size_t row_num)\n \n void registerOutputFormatProcessorProtobuf(FormatFactory & factory)\n {\n-    factory.registerOutputFormatProcessor(\n-        \"Protobuf\",\n-        [](WriteBuffer & buf,\n-           const Block & header,\n-           FormatFactory::WriteCallback callback,\n-           const FormatSettings & settings)\n-        {\n-            return std::make_shared<ProtobufRowOutputFormat>(buf, header, std::move(callback),\n-                FormatSchemaInfo(settings.schema.format_schema, \"Protobuf\", true,\n-                                 settings.schema.is_server, settings.schema.format_schema_path));\n-        });\n+    for (bool use_length_delimiters : {false, true})\n+    {\n+        factory.registerOutputFormatProcessor(\n+            use_length_delimiters ? \"Protobuf\" : \"ProtobufSingle\",\n+            [use_length_delimiters](WriteBuffer & buf,\n+               const Block & header,\n+               const RowOutputFormatParams & params,\n+               const FormatSettings & settings)\n+            {\n+                return std::make_shared<ProtobufRowOutputFormat>(buf, header, params,\n+                    FormatSchemaInfo(settings.schema.format_schema, \"Protobuf\", true,\n+                                     settings.schema.is_server, settings.schema.format_schema_path),\n+                                     use_length_delimiters);\n+            });\n+    }\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/ProtobufRowOutputFormat.h b/src/Processors/Formats/Impl/ProtobufRowOutputFormat.h\nindex f216af01d80d..740efcfa24c3 100644\n--- a/src/Processors/Formats/Impl/ProtobufRowOutputFormat.h\n+++ b/src/Processors/Formats/Impl/ProtobufRowOutputFormat.h\n@@ -25,7 +25,9 @@ namespace DB\n {\n /** Stream designed to serialize data in the google protobuf format.\n   * Each row is written as a separated message.\n-  * These messages are delimited according to documentation\n+  *\n+  * With use_length_delimiters=0 it can write only single row as plain protobuf message,\n+  * otherwise Protobuf messages are delimited according to documentation\n   * https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/util/delimited_message_util.h\n   * Serializing in the protobuf format requires the 'format_schema' setting to be set, e.g.\n   * SELECT * from table FORMAT Protobuf SETTINGS format_schema = 'schema:Message'\n@@ -37,8 +39,9 @@ class ProtobufRowOutputFormat : public IRowOutputFormat\n     ProtobufRowOutputFormat(\n         WriteBuffer & out_,\n         const Block & header,\n-        FormatFactory::WriteCallback callback,\n-        const FormatSchemaInfo & format_schema);\n+        const RowOutputFormatParams & params_,\n+        const FormatSchemaInfo & format_schema,\n+        const bool use_length_delimiters_);\n \n     String getName() const override { return \"ProtobufRowOutputFormat\"; }\n \n@@ -50,6 +53,7 @@ class ProtobufRowOutputFormat : public IRowOutputFormat\n     DataTypes data_types;\n     ProtobufWriter writer;\n     std::vector<size_t> value_indices;\n+    const bool throw_on_multiple_rows_undelimited;\n };\n \n }\ndiff --git a/src/Processors/Formats/Impl/RawBLOBRowOutputFormat.cpp b/src/Processors/Formats/Impl/RawBLOBRowOutputFormat.cpp\nindex 786edce5edc1..bcee94d8ad54 100644\n--- a/src/Processors/Formats/Impl/RawBLOBRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/RawBLOBRowOutputFormat.cpp\n@@ -9,8 +9,8 @@ namespace DB\n RawBLOBRowOutputFormat::RawBLOBRowOutputFormat(\n     WriteBuffer & out_,\n     const Block & header_,\n-    FormatFactory::WriteCallback callback)\n-    : IRowOutputFormat(header_, out_, callback)\n+    const RowOutputFormatParams & params_)\n+    : IRowOutputFormat(header_, out_, params_)\n {\n }\n \n@@ -27,10 +27,10 @@ void registerOutputFormatProcessorRawBLOB(FormatFactory & factory)\n     factory.registerOutputFormatProcessor(\"RawBLOB\", [](\n         WriteBuffer & buf,\n         const Block & sample,\n-        FormatFactory::WriteCallback callback,\n+        const RowOutputFormatParams & params,\n         const FormatSettings &)\n     {\n-        return std::make_shared<RawBLOBRowOutputFormat>(buf, sample, callback);\n+        return std::make_shared<RawBLOBRowOutputFormat>(buf, sample, params);\n     });\n }\n \ndiff --git a/src/Processors/Formats/Impl/RawBLOBRowOutputFormat.h b/src/Processors/Formats/Impl/RawBLOBRowOutputFormat.h\nindex b6c13597d4b7..6a9a70bb12f8 100644\n--- a/src/Processors/Formats/Impl/RawBLOBRowOutputFormat.h\n+++ b/src/Processors/Formats/Impl/RawBLOBRowOutputFormat.h\n@@ -30,7 +30,7 @@ class RawBLOBRowOutputFormat : public IRowOutputFormat\n     RawBLOBRowOutputFormat(\n         WriteBuffer & out_,\n         const Block & header_,\n-        FormatFactory::WriteCallback callback);\n+        const RowOutputFormatParams & params_);\n \n     String getName() const override { return \"RawBLOBRowOutputFormat\"; }\n \ndiff --git a/src/Processors/Formats/Impl/TSKVRowOutputFormat.cpp b/src/Processors/Formats/Impl/TSKVRowOutputFormat.cpp\nindex 17677acfb865..d65ce95313e5 100644\n--- a/src/Processors/Formats/Impl/TSKVRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/TSKVRowOutputFormat.cpp\n@@ -7,8 +7,8 @@\n namespace DB\n {\n \n-TSKVRowOutputFormat::TSKVRowOutputFormat(WriteBuffer & out_, const Block & header, FormatFactory::WriteCallback callback, const FormatSettings & format_settings_)\n-    : TabSeparatedRowOutputFormat(out_, header, false, false, callback, format_settings_)\n+TSKVRowOutputFormat::TSKVRowOutputFormat(WriteBuffer & out_, const Block & header, const RowOutputFormatParams & params_, const FormatSettings & format_settings_)\n+    : TabSeparatedRowOutputFormat(out_, header, false, false, params_, format_settings_)\n {\n     const auto & sample = getPort(PortKind::Main).getHeader();\n     NamesAndTypesList columns(sample.getNamesAndTypesList());\n@@ -44,10 +44,10 @@ void registerOutputFormatProcessorTSKV(FormatFactory & factory)\n     factory.registerOutputFormatProcessor(\"TSKV\", [](\n         WriteBuffer & buf,\n         const Block & sample,\n-        FormatFactory::WriteCallback callback,\n+        const RowOutputFormatParams & params,\n         const FormatSettings & settings)\n     {\n-        return std::make_shared<TSKVRowOutputFormat>(buf, sample, callback, settings);\n+        return std::make_shared<TSKVRowOutputFormat>(buf, sample, params, settings);\n     });\n }\n \ndiff --git a/src/Processors/Formats/Impl/TSKVRowOutputFormat.h b/src/Processors/Formats/Impl/TSKVRowOutputFormat.h\nindex 7166176e2f4a..1b341cbbc72f 100644\n--- a/src/Processors/Formats/Impl/TSKVRowOutputFormat.h\n+++ b/src/Processors/Formats/Impl/TSKVRowOutputFormat.h\n@@ -14,7 +14,7 @@ namespace DB\n class TSKVRowOutputFormat: public TabSeparatedRowOutputFormat\n {\n public:\n-    TSKVRowOutputFormat(WriteBuffer & out_, const Block & header, FormatFactory::WriteCallback callback, const FormatSettings & format_settings);\n+    TSKVRowOutputFormat(WriteBuffer & out_, const Block & header, const RowOutputFormatParams & params_, const FormatSettings & format_settings);\n \n     String getName() const override { return \"TSKVRowOutputFormat\"; }\n \ndiff --git a/src/Processors/Formats/Impl/TabSeparatedRawRowOutputFormat.h b/src/Processors/Formats/Impl/TabSeparatedRawRowOutputFormat.h\nindex 42ebd846dfcd..6aa7f7bdfadb 100644\n--- a/src/Processors/Formats/Impl/TabSeparatedRawRowOutputFormat.h\n+++ b/src/Processors/Formats/Impl/TabSeparatedRawRowOutputFormat.h\n@@ -18,9 +18,9 @@ class TabSeparatedRawRowOutputFormat : public TabSeparatedRowOutputFormat\n         const Block & header_,\n         bool with_names_,\n         bool with_types_,\n-        FormatFactory::WriteCallback callback,\n+        const RowOutputFormatParams & params_,\n         const FormatSettings & format_settings_)\n-        : TabSeparatedRowOutputFormat(out_, header_, with_names_, with_types_, callback, format_settings_)\n+        : TabSeparatedRowOutputFormat(out_, header_, with_names_, with_types_, params_, format_settings_)\n     {\n     }\n \ndiff --git a/src/Processors/Formats/Impl/TabSeparatedRowOutputFormat.cpp b/src/Processors/Formats/Impl/TabSeparatedRowOutputFormat.cpp\nindex 95377c13b55a..da8221b11c5f 100644\n--- a/src/Processors/Formats/Impl/TabSeparatedRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/TabSeparatedRowOutputFormat.cpp\n@@ -11,9 +11,9 @@ TabSeparatedRowOutputFormat::TabSeparatedRowOutputFormat(\n     const Block & header_,\n     bool with_names_,\n     bool with_types_,\n-    FormatFactory::WriteCallback callback,\n+    const RowOutputFormatParams & params_,\n     const FormatSettings & format_settings_)\n-    : IRowOutputFormat(header_, out_, callback), with_names(with_names_), with_types(with_types_), format_settings(format_settings_)\n+    : IRowOutputFormat(header_, out_, params_), with_names(with_names_), with_types(with_types_), format_settings(format_settings_)\n {\n }\n \n@@ -80,10 +80,10 @@ void registerOutputFormatProcessorTabSeparated(FormatFactory & factory)\n         factory.registerOutputFormatProcessor(name, [](\n             WriteBuffer & buf,\n             const Block & sample,\n-            FormatFactory::WriteCallback callback,\n+            const RowOutputFormatParams & params,\n             const FormatSettings & settings)\n         {\n-            return std::make_shared<TabSeparatedRowOutputFormat>(buf, sample, false, false, callback, settings);\n+            return std::make_shared<TabSeparatedRowOutputFormat>(buf, sample, false, false, params, settings);\n         });\n     }\n \n@@ -92,10 +92,10 @@ void registerOutputFormatProcessorTabSeparated(FormatFactory & factory)\n         factory.registerOutputFormatProcessor(name, [](\n             WriteBuffer & buf,\n             const Block & sample,\n-            FormatFactory::WriteCallback callback,\n+            const RowOutputFormatParams & params,\n             const FormatSettings & settings)\n         {\n-            return std::make_shared<TabSeparatedRawRowOutputFormat>(buf, sample, false, false, callback, settings);\n+            return std::make_shared<TabSeparatedRawRowOutputFormat>(buf, sample, false, false, params, settings);\n         });\n     }\n \n@@ -104,10 +104,10 @@ void registerOutputFormatProcessorTabSeparated(FormatFactory & factory)\n         factory.registerOutputFormatProcessor(name, [](\n             WriteBuffer & buf,\n             const Block & sample,\n-            FormatFactory::WriteCallback callback,\n+            const RowOutputFormatParams & params,\n             const FormatSettings & settings)\n         {\n-            return std::make_shared<TabSeparatedRowOutputFormat>(buf, sample, true, false, callback, settings);\n+            return std::make_shared<TabSeparatedRowOutputFormat>(buf, sample, true, false, params, settings);\n         });\n     }\n \n@@ -116,10 +116,10 @@ void registerOutputFormatProcessorTabSeparated(FormatFactory & factory)\n         factory.registerOutputFormatProcessor(name, [](\n             WriteBuffer & buf,\n             const Block & sample,\n-            FormatFactory::WriteCallback callback,\n+            const RowOutputFormatParams & params,\n             const FormatSettings & settings)\n         {\n-            return std::make_shared<TabSeparatedRowOutputFormat>(buf, sample, true, true, callback, settings);\n+            return std::make_shared<TabSeparatedRowOutputFormat>(buf, sample, true, true, params, settings);\n         });\n     }\n }\ndiff --git a/src/Processors/Formats/Impl/TabSeparatedRowOutputFormat.h b/src/Processors/Formats/Impl/TabSeparatedRowOutputFormat.h\nindex 137ffde4b185..7985d6a1c86d 100644\n--- a/src/Processors/Formats/Impl/TabSeparatedRowOutputFormat.h\n+++ b/src/Processors/Formats/Impl/TabSeparatedRowOutputFormat.h\n@@ -23,7 +23,7 @@ class TabSeparatedRowOutputFormat : public IRowOutputFormat\n         const Block & header_,\n         bool with_names_,\n         bool with_types_,\n-        FormatFactory::WriteCallback callback,\n+        const RowOutputFormatParams & params_,\n         const FormatSettings & format_settings_);\n \n     String getName() const override { return \"TabSeparatedRowOutputFormat\"; }\ndiff --git a/src/Processors/Formats/Impl/TemplateBlockOutputFormat.cpp b/src/Processors/Formats/Impl/TemplateBlockOutputFormat.cpp\nindex 9786943a79e3..6e33c7d90c9d 100644\n--- a/src/Processors/Formats/Impl/TemplateBlockOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/TemplateBlockOutputFormat.cpp\n@@ -232,7 +232,7 @@ void registerOutputFormatProcessorTemplate(FormatFactory & factory)\n     factory.registerOutputFormatProcessor(\"Template\", [](\n             WriteBuffer & buf,\n             const Block & sample,\n-            FormatFactory::WriteCallback,\n+            const RowOutputFormatParams &,\n             const FormatSettings & settings)\n     {\n         ParsedTemplateFormatString resultset_format;\n@@ -270,7 +270,7 @@ void registerOutputFormatProcessorTemplate(FormatFactory & factory)\n     factory.registerOutputFormatProcessor(\"CustomSeparated\", [](\n             WriteBuffer & buf,\n             const Block & sample,\n-            FormatFactory::WriteCallback,\n+            const RowOutputFormatParams &,\n             const FormatSettings & settings)\n     {\n         ParsedTemplateFormatString resultset_format = ParsedTemplateFormatString::setupCustomSeparatedResultsetFormat(settings.custom);\ndiff --git a/src/Processors/Formats/Impl/ValuesRowOutputFormat.cpp b/src/Processors/Formats/Impl/ValuesRowOutputFormat.cpp\nindex 6294a829456e..7791e1296e07 100644\n--- a/src/Processors/Formats/Impl/ValuesRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/ValuesRowOutputFormat.cpp\n@@ -10,8 +10,8 @@ namespace DB\n {\n \n \n-ValuesRowOutputFormat::ValuesRowOutputFormat(WriteBuffer & out_, const Block & header_, FormatFactory::WriteCallback callback, const FormatSettings & format_settings_)\n-    : IRowOutputFormat(header_, out_, callback), format_settings(format_settings_)\n+ValuesRowOutputFormat::ValuesRowOutputFormat(WriteBuffer & out_, const Block & header_, const RowOutputFormatParams & params_, const FormatSettings & format_settings_)\n+    : IRowOutputFormat(header_, out_, params_), format_settings(format_settings_)\n {\n }\n \n@@ -46,10 +46,10 @@ void registerOutputFormatProcessorValues(FormatFactory & factory)\n     factory.registerOutputFormatProcessor(\"Values\", [](\n         WriteBuffer & buf,\n         const Block & sample,\n-        FormatFactory::WriteCallback callback,\n+        const RowOutputFormatParams & params,\n         const FormatSettings & settings)\n     {\n-        return std::make_shared<ValuesRowOutputFormat>(buf, sample, callback, settings);\n+        return std::make_shared<ValuesRowOutputFormat>(buf, sample, params, settings);\n     });\n }\n \ndiff --git a/src/Processors/Formats/Impl/ValuesRowOutputFormat.h b/src/Processors/Formats/Impl/ValuesRowOutputFormat.h\nindex b507a157e573..73f91866f437 100644\n--- a/src/Processors/Formats/Impl/ValuesRowOutputFormat.h\n+++ b/src/Processors/Formats/Impl/ValuesRowOutputFormat.h\n@@ -15,7 +15,7 @@ class WriteBuffer;\n class ValuesRowOutputFormat : public IRowOutputFormat\n {\n public:\n-    ValuesRowOutputFormat(WriteBuffer & out_, const Block & header_, FormatFactory::WriteCallback callback, const FormatSettings & format_settings_);\n+    ValuesRowOutputFormat(WriteBuffer & out_, const Block & header_, const RowOutputFormatParams & params_, const FormatSettings & format_settings_);\n \n     String getName() const override { return \"ValuesRowOutputFormat\"; }\n \ndiff --git a/src/Processors/Formats/Impl/VerticalRowOutputFormat.cpp b/src/Processors/Formats/Impl/VerticalRowOutputFormat.cpp\nindex 7c1f0e3b363e..a3c71cbde590 100644\n--- a/src/Processors/Formats/Impl/VerticalRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/VerticalRowOutputFormat.cpp\n@@ -11,8 +11,8 @@ namespace DB\n {\n \n VerticalRowOutputFormat::VerticalRowOutputFormat(\n-    WriteBuffer & out_, const Block & header_, FormatFactory::WriteCallback callback, const FormatSettings & format_settings_)\n-    : IRowOutputFormat(header_, out_, callback), format_settings(format_settings_)\n+    WriteBuffer & out_, const Block & header_, const RowOutputFormatParams & params_, const FormatSettings & format_settings_)\n+    : IRowOutputFormat(header_, out_, params_), format_settings(format_settings_)\n {\n     const auto & sample = getPort(PortKind::Main).getHeader();\n     size_t columns = sample.columns();\n@@ -168,10 +168,10 @@ void registerOutputFormatProcessorVertical(FormatFactory & factory)\n     factory.registerOutputFormatProcessor(\"Vertical\", [](\n         WriteBuffer & buf,\n         const Block & sample,\n-        FormatFactory::WriteCallback callback,\n+        const RowOutputFormatParams & params,\n         const FormatSettings & settings)\n     {\n-        return std::make_shared<VerticalRowOutputFormat>(buf, sample, callback, settings);\n+        return std::make_shared<VerticalRowOutputFormat>(buf, sample, params, settings);\n     });\n }\n \ndiff --git a/src/Processors/Formats/Impl/VerticalRowOutputFormat.h b/src/Processors/Formats/Impl/VerticalRowOutputFormat.h\nindex aa40a6a5ad61..d372f5f611a0 100644\n--- a/src/Processors/Formats/Impl/VerticalRowOutputFormat.h\n+++ b/src/Processors/Formats/Impl/VerticalRowOutputFormat.h\n@@ -18,7 +18,7 @@ class Context;\n class VerticalRowOutputFormat : public IRowOutputFormat\n {\n public:\n-    VerticalRowOutputFormat(WriteBuffer & out_, const Block & header_, FormatFactory::WriteCallback callback, const FormatSettings & format_settings_);\n+    VerticalRowOutputFormat(WriteBuffer & out_, const Block & header_, const RowOutputFormatParams & params_, const FormatSettings & format_settings_);\n \n     String getName() const override { return \"VerticalRowOutputFormat\"; }\n \ndiff --git a/src/Processors/Formats/Impl/XMLRowOutputFormat.cpp b/src/Processors/Formats/Impl/XMLRowOutputFormat.cpp\nindex dba07660503c..a677d0de9a03 100644\n--- a/src/Processors/Formats/Impl/XMLRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/XMLRowOutputFormat.cpp\n@@ -7,8 +7,8 @@\n namespace DB\n {\n \n-XMLRowOutputFormat::XMLRowOutputFormat(WriteBuffer & out_, const Block & header_, FormatFactory::WriteCallback callback, const FormatSettings & format_settings_)\n-    : IRowOutputFormat(header_, out_, callback), format_settings(format_settings_)\n+XMLRowOutputFormat::XMLRowOutputFormat(WriteBuffer & out_, const Block & header_, const RowOutputFormatParams & params_, const FormatSettings & format_settings_)\n+    : IRowOutputFormat(header_, out_, params_), format_settings(format_settings_)\n {\n     const auto & sample = getPort(PortKind::Main).getHeader();\n     NamesAndTypesList columns(sample.getNamesAndTypesList());\n@@ -245,10 +245,10 @@ void registerOutputFormatProcessorXML(FormatFactory & factory)\n     factory.registerOutputFormatProcessor(\"XML\", [](\n         WriteBuffer & buf,\n         const Block & sample,\n-        FormatFactory::WriteCallback callback,\n+        const RowOutputFormatParams & params,\n         const FormatSettings & settings)\n     {\n-        return std::make_shared<XMLRowOutputFormat>(buf, sample, callback, settings);\n+        return std::make_shared<XMLRowOutputFormat>(buf, sample, params, settings);\n     });\n }\n \ndiff --git a/src/Processors/Formats/Impl/XMLRowOutputFormat.h b/src/Processors/Formats/Impl/XMLRowOutputFormat.h\nindex 8c3da59cfd1e..233ee773c1c5 100644\n--- a/src/Processors/Formats/Impl/XMLRowOutputFormat.h\n+++ b/src/Processors/Formats/Impl/XMLRowOutputFormat.h\n@@ -16,7 +16,7 @@ namespace DB\n class XMLRowOutputFormat : public IRowOutputFormat\n {\n public:\n-    XMLRowOutputFormat(WriteBuffer & out_, const Block & header_, FormatFactory::WriteCallback callback, const FormatSettings & format_settings_);\n+    XMLRowOutputFormat(WriteBuffer & out_, const Block & header_, const RowOutputFormatParams & params_, const FormatSettings & format_settings_);\n \n     String getName() const override { return \"XMLRowOutputFormat\"; }\n \ndiff --git a/src/Storages/Kafka/KafkaBlockOutputStream.cpp b/src/Storages/Kafka/KafkaBlockOutputStream.cpp\nindex 451c86f1e8e0..9d7fe465d446 100644\n--- a/src/Storages/Kafka/KafkaBlockOutputStream.cpp\n+++ b/src/Storages/Kafka/KafkaBlockOutputStream.cpp\n@@ -32,7 +32,13 @@ void KafkaBlockOutputStream::writePrefix()\n     if (!buffer)\n         throw Exception(\"Failed to create Kafka producer!\", ErrorCodes::CANNOT_CREATE_IO_BUFFER);\n \n-    child = FormatFactory::instance().getOutput(storage.getFormatName(), *buffer, getHeader(), *context, [this](const Columns & columns, size_t row){ buffer->countRow(columns, row); });\n+    child = FormatFactory::instance().getOutput(\n+            storage.getFormatName(), *buffer, getHeader(), *context, [this](const Columns & columns, size_t row)\n+            {\n+                buffer->countRow(columns, row);\n+            },\n+            /* ignore_no_row_delimiter = */ true\n+            );\n }\n \n void KafkaBlockOutputStream::write(const Block & block)\ndiff --git a/src/Storages/RabbitMQ/RabbitMQBlockOutputStream.cpp b/src/Storages/RabbitMQ/RabbitMQBlockOutputStream.cpp\nindex 8e05b10fa471..76129dee30d7 100644\n--- a/src/Storages/RabbitMQ/RabbitMQBlockOutputStream.cpp\n+++ b/src/Storages/RabbitMQ/RabbitMQBlockOutputStream.cpp\n@@ -46,7 +46,9 @@ void RabbitMQBlockOutputStream::writePrefix()\n             storage.getFormatName(), *buffer, getHeader(), context, [this](const Columns & /* columns */, size_t /* rows */)\n             {\n                 buffer->countRow();\n-            });\n+            },\n+            /* ignore_no_row_delimiter = */ true\n+            );\n }\n \n \n",
  "test_patch": "diff --git a/src/Formats/tests/tab_separated_streams.cpp b/src/Formats/tests/tab_separated_streams.cpp\nindex e39c7b6c920b..bb38d51cf980 100644\n--- a/src/Formats/tests/tab_separated_streams.cpp\n+++ b/src/Formats/tests/tab_separated_streams.cpp\n@@ -38,13 +38,14 @@ try\n \n     FormatSettings format_settings;\n \n-    RowInputFormatParams params{DEFAULT_INSERT_BLOCK_SIZE, 0, 0, []{}};\n+    RowInputFormatParams in_params{DEFAULT_INSERT_BLOCK_SIZE, 0, 0, []{}};\n+    RowOutputFormatParams out_params{[](const Columns & /* columns */, size_t /* row */){},false};\n \n-    InputFormatPtr input_format = std::make_shared<TabSeparatedRowInputFormat>(sample, in_buf, params, false, false, format_settings);\n+    InputFormatPtr input_format = std::make_shared<TabSeparatedRowInputFormat>(sample, in_buf, in_params, false, false, format_settings);\n     BlockInputStreamPtr block_input = std::make_shared<InputStreamFromInputFormat>(std::move(input_format));\n \n     BlockOutputStreamPtr block_output = std::make_shared<OutputStreamToOutputFormat>(\n-        std::make_shared<TabSeparatedRowOutputFormat>(out_buf, sample, false, false, [](const Columns & /* columns */, size_t /* row */){}, format_settings));\n+        std::make_shared<TabSeparatedRowOutputFormat>(out_buf, sample, false, false, out_params, format_settings));\n \n     copyData(*block_input, *block_output);\n     return 0;\ndiff --git a/tests/integration/test_storage_kafka/test.py b/tests/integration/test_storage_kafka/test.py\nindex 69ba09899ed8..6ef37c1e231d 100644\n--- a/tests/integration/test_storage_kafka/test.py\n+++ b/tests/integration/test_storage_kafka/test.py\n@@ -103,6 +103,17 @@ def kafka_produce_protobuf_messages(topic, start_index, num_messages):\n     producer.flush()\n     print((\"Produced {} messages for topic {}\".format(num_messages, topic)))\n \n+def kafka_produce_protobuf_messages_no_delimeters(topic, start_index, num_messages):\n+    data = ''\n+    producer = KafkaProducer(bootstrap_servers=\"localhost:9092\")\n+    for i in range(start_index, start_index + num_messages):\n+        msg = kafka_pb2.KeyValuePair()\n+        msg.key = i\n+        msg.value = str(i)\n+        serialized_msg = msg.SerializeToString()\n+        producer.send(topic=topic, value=serialized_msg)\n+    producer.flush()\n+    print(\"Produced {} messages for topic {}\".format(num_messages, topic))\n \n def avro_confluent_message(schema_registry_client, value):\n     # type: (CachedSchemaRegistryClient, dict) -> str\n@@ -971,6 +982,55 @@ def test_kafka_protobuf(kafka_cluster):\n     kafka_check_result(result, True)\n \n \n+@pytest.mark.timeout(30)\n+def test_kafka_protobuf_no_delimiter(kafka_cluster):\n+    instance.query('''\n+        CREATE TABLE test.kafka (key UInt64, value String)\n+            ENGINE = Kafka\n+            SETTINGS kafka_broker_list = 'kafka1:19092',\n+                     kafka_topic_list = 'pb_no_delimiter',\n+                     kafka_group_name = 'pb_no_delimiter',\n+                     kafka_format = 'ProtobufSingle',\n+                     kafka_schema = 'kafka.proto:KeyValuePair';\n+        ''')\n+\n+    kafka_produce_protobuf_messages_no_delimeters('pb_no_delimiter', 0, 20)\n+    kafka_produce_protobuf_messages_no_delimeters('pb_no_delimiter', 20, 1)\n+    kafka_produce_protobuf_messages_no_delimeters('pb_no_delimiter', 21, 29)\n+\n+    result = ''\n+    while True:\n+        result += instance.query('SELECT * FROM test.kafka', ignore_error=True)\n+        if kafka_check_result(result):\n+            break\n+\n+    kafka_check_result(result, True)\n+\n+    instance.query('''\n+    CREATE TABLE test.kafka_writer (key UInt64, value String)\n+        ENGINE = Kafka\n+        SETTINGS kafka_broker_list = 'kafka1:19092',\n+                    kafka_topic_list = 'pb_no_delimiter',\n+                    kafka_group_name = 'pb_no_delimiter',\n+                    kafka_format = 'ProtobufSingle',\n+                    kafka_schema = 'kafka.proto:KeyValuePair';\n+    ''')\n+\n+    instance.query(\"INSERT INTO test.kafka_writer VALUES (13,'Friday'),(42,'Answer to the Ultimate Question of Life, the Universe, and Everything'), (110, 'just a number')\")\n+\n+    time.sleep(1)\n+\n+    result = instance.query(\"SELECT * FROM test.kafka ORDER BY key\", ignore_error=True)\n+\n+    expected = '''\\\n+13\tFriday\n+42\tAnswer to the Ultimate Question of Life, the Universe, and Everything\n+110\tjust a number\n+'''\n+    assert TSV(result) == TSV(expected)\n+\n+\n+\n @pytest.mark.timeout(180)\n def test_kafka_materialized_view(kafka_cluster):\n     instance.query('''\ndiff --git a/tests/queries/0_stateless/00825_protobuf_format_input.reference b/tests/queries/0_stateless/00825_protobuf_format_input.reference\nindex 0c56bc4ebf05..75fef3f8ac3c 100644\n--- a/tests/queries/0_stateless/00825_protobuf_format_input.reference\n+++ b/tests/queries/0_stateless/00825_protobuf_format_input.reference\n@@ -8,4 +8,11 @@ a7522158-3d41-4b77-ad69-6c598ee55c49\tIvan\tPetrov\tmale\t1980-12-29\tpng\t+7495123456\n 0\t0\n 2\t4\n 3\t9\n+a7da1aa6-f425-4789-8947-b034786ed374\tVasily\tSidorov\tmale\t1995-07-28\tbmp\t+442012345678\t1\t2018-12-30 00:00:00\t23\tleo\t['Sunny']\t[250,244,10]\tMurmansk\t[68.970680,33.074982]\t3.14159265358979\t100000000000.00\t800\t-3.2\t154400000\t['pound']\t[16]\t503\t[]\n+c694ad8a-f714-4ea3-907d-fd54fb25d9b5\tNatalia\tSokolova\tfemale\t1992-03-08\tjpg\t\\N\t0\t\\N\t26\tpisces\t[]\t[100,200,50]\tPlymouth\t[50.403724,-4.142123]\t3.14159\t\\N\t0.007\t5.4\t-20000000000000\t[]\t[]\t\\N\t[]\n+a7522158-3d41-4b77-ad69-6c598ee55c49\tIvan\tPetrov\tmale\t1980-12-29\tpng\t+74951234567\\0\t1\t2019-01-05 18:45:00\t38\tcapricorn\t['Yesterday','Flowers']\t[255,0,0]\tMoscow\t[55.753216,37.622504]\t3.14\t214.10\t0.1\t5.8\t17060000000\t['meter','centimeter','kilometer']\t[1,0.01,1000]\t500\t[501,502]\n+3faee064-c4f7-4d34-b6f3-8d81c2b6a15d\tNick\tKolesnikov\tmale\t1998-12-26\tbmp\t412-687-5007\\0\t1\t2018-11-19 05:59:59\t20\tcapricorn\t['Havana']\t[128,0,128]\tPittsburgh\t[40.517192,-79.949456]\t3.1415926535898\t50000000000.00\t780\t18.3\t195500007\t['ounce','carat','gram']\t[28.35,0.2,1]\t9494\t[]\n+2\t4\n+3\t9\n+ok\n ok\ndiff --git a/tests/queries/0_stateless/00825_protobuf_format_input.sh b/tests/queries/0_stateless/00825_protobuf_format_input.sh\nindex 66c92e6fb353..b9912b2b849e 100755\n--- a/tests/queries/0_stateless/00825_protobuf_format_input.sh\n+++ b/tests/queries/0_stateless/00825_protobuf_format_input.sh\n@@ -48,6 +48,14 @@ source \"$CURDIR\"/00825_protobuf_format_input.insh\n $CLICKHOUSE_CLIENT --query \"SELECT * FROM in_persons_00825 ORDER BY uuid;\"\n $CLICKHOUSE_CLIENT --query \"SELECT * FROM in_squares_00825 ORDER BY number;\"\n \n+$CLICKHOUSE_CLIENT --query \"TRUNCATE TABLE in_persons_00825;\"\n+$CLICKHOUSE_CLIENT --query \"TRUNCATE TABLE in_squares_00825;\"\n+\n+source \"$CURDIR\"/00825_protobuf_format_input_single.insh\n+\n+$CLICKHOUSE_CLIENT --query \"SELECT * FROM in_persons_00825 ORDER BY uuid;\"\n+$CLICKHOUSE_CLIENT --query \"SELECT * FROM in_squares_00825 ORDER BY number;\"\n+\n # Try to input malformed data.\n set +eo pipefail\n echo -ne '\\xe0\\x80\\x3f\\x0b' \\\n@@ -55,5 +63,12 @@ echo -ne '\\xe0\\x80\\x3f\\x0b' \\\n     | grep -qF \"Protobuf messages are corrupted\" && echo \"ok\" || echo \"fail\"\n set -eo pipefail\n \n+# Try to input malformed data for ProtobufSingle\n+set +eo pipefail\n+echo -ne '\\xff\\xff\\x3f\\x0b' \\\n+    | $CLICKHOUSE_CLIENT --query=\"INSERT INTO in_persons_00825 FORMAT ProtobufSingle SETTINGS format_schema = '$CURDIR/00825_protobuf_format:Person'\" 2>&1 \\\n+    | grep -qF \"Protobuf messages are corrupted\" && echo \"ok\" || echo \"fail\"\n+set -eo pipefail\n+\n $CLICKHOUSE_CLIENT --query \"DROP TABLE IF EXISTS in_persons_00825;\"\n $CLICKHOUSE_CLIENT --query \"DROP TABLE IF EXISTS in_squares_00825;\"\ndiff --git a/tests/queries/0_stateless/00825_protobuf_format_input_single.insh b/tests/queries/0_stateless/00825_protobuf_format_input_single.insh\nnew file mode 100644\nindex 000000000000..6c4dfec05aa9\n--- /dev/null\n+++ b/tests/queries/0_stateless/00825_protobuf_format_input_single.insh\n@@ -0,0 +1,12 @@\n+echo -ne '\\x0a\\x24\\x61\\x37\\x35\\x32\\x32\\x31\\x35\\x38\\x2d\\x33\\x64\\x34\\x31\\x2d\\x34\\x62\\x37\\x37\\x2d\\x61\\x64\\x36\\x39\\x2d\\x36\\x63\\x35\\x39\\x38\\x65\\x65\\x35\\x35\\x63\\x34\\x39\\x12\\x04\\x49\\x76\\x61\\x6e\\x1a\\x06\\x50\\x65\\x74\\x72\\x6f\\x76\\x20\\x01\\x28\\xaf\\x1f\\x32\\x03\\x70\\x6e\\x67\\x3a\\x0c\\x2b\\x37\\x34\\x39\\x35\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x40\\x01\\x4d\\xfc\\xd0\\x30\\x5c\\x50\\x26\\x58\\x09\\x62\\x09\\x59\\x65\\x73\\x74\\x65\\x72\\x64\\x61\\x79\\x62\\x07\\x46\\x6c\\x6f\\x77\\x65\\x72\\x73\\x6a\\x04\\xff\\x01\\x00\\x00\\x72\\x06\\x4d\\x6f\\x73\\x63\\x6f\\x77\\x7a\\x08\\x4b\\x03\\x5f\\x42\\x72\\x7d\\x16\\x42\\x81\\x01\\x1f\\x85\\xeb\\x51\\xb8\\x1e\\x09\\x40\\x89\\x01\\x33\\x33\\x33\\x33\\x33\\xc3\\x6a\\x40\\x95\\x01\\xcd\\xcc\\xcc\\x3d\\x9d\\x01\\x9a\\x99\\xb9\\x40\\xa0\\x01\\x80\\xc4\\xd7\\x8d\\x7f\\xaa\\x01\\x0c\\x0a\\x05\\x6d\\x65\\x74\\x65\\x72\\x15\\x00\\x00\\x80\\x3f\\xaa\\x01\\x11\\x0a\\x0a\\x63\\x65\\x6e\\x74\\x69\\x6d\\x65\\x74\\x65\\x72\\x15\\x0a\\xd7\\x23\\x3c\\xaa\\x01\\x10\\x0a\\x09\\x6b\\x69\\x6c\\x6f\\x6d\\x65\\x74\\x65\\x72\\x15\\x00\\x00\\x7a\\x44\\xb2\\x01\\x10\\x0a\\x0e\\xa2\\x06\\x0b\\x0a\\x09\\x08\\xf4\\x03\\x12\\x04\\xf5\\x03\\xf6\\x03' | $CLICKHOUSE_CLIENT --query=\"INSERT INTO in_persons_00825 FORMAT ProtobufSingle SETTINGS format_schema = '$CURDIR/00825_protobuf_format:Person'\"\n+echo -ne '\\x0a\\x24\\x63\\x36\\x39\\x34\\x61\\x64\\x38\\x61\\x2d\\x66\\x37\\x31\\x34\\x2d\\x34\\x65\\x61\\x33\\x2d\\x39\\x30\\x37\\x64\\x2d\\x66\\x64\\x35\\x34\\x66\\x62\\x32\\x35\\x64\\x39\\x62\\x35\\x12\\x07\\x4e\\x61\\x74\\x61\\x6c\\x69\\x61\\x1a\\x08\\x53\\x6f\\x6b\\x6f\\x6c\\x6f\\x76\\x61\\x28\\xa6\\x3f\\x32\\x03\\x6a\\x70\\x67\\x50\\x1a\\x58\\x0b\\x6a\\x04\\x64\\xc8\\x01\\x32\\x72\\x08\\x50\\x6c\\x79\\x6d\\x6f\\x75\\x74\\x68\\x7a\\x08\\x6a\\x9d\\x49\\x42\\x46\\x8c\\x84\\xc0\\x81\\x01\\x6e\\x86\\x1b\\xf0\\xf9\\x21\\x09\\x40\\x95\\x01\\x42\\x60\\xe5\\x3b\\x9d\\x01\\xcd\\xcc\\xac\\x40\\xa0\\x01\\xff\\xff\\xa9\\xce\\x93\\x8c\\x09' | $CLICKHOUSE_CLIENT --query=\"INSERT INTO in_persons_00825 FORMAT ProtobufSingle SETTINGS format_schema = '$CURDIR/00825_protobuf_format:Person'\"\n+echo -ne '\\x0a\\x24\\x61\\x37\\x64\\x61\\x31\\x61\\x61\\x36\\x2d\\x66\\x34\\x32\\x35\\x2d\\x34\\x37\\x38\\x39\\x2d\\x38\\x39\\x34\\x37\\x2d\\x62\\x30\\x33\\x34\\x37\\x38\\x36\\x65\\x64\\x33\\x37\\x34\\x12\\x06\\x56\\x61\\x73\\x69\\x6c\\x79\\x1a\\x07\\x53\\x69\\x64\\x6f\\x72\\x6f\\x76\\x20\\x01\\x28\\xfb\\x48\\x32\\x03\\x62\\x6d\\x70\\x3a\\x0d\\x2b\\x34\\x34\\x32\\x30\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\\x40\\x01\\x4d\\x50\\xe0\\x27\\x5c\\x50\\x17\\x58\\x04\\x62\\x05\\x53\\x75\\x6e\\x6e\\x79\\x6a\\x05\\xfa\\x01\\xf4\\x01\\x0a\\x72\\x08\\x4d\\x75\\x72\\x6d\\x61\\x6e\\x73\\x6b\\x7a\\x08\\xfd\\xf0\\x89\\x42\\xc8\\x4c\\x04\\x42\\x81\\x01\\x11\\x2d\\x44\\x54\\xfb\\x21\\x09\\x40\\x89\\x01\\x00\\x00\\x00\\xe8\\x76\\x48\\x37\\x42\\x95\\x01\\x00\\x00\\x48\\x44\\x9d\\x01\\xcd\\xcc\\x4c\\xc0\\xa0\\x01\\x80\\xd4\\x9f\\x93\\x01\\xaa\\x01\\x0c\\x0a\\x05\\x70\\x6f\\x75\\x6e\\x64\\x15\\x00\\x00\\x80\\x41\\xb2\\x01\\x0a\\x0a\\x08\\xa2\\x06\\x05\\x0a\\x03\\x08\\xf7\\x03' | $CLICKHOUSE_CLIENT --query=\"INSERT INTO in_persons_00825 FORMAT ProtobufSingle SETTINGS format_schema = '$CURDIR/00825_protobuf_format:Person'\"\n+echo -ne '\\x0a\\x24\\x33\\x66\\x61\\x65\\x65\\x30\\x36\\x34\\x2d\\x63\\x34\\x66\\x37\\x2d\\x34\\x64\\x33\\x34\\x2d\\x62\\x36\\x66\\x33\\x2d\\x38\\x64\\x38\\x31\\x63\\x32\\x62\\x36\\x61\\x31\\x35\\x64\\x12\\x04\\x4e\\x69\\x63\\x6b\\x1a\\x0a\\x4b\\x6f\\x6c\\x65\\x73\\x6e\\x69\\x6b\\x6f\\x76\\x20\\x01\\x28\\xda\\x52\\x32\\x03\\x62\\x6d\\x70\\x3a\\x0c\\x34\\x31\\x32\\x2d\\x36\\x38\\x37\\x2d\\x35\\x30\\x30\\x37\\x40\\x01\\x4d\\x2f\\x27\\xf2\\x5b\\x50\\x14\\x58\\x09\\x62\\x06\\x48\\x61\\x76\\x61\\x6e\\x61\\x68\\x80\\x01\\x68\\x00\\x68\\x80\\x01\\x72\\x0a\\x50\\x69\\x74\\x74\\x73\\x62\\x75\\x72\\x67\\x68\\x7a\\x08\\x9b\\x11\\x22\\x42\\x1f\\xe6\\x9f\\xc2\\x81\\x01\\x28\\x2d\\x44\\x54\\xfb\\x21\\x09\\x40\\x89\\x01\\x00\\x00\\x00\\xe8\\x76\\x48\\x27\\x42\\x95\\x01\\x00\\x00\\x43\\x44\\x9d\\x01\\x66\\x66\\x92\\x41\\xa0\\x01\\xce\\xdf\\xb8\\xba\\x01\\xab\\x01\\x0d\\xcd\\xcc\\xe2\\x41\\x0d\\xcd\\xcc\\x4c\\x3e\\x0d\\x00\\x00\\x80\\x3f\\x12\\x05\\x6f\\x75\\x6e\\x63\\x65\\x12\\x05\\x63\\x61\\x72\\x61\\x74\\x12\\x04\\x67\\x72\\x61\\x6d\\xac\\x01\\xb3\\x01\\x0b\\xa2\\x06\\x05\\x0b\\x08\\x96\\x4a\\x0c\\x0c\\xb4\\x01' | $CLICKHOUSE_CLIENT --query=\"INSERT INTO in_persons_00825 FORMAT ProtobufSingle SETTINGS format_schema = '$CURDIR/00825_protobuf_format_syntax2:Syntax2Person'\"\n+\n+echo -ne '\\x08\\x02\\x10\\x04' | $CLICKHOUSE_CLIENT --query=\"INSERT INTO in_squares_00825 FORMAT ProtobufSingle SETTINGS format_schema = '$CURDIR/00825_protobuf_format:NumberAndSquare'\"\n+echo -ne '\\x08\\x03\\x10\\x09' | $CLICKHOUSE_CLIENT --query=\"INSERT INTO in_squares_00825 FORMAT ProtobufSingle SETTINGS format_schema = '$CURDIR/00825_protobuf_format:NumberAndSquare'\"\n+\n+### Actually empty Protobuf message is a valid message (with all values default).\n+### It will work in Kafka but clickhouse-client forbids that:\n+### Code: 108. DB::Exception: No data to insert\n+## echo -ne '' | $CLICKHOUSE_CLIENT --query=\"INSERT INTO in_squares_00825 FORMAT ProtobufSingle SETTINGS format_schema = '$CURDIR/00825_protobuf_format:NumberAndSquare'\"\n\\ No newline at end of file\ndiff --git a/tests/queries/0_stateless/00825_protobuf_format_output.reference b/tests/queries/0_stateless/00825_protobuf_format_output.reference\nindex 9d20d778ff6a..f0e0ac58a5e3 100644\nBinary files a/tests/queries/0_stateless/00825_protobuf_format_output.reference and b/tests/queries/0_stateless/00825_protobuf_format_output.reference differ\ndiff --git a/tests/queries/0_stateless/00825_protobuf_format_output.sh b/tests/queries/0_stateless/00825_protobuf_format_output.sh\nindex 995616d730b4..889d3a9d2aee 100755\n--- a/tests/queries/0_stateless/00825_protobuf_format_output.sh\n+++ b/tests/queries/0_stateless/00825_protobuf_format_output.sh\n@@ -10,7 +10,7 @@ CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n set -e -o pipefail\n \n # Run the client.\n-$CLICKHOUSE_CLIENT --multiquery <<EOF\n+$CLICKHOUSE_CLIENT -mnT <<EOF\n DROP TABLE IF EXISTS out_persons_00825;\n DROP TABLE IF EXISTS out_squares_00825;\n \n@@ -58,6 +58,21 @@ SELECT * FROM out_persons_00825 ORDER BY name FORMAT Protobuf SETTINGS format_sc\n SELECT 'SQUARES->';\n SELECT * FROM out_squares_00825 ORDER BY number FORMAT Protobuf SETTINGS format_schema = '$CURDIR/00825_protobuf_format:NumberAndSquare';\n \n+SELECT '\\n\\n** ProtobufSingle **\\n\\n';\n+\n+SELECT * FROM out_persons_00825 ORDER BY name LIMIT 1 FORMAT ProtobufSingle SETTINGS format_schema = '$CURDIR/00825_protobuf_format:Person';\n+SELECT 'ALTERNATIVE->';\n+SELECT * FROM out_persons_00825 ORDER BY name LIMIT 1 FORMAT ProtobufSingle SETTINGS format_schema = '$CURDIR/00825_protobuf_format:AltPerson';\n+SELECT 'STRINGS->';\n+SELECT * FROM out_persons_00825 ORDER BY name LIMIT 1 FORMAT ProtobufSingle SETTINGS format_schema = '$CURDIR/00825_protobuf_format:StrPerson';\n+SELECT 'SYNTAX2->';\n+SELECT * FROM out_persons_00825 ORDER BY name LIMIT 1 FORMAT ProtobufSingle SETTINGS format_schema = '$CURDIR/00825_protobuf_format_syntax2:Syntax2Person';\n+SELECT 'SQUARES->';\n+SELECT * FROM out_squares_00825 ORDER BY number LIMIT 1 FORMAT ProtobufSingle SETTINGS format_schema = '$CURDIR/00825_protobuf_format:NumberAndSquare';\n+\n+-- Code: 546, e.displayText() = DB::Exception: The ProtobufSingle format can't be used to write multiple rows because this format doesn't have any row delimiter.\n+SELECT * FROM out_persons_00825 ORDER BY name FORMAT ProtobufSingle SETTINGS format_schema = '$CURDIR/00825_protobuf_format:Person'; -- { clientError 546 }\n+\n DROP TABLE IF EXISTS out_persons_00825;\n DROP TABLE IF EXISTS out_squares_00825;\n EOF\n",
  "problem_statement": "Support non-delimited Protobuf message\n**Use case**\r\nI would like to INSERT a non-delimited Protobuf message.\r\n\r\nAs of now Protobuf message requires the varint length header.  This is useful when multiple Protobuf messages are in a single payload.  However the length header is not necessary when there is only one message in a payload.  In our use case 1 Kafka message is 1 Protobuf without the varint length header.\r\n\r\n**Describe the solution you'd like**\r\nAdd an option to SETTINGS that makes the length header optional.\r\n\n",
  "hints_text": "",
  "created_at": "2020-09-23T15:15:02Z"
}