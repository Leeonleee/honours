diff --git a/tests/queries/0_stateless/00804_test_deflate_qpl_codec_compression.reference b/tests/queries/0_stateless/00804_test_deflate_qpl_codec_compression.reference
index a2178f5eda7e..a6e03404f2b7 100644
--- a/tests/queries/0_stateless/00804_test_deflate_qpl_codec_compression.reference
+++ b/tests/queries/0_stateless/00804_test_deflate_qpl_codec_compression.reference
@@ -1,4 +1,4 @@
-CREATE TABLE default.compression_codec
(
    `id` UInt64 CODEC(DEFLATE_QPL),
    `data` String CODEC(DEFLATE_QPL),
    `ddd` Date CODEC(DEFLATE_QPL),
    `ddd32` Date32 CODEC(DEFLATE_QPL),
    `somenum` Float64 CODEC(DEFLATE_QPL),
    `somestr` FixedString(3) CODEC(DEFLATE_QPL),
    `othernum` Int64 CODEC(DEFLATE_QPL),
    `somearray` Array(UInt8) CODEC(DEFLATE_QPL),
    `somemap` Map(String, UInt32) CODEC(DEFLATE_QPL),
    `sometuple` Tuple(UInt16, UInt64) CODEC(DEFLATE_QPL)
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS index_granularity = 8192
+CREATE TABLE default.compression_codec
(
    `id` UInt64 CODEC(DEFLATE_QPL),
    `data` String CODEC(DEFLATE_QPL),
    `ddd` Date CODEC(DEFLATE_QPL),
    `ddd32` Date32 CODEC(DEFLATE_QPL),
    `somenum` Float64 CODEC(DEFLATE_QPL),
    `somestr` FixedString(3) CODEC(DEFLATE_QPL),
    `othernum` Int64 CODEC(DEFLATE_QPL),
    `somearray` Array(UInt8) CODEC(DEFLATE_QPL),
    `somemap` Map(String, UInt32) CODEC(DEFLATE_QPL),
    `sometuple` Tuple(
        UInt16,
        UInt64) CODEC(DEFLATE_QPL)
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS index_granularity = 8192
 1	hello	2018-12-14	2018-12-14	1.1	aaa	5	[1,2,3]	{'k1':1,'k2':2}	(1,2)
 2	world	2018-12-15	2018-12-15	2.2	bbb	6	[4,5,6]	{'k3':3,'k4':4}	(3,4)
 3	!	2018-12-16	2018-12-16	3.3	ccc	7	[7,8,9]	{'k5':5,'k6':6}	(5,6)
diff --git a/tests/queries/0_stateless/00804_test_zstd_qat_codec_compression.reference b/tests/queries/0_stateless/00804_test_zstd_qat_codec_compression.reference
index 31a4360469f8..ff70403ce7a1 100644
--- a/tests/queries/0_stateless/00804_test_zstd_qat_codec_compression.reference
+++ b/tests/queries/0_stateless/00804_test_zstd_qat_codec_compression.reference
@@ -1,4 +1,4 @@
-CREATE TABLE default.compression_codec
(
    `id` UInt64 CODEC(ZSTD_QAT(1)),
    `data` String CODEC(ZSTD_QAT(1)),
    `ddd` Date CODEC(ZSTD_QAT(1)),
    `ddd32` Date32 CODEC(ZSTD_QAT(1)),
    `somenum` Float64 CODEC(ZSTD_QAT(1)),
    `somestr` FixedString(3) CODEC(ZSTD_QAT(1)),
    `othernum` Int64 CODEC(ZSTD_QAT(1)),
    `somearray` Array(UInt8) CODEC(ZSTD_QAT(1)),
    `somemap` Map(String, UInt32) CODEC(ZSTD_QAT(1)),
    `sometuple` Tuple(UInt16, UInt64) CODEC(ZSTD_QAT(1))
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS index_granularity = 8192
+CREATE TABLE default.compression_codec
(
    `id` UInt64 CODEC(ZSTD_QAT(1)),
    `data` String CODEC(ZSTD_QAT(1)),
    `ddd` Date CODEC(ZSTD_QAT(1)),
    `ddd32` Date32 CODEC(ZSTD_QAT(1)),
    `somenum` Float64 CODEC(ZSTD_QAT(1)),
    `somestr` FixedString(3) CODEC(ZSTD_QAT(1)),
    `othernum` Int64 CODEC(ZSTD_QAT(1)),
    `somearray` Array(UInt8) CODEC(ZSTD_QAT(1)),
    `somemap` Map(String, UInt32) CODEC(ZSTD_QAT(1)),
    `sometuple` Tuple(
        UInt16,
        UInt64) CODEC(ZSTD_QAT(1))
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS index_granularity = 8192
 1	hello	2018-12-14	2018-12-14	1.1	aaa	5	[1,2,3]	{'k1':1,'k2':2}	(1,2)
 2	world	2018-12-15	2018-12-15	2.2	bbb	6	[4,5,6]	{'k3':3,'k4':4}	(3,4)
 3	!	2018-12-16	2018-12-16	3.3	ccc	7	[7,8,9]	{'k5':5,'k6':6}	(5,6)
diff --git a/tests/queries/0_stateless/01458_named_tuple_millin.reference b/tests/queries/0_stateless/01458_named_tuple_millin.reference
index 954dfe365638..86561570985e 100644
--- a/tests/queries/0_stateless/01458_named_tuple_millin.reference
+++ b/tests/queries/0_stateless/01458_named_tuple_millin.reference
@@ -1,12 +1,16 @@
 CREATE TABLE default.tuple
 (
-    `j` Tuple(a Int8, b String)
+    `j` Tuple(
+        a Int8,
+        b String)
 )
 ENGINE = Memory
 j	Tuple(
    a Int8,
    b String)					
 CREATE TABLE default.tuple
 (
-    `j` Tuple(a Int8, b String)
+    `j` Tuple(
+        a Int8,
+        b String)
 )
 ENGINE = Memory
 j	Tuple(
    a Int8,
    b String)					
diff --git a/tests/queries/0_stateless/01504_compression_multiple_streams.reference b/tests/queries/0_stateless/01504_compression_multiple_streams.reference
index 4d3aba665267..14cdce72044a 100644
--- a/tests/queries/0_stateless/01504_compression_multiple_streams.reference
+++ b/tests/queries/0_stateless/01504_compression_multiple_streams.reference
@@ -1,20 +1,20 @@
 1	1	[[1]]	(1,[1])
 1	1	[[1]]	(1,[1])
-CREATE TABLE default.columns_with_multiple_streams
(
    `field0` Nullable(Int64) CODEC(Delta(2), LZ4),
    `field1` Nullable(UInt8) CODEC(Delta(8), LZ4),
    `field2` Array(Array(Int64)) CODEC(Delta(8), LZ4),
    `field3` Tuple(UInt32, Array(UInt64)) CODEC(T64, Default)
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS min_rows_for_wide_part = 0, min_bytes_for_wide_part = 0, index_granularity = 8192
+CREATE TABLE default.columns_with_multiple_streams
(
    `field0` Nullable(Int64) CODEC(Delta(2), LZ4),
    `field1` Nullable(UInt8) CODEC(Delta(8), LZ4),
    `field2` Array(Array(Int64)) CODEC(Delta(8), LZ4),
    `field3` Tuple(
        UInt32,
        Array(UInt64)) CODEC(T64, Default)
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS min_rows_for_wide_part = 0, min_bytes_for_wide_part = 0, index_granularity = 8192
 1	1	[[1]]	(1,[1])
 2	2	[[2]]	(2,[2])
-CREATE TABLE default.columns_with_multiple_streams
(
    `field0` Nullable(Int64) CODEC(Delta(2), LZ4),
    `field1` Nullable(UInt8) CODEC(Delta(8), LZ4),
    `field2` Array(Array(Int64)) CODEC(Delta(8), LZ4),
    `field3` Tuple(UInt32, Array(UInt64)) CODEC(Delta, Default)
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS min_rows_for_wide_part = 0, min_bytes_for_wide_part = 0, index_granularity = 8192
+CREATE TABLE default.columns_with_multiple_streams
(
    `field0` Nullable(Int64) CODEC(Delta(2), LZ4),
    `field1` Nullable(UInt8) CODEC(Delta(8), LZ4),
    `field2` Array(Array(Int64)) CODEC(Delta(8), LZ4),
    `field3` Tuple(
        UInt32,
        Array(UInt64)) CODEC(Delta, Default)
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS min_rows_for_wide_part = 0, min_bytes_for_wide_part = 0, index_granularity = 8192
 1	1	[[1]]	(1,[1])
 2	2	[[2]]	(2,[2])
 3	3	[[3]]	(3,[3])
 1	1	[[1]]	(1,[1])
 1	1	[[1]]	(1,[1])
-CREATE TABLE default.columns_with_multiple_streams_compact
(
    `field0` Nullable(Int64) CODEC(Delta(2), LZ4),
    `field1` Nullable(UInt8) CODEC(Delta(8), LZ4),
    `field2` Array(Array(Int64)) CODEC(Delta(8), LZ4),
    `field3` Tuple(UInt32, Array(UInt64)) CODEC(Delta, Default)
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS min_rows_for_wide_part = 100000, min_bytes_for_wide_part = 100000, index_granularity = 8192
+CREATE TABLE default.columns_with_multiple_streams_compact
(
    `field0` Nullable(Int64) CODEC(Delta(2), LZ4),
    `field1` Nullable(UInt8) CODEC(Delta(8), LZ4),
    `field2` Array(Array(Int64)) CODEC(Delta(8), LZ4),
    `field3` Tuple(
        UInt32,
        Array(UInt64)) CODEC(Delta, Default)
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS min_rows_for_wide_part = 100000, min_bytes_for_wide_part = 100000, index_granularity = 8192
 1	1	[[1]]	(1,[1])
 2	2	[[2]]	(2,[2])
 1	1	[[1]]	(1,[1])
 2	2	[[2]]	(2,[2])
-CREATE TABLE default.columns_with_multiple_streams_compact
(
    `field0` Nullable(Int64) CODEC(Delta(2), LZ4),
    `field1` Nullable(UInt8) CODEC(Delta(8), LZ4),
    `field2` Array(Array(Int64)) CODEC(Delta(8), LZ4),
    `field3` Tuple(UInt32, Array(UInt64)) CODEC(Delta, Default)
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS min_rows_for_wide_part = 100000, min_bytes_for_wide_part = 100000, index_granularity = 8192
+CREATE TABLE default.columns_with_multiple_streams_compact
(
    `field0` Nullable(Int64) CODEC(Delta(2), LZ4),
    `field1` Nullable(UInt8) CODEC(Delta(8), LZ4),
    `field2` Array(Array(Int64)) CODEC(Delta(8), LZ4),
    `field3` Tuple(
        UInt32,
        Array(UInt64)) CODEC(Delta, Default)
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS min_rows_for_wide_part = 100000, min_bytes_for_wide_part = 100000, index_granularity = 8192
 1	1	[[1]]	(1,[1])
 2	2	[[2]]	(2,[2])
 3	3	[[3]]	(3,[3])
diff --git a/tests/queries/0_stateless/01548_create_table_compound_column_format.reference b/tests/queries/0_stateless/01548_create_table_compound_column_format.reference
index 21e31e8f0344..c23cc57548b9 100644
--- a/tests/queries/0_stateless/01548_create_table_compound_column_format.reference
+++ b/tests/queries/0_stateless/01548_create_table_compound_column_format.reference
@@ -7,6 +7,7 @@ ENGINE = TinyLog
 CREATE TABLE test
 (
     `a` Int64,
-    `b` Tuple(a Int64)
+    `b` Tuple(
+        a Int64)
 )
 ENGINE = TinyLog
diff --git a/tests/queries/0_stateless/01881_aggregate_functions_versioning.reference b/tests/queries/0_stateless/01881_aggregate_functions_versioning.reference
index c30c4ca7e74e..e15f312c2c88 100644
--- a/tests/queries/0_stateless/01881_aggregate_functions_versioning.reference
+++ b/tests/queries/0_stateless/01881_aggregate_functions_versioning.reference
@@ -1,1 +1,1 @@
-CREATE TABLE default.test_table
(
    `col1` DateTime,
    `col2` Int64,
    `col3` AggregateFunction(1, sumMap, Tuple(Array(UInt8), Array(UInt8)))
)
ENGINE = AggregatingMergeTree
ORDER BY (col1, col2)
SETTINGS index_granularity = 8192
+CREATE TABLE default.test_table
(
    `col1` DateTime,
    `col2` Int64,
    `col3` AggregateFunction(1, sumMap, Tuple(
        Array(UInt8),
        Array(UInt8)))
)
ENGINE = AggregatingMergeTree
ORDER BY (col1, col2)
SETTINGS index_granularity = 8192
diff --git a/tests/queries/0_stateless/02117_show_create_table_system.reference b/tests/queries/0_stateless/02117_show_create_table_system.reference
index 32e8b2f43127..638a46a142fe 100644
--- a/tests/queries/0_stateless/02117_show_create_table_system.reference
+++ b/tests/queries/0_stateless/02117_show_create_table_system.reference
@@ -510,9 +510,15 @@ CREATE TABLE system.parts
     `rows_where_ttl_info.max` Array(DateTime),
     `projections` Array(String),
     `visible` UInt8,
-    `creation_tid` Tuple(UInt64, UInt64, UUID),
+    `creation_tid` Tuple(
+        UInt64,
+        UInt64,
+        UUID),
     `removal_tid_lock` UInt64,
-    `removal_tid` Tuple(UInt64, UInt64, UUID),
+    `removal_tid` Tuple(
+        UInt64,
+        UInt64,
+        UUID),
     `creation_csn` UInt64,
     `removal_csn` UInt64,
     `has_lightweight_delete` UInt8,
diff --git a/tests/queries/0_stateless/02286_tuple_numeric_identifier.reference b/tests/queries/0_stateless/02286_tuple_numeric_identifier.reference
index 21348493d1df..916cdaf83cda 100644
--- a/tests/queries/0_stateless/02286_tuple_numeric_identifier.reference
+++ b/tests/queries/0_stateless/02286_tuple_numeric_identifier.reference
@@ -1,4 +1,4 @@
-CREATE TABLE default.t_tuple_numeric
(
    `t` Tuple(`1` Tuple(`2` Int32, `3` Int32), `4` Int32)
)
ENGINE = Memory
+CREATE TABLE default.t_tuple_numeric
(
    `t` Tuple(
        `1` Tuple(
            `2` Int32,
            `3` Int32),
        `4` Int32)
)
ENGINE = Memory
 {"t":{"1":{"2":2,"3":3},"4":4}}
 2	3	4
 2	3	4
diff --git a/tests/queries/0_stateless/02907_backup_restore_flatten_nested.reference b/tests/queries/0_stateless/02907_backup_restore_flatten_nested.reference
index aa8f22f590ad..0db19f0591a5 100644
--- a/tests/queries/0_stateless/02907_backup_restore_flatten_nested.reference
+++ b/tests/queries/0_stateless/02907_backup_restore_flatten_nested.reference
@@ -1,8 +1,8 @@
 BACKUP_CREATED
-CREATE TABLE default.test
(
    `test` Array(Tuple(foo String, bar Float64))
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS index_granularity = 8192
+CREATE TABLE default.test
(
    `test` Array(Tuple(
        foo String,
        bar Float64))
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS index_granularity = 8192
 BACKUP_CREATED
 CREATE TABLE default.test2
(
    `test` Nested(foo String, bar Float64)
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS index_granularity = 8192
 RESTORED
-CREATE TABLE default.test
(
    `test` Array(Tuple(foo String, bar Float64))
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS index_granularity = 8192
+CREATE TABLE default.test
(
    `test` Array(Tuple(
        foo String,
        bar Float64))
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS index_granularity = 8192
 RESTORED
 CREATE TABLE default.test2
(
    `test` Nested(foo String, bar Float64)
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS index_granularity = 8192
diff --git a/tests/queries/0_stateless/03227_print_pretty_tuples_create_query.reference b/tests/queries/0_stateless/03227_print_pretty_tuples_create_query.reference
new file mode 100644
index 000000000000..afaaaaa61192
--- /dev/null
+++ b/tests/queries/0_stateless/03227_print_pretty_tuples_create_query.reference
@@ -0,0 +1,56 @@
+
+SHOW CREATE TABLE:
+CREATE TABLE default.test
+(
+    `x` Tuple(
+        a String,
+        b Array(Tuple(
+            c Tuple(
+                e String),
+            d String))),
+    `y` String
+)
+ENGINE = MergeTree
+ORDER BY tuple()
+SETTINGS index_granularity = 8192
+CREATE TABLE default.test
+(
+    `x` Tuple(a String, b Array(Tuple(c Tuple(e String), d String))),
+    `y` String
+)
+ENGINE = MergeTree
+ORDER BY tuple()
+SETTINGS index_granularity = 8192
+
+clickhouse-format:
+CREATE TABLE test
+(
+    `x` Tuple(
+        a String,
+        b Array(Tuple(
+            c Tuple(
+                e String),
+            d String))),
+    `y` String
+)
+ORDER BY tuple()
+CREATE TABLE test (`x` Tuple(a String, b Array(Tuple(c Tuple(e String), d String))), `y` String) ORDER BY tuple()
+
+formatQuery:
+CREATE TABLE test
+(
+    `x` Tuple(
+        a String,
+        b Array(Tuple(
+            c Tuple(
+                e String),
+            d String))),
+    `y` String
+)
+ORDER BY tuple()
+CREATE TABLE test
+(
+    `x` Tuple(a String, b Array(Tuple(c Tuple(e String), d String))),
+    `y` String
+)
+ORDER BY tuple()
diff --git a/tests/queries/0_stateless/03227_print_pretty_tuples_create_query.sh b/tests/queries/0_stateless/03227_print_pretty_tuples_create_query.sh
new file mode 100755
index 000000000000..e5614f9f228b
--- /dev/null
+++ b/tests/queries/0_stateless/03227_print_pretty_tuples_create_query.sh
@@ -0,0 +1,35 @@
+#!/usr/bin/env bash
+# Tags: no-fasttest, no-asan, no-msan, no-tsan
+# ^ requires S3
+
+CUR_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
+# shellcheck source=../shell_config.sh
+. "$CUR_DIR"/../shell_config.sh
+
+echo
+echo "SHOW CREATE TABLE:"
+${CLICKHOUSE_CLIENT} --output-format Raw --query "
+    DROP TABLE IF EXISTS test;
+    CREATE TABLE test (x Tuple(a String, b Array(Tuple(c Tuple(e String), d String))), y String) ORDER BY ();
+    SET print_pretty_type_names = 1;
+    SHOW CREATE TABLE test;
+    SET print_pretty_type_names = 0;
+    SHOW CREATE TABLE test;
+    DROP TABLE test;
+"
+
+echo
+echo "clickhouse-format:"
+${CLICKHOUSE_FORMAT} --query "
+    CREATE TABLE test (x Tuple(a String, b Array(Tuple(c Tuple(e String), d String))), y String) ORDER BY ()
+"
+${CLICKHOUSE_FORMAT} --oneline --query "
+    CREATE TABLE test (x Tuple(a String, b Array(Tuple(c Tuple(e String), d String))), y String) ORDER BY ()
+"
+
+echo
+echo "formatQuery:"
+${CLICKHOUSE_CLIENT} --output-format Raw --query "
+    SELECT formatQuery('CREATE TABLE test (x Tuple(a String, b Array(Tuple(c Tuple(e String), d String))), y String) ORDER BY ()') SETTINGS print_pretty_type_names = 1;
+    SELECT formatQuery('CREATE TABLE test (x Tuple(a String, b Array(Tuple(c Tuple(e String), d String))), y String) ORDER BY ()') SETTINGS print_pretty_type_names = 0;
+"
