{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 68492,
  "instance_id": "ClickHouse__ClickHouse-68492",
  "issue_numbers": [
    "65753"
  ],
  "base_commit": "0c14ac782ef72a3c9e60e97bbf561afcbe50949b",
  "patch": "diff --git a/programs/format/Format.cpp b/programs/format/Format.cpp\nindex a434c9171e91..f07387bd3952 100644\n--- a/programs/format/Format.cpp\n+++ b/programs/format/Format.cpp\n@@ -264,7 +264,11 @@ int mainEntryClickHouseFormat(int argc, char ** argv)\n                     if (!backslash)\n                     {\n                         WriteBufferFromOwnString str_buf;\n-                        formatAST(*res, str_buf, hilite, oneline || approx_query_length < max_line_length);\n+                        bool oneline_current_query = oneline || approx_query_length < max_line_length;\n+                        IAST::FormatSettings settings(str_buf, oneline_current_query, hilite);\n+                        settings.show_secrets = true;\n+                        settings.print_pretty_type_names = !oneline_current_query;\n+                        res->format(settings);\n \n                         if (insert_query_payload)\n                         {\n@@ -307,7 +311,11 @@ int mainEntryClickHouseFormat(int argc, char ** argv)\n                     else\n                     {\n                         WriteBufferFromOwnString str_buf;\n-                        formatAST(*res, str_buf, hilite, oneline);\n+                        bool oneline_current_query = oneline || approx_query_length < max_line_length;\n+                        IAST::FormatSettings settings(str_buf, oneline_current_query, hilite);\n+                        settings.show_secrets = true;\n+                        settings.print_pretty_type_names = !oneline_current_query;\n+                        res->format(settings);\n \n                         auto res_string = str_buf.str();\n                         WriteBufferFromOStream res_cout(std::cout, 4096);\ndiff --git a/src/Client/ClientBase.cpp b/src/Client/ClientBase.cpp\nindex 187ef079edab..74357d33f1c4 100644\n--- a/src/Client/ClientBase.cpp\n+++ b/src/Client/ClientBase.cpp\n@@ -331,7 +331,11 @@ ASTPtr ClientBase::parseQuery(const char *& pos, const char * end, const Setting\n     {\n         output_stream << std::endl;\n         WriteBufferFromOStream res_buf(output_stream, 4096);\n-        formatAST(*res, res_buf);\n+        IAST::FormatSettings format_settings(res_buf, /* one_line */ false);\n+        format_settings.hilite = true;\n+        format_settings.show_secrets = true;\n+        format_settings.print_pretty_type_names = true;\n+        res->format(format_settings);\n         res_buf.finalize();\n         output_stream << std::endl << std::endl;\n     }\ndiff --git a/src/Core/ExternalTable.cpp b/src/Core/ExternalTable.cpp\nindex c2bcf6ec6516..4ff0d7092d89 100644\n--- a/src/Core/ExternalTable.cpp\n+++ b/src/Core/ExternalTable.cpp\n@@ -85,7 +85,7 @@ void BaseExternalTable::parseStructureFromStructureField(const std::string & arg\n         /// We use `formatWithPossiblyHidingSensitiveData` instead of `getColumnNameWithoutAlias` because `column->type` is an ASTFunction.\n         /// `getColumnNameWithoutAlias` will return name of the function with `(arguments)` even if arguments is empty.\n         if (column)\n-            structure.emplace_back(column->name, column->type->formatWithPossiblyHidingSensitiveData(0, true, true));\n+            structure.emplace_back(column->name, column->type->formatWithPossiblyHidingSensitiveData(0, true, true, false));\n         else\n             throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Error while parsing table structure: expected column definition, got {}\", child->formatForErrorMessage());\n     }\n@@ -102,7 +102,7 @@ void BaseExternalTable::parseStructureFromTypesField(const std::string & argumen\n         throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Error while parsing table structure: {}\", error);\n \n     for (size_t i = 0; i < type_list_raw->children.size(); ++i)\n-        structure.emplace_back(\"_\" + toString(i + 1), type_list_raw->children[i]->formatWithPossiblyHidingSensitiveData(0, true, true));\n+        structure.emplace_back(\"_\" + toString(i + 1), type_list_raw->children[i]->formatWithPossiblyHidingSensitiveData(0, true, true, false));\n }\n \n void BaseExternalTable::initSampleBlock()\ndiff --git a/src/Core/Settings.h b/src/Core/Settings.h\nindex 0d84ad9022aa..d8837d26e54b 100644\n--- a/src/Core/Settings.h\n+++ b/src/Core/Settings.h\n@@ -882,7 +882,7 @@ class IColumn;\n     M(Bool, use_json_alias_for_old_object_type, false, \"When enabled, JSON type alias will create old experimental Object type instead of a new JSON type\", 0) \\\n     M(Bool, allow_create_index_without_type, false, \"Allow CREATE INDEX query without TYPE. Query will be ignored. Made for SQL compatibility tests.\", 0) \\\n     M(Bool, create_index_ignore_unique, false, \"Ignore UNIQUE keyword in CREATE UNIQUE INDEX. Made for SQL compatibility tests.\", 0) \\\n-    M(Bool, print_pretty_type_names, true, \"Print pretty type names in DESCRIBE query and toTypeName() function\", 0) \\\n+    M(Bool, print_pretty_type_names, true, \"Print pretty type names in the DESCRIBE query and `toTypeName` function, as well as in the `SHOW CREATE TABLE` query and the `formatQuery` function.\", 0) \\\n     M(Bool, create_table_empty_primary_key_by_default, false, \"Allow to create *MergeTree tables with empty primary key when ORDER BY and PRIMARY KEY not specified\", 0) \\\n     M(Bool, allow_named_collection_override_by_default, true, \"Allow named collections' fields override by default.\", 0) \\\n     M(SQLSecurityType, default_normal_view_sql_security, SQLSecurityType::INVOKER, \"Allows to set a default value for SQL SECURITY option when creating a normal view.\", 0) \\\ndiff --git a/src/DataTypes/IDataType.cpp b/src/DataTypes/IDataType.cpp\nindex 7fd8a85aeca5..49e5b2d022e9 100644\n--- a/src/DataTypes/IDataType.cpp\n+++ b/src/DataTypes/IDataType.cpp\n@@ -8,7 +8,6 @@\n #include <Common/quoteString.h>\n \n #include <IO/WriteHelpers.h>\n-#include <IO/Operators.h>\n \n #include <DataTypes/IDataType.h>\n #include <DataTypes/DataTypeCustom.h>\ndiff --git a/src/Databases/DatabaseOnDisk.cpp b/src/Databases/DatabaseOnDisk.cpp\nindex c80e4def94ec..81378fc1c642 100644\n--- a/src/Databases/DatabaseOnDisk.cpp\n+++ b/src/Databases/DatabaseOnDisk.cpp\n@@ -504,7 +504,7 @@ void DatabaseOnDisk::renameTable(\n }\n \n \n-/// It returns create table statement (even if table is detached)\n+/// It returns the create table statement (even if table is detached)\n ASTPtr DatabaseOnDisk::getCreateTableQueryImpl(const String & table_name, ContextPtr, bool throw_on_error) const\n {\n     ASTPtr ast;\ndiff --git a/src/Functions/formatQuery.cpp b/src/Functions/formatQuery.cpp\nindex 9591ea95254e..be633bdfe375 100644\n--- a/src/Functions/formatQuery.cpp\n+++ b/src/Functions/formatQuery.cpp\n@@ -43,6 +43,7 @@ class FunctionFormatQuery : public IFunction\n         max_query_size = settings.max_query_size;\n         max_parser_depth = settings.max_parser_depth;\n         max_parser_backtracks = settings.max_parser_backtracks;\n+        print_pretty_type_names = settings.print_pretty_type_names;\n     }\n \n     String getName() const override { return name; }\n@@ -138,7 +139,11 @@ class FunctionFormatQuery : public IFunction\n                 }\n             }\n \n-            formatAST(*ast, buf, /*hilite*/ false, /*single_line*/ output_formatting == OutputFormatting::SingleLine);\n+            IAST::FormatSettings settings(buf, output_formatting == OutputFormatting::SingleLine, /*hilite*/ false);\n+            settings.show_secrets = true;\n+            settings.print_pretty_type_names = print_pretty_type_names;\n+            ast->format(settings);\n+\n             auto formatted = buf.stringView();\n \n             const size_t res_data_new_size = res_data_size + formatted.size() + 1;\n@@ -165,6 +170,7 @@ class FunctionFormatQuery : public IFunction\n     size_t max_query_size;\n     size_t max_parser_depth;\n     size_t max_parser_backtracks;\n+    bool print_pretty_type_names;\n };\n \n }\ndiff --git a/src/Interpreters/InterpreterShowCreateQuery.cpp b/src/Interpreters/InterpreterShowCreateQuery.cpp\nindex e5549b2e5396..3de6b7556098 100644\n--- a/src/Interpreters/InterpreterShowCreateQuery.cpp\n+++ b/src/Interpreters/InterpreterShowCreateQuery.cpp\n@@ -97,7 +97,12 @@ QueryPipeline InterpreterShowCreateQuery::executeImpl()\n     }\n \n     MutableColumnPtr column = ColumnString::create();\n-    column->insert(format({.ctx = getContext(), .query = *create_query, .one_line = false}));\n+    column->insert(format(\n+    {\n+        .ctx = getContext(),\n+        .query = *create_query,\n+        .one_line = false\n+    }));\n \n     return QueryPipeline(std::make_shared<SourceFromSingleChunk>(Block{{\n         std::move(column),\ndiff --git a/src/Interpreters/executeQuery.cpp b/src/Interpreters/executeQuery.cpp\nindex fe87eed55701..decc16a3704c 100644\n--- a/src/Interpreters/executeQuery.cpp\n+++ b/src/Interpreters/executeQuery.cpp\n@@ -786,7 +786,7 @@ static std::tuple<ASTPtr, BlockIO> executeQueryImpl(\n             /// Verify that AST formatting is consistent:\n             /// If you format AST, parse it back, and format it again, you get the same string.\n \n-            String formatted1 = ast->formatWithPossiblyHidingSensitiveData(0, true, true);\n+            String formatted1 = ast->formatWithPossiblyHidingSensitiveData(0, true, true, false);\n \n             /// The query can become more verbose after formatting, so:\n             size_t new_max_query_size = max_query_size > 0 ? (1000 + 2 * max_query_size) : 0;\n@@ -811,7 +811,7 @@ static std::tuple<ASTPtr, BlockIO> executeQueryImpl(\n \n             chassert(ast2);\n \n-            String formatted2 = ast2->formatWithPossiblyHidingSensitiveData(0, true, true);\n+            String formatted2 = ast2->formatWithPossiblyHidingSensitiveData(0, true, true, false);\n \n             if (formatted1 != formatted2)\n                 throw Exception(ErrorCodes::LOGICAL_ERROR,\ndiff --git a/src/Interpreters/formatWithPossiblyHidingSecrets.h b/src/Interpreters/formatWithPossiblyHidingSecrets.h\nindex ea8c295b1695..14e84f1d1a42 100644\n--- a/src/Interpreters/formatWithPossiblyHidingSecrets.h\n+++ b/src/Interpreters/formatWithPossiblyHidingSecrets.h\n@@ -25,7 +25,8 @@ inline String format(const SecretHidingFormatSettings & settings)\n         && settings.ctx->getSettingsRef().format_display_secrets_in_show_and_select\n         && settings.ctx->getAccess()->isGranted(AccessType::displaySecretsInShowAndSelect);\n \n-    return settings.query.formatWithPossiblyHidingSensitiveData(settings.max_length, settings.one_line, show_secrets);\n+    return settings.query.formatWithPossiblyHidingSensitiveData(\n+        settings.max_length, settings.one_line, show_secrets, settings.ctx->getSettingsRef().print_pretty_type_names);\n }\n \n }\ndiff --git a/src/Parsers/ASTColumnDeclaration.cpp b/src/Parsers/ASTColumnDeclaration.cpp\nindex c96499095d54..23d653012f86 100644\n--- a/src/Parsers/ASTColumnDeclaration.cpp\n+++ b/src/Parsers/ASTColumnDeclaration.cpp\n@@ -66,17 +66,13 @@ void ASTColumnDeclaration::formatImpl(const FormatSettings & format_settings, Fo\n {\n     frame.need_parens = false;\n \n-    /// We have to always backquote column names to avoid ambiguouty with INDEX and other declarations in CREATE query.\n+    /// We have to always backquote column names to avoid ambiguity with INDEX and other declarations in CREATE query.\n     format_settings.ostr << backQuote(name);\n \n     if (type)\n     {\n         format_settings.ostr << ' ';\n-\n-        FormatStateStacked type_frame = frame;\n-        type_frame.indent = 0;\n-\n-        type->formatImpl(format_settings, state, type_frame);\n+        type->formatImpl(format_settings, state, frame);\n     }\n \n     if (null_modifier)\ndiff --git a/src/Parsers/ASTDataType.cpp b/src/Parsers/ASTDataType.cpp\nindex 3c17ae8c380a..4211347fb74a 100644\n--- a/src/Parsers/ASTDataType.cpp\n+++ b/src/Parsers/ASTDataType.cpp\n@@ -40,12 +40,22 @@ void ASTDataType::formatImpl(const FormatSettings & settings, FormatState & stat\n     {\n         settings.ostr << '(' << (settings.hilite ? hilite_none : \"\");\n \n-        for (size_t i = 0, size = arguments->children.size(); i < size; ++i)\n+        if (!settings.one_line && settings.print_pretty_type_names && name == \"Tuple\")\n         {\n-            if (i != 0)\n-                settings.ostr << \", \";\n-\n-            arguments->children[i]->formatImpl(settings, state, frame);\n+            ++frame.indent;\n+            std::string indent_str = settings.one_line ? \"\" : \"\\n\" + std::string(4 * frame.indent, ' ');\n+            for (size_t i = 0, size = arguments->children.size(); i < size; ++i)\n+            {\n+                if (i != 0)\n+                    settings.ostr << ',';\n+                settings.ostr << indent_str;\n+                arguments->children[i]->formatImpl(settings, state, frame);\n+            }\n+        }\n+        else\n+        {\n+            frame.expression_list_prepend_whitespace = false;\n+            arguments->formatImpl(settings, state, frame);\n         }\n \n         settings.ostr << (settings.hilite ? hilite_function : \"\") << ')';\ndiff --git a/src/Parsers/ASTExpressionList.cpp b/src/Parsers/ASTExpressionList.cpp\nindex 61ac482af827..f345b0c6a6f1 100644\n--- a/src/Parsers/ASTExpressionList.cpp\n+++ b/src/Parsers/ASTExpressionList.cpp\n@@ -42,7 +42,8 @@ void ASTExpressionList::formatImpl(const FormatSettings & settings, FormatState\n \n void ASTExpressionList::formatImplMultiline(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const\n {\n-    std::string indent_str = \"\\n\" + std::string(4 * (frame.indent + 1), ' ');\n+    ++frame.indent;\n+    std::string indent_str = \"\\n\" + std::string(4 * frame.indent, ' ');\n \n     if (frame.expression_list_prepend_whitespace)\n     {\n@@ -50,8 +51,6 @@ void ASTExpressionList::formatImplMultiline(const FormatSettings & settings, For\n             settings.ostr << ' ';\n     }\n \n-    ++frame.indent;\n-\n     for (size_t i = 0, size = children.size(); i < size; ++i)\n     {\n         if (i && separator)\ndiff --git a/src/Parsers/ASTNameTypePair.cpp b/src/Parsers/ASTNameTypePair.cpp\nindex e4066081a9b9..1515700365f6 100644\n--- a/src/Parsers/ASTNameTypePair.cpp\n+++ b/src/Parsers/ASTNameTypePair.cpp\n@@ -23,12 +23,8 @@ ASTPtr ASTNameTypePair::clone() const\n \n void ASTNameTypePair::formatImpl(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const\n {\n-    std::string indent_str = settings.one_line ? \"\" : std::string(4 * frame.indent, ' ');\n-\n-    settings.ostr << indent_str << backQuoteIfNeed(name) << ' ';\n+    settings.ostr << backQuoteIfNeed(name) << ' ';\n     type->formatImpl(settings, state, frame);\n }\n \n }\n-\n-\ndiff --git a/src/Parsers/IAST.cpp b/src/Parsers/IAST.cpp\nindex 37d7f458d613..5bd2c92c60ae 100644\n--- a/src/Parsers/IAST.cpp\n+++ b/src/Parsers/IAST.cpp\n@@ -165,11 +165,12 @@ size_t IAST::checkDepthImpl(size_t max_depth) const\n     return res;\n }\n \n-String IAST::formatWithPossiblyHidingSensitiveData(size_t max_length, bool one_line, bool show_secrets) const\n+String IAST::formatWithPossiblyHidingSensitiveData(size_t max_length, bool one_line, bool show_secrets, bool print_pretty_type_names) const\n {\n     WriteBufferFromOwnString buf;\n     FormatSettings settings(buf, one_line);\n     settings.show_secrets = show_secrets;\n+    settings.print_pretty_type_names = print_pretty_type_names;\n     format(settings);\n     return wipeSensitiveDataAndCutToLength(buf.str(), max_length);\n }\ndiff --git a/src/Parsers/IAST.h b/src/Parsers/IAST.h\nindex e2cf75796678..2293d50b0eca 100644\n--- a/src/Parsers/IAST.h\n+++ b/src/Parsers/IAST.h\n@@ -201,6 +201,7 @@ class IAST : public std::enable_shared_from_this<IAST>, public TypePromotion<IAS\n         bool show_secrets; /// Show secret parts of the AST (e.g. passwords, encryption keys).\n         char nl_or_ws; /// Newline or whitespace.\n         LiteralEscapingStyle literal_escaping_style;\n+        bool print_pretty_type_names;\n \n         explicit FormatSettings(\n             WriteBuffer & ostr_,\n@@ -209,7 +210,8 @@ class IAST : public std::enable_shared_from_this<IAST>, public TypePromotion<IAS\n             bool always_quote_identifiers_ = false,\n             IdentifierQuotingStyle identifier_quoting_style_ = IdentifierQuotingStyle::Backticks,\n             bool show_secrets_ = true,\n-            LiteralEscapingStyle literal_escaping_style_ = LiteralEscapingStyle::Regular)\n+            LiteralEscapingStyle literal_escaping_style_ = LiteralEscapingStyle::Regular,\n+            bool print_pretty_type_names_ = false)\n             : ostr(ostr_)\n             , one_line(one_line_)\n             , hilite(hilite_)\n@@ -218,6 +220,7 @@ class IAST : public std::enable_shared_from_this<IAST>, public TypePromotion<IAS\n             , show_secrets(show_secrets_)\n             , nl_or_ws(one_line ? ' ' : '\\n')\n             , literal_escaping_style(literal_escaping_style_)\n+            , print_pretty_type_names(print_pretty_type_names_)\n         {\n         }\n \n@@ -230,6 +233,7 @@ class IAST : public std::enable_shared_from_this<IAST>, public TypePromotion<IAS\n             , show_secrets(other.show_secrets)\n             , nl_or_ws(other.nl_or_ws)\n             , literal_escaping_style(other.literal_escaping_style)\n+            , print_pretty_type_names(other.print_pretty_type_names)\n         {\n         }\n \n@@ -251,7 +255,7 @@ class IAST : public std::enable_shared_from_this<IAST>, public TypePromotion<IAS\n     /// The state that is copied when each node is formatted. For example, nesting level.\n     struct FormatStateStacked\n     {\n-        UInt8 indent = 0;\n+        UInt16 indent = 0;\n         bool need_parens = false;\n         bool expression_list_always_start_on_new_line = false;  /// Line feed and indent before expression list even if it's of single element.\n         bool expression_list_prepend_whitespace = false; /// Prepend whitespace (if it is required)\n@@ -274,7 +278,7 @@ class IAST : public std::enable_shared_from_this<IAST>, public TypePromotion<IAS\n \n     /// Secrets are displayed regarding show_secrets, then SensitiveDataMasker is applied.\n     /// You can use Interpreters/formatWithPossiblyHidingSecrets.h for convenience.\n-    String formatWithPossiblyHidingSensitiveData(size_t max_length, bool one_line, bool show_secrets) const;\n+    String formatWithPossiblyHidingSensitiveData(size_t max_length, bool one_line, bool show_secrets, bool print_pretty_type_names) const;\n \n     /** formatForLogging and formatForErrorMessage always hide secrets. This inconsistent\n       * behaviour is due to the fact such functions are called from Client which knows nothing about\n@@ -283,12 +287,12 @@ class IAST : public std::enable_shared_from_this<IAST>, public TypePromotion<IAS\n       */\n     String formatForLogging(size_t max_length = 0) const\n     {\n-        return formatWithPossiblyHidingSensitiveData(max_length, true, false);\n+        return formatWithPossiblyHidingSensitiveData(max_length, true, false, false);\n     }\n \n     String formatForErrorMessage() const\n     {\n-        return formatWithPossiblyHidingSensitiveData(0, true, false);\n+        return formatWithPossiblyHidingSensitiveData(0, true, false, false);\n     }\n \n     virtual bool hasSecretParts() const { return childrenHaveSecretParts(); }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00804_test_deflate_qpl_codec_compression.reference b/tests/queries/0_stateless/00804_test_deflate_qpl_codec_compression.reference\nindex a2178f5eda7e..a6e03404f2b7 100644\n--- a/tests/queries/0_stateless/00804_test_deflate_qpl_codec_compression.reference\n+++ b/tests/queries/0_stateless/00804_test_deflate_qpl_codec_compression.reference\n@@ -1,4 +1,4 @@\n-CREATE TABLE default.compression_codec\\n(\\n    `id` UInt64 CODEC(DEFLATE_QPL),\\n    `data` String CODEC(DEFLATE_QPL),\\n    `ddd` Date CODEC(DEFLATE_QPL),\\n    `ddd32` Date32 CODEC(DEFLATE_QPL),\\n    `somenum` Float64 CODEC(DEFLATE_QPL),\\n    `somestr` FixedString(3) CODEC(DEFLATE_QPL),\\n    `othernum` Int64 CODEC(DEFLATE_QPL),\\n    `somearray` Array(UInt8) CODEC(DEFLATE_QPL),\\n    `somemap` Map(String, UInt32) CODEC(DEFLATE_QPL),\\n    `sometuple` Tuple(UInt16, UInt64) CODEC(DEFLATE_QPL)\\n)\\nENGINE = MergeTree\\nORDER BY tuple()\\nSETTINGS index_granularity = 8192\n+CREATE TABLE default.compression_codec\\n(\\n    `id` UInt64 CODEC(DEFLATE_QPL),\\n    `data` String CODEC(DEFLATE_QPL),\\n    `ddd` Date CODEC(DEFLATE_QPL),\\n    `ddd32` Date32 CODEC(DEFLATE_QPL),\\n    `somenum` Float64 CODEC(DEFLATE_QPL),\\n    `somestr` FixedString(3) CODEC(DEFLATE_QPL),\\n    `othernum` Int64 CODEC(DEFLATE_QPL),\\n    `somearray` Array(UInt8) CODEC(DEFLATE_QPL),\\n    `somemap` Map(String, UInt32) CODEC(DEFLATE_QPL),\\n    `sometuple` Tuple(\\n        UInt16,\\n        UInt64) CODEC(DEFLATE_QPL)\\n)\\nENGINE = MergeTree\\nORDER BY tuple()\\nSETTINGS index_granularity = 8192\n 1\thello\t2018-12-14\t2018-12-14\t1.1\taaa\t5\t[1,2,3]\t{'k1':1,'k2':2}\t(1,2)\n 2\tworld\t2018-12-15\t2018-12-15\t2.2\tbbb\t6\t[4,5,6]\t{'k3':3,'k4':4}\t(3,4)\n 3\t!\t2018-12-16\t2018-12-16\t3.3\tccc\t7\t[7,8,9]\t{'k5':5,'k6':6}\t(5,6)\ndiff --git a/tests/queries/0_stateless/00804_test_zstd_qat_codec_compression.reference b/tests/queries/0_stateless/00804_test_zstd_qat_codec_compression.reference\nindex 31a4360469f8..ff70403ce7a1 100644\n--- a/tests/queries/0_stateless/00804_test_zstd_qat_codec_compression.reference\n+++ b/tests/queries/0_stateless/00804_test_zstd_qat_codec_compression.reference\n@@ -1,4 +1,4 @@\n-CREATE TABLE default.compression_codec\\n(\\n    `id` UInt64 CODEC(ZSTD_QAT(1)),\\n    `data` String CODEC(ZSTD_QAT(1)),\\n    `ddd` Date CODEC(ZSTD_QAT(1)),\\n    `ddd32` Date32 CODEC(ZSTD_QAT(1)),\\n    `somenum` Float64 CODEC(ZSTD_QAT(1)),\\n    `somestr` FixedString(3) CODEC(ZSTD_QAT(1)),\\n    `othernum` Int64 CODEC(ZSTD_QAT(1)),\\n    `somearray` Array(UInt8) CODEC(ZSTD_QAT(1)),\\n    `somemap` Map(String, UInt32) CODEC(ZSTD_QAT(1)),\\n    `sometuple` Tuple(UInt16, UInt64) CODEC(ZSTD_QAT(1))\\n)\\nENGINE = MergeTree\\nORDER BY tuple()\\nSETTINGS index_granularity = 8192\n+CREATE TABLE default.compression_codec\\n(\\n    `id` UInt64 CODEC(ZSTD_QAT(1)),\\n    `data` String CODEC(ZSTD_QAT(1)),\\n    `ddd` Date CODEC(ZSTD_QAT(1)),\\n    `ddd32` Date32 CODEC(ZSTD_QAT(1)),\\n    `somenum` Float64 CODEC(ZSTD_QAT(1)),\\n    `somestr` FixedString(3) CODEC(ZSTD_QAT(1)),\\n    `othernum` Int64 CODEC(ZSTD_QAT(1)),\\n    `somearray` Array(UInt8) CODEC(ZSTD_QAT(1)),\\n    `somemap` Map(String, UInt32) CODEC(ZSTD_QAT(1)),\\n    `sometuple` Tuple(\\n        UInt16,\\n        UInt64) CODEC(ZSTD_QAT(1))\\n)\\nENGINE = MergeTree\\nORDER BY tuple()\\nSETTINGS index_granularity = 8192\n 1\thello\t2018-12-14\t2018-12-14\t1.1\taaa\t5\t[1,2,3]\t{'k1':1,'k2':2}\t(1,2)\n 2\tworld\t2018-12-15\t2018-12-15\t2.2\tbbb\t6\t[4,5,6]\t{'k3':3,'k4':4}\t(3,4)\n 3\t!\t2018-12-16\t2018-12-16\t3.3\tccc\t7\t[7,8,9]\t{'k5':5,'k6':6}\t(5,6)\ndiff --git a/tests/queries/0_stateless/01458_named_tuple_millin.reference b/tests/queries/0_stateless/01458_named_tuple_millin.reference\nindex 954dfe365638..86561570985e 100644\n--- a/tests/queries/0_stateless/01458_named_tuple_millin.reference\n+++ b/tests/queries/0_stateless/01458_named_tuple_millin.reference\n@@ -1,12 +1,16 @@\n CREATE TABLE default.tuple\n (\n-    `j` Tuple(a Int8, b String)\n+    `j` Tuple(\n+        a Int8,\n+        b String)\n )\n ENGINE = Memory\n j\tTuple(\\n    a Int8,\\n    b String)\t\t\t\t\t\n CREATE TABLE default.tuple\n (\n-    `j` Tuple(a Int8, b String)\n+    `j` Tuple(\n+        a Int8,\n+        b String)\n )\n ENGINE = Memory\n j\tTuple(\\n    a Int8,\\n    b String)\t\t\t\t\t\ndiff --git a/tests/queries/0_stateless/01504_compression_multiple_streams.reference b/tests/queries/0_stateless/01504_compression_multiple_streams.reference\nindex 4d3aba665267..14cdce72044a 100644\n--- a/tests/queries/0_stateless/01504_compression_multiple_streams.reference\n+++ b/tests/queries/0_stateless/01504_compression_multiple_streams.reference\n@@ -1,20 +1,20 @@\n 1\t1\t[[1]]\t(1,[1])\n 1\t1\t[[1]]\t(1,[1])\n-CREATE TABLE default.columns_with_multiple_streams\\n(\\n    `field0` Nullable(Int64) CODEC(Delta(2), LZ4),\\n    `field1` Nullable(UInt8) CODEC(Delta(8), LZ4),\\n    `field2` Array(Array(Int64)) CODEC(Delta(8), LZ4),\\n    `field3` Tuple(UInt32, Array(UInt64)) CODEC(T64, Default)\\n)\\nENGINE = MergeTree\\nORDER BY tuple()\\nSETTINGS min_rows_for_wide_part = 0, min_bytes_for_wide_part = 0, index_granularity = 8192\n+CREATE TABLE default.columns_with_multiple_streams\\n(\\n    `field0` Nullable(Int64) CODEC(Delta(2), LZ4),\\n    `field1` Nullable(UInt8) CODEC(Delta(8), LZ4),\\n    `field2` Array(Array(Int64)) CODEC(Delta(8), LZ4),\\n    `field3` Tuple(\\n        UInt32,\\n        Array(UInt64)) CODEC(T64, Default)\\n)\\nENGINE = MergeTree\\nORDER BY tuple()\\nSETTINGS min_rows_for_wide_part = 0, min_bytes_for_wide_part = 0, index_granularity = 8192\n 1\t1\t[[1]]\t(1,[1])\n 2\t2\t[[2]]\t(2,[2])\n-CREATE TABLE default.columns_with_multiple_streams\\n(\\n    `field0` Nullable(Int64) CODEC(Delta(2), LZ4),\\n    `field1` Nullable(UInt8) CODEC(Delta(8), LZ4),\\n    `field2` Array(Array(Int64)) CODEC(Delta(8), LZ4),\\n    `field3` Tuple(UInt32, Array(UInt64)) CODEC(Delta, Default)\\n)\\nENGINE = MergeTree\\nORDER BY tuple()\\nSETTINGS min_rows_for_wide_part = 0, min_bytes_for_wide_part = 0, index_granularity = 8192\n+CREATE TABLE default.columns_with_multiple_streams\\n(\\n    `field0` Nullable(Int64) CODEC(Delta(2), LZ4),\\n    `field1` Nullable(UInt8) CODEC(Delta(8), LZ4),\\n    `field2` Array(Array(Int64)) CODEC(Delta(8), LZ4),\\n    `field3` Tuple(\\n        UInt32,\\n        Array(UInt64)) CODEC(Delta, Default)\\n)\\nENGINE = MergeTree\\nORDER BY tuple()\\nSETTINGS min_rows_for_wide_part = 0, min_bytes_for_wide_part = 0, index_granularity = 8192\n 1\t1\t[[1]]\t(1,[1])\n 2\t2\t[[2]]\t(2,[2])\n 3\t3\t[[3]]\t(3,[3])\n 1\t1\t[[1]]\t(1,[1])\n 1\t1\t[[1]]\t(1,[1])\n-CREATE TABLE default.columns_with_multiple_streams_compact\\n(\\n    `field0` Nullable(Int64) CODEC(Delta(2), LZ4),\\n    `field1` Nullable(UInt8) CODEC(Delta(8), LZ4),\\n    `field2` Array(Array(Int64)) CODEC(Delta(8), LZ4),\\n    `field3` Tuple(UInt32, Array(UInt64)) CODEC(Delta, Default)\\n)\\nENGINE = MergeTree\\nORDER BY tuple()\\nSETTINGS min_rows_for_wide_part = 100000, min_bytes_for_wide_part = 100000, index_granularity = 8192\n+CREATE TABLE default.columns_with_multiple_streams_compact\\n(\\n    `field0` Nullable(Int64) CODEC(Delta(2), LZ4),\\n    `field1` Nullable(UInt8) CODEC(Delta(8), LZ4),\\n    `field2` Array(Array(Int64)) CODEC(Delta(8), LZ4),\\n    `field3` Tuple(\\n        UInt32,\\n        Array(UInt64)) CODEC(Delta, Default)\\n)\\nENGINE = MergeTree\\nORDER BY tuple()\\nSETTINGS min_rows_for_wide_part = 100000, min_bytes_for_wide_part = 100000, index_granularity = 8192\n 1\t1\t[[1]]\t(1,[1])\n 2\t2\t[[2]]\t(2,[2])\n 1\t1\t[[1]]\t(1,[1])\n 2\t2\t[[2]]\t(2,[2])\n-CREATE TABLE default.columns_with_multiple_streams_compact\\n(\\n    `field0` Nullable(Int64) CODEC(Delta(2), LZ4),\\n    `field1` Nullable(UInt8) CODEC(Delta(8), LZ4),\\n    `field2` Array(Array(Int64)) CODEC(Delta(8), LZ4),\\n    `field3` Tuple(UInt32, Array(UInt64)) CODEC(Delta, Default)\\n)\\nENGINE = MergeTree\\nORDER BY tuple()\\nSETTINGS min_rows_for_wide_part = 100000, min_bytes_for_wide_part = 100000, index_granularity = 8192\n+CREATE TABLE default.columns_with_multiple_streams_compact\\n(\\n    `field0` Nullable(Int64) CODEC(Delta(2), LZ4),\\n    `field1` Nullable(UInt8) CODEC(Delta(8), LZ4),\\n    `field2` Array(Array(Int64)) CODEC(Delta(8), LZ4),\\n    `field3` Tuple(\\n        UInt32,\\n        Array(UInt64)) CODEC(Delta, Default)\\n)\\nENGINE = MergeTree\\nORDER BY tuple()\\nSETTINGS min_rows_for_wide_part = 100000, min_bytes_for_wide_part = 100000, index_granularity = 8192\n 1\t1\t[[1]]\t(1,[1])\n 2\t2\t[[2]]\t(2,[2])\n 3\t3\t[[3]]\t(3,[3])\ndiff --git a/tests/queries/0_stateless/01548_create_table_compound_column_format.reference b/tests/queries/0_stateless/01548_create_table_compound_column_format.reference\nindex 21e31e8f0344..c23cc57548b9 100644\n--- a/tests/queries/0_stateless/01548_create_table_compound_column_format.reference\n+++ b/tests/queries/0_stateless/01548_create_table_compound_column_format.reference\n@@ -7,6 +7,7 @@ ENGINE = TinyLog\n CREATE TABLE test\n (\n     `a` Int64,\n-    `b` Tuple(a Int64)\n+    `b` Tuple(\n+        a Int64)\n )\n ENGINE = TinyLog\ndiff --git a/tests/queries/0_stateless/01881_aggregate_functions_versioning.reference b/tests/queries/0_stateless/01881_aggregate_functions_versioning.reference\nindex c30c4ca7e74e..e15f312c2c88 100644\n--- a/tests/queries/0_stateless/01881_aggregate_functions_versioning.reference\n+++ b/tests/queries/0_stateless/01881_aggregate_functions_versioning.reference\n@@ -1,1 +1,1 @@\n-CREATE TABLE default.test_table\\n(\\n    `col1` DateTime,\\n    `col2` Int64,\\n    `col3` AggregateFunction(1, sumMap, Tuple(Array(UInt8), Array(UInt8)))\\n)\\nENGINE = AggregatingMergeTree\\nORDER BY (col1, col2)\\nSETTINGS index_granularity = 8192\n+CREATE TABLE default.test_table\\n(\\n    `col1` DateTime,\\n    `col2` Int64,\\n    `col3` AggregateFunction(1, sumMap, Tuple(\\n        Array(UInt8),\\n        Array(UInt8)))\\n)\\nENGINE = AggregatingMergeTree\\nORDER BY (col1, col2)\\nSETTINGS index_granularity = 8192\ndiff --git a/tests/queries/0_stateless/02117_show_create_table_system.reference b/tests/queries/0_stateless/02117_show_create_table_system.reference\nindex 32e8b2f43127..638a46a142fe 100644\n--- a/tests/queries/0_stateless/02117_show_create_table_system.reference\n+++ b/tests/queries/0_stateless/02117_show_create_table_system.reference\n@@ -510,9 +510,15 @@ CREATE TABLE system.parts\n     `rows_where_ttl_info.max` Array(DateTime),\n     `projections` Array(String),\n     `visible` UInt8,\n-    `creation_tid` Tuple(UInt64, UInt64, UUID),\n+    `creation_tid` Tuple(\n+        UInt64,\n+        UInt64,\n+        UUID),\n     `removal_tid_lock` UInt64,\n-    `removal_tid` Tuple(UInt64, UInt64, UUID),\n+    `removal_tid` Tuple(\n+        UInt64,\n+        UInt64,\n+        UUID),\n     `creation_csn` UInt64,\n     `removal_csn` UInt64,\n     `has_lightweight_delete` UInt8,\ndiff --git a/tests/queries/0_stateless/02286_tuple_numeric_identifier.reference b/tests/queries/0_stateless/02286_tuple_numeric_identifier.reference\nindex 21348493d1df..916cdaf83cda 100644\n--- a/tests/queries/0_stateless/02286_tuple_numeric_identifier.reference\n+++ b/tests/queries/0_stateless/02286_tuple_numeric_identifier.reference\n@@ -1,4 +1,4 @@\n-CREATE TABLE default.t_tuple_numeric\\n(\\n    `t` Tuple(`1` Tuple(`2` Int32, `3` Int32), `4` Int32)\\n)\\nENGINE = Memory\n+CREATE TABLE default.t_tuple_numeric\\n(\\n    `t` Tuple(\\n        `1` Tuple(\\n            `2` Int32,\\n            `3` Int32),\\n        `4` Int32)\\n)\\nENGINE = Memory\n {\"t\":{\"1\":{\"2\":2,\"3\":3},\"4\":4}}\n 2\t3\t4\n 2\t3\t4\ndiff --git a/tests/queries/0_stateless/02907_backup_restore_flatten_nested.reference b/tests/queries/0_stateless/02907_backup_restore_flatten_nested.reference\nindex aa8f22f590ad..0db19f0591a5 100644\n--- a/tests/queries/0_stateless/02907_backup_restore_flatten_nested.reference\n+++ b/tests/queries/0_stateless/02907_backup_restore_flatten_nested.reference\n@@ -1,8 +1,8 @@\n BACKUP_CREATED\n-CREATE TABLE default.test\\n(\\n    `test` Array(Tuple(foo String, bar Float64))\\n)\\nENGINE = MergeTree\\nORDER BY tuple()\\nSETTINGS index_granularity = 8192\n+CREATE TABLE default.test\\n(\\n    `test` Array(Tuple(\\n        foo String,\\n        bar Float64))\\n)\\nENGINE = MergeTree\\nORDER BY tuple()\\nSETTINGS index_granularity = 8192\n BACKUP_CREATED\n CREATE TABLE default.test2\\n(\\n    `test` Nested(foo String, bar Float64)\\n)\\nENGINE = MergeTree\\nORDER BY tuple()\\nSETTINGS index_granularity = 8192\n RESTORED\n-CREATE TABLE default.test\\n(\\n    `test` Array(Tuple(foo String, bar Float64))\\n)\\nENGINE = MergeTree\\nORDER BY tuple()\\nSETTINGS index_granularity = 8192\n+CREATE TABLE default.test\\n(\\n    `test` Array(Tuple(\\n        foo String,\\n        bar Float64))\\n)\\nENGINE = MergeTree\\nORDER BY tuple()\\nSETTINGS index_granularity = 8192\n RESTORED\n CREATE TABLE default.test2\\n(\\n    `test` Nested(foo String, bar Float64)\\n)\\nENGINE = MergeTree\\nORDER BY tuple()\\nSETTINGS index_granularity = 8192\ndiff --git a/tests/queries/0_stateless/03227_print_pretty_tuples_create_query.reference b/tests/queries/0_stateless/03227_print_pretty_tuples_create_query.reference\nnew file mode 100644\nindex 000000000000..afaaaaa61192\n--- /dev/null\n+++ b/tests/queries/0_stateless/03227_print_pretty_tuples_create_query.reference\n@@ -0,0 +1,56 @@\n+\n+SHOW CREATE TABLE:\n+CREATE TABLE default.test\n+(\n+    `x` Tuple(\n+        a String,\n+        b Array(Tuple(\n+            c Tuple(\n+                e String),\n+            d String))),\n+    `y` String\n+)\n+ENGINE = MergeTree\n+ORDER BY tuple()\n+SETTINGS index_granularity = 8192\n+CREATE TABLE default.test\n+(\n+    `x` Tuple(a String, b Array(Tuple(c Tuple(e String), d String))),\n+    `y` String\n+)\n+ENGINE = MergeTree\n+ORDER BY tuple()\n+SETTINGS index_granularity = 8192\n+\n+clickhouse-format:\n+CREATE TABLE test\n+(\n+    `x` Tuple(\n+        a String,\n+        b Array(Tuple(\n+            c Tuple(\n+                e String),\n+            d String))),\n+    `y` String\n+)\n+ORDER BY tuple()\n+CREATE TABLE test (`x` Tuple(a String, b Array(Tuple(c Tuple(e String), d String))), `y` String) ORDER BY tuple()\n+\n+formatQuery:\n+CREATE TABLE test\n+(\n+    `x` Tuple(\n+        a String,\n+        b Array(Tuple(\n+            c Tuple(\n+                e String),\n+            d String))),\n+    `y` String\n+)\n+ORDER BY tuple()\n+CREATE TABLE test\n+(\n+    `x` Tuple(a String, b Array(Tuple(c Tuple(e String), d String))),\n+    `y` String\n+)\n+ORDER BY tuple()\ndiff --git a/tests/queries/0_stateless/03227_print_pretty_tuples_create_query.sh b/tests/queries/0_stateless/03227_print_pretty_tuples_create_query.sh\nnew file mode 100755\nindex 000000000000..e5614f9f228b\n--- /dev/null\n+++ b/tests/queries/0_stateless/03227_print_pretty_tuples_create_query.sh\n@@ -0,0 +1,35 @@\n+#!/usr/bin/env bash\n+# Tags: no-fasttest, no-asan, no-msan, no-tsan\n+# ^ requires S3\n+\n+CUR_DIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CUR_DIR\"/../shell_config.sh\n+\n+echo\n+echo \"SHOW CREATE TABLE:\"\n+${CLICKHOUSE_CLIENT} --output-format Raw --query \"\n+    DROP TABLE IF EXISTS test;\n+    CREATE TABLE test (x Tuple(a String, b Array(Tuple(c Tuple(e String), d String))), y String) ORDER BY ();\n+    SET print_pretty_type_names = 1;\n+    SHOW CREATE TABLE test;\n+    SET print_pretty_type_names = 0;\n+    SHOW CREATE TABLE test;\n+    DROP TABLE test;\n+\"\n+\n+echo\n+echo \"clickhouse-format:\"\n+${CLICKHOUSE_FORMAT} --query \"\n+    CREATE TABLE test (x Tuple(a String, b Array(Tuple(c Tuple(e String), d String))), y String) ORDER BY ()\n+\"\n+${CLICKHOUSE_FORMAT} --oneline --query \"\n+    CREATE TABLE test (x Tuple(a String, b Array(Tuple(c Tuple(e String), d String))), y String) ORDER BY ()\n+\"\n+\n+echo\n+echo \"formatQuery:\"\n+${CLICKHOUSE_CLIENT} --output-format Raw --query \"\n+    SELECT formatQuery('CREATE TABLE test (x Tuple(a String, b Array(Tuple(c Tuple(e String), d String))), y String) ORDER BY ()') SETTINGS print_pretty_type_names = 1;\n+    SELECT formatQuery('CREATE TABLE test (x Tuple(a String, b Array(Tuple(c Tuple(e String), d String))), y String) ORDER BY ()') SETTINGS print_pretty_type_names = 0;\n+\"\n",
  "problem_statement": "Tuples should be pretty-printed in SHOW CREATE TABLE\n**Use case**\r\n\r\n```\r\n:) SHOW CREATE TABLE tls\r\n\r\nSHOW CREATE TABLE tls\r\n\r\nQuery id: 9b6fc7f0-b5c2-410f-bb81-08214127b08f\r\n\r\n   \u250c\u2500statement\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n1. \u2502 CREATE TABLE default.tls\r\n(\r\n    `ip` Nullable(String),\r\n    `data` Tuple(tls Tuple(error Nullable(String), protocol Nullable(String), result Tuple(handshake_log Tuple(client_finished Tuple(verify_data Nullable(String)), client_key_exchange Tuple(dh_params Tuple(client_private Tuple(length Nullable(Int64), value Nullable(String)), client_public Tuple(length Nullable(Int64), value Nullable(String)), generator Tuple(length Nullable(Int64), value Nullable(String)), prime Tuple(length Nullable(Int64), value Nullable(String))), ecdh_params Tuple(client_private Tuple(length Nullable(Int64), value Nullable(String)), client_public Tuple(x Tuple(length Nullable(Int64), value Nullable(String)), y Tuple(length Nullable(Int64), value Nullable(String))), curve_id Tuple(id Nullable(Int64), name Nullable(String))), rsa_params Tuple(encrypted_pre_master_secret Nullable(String), length Nullable(Int64))), key_material Tuple(master_secret Tuple(length Nullable(Int64), value Nullable(String)), pre_master_secret Tuple(length Nullable(Int64), value Nullable(String))), server_certificates Tuple(certificate Tuple(parsed Tuple(extensions Tuple(authority_info_access Tuple(issuer_urls Array(Nullable(String)), ocsp_urls Array(Nullable(String))), authority_key_id Nullable(String), basic_constraints Tuple(is_ca Nullable(Bool), max_path_len Nullable(Int64)), certificate_policies Array(Tuple(cps Array(Nullable(String)), id Nullable(String), user_notice Array(Tuple(explicit_text Nullable(String), notice_reference Array(Tuple(notice_numbers Array(Nullable(Int64)), organization Nullable(String))))))), crl_distribution_points Array(Nullable(String)), extended_key_usage Tuple(client_auth Nullable(Bool), code_signing Nullable(Bool), email_protection Nullable(Bool), ipsec_end_system Nullable(Bool), ipsec_intermediate_system_usage Nullable(Bool), ipsec_tunnel Nullable(Bool), ipsec_user Nullable(Bool), microsoft_server_gated_crypto Nullable(Bool), netscape_server_gated_crypto Nullable(Bool), ocsp_signing Nullable(Bool), server_auth Nullable(Bool), time_stamping Nullable(Bool)), issuer_alt_name Tuple(email_addresses Array(Nullable(String)), uniform_resource_identifiers Array(Nullable(String))), key_usage Tuple(certificate_sign Nullable(Bool), content_commitment Nullable(Bool), crl_sign Nullable(Bool), data_encipherment Nullable(Bool), decipher_only Nullable(Bool), digital_signature Nullable(Bool), encipher_only Nullable(Bool), key_agreement Nullable(Bool), key_encipherment Nullable(Bool), value Nullable(Int64)), signed_certificate_timestamps Array(Tuple(log_id Nullable(String), signature Nullable(String), timestamp Nullable(Int64), version Nullable(Int64))), subject_alt_name Tuple(dns_names Array(Nullable(String)), email_addresses Array(Nullable(String)), ip_addresses Array(Nullable(String)), other_names Array(Tuple(id Nullable(String), value Nullable(String))), uniform_resource_identifiers Array(Nullable(String))), subject_key_id Nullable(String)), fingerprint_md5 Nullable(String), fingerprint_sha1 Nullable(String), fingerprint_sha256 Nullable(String), issuer Tuple(common_name Array(Nullable(String)), country Array(Nullable(String)), domain_component Array(Nullable(String)), email_address Array(Nullable(String)), given_name Array(Nullable(String)), locality Array(Nullable(String)), organization Array(Nullable(String)), organizational_unit Array(Nullable(String)), postal_code Array(Nullable(String)), province Array(Nullable(String)), serial_number Array(Nullable(String)), street_address Array(Nullable(String)), surname Array(Nullable(String))), issuer_dn Nullable(String), names Array(Nullable(String)), redacted Nullable(Bool), serial_number Nullable(String), signature Tuple(self_signed Nullable(Bool), signature_algorithm Tuple(name Nullable(String), oid Nullable(String)), valid Nullable(Bool), value Nullable(String)), signature_algorithm Tuple(name Nullable(String), oid Nullable(String)), spki_subject_fingerprint Nullable(String), subject Tuple(common_name Array(Nullable(String)), country Array(Nullable(String)), domain_component Array(Nullable(String)), email_address Array(Nullable(String)), given_name Array(Nullable(String)), jurisdiction_country Array(Nullable(String)), jurisdiction_locality Array(Nullable(String)), jurisdiction_province Array(Nullable(String)), locality Array(Nullable(String)), organization Array(Nullable(String)), organizational_unit Array(Nullable(String)), postal_code Array(Nullable(String)), province Array(Nullable(String)), serial_number Array(Nullable(String)), street_address Array(Nullable(String)), surname Array(Nullable(String))), subject_dn Nullable(String), subject_key_info Tuple(ecdsa_public_key Tuple(b Nullable(String), curve Nullable(String), gx Nullable(String), gy Nullable(String), length Nullable(Int64), n Nullable(String), p Nullable(String), pub Nullable(String), x Nullable(String), y Nullable(String)), fingerprint_sha256 Nullable(String), key_algorithm Tuple(name Nullable(String)), rsa_public_key Tuple(exponent Nullable(Int64), length Nullable(Int64), modulus Nullable(String))), tbs_fingerprint Nullable(String), tbs_noct_fingerprint Nullable(String), unknown_extensions Array(Tuple(critical Nullable(Bool), id Nullable(String), value Nullable(String))), validation_level Nullable(String), validity Tuple(end Nullable(String), length Nullable(Int64), start Nullable(String)), version Nullable(Int64)), raw Nullable(String)), chain Array(Tuple(parsed Tuple(extensions Tuple(authority_info_access Tuple(issuer_urls Array(Nullable(String)), ocsp_urls Array(Nullable(String))), authority_key_id Nullable(String), basic_constraints Tuple(is_ca Nullable(Bool), max_path_len Nullable(Int64)), certificate_policies Array(Tuple(cps Array(Nullable(String)), id Nullable(String), user_notice Array(Tuple(explicit_text Nullable(String), notice_reference Array(Tuple(organization Nullable(String))))))), crl_distribution_points Array(Nullable(String)), extended_key_usage Tuple(client_auth Nullable(Bool), code_signing Nullable(Bool), ipsec_end_system Nullable(Bool), ipsec_tunnel Nullable(Bool), ipsec_user Nullable(Bool), netscape_server_gated_crypto Nullable(Bool), ocsp_signing Nullable(Bool), server_auth Nullable(Bool), unknown Array(Nullable(String))), issuer_alt_name Tuple(email_addresses Array(Nullable(String))), key_usage Tuple(certificate_sign Nullable(Bool), content_commitment Nullable(Bool), crl_sign Nullable(Bool), digital_signature Nullable(Bool), key_encipherment Nullable(Bool), value Nullable(Int64)), name_constraints Tuple(critical Nullable(Bool), excluded_ip_addresses Array(Tuple(begin Nullable(String), cidr Nullable(String), end Nullable(String), mask Nullable(String))), excluded_names Array(Nullable(String)), permitted_directory_names Array(Tuple(organizational_unit Array(Nullable(String)))), permitted_names Array(Nullable(String))), signed_certificate_timestamps Array(Tuple(log_id Nullable(String), signature Nullable(String), timestamp Nullable(Int64), version Nullable(Int64))), subject_alt_name Tuple(directory_names Array(Tuple(common_name Array(Nullable(String)))), dns_names Array(Nullable(String)), email_addresses Array(Nullable(String)), ip_addresses Array(Nullable(String)), uniform_resource_identifiers Array(Nullable(String))), subject_key_id Nullable(String)), fingerprint_md5 Nullable(String), fingerprint_sha1 Nullable(String), fingerprint_sha256 Nullable(String), issuer Tuple(common_name Array(Nullable(String)), country Array(Nullable(String)), domain_component Array(Nullable(String)), email_address Array(Nullable(String)), locality Array(Nullable(String)), organization Array(Nullable(String)), organizational_unit Array(Nullable(String)), province Array(Nullable(String))), issuer_dn Nullable(String), names Array(Nullable(String)), redacted Nullable(Bool), serial_number Nullable(String), signature Tuple(self_signed Nullable(Bool), signature_algorithm Tuple(name Nullable(String), oid Nullable(String)), valid Nullable(Bool), value Nullable(String)), signature_algorithm Tuple(name Nullable(String), oid Nullable(String)), spki_subject_fingerprint Nullable(String), subject Tuple(common_name Array(Nullable(String)), country Array(Nullable(String)), domain_component Array(Nullable(String)), email_address Array(Nullable(String)), locality Array(Nullable(String)), organization Array(Nullable(String)), organizational_unit Array(Nullable(String)), postal_code Array(Nullable(String)), province Array(Nullable(String)), serial_number Array(Nullable(String)), street_address Array(Nullable(String))), subject_dn Nullable(String), subject_key_info Tuple(ecdsa_public_key Tuple(b Nullable(String), curve Nullable(String), gx Nullable(String), gy Nullable(String), length Nullable(Int64), n Nullable(String), p Nullable(String), pub Nullable(String), x Nullable(String), y Nullable(String)), fingerprint_sha256 Nullable(String), key_algorithm Tuple(name Nullable(String)), rsa_public_key Tuple(exponent Nullable(Int64), length Nullable(Int64), modulus Nullable(String))), tbs_fingerprint Nullable(String), tbs_noct_fingerprint Nullable(String), unknown_extensions Array(Tuple(critical Nullable(Bool), id Nullable(String), value Nullable(String))), validation_level Nullable(String), validity Tuple(end Nullable(String), length Nullable(Int64), start Nullable(String)), version Nullable(Int64)), raw Nullable(String))), validation Tuple(browser_error Nullable(String), browser_trusted Nullable(Bool))), server_finished Tuple(verify_data Nullable(String)), server_hello Tuple(cipher_suite Tuple(hex Nullable(String), name Nullable(String), value Nullable(Int64)), compression_method Nullable(Int64), extended_master_secret Nullable(Bool), heartbeat Nullable(Bool), ocsp_stapling Nullable(Bool), random Nullable(String), secure_renegotiation Nullable(Bool), session_id Nullable(String), ticket Nullable(Bool), version Tuple(name Nullable(String), value Nullable(Int64))), server_key_exchange Tuple(dh_params Tuple(generator Tuple(length Nullable(Int64), value Nullable(String)), prime Tuple(length Nullable(Int64), value Nullable(String)), server_public Tuple(length Nullable(Int64), value Nullable(String))), digest Nullable(String), ecdh_params Tuple(curve_id Tuple(id Nullable(Int64), name Nullable(String)), server_public Tuple(x Tuple(length Nullable(Int64), value Nullable(String)), y Tuple(length Nullable(Int64), value Nullable(String)))), signature Tuple(raw Nullable(String), signature_and_hash_type Tuple(hash_algorithm Nullable(String), signature_algorithm Nullable(String)), tls_version Tuple(name Nullable(String), value Nullable(Int64)), type Nullable(String), valid Nullable(Bool))))), status Nullable(String), timestamp Nullable(String)))\r\n)\r\nENGINE = MergeTree\r\nORDER BY tuple()\r\nSETTINGS index_granularity = 8192 \u2502\r\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.001 sec. \r\n\r\n:) DESCRIBE tls\r\n\r\nDESCRIBE TABLE tls\r\n\r\nQuery id: c6ea5b49-e691-499f-8b5c-6f8fd228436f\r\n\r\n   \u250c\u2500name\u2500\u252c\u2500type\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500default_type\u2500\u252c\u2500default_expression\u2500\u252c\u2500comment\u2500\u252c\u2500codec_expression\u2500\u252c\u2500ttl_expression\u2500\u2510\r\n1. \u2502 ip   \u2502 Nullable(String)                                                                                                                                                                                                                                           \u2502              \u2502                    \u2502         \u2502                  \u2502                \u2502\r\n2. \u2502 data \u2502 Tuple(\r\n    tls Tuple(\r\n        error Nullable(String),\r\n        protocol Nullable(String),\r\n        result Tuple(\r\n            handshake_log Tuple(\r\n                client_finished Tuple(\r\n                    verify_data Nullable(String)),\r\n                client_key_exchange Tuple(\r\n                    dh_params Tuple(\r\n                        client_private Tuple(\r\n                            length Nullable(Int64),\r\n                            value Nullable(String)),\r\n                        client_public Tuple(\r\n                            length Nullable(Int64),\r\n                            value Nullable(String)),\r\n                        generator Tuple(\r\n                            length Nullable(Int64),\r\n                            value Nullable(String)),\r\n                        prime Tuple(\r\n                            length Nullable(Int64),\r\n                            value Nullable(String))),\r\n                    ecdh_params Tuple(\r\n                        client_private Tuple(\r\n                            length Nullable(Int64),\r\n                            value Nullable(String)),\r\n                        client_public Tuple(\r\n                            x Tuple(\r\n                                length Nullable(Int64),\r\n                                value Nullable(String)),\r\n                            y Tuple(\r\n                                length Nullable(Int64),\r\n                                value Nullable(String))),\r\n                        curve_id Tuple(\r\n                            id Nullable(Int64),\r\n                            name Nullable(String))),\r\n                    rsa_params Tuple(\r\n                        encrypted_pre_master_secret Nullable(String),\r\n                        length Nullable(Int64))),\r\n                key_material Tuple(\r\n                    master_secret Tuple(\r\n                        length Nullable(Int64),\r\n                        value Nullable(String)),\r\n                    pre_master_secret Tuple(\r\n                        length Nullable(Int64),\r\n                        value Nullable(String))),\r\n                server_certificates Tuple(\r\n                    certificate Tuple(\r\n                        parsed Tuple(\r\n                            extensions Tuple(\r\n                                authority_info_access Tuple(\r\n                                    issuer_urls Array(Nullable(String)),\r\n                                    ocsp_urls Array(Nullable(String))),\r\n                                authority_key_id Nullable(String),\r\n                                basic_constraints Tuple(\r\n                                    is_ca Nullable(Bool),\r\n                                    max_path_len Nullable(Int64)),\r\n                                certificate_policies Array(Tuple(\r\n                                    cps Array(Nullable(String)),\r\n                                    id Nullable(String),\r\n                                    user_notice Array(Tuple(\r\n                                        explicit_text Nullable(String),\r\n                                        notice_reference Array(Tuple(\r\n                                            notice_numbers Array(Nullable(Int64)),\r\n                                            organization Nullable(String))))))),\r\n                                crl_distribution_points Array(Nullable(String)),\r\n                                extended_key_usage Tuple(\r\n                                    client_auth Nullable(Bool),\r\n                                    code_signing Nullable(Bool),\r\n                                    email_protection Nullable(Bool),\r\n                                    ipsec_end_system Nullable(Bool),\r\n                                    ipsec_intermediate_system_usage Nullable(Bool),\r\n                                    ipsec_tunnel Nullable(Bool),\r\n                                    ipsec_user Nullable(Bool),\r\n                                    microsoft_server_gated_crypto Nullable(Bool),\r\n                                    netscape_server_gated_crypto Nullable(Bool),\r\n                                    ocsp_signing Nullable(Bool),\r\n                                    server_auth Nullable(Bool),\r\n                                    time_stamping Nullable(Bool)),\r\n                                issuer_alt_name Tuple(\r\n                                    email_addresses Array(Nullable(String)),\r\n                                    uniform_resource_identifiers Array(Nullable(String))),\r\n                                key_usage Tuple(\r\n                                    certificate_sign Nullable(Bool),\r\n                                    content_commitment Nullable(Bool),\r\n                                    crl_sign Nullable(Bool),\r\n                                    data_encipherment Nullable(Bool),\r\n                                    decipher_only Nullable(Bool),\r\n                                    digital_signature Nullable(Bool),\r\n                                    encipher_only Nullable(Bool),\r\n                                    key_agreement Nullable(Bool),\r\n                                    key_encipherment Nullable(Bool),\r\n                                    value Nullable(Int64)),\r\n                                signed_certificate_timestamps Array(Tuple(\r\n                                    log_id Nullable(String),\r\n                                    signature Nullable(String),\r\n                                    timestamp Nullable(Int64),\r\n                                    version Nullable(Int64))),\r\n                                subject_alt_name Tuple(\r\n                                    dns_names Array(Nullable(String)),\r\n                                    email_addresses Array(Nullable(String)),\r\n                                    ip_addresses Array(Nullable(String)),\r\n                                    other_names Array(Tuple(\r\n                                        id Nullable(String),\r\n                                        value Nullable(String))),\r\n                                    uniform_resource_identifiers Array(Nullable(String))),\r\n                                subject_key_id Nullable(String)),\r\n                            fingerprint_md5 Nullable(String),\r\n                            fingerprint_sha1 Nullable(String),\r\n                            fingerprint_sha256 Nullable(String),\r\n                            issuer Tuple(\r\n                                common_name Array(Nullable(String)),\r\n                                country Array(Nullable(String)),\r\n                                domain_component Array(Nullable(String)),\r\n                                email_address Array(Nullable(String)),\r\n                                given_name Array(Nullable(String)),\r\n                                locality Array(Nullable(String)),\r\n                                organization Array(Nullable(String)),\r\n                                organizational_unit Array(Nullable(String)),\r\n                                postal_code Array(Nullable(String)),\r\n                                province Array(Nullable(String)),\r\n                                serial_number Array(Nullable(String)),\r\n                                street_address Array(Nullable(String)),\r\n                                surname Array(Nullable(String))),\r\n                            issuer_dn Nullable(String),\r\n                            names Array(Nullable(String)),\r\n                            redacted Nullable(Bool),\r\n                            serial_number Nullable(String),\r\n                            signature Tuple(\r\n                                self_signed Nullable(Bool),\r\n                                signature_algorithm Tuple(\r\n                                    name Nullable(String),\r\n                                    oid Nullable(String)),\r\n                                valid Nullable(Bool),\r\n                                value Nullable(String)),\r\n                            signature_algorithm Tuple(\r\n                                name Nullable(String),\r\n                                oid Nullable(String)),\r\n                            spki_subject_fingerprint Nullable(String),\r\n                            subject Tuple(\r\n                                common_name Array(Nullable(String)),\r\n                                country Array(Nullable(String)),\r\n                                domain_component Array(Nullable(String)),\r\n                                email_address Array(Nullable(String)),\r\n                                given_name Array(Nullable(String)),\r\n                                jurisdiction_country Array(Nullable(String)),\r\n                                jurisdiction_locality Array(Nullable(String)),\r\n                                jurisdiction_province Array(Nullable(String)),\r\n                                locality Array(Nullable(String)),\r\n                                organization Array(Nullable(String)),\r\n                                organizational_unit Array(Nullable(String)),\r\n                                postal_code Array(Nullable(String)),\r\n                                province Array(Nullable(String)),\r\n                                serial_number Array(Nullable(String)),\r\n                                street_address Array(Nullable(String)),\r\n                                surname Array(Nullable(String))),\r\n                            subject_dn Nullable(String),\r\n                            subject_key_info Tuple(\r\n                                ecdsa_public_key Tuple(\r\n                                    b Nullable(String),\r\n                                    curve Nullable(String),\r\n                                    gx Nullable(String),\r\n                                    gy Nullable(String),\r\n                                    length Nullable(Int64),\r\n                                    n Nullable(String),\r\n                                    p Nullable(String),\r\n                                    pub Nullable(String),\r\n                                    x Nullable(String),\r\n                                    y Nullable(String)),\r\n                                fingerprint_sha256 Nullable(String),\r\n                                key_algorithm Tuple(\r\n                                    n\u22ef\u2502              \u2502                    \u2502         \u2502                  \u2502                \u2502\r\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\n",
  "hints_text": "Hello folks, i'm interested in picking this as my first patch. I'm going through the codebase, would really appreciate if someone could point me to the section of project that deals with this. \r\n\r\nTIA!\n@alexey-milovidov Hi, I want to give it a try.\n@SuperbCoding, that's amazing! It will be very appreciated!\n> @SuperbCoding, that's amazing! It will be very appreciated!\r\n\r\nhttps://github.com/ClickHouse/ClickHouse/pull/66497",
  "created_at": "2024-08-17T01:48:07Z"
}