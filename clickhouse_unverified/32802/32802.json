{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 32802,
  "instance_id": "ClickHouse__ClickHouse-32802",
  "issue_numbers": [
    "14441"
  ],
  "base_commit": "774620e5c0aa3944d572f35e02f4c0ffd0fbdec2",
  "patch": "diff --git a/src/Databases/DatabaseFactory.cpp b/src/Databases/DatabaseFactory.cpp\nindex a4c8f3cdb77e..d0c5544607da 100644\n--- a/src/Databases/DatabaseFactory.cpp\n+++ b/src/Databases/DatabaseFactory.cpp\n@@ -204,7 +204,8 @@ DatabasePtr DatabaseFactory::getImpl(const ASTCreateQuery & create, const String\n                 mysql_database_settings->loadFromQuery(*engine_define); /// higher priority\n \n                 return std::make_shared<DatabaseMySQL>(\n-                    context, database_name, metadata_path, engine_define, configuration.database, std::move(mysql_database_settings), std::move(mysql_pool));\n+                    context, database_name, metadata_path, engine_define, configuration.database,\n+                    std::move(mysql_database_settings), std::move(mysql_pool), create.attach);\n             }\n \n             MySQLClient client(configuration.host, configuration.port, configuration.username, configuration.password);\ndiff --git a/src/Databases/MySQL/DatabaseMySQL.cpp b/src/Databases/MySQL/DatabaseMySQL.cpp\nindex f62e06aff8d8..cc6d808a564a 100644\n--- a/src/Databases/MySQL/DatabaseMySQL.cpp\n+++ b/src/Databases/MySQL/DatabaseMySQL.cpp\n@@ -53,7 +53,8 @@ DatabaseMySQL::DatabaseMySQL(\n     const ASTStorage * database_engine_define_,\n     const String & database_name_in_mysql_,\n     std::unique_ptr<ConnectionMySQLSettings> settings_,\n-    mysqlxx::PoolWithFailover && pool)\n+    mysqlxx::PoolWithFailover && pool,\n+    bool attach)\n     : IDatabase(database_name_)\n     , WithContext(context_->getGlobalContext())\n     , metadata_path(metadata_path_)\n@@ -62,7 +63,19 @@ DatabaseMySQL::DatabaseMySQL(\n     , database_settings(std::move(settings_))\n     , mysql_pool(std::move(pool))\n {\n-    empty(); /// test database is works fine.\n+    try\n+    {\n+        /// Test that the database is working fine; it will also fetch tables.\n+        empty();\n+    }\n+    catch (...)\n+    {\n+        if (attach)\n+            tryLogCurrentException(\"DatabaseMySQL\");\n+        else\n+            throw;\n+    }\n+\n     thread = ThreadFromGlobalPool{&DatabaseMySQL::cleanOutdatedTables, this};\n }\n \ndiff --git a/src/Databases/MySQL/DatabaseMySQL.h b/src/Databases/MySQL/DatabaseMySQL.h\nindex e57ac442db1e..1ee090ecd524 100644\n--- a/src/Databases/MySQL/DatabaseMySQL.h\n+++ b/src/Databases/MySQL/DatabaseMySQL.h\n@@ -45,7 +45,8 @@ class DatabaseMySQL final : public IDatabase, WithContext\n         const ASTStorage * database_engine_define,\n         const String & database_name_in_mysql,\n         std::unique_ptr<ConnectionMySQLSettings> settings_,\n-        mysqlxx::PoolWithFailover && pool);\n+        mysqlxx::PoolWithFailover && pool,\n+        bool attach);\n \n     String getEngineName() const override { return \"MySQL\"; }\n \n",
  "test_patch": "diff --git a/tests/integration/test_mysql_database_engine/test.py b/tests/integration/test_mysql_database_engine/test.py\nindex 49206ab1abe8..ff1c955d78b5 100644\n--- a/tests/integration/test_mysql_database_engine/test.py\n+++ b/tests/integration/test_mysql_database_engine/test.py\n@@ -6,9 +6,10 @@\n import pytest\n from helpers.client import QueryRuntimeException\n from helpers.cluster import ClickHouseCluster\n+from helpers.network import PartitionManager\n \n cluster = ClickHouseCluster(__file__)\n-clickhouse_node = cluster.add_instance('node1', main_configs=['configs/remote_servers.xml', 'configs/named_collections.xml'], with_mysql=True)\n+clickhouse_node = cluster.add_instance('node1', main_configs=['configs/remote_servers.xml', 'configs/named_collections.xml'], with_mysql=True, stay_alive=True)\n \n \n @pytest.fixture(scope=\"module\")\n@@ -27,6 +28,7 @@ def __init__(self, user, password, hostname, port):\n         self.hostname = hostname\n         self.password = password\n         self.mysql_connection = None  # lazy init\n+        self.ip_address = hostname\n \n     def query(self, execution_query):\n         if self.mysql_connection is None:\n@@ -424,3 +426,24 @@ def test_predefined_connection_configuration(started_cluster):\n \n         clickhouse_node.query(\"CREATE DATABASE test_database ENGINE = MySQL(mysql1, port=3306)\")\n         assert clickhouse_node.query(\"SELECT count() FROM `test_database`.`test_table`\").rstrip() == '100'\n+\n+\n+def test_restart_server(started_cluster):\n+    with contextlib.closing(MySQLNodeInstance('root', 'clickhouse', started_cluster.mysql_ip, started_cluster.mysql_port)) as mysql_node:\n+        mysql_node.query(\"DROP DATABASE IF EXISTS test_restart\")\n+        clickhouse_node.query(\"DROP DATABASE IF EXISTS test_restart\")\n+        clickhouse_node.query_and_get_error(\"CREATE DATABASE test_restart ENGINE = MySQL('mysql57:3306', 'test_restart', 'root', 'clickhouse')\")\n+        assert 'test_restart' not in clickhouse_node.query('SHOW DATABASES')\n+\n+        mysql_node.query(\"CREATE DATABASE test_restart DEFAULT CHARACTER SET 'utf8'\")\n+        mysql_node.query(\"CREATE TABLE `test_restart`.`test_table` ( `id` int(11) NOT NULL, PRIMARY KEY (`id`) ) ENGINE=InnoDB;\")\n+        clickhouse_node.query(\"CREATE DATABASE test_restart ENGINE = MySQL('mysql57:3306', 'test_restart', 'root', 'clickhouse')\")\n+\n+        assert 'test_restart' in clickhouse_node.query('SHOW DATABASES')\n+        assert 'test_table' in clickhouse_node.query('SHOW TABLES FROM test_restart')\n+\n+        with PartitionManager() as pm:\n+            pm.partition_instances(clickhouse_node, mysql_node, action='REJECT --reject-with tcp-reset')\n+            clickhouse_node.restart_clickhouse()\n+            clickhouse_node.query_and_get_error('SHOW TABLES FROM test_restart')\n+        assert 'test_table' in clickhouse_node.query('SHOW TABLES FROM test_restart')\n",
  "problem_statement": "ClickHouse fails to start with 'Cannot create MySQL database' when MySQL is not available\nI had one mysql engine connection in clickhouse. \r\nI shutdown mysql aws RDS instance.\r\n\r\nI updated clickhouse using apt get.\r\nThen I restarted clickhouse. Clickhouse wont start.\r\n\r\n`ClickHouse client version 20.7.2.30 (official build).`\r\n\r\n```\r\nNo LSB modules are available.\r\nDistributor ID:\tDebian\r\nDescription:\tDebian GNU/Linux 9.13 (stretch)\r\nRelease:\t9.13\r\nCodename:\tstretch\r\n```\r\n\r\nclickhouse server log\r\n\r\n```\r\n2020.09.03 12:31:01.937116 [ 947 ] {} <Debug> Application: Shut down storages.\r\n2020.09.03 12:31:01.937566 [ 947 ] {} <Debug> Application: Destroyed global context.\r\n2020.09.03 12:31:01.937693 [ 947 ] {} <Error> Application: DB::Exception: Cannot create MySQL database, because Poco::Exception. Code: 1000, e.code() = 2002, e.displayText() = mysqlxx::ConnectionFailed: Can't connect to MySQL server on '.....rds.amazonaws.com' (110) ((nullptr):0), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x1271b990 in /usr/bin/clickhouse\r\n1. ? @ 0x12596556 in /usr/bin/clickhouse\r\n2. mysqlxx::Pool::allocConnection(bool) @ 0x1259fb31 in /usr/bin/clickhouse\r\n3. mysqlxx::Pool::initialize() @ 0x1259fedd in /usr/bin/clickhouse\r\n4. mysqlxx::Pool::get() @ 0x125a00e8 in /usr/bin/clickhouse\r\n5. DB::DatabaseMySQL::fetchTablesWithModificationTime() const @ 0xf46df4a in /usr/bin/clickhouse\r\n6. DB::DatabaseMySQL::fetchTablesIntoLocalCache() const @ 0xf470b57 in /usr/bin/clickhouse\r\n7. DB::DatabaseMySQL::empty() const @ 0xf470c15 in /usr/bin/clickhouse\r\n8. DB::DatabaseFactory::getImpl(DB::ASTCreateQuery const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&) @ 0xf462839 in /usr/bin/clickhouse\r\n9. DB::DatabaseFactory::get(DB::ASTCreateQuery const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&) @ 0xf463052 in /usr/bin/clickhouse\r\n10. DB::InterpreterCreateQuery::createDatabase(DB::ASTCreateQuery&) @ 0xf455fc0 in /usr/bin/clickhouse\r\n11. DB::InterpreterCreateQuery::execute() @ 0xf456f5e in /usr/bin/clickhouse\r\n12. ? @ 0xf8338fa in /usr/bin/clickhouse\r\n13. DB::loadMetadata(DB::Context&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) @ 0xf83441b in /usr/bin/clickhouse\r\n14. DB::Server::main(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xa495dd7 in /usr/bin/clickhouse\r\n15. Poco::Util::Application::run() @ 0x1264a9e7 in /usr/bin/clickhouse\r\n16. DB::Server::run() @ 0xa4558d9 in /usr/bin/clickhouse\r\n17. mainEntryClickHouseServer(int, char**) @ 0xa44a993 in /usr/bin/clickhouse\r\n18. main @ 0xa3dd919 in /usr/bin/clickhouse\r\n19. __libc_start_main @ 0x202e1 in /lib/x86_64-linux-gnu/libc-2.24.so\r\n20. _start @ 0xa3dd02e in /usr/bin/clickhouse\r\n (version 20.7.2.30 (official build))\r\n2020.09.03 12:31:01.937740 [ 947 ] {} <Informa\r\n```\r\n\n",
  "hints_text": "As a workaround you can move database.sql from metadata folder to somewhere /home or /tmp\r\nStart CH server and run sql from database.sql manually.\r\n\r\n\n#16132\n@tavplubix We can do lazy loading of all or a subset of databases during server startup.\r\nWe can make make a wrapper `DatabaseLoader` that will load the underlying database in a thread.\r\nAll the methods will wait for loading to finish and redirect call to the method of the underlying database, or if it was loaded with an error, rethrow the exception.\r\n\r\nCaveats:\r\n- check all the places with typeid_cast, assert_cast or similar;\r\n- check for possible cases with deadlocks or infinite recursion.\nany update abt this problem?",
  "created_at": "2021-12-15T12:10:16Z",
  "modified_files": [
    "src/Databases/DatabaseFactory.cpp",
    "src/Databases/MySQL/DatabaseMySQL.cpp",
    "src/Databases/MySQL/DatabaseMySQL.h"
  ],
  "modified_test_files": [
    "tests/integration/test_mysql_database_engine/test.py"
  ]
}