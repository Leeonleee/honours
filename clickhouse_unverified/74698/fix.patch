diff --git a/src/DataTypes/DataTypeTuple.cpp b/src/DataTypes/DataTypeTuple.cpp
index 1267338acb95..a5f5b6692bfc 100644
--- a/src/DataTypes/DataTypeTuple.cpp
+++ b/src/DataTypes/DataTypeTuple.cpp
@@ -367,7 +367,7 @@ MutableSerializationInfoPtr DataTypeTuple::createSerializationInfo(const Seriali
     for (const auto & elem : elems)
         infos.push_back(elem->createSerializationInfo(settings));
 
-    return std::make_shared<SerializationInfoTuple>(std::move(infos), names, settings);
+    return std::make_shared<SerializationInfoTuple>(std::move(infos), names);
 }
 
 SerializationInfoPtr DataTypeTuple::getSerializationInfo(const IColumn & column) const
@@ -387,7 +387,7 @@ SerializationInfoPtr DataTypeTuple::getSerializationInfo(const IColumn & column)
         infos.push_back(const_pointer_cast<SerializationInfo>(element_info));
     }
 
-    return std::make_shared<SerializationInfoTuple>(std::move(infos), names, SerializationInfo::Settings{});
+    return std::make_shared<SerializationInfoTuple>(std::move(infos), names);
 }
 
 void DataTypeTuple::forEachChild(const ChildCallback & callback) const
diff --git a/src/DataTypes/Serializations/SerializationInfoTuple.cpp b/src/DataTypes/Serializations/SerializationInfoTuple.cpp
index 7f36ecd64de8..405b8ab6d5a6 100644
--- a/src/DataTypes/Serializations/SerializationInfoTuple.cpp
+++ b/src/DataTypes/Serializations/SerializationInfoTuple.cpp
@@ -15,9 +15,9 @@ namespace ErrorCodes
     extern const int NOT_IMPLEMENTED;
 }
 
-SerializationInfoTuple::SerializationInfoTuple(
-    MutableSerializationInfos elems_, Names names_, const Settings & settings_)
-    : SerializationInfo(ISerialization::Kind::DEFAULT, settings_)
+SerializationInfoTuple::SerializationInfoTuple(MutableSerializationInfos elems_, Names names_)
+    /// Pass default settings because Tuple column cannot be sparse itself.
+    : SerializationInfo(ISerialization::Kind::DEFAULT, SerializationInfo::Settings{})
     , elems(std::move(elems_))
     , names(std::move(names_))
 {
@@ -112,7 +112,7 @@ MutableSerializationInfoPtr SerializationInfoTuple::clone() const
     for (const auto & elem : elems)
         elems_cloned.push_back(elem->clone());
 
-    auto ret = std::make_shared<SerializationInfoTuple>(std::move(elems_cloned), names, settings);
+    auto ret = std::make_shared<SerializationInfoTuple>(std::move(elems_cloned), names);
     ret->data = data;
     return ret;
 }
@@ -128,15 +128,15 @@ MutableSerializationInfoPtr SerializationInfoTuple::createWithType(
     const auto & old_elements = old_tuple.getElements();
     const auto & new_elements = new_tuple.getElements();
 
-    assert(elems.size() == old_elements.size());
-    assert(elems.size() == new_elements.size());
+    chassert(elems.size() == old_elements.size());
+    chassert(elems.size() == new_elements.size());
 
     MutableSerializationInfos infos;
     infos.reserve(elems.size());
     for (size_t i = 0; i < elems.size(); ++i)
         infos.push_back(elems[i]->createWithType(*old_elements[i], *new_elements[i], new_settings));
 
-    return std::make_shared<SerializationInfoTuple>(std::move(infos), names, new_settings);
+    return std::make_shared<SerializationInfoTuple>(std::move(infos), names);
 }
 
 void SerializationInfoTuple::serialializeKindBinary(WriteBuffer & out) const
diff --git a/src/DataTypes/Serializations/SerializationInfoTuple.h b/src/DataTypes/Serializations/SerializationInfoTuple.h
index c0050df9b6e7..2127611364fe 100644
--- a/src/DataTypes/Serializations/SerializationInfoTuple.h
+++ b/src/DataTypes/Serializations/SerializationInfoTuple.h
@@ -8,7 +8,7 @@ namespace DB
 class SerializationInfoTuple : public SerializationInfo
 {
 public:
-    SerializationInfoTuple(MutableSerializationInfos elems_, Names names_, const Settings & settings_);
+    SerializationInfoTuple(MutableSerializationInfos elems_, Names names_);
 
     bool hasCustomSerialization() const override;
     bool structureEquals(const SerializationInfo & rhs) const override;
diff --git a/src/Storages/MergeTree/MergeTreeDataWriter.cpp b/src/Storages/MergeTree/MergeTreeDataWriter.cpp
index f1376f98adc1..274308bffced 100644
--- a/src/Storages/MergeTree/MergeTreeDataWriter.cpp
+++ b/src/Storages/MergeTree/MergeTreeDataWriter.cpp
@@ -681,7 +681,7 @@ MergeTreeDataWriter::TemporaryPart MergeTreeDataWriter::writeTempPartImpl(
     for (const auto & [column_name, _] : columns)
     {
         auto & column = block.getByName(column_name);
-        if (column.column->isSparse() && infos.getKind(column_name) != ISerialization::Kind::SPARSE)
+        if (infos.getKind(column_name) != ISerialization::Kind::SPARSE)
             column.column = recursiveRemoveSparse(column.column);
     }
 
