{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 51642,
  "instance_id": "ClickHouse__ClickHouse-51642",
  "issue_numbers": [
    "51588"
  ],
  "base_commit": "9448d42aea6c5befae09cc923570fd6575a6d6f8",
  "patch": "diff --git a/src/Functions/FunctionBinaryArithmetic.h b/src/Functions/FunctionBinaryArithmetic.h\nindex c699da4eaf60..bf3b33d13ffc 100644\n--- a/src/Functions/FunctionBinaryArithmetic.h\n+++ b/src/Functions/FunctionBinaryArithmetic.h\n@@ -1919,25 +1919,6 @@ ColumnPtr executeStringInteger(const ColumnsWithTypeAndName & arguments, const A\n             return executeAggregateAddition(arguments, result_type, input_rows_count);\n         }\n \n-        /// Special case - one or both arguments are IPv4\n-        if (isIPv4(arguments[0].type) || isIPv4(arguments[1].type))\n-        {\n-            ColumnsWithTypeAndName new_arguments {\n-                {\n-                    isIPv4(arguments[0].type) ? castColumn(arguments[0], std::make_shared<DataTypeUInt32>()) : arguments[0].column,\n-                    isIPv4(arguments[0].type) ? std::make_shared<DataTypeUInt32>() : arguments[0].type,\n-                    arguments[0].name,\n-                },\n-                {\n-                    isIPv4(arguments[1].type) ? castColumn(arguments[1], std::make_shared<DataTypeUInt32>()) : arguments[1].column,\n-                    isIPv4(arguments[1].type) ? std::make_shared<DataTypeUInt32>() : arguments[1].type,\n-                    arguments[1].name\n-                }\n-            };\n-\n-            return executeImpl(new_arguments, result_type, input_rows_count);\n-        }\n-\n         /// Special case when the function is plus or minus, one of arguments is Date/DateTime and another is Interval.\n         if (auto function_builder = getFunctionForIntervalArithmetic(arguments[0].type, arguments[1].type, context))\n         {\n@@ -1991,6 +1972,25 @@ ColumnPtr executeStringInteger(const ColumnsWithTypeAndName & arguments, const A\n             return wrapInNullable(res, arguments, result_type, input_rows_count);\n         }\n \n+        /// Special case - one or both arguments are IPv4\n+        if (isIPv4(arguments[0].type) || isIPv4(arguments[1].type))\n+        {\n+            ColumnsWithTypeAndName new_arguments {\n+                {\n+                    isIPv4(arguments[0].type) ? castColumn(arguments[0], std::make_shared<DataTypeUInt32>()) : arguments[0].column,\n+                    isIPv4(arguments[0].type) ? std::make_shared<DataTypeUInt32>() : arguments[0].type,\n+                    arguments[0].name,\n+                },\n+                {\n+                    isIPv4(arguments[1].type) ? castColumn(arguments[1], std::make_shared<DataTypeUInt32>()) : arguments[1].column,\n+                    isIPv4(arguments[1].type) ? std::make_shared<DataTypeUInt32>() : arguments[1].type,\n+                    arguments[1].name\n+                }\n+            };\n+\n+            return executeImpl2(new_arguments, result_type, input_rows_count, right_nullmap);\n+        }\n+\n         const auto * const left_generic = left_argument.type.get();\n         const auto * const right_generic = right_argument.type.get();\n         ColumnPtr res;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02531_ipv4_arithmetic.reference b/tests/queries/0_stateless/02531_ipv4_arithmetic.reference\nindex 6f03e4e6903e..28d6f76e9e9d 100644\n--- a/tests/queries/0_stateless/02531_ipv4_arithmetic.reference\n+++ b/tests/queries/0_stateless/02531_ipv4_arithmetic.reference\n@@ -1,3 +1,5 @@\n+-- { echoOn }\n+SELECT number, ip, ip % number FROM (SELECT number, toIPv4('1.2.3.4') as ip FROM numbers(10, 20));\n 10\t1.2.3.4\t0\n 11\t1.2.3.4\t3\n 12\t1.2.3.4\t4\n@@ -18,3 +20,24 @@\n 27\t1.2.3.4\t13\n 28\t1.2.3.4\t0\n 29\t1.2.3.4\t1\n+SELECT number, ip, number % ip FROM (SELECT number, toIPv4OrNull('0.0.0.3') as ip FROM numbers(10, 20));\n+10\t0.0.0.3\t1\n+11\t0.0.0.3\t2\n+12\t0.0.0.3\t0\n+13\t0.0.0.3\t1\n+14\t0.0.0.3\t2\n+15\t0.0.0.3\t0\n+16\t0.0.0.3\t1\n+17\t0.0.0.3\t2\n+18\t0.0.0.3\t0\n+19\t0.0.0.3\t1\n+20\t0.0.0.3\t2\n+21\t0.0.0.3\t0\n+22\t0.0.0.3\t1\n+23\t0.0.0.3\t2\n+24\t0.0.0.3\t0\n+25\t0.0.0.3\t1\n+26\t0.0.0.3\t2\n+27\t0.0.0.3\t0\n+28\t0.0.0.3\t1\n+29\t0.0.0.3\t2\ndiff --git a/tests/queries/0_stateless/02531_ipv4_arithmetic.sql b/tests/queries/0_stateless/02531_ipv4_arithmetic.sql\nindex 59a99842d61a..88c8cf936dde 100644\n--- a/tests/queries/0_stateless/02531_ipv4_arithmetic.sql\n+++ b/tests/queries/0_stateless/02531_ipv4_arithmetic.sql\n@@ -1,1 +1,4 @@\n-SELECT number, ip, ip % number FROM (SELECT number, toIPv4('1.2.3.4') as ip FROM numbers(10, 20));\n\\ No newline at end of file\n+-- { echoOn }\n+SELECT number, ip, ip % number FROM (SELECT number, toIPv4('1.2.3.4') as ip FROM numbers(10, 20));\n+SELECT number, ip, number % ip FROM (SELECT number, toIPv4OrNull('0.0.0.3') as ip FROM numbers(10, 20));\n+\n",
  "problem_statement": "Logical error: 'Arguments of 'intDiv' have incorrect data types: 'number' of type 'UInt64', 'toIPv4OrNull('0')' of type 'IPv4''.\n```\r\nSELECT sum(u) FROM (SELECT intDiv(number, toIPv4OrNull('0')) AS k, uniqCombined(reinterpretAsString(number % NULL)) AS u FROM numbers(65535 * 10) GROUP BY k) WHERE toIPv4OrNull(NULL) WITH TOTALS\r\n```\r\n\r\nhttps://s3.amazonaws.com/clickhouse-test-reports/51585/85d621dc389fc53e610b95d16d7d69cb0a94c4a2/fuzzer_astfuzzerubsan/report.html\r\n\r\n```\r\n2023.06.29 13:51:54.328922 [ 150 ] {1031a32c-a8c9-4a44-a047-6c4866b9741a} <Fatal> : Logical error: 'Arguments of 'intDiv' have incorrect data types: 'number' of type 'UInt64', 'toIPv4OrNull('0')' of type 'IPv4''.\r\n2023.06.29 13:51:54.329251 [ 658 ] {} <Fatal> BaseDaemon: ########################################\r\n2023.06.29 13:51:54.329293 [ 658 ] {} <Fatal> BaseDaemon: (version 23.6.1.1, build id: 938311B7C4FD0C470F830E91742CD217C99B301C, git hash: 98e90d9a1da0ee728526a65851849a4a94f0c93a) (from thread 150) (query_id: 1031a32c-a8c9-4a44-a047-6c4866b9741a) (query: SELECT sum(u) FROM (SELECT intDiv(number, toIPv4OrNull('0')) AS k, uniqCombined(reinterpretAsString(number % NULL)) AS u FROM numbers(65535 * 10) GROUP BY k) WHERE toIPv4OrNull(NULL) WITH TOTALS) Received signal Aborted (6)\r\n2023.06.29 13:51:54.329315 [ 658 ] {} <Fatal> BaseDaemon: \r\n2023.06.29 13:51:54.329331 [ 658 ] {} <Fatal> BaseDaemon: Stack trace: 0x00007fa05900f00b 0x00007fa058fee859 0x0000556693801e48 0x00005566938027ae 0x0000556688c1bc43 0x000055668c23ff98 0x000055668c24010c 0x000055668c23d38e 0x000055668c23a871 0x000055668715495f 0x0000556687153501 0x000055669f9b2cf9 0x000055669f9b492b 0x000055669f9b5da6 0x00005566a05caedf 0x00005566a3bcb6d3 0x00005566a3ed2cdc 0x00005566a17930f8 0x00005566a178033a 0x00005566a177c868 0x00005566a187fdd8 0x00005566a178c217 0x00005566a177ed0e 0x00005566a177c868 0x00005566a187fdd8 0x00005566a188155f 0x00005566a1ddfd56 0x00005566a1dd961c 0x00005566a35b8b93 0x00005566a35e48b2 0x00005566a4da761e 0x00005566a4da875a 0x00005566a503d4b0 0x00005566a50385d1 0x00007fa0591c6609 0x00007fa0590eb133\r\n2023.06.29 13:51:54.329364 [ 658 ] {} <Fatal> BaseDaemon: 3. gsignal @ 0x00007fa05900f00b in ?\r\n2023.06.29 13:51:54.329379 [ 658 ] {} <Fatal> BaseDaemon: 4. abort @ 0x00007fa058fee859 in ?\r\n2023.06.29 13:51:54.353893 [ 658 ] {} <Fatal> BaseDaemon: 5. ./build_docker/./src/Common/Exception.cpp:49: DB::abortOnFailedAssertion(String const&) @ 0x000000003798be48 in /workspace/clickhouse\r\n2023.06.29 13:51:54.377516 [ 658 ] {} <Fatal> BaseDaemon: 6. ./build_docker/./src/Common/Exception.cpp:93: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000003798c7ae in /workspace/clickhouse\r\n2023.06.29 13:51:55.752406 [ 658 ] {} <Fatal> BaseDaemon: 7. DB::Exception::Exception<String, String const&, String, String const&, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String const&>::type, std::type_identity<String>::type, std::type_identity<String const&>::type, std::type_identity<String>::type>, String&&, String const&, String&&, String const&, String&&) @ 0x000000002cda5c43 in /workspace/clickhouse\r\n2023.06.29 13:51:57.083602 [ 658 ] {} <Fatal> BaseDaemon: 8. DB::FunctionBinaryArithmetic<DB::DivideIntegralImpl, DB::NameIntDiv, false, true, true>::executeImpl2(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 63ul, 64ul> const*) const @ 0x00000000303c9f98 in /workspace/clickhouse\r\n2023.06.29 13:51:58.414855 [ 658 ] {} <Fatal> BaseDaemon: 9. DB::FunctionBinaryArithmetic<DB::DivideIntegralImpl, DB::NameIntDiv, false, true, true>::executeImpl2(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 63ul, 64ul> const*) const @ 0x00000000303ca10c in /workspace/clickhouse\r\n2023.06.29 13:51:59.746468 [ 658 ] {} <Fatal> BaseDaemon: 10. DB::FunctionBinaryArithmetic<DB::DivideIntegralImpl, DB::NameIntDiv, false, true, true>::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x00000000303c738e in /workspace/clickhouse\r\n2023.06.29 13:52:01.078353 [ 658 ] {} <Fatal> BaseDaemon: 11. DB::FunctionBinaryArithmeticWithConstants<DB::DivideIntegralImpl, DB::NameIntDiv, false, true, true>::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x00000000303c4871 in /workspace/clickhouse\r\n2023.06.29 13:52:02.416992 [ 658 ] {} <Fatal> BaseDaemon: 12. DB::IFunction::executeImplDryRun(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000002b2de95f in /workspace/clickhouse\r\n2023.06.29 13:52:03.750315 [ 658 ] {} <Fatal> BaseDaemon: 13. DB::FunctionToExecutableFunctionAdaptor::executeDryRunImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000002b2dd501 in /workspace/clickhouse\r\n2023.06.29 13:52:03.765028 [ 658 ] {} <Fatal> BaseDaemon: 14. ./build_docker/./src/Functions/IFunction.cpp:0: DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x0000000043b3ccf9 in /workspace/clickhouse\r\n2023.06.29 13:52:03.780457 [ 658 ] {} <Fatal> BaseDaemon: 15.1. inlined from ./build_docker/./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:115: intrusive_ptr\r\n2023.06.29 13:52:03.780493 [ 658 ] {} <Fatal> BaseDaemon: 15.2. inlined from ./build_docker/./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:122: boost::intrusive_ptr<DB::IColumn const>::operator=(boost::intrusive_ptr<DB::IColumn const>&&)\r\n2023.06.29 13:52:03.780509 [ 658 ] {} <Fatal> BaseDaemon: 15.3. inlined from ./build_docker/./src/Common/COW.h:136: COW<DB::IColumn>::immutable_ptr<DB::IColumn>::operator=(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&&)\r\n2023.06.29 13:52:03.780523 [ 658 ] {} <Fatal> BaseDaemon: 15. ./build_docker/./src/Functions/IFunction.cpp:302: DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x0000000043b3e92b in /workspace/clickhouse\r\n2023.06.29 13:52:03.796563 [ 658 ] {} <Fatal> BaseDaemon: 16. ./build_docker/./src/Functions/IFunction.cpp:0: DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x0000000043b3fda6 in /workspace/clickhouse\r\n2023.06.29 13:52:03.998780 [ 658 ] {} <Fatal> BaseDaemon: 17.1. inlined from ./build_docker/./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:115: intrusive_ptr\r\n2023.06.29 13:52:03.998838 [ 658 ] {} <Fatal> BaseDaemon: 17.2. inlined from ./build_docker/./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:122: boost::intrusive_ptr<DB::IColumn const>::operator=(boost::intrusive_ptr<DB::IColumn const>&&)\r\n2023.06.29 13:52:03.998855 [ 658 ] {} <Fatal> BaseDaemon: 17.3. inlined from ./build_docker/./src/Common/COW.h:136: COW<DB::IColumn>::immutable_ptr<DB::IColumn>::operator=(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&&)\r\n2023.06.29 13:52:03.998872 [ 658 ] {} <Fatal> BaseDaemon: 17.4. inlined from ./build_docker/./src/Interpreters/ActionsDAG.cpp:537: DB::executeActionForHeader(DB::ActionsDAG::Node const*, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>)\r\n2023.06.29 13:52:03.998885 [ 658 ] {} <Fatal> BaseDaemon: 17. ./build_docker/./src/Interpreters/ActionsDAG.cpp:656: DB::ActionsDAG::updateHeader(DB::Block) const @ 0x0000000044754edf in /workspace/clickhouse\r\n2023.06.29 13:52:04.010759 [ 658 ] {} <Fatal> BaseDaemon: 18.1. inlined from ./build_docker/./contrib/llvm-project/libcxx/include/unordered_map:1153: ~unordered_map\r\n2023.06.29 13:52:04.010800 [ 658 ] {} <Fatal> BaseDaemon: 18.2. inlined from ./build_docker/./src/Core/Block.h:25: ~Block\r\n2023.06.29 13:52:04.010813 [ 658 ] {} <Fatal> BaseDaemon: 18. ./build_docker/./src/Processors/Transforms/ExpressionTransform.cpp:8: DB::ExpressionTransform::transformHeader(DB::Block, DB::ActionsDAG const&) @ 0x0000000047d556d3 in /workspace/clickhouse\r\n2023.06.29 13:52:04.033280 [ 658 ] {} <Fatal> BaseDaemon: 19.1. inlined from ./build_docker/./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:815: std::shared_ptr<DB::ActionsDAG>::operator->[abi:v15000]() const\r\n2023.06.29 13:52:04.033330 [ 658 ] {} <Fatal> BaseDaemon: 19.2. inlined from ./build_docker/./src/Processors/QueryPlan/ExpressionStep.cpp:20: DB::getTraits(std::shared_ptr<DB::ActionsDAG> const&, DB::Block const&, DB::SortDescription const&)\r\n2023.06.29 13:52:04.033344 [ 658 ] {} <Fatal> BaseDaemon: 19. ./build_docker/./src/Processors/QueryPlan/ExpressionStep.cpp:32: DB::ExpressionStep::ExpressionStep(DB::DataStream const&, std::shared_ptr<DB::ActionsDAG> const&) @ 0x000000004805ccdc in /workspace/clickhouse\r\n2023.06.29 13:52:04.173504 [ 658 ] {} <Fatal> BaseDaemon: 20. ./build_docker/./src/Interpreters/InterpreterSelectQuery.cpp:2633: DB::InterpreterSelectQuery::executeAggregation(DB::QueryPlan&, std::shared_ptr<DB::ActionsDAG> const&, bool, bool, std::shared_ptr<DB::InputOrderInfo const>) @ 0x000000004591d0f8 in /workspace/clickhouse\r\n2023.06.29 13:52:04.310572 [ 658 ] {} <Fatal> BaseDaemon: 21. ./build_docker/./src/Interpreters/InterpreterSelectQuery.cpp:0: DB::InterpreterSelectQuery::executeImpl(DB::QueryPlan&, std::optional<DB::Pipe>) @ 0x000000004590a33a in /workspace/clickhouse\r\n2023.06.29 13:52:04.445562 [ 658 ] {} <Fatal> BaseDaemon: 22. ./build_docker/./src/Interpreters/InterpreterSelectQuery.cpp:0: DB::InterpreterSelectQuery::buildQueryPlan(DB::QueryPlan&) @ 0x0000000045906868 in /workspace/clickhouse\r\n2023.06.29 13:52:04.488943 [ 658 ] {} <Fatal> BaseDaemon: 23. ./build_docker/./src/Interpreters/InterpreterSelectWithUnionQuery.cpp:0: DB::InterpreterSelectWithUnionQuery::buildQueryPlan(DB::QueryPlan&) @ 0x0000000045a09dd8 in /workspace/clickhouse\r\n2023.06.29 13:52:04.610279 [ 658 ] {} <Fatal> BaseDaemon: 24. ./build_docker/./src/Interpreters/InterpreterSelectQuery.cpp:0: DB::InterpreterSelectQuery::executeFetchColumns(DB::QueryProcessingStage::Enum, DB::QueryPlan&) @ 0x0000000045916217 in /workspace/clickhouse\r\n2023.06.29 13:52:04.748414 [ 658 ] {} <Fatal> BaseDaemon: 25. ./build_docker/./src/Interpreters/InterpreterSelectQuery.cpp:1475: DB::InterpreterSelectQuery::executeImpl(DB::QueryPlan&, std::optional<DB::Pipe>) @ 0x0000000045908d0e in /workspace/clickhouse\r\n2023.06.29 13:52:04.884247 [ 658 ] {} <Fatal> BaseDaemon: 26. ./build_docker/./src/Interpreters/InterpreterSelectQuery.cpp:0: DB::InterpreterSelectQuery::buildQueryPlan(DB::QueryPlan&) @ 0x0000000045906868 in /workspace/clickhouse\r\n2023.06.29 13:52:04.927495 [ 658 ] {} <Fatal> BaseDaemon: 27. ./build_docker/./src/Interpreters/InterpreterSelectWithUnionQuery.cpp:0: DB::InterpreterSelectWithUnionQuery::buildQueryPlan(DB::QueryPlan&) @ 0x0000000045a09dd8 in /workspace/clickhouse\r\n2023.06.29 13:52:04.971409 [ 658 ] {} <Fatal> BaseDaemon: 28. ./build_docker/./src/Interpreters/InterpreterSelectWithUnionQuery.cpp:0: DB::InterpreterSelectWithUnionQuery::execute() @ 0x0000000045a0b55f in /workspace/clickhouse\r\n2023.06.29 13:52:05.041962 [ 658 ] {} <Fatal> BaseDaemon: 29. ./build_docker/./src/Interpreters/executeQuery.cpp:0: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x0000000045f69d56 in /workspace/clickhouse\r\n2023.06.29 13:52:05.117563 [ 658 ] {} <Fatal> BaseDaemon: 30. ./build_docker/./src/Interpreters/executeQuery.cpp:1168: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000045f6361c in /workspace/clickhouse\r\n2023.06.29 13:52:05.180618 [ 658 ] {} <Fatal> BaseDaemon: 31. ./build_docker/./src/Server/TCPHandler.cpp:0: DB::TCPHandler::runImpl() @ 0x0000000047742b93 in /workspace/clickhouse\r\n2023.06.29 13:52:05.272387 [ 658 ] {} <Fatal> BaseDaemon: 32. ./build_docker/./src/Server/TCPHandler.cpp:2059: DB::TCPHandler::run() @ 0x000000004776e8b2 in /workspace/clickhouse\r\n2023.06.29 13:52:05.277938 [ 658 ] {} <Fatal> BaseDaemon: 33. ./build_docker/./base/poco/Net/src/TCPServerConnection.cpp:57: Poco::Net::TCPServerConnection::start() @ 0x0000000048f3161e in /workspace/clickhouse\r\n2023.06.29 13:52:05.285361 [ 658 ] {} <Fatal> BaseDaemon: 34.1. inlined from ./build_docker/./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:302: std::unique_ptr<Poco::Net::TCPServerConnection, std::default_delete<Poco::Net::TCPServerConnection>>::reset[abi:v15000](Poco::Net::TCPServerConnection*)\r\n2023.06.29 13:52:05.285399 [ 658 ] {} <Fatal> BaseDaemon: 34.2. inlined from ./build_docker/./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:259: ~unique_ptr\r\n2023.06.29 13:52:05.285411 [ 658 ] {} <Fatal> BaseDaemon: 34. ./build_docker/./base/poco/Net/src/TCPServerDispatcher.cpp:116: Poco::Net::TCPServerDispatcher::run() @ 0x0000000048f3275a in /workspace/clickhouse\r\n2023.06.29 13:52:05.293171 [ 658 ] {} <Fatal> BaseDaemon: 35. ./build_docker/./base/poco/Foundation/src/ThreadPool.cpp:202: Poco::PooledThread::run() @ 0x00000000491c74b0 in /workspace/clickhouse\r\n2023.06.29 13:52:05.300409 [ 658 ] {} <Fatal> BaseDaemon: 36.1. inlined from ./build_docker/./base/poco/Foundation/include/Poco/AutoPtr.h:205: Poco::AutoPtr<Poco::ThreadImpl::ThreadData>::operator->()\r\n2023.06.29 13:52:05.300437 [ 658 ] {} <Fatal> BaseDaemon: 36. ./build_docker/./base/poco/Foundation/src/Thread_POSIX.cpp:350: Poco::ThreadImpl::runnableEntry(void*) @ 0x00000000491c25d1 in /workspace/clickhouse\r\n2023.06.29 13:52:05.300452 [ 658 ] {} <Fatal> BaseDaemon: 37. ? @ 0x00007fa0591c6609 in ?\r\n2023.06.29 13:52:05.300466 [ 658 ] {} <Fatal> BaseDaemon: 38. clone @ 0x00007fa0590eb133 in ?\r\n2023.06.29 13:52:05.300482 [ 658 ] {} <Fatal> BaseDaemon: Integrity check of the executable skipped because the reference checksum could not be read.\r\n2023.06.29 13:52:16.249419 [ 658 ] {} <Fatal> BaseDaemon: This ClickHouse version is not official and should be upgraded to the official build.\r\n2023.06.29 13:52:16.249578 [ 658 ] {} <Fatal> BaseDaemon: Changed settings: max_block_size = 10000, min_insert_block_size_rows = 1000000, min_insert_block_size_bytes = 1000000, max_threads = 16, receive_timeout = 10., receive_data_timeout_ms = 10000, extremes = true, use_uncompressed_cache = false, optimize_move_to_prewhere = true, optimize_move_to_prewhere_if_final = false, totals_mode = 'after_having_auto', allow_suspicious_low_cardinality_types = true, compile_expressions = true, group_by_two_level_threshold = 1, group_by_two_level_threshold_bytes = 100000000, enable_positional_arguments = false, force_primary_key = true, log_queries = true, distributed_product_mode = 'local', table_function_remote_max_addresses = 200, join_use_nulls = false, single_join_prefer_left_table = false, insert_distributed_sync = true, prefer_global_in_and_join = true, max_rows_to_read = 8192, max_rows_to_group_by = 100000, group_by_overflow_mode = 'any', max_bytes_before_external_group_by = 1000000, max_execution_time = 10., max_rows_in_join = 10, join_algorithm = 'auto', max_memory_usage = 9830400, send_logs_level = 'fatal', decimal_check_overflow = false, prefer_localhost_replica = false, allow_introspection_functions = true, max_partitions_per_insert_block = 100, mutations_sync = 2, convert_query_to_cnf = false, cast_keep_nullable = false, cast_ipv4_ipv6_default_on_conversion_error = false, optimize_trivial_insert_select = false, legacy_column_name_of_tuple_literal = true, local_filesystem_read_method = 'pread', remote_filesystem_read_method = 'read', load_marks_asynchronously = false, allow_deprecated_syntax_for_merge_tree = true, allow_asynchronous_read_from_io_pool_for_merge_tree = false, allow_experimental_nlp_functions = true, partial_merge_join_optimizations = 1, input_format_json_read_numbers_as_strings = true, input_format_ipv4_default_on_conversion_error = false, input_format_ipv6_default_on_conversion_error = false\r\n2023.06.29 13:53:02.502600 [ 141 ] {} <Fatal> Application: Child process was terminated by signal 6.\r\n```\n",
  "hints_text": "",
  "created_at": "2023-06-30T01:00:39Z"
}