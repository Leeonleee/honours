{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 43048,
  "instance_id": "ClickHouse__ClickHouse-43048",
  "issue_numbers": [
    "43036"
  ],
  "base_commit": "cca2620c44461ddd93e2ef6f2744c1f78cd4be9f",
  "patch": "diff --git a/src/Analyzer/Passes/QueryAnalysisPass.cpp b/src/Analyzer/Passes/QueryAnalysisPass.cpp\nindex 9db2d66d99d7..9af1d30e9560 100644\n--- a/src/Analyzer/Passes/QueryAnalysisPass.cpp\n+++ b/src/Analyzer/Passes/QueryAnalysisPass.cpp\n@@ -2136,8 +2136,8 @@ QueryTreeNodePtr QueryAnalyzer::tryResolveIdentifierFromTableExpression(const Id\n             if (qualified_identifier_with_removed_part.empty())\n                 break;\n \n-            if (scope.context->getSettingsRef().prefer_column_name_to_alias\n-                && scope.alias_name_to_expression_node.contains(qualified_identifier_with_removed_part[0]))\n+            IdentifierLookup bind_to_aliases_identifier_lookup = {qualified_identifier_with_removed_part, IdentifierLookupContext::EXPRESSION};\n+            if (tryBindIdentifierToAliases(bind_to_aliases_identifier_lookup, scope))\n                 break;\n \n             bool can_remove_qualificator = true;\n@@ -2330,6 +2330,29 @@ QueryTreeNodePtr QueryAnalyzer::tryResolveIdentifierFromArrayJoin(const Identifi\n     const auto & from_array_join_node = table_expression_node->as<const ArrayJoinNode &>();\n     auto resolved_identifier = tryResolveIdentifierFromJoinTreeNode(identifier_lookup, from_array_join_node.getTableExpression(), scope);\n \n+    if (scope.table_expressions_in_resolve_process.contains(table_expression_node.get()))\n+        return resolved_identifier;\n+\n+    const auto & array_join_column_expressions = from_array_join_node.getJoinExpressions();\n+    const auto & array_join_column_expressions_nodes = array_join_column_expressions.getNodes();\n+\n+    /** Allow JOIN with USING with ARRAY JOIN.\n+      *\n+      * SELECT * FROM test_table_1 AS t1 ARRAY JOIN [1,2,3] AS id INNER JOIN test_table_2 AS t2 ON t1.id = t2.id\n+      * SELECT * FROM test_table_1 AS t1 ARRAY JOIN t1.id AS id INNER JOIN test_table_2 AS t2 ON t1.id = t2.id\n+      */\n+    for (const auto & array_join_column_expression : array_join_column_expressions_nodes)\n+    {\n+        auto & array_join_column_expression_typed = array_join_column_expression->as<ColumnNode &>();\n+\n+        if (identifier_lookup.identifier.isShort() &&\n+            array_join_column_expression_typed.getAlias() == identifier_lookup.identifier.getFullName())\n+            return array_join_column_expression;\n+    }\n+\n+    if (!resolved_identifier)\n+        return nullptr;\n+\n     /** Special case when qualified or unqualified identifier point to array join expression without alias.\n       *\n       * CREATE TABLE test_table (id UInt64, value String, value_array Array(UInt8)) ENGINE=TinyLog;\n@@ -2337,23 +2360,19 @@ QueryTreeNodePtr QueryAnalyzer::tryResolveIdentifierFromArrayJoin(const Identifi\n       *\n       * value_array, test_table.value_array, default.test_table.value_array must be resolved into array join expression.\n       */\n-    if (!scope.table_expressions_in_resolve_process.contains(table_expression_node.get()) && resolved_identifier)\n+    for (const auto & array_join_column_expression : array_join_column_expressions_nodes)\n     {\n-        for (const auto & array_join_expression : from_array_join_node.getJoinExpressions().getNodes())\n-        {\n-            auto & array_join_column_expression = array_join_expression->as<ColumnNode &>();\n-            if (array_join_column_expression.hasAlias())\n-                continue;\n+        auto & array_join_column_expression_typed = array_join_column_expression->as<ColumnNode &>();\n \n-            auto & array_join_column_inner_expression = array_join_column_expression.getExpressionOrThrow();\n-            if (array_join_column_inner_expression.get() == resolved_identifier.get() ||\n-                array_join_column_inner_expression->isEqual(*resolved_identifier))\n-            {\n-                auto array_join_column = array_join_column_expression.getColumn();\n-                auto result = std::make_shared<ColumnNode>(array_join_column, table_expression_node);\n+        if (array_join_column_expression_typed.hasAlias())\n+            continue;\n \n-                return result;\n-            }\n+        auto & array_join_column_inner_expression = array_join_column_expression_typed.getExpressionOrThrow();\n+        if (array_join_column_inner_expression.get() == resolved_identifier.get() ||\n+            array_join_column_inner_expression->isEqual(*resolved_identifier))\n+        {\n+            resolved_identifier = array_join_column_expression;\n+            break;\n         }\n     }\n \n@@ -2868,12 +2887,56 @@ QueryAnalyzer::QueryTreeNodesWithNames QueryAnalyzer::resolveUnqualifiedMatcher(\n     auto table_expressions_stack = buildTableExpressionsStack(nearest_query_scope_query_node->getJoinTree());\n     std::vector<QueryTreeNodesWithNames> table_expressions_column_nodes_with_names_stack;\n \n+    std::unordered_set<std::string> left_table_expression_column_names_to_skip;\n+    std::unordered_set<std::string> right_table_expression_column_names_to_skip;\n+\n     for (auto & table_expression : table_expressions_stack)\n     {\n         QueryTreeNodesWithNames matched_expression_nodes_with_column_names;\n \n         if (auto * array_join_node = table_expression->as<ArrayJoinNode>())\n+        {\n+            size_t table_expressions_column_nodes_with_names_stack_size = table_expressions_column_nodes_with_names_stack.size();\n+            if (table_expressions_column_nodes_with_names_stack_size < 1)\n+                throw Exception(ErrorCodes::LOGICAL_ERROR,\n+                    \"Expected at least 1 table expressions on stack before ARRAY JOIN processing. Actual {}\",\n+                    table_expressions_column_nodes_with_names_stack_size);\n+\n+            auto & table_expression_column_nodes_with_names = table_expressions_column_nodes_with_names_stack.back();\n+\n+            const auto & array_join_column_list = array_join_node->getJoinExpressions();\n+            const auto & array_join_column_nodes = array_join_column_list.getNodes();\n+\n+            /** Special case with ARRAY JOIN column without alias.\n+              *\n+              * CREATE TABLE test_table (id UInt64, value String, value_array Array(UInt8)) ENGINE=TinyLog;\n+              * SELECT * FROM test_table ARRAY JOIN value_array;\n+              *\n+              * In matched columns `value_array` must be resolved into array join column.\n+              */\n+            for (const auto & array_join_column_node : array_join_column_nodes)\n+            {\n+                if (array_join_column_node->hasAlias())\n+                    continue;\n+\n+                auto array_join_column_inner_expression = array_join_column_node->as<ColumnNode &>().getExpressionOrThrow();\n+                if (array_join_column_inner_expression->getNodeType() != QueryTreeNodeType::COLUMN)\n+                    continue;\n+\n+                for (auto & table_expressions_column_node_with_name : table_expression_column_nodes_with_names)\n+                {\n+                    auto & table_expression_column_node = table_expressions_column_node_with_name.first;\n+\n+                    if (table_expression_column_node.get() == array_join_column_inner_expression.get() ||\n+                        table_expression_column_node->isEqual(*array_join_column_inner_expression))\n+                    {\n+                        table_expression_column_node = array_join_column_node;\n+                    }\n+                }\n+            }\n+\n             continue;\n+        }\n \n         bool table_expression_in_resolve_process = scope.table_expressions_in_resolve_process.contains(table_expression.get());\n \n@@ -2893,8 +2956,14 @@ QueryAnalyzer::QueryTreeNodesWithNames QueryAnalyzer::resolveUnqualifiedMatcher(\n             auto left_table_expression_columns = std::move(table_expressions_column_nodes_with_names_stack.back());\n             table_expressions_column_nodes_with_names_stack.pop_back();\n \n-            std::unordered_set<std::string> column_names_to_skip;\n+            left_table_expression_column_names_to_skip.clear();\n+            right_table_expression_column_names_to_skip.clear();\n \n+            /** If there is JOIN with USING we need to match only single USING column and do not use left table expression\n+              * and right table expression column with same name.\n+              *\n+              * Example: SELECT id FROM test_table_1 AS t1 INNER JOIN test_table_2 AS t2 USING (id);\n+              */\n             if (!table_expression_in_resolve_process && join_node->isUsingJoinExpression())\n             {\n                 auto & join_using_list = join_node->getJoinExpression()->as<ListNode &>();\n@@ -2902,22 +2971,55 @@ QueryAnalyzer::QueryTreeNodesWithNames QueryAnalyzer::resolveUnqualifiedMatcher(\n                 for (auto & join_using_node : join_using_list.getNodes())\n                 {\n                     auto & column_node = join_using_node->as<ColumnNode &>();\n-                    const auto & column_name = column_node.getColumnName();\n+                    const auto & using_column_name = column_node.getColumnName();\n \n-                    if (!matcher_node_typed.isMatchingColumn(column_name))\n+                    if (!matcher_node_typed.isMatchingColumn(using_column_name))\n                         continue;\n \n-                    column_names_to_skip.insert(column_name);\n+                    const auto & join_using_column_nodes_list = column_node.getExpressionOrThrow()->as<ListNode &>();\n+                    const auto & join_using_column_nodes = join_using_column_nodes_list.getNodes();\n+\n+                    QueryTreeNodePtr matched_column_node;\n \n-                    QueryTreeNodePtr column_source = getColumnSourceForJoinNodeWithUsing(table_expression);\n-                    auto matched_column_node = std::make_shared<ColumnNode>(column_node.getColumn(), column_source);\n-                    matched_expression_nodes_with_column_names.emplace_back(std::move(matched_column_node), column_name);\n+                    if (isRight(join_node->getKind()))\n+                        matched_column_node = join_using_column_nodes.at(1);\n+                    else\n+                        matched_column_node = join_using_column_nodes.at(0);\n+\n+                    /** It is possible that in USING there is JOIN with array joined column.\n+                      * SELECT * FROM (SELECT [0] AS value) AS t1 ARRAY JOIN value AS id INNER JOIN test_table USING (id);\n+                      * In such example match `value` column from t1, and all columns from test_table except `id`.\n+                      *\n+                      * SELECT * FROM (SELECT [0] AS id) AS t1 ARRAY JOIN id INNER JOIN test_table USING (id);\n+                      * In such example, match `id` column from ARRAY JOIN, and all columns from test_table except `id`.\n+                      *\n+                      * SELECT * FROM (SELECT [0] AS id) AS t1 ARRAY JOIN id AS id INNER JOIN test_table USING (id);\n+                      * In such example match `id` column from t1, and all columns from test_table except `id`.\n+                      *\n+                      * SELECT * FROM (SELECT [0] AS id) AS t1 ARRAY JOIN [1] AS id INNER JOIN test_table USING (id);\n+                      * In such example match `id` column from t1, and all columns from test_table except `id`.\n+                      */\n+                    auto matched_column_source = matched_column_node->as<ColumnNode &>().getColumnSource();\n+\n+                    if (matched_column_source->getNodeType() == QueryTreeNodeType::ARRAY_JOIN && matched_column_node->hasAlias())\n+                    {\n+                        if (isRight(join_node->getKind()))\n+                            left_table_expression_column_names_to_skip.insert(using_column_name);\n+                        else\n+                            right_table_expression_column_names_to_skip.insert(using_column_name);\n+                    }\n+                    else\n+                    {\n+                        left_table_expression_column_names_to_skip.insert(using_column_name);\n+                        right_table_expression_column_names_to_skip.insert(using_column_name);\n+                        matched_expression_nodes_with_column_names.emplace_back(std::move(matched_column_node), using_column_name);\n+                    }\n                 }\n             }\n \n             for (auto && left_table_column : left_table_expression_columns)\n             {\n-                if (column_names_to_skip.contains(left_table_column.second))\n+                if (left_table_expression_column_names_to_skip.contains(left_table_column.second))\n                     continue;\n \n                 matched_expression_nodes_with_column_names.push_back(std::move(left_table_column));\n@@ -2925,7 +3027,7 @@ QueryAnalyzer::QueryTreeNodesWithNames QueryAnalyzer::resolveUnqualifiedMatcher(\n \n             for (auto && right_table_column : right_table_expression_columns)\n             {\n-                if (column_names_to_skip.contains(right_table_column.second))\n+                if (right_table_expression_column_names_to_skip.contains(right_table_column.second))\n                     continue;\n \n                 matched_expression_nodes_with_column_names.push_back(std::move(right_table_column));\n@@ -4964,6 +5066,8 @@ void QueryAnalyzer::resolveQueryJoinTreeNode(QueryTreeNodePtr & join_tree_node,\n             resolveQueryJoinTreeNode(array_join_node.getTableExpression(), scope, expressions_visitor);\n             validateJoinTableExpressionWithoutAlias(join_tree_node, array_join_node.getTableExpression(), scope);\n \n+            std::unordered_set<String> array_join_column_names;\n+\n             /// Wrap array join expressions into column nodes, where array join expression is inner expression.\n \n             for (auto & array_join_expression : array_join_node.getJoinExpressions().getNodes())\n@@ -4992,16 +5096,37 @@ void QueryAnalyzer::resolveQueryJoinTreeNode(QueryTreeNodePtr & join_tree_node,\n \n                 result_type = assert_cast<const DataTypeArray &>(*result_type).getNestedType();\n \n-                auto array_join_expression_name = \"__array_join_expression_\" + std::to_string(array_join_expressions_counter);\n-                ++array_join_expressions_counter;\n+                String array_join_column_name;\n+\n+                if (!array_join_expression_alias.empty())\n+                {\n+                    array_join_column_name = array_join_expression_alias;\n+                }\n+                else if (auto * array_join_expression_inner_column = array_join_expression->as<ColumnNode>())\n+                {\n+                    array_join_column_name = array_join_expression_inner_column->getColumnName();\n+                }\n+                else\n+                {\n+                    array_join_column_name = \"__array_join_expression_\" + std::to_string(array_join_expressions_counter);\n+                    ++array_join_expressions_counter;\n+                }\n+\n+                if (array_join_column_names.contains(array_join_column_name))\n+                    throw Exception(ErrorCodes::BAD_ARGUMENTS,\n+                        \"ARRAY JOIN {} multiple columns with name {}. In scope {}\",\n+                        array_join_node.formatASTForErrorMessage(),\n+                        array_join_column_name,\n+                        scope.scope_node->formatASTForErrorMessage());\n+                array_join_column_names.emplace(array_join_column_name);\n \n-                auto array_join_column = std::make_shared<ColumnNode>(NameAndTypePair{array_join_expression_name, result_type}, array_join_expression, join_tree_node);\n+                auto array_join_column = std::make_shared<ColumnNode>(NameAndTypePair{array_join_column_name, result_type}, array_join_expression, join_tree_node);\n                 array_join_expression = std::move(array_join_column);\n                 array_join_expression->setAlias(array_join_expression_alias);\n \n                 auto it = scope.alias_name_to_expression_node.find(array_join_expression_alias);\n                 if (it != scope.alias_name_to_expression_node.end())\n-                    it->second = std::make_shared<ColumnNode>(NameAndTypePair{array_join_expression_name, result_type}, join_tree_node);\n+                    it->second = array_join_expression;\n             }\n \n             break;\n@@ -5056,8 +5181,10 @@ void QueryAnalyzer::resolveQueryJoinTreeNode(QueryTreeNodePtr & join_tree_node,\n \n                     if (!common_type)\n                         throw Exception(ErrorCodes::NO_COMMON_TYPE,\n-                            \"JOIN {} cannot infer common type in USING for identifier '{}'. In scope {}\",\n+                            \"JOIN {} cannot infer common type for {} and {} in USING for identifier '{}'. In scope {}\",\n                             join_node.formatASTForErrorMessage(),\n+                            result_left_table_expression->getResultType()->getName(),\n+                            result_right_table_expression->getResultType()->getName(),\n                             identifier_full_name,\n                             scope.scope_node->formatASTForErrorMessage());\n \ndiff --git a/src/Analyzer/Utils.cpp b/src/Analyzer/Utils.cpp\nindex b504a5b57873..4e277fa8624a 100644\n--- a/src/Analyzer/Utils.cpp\n+++ b/src/Analyzer/Utils.cpp\n@@ -289,41 +289,4 @@ QueryTreeNodes buildTableExpressionsStack(const QueryTreeNodePtr & join_tree_nod\n     return result;\n }\n \n-QueryTreeNodePtr getColumnSourceForJoinNodeWithUsing(const QueryTreeNodePtr & join_node)\n-{\n-    QueryTreeNodePtr column_source_node = join_node;\n-\n-    while (true)\n-    {\n-        auto column_source_node_type = column_source_node->getNodeType();\n-        if (column_source_node_type == QueryTreeNodeType::TABLE ||\n-            column_source_node_type == QueryTreeNodeType::TABLE_FUNCTION ||\n-            column_source_node_type == QueryTreeNodeType::QUERY ||\n-            column_source_node_type == QueryTreeNodeType::UNION)\n-        {\n-            break;\n-        }\n-        else if (column_source_node_type == QueryTreeNodeType::ARRAY_JOIN)\n-        {\n-            auto & array_join_node = column_source_node->as<ArrayJoinNode &>();\n-            column_source_node = array_join_node.getTableExpression();\n-            continue;\n-        }\n-        else if (column_source_node_type == QueryTreeNodeType::JOIN)\n-        {\n-            auto & join_node_typed = column_source_node->as<JoinNode &>();\n-            column_source_node = isRight(join_node_typed.getKind()) ? join_node_typed.getRightTableExpression() : join_node_typed.getLeftTableExpression();\n-            continue;\n-        }\n-        else\n-        {\n-            throw Exception(ErrorCodes::LOGICAL_ERROR,\n-                \"Unexpected node type for table expression. Expected table, table function, query, union, join or array join. Actual {}\",\n-                column_source_node->getNodeTypeName());\n-        }\n-    }\n-\n-    return column_source_node;\n-}\n-\n }\ndiff --git a/src/Analyzer/Utils.h b/src/Analyzer/Utils.h\nindex 325a7d2fcc84..dbb2e7d5b594 100644\n--- a/src/Analyzer/Utils.h\n+++ b/src/Analyzer/Utils.h\n@@ -31,9 +31,4 @@ QueryTreeNodes extractTableExpressions(const QueryTreeNodePtr & join_tree_node);\n   */\n QueryTreeNodes buildTableExpressionsStack(const QueryTreeNodePtr & join_tree_node);\n \n-/** Get column source for JOIN node with USING.\n-  * Example: SELECT id FROM test_table_1 AS t1 INNER JOIN test_table_2 AS t2 USING (id);\n-  */\n-QueryTreeNodePtr getColumnSourceForJoinNodeWithUsing(const QueryTreeNodePtr & join_node);\n-\n }\ndiff --git a/src/Planner/CollectTableExpressionData.cpp b/src/Planner/CollectTableExpressionData.cpp\nindex 30ccc5415076..81ce3d325f7a 100644\n--- a/src/Planner/CollectTableExpressionData.cpp\n+++ b/src/Planner/CollectTableExpressionData.cpp\n@@ -39,17 +39,16 @@ class CollectSourceColumnsVisitor : public InDepthQueryTreeVisitor<CollectSource\n         auto column_source_node = column_node->getColumnSource();\n         auto column_source_node_type = column_source_node->getNodeType();\n \n-        if (column_source_node_type == QueryTreeNodeType::ARRAY_JOIN ||\n-            column_source_node_type == QueryTreeNodeType::LAMBDA)\n+        if (column_source_node_type == QueryTreeNodeType::LAMBDA)\n             return;\n \n         /// JOIN using expression\n-        if (column_node->hasExpression() && column_source_node->getNodeType() == QueryTreeNodeType::JOIN)\n+        if (column_node->hasExpression() && column_source_node_type == QueryTreeNodeType::JOIN)\n             return;\n \n         auto & table_expression_data = planner_context.getOrCreateTableExpressionData(column_source_node);\n \n-        if (column_node->hasExpression())\n+        if (column_node->hasExpression() && column_source_node_type != QueryTreeNodeType::ARRAY_JOIN)\n         {\n             /// Replace ALIAS column with expression\n             table_expression_data.addAliasColumnName(column_node->getColumnName());\n@@ -61,9 +60,10 @@ class CollectSourceColumnsVisitor : public InDepthQueryTreeVisitor<CollectSource\n         if (column_source_node_type != QueryTreeNodeType::TABLE &&\n             column_source_node_type != QueryTreeNodeType::TABLE_FUNCTION &&\n             column_source_node_type != QueryTreeNodeType::QUERY &&\n-            column_source_node_type != QueryTreeNodeType::UNION)\n+            column_source_node_type != QueryTreeNodeType::UNION &&\n+            column_source_node_type != QueryTreeNodeType::ARRAY_JOIN)\n             throw Exception(ErrorCodes::LOGICAL_ERROR,\n-                \"Expected table, table function, query or union column source. Actual {}\",\n+                \"Expected table, table function, array join, query or union column source. Actual {}\",\n                 column_source_node->formatASTForErrorMessage());\n \n         bool column_already_exists = table_expression_data.hasColumn(column_node->getColumnName());\ndiff --git a/src/Planner/PlannerJoinTree.cpp b/src/Planner/PlannerJoinTree.cpp\nindex 4cb446a65a0b..205c6c5e740d 100644\n--- a/src/Planner/PlannerJoinTree.cpp\n+++ b/src/Planner/PlannerJoinTree.cpp\n@@ -185,18 +185,19 @@ QueryPlan buildQueryPlanForTableExpression(QueryTreeNodePtr table_expression,\n     }\n \n     auto rename_actions_dag = std::make_shared<ActionsDAG>(query_plan.getCurrentDataStream().header.getColumnsWithTypeAndName());\n+    ActionsDAG::NodeRawConstPtrs updated_actions_dag_outputs;\n \n     for (auto & output_node : rename_actions_dag->getOutputs())\n     {\n         const auto * column_identifier = table_expression_data.getColumnIdentifierOrNull(output_node->result_name);\n-\n         if (!column_identifier)\n             continue;\n \n-        const auto * node_to_rename = output_node;\n-        output_node = &rename_actions_dag->addAlias(*node_to_rename, *column_identifier);\n+        updated_actions_dag_outputs.push_back(&rename_actions_dag->addAlias(*output_node, *column_identifier));\n     }\n \n+    rename_actions_dag->getOutputs() = std::move(updated_actions_dag_outputs);\n+\n     auto rename_step = std::make_unique<ExpressionStep>(query_plan.getCurrentDataStream(), rename_actions_dag);\n     rename_step->setStepDescription(\"Change column names to column identifiers\");\n     query_plan.addStep(std::move(rename_step));\n@@ -639,17 +640,17 @@ QueryPlan buildQueryPlanForArrayJoinNode(QueryTreeNodePtr table_expression,\n     ActionsDAGPtr array_join_action_dag = std::make_shared<ActionsDAG>(plan_output_columns);\n     PlannerActionsVisitor actions_visitor(planner_context);\n \n-    NameSet array_join_columns;\n+    NameSet array_join_column_names;\n     for (auto & array_join_expression : array_join_node.getJoinExpressions().getNodes())\n     {\n-        auto & array_join_expression_column = array_join_expression->as<ColumnNode &>();\n-        const auto & array_join_column_name = array_join_expression_column.getColumnName();\n-        array_join_columns.insert(array_join_column_name);\n+        const auto & array_join_column_identifier = planner_context->getColumnNodeIdentifierOrThrow(array_join_expression);\n+        array_join_column_names.insert(array_join_column_identifier);\n \n+        auto & array_join_expression_column = array_join_expression->as<ColumnNode &>();\n         auto expression_dag_index_nodes = actions_visitor.visit(array_join_action_dag, array_join_expression_column.getExpressionOrThrow());\n         for (auto & expression_dag_index_node : expression_dag_index_nodes)\n         {\n-            const auto * array_join_column_node = &array_join_action_dag->addAlias(*expression_dag_index_node, array_join_column_name);\n+            const auto * array_join_column_node = &array_join_action_dag->addAlias(*expression_dag_index_node, array_join_column_identifier);\n             array_join_action_dag->getOutputs().push_back(array_join_column_node);\n         }\n     }\n@@ -659,7 +660,7 @@ QueryPlan buildQueryPlanForArrayJoinNode(QueryTreeNodePtr table_expression,\n     array_join_actions->setStepDescription(\"ARRAY JOIN actions\");\n     plan.addStep(std::move(array_join_actions));\n \n-    auto array_join_action = std::make_shared<ArrayJoinAction>(array_join_columns, array_join_node.isLeft(), planner_context->getQueryContext());\n+    auto array_join_action = std::make_shared<ArrayJoinAction>(array_join_column_names, array_join_node.isLeft(), planner_context->getQueryContext());\n     auto array_join_step = std::make_unique<ArrayJoinStep>(plan.getCurrentDataStream(), std::move(array_join_action));\n     array_join_step->setStepDescription(\"ARRAY JOIN\");\n     plan.addStep(std::move(array_join_step));\ndiff --git a/src/Planner/TableExpressionData.h b/src/Planner/TableExpressionData.h\nindex 0918c35a8ef2..57eaa28e072e 100644\n--- a/src/Planner/TableExpressionData.h\n+++ b/src/Planner/TableExpressionData.h\n@@ -16,6 +16,25 @@ using ColumnIdentifier = std::string;\n /** Table expression data is created for each table expression that take part in query.\n   * Table expression data has information about columns that participate in query, their name to identifier mapping,\n   * and additional table expression properties.\n+  *\n+  * Table expression can be table, table function, query, union, array join node.\n+  *\n+  * Examples:\n+  * SELECT * FROM (SELECT 1);\n+  * (SELECT 1) - table expression.\n+  *\n+  * SELECT * FROM test_table;\n+  * test_table - table expression.\n+  *\n+  * SELECT * FROM view(SELECT 1);\n+  * view(SELECT 1) - table expression.\n+  *\n+  * SELECT * FROM (SELECT 1) JOIN (SELECT 2);\n+  * (SELECT 1) - table expression.\n+  * (SELECT 2) - table expression.\n+  *\n+  * SELECT array, a FROM (SELECT [1] AS array) ARRAY JOIN array AS a;\n+  * ARRAY JOIN array AS a - table expression.\n   */\n class TableExpressionData\n {\n@@ -164,19 +183,19 @@ class TableExpressionData\n     }\n \n private:\n-    /// Valid for table, table function, query, union table expression nodes\n+    /// Valid for table, table function, query, union, array join table expression nodes\n     NamesAndTypesList columns;\n \n-    /// Valid for table, table function, query, union table expression nodes\n+    /// Valid for table, table function, query, union, array join table expression nodes\n     NameSet columns_names;\n \n     /// Valid only for table table expression node\n     NameSet alias_columns_names;\n \n-    /// Valid for table, table function, query, union table expression nodes\n+    /// Valid for table, table function, query, union table, array join expression nodes\n     ColumnNameToColumnIdentifier column_name_to_column_identifier;\n \n-    /// Valid for table, table function, query, union table expression nodes\n+    /// Valid for table, table function, query, union table, array join expression nodes\n     ColumnIdentifierToColumnName column_identifier_to_column_name;\n \n     /// Is storage remote\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02475_analyzer_array_join_with_join.reference b/tests/queries/0_stateless/02475_analyzer_array_join_with_join.reference\nnew file mode 100644\nindex 000000000000..d679934d4e68\n--- /dev/null\n+++ b/tests/queries/0_stateless/02475_analyzer_array_join_with_join.reference\n@@ -0,0 +1,28 @@\n+0\n+0\n+--\n+0\n+--\n+--\n+--\n+1\n+--\n+0\tValue_0\n+--\n+1\tValue_1\n+--\n+0\tValue_0\n+--\n+1\tValue_1\n+--\n+[0]\tValue_0\n+--\n+[1]\tValue_1\n+--\n+[0]\tValue_0\n+--\n+[0]\tValue_1\n+--\n+[5]\tValue_0\n+--\n+[5]\tValue_1\ndiff --git a/tests/queries/0_stateless/02476_analyzer_join_with_unused_columns.reference b/tests/queries/0_stateless/02476_analyzer_join_with_unused_columns.reference\nnew file mode 100644\nindex 000000000000..c6240227a2e9\n--- /dev/null\n+++ b/tests/queries/0_stateless/02476_analyzer_join_with_unused_columns.reference\n@@ -0,0 +1,9 @@\n+1\t3\n+--\n+2\t4\n+--\n+1\t3\n+--\n+2\t4\n+--\n+1\t2\t3\t4\ndiff --git a/tests/queries/0_stateless/02476_analyzer_join_with_unused_columns.sql b/tests/queries/0_stateless/02476_analyzer_join_with_unused_columns.sql\nnew file mode 100644\nindex 000000000000..ca937e012380\n--- /dev/null\n+++ b/tests/queries/0_stateless/02476_analyzer_join_with_unused_columns.sql\n@@ -0,0 +1,19 @@\n+SET allow_experimental_analyzer = 1;\n+\n+SELECT subquery_1.id, subquery_2.id FROM (SELECT 1 AS id, 2 AS value) AS subquery_1, (SELECT 3 AS id, 4 AS value) AS subquery_2;\n+\n+SELECT '--';\n+\n+SELECT subquery_1.value, subquery_2.value FROM (SELECT 1 AS id, 2 AS value) AS subquery_1, (SELECT 3 AS id, 4 AS value) AS subquery_2;\n+\n+SELECT '--';\n+\n+SELECT COLUMNS('id') FROM (SELECT 1 AS id, 2 AS value) AS subquery_1, (SELECT 3 AS id, 4 AS value) AS subquery_2;\n+\n+SELECT '--';\n+\n+SELECT COLUMNS('value') FROM (SELECT 1 AS id, 2 AS value) AS subquery_1, (SELECT 3 AS id, 4 AS value) AS subquery_2;\n+\n+SELECT '--';\n+\n+SELECT * FROM (SELECT 1 AS id, 2 AS value) AS subquery_1, (SELECT 3 AS id, 4 AS value) AS subquery_2;\ndiff --git a/tests/queries/0_stateless/02477_analyzer_array_join_with_join.reference b/tests/queries/0_stateless/02477_analyzer_array_join_with_join.reference\nnew file mode 100644\nindex 000000000000..f7084c4617c0\n--- /dev/null\n+++ b/tests/queries/0_stateless/02477_analyzer_array_join_with_join.reference\n@@ -0,0 +1,128 @@\n+-- { echoOn }\n+\n+SELECT * FROM test_table ARRAY JOIN value_array;\n+0\tValue_0\t1\n+0\tValue_0\t2\n+0\tValue_0\t3\n+SELECT '--';\n+--\n+SELECT *, value_array_element FROM test_table ARRAY JOIN value_array AS value_array_element;\n+0\tValue_0\t[1,2,3]\t1\n+0\tValue_0\t[1,2,3]\t2\n+0\tValue_0\t[1,2,3]\t3\n+SELECT '--';\n+--\n+SELECT *, value_array FROM test_table ARRAY JOIN value_array AS value_array;\n+0\tValue_0\t[1,2,3]\t1\n+0\tValue_0\t[1,2,3]\t2\n+0\tValue_0\t[1,2,3]\t3\n+SELECT '--';\n+--\n+SELECT *, value_array FROM test_table ARRAY JOIN [4,5,6] AS value_array;\n+0\tValue_0\t[1,2,3]\t4\n+0\tValue_0\t[1,2,3]\t5\n+0\tValue_0\t[1,2,3]\t6\n+SELECT '--';\n+--\n+SELECT *, value_array, value_element FROM test_table ARRAY JOIN value_array, [4,5,6] AS value_element;\n+0\tValue_0\t1\t1\t4\n+0\tValue_0\t2\t2\t5\n+0\tValue_0\t3\t3\t6\n+SELECT '--';\n+--\n+SELECT * FROM (SELECT [dummy, dummy] AS dummy FROM system.one) AS subquery ARRAY JOIN dummy INNER JOIN system.one USING (dummy);\n+0\n+0\n+SELECT '--';\n+--\n+SELECT * FROM (SELECT [0] AS id) AS subquery_1 ARRAY JOIN id INNER JOIN (SELECT 0 AS id) AS subquery_2 USING (id);\n+0\n+SELECT '--';\n+--\n+SELECT * FROM (SELECT [1] AS id) AS subquery_1 ARRAY JOIN id INNER JOIN (SELECT 0 AS id) AS subquery_2 USING (id);\n+SELECT '--';\n+--\n+SELECT * FROM (SELECT [0] AS id) AS subquery_1 ARRAY JOIN id INNER JOIN (SELECT 1 AS id) AS subquery_2 USING (id);\n+SELECT '--';\n+--\n+SELECT * FROM (SELECT [1] AS id) AS subquery_1 ARRAY JOIN id INNER JOIN (SELECT 1 AS id) AS subquery_2 USING (id);\n+1\n+SELECT '--';\n+--\n+SELECT * FROM (SELECT [5] AS id) AS subquery_1 ARRAY JOIN [1,2,3] AS id INNER JOIN (SELECT 1 AS id) AS subquery_2 USING (id);\n+[5]\n+SELECT '--';\n+--\n+SELECT * FROM (SELECT [0] AS id) AS subquery ARRAY JOIN id INNER JOIN test_table USING (id);\n+0\tValue_0\t[1,2,3]\n+SELECT '--';\n+--\n+SELECT * FROM (SELECT [1] AS id) AS subquery ARRAY JOIN id INNER JOIN test_table USING (id);\n+SELECT '--';\n+--\n+SELECT * FROM (SELECT [0] AS id) AS subquery ARRAY JOIN id AS id INNER JOIN test_table USING (id);\n+[0]\tValue_0\t[1,2,3]\n+SELECT '--';\n+--\n+SELECT * FROM (SELECT [1] AS id) AS subquery ARRAY JOIN id AS id INNER JOIN test_table USING (id);\n+SELECT '--';\n+--\n+SELECT *, id FROM (SELECT [0] AS id) AS subquery ARRAY JOIN id AS id INNER JOIN test_table USING (id);\n+[0]\tValue_0\t[1,2,3]\t0\n+SELECT '--';\n+--\n+SELECT *, id FROM (SELECT [1] AS id) AS subquery ARRAY JOIN id AS id INNER JOIN test_table USING (id);\n+SELECT '--';\n+--\n+SELECT * FROM (SELECT [0] AS value) AS subquery ARRAY JOIN value AS id INNER JOIN test_table USING (id);\n+[0]\tValue_0\t[1,2,3]\n+SELECT '--';\n+--\n+SELECT * FROM (SELECT [1] AS value) AS subquery ARRAY JOIN value AS id INNER JOIN test_table USING (id);\n+SELECT '--';\n+--\n+SELECT *, id FROM (SELECT [0] AS value) AS subquery ARRAY JOIN value AS id INNER JOIN test_table USING (id);\n+[0]\tValue_0\t[1,2,3]\t0\n+SELECT '--';\n+--\n+SELECT *, id FROM (SELECT [1] AS value) AS subquery ARRAY JOIN value AS id INNER JOIN test_table USING (id);\n+SELECT '--';\n+--\n+SELECT * FROM (SELECT [0] AS id) AS subquery ARRAY JOIN [0] AS id INNER JOIN test_table USING (id);\n+[0]\tValue_0\t[1,2,3]\n+SELECT '--';\n+--\n+SELECT * FROM (SELECT [0] AS id) AS subquery ARRAY JOIN [1] AS id INNER JOIN test_table USING (id);\n+SELECT '--';\n+--\n+SELECT *, id FROM (SELECT [0] AS id) AS subquery ARRAY JOIN [0] AS id INNER JOIN test_table USING (id);\n+[0]\tValue_0\t[1,2,3]\t0\n+SELECT '--';\n+--\n+SELECT *, id FROM (SELECT [0] AS id) AS subquery ARRAY JOIN [1] AS id INNER JOIN test_table USING (id);\n+SELECT '--';\n+--\n+SELECT * FROM (SELECT [5] AS id) AS subquery ARRAY JOIN [0] AS id INNER JOIN test_table USING (id);\n+[5]\tValue_0\t[1,2,3]\n+SELECT '--';\n+--\n+SELECT * FROM (SELECT [5] AS id) AS subquery ARRAY JOIN [1] AS id INNER JOIN test_table USING (id);\n+SELECT '--';\n+--\n+SELECT *, id FROM (SELECT [5] AS id) AS subquery ARRAY JOIN [0] AS id INNER JOIN test_table USING (id);\n+[5]\tValue_0\t[1,2,3]\t0\n+SELECT '--';\n+--\n+SELECT *, id FROM (SELECT [5] AS id) AS subquery ARRAY JOIN [1] AS id INNER JOIN test_table USING (id);\n+SELECT '--';\n+--\n+SELECT * FROM (SELECT [5] AS id_array) AS subquery ARRAY JOIN id_array, [0] AS id INNER JOIN test_table USING (id);\n+5\tValue_0\t[1,2,3]\n+SELECT '--';\n+--\n+SELECT * FROM (SELECT [[0]] AS id) AS subquery ARRAY JOIN id AS id_nested_array ARRAY JOIN id_nested_array AS id INNER JOIN test_table USING (id);\n+[[0]]\tValue_0\t[1,2,3]\n+SELECT '--';\n+--\n+SELECT *, id FROM (SELECT [[0]] AS id) AS subquery ARRAY JOIN id AS id_nested_array ARRAY JOIN id_nested_array AS id INNER JOIN test_table USING (id);\n+[[0]]\tValue_0\t[1,2,3]\t0\ndiff --git a/tests/queries/0_stateless/02477_analyzer_array_join_with_join.sql b/tests/queries/0_stateless/02477_analyzer_array_join_with_join.sql\nnew file mode 100644\nindex 000000000000..7e4ecb98ae8e\n--- /dev/null\n+++ b/tests/queries/0_stateless/02477_analyzer_array_join_with_join.sql\n@@ -0,0 +1,143 @@\n+SET allow_experimental_analyzer = 1;\n+\n+DROP TABLE IF EXISTS test_table;\n+CREATE TABLE test_table\n+(\n+    id UInt64,\n+    value String,\n+    value_array Array(UInt64)\n+) ENGINE=MergeTree ORDER BY id;\n+\n+INSERT INTO test_table VALUES (0, 'Value_0', [1,2,3]);\n+\n+-- { echoOn }\n+\n+SELECT * FROM test_table ARRAY JOIN value_array;\n+\n+SELECT '--';\n+\n+SELECT *, value_array_element FROM test_table ARRAY JOIN value_array AS value_array_element;\n+\n+SELECT '--';\n+\n+SELECT *, value_array FROM test_table ARRAY JOIN value_array AS value_array;\n+\n+SELECT '--';\n+\n+SELECT *, value_array FROM test_table ARRAY JOIN [4,5,6] AS value_array;\n+\n+SELECT '--';\n+\n+SELECT *, value_array, value_element FROM test_table ARRAY JOIN value_array, [4,5,6] AS value_element;\n+\n+SELECT '--';\n+\n+SELECT * FROM (SELECT [dummy, dummy] AS dummy FROM system.one) AS subquery ARRAY JOIN dummy INNER JOIN system.one USING (dummy);\n+\n+SELECT '--';\n+\n+SELECT * FROM (SELECT [0] AS id) AS subquery_1 ARRAY JOIN id INNER JOIN (SELECT 0 AS id) AS subquery_2 USING (id);\n+\n+SELECT '--';\n+\n+SELECT * FROM (SELECT [1] AS id) AS subquery_1 ARRAY JOIN id INNER JOIN (SELECT 0 AS id) AS subquery_2 USING (id);\n+\n+SELECT '--';\n+\n+SELECT * FROM (SELECT [0] AS id) AS subquery_1 ARRAY JOIN id INNER JOIN (SELECT 1 AS id) AS subquery_2 USING (id);\n+\n+SELECT '--';\n+\n+SELECT * FROM (SELECT [1] AS id) AS subquery_1 ARRAY JOIN id INNER JOIN (SELECT 1 AS id) AS subquery_2 USING (id);\n+\n+SELECT '--';\n+\n+SELECT * FROM (SELECT [5] AS id) AS subquery_1 ARRAY JOIN [1,2,3] AS id INNER JOIN (SELECT 1 AS id) AS subquery_2 USING (id);\n+\n+SELECT '--';\n+\n+SELECT * FROM (SELECT [0] AS id) AS subquery ARRAY JOIN id INNER JOIN test_table USING (id);\n+\n+SELECT '--';\n+\n+SELECT * FROM (SELECT [1] AS id) AS subquery ARRAY JOIN id INNER JOIN test_table USING (id);\n+\n+SELECT '--';\n+\n+SELECT * FROM (SELECT [0] AS id) AS subquery ARRAY JOIN id AS id INNER JOIN test_table USING (id);\n+\n+SELECT '--';\n+\n+SELECT * FROM (SELECT [1] AS id) AS subquery ARRAY JOIN id AS id INNER JOIN test_table USING (id);\n+\n+SELECT '--';\n+\n+SELECT *, id FROM (SELECT [0] AS id) AS subquery ARRAY JOIN id AS id INNER JOIN test_table USING (id);\n+\n+SELECT '--';\n+\n+SELECT *, id FROM (SELECT [1] AS id) AS subquery ARRAY JOIN id AS id INNER JOIN test_table USING (id);\n+\n+SELECT '--';\n+\n+SELECT * FROM (SELECT [0] AS value) AS subquery ARRAY JOIN value AS id INNER JOIN test_table USING (id);\n+\n+SELECT '--';\n+\n+SELECT * FROM (SELECT [1] AS value) AS subquery ARRAY JOIN value AS id INNER JOIN test_table USING (id);\n+\n+SELECT '--';\n+\n+SELECT *, id FROM (SELECT [0] AS value) AS subquery ARRAY JOIN value AS id INNER JOIN test_table USING (id);\n+\n+SELECT '--';\n+\n+SELECT *, id FROM (SELECT [1] AS value) AS subquery ARRAY JOIN value AS id INNER JOIN test_table USING (id);\n+\n+SELECT '--';\n+\n+SELECT * FROM (SELECT [0] AS id) AS subquery ARRAY JOIN [0] AS id INNER JOIN test_table USING (id);\n+\n+SELECT '--';\n+\n+SELECT * FROM (SELECT [0] AS id) AS subquery ARRAY JOIN [1] AS id INNER JOIN test_table USING (id);\n+\n+SELECT '--';\n+\n+SELECT *, id FROM (SELECT [0] AS id) AS subquery ARRAY JOIN [0] AS id INNER JOIN test_table USING (id);\n+\n+SELECT '--';\n+\n+SELECT *, id FROM (SELECT [0] AS id) AS subquery ARRAY JOIN [1] AS id INNER JOIN test_table USING (id);\n+\n+SELECT '--';\n+\n+SELECT * FROM (SELECT [5] AS id) AS subquery ARRAY JOIN [0] AS id INNER JOIN test_table USING (id);\n+\n+SELECT '--';\n+\n+SELECT * FROM (SELECT [5] AS id) AS subquery ARRAY JOIN [1] AS id INNER JOIN test_table USING (id);\n+\n+SELECT '--';\n+\n+SELECT *, id FROM (SELECT [5] AS id) AS subquery ARRAY JOIN [0] AS id INNER JOIN test_table USING (id);\n+\n+SELECT '--';\n+\n+SELECT *, id FROM (SELECT [5] AS id) AS subquery ARRAY JOIN [1] AS id INNER JOIN test_table USING (id);\n+\n+SELECT '--';\n+\n+SELECT * FROM (SELECT [5] AS id_array) AS subquery ARRAY JOIN id_array, [0] AS id INNER JOIN test_table USING (id);\n+\n+SELECT '--';\n+\n+SELECT * FROM (SELECT [[0]] AS id) AS subquery ARRAY JOIN id AS id_nested_array ARRAY JOIN id_nested_array AS id INNER JOIN test_table USING (id);\n+\n+SELECT '--';\n+\n+SELECT *, id FROM (SELECT [[0]] AS id) AS subquery ARRAY JOIN id AS id_nested_array ARRAY JOIN id_nested_array AS id INNER JOIN test_table USING (id);\n+\n+-- { echoOff }\n+\n+DROP TABLE test_table;\n",
  "problem_statement": "Table expression (SELECT [dummy, dummy] FROM system.one) AS x ARRAY JOIN __array_join_expression_0 is not registered in planner context\nhttps://s3.amazonaws.com/clickhouse-test-reports/42865/306b7d76e48d806117ed9f527f526a766d4408e9/fuzzer_astfuzzerubsan//report.html\r\n\r\n```\r\n2022.11.07 20:44:58.719296 [ 152 ] {79d09063-35f2-4491-a90a-a8e0963daa41} <Fatal> : Logical error: 'Table expression  (SELECT [dummy, dummy] FROM system.one) AS x ARRAY JOIN __array_join_expression_0 is not registered in planner context'.\r\n2022.11.07 20:45:37.709293 [ 405 ] {} <Fatal> BaseDaemon: ########################################\r\n2022.11.07 20:45:37.709331 [ 405 ] {} <Fatal> BaseDaemon: (version 22.11.1.1, build id: 87237ECE1D9A82461B22177CC82AFF435F704F07) (from thread 152) (query_id: 79d09063-35f2-4491-a90a-a8e0963daa41) (query: SELECT * FROM (SELECT [dummy, dummy] AS dummy FROM system.one) AS x ARRAY JOIN dummy INNER JOIN system.one AS y USING (dummy)) Received signal Aborted (6)\r\n2022.11.07 20:45:37.709356 [ 405 ] {} <Fatal> BaseDaemon:\r\n2022.11.07 20:45:37.709405 [ 405 ] {} <Fatal> BaseDaemon: Stack trace: 0x7f47b9d3000b 0x7f47b9d0f859 0x204d8d03 0x204d8f8f 0x163959b9 0x2be8a661 0x2be8aaaa 0x2be96c6a 0x2be916d7 0x2be6c557 0x2be69a24 0x2c320e3a 0x2c31c7ec 0x2d4d6f10 0x2d4f7a1a 0x2e4cc78c 0x2e4ccc7a 0x2e644647 0x2e64212f 0x7f47b9ee7609 0x7f47b9e0c133\r\n2022.11.07 20:45:37.709442 [ 405 ] {} <Fatal> BaseDaemon: 3. gsignal @ 0x7f47b9d3000b in ?\r\n2022.11.07 20:45:37.709467 [ 405 ] {} <Fatal> BaseDaemon: 4. abort @ 0x7f47b9d0f859 in ?\r\n2022.11.07 20:45:37.734594 [ 405 ] {} <Fatal> BaseDaemon: 5. ./build_docker/../src/Common/Exception.cpp:47: DB::abortOnFailedAssertion(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&) @ 0x204d8d03 in /workspace/clickhouse\r\n2022.11.07 20:45:37.757021 [ 405 ] {} <Fatal> BaseDaemon: 6. ./build_docker/../src/Common/Exception.cpp:70: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, int, bool) @ 0x204d8f8f in /workspace/clickhouse\r\n2022.11.07 20:45:38.851171 [ 405 ] {} <Fatal> BaseDaemon: 7. DB::Exception::Exception<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(int, fmt::v8::basic_format_string<char, fmt::v8::type_identity<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>::type>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&&) @ 0x163959b9 in /workspace/clickhouse\r\n2022.11.07 20:45:38.867876 [ 405 ] {} <Fatal> BaseDaemon: 8. ./build_docker/../src/Planner/PlannerContext.cpp:63: DB::PlannerContext::getTableExpressionDataOrThrow(std::__1::shared_ptr<DB::IQueryTreeNode> const&) const @ 0x2be8a661 in /workspace/clickhouse\r\n2022.11.07 20:45:38.884275 [ 405 ] {} <Fatal> BaseDaemon: 9. ./build_docker/../src/Planner/PlannerContext.cpp:105: DB::PlannerContext::getColumnNodeIdentifierOrThrow(std::__1::shared_ptr<DB::IQueryTreeNode> const&) const @ 0x2be8aaaa in /workspace/clickhouse\r\n2022.11.07 20:45:39.309453 [ 405 ] {} <Fatal> BaseDaemon: 10. ./build_docker/../src/Planner/PlannerJoinTree.cpp:0: DB::(anonymous namespace)::buildQueryPlanForJoinNode(std::__1::shared_ptr<DB::IQueryTreeNode>, DB::SelectQueryInfo&, DB::SelectQueryOptions const&, std::__1::shared_ptr<DB::PlannerContext>&) @ 0x2be96c6a in /workspace/clickhouse\r\n2022.11.07 20:45:39.723134 [ 405 ] {} <Fatal> BaseDaemon: 11. ./build_docker/../src/Planner/PlannerJoinTree.cpp:693: DB::buildQueryPlanForJoinTreeNode(std::__1::shared_ptr<DB::IQueryTreeNode>, DB::SelectQueryInfo&, DB::SelectQueryOptions const&, std::__1::shared_ptr<DB::PlannerContext>&) @ 0x2be916d7 in /workspace/clickhouse\r\n2022.11.07 20:45:39.913387 [ 405 ] {} <Fatal> BaseDaemon: 12. ./build_docker/../src/Planner/Planner.cpp:0: DB::Planner::buildQueryPlanIfNeeded() @ 0x2be6c557 in /workspace/clickhouse\r\n2022.11.07 20:45:39.928326 [ 405 ] {} <Fatal> BaseDaemon: 13. ./build_docker/../src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:94: DB::InterpreterSelectQueryAnalyzer::execute() @ 0x2be69a24 in /workspace/clickhouse\r\n2022.11.07 20:45:39.987099 [ 405 ] {} <Fatal> BaseDaemon: 14. ./build_docker/../src/Interpreters/executeQuery.cpp:0: DB::executeQueryImpl(char const*, char const*, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x2c320e3a in /workspace/clickhouse\r\n2022.11.07 20:45:40.049372 [ 405 ] {} <Fatal> BaseDaemon: 15. ./build_docker/../src/Interpreters/executeQuery.cpp:1073: DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x2c31c7ec in /workspace/clickhouse\r\n2022.11.07 20:45:40.103372 [ 405 ] {} <Fatal> BaseDaemon: 16. ./build_docker/../src/Server/TCPHandler.cpp:374: DB::TCPHandler::runImpl() @ 0x2d4d6f10 in /workspace/clickhouse\r\n2022.11.07 20:45:40.168202 [ 405 ] {} <Fatal> BaseDaemon: 17. ./build_docker/../src/Server/TCPHandler.cpp:1904: DB::TCPHandler::run() @ 0x2d4f7a1a in /workspace/clickhouse\r\n2022.11.07 20:45:40.173590 [ 405 ] {} <Fatal> BaseDaemon: 18. ./build_docker/../contrib/poco/Net/src/TCPServerConnection.cpp:57: Poco::Net::TCPServerConnection::start() @ 0x2e4cc78c in /workspace/clickhouse\r\n2022.11.07 20:45:40.180819 [ 405 ] {} <Fatal> BaseDaemon: 19.1. inlined from ./build_docker/../contrib/libcxx/include/__memory/unique_ptr.h:48: std::__1::default_delete<Poco::Net::TCPServerConnection>::operator()[abi:v15003](Poco::Net::TCPServerConnection*) const\r\n2022.11.07 20:45:40.180858 [ 405 ] {} <Fatal> BaseDaemon: 19.2. inlined from ./build_docker/../contrib/libcxx/include/__memory/unique_ptr.h:305: std::__1::unique_ptr<Poco::Net::TCPServerConnection, std::__1::default_delete<Poco::Net::TCPServerConnection>>::reset[abi:v15003](Poco::Net::TCPServerConnection*)\r\n2022.11.07 20:45:40.180875 [ 405 ] {} <Fatal> BaseDaemon: 19.3. inlined from ./build_docker/../contrib/libcxx/include/__memory/unique_ptr.h:259: ~unique_ptr\r\n2022.11.07 20:45:40.180889 [ 405 ] {} <Fatal> BaseDaemon: 19. ./build_docker/../contrib/poco/Net/src/TCPServerDispatcher.cpp:116: Poco::Net::TCPServerDispatcher::run() @ 0x2e4ccc7a in /workspace/clickhouse\r\n2022.11.07 20:45:40.189008 [ 405 ] {} <Fatal> BaseDaemon: 20. ./build_docker/../contrib/poco/Foundation/src/ThreadPool.cpp:213: Poco::PooledThread::run() @ 0x2e644647 in /workspace/clickhouse\r\n2022.11.07 20:45:40.196266 [ 405 ] {} <Fatal> BaseDaemon: 21.1. inlined from ./build_docker/../contrib/poco/Foundation/include/Poco/SharedPtr.h:156: Poco::SharedPtr<Poco::Runnable, Poco::ReferenceCounter, Poco::ReleasePolicy<Poco::Runnable>>::assign(Poco::Runnable*)\r\n2022.11.07 20:45:40.196299 [ 405 ] {} <Fatal> BaseDaemon: 21.2. inlined from ./build_docker/../contrib/poco/Foundation/include/Poco/SharedPtr.h:208: Poco::SharedPtr<Poco::Runnable, Poco::ReferenceCounter, Poco::ReleasePolicy<Poco::Runnable>>::operator=(Poco::Runnable*)\r\n2022.11.07 20:45:40.196315 [ 405 ] {} <Fatal> BaseDaemon: 21. ./build_docker/../contrib/poco/Foundation/src/Thread_POSIX.cpp:360: Poco::ThreadImpl::runnableEntry(void*) @ 0x2e64212f in /workspace/clickhouse\r\n2022.11.07 20:45:40.196334 [ 405 ] {} <Fatal> BaseDaemon: 22. ? @ 0x7f47b9ee7609 in ?\r\n2022.11.07 20:45:40.196351 [ 405 ] {} <Fatal> BaseDaemon: 23. __clone @ 0x7f47b9e0c133 in ?\r\n2022.11.07 20:45:40.512096 [ 405 ] {} <Fatal> BaseDaemon: Integrity check of the executable skipped because the reference checksum could not be read. (calculated checksum: FD6AB11762394B3975302C7A1686DC99)\r\n```\n",
  "hints_text": "",
  "created_at": "2022-11-08T13:26:50Z",
  "modified_files": [
    "src/Analyzer/Passes/QueryAnalysisPass.cpp",
    "src/Analyzer/Utils.cpp",
    "src/Analyzer/Utils.h",
    "src/Planner/CollectTableExpressionData.cpp",
    "src/Planner/PlannerJoinTree.cpp",
    "src/Planner/TableExpressionData.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02475_analyzer_array_join_with_join.reference",
    "b/tests/queries/0_stateless/02476_analyzer_join_with_unused_columns.reference",
    "b/tests/queries/0_stateless/02476_analyzer_join_with_unused_columns.sql",
    "b/tests/queries/0_stateless/02477_analyzer_array_join_with_join.reference",
    "b/tests/queries/0_stateless/02477_analyzer_array_join_with_join.sql"
  ]
}