{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 27180,
  "instance_id": "ClickHouse__ClickHouse-27180",
  "issue_numbers": [
    "27138"
  ],
  "base_commit": "4dc4854fad967f76ae2e1cb247a73a49938e14bb",
  "patch": "diff --git a/docs/en/operations/system-tables/replicas.md b/docs/en/operations/system-tables/replicas.md\nindex 5a6ec54723b9..e2cc607f6d84 100644\n--- a/docs/en/operations/system-tables/replicas.md\n+++ b/docs/en/operations/system-tables/replicas.md\n@@ -82,6 +82,7 @@ The next 4 columns have a non-zero value only where there is an active session w\n -   `absolute_delay` (`UInt64`) - How big lag in seconds the current replica has.\n -   `total_replicas` (`UInt8`) - The total number of known replicas of this table.\n -   `active_replicas` (`UInt8`) - The number of replicas of this table that have a session in ZooKeeper (i.e., the number of functioning replicas).\n+-   `replica_is_active` ([Map(String, UInt8)](../../sql-reference/data-types/map.md)) \u2014 Map between replica name and is replica active.\n \n If you request all the columns, the table may work a bit slowly, since several reads from ZooKeeper are made for each row.\n If you do not request the last 4 columns (log_max_index, log_pointer, total_replicas, active_replicas), the table works quickly.\ndiff --git a/src/Storages/StorageReplicatedMergeTree.cpp b/src/Storages/StorageReplicatedMergeTree.cpp\nindex 8b6267943bd3..08161f8ef46b 100644\n--- a/src/Storages/StorageReplicatedMergeTree.cpp\n+++ b/src/Storages/StorageReplicatedMergeTree.cpp\n@@ -5575,8 +5575,11 @@ void StorageReplicatedMergeTree::getStatus(Status & res, bool with_zk_fields)\n             res.total_replicas = all_replicas.size();\n \n             for (const String & replica : all_replicas)\n-                if (zookeeper->exists(fs::path(zookeeper_path) / \"replicas\" / replica / \"is_active\"))\n-                    ++res.active_replicas;\n+            {\n+                bool is_replica_active = zookeeper->exists(fs::path(zookeeper_path) / \"replicas\" / replica / \"is_active\");\n+                res.active_replicas += static_cast<UInt8>(is_replica_active);\n+                res.replica_is_active.emplace(replica, is_replica_active);\n+            }\n         }\n         catch (const Coordination::Exception &)\n         {\ndiff --git a/src/Storages/StorageReplicatedMergeTree.h b/src/Storages/StorageReplicatedMergeTree.h\nindex 0f9d71bd5a56..3d2727d7bb96 100644\n--- a/src/Storages/StorageReplicatedMergeTree.h\n+++ b/src/Storages/StorageReplicatedMergeTree.h\n@@ -176,6 +176,7 @@ class StorageReplicatedMergeTree final : public shared_ptr_helper<StorageReplica\n         UInt8 active_replicas;\n         /// If the error has happened fetching the info from ZooKeeper, this field will be set.\n         String zookeeper_exception;\n+        std::unordered_map<std::string, bool> replica_is_active;\n     };\n \n     /// Get the status of the table. If with_zk_fields = false - do not fill in the fields that require queries to ZK.\ndiff --git a/src/Storages/System/StorageSystemReplicas.cpp b/src/Storages/System/StorageSystemReplicas.cpp\nindex fc33c6b421b1..5c22d3c2fae4 100644\n--- a/src/Storages/System/StorageSystemReplicas.cpp\n+++ b/src/Storages/System/StorageSystemReplicas.cpp\n@@ -2,6 +2,7 @@\n #include <DataTypes/DataTypeString.h>\n #include <DataTypes/DataTypesNumber.h>\n #include <DataTypes/DataTypeDateTime.h>\n+#include <DataTypes/DataTypeMap.h>\n #include <Storages/System/StorageSystemReplicas.h>\n #include <Storages/StorageReplicatedMergeTree.h>\n #include <Storages/VirtualColumnUtils.h>\n@@ -51,6 +52,7 @@ StorageSystemReplicas::StorageSystemReplicas(const StorageID & table_id_)\n         { \"total_replicas\",                       std::make_shared<DataTypeUInt8>()    },\n         { \"active_replicas\",                      std::make_shared<DataTypeUInt8>()    },\n         { \"zookeeper_exception\",                  std::make_shared<DataTypeString>()   },\n+        { \"replica_is_active\",                    std::make_shared<DataTypeMap>(std::make_shared<DataTypeString>(), std::make_shared<DataTypeUInt8>()) }\n     }));\n     setInMemoryMetadata(storage_metadata);\n }\n@@ -101,7 +103,8 @@ Pipe StorageSystemReplicas::read(\n             || column_name == \"log_pointer\"\n             || column_name == \"total_replicas\"\n             || column_name == \"active_replicas\"\n-            || column_name == \"zookeeper_exception\")\n+            || column_name == \"zookeeper_exception\"\n+            || column_name == \"replica_is_active\")\n         {\n             with_zk_fields = true;\n             break;\n@@ -184,6 +187,18 @@ Pipe StorageSystemReplicas::read(\n         res_columns[col_num++]->insert(status.total_replicas);\n         res_columns[col_num++]->insert(status.active_replicas);\n         res_columns[col_num++]->insert(status.zookeeper_exception);\n+\n+        Map replica_is_active_values;\n+        for (const auto & [name, is_active] : status.replica_is_active)\n+        {\n+            Tuple is_replica_active_value;\n+            is_replica_active_value.emplace_back(name);\n+            is_replica_active_value.emplace_back(is_active);\n+\n+            replica_is_active_values.emplace_back(std::move(is_replica_active_value));\n+        }\n+\n+        res_columns[col_num++]->insert(std::move(replica_is_active_values));\n     }\n \n     Block header = metadata_snapshot->getSampleBlock();\n",
  "test_patch": "diff --git a/tests/integration/test_replica_is_active/__init__.py b/tests/integration/test_replica_is_active/__init__.py\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/integration/test_replica_is_active/test.py b/tests/integration/test_replica_is_active/test.py\nnew file mode 100644\nindex 000000000000..14046ea7f7d6\n--- /dev/null\n+++ b/tests/integration/test_replica_is_active/test.py\n@@ -0,0 +1,41 @@\n+import pytest\n+from helpers.client import QueryRuntimeException\n+from helpers.cluster import ClickHouseCluster\n+\n+cluster = ClickHouseCluster(__file__)\n+node1 = cluster.add_instance('node1', with_zookeeper=True)\n+node2 = cluster.add_instance('node2', with_zookeeper=True)\n+node3 = cluster.add_instance('node3', with_zookeeper=True)\n+\n+@pytest.fixture(scope=\"module\")\n+def start_cluster():\n+    try:\n+        cluster.start()\n+\n+        for i, node in enumerate((node1, node2, node3)):\n+            node_name = 'node' + str(i + 1)\n+            node.query(\n+                '''\n+                CREATE TABLE test_table(date Date, id UInt32, dummy UInt32)\n+                ENGINE = ReplicatedMergeTree('/clickhouse/tables/test_table', '{}')\n+                PARTITION BY date ORDER BY id\n+                '''.format(node_name)\n+            )\n+\n+        yield cluster\n+\n+    finally:\n+        cluster.shutdown()\n+\n+\n+def test_replica_is_active(start_cluster):\n+    query_result = node1.query(\"select replica_is_active from system.replicas where table = 'test_table'\")\n+    assert query_result == '{\\'node1\\':1,\\'node2\\':1,\\'node3\\':1}\\n'\n+\n+    node3.stop()\n+    query_result = node1.query(\"select replica_is_active from system.replicas where table = 'test_table'\")\n+    assert query_result == '{\\'node1\\':1,\\'node2\\':1,\\'node3\\':0}\\n'\n+\n+    node2.stop()\n+    query_result = node1.query(\"select replica_is_active from system.replicas where table = 'test_table'\")\n+    assert query_result == '{\\'node1\\':1,\\'node2\\':0,\\'node3\\':0}\\n'\n",
  "problem_statement": "List all replicas/inactive replicas names in system.replicas table\n**Use case**\r\n\r\nCurrently, `system.replicas` table has `total_replicas` and `active_replicas` columns which are useful to check/alert when some replicas are down. One problem, these columns are numbers. They tell when there is a problem, but you need to further check ZooKeeper or query all the nodes to detect what exact replicas (hosts) are down/inactive/have problems.\r\n\r\n**Describe the solution you'd like**\r\n\r\nAdd a replicas column maybe as a map which would contain the replica name, and it's status. Or, add 2 array columns with `replica_names` and `active_replica_names`\r\n\r\n**Alternative**\r\n\r\nSomething along the line\r\n\r\n```sql\r\nselect path, value from system.zookeeper where path IN (\r\n    select concat(path, '/', name) from system.zookeeper where path in (select concat(zookeeper_path, '/replicas') from system.replicas)\r\n)\r\nand name = 'is_active'\r\n```\n",
  "hints_text": "",
  "created_at": "2021-08-04T13:20:58Z"
}