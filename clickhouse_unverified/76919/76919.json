{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 76919,
  "instance_id": "ClickHouse__ClickHouse-76919",
  "issue_numbers": [
    "76909"
  ],
  "base_commit": "8f043cbadffe20d0479e9aa463e6b4ff34f7b876",
  "patch": "diff --git a/src/Processors/Transforms/FinishSortingTransform.cpp b/src/Processors/Transforms/FinishSortingTransform.cpp\nindex 63a9c3924a2d..adada848dba0 100644\n--- a/src/Processors/Transforms/FinishSortingTransform.cpp\n+++ b/src/Processors/Transforms/FinishSortingTransform.cpp\n@@ -56,6 +56,9 @@ void FinishSortingTransform::consume(Chunk chunk)\n {\n     generated_prefix = false;\n \n+    if (chunk.getNumRows() == 0)\n+        return;\n+\n     // If there were only const columns in sort description, then there is no need to sort.\n     // Return the chunks as is.\n     if (description.empty())\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03365_finish_sorting_crash.reference b/tests/queries/0_stateless/03365_finish_sorting_crash.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/03365_finish_sorting_crash.sql b/tests/queries/0_stateless/03365_finish_sorting_crash.sql\nnew file mode 100644\nindex 000000000000..d441c6bdc08d\n--- /dev/null\n+++ b/tests/queries/0_stateless/03365_finish_sorting_crash.sql\n@@ -0,0 +1,10 @@\n+CREATE TABLE test(\n+    key String,\n+    val Array(String)\n+) engine = MergeTree\n+order by key;\n+\n+insert into test VALUES ('', ['xx']);\n+insert into test VALUES ('', []);\n+\n+SELECT key, arrayJoin(val) as res FROM test ORDER BY ALL settings max_threads = 1, read_in_order_two_level_merge_threshold = 0 format Null;\n",
  "problem_statement": "Crash while reading from MergeTree with `max_threads=1` and `read_in_order_two_level_merge_threshold=0` and `arrayJoin`\n### Describe the bug\n\nhttps://s3.amazonaws.com/clickhouse-test-reports/json.html?PR=76743&sha=5895f62f545ca355dd26955b939aa9383812f084&name_0=PR&name_1=Stateless%20tests%20%28debug%29\n\n### How to reproduce\n\nDownload TSAN build from master (https://s3.amazonaws.com/clickhouse-test-reports/json.html?REF=master&sha=57f48d8b65fdffd95f8af9ce02532a66d52e3e11&name_0=MasterCI&name_1=Build+%28amd_tsan%29). Anything with asserts will do:\n\nSetup the same settings as in the crash:\n```\n$ git diff\ndiff --git a/tests/queries/0_stateless/03221_variant_logical_error.sql b/tests/queries/0_stateless/03221_variant_logical_error.sql\nindex b1e3b02af7a..971a5bf7375 100644\n--- a/tests/queries/0_stateless/03221_variant_logical_error.sql\n+++ b/tests/queries/0_stateless/03221_variant_logical_error.sql\n@@ -1,5 +1,7 @@\n+-- Tags: no-random-settings\n set allow_experimental_variant_type = 1;\n set allow_suspicious_types_in_order_by = 1;\n+set min_compress_block_size = 150433, max_compress_block_size = 2270521, max_block_size = 69441, min_external_table_block_size_bytes = 0, max_joined_block_size_rows = 14786, max_insert_threads = 3, max_threads = 1, max_read_buffer_size = 751724, connect_timeout_with_failover_ms = 2000, connect_timeout_with_failover_secure_ms = 3000, idle_connection_timeout = 36000, s3_max_get_rps = 1000000, s3_max_get_burst = 2000000, s3_max_put_rps = 1000000, s3_max_put_burst = 2000000, s3_check_objects_after_upload = true, use_uncompressed_cache = true, max_remote_read_network_bandwidth = 1000000000000, max_remote_write_network_bandwidth = 1000000000000, max_local_read_bandwidth = 1000000000000, max_local_write_bandwidth = 1000000000000, stream_like_engine_allow_direct_select = true, enable_multiple_prewhere_read_steps = false, replication_wait_for_inactive_replica_timeout = 30, allow_suspicious_types_in_order_by = true, min_count_to_compile_expression = 0, compile_aggregate_expressions = false, compile_sort_description = false, min_count_to_compile_sort_description = 0, group_by_two_level_threshold = 994514, group_by_two_level_threshold_bytes = 21834966, enable_memory_bound_merging_of_aggregation_results = false, allow_nonconst_timezone_arguments = true, input_format_parallel_parsing = false, min_chunk_bytes_for_parallel_parsing = 9280195, output_format_parallel_formatting = false, merge_tree_coarse_index_granularity = 25, min_bytes_to_use_direct_io = 943971523, min_bytes_to_use_mmap_io = 10737418240, log_queries = true, insert_quorum_timeout = 60000, merge_tree_read_split_ranges_into_intersecting_and_non_intersecting_injection_probability = 0.9900000095367432, http_response_buffer_size = 5151106, fsync_metadata = false, query_plan_join_swap_table = false, http_send_timeout = 60., http_receive_timeout = 60., use_index_for_in_with_subqueries_max_values = 1000000000, opentelemetry_start_trace_probability = 0.10000000149011612, max_rows_to_read = 20000000, max_bytes_to_read = 1000000000000, max_bytes_to_read_leaf = 1000000000000, max_rows_to_group_by = 10000000000, max_bytes_ratio_before_external_group_by = 0.13, max_rows_to_sort = 10000000000, max_bytes_to_sort = 10000000000, prefer_external_sort_block_bytes = 100000000, max_bytes_ratio_before_external_sort = 0.16, max_bytes_before_remerge_sort = 2330559128, max_result_rows = 1000000000, max_result_bytes = 1000000000, max_execution_time = 600., max_execution_time_leaf = 600., max_execution_speed = 100000000000, max_execution_speed_bytes = 10000000000000, timeout_before_checking_execution_speed = 300., max_estimated_execution_time = 600., max_columns_to_read = 20000, max_temporary_columns = 20000, max_temporary_non_const_columns = 20000, max_rows_in_set = 10000000000, max_bytes_in_set = 10000000000, max_rows_in_join = 10000000000, max_bytes_in_join = 10000000000, cross_join_min_rows_to_compress = 100000000, cross_join_min_bytes_to_compress = 0, max_rows_to_transfer = 1000000000, max_bytes_to_transfer = 1000000000, max_rows_in_distinct = 10000000000, max_bytes_in_distinct = 10000000000, max_memory_usage = 5000000000, max_memory_usage_for_user = 32000000000, max_untracked_memory = 1048576, memory_profiler_step = 1048576, max_network_bandwidth = 100000000000, max_network_bytes = 1000000000000, max_network_bandwidth_for_user = 100000000000, max_network_bandwidth_for_all_users = 100000000000, max_temporary_data_on_disk_size_for_user = 100000000000, max_temporary_data_on_disk_size_for_query = 100000000000, max_backup_bandwidth = 100000000000, log_comment = '03221_variant_logical_error.sql', send_logs_level = 'warning', prefer_localhost_replica = false, aggregation_in_order_max_block_bytes = 49149379, read_in_order_two_level_merge_threshold = 0, max_hyperscan_regexp_length = 1000000, max_hyperscan_regexp_total_length = 10000000, allow_introspection_functions = true, database_atomic_wait_for_drop_and_detach_synchronously = true, optimize_or_like_chain = true, optimize_if_chain_to_multiif = true, optimize_substitute_columns = true, query_cache_max_size_in_bytes = 10000000, query_cache_max_entries = 100000, distributed_ddl_entry_format_version = 6, external_storage_max_read_rows = 10000000000, external_storage_max_read_bytes = 10000000000, local_filesystem_read_method = 'io_uring', remote_filesystem_read_method = 'read', local_filesystem_read_prefetch = true, remote_filesystem_read_prefetch = false, merge_tree_min_bytes_per_task_for_remote_reading = 1048576, merge_tree_compact_parts_min_granules_to_multibuffer_read = 104, async_insert_busy_timeout_max_ms = 5000, enable_filesystem_cache = true, enable_filesystem_cache_on_write_operations = true, filesystem_cache_segments_batch_size = 5, page_cache_inject_eviction = true, load_marks_asynchronously = true, allow_prefetched_read_pool_for_remote_filesystem = false, allow_prefetched_read_pool_for_local_filesystem = false, filesystem_prefetch_step_bytes = 104857600, filesystem_prefetch_max_memory_usage = 33554432, filesystem_prefetches_limit = 10, max_streams_for_merge_tree_reading = 1000, optimize_sorting_by_input_stream_properties = false, insert_keeper_max_retries = 100, insert_keeper_retry_initial_backoff_ms = 1, insert_keeper_retry_max_backoff_ms = 10, insert_keeper_fault_injection_probability = 0.009999999776482582, optimize_distinct_in_order = false, session_timezone = 'America/Hermosillo', optimize_extract_common_expressions = false, allow_experimental_variant_type = true;\n \n CREATE OR REPLACE TABLE test(\n     key String,\n```\n\nRun the test\n```\n./tests/clickhouse-test 03221_variant_logical_error --test-runs 1000 -j16\n```\n\n### Error message and/or stacktrace\n\n```\n2025.02.25 09:38:18.960788 [ 471962 ] {} <Fatal> BaseDaemon: ########## Short fault info ############\n2025.02.25 09:38:18.960857 [ 471962 ] {} <Fatal> BaseDaemon: (version 25.3.1.419, build id: 9A175B0E0C02E912CA3C94B8CDD08C23046DDC66, git hash: e507441be0ce4cc22889d8a5aa8cda9d994bdaad, architecture: x86_64) (from thread 102245) Received signal 6\n2025.02.25 09:38:18.960870 [ 471962 ] {} <Fatal> BaseDaemon: Signal description: Aborted\n2025.02.25 09:38:18.960876 [ 471962 ] {} <Fatal> BaseDaemon: \n2025.02.25 09:38:18.960896 [ 471962 ] {} <Fatal> BaseDaemon: Stack trace: 0x000055db548b5c68 0x000055db54b97b90 0x00007feae44cc520 0x00007feae45209fd 0x00007feae44cc476 0x00007feae44b27f3 0x00007feae44b271b 0x00007feae44c3e96 0x000055db5a666441 0x000055db5bacce6d 0x000055db5bacc5da 0x000055db5b886afb 0x000055db5b5fd46f 0x000055db5b5f2e45 0x000055db5b5f30de 0x000055db5b5f1787 0x000055db5b5f116f 0x000055db5b6002cb 0x000055db54946806 0x000055db5494cd80 0x00007feae451eac3 0x00007feae45b0850\n2025.02.25 09:38:18.960907 [ 471962 ] {} <Fatal> BaseDaemon: ########################################\n2025.02.25 09:38:18.960969 [ 471962 ] {} <Fatal> BaseDaemon: (version 25.3.1.419, build id: 9A175B0E0C02E912CA3C94B8CDD08C23046DDC66, git hash: e507441be0ce4cc22889d8a5aa8cda9d994bdaad) (from thread 102245) (query_id: efd47362-41e5-486c-aee5-d77ac3bfabd0) (query: SELECT key, arrayJoin(mapValues(val)) FROM test ORDER BY ALL;) Received signal Aborted (6)\n2025.02.25 09:38:18.960989 [ 471962 ] {} <Fatal> BaseDaemon: \n2025.02.25 09:38:18.961006 [ 471962 ] {} <Fatal> BaseDaemon: Stack trace: 0x000055db548b5c68 0x000055db54b97b90 0x00007feae44cc520 0x00007feae45209fd 0x00007feae44cc476 0x00007feae44b27f3 0x00007feae44b271b 0x00007feae44c3e96 0x000055db5a666441 0x000055db5bacce6d 0x000055db5bacc5da 0x000055db5b886afb 0x000055db5b5fd46f 0x000055db5b5f2e45 0x000055db5b5f30de 0x000055db5b5f1787 0x000055db5b5f116f 0x000055db5b6002cb 0x000055db54946806 0x000055db5494cd80 0x00007feae451eac3 0x00007feae45b0850\n2025.02.25 09:38:19.043831 [ 471962 ] {} <Fatal> BaseDaemon: 0.0. inlined from /build/src/Common/StackTrace.cpp:381: StackTrace::tryCapture()\n2025.02.25 09:38:19.043926 [ 471962 ] {} <Fatal> BaseDaemon: 0. /build/src/Common/StackTrace.cpp:350: StackTrace::StackTrace(ucontext_t const&) @ 0x000000000f1fec68\n2025.02.25 09:38:19.074032 [ 471962 ] {} <Fatal> BaseDaemon: 1. /build/src/Common/SignalHandlers.cpp:106: signalHandler(int, siginfo_t*, void*) @ 0x000000000f4e0b90\n2025.02.25 09:38:19.074115 [ 471962 ] {} <Fatal> BaseDaemon: 2. ? @ 0x00007feae44cc520\n2025.02.25 09:38:19.074137 [ 471962 ] {} <Fatal> BaseDaemon: 3. ? @ 0x00007feae45209fd\n2025.02.25 09:38:19.074159 [ 471962 ] {} <Fatal> BaseDaemon: 4. ? @ 0x00007feae44cc476\n2025.02.25 09:38:19.074189 [ 471962 ] {} <Fatal> BaseDaemon: 5. ? @ 0x00007feae44b27f3\n2025.02.25 09:38:19.074209 [ 471962 ] {} <Fatal> BaseDaemon: 6. ? @ 0x00007feae44b271b\n2025.02.25 09:38:19.074235 [ 471962 ] {} <Fatal> BaseDaemon: 7. ? @ 0x00007feae44c3e96\n2025.02.25 09:38:19.102041 [ 471962 ] {} <Fatal> BaseDaemon: 8. /build/src/Columns/ColumnString.h:263: DB::ColumnString::doCompareAt(unsigned long, unsigned long, DB::IColumn const&, int) const @ 0x0000000014faf441\n2025.02.25 09:38:19.136484 [ 471962 ] {} <Fatal> BaseDaemon: 9.0. inlined from /build/src/Columns/IColumn.h:349: DB::IColumn::compareAt(unsigned long, unsigned long, DB::IColumn const&, int) const\n2025.02.25 09:38:19.136565 [ 471962 ] {} <Fatal> BaseDaemon: 9. /build/src/Core/SortCursor.h:712: bool DB::less<std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>, std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>(std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>> const&, std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>> const&, unsigned long, unsigned long, std::vector<DB::SortColumnDescriptionWithColumnIndex, std::allocator<DB::SortColumnDescriptionWithColumnIndex>> const&) @ 0x0000000016415e6d\n2025.02.25 09:38:19.163241 [ 471962 ] {} <Fatal> BaseDaemon: 10. /build/src/Processors/Transforms/FinishSortingTransform.cpp:80: DB::FinishSortingTransform::consume(DB::Chunk) @ 0x00000000164155da\n2025.02.25 09:38:19.223359 [ 471962 ] {} <Fatal> BaseDaemon: 11. /build/src/Processors/Transforms/SortingTransform.cpp:348: DB::SortingTransform::work() @ 0x00000000161cfafb\n2025.02.25 09:38:19.230162 [ 471962 ] {} <Fatal> BaseDaemon: 12.0. inlined from /build/src/Processors/Executors/ExecutionThreadContext.cpp:53: DB::executeJob(DB::ExecutingGraph::Node*, DB::ReadProgressCallback*)\n2025.02.25 09:38:19.230213 [ 471962 ] {} <Fatal> BaseDaemon: 12. /build/src/Processors/Executors/ExecutionThreadContext.cpp:102: DB::ExecutionThreadContext::executeTask() @ 0x0000000015f4646f\n2025.02.25 09:38:19.245171 [ 471962 ] {} <Fatal> BaseDaemon: 13. /build/src/Processors/Executors/PipelineExecutor.cpp:291: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000015f3be45\n2025.02.25 09:38:19.264751 [ 471962 ] {} <Fatal> BaseDaemon: 14. /build/src/Processors/Executors/PipelineExecutor.cpp:257: DB::PipelineExecutor::executeSingleThread(unsigned long) @ 0x0000000015f3c0de\n2025.02.25 09:38:19.280975 [ 471962 ] {} <Fatal> BaseDaemon: 15. /build/src/Processors/Executors/PipelineExecutor.cpp:449: DB::PipelineExecutor::executeImpl(unsigned long, bool) @ 0x0000000015f3a787\n2025.02.25 09:38:19.297930 [ 471962 ] {} <Fatal> BaseDaemon: 16. /build/src/Processors/Executors/PipelineExecutor.cpp:128: DB::PipelineExecutor::execute(unsigned long, bool) @ 0x0000000015f3a16f\n2025.02.25 09:38:19.312099 [ 471962 ] {} <Fatal> BaseDaemon: 17.0. inlined from /build/src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:76: DB::threadFunction(DB::PullingAsyncPipelineExecutor::Data&, std::shared_ptr<DB::ThreadGroup>, unsigned long, bool)\n2025.02.25 09:38:19.312164 [ 471962 ] {} <Fatal> BaseDaemon: 17.1. inlined from /build/src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:102: operator()\n2025.02.25 09:38:19.312196 [ 471962 ] {} <Fatal> BaseDaemon: 17.2. inlined from /build/contrib/llvm-project/libcxx/include/__type_traits/invoke.h:149: decltype(std::declval<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>()()) std::__invoke[abi:se190107]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&)\n2025.02.25 09:38:19.312215 [ 471962 ] {} <Fatal> BaseDaemon: 17.3. inlined from /build/contrib/llvm-project/libcxx/include/tuple:1354: decltype(auto) std::__apply_tuple_impl[abi:se190107]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&, std::__tuple_indices<...>)\n2025.02.25 09:38:19.312231 [ 471962 ] {} <Fatal> BaseDaemon: 17.4. inlined from /build/contrib/llvm-project/libcxx/include/tuple:1358: decltype(auto) std::apply[abi:se190107]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&)\n2025.02.25 09:38:19.312244 [ 471962 ] {} <Fatal> BaseDaemon: 17.5. inlined from /build/src/Common/ThreadPool.h:310: operator()\n2025.02.25 09:38:19.312259 [ 471962 ] {} <Fatal> BaseDaemon: 17.6. inlined from /build/contrib/llvm-project/libcxx/include/__type_traits/invoke.h:149: decltype(std::declval<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>()()) std::__invoke[abi:se190107]<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)\n2025.02.25 09:38:19.312285 [ 471962 ] {} <Fatal> BaseDaemon: 17.7. inlined from /build/contrib/llvm-project/libcxx/include/__type_traits/invoke.h:224: void std::__invoke_void_return_wrapper<void, true>::__call[abi:se190107]<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&>(ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&)\n2025.02.25 09:38:19.312300 [ 471962 ] {} <Fatal> BaseDaemon: 17.8. inlined from /build/contrib/llvm-project/libcxx/include/__functional/function.h:210: ?\n2025.02.25 09:38:19.312314 [ 471962 ] {} <Fatal> BaseDaemon: 17. /build/contrib/llvm-project/libcxx/include/__functional/function.h:610: ? @ 0x0000000015f492cb\n2025.02.25 09:38:19.321861 [ 471962 ] {} <Fatal> BaseDaemon: 18.0. inlined from /build/contrib/llvm-project/libcxx/include/__functional/function.h:716: ?\n2025.02.25 09:38:19.321901 [ 471962 ] {} <Fatal> BaseDaemon: 18.1. inlined from /build/contrib/llvm-project/libcxx/include/__functional/function.h:989: ?\n2025.02.25 09:38:19.321931 [ 471962 ] {} <Fatal> BaseDaemon: 18. /build/src/Common/ThreadPool.cpp:795: ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x000000000f28f806\n2025.02.25 09:38:19.340363 [ 471962 ] {} <Fatal> BaseDaemon: 19.0. inlined from /build/contrib/llvm-project/libcxx/include/__type_traits/invoke.h:117: decltype(*std::declval<ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>().*std::declval<void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)()>()()) std::__invoke[abi:se190107]<void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*, void>(void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*&&)\n2025.02.25 09:38:19.340436 [ 471962 ] {} <Fatal> BaseDaemon: 19.1. inlined from /build/contrib/llvm-project/libcxx/include/__thread/thread.h:192: void std::__thread_execute[abi:se190107]<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*, 2ul>(std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>&, std::__tuple_indices<2ul>)\n2025.02.25 09:38:19.340465 [ 471962 ] {} <Fatal> BaseDaemon: 19. /build/contrib/llvm-project/libcxx/include/__thread/thread.h:201: void* std::__thread_proxy[abi:se190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000000f295d80\n2025.02.25 09:38:19.340479 [ 471962 ] {} <Fatal> BaseDaemon: 20. ? @ 0x00007feae451eac3\n2025.02.25 09:38:19.340489 [ 471962 ] {} <Fatal> BaseDaemon: 21. ? @ 0x00007feae45b0850\n2025.02.25 09:38:19.340504 [ 471962 ] {} <Fatal> BaseDaemon: ========================================\n2025.02.25 09:38:19.340519 [ 471962 ] {} <Fatal> BaseDaemon: Job's origin stack trace: 0x000055db548b5cf2 0x000055db54945746 0x000055db54947c95 0x000055db5494824d 0x000055db5b5ff5b3 0x000055db5b5ff938 0x000055db5b53fbe5 0x000055db5b534e38 0x000055db5b54d239 0x000055db5f84a327 0x000055db5f84a7fe 0x000055db5f7f5252 0x000055db5f7f2eaf 0x00007feae451eac3 0x00007feae45b0850\n2025.02.25 09:38:19.350113 [ 471962 ] {} <Fatal> BaseDaemon: 0. /build/src/Common/StackTrace.cpp:381: StackTrace::tryCapture() @ 0x000000000f1fecf2\n2025.02.25 09:38:19.362851 [ 471962 ] {} <Fatal> BaseDaemon: 1.0. inlined from /build/src/Common/StackTrace.h:48: StackTrace\n2025.02.25 09:38:19.362898 [ 471962 ] {} <Fatal> BaseDaemon: 1.1. inlined from /build/src/Common/ThreadPool.cpp:130: JobWithPriority\n2025.02.25 09:38:19.362914 [ 471962 ] {} <Fatal> BaseDaemon: 1.2. inlined from /build/contrib/boost/boost/heap/detail/stable_heap.hpp:306: internal_type<std::function<void ()>, Priority &, StrongTypedef<unsigned long, CurrentMetrics::MetricTag> &, const DB::OpenTelemetry::TracingContextOnThread, bool &, (anonymous namespace)::ScopedDecrement>\n2025.02.25 09:38:19.362939 [ 471962 ] {} <Fatal> BaseDaemon: 1.3. inlined from /build/contrib/boost/boost/heap/detail/stable_heap.hpp:400: boost::heap::detail::heap_base<JobWithPriority, std::less<JobWithPriority>, false, unsigned long, true>::internal_type boost::heap::detail::heap_base<JobWithPriority, std::less<JobWithPriority>, false, unsigned long, true>::make_node<std::function<void ()>, Priority&, StrongTypedef<unsigned long, CurrentMetrics::MetricTag>&, DB::OpenTelemetry::TracingContextOnThread const, bool&, (anonymous namespace)::ScopedDecrement>(std::function<void ()>&&, Priority&, StrongTypedef<unsigned long, CurrentMetrics::MetricTag>&, DB::OpenTelemetry::TracingContextOnThread const&&, bool&, (anonymous namespace)::ScopedDecrement&&)\n2025.02.25 09:38:19.362955 [ 471962 ] {} <Fatal> BaseDaemon: 1. /build/contrib/boost/boost/heap/priority_queue.hpp:260: void boost::heap::priority_queue<JobWithPriority, boost::heap::stable<true>, boost::parameter::void_, boost::parameter::void_, boost::parameter::void_>::emplace<std::function<void ()>, Priority&, StrongTypedef<unsigned long, CurrentMetrics::MetricTag>&, DB::OpenTelemetry::TracingContextOnThread const, bool&, (anonymous namespace)::ScopedDecrement>(std::function<void ()>&&, Priority&, StrongTypedef<unsigned long, CurrentMetrics::MetricTag>&, DB::OpenTelemetry::TracingContextOnThread const&&, bool&, (anonymous namespace)::ScopedDecrement&&) @ 0x000000000f28e746\n2025.02.25 09:38:19.374963 [ 471962 ] {} <Fatal> BaseDaemon: 2. /build/src/Common/ThreadPool.cpp:387: void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool) @ 0x000000000f290c95\n2025.02.25 09:38:19.387595 [ 471962 ] {} <Fatal> BaseDaemon: 3. /build/src/Common/ThreadPool.cpp:492: ThreadPoolImpl<std::thread>::scheduleOrThrow(std::function<void ()>, Priority, unsigned long, bool) @ 0x000000000f29124d\n2025.02.25 09:38:19.394919 [ 471962 ] {} <Fatal> BaseDaemon: 4.0. inlined from /build/src/Common/ThreadPool.h:277: ThreadFromGlobalPoolImpl<(lambda at /build/src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:100:21)>\n2025.02.25 09:38:19.394976 [ 471962 ] {} <Fatal> BaseDaemon: 4. /build/src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:105: DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long) @ 0x0000000015f485b3\n2025.02.25 09:38:19.403539 [ 471962 ] {} <Fatal> BaseDaemon: 5. /build/src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:131: DB::PullingAsyncPipelineExecutor::pull(DB::Block&, unsigned long) @ 0x0000000015f48938\n2025.02.25 09:38:19.448238 [ 471962 ] {} <Fatal> BaseDaemon: 6. /build/src/Server/TCPHandler.cpp:1237: DB::TCPHandler::processOrdinaryQuery(DB::QueryState&) @ 0x0000000015e88be5\n2025.02.25 09:38:19.479001 [ 471962 ] {} <Fatal> BaseDaemon: 7. /build/src/Server/TCPHandler.cpp:678: DB::TCPHandler::runImpl() @ 0x0000000015e7de38\n2025.02.25 09:38:19.532206 [ 471962 ] {} <Fatal> BaseDaemon: 8. /build/src/Server/TCPHandler.cpp:2629: DB::TCPHandler::run() @ 0x0000000015e96239\n2025.02.25 09:38:19.534876 [ 471962 ] {} <Fatal> BaseDaemon: 9. /build/base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x000000001a193327\n2025.02.25 09:38:19.538742 [ 471962 ] {} <Fatal> BaseDaemon: 10. /build/base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x000000001a1937fe\n2025.02.25 09:38:19.542449 [ 471962 ] {} <Fatal> BaseDaemon: 11. /build/base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x000000001a13e252\n2025.02.25 09:38:19.546066 [ 471962 ] {} <Fatal> BaseDaemon: 12. /build/base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001a13beaf\n2025.02.25 09:38:19.546113 [ 471962 ] {} <Fatal> BaseDaemon: 13. ? @ 0x00007feae451eac3\n2025.02.25 09:38:19.546125 [ 471962 ] {} <Fatal> BaseDaemon: 14. ? @ 0x00007feae45b0850\n2025.02.25 09:38:19.546142 [ 471962 ] {} <Fatal> BaseDaemon: Integrity check of the executable skipped because the reference checksum could not be read.\n2025.02.25 09:38:19.770812 [ 471962 ] {} <Fatal> BaseDaemon: This ClickHouse version is not official and should be upgraded to the official build.\n2025.02.25 09:38:19.771111 [ 471962 ] {} <Fatal> BaseDaemon: Changed settings: min_compress_block_size = 150433, max_compress_block_size = 2270521, max_block_size = 69441, min_external_table_block_size_bytes = 0, max_joined_block_size_rows = 14786, max_insert_threads = 3, max_threads = 1, max_read_buffer_size = 751724, connect_timeout_with_failover_ms = 2000, connect_timeout_with_failover_secure_ms = 3000, idle_connection_timeout = 36000, s3_max_get_rps = 1000000, s3_max_get_burst = 2000000, s3_max_put_rps = 1000000, s3_max_put_burst = 2000000, s3_check_objects_after_upload = true, use_uncompressed_cache = true, max_remote_read_network_bandwidth = 1000000000000, max_remote_write_network_bandwidth = 1000000000000, max_local_read_bandwidth = 1000000000000, max_local_write_bandwidth = 1000000000000, stream_like_engine_allow_direct_select = true, enable_multiple_prewhere_read_steps = false, replication_wait_for_inactive_replica_timeout = 30, allow_suspicious_types_in_order_by = true, min_count_to_compile_expression = 0, compile_aggregate_expressions = false, compile_sort_description = false, min_count_to_compile_sort_description = 0, group_by_two_level_threshold = 994514, group_by_two_level_threshold_bytes = 21834966, enable_memory_bound_merging_of_aggregation_results = false, allow_nonconst_timezone_arguments = true, input_format_parallel_parsing = false, min_chunk_bytes_for_parallel_parsing = 9280195, output_format_parallel_formatting = false, merge_tree_coarse_index_granularity = 25, min_bytes_to_use_direct_io = 943971523, min_bytes_to_use_mmap_io = 10737418240, log_queries = true, insert_quorum_timeout = 60000, merge_tree_read_split_ranges_into_intersecting_and_non_intersecting_injection_probability = 0.9900000095367432, http_response_buffer_size = 5151106, fsync_metadata = false, query_plan_join_swap_table = false, http_send_timeout = 60., http_receive_timeout = 60., use_index_for_in_with_subqueries_max_values = 1000000000, opentelemetry_start_trace_probability = 0.10000000149011612, max_rows_to_read = 20000000, max_bytes_to_read = 1000000000000, max_bytes_to_read_leaf = 1000000000000, max_rows_to_group_by = 10000000000, max_bytes_ratio_before_external_group_by = 0.13, max_rows_to_sort = 10000000000, max_bytes_to_sort = 10000000000, prefer_external_sort_block_bytes = 100000000, max_bytes_ratio_before_external_sort = 0.16, max_bytes_before_remerge_sort = 2330559128, max_result_rows = 1000000000, max_result_bytes = 1000000000, max_execution_time = 600., max_execution_time_leaf = 600., max_execution_speed = 100000000000, max_execution_speed_bytes = 10000000000000, timeout_before_checking_execution_speed = 300., max_estimated_execution_time = 600., max_columns_to_read = 20000, max_temporary_columns = 20000, max_temporary_non_const_columns = 20000, max_rows_in_set = 10000000000, max_bytes_in_set = 10000000000, max_rows_in_join = 10000000000, max_bytes_in_join = 10000000000, cross_join_min_rows_to_compress = 100000000, cross_join_min_bytes_to_compress = 0, max_rows_to_transfer = 1000000000, max_bytes_to_transfer = 1000000000, max_rows_in_distinct = 10000000000, max_bytes_in_distinct = 10000000000, max_memory_usage = 5000000000, max_memory_usage_for_user = 32000000000, max_untracked_memory = 1048576, memory_profiler_step = 1048576, max_network_bandwidth = 100000000000, max_network_bytes = 1000000000000, max_network_bandwidth_for_user = 100000000000, max_network_bandwidth_for_all_users = 100000000000, max_temporary_data_on_disk_size_for_user = 100000000000, max_temporary_data_on_disk_size_for_query = 100000000000, max_backup_bandwidth = 100000000000, log_comment = '03221_variant_logical_error.sql', send_logs_level = 'warning', prefer_localhost_replica = false, aggregation_in_order_max_block_bytes = 49149379, read_in_order_two_level_merge_threshold = 0, max_hyperscan_regexp_length = 1000000, max_hyperscan_regexp_total_length = 10000000, allow_introspection_functions = true, database_atomic_wait_for_drop_and_detach_synchronously = true, optimize_or_like_chain = true, optimize_if_chain_to_multiif = true, optimize_substitute_columns = true, query_cache_max_size_in_bytes = 10000000, query_cache_max_entries = 100000, distributed_ddl_entry_format_version = 6, external_storage_max_read_rows = 10000000000, external_storage_max_read_bytes = 10000000000, local_filesystem_read_method = 'io_uring', remote_filesystem_read_method = 'read', local_filesystem_read_prefetch = true, remote_filesystem_read_prefetch = false, merge_tree_min_bytes_per_task_for_remote_reading = 1048576, merge_tree_compact_parts_min_granules_to_multibuffer_read = 104, async_insert_busy_timeout_max_ms = 5000, enable_filesystem_cache = true, enable_filesystem_cache_on_write_operations = true, filesystem_cache_segments_batch_size = 5, page_cache_inject_eviction = true, load_marks_asynchronously = true, allow_prefetched_read_pool_for_remote_filesystem = false, allow_prefetched_read_pool_for_local_filesystem = false, filesystem_prefetch_step_bytes = 104857600, filesystem_prefetch_max_memory_usage = 33554432, filesystem_prefetches_limit = 10, max_streams_for_merge_tree_reading = 1000, optimize_sorting_by_input_stream_properties = false, insert_keeper_max_retries = 100, insert_keeper_retry_initial_backoff_ms = 1, insert_keeper_retry_max_backoff_ms = 10, insert_keeper_fault_injection_probability = 0.009999999776482582, optimize_distinct_in_order = false, session_timezone = 'America/Hermosillo', optimize_extract_common_expressions = false, allow_experimental_variant_type = true\n2025.02.25 09:38:23.178618 [ 409 ] {} <Fatal> Application: Child process was terminated by signal 6.\n```\n\n\nFrom master::\n```\n2025.02.27 14:32:31.633169 [ 246381 ] {12aaf199-6ca6-4e63-b589-59bf969d9cc2} <Fatal> : Logical error: 'offsets[i] > offsets[i - 1]'.\n2025.02.27 14:32:31.664616 [ 246381 ] {12aaf199-6ca6-4e63-b589-59bf969d9cc2} <Fatal> : Stack trace (when copying this message, always include the lines below):\n2025.02.27 14:32:31.665211 [ 246542 ] {} <Fatal> BaseDaemon: ########## Short fault info ############\n2025.02.27 14:32:31.665400 [ 246542 ] {} <Fatal> BaseDaemon: (version 25.3.1.650 (official build), build id: 3BA0FB25AE113D47331FA20B849EEA5192CFEED4, git hash: 57f48d8b65fdffd95f8af9ce02532a66d52e3e11, architecture: x86_64) (from thread 246381) Received signal 6\n2025.02.27 14:32:31.665484 [ 246542 ] {} <Fatal> BaseDaemon: Signal description: Aborted\n2025.02.27 14:32:31.665531 [ 246542 ] {} <Fatal> BaseDaemon: \n2025.02.27 14:32:31.665598 [ 246542 ] {} <Fatal> BaseDaemon: Stack trace: 0x000055556605b91d 0x000055556646f5c4 0x000055555db627a6 0x000055555db62cfb 0x00007ffff7dc8cd0 0x00007ffff7e22625 0x00007ffff7dc8ba0 0x00007ffff7db0582 0x000055555db61267 0x0000555566013b96 0x0000555566014137 0x000055556fb08724 0x000055555f5b8329 0x0000555571a06b97 0x00005555716b864f 0x00005555712c19c6 0x00005555712b123b 0x00005555712b05a0 0x00005555712b00ac 0x00005555712c65df 0x000055556612d7c0 0x000055556613623c 0x000055555db5a428 0x00007ffff7e2070a 0x00007ffff7ea4aac\n2025.02.27 14:32:31.665684 [ 246542 ] {} <Fatal> BaseDaemon: ########################################\n2025.02.27 14:32:31.665872 [ 246542 ] {} <Fatal> BaseDaemon: (version 25.3.1.650 (official build), build id: 3BA0FB25AE113D47331FA20B849EEA5192CFEED4, git hash: 57f48d8b65fdffd95f8af9ce02532a66d52e3e11) (from thread 246381) (query_id: 12aaf199-6ca6-4e63-b589-59bf969d9cc2) (query: SELECT key, arrayJoin(mapValues(val)) FROM test ORDER BY ALL;) Received signal Aborted (6)\n2025.02.27 14:32:31.666037 [ 246542 ] {} <Fatal> BaseDaemon: \n2025.02.27 14:32:31.666143 [ 246542 ] {} <Fatal> BaseDaemon: Stack trace: 0x000055556605b91d 0x000055556646f5c4 0x000055555db627a6 0x000055555db62cfb 0x00007ffff7dc8cd0 0x00007ffff7e22625 0x00007ffff7dc8ba0 0x00007ffff7db0582 0x000055555db61267 0x0000555566013b96 0x0000555566014137 0x000055556fb08724 0x000055555f5b8329 0x0000555571a06b97 0x00005555716b864f 0x00005555712c19c6 0x00005555712b123b 0x00005555712b05a0 0x00005555712b00ac 0x00005555712c65df 0x000055556612d7c0 0x000055556613623c 0x000055555db5a428 0x00007ffff7e2070a 0x00007ffff7ea4aac\n2025.02.27 14:32:31.706785 [ 246542 ] {} <Fatal> BaseDaemon: 0.0. inlined from ./build_docker/./src/Common/StackTrace.cpp:381: StackTrace::tryCapture()\n2025.02.27 14:32:31.706960 [ 246542 ] {} <Fatal> BaseDaemon: 0. ./build_docker/./src/Common/StackTrace.cpp:350: StackTrace::StackTrace(ucontext_t const&) @ 0x0000000010b0791d\n2025.02.27 14:32:31.757167 [ 246542 ] {} <Fatal> BaseDaemon: 1. ./build_docker/./src/Common/SignalHandlers.cpp:106: signalHandler(int, siginfo_t*, void*) @ 0x0000000010f1b5c4\n2025.02.27 14:32:31.946424 [ 246542 ] {} <Fatal> BaseDaemon: 2. __tsan::CallUserSignalHandler(__tsan::ThreadState*, bool, bool, int, __sanitizer::__sanitizer_siginfo*, void*) @ 0x000000000860e7a6\n2025.02.27 14:32:32.011485 [ 246542 ] {} <Fatal> BaseDaemon: 3. sighandler(int, __sanitizer::__sanitizer_siginfo*, void*) @ 0x000000000860ecfb\n2025.02.27 14:32:32.011648 [ 246542 ] {} <Fatal> BaseDaemon: 4. ? @ 0x00007ffff7dc8cd0\n2025.02.27 14:32:32.011731 [ 246542 ] {} <Fatal> BaseDaemon: 5. ? @ 0x00007ffff7e22625\n2025.02.27 14:32:32.011798 [ 246542 ] {} <Fatal> BaseDaemon: 6. ? @ 0x00007ffff7dc8ba0\n2025.02.27 14:32:32.011868 [ 246542 ] {} <Fatal> BaseDaemon: 7. ? @ 0x00007ffff7db0582\n2025.02.27 14:32:32.077776 [ 246542 ] {} <Fatal> BaseDaemon: 8. ___interceptor_abort @ 0x000000000860d267\n2025.02.27 14:32:32.165505 [ 246542 ] {} <Fatal> BaseDaemon: 9. ./build_docker/./src/Common/Exception.cpp:48: DB::abortOnFailedAssertion(String const&, void* const*, unsigned long, unsigned long) @ 0x0000000010abfb96\n2025.02.27 14:32:32.241983 [ 246542 ] {} <Fatal> BaseDaemon: 10. ./build_docker/./src/Common/Exception.cpp:54: DB::abortOnFailedAssertion(String const&) @ 0x0000000010ac0137\n2025.02.27 14:32:32.341317 [ 246542 ] {} <Fatal> BaseDaemon: 11.0. inlined from ./src/Columns/ColumnString.h:51: DB::ColumnString::sizeAt(long) const\n2025.02.27 14:32:32.341441 [ 246542 ] {} <Fatal> BaseDaemon: 11. ./src/Columns/ColumnString.h:263: DB::ColumnString::doCompareAt(unsigned long, unsigned long, DB::IColumn const&, int) const @ 0x000000001a5b4724\n2025.02.27 14:32:32.406208 [ 246542 ] {} <Fatal> BaseDaemon: 12. DB::IColumn::compareAt(unsigned long, unsigned long, DB::IColumn const&, int) const @ 0x000000000a064329\n2025.02.27 14:32:32.482119 [ 246542 ] {} <Fatal> BaseDaemon: 13.0. inlined from ./src/Core/SortCursor.h:712: bool DB::less<std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>, std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>>(std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>> const&, std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>> const&, unsigned long, unsigned long, std::vector<DB::SortColumnDescriptionWithColumnIndex, std::allocator<DB::SortColumnDescriptionWithColumnIndex>> const&)\n2025.02.27 14:32:32.482249 [ 246542 ] {} <Fatal> BaseDaemon: 13. ./build_docker/./src/Processors/Transforms/FinishSortingTransform.cpp:80: DB::FinishSortingTransform::consume(DB::Chunk) @ 0x000000001c4b2b97\n2025.02.27 14:32:32.680307 [ 246542 ] {} <Fatal> BaseDaemon: 14. ./build_docker/./src/Processors/Transforms/SortingTransform.cpp:348: DB::SortingTransform::work() @ 0x000000001c16464f\n2025.02.27 14:32:32.697614 [ 246542 ] {} <Fatal> BaseDaemon: 15.0. inlined from ./build_docker/./src/Processors/Executors/ExecutionThreadContext.cpp:53: DB::executeJob(DB::ExecutingGraph::Node*, DB::ReadProgressCallback*)\n2025.02.27 14:32:32.697731 [ 246542 ] {} <Fatal> BaseDaemon: 15. ./build_docker/./src/Processors/Executors/ExecutionThreadContext.cpp:102: DB::ExecutionThreadContext::executeTask() @ 0x000000001bd6d9c6\n2025.02.27 14:32:32.742361 [ 246542 ] {} <Fatal> BaseDaemon: 16. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:296: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x000000001bd5d23b\n2025.02.27 14:32:32.782271 [ 246542 ] {} <Fatal> BaseDaemon: 17.0. inlined from ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:262: DB::PipelineExecutor::executeSingleThread(unsigned long)\n2025.02.27 14:32:32.782413 [ 246542 ] {} <Fatal> BaseDaemon: 17. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:454: DB::PipelineExecutor::executeImpl(unsigned long, bool) @ 0x000000001bd5c5a0\n2025.02.27 14:32:32.830097 [ 246542 ] {} <Fatal> BaseDaemon: 18. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:128: DB::PipelineExecutor::execute(unsigned long, bool) @ 0x000000001bd5c0ac\n2025.02.27 14:32:32.872899 [ 246542 ] {} <Fatal> BaseDaemon: 19.0. inlined from ./build_docker/./src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:76: DB::threadFunction(DB::PullingAsyncPipelineExecutor::Data&, std::shared_ptr<DB::ThreadGroup>, unsigned long, bool)\n2025.02.27 14:32:32.873039 [ 246542 ] {} <Fatal> BaseDaemon: 19.1. inlined from ./build_docker/./src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:102: operator()\n2025.02.27 14:32:32.873152 [ 246542 ] {} <Fatal> BaseDaemon: 19.2. inlined from ./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:149: decltype(std::declval<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>()()) std::__invoke[abi:ne190107]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&)\n2025.02.27 14:32:32.873281 [ 246542 ] {} <Fatal> BaseDaemon: 19.3. inlined from ./contrib/llvm-project/libcxx/include/tuple:1354: decltype(auto) std::__apply_tuple_impl[abi:ne190107]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&, std::__tuple_indices<...>)\n2025.02.27 14:32:32.873410 [ 246542 ] {} <Fatal> BaseDaemon: 19.4. inlined from ./contrib/llvm-project/libcxx/include/tuple:1358: decltype(auto) std::apply[abi:ne190107]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&)\n2025.02.27 14:32:32.873489 [ 246542 ] {} <Fatal> BaseDaemon: 19.5. inlined from ./src/Common/ThreadPool.h:310: operator()\n2025.02.27 14:32:32.873597 [ 246542 ] {} <Fatal> BaseDaemon: 19.6. inlined from ./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:149: decltype(std::declval<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>()()) std::__invoke[abi:ne190107]<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)\n2025.02.27 14:32:32.873747 [ 246542 ] {} <Fatal> BaseDaemon: 19.7. inlined from ./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:224: void std::__invoke_void_return_wrapper<void, true>::__call[abi:ne190107]<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&>(ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&)\n2025.02.27 14:32:32.873855 [ 246542 ] {} <Fatal> BaseDaemon: 19.8. inlined from ./contrib/llvm-project/libcxx/include/__functional/function.h:210: ?\n2025.02.27 14:32:32.873958 [ 246542 ] {} <Fatal> BaseDaemon: 19. ./contrib/llvm-project/libcxx/include/__functional/function.h:610: ? @ 0x000000001bd725df\n2025.02.27 14:32:32.918519 [ 246542 ] {} <Fatal> BaseDaemon: 20.0. inlined from ./contrib/llvm-project/libcxx/include/__functional/function.h:716: ?\n2025.02.27 14:32:32.918661 [ 246542 ] {} <Fatal> BaseDaemon: 20.1. inlined from ./contrib/llvm-project/libcxx/include/__functional/function.h:989: ?\n2025.02.27 14:32:32.918750 [ 246542 ] {} <Fatal> BaseDaemon: 20. ./build_docker/./src/Common/ThreadPool.cpp:795: ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x0000000010bd97c0\n2025.02.27 14:32:32.990120 [ 246542 ] {} <Fatal> BaseDaemon: 21.0. inlined from ./contrib/llvm-project/libcxx/include/__type_traits/invoke.h:117: decltype(*std::declval<ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>().*std::declval<void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)()>()()) std::__invoke[abi:ne190107]<void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*, void>(void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*&&)\n2025.02.27 14:32:32.990301 [ 246542 ] {} <Fatal> BaseDaemon: 21.1. inlined from ./contrib/llvm-project/libcxx/include/__thread/thread.h:192: void std::__thread_execute[abi:ne190107]<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*, 2ul>(std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>&, std::__tuple_indices<2ul>)\n2025.02.27 14:32:32.990382 [ 246542 ] {} <Fatal> BaseDaemon: 21. ./contrib/llvm-project/libcxx/include/__thread/thread.h:201: void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x0000000010be223c\n2025.02.27 14:32:33.055785 [ 246542 ] {} <Fatal> BaseDaemon: 22. __tsan_thread_start_func @ 0x0000000008606428\n2025.02.27 14:32:33.055904 [ 246542 ] {} <Fatal> BaseDaemon: 23. ? @ 0x00007ffff7e2070a\n2025.02.27 14:32:33.055950 [ 246542 ] {} <Fatal> BaseDaemon: 24. ? @ 0x00007ffff7ea4aac\n2025.02.27 14:32:33.056011 [ 246542 ] {} <Fatal> BaseDaemon: ========================================\n2025.02.27 14:32:33.056078 [ 246542 ] {} <Fatal> BaseDaemon: Job's origin stack trace: 0x000055556605ba01 0x000055556612c330 0x000055556612f215 0x000055556612f897 0x00005555712c512f 0x00005555712c5707 0x000055557119d759 0x000055557118c4e2 0x00005555711b3128 0x0000555576405d83 0x00005555764065f2 0x0000555576380943 0x000055557637ecf0 0x000055557637d0aa 0x000055555db5a428 0x00007ffff7e2070a 0x00007ffff7ea4aac\n2025.02.27 14:32:33.093162 [ 246542 ] {} <Fatal> BaseDaemon: 0. ./build_docker/./src/Common/StackTrace.cpp:381: StackTrace::tryCapture() @ 0x0000000010b07a01\n2025.02.27 14:32:33.136122 [ 246542 ] {} <Fatal> BaseDaemon: 1.0. inlined from ./src/Common/StackTrace.h:48: StackTrace\n2025.02.27 14:32:33.136238 [ 246542 ] {} <Fatal> BaseDaemon: 1.1. inlined from ./build_docker/./src/Common/ThreadPool.cpp:130: JobWithPriority\n2025.02.27 14:32:33.136310 [ 246542 ] {} <Fatal> BaseDaemon: 1.2. inlined from ./contrib/boost/boost/heap/detail/stable_heap.hpp:306: internal_type<std::function<void ()>, Priority &, StrongTypedef<unsigned long, CurrentMetrics::MetricTag> &, const DB::OpenTelemetry::TracingContextOnThread, bool &, (anonymous namespace)::ScopedDecrement>\n2025.02.27 14:32:33.136394 [ 246542 ] {} <Fatal> BaseDaemon: 1.3. inlined from ./contrib/boost/boost/heap/detail/stable_heap.hpp:400: boost::heap::detail::heap_base<JobWithPriority, std::less<JobWithPriority>, false, unsigned long, true>::internal_type boost::heap::detail::heap_base<JobWithPriority, std::less<JobWithPriority>, false, unsigned long, true>::make_node<std::function<void ()>, Priority&, StrongTypedef<unsigned long, CurrentMetrics::MetricTag>&, DB::OpenTelemetry::TracingContextOnThread const, bool&, (anonymous namespace)::ScopedDecrement>(std::function<void ()>&&, Priority&, StrongTypedef<unsigned long, CurrentMetrics::MetricTag>&, DB::OpenTelemetry::TracingContextOnThread const&&, bool&, (anonymous namespace)::ScopedDecrement&&)\n2025.02.27 14:32:33.136466 [ 246542 ] {} <Fatal> BaseDaemon: 1. ./contrib/boost/boost/heap/priority_queue.hpp:260: void boost::heap::priority_queue<JobWithPriority, boost::heap::stable<true>, boost::parameter::void_, boost::parameter::void_, boost::parameter::void_>::emplace<std::function<void ()>, Priority&, StrongTypedef<unsigned long, CurrentMetrics::MetricTag>&, DB::OpenTelemetry::TracingContextOnThread const, bool&, (anonymous namespace)::ScopedDecrement>(std::function<void ()>&&, Priority&, StrongTypedef<unsigned long, CurrentMetrics::MetricTag>&, DB::OpenTelemetry::TracingContextOnThread const&&, bool&, (anonymous namespace)::ScopedDecrement&&) @ 0x0000000010bd8330\n2025.02.27 14:32:33.175836 [ 246542 ] {} <Fatal> BaseDaemon: 2. ./build_docker/./src/Common/ThreadPool.cpp:387: void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool) @ 0x0000000010bdb215\n2025.02.27 14:32:33.220542 [ 246542 ] {} <Fatal> BaseDaemon: 3. ./build_docker/./src/Common/ThreadPool.cpp:492: ThreadPoolImpl<std::thread>::scheduleOrThrow(std::function<void ()>, Priority, unsigned long, bool) @ 0x0000000010bdb897\n2025.02.27 14:32:33.247300 [ 246542 ] {} <Fatal> BaseDaemon: 4.0. inlined from ./src/Common/ThreadPool.h:277: ThreadFromGlobalPoolImpl<(lambda at ./src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:100:21)>\n2025.02.27 14:32:33.247414 [ 246542 ] {} <Fatal> BaseDaemon: 4. ./build_docker/./src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:105: DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long) @ 0x000000001bd7112f\n2025.02.27 14:32:33.278944 [ 246542 ] {} <Fatal> BaseDaemon: 5. ./build_docker/./src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:131: DB::PullingAsyncPipelineExecutor::pull(DB::Block&, unsigned long) @ 0x000000001bd71707\n2025.02.27 14:32:33.439016 [ 246542 ] {} <Fatal> BaseDaemon: 6. ./build_docker/./src/Server/TCPHandler.cpp:1237: DB::TCPHandler::processOrdinaryQuery(DB::QueryState&) @ 0x000000001bc49759\n2025.02.27 14:32:33.544633 [ 246542 ] {} <Fatal> BaseDaemon: 7. ./build_docker/./src/Server/TCPHandler.cpp:678: DB::TCPHandler::runImpl() @ 0x000000001bc384e2\n2025.02.27 14:32:33.745365 [ 246542 ] {} <Fatal> BaseDaemon: 8. ./build_docker/./src/Server/TCPHandler.cpp:2629: DB::TCPHandler::run() @ 0x000000001bc5f128\n2025.02.27 14:32:33.751526 [ 246542 ] {} <Fatal> BaseDaemon: 9. ./build_docker/./base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x0000000020eb1d83\n2025.02.27 14:32:33.761083 [ 246542 ] {} <Fatal> BaseDaemon: 10. ./build_docker/./base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x0000000020eb25f2\n2025.02.27 14:32:33.771544 [ 246542 ] {} <Fatal> BaseDaemon: 11. ./build_docker/./base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x0000000020e2c943\n2025.02.27 14:32:33.783770 [ 246542 ] {} <Fatal> BaseDaemon: 12. ./build_docker/./base/poco/Foundation/src/Thread.cpp:45: Poco::(anonymous namespace)::RunnableHolder::run() @ 0x0000000020e2acf0\n2025.02.27 14:32:33.793918 [ 246542 ] {} <Fatal> BaseDaemon: 13. ./base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000020e290aa\n2025.02.27 14:32:33.858685 [ 246542 ] {} <Fatal> BaseDaemon: 14. __tsan_thread_start_func @ 0x0000000008606428\n2025.02.27 14:32:33.858823 [ 246542 ] {} <Fatal> BaseDaemon: 15. ? @ 0x00007ffff7e2070a\n2025.02.27 14:32:33.858874 [ 246542 ] {} <Fatal> BaseDaemon: 16. ? @ 0x00007ffff7ea4aac\n2025.02.27 14:32:34.786914 [ 246542 ] {} <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: C0E6F57F243760E2C5ABC8BDB898209C)\n2025.02.27 14:32:35.994922 [ 246542 ] {} <Fatal> BaseDaemon: Report this error to https://github.com/ClickHouse/ClickHouse/issues\n2025.02.27 14:32:35.995376 [ 246542 ] {} <Fatal> BaseDaemon: Changed settings: min_compress_block_size = 150433, max_compress_block_size = 2270521, max_block_size = 69441, min_external_table_block_size_bytes = 0, max_joined_block_size_rows = 14786, max_insert_threads = 3, max_threads = 1, max_read_buffer_size = 751724, connect_timeout_with_failover_ms = 2000, connect_timeout_with_failover_secure_ms = 3000, idle_connection_timeout = 36000, s3_max_get_rps = 1000000, s3_max_get_burst = 2000000, s3_max_put_rps = 1000000, s3_max_put_burst = 2000000, s3_check_objects_after_upload = true, use_uncompressed_cache = true, max_remote_read_network_bandwidth = 1000000000000, max_remote_write_network_bandwidth = 1000000000000, max_local_read_bandwidth = 1000000000000, max_local_write_bandwidth = 1000000000000, stream_like_engine_allow_direct_select = true, enable_multiple_prewhere_read_steps = false, replication_wait_for_inactive_replica_timeout = 30, allow_suspicious_types_in_order_by = true, min_count_to_compile_expression = 0, compile_aggregate_expressions = false, compile_sort_description = false, min_count_to_compile_sort_description = 0, group_by_two_level_threshold = 994514, group_by_two_level_threshold_bytes = 21834966, enable_memory_bound_merging_of_aggregation_results = false, allow_nonconst_timezone_arguments = true, input_format_parallel_parsing = false, min_chunk_bytes_for_parallel_parsing = 9280195, output_format_parallel_formatting = false, merge_tree_coarse_index_granularity = 25, min_bytes_to_use_direct_io = 943971523, min_bytes_to_use_mmap_io = 10737418240, log_queries = true, insert_deduplicate = true, insert_quorum_timeout = 60000, merge_tree_read_split_ranges_into_intersecting_and_non_intersecting_injection_probability = 0.9900000095367432, http_response_buffer_size = 5151106, fsync_metadata = false, query_plan_join_swap_table = false, distributed_ddl_task_timeout = 120, http_send_timeout = 60., http_receive_timeout = 60., use_index_for_in_with_subqueries_max_values = 1000000000, joined_subquery_requires_alias = false, opentelemetry_start_trace_probability = 0.10000000149011612, max_rows_to_read = 20000000, max_bytes_to_read = 1000000000000, max_bytes_to_read_leaf = 1000000000000, max_rows_to_group_by = 10000000000, max_bytes_before_external_group_by = 1442450940, max_bytes_ratio_before_external_group_by = 0.13, max_rows_to_sort = 10000000000, max_bytes_to_sort = 10000000000, prefer_external_sort_block_bytes = 100000000, max_bytes_ratio_before_external_sort = 0.16, max_bytes_before_remerge_sort = 2330559128, max_result_rows = 1000000000, max_result_bytes = 1000000000, max_execution_time = 600., max_execution_time_leaf = 600., max_execution_speed = 100000000000, max_execution_speed_bytes = 10000000000000, timeout_before_checking_execution_speed = 300., max_estimated_execution_time = 600., max_columns_to_read = 20000, max_temporary_columns = 20000, max_temporary_non_const_columns = 20000, max_expanded_ast_elements = 50000, max_rows_in_set = 10000000000, max_bytes_in_set = 10000000000, max_rows_in_join = 10000000000, max_bytes_in_join = 10000000000, join_algorithm = 'hash', cross_join_min_rows_to_compress = 100000000, cross_join_min_bytes_to_compress = 0, max_rows_to_transfer = 1000000000, max_bytes_to_transfer = 1000000000, max_rows_in_distinct = 10000000000, max_bytes_in_distinct = 10000000000, max_memory_usage = 5000000000, max_memory_usage_for_user = 32000000000, max_untracked_memory = 1048576, memory_profiler_step = 1048576, memory_usage_overcommit_max_wait_microseconds = 50000, max_network_bandwidth = 100000000000, max_network_bytes = 1000000000000, max_network_bandwidth_for_user = 100000000000, max_network_bandwidth_for_all_users = 100000000000, max_temporary_data_on_disk_size_for_user = 100000000000, max_temporary_data_on_disk_size_for_query = 100000000000, max_backup_bandwidth = 100000000000, log_query_threads = false, log_comment = '03221_variant_logical_error.sql', send_logs_level = 'warning', prefer_localhost_replica = false, aggregation_in_order_max_block_bytes = 49149379, read_in_order_two_level_merge_threshold = 0, max_hyperscan_regexp_length = 1000000, max_hyperscan_regexp_total_length = 10000000, allow_introspection_functions = true, max_partitions_per_insert_block = 100, database_atomic_wait_for_drop_and_detach_synchronously = true, optimize_or_like_chain = true, optimize_if_chain_to_multiif = true, optimize_substitute_columns = true, enable_global_with_statement = true, query_cache_max_size_in_bytes = 10000000, query_cache_max_entries = 100000, database_replicated_initial_query_timeout_sec = 120, database_replicated_enforce_synchronous_settings = true, database_replicated_always_detach_permanently = true, distributed_ddl_output_mode = 'none', distributed_ddl_entry_format_version = 6, external_storage_max_read_rows = 10000000000, external_storage_max_read_bytes = 10000000000, local_filesystem_read_method = 'io_uring', remote_filesystem_read_method = 'read', local_filesystem_read_prefetch = true, remote_filesystem_read_prefetch = false, merge_tree_min_bytes_per_task_for_remote_reading = 1048576, merge_tree_compact_parts_min_granules_to_multibuffer_read = 104, async_insert_busy_timeout_max_ms = 5000, enable_filesystem_cache = true, enable_filesystem_cache_on_write_operations = true, filesystem_cache_segments_batch_size = 5, page_cache_inject_eviction = true, load_marks_asynchronously = true, allow_prefetched_read_pool_for_remote_filesystem = false, allow_prefetched_read_pool_for_local_filesystem = false, filesystem_prefetch_step_bytes = 104857600, filesystem_prefetch_max_memory_usage = 33554432, filesystem_prefetches_limit = 10, max_streams_for_merge_tree_reading = 1000, optimize_sorting_by_input_stream_properties = false, insert_keeper_max_retries = 100, insert_keeper_retry_initial_backoff_ms = 1, insert_keeper_retry_max_backoff_ms = 10, insert_keeper_fault_injection_probability = 0.009999999776482582, optimize_distinct_in_order = false, session_timezone = 'America/Hermosillo', optimize_extract_common_expressions = false, allow_experimental_variant_type = true, allow_experimental_database_replicated = true, input_format_null_as_default = false\n```\n\ncc @Avogar \n",
  "hints_text": "How to reproduce without Variant type:\n```sql\nset max_threads = 1, read_in_order_two_level_merge_threshold = 0;\n\nCREATE OR REPLACE TABLE test(\n    key String,\n    val Array(String)\n) engine = MergeTree\norder by key;\n\ninsert into test VALUES ('', ['xx']);\ninsert into test VALUES ('', []);\nSELECT key, arrayJoin(val) as res FROM test ORDER BY ALL;\n```\n\nStacktrace: https://pastila.nl/?005b4f13/5a63857676d566152272566740e28cc7#PKfEhalVtwGX9romDJMF8A==",
  "created_at": "2025-02-27T16:11:10Z",
  "modified_files": [
    "src/Processors/Transforms/FinishSortingTransform.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03365_finish_sorting_crash.sql"
  ]
}