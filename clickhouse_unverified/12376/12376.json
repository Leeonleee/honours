{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 12376,
  "instance_id": "ClickHouse__ClickHouse-12376",
  "issue_numbers": [
    "12163"
  ],
  "base_commit": "f252dd94c8b0a945ffee50615797e63e4c8350b7",
  "patch": "diff --git a/src/AggregateFunctions/AggregateFunctionForEach.h b/src/AggregateFunctions/AggregateFunctionForEach.h\nindex 19f2994d3f1b..ee4a168ccebe 100644\n--- a/src/AggregateFunctions/AggregateFunctionForEach.h\n+++ b/src/AggregateFunctions/AggregateFunctionForEach.h\n@@ -247,6 +247,11 @@ class AggregateFunctionForEach final : public IAggregateFunctionDataHelper<Aggre\n     {\n         return true;\n     }\n+\n+    bool isState() const override\n+    {\n+        return nested_func->isState();\n+    }\n };\n \n \ndiff --git a/src/AggregateFunctions/AggregateFunctionNull.cpp b/src/AggregateFunctions/AggregateFunctionNull.cpp\nindex b8fbad53350d..b65b4aba447b 100644\n--- a/src/AggregateFunctions/AggregateFunctionNull.cpp\n+++ b/src/AggregateFunctions/AggregateFunctionNull.cpp\n@@ -2,6 +2,7 @@\n #include <AggregateFunctions/AggregateFunctionNull.h>\n #include <AggregateFunctions/AggregateFunctionNothing.h>\n #include <AggregateFunctions/AggregateFunctionCount.h>\n+#include <AggregateFunctions/AggregateFunctionState.h>\n #include <AggregateFunctions/AggregateFunctionCombinatorFactory.h>\n #include \"registerAggregateFunctions.h\"\n \n@@ -71,6 +72,19 @@ class AggregateFunctionCombinatorNull final : public IAggregateFunctionCombinato\n         if (auto adapter = nested_function->getOwnNullAdapter(nested_function, arguments, params))\n             return adapter;\n \n+        /// If applied to aggregate function with -State combinator, we apply -Null combinator to it's nested_function instead of itself.\n+        /// Because Nullable AggregateFunctionState does not make sense and ruins the logic of managing aggregate function states.\n+\n+        if (const AggregateFunctionState * function_state = typeid_cast<const AggregateFunctionState *>(nested_function.get()))\n+        {\n+            auto transformed_nested_function = transformAggregateFunction(function_state->getNestedFunction(), properties, arguments, params);\n+\n+            return std::make_shared<AggregateFunctionState>(\n+                transformed_nested_function,\n+                transformed_nested_function->getArgumentTypes(),\n+                transformed_nested_function->getParameters());\n+        }\n+\n         bool return_type_is_nullable = !properties.returns_default_when_only_null && nested_function->getReturnType()->canBeInsideNullable();\n         bool serialize_flag = return_type_is_nullable || properties.returns_default_when_only_null;\n \ndiff --git a/src/AggregateFunctions/IAggregateFunction.h b/src/AggregateFunctions/IAggregateFunction.h\nindex eb9c560af98a..25d8580a923a 100644\n--- a/src/AggregateFunctions/IAggregateFunction.h\n+++ b/src/AggregateFunctions/IAggregateFunction.h\n@@ -122,8 +122,9 @@ class IAggregateFunction\n         throw Exception(\"Method predictValues is not supported for \" + getName(), ErrorCodes::NOT_IMPLEMENTED);\n     }\n \n-    /** Returns true for aggregate functions of type -State.\n+    /** Returns true for aggregate functions of type -State\n       * They are executed as other aggregate functions, but not finalized (return an aggregation state that can be combined with another).\n+      * Also returns true when the final value of this aggregate function contains State of other aggregate function inside.\n       */\n     virtual bool isState() const { return false; }\n \ndiff --git a/src/Columns/ColumnAggregateFunction.cpp b/src/Columns/ColumnAggregateFunction.cpp\nindex 915dd7530c49..4b9dcc8d04e7 100644\n--- a/src/Columns/ColumnAggregateFunction.cpp\n+++ b/src/Columns/ColumnAggregateFunction.cpp\n@@ -85,6 +85,20 @@ void ColumnAggregateFunction::addArena(ConstArenaPtr arena_)\n     foreign_arenas.push_back(arena_);\n }\n \n+namespace\n+{\n+\n+ConstArenas concatArenas(const ConstArenas & array, ConstArenaPtr arena)\n+{\n+    ConstArenas result = array;\n+    if (arena)\n+        result.push_back(std::move(arena));\n+\n+    return result;\n+}\n+\n+}\n+\n MutableColumnPtr ColumnAggregateFunction::convertToValues(MutableColumnPtr column)\n {\n     /** If the aggregate function returns an unfinalized/unfinished state,\n@@ -121,19 +135,27 @@ MutableColumnPtr ColumnAggregateFunction::convertToValues(MutableColumnPtr colum\n     auto & func = column_aggregate_func.func;\n     auto & data = column_aggregate_func.data;\n \n-    if (const AggregateFunctionState *function_state = typeid_cast<const AggregateFunctionState *>(func.get()))\n-    {\n-        auto res = column_aggregate_func.createView();\n-        res->set(function_state->getNestedFunction());\n-        res->data.assign(data.begin(), data.end());\n-        return res;\n-    }\n-\n+    /// insertResultInto may invalidate states, so we must unshare ownership of them\n     column_aggregate_func.ensureOwnership();\n \n     MutableColumnPtr res = func->getReturnType()->createColumn();\n     res->reserve(data.size());\n \n+    /// If there are references to states in final column, we must hold their ownership\n+    /// by holding arenas and source.\n+\n+    auto callback = [&](auto & subcolumn)\n+    {\n+        if (auto * aggregate_subcolumn = typeid_cast<ColumnAggregateFunction *>(subcolumn.get()))\n+        {\n+            aggregate_subcolumn->foreign_arenas = concatArenas(column_aggregate_func.foreign_arenas, column_aggregate_func.my_arena);\n+            aggregate_subcolumn->src = column_aggregate_func.getPtr();\n+        }\n+    };\n+\n+    callback(res);\n+    res->forEachSubcolumn(callback);\n+\n     for (auto * val : data)\n         func->insertResultInto(val, *res, &column_aggregate_func.createOrGetArena());\n \n@@ -629,20 +651,6 @@ void ColumnAggregateFunction::getExtremes(Field & min, Field & max) const\n     max = serialized;\n }\n \n-namespace\n-{\n-\n-ConstArenas concatArenas(const ConstArenas & array, ConstArenaPtr arena)\n-{\n-    ConstArenas result = array;\n-    if (arena)\n-        result.push_back(std::move(arena));\n-\n-    return result;\n-}\n-\n-}\n-\n ColumnAggregateFunction::MutablePtr ColumnAggregateFunction::createView() const\n {\n     auto res = create(func, concatArenas(foreign_arenas, my_arena));\ndiff --git a/src/Functions/FunctionsBitmap.cpp b/src/Functions/FunctionsBitmap.cpp\nindex c94566b04b09..72652288872c 100644\n--- a/src/Functions/FunctionsBitmap.cpp\n+++ b/src/Functions/FunctionsBitmap.cpp\n@@ -1,7 +1,6 @@\n #include <Functions/FunctionFactory.h>\n \n-// TODO include this last because of a broken roaring header. See the comment\n-// inside.\n+// TODO include this last because of a broken roaring header. See the comment inside.\n #include <Functions/FunctionsBitmap.h>\n \n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01380_nullable_state.reference b/tests/queries/0_stateless/01380_nullable_state.reference\nnew file mode 100644\nindex 000000000000..f87ff0a3f1f4\n--- /dev/null\n+++ b/tests/queries/0_stateless/01380_nullable_state.reference\n@@ -0,0 +1,64 @@\n+0100012CCBC234\n+\n+0100012CCBC234\n+---\n+0100012CCBC234\n+\n+0100012CCBC234\n+---\n+0100012CCBC234\n+\n+0100012CCBC234\n+---\n+0100012CCBC234\n+\n+0100012CCBC234\n+---\n+0100012CCBC234\n+\n+0100012CCBC234\n+---\n+0100012CCBC234\n+\n+0100012CCBC234\n+---\n+1\n+\n+1\n+---\n+0\t1\n+1\t1\n+2\t1\n+3\t1\n+4\t1\n+\n+0\t1\n+---\n+0\t1\n+1\t1\n+2\t1\n+3\t1\n+4\t1\n+\n+0\t1\n+---\n+0\t[0]\n+1\t[0]\n+2\t[0]\n+3\t[0]\n+4\t[0]\n+\n+0\t[0]\n+---\n+0\t[0]\n+1\t[0]\n+2\t[0]\n+3\t[0]\n+4\t[0]\n+\n+\\N\t[0]\n+---\n+0100012CCBC234\n+---\n+0100012CCBC234\n+---\ndiff --git a/tests/queries/0_stateless/01380_nullable_state.sql b/tests/queries/0_stateless/01380_nullable_state.sql\nnew file mode 100644\nindex 000000000000..6841a6ce6368\n--- /dev/null\n+++ b/tests/queries/0_stateless/01380_nullable_state.sql\n@@ -0,0 +1,26 @@\n+SELECT hex(toString(uniqState(toNullable(1)))) WITH TOTALS;\n+SELECT '---';\n+SELECT hex(toString(uniqState(x))) FROM (SELECT toNullable(1) AS x) WITH TOTALS;\n+SELECT '---';\n+SELECT DISTINCT hex(toString(uniqState(x))) FROM (SELECT materialize(1) AS k, toNullable(1) AS x FROM numbers(1)) GROUP BY k WITH TOTALS ORDER BY k;\n+SELECT '---';\n+SELECT DISTINCT hex(toString(uniqState(x))) FROM (SELECT materialize(1) AS k, toNullable(1) AS x FROM numbers(10)) GROUP BY k WITH TOTALS ORDER BY k;\n+SELECT '---';\n+SELECT DISTINCT hex(toString(uniqState(x))) FROM (SELECT intDiv(number, 3) AS k, toNullable(1) AS x FROM numbers(10)) GROUP BY k WITH TOTALS ORDER BY k;\n+SELECT '---';\n+SELECT DISTINCT hex(toString(uniqState(x))) FROM (SELECT intDiv(number, 3) AS k, toNullable(1) AS x FROM system.numbers LIMIT 100000) GROUP BY k WITH TOTALS ORDER BY k;\n+SELECT '---';\n+SELECT DISTINCT arrayUniq(finalizeAggregation(groupArrayState(x))) FROM (SELECT intDiv(number, 3) AS k, toNullable(1) AS x FROM system.numbers LIMIT 100000) GROUP BY k WITH TOTALS ORDER BY k;\n+SELECT '---';\n+SELECT k, finalizeAggregation(uniqState(x)) FROM (SELECT intDiv(number, 3) AS k, toNullable(1) AS x FROM system.numbers LIMIT 100000) GROUP BY k WITH TOTALS ORDER BY k LIMIT 5;\n+SELECT '---';\n+SELECT k, finalizeAggregation(uniqState(x)) FROM (WITH toNullable(number = 3 ? 3 : 1) AS d SELECT intDiv(number, 3) AS k, number % d AS x FROM system.numbers LIMIT 100000) GROUP BY k WITH TOTALS ORDER BY k LIMIT 5;\n+SELECT '---';\n+SELECT k, finalizeAggregation(quantilesTimingState(0.5)(x)) FROM (WITH toNullable(number = 3 ? 3 : 1) AS d SELECT intDiv(number, 3) AS k, number % d AS x FROM system.numbers LIMIT 100000) GROUP BY k WITH TOTALS ORDER BY k LIMIT 5;\n+SELECT '---';\n+SELECT k, finalizeAggregation(quantilesTimingState(0.5)(x)) FROM (SELECT intDiv(number, if(number = 9223372036854775807, -2, if(number = 3, number = if(number = 1, NULL, 3), 1)) AS d) AS k, number % d AS x FROM system.numbers LIMIT 100000) GROUP BY k WITH TOTALS ORDER BY k ASC LIMIT 5;\n+SELECT '---';\n+SELECT DISTINCT hex(toString(uniqState(x))) FROM (SELECT materialize(1) AS k, toNullable(1) AS x FROM numbers(1)) GROUP BY k WITH ROLLUP ORDER BY k;\n+SELECT '---';\n+SELECT DISTINCT hex(toString(uniqState(x))) FROM (SELECT materialize(1) AS k, toNullable(1) AS x FROM numbers(1)) GROUP BY k WITH CUBE ORDER BY k;\n+SELECT '---';\ndiff --git a/tests/queries/0_stateless/01381_for_each_with_states.reference b/tests/queries/0_stateless/01381_for_each_with_states.reference\nnew file mode 100644\nindex 000000000000..3d1732f9d5da\n--- /dev/null\n+++ b/tests/queries/0_stateless/01381_for_each_with_states.reference\n@@ -0,0 +1,16 @@\n+5B27015C30012CCBC234272C27015C305C30275D\n+02000000000000000100012CCBC234010000\n+['0100012CCBC234','010000']\n+[1,0]\n+5B27015C30012CCBC234272C27015C305C30275D\n+\n+5B27015C30012CCBC234272C27015C305C30275D\n+02000000000000000100012CCBC234010000\n+\n+02000000000000000100012CCBC234010000\n+['0100012CCBC234','010000']\n+\n+['0100012CCBC234','010000']\n+[1,0]\n+\n+[1,0]\ndiff --git a/tests/queries/0_stateless/01381_for_each_with_states.sql b/tests/queries/0_stateless/01381_for_each_with_states.sql\nnew file mode 100644\nindex 000000000000..7286ef2cb27e\n--- /dev/null\n+++ b/tests/queries/0_stateless/01381_for_each_with_states.sql\n@@ -0,0 +1,9 @@\n+SELECT hex(toString(uniqStateForEach([1, NULL])));\n+SELECT hex(toString(uniqStateForEachState([1, NULL])));\n+SELECT arrayMap(x -> hex(toString(x)), finalizeAggregation(uniqStateForEachState([1, NULL])));\n+SELECT arrayMap(x -> finalizeAggregation(x), finalizeAggregation(uniqStateForEachState([1, NULL])));\n+\n+SELECT hex(toString(uniqStateForEach([1, NULL]))) WITH TOTALS;\n+SELECT hex(toString(uniqStateForEachState([1, NULL]))) WITH TOTALS;\n+SELECT arrayMap(x -> hex(toString(x)), finalizeAggregation(uniqStateForEachState([1, NULL]))) WITH TOTALS;\n+SELECT arrayMap(x -> finalizeAggregation(x), finalizeAggregation(uniqStateForEachState([1, NULL]))) WITH TOTALS;\n",
  "problem_statement": "segfault in DB::QuantileTiming<short>::merge\n```\r\nSELECT k, finalizeAggregation(quantilesTimingState(0.5)(x)) FROM (SELECT intDiv(number, if(number = 9223372036854775807, -2, if(number = 3, number = if(number = 1, NULL, 3), 1)) AS d) AS k, number % d AS x FROM system.numbers LIMIT 100000) GROUP BY k WITH TOTALS ORDER BY k ASC\r\n\r\n\r\n2020.07.03 18:50:19.353673 [ 211079 ] {bf6fd05b-01ae-4513-8b00-e6184184385d} <Debug> executeQuery: (from [::1]:49290) SELECT k, finalizeAggregation(quantilesTimingState(0.5)(x)) FROM (SELECT intDiv(number, if(number = 9223372036854775807, -2, if(number = 3, number = if(number = 1, NULL, 3), 1)) AS d) AS k, number % d AS x FROM system.numbers LIMIT 100000) GROUP BY k WITH TOTALS ORDER BY k ASC\r\n2020.07.03 18:50:19.355850 [ 211079 ] {bf6fd05b-01ae-4513-8b00-e6184184385d} <Trace> ContextAccess (default): Access granted: SELECT(number) ON system.numbers\r\n2020.07.03 18:50:19.357589 [ 211079 ] {bf6fd05b-01ae-4513-8b00-e6184184385d} <Trace> ContextAccess (default): Access granted: SELECT(number) ON system.numbers\r\n2020.07.03 18:50:19.360456 [ 211079 ] {bf6fd05b-01ae-4513-8b00-e6184184385d} <Trace> InterpreterSelectQuery: FetchColumns -> Complete\r\n2020.07.03 18:50:19.360646 [ 211079 ] {bf6fd05b-01ae-4513-8b00-e6184184385d} <Trace> InterpreterSelectQuery: FetchColumns -> Complete\r\n2020.07.03 18:50:19.363671 [ 212444 ] {bf6fd05b-01ae-4513-8b00-e6184184385d} <Trace> AggregatingTransform: Aggregating\r\n2020.07.03 18:50:19.363690 [ 212444 ] {bf6fd05b-01ae-4513-8b00-e6184184385d} <Trace> Aggregator: Aggregation method: nullable_keys128\r\n2020.07.03 18:50:19.377766 [ 212444 ] {bf6fd05b-01ae-4513-8b00-e6184184385d} <Trace> AggregatingTransform: Aggregated. 100000 to 100000 rows (from 1.14 MiB) in 0.016777877 sec. (5960229.652416691 rows/sec., 68.21 MiB/sec.)\r\n2020.07.03 18:50:19.377785 [ 212444 ] {bf6fd05b-01ae-4513-8b00-e6184184385d} <Trace> Aggregator: Merging aggregated data\r\n2020.07.03 18:50:19.405868 [ 210897 ] {} <Trace> BaseDaemon: Received signal 11\r\n2020.07.03 18:50:19.415011 [ 212918 ] {} <Fatal> BaseDaemon: ########################################\r\n2020.07.03 18:50:19.415380 [ 212918 ] {} <Fatal> BaseDaemon: (version 20.6.1.1, build id: 9F9D31B92875D3FC) (from thread 212444) (query_id: bf6fd05b-01ae-4513-8b00-e6184184385d) Received signal Segmentation fault (11)\r\n2020.07.03 18:50:19.415474 [ 212918 ] {} <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Unknown si_code.\r\n2020.07.03 18:50:19.415592 [ 212918 ] {} <Fatal> BaseDaemon: Stack trace: 0x9a7e0b0 0xe6debc0 0xe6e1f3d 0xbc4ddf2 0xa3cf851 0xe37d392 0xe37ffbd 0xef31649 0xed22e80 0xed55c21 0xed5a3a6 0xed5b92d 0xed5c361 0xed634fd 0x97d5dd7 0x97d4313 0x7f58ffd8e609 0x7f58ffca4103\r\n2020.07.03 18:50:19.428937 [ 212918 ] {} <Fatal> BaseDaemon: 3. /home/akuzm/ch4/ch/src/AggregateFunctions/QuantileTiming.h:321: DB::QuantileTiming<short>::merge(DB::QuantileTiming<short> const&) @ 0x9a7e0b0 in /home/akuzm/ch4/build-gcc9-rel/programs/clickhouse\r\n2020.07.03 18:50:19.430962 [ 212918 ] {} <Fatal> BaseDaemon: 4. /home/akuzm/ch4/ch/src/Columns/ColumnAggregateFunction.cpp:195: DB::ColumnAggregateFunction::ensureOwnership() @ 0xe6debc0 in /home/akuzm/ch4/build-gcc9-rel/programs/clickhouse\r\n2020.07.03 18:50:19.432321 [ 212918 ] {} <Fatal> BaseDaemon: 5. /home/akuzm/ch4/ch/contrib/libcxx/include/memory:3826: DB::ColumnAggregateFunction::convertToValues(COW<DB::IColumn>::mutable_ptr<DB::IColumn>) @ 0xe6e1f3d in /home/akuzm/ch4/build-gcc9-rel/programs/clickhouse\r\n2020.07.03 18:50:19.433772 [ 212918 ] {} <Fatal> BaseDaemon: 6. DB::FunctionFinalizeAggregation::executeImpl(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long) @ 0xbc4ddf2 in /home/akuzm/ch4/build-gcc9-rel/programs/clickhouse\r\n2020.07.03 18:50:19.434940 [ 212918 ] {} <Fatal> BaseDaemon: 7. DB::ExecutableFunctionAdaptor::execute(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long, bool) @ 0xa3cf851 in /home/akuzm/ch4/build-gcc9-rel/programs/clickhouse\r\n2020.07.03 18:50:19.435958 [ 212918 ] {} <Fatal> BaseDaemon: 8. /home/akuzm/ch4/ch/contrib/libcxx/include/vector:461: DB::ExpressionAction::execute(DB::Block&, bool) const @ 0xe37d392 in /home/akuzm/ch4/build-gcc9-rel/programs/clickhouse\r\n2020.07.03 18:50:19.437242 [ 212918 ] {} <Fatal> BaseDaemon: 9. /home/akuzm/ch4/ch/src/Interpreters/ExpressionActions.cpp:684: DB::ExpressionActions::execute(DB::Block&, bool) const @ 0xe37ffbd in /home/akuzm/ch4/build-gcc9-rel/programs/clickhouse\r\n2020.07.03 18:50:19.438074 [ 212918 ] {} <Fatal> BaseDaemon: 10. /home/akuzm/ch4/ch/src/Processors/Transforms/ExpressionTransform.cpp:43: DB::ExpressionTransform::transform(DB::Chunk&) @ 0xef31649 in /home/akuzm/ch4/build-gcc9-rel/programs/clickhouse\r\n2020.07.03 18:50:19.438893 [ 212918 ] {} <Fatal> BaseDaemon: 11. /home/akuzm/ch4/ch/contrib/libcxx/include/type_traits:3695: DB::ISimpleTransform::work() @ 0xed22e80 in /home/akuzm/ch4/build-gcc9-rel/programs/clickhouse\r\n2020.07.03 18:50:19.439777 [ 212918 ] {} <Fatal> BaseDaemon: 12. /home/akuzm/ch4/ch/src/Processors/Executors/PipelineExecutor.cpp:167: std::__1::__function::__func<DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::'lambda'(), std::__1::allocator<DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::'lambda'()>, void ()>::operator()() @ 0xed55c21 in /home/akuzm/ch4/build-gcc9-rel/programs/clickhouse\r\n2020.07.03 18:50:19.441145 [ 212918 ] {} <Fatal> BaseDaemon: 13. /home/akuzm/ch4/ch/contrib/libcxx/include/exception:180: DB::PipelineExecutor::executeStepImpl(unsigned long, unsigned long, std::__1::atomic<bool>*) (.constprop.0) @ 0xed5a3a6 in /home/akuzm/ch4/build-gcc9-rel/programs/clickhouse\r\n2020.07.03 18:50:19.442586 [ 212918 ] {} <Fatal> BaseDaemon: 14. /home/akuzm/ch4/ch/contrib/libcxx/include/vector:461: DB::PipelineExecutor::executeImpl(unsigned long) @ 0xed5b92d in /home/akuzm/ch4/build-gcc9-rel/programs/clickhouse\r\n2020.07.03 18:50:19.444151 [ 212918 ] {} <Fatal> BaseDaemon: 15. /home/akuzm/ch4/ch/contrib/libcxx/include/vector:1516: DB::PipelineExecutor::execute(unsigned long) @ 0xed5c361 in /home/akuzm/ch4/build-gcc9-rel/programs/clickhouse\r\n2020.07.03 18:50:19.445007 [ 212918 ] {} <Fatal> BaseDaemon: 16. /home/akuzm/ch4/ch/contrib/poco/Foundation/include/Poco/Event_POSIX.h:53: ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::'lambda'()>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::'lambda'()&&)::'lambda'()::operator()() const @ 0xed634fd in /home/akuzm/ch4/build-gcc9-rel/programs/clickhouse\r\n2020.07.03 18:50:19.445372 [ 212918 ] {} <Fatal> BaseDaemon: 17. /home/akuzm/ch4/ch/contrib/libcxx/include/atomic:856: ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x97d5dd7 in /home/akuzm/ch4/build-gcc9-rel/programs/clickhouse\r\n2020.07.03 18:50:19.445536 [ 212918 ] {} <Fatal> BaseDaemon: 18. /home/akuzm/ch4/ch/contrib/libcxx/include/memory:2615: void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()> >(void*) @ 0x97d4313 in /home/akuzm/ch4/build-gcc9-rel/programs/clickhouse\r\n2020.07.03 18:50:19.445614 [ 212918 ] {} <Fatal> BaseDaemon: 19. start_thread @ 0x9609 in /lib/x86_64-linux-gnu/libpthread-2.31.so\r\n2020.07.03 18:50:19.445756 [ 212918 ] {} <Fatal> BaseDaemon: 20. /build/glibc-YYA7BZ/glibc-2.31/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:97: __clone @ 0x122103 in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n```\n",
  "hints_text": "@akuzm Does not reproduce.\nOk. It reproduces with `clickhouse-benchmark`.\nThe crucial part is WITH TOTALS.\r\n\nAnd Nullable.\r\n\r\n```\r\nclickhouse-benchmark <<< \"SELECT k, finalizeAggregation(quantilesTimingState(0.5)(x)) FROM (WITH toNullable(number = 3 ? 3 : 1) AS d SELECT intDiv(number, d) AS k, number % d AS x FROM system.numbers LIMIT 100000) GROUP BY k WITH TOTALS\"\r\n```\n```\r\nclickhouse-benchmark <<< \"SELECT k, finalizeAggregation(quantilesTimingState(0.5)(x)) FROM (WITH toNullable(number = 3 ? 3 : 1) AS d SELECT intDiv(number, 3) AS k, number % d AS x FROM system.numbers LIMIT 100000) GROUP BY k WITH TOTALS\"\r\n```\nAny complex aggregate function will suffice:\r\n\r\n```\r\nclickhouse-benchmark <<< \"SELECT k, finalizeAggregation(uniqState(x)) FROM (WITH toNullable(number = 3 ? 3 : 1) AS d SELECT intDiv(number, 3) AS k, number % d AS x FROM system.numbers LIMIT 100000) GROUP BY k WITH TOTALS\"\r\n```\n```\r\nclickhouse-benchmark <<< \"SELECT k, finalizeAggregation(uniqState(x)) FROM (SELECT intDiv(number, 3) AS k, toNullable(1) AS x FROM system.numbers LIMIT 100000) GROUP BY k WITH TOTALS\"\r\n```\n```\r\n$ clickhouse-benchmark <<< \"SELECT finalizeAggregation(groupArrayState(x)) FROM (SELECT intDiv(number, 3) AS k, toNullable(1) AS x FROM system.numbers LIMIT 100000) GROUP BY k WITH TOTALS\"Loaded 1 queries.\r\nAn error occurred while processing the query 'SELECT finalizeAggregation(groupArrayState(x)) FROM (SELECT intDiv(number, 3) AS k, toNullable(1) AS x FROM system.numbers LIMIT 100000) GROUP BY k WITH TOTALS'.\r\nDB::Exception: Received from localhost:9000. DB::Exception: Memory limit (for query) exceeded: would use 128.00 PiB (attempt to allocate chunk of 144115188074701360 bytes)\r\n```\n```\r\n$ clickhouse-benchmark <<< \"SELECT uniqState(x) FROM (SELECT intDiv(number, 3) AS k, toNullable(1) AS x FROM system.numbers LIMIT 100000) GROUP BY k WITH TOTALS\"\r\nLoaded 1 queries.\r\nAn error occurred while processing the query 'SELECT uniqState(x) FROM (SELECT intDiv(number, 3) AS k, toNullable(1) AS x FROM system.numbers LIMIT 100000) GROUP BY k WITH TOTALS'.\r\nDB::Exception: Data compressed with different methods, given method byte 0x6e, previous method byte 0x82: while receiving packet from localhost:9000\r\n```\n```\r\nclickhouse-benchmark <<< \"SELECT uniqState(x) FROM (SELECT intDiv(number, 3) AS k, toNullable(1) AS x FROM numbers(10)) GROUP BY k WITH TOTALS\"\r\n```\n```\r\nclickhouse-benchmark <<< \"SELECT uniqState(x) FROM (SELECT materialize(1) AS k, toNullable(1) AS x FROM numbers(10)) GROUP BY k WITH TOTALS\"\r\n```\n```\r\nclickhouse-benchmark <<< \"SELECT uniqState(x) FROM (SELECT materialize(1) AS k, toNullable(1) AS x FROM numbers(1)) GROUP BY k WITH TOTALS\"\r\n```\n```\r\nSELECT uniqState(x) FROM (SELECT toNullable(1) AS x) WITH TOTALS\r\n```\n```\r\nSELECT uniqState(toNullable(1)) WITH TOTALS\r\n```\n@akuzm It is broken here: https://github.com/ClickHouse/ClickHouse/pull/10890\r\nVersions 20.5 and 20.4 are affected.",
  "created_at": "2020-07-10T03:09:18Z",
  "modified_files": [
    "src/AggregateFunctions/AggregateFunctionForEach.h",
    "src/AggregateFunctions/AggregateFunctionNull.cpp",
    "src/AggregateFunctions/IAggregateFunction.h",
    "src/Columns/ColumnAggregateFunction.cpp",
    "src/Functions/FunctionsBitmap.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01380_nullable_state.reference",
    "b/tests/queries/0_stateless/01380_nullable_state.sql",
    "b/tests/queries/0_stateless/01381_for_each_with_states.reference",
    "b/tests/queries/0_stateless/01381_for_each_with_states.sql"
  ]
}