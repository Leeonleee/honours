diff --git a/docker/test/integration/mysql_java_client/Dockerfile b/docker/test/integration/mysql_java_client/Dockerfile
index 0abf50cd4937..83c175514814 100644
--- a/docker/test/integration/mysql_java_client/Dockerfile
+++ b/docker/test/integration/mysql_java_client/Dockerfile
@@ -1,21 +1,15 @@
 # docker build -t clickhouse/mysql-java-client .
 # MySQL Java client docker container
 
-FROM ubuntu:18.04
+FROM openjdk:8-jdk-alpine
 
-RUN apt-get update && \
-    apt-get install -y software-properties-common build-essential openjdk-8-jdk libmysql-java curl
+RUN apk --no-cache add curl
 
-RUN rm -rf \
-        /var/lib/apt/lists/* \
-        /var/cache/debconf \
-        /tmp/* \
-RUN apt-get clean
-
-ARG ver=5.1.46
-RUN curl -L -o /mysql-connector-java-${ver}.jar https://repo1.maven.org/maven2/mysql/mysql-connector-java/${ver}/mysql-connector-java-${ver}.jar
-ENV CLASSPATH=$CLASSPATH:/mysql-connector-java-${ver}.jar
+ARG ver=8.1.0
+RUN curl -L -o /mysql-connector-j-${ver}.jar https://repo1.maven.org/maven2/com/mysql/mysql-connector-j/${ver}/mysql-connector-j-${ver}.jar
+ENV CLASSPATH=$CLASSPATH:/mysql-connector-j-${ver}.jar
 
 WORKDIR /jdbc
 COPY Test.java Test.java
-RUN javac Test.java
+COPY PreparedStatementsTest.java PreparedStatementsTest.java
+RUN javac Test.java PreparedStatementsTest.java
diff --git a/docker/test/integration/mysql_java_client/PreparedStatementsTest.java b/docker/test/integration/mysql_java_client/PreparedStatementsTest.java
new file mode 100644
index 000000000000..1ffa945718d7
--- /dev/null
+++ b/docker/test/integration/mysql_java_client/PreparedStatementsTest.java
@@ -0,0 +1,193 @@
+import com.mysql.cj.MysqlType;
+
+import java.sql.*;
+
+public class PreparedStatementsTest {
+    public static void main(String[] args) {
+        int i = 0;
+        String host = "127.0.0.1";
+        String port = "9004";
+        String user = "default";
+        String password = "";
+        String database = "default";
+        while (i < args.length) {
+            switch (args[i]) {
+                case "--host":
+                    host = args[++i];
+                    break;
+                case "--port":
+                    port = args[++i];
+                    break;
+                case "--user":
+                    user = args[++i];
+                    break;
+                case "--password":
+                    password = args[++i];
+                    break;
+                case "--database":
+                    database = args[++i];
+                    break;
+                default:
+                    i++;
+                    break;
+            }
+        }
+
+        // useServerPrepStmts uses COM_STMT_PREPARE and COM_STMT_EXECUTE
+        // instead of COM_QUERY which allows us to test the binary protocol
+        String jdbcUrl = String.format("jdbc:mysql://%s:%s/%s?useSSL=false&useServerPrepStmts=true",
+                host, port, database);
+
+        try {
+            Class.forName("com.mysql.cj.jdbc.Driver");
+            Connection conn = DriverManager.getConnection(jdbcUrl, user, password);
+            testSimpleDataTypes(conn);
+            testStringTypes(conn);
+            testLowCardinalityAndNullableTypes(conn);
+            testDecimalTypes(conn);
+            testMiscTypes(conn);
+            testDateTypes(conn);
+            testUnusualDateTime64Scales(conn);
+            testDateTimeTimezones(conn);
+            conn.close();
+        } catch (Exception e) {
+            e.printStackTrace();
+            System.exit(1);
+        }
+    }
+
+    private static void testSimpleDataTypes(Connection conn) throws SQLException {
+        System.out.println("### testSimpleDataTypes");
+        ResultSet rs = conn.prepareStatement("SELECT * FROM ps_simple_data_types").executeQuery();
+        int rowNum = 1;
+        while (rs.next()) {
+            System.out.printf("Row #%d
", rowNum++);
+            System.out.printf("%s, value: %d
", getMysqlType(rs, "i8"), rs.getInt("i8"));
+            System.out.printf("%s, value: %d
", getMysqlType(rs, "i16"), rs.getInt("i16"));
+            System.out.printf("%s, value: %d
", getMysqlType(rs, "i32"), rs.getInt("i32"));
+            System.out.printf("%s, value: %d
", getMysqlType(rs, "i64"), rs.getLong("i64"));
+            System.out.printf("%s, value: %s
", getMysqlType(rs, "i128"), rs.getString("i128"));
+            System.out.printf("%s, value: %s
", getMysqlType(rs, "i256"), rs.getString("i256"));
+            System.out.printf("%s, value: %d
", getMysqlType(rs, "ui8"), rs.getInt("ui8"));
+            System.out.printf("%s, value: %d
", getMysqlType(rs, "ui16"), rs.getInt("ui16"));
+            System.out.printf("%s, value: %d
", getMysqlType(rs, "ui32"), rs.getLong("ui32"));
+            System.out.printf("%s, value: %s
", getMysqlType(rs, "ui64"), rs.getString("ui64"));
+            System.out.printf("%s, value: %s
", getMysqlType(rs, "ui128"), rs.getString("ui128"));
+            System.out.printf("%s, value: %s
", getMysqlType(rs, "ui256"), rs.getString("ui256"));
+            System.out.printf("%s, value: %f
", getMysqlType(rs, "f32"), rs.getFloat("f32"));
+            System.out.printf("%s, value: %f
", getMysqlType(rs, "f64"), rs.getFloat("f64"));
+            System.out.printf("%s, value: %b
", getMysqlType(rs, "b"), rs.getBoolean("b"));
+        }
+        System.out.println();
+    }
+
+    private static void testStringTypes(Connection conn) throws SQLException {
+        System.out.println("### testStringTypes");
+        ResultSet rs = conn.prepareStatement("SELECT * FROM ps_string_types").executeQuery();
+        int rowNum = 1;
+        while (rs.next()) {
+            System.out.printf("Row #%d
", rowNum++);
+            System.out.printf("%s, value: %s
", getMysqlType(rs, "s"), rs.getString("s"));
+            System.out.printf("%s, value: %s
", getMysqlType(rs, "sn"), rs.getString("sn"));
+            System.out.printf("%s, value: %s
", getMysqlType(rs, "lc"), rs.getString("lc"));
+            System.out.printf("%s, value: %s
", getMysqlType(rs, "nlc"), rs.getString("nlc"));
+        }
+        System.out.println();
+    }
+
+    private static void testLowCardinalityAndNullableTypes(Connection conn) throws SQLException {
+        System.out.println("### testLowCardinalityAndNullableTypes");
+        ResultSet rs = conn.prepareStatement("SELECT * FROM ps_low_cardinality_and_nullable_types").executeQuery();
+        int rowNum = 1;
+        while (rs.next()) {
+            System.out.printf("Row #%d
", rowNum++);
+            System.out.printf("%s, value: %s
", getMysqlType(rs, "ilc"), rs.getInt("ilc"));
+            System.out.printf("%s, value: %s
", getMysqlType(rs, "dlc"), rs.getDate("dlc"));
+            // NULL int is represented as zero
+            System.out.printf("%s, value: %s
", getMysqlType(rs, "ni"), rs.getInt("ni"));
+        }
+        System.out.println();
+    }
+
+    private static void testDecimalTypes(Connection conn) throws SQLException {
+        System.out.println("### testDecimalTypes");
+        ResultSet rs = conn.prepareStatement("SELECT * FROM ps_decimal_types").executeQuery();
+        int rowNum = 1;
+        while (rs.next()) {
+            System.out.printf("Row #%d
", rowNum++);
+            System.out.printf("%s, value: %s
", getMysqlType(rs, "d32"), rs.getBigDecimal("d32").toPlainString());
+            System.out.printf("%s, value: %s
", getMysqlType(rs, "d64"), rs.getBigDecimal("d64").toPlainString());
+            System.out.printf("%s, value: %s
", getMysqlType(rs, "d128_native"),
+                    rs.getBigDecimal("d128_native").toPlainString());
+            System.out.printf("%s, value: %s
", getMysqlType(rs, "d128_text"), rs.getString("d128_text"));
+            System.out.printf("%s, value: %s
", getMysqlType(rs, "d256"), rs.getString("d256"));
+        }
+        System.out.println();
+    }
+
+    private static void testDateTypes(Connection conn) throws SQLException {
+        System.out.println("### testDateTypes");
+        ResultSet rs = conn.prepareStatement("SELECT * FROM ps_date_types").executeQuery();
+        int rowNum = 1;
+        while (rs.next()) {
+            System.out.printf("Row #%d
", rowNum++);
+            System.out.printf("%s, value: %s
", getMysqlType(rs, "d"), rs.getDate("d"));
+            System.out.printf("%s, value: %s
", getMysqlType(rs, "d32"), rs.getDate("d32"));
+            System.out.printf("%s, value: %s
", getMysqlType(rs, "dt"), rs.getTimestamp("dt"));
+            System.out.printf("%s, value: %s
", getMysqlType(rs, "dt64_3"), rs.getTimestamp("dt64_3"));
+            System.out.printf("%s, value: %s
", getMysqlType(rs, "dt64_6"), rs.getTimestamp("dt64_6"));
+            System.out.printf("%s, value: %s
", getMysqlType(rs, "dt64_9"), rs.getTimestamp("dt64_9"));
+        }
+        System.out.println();
+    }
+
+    private static void testUnusualDateTime64Scales(Connection conn) throws SQLException {
+        System.out.println("### testUnusualDateTime64Scales");
+        ResultSet rs = conn.prepareStatement("SELECT * FROM ps_unusual_datetime64_scales").executeQuery();
+        int rowNum = 1;
+        while (rs.next()) {
+            System.out.printf("Row #%d
", rowNum++);
+            System.out.printf("%s, value: %s
", getMysqlType(rs, "dt64_0"), rs.getTimestamp("dt64_0"));
+            System.out.printf("%s, value: %s
", getMysqlType(rs, "dt64_1"), rs.getTimestamp("dt64_1"));
+            System.out.printf("%s, value: %s
", getMysqlType(rs, "dt64_2"), rs.getTimestamp("dt64_2"));
+            System.out.printf("%s, value: %s
", getMysqlType(rs, "dt64_4"), rs.getTimestamp("dt64_4"));
+            System.out.printf("%s, value: %s
", getMysqlType(rs, "dt64_5"), rs.getTimestamp("dt64_5"));
+            System.out.printf("%s, value: %s
", getMysqlType(rs, "dt64_7"), rs.getTimestamp("dt64_7"));
+            System.out.printf("%s, value: %s
", getMysqlType(rs, "dt64_8"), rs.getTimestamp("dt64_8"));
+        }
+        System.out.println();
+    }
+
+    private static void testDateTimeTimezones(Connection conn) throws SQLException {
+        System.out.println("### testDateTimeTimezones");
+        ResultSet rs = conn.prepareStatement("SELECT * FROM ps_datetime_timezones").executeQuery();
+        int rowNum = 1;
+        while (rs.next()) {
+            System.out.printf("Row #%d
", rowNum++);
+            System.out.printf("%s, value: %s
", getMysqlType(rs, "dt"), rs.getTimestamp("dt"));
+            System.out.printf("%s, value: %s
", getMysqlType(rs, "dt64_3"), rs.getTimestamp("dt64_3"));
+        }
+        System.out.println();
+    }
+
+    private static void testMiscTypes(Connection conn) throws SQLException {
+        System.out.println("### testMiscTypes");
+        ResultSet rs = conn.prepareStatement("SELECT * FROM ps_misc_types").executeQuery();
+        int rowNum = 1;
+        while (rs.next()) {
+            System.out.printf("Row #%d
", rowNum++);
+            System.out.printf("%s, value: %s
", getMysqlType(rs, "a"), rs.getString("a"));
+            System.out.printf("%s, value: %s
", getMysqlType(rs, "u"), rs.getString("u"));
+            System.out.printf("%s, value: %s
", getMysqlType(rs, "t"), rs.getString("t"));
+            System.out.printf("%s, value: %s
", getMysqlType(rs, "m"), rs.getString("m"));
+        }
+        System.out.println();
+    }
+
+    private static String getMysqlType(ResultSet rs, String columnLabel) throws SQLException {
+        ResultSetMetaData meta = rs.getMetaData();
+        return String.format("%s type is %s", columnLabel,
+                MysqlType.getByJdbcType(meta.getColumnType(rs.findColumn(columnLabel))));
+    }
+
+}
diff --git a/docker/test/integration/mysql_java_client/Test.java b/docker/test/integration/mysql_java_client/Test.java
index 2e256d5dc446..752441718a98 100644
--- a/docker/test/integration/mysql_java_client/Test.java
+++ b/docker/test/integration/mysql_java_client/Test.java
@@ -46,6 +46,7 @@ public static void main(String[] args) {
         Connection conn = null;
         Statement stmt = null;
         try {
+            Class.forName("com.mysql.cj.jdbc.Driver");
             conn = DriverManager.getConnection(jdbcUrl, user, password);
             stmt = conn.createStatement();
             stmt.executeUpdate(CREATE_TABLE_SQL);
@@ -69,7 +70,7 @@ public static void main(String[] args) {
 
             stmt.close();
             conn.close();
-        } catch (SQLException e) {
+        } catch (Exception e) {
             e.printStackTrace();
             System.exit(1);
         }
diff --git a/docker/test/integration/runner/compose/docker_compose_mysql_java_client.yml b/docker/test/integration/runner/compose/docker_compose_mysql_java_client.yml
index eb5ffb01baa2..529974dd4bfe 100644
--- a/docker/test/integration/runner/compose/docker_compose_mysql_java_client.yml
+++ b/docker/test/integration/runner/compose/docker_compose_mysql_java_client.yml
@@ -3,4 +3,4 @@ services:
   java1:
     image: clickhouse/mysql-java-client:${DOCKER_MYSQL_JAVA_CLIENT_TAG:-latest}
     # to keep container running
-    command: sleep infinity
+    command: sleep 1d
diff --git a/tests/integration/test_mysql_protocol/prepared_statements.reference b/tests/integration/test_mysql_protocol/prepared_statements.reference
new file mode 100644
index 000000000000..2cb6e7f53396
--- /dev/null
+++ b/tests/integration/test_mysql_protocol/prepared_statements.reference
@@ -0,0 +1,119 @@
+### testSimpleDataTypes
+Row #1
+i8 type is TINYINT, value: -128
+i16 type is SMALLINT, value: -32768
+i32 type is INT, value: -2147483648
+i64 type is BIGINT, value: -9223372036854775808
+i128 type is CHAR, value: -170141183460469231731687303715884105728
+i256 type is CHAR, value: -57896044618658097711785492504343953926634992332820282019728792003956564819968
+ui8 type is TINYINT, value: 120
+ui16 type is SMALLINT, value: 1234
+ui32 type is INT, value: 51234
+ui64 type is BIGINT, value: 421342
+ui128 type is CHAR, value: 15324355
+ui256 type is CHAR, value: 41345135123432
+f32 type is FLOAT, value: -0.796896
+f64 type is DOUBLE, value: -0.113259
+b type is BIT, value: true
+Row #2
+i8 type is TINYINT, value: 127
+i16 type is SMALLINT, value: 32767
+i32 type is INT, value: 2147483647
+i64 type is BIGINT, value: 9223372036854775807
+i128 type is CHAR, value: 170141183460469231731687303715884105727
+i256 type is CHAR, value: 57896044618658097711785492504343953926634992332820282019728792003956564819967
+ui8 type is TINYINT, value: 255
+ui16 type is SMALLINT, value: 65535
+ui32 type is INT, value: 4294967295
+ui64 type is BIGINT, value: 18446744073709551615
+ui128 type is CHAR, value: 340282366920938463463374607431768211455
+ui256 type is CHAR, value: 115792089237316195423570985008687907853269984665640564039457584007913129639935
+f32 type is FLOAT, value: 1.234000
+f64 type is DOUBLE, value: 3.352451
+b type is BIT, value: false
+
+### testStringTypes
+Row #1
+s type is CHAR, value: 42
+sn type is CHAR, value: ᴺᵁᴸᴸ
+lc type is CHAR, value: test
+nlc type is CHAR, value: ᴺᵁᴸᴸ
+Row #2
+s type is CHAR, value: foo
+sn type is CHAR, value: bar
+lc type is CHAR, value: qaz
+nlc type is CHAR, value: qux
+
+### testLowCardinalityAndNullableTypes
+Row #1
+ilc type is INT, value: -54
+dlc type is DATE, value: 1970-01-01
+ni type is INT, value: 144
+Row #2
+ilc type is INT, value: 42
+dlc type is DATE, value: 2011-02-05
+ni type is INT, value: 0
+
+### testDecimalTypes
+Row #1
+d32 type is DECIMAL, value: -1.55
+d64 type is DECIMAL, value: 6.03
+d128_native type is DECIMAL, value: 5
+d128_text type is CHAR, value: -1224124.23423
+d256 type is CHAR, value: -54342.3
+Row #2
+d32 type is DECIMAL, value: 1234567.89
+d64 type is DECIMAL, value: 123456789123456.789
+d128_native type is DECIMAL, value: 12345678912345678912.1234567891
+d128_text type is CHAR, value: 1234567.8912345678912345678911234567891
+d256 type is CHAR, value: 12345678912345678912345678911234567891234567891234567891.12345678911234567891
+
+### testMiscTypes
+Row #1
+a type is CHAR, value: ['foo','bar']
+u type is CHAR, value: 5da5038d-788f-48c6-b510-babb41c538d3
+t type is CHAR, value: (42,'qaz')
+m type is CHAR, value: {'qux':144,'text':255}
+
+### testDateTypes
+Row #1
+d type is DATE, value: 1970-01-01
+d32 type is DATE, value: 1900-01-01
+dt type is TIMESTAMP, value: 1970-01-01 00:00:00.0
+dt64_3 type is TIMESTAMP, value: 1900-01-01 00:00:00.001
+dt64_6 type is TIMESTAMP, value: 1900-01-01 00:00:00.000001
+dt64_9 type is TIMESTAMP, value: 1900-01-01 00:00:00.0
+Row #2
+d type is DATE, value: 2149-06-06
+d32 type is DATE, value: 2178-04-16
+dt type is TIMESTAMP, value: 2106-02-07 06:28:15.0
+dt64_3 type is TIMESTAMP, value: 2106-02-07 06:28:15.123
+dt64_6 type is TIMESTAMP, value: 2106-02-07 06:28:15.123456
+dt64_9 type is TIMESTAMP, value: 2106-02-07 06:28:15.123456
+
+### testUnusualDateTime64Scales
+Row #1
+dt64_0 type is TIMESTAMP, value: 2022-04-13 03:17:45.0
+dt64_1 type is TIMESTAMP, value: 2022-04-13 03:17:45.1
+dt64_2 type is TIMESTAMP, value: 2022-04-13 03:17:45.12
+dt64_4 type is TIMESTAMP, value: 2022-04-13 03:17:45.1234
+dt64_5 type is TIMESTAMP, value: 2022-04-13 03:17:45.12345
+dt64_7 type is TIMESTAMP, value: 2022-04-13 03:17:45.123456
+dt64_8 type is TIMESTAMP, value: 2022-04-13 03:17:45.123456
+Row #2
+dt64_0 type is TIMESTAMP, value: 2022-04-13 03:17:45.0
+dt64_1 type is TIMESTAMP, value: 2022-04-13 03:17:45.1
+dt64_2 type is TIMESTAMP, value: 2022-04-13 03:17:45.01
+dt64_4 type is TIMESTAMP, value: 2022-04-13 03:17:45.0001
+dt64_5 type is TIMESTAMP, value: 2022-04-13 03:17:45.00001
+dt64_7 type is TIMESTAMP, value: 2022-04-13 03:17:45.0
+dt64_8 type is TIMESTAMP, value: 2022-04-13 03:17:45.0
+
+### testDateTimeTimezones
+Row #1
+dt type is TIMESTAMP, value: 1970-01-01 01:00:00.0
+dt64_3 type is TIMESTAMP, value: 1969-12-31 16:00:00.0
+Row #2
+dt type is TIMESTAMP, value: 2022-09-04 20:31:05.0
+dt64_3 type is TIMESTAMP, value: 2022-09-04 20:31:05.022
+
diff --git a/tests/integration/test_mysql_protocol/prepared_statements_test.sql b/tests/integration/test_mysql_protocol/prepared_statements_test.sql
new file mode 100644
index 000000000000..b9dd16db1ed9
--- /dev/null
+++ b/tests/integration/test_mysql_protocol/prepared_statements_test.sql
@@ -0,0 +1,137 @@
+CREATE OR REPLACE TABLE ps_simple_data_types
+(
+    i8    Int8,
+    i16   Int16,
+    i32   Int32,
+    i64   Int64,
+    i128  Int128,
+    i256  Int256,
+    ui8   UInt8,
+    ui16  UInt16,
+    ui32  UInt32,
+    ui64  UInt64,
+    ui128 UInt128,
+    ui256 UInt256,
+    f32   Float32,
+    f64   Float64,
+    b     Boolean
+) ENGINE MergeTree ORDER BY i8;
+
+INSERT INTO ps_simple_data_types
+VALUES (127, 32767, 2147483647, 9223372036854775807, 170141183460469231731687303715884105727,
+        57896044618658097711785492504343953926634992332820282019728792003956564819967,
+        255, 65535, 4294967295, 18446744073709551615, 340282366920938463463374607431768211455,
+        115792089237316195423570985008687907853269984665640564039457584007913129639935,
+        1.234, 3.35245141223232, FALSE),
+       (-128, -32768, -2147483648, -9223372036854775808, -170141183460469231731687303715884105728,
+        -57896044618658097711785492504343953926634992332820282019728792003956564819968,
+        120, 1234, 51234, 421342, 15324355, 41345135123432,
+        -0.7968956, -0.113259, TRUE);
+
+CREATE OR REPLACE TABLE ps_string_types
+(
+    s   String,
+    sn  Nullable(String),
+    lc  LowCardinality(String),
+    nlc LowCardinality(Nullable(String))
+) ENGINE MergeTree ORDER BY s;
+
+INSERT INTO ps_string_types
+VALUES ('foo', 'bar', 'qaz', 'qux'),
+       ('42', NULL, 'test', NULL);
+
+CREATE OR REPLACE TABLE ps_low_cardinality_and_nullable_types
+(
+    ilc LowCardinality(Int32),
+    dlc LowCardinality(Date),
+    ni  Nullable(Int32)
+) ENGINE MergeTree ORDER BY ilc;
+
+INSERT INTO ps_low_cardinality_and_nullable_types
+VALUES (42, '2011-02-05', NULL),
+       (-54, '1970-01-01', 144);
+
+CREATE OR REPLACE TABLE ps_decimal_types
+(
+    d32         Decimal(9, 2),
+    d64         Decimal(18, 3),
+    d128_native Decimal(30, 10),
+    d128_text   Decimal(38, 31),
+    d256        Decimal(76, 20)
+) ENGINE MergeTree ORDER BY d32;
+
+INSERT INTO ps_decimal_types
+VALUES (1234567.89,
+        123456789123456.789,
+        12345678912345678912.1234567891,
+        1234567.8912345678912345678911234567891,
+        12345678912345678912345678911234567891234567891234567891.12345678911234567891),
+       (-1.55, 6.03, 5, -1224124.23423, -54342.3);
+
+CREATE OR REPLACE TABLE ps_misc_types
+(
+    a Array(String),
+    u UUID,
+    t Tuple(Int32, String),
+    m Map(String, Int32)
+) ENGINE MergeTree ORDER BY u;
+
+INSERT INTO ps_misc_types
+VALUES (['foo', 'bar'], '5da5038d-788f-48c6-b510-babb41c538d3', (42, 'qaz'), {'qux': 144, 'text': 255});
+
+CREATE OR REPLACE TABLE ps_date_types
+(
+    d      Date,
+    d32    Date32,
+    dt     DateTime('UTC'),
+    dt64_3 DateTime64(3, 'UTC'),
+    dt64_6 DateTime64(6, 'UTC'),
+    dt64_9 DateTime64(9, 'UTC')
+) ENGINE MergeTree ORDER BY d;
+
+INSERT INTO ps_date_types
+VALUES ('2149-06-06', '2178-04-16', '2106-02-07 06:28:15',
+        '2106-02-07 06:28:15.123',
+        '2106-02-07 06:28:15.123456',
+        '2106-02-07 06:28:15.123456789'),
+        ('1970-01-01', '1900-01-01', '1970-01-01 00:00:00',
+        '1900-01-01 00:00:00.001',
+        '1900-01-01 00:00:00.000001',
+        '1900-01-01 00:00:00.000000001');;
+
+CREATE OR REPLACE TABLE ps_unusual_datetime64_scales
+(
+    dt64_0 DateTime64(0, 'UTC'),
+    dt64_1 DateTime64(1, 'UTC'),
+    dt64_2 DateTime64(2, 'UTC'),
+    dt64_4 DateTime64(4, 'UTC'),
+    dt64_5 DateTime64(5, 'UTC'),
+    dt64_7 DateTime64(7, 'UTC'),
+    dt64_8 DateTime64(8, 'UTC')
+) ENGINE MergeTree ORDER BY dt64_0;
+
+INSERT INTO ps_unusual_datetime64_scales
+VALUES ('2022-04-13 03:17:45',
+        '2022-04-13 03:17:45.1',
+        '2022-04-13 03:17:45.12',
+        '2022-04-13 03:17:45.1234',
+        '2022-04-13 03:17:45.12345',
+        '2022-04-13 03:17:45.1234567',
+        '2022-04-13 03:17:45.12345678'),
+        ('2022-04-13 03:17:45',
+        '2022-04-13 03:17:45.1',
+        '2022-04-13 03:17:45.01',
+        '2022-04-13 03:17:45.0001',
+        '2022-04-13 03:17:45.00001',
+        '2022-04-13 03:17:45.0000001',
+        '2022-04-13 03:17:45.00000001');
+
+CREATE OR REPLACE TABLE ps_datetime_timezones
+(
+    dt     DateTime('Europe/Amsterdam'),
+    dt64_3 DateTime64(3, 'Asia/Shanghai')
+) ENGINE MergeTree ORDER BY dt;
+
+INSERT INTO ps_datetime_timezones
+VALUES ('2022-09-04 20:31:05', '2022-09-04 20:31:05.022'),
+       ('1970-01-01 01:00:00', '1969-12-31 16:00:00');
diff --git a/tests/integration/test_mysql_protocol/test.py b/tests/integration/test_mysql_protocol/test.py
index 606533a025ab..59e1565337bf 100644
--- a/tests/integration/test_mysql_protocol/test.py
+++ b/tests/integration/test_mysql_protocol/test.py
@@ -10,7 +10,6 @@
 import docker
 import pymysql.connections
 import pytest
-from docker.models.containers import Container
 from helpers.cluster import ClickHouseCluster, get_docker_compose_path, run_and_check
 
 SCRIPT_DIR = os.path.dirname(os.path.realpath(__file__))
@@ -150,7 +149,6 @@ def java_container():
 
 
 def test_mysql_client(started_cluster):
-    # type: (ClickHouseCluster) -> None
     code, (stdout, stderr) = started_cluster.mysql_client_container.exec_run(
         """
         mysql --protocol tcp -h {host} -P {port} default -u user_with_double_sha1 --password=abacaba
@@ -651,7 +649,6 @@ def test_python_client(started_cluster):
 
 
 def test_golang_client(started_cluster, golang_container):
-    # type: (str, Container) -> None
     with open(os.path.join(SCRIPT_DIR, "golang.reference"), "rb") as fp:
         reference = fp.read()
 
@@ -687,7 +684,6 @@ def test_golang_client(started_cluster, golang_container):
 
 
 def test_php_client(started_cluster, php_container):
-    # type: (str, Container) -> None
     code, (stdout, stderr) = php_container.exec_run(
         "php -f test.php {host} {port} default 123".format(
             host=started_cluster.get_instance_ip("node"), port=server_port
@@ -764,7 +760,6 @@ def test_mysqljs_client(started_cluster, nodejs_container):
 
 
 def test_java_client(started_cluster, java_container):
-    # type: (str, Container) -> None
     with open(os.path.join(SCRIPT_DIR, "java.reference")) as fp:
         reference = fp.read()
 
@@ -810,6 +805,35 @@ def test_java_client(started_cluster, java_container):
     assert stdout.decode() == reference
 
 
+def test_prepared_statements(started_cluster, java_container):
+    with open(os.path.join(SCRIPT_DIR, "prepared_statements.reference")) as fp:
+        reference = fp.read()
+
+    with open(os.path.join(SCRIPT_DIR, "prepared_statements_test.sql")) as sql:
+        statements = list(
+            filter(
+                lambda s: s != "",
+                map(lambda s: s.strip().replace("
", " "), sql.read().split(";")),
+            )
+        )
+
+    for statement in statements:
+        node.query(
+            statement,
+            settings={"password": "123", "allow_suspicious_low_cardinality_types": 1},
+        )
+
+    code, (stdout, stderr) = java_container.exec_run(
+        "java PreparedStatementsTest --host {host} --port {port} --user user_with_double_sha1 --password abacaba  --database "
+        "default".format(
+            host=started_cluster.get_instance_ip("node"), port=server_port
+        ),
+        demux=True,
+    )
+    assert code == 0
+    assert stdout.decode() == reference
+
+
 def test_types(started_cluster):
     client = pymysql.connections.Connection(
         host=started_cluster.get_instance_ip("node"),
diff --git a/tests/queries/0_stateless/02706_show_columns.reference b/tests/queries/0_stateless/02706_show_columns.reference
index 9d7e8485e194..29e5329d63d3 100644
--- a/tests/queries/0_stateless/02706_show_columns.reference
+++ b/tests/queries/0_stateless/02706_show_columns.reference
@@ -1,47 +1,47 @@
 --- Aliases of SHOW COLUMNS
-int32	Nullable(Int32)	1		\N	
-str	String	0	SOR	\N	
-uint64	UInt64	0	PRI SOR	\N	
-int32	Nullable(Int32)	1		\N	
-str	String	0	SOR	\N	
-uint64	UInt64	0	PRI SOR	\N	
+int32	Nullable(Int32)	YES		\N	
+str	String	NO	SOR	\N	
+uint64	UInt64	NO	PRI SOR	\N	
+int32	Nullable(Int32)	YES		\N	
+str	String	NO	SOR	\N	
+uint64	UInt64	NO	PRI SOR	\N	
 --- EXTENDED
-int32	Nullable(Int32)	1		\N	
-str	String	0	SOR	\N	
-uint64	UInt64	0	PRI SOR	\N	
+int32	Nullable(Int32)	YES		\N	
+str	String	NO	SOR	\N	
+uint64	UInt64	NO	PRI SOR	\N	
 --- FULL
-int32	Nullable(Int32)	1		\N		\N	example comment	
-str	String	0	SOR	\N		\N		
-uint64	UInt64	0	PRI SOR	\N		\N		
+int32	Nullable(Int32)	YES		\N		\N	example comment	
+str	String	NO	SOR	\N		\N		
+uint64	UInt64	NO	PRI SOR	\N		\N		
 --- LIKE
-int32	Nullable(Int32)	1		\N	
-uint64	UInt64	0	PRI SOR	\N	
+int32	Nullable(Int32)	YES		\N	
+uint64	UInt64	NO	PRI SOR	\N	
 --- NOT LIKE
-str	String	0	SOR	\N	
+str	String	NO	SOR	\N	
 --- ILIKE
-int32	Nullable(Int32)	1		\N	
-uint64	UInt64	0	PRI SOR	\N	
+int32	Nullable(Int32)	YES		\N	
+uint64	UInt64	NO	PRI SOR	\N	
 --- NOT ILIKE
-str	String	0	SOR	\N	
+str	String	NO	SOR	\N	
 --- WHERE
-int32	Nullable(Int32)	1		\N	
-uint64	UInt64	0	PRI SOR	\N	
+int32	Nullable(Int32)	YES		\N	
+uint64	UInt64	NO	PRI SOR	\N	
 --- LIMIT
-int32	Nullable(Int32)	1		\N	
+int32	Nullable(Int32)	YES		\N	
 --- Check with weird table names
-c	String	0	PRI SOR	\N	
-c	String	0	PRI SOR	\N	
-c	String	0	PRI SOR	\N	
-c	String	0	PRI SOR	\N	
+c	String	NO	PRI SOR	\N	
+c	String	NO	PRI SOR	\N	
+c	String	NO	PRI SOR	\N	
+c	String	NO	PRI SOR	\N	
 --- Original table
-int32	Nullable(Int32)	1		\N	
-str	String	0	SOR	\N	
-uint64	UInt64	0	PRI SOR	\N	
+int32	Nullable(Int32)	YES		\N	
+str	String	NO	SOR	\N	
+uint64	UInt64	NO	PRI SOR	\N	
 --- Equally named table in other database
-int32	Int32	0		\N	
-str	String	0		\N	
-uint64	UInt64	0	PRI SOR	\N	
+int32	Int32	NO		\N	
+str	String	NO		\N	
+uint64	UInt64	NO	PRI SOR	\N	
 --- Short form
-int32	Int32	0		\N	
-str	String	0		\N	
-uint64	UInt64	0	PRI SOR	\N	
+int32	Int32	NO		\N	
+str	String	NO		\N	
+uint64	UInt64	NO	PRI SOR	\N	
diff --git a/tests/queries/0_stateless/02775_show_columns_mysql_compatibility.reference b/tests/queries/0_stateless/02775_show_columns_mysql_compatibility.reference
index 68e7be9ae6f5..84e1cdd2f04c 100644
--- a/tests/queries/0_stateless/02775_show_columns_mysql_compatibility.reference
+++ b/tests/queries/0_stateless/02775_show_columns_mysql_compatibility.reference
@@ -4,363 +4,363 @@ Create pseudo-random database name
 Create tab duplicate table
 Run MySQL test
 field	type	null	key	default	extra
-aggregate_function	AggregateFunction(sum, Int32)	0		NULL	
-array_value	Array(Int32)	0		NULL	
-boolean_value	UInt8	0		NULL	
-date32_value	Date32	0		NULL	
-date_value	Date	0		NULL	
-datetime64_value	DateTime64(3)	0		NULL	
-datetime_value	DateTime	0		NULL	
-decimal_value	Decimal(10, 2)	0		NULL	
-enum_value	Enum8('apple' = 1, 'banana' = 2, 'orange' = 3)	0		NULL	
-fixed_string_value	FixedString(10)	0		NULL	
-float32	Float32	0		NULL	
-float64	Float64	0		NULL	
-int128	Int128	0		NULL	
-int16	Int16	0		NULL	
-int256	Int256	0		NULL	
-int32	Int32	0		NULL	
-int64	Int64	0		NULL	
-int8	Int8	0		NULL	
-ipv4_value	IPv4	0		NULL	
-ipv6_value	IPv6	0		NULL	
-json_value	Object('json')	0		NULL	
-low_cardinality	LowCardinality(String)	0		NULL	
-low_cardinality_date	LowCardinality(DateTime)	0		NULL	
-map_value	Map(String, Int32)	0		NULL	
-nested.nested_int	Array(Int32)	0		NULL	
-nested.nested_string	Array(String)	0		NULL	
-nint32	Nullable(Int32)	1		NULL	
-nullable_value	Nullable(Int32)	1		NULL	
-string_value	String	0		NULL	
-tuple_value	Tuple(Int32, String)	0		NULL	
-uint128	UInt128	0		NULL	
-uint16	UInt16	0		NULL	
-uint256	UInt256	0		NULL	
-uint32	UInt32	0		NULL	
-uint64	UInt64	0	PRI SOR	NULL	
-uint8	UInt8	0		NULL	
-uuid_value	UUID	0		NULL	
+aggregate_function	AggregateFunction(sum, Int32)	NO		NULL	
+array_value	Array(Int32)	NO		NULL	
+boolean_value	UInt8	NO		NULL	
+date32_value	Date32	NO		NULL	
+date_value	Date	NO		NULL	
+datetime64_value	DateTime64(3)	NO		NULL	
+datetime_value	DateTime	NO		NULL	
+decimal_value	Decimal(10, 2)	NO		NULL	
+enum_value	Enum8('apple' = 1, 'banana' = 2, 'orange' = 3)	NO		NULL	
+fixed_string_value	FixedString(10)	NO		NULL	
+float32	Float32	NO		NULL	
+float64	Float64	NO		NULL	
+int128	Int128	NO		NULL	
+int16	Int16	NO		NULL	
+int256	Int256	NO		NULL	
+int32	Int32	NO		NULL	
+int64	Int64	NO		NULL	
+int8	Int8	NO		NULL	
+ipv4_value	IPv4	NO		NULL	
+ipv6_value	IPv6	NO		NULL	
+json_value	Object('json')	NO		NULL	
+low_cardinality	LowCardinality(String)	NO		NULL	
+low_cardinality_date	LowCardinality(DateTime)	NO		NULL	
+map_value	Map(String, Int32)	NO		NULL	
+nested.nested_int	Array(Int32)	NO		NULL	
+nested.nested_string	Array(String)	NO		NULL	
+nint32	Nullable(Int32)	YES		NULL	
+nullable_value	Nullable(Int32)	YES		NULL	
+string_value	String	NO		NULL	
+tuple_value	Tuple(Int32, String)	NO		NULL	
+uint128	UInt128	NO		NULL	
+uint16	UInt16	NO		NULL	
+uint256	UInt256	NO		NULL	
+uint32	UInt32	NO		NULL	
+uint64	UInt64	NO	PRI SOR	NULL	
+uint8	UInt8	NO		NULL	
+uuid_value	UUID	NO		NULL	
 field	type	null	key	default	extra
-aggregate_function	TEXT	0		NULL	
-array_value	TEXT	0		NULL	
-boolean_value	TINYINT UNSIGNED	0		NULL	
-date32_value	DATE	0		NULL	
-date_value	DATE	0		NULL	
-datetime64_value	DATETIME	0		NULL	
-datetime_value	DATETIME	0		NULL	
-decimal_value	DECIMAL(10, 2)	0		NULL	
-enum_value	ENUM('apple', 'banana', 'orange')	0		NULL	
-fixed_string_value	TEXT	0		NULL	
-float32	FLOAT	0		NULL	
-float64	DOUBLE	0		NULL	
-int128	TEXT	0		NULL	
-int16	SMALLINT	0		NULL	
-int256	TEXT	0		NULL	
-int32	INTEGER	0		NULL	
-int64	BIGINT	0		NULL	
-int8	TINYINT	0		NULL	
-ipv4_value	TEXT	0		NULL	
-ipv6_value	TEXT	0		NULL	
-json_value	JSON	0		NULL	
-low_cardinality	BLOB	0		NULL	
-low_cardinality_date	DATETIME	0		NULL	
-map_value	JSON	0		NULL	
-nested.nested_int	TEXT	0		NULL	
-nested.nested_string	TEXT	0		NULL	
-nint32	INTEGER	0		NULL	
-nullable_value	INTEGER	0		NULL	
-string_value	BLOB	0		NULL	
-tuple_value	JSON	0		NULL	
-uint128	TEXT	0		NULL	
-uint16	SMALLINT UNSIGNED	0		NULL	
-uint256	TEXT	0		NULL	
-uint32	INTEGER UNSIGNED	0		NULL	
-uint64	BIGINT UNSIGNED	0	PRI SOR	NULL	
-uint8	TINYINT UNSIGNED	0		NULL	
-uuid_value	CHAR	0		NULL	
+aggregate_function	TEXT	NO		NULL	
+array_value	TEXT	NO		NULL	
+boolean_value	TINYINT UNSIGNED	NO		NULL	
+date32_value	DATE	NO		NULL	
+date_value	DATE	NO		NULL	
+datetime64_value	DATETIME	NO		NULL	
+datetime_value	DATETIME	NO		NULL	
+decimal_value	DECIMAL(10, 2)	NO		NULL	
+enum_value	ENUM('apple', 'banana', 'orange')	NO		NULL	
+fixed_string_value	TEXT	NO		NULL	
+float32	FLOAT	NO		NULL	
+float64	DOUBLE	NO		NULL	
+int128	TEXT	NO		NULL	
+int16	SMALLINT	NO		NULL	
+int256	TEXT	NO		NULL	
+int32	INTEGER	NO		NULL	
+int64	BIGINT	NO		NULL	
+int8	TINYINT	NO		NULL	
+ipv4_value	TEXT	NO		NULL	
+ipv6_value	TEXT	NO		NULL	
+json_value	JSON	NO		NULL	
+low_cardinality	BLOB	NO		NULL	
+low_cardinality_date	DATETIME	NO		NULL	
+map_value	JSON	NO		NULL	
+nested.nested_int	TEXT	NO		NULL	
+nested.nested_string	TEXT	NO		NULL	
+nint32	INTEGER	NO		NULL	
+nullable_value	INTEGER	NO		NULL	
+string_value	BLOB	NO		NULL	
+tuple_value	JSON	NO		NULL	
+uint128	TEXT	NO		NULL	
+uint16	SMALLINT UNSIGNED	NO		NULL	
+uint256	TEXT	NO		NULL	
+uint32	INTEGER UNSIGNED	NO		NULL	
+uint64	BIGINT UNSIGNED	NO	PRI SOR	NULL	
+uint8	TINYINT UNSIGNED	NO		NULL	
+uuid_value	CHAR	NO		NULL	
 field	type	null	key	default	extra
-aggregate_function	TEXT	0		NULL	
-array_value	TEXT	0		NULL	
-boolean_value	TINYINT UNSIGNED	0		NULL	
-date32_value	DATE	0		NULL	
-date_value	DATE	0		NULL	
-datetime64_value	DATETIME	0		NULL	
-datetime_value	DATETIME	0		NULL	
-decimal_value	DECIMAL(10, 2)	0		NULL	
-enum_value	ENUM('apple', 'banana', 'orange')	0		NULL	
-fixed_string_value	TEXT	0		NULL	
-float32	FLOAT	0		NULL	
-float64	DOUBLE	0		NULL	
-int128	TEXT	0		NULL	
-int16	SMALLINT	0		NULL	
-int256	TEXT	0		NULL	
-int32	INTEGER	0		NULL	
-int64	BIGINT	0		NULL	
-int8	TINYINT	0		NULL	
-ipv4_value	TEXT	0		NULL	
-ipv6_value	TEXT	0		NULL	
-json_value	JSON	0		NULL	
-low_cardinality	BLOB	0		NULL	
-low_cardinality_date	DATETIME	0		NULL	
-map_value	JSON	0		NULL	
-nested.nested_int	TEXT	0		NULL	
-nested.nested_string	TEXT	0		NULL	
-nint32	INTEGER	0		NULL	
-nullable_value	INTEGER	0		NULL	
-string_value	BLOB	0		NULL	
-tuple_value	JSON	0		NULL	
-uint128	TEXT	0		NULL	
-uint16	SMALLINT UNSIGNED	0		NULL	
-uint256	TEXT	0		NULL	
-uint32	INTEGER UNSIGNED	0		NULL	
-uint64	BIGINT UNSIGNED	0	PRI SOR	NULL	
-uint8	TINYINT UNSIGNED	0		NULL	
-uuid_value	CHAR	0		NULL	
+aggregate_function	TEXT	NO		NULL	
+array_value	TEXT	NO		NULL	
+boolean_value	TINYINT UNSIGNED	NO		NULL	
+date32_value	DATE	NO		NULL	
+date_value	DATE	NO		NULL	
+datetime64_value	DATETIME	NO		NULL	
+datetime_value	DATETIME	NO		NULL	
+decimal_value	DECIMAL(10, 2)	NO		NULL	
+enum_value	ENUM('apple', 'banana', 'orange')	NO		NULL	
+fixed_string_value	TEXT	NO		NULL	
+float32	FLOAT	NO		NULL	
+float64	DOUBLE	NO		NULL	
+int128	TEXT	NO		NULL	
+int16	SMALLINT	NO		NULL	
+int256	TEXT	NO		NULL	
+int32	INTEGER	NO		NULL	
+int64	BIGINT	NO		NULL	
+int8	TINYINT	NO		NULL	
+ipv4_value	TEXT	NO		NULL	
+ipv6_value	TEXT	NO		NULL	
+json_value	JSON	NO		NULL	
+low_cardinality	BLOB	NO		NULL	
+low_cardinality_date	DATETIME	NO		NULL	
+map_value	JSON	NO		NULL	
+nested.nested_int	TEXT	NO		NULL	
+nested.nested_string	TEXT	NO		NULL	
+nint32	INTEGER	NO		NULL	
+nullable_value	INTEGER	NO		NULL	
+string_value	BLOB	NO		NULL	
+tuple_value	JSON	NO		NULL	
+uint128	TEXT	NO		NULL	
+uint16	SMALLINT UNSIGNED	NO		NULL	
+uint256	TEXT	NO		NULL	
+uint32	INTEGER UNSIGNED	NO		NULL	
+uint64	BIGINT UNSIGNED	NO	PRI SOR	NULL	
+uint8	TINYINT UNSIGNED	NO		NULL	
+uuid_value	CHAR	NO		NULL	
 field	type	null	key	default	extra	collation	comment	privileges
-aggregate_function	TEXT	0		NULL		NULL		
-array_value	TEXT	0		NULL		NULL		
-boolean_value	TINYINT UNSIGNED	0		NULL		NULL		
-date32_value	DATE	0		NULL		NULL		
-date_value	DATE	0		NULL		NULL		
-datetime64_value	DATETIME	0		NULL		NULL		
-datetime_value	DATETIME	0		NULL		NULL		
-decimal_value	DECIMAL(10, 2)	0		NULL		NULL		
-enum_value	ENUM('apple', 'banana', 'orange')	0		NULL		NULL		
-fixed_string_value	TEXT	0		NULL		NULL		
-float32	FLOAT	0		NULL		NULL		
-float64	DOUBLE	0		NULL		NULL		
-int128	TEXT	0		NULL		NULL		
-int16	SMALLINT	0		NULL		NULL		
-int256	TEXT	0		NULL		NULL		
-int32	INTEGER	0		NULL		NULL		
-int64	BIGINT	0		NULL		NULL		
-int8	TINYINT	0		NULL		NULL		
-ipv4_value	TEXT	0		NULL		NULL		
-ipv6_value	TEXT	0		NULL		NULL		
-json_value	JSON	0		NULL		NULL		
-low_cardinality	BLOB	0		NULL		NULL		
-low_cardinality_date	DATETIME	0		NULL		NULL		
-map_value	JSON	0		NULL		NULL		
-nested.nested_int	TEXT	0		NULL		NULL		
-nested.nested_string	TEXT	0		NULL		NULL		
-nint32	INTEGER	0		NULL		NULL		
-nullable_value	INTEGER	0		NULL		NULL		
-string_value	BLOB	0		NULL		NULL		
-tuple_value	JSON	0		NULL		NULL		
-uint128	TEXT	0		NULL		NULL		
-uint16	SMALLINT UNSIGNED	0		NULL		NULL		
-uint256	TEXT	0		NULL		NULL		
-uint32	INTEGER UNSIGNED	0		NULL		NULL		
-uint64	BIGINT UNSIGNED	0	PRI SOR	NULL		NULL		
-uint8	TINYINT UNSIGNED	0		NULL		NULL		
-uuid_value	CHAR	0		NULL		NULL		
+aggregate_function	TEXT	NO		NULL		NULL		
+array_value	TEXT	NO		NULL		NULL		
+boolean_value	TINYINT UNSIGNED	NO		NULL		NULL		
+date32_value	DATE	NO		NULL		NULL		
+date_value	DATE	NO		NULL		NULL		
+datetime64_value	DATETIME	NO		NULL		NULL		
+datetime_value	DATETIME	NO		NULL		NULL		
+decimal_value	DECIMAL(10, 2)	NO		NULL		NULL		
+enum_value	ENUM('apple', 'banana', 'orange')	NO		NULL		NULL		
+fixed_string_value	TEXT	NO		NULL		NULL		
+float32	FLOAT	NO		NULL		NULL		
+float64	DOUBLE	NO		NULL		NULL		
+int128	TEXT	NO		NULL		NULL		
+int16	SMALLINT	NO		NULL		NULL		
+int256	TEXT	NO		NULL		NULL		
+int32	INTEGER	NO		NULL		NULL		
+int64	BIGINT	NO		NULL		NULL		
+int8	TINYINT	NO		NULL		NULL		
+ipv4_value	TEXT	NO		NULL		NULL		
+ipv6_value	TEXT	NO		NULL		NULL		
+json_value	JSON	NO		NULL		NULL		
+low_cardinality	BLOB	NO		NULL		NULL		
+low_cardinality_date	DATETIME	NO		NULL		NULL		
+map_value	JSON	NO		NULL		NULL		
+nested.nested_int	TEXT	NO		NULL		NULL		
+nested.nested_string	TEXT	NO		NULL		NULL		
+nint32	INTEGER	NO		NULL		NULL		
+nullable_value	INTEGER	NO		NULL		NULL		
+string_value	BLOB	NO		NULL		NULL		
+tuple_value	JSON	NO		NULL		NULL		
+uint128	TEXT	NO		NULL		NULL		
+uint16	SMALLINT UNSIGNED	NO		NULL		NULL		
+uint256	TEXT	NO		NULL		NULL		
+uint32	INTEGER UNSIGNED	NO		NULL		NULL		
+uint64	BIGINT UNSIGNED	NO	PRI SOR	NULL		NULL		
+uint8	TINYINT UNSIGNED	NO		NULL		NULL		
+uuid_value	CHAR	NO		NULL		NULL		
 field	type	null	key	default	extra
-int128	TEXT	0		NULL	
-int16	SMALLINT	0		NULL	
-int256	TEXT	0		NULL	
-int32	INTEGER	0		NULL	
-int64	BIGINT	0		NULL	
-int8	TINYINT	0		NULL	
-nested.nested_int	TEXT	0		NULL	
-nint32	INTEGER	0		NULL	
-uint128	TEXT	0		NULL	
-uint16	SMALLINT UNSIGNED	0		NULL	
-uint256	TEXT	0		NULL	
-uint32	INTEGER UNSIGNED	0		NULL	
-uint64	BIGINT UNSIGNED	0	PRI SOR	NULL	
-uint8	TINYINT UNSIGNED	0		NULL	
+int128	TEXT	NO		NULL	
+int16	SMALLINT	NO		NULL	
+int256	TEXT	NO		NULL	
+int32	INTEGER	NO		NULL	
+int64	BIGINT	NO		NULL	
+int8	TINYINT	NO		NULL	
+nested.nested_int	TEXT	NO		NULL	
+nint32	INTEGER	NO		NULL	
+uint128	TEXT	NO		NULL	
+uint16	SMALLINT UNSIGNED	NO		NULL	
+uint256	TEXT	NO		NULL	
+uint32	INTEGER UNSIGNED	NO		NULL	
+uint64	BIGINT UNSIGNED	NO	PRI SOR	NULL	
+uint8	TINYINT UNSIGNED	NO		NULL	
 field	type	null	key	default	extra
-aggregate_function	TEXT	0		NULL	
-array_value	TEXT	0		NULL	
-boolean_value	TINYINT UNSIGNED	0		NULL	
-date32_value	DATE	0		NULL	
-date_value	DATE	0		NULL	
-datetime64_value	DATETIME	0		NULL	
-datetime_value	DATETIME	0		NULL	
-decimal_value	DECIMAL(10, 2)	0		NULL	
-enum_value	ENUM('apple', 'banana', 'orange')	0		NULL	
-fixed_string_value	TEXT	0		NULL	
-float32	FLOAT	0		NULL	
-float64	DOUBLE	0		NULL	
-ipv4_value	TEXT	0		NULL	
-ipv6_value	TEXT	0		NULL	
-json_value	JSON	0		NULL	
-low_cardinality	BLOB	0		NULL	
-low_cardinality_date	DATETIME	0		NULL	
-map_value	JSON	0		NULL	
-nested.nested_string	TEXT	0		NULL	
-nullable_value	INTEGER	0		NULL	
-string_value	BLOB	0		NULL	
-tuple_value	JSON	0		NULL	
-uuid_value	CHAR	0		NULL	
+aggregate_function	TEXT	NO		NULL	
+array_value	TEXT	NO		NULL	
+boolean_value	TINYINT UNSIGNED	NO		NULL	
+date32_value	DATE	NO		NULL	
+date_value	DATE	NO		NULL	
+datetime64_value	DATETIME	NO		NULL	
+datetime_value	DATETIME	NO		NULL	
+decimal_value	DECIMAL(10, 2)	NO		NULL	
+enum_value	ENUM('apple', 'banana', 'orange')	NO		NULL	
+fixed_string_value	TEXT	NO		NULL	
+float32	FLOAT	NO		NULL	
+float64	DOUBLE	NO		NULL	
+ipv4_value	TEXT	NO		NULL	
+ipv6_value	TEXT	NO		NULL	
+json_value	JSON	NO		NULL	
+low_cardinality	BLOB	NO		NULL	
+low_cardinality_date	DATETIME	NO		NULL	
+map_value	JSON	NO		NULL	
+nested.nested_string	TEXT	NO		NULL	
+nullable_value	INTEGER	NO		NULL	
+string_value	BLOB	NO		NULL	
+tuple_value	JSON	NO		NULL	
+uuid_value	CHAR	NO		NULL	
 field	type	null	key	default	extra
-int128	TEXT	0		NULL	
-int16	SMALLINT	0		NULL	
-int256	TEXT	0		NULL	
-int32	INTEGER	0		NULL	
-int64	BIGINT	0		NULL	
-int8	TINYINT	0		NULL	
-nested.nested_int	TEXT	0		NULL	
-nint32	INTEGER	0		NULL	
-uint128	TEXT	0		NULL	
-uint16	SMALLINT UNSIGNED	0		NULL	
-uint256	TEXT	0		NULL	
-uint32	INTEGER UNSIGNED	0		NULL	
-uint64	BIGINT UNSIGNED	0	PRI SOR	NULL	
-uint8	TINYINT UNSIGNED	0		NULL	
+int128	TEXT	NO		NULL	
+int16	SMALLINT	NO		NULL	
+int256	TEXT	NO		NULL	
+int32	INTEGER	NO		NULL	
+int64	BIGINT	NO		NULL	
+int8	TINYINT	NO		NULL	
+nested.nested_int	TEXT	NO		NULL	
+nint32	INTEGER	NO		NULL	
+uint128	TEXT	NO		NULL	
+uint16	SMALLINT UNSIGNED	NO		NULL	
+uint256	TEXT	NO		NULL	
+uint32	INTEGER UNSIGNED	NO		NULL	
+uint64	BIGINT UNSIGNED	NO	PRI SOR	NULL	
+uint8	TINYINT UNSIGNED	NO		NULL	
 field	type	null	key	default	extra
-aggregate_function	TEXT	0		NULL	
-array_value	TEXT	0		NULL	
-boolean_value	TINYINT UNSIGNED	0		NULL	
-date32_value	DATE	0		NULL	
-date_value	DATE	0		NULL	
-datetime64_value	DATETIME	0		NULL	
-datetime_value	DATETIME	0		NULL	
-decimal_value	DECIMAL(10, 2)	0		NULL	
-enum_value	ENUM('apple', 'banana', 'orange')	0		NULL	
-fixed_string_value	TEXT	0		NULL	
-float32	FLOAT	0		NULL	
-float64	DOUBLE	0		NULL	
-ipv4_value	TEXT	0		NULL	
-ipv6_value	TEXT	0		NULL	
-json_value	JSON	0		NULL	
-low_cardinality	BLOB	0		NULL	
-low_cardinality_date	DATETIME	0		NULL	
-map_value	JSON	0		NULL	
-nested.nested_string	TEXT	0		NULL	
-nullable_value	INTEGER	0		NULL	
-string_value	BLOB	0		NULL	
-tuple_value	JSON	0		NULL	
-uuid_value	CHAR	0		NULL	
+aggregate_function	TEXT	NO		NULL	
+array_value	TEXT	NO		NULL	
+boolean_value	TINYINT UNSIGNED	NO		NULL	
+date32_value	DATE	NO		NULL	
+date_value	DATE	NO		NULL	
+datetime64_value	DATETIME	NO		NULL	
+datetime_value	DATETIME	NO		NULL	
+decimal_value	DECIMAL(10, 2)	NO		NULL	
+enum_value	ENUM('apple', 'banana', 'orange')	NO		NULL	
+fixed_string_value	TEXT	NO		NULL	
+float32	FLOAT	NO		NULL	
+float64	DOUBLE	NO		NULL	
+ipv4_value	TEXT	NO		NULL	
+ipv6_value	TEXT	NO		NULL	
+json_value	JSON	NO		NULL	
+low_cardinality	BLOB	NO		NULL	
+low_cardinality_date	DATETIME	NO		NULL	
+map_value	JSON	NO		NULL	
+nested.nested_string	TEXT	NO		NULL	
+nullable_value	INTEGER	NO		NULL	
+string_value	BLOB	NO		NULL	
+tuple_value	JSON	NO		NULL	
+uuid_value	CHAR	NO		NULL	
 field	type	null	key	default	extra
-int128	TEXT	0		NULL	
-int16	SMALLINT	0		NULL	
-int256	TEXT	0		NULL	
-int32	INTEGER	0		NULL	
-int64	BIGINT	0		NULL	
-int8	TINYINT	0		NULL	
-nested.nested_int	TEXT	0		NULL	
-nint32	INTEGER	0		NULL	
-uint128	TEXT	0		NULL	
-uint16	SMALLINT UNSIGNED	0		NULL	
-uint256	TEXT	0		NULL	
-uint32	INTEGER UNSIGNED	0		NULL	
-uint64	BIGINT UNSIGNED	0	PRI SOR	NULL	
-uint8	TINYINT UNSIGNED	0		NULL	
+int128	TEXT	NO		NULL	
+int16	SMALLINT	NO		NULL	
+int256	TEXT	NO		NULL	
+int32	INTEGER	NO		NULL	
+int64	BIGINT	NO		NULL	
+int8	TINYINT	NO		NULL	
+nested.nested_int	TEXT	NO		NULL	
+nint32	INTEGER	NO		NULL	
+uint128	TEXT	NO		NULL	
+uint16	SMALLINT UNSIGNED	NO		NULL	
+uint256	TEXT	NO		NULL	
+uint32	INTEGER UNSIGNED	NO		NULL	
+uint64	BIGINT UNSIGNED	NO	PRI SOR	NULL	
+uint8	TINYINT UNSIGNED	NO		NULL	
 field	type	null	key	default	extra
-aggregate_function	TEXT	0		NULL	
+aggregate_function	TEXT	NO		NULL	
 field	type	null	key	default	extra
-aggregate_function	TEXT	0		NULL	
-array_value	TEXT	0		NULL	
-boolean_value	TINYINT UNSIGNED	0		NULL	
-date32_value	DATE	0		NULL	
-date_value	DATE	0		NULL	
-datetime64_value	DATETIME	0		NULL	
-datetime_value	DATETIME	0		NULL	
-decimal_value	DECIMAL(10, 2)	0		NULL	
-enum_value	ENUM('apple', 'banana', 'orange')	0		NULL	
-fixed_string_value	TEXT	0		NULL	
-float32	FLOAT	0		NULL	
-float64	DOUBLE	0		NULL	
-int128	TEXT	0		NULL	
-int16	SMALLINT	0		NULL	
-int256	TEXT	0		NULL	
-int32	INTEGER	0		NULL	
-int64	BIGINT	0		NULL	
-int8	TINYINT	0		NULL	
-ipv4_value	TEXT	0		NULL	
-ipv6_value	TEXT	0		NULL	
-json_value	JSON	0		NULL	
-low_cardinality	BLOB	0		NULL	
-low_cardinality_date	DATETIME	0		NULL	
-map_value	JSON	0		NULL	
-nested.nested_int	TEXT	0		NULL	
-nested.nested_string	TEXT	0		NULL	
-nint32	INTEGER	0		NULL	
-nullable_value	INTEGER	0		NULL	
-string_value	BLOB	0		NULL	
-tuple_value	JSON	0		NULL	
-uint128	TEXT	0		NULL	
-uint16	SMALLINT UNSIGNED	0		NULL	
-uint256	TEXT	0		NULL	
-uint32	INTEGER UNSIGNED	0		NULL	
-uint64	BIGINT UNSIGNED	0	PRI SOR	NULL	
-uint8	TINYINT UNSIGNED	0		NULL	
-uuid_value	CHAR	0		NULL	
+aggregate_function	TEXT	NO		NULL	
+array_value	TEXT	NO		NULL	
+boolean_value	TINYINT UNSIGNED	NO		NULL	
+date32_value	DATE	NO		NULL	
+date_value	DATE	NO		NULL	
+datetime64_value	DATETIME	NO		NULL	
+datetime_value	DATETIME	NO		NULL	
+decimal_value	DECIMAL(10, 2)	NO		NULL	
+enum_value	ENUM('apple', 'banana', 'orange')	NO		NULL	
+fixed_string_value	TEXT	NO		NULL	
+float32	FLOAT	NO		NULL	
+float64	DOUBLE	NO		NULL	
+int128	TEXT	NO		NULL	
+int16	SMALLINT	NO		NULL	
+int256	TEXT	NO		NULL	
+int32	INTEGER	NO		NULL	
+int64	BIGINT	NO		NULL	
+int8	TINYINT	NO		NULL	
+ipv4_value	TEXT	NO		NULL	
+ipv6_value	TEXT	NO		NULL	
+json_value	JSON	NO		NULL	
+low_cardinality	BLOB	NO		NULL	
+low_cardinality_date	DATETIME	NO		NULL	
+map_value	JSON	NO		NULL	
+nested.nested_int	TEXT	NO		NULL	
+nested.nested_string	TEXT	NO		NULL	
+nint32	INTEGER	NO		NULL	
+nullable_value	INTEGER	NO		NULL	
+string_value	BLOB	NO		NULL	
+tuple_value	JSON	NO		NULL	
+uint128	TEXT	NO		NULL	
+uint16	SMALLINT UNSIGNED	NO		NULL	
+uint256	TEXT	NO		NULL	
+uint32	INTEGER UNSIGNED	NO		NULL	
+uint64	BIGINT UNSIGNED	NO	PRI SOR	NULL	
+uint8	TINYINT UNSIGNED	NO		NULL	
+uuid_value	CHAR	NO		NULL	
 field	type	null	key	default	extra
-aggregate_function	TEXT	0		NULL	
-array_value	TEXT	0		NULL	
-boolean_value	TINYINT UNSIGNED	0		NULL	
-date32_value	DATE	0		NULL	
-date_value	DATE	0		NULL	
-datetime64_value	DATETIME	0		NULL	
-datetime_value	DATETIME	0		NULL	
-decimal_value	DECIMAL(10, 2)	0		NULL	
-enum_value	ENUM('apple', 'banana', 'orange')	0		NULL	
-fixed_string_value	TEXT	0		NULL	
-float32	FLOAT	0		NULL	
-float64	DOUBLE	0		NULL	
-int128	TEXT	0		NULL	
-int16	SMALLINT	0		NULL	
-int256	TEXT	0		NULL	
-int32	INTEGER	0		NULL	
-int64	BIGINT	0		NULL	
-int8	TINYINT	0		NULL	
-ipv4_value	TEXT	0		NULL	
-ipv6_value	TEXT	0		NULL	
-json_value	JSON	0		NULL	
-low_cardinality	BLOB	0		NULL	
-low_cardinality_date	DATETIME	0		NULL	
-map_value	JSON	0		NULL	
-nested.nested_int	TEXT	0		NULL	
-nested.nested_string	TEXT	0		NULL	
-nint32	INTEGER	0		NULL	
-nullable_value	INTEGER	0		NULL	
-string_value	BLOB	0		NULL	
-tuple_value	JSON	0		NULL	
-uint128	TEXT	0		NULL	
-uint16	SMALLINT UNSIGNED	0		NULL	
-uint256	TEXT	0		NULL	
-uint32	INTEGER UNSIGNED	0		NULL	
-uint64	BIGINT UNSIGNED	0	PRI SOR	NULL	
-uint8	TINYINT UNSIGNED	0		NULL	
-uuid_value	CHAR	0		NULL	
+aggregate_function	TEXT	NO		NULL	
+array_value	TEXT	NO		NULL	
+boolean_value	TINYINT UNSIGNED	NO		NULL	
+date32_value	DATE	NO		NULL	
+date_value	DATE	NO		NULL	
+datetime64_value	DATETIME	NO		NULL	
+datetime_value	DATETIME	NO		NULL	
+decimal_value	DECIMAL(10, 2)	NO		NULL	
+enum_value	ENUM('apple', 'banana', 'orange')	NO		NULL	
+fixed_string_value	TEXT	NO		NULL	
+float32	FLOAT	NO		NULL	
+float64	DOUBLE	NO		NULL	
+int128	TEXT	NO		NULL	
+int16	SMALLINT	NO		NULL	
+int256	TEXT	NO		NULL	
+int32	INTEGER	NO		NULL	
+int64	BIGINT	NO		NULL	
+int8	TINYINT	NO		NULL	
+ipv4_value	TEXT	NO		NULL	
+ipv6_value	TEXT	NO		NULL	
+json_value	JSON	NO		NULL	
+low_cardinality	BLOB	NO		NULL	
+low_cardinality_date	DATETIME	NO		NULL	
+map_value	JSON	NO		NULL	
+nested.nested_int	TEXT	NO		NULL	
+nested.nested_string	TEXT	NO		NULL	
+nint32	INTEGER	NO		NULL	
+nullable_value	INTEGER	NO		NULL	
+string_value	BLOB	NO		NULL	
+tuple_value	JSON	NO		NULL	
+uint128	TEXT	NO		NULL	
+uint16	SMALLINT UNSIGNED	NO		NULL	
+uint256	TEXT	NO		NULL	
+uint32	INTEGER UNSIGNED	NO		NULL	
+uint64	BIGINT UNSIGNED	NO	PRI SOR	NULL	
+uint8	TINYINT UNSIGNED	NO		NULL	
+uuid_value	CHAR	NO		NULL	
 field	type	null	key	default	extra
-aggregate_function	TEXT	0		NULL	
-array_value	TEXT	0		NULL	
-boolean_value	TINYINT UNSIGNED	0		NULL	
-date32_value	DATE	0		NULL	
-date_value	DATE	0		NULL	
-datetime64_value	DATETIME	0		NULL	
-datetime_value	DATETIME	0		NULL	
-decimal_value	DECIMAL(10, 2)	0		NULL	
-enum_value	ENUM('apple', 'banana', 'orange')	0		NULL	
-fixed_string_value	TEXT	0		NULL	
-float32	FLOAT	0		NULL	
-float64	DOUBLE	0		NULL	
-int128	TEXT	0		NULL	
-int16	SMALLINT	0		NULL	
-int256	TEXT	0		NULL	
-int32	INTEGER	0		NULL	
-int64	BIGINT	0		NULL	
-int8	TINYINT	0		NULL	
-ipv4_value	TEXT	0		NULL	
-ipv6_value	TEXT	0		NULL	
-json_value	JSON	0		NULL	
-low_cardinality	BLOB	0		NULL	
-low_cardinality_date	DATETIME	0		NULL	
-map_value	JSON	0		NULL	
-nested.nested_int	TEXT	0		NULL	
-nested.nested_string	TEXT	0		NULL	
-nint32	INTEGER	0		NULL	
-nullable_value	INTEGER	0		NULL	
-string_value	BLOB	0		NULL	
-tuple_value	JSON	0		NULL	
-uint128	TEXT	0		NULL	
-uint16	SMALLINT UNSIGNED	0		NULL	
-uint256	TEXT	0		NULL	
-uint32	INTEGER UNSIGNED	0		NULL	
-uint64	BIGINT UNSIGNED	0	PRI SOR	NULL	
-uint8	TINYINT UNSIGNED	0		NULL	
-uuid_value	CHAR	0		NULL	
+aggregate_function	TEXT	NO		NULL	
+array_value	TEXT	NO		NULL	
+boolean_value	TINYINT UNSIGNED	NO		NULL	
+date32_value	DATE	NO		NULL	
+date_value	DATE	NO		NULL	
+datetime64_value	DATETIME	NO		NULL	
+datetime_value	DATETIME	NO		NULL	
+decimal_value	DECIMAL(10, 2)	NO		NULL	
+enum_value	ENUM('apple', 'banana', 'orange')	NO		NULL	
+fixed_string_value	TEXT	NO		NULL	
+float32	FLOAT	NO		NULL	
+float64	DOUBLE	NO		NULL	
+int128	TEXT	NO		NULL	
+int16	SMALLINT	NO		NULL	
+int256	TEXT	NO		NULL	
+int32	INTEGER	NO		NULL	
+int64	BIGINT	NO		NULL	
+int8	TINYINT	NO		NULL	
+ipv4_value	TEXT	NO		NULL	
+ipv6_value	TEXT	NO		NULL	
+json_value	JSON	NO		NULL	
+low_cardinality	BLOB	NO		NULL	
+low_cardinality_date	DATETIME	NO		NULL	
+map_value	JSON	NO		NULL	
+nested.nested_int	TEXT	NO		NULL	
+nested.nested_string	TEXT	NO		NULL	
+nint32	INTEGER	NO		NULL	
+nullable_value	INTEGER	NO		NULL	
+string_value	BLOB	NO		NULL	
+tuple_value	JSON	NO		NULL	
+uint128	TEXT	NO		NULL	
+uint16	SMALLINT UNSIGNED	NO		NULL	
+uint256	TEXT	NO		NULL	
+uint32	INTEGER UNSIGNED	NO		NULL	
+uint64	BIGINT UNSIGNED	NO	PRI SOR	NULL	
+uint8	TINYINT UNSIGNED	NO		NULL	
+uuid_value	CHAR	NO		NULL	
