{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 54115,
  "instance_id": "ClickHouse__ClickHouse-54115",
  "issue_numbers": [
    "51103"
  ],
  "base_commit": "140a466a1ee5fefaaa7e4e226a1cfc9db28ed69f",
  "patch": "diff --git a/docs/en/sql-reference/statements/show.md b/docs/en/sql-reference/statements/show.md\nindex e94718394de3..82af20fd18c6 100644\n--- a/docs/en/sql-reference/statements/show.md\n+++ b/docs/en/sql-reference/statements/show.md\n@@ -208,7 +208,7 @@ The optional keyword `FULL` causes the output to include the collation, comment\n The statement produces a result table with the following structure:\n - field - The name of the column (String)\n - type - The column data type (String)\n-- null - If the column data type is Nullable (UInt8)\n+- null - `YES` if the column data type is Nullable, `NO` otherwise (String)\n - key - `PRI` if the column is part of the primary key, `SOR` if the column is part of the sorting key, empty otherwise (String)\n - default - Default expression of the column if it is of type `ALIAS`, `DEFAULT`, or `MATERIALIZED`, otherwise `NULL`. (Nullable(String))\n - extra - Additional information, currently unused (String)\ndiff --git a/src/Core/MySQL/PacketsGeneric.h b/src/Core/MySQL/PacketsGeneric.h\nindex cf990bbf15cb..969716dfc7af 100644\n--- a/src/Core/MySQL/PacketsGeneric.h\n+++ b/src/Core/MySQL/PacketsGeneric.h\n@@ -54,6 +54,9 @@ enum Command\n     COM_CHANGE_USER = 0x11,\n     COM_BINLOG_DUMP = 0x12,\n     COM_REGISTER_SLAVE = 0x15,\n+    COM_STMT_PREPARE = 0x16,\n+    COM_STMT_EXECUTE = 0x17,\n+    COM_STMT_CLOSE = 0x19,\n     COM_RESET_CONNECTION = 0x1f,\n     COM_DAEMON = 0x1d,\n     COM_BINLOG_DUMP_GTID = 0x1e\ndiff --git a/src/Core/MySQL/PacketsPreparedStatements.cpp b/src/Core/MySQL/PacketsPreparedStatements.cpp\nnew file mode 100644\nindex 000000000000..654c28379d91\n--- /dev/null\n+++ b/src/Core/MySQL/PacketsPreparedStatements.cpp\n@@ -0,0 +1,42 @@\n+#include <Core/MySQL/PacketsPreparedStatements.h>\n+#include <IO/WriteHelpers.h>\n+#include <Common/logger_useful.h>\n+\n+\n+namespace DB\n+{\n+namespace MySQLProtocol\n+{\n+namespace PreparedStatements\n+{\n+size_t PreparedStatementResponseOK::getPayloadSize() const\n+{\n+    // total = 13\n+    return 1 // status\n+        + 4 // statement_id\n+        + 2 // num_columns\n+        + 2 // num_params\n+        + 1 // reserved_1 (filler)\n+        + 2 // warnings_count\n+        + 1; // metadata_follows\n+}\n+\n+void PreparedStatementResponseOK::writePayloadImpl(WriteBuffer & buffer) const\n+{\n+    buffer.write(reinterpret_cast<const char *>(&status), 1);\n+    buffer.write(reinterpret_cast<const char *>(&statement_id), 4);\n+    buffer.write(reinterpret_cast<const char *>(&num_columns), 2);\n+    buffer.write(reinterpret_cast<const char *>(&num_params), 2);\n+    buffer.write(reinterpret_cast<const char *>(&reserved_1), 1);\n+    buffer.write(reinterpret_cast<const char *>(&warnings_count), 2);\n+    buffer.write(0x0); // RESULTSET_METADATA_NONE\n+}\n+\n+PreparedStatementResponseOK::PreparedStatementResponseOK(\n+    uint32_t statement_id_, uint16_t num_columns_, uint16_t num_params_, uint16_t warnings_count_)\n+    : statement_id(statement_id_), num_columns(num_columns_), num_params(num_params_), warnings_count(warnings_count_)\n+{\n+}\n+}\n+}\n+}\ndiff --git a/src/Core/MySQL/PacketsPreparedStatements.h b/src/Core/MySQL/PacketsPreparedStatements.h\nnew file mode 100644\nindex 000000000000..2c5ab8b55965\n--- /dev/null\n+++ b/src/Core/MySQL/PacketsPreparedStatements.h\n@@ -0,0 +1,32 @@\n+#pragma once\n+\n+#include <Core/MySQL/IMySQLWritePacket.h>\n+\n+namespace DB\n+{\n+namespace MySQLProtocol\n+{\n+namespace PreparedStatements\n+{\n+// https://dev.mysql.com/doc/dev/mysql-server/latest/page_protocol_com_stmt_prepare.html#sect_protocol_com_stmt_prepare_response_ok\n+class PreparedStatementResponseOK : public IMySQLWritePacket\n+{\n+public:\n+    const uint8_t status = 0x00;\n+    uint32_t statement_id;\n+    uint16_t num_columns;\n+    uint16_t num_params;\n+    const uint8_t reserved_1 = 0;\n+    uint16_t warnings_count;\n+\n+protected:\n+    size_t getPayloadSize() const override;\n+\n+    void writePayloadImpl(WriteBuffer & buffer) const override;\n+\n+public:\n+    PreparedStatementResponseOK(uint32_t statement_id_, uint16_t num_columns_, uint16_t num_params_, uint16_t warnings_count_);\n+};\n+}\n+}\n+}\ndiff --git a/src/Core/MySQL/PacketsProtocolBinary.cpp b/src/Core/MySQL/PacketsProtocolBinary.cpp\nnew file mode 100644\nindex 000000000000..9f799d898355\n--- /dev/null\n+++ b/src/Core/MySQL/PacketsProtocolBinary.cpp\n@@ -0,0 +1,365 @@\n+#include <Columns/IColumn.h>\n+#include <Core/MySQL/IMySQLReadPacket.h>\n+#include <Core/MySQL/IMySQLWritePacket.h>\n+#include <Core/MySQL/PacketsProtocolBinary.h>\n+#include \"Common/LocalDate.h\"\n+#include \"Common/LocalDateTime.h\"\n+#include \"Columns/ColumnLowCardinality.h\"\n+#include \"Columns/ColumnNullable.h\"\n+#include \"Columns/ColumnVector.h\"\n+#include \"Columns/ColumnsDateTime.h\"\n+#include \"Core/DecimalFunctions.h\"\n+#include \"DataTypes/DataTypeDateTime64.h\"\n+#include \"DataTypes/DataTypeLowCardinality.h\"\n+#include \"DataTypes/DataTypeNullable.h\"\n+#include \"DataTypes/DataTypesNumber.h\"\n+#include \"Formats/FormatSettings.h\"\n+#include \"IO/WriteBufferFromString.h\"\n+#include \"base/DayNum.h\"\n+#include \"base/Decimal.h\"\n+#include \"base/types.h\"\n+\n+namespace DB\n+{\n+namespace MySQLProtocol\n+{\n+namespace ProtocolBinary\n+{\n+ResultSetRow::ResultSetRow(const Serializations & serializations_, const DataTypes & data_types_, const Columns & columns_, int row_num_)\n+    : row_num(row_num_), columns(columns_), data_types(data_types_), serializations(serializations_)\n+{\n+    payload_size = 1 + null_bitmap_size;\n+    FormatSettings format_settings;\n+    for (size_t i = 0; i < columns.size(); ++i)\n+    {\n+        ColumnPtr col = getColumn(i);\n+        if (col->isNullAt(row_num))\n+        {\n+            // See https://dev.mysql.com/doc/dev/mysql-server/8.1.0/page_protocol_binary_resultset.html#sect_protocol_binary_resultset_row\n+            size_t byte = (i + 2) / 8;\n+            int bit = 1 << ((i + 2) % 8);\n+            null_bitmap[byte] |= bit;\n+            continue; // NULLs are stored in the null bitmap only\n+        }\n+\n+        DataTypePtr data_type = removeLowCardinality(removeNullable((data_types[i])));\n+        TypeIndex type_index = data_type->getTypeId();\n+        switch (type_index)\n+        {\n+            case TypeIndex::Int8:\n+                payload_size += 1;\n+                break;\n+            case TypeIndex::UInt8:\n+                if (data_type->getName() == \"Bool\")\n+                    payload_size += 2; // BIT MySQL type is string<lenenc> in binary\n+                else\n+                    payload_size += 1;\n+                break;\n+            case TypeIndex::Int16:\n+            case TypeIndex::UInt16:\n+                payload_size += 2;\n+                break;\n+            case TypeIndex::Int32:\n+            case TypeIndex::UInt32:\n+            case TypeIndex::Float32:\n+                payload_size += 4;\n+                break;\n+            case TypeIndex::Int64:\n+            case TypeIndex::UInt64:\n+            case TypeIndex::Float64:\n+                payload_size += 8;\n+                break;\n+            case TypeIndex::Date:\n+            case TypeIndex::Date32: {\n+                size_t size = 1 // number of bytes following\n+                    + 2 // year\n+                    + 1 // month\n+                    + 1; // day\n+                payload_size += size;\n+                break;\n+            }\n+            case TypeIndex::DateTime: {\n+                UInt32 value = assert_cast<const ColumnVector<UInt32> &>(*col).getData()[row_num];\n+                LocalDateTime ldt = LocalDateTime(value, DateLUT::instance(getDateTimeTimezone(*data_type)));\n+\n+                bool has_time = !(ldt.hour() == 0 && ldt.minute() == 0 && ldt.second() == 0);\n+                size_t size = 1 // number of bytes following\n+                    + 2 // year\n+                    + 1 // month\n+                    + 1; // day\n+                payload_size += size;\n+                if (has_time)\n+                {\n+                    size_t additional_size = 1 // hour\n+                        + 1 // minute\n+                        + 1; // second\n+                    payload_size += additional_size;\n+                }\n+                break;\n+            }\n+            case TypeIndex::DateTime64: {\n+                auto [components, scale] = getDateTime64ComponentsWithScale(data_type, col);\n+                if (scale > 6)\n+                {\n+                    // MySQL Timestamp has max scale of 6\n+                    components.fractional /= static_cast<int>(pow(10, scale - 6));\n+                }\n+\n+                LocalDateTime ldt = LocalDateTime(components.whole, DateLUT::instance(getDateTimeTimezone(*data_type)));\n+\n+                bool has_microseconds = components.fractional != 0;\n+                bool has_time = !(ldt.hour() == 0 && ldt.minute() == 0 && ldt.second() == 0);\n+                size_t size = 1 // number of bytes following\n+                    + 2 // year\n+                    + 1 // month\n+                    + 1; // day\n+                payload_size += size;\n+                if (has_microseconds)\n+                {\n+                    size_t additional_size = 1 // hour\n+                        + 1 // minute\n+                        + 1 // second\n+                        + 4; // microsecond;\n+                    payload_size += additional_size;\n+                }\n+                else if (has_time)\n+                {\n+                    size_t additional_size = 1 // hour\n+                        + 1 // minute\n+                        + 1; // second\n+                    payload_size += additional_size;\n+                }\n+                break;\n+            }\n+            // All other types including all Decimal types are string<lenenc> in binary\n+            default:\n+                WriteBufferFromOwnString ostr;\n+                serializations[i]->serializeText(*columns[i], row_num, ostr, format_settings);\n+                payload_size += getLengthEncodedStringSize(ostr.str());\n+                serialized[i] = std::move(ostr.str());\n+                break;\n+        }\n+    }\n+}\n+\n+size_t ResultSetRow::getPayloadSize() const\n+{\n+    return payload_size;\n+}\n+\n+void ResultSetRow::writePayloadImpl(WriteBuffer & buffer) const\n+{\n+    buffer.write(static_cast<char>(0x00));\n+    buffer.write(null_bitmap.data(), null_bitmap_size);\n+    for (size_t i = 0; i < columns.size(); ++i)\n+    {\n+        ColumnPtr col = getColumn(i);\n+        if (col->isNullAt(row_num))\n+            continue;\n+\n+        DataTypePtr data_type = removeLowCardinality(removeNullable((data_types[i])));\n+        TypeIndex type_index = data_type->getTypeId();\n+        switch (type_index)\n+        {\n+            case TypeIndex::Int8: {\n+                Int8 value = assert_cast<const ColumnVector<Int8> &>(*col).getData()[row_num];\n+                buffer.write(reinterpret_cast<char *>(&value), 1);\n+                break;\n+            }\n+            case TypeIndex::UInt8: {\n+                UInt8 value = assert_cast<const ColumnVector<UInt8> &>(*col).getData()[row_num];\n+                if (data_type->getName() == \"Bool\")\n+                    buffer.write(static_cast<char>(1));\n+                buffer.write(reinterpret_cast<char *>(&value), 1);\n+                break;\n+            }\n+            case TypeIndex::Int16: {\n+                Int16 value = assert_cast<const ColumnVector<Int16> &>(*col).getData()[row_num];\n+                buffer.write(reinterpret_cast<char *>(&value), 2);\n+                break;\n+            }\n+            case TypeIndex::UInt16: {\n+                UInt16 value = assert_cast<const ColumnVector<UInt16> &>(*col).getData()[row_num];\n+                buffer.write(reinterpret_cast<char *>(&value), 2);\n+                break;\n+            }\n+            case TypeIndex::Int32: {\n+                Int32 value = assert_cast<const ColumnVector<Int32> &>(*col).getData()[row_num];\n+                buffer.write(reinterpret_cast<char *>(&value), 4);\n+                break;\n+            }\n+            case TypeIndex::UInt32: {\n+                UInt32 value = assert_cast<const ColumnVector<UInt32> &>(*col).getData()[row_num];\n+                buffer.write(reinterpret_cast<char *>(&value), 4);\n+                break;\n+            }\n+            case TypeIndex::Float32: {\n+                Float32 value = assert_cast<const ColumnVector<Float32> &>(*col).getData()[row_num];\n+                buffer.write(reinterpret_cast<char *>(&value), 4);\n+                break;\n+            }\n+            case TypeIndex::Int64: {\n+                Int64 value = assert_cast<const ColumnVector<Int64> &>(*col).getData()[row_num];\n+                buffer.write(reinterpret_cast<char *>(&value), 8);\n+                break;\n+            }\n+            case TypeIndex::UInt64: {\n+                UInt64 value = assert_cast<const ColumnVector<UInt64> &>(*col).getData()[row_num];\n+                buffer.write(reinterpret_cast<char *>(&value), 8);\n+                break;\n+            }\n+            case TypeIndex::Float64: {\n+                Float64 value = assert_cast<const ColumnVector<Float64> &>(*col).getData()[row_num];\n+                buffer.write(reinterpret_cast<char *>(&value), 8);\n+                break;\n+            }\n+            case TypeIndex::Date: {\n+                UInt16 value = assert_cast<const ColumnVector<UInt16> &>(*col).getData()[row_num];\n+                LocalDate ld = LocalDate(DayNum(value));\n+                buffer.write(static_cast<char>(4)); // bytes_following\n+                UInt16 year = ld.year();\n+                UInt8 month = ld.month();\n+                UInt8 day = ld.day();\n+                buffer.write(reinterpret_cast<const char *>(&year), 2);\n+                buffer.write(reinterpret_cast<const char *>(&month), 1);\n+                buffer.write(reinterpret_cast<const char *>(&day), 1);\n+                break;\n+            }\n+            case TypeIndex::Date32: {\n+                Int32 value = assert_cast<const ColumnVector<Int32> &>(*col).getData()[row_num];\n+                LocalDate ld = LocalDate(ExtendedDayNum(value));\n+                buffer.write(static_cast<char>(4)); // bytes_following\n+                UInt16 year = ld.year();\n+                UInt8 month = ld.month();\n+                UInt8 day = ld.day();\n+                buffer.write(reinterpret_cast<const char *>(&year), 2);\n+                buffer.write(reinterpret_cast<const char *>(&month), 1);\n+                buffer.write(reinterpret_cast<const char *>(&day), 1);\n+                break;\n+            }\n+            case TypeIndex::DateTime: {\n+                UInt32 value = assert_cast<const ColumnVector<UInt32> &>(*col).getData()[row_num];\n+                String timezone = getDateTimeTimezone(*data_type);\n+                LocalDateTime ldt = LocalDateTime(value, DateLUT::instance(timezone));\n+                UInt16 year = ldt.year();\n+                UInt8 month = ldt.month();\n+                UInt8 day = ldt.day();\n+                UInt8 hour = ldt.hour();\n+                UInt8 minute = ldt.minute();\n+                UInt8 second = ldt.second();\n+                bool has_time = !(hour == 0 && minute == 0 && second == 0);\n+                size_t bytes_following = has_time ? 7 : 4;\n+                buffer.write(reinterpret_cast<const char *>(&bytes_following), 1);\n+                buffer.write(reinterpret_cast<const char *>(&year), 2);\n+                buffer.write(reinterpret_cast<const char *>(&month), 1);\n+                buffer.write(reinterpret_cast<const char *>(&day), 1);\n+                if (has_time)\n+                {\n+                    buffer.write(reinterpret_cast<const char *>(&hour), 1);\n+                    buffer.write(reinterpret_cast<const char *>(&minute), 1);\n+                    buffer.write(reinterpret_cast<const char *>(&second), 1);\n+                }\n+                break;\n+            }\n+            case TypeIndex::DateTime64: {\n+                auto [components, scale] = getDateTime64ComponentsWithScale(data_type, col);\n+                if (components.fractional != 0)\n+                {\n+                    if (scale > 6)\n+                    {\n+                        // MySQL Timestamp has max scale of 6\n+                        components.fractional /= static_cast<int>(pow(10, scale - 6));\n+                    }\n+                    else\n+                    {\n+                        // fractional == 1 is a different microsecond value depending on the scale\n+                        // Scale 1 = 100000\n+                        // Scale 2 = 010000\n+                        // Scale 3 = 001000\n+                        // Scale 4 = 000100\n+                        // Scale 5 = 000010\n+                        // Scale 6 = 000001\n+                        components.fractional *= static_cast<int>(pow(10, 6 - scale));\n+                    }\n+                }\n+\n+                String timezone = getDateTimeTimezone(*data_type);\n+                LocalDateTime ldt = LocalDateTime(components.whole, DateLUT::instance(timezone));\n+                UInt16 year = ldt.year();\n+                UInt8 month = ldt.month();\n+                UInt8 day = ldt.day();\n+                UInt8 hour = ldt.hour();\n+                UInt8 minute = ldt.minute();\n+                UInt8 second = ldt.second();\n+\n+                bool has_time = !(hour == 0 && minute == 0 && second == 0);\n+                bool has_microseconds = components.fractional != 0;\n+\n+                if (has_microseconds)\n+                {\n+                    buffer.write(static_cast<char>(11)); // bytes_following\n+                    buffer.write(reinterpret_cast<const char *>(&year), 2);\n+                    buffer.write(reinterpret_cast<const char *>(&month), 1);\n+                    buffer.write(reinterpret_cast<const char *>(&day), 1);\n+                    buffer.write(reinterpret_cast<const char *>(&hour), 1);\n+                    buffer.write(reinterpret_cast<const char *>(&minute), 1);\n+                    buffer.write(reinterpret_cast<const char *>(&second), 1);\n+                    buffer.write(reinterpret_cast<const char *>(&components.fractional), 4);\n+                }\n+                else if (has_time)\n+                {\n+                    buffer.write(static_cast<char>(7)); // bytes_following\n+                    buffer.write(reinterpret_cast<const char *>(&year), 2);\n+                    buffer.write(reinterpret_cast<const char *>(&month), 1);\n+                    buffer.write(reinterpret_cast<const char *>(&day), 1);\n+                    buffer.write(reinterpret_cast<const char *>(&hour), 1);\n+                    buffer.write(reinterpret_cast<const char *>(&minute), 1);\n+                    buffer.write(reinterpret_cast<const char *>(&second), 1);\n+                }\n+                else\n+                {\n+                    buffer.write(static_cast<char>(4)); // bytes_following\n+                    buffer.write(reinterpret_cast<const char *>(&year), 2);\n+                    buffer.write(reinterpret_cast<const char *>(&month), 1);\n+                    buffer.write(reinterpret_cast<const char *>(&day), 1);\n+                }\n+                break;\n+            }\n+            // All other types including all Decimal types are string<lenenc> in binary\n+            default:\n+                writeLengthEncodedString(serialized[i], buffer);\n+                break;\n+        }\n+    }\n+}\n+\n+ResultSetRow::DateTime64ComponentsWithScale ResultSetRow::getDateTime64ComponentsWithScale(DataTypePtr data_type, ColumnPtr col) const\n+{\n+    const auto * date_time_type = typeid_cast<const DataTypeDateTime64 *>(data_type.get());\n+\n+    static constexpr UInt32 MaxScale = DecimalUtils::max_precision<DateTime64>;\n+    UInt32 scale = std::min(MaxScale, date_time_type->getScale());\n+\n+    const auto value = assert_cast<const ColumnDateTime64 &>(*col).getData()[row_num];\n+    auto components = DecimalUtils::split(value, scale);\n+\n+    using T = typename DateTime64::NativeType;\n+    if (value.value < 0 && components.fractional)\n+    {\n+        components.fractional = DecimalUtils::scaleMultiplier<T>(scale) + (components.whole ? T(-1) : T(1)) * components.fractional;\n+        --components.whole;\n+    }\n+\n+    return {components, scale};\n+}\n+\n+ColumnPtr ResultSetRow::getColumn(size_t i) const\n+{\n+    ColumnPtr col = columns[i]->convertToFullIfNeeded();\n+    if (col->isNullable())\n+        return assert_cast<const ColumnNullable &>(*col).getNestedColumnPtr();\n+    return col;\n+}\n+}\n+}\n+}\ndiff --git a/src/Core/MySQL/PacketsProtocolBinary.h b/src/Core/MySQL/PacketsProtocolBinary.h\nnew file mode 100644\nindex 000000000000..a0a4d5684ce8\n--- /dev/null\n+++ b/src/Core/MySQL/PacketsProtocolBinary.h\n@@ -0,0 +1,48 @@\n+#pragma once\n+\n+#include <vector>\n+#include <Columns/IColumn.h>\n+#include <Core/MySQL/IMySQLReadPacket.h>\n+#include <Core/MySQL/IMySQLWritePacket.h>\n+#include \"Core/DecimalFunctions.h\"\n+#include \"DataTypes/IDataType.h\"\n+#include \"DataTypes/Serializations/ISerialization.h\"\n+\n+namespace DB\n+{\n+namespace MySQLProtocol\n+{\n+namespace ProtocolBinary\n+{\n+class ResultSetRow : public IMySQLWritePacket\n+{\n+    using DateTime64ComponentsWithScale = std::pair<DecimalUtils::DecimalComponents<DateTime64>, UInt32>;\n+\n+private:\n+    DateTime64ComponentsWithScale getDateTime64ComponentsWithScale(DataTypePtr data_type, ColumnPtr col) const;\n+    ColumnPtr getColumn(size_t i) const;\n+\n+protected:\n+    int row_num;\n+    const Columns & columns;\n+    const DataTypes & data_types;\n+    const Serializations & serializations;\n+\n+    std::vector<String> serialized = std::vector<String>(columns.size());\n+\n+    // See https://dev.mysql.com/doc/dev/mysql-server/8.1.0/page_protocol_binary_resultset.html#sect_protocol_binary_resultset_row\n+    size_t null_bitmap_size = (columns.size() + 7 + 2) / 8;\n+    std::vector<char> null_bitmap = std::vector<char>(null_bitmap_size, static_cast<char>(0));\n+\n+    size_t payload_size = 0;\n+\n+    size_t getPayloadSize() const override;\n+\n+    void writePayloadImpl(WriteBuffer & buffer) const override;\n+\n+public:\n+    ResultSetRow(const Serializations & serializations_, const DataTypes & data_types_, const Columns & columns_, int row_num_);\n+};\n+}\n+}\n+}\ndiff --git a/src/Core/MySQL/PacketsProtocolText.cpp b/src/Core/MySQL/PacketsProtocolText.cpp\nindex 728e8061e874..3be8acad3ea2 100644\n--- a/src/Core/MySQL/PacketsProtocolText.cpp\n+++ b/src/Core/MySQL/PacketsProtocolText.cpp\n@@ -1,7 +1,12 @@\n #include <Core/MySQL/PacketsProtocolText.h>\n-#include <IO/WriteBufferFromString.h>\n #include <IO/ReadHelpers.h>\n+#include <IO/WriteBufferFromString.h>\n #include <IO/WriteHelpers.h>\n+#include \"Common/assert_cast.h\"\n+#include \"Core/MySQL/IMySQLWritePacket.h\"\n+#include \"DataTypes/DataTypeLowCardinality.h\"\n+#include \"DataTypes/DataTypeNullable.h\"\n+#include \"DataTypes/DataTypesDecimal.h\"\n \n namespace DB\n {\n@@ -131,16 +136,25 @@ void ColumnDefinition::writePayloadImpl(WriteBuffer & buffer) const\n     }\n }\n \n-ColumnDefinition getColumnDefinition(const String & column_name, const TypeIndex type_index)\n+ColumnDefinition getColumnDefinition(const String & column_name, const DataTypePtr & data_type)\n {\n     ColumnType column_type;\n     CharacterSet charset = CharacterSet::binary;\n     int flags = 0;\n+    uint8_t decimals = 0;\n+    TypeIndex type_index = removeLowCardinality(removeNullable(data_type))->getTypeId();\n     switch (type_index)\n     {\n         case TypeIndex::UInt8:\n-            column_type = ColumnType::MYSQL_TYPE_TINY;\n-            flags = ColumnDefinitionFlags::BINARY_FLAG | ColumnDefinitionFlags::UNSIGNED_FLAG;\n+            if (data_type->getName() == \"Bool\")\n+            {\n+                column_type = ColumnType::MYSQL_TYPE_BIT;\n+            }\n+            else\n+            {\n+                column_type = ColumnType::MYSQL_TYPE_TINY;\n+                flags = ColumnDefinitionFlags::BINARY_FLAG | ColumnDefinitionFlags::UNSIGNED_FLAG;\n+            }\n             break;\n         case TypeIndex::UInt16:\n             column_type = ColumnType::MYSQL_TYPE_SHORT;\n@@ -173,30 +187,51 @@ ColumnDefinition getColumnDefinition(const String & column_name, const TypeIndex\n         case TypeIndex::Float32:\n             column_type = ColumnType::MYSQL_TYPE_FLOAT;\n             flags = ColumnDefinitionFlags::BINARY_FLAG;\n+            decimals = 31;\n             break;\n         case TypeIndex::Float64:\n             column_type = ColumnType::MYSQL_TYPE_DOUBLE;\n             flags = ColumnDefinitionFlags::BINARY_FLAG;\n+            decimals = 31;\n             break;\n         case TypeIndex::Date:\n+        case TypeIndex::Date32:\n             column_type = ColumnType::MYSQL_TYPE_DATE;\n             flags = ColumnDefinitionFlags::BINARY_FLAG;\n             break;\n         case TypeIndex::DateTime:\n+        case TypeIndex::DateTime64:\n             column_type = ColumnType::MYSQL_TYPE_DATETIME;\n             flags = ColumnDefinitionFlags::BINARY_FLAG;\n             break;\n-        case TypeIndex::String:\n-        case TypeIndex::FixedString:\n-            column_type = ColumnType::MYSQL_TYPE_STRING;\n-            charset = CharacterSet::utf8_general_ci;\n+        case TypeIndex::Decimal32:\n+        case TypeIndex::Decimal64:\n+            column_type = ColumnType::MYSQL_TYPE_DECIMAL;\n+            flags = ColumnDefinitionFlags::BINARY_FLAG;\n             break;\n+        case TypeIndex::Decimal128: {\n+            // MySQL Decimal has max 65 precision and 30 scale\n+            // Decimal256 (min scale is 39) is higher than the MySQL supported range and handled in the default case\n+            // See https://dev.mysql.com/doc/refman/8.0/en/precision-math-decimal-characteristics.html\n+            const auto & type = assert_cast<const DataTypeDecimal128 &>(*data_type);\n+            if (type.getPrecision() > 65 || type.getScale() > 30)\n+            {\n+                column_type = ColumnType::MYSQL_TYPE_STRING;\n+                charset = CharacterSet::utf8_general_ci;\n+            }\n+            else\n+            {\n+                column_type = ColumnType::MYSQL_TYPE_DECIMAL;\n+                flags = ColumnDefinitionFlags::BINARY_FLAG;\n+            }\n+            break;\n+        }\n         default:\n             column_type = ColumnType::MYSQL_TYPE_STRING;\n             charset = CharacterSet::utf8_general_ci;\n             break;\n     }\n-    return ColumnDefinition(column_name, charset, 0, column_type, flags, 0);\n+    return ColumnDefinition(column_name, charset, 0, column_type, flags, decimals);\n }\n \n }\ndiff --git a/src/Core/MySQL/PacketsProtocolText.h b/src/Core/MySQL/PacketsProtocolText.h\nindex aeeedc4dbf8c..1de9aabe9bb1 100644\n--- a/src/Core/MySQL/PacketsProtocolText.h\n+++ b/src/Core/MySQL/PacketsProtocolText.h\n@@ -116,16 +116,29 @@ class ColumnDefinition : public IMySQLWritePacket, public IMySQLReadPacket\n     ColumnDefinition();\n \n     ColumnDefinition(\n-        String schema_, String table_, String org_table_, String name_, String org_name_, uint16_t character_set_, uint32_t column_length_,\n-        ColumnType column_type_, uint16_t flags_, uint8_t decimals_, bool with_defaults_ = false);\n+        String schema_,\n+        String table_,\n+        String org_table_,\n+        String name_,\n+        String org_name_,\n+        uint16_t character_set_,\n+        uint32_t column_length_,\n+        ColumnType column_type_,\n+        uint16_t flags_,\n+        uint8_t decimals_,\n+        bool with_defaults_ = false);\n \n     /// Should be used when column metadata (original name, table, original table, database) is unknown.\n     ColumnDefinition(\n-        String name_, uint16_t character_set_, uint32_t column_length_, ColumnType column_type_, uint16_t flags_, uint8_t decimals_);\n-\n+        String name_,\n+        uint16_t character_set_,\n+        uint32_t column_length_,\n+        ColumnType column_type_,\n+        uint16_t flags_,\n+        uint8_t decimals_);\n };\n \n-ColumnDefinition getColumnDefinition(const String & column_name, const TypeIndex index);\n+ColumnDefinition getColumnDefinition(const String & column_name, const DataTypePtr & data_type);\n \n }\n \ndiff --git a/src/DataTypes/DataTypesDecimal.cpp b/src/DataTypes/DataTypesDecimal.cpp\nindex 6529ce094566..49214f4aa459 100644\n--- a/src/DataTypes/DataTypesDecimal.cpp\n+++ b/src/DataTypes/DataTypesDecimal.cpp\n@@ -31,6 +31,12 @@ std::string DataTypeDecimal<T>::doGetName() const\n template <is_decimal T>\n std::string DataTypeDecimal<T>::getSQLCompatibleName() const\n {\n+    /// See https://dev.mysql.com/doc/refman/8.0/en/precision-math-decimal-characteristics.html\n+    /// DECIMAL(M,D)\n+    /// M is the maximum number of digits (the precision). It has a range of 1 to 65.\n+    /// D is the number of digits to the right of the decimal point (the scale). It has a range of 0 to 30 and must be no larger than M.\n+    if (this->precision > 65 || this->scale > 30)\n+        return \"TEXT\";\n     return fmt::format(\"DECIMAL({}, {})\", this->precision, this->scale);\n }\n \ndiff --git a/src/Formats/FormatSettings.h b/src/Formats/FormatSettings.h\nindex c2744f680882..db35f8925a50 100644\n--- a/src/Formats/FormatSettings.h\n+++ b/src/Formats/FormatSettings.h\n@@ -288,6 +288,14 @@ struct FormatSettings\n         uint32_t client_capabilities = 0;\n         size_t max_packet_size = 0;\n         uint8_t * sequence_id = nullptr; /// Not null if it's MySQLWire output format used to handle MySQL protocol connections.\n+        /**\n+         * COM_QUERY uses Text ResultSet\n+         * https://dev.mysql.com/doc/dev/mysql-server/latest/page_protocol_com_query_response_text_resultset.html\n+         * COM_STMT_EXECUTE uses Binary Protocol ResultSet\n+         * https://dev.mysql.com/doc/dev/mysql-server/latest/page_protocol_com_stmt_execute_response.html\n+         * By default, use Text ResultSet.\n+         */\n+        bool binary_protocol = false;\n     } mysql_wire;\n \n     struct\ndiff --git a/src/Interpreters/InterpreterShowColumnsQuery.cpp b/src/Interpreters/InterpreterShowColumnsQuery.cpp\nindex c86d3c753c49..e1f736ba4fb3 100644\n--- a/src/Interpreters/InterpreterShowColumnsQuery.cpp\n+++ b/src/Interpreters/InterpreterShowColumnsQuery.cpp\n@@ -37,11 +37,14 @@ String InterpreterShowColumnsQuery::getRewrittenQuery()\n SELECT\n     name AS field,\n     type AS type,\n-    startsWith(type, 'Nullable') AS null,\n+    if (startsWith(type, 'Nullable'), 'YES', 'NO') AS `null`,\n     trim(concatWithSeparator(' ', if (is_in_primary_key, 'PRI', ''), if (is_in_sorting_key, 'SOR', ''))) AS key,\n     if (default_kind IN ('ALIAS', 'DEFAULT', 'MATERIALIZED'), default_expression, NULL) AS default,\n     '' AS extra )\";\n \n+    // Known issue: Field 'null' is wrong for types like 'LowCardinality(Nullable(String))'. Can't simply replace 'startsWith' by\n+    // `hasSubsequence` as that would return `true` for non-nullable types such as `Tuple(Nullable(String), String)`...\n+\n     // TODO Interpret query.extended. It is supposed to show internal/virtual columns. Need to fetch virtual column names, see\n     // IStorage::getVirtuals(). We can't easily do that via SQL.\n \ndiff --git a/src/Processors/Formats/Impl/MySQLOutputFormat.cpp b/src/Processors/Formats/Impl/MySQLOutputFormat.cpp\nindex f2157f63c252..87c8c742f8db 100644\n--- a/src/Processors/Formats/Impl/MySQLOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/MySQLOutputFormat.cpp\n@@ -1,19 +1,19 @@\n #include <Processors/Formats/Impl/MySQLOutputFormat.h>\n #include <Core/MySQL/PacketsGeneric.h>\n+#include <Core/MySQL/PacketsProtocolBinary.h>\n #include <Core/MySQL/PacketsProtocolText.h>\n #include <Formats/FormatFactory.h>\n #include <Formats/FormatSettings.h>\n #include <Interpreters/Context.h>\n #include <Interpreters/ProcessList.h>\n \n-\n namespace DB\n {\n \n using namespace MySQLProtocol;\n using namespace MySQLProtocol::Generic;\n using namespace MySQLProtocol::ProtocolText;\n-\n+using namespace MySQLProtocol::ProtocolBinary;\n \n MySQLOutputFormat::MySQLOutputFormat(WriteBuffer & out_, const Block & header_, const FormatSettings & settings_)\n     : IOutputFormat(header_, out_)\n@@ -24,6 +24,8 @@ MySQLOutputFormat::MySQLOutputFormat(WriteBuffer & out_, const Block & header_,\n     /// But it's also possible to specify MySQLWire as output format for clickhouse-client or clickhouse-local.\n     /// There is no `sequence_id` stored in `settings_.mysql_wire` in this case, so we create a dummy one.\n     sequence_id = settings_.mysql_wire.sequence_id ? settings_.mysql_wire.sequence_id : &dummy_sequence_id;\n+    /// Switch between Text (COM_QUERY) and Binary (COM_EXECUTE_STMT) ResultSet\n+    use_binary_result_set = settings_.mysql_wire.binary_protocol;\n \n     const auto & header = getPort(PortKind::Main).getHeader();\n     data_types = header.getDataTypes();\n@@ -51,10 +53,10 @@ void MySQLOutputFormat::writePrefix()\n         for (size_t i = 0; i < header.columns(); ++i)\n         {\n             const auto & column_name = header.getColumnsWithTypeAndName()[i].name;\n-            packet_endpoint->sendPacket(getColumnDefinition(column_name, data_types[i]->getTypeId()));\n+            packet_endpoint->sendPacket(getColumnDefinition(column_name, data_types[i]));\n         }\n \n-        if (!(client_capabilities & Capability::CLIENT_DEPRECATE_EOF))\n+        if (!(client_capabilities & Capability::CLIENT_DEPRECATE_EOF) && !use_binary_result_set)\n         {\n             packet_endpoint->sendPacket(EOFPacket(0, 0));\n         }\n@@ -63,39 +65,67 @@ void MySQLOutputFormat::writePrefix()\n \n void MySQLOutputFormat::consume(Chunk chunk)\n {\n-    for (size_t i = 0; i < chunk.getNumRows(); ++i)\n+    if (!use_binary_result_set)\n     {\n-        ProtocolText::ResultSetRow row_packet(serializations, chunk.getColumns(), static_cast<int>(i));\n-        packet_endpoint->sendPacket(row_packet);\n+        for (size_t i = 0; i < chunk.getNumRows(); ++i)\n+        {\n+            ProtocolText::ResultSetRow row_packet(serializations, chunk.getColumns(), static_cast<int>(i));\n+            packet_endpoint->sendPacket(row_packet);\n+        }\n+    }\n+    else\n+    {\n+        for (size_t i = 0; i < chunk.getNumRows(); ++i)\n+        {\n+            ProtocolBinary::ResultSetRow row_packet(serializations, data_types, chunk.getColumns(), static_cast<int>(i));\n+            packet_endpoint->sendPacket(row_packet);\n+        }\n     }\n }\n \n void MySQLOutputFormat::finalizeImpl()\n {\n-    size_t affected_rows = 0;\n-    std::string human_readable_info;\n-    if (QueryStatusPtr process_list_elem = getContext()->getProcessListElement())\n+    if (!use_binary_result_set)\n     {\n-        CurrentThread::finalizePerformanceCounters();\n-        QueryStatusInfo info = process_list_elem->getInfo();\n-        affected_rows = info.written_rows;\n-        double elapsed_seconds = static_cast<double>(info.elapsed_microseconds) / 1000000.0;\n-        human_readable_info = fmt::format(\n-            \"Read {} rows, {} in {} sec., {} rows/sec., {}/sec.\",\n-            info.read_rows,\n-            ReadableSize(info.read_bytes),\n-            elapsed_seconds,\n-            static_cast<size_t>(info.read_rows / elapsed_seconds),\n-            ReadableSize(info.read_bytes / elapsed_seconds));\n-    }\n+        size_t affected_rows = 0;\n+        std::string human_readable_info;\n+        if (QueryStatusPtr process_list_elem = getContext()->getProcessListElement())\n+        {\n+            CurrentThread::finalizePerformanceCounters();\n+            QueryStatusInfo info = process_list_elem->getInfo();\n+            affected_rows = info.written_rows;\n+            double elapsed_seconds = static_cast<double>(info.elapsed_microseconds) / 1000000.0;\n+            human_readable_info = fmt::format(\n+                \"Read {} rows, {} in {} sec., {} rows/sec., {}/sec.\",\n+                info.read_rows,\n+                ReadableSize(info.read_bytes),\n+                elapsed_seconds,\n+                static_cast<size_t>(info.read_rows / elapsed_seconds),\n+                ReadableSize(info.read_bytes / elapsed_seconds));\n+        }\n \n-    const auto & header = getPort(PortKind::Main).getHeader();\n-    if (header.columns() == 0)\n-        packet_endpoint->sendPacket(OKPacket(0x0, client_capabilities, affected_rows, 0, 0, \"\", human_readable_info), true);\n-    else if (client_capabilities & CLIENT_DEPRECATE_EOF)\n-        packet_endpoint->sendPacket(OKPacket(0xfe, client_capabilities, affected_rows, 0, 0, \"\", human_readable_info), true);\n+        const auto & header = getPort(PortKind::Main).getHeader();\n+        if (header.columns() == 0)\n+            packet_endpoint->sendPacket(OKPacket(0x0, client_capabilities, affected_rows, 0, 0, \"\", human_readable_info), true);\n+        else if (client_capabilities & CLIENT_DEPRECATE_EOF)\n+            packet_endpoint->sendPacket(OKPacket(0xfe, client_capabilities, affected_rows, 0, 0, \"\", human_readable_info), true);\n+        else\n+            packet_endpoint->sendPacket(EOFPacket(0, 0), true);\n+    }\n     else\n-        packet_endpoint->sendPacket(EOFPacket(0, 0), true);\n+    {\n+        size_t affected_rows = 0;\n+        if (QueryStatusPtr process_list_elem = getContext()->getProcessListElement())\n+        {\n+            CurrentThread::finalizePerformanceCounters();\n+            QueryStatusInfo info = process_list_elem->getInfo();\n+            affected_rows = info.written_rows;\n+        }\n+        if (client_capabilities & CLIENT_DEPRECATE_EOF)\n+            packet_endpoint->sendPacket(OKPacket(0xfe, client_capabilities, affected_rows, 0, 0, \"\", \"\"), true);\n+        else\n+            packet_endpoint->sendPacket(EOFPacket(0, 0), true);\n+    }\n }\n \n void MySQLOutputFormat::flush()\ndiff --git a/src/Processors/Formats/Impl/MySQLOutputFormat.h b/src/Processors/Formats/Impl/MySQLOutputFormat.h\nindex 9481ef670703..6161b6bdc14f 100644\n--- a/src/Processors/Formats/Impl/MySQLOutputFormat.h\n+++ b/src/Processors/Formats/Impl/MySQLOutputFormat.h\n@@ -1,7 +1,7 @@\n #pragma once\n \n-#include <Processors/Formats/IRowOutputFormat.h>\n #include <Core/Block.h>\n+#include <Processors/Formats/IRowOutputFormat.h>\n \n #include <Core/MySQL/PacketEndpoint.h>\n #include <Processors/Formats/IOutputFormat.h>\n@@ -39,6 +39,7 @@ class MySQLOutputFormat final : public IOutputFormat, WithContext\n     MySQLProtocol::PacketEndpointPtr packet_endpoint;\n     DataTypes data_types;\n     Serializations serializations;\n+    bool use_binary_result_set = false;\n };\n \n }\ndiff --git a/src/Server/MySQLHandler.cpp b/src/Server/MySQLHandler.cpp\nindex f98b86e6cf82..f9155a07e2b5 100644\n--- a/src/Server/MySQLHandler.cpp\n+++ b/src/Server/MySQLHandler.cpp\n@@ -1,28 +1,30 @@\n #include \"MySQLHandler.h\"\n \n #include <limits>\n-#include <Common/NetException.h>\n-#include <Common/OpenSSLHelpers.h>\n-#include <Core/MySQL/PacketsGeneric.h>\n+#include <optional>\n+#include <regex>\n+#include <Core/MySQL/Authentication.h>\n #include <Core/MySQL/PacketsConnection.h>\n+#include <Core/MySQL/PacketsGeneric.h>\n+#include <Core/MySQL/PacketsPreparedStatements.h>\n #include <Core/MySQL/PacketsProtocolText.h>\n #include <Core/NamesAndTypes.h>\n-#include <Interpreters/Session.h>\n-#include <Interpreters/executeQuery.h>\n-#include <IO/copyData.h>\n #include <IO/LimitReadBuffer.h>\n #include <IO/ReadBufferFromPocoSocket.h>\n #include <IO/ReadBufferFromString.h>\n+#include <IO/ReadHelpers.h>\n #include <IO/WriteBufferFromPocoSocket.h>\n #include <IO/WriteBufferFromString.h>\n-#include <IO/ReadHelpers.h>\n+#include <IO/copyData.h>\n+#include <Interpreters/Session.h>\n+#include <Interpreters/executeQuery.h>\n #include <Server/TCPServer.h>\n #include <Storages/IStorage.h>\n-#include <regex>\n-#include <Common/setThreadName.h>\n-#include <Core/MySQL/Authentication.h>\n-#include <Common/logger_useful.h>\n #include <base/scope_guard.h>\n+#include <Common/NetException.h>\n+#include <Common/OpenSSLHelpers.h>\n+#include <Common/logger_useful.h>\n+#include <Common/setThreadName.h>\n \n #include \"config_version.h\"\n \n@@ -40,6 +42,7 @@ using namespace MySQLProtocol;\n using namespace MySQLProtocol::Generic;\n using namespace MySQLProtocol::ProtocolText;\n using namespace MySQLProtocol::ConnectionPhase;\n+using namespace MySQLProtocol::PreparedStatements;\n \n #if USE_SSL\n using Poco::Net::SecureStreamSocket;\n@@ -173,7 +176,7 @@ void MySQLHandler::run()\n                         comInitDB(limited_payload);\n                         break;\n                     case COM_QUERY:\n-                        comQuery(payload);\n+                        comQuery(payload, false);\n                         break;\n                     case COM_FIELD_LIST:\n                         comFieldList(limited_payload);\n@@ -181,6 +184,15 @@ void MySQLHandler::run()\n                     case COM_PING:\n                         comPing();\n                         break;\n+                    case COM_STMT_PREPARE:\n+                        comStmtPrepare(payload);\n+                        break;\n+                    case COM_STMT_EXECUTE:\n+                        comStmtExecute(payload);\n+                        break;\n+                    case COM_STMT_CLOSE:\n+                        comStmtClose(payload);\n+                        break;\n                     default:\n                         throw Exception(ErrorCodes::NOT_IMPLEMENTED, \"Command {} is not implemented.\", command);\n                 }\n@@ -254,7 +266,8 @@ void MySQLHandler::authenticate(const String & user_name, const String & auth_pl\n {\n     try\n     {\n-        // For compatibility with JavaScript MySQL client, Native41 authentication plugin is used when possible (if password is specified using double SHA1). Otherwise SHA256 plugin is used.\n+        // For compatibility with JavaScript MySQL client, Native41 authentication plugin is used when possible\n+        // (if password is specified using double SHA1). Otherwise, SHA256 plugin is used.\n         if (session->getAuthenticationTypeOrLogInFailure(user_name) == DB::AuthenticationType::SHA256_PASSWORD)\n         {\n             authPluginSSL();\n@@ -306,7 +319,7 @@ void MySQLHandler::comPing()\n \n static bool isFederatedServerSetupSetCommand(const String & query);\n \n-void MySQLHandler::comQuery(ReadBuffer & payload)\n+void MySQLHandler::comQuery(ReadBuffer & payload, bool binary_protocol)\n {\n     String query = String(payload.position(), payload.buffer().end());\n \n@@ -352,6 +365,7 @@ void MySQLHandler::comQuery(ReadBuffer & payload)\n         format_settings.mysql_wire.client_capabilities = client_capabilities;\n         format_settings.mysql_wire.max_packet_size = max_packet_size;\n         format_settings.mysql_wire.sequence_id = &sequence_id;\n+        format_settings.mysql_wire.binary_protocol = binary_protocol;\n \n         auto set_result_details = [&with_output](const QueryResultDetails & details)\n         {\n@@ -371,6 +385,90 @@ void MySQLHandler::comQuery(ReadBuffer & payload)\n     }\n }\n \n+void MySQLHandler::comStmtPrepare(DB::ReadBuffer & payload)\n+{\n+    String statement;\n+    readStringUntilEOF(statement, payload);\n+\n+    auto statement_id_opt = emplacePreparedStatement(std::move(statement));\n+    if (statement_id_opt.has_value())\n+        packet_endpoint->sendPacket(PreparedStatementResponseOK(statement_id_opt.value(), 0, 0, 0), true);\n+    else\n+        packet_endpoint->sendPacket(ERRPacket(), true);\n+}\n+\n+void MySQLHandler::comStmtExecute(ReadBuffer & payload)\n+{\n+    uint32_t statement_id;\n+    payload.readStrict(reinterpret_cast<char *>(&statement_id), 4);\n+\n+    auto statement_opt = getPreparedStatement(statement_id);\n+    if (statement_opt.has_value())\n+        MySQLHandler::comQuery(statement_opt.value(), true);\n+    else\n+        packet_endpoint->sendPacket(ERRPacket(), true);\n+};\n+\n+void MySQLHandler::comStmtClose(ReadBuffer & payload)\n+{\n+    uint32_t statement_id;\n+    payload.readStrict(reinterpret_cast<char *>(&statement_id), 4);\n+\n+    // https://dev.mysql.com/doc/dev/mysql-server/latest/page_protocol_com_stmt_close.html\n+    // No response packet is sent back to the client.\n+    erasePreparedStatement(statement_id);\n+};\n+\n+std::optional<UInt32> MySQLHandler::emplacePreparedStatement(String statement)\n+{\n+    static constexpr size_t MAX_PREPARED_STATEMENTS = 10'000;\n+    std::lock_guard<std::mutex> lock(prepared_statements_mutex);\n+    if (prepared_statements.size() > MAX_PREPARED_STATEMENTS) /// Shouldn't happen in reality as COM_STMT_CLOSE cleans up the elements\n+    {\n+        LOG_ERROR(log, \"Too many prepared statements\");\n+        current_prepared_statement_id = 0;\n+        prepared_statements.clear();\n+        return {};\n+    }\n+\n+    uint32_t statement_id = current_prepared_statement_id;\n+    ++current_prepared_statement_id;\n+\n+    // Key collisions should not happen here, as we remove the elements from the map with COM_STMT_CLOSE,\n+    // and we have quite a big range of available identifiers with 32-bit unsigned integer\n+    if (prepared_statements.contains(statement_id))\n+    {\n+        LOG_ERROR(\n+            log,\n+            \"Failed to store a new statement `{}` with id {}; it is already taken by `{}`\",\n+            statement,\n+            statement_id,\n+            prepared_statements.at(statement_id));\n+        return {};\n+    }\n+\n+    prepared_statements.emplace(statement_id, statement);\n+    return std::make_optional(statement_id);\n+};\n+\n+std::optional<ReadBufferFromString> MySQLHandler::getPreparedStatement(UInt32 statement_id)\n+{\n+    std::lock_guard<std::mutex> lock(prepared_statements_mutex);\n+    if (!prepared_statements.contains(statement_id))\n+    {\n+        LOG_ERROR(log, \"Could not find prepared statement with id {}\", statement_id);\n+        return {};\n+    }\n+    // Temporary workaround as we work only with queries that do not bind any parameters atm\n+    return std::make_optional<ReadBufferFromString>(prepared_statements.at(statement_id));\n+}\n+\n+void MySQLHandler::erasePreparedStatement(UInt32 statement_id)\n+{\n+    std::lock_guard<std::mutex> lock(prepared_statements_mutex);\n+    prepared_statements.erase(statement_id);\n+}\n+\n void MySQLHandler::authPluginSSL()\n {\n     throw Exception(ErrorCodes::SUPPORT_IS_DISABLED,\ndiff --git a/src/Server/MySQLHandler.h b/src/Server/MySQLHandler.h\nindex 3366e8792c9e..194b18bdc39f 100644\n--- a/src/Server/MySQLHandler.h\n+++ b/src/Server/MySQLHandler.h\n@@ -1,14 +1,17 @@\n #pragma once\n \n-#include <Poco/Net/TCPServerConnection.h>\n-#include <base/getFQDNOrHostName.h>\n-#include <Common/CurrentMetrics.h>\n+#include <optional>\n #include <Core/MySQL/Authentication.h>\n-#include <Core/MySQL/PacketsGeneric.h>\n #include <Core/MySQL/PacketsConnection.h>\n+#include <Core/MySQL/PacketsGeneric.h>\n #include <Core/MySQL/PacketsProtocolText.h>\n+#include <base/getFQDNOrHostName.h>\n+#include <Poco/Net/TCPServerConnection.h>\n+#include <Common/CurrentMetrics.h>\n+#include \"IO/ReadBufferFromString.h\"\n #include \"IServer.h\"\n \n+#include \"base/types.h\"\n #include \"config.h\"\n \n #if USE_SSL\n@@ -30,6 +33,9 @@ class TCPServer;\n /// Handler for MySQL wire protocol connections. Allows to connect to ClickHouse using MySQL client.\n class MySQLHandler : public Poco::Net::TCPServerConnection\n {\n+    /// statement_id -> statement\n+    using PreparedStatements = std::unordered_map<UInt32, String>;\n+\n public:\n     MySQLHandler(\n         IServer & server_,\n@@ -46,7 +52,7 @@ class MySQLHandler : public Poco::Net::TCPServerConnection\n     /// Enables SSL, if client requested.\n     void finishHandshake(MySQLProtocol::ConnectionPhase::HandshakeResponse &);\n \n-    void comQuery(ReadBuffer & payload);\n+    void comQuery(ReadBuffer & payload, bool binary_protocol);\n \n     void comFieldList(ReadBuffer & payload);\n \n@@ -56,6 +62,18 @@ class MySQLHandler : public Poco::Net::TCPServerConnection\n \n     void authenticate(const String & user_name, const String & auth_plugin_name, const String & auth_response);\n \n+    void comStmtPrepare(ReadBuffer & payload);\n+\n+    void comStmtExecute(ReadBuffer & payload);\n+\n+    void comStmtClose(ReadBuffer & payload);\n+\n+    /// Contains statement_id if the statement was emplaced successfully\n+    std::optional<UInt32> emplacePreparedStatement(String statement);\n+    /// Contains statement as a buffer if we could find previously stored statement using provided statement_id\n+    std::optional<ReadBufferFromString> getPreparedStatement(UInt32 statement_id);\n+    void erasePreparedStatement(UInt32 statement_id);\n+\n     virtual void authPluginSSL();\n     virtual void finishHandshakeSSL(size_t packet_size, char * buf, size_t pos, std::function<void(size_t)> read_bytes, MySQLProtocol::ConnectionPhase::HandshakeResponse & packet);\n \n@@ -76,6 +94,10 @@ class MySQLHandler : public Poco::Net::TCPServerConnection\n     using Replacements = std::unordered_map<std::string, ReplacementFn>;\n     Replacements replacements;\n \n+    std::mutex prepared_statements_mutex;\n+    UInt32 current_prepared_statement_id TSA_GUARDED_BY(prepared_statements_mutex) = 0;\n+    PreparedStatements prepared_statements TSA_GUARDED_BY(prepared_statements_mutex);\n+\n     std::unique_ptr<MySQLProtocol::Authentication::IPlugin> auth_plugin;\n     std::shared_ptr<ReadBufferFromPocoSocket> in;\n     std::shared_ptr<WriteBuffer> out;\n",
  "test_patch": "diff --git a/docker/test/integration/mysql_java_client/Dockerfile b/docker/test/integration/mysql_java_client/Dockerfile\nindex 0abf50cd4937..83c175514814 100644\n--- a/docker/test/integration/mysql_java_client/Dockerfile\n+++ b/docker/test/integration/mysql_java_client/Dockerfile\n@@ -1,21 +1,15 @@\n # docker build -t clickhouse/mysql-java-client .\n # MySQL Java client docker container\n \n-FROM ubuntu:18.04\n+FROM openjdk:8-jdk-alpine\n \n-RUN apt-get update && \\\n-    apt-get install -y software-properties-common build-essential openjdk-8-jdk libmysql-java curl\n+RUN apk --no-cache add curl\n \n-RUN rm -rf \\\n-        /var/lib/apt/lists/* \\\n-        /var/cache/debconf \\\n-        /tmp/* \\\n-RUN apt-get clean\n-\n-ARG ver=5.1.46\n-RUN curl -L -o /mysql-connector-java-${ver}.jar https://repo1.maven.org/maven2/mysql/mysql-connector-java/${ver}/mysql-connector-java-${ver}.jar\n-ENV CLASSPATH=$CLASSPATH:/mysql-connector-java-${ver}.jar\n+ARG ver=8.1.0\n+RUN curl -L -o /mysql-connector-j-${ver}.jar https://repo1.maven.org/maven2/com/mysql/mysql-connector-j/${ver}/mysql-connector-j-${ver}.jar\n+ENV CLASSPATH=$CLASSPATH:/mysql-connector-j-${ver}.jar\n \n WORKDIR /jdbc\n COPY Test.java Test.java\n-RUN javac Test.java\n+COPY PreparedStatementsTest.java PreparedStatementsTest.java\n+RUN javac Test.java PreparedStatementsTest.java\ndiff --git a/docker/test/integration/mysql_java_client/PreparedStatementsTest.java b/docker/test/integration/mysql_java_client/PreparedStatementsTest.java\nnew file mode 100644\nindex 000000000000..1ffa945718d7\n--- /dev/null\n+++ b/docker/test/integration/mysql_java_client/PreparedStatementsTest.java\n@@ -0,0 +1,193 @@\n+import com.mysql.cj.MysqlType;\n+\n+import java.sql.*;\n+\n+public class PreparedStatementsTest {\n+    public static void main(String[] args) {\n+        int i = 0;\n+        String host = \"127.0.0.1\";\n+        String port = \"9004\";\n+        String user = \"default\";\n+        String password = \"\";\n+        String database = \"default\";\n+        while (i < args.length) {\n+            switch (args[i]) {\n+                case \"--host\":\n+                    host = args[++i];\n+                    break;\n+                case \"--port\":\n+                    port = args[++i];\n+                    break;\n+                case \"--user\":\n+                    user = args[++i];\n+                    break;\n+                case \"--password\":\n+                    password = args[++i];\n+                    break;\n+                case \"--database\":\n+                    database = args[++i];\n+                    break;\n+                default:\n+                    i++;\n+                    break;\n+            }\n+        }\n+\n+        // useServerPrepStmts uses COM_STMT_PREPARE and COM_STMT_EXECUTE\n+        // instead of COM_QUERY which allows us to test the binary protocol\n+        String jdbcUrl = String.format(\"jdbc:mysql://%s:%s/%s?useSSL=false&useServerPrepStmts=true\",\n+                host, port, database);\n+\n+        try {\n+            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n+            Connection conn = DriverManager.getConnection(jdbcUrl, user, password);\n+            testSimpleDataTypes(conn);\n+            testStringTypes(conn);\n+            testLowCardinalityAndNullableTypes(conn);\n+            testDecimalTypes(conn);\n+            testMiscTypes(conn);\n+            testDateTypes(conn);\n+            testUnusualDateTime64Scales(conn);\n+            testDateTimeTimezones(conn);\n+            conn.close();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+            System.exit(1);\n+        }\n+    }\n+\n+    private static void testSimpleDataTypes(Connection conn) throws SQLException {\n+        System.out.println(\"### testSimpleDataTypes\");\n+        ResultSet rs = conn.prepareStatement(\"SELECT * FROM ps_simple_data_types\").executeQuery();\n+        int rowNum = 1;\n+        while (rs.next()) {\n+            System.out.printf(\"Row #%d\\n\", rowNum++);\n+            System.out.printf(\"%s, value: %d\\n\", getMysqlType(rs, \"i8\"), rs.getInt(\"i8\"));\n+            System.out.printf(\"%s, value: %d\\n\", getMysqlType(rs, \"i16\"), rs.getInt(\"i16\"));\n+            System.out.printf(\"%s, value: %d\\n\", getMysqlType(rs, \"i32\"), rs.getInt(\"i32\"));\n+            System.out.printf(\"%s, value: %d\\n\", getMysqlType(rs, \"i64\"), rs.getLong(\"i64\"));\n+            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"i128\"), rs.getString(\"i128\"));\n+            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"i256\"), rs.getString(\"i256\"));\n+            System.out.printf(\"%s, value: %d\\n\", getMysqlType(rs, \"ui8\"), rs.getInt(\"ui8\"));\n+            System.out.printf(\"%s, value: %d\\n\", getMysqlType(rs, \"ui16\"), rs.getInt(\"ui16\"));\n+            System.out.printf(\"%s, value: %d\\n\", getMysqlType(rs, \"ui32\"), rs.getLong(\"ui32\"));\n+            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"ui64\"), rs.getString(\"ui64\"));\n+            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"ui128\"), rs.getString(\"ui128\"));\n+            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"ui256\"), rs.getString(\"ui256\"));\n+            System.out.printf(\"%s, value: %f\\n\", getMysqlType(rs, \"f32\"), rs.getFloat(\"f32\"));\n+            System.out.printf(\"%s, value: %f\\n\", getMysqlType(rs, \"f64\"), rs.getFloat(\"f64\"));\n+            System.out.printf(\"%s, value: %b\\n\", getMysqlType(rs, \"b\"), rs.getBoolean(\"b\"));\n+        }\n+        System.out.println();\n+    }\n+\n+    private static void testStringTypes(Connection conn) throws SQLException {\n+        System.out.println(\"### testStringTypes\");\n+        ResultSet rs = conn.prepareStatement(\"SELECT * FROM ps_string_types\").executeQuery();\n+        int rowNum = 1;\n+        while (rs.next()) {\n+            System.out.printf(\"Row #%d\\n\", rowNum++);\n+            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"s\"), rs.getString(\"s\"));\n+            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"sn\"), rs.getString(\"sn\"));\n+            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"lc\"), rs.getString(\"lc\"));\n+            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"nlc\"), rs.getString(\"nlc\"));\n+        }\n+        System.out.println();\n+    }\n+\n+    private static void testLowCardinalityAndNullableTypes(Connection conn) throws SQLException {\n+        System.out.println(\"### testLowCardinalityAndNullableTypes\");\n+        ResultSet rs = conn.prepareStatement(\"SELECT * FROM ps_low_cardinality_and_nullable_types\").executeQuery();\n+        int rowNum = 1;\n+        while (rs.next()) {\n+            System.out.printf(\"Row #%d\\n\", rowNum++);\n+            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"ilc\"), rs.getInt(\"ilc\"));\n+            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"dlc\"), rs.getDate(\"dlc\"));\n+            // NULL int is represented as zero\n+            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"ni\"), rs.getInt(\"ni\"));\n+        }\n+        System.out.println();\n+    }\n+\n+    private static void testDecimalTypes(Connection conn) throws SQLException {\n+        System.out.println(\"### testDecimalTypes\");\n+        ResultSet rs = conn.prepareStatement(\"SELECT * FROM ps_decimal_types\").executeQuery();\n+        int rowNum = 1;\n+        while (rs.next()) {\n+            System.out.printf(\"Row #%d\\n\", rowNum++);\n+            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"d32\"), rs.getBigDecimal(\"d32\").toPlainString());\n+            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"d64\"), rs.getBigDecimal(\"d64\").toPlainString());\n+            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"d128_native\"),\n+                    rs.getBigDecimal(\"d128_native\").toPlainString());\n+            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"d128_text\"), rs.getString(\"d128_text\"));\n+            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"d256\"), rs.getString(\"d256\"));\n+        }\n+        System.out.println();\n+    }\n+\n+    private static void testDateTypes(Connection conn) throws SQLException {\n+        System.out.println(\"### testDateTypes\");\n+        ResultSet rs = conn.prepareStatement(\"SELECT * FROM ps_date_types\").executeQuery();\n+        int rowNum = 1;\n+        while (rs.next()) {\n+            System.out.printf(\"Row #%d\\n\", rowNum++);\n+            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"d\"), rs.getDate(\"d\"));\n+            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"d32\"), rs.getDate(\"d32\"));\n+            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"dt\"), rs.getTimestamp(\"dt\"));\n+            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"dt64_3\"), rs.getTimestamp(\"dt64_3\"));\n+            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"dt64_6\"), rs.getTimestamp(\"dt64_6\"));\n+            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"dt64_9\"), rs.getTimestamp(\"dt64_9\"));\n+        }\n+        System.out.println();\n+    }\n+\n+    private static void testUnusualDateTime64Scales(Connection conn) throws SQLException {\n+        System.out.println(\"### testUnusualDateTime64Scales\");\n+        ResultSet rs = conn.prepareStatement(\"SELECT * FROM ps_unusual_datetime64_scales\").executeQuery();\n+        int rowNum = 1;\n+        while (rs.next()) {\n+            System.out.printf(\"Row #%d\\n\", rowNum++);\n+            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"dt64_0\"), rs.getTimestamp(\"dt64_0\"));\n+            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"dt64_1\"), rs.getTimestamp(\"dt64_1\"));\n+            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"dt64_2\"), rs.getTimestamp(\"dt64_2\"));\n+            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"dt64_4\"), rs.getTimestamp(\"dt64_4\"));\n+            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"dt64_5\"), rs.getTimestamp(\"dt64_5\"));\n+            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"dt64_7\"), rs.getTimestamp(\"dt64_7\"));\n+            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"dt64_8\"), rs.getTimestamp(\"dt64_8\"));\n+        }\n+        System.out.println();\n+    }\n+\n+    private static void testDateTimeTimezones(Connection conn) throws SQLException {\n+        System.out.println(\"### testDateTimeTimezones\");\n+        ResultSet rs = conn.prepareStatement(\"SELECT * FROM ps_datetime_timezones\").executeQuery();\n+        int rowNum = 1;\n+        while (rs.next()) {\n+            System.out.printf(\"Row #%d\\n\", rowNum++);\n+            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"dt\"), rs.getTimestamp(\"dt\"));\n+            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"dt64_3\"), rs.getTimestamp(\"dt64_3\"));\n+        }\n+        System.out.println();\n+    }\n+\n+    private static void testMiscTypes(Connection conn) throws SQLException {\n+        System.out.println(\"### testMiscTypes\");\n+        ResultSet rs = conn.prepareStatement(\"SELECT * FROM ps_misc_types\").executeQuery();\n+        int rowNum = 1;\n+        while (rs.next()) {\n+            System.out.printf(\"Row #%d\\n\", rowNum++);\n+            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"a\"), rs.getString(\"a\"));\n+            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"u\"), rs.getString(\"u\"));\n+            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"t\"), rs.getString(\"t\"));\n+            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"m\"), rs.getString(\"m\"));\n+        }\n+        System.out.println();\n+    }\n+\n+    private static String getMysqlType(ResultSet rs, String columnLabel) throws SQLException {\n+        ResultSetMetaData meta = rs.getMetaData();\n+        return String.format(\"%s type is %s\", columnLabel,\n+                MysqlType.getByJdbcType(meta.getColumnType(rs.findColumn(columnLabel))));\n+    }\n+\n+}\ndiff --git a/docker/test/integration/mysql_java_client/Test.java b/docker/test/integration/mysql_java_client/Test.java\nindex 2e256d5dc446..752441718a98 100644\n--- a/docker/test/integration/mysql_java_client/Test.java\n+++ b/docker/test/integration/mysql_java_client/Test.java\n@@ -46,6 +46,7 @@ public static void main(String[] args) {\n         Connection conn = null;\n         Statement stmt = null;\n         try {\n+            Class.forName(\"com.mysql.cj.jdbc.Driver\");\n             conn = DriverManager.getConnection(jdbcUrl, user, password);\n             stmt = conn.createStatement();\n             stmt.executeUpdate(CREATE_TABLE_SQL);\n@@ -69,7 +70,7 @@ public static void main(String[] args) {\n \n             stmt.close();\n             conn.close();\n-        } catch (SQLException e) {\n+        } catch (Exception e) {\n             e.printStackTrace();\n             System.exit(1);\n         }\ndiff --git a/docker/test/integration/runner/compose/docker_compose_mysql_java_client.yml b/docker/test/integration/runner/compose/docker_compose_mysql_java_client.yml\nindex eb5ffb01baa2..529974dd4bfe 100644\n--- a/docker/test/integration/runner/compose/docker_compose_mysql_java_client.yml\n+++ b/docker/test/integration/runner/compose/docker_compose_mysql_java_client.yml\n@@ -3,4 +3,4 @@ services:\n   java1:\n     image: clickhouse/mysql-java-client:${DOCKER_MYSQL_JAVA_CLIENT_TAG:-latest}\n     # to keep container running\n-    command: sleep infinity\n+    command: sleep 1d\ndiff --git a/tests/integration/test_mysql_protocol/prepared_statements.reference b/tests/integration/test_mysql_protocol/prepared_statements.reference\nnew file mode 100644\nindex 000000000000..2cb6e7f53396\n--- /dev/null\n+++ b/tests/integration/test_mysql_protocol/prepared_statements.reference\n@@ -0,0 +1,119 @@\n+### testSimpleDataTypes\n+Row #1\n+i8 type is TINYINT, value: -128\n+i16 type is SMALLINT, value: -32768\n+i32 type is INT, value: -2147483648\n+i64 type is BIGINT, value: -9223372036854775808\n+i128 type is CHAR, value: -170141183460469231731687303715884105728\n+i256 type is CHAR, value: -57896044618658097711785492504343953926634992332820282019728792003956564819968\n+ui8 type is TINYINT, value: 120\n+ui16 type is SMALLINT, value: 1234\n+ui32 type is INT, value: 51234\n+ui64 type is BIGINT, value: 421342\n+ui128 type is CHAR, value: 15324355\n+ui256 type is CHAR, value: 41345135123432\n+f32 type is FLOAT, value: -0.796896\n+f64 type is DOUBLE, value: -0.113259\n+b type is BIT, value: true\n+Row #2\n+i8 type is TINYINT, value: 127\n+i16 type is SMALLINT, value: 32767\n+i32 type is INT, value: 2147483647\n+i64 type is BIGINT, value: 9223372036854775807\n+i128 type is CHAR, value: 170141183460469231731687303715884105727\n+i256 type is CHAR, value: 57896044618658097711785492504343953926634992332820282019728792003956564819967\n+ui8 type is TINYINT, value: 255\n+ui16 type is SMALLINT, value: 65535\n+ui32 type is INT, value: 4294967295\n+ui64 type is BIGINT, value: 18446744073709551615\n+ui128 type is CHAR, value: 340282366920938463463374607431768211455\n+ui256 type is CHAR, value: 115792089237316195423570985008687907853269984665640564039457584007913129639935\n+f32 type is FLOAT, value: 1.234000\n+f64 type is DOUBLE, value: 3.352451\n+b type is BIT, value: false\n+\n+### testStringTypes\n+Row #1\n+s type is CHAR, value: 42\n+sn type is CHAR, value: \u1d3a\u1d41\u1d38\u1d38\n+lc type is CHAR, value: test\n+nlc type is CHAR, value: \u1d3a\u1d41\u1d38\u1d38\n+Row #2\n+s type is CHAR, value: foo\n+sn type is CHAR, value: bar\n+lc type is CHAR, value: qaz\n+nlc type is CHAR, value: qux\n+\n+### testLowCardinalityAndNullableTypes\n+Row #1\n+ilc type is INT, value: -54\n+dlc type is DATE, value: 1970-01-01\n+ni type is INT, value: 144\n+Row #2\n+ilc type is INT, value: 42\n+dlc type is DATE, value: 2011-02-05\n+ni type is INT, value: 0\n+\n+### testDecimalTypes\n+Row #1\n+d32 type is DECIMAL, value: -1.55\n+d64 type is DECIMAL, value: 6.03\n+d128_native type is DECIMAL, value: 5\n+d128_text type is CHAR, value: -1224124.23423\n+d256 type is CHAR, value: -54342.3\n+Row #2\n+d32 type is DECIMAL, value: 1234567.89\n+d64 type is DECIMAL, value: 123456789123456.789\n+d128_native type is DECIMAL, value: 12345678912345678912.1234567891\n+d128_text type is CHAR, value: 1234567.8912345678912345678911234567891\n+d256 type is CHAR, value: 12345678912345678912345678911234567891234567891234567891.12345678911234567891\n+\n+### testMiscTypes\n+Row #1\n+a type is CHAR, value: ['foo','bar']\n+u type is CHAR, value: 5da5038d-788f-48c6-b510-babb41c538d3\n+t type is CHAR, value: (42,'qaz')\n+m type is CHAR, value: {'qux':144,'text':255}\n+\n+### testDateTypes\n+Row #1\n+d type is DATE, value: 1970-01-01\n+d32 type is DATE, value: 1900-01-01\n+dt type is TIMESTAMP, value: 1970-01-01 00:00:00.0\n+dt64_3 type is TIMESTAMP, value: 1900-01-01 00:00:00.001\n+dt64_6 type is TIMESTAMP, value: 1900-01-01 00:00:00.000001\n+dt64_9 type is TIMESTAMP, value: 1900-01-01 00:00:00.0\n+Row #2\n+d type is DATE, value: 2149-06-06\n+d32 type is DATE, value: 2178-04-16\n+dt type is TIMESTAMP, value: 2106-02-07 06:28:15.0\n+dt64_3 type is TIMESTAMP, value: 2106-02-07 06:28:15.123\n+dt64_6 type is TIMESTAMP, value: 2106-02-07 06:28:15.123456\n+dt64_9 type is TIMESTAMP, value: 2106-02-07 06:28:15.123456\n+\n+### testUnusualDateTime64Scales\n+Row #1\n+dt64_0 type is TIMESTAMP, value: 2022-04-13 03:17:45.0\n+dt64_1 type is TIMESTAMP, value: 2022-04-13 03:17:45.1\n+dt64_2 type is TIMESTAMP, value: 2022-04-13 03:17:45.12\n+dt64_4 type is TIMESTAMP, value: 2022-04-13 03:17:45.1234\n+dt64_5 type is TIMESTAMP, value: 2022-04-13 03:17:45.12345\n+dt64_7 type is TIMESTAMP, value: 2022-04-13 03:17:45.123456\n+dt64_8 type is TIMESTAMP, value: 2022-04-13 03:17:45.123456\n+Row #2\n+dt64_0 type is TIMESTAMP, value: 2022-04-13 03:17:45.0\n+dt64_1 type is TIMESTAMP, value: 2022-04-13 03:17:45.1\n+dt64_2 type is TIMESTAMP, value: 2022-04-13 03:17:45.01\n+dt64_4 type is TIMESTAMP, value: 2022-04-13 03:17:45.0001\n+dt64_5 type is TIMESTAMP, value: 2022-04-13 03:17:45.00001\n+dt64_7 type is TIMESTAMP, value: 2022-04-13 03:17:45.0\n+dt64_8 type is TIMESTAMP, value: 2022-04-13 03:17:45.0\n+\n+### testDateTimeTimezones\n+Row #1\n+dt type is TIMESTAMP, value: 1970-01-01 01:00:00.0\n+dt64_3 type is TIMESTAMP, value: 1969-12-31 16:00:00.0\n+Row #2\n+dt type is TIMESTAMP, value: 2022-09-04 20:31:05.0\n+dt64_3 type is TIMESTAMP, value: 2022-09-04 20:31:05.022\n+\ndiff --git a/tests/integration/test_mysql_protocol/prepared_statements_test.sql b/tests/integration/test_mysql_protocol/prepared_statements_test.sql\nnew file mode 100644\nindex 000000000000..b9dd16db1ed9\n--- /dev/null\n+++ b/tests/integration/test_mysql_protocol/prepared_statements_test.sql\n@@ -0,0 +1,137 @@\n+CREATE OR REPLACE TABLE ps_simple_data_types\n+(\n+    i8    Int8,\n+    i16   Int16,\n+    i32   Int32,\n+    i64   Int64,\n+    i128  Int128,\n+    i256  Int256,\n+    ui8   UInt8,\n+    ui16  UInt16,\n+    ui32  UInt32,\n+    ui64  UInt64,\n+    ui128 UInt128,\n+    ui256 UInt256,\n+    f32   Float32,\n+    f64   Float64,\n+    b     Boolean\n+) ENGINE MergeTree ORDER BY i8;\n+\n+INSERT INTO ps_simple_data_types\n+VALUES (127, 32767, 2147483647, 9223372036854775807, 170141183460469231731687303715884105727,\n+        57896044618658097711785492504343953926634992332820282019728792003956564819967,\n+        255, 65535, 4294967295, 18446744073709551615, 340282366920938463463374607431768211455,\n+        115792089237316195423570985008687907853269984665640564039457584007913129639935,\n+        1.234, 3.35245141223232, FALSE),\n+       (-128, -32768, -2147483648, -9223372036854775808, -170141183460469231731687303715884105728,\n+        -57896044618658097711785492504343953926634992332820282019728792003956564819968,\n+        120, 1234, 51234, 421342, 15324355, 41345135123432,\n+        -0.7968956, -0.113259, TRUE);\n+\n+CREATE OR REPLACE TABLE ps_string_types\n+(\n+    s   String,\n+    sn  Nullable(String),\n+    lc  LowCardinality(String),\n+    nlc LowCardinality(Nullable(String))\n+) ENGINE MergeTree ORDER BY s;\n+\n+INSERT INTO ps_string_types\n+VALUES ('foo', 'bar', 'qaz', 'qux'),\n+       ('42', NULL, 'test', NULL);\n+\n+CREATE OR REPLACE TABLE ps_low_cardinality_and_nullable_types\n+(\n+    ilc LowCardinality(Int32),\n+    dlc LowCardinality(Date),\n+    ni  Nullable(Int32)\n+) ENGINE MergeTree ORDER BY ilc;\n+\n+INSERT INTO ps_low_cardinality_and_nullable_types\n+VALUES (42, '2011-02-05', NULL),\n+       (-54, '1970-01-01', 144);\n+\n+CREATE OR REPLACE TABLE ps_decimal_types\n+(\n+    d32         Decimal(9, 2),\n+    d64         Decimal(18, 3),\n+    d128_native Decimal(30, 10),\n+    d128_text   Decimal(38, 31),\n+    d256        Decimal(76, 20)\n+) ENGINE MergeTree ORDER BY d32;\n+\n+INSERT INTO ps_decimal_types\n+VALUES (1234567.89,\n+        123456789123456.789,\n+        12345678912345678912.1234567891,\n+        1234567.8912345678912345678911234567891,\n+        12345678912345678912345678911234567891234567891234567891.12345678911234567891),\n+       (-1.55, 6.03, 5, -1224124.23423, -54342.3);\n+\n+CREATE OR REPLACE TABLE ps_misc_types\n+(\n+    a Array(String),\n+    u UUID,\n+    t Tuple(Int32, String),\n+    m Map(String, Int32)\n+) ENGINE MergeTree ORDER BY u;\n+\n+INSERT INTO ps_misc_types\n+VALUES (['foo', 'bar'], '5da5038d-788f-48c6-b510-babb41c538d3', (42, 'qaz'), {'qux': 144, 'text': 255});\n+\n+CREATE OR REPLACE TABLE ps_date_types\n+(\n+    d      Date,\n+    d32    Date32,\n+    dt     DateTime('UTC'),\n+    dt64_3 DateTime64(3, 'UTC'),\n+    dt64_6 DateTime64(6, 'UTC'),\n+    dt64_9 DateTime64(9, 'UTC')\n+) ENGINE MergeTree ORDER BY d;\n+\n+INSERT INTO ps_date_types\n+VALUES ('2149-06-06', '2178-04-16', '2106-02-07 06:28:15',\n+        '2106-02-07 06:28:15.123',\n+        '2106-02-07 06:28:15.123456',\n+        '2106-02-07 06:28:15.123456789'),\n+        ('1970-01-01', '1900-01-01', '1970-01-01 00:00:00',\n+        '1900-01-01 00:00:00.001',\n+        '1900-01-01 00:00:00.000001',\n+        '1900-01-01 00:00:00.000000001');;\n+\n+CREATE OR REPLACE TABLE ps_unusual_datetime64_scales\n+(\n+    dt64_0 DateTime64(0, 'UTC'),\n+    dt64_1 DateTime64(1, 'UTC'),\n+    dt64_2 DateTime64(2, 'UTC'),\n+    dt64_4 DateTime64(4, 'UTC'),\n+    dt64_5 DateTime64(5, 'UTC'),\n+    dt64_7 DateTime64(7, 'UTC'),\n+    dt64_8 DateTime64(8, 'UTC')\n+) ENGINE MergeTree ORDER BY dt64_0;\n+\n+INSERT INTO ps_unusual_datetime64_scales\n+VALUES ('2022-04-13 03:17:45',\n+        '2022-04-13 03:17:45.1',\n+        '2022-04-13 03:17:45.12',\n+        '2022-04-13 03:17:45.1234',\n+        '2022-04-13 03:17:45.12345',\n+        '2022-04-13 03:17:45.1234567',\n+        '2022-04-13 03:17:45.12345678'),\n+        ('2022-04-13 03:17:45',\n+        '2022-04-13 03:17:45.1',\n+        '2022-04-13 03:17:45.01',\n+        '2022-04-13 03:17:45.0001',\n+        '2022-04-13 03:17:45.00001',\n+        '2022-04-13 03:17:45.0000001',\n+        '2022-04-13 03:17:45.00000001');\n+\n+CREATE OR REPLACE TABLE ps_datetime_timezones\n+(\n+    dt     DateTime('Europe/Amsterdam'),\n+    dt64_3 DateTime64(3, 'Asia/Shanghai')\n+) ENGINE MergeTree ORDER BY dt;\n+\n+INSERT INTO ps_datetime_timezones\n+VALUES ('2022-09-04 20:31:05', '2022-09-04 20:31:05.022'),\n+       ('1970-01-01 01:00:00', '1969-12-31 16:00:00');\ndiff --git a/tests/integration/test_mysql_protocol/test.py b/tests/integration/test_mysql_protocol/test.py\nindex 606533a025ab..59e1565337bf 100644\n--- a/tests/integration/test_mysql_protocol/test.py\n+++ b/tests/integration/test_mysql_protocol/test.py\n@@ -10,7 +10,6 @@\n import docker\n import pymysql.connections\n import pytest\n-from docker.models.containers import Container\n from helpers.cluster import ClickHouseCluster, get_docker_compose_path, run_and_check\n \n SCRIPT_DIR = os.path.dirname(os.path.realpath(__file__))\n@@ -150,7 +149,6 @@ def java_container():\n \n \n def test_mysql_client(started_cluster):\n-    # type: (ClickHouseCluster) -> None\n     code, (stdout, stderr) = started_cluster.mysql_client_container.exec_run(\n         \"\"\"\n         mysql --protocol tcp -h {host} -P {port} default -u user_with_double_sha1 --password=abacaba\n@@ -651,7 +649,6 @@ def test_python_client(started_cluster):\n \n \n def test_golang_client(started_cluster, golang_container):\n-    # type: (str, Container) -> None\n     with open(os.path.join(SCRIPT_DIR, \"golang.reference\"), \"rb\") as fp:\n         reference = fp.read()\n \n@@ -687,7 +684,6 @@ def test_golang_client(started_cluster, golang_container):\n \n \n def test_php_client(started_cluster, php_container):\n-    # type: (str, Container) -> None\n     code, (stdout, stderr) = php_container.exec_run(\n         \"php -f test.php {host} {port} default 123\".format(\n             host=started_cluster.get_instance_ip(\"node\"), port=server_port\n@@ -764,7 +760,6 @@ def test_mysqljs_client(started_cluster, nodejs_container):\n \n \n def test_java_client(started_cluster, java_container):\n-    # type: (str, Container) -> None\n     with open(os.path.join(SCRIPT_DIR, \"java.reference\")) as fp:\n         reference = fp.read()\n \n@@ -810,6 +805,35 @@ def test_java_client(started_cluster, java_container):\n     assert stdout.decode() == reference\n \n \n+def test_prepared_statements(started_cluster, java_container):\n+    with open(os.path.join(SCRIPT_DIR, \"prepared_statements.reference\")) as fp:\n+        reference = fp.read()\n+\n+    with open(os.path.join(SCRIPT_DIR, \"prepared_statements_test.sql\")) as sql:\n+        statements = list(\n+            filter(\n+                lambda s: s != \"\",\n+                map(lambda s: s.strip().replace(\"\\n\", \" \"), sql.read().split(\";\")),\n+            )\n+        )\n+\n+    for statement in statements:\n+        node.query(\n+            statement,\n+            settings={\"password\": \"123\", \"allow_suspicious_low_cardinality_types\": 1},\n+        )\n+\n+    code, (stdout, stderr) = java_container.exec_run(\n+        \"java PreparedStatementsTest --host {host} --port {port} --user user_with_double_sha1 --password abacaba  --database \"\n+        \"default\".format(\n+            host=started_cluster.get_instance_ip(\"node\"), port=server_port\n+        ),\n+        demux=True,\n+    )\n+    assert code == 0\n+    assert stdout.decode() == reference\n+\n+\n def test_types(started_cluster):\n     client = pymysql.connections.Connection(\n         host=started_cluster.get_instance_ip(\"node\"),\ndiff --git a/tests/queries/0_stateless/02706_show_columns.reference b/tests/queries/0_stateless/02706_show_columns.reference\nindex 9d7e8485e194..29e5329d63d3 100644\n--- a/tests/queries/0_stateless/02706_show_columns.reference\n+++ b/tests/queries/0_stateless/02706_show_columns.reference\n@@ -1,47 +1,47 @@\n --- Aliases of SHOW COLUMNS\n-int32\tNullable(Int32)\t1\t\t\\N\t\n-str\tString\t0\tSOR\t\\N\t\n-uint64\tUInt64\t0\tPRI SOR\t\\N\t\n-int32\tNullable(Int32)\t1\t\t\\N\t\n-str\tString\t0\tSOR\t\\N\t\n-uint64\tUInt64\t0\tPRI SOR\t\\N\t\n+int32\tNullable(Int32)\tYES\t\t\\N\t\n+str\tString\tNO\tSOR\t\\N\t\n+uint64\tUInt64\tNO\tPRI SOR\t\\N\t\n+int32\tNullable(Int32)\tYES\t\t\\N\t\n+str\tString\tNO\tSOR\t\\N\t\n+uint64\tUInt64\tNO\tPRI SOR\t\\N\t\n --- EXTENDED\n-int32\tNullable(Int32)\t1\t\t\\N\t\n-str\tString\t0\tSOR\t\\N\t\n-uint64\tUInt64\t0\tPRI SOR\t\\N\t\n+int32\tNullable(Int32)\tYES\t\t\\N\t\n+str\tString\tNO\tSOR\t\\N\t\n+uint64\tUInt64\tNO\tPRI SOR\t\\N\t\n --- FULL\n-int32\tNullable(Int32)\t1\t\t\\N\t\t\\N\texample comment\t\n-str\tString\t0\tSOR\t\\N\t\t\\N\t\t\n-uint64\tUInt64\t0\tPRI SOR\t\\N\t\t\\N\t\t\n+int32\tNullable(Int32)\tYES\t\t\\N\t\t\\N\texample comment\t\n+str\tString\tNO\tSOR\t\\N\t\t\\N\t\t\n+uint64\tUInt64\tNO\tPRI SOR\t\\N\t\t\\N\t\t\n --- LIKE\n-int32\tNullable(Int32)\t1\t\t\\N\t\n-uint64\tUInt64\t0\tPRI SOR\t\\N\t\n+int32\tNullable(Int32)\tYES\t\t\\N\t\n+uint64\tUInt64\tNO\tPRI SOR\t\\N\t\n --- NOT LIKE\n-str\tString\t0\tSOR\t\\N\t\n+str\tString\tNO\tSOR\t\\N\t\n --- ILIKE\n-int32\tNullable(Int32)\t1\t\t\\N\t\n-uint64\tUInt64\t0\tPRI SOR\t\\N\t\n+int32\tNullable(Int32)\tYES\t\t\\N\t\n+uint64\tUInt64\tNO\tPRI SOR\t\\N\t\n --- NOT ILIKE\n-str\tString\t0\tSOR\t\\N\t\n+str\tString\tNO\tSOR\t\\N\t\n --- WHERE\n-int32\tNullable(Int32)\t1\t\t\\N\t\n-uint64\tUInt64\t0\tPRI SOR\t\\N\t\n+int32\tNullable(Int32)\tYES\t\t\\N\t\n+uint64\tUInt64\tNO\tPRI SOR\t\\N\t\n --- LIMIT\n-int32\tNullable(Int32)\t1\t\t\\N\t\n+int32\tNullable(Int32)\tYES\t\t\\N\t\n --- Check with weird table names\n-c\tString\t0\tPRI SOR\t\\N\t\n-c\tString\t0\tPRI SOR\t\\N\t\n-c\tString\t0\tPRI SOR\t\\N\t\n-c\tString\t0\tPRI SOR\t\\N\t\n+c\tString\tNO\tPRI SOR\t\\N\t\n+c\tString\tNO\tPRI SOR\t\\N\t\n+c\tString\tNO\tPRI SOR\t\\N\t\n+c\tString\tNO\tPRI SOR\t\\N\t\n --- Original table\n-int32\tNullable(Int32)\t1\t\t\\N\t\n-str\tString\t0\tSOR\t\\N\t\n-uint64\tUInt64\t0\tPRI SOR\t\\N\t\n+int32\tNullable(Int32)\tYES\t\t\\N\t\n+str\tString\tNO\tSOR\t\\N\t\n+uint64\tUInt64\tNO\tPRI SOR\t\\N\t\n --- Equally named table in other database\n-int32\tInt32\t0\t\t\\N\t\n-str\tString\t0\t\t\\N\t\n-uint64\tUInt64\t0\tPRI SOR\t\\N\t\n+int32\tInt32\tNO\t\t\\N\t\n+str\tString\tNO\t\t\\N\t\n+uint64\tUInt64\tNO\tPRI SOR\t\\N\t\n --- Short form\n-int32\tInt32\t0\t\t\\N\t\n-str\tString\t0\t\t\\N\t\n-uint64\tUInt64\t0\tPRI SOR\t\\N\t\n+int32\tInt32\tNO\t\t\\N\t\n+str\tString\tNO\t\t\\N\t\n+uint64\tUInt64\tNO\tPRI SOR\t\\N\t\ndiff --git a/tests/queries/0_stateless/02775_show_columns_mysql_compatibility.reference b/tests/queries/0_stateless/02775_show_columns_mysql_compatibility.reference\nindex 68e7be9ae6f5..84e1cdd2f04c 100644\n--- a/tests/queries/0_stateless/02775_show_columns_mysql_compatibility.reference\n+++ b/tests/queries/0_stateless/02775_show_columns_mysql_compatibility.reference\n@@ -4,363 +4,363 @@ Create pseudo-random database name\n Create tab duplicate table\n Run MySQL test\n field\ttype\tnull\tkey\tdefault\textra\n-aggregate_function\tAggregateFunction(sum, Int32)\t0\t\tNULL\t\n-array_value\tArray(Int32)\t0\t\tNULL\t\n-boolean_value\tUInt8\t0\t\tNULL\t\n-date32_value\tDate32\t0\t\tNULL\t\n-date_value\tDate\t0\t\tNULL\t\n-datetime64_value\tDateTime64(3)\t0\t\tNULL\t\n-datetime_value\tDateTime\t0\t\tNULL\t\n-decimal_value\tDecimal(10, 2)\t0\t\tNULL\t\n-enum_value\tEnum8('apple' = 1, 'banana' = 2, 'orange' = 3)\t0\t\tNULL\t\n-fixed_string_value\tFixedString(10)\t0\t\tNULL\t\n-float32\tFloat32\t0\t\tNULL\t\n-float64\tFloat64\t0\t\tNULL\t\n-int128\tInt128\t0\t\tNULL\t\n-int16\tInt16\t0\t\tNULL\t\n-int256\tInt256\t0\t\tNULL\t\n-int32\tInt32\t0\t\tNULL\t\n-int64\tInt64\t0\t\tNULL\t\n-int8\tInt8\t0\t\tNULL\t\n-ipv4_value\tIPv4\t0\t\tNULL\t\n-ipv6_value\tIPv6\t0\t\tNULL\t\n-json_value\tObject('json')\t0\t\tNULL\t\n-low_cardinality\tLowCardinality(String)\t0\t\tNULL\t\n-low_cardinality_date\tLowCardinality(DateTime)\t0\t\tNULL\t\n-map_value\tMap(String, Int32)\t0\t\tNULL\t\n-nested.nested_int\tArray(Int32)\t0\t\tNULL\t\n-nested.nested_string\tArray(String)\t0\t\tNULL\t\n-nint32\tNullable(Int32)\t1\t\tNULL\t\n-nullable_value\tNullable(Int32)\t1\t\tNULL\t\n-string_value\tString\t0\t\tNULL\t\n-tuple_value\tTuple(Int32, String)\t0\t\tNULL\t\n-uint128\tUInt128\t0\t\tNULL\t\n-uint16\tUInt16\t0\t\tNULL\t\n-uint256\tUInt256\t0\t\tNULL\t\n-uint32\tUInt32\t0\t\tNULL\t\n-uint64\tUInt64\t0\tPRI SOR\tNULL\t\n-uint8\tUInt8\t0\t\tNULL\t\n-uuid_value\tUUID\t0\t\tNULL\t\n+aggregate_function\tAggregateFunction(sum, Int32)\tNO\t\tNULL\t\n+array_value\tArray(Int32)\tNO\t\tNULL\t\n+boolean_value\tUInt8\tNO\t\tNULL\t\n+date32_value\tDate32\tNO\t\tNULL\t\n+date_value\tDate\tNO\t\tNULL\t\n+datetime64_value\tDateTime64(3)\tNO\t\tNULL\t\n+datetime_value\tDateTime\tNO\t\tNULL\t\n+decimal_value\tDecimal(10, 2)\tNO\t\tNULL\t\n+enum_value\tEnum8('apple' = 1, 'banana' = 2, 'orange' = 3)\tNO\t\tNULL\t\n+fixed_string_value\tFixedString(10)\tNO\t\tNULL\t\n+float32\tFloat32\tNO\t\tNULL\t\n+float64\tFloat64\tNO\t\tNULL\t\n+int128\tInt128\tNO\t\tNULL\t\n+int16\tInt16\tNO\t\tNULL\t\n+int256\tInt256\tNO\t\tNULL\t\n+int32\tInt32\tNO\t\tNULL\t\n+int64\tInt64\tNO\t\tNULL\t\n+int8\tInt8\tNO\t\tNULL\t\n+ipv4_value\tIPv4\tNO\t\tNULL\t\n+ipv6_value\tIPv6\tNO\t\tNULL\t\n+json_value\tObject('json')\tNO\t\tNULL\t\n+low_cardinality\tLowCardinality(String)\tNO\t\tNULL\t\n+low_cardinality_date\tLowCardinality(DateTime)\tNO\t\tNULL\t\n+map_value\tMap(String, Int32)\tNO\t\tNULL\t\n+nested.nested_int\tArray(Int32)\tNO\t\tNULL\t\n+nested.nested_string\tArray(String)\tNO\t\tNULL\t\n+nint32\tNullable(Int32)\tYES\t\tNULL\t\n+nullable_value\tNullable(Int32)\tYES\t\tNULL\t\n+string_value\tString\tNO\t\tNULL\t\n+tuple_value\tTuple(Int32, String)\tNO\t\tNULL\t\n+uint128\tUInt128\tNO\t\tNULL\t\n+uint16\tUInt16\tNO\t\tNULL\t\n+uint256\tUInt256\tNO\t\tNULL\t\n+uint32\tUInt32\tNO\t\tNULL\t\n+uint64\tUInt64\tNO\tPRI SOR\tNULL\t\n+uint8\tUInt8\tNO\t\tNULL\t\n+uuid_value\tUUID\tNO\t\tNULL\t\n field\ttype\tnull\tkey\tdefault\textra\n-aggregate_function\tTEXT\t0\t\tNULL\t\n-array_value\tTEXT\t0\t\tNULL\t\n-boolean_value\tTINYINT UNSIGNED\t0\t\tNULL\t\n-date32_value\tDATE\t0\t\tNULL\t\n-date_value\tDATE\t0\t\tNULL\t\n-datetime64_value\tDATETIME\t0\t\tNULL\t\n-datetime_value\tDATETIME\t0\t\tNULL\t\n-decimal_value\tDECIMAL(10, 2)\t0\t\tNULL\t\n-enum_value\tENUM('apple', 'banana', 'orange')\t0\t\tNULL\t\n-fixed_string_value\tTEXT\t0\t\tNULL\t\n-float32\tFLOAT\t0\t\tNULL\t\n-float64\tDOUBLE\t0\t\tNULL\t\n-int128\tTEXT\t0\t\tNULL\t\n-int16\tSMALLINT\t0\t\tNULL\t\n-int256\tTEXT\t0\t\tNULL\t\n-int32\tINTEGER\t0\t\tNULL\t\n-int64\tBIGINT\t0\t\tNULL\t\n-int8\tTINYINT\t0\t\tNULL\t\n-ipv4_value\tTEXT\t0\t\tNULL\t\n-ipv6_value\tTEXT\t0\t\tNULL\t\n-json_value\tJSON\t0\t\tNULL\t\n-low_cardinality\tBLOB\t0\t\tNULL\t\n-low_cardinality_date\tDATETIME\t0\t\tNULL\t\n-map_value\tJSON\t0\t\tNULL\t\n-nested.nested_int\tTEXT\t0\t\tNULL\t\n-nested.nested_string\tTEXT\t0\t\tNULL\t\n-nint32\tINTEGER\t0\t\tNULL\t\n-nullable_value\tINTEGER\t0\t\tNULL\t\n-string_value\tBLOB\t0\t\tNULL\t\n-tuple_value\tJSON\t0\t\tNULL\t\n-uint128\tTEXT\t0\t\tNULL\t\n-uint16\tSMALLINT UNSIGNED\t0\t\tNULL\t\n-uint256\tTEXT\t0\t\tNULL\t\n-uint32\tINTEGER UNSIGNED\t0\t\tNULL\t\n-uint64\tBIGINT UNSIGNED\t0\tPRI SOR\tNULL\t\n-uint8\tTINYINT UNSIGNED\t0\t\tNULL\t\n-uuid_value\tCHAR\t0\t\tNULL\t\n+aggregate_function\tTEXT\tNO\t\tNULL\t\n+array_value\tTEXT\tNO\t\tNULL\t\n+boolean_value\tTINYINT UNSIGNED\tNO\t\tNULL\t\n+date32_value\tDATE\tNO\t\tNULL\t\n+date_value\tDATE\tNO\t\tNULL\t\n+datetime64_value\tDATETIME\tNO\t\tNULL\t\n+datetime_value\tDATETIME\tNO\t\tNULL\t\n+decimal_value\tDECIMAL(10, 2)\tNO\t\tNULL\t\n+enum_value\tENUM('apple', 'banana', 'orange')\tNO\t\tNULL\t\n+fixed_string_value\tTEXT\tNO\t\tNULL\t\n+float32\tFLOAT\tNO\t\tNULL\t\n+float64\tDOUBLE\tNO\t\tNULL\t\n+int128\tTEXT\tNO\t\tNULL\t\n+int16\tSMALLINT\tNO\t\tNULL\t\n+int256\tTEXT\tNO\t\tNULL\t\n+int32\tINTEGER\tNO\t\tNULL\t\n+int64\tBIGINT\tNO\t\tNULL\t\n+int8\tTINYINT\tNO\t\tNULL\t\n+ipv4_value\tTEXT\tNO\t\tNULL\t\n+ipv6_value\tTEXT\tNO\t\tNULL\t\n+json_value\tJSON\tNO\t\tNULL\t\n+low_cardinality\tBLOB\tNO\t\tNULL\t\n+low_cardinality_date\tDATETIME\tNO\t\tNULL\t\n+map_value\tJSON\tNO\t\tNULL\t\n+nested.nested_int\tTEXT\tNO\t\tNULL\t\n+nested.nested_string\tTEXT\tNO\t\tNULL\t\n+nint32\tINTEGER\tNO\t\tNULL\t\n+nullable_value\tINTEGER\tNO\t\tNULL\t\n+string_value\tBLOB\tNO\t\tNULL\t\n+tuple_value\tJSON\tNO\t\tNULL\t\n+uint128\tTEXT\tNO\t\tNULL\t\n+uint16\tSMALLINT UNSIGNED\tNO\t\tNULL\t\n+uint256\tTEXT\tNO\t\tNULL\t\n+uint32\tINTEGER UNSIGNED\tNO\t\tNULL\t\n+uint64\tBIGINT UNSIGNED\tNO\tPRI SOR\tNULL\t\n+uint8\tTINYINT UNSIGNED\tNO\t\tNULL\t\n+uuid_value\tCHAR\tNO\t\tNULL\t\n field\ttype\tnull\tkey\tdefault\textra\n-aggregate_function\tTEXT\t0\t\tNULL\t\n-array_value\tTEXT\t0\t\tNULL\t\n-boolean_value\tTINYINT UNSIGNED\t0\t\tNULL\t\n-date32_value\tDATE\t0\t\tNULL\t\n-date_value\tDATE\t0\t\tNULL\t\n-datetime64_value\tDATETIME\t0\t\tNULL\t\n-datetime_value\tDATETIME\t0\t\tNULL\t\n-decimal_value\tDECIMAL(10, 2)\t0\t\tNULL\t\n-enum_value\tENUM('apple', 'banana', 'orange')\t0\t\tNULL\t\n-fixed_string_value\tTEXT\t0\t\tNULL\t\n-float32\tFLOAT\t0\t\tNULL\t\n-float64\tDOUBLE\t0\t\tNULL\t\n-int128\tTEXT\t0\t\tNULL\t\n-int16\tSMALLINT\t0\t\tNULL\t\n-int256\tTEXT\t0\t\tNULL\t\n-int32\tINTEGER\t0\t\tNULL\t\n-int64\tBIGINT\t0\t\tNULL\t\n-int8\tTINYINT\t0\t\tNULL\t\n-ipv4_value\tTEXT\t0\t\tNULL\t\n-ipv6_value\tTEXT\t0\t\tNULL\t\n-json_value\tJSON\t0\t\tNULL\t\n-low_cardinality\tBLOB\t0\t\tNULL\t\n-low_cardinality_date\tDATETIME\t0\t\tNULL\t\n-map_value\tJSON\t0\t\tNULL\t\n-nested.nested_int\tTEXT\t0\t\tNULL\t\n-nested.nested_string\tTEXT\t0\t\tNULL\t\n-nint32\tINTEGER\t0\t\tNULL\t\n-nullable_value\tINTEGER\t0\t\tNULL\t\n-string_value\tBLOB\t0\t\tNULL\t\n-tuple_value\tJSON\t0\t\tNULL\t\n-uint128\tTEXT\t0\t\tNULL\t\n-uint16\tSMALLINT UNSIGNED\t0\t\tNULL\t\n-uint256\tTEXT\t0\t\tNULL\t\n-uint32\tINTEGER UNSIGNED\t0\t\tNULL\t\n-uint64\tBIGINT UNSIGNED\t0\tPRI SOR\tNULL\t\n-uint8\tTINYINT UNSIGNED\t0\t\tNULL\t\n-uuid_value\tCHAR\t0\t\tNULL\t\n+aggregate_function\tTEXT\tNO\t\tNULL\t\n+array_value\tTEXT\tNO\t\tNULL\t\n+boolean_value\tTINYINT UNSIGNED\tNO\t\tNULL\t\n+date32_value\tDATE\tNO\t\tNULL\t\n+date_value\tDATE\tNO\t\tNULL\t\n+datetime64_value\tDATETIME\tNO\t\tNULL\t\n+datetime_value\tDATETIME\tNO\t\tNULL\t\n+decimal_value\tDECIMAL(10, 2)\tNO\t\tNULL\t\n+enum_value\tENUM('apple', 'banana', 'orange')\tNO\t\tNULL\t\n+fixed_string_value\tTEXT\tNO\t\tNULL\t\n+float32\tFLOAT\tNO\t\tNULL\t\n+float64\tDOUBLE\tNO\t\tNULL\t\n+int128\tTEXT\tNO\t\tNULL\t\n+int16\tSMALLINT\tNO\t\tNULL\t\n+int256\tTEXT\tNO\t\tNULL\t\n+int32\tINTEGER\tNO\t\tNULL\t\n+int64\tBIGINT\tNO\t\tNULL\t\n+int8\tTINYINT\tNO\t\tNULL\t\n+ipv4_value\tTEXT\tNO\t\tNULL\t\n+ipv6_value\tTEXT\tNO\t\tNULL\t\n+json_value\tJSON\tNO\t\tNULL\t\n+low_cardinality\tBLOB\tNO\t\tNULL\t\n+low_cardinality_date\tDATETIME\tNO\t\tNULL\t\n+map_value\tJSON\tNO\t\tNULL\t\n+nested.nested_int\tTEXT\tNO\t\tNULL\t\n+nested.nested_string\tTEXT\tNO\t\tNULL\t\n+nint32\tINTEGER\tNO\t\tNULL\t\n+nullable_value\tINTEGER\tNO\t\tNULL\t\n+string_value\tBLOB\tNO\t\tNULL\t\n+tuple_value\tJSON\tNO\t\tNULL\t\n+uint128\tTEXT\tNO\t\tNULL\t\n+uint16\tSMALLINT UNSIGNED\tNO\t\tNULL\t\n+uint256\tTEXT\tNO\t\tNULL\t\n+uint32\tINTEGER UNSIGNED\tNO\t\tNULL\t\n+uint64\tBIGINT UNSIGNED\tNO\tPRI SOR\tNULL\t\n+uint8\tTINYINT UNSIGNED\tNO\t\tNULL\t\n+uuid_value\tCHAR\tNO\t\tNULL\t\n field\ttype\tnull\tkey\tdefault\textra\tcollation\tcomment\tprivileges\n-aggregate_function\tTEXT\t0\t\tNULL\t\tNULL\t\t\n-array_value\tTEXT\t0\t\tNULL\t\tNULL\t\t\n-boolean_value\tTINYINT UNSIGNED\t0\t\tNULL\t\tNULL\t\t\n-date32_value\tDATE\t0\t\tNULL\t\tNULL\t\t\n-date_value\tDATE\t0\t\tNULL\t\tNULL\t\t\n-datetime64_value\tDATETIME\t0\t\tNULL\t\tNULL\t\t\n-datetime_value\tDATETIME\t0\t\tNULL\t\tNULL\t\t\n-decimal_value\tDECIMAL(10, 2)\t0\t\tNULL\t\tNULL\t\t\n-enum_value\tENUM('apple', 'banana', 'orange')\t0\t\tNULL\t\tNULL\t\t\n-fixed_string_value\tTEXT\t0\t\tNULL\t\tNULL\t\t\n-float32\tFLOAT\t0\t\tNULL\t\tNULL\t\t\n-float64\tDOUBLE\t0\t\tNULL\t\tNULL\t\t\n-int128\tTEXT\t0\t\tNULL\t\tNULL\t\t\n-int16\tSMALLINT\t0\t\tNULL\t\tNULL\t\t\n-int256\tTEXT\t0\t\tNULL\t\tNULL\t\t\n-int32\tINTEGER\t0\t\tNULL\t\tNULL\t\t\n-int64\tBIGINT\t0\t\tNULL\t\tNULL\t\t\n-int8\tTINYINT\t0\t\tNULL\t\tNULL\t\t\n-ipv4_value\tTEXT\t0\t\tNULL\t\tNULL\t\t\n-ipv6_value\tTEXT\t0\t\tNULL\t\tNULL\t\t\n-json_value\tJSON\t0\t\tNULL\t\tNULL\t\t\n-low_cardinality\tBLOB\t0\t\tNULL\t\tNULL\t\t\n-low_cardinality_date\tDATETIME\t0\t\tNULL\t\tNULL\t\t\n-map_value\tJSON\t0\t\tNULL\t\tNULL\t\t\n-nested.nested_int\tTEXT\t0\t\tNULL\t\tNULL\t\t\n-nested.nested_string\tTEXT\t0\t\tNULL\t\tNULL\t\t\n-nint32\tINTEGER\t0\t\tNULL\t\tNULL\t\t\n-nullable_value\tINTEGER\t0\t\tNULL\t\tNULL\t\t\n-string_value\tBLOB\t0\t\tNULL\t\tNULL\t\t\n-tuple_value\tJSON\t0\t\tNULL\t\tNULL\t\t\n-uint128\tTEXT\t0\t\tNULL\t\tNULL\t\t\n-uint16\tSMALLINT UNSIGNED\t0\t\tNULL\t\tNULL\t\t\n-uint256\tTEXT\t0\t\tNULL\t\tNULL\t\t\n-uint32\tINTEGER UNSIGNED\t0\t\tNULL\t\tNULL\t\t\n-uint64\tBIGINT UNSIGNED\t0\tPRI SOR\tNULL\t\tNULL\t\t\n-uint8\tTINYINT UNSIGNED\t0\t\tNULL\t\tNULL\t\t\n-uuid_value\tCHAR\t0\t\tNULL\t\tNULL\t\t\n+aggregate_function\tTEXT\tNO\t\tNULL\t\tNULL\t\t\n+array_value\tTEXT\tNO\t\tNULL\t\tNULL\t\t\n+boolean_value\tTINYINT UNSIGNED\tNO\t\tNULL\t\tNULL\t\t\n+date32_value\tDATE\tNO\t\tNULL\t\tNULL\t\t\n+date_value\tDATE\tNO\t\tNULL\t\tNULL\t\t\n+datetime64_value\tDATETIME\tNO\t\tNULL\t\tNULL\t\t\n+datetime_value\tDATETIME\tNO\t\tNULL\t\tNULL\t\t\n+decimal_value\tDECIMAL(10, 2)\tNO\t\tNULL\t\tNULL\t\t\n+enum_value\tENUM('apple', 'banana', 'orange')\tNO\t\tNULL\t\tNULL\t\t\n+fixed_string_value\tTEXT\tNO\t\tNULL\t\tNULL\t\t\n+float32\tFLOAT\tNO\t\tNULL\t\tNULL\t\t\n+float64\tDOUBLE\tNO\t\tNULL\t\tNULL\t\t\n+int128\tTEXT\tNO\t\tNULL\t\tNULL\t\t\n+int16\tSMALLINT\tNO\t\tNULL\t\tNULL\t\t\n+int256\tTEXT\tNO\t\tNULL\t\tNULL\t\t\n+int32\tINTEGER\tNO\t\tNULL\t\tNULL\t\t\n+int64\tBIGINT\tNO\t\tNULL\t\tNULL\t\t\n+int8\tTINYINT\tNO\t\tNULL\t\tNULL\t\t\n+ipv4_value\tTEXT\tNO\t\tNULL\t\tNULL\t\t\n+ipv6_value\tTEXT\tNO\t\tNULL\t\tNULL\t\t\n+json_value\tJSON\tNO\t\tNULL\t\tNULL\t\t\n+low_cardinality\tBLOB\tNO\t\tNULL\t\tNULL\t\t\n+low_cardinality_date\tDATETIME\tNO\t\tNULL\t\tNULL\t\t\n+map_value\tJSON\tNO\t\tNULL\t\tNULL\t\t\n+nested.nested_int\tTEXT\tNO\t\tNULL\t\tNULL\t\t\n+nested.nested_string\tTEXT\tNO\t\tNULL\t\tNULL\t\t\n+nint32\tINTEGER\tNO\t\tNULL\t\tNULL\t\t\n+nullable_value\tINTEGER\tNO\t\tNULL\t\tNULL\t\t\n+string_value\tBLOB\tNO\t\tNULL\t\tNULL\t\t\n+tuple_value\tJSON\tNO\t\tNULL\t\tNULL\t\t\n+uint128\tTEXT\tNO\t\tNULL\t\tNULL\t\t\n+uint16\tSMALLINT UNSIGNED\tNO\t\tNULL\t\tNULL\t\t\n+uint256\tTEXT\tNO\t\tNULL\t\tNULL\t\t\n+uint32\tINTEGER UNSIGNED\tNO\t\tNULL\t\tNULL\t\t\n+uint64\tBIGINT UNSIGNED\tNO\tPRI SOR\tNULL\t\tNULL\t\t\n+uint8\tTINYINT UNSIGNED\tNO\t\tNULL\t\tNULL\t\t\n+uuid_value\tCHAR\tNO\t\tNULL\t\tNULL\t\t\n field\ttype\tnull\tkey\tdefault\textra\n-int128\tTEXT\t0\t\tNULL\t\n-int16\tSMALLINT\t0\t\tNULL\t\n-int256\tTEXT\t0\t\tNULL\t\n-int32\tINTEGER\t0\t\tNULL\t\n-int64\tBIGINT\t0\t\tNULL\t\n-int8\tTINYINT\t0\t\tNULL\t\n-nested.nested_int\tTEXT\t0\t\tNULL\t\n-nint32\tINTEGER\t0\t\tNULL\t\n-uint128\tTEXT\t0\t\tNULL\t\n-uint16\tSMALLINT UNSIGNED\t0\t\tNULL\t\n-uint256\tTEXT\t0\t\tNULL\t\n-uint32\tINTEGER UNSIGNED\t0\t\tNULL\t\n-uint64\tBIGINT UNSIGNED\t0\tPRI SOR\tNULL\t\n-uint8\tTINYINT UNSIGNED\t0\t\tNULL\t\n+int128\tTEXT\tNO\t\tNULL\t\n+int16\tSMALLINT\tNO\t\tNULL\t\n+int256\tTEXT\tNO\t\tNULL\t\n+int32\tINTEGER\tNO\t\tNULL\t\n+int64\tBIGINT\tNO\t\tNULL\t\n+int8\tTINYINT\tNO\t\tNULL\t\n+nested.nested_int\tTEXT\tNO\t\tNULL\t\n+nint32\tINTEGER\tNO\t\tNULL\t\n+uint128\tTEXT\tNO\t\tNULL\t\n+uint16\tSMALLINT UNSIGNED\tNO\t\tNULL\t\n+uint256\tTEXT\tNO\t\tNULL\t\n+uint32\tINTEGER UNSIGNED\tNO\t\tNULL\t\n+uint64\tBIGINT UNSIGNED\tNO\tPRI SOR\tNULL\t\n+uint8\tTINYINT UNSIGNED\tNO\t\tNULL\t\n field\ttype\tnull\tkey\tdefault\textra\n-aggregate_function\tTEXT\t0\t\tNULL\t\n-array_value\tTEXT\t0\t\tNULL\t\n-boolean_value\tTINYINT UNSIGNED\t0\t\tNULL\t\n-date32_value\tDATE\t0\t\tNULL\t\n-date_value\tDATE\t0\t\tNULL\t\n-datetime64_value\tDATETIME\t0\t\tNULL\t\n-datetime_value\tDATETIME\t0\t\tNULL\t\n-decimal_value\tDECIMAL(10, 2)\t0\t\tNULL\t\n-enum_value\tENUM('apple', 'banana', 'orange')\t0\t\tNULL\t\n-fixed_string_value\tTEXT\t0\t\tNULL\t\n-float32\tFLOAT\t0\t\tNULL\t\n-float64\tDOUBLE\t0\t\tNULL\t\n-ipv4_value\tTEXT\t0\t\tNULL\t\n-ipv6_value\tTEXT\t0\t\tNULL\t\n-json_value\tJSON\t0\t\tNULL\t\n-low_cardinality\tBLOB\t0\t\tNULL\t\n-low_cardinality_date\tDATETIME\t0\t\tNULL\t\n-map_value\tJSON\t0\t\tNULL\t\n-nested.nested_string\tTEXT\t0\t\tNULL\t\n-nullable_value\tINTEGER\t0\t\tNULL\t\n-string_value\tBLOB\t0\t\tNULL\t\n-tuple_value\tJSON\t0\t\tNULL\t\n-uuid_value\tCHAR\t0\t\tNULL\t\n+aggregate_function\tTEXT\tNO\t\tNULL\t\n+array_value\tTEXT\tNO\t\tNULL\t\n+boolean_value\tTINYINT UNSIGNED\tNO\t\tNULL\t\n+date32_value\tDATE\tNO\t\tNULL\t\n+date_value\tDATE\tNO\t\tNULL\t\n+datetime64_value\tDATETIME\tNO\t\tNULL\t\n+datetime_value\tDATETIME\tNO\t\tNULL\t\n+decimal_value\tDECIMAL(10, 2)\tNO\t\tNULL\t\n+enum_value\tENUM('apple', 'banana', 'orange')\tNO\t\tNULL\t\n+fixed_string_value\tTEXT\tNO\t\tNULL\t\n+float32\tFLOAT\tNO\t\tNULL\t\n+float64\tDOUBLE\tNO\t\tNULL\t\n+ipv4_value\tTEXT\tNO\t\tNULL\t\n+ipv6_value\tTEXT\tNO\t\tNULL\t\n+json_value\tJSON\tNO\t\tNULL\t\n+low_cardinality\tBLOB\tNO\t\tNULL\t\n+low_cardinality_date\tDATETIME\tNO\t\tNULL\t\n+map_value\tJSON\tNO\t\tNULL\t\n+nested.nested_string\tTEXT\tNO\t\tNULL\t\n+nullable_value\tINTEGER\tNO\t\tNULL\t\n+string_value\tBLOB\tNO\t\tNULL\t\n+tuple_value\tJSON\tNO\t\tNULL\t\n+uuid_value\tCHAR\tNO\t\tNULL\t\n field\ttype\tnull\tkey\tdefault\textra\n-int128\tTEXT\t0\t\tNULL\t\n-int16\tSMALLINT\t0\t\tNULL\t\n-int256\tTEXT\t0\t\tNULL\t\n-int32\tINTEGER\t0\t\tNULL\t\n-int64\tBIGINT\t0\t\tNULL\t\n-int8\tTINYINT\t0\t\tNULL\t\n-nested.nested_int\tTEXT\t0\t\tNULL\t\n-nint32\tINTEGER\t0\t\tNULL\t\n-uint128\tTEXT\t0\t\tNULL\t\n-uint16\tSMALLINT UNSIGNED\t0\t\tNULL\t\n-uint256\tTEXT\t0\t\tNULL\t\n-uint32\tINTEGER UNSIGNED\t0\t\tNULL\t\n-uint64\tBIGINT UNSIGNED\t0\tPRI SOR\tNULL\t\n-uint8\tTINYINT UNSIGNED\t0\t\tNULL\t\n+int128\tTEXT\tNO\t\tNULL\t\n+int16\tSMALLINT\tNO\t\tNULL\t\n+int256\tTEXT\tNO\t\tNULL\t\n+int32\tINTEGER\tNO\t\tNULL\t\n+int64\tBIGINT\tNO\t\tNULL\t\n+int8\tTINYINT\tNO\t\tNULL\t\n+nested.nested_int\tTEXT\tNO\t\tNULL\t\n+nint32\tINTEGER\tNO\t\tNULL\t\n+uint128\tTEXT\tNO\t\tNULL\t\n+uint16\tSMALLINT UNSIGNED\tNO\t\tNULL\t\n+uint256\tTEXT\tNO\t\tNULL\t\n+uint32\tINTEGER UNSIGNED\tNO\t\tNULL\t\n+uint64\tBIGINT UNSIGNED\tNO\tPRI SOR\tNULL\t\n+uint8\tTINYINT UNSIGNED\tNO\t\tNULL\t\n field\ttype\tnull\tkey\tdefault\textra\n-aggregate_function\tTEXT\t0\t\tNULL\t\n-array_value\tTEXT\t0\t\tNULL\t\n-boolean_value\tTINYINT UNSIGNED\t0\t\tNULL\t\n-date32_value\tDATE\t0\t\tNULL\t\n-date_value\tDATE\t0\t\tNULL\t\n-datetime64_value\tDATETIME\t0\t\tNULL\t\n-datetime_value\tDATETIME\t0\t\tNULL\t\n-decimal_value\tDECIMAL(10, 2)\t0\t\tNULL\t\n-enum_value\tENUM('apple', 'banana', 'orange')\t0\t\tNULL\t\n-fixed_string_value\tTEXT\t0\t\tNULL\t\n-float32\tFLOAT\t0\t\tNULL\t\n-float64\tDOUBLE\t0\t\tNULL\t\n-ipv4_value\tTEXT\t0\t\tNULL\t\n-ipv6_value\tTEXT\t0\t\tNULL\t\n-json_value\tJSON\t0\t\tNULL\t\n-low_cardinality\tBLOB\t0\t\tNULL\t\n-low_cardinality_date\tDATETIME\t0\t\tNULL\t\n-map_value\tJSON\t0\t\tNULL\t\n-nested.nested_string\tTEXT\t0\t\tNULL\t\n-nullable_value\tINTEGER\t0\t\tNULL\t\n-string_value\tBLOB\t0\t\tNULL\t\n-tuple_value\tJSON\t0\t\tNULL\t\n-uuid_value\tCHAR\t0\t\tNULL\t\n+aggregate_function\tTEXT\tNO\t\tNULL\t\n+array_value\tTEXT\tNO\t\tNULL\t\n+boolean_value\tTINYINT UNSIGNED\tNO\t\tNULL\t\n+date32_value\tDATE\tNO\t\tNULL\t\n+date_value\tDATE\tNO\t\tNULL\t\n+datetime64_value\tDATETIME\tNO\t\tNULL\t\n+datetime_value\tDATETIME\tNO\t\tNULL\t\n+decimal_value\tDECIMAL(10, 2)\tNO\t\tNULL\t\n+enum_value\tENUM('apple', 'banana', 'orange')\tNO\t\tNULL\t\n+fixed_string_value\tTEXT\tNO\t\tNULL\t\n+float32\tFLOAT\tNO\t\tNULL\t\n+float64\tDOUBLE\tNO\t\tNULL\t\n+ipv4_value\tTEXT\tNO\t\tNULL\t\n+ipv6_value\tTEXT\tNO\t\tNULL\t\n+json_value\tJSON\tNO\t\tNULL\t\n+low_cardinality\tBLOB\tNO\t\tNULL\t\n+low_cardinality_date\tDATETIME\tNO\t\tNULL\t\n+map_value\tJSON\tNO\t\tNULL\t\n+nested.nested_string\tTEXT\tNO\t\tNULL\t\n+nullable_value\tINTEGER\tNO\t\tNULL\t\n+string_value\tBLOB\tNO\t\tNULL\t\n+tuple_value\tJSON\tNO\t\tNULL\t\n+uuid_value\tCHAR\tNO\t\tNULL\t\n field\ttype\tnull\tkey\tdefault\textra\n-int128\tTEXT\t0\t\tNULL\t\n-int16\tSMALLINT\t0\t\tNULL\t\n-int256\tTEXT\t0\t\tNULL\t\n-int32\tINTEGER\t0\t\tNULL\t\n-int64\tBIGINT\t0\t\tNULL\t\n-int8\tTINYINT\t0\t\tNULL\t\n-nested.nested_int\tTEXT\t0\t\tNULL\t\n-nint32\tINTEGER\t0\t\tNULL\t\n-uint128\tTEXT\t0\t\tNULL\t\n-uint16\tSMALLINT UNSIGNED\t0\t\tNULL\t\n-uint256\tTEXT\t0\t\tNULL\t\n-uint32\tINTEGER UNSIGNED\t0\t\tNULL\t\n-uint64\tBIGINT UNSIGNED\t0\tPRI SOR\tNULL\t\n-uint8\tTINYINT UNSIGNED\t0\t\tNULL\t\n+int128\tTEXT\tNO\t\tNULL\t\n+int16\tSMALLINT\tNO\t\tNULL\t\n+int256\tTEXT\tNO\t\tNULL\t\n+int32\tINTEGER\tNO\t\tNULL\t\n+int64\tBIGINT\tNO\t\tNULL\t\n+int8\tTINYINT\tNO\t\tNULL\t\n+nested.nested_int\tTEXT\tNO\t\tNULL\t\n+nint32\tINTEGER\tNO\t\tNULL\t\n+uint128\tTEXT\tNO\t\tNULL\t\n+uint16\tSMALLINT UNSIGNED\tNO\t\tNULL\t\n+uint256\tTEXT\tNO\t\tNULL\t\n+uint32\tINTEGER UNSIGNED\tNO\t\tNULL\t\n+uint64\tBIGINT UNSIGNED\tNO\tPRI SOR\tNULL\t\n+uint8\tTINYINT UNSIGNED\tNO\t\tNULL\t\n field\ttype\tnull\tkey\tdefault\textra\n-aggregate_function\tTEXT\t0\t\tNULL\t\n+aggregate_function\tTEXT\tNO\t\tNULL\t\n field\ttype\tnull\tkey\tdefault\textra\n-aggregate_function\tTEXT\t0\t\tNULL\t\n-array_value\tTEXT\t0\t\tNULL\t\n-boolean_value\tTINYINT UNSIGNED\t0\t\tNULL\t\n-date32_value\tDATE\t0\t\tNULL\t\n-date_value\tDATE\t0\t\tNULL\t\n-datetime64_value\tDATETIME\t0\t\tNULL\t\n-datetime_value\tDATETIME\t0\t\tNULL\t\n-decimal_value\tDECIMAL(10, 2)\t0\t\tNULL\t\n-enum_value\tENUM('apple', 'banana', 'orange')\t0\t\tNULL\t\n-fixed_string_value\tTEXT\t0\t\tNULL\t\n-float32\tFLOAT\t0\t\tNULL\t\n-float64\tDOUBLE\t0\t\tNULL\t\n-int128\tTEXT\t0\t\tNULL\t\n-int16\tSMALLINT\t0\t\tNULL\t\n-int256\tTEXT\t0\t\tNULL\t\n-int32\tINTEGER\t0\t\tNULL\t\n-int64\tBIGINT\t0\t\tNULL\t\n-int8\tTINYINT\t0\t\tNULL\t\n-ipv4_value\tTEXT\t0\t\tNULL\t\n-ipv6_value\tTEXT\t0\t\tNULL\t\n-json_value\tJSON\t0\t\tNULL\t\n-low_cardinality\tBLOB\t0\t\tNULL\t\n-low_cardinality_date\tDATETIME\t0\t\tNULL\t\n-map_value\tJSON\t0\t\tNULL\t\n-nested.nested_int\tTEXT\t0\t\tNULL\t\n-nested.nested_string\tTEXT\t0\t\tNULL\t\n-nint32\tINTEGER\t0\t\tNULL\t\n-nullable_value\tINTEGER\t0\t\tNULL\t\n-string_value\tBLOB\t0\t\tNULL\t\n-tuple_value\tJSON\t0\t\tNULL\t\n-uint128\tTEXT\t0\t\tNULL\t\n-uint16\tSMALLINT UNSIGNED\t0\t\tNULL\t\n-uint256\tTEXT\t0\t\tNULL\t\n-uint32\tINTEGER UNSIGNED\t0\t\tNULL\t\n-uint64\tBIGINT UNSIGNED\t0\tPRI SOR\tNULL\t\n-uint8\tTINYINT UNSIGNED\t0\t\tNULL\t\n-uuid_value\tCHAR\t0\t\tNULL\t\n+aggregate_function\tTEXT\tNO\t\tNULL\t\n+array_value\tTEXT\tNO\t\tNULL\t\n+boolean_value\tTINYINT UNSIGNED\tNO\t\tNULL\t\n+date32_value\tDATE\tNO\t\tNULL\t\n+date_value\tDATE\tNO\t\tNULL\t\n+datetime64_value\tDATETIME\tNO\t\tNULL\t\n+datetime_value\tDATETIME\tNO\t\tNULL\t\n+decimal_value\tDECIMAL(10, 2)\tNO\t\tNULL\t\n+enum_value\tENUM('apple', 'banana', 'orange')\tNO\t\tNULL\t\n+fixed_string_value\tTEXT\tNO\t\tNULL\t\n+float32\tFLOAT\tNO\t\tNULL\t\n+float64\tDOUBLE\tNO\t\tNULL\t\n+int128\tTEXT\tNO\t\tNULL\t\n+int16\tSMALLINT\tNO\t\tNULL\t\n+int256\tTEXT\tNO\t\tNULL\t\n+int32\tINTEGER\tNO\t\tNULL\t\n+int64\tBIGINT\tNO\t\tNULL\t\n+int8\tTINYINT\tNO\t\tNULL\t\n+ipv4_value\tTEXT\tNO\t\tNULL\t\n+ipv6_value\tTEXT\tNO\t\tNULL\t\n+json_value\tJSON\tNO\t\tNULL\t\n+low_cardinality\tBLOB\tNO\t\tNULL\t\n+low_cardinality_date\tDATETIME\tNO\t\tNULL\t\n+map_value\tJSON\tNO\t\tNULL\t\n+nested.nested_int\tTEXT\tNO\t\tNULL\t\n+nested.nested_string\tTEXT\tNO\t\tNULL\t\n+nint32\tINTEGER\tNO\t\tNULL\t\n+nullable_value\tINTEGER\tNO\t\tNULL\t\n+string_value\tBLOB\tNO\t\tNULL\t\n+tuple_value\tJSON\tNO\t\tNULL\t\n+uint128\tTEXT\tNO\t\tNULL\t\n+uint16\tSMALLINT UNSIGNED\tNO\t\tNULL\t\n+uint256\tTEXT\tNO\t\tNULL\t\n+uint32\tINTEGER UNSIGNED\tNO\t\tNULL\t\n+uint64\tBIGINT UNSIGNED\tNO\tPRI SOR\tNULL\t\n+uint8\tTINYINT UNSIGNED\tNO\t\tNULL\t\n+uuid_value\tCHAR\tNO\t\tNULL\t\n field\ttype\tnull\tkey\tdefault\textra\n-aggregate_function\tTEXT\t0\t\tNULL\t\n-array_value\tTEXT\t0\t\tNULL\t\n-boolean_value\tTINYINT UNSIGNED\t0\t\tNULL\t\n-date32_value\tDATE\t0\t\tNULL\t\n-date_value\tDATE\t0\t\tNULL\t\n-datetime64_value\tDATETIME\t0\t\tNULL\t\n-datetime_value\tDATETIME\t0\t\tNULL\t\n-decimal_value\tDECIMAL(10, 2)\t0\t\tNULL\t\n-enum_value\tENUM('apple', 'banana', 'orange')\t0\t\tNULL\t\n-fixed_string_value\tTEXT\t0\t\tNULL\t\n-float32\tFLOAT\t0\t\tNULL\t\n-float64\tDOUBLE\t0\t\tNULL\t\n-int128\tTEXT\t0\t\tNULL\t\n-int16\tSMALLINT\t0\t\tNULL\t\n-int256\tTEXT\t0\t\tNULL\t\n-int32\tINTEGER\t0\t\tNULL\t\n-int64\tBIGINT\t0\t\tNULL\t\n-int8\tTINYINT\t0\t\tNULL\t\n-ipv4_value\tTEXT\t0\t\tNULL\t\n-ipv6_value\tTEXT\t0\t\tNULL\t\n-json_value\tJSON\t0\t\tNULL\t\n-low_cardinality\tBLOB\t0\t\tNULL\t\n-low_cardinality_date\tDATETIME\t0\t\tNULL\t\n-map_value\tJSON\t0\t\tNULL\t\n-nested.nested_int\tTEXT\t0\t\tNULL\t\n-nested.nested_string\tTEXT\t0\t\tNULL\t\n-nint32\tINTEGER\t0\t\tNULL\t\n-nullable_value\tINTEGER\t0\t\tNULL\t\n-string_value\tBLOB\t0\t\tNULL\t\n-tuple_value\tJSON\t0\t\tNULL\t\n-uint128\tTEXT\t0\t\tNULL\t\n-uint16\tSMALLINT UNSIGNED\t0\t\tNULL\t\n-uint256\tTEXT\t0\t\tNULL\t\n-uint32\tINTEGER UNSIGNED\t0\t\tNULL\t\n-uint64\tBIGINT UNSIGNED\t0\tPRI SOR\tNULL\t\n-uint8\tTINYINT UNSIGNED\t0\t\tNULL\t\n-uuid_value\tCHAR\t0\t\tNULL\t\n+aggregate_function\tTEXT\tNO\t\tNULL\t\n+array_value\tTEXT\tNO\t\tNULL\t\n+boolean_value\tTINYINT UNSIGNED\tNO\t\tNULL\t\n+date32_value\tDATE\tNO\t\tNULL\t\n+date_value\tDATE\tNO\t\tNULL\t\n+datetime64_value\tDATETIME\tNO\t\tNULL\t\n+datetime_value\tDATETIME\tNO\t\tNULL\t\n+decimal_value\tDECIMAL(10, 2)\tNO\t\tNULL\t\n+enum_value\tENUM('apple', 'banana', 'orange')\tNO\t\tNULL\t\n+fixed_string_value\tTEXT\tNO\t\tNULL\t\n+float32\tFLOAT\tNO\t\tNULL\t\n+float64\tDOUBLE\tNO\t\tNULL\t\n+int128\tTEXT\tNO\t\tNULL\t\n+int16\tSMALLINT\tNO\t\tNULL\t\n+int256\tTEXT\tNO\t\tNULL\t\n+int32\tINTEGER\tNO\t\tNULL\t\n+int64\tBIGINT\tNO\t\tNULL\t\n+int8\tTINYINT\tNO\t\tNULL\t\n+ipv4_value\tTEXT\tNO\t\tNULL\t\n+ipv6_value\tTEXT\tNO\t\tNULL\t\n+json_value\tJSON\tNO\t\tNULL\t\n+low_cardinality\tBLOB\tNO\t\tNULL\t\n+low_cardinality_date\tDATETIME\tNO\t\tNULL\t\n+map_value\tJSON\tNO\t\tNULL\t\n+nested.nested_int\tTEXT\tNO\t\tNULL\t\n+nested.nested_string\tTEXT\tNO\t\tNULL\t\n+nint32\tINTEGER\tNO\t\tNULL\t\n+nullable_value\tINTEGER\tNO\t\tNULL\t\n+string_value\tBLOB\tNO\t\tNULL\t\n+tuple_value\tJSON\tNO\t\tNULL\t\n+uint128\tTEXT\tNO\t\tNULL\t\n+uint16\tSMALLINT UNSIGNED\tNO\t\tNULL\t\n+uint256\tTEXT\tNO\t\tNULL\t\n+uint32\tINTEGER UNSIGNED\tNO\t\tNULL\t\n+uint64\tBIGINT UNSIGNED\tNO\tPRI SOR\tNULL\t\n+uint8\tTINYINT UNSIGNED\tNO\t\tNULL\t\n+uuid_value\tCHAR\tNO\t\tNULL\t\n field\ttype\tnull\tkey\tdefault\textra\n-aggregate_function\tTEXT\t0\t\tNULL\t\n-array_value\tTEXT\t0\t\tNULL\t\n-boolean_value\tTINYINT UNSIGNED\t0\t\tNULL\t\n-date32_value\tDATE\t0\t\tNULL\t\n-date_value\tDATE\t0\t\tNULL\t\n-datetime64_value\tDATETIME\t0\t\tNULL\t\n-datetime_value\tDATETIME\t0\t\tNULL\t\n-decimal_value\tDECIMAL(10, 2)\t0\t\tNULL\t\n-enum_value\tENUM('apple', 'banana', 'orange')\t0\t\tNULL\t\n-fixed_string_value\tTEXT\t0\t\tNULL\t\n-float32\tFLOAT\t0\t\tNULL\t\n-float64\tDOUBLE\t0\t\tNULL\t\n-int128\tTEXT\t0\t\tNULL\t\n-int16\tSMALLINT\t0\t\tNULL\t\n-int256\tTEXT\t0\t\tNULL\t\n-int32\tINTEGER\t0\t\tNULL\t\n-int64\tBIGINT\t0\t\tNULL\t\n-int8\tTINYINT\t0\t\tNULL\t\n-ipv4_value\tTEXT\t0\t\tNULL\t\n-ipv6_value\tTEXT\t0\t\tNULL\t\n-json_value\tJSON\t0\t\tNULL\t\n-low_cardinality\tBLOB\t0\t\tNULL\t\n-low_cardinality_date\tDATETIME\t0\t\tNULL\t\n-map_value\tJSON\t0\t\tNULL\t\n-nested.nested_int\tTEXT\t0\t\tNULL\t\n-nested.nested_string\tTEXT\t0\t\tNULL\t\n-nint32\tINTEGER\t0\t\tNULL\t\n-nullable_value\tINTEGER\t0\t\tNULL\t\n-string_value\tBLOB\t0\t\tNULL\t\n-tuple_value\tJSON\t0\t\tNULL\t\n-uint128\tTEXT\t0\t\tNULL\t\n-uint16\tSMALLINT UNSIGNED\t0\t\tNULL\t\n-uint256\tTEXT\t0\t\tNULL\t\n-uint32\tINTEGER UNSIGNED\t0\t\tNULL\t\n-uint64\tBIGINT UNSIGNED\t0\tPRI SOR\tNULL\t\n-uint8\tTINYINT UNSIGNED\t0\t\tNULL\t\n-uuid_value\tCHAR\t0\t\tNULL\t\n+aggregate_function\tTEXT\tNO\t\tNULL\t\n+array_value\tTEXT\tNO\t\tNULL\t\n+boolean_value\tTINYINT UNSIGNED\tNO\t\tNULL\t\n+date32_value\tDATE\tNO\t\tNULL\t\n+date_value\tDATE\tNO\t\tNULL\t\n+datetime64_value\tDATETIME\tNO\t\tNULL\t\n+datetime_value\tDATETIME\tNO\t\tNULL\t\n+decimal_value\tDECIMAL(10, 2)\tNO\t\tNULL\t\n+enum_value\tENUM('apple', 'banana', 'orange')\tNO\t\tNULL\t\n+fixed_string_value\tTEXT\tNO\t\tNULL\t\n+float32\tFLOAT\tNO\t\tNULL\t\n+float64\tDOUBLE\tNO\t\tNULL\t\n+int128\tTEXT\tNO\t\tNULL\t\n+int16\tSMALLINT\tNO\t\tNULL\t\n+int256\tTEXT\tNO\t\tNULL\t\n+int32\tINTEGER\tNO\t\tNULL\t\n+int64\tBIGINT\tNO\t\tNULL\t\n+int8\tTINYINT\tNO\t\tNULL\t\n+ipv4_value\tTEXT\tNO\t\tNULL\t\n+ipv6_value\tTEXT\tNO\t\tNULL\t\n+json_value\tJSON\tNO\t\tNULL\t\n+low_cardinality\tBLOB\tNO\t\tNULL\t\n+low_cardinality_date\tDATETIME\tNO\t\tNULL\t\n+map_value\tJSON\tNO\t\tNULL\t\n+nested.nested_int\tTEXT\tNO\t\tNULL\t\n+nested.nested_string\tTEXT\tNO\t\tNULL\t\n+nint32\tINTEGER\tNO\t\tNULL\t\n+nullable_value\tINTEGER\tNO\t\tNULL\t\n+string_value\tBLOB\tNO\t\tNULL\t\n+tuple_value\tJSON\tNO\t\tNULL\t\n+uint128\tTEXT\tNO\t\tNULL\t\n+uint16\tSMALLINT UNSIGNED\tNO\t\tNULL\t\n+uint256\tTEXT\tNO\t\tNULL\t\n+uint32\tINTEGER UNSIGNED\tNO\t\tNULL\t\n+uint64\tBIGINT UNSIGNED\tNO\tPRI SOR\tNULL\t\n+uint8\tTINYINT UNSIGNED\tNO\t\tNULL\t\n+uuid_value\tCHAR\tNO\t\tNULL\t\n",
  "problem_statement": "MySQL compatibility: command \\x16 is not implemented \nWhen connecting Tableau to ClickHouse via MySQL interface, the following error is raised:\r\n\r\n```\r\nCode: 48. DB::Exception: Command \\x16; is not implemented. (NOT_IMPLEMENTED) (version 23.6.1.518 (official build))\r\n```\r\n\r\n**How to reproduce**\r\n* Which ClickHouse server version to use: latest head (23.6.1.518)\r\n* Which interface to use, if matters: MySQL\r\n\r\n**Error message and/or stacktrace**\r\n```\r\n2023.06.16 18:44:57.889906 [ 45 ] {} <Debug> MySQLHandler: Authentication for user default succeeded.\r\n2023.06.16 18:44:57.889921 [ 45 ] {} <Debug> MYSQL-Session: f9042e6d-73b6-4e37-8955-0d66e881371c Creating session context with user_id: 94309d50-4f52-5250-31bd-74fecac179db\r\n2023.06.16 18:44:57.890075 [ 45 ] {} <Trace> ContextAccess (default): Settings: readonly=0, allow_ddl=true, allow_introspection_functions=false\r\n2023.06.16 18:44:57.890123 [ 45 ] {} <Trace> ContextAccess (default): List of all grants: GRANT SHOW, SELECT, INSERT, ALTER, CREATE, DROP, UNDROP TABLE, TRUNCATE, OPTIMIZE, BACKUP, KILL QUERY, KILL TRANSACTION, MOVE PARTITION BETWEEN SHARDS, ACCESS MANAGEMENT, SYSTEM, dictGet, displaySecretsInShowAndSelect, INTROSPECTION, SOURCES, CLUSTER ON *.* WITH GRANT OPTION\r\n2023.06.16 18:44:57.890152 [ 45 ] {} <Trace> ContextAccess (default): List of all grants including implicit: GRANT SHOW, SELECT, INSERT, ALTER, CREATE, DROP, UNDROP TABLE, TRUNCATE, OPTIMIZE, BACKUP, KILL QUERY, KILL TRANSACTION, MOVE PARTITION BETWEEN SHARDS, ACCESS MANAGEMENT, SYSTEM, dictGet, displaySecretsInShowAndSelect, INTROSPECTION, SOURCES, CLUSTER ON *.* WITH GRANT OPTION\r\n2023.06.16 18:44:57.890201 [ 45 ] {} <Trace> ContextAccess (default): Settings: readonly=0, allow_ddl=true, allow_introspection_functions=false\r\n2023.06.16 18:44:57.890217 [ 45 ] {} <Trace> ContextAccess (default): List of all grants: GRANT SHOW, SELECT, INSERT, ALTER, CREATE, DROP, UNDROP TABLE, TRUNCATE, OPTIMIZE, BACKUP, KILL QUERY, KILL TRANSACTION, MOVE PARTITION BETWEEN SHARDS, ACCESS MANAGEMENT, SYSTEM, dictGet, displaySecretsInShowAndSelect, INTROSPECTION, SOURCES, CLUSTER ON *.* WITH GRANT OPTION\r\n2023.06.16 18:44:57.890233 [ 45 ] {} <Trace> ContextAccess (default): List of all grants including implicit: GRANT SHOW, SELECT, INSERT, ALTER, CREATE, DROP, UNDROP TABLE, TRUNCATE, OPTIMIZE, BACKUP, KILL QUERY, KILL TRANSACTION, MOVE PARTITION BETWEEN SHARDS, ACCESS MANAGEMENT, SYSTEM, dictGet, displaySecretsInShowAndSelect, INTROSPECTION, SOURCES, CLUSTER ON *.* WITH GRANT OPTION\r\n2023.06.16 18:44:57.932017 [ 45 ] {} <Debug> MySQLHandler: Received command: 3. Connection id: 0.\r\n2023.06.16 18:44:57.973862 [ 45 ] {} <Debug> MySQLHandler: Received command: 3. Connection id: 0.\r\n2023.06.16 18:44:58.015656 [ 45 ] {} <Debug> MySQLHandler: Received command: 3. Connection id: 0.\r\n2023.06.16 18:44:58.015778 [ 45 ] {} <Debug> MYSQL-Session: f9042e6d-73b6-4e37-8955-0d66e881371c Creating query context from session context, user_id: 94309d50-4f52-5250-31bd-74fecac179db, parent context user: default\r\n2023.06.16 18:44:58.015945 [ 45 ] {mysql:0:b52bbd39-c7e1-48f8-9d22-0d6f7d8882f0} <Debug> executeQuery: Query span trace_id for opentelemetry log: 00000000-0000-0000-0000-000000000000\r\n2023.06.16 18:44:58.016092 [ 45 ] {mysql:0:b52bbd39-c7e1-48f8-9d22-0d6f7d8882f0} <Debug> executeQuery: (from 34.246.62.141:48070) SET SQL_AUTO_IS_NULL = 0 (stage: Complete)\r\n2023.06.16 18:44:58.016352 [ 45 ] {mysql:0:b52bbd39-c7e1-48f8-9d22-0d6f7d8882f0} <Debug> MemoryTracker: Peak memory usage (for query): 0.00 B.\r\n2023.06.16 18:44:58.060260 [ 45 ] {} <Debug> MySQLHandler: Received command: 22. Connection id: 0.\r\n2023.06.16 18:44:58.060656 [ 45 ] {} <Error> MySQLHandler: MySQLHandler: Cannot read packet: : Code: 48. DB::Exception: Command  is not implemented. (NOT_IMPLEMENTED), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e37ca35 in /usr/bin/clickhouse\r\n1. ? @ 0x000000000e586a30 in /usr/bin/clickhouse\r\n2. DB::MySQLHandler::run() @ 0x0000000014d06ab7 in /usr/bin/clickhouse\r\n3. Poco::Net::TCPServerConnection::start() @ 0x0000000017cb0574 in /usr/bin/clickhouse\r\n4. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017cb1791 in /usr/bin/clickhouse\r\n5. Poco::PooledThread::run() @ 0x0000000017e2e547 in /usr/bin/clickhouse\r\n6. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017e2bf7c in /usr/bin/clickhouse\r\n7. ? @ 0x00007f090944f609 in ?\r\n8. clone @ 0x00007f0909374133 in ?\r\n (version 23.6.1.518 (official build))\r\n2023.06.16 18:44:58.103488 [ 45 ] {} <Debug> MySQLHandler: Received command: 1. Connection id: 0.\r\n2023.06.16 18:44:58.919658 [ 45 ] {} <Trace> MySQLHandlerFactory: MySQL connection. Id: 1. Address: 34.246.62.141:42171\r\n2023.06.16 18:44:58.919876 [ 45 ] {} <Trace> MySQLHandler: Sent handshake\r\n2023.06.16 18:44:58.961150 [ 45 ] {} <Trace> MySQLHandler: payload size: 91\r\n2023.06.16 18:44:58.961244 [ 45 ] {} <Trace> MySQLHandler: Capabilities: 431923853, max_packet_size: 1073741824, character_set: 255, user: default, auth_response length: 20, database: default, auth_plugin_name: mysql_native_password\r\n2023.06.16 18:44:58.961376 [ 45 ] {} <Debug> MYSQL-Session: 191b7671-5e3e-4a84-a3af-67bb0eaabdbc Authenticating user 'default' from 34.246.62.141:42171\r\n2023.06.16 18:44:58.961414 [ 45 ] {} <Debug> MYSQL-Session: 191b7671-5e3e-4a84-a3af-67bb0eaabdbc Authenticated with global context as user 94309d50-4f52-5250-31bd-74fecac179db\r\n2023.06.16 18:44:58.961427 [ 45 ] {} <Debug> MySQLHandler: Authentication for user default succeeded.\r\n2023.06.16 18:44:58.961442 [ 45 ] {} <Debug> MYSQL-Session: 191b7671-5e3e-4a84-a3af-67bb0eaabdbc Creating session context with user_id: 94309d50-4f52-5250-31bd-74fecac179db\r\n2023.06.16 18:44:59.002641 [ 45 ] {} <Debug> MySQLHandler: Received command: 3. Connection id: 1.\r\n2023.06.16 18:44:59.043873 [ 45 ] {} <Debug> MySQLHandler: Received command: 3. Connection id: 1.\r\n2023.06.16 18:44:59.085114 [ 45 ] {} <Debug> MySQLHandler: Received command: 3. Connection id: 1.\r\n2023.06.16 18:44:59.085229 [ 45 ] {} <Debug> MYSQL-Session: 191b7671-5e3e-4a84-a3af-67bb0eaabdbc Creating query context from session context, user_id: 94309d50-4f52-5250-31bd-74fecac179db, parent context user: default\r\n2023.06.16 18:44:59.085341 [ 45 ] {mysql:1:b25fa4f1-1a22-4eed-8956-1a746dde0e27} <Debug> executeQuery: Query span trace_id for opentelemetry log: 00000000-0000-0000-0000-000000000000\r\n2023.06.16 18:44:59.085457 [ 45 ] {mysql:1:b25fa4f1-1a22-4eed-8956-1a746dde0e27} <Debug> executeQuery: (from 34.246.62.141:42171) SET SQL_AUTO_IS_NULL = 0 (stage: Complete)\r\n2023.06.16 18:44:59.085695 [ 45 ] {mysql:1:b25fa4f1-1a22-4eed-8956-1a746dde0e27} <Debug> MemoryTracker: Peak memory usage (for query): 0.00 B.\r\n2023.06.16 18:44:59.129101 [ 45 ] {} <Debug> MySQLHandler: Received command: 22. Connection id: 1.\r\n2023.06.16 18:44:59.129286 [ 45 ] {} <Error> MySQLHandler: MySQLHandler: Cannot read packet: : Code: 48. DB::Exception: Command  is not implemented. (NOT_IMPLEMENTED), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e37ca35 in /usr/bin/clickhouse\r\n1. ? @ 0x000000000e586a30 in /usr/bin/clickhouse\r\n2. DB::MySQLHandler::run() @ 0x0000000014d06ab7 in /usr/bin/clickhouse\r\n3. Poco::Net::TCPServerConnection::start() @ 0x0000000017cb0574 in /usr/bin/clickhouse\r\n4. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017cb1791 in /usr/bin/clickhouse\r\n5. Poco::PooledThread::run() @ 0x0000000017e2e547 in /usr/bin/clickhouse\r\n6. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017e2bf7c in /usr/bin/clickhouse\r\n7. ? @ 0x00007f090944f609 in ?\r\n8. clone @ 0x00007f0909374133 in ?\r\n (version 23.6.1.518 (official build))\r\n2023.06.16 18:44:59.171703 [ 45 ] {} <Debug> MySQLHandler: Received command: 1. Connection id: 1.\r\n2023.06.16 18:45:01.249571 [ 96 ] {} <Debug> DNSResolver: Updating DNS cache\r\n2023.06.16 18:45:01.249652 [ 96 ] {} <Debug> DNSResolver: Updated DNS cache\r\n2023.06.16 18:45:01.260270 [ 286 ] {} <Trace> SystemLog (system.query_log): Flushing system log, 4 entries to flush up to offset 4\r\n2023.06.16 18:45:01.261644 [ 286 ] {} <Debug> SystemLog (system.query_log): Will use existing table system.query_log for QueryLog\r\n2023.06.16 18:45:01.265807 [ 286 ] {} <Trace> system.query_log (3da47ab5-5f3d-4bdc-b81d-bc6b8bd7e41d): Trying to reserve 1.00 MiB using storage policy from min volume index 0\r\n2023.06.16 18:45:01.265877 [ 286 ] {} <Trace> DiskLocal: Reserved 1.00 MiB on local disk `default`, having unreserved 16.68 GiB.\r\n2023.06.16 18:45:01.271013 [ 286 ] {} <Trace> MergedBlockOutputStream: filled checksums 20230616_1_1_0 (state Temporary)\r\n2023.06.16 18:45:01.271594 [ 286 ] {} <Trace> system.query_log (3da47ab5-5f3d-4bdc-b81d-bc6b8bd7e41d): Renaming temporary part tmp_insert_20230616_1_1_0 to 20230616_4_4_0 with tid (1, 1, 00000000-0000-0000-0000-000000000000).\r\n2023.06.16 18:45:01.272024 [ 286 ] {} <Trace> SystemLog (system.query_log): Flushed system log up to offset 4\r\n```\r\n\n",
  "hints_text": "Could you please help check out - what's the command \\x16?\nI guess `\\x16` is coming from logs (see an extra space):\r\n\r\n```\r\nCommand  is not implemented\r\n```\r\n\r\nprior to that, there is the following line\r\n```\r\n2023.06.16 18:44:58.060260 [ 45 ] {} <Debug> MySQLHandler: Received command: 22. Connection id: 0.\r\n```\r\n\r\nI tried to research how MySQL protocol works and stumbled upon this https://dev.mysql.com/doc/dev/mysql-server/latest/page_protocol_command_phase.html\r\n\r\nit refers to https://dev.mysql.com/doc/dev/mysql-server/latest/my__command_8h_source.html\r\n\r\n22 seems to be `COM_STMT_PREPARE` if I understand it correctly.\nUnderstood. It is about prepared statements. We will need to add support for them.",
  "created_at": "2023-08-31T11:43:45Z"
}