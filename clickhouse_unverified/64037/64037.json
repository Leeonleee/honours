{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 64037,
  "instance_id": "ClickHouse__ClickHouse-64037",
  "issue_numbers": [
    "63960"
  ],
  "base_commit": "f00f551fba2329c8048534ee0a6ff81b6cef640c",
  "patch": "diff --git a/src/Analyzer/Passes/AutoFinalOnQueryPass.cpp b/src/Analyzer/Passes/AutoFinalOnQueryPass.cpp\nindex 9bd044dd89cf..70aa1a415482 100644\n--- a/src/Analyzer/Passes/AutoFinalOnQueryPass.cpp\n+++ b/src/Analyzer/Passes/AutoFinalOnQueryPass.cpp\n@@ -42,7 +42,7 @@ class AutoFinalOnQueryPassVisitor : public InDepthQueryTreeVisitorWithContext<Au\n             return;\n \n         const auto & storage = table_node ? table_node->getStorage() : table_function_node->getStorage();\n-        bool is_final_supported = storage && storage->supportsFinal();\n+        bool is_final_supported = storage && !storage->isRemote() && storage->supportsFinal();\n         if (!is_final_supported)\n             return;\n \ndiff --git a/src/Analyzer/QueryTreePassManager.cpp b/src/Analyzer/QueryTreePassManager.cpp\nindex 51f1fb6cc2f4..f7919b6422cd 100644\n--- a/src/Analyzer/QueryTreePassManager.cpp\n+++ b/src/Analyzer/QueryTreePassManager.cpp\n@@ -192,7 +192,7 @@ void QueryTreePassManager::run(QueryTreeNodePtr query_tree_node)\n void QueryTreePassManager::runOnlyResolve(QueryTreeNodePtr query_tree_node)\n {\n     // Run only QueryAnalysisPass and GroupingFunctionsResolvePass passes.\n-    run(query_tree_node, 2);\n+    run(query_tree_node, 3);\n }\n \n void QueryTreePassManager::run(QueryTreeNodePtr query_tree_node, size_t up_to_pass_index)\n@@ -249,6 +249,7 @@ void addQueryTreePasses(QueryTreePassManager & manager, bool only_analyze)\n {\n     manager.addPass(std::make_unique<QueryAnalysisPass>(only_analyze));\n     manager.addPass(std::make_unique<GroupingFunctionsResolvePass>());\n+    manager.addPass(std::make_unique<AutoFinalOnQueryPass>());\n \n     manager.addPass(std::make_unique<RemoveUnusedProjectionColumnsPass>());\n     manager.addPass(std::make_unique<FunctionToSubcolumnsPass>());\n@@ -294,7 +295,6 @@ void addQueryTreePasses(QueryTreePassManager & manager, bool only_analyze)\n \n     manager.addPass(std::make_unique<LogicalExpressionOptimizerPass>());\n \n-    manager.addPass(std::make_unique<AutoFinalOnQueryPass>());\n     manager.addPass(std::make_unique<CrossToInnerJoinPass>());\n     manager.addPass(std::make_unique<ShardNumColumnToFunctionPass>());\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02420_final_setting_analyzer.reference b/tests/queries/0_stateless/02420_final_setting_analyzer.reference\nindex dd9fed65f13d..780a6e5de683 100644\n--- a/tests/queries/0_stateless/02420_final_setting_analyzer.reference\n+++ b/tests/queries/0_stateless/02420_final_setting_analyzer.reference\n@@ -132,3 +132,7 @@ SELECT * FROM merge_table ORDER BY id, val;\n 2\ta\n 2\tb\n 3\tc\n+select sum(number) from numbers(10) settings final=1;\n+45\n+select sum(number) from remote('127.0.0.{1,2}', numbers(10)) settings final=1;\n+90\ndiff --git a/tests/queries/0_stateless/02420_final_setting_analyzer.sql b/tests/queries/0_stateless/02420_final_setting_analyzer.sql\nindex 14c832cfaf51..cbdec017602b 100644\n--- a/tests/queries/0_stateless/02420_final_setting_analyzer.sql\n+++ b/tests/queries/0_stateless/02420_final_setting_analyzer.sql\n@@ -102,3 +102,6 @@ insert into table_to_merge_c values (3,'c');\n -- expected output:\n -- 1 c, 2 a, 2 b, 3 c\n SELECT * FROM merge_table ORDER BY id, val;\n+\n+select sum(number) from numbers(10) settings final=1;\n+select sum(number) from remote('127.0.0.{1,2}', numbers(10)) settings final=1;\n",
  "problem_statement": "Unexpected exception when using final modifier with non MergeTree table\nhttps://fiddle.clickhouse.com/2f3e3b06-468c-43d2-abc9-d92dbc990d05\r\n```sql\r\nCREATE TABLE users (uid Int16, name String, age Int16) ENGINE=Log;\r\n\r\nCREATE TABLE IF NOT EXISTS distributed_table as users ENGINE = Distributed(default, currentDatabase(), users);\r\n\r\ninsert into distributed_table (age) values (1), (2), (3);\r\n\r\nset final=1;\r\nselect count() from users;\r\nselect count() from distributed_table;\r\n```\r\n```\r\n3\r\n\r\nReceived exception from server (version 24.3.3):\r\nCode: 181. DB::Exception: Received from localhost:9000. DB::Exception: Storage Log doesn't support FINAL. (ILLEGAL_FINAL)\r\n(query: select count() from distributed_table;)\r\n```\r\nException looks really misleading to me, I can actually use FINAL with log storage.  Exception only appears when analyzer is on. \r\nSeems like FINAL should be ignored when it is not applicable. \r\n\r\nI know that FINAL modifier can be used only for a SELECT from ReplacingMergeTree, SummingMergeTree, AggregatingMergeTree, CollapsingMergeTree and VersionedCollapsingMergeTree tables. \n",
  "hints_text": "Given it does not reproduce without the Analyzer:\r\n\r\nhttps://fiddle.clickhouse.com/0264258e-207a-4793-b1d8-41fed7826d7f\r\n\r\nI added the analyzer label @KochetovNicolai ",
  "created_at": "2024-05-17T12:13:50Z",
  "modified_files": [
    "src/Analyzer/Passes/AutoFinalOnQueryPass.cpp",
    "src/Analyzer/QueryTreePassManager.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/02420_final_setting_analyzer.reference",
    "tests/queries/0_stateless/02420_final_setting_analyzer.sql"
  ]
}