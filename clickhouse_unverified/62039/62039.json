{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 62039,
  "instance_id": "ClickHouse__ClickHouse-62039",
  "issue_numbers": [
    "61922"
  ],
  "base_commit": "633aeaaa765ae5de46451659391d62b48ec3b1f3",
  "patch": "diff --git a/docs/en/engines/table-engines/special/memory.md b/docs/en/engines/table-engines/special/memory.md\nindex 19b5c798a76b..f28157ebde2f 100644\n--- a/docs/en/engines/table-engines/special/memory.md\n+++ b/docs/en/engines/table-engines/special/memory.md\n@@ -45,6 +45,11 @@ Upper and lower bounds can be specified to limit Memory engine table size, effec\n CREATE TABLE memory (i UInt32) ENGINE = Memory SETTINGS min_rows_to_keep = 100, max_rows_to_keep = 1000;\n ```\n \n+**Modify settings**\n+```sql\n+ALTER TABLE memory MODIFY SETTING min_rows_to_keep = 100, max_rows_to_keep = 1000;\n+```\n+\n **Note:** Both `bytes` and `rows` capping parameters can be set at the same time, however, the lower bounds of `max` and `min` will be adhered to.\n \n ## Examples {#examples}\n@@ -97,3 +102,4 @@ SELECT total_bytes, total_rows FROM system.tables WHERE name = 'memory' and data\n \u2502       65536 \u2502      10000 \u2502\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n ```\n+\ndiff --git a/src/Storages/MemorySettings.cpp b/src/Storages/MemorySettings.cpp\nindex f5e182b3484e..30ae4e126684 100644\n--- a/src/Storages/MemorySettings.cpp\n+++ b/src/Storages/MemorySettings.cpp\n@@ -1,6 +1,5 @@\n #include <Storages/MemorySettings.h>\n #include <Parsers/ASTCreateQuery.h>\n-#include <Parsers/ASTSetQuery.h>\n #include <Parsers/ASTFunction.h>\n #include <Common/Exception.h>\n \n@@ -11,6 +10,7 @@ namespace DB\n namespace ErrorCodes\n {\n     extern const int UNKNOWN_SETTING;\n+    extern const int SETTING_CONSTRAINT_VIOLATION;\n }\n \n IMPLEMENT_SETTINGS_TRAITS(memorySettingsTraits, MEMORY_SETTINGS)\n@@ -32,5 +32,31 @@ void MemorySettings::loadFromQuery(ASTStorage & storage_def)\n     }\n }\n \n+ASTPtr MemorySettings::getSettingsChangesQuery()\n+{\n+    auto settings_ast = std::make_shared<ASTSetQuery>();\n+    settings_ast->is_standalone = false;\n+    for (const auto & change : changes())\n+        settings_ast->changes.push_back(change);\n+\n+    return settings_ast;\n+}\n+\n+void MemorySettings::sanityCheck() const\n+{\n+    if (min_bytes_to_keep > max_bytes_to_keep)\n+        throw Exception(ErrorCodes::SETTING_CONSTRAINT_VIOLATION,\n+                        \"Setting `min_bytes_to_keep` cannot be higher than the `max_bytes_to_keep`. `min_bytes_to_keep`: {}, `max_bytes_to_keep`: {}\",\n+                        min_bytes_to_keep,\n+                        max_bytes_to_keep);\n+\n+\n+    if (min_rows_to_keep > max_rows_to_keep)\n+        throw Exception(ErrorCodes::SETTING_CONSTRAINT_VIOLATION,\n+                        \"Setting `min_rows_to_keep` cannot be higher than the `max_rows_to_keep`. `min_rows_to_keep`: {}, `max_rows_to_keep`: {}\",\n+                        min_rows_to_keep,\n+                        max_rows_to_keep);\n+}\n+\n }\n \ndiff --git a/src/Storages/MemorySettings.h b/src/Storages/MemorySettings.h\nindex ac6cdf73329c..f650746c4b28 100644\n--- a/src/Storages/MemorySettings.h\n+++ b/src/Storages/MemorySettings.h\n@@ -1,6 +1,7 @@\n #pragma once\n \n #include <Core/BaseSettings.h>\n+#include <Parsers/ASTSetQuery.h>\n \n \n namespace DB\n@@ -24,6 +25,8 @@ DECLARE_SETTINGS_TRAITS(memorySettingsTraits, MEMORY_SETTINGS)\n struct MemorySettings : public BaseSettings<memorySettingsTraits>\n {\n     void loadFromQuery(ASTStorage & storage_def);\n+    ASTPtr getSettingsChangesQuery();\n+    void sanityCheck() const;\n };\n \n }\ndiff --git a/src/Storages/StorageMemory.cpp b/src/Storages/StorageMemory.cpp\nindex c6222d2124ea..f69c4adb5521 100644\n--- a/src/Storages/StorageMemory.cpp\n+++ b/src/Storages/StorageMemory.cpp\n@@ -46,7 +46,6 @@ namespace ErrorCodes\n     extern const int NUMBER_OF_ARGUMENTS_DOESNT_MATCH;\n     extern const int CANNOT_RESTORE_TABLE;\n     extern const int NOT_IMPLEMENTED;\n-    extern const int SETTING_CONSTRAINT_VIOLATION;\n }\n \n class MemorySink : public SinkToStorage\n@@ -76,7 +75,7 @@ class MemorySink : public SinkToStorage\n             convertDynamicColumnsToTuples(block, storage_snapshot);\n         }\n \n-        if (storage.compress)\n+        if (storage.getMemorySettingsRef().compress)\n         {\n             Block compressed_block;\n             for (const auto & elem : block)\n@@ -106,15 +105,16 @@ class MemorySink : public SinkToStorage\n         auto new_data = std::make_unique<Blocks>(*(storage.data.get()));\n         UInt64 new_total_rows = storage.total_size_rows.load(std::memory_order_relaxed) + inserted_rows;\n         UInt64 new_total_bytes = storage.total_size_bytes.load(std::memory_order_relaxed) + inserted_bytes;\n+        const auto & memory_settings = storage.getMemorySettingsRef();\n         while (!new_data->empty()\n-               && ((storage.max_bytes_to_keep && new_total_bytes > storage.max_bytes_to_keep)\n-                   || (storage.max_rows_to_keep && new_total_rows > storage.max_rows_to_keep)))\n+               && ((memory_settings.max_bytes_to_keep && new_total_bytes > memory_settings.max_bytes_to_keep)\n+                   || (memory_settings.max_rows_to_keep && new_total_rows > memory_settings.max_rows_to_keep)))\n         {\n             Block oldest_block = new_data->front();\n             UInt64 rows_to_remove = oldest_block.rows();\n             UInt64 bytes_to_remove = oldest_block.allocatedBytes();\n-            if (new_total_bytes - bytes_to_remove < storage.min_bytes_to_keep\n-                || new_total_rows - rows_to_remove < storage.min_rows_to_keep)\n+            if (new_total_bytes - bytes_to_remove < memory_settings.min_bytes_to_keep\n+                || new_total_rows - rows_to_remove < memory_settings.min_rows_to_keep)\n             {\n                 break; // stop - removing next block will put us under min_bytes / min_rows threshold\n             }\n@@ -145,15 +145,16 @@ StorageMemory::StorageMemory(\n     ColumnsDescription columns_description_,\n     ConstraintsDescription constraints_,\n     const String & comment,\n-    const MemorySettings & settings)\n-    : IStorage(table_id_), data(std::make_unique<const Blocks>()), compress(settings.compress),\n-    min_rows_to_keep(settings.min_rows_to_keep), max_rows_to_keep(settings.max_rows_to_keep),\n-    min_bytes_to_keep(settings.min_bytes_to_keep), max_bytes_to_keep(settings.max_bytes_to_keep)\n+    const MemorySettings & memory_settings_)\n+    : IStorage(table_id_)\n+    , data(std::make_unique<const Blocks>())\n+    , memory_settings(memory_settings_)\n {\n     StorageInMemoryMetadata storage_metadata;\n     storage_metadata.setColumns(std::move(columns_description_));\n     storage_metadata.setConstraints(std::move(constraints_));\n     storage_metadata.setComment(comment);\n+    storage_metadata.setSettingsChanges(memory_settings.getSettingsChangesQuery());\n     setInMemoryMetadata(storage_metadata);\n }\n \n@@ -239,7 +240,7 @@ void StorageMemory::mutate(const MutationCommands & commands, ContextPtr context\n     Block block;\n     while (executor.pull(block))\n     {\n-        if (compress)\n+        if (memory_settings.compress)\n             for (auto & elem : block)\n                 elem.column = elem.column->compress();\n \n@@ -294,6 +295,59 @@ void StorageMemory::truncate(\n     total_size_rows.store(0, std::memory_order_relaxed);\n }\n \n+void StorageMemory::alter(const DB::AlterCommands & params, DB::ContextPtr context, DB::IStorage::AlterLockHolder & /*alter_lock_holder*/)\n+{\n+    auto table_id = getStorageID();\n+    StorageInMemoryMetadata new_metadata = getInMemoryMetadata();\n+    params.apply(new_metadata, context);\n+\n+    if (params.isSettingsAlter())\n+    {\n+        auto & settings_changes = new_metadata.settings_changes->as<ASTSetQuery &>();\n+        auto changed_settings = memory_settings;\n+        changed_settings.applyChanges(settings_changes.changes);\n+        changed_settings.sanityCheck();\n+\n+        /// When modifying the values of max_bytes_to_keep and max_rows_to_keep to be smaller than the old values,\n+        /// the old data needs to be removed.\n+        if (!memory_settings.max_bytes_to_keep || memory_settings.max_bytes_to_keep > changed_settings.max_bytes_to_keep\n+            || !memory_settings.max_rows_to_keep || memory_settings.max_rows_to_keep > changed_settings.max_rows_to_keep)\n+        {\n+            std::lock_guard lock(mutex);\n+\n+            auto new_data = std::make_unique<Blocks>(*(data.get()));\n+            UInt64 new_total_rows = total_size_rows.load(std::memory_order_relaxed);\n+            UInt64 new_total_bytes = total_size_bytes.load(std::memory_order_relaxed);\n+            while (!new_data->empty()\n+                   && ((changed_settings.max_bytes_to_keep && new_total_bytes > changed_settings.max_bytes_to_keep)\n+                       || (changed_settings.max_rows_to_keep && new_total_rows > changed_settings.max_rows_to_keep)))\n+            {\n+                Block oldest_block = new_data->front();\n+                UInt64 rows_to_remove = oldest_block.rows();\n+                UInt64 bytes_to_remove = oldest_block.allocatedBytes();\n+                if (new_total_bytes - bytes_to_remove < changed_settings.min_bytes_to_keep\n+                    || new_total_rows - rows_to_remove < changed_settings.min_rows_to_keep)\n+                {\n+                    break; // stop - removing next block will put us under min_bytes / min_rows threshold\n+                }\n+\n+                // delete old block from current storage table\n+                new_total_rows -= rows_to_remove;\n+                new_total_bytes -= bytes_to_remove;\n+                new_data->erase(new_data->begin());\n+            }\n+\n+            data.set(std::move(new_data));\n+            total_size_rows.store(new_total_rows, std::memory_order_relaxed);\n+            total_size_bytes.store(new_total_bytes, std::memory_order_relaxed);\n+        }\n+        memory_settings = std::move(changed_settings);\n+    }\n+\n+    DatabaseCatalog::instance().getDatabase(table_id.database_name)->alterTable(context, table_id, new_metadata);\n+    setInMemoryMetadata(new_metadata);\n+}\n+\n \n namespace\n {\n@@ -499,7 +553,7 @@ void StorageMemory::restoreDataImpl(const BackupPtr & backup, const String & dat\n \n         while (auto block = block_in.read())\n         {\n-            if (compress)\n+            if (memory_settings.compress)\n             {\n                 Block compressed_block;\n                 for (const auto & elem : block)\n@@ -534,7 +588,8 @@ void StorageMemory::checkAlterIsPossible(const AlterCommands & commands, Context\n     {\n         if (command.type != AlterCommand::Type::ADD_COLUMN && command.type != AlterCommand::Type::MODIFY_COLUMN\n             && command.type != AlterCommand::Type::DROP_COLUMN && command.type != AlterCommand::Type::COMMENT_COLUMN\n-            && command.type != AlterCommand::Type::COMMENT_TABLE && command.type != AlterCommand::Type::RENAME_COLUMN)\n+            && command.type != AlterCommand::Type::COMMENT_TABLE && command.type != AlterCommand::Type::RENAME_COLUMN\n+            && command.type != AlterCommand::Type::MODIFY_SETTING)\n             throw Exception(ErrorCodes::NOT_IMPLEMENTED, \"Alter of type '{}' is not supported by storage {}\",\n                 command.type, getName());\n     }\n@@ -566,9 +621,7 @@ void registerStorageMemory(StorageFactory & factory)\n         if (has_settings)\n             settings.loadFromQuery(*args.storage_def);\n \n-        if (settings.min_bytes_to_keep > settings.max_bytes_to_keep\n-            || settings.min_rows_to_keep > settings.max_rows_to_keep)\n-            throw Exception(ErrorCodes::SETTING_CONSTRAINT_VIOLATION, \"Min. bytes / rows must be set with a max.\");\n+        settings.sanityCheck();\n \n         return std::make_shared<StorageMemory>(args.table_id, args.columns, args.constraints, args.comment, settings);\n     },\ndiff --git a/src/Storages/StorageMemory.h b/src/Storages/StorageMemory.h\nindex 13f1c971d823..50581aa0d61a 100644\n--- a/src/Storages/StorageMemory.h\n+++ b/src/Storages/StorageMemory.h\n@@ -31,7 +31,7 @@ friend class MemorySink;\n         ColumnsDescription columns_description_,\n         ConstraintsDescription constraints_,\n         const String & comment,\n-        const MemorySettings & settings = MemorySettings());\n+        const MemorySettings & memory_settings_ = MemorySettings());\n \n     String getName() const override { return \"Memory\"; }\n \n@@ -46,6 +46,8 @@ friend class MemorySink;\n \n     StorageSnapshotPtr getStorageSnapshot(const StorageMetadataPtr & metadata_snapshot, ContextPtr query_context) const override;\n \n+    const MemorySettings & getMemorySettingsRef() const { return memory_settings; }\n+\n     void read(\n         QueryPlan & query_plan,\n         const Names & column_names,\n@@ -78,6 +80,7 @@ friend class MemorySink;\n     void restoreDataFromBackup(RestorerFromBackup & restorer, const String & data_path_in_backup, const std::optional<ASTs> & partitions) override;\n \n     void checkAlterIsPossible(const AlterCommands & commands, ContextPtr local_context) const override;\n+    void alter(const AlterCommands & params, ContextPtr context, AlterLockHolder & alter_lock_holder) override;\n \n     std::optional<UInt64> totalRows(const Settings &) const override;\n     std::optional<UInt64> totalBytes(const Settings &) const override;\n@@ -134,12 +137,7 @@ friend class MemorySink;\n     std::atomic<size_t> total_size_bytes = 0;\n     std::atomic<size_t> total_size_rows = 0;\n \n-    bool compress;\n-    UInt64 min_rows_to_keep;\n-    UInt64 max_rows_to_keep;\n-    UInt64 min_bytes_to_keep;\n-    UInt64 max_bytes_to_keep;\n-\n+    MemorySettings memory_settings;\n \n     friend class ReadFromMemoryStorageStep;\n };\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03032_storage_memory_modify_settings.reference b/tests/queries/0_stateless/03032_storage_memory_modify_settings.reference\nnew file mode 100644\nindex 000000000000..ca772aa7fd02\n--- /dev/null\n+++ b/tests/queries/0_stateless/03032_storage_memory_modify_settings.reference\n@@ -0,0 +1,20 @@\n+TESTING MODIFY SMALLER BYTES\n+17408\n+16384\n+65536\n+TESTING MODIFY SMALLER ROWS\n+1100\n+1000\n+500\n+TESTING ADD SETTINGS\n+50\n+1000\n+1070\n+1020\n+1100\n+TESTING ADD SETTINGS\n+50\n+1000\n+1020\n+1100\n+TESTING INVALID SETTINGS\ndiff --git a/tests/queries/0_stateless/03032_storage_memory_modify_settings.sql b/tests/queries/0_stateless/03032_storage_memory_modify_settings.sql\nnew file mode 100644\nindex 000000000000..1507107c37fe\n--- /dev/null\n+++ b/tests/queries/0_stateless/03032_storage_memory_modify_settings.sql\n@@ -0,0 +1,76 @@\n+SET max_block_size = 65409; -- Default value\n+\n+SELECT 'TESTING MODIFY SMALLER BYTES';\n+DROP TABLE IF EXISTS memory;\n+CREATE TABLE memory (i UInt32) ENGINE = Memory SETTINGS min_bytes_to_keep = 8192, max_bytes_to_keep = 32768;\n+\n+INSERT INTO memory SELECT * FROM numbers(0, 100); -- 1024 bytes\n+INSERT INTO memory SELECT * FROM numbers(0, 3000); -- 16384 bytes\n+SELECT total_bytes FROM system.tables WHERE name = 'memory' and database = currentDatabase(); -- 17408 in total\n+\n+ALTER TABLE memory MODIFY SETTING min_bytes_to_keep = 4096, max_bytes_to_keep = 16384;\n+SELECT total_bytes FROM system.tables WHERE name = 'memory' and database = currentDatabase(); -- 16384 in total after deleting\n+\n+INSERT INTO memory SELECT * FROM numbers(3000, 10000); -- 65536 bytes\n+SELECT total_bytes FROM system.tables WHERE name = 'memory' and database = currentDatabase();\n+\n+SELECT 'TESTING MODIFY SMALLER ROWS';\n+DROP TABLE IF EXISTS memory;\n+CREATE TABLE memory (i UInt32) ENGINE = Memory SETTINGS min_rows_to_keep = 200, max_rows_to_keep = 2000;\n+\n+INSERT INTO memory SELECT * FROM numbers(0, 100); -- 100 rows\n+INSERT INTO memory SELECT * FROM numbers(100, 1000); -- 1000 rows\n+SELECT total_rows FROM system.tables WHERE name = 'memory' and database = currentDatabase(); -- 1100 in total\n+\n+ALTER TABLE memory MODIFY SETTING min_rows_to_keep = 100, max_rows_to_keep = 1000;\n+SELECT total_rows FROM system.tables WHERE name = 'memory' and database = currentDatabase(); -- 1000 in total after deleting\n+\n+INSERT INTO memory SELECT * FROM numbers(1000, 500); -- 500 rows\n+SELECT total_rows FROM system.tables WHERE name = 'memory' and database = currentDatabase(); -- 500 in total after deleting\n+\n+SELECT 'TESTING ADD SETTINGS';\n+DROP TABLE IF EXISTS memory;\n+CREATE TABLE memory (i UInt32) ENGINE = Memory;\n+\n+INSERT INTO memory SELECT * FROM numbers(0, 50); -- 50 rows\n+SELECT total_rows FROM system.tables WHERE name = 'memory' and database = currentDatabase(); -- 50 in total\n+\n+INSERT INTO memory SELECT * FROM numbers(50, 950); -- 950 rows\n+SELECT total_rows FROM system.tables WHERE name = 'memory' and database = currentDatabase(); -- 1000 in total\n+\n+INSERT INTO memory SELECT * FROM numbers(2000, 70); -- 70 rows\n+SELECT total_rows FROM system.tables WHERE name = 'memory' and database = currentDatabase(); -- 1070 in total\n+\n+ALTER TABLE memory MODIFY SETTING min_rows_to_keep = 100, max_rows_to_keep = 1000;\n+SELECT total_rows FROM system.tables WHERE name = 'memory' and database = currentDatabase(); -- 1020 in total after deleting\n+\n+INSERT INTO memory SELECT * FROM numbers(3000, 1100); -- 1100 rows\n+SELECT total_rows FROM system.tables WHERE name = 'memory' and database = currentDatabase(); -- 1100 in total after deleting\n+\n+SELECT 'TESTING ADD SETTINGS';\n+DROP TABLE IF EXISTS memory;\n+CREATE TABLE memory (i UInt32) ENGINE = Memory;\n+ALTER TABLE memory MODIFY SETTING min_rows_to_keep = 100, max_rows_to_keep = 1000;\n+\n+INSERT INTO memory SELECT * FROM numbers(0, 50); -- 50 rows\n+SELECT total_rows FROM system.tables WHERE name = 'memory' and database = currentDatabase(); -- 50 in total\n+\n+INSERT INTO memory SELECT * FROM numbers(50, 950); -- 950 rows\n+SELECT total_rows FROM system.tables WHERE name = 'memory' and database = currentDatabase(); -- 1000 in total\n+\n+INSERT INTO memory SELECT * FROM numbers(2000, 70); -- 70 rows\n+SELECT total_rows FROM system.tables WHERE name = 'memory' and database = currentDatabase(); -- 1020 in total after deleting\n+\n+INSERT INTO memory SELECT * FROM numbers(3000, 1100); -- 1100 rows\n+SELECT total_rows FROM system.tables WHERE name = 'memory' and database = currentDatabase(); -- 1100 in total after deleting\n+\n+SELECT 'TESTING INVALID SETTINGS';\n+DROP TABLE IF EXISTS memory;\n+CREATE TABLE memory (i UInt32) ENGINE = Memory;\n+ALTER TABLE memory MODIFY SETTING min_rows_to_keep = 100;  -- { serverError 452 }\n+ALTER TABLE memory MODIFY SETTING min_bytes_to_keep = 100; -- { serverError 452 }\n+ALTER TABLE memory MODIFY SETTING max_rows_to_keep = 1000;\n+ALTER TABLE memory MODIFY SETTING max_bytes_to_keep = 1000;\n+\n+DROP TABLE memory;\n+\n",
  "problem_statement": "Support ALTER MODIFY SETTING for Memory tables\n**Use case**\r\n\r\n```\r\nmilovidov-desktop :) ALTER TABLE numbers_capped MODIFY SETTING max_rows_to_keep = 100_000_000\r\n\r\nALTER TABLE numbers_capped\r\n    (MODIFY SETTING max_rows_to_keep = 100000000)\r\n\r\nQuery id: 2a59cea3-d061-4343-b25e-6e51b106156e\r\n\r\n\r\nElapsed: 0.012 sec. \r\n\r\nReceived exception from server (version 24.3.1):\r\nCode: 36. DB::Exception: Received from localhost:9000. DB::Exception: Cannot alter settings, because table engine doesn't support settings changes. (BAD_ARGUMENTS)\r\n```\n",
  "hints_text": "I want to try.\n@zhongyuankai, This will be amazing, thank you!",
  "created_at": "2024-03-28T11:57:36Z"
}