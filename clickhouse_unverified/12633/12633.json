{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 12633,
  "instance_id": "ClickHouse__ClickHouse-12633",
  "issue_numbers": [
    "7306",
    "4165"
  ],
  "base_commit": "1d0be5495c5ef52e5dbb4d333478283a65d82bc1",
  "patch": "diff --git a/src/Interpreters/MutationsInterpreter.cpp b/src/Interpreters/MutationsInterpreter.cpp\nindex 6ea656f0056b..a3287fb44e56 100644\n--- a/src/Interpreters/MutationsInterpreter.cpp\n+++ b/src/Interpreters/MutationsInterpreter.cpp\n@@ -367,15 +367,28 @@ ASTPtr MutationsInterpreter::prepare(bool dry_run)\n                         affected_materialized.emplace(mat_column);\n                 }\n \n-                /// Just to be sure, that we don't change type\n-                /// after update expression execution.\n+                /// When doing UPDATE column = expression WHERE condition\n+                /// we will replace column to the result of the following expression:\n+                ///\n+                /// CAST(if(condition, CAST(expression, type), column), type)\n+                ///\n+                /// Inner CAST is needed to make 'if' work when branches have no common type,\n+                /// example: type is UInt64, UPDATE x = -1 or UPDATE x = x - 1.\n+                ///\n+                /// Outer CAST is added just in case if we don't trust the returning type of 'if'.\n+\n+                auto type_literal = std::make_shared<ASTLiteral>(columns_desc.getPhysical(column).type->getName());\n+\n                 const auto & update_expr = kv.second;\n                 auto updated_column = makeASTFunction(\"CAST\",\n                     makeASTFunction(\"if\",\n                         command.predicate->clone(),\n-                        update_expr->clone(),\n+                        makeASTFunction(\"CAST\",\n+                            update_expr->clone(),\n+                            type_literal),\n                         std::make_shared<ASTIdentifier>(column)),\n-                    std::make_shared<ASTLiteral>(columns_desc.getPhysical(column).type->getName()));\n+                    type_literal);\n+\n                 stages.back().column_to_updated.emplace(column, updated_column);\n             }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01413_alter_update_supertype.reference b/tests/queries/0_stateless/01413_alter_update_supertype.reference\nnew file mode 100644\nindex 000000000000..6ea44b46479c\n--- /dev/null\n+++ b/tests/queries/0_stateless/01413_alter_update_supertype.reference\n@@ -0,0 +1,21 @@\n+0\n+1\n+2\n+3\n+4\n+5\n+6\n+7\n+8\n+9\n+---\n+0\n+0\n+2\n+2\n+4\n+4\n+6\n+6\n+8\n+8\ndiff --git a/tests/queries/0_stateless/01413_alter_update_supertype.sql b/tests/queries/0_stateless/01413_alter_update_supertype.sql\nnew file mode 100644\nindex 000000000000..9003d3f34c9a\n--- /dev/null\n+++ b/tests/queries/0_stateless/01413_alter_update_supertype.sql\n@@ -0,0 +1,13 @@\n+DROP TABLE IF EXISTS t;\n+CREATE TABLE t (x UInt64) ENGINE = MergeTree ORDER BY tuple();\n+INSERT INTO t SELECT number FROM numbers(10);\n+\n+SELECT * FROM t;\n+\n+SET mutations_sync = 1;\n+ALTER TABLE t UPDATE x = x - 1 WHERE x % 2 = 1;\n+\n+SELECT '---';\n+SELECT * FROM t;\n+\n+DROP TABLE t;\n",
  "problem_statement": "There is no supertype for types UInt64, Int64 when using alter table update\nwhen I used sql like `ALTER TABLE XXX update cost = ? , traffic = ? where  1` \r\n, and I also prepare sql ,  and cost, traffic type is `Nullable(Int64)`,  unfortunately get such error below:\r\n\r\n`code: 386, message: There is no supertype for types UInt64, Int64 because some of them are signed integers and some are unsigned integers, but there is no signed integer type, that can exactly represent all required unsigned integer values`\r\n\r\nI also found error exists  when exceed Int32  max limit = 2147483647 , but I don't know why?\nalter update behaviour depends on where (can fail with DB::Exception)\nCreate table sample (a Date, id String) engine=MergeTree order by tuple();\r\nInsert into sample values('2019-01-02','1');\r\n\r\nAlter table sample update  a='2019-02-20' where id = '1';\r\n**DB::Exception: There is no supertype for types String, Date because some of them are String/FixedString and some of them are not**\r\n\r\nAlter table sample update  a='2019-02-20' where 1\r\n**Ok**\r\n\r\nAlter table sample update  a=toDate('2019-02-20') where id = '1';\r\n**Ok**\r\n\r\n\r\nCH 18.14.18 - 19.1.6\r\n\r\n\r\n\r\n\n",
  "hints_text": "Can you please provide full example (i.e. minimal table create statement + some failing alter)? \n@filimonov I have same issue and here is steps to reproduce.\r\n\r\nCREATE TABLE mydb.test3 (\\`id\\` UInt64, \\`i\\` Int64) ENGINE = MergeTree() PRIMARY KEY id ORDER BY id SETTINGS index_granularity = 8192;\r\n\r\nINSERT INTO mydb.test3 VALUES (1, 5756242266);\r\n\r\nALTER TABLE mydb.test3 UPDATE i = 5756242267 WHERE id =1;\r\n\r\nThen I got error: Code: 386. DB::Exception: Received from clickhouse_server:9000. DB::Exception: There is no supertype for types UInt64, Int64 because some of them are signed integers and some are unsigned integers, but there is no signed integer type, that can exactly represent all required unsigned integer values. \r\n\r\nAs I read from documentation ranges are:\r\nInt32 - [ -2147483648 : 2147483647 ]\r\nInt64 - [ -9223372036854775808 : 9223372036854775807 ]\r\n\r\nSo my value of \"i\" is more the int32 but still less than int64.\nCan you try:\r\n```\r\nALTER TABLE mydb.test3 UPDATE i = toInt64(5756242267) WHERE id =1\r\n```\nHello @filimonov . Query that you provided works. \r\nBut that is not a solution for me, because I have to store all column types and do casting on every query, handle column type changes etc.\r\n\r\nUpdate behavior have to be similar to insert in this case, but currently it is different. \r\nMay you please label this issue as a bug?\nRelated issues: #4165 #3746 #7442 #6778\nWe should apply type conversion automatically.\nDetails: \r\n`update a = x where cond` is translated to `update a = cond ? x : a`\r\nFunction if: `date ? '2019-01-01' : date` does not support conversion from constant string to date.\nSame #3746\nI also have same problem but with integers. Described more detailed at #7306",
  "created_at": "2020-07-21T13:34:42Z",
  "modified_files": [
    "src/Interpreters/MutationsInterpreter.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01413_alter_update_supertype.reference",
    "b/tests/queries/0_stateless/01413_alter_update_supertype.sql"
  ]
}