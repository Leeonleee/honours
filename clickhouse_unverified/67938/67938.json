{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 67938,
  "instance_id": "ClickHouse__ClickHouse-67938",
  "issue_numbers": [
    "67937"
  ],
  "base_commit": "357013f08d57ea80e68d32a95fa20fa814f64a31",
  "patch": "diff --git a/src/IO/WriteBufferValidUTF8.cpp b/src/IO/WriteBufferValidUTF8.cpp\nindex d611befac372..2a86f8c2801f 100644\n--- a/src/IO/WriteBufferValidUTF8.cpp\n+++ b/src/IO/WriteBufferValidUTF8.cpp\n@@ -54,7 +54,7 @@ inline void WriteBufferValidUTF8::putReplacement()\n }\n \n \n-inline void WriteBufferValidUTF8::putValid(char *data, size_t len)\n+inline void WriteBufferValidUTF8::putValid(const char *data, size_t len)\n {\n     if (len == 0)\n         return;\n@@ -149,9 +149,34 @@ void WriteBufferValidUTF8::finalizeImpl()\n     /// Write all complete sequences from buffer.\n     nextImpl();\n \n-    /// If unfinished sequence at end, then write replacement.\n+    /// Handle remaining bytes if we have an incomplete sequence\n     if (working_buffer.begin() != memory.data())\n-        putReplacement();\n+    {\n+        const char * p = memory.data();\n+\n+        while (p < pos)\n+        {\n+            UInt8 len = length_of_utf8_sequence[static_cast<const unsigned char>(*p)];\n+            if (p + len > pos)\n+            {\n+                /// Incomplete sequence. Skip one byte.\n+                putReplacement();\n+                ++p;\n+            }\n+            else if (Poco::UTF8Encoding::isLegal(reinterpret_cast<const unsigned char *>(p), len))\n+            {\n+                /// Valid sequence\n+                putValid(p, len);\n+                p += len;\n+            }\n+            else\n+            {\n+                /// Invalid sequence, skip first byte.\n+                putReplacement();\n+                ++p;\n+            }\n+        }\n+    }\n }\n \n }\ndiff --git a/src/IO/WriteBufferValidUTF8.h b/src/IO/WriteBufferValidUTF8.h\nindex daaf0427f883..a398b8ded015 100644\n--- a/src/IO/WriteBufferValidUTF8.h\n+++ b/src/IO/WriteBufferValidUTF8.h\n@@ -26,7 +26,7 @@ class WriteBufferValidUTF8 final : public BufferWithOwnMemory<WriteBuffer>\n \n private:\n     void putReplacement();\n-    void putValid(char * data, size_t len);\n+    void putValid(const char * data, size_t len);\n \n     void nextImpl() override;\n     void finalizeImpl() override;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03221_incomplete_utf8_sequence.reference b/tests/queries/0_stateless/03221_incomplete_utf8_sequence.reference\nnew file mode 100644\nindex 000000000000..4577427251db\n--- /dev/null\n+++ b/tests/queries/0_stateless/03221_incomplete_utf8_sequence.reference\n@@ -0,0 +1,16 @@\n+{\n+\t\"meta\":\n+\t[\n+\t\t{\n+\t\t\t\"name\": \"unhex('f0')\",\n+\t\t\t\"type\": \"String\"\n+\t\t}\n+\t],\n+\n+\t\"data\":\n+\t[\n+\t\t[\"\ufffd\"]\n+\t],\n+\n+\t\"rows\": 1\n+}\ndiff --git a/tests/queries/0_stateless/03221_incomplete_utf8_sequence.sql b/tests/queries/0_stateless/03221_incomplete_utf8_sequence.sql\nnew file mode 100644\nindex 000000000000..ee4f25f3b4ae\n--- /dev/null\n+++ b/tests/queries/0_stateless/03221_incomplete_utf8_sequence.sql\n@@ -0,0 +1,2 @@\n+SET output_format_write_statistics = 0;\n+SELECT unhex('f0') FORMAT JSONCompact;\n",
  "problem_statement": "JSONCompact output format can emit unparsable JSON\n**Describe what's wrong**\r\n\r\nThe `JSONCompact` format can produce unparsable JSON when the last value output ends with a byte between `0xf0` and `0xf7`.\r\n\r\n**Does it reproduce on the most recent release?**\r\n\r\nYes\r\n\r\n**How to reproduce**\r\n\r\n Running the query:\r\n\r\n```\r\nSELECT unhex('f0') FORMAT JSONCompact\r\n```\r\n\r\nOutputs\r\n```\r\n{\r\n\t\"meta\":\r\n\t[\r\n\t\t{\r\n\t\t\t\"name\": \"unhex('f0')\",\r\n\t\t\t\"type\": \"String\"\r\n\t\t}\r\n\t],\r\n\r\n\t\"data\":\r\n\t[\r\n\t\t[\"\ufffd\r\n\t],\r\n\r\n\t\"rows\": 1,\r\n\r\n\t\"statistics\":\r\n\t{\r\n\t\t\"elapsed\": 0.000510458,\r\n\t\t\"rows_read\": 1,\r\n\t\t\"bytes_read\": 1\r\n\t}\r\n}\r\n```\r\n\r\nSee the `data` section\r\n\r\n[See in fiddle.clickhouse.com](https://fiddle.clickhouse.com/59006fc2-0b3b-4d91-a516-2c97766026a0).\r\n\r\n**Expected behavior**\r\n\r\nParsable JSON is emitted\n",
  "hints_text": "",
  "created_at": "2024-08-06T18:09:48Z"
}