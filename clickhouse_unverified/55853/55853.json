{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 55853,
  "instance_id": "ClickHouse__ClickHouse-55853",
  "issue_numbers": [
    "55834"
  ],
  "base_commit": "5d1cc1425a0ff1013fb866c637fe292e7e4773bc",
  "patch": "diff --git a/src/Client/LocalConnection.cpp b/src/Client/LocalConnection.cpp\nindex c05f039ffb61..857b9147487c 100644\n--- a/src/Client/LocalConnection.cpp\n+++ b/src/Client/LocalConnection.cpp\n@@ -95,12 +95,18 @@ void LocalConnection::sendQuery(\n     else\n         query_context = session.makeQueryContext();\n     query_context->setCurrentQueryId(query_id);\n+\n     if (send_progress)\n     {\n         query_context->setProgressCallback([this] (const Progress & value) { this->updateProgress(value); });\n         query_context->setFileProgressCallback([this](const FileProgress & value) { this->updateProgress(Progress(value)); });\n     }\n-    if (!current_database.empty())\n+\n+    /// Switch the database to the desired one (set by the USE query)\n+    /// but don't attempt to do it if we are already in that database.\n+    /// (there is a rare case when it matters - if we deleted the current database,\n+    // we can still do some queries, but we cannot switch to the same database)\n+    if (!current_database.empty() && current_database != query_context->getCurrentDatabase())\n         query_context->setCurrentDatabase(current_database);\n \n     query_context->addQueryParameters(query_parameters);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02900_clickhouse_local_drop_current_database.reference b/tests/queries/0_stateless/02900_clickhouse_local_drop_current_database.reference\nnew file mode 100644\nindex 000000000000..4a3213805366\n--- /dev/null\n+++ b/tests/queries/0_stateless/02900_clickhouse_local_drop_current_database.reference\n@@ -0,0 +1,10 @@\n+CREATE DATABASE foo;\n+USE foo;\n+SELECT 1;\n+1\n+DROP DATABASE foo;\n+SELECT 2;\n+2\n+USE _local;\n+SELECT 3;\n+3\ndiff --git a/tests/queries/0_stateless/02900_clickhouse_local_drop_current_database.sh b/tests/queries/0_stateless/02900_clickhouse_local_drop_current_database.sh\nnew file mode 100755\nindex 000000000000..1af40f8778d2\n--- /dev/null\n+++ b/tests/queries/0_stateless/02900_clickhouse_local_drop_current_database.sh\n@@ -0,0 +1,15 @@\n+#!/usr/bin/env bash\n+\n+CUR_DIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CUR_DIR\"/../shell_config.sh\n+\n+${CLICKHOUSE_LOCAL} --echo --multiquery \"\n+    CREATE DATABASE foo;\n+    USE foo;\n+    SELECT 1;\n+    DROP DATABASE foo;\n+    SELECT 2;\n+    USE _local;\n+    SELECT 3;\n+\"\n",
  "problem_statement": "Deleting database that I'm currently in\nUsing ClickHouse Local, if I create a database:\r\n\r\n```\r\n$ clickhouse local -m --path archives.chdb\r\nProcessing configuration file 'config.xml'.\r\nClickHouse local version 23.9.1.1854 (official build).\r\n\r\n:) create database foo;\r\n\r\nCREATE DATABASE foo\r\n\r\nQuery id: b6ccc456-0334-4ce1-a644-9d6cfeac09b8\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.002 sec.\r\n\r\n:) use foo;\r\n\r\nUSE foo\r\n\r\nQuery id: 3ab73c2b-4c81-4c56-9717-1f3c19ffbd3b\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.000 sec.\r\n```\r\n\r\nAnd then drop it while it's my current database:\r\n\r\n```\r\n:) drop database foo;\r\n\r\nDROP DATABASE foo\r\n\r\nQuery id: b5ec1e84-1120-44ef-989f-fe9228a8218b\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.001 sec.\r\n```\r\n\r\nI'm now a bit stuck!\r\n\r\n```\r\n:) select 1;\r\n\r\nSELECT 1\r\n\r\nQuery id: 5fd07bab-ef65-4cc1-93b9-a797d7f7154e\r\n\r\nException on client:\r\nCode: 81. DB::Exception: Database foo does not exist. (UNKNOWN_DATABASE)\r\n\r\n:) use _local;\r\n\r\nUSE _local\r\n\r\nQuery id: 77296f9e-6e8e-40c7-a06d-479d3c88ea8d\r\n\r\nException on client:\r\nCode: 81. DB::Exception: Database foo does not exist. (UNKNOWN_DATABASE)\r\n```\r\n\r\nI think maybe it shouldn't let me delete a database if I'm using that one, otherwise there's no escape?\r\n\n",
  "hints_text": "",
  "created_at": "2023-10-20T03:15:24Z"
}