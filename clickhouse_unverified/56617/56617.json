{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 56617,
  "instance_id": "ClickHouse__ClickHouse-56617",
  "issue_numbers": [
    "55181"
  ],
  "base_commit": "26ab78dbaf1d315a7ef33ff5f75be5b907b0b981",
  "patch": "diff --git a/cmake/split_debug_symbols.cmake b/cmake/split_debug_symbols.cmake\nindex d6821eb6c482..67c2c386f20c 100644\n--- a/cmake/split_debug_symbols.cmake\n+++ b/cmake/split_debug_symbols.cmake\n@@ -1,3 +1,5 @@\n+# Generates a separate file with debug symbols while stripping it from the main binary.\n+# This is needed for Debian packages.\n macro(clickhouse_split_debug_symbols)\n    set(oneValueArgs TARGET DESTINATION_DIR BINARY_PATH)\n \ndiff --git a/docker/packager/binary/build.sh b/docker/packager/binary/build.sh\nindex cc2613cbaf5a..150ce1ab385c 100755\n--- a/docker/packager/binary/build.sh\n+++ b/docker/packager/binary/build.sh\n@@ -126,6 +126,7 @@ fi\n \n mv ./programs/clickhouse* /output || mv ./programs/*_fuzzer /output\n [ -x ./programs/self-extracting/clickhouse ] && mv ./programs/self-extracting/clickhouse /output\n+[ -x ./programs/self-extracting/clickhouse-stripped ] && mv ./programs/self-extracting/clickhouse-stripped /output\n mv ./src/unit_tests_dbms /output ||: # may not exist for some binary builds\n mv ./programs/*.dict ./programs/*.options ./programs/*_seed_corpus.zip /output ||: # libFuzzer oss-fuzz compatible infrastructure\n \ndiff --git a/programs/CMakeLists.txt b/programs/CMakeLists.txt\nindex eb4a898d4729..eb117e74f6b4 100644\n--- a/programs/CMakeLists.txt\n+++ b/programs/CMakeLists.txt\n@@ -439,6 +439,13 @@ else()\n     install (TARGETS clickhouse RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT clickhouse)\n endif()\n \n+# A target to get stripped binary.\n+# Note: this is different to the above (extract debug symbols to a separate place)\n+add_custom_target(clickhouse-stripped ALL\n+    COMMAND \"${STRIP_PATH}\" -o \"${CMAKE_CURRENT_BINARY_DIR}/clickhouse-stripped\" --strip-debug --remove-section=.comment --remove-section=.note \"${CMAKE_CURRENT_BINARY_DIR}/clickhouse\"\n+    DEPENDS clickhouse\n+    COMMENT \"Stripping clickhouse binary\" VERBATIM)\n+\n if (ENABLE_TESTS)\n     set (CLICKHOUSE_UNIT_TESTS_TARGETS unit_tests_dbms)\n     add_custom_target (clickhouse-tests ALL DEPENDS ${CLICKHOUSE_UNIT_TESTS_TARGETS})\ndiff --git a/programs/self-extracting/CMakeLists.txt b/programs/self-extracting/CMakeLists.txt\nindex f3ff0bbcd783..4b6dd07f6189 100644\n--- a/programs/self-extracting/CMakeLists.txt\n+++ b/programs/self-extracting/CMakeLists.txt\n@@ -11,8 +11,8 @@ else ()\n endif ()\n \n add_custom_target (self-extracting ALL\n-    ${CMAKE_COMMAND} -E remove clickhouse\n+    ${CMAKE_COMMAND} -E remove clickhouse clickhouse-stripped\n     COMMAND ${COMPRESSOR} ${DECOMPRESSOR} clickhouse ../clickhouse\n-    DEPENDS clickhouse compressor\n+    COMMAND ${COMPRESSOR} ${DECOMPRESSOR} clickhouse-stripped ../clickhouse-stripped\n+    DEPENDS clickhouse clickhouse-stripped compressor\n )\n-\n",
  "test_patch": "diff --git a/tests/ci/build_check.py b/tests/ci/build_check.py\nindex 584ece0a736c..c18abcf11917 100644\n--- a/tests/ci/build_check.py\n+++ b/tests/ci/build_check.py\n@@ -212,10 +212,17 @@ def upload_master_static_binaries(\n     elif pr_info.base_ref != \"master\":\n         return\n \n-    s3_path = \"/\".join((pr_info.base_ref, static_binary_name, \"clickhouse\"))\n-    binary = build_output_path / \"clickhouse\"\n-    url = s3_helper.upload_build_file_to_s3(binary, s3_path)\n-    print(f\"::notice ::Binary static URL: {url}\")\n+    # Full binary with debug info:\n+    s3_path_full = \"/\".join((pr_info.base_ref, static_binary_name, \"clickhouse-full\"))\n+    binary_full = build_output_path / \"clickhouse\"\n+    url_full = s3_helper.upload_build_file_to_s3(binary_full, s3_path_full)\n+    print(f\"::notice ::Binary static URL (with debug info): {url_full}\")\n+\n+    # Stripped binary without debug info:\n+    s3_path_compact = \"/\".join((pr_info.base_ref, static_binary_name, \"clickhouse\"))\n+    binary_compact = build_output_path / \"clickhouse-stripped\"\n+    url_compact = s3_helper.upload_build_file_to_s3(binary_compact, s3_path_compact)\n+    print(f\"::notice ::Binary static URL (compact): {url_compact}\")\n \n \n def main():\n",
  "problem_statement": "Publish the self-contained binary without a debug info\n**Use case**\r\n\r\nSomeone on the internet pointed out that it is large: https://twitter.com/eatonphil/status/1707783632566292596\r\nThe reason for the size is that we include the debug info to have line numbers in stack traces.\r\nMaybe it is not needed - the symbol names will be present anyway.\r\n\r\nIf we will remove the debug info, it will be well under 100 MB.\r\n\r\nCC @eatonphil \r\n\n",
  "hints_text": "That's awesome to hear! Great work getting it down from a few years ago!\nFYI it\u2019s not a fully released product yet (some of our customers are already using it though), but we offer hosted [debuginfod](https://sourceware.org/elfutils/Debuginfod.html) servers as part of [Polar Signals Cloud](https://www.polarsignals.com/), which lots of our customers are using to upload debuginfos in CI/CD but then still have debuginfos available whenever they want to launch a debugger or profiler (it\u2019s deeply integrated into perf, gdb and more). If this sounds interesting we\u2019d love to sponsor the clickhouse project with this service.\n does it mean we needn't uncompress and strip? for example, the file download from\r\nhttps://builds.clickhouse.com/master/aarch64v80compat/clickhouse  is 606MB. \r\nafter run clickhouse, it became 3454486984 bytes. \r\nafter strip, it became  389703504 bytes. will we get 389MB directly?",
  "created_at": "2023-11-11T06:30:20Z",
  "modified_files": [
    "cmake/split_debug_symbols.cmake",
    "docker/packager/binary/build.sh",
    "programs/CMakeLists.txt",
    "programs/self-extracting/CMakeLists.txt"
  ],
  "modified_test_files": [
    "tests/ci/build_check.py"
  ]
}