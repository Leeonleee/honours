{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 81583,
  "instance_id": "ClickHouse__ClickHouse-81583",
  "issue_numbers": [
    "81572"
  ],
  "base_commit": "aa677c025b57cad44ae67024d9b02fd5d24e12b5",
  "patch": "diff --git a/src/Processors/QueryPlan/Optimizations/optimizeReadInOrder.cpp b/src/Processors/QueryPlan/Optimizations/optimizeReadInOrder.cpp\nindex dd0080eea820..938f25b89fa8 100644\n--- a/src/Processors/QueryPlan/Optimizations/optimizeReadInOrder.cpp\n+++ b/src/Processors/QueryPlan/Optimizations/optimizeReadInOrder.cpp\n@@ -429,7 +429,7 @@ SortingInputOrder buildInputOrderFromSortDescription(\n         // ASC NULLS LAST (\"in order\") or DESC NULLS FIRST (\"reverse\")\n         /// supported only this direction, other cases are represented as nulls_direction==-1\n         /// Also actual for floating point values NaN.\n-        const auto column_is_nullable = sorting_key.data_types[next_sort_key]->isNullable() || isFloat(*sorting_key.data_types[next_sort_key]);\n+        const auto column_is_nullable = isNullableOrLowCardinalityNullable(sorting_key.data_types[next_sort_key])|| isFloat(*sorting_key.data_types[next_sort_key]);\n         if (column_is_nullable && sort_column_description.nulls_direction == -1)\n             break;\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03513_read_in_order_nullable.reference b/tests/queries/0_stateless/03513_read_in_order_nullable.reference\nindex fed4783a9e25..8faf3cbfcf03 100644\n--- a/tests/queries/0_stateless/03513_read_in_order_nullable.reference\n+++ b/tests/queries/0_stateless/03513_read_in_order_nullable.reference\n@@ -62,3 +62,19 @@ nan\n nan\n 0\n 1\n+--- table asc, query desc, last\n+1\n+0\n+\\N\n+--- table asc, query desc, first\n+\\N\n+1\n+0\n+--- table asc, query asc, last\n+0\n+1\n+\\N\n+--- table asc, query asc, first\n+\\N\n+0\n+1\ndiff --git a/tests/queries/0_stateless/03513_read_in_order_nullable.sql b/tests/queries/0_stateless/03513_read_in_order_nullable.sql\nindex 461cf1c959f1..b3bc740a21f4 100644\n--- a/tests/queries/0_stateless/03513_read_in_order_nullable.sql\n+++ b/tests/queries/0_stateless/03513_read_in_order_nullable.sql\n@@ -52,3 +52,16 @@ SELECT '--- table desc, query asc, last';\n SELECT * FROM f1 ORDER BY c0 ASC NULLS LAST;\n SELECT '--- table desc, query asc, first';\n SELECT * FROM f1 ORDER BY c0 ASC NULLS FIRST;\n+\n+SET allow_suspicious_low_cardinality_types = 1;\n+CREATE TABLE lct0 (c0 LowCardinality(Nullable(Int64))) ENGINE = MergeTree() ORDER BY c0 SETTINGS allow_nullable_key=1;\n+INSERT INTO TABLE lct0 VALUES (0);\n+INSERT INTO TABLE lct0 VALUES (NULL), (1);\n+SELECT '--- table asc, query desc, last';\n+SELECT * FROM lct0 ORDER BY c0 DESC NULLS LAST;\n+SELECT '--- table asc, query desc, first';\n+SELECT * FROM lct0 ORDER BY c0 DESC NULLS FIRST;\n+SELECT '--- table asc, query asc, last';\n+SELECT * FROM lct0 ORDER BY c0 ASC NULLS LAST;\n+SELECT '--- table asc, query asc, first';\n+SELECT * FROM lct0 ORDER BY c0 ASC NULLS FIRST;\n",
  "problem_statement": "NULL values are still not correctly sorted for LowCardinality types\n### Describe the bug\n\nEasy to reproduce.\n\n### How to reproduce\n\nRun Fiddle: https://fiddle.clickhouse.com/3d92f89d-f08e-402b-a7eb-a74a027adcf5\n\n### Error message and/or stacktrace\n\n_No response_\n",
  "hints_text": "",
  "created_at": "2025-06-10T13:04:25Z"
}