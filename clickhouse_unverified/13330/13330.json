{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 13330,
  "instance_id": "ClickHouse__ClickHouse-13330",
  "issue_numbers": [
    "12523",
    "13253",
    "13221"
  ],
  "base_commit": "0c5b0abfe223db5221dce5a2d1e0e37729f2c245",
  "patch": "diff --git a/src/Interpreters/CollectJoinOnKeysVisitor.cpp b/src/Interpreters/CollectJoinOnKeysVisitor.cpp\nindex 2e8f17edb81a..e0fce4854d2d 100644\n--- a/src/Interpreters/CollectJoinOnKeysVisitor.cpp\n+++ b/src/Interpreters/CollectJoinOnKeysVisitor.cpp\n@@ -11,6 +11,8 @@ namespace ErrorCodes\n {\n     extern const int INVALID_JOIN_ON_EXPRESSION;\n     extern const int AMBIGUOUS_COLUMN_NAME;\n+    extern const int SYNTAX_ERROR;\n+    extern const int NOT_IMPLEMENTED;\n     extern const int LOGICAL_ERROR;\n }\n \n@@ -54,47 +56,58 @@ void CollectJoinOnKeysMatcher::Data::asofToJoinKeys()\n     addJoinKeys(asof_left_key, asof_right_key, {1, 2});\n }\n \n-\n void CollectJoinOnKeysMatcher::visit(const ASTFunction & func, const ASTPtr & ast, Data & data)\n {\n     if (func.name == \"and\")\n         return; /// go into children\n \n-    if (func.name == \"equals\")\n+    if (func.name == \"or\")\n+        throw Exception(\"JOIN ON does not support OR. Unexpected '\" + queryToString(ast) + \"'\", ErrorCodes::NOT_IMPLEMENTED);\n+\n+    ASOF::Inequality inequality = ASOF::getInequality(func.name);\n+    if (func.name == \"equals\" || inequality != ASOF::Inequality::None)\n     {\n         if (func.arguments->children.size() != 2)\n-        {\n-            throwSyntaxException(\"Function 'equals' takes two arguments, got '\"\n-                + func.formatForErrorMessage() + \"' instead.\");\n-        }\n+            throw Exception(\"Function \" + func.name + \" takes two arguments, got '\" + func.formatForErrorMessage() + \"' instead\",\n+                            ErrorCodes::SYNTAX_ERROR);\n+    }\n+    else\n+        throw Exception(\"Expected equality or inequality, got '\" + queryToString(ast) + \"'\", ErrorCodes::INVALID_JOIN_ON_EXPRESSION);\n+\n+    if (func.name == \"equals\")\n+    {\n         ASTPtr left = func.arguments->children.at(0);\n         ASTPtr right = func.arguments->children.at(1);\n         auto table_numbers = getTableNumbers(ast, left, right, data);\n         data.addJoinKeys(left, right, table_numbers);\n-        return;\n     }\n-\n-    ASOF::Inequality inequality = ASOF::getInequality(func.name);\n-\n-    if (data.is_asof && (inequality != ASOF::Inequality::None))\n+    else if (inequality != ASOF::Inequality::None)\n     {\n+        if (!data.is_asof)\n+            throw Exception(\"JOIN ON inequalities are not supported. Unexpected '\" + queryToString(ast) + \"'\",\n+                            ErrorCodes::NOT_IMPLEMENTED);\n+\n         if (data.asof_left_key || data.asof_right_key)\n-            throwSyntaxException(\"ASOF JOIN expects exactly one inequality in ON section, unexpected \" + queryToString(ast) + \".\");\n+            throw Exception(\"ASOF JOIN expects exactly one inequality in ON section. Unexpected '\" + queryToString(ast) + \"'\",\n+                            ErrorCodes::INVALID_JOIN_ON_EXPRESSION);\n \n         ASTPtr left = func.arguments->children.at(0);\n         ASTPtr right = func.arguments->children.at(1);\n         auto table_numbers = getTableNumbers(ast, left, right, data);\n \n         data.addAsofJoinKeys(left, right, table_numbers, inequality);\n-        return;\n     }\n-\n-    throwSyntaxException(\"Expected equals expression, got \" + queryToString(ast) + \".\");\n }\n \n void CollectJoinOnKeysMatcher::getIdentifiers(const ASTPtr & ast, std::vector<const ASTIdentifier *> & out)\n {\n-    if (const auto * ident = ast->as<ASTIdentifier>())\n+    if (const auto * func = ast->as<ASTFunction>())\n+    {\n+        if (func->name == \"arrayJoin\")\n+            throw Exception(\"Not allowed function in JOIN ON. Unexpected '\" + queryToString(ast) + \"'\",\n+                            ErrorCodes::INVALID_JOIN_ON_EXPRESSION);\n+    }\n+    else if (const auto * ident = ast->as<ASTIdentifier>())\n     {\n         if (IdentifierSemantic::getColumnName(*ident))\n             out.push_back(ident);\n@@ -122,8 +135,8 @@ std::pair<size_t, size_t> CollectJoinOnKeysMatcher::getTableNumbers(const ASTPtr\n         auto left_name = queryToString(*left_identifiers[0]);\n         auto right_name = queryToString(*right_identifiers[0]);\n \n-        throwSyntaxException(\"In expression \" + queryToString(expr) + \" columns \" + left_name + \" and \" + right_name\n-                                + \" are from the same table but from different arguments of equal function.\");\n+        throw Exception(\"In expression \" + queryToString(expr) + \" columns \" + left_name + \" and \" + right_name\n+            + \" are from the same table but from different arguments of equal function\", ErrorCodes::INVALID_JOIN_ON_EXPRESSION);\n     }\n \n     return std::make_pair(left_idents_table, right_idents_table);\n@@ -214,12 +227,4 @@ size_t CollectJoinOnKeysMatcher::getTableForIdentifiers(std::vector<const ASTIde\n     return table_number;\n }\n \n-[[noreturn]] void CollectJoinOnKeysMatcher::throwSyntaxException(const String & msg)\n-{\n-    throw Exception(\"Invalid expression for JOIN ON. \" + msg +\n-        \" Supported syntax: JOIN ON Expr([table.]column, ...) = Expr([table.]column, ...) \"\n-        \"[AND Expr([table.]column, ...) = Expr([table.]column, ...) ...]\",\n-        ErrorCodes::INVALID_JOIN_ON_EXPRESSION);\n-}\n-\n }\ndiff --git a/src/Interpreters/CollectJoinOnKeysVisitor.h b/src/Interpreters/CollectJoinOnKeysVisitor.h\nindex c9b106d21dd4..54e008a114ef 100644\n--- a/src/Interpreters/CollectJoinOnKeysVisitor.h\n+++ b/src/Interpreters/CollectJoinOnKeysVisitor.h\n@@ -49,8 +49,7 @@ class CollectJoinOnKeysMatcher\n     static bool needChildVisit(const ASTPtr & node, const ASTPtr &)\n     {\n         if (auto * func = node->as<ASTFunction>())\n-            if (func->name == \"equals\")\n-                return false;\n+            return func->name == \"and\";\n         return true;\n     }\n \n@@ -61,8 +60,6 @@ class CollectJoinOnKeysMatcher\n     static std::pair<size_t, size_t> getTableNumbers(const ASTPtr & expr, const ASTPtr & left_ast, const ASTPtr & right_ast, Data & data);\n     static const ASTIdentifier * unrollAliases(const ASTIdentifier * identifier, const Aliases & aliases);\n     static size_t getTableForIdentifiers(std::vector<const ASTIdentifier *> & identifiers, const Data & data);\n-\n-    [[noreturn]] static void throwSyntaxException(const String & msg);\n };\n \n /// Parse JOIN ON expression and collect ASTs for joined columns.\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01429_join_on_error_messages.reference b/tests/queries/0_stateless/01429_join_on_error_messages.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/01429_join_on_error_messages.sql b/tests/queries/0_stateless/01429_join_on_error_messages.sql\nnew file mode 100644\nindex 000000000000..f9e2647f2e36\n--- /dev/null\n+++ b/tests/queries/0_stateless/01429_join_on_error_messages.sql\n@@ -0,0 +1,11 @@\n+SELECT 1 FROM (select 1 a) A JOIN (select 1 b) B ON (arrayJoin([1]) = B.b); -- { serverError 403 }\n+SELECT 1 FROM (select 1 a) A JOIN (select 1 b) B ON (A.a = arrayJoin([1])); -- { serverError 403 }\n+\n+SELECT 1 FROM (select 1 a) A JOIN (select 1 b) B ON equals(a); -- { serverError 62 }\n+SELECT 1 FROM (select 1 a) A JOIN (select 1 b) B ON less(a); -- { serverError 62 }\n+\n+SELECT 1 FROM (select 1 a) A JOIN (select 1 b) B ON a = b OR a = b; -- { serverError 48 }\n+SELECT 1 FROM (select 1 a) A JOIN (select 1 b) B ON a = b AND a > b; -- { serverError 48 }\n+SELECT 1 FROM (select 1 a) A JOIN (select 1 b) B ON a = b AND a < b; -- { serverError 48 }\n+SELECT 1 FROM (select 1 a) A JOIN (select 1 b) B ON a = b AND a >= b; -- { serverError 48 }\n+SELECT 1 FROM (select 1 a) A JOIN (select 1 b) B ON a = b AND a <= b; -- { serverError 48 }\n",
  "problem_statement": "Continuation over multiple expressions is not supported\n```\r\nSELECT 1 FROM (select 1 a) A JOIN (select 1 b) B ON (arrayJoin([1]) = B.b)\r\n\r\n\r\n2020.07.15 15:18:57.846463 [ 331717 ] {05d39ea9-f476-47e4-aff3-99398345ccc0} <Error> : Logical error: 'Continuation over multiple expressions is not supported'.\r\nclickhouse-server: /home/akuzm/ch4/ch/src/Common/Exception.cpp:45: DB::Exception::Exception(const std::string &, int): Assertion `false' failed.\r\n2020.07.15 15:18:57.846953 [ 331651 ] {} <Trace> BaseDaemon: Received signal 6\r\n2020.07.15 15:18:57.847422 [ 331737 ] {} <Fatal> BaseDaemon: ########################################\r\n2020.07.15 15:18:57.847989 [ 331737 ] {} <Fatal> BaseDaemon: (version 20.7.1.1, build id: F176DE2A5C050ABF) (from thread 331717) (query_id: 05d39ea9-f476-47e4-aff3-99398345ccc0) Received signal Aborted (6)\r\n2020.07.15 15:18:57.848201 [ 331737 ] {} <Fatal> BaseDaemon: \r\n2020.07.15 15:18:57.848381 [ 331737 ] {} <Fatal> BaseDaemon: Stack trace: 0x7fe02e61518b 0x7fe02e5f4859 0x7fe02e5f4729 0x7fe02e605f36 0x7fe03253c3a5 0x7fe02190cf5c 0x7fe01d47b208 0x7fe021d691ab 0x7fe021d67c36 0x7fe021dd5378 0x7fe021dd55a6 0x7fe022102883 0x7fe02210187a 0x7fe01e68f874 0x7fe01e696dc8 0x7fe02f7ddd7c 0x7fe02f7de58a 0x7fe02f2ef173 0x7fe02f2ec03d 0x7fe02f2eaeba 0x7fe02e45b609 0x7fe02e6f1103\r\n2020.07.15 15:18:57.848993 [ 331737 ] {} <Fatal> BaseDaemon: 4. /build/glibc-YYA7BZ/glibc-2.31/signal/../sysdeps/unix/sysv/linux/raise.c:51: raise @ 0x4618b in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n2020.07.15 15:18:57.849230 [ 331737 ] {} <Fatal> BaseDaemon: 5. /build/glibc-YYA7BZ/glibc-2.31/stdlib/abort.c:81: __GI_abort @ 0x25859 in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n2020.07.15 15:18:57.849508 [ 331737 ] {} <Fatal> BaseDaemon: 6. /build/glibc-YYA7BZ/glibc-2.31/intl/loadmsgcat.c:509: _nl_load_domain.cold @ 0x25729 in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n2020.07.15 15:18:57.849782 [ 331737 ] {} <Fatal> BaseDaemon: 7. ? @ 0x36f36 in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n2020.07.15 15:18:57.850100 [ 331737 ] {} <Fatal> BaseDaemon: 8. /home/akuzm/ch4/ch/src/Common/Exception.cpp:48: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x29c3a5 in /home/akuzm/ch4/build-clang10/src/libclickhouse_common_iod.so\r\n2020.07.15 15:18:57.851087 [ 331737 ] {} <Fatal> BaseDaemon: 9. /home/akuzm/ch4/ch/src/Interpreters/ExpressionActions.cpp:691: DB::ExpressionActions::execute(DB::Block&, std::__1::shared_ptr<DB::ExtraBlock>&) const @ 0x11abf5c in /home/akuzm/ch4/build-clang10/src/libclickhouse_interpretersd.so\r\n2020.07.15 15:18:57.851559 [ 331737 ] {} <Fatal> BaseDaemon: 10. /home/akuzm/ch4/ch/src/Processors/Transforms/InflatingExpressionTransform.cpp:11: DB::InflatingExpressionTransform::transformHeader(DB::Block, std::__1::shared_ptr<DB::ExpressionActions> const&) @ 0x270208 in /home/akuzm/ch4/build-clang10/src/libclickhouse_processors_transformsd.so\r\n2020.07.15 15:18:57.853609 [ 331737 ] {} <Fatal> BaseDaemon: 11. /home/akuzm/ch4/ch/src/Interpreters/InterpreterSelectQuery.cpp:879: DB::InterpreterSelectQuery::executeImpl(DB::QueryPlan&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>) @ 0x16081ab in /home/akuzm/ch4/build-clang10/src/libclickhouse_interpretersd.so\r\n2020.07.15 15:18:57.855667 [ 331737 ] {} <Fatal> BaseDaemon: 12. /home/akuzm/ch4/ch/src/Interpreters/InterpreterSelectQuery.cpp:472: DB::InterpreterSelectQuery::buildQueryPlan(DB::QueryPlan&) @ 0x1606c36 in /home/akuzm/ch4/build-clang10/src/libclickhouse_interpretersd.so\r\n2020.07.15 15:18:57.857878 [ 331737 ] {} <Fatal> BaseDaemon: 13. /home/akuzm/ch4/ch/src/Interpreters/InterpreterSelectWithUnionQuery.cpp:183: DB::InterpreterSelectWithUnionQuery::buildQueryPlan(DB::QueryPlan&) @ 0x1674378 in /home/akuzm/ch4/build-clang10/src/libclickhouse_interpretersd.so\r\n2020.07.15 15:18:57.860239 [ 331737 ] {} <Fatal> BaseDaemon: 14. /home/akuzm/ch4/ch/src/Interpreters/InterpreterSelectWithUnionQuery.cpp:198: DB::InterpreterSelectWithUnionQuery::execute() @ 0x16745a6 in /home/akuzm/ch4/build-clang10/src/libclickhouse_interpretersd.so\r\n2020.07.15 15:18:57.863921 [ 331737 ] {} <Fatal> BaseDaemon: 15. /home/akuzm/ch4/ch/src/Interpreters/executeQuery.cpp:385: DB::executeQueryImpl(char const*, char const*, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool, DB::ReadBuffer*) @ 0x19a1883 in /home/akuzm/ch4/build-clang10/src/libclickhouse_interpretersd.so\r\n2020.07.15 15:18:57.867729 [ 331737 ] {} <Fatal> BaseDaemon: 16. /home/akuzm/ch4/ch/src/Interpreters/executeQuery.cpp:653: DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool) @ 0x19a087a in /home/akuzm/ch4/build-clang10/src/libclickhouse_interpretersd.so\r\n2020.07.15 15:18:57.868457 [ 331737 ] {} <Fatal> BaseDaemon: 17. /home/akuzm/ch4/ch/src/Server/TCPHandler.cpp:253: DB::TCPHandler::runImpl() @ 0x36a874 in /home/akuzm/ch4/build-clang10/src/libclickhouse_serverd.so\r\n2020.07.15 15:18:57.869136 [ 331737 ] {} <Fatal> BaseDaemon: 18. /home/akuzm/ch4/ch/src/Server/TCPHandler.cpp:1210: DB::TCPHandler::run() @ 0x371dc8 in /home/akuzm/ch4/build-clang10/src/libclickhouse_serverd.so\r\n2020.07.15 15:18:57.870074 [ 331737 ] {} <Fatal> BaseDaemon: 19. /home/akuzm/ch4/ch/contrib/poco/Net/src/TCPServerConnection.cpp:43: Poco::Net::TCPServerConnection::start() @ 0x1b9d7c in /home/akuzm/ch4/build-clang10/contrib/poco-cmake/Net/lib_poco_netd.so\r\n2020.07.15 15:18:57.870916 [ 331737 ] {} <Fatal> BaseDaemon: 20. /home/akuzm/ch4/ch/contrib/poco/Net/src/TCPServerDispatcher.cpp:114: Poco::Net::TCPServerDispatcher::run() @ 0x1ba58a in /home/akuzm/ch4/build-clang10/contrib/poco-cmake/Net/lib_poco_netd.so\r\n2020.07.15 15:18:57.871865 [ 331737 ] {} <Fatal> BaseDaemon: 21. /home/akuzm/ch4/ch/contrib/poco/Foundation/src/ThreadPool.cpp:199: Poco::PooledThread::run() @ 0x276173 in /home/akuzm/ch4/build-clang10/contrib/poco-cmake/Foundation/lib_poco_foundationd.so\r\n2020.07.15 15:18:57.873069 [ 331737 ] {} <Fatal> BaseDaemon: 22. /home/akuzm/ch4/ch/contrib/poco/Foundation/src/Thread.cpp:56: Poco::(anonymous namespace)::RunnableHolder::run() @ 0x27303d in /home/akuzm/ch4/build-clang10/contrib/poco-cmake/Foundation/lib_poco_foundationd.so\r\n2020.07.15 15:18:57.874004 [ 331737 ] {} <Fatal> BaseDaemon: 23. /home/akuzm/ch4/ch/contrib/poco/Foundation/src/Thread_POSIX.cpp:345: Poco::ThreadImpl::runnableEntry(void*) @ 0x271eba in /home/akuzm/ch4/build-clang10/contrib/poco-cmake/Foundation/lib_poco_foundationd.so\r\n2020.07.15 15:18:57.874453 [ 331737 ] {} <Fatal> BaseDaemon: 24. start_thread @ 0x9609 in /lib/x86_64-linux-gnu/libpthread-2.31.so\r\n2020.07.15 15:18:57.874958 [ 331737 ] {} <Fatal> BaseDaemon: 25. /build/glibc-YYA7BZ/glibc-2.31/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:97: clone @ 0x122103 in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n```\nAssertion failure in ASOF JOIN\n```\r\nSELECT * FROM t0 ASOF LEFT JOIN t1 ON (t1.x = t0.x) AND greater(('\\0llall\\0ll\\0ll\\0llall\\0llall\\0llall\\0llall\\0llall\\0llall\\0llall\\0llall\\0llall\\0llall\\0ll\\0ll\\0llall\\0llall\\0llall', x, x, y), t0.y, t1.y)\r\n```\r\n\nDB::Exception: St12out_of_range: vector in CollectJoinOnKeysVisitor.cpp\nAbort is triggered in debug build due to logical error.\r\n\r\n```\r\nCREATE TABLE A(k UInt32, t UInt32, a UInt64) ENGINE = MergeTree() ORDER BY (k, t);\r\nINSERT INTO A(k,t,a) VALUES (1,101,1),(1,102,2),(1,103,3),(1,104,4),(1,105,5);\r\n\r\nCREATE TABLE B(k UInt32, t UInt32, b UInt64) ENGINE = MergeTree() ORDER BY (k, t);\r\nINSERT INTO B(k,t,b) VALUES (1,102,2), (1,104,4);\r\n\r\nSELECT \r\n    (257, NULL, NULL), \r\n    (1, -2), \r\n    (-2, 7), \r\n    ('102.5', '0.03', NULL, NULL, NULL), \r\n    A.k, \r\n    toString((10, 0), 10.000100135803223), \r\n    A.a, \r\n    B.b, \r\n    toString(B.t), \r\n    B.k\r\nFROM A\r\nASOF INNER JOIN B ON (A.k = B.k) AND NULL AND greaterOrEquals(B.t)\r\nORDER BY tuple(A.k) ASC;\r\n\r\n\r\nReceived exception from server (version 20.7.1):\r\nCode: 1001. DB::Exception: Received from localhost:9000. DB::Exception: St12out_of_range: vector. \r\n```\r\n\n",
  "hints_text": "Error message is also cryptic: what is \"continuation\"?\n@4ertus2 You can simply forbid `arrayJoin` in ON or USING.\nCannot reproduce on current master + #13291 \r\n\r\n```\r\nDROP TABLE IF EXISTS t0;\r\nDROP TABLE IF EXISTS t1;\r\n\r\nCREATE TABLE t0 (x UInt32, y UInt32) engine = Memory;\r\nCREATE TABLE t1 (x UInt32, y UInt32) engine = Memory;\r\n\r\nSELECT * FROM t0 ASOF LEFT JOIN t1\r\nON (t1.x = t0.x) AND greater(('\\0llall\\0ll\\0ll\\0llall\\0llall\\0llall\\0llall\\0llall\\0llall\\0llall\\0llall\\0llall\\0llall\\0ll\\0ll\\0llall\\0llall\\0llall', x, x, y), t0.y, t1.y);\r\n\r\nDROP TABLE t0;\r\nDROP TABLE t1;\r\n```\r\n\r\n```\r\nColumn 'x' is ambiguous\r\n```\r\n\r\nAnd then when I change `x -> t1.x`, `y -> t1.y`\r\n\r\n```\r\nCode: 403. DB::Exception: Received from localhost:9000. DB::Exception: Invalid expression for JOIN ON. Expected equals expression, got ('\\0llall\\0ll\\0ll\\0llall\\0llall\\0llall\\0llall\\0llall\\0llall\\0llall\\0llall\\0llall\\0llall\\0ll\\0ll\\0llall\\0llall\\0llall', t1.x, t1.x, t1.y). Supported syntax: JOIN ON Expr([table.]column, ...) = Expr([table.]column, ...) [AND Expr([table.]column, ...) = Expr([table.]column, ...) ...].\r\n```\nCC @4ertus2 ",
  "created_at": "2020-08-04T13:30:34Z"
}