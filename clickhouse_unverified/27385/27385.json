{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 27385,
  "instance_id": "ClickHouse__ClickHouse-27385",
  "issue_numbers": [
    "27171"
  ],
  "base_commit": "e1927118cd1d020099bbd564a8b23cf4c5bc5c40",
  "patch": "diff --git a/src/Server/TCPHandler.cpp b/src/Server/TCPHandler.cpp\nindex 269c33d952e5..0339b144f091 100644\n--- a/src/Server/TCPHandler.cpp\n+++ b/src/Server/TCPHandler.cpp\n@@ -32,6 +32,7 @@\n #include <DataTypes/DataTypeLowCardinality.h>\n #include <Compression/CompressionFactory.h>\n #include <common/logger_useful.h>\n+#include <fmt/format.h>\n \n #include <Processors/Executors/PullingAsyncPipelineExecutor.h>\n \n@@ -46,6 +47,27 @@\n namespace DB\n {\n \n+namespace\n+{\n+std::string formatHTTPErrorResponse(const Poco::Util::AbstractConfiguration& config)\n+{\n+    std::string result = fmt::format(\n+        \"HTTP/1.0 400 Bad Request\\r\\n\\r\\n\"\n+        \"Port {} is for clickhouse-client program\\r\\n\",\n+        config.getString(\"tcp_port\"));\n+\n+    if (config.has(\"http_port\"))\n+    {\n+        result += fmt::format(\n+            \"You must use port {} for HTTP.\\r\\n\",\n+            config.getString(\"http_port\"));\n+    }\n+\n+    return result;\n+}\n+}\n+\n+\n namespace ErrorCodes\n {\n     extern const int LOGICAL_ERROR;\n@@ -922,10 +944,8 @@ void TCPHandler::receiveHello()\n           */\n         if (packet_type == 'G' || packet_type == 'P')\n         {\n-            writeString(\"HTTP/1.0 400 Bad Request\\r\\n\\r\\n\"\n-                \"Port \" + server.config().getString(\"tcp_port\") + \" is for clickhouse-client program.\\r\\n\"\n-                \"You must use port \" + server.config().getString(\"http_port\") + \" for HTTP.\\r\\n\",\n-                *out);\n+            writeString(formatHTTPErrorResponse(server.config()),\n+                        *out);\n \n             throw Exception(\"Client has connected to wrong port\", ErrorCodes::CLIENT_HAS_CONNECTED_TO_WRONG_PORT);\n         }\n",
  "test_patch": "diff --git a/tests/integration/test_tcp_handler_http_responses/__init__.py b/tests/integration/test_tcp_handler_http_responses/__init__.py\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/integration/test_tcp_handler_http_responses/configs/config.d/http-port-31337.xml b/tests/integration/test_tcp_handler_http_responses/configs/config.d/http-port-31337.xml\nnew file mode 100644\nindex 000000000000..23ce561b5b2c\n--- /dev/null\n+++ b/tests/integration/test_tcp_handler_http_responses/configs/config.d/http-port-31337.xml\n@@ -0,0 +1,3 @@\n+<yandex>\n+  <http_port replace=\"replace\">31337</http_port>\n+</yandex>\ndiff --git a/tests/integration/test_tcp_handler_http_responses/configs/config.d/no-http-port.xml b/tests/integration/test_tcp_handler_http_responses/configs/config.d/no-http-port.xml\nnew file mode 100644\nindex 000000000000..86dab92bd91e\n--- /dev/null\n+++ b/tests/integration/test_tcp_handler_http_responses/configs/config.d/no-http-port.xml\n@@ -0,0 +1,3 @@\n+<yandex>\n+    <http_port remove=\"remove\"></http_port>\n+</yandex>\ndiff --git a/tests/integration/test_tcp_handler_http_responses/test_case.py b/tests/integration/test_tcp_handler_http_responses/test_case.py\nnew file mode 100644\nindex 000000000000..38b5ba909a7d\n--- /dev/null\n+++ b/tests/integration/test_tcp_handler_http_responses/test_case.py\n@@ -0,0 +1,42 @@\n+\"\"\"Test HTTP responses given by the TCP Handler.\"\"\"\n+from pathlib import Path\n+import pytest\n+from helpers.cluster import ClickHouseCluster\n+import requests\n+\n+cluster = ClickHouseCluster(__file__)\n+\n+node_with_http = cluster.add_instance(\n+    'node_with_http',\n+    main_configs=[\"configs/config.d/http-port-31337.xml\"]\n+)\n+HTTP_PORT = 31337\n+\n+node_without_http = cluster.add_instance(\n+    'node_without_http',\n+    main_configs=[\"configs/config.d/no-http-port.xml\"]\n+)\n+\n+@pytest.fixture(scope=\"module\")\n+def start_cluster():\n+    try:\n+        cluster.start()\n+        yield cluster\n+\n+    finally:\n+        cluster.shutdown()\n+\n+def test_request_to_http_full_instance(start_cluster):\n+    response = requests.get(\n+        f'http://{node_with_http.ip_address}:9000'\n+    )\n+    assert response.status_code == 400\n+    assert str(HTTP_PORT) in response.text\n+\n+def test_request_to_http_less_instance(start_cluster):\n+    response = requests.post(\n+        f'http://{node_without_http.ip_address}:9000'\n+    )\n+    assert response.status_code == 400\n+    assert str(HTTP_PORT) not in response.text\n+    assert \"8123\"         not in response.text\n",
  "problem_statement": "Do not fail if HTTP port is not set and user tries to send request to TCP port\n\r\n```\r\n2021.05.20 12:16:07.296968 [ 460386 ] {} <Error> ServerErrorHandler: Poco::Exception. Code: 1000, e.code() = 0, e.displayText() = Not found: http_port, Stack trace (when copying this message, always include the lines below):\r\n\r\n0. /build/obj-x86_64-linux-gnu/../contrib/poco/Foundation/src/Exception.cpp:27: Poco::NotFoundException::NotFoundException(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x18cdde80 in /usr/lib/debug/usr/bin/clickhouse\r\n1. /build/obj-x86_64-linux-gnu/../contrib/poco/Util/src/AbstractConfiguration.cpp:77: Poco::Util::AbstractConfiguration::getString(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const (.cold) @ 0x18c032da in /usr/lib/debug/usr/bin/clickhouse\r\n2. /build/obj-x86_64-linux-gnu/../src/Server/TCPHandler.cpp:731: DB::TCPHandler::receiveHello() @ 0x163a0957 in /usr/lib/debug/usr/bin/clickhouse\r\n3. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/string:1426: DB::TCPHandler::runImpl() @ 0x163a5a49 in /usr/lib/debug/usr/bin/clickhouse\r\n4. /build/obj-x86_64-linux-gnu/../src/Server/TCPHandler.cpp:1219: DB::TCPHandler::run() @ 0x163a7070 in /usr/lib/debug/usr/bin/clickhouse\r\n5. /build/obj-x86_64-linux-gnu/../contrib/poco/Net/src/TCPServerConnection.cpp:57: Poco::Net::TCPServerConnection::start() @ 0x18bf7e5b in /usr/lib/debug/usr/bin/clickhouse\r\n6. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/atomic:856: Poco::Net::TCPServerDispatcher::run() @ 0x18bf83e8 in /usr/lib/debug/usr/bin/clickhouse\r\n7. /build/obj-x86_64-linux-gnu/../contrib/poco/Foundation/include/Poco/Mutex_POSIX.h:59: Poco::PooledThread::run() @ 0x18d76ed6 in /usr/lib/debug/usr/bin/clickhouse\r\n8. /build/obj-x86_64-linux-gnu/../contrib/poco/Foundation/include/Poco/AutoPtr.h:223: Poco::ThreadImpl::runnableEntry(void*) @ 0x18d722d0 in /usr/lib/debug/usr/bin/clickhouse\r\n9. start_thread @ 0x76db in /lib/x86_64-linux-gnu/libpthread-2.27.so\r\n10. clone @ 0x121a3f in /lib/x86_64-linux-gnu/libc-2.27.so\r\n (version 20.8.18.32 (official build))\r\n```\r\nhttps://github.com/ClickHouse/ClickHouse/blob/d9c9422a449cddf77e8a693828bf4da95f03ddb2/src/Server/TCPHandler.cpp#L927\n",
  "hints_text": "",
  "created_at": "2021-08-07T11:11:58Z",
  "modified_files": [
    "src/Server/TCPHandler.cpp"
  ],
  "modified_test_files": [
    "b/tests/integration/test_tcp_handler_http_responses/configs/config.d/http-port-31337.xml",
    "b/tests/integration/test_tcp_handler_http_responses/configs/config.d/no-http-port.xml",
    "b/tests/integration/test_tcp_handler_http_responses/test_case.py"
  ]
}