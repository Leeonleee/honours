{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 27217,
  "instance_id": "ClickHouse__ClickHouse-27217",
  "issue_numbers": [
    "27091"
  ],
  "base_commit": "1db4eddafc18b925e8a40ffa326d1615f05beed2",
  "patch": "diff --git a/src/Interpreters/HashJoin.cpp b/src/Interpreters/HashJoin.cpp\nindex dd17fc1004c4..e0aad706966f 100644\n--- a/src/Interpreters/HashJoin.cpp\n+++ b/src/Interpreters/HashJoin.cpp\n@@ -1516,12 +1516,16 @@ class NonJoinedBlockInputStream : private NotJoined, public IBlockInputStream\n         if (!rows_added)\n             return {};\n \n-        correctLowcardAndNullability(columns_right);\n-\n         Block res = result_sample_block.cloneEmpty();\n         addLeftColumns(res, rows_added);\n         addRightColumns(res, columns_right);\n         copySameKeys(res);\n+        correctLowcardAndNullability(res);\n+\n+#ifndef NDEBUG\n+        assertBlocksHaveEqualStructure(res, result_sample_block, getName());\n+#endif\n+\n         return res;\n     }\n \ndiff --git a/src/Interpreters/MergeJoin.cpp b/src/Interpreters/MergeJoin.cpp\nindex b93a94b42158..a2c63a4693b1 100644\n--- a/src/Interpreters/MergeJoin.cpp\n+++ b/src/Interpreters/MergeJoin.cpp\n@@ -1075,12 +1075,11 @@ class NonMergeJoinedBlockInputStream : private NotJoined, public IBlockInputStre\n         if (!rows_added)\n             return {};\n \n-        correctLowcardAndNullability(columns_right);\n-\n         Block res = result_sample_block.cloneEmpty();\n         addLeftColumns(res, rows_added);\n         addRightColumns(res, columns_right);\n         copySameKeys(res);\n+        correctLowcardAndNullability(res);\n         return res;\n     }\n \ndiff --git a/src/Interpreters/join_common.cpp b/src/Interpreters/join_common.cpp\nindex 9d6abda42ed8..76bfd7f28992 100644\n--- a/src/Interpreters/join_common.cpp\n+++ b/src/Interpreters/join_common.cpp\n@@ -29,17 +29,6 @@ namespace ErrorCodes\n namespace\n {\n \n-void changeNullability(MutableColumnPtr & mutable_column)\n-{\n-    ColumnPtr column = std::move(mutable_column);\n-    if (const auto * nullable = checkAndGetColumn<ColumnNullable>(*column))\n-        column = nullable->getNestedColumnPtr();\n-    else\n-        column = makeNullable(column);\n-\n-    mutable_column = IColumn::mutate(std::move(column));\n-}\n-\n ColumnPtr changeLowCardinality(const ColumnPtr & column, const ColumnPtr & dst_sample)\n {\n     if (dst_sample->lowCardinality())\n@@ -52,6 +41,24 @@ ColumnPtr changeLowCardinality(const ColumnPtr & column, const ColumnPtr & dst_s\n     return column->convertToFullColumnIfLowCardinality();\n }\n \n+struct LowcardAndNull\n+{\n+    bool is_lowcard;\n+    bool is_nullable;\n+};\n+\n+LowcardAndNull getLowcardAndNullability(const ColumnPtr & col)\n+{\n+    if (col->lowCardinality())\n+    {\n+        /// Currently only `LowCardinality(Nullable(T))` is possible, but not `Nullable(LowCardinality(T))`\n+        assert(!col->canBeInsideNullable());\n+        const auto * col_as_lc = assert_cast<const ColumnLowCardinality *>(col.get());\n+        return {true, col_as_lc->nestedIsNullable()};\n+    }\n+    return {false, col->isNullable()};\n+}\n+\n }\n \n namespace JoinCommon\n@@ -91,35 +98,32 @@ DataTypePtr convertTypeToNullable(const DataTypePtr & type)\n         if (dict_type->canBeInsideNullable())\n             return std::make_shared<DataTypeLowCardinality>(makeNullable(dict_type));\n     }\n-    return makeNullable(type);\n+\n+    if (type->canBeInsideNullable())\n+        return makeNullable(type);\n+\n+    return type;\n }\n \n-void convertColumnToNullable(ColumnWithTypeAndName & column, bool remove_low_card)\n+void convertColumnToNullable(ColumnWithTypeAndName & column)\n {\n-    if (remove_low_card && column.type->lowCardinality())\n-    {\n-        column.column = recursiveRemoveLowCardinality(column.column);\n-        column.type = recursiveRemoveLowCardinality(column.type);\n-    }\n+    column.type = convertTypeToNullable(column.type);\n \n-    if (column.type->isNullable() || !canBecomeNullable(column.type))\n+    if (!column.column)\n         return;\n \n-    column.type = convertTypeToNullable(column.type);\n-\n-    if (column.column)\n+    if (column.column->lowCardinality())\n     {\n-        if (column.column->lowCardinality())\n-        {\n-            /// Convert nested to nullable, not LowCardinality itself\n-            auto mut_col = IColumn::mutate(std::move(column.column));\n-            ColumnLowCardinality * col_as_lc = assert_cast<ColumnLowCardinality *>(mut_col.get());\n-            if (!col_as_lc->nestedIsNullable())\n-                col_as_lc->nestedToNullable();\n-            column.column = std::move(mut_col);\n-        }\n-        else\n-            column.column = makeNullable(column.column);\n+        /// Convert nested to nullable, not LowCardinality itself\n+        auto mut_col = IColumn::mutate(std::move(column.column));\n+        ColumnLowCardinality * col_as_lc = assert_cast<ColumnLowCardinality *>(mut_col.get());\n+        if (!col_as_lc->nestedIsNullable())\n+            col_as_lc->nestedToNullable();\n+        column.column = std::move(mut_col);\n+    }\n+    else if (column.column->canBeInsideNullable())\n+    {\n+        column.column = makeNullable(column.column);\n     }\n }\n \n@@ -146,20 +150,18 @@ void removeColumnNullability(ColumnWithTypeAndName & column)\n                 col_as_lc->nestedRemoveNullable();\n             column.column = std::move(mut_col);\n         }\n-\n-        return;\n     }\n-\n-    if (!column.type->isNullable())\n-        return;\n-\n-    column.type = static_cast<const DataTypeNullable &>(*column.type).getNestedType();\n-    if (column.column)\n+    else\n     {\n-        const auto * nullable_column = checkAndGetColumn<ColumnNullable>(*column.column);\n-        ColumnPtr nested_column = nullable_column->getNestedColumnPtr();\n-        MutableColumnPtr mutable_column = IColumn::mutate(std::move(nested_column));\n-        column.column = std::move(mutable_column);\n+        column.type = removeNullable(column.type);\n+\n+        if (column.column && column.column->isNullable())\n+        {\n+            const auto * nullable_column = checkAndGetColumn<ColumnNullable>(*column.column);\n+            ColumnPtr nested_column = nullable_column->getNestedColumnPtr();\n+            MutableColumnPtr mutable_column = IColumn::mutate(std::move(nested_column));\n+            column.column = std::move(mutable_column);\n+        }\n     }\n }\n \n@@ -534,32 +536,42 @@ void NotJoined::setRightIndex(size_t right_pos, size_t result_position)\n \n void NotJoined::extractColumnChanges(size_t right_pos, size_t result_pos)\n {\n-    const auto & src = saved_block_sample.getByPosition(right_pos).column;\n-    const auto & dst = result_sample_block.getByPosition(result_pos).column;\n-\n-    if (!src->isNullable() && dst->isNullable())\n-        right_nullability_adds.push_back(right_pos);\n+    auto src_props = getLowcardAndNullability(saved_block_sample.getByPosition(right_pos).column);\n+    auto dst_props = getLowcardAndNullability(result_sample_block.getByPosition(result_pos).column);\n \n-    if (src->isNullable() && !dst->isNullable())\n-        right_nullability_removes.push_back(right_pos);\n+    if (src_props.is_nullable != dst_props.is_nullable)\n+        right_nullability_changes.push_back({result_pos, dst_props.is_nullable});\n \n-    ColumnPtr src_not_null = JoinCommon::emptyNotNullableClone(src);\n-    ColumnPtr dst_not_null = JoinCommon::emptyNotNullableClone(dst);\n-\n-    if (src_not_null->lowCardinality() != dst_not_null->lowCardinality())\n-        right_lowcard_changes.push_back({right_pos, dst_not_null});\n+    if (src_props.is_lowcard != dst_props.is_lowcard)\n+        right_lowcard_changes.push_back({result_pos, dst_props.is_lowcard});\n }\n \n-void NotJoined::correctLowcardAndNullability(MutableColumns & columns_right)\n+void NotJoined::correctLowcardAndNullability(Block & block)\n {\n-    for (size_t pos : right_nullability_removes)\n-        changeNullability(columns_right[pos]);\n-\n-    for (auto & [pos, dst_sample] : right_lowcard_changes)\n-        columns_right[pos] = changeLowCardinality(std::move(columns_right[pos]), dst_sample)->assumeMutable();\n+    for (auto & [pos, added] : right_nullability_changes)\n+    {\n+        auto & col = block.getByPosition(pos);\n+        if (added)\n+            JoinCommon::convertColumnToNullable(col);\n+        else\n+            JoinCommon::removeColumnNullability(col);\n+    }\n \n-    for (size_t pos : right_nullability_adds)\n-        changeNullability(columns_right[pos]);\n+    for (auto & [pos, added] : right_lowcard_changes)\n+    {\n+        auto & col = block.getByPosition(pos);\n+        if (added)\n+        {\n+            if (!col.type->lowCardinality())\n+                col.type = std::make_shared<DataTypeLowCardinality>(col.type);\n+            col.column = changeLowCardinality(col.column, col.type->createColumn());\n+        }\n+        else\n+        {\n+            col.column = recursiveRemoveLowCardinality(col.column);\n+            col.type = recursiveRemoveLowCardinality(col.type);\n+        }\n+    }\n }\n \n void NotJoined::addLeftColumns(Block & block, size_t rows_added) const\n@@ -580,11 +592,6 @@ void NotJoined::addRightColumns(Block & block, MutableColumns & columns_right) c\n     {\n         auto & right_column = columns_right[pr.first];\n         auto & result_column = block.getByPosition(pr.second).column;\n-#ifndef NDEBUG\n-        if (result_column->getName() != right_column->getName())\n-            throw Exception(\"Wrong columns assign in RIGHT|FULL JOIN: \" + result_column->getName() +\n-                            \" \" + right_column->getName(), ErrorCodes::LOGICAL_ERROR);\n-#endif\n         result_column = std::move(right_column);\n     }\n }\ndiff --git a/src/Interpreters/join_common.h b/src/Interpreters/join_common.h\nindex 8862116d1fa6..1f0378991551 100644\n--- a/src/Interpreters/join_common.h\n+++ b/src/Interpreters/join_common.h\n@@ -19,7 +19,7 @@ namespace JoinCommon\n {\n bool canBecomeNullable(const DataTypePtr & type);\n DataTypePtr convertTypeToNullable(const DataTypePtr & type);\n-void convertColumnToNullable(ColumnWithTypeAndName & column, bool remove_low_card = false);\n+void convertColumnToNullable(ColumnWithTypeAndName & column);\n void convertColumnsToNullable(Block & block, size_t starting_pos = 0);\n void removeColumnNullability(ColumnWithTypeAndName & column);\n void changeColumnRepresentation(const ColumnPtr & src_column, ColumnPtr & dst_column);\n@@ -70,7 +70,7 @@ class NotJoined\n     NotJoined(const TableJoin & table_join, const Block & saved_block_sample_, const Block & right_sample_block,\n               const Block & result_sample_block_, const Names & key_names_left_ = {}, const Names & key_names_right_ = {});\n \n-    void correctLowcardAndNullability(MutableColumns & columns_right);\n+    void correctLowcardAndNullability(Block & block);\n     void addLeftColumns(Block & block, size_t rows_added) const;\n     void addRightColumns(Block & block, MutableColumns & columns_right) const;\n     void copySameKeys(Block & block) const;\n@@ -92,10 +92,9 @@ class NotJoined\n     ///\n     std::unordered_map<size_t, size_t> same_result_keys;\n     /// Which right columns (saved in parent) need nullability change before placing them in result block\n-    std::vector<size_t> right_nullability_adds;\n-    std::vector<size_t> right_nullability_removes;\n+    std::vector<std::pair<size_t, bool>> right_nullability_changes;\n     /// Which right columns (saved in parent) need LowCardinality change before placing them in result block\n-    std::vector<std::pair<size_t, ColumnPtr>> right_lowcard_changes;\n+    std::vector<std::pair<size_t, bool>> right_lowcard_changes;\n \n     void setRightIndex(size_t right_pos, size_t result_position);\n     void extractColumnChanges(size_t right_pos, size_t result_pos);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01049_join_low_card_bug_long.reference b/tests/queries/0_stateless/01049_join_low_card_bug_long.reference\nindex 877b4370fcea..6d9f36df075a 100644\n--- a/tests/queries/0_stateless/01049_join_low_card_bug_long.reference\n+++ b/tests/queries/0_stateless/01049_join_low_card_bug_long.reference\n@@ -1,3 +1,4 @@\n+-- join_algorithm = default, join_use_nulls = 0 --\n str\tLowCardinality(String)\n \tLowCardinality(String)\n str_r\tLowCardinality(String)\n@@ -98,7 +99,7 @@ LowCardinality(String)\tLowCardinality(String)\t\t\tNullable(String)\tNullable(String\n LowCardinality(String)\tLowCardinality(String)\tstr\tstr\tNullable(String)\tNullable(String)\tstr\tstr\n LowCardinality(String)\tLowCardinality(String)\t\t\tNullable(String)\tNullable(String)\tstr_l\tstr_l\n LowCardinality(String)\tLowCardinality(String)\tstr_r\tstr_r\tNullable(String)\tNullable(String)\t\\N\t\\N\n--- join_use_nulls --\n+-- join_algorithm = default, join_use_nulls = 1 --\n str\tLowCardinality(Nullable(String))\n \\N\tLowCardinality(Nullable(String))\n str\tLowCardinality(Nullable(String))\n@@ -199,6 +200,7 @@ LowCardinality(Nullable(String))\tLowCardinality(Nullable(String))\t\\N\t\\N\tNullable\n LowCardinality(Nullable(String))\tLowCardinality(Nullable(String))\tstr\tstr\tNullable(String)\tNullable(String)\tstr\tstr\n LowCardinality(Nullable(String))\tLowCardinality(Nullable(String))\t\\N\t\\N\tNullable(String)\tNullable(String)\tstr_l\tstr_l\n LowCardinality(Nullable(String))\tLowCardinality(Nullable(String))\tstr_r\tstr_r\tNullable(String)\tNullable(String)\t\\N\t\\N\n+-- join_algorithm = partial_merge, join_use_nulls = 0 --\n str\tLowCardinality(String)\n \tLowCardinality(String)\n str_r\tLowCardinality(String)\n@@ -299,7 +301,7 @@ LowCardinality(String)\tLowCardinality(String)\t\t\tNullable(String)\tNullable(String\n LowCardinality(String)\tLowCardinality(String)\tstr\tstr\tNullable(String)\tNullable(String)\tstr\tstr\n LowCardinality(String)\tLowCardinality(String)\t\t\tNullable(String)\tNullable(String)\tstr_l\tstr_l\n LowCardinality(String)\tLowCardinality(String)\tstr_r\tstr_r\tNullable(String)\tNullable(String)\t\\N\t\\N\n--- join_use_nulls --\n+-- join_algorithm = partial_merge, join_use_nulls = 1 --\n str\tLowCardinality(Nullable(String))\n \\N\tLowCardinality(Nullable(String))\n str\tLowCardinality(Nullable(String))\n@@ -400,8 +402,12 @@ LowCardinality(Nullable(String))\tLowCardinality(Nullable(String))\t\\N\t\\N\tNullable\n LowCardinality(Nullable(String))\tLowCardinality(Nullable(String))\tstr\tstr\tNullable(String)\tNullable(String)\tstr\tstr\n LowCardinality(Nullable(String))\tLowCardinality(Nullable(String))\t\\N\t\\N\tNullable(String)\tNullable(String)\tstr_l\tstr_l\n LowCardinality(Nullable(String))\tLowCardinality(Nullable(String))\tstr_r\tstr_r\tNullable(String)\tNullable(String)\t\\N\t\\N\n+--\n \tLowCardinality(String)\n str\tLowCardinality(String)\n \n \n str\n+str\tstr\tLowCardinality(Nullable(String))\tLowCardinality(Nullable(String))\n+str_r\tstr_r\tLowCardinality(Nullable(String))\tLowCardinality(Nullable(String))\n+\\N\t\\N\tLowCardinality(Nullable(String))\tLowCardinality(Nullable(String))\ndiff --git a/tests/queries/0_stateless/01049_join_low_card_bug_long.sql b/tests/queries/0_stateless/01049_join_low_card_bug_long.sql\ndeleted file mode 100644\nindex e17328244282..000000000000\n--- a/tests/queries/0_stateless/01049_join_low_card_bug_long.sql\n+++ /dev/null\n@@ -1,284 +0,0 @@\n-DROP TABLE IF EXISTS l;\n-DROP TABLE IF EXISTS r;\n-DROP TABLE IF EXISTS nl;\n-DROP TABLE IF EXISTS nr;\n-DROP TABLE IF EXISTS l_lc;\n-DROP TABLE IF EXISTS r_lc;\n-\n-CREATE TABLE l (x UInt32, lc String) ENGINE = Memory;\n-CREATE TABLE r (x UInt32, lc String) ENGINE = Memory;\n-CREATE TABLE nl (x Nullable(UInt32), lc Nullable(String)) ENGINE = Memory;\n-CREATE TABLE nr (x Nullable(UInt32), lc Nullable(String)) ENGINE = Memory;\n-CREATE TABLE l_lc (x UInt32, lc LowCardinality(String)) ENGINE = Memory;\n-CREATE TABLE r_lc (x UInt32, lc LowCardinality(String)) ENGINE = Memory;\n-\n-INSERT INTO r VALUES (0, 'str'),  (1, 'str_r');\n-INSERT INTO nr VALUES (0, 'str'),  (1, 'str_r');\n-INSERT INTO r_lc VALUES (0, 'str'),  (1, 'str_r');\n-\n-INSERT INTO l VALUES (0, 'str'), (2, 'str_l');\n-INSERT INTO nl VALUES (0, 'str'), (2, 'str_l');\n-INSERT INTO l_lc VALUES (0, 'str'), (2, 'str_l');\n-\n-\n-SET join_use_nulls = 0;\n-\n---\n-\n-SELECT lc, toTypeName(lc) FROM l_lc AS l RIGHT JOIN r_lc AS r USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l_lc AS l RIGHT JOIN r_lc AS r USING (lc) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l_lc AS l FULL JOIN r_lc AS r USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l_lc AS l FULL JOIN r_lc AS r USING (lc) ORDER BY x;\n-\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l RIGHT JOIN r_lc AS r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l RIGHT JOIN r_lc AS r USING (lc) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l FULL JOIN r_lc AS r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l FULL JOIN r_lc AS r USING (lc) ORDER BY x;\n-\n---\n-\n-SELECT lc, toTypeName(lc) FROM l_lc AS l RIGHT JOIN r USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l_lc AS l RIGHT JOIN r USING (lc) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l_lc AS l FULL JOIN r USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l_lc AS l FULL JOIN r USING (lc) ORDER BY x;\n-\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l RIGHT JOIN r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l RIGHT JOIN r USING (lc) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l FULL JOIN r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l FULL JOIN r USING (lc) ORDER BY x;\n-\n---\n-\n-SELECT lc, toTypeName(lc) FROM l RIGHT JOIN r USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l RIGHT JOIN r USING (lc) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l FULL JOIN r USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l FULL JOIN r USING (lc) ORDER BY x;\n-\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l RIGHT JOIN r_lc AS r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l RIGHT JOIN r_lc AS r USING (lc) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l FULL JOIN r_lc AS r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l FULL JOIN r_lc AS r USING (lc) ORDER BY x;\n-\n---\n-\n-SELECT lc, toTypeName(lc) FROM l_lc RIGHT JOIN nr USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l_lc RIGHT JOIN nr USING (lc) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l_lc FULL JOIN nr USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l_lc FULL JOIN nr USING (lc) ORDER BY x;\n-\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l RIGHT JOIN nr AS r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l RIGHT JOIN nr AS r USING (lc) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l FULL JOIN nr AS r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l FULL JOIN nr AS r USING (lc) ORDER BY x;\n-\n---\n-\n-SELECT lc, toTypeName(lc) FROM nl RIGHT JOIN r_lc USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM nl RIGHT JOIN r_lc USING (lc) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM nl FULL JOIN r_lc USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM nl FULL JOIN r_lc USING (lc) ORDER BY x;\n-\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM nl AS l RIGHT JOIN r_lc AS r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM nl AS l RIGHT JOIN r_lc AS r USING (lc) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM nl AS l FULL JOIN r_lc AS r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM nl AS l FULL JOIN r_lc AS r USING (lc) ORDER BY x;\n-\n-SELECT '-- join_use_nulls --';\n-\n-SET join_use_nulls = 1;\n-\n-SELECT lc, toTypeName(lc) FROM l_lc AS l RIGHT JOIN r_lc AS r USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l_lc AS l RIGHT JOIN r_lc AS r USING (lc) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l_lc AS l FULL JOIN r_lc AS r USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l_lc AS l FULL JOIN r_lc AS r USING (lc) ORDER BY x;\n-\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l RIGHT JOIN r_lc AS r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l RIGHT JOIN r_lc AS r USING (lc) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l FULL JOIN r_lc AS r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l FULL JOIN r_lc AS r USING (lc) ORDER BY x;\n-\n---\n-\n-SELECT lc, toTypeName(lc) FROM l_lc AS l RIGHT JOIN r USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l_lc AS l RIGHT JOIN r USING (lc) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l_lc AS l FULL JOIN r USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l_lc AS l FULL JOIN r USING (lc) ORDER BY x;\n-\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l RIGHT JOIN r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l RIGHT JOIN r USING (lc) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l FULL JOIN r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l FULL JOIN r USING (lc) ORDER BY x;\n-\n---\n-\n-SELECT lc, toTypeName(lc) FROM l RIGHT JOIN r USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l RIGHT JOIN r USING (lc) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l FULL JOIN r USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l FULL JOIN r USING (lc) ORDER BY x;\n-\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l RIGHT JOIN r_lc AS r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l RIGHT JOIN r_lc AS r USING (lc) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l FULL JOIN r_lc AS r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l FULL JOIN r_lc AS r USING (lc) ORDER BY x;\n-\n---\n-\n-SELECT lc, toTypeName(lc) FROM l_lc RIGHT JOIN nr USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l_lc RIGHT JOIN nr USING (lc) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l_lc FULL JOIN nr USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l_lc FULL JOIN nr USING (lc) ORDER BY x;\n-\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l RIGHT JOIN nr AS r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l RIGHT JOIN nr AS r USING (lc) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l FULL JOIN nr AS r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l FULL JOIN nr AS r USING (lc) ORDER BY x;\n-\n---\n-\n-SELECT lc, toTypeName(lc) FROM nl RIGHT JOIN r_lc USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM nl RIGHT JOIN r_lc USING (lc) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM nl FULL JOIN r_lc USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM nl FULL JOIN r_lc USING (lc) ORDER BY x;\n-\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM nl AS l RIGHT JOIN r_lc AS r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM nl AS l RIGHT JOIN r_lc AS r USING (lc) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM nl AS l FULL JOIN r_lc AS r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM nl AS l FULL JOIN r_lc AS r USING (lc) ORDER BY x;\n-\n-set join_algorithm = 'partial_merge';\n-\n-SET join_use_nulls = 0;\n-\n---\n-\n-SELECT lc, toTypeName(lc) FROM l_lc AS l RIGHT JOIN r_lc AS r USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l_lc AS l RIGHT JOIN r_lc AS r USING (lc) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l_lc AS l FULL JOIN r_lc AS r USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l_lc AS l FULL JOIN r_lc AS r USING (lc) ORDER BY x;\n-\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l RIGHT JOIN r_lc AS r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l RIGHT JOIN r_lc AS r USING (lc) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l FULL JOIN r_lc AS r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l FULL JOIN r_lc AS r USING (lc) ORDER BY x;\n-\n---\n-\n-SELECT lc, toTypeName(lc) FROM l_lc AS l RIGHT JOIN r USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l_lc AS l RIGHT JOIN r USING (lc) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l_lc AS l FULL JOIN r USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l_lc AS l FULL JOIN r USING (lc) ORDER BY x;\n-\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l RIGHT JOIN r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l RIGHT JOIN r USING (lc) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l FULL JOIN r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l FULL JOIN r USING (lc) ORDER BY x;\n-\n---\n-\n-SELECT lc, toTypeName(lc) FROM l RIGHT JOIN r USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l RIGHT JOIN r USING (lc) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l FULL JOIN r USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l FULL JOIN r USING (lc) ORDER BY x;\n-\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l RIGHT JOIN r_lc AS r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l RIGHT JOIN r_lc AS r USING (lc) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l FULL JOIN r_lc AS r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l FULL JOIN r_lc AS r USING (lc) ORDER BY x;\n-\n---\n-\n-SELECT lc, toTypeName(lc) FROM l_lc RIGHT JOIN nr USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l_lc RIGHT JOIN nr USING (lc) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l_lc FULL JOIN nr USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l_lc FULL JOIN nr USING (lc) ORDER BY x;\n-\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l RIGHT JOIN nr AS r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l RIGHT JOIN nr AS r USING (lc) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l FULL JOIN nr AS r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l FULL JOIN nr AS r USING (lc) ORDER BY x;\n-\n---\n-\n-SELECT lc, toTypeName(lc) FROM nl RIGHT JOIN r_lc USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM nl RIGHT JOIN r_lc USING (lc) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM nl FULL JOIN r_lc USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM nl FULL JOIN r_lc USING (lc) ORDER BY x;\n-\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM nl AS l RIGHT JOIN r_lc AS r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM nl AS l RIGHT JOIN r_lc AS r USING (lc) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM nl AS l FULL JOIN r_lc AS r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM nl AS l FULL JOIN r_lc AS r USING (lc) ORDER BY x;\n-\n-SELECT '-- join_use_nulls --';\n-\n-SET join_use_nulls = 1;\n-\n-SELECT lc, toTypeName(lc) FROM l_lc AS l RIGHT JOIN r_lc AS r USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l_lc AS l RIGHT JOIN r_lc AS r USING (lc) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l_lc AS l FULL JOIN r_lc AS r USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l_lc AS l FULL JOIN r_lc AS r USING (lc) ORDER BY x;\n-\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l RIGHT JOIN r_lc AS r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l RIGHT JOIN r_lc AS r USING (lc) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l FULL JOIN r_lc AS r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l FULL JOIN r_lc AS r USING (lc) ORDER BY x;\n-\n---\n-\n-SELECT lc, toTypeName(lc) FROM l_lc AS l RIGHT JOIN r USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l_lc AS l RIGHT JOIN r USING (lc) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l_lc AS l FULL JOIN r USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l_lc AS l FULL JOIN r USING (lc) ORDER BY x;\n-\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l RIGHT JOIN r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l RIGHT JOIN r USING (lc) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l FULL JOIN r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l FULL JOIN r USING (lc) ORDER BY x;\n-\n---\n-\n-SELECT lc, toTypeName(lc) FROM l RIGHT JOIN r USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l RIGHT JOIN r USING (lc) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l FULL JOIN r USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l FULL JOIN r USING (lc) ORDER BY x;\n-\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l RIGHT JOIN r_lc AS r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l RIGHT JOIN r_lc AS r USING (lc) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l FULL JOIN r_lc AS r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l FULL JOIN r_lc AS r USING (lc) ORDER BY x;\n-\n---\n-\n-SELECT lc, toTypeName(lc) FROM l_lc RIGHT JOIN nr USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l_lc RIGHT JOIN nr USING (lc) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l_lc FULL JOIN nr USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM l_lc FULL JOIN nr USING (lc) ORDER BY x;\n-\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l RIGHT JOIN nr AS r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l RIGHT JOIN nr AS r USING (lc) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l FULL JOIN nr AS r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l FULL JOIN nr AS r USING (lc) ORDER BY x;\n-\n---\n-\n-SELECT lc, toTypeName(lc) FROM nl RIGHT JOIN r_lc USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM nl RIGHT JOIN r_lc USING (lc) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM nl FULL JOIN r_lc USING (x) ORDER BY x;\n-SELECT lc, toTypeName(lc) FROM nl FULL JOIN r_lc USING (lc) ORDER BY x;\n-\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM nl AS l RIGHT JOIN r_lc AS r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM nl AS l RIGHT JOIN r_lc AS r USING (lc) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM nl AS l FULL JOIN r_lc AS r USING (x) ORDER BY x;\n-SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM nl AS l FULL JOIN r_lc AS r USING (lc) ORDER BY x;\n-\n-SET join_use_nulls = 0;\n-SELECT lc, toTypeName(lc)  FROM l_lc AS l RIGHT JOIN r_lc AS r USING (x) ORDER BY l.lc;\n-\n-SELECT lowCardinalityKeys(lc.lc) FROM r FULL JOIN l_lc as lc USING (lc) ORDER BY lowCardinalityKeys(lc.lc);\n-\n-DROP TABLE l;\n-DROP TABLE r;\n-DROP TABLE nl;\n-DROP TABLE nr;\n-DROP TABLE l_lc;\n-DROP TABLE r_lc;\ndiff --git a/tests/queries/0_stateless/01049_join_low_card_bug_long.sql.j2 b/tests/queries/0_stateless/01049_join_low_card_bug_long.sql.j2\nnew file mode 100644\nindex 000000000000..93019e7a0ecb\n--- /dev/null\n+++ b/tests/queries/0_stateless/01049_join_low_card_bug_long.sql.j2\n@@ -0,0 +1,109 @@\n+DROP TABLE IF EXISTS l;\n+DROP TABLE IF EXISTS r;\n+DROP TABLE IF EXISTS nl;\n+DROP TABLE IF EXISTS nr;\n+DROP TABLE IF EXISTS l_lc;\n+DROP TABLE IF EXISTS r_lc;\n+\n+CREATE TABLE l (x UInt32, lc String) ENGINE = Memory;\n+CREATE TABLE r (x UInt32, lc String) ENGINE = Memory;\n+CREATE TABLE nl (x Nullable(UInt32), lc Nullable(String)) ENGINE = Memory;\n+CREATE TABLE nr (x Nullable(UInt32), lc Nullable(String)) ENGINE = Memory;\n+CREATE TABLE l_lc (x UInt32, lc LowCardinality(String)) ENGINE = Memory;\n+CREATE TABLE r_lc (x UInt32, lc LowCardinality(String)) ENGINE = Memory;\n+\n+INSERT INTO r VALUES (0, 'str'),  (1, 'str_r');\n+INSERT INTO nr VALUES (0, 'str'),  (1, 'str_r');\n+INSERT INTO r_lc VALUES (0, 'str'),  (1, 'str_r');\n+\n+INSERT INTO l VALUES (0, 'str'), (2, 'str_l');\n+INSERT INTO nl VALUES (0, 'str'), (2, 'str_l');\n+INSERT INTO l_lc VALUES (0, 'str'), (2, 'str_l');\n+\n+{% for join_algorithm in [None, 'partial_merge'] -%}\n+{% for join_use_nulls in [0, 1] -%}\n+\n+SELECT '-- join_algorithm = {{ join_algorithm or 'default' }}, join_use_nulls = {{ join_use_nulls }} --';\n+\n+{% if join_algorithm %}SET join_algorithm = '{{ join_algorithm }}';{% endif -%}\n+SET join_use_nulls = {{ join_use_nulls }};\n+\n+SELECT lc, toTypeName(lc) FROM l_lc AS l RIGHT JOIN r_lc AS r USING (x) ORDER BY x;\n+SELECT lc, toTypeName(lc) FROM l_lc AS l RIGHT JOIN r_lc AS r USING (lc) ORDER BY x;\n+SELECT lc, toTypeName(lc) FROM l_lc AS l FULL JOIN r_lc AS r USING (x) ORDER BY x;\n+SELECT lc, toTypeName(lc) FROM l_lc AS l FULL JOIN r_lc AS r USING (lc) ORDER BY x;\n+\n+SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l RIGHT JOIN r_lc AS r USING (x) ORDER BY x;\n+SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l RIGHT JOIN r_lc AS r USING (lc) ORDER BY x;\n+SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l FULL JOIN r_lc AS r USING (x) ORDER BY x;\n+SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l FULL JOIN r_lc AS r USING (lc) ORDER BY x;\n+\n+--\n+\n+SELECT lc, toTypeName(lc) FROM l_lc AS l RIGHT JOIN r USING (x) ORDER BY x;\n+SELECT lc, toTypeName(lc) FROM l_lc AS l RIGHT JOIN r USING (lc) ORDER BY x;\n+SELECT lc, toTypeName(lc) FROM l_lc AS l FULL JOIN r USING (x) ORDER BY x;\n+SELECT lc, toTypeName(lc) FROM l_lc AS l FULL JOIN r USING (lc) ORDER BY x;\n+\n+SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l RIGHT JOIN r USING (x) ORDER BY x;\n+SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l RIGHT JOIN r USING (lc) ORDER BY x;\n+SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l FULL JOIN r USING (x) ORDER BY x;\n+SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l FULL JOIN r USING (lc) ORDER BY x;\n+\n+--\n+\n+SELECT lc, toTypeName(lc) FROM l RIGHT JOIN r USING (x) ORDER BY x;\n+SELECT lc, toTypeName(lc) FROM l RIGHT JOIN r USING (lc) ORDER BY x;\n+SELECT lc, toTypeName(lc) FROM l FULL JOIN r USING (x) ORDER BY x;\n+SELECT lc, toTypeName(lc) FROM l FULL JOIN r USING (lc) ORDER BY x;\n+\n+SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l RIGHT JOIN r_lc AS r USING (x) ORDER BY x;\n+SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l RIGHT JOIN r_lc AS r USING (lc) ORDER BY x;\n+SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l FULL JOIN r_lc AS r USING (x) ORDER BY x;\n+SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l FULL JOIN r_lc AS r USING (lc) ORDER BY x;\n+\n+--\n+\n+SELECT lc, toTypeName(lc) FROM l_lc RIGHT JOIN nr USING (x) ORDER BY x;\n+SELECT lc, toTypeName(lc) FROM l_lc RIGHT JOIN nr USING (lc) ORDER BY x;\n+SELECT lc, toTypeName(lc) FROM l_lc FULL JOIN nr USING (x) ORDER BY x;\n+SELECT lc, toTypeName(lc) FROM l_lc FULL JOIN nr USING (lc) ORDER BY x;\n+\n+SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l RIGHT JOIN nr AS r USING (x) ORDER BY x;\n+SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l RIGHT JOIN nr AS r USING (lc) ORDER BY x;\n+SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l FULL JOIN nr AS r USING (x) ORDER BY x;\n+SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM l_lc AS l FULL JOIN nr AS r USING (lc) ORDER BY x;\n+\n+--\n+\n+SELECT lc, toTypeName(lc) FROM nl RIGHT JOIN r_lc USING (x) ORDER BY x;\n+SELECT lc, toTypeName(lc) FROM nl RIGHT JOIN r_lc USING (lc) ORDER BY x;\n+SELECT lc, toTypeName(lc) FROM nl FULL JOIN r_lc USING (x) ORDER BY x;\n+SELECT lc, toTypeName(lc) FROM nl FULL JOIN r_lc USING (lc) ORDER BY x;\n+\n+SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM nl AS l RIGHT JOIN r_lc AS r USING (x) ORDER BY x;\n+SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM nl AS l RIGHT JOIN r_lc AS r USING (lc) ORDER BY x;\n+SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM nl AS l FULL JOIN r_lc AS r USING (x) ORDER BY x;\n+SELECT toTypeName(r.lc), toTypeName(materialize(r.lc)), r.lc, materialize(r.lc), toTypeName(l.lc), toTypeName(materialize(l.lc)), l.lc, materialize(l.lc) FROM nl AS l FULL JOIN r_lc AS r USING (lc) ORDER BY x;\n+\n+{% endfor -%}\n+{% endfor -%}\n+\n+SELECT '--';\n+\n+SET join_use_nulls = 0;\n+SELECT lc, toTypeName(lc)  FROM l_lc AS l RIGHT JOIN r_lc AS r USING (x) ORDER BY l.lc;\n+\n+SELECT lowCardinalityKeys(lc.lc) FROM r FULL JOIN l_lc as lc USING (lc) ORDER BY lowCardinalityKeys(lc.lc);\n+\n+SET join_algorithm = 'partial_merge';\n+SET join_use_nulls = 1;\n+\n+SELECT r.lc, materialize(r.lc), toTypeName(r.lc), toTypeName(materialize(r.lc)) FROM l_lc AS l FULL OUTER JOIN r_lc AS r USING (x) ORDER BY r.lc;\n+\n+DROP TABLE l;\n+DROP TABLE r;\n+DROP TABLE nl;\n+DROP TABLE nr;\n+DROP TABLE l_lc;\n+DROP TABLE r_lc;\n",
  "problem_statement": "partial merge join: 'Bad cast from type DB::ColumnNullable to DB::ColumnString'\n```\r\nDROP TABLE IF EXISTS l;\r\nDROP TABLE IF EXISTS r;\r\nDROP TABLE IF EXISTS nl;\r\nDROP TABLE IF EXISTS nr;\r\nDROP TABLE IF EXISTS l_lc;\r\nDROP TABLE IF EXISTS r_lc;\r\n\r\nCREATE TABLE l (x UInt32, lc String) ENGINE = Memory;\r\nCREATE TABLE r (x UInt32, lc String) ENGINE = Memory;\r\nCREATE TABLE nl (x Nullable(UInt32), lc Nullable(String)) ENGINE = Memory;\r\nCREATE TABLE nr (x Nullable(UInt32), lc Nullable(String)) ENGINE = Memory;\r\nCREATE TABLE l_lc (x UInt32, lc LowCardinality(String)) ENGINE = Memory;\r\nCREATE TABLE r_lc (x UInt32, lc LowCardinality(String)) ENGINE = Memory;\r\n\r\nINSERT INTO r VALUES (0, 'str'),  (1, 'str_r');\r\nINSERT INTO nr VALUES (0, 'str'),  (1, 'str_r');\r\nINSERT INTO r_lc VALUES (0, 'str'),  (1, 'str_r');\r\n\r\nINSERT INTO l VALUES (0, 'str'), (2, 'str_l');\r\nINSERT INTO nl VALUES (0, 'str'), (2, 'str_l');\r\nINSERT INTO l_lc VALUES (0, 'str'), (2, 'str_l');\r\n\r\nset join_algorithm = 'partial_merge', join_use_nulls = 1;\r\n\r\nSELECT\r\n    toTypeName(r.lc),\r\n    toTypeName(materialize(r.lc)),\r\n    [NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, '', '', NULL, NULL, NULL, NULL, NULL, NULL],\r\n    r.lc,\r\n    materialize(r.lc),\r\n    toTypeName(l.lc),\r\n    toTypeName(materialize(l.lc)),\r\n    l.lc\r\nFROM l_lc AS l\r\nFULL OUTER JOIN r_lc AS r USING (x)\r\nORDER BY\r\n    r.lc ASC,\r\n    x ASC NULLS LAST\r\n\r\n\r\n2021.08.02 16:12:06.344643 [ 9410 ] {7f8da94a-97d7-45b9-8980-9e4e96bacc9a} <Fatal> : Logical error: 'Bad cast from type DB::ColumnNullable to DB::ColumnString'.\r\n2021.08.02 16:12:06.345324 [ 9223 ] {} <Trace> BaseDaemon: Received signal 6\r\n2021.08.02 16:12:06.345677 [ 9901 ] {} <Fatal> BaseDaemon: ########################################\r\n2021.08.02 16:12:06.345977 [ 9901 ] {} <Fatal> BaseDaemon: (version 21.9.1.1, build id: E31A3FA5E2E76CEB) (from thread 9410) (query_id: 7f8da94a-97d7-45b9-8980-9e4e96bacc9a) Received signal Aborted (6)\r\n2021.08.02 16:12:06.346216 [ 9901 ] {} <Fatal> BaseDaemon: \r\n2021.08.02 16:12:06.346563 [ 9901 ] {} <Fatal> BaseDaemon: Stack trace: 0x7fb46a26318b 0x7fb46a242859 0x7fb46c488f25 0x7fb46c489039 0x7fb467253e8c 0x7fb454fb0830 0x7fb454fa99a0 0x7fb451d71cf1 0x7fb451d71d3a 0x7fb4553b0d29 0x7fb4553b0aec 0x7fb4553b08c3 0x7fb4553b071d 0x7fb4553b065e 0x7fb4553af7ad 0x7fb4553a5751 0x7fb44e095d23 0x7fb44e05bb35 0x7fb44e06d7c7 0x7fb44e09e63e 0x7fb44e841bdc 0x7fb44e841b3f 0x7fb44e841add 0x7fb44e841a9d 0x7fb44e841a75 0x7fb44e841a3d 0x7fb46c53d889 0x7fb46c534175 0x7fb44e840436 0x7fb44e840e19 0x7fb44e83ecc6 0x7fb44e83dfb6 0x7fb44e868a79 0x7fb44e8689a6 0x7fb44e86891d 0x7fb44e8688c1 0x7fb44e8687d2 0x7fb44e8686cc 0x7fb44e8685dd 0x7fb44e86859d 0x7fb44e868575\r\n2021.08.02 16:12:06.349998 [ 9901 ] {} <Fatal> BaseDaemon: 4. /build/glibc-eX1tMB/glibc-2.31/signal/../sysdeps/unix/sysv/linux/raise.c:51: gsignal @ 0x4618b in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n2021.08.02 16:12:06.354972 [ 9901 ] {} <Fatal> BaseDaemon: 5. /build/glibc-eX1tMB/glibc-2.31/stdlib/abort.c:81: __GI_abort @ 0x25859 in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n2021.08.02 16:12:06.559429 [ 9901 ] {} <Fatal> BaseDaemon: 6. /home/akuzm/ch2/ch/src/Common/Exception.cpp:53: DB::handle_error_code(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool, std::__1::vector<void*, std::__1::allocator<void*> > const&) @ 0x299f25 in /home/akuzm/ch2/build-clang11/src/libclickhouse_common_iod.so\r\n2021.08.02 16:12:06.743445 [ 9901 ] {} <Fatal> BaseDaemon: 7. /home/akuzm/ch2/ch/src/Common/Exception.cpp:60: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0x29a039 in /home/akuzm/ch2/build-clang11/src/libclickhouse_common_iod.so\r\n2021.08.02 16:12:06.937709 [ 9901 ] {} <Fatal> BaseDaemon: 8. /home/akuzm/ch2/ch/src/Common/assert_cast.h:47: DB::ColumnString const& assert_cast<DB::ColumnString const&, DB::IColumn const&>(DB::IColumn const&) @ 0x44e7e8c in /home/akuzm/ch2/build-clang11/src/AggregateFunctions/libclickhouse_aggregate_functionsd.so\r\n2021.08.02 16:12:07.103318 [ 9901 ] {} <Fatal> BaseDaemon: 9. /home/akuzm/ch2/ch/src/Columns/ColumnString.h:237: DB::ColumnString::compareAt(unsigned long, unsigned long, DB::IColumn const&, int) const @ 0x2bd830 in /home/akuzm/ch2/build-clang11/src/libclickhouse_datatypesd.so\r\n2021.08.02 16:12:07.241908 [ 9901 ] {} <Fatal> BaseDaemon: 10. /home/akuzm/ch2/ch/src/Columns/ColumnUnique.h:420: DB::ColumnUnique<DB::ColumnString>::compareAt(unsigned long, unsigned long, DB::IColumn const&, int) const @ 0x2b69a0 in /home/akuzm/ch2/build-clang11/src/libclickhouse_datatypesd.so\r\n2021.08.02 16:12:07.330117 [ 9901 ] {} <Fatal> BaseDaemon: 11. /home/akuzm/ch2/ch/src/Columns/ColumnLowCardinality.cpp:297: DB::ColumnLowCardinality::compareAtImpl(unsigned long, unsigned long, DB::IColumn const&, int, Collator const*) const @ 0x2c7cf1 in /home/akuzm/ch2/build-clang11/src/libclickhouse_columnsd.so\r\n2021.08.02 16:12:07.417086 [ 9901 ] {} <Fatal> BaseDaemon: 12. /home/akuzm/ch2/ch/src/Columns/ColumnLowCardinality.cpp:302: DB::ColumnLowCardinality::compareAt(unsigned long, unsigned long, DB::IColumn const&, int) const @ 0x2c7d3a in /home/akuzm/ch2/build-clang11/src/libclickhouse_columnsd.so\r\n2021.08.02 16:12:07.586105 [ 9901 ] {} <Fatal> BaseDaemon: 13.1. inlined from /home/akuzm/ch2/ch/src/Core/SortCursor.h:182: DB::SortCursor::greaterAt(DB::SortCursor const&, unsigned long, unsigned long) const\r\n2021.08.02 16:12:07.586263 [ 9901 ] {} <Fatal> BaseDaemon: 13.2. inlined from /home/akuzm/ch2/ch/src/Core/SortCursor.h:149: DB::SortCursorHelper<DB::SortCursor>::greater(DB::SortCursorHelper<DB::SortCursor> const&) const\r\n2021.08.02 16:12:07.586415 [ 9901 ] {} <Fatal> BaseDaemon: 13.3. inlined from /home/akuzm/ch2/ch/src/Core/SortCursor.h:155: DB::SortCursorHelper<DB::SortCursor>::operator<(DB::SortCursorHelper<DB::SortCursor> const&) const\r\n2021.08.02 16:12:07.586501 [ 9901 ] {} <Fatal> BaseDaemon: 13. /home/akuzm/ch2/ch/contrib/libcxx/include/algorithm:715: std::__1::__less<DB::SortCursor, DB::SortCursor>::operator()(DB::SortCursor const&, DB::SortCursor const&) const @ 0x260d29 in /home/akuzm/ch2/build-clang11/src/libclickhouse_datastreamsd.so\r\n2021.08.02 16:12:07.736390 [ 9901 ] {} <Fatal> BaseDaemon: 14. /home/akuzm/ch2/ch/contrib/libcxx/include/algorithm:801: bool std::__1::__debug_less<std::__1::__less<DB::SortCursor, DB::SortCursor> >::operator()<DB::SortCursor, DB::SortCursor>(DB::SortCursor&, DB::SortCursor&) @ 0x260aec in /home/akuzm/ch2/build-clang11/src/libclickhouse_datastreamsd.so\r\n2021.08.02 16:12:07.894255 [ 9901 ] {} <Fatal> BaseDaemon: 15. /home/akuzm/ch2/ch/contrib/libcxx/include/algorithm:4950: void std::__1::__sift_down<std::__1::__debug_less<std::__1::__less<DB::SortCursor, DB::SortCursor> >, std::__1::__wrap_iter<DB::SortCursor*> >(std::__1::__wrap_iter<DB::SortCursor*>, std::__1::__wrap_iter<DB::SortCursor*>, std::__1::__debug_less<std::__1::__less<DB::SortCursor, DB::SortCursor> >, std::__1::iterator_traits<std::__1::__wrap_iter<DB::SortCursor*> >::difference_type, std::__1::__wrap_iter<DB::SortCursor*>) @ 0x2608c3 in /home/akuzm/ch2/build-clang11/src/libclickhouse_datastreamsd.so\r\n2021.08.02 16:12:08.060210 [ 9901 ] {} <Fatal> BaseDaemon: 16. /home/akuzm/ch2/ch/contrib/libcxx/include/algorithm:5020: void std::__1::__make_heap<std::__1::__debug_less<std::__1::__less<DB::SortCursor, DB::SortCursor> >, std::__1::__wrap_iter<DB::SortCursor*> >(std::__1::__wrap_iter<DB::SortCursor*>, std::__1::__wrap_iter<DB::SortCursor*>, std::__1::__debug_less<std::__1::__less<DB::SortCursor, DB::SortCursor> >) @ 0x26071d in /home/akuzm/ch2/build-clang11/src/libclickhouse_datastreamsd.so\r\n2021.08.02 16:12:08.217777 [ 9901 ] {} <Fatal> BaseDaemon: 17. /home/akuzm/ch2/ch/contrib/libcxx/include/algorithm:5034: void std::__1::make_heap<std::__1::__wrap_iter<DB::SortCursor*>, std::__1::__less<DB::SortCursor, DB::SortCursor> >(std::__1::__wrap_iter<DB::SortCursor*>, std::__1::__wrap_iter<DB::SortCursor*>, std::__1::__less<DB::SortCursor, DB::SortCursor>) @ 0x26065e in /home/akuzm/ch2/build-clang11/src/libclickhouse_datastreamsd.so\r\n2021.08.02 16:12:08.377458 [ 9901 ] {} <Fatal> BaseDaemon: 18. /home/akuzm/ch2/ch/contrib/libcxx/include/algorithm:5042: void std::__1::make_heap<std::__1::__wrap_iter<DB::SortCursor*> >(std::__1::__wrap_iter<DB::SortCursor*>, std::__1::__wrap_iter<DB::SortCursor*>) @ 0x25f7ad in /home/akuzm/ch2/build-clang11/src/libclickhouse_datastreamsd.so\r\n2021.08.02 16:12:08.507885 [ 9901 ] {} <Fatal> BaseDaemon: 19. /home/akuzm/ch2/ch/src/Core/SortCursor.h:255: DB::SortingHeap<DB::SortCursor>::SortingHeap<std::__1::vector<DB::SortCursorImpl, std::__1::allocator<DB::SortCursorImpl> > >(std::__1::vector<DB::SortCursorImpl, std::__1::allocator<DB::SortCursorImpl> >&) @ 0x255751 in /home/akuzm/ch2/build-clang11/src/libclickhouse_datastreamsd.so\r\n2021.08.02 16:12:08.635924 [ 9901 ] {} <Fatal> BaseDaemon: 20. /home/akuzm/ch2/ch/src/Processors/Transforms/SortingTransform.cpp:51: DB::MergeSorter::MergeSorter(std::__1::vector<DB::Chunk, std::__1::allocator<DB::Chunk> >, std::__1::vector<DB::SortColumnDescription, std::__1::allocator<DB::SortColumnDescription> >&, unsigned long, unsigned long) @ 0x27bd23 in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_transformsd.so\r\n2021.08.02 16:12:08.720147 [ 9901 ] {} <Fatal> BaseDaemon: 21. /home/akuzm/ch2/ch/contrib/libcxx/include/memory:2068: std::__1::__unique_if<DB::MergeSorter>::__unique_single std::__1::make_unique<DB::MergeSorter, std::__1::vector<DB::Chunk, std::__1::allocator<DB::Chunk> >, std::__1::vector<DB::SortColumnDescription, std::__1::allocator<DB::SortColumnDescription> >&, unsigned long&, unsigned long&>(std::__1::vector<DB::Chunk, std::__1::allocator<DB::Chunk> >&&, std::__1::vector<DB::SortColumnDescription, std::__1::allocator<DB::SortColumnDescription> >&, unsigned long&, unsigned long&) @ 0x241b35 in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_transformsd.so\r\n2021.08.02 16:12:08.961613 [ 9901 ] {} <Fatal> BaseDaemon: 22. /home/akuzm/ch2/ch/src/Processors/Transforms/MergeSortingTransform.cpp:229: DB::MergeSortingTransform::generate() @ 0x2537c7 in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_transformsd.so\r\n2021.08.02 16:12:09.092012 [ 9901 ] {} <Fatal> BaseDaemon: 23. /home/akuzm/ch2/ch/src/Processors/Transforms/SortingTransform.cpp:340: DB::SortingTransform::work() @ 0x28463e in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_transformsd.so\r\n2021.08.02 16:12:09.439414 [ 9901 ] {} <Fatal> BaseDaemon: 24. /home/akuzm/ch2/ch/src/Processors/Executors/PipelineExecutor.cpp:80: DB::executeJob(DB::IProcessor*) @ 0x98bdc in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_executorsd.so\r\n2021.08.02 16:12:09.755288 [ 9901 ] {} <Fatal> BaseDaemon: 25. /home/akuzm/ch2/ch/src/Processors/Executors/PipelineExecutor.cpp:97: DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0::operator()() const @ 0x98b3f in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_executorsd.so\r\n2021.08.02 16:12:10.059211 [ 9901 ] {} <Fatal> BaseDaemon: 26. /home/akuzm/ch2/ch/contrib/libcxx/include/type_traits:3676: decltype(std::__1::forward<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&>(fp)()) std::__1::__invoke<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&>(DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&) @ 0x98add in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_executorsd.so\r\n2021.08.02 16:12:10.355808 [ 9901 ] {} <Fatal> BaseDaemon: 27. /home/akuzm/ch2/ch/contrib/libcxx/include/__functional_base:349: void std::__1::__invoke_void_return_wrapper<void>::__call<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&>(DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&) @ 0x98a9d in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_executorsd.so\r\n2021.08.02 16:12:10.648865 [ 9901 ] {} <Fatal> BaseDaemon: 28. /home/akuzm/ch2/ch/contrib/libcxx/include/functional:1608: std::__1::__function::__default_alloc_func<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0, void ()>::operator()() @ 0x98a75 in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_executorsd.so\r\n2021.08.02 16:12:10.940932 [ 9901 ] {} <Fatal> BaseDaemon: 29. /home/akuzm/ch2/ch/contrib/libcxx/include/functional:2089: void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0, void ()> >(std::__1::__function::__policy_storage const*) @ 0x98a3d in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_executorsd.so\r\n2021.08.02 16:12:11.043289 [ 9901 ] {} <Fatal> BaseDaemon: 30. /home/akuzm/ch2/ch/contrib/libcxx/include/functional:2221: std::__1::__function::__policy_func<void ()>::operator()() const @ 0x34e889 in /home/akuzm/ch2/build-clang11/src/libclickhouse_common_iod.so\r\n2021.08.02 16:12:11.104885 [ 9901 ] {} <Fatal> BaseDaemon: 31. /home/akuzm/ch2/ch/contrib/libcxx/include/functional:2560: std::__1::function<void ()>::operator()() const @ 0x345175 in /home/akuzm/ch2/build-clang11/src/libclickhouse_common_iod.so\r\n2021.08.02 16:12:11.392269 [ 9901 ] {} <Fatal> BaseDaemon: 32. /home/akuzm/ch2/ch/src/Processors/Executors/PipelineExecutor.cpp:589: DB::PipelineExecutor::executeStepImpl(unsigned long, unsigned long, std::__1::atomic<bool>*) @ 0x97436 in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_executorsd.so\r\n2021.08.02 16:12:11.675774 [ 9901 ] {} <Fatal> BaseDaemon: 33. /home/akuzm/ch2/ch/src/Processors/Executors/PipelineExecutor.cpp:474: DB::PipelineExecutor::executeSingleThread(unsigned long, unsigned long) @ 0x97e19 in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_executorsd.so\r\n2021.08.02 16:12:11.949225 [ 9901 ] {} <Fatal> BaseDaemon: 34. /home/akuzm/ch2/ch/src/Processors/Executors/PipelineExecutor.cpp:813: DB::PipelineExecutor::executeImpl(unsigned long) @ 0x95cc6 in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_executorsd.so\r\n2021.08.02 16:12:12.236730 [ 9901 ] {} <Fatal> BaseDaemon: 35. /home/akuzm/ch2/ch/src/Processors/Executors/PipelineExecutor.cpp:396: DB::PipelineExecutor::execute(unsigned long) @ 0x94fb6 in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_executorsd.so\r\n2021.08.02 16:12:12.470721 [ 9901 ] {} <Fatal> BaseDaemon: 36. /home/akuzm/ch2/ch/src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:80: DB::threadFunction(DB::PullingAsyncPipelineExecutor::Data&, std::__1::shared_ptr<DB::ThreadGroupStatus>, unsigned long) @ 0xbfa79 in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_executorsd.so\r\n2021.08.02 16:12:12.707623 [ 9901 ] {} <Fatal> BaseDaemon: 37. /home/akuzm/ch2/ch/src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:108: DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0::operator()() const @ 0xbf9a6 in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_executorsd.so\r\n2021.08.02 16:12:12.942054 [ 9901 ] {} <Fatal> BaseDaemon: 38. /home/akuzm/ch2/ch/contrib/libcxx/include/type_traits:3682: decltype(std::__1::forward<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>(fp)()) std::__1::__invoke_constexpr<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&) @ 0xbf91d in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_executorsd.so\r\n2021.08.02 16:12:13.180678 [ 9901 ] {} <Fatal> BaseDaemon: 39. /home/akuzm/ch2/ch/contrib/libcxx/include/tuple:1415: decltype(auto) std::__1::__apply_tuple_impl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::__1::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::__1::tuple<>&, std::__1::__tuple_indices<>) @ 0xbf8c1 in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_executorsd.so\r\n2021.08.02 16:12:13.416426 [ 9901 ] {} <Fatal> BaseDaemon: 40. /home/akuzm/ch2/ch/contrib/libcxx/include/tuple:1424: decltype(auto) std::__1::apply<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::__1::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::__1::tuple<>&) @ 0xbf7d2 in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_executorsd.so\r\n2021.08.02 16:12:13.649078 [ 9901 ] {} <Fatal> BaseDaemon: 41. /home/akuzm/ch2/ch/src/Common/ThreadPool.h:182: ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()::operator()() @ 0xbf6cc in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_executorsd.so\r\n2021.08.02 16:12:13.883132 [ 9901 ] {} <Fatal> BaseDaemon: 42. /home/akuzm/ch2/ch/contrib/libcxx/include/type_traits:3676: decltype(std::__1::forward<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(fp)()) std::__1::__invoke<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&) @ 0xbf5dd in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_executorsd.so\r\n2021.08.02 16:12:14.117591 [ 9901 ] {} <Fatal> BaseDaemon: 43. /home/akuzm/ch2/ch/contrib/libcxx/include/__functional_base:349: void std::__1::__invoke_void_return_wrapper<void>::__call<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&...) @ 0xbf59d in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_executorsd.so\r\n2021.08.02 16:12:14.353091 [ 9901 ] {} <Fatal> BaseDaemon: 44. /home/akuzm/ch2/ch/contrib/libcxx/include/functional:1608: std::__1::__function::__default_alloc_func<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'(), void ()>::operator()() @ 0xbf575 in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_executorsd.so\r\n2021.08.02 16:12:14.353274 [ 9901 ] {} <Fatal> BaseDaemon: Calculated checksum of the binary: 5AE2644FBBA96BF3D3AF9BCBBD71E560. There is no information about the reference checksum.\r\n```\n",
  "hints_text": "https://clickhouse-test-reports.s3.yandex.net/0/4f1926550b44e1b763d997c06b6e630ef8d846e5/fuzzer_ubsan/report.html",
  "created_at": "2021-08-05T10:32:50Z"
}