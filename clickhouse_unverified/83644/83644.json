{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 83644,
  "instance_id": "ClickHouse__ClickHouse-83644",
  "issue_numbers": [
    "83092"
  ],
  "base_commit": "7831025d02022b37daaf92ca0d91ebc0053532a2",
  "patch": "diff --git a/src/Parsers/ASTFunction.cpp b/src/Parsers/ASTFunction.cpp\nindex 773374f463b7..f8d045c49247 100644\n--- a/src/Parsers/ASTFunction.cpp\n+++ b/src/Parsers/ASTFunction.cpp\n@@ -268,7 +268,8 @@ void ASTFunction::formatImplWithoutAlias(WriteBuffer & ostr, const FormatSetting\n     {\n         std::string nl_or_nothing = settings.one_line ? \"\" : \"\\n\";\n         std::string indent_str = settings.one_line ? \"\" : std::string(4u * frame.indent, ' ');\n-        ostr << name;\n+        if (!name.empty())\n+            ostr << backQuoteIfNeed(name);\n         ostr << \"(\";\n         ostr << nl_or_nothing;\n         FormatStateStacked frame_nested = frame;\n@@ -655,7 +656,9 @@ void ASTFunction::formatImplWithoutAlias(WriteBuffer & ostr, const FormatSetting\n         return;\n     }\n \n-    ostr << name;\n+    /// Empty names are used rarely, to format queries with an extra pair of parentheses for external databases.\n+    if (!name.empty())\n+        ostr << backQuoteIfNeed(name);\n \n     if (parameters)\n     {\n",
  "test_patch": "diff --git a/tests/integration/test_system_logs_recreate/test.py b/tests/integration/test_system_logs_recreate/test.py\nindex ab0c8073f93f..3320699511d8 100644\n--- a/tests/integration/test_system_logs_recreate/test.py\n+++ b/tests/integration/test_system_logs_recreate/test.py\n@@ -42,7 +42,7 @@ def test_system_logs_recreate():\n             assert \"ENGINE = MergeTree\" in node.query(\n                 f\"SHOW CREATE TABLE system.{table}\"\n             )\n-            assert \"ENGINE = Null\" not in node.query(\n+            assert \"ENGINE = `Null`\" not in node.query(\n                 f\"SHOW CREATE TABLE system.{table}\"\n             )\n             assert (\n@@ -79,7 +79,7 @@ def test_system_logs_recreate():\n             assert \"ENGINE = MergeTree\" not in node.query(\n                 f\"SHOW CREATE TABLE system.{table}\"\n             )\n-            assert \"ENGINE = Null\" in node.query(f\"SHOW CREATE TABLE system.{table}\")\n+            assert \"ENGINE = `Null`\" in node.query(f\"SHOW CREATE TABLE system.{table}\")\n             assert (\n                 len(\n                     node.query(f\"SHOW TABLES FROM system LIKE '{table}%'\")\n@@ -119,7 +119,7 @@ def test_system_logs_recreate():\n                 create_table_sql,\n             )\n             assert \"ENGINE = MergeTree\" in create_table_sql\n-            assert \"ENGINE = Null\" not in create_table_sql\n+            assert \"ENGINE = `Null`\" not in create_table_sql\n             assert \"SETTINGS storage_policy = 'system_tables'\" in create_table_sql\n             assert (\n                 len(\n@@ -141,7 +141,7 @@ def test_system_logs_recreate():\n             assert \"ENGINE = MergeTree\" in node.query(\n                 f\"SHOW CREATE TABLE system.{table}\"\n             )\n-            assert \"ENGINE = Null\" not in node.query(\n+            assert \"ENGINE = `Null`\" not in node.query(\n                 f\"SHOW CREATE TABLE system.{table}\"\n             )\n             assert (\ndiff --git a/tests/queries/0_stateless/01610_client_editor_format_query.expect b/tests/queries/0_stateless/01610_client_editor_format_query.expect\nindex 5a8af20a31cc..6db932da8980 100755\n--- a/tests/queries/0_stateless/01610_client_editor_format_query.expect\n+++ b/tests/queries/0_stateless/01610_client_editor_format_query.expect\n@@ -78,7 +78,7 @@ expect \":) \"\n send -- \"insert into function null() values (1)\"\n # editor with format (M-F)\n send -- \"\\033F\"\n-expect \"INSERT INTO FUNCTION null() VALUES (1)\"\n+expect \"INSERT INTO FUNCTION `null`() VALUES (1)\"\n send -- \"\\r\"\n expect \"Elapsed\"\n expect \":) \"\n@@ -86,7 +86,7 @@ expect \":) \"\n send -- \"insert into function null() format JSONEachRow {\\\"foo\\\": \\\"bar\\\"}\"\n # editor with format (M-F)\n send -- \"\\033F\"\n-expect \"INSERT INTO FUNCTION null() FORMAT JSONEachRow {\\\"foo\\\": \\\"bar\\\"}\"\n+expect \"INSERT INTO FUNCTION `null`() FORMAT JSONEachRow {\\\"foo\\\": \\\"bar\\\"}\"\n send -- \"\\r\"\n expect \"Elapsed\"\n expect \":) \"\ndiff --git a/tests/queries/0_stateless/02020_alter_table_modify_comment.reference b/tests/queries/0_stateless/02020_alter_table_modify_comment.reference\nindex d2e74fd07f08..4a8dee12fc5c 100644\n--- a/tests/queries/0_stateless/02020_alter_table_modify_comment.reference\n+++ b/tests/queries/0_stateless/02020_alter_table_modify_comment.reference\n@@ -1,25 +1,25 @@\n engine : Null\n initial comment\n-CREATE TABLE default.comment_test_table\\n(\\n    `k` UInt64,\\n    `s` String\\n)\\nENGINE = Null\\nCOMMENT \\'Test table with comment\\'\n+CREATE TABLE default.comment_test_table\\n(\\n    `k` UInt64,\\n    `s` String\\n)\\nENGINE = `Null`\\nCOMMENT \\'Test table with comment\\'\n comment=\tTest table with comment\n \n change a comment\n-CREATE TABLE default.comment_test_table\\n(\\n    `k` UInt64,\\n    `s` String\\n)\\nENGINE = Null\\nCOMMENT \\'new comment on a table\\'\n+CREATE TABLE default.comment_test_table\\n(\\n    `k` UInt64,\\n    `s` String\\n)\\nENGINE = `Null`\\nCOMMENT \\'new comment on a table\\'\n comment=\tnew comment on a table\n \n remove a comment\n-CREATE TABLE default.comment_test_table\\n(\\n    `k` UInt64,\\n    `s` String\\n)\\nENGINE = Null\n+CREATE TABLE default.comment_test_table\\n(\\n    `k` UInt64,\\n    `s` String\\n)\\nENGINE = `Null`\n comment=\t\n \n add a comment back\n-CREATE TABLE default.comment_test_table\\n(\\n    `k` UInt64,\\n    `s` String\\n)\\nENGINE = Null\\nCOMMENT \\'another comment on a table\\'\n+CREATE TABLE default.comment_test_table\\n(\\n    `k` UInt64,\\n    `s` String\\n)\\nENGINE = `Null`\\nCOMMENT \\'another comment on a table\\'\n comment=\tanother comment on a table\n \n detach table\n-CREATE TABLE default.comment_test_table\\n(\\n    `k` UInt64,\\n    `s` String\\n)\\nENGINE = Null\\nCOMMENT \\'another comment on a table\\'\n+CREATE TABLE default.comment_test_table\\n(\\n    `k` UInt64,\\n    `s` String\\n)\\nENGINE = `Null`\\nCOMMENT \\'another comment on a table\\'\n \n re-attach table\n-CREATE TABLE default.comment_test_table\\n(\\n    `k` UInt64,\\n    `s` String\\n)\\nENGINE = Null\\nCOMMENT \\'another comment on a table\\'\n+CREATE TABLE default.comment_test_table\\n(\\n    `k` UInt64,\\n    `s` String\\n)\\nENGINE = `Null`\\nCOMMENT \\'another comment on a table\\'\n comment=\tanother comment on a table\n \n engine : Memory\ndiff --git a/tests/queries/0_stateless/02230_create_table_as_ignore_ttl.reference b/tests/queries/0_stateless/02230_create_table_as_ignore_ttl.reference\nindex 5236875e2098..cc016127b556 100644\n--- a/tests/queries/0_stateless/02230_create_table_as_ignore_ttl.reference\n+++ b/tests/queries/0_stateless/02230_create_table_as_ignore_ttl.reference\n@@ -12,7 +12,7 @@ CREATE TABLE default.null_02230_ttl\n     `date` Date,\n     `key` Int32\n )\n-ENGINE = Null\n+ENGINE = `Null`\n CREATE TABLE default.data_02230_column_ttl\n (\n     `date` Date,\n@@ -29,4 +29,4 @@ CREATE TABLE default.null_02230_column_ttl\n     `value` Int32,\n     `key` Int32\n )\n-ENGINE = Null\n+ENGINE = `Null`\ndiff --git a/tests/queries/0_stateless/02982_create_mv_inner_extra.reference b/tests/queries/0_stateless/02982_create_mv_inner_extra.reference\nindex 06a60436b2f6..42c621cf51fc 100644\n--- a/tests/queries/0_stateless/02982_create_mv_inner_extra.reference\n+++ b/tests/queries/0_stateless/02982_create_mv_inner_extra.reference\n@@ -1,5 +1,5 @@\n CREATE TABLE x (`key` String) ENGINE = MergeTree PRIMARY KEY key ORDER BY key SETTINGS index_granularity = 8192\n CREATE TABLE x (`key` String) ENGINE = MergeTree PRIMARY KEY tuple(key) ORDER BY tuple(key) SETTINGS index_granularity = 8192\n-CREATE TABLE x (`key` String) ENGINE = Null\n+CREATE TABLE x (`key` String) ENGINE = `Null`\n CREATE TABLE x (`key` String, INDEX idx key TYPE bloom_filter GRANULARITY 1) ENGINE = MergeTree ORDER BY key SETTINGS index_granularity = 8192\n CREATE TABLE x (`key` String, PROJECTION p (SELECT uniqCombined(key))) ENGINE = MergeTree ORDER BY key SETTINGS index_granularity = 8192\ndiff --git a/tests/queries/0_stateless/03566_inconsistent_formatting_functions_codecs.reference b/tests/queries/0_stateless/03566_inconsistent_formatting_functions_codecs.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/03566_inconsistent_formatting_functions_codecs.sql b/tests/queries/0_stateless/03566_inconsistent_formatting_functions_codecs.sql\nnew file mode 100644\nindex 000000000000..73d5cfc03a61\n--- /dev/null\n+++ b/tests/queries/0_stateless/03566_inconsistent_formatting_functions_codecs.sql\n@@ -0,0 +1,6 @@\n+CREATE TEMPORARY TABLE a (b UInt8) ENGINE = MergeTree ORDER BY b;\n+ALTER TABLE a MODIFY COLUMN b CODEC(`@`); -- { serverError UNKNOWN_CODEC }\n+SELECT f(`@`); -- { serverError UNKNOWN_IDENTIFIER }\n+SELECT `@`(1); -- { serverError UNKNOWN_FUNCTION }\n+SELECT ` `(1); -- { serverError UNKNOWN_FUNCTION }\n+SELECT `\u0443\u043f\u044f\u0447\u043a\u0430`(1); -- { serverError UNKNOWN_FUNCTION }\n",
  "problem_statement": "[LOGICAL_ERROR] Inconsistent AST formatting with ALTER CODEC\n### Describe the bug\n\nFrom this run: https://s3.amazonaws.com/clickhouse-test-reports/json.html?REF=master&sha=be3fb8e878cb4961ecae3de0f9dfe4ec23532fcd&name_0=MasterCI&name_1=AST%20fuzzer%20%28amd_debug%29\n\n### How to reproduce\n\nRun:\n\n```sql\nALTER TABLE a MODIFY COLUMN b CODEC(`@`);\n```\n\n### Error message and/or stacktrace\n\nStack trace:\n\n```\n<Fatal> : Logical error: 'Inconsistent AST formatting: the query:\nALTER TABLE a (MODIFY COLUMN `b` CODEC(@))\ncannot parse query back from ALTER TABLE a MODIFY COLUMN b CODEC(`@`);'.\n<Fatal> : Stack trace (when copying this message, always include the lines below):\n\n0. contrib/llvm-project/libcxx/include/__exception/exception.h:113: Poco::Exception::Exception(String const&, int) @ 0x0000000023fc92f2\n1. src/Common/Exception.cpp:115: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000136a55a6\n2. src/Common/Exception.h:119: DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000c7854cc\n3. src/Common/Exception.h:137: DB::Exception::Exception<String&, std::basic_string_view<char, std::char_traits<char>>>(int, FormatStringHelperImpl<std::type_identity<String&>::type, std::type_identity<std::basic_string_view<char, std::char_traits<char>>>::type>, String&, std::basic_string_view<char, std::char_traits<char>>&&) @ 0x000000001a3ff5d6\n4. src/Interpreters/executeQuery.cpp:1093: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x000000001a3f7593\n5. src/Interpreters/executeQuery.cpp:1769: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x000000001a3ef25b\n6. src/Server/TCPHandler.cpp:722: DB::TCPHandler::runImpl() @ 0x000000001c1aa2d2\n7. src/Server/TCPHandler.cpp:2729: DB::TCPHandler::run() @ 0x000000001c1c3804\n8. base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x000000002406e0c7\n9. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x000000002406e5c5\n10. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x0000000024016b9f\n11. base/poco/Foundation/src/Thread_POSIX.cpp:341: Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000024014731\n12. start_thread @ 0x00000000000a2ef1\n13. __clone3 @ 0x000000000013445c\n```\n",
  "hints_text": "",
  "created_at": "2025-07-12T13:47:39Z",
  "modified_files": [
    "src/Parsers/ASTFunction.cpp"
  ],
  "modified_test_files": [
    "tests/integration/test_system_logs_recreate/test.py",
    "tests/queries/0_stateless/01610_client_editor_format_query.expect",
    "tests/queries/0_stateless/02020_alter_table_modify_comment.reference",
    "tests/queries/0_stateless/02230_create_table_as_ignore_ttl.reference",
    "tests/queries/0_stateless/02982_create_mv_inner_extra.reference",
    "b/tests/queries/0_stateless/03566_inconsistent_formatting_functions_codecs.sql"
  ]
}