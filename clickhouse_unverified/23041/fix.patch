diff --git a/src/Common/ZooKeeper/TestKeeper.cpp b/src/Common/ZooKeeper/TestKeeper.cpp
index 5951164f58f2..36c875fe3259 100644
--- a/src/Common/ZooKeeper/TestKeeper.cpp
+++ b/src/Common/ZooKeeper/TestKeeper.cpp
@@ -421,26 +421,38 @@ std::pair<ResponsePtr, Undo> TestKeeperMultiRequest::process(TestKeeper::Contain
 
     try
     {
-        for (const auto & request : requests)
+        auto request_it = requests.begin();
+        response.error = Error::ZOK;
+        while (request_it != requests.end())
         {
-            const TestKeeperRequest & concrete_request = dynamic_cast<const TestKeeperRequest &>(*request);
+            const TestKeeperRequest & concrete_request = dynamic_cast<const TestKeeperRequest &>(**request_it);
+            ++request_it;
             auto [ cur_response, undo_action ] = concrete_request.process(container, zxid);
             response.responses.emplace_back(cur_response);
             if (cur_response->error != Error::ZOK)
             {
                 response.error = cur_response->error;
+                break;
+            }
+
+            undo_actions.emplace_back(std::move(undo_action));
+        }
 
-                for (auto it = undo_actions.rbegin(); it != undo_actions.rend(); ++it)
-                    if (*it)
-                        (*it)();
+        if (response.error != Error::ZOK)
+        {
+            for (auto it = undo_actions.rbegin(); it != undo_actions.rend(); ++it)
+                if (*it)
+                    (*it)();
 
-                return { std::make_shared<MultiResponse>(response), {} };
+            while (request_it != requests.end())
+            {
+                const TestKeeperRequest & concrete_request = dynamic_cast<const TestKeeperRequest &>(**request_it);
+                ++request_it;
+                response.responses.emplace_back(concrete_request.createResponse());
+                response.responses.back()->error = Error::ZRUNTIMEINCONSISTENCY;
             }
-            else
-                undo_actions.emplace_back(std::move(undo_action));
         }
 
-        response.error = Error::ZOK;
         return { std::make_shared<MultiResponse>(response), {} };
     }
     catch (...)
