diff --git a/tests/queries/0_stateless/00926_adaptive_index_granularity_replacing_merge_tree.reference b/tests/queries/0_stateless/00926_adaptive_index_granularity_replacing_merge_tree.reference
index a418a89ccc59..5d5f3af28abb 100644
--- a/tests/queries/0_stateless/00926_adaptive_index_granularity_replacing_merge_tree.reference
+++ b/tests/queries/0_stateless/00926_adaptive_index_granularity_replacing_merge_tree.reference
@@ -1,7 +1,7 @@
 4
 4
 8
-7
+8
 -----
 4
 2
diff --git a/tests/queries/0_stateless/01825_replacing_vertical_merge.reference b/tests/queries/0_stateless/01825_replacing_vertical_merge.reference
new file mode 100644
index 000000000000..18fcfcd8f8e7
--- /dev/null
+++ b/tests/queries/0_stateless/01825_replacing_vertical_merge.reference
@@ -0,0 +1,4 @@
+1720	32
+220	17
+33558527	8193
+33550336	8192
diff --git a/tests/queries/0_stateless/01825_replacing_vertical_merge.sql b/tests/queries/0_stateless/01825_replacing_vertical_merge.sql
new file mode 100644
index 000000000000..0048f8d7b24e
--- /dev/null
+++ b/tests/queries/0_stateless/01825_replacing_vertical_merge.sql
@@ -0,0 +1,48 @@
+SET optimize_on_insert = 0;
+
+DROP TABLE IF EXISTS replacing_table;
+
+CREATE TABLE replacing_table (a UInt32, b UInt32, c UInt32)
+ENGINE = ReplacingMergeTree ORDER BY a
+SETTINGS vertical_merge_algorithm_min_rows_to_activate = 1,
+    vertical_merge_algorithm_min_columns_to_activate = 1,
+    index_granularity = 16,
+    min_bytes_for_wide_part = 0,
+    merge_max_block_size = 16;
+
+SYSTEM STOP MERGES replacing_table;
+
+INSERT INTO replacing_table SELECT number, number, number from numbers(16);
+INSERT INTO replacing_table SELECT 100, number, number from numbers(16);
+
+SELECT sum(a), count() FROM replacing_table;
+
+SYSTEM START MERGES replacing_table;
+
+OPTIMIZE TABLE replacing_table FINAL;
+
+SELECT sum(a), count() FROM replacing_table;
+
+DROP TABLE IF EXISTS replacing_table;
+
+CREATE TABLE replacing_table
+(
+    key UInt64,
+    value UInt64
+)
+ENGINE = ReplacingMergeTree
+ORDER BY key
+SETTINGS
+    vertical_merge_algorithm_min_rows_to_activate=0,
+    vertical_merge_algorithm_min_columns_to_activate=0,
+    min_bytes_for_wide_part = 0;
+
+INSERT INTO replacing_table SELECT if(number == 8192, 8191, number), 1 FROM numbers(8193);
+
+SELECT sum(key), count() from replacing_table;
+
+OPTIMIZE TABLE replacing_table FINAL;
+
+SELECT sum(key), count() from replacing_table;
+
+DROP TABLE IF EXISTS replacing_table;
