{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 23459,
  "instance_id": "ClickHouse__ClickHouse-23459",
  "issue_numbers": [
    "23365"
  ],
  "base_commit": "fd9ac7edaffb361aea71ea9b1b0cb84863544172",
  "patch": "diff --git a/src/DataStreams/ColumnGathererStream.cpp b/src/DataStreams/ColumnGathererStream.cpp\nindex 2468ae872a24..683b8012efe0 100644\n--- a/src/DataStreams/ColumnGathererStream.cpp\n+++ b/src/DataStreams/ColumnGathererStream.cpp\n@@ -53,7 +53,7 @@ ColumnGathererStream::ColumnGathererStream(\n Block ColumnGathererStream::readImpl()\n {\n     /// Special case: single source and there are no skipped rows\n-    if (children.size() == 1 && row_sources_buf.eof())\n+    if (children.size() == 1 && row_sources_buf.eof() && !source_to_fully_copy)\n         return children[0]->read();\n \n     if (!source_to_fully_copy && row_sources_buf.eof())\ndiff --git a/src/Processors/Merges/Algorithms/ReplacingSortedAlgorithm.cpp b/src/Processors/Merges/Algorithms/ReplacingSortedAlgorithm.cpp\nindex 132241844d77..b8c788ed1fca 100644\n--- a/src/Processors/Merges/Algorithms/ReplacingSortedAlgorithm.cpp\n+++ b/src/Processors/Merges/Algorithms/ReplacingSortedAlgorithm.cpp\n@@ -93,6 +93,10 @@ IMergingAlgorithm::Status ReplacingSortedAlgorithm::merge()\n         }\n     }\n \n+    /// If have enough rows, return block, because it prohibited to overflow requested number of rows.\n+    if (merged_data.hasEnoughRows())\n+        return Status(merged_data.pull());\n+\n     /// We will write the data for the last primary key.\n     if (!selected_row.empty())\n         insertRow();\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00926_adaptive_index_granularity_replacing_merge_tree.reference b/tests/queries/0_stateless/00926_adaptive_index_granularity_replacing_merge_tree.reference\nindex a418a89ccc59..5d5f3af28abb 100644\n--- a/tests/queries/0_stateless/00926_adaptive_index_granularity_replacing_merge_tree.reference\n+++ b/tests/queries/0_stateless/00926_adaptive_index_granularity_replacing_merge_tree.reference\n@@ -1,7 +1,7 @@\n 4\n 4\n 8\n-7\n+8\n -----\n 4\n 2\ndiff --git a/tests/queries/0_stateless/01825_replacing_vertical_merge.reference b/tests/queries/0_stateless/01825_replacing_vertical_merge.reference\nnew file mode 100644\nindex 000000000000..18fcfcd8f8e7\n--- /dev/null\n+++ b/tests/queries/0_stateless/01825_replacing_vertical_merge.reference\n@@ -0,0 +1,4 @@\n+1720\t32\n+220\t17\n+33558527\t8193\n+33550336\t8192\ndiff --git a/tests/queries/0_stateless/01825_replacing_vertical_merge.sql b/tests/queries/0_stateless/01825_replacing_vertical_merge.sql\nnew file mode 100644\nindex 000000000000..0048f8d7b24e\n--- /dev/null\n+++ b/tests/queries/0_stateless/01825_replacing_vertical_merge.sql\n@@ -0,0 +1,48 @@\n+SET optimize_on_insert = 0;\n+\n+DROP TABLE IF EXISTS replacing_table;\n+\n+CREATE TABLE replacing_table (a UInt32, b UInt32, c UInt32)\n+ENGINE = ReplacingMergeTree ORDER BY a\n+SETTINGS vertical_merge_algorithm_min_rows_to_activate = 1,\n+    vertical_merge_algorithm_min_columns_to_activate = 1,\n+    index_granularity = 16,\n+    min_bytes_for_wide_part = 0,\n+    merge_max_block_size = 16;\n+\n+SYSTEM STOP MERGES replacing_table;\n+\n+INSERT INTO replacing_table SELECT number, number, number from numbers(16);\n+INSERT INTO replacing_table SELECT 100, number, number from numbers(16);\n+\n+SELECT sum(a), count() FROM replacing_table;\n+\n+SYSTEM START MERGES replacing_table;\n+\n+OPTIMIZE TABLE replacing_table FINAL;\n+\n+SELECT sum(a), count() FROM replacing_table;\n+\n+DROP TABLE IF EXISTS replacing_table;\n+\n+CREATE TABLE replacing_table\n+(\n+    key UInt64,\n+    value UInt64\n+)\n+ENGINE = ReplacingMergeTree\n+ORDER BY key\n+SETTINGS\n+    vertical_merge_algorithm_min_rows_to_activate=0,\n+    vertical_merge_algorithm_min_columns_to_activate=0,\n+    min_bytes_for_wide_part = 0;\n+\n+INSERT INTO replacing_table SELECT if(number == 8192, 8191, number), 1 FROM numbers(8193);\n+\n+SELECT sum(key), count() from replacing_table;\n+\n+OPTIMIZE TABLE replacing_table FINAL;\n+\n+SELECT sum(key), count() from replacing_table;\n+\n+DROP TABLE IF EXISTS replacing_table;\n",
  "problem_statement": "Vertical merges fails on granule/block size check\n**Describe the bug**\r\nVertical merges seems to be fed with a granule bigger by 1 rows than granularity size, and fails with the following error : \r\n```\r\n2021.04.20 09:59:56.027482 [ 10195 ] {} <Error> database.table_local (813d322c-c51c-47f4-baa7-6c0b90bbab9e): auto DB::StorageReplicatedMergeTree::processQueueEntry(ReplicatedMergeTreeQueue::SelectedEntryPtr)::(anonymous class)::operator()(DB::StorageReplicatedMergeTree::LogEntryPtr &) const: Code: 49, e.displayText() = DB::Exception: Incomplete granules are not allowed while blocks are granules size. Mark number 4665 (rows 4096), rows written in last mark 0, rows to write in last mark from block 1 (from row 4096), total marks currently 4666, Stack trace (when copying this message, always include the lines below):#012#0120. DB::Exception::Exception<unsigned long&, unsigned long, unsigned long&, unsigned long&, unsigned long&, unsigned long>(int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long&, unsigned long&&, unsigned long&, unsigned long&, unsigned long&, unsigned long&&) @ 0xfa5c975 in /usr/bin/clickhouse#0121. DB::MergeTreeDataPartWriterWide::shiftCurrentMark(std::__1::vector<DB::Granule, std::__1::allocator<DB::Granule> > const&) @ 0xfa5c863 in /usr/bin/clickhouse#0122. DB::MergeTreeDataPartWriterWide::write(DB::Block const&, DB::PODArray<unsigned long, 4096ul, Allocator<false, false>, 15ul, 16ul> const*) @ 0xfa5d31f in /usr/bin/clickhouse#0123. DB::MergeTreeDataMergerMutator::mergePartsToTemporaryPart(DB::FutureMergedMutatedPart const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::BackgroundProcessListEntry<DB::MergeListElement, DB::MergeInfo>&, std::__1::shared_ptr<DB::RWLockImpl::LockHolderImpl>&, long, DB::Context const&, std::__1::unique_ptr<DB::IReservation, std::__1::default_delete<DB::IReservation> > const&, bool, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xfa153c9 in /usr/bin/clickhouse#0124. DB::StorageReplicatedMergeTree::tryExecuteMerge(DB::ReplicatedMergeTreeLogEntry const&) @ 0xf7d6917 in /usr/bin/clickhouse#0125. DB::StorageReplicatedMergeTree::executeLogEntry(DB::ReplicatedMergeTreeLogEntry&) @ 0xf7cb862 in /usr/bin/clickhouse#0126. ? @ 0xf83cd7f in /usr/bin/clickhouse#0127. DB::ReplicatedMergeTreeQueue::processEntry(std::__1::function<std::__1::shared_ptr<zkutil::ZooKeeper> ()>, std::__1::shared_ptr<DB::ReplicatedMergeTreeLogEntry>&, std::__1::function<bool (std::__1::shared_ptr<DB::ReplicatedMergeTreeLogEntry>&)>) @ 0xfb7d0f8 in /usr/bin/clickhouse#0128. DB::StorageReplicatedMergeTree::processQueueEntry(std::__1::shared_ptr<DB::ReplicatedMergeTreeQueue::SelectedEntry>) @ 0xf7f514d in /usr/bin/clickhouse#0129. ? @ 0xf963667 in /usr/bin/clickhouse#01210. ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::__1::__list_iterator<ThreadFromGlobalPool, void*>) @ 0x89916ff in /usr/bin/clickhouse#01211. ThreadFromGlobalPool::ThreadFromGlobalPool<void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()>(void&&, void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()&&...)::'lambda'()::operator()() @ 0x899367f in /usr/bin/clickhouse#01212. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x898edef in /usr/bin/clickhouse#01213. ? @ 0x8992733 in /usr/bin/clickhouse#01214. start_thread @ 0x7fa3 in /usr/lib/x86_64-linux-gnu/libpthread-2.28.so#01215. clone @ 0xf94cf in /usr/lib/x86_64-linux-gnu/libc-2.28.so#012 (version 21.3.4.25)\r\n``` \r\n\r\nThe table engine is ReplicatedReplacingMergeTree\r\nwith  SETTINGS storage_policy = 'jbod_policy_1', index_granularity = 4096, merge_max_block_size = 4096, index_granularity_bytes = 41943040 \r\n\r\nThe error is clearly deterministic, and will fail to merge in a loop. \r\n**Does it reproduce on recent release?**\r\n21.3.4.25 \r\n\r\nThe merge information : \r\n``` elapsed:                     32.740309772\r\nprogress:                    0.17199233946890857\r\nnum_parts:                   6\r\nsource_part_names:           ['31_975_975_0','31_976_976_0','31_977_977_0','31_978_978_0','31_979_979_0','31_980_980_0']\r\nresult_part_name:            31_975_980_1\r\nsource_part_paths:           ['/disk13/clickhouse/store/813/813d322c-c51c-47f4-baa7-6c0b90bbab9e/31_975_975_0/','/disk7/clickhouse/store/813/813d322c-c51c-47f4-baa7-6c0b90bbab9e/31_976_976_0/','/disk4/clickhouse/store/813/813d322c-c51c-47f4-baa7-6c0b90bbab9e/31_977_977_0/','/disk5/clickhouse/store/813/813d322c-c51c-47f4-baa7-6c0b90bbab9e/31_978_978_0/','/disk15/clickhouse/store/813/813d322c-c51c-47f4-baa7-6c0b90bbab9e/31_979_979_0/','/disk10/clickhouse/store/813/813d322c-c51c-47f4-baa7-6c0b90bbab9e/31_980_980_0/']\r\nresult_part_path:            /disk5/clickhouse/store/813/813d322c-c51c-47f4-baa7-6c0b90bbab9e/31_975_980_1/\r\npartition_id:                31\r\nis_mutation:                 0\r\ntotal_size_bytes_compressed: 1286881212\r\ntotal_size_marks:            4672\r\nbytes_read_uncompressed:     1955818184\r\nrows_read:                   8898560\r\nbytes_written_uncompressed:  1947119248\r\nrows_written:                8857600\r\ncolumns_written:             0\r\nmemory_usage:                79808173\r\nthread_id:                   9976\r\nmerge_type:                  REGULAR\r\nmerge_algorithm:             Vertical\r\n``` \n",
  "hints_text": "Until it will be fixed, as workaround you can disable Vertical merges by setting of MergeTree `enable_vertical_merge_algorithm`.\nThanks. Happy to share more information if you need, it is currently easy to reproduce ",
  "created_at": "2021-04-21T22:28:50Z",
  "modified_files": [
    "src/DataStreams/ColumnGathererStream.cpp",
    "src/Processors/Merges/Algorithms/ReplacingSortedAlgorithm.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/00926_adaptive_index_granularity_replacing_merge_tree.reference",
    "b/tests/queries/0_stateless/01825_replacing_vertical_merge.reference",
    "b/tests/queries/0_stateless/01825_replacing_vertical_merge.sql"
  ]
}