{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 10512,
  "instance_id": "ClickHouse__ClickHouse-10512",
  "issue_numbers": [
    "7540"
  ],
  "base_commit": "19b4e68ecf00c8b323f8fb9eefb087f7a58c6ab9",
  "patch": "diff --git a/src/DataTypes/DataTypesDecimal.cpp b/src/DataTypes/DataTypesDecimal.cpp\nindex cbc38429183e..0d48845b4fe6 100644\n--- a/src/DataTypes/DataTypesDecimal.cpp\n+++ b/src/DataTypes/DataTypesDecimal.cpp\n@@ -22,9 +22,9 @@ namespace ErrorCodes\n {\n     extern const int NUMBER_OF_ARGUMENTS_DOESNT_MATCH;\n     extern const int ILLEGAL_TYPE_OF_ARGUMENT;\n+    extern const int DECIMAL_OVERFLOW;\n }\n \n-//\n \n template <typename T>\n std::string DataTypeDecimal<T>::doGetName() const\n@@ -61,10 +61,13 @@ template <typename T>\n bool DataTypeDecimal<T>::tryReadText(T & x, ReadBuffer & istr, UInt32 precision, UInt32 scale)\n {\n     UInt32 unread_scale = scale;\n-    bool done = tryReadDecimalText(istr, x, precision, unread_scale);\n+    if (!tryReadDecimalText(istr, x, precision, unread_scale))\n+        return false;\n \n-    x *= T::getScaleMultiplier(unread_scale);\n-    return done;\n+    if (common::mulOverflow(x.value, T::getScaleMultiplier(unread_scale), x.value))\n+        return false;\n+\n+    return true;\n }\n \n template <typename T>\n@@ -75,7 +78,9 @@ void DataTypeDecimal<T>::readText(T & x, ReadBuffer & istr, UInt32 precision, UI\n         readCSVDecimalText(istr, x, precision, unread_scale);\n     else\n         readDecimalText(istr, x, precision, unread_scale);\n-    x *= T::getScaleMultiplier(unread_scale);\n+\n+    if (common::mulOverflow(x.value, T::getScaleMultiplier(unread_scale), x.value))\n+        throw Exception(\"Decimal math overflow\", ErrorCodes::DECIMAL_OVERFLOW);\n }\n \n template <typename T>\n@@ -101,7 +106,9 @@ T DataTypeDecimal<T>::parseFromString(const String & str) const\n     T x;\n     UInt32 unread_scale = this->scale;\n     readDecimalText(buf, x, this->precision, unread_scale, true);\n-    x *= T::getScaleMultiplier(unread_scale);\n+\n+    if (common::mulOverflow(x.value, T::getScaleMultiplier(unread_scale), x.value))\n+        throw Exception(\"Decimal math overflow\", ErrorCodes::DECIMAL_OVERFLOW);\n \n     return x;\n }\n",
  "test_patch": "diff --git a/tests/performance/decimal_parse.xml b/tests/performance/decimal_parse.xml\nnew file mode 100644\nindex 000000000000..19e940b13df6\n--- /dev/null\n+++ b/tests/performance/decimal_parse.xml\n@@ -0,0 +1,3 @@\n+<test>\n+    <query>SELECT count() FROM zeros(10000000) WHERE NOT ignore(toDecimal32OrZero(toString(rand() % 10000), 5))</query>\n+</test>\ndiff --git a/tests/queries/0_stateless/01260_ubsan_decimal_parse.reference b/tests/queries/0_stateless/01260_ubsan_decimal_parse.reference\nnew file mode 100644\nindex 000000000000..945da8ffd365\n--- /dev/null\n+++ b/tests/queries/0_stateless/01260_ubsan_decimal_parse.reference\n@@ -0,0 +1,1 @@\n+0.000000\ndiff --git a/tests/queries/0_stateless/01260_ubsan_decimal_parse.sql b/tests/queries/0_stateless/01260_ubsan_decimal_parse.sql\nnew file mode 100644\nindex 000000000000..2c7cda512e80\n--- /dev/null\n+++ b/tests/queries/0_stateless/01260_ubsan_decimal_parse.sql\n@@ -0,0 +1,1 @@\n+SELECT toDecimal32OrZero(CAST(-7174046, 'String'), 6);\n",
  "problem_statement": "ubsan in fuzz test: signed integer overflow\n```\r\n../dbms/src/Core/Types.h:143:58: runtime error: signed integer overflow: -7174046 * 1000000 cannot be represented in type 'int'\r\n    #0 0x1780c221 in DB::Decimal<int>::operator*=(int const&) /build/obj-x86_64-linux-gnu/../dbms/src/Core/Types.h:143:58\r\n    #1 0x1780c221 in DB::DataTypeDecimal<DB::Decimal<int> >::tryReadText(DB::Decimal<int>&, DB::ReadBuffer&, unsigned int, unsigned int) /build/obj-x86_64-linux-gnu/../dbms/src/DataTypes/DataTypesDecimal.cpp:61\r\n    #2 0x10a82f4b in void DB::ConvertThroughParsing<DB::DataTypeString, DB::DataTypeDecimal<DB::Decimal<int> >, DB::NameToDecimal32OrZero, (DB::ConvertFromStringExceptionMode)1, (DB::ConvertFromStringParsingMode)0>::execute<unsigned int>(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long, unsigned int) (/usr/bin/clickhouse+0x10a82f4b)\r\n    #3 0x175883b6 in DB::PreparedFunctionImpl::defaultImplementationForConstantArguments(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long, bool) /build/obj-x86_64-linux-gnu/../dbms/src/Functions/IFunction.cpp:259:5\r\n    #4 0x175890ed in DB::PreparedFunctionImpl::executeWithoutLowCardinalityColumns(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long, bool) /build/obj-x86_64-linux-gnu/../dbms/src/Functions/IFunction.cpp:303:9\r\n    #5 0x1758a133 in DB::PreparedFunctionImpl::execute(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long, bool) /build/obj-x86_64-linux-gnu/../dbms/src/Functions/IFunction.cpp:473:13\r\n```\r\n\r\nhttps://clickhouse-test-reports.s3.yandex.net/7500/15d12db16a2ac65af695aadcecc2c55b9a9c668a/functional_stateless_tests_(ubsan).html\n",
  "hints_text": "In what query?\n`SELECT bitTestAny(-103, 422)`\nThe original query is `SELECT toDecimal32OrZero(CAST(-7174046, 'String'), 6)`\r\n\r\nAnother log for `SELECT bitTestAny(-3, 94874)`\r\nhttps://clickhouse-test-reports.s3.yandex.net/0/30acb1b653cbc21fbd8b873023a9f9ace0715e1a/functional_stateless_tests_(ubsan)/stderr.log\n#9143",
  "created_at": "2020-04-26T15:49:06Z",
  "modified_files": [
    "src/DataTypes/DataTypesDecimal.cpp"
  ],
  "modified_test_files": [
    "b/tests/performance/decimal_parse.xml",
    "b/tests/queries/0_stateless/01260_ubsan_decimal_parse.reference",
    "b/tests/queries/0_stateless/01260_ubsan_decimal_parse.sql"
  ]
}