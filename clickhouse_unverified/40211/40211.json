{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 40211,
  "instance_id": "ClickHouse__ClickHouse-40211",
  "issue_numbers": [
    "40097"
  ],
  "base_commit": "dc9612961587de705e6adbc10e7d9b76c9355a56",
  "patch": "diff --git a/src/Functions/array/arrayDifference.cpp b/src/Functions/array/arrayDifference.cpp\nindex a19f04f4e020..118fe87270bf 100644\n--- a/src/Functions/array/arrayDifference.cpp\n+++ b/src/Functions/array/arrayDifference.cpp\n@@ -84,7 +84,7 @@ struct ArrayDifferenceImpl\n                 }\n                 else\n                 {\n-                    dst[pos] = curr - prev;\n+                    dst[pos] = static_cast<Result>(curr) - static_cast<Result>(prev);\n                 }\n \n                 prev = curr;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01716_array_difference_overflow.reference b/tests/queries/0_stateless/01716_array_difference_overflow.reference\nindex 5297534679ee..a4e34800849b 100644\n--- a/tests/queries/0_stateless/01716_array_difference_overflow.reference\n+++ b/tests/queries/0_stateless/01716_array_difference_overflow.reference\n@@ -1,1 +1,5 @@\n [0,9223372036854710272]\n+[0,-9]\n+[0,-9]\n+[0,-9]\n+[0,-9]\ndiff --git a/tests/queries/0_stateless/01716_array_difference_overflow.sql b/tests/queries/0_stateless/01716_array_difference_overflow.sql\nindex 3d153725294b..747e0ad757df 100644\n--- a/tests/queries/0_stateless/01716_array_difference_overflow.sql\n+++ b/tests/queries/0_stateless/01716_array_difference_overflow.sql\n@@ -1,2 +1,8 @@\n -- Overflow is Ok and behaves as the CPU does it.\n SELECT arrayDifference([65536, -9223372036854775808]);\n+\n+-- Diff of unsigned int -> int\n+SELECT arrayDifference( cast([10, 1], 'Array(UInt8)'));\n+SELECT arrayDifference( cast([10, 1], 'Array(UInt16)'));\n+SELECT arrayDifference( cast([10, 1], 'Array(UInt32)'));\n+SELECT arrayDifference( cast([10, 1], 'Array(UInt64)'));\n",
  "problem_statement": "arrayDifference function didn't get expected result on type UInt32\nClickhouse Server version: 22.3.2.1 and 21.6.5.37\r\n\r\nMinimal Reproducible Code: \r\n`select\r\n\tarrayJoin(arrayDifference(groupArray(nb))) as res\r\nfrom\r\n\t(\r\nselect\r\n\t\ttoUInt32(number % 11) as nb\r\n\tfrom\r\n\t\tnumbers(100))`\r\n\r\nWhen I using arrayDifference function on an array of UInt32 elements, I get huge numbers around 2^32 instead of expected negative numbers.   \r\nThe same function works properly on Uint8, Uint16 and even Uint64.\r\n\r\nAnd also I found \r\n> `The type of elements in the resulting array is determined by the type inference rules for subtraction (e.g. UInt8 - UInt8 = Int16).`\r\n\r\nin document at [https://clickhouse.com/docs/en/sql-reference/functions/array-functions/#arraydifference](url)\r\n\r\nSo it seems like an unexpected result, but I'm not sure. Hoping for your anwser! \n",
  "hints_text": "```sql\r\n21.2\r\nselect arrayDifference( cast([10, 1], 'Array(UInt32)') ); \r\n[0,-9]\r\n\r\n21.3\r\nselect arrayDifference( cast([10, 1], 'Array(UInt32)') ); \r\n[0,4294967287]\r\n```",
  "created_at": "2022-08-14T08:17:13Z"
}