{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 36564,
  "instance_id": "ClickHouse__ClickHouse-36564",
  "issue_numbers": [
    "36558"
  ],
  "base_commit": "9621d443459f0549bf4cb9ea181d381d36034728",
  "patch": "diff --git a/src/Functions/FunctionsConversion.h b/src/Functions/FunctionsConversion.h\nindex 624e3ed9c238..e70647e3d789 100644\n--- a/src/Functions/FunctionsConversion.h\n+++ b/src/Functions/FunctionsConversion.h\n@@ -3283,6 +3283,19 @@ class FunctionCast final : public FunctionCastBase\n                 return res;\n             };\n         }\n+        else if (checkAndGetDataType<DataTypeObject>(from_type.get()))\n+        {\n+            return [is_nullable = to_type->hasNullableSubcolumns()] (ColumnsWithTypeAndName & arguments, const DataTypePtr & , const ColumnNullable * , size_t) -> ColumnPtr\n+            {\n+                auto & column_object = assert_cast<const ColumnObject &>(*arguments.front().column);\n+                auto res = ColumnObject::create(is_nullable);\n+                for (size_t i = 0; i < column_object.size(); i++)\n+                    res->insert(column_object[i]);\n+\n+                res->finalize();\n+                return res;\n+            };\n+        }\n \n         throw Exception(ErrorCodes::TYPE_MISMATCH,\n             \"Cast to Object can be performed only from flatten named Tuple, Map or String. Got: {}\", from_type->getName());\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02287_type_object_convert.reference b/tests/queries/0_stateless/02287_type_object_convert.reference\nnew file mode 100644\nindex 000000000000..e8064176db13\n--- /dev/null\n+++ b/tests/queries/0_stateless/02287_type_object_convert.reference\n@@ -0,0 +1,14 @@\n+1\t(1)\tTuple(x Nullable(Int8))\n+1\t(1,NULL)\tTuple(x Nullable(Int8), y Nullable(Int8))\n+2\t(NULL,2)\tTuple(x Nullable(Int8), y Nullable(Int8))\n+1\t(1,NULL)\tTuple(x Nullable(Int8), y Nullable(Int8))\n+2\t(NULL,2)\tTuple(x Nullable(Int8), y Nullable(Int8))\n+3\t(1,2)\tTuple(x Nullable(Int8), y Nullable(Int8))\n+1\t1\t\\N\n+2\t\\N\t2\n+3\t1\t2\n+1\t(1)\tTuple(x Int8)\n+1\t(1,0)\tTuple(x Int8, y Int8)\n+2\t(0,2)\tTuple(x Int8, y Int8)\n+{\"x\":1}\n+{\"x\":1}\ndiff --git a/tests/queries/0_stateless/02287_type_object_convert.sql b/tests/queries/0_stateless/02287_type_object_convert.sql\nnew file mode 100644\nindex 000000000000..53d456dba65e\n--- /dev/null\n+++ b/tests/queries/0_stateless/02287_type_object_convert.sql\n@@ -0,0 +1,30 @@\n+-- Tags: no-fasttest\n+\n+SET allow_experimental_object_type = 1;\n+\n+DROP TABLE IF EXISTS t_object_convert;\n+\n+CREATE TABLE t_object_convert(id UInt64, data Object(Nullable('JSON'))) Engine=Memory;\n+\n+INSERT INTO t_object_convert SELECT 1, CAST(CAST('{\"x\" : 1}', 'Object(\\'json\\')'), 'Object(Nullable(\\'json\\'))');\n+SELECT id, data, toTypeName(data) FROM t_object_convert ORDER BY id;\n+INSERT INTO t_object_convert SELECT 2, CAST(CAST('{\"y\" : 2}', 'Object(\\'json\\')'), 'Object(Nullable(\\'json\\'))');\n+SELECT id, data, toTypeName(data) FROM t_object_convert ORDER BY id;\n+INSERT INTO t_object_convert FORMAT JSONEachRow {\"id\": 3, \"data\": {\"x\": 1, \"y\" : 2}};\n+\n+SELECT id, data, toTypeName(data) FROM t_object_convert ORDER BY id;\n+SELECT id, data.x, data.y FROM t_object_convert ORDER BY id;\n+\n+\n+CREATE TABLE t_object_convert2(id UInt64, data Object('JSON')) Engine=Memory;\n+\n+INSERT INTO t_object_convert2 SELECT 1, CAST(CAST('{\"x\" : 1}', 'Object(\\'json\\')'), 'Object(Nullable(\\'json\\'))');\n+SELECT id, data, toTypeName(data) FROM t_object_convert2 ORDER BY id;\n+INSERT INTO t_object_convert2 SELECT 2, CAST(CAST('{\"y\" : 2}', 'Object(\\'json\\')'), 'Object(Nullable(\\'json\\'))');\n+SELECT id, data, toTypeName(data) FROM t_object_convert2 ORDER BY id;\n+\n+DROP TABLE t_object_convert;\n+DROP TABLE t_object_convert2;\n+\n+select CAST(CAST('{\"x\" : 1}', 'Object(\\'json\\')'), 'Object(Nullable(\\'json\\'))');\n+select CAST(CAST('{\"x\" : 1}', 'Object(Nullable(\\'json\\'))'), 'Object(\\'json\\')');\n",
  "problem_statement": "CAST Object to Object with Nullable subcolumns doesn't work\nI expect it should work:\r\n```\r\n:) select CAST(CAST('{\"x\" : 1}', 'Object(\\'json\\')'), 'Object(Nullable(\\'json\\'))')\r\n\r\nSELECT CAST(CAST('{\"x\" : 1}', 'Object(\\'json\\')'), 'Object(Nullable(\\'json\\'))')\r\n\r\nQuery id: fb057b45-b72a-4d22-9b38-a3136cdf2465\r\n\r\n\r\n0 rows in set. Elapsed: 0.002 sec.\r\n\r\nReceived exception from server (version 22.5.1):\r\nCode: 53. DB::Exception: Received from localhost:9000. DB::Exception: Cast to Object can be performed only from flatten named Tuple, Map or String. Got: Object('json'): While processing CAST(CAST('{\"x\" : 1}', 'Object(\\'json\\')'), 'Object(Nullable(\\'json\\'))'). (TYPE_MISMATCH)\r\n```\r\n\r\n@CurtizJ what do you think?\n",
  "hints_text": "Need to fix it. It's quite easy, BTW.",
  "created_at": "2022-04-23T06:49:47Z"
}