You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Logical error: 'Bad cast from type DB::ColumnArray to DB::ColumnVector<float>' in `02895_npy_format`
```
    ~/ch/logs  ./clickhouse local -q "select * from file('/home/tavplubix/ch/ClickHouse/tests/queries/0_stateless/data_npy/one_dim_float.npy', Npy, 'value Array(Float32)')"                                                                                              ✔  11s  
2024.07.12 18:55:50.247333 [ 338549 ] {2202c19e-5f0f-4ea1-96ce-de4ba29dcd76} <Fatal> : Logical error: 'Bad cast from type DB::ColumnArray to DB::ColumnVector<float>'.
2024.07.12 18:55:50.704358 [ 338549 ] {2202c19e-5f0f-4ea1-96ce-de4ba29dcd76} <Fatal> : Stack trace (when copying this message, always include the lines below):

0. ./contrib/llvm-project/libcxx/include/exception:141: Poco::Exception::Exception(String const&, int) @ 0x000000001debd9a3
1. ./build_docker/./src/Common/Exception.cpp:110: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000f7bf0d5
2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x00000000073cb380
3. DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x00000000073cd666
4. DB::ColumnVector<float>& assert_cast<DB::ColumnVector<float>&, DB::IColumn&>(DB::IColumn&) @ 0x0000000009e1ee02
5. ./build_docker/./src/Processors/Formats/Impl/NpyRowInputFormat.cpp:325: void DB::NpyRowInputFormat::readAndInsertFloat<float>(DB::IColumn*, std::shared_ptr<DB::IDataType const> const&, NumpyDataType const&) @ 0x0000000019ed3b33
6. ./build_docker/./src/Processors/Formats/Impl/NpyRowInputFormat.cpp:419: DB::NpyRowInputFormat::readValue(DB::IColumn*) @ 0x0000000019ecd010
7. ./build_docker/./src/Processors/Formats/Impl/NpyRowInputFormat.cpp:449: DB::NpyRowInputFormat::readRow(std::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn>>>&, DB::RowReadExtension&) @ 0x0000000019ecd7bb
8. ./build_docker/./src/Processors/Formats/IRowInputFormat.cpp:0: DB::IRowInputFormat::read() @ 0x0000000019d863c4
9. ./build_docker/./src/Processors/Formats/IInputFormat.cpp:19: DB::IInputFormat::generate() @ 0x0000000019cfa255
10. ./src/Processors/Chunk.h:90: DB::ISource::tryGenerate() @ 0x0000000019cc82d5
11. ./contrib/llvm-project/libcxx/include/optional:344: DB::ISource::work() @ 0x0000000019cc7d0b
12. ./contrib/llvm-project/libcxx/include/list:588: DB::ExecutionThreadContext::executeTask() @ 0x0000000019cec6ea
13. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:272: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000019cddb83
14. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:149: DB::PipelineExecutor::executeStep(std::atomic<bool>*) @ 0x0000000019cdd546
15. ./build_docker/./src/Processors/Executors/PullingPipelineExecutor.cpp:54: DB::PullingPipelineExecutor::pull(DB::Chunk&) @ 0x0000000019cf281f
16. ./build_docker/./src/Storages/StorageFile.cpp:1440: DB::StorageFileSource::generate() @ 0x0000000018c710dc
17. ./src/Processors/Chunk.h:90: DB::ISource::tryGenerate() @ 0x0000000019cc82d5
18. ./contrib/llvm-project/libcxx/include/optional:344: DB::ISource::work() @ 0x0000000019cc7d0b
19. ./contrib/llvm-project/libcxx/include/list:588: DB::ExecutionThreadContext::executeTask() @ 0x0000000019cec6ea
20. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:272: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000019cddb83
21. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:380: void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads()::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x0000000019cdec93
22. ./base/base/../base/wide_integer_impl.h:817: ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::worker(std::__list_iterator<ThreadFromGlobalPoolImpl<false, true>, void*>) @ 0x000000000f8ae5bc
23. ./build_docker/./src/Common/ThreadPool.cpp:0: ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'()::operator()() @ 0x000000000f8b2ec3
24. ./contrib/llvm-project/libcxx/include/__functional/function.h:717: ? @ 0x000000000f8b2e02
25. ./base/base/../base/wide_integer_impl.h:817: ThreadPoolImpl<std::thread>::worker(std::__list_iterator<std::thread, void*>) @ 0x000000000f8aa5e4
26. ./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:302: void* std::__thread_proxy[abi:v15007]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>>(void*) @ 0x000000000f8b0cb2
27. __tsan_thread_start_func @ 0x0000000007343f2f
28. ? @ 0x00007f91fd8b31cf
29. ? @ 0x00007f91fd9346ec

zsh: IOT instruction (core dumped)  ./clickhouse local -q
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
