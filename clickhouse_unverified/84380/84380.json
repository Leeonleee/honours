{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 84380,
  "instance_id": "ClickHouse__ClickHouse-84380",
  "issue_numbers": [
    "84367"
  ],
  "base_commit": "685c6d4508b48f8e84aad5706894d8e0ff18d7a8",
  "patch": "diff --git a/src/Interpreters/MutationsInterpreter.cpp b/src/Interpreters/MutationsInterpreter.cpp\nindex 1d4b9486cb06..c2dde0ced41c 100644\n--- a/src/Interpreters/MutationsInterpreter.cpp\n+++ b/src/Interpreters/MutationsInterpreter.cpp\n@@ -344,6 +344,11 @@ MergeTreeData::DataPartPtr MutationsInterpreter::Source::getMergeTreeDataPart()\n     return part;\n }\n \n+bool MutationsInterpreter::Source::isMutatingDataPart() const\n+{\n+    return part != nullptr;\n+}\n+\n bool MutationsInterpreter::Source::supportsLightweightDelete() const\n {\n     if (part)\n@@ -1194,7 +1199,7 @@ void MutationsInterpreter::prepareMutationStages(std::vector<Stage> & prepared_s\n \n     /// Add persistent virtual columns if the whole part is rewritten,\n     /// because we should preserve them in parts after mutation.\n-    if (prepared_stages.back().isAffectingAllColumns(storage_columns))\n+    if (source.isMutatingDataPart() && prepared_stages.back().isAffectingAllColumns(storage_columns))\n     {\n         for (const auto & column_name : available_columns)\n         {\ndiff --git a/src/Interpreters/MutationsInterpreter.h b/src/Interpreters/MutationsInterpreter.h\nindex 79e32f384f04..67e762f2b5b7 100644\n--- a/src/Interpreters/MutationsInterpreter.h\n+++ b/src/Interpreters/MutationsInterpreter.h\n@@ -133,6 +133,7 @@ class MutationsInterpreter\n         const MergeTreeData * getMergeTreeData() const;\n         AlterConversionsPtr getAlterConversions() const { return alter_conversions; }\n         MergeTreeData::DataPartPtr getMergeTreeDataPart() const;\n+        bool isMutatingDataPart() const;\n \n         bool supportsLightweightDelete() const;\n         bool materializeTTLRecalculateOnly() const;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03100_lwu_37_update_all_columns.reference b/tests/queries/0_stateless/03100_lwu_37_update_all_columns.reference\nnew file mode 100644\nindex 000000000000..d00491fd7e5b\n--- /dev/null\n+++ b/tests/queries/0_stateless/03100_lwu_37_update_all_columns.reference\n@@ -0,0 +1,1 @@\n+1\ndiff --git a/tests/queries/0_stateless/03100_lwu_37_update_all_columns.sql b/tests/queries/0_stateless/03100_lwu_37_update_all_columns.sql\nnew file mode 100644\nindex 000000000000..1e85178389b5\n--- /dev/null\n+++ b/tests/queries/0_stateless/03100_lwu_37_update_all_columns.sql\n@@ -0,0 +1,10 @@\n+DROP TABLE IF EXISTS t0;\n+CREATE TABLE t0 (c0 Int) ENGINE = MergeTree() ORDER BY tuple() SETTINGS enable_block_number_column = 1, enable_block_offset_column = 1;\n+\n+INSERT INTO TABLE t0 (c0) VALUES (0);\n+\n+SET allow_experimental_lightweight_update = 1;\n+UPDATE t0 SET c0 = 1 WHERE 1;\n+SELECT c0 FROM t0 ORDER BY c0;\n+\n+DROP TABLE IF EXISTS t0;\n",
  "problem_statement": "Logical Error: Virtual column _distance must be filled by range reader with LWU\n### Describe the bug\n\nEasy to reproduce.\n\n### How to reproduce\n\nRun Fiddle: https://fiddle.clickhouse.com/95cbec9d-639f-4c0c-81b4-c77b1b30ae7d\n\n### Error message and/or stacktrace\n\nStack trace:\n\n```\n<Fatal> : Logical error: 'Virtual column _distance must be filled by range reader'.\n<Fatal> : Stack trace (when copying this message, always include the lines below):\n\n0. contrib/llvm-project/libcxx/include/__exception/exception.h:113: Poco::Exception::Exception(String const&, int) @ 0x000000002663c8f2\n1. src/Common/Exception.cpp:115: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000140c1fe6\n2. src/Common/Exception.h:119: DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cdb55ac\n3. src/Common/Exception.h:137: DB::Exception::Exception<String const&>(int, FormatStringHelperImpl<std::type_identity<String const&>::type>, String const&) @ 0x000000000df53036\n4. src/Storages/MergeTree/IMergeTreeReader.cpp:111: DB::IMergeTreeReader::fillVirtualColumns(std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&, unsigned long) const @ 0x000000001ddab777\n5. src/Storages/MergeTree/MergeTreeReadersChain.cpp:122: DB::MergeTreeReadersChain::executeActionsBeforePrewhere(DB::MergeTreeRangeReader::ReadResult&, std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&, DB::MergeTreeRangeReader&, DB::Block const&, unsigned long) const @ 0x000000001e075d17\n6. src/Storages/MergeTree/MergeTreeReadersChain.cpp:75: DB::MergeTreeReadersChain::read(unsigned long, DB::MarkRanges&, std::vector<DB::MarkRanges, std::allocator<DB::MarkRanges>>&) @ 0x000000001e07504e\n7. src/Storages/MergeTree/MergeTreeReadTask.cpp:229: DB::MergeTreeReadTask::read() @ 0x000000001e072433\n8. src/Storages/MergeTree/MergeTreeSelectAlgorithms.h:53: DB::MergeTreeInOrderSelectAlgorithm::readFromTask(DB::MergeTreeReadTask&) @ 0x000000001ebd984c\n9. src/Storages/MergeTree/MergeTreeSelectProcessor.cpp:228: DB::MergeTreeSelectProcessor::read() @ 0x000000001e081045\n10. src/Storages/MergeTree/MergeTreeSource.cpp:229: DB::MergeTreeSource::tryGenerate() @ 0x000000001ebc45a9\n11. src/Processors/ISource.cpp:110: DB::ISource::work() @ 0x000000001e60ccc2\n12. src/Processors/Executors/ExecutionThreadContext.cpp:53: DB::ExecutionThreadContext::executeTask() @ 0x000000001e6296d0\n13. src/Processors/Executors/PipelineExecutor.cpp:350: DB::PipelineExecutor::executeStepImpl(unsigned long, DB::IAcquiredSlot*, std::atomic<bool>*) @ 0x000000001e61c685\n14. src/Processors/Executors/PipelineExecutor.cpp:278: DB::PipelineExecutor::executeSingleThread(unsigned long, DB::IAcquiredSlot*) @ 0x000000001e61cbe9\n15. src/Processors/Executors/PipelineExecutor.cpp:598: DB::PipelineExecutor::executeImpl(unsigned long, bool) @ 0x000000001e61b121\n16. src/Processors/Executors/PipelineExecutor.cpp:136: DB::PipelineExecutor::execute(unsigned long, bool) @ 0x000000001e61a83f\n17. src/Processors/Executors/CompletedPipelineExecutor.cpp:42: void std::__function::__policy_invoker<void ()>::__call_impl[abi:se190107]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::CompletedPipelineExecutor::execute()::$_0>(DB::CompletedPipelineExecutor::execute()::$_0&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000001e619ad7\n18. contrib/llvm-project/libcxx/include/__functional/function.h:716: ? @ 0x00000000142059a6\n19. contrib/llvm-project/libcxx/include/__type_traits/invoke.h:117: void* std::__thread_proxy[abi:se190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000001420c3c0\n20. start_thread @ 0x00000000000a27f1\n21. __GI___clone3 @ 0x0000000000133c9c\n```\n",
  "hints_text": "",
  "created_at": "2025-07-24T12:54:03Z"
}