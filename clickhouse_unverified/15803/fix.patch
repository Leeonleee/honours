diff --git a/src/Functions/logTrace.cpp b/src/Functions/logTrace.cpp
new file mode 100644
index 000000000000..f89786b9bda7
--- /dev/null
+++ b/src/Functions/logTrace.cpp
@@ -0,0 +1,62 @@
+#include <Columns/ColumnConst.h>
+#include <Columns/ColumnString.h>
+#include <DataTypes/DataTypeString.h>
+#include <DataTypes/DataTypesNumber.h>
+#include <Functions/FunctionFactory.h>
+#include <Functions/FunctionHelpers.h>
+#include <Functions/IFunctionImpl.h>
+
+#include <common/logger_useful.h>
+
+namespace DB
+{
+namespace ErrorCodes
+{
+    extern const int ILLEGAL_TYPE_OF_ARGUMENT;
+}
+
+namespace
+{
+    class FunctionLogTrace : public IFunction
+    {
+    public:
+        static constexpr auto name = "logTrace";
+        static FunctionPtr create(const Context &) { return std::make_shared<FunctionLogTrace>(); }
+
+        String getName() const override { return name; }
+
+        size_t getNumberOfArguments() const override { return 1; }
+
+        DataTypePtr getReturnTypeImpl(const DataTypes & arguments) const override
+        {
+            if (!isString(arguments[0]))
+                throw Exception(
+                    "Illegal type " + arguments[0]->getName() + " of argument of function " + getName(),
+                    ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);
+            return std::make_shared<DataTypeUInt8>();
+        }
+
+        void executeImpl(Block & block, const ColumnNumbers & arguments, size_t result, size_t input_rows_count) const override
+        {
+            String message;
+            if (const ColumnConst * col = checkAndGetColumnConst<ColumnString>(block.getByPosition(arguments[0]).column.get()))
+                message = col->getDataAt(0).data;
+            else
+                throw Exception(
+                    "First argument for function " + getName() + " must be Constant string", ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);
+
+            static auto * log = &Poco::Logger::get("FunctionLogTrace");
+            LOG_TRACE(log, message);
+
+            block.getByPosition(result).column = DataTypeUInt8().createColumnConst(input_rows_count, 0);
+        }
+    };
+
+}
+
+void registerFunctionLogTrace(FunctionFactory & factory)
+{
+    factory.registerFunction<FunctionLogTrace>();
+}
+
+}
diff --git a/src/Functions/registerFunctions.cpp b/src/Functions/registerFunctions.cpp
index 804ceb4d309a..f70b712564f0 100644
--- a/src/Functions/registerFunctions.cpp
+++ b/src/Functions/registerFunctions.cpp
@@ -3,7 +3,6 @@
 
 namespace DB
 {
-
 void registerFunctionsArithmetic(FunctionFactory &);
 void registerFunctionsArray(FunctionFactory &);
 void registerFunctionsTuple(FunctionFactory &);
@@ -41,6 +40,8 @@ void registerFunctionsUnixTimestamp64(FunctionFactory & factory);
 #if !defined(ARCADIA_BUILD)
 void registerFunctionBayesAB(FunctionFactory &);
 #endif
+void registerFunctionTid(FunctionFactory & factory);
+void registerFunctionLogTrace(FunctionFactory & factory);
 
 
 void registerFunctions()
@@ -86,6 +87,8 @@ void registerFunctions()
 #if !defined(ARCADIA_BUILD)
     registerFunctionBayesAB(factory);
 #endif
+    registerFunctionTid(factory);
+    registerFunctionLogTrace(factory);
 }
 
 }
diff --git a/src/Functions/tid.cpp b/src/Functions/tid.cpp
new file mode 100644
index 000000000000..1f41f959b2ad
--- /dev/null
+++ b/src/Functions/tid.cpp
@@ -0,0 +1,38 @@
+#include <DataTypes/DataTypesNumber.h>
+#include <Functions/FunctionFactory.h>
+#include <Functions/FunctionHelpers.h>
+#include <Functions/IFunctionImpl.h>
+
+#include <common/getThreadId.h>
+
+namespace DB
+{
+namespace
+{
+    class FunctionTid : public IFunction
+    {
+    public:
+        static constexpr auto name = "tid";
+        static FunctionPtr create(const Context &) { return std::make_shared<FunctionTid>(); }
+
+        String getName() const override { return name; }
+
+        size_t getNumberOfArguments() const override { return 0; }
+
+        DataTypePtr getReturnTypeImpl(const DataTypes &) const override { return std::make_shared<DataTypeUInt64>(); }
+
+        void executeImpl(Block & block, const ColumnNumbers &, size_t result, size_t input_rows_count) const override
+        {
+            auto current_tid = getThreadId();
+            block.getByPosition(result).column = DataTypeUInt64().createColumnConst(input_rows_count, current_tid);
+        }
+    };
+
+}
+
+void registerFunctionTid(FunctionFactory & factory)
+{
+    factory.registerFunction<FunctionTid>();
+}
+
+}
diff --git a/src/Functions/ya.make b/src/Functions/ya.make
index 97847b99bf67..f694b722a70d 100644
--- a/src/Functions/ya.make
+++ b/src/Functions/ya.make
@@ -267,6 +267,7 @@ SRCS(
     log10.cpp
     log2.cpp
     log.cpp
+    logTrace.cpp
     lowCardinalityIndices.cpp
     lowCardinalityKeys.cpp
     lower.cpp
@@ -388,6 +389,7 @@ SRCS(
     TargetSpecific.cpp
     tgamma.cpp
     throwIf.cpp
+    tid.cpp
     timeSlot.cpp
     timeSlots.cpp
     timezone.cpp
