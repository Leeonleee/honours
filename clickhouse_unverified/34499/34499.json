{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 34499,
  "instance_id": "ClickHouse__ClickHouse-34499",
  "issue_numbers": [
    "34362"
  ],
  "base_commit": "738355b724871d9b172f462706a36bba84a79e7a",
  "patch": "diff --git a/src/Server/GRPCServer.cpp b/src/Server/GRPCServer.cpp\nindex 10bbce249130..eeaf5b32a927 100644\n--- a/src/Server/GRPCServer.cpp\n+++ b/src/Server/GRPCServer.cpp\n@@ -642,6 +642,9 @@ namespace\n         void throwIfFailedToReadQueryInfo();\n         bool isQueryCancelled();\n \n+        void addQueryDetailsToResult();\n+        void addOutputFormatToResult();\n+        void addOutputColumnsNamesAndTypesToResult(const Block & headers);\n         void addProgressToResult();\n         void addTotalsToResult(const Block & totals);\n         void addExtremesToResult(const Block & extremes);\n@@ -667,6 +670,7 @@ namespace\n         CompressionMethod input_compression_method = CompressionMethod::None;\n         PODArray<char> output;\n         String output_format;\n+        bool send_output_columns_names_and_types = false;\n         CompressionMethod output_compression_method = CompressionMethod::None;\n         int output_compression_level = 0;\n \n@@ -888,6 +892,8 @@ namespace\n         if (output_format.empty())\n             output_format = query_context->getDefaultFormat();\n \n+        send_output_columns_names_and_types = query_info.send_output_columns();\n+\n         /// Choose compression.\n         String input_compression_method_str = query_info.input_compression_type();\n         if (input_compression_method_str.empty())\n@@ -1150,6 +1156,9 @@ namespace\n \n     void Call::generateOutput()\n     {\n+        /// We add query_id and time_zone to the first result anyway.\n+        addQueryDetailsToResult();\n+\n         if (!io.pipeline.initialized() || io.pipeline.pushing())\n             return;\n \n@@ -1189,6 +1198,9 @@ namespace\n                 return true;\n             };\n \n+            addOutputFormatToResult();\n+            addOutputColumnsNamesAndTypesToResult(header);\n+\n             Block block;\n             while (check_for_cancel())\n             {\n@@ -1439,6 +1451,29 @@ namespace\n         return false;\n     }\n \n+    void Call::addQueryDetailsToResult()\n+    {\n+        *result.mutable_query_id() = query_context->getClientInfo().current_query_id;\n+        *result.mutable_time_zone() = DateLUT::instance().getTimeZone();\n+    }\n+\n+    void Call::addOutputFormatToResult()\n+    {\n+        *result.mutable_output_format() = output_format;\n+    }\n+\n+    void Call::addOutputColumnsNamesAndTypesToResult(const Block & header)\n+    {\n+        if (!send_output_columns_names_and_types)\n+            return;\n+        for (const auto & column : header)\n+        {\n+            auto & name_and_type = *result.add_output_columns();\n+            *name_and_type.mutable_name() = column.name;\n+            *name_and_type.mutable_type() = column.type->getName();\n+        }\n+    }\n+\n     void Call::addProgressToResult()\n     {\n         auto values = progress.fetchAndResetPiecewiseAtomically();\ndiff --git a/src/Server/grpc_protos/clickhouse_grpc.proto b/src/Server/grpc_protos/clickhouse_grpc.proto\nindex f596c3b7d6db..4593cfff0960 100644\n--- a/src/Server/grpc_protos/clickhouse_grpc.proto\n+++ b/src/Server/grpc_protos/clickhouse_grpc.proto\n@@ -82,6 +82,9 @@ message QueryInfo {\n    // Default output format. If not specified, 'TabSeparated' is used.\n    string output_format = 7;\n \n+   // Set it if you want the names and the types of output columns to be sent to the client.\n+   bool send_output_columns = 24;\n+\n    repeated ExternalTable external_tables = 8;\n \n    string user_name = 9;\n@@ -187,7 +190,17 @@ message Exception {\n \n // Result of execution of a query which is sent back by the ClickHouse server to the client.\n message Result {\n-   // Output of the query, represented in the `output_format` or in a format specified in `query`.\n+   string query_id = 9;\n+   string time_zone = 10;\n+   \n+   // The format in which `output`, `totals` and `extremes` are written.\n+   // It's either the same as `output_format` specified in `QueryInfo` or the format specified in the query itself.\n+   string output_format = 11;\n+\n+   // The names and types of columns of the result written in `output`.\n+   repeated NameAndType output_columns = 12;\n+\n+   // Output of the query, represented in the `output_format`.\n    bytes output = 1;\n    bytes totals = 2;\n    bytes extremes = 3;\n",
  "test_patch": "diff --git a/tests/integration/test_grpc_protocol/test.py b/tests/integration/test_grpc_protocol/test.py\nindex 65ee3cb42618..bd9a0cbe438e 100644\n--- a/tests/integration/test_grpc_protocol/test.py\n+++ b/tests/integration/test_grpc_protocol/test.py\n@@ -2,6 +2,8 @@\n import pytest\n import sys\n import time\n+import pytz\n+import uuid\n import grpc\n from helpers.cluster import ClickHouseCluster, run_and_check\n from threading import Thread\n@@ -43,8 +45,8 @@ def create_channel():\n         main_channel = channel\n     return channel\n \n-def query_common(query_text, settings={}, input_data=[], input_data_delimiter='', output_format='TabSeparated', external_tables=[],\n-                 user_name='', password='', query_id='123', session_id='', stream_output=False, channel=None):\n+def query_common(query_text, settings={}, input_data=[], input_data_delimiter='', output_format='TabSeparated', send_output_columns=False,\n+                 external_tables=[], user_name='', password='', query_id='123', session_id='', stream_output=False, channel=None):\n     if type(input_data) is not list:\n         input_data = [input_data]\n     if type(input_data_delimiter) is str:\n@@ -58,7 +60,8 @@ def query_info():\n             input_data_part = input_data_part.encode(DEFAULT_ENCODING)\n         return clickhouse_grpc_pb2.QueryInfo(query=query_text, settings=settings, input_data=input_data_part,\n                                              input_data_delimiter=input_data_delimiter, output_format=output_format,\n-                                             external_tables=external_tables, user_name=user_name, password=password, query_id=query_id,\n+                                             send_output_columns=send_output_columns, external_tables=external_tables,\n+                                             user_name=user_name, password=password, query_id=query_id,\n                                              session_id=session_id, next_query_info=bool(input_data))\n     def send_query_info():\n         yield query_info()\n@@ -204,6 +207,28 @@ def test_totals_and_extremes():\n     assert query(\"SELECT x, y FROM t\") == \"1\\t2\\n2\\t4\\n3\\t2\\n3\\t3\\n3\\t4\\n\"\n     assert query_and_get_extremes(\"SELECT x, y FROM t\", settings={\"extremes\": \"1\"}) == \"1\\t2\\n3\\t4\\n\"\n \n+def test_get_query_details():\n+    result = list(query_no_errors(\"CREATE TABLE t (a UInt8) ENGINE = Memory\", query_id = '123'))[0]\n+    assert result.query_id == '123'\n+    pytz.timezone(result.time_zone)\n+    assert result.output_format == ''\n+    assert len(result.output_columns) == 0\n+    assert result.output == b''\n+    #\n+    result = list(query_no_errors(\"SELECT 'a', 1\", query_id = '', output_format = 'TabSeparated'))[0]\n+    uuid.UUID(result.query_id)\n+    pytz.timezone(result.time_zone)\n+    assert result.output_format == 'TabSeparated'\n+    assert len(result.output_columns) == 0\n+    assert result.output == b'a\\t1\\n'\n+    #\n+    result = list(query_no_errors(\"SELECT 'a' AS x, 1 FORMAT JSONEachRow\", query_id = '', send_output_columns=True))[0]\n+    uuid.UUID(result.query_id)\n+    pytz.timezone(result.time_zone)\n+    assert result.output_format == 'JSONEachRow'\n+    assert ([(col.name, col.type) for col in result.output_columns]) == [('x', 'String'), ('1', 'UInt8')]\n+    assert result.output == b'{\"x\":\"a\",\"1\":1}\\n'\n+\n def test_errors_handling():\n     e = query_and_get_error(\"\")\n     #print(e)\n@@ -225,6 +250,9 @@ def test_logs():\n \n def test_progress():\n     results = query_no_errors(\"SELECT number, sleep(0.31) FROM numbers(8) SETTINGS max_block_size=2, interactive_delay=100000\", stream_output=True)\n+    for result in results:\n+        result.time_zone = ''\n+        result.query_id = ''\n     #print(results)\n     assert str(results) ==\\\n \"\"\"[progress {\n@@ -232,6 +260,7 @@ def test_progress():\n   read_bytes: 16\n   total_rows_to_read: 8\n }\n+output_format: \"TabSeparated\"\n , output: \"0\\\\t0\\\\n1\\\\t0\\\\n\"\n , progress {\n   read_rows: 2\n",
  "problem_statement": "Return format in gRPC response\nHi @vitlibar,\r\nIn http implementation, ClickHouse will return format of query result in header `X-ClickHouse-Format`. Can we return format in gRPC response as well? This helps client like JDBC driver for deserialization(without the need for parsing the query).\n",
  "hints_text": "",
  "created_at": "2022-02-10T14:12:29Z"
}