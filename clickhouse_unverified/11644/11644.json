{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 11644,
  "instance_id": "ClickHouse__ClickHouse-11644",
  "issue_numbers": [
    "11352"
  ],
  "base_commit": "f53da4d36b8c3a214567c935caed478edce08363",
  "patch": "diff --git a/programs/server/users.d/access_management.xml b/programs/server/users.d/access_management.xml\nnew file mode 100644\nindex 000000000000..7e799cb7b10d\n--- /dev/null\n+++ b/programs/server/users.d/access_management.xml\n@@ -0,0 +1,7 @@\n+<yandex>\n+    <users>\n+        <default>\n+            <access_management>1</access_management>\n+        </default>\n+    </users>\n+</yandex>\ndiff --git a/src/Interpreters/ExpressionAnalyzer.h b/src/Interpreters/ExpressionAnalyzer.h\nindex ed07ab3fe363..c69cb61162f1 100644\n--- a/src/Interpreters/ExpressionAnalyzer.h\n+++ b/src/Interpreters/ExpressionAnalyzer.h\n@@ -208,7 +208,9 @@ struct ExpressionAnalysisResult\n         const FilterInfoPtr & filter_info,\n         const Block & source_header);\n \n+    /// Filter for row-level security.\n     bool hasFilter() const { return filter_info.get(); }\n+\n     bool hasJoin() const { return before_join.get(); }\n     bool hasPrewhere() const { return prewhere_info.get(); }\n     bool hasWhere() const { return before_where.get(); }\ndiff --git a/src/Interpreters/InterpreterSelectQuery.cpp b/src/Interpreters/InterpreterSelectQuery.cpp\nindex f9072e6176a7..98cf36cc30b0 100644\n--- a/src/Interpreters/InterpreterSelectQuery.cpp\n+++ b/src/Interpreters/InterpreterSelectQuery.cpp\n@@ -94,7 +94,8 @@ namespace ErrorCodes\n }\n \n /// Assumes `storage` is set and the table filter (row-level security) is not empty.\n-String InterpreterSelectQuery::generateFilterActions(ExpressionActionsPtr & actions, const ASTPtr & row_policy_filter, const Names & prerequisite_columns) const\n+String InterpreterSelectQuery::generateFilterActions(\n+    ExpressionActionsPtr & actions, const ASTPtr & row_policy_filter, const Names & prerequisite_columns) const\n {\n     const auto & db_name = table_id.getDatabaseName();\n     const auto & table_name = table_id.getTableName();\n@@ -474,8 +475,7 @@ Block InterpreterSelectQuery::getSampleBlockImpl()\n             second_stage,\n             options.only_analyze,\n             filter_info,\n-            source_header\n-        );\n+            source_header);\n \n     if (options.to_stage == QueryProcessingStage::Enum::FetchColumns)\n     {\n@@ -979,10 +979,13 @@ void InterpreterSelectQuery::executeFetchColumns(\n \n     /// Optimization for trivial query like SELECT count() FROM table.\n     bool optimize_trivial_count =\n-        syntax_analyzer_result->optimize_trivial_count && storage &&\n-        processing_stage == QueryProcessingStage::FetchColumns &&\n-        query_analyzer->hasAggregation() && (query_analyzer->aggregates().size() == 1) &&\n-        typeid_cast<AggregateFunctionCount *>(query_analyzer->aggregates()[0].function.get());\n+        syntax_analyzer_result->optimize_trivial_count\n+        && storage\n+        && !filter_info\n+        && processing_stage == QueryProcessingStage::FetchColumns\n+        && query_analyzer->hasAggregation()\n+        && (query_analyzer->aggregates().size() == 1)\n+        && typeid_cast<AggregateFunctionCount *>(query_analyzer->aggregates()[0].function.get());\n \n     if (optimize_trivial_count)\n     {\ndiff --git a/src/Interpreters/InterpreterSelectQuery.h b/src/Interpreters/InterpreterSelectQuery.h\nindex 34d255e398e0..c60451d5f4aa 100644\n--- a/src/Interpreters/InterpreterSelectQuery.h\n+++ b/src/Interpreters/InterpreterSelectQuery.h\n@@ -132,7 +132,8 @@ class InterpreterSelectQuery : public IInterpreter\n     void executeSubqueriesInSetsAndJoins(QueryPipeline & pipeline, const std::unordered_map<String, SubqueryForSet> & subqueries_for_sets);\n     void executeMergeSorted(QueryPipeline & pipeline, const SortDescription & sort_description, UInt64 limit);\n \n-    String generateFilterActions(ExpressionActionsPtr & actions, const ASTPtr & row_policy_filter, const Names & prerequisite_columns = {}) const;\n+    String generateFilterActions(\n+        ExpressionActionsPtr & actions, const ASTPtr & row_policy_filter, const Names & prerequisite_columns = {}) const;\n \n     enum class Modificator\n     {\n@@ -159,6 +160,7 @@ class InterpreterSelectQuery : public IInterpreter\n \n     /// Is calculated in getSampleBlock. Is used later in readImpl.\n     ExpressionAnalysisResult analysis_result;\n+    /// For row-level security.\n     FilterInfoPtr filter_info;\n \n     QueryProcessingStage::Enum from_stage = QueryProcessingStage::FetchColumns;\ndiff --git a/src/Storages/MergeTree/ReplicatedMergeTreeBlockOutputStream.cpp b/src/Storages/MergeTree/ReplicatedMergeTreeBlockOutputStream.cpp\nindex c67ea11f56f6..1bbc56d940dc 100644\n--- a/src/Storages/MergeTree/ReplicatedMergeTreeBlockOutputStream.cpp\n+++ b/src/Storages/MergeTree/ReplicatedMergeTreeBlockOutputStream.cpp\n@@ -198,7 +198,8 @@ void ReplicatedMergeTreeBlockOutputStream::writeExistingPart(MergeTreeData::Muta\n }\n \n \n-void ReplicatedMergeTreeBlockOutputStream::commitPart(zkutil::ZooKeeperPtr & zookeeper, MergeTreeData::MutableDataPartPtr & part, const String & block_id)\n+void ReplicatedMergeTreeBlockOutputStream::commitPart(\n+    zkutil::ZooKeeperPtr & zookeeper, MergeTreeData::MutableDataPartPtr & part, const String & block_id)\n {\n     storage.check(part->getColumns());\n     assertSessionIsNotExpired(zookeeper);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01308_row_policy_and_trivial_count_query.reference b/tests/queries/0_stateless/01308_row_policy_and_trivial_count_query.reference\nnew file mode 100644\nindex 000000000000..61150aca43cf\n--- /dev/null\n+++ b/tests/queries/0_stateless/01308_row_policy_and_trivial_count_query.reference\n@@ -0,0 +1,3 @@\n+3\n+2\n+3\ndiff --git a/tests/queries/0_stateless/01308_row_policy_and_trivial_count_query.sql b/tests/queries/0_stateless/01308_row_policy_and_trivial_count_query.sql\nnew file mode 100644\nindex 000000000000..c105885cb604\n--- /dev/null\n+++ b/tests/queries/0_stateless/01308_row_policy_and_trivial_count_query.sql\n@@ -0,0 +1,12 @@\n+DROP TABLE IF EXISTS t;\n+\n+CREATE TABLE t (x UInt8) ENGINE = MergeTree ORDER BY x;\n+INSERT INTO t VALUES (1), (2), (3);\n+\n+SELECT count() FROM t;\n+CREATE ROW POLICY filter ON t USING (x % 2 = 1) TO ALL;\n+SELECT count() FROM t;\n+DROP ROW POLICY filter ON t;\n+SELECT count() FROM t;\n+\n+DROP TABLE t;\n",
  "problem_statement": "optimize_trivial_count_query ignores row-level security\n```\r\nselect count(*) from table1\r\n```\r\n\r\nreturns all rows of the table despite the fact that the table has row-level security enabled. \r\n\r\nSetting `optimize_trivial_count_query=0` resolves the issue.\r\n\r\nRelated: https://github.com/ClickHouse/ClickHouse/pull/7510 \r\n\r\n\n",
  "hints_text": "@vitlibar It's a simple task - just disable optimization if row-level security present.",
  "created_at": "2020-06-13T21:00:27Z"
}