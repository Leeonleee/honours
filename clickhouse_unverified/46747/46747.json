{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 46747,
  "instance_id": "ClickHouse__ClickHouse-46747",
  "issue_numbers": [
    "46733"
  ],
  "base_commit": "8e7533fa57ea00e14f1bab68a8b0ff91740a931f",
  "patch": "diff --git a/src/Compression/CompressionCodecT64.cpp b/src/Compression/CompressionCodecT64.cpp\nindex e718b24e8df9..e7f1615128a0 100644\n--- a/src/Compression/CompressionCodecT64.cpp\n+++ b/src/Compression/CompressionCodecT64.cpp\n@@ -88,6 +88,7 @@ enum class MagicNumber : uint8_t\n     Enum16      = 18,\n     Decimal32   = 19,\n     Decimal64   = 20,\n+    IPv4        = 21,\n };\n \n MagicNumber serializeTypeId(TypeIndex type_id)\n@@ -109,6 +110,7 @@ MagicNumber serializeTypeId(TypeIndex type_id)\n         case TypeIndex::Enum16:     return MagicNumber::Enum16;\n         case TypeIndex::Decimal32:  return MagicNumber::Decimal32;\n         case TypeIndex::Decimal64:  return MagicNumber::Decimal64;\n+        case TypeIndex::IPv4:       return MagicNumber::IPv4;\n         default:\n             break;\n     }\n@@ -136,6 +138,7 @@ TypeIndex deserializeTypeId(uint8_t serialized_type_id)\n         case MagicNumber::Enum16:       return TypeIndex::Enum16;\n         case MagicNumber::Decimal32:    return TypeIndex::Decimal32;\n         case MagicNumber::Decimal64:    return TypeIndex::Decimal64;\n+        case MagicNumber::IPv4:         return TypeIndex::IPv4;\n     }\n \n     throw Exception(ErrorCodes::LOGICAL_ERROR, \"Bad magic number in T64 codec: {}\", static_cast<UInt32>(serialized_type_id));\n@@ -171,6 +174,7 @@ TypeIndex baseType(TypeIndex type_idx)\n             return TypeIndex::UInt16;\n         case TypeIndex::UInt32:\n         case TypeIndex::DateTime:\n+        case TypeIndex::IPv4:\n             return TypeIndex::UInt32;\n         case TypeIndex::UInt64:\n             return TypeIndex::UInt64;\n@@ -198,6 +202,7 @@ TypeIndex typeIdx(const IDataType * data_type)\n         case TypeIndex::Date:\n         case TypeIndex::Int32:\n         case TypeIndex::UInt32:\n+        case TypeIndex::IPv4:\n         case TypeIndex::DateTime:\n         case TypeIndex::DateTime64:\n         case TypeIndex::Decimal32:\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/25338_ipv4_codec_t64.reference b/tests/queries/0_stateless/25338_ipv4_codec_t64.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/25338_ipv4_codec_t64.sql b/tests/queries/0_stateless/25338_ipv4_codec_t64.sql\nnew file mode 100644\nindex 000000000000..63a19cba5a24\n--- /dev/null\n+++ b/tests/queries/0_stateless/25338_ipv4_codec_t64.sql\n@@ -0,0 +1,3 @@\n+DROP TABLE IF EXISTS ipv4_t64;\n+CREATE TABLE ipv4_t64 (uid Int16, ip IPv4 CODEC(T64), INDEX ip_idx ip TYPE bloom_filter GRANULARITY 4) ENGINE=MergeTree ORDER BY uid;\n+DROP TABLE IF EXISTS ipv4_t64;\n",
  "problem_statement": "IPv4 Native Type Issues\nThe introduction of native IPv4 in release 23.1 (https://github.com/ClickHouse/ClickHouse/pull/43221) caused some backward compatability issues with:\r\n - T64 Codec\r\n - Bloom Filter for secondary (skip) index\r\n\r\nTo reproduce (https://fiddle.clickhouse.com/bf7da0b7-ec44-4bd1-978b-487dae5a62fd):\r\n\r\n```\r\nCREATE TABLE users (\r\n    uid Int16,\r\n    name String,\r\n    ip IPv4 CODEC(T64, ZSTD(1)),\r\n    INDEX ip_idx ip TYPE bloom_filter GRANULARITY 4)\r\nENGINE=MergeTree\r\nORDER BY uid;\r\n\r\nINSERT INTO users VALUES (1231, 'John', '1.1.1.1');\r\nINSERT INTO users VALUES (6666, 'Ksenia', '2.2.2.2');\r\nINSERT INTO users VALUES (8888, 'Alice', '3.3.3.3');\r\n\r\nSELECT * FROM users;\r\n```\r\n\r\nWill result in the following errors respectively:\r\n```\r\nReceived exception from server (version 23.1.3):\r\nCode: 431. DB::Exception: Received from localhost:9000. DB::Exception: T64 codec is not supported for specified type IPv4. (ILLEGAL_SYNTAX_FOR_CODEC_TYPE)\r\n```\r\n```\r\nReceived exception from server (version 23.1.3):\r\nCode: 44. DB::Exception: Received from localhost:9000. DB::Exception: Unexpected type IPv4 of bloom filter index.. (ILLEGAL_COLUMN)\r\n```\r\n\n",
  "hints_text": "",
  "created_at": "2023-02-22T19:29:10Z"
}