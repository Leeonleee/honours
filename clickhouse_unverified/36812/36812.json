{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 36812,
  "instance_id": "ClickHouse__ClickHouse-36812",
  "issue_numbers": [
    "36808"
  ],
  "base_commit": "6c75b639535eb8f7ce1a174811a64a2ad41d1625",
  "patch": "diff --git a/src/Functions/FunctionsHashing.h b/src/Functions/FunctionsHashing.h\nindex b78ecb5c72a4..750c247b5180 100644\n--- a/src/Functions/FunctionsHashing.h\n+++ b/src/Functions/FunctionsHashing.h\n@@ -987,7 +987,8 @@ class FunctionAnyHash : public IFunction\n             const size_t nested_size = nested_column->size();\n \n             typename ColumnVector<ToType>::Container vec_temp(nested_size);\n-            executeAny<true>(nested_type, nested_column, vec_temp);\n+            bool nested_is_first = true;\n+            executeForArgument(nested_type, nested_column, vec_temp, nested_is_first);\n \n             const size_t size = offsets.size();\n \n@@ -1058,8 +1059,7 @@ class FunctionAnyHash : public IFunction\n         else if (which.isString()) executeString<first>(icolumn, vec_to);\n         else if (which.isFixedString()) executeString<first>(icolumn, vec_to);\n         else if (which.isArray()) executeArray<first>(from_type, icolumn, vec_to);\n-        else\n-            executeGeneric<first>(icolumn, vec_to);\n+        else executeGeneric<first>(icolumn, vec_to);\n     }\n \n     void executeForArgument(const IDataType * type, const IColumn * column, typename ColumnVector<ToType>::Container & vec_to, bool & is_first) const\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02292_hash_array_tuples.reference b/tests/queries/0_stateless/02292_hash_array_tuples.reference\nnew file mode 100644\nindex 000000000000..52d52b54a5c9\n--- /dev/null\n+++ b/tests/queries/0_stateless/02292_hash_array_tuples.reference\n@@ -0,0 +1,5 @@\n+14617701568871014978\n+12913842429399915005\n+8351543757058688770\n+12732328028874882204\n+12371801021764949421\tArray(Tuple(UInt8, Array(Tuple(UInt8, Tuple(UInt8, UInt8, Array(Tuple(UInt8, UInt8)))))))\ndiff --git a/tests/queries/0_stateless/02292_hash_array_tuples.sql b/tests/queries/0_stateless/02292_hash_array_tuples.sql\nnew file mode 100644\nindex 000000000000..31c409dc6ba2\n--- /dev/null\n+++ b/tests/queries/0_stateless/02292_hash_array_tuples.sql\n@@ -0,0 +1,6 @@\n+SELECT cityHash64([(1, 'a'), (2, 'b')]);\n+SELECT cityHash64([(1, 'c'), (2, 'b')]);\n+SELECT sipHash64([(1, 'a'), (2, 'b')]);\n+SELECT murmurHash2_64([(1, 'a'), (2, 'b'), (3, 'c')]);\n+\n+SELECT cityHash64([(1, [(1, (3, 4, [(5, 6), (7, 8)]))]), (2, [])] AS c), toTypeName(c);\n",
  "problem_statement": "Hash functions are not supported for `Array(Tuple(...))` columns\n**Describe the unexpected behaviour**\r\nHash functions are not supported for `Array(Tuple(...))` columns:\r\n\r\n```sql\r\nSELECT cityHash64([(1, 2), (2, 3)])\r\n\r\nReceived exception from server (version 22.5.1):\r\nCode: 48. DB::Exception: Received from localhost:9000. DB::Exception: Method getDataAt is not supported for Tuple(UInt8, UInt8): While processing cityHash64([(1, 2), (2, 3)]). (NOT_IMPLEMENTED)\r\n```\n",
  "hints_text": "",
  "created_at": "2022-04-29T18:53:39Z",
  "modified_files": [
    "src/Functions/FunctionsHashing.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02292_hash_array_tuples.reference",
    "b/tests/queries/0_stateless/02292_hash_array_tuples.sql"
  ]
}