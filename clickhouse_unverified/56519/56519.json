{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 56519,
  "instance_id": "ClickHouse__ClickHouse-56519",
  "issue_numbers": [
    "56504"
  ],
  "base_commit": "139d8cea1334e38a157eb0583354ece3eb8e5fa7",
  "patch": "diff --git a/docs/en/operations/query-cache.md b/docs/en/operations/query-cache.md\nindex 665ae6cdfdca..def0f48b968e 100644\n--- a/docs/en/operations/query-cache.md\n+++ b/docs/en/operations/query-cache.md\n@@ -169,7 +169,12 @@ Also, results of queries with non-deterministic functions are not cached by defa\n   [`getMacro()`](../sql-reference/functions/other-functions.md#getMacro) etc.\n \n To force caching of results of queries with non-deterministic functions regardless, use setting\n-[query_cache_store_results_of_queries_with_nondeterministic_functions](settings/settings.md#query-cache-store-results-of-queries-with-nondeterministic-functions).\n+[query_cache_nondeterministic_function_handling](settings/settings.md#query-cache-nondeterministic-function-handling).\n+\n+:::note\n+Prior to ClickHouse v23.11, setting 'query_cache_store_results_of_queries_with_nondeterministic_functions = 0 / 1' controlled whether\n+results of queries with non-deterministic results were cached. In newer ClickHouse versions, this setting is obsolete and has no effect.\n+:::\n \n Finally, entries in the query cache are not shared between users due to security reasons. For example, user A must not be able to bypass a\n row policy on a table by running the same query as another user B for whom no such policy exists. However, if necessary, cache entries can\ndiff --git a/docs/en/operations/settings/settings.md b/docs/en/operations/settings/settings.md\nindex 2f3805e8e55e..d0acad7b5572 100644\n--- a/docs/en/operations/settings/settings.md\n+++ b/docs/en/operations/settings/settings.md\n@@ -1657,16 +1657,17 @@ Possible values:\n \n Default value: `1`.\n \n-## query_cache_store_results_of_queries_with_nondeterministic_functions {#query-cache-store-results-of-queries-with-nondeterministic-functions}\n+## query_cache_nondeterministic_function_handling {#query-cache-nondeterministic-function-handling}\n \n-If turned on, then results of `SELECT` queries with non-deterministic functions (e.g. `rand()`, `now()`) can be cached in the [query cache](../query-cache.md).\n+Controls how the [query cache](../query-cache.md) handles `SELECT` queries with non-deterministic functions like `rand()` or `now()`.\n \n Possible values:\n \n-- 0 - Disabled\n-- 1 - Enabled\n+- `'throw'` - Throw an exception and don't cache the query result.\n+- `'save'` - Cache the query result.\n+- `'ignore'` - Don't cache the query result and don't throw an exception.\n \n-Default value: `0`.\n+Default value: `throw`.\n \n ## query_cache_min_query_runs {#query-cache-min-query-runs}\n \ndiff --git a/docs/en/sql-reference/functions/date-time-functions.md b/docs/en/sql-reference/functions/date-time-functions.md\nindex 55d09be7847b..43f7c9cc61ea 100644\n--- a/docs/en/sql-reference/functions/date-time-functions.md\n+++ b/docs/en/sql-reference/functions/date-time-functions.md\n@@ -1381,7 +1381,7 @@ toStartOfFifteenMinutes(toDateTime('2023-04-21 10:20:00')): 2023-04-21 10:15:00\n toStartOfFifteenMinutes(toDateTime('2023-04-21 10:23:00')): 2023-04-21 10:15:00\n ```\n \n-## toStartOfInterval(time_or_data, INTERVAL x unit \\[, time_zone\\])\n+## toStartOfInterval(date_or_date_with_time, INTERVAL x unit \\[, time_zone\\])\n \n This function generalizes other `toStartOf*()` functions. For example,\n - `toStartOfInterval(t, INTERVAL 1 year)` returns the same as `toStartOfYear(t)`,\ndiff --git a/src/Common/ErrorCodes.cpp b/src/Common/ErrorCodes.cpp\nindex 28f8e6c60213..95ca49d27139 100644\n--- a/src/Common/ErrorCodes.cpp\n+++ b/src/Common/ErrorCodes.cpp\n@@ -583,7 +583,7 @@\n     M(701, CLUSTER_DOESNT_EXIST) \\\n     M(702, CLIENT_INFO_DOES_NOT_MATCH) \\\n     M(703, INVALID_IDENTIFIER) \\\n-    M(704, CANNOT_USE_QUERY_CACHE_WITH_NONDETERMINISTIC_FUNCTIONS) \\\n+    M(704, QUERY_CACHE_USED_WITH_NONDETERMINISTIC_FUNCTIONS) \\\n     M(705, TABLE_NOT_EMPTY) \\\n     M(706, LIBSSH_ERROR) \\\n     M(999, KEEPER_EXCEPTION) \\\ndiff --git a/src/Core/Settings.h b/src/Core/Settings.h\nindex 5c41c0b08294..4eb70edb8e25 100644\n--- a/src/Core/Settings.h\n+++ b/src/Core/Settings.h\n@@ -619,7 +619,7 @@ class IColumn;\n     M(Bool, use_query_cache, false, \"Enable the query cache\", 0) \\\n     M(Bool, enable_writes_to_query_cache, true, \"Enable storing results of SELECT queries in the query cache\", 0) \\\n     M(Bool, enable_reads_from_query_cache, true, \"Enable reading results of SELECT queries from the query cache\", 0) \\\n-    M(Bool, query_cache_store_results_of_queries_with_nondeterministic_functions, false, \"Store results of queries with non-deterministic functions (e.g. rand(), now()) in the query cache\", 0) \\\n+    M(QueryCacheNondeterministicFunctionHandling, query_cache_nondeterministic_function_handling, QueryCacheNondeterministicFunctionHandling::Throw, \"How the query cache handles queries with non-deterministic functions, e.g. now()\", 0) \\\n     M(UInt64, query_cache_max_size_in_bytes, 0, \"The maximum amount of memory (in bytes) the current user may allocate in the query cache. 0 means unlimited. \", 0) \\\n     M(UInt64, query_cache_max_entries, 0, \"The maximum number of query results the current user may store in the query cache. 0 means unlimited.\", 0) \\\n     M(UInt64, query_cache_min_query_runs, 0, \"Minimum number a SELECT query must run before its result is stored in the query cache\", 0) \\\n@@ -877,6 +877,7 @@ class IColumn;\n     MAKE_OBSOLETE(M, Bool, optimize_duplicate_order_by_and_distinct, false) \\\n     MAKE_OBSOLETE(M, UInt64, parallel_replicas_min_number_of_granules_to_enable, 0) \\\n     MAKE_OBSOLETE(M, Bool, query_plan_optimize_projection, true) \\\n+    MAKE_OBSOLETE(M, Bool, query_cache_store_results_of_queries_with_nondeterministic_functions, false) \\\n \n     /** The section above is for obsolete settings. Do not add anything there. */\n \ndiff --git a/src/Core/SettingsEnums.cpp b/src/Core/SettingsEnums.cpp\nindex 836993b724a6..b853b0d0a0ba 100644\n--- a/src/Core/SettingsEnums.cpp\n+++ b/src/Core/SettingsEnums.cpp\n@@ -69,6 +69,12 @@ IMPLEMENT_SETTING_ENUM(DistributedProductMode, ErrorCodes::UNKNOWN_DISTRIBUTED_P\n      {\"allow\",  DistributedProductMode::ALLOW}})\n \n \n+IMPLEMENT_SETTING_ENUM(QueryCacheNondeterministicFunctionHandling, ErrorCodes::BAD_ARGUMENTS,\n+    {{\"throw\",  QueryCacheNondeterministicFunctionHandling::Throw},\n+     {\"save\",   QueryCacheNondeterministicFunctionHandling::Save},\n+     {\"ignore\", QueryCacheNondeterministicFunctionHandling::Ignore}})\n+\n+\n IMPLEMENT_SETTING_ENUM(DateTimeInputFormat, ErrorCodes::BAD_ARGUMENTS,\n     {{\"basic\",       FormatSettings::DateTimeInputFormat::Basic},\n      {\"best_effort\", FormatSettings::DateTimeInputFormat::BestEffort},\ndiff --git a/src/Core/SettingsEnums.h b/src/Core/SettingsEnums.h\nindex 29776f666083..0d6e87f25c25 100644\n--- a/src/Core/SettingsEnums.h\n+++ b/src/Core/SettingsEnums.h\n@@ -70,6 +70,16 @@ enum class DistributedProductMode\n \n DECLARE_SETTING_ENUM(DistributedProductMode)\n \n+/// How the query cache handles queries with non-deterministic functions, e.g. now()\n+enum class QueryCacheNondeterministicFunctionHandling\n+{\n+    Throw,\n+    Save,\n+    Ignore\n+};\n+\n+DECLARE_SETTING_ENUM(QueryCacheNondeterministicFunctionHandling)\n+\n \n DECLARE_SETTING_ENUM_WITH_RENAME(DateTimeInputFormat, FormatSettings::DateTimeInputFormat)\n \ndiff --git a/src/Interpreters/executeQuery.cpp b/src/Interpreters/executeQuery.cpp\nindex 8cd3c8ab8487..bfa54e7db35c 100644\n--- a/src/Interpreters/executeQuery.cpp\n+++ b/src/Interpreters/executeQuery.cpp\n@@ -96,7 +96,7 @@ namespace DB\n \n namespace ErrorCodes\n {\n-    extern const int CANNOT_USE_QUERY_CACHE_WITH_NONDETERMINISTIC_FUNCTIONS;\n+    extern const int QUERY_CACHE_USED_WITH_NONDETERMINISTIC_FUNCTIONS;\n     extern const int INTO_OUTFILE_NOT_ALLOWED;\n     extern const int INVALID_TRANSACTION;\n     extern const int LOGICAL_ERROR;\n@@ -1106,32 +1106,41 @@ static std::tuple<ASTPtr, BlockIO> executeQueryImpl(\n                     /// top of the pipeline which stores the result in the query cache.\n                     if (can_use_query_cache && settings.enable_writes_to_query_cache)\n                     {\n-                        if (astContainsNonDeterministicFunctions(ast, context) && !settings.query_cache_store_results_of_queries_with_nondeterministic_functions)\n-                            throw Exception(ErrorCodes::CANNOT_USE_QUERY_CACHE_WITH_NONDETERMINISTIC_FUNCTIONS,\n-                                \"Unable to cache the query result because the query contains a non-deterministic function. Use setting `query_cache_store_results_of_queries_with_nondeterministic_functions = 1` to cache the query result regardless\");\n-\n-                        QueryCache::Key key(\n-                            ast, res.pipeline.getHeader(),\n-                            context->getUserName(), settings.query_cache_share_between_users,\n-                            std::chrono::system_clock::now() + std::chrono::seconds(settings.query_cache_ttl),\n-                            settings.query_cache_compress_entries);\n-\n-                        const size_t num_query_runs = query_cache->recordQueryRun(key);\n-                        if (num_query_runs <= settings.query_cache_min_query_runs)\n-                        {\n-                            LOG_TRACE(&Poco::Logger::get(\"QueryCache\"), \"Skipped insert because the query ran {} times but the minimum required number of query runs to cache the query result is {}\", num_query_runs, settings.query_cache_min_query_runs);\n-                        }\n-                        else\n+                        const bool ast_contains_nondeterministic_functions = astContainsNonDeterministicFunctions(ast, context);\n+                        const QueryCacheNondeterministicFunctionHandling nondeterministic_function_handling = settings.query_cache_nondeterministic_function_handling;\n+\n+                        if (ast_contains_nondeterministic_functions && nondeterministic_function_handling == QueryCacheNondeterministicFunctionHandling::Throw)\n+                            throw Exception(ErrorCodes::QUERY_CACHE_USED_WITH_NONDETERMINISTIC_FUNCTIONS,\n+                                \"The query result was not cached because the query contains a non-deterministic function.\"\n+                                \" Use setting `query_cache_nondeterministic_function_handling = 'save'` or `= 'ignore'` to cache the query result regardless or to omit caching\");\n+\n+                        if (!ast_contains_nondeterministic_functions || nondeterministic_function_handling == QueryCacheNondeterministicFunctionHandling::Save)\n                         {\n-                            auto query_cache_writer = std::make_shared<QueryCache::Writer>(query_cache->createWriter(\n-                                             key,\n-                                             std::chrono::milliseconds(settings.query_cache_min_query_duration.totalMilliseconds()),\n-                                             settings.query_cache_squash_partial_results,\n-                                             settings.max_block_size,\n-                                             settings.query_cache_max_size_in_bytes,\n-                                             settings.query_cache_max_entries));\n-                            res.pipeline.writeResultIntoQueryCache(query_cache_writer);\n-                            query_cache_usage = QueryCache::Usage::Write;\n+                            QueryCache::Key key(\n+                                ast, res.pipeline.getHeader(),\n+                                context->getUserName(), settings.query_cache_share_between_users,\n+                                std::chrono::system_clock::now() + std::chrono::seconds(settings.query_cache_ttl),\n+                                settings.query_cache_compress_entries);\n+\n+                            const size_t num_query_runs = query_cache->recordQueryRun(key);\n+                            if (num_query_runs <= settings.query_cache_min_query_runs)\n+                            {\n+                                LOG_TRACE(&Poco::Logger::get(\"QueryCache\"),\n+                                        \"Skipped insert because the query ran {} times but the minimum required number of query runs to cache the query result is {}\",\n+                                        num_query_runs, settings.query_cache_min_query_runs);\n+                            }\n+                            else\n+                            {\n+                                auto query_cache_writer = std::make_shared<QueryCache::Writer>(query_cache->createWriter(\n+                                                 key,\n+                                                 std::chrono::milliseconds(settings.query_cache_min_query_duration.totalMilliseconds()),\n+                                                 settings.query_cache_squash_partial_results,\n+                                                 settings.max_block_size,\n+                                                 settings.query_cache_max_size_in_bytes,\n+                                                 settings.query_cache_max_entries));\n+                                res.pipeline.writeResultIntoQueryCache(query_cache_writer);\n+                                query_cache_usage = QueryCache::Usage::Write;\n+                            }\n                         }\n                     }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02494_query_cache_nondeterministic_functions.reference b/tests/queries/0_stateless/02494_query_cache_nondeterministic_functions.reference\nindex e666f54d4c4a..74dcf748395d 100644\n--- a/tests/queries/0_stateless/02494_query_cache_nondeterministic_functions.reference\n+++ b/tests/queries/0_stateless/02494_query_cache_nondeterministic_functions.reference\n@@ -1,4 +1,8 @@\n+-- query_cache_nondeterministic_function_handling = throw\n 0\n----\n+-- query_cache_nondeterministic_function_handling = save\n 1\n 1\n+-- query_cache_nondeterministic_function_handling = ignore\n+1\n+0\ndiff --git a/tests/queries/0_stateless/02494_query_cache_nondeterministic_functions.sql b/tests/queries/0_stateless/02494_query_cache_nondeterministic_functions.sql\nindex 62e0b099d7a5..477655e474f5 100644\n--- a/tests/queries/0_stateless/02494_query_cache_nondeterministic_functions.sql\n+++ b/tests/queries/0_stateless/02494_query_cache_nondeterministic_functions.sql\n@@ -3,14 +3,21 @@\n \n SYSTEM DROP QUERY CACHE;\n \n--- rand() is non-deterministic, the query is rejected by default\n-SELECT COUNT(rand(1)) SETTINGS use_query_cache = true; -- { serverError CANNOT_USE_QUERY_CACHE_WITH_NONDETERMINISTIC_FUNCTIONS }\n-SELECT COUNT(*) FROM system.query_cache;\n+SELECT '-- query_cache_nondeterministic_function_handling = throw';\n+SELECT count(now()) SETTINGS use_query_cache = true; -- { serverError QUERY_CACHE_USED_WITH_NONDETERMINISTIC_FUNCTIONS }\n+SELECT count(now()) SETTINGS use_query_cache = true, query_cache_nondeterministic_function_handling = 'throw'; -- { serverError QUERY_CACHE_USED_WITH_NONDETERMINISTIC_FUNCTIONS }\n+SELECT count(*) FROM system.query_cache;\n \n-SELECT '---';\n+SYSTEM DROP QUERY CACHE;\n+\n+SELECT '-- query_cache_nondeterministic_function_handling = save';\n+SELECT count(now()) SETTINGS use_query_cache = true, query_cache_nondeterministic_function_handling = 'save';\n+SELECT count(*) FROM system.query_cache;\n+\n+SYSTEM DROP QUERY CACHE;\n \n--- Force caching using a setting\n-SELECT COUNT(RAND(1)) SETTINGS use_query_cache = true, query_cache_store_results_of_queries_with_nondeterministic_functions = true;\n-SELECT COUNT(*) FROM system.query_cache;\n+SELECT '-- query_cache_nondeterministic_function_handling = ignore';\n+SELECT count(now()) SETTINGS use_query_cache = true, query_cache_nondeterministic_function_handling = 'ignore';\n+SELECT count(*) FROM system.query_cache;\n \n SYSTEM DROP QUERY CACHE;\ndiff --git a/tests/queries/0_stateless/02888_obsolete_settings.reference b/tests/queries/0_stateless/02888_obsolete_settings.reference\nindex 6ee5216cd73c..63553092c0cb 100644\n--- a/tests/queries/0_stateless/02888_obsolete_settings.reference\n+++ b/tests/queries/0_stateless/02888_obsolete_settings.reference\n@@ -42,6 +42,7 @@ optimize_duplicate_order_by_and_distinct\n optimize_fuse_sum_count_avg\n parallel_replicas_min_number_of_granules_to_enable\n partial_merge_join_optimizations\n+query_cache_store_results_of_queries_with_nondeterministic_functions\n query_plan_optimize_projection\n replication_alter_columns_timeout\n restore_threads\n",
  "problem_statement": "Non-deterministic query throws if query_cache is enabled\n**Describe the unexpected behaviour**\r\nWith version  23.10.1.1, query cache is not working properly, as it throws for non-deterministic queries, instead of not caching and giving results.\r\n\r\n**How to reproduce**\r\n* Which ClickHouse server version to use:  23.10.1.1\r\n* Queries to run that lead to unexpected result: Any query of this type: \r\n\r\nSELECT count() FROM <table> WHERE datetime >= now() - INTERVAL 5 minute\r\n\r\n**Expected behavior**\r\nThe query finishes correctly and results are not cached.\r\n\r\n**Error message and/or stacktrace**\r\nCode: 704. DB::Exception: Received from localhost:9000. DB::Exception: Unable to cache the query result because the query contains a non-deterministic function. Use setting `query_cache_store_results_of_queries_with_nondeterministic_functions = 1` to cache the query result regardless. (CANNOT_USE_QUERY_CACHE_WITH_NONDETERMINISTIC_FUNCTIONS)\r\n\n",
  "hints_text": "example  https://fiddle.clickhouse.com/4311ce42-43c2-40a8-9c86-b5cbd1698db3\nMaybe one more setting to not throw the exception.\r\nOr \r\n\r\n```\r\nquery_cache_store_results_of_queries_with_nondeterministic_functions\r\n    0 - Disabled\r\n    1 - Enabled\r\n    2 - Suppress/Pass (default)\r\n```\nThe behavior is due to recent PR #54801. In general, I think throwing an exception by default is less surprising + confusing for users than silently caching a non-deterministic result.\r\n\r\nAbout https://github.com/ClickHouse/ClickHouse/issues/56504#issuecomment-1803694186: I like that, let me implement it.",
  "created_at": "2023-11-09T14:05:10Z",
  "modified_files": [
    "docs/en/operations/query-cache.md",
    "docs/en/operations/settings/settings.md",
    "docs/en/sql-reference/functions/date-time-functions.md",
    "src/Common/ErrorCodes.cpp",
    "src/Core/Settings.h",
    "src/Core/SettingsEnums.cpp",
    "src/Core/SettingsEnums.h",
    "src/Interpreters/executeQuery.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/02494_query_cache_nondeterministic_functions.reference",
    "tests/queries/0_stateless/02494_query_cache_nondeterministic_functions.sql",
    "tests/queries/0_stateless/02888_obsolete_settings.reference"
  ]
}