diff --git a/src/Parsers/tests/gtest_Parser.cpp b/src/Parsers/tests/gtest_Parser.cpp
index f0abc68f9660..47f7a54389b8 100644
--- a/src/Parsers/tests/gtest_Parser.cpp
+++ b/src/Parsers/tests/gtest_Parser.cpp
@@ -231,47 +231,47 @@ INSTANTIATE_TEST_SUITE_P(ParserCreateDatabaseQuery, ParserTest,
         },
         {
             "CREATE DATABASE db ENGINE=MaterializeMySQL('addr:port', 'db', 'user', 'pw') TABLE OVERRIDE `tbl`
(PARTITION BY toYYYYMM(created))",
-            "CREATE DATABASE db
ENGINE = MaterializeMySQL('addr:port', 'db', 'user', 'pw')
TABLE OVERRIDE `tbl`
(
    PARTITION BY toYYYYMM(`created`)
)"
+            "CREATE DATABASE db
ENGINE = MaterializeMySQL('addr:port', 'db', 'user', 'pw')
TABLE OVERRIDE tbl
(
    PARTITION BY toYYYYMM(created)
)"
         },
         {
             "CREATE DATABASE db ENGINE=Foo TABLE OVERRIDE `tbl` (), TABLE OVERRIDE a (COLUMNS (_created DateTime MATERIALIZED now())), TABLE OVERRIDE b (PARTITION BY rand())",
-            "CREATE DATABASE db
ENGINE = Foo
TABLE OVERRIDE `tbl`
(

),
TABLE OVERRIDE `a`
(
    COLUMNS
    (
        `_created` DateTime MATERIALIZED now()
    )
),
TABLE OVERRIDE `b`
(
    PARTITION BY rand()
)"
+            "CREATE DATABASE db
ENGINE = Foo
TABLE OVERRIDE tbl
(

),
TABLE OVERRIDE a
(
    COLUMNS
    (
        `_created` DateTime MATERIALIZED now()
    )
),
TABLE OVERRIDE b
(
    PARTITION BY rand()
)"
         },
         {
             "CREATE DATABASE db ENGINE=MaterializeMySQL('addr:port', 'db', 'user', 'pw') TABLE OVERRIDE tbl (COLUMNS (id UUID) PARTITION BY toYYYYMM(created))",
-            "CREATE DATABASE db
ENGINE = MaterializeMySQL('addr:port', 'db', 'user', 'pw')
TABLE OVERRIDE `tbl`
(
    COLUMNS
    (
        `id` UUID
    )
    PARTITION BY toYYYYMM(`created`)
)"
+            "CREATE DATABASE db
ENGINE = MaterializeMySQL('addr:port', 'db', 'user', 'pw')
TABLE OVERRIDE tbl
(
    COLUMNS
    (
        `id` UUID
    )
    PARTITION BY toYYYYMM(created)
)"
         },
         {
             "CREATE DATABASE db TABLE OVERRIDE tbl (COLUMNS (INDEX foo foo TYPE minmax GRANULARITY 1) PARTITION BY if(_staged = 1, 'staging', toYYYYMM(created)))",
-            "CREATE DATABASE db
TABLE OVERRIDE `tbl`
(
    COLUMNS
    (
        INDEX foo `foo` TYPE minmax GRANULARITY 1
    )
    PARTITION BY if(`_staged` = 1, 'staging', toYYYYMM(`created`))
)"
+            "CREATE DATABASE db
TABLE OVERRIDE tbl
(
    COLUMNS
    (
        INDEX foo foo TYPE minmax GRANULARITY 1
    )
    PARTITION BY if(_staged = 1, 'staging', toYYYYMM(created))
)"
         },
         {
             "CREATE DATABASE db TABLE OVERRIDE t1 (TTL inserted + INTERVAL 1 MONTH DELETE), TABLE OVERRIDE t2 (TTL `inserted` + INTERVAL 2 MONTH DELETE)",
-            "CREATE DATABASE db
TABLE OVERRIDE `t1`
(
    TTL `inserted` + toIntervalMonth(1)
),
TABLE OVERRIDE `t2`
(
    TTL `inserted` + toIntervalMonth(2)
)"
+            "CREATE DATABASE db
TABLE OVERRIDE t1
(
    TTL inserted + toIntervalMonth(1)
),
TABLE OVERRIDE t2
(
    TTL inserted + toIntervalMonth(2)
)"
         },
         {
             "CREATE DATABASE db ENGINE = MaterializeMySQL('127.0.0.1:3306', 'db', 'root', 'pw') SETTINGS allows_query_when_mysql_lost = 1 TABLE OVERRIDE tab3 (COLUMNS (_staged UInt8 MATERIALIZED 1) PARTITION BY (c3) TTL c3 + INTERVAL 10 minute), TABLE OVERRIDE tab5 (PARTITION BY (c3) TTL c3 + INTERVAL 10 minute)",
-            "CREATE DATABASE db
ENGINE = MaterializeMySQL('127.0.0.1:3306', 'db', 'root', 'pw')
SETTINGS allows_query_when_mysql_lost = 1
TABLE OVERRIDE `tab3`
(
    COLUMNS
    (
        `_staged` UInt8 MATERIALIZED 1
    )
    PARTITION BY `c3`
    TTL `c3` + toIntervalMinute(10)
),
TABLE OVERRIDE `tab5`
(
    PARTITION BY `c3`
    TTL `c3` + toIntervalMinute(10)
)"
+            "CREATE DATABASE db
ENGINE = MaterializeMySQL('127.0.0.1:3306', 'db', 'root', 'pw')
SETTINGS allows_query_when_mysql_lost = 1
TABLE OVERRIDE tab3
(
    COLUMNS
    (
        `_staged` UInt8 MATERIALIZED 1
    )
    PARTITION BY c3
    TTL c3 + toIntervalMinute(10)
),
TABLE OVERRIDE tab5
(
    PARTITION BY c3
    TTL c3 + toIntervalMinute(10)
)"
         },
         {
             "CREATE DATABASE db TABLE OVERRIDE tbl (PARTITION BY toYYYYMM(created) COLUMNS (created DateTime CODEC(Delta)))",
-            "CREATE DATABASE db
TABLE OVERRIDE `tbl`
(
    COLUMNS
    (
        `created` DateTime CODEC(Delta)
    )
    PARTITION BY toYYYYMM(`created`)
)"
+            "CREATE DATABASE db
TABLE OVERRIDE tbl
(
    COLUMNS
    (
        `created` DateTime CODEC(Delta)
    )
    PARTITION BY toYYYYMM(created)
)"
         },
         {
-            "CREATE DATABASE db ENGINE = Foo() SETTINGS a = 1",
+            "CREATE DATABASE db ENGINE = Foo() SETTINGS a = 1", 
             "CREATE DATABASE db
ENGINE = Foo
SETTINGS a = 1"
         },
         {
-            "CREATE DATABASE db ENGINE = Foo() SETTINGS a = 1, b = 2",
+            "CREATE DATABASE db ENGINE = Foo() SETTINGS a = 1, b = 2", 
             "CREATE DATABASE db
ENGINE = Foo
SETTINGS a = 1, b = 2"
         },
         {
             "CREATE DATABASE db ENGINE = Foo() SETTINGS a = 1, b = 2 TABLE OVERRIDE a (ORDER BY (id, version))",
-            "CREATE DATABASE db
ENGINE = Foo
SETTINGS a = 1, b = 2
TABLE OVERRIDE `a`
(
    ORDER BY (`id`, `version`)
)"
+            "CREATE DATABASE db
ENGINE = Foo
SETTINGS a = 1, b = 2
TABLE OVERRIDE a
(
    ORDER BY (id, version)
)"
         },
         {
             "CREATE DATABASE db ENGINE = Foo() SETTINGS a = 1, b = 2 COMMENT 'db comment' TABLE OVERRIDE a (ORDER BY (id, version))",
-            "CREATE DATABASE db
ENGINE = Foo
SETTINGS a = 1, b = 2
TABLE OVERRIDE `a`
(
    ORDER BY (`id`, `version`)
)
COMMENT 'db comment'"
+            "CREATE DATABASE db
ENGINE = Foo
SETTINGS a = 1, b = 2
TABLE OVERRIDE a
(
    ORDER BY (id, version)
)
COMMENT 'db comment'"
         }
 })));
 
diff --git a/tests/integration/test_materialized_mysql_database/materialized_with_ddl.py b/tests/integration/test_materialized_mysql_database/materialized_with_ddl.py
index 86000799ae4c..9a99f0c9aa80 100644
--- a/tests/integration/test_materialized_mysql_database/materialized_with_ddl.py
+++ b/tests/integration/test_materialized_mysql_database/materialized_with_ddl.py
@@ -2353,7 +2353,7 @@ def table_overrides(clickhouse_node, mysql_node, service_name):
     )
     check_query(clickhouse_node, "SELECT count() FROM table_overrides.t1", "1001
")
     show_db = clickhouse_node.query("SHOW CREATE DATABASE table_overrides")
-    assert "TABLE OVERRIDE `t1`\
(\
\
)" in show_db, show_db
+    assert "TABLE OVERRIDE t1\
(\
\
)" in show_db, show_db
 
     clickhouse_node.query("DROP DATABASE IF EXISTS table_overrides")
     mysql_node.query("DROP DATABASE IF EXISTS table_overrides")
diff --git a/tests/queries/0_stateless/03230_output_format_identifier_quoting_style.reference b/tests/queries/0_stateless/03230_output_format_identifier_quoting_style.reference
new file mode 100644
index 000000000000..c563617a01c7
--- /dev/null
+++ b/tests/queries/0_stateless/03230_output_format_identifier_quoting_style.reference
@@ -0,0 +1,40 @@
+CREATE TABLE default.uk_price_paid
(
    `price` UInt32,
    `date` Date,
    `postcode1` LowCardinality(String),
    `postcode2` LowCardinality(String),
    `type` Enum8(\'other\' = 0, \'terraced\' = 1, \'semi-detached\' = 2, \'detached\' = 3, \'flat\' = 4),
    `is_new` UInt8,
    `duration` Enum8(\'unknown\' = 0, \'freehold\' = 1, \'leasehold\' = 2),
    `addr1` String,
    `addr2` String,
    `street` LowCardinality(String),
    `locality` LowCardinality(String),
    `town` LowCardinality(String),
    `district` LowCardinality(String),
    `county` LowCardinality(String),
    INDEX county_index county TYPE set(10) GRANULARITY 1,
    PROJECTION town_date_projection
    (
        SELECT 
            town,
            date,
            price
        ORDER BY 
            town,
            date
    ),
    PROJECTION handy_aggs_projection
    (
        SELECT 
            avg(price),
            max(price),
            sum(price)
        GROUP BY town
    )
)
ENGINE = MergeTree
ORDER BY (postcode1, postcode2, date)
SETTINGS index_granularity = 8192
+CREATE MATERIALIZED VIEW default.prices_by_year_view TO default.prices_by_year_dest
(
    `price` UInt32,
    `date` Date,
    `addr1` String,
    `addr2` String,
    `street` LowCardinality(String),
    `town` LowCardinality(String),
    `district` LowCardinality(String),
    `county` LowCardinality(String)
)
AS SELECT
    price,
    date,
    addr1,
    addr2,
    street,
    town,
    district,
    county
FROM default.uk_price_paid
+CREATE TABLE default.uk_prices_aggs_dest
(
    `month` Date,
    `min_price` SimpleAggregateFunction(min, UInt32),
    `max_price` SimpleAggregateFunction(max, UInt32),
    `volume` AggregateFunction(count, UInt32),
    `avg_price` AggregateFunction(avg, UInt32)
)
ENGINE = AggregatingMergeTree
PRIMARY KEY month
ORDER BY month
SETTINGS index_granularity = 8192
+CREATE MATERIALIZED VIEW default.uk_prices_aggs_view TO default.uk_prices_aggs_dest
(
    `month` Date,
    `min_price` SimpleAggregateFunction(min, UInt32),
    `max_price` SimpleAggregateFunction(max, UInt32),
    `volume` AggregateFunction(count, UInt32),
    `avg_price` AggregateFunction(avg, UInt32)
)
AS WITH toStartOfMonth(date) AS month
SELECT
    month,
    minSimpleState(price) AS min_price,
    maxSimpleState(price) AS max_price,
    countState(price) AS volume,
    avgState(price) AS avg_price
FROM default.uk_price_paid
GROUP BY month
+CREATE DICTIONARY default.uk_mortgage_rates_dict
(
    `date` DateTime64,
    `variable` Decimal32(2),
    `fixed` Decimal32(2),
    `bank` Decimal32(2)
)
PRIMARY KEY date
SOURCE(CLICKHOUSE(TABLE \'uk_mortgage_rates\'))
LIFETIME(MIN 0 MAX 2628000000)
LAYOUT(COMPLEX_KEY_HASHED())
+CREATE TABLE default.uk_price_paid
(
    `price` UInt32,
    `date` Date,
    `postcode1` LowCardinality(String),
    `postcode2` LowCardinality(String),
    `type` Enum8(\'other\' = 0, \'terraced\' = 1, \'semi-detached\' = 2, \'detached\' = 3, \'flat\' = 4),
    `is_new` UInt8,
    `duration` Enum8(\'unknown\' = 0, \'freehold\' = 1, \'leasehold\' = 2),
    `addr1` String,
    `addr2` String,
    `street` LowCardinality(String),
    `locality` LowCardinality(String),
    `town` LowCardinality(String),
    `district` LowCardinality(String),
    `county` LowCardinality(String),
    INDEX county_index county TYPE set(10) GRANULARITY 1,
    PROJECTION town_date_projection
    (
        SELECT 
            town,
            date,
            price
        ORDER BY 
            town,
            date
    ),
    PROJECTION handy_aggs_projection
    (
        SELECT 
            avg(price),
            max(price),
            sum(price)
        GROUP BY town
    )
)
ENGINE = MergeTree
ORDER BY (postcode1, postcode2, date)
SETTINGS index_granularity = 8192
+CREATE MATERIALIZED VIEW default.prices_by_year_view TO default.prices_by_year_dest
(
    `price` UInt32,
    `date` Date,
    `addr1` String,
    `addr2` String,
    `street` LowCardinality(String),
    `town` LowCardinality(String),
    `district` LowCardinality(String),
    `county` LowCardinality(String)
)
AS SELECT
    price,
    date,
    addr1,
    addr2,
    street,
    town,
    district,
    county
FROM default.uk_price_paid
+CREATE TABLE default.uk_prices_aggs_dest
(
    `month` Date,
    `min_price` SimpleAggregateFunction(min, UInt32),
    `max_price` SimpleAggregateFunction(max, UInt32),
    `volume` AggregateFunction(count, UInt32),
    `avg_price` AggregateFunction(avg, UInt32)
)
ENGINE = AggregatingMergeTree
PRIMARY KEY month
ORDER BY month
SETTINGS index_granularity = 8192
+CREATE MATERIALIZED VIEW default.uk_prices_aggs_view TO default.uk_prices_aggs_dest
(
    `month` Date,
    `min_price` SimpleAggregateFunction(min, UInt32),
    `max_price` SimpleAggregateFunction(max, UInt32),
    `volume` AggregateFunction(count, UInt32),
    `avg_price` AggregateFunction(avg, UInt32)
)
AS WITH toStartOfMonth(date) AS month
SELECT
    month,
    minSimpleState(price) AS min_price,
    maxSimpleState(price) AS max_price,
    countState(price) AS volume,
    avgState(price) AS avg_price
FROM default.uk_price_paid
GROUP BY month
+CREATE DICTIONARY default.uk_mortgage_rates_dict
(
    `date` DateTime64,
    `variable` Decimal32(2),
    `fixed` Decimal32(2),
    `bank` Decimal32(2)
)
PRIMARY KEY date
SOURCE(CLICKHOUSE(TABLE \'uk_mortgage_rates\'))
LIFETIME(MIN 0 MAX 2628000000)
LAYOUT(COMPLEX_KEY_HASHED())
+CREATE TABLE `default`.`uk_price_paid`
(
    `price` UInt32,
    `date` Date,
    `postcode1` LowCardinality(String),
    `postcode2` LowCardinality(String),
    `type` Enum8(\'other\' = 0, \'terraced\' = 1, \'semi-detached\' = 2, \'detached\' = 3, \'flat\' = 4),
    `is_new` UInt8,
    `duration` Enum8(\'unknown\' = 0, \'freehold\' = 1, \'leasehold\' = 2),
    `addr1` String,
    `addr2` String,
    `street` LowCardinality(String),
    `locality` LowCardinality(String),
    `town` LowCardinality(String),
    `district` LowCardinality(String),
    `county` LowCardinality(String),
    INDEX `county_index` `county` TYPE set(10) GRANULARITY 1,
    PROJECTION `town_date_projection`
    (
        SELECT 
            `town`,
            `date`,
            `price`
        ORDER BY 
            `town`,
            `date`
    ),
    PROJECTION `handy_aggs_projection`
    (
        SELECT 
            avg(`price`),
            max(`price`),
            sum(`price`)
        GROUP BY `town`
    )
)
ENGINE = MergeTree
ORDER BY (`postcode1`, `postcode2`, `date`)
SETTINGS index_granularity = 8192
+CREATE MATERIALIZED VIEW `default`.`prices_by_year_view` TO default.prices_by_year_dest
(
    `price` UInt32,
    `date` Date,
    `addr1` String,
    `addr2` String,
    `street` LowCardinality(String),
    `town` LowCardinality(String),
    `district` LowCardinality(String),
    `county` LowCardinality(String)
)
AS SELECT
    `price`,
    `date`,
    `addr1`,
    `addr2`,
    `street`,
    `town`,
    `district`,
    `county`
FROM `default`.`uk_price_paid`
+CREATE TABLE `default`.`uk_prices_aggs_dest`
(
    `month` Date,
    `min_price` SimpleAggregateFunction(`min`, UInt32),
    `max_price` SimpleAggregateFunction(`max`, UInt32),
    `volume` AggregateFunction(`count`, UInt32),
    `avg_price` AggregateFunction(`avg`, UInt32)
)
ENGINE = AggregatingMergeTree
PRIMARY KEY `month`
ORDER BY `month`
SETTINGS index_granularity = 8192
+CREATE MATERIALIZED VIEW `default`.`uk_prices_aggs_view` TO default.uk_prices_aggs_dest
(
    `month` Date,
    `min_price` SimpleAggregateFunction(`min`, UInt32),
    `max_price` SimpleAggregateFunction(`max`, UInt32),
    `volume` AggregateFunction(`count`, UInt32),
    `avg_price` AggregateFunction(`avg`, UInt32)
)
AS WITH toStartOfMonth(`date`) AS `month`
SELECT
    `month`,
    minSimpleState(`price`) AS `min_price`,
    maxSimpleState(`price`) AS `max_price`,
    countState(`price`) AS `volume`,
    avgState(`price`) AS `avg_price`
FROM `default`.`uk_price_paid`
GROUP BY `month`
+CREATE DICTIONARY `default`.`uk_mortgage_rates_dict`
(
    `date` DateTime64,
    `variable` Decimal32(2),
    `fixed` Decimal32(2),
    `bank` Decimal32(2)
)
PRIMARY KEY `date`
SOURCE(CLICKHOUSE(TABLE \'uk_mortgage_rates\'))
LIFETIME(MIN 0 MAX 2628000000)
LAYOUT(COMPLEX_KEY_HASHED())
+CREATE TABLE default.uk_price_paid
(
    `price` UInt32,
    `date` Date,
    `postcode1` LowCardinality(String),
    `postcode2` LowCardinality(String),
    `type` Enum8(\'other\' = 0, \'terraced\' = 1, \'semi-detached\' = 2, \'detached\' = 3, \'flat\' = 4),
    `is_new` UInt8,
    `duration` Enum8(\'unknown\' = 0, \'freehold\' = 1, \'leasehold\' = 2),
    `addr1` String,
    `addr2` String,
    `street` LowCardinality(String),
    `locality` LowCardinality(String),
    `town` LowCardinality(String),
    `district` LowCardinality(String),
    `county` LowCardinality(String),
    INDEX county_index county TYPE set(10) GRANULARITY 1,
    PROJECTION town_date_projection
    (
        SELECT 
            town,
            date,
            price
        ORDER BY 
            town,
            date
    ),
    PROJECTION handy_aggs_projection
    (
        SELECT 
            avg(price),
            max(price),
            sum(price)
        GROUP BY town
    )
)
ENGINE = MergeTree
ORDER BY (postcode1, postcode2, date)
SETTINGS index_granularity = 8192
+CREATE MATERIALIZED VIEW default.prices_by_year_view TO default.prices_by_year_dest
(
    `price` UInt32,
    `date` Date,
    `addr1` String,
    `addr2` String,
    `street` LowCardinality(String),
    `town` LowCardinality(String),
    `district` LowCardinality(String),
    `county` LowCardinality(String)
)
AS SELECT
    price,
    date,
    addr1,
    addr2,
    street,
    town,
    district,
    county
FROM default.uk_price_paid
+CREATE TABLE default.uk_prices_aggs_dest
(
    `month` Date,
    `min_price` SimpleAggregateFunction(min, UInt32),
    `max_price` SimpleAggregateFunction(max, UInt32),
    `volume` AggregateFunction(count, UInt32),
    `avg_price` AggregateFunction(avg, UInt32)
)
ENGINE = AggregatingMergeTree
PRIMARY KEY month
ORDER BY month
SETTINGS index_granularity = 8192
+CREATE MATERIALIZED VIEW default.uk_prices_aggs_view TO default.uk_prices_aggs_dest
(
    `month` Date,
    `min_price` SimpleAggregateFunction(min, UInt32),
    `max_price` SimpleAggregateFunction(max, UInt32),
    `volume` AggregateFunction(count, UInt32),
    `avg_price` AggregateFunction(avg, UInt32)
)
AS WITH toStartOfMonth(date) AS month
SELECT
    month,
    minSimpleState(price) AS min_price,
    maxSimpleState(price) AS max_price,
    countState(price) AS volume,
    avgState(price) AS avg_price
FROM default.uk_price_paid
GROUP BY month
+CREATE DICTIONARY default.uk_mortgage_rates_dict
(
    `date` DateTime64,
    `variable` Decimal32(2),
    `fixed` Decimal32(2),
    `bank` Decimal32(2)
)
PRIMARY KEY date
SOURCE(CLICKHOUSE(TABLE \'uk_mortgage_rates\'))
LIFETIME(MIN 0 MAX 2628000000)
LAYOUT(COMPLEX_KEY_HASHED())
+CREATE TABLE "default"."uk_price_paid"
(
    "price" UInt32,
    "date" Date,
    "postcode1" LowCardinality(String),
    "postcode2" LowCardinality(String),
    "type" Enum8(\'other\' = 0, \'terraced\' = 1, \'semi-detached\' = 2, \'detached\' = 3, \'flat\' = 4),
    "is_new" UInt8,
    "duration" Enum8(\'unknown\' = 0, \'freehold\' = 1, \'leasehold\' = 2),
    "addr1" String,
    "addr2" String,
    "street" LowCardinality(String),
    "locality" LowCardinality(String),
    "town" LowCardinality(String),
    "district" LowCardinality(String),
    "county" LowCardinality(String),
    INDEX "county_index" "county" TYPE set(10) GRANULARITY 1,
    PROJECTION "town_date_projection"
    (
        SELECT 
            "town",
            "date",
            "price"
        ORDER BY 
            "town",
            "date"
    ),
    PROJECTION "handy_aggs_projection"
    (
        SELECT 
            avg("price"),
            max("price"),
            sum("price")
        GROUP BY "town"
    )
)
ENGINE = MergeTree
ORDER BY ("postcode1", "postcode2", "date")
SETTINGS index_granularity = 8192
+CREATE MATERIALIZED VIEW "default"."prices_by_year_view" TO default.prices_by_year_dest
(
    "price" UInt32,
    "date" Date,
    "addr1" String,
    "addr2" String,
    "street" LowCardinality(String),
    "town" LowCardinality(String),
    "district" LowCardinality(String),
    "county" LowCardinality(String)
)
AS SELECT
    "price",
    "date",
    "addr1",
    "addr2",
    "street",
    "town",
    "district",
    "county"
FROM "default"."uk_price_paid"
+CREATE TABLE "default"."uk_prices_aggs_dest"
(
    "month" Date,
    "min_price" SimpleAggregateFunction("min", UInt32),
    "max_price" SimpleAggregateFunction("max", UInt32),
    "volume" AggregateFunction("count", UInt32),
    "avg_price" AggregateFunction("avg", UInt32)
)
ENGINE = AggregatingMergeTree
PRIMARY KEY "month"
ORDER BY "month"
SETTINGS index_granularity = 8192
+CREATE MATERIALIZED VIEW "default"."uk_prices_aggs_view" TO default.uk_prices_aggs_dest
(
    "month" Date,
    "min_price" SimpleAggregateFunction("min", UInt32),
    "max_price" SimpleAggregateFunction("max", UInt32),
    "volume" AggregateFunction("count", UInt32),
    "avg_price" AggregateFunction("avg", UInt32)
)
AS WITH toStartOfMonth("date") AS "month"
SELECT
    "month",
    minSimpleState("price") AS "min_price",
    maxSimpleState("price") AS "max_price",
    countState("price") AS "volume",
    avgState("price") AS "avg_price"
FROM "default"."uk_price_paid"
GROUP BY "month"
+CREATE DICTIONARY "default"."uk_mortgage_rates_dict"
(
    "date" DateTime64,
    "variable" Decimal32(2),
    "fixed" Decimal32(2),
    "bank" Decimal32(2)
)
PRIMARY KEY "date"
SOURCE(CLICKHOUSE(TABLE \'uk_mortgage_rates\'))
LIFETIME(MIN 0 MAX 2628000000)
LAYOUT(COMPLEX_KEY_HASHED())
+CREATE TABLE default.uk_price_paid
(
    "price" UInt32,
    "date" Date,
    "postcode1" LowCardinality(String),
    "postcode2" LowCardinality(String),
    "type" Enum8(\'other\' = 0, \'terraced\' = 1, \'semi-detached\' = 2, \'detached\' = 3, \'flat\' = 4),
    "is_new" UInt8,
    "duration" Enum8(\'unknown\' = 0, \'freehold\' = 1, \'leasehold\' = 2),
    "addr1" String,
    "addr2" String,
    "street" LowCardinality(String),
    "locality" LowCardinality(String),
    "town" LowCardinality(String),
    "district" LowCardinality(String),
    "county" LowCardinality(String),
    INDEX county_index county TYPE set(10) GRANULARITY 1,
    PROJECTION town_date_projection
    (
        SELECT 
            town,
            date,
            price
        ORDER BY 
            town,
            date
    ),
    PROJECTION handy_aggs_projection
    (
        SELECT 
            avg(price),
            max(price),
            sum(price)
        GROUP BY town
    )
)
ENGINE = MergeTree
ORDER BY (postcode1, postcode2, date)
SETTINGS index_granularity = 8192
+CREATE MATERIALIZED VIEW default.prices_by_year_view TO default.prices_by_year_dest
(
    "price" UInt32,
    "date" Date,
    "addr1" String,
    "addr2" String,
    "street" LowCardinality(String),
    "town" LowCardinality(String),
    "district" LowCardinality(String),
    "county" LowCardinality(String)
)
AS SELECT
    price,
    date,
    addr1,
    addr2,
    street,
    town,
    district,
    county
FROM default.uk_price_paid
+CREATE TABLE default.uk_prices_aggs_dest
(
    "month" Date,
    "min_price" SimpleAggregateFunction(min, UInt32),
    "max_price" SimpleAggregateFunction(max, UInt32),
    "volume" AggregateFunction(count, UInt32),
    "avg_price" AggregateFunction(avg, UInt32)
)
ENGINE = AggregatingMergeTree
PRIMARY KEY month
ORDER BY month
SETTINGS index_granularity = 8192
+CREATE MATERIALIZED VIEW default.uk_prices_aggs_view TO default.uk_prices_aggs_dest
(
    "month" Date,
    "min_price" SimpleAggregateFunction(min, UInt32),
    "max_price" SimpleAggregateFunction(max, UInt32),
    "volume" AggregateFunction(count, UInt32),
    "avg_price" AggregateFunction(avg, UInt32)
)
AS WITH toStartOfMonth(date) AS month
SELECT
    month,
    minSimpleState(price) AS min_price,
    maxSimpleState(price) AS max_price,
    countState(price) AS volume,
    avgState(price) AS avg_price
FROM default.uk_price_paid
GROUP BY month
+CREATE DICTIONARY default.uk_mortgage_rates_dict
(
    "date" DateTime64,
    "variable" Decimal32(2),
    "fixed" Decimal32(2),
    "bank" Decimal32(2)
)
PRIMARY KEY date
SOURCE(CLICKHOUSE(TABLE \'uk_mortgage_rates\'))
LIFETIME(MIN 0 MAX 2628000000)
LAYOUT(COMPLEX_KEY_HASHED())
+CREATE TABLE `default`.`uk_price_paid`
(
    `price` UInt32,
    `date` Date,
    `postcode1` LowCardinality(String),
    `postcode2` LowCardinality(String),
    `type` Enum8(\'other\' = 0, \'terraced\' = 1, \'semi-detached\' = 2, \'detached\' = 3, \'flat\' = 4),
    `is_new` UInt8,
    `duration` Enum8(\'unknown\' = 0, \'freehold\' = 1, \'leasehold\' = 2),
    `addr1` String,
    `addr2` String,
    `street` LowCardinality(String),
    `locality` LowCardinality(String),
    `town` LowCardinality(String),
    `district` LowCardinality(String),
    `county` LowCardinality(String),
    INDEX `county_index` `county` TYPE set(10) GRANULARITY 1,
    PROJECTION `town_date_projection`
    (
        SELECT 
            `town`,
            `date`,
            `price`
        ORDER BY 
            `town`,
            `date`
    ),
    PROJECTION `handy_aggs_projection`
    (
        SELECT 
            avg(`price`),
            max(`price`),
            sum(`price`)
        GROUP BY `town`
    )
)
ENGINE = MergeTree
ORDER BY (`postcode1`, `postcode2`, `date`)
SETTINGS index_granularity = 8192
+CREATE MATERIALIZED VIEW `default`.`prices_by_year_view` TO default.prices_by_year_dest
(
    `price` UInt32,
    `date` Date,
    `addr1` String,
    `addr2` String,
    `street` LowCardinality(String),
    `town` LowCardinality(String),
    `district` LowCardinality(String),
    `county` LowCardinality(String)
)
AS SELECT
    `price`,
    `date`,
    `addr1`,
    `addr2`,
    `street`,
    `town`,
    `district`,
    `county`
FROM `default`.`uk_price_paid`
+CREATE TABLE `default`.`uk_prices_aggs_dest`
(
    `month` Date,
    `min_price` SimpleAggregateFunction(`min`, UInt32),
    `max_price` SimpleAggregateFunction(`max`, UInt32),
    `volume` AggregateFunction(`count`, UInt32),
    `avg_price` AggregateFunction(`avg`, UInt32)
)
ENGINE = AggregatingMergeTree
PRIMARY KEY `month`
ORDER BY `month`
SETTINGS index_granularity = 8192
+CREATE MATERIALIZED VIEW `default`.`uk_prices_aggs_view` TO default.uk_prices_aggs_dest
(
    `month` Date,
    `min_price` SimpleAggregateFunction(`min`, UInt32),
    `max_price` SimpleAggregateFunction(`max`, UInt32),
    `volume` AggregateFunction(`count`, UInt32),
    `avg_price` AggregateFunction(`avg`, UInt32)
)
AS WITH toStartOfMonth(`date`) AS `month`
SELECT
    `month`,
    minSimpleState(`price`) AS `min_price`,
    maxSimpleState(`price`) AS `max_price`,
    countState(`price`) AS `volume`,
    avgState(`price`) AS `avg_price`
FROM `default`.`uk_price_paid`
GROUP BY `month`
+CREATE DICTIONARY `default`.`uk_mortgage_rates_dict`
(
    `date` DateTime64,
    `variable` Decimal32(2),
    `fixed` Decimal32(2),
    `bank` Decimal32(2)
)
PRIMARY KEY `date`
SOURCE(CLICKHOUSE(TABLE \'uk_mortgage_rates\'))
LIFETIME(MIN 0 MAX 2628000000)
LAYOUT(COMPLEX_KEY_HASHED())
+CREATE TABLE default.uk_price_paid
(
    `price` UInt32,
    `date` Date,
    `postcode1` LowCardinality(String),
    `postcode2` LowCardinality(String),
    `type` Enum8(\'other\' = 0, \'terraced\' = 1, \'semi-detached\' = 2, \'detached\' = 3, \'flat\' = 4),
    `is_new` UInt8,
    `duration` Enum8(\'unknown\' = 0, \'freehold\' = 1, \'leasehold\' = 2),
    `addr1` String,
    `addr2` String,
    `street` LowCardinality(String),
    `locality` LowCardinality(String),
    `town` LowCardinality(String),
    `district` LowCardinality(String),
    `county` LowCardinality(String),
    INDEX county_index county TYPE set(10) GRANULARITY 1,
    PROJECTION town_date_projection
    (
        SELECT 
            town,
            date,
            price
        ORDER BY 
            town,
            date
    ),
    PROJECTION handy_aggs_projection
    (
        SELECT 
            avg(price),
            max(price),
            sum(price)
        GROUP BY town
    )
)
ENGINE = MergeTree
ORDER BY (postcode1, postcode2, date)
SETTINGS index_granularity = 8192
+CREATE MATERIALIZED VIEW default.prices_by_year_view TO default.prices_by_year_dest
(
    `price` UInt32,
    `date` Date,
    `addr1` String,
    `addr2` String,
    `street` LowCardinality(String),
    `town` LowCardinality(String),
    `district` LowCardinality(String),
    `county` LowCardinality(String)
)
AS SELECT
    price,
    date,
    addr1,
    addr2,
    street,
    town,
    district,
    county
FROM default.uk_price_paid
+CREATE TABLE default.uk_prices_aggs_dest
(
    `month` Date,
    `min_price` SimpleAggregateFunction(min, UInt32),
    `max_price` SimpleAggregateFunction(max, UInt32),
    `volume` AggregateFunction(count, UInt32),
    `avg_price` AggregateFunction(avg, UInt32)
)
ENGINE = AggregatingMergeTree
PRIMARY KEY month
ORDER BY month
SETTINGS index_granularity = 8192
+CREATE MATERIALIZED VIEW default.uk_prices_aggs_view TO default.uk_prices_aggs_dest
(
    `month` Date,
    `min_price` SimpleAggregateFunction(min, UInt32),
    `max_price` SimpleAggregateFunction(max, UInt32),
    `volume` AggregateFunction(count, UInt32),
    `avg_price` AggregateFunction(avg, UInt32)
)
AS WITH toStartOfMonth(date) AS month
SELECT
    month,
    minSimpleState(price) AS min_price,
    maxSimpleState(price) AS max_price,
    countState(price) AS volume,
    avgState(price) AS avg_price
FROM default.uk_price_paid
GROUP BY month
+CREATE DICTIONARY default.uk_mortgage_rates_dict
(
    `date` DateTime64,
    `variable` Decimal32(2),
    `fixed` Decimal32(2),
    `bank` Decimal32(2)
)
PRIMARY KEY date
SOURCE(CLICKHOUSE(TABLE \'uk_mortgage_rates\'))
LIFETIME(MIN 0 MAX 2628000000)
LAYOUT(COMPLEX_KEY_HASHED())
diff --git a/tests/queries/0_stateless/03230_output_format_identifier_quoting_style.sql b/tests/queries/0_stateless/03230_output_format_identifier_quoting_style.sql
new file mode 100644
index 000000000000..c500dd4e4c6e
--- /dev/null
+++ b/tests/queries/0_stateless/03230_output_format_identifier_quoting_style.sql
@@ -0,0 +1,328 @@
+DROP DICTIONARY IF EXISTS uk_mortgage_rates_dict;
+DROP TABLE IF EXISTS uk_mortgage_rates;
+DROP VIEW IF EXISTS uk_prices_aggs_view;
+DROP TABLE IF EXISTS uk_prices_aggs_dest;
+DROP VIEW IF EXISTS prices_by_year_view;
+DROP TABLE IF EXISTS prices_by_year_dest;
+DROP TABLE IF EXISTS uk_price_paid;
+
+-- Create tables, views, dictionaries
+
+CREATE TABLE uk_price_paid
+(
+    price UInt32,
+    date Date,
+    postcode1 LowCardinality(String),
+    postcode2 LowCardinality(String),
+    type Enum('terraced' = 1, 'semi-detached' = 2, 'detached' = 3, 'flat' = 4, 'other' = 0),
+    is_new UInt8,
+    duration Enum('freehold' = 1, 'leasehold' = 2, 'unknown' = 0),
+    addr1 String,
+    addr2 String,
+    street LowCardinality(String),
+    locality LowCardinality(String),
+    town LowCardinality(String),
+    district LowCardinality(String),
+    county LowCardinality(String),
+    INDEX county_index county TYPE set(10) GRANULARITY 1,
+    PROJECTION town_date_projection
+    (
+        SELECT 
+            town,
+            date,
+            price
+        ORDER BY 
+            town,
+            date
+    ),
+    PROJECTION handy_aggs_projection
+    (
+        SELECT 
+            avg(price),
+            max(price),
+            sum(price)
+        GROUP BY town
+    )
+)
+ENGINE = MergeTree
+ORDER BY (postcode1, postcode2, date);
+
+CREATE TABLE prices_by_year_dest (
+    price UInt32,
+    date Date,
+    addr1 String,
+    addr2 String,
+    street LowCardinality(String),
+    town LowCardinality(String),
+    district LowCardinality(String),
+    county LowCardinality(String)
+)
+ENGINE = MergeTree
+PRIMARY KEY (town, date)
+PARTITION BY toYear(date);
+
+CREATE MATERIALIZED VIEW prices_by_year_view
+TO prices_by_year_dest
+AS
+    SELECT
+        price,
+        date,
+        addr1,
+        addr2,
+        street,
+        town,
+        district,
+        county
+    FROM uk_price_paid;
+
+CREATE TABLE uk_prices_aggs_dest (
+    month Date,
+    min_price SimpleAggregateFunction(min, UInt32),
+    max_price SimpleAggregateFunction(max, UInt32),
+    volume AggregateFunction(count, UInt32),
+    avg_price AggregateFunction(avg, UInt32)
+)
+ENGINE = AggregatingMergeTree
+PRIMARY KEY month;
+
+CREATE MATERIALIZED VIEW uk_prices_aggs_view
+TO uk_prices_aggs_dest
+AS
+    WITH
+        toStartOfMonth(date) AS month
+    SELECT
+        month,
+        minSimpleState(price) AS min_price,
+        maxSimpleState(price) AS max_price,
+        countState(price) AS volume,
+        avgState(price) AS avg_price
+    FROM uk_price_paid
+    GROUP BY month;
+
+CREATE TABLE uk_mortgage_rates (
+    date DateTime64,
+    variable Decimal32(2),
+    fixed Decimal32(2),
+    bank Decimal32(2)
+)
+ENGINE Memory();
+
+INSERT INTO uk_mortgage_rates VALUES ('2004-02-29', 5.02, 4.9, 4);
+INSERT INTO uk_mortgage_rates VALUES ('2004-03-31', 5.11, 4.91, 4);
+
+CREATE DICTIONARY uk_mortgage_rates_dict (
+    date DateTime64,
+    variable Decimal32(2),
+    fixed Decimal32(2),
+    bank Decimal32(2)
+)
+PRIMARY KEY date
+SOURCE(
+  CLICKHOUSE(TABLE 'uk_mortgage_rates')
+)
+LAYOUT(COMPLEX_KEY_HASHED())
+LIFETIME(2628000000);
+
+
+-- Show tables, views, dictionaries with default settings
+SHOW CREATE TABLE uk_price_paid;
+
+SHOW CREATE VIEW prices_by_year_view;
+
+SHOW CREATE uk_prices_aggs_dest;
+
+SHOW CREATE VIEW uk_prices_aggs_view;
+
+SHOW CREATE DICTIONARY uk_mortgage_rates_dict;
+
+
+-- Show tables, views, dictionaries with output_format_always_quote_identifiers=false, output_format_identifier_quoting_style='None' 
+SHOW CREATE TABLE uk_price_paid
+SETTINGS
+    output_format_always_quote_identifiers=false,
+    output_format_identifier_quoting_style='None';
+
+SHOW CREATE VIEW prices_by_year_view
+SETTINGS
+    output_format_always_quote_identifiers=false,
+    output_format_identifier_quoting_style='None';
+
+SHOW CREATE uk_prices_aggs_dest
+SETTINGS
+    output_format_always_quote_identifiers=false,
+    output_format_identifier_quoting_style='None';
+
+SHOW CREATE VIEW uk_prices_aggs_view
+SETTINGS
+    output_format_always_quote_identifiers=false,
+    output_format_identifier_quoting_style='None';
+
+SHOW CREATE DICTIONARY uk_mortgage_rates_dict
+SETTINGS
+    output_format_always_quote_identifiers=false,
+    output_format_identifier_quoting_style='None';
+
+-- Show tables, views, dictionaries with output_format_always_quote_identifiers=true, output_format_identifier_quoting_style='Backticks' 
+SHOW CREATE TABLE uk_price_paid
+SETTINGS
+    output_format_always_quote_identifiers=true,
+    output_format_identifier_quoting_style='Backticks';
+
+SHOW CREATE VIEW prices_by_year_view
+SETTINGS
+    output_format_always_quote_identifiers=true,
+    output_format_identifier_quoting_style='Backticks';
+
+SHOW CREATE uk_prices_aggs_dest
+SETTINGS
+    output_format_always_quote_identifiers=true,
+    output_format_identifier_quoting_style='Backticks';
+
+SHOW CREATE VIEW uk_prices_aggs_view
+SETTINGS
+    output_format_always_quote_identifiers=true,
+    output_format_identifier_quoting_style='Backticks';
+
+SHOW CREATE DICTIONARY uk_mortgage_rates_dict
+SETTINGS
+    output_format_always_quote_identifiers=true,
+    output_format_identifier_quoting_style='Backticks';
+
+-- Show tables, views, dictionaries with output_format_always_quote_identifiers=false, output_format_identifier_quoting_style='Backticks' 
+SHOW CREATE TABLE uk_price_paid
+SETTINGS
+    output_format_always_quote_identifiers=false,
+    output_format_identifier_quoting_style='Backticks';
+
+SHOW CREATE VIEW prices_by_year_view
+SETTINGS
+    output_format_always_quote_identifiers=false,
+    output_format_identifier_quoting_style='Backticks';
+
+SHOW CREATE uk_prices_aggs_dest
+SETTINGS
+    output_format_always_quote_identifiers=false,
+    output_format_identifier_quoting_style='Backticks';
+
+SHOW CREATE VIEW uk_prices_aggs_view
+SETTINGS
+    output_format_always_quote_identifiers=false,
+    output_format_identifier_quoting_style='Backticks';
+
+SHOW CREATE DICTIONARY uk_mortgage_rates_dict
+SETTINGS
+    output_format_always_quote_identifiers=false,
+    output_format_identifier_quoting_style='Backticks';
+
+-- Show tables, views, dictionaries with output_format_always_quote_identifiers=true, output_format_identifier_quoting_style='DoubleQuotes' 
+SHOW CREATE TABLE uk_price_paid
+SETTINGS
+    output_format_always_quote_identifiers=true,
+    output_format_identifier_quoting_style='DoubleQuotes';
+
+SHOW CREATE VIEW prices_by_year_view
+SETTINGS
+    output_format_always_quote_identifiers=true,
+    output_format_identifier_quoting_style='DoubleQuotes';
+
+SHOW CREATE uk_prices_aggs_dest
+SETTINGS
+    output_format_always_quote_identifiers=true,
+    output_format_identifier_quoting_style='DoubleQuotes';
+
+SHOW CREATE VIEW uk_prices_aggs_view
+SETTINGS
+    output_format_always_quote_identifiers=true,
+    output_format_identifier_quoting_style='DoubleQuotes';
+
+SHOW CREATE DICTIONARY uk_mortgage_rates_dict
+SETTINGS
+    output_format_always_quote_identifiers=true,
+    output_format_identifier_quoting_style='DoubleQuotes';
+
+-- Show tables, views, dictionaries with output_format_always_quote_identifiers=false, output_format_identifier_quoting_style='DoubleQuotes' 
+SHOW CREATE TABLE uk_price_paid
+SETTINGS
+    output_format_always_quote_identifiers=false,
+    output_format_identifier_quoting_style='DoubleQuotes';
+
+SHOW CREATE VIEW prices_by_year_view
+SETTINGS
+    output_format_always_quote_identifiers=false,
+    output_format_identifier_quoting_style='DoubleQuotes';
+
+SHOW CREATE uk_prices_aggs_dest
+SETTINGS
+    output_format_always_quote_identifiers=false,
+    output_format_identifier_quoting_style='DoubleQuotes';
+
+SHOW CREATE VIEW uk_prices_aggs_view
+SETTINGS
+    output_format_always_quote_identifiers=false,
+    output_format_identifier_quoting_style='DoubleQuotes';
+
+SHOW CREATE DICTIONARY uk_mortgage_rates_dict
+SETTINGS
+    output_format_always_quote_identifiers=false,
+    output_format_identifier_quoting_style='DoubleQuotes';
+
+
+-- Show tables, views, dictionaries with output_format_always_quote_identifiers=true, output_format_identifier_quoting_style='BackticksMySQL' 
+SHOW CREATE TABLE uk_price_paid
+SETTINGS
+    output_format_always_quote_identifiers=true,
+    output_format_identifier_quoting_style='BackticksMySQL';
+
+SHOW CREATE VIEW prices_by_year_view
+SETTINGS
+    output_format_always_quote_identifiers=true,
+    output_format_identifier_quoting_style='BackticksMySQL';
+
+SHOW CREATE uk_prices_aggs_dest
+SETTINGS
+    output_format_always_quote_identifiers=true,
+    output_format_identifier_quoting_style='BackticksMySQL';
+
+SHOW CREATE VIEW uk_prices_aggs_view
+SETTINGS
+    output_format_always_quote_identifiers=true,
+    output_format_identifier_quoting_style='BackticksMySQL';
+
+SHOW CREATE DICTIONARY uk_mortgage_rates_dict
+SETTINGS
+    output_format_always_quote_identifiers=true,
+    output_format_identifier_quoting_style='BackticksMySQL';
+
+-- Show tables, views, dictionaries with output_format_always_quote_identifiers=false, output_format_identifier_quoting_style='BackticksMySQL' 
+SHOW CREATE TABLE uk_price_paid
+SETTINGS
+    output_format_always_quote_identifiers=false,
+    output_format_identifier_quoting_style='BackticksMySQL';
+
+SHOW CREATE VIEW prices_by_year_view
+SETTINGS
+    output_format_always_quote_identifiers=false,
+    output_format_identifier_quoting_style='BackticksMySQL';
+
+SHOW CREATE uk_prices_aggs_dest
+SETTINGS
+    output_format_always_quote_identifiers=false,
+    output_format_identifier_quoting_style='BackticksMySQL';
+
+SHOW CREATE VIEW uk_prices_aggs_view
+SETTINGS
+    output_format_always_quote_identifiers=false,
+    output_format_identifier_quoting_style='BackticksMySQL';
+
+SHOW CREATE DICTIONARY uk_mortgage_rates_dict
+SETTINGS
+    output_format_always_quote_identifiers=false,
+    output_format_identifier_quoting_style='BackticksMySQL';
+
+DROP DICTIONARY uk_mortgage_rates_dict;
+DROP TABLE uk_mortgage_rates;
+DROP VIEW uk_prices_aggs_view;
+DROP TABLE uk_prices_aggs_dest;
+DROP VIEW prices_by_year_view;
+DROP TABLE prices_by_year_dest;
+DROP TABLE uk_price_paid;
