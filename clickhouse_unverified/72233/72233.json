{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 72233,
  "instance_id": "ClickHouse__ClickHouse-72233",
  "issue_numbers": [
    "72224"
  ],
  "base_commit": "acb968a8c66b9278b97469662784371e1712ac07",
  "patch": "diff --git a/src/Interpreters/GraceHashJoin.cpp b/src/Interpreters/GraceHashJoin.cpp\nindex 3fb83c3ce472..2cda7d4d8560 100644\n--- a/src/Interpreters/GraceHashJoin.cpp\n+++ b/src/Interpreters/GraceHashJoin.cpp\n@@ -13,6 +13,7 @@\n #include <Core/Settings.h>\n \n #include <numeric>\n+#include <shared_mutex>\n #include <fmt/format.h>\n \n \n@@ -524,6 +525,7 @@ class GraceHashJoin::DelayedBlocks : public IBlocksStream\n     Block nextImpl() override\n     {\n         ExtraBlockPtr not_processed = nullptr;\n+        std::shared_lock shared(eof_mutex);\n \n         {\n             std::lock_guard lock(extra_block_mutex);\n@@ -557,7 +559,24 @@ class GraceHashJoin::DelayedBlocks : public IBlocksStream\n             block = left_reader.read();\n             if (!block)\n             {\n-                return {};\n+                shared.unlock();\n+                bool there_are_still_might_be_rows_to_process = false;\n+                {\n+                    /// The following race condition could happen without this mutex:\n+                    /// * we're called from `IBlocksStream::next()`\n+                    /// * another thread just read the last block from `left_reader` and now is in the process of or about to call `joinBlock()`\n+                    /// * it might be that `joinBlock()` will leave some rows in the `not_processed`\n+                    /// * but if the current thread will return now an empty block `finished` will be set to true in `IBlocksStream::next()` and\n+                    ///   these not processed rows will be lost\n+                    /// So we shouldn't finish execution while there is at least one in-flight `joinBlock()` call. Let's wait until we're alone\n+                    /// and double check if there are any not processed rows left.\n+                    std::unique_lock exclusive(eof_mutex);\n+\n+                    std::lock_guard lock(extra_block_mutex);\n+                    if (!not_processed_blocks.empty())\n+                        there_are_still_might_be_rows_to_process = true;\n+                }\n+                return there_are_still_might_be_rows_to_process ? nextImpl() : Block();\n             }\n \n             // block comes from left_reader, need to join with right table to get the result.\n@@ -592,7 +611,7 @@ class GraceHashJoin::DelayedBlocks : public IBlocksStream\n         return block;\n     }\n \n-    size_t current_bucket;\n+    const size_t current_bucket;\n     Buckets buckets;\n     InMemoryJoinPtr hash_join;\n \n@@ -603,6 +622,8 @@ class GraceHashJoin::DelayedBlocks : public IBlocksStream\n \n     std::mutex extra_block_mutex;\n     std::list<ExtraBlockPtr> not_processed_blocks TSA_GUARDED_BY(extra_block_mutex);\n+\n+    std::shared_mutex eof_mutex;\n };\n \n IBlocksStreamPtr GraceHashJoin::getDelayedBlocks()\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03274_grace_hash_max_joined_block_size_rows_bug.reference b/tests/queries/0_stateless/03274_grace_hash_max_joined_block_size_rows_bug.reference\nnew file mode 100644\nindex 000000000000..8b3a805c6a28\n--- /dev/null\n+++ b/tests/queries/0_stateless/03274_grace_hash_max_joined_block_size_rows_bug.reference\n@@ -0,0 +1,1 @@\n+180\t15\ndiff --git a/tests/queries/0_stateless/03274_grace_hash_max_joined_block_size_rows_bug.sql b/tests/queries/0_stateless/03274_grace_hash_max_joined_block_size_rows_bug.sql\nnew file mode 100644\nindex 000000000000..c91e226fdefc\n--- /dev/null\n+++ b/tests/queries/0_stateless/03274_grace_hash_max_joined_block_size_rows_bug.sql\n@@ -0,0 +1,15 @@\n+DROP TABLE IF EXISTS t0;\n+DROP TABLE IF EXISTS t1;\n+\n+CREATE TABLE t0 (x UInt64) ENGINE = MergeTree ORDER BY x;\n+INSERT INTO t0 SELECT number from numbers(20);\n+\n+CREATE TABLE t1 (x UInt64) ENGINE = MergeTree ORDER BY x;\n+INSERT INTO t1 SELECT number from numbers(5, 20);\n+\n+SET max_joined_block_size_rows = 1;\n+SET grace_hash_join_initial_buckets = 2;\n+SET join_algorithm = 'grace_hash';\n+\n+SELECT sum(x), count() FROM t0 JOIN t1 USING x;\n+\n",
  "problem_statement": "Fix #72175\n<!---\r\nA technical comment, you are free to remove or leave it as it is when PR is created\r\nThe following categories are used in the next scripts, update them accordingly\r\nutils/changelog/changelog.py\r\ntests/ci/cancel_and_rerun_workflow_lambda/app.py\r\n-->\r\n### Changelog category (leave one):\r\n\r\n- Not for changelog (changelog entry is not required)\r\n\r\n\r\n### Changelog entry (a user-readable short description of the changes that goes to CHANGELOG.md):\r\n...\r\n\r\nFix https://github.com/ClickHouse/ClickHouse/issues/72175\r\n\r\n### Documentation entry for user-facing changes\r\n\r\n- [ ] Documentation is written (mandatory for new features)\r\n\r\n<!---\r\nDirectly edit documentation source files in the \"docs\" folder with the same pull-request as code changes\r\n\r\nor\r\n\r\nAdd a user-readable short description of the changes that should be added to docs.clickhouse.com below.\r\n\r\nAt a minimum, the following information should be added (but add more as needed).\r\n- Motivation: Why is this function, table engine, etc. useful to ClickHouse users?\r\n\r\n- Parameters: If the feature being added takes arguments, options or is influenced by settings, please list them below with a brief explanation.\r\n\r\n- Example use: A query or command.\r\n-->\r\n\r\n\r\n> Information about CI checks: https://clickhouse.com/docs/en/development/continuous-integration/\r\n\r\n#### CI Settings (Only check the boxes if you know what you are doing):\r\n- [ ] <!---ci_set_required--> Allow: All Required Checks\r\n- [ ] <!---ci_include_stateless--> Allow: Stateless tests\r\n- [ ] <!---ci_include_stateful--> Allow: Stateful tests\r\n- [ ] <!---ci_include_integration--> Allow: Integration Tests\r\n- [ ] <!---ci_include_performance--> Allow: Performance tests\r\n- [ ] <!---ci_set_builds--> Allow: All Builds\r\n- [ ] <!---batch_0_1--> Allow: batch 1, 2 for multi-batch jobs\r\n- [ ] <!---batch_2_3--> Allow: batch 3, 4, 5, 6 for multi-batch jobs\r\n---\r\n- [ ] <!---ci_exclude_style--> Exclude: Style check\r\n- [ ] <!---ci_exclude_fast--> Exclude: Fast test\r\n- [ ] <!---ci_exclude_asan--> Exclude: All with ASAN\r\n- [ ] <!---ci_exclude_tsan|msan|ubsan|coverage--> Exclude: All with TSAN, MSAN, UBSAN, Coverage\r\n- [ ] <!---ci_exclude_aarch64|release|debug--> Exclude: All with aarch64, release, debug\r\n---\r\n- [ ] <!---ci_include_fuzzer--> Run only fuzzers related jobs (libFuzzer fuzzers, AST fuzzers, etc.)\r\n- [ ] <!---ci_exclude_ast--> Exclude: AST fuzzers\r\n---\r\n- [ ] <!---do_not_test--> Do not test\r\n- [ ] <!---woolen_wolfdog--> Woolen Wolfdog\r\n- [ ] <!---upload_all--> Upload binaries for special builds\r\n- [ ] <!---no_merge_commit--> Disable merge-commit\r\n- [ ] <!---no_ci_cache--> Disable CI cache\r\n\n",
  "hints_text": "",
  "created_at": "2024-11-21T22:50:01Z",
  "modified_files": [
    "src/Interpreters/GraceHashJoin.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03274_grace_hash_max_joined_block_size_rows_bug.reference",
    "b/tests/queries/0_stateless/03274_grace_hash_max_joined_block_size_rows_bug.sql"
  ]
}