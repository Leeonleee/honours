{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 29574,
  "instance_id": "ClickHouse__ClickHouse-29574",
  "issue_numbers": [
    "29403"
  ],
  "base_commit": "f60d57dd589de10c1de5d06840dbd99d6807d829",
  "patch": "diff --git a/src/Interpreters/ExpressionJIT.cpp b/src/Interpreters/ExpressionJIT.cpp\nindex 9203c2182d83..58cec23fa87a 100644\n--- a/src/Interpreters/ExpressionJIT.cpp\n+++ b/src/Interpreters/ExpressionJIT.cpp\n@@ -324,6 +324,16 @@ static bool isCompilableConstant(const ActionsDAG::Node & node)\n     return node.column && isColumnConst(*node.column) && canBeNativeType(*node.result_type);\n }\n \n+static const ActionsDAG::Node * removeAliasIfNecessary(const ActionsDAG::Node * node)\n+{\n+    const ActionsDAG::Node * node_no_alias = node;\n+\n+    while (node_no_alias->type == ActionsDAG::ActionType::ALIAS)\n+        node_no_alias = node_no_alias->children[0];\n+\n+    return node_no_alias;\n+}\n+\n static bool isCompilableFunction(const ActionsDAG::Node & node, const std::unordered_set<const ActionsDAG::Node *> & lazy_executed_nodes)\n {\n     if (node.type != ActionsDAG::ActionType::FUNCTION)\n@@ -336,7 +346,9 @@ static bool isCompilableFunction(const ActionsDAG::Node & node, const std::unord\n     {\n         for (const auto & child : node.children)\n         {\n-            if (lazy_executed_nodes.contains(child))\n+            const ActionsDAG::Node * child_no_alias = removeAliasIfNecessary(child);\n+\n+            if (lazy_executed_nodes.contains(child_no_alias))\n                 return false;\n         }\n     }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02036_jit_short_circuit.reference b/tests/queries/0_stateless/02036_jit_short_circuit.reference\nnew file mode 100644\nindex 000000000000..573541ac9702\n--- /dev/null\n+++ b/tests/queries/0_stateless/02036_jit_short_circuit.reference\n@@ -0,0 +1,1 @@\n+0\ndiff --git a/tests/queries/0_stateless/02036_jit_short_circuit.sql b/tests/queries/0_stateless/02036_jit_short_circuit.sql\nnew file mode 100644\nindex 000000000000..18faf701a845\n--- /dev/null\n+++ b/tests/queries/0_stateless/02036_jit_short_circuit.sql\n@@ -0,0 +1,12 @@\n+SET compile_expressions = 1;\n+SET min_count_to_compile_expression = 0;\n+SET short_circuit_function_evaluation='enable';\n+\n+DROP TABLE IF EXISTS test_table;\n+CREATE TABLE test_table (message String) ENGINE=TinyLog;\n+\n+INSERT INTO test_table VALUES ('Test');\n+\n+SELECT if(action = 'bonus', sport_amount, 0) * 100 FROM (SELECT message AS action, cast(message, 'Float64') AS sport_amount FROM test_table);\n+\n+DROP TABLE test_table;\n",
  "problem_statement": "Column Function is not a contiguous block of memory\n**Describe what's wrong**\r\n\r\nAn error occures when we are selecting data from a table with Kafka engine\r\n\r\n**How to reproduce**\r\n\r\n* Which ClickHouse server version to use\r\nClickhouse 21.9.3.30\r\n* `CREATE TABLE` statements for all tables involved\r\n\r\nCREATE TABLE kafka_fundevwh.QueueCheck\r\n(\r\n    `message` String\r\n)\r\nENGINE = Kafka\r\nSETTINGS kafka_broker_list = 'brokers', kafka_topic_list = 'topic', kafka_group_name = 'group', kafka_format = 'JSONAsString', kafka_num_consumers = 1, kafka_max_block_size = 1, kafka_flush_interval_ms = 60000\r\n\r\n* Data sample (message)\r\n\r\n{\r\n  \"timestamp\": \"2021-09-20 14:29:14\",\r\n  \"action\": \"bet\"\r\n}\r\n\r\n* Queries to run that lead to unexpected result\r\n\r\nSELECT if(action = 'bonus', sport_amount, 0) * 100\r\nFROM\r\n(\r\n    SELECT\r\n        JSONExtract(message, 'action', 'String') AS action,\r\n        JSONExtract(message, 'sport_amount', 'Float64') AS sport_amount\r\n    FROM kafka_fundevwh.QueueCheck\r\n)\r\n\r\n**Expected behavior**\r\n\r\nData selection without any errors\r\n\r\n**Error message and/or stacktrace**\r\n\r\n2021.09.27 08:18:02.867302 [ 29442 ] {6132ab14-0734-4cdb-9f86-fd16244ae6b5} <Error> TCPHandler: Code: 48. DB::Exception: Column Function is not a contiguous block of memory: while executing 'FUNCTION [compiled] multiply(if(UInt8, Float64,\r\n 0 : UInt8), 100 : UInt8)(equals(action, 'bonus') :: 2, sport_amount :: 6) -> multiply(if(equals(action, 'bonus'), sport_amount, 0), 100) Float64 : 5'. (NOT_IMPLEMENTED), Stack trace (when copying this message, always include the lines be\r\nlow):\r\n\r\n0. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0x936713a in /usr/bin/clickhouse\r\n1. DB::IColumn::getRawData() const @ 0x105040e4 in /usr/bin/clickhouse\r\n2. DB::getColumnData(DB::IColumn const*) @ 0x10f271e0 in /usr/bin/clickhouse\r\n3. DB::LLVMExecutableFunction::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x10835b07 in /usr/bi\r\nn/clickhouse\r\n4. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) co\r\nnst @ 0x1019359e in /usr/bin/clickhouse\r\n5. DB::IExecutableFunction::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x10193bb2 in /usr/bin\r\n/clickhouse\r\n6. DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool) const @ 0x1081dc72 in /usr/bin/clickhouse\r\n7. DB::ExpressionTransform::transform(DB::Chunk&) @ 0x1197905c in /usr/bin/clickhouse\r\n8. DB::ISimpleTransform::transform(DB::Chunk&, DB::Chunk&) @ 0xea01510 in /usr/bin/clickhouse\r\n9. DB::ISimpleTransform::work() @ 0x117e31a7 in /usr/bin/clickhouse\r\n10. ? @ 0x118211fd in /usr/bin/clickhouse\r\n11. DB::PipelineExecutor::executeStepImpl(unsigned long, unsigned long, std::__1::atomic<bool>*) @ 0x1181d9d1 in /usr/bin/clickhouse\r\n12. DB::PipelineExecutor::executeImpl(unsigned long) @ 0x1181ba2f in /usr/bin/clickhouse\r\n13. DB::PipelineExecutor::execute(unsigned long) @ 0x1181b7f9 in /usr/bin/clickhouse\r\n14. ? @ 0x1182877f in /usr/bin/clickhouse\r\n15. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x93a815f in /usr/bin/clickhouse\r\n16. ? @ 0x93aba43 in /usr/bin/clickhouse\r\n17. start_thread @ 0x7fa3 in /lib/x86_64-linux-gnu/libpthread-2.28.so\r\n18. clone @ 0xf94cf in /lib/x86_64-linux-gnu/libc-2.28.so\r\n\n",
  "hints_text": "It seems to be related to JIT, @kitaisreal, could you please take a look?\nI think it's may be fixed (https://github.com/ClickHouse/ClickHouse/pull/28821) . @suvorovis  Try 21.9.4.35",
  "created_at": "2021-09-30T16:25:08Z",
  "modified_files": [
    "src/Interpreters/ExpressionJIT.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02036_jit_short_circuit.reference",
    "b/tests/queries/0_stateless/02036_jit_short_circuit.sql"
  ]
}