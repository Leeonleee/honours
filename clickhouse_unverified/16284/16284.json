{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 16284,
  "instance_id": "ClickHouse__ClickHouse-16284",
  "issue_numbers": [
    "15591"
  ],
  "base_commit": "4476117ac60b5e3432aff6c4190755fccbf4da13",
  "patch": "diff --git a/src/Storages/MergeTree/registerStorageMergeTree.cpp b/src/Storages/MergeTree/registerStorageMergeTree.cpp\nindex f94425a81d3f..91bf105af743 100644\n--- a/src/Storages/MergeTree/registerStorageMergeTree.cpp\n+++ b/src/Storages/MergeTree/registerStorageMergeTree.cpp\n@@ -608,10 +608,14 @@ static StoragePtr create(const StorageFactory::Arguments & args)\n         /// single default partition with name \"all\".\n         metadata.partition_key = KeyDescription::getKeyFromAST(partition_by_key, metadata.columns, args.context);\n \n+        /// PRIMARY KEY without ORDER BY is allowed and considered as ORDER BY.\n+        if (!args.storage_def->order_by && args.storage_def->primary_key)\n+            args.storage_def->set(args.storage_def->order_by, args.storage_def->primary_key->clone());\n+\n         if (!args.storage_def->order_by)\n             throw Exception(\n-                \"You must provide an ORDER BY expression in the table definition. \"\n-                \"If you don't want this table to be sorted, use ORDER BY tuple()\",\n+                \"You must provide an ORDER BY or PRIMARY KEY expression in the table definition. \"\n+                \"If you don't want this table to be sorted, use ORDER BY/PRIMARY KEY tuple()\",\n                 ErrorCodes::BAD_ARGUMENTS);\n \n         /// Get sorting key from engine arguments.\n@@ -627,7 +631,7 @@ static StoragePtr create(const StorageFactory::Arguments & args)\n         {\n             metadata.primary_key = KeyDescription::getKeyFromAST(args.storage_def->primary_key->ptr(), metadata.columns, args.context);\n         }\n-        else /// Otherwise we copy it from primary key definition\n+        else /// Otherwise we don't have explicit primary key and copy it from order by\n         {\n             metadata.primary_key = KeyDescription::getKeyFromAST(args.storage_def->order_by->ptr(), metadata.columns, args.context);\n             /// and set it's definition_ast to nullptr (so isPrimaryKeyDefined()\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01532_primary_key_without_order_by_zookeeper.reference b/tests/queries/0_stateless/01532_primary_key_without_order_by_zookeeper.reference\nnew file mode 100644\nindex 000000000000..02d4fe64f8d5\n--- /dev/null\n+++ b/tests/queries/0_stateless/01532_primary_key_without_order_by_zookeeper.reference\n@@ -0,0 +1,23 @@\n+CREATE TABLE default.merge_tree_pk\\n(\\n    `key` UInt64,\\n    `value` String\\n)\\nENGINE = ReplacingMergeTree()\\nPRIMARY KEY key\\nORDER BY key\\nSETTINGS index_granularity = 8192\n+1\ta\n+2\tb\n+1\tc\n+2\tb\n+CREATE TABLE default.merge_tree_pk_sql\\n(\\n    `key` UInt64,\\n    `value` String\\n)\\nENGINE = ReplacingMergeTree()\\nPRIMARY KEY key\\nORDER BY key\\nSETTINGS index_granularity = 8192\n+1\ta\n+2\tb\n+1\tc\n+2\tb\n+1\tc\t0\n+2\te\t555\n+2\tb\t0\n+CREATE TABLE default.merge_tree_pk_sql\\n(\\n    `key` UInt64,\\n    `value` String,\\n    `key2` UInt64\\n)\\nENGINE = ReplacingMergeTree()\\nPRIMARY KEY key\\nORDER BY (key, key2)\\nSETTINGS index_granularity = 8192\n+CREATE TABLE default.replicated_merge_tree_pk_sql\\n(\\n    `key` UInt64,\\n    `value` String\\n)\\nENGINE = ReplicatedReplacingMergeTree(\\'/clickhouse/test/01532_primary_key_without\\', \\'r1\\')\\nPRIMARY KEY key\\nORDER BY key\\nSETTINGS index_granularity = 8192\n+1\ta\n+2\tb\n+1\tc\n+2\tb\n+1\tc\t0\n+2\te\t555\n+2\tb\t0\n+CREATE TABLE default.replicated_merge_tree_pk_sql\\n(\\n    `key` UInt64,\\n    `value` String,\\n    `key2` UInt64\\n)\\nENGINE = ReplicatedReplacingMergeTree(\\'/clickhouse/test/01532_primary_key_without\\', \\'r1\\')\\nPRIMARY KEY key\\nORDER BY (key, key2)\\nSETTINGS index_granularity = 8192\ndiff --git a/tests/queries/0_stateless/01532_primary_key_without_order_by_zookeeper.sql b/tests/queries/0_stateless/01532_primary_key_without_order_by_zookeeper.sql\nnew file mode 100644\nindex 000000000000..31294d8ebbc3\n--- /dev/null\n+++ b/tests/queries/0_stateless/01532_primary_key_without_order_by_zookeeper.sql\n@@ -0,0 +1,100 @@\n+DROP TABLE IF EXISTS merge_tree_pk;\n+\n+CREATE TABLE merge_tree_pk\n+(\n+    key UInt64,\n+    value String\n+)\n+ENGINE = ReplacingMergeTree()\n+PRIMARY KEY key;\n+\n+SHOW CREATE TABLE merge_tree_pk;\n+\n+INSERT INTO merge_tree_pk VALUES (1, 'a');\n+INSERT INTO merge_tree_pk VALUES (2, 'b');\n+\n+SELECT * FROM merge_tree_pk ORDER BY key;\n+\n+INSERT INTO merge_tree_pk VALUES (1, 'c');\n+\n+DETACH TABLE merge_tree_pk;\n+ATTACH TABLE merge_tree_pk;\n+\n+SELECT * FROM merge_tree_pk FINAL ORDER BY key;\n+\n+DROP TABLE IF EXISTS merge_tree_pk;\n+\n+DROP TABLE IF EXISTS merge_tree_pk_sql;\n+\n+CREATE TABLE merge_tree_pk_sql\n+(\n+    key UInt64,\n+    value String,\n+    PRIMARY KEY (key)\n+)\n+ENGINE = ReplacingMergeTree();\n+\n+SHOW CREATE TABLE merge_tree_pk_sql;\n+\n+INSERT INTO merge_tree_pk_sql VALUES (1, 'a');\n+INSERT INTO merge_tree_pk_sql VALUES (2, 'b');\n+\n+SELECT * FROM merge_tree_pk_sql ORDER BY key;\n+\n+INSERT INTO merge_tree_pk_sql VALUES (1, 'c');\n+\n+DETACH TABLE merge_tree_pk_sql;\n+ATTACH TABLE merge_tree_pk_sql;\n+\n+SELECT * FROM merge_tree_pk_sql FINAL ORDER BY key;\n+\n+ALTER TABLE merge_tree_pk_sql ADD COLUMN key2 UInt64, MODIFY ORDER BY (key, key2);\n+\n+INSERT INTO merge_tree_pk_sql VALUES (2, 'd', 555);\n+\n+INSERT INTO merge_tree_pk_sql VALUES (2, 'e', 555);\n+\n+SELECT * FROM merge_tree_pk_sql FINAL ORDER BY key;\n+\n+SHOW CREATE TABLE merge_tree_pk_sql;\n+\n+DROP TABLE IF EXISTS merge_tree_pk_sql;\n+\n+DROP TABLE IF EXISTS replicated_merge_tree_pk_sql;\n+\n+CREATE TABLE replicated_merge_tree_pk_sql\n+(\n+    key UInt64,\n+    value String,\n+    PRIMARY KEY (key)\n+)\n+ENGINE = ReplicatedReplacingMergeTree('/clickhouse/test/01532_primary_key_without', 'r1');\n+\n+SHOW CREATE TABLE replicated_merge_tree_pk_sql;\n+\n+INSERT INTO replicated_merge_tree_pk_sql VALUES (1, 'a');\n+INSERT INTO replicated_merge_tree_pk_sql VALUES (2, 'b');\n+\n+SELECT * FROM replicated_merge_tree_pk_sql ORDER BY key;\n+\n+INSERT INTO replicated_merge_tree_pk_sql VALUES (1, 'c');\n+\n+DETACH TABLE replicated_merge_tree_pk_sql;\n+ATTACH TABLE replicated_merge_tree_pk_sql;\n+\n+SELECT * FROM replicated_merge_tree_pk_sql FINAL ORDER BY key;\n+\n+ALTER TABLE replicated_merge_tree_pk_sql ADD COLUMN key2 UInt64, MODIFY ORDER BY (key, key2);\n+\n+INSERT INTO replicated_merge_tree_pk_sql VALUES (2, 'd', 555);\n+\n+INSERT INTO replicated_merge_tree_pk_sql VALUES (2, 'e', 555);\n+\n+SELECT * FROM replicated_merge_tree_pk_sql FINAL ORDER BY key;\n+\n+DETACH TABLE replicated_merge_tree_pk_sql;\n+ATTACH TABLE replicated_merge_tree_pk_sql;\n+\n+SHOW CREATE TABLE replicated_merge_tree_pk_sql;\n+\n+DROP TABLE IF EXISTS replicated_merge_tree_pk_sql;\n",
  "problem_statement": "Allow to specify PRIMARY KEY near the list of columns\n`CREATE TABLE test (x Int32, y Int32, s String, PRIMARY KEY (x, y)) ENGINE = MergeTree;`\r\nshould be equivalent to\r\n`CREATE TABLE test (x Int32, y Int32, s String) ENGINE = MergeTree PRIMARY KEY (x, y);`\n",
  "hints_text": "EATE TABLE [IF NOT EXISTS] [db.]table_name [ON CLUSTER cluster]\r\n(\r\n    name1 [type1] [DEFAULT|MATERIALIZED|ALIAS expr1] [TTL expr1],\r\n    name2 [type2] [DEFAULT|MATERIALIZED|ALIAS expr2] [TTL expr2],\r\n    ...\r\n    INDEX index_name1 expr1 TYPE type1(...) GRANULARITY value1,\r\n    INDEX index_name2 expr2 TYPE type2(...) GRANULARITY value2\r\n) ENGINE = MergeTree()\r\nORDER BY expr\r\n[PARTITION BY expr]\r\n[PRIMARY KEY expr]\r\n[SAMPLE BY expr]\r\n[TTL expr [DELETE|TO DISK 'xxx'|TO VOLUME 'xxx'], ...]\r\n[SETTINGS name=value, ...]\nEATE TABLE [IF NOT EXISTS] [db.]table_name [ON CLUSTER cluster]\r\n(\r\nname1 [type1] [DEFAULT|MATERIALIZED|ALIAS expr1] [TTL expr1],\r\nname2 [type2] [DEFAULT|MATERIALIZED|ALIAS expr2] [TTL expr2],\r\n...\r\nINDEX index_name1 expr1 TYPE type1(...) GRANULARITY value1,\r\nINDEX index_name2 expr2 TYPE type2(...) GRANULARITY value2\r\n) ENGINE = MergeTree()\r\nORDER BY expr\r\n[PARTITION BY expr]\r\n[PRIMARY KEY expr]\r\n[SAMPLE BY expr]\r\n[TTL expr [DELETE|TO DISK 'xxx'|TO VOLUME 'xxx'], ...]\r\n[SETTINGS name=value, ...]\nEATE TABLE [IF NOT EXISTS] [db.]table_name [ON CLUSTER cluster]\r\n(\r\nname1 [type1] [DEFAULT|MATERIALIZED|ALIAS expr1] [TTL expr1],\r\nname2 [type2] [DEFAULT|MATERIALIZED|ALIAS expr2] [TTL expr2],\r\n...\r\nINDEX index_name1 expr1 TYPE type1(...) GRANULARITY value1,\r\nINDEX index_name2 expr2 TYPE type2(...) GRANULARITY value2\r\n) ENGINE = MergeTree()\r\nORDER BY expr\r\n[PARTITION BY expr]\r\n[PRIMARY KEY expr]\r\n[SAMPLE BY expr]\r\n[TTL expr [DELETE|TO DISK 'xxx'|TO VOLUME 'xxx'], ...]\r\n[SETTINGS name=value, ...]\nbut `CREATE TABLE test (x Int32, y Int32, s String) ENGINE = MergeTree PRIMARY KEY (x, y);` is not valid create query...",
  "created_at": "2020-10-23T11:20:13Z",
  "modified_files": [
    "src/Storages/MergeTree/registerStorageMergeTree.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01532_primary_key_without_order_by_zookeeper.reference",
    "b/tests/queries/0_stateless/01532_primary_key_without_order_by_zookeeper.sql"
  ]
}