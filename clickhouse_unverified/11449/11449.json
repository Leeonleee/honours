{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 11449,
  "instance_id": "ClickHouse__ClickHouse-11449",
  "issue_numbers": [
    "9051"
  ],
  "base_commit": "3dbeb14b4f0c7941afa43f07c8aed7d1b4ea4a86",
  "patch": "diff --git a/programs/server/Server.cpp b/programs/server/Server.cpp\nindex e587e1340751..d70806303d25 100644\n--- a/programs/server/Server.cpp\n+++ b/programs/server/Server.cpp\n@@ -125,6 +125,7 @@ namespace ErrorCodes\n     extern const int FAILED_TO_GETPWUID;\n     extern const int MISMATCHING_USERS_FOR_PROCESS_AND_DATA;\n     extern const int NETWORK_ERROR;\n+    extern const int UNKNOWN_ELEMENT_IN_CONFIG;\n }\n \n \n@@ -210,6 +211,52 @@ void Server::defineOptions(Poco::Util::OptionSet & options)\n     BaseDaemon::defineOptions(options);\n }\n \n+\n+/// Check that there is no user-level settings at the top level in config.\n+/// This is a common source of mistake (user don't know where to write user-level setting).\n+void checkForUserSettingsAtTopLevel(const Poco::Util::AbstractConfiguration & config, const std::string & path)\n+{\n+    if (config.getBool(\"skip_check_for_incorrect_settings\", false))\n+        return;\n+\n+    Settings settings;\n+    for (const auto & setting : settings)\n+    {\n+        std::string name = setting.getName().toString();\n+        if (config.has(name))\n+        {\n+            throw Exception(fmt::format(\"A setting '{}' appeared at top level in config {}.\"\n+                \" But it is user-level setting that should be located in users.xml inside <profiles> section for specific profile.\"\n+                \" You can add it to <profiles><default> if you want to change default value of this setting.\"\n+                \" You can also disable the check - specify <skip_check_for_incorrect_settings>1</skip_check_for_incorrect_settings>\"\n+                \" in the main configuration file.\",\n+                name, path),\n+                ErrorCodes::UNKNOWN_ELEMENT_IN_CONFIG);\n+        }\n+    }\n+}\n+\n+void checkForUsersNotInMainConfig(\n+    const Poco::Util::AbstractConfiguration & config,\n+    const std::string & config_path,\n+    const std::string & users_config_path,\n+    Poco::Logger * log)\n+{\n+    if (config.getBool(\"skip_check_for_incorrect_settings\", false))\n+        return;\n+\n+    if (config.has(\"users\") || config.has(\"profiles\") || config.has(\"quotas\"))\n+    {\n+        /// We cannot throw exception here, because we have support for obsolete 'conf.d' directory\n+        /// (that does not correspond to config.d or users.d) but substitute configuration to both of them.\n+\n+        LOG_ERROR(log, \"The <users>, <profiles> and <quotas> elements should be located in users config file: {} not in main config {}.\"\n+            \" Also note that you should place configuration changes to the appropriate *.d directory like 'users.d'.\",\n+            users_config_path, config_path);\n+    }\n+}\n+\n+\n int Server::main(const std::vector<std::string> & /*args*/)\n {\n     Poco::Logger * log = &logger();\n@@ -269,6 +316,8 @@ int Server::main(const std::vector<std::string> & /*args*/)\n         config().add(loaded_config.configuration.duplicate(), PRIO_DEFAULT, false);\n     }\n \n+    checkForUserSettingsAtTopLevel(config(), config_path);\n+\n     const auto memory_amount = getMemoryAmount();\n \n #if defined(OS_LINUX)\n@@ -473,13 +522,16 @@ int Server::main(const std::vector<std::string> & /*args*/)\n         SensitiveDataMasker::setInstance(std::make_unique<SensitiveDataMasker>(config(), \"query_masking_rules\"));\n     }\n \n-    auto main_config_reloader = std::make_unique<ConfigReloader>(config_path,\n+    auto main_config_reloader = std::make_unique<ConfigReloader>(\n+        config_path,\n         include_from_path,\n         config().getString(\"path\", \"\"),\n         std::move(main_config_zk_node_cache),\n         main_config_zk_changed_event,\n         [&](ConfigurationPtr config)\n         {\n+            checkForUserSettingsAtTopLevel(*config, config_path);\n+\n             // FIXME logging-related things need synchronization -- see the 'Logger * log' saved\n             // in a lot of places. For now, disable updating log configuration without server restart.\n             //setTextLog(global_context->getTextLog());\n@@ -508,12 +560,21 @@ int Server::main(const std::vector<std::string> & /*args*/)\n         if (Poco::File(config_dir + users_config_path).exists())\n             users_config_path = config_dir + users_config_path;\n     }\n-    auto users_config_reloader = std::make_unique<ConfigReloader>(users_config_path,\n+\n+    if (users_config_path != config_path)\n+        checkForUsersNotInMainConfig(config(), config_path, users_config_path, log);\n+\n+    auto users_config_reloader = std::make_unique<ConfigReloader>(\n+        users_config_path,\n         include_from_path,\n         config().getString(\"path\", \"\"),\n         zkutil::ZooKeeperNodeCache([&] { return global_context->getZooKeeper(); }),\n         std::make_shared<Poco::Event>(),\n-        [&](ConfigurationPtr config) { global_context->setUsersConfig(config); },\n+        [&](ConfigurationPtr config)\n+        {\n+            global_context->setUsersConfig(config);\n+            checkForUserSettingsAtTopLevel(*config, users_config_path);\n+        },\n         /* already_loaded = */ false);\n \n     /// Reload config in SYSTEM RELOAD CONFIG query.\ndiff --git a/programs/server/config.xml b/programs/server/config.xml\nindex 21605edeb36e..ba870d8a8ea5 100644\n--- a/programs/server/config.xml\n+++ b/programs/server/config.xml\n@@ -1,6 +1,9 @@\n <?xml version=\"1.0\"?>\n <!--\n   NOTE: User and query level settings are set up in \"users.xml\" file.\n+  If you have accidentially specified user-level settings here, server won't start.\n+  You can either move the settings to the right place inside \"users.xml\" file\n+   or add <skip_check_for_incorrect_settings>1</skip_check_for_incorrect_settings> here.\n -->\n <yandex>\n     <logger>\n",
  "test_patch": "diff --git a/docker/test/performance-comparison/config/config.d/perf-comparison-tweaks-config.xml b/docker/test/performance-comparison/config/config.d/perf-comparison-tweaks-config.xml\nindex e41ab8eb75d0..5dcc3c51eca1 100644\n--- a/docker/test/performance-comparison/config/config.d/perf-comparison-tweaks-config.xml\n+++ b/docker/test/performance-comparison/config/config.d/perf-comparison-tweaks-config.xml\n@@ -19,6 +19,5 @@\n         <collect_interval_milliseconds>1000</collect_interval_milliseconds>\n     </metric_log>\n \n-    <use_uncompressed_cache>0</use_uncompressed_cache>\n     <uncompressed_cache_size>1000000000</uncompressed_cache_size>\n </yandex>\n",
  "problem_statement": "Profile settings in config.d silently ignored\nPut the `log_queries.xml` from test configs to `config.d` instead of `users.d`, and enjoy your server working perfectly and not logging the queries despite all the config files looking correct.\r\n\r\nShould throw an error.\n",
  "hints_text": "Not sure if it's a good idea\n> Not sure if it's a good idea\r\n\r\nWhy not, is it going to break something?\n1) conf.d content added both to users.xml and config.xml (yes, it's a bit weird) \r\n2) i think warning may be good, but exception can make pain for updates (clickhouse just don't start with same config is bad UX) \r\n",
  "created_at": "2020-06-04T19:33:17Z"
}