{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 44508,
  "instance_id": "ClickHouse__ClickHouse-44508",
  "issue_numbers": [
    "44196"
  ],
  "base_commit": "bb8cb829f9a2f51bb8044748b878f718e54aa763",
  "patch": "diff --git a/src/Analyzer/Passes/QueryAnalysisPass.cpp b/src/Analyzer/Passes/QueryAnalysisPass.cpp\nindex e93548d34ede..4aa6422b6b8c 100644\n--- a/src/Analyzer/Passes/QueryAnalysisPass.cpp\n+++ b/src/Analyzer/Passes/QueryAnalysisPass.cpp\n@@ -2020,7 +2020,10 @@ QueryTreeNodePtr QueryAnalyzer::tryResolveTableIdentifierFromDatabaseCatalog(con\n \n     StorageID storage_id(database_name, table_name);\n     storage_id = context->resolveStorageID(storage_id);\n-    auto storage = DatabaseCatalog::instance().getTable(storage_id, context);\n+    auto storage = DatabaseCatalog::instance().tryGetTable(storage_id, context);\n+    if (!storage)\n+        return {};\n+\n     auto storage_lock = storage->lockForShare(context->getInitialQueryId(), context->getSettingsRef().lock_acquire_timeout);\n     auto storage_snapshot = storage->getStorageSnapshot(storage->getInMemoryMetadataPtr(), context);\n \n@@ -2867,7 +2870,10 @@ IdentifierResolveResult QueryAnalyzer::tryResolveIdentifierInParentScopes(const\n \n         if (resolved_identifier)\n         {\n-            bool is_cte = resolved_identifier->as<QueryNode>() && resolved_identifier->as<QueryNode>()->isCTE();\n+            auto * subquery_node = resolved_identifier->as<QueryNode>();\n+            auto * union_node = resolved_identifier->as<UnionNode>();\n+\n+            bool is_cte = (subquery_node && subquery_node->isCTE()) || (union_node && union_node->isCTE());\n \n             /** From parent scopes we can resolve table identifiers only as CTE.\n               * Example: SELECT (SELECT 1 FROM a) FROM test_table AS a;\n@@ -4084,8 +4090,6 @@ ProjectionNames QueryAnalyzer::resolveFunction(QueryTreeNodePtr & node, Identifi\n         auto & in_second_argument = function_in_arguments_nodes[1];\n         auto * table_node = in_second_argument->as<TableNode>();\n         auto * table_function_node = in_second_argument->as<TableFunctionNode>();\n-        auto * query_node = in_second_argument->as<QueryNode>();\n-        auto * union_node = in_second_argument->as<UnionNode>();\n \n         if (table_node && dynamic_cast<StorageSet *>(table_node->getStorage().get()) != nullptr)\n         {\n@@ -4118,15 +4122,9 @@ ProjectionNames QueryAnalyzer::resolveFunction(QueryTreeNodePtr & node, Identifi\n \n             in_second_argument = std::move(in_second_argument_query_node);\n         }\n-        else if (query_node || union_node)\n+        else\n         {\n-            IdentifierResolveScope subquery_scope(in_second_argument, &scope /*parent_scope*/);\n-            subquery_scope.subquery_depth = scope.subquery_depth + 1;\n-\n-            if (query_node)\n-                resolveQuery(in_second_argument, subquery_scope);\n-            else if (union_node)\n-                resolveUnion(in_second_argument, subquery_scope);\n+            resolveExpressionNode(in_second_argument, scope, false /*allow_lambda_expression*/, true /*allow_table_expression*/);\n         }\n     }\n \n@@ -4717,13 +4715,29 @@ ProjectionNames QueryAnalyzer::resolveExpressionNode(QueryTreeNodePtr & node, Id\n             {\n                 node = tryResolveIdentifier({unresolved_identifier, IdentifierLookupContext::TABLE_EXPRESSION}, scope).resolved_identifier;\n \n-                /// If table identifier is resolved as CTE clone it\n-                bool resolved_as_cte = node && node->as<QueryNode>() && node->as<QueryNode>()->isCTE();\n+                /// If table identifier is resolved as CTE clone it and resolve\n+                auto * subquery_node = node->as<QueryNode>();\n+                auto * union_node = node->as<UnionNode>();\n+                bool resolved_as_cte = (subquery_node && subquery_node->isCTE()) || (union_node && union_node->isCTE());\n \n                 if (resolved_as_cte)\n                 {\n                     node = node->clone();\n-                    node->as<QueryNode &>().setIsCTE(false);\n+                    subquery_node = node->as<QueryNode>();\n+                    union_node = node->as<UnionNode>();\n+\n+                    if (subquery_node)\n+                        subquery_node->setIsCTE(false);\n+                    else\n+                        union_node->setIsCTE(false);\n+\n+                    IdentifierResolveScope subquery_scope(node, &scope /*parent_scope*/);\n+                    subquery_scope.subquery_depth = scope.subquery_depth + 1;\n+\n+                    if (subquery_node)\n+                        resolveQuery(node, subquery_scope);\n+                    else\n+                        resolveUnion(node, subquery_scope);\n                 }\n             }\n \n@@ -4839,6 +4853,9 @@ ProjectionNames QueryAnalyzer::resolveExpressionNode(QueryTreeNodePtr & node, Id\n             IdentifierResolveScope subquery_scope(node, &scope /*parent_scope*/);\n             subquery_scope.subquery_depth = scope.subquery_depth + 1;\n \n+            ++subquery_counter;\n+            std::string projection_name = \"_subquery_\" + std::to_string(subquery_counter);\n+\n             if (node_type == QueryTreeNodeType::QUERY)\n                 resolveQuery(node, subquery_scope);\n             else\n@@ -4847,9 +4864,8 @@ ProjectionNames QueryAnalyzer::resolveExpressionNode(QueryTreeNodePtr & node, Id\n             if (!allow_table_expression)\n                 evaluateScalarSubqueryIfNeeded(node, subquery_scope.subquery_depth, subquery_scope.context);\n \n-            ++subquery_counter;\n             if (result_projection_names.empty())\n-                result_projection_names.push_back(\"_subquery_\" + std::to_string(subquery_counter));\n+                result_projection_names.push_back(std::move(projection_name));\n \n             break;\n         }\n@@ -5196,11 +5212,6 @@ void QueryAnalyzer::initializeQueryJoinTreeNode(QueryTreeNodePtr & join_tree_nod\n \n                 if (resolved_identifier_query_node || resolved_identifier_union_node)\n                 {\n-                    if (resolved_identifier_query_node)\n-                        resolved_identifier_query_node->setIsCTE(false);\n-                    else\n-                        resolved_identifier_union_node->setIsCTE(false);\n-\n                     if (table_expression_modifiers.has_value())\n                     {\n                         throw Exception(ErrorCodes::UNSUPPORTED_METHOD,\n@@ -5437,14 +5448,7 @@ void QueryAnalyzer::resolveQueryJoinTreeNode(QueryTreeNodePtr & join_tree_node,\n             [[fallthrough]];\n         case QueryTreeNodeType::UNION:\n         {\n-            IdentifierResolveScope subquery_scope(join_tree_node, &scope);\n-            subquery_scope.subquery_depth = scope.subquery_depth + 1;\n-\n-            if (from_node_type == QueryTreeNodeType::QUERY)\n-                resolveQuery(join_tree_node, subquery_scope);\n-            else if (from_node_type == QueryTreeNodeType::UNION)\n-                resolveUnion(join_tree_node, subquery_scope);\n-\n+            resolveExpressionNode(join_tree_node, scope, false /*allow_lambda_expression*/, true /*allow_table_expression*/);\n             break;\n         }\n         case QueryTreeNodeType::TABLE_FUNCTION:\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02337_analyzer_columns_basic.sql b/tests/queries/0_stateless/02337_analyzer_columns_basic.sql\nindex 76f9f8b25e46..368a5670d173 100644\n--- a/tests/queries/0_stateless/02337_analyzer_columns_basic.sql\n+++ b/tests/queries/0_stateless/02337_analyzer_columns_basic.sql\n@@ -31,7 +31,7 @@ INSERT INTO test_table VALUES (0, 'Value');\n SELECT 'Table access without table name qualification';\n \n SELECT test_id FROM test_table; -- { serverError 47 }\n-SELECT test_id FROM test_unknown_table; -- { serverError 60 }\n+SELECT test_id FROM test_unknown_table; -- { serverError 47 }\n \n DESCRIBE (SELECT id FROM test_table);\n SELECT id FROM test_table;\ndiff --git a/tests/queries/0_stateless/02513_analyzer_duplicate_alias_crash_fix.reference b/tests/queries/0_stateless/02513_analyzer_duplicate_alias_crash_fix.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/02513_analyzer_duplicate_alias_crash_fix.sql b/tests/queries/0_stateless/02513_analyzer_duplicate_alias_crash_fix.sql\nnew file mode 100644\nindex 000000000000..fb50ea2c4ca4\n--- /dev/null\n+++ b/tests/queries/0_stateless/02513_analyzer_duplicate_alias_crash_fix.sql\n@@ -0,0 +1,4 @@\n+SET allow_experimental_analyzer = 1;\n+\n+SELECT toUInt64(NULL) AS x FROM (SELECT 1) HAVING x IN\n+    (SELECT NULL FROM (SELECT x IN (SELECT x IN (SELECT 1), x IN (SELECT 1) FROM (SELECT 1 WHERE x IN (SELECT NULL FROM (SELECT NULL))))));\n",
  "problem_statement": "Analyzer: Logical error: 'Node NULL with duplicate alias does not exists in alias table'\nhttps://s3.amazonaws.com/clickhouse-test-reports/0/8fc23262c5f4e15a5cbb548b7ff88699e8e210fb/fuzzer_astfuzzerasan//report.html\r\n```\r\n022.12.13 11:29:57.012562 [ 157 ] {d6b6ba0f-d198-446f-9f26-364cfc4fd57b} <Fatal> : Logical error: 'Node NULL with duplicate alias  does not exists in alias table. In scope (SELECT x IN (SELECT 255 FROM (SELECT -2 AS z)), 9223372036854775806, x IN (SELECT countIf(y, z = -2147483647) FROM (SELECT '9223372036854775807' AS y, -2147483648 AS z)) FROM (SELECT NULL WHERE x IN (SELECT NULL FROM (SELECT NULL))))'.\r\n2022.12.13 11:29:57.013208 [ 715 ] {} <Fatal> BaseDaemon: ########################################\r\n2022.12.13 11:29:57.013334 [ 715 ] {} <Fatal> BaseDaemon: (version 22.12.1.1 (official build), build id: B2D526007484596E9DC2915910EF8A836262A715) (from thread 157) (query_id: d6b6ba0f-d198-446f-9f26-364cfc4fd57b) (query: SELECT toUInt64(NULL) AS x FROM (SELECT 1.0001 WHERE 100) WITH TOTALS HAVING x IN (SELECT x IN (SELECT countIf(z = -2147483647) FROM (SELECT 1025 AS z)), NULL FROM (SELECT x IN (SELECT x IN (SELECT 255 FROM (SELECT -2 AS z)), 9223372036854775806, x IN (SELECT countIf(y, z = -2147483647) FROM (SELECT '9223372036854775807' AS y, -2147483648 AS z)) FROM (SELECT NULL WHERE x IN (SELECT NULL FROM (SELECT NULL)))), '0.7'))) Received signal Aborted (6)\r\n2022.12.13 11:29:57.013434 [ 715 ] {} <Fatal> BaseDaemon: \r\n2022.12.13 11:29:57.013562 [ 715 ] {} <Fatal> BaseDaemon: Stack trace: 0x7fd4e646d00b 0x7fd4e644c859 0x1f754bdb 0x1f7552fb 0x30beba0e 0x30b631d4 0x30ba523c 0x30b71177 0x30b6f237 0x30b5c6b9 0x30b7894e 0x30b5c651 0x30b70eed 0x30b6f237 0x30b9d05a 0x30b71177 0x30b5db31 0x30b56e0c 0x30b526fc 0x3170c05f 0x30c86993 0x3203829c 0x3203326c 0x3453a51e 0x3456ac26 0x3bc95fef 0x3bc96d45 0x3c15aafc 0x3c1540ad 0x7fd4e6624609 0x7fd4e6549133\r\n2022.12.13 11:29:57.013678 [ 715 ] {} <Fatal> BaseDaemon: 3. raise @ 0x7fd4e646d00b in ?\r\n2022.12.13 11:29:57.013784 [ 715 ] {} <Fatal> BaseDaemon: 4. abort @ 0x7fd4e644c859 in ?\r\n2022.12.13 11:29:57.153877 [ 715 ] {} <Fatal> BaseDaemon: 5. ./build_docker/../src/Common/Exception.cpp:41: DB::abortOnFailedAssertion(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&) @ 0x1f754bdb in /workspace/clickhouse\r\n2022.12.13 11:29:57.289686 [ 715 ] {} <Fatal> BaseDaemon: 6.1. inlined from ./build_docker/../src/Common/Exception.cpp:64: DB::handle_error_code(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, int, bool, std::__1::vector<void*, std::__1::allocator<void*>> const&)\r\n2022.12.13 11:29:57.289798 [ 715 ] {} <Fatal> BaseDaemon: 6. ./build_docker/../src/Common/Exception.cpp:78: DB::Exception::Exception(DB::Exception::MessageMasked const&, int, bool) @ 0x1f7552fb in /workspace/clickhouse\r\n2022.12.13 11:29:57.826710 [ 715 ] {} <Fatal> BaseDaemon: 7.1. inlined from ./build_docker/../contrib/llvm-project/libcxx/include/string:1499: std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__is_long[abi:v15000]() const\r\n2022.12.13 11:29:57.826832 [ 715 ] {} <Fatal> BaseDaemon: 7.2. inlined from ./build_docker/../contrib/llvm-project/libcxx/include/string:2333: ~basic_string\r\n2022.12.13 11:29:57.826906 [ 715 ] {} <Fatal> BaseDaemon: 7.3. inlined from ./build_docker/../src/Common/Exception.h:32: ~MessageMasked\r\n2022.12.13 11:29:57.826983 [ 715 ] {} <Fatal> BaseDaemon: 7.4. inlined from ./build_docker/../src/Common/Exception.h:41: Exception\r\n2022.12.13 11:29:57.827052 [ 715 ] {} <Fatal> BaseDaemon: 7. ./build_docker/../src/Common/Exception.h:50: DB::Exception::Exception<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(int, fmt::v8::basic_format_string<char, fmt::v8::type_identity<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>::type, fmt::v8::type_identity<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&>::type, fmt::v8::type_identity<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>::type>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&&) @ 0x30beba0e in /workspace/clickhouse\r\n2022.12.13 11:29:58.246346 [ 715 ] {} <Fatal> BaseDaemon: 8. ./build_docker/../src/Analyzer/Passes/QueryAnalysisPass.cpp:6057: DB::(anonymous namespace)::QueryAnalyzer::resolveQuery(std::__1::shared_ptr<DB::IQueryTreeNode> const&, DB::(anonymous namespace)::IdentifierResolveScope&) @ 0x30b631d4 in /workspace/clickhouse\r\n2022.12.13 11:29:58.834149 [ 715 ] {} <Fatal> BaseDaemon: 9. ./build_docker/../src/Analyzer/Passes/QueryAnalysisPass.cpp:4127: DB::(anonymous namespace)::QueryAnalyzer::resolveFunction(std::__1::shared_ptr<DB::IQueryTreeNode>&, DB::(anonymous namespace)::IdentifierResolveScope&) @ 0x30ba523c in /workspace/clickhouse\r\n2022.12.13 11:29:59.231757 [ 715 ] {} <Fatal> BaseDaemon: 10. ./build_docker/../src/Analyzer/Passes/QueryAnalysisPass.cpp:0: DB::(anonymous namespace)::QueryAnalyzer::resolveExpressionNode(std::__1::shared_ptr<DB::IQueryTreeNode>&, DB::(anonymous namespace)::IdentifierResolveScope&, bool, bool) @ 0x30b71177 in /workspace/clickhouse\r\n2022.12.13 11:29:59.623812 [ 715 ] {} <Fatal> BaseDaemon: 11. ./build_docker/../src/Analyzer/Passes/QueryAnalysisPass.cpp:0: DB::(anonymous namespace)::QueryAnalyzer::resolveExpressionNodeList(std::__1::shared_ptr<DB::IQueryTreeNode>&, DB::(anonymous namespace)::IdentifierResolveScope&, bool, bool) @ 0x30b6f237 in /workspace/clickhouse\r\n2022.12.13 11:30:00.046457 [ 715 ] {} <Fatal> BaseDaemon: 12.1. inlined from ./build_docker/../contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:815: std::__1::shared_ptr<DB::IQueryTreeNode>::operator->[abi:v15000]() const\r\n2022.12.13 11:30:00.046558 [ 715 ] {} <Fatal> BaseDaemon: 12.2. inlined from ./build_docker/../src/Analyzer/Passes/QueryAnalysisPass.cpp:5101: DB::(anonymous namespace)::QueryAnalyzer::resolveProjectionExpressionNodeList(std::__1::shared_ptr<DB::IQueryTreeNode>&, DB::(anonymous namespace)::IdentifierResolveScope&)\r\n2022.12.13 11:30:00.046616 [ 715 ] {} <Fatal> BaseDaemon: 12. ./build_docker/../src/Analyzer/Passes/QueryAnalysisPass.cpp:5928: DB::(anonymous namespace)::QueryAnalyzer::resolveQuery(std::__1::shared_ptr<DB::IQueryTreeNode> const&, DB::(anonymous namespace)::IdentifierResolveScope&) @ 0x30b5c6b9 in /workspace/clickhouse\r\n2022.12.13 11:30:00.528380 [ 715 ] {} <Fatal> BaseDaemon: 13. ./build_docker/../src/Analyzer/Passes/QueryAnalysisPass.cpp:5434: DB::(anonymous namespace)::QueryAnalyzer::resolveQueryJoinTreeNode(std::__1::shared_ptr<DB::IQueryTreeNode>&, DB::(anonymous namespace)::IdentifierResolveScope&, DB::(anonymous namespace)::QueryExpressionsAliasVisitor&) @ 0x30b7894e in /workspace/clickhouse\r\n2022.12.13 11:30:00.936632 [ 715 ] {} <Fatal> BaseDaemon: 14. ./build_docker/../src/Analyzer/Passes/QueryAnalysisPass.cpp:0: DB::(anonymous namespace)::QueryAnalyzer::resolveQuery(std::__1::shared_ptr<DB::IQueryTreeNode> const&, DB::(anonymous namespace)::IdentifierResolveScope&) @ 0x30b5c651 in /workspace/clickhouse\r\n2022.12.13 11:30:01.329811 [ 715 ] {} <Fatal> BaseDaemon: 15. ./build_docker/../src/Analyzer/Passes/QueryAnalysisPass.cpp:4833: DB::(anonymous namespace)::QueryAnalyzer::resolveExpressionNode(std::__1::shared_ptr<DB::IQueryTreeNode>&, DB::(anonymous namespace)::IdentifierResolveScope&, bool, bool) @ 0x30b70eed in /workspace/clickhouse\r\n2022.12.13 11:30:01.726878 [ 715 ] {} <Fatal> BaseDaemon: 16. ./build_docker/../src/Analyzer/Passes/QueryAnalysisPass.cpp:0: DB::(anonymous namespace)::QueryAnalyzer::resolveExpressionNodeList(std::__1::shared_ptr<DB::IQueryTreeNode>&, DB::(anonymous namespace)::IdentifierResolveScope&, bool, bool) @ 0x30b6f237 in /workspace/clickhouse\r\n2022.12.13 11:30:02.320024 [ 715 ] {} <Fatal> BaseDaemon: 17. ./build_docker/../src/Analyzer/Passes/QueryAnalysisPass.cpp:0: DB::(anonymous namespace)::QueryAnalyzer::resolveFunction(std::__1::shared_ptr<DB::IQueryTreeNode>&, DB::(anonymous namespace)::IdentifierResolveScope&) @ 0x30b9d05a in /workspace/clickhouse\r\n2022.12.13 11:30:02.722210 [ 715 ] {} <Fatal> BaseDaemon: 18. ./build_docker/../src/Analyzer/Passes/QueryAnalysisPass.cpp:0: DB::(anonymous namespace)::QueryAnalyzer::resolveExpressionNode(std::__1::shared_ptr<DB::IQueryTreeNode>&, DB::(anonymous namespace)::IdentifierResolveScope&, bool, bool) @ 0x30b71177 in /workspace/clickhouse\r\n2022.12.13 11:30:03.134851 [ 715 ] {} <Fatal> BaseDaemon: 19.1. inlined from ./build_docker/../contrib/llvm-project/libcxx/include/vector:580: std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::data[abi:v15000]() const\r\n2022.12.13 11:30:03.134953 [ 715 ] {} <Fatal> BaseDaemon: 19.2. inlined from ./build_docker/../contrib/llvm-project/libcxx/include/vector:760: std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>>::__annotate_delete[abi:v15000]() const\r\n2022.12.13 11:30:03.135019 [ 715 ] {} <Fatal> BaseDaemon: 19.3. inlined from ./build_docker/../contrib/llvm-project/libcxx/include/vector:431: ~vector\r\n2022.12.13 11:30:03.135066 [ 715 ] {} <Fatal> BaseDaemon: 19. ./build_docker/../src/Analyzer/Passes/QueryAnalysisPass.cpp:5965: DB::(anonymous namespace)::QueryAnalyzer::resolveQuery(std::__1::shared_ptr<DB::IQueryTreeNode> const&, DB::(anonymous namespace)::IdentifierResolveScope&) @ 0x30b5db31 in /workspace/clickhouse\r\n2022.12.13 11:30:03.515035 [ 715 ] {} <Fatal> BaseDaemon: 20.1. inlined from ./build_docker/../src/Analyzer/Passes/QueryAnalysisPass.cpp:996: DB::(anonymous namespace)::QueryAnalyzer::resolve(std::__1::shared_ptr<DB::IQueryTreeNode>, std::__1::shared_ptr<DB::IQueryTreeNode> const&, std::__1::shared_ptr<DB::Context const>)\r\n2022.12.13 11:30:03.515137 [ 715 ] {} <Fatal> BaseDaemon: 20. ./build_docker/../src/Analyzer/Passes/QueryAnalysisPass.cpp:6249: DB::QueryAnalysisPass::run(std::__1::shared_ptr<DB::IQueryTreeNode>, std::__1::shared_ptr<DB::Context const>) @ 0x30b56e0c in /workspace/clickhouse\r\n2022.12.13 11:30:03.545891 [ 715 ] {} <Fatal> BaseDaemon: 21. ./build_docker/../src/Analyzer/QueryTreePassManager.cpp:97: DB::QueryTreePassManager::run(std::__1::shared_ptr<DB::IQueryTreeNode>) @ 0x30b526fc in /workspace/clickhouse\r\n2022.12.13 11:30:03.603852 [ 715 ] {} <Fatal> BaseDaemon: 22.1. inlined from ./build_docker/../src/Analyzer/QueryTreePassManager.h:13: ~QueryTreePassManager\r\n2022.12.13 11:30:03.603944 [ 715 ] {} <Fatal> BaseDaemon: 22.2. inlined from ./build_docker/../src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:57: DB::(anonymous namespace)::buildQueryTreeAndRunPasses(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const> const&)\r\n2022.12.13 11:30:03.603993 [ 715 ] {} <Fatal> BaseDaemon: 22. ./build_docker/../src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:66: DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::__1::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::__1::shared_ptr<DB::Context const>) @ 0x3170c05f in /workspace/clickhouse\r\n2022.12.13 11:30:03.668901 [ 715 ] {} <Fatal> BaseDaemon: 23.1. inlined from ./build_docker/../contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:0: std::__1::__unique_if<DB::InterpreterSelectQueryAnalyzer>::__unique_single std::__1::make_unique[abi:v15000]<DB::InterpreterSelectQueryAnalyzer, std::__1::shared_ptr<DB::IAST>&, DB::SelectQueryOptions const&, std::__1::shared_ptr<DB::Context>&>(std::__1::shared_ptr<DB::IAST>&, DB::SelectQueryOptions const&, std::__1::shared_ptr<DB::Context>&)\r\n2022.12.13 11:30:03.668973 [ 715 ] {} <Fatal> BaseDaemon: 23. ./build_docker/../src/Interpreters/InterpreterFactory.cpp:140: DB::InterpreterFactory::get(std::__1::shared_ptr<DB::IAST>&, std::__1::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x30c86993 in /workspace/clickhouse\r\n2022.12.13 11:30:04.007124 [ 715 ] {} <Fatal> BaseDaemon: 24. ./build_docker/../src/Interpreters/executeQuery.cpp:0: DB::executeQueryImpl(char const*, char const*, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x3203829c in /workspace/clickhouse\r\n2022.12.13 11:30:04.376552 [ 715 ] {} <Fatal> BaseDaemon: 25. ./build_docker/../src/Interpreters/executeQuery.cpp:1083: DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x3203326c in /workspace/clickhouse\r\n2022.12.13 11:30:04.603011 [ 715 ] {} <Fatal> BaseDaemon: 26. ./build_docker/../src/Server/TCPHandler.cpp:0: DB::TCPHandler::runImpl() @ 0x3453a51e in /workspace/clickhouse\r\n2022.12.13 11:30:04.976828 [ 715 ] {} <Fatal> BaseDaemon: 27. ./build_docker/../src/Server/TCPHandler.cpp:1904: DB::TCPHandler::run() @ 0x3456ac26 in /workspace/clickhouse\r\n2022.12.13 11:30:04.986909 [ 715 ] {} <Fatal> BaseDaemon: 28. ./build_docker/../contrib/poco/Net/src/TCPServerConnection.cpp:57: Poco::Net::TCPServerConnection::start() @ 0x3bc95fef in /workspace/clickhouse\r\n2022.12.13 11:30:05.005291 [ 715 ] {} <Fatal> BaseDaemon: 29.1. inlined from ./build_docker/../contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:48: std::__1::default_delete<Poco::Net::TCPServerConnection>::operator()[abi:v15000](Poco::Net::TCPServerConnection*) const\r\n2022.12.13 11:30:05.005379 [ 715 ] {} <Fatal> BaseDaemon: 29.2. inlined from ./build_docker/../contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:305: std::__1::unique_ptr<Poco::Net::TCPServerConnection, std::__1::default_delete<Poco::Net::TCPServerConnection>>::reset[abi:v15000](Poco::Net::TCPServerConnection*)\r\n2022.12.13 11:30:05.005436 [ 715 ] {} <Fatal> BaseDaemon: 29.3. inlined from ./build_docker/../contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:259: ~unique_ptr\r\n2022.12.13 11:30:05.005482 [ 715 ] {} <Fatal> BaseDaemon: 29. ./build_docker/../contrib/poco/Net/src/TCPServerDispatcher.cpp:116: Poco::Net::TCPServerDispatcher::run() @ 0x3bc96d45 in /workspace/clickhouse\r\n2022.12.13 11:30:05.028014 [ 715 ] {} <Fatal> BaseDaemon: 30. ./build_docker/../contrib/poco/Foundation/src/ThreadPool.cpp:0: Poco::PooledThread::run() @ 0x3c15aafc in /workspace/clickhouse\r\n2022.12.13 11:30:05.046520 [ 715 ] {} <Fatal> BaseDaemon: 31.1. inlined from ./build_docker/../contrib/poco/Foundation/include/Poco/SharedPtr.h:277: Poco::SharedPtr<Poco::Runnable, Poco::ReferenceCounter, Poco::ReleasePolicy<Poco::Runnable>>::get()\r\n2022.12.13 11:30:05.046597 [ 715 ] {} <Fatal> BaseDaemon: 31.2. inlined from ./build_docker/../contrib/poco/Foundation/include/Poco/SharedPtr.h:156: Poco::SharedPtr<Poco::Runnable, Poco::ReferenceCounter, Poco::ReleasePolicy<Poco::Runnable>>::assign(Poco::Runnable*)\r\n2022.12.13 11:30:05.046669 [ 715 ] {} <Fatal> BaseDaemon: 31.3. inlined from ./build_docker/../contrib/poco/Foundation/include/Poco/SharedPtr.h:208: Poco::SharedPtr<Poco::Runnable, Poco::ReferenceCounter, Poco::ReleasePolicy<Poco::Runnable>>::operator=(Poco::Runnable*)\r\n2022.12.13 11:30:05.046715 [ 715 ] {} <Fatal> BaseDaemon: 31. ./build_docker/../contrib/poco/Foundation/src/Thread_POSIX.cpp:360: Poco::ThreadImpl::runnableEntry(void*) @ 0x3c1540ad in /workspace/clickhouse\r\n2022.12.13 11:30:05.046767 [ 715 ] {} <Fatal> BaseDaemon: 32. ? @ 0x7fd4e6624609 in ?\r\n2022.12.13 11:30:05.046817 [ 715 ] {} <Fatal> BaseDaemon: 33. __clone @ 0x7fd4e6549133 in ?\r\n2022.12.13 11:30:05.923403 [ 715 ] {} <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: 8FF007069C3C089FCA41F13A7C31AC5E)\r\n2022.12.13 11:31:17.715869 [ 146 ] {} <Fatal> Application: Child process was terminated by signal 6.\r\n\r\n```\n",
  "hints_text": "",
  "created_at": "2022-12-22T10:07:23Z",
  "modified_files": [
    "src/Analyzer/Passes/QueryAnalysisPass.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/02337_analyzer_columns_basic.sql",
    "b/tests/queries/0_stateless/02513_analyzer_duplicate_alias_crash_fix.sql"
  ]
}