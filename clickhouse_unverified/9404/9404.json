{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 9404,
  "instance_id": "ClickHouse__ClickHouse-9404",
  "issue_numbers": [
    "7316"
  ],
  "base_commit": "1b2ed51ff5e4a3dc45567d4967108f43f680c884",
  "patch": "diff --git a/base/common/DateLUT.cpp b/base/common/DateLUT.cpp\nindex 6ff0884701cc..d14b63cd70a9 100644\n--- a/base/common/DateLUT.cpp\n+++ b/base/common/DateLUT.cpp\n@@ -152,7 +152,7 @@ const DateLUTImpl & DateLUT::getImplementation(const std::string & time_zone) co\n \n     auto it = impls.emplace(time_zone, nullptr).first;\n     if (!it->second)\n-        it->second = std::make_unique<DateLUTImpl>(time_zone);\n+        it->second = std::unique_ptr<DateLUTImpl>(new DateLUTImpl(time_zone));\n \n     return *it->second;\n }\ndiff --git a/base/common/DateLUT.h b/base/common/DateLUT.h\nindex 93c6cb403e2f..378b4360f3b6 100644\n--- a/base/common/DateLUT.h\n+++ b/base/common/DateLUT.h\n@@ -32,7 +32,6 @@ class DateLUT : private boost::noncopyable\n \n         return date_lut.getImplementation(time_zone);\n     }\n-\n     static void setDefaultTimezone(const std::string & time_zone)\n     {\n         auto & date_lut = getInstance();\ndiff --git a/base/common/DateLUTImpl.cpp b/base/common/DateLUTImpl.cpp\nindex 50620e21b8f0..e7faeb637609 100644\n--- a/base/common/DateLUTImpl.cpp\n+++ b/base/common/DateLUTImpl.cpp\n@@ -46,24 +46,41 @@ DateLUTImpl::DateLUTImpl(const std::string & time_zone_)\n     if (&inside_main)\n         assert(inside_main);\n \n-    size_t i = 0;\n-    time_t start_of_day = 0;\n-\n     cctz::time_zone cctz_time_zone;\n     if (!cctz::load_time_zone(time_zone, &cctz_time_zone))\n         throw Poco::Exception(\"Cannot load time zone \" + time_zone_);\n \n-    cctz::time_zone::absolute_lookup start_of_epoch_lookup = cctz_time_zone.lookup(std::chrono::system_clock::from_time_t(start_of_day));\n-    offset_at_start_of_epoch = start_of_epoch_lookup.offset;\n-    offset_is_whole_number_of_hours_everytime = true;\n+    constexpr cctz::civil_day epoch{1970, 1, 1};\n+    constexpr cctz::civil_day lut_start{DATE_LUT_MIN_YEAR, 1, 1};\n+    time_t start_of_day;\n+\n+    /// Note: it's validated against all timezones in the system.\n+    static_assert((epoch - lut_start) == daynum_offset_epoch);\n+\n+    offset_at_start_of_epoch = cctz_time_zone.lookup(cctz_time_zone.lookup(epoch).pre).offset;\n+    offset_at_start_of_lut = cctz_time_zone.lookup(cctz_time_zone.lookup(lut_start).pre).offset;\n+    offset_is_whole_number_of_hours_during_epoch = true;\n \n-    cctz::civil_day date{1970, 1, 1};\n+    cctz::civil_day date = lut_start;\n \n+    UInt32 i = 0;\n     do\n     {\n         cctz::time_zone::civil_lookup lookup = cctz_time_zone.lookup(date);\n \n-        start_of_day = std::chrono::system_clock::to_time_t(lookup.pre);    /// Ambiguity is possible.\n+        /// Ambiguity is possible if time was changed backwards at the midnight\n+        /// or after midnight time has been changed back to midnight, for example one hour backwards at 01:00\n+        /// or after midnight time has been changed to the previous day, for example two hours backwards at 01:00\n+        /// Then midnight appears twice. Usually time change happens exactly at 00:00 or 01:00.\n+\n+        /// If transition did not involve previous day, we should use the first midnight as the start of the day,\n+        /// otherwise it's better to use the second midnight.\n+\n+        std::chrono::time_point start_of_day_time_point = lookup.trans < lookup.post\n+            ? lookup.post /* Second midnight appears after transition, so there was a piece of previous day after transition */\n+            : lookup.pre;\n+\n+        start_of_day = std::chrono::system_clock::to_time_t(start_of_day_time_point);\n \n         Values & values = lut[i];\n         values.year = date.year();\n@@ -72,7 +89,7 @@ DateLUTImpl::DateLUTImpl(const std::string & time_zone_)\n         values.day_of_week = getDayOfWeek(date);\n         values.date = start_of_day;\n \n-        assert(values.year >= DATE_LUT_MIN_YEAR && values.year <= DATE_LUT_MAX_YEAR);\n+        assert(values.year >= DATE_LUT_MIN_YEAR && values.year <= DATE_LUT_MAX_YEAR + 1);\n         assert(values.month >= 1 && values.month <= 12);\n         assert(values.day_of_month >= 1 && values.day_of_month <= 31);\n         assert(values.day_of_week >= 1 && values.day_of_week <= 7);\n@@ -85,50 +102,42 @@ DateLUTImpl::DateLUTImpl(const std::string & time_zone_)\n         else\n             values.days_in_month = i != 0 ? lut[i - 1].days_in_month : 31;\n \n-        values.time_at_offset_change = 0;\n-        values.amount_of_offset_change = 0;\n+        values.time_at_offset_change_value = 0;\n+        values.amount_of_offset_change_value = 0;\n \n-        if (start_of_day % 3600)\n-            offset_is_whole_number_of_hours_everytime = false;\n+        if (offset_is_whole_number_of_hours_during_epoch && start_of_day > 0 && start_of_day % 3600)\n+            offset_is_whole_number_of_hours_during_epoch = false;\n \n-        /// If UTC offset was changed in previous day.\n-        if (i != 0)\n+        /// If UTC offset was changed this day.\n+        /// Change in time zone without transition is possible, e.g. Moscow 1991 Sun, 31 Mar, 02:00 MSK to EEST\n+        cctz::time_zone::civil_transition transition{};\n+        if (cctz_time_zone.next_transition(start_of_day_time_point - std::chrono::seconds(1), &transition)\n+            && (cctz::civil_day(transition.from) == date || cctz::civil_day(transition.to) == date)\n+            && transition.from != transition.to)\n         {\n-            auto amount_of_offset_change_at_prev_day = 86400 - (lut[i].date - lut[i - 1].date);\n-            if (amount_of_offset_change_at_prev_day)\n-            {\n-                lut[i - 1].amount_of_offset_change = amount_of_offset_change_at_prev_day;\n-\n-                const auto utc_offset_at_beginning_of_day = cctz_time_zone.lookup(std::chrono::system_clock::from_time_t(lut[i - 1].date)).offset;\n-\n-                /// Find a time (timestamp offset from beginning of day),\n-                ///  when UTC offset was changed. Search is performed with 15-minute granularity, assuming it is enough.\n-\n-                time_t time_at_offset_change = 900;\n-                while (time_at_offset_change < 86400)\n-                {\n-                    auto utc_offset_at_current_time = cctz_time_zone.lookup(std::chrono::system_clock::from_time_t(\n-                        lut[i - 1].date + time_at_offset_change)).offset;\n-\n-                    if (utc_offset_at_current_time != utc_offset_at_beginning_of_day)\n-                        break;\n-\n-                    time_at_offset_change += 900;\n-                }\n-\n-                lut[i - 1].time_at_offset_change = time_at_offset_change;\n-\n-                /// We doesn't support cases when time change results in switching to previous day.\n-                if (static_cast<int>(lut[i - 1].time_at_offset_change) + static_cast<int>(lut[i - 1].amount_of_offset_change) < 0)\n-                    lut[i - 1].time_at_offset_change = -lut[i - 1].amount_of_offset_change;\n-            }\n+            values.time_at_offset_change_value = (transition.from - cctz::civil_second(date)) / Values::OffsetChangeFactor;\n+            values.amount_of_offset_change_value = (transition.to - transition.from) / Values::OffsetChangeFactor;\n+\n+//            std::cerr << time_zone << \", \" << date << \": change from \" << transition.from << \" to \" << transition.to << \"\\n\";\n+//            std::cerr << time_zone << \", \" << date << \": change at \" << values.time_at_offset_change() << \" with \" << values.amount_of_offset_change() << \"\\n\";\n+\n+            /// We don't support too large changes.\n+            if (values.amount_of_offset_change_value > 24 * 4)\n+                values.amount_of_offset_change_value = 24 * 4;\n+            else if (values.amount_of_offset_change_value < -24 * 4)\n+                values.amount_of_offset_change_value = -24 * 4;\n+\n+            /// We don't support cases when time change results in switching to previous day.\n+            /// Shift the point of time change later.\n+            if (values.time_at_offset_change_value + values.amount_of_offset_change_value < 0)\n+                values.time_at_offset_change_value = -values.amount_of_offset_change_value;\n         }\n \n         /// Going to next day.\n         ++date;\n         ++i;\n     }\n-    while (start_of_day <= DATE_LUT_MAX && i <= DATE_LUT_MAX_DAY_NUM);\n+    while (i < DATE_LUT_SIZE && lut[i - 1].year <= DATE_LUT_MAX_YEAR);\n \n     /// Fill excessive part of lookup table. This is needed only to simplify handling of overflow cases.\n     while (i < DATE_LUT_SIZE)\ndiff --git a/base/common/DateLUTImpl.h b/base/common/DateLUTImpl.h\nindex 0c7465ec7a59..43fc1b8befd2 100644\n--- a/base/common/DateLUTImpl.h\n+++ b/base/common/DateLUTImpl.h\n@@ -5,23 +5,32 @@\n #include \"types.h\"\n \n #include <ctime>\n+#include <cassert>\n #include <string>\n+#include <type_traits>\n \n \n-#define DATE_LUT_MAX (0xFFFFFFFFU - 86400)\n-#define DATE_LUT_MAX_DAY_NUM (0xFFFFFFFFU / 86400)\n-/// Table size is bigger than DATE_LUT_MAX_DAY_NUM to fill all indices within UInt16 range: this allows to remove extra check.\n-#define DATE_LUT_SIZE 0x10000\n-#define DATE_LUT_MIN_YEAR 1970\n-#define DATE_LUT_MAX_YEAR 2106 /// Last supported year (incomplete)\n+#define DATE_LUT_MIN_YEAR 1925 /// 1925 since wast majority of timezones changed to 15-minute aligned offsets somewhere in 1924 or earlier.\n+#define DATE_LUT_MAX_YEAR 2283 /// Last supported year (complete)\n #define DATE_LUT_YEARS (1 + DATE_LUT_MAX_YEAR - DATE_LUT_MIN_YEAR) /// Number of years in lookup table\n \n+#define DATE_LUT_SIZE 0x20000\n+\n+#define DATE_LUT_MAX (0xFFFFFFFFU - 86400)\n+#define DATE_LUT_MAX_DAY_NUM 0xFFFF\n+\n+/// A constant to add to time_t so every supported time point becomes non-negative and still has the same remainder of division by 3600.\n+/// If we treat \"remainder of division\" operation in the sense of modular arithmetic (not like in C++).\n+#define DATE_LUT_ADD ((1970 - DATE_LUT_MIN_YEAR) * 366 * 86400)\n+\n+\n #if defined(__PPC__)\n #if !__clang__\n #pragma GCC diagnostic ignored \"-Wmaybe-uninitialized\"\n #endif\n #endif\n \n+\n /// Flags for toYearWeek() function.\n enum class WeekModeFlag : UInt8\n {\n@@ -37,7 +46,8 @@ using YearWeek = std::pair<UInt16, UInt8>;\n   */\n class DateLUTImpl\n {\n-public:\n+private:\n+    friend class DateLUT;\n     explicit DateLUTImpl(const std::string & time_zone);\n \n     DateLUTImpl(const DateLUTImpl &) = delete;\n@@ -45,14 +55,75 @@ class DateLUTImpl\n     DateLUTImpl(const DateLUTImpl &&) = delete;\n     DateLUTImpl & operator=(const DateLUTImpl &&) = delete;\n \n+    // Normalized and bound-checked index of element in lut,\n+    // has to be a separate type to support overloading\n+    // TODO: make sure that any arithmetic on LUTIndex actually results in valid LUTIndex.\n+    STRONG_TYPEDEF(UInt32, LUTIndex)\n+\n+    template <typename T>\n+    friend inline LUTIndex operator+(const LUTIndex & index, const T v)\n+    {\n+        return LUTIndex{(index.toUnderType() + UInt32(v)) & date_lut_mask};\n+    }\n+\n+    template <typename T>\n+    friend inline LUTIndex operator+(const T v, const LUTIndex & index)\n+    {\n+        return LUTIndex{(v + index.toUnderType()) & date_lut_mask};\n+    }\n+\n+    friend inline LUTIndex operator+(const LUTIndex & index, const LUTIndex & v)\n+    {\n+        return LUTIndex{(index.toUnderType() + v.toUnderType()) & date_lut_mask};\n+    }\n+\n+    template <typename T>\n+    friend inline LUTIndex operator-(const LUTIndex & index, const T v)\n+    {\n+        return LUTIndex{(index.toUnderType() - UInt32(v)) & date_lut_mask};\n+    }\n+\n+    template <typename T>\n+    friend inline LUTIndex operator-(const T v, const LUTIndex & index)\n+    {\n+        return LUTIndex{(v - index.toUnderType()) & date_lut_mask};\n+    }\n+\n+    friend inline LUTIndex operator-(const LUTIndex & index, const LUTIndex & v)\n+    {\n+        return LUTIndex{(index.toUnderType() - v.toUnderType()) & date_lut_mask};\n+    }\n+\n+    template <typename T>\n+    friend inline LUTIndex operator*(const LUTIndex & index, const T v)\n+    {\n+        return LUTIndex{(index.toUnderType() * UInt32(v)) & date_lut_mask};\n+    }\n+\n+    template <typename T>\n+    friend inline LUTIndex operator*(const T v, const LUTIndex & index)\n+    {\n+        return LUTIndex{(v * index.toUnderType()) & date_lut_mask};\n+    }\n+\n+    template <typename T>\n+    friend inline LUTIndex operator/(const LUTIndex & index, const T v)\n+    {\n+        return LUTIndex{(index.toUnderType() / UInt32(v)) & date_lut_mask};\n+    }\n+\n+    template <typename T>\n+    friend inline LUTIndex operator/(const T v, const LUTIndex & index)\n+    {\n+        return LUTIndex{(UInt32(v) / index.toUnderType()) & date_lut_mask};\n+    }\n+\n public:\n     /// The order of fields matters for alignment and sizeof.\n     struct Values\n     {\n-        /// Least significat 32 bits from time_t at beginning of the day.\n-        /// If the unix timestamp of beginning of the day is negative (example: 1970-01-01 MSK, where time_t == -10800), then value will overflow.\n-        /// Change to time_t; change constants above; and recompile the sources if you need to support time after 2105 year.\n-        UInt32 date;\n+        /// time_t at beginning of the day.\n+        Int64 date;\n \n         /// Properties of the day.\n         UInt16 year;\n@@ -65,107 +136,189 @@ class DateLUTImpl\n         UInt8 days_in_month;\n \n         /// For days, when offset from UTC was changed due to daylight saving time or permanent change, following values could be non zero.\n-        Int16 amount_of_offset_change; /// Usually -3600 or 3600, but look at Lord Howe Island.\n-        UInt32 time_at_offset_change; /// In seconds from beginning of the day.\n+        /// All in OffsetChangeFactor (15 minute) intervals.\n+        Int8 amount_of_offset_change_value; /// Usually -4 or 4, but look at Lord Howe Island. Multiply by OffsetChangeFactor\n+        UInt8 time_at_offset_change_value; /// In seconds from beginning of the day. Multiply by OffsetChangeFactor\n+\n+        inline Int32 amount_of_offset_change() const\n+        {\n+            return static_cast<Int32>(amount_of_offset_change_value) * OffsetChangeFactor;\n+        }\n+\n+        inline UInt32 time_at_offset_change() const\n+        {\n+            return static_cast<UInt32>(time_at_offset_change_value) * OffsetChangeFactor;\n+        }\n+\n+        /// Since most of the modern timezones have a DST change aligned to 15 minutes, to save as much space as possible inside Value,\n+        /// we are dividing any offset change related value by this factor before setting it to Value,\n+        /// hence it has to be explicitly multiplied back by this factor before being used.\n+        static constexpr UInt16 OffsetChangeFactor = 900;\n     };\n \n     static_assert(sizeof(Values) == 16);\n \n private:\n-    /// Lookup table is indexed by DayNum.\n+\n+    /// Mask is all-ones to allow efficient protection against overflow.\n+    static constexpr UInt32 date_lut_mask = 0x1ffff;\n+    static_assert(date_lut_mask == DATE_LUT_SIZE - 1);\n+\n+    /// Offset to epoch in days (ExtendedDayNum) of the first day in LUT.\n+    /// \"epoch\" is the Unix Epoch (starts at unix timestamp zero)\n+    static constexpr UInt32 daynum_offset_epoch = 16436;\n+    static_assert(daynum_offset_epoch == (1970 - DATE_LUT_MIN_YEAR) * 365 + (1970 - DATE_LUT_MIN_YEAR / 4 * 4) / 4);\n+\n+    /// Lookup table is indexed by LUTIndex.\n     /// Day nums are the same in all time zones. 1970-01-01 is 0 and so on.\n     /// Table is relatively large, so better not to place the object on stack.\n     /// In comparison to std::vector, plain array is cheaper by one indirection.\n-    Values lut[DATE_LUT_SIZE];\n+    Values lut[DATE_LUT_SIZE + 1];\n \n-    /// Year number after DATE_LUT_MIN_YEAR -> day num for start of year.\n-    DayNum years_lut[DATE_LUT_YEARS];\n+    /// Year number after DATE_LUT_MIN_YEAR -> LUTIndex in lut for start of year.\n+    LUTIndex years_lut[DATE_LUT_YEARS];\n \n     /// Year number after DATE_LUT_MIN_YEAR * month number starting at zero -> day num for first day of month\n-    DayNum years_months_lut[DATE_LUT_YEARS * 12];\n+    LUTIndex years_months_lut[DATE_LUT_YEARS * 12];\n \n     /// UTC offset at beginning of the Unix epoch. The same as unix timestamp of 1970-01-01 00:00:00 local time.\n     time_t offset_at_start_of_epoch;\n-    bool offset_is_whole_number_of_hours_everytime;\n+    /// UTC offset at the beginning of the first supported year.\n+    time_t offset_at_start_of_lut;\n+    bool offset_is_whole_number_of_hours_during_epoch;\n \n     /// Time zone name.\n     std::string time_zone;\n \n-\n-    /// We can correctly process only timestamps that less DATE_LUT_MAX (i.e. up to 2105 year inclusively)\n-    /// We don't care about overflow.\n-    inline DayNum findIndex(time_t t) const\n+    inline LUTIndex findIndex(time_t t) const\n     {\n         /// First guess.\n-        DayNum guess(t / 86400);\n+        Int64 guess = (t / 86400) + daynum_offset_epoch;\n+\n+        /// For negative time_t the integer division was rounded up, so the guess is offset by one.\n+        if (unlikely(t < 0))\n+            --guess;\n+\n+        if (guess < 0)\n+            return LUTIndex(0);\n+        if (guess >= DATE_LUT_SIZE)\n+            return LUTIndex(DATE_LUT_SIZE - 1);\n \n         /// UTC offset is from -12 to +14 in all known time zones. This requires checking only three indices.\n \n-        if ((guess == 0 || t >= lut[guess].date) && t < lut[DayNum(guess + 1)].date)\n-            return guess;\n+        if (t >= lut[guess].date)\n+        {\n+            if (guess + 1 >= DATE_LUT_SIZE || t < lut[guess + 1].date)\n+                return LUTIndex(guess);\n+\n+            return LUTIndex(guess + 1);\n+        }\n+\n+        return LUTIndex(guess ? guess - 1 : 0);\n+    }\n+\n+    inline LUTIndex toLUTIndex(DayNum d) const\n+    {\n+        return LUTIndex{(d + daynum_offset_epoch) & date_lut_mask};\n+    }\n \n-        /// Time zones that have offset 0 from UTC do daylight saving time change (if any) towards increasing UTC offset (example: British Standard Time).\n-        if (t >= lut[DayNum(guess + 1)].date)\n-            return DayNum(guess + 1);\n+    inline LUTIndex toLUTIndex(ExtendedDayNum d) const\n+    {\n+        return LUTIndex{static_cast<UInt32>(d + daynum_offset_epoch) & date_lut_mask};\n+    }\n \n-        return DayNum(guess - 1);\n+    inline LUTIndex toLUTIndex(time_t t) const\n+    {\n+        return findIndex(t);\n     }\n \n-    inline const Values & find(time_t t) const\n+    inline LUTIndex toLUTIndex(LUTIndex i) const\n     {\n-        return lut[findIndex(t)];\n+        return i;\n+    }\n+\n+    template <typename DateOrTime>\n+    inline const Values & find(DateOrTime v) const\n+    {\n+        return lut[toLUTIndex(v)];\n+    }\n+\n+    template <typename T, typename Divisor>\n+    static inline T roundDown(T x, Divisor divisor)\n+    {\n+        static_assert(std::is_integral_v<T> && std::is_integral_v<Divisor>);\n+        assert(divisor > 0);\n+\n+        if (likely(x >= 0))\n+            return x / divisor * divisor;\n+\n+        /// Integer division for negative numbers rounds them towards zero (up).\n+        /// We will shift the number so it will be rounded towards -inf (down).\n+\n+        return (x + 1 - divisor) / divisor * divisor;\n     }\n \n public:\n     const std::string & getTimeZone() const { return time_zone; }\n \n+    // Methods only for unit-testing, it makes very little sense to use it from user code.\n+    auto getOffsetAtStartOfEpoch() const { return offset_at_start_of_epoch; }\n+    auto getTimeOffsetAtStartOfLUT() const { return offset_at_start_of_lut; }\n+\n     /// All functions below are thread-safe; arguments are not checked.\n \n-    inline time_t toDate(time_t t) const { return find(t).date; }\n-    inline unsigned toMonth(time_t t) const { return find(t).month; }\n-    inline unsigned toQuarter(time_t t) const { return (find(t).month - 1) / 3 + 1; }\n-    inline unsigned toYear(time_t t) const { return find(t).year; }\n-    inline unsigned toDayOfWeek(time_t t) const { return find(t).day_of_week; }\n-    inline unsigned toDayOfMonth(time_t t) const { return find(t).day_of_month; }\n+    inline ExtendedDayNum toDayNum(ExtendedDayNum d) const\n+    {\n+        return d;\n+    }\n \n-    /// Round down to start of monday.\n-    inline time_t toFirstDayOfWeek(time_t t) const\n+    template <typename DateOrTime>\n+    inline ExtendedDayNum toDayNum(DateOrTime v) const\n     {\n-        DayNum index = findIndex(t);\n-        return lut[DayNum(index - (lut[index].day_of_week - 1))].date;\n+        return ExtendedDayNum{static_cast<ExtendedDayNum::UnderlyingType>(toLUTIndex(v).toUnderType() - daynum_offset_epoch)};\n     }\n \n-    inline DayNum toFirstDayNumOfWeek(DayNum d) const\n+    /// Round down to start of monday.\n+    template <typename DateOrTime>\n+    inline time_t toFirstDayOfWeek(DateOrTime v) const\n     {\n-        return DayNum(d - (lut[d].day_of_week - 1));\n+        const LUTIndex i = toLUTIndex(v);\n+        return lut[i - (lut[i].day_of_week - 1)].date;\n     }\n \n-    inline DayNum toFirstDayNumOfWeek(time_t t) const\n+    template <typename DateOrTime>\n+    inline ExtendedDayNum toFirstDayNumOfWeek(DateOrTime v) const\n     {\n-        return toFirstDayNumOfWeek(toDayNum(t));\n+        const LUTIndex i = toLUTIndex(v);\n+        return toDayNum(i - (lut[i].day_of_week - 1));\n     }\n \n     /// Round down to start of month.\n-    inline time_t toFirstDayOfMonth(time_t t) const\n+    template <typename DateOrTime>\n+    inline time_t toFirstDayOfMonth(DateOrTime v) const\n     {\n-        DayNum index = findIndex(t);\n-        return lut[index - (lut[index].day_of_month - 1)].date;\n+        const LUTIndex i = toLUTIndex(v);\n+        return lut[i - (lut[i].day_of_month - 1)].date;\n     }\n \n-    inline DayNum toFirstDayNumOfMonth(DayNum d) const\n+    template <typename DateOrTime>\n+    inline ExtendedDayNum toFirstDayNumOfMonth(DateOrTime v) const\n     {\n-        return DayNum(d - (lut[d].day_of_month - 1));\n+        const LUTIndex i = toLUTIndex(v);\n+        return toDayNum(i - (lut[i].day_of_month - 1));\n     }\n \n-    inline DayNum toFirstDayNumOfMonth(time_t t) const\n+    /// Round down to start of quarter.\n+    template <typename DateOrTime>\n+    inline ExtendedDayNum toFirstDayNumOfQuarter(DateOrTime v) const\n     {\n-        return toFirstDayNumOfMonth(toDayNum(t));\n+        return toDayNum(toFirstDayOfQuarterIndex(v));\n     }\n \n-    /// Round down to start of quarter.\n-    inline DayNum toFirstDayNumOfQuarter(DayNum d) const\n+    template <typename DateOrTime>\n+    inline LUTIndex toFirstDayOfQuarterIndex(DateOrTime v) const\n     {\n-        DayNum index = d;\n+        LUTIndex index = toLUTIndex(v);\n         size_t month_inside_quarter = (lut[index].month - 1) % 3;\n \n         index -= lut[index].day_of_month;\n@@ -175,17 +328,13 @@ class DateLUTImpl\n             --month_inside_quarter;\n         }\n \n-        return DayNum(index + 1);\n+        return index + 1;\n     }\n \n-    inline DayNum toFirstDayNumOfQuarter(time_t t) const\n+    template <typename DateOrTime>\n+    inline time_t toFirstDayOfQuarter(DateOrTime v) const\n     {\n-        return toFirstDayNumOfQuarter(toDayNum(t));\n-    }\n-\n-    inline time_t toFirstDayOfQuarter(time_t t) const\n-    {\n-        return fromDayNum(toFirstDayNumOfQuarter(t));\n+        return toDate(toFirstDayOfQuarterIndex(v));\n     }\n \n     /// Round down to start of year.\n@@ -194,48 +343,47 @@ class DateLUTImpl\n         return lut[years_lut[lut[findIndex(t)].year - DATE_LUT_MIN_YEAR]].date;\n     }\n \n-    inline DayNum toFirstDayNumOfYear(DayNum d) const\n+    template <typename DateOrTime>\n+    inline LUTIndex toFirstDayNumOfYearIndex(DateOrTime v) const\n     {\n-        return years_lut[lut[d].year - DATE_LUT_MIN_YEAR];\n+        return years_lut[lut[toLUTIndex(v)].year - DATE_LUT_MIN_YEAR];\n     }\n \n-    inline DayNum toFirstDayNumOfYear(time_t t) const\n+    template <typename DateOrTime>\n+    inline ExtendedDayNum toFirstDayNumOfYear(DateOrTime v) const\n     {\n-        return toFirstDayNumOfYear(toDayNum(t));\n+        return toDayNum(toFirstDayNumOfYearIndex(v));\n     }\n \n     inline time_t toFirstDayOfNextMonth(time_t t) const\n     {\n-        DayNum index = findIndex(t);\n+        LUTIndex index = findIndex(t);\n         index += 32 - lut[index].day_of_month;\n         return lut[index - (lut[index].day_of_month - 1)].date;\n     }\n \n     inline time_t toFirstDayOfPrevMonth(time_t t) const\n     {\n-        DayNum index = findIndex(t);\n+        LUTIndex index = findIndex(t);\n         index -= lut[index].day_of_month;\n         return lut[index - (lut[index].day_of_month - 1)].date;\n     }\n \n-    inline UInt8 daysInMonth(DayNum d) const\n+    template <typename DateOrTime>\n+    inline UInt8 daysInMonth(DateOrTime value) const\n     {\n-        return lut[d].days_in_month;\n+        const LUTIndex i = toLUTIndex(value);\n+        return lut[i].days_in_month;\n     }\n \n-    inline UInt8 daysInMonth(time_t t) const\n-    {\n-        return find(t).days_in_month;\n-    }\n-\n-    inline UInt8 daysInMonth(UInt16 year, UInt8 month) const\n+    inline UInt8 daysInMonth(Int16 year, UInt8 month) const\n     {\n         UInt16 idx = year - DATE_LUT_MIN_YEAR;\n         if (unlikely(idx >= DATE_LUT_YEARS))\n             return 31;  /// Implementation specific behaviour on overflow.\n \n         /// 32 makes arithmetic more simple.\n-        DayNum any_day_of_month = DayNum(years_lut[idx] + 32 * (month - 1));\n+        const auto any_day_of_month = years_lut[year - DATE_LUT_MIN_YEAR] + 32 * (month - 1);\n         return lut[any_day_of_month].days_in_month;\n     }\n \n@@ -243,107 +391,111 @@ class DateLUTImpl\n       */\n     inline time_t toDateAndShift(time_t t, Int32 days) const\n     {\n-        return lut[DayNum(findIndex(t) + days)].date;\n+        return lut[findIndex(t) + days].date;\n     }\n \n     inline time_t toTime(time_t t) const\n     {\n-        DayNum index = findIndex(t);\n-\n-        if (unlikely(index == 0 || index > DATE_LUT_MAX_DAY_NUM))\n-            return t + offset_at_start_of_epoch;\n+        const LUTIndex index = findIndex(t);\n \n         time_t res = t - lut[index].date;\n \n-        if (res >= lut[index].time_at_offset_change)\n-            res += lut[index].amount_of_offset_change;\n+        if (res >= lut[index].time_at_offset_change())\n+            res += lut[index].amount_of_offset_change();\n \n         return res - offset_at_start_of_epoch; /// Starting at 1970-01-01 00:00:00 local time.\n     }\n \n     inline unsigned toHour(time_t t) const\n     {\n-        DayNum index = findIndex(t);\n-\n-        /// If it is overflow case,\n-        ///  then limit number of hours to avoid insane results like 1970-01-01 89:28:15\n-        if (unlikely(index == 0 || index > DATE_LUT_MAX_DAY_NUM))\n-            return static_cast<unsigned>((t + offset_at_start_of_epoch) / 3600) % 24;\n+        const LUTIndex index = findIndex(t);\n \n         time_t time = t - lut[index].date;\n \n-        if (time >= lut[index].time_at_offset_change)\n-            time += lut[index].amount_of_offset_change;\n+        if (time >= lut[index].time_at_offset_change())\n+            time += lut[index].amount_of_offset_change();\n \n         unsigned res = time / 3600;\n-        return res <= 23 ? res : 0;\n+\n+        /// In case time was changed backwards at the start of next day, we will repeat the hour 23.\n+        return res <= 23 ? res : 23;\n     }\n \n     /** Calculating offset from UTC in seconds.\n-     * which means Using the same literal time of \"t\" to get the corresponding timestamp in UTC,\n-     * then subtract the former from the latter to get the offset result.\n-     * The boundaries when meets DST(daylight saving time) change should be handled very carefully.\n-     */\n+      * which means Using the same literal time of \"t\" to get the corresponding timestamp in UTC,\n+      * then subtract the former from the latter to get the offset result.\n+      * The boundaries when meets DST(daylight saving time) change should be handled very carefully.\n+      */\n     inline time_t timezoneOffset(time_t t) const\n     {\n-        DayNum index = findIndex(t);\n+        const LUTIndex index = findIndex(t);\n \n         /// Calculate daylight saving offset first.\n         /// Because the \"amount_of_offset_change\" in LUT entry only exists in the change day, it's costly to scan it from the very begin.\n         /// but we can figure out all the accumulated offsets from 1970-01-01 to that day just by get the whole difference between lut[].date,\n         /// and then, we can directly subtract multiple 86400s to get the real DST offsets for the leap seconds is not considered now.\n-        time_t res = (lut[index].date - lut[0].date) % 86400;\n+        time_t res = (lut[index].date - lut[daynum_offset_epoch].date) % 86400;\n+\n         /// As so far to know, the maximal DST offset couldn't be more than 2 hours, so after the modulo operation the remainder\n         /// will sits between [-offset --> 0 --> offset] which respectively corresponds to moving clock forward or backward.\n         res = res > 43200 ? (86400 - res) : (0 - res);\n \n         /// Check if has a offset change during this day. Add the change when cross the line\n-        if (lut[index].amount_of_offset_change != 0 && t >= lut[index].date + lut[index].time_at_offset_change)\n-            res += lut[index].amount_of_offset_change;\n+        if (lut[index].amount_of_offset_change() != 0 && t >= lut[index].date + lut[index].time_at_offset_change())\n+            res += lut[index].amount_of_offset_change();\n \n         return res + offset_at_start_of_epoch;\n     }\n \n-    /** Only for time zones with/when offset from UTC is multiple of five minutes.\n-      * This is true for all time zones: right now, all time zones have an offset that is multiple of 15 minutes.\n-      *\n-      * \"By 1929, most major countries had adopted hourly time zones. Nepal was the last\n-      *  country to adopt a standard offset, shifting slightly to UTC+5:45 in 1986.\"\n-      * - https://en.wikipedia.org/wiki/Time_zone#Offsets_from_UTC\n-      *\n-      * Also please note, that unix timestamp doesn't count \"leap seconds\":\n-      *  each minute, with added or subtracted leap second, spans exactly 60 unix timestamps.\n-      */\n \n-    inline unsigned toSecond(time_t t) const { return UInt32(t) % 60; }\n+    inline unsigned toSecond(time_t t) const\n+    {\n+        auto res = t % 60;\n+        if (likely(res >= 0))\n+            return res;\n+        return res + 60;\n+    }\n \n     inline unsigned toMinute(time_t t) const\n     {\n-        if (offset_is_whole_number_of_hours_everytime)\n-            return (UInt32(t) / 60) % 60;\n+        if (t >= 0 && offset_is_whole_number_of_hours_during_epoch)\n+            return (t / 60) % 60;\n \n-        /// To consider the DST changing situation within this day.\n-        /// also make the special timezones with no whole hour offset such as 'Australia/Lord_Howe' been taken into account\n-        DayNum index = findIndex(t);\n-        UInt32 res = t - lut[index].date;\n-        if (lut[index].amount_of_offset_change != 0 && t >= lut[index].date + lut[index].time_at_offset_change)\n-            res += lut[index].amount_of_offset_change;\n+        /// To consider the DST changing situation within this day\n+        /// also make the special timezones with no whole hour offset such as 'Australia/Lord_Howe' been taken into account.\n \n-        return res / 60 % 60;\n+        LUTIndex index = findIndex(t);\n+        UInt32 time = t - lut[index].date;\n+\n+        if (time >= lut[index].time_at_offset_change())\n+            time += lut[index].amount_of_offset_change();\n+\n+        return time / 60 % 60;\n     }\n \n-    inline time_t toStartOfMinute(time_t t) const { return t / 60 * 60; }\n-    inline time_t toStartOfFiveMinute(time_t t) const { return t / 300 * 300; }\n-    inline time_t toStartOfFifteenMinutes(time_t t) const { return t / 900 * 900; }\n-    inline time_t toStartOfTenMinutes(time_t t) const { return t / 600 * 600; }\n+    /// NOTE: Assuming timezone offset is a multiple of 15 minutes.\n+    inline time_t toStartOfMinute(time_t t) const { return roundDown(t, 60); }\n+    inline time_t toStartOfFiveMinute(time_t t) const { return roundDown(t, 300); }\n+    inline time_t toStartOfFifteenMinutes(time_t t) const { return roundDown(t, 900); }\n+\n+    inline time_t toStartOfTenMinutes(time_t t) const\n+    {\n+        if (t >= 0 && offset_is_whole_number_of_hours_during_epoch)\n+            return t / 600 * 600;\n+\n+        /// More complex logic is for Nepal - it has offset 05:45. Australia/Eucla is also unfortunate.\n+        Int64 date = find(t).date;\n+        return date + (t - date) / 600 * 600;\n+    }\n \n+    /// NOTE: Assuming timezone transitions are multiple of hours. Lord Howe Island in Australia is a notable exception.\n     inline time_t toStartOfHour(time_t t) const\n     {\n-        if (offset_is_whole_number_of_hours_everytime)\n+        if (t >= 0 && offset_is_whole_number_of_hours_during_epoch)\n             return t / 3600 * 3600;\n \n-        UInt32 date = find(t).date;\n-        return date + (UInt32(t) - date) / 3600 * 3600;\n+        Int64 date = find(t).date;\n+        return date + (t - date) / 3600 * 3600;\n     }\n \n     /** Number of calendar day since the beginning of UNIX epoch (1970-01-01 is zero)\n@@ -354,80 +506,89 @@ class DateLUTImpl\n       *  because the same calendar day starts/ends at different timestamps in different time zones)\n       */\n \n-    inline DayNum toDayNum(time_t t) const { return findIndex(t); }\n-    inline time_t fromDayNum(DayNum d) const { return lut[d].date; }\n+    inline time_t fromDayNum(DayNum d) const { return lut[toLUTIndex(d)].date; }\n+    inline time_t fromDayNum(ExtendedDayNum d) const { return lut[toLUTIndex(d)].date; }\n+\n+    template <typename DateOrTime>\n+    inline time_t toDate(DateOrTime v) const { return lut[toLUTIndex(v)].date; }\n+\n+    template <typename DateOrTime>\n+    inline unsigned toMonth(DateOrTime v) const { return lut[toLUTIndex(v)].month; }\n+\n+    template <typename DateOrTime>\n+    inline unsigned toQuarter(DateOrTime v) const { return (lut[toLUTIndex(v)].month - 1) / 3 + 1; }\n+\n+    template <typename DateOrTime>\n+    inline Int16 toYear(DateOrTime v) const { return lut[toLUTIndex(v)].year; }\n \n-    inline time_t toDate(DayNum d) const { return lut[d].date; }\n-    inline unsigned toMonth(DayNum d) const { return lut[d].month; }\n-    inline unsigned toQuarter(DayNum d) const { return (lut[d].month - 1) / 3 + 1; }\n-    inline unsigned toYear(DayNum d) const { return lut[d].year; }\n-    inline unsigned toDayOfWeek(DayNum d) const { return lut[d].day_of_week; }\n-    inline unsigned toDayOfMonth(DayNum d) const { return lut[d].day_of_month; }\n-    inline unsigned toDayOfYear(DayNum d) const { return d + 1 - toFirstDayNumOfYear(d); }\n+    template <typename DateOrTime>\n+    inline unsigned toDayOfWeek(DateOrTime v) const { return lut[toLUTIndex(v)].day_of_week; }\n \n-    inline unsigned toDayOfYear(time_t t) const { return toDayOfYear(toDayNum(t)); }\n+    template <typename DateOrTime>\n+    inline unsigned toDayOfMonth(DateOrTime v) const { return lut[toLUTIndex(v)].day_of_month; }\n+\n+    template <typename DateOrTime>\n+    inline unsigned toDayOfYear(DateOrTime v) const\n+    {\n+        // TODO: different overload for ExtendedDayNum\n+        const LUTIndex i = toLUTIndex(v);\n+        return i + 1 - toFirstDayNumOfYearIndex(i);\n+    }\n \n     /// Number of week from some fixed moment in the past. Week begins at monday.\n     /// (round down to monday and divide DayNum by 7; we made an assumption,\n     ///  that in domain of the function there was no weeks with any other number of days than 7)\n-    inline unsigned toRelativeWeekNum(DayNum d) const\n+    template <typename DateOrTime>\n+    inline unsigned toRelativeWeekNum(DateOrTime v) const\n     {\n+        const LUTIndex i = toLUTIndex(v);\n         /// We add 8 to avoid underflow at beginning of unix epoch.\n-        return (d + 8 - toDayOfWeek(d)) / 7;\n-    }\n-\n-    inline unsigned toRelativeWeekNum(time_t t) const\n-    {\n-        return toRelativeWeekNum(toDayNum(t));\n+        return toDayNum(i + 8 - toDayOfWeek(i)) / 7;\n     }\n \n     /// Get year that contains most of the current week. Week begins at monday.\n-    inline unsigned toISOYear(DayNum d) const\n+    template <typename DateOrTime>\n+    inline unsigned toISOYear(DateOrTime v) const\n     {\n+        const LUTIndex i = toLUTIndex(v);\n         /// That's effectively the year of thursday of current week.\n-        return toYear(DayNum(d + 4 - toDayOfWeek(d)));\n-    }\n-\n-    inline unsigned toISOYear(time_t t) const\n-    {\n-        return toISOYear(toDayNum(t));\n+        return toYear(toLUTIndex(i + 4 - toDayOfWeek(i)));\n     }\n \n     /// ISO year begins with a monday of the week that is contained more than by half in the corresponding calendar year.\n     /// Example: ISO year 2019 begins at 2018-12-31. And ISO year 2017 begins at 2017-01-02.\n     /// https://en.wikipedia.org/wiki/ISO_week_date\n-    inline DayNum toFirstDayNumOfISOYear(DayNum d) const\n+    template <typename DateOrTime>\n+    inline LUTIndex toFirstDayNumOfISOYearIndex(DateOrTime v) const\n     {\n-        auto iso_year = toISOYear(d);\n+        const LUTIndex i = toLUTIndex(v);\n+        auto iso_year = toISOYear(i);\n \n-        DayNum first_day_of_year = years_lut[iso_year - DATE_LUT_MIN_YEAR];\n+        const auto first_day_of_year = years_lut[iso_year - DATE_LUT_MIN_YEAR];\n         auto first_day_of_week_of_year = lut[first_day_of_year].day_of_week;\n \n-        return DayNum(first_day_of_week_of_year <= 4\n+        return LUTIndex{first_day_of_week_of_year <= 4\n             ? first_day_of_year + 1 - first_day_of_week_of_year\n-            : first_day_of_year + 8 - first_day_of_week_of_year);\n+            : first_day_of_year + 8 - first_day_of_week_of_year};\n     }\n \n-    inline DayNum toFirstDayNumOfISOYear(time_t t) const\n+    template <typename DateOrTime>\n+    inline ExtendedDayNum toFirstDayNumOfISOYear(DateOrTime v) const\n     {\n-        return toFirstDayNumOfISOYear(toDayNum(t));\n+        return toDayNum(toFirstDayNumOfISOYearIndex(v));\n     }\n \n     inline time_t toFirstDayOfISOYear(time_t t) const\n     {\n-        return fromDayNum(toFirstDayNumOfISOYear(t));\n+        return lut[toFirstDayNumOfISOYearIndex(t)].date;\n     }\n \n     /// ISO 8601 week number. Week begins at monday.\n     /// The week number 1 is the first week in year that contains 4 or more days (that's more than half).\n-    inline unsigned toISOWeek(DayNum d) const\n-    {\n-        return 1 + DayNum(toFirstDayNumOfWeek(d) - toFirstDayNumOfISOYear(d)) / 7;\n-    }\n-\n-    inline unsigned toISOWeek(time_t t) const\n+    template <typename DateOrTime>\n+    inline unsigned toISOWeek(DateOrTime v) const\n     {\n-        return toISOWeek(toDayNum(t));\n+        return 1 + (toFirstDayNumOfWeek(v) - toFirstDayNumOfISOYear(v)) / 7;\n     }\n \n     /*\n@@ -463,30 +624,33 @@ class DateLUTImpl\n         Otherwise it is the last week of the previous year, and the\n         next week is week 1.\n     */\n-    inline YearWeek toYearWeek(DayNum d, UInt8 week_mode) const\n+    template <typename DateOrTime>\n+    inline YearWeek toYearWeek(DateOrTime v, UInt8 week_mode) const\n     {\n-        bool newyear_day_mode = week_mode & static_cast<UInt8>(WeekModeFlag::NEWYEAR_DAY);\n+        const bool newyear_day_mode = week_mode & static_cast<UInt8>(WeekModeFlag::NEWYEAR_DAY);\n         week_mode = check_week_mode(week_mode);\n-        bool monday_first_mode = week_mode & static_cast<UInt8>(WeekModeFlag::MONDAY_FIRST);\n+        const bool monday_first_mode = week_mode & static_cast<UInt8>(WeekModeFlag::MONDAY_FIRST);\n         bool week_year_mode = week_mode & static_cast<UInt8>(WeekModeFlag::YEAR);\n-        bool first_weekday_mode = week_mode & static_cast<UInt8>(WeekModeFlag::FIRST_WEEKDAY);\n+        const bool first_weekday_mode = week_mode & static_cast<UInt8>(WeekModeFlag::FIRST_WEEKDAY);\n+\n+        const LUTIndex i = toLUTIndex(v);\n \n         // Calculate week number of WeekModeFlag::NEWYEAR_DAY mode\n         if (newyear_day_mode)\n         {\n-            return toYearWeekOfNewyearMode(d, monday_first_mode);\n+            return toYearWeekOfNewyearMode(i, monday_first_mode);\n         }\n \n-        YearWeek yw(toYear(d), 0);\n+        YearWeek yw(toYear(i), 0);\n         UInt16 days = 0;\n-        UInt16 daynr = makeDayNum(yw.first, toMonth(d), toDayOfMonth(d));\n-        UInt16 first_daynr = makeDayNum(yw.first, 1, 1);\n+        const auto daynr = makeDayNum(yw.first, toMonth(i), toDayOfMonth(i));\n+        auto first_daynr = makeDayNum(yw.first, 1, 1);\n \n         // 0 for monday, 1 for tuesday ...\n         // get weekday from first day in year.\n-        UInt16 weekday = calc_weekday(DayNum(first_daynr), !monday_first_mode);\n+        UInt16 weekday = calc_weekday(first_daynr, !monday_first_mode);\n \n-        if (toMonth(d) == 1 && toDayOfMonth(d) <= static_cast<UInt32>(7 - weekday))\n+        if (toMonth(i) == 1 && toDayOfMonth(i) <= static_cast<UInt32>(7 - weekday))\n         {\n             if (!week_year_mode && ((first_weekday_mode && weekday != 0) || (!first_weekday_mode && weekday >= 4)))\n                 return yw;\n@@ -517,48 +681,51 @@ class DateLUTImpl\n \n     /// Calculate week number of WeekModeFlag::NEWYEAR_DAY mode\n     /// The week number 1 is the first week in year that contains January 1,\n-    inline YearWeek toYearWeekOfNewyearMode(DayNum d, bool monday_first_mode) const\n+    template <typename DateOrTime>\n+    inline YearWeek toYearWeekOfNewyearMode(DateOrTime v, bool monday_first_mode) const\n     {\n         YearWeek yw(0, 0);\n         UInt16 offset_day = monday_first_mode ? 0U : 1U;\n \n+        const LUTIndex i = LUTIndex(v);\n+\n         // Checking the week across the year\n-        yw.first = toYear(DayNum(d + 7 - toDayOfWeek(DayNum(d + offset_day))));\n+        yw.first = toYear(i + 7 - toDayOfWeek(i + offset_day));\n \n-        DayNum first_day = makeDayNum(yw.first, 1, 1);\n-        DayNum this_day = d;\n+        auto first_day = makeLUTIndex(yw.first, 1, 1);\n+        auto this_day = i;\n \n+        // TODO: do not perform calculations in terms of DayNum, since that would under/overflow for extended range.\n         if (monday_first_mode)\n         {\n             // Rounds down a date to the nearest Monday.\n             first_day = toFirstDayNumOfWeek(first_day);\n-            this_day = toFirstDayNumOfWeek(d);\n+            this_day = toFirstDayNumOfWeek(i);\n         }\n         else\n         {\n             // Rounds down a date to the nearest Sunday.\n             if (toDayOfWeek(first_day) != 7)\n-                first_day = DayNum(first_day - toDayOfWeek(first_day));\n-            if (toDayOfWeek(d) != 7)\n-                this_day = DayNum(d - toDayOfWeek(d));\n+                first_day = ExtendedDayNum(first_day - toDayOfWeek(first_day));\n+            if (toDayOfWeek(i) != 7)\n+                this_day = ExtendedDayNum(i - toDayOfWeek(i));\n         }\n         yw.second = (this_day - first_day) / 7 + 1;\n         return yw;\n     }\n \n-    /**\n-     * get first day of week with week_mode, return Sunday or Monday\n-     */\n-    inline DayNum toFirstDayNumOfWeek(DayNum d, UInt8 week_mode) const\n+    /// Get first day of week with week_mode, return Sunday or Monday\n+    template <typename DateOrTime>\n+    inline ExtendedDayNum toFirstDayNumOfWeek(DateOrTime v, UInt8 week_mode) const\n     {\n         bool monday_first_mode = week_mode & static_cast<UInt8>(WeekModeFlag::MONDAY_FIRST);\n         if (monday_first_mode)\n         {\n-            return toFirstDayNumOfWeek(d);\n+            return toFirstDayNumOfWeek(v);\n         }\n         else\n         {\n-            return (toDayOfWeek(d) != 7) ? DayNum(d - toDayOfWeek(d)) : d;\n+            return (toDayOfWeek(v) != 7) ? ExtendedDayNum(v - toDayOfWeek(v)) : toDayNum(v);\n         }\n     }\n \n@@ -574,104 +741,112 @@ class DateLUTImpl\n     /** Calculate weekday from d.\n       * Returns 0 for monday, 1 for tuesday...\n       */\n-    inline unsigned calc_weekday(DayNum d, bool sunday_first_day_of_week) const\n+    template <typename DateOrTime>\n+    inline unsigned calc_weekday(DateOrTime v, bool sunday_first_day_of_week) const\n     {\n+        const LUTIndex i = toLUTIndex(v);\n         if (!sunday_first_day_of_week)\n-            return toDayOfWeek(d) - 1;\n+            return toDayOfWeek(i) - 1;\n         else\n-            return toDayOfWeek(DayNum(d + 1)) - 1;\n+            return toDayOfWeek(i + 1) - 1;\n     }\n \n     /// Calculate days in one year.\n-    inline unsigned calc_days_in_year(UInt16 year) const\n+    inline unsigned calc_days_in_year(Int32 year) const\n     {\n         return ((year & 3) == 0 && (year % 100 || (year % 400 == 0 && year)) ? 366 : 365);\n     }\n \n     /// Number of month from some fixed moment in the past (year * 12 + month)\n-    inline unsigned toRelativeMonthNum(DayNum d) const\n-    {\n-        return lut[d].year * 12 + lut[d].month;\n-    }\n-\n-    inline unsigned toRelativeMonthNum(time_t t) const\n-    {\n-        return toRelativeMonthNum(toDayNum(t));\n-    }\n-\n-    inline unsigned toRelativeQuarterNum(DayNum d) const\n+    template <typename DateOrTime>\n+    inline unsigned toRelativeMonthNum(DateOrTime v) const\n     {\n-        return lut[d].year * 4 + (lut[d].month - 1) / 3;\n+        const LUTIndex i = toLUTIndex(v);\n+        return lut[i].year * 12 + lut[i].month;\n     }\n \n-    inline unsigned toRelativeQuarterNum(time_t t) const\n+    template <typename DateOrTime>\n+    inline unsigned toRelativeQuarterNum(DateOrTime v) const\n     {\n-        return toRelativeQuarterNum(toDayNum(t));\n+        const LUTIndex i = toLUTIndex(v);\n+        return lut[i].year * 4 + (lut[i].month - 1) / 3;\n     }\n \n     /// We count all hour-length intervals, unrelated to offset changes.\n     inline time_t toRelativeHourNum(time_t t) const\n     {\n-        if (offset_is_whole_number_of_hours_everytime)\n+        if (t >= 0 && offset_is_whole_number_of_hours_during_epoch)\n             return t / 3600;\n \n         /// Assume that if offset was fractional, then the fraction is the same as at the beginning of epoch.\n         /// NOTE This assumption is false for \"Pacific/Pitcairn\" and \"Pacific/Kiritimati\" time zones.\n-        return (t + 86400 - offset_at_start_of_epoch) / 3600;\n+        return (t + DATE_LUT_ADD + 86400 - offset_at_start_of_epoch) / 3600 - (DATE_LUT_ADD / 3600);\n     }\n \n-    inline time_t toRelativeHourNum(DayNum d) const\n+    template <typename DateOrTime>\n+    inline time_t toRelativeHourNum(DateOrTime v) const\n     {\n-        return toRelativeHourNum(lut[d].date);\n+        return toRelativeHourNum(lut[toLUTIndex(v)].date);\n     }\n \n     inline time_t toRelativeMinuteNum(time_t t) const\n     {\n-        return t / 60;\n+        return (t + DATE_LUT_ADD) / 60 - (DATE_LUT_ADD / 60);\n     }\n \n-    inline time_t toRelativeMinuteNum(DayNum d) const\n+    template <typename DateOrTime>\n+    inline time_t toRelativeMinuteNum(DateOrTime v) const\n     {\n-        return toRelativeMinuteNum(lut[d].date);\n+        return toRelativeMinuteNum(lut[toLUTIndex(v)].date);\n     }\n \n-    inline DayNum toStartOfYearInterval(DayNum d, UInt64 years) const\n+    template <typename DateOrTime>\n+    inline ExtendedDayNum toStartOfYearInterval(DateOrTime v, UInt64 years) const\n     {\n         if (years == 1)\n-            return toFirstDayNumOfYear(d);\n-        return years_lut[(lut[d].year - DATE_LUT_MIN_YEAR) / years * years];\n+            return toFirstDayNumOfYear(v);\n+\n+        const LUTIndex i = toLUTIndex(v);\n+\n+        UInt16 year = lut[i].year / years * years;\n+\n+        /// For example, rounding down 1925 to 100 years will be 1900, but it's less than min supported year.\n+        if (unlikely(year < DATE_LUT_MIN_YEAR))\n+            year = DATE_LUT_MIN_YEAR;\n+\n+        return toDayNum(years_lut[year - DATE_LUT_MIN_YEAR]);\n     }\n \n-    inline DayNum toStartOfQuarterInterval(DayNum d, UInt64 quarters) const\n+    inline ExtendedDayNum toStartOfQuarterInterval(ExtendedDayNum d, UInt64 quarters) const\n     {\n         if (quarters == 1)\n             return toFirstDayNumOfQuarter(d);\n         return toStartOfMonthInterval(d, quarters * 3);\n     }\n \n-    inline DayNum toStartOfMonthInterval(DayNum d, UInt64 months) const\n+    inline ExtendedDayNum toStartOfMonthInterval(ExtendedDayNum d, UInt64 months) const\n     {\n         if (months == 1)\n             return toFirstDayNumOfMonth(d);\n-        const auto & date = lut[d];\n-        UInt32 month_total_index = (date.year - DATE_LUT_MIN_YEAR) * 12 + date.month - 1;\n-        return years_months_lut[month_total_index / months * months];\n+        const Values & values = lut[toLUTIndex(d)];\n+        UInt32 month_total_index = (values.year - DATE_LUT_MIN_YEAR) * 12 + values.month - 1;\n+        return toDayNum(years_months_lut[month_total_index / months * months]);\n     }\n \n-    inline DayNum toStartOfWeekInterval(DayNum d, UInt64 weeks) const\n+    inline ExtendedDayNum toStartOfWeekInterval(ExtendedDayNum d, UInt64 weeks) const\n     {\n         if (weeks == 1)\n             return toFirstDayNumOfWeek(d);\n         UInt64 days = weeks * 7;\n         // January 1st 1970 was Thursday so we need this 4-days offset to make weeks start on Monday.\n-        return DayNum(4 + (d - 4) / days * days);\n+        return ExtendedDayNum(4 + (d - 4) / days * days);\n     }\n \n-    inline time_t toStartOfDayInterval(DayNum d, UInt64 days) const\n+    inline time_t toStartOfDayInterval(ExtendedDayNum d, UInt64 days) const\n     {\n         if (days == 1)\n             return toDate(d);\n-        return lut[d / days * days].date;\n+        return lut[toLUTIndex(ExtendedDayNum(d / days * days))].date;\n     }\n \n     inline time_t toStartOfHourInterval(time_t t, UInt64 hours) const\n@@ -679,9 +854,13 @@ class DateLUTImpl\n         if (hours == 1)\n             return toStartOfHour(t);\n         UInt64 seconds = hours * 3600;\n-        t = t / seconds * seconds;\n-        if (offset_is_whole_number_of_hours_everytime)\n+\n+        t = roundDown(t, seconds);\n+\n+        if (t >= 0 && offset_is_whole_number_of_hours_during_epoch)\n             return t;\n+\n+        /// TODO check if it's correct.\n         return toStartOfHour(t);\n     }\n \n@@ -689,101 +868,155 @@ class DateLUTImpl\n     {\n         if (minutes == 1)\n             return toStartOfMinute(t);\n+\n         UInt64 seconds = 60 * minutes;\n-        return t / seconds * seconds;\n+        return roundDown(t, seconds);\n     }\n \n     inline time_t toStartOfSecondInterval(time_t t, UInt64 seconds) const\n     {\n         if (seconds == 1)\n             return t;\n-        return t / seconds * seconds;\n+\n+        return roundDown(t, seconds);\n     }\n \n-    /// Create DayNum from year, month, day of month.\n-    inline DayNum makeDayNum(UInt16 year, UInt8 month, UInt8 day_of_month) const\n+    inline LUTIndex makeLUTIndex(Int16 year, UInt8 month, UInt8 day_of_month) const\n     {\n         if (unlikely(year < DATE_LUT_MIN_YEAR || year > DATE_LUT_MAX_YEAR || month < 1 || month > 12 || day_of_month < 1 || day_of_month > 31))\n-            return DayNum(0); // TODO (nemkov, DateTime64 phase 2): implement creating real date for year outside of LUT range.\n+            return LUTIndex(0);\n \n-        // The day after 2106-02-07 will not stored fully as struct Values, so just overflow it as 0\n-        if (unlikely(year == DATE_LUT_MAX_YEAR && (month > 2 || (month == 2 && day_of_month > 7))))\n-            return DayNum(0);\n+        return LUTIndex{years_months_lut[(year - DATE_LUT_MIN_YEAR) * 12 + month - 1] + day_of_month - 1};\n+    }\n \n-        return DayNum(years_months_lut[(year - DATE_LUT_MIN_YEAR) * 12 + month - 1] + day_of_month - 1);\n+    /// Create DayNum from year, month, day of month.\n+    inline ExtendedDayNum makeDayNum(Int16 year, UInt8 month, UInt8 day_of_month) const\n+    {\n+        if (unlikely(year < DATE_LUT_MIN_YEAR || year > DATE_LUT_MAX_YEAR || month < 1 || month > 12 || day_of_month < 1 || day_of_month > 31))\n+            return ExtendedDayNum(0);\n+\n+        return toDayNum(makeLUTIndex(year, month, day_of_month));\n     }\n \n-    inline time_t makeDate(UInt16 year, UInt8 month, UInt8 day_of_month) const\n+    inline time_t makeDate(Int16 year, UInt8 month, UInt8 day_of_month) const\n     {\n-        return lut[makeDayNum(year, month, day_of_month)].date;\n+        return lut[makeLUTIndex(year, month, day_of_month)].date;\n     }\n \n     /** Does not accept daylight saving time as argument: in case of ambiguity, it choose greater timestamp.\n       */\n-    inline time_t makeDateTime(UInt16 year, UInt8 month, UInt8 day_of_month, UInt8 hour, UInt8 minute, UInt8 second) const\n+    inline time_t makeDateTime(Int16 year, UInt8 month, UInt8 day_of_month, UInt8 hour, UInt8 minute, UInt8 second) const\n     {\n-        size_t index = makeDayNum(year, month, day_of_month);\n+        size_t index = makeLUTIndex(year, month, day_of_month);\n         UInt32 time_offset = hour * 3600 + minute * 60 + second;\n \n-        if (time_offset >= lut[index].time_at_offset_change)\n-            time_offset -= lut[index].amount_of_offset_change;\n-\n-        UInt32 res = lut[index].date + time_offset;\n+        if (time_offset >= lut[index].time_at_offset_change())\n+            time_offset -= lut[index].amount_of_offset_change();\n \n-        if (unlikely(res > DATE_LUT_MAX))\n-            return 0;\n-\n-        return res;\n+        return lut[index].date + time_offset;\n     }\n \n-    inline const Values & getValues(DayNum d) const { return lut[d]; }\n-    inline const Values & getValues(time_t t) const { return lut[findIndex(t)]; }\n+    template <typename DateOrTime>\n+    inline const Values & getValues(DateOrTime v) const { return lut[toLUTIndex(v)]; }\n \n-    inline UInt32 toNumYYYYMM(time_t t) const\n+    template <typename DateOrTime>\n+    inline UInt32 toNumYYYYMM(DateOrTime v) const\n     {\n-        const Values & values = find(t);\n+        const Values & values = getValues(v);\n         return values.year * 100 + values.month;\n     }\n \n-    inline UInt32 toNumYYYYMM(DayNum d) const\n+    template <typename DateOrTime>\n+    inline UInt32 toNumYYYYMMDD(DateOrTime v) const\n     {\n-        const Values & values = lut[d];\n-        return values.year * 100 + values.month;\n+        const Values & values = getValues(v);\n+        return values.year * 10000 + values.month * 100 + values.day_of_month;\n     }\n \n-    inline UInt32 toNumYYYYMMDD(time_t t) const\n+    inline time_t YYYYMMDDToDate(UInt32 num) const\n     {\n-        const Values & values = find(t);\n-        return values.year * 10000 + values.month * 100 + values.day_of_month;\n+        return makeDate(num / 10000, num / 100 % 100, num % 100);\n     }\n \n-    inline UInt32 toNumYYYYMMDD(DayNum d) const\n+    inline ExtendedDayNum YYYYMMDDToDayNum(UInt32 num) const\n     {\n-        const Values & values = lut[d];\n-        return values.year * 10000 + values.month * 100 + values.day_of_month;\n+        return makeDayNum(num / 10000, num / 100 % 100, num % 100);\n     }\n \n-    inline time_t YYYYMMDDToDate(UInt32 num) const\n+\n+    struct DateComponents\n     {\n-        return makeDate(num / 10000, num / 100 % 100, num % 100);\n+        uint16_t year;\n+        uint8_t month;\n+        uint8_t day;\n+    };\n+\n+    struct TimeComponents\n+    {\n+        uint8_t hour;\n+        uint8_t minute;\n+        uint8_t second;\n+    };\n+\n+    struct DateTimeComponents\n+    {\n+        DateComponents date;\n+        TimeComponents time;\n+    };\n+\n+    inline DateComponents toDateComponents(time_t t) const\n+    {\n+        const Values & values = getValues(t);\n+        return { values.year, values.month, values.day_of_month };\n     }\n \n-    inline DayNum YYYYMMDDToDayNum(UInt32 num) const\n+    inline DateTimeComponents toDateTimeComponents(time_t t) const\n     {\n-        return makeDayNum(num / 10000, num / 100 % 100, num % 100);\n+        const LUTIndex index = findIndex(t);\n+        const Values & values = lut[index];\n+\n+        DateTimeComponents res;\n+\n+        res.date.year = values.year;\n+        res.date.month = values.month;\n+        res.date.day = values.day_of_month;\n+\n+        time_t time = t - values.date;\n+        if (time >= values.time_at_offset_change())\n+            time += values.amount_of_offset_change();\n+\n+        if (unlikely(time < 0))\n+        {\n+            res.time.second = 0;\n+            res.time.minute = 0;\n+            res.time.hour = 0;\n+        }\n+        else\n+        {\n+            res.time.second = time % 60;\n+            res.time.minute = time / 60 % 60;\n+            res.time.hour = time / 3600;\n+        }\n+\n+        /// In case time was changed backwards at the start of next day, we will repeat the hour 23.\n+        if (unlikely(res.time.hour > 23))\n+            res.time.hour = 23;\n+\n+        return res;\n     }\n \n \n     inline UInt64 toNumYYYYMMDDhhmmss(time_t t) const\n     {\n-        const Values & values = find(t);\n+        DateTimeComponents components = toDateTimeComponents(t);\n+\n         return\n-              toSecond(t)\n-            + toMinute(t) * 100\n-            + toHour(t) * 10000\n-            + UInt64(values.day_of_month) * 1000000\n-            + UInt64(values.month) * 100000000\n-            + UInt64(values.year) * 10000000000;\n+              components.time.second\n+            + components.time.minute * 100\n+            + components.time.hour * 10000\n+            + UInt64(components.date.day) * 1000000\n+            + UInt64(components.date.month) * 100000000\n+            + UInt64(components.date.year) * 10000000000;\n     }\n \n     inline time_t YYYYMMDDhhmmssToTime(UInt64 num) const\n@@ -802,15 +1035,19 @@ class DateLUTImpl\n \n     inline NO_SANITIZE_UNDEFINED time_t addDays(time_t t, Int64 delta) const\n     {\n-        DayNum index = findIndex(t);\n-        time_t time_offset = toHour(t) * 3600 + toMinute(t) * 60 + toSecond(t);\n+        const LUTIndex index = findIndex(t);\n+        const Values & values = lut[index];\n \n-        index += delta;\n+        time_t time = t - values.date;\n+        if (time >= values.time_at_offset_change())\n+            time += values.amount_of_offset_change();\n \n-        if (time_offset >= lut[index].time_at_offset_change)\n-            time_offset -= lut[index].amount_of_offset_change;\n+        const LUTIndex new_index = index + delta;\n \n-        return lut[index].date + time_offset;\n+        if (time >= lut[new_index].time_at_offset_change())\n+            time -= lut[new_index].amount_of_offset_change();\n+\n+        return lut[new_index].date + time;\n     }\n \n     inline NO_SANITIZE_UNDEFINED time_t addWeeks(time_t t, Int64 delta) const\n@@ -818,7 +1055,7 @@ class DateLUTImpl\n         return addDays(t, delta * 7);\n     }\n \n-    inline UInt8 saturateDayOfMonth(UInt16 year, UInt8 month, UInt8 day_of_month) const\n+    inline UInt8 saturateDayOfMonth(Int16 year, UInt8 month, UInt8 day_of_month) const\n     {\n         if (likely(day_of_month <= 28))\n             return day_of_month;\n@@ -831,23 +1068,10 @@ class DateLUTImpl\n         return day_of_month;\n     }\n \n-    /// If resulting month has less deys than source month, then saturation can happen.\n-    /// Example: 31 Aug + 1 month = 30 Sep.\n-    inline time_t addMonths(time_t t, Int64 delta) const\n-    {\n-        DayNum result_day = addMonths(toDayNum(t), delta);\n-\n-        time_t time_offset = toHour(t) * 3600 + toMinute(t) * 60 + toSecond(t);\n-\n-        if (time_offset >= lut[result_day].time_at_offset_change)\n-            time_offset -= lut[result_day].amount_of_offset_change;\n-\n-        return lut[result_day].date + time_offset;\n-    }\n-\n-    inline NO_SANITIZE_UNDEFINED DayNum addMonths(DayNum d, Int64 delta) const\n+    template <typename DateOrTime>\n+    inline LUTIndex addMonthsIndex(DateOrTime v, Int64 delta) const\n     {\n-        const Values & values = lut[d];\n+        const Values & values = lut[toLUTIndex(v)];\n \n         Int64 month = static_cast<Int64>(values.month) + delta;\n \n@@ -857,7 +1081,7 @@ class DateLUTImpl\n             month = ((month - 1) % 12) + 1;\n             auto day_of_month = saturateDayOfMonth(year, month, values.day_of_month);\n \n-            return makeDayNum(year, month, day_of_month);\n+            return makeLUTIndex(year, month, day_of_month);\n         }\n         else\n         {\n@@ -865,36 +1089,48 @@ class DateLUTImpl\n             month = 12 - (-month % 12);\n             auto day_of_month = saturateDayOfMonth(year, month, values.day_of_month);\n \n-            return makeDayNum(year, month, day_of_month);\n+            return makeLUTIndex(year, month, day_of_month);\n         }\n     }\n \n-    inline NO_SANITIZE_UNDEFINED time_t addQuarters(time_t t, Int64 delta) const\n+    /// If resulting month has less deys than source month, then saturation can happen.\n+    /// Example: 31 Aug + 1 month = 30 Sep.\n+    inline time_t NO_SANITIZE_UNDEFINED addMonths(time_t t, Int64 delta) const\n     {\n-        return addMonths(t, delta * 3);\n+        const auto result_day = addMonthsIndex(t, delta);\n+\n+        const LUTIndex index = findIndex(t);\n+        const Values & values = lut[index];\n+\n+        time_t time = t - values.date;\n+        if (time >= values.time_at_offset_change())\n+            time += values.amount_of_offset_change();\n+\n+        if (time >= lut[result_day].time_at_offset_change())\n+            time -= lut[result_day].amount_of_offset_change();\n+\n+        return lut[result_day].date + time;\n     }\n \n-    inline NO_SANITIZE_UNDEFINED DayNum addQuarters(DayNum d, Int64 delta) const\n+    inline ExtendedDayNum NO_SANITIZE_UNDEFINED addMonths(ExtendedDayNum d, Int64 delta) const\n     {\n-        return addMonths(d, delta * 3);\n+        return toDayNum(addMonthsIndex(d, delta));\n     }\n \n-    /// Saturation can occur if 29 Feb is mapped to non-leap year.\n-    inline NO_SANITIZE_UNDEFINED time_t addYears(time_t t, Int64 delta) const\n+    inline time_t NO_SANITIZE_UNDEFINED addQuarters(time_t t, Int64 delta) const\n     {\n-        DayNum result_day = addYears(toDayNum(t), delta);\n-\n-        time_t time_offset = toHour(t) * 3600 + toMinute(t) * 60 + toSecond(t);\n-\n-        if (time_offset >= lut[result_day].time_at_offset_change)\n-            time_offset -= lut[result_day].amount_of_offset_change;\n+        return addMonths(t, delta * 3);\n+    }\n \n-        return lut[result_day].date + time_offset;\n+    inline ExtendedDayNum addQuarters(ExtendedDayNum d, Int64 delta) const\n+    {\n+        return addMonths(d, delta * 3);\n     }\n \n-    inline NO_SANITIZE_UNDEFINED DayNum addYears(DayNum d, Int64 delta) const\n+    template <typename DateOrTime>\n+    inline LUTIndex NO_SANITIZE_UNDEFINED addYearsIndex(DateOrTime v, Int64 delta) const\n     {\n-        const Values & values = lut[d];\n+        const Values & values = lut[toLUTIndex(v)];\n \n         auto year = values.year + delta;\n         auto month = values.month;\n@@ -904,42 +1140,61 @@ class DateLUTImpl\n         if (unlikely(day_of_month == 29 && month == 2))\n             day_of_month = saturateDayOfMonth(year, month, day_of_month);\n \n-        return makeDayNum(year, month, day_of_month);\n+        return makeLUTIndex(year, month, day_of_month);\n     }\n \n+    /// Saturation can occur if 29 Feb is mapped to non-leap year.\n+    inline time_t addYears(time_t t, Int64 delta) const\n+    {\n+        auto result_day = addYearsIndex(t, delta);\n \n-    inline std::string timeToString(time_t t) const\n+        const LUTIndex index = findIndex(t);\n+        const Values & values = lut[index];\n+\n+        time_t time = t - values.date;\n+        if (time >= values.time_at_offset_change())\n+            time += values.amount_of_offset_change();\n+\n+        if (time >= lut[result_day].time_at_offset_change())\n+            time -= lut[result_day].amount_of_offset_change();\n+\n+        return lut[result_day].date + time;\n+    }\n+\n+    inline ExtendedDayNum addYears(ExtendedDayNum d, Int64 delta) const\n     {\n-        const Values & values = find(t);\n+        return toDayNum(addYearsIndex(d, delta));\n+    }\n \n-        std::string s {\"0000-00-00 00:00:00\"};\n \n-        s[0] += values.year / 1000;\n-        s[1] += (values.year / 100) % 10;\n-        s[2] += (values.year / 10) % 10;\n-        s[3] += values.year % 10;\n-        s[5] += values.month / 10;\n-        s[6] += values.month % 10;\n-        s[8] += values.day_of_month / 10;\n-        s[9] += values.day_of_month % 10;\n+    inline std::string timeToString(time_t t) const\n+    {\n+        DateTimeComponents components = toDateTimeComponents(t);\n \n-        auto hour = toHour(t);\n-        auto minute = toMinute(t);\n-        auto second = toSecond(t);\n+        std::string s {\"0000-00-00 00:00:00\"};\n \n-        s[11] += hour / 10;\n-        s[12] += hour % 10;\n-        s[14] += minute / 10;\n-        s[15] += minute % 10;\n-        s[17] += second / 10;\n-        s[18] += second % 10;\n+        s[0] += components.date.year / 1000;\n+        s[1] += (components.date.year / 100) % 10;\n+        s[2] += (components.date.year / 10) % 10;\n+        s[3] += components.date.year % 10;\n+        s[5] += components.date.month / 10;\n+        s[6] += components.date.month % 10;\n+        s[8] += components.date.day / 10;\n+        s[9] += components.date.day % 10;\n+\n+        s[11] += components.time.hour / 10;\n+        s[12] += components.time.hour % 10;\n+        s[14] += components.time.minute / 10;\n+        s[15] += components.time.minute % 10;\n+        s[17] += components.time.second / 10;\n+        s[18] += components.time.second % 10;\n \n         return s;\n     }\n \n     inline std::string dateToString(time_t t) const\n     {\n-        const Values & values = find(t);\n+        const Values & values = getValues(t);\n \n         std::string s {\"0000-00-00\"};\n \n@@ -955,9 +1210,9 @@ class DateLUTImpl\n         return s;\n     }\n \n-    inline std::string dateToString(DayNum d) const\n+    inline std::string dateToString(ExtendedDayNum d) const\n     {\n-        const Values & values = lut[d];\n+        const Values & values = getValues(d);\n \n         std::string s {\"0000-00-00\"};\n \ndiff --git a/base/common/DayNum.h b/base/common/DayNum.h\nindex a4ef0c43b69a..5cf4d4635c82 100644\n--- a/base/common/DayNum.h\n+++ b/base/common/DayNum.h\n@@ -7,3 +7,8 @@\n   * See DateLUTImpl for usage examples.\n   */\n STRONG_TYPEDEF(UInt16, DayNum)\n+\n+/** Represent number of days since 1970-01-01 but in extended range,\n+ * for dates before 1970-01-01 and after 2105\n+ */\n+STRONG_TYPEDEF(Int32, ExtendedDayNum)\ndiff --git a/base/common/LocalDate.h b/base/common/LocalDate.h\nindex e5ebe877bc5a..b1e6eeb907c1 100644\n--- a/base/common/LocalDate.h\n+++ b/base/common/LocalDate.h\n@@ -92,20 +92,10 @@ class LocalDate\n     LocalDate(const LocalDate &) noexcept = default;\n     LocalDate & operator= (const LocalDate &) noexcept = default;\n \n-    LocalDate & operator= (time_t time)\n-    {\n-        init(time);\n-        return *this;\n-    }\n-\n-    operator time_t() const\n-    {\n-        return DateLUT::instance().makeDate(m_year, m_month, m_day);\n-    }\n-\n     DayNum getDayNum() const\n     {\n-        return DateLUT::instance().makeDayNum(m_year, m_month, m_day);\n+        const auto & lut = DateLUT::instance();\n+        return DayNum(lut.makeDayNum(m_year, m_month, m_day).toUnderType());\n     }\n \n     operator DayNum() const\n@@ -166,12 +156,3 @@ class LocalDate\n };\n \n static_assert(sizeof(LocalDate) == 4);\n-\n-\n-namespace std\n-{\n-inline string to_string(const LocalDate & date)\n-{\n-    return date.toString();\n-}\n-}\ndiff --git a/base/common/LocalDateTime.h b/base/common/LocalDateTime.h\nindex 0e237789bd13..dde283e5ebbf 100644\n--- a/base/common/LocalDateTime.h\n+++ b/base/common/LocalDateTime.h\n@@ -29,29 +29,16 @@ class LocalDateTime\n     /// NOTE We may use attribute packed instead, but it is less portable.\n     unsigned char pad = 0;\n \n-    void init(time_t time)\n+    void init(time_t time, const DateLUTImpl & time_zone)\n     {\n-        if (unlikely(time > DATE_LUT_MAX || time == 0))\n-        {\n-            m_year = 0;\n-            m_month = 0;\n-            m_day = 0;\n-            m_hour = 0;\n-            m_minute = 0;\n-            m_second = 0;\n-\n-            return;\n-        }\n-\n-        const auto & date_lut = DateLUT::instance();\n-        const auto & values = date_lut.getValues(time);\n-\n-        m_year = values.year;\n-        m_month = values.month;\n-        m_day = values.day_of_month;\n-        m_hour = date_lut.toHour(time);\n-        m_minute = date_lut.toMinute(time);\n-        m_second = date_lut.toSecond(time);\n+        DateLUTImpl::DateTimeComponents components = time_zone.toDateTimeComponents(time);\n+\n+        m_year = components.date.year;\n+        m_month = components.date.month;\n+        m_day = components.date.day;\n+        m_hour = components.time.hour;\n+        m_minute = components.time.minute;\n+        m_second = components.time.second;\n \n         (void)pad;  /// Suppress unused private field warning.\n     }\n@@ -73,9 +60,9 @@ class LocalDateTime\n     }\n \n public:\n-    explicit LocalDateTime(time_t time)\n+    explicit LocalDateTime(time_t time, const DateLUTImpl & time_zone = DateLUT::instance())\n     {\n-        init(time);\n+        init(time, time_zone);\n     }\n \n     LocalDateTime(unsigned short year_, unsigned char month_, unsigned char day_,\n@@ -104,19 +91,6 @@ class LocalDateTime\n     LocalDateTime(const LocalDateTime &) noexcept = default;\n     LocalDateTime & operator= (const LocalDateTime &) noexcept = default;\n \n-    LocalDateTime & operator= (time_t time)\n-    {\n-        init(time);\n-        return *this;\n-    }\n-\n-    operator time_t() const\n-    {\n-        return m_year == 0\n-            ? 0\n-            : DateLUT::instance().makeDateTime(m_year, m_month, m_day, m_hour, m_minute, m_second);\n-    }\n-\n     unsigned short year() const { return m_year; }\n     unsigned char month() const { return m_month; }\n     unsigned char day() const { return m_day; }\n@@ -132,8 +106,30 @@ class LocalDateTime\n     void second(unsigned char x) { m_second = x; }\n \n     LocalDate toDate() const { return LocalDate(m_year, m_month, m_day); }\n+    LocalDateTime toStartOfDate() const { return LocalDateTime(m_year, m_month, m_day, 0, 0, 0); }\n \n-    LocalDateTime toStartOfDate() { return LocalDateTime(m_year, m_month, m_day, 0, 0, 0); }\n+    std::string toString() const\n+    {\n+        std::string s{\"0000-00-00 00:00:00\"};\n+\n+        s[0] += m_year / 1000;\n+        s[1] += (m_year / 100) % 10;\n+        s[2] += (m_year / 10) % 10;\n+        s[3] += m_year % 10;\n+        s[5] += m_month / 10;\n+        s[6] += m_month % 10;\n+        s[8] += m_day / 10;\n+        s[9] += m_day % 10;\n+\n+        s[11] += m_hour / 10;\n+        s[12] += m_hour % 10;\n+        s[14] += m_minute / 10;\n+        s[15] += m_minute % 10;\n+        s[17] += m_second / 10;\n+        s[18] += m_second % 10;\n+\n+        return s;\n+    }\n \n     bool operator< (const LocalDateTime & other) const\n     {\n@@ -167,14 +163,3 @@ class LocalDateTime\n };\n \n static_assert(sizeof(LocalDateTime) == 8);\n-\n-\n-namespace std\n-{\n-inline string to_string(const LocalDateTime & datetime)\n-{\n-    stringstream str;\n-    str << datetime;\n-    return str.str();\n-}\n-}\ndiff --git a/base/common/strong_typedef.h b/base/common/strong_typedef.h\nindex d9850a25c370..77b83bfa6e5f 100644\n--- a/base/common/strong_typedef.h\n+++ b/base/common/strong_typedef.h\n@@ -12,6 +12,7 @@ struct StrongTypedef\n     T t;\n \n public:\n+    using UnderlyingType = T;\n     template <class Enable = typename std::is_copy_constructible<T>::type>\n     explicit StrongTypedef(const T & t_) : t(t_) {}\n     template <class Enable = typename std::is_move_constructible<T>::type>\ndiff --git a/programs/CMakeLists.txt b/programs/CMakeLists.txt\nindex 9adca58b55a3..6b322df5ffd2 100644\n--- a/programs/CMakeLists.txt\n+++ b/programs/CMakeLists.txt\n@@ -325,7 +325,7 @@ else ()\n endif ()\n \n if (ENABLE_TESTS AND USE_GTEST)\n-    set (CLICKHOUSE_UNIT_TESTS_TARGETS unit_tests_libcommon unit_tests_dbms)\n+    set (CLICKHOUSE_UNIT_TESTS_TARGETS unit_tests_dbms)\n     add_custom_target (clickhouse-tests ALL DEPENDS ${CLICKHOUSE_UNIT_TESTS_TARGETS})\n     add_dependencies(clickhouse-bundle clickhouse-tests)\n endif()\ndiff --git a/programs/client/Client.cpp b/programs/client/Client.cpp\nindex da7c729a737d..a594a06f000e 100644\n--- a/programs/client/Client.cpp\n+++ b/programs/client/Client.cpp\n@@ -390,7 +390,7 @@ class Client : public Poco::Util::Application\n         for (auto d : chineseNewYearIndicators)\n         {\n             /// Let's celebrate until Lantern Festival\n-            if (d <= days && d + 25u >= days)\n+            if (d <= days && d + 25 >= days)\n                 return true;\n             else if (d > days)\n                 return false;\ndiff --git a/programs/git-import/git-import.cpp b/programs/git-import/git-import.cpp\nindex ae8b55e2aff7..b07435dcf781 100644\n--- a/programs/git-import/git-import.cpp\n+++ b/programs/git-import/git-import.cpp\n@@ -1064,7 +1064,7 @@ void processCommit(\n \n     time_t commit_time;\n     readText(commit_time, in);\n-    commit.time = commit_time;\n+    commit.time = LocalDateTime(commit_time);\n     assertChar('\\0', in);\n     readNullTerminated(commit.author, in);\n     std::string parent_hash;\ndiff --git a/programs/odbc-bridge/ODBCBlockInputStream.cpp b/programs/odbc-bridge/ODBCBlockInputStream.cpp\nindex 3e2a2d0c7d42..b8a4209ac947 100644\n--- a/programs/odbc-bridge/ODBCBlockInputStream.cpp\n+++ b/programs/odbc-bridge/ODBCBlockInputStream.cpp\n@@ -87,8 +87,8 @@ namespace\n             case ValueType::vtDateTime:\n             {\n                 Poco::DateTime datetime = value.convert<Poco::DateTime>();\n-                assert_cast<ColumnUInt32 &>(column).insertValue(time_t{LocalDateTime(\n-                    datetime.year(), datetime.month(), datetime.day(), datetime.hour(), datetime.minute(), datetime.second())});\n+                assert_cast<ColumnUInt32 &>(column).insertValue(DateLUT::instance().makeDateTime(\n+                    datetime.year(), datetime.month(), datetime.day(), datetime.hour(), datetime.minute(), datetime.second()));\n                 break;\n             }\n             case ValueType::vtUUID:\ndiff --git a/programs/odbc-bridge/ODBCBlockOutputStream.cpp b/programs/odbc-bridge/ODBCBlockOutputStream.cpp\nindex 4d8b9fa6bdfb..db3c94414192 100644\n--- a/programs/odbc-bridge/ODBCBlockOutputStream.cpp\n+++ b/programs/odbc-bridge/ODBCBlockOutputStream.cpp\n@@ -81,7 +81,7 @@ namespace\n             case ValueType::vtDate:\n                 return Poco::Dynamic::Var(LocalDate(DayNum(field.get<UInt64>())).toString()).convert<String>();\n             case ValueType::vtDateTime:\n-                return Poco::Dynamic::Var(std::to_string(LocalDateTime(time_t(field.get<UInt64>())))).convert<String>();\n+                return Poco::Dynamic::Var(DateLUT::instance().timeToString(time_t(field.get<UInt64>()))).convert<String>();\n             case ValueType::vtUUID:\n                 return Poco::Dynamic::Var(UUID(field.get<UInt128>()).toUnderType().toHexString()).convert<std::string>();\n              default:\ndiff --git a/src/CMakeLists.txt b/src/CMakeLists.txt\nindex 412da2fc00fb..b34a64b2d19d 100644\n--- a/src/CMakeLists.txt\n+++ b/src/CMakeLists.txt\n@@ -459,6 +459,8 @@ endif()\n \n dbms_target_link_libraries(PRIVATE _boost_context)\n \n+include (${ClickHouse_SOURCE_DIR}/cmake/add_check.cmake)\n+\n if (ENABLE_TESTS AND USE_GTEST)\n     macro (grep_gtest_sources BASE_DIR DST_VAR)\n         # Cold match files that are not in tests/ directories\n@@ -479,6 +481,15 @@ if (ENABLE_TESTS AND USE_GTEST)\n         -Wno-gnu-zero-variadic-macro-arguments\n     )\n \n-    target_link_libraries(unit_tests_dbms PRIVATE ${GTEST_BOTH_LIBRARIES} clickhouse_functions clickhouse_aggregate_functions clickhouse_parsers dbms clickhouse_common_zookeeper string_utils)\n+    target_link_libraries(unit_tests_dbms PRIVATE\n+        ${GTEST_BOTH_LIBRARIES}\n+        clickhouse_functions\n+        clickhouse_aggregate_functions\n+        clickhouse_parsers\n+        clickhouse_storages_system\n+        dbms\n+        clickhouse_common_zookeeper\n+        string_utils)\n+\n     add_check(unit_tests_dbms)\n endif ()\ndiff --git a/src/Core/DecimalFunctions.h b/src/Core/DecimalFunctions.h\nindex 355cf1d378af..2cd50ab8d08d 100644\n--- a/src/Core/DecimalFunctions.h\n+++ b/src/Core/DecimalFunctions.h\n@@ -50,9 +50,10 @@ inline auto scaleMultiplier(UInt32 scale)\n  * whole - represents whole part of decimal, can be negative or positive.\n  * fractional - for fractional part of decimal, always positive.\n  */\n-template <typename T>\n+template <typename DecimalType>\n struct DecimalComponents\n {\n+    using T = typename DecimalType::NativeType;\n     T whole;\n     T fractional;\n };\n@@ -106,6 +107,15 @@ inline DecimalType decimalFromComponentsWithMultiplier(\n     return DecimalType(value);\n }\n \n+template <typename DecimalType>\n+inline DecimalType decimalFromComponentsWithMultiplier(\n+        const DecimalComponents<DecimalType> & components,\n+        typename DecimalType::NativeType scale_multiplier)\n+{\n+    return decimalFromComponentsWithMultiplier<DecimalType>(components.whole, components.fractional, scale_multiplier);\n+}\n+\n+\n /** Make a decimal value from whole and fractional components with given scale.\n  *\n  * @see `decimalFromComponentsWithMultiplier` for details.\n@@ -126,7 +136,7 @@ inline DecimalType decimalFromComponents(\n  */\n template <typename DecimalType>\n inline DecimalType decimalFromComponents(\n-        const DecimalComponents<typename DecimalType::NativeType> & components,\n+        const DecimalComponents<DecimalType> & components,\n         UInt32 scale)\n {\n     return decimalFromComponents<DecimalType>(components.whole, components.fractional, scale);\n@@ -136,7 +146,7 @@ inline DecimalType decimalFromComponents(\n  * This is an optimization to reduce number of calls to scaleMultiplier on known scale.\n  */\n template <typename DecimalType>\n-inline DecimalComponents<typename DecimalType::NativeType> splitWithScaleMultiplier(\n+inline DecimalComponents<DecimalType> splitWithScaleMultiplier(\n         const DecimalType & decimal,\n         typename DecimalType::NativeType scale_multiplier)\n {\n@@ -151,7 +161,7 @@ inline DecimalComponents<typename DecimalType::NativeType> splitWithScaleMultipl\n \n /// Split decimal into components: whole and fractional part, @see `DecimalComponents` for details.\n template <typename DecimalType>\n-inline DecimalComponents<typename DecimalType::NativeType> split(const DecimalType & decimal, UInt32 scale)\n+inline DecimalComponents<DecimalType> split(const DecimalType & decimal, UInt32 scale)\n {\n     if (scale == 0)\n     {\ndiff --git a/src/Core/MySQL/MySQLReplication.cpp b/src/Core/MySQL/MySQLReplication.cpp\nindex 16e31a46aa2e..7e3f68983be1 100644\n--- a/src/Core/MySQL/MySQLReplication.cpp\n+++ b/src/Core/MySQL/MySQLReplication.cpp\n@@ -421,8 +421,8 @@ namespace MySQLReplication\n                         UInt32 i24 = 0;\n                         payload.readStrict(reinterpret_cast<char *>(&i24), 3);\n \n-                        DayNum date_day_number = DateLUT::instance().makeDayNum(\n-                            static_cast<int>((i24 >> 9) & 0x7fff), static_cast<int>((i24 >> 5) & 0xf), static_cast<int>(i24 & 0x1f));\n+                        const DayNum date_day_number(DateLUT::instance().makeDayNum(\n+                            static_cast<int>((i24 >> 9) & 0x7fff), static_cast<int>((i24 >> 5) & 0xf), static_cast<int>(i24 & 0x1f)).toUnderType());\n \n                         row.push_back(Field(date_day_number.toUnderType()));\n                         break;\n@@ -444,7 +444,7 @@ namespace MySQLReplication\n                             row.push_back(Field{UInt32(date_time)});\n                         else\n                         {\n-                            DB::DecimalUtils::DecimalComponents<DateTime64::NativeType> components{\n+                            DB::DecimalUtils::DecimalComponents<DateTime64> components{\n                                 static_cast<DateTime64::NativeType>(date_time), 0};\n \n                             components.fractional = fsp;\n@@ -463,7 +463,7 @@ namespace MySQLReplication\n                             row.push_back(Field{sec});\n                         else\n                         {\n-                            DB::DecimalUtils::DecimalComponents<DateTime64::NativeType> components{\n+                            DB::DecimalUtils::DecimalComponents<DateTime64> components{\n                                 static_cast<DateTime64::NativeType>(sec), 0};\n \n                             components.fractional = fsp;\ndiff --git a/src/DataStreams/MongoDBBlockInputStream.cpp b/src/DataStreams/MongoDBBlockInputStream.cpp\nindex 5463d95151bd..e4ddcd09ede4 100644\n--- a/src/DataStreams/MongoDBBlockInputStream.cpp\n+++ b/src/DataStreams/MongoDBBlockInputStream.cpp\n@@ -270,8 +270,8 @@ namespace\n                     throw Exception{\"Type mismatch, expected Timestamp, got type id = \" + toString(value.type()) + \" for column \" + name,\n                                     ErrorCodes::TYPE_MISMATCH};\n \n-                assert_cast<ColumnUInt16 &>(column).getData().push_back(UInt16{DateLUT::instance().toDayNum(\n-                    static_cast<const Poco::MongoDB::ConcreteElement<Poco::Timestamp> &>(value).value().epochTime())});\n+                assert_cast<ColumnUInt16 &>(column).getData().push_back(static_cast<UInt16>(DateLUT::instance().toDayNum(\n+                    static_cast<const Poco::MongoDB::ConcreteElement<Poco::Timestamp> &>(value).value().epochTime())));\n                 break;\n             }\n \ndiff --git a/src/DataStreams/PostgreSQLBlockInputStream.cpp b/src/DataStreams/PostgreSQLBlockInputStream.cpp\nindex da6a83fb9300..8350dc86849a 100644\n--- a/src/DataStreams/PostgreSQLBlockInputStream.cpp\n+++ b/src/DataStreams/PostgreSQLBlockInputStream.cpp\n@@ -160,8 +160,15 @@ void PostgreSQLBlockInputStream::insertValue(IColumn & column, std::string_view\n             assert_cast<ColumnUInt16 &>(column).insertValue(UInt16{LocalDate{std::string(value)}.getDayNum()});\n             break;\n         case ValueType::vtDateTime:\n-            assert_cast<ColumnUInt32 &>(column).insertValue(time_t{LocalDateTime{std::string(value)}});\n+        {\n+            ReadBufferFromString in(value);\n+            time_t time = 0;\n+            readDateTimeText(time, in);\n+            if (time < 0)\n+                time = 0;\n+            assert_cast<ColumnUInt32 &>(column).insertValue(time);\n             break;\n+        }\n         case ValueType::vtDateTime64:[[fallthrough]];\n         case ValueType::vtDecimal32: [[fallthrough]];\n         case ValueType::vtDecimal64: [[fallthrough]];\n@@ -257,7 +264,13 @@ void PostgreSQLBlockInputStream::prepareArrayInfo(size_t column_idx, const DataT\n     else if (which.isDate())\n         parser = [](std::string & field) -> Field { return UInt16{LocalDate{field}.getDayNum()}; };\n     else if (which.isDateTime())\n-        parser = [](std::string & field) -> Field { return time_t{LocalDateTime{field}}; };\n+        parser = [](std::string & field) -> Field\n+        {\n+            ReadBufferFromString in(field);\n+            time_t time = 0;\n+            readDateTimeText(time, in);\n+            return time;\n+        };\n     else if (which.isDecimal32())\n         parser = [nested](std::string & field) -> Field\n         {\ndiff --git a/src/DataTypes/DataTypeDateTime.cpp b/src/DataTypes/DataTypeDateTime.cpp\nindex d2bbb4a1efa1..510747f6ef97 100644\n--- a/src/DataTypes/DataTypeDateTime.cpp\n+++ b/src/DataTypes/DataTypeDateTime.cpp\n@@ -12,10 +12,14 @@\n #include <IO/parseDateTimeBestEffort.h>\n #include <Parsers/ASTLiteral.h>\n \n+namespace DB\n+{\n+\n namespace\n {\n-using namespace DB;\n-inline void readText(time_t & x, ReadBuffer & istr, const FormatSettings & settings, const DateLUTImpl & time_zone, const DateLUTImpl & utc_time_zone)\n+\n+inline void readTextHelper(\n+    time_t & x, ReadBuffer & istr, const FormatSettings & settings, const DateLUTImpl & time_zone, const DateLUTImpl & utc_time_zone)\n {\n     switch (settings.date_time_input_format)\n     {\n@@ -27,16 +31,16 @@ inline void readText(time_t & x, ReadBuffer & istr, const FormatSettings & setti\n             return;\n     }\n }\n+\n }\n \n-namespace DB\n-{\n \n TimezoneMixin::TimezoneMixin(const String & time_zone_name)\n     : has_explicit_time_zone(!time_zone_name.empty()),\n     time_zone(DateLUT::instance(time_zone_name)),\n     utc_time_zone(DateLUT::instance(\"UTC\"))\n-{}\n+{\n+}\n \n DataTypeDateTime::DataTypeDateTime(const String & time_zone_name)\n     : TimezoneMixin(time_zone_name)\n@@ -45,7 +49,8 @@ DataTypeDateTime::DataTypeDateTime(const String & time_zone_name)\n \n DataTypeDateTime::DataTypeDateTime(const TimezoneMixin & time_zone_)\n     : TimezoneMixin(time_zone_)\n-{}\n+{\n+}\n \n String DataTypeDateTime::doGetName() const\n {\n@@ -86,8 +91,10 @@ void DataTypeDateTime::deserializeWholeText(IColumn & column, ReadBuffer & istr,\n \n void DataTypeDateTime::deserializeTextEscaped(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const\n {\n-    time_t x;\n-    ::readText(x, istr, settings, time_zone, utc_time_zone);\n+    time_t x = 0;\n+    readTextHelper(x, istr, settings, time_zone, utc_time_zone);\n+    if (x < 0)\n+        x = 0;\n     assert_cast<ColumnType &>(column).getData().push_back(x);\n }\n \n@@ -100,16 +107,19 @@ void DataTypeDateTime::serializeTextQuoted(const IColumn & column, size_t row_nu\n \n void DataTypeDateTime::deserializeTextQuoted(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const\n {\n-    time_t x;\n+    time_t x = 0;\n+\n     if (checkChar('\\'', istr)) /// Cases: '2017-08-31 18:36:48' or '1504193808'\n     {\n-        ::readText(x, istr, settings, time_zone, utc_time_zone);\n+        readTextHelper(x, istr, settings, time_zone, utc_time_zone);\n         assertChar('\\'', istr);\n     }\n     else /// Just 1504193808 or 01504193808\n     {\n         readIntText(x, istr);\n     }\n+    if (x < 0)\n+        x = 0;\n     assert_cast<ColumnType &>(column).getData().push_back(x);    /// It's important to do this at the end - for exception safety.\n }\n \n@@ -122,16 +132,21 @@ void DataTypeDateTime::serializeTextJSON(const IColumn & column, size_t row_num,\n \n void DataTypeDateTime::deserializeTextJSON(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const\n {\n-    time_t x;\n+    time_t x = 0;\n+\n     if (checkChar('\"', istr))\n     {\n-        ::readText(x, istr, settings, time_zone, utc_time_zone);\n+        readTextHelper(x, istr, settings, time_zone, utc_time_zone);\n         assertChar('\"', istr);\n     }\n     else\n     {\n         readIntText(x, istr);\n     }\n+\n+    if (x < 0)\n+        x = 0;\n+\n     assert_cast<ColumnType &>(column).getData().push_back(x);\n }\n \n@@ -144,7 +159,7 @@ void DataTypeDateTime::serializeTextCSV(const IColumn & column, size_t row_num,\n \n void DataTypeDateTime::deserializeTextCSV(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const\n {\n-    time_t x;\n+    time_t x = 0;\n \n     if (istr.eof())\n         throwReadAfterEOF();\n@@ -154,11 +169,14 @@ void DataTypeDateTime::deserializeTextCSV(IColumn & column, ReadBuffer & istr, c\n     if (maybe_quote == '\\'' || maybe_quote == '\\\"')\n         ++istr.position();\n \n-    ::readText(x, istr, settings, time_zone, utc_time_zone);\n+    readTextHelper(x, istr, settings, time_zone, utc_time_zone);\n \n     if (maybe_quote == '\\'' || maybe_quote == '\\\"')\n         assertChar(maybe_quote, istr);\n \n+    if (x < 0)\n+        x = 0;\n+\n     assert_cast<ColumnType &>(column).getData().push_back(x);\n }\n \ndiff --git a/src/DataTypes/DataTypeDateTime64.h b/src/DataTypes/DataTypeDateTime64.h\nindex 198c3739f588..ec3f2fde8898 100644\n--- a/src/DataTypes/DataTypeDateTime64.h\n+++ b/src/DataTypes/DataTypeDateTime64.h\n@@ -48,66 +48,5 @@ class DataTypeDateTime64 final : public DataTypeDecimalBase<DateTime64>, public\n     bool canBePromoted() const override { return false; }\n };\n \n-/** Tansform-type wrapper for DateTime64, applies given Transform to DateTime64 value or only to a whole part of it.\n- *\n- * Depending on what overloads of Transform::execute() are available, when called with DateTime64 value,\n- * invokes Transform::execute() with:\n- * * whole part of DateTime64 value, discarding fractional part.\n- * * DateTime64 value and scale factor.\n- *\n- * Suitable Transfotm-types are commonly used in Date/DateTime manipulation functions,\n- * and should implement static (or const) function with following signatures:\n- *      R execute(UInt32 whole_value, ... , const TimeZoneImpl &)\n- * OR\n- *      R execute(DateTime64 value, Int64 scale_factor, ... , const TimeZoneImpl &)\n- *\n- * Where R and T could be arbitrary types.\n-*/\n-template <typename Transform>\n-class TransformDateTime64 : public Transform\n-{\n-private:\n-    // Detect if Transform::execute is const or static method\n-    // with signature defined by template args (ignoring result type).\n-    template<typename = void, typename... Args>\n-    struct TransformHasExecuteOverload : std::false_type {};\n-\n-    template<typename... Args>\n-    struct TransformHasExecuteOverload<std::void_t<decltype(std::declval<Transform>().execute(std::declval<Args>()...))>, Args...>\n-        : std::true_type {};\n-\n-    template<typename... Args>\n-    static constexpr bool TransformHasExecuteOverload_v = TransformHasExecuteOverload<void, Args...>::value;\n-\n-public:\n-    static constexpr auto name = Transform::name;\n-\n-    using Transform::execute;\n-\n-    // non-explicit constructor to allow creating from scale value (or with no scale at all), indispensable in some contexts.\n-    TransformDateTime64(UInt32 scale_ = 0)\n-        : scale_multiplier(DecimalUtils::scaleMultiplier<DateTime64::NativeType>(scale_))\n-    {}\n-\n-    template <typename ... Args>\n-    inline auto execute(const DateTime64 & t, Args && ... args) const\n-    {\n-        const auto transform = static_cast<const Transform *>(this);\n-\n-        if constexpr (TransformHasExecuteOverload_v<DateTime64, decltype(scale_multiplier), Args...>)\n-        {\n-            return transform->execute(t, scale_multiplier, std::forward<Args>(args)...);\n-        }\n-        else\n-        {\n-            const auto components = DecimalUtils::splitWithScaleMultiplier(t, scale_multiplier);\n-            return transform->execute(static_cast<UInt32>(components.whole), std::forward<Args>(args)...);\n-        }\n-    }\n-\n-private:\n-    DateTime64::NativeType scale_multiplier = 1;\n-};\n-\n }\n \ndiff --git a/src/Dictionaries/ClickHouseDictionarySource.cpp b/src/Dictionaries/ClickHouseDictionarySource.cpp\nindex f4c17884afa4..5e69df2c8a02 100644\n--- a/src/Dictionaries/ClickHouseDictionarySource.cpp\n+++ b/src/Dictionaries/ClickHouseDictionarySource.cpp\n@@ -118,10 +118,9 @@ std::string ClickHouseDictionarySource::getUpdateFieldAndDate()\n {\n     if (update_time != std::chrono::system_clock::from_time_t(0))\n     {\n-        auto tmp_time = update_time;\n+        time_t hr_time = std::chrono::system_clock::to_time_t(update_time) - 1;\n+        std::string str_time = DateLUT::instance().timeToString(hr_time);\n         update_time = std::chrono::system_clock::now();\n-        time_t hr_time = std::chrono::system_clock::to_time_t(tmp_time) - 1;\n-        std::string str_time = std::to_string(LocalDateTime(hr_time));\n         return query_builder.composeUpdateQuery(update_field, str_time);\n     }\n     else\ndiff --git a/src/Dictionaries/MySQLDictionarySource.cpp b/src/Dictionaries/MySQLDictionarySource.cpp\nindex 572080aee1ef..a1d0cbe7ffcf 100644\n--- a/src/Dictionaries/MySQLDictionarySource.cpp\n+++ b/src/Dictionaries/MySQLDictionarySource.cpp\n@@ -107,10 +107,9 @@ std::string MySQLDictionarySource::getUpdateFieldAndDate()\n {\n     if (update_time != std::chrono::system_clock::from_time_t(0))\n     {\n-        auto tmp_time = update_time;\n+        time_t hr_time = std::chrono::system_clock::to_time_t(update_time) - 1;\n+        std::string str_time = DateLUT::instance().timeToString(hr_time);\n         update_time = std::chrono::system_clock::now();\n-        time_t hr_time = std::chrono::system_clock::to_time_t(tmp_time) - 1;\n-        std::string str_time = std::to_string(LocalDateTime(hr_time));\n         return query_builder.composeUpdateQuery(update_field, str_time);\n     }\n     else\n@@ -262,7 +261,7 @@ LocalDateTime MySQLDictionarySource::getLastModification(mysqlxx::Pool::Entry &\n             if (!update_time_value.isNull())\n             {\n                 modification_time = update_time_value.getDateTime();\n-                LOG_TRACE(log, \"Got modification time: {}\", modification_time);\n+                LOG_TRACE(log, \"Got modification time: {}\", update_time_value.getString());\n             }\n \n             /// fetch remaining rows to avoid \"commands out of sync\" error\ndiff --git a/src/Dictionaries/PostgreSQLDictionarySource.cpp b/src/Dictionaries/PostgreSQLDictionarySource.cpp\nindex aa852404750d..93a573833804 100644\n--- a/src/Dictionaries/PostgreSQLDictionarySource.cpp\n+++ b/src/Dictionaries/PostgreSQLDictionarySource.cpp\n@@ -127,10 +127,9 @@ std::string PostgreSQLDictionarySource::getUpdateFieldAndDate()\n {\n     if (update_time != std::chrono::system_clock::from_time_t(0))\n     {\n-        auto tmp_time = update_time;\n+        time_t hr_time = std::chrono::system_clock::to_time_t(update_time) - 1;\n+        std::string str_time = DateLUT::instance().timeToString(hr_time);\n         update_time = std::chrono::system_clock::now();\n-        time_t hr_time = std::chrono::system_clock::to_time_t(tmp_time) - 1;\n-        std::string str_time = std::to_string(LocalDateTime(hr_time));\n         return query_builder.composeUpdateQuery(update_field, str_time);\n     }\n     else\ndiff --git a/src/Dictionaries/RangeHashedDictionary.cpp b/src/Dictionaries/RangeHashedDictionary.cpp\nindex 52b6f219baca..81c5191ffabb 100644\n--- a/src/Dictionaries/RangeHashedDictionary.cpp\n+++ b/src/Dictionaries/RangeHashedDictionary.cpp\n@@ -556,8 +556,9 @@ void RangeHashedDictionary::getIdsAndDates(\n             start_dates.push_back(value.range.left);\n             end_dates.push_back(value.range.right);\n \n-            if (is_date && static_cast<UInt64>(end_dates.back()) > DATE_LUT_MAX_DAY_NUM)\n-                end_dates.back() = 0;\n+            if constexpr (std::numeric_limits<RangeType>::max() > DATE_LUT_MAX_DAY_NUM) /// Avoid warning about tautological comparison in next line.\n+                if (is_date && static_cast<UInt64>(end_dates.back()) > DATE_LUT_MAX_DAY_NUM)\n+                    end_dates.back() = 0;\n         }\n     }\n }\ndiff --git a/src/Dictionaries/RedisBlockInputStream.cpp b/src/Dictionaries/RedisBlockInputStream.cpp\nindex a5514d141558..39cc2d610df7 100644\n--- a/src/Dictionaries/RedisBlockInputStream.cpp\n+++ b/src/Dictionaries/RedisBlockInputStream.cpp\n@@ -99,8 +99,15 @@ namespace DB\n                     assert_cast<ColumnUInt16 &>(column).insertValue(parse<LocalDate>(string_value).getDayNum());\n                     break;\n                 case ValueType::vtDateTime:\n-                    assert_cast<ColumnUInt32 &>(column).insertValue(static_cast<UInt32>(parse<LocalDateTime>(string_value)));\n+                {\n+                    ReadBufferFromString in(string_value);\n+                    time_t time = 0;\n+                    readDateTimeText(time, in);\n+                    if (time < 0)\n+                        time = 0;\n+                    assert_cast<ColumnUInt32 &>(column).insertValue(time);\n                     break;\n+                }\n                 case ValueType::vtUUID:\n                     assert_cast<ColumnUInt128 &>(column).insertValue(parse<UUID>(string_value));\n                     break;\ndiff --git a/src/Dictionaries/XDBCDictionarySource.cpp b/src/Dictionaries/XDBCDictionarySource.cpp\nindex 3615f72605f3..37d54f3549c7 100644\n--- a/src/Dictionaries/XDBCDictionarySource.cpp\n+++ b/src/Dictionaries/XDBCDictionarySource.cpp\n@@ -156,10 +156,9 @@ std::string XDBCDictionarySource::getUpdateFieldAndDate()\n {\n     if (update_time != std::chrono::system_clock::from_time_t(0))\n     {\n-        auto tmp_time = update_time;\n+        time_t hr_time = std::chrono::system_clock::to_time_t(update_time) - 1;\n+        std::string str_time = DateLUT::instance().timeToString(hr_time);\n         update_time = std::chrono::system_clock::now();\n-        time_t hr_time = std::chrono::system_clock::to_time_t(tmp_time) - 1;\n-        std::string str_time = std::to_string(LocalDateTime(hr_time));\n         return query_builder.composeUpdateQuery(update_field, str_time);\n     }\n     else\ndiff --git a/src/Formats/MySQLBlockInputStream.cpp b/src/Formats/MySQLBlockInputStream.cpp\nindex 87df0c1f4b1d..29cf749de3bd 100644\n--- a/src/Formats/MySQLBlockInputStream.cpp\n+++ b/src/Formats/MySQLBlockInputStream.cpp\n@@ -11,6 +11,7 @@\n #    include <Columns/ColumnFixedString.h>\n #    include <DataTypes/IDataType.h>\n #    include <DataTypes/DataTypeNullable.h>\n+#    include <IO/ReadBufferFromString.h>\n #    include <IO/ReadHelpers.h>\n #    include <IO/WriteHelpers.h>\n #    include <IO/Operators.h>\n@@ -97,8 +98,15 @@ namespace\n                 assert_cast<ColumnUInt16 &>(column).insertValue(UInt16(value.getDate().getDayNum()));\n                 break;\n             case ValueType::vtDateTime:\n-                assert_cast<ColumnUInt32 &>(column).insertValue(UInt32(value.getDateTime()));\n+            {\n+                ReadBufferFromString in(value);\n+                time_t time = 0;\n+                readDateTimeText(time, in);\n+                if (time < 0)\n+                    time = 0;\n+                assert_cast<ColumnUInt32 &>(column).insertValue(time);\n                 break;\n+            }\n             case ValueType::vtUUID:\n                 assert_cast<ColumnUInt128 &>(column).insert(parse<UUID>(value.data(), value.size()));\n                 break;\ndiff --git a/src/Formats/ProtobufSerializer.cpp b/src/Formats/ProtobufSerializer.cpp\nindex 2ab8e11a8543..f99888975bc5 100644\n--- a/src/Formats/ProtobufSerializer.cpp\n+++ b/src/Formats/ProtobufSerializer.cpp\n@@ -1486,6 +1486,8 @@ namespace\n             ReadBufferFromString buf{str};\n             time_t tm = 0;\n             readDateTimeText(tm, buf);\n+            if (tm < 0)\n+                tm = 0;\n             return tm;\n         }\n \ndiff --git a/src/Functions/CustomWeekTransforms.h b/src/Functions/CustomWeekTransforms.h\nindex afcbadc835c5..28da546eb93a 100644\n--- a/src/Functions/CustomWeekTransforms.h\n+++ b/src/Functions/CustomWeekTransforms.h\n@@ -33,14 +33,21 @@ static inline UInt32 dateIsNotSupported(const char * name)\n /// This factor transformation will say that the function is monotone everywhere.\n struct ZeroTransform\n {\n-    static inline UInt16 execute(UInt32, UInt8, const DateLUTImpl &) { return 0; }\n     static inline UInt16 execute(UInt16, UInt8, const DateLUTImpl &) { return 0; }\n+    static inline UInt16 execute(UInt32, UInt8, const DateLUTImpl &) { return 0; }\n+    static inline UInt16 execute(Int64, UInt8, const DateLUTImpl &) { return 0; }\n };\n \n struct ToWeekImpl\n {\n     static constexpr auto name = \"toWeek\";\n \n+    static inline UInt8 execute(Int64 t, UInt8 week_mode, const DateLUTImpl & time_zone)\n+    {\n+        // TODO: ditch conversion to DayNum, since it doesn't support extended range.\n+        YearWeek yw = time_zone.toYearWeek(time_zone.toDayNum(t), week_mode);\n+        return yw.second;\n+    }\n     static inline UInt8 execute(UInt32 t, UInt8 week_mode, const DateLUTImpl & time_zone)\n     {\n         YearWeek yw = time_zone.toYearWeek(time_zone.toDayNum(t), week_mode);\n@@ -59,6 +66,13 @@ struct ToYearWeekImpl\n {\n     static constexpr auto name = \"toYearWeek\";\n \n+    static inline UInt32 execute(Int64 t, UInt8 week_mode, const DateLUTImpl & time_zone)\n+    {\n+        // TODO: ditch toDayNum()\n+        YearWeek yw = time_zone.toYearWeek(time_zone.toDayNum(t), week_mode | static_cast<UInt32>(WeekModeFlag::YEAR));\n+        return yw.first * 100 + yw.second;\n+    }\n+\n     static inline UInt32 execute(UInt32 t, UInt8 week_mode, const DateLUTImpl & time_zone)\n     {\n         YearWeek yw = time_zone.toYearWeek(time_zone.toDayNum(t), week_mode | static_cast<UInt32>(WeekModeFlag::YEAR));\n@@ -77,13 +91,19 @@ struct ToStartOfWeekImpl\n {\n     static constexpr auto name = \"toStartOfWeek\";\n \n+    static inline UInt16 execute(Int64 t, UInt8 week_mode, const DateLUTImpl & time_zone)\n+    {\n+        return time_zone.toFirstDayNumOfWeek(time_zone.toDayNum(t), week_mode);\n+//        return time_zone.toFirstDayNumOfWeek(t, week_mode);\n+    }\n     static inline UInt16 execute(UInt32 t, UInt8 week_mode, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toFirstDayNumOfWeek(time_zone.toDayNum(t), week_mode);\n+//        return time_zone.toFirstDayNumOfWeek(t, week_mode);\n     }\n     static inline UInt16 execute(UInt16 d, UInt8 week_mode, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toFirstDayNumOfWeek(DayNum(d), week_mode);\n+        return time_zone.toFirstDayNumOfWeek(ExtendedDayNum(d), week_mode);\n     }\n \n     using FactorTransform = ZeroTransform;\ndiff --git a/src/Functions/DateTimeTransforms.h b/src/Functions/DateTimeTransforms.h\nindex 333b397312d7..c299b9c4169c 100644\n--- a/src/Functions/DateTimeTransforms.h\n+++ b/src/Functions/DateTimeTransforms.h\n@@ -3,6 +3,7 @@\n #include <Core/DecimalFunctions.h>\n #include <Common/Exception.h>\n #include <common/DateLUTImpl.h>\n+//#include <common/TimeZone.h>\n #include <Columns/ColumnVector.h>\n #include <Columns/ColumnDecimal.h>\n #include <Functions/FunctionHelpers.h>\n@@ -33,14 +34,15 @@ namespace ErrorCodes\n   *  factor-transformation F is \"round to the nearest month\" (2015-02-03 -> 2015-02-01).\n   */\n \n-static inline UInt32 dateIsNotSupported(const char * name)\n-{\n-    throw Exception(\"Illegal type Date of argument for function \" + std::string(name), ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n-}\n+    static inline UInt32 dateIsNotSupported(const char * name)\n+    {\n+        throw Exception(\"Illegal type Date of argument for function \" + std::string(name), ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n+    }\n \n /// This factor transformation will say that the function is monotone everywhere.\n struct ZeroTransform\n {\n+    static inline UInt16 execute(Int64, const DateLUTImpl &) { return 0; }\n     static inline UInt16 execute(UInt32, const DateLUTImpl &) { return 0; }\n     static inline UInt16 execute(UInt16, const DateLUTImpl &) { return 0; }\n };\n@@ -49,6 +51,10 @@ struct ToDateImpl\n {\n     static constexpr auto name = \"toDate\";\n \n+    static inline UInt16 execute(Int64 t, const DateLUTImpl & time_zone)\n+    {\n+        return UInt16(time_zone.toDayNum(t));\n+    }\n     static inline UInt16 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n         return UInt16(time_zone.toDayNum(t));\n@@ -65,13 +71,18 @@ struct ToStartOfDayImpl\n {\n     static constexpr auto name = \"toStartOfDay\";\n \n+    //TODO: right now it is hardcoded to produce DateTime only, needs fixing later. See date_and_time_type_details::ResultDataTypeMap for deduction of result type example.\n+    static inline UInt32 execute(const DecimalUtils::DecimalComponents<DateTime64> & t, const DateLUTImpl & time_zone)\n+    {\n+        return time_zone.toDate(static_cast<time_t>(t.whole));\n+    }\n     static inline UInt32 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toDate(t);\n     }\n     static inline UInt32 execute(UInt16 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toDate(DayNum(d));\n+        return time_zone.toDate(ExtendedDayNum(d));\n     }\n \n     using FactorTransform = ZeroTransform;\n@@ -81,13 +92,19 @@ struct ToMondayImpl\n {\n     static constexpr auto name = \"toMonday\";\n \n+    static inline UInt16 execute(Int64 t, const DateLUTImpl & time_zone)\n+    {\n+        //return time_zone.toFirstDayNumOfWeek(time_zone.toDayNum(t));\n+        return time_zone.toFirstDayNumOfWeek(t);\n+    }\n     static inline UInt16 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toFirstDayNumOfWeek(time_zone.toDayNum(t));\n+        //return time_zone.toFirstDayNumOfWeek(time_zone.toDayNum(t));\n+        return time_zone.toFirstDayNumOfWeek(t);\n     }\n     static inline UInt16 execute(UInt16 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toFirstDayNumOfWeek(DayNum(d));\n+        return time_zone.toFirstDayNumOfWeek(ExtendedDayNum(d));\n     }\n \n     using FactorTransform = ZeroTransform;\n@@ -97,13 +114,17 @@ struct ToStartOfMonthImpl\n {\n     static constexpr auto name = \"toStartOfMonth\";\n \n+    static inline UInt16 execute(Int64 t, const DateLUTImpl & time_zone)\n+    {\n+        return time_zone.toFirstDayNumOfMonth(time_zone.toDayNum(t));\n+    }\n     static inline UInt16 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toFirstDayNumOfMonth(time_zone.toDayNum(t));\n     }\n     static inline UInt16 execute(UInt16 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toFirstDayNumOfMonth(DayNum(d));\n+        return time_zone.toFirstDayNumOfMonth(ExtendedDayNum(d));\n     }\n \n     using FactorTransform = ZeroTransform;\n@@ -113,13 +134,17 @@ struct ToStartOfQuarterImpl\n {\n     static constexpr auto name = \"toStartOfQuarter\";\n \n+    static inline UInt16 execute(Int64 t, const DateLUTImpl & time_zone)\n+    {\n+        return time_zone.toFirstDayNumOfQuarter(time_zone.toDayNum(t));\n+    }\n     static inline UInt16 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toFirstDayNumOfQuarter(time_zone.toDayNum(t));\n     }\n     static inline UInt16 execute(UInt16 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toFirstDayNumOfQuarter(DayNum(d));\n+        return time_zone.toFirstDayNumOfQuarter(ExtendedDayNum(d));\n     }\n \n     using FactorTransform = ZeroTransform;\n@@ -129,13 +154,17 @@ struct ToStartOfYearImpl\n {\n     static constexpr auto name = \"toStartOfYear\";\n \n+    static inline UInt16 execute(Int64 t, const DateLUTImpl & time_zone)\n+    {\n+        return time_zone.toFirstDayNumOfYear(time_zone.toDayNum(t));\n+    }\n     static inline UInt16 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toFirstDayNumOfYear(time_zone.toDayNum(t));\n     }\n     static inline UInt16 execute(UInt16 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toFirstDayNumOfYear(DayNum(d));\n+        return time_zone.toFirstDayNumOfYear(ExtendedDayNum(d));\n     }\n \n     using FactorTransform = ZeroTransform;\n@@ -144,9 +173,13 @@ struct ToStartOfYearImpl\n \n struct ToTimeImpl\n {\n+    /// When transforming to time, the date will be equated to 1970-01-01.\n     static constexpr auto name = \"toTime\";\n \n-    /// When transforming to time, the date will be equated to 1970-01-02.\n+    static UInt32 execute(const DecimalUtils::DecimalComponents<DateTime64> & t, const DateLUTImpl & time_zone)\n+    {\n+        return time_zone.toTime(t.whole) + 86400;\n+    }\n     static inline UInt32 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toTime(t) + 86400;\n@@ -164,6 +197,10 @@ struct ToStartOfMinuteImpl\n {\n     static constexpr auto name = \"toStartOfMinute\";\n \n+    static inline UInt32 execute(const DecimalUtils::DecimalComponents<DateTime64> & t, const DateLUTImpl & time_zone)\n+    {\n+        return time_zone.toStartOfMinute(t.whole);\n+    }\n     static inline UInt32 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toStartOfMinute(t);\n@@ -215,6 +252,10 @@ struct ToStartOfFiveMinuteImpl\n {\n     static constexpr auto name = \"toStartOfFiveMinute\";\n \n+    static inline UInt32 execute(const DecimalUtils::DecimalComponents<DateTime64> & t, const DateLUTImpl & time_zone)\n+    {\n+        return time_zone.toStartOfFiveMinute(t.whole);\n+    }\n     static inline UInt32 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toStartOfFiveMinute(t);\n@@ -231,6 +272,10 @@ struct ToStartOfTenMinutesImpl\n {\n     static constexpr auto name = \"toStartOfTenMinutes\";\n \n+    static inline UInt32 execute(const DecimalUtils::DecimalComponents<DateTime64> & t, const DateLUTImpl & time_zone)\n+    {\n+        return time_zone.toStartOfTenMinutes(t.whole);\n+    }\n     static inline UInt32 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toStartOfTenMinutes(t);\n@@ -247,6 +292,10 @@ struct ToStartOfFifteenMinutesImpl\n {\n     static constexpr auto name = \"toStartOfFifteenMinutes\";\n \n+    static inline UInt32 execute(const DecimalUtils::DecimalComponents<DateTime64> & t, const DateLUTImpl & time_zone)\n+    {\n+        return time_zone.toStartOfFifteenMinutes(t.whole);\n+    }\n     static inline UInt32 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toStartOfFifteenMinutes(t);\n@@ -264,6 +313,12 @@ struct TimeSlotImpl\n {\n     static constexpr auto name = \"timeSlot\";\n \n+    //static inline DecimalUtils::DecimalComponents<DateTime64> execute(const DecimalUtils::DecimalComponents<DateTime64> & t, const DateLUTImpl &)\n+    static inline UInt32 execute(const DecimalUtils::DecimalComponents<DateTime64> & t, const DateLUTImpl &)\n+    {\n+        return t.whole / 1800 * 1800;\n+    }\n+\n     static inline UInt32 execute(UInt32 t, const DateLUTImpl &)\n     {\n         return t / 1800 * 1800;\n@@ -281,6 +336,11 @@ struct ToStartOfHourImpl\n {\n     static constexpr auto name = \"toStartOfHour\";\n \n+    static inline UInt32 execute(const DecimalUtils::DecimalComponents<DateTime64> & t, const DateLUTImpl & time_zone)\n+    {\n+        return time_zone.toStartOfHour(t.whole);\n+    }\n+\n     static inline UInt32 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toStartOfHour(t);\n@@ -298,13 +358,17 @@ struct ToYearImpl\n {\n     static constexpr auto name = \"toYear\";\n \n+    static inline UInt16 execute(Int64 t, const DateLUTImpl & time_zone)\n+    {\n+        return time_zone.toYear(t);\n+    }\n     static inline UInt16 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toYear(t);\n     }\n     static inline UInt16 execute(UInt16 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toYear(DayNum(d));\n+        return time_zone.toYear(ExtendedDayNum(d));\n     }\n \n     using FactorTransform = ZeroTransform;\n@@ -314,13 +378,17 @@ struct ToQuarterImpl\n {\n     static constexpr auto name = \"toQuarter\";\n \n+    static inline UInt8 execute(Int64 t, const DateLUTImpl & time_zone)\n+    {\n+        return time_zone.toQuarter(t);\n+    }\n     static inline UInt8 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toQuarter(t);\n     }\n     static inline UInt8 execute(UInt16 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toQuarter(DayNum(d));\n+        return time_zone.toQuarter(ExtendedDayNum(d));\n     }\n \n     using FactorTransform = ToStartOfYearImpl;\n@@ -330,13 +398,17 @@ struct ToMonthImpl\n {\n     static constexpr auto name = \"toMonth\";\n \n+    static inline UInt8 execute(Int64 t, const DateLUTImpl & time_zone)\n+    {\n+        return time_zone.toMonth(t);\n+    }\n     static inline UInt8 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toMonth(t);\n     }\n     static inline UInt8 execute(UInt16 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toMonth(DayNum(d));\n+        return time_zone.toMonth(ExtendedDayNum(d));\n     }\n \n     using FactorTransform = ToStartOfYearImpl;\n@@ -346,13 +418,17 @@ struct ToDayOfMonthImpl\n {\n     static constexpr auto name = \"toDayOfMonth\";\n \n+    static inline UInt8 execute(Int64 t, const DateLUTImpl & time_zone)\n+    {\n+        return time_zone.toDayOfMonth(t);\n+    }\n     static inline UInt8 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toDayOfMonth(t);\n     }\n     static inline UInt8 execute(UInt16 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toDayOfMonth(DayNum(d));\n+        return time_zone.toDayOfMonth(ExtendedDayNum(d));\n     }\n \n     using FactorTransform = ToStartOfMonthImpl;\n@@ -362,13 +438,17 @@ struct ToDayOfWeekImpl\n {\n     static constexpr auto name = \"toDayOfWeek\";\n \n+    static inline UInt8 execute(Int64 t, const DateLUTImpl & time_zone)\n+    {\n+        return time_zone.toDayOfWeek(t);\n+    }\n     static inline UInt8 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toDayOfWeek(t);\n     }\n     static inline UInt8 execute(UInt16 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toDayOfWeek(DayNum(d));\n+        return time_zone.toDayOfWeek(ExtendedDayNum(d));\n     }\n \n     using FactorTransform = ToMondayImpl;\n@@ -378,13 +458,17 @@ struct ToDayOfYearImpl\n {\n     static constexpr auto name = \"toDayOfYear\";\n \n+    static inline UInt16 execute(Int64 t, const DateLUTImpl & time_zone)\n+    {\n+        return time_zone.toDayOfYear(t);\n+    }\n     static inline UInt16 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toDayOfYear(t);\n     }\n     static inline UInt16 execute(UInt16 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toDayOfYear(DayNum(d));\n+        return time_zone.toDayOfYear(ExtendedDayNum(d));\n     }\n \n     using FactorTransform = ToStartOfYearImpl;\n@@ -394,6 +478,10 @@ struct ToHourImpl\n {\n     static constexpr auto name = \"toHour\";\n \n+    static inline UInt8 execute(Int64 t, const DateLUTImpl & time_zone)\n+    {\n+        return time_zone.toHour(t);\n+    }\n     static inline UInt8 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toHour(t);\n@@ -411,6 +499,11 @@ struct TimezoneOffsetImpl\n {\n     static constexpr auto name = \"timezoneOffset\";\n \n+    static inline time_t execute(Int64 t, const DateLUTImpl & time_zone)\n+    {\n+        return time_zone.timezoneOffset(t);\n+    }\n+\n     static inline time_t execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.timezoneOffset(t);\n@@ -428,6 +521,10 @@ struct ToMinuteImpl\n {\n     static constexpr auto name = \"toMinute\";\n \n+    static inline UInt8 execute(Int64 t, const DateLUTImpl & time_zone)\n+    {\n+        return time_zone.toMinute(t);\n+    }\n     static inline UInt8 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toMinute(t);\n@@ -444,6 +541,10 @@ struct ToSecondImpl\n {\n     static constexpr auto name = \"toSecond\";\n \n+    static inline UInt8 execute(Int64 t, const DateLUTImpl & time_zone)\n+    {\n+        return time_zone.toSecond(t);\n+    }\n     static inline UInt8 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toSecond(t);\n@@ -460,13 +561,17 @@ struct ToISOYearImpl\n {\n     static constexpr auto name = \"toISOYear\";\n \n+    static inline UInt16 execute(Int64 t, const DateLUTImpl & time_zone)\n+    {\n+        return time_zone.toISOYear(time_zone.toDayNum(t));\n+    }\n     static inline UInt16 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toISOYear(time_zone.toDayNum(t));\n     }\n     static inline UInt16 execute(UInt16 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toISOYear(DayNum(d));\n+        return time_zone.toISOYear(ExtendedDayNum(d));\n     }\n \n     using FactorTransform = ZeroTransform;\n@@ -476,13 +581,17 @@ struct ToStartOfISOYearImpl\n {\n     static constexpr auto name = \"toStartOfISOYear\";\n \n+    static inline UInt16 execute(Int64 t, const DateLUTImpl & time_zone)\n+    {\n+        return time_zone.toFirstDayNumOfISOYear(time_zone.toDayNum(t));\n+    }\n     static inline UInt16 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toFirstDayNumOfISOYear(time_zone.toDayNum(t));\n     }\n     static inline UInt16 execute(UInt16 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toFirstDayNumOfISOYear(DayNum(d));\n+        return time_zone.toFirstDayNumOfISOYear(ExtendedDayNum(d));\n     }\n \n     using FactorTransform = ZeroTransform;\n@@ -492,13 +601,17 @@ struct ToISOWeekImpl\n {\n     static constexpr auto name = \"toISOWeek\";\n \n+    static inline UInt8 execute(Int64 t, const DateLUTImpl & time_zone)\n+    {\n+        return time_zone.toISOWeek(time_zone.toDayNum(t));\n+    }\n     static inline UInt8 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toISOWeek(time_zone.toDayNum(t));\n     }\n     static inline UInt8 execute(UInt16 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toISOWeek(DayNum(d));\n+        return time_zone.toISOWeek(ExtendedDayNum(d));\n     }\n \n     using FactorTransform = ToISOYearImpl;\n@@ -508,13 +621,17 @@ struct ToRelativeYearNumImpl\n {\n     static constexpr auto name = \"toRelativeYearNum\";\n \n-    static inline UInt16 execute(UInt32 t, const DateLUTImpl & time_zone)\n+    static inline UInt16 execute(Int64 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toYear(t);\n     }\n+    static inline UInt16 execute(UInt32 t, const DateLUTImpl & time_zone)\n+    {\n+        return time_zone.toYear(static_cast<time_t>(t));\n+    }\n     static inline UInt16 execute(UInt16 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toYear(DayNum(d));\n+        return time_zone.toYear(ExtendedDayNum(d));\n     }\n \n     using FactorTransform = ZeroTransform;\n@@ -524,13 +641,17 @@ struct ToRelativeQuarterNumImpl\n {\n     static constexpr auto name = \"toRelativeQuarterNum\";\n \n-    static inline UInt16 execute(UInt32 t, const DateLUTImpl & time_zone)\n+    static inline UInt16 execute(Int64 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toRelativeQuarterNum(t);\n     }\n+    static inline UInt16 execute(UInt32 t, const DateLUTImpl & time_zone)\n+    {\n+        return time_zone.toRelativeQuarterNum(static_cast<time_t>(t));\n+    }\n     static inline UInt16 execute(UInt16 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toRelativeQuarterNum(DayNum(d));\n+        return time_zone.toRelativeQuarterNum(ExtendedDayNum(d));\n     }\n \n     using FactorTransform = ZeroTransform;\n@@ -540,13 +661,17 @@ struct ToRelativeMonthNumImpl\n {\n     static constexpr auto name = \"toRelativeMonthNum\";\n \n-    static inline UInt16 execute(UInt32 t, const DateLUTImpl & time_zone)\n+    static inline UInt16 execute(Int64 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toRelativeMonthNum(t);\n     }\n+    static inline UInt16 execute(UInt32 t, const DateLUTImpl & time_zone)\n+    {\n+        return time_zone.toRelativeMonthNum(static_cast<time_t>(t));\n+    }\n     static inline UInt16 execute(UInt16 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toRelativeMonthNum(DayNum(d));\n+        return time_zone.toRelativeMonthNum(ExtendedDayNum(d));\n     }\n \n     using FactorTransform = ZeroTransform;\n@@ -556,13 +681,17 @@ struct ToRelativeWeekNumImpl\n {\n     static constexpr auto name = \"toRelativeWeekNum\";\n \n-    static inline UInt16 execute(UInt32 t, const DateLUTImpl & time_zone)\n+    static inline UInt16 execute(Int64 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toRelativeWeekNum(t);\n     }\n+    static inline UInt16 execute(UInt32 t, const DateLUTImpl & time_zone)\n+    {\n+        return time_zone.toRelativeWeekNum(static_cast<time_t>(t));\n+    }\n     static inline UInt16 execute(UInt16 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toRelativeWeekNum(DayNum(d));\n+        return time_zone.toRelativeWeekNum(ExtendedDayNum(d));\n     }\n \n     using FactorTransform = ZeroTransform;\n@@ -572,10 +701,14 @@ struct ToRelativeDayNumImpl\n {\n     static constexpr auto name = \"toRelativeDayNum\";\n \n-    static inline UInt16 execute(UInt32 t, const DateLUTImpl & time_zone)\n+    static inline UInt16 execute(Int64 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toDayNum(t);\n     }\n+    static inline UInt16 execute(UInt32 t, const DateLUTImpl & time_zone)\n+    {\n+        return time_zone.toDayNum(static_cast<time_t>(t));\n+    }\n     static inline UInt16 execute(UInt16 d, const DateLUTImpl &)\n     {\n         return static_cast<DayNum>(d);\n@@ -589,13 +722,17 @@ struct ToRelativeHourNumImpl\n {\n     static constexpr auto name = \"toRelativeHourNum\";\n \n-    static inline UInt32 execute(UInt32 t, const DateLUTImpl & time_zone)\n+    static inline UInt32 execute(Int64 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toRelativeHourNum(t);\n     }\n+    static inline UInt32 execute(UInt32 t, const DateLUTImpl & time_zone)\n+    {\n+        return time_zone.toRelativeHourNum(static_cast<time_t>(t));\n+    }\n     static inline UInt32 execute(UInt16 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toRelativeHourNum(DayNum(d));\n+        return time_zone.toRelativeHourNum(ExtendedDayNum(d));\n     }\n \n     using FactorTransform = ZeroTransform;\n@@ -605,13 +742,17 @@ struct ToRelativeMinuteNumImpl\n {\n     static constexpr auto name = \"toRelativeMinuteNum\";\n \n-    static inline UInt32 execute(UInt32 t, const DateLUTImpl & time_zone)\n+    static inline UInt32 execute(Int64 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toRelativeMinuteNum(t);\n     }\n+    static inline UInt32 execute(UInt32 t, const DateLUTImpl & time_zone)\n+    {\n+        return time_zone.toRelativeMinuteNum(static_cast<time_t>(t));\n+    }\n     static inline UInt32 execute(UInt16 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toRelativeMinuteNum(DayNum(d));\n+        return time_zone.toRelativeMinuteNum(ExtendedDayNum(d));\n     }\n \n     using FactorTransform = ZeroTransform;\n@@ -621,13 +762,17 @@ struct ToRelativeSecondNumImpl\n {\n     static constexpr auto name = \"toRelativeSecondNum\";\n \n+    static inline Int64 execute(Int64 t, const DateLUTImpl &)\n+    {\n+        return t;\n+    }\n     static inline UInt32 execute(UInt32 t, const DateLUTImpl &)\n     {\n         return t;\n     }\n     static inline UInt32 execute(UInt16 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.fromDayNum(DayNum(d));\n+        return time_zone.fromDayNum(ExtendedDayNum(d));\n     }\n \n     using FactorTransform = ZeroTransform;\n@@ -637,6 +782,10 @@ struct ToYYYYMMImpl\n {\n     static constexpr auto name = \"toYYYYMM\";\n \n+    static inline UInt32 execute(Int64 t, const DateLUTImpl & time_zone)\n+    {\n+        return time_zone.toNumYYYYMM(t);\n+    }\n     static inline UInt32 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toNumYYYYMM(t);\n@@ -653,6 +802,10 @@ struct ToYYYYMMDDImpl\n {\n     static constexpr auto name = \"toYYYYMMDD\";\n \n+    static inline UInt32 execute(Int64 t, const DateLUTImpl & time_zone)\n+    {\n+        return time_zone.toNumYYYYMMDD(t);\n+    }\n     static inline UInt32 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toNumYYYYMMDD(t);\n@@ -669,6 +822,10 @@ struct ToYYYYMMDDhhmmssImpl\n {\n     static constexpr auto name = \"toYYYYMMDDhhmmss\";\n \n+    static inline UInt64 execute(Int64 t, const DateLUTImpl & time_zone)\n+    {\n+        return time_zone.toNumYYYYMMDDhhmmss(t);\n+    }\n     static inline UInt64 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toNumYYYYMMDDhhmmss(t);\ndiff --git a/src/Functions/FunctionCustomWeekToSomething.h b/src/Functions/FunctionCustomWeekToSomething.h\nindex 8a343cffb950..5634ea115846 100644\n--- a/src/Functions/FunctionCustomWeekToSomething.h\n+++ b/src/Functions/FunctionCustomWeekToSomething.h\n@@ -4,6 +4,7 @@\n #include <DataTypes/DataTypeDateTime64.h>\n #include <Functions/CustomWeekTransforms.h>\n #include <Functions/IFunctionImpl.h>\n+#include <Functions/TransformDateTime64.h>\n #include <Functions/extractTimeZoneFromFunctionArguments.h>\n #include <IO/WriteHelpers.h>\n \ndiff --git a/src/Functions/FunctionDateOrDateTimeAddInterval.h b/src/Functions/FunctionDateOrDateTimeAddInterval.h\nindex 5f964b899b48..2b0082f43343 100644\n--- a/src/Functions/FunctionDateOrDateTimeAddInterval.h\n+++ b/src/Functions/FunctionDateOrDateTimeAddInterval.h\n@@ -11,6 +11,7 @@\n #include <Functions/FunctionHelpers.h>\n #include <Functions/castTypeToEither.h>\n #include <Functions/extractTimeZoneFromFunctionArguments.h>\n+#include <Functions/TransformDateTime64.h>\n \n #include <IO/WriteHelpers.h>\n \n@@ -25,31 +26,6 @@ namespace ErrorCodes\n     extern const int ILLEGAL_COLUMN;\n }\n \n-/// AddOnDateTime64DefaultImpl provides default implementation of add-X functionality for DateTime64.\n-///\n-/// Default implementation is not to change fractional part, but only modify whole part as if it was DateTime.\n-/// That means large whole values (for scale less than 9) might not fit into UInt32-range,\n-/// and hence default implementation will produce incorrect results.\n-template <typename T>\n-struct AddOnDateTime64DefaultImpl\n-{\n-    AddOnDateTime64DefaultImpl(UInt32 scale_ = 0)\n-        : scale_multiplier(DecimalUtils::scaleMultiplier<DateTime64::NativeType>(scale_))\n-    {}\n-\n-    // Default implementation for add/sub on DateTime64: do math on whole part (the same way as for DateTime), leave fractional as it is.\n-    inline DateTime64 execute(const DateTime64 & t, Int64 delta, const DateLUTImpl & time_zone) const\n-    {\n-        const auto components = DecimalUtils::splitWithScaleMultiplier(t, scale_multiplier);\n-\n-        const auto whole = static_cast<const T *>(this)->execute(static_cast<UInt32>(components.whole), delta, time_zone);\n-        return DecimalUtils::decimalFromComponentsWithMultiplier<DateTime64>(static_cast<DateTime64::NativeType>(whole), components.fractional, scale_multiplier);\n-    }\n-\n-    UInt32 scale_multiplier = 1;\n-};\n-\n-\n /// Type of first argument of 'execute' function overload defines what INPUT DataType it is used for.\n /// Return type defines what is the OUTPUT (return) type of the CH function.\n /// Corresponding types:\n@@ -60,14 +36,15 @@ struct AddOnDateTime64DefaultImpl\n ///  - 'AddSecondsImpl::execute(UInt32, ...) -> UInt32' is available to the ClickHouse users as 'addSeconds(DateTime, ...) -> DateTime'\n ///  - 'AddSecondsImpl::execute(UInt16, ...) -> UInt32' is available to the ClickHouse users as 'addSeconds(Date, ...) -> DateTime'\n \n-struct AddSecondsImpl : public AddOnDateTime64DefaultImpl<AddSecondsImpl>\n+struct AddSecondsImpl\n {\n-    using Base = AddOnDateTime64DefaultImpl<AddSecondsImpl>;\n-    using Base::Base;\n-    using Base::execute;\n-\n     static constexpr auto name = \"addSeconds\";\n \n+    static inline NO_SANITIZE_UNDEFINED DecimalUtils::DecimalComponents<DateTime64> execute(DecimalUtils::DecimalComponents<DateTime64> t, Int64 delta, const DateLUTImpl &)\n+    {\n+        return {t.whole + delta, t.fractional};\n+    }\n+\n     static inline NO_SANITIZE_UNDEFINED UInt32 execute(UInt32 t, Int64 delta, const DateLUTImpl &)\n     {\n         return t + delta;\n@@ -75,18 +52,19 @@ struct AddSecondsImpl : public AddOnDateTime64DefaultImpl<AddSecondsImpl>\n \n     static inline NO_SANITIZE_UNDEFINED UInt32 execute(UInt16 d, Int64 delta, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.fromDayNum(DayNum(d)) + delta;\n+        return time_zone.fromDayNum(ExtendedDayNum(d)) + delta;\n     }\n };\n \n-struct AddMinutesImpl : public AddOnDateTime64DefaultImpl<AddMinutesImpl>\n+struct AddMinutesImpl\n {\n-    using Base = AddOnDateTime64DefaultImpl<AddMinutesImpl>;\n-    using Base::Base;\n-    using Base::execute;\n-\n     static constexpr auto name = \"addMinutes\";\n \n+    static inline NO_SANITIZE_UNDEFINED DecimalUtils::DecimalComponents<DateTime64> execute(DecimalUtils::DecimalComponents<DateTime64> t, Int64 delta, const DateLUTImpl &)\n+    {\n+        return {t.whole + delta * 60, t.fractional};\n+    }\n+\n     static inline NO_SANITIZE_UNDEFINED UInt32 execute(UInt32 t, Int64 delta, const DateLUTImpl &)\n     {\n         return t + delta * 60;\n@@ -94,18 +72,18 @@ struct AddMinutesImpl : public AddOnDateTime64DefaultImpl<AddMinutesImpl>\n \n     static inline NO_SANITIZE_UNDEFINED UInt32 execute(UInt16 d, Int64 delta, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.fromDayNum(DayNum(d)) + delta * 60;\n+        return time_zone.fromDayNum(ExtendedDayNum(d)) + delta * 60;\n     }\n };\n \n-struct AddHoursImpl : public AddOnDateTime64DefaultImpl<AddHoursImpl>\n+struct AddHoursImpl\n {\n-    using Base = AddOnDateTime64DefaultImpl<AddHoursImpl>;\n-    using Base::Base;\n-    using Base::execute;\n-\n     static constexpr auto name = \"addHours\";\n \n+    static inline NO_SANITIZE_UNDEFINED DecimalUtils::DecimalComponents<DateTime64> execute(DecimalUtils::DecimalComponents<DateTime64> t, Int64 delta, const DateLUTImpl &)\n+    {\n+        return {t.whole + delta * 3600, t.fractional};\n+    }\n     static inline NO_SANITIZE_UNDEFINED UInt32 execute(UInt32 t, Int64 delta, const DateLUTImpl &)\n     {\n         return t + delta * 3600;\n@@ -113,19 +91,20 @@ struct AddHoursImpl : public AddOnDateTime64DefaultImpl<AddHoursImpl>\n \n     static inline NO_SANITIZE_UNDEFINED UInt32 execute(UInt16 d, Int64 delta, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.fromDayNum(DayNum(d)) + delta * 3600;\n+        return time_zone.fromDayNum(ExtendedDayNum(d)) + delta * 3600;\n     }\n };\n \n-struct AddDaysImpl : public AddOnDateTime64DefaultImpl<AddDaysImpl>\n+struct AddDaysImpl\n {\n-    using Base = AddOnDateTime64DefaultImpl<AddDaysImpl>;\n-    using Base::Base;\n-    using Base::execute;\n-\n     static constexpr auto name = \"addDays\";\n \n-    static inline UInt32 execute(UInt32 t, Int64 delta, const DateLUTImpl & time_zone)\n+    static inline NO_SANITIZE_UNDEFINED DecimalUtils::DecimalComponents<DateTime64> execute(DecimalUtils::DecimalComponents<DateTime64> t, Int64 delta, const DateLUTImpl & time_zone)\n+    {\n+        return {time_zone.addDays(t.whole, delta), t.fractional};\n+    }\n+\n+    static inline NO_SANITIZE_UNDEFINED UInt32 execute(UInt32 t, Int64 delta, const DateLUTImpl & time_zone)\n     {\n         return time_zone.addDays(t, delta);\n     }\n@@ -136,14 +115,15 @@ struct AddDaysImpl : public AddOnDateTime64DefaultImpl<AddDaysImpl>\n     }\n };\n \n-struct AddWeeksImpl : public AddOnDateTime64DefaultImpl<AddWeeksImpl>\n+struct AddWeeksImpl\n {\n-    using Base = AddOnDateTime64DefaultImpl<AddWeeksImpl>;\n-    using Base::Base;\n-    using Base::execute;\n-\n     static constexpr auto name = \"addWeeks\";\n \n+    static inline NO_SANITIZE_UNDEFINED DecimalUtils::DecimalComponents<DateTime64> execute(DecimalUtils::DecimalComponents<DateTime64> t, Int64 delta, const DateLUTImpl & time_zone)\n+    {\n+        return {time_zone.addWeeks(t.whole, delta), t.fractional};\n+    }\n+\n     static inline NO_SANITIZE_UNDEFINED UInt32 execute(UInt32 t, Int64 delta, const DateLUTImpl & time_zone)\n     {\n         return time_zone.addWeeks(t, delta);\n@@ -155,14 +135,15 @@ struct AddWeeksImpl : public AddOnDateTime64DefaultImpl<AddWeeksImpl>\n     }\n };\n \n-struct AddMonthsImpl : public AddOnDateTime64DefaultImpl<AddMonthsImpl>\n+struct AddMonthsImpl\n {\n-    using Base = AddOnDateTime64DefaultImpl<AddMonthsImpl>;\n-    using Base::Base;\n-    using Base::execute;\n-\n     static constexpr auto name = \"addMonths\";\n \n+    static inline DecimalUtils::DecimalComponents<DateTime64> execute(DecimalUtils::DecimalComponents<DateTime64> t, Int64 delta, const DateLUTImpl & time_zone)\n+    {\n+        return {time_zone.addMonths(t.whole, delta), t.fractional};\n+    }\n+\n     static inline UInt32 execute(UInt32 t, Int64 delta, const DateLUTImpl & time_zone)\n     {\n         return time_zone.addMonths(t, delta);\n@@ -170,18 +151,19 @@ struct AddMonthsImpl : public AddOnDateTime64DefaultImpl<AddMonthsImpl>\n \n     static inline UInt16 execute(UInt16 d, Int64 delta, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.addMonths(DayNum(d), delta);\n+        return time_zone.addMonths(ExtendedDayNum(d), delta);\n     }\n };\n \n-struct AddQuartersImpl : public AddOnDateTime64DefaultImpl<AddQuartersImpl>\n+struct AddQuartersImpl\n {\n-    using Base = AddOnDateTime64DefaultImpl<AddQuartersImpl>;\n-    using Base::Base;\n-    using Base::execute;\n-\n     static constexpr auto name = \"addQuarters\";\n \n+    static inline DecimalUtils::DecimalComponents<DateTime64> execute(DecimalUtils::DecimalComponents<DateTime64> t, Int64 delta, const DateLUTImpl & time_zone)\n+    {\n+        return {time_zone.addQuarters(t.whole, delta), t.fractional};\n+    }\n+\n     static inline UInt32 execute(UInt32 t, Int64 delta, const DateLUTImpl & time_zone)\n     {\n         return time_zone.addQuarters(t, delta);\n@@ -189,18 +171,19 @@ struct AddQuartersImpl : public AddOnDateTime64DefaultImpl<AddQuartersImpl>\n \n     static inline UInt16 execute(UInt16 d, Int64 delta, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.addQuarters(DayNum(d), delta);\n+        return time_zone.addQuarters(ExtendedDayNum(d), delta);\n     }\n };\n \n-struct AddYearsImpl : public AddOnDateTime64DefaultImpl<AddYearsImpl>\n+struct AddYearsImpl\n {\n-    using Base = AddOnDateTime64DefaultImpl<AddYearsImpl>;\n-    using Base::Base;\n-    using Base::execute;\n-\n     static constexpr auto name = \"addYears\";\n \n+    static inline DecimalUtils::DecimalComponents<DateTime64> execute(DecimalUtils::DecimalComponents<DateTime64> t, Int64 delta, const DateLUTImpl & time_zone)\n+    {\n+        return {time_zone.addYears(t.whole, delta), t.fractional};\n+    }\n+\n     static inline UInt32 execute(UInt32 t, Int64 delta, const DateLUTImpl & time_zone)\n     {\n         return time_zone.addYears(t, delta);\n@@ -208,7 +191,7 @@ struct AddYearsImpl : public AddOnDateTime64DefaultImpl<AddYearsImpl>\n \n     static inline UInt16 execute(UInt16 d, Int64 delta, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.addYears(DayNum(d), delta);\n+        return time_zone.addYears(ExtendedDayNum(d), delta);\n     }\n };\n \n@@ -351,6 +334,7 @@ template <> struct ResultDataTypeMap<Int16>      { using ResultDataType = DataTy\n template <> struct ResultDataTypeMap<UInt32>     { using ResultDataType = DataTypeDateTime; };\n template <> struct ResultDataTypeMap<Int32>      { using ResultDataType = DataTypeDateTime; };\n template <> struct ResultDataTypeMap<DateTime64> { using ResultDataType = DataTypeDateTime64; };\n+template <> struct ResultDataTypeMap<Int64>      { using ResultDataType = DataTypeDateTime64; };\n }\n \n template <typename Transform>\n@@ -417,10 +401,18 @@ class FunctionDateOrDateTimeAddInterval : public IFunction\n         }\n     }\n \n+    // TransformDateTime64 helps choosing correct overload of exec and does some transformations\n+    // on input and output parameters to simplify support of DateTime64 in concrete Transform.\n+    template <typename FieldType>\n+    using TransformType = std::conditional_t<\n+        std::is_same_v<FieldType, DateTime64>,\n+        TransformDateTime64<Transform>,\n+        Transform>;\n+\n     /// Helper templates to deduce return type based on argument type, since some overloads may promote or denote types,\n     /// e.g. addSeconds(Date, 1) => DateTime\n     template <typename FieldType>\n-    using TransformExecuteReturnType = decltype(std::declval<Transform>().execute(FieldType(), 0, std::declval<DateLUTImpl>()));\n+    using TransformExecuteReturnType = decltype(std::declval<TransformType<FieldType>>().execute(FieldType(), 0, std::declval<DateLUTImpl>()));\n \n     // Deduces RETURN DataType from INPUT DataType, based on return type of Transform{}.execute(INPUT_TYPE, UInt64, DateLUTImpl).\n     // e.g. for Transform-type that has execute()-overload with 'UInt16' input and 'UInt32' return,\n@@ -475,8 +467,9 @@ class FunctionDateOrDateTimeAddInterval : public IFunction\n         }\n         else if (const auto * datetime64_type = assert_cast<const DataTypeDateTime64 *>(from_type))\n         {\n-            return DateTimeAddIntervalImpl<DataTypeDateTime64, TransformResultDataType<DataTypeDateTime64>, Transform>::execute(\n-                Transform{datetime64_type->getScale()}, arguments, result_type);\n+            using WrappedTransformType = TransformType<typename DataTypeDateTime64::FieldType>;\n+            return DateTimeAddIntervalImpl<DataTypeDateTime64, TransformResultDataType<DataTypeDateTime64>, WrappedTransformType>::execute(\n+                    WrappedTransformType{datetime64_type->getScale()}, arguments, result_type);\n         }\n         else\n             throw Exception(\"Illegal type \" + arguments[0].type->getName() + \" of first argument of function \" + getName(),\ndiff --git a/src/Functions/FunctionDateOrDateTimeToSomething.h b/src/Functions/FunctionDateOrDateTimeToSomething.h\nindex e0676f3dc0f9..abe859e2f29c 100644\n--- a/src/Functions/FunctionDateOrDateTimeToSomething.h\n+++ b/src/Functions/FunctionDateOrDateTimeToSomething.h\n@@ -5,6 +5,7 @@\n #include <DataTypes/DataTypeDateTime64.h>\n #include <Functions/extractTimeZoneFromFunctionArguments.h>\n #include <Functions/DateTimeTransforms.h>\n+#include <Functions/TransformDateTime64.h>\n #include <IO/WriteHelpers.h>\n \n \n@@ -107,6 +108,7 @@ class FunctionDateOrDateTimeToSomething : public IFunction\n         else if (which.isDateTime64())\n         {\n             const auto scale = static_cast<const DataTypeDateTime64 *>(from_type)->getScale();\n+\n             const TransformDateTime64<Transform> transformer(scale);\n             return DateTimeTransformImpl<DataTypeDateTime64, ToDataType, decltype(transformer)>::execute(arguments, result_type, input_rows_count, transformer);\n         }\n@@ -133,7 +135,6 @@ class FunctionDateOrDateTimeToSomething : public IFunction\n \n         /// This method is called only if the function has one argument. Therefore, we do not care about the non-local time zone.\n         const DateLUTImpl & date_lut = DateLUT::instance();\n-\n         if (left.isNull() || right.isNull())\n             return is_not_monotonic;\n \ndiff --git a/src/Functions/FunctionsConversion.h b/src/Functions/FunctionsConversion.h\nindex 4889132eeb23..ef74f7778b19 100644\n--- a/src/Functions/FunctionsConversion.h\n+++ b/src/Functions/FunctionsConversion.h\n@@ -44,6 +44,7 @@\n #include <Functions/FunctionHelpers.h>\n #include <Functions/DateTimeTransforms.h>\n #include <Functions/toFixedString.h>\n+#include <Functions/TransformDateTime64.h>\n #include <DataTypes/DataTypeLowCardinality.h>\n #include <Columns/ColumnLowCardinality.h>\n #include <Interpreters/Context.h>\n@@ -310,10 +311,15 @@ struct ToDateTimeImpl\n         return time_zone.fromDayNum(DayNum(d));\n     }\n \n-    // no-op conversion from DateTime to DateTime, used in DateTime64 to DateTime conversion.\n-    static inline UInt32 execute(UInt32 d, const DateLUTImpl & /*time_zone*/)\n+    static inline UInt32 execute(UInt32 dt, const DateLUTImpl & /*time_zone*/)\n     {\n-        return d;\n+        return dt;\n+    }\n+\n+    // TODO: return UInt32 ???\n+    static inline Int64 execute(Int64 dt64, const DateLUTImpl & /*time_zone*/)\n+    {\n+        return dt64;\n     }\n };\n \n@@ -329,6 +335,7 @@ struct ToDateTransform32Or64\n \n     static inline NO_SANITIZE_UNDEFINED ToType execute(const FromType & from, const DateLUTImpl & time_zone)\n     {\n+        // since converting to Date, no need in values outside of default LUT range.\n         return (from < 0xFFFF)\n             ? from\n             : time_zone.toDayNum(std::min(time_t(from), time_t(0xFFFFFFFF)));\n@@ -342,6 +349,7 @@ struct ToDateTransform32Or64Signed\n \n     static inline NO_SANITIZE_UNDEFINED ToType execute(const FromType & from, const DateLUTImpl & time_zone)\n     {\n+        // TODO: decide narrow or extended range based on FromType\n         /// The function should be monotonic (better for query optimizations), so we saturate instead of overflow.\n         if (from < 0)\n             return 0;\n@@ -447,35 +455,8 @@ template <typename Name> struct ConvertImpl<DataTypeFloat32, DataTypeDateTime, N\n template <typename Name> struct ConvertImpl<DataTypeFloat64, DataTypeDateTime, Name>\n     : DateTimeTransformImpl<DataTypeFloat64, DataTypeDateTime, ToDateTimeTransform64Signed<Float64, UInt32>> {};\n \n-\n-/** Conversion of Date or DateTime to DateTime64: add zero sub-second part.\n-  */\n-struct ToDateTime64Transform\n-{\n-    static constexpr auto name = \"toDateTime64\";\n-\n-    const DateTime64::NativeType scale_multiplier = 1;\n-\n-    ToDateTime64Transform(UInt32 scale = 0)\n-        : scale_multiplier(DecimalUtils::scaleMultiplier<DateTime64::NativeType>(scale))\n-    {}\n-\n-    inline DateTime64::NativeType execute(UInt16 d, const DateLUTImpl & time_zone) const\n-    {\n-        const auto dt = ToDateTimeImpl::execute(d, time_zone);\n-        return execute(dt, time_zone);\n-    }\n-\n-    inline DateTime64::NativeType execute(UInt32 dt, const DateLUTImpl & /*time_zone*/) const\n-    {\n-        return DecimalUtils::decimalFromComponentsWithMultiplier<DateTime64>(dt, 0, scale_multiplier);\n-    }\n-};\n-\n-template <typename Name> struct ConvertImpl<DataTypeDate, DataTypeDateTime64, Name, ConvertDefaultBehaviorTag>\n-    : DateTimeTransformImpl<DataTypeDate, DataTypeDateTime64, ToDateTime64Transform> {};\n-template <typename Name> struct ConvertImpl<DataTypeDateTime, DataTypeDateTime64, Name, ConvertDefaultBehaviorTag>\n-    : DateTimeTransformImpl<DataTypeDateTime, DataTypeDateTime64, ToDateTime64Transform> {};\n+const time_t LUT_MIN_TIME = -1420070400l;       // 1925-01-01 UTC\n+const time_t LUT_MAX_TIME = 9877248000l;        // 2282-12-31 UTC\n \n /** Conversion of numeric to DateTime64\n   */\n@@ -493,7 +474,7 @@ struct ToDateTime64TransformUnsigned\n \n     inline NO_SANITIZE_UNDEFINED DateTime64::NativeType execute(FromType from, const DateLUTImpl &) const\n     {\n-        from = std::min(time_t(from), time_t(0xFFFFFFFF));\n+        from = std::min<time_t>(from, LUT_MAX_TIME);\n         return DecimalUtils::decimalFromComponentsWithMultiplier<DateTime64>(from, 0, scale_multiplier);\n     }\n };\n@@ -510,9 +491,8 @@ struct ToDateTime64TransformSigned\n \n     inline NO_SANITIZE_UNDEFINED DateTime64::NativeType execute(FromType from, const DateLUTImpl &) const\n     {\n-        if (from < 0)\n-            return 0;\n-        from = std::min(time_t(from), time_t(0xFFFFFFFF));\n+        from = std::max<time_t>(from, LUT_MIN_TIME);\n+        from = std::min<time_t>(from, LUT_MAX_TIME);\n         return DecimalUtils::decimalFromComponentsWithMultiplier<DateTime64>(from, 0, scale_multiplier);\n     }\n };\n@@ -551,6 +531,7 @@ template <typename Name> struct ConvertImpl<DataTypeFloat32, DataTypeDateTime64,\n template <typename Name> struct ConvertImpl<DataTypeFloat64, DataTypeDateTime64, Name>\n     : DateTimeTransformImpl<DataTypeFloat64, DataTypeDateTime64, ToDateTime64TransformFloat<DataTypeFloat64, Float64>> {};\n \n+\n /** Conversion of DateTime64 to Date or DateTime: discards fractional part.\n  */\n template <typename Transform>\n@@ -571,10 +552,41 @@ struct FromDateTime64Transform\n     }\n };\n \n+/** Conversion of DateTime64 to Date or DateTime: discards fractional part.\n+ */\n template <typename Name> struct ConvertImpl<DataTypeDateTime64, DataTypeDate, Name, ConvertDefaultBehaviorTag>\n-    : DateTimeTransformImpl<DataTypeDateTime64, DataTypeDate, FromDateTime64Transform<ToDateImpl>> {};\n+    : DateTimeTransformImpl<DataTypeDateTime64, DataTypeDate, TransformDateTime64<ToDateImpl>> {};\n template <typename Name> struct ConvertImpl<DataTypeDateTime64, DataTypeDateTime, Name, ConvertDefaultBehaviorTag>\n-    : DateTimeTransformImpl<DataTypeDateTime64, DataTypeDateTime, FromDateTime64Transform<ToDateTimeImpl>> {};\n+    : DateTimeTransformImpl<DataTypeDateTime64, DataTypeDateTime, TransformDateTime64<ToDateTimeImpl>> {};\n+\n+struct ToDateTime64Transform\n+{\n+    static constexpr auto name = \"toDateTime64\";\n+\n+    const DateTime64::NativeType scale_multiplier = 1;\n+\n+    ToDateTime64Transform(UInt32 scale = 0)\n+        : scale_multiplier(DecimalUtils::scaleMultiplier<DateTime64::NativeType>(scale))\n+    {}\n+\n+    inline DateTime64::NativeType execute(UInt16 d, const DateLUTImpl & time_zone) const\n+    {\n+        const auto dt = ToDateTimeImpl::execute(d, time_zone);\n+        return execute(dt, time_zone);\n+    }\n+\n+    inline DateTime64::NativeType execute(UInt32 dt, const DateLUTImpl & /*time_zone*/) const\n+    {\n+        return DecimalUtils::decimalFromComponentsWithMultiplier<DateTime64>(dt, 0, scale_multiplier);\n+    }\n+};\n+\n+/** Conversion of Date or DateTime to DateTime64: add zero sub-second part.\n+  */\n+template <typename Name> struct ConvertImpl<DataTypeDate, DataTypeDateTime64, Name, ConvertDefaultBehaviorTag>\n+    : DateTimeTransformImpl<DataTypeDate, DataTypeDateTime64, ToDateTime64Transform> {};\n+template <typename Name> struct ConvertImpl<DataTypeDateTime, DataTypeDateTime64, Name, ConvertDefaultBehaviorTag>\n+    : DateTimeTransformImpl<DataTypeDateTime, DataTypeDateTime64, ToDateTime64Transform> {};\n \n \n /** Transformation of numbers, dates, datetimes to strings: through formatting.\n@@ -658,7 +670,6 @@ struct ConvertImpl<FromDataType, std::enable_if_t<!std::is_same_v<FromDataType,\n         const auto & type = static_cast<const FromDataType &>(*col_with_type_and_name.type);\n \n         const DateLUTImpl * time_zone = nullptr;\n-\n         /// For argument of DateTime type, second argument with time zone could be specified.\n         if constexpr (std::is_same_v<FromDataType, DataTypeDateTime> || std::is_same_v<FromDataType, DataTypeDateTime64>)\n             time_zone = &extractTimeZoneFromFunctionArguments(arguments, 1, 0);\n@@ -754,14 +765,18 @@ inline void parseImpl<DataTypeDate>(DataTypeDate::FieldType & x, ReadBuffer & rb\n     x = tmp;\n }\n \n+// NOTE: no need of extra overload of DateTime64, since readDateTimeText64 has different signature and that case is explicitly handled in the calling code.\n template <>\n inline void parseImpl<DataTypeDateTime>(DataTypeDateTime::FieldType & x, ReadBuffer & rb, const DateLUTImpl * time_zone)\n {\n-    time_t tmp = 0;\n-    readDateTimeText(tmp, rb, *time_zone);\n-    x = tmp;\n+    time_t time = 0;\n+    readDateTimeText(time, rb, *time_zone);\n+    if (time < 0)\n+        time = 0;\n+    x = time;\n }\n \n+\n template <>\n inline void parseImpl<DataTypeUUID>(DataTypeUUID::FieldType & x, ReadBuffer & rb, const DateLUTImpl *)\n {\n@@ -989,9 +1004,18 @@ struct ConvertThroughParsing\n                 }\n                 else if constexpr (parsing_mode == ConvertFromStringParsingMode::BestEffortUS)\n                 {\n-                    time_t res;\n-                    parseDateTimeBestEffortUS(res, read_buffer, *local_time_zone, *utc_time_zone);\n-                    vec_to[i] = res;\n+                    if constexpr (to_datetime64)\n+                    {\n+                        DateTime64 res = 0;\n+                        parseDateTime64BestEffortUS(res, vec_to.getScale(), read_buffer, *local_time_zone, *utc_time_zone);\n+                        vec_to[i] = res;\n+                    }\n+                    else\n+                    {\n+                        time_t res;\n+                        parseDateTimeBestEffortUS(res, read_buffer, *local_time_zone, *utc_time_zone);\n+                        vec_to[i] = res;\n+                    }\n                 }\n                 else\n                 {\ndiff --git a/src/Functions/TransformDateTime64.h b/src/Functions/TransformDateTime64.h\nnew file mode 100644\nindex 000000000000..e42c3155327f\n--- /dev/null\n+++ b/src/Functions/TransformDateTime64.h\n@@ -0,0 +1,92 @@\n+#pragma once\n+\n+#include <Core/Types.h>\n+#include <Core/DecimalFunctions.h>\n+\n+namespace DB\n+{\n+/** Tansform-type wrapper for DateTime64, simplifies DateTime64 support for given Transform.\n+ *\n+ * Depending on what overloads of Transform::execute() are available, when called with DateTime64 value,\n+ * invokes Transform::execute() with either:\n+ * * whole part of DateTime64 value, discarding fractional part (1)\n+ * * DateTime64 value and scale factor (2)\n+ * * DateTime64 broken down to components, result of execute is then re-assembled back into DateTime64 value (3)\n+ *\n+ * Suitable Transfotm-types are commonly used in Date/DateTime manipulation functions,\n+ * and should implement static (or const) function with following signatures:\n+ * 1:\n+ *     R execute(Int64 whole_value, ... )\n+ * 2:\n+ *     R execute(DateTime64 value, Int64 scale_multiplier, ... )\n+ * 3:\n+ *     R execute(DecimalUtils::DecimalComponents<DateTime64> components, ... )\n+ *\n+ * Where R could be of arbitrary type, in case of (3) if R is DecimalUtils::DecimalComponents<DateTime64>, result is re-assembed back into DateTime64.\n+*/\n+template <typename Transform>\n+class TransformDateTime64\n+{\n+private:\n+    // Detect if Transform::execute is const or static method\n+    // with signature defined by template args (ignoring result type).\n+    template<typename = void, typename... Args>\n+    struct TransformHasExecuteOverload : std::false_type {};\n+\n+    template<typename... Args>\n+    struct TransformHasExecuteOverload<std::void_t<decltype(std::declval<Transform>().execute(std::declval<Args>()...))>, Args...>\n+        : std::true_type {};\n+\n+    template<typename... Args>\n+    static constexpr bool TransformHasExecuteOverload_v = TransformHasExecuteOverload<void, Args...>::value;\n+\n+public:\n+    static constexpr auto name = Transform::name;\n+\n+    // non-explicit constructor to allow creating from scale value (or with no scale at all), indispensable in some contexts.\n+    TransformDateTime64(UInt32 scale_ = 0)\n+        : scale_multiplier(DecimalUtils::scaleMultiplier<DateTime64::NativeType>(scale_))\n+    {}\n+\n+    template <typename ... Args>\n+    inline auto execute(const DateTime64 & t, Args && ... args) const\n+    {\n+        if constexpr (TransformHasExecuteOverload_v<DateTime64, decltype(scale_multiplier), Args...>)\n+        {\n+            return wrapped_transform.execute(t, scale_multiplier, std::forward<Args>(args)...);\n+        }\n+        else if constexpr (TransformHasExecuteOverload_v<DecimalUtils::DecimalComponents<DateTime64>, Args...>)\n+        {\n+            auto components = DecimalUtils::splitWithScaleMultiplier(t, scale_multiplier);\n+\n+            const auto result = wrapped_transform.execute(components, std::forward<Args>(args)...);\n+            using ResultType = std::decay_t<decltype(result)>;\n+\n+            if constexpr (std::is_same_v<DecimalUtils::DecimalComponents<DateTime64>, ResultType>)\n+            {\n+                return DecimalUtils::decimalFromComponentsWithMultiplier<DateTime64>(result, scale_multiplier);\n+            }\n+            else\n+            {\n+                return result;\n+            }\n+        }\n+        else\n+        {\n+            const auto components = DecimalUtils::splitWithScaleMultiplier(t, scale_multiplier);\n+            return wrapped_transform.execute(static_cast<Int64>(components.whole), std::forward<Args>(args)...);\n+        }\n+    }\n+\n+    template <typename T, typename ... Args, typename = std::enable_if_t<!std::is_same_v<T, DateTime64>>>\n+    inline auto execute(const T & t, Args && ... args) const\n+    {\n+        return wrapped_transform.execute(t, std::forward<Args>(args)...);\n+    }\n+\n+private:\n+    DateTime64::NativeType scale_multiplier = 1;\n+    Transform wrapped_transform = {};\n+};\n+\n+}\ndiff --git a/src/Functions/dateDiff.cpp b/src/Functions/dateDiff.cpp\nindex 54833eb359fb..f660b92efc5b 100644\n--- a/src/Functions/dateDiff.cpp\n+++ b/src/Functions/dateDiff.cpp\n@@ -97,8 +97,8 @@ class FunctionDateDiff : public IFunction\n         size_t rows = input_rows_count;\n         auto res = ColumnInt64::create(rows);\n \n-        const DateLUTImpl & timezone_x = extractTimeZoneFromFunctionArguments(arguments, 3, 1);\n-        const DateLUTImpl & timezone_y = extractTimeZoneFromFunctionArguments(arguments, 3, 2);\n+        const auto & timezone_x = extractTimeZoneFromFunctionArguments(arguments, 3, 1);\n+        const auto & timezone_y = extractTimeZoneFromFunctionArguments(arguments, 3, 2);\n \n         if (unit == \"year\" || unit == \"yy\" || unit == \"yyyy\")\n             dispatchForColumns<ToRelativeYearNumImpl>(x, y, timezone_x, timezone_y, res->getData());\ndiff --git a/src/Functions/extractTimeZoneFromFunctionArguments.cpp b/src/Functions/extractTimeZoneFromFunctionArguments.cpp\nindex 9d6e54a599e1..0ba08b3c6121 100644\n--- a/src/Functions/extractTimeZoneFromFunctionArguments.cpp\n+++ b/src/Functions/extractTimeZoneFromFunctionArguments.cpp\n@@ -66,10 +66,11 @@ const DateLUTImpl & extractTimeZoneFromFunctionArguments(const ColumnsWithTypeAn\n         if (arguments.empty())\n             return DateLUT::instance();\n \n+        const auto & dt_arg = arguments[datetime_arg_num].type.get();\n         /// If time zone is attached to an argument of type DateTime.\n-        if (const auto * type = checkAndGetDataType<DataTypeDateTime>(arguments[datetime_arg_num].type.get()))\n+        if (const auto * type = checkAndGetDataType<DataTypeDateTime>(dt_arg))\n             return type->getTimeZone();\n-        if (const auto * type = checkAndGetDataType<DataTypeDateTime64>(arguments[datetime_arg_num].type.get()))\n+        if (const auto * type = checkAndGetDataType<DataTypeDateTime64>(dt_arg))\n             return type->getTimeZone();\n \n         return DateLUT::instance();\ndiff --git a/src/Functions/formatDateTime.cpp b/src/Functions/formatDateTime.cpp\nindex fd909ed6fce9..5128f077c5a5 100644\n--- a/src/Functions/formatDateTime.cpp\n+++ b/src/Functions/formatDateTime.cpp\n@@ -46,9 +46,8 @@ template <> struct ActionValueTypeMap<DataTypeInt64>      { using ActionValueTyp\n template <> struct ActionValueTypeMap<DataTypeUInt64>     { using ActionValueType = UInt32; };\n template <> struct ActionValueTypeMap<DataTypeDate>       { using ActionValueType = UInt16; };\n template <> struct ActionValueTypeMap<DataTypeDateTime>   { using ActionValueType = UInt32; };\n-// TODO(vnemkov): once there is support for Int64 in LUT, make that Int64.\n // TODO(vnemkov): to add sub-second format instruction, make that DateTime64 and do some math in Action<T>.\n-template <> struct ActionValueTypeMap<DataTypeDateTime64> { using ActionValueType = UInt32; };\n+template <> struct ActionValueTypeMap<DataTypeDateTime64> { using ActionValueType = Int64; };\n \n \n /** formatDateTime(time, 'pattern')\n@@ -434,7 +433,6 @@ class FunctionFormatDateTimeImpl : public IFunction\n             time_zone_tmp = &DateLUT::instance();\n \n         const DateLUTImpl & time_zone = *time_zone_tmp;\n-\n         const auto & vec = times->getData();\n \n         UInt32 scale [[maybe_unused]] = 0;\n@@ -519,6 +517,8 @@ class FunctionFormatDateTimeImpl : public IFunction\n         {\n             if constexpr (std::is_same_v<T, UInt32>)\n                 instructions.emplace_back(func, shift);\n+            else if constexpr (std::is_same_v<T, Int64>)\n+                instructions.emplace_back(func, shift);\n             else\n                 add_shift(shift);\n         };\ndiff --git a/src/Functions/now64.cpp b/src/Functions/now64.cpp\nindex feb821fde82e..32c7a95de17e 100644\n--- a/src/Functions/now64.cpp\n+++ b/src/Functions/now64.cpp\n@@ -30,7 +30,7 @@ Field nowSubsecond(UInt32 scale)\n     if (clock_gettime(CLOCK_REALTIME, &spec))\n         throwFromErrno(\"Cannot clock_gettime.\", ErrorCodes::CANNOT_CLOCK_GETTIME);\n \n-    DecimalUtils::DecimalComponents<DateTime64::NativeType> components{spec.tv_sec, spec.tv_nsec};\n+    DecimalUtils::DecimalComponents<DateTime64> components{spec.tv_sec, spec.tv_nsec};\n \n     // clock_gettime produces subsecond part in nanoseconds, but decimalFromComponents fractional is scale-dependent.\n     // Andjust fractional to scale, e.g. for 123456789 nanoseconds:\ndiff --git a/src/Functions/toStartOfInterval.cpp b/src/Functions/toStartOfInterval.cpp\nindex 6f5a52ca1823..f194da166aa2 100644\n--- a/src/Functions/toStartOfInterval.cpp\n+++ b/src/Functions/toStartOfInterval.cpp\n@@ -7,6 +7,7 @@\n #include <Functions/DateTimeTransforms.h>\n #include <Functions/FunctionFactory.h>\n #include <Functions/IFunctionImpl.h>\n+#include <Functions/TransformDateTime64.h>\n #include <IO/WriteHelpers.h>\n \n \n@@ -35,13 +36,18 @@ namespace\n \n         static UInt16 execute(UInt16 d, UInt64 years, const DateLUTImpl & time_zone)\n         {\n-            return time_zone.toStartOfYearInterval(DayNum(d), years);\n+            return time_zone.toStartOfYearInterval(ExtendedDayNum(d), years);\n         }\n \n         static UInt16 execute(UInt32 t, UInt64 years, const DateLUTImpl & time_zone)\n         {\n             return time_zone.toStartOfYearInterval(time_zone.toDayNum(t), years);\n         }\n+\n+        static UInt16 execute(Int64 t, UInt64 years, const DateLUTImpl & time_zone)\n+        {\n+            return time_zone.toStartOfYearInterval(time_zone.toDayNum(t), years);\n+        }\n     };\n \n     template <>\n@@ -51,13 +57,18 @@ namespace\n \n         static UInt16 execute(UInt16 d, UInt64 quarters, const DateLUTImpl & time_zone)\n         {\n-            return time_zone.toStartOfQuarterInterval(DayNum(d), quarters);\n+            return time_zone.toStartOfQuarterInterval(ExtendedDayNum(d), quarters);\n         }\n \n         static UInt16 execute(UInt32 t, UInt64 quarters, const DateLUTImpl & time_zone)\n         {\n             return time_zone.toStartOfQuarterInterval(time_zone.toDayNum(t), quarters);\n         }\n+\n+        static UInt16 execute(Int64 t, UInt64 quarters, const DateLUTImpl & time_zone)\n+        {\n+            return time_zone.toStartOfQuarterInterval(time_zone.toDayNum(t), quarters);\n+        }\n     };\n \n     template <>\n@@ -67,13 +78,18 @@ namespace\n \n         static UInt16 execute(UInt16 d, UInt64 months, const DateLUTImpl & time_zone)\n         {\n-            return time_zone.toStartOfMonthInterval(DayNum(d), months);\n+            return time_zone.toStartOfMonthInterval(ExtendedDayNum(d), months);\n         }\n \n         static UInt16 execute(UInt32 t, UInt64 months, const DateLUTImpl & time_zone)\n         {\n             return time_zone.toStartOfMonthInterval(time_zone.toDayNum(t), months);\n         }\n+\n+        static UInt16 execute(Int64 t, UInt64 months, const DateLUTImpl & time_zone)\n+        {\n+            return time_zone.toStartOfMonthInterval(time_zone.toDayNum(t), months);\n+        }\n     };\n \n     template <>\n@@ -83,13 +99,18 @@ namespace\n \n         static UInt16 execute(UInt16 d, UInt64 weeks, const DateLUTImpl & time_zone)\n         {\n-            return time_zone.toStartOfWeekInterval(DayNum(d), weeks);\n+            return time_zone.toStartOfWeekInterval(ExtendedDayNum(d), weeks);\n         }\n \n         static UInt16 execute(UInt32 t, UInt64 weeks, const DateLUTImpl & time_zone)\n         {\n             return time_zone.toStartOfWeekInterval(time_zone.toDayNum(t), weeks);\n         }\n+\n+        static UInt16 execute(Int64 t, UInt64 weeks, const DateLUTImpl & time_zone)\n+        {\n+            return time_zone.toStartOfWeekInterval(time_zone.toDayNum(t), weeks);\n+        }\n     };\n \n     template <>\n@@ -99,13 +120,18 @@ namespace\n \n         static UInt32 execute(UInt16 d, UInt64 days, const DateLUTImpl & time_zone)\n         {\n-            return time_zone.toStartOfDayInterval(DayNum(d), days);\n+            return time_zone.toStartOfDayInterval(ExtendedDayNum(d), days);\n         }\n \n         static UInt32 execute(UInt32 t, UInt64 days, const DateLUTImpl & time_zone)\n         {\n             return time_zone.toStartOfDayInterval(time_zone.toDayNum(t), days);\n         }\n+\n+        static UInt32 execute(Int64 t, UInt64 days, const DateLUTImpl & time_zone)\n+        {\n+            return time_zone.toStartOfDayInterval(time_zone.toDayNum(t), days);\n+        }\n     };\n \n     template <>\n@@ -114,8 +140,8 @@ namespace\n         static constexpr auto name = function_name;\n \n         static UInt32 execute(UInt16, UInt64, const DateLUTImpl &) { return dateIsNotSupported(function_name); }\n-\n         static UInt32 execute(UInt32 t, UInt64 hours, const DateLUTImpl & time_zone) { return time_zone.toStartOfHourInterval(t, hours); }\n+        static UInt32 execute(Int64 t, UInt64 hours, const DateLUTImpl & time_zone) { return time_zone.toStartOfHourInterval(t, hours); }\n     };\n \n     template <>\n@@ -129,6 +155,11 @@ namespace\n         {\n             return time_zone.toStartOfMinuteInterval(t, minutes);\n         }\n+\n+        static UInt32 execute(Int64 t, UInt64 minutes, const DateLUTImpl & time_zone)\n+        {\n+            return time_zone.toStartOfMinuteInterval(t, minutes);\n+        }\n     };\n \n     template <>\n@@ -142,6 +173,11 @@ namespace\n         {\n             return time_zone.toStartOfSecondInterval(t, seconds);\n         }\n+\n+        static Int64 execute(Int64 t, UInt64 seconds, const DateLUTImpl & time_zone)\n+        {\n+            return time_zone.toStartOfSecondInterval(t, seconds);\n+        }\n     };\n \n \n@@ -230,7 +266,7 @@ class FunctionToStartOfInterval : public IFunction\n     {\n         const auto & time_column = arguments[0];\n         const auto & interval_column = arguments[1];\n-        const DateLUTImpl & time_zone = extractTimeZoneFromFunctionArguments(arguments, 2, 0);\n+        const auto & time_zone = extractTimeZoneFromFunctionArguments(arguments, 2, 0);\n         auto result_column = dispatchForColumns(time_column, interval_column, time_zone);\n         return result_column;\n     }\ndiff --git a/src/Functions/today.cpp b/src/Functions/today.cpp\nindex 653730585404..511af881d73a 100644\n--- a/src/Functions/today.cpp\n+++ b/src/Functions/today.cpp\n@@ -77,7 +77,7 @@ class TodayOverloadResolver : public IFunctionOverloadResolverImpl\n \n     FunctionBaseImplPtr build(const ColumnsWithTypeAndName &, const DataTypePtr &) const override\n     {\n-        return std::make_unique<FunctionBaseToday>(DateLUT::instance().toDayNum(time(nullptr)));\n+        return std::make_unique<FunctionBaseToday>(DayNum(DateLUT::instance().toDayNum(time(nullptr)).toUnderType()));\n     }\n };\n \ndiff --git a/src/IO/ReadHelpers.h b/src/IO/ReadHelpers.h\nindex e33de04f3221..369237f329d5 100644\n--- a/src/IO/ReadHelpers.h\n+++ b/src/IO/ReadHelpers.h\n@@ -747,7 +747,7 @@ inline ReturnType readDateTimeTextImpl(DateTime64 & datetime64, UInt32 scale, Re\n         return ReturnType(false);\n     }\n \n-    DB::DecimalUtils::DecimalComponents<DateTime64::NativeType> components{static_cast<DateTime64::NativeType>(whole), 0};\n+    DB::DecimalUtils::DecimalComponents<DateTime64> components{static_cast<DateTime64::NativeType>(whole), 0};\n \n     if (!buf.eof() && *buf.position() == '.')\n     {\n@@ -791,9 +791,9 @@ inline ReturnType readDateTimeTextImpl(DateTime64 & datetime64, UInt32 scale, Re\n     return ReturnType(true);\n }\n \n-inline void readDateTimeText(time_t & datetime, ReadBuffer & buf, const DateLUTImpl & date_lut = DateLUT::instance())\n+inline void readDateTimeText(time_t & datetime, ReadBuffer & buf, const DateLUTImpl & time_zone = DateLUT::instance())\n {\n-    readDateTimeTextImpl<void>(datetime, buf, date_lut);\n+    readDateTimeTextImpl<void>(datetime, buf, time_zone);\n }\n \n inline void readDateTime64Text(DateTime64 & datetime64, UInt32 scale, ReadBuffer & buf, const DateLUTImpl & date_lut = DateLUT::instance())\n@@ -801,9 +801,9 @@ inline void readDateTime64Text(DateTime64 & datetime64, UInt32 scale, ReadBuffer\n     readDateTimeTextImpl<void>(datetime64, scale, buf, date_lut);\n }\n \n-inline bool tryReadDateTimeText(time_t & datetime, ReadBuffer & buf, const DateLUTImpl & date_lut = DateLUT::instance())\n+inline bool tryReadDateTimeText(time_t & datetime, ReadBuffer & buf, const DateLUTImpl & time_zone = DateLUT::instance())\n {\n-    return readDateTimeTextImpl<bool>(datetime, buf, date_lut);\n+    return readDateTimeTextImpl<bool>(datetime, buf, time_zone);\n }\n \n inline bool tryReadDateTime64Text(DateTime64 & datetime64, UInt32 scale, ReadBuffer & buf, const DateLUTImpl & date_lut = DateLUT::instance())\ndiff --git a/src/IO/WriteHelpers.h b/src/IO/WriteHelpers.h\nindex a382ae13cdda..b9497b6f87e7 100644\n--- a/src/IO/WriteHelpers.h\n+++ b/src/IO/WriteHelpers.h\n@@ -819,26 +819,20 @@ inline void writeDateTimeText(const LocalDateTime & datetime, WriteBuffer & buf)\n \n /// In the format YYYY-MM-DD HH:MM:SS, according to the specified time zone.\n template <char date_delimeter = '-', char time_delimeter = ':', char between_date_time_delimiter = ' '>\n-inline void writeDateTimeText(time_t datetime, WriteBuffer & buf, const DateLUTImpl & date_lut = DateLUT::instance())\n+inline void writeDateTimeText(time_t datetime, WriteBuffer & buf, const DateLUTImpl & time_zone = DateLUT::instance())\n {\n-    const auto & values = date_lut.getValues(datetime);\n-    writeDateTimeText<date_delimeter, time_delimeter, between_date_time_delimiter>(\n-        LocalDateTime(values.year, values.month, values.day_of_month,\n-            date_lut.toHour(datetime), date_lut.toMinute(datetime), date_lut.toSecond(datetime)), buf);\n+    writeDateTimeText<date_delimeter, time_delimeter, between_date_time_delimiter>(LocalDateTime(datetime, time_zone), buf);\n }\n \n /// In the format YYYY-MM-DD HH:MM:SS.NNNNNNNNN, according to the specified time zone.\n template <char date_delimeter = '-', char time_delimeter = ':', char between_date_time_delimiter = ' ', char fractional_time_delimiter = '.'>\n-inline void writeDateTimeText(DateTime64 datetime64, UInt32 scale, WriteBuffer & buf, const DateLUTImpl & date_lut = DateLUT::instance())\n+inline void writeDateTimeText(DateTime64 datetime64, UInt32 scale, WriteBuffer & buf, const DateLUTImpl & time_zone = DateLUT::instance())\n {\n     static constexpr UInt32 MaxScale = DecimalUtils::max_precision<DateTime64>;\n     scale = scale > MaxScale ? MaxScale : scale;\n \n     auto components = DecimalUtils::split(datetime64, scale);\n-    const auto & values = date_lut.getValues(components.whole);\n-    writeDateTimeText<date_delimeter, time_delimeter, between_date_time_delimiter>(\n-        LocalDateTime(values.year, values.month, values.day_of_month,\n-            date_lut.toHour(components.whole), date_lut.toMinute(components.whole), date_lut.toSecond(components.whole)), buf);\n+    writeDateTimeText<date_delimeter, time_delimeter, between_date_time_delimiter>(LocalDateTime(components.whole, time_zone), buf);\n \n     if (scale > 0)\n     {\n@@ -849,9 +843,9 @@ inline void writeDateTimeText(DateTime64 datetime64, UInt32 scale, WriteBuffer &\n \n /// In the RFC 1123 format: \"Tue, 03 Dec 2019 00:11:50 GMT\". You must provide GMT DateLUT.\n /// This is needed for HTTP requests.\n-inline void writeDateTimeTextRFC1123(time_t datetime, WriteBuffer & buf, const DateLUTImpl & date_lut)\n+inline void writeDateTimeTextRFC1123(time_t datetime, WriteBuffer & buf, const DateLUTImpl & time_zone = DateLUT::instance())\n {\n-    const auto & values = date_lut.getValues(datetime);\n+    const auto & values = time_zone.getValues(datetime);\n \n     static const char week_days[3 * 8 + 1] = \"XXX\" \"Mon\" \"Tue\" \"Wed\" \"Thu\" \"Fri\" \"Sat\" \"Sun\";\n     static const char months[3 * 13 + 1] = \"XXX\" \"Jan\" \"Feb\" \"Mar\" \"Apr\" \"May\" \"Jun\" \"Jul\" \"Aug\" \"Sep\" \"Oct\" \"Nov\" \"Dec\";\n@@ -865,11 +859,11 @@ inline void writeDateTimeTextRFC1123(time_t datetime, WriteBuffer & buf, const D\n     buf.write(&digits100[values.year / 100 * 2], 2);\n     buf.write(&digits100[values.year % 100 * 2], 2);\n     buf.write(' ');\n-    buf.write(&digits100[date_lut.toHour(datetime) * 2], 2);\n+    buf.write(&digits100[time_zone.toHour(datetime) * 2], 2);\n     buf.write(':');\n-    buf.write(&digits100[date_lut.toMinute(datetime) * 2], 2);\n+    buf.write(&digits100[time_zone.toMinute(datetime) * 2], 2);\n     buf.write(':');\n-    buf.write(&digits100[date_lut.toSecond(datetime) * 2], 2);\n+    buf.write(&digits100[time_zone.toSecond(datetime) * 2], 2);\n     buf.write(\" GMT\", 4);\n }\n \ndiff --git a/src/IO/parseDateTimeBestEffort.cpp b/src/IO/parseDateTimeBestEffort.cpp\nindex 47a298ede294..26745a8f1387 100644\n--- a/src/IO/parseDateTimeBestEffort.cpp\n+++ b/src/IO/parseDateTimeBestEffort.cpp\n@@ -600,7 +600,7 @@ ReturnType parseDateTimeBestEffortImpl(\n     return ReturnType(true);\n }\n \n-template <typename ReturnType>\n+template <typename ReturnType, bool is_us_style>\n ReturnType parseDateTime64BestEffortImpl(DateTime64 & res, UInt32 scale, ReadBuffer & in, const DateLUTImpl & local_time_zone, const DateLUTImpl & utc_time_zone)\n {\n     time_t whole;\n@@ -608,12 +608,12 @@ ReturnType parseDateTime64BestEffortImpl(DateTime64 & res, UInt32 scale, ReadBuf\n \n     if constexpr (std::is_same_v<ReturnType, bool>)\n     {\n-        if (!parseDateTimeBestEffortImpl<bool, false>(whole, in, local_time_zone, utc_time_zone, &subsecond))\n+        if (!parseDateTimeBestEffortImpl<bool, is_us_style>(whole, in, local_time_zone, utc_time_zone, &subsecond))\n             return false;\n     }\n     else\n     {\n-        parseDateTimeBestEffortImpl<ReturnType, false>(whole, in, local_time_zone, utc_time_zone, &subsecond);\n+        parseDateTimeBestEffortImpl<ReturnType, is_us_style>(whole, in, local_time_zone, utc_time_zone, &subsecond);\n     }\n \n \n@@ -661,12 +661,17 @@ bool tryParseDateTimeBestEffortUS(time_t & res, ReadBuffer & in, const DateLUTIm\n \n void parseDateTime64BestEffort(DateTime64 & res, UInt32 scale, ReadBuffer & in, const DateLUTImpl & local_time_zone, const DateLUTImpl & utc_time_zone)\n {\n-    return parseDateTime64BestEffortImpl<void>(res, scale, in, local_time_zone, utc_time_zone);\n+    return parseDateTime64BestEffortImpl<void, false>(res, scale, in, local_time_zone, utc_time_zone);\n+}\n+\n+void parseDateTime64BestEffortUS(DateTime64 & res, UInt32 scale, ReadBuffer & in, const DateLUTImpl & local_time_zone, const DateLUTImpl & utc_time_zone)\n+{\n+    return parseDateTime64BestEffortImpl<void, true>(res, scale, in, local_time_zone, utc_time_zone);\n }\n \n bool tryParseDateTime64BestEffort(DateTime64 & res, UInt32 scale, ReadBuffer & in, const DateLUTImpl & local_time_zone, const DateLUTImpl & utc_time_zone)\n {\n-    return parseDateTime64BestEffortImpl<bool>(res, scale, in, local_time_zone, utc_time_zone);\n+    return parseDateTime64BestEffortImpl<bool, false>(res, scale, in, local_time_zone, utc_time_zone);\n }\n \n }\ndiff --git a/src/IO/parseDateTimeBestEffort.h b/src/IO/parseDateTimeBestEffort.h\nindex 65e92cbee428..fe3da24a7974 100644\n--- a/src/IO/parseDateTimeBestEffort.h\n+++ b/src/IO/parseDateTimeBestEffort.h\n@@ -61,6 +61,7 @@ bool tryParseDateTimeBestEffort(time_t & res, ReadBuffer & in, const DateLUTImpl\n void parseDateTimeBestEffortUS(time_t & res, ReadBuffer & in, const DateLUTImpl & local_time_zone, const DateLUTImpl & utc_time_zone);\n bool tryParseDateTimeBestEffortUS(time_t & res, ReadBuffer & in, const DateLUTImpl & local_time_zone, const DateLUTImpl & utc_time_zone);\n void parseDateTime64BestEffort(DateTime64 & res, UInt32 scale, ReadBuffer & in, const DateLUTImpl & local_time_zone, const DateLUTImpl & utc_time_zone);\n+void parseDateTime64BestEffortUS(DateTime64 & res, UInt32 scale, ReadBuffer & in, const DateLUTImpl & local_time_zone, const DateLUTImpl & utc_time_zone);\n bool tryParseDateTime64BestEffort(DateTime64 & res, UInt32 scale, ReadBuffer & in, const DateLUTImpl & local_time_zone, const DateLUTImpl & utc_time_zone);\n \n }\ndiff --git a/src/Interpreters/CrashLog.cpp b/src/Interpreters/CrashLog.cpp\nindex bf81a2e8abad..5067acd4a5c4 100644\n--- a/src/Interpreters/CrashLog.cpp\n+++ b/src/Interpreters/CrashLog.cpp\n@@ -40,7 +40,7 @@ void CrashLogElement::appendToBlock(MutableColumns & columns) const\n {\n     size_t i = 0;\n \n-    columns[i++]->insert(DateLUT::instance().toDayNum(event_time));\n+    columns[i++]->insert(DateLUT::instance().toDayNum(event_time).toUnderType());\n     columns[i++]->insert(event_time);\n     columns[i++]->insert(timestamp_ns);\n     columns[i++]->insert(signal);\ndiff --git a/src/Interpreters/MetricLog.cpp b/src/Interpreters/MetricLog.cpp\nindex ce5d5793b87c..fd1c120f18c3 100644\n--- a/src/Interpreters/MetricLog.cpp\n+++ b/src/Interpreters/MetricLog.cpp\n@@ -41,7 +41,7 @@ void MetricLogElement::appendToBlock(MutableColumns & columns) const\n {\n     size_t column_idx = 0;\n \n-    columns[column_idx++]->insert(DateLUT::instance().toDayNum(event_time));\n+    columns[column_idx++]->insert(DateLUT::instance().toDayNum(event_time).toUnderType());\n     columns[column_idx++]->insert(event_time);\n     columns[column_idx++]->insert(event_time_microseconds);\n     columns[column_idx++]->insert(milliseconds);\ndiff --git a/src/Interpreters/OpenTelemetrySpanLog.cpp b/src/Interpreters/OpenTelemetrySpanLog.cpp\nindex e1df145cf511..f9ae6518af0b 100644\n--- a/src/Interpreters/OpenTelemetrySpanLog.cpp\n+++ b/src/Interpreters/OpenTelemetrySpanLog.cpp\n@@ -49,7 +49,7 @@ void OpenTelemetrySpanLogElement::appendToBlock(MutableColumns & columns) const\n     columns[i++]->insert(operation_name);\n     columns[i++]->insert(start_time_us);\n     columns[i++]->insert(finish_time_us);\n-    columns[i++]->insert(DateLUT::instance().toDayNum(finish_time_us / 1000000));\n+    columns[i++]->insert(DateLUT::instance().toDayNum(finish_time_us / 1000000).toUnderType());\n     columns[i++]->insert(attribute_names);\n     // The user might add some ints values, and we will have Int Field, and the\n     // insert will fail because the column requires Strings. Convert the fields\ndiff --git a/src/Interpreters/PartLog.cpp b/src/Interpreters/PartLog.cpp\nindex 860666a00354..c180a4dd2548 100644\n--- a/src/Interpreters/PartLog.cpp\n+++ b/src/Interpreters/PartLog.cpp\n@@ -71,7 +71,7 @@ void PartLogElement::appendToBlock(MutableColumns & columns) const\n \n     columns[i++]->insert(query_id);\n     columns[i++]->insert(event_type);\n-    columns[i++]->insert(DateLUT::instance().toDayNum(event_time));\n+    columns[i++]->insert(DateLUT::instance().toDayNum(event_time).toUnderType());\n     columns[i++]->insert(event_time);\n     columns[i++]->insert(event_time_microseconds);\n     columns[i++]->insert(duration_ms);\ndiff --git a/src/Interpreters/QueryLog.cpp b/src/Interpreters/QueryLog.cpp\nindex 82b957f895b6..b6902468242f 100644\n--- a/src/Interpreters/QueryLog.cpp\n+++ b/src/Interpreters/QueryLog.cpp\n@@ -119,7 +119,7 @@ void QueryLogElement::appendToBlock(MutableColumns & columns) const\n     size_t i = 0;\n \n     columns[i++]->insert(type);\n-    columns[i++]->insert(DateLUT::instance().toDayNum(event_time));\n+    columns[i++]->insert(DateLUT::instance().toDayNum(event_time).toUnderType());\n     columns[i++]->insert(event_time);\n     columns[i++]->insert(event_time_microseconds);\n     columns[i++]->insert(query_start_time);\ndiff --git a/src/Interpreters/QueryThreadLog.cpp b/src/Interpreters/QueryThreadLog.cpp\nindex f1cce1a3da97..31f1fddc87f5 100644\n--- a/src/Interpreters/QueryThreadLog.cpp\n+++ b/src/Interpreters/QueryThreadLog.cpp\n@@ -76,7 +76,7 @@ void QueryThreadLogElement::appendToBlock(MutableColumns & columns) const\n {\n     size_t i = 0;\n \n-    columns[i++]->insert(DateLUT::instance().toDayNum(event_time));\n+    columns[i++]->insert(DateLUT::instance().toDayNum(event_time).toUnderType());\n     columns[i++]->insert(event_time);\n     columns[i++]->insert(event_time_microseconds);\n     columns[i++]->insert(query_start_time);\ndiff --git a/src/Interpreters/TextLog.cpp b/src/Interpreters/TextLog.cpp\nindex f60b6acae6f5..489bb302ad03 100644\n--- a/src/Interpreters/TextLog.cpp\n+++ b/src/Interpreters/TextLog.cpp\n@@ -55,7 +55,7 @@ void TextLogElement::appendToBlock(MutableColumns & columns) const\n {\n     size_t i = 0;\n \n-    columns[i++]->insert(DateLUT::instance().toDayNum(event_time));\n+    columns[i++]->insert(DateLUT::instance().toDayNum(event_time).toUnderType());\n     columns[i++]->insert(event_time);\n     columns[i++]->insert(event_time_microseconds);\n     columns[i++]->insert(microseconds);\ndiff --git a/src/Interpreters/TraceLog.cpp b/src/Interpreters/TraceLog.cpp\nindex 40bcc0db4450..fe7512f2f009 100644\n--- a/src/Interpreters/TraceLog.cpp\n+++ b/src/Interpreters/TraceLog.cpp\n@@ -42,7 +42,7 @@ void TraceLogElement::appendToBlock(MutableColumns & columns) const\n {\n     size_t i = 0;\n \n-    columns[i++]->insert(DateLUT::instance().toDayNum(event_time));\n+    columns[i++]->insert(DateLUT::instance().toDayNum(event_time).toUnderType());\n     columns[i++]->insert(event_time);\n     columns[i++]->insert(event_time_microseconds);\n     columns[i++]->insert(timestamp_ns);\ndiff --git a/src/Interpreters/convertFieldToType.cpp b/src/Interpreters/convertFieldToType.cpp\nindex 1d93ef56deac..d47f64cb1dc4 100644\n--- a/src/Interpreters/convertFieldToType.cpp\n+++ b/src/Interpreters/convertFieldToType.cpp\n@@ -141,7 +141,7 @@ Field convertFieldToTypeImpl(const Field & src, const IDataType & type, const ID\n     /// Conversion between Date and DateTime and vice versa.\n     if (which_type.isDate() && which_from_type.isDateTime())\n     {\n-        return static_cast<const DataTypeDateTime &>(*from_type_hint).getTimeZone().toDayNum(src.get<UInt64>());\n+        return static_cast<UInt16>(static_cast<const DataTypeDateTime &>(*from_type_hint).getTimeZone().toDayNum(src.get<UInt64>()).toUnderType());\n     }\n     else if (which_type.isDateTime() && which_from_type.isDate())\n     {\ndiff --git a/src/Storages/MergeTree/MergeTreeMutationEntry.cpp b/src/Storages/MergeTree/MergeTreeMutationEntry.cpp\nindex 44c4b3c4d109..49c4e93eb1dc 100644\n--- a/src/Storages/MergeTree/MergeTreeMutationEntry.cpp\n+++ b/src/Storages/MergeTree/MergeTreeMutationEntry.cpp\n@@ -75,7 +75,9 @@ MergeTreeMutationEntry::MergeTreeMutationEntry(DiskPtr disk_, const String & pat\n \n     LocalDateTime create_time_dt;\n     *buf >> \"create time: \" >> create_time_dt >> \"\\n\";\n-    create_time = create_time_dt;\n+    create_time = DateLUT::instance().makeDateTime(\n+        create_time_dt.year(), create_time_dt.month(), create_time_dt.day(),\n+        create_time_dt.hour(), create_time_dt.minute(), create_time_dt.second());\n \n     *buf >> \"commands: \";\n     commands.readText(*buf);\ndiff --git a/src/Storages/MergeTree/ReplicatedMergeTreeLogEntry.cpp b/src/Storages/MergeTree/ReplicatedMergeTreeLogEntry.cpp\nindex 9a9f25fd470e..07c64d9c95ce 100644\n--- a/src/Storages/MergeTree/ReplicatedMergeTreeLogEntry.cpp\n+++ b/src/Storages/MergeTree/ReplicatedMergeTreeLogEntry.cpp\n@@ -162,7 +162,9 @@ void ReplicatedMergeTreeLogEntryData::readText(ReadBuffer & in)\n     {\n         LocalDateTime create_time_dt;\n         in >> \"create_time: \" >> create_time_dt >> \"\\n\";\n-        create_time = create_time_dt;\n+        create_time = DateLUT::instance().makeDateTime(\n+            create_time_dt.year(), create_time_dt.month(), create_time_dt.day(),\n+            create_time_dt.hour(), create_time_dt.minute(), create_time_dt.second());\n     }\n \n     in >> \"source replica: \" >> source_replica >> \"\\n\";\ndiff --git a/src/Storages/MergeTree/ReplicatedMergeTreeMutationEntry.cpp b/src/Storages/MergeTree/ReplicatedMergeTreeMutationEntry.cpp\nindex b2299b2cbbdc..c617befe9c4b 100644\n--- a/src/Storages/MergeTree/ReplicatedMergeTreeMutationEntry.cpp\n+++ b/src/Storages/MergeTree/ReplicatedMergeTreeMutationEntry.cpp\n@@ -37,7 +37,9 @@ void ReplicatedMergeTreeMutationEntry::readText(ReadBuffer & in)\n \n     LocalDateTime create_time_dt;\n     in >> \"create time: \" >> create_time_dt >> \"\\n\";\n-    create_time = create_time_dt;\n+    create_time = DateLUT::instance().makeDateTime(\n+        create_time_dt.year(), create_time_dt.month(), create_time_dt.day(),\n+        create_time_dt.hour(), create_time_dt.minute(), create_time_dt.second());\n \n     in >> \"source replica: \" >> source_replica >> \"\\n\";\n \ndiff --git a/src/Storages/StorageGenerateRandom.cpp b/src/Storages/StorageGenerateRandom.cpp\nindex fd10691ecc49..f06daa3a2bd5 100644\n--- a/src/Storages/StorageGenerateRandom.cpp\n+++ b/src/Storages/StorageGenerateRandom.cpp\n@@ -215,7 +215,7 @@ ColumnPtr fillColumnWithRandomData(\n             column->getData().resize(limit);\n \n             for (size_t i = 0; i < limit; ++i)\n-                column->getData()[i] = rng() % (DATE_LUT_MAX_DAY_NUM + 1);   /// Slow\n+                column->getData()[i] = rng() % (DATE_LUT_MAX_DAY_NUM + 1);\n \n             return column;\n         }\ndiff --git a/src/Storages/StorageReplicatedMergeTree.cpp b/src/Storages/StorageReplicatedMergeTree.cpp\nindex 2a2805083641..a8de89a8bb09 100644\n--- a/src/Storages/StorageReplicatedMergeTree.cpp\n+++ b/src/Storages/StorageReplicatedMergeTree.cpp\n@@ -1450,7 +1450,7 @@ bool StorageReplicatedMergeTree::tryExecuteMerge(const LogEntry & entry)\n     {\n         LOG_INFO(log, \"Will try to fetch part {} until '{}' because this part assigned to recompression merge. \"\n             \"Source replica {} will try to merge this part first\", entry.new_part_name,\n-            LocalDateTime(entry.create_time + storage_settings_ptr->try_fetch_recompressed_part_timeout.totalSeconds()), entry.source_replica);\n+            DateLUT::instance().timeToString(entry.create_time + storage_settings_ptr->try_fetch_recompressed_part_timeout.totalSeconds()), entry.source_replica);\n         return false;\n     }\n \n@@ -4616,7 +4616,7 @@ static String getPartNamePossiblyFake(MergeTreeDataFormatVersion format_version,\n         /// The date range is all month long.\n         const auto & lut = DateLUT::instance();\n         time_t start_time = lut.YYYYMMDDToDate(parse<UInt32>(part_info.partition_id + \"01\"));\n-        DayNum left_date = lut.toDayNum(start_time);\n+        DayNum left_date = DayNum(lut.toDayNum(start_time).toUnderType());\n         DayNum right_date = DayNum(static_cast<size_t>(left_date) + lut.daysInMonth(start_time) - 1);\n         return part_info.getPartNameV0(left_date, right_date);\n     }\ndiff --git a/utils/convert-month-partitioned-parts/main.cpp b/utils/convert-month-partitioned-parts/main.cpp\nindex 0a697937eb65..a6829d79726c 100644\n--- a/utils/convert-month-partitioned-parts/main.cpp\n+++ b/utils/convert-month-partitioned-parts/main.cpp\n@@ -47,8 +47,9 @@ void run(String part_path, String date_column, String dest_path)\n     DayNum max_date;\n     MergeTreePartInfo::parseMinMaxDatesFromPartName(old_part_name, min_date, max_date);\n \n-    UInt32 yyyymm = DateLUT::instance().toNumYYYYMM(min_date);\n-    if (yyyymm != DateLUT::instance().toNumYYYYMM(max_date))\n+    const auto & time_zone = DateLUT::instance();\n+    UInt32 yyyymm = time_zone.toNumYYYYMM(min_date);\n+    if (yyyymm != time_zone.toNumYYYYMM(max_date))\n         throw Exception(\"Part \" + old_part_name + \" spans different months\",\n             ErrorCodes::BAD_DATA_PART_NAME);\n \ndiff --git a/utils/wikistat-loader/main.cpp b/utils/wikistat-loader/main.cpp\nindex f2adcc43a3a2..31ade014c744 100644\n--- a/utils/wikistat-loader/main.cpp\n+++ b/utils/wikistat-loader/main.cpp\n@@ -151,7 +151,7 @@ try\n \n     std::string time_str = options.at(\"time\").as<std::string>();\n     LocalDateTime time(time_str);\n-    LocalDate date(time);\n+    LocalDate date(time_str);\n \n     DB::ReadBufferFromFileDescriptor in(STDIN_FILENO);\n     DB::WriteBufferFromFileDescriptor out(STDOUT_FILENO);\n",
  "test_patch": "diff --git a/base/common/tests/CMakeLists.txt b/base/common/tests/CMakeLists.txt\nindex 6775d443fb6a..2a07a94055fb 100644\n--- a/base/common/tests/CMakeLists.txt\n+++ b/base/common/tests/CMakeLists.txt\n@@ -1,25 +1,2 @@\n-include (${ClickHouse_SOURCE_DIR}/cmake/add_check.cmake)\n-\n-add_executable (date_lut2 date_lut2.cpp)\n-add_executable (date_lut3 date_lut3.cpp)\n-add_executable (date_lut_default_timezone date_lut_default_timezone.cpp)\n-add_executable (local_date_time_comparison local_date_time_comparison.cpp)\n-add_executable (realloc-perf allocator.cpp)\n-\n-set(PLATFORM_LIBS ${CMAKE_DL_LIBS})\n-\n-target_link_libraries (date_lut2 PRIVATE common ${PLATFORM_LIBS})\n-target_link_libraries (date_lut3 PRIVATE common ${PLATFORM_LIBS})\n-target_link_libraries (date_lut_default_timezone PRIVATE common ${PLATFORM_LIBS})\n-target_link_libraries (local_date_time_comparison PRIVATE common ${PLATFORM_LIBS})\n-target_link_libraries (realloc-perf PRIVATE common)\n-add_check(local_date_time_comparison)\n-\n-if(USE_GTEST)\n-    add_executable(unit_tests_libcommon gtest_json_test.cpp gtest_strong_typedef.cpp gtest_find_symbols.cpp)\n-    target_link_libraries(unit_tests_libcommon PRIVATE common ${GTEST_MAIN_LIBRARIES} ${GTEST_LIBRARIES})\n-    add_check(unit_tests_libcommon)\n-endif()\n-\n add_executable (dump_variable dump_variable.cpp)\n target_link_libraries (dump_variable PRIVATE clickhouse_common_io)\ndiff --git a/base/common/tests/allocator.cpp b/base/common/tests/allocator.cpp\ndeleted file mode 100644\nindex 03f6228e0f55..000000000000\n--- a/base/common/tests/allocator.cpp\n+++ /dev/null\n@@ -1,47 +0,0 @@\n-#include <cstdlib>\n-#include <cstring>\n-#include <vector>\n-#include <thread>\n-\n-\n-void thread_func()\n-{\n-    for (size_t i = 0; i < 100; ++i)\n-    {\n-        size_t size = 4096;\n-\n-        void * buf = malloc(size);\n-        if (!buf)\n-            abort();\n-        memset(buf, 0, size);\n-\n-        while (size < 1048576)\n-        {\n-            size_t next_size = size * 4;\n-\n-            void * new_buf = realloc(buf, next_size);\n-            if (!new_buf)\n-                abort();\n-            buf = new_buf;\n-\n-            memset(reinterpret_cast<char*>(buf) + size, 0, next_size - size);\n-            size = next_size;\n-        }\n-\n-        free(buf);\n-    }\n-}\n-\n-\n-int main(int, char **)\n-{\n-    std::vector<std::thread> threads(16);\n-    for (size_t i = 0; i < 1000; ++i)\n-    {\n-        for (auto & thread : threads)\n-            thread = std::thread(thread_func);\n-        for (auto & thread : threads)\n-            thread.join();\n-    }\n-    return 0;\n-}\ndiff --git a/base/common/tests/date_lut2.cpp b/base/common/tests/date_lut2.cpp\ndeleted file mode 100644\nindex 6dcf5e8adf2e..000000000000\n--- a/base/common/tests/date_lut2.cpp\n+++ /dev/null\n@@ -1,53 +0,0 @@\n-#include <iostream>\n-#include <cstring>\n-\n-#include <common/DateLUT.h>\n-\n-\n-static std::string toString(time_t Value)\n-{\n-    struct tm tm;\n-    char buf[96];\n-\n-    localtime_r(&Value, &tm);\n-    snprintf(buf, sizeof(buf), \"%04d-%02d-%02d %02d:%02d:%02d\",\n-             tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday, tm.tm_hour, tm.tm_min, tm.tm_sec);\n-\n-    return buf;\n-}\n-\n-static time_t orderedIdentifierToDate(unsigned value)\n-{\n-    struct tm tm;\n-\n-    memset(&tm, 0, sizeof(tm));\n-\n-    tm.tm_year = value / 10000 - 1900;\n-    tm.tm_mon = (value % 10000) / 100 - 1;\n-    tm.tm_mday = value % 100;\n-    tm.tm_isdst = -1;\n-\n-    return mktime(&tm);\n-}\n-\n-\n-void loop(time_t begin, time_t end, int step)\n-{\n-    const auto & date_lut = DateLUT::instance();\n-\n-    for (time_t t = begin; t < end; t += step)\n-        std::cout << toString(t)\n-            << \", \" << toString(date_lut.toTime(t))\n-            << \", \" << date_lut.toHour(t)\n-            << std::endl;\n-}\n-\n-\n-int main(int, char **)\n-{\n-    loop(orderedIdentifierToDate(20101031), orderedIdentifierToDate(20101101), 15 * 60);\n-    loop(orderedIdentifierToDate(20100328), orderedIdentifierToDate(20100330), 15 * 60);\n-    loop(orderedIdentifierToDate(20141020), orderedIdentifierToDate(20141106), 15 * 60);\n-\n-    return 0;\n-}\ndiff --git a/base/common/tests/date_lut3.cpp b/base/common/tests/date_lut3.cpp\ndeleted file mode 100644\nindex 411765d2b2a4..000000000000\n--- a/base/common/tests/date_lut3.cpp\n+++ /dev/null\n@@ -1,62 +0,0 @@\n-#include <iostream>\n-#include <cstring>\n-\n-#include <Poco/Exception.h>\n-\n-#include <common/DateLUT.h>\n-\n-\n-static std::string toString(time_t Value)\n-{\n-    struct tm tm;\n-    char buf[96];\n-\n-    localtime_r(&Value, &tm);\n-    snprintf(buf, sizeof(buf), \"%04d-%02d-%02d %02d:%02d:%02d\",\n-             tm.tm_year + 1900, tm.tm_mon + 1, tm.tm_mday, tm.tm_hour, tm.tm_min, tm.tm_sec);\n-\n-    return buf;\n-}\n-\n-static time_t orderedIdentifierToDate(unsigned value)\n-{\n-    struct tm tm;\n-\n-    memset(&tm, 0, sizeof(tm));\n-\n-    tm.tm_year = value / 10000 - 1900;\n-    tm.tm_mon = (value % 10000) / 100 - 1;\n-    tm.tm_mday = value % 100;\n-    tm.tm_isdst = -1;\n-\n-    return mktime(&tm);\n-}\n-\n-\n-void loop(time_t begin, time_t end, int step)\n-{\n-    const auto & date_lut = DateLUT::instance();\n-\n-    for (time_t t = begin; t < end; t += step)\n-    {\n-        time_t t2 = date_lut.makeDateTime(date_lut.toYear(t), date_lut.toMonth(t), date_lut.toDayOfMonth(t),\n-            date_lut.toHour(t), date_lut.toMinute(t), date_lut.toSecond(t));\n-\n-        std::string s1 = toString(t);\n-        std::string s2 = toString(t2);\n-\n-        std::cerr << s1 << \", \" << s2 << std::endl;\n-\n-        if (s1 != s2)\n-            throw Poco::Exception(\"Test failed.\");\n-    }\n-}\n-\n-\n-int main(int, char **)\n-{\n-    loop(orderedIdentifierToDate(20101031), orderedIdentifierToDate(20101101), 15 * 60);\n-    loop(orderedIdentifierToDate(20100328), orderedIdentifierToDate(20100330), 15 * 60);\n-\n-    return 0;\n-}\ndiff --git a/base/common/tests/date_lut_default_timezone.cpp b/base/common/tests/date_lut_default_timezone.cpp\ndeleted file mode 100644\nindex b8e5aa089310..000000000000\n--- a/base/common/tests/date_lut_default_timezone.cpp\n+++ /dev/null\n@@ -1,31 +0,0 @@\n-#include <iostream>\n-#include <common/DateLUT.h>\n-#include <Poco/Exception.h>\n-\n-int main(int, char **)\n-{\n-    try\n-    {\n-        const auto & date_lut = DateLUT::instance();\n-        std::cout << \"Detected default timezone: `\" << date_lut.getTimeZone() << \"'\" << std::endl;\n-        time_t now = time(nullptr);\n-        std::cout << \"Current time: \" << date_lut.timeToString(now)\n-                  << \", UTC: \" << DateLUT::instance(\"UTC\").timeToString(now) << std::endl;\n-    }\n-    catch (const Poco::Exception & e)\n-    {\n-        std::cerr << e.displayText() << std::endl;\n-        return 1;\n-    }\n-    catch (std::exception & e)\n-    {\n-        std::cerr << \"std::exception: \" << e.what() << std::endl;\n-        return 2;\n-    }\n-    catch (...)\n-    {\n-        std::cerr << \"Some exception\" << std::endl;\n-        return 3;\n-    }\n-    return 0;\n-}\ndiff --git a/base/common/tests/gtest_json_test.cpp b/base/common/tests/gtest_json_test.cpp\ndeleted file mode 100644\nindex 189a1a03d99b..000000000000\n--- a/base/common/tests/gtest_json_test.cpp\n+++ /dev/null\n@@ -1,656 +0,0 @@\n-#include <vector>\n-#include <string>\n-#include <exception>\n-#include <common/JSON.h>\n-\n-#include <boost/range/irange.hpp>\n-\n-using namespace std::literals::string_literals;\n-\n-#include <gtest/gtest.h>\n-\n-enum class ResultType\n-{\n-    Return,\n-    Throw\n-};\n-\n-struct GetStringTestRecord\n-{\n-    const char * input;\n-    ResultType result_type;\n-    const char * result;\n-};\n-\n-TEST(JSONSuite, SimpleTest)\n-{\n-    std::vector<GetStringTestRecord> test_data =\n-    {\n-        { R\"(\"name\")\", ResultType::Return, \"name\" },\n-        { R\"(\"\u0412\u0430\u0444\u0435\u043b\u044c\u043d\u0438\u0446\u0430 Vitek WX-1102 FL\")\", ResultType::Return, \"\u0412\u0430\u0444\u0435\u043b\u044c\u043d\u0438\u0446\u0430 Vitek WX-1102 FL\" },\n-        { R\"(\"brand\")\", ResultType::Return, \"brand\" },\n-        { R\"(\"184509\")\", ResultType::Return, \"184509\" },\n-        { R\"(\"category\")\", ResultType::Return, \"category\" },\n-        { R\"(\"\u0412\u0441\u0435 \u0434\u043b\u044f \u0434\u0435\u0442\u0435\u0439/\u0414\u0435\u0442\u0441\u043a\u0430\u044f \u0442\u0435\u0445\u043d\u0438\u043a\u0430/Vitek\")\", ResultType::Return, \"\u0412\u0441\u0435 \u0434\u043b\u044f \u0434\u0435\u0442\u0435\u0439/\u0414\u0435\u0442\u0441\u043a\u0430\u044f \u0442\u0435\u0445\u043d\u0438\u043a\u0430/Vitek\" },\n-        { R\"(\"variant\")\", ResultType::Return, \"variant\" },\n-        { R\"(\"\u0412 \u043d\u0430\u043b\u0438\u0447\u0438\u0438\")\", ResultType::Return, \"\u0412 \u043d\u0430\u043b\u0438\u0447\u0438\u0438\" },\n-        { R\"(\"price\")\", ResultType::Return, \"price\" },\n-        { R\"(\"2390.00\")\", ResultType::Return, \"2390.00\" },\n-        { R\"(\"list\")\", ResultType::Return, \"list\" },\n-        { R\"(\"\u041a\u0430\u0440\u0442\u043e\u0447\u043a\u0430\")\", ResultType::Return, \"\u041a\u0430\u0440\u0442\u043e\u0447\u043a\u0430\" },\n-        { R\"(\"position\")\", ResultType::Return, \"position\" },\n-        { R\"(\"detail\")\", ResultType::Return, \"detail\" },\n-        { R\"(\"actionField\")\", ResultType::Return, \"actionField\" },\n-        { R\"(\"list\")\", ResultType::Return, \"list\" },\n-        { R\"(\"http://www.techport.ru/q/?t=\u0432\u0430\u0444\u0435\u043b\u044c\u043d\u0438\u0446\u0430&sort=price&sdim=asc\")\", ResultType::Return, \"http://www.techport.ru/q/?t=\u0432\u0430\u0444\u0435\u043b\u044c\u043d\u0438\u0446\u0430&sort=price&sdim=asc\" },\n-        { R\"(\"action\")\", ResultType::Return, \"action\" },\n-        { R\"(\"detail\")\", ResultType::Return, \"detail\" },\n-        { R\"(\"products\")\", ResultType::Return, \"products\" },\n-        { R\"(\"name\")\", ResultType::Return, \"name\" },\n-        { R\"(\"\u0412\u0430\u0444\u0435\u043b\u044c\u043d\u0438\u0446\u0430 Vitek WX-1102 FL\")\", ResultType::Return, \"\u0412\u0430\u0444\u0435\u043b\u044c\u043d\u0438\u0446\u0430 Vitek WX-1102 FL\" },\n-        { R\"(\"id\")\", ResultType::Return, \"id\" },\n-        { R\"(\"184509\")\", ResultType::Return, \"184509\" },\n-        { R\"(\"price\")\", ResultType::Return, \"price\" },\n-        { R\"(\"2390.00\")\", ResultType::Return, \"2390.00\" },\n-        { R\"(\"brand\")\", ResultType::Return, \"brand\" },\n-        { R\"(\"Vitek\")\", ResultType::Return, \"Vitek\" },\n-        { R\"(\"category\")\", ResultType::Return, \"category\" },\n-        { R\"(\"\u0412\u0441\u0435 \u0434\u043b\u044f \u0434\u0435\u0442\u0435\u0439/\u0414\u0435\u0442\u0441\u043a\u0430\u044f \u0442\u0435\u0445\u043d\u0438\u043a\u0430/Vitek\")\", ResultType::Return, \"\u0412\u0441\u0435 \u0434\u043b\u044f \u0434\u0435\u0442\u0435\u0439/\u0414\u0435\u0442\u0441\u043a\u0430\u044f \u0442\u0435\u0445\u043d\u0438\u043a\u0430/Vitek\" },\n-        { R\"(\"variant\")\", ResultType::Return, \"variant\" },\n-        { R\"(\"\u0412 \u043d\u0430\u043b\u0438\u0447\u0438\u0438\")\", ResultType::Return, \"\u0412 \u043d\u0430\u043b\u0438\u0447\u0438\u0438\" },\n-        { R\"(\"ru\")\", ResultType::Return, \"ru\" },\n-        { R\"(\"experiments\")\", ResultType::Return, \"experiments\" },\n-        { R\"(\"lang\")\", ResultType::Return, \"lang\" },\n-        { R\"(\"ru\")\", ResultType::Return, \"ru\" },\n-        { R\"(\"los_portal\")\", ResultType::Return, \"los_portal\" },\n-        { R\"(\"los_level\")\", ResultType::Return, \"los_level\" },\n-        { R\"(\"none\")\", ResultType::Return, \"none\" },\n-        { R\"(\"isAuthorized\")\", ResultType::Return, \"isAuthorized\" },\n-        { R\"(\"isSubscriber\")\", ResultType::Return, \"isSubscriber\" },\n-        { R\"(\"postType\")\", ResultType::Return, \"postType\" },\n-        { R\"(\"\u041d\u043e\u0432\u043e\u0441\u0442\u0438\")\", ResultType::Return, \"\u041d\u043e\u0432\u043e\u0441\u0442\u0438\" },\n-        { R\"(\"experiments\")\", ResultType::Return, \"experiments\" },\n-        { R\"(\"lang\")\", ResultType::Return, \"lang\" },\n-        { R\"(\"ru\")\", ResultType::Return, \"ru\" },\n-        { R\"(\"los_portal\")\", ResultType::Return, \"los_portal\" },\n-        { R\"(\"los_level\")\", ResultType::Return, \"los_level\" },\n-        { R\"(\"none\")\", ResultType::Return, \"none\" },\n-        { R\"(\"lang\")\", ResultType::Return, \"lang\" },\n-        { R\"(\"ru\")\", ResultType::Return, \"ru\" },\n-        { R\"(\"\u042d\u043b\u0435\u043a\u0442\u0440\u043e\u043f\u043b\u0438\u0442\u0430 GEFEST \u0411\u0440\u0435\u0441\u0442 \u042d\u041f\u041d\u0414 5140-01 0001\")\", ResultType::Return, \"\u042d\u043b\u0435\u043a\u0442\u0440\u043e\u043f\u043b\u0438\u0442\u0430 GEFEST \u0411\u0440\u0435\u0441\u0442 \u042d\u041f\u041d\u0414 5140-01 0001\" },\n-        { R\"(\"price\")\", ResultType::Return, \"price\" },\n-        { R\"(\"currencyCode\")\", ResultType::Return, \"currencyCode\" },\n-        { R\"(\"RUB\")\", ResultType::Return, \"RUB\" },\n-        { R\"(\"lang\")\", ResultType::Return, \"lang\" },\n-        { R\"(\"ru\")\", ResultType::Return, \"ru\" },\n-        { R\"(\"experiments\")\", ResultType::Return, \"experiments\" },\n-        { R\"(\"lang\")\", ResultType::Return, \"lang\" },\n-        { R\"(\"ru\")\", ResultType::Return, \"ru\" },\n-        { R\"(\"los_portal\")\", ResultType::Return, \"los_portal\" },\n-        { R\"(\"los_level\")\", ResultType::Return, \"los_level\" },\n-        { R\"(\"none\")\", ResultType::Return, \"none\" },\n-        { R\"(\"trash_login\")\", ResultType::Return, \"trash_login\" },\n-        { R\"(\"novikoff\")\", ResultType::Return, \"novikoff\" },\n-        { R\"(\"trash_cat_link\")\", ResultType::Return, \"trash_cat_link\" },\n-        { R\"(\"progs\")\", ResultType::Return, \"progs\" },\n-        { R\"(\"trash_parent_link\")\", ResultType::Return, \"trash_parent_link\" },\n-        { R\"(\"content\")\", ResultType::Return, \"content\" },\n-        { R\"(\"trash_posted_parent\")\", ResultType::Return, \"trash_posted_parent\" },\n-        { R\"(\"content.01.2016\")\", ResultType::Return, \"content.01.2016\" },\n-        { R\"(\"trash_posted_cat\")\", ResultType::Return, \"trash_posted_cat\" },\n-        { R\"(\"progs.01.2016\")\", ResultType::Return, \"progs.01.2016\" },\n-        { R\"(\"trash_virus_count\")\", ResultType::Return, \"trash_virus_count\" },\n-        { R\"(\"trash_is_android\")\", ResultType::Return, \"trash_is_android\" },\n-        { R\"(\"trash_is_wp8\")\", ResultType::Return, \"trash_is_wp8\" },\n-        { R\"(\"trash_is_ios\")\", ResultType::Return, \"trash_is_ios\" },\n-        { R\"(\"trash_posted\")\", ResultType::Return, \"trash_posted\" },\n-        { R\"(\"01.2016\")\", ResultType::Return, \"01.2016\" },\n-        { R\"(\"experiments\")\", ResultType::Return, \"experiments\" },\n-        { R\"(\"lang\")\", ResultType::Return, \"lang\" },\n-        { R\"(\"ru\")\", ResultType::Return, \"ru\" },\n-        { R\"(\"los_portal\")\", ResultType::Return, \"los_portal\" },\n-        { R\"(\"los_level\")\", ResultType::Return, \"los_level\" },\n-        { R\"(\"none\")\", ResultType::Return, \"none\" },\n-        { R\"(\"merchantId\")\", ResultType::Return, \"merchantId\" },\n-        { R\"(\"13694_49246\")\", ResultType::Return, \"13694_49246\" },\n-        { R\"(\"cps-source\")\", ResultType::Return, \"cps-source\" },\n-        { R\"(\"wargaming\")\", ResultType::Return, \"wargaming\" },\n-        { R\"(\"cps_provider\")\", ResultType::Return, \"cps_provider\" },\n-        { R\"(\"default\")\", ResultType::Return, \"default\" },\n-        { R\"(\"errorReason\")\", ResultType::Return, \"errorReason\" },\n-        { R\"(\"no errors\")\", ResultType::Return, \"no errors\" },\n-        { R\"(\"scid\")\", ResultType::Return, \"scid\" },\n-        { R\"(\"isAuthPayment\")\", ResultType::Return, \"isAuthPayment\" },\n-        { R\"(\"lang\")\", ResultType::Return, \"lang\" },\n-        { R\"(\"ru\")\", ResultType::Return, \"ru\" },\n-        { R\"(\"rubric\")\", ResultType::Return, \"rubric\" },\n-        { R\"(\"\")\", ResultType::Return, \"\" },\n-        { R\"(\"rubric\")\", ResultType::Return, \"rubric\" },\n-        { R\"(\"\u041c\u0438\u0440\")\", ResultType::Return, \"\u041c\u0438\u0440\" },\n-        { R\"(\"lang\")\", ResultType::Return, \"lang\" },\n-        { R\"(\"ru\")\", ResultType::Return, \"ru\" },\n-        { R\"(\"experiments\")\", ResultType::Return, \"experiments\" },\n-        { R\"(\"lang\")\", ResultType::Return, \"lang\" },\n-        { R\"(\"ru\")\", ResultType::Return, \"ru\" },\n-        { R\"(\"los_portal\")\", ResultType::Return, \"los_portal\" },\n-        { R\"(\"los_level\")\", ResultType::Return, \"los_level\" },\n-        { R\"(\"none\")\", ResultType::Return, \"none\" },\n-        { R\"(\"lang\")\", ResultType::Return, \"lang\" },\n-        { R\"(\"ru\")\", ResultType::Return, \"ru\" },\n-        { R\"(\"__ym\")\", ResultType::Return, \"__ym\" },\n-        { R\"(\"ecommerce\")\", ResultType::Return, \"ecommerce\" },\n-        { R\"(\"impressions\")\", ResultType::Return, \"impressions\" },\n-        { R\"(\"id\")\", ResultType::Return, \"id\" },\n-        { R\"(\"863813\")\", ResultType::Return, \"863813\" },\n-        { R\"(\"name\")\", ResultType::Return, \"name\" },\n-        { R\"(\"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Happy, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\")\", ResultType::Return, \"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Happy, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\" },\n-        { R\"(\"category\")\", ResultType::Return, \"category\" },\n-        { R\"(\"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\")\", ResultType::Return, \"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\" },\n-        { R\"(\"variant\")\", ResultType::Return, \"variant\" },\n-        { R\"(\"\")\", ResultType::Return, \"\" },\n-        { R\"(\"price\")\", ResultType::Return, \"price\" },\n-        { R\"(\"390.00\")\", ResultType::Return, \"390.00\" },\n-        { R\"(\"list\")\", ResultType::Return, \"list\" },\n-        { R\"(\"/retailrocket/\")\", ResultType::Return, \"/retailrocket/\" },\n-        { R\"(\"position\")\", ResultType::Return, \"position\" },\n-        { R\"(\"brand\")\", ResultType::Return, \"brand\" },\n-        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\", ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\" },\n-        { R\"(\"id\")\", ResultType::Return, \"id\" },\n-        { R\"(\"863839\")\", ResultType::Return, \"863839\" },\n-        { R\"(\"name\")\", ResultType::Return, \"name\" },\n-        { R\"(\"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Pretty kitten, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\")\", ResultType::Return, \"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Pretty kitten, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\" },\n-        { R\"(\"category\")\", ResultType::Return, \"category\" },\n-        { R\"(\"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\")\", ResultType::Return, \"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\" },\n-        { R\"(\"variant\")\", ResultType::Return, \"variant\" },\n-        { R\"(\"\")\", ResultType::Return, \"\" },\n-        { R\"(\"price\")\", ResultType::Return, \"price\" },\n-        { R\"(\"390.00\")\", ResultType::Return, \"390.00\" },\n-        { R\"(\"list\")\", ResultType::Return, \"list\" },\n-        { R\"(\"/retailrocket/\")\", ResultType::Return, \"/retailrocket/\" },\n-        { R\"(\"position\")\", ResultType::Return, \"position\" },\n-        { R\"(\"brand\")\", ResultType::Return, \"brand\" },\n-        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\", ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\" },\n-        { R\"(\"id\")\", ResultType::Return, \"id\" },\n-        { R\"(\"863847\")\", ResultType::Return, \"863847\" },\n-        { R\"(\"name\")\", ResultType::Return, \"name\" },\n-        { R\"(\"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Little tiger, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\")\", ResultType::Return, \"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Little tiger, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\" },\n-        { R\"(\"category\")\", ResultType::Return, \"category\" },\n-        { R\"(\"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\")\", ResultType::Return, \"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\" },\n-        { R\"(\"variant\")\", ResultType::Return, \"variant\" },\n-        { R\"(\"\")\", ResultType::Return, \"\" },\n-        { R\"(\"price\")\", ResultType::Return, \"price\" },\n-        { R\"(\"390.00\")\", ResultType::Return, \"390.00\" },\n-        { R\"(\"list\")\", ResultType::Return, \"list\" },\n-        { R\"(\"/retailrocket/\")\", ResultType::Return, \"/retailrocket/\" },\n-        { R\"(\"position\")\", ResultType::Return, \"position\" },\n-        { R\"(\"brand\")\", ResultType::Return, \"brand\" },\n-        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\", ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\" },\n-        { R\"(\"id\")\", ResultType::Return, \"id\" },\n-        { R\"(\"911480\")\", ResultType::Return, \"911480\" },\n-        { R\"(\"name\")\", ResultType::Return, \"name\" },\n-        { R\"(\"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Puppy, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\")\", ResultType::Return, \"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Puppy, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\" },\n-        { R\"(\"category\")\", ResultType::Return, \"category\" },\n-        { R\"(\"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\")\", ResultType::Return, \"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\" },\n-        { R\"(\"variant\")\", ResultType::Return, \"variant\" },\n-        { R\"(\"\")\", ResultType::Return, \"\" },\n-        { R\"(\"price\")\", ResultType::Return, \"price\" },\n-        { R\"(\"390.00\")\", ResultType::Return, \"390.00\" },\n-        { R\"(\"list\")\", ResultType::Return, \"list\" },\n-        { R\"(\"/retailrocket/\")\", ResultType::Return, \"/retailrocket/\" },\n-        { R\"(\"position\")\", ResultType::Return, \"position\" },\n-        { R\"(\"brand\")\", ResultType::Return, \"brand\" },\n-        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\", ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\" },\n-        { R\"(\"id\")\", ResultType::Return, \"id\" },\n-        { R\"(\"911484\")\", ResultType::Return, \"911484\" },\n-        { R\"(\"name\")\", ResultType::Return, \"name\" },\n-        { R\"(\"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Little bears, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\")\", ResultType::Return, \"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Little bears, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\" },\n-        { R\"(\"category\")\", ResultType::Return, \"category\" },\n-        { R\"(\"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\")\", ResultType::Return, \"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\" },\n-        { R\"(\"variant\")\", ResultType::Return, \"variant\" },\n-        { R\"(\"\")\", ResultType::Return, \"\" },\n-        { R\"(\"price\")\", ResultType::Return, \"price\" },\n-        { R\"(\"390.00\")\", ResultType::Return, \"390.00\" },\n-        { R\"(\"list\")\", ResultType::Return, \"list\" },\n-        { R\"(\"/retailrocket/\")\", ResultType::Return, \"/retailrocket/\" },\n-        { R\"(\"position\")\", ResultType::Return, \"position\" },\n-        { R\"(\"brand\")\", ResultType::Return, \"brand\" },\n-        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\", ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\" },\n-        { R\"(\"id\")\", ResultType::Return, \"id\" },\n-        { R\"(\"911489\")\", ResultType::Return, \"911489\" },\n-        { R\"(\"name\")\", ResultType::Return, \"name\" },\n-        { R\"(\"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Dolphin, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 2-4 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\")\", ResultType::Return, \"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Dolphin, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 2-4 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\" },\n-        { R\"(\"category\")\", ResultType::Return, \"category\" },\n-        { R\"(\"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\")\", ResultType::Return, \"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\" },\n-        { R\"(\"variant\")\", ResultType::Return, \"variant\" },\n-        { R\"(\"\")\", ResultType::Return, \"\" },\n-        { R\"(\"price\")\", ResultType::Return, \"price\" },\n-        { R\"(\"390.00\")\", ResultType::Return, \"390.00\" },\n-        { R\"(\"list\")\", ResultType::Return, \"list\" },\n-        { R\"(\"/retailrocket/\")\", ResultType::Return, \"/retailrocket/\" },\n-        { R\"(\"position\")\", ResultType::Return, \"position\" },\n-        { R\"(\"brand\")\", ResultType::Return, \"brand\" },\n-        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\", ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\" },\n-        { R\"(\"id\")\", ResultType::Return, \"id\" },\n-        { R\"(\"911496\")\", ResultType::Return, \"911496\" },\n-        { R\"(\"name\")\", ResultType::Return, \"name\" },\n-        { R\"(\"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Pretty, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\")\", ResultType::Return, \"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Pretty, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\" },\n-        { R\"(\"category\")\", ResultType::Return, \"category\" },\n-        { R\"(\"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\")\", ResultType::Return, \"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\" },\n-        { R\"(\"variant\")\", ResultType::Return, \"variant\" },\n-        { R\"(\"\")\", ResultType::Return, \"\" },\n-        { R\"(\"price\")\", ResultType::Return, \"price\" },\n-        { R\"(\"390.00\")\", ResultType::Return, \"390.00\" },\n-        { R\"(\"list\")\", ResultType::Return, \"list\" },\n-        { R\"(\"/retailrocket/\")\", ResultType::Return, \"/retailrocket/\" },\n-        { R\"(\"position\")\", ResultType::Return, \"position\" },\n-        { R\"(\"brand\")\", ResultType::Return, \"brand\" },\n-        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\", ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\" },\n-        { R\"(\"id\")\", ResultType::Return, \"id\" },\n-        { R\"(\"911504\")\", ResultType::Return, \"911504\" },\n-        { R\"(\"name\")\", ResultType::Return, \"name\" },\n-        { R\"(\"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Fairytale, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\")\", ResultType::Return, \"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Fairytale, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\" },\n-        { R\"(\"category\")\", ResultType::Return, \"category\" },\n-        { R\"(\"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\")\", ResultType::Return, \"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\" },\n-        { R\"(\"variant\")\", ResultType::Return, \"variant\" },\n-        { R\"(\"\")\", ResultType::Return, \"\" },\n-        { R\"(\"price\")\", ResultType::Return, \"price\" },\n-        { R\"(\"390.00\")\", ResultType::Return, \"390.00\" },\n-        { R\"(\"list\")\", ResultType::Return, \"list\" },\n-        { R\"(\"/retailrocket/\")\", ResultType::Return, \"/retailrocket/\" },\n-        { R\"(\"position\")\", ResultType::Return, \"position\" },\n-        { R\"(\"brand\")\", ResultType::Return, \"brand\" },\n-        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\", ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\" },\n-        { R\"(\"id\")\", ResultType::Return, \"id\" },\n-        { R\"(\"911508\")\", ResultType::Return, \"911508\" },\n-        { R\"(\"name\")\", ResultType::Return, \"name\" },\n-        { R\"(\"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Kittens, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\")\", ResultType::Return, \"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Kittens, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\" },\n-        { R\"(\"category\")\", ResultType::Return, \"category\" },\n-        { R\"(\"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\")\", ResultType::Return, \"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\" },\n-        { R\"(\"variant\")\", ResultType::Return, \"variant\" },\n-        { R\"(\"\")\", ResultType::Return, \"\" },\n-        { R\"(\"price\")\", ResultType::Return, \"price\" },\n-        { R\"(\"390.00\")\", ResultType::Return, \"390.00\" },\n-        { R\"(\"list\")\", ResultType::Return, \"list\" },\n-        { R\"(\"/retailrocket/\")\", ResultType::Return, \"/retailrocket/\" },\n-        { R\"(\"position\")\", ResultType::Return, \"position\" },\n-        { R\"(\"brand\")\", ResultType::Return, \"brand\" },\n-        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\", ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\" },\n-        { R\"(\"id\")\", ResultType::Return, \"id\" },\n-        { R\"(\"911512\")\", ResultType::Return, \"911512\" },\n-        { R\"(\"name\")\", ResultType::Return, \"name\" },\n-        { R\"(\"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Sunshine, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\")\", ResultType::Return, \"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Sunshine, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\" },\n-        { R\"(\"category\")\", ResultType::Return, \"category\" },\n-        { R\"(\"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\")\", ResultType::Return, \"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\" },\n-        { R\"(\"variant\")\", ResultType::Return, \"variant\" },\n-        { R\"(\"\")\", ResultType::Return, \"\" },\n-        { R\"(\"price\")\", ResultType::Return, \"price\" },\n-        { R\"(\"390.00\")\", ResultType::Return, \"390.00\" },\n-        { R\"(\"list\")\", ResultType::Return, \"list\" },\n-        { R\"(\"/retailrocket/\")\", ResultType::Return, \"/retailrocket/\" },\n-        { R\"(\"position\")\", ResultType::Return, \"position\" },\n-        { R\"(\"brand\")\", ResultType::Return, \"brand\" },\n-        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\", ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\" },\n-        { R\"(\"id\")\", ResultType::Return, \"id\" },\n-        { R\"(\"911516\")\", ResultType::Return, \"911516\" },\n-        { R\"(\"name\")\", ResultType::Return, \"name\" },\n-        { R\"(\"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Dog in bag, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\")\", ResultType::Return, \"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Dog in bag, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\" },\n-        { R\"(\"category\")\", ResultType::Return, \"category\" },\n-        { R\"(\"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\")\", ResultType::Return, \"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\" },\n-        { R\"(\"variant\")\", ResultType::Return, \"variant\" },\n-        { R\"(\"\")\", ResultType::Return, \"\" },\n-        { R\"(\"price\")\", ResultType::Return, \"price\" },\n-        { R\"(\"390.00\")\", ResultType::Return, \"390.00\" },\n-        { R\"(\"list\")\", ResultType::Return, \"list\" },\n-        { R\"(\"/retailrocket/\")\", ResultType::Return, \"/retailrocket/\" },\n-        { R\"(\"position\")\", ResultType::Return, \"position\" },\n-        { R\"(\"brand\")\", ResultType::Return, \"brand\" },\n-        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\", ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\" },\n-        { R\"(\"id\")\", ResultType::Return, \"id\" },\n-        { R\"(\"911520\")\", ResultType::Return, \"911520\" },\n-        { R\"(\"name\")\", ResultType::Return, \"name\" },\n-        { R\"(\"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Cute puppy, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\")\", ResultType::Return, \"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Cute puppy, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\" },\n-        { R\"(\"category\")\", ResultType::Return, \"category\" },\n-        { R\"(\"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\")\", ResultType::Return, \"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\" },\n-        { R\"(\"variant\")\", ResultType::Return, \"variant\" },\n-        { R\"(\"\")\", ResultType::Return, \"\" },\n-        { R\"(\"price\")\", ResultType::Return, \"price\" },\n-        { R\"(\"390.00\")\", ResultType::Return, \"390.00\" },\n-        { R\"(\"list\")\", ResultType::Return, \"list\" },\n-        { R\"(\"/retailrocket/\")\", ResultType::Return, \"/retailrocket/\" },\n-        { R\"(\"position\")\", ResultType::Return, \"position\" },\n-        { R\"(\"brand\")\", ResultType::Return, \"brand\" },\n-        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\", ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\" },\n-        { R\"(\"id\")\", ResultType::Return, \"id\" },\n-        { R\"(\"911524\")\", ResultType::Return, \"911524\" },\n-        { R\"(\"name\")\", ResultType::Return, \"name\" },\n-        { R\"(\"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Rabbit, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\")\", ResultType::Return, \"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Rabbit, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\" },\n-        { R\"(\"category\")\", ResultType::Return, \"category\" },\n-        { R\"(\"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\")\", ResultType::Return, \"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\" },\n-        { R\"(\"variant\")\", ResultType::Return, \"variant\" },\n-        { R\"(\"\")\", ResultType::Return, \"\" },\n-        { R\"(\"price\")\", ResultType::Return, \"price\" },\n-        { R\"(\"390.00\")\", ResultType::Return, \"390.00\" },\n-        { R\"(\"list\")\", ResultType::Return, \"list\" },\n-        { R\"(\"/retailrocket/\")\", ResultType::Return, \"/retailrocket/\" },\n-        { R\"(\"position\")\", ResultType::Return, \"position\" },\n-        { R\"(\"brand\")\", ResultType::Return, \"brand\" },\n-        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\", ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\" },\n-        { R\"(\"id\")\", ResultType::Return, \"id\" },\n-        { R\"(\"911528\")\", ResultType::Return, \"911528\" },\n-        { R\"(\"name\")\", ResultType::Return, \"name\" },\n-        { R\"(\"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Turtle, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\")\", ResultType::Return, \"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Turtle, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\" },\n-        { R\"(\"category\")\", ResultType::Return, \"category\" },\n-        { R\"(\"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\")\", ResultType::Return, \"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\" },\n-        { R\"(\"variant\")\", ResultType::Return, \"variant\" },\n-        { R\"(\"\")\", ResultType::Return, \"\" },\n-        { R\"(\"price\")\", ResultType::Return, \"price\" },\n-        { R\"(\"390.00\")\", ResultType::Return, \"390.00\" },\n-        { R\"(\"list\")\", ResultType::Return, \"list\" },\n-        { R\"(\"/retailrocket/\")\", ResultType::Return, \"/retailrocket/\" },\n-        { R\"(\"position\")\", ResultType::Return, \"position\" },\n-        { R\"(\"brand\")\", ResultType::Return, \"brand\" },\n-        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\", ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\" },\n-        { R\"(\"id\")\", ResultType::Return, \"id\" },\n-        { R\"(\"888616\")\", ResultType::Return, \"888616\" },\n-        { R\"(\"name\")\", ResultType::Return, \"name\" },\n-        { \"\\\"3\u0414 \u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u043c\u0443\u0436\u0441\u043a\u0430\u044f \\\\\\\"Collorista\\\\\\\" \u0421\u0432\u0435\u0442\u043b\u043e\u0435 \u0437\u0430\u0432\u0442\u0440\u0430 \u0440-\u0440 XL(52-54), 100% \u0445\u043b\u043e\u043f\u043e\u043a, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\\\"\", ResultType::Return, \"3\u0414 \u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u043c\u0443\u0436\u0441\u043a\u0430\u044f \\\"Collorista\\\" \u0421\u0432\u0435\u0442\u043b\u043e\u0435 \u0437\u0430\u0432\u0442\u0440\u0430 \u0440-\u0440 XL(52-54), 100% \u0445\u043b\u043e\u043f\u043e\u043a, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\" },\n-        { R\"(\"category\")\", ResultType::Return, \"category\" },\n-        { R\"(\"/\u041e\u0434\u0435\u0436\u0434\u0430 \u0438 \u043e\u0431\u0443\u0432\u044c/\u041c\u0443\u0436\u0441\u043a\u0430\u044f \u043e\u0434\u0435\u0436\u0434\u0430/\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0438/\")\", ResultType::Return, \"/\u041e\u0434\u0435\u0436\u0434\u0430 \u0438 \u043e\u0431\u0443\u0432\u044c/\u041c\u0443\u0436\u0441\u043a\u0430\u044f \u043e\u0434\u0435\u0436\u0434\u0430/\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0438/\" },\n-        { R\"(\"variant\")\", ResultType::Return, \"variant\" },\n-        { R\"(\"\")\", ResultType::Return, \"\" },\n-        { R\"(\"price\")\", ResultType::Return, \"price\" },\n-        { R\"(\"406.60\")\", ResultType::Return, \"406.60\" },\n-        { R\"(\"list\")\", ResultType::Return, \"list\" },\n-        { R\"(\"/retailrocket/\")\", ResultType::Return, \"/retailrocket/\" },\n-        { R\"(\"position\")\", ResultType::Return, \"position\" },\n-        { R\"(\"brand\")\", ResultType::Return, \"brand\" },\n-        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\", ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\" },\n-        { R\"(\"id\")\", ResultType::Return, \"id\" },\n-        { R\"(\"913361\")\", ResultType::Return, \"913361\" },\n-        { R\"(\"name\")\", ResultType::Return, \"name\" },\n-        { R\"(\"3\u0414 \u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f World \u0440-\u0440 8-10, 100% \u0445\u043b\u043e\u043f\u043e\u043a, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\")\", ResultType::Return, \"3\u0414 \u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f World \u0440-\u0440 8-10, 100% \u0445\u043b\u043e\u043f\u043e\u043a, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\" },\n-        { R\"(\"category\")\", ResultType::Return, \"category\" },\n-        { R\"(\"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\")\", ResultType::Return, \"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\" },\n-        { R\"(\"variant\")\", ResultType::Return, \"variant\" },\n-        { R\"(\"\")\", ResultType::Return, \"\" },\n-        { R\"(\"price\")\", ResultType::Return, \"price\" },\n-        { R\"(\"470.00\")\", ResultType::Return, \"470.00\" },\n-        { R\"(\"list\")\", ResultType::Return, \"list\" },\n-        { R\"(\"/retailrocket/\")\", ResultType::Return, \"/retailrocket/\" },\n-        { R\"(\"position\")\", ResultType::Return, \"position\" },\n-        { R\"(\"brand\")\", ResultType::Return, \"brand\" },\n-        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\", ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\" },\n-        { R\"(\"id\")\", ResultType::Return, \"id\" },\n-        { R\"(\"913364\")\", ResultType::Return, \"913364\" },\n-        { R\"(\"name\")\", ResultType::Return, \"name\" },\n-        { R\"(\"3\u0414 \u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f Force \u0440-\u0440 8-10, 100% \u0445\u043b\u043e\u043f\u043e\u043a, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\")\", ResultType::Return, \"3\u0414 \u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f Force \u0440-\u0440 8-10, 100% \u0445\u043b\u043e\u043f\u043e\u043a, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\" },\n-        { R\"(\"category\")\", ResultType::Return, \"category\" },\n-        { R\"(\"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\")\", ResultType::Return, \"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\" },\n-        { R\"(\"variant\")\", ResultType::Return, \"variant\" },\n-        { R\"(\"\")\", ResultType::Return, \"\" },\n-        { R\"(\"price\")\", ResultType::Return, \"price\" },\n-        { R\"(\"470.00\")\", ResultType::Return, \"470.00\" },\n-        { R\"(\"list\")\", ResultType::Return, \"list\" },\n-        { R\"(\"/retailrocket/\")\", ResultType::Return, \"/retailrocket/\" },\n-        { R\"(\"position\")\", ResultType::Return, \"position\" },\n-        { R\"(\"brand\")\", ResultType::Return, \"brand\" },\n-        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\", ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\" },\n-        { R\"(\"id\")\", ResultType::Return, \"id\" },\n-        { R\"(\"913367\")\", ResultType::Return, \"913367\" },\n-        { R\"(\"name\")\", ResultType::Return, \"name\" },\n-        { R\"(\"3\u0414 \u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f Winter tale \u0440-\u0440 8-10, 100% \u0445\u043b\u043e\u043f\u043e\u043a, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\")\", ResultType::Return, \"3\u0414 \u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f Winter tale \u0440-\u0440 8-10, 100% \u0445\u043b\u043e\u043f\u043e\u043a, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\" },\n-        { R\"(\"category\")\", ResultType::Return, \"category\" },\n-        { R\"(\"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\")\", ResultType::Return, \"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\" },\n-        { R\"(\"variant\")\", ResultType::Return, \"variant\" },\n-        { R\"(\"\")\", ResultType::Return, \"\" },\n-        { R\"(\"price\")\", ResultType::Return, \"price\" },\n-        { R\"(\"470.00\")\", ResultType::Return, \"470.00\" },\n-        { R\"(\"list\")\", ResultType::Return, \"list\" },\n-        { R\"(\"/retailrocket/\")\", ResultType::Return, \"/retailrocket/\" },\n-        { R\"(\"position\")\", ResultType::Return, \"position\" },\n-        { R\"(\"brand\")\", ResultType::Return, \"brand\" },\n-        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\", ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\" },\n-        { R\"(\"id\")\", ResultType::Return, \"id\" },\n-        { R\"(\"913385\")\", ResultType::Return, \"913385\" },\n-        { R\"(\"name\")\", ResultType::Return, \"name\" },\n-        { R\"(\"3\u0414 \u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f Moonshine \u0440-\u0440 8-10, 100% \u0445\u043b\u043e\u043f\u043e\u043a, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\")\", ResultType::Return, \"3\u0414 \u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f Moonshine \u0440-\u0440 8-10, 100% \u0445\u043b\u043e\u043f\u043e\u043a, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\" },\n-        { R\"(\"category\")\", ResultType::Return, \"category\" },\n-        { R\"(\"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\")\", ResultType::Return, \"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\" },\n-        { R\"(\"variant\")\", ResultType::Return, \"variant\" },\n-        { R\"(\"\")\", ResultType::Return, \"\" },\n-        { R\"(\"price\")\", ResultType::Return, \"price\" },\n-        { R\"(\"470.00\")\", ResultType::Return, \"470.00\" },\n-        { R\"(\"list\")\", ResultType::Return, \"list\" },\n-        { R\"(\"/retailrocket/\")\", ResultType::Return, \"/retailrocket/\" },\n-        { R\"(\"position\")\", ResultType::Return, \"position\" },\n-        { R\"(\"brand\")\", ResultType::Return, \"brand\" },\n-        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\", ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\" },\n-        { R\"(\"id\")\", ResultType::Return, \"id\" },\n-        { R\"(\"913391\")\", ResultType::Return, \"913391\" },\n-        { R\"(\"name\")\", ResultType::Return, \"name\" },\n-        { R\"(\"3\u0414 \u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f Shaman \u0440-\u0440 8-10, 100% \u0445\u043b\u043e\u043f\u043e\u043a, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\")\", ResultType::Return, \"3\u0414 \u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f Shaman \u0440-\u0440 8-10, 100% \u0445\u043b\u043e\u043f\u043e\u043a, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\" },\n-        { R\"(\"category\")\", ResultType::Return, \"category\" },\n-        { R\"(\"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\")\", ResultType::Return, \"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\" },\n-        { R\"(\"variant\")\", ResultType::Return, \"variant\" },\n-        { R\"(\"\")\", ResultType::Return, \"\" },\n-        { R\"(\"price\")\", ResultType::Return, \"price\" },\n-        { R\"(\"470.00\")\", ResultType::Return, \"470.00\" },\n-        { R\"(\"list\")\", ResultType::Return, \"list\" },\n-        { R\"(\"/retailrocket/\")\", ResultType::Return, \"/retailrocket/\" },\n-        { R\"(\"position\")\", ResultType::Return, \"position\" },\n-        { R\"(\"brand\")\", ResultType::Return, \"brand\" },\n-        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\", ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\" },\n-        { R\"(\"usertype\")\", ResultType::Return, \"usertype\" },\n-        { R\"(\"visitor\")\", ResultType::Return, \"visitor\" },\n-        { R\"(\"lang\")\", ResultType::Return, \"lang\" },\n-        { R\"(\"ru\")\", ResultType::Return, \"ru\" },\n-        { R\"(\"__ym\")\", ResultType::Return, \"__ym\" },\n-        { R\"(\"ecommerce\")\", ResultType::Return, \"ecommerce\" },\n-        { R\"(\"impressions\")\", ResultType::Return, \"impressions\" },\n-        { R\"(\"experiments\")\", ResultType::Return, \"experiments\" },\n-        { R\"(\"lang\")\", ResultType::Return, \"lang\" },\n-        { R\"(\"ru\")\", ResultType::Return, \"ru\" },\n-        { R\"(\"los_portal\")\", ResultType::Return, \"los_portal\" },\n-        { R\"(\"los_level\")\", ResultType::Return, \"los_level\" },\n-        { R\"(\"none\")\", ResultType::Return, \"none\" },\n-        { R\"(\"experiments\")\", ResultType::Return, \"experiments\" },\n-        { R\"(\"lang\")\", ResultType::Return, \"lang\" },\n-        { R\"(\"ru\")\", ResultType::Return, \"ru\" },\n-        { R\"(\"los_portal\")\", ResultType::Return, \"los_portal\" },\n-        { R\"(\"los_level\")\", ResultType::Return, \"los_level\" },\n-        { R\"(\"none\")\", ResultType::Return, \"none\" },\n-        { R\"(\"experiments\")\", ResultType::Return, \"experiments\" },\n-        { R\"(\"lang\")\", ResultType::Return, \"lang\" },\n-        { R\"(\"ru\")\", ResultType::Return, \"ru\" },\n-        { R\"(\"los_portal\")\", ResultType::Return, \"los_portal\" },\n-        { R\"(\"los_level\")\", ResultType::Return, \"los_level\" },\n-        { R\"(\"none\")\", ResultType::Return, \"none\" },\n-        { R\"(\"experiments\")\", ResultType::Return, \"experiments\" },\n-        { R\"(\"lang\")\", ResultType::Return, \"lang\" },\n-        { R\"(\"ru\")\", ResultType::Return, \"ru\" },\n-        { R\"(\"los_portal\")\", ResultType::Return, \"los_portal\" },\n-        { R\"(\"los_level\")\", ResultType::Return, \"los_level\" },\n-        { R\"(\"none\")\", ResultType::Return, \"none\" },\n-        { R\"(\"experiments\")\", ResultType::Return, \"experiments\" },\n-        { R\"(\"lang\")\", ResultType::Return, \"lang\" },\n-        { R\"(\"ru\")\", ResultType::Return, \"ru\" },\n-        { R\"(\"los_portal\")\", ResultType::Return, \"los_portal\" },\n-        { R\"(\"los_level\")\", ResultType::Return, \"los_level\" },\n-        { R\"(\"none\")\", ResultType::Return, \"none\" },\n-        { R\"(\"__ym\")\", ResultType::Return, \"__ym\" },\n-        { R\"(\"ecommerce\")\", ResultType::Return, \"ecommerce\" },\n-        { R\"(\"currencyCode\")\", ResultType::Return, \"currencyCode\" },\n-        { R\"(\"RUR\")\", ResultType::Return, \"RUR\" },\n-        { R\"(\"impressions\")\", ResultType::Return, \"impressions\" },\n-        { R\"(\"name\")\", ResultType::Return, \"name\" },\n-        { R\"(\"\u0427\u0430\u0439\u043d\u0438\u043a \u044d\u043b\u0435\u043a\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0439 Mystery MEK-1627, \u0431\u0435\u043b\u044b\u0439\")\", ResultType::Return, \"\u0427\u0430\u0439\u043d\u0438\u043a \u044d\u043b\u0435\u043a\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0439 Mystery MEK-1627, \u0431\u0435\u043b\u044b\u0439\" },\n-        { R\"(\"brand\")\", ResultType::Return, \"brand\" },\n-        { R\"(\"Mystery\")\", ResultType::Return, \"Mystery\" },\n-        { R\"(\"id\")\", ResultType::Return, \"id\" },\n-        { R\"(\"187180\")\", ResultType::Return, \"187180\" },\n-        { R\"(\"category\")\", ResultType::Return, \"category\" },\n-        { R\"(\"\u041c\u0435\u043b\u043a\u0430\u044f \u0431\u044b\u0442\u043e\u0432\u0430\u044f \u0442\u0435\u0445\u043d\u0438\u043a\u0430/\u041c\u0435\u043b\u043a\u0438\u0435 \u043a\u0443\u0445\u043e\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0431\u043e\u0440\u044b/\u0427\u0430\u0439\u043d\u0438\u043a\u0438 \u044d\u043b\u0435\u043a\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0435/Mystery\")\", ResultType::Return, \"\u041c\u0435\u043b\u043a\u0430\u044f \u0431\u044b\u0442\u043e\u0432\u0430\u044f \u0442\u0435\u0445\u043d\u0438\u043a\u0430/\u041c\u0435\u043b\u043a\u0438\u0435 \u043a\u0443\u0445\u043e\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0431\u043e\u0440\u044b/\u0427\u0430\u0439\u043d\u0438\u043a\u0438 \u044d\u043b\u0435\u043a\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0435/Mystery\" },\n-        { R\"(\"variant\")\", ResultType::Return, \"variant\" },\n-        { R\"(\"\u0412 \u043d\u0430\u043b\u0438\u0447\u0438\u0438\")\", ResultType::Return, \"\u0412 \u043d\u0430\u043b\u0438\u0447\u0438\u0438\" },\n-        { R\"(\"price\")\", ResultType::Return, \"price\" },\n-        { R\"(\"1630.00\")\", ResultType::Return, \"1630.00\" },\n-        { R\"(\"list\")\", ResultType::Return, \"list\" },\n-        { R\"(\"\u041a\u0430\u0440\u0442\u043e\u0447\u043a\u0430\")\", ResultType::Return, \"\u041a\u0430\u0440\u0442\u043e\u0447\u043a\u0430\" },\n-        { R\"(\"position\")\", ResultType::Return, \"position\" },\n-        { R\"(\"detail\")\", ResultType::Return, \"detail\" },\n-        { R\"(\"actionField\")\", ResultType::Return, \"actionField\" },\n-        { R\"(\"list\")\", ResultType::Return, \"list\" },\n-        { \"\\0\\\"\", ResultType::Throw, \"JSON: expected \\\", got \\0\" },\n-        { \"\\\"/igrushki/konstruktory\\0\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/1290414/komplekt-zhenskiy-dzhemper-plusbryuki-m-254-09-malina-plustemno-siniy-\\0a\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/\u0422\u0432\u043e\u0440\u0447\u0435\u0441\u0442\u0432\u043e/\u0420\u0438\u0441\u043e\u0432\u0430\u043d\u0438\u0435/\u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0438 \u043a\u0440\u0430\\0a\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\u0421\u0442\u0440\u043e\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e \u0438 \u0440\u0435\u043c\u043e\u043d\u0442/\u0421\u0438\u043b\u043e\u0432\u0430\u044f \u0442\u0435\u0445\u043d\u0438\u043a\u0430/\u0417\u0430\u0440\u044f\u0434\u043d\u044b\u0435 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0445 \u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u043e\u0432/\u041f\u0443\u0441\u043a\u043e-\u0437\u0430\u0440\u044f\u0434\u043d\u044b\u0435 \u0443\u0441\u0442\u0440\\xD0\\0a\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\u0421\u0442\u0440\u043e\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e \u0438 \u0440\u0435\u043c\u043e\u043d\u0442/\u0421\u0438\u043b\u043e\u0432\u0430\u044f \u0442\u0435\u0445\u043d\u0438\u043a\u0430/\u0417\u0430\u0440\u044f\u0434\u043d\u044b\u0435 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\\xD0\\0t\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\u0421\u0442\u0440\u043e\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e \u0438 \u0440\u0435\u043c\u043e\u043d\u0442/\u0421\u0438\u043b\u043e\u0432\u0430\u044f \u0442\u0435\u0445\u043d\u0438\u043a\u0430/\u0417\u0430\u0440\u044f\u0434\u043d\u044b\u0435 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c\\0k\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\0t\", ResultType::Throw, \"JSON: expected \\\", got \\0\" },\n-        { \"\\\"/\u0425\u043e\u0437\u0442\u043e\u0432\u0430\u0440\u044b/\u0425\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0432\u0435\u0449\u0435\u0439 \u0438 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\\xD1\\0t\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/\u0425\u043e\u0437\u0442\u043e\u0432\u0430\u0440\u044b/\u0422\u043e\u0432\u0430\u0440\u044b \u0434\u043b\u044f \u0441\u0442\u0438\u0440\\0a\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"li\\0a\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/734859/samolet-radioupravlyaemyy-istrebitel-rabotaet-o\\0k\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/kosmetika-i-parfyum/parfyumeriya/mu\\0t\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/ko\\0\\x04\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\", ResultType::Throw, \"JSON: begin >= end.\" },\n-        { \"\\\"/stroitelstvo-i-remont/stroit\\0t\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/stroitelstvo-i-remont/stroitelnyy-instrument/av\\0k\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/s\\0a\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/\u0421\u0442\u0440\u043e\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e \u0438 \u0440\u0435\u043c\u043e\u043d\u0442/\u0421\u0442\u0440\u043e\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442/\u0418\u0437\u043c\\0e\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/avto/soputstvuy\\0l\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/str\\0\\xD0\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\u041e\u0442\u0432\u0435\u0440\u0442\u043a\u0430 2 \u0432 1 \\\\\\\"TUNDRA basic\\\\\\\" 5\u044575 \u043c\u043c (+,-) \\0\\xFF\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/stroitelstvo-i-remont/stroitelnyy-instrument/avtoinstrumen\\0\\0\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\u041c\u0435\u043b\u043a\u0430\u044f \u0431\u044b\u0442\u043e\u0432\u0430\u044f \u0442\u0435\u0445\u043d\u0438\u043a\u0430/\u041c\u0435\u043b\u043a\u0438\\xD0\\0\\0\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\u041f\u0440\u044f\u0436\u0430 \\\\\\\"\u0411\u0430\u043c\u0431\u0443\u043a \u0441\u0442\u0440\u0435\u0439\u0447\\\\0\\0\\0\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\u041a\u0430\u0440\u0430\u043d\u0434\u0430\u0448 \u0447\u0451\u0440\u043d\u043e\u0433\u0440\u0430\u0444\u0438\u0442\u043d\u044b\\xD0\\0\\xD0\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/\u0422\u0432\u043e\u0440\u0447\u0435\u0441\u0442\u0432\u043e/\u0420\u0443\u043a\u043e\u0434\u0435\u043b\u0438\u0435, \u0430\u043f\u043f\u043b\u0438\u043a\u0430\u0446\u0438\u0438/\u041f\u0440\u044f\u0436\u0430 \u0438 \u0448\u0435\u0440\u0441\u0442\u044c \u0434\u043b\u044f \\xD0\\0l\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/1071547/karandash-chernografitnyy-volshebstvo-nv-kruglyy-d-7-2mm-dl-176mm-plast-tuba/\\0e\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"ca\\0e\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"ca\\0e\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/1165424/chipbord-vyrubnoy-dlya-skrapbukinga-malyshi-mikki-maus-disney-bebi\\0t\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/posuda/kuhonnye-prinadlezhnosti-i-i\\0d\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/\u041a\u0430\u043d\u0446\u0442\u043e\u0432\u0430\u0440\u044b/\u0415\u0436\u0435\u0434\u043d\u0435\u0432\u043d\u0438\u043a\u0438 \u0438 \u0431\u043b\u043e\u043a\u043d\\xD0\\0\\0\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/kanctovary/ezhednevniki-i-blok\\0a\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\u0421\u0442\u0430\u043a\u0430\u043d \\xD0\\0a\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\u041d\u0430\u0431\u043e\u0440 \u0431\u0443\u043c\u0430\u0433\u0438 \u0434\u043b\u044f \u0441\u043a\u0440\u0430\u043f\u0431\u0443\u043a\u0438\u043d\u0433\u0430 \\\\\\\"\u041c\u043e\u0438 \u043f\u0435\u0440\u0432\u044b\u0439 \u0433\u043e\u0434\u0438\u043a\\\\\\\": \u041c\u0438\u043a\u043a\u0438 \u041c\u0430\u0443\u0441, \u0414\u0438\u0441\u043d\u0435\u0439 \u0431\u044d\u0431\u0438, 12 \u043b\u0438\u0441\u0442\u043e\u0432 29.5 \u0445 29.5 \u0441\u043c, 160\\0\\x80\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"c\\0\\0\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\u041e\u0440\u0433\u0430\u043d\u0430\u0439\u0437\u0435\u0440 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0430\u043a\u0441\u0435\u0441\u0441\u0443\u0430\u0440\u043e\u0432, \\0\\0\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"quantity\\00\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\u0421\u043c\u0435\u043d\u043d\u044b\u0439 \u0431\u043b\u043e\u043a \u0434\u043b\u044f \u0442\u0435\u0442\u0440\u0430\u0434\u0435\u0439 \u043d\u0430 \u043a\u043e\u043b\u044c\u0446\u0430\u0445 \u04105, 160 \u043b\u0438\u0441\u0442\u043e\u0432 \u043a\u043b\u0435\u0442\u043a\u0430, \u043e\u0444\u0441\u0435\u0442 \\xE2\\x84\\0=\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/\u0421\u0443\u0432\u0435\u043d\u0438\u0440\u044b/\u0424\\xD0\\0 \", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\\0\\\"\", ResultType::Return, \"\\0\" },\n-        { \"\\\"\\0\\x04\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"va\\0\\0\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"ca\\0\\0\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\u0412 \\0\\x04\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/letnie-tovary/z\\0\\x04\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\u041f\u043e\u0441\u0443\u0434\u043e\u043c\u043e\u0435\u0447\u043d\u0430\u044f \u043c\u0430\u0448\u0438\u043d\u0430 Ha\\0=\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\u041a\u0440\u0443\u043f\u043d\u0430\u044f \u0431\u044b\u0442\u043e\u0432\\0\\0\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\u041f\u043e\u043b\u043e\u0447\u043d\u0430\u044f \u0430\u043a\u0443\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 Magnat Needl\\0\\0\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"brand\\00\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\\0d\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"pos\\0 \", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"c\\0o\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"var\\0\\0\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\u0422\u0435\u043b\u0435\u0432\u0438\u0437\u043e\u0440\u044b \u0438 \u0432\u0438\u0434\u0435\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430/\u0412\u0441\u0451 \u0434\u043b\u044f \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u043a\u0438\u043d\u043e\u0442\u0435\u0430\u0442\u0440\\0=\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\u0424\u043b\u0435\u0448-\u0434\u0438\u0441\u043a Transcend JetFlash 620 8GB (TS8GJF62\\0\\0\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\u0422\u0430\u0431\u0443\u0440\u0435\u0442 \u041c\u0435\u0433\\0\\xD0\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"variant\\0\\x04\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\u041a\u0430\u0442\u0430\u043b\\xD0\\0\\\"\", ResultType::Return, \"\u041a\u0430\u0442\u0430\u043b\\xD0\\0\" },\n-        { \"\\\"\u041a\\0\\0\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\u041f\u043e\u043b\u043e\u0447\u043d\u0430\u044f \u0430\u043a\u0443\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 Magnat Needl\\0\\0\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"brand\\00\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\\0d\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"pos\\0 \", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"c\\0o\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"17\\0o\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/igrushki/razvivayusc\\0 \", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\u041a\u043b\u044e\u0447\u043d\u0438\u0446\u0430 \\\\\\\"\\0 \", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/\u0418\u0433\u0440\\xD1\\0 \", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/\u0418\u0433\u0440\u0443\u0448\u043a\u0438/\u0418\u0433\u0440\u0443\u0448\u043a\u0438 \u0434\u043b\u044f \u0434\u0435\u0432\u043e\u0447\u0435\u043a/\u0418\u0433\u0440\u043e\u0432\u044b\u0435 \u043c\u043e\u0434\u0443\u043b\u0438 \u0434\u043b\\xD1\\0o\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\u041a\u0440\u0443\u043f\u043d\u0430\u044f \u0431\u044b\u0442\u043e\u0432\u0430\u044f \u0442\u0435\u0445\u043d\u0438\u043a\u0430/\u0421\u0442\u0438\u0440\u0430\u043b\u044c\u043d\u044b\u0435 \u043c\u0430\u0448\u0438\u043d\u044b/\u0421 \u0444\u0440\u043e\u043d\u0442\\xD0\\0o\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\0 \", ResultType::Throw, \"JSON: expected \\\", got \\0\" },\n-        { \"\\\"\u0421\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434\u043d\u0430\u044f \u043b\u0435\u043d\u0442\u0430 SMD3528, 5 \u043c. IP33, 60LED, \u0437\u0435\u043b\u0435\u043d\u044b\u0439, 4,8W/\u043c\u0435\u0442\\xD1\\0 \", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\u0421\u0430\u043d\u0442\u0435\u0445\u043d\u0438\u043a\u0430/\u041c\u0435\u0431\u0435\u043b\u044c \u0434\u043b\u044f \u0432\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u043c\u043d\u0430\u0442/\u0421\u0442\u043e\u043b\\0o\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\0o\", ResultType::Throw, \"JSON: expected \\\", got \\0\" },\n-        { \"\\\"/igrushki/konstruktory\\0 \", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/posuda/kuhonnye-prinadlezhnosti-i-instrumenty/kuhonnye-pr\\0 \", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/1290414/komplekt-zhenskiy-dzhemper-plusbryuki-m-254-09-malina-plustemno-siniy-\\0o\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/\u0422\u0432\u043e\u0440\u0447\u0435\u0441\u0442\u0432\u043e/\u0420\u0438\u0441\u043e\u0432\u0430\u043d\u0438\u0435/\u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0438 \u043a\u0440\u0430\\0o\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\u0421\u0442\u0440\u043e\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e \u0438 \u0440\u0435\u043c\u043e\u043d\u0442/\u0421\u0438\u043b\u043e\u0432\u0430\u044f \u0442\u0435\u0445\u043d\u0438\u043a\u0430/\u0417\u0430\u0440\u044f\u0434\u043d\u044b\u0435 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0445 \u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u043e\u0432/\u041f\u0443\u0441\u043a\u043e-\u0437\u0430\u0440\u044f\u0434\u043d\u044b\u0435 \u0443\u0441\u0442\u0440\\xD0\\0o\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\u0421\u0442\u0440\u043e\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e \u0438 \u0440\u0435\u043c\u043e\u043d\u0442/\u0421\u0438\u043b\u043e\u0432\u0430\u044f \u0442\u0435\u0445\u043d\u0438\u043a\u0430/\u0417\u0430\u0440\u044f\u0434\u043d\u044b\u0435 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\\xD0\\0 \", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\u0421\u0442\u0440\u043e\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e \u0438 \u0440\u0435\u043c\u043e\u043d\u0442/\u0421\u0438\u043b\u043e\u0432\u0430\u044f \u0442\u0435\u0445\u043d\u0438\u043a\u0430/\u0417\u0430\u0440\u044f\u0434\u043d\u044b\u0435 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c\\0d\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\0 \", ResultType::Throw, \"JSON: expected \\\", got \\0\" },\n-        { \"\\\"/\u0425\u043e\u0437\u0442\u043e\u0432\u0430\u0440\u044b/\u0425\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0432\u0435\u0449\u0435\u0439 \u0438 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\\xD1\\0 \", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/\u0425\u043e\u0437\u0442\u043e\u0432\u0430\u0440\u044b/\u0422\u043e\u0432\u0430\u0440\u044b \u0434\u043b\u044f \u0441\u0442\u0438\u0440\\0o\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"li\\0o\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/igrushki/igrus\\0d\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/734859/samolet-radioupravlyaemyy-istrebitel-rabotaet-o\\0 \", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/kosmetika-i-parfyum/parfyumeriya/mu\\00\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/ko\\0\\0\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/avto/avtomobilnyy\\0\\0\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/stroitelstvo-i-remont/stroit\\00\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/stroitelstvo-i-remont/stroitelnyy-instrument/av\\0 \", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/s\\0d\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/\u0421\u0442\u0440\u043e\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e \u0438 \u0440\u0435\u043c\u043e\u043d\u0442/\u0421\u0442\u0440\u043e\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442/\u0418\u0437\u043c\\0o\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/avto/soputstvuy\\0\\\"\", ResultType::Return, \"/avto/soputstvuy\\0\" },\n-        { \"\\\"/str\\0k\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\u041e\u0442\u0432\u0435\u0440\u0442\u043a\u0430 2 \u0432 1 \\\\\\\"TUNDRA basic\\\\\\\" 5\u044575 \u043c\u043c (+,-) \\0\\xD0\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/stroitelstvo-i-remont/stroitelnyy-instrument/avtoinstrumen\\0=\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\u0427\u0430\u0439\u043d\u0438\u043a \u044d\u043b\u0435\u043a\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0439 Vitesse\\0=\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\u041c\u0435\u043b\u043a\u0430\u044f \u0431\u044b\u0442\u043e\u0432\u0430\u044f \u0442\u0435\u0445\u043d\u0438\u043a\u0430/\u041c\u0435\u043b\u043a\u0438\\xD0\\0\\xD0\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\u041f\u0440\u044f\u0436\u0430 \\\\\\\"\u0411\u0430\u043c\u0431\u0443\u043a \u0441\u0442\u0440\u0435\u0439\u0447\\\\0\u043e\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\u041a\u0430\u0440\u0430\u043d\u0434\u0430\u0448 \u0447\u0451\u0440\u043d\u043e\u0433\u0440\u0430\u0444\u0438\u0442\u043d\u044b\\xD0\\0k\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/\u0422\u0432\u043e\u0440\u0447\u0435\u0441\u0442\u0432\u043e/\u0420\u0443\u043a\u043e\u0434\u0435\u043b\u0438\u0435, \u0430\u043f\u043f\u043b\u0438\u043a\u0430\u0446\u0438\u0438/\u041f\u0440\u044f\u0436\u0430 \u0438 \u0448\u0435\u0440\u0441\u0442\u044c \u0434\u043b\u044f \\xD0\\0\\\"\", ResultType::Return, \"/\u0422\u0432\u043e\u0440\u0447\u0435\u0441\u0442\u0432\u043e/\u0420\u0443\u043a\u043e\u0434\u0435\u043b\u0438\u0435, \u0430\u043f\u043f\u043b\u0438\u043a\u0430\u0446\u0438\u0438/\u041f\u0440\u044f\u0436\u0430 \u0438 \u0448\u0435\u0440\u0441\u0442\u044c \u0434\u043b\u044f \\xD0\\0\" },\n-        { \"\\\"/1071547/karandash-chernografitnyy-volshebstvo-nv-kruglyy-d-7-2mm-dl-176mm-plast-tuba/\\0o\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"ca\\0o\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/\u041f\u043e\u0434\u0430\u0440\u043e\\0o\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\u0421\u0440\u0435\u0434\u0441\u0442\u0432\u043e \u0434\u043b\u044f \u043f\u0440\u043e\u0447\u0438\u0441\\xD1\\0o\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"i\\0o\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/p\\0\\\"\", ResultType::Return, \"/p\\0\" },\n-        { \"\\\"/\u0421\u0443\u0432\u0435\u043d\u0438\u0440\u044b/\u041c\u0430\u0433\u043d\u0438\u0442\u044b, \u043d\\xD0\\0k\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\u0414\u0435\u0440\u0435\u0432\\xD0\\0=\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/prazdniki/svadba/svadebnaya-c\\0\\xD0\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/\u041a\u0430\u043d\u0446\u0442\\0d\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/\u041f\u0440\u0430\u0437\u0434\u043d\u0438\u043a\u0438/\u0422\u043e\\xD0\\0 \", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"v\\0 \", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/\u041a\u043e\u0441\u043c\u0435\u0442\u0438\u043a\u0430 \\xD0\\0d\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/\u0421\u043f\u043e\u0440\u0442 \u0438 \u043e\u0442\u0434\u044b\u0445/\u041d\u0430\u0441\u0442\u043e\u043b\u044c\u043d\u044b\u0435 \u0438\u0433\u0440\u044b/\u041f\u043e\u043a\u0435\u0440, \u0440\u0443\u043b\u0435\\xD1\\0\\xD0\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"categ\\0=\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/retailr\\0k\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/retailrocket\\0k\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\u0415\u0436\u0435\u0434\u043d\u0435\u0432\u043d\u0438\u043a \u043d\u0435\u0434\u0430\u0442 \u04105 140\u043b \u043a\u043b,\u043b\u044f\u0441\u0441\u0435,\u043e\u0431\u043b \u043f\u0432\\0=\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/432809/ezhednevnik-organayzer-sredniy-s-remeshkom-na-knopke-v-oblozhke-kalkulyator-kalendar-do-\\0\\xD0\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/1165424/chipbord-vyrubnoy-dlya-skrapbukinga-malyshi-mikki-maus-disney-bebi\\0d\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/posuda/kuhonnye-prinadlezhnosti-i-i\\0 \", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/\u041a\u0430\u043d\u0446\u0442\u043e\u0432\u0430\u0440\u044b/\u0415\u0436\u0435\u0434\u043d\u0435\u0432\u043d\u0438\u043a\u0438 \u0438 \u0431\u043b\u043e\u043a\u043d\\xD0\\0o\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"/kanctovary/ezhednevniki-i-blok\\00\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\u0421\u0442\u0430\u043a\u0430\u043d \\xD0\\0\\0\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"\u041d\u0430\u0431\u043e\u0440 \u0431\u0443\u043c\u0430\u0433\u0438 \u0434\u043b\u044f \u0441\u043a\u0440\u0430\u043f\u0431\u0443\u043a\u0438\u043d\u0433\u0430 \\\\\\\"\u041c\u043e\u0438 \u043f\u0435\u0440\u0432\u044b\u0439 \u0433\u043e\u0434\u0438\u043a\\\\\\\": \u041c\u0438\u043a\u043a\u0438 \u041c\u0430\u0443\u0441, \u0414\u0438\u0441\u043d\u0435\u0439 \u0431\u044d\u0431\u0438, 12 \u043b\u0438\u0441\u0442\u043e\u0432 29.5 \u0445 29.5 \u0441\u043c, 160\\0\\0\", ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\" },\n-        { \"\\\"c\\0\\\"\", ResultType::Return, \"c\\0\" },\n-    };\n-\n-    for (auto i : boost::irange(0, 1/*00000*/))\n-    {\n-        static_cast<void>(i);\n-\n-        for (auto & r : test_data)\n-        {\n-            try\n-            {\n-                JSON j(r.input, r.input + strlen(r.input));\n-\n-                ASSERT_EQ(j.getString(), r.result);\n-                ASSERT_TRUE(r.result_type == ResultType::Return);\n-            }\n-            catch (JSONException & e)\n-            {\n-                ASSERT_TRUE(r.result_type == ResultType::Throw);\n-                ASSERT_EQ(e.message(), r.result);\n-            }\n-        }\n-    }\n-}\ndiff --git a/base/mysqlxx/tests/CMakeLists.txt b/base/mysqlxx/tests/CMakeLists.txt\nindex 2cf19d784183..6473a9273089 100644\n--- a/base/mysqlxx/tests/CMakeLists.txt\n+++ b/base/mysqlxx/tests/CMakeLists.txt\n@@ -1,5 +1,2 @@\n-add_executable (mysqlxx_test mysqlxx_test.cpp)\n-target_link_libraries (mysqlxx_test PRIVATE mysqlxx)\n-\n add_executable (mysqlxx_pool_test mysqlxx_pool_test.cpp)\n target_link_libraries (mysqlxx_pool_test PRIVATE mysqlxx)\ndiff --git a/base/mysqlxx/tests/failover.xml b/base/mysqlxx/tests/failover.xml\ndeleted file mode 100644\nindex 73702eabb29e..000000000000\n--- a/base/mysqlxx/tests/failover.xml\n+++ /dev/null\n@@ -1,21 +0,0 @@\n-<?xml version = '1.0' encoding = 'utf-8'?>\n-<yandex>\n-    <mysql_goals>\n-        <port>3306</port>\n-        <user>root</user>\n-        <db>Metrica</db>\n-        <password>qwerty</password>\n-        <replica>\n-            <host>example02t</host>\n-            <priority>0</priority>\n-        </replica>\n-        <replica>\n-            <host>example02t</host>\n-            <port>3306</port>\n-            <user>root</user>\n-            <password>qwerty</password>\n-            <db>Metrica</db>\n-            <priority>1</priority>\n-        </replica>\n-    </mysql_goals>\n-</yandex>\ndiff --git a/base/mysqlxx/tests/mysqlxx_test.cpp b/base/mysqlxx/tests/mysqlxx_test.cpp\ndeleted file mode 100644\nindex c505d34a58d8..000000000000\n--- a/base/mysqlxx/tests/mysqlxx_test.cpp\n+++ /dev/null\n@@ -1,77 +0,0 @@\n-#include <iostream>\n-#include <mysqlxx/mysqlxx.h>\n-\n-\n-int main(int, char **)\n-{\n-    try\n-    {\n-        mysqlxx::Connection connection(\"test\", \"127.0.0.1\", \"root\", \"qwerty\", 3306);\n-        std::cerr << \"Connected.\" << std::endl;\n-\n-        {\n-            mysqlxx::Query query = connection.query();\n-            query << \"SELECT 1 x, '2010-01-01 01:01:01' d\";\n-            mysqlxx::UseQueryResult result = query.use();\n-            std::cerr << \"use() called.\" << std::endl;\n-\n-            while (mysqlxx::Row row = result.fetch())\n-            {\n-                std::cerr << \"Fetched row.\" << std::endl;\n-                std::cerr << row[0] << \", \" << row[\"x\"] << std::endl;\n-                std::cerr << row[1] << \", \" << row[\"d\"]\n-                    << \", \" << row[1].getDate()\n-                    << \", \" << row[1].getDateTime()\n-                    << \", \" << row[1].getDate()\n-                    << \", \" << row[1].getDateTime()\n-                    << std::endl\n-                    << row[1].getDate() << \", \" << row[1].getDateTime() << std::endl\n-                    << row[1].getDate() << \", \" << row[1].getDateTime() << std::endl\n-                    << row[1].getDate() << \", \" << row[1].getDateTime() << std::endl\n-                    << row[1].getDate() << \", \" << row[1].getDateTime() << std::endl\n-                    ;\n-\n-                time_t t1 = row[0];\n-                time_t t2 = row[1];\n-                std::cerr << t1 << \", \" << LocalDateTime(t1) << std::endl;\n-                std::cerr << t2 << \", \" << LocalDateTime(t2) << std::endl;\n-            }\n-        }\n-\n-        {\n-            mysqlxx::UseQueryResult result = connection.query(\"SELECT 'abc\\\\\\\\def' x\").use();\n-            mysqlxx::Row row = result.fetch();\n-            std::cerr << row << std::endl;\n-            std::cerr << row << std::endl;\n-        }\n-\n-        {\n-            /// \u041a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 Query\n-            mysqlxx::Query query1 = connection.query(\"SELECT\");\n-            mysqlxx::Query query2 = query1;\n-            query2 << \" 1\";\n-\n-            std::cerr << query1.str() << \", \" << query2.str() << std::endl;\n-        }\n-\n-        {\n-            /// NULL\n-            mysqlxx::Null<int> x = mysqlxx::null;\n-            std::cerr << (x == mysqlxx::null ? \"Ok\" : \"Fail\") << std::endl;\n-            std::cerr << (x == 0 ? \"Fail\" : \"Ok\") << std::endl;\n-            std::cerr << (x.isNull() ? \"Ok\" : \"Fail\") << std::endl;\n-            x = 1;\n-            std::cerr << (x == mysqlxx::null ? \"Fail\" : \"Ok\") << std::endl;\n-            std::cerr << (x == 0 ? \"Fail\" : \"Ok\") << std::endl;\n-            std::cerr << (x == 1 ? \"Ok\" : \"Fail\") << std::endl;\n-            std::cerr << (x.isNull() ? \"Fail\" : \"Ok\") << std::endl;\n-        }\n-    }\n-    catch (const mysqlxx::Exception & e)\n-    {\n-        std::cerr << e.code() << \", \" << e.message() << std::endl;\n-        throw;\n-    }\n-\n-    return 0;\n-}\ndiff --git a/src/Common/tests/gtest_DateLUTImpl.cpp b/src/Common/tests/gtest_DateLUTImpl.cpp\nnew file mode 100644\nindex 000000000000..e18bd16e7313\n--- /dev/null\n+++ b/src/Common/tests/gtest_DateLUTImpl.cpp\n@@ -0,0 +1,534 @@\n+#include <common/DateLUT.h>\n+#include <common/DateLUTImpl.h>\n+\n+#include <gtest/gtest.h>\n+\n+#include <string>\n+#include <string_view>\n+\n+#include <cctz/time_zone.h>\n+\n+\n+/// For the expansion of gtest macros.\n+#if defined(__clang__)\n+    #pragma clang diagnostic ignored \"-Wused-but-marked-unused\"\n+#endif\n+\n+// All timezones present at build time and embedded into ClickHouse binary.\n+extern const char * auto_time_zones[];\n+\n+namespace\n+{\n+\n+cctz::civil_day YYYYMMDDToDay(unsigned value)\n+{\n+    return cctz::civil_day(\n+        value / 10000,         // year\n+        (value % 10000) / 100, // month\n+        value % 100);          // day\n+}\n+\n+std::vector<const char*> allTimezones(bool with_weird_offsets = true)\n+{\n+    std::vector<const char*> result;\n+\n+    const auto * timezone_name = auto_time_zones;\n+    while (*timezone_name)\n+    {\n+        bool weird_offsets = (std::string_view(*timezone_name) == \"Africa/Monrovia\");\n+\n+        if (!weird_offsets || with_weird_offsets)\n+            result.push_back(*timezone_name);\n+        ++timezone_name;\n+    }\n+\n+    return result;\n+}\n+\n+struct FailuresCount\n+{\n+    size_t non_fatal = 0;\n+    size_t fatal = 0;\n+    size_t total = 0;\n+};\n+\n+FailuresCount countFailures(const ::testing::TestResult & test_result)\n+{\n+    FailuresCount failures{0, 0, 0};\n+    const size_t count = test_result.total_part_count();\n+    for (size_t i = 0; i < count; ++i)\n+    {\n+        const auto & part = test_result.GetTestPartResult(i);\n+        if (part.nonfatally_failed())\n+        {\n+            ++failures.non_fatal;\n+            ++failures.total;\n+        }\n+        if (part.fatally_failed())\n+        {\n+            ++failures.fatal;\n+            ++failures.total;\n+        }\n+    }\n+\n+    return failures;\n+}\n+\n+}\n+\n+TEST(DateLUTTest, makeDayNumTest)\n+{\n+    const DateLUTImpl & lut = DateLUT::instance(\"UTC\");\n+    EXPECT_EQ(0, lut.makeDayNum(2500, 12, 25));\n+    EXPECT_EQ(0, lut.makeDayNum(1924, 12, 31));\n+}\n+\n+\n+TEST(DateLUTTest, TimeValuesInMiddleOfRange)\n+{\n+    const DateLUTImpl & lut = DateLUT::instance(\"Europe/Minsk\");\n+    const time_t time = 1568650811; // 2019-09-16 19:20:11 (Monday)\n+\n+    EXPECT_EQ(lut.getTimeZone(), \"Europe/Minsk\");\n+    EXPECT_EQ(lut.getOffsetAtStartOfEpoch(), 3600*3); // UTC-3\n+\n+    EXPECT_EQ(lut.toDate(time), 1568581200);\n+    EXPECT_EQ(lut.toMonth(time), 9);\n+    EXPECT_EQ(lut.toQuarter(time), 3);\n+    EXPECT_EQ(lut.toYear(time), 2019);\n+    EXPECT_EQ(lut.toDayOfMonth(time), 16);\n+\n+    EXPECT_EQ(lut.toFirstDayOfWeek(time), 1568581200 /*time_t*/);\n+    EXPECT_EQ(lut.toFirstDayNumOfWeek(time), DayNum(18155) /*DayNum*/);\n+    EXPECT_EQ(lut.toFirstDayOfMonth(time), 1567285200 /*time_t*/);\n+    EXPECT_EQ(lut.toFirstDayNumOfMonth(time), DayNum(18140) /*DayNum*/);\n+    EXPECT_EQ(lut.toFirstDayNumOfQuarter(time), DayNum(18078) /*DayNum*/);\n+    EXPECT_EQ(lut.toFirstDayOfQuarter(time), 1561928400 /*time_t*/);\n+    EXPECT_EQ(lut.toFirstDayOfYear(time), 1546290000 /*time_t*/);\n+    EXPECT_EQ(lut.toFirstDayNumOfYear(time), DayNum(17897) /*DayNum*/);\n+    EXPECT_EQ(lut.toFirstDayOfNextMonth(time), 1569877200 /*time_t*/);\n+    EXPECT_EQ(lut.toFirstDayOfPrevMonth(time), 1564606800 /*time_t*/);\n+    EXPECT_EQ(lut.daysInMonth(time), 30 /*UInt8*/);\n+    EXPECT_EQ(lut.toDateAndShift(time, 10), 1569445200 /*time_t*/);\n+    EXPECT_EQ(lut.toTime(time), 58811 /*time_t*/);\n+    EXPECT_EQ(lut.toHour(time), 19 /*unsigned*/);\n+    EXPECT_EQ(lut.toSecond(time), 11 /*unsigned*/);\n+    EXPECT_EQ(lut.toMinute(time), 20 /*unsigned*/);\n+    EXPECT_EQ(lut.toStartOfMinute(time), 1568650800 /*time_t*/);\n+    EXPECT_EQ(lut.toStartOfFiveMinute(time), 1568650800 /*time_t*/);\n+    EXPECT_EQ(lut.toStartOfFifteenMinutes(time), 1568650500 /*time_t*/);\n+    EXPECT_EQ(lut.toStartOfTenMinutes(time), 1568650800 /*time_t*/);\n+    EXPECT_EQ(lut.toStartOfHour(time), 1568649600 /*time_t*/);\n+    EXPECT_EQ(lut.toDayNum(time), DayNum(18155) /*DayNum*/);\n+    EXPECT_EQ(lut.toDayOfYear(time), 259 /*unsigned*/);\n+    EXPECT_EQ(lut.toRelativeWeekNum(time), 2594 /*unsigned*/);\n+    EXPECT_EQ(lut.toISOYear(time), 2019 /*unsigned*/);\n+    EXPECT_EQ(lut.toFirstDayNumOfISOYear(time), DayNum(17896) /*DayNum*/);\n+    EXPECT_EQ(lut.toFirstDayOfISOYear(time), 1546203600 /*time_t*/);\n+    EXPECT_EQ(lut.toISOWeek(time), 38 /*unsigned*/);\n+    EXPECT_EQ(lut.toRelativeMonthNum(time), 24237 /*unsigned*/);\n+    EXPECT_EQ(lut.toRelativeQuarterNum(time), 8078 /*unsigned*/);\n+    EXPECT_EQ(lut.toRelativeHourNum(time), 435736 /*time_t*/);\n+    EXPECT_EQ(lut.toRelativeMinuteNum(time), 26144180 /*time_t*/);\n+    EXPECT_EQ(lut.toStartOfHourInterval(time, 5), 1568646000 /*time_t*/);\n+    EXPECT_EQ(lut.toStartOfMinuteInterval(time, 6), 1568650680 /*time_t*/);\n+    EXPECT_EQ(lut.toStartOfSecondInterval(time, 7), 1568650811 /*time_t*/);\n+    EXPECT_EQ(lut.toNumYYYYMM(time), 201909 /*UInt32*/);\n+    EXPECT_EQ(lut.toNumYYYYMMDD(time), 20190916 /*UInt32*/);\n+    EXPECT_EQ(lut.toNumYYYYMMDDhhmmss(time), 20190916192011 /*UInt64*/);\n+    EXPECT_EQ(lut.addDays(time, 100), 1577290811 /*time_t*/);\n+    EXPECT_EQ(lut.addWeeks(time, 100), 1629130811 /*time_t*/);\n+    EXPECT_EQ(lut.addMonths(time, 100), 1831652411 /*time_t*/);\n+    EXPECT_EQ(lut.addQuarters(time, 100), 2357655611 /*time_t*/);\n+    EXPECT_EQ(lut.addYears(time, 10), 1884270011 /*time_t*/);\n+    EXPECT_EQ(lut.timeToString(time), \"2019-09-16 19:20:11\" /*std::string*/);\n+    EXPECT_EQ(lut.dateToString(time), \"2019-09-16\" /*std::string*/);\n+}\n+\n+\n+TEST(DateLUTTest, TimeValuesAtLeftBoderOfRange)\n+{\n+    const DateLUTImpl & lut = DateLUT::instance(\"UTC\");\n+    const time_t time = 0; // 1970-01-01 00:00:00 (Thursday)\n+\n+    EXPECT_EQ(lut.getTimeZone(), \"UTC\");\n+\n+    EXPECT_EQ(lut.toDate(time), 0);\n+    EXPECT_EQ(lut.toMonth(time), 1);\n+    EXPECT_EQ(lut.toQuarter(time), 1);\n+    EXPECT_EQ(lut.toYear(time), 1970);\n+    EXPECT_EQ(lut.toDayOfMonth(time), 1);\n+\n+    EXPECT_EQ(lut.toFirstDayOfWeek(time), -259200 /*time_t*/); // 1969-12-29 00:00:00\n+    EXPECT_EQ(lut.toFirstDayNumOfWeek(time), ExtendedDayNum(-3) /*DayNum*/);\n+    EXPECT_EQ(lut.toFirstDayOfMonth(time), 0 /*time_t*/);\n+    EXPECT_EQ(lut.toFirstDayNumOfMonth(time), DayNum(0) /*DayNum*/);\n+    EXPECT_EQ(lut.toFirstDayNumOfQuarter(time), DayNum(0) /*DayNum*/);\n+    EXPECT_EQ(lut.toFirstDayOfQuarter(time), 0 /*time_t*/);\n+    EXPECT_EQ(lut.toFirstDayOfYear(time), 0 /*time_t*/);\n+    EXPECT_EQ(lut.toFirstDayNumOfYear(time), DayNum(0) /*DayNum*/);\n+    EXPECT_EQ(lut.toFirstDayOfNextMonth(time), 2678400 /*time_t*/);\n+    EXPECT_EQ(lut.toFirstDayOfPrevMonth(time), -2678400 /*time_t*/); // 1969-12-01 00:00:00\n+    EXPECT_EQ(lut.daysInMonth(time), 31 /*UInt8*/);\n+    EXPECT_EQ(lut.toDateAndShift(time, 10), 864000 /*time_t*/);\n+    EXPECT_EQ(lut.toTime(time), 0 /*time_t*/);\n+    EXPECT_EQ(lut.toHour(time), 0 /*unsigned*/);\n+    EXPECT_EQ(lut.toSecond(time), 0 /*unsigned*/);\n+    EXPECT_EQ(lut.toMinute(time), 0 /*unsigned*/);\n+    EXPECT_EQ(lut.toStartOfMinute(time), 0 /*time_t*/);\n+    EXPECT_EQ(lut.toStartOfFiveMinute(time), 0 /*time_t*/);\n+    EXPECT_EQ(lut.toStartOfFifteenMinutes(time), 0 /*time_t*/);\n+    EXPECT_EQ(lut.toStartOfTenMinutes(time), 0 /*time_t*/);\n+    EXPECT_EQ(lut.toStartOfHour(time), 0 /*time_t*/);\n+    EXPECT_EQ(lut.toDayNum(time), DayNum(0) /*DayNum*/);\n+    EXPECT_EQ(lut.toDayOfYear(time), 1 /*unsigned*/);\n+    EXPECT_EQ(lut.toRelativeWeekNum(time), 0 /*unsigned*/);\n+    EXPECT_EQ(lut.toISOYear(time), 1970 /*unsigned*/);\n+    EXPECT_EQ(lut.toFirstDayNumOfISOYear(time), ExtendedDayNum(-3) /*DayNum*/);\n+    EXPECT_EQ(lut.toFirstDayOfISOYear(time), -259200 /*time_t*/); // 1969-12-29 00:00:00\n+    EXPECT_EQ(lut.toISOWeek(time), 1 /*unsigned*/);\n+    EXPECT_EQ(lut.toRelativeMonthNum(time), 23641 /*unsigned*/); // ?\n+    EXPECT_EQ(lut.toRelativeQuarterNum(time), 7880 /*unsigned*/); // ?\n+    EXPECT_EQ(lut.toRelativeHourNum(time), 0 /*time_t*/);\n+    EXPECT_EQ(lut.toRelativeMinuteNum(time), 0 /*time_t*/);\n+    EXPECT_EQ(lut.toStartOfHourInterval(time, 5), 0 /*time_t*/);\n+    EXPECT_EQ(lut.toStartOfMinuteInterval(time, 6), 0 /*time_t*/);\n+    EXPECT_EQ(lut.toStartOfSecondInterval(time, 7), 0 /*time_t*/);\n+    EXPECT_EQ(lut.toNumYYYYMM(time), 197001 /*UInt32*/);\n+    EXPECT_EQ(lut.toNumYYYYMMDD(time), 19700101 /*UInt32*/);\n+    EXPECT_EQ(lut.toNumYYYYMMDDhhmmss(time), 19700101000000 /*UInt64*/);\n+    EXPECT_EQ(lut.addDays(time, 100), 8640000 /*time_t*/);\n+    EXPECT_EQ(lut.addWeeks(time, 100), 60480000 /*time_t*/);\n+    EXPECT_EQ(lut.addMonths(time, 100), 262828800 /*time_t*/);\n+    EXPECT_EQ(lut.addQuarters(time, 100), 788918400 /*time_t*/);\n+    EXPECT_EQ(lut.addYears(time, 10), 315532800 /*time_t*/);\n+    EXPECT_EQ(lut.timeToString(time), \"1970-01-01 00:00:00\" /*std::string*/);\n+    EXPECT_EQ(lut.dateToString(time), \"1970-01-01\" /*std::string*/);\n+}\n+\n+TEST(DateLUTTest, TimeValuesAtRightBoderOfRangeOfOldLUT)\n+{\n+    // Value is at the right border of the old (small) LUT, and provides meaningful values where old LUT would provide garbage.\n+    const DateLUTImpl & lut = DateLUT::instance(\"UTC\");\n+\n+    const time_t time = 4294343873; // 2106-01-31T01:17:53 (Sunday)\n+\n+    EXPECT_EQ(lut.getTimeZone(), \"UTC\");\n+\n+    EXPECT_EQ(lut.toDate(time), 4294339200);\n+    EXPECT_EQ(lut.toMonth(time), 1);\n+    EXPECT_EQ(lut.toQuarter(time), 1);\n+    EXPECT_EQ(lut.toYear(time), 2106);\n+    EXPECT_EQ(lut.toDayOfMonth(time), 31);\n+\n+    EXPECT_EQ(lut.toFirstDayOfWeek(time), 4293820800 /*time_t*/);\n+    EXPECT_EQ(lut.toFirstDayNumOfWeek(time), DayNum(49697));\n+    EXPECT_EQ(lut.toFirstDayOfMonth(time), 4291747200 /*time_t*/); // 2016-01-01\n+    EXPECT_EQ(lut.toFirstDayNumOfMonth(time), DayNum(49673));\n+    EXPECT_EQ(lut.toFirstDayNumOfQuarter(time), DayNum(49673) /*DayNum*/);\n+    EXPECT_EQ(lut.toFirstDayOfQuarter(time), 4291747200 /*time_t*/);\n+    EXPECT_EQ(lut.toFirstDayOfYear(time), 4291747200 /*time_t*/);\n+    EXPECT_EQ(lut.toFirstDayNumOfYear(time), DayNum(49673) /*DayNum*/);\n+    EXPECT_EQ(lut.toFirstDayOfNextMonth(time), 4294425600 /*time_t*/); // 2106-02-01\n+    EXPECT_EQ(lut.toFirstDayOfPrevMonth(time), 4289068800 /*time_t*/); // 2105-12-01\n+    EXPECT_EQ(lut.daysInMonth(time), 31 /*UInt8*/);\n+    EXPECT_EQ(lut.toDateAndShift(time, 10), 4295203200 /*time_t*/); // 2106-02-10\n+    EXPECT_EQ(lut.toTime(time), 4673 /*time_t*/);\n+    EXPECT_EQ(lut.toHour(time), 1 /*unsigned*/);\n+    EXPECT_EQ(lut.toMinute(time), 17 /*unsigned*/);\n+    EXPECT_EQ(lut.toSecond(time), 53 /*unsigned*/);\n+    EXPECT_EQ(lut.toStartOfMinute(time), 4294343820 /*time_t*/);\n+    EXPECT_EQ(lut.toStartOfFiveMinute(time), 4294343700 /*time_t*/);\n+    EXPECT_EQ(lut.toStartOfFifteenMinutes(time), 4294343700 /*time_t*/);\n+    EXPECT_EQ(lut.toStartOfTenMinutes(time), 4294343400 /*time_t*/);\n+    EXPECT_EQ(lut.toStartOfHour(time), 4294342800 /*time_t*/);\n+    EXPECT_EQ(lut.toDayNum(time), DayNum(49703) /*DayNum*/);\n+    EXPECT_EQ(lut.toDayOfYear(time), 31 /*unsigned*/);\n+    EXPECT_EQ(lut.toRelativeWeekNum(time), 7100 /*unsigned*/);\n+    EXPECT_EQ(lut.toISOYear(time), 2106 /*unsigned*/);\n+    EXPECT_EQ(lut.toFirstDayNumOfISOYear(time), DayNum(49676) /*DayNum*/); // 2106-01-04\n+    EXPECT_EQ(lut.toFirstDayOfISOYear(time), 4292006400 /*time_t*/);\n+    EXPECT_EQ(lut.toISOWeek(time), 4 /*unsigned*/);\n+    EXPECT_EQ(lut.toRelativeMonthNum(time), 25273 /*unsigned*/);\n+    EXPECT_EQ(lut.toRelativeQuarterNum(time), 8424 /*unsigned*/);\n+    EXPECT_EQ(lut.toRelativeHourNum(time), 1192873 /*time_t*/);\n+    EXPECT_EQ(lut.toRelativeMinuteNum(time), 71572397 /*time_t*/);\n+    EXPECT_EQ(lut.toStartOfHourInterval(time, 5), 4294332000 /*time_t*/);\n+    EXPECT_EQ(lut.toStartOfMinuteInterval(time, 6), 4294343520 /*time_t*/);\n+    EXPECT_EQ(lut.toStartOfSecondInterval(time, 7), 4294343872 /*time_t*/);\n+    EXPECT_EQ(lut.toNumYYYYMM(time), 210601 /*UInt32*/);\n+    EXPECT_EQ(lut.toNumYYYYMMDD(time), 21060131 /*UInt32*/);\n+    EXPECT_EQ(lut.toNumYYYYMMDDhhmmss(time), 21060131011753 /*UInt64*/);\n+    EXPECT_EQ(lut.addDays(time, 100), 4302983873 /*time_t*/);\n+    EXPECT_EQ(lut.addWeeks(time, 10), 4300391873 /*time_t*/);\n+    EXPECT_EQ(lut.addMonths(time, 10), 4320523073 /*time_t*/);                 // 2106-11-30 01:17:53\n+    EXPECT_EQ(lut.addQuarters(time, 10), 4373140673 /*time_t*/);               // 2108-07-31 01:17:53\n+    EXPECT_EQ(lut.addYears(time, 10), 4609876673 /*time_t*/);                  // 2116-01-31 01:17:53\n+\n+    EXPECT_EQ(lut.timeToString(time), \"2106-01-31 01:17:53\" /*std::string*/);\n+    EXPECT_EQ(lut.dateToString(time), \"2106-01-31\" /*std::string*/);\n+}\n+\n+\n+class DateLUTWithTimeZone : public ::testing::TestWithParam<const char * /* timezone name */>\n+{};\n+\n+TEST_P(DateLUTWithTimeZone, LoadLUT)\n+{\n+    // There are some assumptions and assertions about TZ data made in DateLUTImpl which are verified upon loading,\n+    // to make sure that those assertions are true for all timezones we are going to load all of them one by one.\n+    DateLUT::instance(GetParam());\n+}\n+\n+// Another long running test, shouldn't be run to often\n+TEST_P(DateLUTWithTimeZone, VaidateTimeComponentsAroundEpoch)\n+{\n+    // Converting time around 1970-01-01 to hour-minute-seconds time components\n+    // could be problematic.\n+    const size_t max_failures_per_tz = 3;\n+    const auto * timezone_name = GetParam();\n+\n+    const auto * test_info = ::testing::UnitTest::GetInstance()->current_test_info();\n+    const DateLUTImpl & lut = DateLUT::instance(timezone_name);\n+\n+    for (time_t i = -856147870; i < 86400 * 10000; i += 11 * 13 * 17 * 19)\n+    {\n+        SCOPED_TRACE(::testing::Message()\n+                << \"\\n\\tTimezone: \" << timezone_name\n+                << \"\\n\\ttimestamp: \" << i\n+                << \"\\n\\t offset at start of epoch                  : \" << lut.getOffsetAtStartOfEpoch()\n+                << \"\\n\\t offset_at_start_of_lut                    : \" << lut.getTimeOffsetAtStartOfLUT());\n+\n+        EXPECT_GE(24, lut.toHour(i));\n+        EXPECT_GT(60, lut.toMinute(i));\n+        EXPECT_GT(60, lut.toSecond(i));\n+\n+        const auto current_failures = countFailures(*test_info->result());\n+        if (current_failures.total > 0)\n+        {\n+            if (i < 0)\n+                i = -1;\n+        }\n+\n+        if (current_failures.total >= max_failures_per_tz)\n+            break;\n+    }\n+}\n+\n+TEST_P(DateLUTWithTimeZone, getTimeZone)\n+{\n+    const auto & lut = DateLUT::instance(GetParam());\n+\n+    EXPECT_EQ(GetParam(), lut.getTimeZone());\n+}\n+\n+\n+// Group of tests for timezones that have or had some time ago an offset which is not multiple of 15 minutes.\n+INSTANTIATE_TEST_SUITE_P(ExoticTimezones,\n+    DateLUTWithTimeZone,\n+    ::testing::ValuesIn(std::initializer_list<const char*>{\n+            \"Africa/El_Aaiun\",\n+            \"Pacific/Apia\",\n+            \"Pacific/Enderbury\",\n+            \"Pacific/Fakaofo\",\n+            \"Pacific/Kiritimati\",\n+    })\n+);\n+\n+INSTANTIATE_TEST_SUITE_P(AllTimeZones,\n+    DateLUTWithTimeZone,\n+    ::testing::ValuesIn(allTimezones())\n+);\n+\n+std::ostream & operator<<(std::ostream & ostr, const DateLUTImpl::Values & v)\n+{\n+    return ostr << \"DateLUTImpl::Values{\"\n+            << \"\\n\\t date              : \" << v.date\n+            << \"\\n\\t year              : \" << static_cast<unsigned int>(v.year)\n+            << \"\\n\\t month             : \" << static_cast<unsigned int>(v.month)\n+            << \"\\n\\t day               : \" << static_cast<unsigned int>(v.day_of_month)\n+            << \"\\n\\t weekday           : \" << static_cast<unsigned int>(v.day_of_week)\n+            << \"\\n\\t days in month     : \" << static_cast<unsigned int>(v.days_in_month)\n+            << \"\\n\\t offset change     : \" << v.amount_of_offset_change()\n+            << \"\\n\\t offset change at : \" << v.time_at_offset_change()\n+            << \"\\n}\";\n+}\n+\n+struct TimeRangeParam\n+{\n+    const cctz::civil_second begin;\n+    const cctz::civil_second end;\n+    const int step_in_seconds;\n+};\n+\n+std::ostream & operator<<(std::ostream & ostr, const TimeRangeParam & param)\n+{\n+    return ostr << param.begin << \" : \" << param.end << \" step: \" << param.step_in_seconds << \"s\";\n+}\n+\n+class DateLUTWithTimeZoneAndTimeRange : public ::testing::TestWithParam<std::tuple<const char* /*timezone_name*/, TimeRangeParam>>\n+{};\n+\n+// refactored test from tests/date_lut3.cpp\n+TEST_P(DateLUTWithTimeZoneAndTimeRange, InRange)\n+{\n+    // for a time_t values in range [begin, end) to match with reference obtained from cctz:\n+    // compare date and time components: year, month, day, hours, minutes, seconds, formatted time string.\n+    const auto & [timezone_name, range_data] = GetParam();\n+    const auto & [begin, end, step] = range_data;\n+\n+    const auto * test_info = ::testing::UnitTest::GetInstance()->current_test_info();\n+    static const size_t max_failures_per_case = 3;\n+    cctz::time_zone tz;\n+    ASSERT_TRUE(cctz::load_time_zone(timezone_name, &tz));\n+\n+    const auto & lut = DateLUT::instance(timezone_name);\n+    const auto start = cctz::convert(begin, tz).time_since_epoch().count();\n+    const auto stop = cctz::convert(end, tz).time_since_epoch().count();\n+\n+    for (time_t expected_time_t = start; expected_time_t < stop; expected_time_t += step)\n+    {\n+        SCOPED_TRACE(expected_time_t);\n+\n+        const cctz::civil_second tz_time = cctz::convert(std::chrono::system_clock::from_time_t(expected_time_t), tz);\n+\n+        /// Weird offset, not supported.\n+        /// Example: Africa/Monrovia has offset UTC-0:44:30 in year 1970.\n+\n+        auto timestamp_current_day_pre = std::chrono::system_clock::to_time_t(tz.lookup(cctz::civil_day(tz_time)).pre);\n+        auto timestamp_current_day_post = std::chrono::system_clock::to_time_t(tz.lookup(cctz::civil_day(tz_time) + 1).post);\n+\n+        if (timestamp_current_day_pre % 900 || timestamp_current_day_post % 900)\n+            continue;\n+\n+        /// Unsupported timezone transitions - not in 15-minute time point or to different day.\n+        /// Example: America/Goose_Bay decided to go back one hour at 00:01:\n+        /// $ seq 1289097900 30 1289103600 | TZ=America/Goose_Bay LC_ALL=C xargs -I{} date -d @{}\n+        /// Sat Nov  6 23:59:00 ADT 2010\n+        /// Sat Nov  6 23:59:30 ADT 2010\n+        /// Sun Nov  7 00:00:00 ADT 2010\n+        /// Sun Nov  7 00:00:30 ADT 2010\n+        /// Sat Nov  6 23:01:00 AST 2010\n+        /// Sat Nov  6 23:01:30 AST 2010\n+\n+        bool has_transition = false;\n+        cctz::time_zone::civil_transition transition{};\n+        if (tz.next_transition(std::chrono::system_clock::from_time_t(expected_time_t - 1), &transition)\n+            && (transition.from.day() == tz_time.day() || transition.to.day() == tz_time.day()))\n+        {\n+            has_transition = true;\n+        }\n+\n+        if (has_transition && (transition.from.second() != 0 || transition.from.minute() % 15 != 0))\n+        {\n+            /*std::cerr << \"Skipping \" << timezone_name << \" \" << tz_time\n+                << \" because of unsupported timezone transition from \" << transition.from << \" to \" << transition.to\n+                << \" (not divisible by 15 minutes)\\n\";*/\n+            continue;\n+        }\n+\n+        /// Transition to previous day, but not from midnight.\n+        if (has_transition && cctz::civil_day(transition.from) == cctz::civil_day(transition.to) + 1\n+            && transition.from != cctz::civil_day(transition.from))\n+        {\n+            /*std::cerr << \"Skipping \" << timezone_name << \" \" << tz_time\n+                << \" because of unsupported timezone transition from \" << transition.from << \" to \" << transition.to\n+                << \" (to previous day but not at midnight)\\n\";*/\n+            continue;\n+        }\n+\n+        /// To large transition.\n+        if (has_transition\n+            && std::abs(transition.from - transition.to) > 3600 * 3)\n+        {\n+            /*std::cerr << \"Skipping \" << timezone_name << \" \" << tz_time\n+                << \" because of unsupported timezone transition from \" << transition.from << \" to \" << transition.to\n+                << \" (it is too large)\\n\";*/\n+            continue;\n+        }\n+\n+        EXPECT_EQ(tz_time.year(), lut.toYear(expected_time_t));\n+        EXPECT_EQ(tz_time.month(), lut.toMonth(expected_time_t));\n+        EXPECT_EQ(tz_time.day(), lut.toDayOfMonth(expected_time_t));\n+        /// tm.tm_wday Sunday is 0, while for DateLUTImpl it is 7\n+        EXPECT_EQ(static_cast<int>(cctz::get_weekday(tz_time)) + 1, lut.toDayOfWeek(expected_time_t));\n+        EXPECT_EQ(cctz::get_yearday(tz_time), lut.toDayOfYear(expected_time_t));\n+        EXPECT_EQ(tz_time.hour(), lut.toHour(expected_time_t));\n+        EXPECT_EQ(tz_time.minute(), lut.toMinute(expected_time_t));\n+        EXPECT_EQ(tz_time.second(), lut.toSecond(expected_time_t));\n+\n+        const auto time_string = cctz::format(\"%E4Y-%m-%d %H:%M:%S\", std::chrono::system_clock::from_time_t(expected_time_t), tz);\n+        EXPECT_EQ(time_string, lut.timeToString(expected_time_t));\n+\n+        /// It makes sense to let test execute all checks above to simplify debugging,\n+        /// but once we've found a bad apple, no need to dig deeper.\n+        if (countFailures(*test_info->result()).total >= max_failures_per_case)\n+            break;\n+    }\n+}\n+\n+INSTANTIATE_TEST_SUITE_P(AllTimezones_Year2010,\n+    DateLUTWithTimeZoneAndTimeRange,\n+    ::testing::Combine(\n+        ::testing::ValuesIn(allTimezones()),\n+        ::testing::ValuesIn(std::initializer_list<TimeRangeParam>{\n+            // Values from tests/date_lut3.cpp\n+            {YYYYMMDDToDay(20101031), YYYYMMDDToDay(20101101), 15 * 60},\n+            {YYYYMMDDToDay(20100328), YYYYMMDDToDay(20100330), 15 * 60}\n+        }))\n+);\n+\n+INSTANTIATE_TEST_SUITE_P(AllTimezones_Year1970_WHOLE,\n+    DateLUTWithTimeZoneAndTimeRange,\n+    ::testing::Combine(\n+        ::testing::ValuesIn(allTimezones(false)),\n+        ::testing::ValuesIn(std::initializer_list<TimeRangeParam>{\n+            // Values from tests/date_lut3.cpp\n+            {YYYYMMDDToDay(19700101), YYYYMMDDToDay(19701231), 3191 /*53m 11s*/},\n+        }))\n+);\n+\n+INSTANTIATE_TEST_SUITE_P(AllTimezones_Year2010_WHOLE,\n+    DateLUTWithTimeZoneAndTimeRange,\n+    ::testing::Combine(\n+        ::testing::ValuesIn(allTimezones(false)),\n+        ::testing::ValuesIn(std::initializer_list<TimeRangeParam>{\n+            // Values from tests/date_lut3.cpp\n+            {YYYYMMDDToDay(20100101), YYYYMMDDToDay(20101231), 3191 /*53m 11s*/},\n+        }))\n+);\n+\n+INSTANTIATE_TEST_SUITE_P(AllTimezones_Year2020_WHOLE,\n+    DateLUTWithTimeZoneAndTimeRange,\n+    ::testing::Combine(\n+        ::testing::ValuesIn(allTimezones()),\n+        ::testing::ValuesIn(std::initializer_list<TimeRangeParam>{\n+            // Values from tests/date_lut3.cpp\n+            {YYYYMMDDToDay(20200101), YYYYMMDDToDay(20201231), 3191 /*53m 11s*/},\n+        }))\n+);\n+\n+INSTANTIATE_TEST_SUITE_P(AllTimezones_PreEpoch,\n+    DateLUTWithTimeZoneAndTimeRange,\n+    ::testing::Combine(\n+        ::testing::ValuesIn(allTimezones(false)),\n+        ::testing::ValuesIn(std::initializer_list<TimeRangeParam>{\n+            {YYYYMMDDToDay(19500101), YYYYMMDDToDay(19600101), 15 * 60},\n+            {YYYYMMDDToDay(19300101), YYYYMMDDToDay(19350101), 11 * 15 * 60}\n+        }))\n+);\n+\n+INSTANTIATE_TEST_SUITE_P(AllTimezones_Year1970,\n+    DateLUTWithTimeZoneAndTimeRange,\n+    ::testing::Combine(\n+        ::testing::ValuesIn(allTimezones(false)),\n+        ::testing::ValuesIn(std::initializer_list<TimeRangeParam>{\n+            {YYYYMMDDToDay(19700101), YYYYMMDDToDay(19700201), 15 * 60},\n+            {YYYYMMDDToDay(19700101), YYYYMMDDToDay(19701231), 11 * 13 * 17}\n+//            // 11 was chosen as a number which can't divide product of 2-combinarions of (7, 24, 60),\n+//            // to reduce likelehood of hitting same hour/minute/second values for different days.\n+//            // + 12 is just to make sure that last day is covered fully.\n+//            {0, 0 + 11 * 3600 * 24 + 12, 11},\n+        }))\n+);\n+\ndiff --git a/base/common/tests/gtest_find_symbols.cpp b/src/Common/tests/gtest_find_symbols.cpp\nsimilarity index 100%\nrename from base/common/tests/gtest_find_symbols.cpp\nrename to src/Common/tests/gtest_find_symbols.cpp\ndiff --git a/src/Common/tests/gtest_json_test.cpp b/src/Common/tests/gtest_json_test.cpp\nnew file mode 100644\nindex 000000000000..726fb8360302\n--- /dev/null\n+++ b/src/Common/tests/gtest_json_test.cpp\n@@ -0,0 +1,656 @@\n+#include <vector>\n+#include <string>\n+#include <exception>\n+#include <string_view>\n+#include <common/JSON.h>\n+\n+#include <boost/range/irange.hpp>\n+#include <gtest/gtest.h>\n+\n+\n+enum class ResultType\n+{\n+    Return,\n+    Throw\n+};\n+\n+struct GetStringTestRecord\n+{\n+    std::string_view input;\n+    ResultType result_type;\n+    std::string_view result;\n+};\n+\n+TEST(JSONSuite, SimpleTest)\n+{\n+    using namespace std::literals;\n+\n+    std::vector<GetStringTestRecord> test_data =\n+    {\n+        { R\"(\"name\")\"sv, ResultType::Return, \"name\"sv },\n+        { R\"(\"\u0412\u0430\u0444\u0435\u043b\u044c\u043d\u0438\u0446\u0430 Vitek WX-1102 FL\")\"sv, ResultType::Return, \"\u0412\u0430\u0444\u0435\u043b\u044c\u043d\u0438\u0446\u0430 Vitek WX-1102 FL\"sv },\n+        { R\"(\"brand\")\"sv, ResultType::Return, \"brand\"sv },\n+        { R\"(\"184509\")\"sv, ResultType::Return, \"184509\"sv },\n+        { R\"(\"category\")\"sv, ResultType::Return, \"category\"sv },\n+        { R\"(\"\u0412\u0441\u0435 \u0434\u043b\u044f \u0434\u0435\u0442\u0435\u0439/\u0414\u0435\u0442\u0441\u043a\u0430\u044f \u0442\u0435\u0445\u043d\u0438\u043a\u0430/Vitek\")\"sv, ResultType::Return, \"\u0412\u0441\u0435 \u0434\u043b\u044f \u0434\u0435\u0442\u0435\u0439/\u0414\u0435\u0442\u0441\u043a\u0430\u044f \u0442\u0435\u0445\u043d\u0438\u043a\u0430/Vitek\"sv },\n+        { R\"(\"variant\")\"sv, ResultType::Return, \"variant\"sv },\n+        { R\"(\"\u0412 \u043d\u0430\u043b\u0438\u0447\u0438\u0438\")\"sv, ResultType::Return, \"\u0412 \u043d\u0430\u043b\u0438\u0447\u0438\u0438\"sv },\n+        { R\"(\"price\")\"sv, ResultType::Return, \"price\"sv },\n+        { R\"(\"2390.00\")\"sv, ResultType::Return, \"2390.00\"sv },\n+        { R\"(\"list\")\"sv, ResultType::Return, \"list\"sv },\n+        { R\"(\"\u041a\u0430\u0440\u0442\u043e\u0447\u043a\u0430\")\"sv, ResultType::Return, \"\u041a\u0430\u0440\u0442\u043e\u0447\u043a\u0430\"sv },\n+        { R\"(\"position\")\"sv, ResultType::Return, \"position\"sv },\n+        { R\"(\"detail\")\"sv, ResultType::Return, \"detail\"sv },\n+        { R\"(\"actionField\")\"sv, ResultType::Return, \"actionField\"sv },\n+        { R\"(\"list\")\"sv, ResultType::Return, \"list\"sv },\n+        { R\"(\"http://www.techport.ru/q/?t=\u0432\u0430\u0444\u0435\u043b\u044c\u043d\u0438\u0446\u0430&sort=price&sdim=asc\")\"sv, ResultType::Return, \"http://www.techport.ru/q/?t=\u0432\u0430\u0444\u0435\u043b\u044c\u043d\u0438\u0446\u0430&sort=price&sdim=asc\"sv },\n+        { R\"(\"action\")\"sv, ResultType::Return, \"action\"sv },\n+        { R\"(\"detail\")\"sv, ResultType::Return, \"detail\"sv },\n+        { R\"(\"products\")\"sv, ResultType::Return, \"products\"sv },\n+        { R\"(\"name\")\"sv, ResultType::Return, \"name\"sv },\n+        { R\"(\"\u0412\u0430\u0444\u0435\u043b\u044c\u043d\u0438\u0446\u0430 Vitek WX-1102 FL\")\"sv, ResultType::Return, \"\u0412\u0430\u0444\u0435\u043b\u044c\u043d\u0438\u0446\u0430 Vitek WX-1102 FL\"sv },\n+        { R\"(\"id\")\"sv, ResultType::Return, \"id\"sv },\n+        { R\"(\"184509\")\"sv, ResultType::Return, \"184509\"sv },\n+        { R\"(\"price\")\"sv, ResultType::Return, \"price\"sv },\n+        { R\"(\"2390.00\")\"sv, ResultType::Return, \"2390.00\"sv },\n+        { R\"(\"brand\")\"sv, ResultType::Return, \"brand\"sv },\n+        { R\"(\"Vitek\")\"sv, ResultType::Return, \"Vitek\"sv },\n+        { R\"(\"category\")\"sv, ResultType::Return, \"category\"sv },\n+        { R\"(\"\u0412\u0441\u0435 \u0434\u043b\u044f \u0434\u0435\u0442\u0435\u0439/\u0414\u0435\u0442\u0441\u043a\u0430\u044f \u0442\u0435\u0445\u043d\u0438\u043a\u0430/Vitek\")\"sv, ResultType::Return, \"\u0412\u0441\u0435 \u0434\u043b\u044f \u0434\u0435\u0442\u0435\u0439/\u0414\u0435\u0442\u0441\u043a\u0430\u044f \u0442\u0435\u0445\u043d\u0438\u043a\u0430/Vitek\"sv },\n+        { R\"(\"variant\")\"sv, ResultType::Return, \"variant\"sv },\n+        { R\"(\"\u0412 \u043d\u0430\u043b\u0438\u0447\u0438\u0438\")\"sv, ResultType::Return, \"\u0412 \u043d\u0430\u043b\u0438\u0447\u0438\u0438\"sv },\n+        { R\"(\"ru\")\"sv, ResultType::Return, \"ru\"sv },\n+        { R\"(\"experiments\")\"sv, ResultType::Return, \"experiments\"sv },\n+        { R\"(\"lang\")\"sv, ResultType::Return, \"lang\"sv },\n+        { R\"(\"ru\")\"sv, ResultType::Return, \"ru\"sv },\n+        { R\"(\"los_portal\")\"sv, ResultType::Return, \"los_portal\"sv },\n+        { R\"(\"los_level\")\"sv, ResultType::Return, \"los_level\"sv },\n+        { R\"(\"none\")\"sv, ResultType::Return, \"none\"sv },\n+        { R\"(\"isAuthorized\")\"sv, ResultType::Return, \"isAuthorized\"sv },\n+        { R\"(\"isSubscriber\")\"sv, ResultType::Return, \"isSubscriber\"sv },\n+        { R\"(\"postType\")\"sv, ResultType::Return, \"postType\"sv },\n+        { R\"(\"\u041d\u043e\u0432\u043e\u0441\u0442\u0438\")\"sv, ResultType::Return, \"\u041d\u043e\u0432\u043e\u0441\u0442\u0438\"sv },\n+        { R\"(\"experiments\")\"sv, ResultType::Return, \"experiments\"sv },\n+        { R\"(\"lang\")\"sv, ResultType::Return, \"lang\"sv },\n+        { R\"(\"ru\")\"sv, ResultType::Return, \"ru\"sv },\n+        { R\"(\"los_portal\")\"sv, ResultType::Return, \"los_portal\"sv },\n+        { R\"(\"los_level\")\"sv, ResultType::Return, \"los_level\"sv },\n+        { R\"(\"none\")\"sv, ResultType::Return, \"none\"sv },\n+        { R\"(\"lang\")\"sv, ResultType::Return, \"lang\"sv },\n+        { R\"(\"ru\")\"sv, ResultType::Return, \"ru\"sv },\n+        { R\"(\"\u042d\u043b\u0435\u043a\u0442\u0440\u043e\u043f\u043b\u0438\u0442\u0430 GEFEST \u0411\u0440\u0435\u0441\u0442 \u042d\u041f\u041d\u0414 5140-01 0001\")\"sv, ResultType::Return, \"\u042d\u043b\u0435\u043a\u0442\u0440\u043e\u043f\u043b\u0438\u0442\u0430 GEFEST \u0411\u0440\u0435\u0441\u0442 \u042d\u041f\u041d\u0414 5140-01 0001\"sv },\n+        { R\"(\"price\")\"sv, ResultType::Return, \"price\"sv },\n+        { R\"(\"currencyCode\")\"sv, ResultType::Return, \"currencyCode\"sv },\n+        { R\"(\"RUB\")\"sv, ResultType::Return, \"RUB\"sv },\n+        { R\"(\"lang\")\"sv, ResultType::Return, \"lang\"sv },\n+        { R\"(\"ru\")\"sv, ResultType::Return, \"ru\"sv },\n+        { R\"(\"experiments\")\"sv, ResultType::Return, \"experiments\"sv },\n+        { R\"(\"lang\")\"sv, ResultType::Return, \"lang\"sv },\n+        { R\"(\"ru\")\"sv, ResultType::Return, \"ru\"sv },\n+        { R\"(\"los_portal\")\"sv, ResultType::Return, \"los_portal\"sv },\n+        { R\"(\"los_level\")\"sv, ResultType::Return, \"los_level\"sv },\n+        { R\"(\"none\")\"sv, ResultType::Return, \"none\"sv },\n+        { R\"(\"trash_login\")\"sv, ResultType::Return, \"trash_login\"sv },\n+        { R\"(\"novikoff\")\"sv, ResultType::Return, \"novikoff\"sv },\n+        { R\"(\"trash_cat_link\")\"sv, ResultType::Return, \"trash_cat_link\"sv },\n+        { R\"(\"progs\")\"sv, ResultType::Return, \"progs\"sv },\n+        { R\"(\"trash_parent_link\")\"sv, ResultType::Return, \"trash_parent_link\"sv },\n+        { R\"(\"content\")\"sv, ResultType::Return, \"content\"sv },\n+        { R\"(\"trash_posted_parent\")\"sv, ResultType::Return, \"trash_posted_parent\"sv },\n+        { R\"(\"content.01.2016\")\"sv, ResultType::Return, \"content.01.2016\"sv },\n+        { R\"(\"trash_posted_cat\")\"sv, ResultType::Return, \"trash_posted_cat\"sv },\n+        { R\"(\"progs.01.2016\")\"sv, ResultType::Return, \"progs.01.2016\"sv },\n+        { R\"(\"trash_virus_count\")\"sv, ResultType::Return, \"trash_virus_count\"sv },\n+        { R\"(\"trash_is_android\")\"sv, ResultType::Return, \"trash_is_android\"sv },\n+        { R\"(\"trash_is_wp8\")\"sv, ResultType::Return, \"trash_is_wp8\"sv },\n+        { R\"(\"trash_is_ios\")\"sv, ResultType::Return, \"trash_is_ios\"sv },\n+        { R\"(\"trash_posted\")\"sv, ResultType::Return, \"trash_posted\"sv },\n+        { R\"(\"01.2016\")\"sv, ResultType::Return, \"01.2016\"sv },\n+        { R\"(\"experiments\")\"sv, ResultType::Return, \"experiments\"sv },\n+        { R\"(\"lang\")\"sv, ResultType::Return, \"lang\"sv },\n+        { R\"(\"ru\")\"sv, ResultType::Return, \"ru\"sv },\n+        { R\"(\"los_portal\")\"sv, ResultType::Return, \"los_portal\"sv },\n+        { R\"(\"los_level\")\"sv, ResultType::Return, \"los_level\"sv },\n+        { R\"(\"none\")\"sv, ResultType::Return, \"none\"sv },\n+        { R\"(\"merchantId\")\"sv, ResultType::Return, \"merchantId\"sv },\n+        { R\"(\"13694_49246\")\"sv, ResultType::Return, \"13694_49246\"sv },\n+        { R\"(\"cps-source\")\"sv, ResultType::Return, \"cps-source\"sv },\n+        { R\"(\"wargaming\")\"sv, ResultType::Return, \"wargaming\"sv },\n+        { R\"(\"cps_provider\")\"sv, ResultType::Return, \"cps_provider\"sv },\n+        { R\"(\"default\")\"sv, ResultType::Return, \"default\"sv },\n+        { R\"(\"errorReason\")\"sv, ResultType::Return, \"errorReason\"sv },\n+        { R\"(\"no errors\")\"sv, ResultType::Return, \"no errors\"sv },\n+        { R\"(\"scid\")\"sv, ResultType::Return, \"scid\"sv },\n+        { R\"(\"isAuthPayment\")\"sv, ResultType::Return, \"isAuthPayment\"sv },\n+        { R\"(\"lang\")\"sv, ResultType::Return, \"lang\"sv },\n+        { R\"(\"ru\")\"sv, ResultType::Return, \"ru\"sv },\n+        { R\"(\"rubric\")\"sv, ResultType::Return, \"rubric\"sv },\n+        { R\"(\"\")\"sv, ResultType::Return, \"\"sv },\n+        { R\"(\"rubric\")\"sv, ResultType::Return, \"rubric\"sv },\n+        { R\"(\"\u041c\u0438\u0440\")\"sv, ResultType::Return, \"\u041c\u0438\u0440\"sv },\n+        { R\"(\"lang\")\"sv, ResultType::Return, \"lang\"sv },\n+        { R\"(\"ru\")\"sv, ResultType::Return, \"ru\"sv },\n+        { R\"(\"experiments\")\"sv, ResultType::Return, \"experiments\"sv },\n+        { R\"(\"lang\")\"sv, ResultType::Return, \"lang\"sv },\n+        { R\"(\"ru\")\"sv, ResultType::Return, \"ru\"sv },\n+        { R\"(\"los_portal\")\"sv, ResultType::Return, \"los_portal\"sv },\n+        { R\"(\"los_level\")\"sv, ResultType::Return, \"los_level\"sv },\n+        { R\"(\"none\")\"sv, ResultType::Return, \"none\"sv },\n+        { R\"(\"lang\")\"sv, ResultType::Return, \"lang\"sv },\n+        { R\"(\"ru\")\"sv, ResultType::Return, \"ru\"sv },\n+        { R\"(\"__ym\")\"sv, ResultType::Return, \"__ym\"sv },\n+        { R\"(\"ecommerce\")\"sv, ResultType::Return, \"ecommerce\"sv },\n+        { R\"(\"impressions\")\"sv, ResultType::Return, \"impressions\"sv },\n+        { R\"(\"id\")\"sv, ResultType::Return, \"id\"sv },\n+        { R\"(\"863813\")\"sv, ResultType::Return, \"863813\"sv },\n+        { R\"(\"name\")\"sv, ResultType::Return, \"name\"sv },\n+        { R\"(\"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Happy, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\")\"sv, ResultType::Return, \"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Happy, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\"sv },\n+        { R\"(\"category\")\"sv, ResultType::Return, \"category\"sv },\n+        { R\"(\"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\")\"sv, ResultType::Return, \"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\"sv },\n+        { R\"(\"variant\")\"sv, ResultType::Return, \"variant\"sv },\n+        { R\"(\"\")\"sv, ResultType::Return, \"\"sv },\n+        { R\"(\"price\")\"sv, ResultType::Return, \"price\"sv },\n+        { R\"(\"390.00\")\"sv, ResultType::Return, \"390.00\"sv },\n+        { R\"(\"list\")\"sv, ResultType::Return, \"list\"sv },\n+        { R\"(\"/retailrocket/\")\"sv, ResultType::Return, \"/retailrocket/\"sv },\n+        { R\"(\"position\")\"sv, ResultType::Return, \"position\"sv },\n+        { R\"(\"brand\")\"sv, ResultType::Return, \"brand\"sv },\n+        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\"sv, ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\"sv },\n+        { R\"(\"id\")\"sv, ResultType::Return, \"id\"sv },\n+        { R\"(\"863839\")\"sv, ResultType::Return, \"863839\"sv },\n+        { R\"(\"name\")\"sv, ResultType::Return, \"name\"sv },\n+        { R\"(\"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Pretty kitten, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\")\"sv, ResultType::Return, \"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Pretty kitten, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\"sv },\n+        { R\"(\"category\")\"sv, ResultType::Return, \"category\"sv },\n+        { R\"(\"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\")\"sv, ResultType::Return, \"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\"sv },\n+        { R\"(\"variant\")\"sv, ResultType::Return, \"variant\"sv },\n+        { R\"(\"\")\"sv, ResultType::Return, \"\"sv },\n+        { R\"(\"price\")\"sv, ResultType::Return, \"price\"sv },\n+        { R\"(\"390.00\")\"sv, ResultType::Return, \"390.00\"sv },\n+        { R\"(\"list\")\"sv, ResultType::Return, \"list\"sv },\n+        { R\"(\"/retailrocket/\")\"sv, ResultType::Return, \"/retailrocket/\"sv },\n+        { R\"(\"position\")\"sv, ResultType::Return, \"position\"sv },\n+        { R\"(\"brand\")\"sv, ResultType::Return, \"brand\"sv },\n+        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\"sv, ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\"sv },\n+        { R\"(\"id\")\"sv, ResultType::Return, \"id\"sv },\n+        { R\"(\"863847\")\"sv, ResultType::Return, \"863847\"sv },\n+        { R\"(\"name\")\"sv, ResultType::Return, \"name\"sv },\n+        { R\"(\"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Little tiger, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\")\"sv, ResultType::Return, \"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Little tiger, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\"sv },\n+        { R\"(\"category\")\"sv, ResultType::Return, \"category\"sv },\n+        { R\"(\"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\")\"sv, ResultType::Return, \"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\"sv },\n+        { R\"(\"variant\")\"sv, ResultType::Return, \"variant\"sv },\n+        { R\"(\"\")\"sv, ResultType::Return, \"\"sv },\n+        { R\"(\"price\")\"sv, ResultType::Return, \"price\"sv },\n+        { R\"(\"390.00\")\"sv, ResultType::Return, \"390.00\"sv },\n+        { R\"(\"list\")\"sv, ResultType::Return, \"list\"sv },\n+        { R\"(\"/retailrocket/\")\"sv, ResultType::Return, \"/retailrocket/\"sv },\n+        { R\"(\"position\")\"sv, ResultType::Return, \"position\"sv },\n+        { R\"(\"brand\")\"sv, ResultType::Return, \"brand\"sv },\n+        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\"sv, ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\"sv },\n+        { R\"(\"id\")\"sv, ResultType::Return, \"id\"sv },\n+        { R\"(\"911480\")\"sv, ResultType::Return, \"911480\"sv },\n+        { R\"(\"name\")\"sv, ResultType::Return, \"name\"sv },\n+        { R\"(\"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Puppy, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\")\"sv, ResultType::Return, \"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Puppy, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\"sv },\n+        { R\"(\"category\")\"sv, ResultType::Return, \"category\"sv },\n+        { R\"(\"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\")\"sv, ResultType::Return, \"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\"sv },\n+        { R\"(\"variant\")\"sv, ResultType::Return, \"variant\"sv },\n+        { R\"(\"\")\"sv, ResultType::Return, \"\"sv },\n+        { R\"(\"price\")\"sv, ResultType::Return, \"price\"sv },\n+        { R\"(\"390.00\")\"sv, ResultType::Return, \"390.00\"sv },\n+        { R\"(\"list\")\"sv, ResultType::Return, \"list\"sv },\n+        { R\"(\"/retailrocket/\")\"sv, ResultType::Return, \"/retailrocket/\"sv },\n+        { R\"(\"position\")\"sv, ResultType::Return, \"position\"sv },\n+        { R\"(\"brand\")\"sv, ResultType::Return, \"brand\"sv },\n+        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\"sv, ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\"sv },\n+        { R\"(\"id\")\"sv, ResultType::Return, \"id\"sv },\n+        { R\"(\"911484\")\"sv, ResultType::Return, \"911484\"sv },\n+        { R\"(\"name\")\"sv, ResultType::Return, \"name\"sv },\n+        { R\"(\"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Little bears, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\")\"sv, ResultType::Return, \"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Little bears, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\"sv },\n+        { R\"(\"category\")\"sv, ResultType::Return, \"category\"sv },\n+        { R\"(\"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\")\"sv, ResultType::Return, \"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\"sv },\n+        { R\"(\"variant\")\"sv, ResultType::Return, \"variant\"sv },\n+        { R\"(\"\")\"sv, ResultType::Return, \"\"sv },\n+        { R\"(\"price\")\"sv, ResultType::Return, \"price\"sv },\n+        { R\"(\"390.00\")\"sv, ResultType::Return, \"390.00\"sv },\n+        { R\"(\"list\")\"sv, ResultType::Return, \"list\"sv },\n+        { R\"(\"/retailrocket/\")\"sv, ResultType::Return, \"/retailrocket/\"sv },\n+        { R\"(\"position\")\"sv, ResultType::Return, \"position\"sv },\n+        { R\"(\"brand\")\"sv, ResultType::Return, \"brand\"sv },\n+        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\"sv, ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\"sv },\n+        { R\"(\"id\")\"sv, ResultType::Return, \"id\"sv },\n+        { R\"(\"911489\")\"sv, ResultType::Return, \"911489\"sv },\n+        { R\"(\"name\")\"sv, ResultType::Return, \"name\"sv },\n+        { R\"(\"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Dolphin, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 2-4 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\")\"sv, ResultType::Return, \"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Dolphin, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 2-4 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\"sv },\n+        { R\"(\"category\")\"sv, ResultType::Return, \"category\"sv },\n+        { R\"(\"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\")\"sv, ResultType::Return, \"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\"sv },\n+        { R\"(\"variant\")\"sv, ResultType::Return, \"variant\"sv },\n+        { R\"(\"\")\"sv, ResultType::Return, \"\"sv },\n+        { R\"(\"price\")\"sv, ResultType::Return, \"price\"sv },\n+        { R\"(\"390.00\")\"sv, ResultType::Return, \"390.00\"sv },\n+        { R\"(\"list\")\"sv, ResultType::Return, \"list\"sv },\n+        { R\"(\"/retailrocket/\")\"sv, ResultType::Return, \"/retailrocket/\"sv },\n+        { R\"(\"position\")\"sv, ResultType::Return, \"position\"sv },\n+        { R\"(\"brand\")\"sv, ResultType::Return, \"brand\"sv },\n+        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\"sv, ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\"sv },\n+        { R\"(\"id\")\"sv, ResultType::Return, \"id\"sv },\n+        { R\"(\"911496\")\"sv, ResultType::Return, \"911496\"sv },\n+        { R\"(\"name\")\"sv, ResultType::Return, \"name\"sv },\n+        { R\"(\"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Pretty, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\")\"sv, ResultType::Return, \"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Pretty, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\"sv },\n+        { R\"(\"category\")\"sv, ResultType::Return, \"category\"sv },\n+        { R\"(\"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\")\"sv, ResultType::Return, \"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\"sv },\n+        { R\"(\"variant\")\"sv, ResultType::Return, \"variant\"sv },\n+        { R\"(\"\")\"sv, ResultType::Return, \"\"sv },\n+        { R\"(\"price\")\"sv, ResultType::Return, \"price\"sv },\n+        { R\"(\"390.00\")\"sv, ResultType::Return, \"390.00\"sv },\n+        { R\"(\"list\")\"sv, ResultType::Return, \"list\"sv },\n+        { R\"(\"/retailrocket/\")\"sv, ResultType::Return, \"/retailrocket/\"sv },\n+        { R\"(\"position\")\"sv, ResultType::Return, \"position\"sv },\n+        { R\"(\"brand\")\"sv, ResultType::Return, \"brand\"sv },\n+        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\"sv, ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\"sv },\n+        { R\"(\"id\")\"sv, ResultType::Return, \"id\"sv },\n+        { R\"(\"911504\")\"sv, ResultType::Return, \"911504\"sv },\n+        { R\"(\"name\")\"sv, ResultType::Return, \"name\"sv },\n+        { R\"(\"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Fairytale, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\")\"sv, ResultType::Return, \"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Fairytale, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\"sv },\n+        { R\"(\"category\")\"sv, ResultType::Return, \"category\"sv },\n+        { R\"(\"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\")\"sv, ResultType::Return, \"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\"sv },\n+        { R\"(\"variant\")\"sv, ResultType::Return, \"variant\"sv },\n+        { R\"(\"\")\"sv, ResultType::Return, \"\"sv },\n+        { R\"(\"price\")\"sv, ResultType::Return, \"price\"sv },\n+        { R\"(\"390.00\")\"sv, ResultType::Return, \"390.00\"sv },\n+        { R\"(\"list\")\"sv, ResultType::Return, \"list\"sv },\n+        { R\"(\"/retailrocket/\")\"sv, ResultType::Return, \"/retailrocket/\"sv },\n+        { R\"(\"position\")\"sv, ResultType::Return, \"position\"sv },\n+        { R\"(\"brand\")\"sv, ResultType::Return, \"brand\"sv },\n+        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\"sv, ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\"sv },\n+        { R\"(\"id\")\"sv, ResultType::Return, \"id\"sv },\n+        { R\"(\"911508\")\"sv, ResultType::Return, \"911508\"sv },\n+        { R\"(\"name\")\"sv, ResultType::Return, \"name\"sv },\n+        { R\"(\"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Kittens, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\")\"sv, ResultType::Return, \"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Kittens, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\"sv },\n+        { R\"(\"category\")\"sv, ResultType::Return, \"category\"sv },\n+        { R\"(\"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\")\"sv, ResultType::Return, \"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\"sv },\n+        { R\"(\"variant\")\"sv, ResultType::Return, \"variant\"sv },\n+        { R\"(\"\")\"sv, ResultType::Return, \"\"sv },\n+        { R\"(\"price\")\"sv, ResultType::Return, \"price\"sv },\n+        { R\"(\"390.00\")\"sv, ResultType::Return, \"390.00\"sv },\n+        { R\"(\"list\")\"sv, ResultType::Return, \"list\"sv },\n+        { R\"(\"/retailrocket/\")\"sv, ResultType::Return, \"/retailrocket/\"sv },\n+        { R\"(\"position\")\"sv, ResultType::Return, \"position\"sv },\n+        { R\"(\"brand\")\"sv, ResultType::Return, \"brand\"sv },\n+        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\"sv, ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\"sv },\n+        { R\"(\"id\")\"sv, ResultType::Return, \"id\"sv },\n+        { R\"(\"911512\")\"sv, ResultType::Return, \"911512\"sv },\n+        { R\"(\"name\")\"sv, ResultType::Return, \"name\"sv },\n+        { R\"(\"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Sunshine, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\")\"sv, ResultType::Return, \"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Sunshine, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\"sv },\n+        { R\"(\"category\")\"sv, ResultType::Return, \"category\"sv },\n+        { R\"(\"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\")\"sv, ResultType::Return, \"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\"sv },\n+        { R\"(\"variant\")\"sv, ResultType::Return, \"variant\"sv },\n+        { R\"(\"\")\"sv, ResultType::Return, \"\"sv },\n+        { R\"(\"price\")\"sv, ResultType::Return, \"price\"sv },\n+        { R\"(\"390.00\")\"sv, ResultType::Return, \"390.00\"sv },\n+        { R\"(\"list\")\"sv, ResultType::Return, \"list\"sv },\n+        { R\"(\"/retailrocket/\")\"sv, ResultType::Return, \"/retailrocket/\"sv },\n+        { R\"(\"position\")\"sv, ResultType::Return, \"position\"sv },\n+        { R\"(\"brand\")\"sv, ResultType::Return, \"brand\"sv },\n+        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\"sv, ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\"sv },\n+        { R\"(\"id\")\"sv, ResultType::Return, \"id\"sv },\n+        { R\"(\"911516\")\"sv, ResultType::Return, \"911516\"sv },\n+        { R\"(\"name\")\"sv, ResultType::Return, \"name\"sv },\n+        { R\"(\"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Dog in bag, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\")\"sv, ResultType::Return, \"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Dog in bag, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\"sv },\n+        { R\"(\"category\")\"sv, ResultType::Return, \"category\"sv },\n+        { R\"(\"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\")\"sv, ResultType::Return, \"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\"sv },\n+        { R\"(\"variant\")\"sv, ResultType::Return, \"variant\"sv },\n+        { R\"(\"\")\"sv, ResultType::Return, \"\"sv },\n+        { R\"(\"price\")\"sv, ResultType::Return, \"price\"sv },\n+        { R\"(\"390.00\")\"sv, ResultType::Return, \"390.00\"sv },\n+        { R\"(\"list\")\"sv, ResultType::Return, \"list\"sv },\n+        { R\"(\"/retailrocket/\")\"sv, ResultType::Return, \"/retailrocket/\"sv },\n+        { R\"(\"position\")\"sv, ResultType::Return, \"position\"sv },\n+        { R\"(\"brand\")\"sv, ResultType::Return, \"brand\"sv },\n+        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\"sv, ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\"sv },\n+        { R\"(\"id\")\"sv, ResultType::Return, \"id\"sv },\n+        { R\"(\"911520\")\"sv, ResultType::Return, \"911520\"sv },\n+        { R\"(\"name\")\"sv, ResultType::Return, \"name\"sv },\n+        { R\"(\"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Cute puppy, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\")\"sv, ResultType::Return, \"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Cute puppy, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\"sv },\n+        { R\"(\"category\")\"sv, ResultType::Return, \"category\"sv },\n+        { R\"(\"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\")\"sv, ResultType::Return, \"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\"sv },\n+        { R\"(\"variant\")\"sv, ResultType::Return, \"variant\"sv },\n+        { R\"(\"\")\"sv, ResultType::Return, \"\"sv },\n+        { R\"(\"price\")\"sv, ResultType::Return, \"price\"sv },\n+        { R\"(\"390.00\")\"sv, ResultType::Return, \"390.00\"sv },\n+        { R\"(\"list\")\"sv, ResultType::Return, \"list\"sv },\n+        { R\"(\"/retailrocket/\")\"sv, ResultType::Return, \"/retailrocket/\"sv },\n+        { R\"(\"position\")\"sv, ResultType::Return, \"position\"sv },\n+        { R\"(\"brand\")\"sv, ResultType::Return, \"brand\"sv },\n+        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\"sv, ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\"sv },\n+        { R\"(\"id\")\"sv, ResultType::Return, \"id\"sv },\n+        { R\"(\"911524\")\"sv, ResultType::Return, \"911524\"sv },\n+        { R\"(\"name\")\"sv, ResultType::Return, \"name\"sv },\n+        { R\"(\"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Rabbit, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\")\"sv, ResultType::Return, \"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Rabbit, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\"sv },\n+        { R\"(\"category\")\"sv, ResultType::Return, \"category\"sv },\n+        { R\"(\"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\")\"sv, ResultType::Return, \"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\"sv },\n+        { R\"(\"variant\")\"sv, ResultType::Return, \"variant\"sv },\n+        { R\"(\"\")\"sv, ResultType::Return, \"\"sv },\n+        { R\"(\"price\")\"sv, ResultType::Return, \"price\"sv },\n+        { R\"(\"390.00\")\"sv, ResultType::Return, \"390.00\"sv },\n+        { R\"(\"list\")\"sv, ResultType::Return, \"list\"sv },\n+        { R\"(\"/retailrocket/\")\"sv, ResultType::Return, \"/retailrocket/\"sv },\n+        { R\"(\"position\")\"sv, ResultType::Return, \"position\"sv },\n+        { R\"(\"brand\")\"sv, ResultType::Return, \"brand\"sv },\n+        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\"sv, ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\"sv },\n+        { R\"(\"id\")\"sv, ResultType::Return, \"id\"sv },\n+        { R\"(\"911528\")\"sv, ResultType::Return, \"911528\"sv },\n+        { R\"(\"name\")\"sv, ResultType::Return, \"name\"sv },\n+        { R\"(\"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Turtle, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\")\"sv, ResultType::Return, \"\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f 3D Turtle, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 1-2 \u0433\u043e\u0434\u0430, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\"sv },\n+        { R\"(\"category\")\"sv, ResultType::Return, \"category\"sv },\n+        { R\"(\"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\")\"sv, ResultType::Return, \"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\"sv },\n+        { R\"(\"variant\")\"sv, ResultType::Return, \"variant\"sv },\n+        { R\"(\"\")\"sv, ResultType::Return, \"\"sv },\n+        { R\"(\"price\")\"sv, ResultType::Return, \"price\"sv },\n+        { R\"(\"390.00\")\"sv, ResultType::Return, \"390.00\"sv },\n+        { R\"(\"list\")\"sv, ResultType::Return, \"list\"sv },\n+        { R\"(\"/retailrocket/\")\"sv, ResultType::Return, \"/retailrocket/\"sv },\n+        { R\"(\"position\")\"sv, ResultType::Return, \"position\"sv },\n+        { R\"(\"brand\")\"sv, ResultType::Return, \"brand\"sv },\n+        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\"sv, ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\"sv },\n+        { R\"(\"id\")\"sv, ResultType::Return, \"id\"sv },\n+        { R\"(\"888616\")\"sv, ResultType::Return, \"888616\"sv },\n+        { R\"(\"name\")\"sv, ResultType::Return, \"name\"sv },\n+        { \"\\\"3\u0414 \u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u043c\u0443\u0436\u0441\u043a\u0430\u044f \\\\\\\"Collorista\\\\\\\" \u0421\u0432\u0435\u0442\u043b\u043e\u0435 \u0437\u0430\u0432\u0442\u0440\u0430 \u0440-\u0440 XL(52-54), 100% \u0445\u043b\u043e\u043f\u043e\u043a, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\\\"\"sv, ResultType::Return, \"3\u0414 \u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u043c\u0443\u0436\u0441\u043a\u0430\u044f \\\"Collorista\\\" \u0421\u0432\u0435\u0442\u043b\u043e\u0435 \u0437\u0430\u0432\u0442\u0440\u0430 \u0440-\u0440 XL(52-54), 100% \u0445\u043b\u043e\u043f\u043e\u043a, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\"sv },\n+        { R\"(\"category\")\"sv, ResultType::Return, \"category\"sv },\n+        { R\"(\"/\u041e\u0434\u0435\u0436\u0434\u0430 \u0438 \u043e\u0431\u0443\u0432\u044c/\u041c\u0443\u0436\u0441\u043a\u0430\u044f \u043e\u0434\u0435\u0436\u0434\u0430/\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0438/\")\"sv, ResultType::Return, \"/\u041e\u0434\u0435\u0436\u0434\u0430 \u0438 \u043e\u0431\u0443\u0432\u044c/\u041c\u0443\u0436\u0441\u043a\u0430\u044f \u043e\u0434\u0435\u0436\u0434\u0430/\u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0438/\"sv },\n+        { R\"(\"variant\")\"sv, ResultType::Return, \"variant\"sv },\n+        { R\"(\"\")\"sv, ResultType::Return, \"\"sv },\n+        { R\"(\"price\")\"sv, ResultType::Return, \"price\"sv },\n+        { R\"(\"406.60\")\"sv, ResultType::Return, \"406.60\"sv },\n+        { R\"(\"list\")\"sv, ResultType::Return, \"list\"sv },\n+        { R\"(\"/retailrocket/\")\"sv, ResultType::Return, \"/retailrocket/\"sv },\n+        { R\"(\"position\")\"sv, ResultType::Return, \"position\"sv },\n+        { R\"(\"brand\")\"sv, ResultType::Return, \"brand\"sv },\n+        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\"sv, ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\"sv },\n+        { R\"(\"id\")\"sv, ResultType::Return, \"id\"sv },\n+        { R\"(\"913361\")\"sv, ResultType::Return, \"913361\"sv },\n+        { R\"(\"name\")\"sv, ResultType::Return, \"name\"sv },\n+        { R\"(\"3\u0414 \u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f World \u0440-\u0440 8-10, 100% \u0445\u043b\u043e\u043f\u043e\u043a, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\")\"sv, ResultType::Return, \"3\u0414 \u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f World \u0440-\u0440 8-10, 100% \u0445\u043b\u043e\u043f\u043e\u043a, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\"sv },\n+        { R\"(\"category\")\"sv, ResultType::Return, \"category\"sv },\n+        { R\"(\"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\")\"sv, ResultType::Return, \"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\"sv },\n+        { R\"(\"variant\")\"sv, ResultType::Return, \"variant\"sv },\n+        { R\"(\"\")\"sv, ResultType::Return, \"\"sv },\n+        { R\"(\"price\")\"sv, ResultType::Return, \"price\"sv },\n+        { R\"(\"470.00\")\"sv, ResultType::Return, \"470.00\"sv },\n+        { R\"(\"list\")\"sv, ResultType::Return, \"list\"sv },\n+        { R\"(\"/retailrocket/\")\"sv, ResultType::Return, \"/retailrocket/\"sv },\n+        { R\"(\"position\")\"sv, ResultType::Return, \"position\"sv },\n+        { R\"(\"brand\")\"sv, ResultType::Return, \"brand\"sv },\n+        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\"sv, ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\"sv },\n+        { R\"(\"id\")\"sv, ResultType::Return, \"id\"sv },\n+        { R\"(\"913364\")\"sv, ResultType::Return, \"913364\"sv },\n+        { R\"(\"name\")\"sv, ResultType::Return, \"name\"sv },\n+        { R\"(\"3\u0414 \u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f Force \u0440-\u0440 8-10, 100% \u0445\u043b\u043e\u043f\u043e\u043a, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\")\"sv, ResultType::Return, \"3\u0414 \u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f Force \u0440-\u0440 8-10, 100% \u0445\u043b\u043e\u043f\u043e\u043a, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\"sv },\n+        { R\"(\"category\")\"sv, ResultType::Return, \"category\"sv },\n+        { R\"(\"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\")\"sv, ResultType::Return, \"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\"sv },\n+        { R\"(\"variant\")\"sv, ResultType::Return, \"variant\"sv },\n+        { R\"(\"\")\"sv, ResultType::Return, \"\"sv },\n+        { R\"(\"price\")\"sv, ResultType::Return, \"price\"sv },\n+        { R\"(\"470.00\")\"sv, ResultType::Return, \"470.00\"sv },\n+        { R\"(\"list\")\"sv, ResultType::Return, \"list\"sv },\n+        { R\"(\"/retailrocket/\")\"sv, ResultType::Return, \"/retailrocket/\"sv },\n+        { R\"(\"position\")\"sv, ResultType::Return, \"position\"sv },\n+        { R\"(\"brand\")\"sv, ResultType::Return, \"brand\"sv },\n+        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\"sv, ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\"sv },\n+        { R\"(\"id\")\"sv, ResultType::Return, \"id\"sv },\n+        { R\"(\"913367\")\"sv, ResultType::Return, \"913367\"sv },\n+        { R\"(\"name\")\"sv, ResultType::Return, \"name\"sv },\n+        { R\"(\"3\u0414 \u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f Winter tale \u0440-\u0440 8-10, 100% \u0445\u043b\u043e\u043f\u043e\u043a, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\")\"sv, ResultType::Return, \"3\u0414 \u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f Winter tale \u0440-\u0440 8-10, 100% \u0445\u043b\u043e\u043f\u043e\u043a, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\"sv },\n+        { R\"(\"category\")\"sv, ResultType::Return, \"category\"sv },\n+        { R\"(\"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\")\"sv, ResultType::Return, \"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\"sv },\n+        { R\"(\"variant\")\"sv, ResultType::Return, \"variant\"sv },\n+        { R\"(\"\")\"sv, ResultType::Return, \"\"sv },\n+        { R\"(\"price\")\"sv, ResultType::Return, \"price\"sv },\n+        { R\"(\"470.00\")\"sv, ResultType::Return, \"470.00\"sv },\n+        { R\"(\"list\")\"sv, ResultType::Return, \"list\"sv },\n+        { R\"(\"/retailrocket/\")\"sv, ResultType::Return, \"/retailrocket/\"sv },\n+        { R\"(\"position\")\"sv, ResultType::Return, \"position\"sv },\n+        { R\"(\"brand\")\"sv, ResultType::Return, \"brand\"sv },\n+        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\"sv, ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\"sv },\n+        { R\"(\"id\")\"sv, ResultType::Return, \"id\"sv },\n+        { R\"(\"913385\")\"sv, ResultType::Return, \"913385\"sv },\n+        { R\"(\"name\")\"sv, ResultType::Return, \"name\"sv },\n+        { R\"(\"3\u0414 \u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f Moonshine \u0440-\u0440 8-10, 100% \u0445\u043b\u043e\u043f\u043e\u043a, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\")\"sv, ResultType::Return, \"3\u0414 \u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f Moonshine \u0440-\u0440 8-10, 100% \u0445\u043b\u043e\u043f\u043e\u043a, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\"sv },\n+        { R\"(\"category\")\"sv, ResultType::Return, \"category\"sv },\n+        { R\"(\"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\")\"sv, ResultType::Return, \"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\"sv },\n+        { R\"(\"variant\")\"sv, ResultType::Return, \"variant\"sv },\n+        { R\"(\"\")\"sv, ResultType::Return, \"\"sv },\n+        { R\"(\"price\")\"sv, ResultType::Return, \"price\"sv },\n+        { R\"(\"470.00\")\"sv, ResultType::Return, \"470.00\"sv },\n+        { R\"(\"list\")\"sv, ResultType::Return, \"list\"sv },\n+        { R\"(\"/retailrocket/\")\"sv, ResultType::Return, \"/retailrocket/\"sv },\n+        { R\"(\"position\")\"sv, ResultType::Return, \"position\"sv },\n+        { R\"(\"brand\")\"sv, ResultType::Return, \"brand\"sv },\n+        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\"sv, ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\"sv },\n+        { R\"(\"id\")\"sv, ResultType::Return, \"id\"sv },\n+        { R\"(\"913391\")\"sv, ResultType::Return, \"913391\"sv },\n+        { R\"(\"name\")\"sv, ResultType::Return, \"name\"sv },\n+        { R\"(\"3\u0414 \u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f Shaman \u0440-\u0440 8-10, 100% \u0445\u043b\u043e\u043f\u043e\u043a, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\")\"sv, ResultType::Return, \"3\u0414 \u0424\u0443\u0442\u0431\u043e\u043b\u043a\u0430 \u0434\u0435\u0442\u0441\u043a\u0430\u044f Shaman \u0440-\u0440 8-10, 100% \u0445\u043b\u043e\u043f\u043e\u043a, \u0442\u0440\u0438\u043a\u043e\u0442\u0430\u0436\"sv },\n+        { R\"(\"category\")\"sv, ResultType::Return, \"category\"sv },\n+        { R\"(\"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\")\"sv, ResultType::Return, \"/\u041b\u0435\u0442\u043d\u0438\u0435 \u0442\u043e\u0432\u0430\u0440\u044b/\u041b\u0435\u0442\u043d\u0438\u0439 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c/\"sv },\n+        { R\"(\"variant\")\"sv, ResultType::Return, \"variant\"sv },\n+        { R\"(\"\")\"sv, ResultType::Return, \"\"sv },\n+        { R\"(\"price\")\"sv, ResultType::Return, \"price\"sv },\n+        { R\"(\"470.00\")\"sv, ResultType::Return, \"470.00\"sv },\n+        { R\"(\"list\")\"sv, ResultType::Return, \"list\"sv },\n+        { R\"(\"/retailrocket/\")\"sv, ResultType::Return, \"/retailrocket/\"sv },\n+        { R\"(\"position\")\"sv, ResultType::Return, \"position\"sv },\n+        { R\"(\"brand\")\"sv, ResultType::Return, \"brand\"sv },\n+        { R\"(\"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\")\"sv, ResultType::Return, \"/911488/futbolka-detskaya-3d-dolphin-vozrast-1-2-goda-trikotazh/\"sv },\n+        { R\"(\"usertype\")\"sv, ResultType::Return, \"usertype\"sv },\n+        { R\"(\"visitor\")\"sv, ResultType::Return, \"visitor\"sv },\n+        { R\"(\"lang\")\"sv, ResultType::Return, \"lang\"sv },\n+        { R\"(\"ru\")\"sv, ResultType::Return, \"ru\"sv },\n+        { R\"(\"__ym\")\"sv, ResultType::Return, \"__ym\"sv },\n+        { R\"(\"ecommerce\")\"sv, ResultType::Return, \"ecommerce\"sv },\n+        { R\"(\"impressions\")\"sv, ResultType::Return, \"impressions\"sv },\n+        { R\"(\"experiments\")\"sv, ResultType::Return, \"experiments\"sv },\n+        { R\"(\"lang\")\"sv, ResultType::Return, \"lang\"sv },\n+        { R\"(\"ru\")\"sv, ResultType::Return, \"ru\"sv },\n+        { R\"(\"los_portal\")\"sv, ResultType::Return, \"los_portal\"sv },\n+        { R\"(\"los_level\")\"sv, ResultType::Return, \"los_level\"sv },\n+        { R\"(\"none\")\"sv, ResultType::Return, \"none\"sv },\n+        { R\"(\"experiments\")\"sv, ResultType::Return, \"experiments\"sv },\n+        { R\"(\"lang\")\"sv, ResultType::Return, \"lang\"sv },\n+        { R\"(\"ru\")\"sv, ResultType::Return, \"ru\"sv },\n+        { R\"(\"los_portal\")\"sv, ResultType::Return, \"los_portal\"sv },\n+        { R\"(\"los_level\")\"sv, ResultType::Return, \"los_level\"sv },\n+        { R\"(\"none\")\"sv, ResultType::Return, \"none\"sv },\n+        { R\"(\"experiments\")\"sv, ResultType::Return, \"experiments\"sv },\n+        { R\"(\"lang\")\"sv, ResultType::Return, \"lang\"sv },\n+        { R\"(\"ru\")\"sv, ResultType::Return, \"ru\"sv },\n+        { R\"(\"los_portal\")\"sv, ResultType::Return, \"los_portal\"sv },\n+        { R\"(\"los_level\")\"sv, ResultType::Return, \"los_level\"sv },\n+        { R\"(\"none\")\"sv, ResultType::Return, \"none\"sv },\n+        { R\"(\"experiments\")\"sv, ResultType::Return, \"experiments\"sv },\n+        { R\"(\"lang\")\"sv, ResultType::Return, \"lang\"sv },\n+        { R\"(\"ru\")\"sv, ResultType::Return, \"ru\"sv },\n+        { R\"(\"los_portal\")\"sv, ResultType::Return, \"los_portal\"sv },\n+        { R\"(\"los_level\")\"sv, ResultType::Return, \"los_level\"sv },\n+        { R\"(\"none\")\"sv, ResultType::Return, \"none\"sv },\n+        { R\"(\"experiments\")\"sv, ResultType::Return, \"experiments\"sv },\n+        { R\"(\"lang\")\"sv, ResultType::Return, \"lang\"sv },\n+        { R\"(\"ru\")\"sv, ResultType::Return, \"ru\"sv },\n+        { R\"(\"los_portal\")\"sv, ResultType::Return, \"los_portal\"sv },\n+        { R\"(\"los_level\")\"sv, ResultType::Return, \"los_level\"sv },\n+        { R\"(\"none\")\"sv, ResultType::Return, \"none\"sv },\n+        { R\"(\"__ym\")\"sv, ResultType::Return, \"__ym\"sv },\n+        { R\"(\"ecommerce\")\"sv, ResultType::Return, \"ecommerce\"sv },\n+        { R\"(\"currencyCode\")\"sv, ResultType::Return, \"currencyCode\"sv },\n+        { R\"(\"RUR\")\"sv, ResultType::Return, \"RUR\"sv },\n+        { R\"(\"impressions\")\"sv, ResultType::Return, \"impressions\"sv },\n+        { R\"(\"name\")\"sv, ResultType::Return, \"name\"sv },\n+        { R\"(\"\u0427\u0430\u0439\u043d\u0438\u043a \u044d\u043b\u0435\u043a\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0439 Mystery MEK-1627, \u0431\u0435\u043b\u044b\u0439\")\"sv, ResultType::Return, \"\u0427\u0430\u0439\u043d\u0438\u043a \u044d\u043b\u0435\u043a\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0439 Mystery MEK-1627, \u0431\u0435\u043b\u044b\u0439\"sv },\n+        { R\"(\"brand\")\"sv, ResultType::Return, \"brand\"sv },\n+        { R\"(\"Mystery\")\"sv, ResultType::Return, \"Mystery\"sv },\n+        { R\"(\"id\")\"sv, ResultType::Return, \"id\"sv },\n+        { R\"(\"187180\")\"sv, ResultType::Return, \"187180\"sv },\n+        { R\"(\"category\")\"sv, ResultType::Return, \"category\"sv },\n+        { R\"(\"\u041c\u0435\u043b\u043a\u0430\u044f \u0431\u044b\u0442\u043e\u0432\u0430\u044f \u0442\u0435\u0445\u043d\u0438\u043a\u0430/\u041c\u0435\u043b\u043a\u0438\u0435 \u043a\u0443\u0445\u043e\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0431\u043e\u0440\u044b/\u0427\u0430\u0439\u043d\u0438\u043a\u0438 \u044d\u043b\u0435\u043a\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0435/Mystery\")\"sv, ResultType::Return, \"\u041c\u0435\u043b\u043a\u0430\u044f \u0431\u044b\u0442\u043e\u0432\u0430\u044f \u0442\u0435\u0445\u043d\u0438\u043a\u0430/\u041c\u0435\u043b\u043a\u0438\u0435 \u043a\u0443\u0445\u043e\u043d\u043d\u044b\u0435 \u043f\u0440\u0438\u0431\u043e\u0440\u044b/\u0427\u0430\u0439\u043d\u0438\u043a\u0438 \u044d\u043b\u0435\u043a\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0435/Mystery\"sv },\n+        { R\"(\"variant\")\"sv, ResultType::Return, \"variant\"sv },\n+        { R\"(\"\u0412 \u043d\u0430\u043b\u0438\u0447\u0438\u0438\")\"sv, ResultType::Return, \"\u0412 \u043d\u0430\u043b\u0438\u0447\u0438\u0438\"sv },\n+        { R\"(\"price\")\"sv, ResultType::Return, \"price\"sv },\n+        { R\"(\"1630.00\")\"sv, ResultType::Return, \"1630.00\"sv },\n+        { R\"(\"list\")\"sv, ResultType::Return, \"list\"sv },\n+        { R\"(\"\u041a\u0430\u0440\u0442\u043e\u0447\u043a\u0430\")\"sv, ResultType::Return, \"\u041a\u0430\u0440\u0442\u043e\u0447\u043a\u0430\"sv },\n+        { R\"(\"position\")\"sv, ResultType::Return, \"position\"sv },\n+        { R\"(\"detail\")\"sv, ResultType::Return, \"detail\"sv },\n+        { R\"(\"actionField\")\"sv, ResultType::Return, \"actionField\"sv },\n+        { R\"(\"list\")\"sv, ResultType::Return, \"list\"sv },\n+        { \"\\0\\\"\"sv, ResultType::Throw, \"JSON: expected \\\", got \\0\"sv },\n+        { \"\\\"/igrushki/konstruktory\\0\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/1290414/komplekt-zhenskiy-dzhemper-plusbryuki-m-254-09-malina-plustemno-siniy-\\0a\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/\u0422\u0432\u043e\u0440\u0447\u0435\u0441\u0442\u0432\u043e/\u0420\u0438\u0441\u043e\u0432\u0430\u043d\u0438\u0435/\u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0438 \u043a\u0440\u0430\\0a\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\u0421\u0442\u0440\u043e\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e \u0438 \u0440\u0435\u043c\u043e\u043d\u0442/\u0421\u0438\u043b\u043e\u0432\u0430\u044f \u0442\u0435\u0445\u043d\u0438\u043a\u0430/\u0417\u0430\u0440\u044f\u0434\u043d\u044b\u0435 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0445 \u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u043e\u0432/\u041f\u0443\u0441\u043a\u043e-\u0437\u0430\u0440\u044f\u0434\u043d\u044b\u0435 \u0443\u0441\u0442\u0440\\xD0\\0a\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\u0421\u0442\u0440\u043e\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e \u0438 \u0440\u0435\u043c\u043e\u043d\u0442/\u0421\u0438\u043b\u043e\u0432\u0430\u044f \u0442\u0435\u0445\u043d\u0438\u043a\u0430/\u0417\u0430\u0440\u044f\u0434\u043d\u044b\u0435 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\\xD0\\0t\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\u0421\u0442\u0440\u043e\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e \u0438 \u0440\u0435\u043c\u043e\u043d\u0442/\u0421\u0438\u043b\u043e\u0432\u0430\u044f \u0442\u0435\u0445\u043d\u0438\u043a\u0430/\u0417\u0430\u0440\u044f\u0434\u043d\u044b\u0435 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c\\0k\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\0t\"sv, ResultType::Throw, \"JSON: expected \\\", got \\0\"sv },\n+        { \"\\\"/\u0425\u043e\u0437\u0442\u043e\u0432\u0430\u0440\u044b/\u0425\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0432\u0435\u0449\u0435\u0439 \u0438 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\\xD1\\0t\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/\u0425\u043e\u0437\u0442\u043e\u0432\u0430\u0440\u044b/\u0422\u043e\u0432\u0430\u0440\u044b \u0434\u043b\u044f \u0441\u0442\u0438\u0440\\0a\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"li\\0a\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/734859/samolet-radioupravlyaemyy-istrebitel-rabotaet-o\\0k\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/kosmetika-i-parfyum/parfyumeriya/mu\\0t\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/ko\\0\\x04\"sv, ResultType::Throw, \"JSON: begin >= end.\"sv },\n+        { \"\"sv, ResultType::Throw, \"JSON: expected \\\", got \\0\"sv },\n+        { \"\\\"/stroitelstvo-i-remont/stroit\\0t\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/stroitelstvo-i-remont/stroitelnyy-instrument/av\\0k\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/s\\0a\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/\u0421\u0442\u0440\u043e\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e \u0438 \u0440\u0435\u043c\u043e\u043d\u0442/\u0421\u0442\u0440\u043e\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442/\u0418\u0437\u043c\\0e\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/avto/soputstvuy\\0l\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/str\\0\\xD0\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\u041e\u0442\u0432\u0435\u0440\u0442\u043a\u0430 2 \u0432 1 \\\\\\\"TUNDRA basic\\\\\\\" 5\u044575 \u043c\u043c (+,-) \\0\\xFF\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/stroitelstvo-i-remont/stroitelnyy-instrument/avtoinstrumen\\0\\0\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\u041c\u0435\u043b\u043a\u0430\u044f \u0431\u044b\u0442\u043e\u0432\u0430\u044f \u0442\u0435\u0445\u043d\u0438\u043a\u0430/\u041c\u0435\u043b\u043a\u0438\\xD0\\0\\0\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\u041f\u0440\u044f\u0436\u0430 \\\\\\\"\u0411\u0430\u043c\u0431\u0443\u043a \u0441\u0442\u0440\u0435\u0439\u0447\\\\0\\0\\0\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\u041a\u0430\u0440\u0430\u043d\u0434\u0430\u0448 \u0447\u0451\u0440\u043d\u043e\u0433\u0440\u0430\u0444\u0438\u0442\u043d\u044b\\xD0\\0\\xD0\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/\u0422\u0432\u043e\u0440\u0447\u0435\u0441\u0442\u0432\u043e/\u0420\u0443\u043a\u043e\u0434\u0435\u043b\u0438\u0435, \u0430\u043f\u043f\u043b\u0438\u043a\u0430\u0446\u0438\u0438/\u041f\u0440\u044f\u0436\u0430 \u0438 \u0448\u0435\u0440\u0441\u0442\u044c \u0434\u043b\u044f \\xD0\\0l\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/1071547/karandash-chernografitnyy-volshebstvo-nv-kruglyy-d-7-2mm-dl-176mm-plast-tuba/\\0e\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"ca\\0e\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"ca\\0e\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/1165424/chipbord-vyrubnoy-dlya-skrapbukinga-malyshi-mikki-maus-disney-bebi\\0t\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/posuda/kuhonnye-prinadlezhnosti-i-i\\0d\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/\u041a\u0430\u043d\u0446\u0442\u043e\u0432\u0430\u0440\u044b/\u0415\u0436\u0435\u0434\u043d\u0435\u0432\u043d\u0438\u043a\u0438 \u0438 \u0431\u043b\u043e\u043a\u043d\\xD0\\0\\0\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/kanctovary/ezhednevniki-i-blok\\0a\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\u0421\u0442\u0430\u043a\u0430\u043d \\xD0\\0a\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\u041d\u0430\u0431\u043e\u0440 \u0431\u0443\u043c\u0430\u0433\u0438 \u0434\u043b\u044f \u0441\u043a\u0440\u0430\u043f\u0431\u0443\u043a\u0438\u043d\u0433\u0430 \\\\\\\"\u041c\u043e\u0438 \u043f\u0435\u0440\u0432\u044b\u0439 \u0433\u043e\u0434\u0438\u043a\\\\\\\": \u041c\u0438\u043a\u043a\u0438 \u041c\u0430\u0443\u0441, \u0414\u0438\u0441\u043d\u0435\u0439 \u0431\u044d\u0431\u0438, 12 \u043b\u0438\u0441\u0442\u043e\u0432 29.5 \u0445 29.5 \u0441\u043c, 160\\0\\x80\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"c\\0\\0\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\u041e\u0440\u0433\u0430\u043d\u0430\u0439\u0437\u0435\u0440 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0430\u043a\u0441\u0435\u0441\u0441\u0443\u0430\u0440\u043e\u0432, \\0\\0\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"quantity\\00\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\u0421\u043c\u0435\u043d\u043d\u044b\u0439 \u0431\u043b\u043e\u043a \u0434\u043b\u044f \u0442\u0435\u0442\u0440\u0430\u0434\u0435\u0439 \u043d\u0430 \u043a\u043e\u043b\u044c\u0446\u0430\u0445 \u04105, 160 \u043b\u0438\u0441\u0442\u043e\u0432 \u043a\u043b\u0435\u0442\u043a\u0430, \u043e\u0444\u0441\u0435\u0442 \\xE2\\x84\\0=\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/\u0421\u0443\u0432\u0435\u043d\u0438\u0440\u044b/\u0424\\xD0\\0 \"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\\0\\\"\"sv, ResultType::Return, \"\\0\"sv },\n+        { \"\\\"\\0\\x04\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"va\\0\\0\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"ca\\0\\0\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\u0412 \\0\\x04\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/letnie-tovary/z\\0\\x04\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\u041f\u043e\u0441\u0443\u0434\u043e\u043c\u043e\u0435\u0447\u043d\u0430\u044f \u043c\u0430\u0448\u0438\u043d\u0430 Ha\\0=\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\u041a\u0440\u0443\u043f\u043d\u0430\u044f \u0431\u044b\u0442\u043e\u0432\\0\\0\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\u041f\u043e\u043b\u043e\u0447\u043d\u0430\u044f \u0430\u043a\u0443\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 Magnat Needl\\0\\0\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"brand\\00\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\\0d\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"pos\\0 \"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"c\\0o\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"var\\0\\0\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\u0422\u0435\u043b\u0435\u0432\u0438\u0437\u043e\u0440\u044b \u0438 \u0432\u0438\u0434\u0435\u043e\u0442\u0435\u0445\u043d\u0438\u043a\u0430/\u0412\u0441\u0451 \u0434\u043b\u044f \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u043a\u0438\u043d\u043e\u0442\u0435\u0430\u0442\u0440\\0=\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\u0424\u043b\u0435\u0448-\u0434\u0438\u0441\u043a Transcend JetFlash 620 8GB (TS8GJF62\\0\\0\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\u0422\u0430\u0431\u0443\u0440\u0435\u0442 \u041c\u0435\u0433\\0\\xD0\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"variant\\0\\x04\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\u041a\u0430\u0442\u0430\u043b\\xD0\\0\\\"\"sv, ResultType::Return, \"\u041a\u0430\u0442\u0430\u043b\\xD0\\0\"sv },\n+        { \"\\\"\u041a\\0\\0\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\u041f\u043e\u043b\u043e\u0447\u043d\u0430\u044f \u0430\u043a\u0443\u0441\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0441\u0438\u0441\u0442\u0435\u043c\u0430 Magnat Needl\\0\\0\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"brand\\00\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\\0d\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"pos\\0 \"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"c\\0o\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"17\\0o\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/igrushki/razvivayusc\\0 \"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\u041a\u043b\u044e\u0447\u043d\u0438\u0446\u0430 \\\\\\\"\\0 \"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/\u0418\u0433\u0440\\xD1\\0 \"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/\u0418\u0433\u0440\u0443\u0448\u043a\u0438/\u0418\u0433\u0440\u0443\u0448\u043a\u0438 \u0434\u043b\u044f \u0434\u0435\u0432\u043e\u0447\u0435\u043a/\u0418\u0433\u0440\u043e\u0432\u044b\u0435 \u043c\u043e\u0434\u0443\u043b\u0438 \u0434\u043b\\xD1\\0o\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\u041a\u0440\u0443\u043f\u043d\u0430\u044f \u0431\u044b\u0442\u043e\u0432\u0430\u044f \u0442\u0435\u0445\u043d\u0438\u043a\u0430/\u0421\u0442\u0438\u0440\u0430\u043b\u044c\u043d\u044b\u0435 \u043c\u0430\u0448\u0438\u043d\u044b/\u0421 \u0444\u0440\u043e\u043d\u0442\\xD0\\0o\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\0 \"sv, ResultType::Throw, \"JSON: expected \\\", got \\0\"sv },\n+        { \"\\\"\u0421\u0432\u0435\u0442\u043e\u0434\u0438\u043e\u0434\u043d\u0430\u044f \u043b\u0435\u043d\u0442\u0430 SMD3528, 5 \u043c. IP33, 60LED, \u0437\u0435\u043b\u0435\u043d\u044b\u0439, 4,8W/\u043c\u0435\u0442\\xD1\\0 \"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\u0421\u0430\u043d\u0442\u0435\u0445\u043d\u0438\u043a\u0430/\u041c\u0435\u0431\u0435\u043b\u044c \u0434\u043b\u044f \u0432\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u043c\u043d\u0430\u0442/\u0421\u0442\u043e\u043b\\0o\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\0o\"sv, ResultType::Throw, \"JSON: expected \\\", got \\0\"sv },\n+        { \"\\\"/igrushki/konstruktory\\0 \"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/posuda/kuhonnye-prinadlezhnosti-i-instrumenty/kuhonnye-pr\\0 \"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/1290414/komplekt-zhenskiy-dzhemper-plusbryuki-m-254-09-malina-plustemno-siniy-\\0o\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/\u0422\u0432\u043e\u0440\u0447\u0435\u0441\u0442\u0432\u043e/\u0420\u0438\u0441\u043e\u0432\u0430\u043d\u0438\u0435/\u0418\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u044b \u0438 \u043a\u0440\u0430\\0o\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\u0421\u0442\u0440\u043e\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e \u0438 \u0440\u0435\u043c\u043e\u043d\u0442/\u0421\u0438\u043b\u043e\u0432\u0430\u044f \u0442\u0435\u0445\u043d\u0438\u043a\u0430/\u0417\u0430\u0440\u044f\u0434\u043d\u044b\u0435 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0445 \u0430\u043a\u043a\u0443\u043c\u0443\u043b\u044f\u0442\u043e\u0440\u043e\u0432/\u041f\u0443\u0441\u043a\u043e-\u0437\u0430\u0440\u044f\u0434\u043d\u044b\u0435 \u0443\u0441\u0442\u0440\\xD0\\0o\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\u0421\u0442\u0440\u043e\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e \u0438 \u0440\u0435\u043c\u043e\u043d\u0442/\u0421\u0438\u043b\u043e\u0432\u0430\u044f \u0442\u0435\u0445\u043d\u0438\u043a\u0430/\u0417\u0430\u0440\u044f\u0434\u043d\u044b\u0435 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\\xD0\\0 \"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\u0421\u0442\u0440\u043e\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e \u0438 \u0440\u0435\u043c\u043e\u043d\u0442/\u0421\u0438\u043b\u043e\u0432\u0430\u044f \u0442\u0435\u0445\u043d\u0438\u043a\u0430/\u0417\u0430\u0440\u044f\u0434\u043d\u044b\u0435 \u0443\u0441\u0442\u0440\u043e\u0439\u0441\u0442\u0432\u0430 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c\\0d\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\0 \"sv, ResultType::Throw, \"JSON: expected \\\", got \\0\"sv },\n+        { \"\\\"/\u0425\u043e\u0437\u0442\u043e\u0432\u0430\u0440\u044b/\u0425\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0432\u0435\u0449\u0435\u0439 \u0438 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\\xD1\\0 \"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/\u0425\u043e\u0437\u0442\u043e\u0432\u0430\u0440\u044b/\u0422\u043e\u0432\u0430\u0440\u044b \u0434\u043b\u044f \u0441\u0442\u0438\u0440\\0o\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"li\\0o\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/igrushki/igrus\\0d\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/734859/samolet-radioupravlyaemyy-istrebitel-rabotaet-o\\0 \"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/kosmetika-i-parfyum/parfyumeriya/mu\\00\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/ko\\0\\0\"sv, ResultType::Throw, \"JSON: begin >= end.\"sv },\n+        { \"\\\"/avto/avtomobilnyy\\0\\0\"sv, ResultType::Throw, \"JSON: begin >= end.\"sv },\n+        { \"\\\"/stroitelstvo-i-remont/stroit\\00\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/stroitelstvo-i-remont/stroitelnyy-instrument/av\\0 \"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/s\\0d\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/\u0421\u0442\u0440\u043e\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e \u0438 \u0440\u0435\u043c\u043e\u043d\u0442/\u0421\u0442\u0440\u043e\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442/\u0418\u0437\u043c\\0o\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/avto/soputstvuy\\0\\\"\"sv, ResultType::Return, \"/avto/soputstvuy\\0\"sv },\n+        { \"\\\"/str\\0k\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\u041e\u0442\u0432\u0435\u0440\u0442\u043a\u0430 2 \u0432 1 \\\\\\\"TUNDRA basic\\\\\\\" 5\u044575 \u043c\u043c (+,-) \\0\\xD0\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/stroitelstvo-i-remont/stroitelnyy-instrument/avtoinstrumen\\0=\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\u0427\u0430\u0439\u043d\u0438\u043a \u044d\u043b\u0435\u043a\u0442\u0440\u0438\u0447\u0435\u0441\u043a\u0438\u0439 Vitesse\\0=\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\u041c\u0435\u043b\u043a\u0430\u044f \u0431\u044b\u0442\u043e\u0432\u0430\u044f \u0442\u0435\u0445\u043d\u0438\u043a\u0430/\u041c\u0435\u043b\u043a\u0438\\xD0\\0\\xD0\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\u041f\u0440\u044f\u0436\u0430 \\\\\\\"\u0411\u0430\u043c\u0431\u0443\u043a \u0441\u0442\u0440\u0435\u0439\u0447\\\\0\u043e\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\u041a\u0430\u0440\u0430\u043d\u0434\u0430\u0448 \u0447\u0451\u0440\u043d\u043e\u0433\u0440\u0430\u0444\u0438\u0442\u043d\u044b\\xD0\\0k\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/\u0422\u0432\u043e\u0440\u0447\u0435\u0441\u0442\u0432\u043e/\u0420\u0443\u043a\u043e\u0434\u0435\u043b\u0438\u0435, \u0430\u043f\u043f\u043b\u0438\u043a\u0430\u0446\u0438\u0438/\u041f\u0440\u044f\u0436\u0430 \u0438 \u0448\u0435\u0440\u0441\u0442\u044c \u0434\u043b\u044f \\xD0\\0\\\"\"sv, ResultType::Return, \"/\u0422\u0432\u043e\u0440\u0447\u0435\u0441\u0442\u0432\u043e/\u0420\u0443\u043a\u043e\u0434\u0435\u043b\u0438\u0435, \u0430\u043f\u043f\u043b\u0438\u043a\u0430\u0446\u0438\u0438/\u041f\u0440\u044f\u0436\u0430 \u0438 \u0448\u0435\u0440\u0441\u0442\u044c \u0434\u043b\u044f \\xD0\\0\"sv },\n+        { \"\\\"/1071547/karandash-chernografitnyy-volshebstvo-nv-kruglyy-d-7-2mm-dl-176mm-plast-tuba/\\0o\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"ca\\0o\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/\u041f\u043e\u0434\u0430\u0440\u043e\\0o\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\u0421\u0440\u0435\u0434\u0441\u0442\u0432\u043e \u0434\u043b\u044f \u043f\u0440\u043e\u0447\u0438\u0441\\xD1\\0o\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"i\\0o\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/p\\0\\\"\"sv, ResultType::Return, \"/p\\0\"sv },\n+        { \"\\\"/\u0421\u0443\u0432\u0435\u043d\u0438\u0440\u044b/\u041c\u0430\u0433\u043d\u0438\u0442\u044b, \u043d\\xD0\\0k\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\u0414\u0435\u0440\u0435\u0432\\xD0\\0=\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/prazdniki/svadba/svadebnaya-c\\0\\xD0\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/\u041a\u0430\u043d\u0446\u0442\\0d\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/\u041f\u0440\u0430\u0437\u0434\u043d\u0438\u043a\u0438/\u0422\u043e\\xD0\\0 \"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"v\\0 \"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/\u041a\u043e\u0441\u043c\u0435\u0442\u0438\u043a\u0430 \\xD0\\0d\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/\u0421\u043f\u043e\u0440\u0442 \u0438 \u043e\u0442\u0434\u044b\u0445/\u041d\u0430\u0441\u0442\u043e\u043b\u044c\u043d\u044b\u0435 \u0438\u0433\u0440\u044b/\u041f\u043e\u043a\u0435\u0440, \u0440\u0443\u043b\u0435\\xD1\\0\\xD0\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"categ\\0=\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/retailr\\0k\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/retailrocket\\0k\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\u0415\u0436\u0435\u0434\u043d\u0435\u0432\u043d\u0438\u043a \u043d\u0435\u0434\u0430\u0442 \u04105 140\u043b \u043a\u043b,\u043b\u044f\u0441\u0441\u0435,\u043e\u0431\u043b \u043f\u0432\\0=\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/432809/ezhednevnik-organayzer-sredniy-s-remeshkom-na-knopke-v-oblozhke-kalkulyator-kalendar-do-\\0\\xD0\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/1165424/chipbord-vyrubnoy-dlya-skrapbukinga-malyshi-mikki-maus-disney-bebi\\0d\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/posuda/kuhonnye-prinadlezhnosti-i-i\\0 \"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/\u041a\u0430\u043d\u0446\u0442\u043e\u0432\u0430\u0440\u044b/\u0415\u0436\u0435\u0434\u043d\u0435\u0432\u043d\u0438\u043a\u0438 \u0438 \u0431\u043b\u043e\u043a\u043d\\xD0\\0o\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"/kanctovary/ezhednevniki-i-blok\\00\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\u0421\u0442\u0430\u043a\u0430\u043d \\xD0\\0\\0\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"\u041d\u0430\u0431\u043e\u0440 \u0431\u0443\u043c\u0430\u0433\u0438 \u0434\u043b\u044f \u0441\u043a\u0440\u0430\u043f\u0431\u0443\u043a\u0438\u043d\u0433\u0430 \\\\\\\"\u041c\u043e\u0438 \u043f\u0435\u0440\u0432\u044b\u0439 \u0433\u043e\u0434\u0438\u043a\\\\\\\": \u041c\u0438\u043a\u043a\u0438 \u041c\u0430\u0443\u0441, \u0414\u0438\u0441\u043d\u0435\u0439 \u0431\u044d\u0431\u0438, 12 \u043b\u0438\u0441\u0442\u043e\u0432 29.5 \u0445 29.5 \u0441\u043c, 160\\0\\0\"sv, ResultType::Throw, \"JSON: incorrect syntax (expected end of string, found end of JSON).\"sv },\n+        { \"\\\"c\\0\\\"\"sv, ResultType::Return, \"c\\0\"sv },\n+    };\n+\n+    for (auto i : boost::irange(0, 1/*00000*/))\n+    {\n+        static_cast<void>(i);\n+\n+        for (auto & r : test_data)\n+        {\n+            try\n+            {\n+                JSON j(r.input.data(), r.input.data() + r.input.size());\n+\n+                ASSERT_EQ(j.getString(), r.result);\n+                ASSERT_EQ(r.result_type, ResultType::Return);\n+            }\n+            catch (const JSONException &)\n+            {\n+                ASSERT_EQ(r.result_type, ResultType::Throw);\n+            }\n+        }\n+    }\n+}\ndiff --git a/base/common/tests/local_date_time_comparison.cpp b/src/Common/tests/gtest_local_date_time_comparison.cpp\nsimilarity index 79%\nrename from base/common/tests/local_date_time_comparison.cpp\nrename to src/Common/tests/gtest_local_date_time_comparison.cpp\nindex 5492ec310042..f75c26471005 100644\n--- a/base/common/tests/local_date_time_comparison.cpp\n+++ b/src/Common/tests/gtest_local_date_time_comparison.cpp\n@@ -1,5 +1,6 @@\n #include <iostream>\n #include <stdexcept>\n+#include <gtest/gtest.h>\n \n #include <common/LocalDateTime.h>\n \n@@ -16,14 +17,13 @@ void checkComparison()\n     LocalDateTime a(\"2018-07-18 01:02:03\");\n     LocalDateTime b(\"2018-07-18 01:02:03\");\n \n-    if (a != b)\n-        throw std::runtime_error(\"Test failed\");\n+    EXPECT_EQ(a, b);\n+    EXPECT_FALSE(a != b);\n }\n \n \n-int main(int, char **)\n+TEST(LocalDateTime, Comparison)\n {\n     fillStackWithGarbage();\n     checkComparison();\n-    return 0;\n }\ndiff --git a/base/common/tests/gtest_strong_typedef.cpp b/src/Common/tests/gtest_strong_typedef.cpp\nsimilarity index 100%\nrename from base/common/tests/gtest_strong_typedef.cpp\nrename to src/Common/tests/gtest_strong_typedef.cpp\ndiff --git a/src/Core/tests/gtest_DecimalFunctions.cpp b/src/Core/tests/gtest_DecimalFunctions.cpp\nindex be64661176bd..1069a810d64f 100644\n--- a/src/Core/tests/gtest_DecimalFunctions.cpp\n+++ b/src/Core/tests/gtest_DecimalFunctions.cpp\n@@ -14,7 +14,7 @@ struct DecimalUtilsSplitAndCombineTestParam\n     Decimal64 decimal_value;\n     uint8_t scale;\n \n-    DecimalUtils::DecimalComponents<typename Decimal64::NativeType> components;\n+    DecimalUtils::DecimalComponents<Decimal64> components;\n };\n \n std::ostream & operator << (std::ostream & ostr, const DecimalUtilsSplitAndCombineTestParam & param)\ndiff --git a/src/IO/tests/CMakeLists.txt b/src/IO/tests/CMakeLists.txt\nindex 79800d8339c5..bcd0a8bba241 100644\n--- a/src/IO/tests/CMakeLists.txt\n+++ b/src/IO/tests/CMakeLists.txt\n@@ -39,11 +39,9 @@ target_link_libraries (o_direct_and_dirty_pages PRIVATE clickhouse_common_io)\n \n add_executable (hashing_write_buffer hashing_write_buffer.cpp)\n target_link_libraries (hashing_write_buffer PRIVATE clickhouse_common_io)\n-add_check(hashing_write_buffer)\n \n add_executable (hashing_read_buffer hashing_read_buffer.cpp)\n target_link_libraries (hashing_read_buffer PRIVATE clickhouse_common_io)\n-add_check (hashing_read_buffer)\n \n add_executable (io_operators io_operators.cpp)\n target_link_libraries (io_operators PRIVATE clickhouse_common_io)\ndiff --git a/src/Interpreters/tests/CMakeLists.txt b/src/Interpreters/tests/CMakeLists.txt\nindex 1bc9d7fbacbd..8905d2fe6e62 100644\n--- a/src/Interpreters/tests/CMakeLists.txt\n+++ b/src/Interpreters/tests/CMakeLists.txt\n@@ -38,7 +38,6 @@ target_link_libraries (two_level_hash_map PRIVATE dbms)\n \n add_executable (in_join_subqueries_preprocessor in_join_subqueries_preprocessor.cpp)\n target_link_libraries (in_join_subqueries_preprocessor PRIVATE clickhouse_aggregate_functions dbms clickhouse_parsers)\n-add_check(in_join_subqueries_preprocessor)\n \n if (OS_LINUX)\n     add_executable (internal_iotop internal_iotop.cpp)\ndiff --git a/src/Storages/tests/CMakeLists.txt b/src/Storages/tests/CMakeLists.txt\nindex b58fed9edf5d..59d448293634 100644\n--- a/src/Storages/tests/CMakeLists.txt\n+++ b/src/Storages/tests/CMakeLists.txt\n@@ -1,6 +1,3 @@\n-add_executable (part_name part_name.cpp)\n-target_link_libraries (part_name PRIVATE dbms)\n-\n add_executable (remove_symlink_directory remove_symlink_directory.cpp)\n target_link_libraries (remove_symlink_directory PRIVATE dbms)\n \ndiff --git a/src/Storages/tests/part_name.cpp b/src/Storages/tests/part_name.cpp\ndeleted file mode 100644\nindex 79c5578a8ca8..000000000000\n--- a/src/Storages/tests/part_name.cpp\n+++ /dev/null\n@@ -1,21 +0,0 @@\n-#include <IO/ReadHelpers.h>\n-#include <Storages/MergeTree/MergeTreePartInfo.h>\n-#include <common/LocalDateTime.h>\n-\n-\n-int main(int, char **)\n-{\n-    DayNum today = DateLUT::instance().toDayNum(time(nullptr));\n-\n-    for (DayNum date = today; DayNum(date + 10) > today; --date)\n-    {\n-        DB::MergeTreePartInfo part_info(\"partition\", 0, 0, 0);\n-        std::string name = part_info.getPartNameV0(date, date);\n-        std::cerr << name << '\\n';\n-\n-        time_t time = DateLUT::instance().YYYYMMDDToDate(DB::parse<UInt32>(name));\n-        std::cerr << LocalDateTime(time) << '\\n';\n-    }\n-\n-    return 0;\n-}\ndiff --git a/tests/performance/date_time_long.xml b/tests/performance/date_time_long.xml\nindex 1229631a4340..ae41602e825e 100644\n--- a/tests/performance/date_time_long.xml\n+++ b/tests/performance/date_time_long.xml\n@@ -1,5 +1,4 @@\n <test>\n-    <tags><tag>long</tag></tags>\n     <substitutions>\n        <substitution>\n            <name>datetime_transform</name>\n@@ -78,7 +77,6 @@\n                <value>toYYYYMMDDhhmmss</value>\n \n                <value>toRelativeQuarterNum</value>\n-               <value>toUnixTimestamp</value>\n            </values>\n         </substitution>\n         <substitution>\ndiff --git a/tests/queries/0_stateless/00189_time_zones.reference b/tests/queries/0_stateless/00189_time_zones.reference\nindex 664c30056dea..e7e5a71782aa 100644\n--- a/tests/queries/0_stateless/00189_time_zones.reference\n+++ b/tests/queries/0_stateless/00189_time_zones.reference\n@@ -179,13 +179,13 @@ toRelativeYearNum\n 44\n 44\n 44\n-44\n+45\n toRelativeMonthNum\n 536\n 536\n 536\n 537\n-536\n+537\n toRelativeWeekNum\n 2335\n 2335\n@@ -197,12 +197,13 @@ toRelativeDayNum\n 16343\n 16343\n 16344\n-16343\n+16344\n toRelativeHourNum\n 392251\n 392251\n 392251\n 392251\n+392252\n toRelativeMinuteNum\n 23535110\n 23535110\ndiff --git a/tests/queries/0_stateless/00189_time_zones.sql b/tests/queries/0_stateless/00189_time_zones.sql\nindex a0ef5b595170..36c7dfb402a1 100644\n--- a/tests/queries/0_stateless/00189_time_zones.sql\n+++ b/tests/queries/0_stateless/00189_time_zones.sql\n@@ -277,7 +277,8 @@ SELECT toRelativeDayNum(toDateTime(1412106600), 'Europe/Moscow') - toRelativeDay\n SELECT toRelativeDayNum(toDateTime(1412106600), 'Europe/Paris') - toRelativeDayNum(toDateTime(0), 'Europe/Paris');\n SELECT toRelativeDayNum(toDateTime(1412106600), 'Europe/London') - toRelativeDayNum(toDateTime(0), 'Europe/London');\n SELECT toRelativeDayNum(toDateTime(1412106600), 'Asia/Tokyo') - toRelativeDayNum(toDateTime(0), 'Asia/Tokyo');\n-SELECT toRelativeDayNum(toDateTime(1412106600), 'Pacific/Pitcairn') - toRelativeDayNum(toDateTime(0), 'Pacific/Pitcairn');\n+-- NOTE: toRelativeDayNum(toDateTime(0), 'Pacific/Pitcairn') overflows from -1 to 65535\n+SELECT toUInt16(toRelativeDayNum(toDateTime(1412106600), 'Pacific/Pitcairn') - toRelativeDayNum(toDateTime(0), 'Pacific/Pitcairn'));\n \n /* toRelativeHourNum */\n \n@@ -286,7 +287,7 @@ SELECT toRelativeHourNum(toDateTime(1412106600), 'Europe/Moscow') - toRelativeHo\n SELECT toRelativeHourNum(toDateTime(1412106600), 'Europe/Paris') - toRelativeHourNum(toDateTime(0), 'Europe/Paris');\n SELECT toRelativeHourNum(toDateTime(1412106600), 'Europe/London') - toRelativeHourNum(toDateTime(0), 'Europe/London');\n SELECT toRelativeHourNum(toDateTime(1412106600), 'Asia/Tokyo') - toRelativeHourNum(toDateTime(0), 'Asia/Tokyo');\n--- known wrong result: SELECT toRelativeHourNum(toDateTime(1412106600), 'Pacific/Pitcairn') - toRelativeHourNum(toDateTime(0), 'Pacific/Pitcairn');\n+SELECT toRelativeHourNum(toDateTime(1412106600), 'Pacific/Pitcairn') - toRelativeHourNum(toDateTime(0), 'Pacific/Pitcairn');\n \n /* toRelativeMinuteNum */\n \ndiff --git a/tests/queries/0_stateless/00921_datetime64_compatibility.python b/tests/queries/0_stateless/00921_datetime64_compatibility_long.python\nsimilarity index 95%\nrename from tests/queries/0_stateless/00921_datetime64_compatibility.python\nrename to tests/queries/0_stateless/00921_datetime64_compatibility_long.python\nindex bf0ae8a72ac6..c8b9620629dd 100644\n--- a/tests/queries/0_stateless/00921_datetime64_compatibility.python\n+++ b/tests/queries/0_stateless/00921_datetime64_compatibility_long.python\n@@ -86,8 +86,7 @@ CAST(N as DateTime64(9, 'Europe/Minsk'))\n formatDateTime(N, '%C %d %D %e %F %H %I %j %m %M %p %R %S %T %u %V %w %y %Y %%')\n \"\"\".splitlines()\n \n-# Expanded later to cartesian product of all arguments.\n-# NOTE: {N} to be turned into N after str.format() for keys (format string), but not for list of values!\n+# Expanded later to cartesian product of all arguments, using format string.\n extra_ops = [\n     # With same type:\n     (\n@@ -179,7 +178,7 @@ def escape_string(s):\n \n \n def execute_functions_for_types(functions, types):\n-    # TODO: use string.Template here to allow lines that do not contain type, like: SELECT CAST(toDateTime64(1234567890), 'DateTime64')\n+    # NOTE: use string.Template here to allow lines with missing keys, like type, e.g. SELECT CAST(toDateTime64(1234567890), 'DateTime64')\n     for func in functions:\n         print((\"\"\"SELECT 'SELECT {func}';\"\"\".format(func=escape_string(func))))\n         for dt in types:\ndiff --git a/tests/queries/0_stateless/00921_datetime64_compatibility.reference b/tests/queries/0_stateless/00921_datetime64_compatibility_long.reference\nsimilarity index 99%\nrename from tests/queries/0_stateless/00921_datetime64_compatibility.reference\nrename to tests/queries/0_stateless/00921_datetime64_compatibility_long.reference\nindex 004f4f5e824f..67413512e062 100644\n--- a/tests/queries/0_stateless/00921_datetime64_compatibility.reference\n+++ b/tests/queries/0_stateless/00921_datetime64_compatibility_long.reference\n@@ -1,5 +1,4 @@\n SELECT toTimeZone(N, \\'UTC\\')\n-\n Code: 43\n \"DateTime('UTC')\",\"2019-09-16 16:20:11\"\n \"DateTime64(3, 'UTC')\",\"2019-09-16 16:20:11.234\"\n@@ -35,25 +34,21 @@ SELECT toDayOfWeek(N)\n \"UInt8\",1\n ------------------------------------------\n SELECT toHour(N)\n-\n Code: 43\n \"UInt8\",19\n \"UInt8\",19\n ------------------------------------------\n SELECT toMinute(N)\n-\n Code: 43\n \"UInt8\",20\n \"UInt8\",20\n ------------------------------------------\n SELECT toSecond(N)\n-\n Code: 43\n \"UInt8\",11\n \"UInt8\",11\n ------------------------------------------\n SELECT toUnixTimestamp(N)\n-\n Code: 44\n \"UInt32\",1568650811\n \"UInt32\",1568650811\n@@ -94,31 +89,26 @@ SELECT toStartOfDay(N)\n \"DateTime('Europe/Minsk')\",\"2019-09-16 00:00:00\"\n ------------------------------------------\n SELECT toStartOfHour(N)\n-\n Code: 43\n \"DateTime('Europe/Minsk')\",\"2019-09-16 19:00:00\"\n \"DateTime('Europe/Minsk')\",\"2019-09-16 19:00:00\"\n ------------------------------------------\n SELECT toStartOfMinute(N)\n-\n Code: 43\n \"DateTime('Europe/Minsk')\",\"2019-09-16 19:20:00\"\n \"DateTime('Europe/Minsk')\",\"2019-09-16 19:20:00\"\n ------------------------------------------\n SELECT toStartOfFiveMinute(N)\n-\n Code: 43\n \"DateTime('Europe/Minsk')\",\"2019-09-16 19:20:00\"\n \"DateTime('Europe/Minsk')\",\"2019-09-16 19:20:00\"\n ------------------------------------------\n SELECT toStartOfTenMinutes(N)\n-\n Code: 43\n \"DateTime('Europe/Minsk')\",\"2019-09-16 19:20:00\"\n \"DateTime('Europe/Minsk')\",\"2019-09-16 19:20:00\"\n ------------------------------------------\n SELECT toStartOfFifteenMinutes(N)\n-\n Code: 43\n \"DateTime('Europe/Minsk')\",\"2019-09-16 19:15:00\"\n \"DateTime('Europe/Minsk')\",\"2019-09-16 19:15:00\"\n@@ -139,7 +129,6 @@ SELECT toStartOfInterval(N, INTERVAL 1 day)\n \"DateTime('Europe/Minsk')\",\"2019-09-16 00:00:00\"\n ------------------------------------------\n SELECT toStartOfInterval(N, INTERVAL 15 minute)\n-\n Code: 43\n \"DateTime('Europe/Minsk')\",\"2019-09-16 19:15:00\"\n \"DateTime('Europe/Minsk')\",\"2019-09-16 19:15:00\"\n@@ -160,13 +149,11 @@ SELECT date_trunc(\\'day\\', N)\n \"DateTime('Europe/Minsk')\",\"2019-09-16 00:00:00\"\n ------------------------------------------\n SELECT date_trunc(\\'minute\\', N)\n-\n Code: 43\n \"DateTime('Europe/Minsk')\",\"2019-09-16 19:20:00\"\n \"DateTime('Europe/Minsk')\",\"2019-09-16 19:20:00\"\n ------------------------------------------\n SELECT toTime(N)\n-\n Code: 43\n \"DateTime('Europe/Minsk')\",\"1970-01-02 19:20:11\"\n \"DateTime('Europe/Minsk')\",\"1970-01-02 19:20:11\"\n@@ -232,7 +219,6 @@ SELECT toYearWeek(N)\n \"UInt32\",201937\n ------------------------------------------\n SELECT timeSlot(N)\n-\n Code: 43\n \"DateTime('Europe/Minsk')\",\"2019-09-16 19:00:00\"\n \"DateTime('Europe/Minsk')\",\"2019-09-16 19:00:00\"\n@@ -375,15 +361,11 @@ SELECT formatDateTime(N, \\'%C %d %D %e %F %H %I %j %m %M %p %R %S %T %u %V %w %y\n SELECT N -  N\n \"Int32\",0\n \"Int32\",0\n-\n Code: 43\n ------------------------------------------\n SELECT N +  N\n-\n Code: 43\n-\n Code: 43\n-\n Code: 43\n ------------------------------------------\n SELECT N != N\n@@ -417,47 +399,33 @@ SELECT N >= N\n \"UInt8\",1\n ------------------------------------------\n SELECT N - DT\n-\n Code: 43\n \"Int32\",0\n-\n Code: 43\n ------------------------------------------\n SELECT DT - N\n-\n Code: 43\n \"Int32\",0\n-\n Code: 43\n ------------------------------------------\n SELECT N - D\n \"Int32\",0\n-\n Code: 43\n-\n Code: 43\n ------------------------------------------\n SELECT D - N\n \"Int32\",0\n-\n Code: 43\n-\n Code: 43\n ------------------------------------------\n SELECT N - DT64\n-\n Code: 43\n-\n Code: 43\n-\n Code: 43\n ------------------------------------------\n SELECT DT64 - N\n-\n Code: 43\n-\n Code: 43\n-\n Code: 43\n ------------------------------------------\n SELECT N != DT\n@@ -726,11 +694,8 @@ SELECT N -  toUInt8(1)\n \"DateTime64(3, 'Europe/Minsk')\",\"2019-09-16 19:20:10.234\"\n ------------------------------------------\n SELECT toUInt8(1) -  N\n-\n Code: 43\n-\n Code: 43\n-\n Code: 43\n ------------------------------------------\n SELECT N -  toInt8(-1)\n@@ -739,11 +704,8 @@ SELECT N -  toInt8(-1)\n \"DateTime64(3, 'Europe/Minsk')\",\"2019-09-16 19:20:12.234\"\n ------------------------------------------\n SELECT toInt8(-1) -  N\n-\n Code: 43\n-\n Code: 43\n-\n Code: 43\n ------------------------------------------\n SELECT N -  toUInt16(1)\n@@ -752,11 +714,8 @@ SELECT N -  toUInt16(1)\n \"DateTime64(3, 'Europe/Minsk')\",\"2019-09-16 19:20:10.234\"\n ------------------------------------------\n SELECT toUInt16(1) -  N\n-\n Code: 43\n-\n Code: 43\n-\n Code: 43\n ------------------------------------------\n SELECT N -  toInt16(-1)\n@@ -765,11 +724,8 @@ SELECT N -  toInt16(-1)\n \"DateTime64(3, 'Europe/Minsk')\",\"2019-09-16 19:20:12.234\"\n ------------------------------------------\n SELECT toInt16(-1) -  N\n-\n Code: 43\n-\n Code: 43\n-\n Code: 43\n ------------------------------------------\n SELECT N -  toUInt32(1)\n@@ -778,11 +734,8 @@ SELECT N -  toUInt32(1)\n \"DateTime64(3, 'Europe/Minsk')\",\"2019-09-16 19:20:10.234\"\n ------------------------------------------\n SELECT toUInt32(1) -  N\n-\n Code: 43\n-\n Code: 43\n-\n Code: 43\n ------------------------------------------\n SELECT N -  toInt32(-1)\n@@ -791,11 +744,8 @@ SELECT N -  toInt32(-1)\n \"DateTime64(3, 'Europe/Minsk')\",\"2019-09-16 19:20:12.234\"\n ------------------------------------------\n SELECT toInt32(-1) -  N\n-\n Code: 43\n-\n Code: 43\n-\n Code: 43\n ------------------------------------------\n SELECT N -  toUInt64(1)\n@@ -804,11 +754,8 @@ SELECT N -  toUInt64(1)\n \"DateTime64(3, 'Europe/Minsk')\",\"2019-09-16 19:20:10.234\"\n ------------------------------------------\n SELECT toUInt64(1) -  N\n-\n Code: 43\n-\n Code: 43\n-\n Code: 43\n ------------------------------------------\n SELECT N -  toInt64(-1)\n@@ -817,585 +764,486 @@ SELECT N -  toInt64(-1)\n \"DateTime64(3, 'Europe/Minsk')\",\"2019-09-16 19:20:12.234\"\n ------------------------------------------\n SELECT toInt64(-1) -  N\n-\n Code: 43\n-\n Code: 43\n-\n Code: 43\n ------------------------------------------\n SELECT N == toUInt8(1)\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT toUInt8(1) == N\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT N == toInt8(-1)\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT toInt8(-1) == N\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT N == toUInt16(1)\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT toUInt16(1) == N\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT N == toInt16(-1)\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT toInt16(-1) == N\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT N == toUInt32(1)\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT toUInt32(1) == N\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT N == toInt32(-1)\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT toInt32(-1) == N\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT N == toUInt64(1)\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT toUInt64(1) == N\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT N == toInt64(-1)\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT toInt64(-1) == N\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT N != toUInt8(1)\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT toUInt8(1) != N\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT N != toInt8(-1)\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT toInt8(-1) != N\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT N != toUInt16(1)\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT toUInt16(1) != N\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT N != toInt16(-1)\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT toInt16(-1) != N\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT N != toUInt32(1)\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT toUInt32(1) != N\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT N != toInt32(-1)\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT toInt32(-1) != N\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT N != toUInt64(1)\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT toUInt64(1) != N\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT N != toInt64(-1)\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT toInt64(-1) != N\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT N <  toUInt8(1)\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT toUInt8(1) <  N\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT N <  toInt8(-1)\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT toInt8(-1) <  N\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT N <  toUInt16(1)\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT toUInt16(1) <  N\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT N <  toInt16(-1)\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT toInt16(-1) <  N\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT N <  toUInt32(1)\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT toUInt32(1) <  N\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT N <  toInt32(-1)\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT toInt32(-1) <  N\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT N <  toUInt64(1)\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT toUInt64(1) <  N\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT N <  toInt64(-1)\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT toInt64(-1) <  N\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT N <= toUInt8(1)\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT toUInt8(1) <= N\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT N <= toInt8(-1)\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT toInt8(-1) <= N\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT N <= toUInt16(1)\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT toUInt16(1) <= N\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT N <= toInt16(-1)\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT toInt16(-1) <= N\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT N <= toUInt32(1)\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT toUInt32(1) <= N\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT N <= toInt32(-1)\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT toInt32(-1) <= N\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT N <= toUInt64(1)\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT toUInt64(1) <= N\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT N <= toInt64(-1)\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT toInt64(-1) <= N\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT N >  toUInt8(1)\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT toUInt8(1) >  N\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT N >  toInt8(-1)\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT toInt8(-1) >  N\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT N >  toUInt16(1)\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT toUInt16(1) >  N\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT N >  toInt16(-1)\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT toInt16(-1) >  N\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT N >  toUInt32(1)\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT toUInt32(1) >  N\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT N >  toInt32(-1)\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT toInt32(-1) >  N\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT N >  toUInt64(1)\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT toUInt64(1) >  N\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT N >  toInt64(-1)\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT toInt64(-1) >  N\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT N >= toUInt8(1)\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT toUInt8(1) >= N\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT N >= toInt8(-1)\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT toInt8(-1) >= N\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT N >= toUInt16(1)\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT toUInt16(1) >= N\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT N >= toInt16(-1)\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT toInt16(-1) >= N\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT N >= toUInt32(1)\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT toUInt32(1) >= N\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT N >= toInt32(-1)\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT toInt32(-1) >= N\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT N >= toUInt64(1)\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT toUInt64(1) >= N\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\n ------------------------------------------\n SELECT N >= toInt64(-1)\n-\n Code: 43\n \"UInt8\",1\n \"UInt8\",1\n ------------------------------------------\n SELECT toInt64(-1) >= N\n-\n Code: 43\n \"UInt8\",0\n \"UInt8\",0\ndiff --git a/tests/queries/0_stateless/00921_datetime64_compatibility.sh b/tests/queries/0_stateless/00921_datetime64_compatibility_long.sh\nsimilarity index 82%\nrename from tests/queries/0_stateless/00921_datetime64_compatibility.sh\nrename to tests/queries/0_stateless/00921_datetime64_compatibility_long.sh\nindex 1617e5b1f77f..52a29c19be1e 100755\n--- a/tests/queries/0_stateless/00921_datetime64_compatibility.sh\n+++ b/tests/queries/0_stateless/00921_datetime64_compatibility_long.sh\n@@ -11,6 +11,6 @@ CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n \n # ${CURDIR}/00921_datetime64_compatibility.python\n \n-python3 \"${CURDIR}\"/00921_datetime64_compatibility.python \\\n+python3 \"${CURDIR}\"/00921_datetime64_compatibility_long.python \\\n     | ${CLICKHOUSE_CLIENT} --ignore-error -T -nm --calculate_text_stack_trace 0 --log-level 'error' 2>&1 \\\n-    | sed 's/Received exception .*//g; s/^\\(Code: [0-9]\\+\\).*$/\\1/g'\n+    | grep -v 'Received exception .*$' | sed 's/^\\(Code: [0-9]\\+\\).*$/\\1/g'\ndiff --git a/tests/queries/0_stateless/01087_table_function_generate.reference b/tests/queries/0_stateless/01087_table_function_generate.reference\nindex d7cc6b0a9335..d8886945caa3 100644\n--- a/tests/queries/0_stateless/01087_table_function_generate.reference\n+++ b/tests/queries/0_stateless/01087_table_function_generate.reference\n@@ -1,14 +1,14 @@\n UInt64\tInt64\tUInt32\tInt32\tUInt16\tInt16\tUInt8\tInt8\n-2804162938822577320\t-2776833771540858\t3467776823\t1163715250\t31161\t-2916\t220\t-117\n-7885388429666205427\t-1363628932535403038\t484159052\t-308788249\t43346\t13638\t143\t-105\n-4357435422797280898\t1355609803008819271\t4126129912\t-852056475\t34184\t9166\t49\t33\n-5935810273536892891\t-804738887697332962\t3109335413\t-80126721\t47877\t-31421\t186\t-77\n-368066018677693974\t-4927165984347126295\t1015254922\t2026080544\t46037\t-29626\t240\t108\n-8124171311239967992\t-1179703908046100129\t1720727300\t-138469036\t33028\t-12819\t138\t16\n-15657812979985370729\t-5733276247123822513\t3254757884\t-500590428\t3829\t30527\t3\t-81\n-18371568619324220532\t-6793779541583578394\t1686821450\t-455892108\t43475\t2284\t252\t-90\n-821735343441964030\t3148260644406230976\t256251035\t-885069056\t11643\t11455\t176\t90\n-9558594037060121162\t-2907172753635797124\t4276198376\t1947296644\t45922\t26632\t97\t43\n+2804162938822577320\t-2776833771540858\t3467776823\t1163715250\t23903\t-2916\t220\t-117\n+7885388429666205427\t-1363628932535403038\t484159052\t-308788249\t44305\t13638\t143\t-105\n+4357435422797280898\t1355609803008819271\t4126129912\t-852056475\t58858\t9166\t49\t33\n+5935810273536892891\t-804738887697332962\t3109335413\t-80126721\t13655\t-31421\t186\t-77\n+368066018677693974\t-4927165984347126295\t1015254922\t2026080544\t21973\t-29626\t240\t108\n+8124171311239967992\t-1179703908046100129\t1720727300\t-138469036\t36175\t-12819\t138\t16\n+15657812979985370729\t-5733276247123822513\t3254757884\t-500590428\t13193\t30527\t3\t-81\n+18371568619324220532\t-6793779541583578394\t1686821450\t-455892108\t52282\t2284\t252\t-90\n+821735343441964030\t3148260644406230976\t256251035\t-885069056\t55255\t11455\t176\t90\n+9558594037060121162\t-2907172753635797124\t4276198376\t1947296644\t48701\t26632\t97\t43\n -\n Enum8(\\'hello\\' = 1, \\'world\\' = 5)\n hello\n@@ -47,16 +47,16 @@ h\n o\n -\n Date\tDateTime\tDateTime(\\'Europe/Moscow\\')\n-2077-09-17\t1970-10-09 02:30:14\t2074-08-12 11:31:27\n-2005-11-19\t2106-01-30 21:52:44\t2097-05-25 07:54:35\n-2007-02-24\t2096-12-12 00:40:50\t1988-08-10 11:16:31\n-2019-06-30\t2096-01-15 16:31:33\t2063-10-20 08:48:17\n-2039-01-16\t2103-02-11 16:44:39\t2036-10-09 04:29:10\n-1994-11-03\t1980-01-02 05:18:22\t2055-12-23 12:33:52\n-2083-08-20\t2079-06-11 16:29:02\t2000-12-05 17:46:24\n-2030-06-25\t2100-03-01 18:50:22\t1993-03-25 01:19:12\n-2087-03-16\t2034-08-25 19:46:33\t2045-12-10 16:47:40\n-2006-04-30\t2069-09-30 16:07:48\t2084-08-26 03:33:12\n+2113-06-12\t1970-10-09 02:30:14\t2074-08-12 11:31:27\n+2103-11-03\t2106-01-30 21:52:44\t2097-05-25 07:54:35\n+2008-03-16\t2096-12-12 00:40:50\t1988-08-10 11:16:31\n+2126-11-26\t2096-01-15 16:31:33\t2063-10-20 08:48:17\n+1991-02-02\t2103-02-11 16:44:39\t2036-10-09 04:29:10\n+2096-11-03\t1980-01-02 05:18:22\t2055-12-23 12:33:52\n+2024-12-16\t2079-06-11 16:29:02\t2000-12-05 17:46:24\n+2085-04-07\t2100-03-01 18:50:22\t1993-03-25 01:19:12\n+2135-05-30\t2034-08-25 19:46:33\t2045-12-10 16:47:40\n+2094-12-18\t2069-09-30 16:07:48\t2084-08-26 03:33:12\n -\n DateTime64(3)\tDateTime64(6)\tDateTime64(6, \\'Europe/Moscow\\')\n 1978-06-07 23:50:57.320\t2013-08-28 10:21:54.010758\t1991-08-25 16:23:26.140215\n@@ -225,14 +225,14 @@ RL,{Xs\\\\tw\n [114]\t-84125.1554\t('2023-06-06 06:55:06.492','bf9ab359-ef9f-ad11-7e6c-160368b1e5ea')\n [124]\t-114719.5228\t('2010-11-11 22:57:23.722','c1046ffb-3415-cc3a-509a-e0005856d7d7')\n -\n-[]\t1900051923\t{\t-189530.5846\th\t-5.6279699579452485e47\t('1980-08-29','2090-10-31 19:35:45','2038-07-15 05:22:51.805','63d9a12d-d1cf-1f3a-57c6-9bc6dddd0975')\t8502\n-[-102,-118]\t392272782\tEb\t-14818.0200\to\t-2.664492247169164e59\t('2059-02-10','1994-07-16 00:40:02','2034-02-02 05:30:44.960','4fa09948-d32e-8903-63df-43ad759e43f7')\tDA61\n-[-71]\t775049089\t\\N\t-158115.1178\tw\t4.1323844687113747e-305\t('1997-02-15','2062-08-12 23:41:53','2074-02-13 10:29:40.749','c4a44dd7-d009-6f65-1494-9daedfa8a124')\t83A7\n-[-28,100]\t3675466147\t{\t-146685.1749\th\t3.6676044396877755e142\t('1997-10-26','2002-06-26 03:33:41','2002-12-02 05:46:03.455','98714b2c-65e7-b5cb-a040-421e260c6d8d')\t4B94\n-[-23]\t2514120753\t(`u,\t-119659.6174\tw\t1.3231258347475906e34\t('2055-11-20','2080-03-28 08:11:25','2073-07-10 12:19:58.146','003b3b6b-088f-f941-aeb9-c26e0ee72b8e')\t6B1F\n-[11,-36]\t3308237300\t\\N\t171205.1896\t\\N\t5.634708707075817e195\t('2009-03-18','2041-11-11 13:19:44','2044-03-18 17:34:17.814','9e60f4cb-6e55-1deb-5ac4-d66a86a8886d')\t1964\n-[39]\t1614362420\t`4A8P\t157144.0630\to\t-1.1843143253872814e-255\t('1991-04-27','2066-03-02 11:07:49','1997-10-22 20:14:13.755','97685503-2609-d2b9-981c-02fd75d106cb')\tA35B\n-[48,-120]\t3848918261\t1<Lu3\t91487.2852\th\t-1.9300793134783347e263\t('1983-09-27','2031-08-07 11:29:42','2085-03-11 15:17:17.374','af838873-48b2-f609-6483-f5c08733364c')\t8E7C\n-[55]\t3047524030\tli&lF\t93462.3661\th\t2.8979254388809897e54\t('2011-08-01','2058-07-14 01:47:30','2055-10-14 06:36:20.056','e932a7b5-173a-1304-e522-b794b8fa3f11')\t35D9\n-[100,-42]\t3999367674\t\t-112975.9852\th\t2.658098863752086e-160\t('2025-12-13','2029-04-21 12:27:59','2068-08-27 07:49:41.825','802b2a96-319b-8e60-63d9-99b88ccae237')\t074E\n+[]\t1900051923\t{\t-189530.5846\th\t-5.6279699579452485e47\t('1984-12-06','2090-10-31 19:35:45','2038-07-15 05:22:51.805','63d9a12d-d1cf-1f3a-57c6-9bc6dddd0975')\t8502\n+[-102,-118]\t392272782\tEb\t-14818.0200\to\t-2.664492247169164e59\t('2024-01-16','1994-07-16 00:40:02','2034-02-02 05:30:44.960','4fa09948-d32e-8903-63df-43ad759e43f7')\tDA61\n+[-71]\t775049089\t\\N\t-158115.1178\tw\t4.1323844687113747e-305\t('2103-08-04','2062-08-12 23:41:53','2074-02-13 10:29:40.749','c4a44dd7-d009-6f65-1494-9daedfa8a124')\t83A7\n+[-28,100]\t3675466147\t{\t-146685.1749\th\t3.6676044396877755e142\t('2119-02-01','2002-06-26 03:33:41','2002-12-02 05:46:03.455','98714b2c-65e7-b5cb-a040-421e260c6d8d')\t4B94\n+[-23]\t2514120753\t(`u,\t-119659.6174\tw\t1.3231258347475906e34\t('2017-10-25','2080-03-28 08:11:25','2073-07-10 12:19:58.146','003b3b6b-088f-f941-aeb9-c26e0ee72b8e')\t6B1F\n+[11,-36]\t3308237300\t\\N\t171205.1896\t\\N\t5.634708707075817e195\t('2084-01-01','2041-11-11 13:19:44','2044-03-18 17:34:17.814','9e60f4cb-6e55-1deb-5ac4-d66a86a8886d')\t1964\n+[39]\t1614362420\t`4A8P\t157144.0630\to\t-1.1843143253872814e-255\t('2061-03-10','2066-03-02 11:07:49','1997-10-22 20:14:13.755','97685503-2609-d2b9-981c-02fd75d106cb')\tA35B\n+[48,-120]\t3848918261\t1<Lu3\t91487.2852\th\t-1.9300793134783347e263\t('2081-06-01','2031-08-07 11:29:42','2085-03-11 15:17:17.374','af838873-48b2-f609-6483-f5c08733364c')\t8E7C\n+[55]\t3047524030\tli&lF\t93462.3661\th\t2.8979254388809897e54\t('2108-04-19','2058-07-14 01:47:30','2055-10-14 06:36:20.056','e932a7b5-173a-1304-e522-b794b8fa3f11')\t35D9\n+[100,-42]\t3999367674\t\t-112975.9852\th\t2.658098863752086e-160\t('2005-08-26','2029-04-21 12:27:59','2068-08-27 07:49:41.825','802b2a96-319b-8e60-63d9-99b88ccae237')\t074E\n -\ndiff --git a/tests/queries/0_stateless/01125_generate_random_qoega.reference b/tests/queries/0_stateless/01125_generate_random_qoega.reference\nindex 1cb416a722bc..af3f8c998962 100644\n--- a/tests/queries/0_stateless/01125_generate_random_qoega.reference\n+++ b/tests/queries/0_stateless/01125_generate_random_qoega.reference\n@@ -1,1 +1,1 @@\n-100\t4456446406473339606\n+100\t663736399314727673\ndiff --git a/tests/queries/0_stateless/01128_generate_random_nested.reference b/tests/queries/0_stateless/01128_generate_random_nested.reference\nindex d9d2b2517024..6d2e90d81935 100644\n--- a/tests/queries/0_stateless/01128_generate_random_nested.reference\n+++ b/tests/queries/0_stateless/01128_generate_random_nested.reference\n@@ -1,2 +1,2 @@\n-100\t12366141706519416319\n-109\t2990700419202507835\n+100\t12122376849981951205\n+109\t6180823897498688294\ndiff --git a/tests/queries/0_stateless/01252_weird_time_zone.reference b/tests/queries/0_stateless/01252_weird_time_zone.reference\nindex f2968d4efa60..90f5bf0e30dd 100644\n--- a/tests/queries/0_stateless/01252_weird_time_zone.reference\n+++ b/tests/queries/0_stateless/01252_weird_time_zone.reference\n@@ -1,7 +1,7 @@\n-2020-01-02 03:04:05\t2020-01-02 00:00:00\t3\n-2020-01-02 03:04:05\t2020-01-02 00:00:00\t3\n-2020-01-02 03:04:05\t2020-01-02 00:00:00\t3\n-2020-01-02 03:04:05\t2020-01-02 00:00:00\t3\n-2020-01-02 03:04:05\t2020-01-02 00:00:00\t3\n-2020-01-02 03:04:05\t2020-01-02 00:00:00\t3\n-2020-01-02 03:04:05\t2020-01-02 00:00:00\t3\n+Pacific/Kiritimati\t2020-01-02 03:04:05\t2020-01-02 00:00:00\t3\n+Africa/El_Aaiun\t2020-01-02 03:04:05\t2020-01-02 00:00:00\t3\n+Asia/Pyongyang\t2020-01-02 03:04:05\t2020-01-02 00:00:00\t3\n+Pacific/Kwajalein\t2020-01-02 03:04:05\t2020-01-02 00:00:00\t3\n+Pacific/Apia\t2020-01-02 03:04:05\t2020-01-02 00:00:00\t3\n+Pacific/Enderbury\t2020-01-02 03:04:05\t2020-01-02 00:00:00\t3\n+Pacific/Fakaofo\t2020-01-02 03:04:05\t2020-01-02 00:00:00\t3\ndiff --git a/tests/queries/0_stateless/01252_weird_time_zone.sql b/tests/queries/0_stateless/01252_weird_time_zone.sql\nindex 68ea903a7975..c4919ca4fe01 100644\n--- a/tests/queries/0_stateless/01252_weird_time_zone.sql\n+++ b/tests/queries/0_stateless/01252_weird_time_zone.sql\n@@ -1,15 +1,15 @@\n-SELECT toDateTime('2020-01-02 03:04:05', 'Pacific/Kiritimati') AS x, toStartOfDay(x), toHour(x);\n-SELECT toDateTime('2020-01-02 03:04:05', 'Africa/El_Aaiun') AS x, toStartOfDay(x), toHour(x);\n-SELECT toDateTime('2020-01-02 03:04:05', 'Asia/Pyongyang') AS x, toStartOfDay(x), toHour(x);\n-SELECT toDateTime('2020-01-02 03:04:05', 'Pacific/Kwajalein') AS x, toStartOfDay(x), toHour(x);\n-SELECT toDateTime('2020-01-02 03:04:05', 'Pacific/Apia') AS x, toStartOfDay(x), toHour(x);\n-SELECT toDateTime('2020-01-02 03:04:05', 'Pacific/Enderbury') AS x, toStartOfDay(x), toHour(x);\n-SELECT toDateTime('2020-01-02 03:04:05', 'Pacific/Fakaofo') AS x, toStartOfDay(x), toHour(x);\n+SELECT 'Pacific/Kiritimati', toDateTime('2020-01-02 03:04:05', 'Pacific/Kiritimati') AS x, toStartOfDay(x), toHour(x);\n+SELECT 'Africa/El_Aaiun', toDateTime('2020-01-02 03:04:05', 'Africa/El_Aaiun') AS x, toStartOfDay(x), toHour(x);\n+SELECT 'Asia/Pyongyang', toDateTime('2020-01-02 03:04:05', 'Asia/Pyongyang') AS x, toStartOfDay(x), toHour(x);\n+SELECT 'Pacific/Kwajalein', toDateTime('2020-01-02 03:04:05', 'Pacific/Kwajalein') AS x, toStartOfDay(x), toHour(x);\n+SELECT 'Pacific/Apia', toDateTime('2020-01-02 03:04:05', 'Pacific/Apia') AS x, toStartOfDay(x), toHour(x);\n+SELECT 'Pacific/Enderbury', toDateTime('2020-01-02 03:04:05', 'Pacific/Enderbury') AS x, toStartOfDay(x), toHour(x);\n+SELECT 'Pacific/Fakaofo', toDateTime('2020-01-02 03:04:05', 'Pacific/Fakaofo') AS x, toStartOfDay(x), toHour(x);\n \n-SELECT toHour(toDateTime(rand(), 'Pacific/Kiritimati') AS t) AS h, t FROM numbers(1000000) WHERE h < 0 OR h > 23 ORDER BY h LIMIT 1 BY h;\n-SELECT toHour(toDateTime(rand(), 'Africa/El_Aaiun') AS t) AS h, t FROM numbers(1000000) WHERE h < 0 OR h > 23 ORDER BY h LIMIT 1 BY h;\n-SELECT toHour(toDateTime(rand(), 'Asia/Pyongyang') AS t) AS h, t FROM numbers(1000000) WHERE h < 0 OR h > 23 ORDER BY h LIMIT 1 BY h;\n-SELECT toHour(toDateTime(rand(), 'Pacific/Kwajalein') AS t) AS h, t FROM numbers(1000000) WHERE h < 0 OR h > 23 ORDER BY h LIMIT 1 BY h;\n-SELECT toHour(toDateTime(rand(), 'Pacific/Apia') AS t) AS h, t FROM numbers(1000000) WHERE h < 0 OR h > 23 ORDER BY h LIMIT 1 BY h;\n-SELECT toHour(toDateTime(rand(), 'Pacific/Enderbury') AS t) AS h, t FROM numbers(1000000) WHERE h < 0 OR h > 23 ORDER BY h LIMIT 1 BY h;\n-SELECT toHour(toDateTime(rand(), 'Pacific/Fakaofo') AS t) AS h, t FROM numbers(1000000) WHERE h < 0 OR h > 23 ORDER BY h LIMIT 1 BY h;\n+SELECT 'Pacific/Kiritimati', rand() as r, toHour(toDateTime(r, 'Pacific/Kiritimati') AS t) AS h, t, toTypeName(t) FROM numbers(1000000) WHERE h < 0 OR h > 23 ORDER BY h LIMIT 1 BY h;\n+SELECT 'Africa/El_Aaiun', rand() as r, toHour(toDateTime(r, 'Africa/El_Aaiun') AS t) AS h, t, toTypeName(t) FROM numbers(1000000) WHERE h < 0 OR h > 23 ORDER BY h LIMIT 1 BY h;\n+SELECT 'Asia/Pyongyang', rand() as r, toHour(toDateTime(r, 'Asia/Pyongyang') AS t) AS h, t, toTypeName(t) FROM numbers(1000000) WHERE h < 0 OR h > 23 ORDER BY h LIMIT 1 BY h;\n+SELECT 'Pacific/Kwajalein', rand() as r, toHour(toDateTime(r, 'Pacific/Kwajalein') AS t) AS h, t, toTypeName(t) FROM numbers(1000000) WHERE h < 0 OR h > 23 ORDER BY h LIMIT 1 BY h;\n+SELECT 'Pacific/Apia', rand() as r, toHour(toDateTime(r, 'Pacific/Apia') AS t) AS h, t, toTypeName(t) FROM numbers(1000000) WHERE h < 0 OR h > 23 ORDER BY h LIMIT 1 BY h;\n+SELECT 'Pacific/Enderbury', rand() as r, toHour(toDateTime(r, 'Pacific/Enderbury') AS t) AS h, t, toTypeName(t) FROM numbers(1000000) WHERE h < 0 OR h > 23 ORDER BY h LIMIT 1 BY h;\n+SELECT 'Pacific/Fakaofo', rand() as r, toHour(toDateTime(r, 'Pacific/Fakaofo') AS t) AS h, t, toTypeName(t) FROM numbers(1000000) WHERE h < 0 OR h > 23 ORDER BY h LIMIT 1 BY h;\ndiff --git a/tests/queries/0_stateless/01440_to_date_monotonicity.reference b/tests/queries/0_stateless/01440_to_date_monotonicity.reference\nindex 96732e5996c5..74716fe6223c 100644\n--- a/tests/queries/0_stateless/01440_to_date_monotonicity.reference\n+++ b/tests/queries/0_stateless/01440_to_date_monotonicity.reference\n@@ -1,4 +1,4 @@\n 0\n-1970-01-01\t2106-02-07\t1970-04-11\t1970-01-01\t2106-02-07\n+1970-01-01\t2106-02-07\t1970-04-11\t1970-01-01\t2149-06-06\n 1970-01-01 03:00:00\t2106-02-07 09:28:15\t1970-01-01 03:16:40\n 2000-01-01 13:12:12\ndiff --git a/tests/queries/0_stateless/01561_Date_and_DateTime64_comparision.sql b/tests/queries/0_stateless/01561_Date_and_DateTime64_comparision.sql\nindex 7e75d871e077..a61bcff4db7c 100644\n--- a/tests/queries/0_stateless/01561_Date_and_DateTime64_comparision.sql\n+++ b/tests/queries/0_stateless/01561_Date_and_DateTime64_comparision.sql\n@@ -6,7 +6,7 @@ SELECT\n     dt64 < d,\n     toDate(dt64) < d,\n     dt64 < toDateTime64(d, 1, 'UTC'),\n-    \n+\n     '<=',\n     dt64 <= d,\n     toDate(dt64) <= d,\n@@ -16,7 +16,7 @@ SELECT\n     dt64 = d,\n     toDate(dt64) = d,\n     dt64 = toDateTime64(d, 1, 'UTC'),\n-    \n+\n     '>=',\n     dt64 >= d,\n     toDate(dt64) >= d,\n@@ -31,7 +31,7 @@ SELECT\n     dt64 != d,\n     toDate(dt64) != d,\n     dt64 != toDateTime64(d, 1, 'UTC')\n-FROM \n+FROM\n (\n     WITH toDateTime('2019-09-16 19:20:11') as val\n     SELECT\ndiff --git a/tests/queries/0_stateless/01631_date_overflow_as_partition_key.reference b/tests/queries/0_stateless/01631_date_overflow_as_partition_key.reference\nindex dbcd92da11c7..62f620f3ba97 100644\n--- a/tests/queries/0_stateless/01631_date_overflow_as_partition_key.reference\n+++ b/tests/queries/0_stateless/01631_date_overflow_as_partition_key.reference\n@@ -1,2 +1,2 @@\n-1970-01-01\t1\n-1970-01-01\t1\n+2106-11-11\t1\n+2106-11-12\t1\ndiff --git a/tests/queries/0_stateless/01631_date_overflow_as_partition_key.sql b/tests/queries/0_stateless/01631_date_overflow_as_partition_key.sql\nindex f252e10806a0..9a8d37084fbd 100644\n--- a/tests/queries/0_stateless/01631_date_overflow_as_partition_key.sql\n+++ b/tests/queries/0_stateless/01631_date_overflow_as_partition_key.sql\n@@ -6,6 +6,6 @@ insert into dt_overflow values('2106-11-11', 1);\n \n insert into dt_overflow values('2106-11-12', 1);\n \n-select * from dt_overflow;\n+select * from dt_overflow ORDER BY d;\n \n drop table if exists dt_overflow;\ndiff --git a/tests/queries/0_stateless/01691_DateTime64_clamp.reference b/tests/queries/0_stateless/01691_DateTime64_clamp.reference\nindex 3adc9a17e5cf..881ab4feff8a 100644\n--- a/tests/queries/0_stateless/01691_DateTime64_clamp.reference\n+++ b/tests/queries/0_stateless/01691_DateTime64_clamp.reference\n@@ -1,10 +1,11 @@\n -- { echo }\n+-- These values are within the extended range of DateTime64 [1925-01-01, 2284-01-01)\n SELECT toTimeZone(toDateTime(-2, 2), 'Europe/Moscow');\n-1970-01-01 03:00:00.00\n+1970-01-01 02:59:58.00\n SELECT toDateTime64(-2, 2, 'Europe/Moscow');\n-1970-01-01 03:00:00.00\n+1970-01-01 02:59:58.00\n SELECT CAST(-1 AS DateTime64(0, 'Europe/Moscow'));\n-1970-01-01 03:00:00\n+1970-01-01 02:59:59\n SELECT CAST('2020-01-01 00:00:00.3' AS DateTime64(0, 'Europe/Moscow'));\n 2020-01-01 00:00:00\n SELECT toDateTime64(bitShiftLeft(toUInt64(1), 33), 2, 'Europe/Moscow') FORMAT Null;\n@@ -13,5 +14,14 @@ SELECT toTimeZone(toDateTime(-2., 2), 'Europe/Moscow');\n SELECT toDateTime64(-2., 2, 'Europe/Moscow');\n 1970-01-01 03:00:00.00\n SELECT toDateTime64(toFloat32(bitShiftLeft(toUInt64(1),33)), 2, 'Europe/Moscow');\n-2106-02-07 09:00:00.00\n+2106-02-07 09:28:16.00\n SELECT toDateTime64(toFloat64(bitShiftLeft(toUInt64(1),33)), 2, 'Europe/Moscow') FORMAT Null;\n+-- These are outsize of extended range and hence clamped\n+SELECT toDateTime64(-1 * bitShiftLeft(toUInt64(1), 35), 2);\n+1925-01-01 02:00:00.00\n+SELECT CAST(-1 * bitShiftLeft(toUInt64(1), 35) AS DateTime64);\n+1925-01-01 02:00:00.000\n+SELECT CAST(bitShiftLeft(toUInt64(1), 35) AS DateTime64);\n+2282-12-31 03:00:00.000\n+SELECT toDateTime64(bitShiftLeft(toUInt64(1), 35), 2);\n+2282-12-31 03:00:00.00\ndiff --git a/tests/queries/0_stateless/01691_DateTime64_clamp.sql b/tests/queries/0_stateless/01691_DateTime64_clamp.sql\nindex 92d5a33328f0..c77a66febb3e 100644\n--- a/tests/queries/0_stateless/01691_DateTime64_clamp.sql\n+++ b/tests/queries/0_stateless/01691_DateTime64_clamp.sql\n@@ -1,4 +1,5 @@\n -- { echo }\n+-- These values are within the extended range of DateTime64 [1925-01-01, 2284-01-01)\n SELECT toTimeZone(toDateTime(-2, 2), 'Europe/Moscow');\n SELECT toDateTime64(-2, 2, 'Europe/Moscow');\n SELECT CAST(-1 AS DateTime64(0, 'Europe/Moscow'));\n@@ -8,3 +9,9 @@ SELECT toTimeZone(toDateTime(-2., 2), 'Europe/Moscow');\n SELECT toDateTime64(-2., 2, 'Europe/Moscow');\n SELECT toDateTime64(toFloat32(bitShiftLeft(toUInt64(1),33)), 2, 'Europe/Moscow');\n SELECT toDateTime64(toFloat64(bitShiftLeft(toUInt64(1),33)), 2, 'Europe/Moscow') FORMAT Null;\n+\n+-- These are outsize of extended range and hence clamped\n+SELECT toDateTime64(-1 * bitShiftLeft(toUInt64(1), 35), 2);\n+SELECT CAST(-1 * bitShiftLeft(toUInt64(1), 35) AS DateTime64);\n+SELECT CAST(bitShiftLeft(toUInt64(1), 35) AS DateTime64);\n+SELECT toDateTime64(bitShiftLeft(toUInt64(1), 35), 2);\ndiff --git a/tests/queries/0_stateless/01699_timezoneOffset.reference b/tests/queries/0_stateless/01699_timezoneOffset.reference\nindex 45f30314f5a7..a1cc6391e6fd 100644\n--- a/tests/queries/0_stateless/01699_timezoneOffset.reference\n+++ b/tests/queries/0_stateless/01699_timezoneOffset.reference\n@@ -1,8 +1,8 @@\n DST boundary test for Europe/Moscow:\n-0\t1981-04-01 22:40:00\t10800\t355002000\n-1\t1981-04-01 22:50:00\t10800\t355002600\n-2\t1981-04-02 00:00:00\t14400\t355003200\n-3\t1981-04-02 00:10:00\t14400\t355003800\n+0\t1981-04-01 22:40:00\t14400\t354998400\n+1\t1981-04-01 22:50:00\t14400\t354999000\n+2\t1981-04-01 23:00:00\t14400\t354999600\n+3\t1981-04-01 23:10:00\t14400\t355000200\n 0\t1981-09-30 23:00:00\t14400\t370724400\n 1\t1981-09-30 23:10:00\t14400\t370725000\n 2\t1981-09-30 23:20:00\t14400\t370725600\n@@ -22,10 +22,10 @@ DST boundary test for Europe/Moscow:\n 16\t1981-10-01 00:40:00\t10800\t370734000\n 17\t1981-10-01 00:50:00\t10800\t370734600\n DST boundary test for Asia/Tehran:\n-0\t2020-03-21 22:40:00\t12600\t1584817800\n-1\t2020-03-21 22:50:00\t12600\t1584818400\n-2\t2020-03-22 00:00:00\t16200\t1584819000\n-3\t2020-03-22 00:10:00\t16200\t1584819600\n+0\t2020-03-21 22:40:00\t16200\t1584814200\n+1\t2020-03-21 22:50:00\t16200\t1584814800\n+2\t2020-03-21 23:00:00\t16200\t1584815400\n+3\t2020-03-21 23:10:00\t16200\t1584816000\n 0\t2020-09-20 23:00:00\t16200\t1600626600\n 1\t2020-09-20 23:10:00\t16200\t1600627200\n 2\t2020-09-20 23:20:00\t16200\t1600627800\ndiff --git a/tests/queries/0_stateless/01702_toDateTime_from_string_clamping.reference b/tests/queries/0_stateless/01702_toDateTime_from_string_clamping.reference\nindex 228086615da9..7e8307d66a69 100644\n--- a/tests/queries/0_stateless/01702_toDateTime_from_string_clamping.reference\n+++ b/tests/queries/0_stateless/01702_toDateTime_from_string_clamping.reference\n@@ -1,9 +1,9 @@\n -- { echo }\n SELECT toString(toDateTime('-922337203.6854775808', 1));\n-2106-02-07 15:41:33.6\n+1940-10-09 22:13:17.6\n SELECT toString(toDateTime('9922337203.6854775808', 1));\n-2104-12-30 00:50:11.6\n+2283-11-11 23:46:43.6\n SELECT toDateTime64(CAST('10000000000.1' AS Decimal64(1)), 1);\n-2106-02-07 20:50:08.1\n+2283-11-11 23:46:40.1\n SELECT toDateTime64(CAST('-10000000000.1' AS Decimal64(1)), 1);\n-2011-12-23 00:38:08.1\n+1925-01-01 00:00:00.1\ndiff --git a/tests/queries/0_stateless/01761_round_year_bounds.reference b/tests/queries/0_stateless/01761_round_year_bounds.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/01761_round_year_bounds.sql b/tests/queries/0_stateless/01761_round_year_bounds.sql\nnew file mode 100644\nindex 000000000000..fed12c555682\n--- /dev/null\n+++ b/tests/queries/0_stateless/01761_round_year_bounds.sql\n@@ -0,0 +1,1 @@\n+SELECT toStartOfInterval(toDateTime(-9223372036854775808), toIntervalYear(100), 'Europe/Moscow') FORMAT Null;\ndiff --git a/tests/queries/0_stateless/01762_datetime64_extended_parsing.reference b/tests/queries/0_stateless/01762_datetime64_extended_parsing.reference\nnew file mode 100644\nindex 000000000000..531b6f8bf133\n--- /dev/null\n+++ b/tests/queries/0_stateless/01762_datetime64_extended_parsing.reference\n@@ -0,0 +1,1 @@\n+1925-01-02 03:04:05.678901\ndiff --git a/tests/queries/0_stateless/01762_datetime64_extended_parsing.sql b/tests/queries/0_stateless/01762_datetime64_extended_parsing.sql\nnew file mode 100644\nindex 000000000000..a7ad447b2153\n--- /dev/null\n+++ b/tests/queries/0_stateless/01762_datetime64_extended_parsing.sql\n@@ -0,0 +1,1 @@\n+SELECT toDateTime64('1925-01-02 03:04:05.678901', 6);\n",
  "problem_statement": "Support Dates and DateTimes outside of 1970-2105 range.\nDates are currently not supported outside of this range.\r\n\r\nThis may not be an issue for analyzing specific data sets like current web logs, but is a show stopper for using ClickHouse more generally. For example, if one wanted to include a user's birthdate with the web activity in order to do analysis by age cohort, this would not work. If one wanted to do analysis on historical data this is also an issue.\r\n\r\nDate and DateTime values should be expanded to cover a much larger range.\n",
  "hints_text": "Duplicate https://github.com/ClickHouse/ClickHouse/issues/4860\r\nWIP  https://github.com/ClickHouse/ClickHouse/pull/7170\r\n\r\n\n@den-crane the #7170 will not add FULL support of dates outside of given range, that was planned for phase 2 of DateTime64 implementation.\r\n\r\nEven more to that, now there is no way to lift that limitation completely in simple and efficient manner, since current calendar-related features (getting date/weekday/month) rely on a lookup-tables, which can't be made infinitely large (for obvious reasons).\n@Enmk OK good to know. Thanks.\r\n\r\n>now there is no way to lift that limitation \r\n\r\nLazy cache. Do not see a problem to calculate and put into cache several days with i.e. 8000 year.\r\n\r\n```\r\npg> select to_char(to_date('01-01-0000','DD-MM-YYYY'), 'day');\r\n  to_char\r\n-----------\r\n saturday\r\n(1 row)\r\n\r\npg> select to_char(to_date('01-01-9000','DD-MM-YYYY'), 'day');\r\n  to_char\r\n-----------\r\n wednesday\r\n(1 row)\r\n```\nYep, but current lookup table is pre-computed once the timezone is created, that means if we are to replace LUT with lazy cache, we'll get a performance degradation on first access on any particular time value.\r\n\r\nSure, we can have both precomputed LUT and lazy-cache, but this makes solution not quite simple and slightly less efficient for the most probable use pattern (in oversimplified pseudo-code):\r\n\r\n```\r\nif value is in LUT range:\r\n    return LUT[value] // <== most likely to happen\r\nelse:\r\n    if value is in lazyCache:\r\n        return lazyCache[value]\r\n    else:\r\n        dateTimeInfo = computeCacheableValue(value)\r\n        lazyCache[value] = v\r\n        return v\r\n```\r\n\r\nAt this point I am not sure if that second layer of caching would bring any benefits compared to the burden of maintaining two layers of cache.",
  "created_at": "2020-02-27T07:34:14Z"
}