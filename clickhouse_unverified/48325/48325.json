{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 48325,
  "instance_id": "ClickHouse__ClickHouse-48325",
  "issue_numbers": [
    "48228"
  ],
  "base_commit": "fa5b2bd4a5b02336bca8837c473a7124f8ecedf2",
  "patch": "diff --git a/src/AggregateFunctions/AggregateFunctionKolmogorovSmirnovTest.cpp b/src/AggregateFunctions/AggregateFunctionKolmogorovSmirnovTest.cpp\nnew file mode 100644\nindex 000000000000..9bd06c3ef4d5\n--- /dev/null\n+++ b/src/AggregateFunctions/AggregateFunctionKolmogorovSmirnovTest.cpp\n@@ -0,0 +1,36 @@\n+#include <AggregateFunctions/AggregateFunctionFactory.h>\n+#include <AggregateFunctions/AggregateFunctionKolmogorovSmirnovTest.h>\n+#include <AggregateFunctions/FactoryHelpers.h>\n+\n+namespace ErrorCodes\n+{\n+    extern const int NOT_IMPLEMENTED;\n+}\n+\n+namespace DB\n+{\n+struct Settings;\n+\n+namespace\n+{\n+\n+AggregateFunctionPtr createAggregateFunctionKolmogorovSmirnovTest(\n+    const std::string & name, const DataTypes & argument_types, const Array & parameters, const Settings *)\n+{\n+    assertBinary(name, argument_types);\n+\n+    if (!isNumber(argument_types[0]) || !isNumber(argument_types[1]))\n+        throw Exception(ErrorCodes::NOT_IMPLEMENTED, \"Aggregate function {} only supports numerical types\", name);\n+\n+    return std::make_shared<AggregateFunctionKolmogorovSmirnov>(argument_types, parameters);\n+}\n+\n+\n+}\n+\n+void registerAggregateFunctionKolmogorovSmirnovTest(AggregateFunctionFactory & factory)\n+{\n+    factory.registerFunction(\"kolmogorovSmirnovTest\", createAggregateFunctionKolmogorovSmirnovTest, AggregateFunctionFactory::CaseInsensitive);\n+}\n+\n+}\ndiff --git a/src/AggregateFunctions/AggregateFunctionKolmogorovSmirnovTest.h b/src/AggregateFunctions/AggregateFunctionKolmogorovSmirnovTest.h\nnew file mode 100644\nindex 000000000000..51e0950f7827\n--- /dev/null\n+++ b/src/AggregateFunctions/AggregateFunctionKolmogorovSmirnovTest.h\n@@ -0,0 +1,323 @@\n+#pragma once\n+#include <AggregateFunctions/IAggregateFunction.h>\n+#include <AggregateFunctions/StatCommon.h>\n+#include <Columns/ColumnVector.h>\n+#include <Columns/ColumnTuple.h>\n+#include <Common/Exception.h>\n+#include <Common/assert_cast.h>\n+#include <Common/ArenaAllocator.h>\n+#include <Common/PODArray_fwd.h>\n+#include <base/types.h>\n+#include <DataTypes/DataTypeNullable.h>\n+#include <DataTypes/DataTypesNumber.h>\n+#include <DataTypes/DataTypeTuple.h>\n+#include <IO/ReadHelpers.h>\n+#include <IO/WriteHelpers.h>\n+\n+namespace DB\n+{\n+struct Settings;\n+\n+namespace ErrorCodes\n+{\n+    extern const int ILLEGAL_TYPE_OF_ARGUMENT;\n+    extern const int NUMBER_OF_ARGUMENTS_DOESNT_MATCH;\n+    extern const int BAD_ARGUMENTS;\n+}\n+\n+struct KolmogorovSmirnov : public StatisticalSample<Float64, Float64>\n+{\n+    enum class Alternative\n+    {\n+        TwoSided,\n+        Less,\n+        Greater\n+    };\n+\n+    std::pair<Float64, Float64> getResult(Alternative alternative, String method)\n+    {\n+        ::sort(x.begin(), x.end());\n+        ::sort(y.begin(), y.end());\n+\n+        Float64 max_s = std::numeric_limits<Float64>::min();\n+        Float64 min_s = std::numeric_limits<Float64>::max();\n+        Float64 now_s = 0;\n+        UInt64 pos_x = 0;\n+        UInt64 pos_y = 0;\n+        UInt64 n1 = x.size();\n+        UInt64 n2 = y.size();\n+\n+        const Float64 n1_d = 1. / n1;\n+        const Float64 n2_d = 1. / n2;\n+        const Float64 tol = 1e-7;\n+\n+        // reference: https://en.wikipedia.org/wiki/Kolmogorov%E2%80%93Smirnov_test\n+        while (pos_x < x.size() && pos_y < y.size())\n+        {\n+            if (likely(fabs(x[pos_x] - y[pos_y]) >= tol))\n+            {\n+                if (x[pos_x] < y[pos_y])\n+                {\n+                    now_s += n1_d;\n+                    ++pos_x;\n+                }\n+                else\n+                {\n+                    now_s -= n2_d;\n+                    ++pos_y;\n+                }\n+                max_s = std::max(max_s, now_s);\n+                min_s = std::min(min_s, now_s);\n+            }\n+            else\n+            {\n+                now_s += n1_d;\n+                ++pos_x;\n+            }\n+        }\n+        now_s += n1_d * (x.size() - pos_x) - n2_d * (y.size() - pos_y);\n+        min_s = std::min(min_s, now_s);\n+        max_s = std::max(max_s, now_s);\n+\n+        Float64 d = 0;\n+        if (alternative == Alternative::TwoSided)\n+            d = std::max(std::abs(max_s), std::abs(min_s));\n+        else if (alternative == Alternative::Less)\n+            d = -min_s;\n+        else if (alternative == Alternative::Greater)\n+            d = max_s;\n+\n+        UInt64 g = std::__gcd(n1, n2);\n+        UInt64 nx_g = n1 / g;\n+        UInt64 ny_g = n2 / g;\n+\n+        if (method == \"auto\")\n+            method = std::max(n1, n2) <= 10000 ? \"exact\" : \"asymp\";\n+        else if (method == \"exact\" && nx_g >= std::numeric_limits<Int32>::max() / ny_g)\n+            method = \"asymp\";\n+\n+        Float64 p_value = std::numeric_limits<Float64>::infinity();\n+\n+        if (method == \"exact\")\n+        {\n+            /* reference:\n+             * Gunar Schr\u00f6er and Dietrich Trenkler\n+             * Exact and Randomization Distributions of Kolmogorov-Smirnov, Tests for Two or Three Samples\n+             *\n+             * and\n+             *\n+             * Thomas Viehmann\n+             * Numerically more stable computation of the p-values for the two-sample Kolmogorov-Smirnov test\n+             */\n+            if (n2 > n1)\n+                std::swap(n1, n2);\n+\n+            const Float64 f_n1 = static_cast<Float64>(n1);\n+            const Float64 f_n2 = static_cast<Float64>(n2);\n+            const Float64 k_d = (0.5 + floor(d * f_n2 * f_n1 - tol)) / (f_n2 * f_n1);\n+            PaddedPODArray<Float64> c(n1 + 1);\n+\n+            auto check = alternative == Alternative::TwoSided ?\n+                         [](const Float64 & q, const Float64 & r, const Float64 & s) { return fabs(r - s) >= q; }\n+                       : [](const Float64 & q, const Float64 & r, const Float64 & s) { return r - s >= q; };\n+\n+            c[0] = 0;\n+            for (UInt64 j = 1; j <= n1; j++)\n+                if (check(k_d, 0., j / f_n1))\n+                    c[j] = 1.;\n+                else\n+                    c[j] = c[j - 1];\n+\n+            for (UInt64 i = 1; i <= n2; i++)\n+            {\n+                if (check(k_d, i / f_n2, 0.))\n+                    c[0] = 1.;\n+                for (UInt64 j = 1; j <= n1; j++)\n+                    if (check(k_d, i / f_n2, j / f_n1))\n+                        c[j] = 1.;\n+                    else\n+                    {\n+                        Float64 v = i / static_cast<Float64>(i + j);\n+                        Float64 w = j / static_cast<Float64>(i + j);\n+                        c[j] = v * c[j] + w * c[j - 1];\n+                    }\n+            }\n+            p_value = c[n1];\n+        }\n+        else if (method == \"asymp\")\n+        {\n+            Float64 n = std::min(n1, n2);\n+            Float64 m = std::max(n1, n2);\n+            Float64 p = sqrt((n * m) / (n + m)) * d;\n+\n+            if (alternative == Alternative::TwoSided)\n+            {\n+                /* reference:\n+                 * J.DURBIN\n+                 * Distribution theory for tests based on the sample distribution function\n+                 */\n+                Float64 new_val, old_val, s, w, z;\n+                UInt64 k_max = static_cast<UInt64>(sqrt(2 - log(tol)));\n+\n+                if (p < 1)\n+                {\n+                    z = - (M_PI_2 * M_PI_4) / (p * p);\n+                    w = log(p);\n+                    s = 0;\n+                    for (UInt64 k = 1; k < k_max; k += 2)\n+                        s += exp(k * k * z - w);\n+                    p = s / 0.398942280401432677939946059934;\n+                }\n+                else\n+                {\n+                    z = -2 * p * p;\n+                    s = -1;\n+                    UInt64 k = 1;\n+                    old_val = 0;\n+                    new_val = 1;\n+                    while (fabs(old_val - new_val) > tol)\n+                    {\n+                        old_val = new_val;\n+                        new_val += 2 * s * exp(z * k * k);\n+                        s *= -1;\n+                        k++;\n+                    }\n+                    p = new_val;\n+                }\n+                p_value = 1 - p;\n+            }\n+            else\n+            {\n+                /* reference:\n+                 * J. L. HODGES, Jr\n+                 * The significance probability of the Smirnov two-sample test\n+                 */\n+\n+                // Use Hodges' suggested approximation Eqn 5.3\n+                // Requires m to be the larger of (n1, n2)\n+                Float64 expt = -2 * p * p - 2 * p * (m + 2 * n) / sqrt(m * n * (m + n)) / 3.0;\n+                p_value = exp(expt);\n+            }\n+        }\n+        return {d, p_value};\n+    }\n+\n+};\n+\n+class AggregateFunctionKolmogorovSmirnov final:\n+    public IAggregateFunctionDataHelper<KolmogorovSmirnov, AggregateFunctionKolmogorovSmirnov>\n+{\n+private:\n+    using Alternative = typename KolmogorovSmirnov::Alternative;\n+    Alternative alternative = Alternative::TwoSided;\n+    String method = \"auto\";\n+\n+public:\n+    explicit AggregateFunctionKolmogorovSmirnov(const DataTypes & arguments, const Array & params)\n+        : IAggregateFunctionDataHelper<KolmogorovSmirnov, AggregateFunctionKolmogorovSmirnov> ({arguments}, {}, createResultType())\n+    {\n+        if (params.size() > 2)\n+            throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH, \"Aggregate function {} require two parameter or less\", getName());\n+\n+        if (params.empty())\n+            return;\n+\n+        if (params[0].getType() != Field::Types::String)\n+            throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT, \"Aggregate function {} require first parameter to be a String\", getName());\n+\n+        const auto & param = params[0].get<String>();\n+        if (param == \"two-sided\")\n+            alternative = Alternative::TwoSided;\n+        else if (param == \"less\")\n+            alternative = Alternative::Less;\n+        else if (param == \"greater\")\n+            alternative = Alternative::Greater;\n+        else\n+            throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Unknown parameter in aggregate function {}. \"\n+                    \"It must be one of: 'two-sided', 'less', 'greater'\", getName());\n+\n+        if (params.size() != 2)\n+            return;\n+\n+        if (params[1].getType() != Field::Types::String)\n+                throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT, \"Aggregate function {} require second parameter to be a String\", getName());\n+\n+        method = params[1].get<String>();\n+        if (method != \"auto\" && method != \"exact\" && method != \"asymp\")\n+            throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Unknown method in aggregate function {}. \"\n+                    \"It must be one of: 'auto', 'exact', 'asymp'\", getName());\n+    }\n+\n+    String getName() const override\n+    {\n+        return \"kolmogorovSmirnovTest\";\n+    }\n+\n+    bool allocatesMemoryInArena() const override { return true; }\n+\n+    static DataTypePtr createResultType()\n+    {\n+        DataTypes types\n+        {\n+            std::make_shared<DataTypeNumber<Float64>>(),\n+            std::make_shared<DataTypeNumber<Float64>>(),\n+        };\n+\n+        Strings names\n+        {\n+            \"d_statistic\",\n+            \"p_value\"\n+        };\n+\n+        return std::make_shared<DataTypeTuple>(\n+            std::move(types),\n+            std::move(names)\n+        );\n+    }\n+\n+    void add(AggregateDataPtr __restrict place, const IColumn ** columns, size_t row_num, Arena * arena) const override\n+    {\n+        Float64 value = columns[0]->getFloat64(row_num);\n+        UInt8 is_second = columns[1]->getUInt(row_num);\n+        if (is_second)\n+            this->data(place).addY(value, arena);\n+        else\n+            this->data(place).addX(value, arena);\n+    }\n+\n+    void merge(AggregateDataPtr __restrict place, ConstAggregateDataPtr rhs, Arena * arena) const override\n+    {\n+        this->data(place).merge(this->data(rhs), arena);\n+    }\n+\n+    void serialize(ConstAggregateDataPtr __restrict place, WriteBuffer & buf, std::optional<size_t> /* version */) const override\n+    {\n+        this->data(place).write(buf);\n+    }\n+\n+    void deserialize(AggregateDataPtr __restrict place, ReadBuffer & buf, std::optional<size_t> /* version */, Arena * arena) const override\n+    {\n+        this->data(place).read(buf, arena);\n+    }\n+\n+    void insertResultInto(AggregateDataPtr __restrict place, IColumn & to, Arena *) const override\n+    {\n+        if (!this->data(place).size_x || !this->data(place).size_y)\n+            throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Aggregate function {} require both samples to be non empty\", getName());\n+\n+        auto [d_statistic, p_value] = this->data(place).getResult(alternative, method);\n+\n+        /// Because p-value is a probability.\n+        p_value = std::min(1.0, std::max(0.0, p_value));\n+\n+        auto & column_tuple = assert_cast<ColumnTuple &>(to);\n+        auto & column_stat = assert_cast<ColumnVector<Float64> &>(column_tuple.getColumn(0));\n+        auto & column_value = assert_cast<ColumnVector<Float64> &>(column_tuple.getColumn(1));\n+\n+        column_stat.getData().push_back(d_statistic);\n+        column_value.getData().push_back(p_value);\n+    }\n+\n+};\n+\n+}\ndiff --git a/src/AggregateFunctions/registerAggregateFunctions.cpp b/src/AggregateFunctions/registerAggregateFunctions.cpp\nindex 679449681a0c..2781d0662b0d 100644\n--- a/src/AggregateFunctions/registerAggregateFunctions.cpp\n+++ b/src/AggregateFunctions/registerAggregateFunctions.cpp\n@@ -79,6 +79,7 @@ void registerAggregateFunctionExponentialMovingAverage(AggregateFunctionFactory\n void registerAggregateFunctionSparkbar(AggregateFunctionFactory &);\n void registerAggregateFunctionIntervalLengthSum(AggregateFunctionFactory &);\n void registerAggregateFunctionAnalysisOfVariance(AggregateFunctionFactory &);\n+void registerAggregateFunctionKolmogorovSmirnovTest(AggregateFunctionFactory & factory);\n \n class AggregateFunctionCombinatorFactory;\n void registerAggregateFunctionCombinatorIf(AggregateFunctionCombinatorFactory &);\n@@ -170,6 +171,7 @@ void registerAggregateFunctions()\n         registerAggregateFunctionExponentialMovingAverage(factory);\n         registerAggregateFunctionSparkbar(factory);\n         registerAggregateFunctionAnalysisOfVariance(factory);\n+        registerAggregateFunctionKolmogorovSmirnovTest(factory);\n \n         registerWindowFunctions(factory);\n     }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02706_kolmogorov_smirnov_test.reference b/tests/queries/0_stateless/02706_kolmogorov_smirnov_test.reference\nnew file mode 100644\nindex 000000000000..d2e9e7de5d43\n--- /dev/null\n+++ b/tests/queries/0_stateless/02706_kolmogorov_smirnov_test.reference\n@@ -0,0 +1,3 @@\n+0.1\t0.1\t1\t0.05\t0.1\t1\t0.05\t0.1\t1\t0.05\t0.099562\t1\t0.018316\t1\t1\t-0\t1\t1\t-0\t1\t1\t-0\t1\t1\t-0\t1\n+0.000007\t0.000007\t0.000004\t0.000023\t0.000007\t0.000004\t0.000023\t0.000007\t0.000004\t0.000023\t0.000008\t0.000003\t0.00002\t0.158\t0.158\t0.158\t0.146\t0.158\t0.158\t0.146\t0.158\t0.158\t0.146\t0.158\t0.158\t0.146\n+0\t0\t0\t0.523357\t0\t0\t0.523357\t0\t0\t0.523357\t0\t0\t0.504595\t0.486\t0.486\t0.486\t0.036\t0.486\t0.486\t0.036\t0.486\t0.486\t0.036\t0.486\t0.486\t0.036\ndiff --git a/tests/queries/0_stateless/02706_kolmogorov_smirnov_test.sql b/tests/queries/0_stateless/02706_kolmogorov_smirnov_test.sql\nnew file mode 100644\nindex 000000000000..3199b6968c02\n--- /dev/null\n+++ b/tests/queries/0_stateless/02706_kolmogorov_smirnov_test.sql\n@@ -0,0 +1,107 @@\n+DROP TABLE IF EXISTS kstest;\n+\n+CREATE TABLE kstest (left Float64, right Float64) ENGINE = Memory;\n+\n+INSERT INTO kstest VALUES (0.010268, 0), (0.000167, 0), (0.000167, 0), (0.159258, 1), (0.136278, 1), (0.122389, 1);\n+\n+SELECT \n+roundBankers(kolmogorovSmirnovTest(left, right).2, 6),\n+roundBankers(kolmogorovSmirnovTest('two-sided')(left, right).2, 6),\n+roundBankers(kolmogorovSmirnovTest('less')(left, right).2, 6),\n+roundBankers(kolmogorovSmirnovTest('greater')(left, right).2, 6),\n+roundBankers(kolmogorovSmirnovTest('two-sided','auto')(left, right).2, 6),\n+roundBankers(kolmogorovSmirnovTest('less','auto')(left, right).2, 6),\n+roundBankers(kolmogorovSmirnovTest('greater','auto')(left, right).2, 6),\n+roundBankers(kolmogorovSmirnovTest('two-sided','exact')(left, right).2, 6),\n+roundBankers(kolmogorovSmirnovTest('less','exact')(left, right).2, 6),\n+roundBankers(kolmogorovSmirnovTest('greater','exact')(left, right).2, 6),\n+roundBankers(kolmogorovSmirnovTest('two-sided','asymp')(left, right).2, 6),\n+roundBankers(kolmogorovSmirnovTest('less','asymp')(left, right).2, 6),\n+roundBankers(kolmogorovSmirnovTest('greater','asymp')(left, right).2, 6) ,\n+roundBankers(kolmogorovSmirnovTest(left, right).1, 6),\n+roundBankers(kolmogorovSmirnovTest('two-sided')(left, right).1, 6),\n+roundBankers(kolmogorovSmirnovTest('less')(left, right).1, 6),\n+roundBankers(kolmogorovSmirnovTest('greater')(left, right).1, 6),\n+roundBankers(kolmogorovSmirnovTest('two-sided','auto')(left, right).1, 6),\n+roundBankers(kolmogorovSmirnovTest('less','auto')(left, right).1, 6),\n+roundBankers(kolmogorovSmirnovTest('greater','auto')(left, right).1, 6),\n+roundBankers(kolmogorovSmirnovTest('two-sided','exact')(left, right).1, 6),\n+roundBankers(kolmogorovSmirnovTest('less','exact')(left, right).1, 6),\n+roundBankers(kolmogorovSmirnovTest('greater','exact')(left, right).1, 6),\n+roundBankers(kolmogorovSmirnovTest('two-sided','asymp')(left, right).1, 6),\n+roundBankers(kolmogorovSmirnovTest('less','asymp')(left, right).1, 6),\n+roundBankers(kolmogorovSmirnovTest('greater','asymp')(left, right).1, 6) \n+from kstest;\n+\n+DROP TABLE IF EXISTS kstest;\n+\n+CREATE TABLE kstest (left Float64, right Float64) ENGINE = Memory;\n+\n+INSERT INTO kstest VALUES (14.72789, 0), (9.61661, 0), (13.57615, 0), (3.98392, 0), (11.98889, 0), (10.99422, 0), (5.44792, 0), (20.29346, 0), (7.05926, 0), (9.22732, 0), (12.06847, 0), (13.52612, 0), (8.24597, 0), (9.35245, 0), (10.12297, 0), (15.80624, 0), (13.68613, 0), (10.72729, 0), (5.62078, 0), (6.12229, 0), (6.03801, 0), (8.95585, 0), (24.04613, 0), (9.04757, 0), (2.68263, 0), (15.43935, 0), (2.89423, 0), (4.01423, 0), (4.30568, 0), (11.99948, 0), (8.40574, 0), (10.86642, 0), (9.4266, 0), (-8.12752, 0), (7.91634, 0), (7.3967, 0), (2.26431, 0), (14.20118, 0), (6.68233, 0), (15.46221, 0), (7.88467, 0), (11.20011, 0), (8.92027, 0), (10.27926, 0), (5.14395, 0), (5.62178, 0), (12.84383, 0), (9.98009, 0), (-0.69789, 0), (11.41386, 0), (7.76863, 0), (7.21743, 0), (1.81176, 0), (9.43762, 0), (19.22117, 0), (2.97128, 0), (14.32851, 0), (7.54959, 0), (3.81545, 0), (10.1281, 0), (2.48596, 0), (10.0461, 0), (3.59714, 0), (9.73522, 0), (18.8077, 0), (3.15148, 0), (12.26062, 0), (5.66707, 0), (6.58623, 0), (17.30902, 0), (9.91391, 0), (5.36946, 0), (15.73637, 0), (16.96281, 0), (11.54063, 0), (18.37358, 0), (11.38255, 0), (10.53256, 0), (8.08833, 0), (16.27556, 0), (2.42969, 0), (9.56127, 0), (7.32998, 0), (9.19511, 0), (9.66903, 0), (4.15029, 0), (8.83511, 0), (14.60617, 0), (14.06143, 0), (5.39556, 0), (10.11871, 0), (10.56619, 0), (14.4462, 0), (10.42106, 0), (7.75551, 0), (11.00418, 0), (4.47226, 0), (16.35461, 0), (18.55174, 0), (11.82044, 0), (7.39454, 0), (11.27767, 0), (6.83827, 0), (7.76858, 0), (15.97614, 0), (14.53781, 0), (12.99546, 0), (16.91151, 0), (9.65012, 0), (14.25487, 0), (14.03618, 0), (2.57382, 0), (2.50779, 0), (14.24787, 0), (13.34666, 0), (7.31102, 0), (10.22981, 0), (17.4435, 0), (21.2074, 0), (6.64191, 0), (18.7086, 0), (14.78686, 0), (9.85287, 0), (4.48263, 0), (14.17469, 0), (14.4342, 0), (19.2481, 0), (3.47165, 0), (8.28712, 0), (8.81657, 0), (0.92319, 0), (20.41106, 0), (6.76127, 0), (22.00242, 0), (8.66129, 0), (10.9929, 0), (17.95494, 0), (17.20996, 0), (12.18888, 0), (12.14257, 0), (15.81243, 0), (4.43362, 0), (1.17567, 0), (15.60881, 0), (9.34833, 0), (6.33513, 0), (-0.83095, 0), (12.43268, 0), (6.63207, 0), (11.96877, 0), (14.81029, 0), (21.84876, 0), (3.75896, 0), (6.91307, 0), (13.73015, 0), (8.63753, 0), (15.71679, 0), (1.74565, 0), (9.16895, 0), (5.70685, 0), (5.00117, 0), (13.06888, 0), (7.51204, 0), (15.34885, 0), (5.20264, 0), (8.59043, 0), (6.45619, 0), (14.61979, 0), (11.7075, 0), (14.04901, 0), (4.20525, 0), (15.1733, 0), (3.12934, 0), (8.08049, 0), (15.41273, 0), (16.90751, 0), (5.86893, 0), (7.1086, 0), (4.418, 0), (12.0614, 0), (7.07887, 0), (3.61585, 0), (11.73001, 0), (10.80449, 0), (8.40311, 0), (9.91276, 0), (16.4164, 0), (5.25034, 0), (15.20283, 0), (10.42909, 0), (9.53888, 0), (14.68939, 0), (6.60007, 0), (18.31058, 0), (7.01885, 0), (18.71631, 0), (10.50002, 0), (10.7517, 0), (4.23224, 0), (2.28924, 0), (8.56059, 0), (8.25095, 0), (9.15673, 0), (13.28409, 0), (8.4513, 0), (2.83911, 0), (2.79676, 0), (9.11055, 0), (7.18529, 0), (-4.1258, 0), (5.28306, 0), (6.82757, 0), (10.89035, 0), (5.24822, 0), (11.935, 0), (6.45675, 0), (10.18088, 0), (4.9932, 0), (18.09939, 0), (8.11738, 0), (5.37883, 0), (10.50339, 0), (16.64093, 0), (14.77263, 0), (13.71385, 0), (6.98746, 0), (10.74635, 0), (5.49432, 0), (13.46078, 0), (10.67565, 0), (9.0291, 0), (11.51417, 0), (13.07118, 0), (9.5049, 0), (8.50611, 0), (6.47606, 0), (13.06526, 0), (19.08658, 0), (9.49741, 0), (10.60865, 0), (2.28996, 0), (8.12846, 0), (5.62241, 0), (4.07712, 0), (17.98526, 0), (9.466, 0), (11.38904, 0), (5.91826, 0), (1.52059, 0), (18.79161, 0), (18.20669, 0), (-1.67829, 0), (18.01586, 0), (16.31577, 0), (7.88281, 0), (8.46179, 0), (10.31113, 0), (14.88377, 0), (1.31835, 0), (2.53176, 0), (9.48625, 0), (3.97936, 0), (11.52319, 0), (13.24178, 0), (7.58739, 0), (10.00959, 0), (9.73361, 0), (8.35716, 0), (1.65491, 0), (11.11521, 0), (6.08355, 0), (10.04582, 0), (11.58237, 0), (16.40249, 0), (1.9691, 0), (13.22776, 0), (2.67059, 0), (9.83651, 0), (2.12539, 0), (9.27114, 0), (9.0699, 0), (2.78179, 0), (12.49311, 0), (12.97662, 0), (15.06359, 0), (16.91565, 0), (5.92011, 0), (5.81304, 0), (8.46425, 0), (9.48705, 0), (4.68191, 0), (5.70028, 0), (-0.78798, 0), (10.03442, 0), (15.45433, 0), (9.43845, 0), (3.05825, 0), (6.92126, 0), (14.05905, 0), (19.71579, 0), (15.0131, 0), (4.50386, 0), (1.31061, 0), (10.81197, 0), (14.32942, 0), (9.26469, 0), (7.27679, 0), (22.69295, 0), (12.03763, 0), (7.34876, 0), (16.60689, 0), (7.48786, 0), (15.78602, 0), (17.21048, 0), (13.93482, 0), (9.69911, 0), (12.24315, 0), (10.58131, 0), (19.57006, 0), (9.8856, 0), (11.70302, 0), (7.89864, 0), (12.24831, 0), (16.93707, 0), (9.65467, 0), (4.221, 0), (15.45229, 0), (12.83088, 0), (7.58313, 0), (12.895, 0), (10.02471, 0), (13.36059, 0), (5.07864, 0), (9.72017, 0), (11.05809, 0), (15.28528, 0), (13.99834, 0), (19.26989, 0), (9.41846, 0), (11.65425, 0), (8.49638, 0), (6.38592, 0), (-4.69837, 0), (12.22061, 0), (9.41331, 0), (13.2075, 0), (12.97005, 0), (11.44352, 0), (9.79805, 0), (6.93116, 0), (10.07691, 0), (22.05892, 0), (7.80353, 0), (-2.17276, 0), (0.61509, 0), (8.35842, 0), (17.77108, 0), (14.70841, 0), (1.27992, 0), (15.62699, 0), (9.32914, 0), (15.41866, 0), (10.82009, 0), (3.29902, 0), (9.21998, 0), (7.93845, 0), (10.33344, 0), (12.06399, 0), (5.5308, 0), (8.38727, 0), (18.11104, 0), (8.86565, 0), (19.41825, 0), (9.52376, 0), (3.94552, 0), (9.37587, 0), (15.44954, 0), (15.90527, 0), (13.18927, 0), (7.01646, 0), (9.06005, 0), (9.06431, 0), (5.76006, 0), (9.18705, 0), (-3.48446, 0), (15.89817, 0), (12.94719, 0), (23.69426, 0), (17.47755, 0), (15.61528, 0), (0.54832, 0), (14.32916, 0), (9.55305, 0), (13.79891, 0), (0.82544, 0), (13.34875, 0), (9.07614, 0), (5.19621, 0), (2.1451, 0), (9.87726, 0), (8.45439, 0), (-1.41842, 0), (7.93598, 0), (11.23151, 0), (17.84458, 0), (7.02237, 0), (10.7842, 0), (4.42832, 0), (4.45044, 0), (1.50938, 0), (21.21651, 0), (6.2097, 0), (6.84354, 0), (18.53804, 0), (12.01072, 0), (4.8345, 0), (20.41587, 0), (14.48353, 0), (8.71116, 0), (12.42818, 0), (14.89244, 0), (8.03033, 0), (5.25917, 0), (2.30092, 0), (10.22504, 0), (15.37573, 0), (7.13666, 0), (4.45018, 0), (10.18405, 0), (3.91025, 0), (14.52304, 0), (13.14771, 0), (11.99219, 0), (9.21345, 0), (8.85106, 0), (12.91887, 0), (15.62308, 0), (11.88034, 0), (15.12097, 0), (11.58168, 0), (16.83051, 0), (5.25405, 0), (2.19976, 0), (4.56716, 0), (16.46053, 0), (5.61995, 0), (8.67704, 0), (5.62789, 0), (9.84815, 0), (13.05834, 0), (11.74205, 0), (3.88393, 0), (16.15321, 0), (4.83925, 0), (13.00334, 0), (4.4028, 0), (4.35794, 0), (4.47478, 0), (2.38713, 0), (4.25235, 0), (10.87509, 0), (9.82411, 0), (13.61518, 0), (10.25507, 0), (4.0335, 0), (10.69881, 0), (5.70321, 0), (6.96244, 0), (9.35874, 0), (6.28076, 0), (8.29015, 0), (6.88653, 0), (7.70687, 0), (8.2001, 0), (6.73415, 0), (3.82052, 0), (3.94469, 0), (15.82384, 0), (2.54004, 0), (10.74876, 0), (12.60517, 0), (17.7024, 0), (4.6722, 0), (13.67341, 0), (6.4565, 0), (12.95699, 0), (4.56912, 0), (5.58464, 0), (4.0638, 0), (13.05559, 0), (5.38269, 0), (0.16354, 0), (7.23962, 0), (7.38577, 0), (8.50951, 0), (13.72574, 0), (17.80421, 0), (3.01135, 0), (8.02608, 0), (14.23847, 0), (-8.65656, 1), (22.98234, 1), (23.80821, 1), (13.33939, 1), (-4.05537, 1), (23.5155, 1), (-6.45272, 1), (17.7903, 1), (11.463, 1), (5.28021, 1), (8.39157, 1), (6.02464, 1), (14.43732, 1), (15.76584, 1), (1.54391, 1), (1.24897, 1), (27.1507, 1), (7.71091, 1), (15.71846, 1), (32.97808, 1), (-1.79334, 1), (-9.23439, 1), (11.27838, 1), (0.72703, 1), (18.51557, 1), (9.16619, 1), (17.29624, 1), (-1.30208, 1), (-3.48018, 1), (10.12082, 1), (-8.01318, 1), (-14.22264, 1), (16.58174, 1), (-0.55975, 1), (5.61449, 1), (1.44626, 1), (7.89158, 1), (1.13369, 1), (-0.82609, 1), (12.23365, 1), (12.45443, 1), (14.46915, 1), (13.72627, 1), (18.41459, 1), (29.66702, 1), (1.51619, 1), (10.40078, 1), (3.33266, 1), (6.12036, 1), (11.86553, 1), (6.59422, 1), (22.0948, 1), (1.79623, 1), (14.29513, 1), (19.69162, 1), (-7.98033, 1), (5.48433, 1), (-2.28474, 1), (9.91876, 1), (10.64097, 1), (0.22523, 1), (17.01773, 1), (22.37388, 1), (14.04215, 1), (23.1244, 1), (18.96958, 1), (8.42663, 1), (3.7165, 1), (14.29366, 1), (23.50886, 1), (26.33722, 1), (26.72396, 1), (13.26287, 1), (12.97607, 1), (17.41838, 1), (8.63875, 1), (17.08943, 1), (23.15356, 1), (-4.4965, 1), (7.58895, 1), (26.04074, 1), (6.84245, 1), (20.56287, 1), (3.84735, 1), (-2.76304, 1), (13.1615, 1), (8.21954, 1), (-3.49943, 1), (22.12419, 1), (7.08323, 1), (16.12937, 1), (-0.32672, 1), (16.5942, 1), (7.68977, 1), (11.39484, 1), (-5.11987, 1), (20.87404, 1), (8.01007, 1), (3.26497, 1), (5.61253, 1), (20.69182, 1), (0.0296, 1), (21.904, 1), (22.46572, 1), (3.63685, 1), (-5.10846, 1), (14.86389, 1), (5.47188, 1), (18.44095, 1), (16.71368, 1), (6.36704, 1), (8.82663, 1), (14.6727, 1), (7.98383, 1), (2.65568, 1), (21.45827, 1), (11.77948, 1), (4.71979, 1), (3.17951, 1), (13.90226, 1), (15.50578, 1), (10.8026, 1), (16.91369, 1), (9.90552, 1), (13.87322, 1), (4.12366, 1), (-3.78985, 1), (1.7599, 1), (3.43715, 1), (-3.45246, 1), (23.64571, 1), (-4.96877, 1), (3.93514, 1), (1.49914, 1), (12.71519, 1), (5.11521, 1), (4.79872, 1), (20.89391, 1), (5.363, 1), (8.02765, 1), (14.30804, 1), (11.49002, 1), (14.25281, 1), (7.6573, 1), (15.49686, 1), (3.29327, 1), (2.27236, 1), (12.58104, 1), (19.19128, 1), (15.25901, 1), (6.5221, 1), (10.10965, 1), (12.75249, 1), (16.50977, 1), (-8.6697, 1), (8.28553, 1), (1.44315, 1), (4.65869, 1), (0.98149, 1), (0.16623, 1), (17.66332, 1), (4.35346, 1), (6.52742, 1), (-1.06631, 1), (-5.28454, 1), (14.25583, 1), (8.74058, 1), (1.89553, 1), (-0.92959, 1), (10.30289, 1), (-6.3744, 1), (-8.1706, 1), (10.95369, 1), (4.94384, 1), (28.40568, 1), (3.7004, 1), (2.52363, 1), (4.07997, 1), (7.8849, 1), (17.95409, 1), (16.67021, 1), (11.34377, 1), (-0.07446, 1), (22.00223, 1), (3.31778, 1), (18.50719, 1), (-3.58655, 1), (6.5394, 1), (12.40459, 1), (16.59866, 1), (7.54176, 1), (-1.51044, 1), (12.69758, 1), (2.9842, 1), (2.49187, 1), (2.04113, 1), (-2.46544, 1), (15.18368, 1), (-0.04058, 1), (-0.4127, 1), (10.5526, 1), (12.03982, 1), (12.10923, 1), (11.54954, 1), (-1.18613, 1), (11.30984, 1), (23.54105, 1), (10.67321, 1), (24.09196, 1), (7.5008, 1), (12.52233, 1), (4.30673, 1), (9.35793, 1), (4.44472, 1), (-7.00679, 1), (8.56241, 1), (23.73891, 1), (15.62708, 1), (16.09205, 1), (12.52074, 1), (14.58927, 1), (-4.80187, 1), (8.47964, 1), (7.75477, 1), (12.6893, 1), (7.14147, 1), (12.12654, 1), (12.32334, 1), (7.98909, 1), (3.26652, 1), (20.53684, 1), (32.3369, 1), (19.74911, 1), (-4.62897, 1), (8.26483, 1), (20.88451, 1), (-2.12982, 1), (25.61459, 1), (5.32091, 1), (-4.1196, 1), (7.57937, 1), (21.15847, 1), (6.46355, 1), (7.74846, 1), (19.62636, 1), (28.34629, 1), (26.73919, 1), (20.40427, 1), (3.03378, 1), (10.2537, 1), (7.47745, 1), (10.79184, 1), (3.91962, 1), (19.97973, 1), (18.87711, 1), (12.56157, 1), (11.46033, 1), (3.78661, 1), (-9.45748, 1), (12.06033, 1), (-0.74615, 1), (13.2815, 1), (24.78052, 1), (5.83337, 1), (17.4111, 1), (19.70331, 1), (11.78446, 1), (-1.366, 1), (1.37458, 1), (16.31483, 1), (32.63464, 1), (-3.79736, 1), (19.17984, 1), (-0.27705, 1), (-3.69456, 1), (28.38058, 1), (-1.36876, 1), (-25.63301, 1), (3.58644, 1), (-6.85667, 1), (13.42225, 1), (12.04671, 1), (28.99468, 1), (7.87662, 1), (2.61119, 1), (-3.56022, 1), (1.50022, 1), (14.55836, 1), (9.35831, 1), (16.9366, 1), (29.23126, 1), (15.31386, 1), (13.46112, 1), (7.39667, 1), (11.15599, 1), (9.80499, 1), (22.64923, 1), (8.67693, 1), (18.67335, 1), (-3.19127, 1), (22.94716, 1), (17.86834, 1), (16.98267, 1), (15.91653, 1), (11.79718, 1), (18.50208, 1), (8.90755, 1), (10.44843, 1), (4.67433, 1), (6.82287, 1), (10.82228, 1), (-4.18631, 1), (20.3872, 1), (11.84735, 1), (21.25376, 1), (10.55032, 1), (12.19023, 1), (0.63369, 1), (7.92381, 1), (17.90933, 1), (15.30781, 1), (10.01877, 1), (0.88744, 1), (22.20967, 1), (-4.23117, 1), (21.50819, 1), (11.27421, 1), (-16.23179, 1), (33.43085, 1), (5.15093, 1), (1.34505, 1), (6.027, 1), (-10.43035, 1), (27.45998, 1), (19.24886, 1), (-4.44761, 1), (5.453, 1), (12.73758, 1), (11.2897, 1), (31.032, 1), (7.39168, 1), (11.95245, 1), (26.279, 1), (-1.0255, 1), (10.36675, 1), (11.58439, 1), (27.8405, 1), (13.1707, 1), (31.39133, 1), (27.08301, 1), (-2.14368, 1), (4.08476, 1), (21.5573, 1), (16.69822, 1), (7.69955, 1), (8.32793, 1), (6.49235, 1), (-7.3284, 1), (10.58264, 1), (-6.17006, 1), (34.55782, 1), (10.93221, 1), (44.24299, 1), (14.6224, 1), (-7.42798, 1), (15.52351, 1), (11.33982, 1), (10.46716, 1), (13.0986, 1), (-4.25988, 1), (9.55316, 1), (0.75489, 1), (25.99212, 1), (-0.81401, 1), (3.49551, 1), (22.99402, 1), (10.99628, 1), (23.70223, 1), (2.71482, 1), (22.82309, 1), (31.25686, 1), (4.86318, 1), (-1.06476, 1), (15.10298, 1), (-0.61015, 1), (17.81246, 1), (-1.55788, 1), (18.09709, 1), (9.11271, 1), (9.94682, 1), (-7.33194, 1), (-4.67293, 1), (21.81717, 1), (7.16318, 1), (13.25649, 1), (13.88776, 1), (4.95793, 1), (17.65303, 1), (14.47382, 1), (13.19373, 1), (31.86093, 1), (5.73161, 1), (10.96492, 1), (6.97951, 1), (1.75136, 1), (10.96144, 1), (15.08137, 1), (9.95311, 1), (7.07729, 1), (3.08148, 1), (22.37954, 1), (8.51951, 1), (2.88746, 1), (26.73509, 1), (-2.88939, 1), (-2.82367, 1), (-0.35783, 1), (14.22076, 1), (11.50295, 1), (7.10171, 1), (8.28488, 1), (0.54178, 1), (13.8022, 1), (15.62157, 1), (10.79173, 1), (28.18946, 1), (30.43524, 1), (2.54914, 1), (9.89421, 1), (13.08631, 1), (4.68761, 1), (5.61516, 1), (22.88072, 1), (7.4735, 1), (11.27382, 1), (2.39559, 1), (-3.31889, 1), (9.61957, 1), (23.01381, 1), (-1.23467, 1), (9.07691, 1), (15.78056, 1), (12.28421, 1), (9.44888, 1), (13.16928, 1), (4.33357, 1), (2.21737, 1), (33.17833, 1), (13.25407, 1), (-2.47961, 1), (6.41401, 1), (18.8439, 1), (-4.63375, 1), (-8.2909, 1), (12.18221, 1), (-2.95356, 1), (19.61659, 1), (12.45056, 1), (-4.17198, 1), (21.9641, 1), (11.96416, 1), (12.74573, 1), (10.47873, 1), (12.73295, 1), (11.31373, 1), (9.9827, 1), (5.87138, 1), (4.24372, 1), (-23.72256, 1), (28.41337, 1), (4.88103, 1), (3.61902, 1), (8.93586, 1), (16.40759, 1), (27.84494, 1), (5.6001, 1), (14.51379, 1), (13.5576, 1), (12.92213, 1), (3.90686, 1), (17.07104, 1), (15.84268, 1), (17.38777, 1), (16.54766, 1), (5.94487, 1), (17.02804, 1), (7.66386, 1), (10.43088, 1), (6.16059, 1), (20.46178, 1), (20.02888, 1), (20.95949, 1), (6.50808, 1), (7.22366, 1), (8.06659, 1), (16.08241, 1), (13.83514, 1), (-0.33454, 1), (12.98848, 1), (12.99024, 1);\n+\n+SELECT \n+roundBankers(kolmogorovSmirnovTest(left, right).2, 6),\n+roundBankers(kolmogorovSmirnovTest('two-sided')(left, right).2, 6),\n+roundBankers(kolmogorovSmirnovTest('less')(left, right).2, 6),\n+roundBankers(kolmogorovSmirnovTest('greater')(left, right).2, 6),\n+roundBankers(kolmogorovSmirnovTest('two-sided','auto')(left, right).2, 6),\n+roundBankers(kolmogorovSmirnovTest('less','auto')(left, right).2, 6),\n+roundBankers(kolmogorovSmirnovTest('greater','auto')(left, right).2, 6),\n+roundBankers(kolmogorovSmirnovTest('two-sided','exact')(left, right).2, 6),\n+roundBankers(kolmogorovSmirnovTest('less','exact')(left, right).2, 6),\n+roundBankers(kolmogorovSmirnovTest('greater','exact')(left, right).2, 6),\n+roundBankers(kolmogorovSmirnovTest('two-sided','asymp')(left, right).2, 6),\n+roundBankers(kolmogorovSmirnovTest('less','asymp')(left, right).2, 6),\n+roundBankers(kolmogorovSmirnovTest('greater','asymp')(left, right).2, 6) ,\n+roundBankers(kolmogorovSmirnovTest(left, right).1, 6),\n+roundBankers(kolmogorovSmirnovTest('two-sided')(left, right).1, 6),\n+roundBankers(kolmogorovSmirnovTest('less')(left, right).1, 6),\n+roundBankers(kolmogorovSmirnovTest('greater')(left, right).1, 6),\n+roundBankers(kolmogorovSmirnovTest('two-sided','auto')(left, right).1, 6),\n+roundBankers(kolmogorovSmirnovTest('less','auto')(left, right).1, 6),\n+roundBankers(kolmogorovSmirnovTest('greater','auto')(left, right).1, 6),\n+roundBankers(kolmogorovSmirnovTest('two-sided','exact')(left, right).1, 6),\n+roundBankers(kolmogorovSmirnovTest('less','exact')(left, right).1, 6),\n+roundBankers(kolmogorovSmirnovTest('greater','exact')(left, right).1, 6),\n+roundBankers(kolmogorovSmirnovTest('two-sided','asymp')(left, right).1, 6),\n+roundBankers(kolmogorovSmirnovTest('less','asymp')(left, right).1, 6),\n+roundBankers(kolmogorovSmirnovTest('greater','asymp')(left, right).1, 6) \n+from kstest;\n+\n+DROP TABLE IF EXISTS kstest;\n+\n+\n+CREATE TABLE kstest (left Float64, right Float64) ENGINE = Memory;\n+\n+INSERT INTO kstest VALUES (4.82025, 0), (6.13896, 0), (15.20277, 0), (14.15351, 0), (7.21338, 0), (8.55506, 0), (13.80816, 0), (11.28411, 0), (7.4612, 0), (7.43759, 0), (12.9832, 0), (-5.74783, 0), (12.47114, 0), (15.14223, 0), (3.40603, 0), (9.27323, 0), (7.88547, 0), (8.56456, 0), (4.59731, 0), (7.91213, 0), (7.33894, 0), (21.74811, 0), (11.92111, 0), (0.18828, 0), (10.47314, 0), (20.37396, 0), (11.04991, 0), (13.30083, 0), (14.28065, 0), (2.86942, 0), (24.96072, 0), (14.20164, 0), (18.28769, 0), (10.50949, 0), (9.22273, 0), (11.77608, 0), (8.56872, 0), (13.74535, 0), (11.65209, 0), (12.51894, 0), (17.76256, 0), (13.52122, 0), (8.70796, 0), (6.04749, 0), (16.33064, 0), (8.35636, 0), (14.03496, 0), (11.05834, 0), (14.49261, 0), (2.59383, 0), (8.01022, 0), (4.05458, 0), (13.26384, 0), (14.62058, 0), (10.52489, 0), (8.46357, 0), (6.4147, 0), (9.70071, 0), (12.47581, 0), (4.38333, 0), (17.54172, 0), (10.12109, 0), (7.73186, 0), (14.0279, 0), (11.6621, 0), (17.47045, 0), (15.50223, 0), (15.46034, 0), (13.39964, 0), (14.98025, 0), (15.87912, 0), (17.67374, 0), (9.64073, 0), (12.84904, 0), (7.70278, 0), (13.03156, 0), (9.04512, 0), (15.97014, 0), (8.96389, 0), (11.48009, 0), (9.71153, 0), (13.00084, 0), (12.39803, 0), (13.08188, 0), (5.82244, 0), (10.81871, 0), (8.2539, 0), (7.52114, 0), (9.11488, 0), (8.37482, 0), (14.48652, 0), (11.42152, 0), (16.03111, 0), (13.14057, 0), (-2.26351, 0), (15.50394, 0), (14.88603, 0), (13.37257, 0), (11.84026, 0), (7.66558, 0), (6.24584, 0), (3.6312, 0), (2.7018, 0), (5.63656, 0), (5.82643, 0), (10.06745, 0), (-0.5831, 0), (14.84202, 0), (9.5524, 0), (19.71713, 0), (14.23109, 0), (8.69105, 0), (5.33742, 0), (7.30372, 0), (7.93342, 0), (15.20884, 0), (7.53839, 0), (13.45311, 0), (11.04473, 0), (10.76673, 0), (15.44145, 0), (14.06596, 0), (9.14873, 0), (12.88372, 0), (8.74994, 0), (10.53263, 0), (16.16694, 0), (8.37197, 0), (3.43739, 0), (4.72799, 0), (9.08802, 0), (11.2531, 0), (5.16115, 0), (10.20895, 0), (18.70884, 0), (15.88924, 0), (3.38758, 0), (6.46449, 0), (10.21088, 0), (14.08458, 0), (15.74508, 0), (19.31896, 0), (13.19641, 0), (11.95409, 0), (10.70718, 0), (1.05245, 0), (10.04772, 0), (17.01369, 0), (10.2286, 0), (19.58323, 0), (7.02892, 0), (4.16866, 0), (8.94326, 0), (4.99854, 0), (8.88352, 0), (18.65422, 0), (17.32328, 0), (9.33492, 0), (14.94788, 0), (8.05863, 0), (14.6737, 0), (10.93801, 0), (0.54036, 0), (-0.34242, 0), (5.89076, 0), (3.15189, 0), (1.94421, 0), (6.38698, 0), (10.50654, 0), (8.95362, 0), (6.23711, 0), (11.75359, 0), (12.42155, 0), (-1.55472, 0), (4.6688, 0), (10.48087, 0), (11.74615, 0), (9.26822, 0), (7.55517, 0), (12.76005, 0), (16.47102, 0), (11.31297, 0), (14.37437, 0), (2.38799, 0), (6.44577, 0), (5.07471, 0), (11.55123, 0), (7.76795, 0), (10.60116, 0), (14.40885, 0), (11.58158, 0), (8.81648, 0), (12.92299, 0), (11.26939, 0), (17.95014, 0), (2.95002, 0), (17.41959, 0), (11.12455, 0), (8.78541, 0), (14.36413, 0), (12.98554, 0), (12.58505, 0), (15.49789, 0), (11.70999, 0), (0.65596, 0), (11.08202, 0), (14.75752, 0), (6.84385, 0), (9.27245, 0), (13.78243, 0), (17.4863, 0), (4.01777, 0), (11.82861, 0), (13.86551, 0), (6.16591, 0), (8.71589, 0), (16.77195, 0), (17.23243, 0), (-2.12941, 0), (5.66629, 0), (12.45153, 0), (1.63971, 0), (13.84031, 0), (4.6144, 0), (5.26169, 0), (9.27769, 0), (9.14288, 0), (9.71953, 0), (9.38446, 0), (1.64788, 0), (11.72922, 0), (13.68926, 0), (9.42952, 0), (12.05574, 0), (9.09148, 0), (5.32273, 0), (20.25258, 0), (10.14599, 0), (10.82156, 0), (5.75736, 0), (7.13567, 0), (9.29746, 0), (5.1618, 0), (10.076, 0), (21.65669, 0), (13.35486, 0), (6.79957, 0), (8.76243, 0), (14.59294, 0), (16.90609, 0), (10.50337, 0), (-0.07923, 0), (13.51648, 0), (12.0676, 0), (0.86482, 0), (9.03563, 0), (5.38751, 0), (17.16866, 0), (2.78702, 0), (11.15548, 0), (12.30843, 0), (8.04897, 0), (9.95814, 0), (11.29308, 0), (14.13032, 0), (21.05877, 0), (3.57386, 0), (7.96631, 0), (3.30484, 0), (18.61856, 0), (16.35184, 0), (7.65236, 0), (18.02895, 0), (9.79458, 0), (16.7274, 0), (8.84453, 0), (13.05709, 0), (10.91447, 0), (8.40171, 0), (16.95211, 0), (11.82194, 0), (19.87978, 0), (12.88455, 0), (-0.00947, 0), (12.28109, 0), (6.96462, 0), (13.75282, 0), (14.39141, 0), (11.07193, 0), (12.88039, 0), (11.38253, 0), (21.02707, 0), (7.51955, 0), (6.31984, 0), (15.6543, 0), (14.80315, 0), (8.38024, 0), (21.7516, 0), (14.31336, 0), (15.04703, 0), (5.73787, 0), (13.16911, 0), (12.40695, 0), (9.88968, 0), (8.46703, 0), (8.70637, 0), (8.03551, 0), (5.9757, 0), (12.22951, 0), (3.14736, 0), (10.51266, 0), (18.593, 0), (10.82213, 0), (7.14216, 0), (6.81154, 0), (-0.6486, 0), (20.56136, 0), (11.35367, 0), (11.38205, 0), (17.14, 0), (14.91215, 0), (15.50207, 0), (5.93162, 0), (3.74869, 0), (14.11532, 0), (7.38954, 0), (5.45764, 0), (18.33733, 0), (9.91923, 0), (2.38991, 0), (14.16756, 0), (2.39791, 0), (6.92586, 0), (5.32474, 0), (2.28812, 0), (5.71718, 0), (5.84197, 0), (2.76206, 0), (19.05928, 0), (11.51788, 0), (6.56648, 0), (3.35735, 0), (7.55948, 0), (19.99908, 0), (13.00634, 0), (18.36886, 0), (11.14675, 0), (16.72931, 0), (12.50106, 0), (6.00605, 0), (23.06653, 0), (5.39694, 0), (9.53167, 0), (12.76944, 0), (7.20604, 0), (13.25391, 0), (13.7341, 0), (10.85292, 0), (-7.75835, 0), (10.29728, 0), (13.70099, 0), (10.17959, 0), (9.98399, 0), (12.69389, 0), (-0.28848, 0), (-2.18319, 0), (13.36378, 0), (10.09232, 0), (5.49489, 0), (5.46156, 0), (0.94225, 0), (12.79205, 0), (10.09593, 0), (6.06218, 0), (0.89463, 0), (11.88986, 0), (10.79733, 0), (1.51371, 0), (2.20967, 0), (15.45732, 0), (16.5262, 0), (5.99724, 0), (8.3613, 0), (15.68183, 0), (15.32117, 0), (14.15674, 0), (6.64553, 0), (4.20777, 0), (-0.10521, 0), (-0.88169, 0), (1.85913, 0), (9.73673, 0), (0.30926, 0), (6.17559, 0), (11.76602, 0), (5.68385, 0), (14.57088, 0), (12.81509, 0), (9.85682, 0), (12.06376, 0), (6.08874, 0), (11.63921, 0), (14.86722, 0), (10.41035, 0), (2.93794, 0), (12.21841, 0), (0.23804, 0), (3.14845, 0), (7.29748, 0), (3.06134, 0), (13.77684, 0), (16.21992, 0), (5.33511, 0), (9.68959, 0), (9.44169, 0), (18.08012, 0), (4.04224, 0), (8.77918, 0), (10.18324, 0), (9.38914, 0), (11.76995, 0), (14.19963, 0), (6.88817, 0), (16.56123, 0), (15.39885, 0), (5.21241, 0), (4.44408, 0), (17.87587, 0), (12.53337, 0), (13.60916, 0), (6.60104, 0), (7.35453, 0), (18.61572, 0), (6.10437, 0), (13.08682, 0), (12.15404, 0), (4.90789, 0), (2.13353, 0), (12.49593, 0), (11.93056, 0), (13.29408, 0), (5.70038, 0), (8.40271, 0), (5.19456, 0), (-5.51028, 0), (14.0329, 0), (10.38365, 0), (6.56812, 0), (4.21129, 0), (9.7157, 0), (9.88553, 0), (13.45346, 0), (4.97752, 0), (12.77595, 0), (8.56465, 0), (4.27703, 0), (18.12502, 0), (12.45735, 0), (12.42912, 0), (12.08125, 0), (10.85779, 0), (4.36013, 0), (11.85062, 0), (8.47776, 0), (9.60822, 0), (11.3069, 0), (14.25525, 0), (1.55168, 0), (14.57782, 0), (7.84786, 0), (9.87774, 0), (14.75575, 0), (3.68774, 0), (9.37667, 0), (20.28676, 0), (12.10027, 0), (8.01819, 0), (18.78158, 0), (20.85402, 0), (18.98069, 0), (16.1429, 0), (9.24047, 0), (14.12487, 0), (10.18841, 0), (-3.04478, 0), (5.7552, 0), (9.30376, 0), (11.42837, 0), (6.02364, 0), (8.86984, 0), (10.91177, 0), (10.04418, 0), (18.10774, 0), (7.49384, 0), (9.11556, 0), (9.7051, 0), (5.23268, 0), (9.04647, 0), (8.81547, 0), (2.65098, 0), (-2.69857, 1), (15.80943, 1), (7.31555, 1), (3.96517, 1), (4.77809, 1), (9.6472, 1), (-26.41717, 1), (-10.85635, 1), (-1.4376, 1), (-0.96308, 1), (2.84315, 1), (5.79467, 1), (-3.06091, 1), (-14.62902, 1), (22.08022, 1), (-2.11982, 1), (-4.84824, 1), (-10.50447, 1), (2.4891, 1), (9.90324, 1), (-22.66866, 1), (-0.97103, 1), (-16.57608, 1), (-3.78749, 1), (25.84511, 1), (5.30797, 1), (-18.19466, 1), (11.72708, 1), (0.2891, 1), (-9.83474, 1), (6.69942, 1), (18.09604, 1), (18.52651, 1), (1.38201, 1), (7.64615, 1), (17.66598, 1), (-2.44141, 1), (-9.01598, 1), (27.69142, 1), (4.06946, 1), (-15.0077, 1), (-10.49648, 1), (-4.88322, 1), (-25.09805, 1), (-4.64024, 1), (20.94434, 1), (24.12126, 1), (-14.10962, 1), (10.6512, 1), (14.50687, 1), (-19.88081, 1), (-11.55271, 1), (13.16921, 1), (16.63864, 1), (-24.08114, 1), (-9.09949, 1), (-10.54702, 1), (0.20813, 1), (8.19066, 1), (-2.70523, 1), (-0.23954, 1), (7.19398, 1), (-7.1618, 1), (-7.44322, 1), (-17.92031, 1), (-1.58146, 1), (9.18338, 1), (3.25838, 1), (-14.30234, 1), (1.84695, 1), (31.13794, 1), (-0.85067, 1), (19.02787, 1), (-3.09594, 1), (13.45584, 1), (-5.48104, 1), (-22.74928, 1), (-8.03697, 1), (17.31143, 1), (-16.65231, 1), (-18.58713, 1), (-16.52641, 1), (14.95261, 1), (12.56762, 1), (15.00188, 1), (1.85858, 1), (2.1926, 1), (-2.4095, 1), (21.56873, 1), (3.35509, 1), (-4.98672, 1), (35.08603, 1), (-10.01602, 1), (-3.85153, 1), (-6.81974, 1), (19.56525, 1), (-9.35488, 1), (0.24268, 1), (-3.51488, 1), (-0.37066, 1), (24.20888, 1), (-11.73537, 1), (0.01282, 1), (0.03963, 1), (-9.65589, 1), (-0.37429, 1), (5.61255, 1), (0.49984, 1), (-10.15066, 1), (-14.54314, 1), (16.56889, 1), (-7.73873, 1), (-3.76422, 1), (1.40722, 1), (2.28818, 1), (-13.12643, 1), (5.17082, 1), (4.79089, 1), (-17.42643, 1), (8.72548, 1), (-3.70285, 1), (16.77893, 1), (13.382, 1), (19.98418, 1), (0.00483, 1), (-4.75951, 1), (2.35391, 1), (21.65809, 1), (-9.2714, 1), (-18.38253, 1), (7.23097, 1), (14.97927, 1), (-4.02197, 1), (-29.8189, 1), (-12.8554, 1), (-7.60124, 1), (-14.90158, 1), (-3.31486, 1), (31.38144, 1), (-8.61288, 1), (15.31895, 1), (-10.19488, 1), (13.796, 1), (-0.32912, 1), (-0.0684, 1), (-30.06834, 1), (24.93912, 1), (-3.26506, 1), (-8.29751, 1), (-5.39189, 1), (-25.08603, 1), (-1.45318, 1), (16.72724, 1), (-3.38467, 1), (-26.00478, 1), (7.28369, 1), (16.96226, 1), (16.5858, 1), (10.46583, 1), (3.84345, 1), (-2.99382, 1), (1.42078, 1), (-11.0123, 1), (2.09909, 1), (1.21064, 1), (15.36079, 1), (-21.61349, 1), (22.7726, 1), (10.50512, 1), (-6.95825, 1), (9.20036, 1), (15.66902, 1), (3.28098, 1), (-9.05692, 1), (0.32882, 1), (-1.64934, 1), (-4.81406, 1), (-5.06006, 1), (19.97493, 1), (2.88646, 1), (-0.34552, 1), (7.55186, 1), (-22.96115, 1), (31.29166, 1), (6.18798, 1), (-2.52715, 1), (-11.58799, 1), (14.13596, 1), (13.45069, 1), (12.15179, 1), (3.44491, 1), (-8.78006, 1), (18.32087, 1), (11.91757, 1), (-2.00179, 1), (10.88411, 1), (9.09327, 1), (6.62484, 1), (8.87178, 1), (11.52254, 1), (-14.15988, 1), (-17.19515, 1), (14.03089, 1), (-2.4095, 1), (-16.83575, 1), (2.71469, 1), (4.84351, 1), (-1.17651, 1), (-3.37529, 1), (-19.92137, 1), (4.48952, 1), (-12.4906, 1), (-5.65277, 1), (8.50819, 1), (-19.61261, 1), (12.54156, 1), (11.06784, 1), (-12.59285, 1), (3.43683, 1), (-3.00325, 1), (12.49082, 1), (7.20955, 1), (17.6547, 1), (15.8619, 1), (24.3048, 1), (-8.05434, 1), (-6.06901, 1), (-15.69515, 1), (-11.13917, 1), (-3.90757, 1), (-2.57038, 1), (5.14065, 1), (17.8497, 1), (-8.64665, 1), (-18.68331, 1), (5.8567, 1), (-20.93884, 1), (4.40583, 1), (14.35985, 1), (4.18134, 1), (4.3635, 1), (9.35428, 1), (2.8908, 1), (16.01017, 1), (-1.48499, 1), (-9.97949, 1), (1.03055, 1), (-2.79697, 1), (6.85977, 1), (4.73213, 1), (2.7815, 1), (-2.46866, 1), (18.39425, 1), (-0.80378, 1), (-0.22982, 1), (-16.11608, 1), (3.0862, 1), (3.20779, 1), (10.50146, 1), (-0.21305, 1), (11.21012, 1), (-0.99825, 1), (18.39633, 1), (-3.39003, 1), (-0.64411, 1), (-1.39932, 1), (15.45319, 1), (-0.66044, 1), (-15.2223, 1), (-34.39907, 1), (-3.57836, 1), (16.82828, 1), (1.66624, 1), (15.43475, 1), (8.17776, 1), (5.50486, 1), (10.43082, 1), (-6.63332, 1), (2.28008, 1), (16.37203, 1), (5.16313, 1), (-8.85281, 1), (13.26692, 1), (-7.46842, 1), (8.43091, 1), (-13.18172, 1), (-0.72401, 1), (22.3881, 1), (10.65448, 1), (2.81289, 1), (10.92405, 1), (-8.95358, 1), (19.80653, 1), (-12.86527, 1), (5.38826, 1), (-6.83501, 1), (-15.7647, 1), (-27.67412, 1), (8.6499, 1), (-4.89542, 1), (16.76167, 1), (12.84284, 1), (-17.27324, 1), (-4.18726, 1), (-14.62366, 1), (-5.49863, 1), (-16.22846, 1), (10.60329, 1), (6.46781, 1), (1.70458, 1), (10.77448, 1), (0.8463, 1), (13.0482, 1), (-4.36264, 1), (3.22647, 1), (2.38828, 1), (6.7946, 1), (-0.25254, 1), (1.2497, 1), (1.6544, 1), (4.1019, 1), (11.27839, 1), (-5.04127, 1), (18.11674, 1), (0.51231, 1), (-0.51029, 1), (13.52556, 1), (16.10171, 1), (5.68197, 1), (-2.85904, 1), (-8.89167, 1), (6.24489, 1), (10.85319, 1), (-0.39816, 1), (3.87079, 1), (-3.1867, 1), (1.55322, 1), (16.86779, 1), (-14.60321, 1), (-1.81952, 1), (-3.11624, 1), (1.24193, 1), (10.18179, 1), (4.69796, 1), (0.69032, 1), (11.7723, 1), (7.62896, 1), (9.89741, 1), (9.11484, 1), (-3.84676, 1), (-0.4777, 1), (0.95958, 1), (-7.95056, 1), (-10.97474, 1), (-6.54861, 1), (34.74933, 1), (27.39463, 1), (4.18299, 1), (6.02476, 1), (-1.99397, 1), (1.26478, 1), (23.37106, 1), (10.49682, 1), (-11.04354, 1), (-12.22284, 1), (-9.87635, 1), (28.90511, 1), (6.77613, 1), (0.55352, 1), (0.37031, 1), (7.1418, 1), (3.24897, 1), (-1.60918, 1), (3.1675, 1), (-17.97072, 1), (-5.61743, 1), (14.1422, 1), (14.87695, 1), (-4.65961, 1), (-0.99174, 1), (-2.96623, 1), (-9.02263, 1), (-17.2088, 1), (2.78608, 1), (6.74239, 1), (4.8524, 1), (7.46731, 1), (1.04894, 1), (-12.8023, 1), (-17.18188, 1), (-5.08801, 1), (22.13942, 1), (-0.36384, 1), (17.80564, 1), (7.67504, 1), (1.59779, 1), (4.10942, 1), (0.61074, 1), (-14.40767, 1), (10.59906, 1), (16.57017, 1), (-15.17526, 1), (-6.98549, 1), (-0.64548, 1), (3.23756, 1), (14.65504, 1), (4.583, 1), (12.72378, 1), (5.26547, 1), (0.81781, 1), (9.38273, 1), (10.37636, 1), (10.70325, 1), (-0.83043, 1), (-7.53149, 1), (-9.09147, 1), (-19.51381, 1), (-28.44508, 1), (6.44392, 1), (11.10201, 1), (-2.86184, 1), (8.30673, 1), (8.8797, 1), (10.68053, 1), (15.62919, 1), (8.00579, 1), (6.4651, 1), (-4.50029, 1), (18.04514, 1), (11.12996, 1), (-5.14007, 1), (9.43857, 1), (3.13476, 1), (4.9772, 1), (-17.45782, 1), (0.05552, 1), (-1.90283, 1), (2.67908, 1), (-2.62243, 1), (-3.22767, 1), (-8.70222, 1), (-23.11605, 1), (21.6757, 1), (12.70076, 1), (4.4322, 1), (11.69344, 1), (9.18052, 1), (-2.2549, 1), (-2.15615, 1), (20.29765, 1), (-0.29536, 1), (15.50109, 1), (8.79187, 1), (5.11533, 1), (-20.44436, 1), (-3.00909, 1), (-4.48291, 1), (21.84462, 1), (1.94225, 1), (-2.81908, 1), (17.19418, 1), (-9.33528, 1), (-0.17346, 1), (0.03958, 1), (-35.17786, 1), (8.36887, 1), (-9.02292, 1), (-10.98804, 1), (0.29335, 1), (4.29634, 1), (3.87718, 1), (-9.08532, 1), (7.13922, 1), (-7.62463, 1), (-10.5666, 1), (4.68165, 1), (-3.30172, 1), (13.04852, 1), (13.45616, 1), (2.41043, 1), (-0.36501, 1), (-15.67383, 1), (17.92217, 1), (8.42106, 1), (3.22063, 1), (-7.31753, 1), (21.99596, 1), (-36.8273, 1), (-20.46391, 1), (5.74179, 1), (-15.83178, 1), (14.90454, 1), (-8.84645, 1), (3.72036, 1), (4.6877, 1), (16.35418, 1), (3.15441, 1), (2.39907, 1), (-17.58664, 1), (-13.18269, 1);\n+\n+SELECT \n+roundBankers(kolmogorovSmirnovTest(left, right).2, 6),\n+roundBankers(kolmogorovSmirnovTest('two-sided')(left, right).2, 6),\n+roundBankers(kolmogorovSmirnovTest('less')(left, right).2, 6),\n+roundBankers(kolmogorovSmirnovTest('greater')(left, right).2, 6),\n+roundBankers(kolmogorovSmirnovTest('two-sided','auto')(left, right).2, 6),\n+roundBankers(kolmogorovSmirnovTest('less','auto')(left, right).2, 6),\n+roundBankers(kolmogorovSmirnovTest('greater','auto')(left, right).2, 6),\n+roundBankers(kolmogorovSmirnovTest('two-sided','exact')(left, right).2, 6),\n+roundBankers(kolmogorovSmirnovTest('less','exact')(left, right).2, 6),\n+roundBankers(kolmogorovSmirnovTest('greater','exact')(left, right).2, 6),\n+roundBankers(kolmogorovSmirnovTest('two-sided','asymp')(left, right).2, 6),\n+roundBankers(kolmogorovSmirnovTest('less','asymp')(left, right).2, 6),\n+roundBankers(kolmogorovSmirnovTest('greater','asymp')(left, right).2, 6) ,\n+roundBankers(kolmogorovSmirnovTest(left, right).1, 6),\n+roundBankers(kolmogorovSmirnovTest('two-sided')(left, right).1, 6),\n+roundBankers(kolmogorovSmirnovTest('less')(left, right).1, 6),\n+roundBankers(kolmogorovSmirnovTest('greater')(left, right).1, 6),\n+roundBankers(kolmogorovSmirnovTest('two-sided','auto')(left, right).1, 6),\n+roundBankers(kolmogorovSmirnovTest('less','auto')(left, right).1, 6),\n+roundBankers(kolmogorovSmirnovTest('greater','auto')(left, right).1, 6),\n+roundBankers(kolmogorovSmirnovTest('two-sided','exact')(left, right).1, 6),\n+roundBankers(kolmogorovSmirnovTest('less','exact')(left, right).1, 6),\n+roundBankers(kolmogorovSmirnovTest('greater','exact')(left, right).1, 6),\n+roundBankers(kolmogorovSmirnovTest('two-sided','asymp')(left, right).1, 6),\n+roundBankers(kolmogorovSmirnovTest('less','asymp')(left, right).1, 6),\n+roundBankers(kolmogorovSmirnovTest('greater','asymp')(left, right).1, 6) \n+from kstest;\n+\n+DROP TABLE IF EXISTS kstest;\ndiff --git a/tests/queries/0_stateless/02706_kolmogorov_smirnov_test_scipy.python b/tests/queries/0_stateless/02706_kolmogorov_smirnov_test_scipy.python\nnew file mode 100644\nindex 000000000000..a2a34b57c908\n--- /dev/null\n+++ b/tests/queries/0_stateless/02706_kolmogorov_smirnov_test_scipy.python\n@@ -0,0 +1,84 @@\n+#!/usr/bin/env python3\n+import os\n+import sys\n+from scipy import stats\n+import pandas as pd\n+import numpy as np\n+\n+CURDIR = os.path.dirname(os.path.realpath(__file__))\n+sys.path.insert(0, os.path.join(CURDIR, \"helpers\"))\n+\n+from pure_http_client import ClickHouseClient\n+\n+\n+def test_and_check(name, a, b, t_stat, p_value, precision=1e-2):\n+    client = ClickHouseClient()\n+    client.query(\"DROP TABLE IF EXISTS ks_test;\")\n+    client.query(\"CREATE TABLE ks_test (left Float64, right UInt8) ENGINE = Memory;\")\n+    client.query(\n+        \"INSERT INTO ks_test VALUES {};\".format(\n+            \", \".join([\"({},{})\".format(i, 0) for i in a])\n+        )\n+    )\n+    client.query(\n+        \"INSERT INTO ks_test VALUES {};\".format(\n+            \", \".join([\"({},{})\".format(j, 1) for j in b])\n+        )\n+    )\n+    real = client.query_return_df(\n+        \"SELECT roundBankers({}(left, right).1, 16) as t_stat, \".format(name)\n+        + \"roundBankers({}(left, right).2, 16) as p_value \".format(name)\n+        + \"FROM ks_test FORMAT TabSeparatedWithNames;\"\n+    )\n+    real_t_stat = real[\"t_stat\"][0]\n+    real_p_value = real[\"p_value\"][0]\n+    assert (\n+        abs(real_t_stat - np.float64(t_stat)) < precision\n+    ), \"clickhouse_t_stat {}, scipy_t_stat {}\".format(real_t_stat, t_stat)\n+    assert (\n+        abs(real_p_value - np.float64(p_value)) < precision\n+    ), \"clickhouse_p_value {}, scipy_p_value {}\".format(real_p_value, p_value)\n+    client.query(\"DROP TABLE IF EXISTS ks_test;\")\n+\n+\n+def test_ks_all_alternatives(rvs1, rvs2):\n+    s, p = stats.ks_2samp(rvs1, rvs2)\n+    test_and_check(\"kolmogorovSmirnovTest\", rvs1, rvs2, s, p)\n+\n+    s, p = stats.ks_2samp(rvs1, rvs2, alternative=\"two-sided\")\n+    test_and_check(\"kolmogorovSmirnovTest('two-sided')\", rvs1, rvs2, s, p)\n+\n+    s, p = stats.ks_2samp(rvs1, rvs2, alternative=\"greater\", method=\"auto\")\n+    test_and_check(\"kolmogorovSmirnovTest('greater', 'auto')\", rvs1, rvs2, s, p)\n+\n+    s, p = stats.ks_2samp(rvs1, rvs2, alternative=\"less\", method=\"exact\")\n+    test_and_check(\"kolmogorovSmirnovTest('less', 'exact')\", rvs1, rvs2, s, p)\n+\n+    if max(len(rvs1), len(rvs2)) > 10000:\n+        s, p = stats.ks_2samp(rvs1, rvs2, alternative=\"two-sided\", method=\"asymp\")\n+        test_and_check(\"kolmogorovSmirnovTest('two-sided', 'asymp')\", rvs1, rvs2, s, p)\n+        s, p = stats.ks_2samp(rvs1, rvs2, alternative=\"greater\", method=\"asymp\")\n+        test_and_check(\"kolmogorovSmirnovTest('greater', 'asymp')\", rvs1, rvs2, s, p)\n+\n+\n+def test_kolmogorov_smirnov():\n+    rvs1 = np.round(stats.norm.rvs(loc=1, scale=5, size=10), 2)\n+    rvs2 = np.round(stats.norm.rvs(loc=1.5, scale=5, size=20), 2)\n+    test_ks_all_alternatives(rvs1, rvs2)\n+\n+    rvs1 = np.round(stats.norm.rvs(loc=13, scale=1, size=100), 2)\n+    rvs2 = np.round(stats.norm.rvs(loc=1.52, scale=9, size=100), 2)\n+    test_ks_all_alternatives(rvs1, rvs2)\n+\n+    rvs1 = np.round(stats.norm.rvs(loc=1, scale=5, size=100), 2)\n+    rvs2 = np.round(stats.norm.rvs(loc=11.5, scale=50, size=1000), 2)\n+    test_ks_all_alternatives(rvs1, rvs2)\n+\n+    rvs1 = np.round(stats.norm.rvs(loc=1, scale=5, size=11000), 2)\n+    rvs2 = np.round(stats.norm.rvs(loc=3.5, scale=5.5, size=11000), 2)\n+    test_ks_all_alternatives(rvs1, rvs2)\n+\n+\n+if __name__ == \"__main__\":\n+    test_kolmogorov_smirnov()\n+    print(\"Ok.\")\ndiff --git a/tests/queries/0_stateless/02706_kolmogorov_smirnov_test_scipy.reference b/tests/queries/0_stateless/02706_kolmogorov_smirnov_test_scipy.reference\nnew file mode 100644\nindex 000000000000..587579af915b\n--- /dev/null\n+++ b/tests/queries/0_stateless/02706_kolmogorov_smirnov_test_scipy.reference\n@@ -0,0 +1,1 @@\n+Ok.\ndiff --git a/tests/queries/0_stateless/02706_kolmogorov_smirnov_test_scipy.sh b/tests/queries/0_stateless/02706_kolmogorov_smirnov_test_scipy.sh\nnew file mode 100755\nindex 000000000000..674495bbefa6\n--- /dev/null\n+++ b/tests/queries/0_stateless/02706_kolmogorov_smirnov_test_scipy.sh\n@@ -0,0 +1,9 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+# We should have correct env vars from shell_config.sh to run this test\n+\n+python3 \"$CURDIR\"/02706_kolmogorov_smirnov_test_scipy.python\n",
  "problem_statement": "Add statistical aggregate function `kolmogorovSmirnovTest`\n**Use case**\r\n\r\nhttps://en.wikipedia.org/wiki/Kolmogorov%E2%80%93Smirnov_test\r\n\r\nThis type of statistical test is useful to check the equality of two distributions. In addition it can be easily modified to check whether a sample comes from normal distribution by performing the test against a normally distributed sample. (Normal distribution is just an example, you can perform a test against sample from any distribution).\r\n\r\nPreviously there was an attempt https://github.com/ClickHouse/ClickHouse/pull/37873 to add a Shapiro-Wilk test for normality, but it has one very big disadvantage - it works only for relatively small samples (< 2500), which it not applicable for ClickHouse use-case.\r\n\r\n**Describe the solution you'd like**\r\n\r\nTake a look how `welchTTest` or `studentTTest` are implemented. \r\n\r\n**Describe alternatives you've considered**\r\n\r\nAs an alternative `andersonDarling` test could be also implemented.\r\n\r\n\n",
  "hints_text": "KolmogorovSmirnovTest need to sort the two samples. Can I save the all row data in aggreagtefunction-data to sort at last? Whether it will cause OOM, or let's say there's a lot of duplication in the sample to use Bucket sort.\n> KolmogorovSmirnovTest need to sort the two samples. Can I save the all row data in aggreagtefunction-data to sort at last? Whether it will cause OOM, or let's say there's a lot of duplication in the sample to use Bucket sort.\r\n\r\nYou can check `AggregateFunctionWindowFunnel.h` or `AggregateFunctionIntervalLengthSum.h` if you need keep the data be sorted at last.\n> > KolmogorovSmirnovTest need to sort the two samples. Can I save the all row data in aggreagtefunction-data to sort at last? Whether it will cause OOM, or let's say there's a lot of duplication in the sample to use Bucket sort.\r\n> \r\n> You can check `AggregateFunctionWindowFunnel.h` or `AggregateFunctionIntervalLengthSum.h` if you need keep the data be sorted at last.\r\n\r\nOK, I get it. I'd like to have a try. @nikitamikhaylov ",
  "created_at": "2023-04-02T18:30:32Z"
}