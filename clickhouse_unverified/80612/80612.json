{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 80612,
  "instance_id": "ClickHouse__ClickHouse-80612",
  "issue_numbers": [
    "75726"
  ],
  "base_commit": "7f9166e14bb4ff7e72bbb14b8606a8591d1dbf7e",
  "patch": "diff --git a/src/Analyzer/Passes/ShardNumColumnToFunctionPass.cpp b/src/Analyzer/Passes/ShardNumColumnToFunctionPass.cpp\nindex c58504064ce0..d9cd002195d8 100644\n--- a/src/Analyzer/Passes/ShardNumColumnToFunctionPass.cpp\n+++ b/src/Analyzer/Passes/ShardNumColumnToFunctionPass.cpp\n@@ -8,6 +8,7 @@\n \n #include <Analyzer/InDepthQueryTreeVisitor.h>\n #include <Analyzer/ColumnNode.h>\n+#include <Analyzer/Utils.h>\n #include <Analyzer/FunctionNode.h>\n #include <Analyzer/TableNode.h>\n #include <Analyzer/TableFunctionNode.h>\n@@ -49,10 +50,20 @@ class ShardNumColumnToFunctionVisitor : public InDepthQueryTreeVisitorWithContex\n         if (!storage->isVirtualColumn(column.name, storage_snapshot->metadata))\n             return;\n \n-        auto function_node = std::make_shared<FunctionNode>(\"shardNum\");\n-        auto function = FunctionFactory::instance().get(function_node->getFunctionName(), getContext());\n-        function_node->resolveAsFunction(function->build(function_node->getArgumentColumns()));\n-        node = std::move(function_node);\n+        const auto column_type = column_node->getColumnType();\n+        const auto shard_num_column_numeric_type = column_type->isNullable() ? typeid_cast<const DataTypeNullable *>(column_type.get())->getNestedType() : column_type;\n+\n+        auto shard_num_function_node = std::make_shared<FunctionNode>(\"shardNum\");\n+        auto shard_num_function = FunctionFactory::instance().get(shard_num_function_node->getFunctionName(), getContext());\n+        shard_num_function_node->resolveAsFunction(shard_num_function->build(shard_num_function_node->getArgumentColumns()));\n+        const auto & function_result_type = shard_num_function_node->getResultType();\n+\n+        if (!function_result_type->equals(*shard_num_column_numeric_type))\n+            return;\n+\n+        node = std::move(shard_num_function_node);\n+        if (column_type->isNullable())\n+            node = createCastFunction(node, column_type, getContext());\n     }\n };\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03513_fix_shard_num_column_to_function_pass_with_nulls.reference b/tests/queries/0_stateless/03513_fix_shard_num_column_to_function_pass_with_nulls.reference\nnew file mode 100644\nindex 000000000000..66f4ca4a5a83\n--- /dev/null\n+++ b/tests/queries/0_stateless/03513_fix_shard_num_column_to_function_pass_with_nulls.reference\n@@ -0,0 +1,12 @@\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\ndiff --git a/tests/queries/0_stateless/03513_fix_shard_num_column_to_function_pass_with_nulls.sql b/tests/queries/0_stateless/03513_fix_shard_num_column_to_function_pass_with_nulls.sql\nnew file mode 100644\nindex 000000000000..86fbf492b5aa\n--- /dev/null\n+++ b/tests/queries/0_stateless/03513_fix_shard_num_column_to_function_pass_with_nulls.sql\n@@ -0,0 +1,12 @@\n+SET join_use_nulls = 1;\n+DROP TABLE IF EXISTS t0;\n+DROP TABLE IF EXISTS t1;\n+\n+CREATE TABLE t0 (c0 Int) ENGINE = Memory();\n+INSERT INTO t0 SELECT number FROM numbers(3);\n+CREATE TABLE t1 (c0 Int) ENGINE = Distributed('test_cluster_two_shards', currentDatabase(), t0);\n+SELECT t1._shard_num % t1._shard_num FROM t1 FULL JOIN (SELECT 1 AS c0) tx ON TRUE;\n+SELECT t1._shard_num % shardNum() FROM t1 FULL JOIN (SELECT 1 AS c0) tx ON TRUE;\n+\n+-- This doesn't work, but it is a separate bug https://github.com/ClickHouse/ClickHouse/issues/80691\n+-- SELECT t1._shard_num % t1._shard_num FROM t1 FULL JOIN (SELECT 1 AS c0) tx ON TRUE ORDER BY t1._shard_num;\n",
  "problem_statement": "Logical error with ShardNumColumnToFunctionPass\n### Describe the bug\n\nEasy to reproduce. Only happens with new analyzer.\n\n### How to reproduce\n\nUse `test_cluster_two_shards` remote server configuration from tests, then run:\n\n```sql\nSET join_use_nulls = 1;\nCREATE TABLE t0 (c0 Int) ENGINE = Memory();\nCREATE TABLE t1 (c0 Int) ENGINE = Distributed('test_cluster_two_shards', default, t0);\nSELECT t1._shard_num % t1._shard_num FROM t1 FULL JOIN (SELECT 1 AS c0) tx ON TRUE;\n```\n\n### Error message and/or stacktrace\n\nStack trace:\n\n```\n<Fatal> : Logical error: 'Function shardNum() % shardNum() expects argument 1 to have Nullable(UInt32) type but receives UInt32 after running ShardNumColumnToFunctionPass pass'.\n<Fatal> : Stack trace (when copying this message, always include the lines below):\n\n0. std::exception::exception[abi:ne180100]() @ 0x00000000197ec5b4\n1. base/poco/Foundation/src/Exception.cpp:27: Poco::Exception::Exception(String const&, int) @ 0x000000003982c080\n2. src/Common/Exception.cpp:106: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000002561c26b\n3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000001969da76\n4. src/Common/Exception.h:123: DB::Exception::Exception<String, unsigned long, String, String, String const&>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<unsigned long>::type, std::type_identity<String>::type, std::type_identity<String>::type, std::type_identity<String const&>::type>, String&&, unsigned long&&, String&&, String&&, String const&) @ 0x000000003185aeb7\n5. src/Analyzer/QueryTreePassManager.cpp:148: DB::InDepthQueryTreeVisitor<DB::(anonymous namespace)::ValidationChecker, false>::visit(std::shared_ptr<DB::IQueryTreeNode>&) @ 0x0000000031856165\n6. src/Analyzer/InDepthQueryTreeVisitor.h:90: DB::InDepthQueryTreeVisitor<DB::(anonymous namespace)::ValidationChecker, false>::visit(std::shared_ptr<DB::IQueryTreeNode>&) @ 0x0000000031856408\n7. src/Analyzer/InDepthQueryTreeVisitor.h:90: DB::InDepthQueryTreeVisitor<DB::(anonymous namespace)::ValidationChecker, false>::visit(std::shared_ptr<DB::IQueryTreeNode>&) @ 0x0000000031856408\n8. src/Analyzer/QueryTreePassManager.cpp:186: DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x00000000318552a2\n9. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:149: DB::(anonymous namespace)::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x0000000031dcc170\n10. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:167: DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000031dc9dd7\n11. contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:597: std::__unique_if<DB::InterpreterSelectQueryAnalyzer>::__unique_single std::make_unique[abi:ne180100]<DB::InterpreterSelectQueryAnalyzer, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context> const&, DB::SelectQueryOptions const&>(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context> const&, DB::SelectQueryOptions const&) @ 0x0000000031dced2e\n12. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:292: std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne180100]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) @ 0x0000000031dce6a5\n13. contrib/llvm-project/libcxx/include/__functional/function.h:714: ? @ 0x0000000031d16c6f\n14. src/Interpreters/executeQuery.cpp:1389: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x00000000322eec7d\n15. src/Interpreters/executeQuery.cpp:1622: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000322e997b\n16. src/Server/TCPHandler.cpp:662: DB::TCPHandler::runImpl() @ 0x00000000356d591c\n17. src/Server/TCPHandler.cpp:2625: DB::TCPHandler::run() @ 0x000000003570476e\n18. base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x0000000039956622\n19. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x00000000399572f2\n20. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x00000000398c0a77\n21. base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x00000000398bc4ae\n22. ? @ 0x00007ffff7ca1e2e\n23. ? @ 0x00007ffff7d33a4c\n```\n",
  "hints_text": "",
  "created_at": "2025-05-21T10:11:59Z"
}