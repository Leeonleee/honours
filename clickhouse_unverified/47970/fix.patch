diff --git a/src/Bridge/IBridge.cpp b/src/Bridge/IBridge.cpp
index daae05de8923..1ea77573e5f3 100644
--- a/src/Bridge/IBridge.cpp
+++ b/src/Bridge/IBridge.cpp
@@ -4,21 +4,22 @@
 #include <Poco/Net/NetException.h>
 #include <Poco/Util/HelpFormatter.h>
 
-#include <base/range.h>
-
-#include <Common/StringUtils/StringUtils.h>
 #include <Common/SensitiveDataMasker.h>
-#include "config.h"
+#include <Common/StringUtils/StringUtils.h>
 #include <Common/logger_useful.h>
-#include <base/errnoToString.h>
-#include <IO/ReadHelpers.h>
 #include <Formats/registerFormats.h>
-#include <Server/HTTP/HTTPServer.h>
+#include <IO/ReadHelpers.h>
 #include <IO/WriteBufferFromFile.h>
 #include <IO/WriteHelpers.h>
+#include <Server/HTTP/HTTPServer.h>
+#include <base/errnoToString.h>
+#include <base/range.h>
+
 #include <sys/time.h>
 #include <sys/resource.h>
 
+#include "config.h"
+
 #if USE_ODBC
 #    include <Poco/Data/ODBC/Connector.h>
 #endif
@@ -89,7 +90,7 @@ void IBridge::defineOptions(Poco::Util::OptionSet & options)
         Poco::Util::Option("listen-host", "", "hostname or address to listen, default 127.0.0.1").argument("listen-host").binding("listen-host"));
 
     options.addOption(
-        Poco::Util::Option("http-timeout", "", "http timeout for socket, default 1800").argument("http-timeout").binding("http-timeout"));
+        Poco::Util::Option("http-timeout", "", "http timeout for socket, default 180").argument("http-timeout").binding("http-timeout"));
 
     options.addOption(
         Poco::Util::Option("max-server-connections", "", "max connections to server, default 1024").argument("max-server-connections").binding("max-server-connections"));
@@ -97,6 +98,9 @@ void IBridge::defineOptions(Poco::Util::OptionSet & options)
     options.addOption(
         Poco::Util::Option("keep-alive-timeout", "", "keepalive timeout, default 10").argument("keep-alive-timeout").binding("keep-alive-timeout"));
 
+    options.addOption(
+        Poco::Util::Option("http-max-field-value-size", "", "max http field value size, default 1048576").argument("http-max-field-value-size").binding("http-max-field-value-size"));
+
     options.addOption(
         Poco::Util::Option("log-level", "", "sets log level, default info") .argument("log-level").binding("logger.level"));
 
@@ -165,6 +169,7 @@ void IBridge::initialize(Application & self)
     http_timeout = config().getUInt64("http-timeout", DEFAULT_HTTP_READ_BUFFER_TIMEOUT);
     max_server_connections = config().getUInt("max-server-connections", 1024);
     keep_alive_timeout = config().getUInt64("keep-alive-timeout", 10);
+    http_max_field_value_size = config().getUInt64("http-max-field-value-size", 1048576);
 
     struct rlimit limit;
     const UInt64 gb = 1024 * 1024 * 1024;
@@ -226,6 +231,10 @@ int IBridge::main(const std::vector<std::string> & /*args*/)
     auto context = Context::createGlobal(shared_context.get());
     context->makeGlobalContext();
 
+    auto settings = context->getSettings();
+    settings.set("http_max_field_value_size", http_max_field_value_size);
+    context->setSettings(settings);
+
     if (config().has("query_masking_rules"))
         SensitiveDataMasker::setInstance(std::make_unique<SensitiveDataMasker>(config(), "query_masking_rules"));
 
diff --git a/src/Bridge/IBridge.h b/src/Bridge/IBridge.h
index 68af8860cb32..e6855b69dddb 100644
--- a/src/Bridge/IBridge.h
+++ b/src/Bridge/IBridge.h
@@ -45,6 +45,7 @@ class IBridge : public BaseDaemon
     std::string log_level;
     unsigned max_server_connections;
     size_t http_timeout;
+    size_t http_max_field_value_size;
 
     Poco::Logger * log;
 };
diff --git a/src/BridgeHelper/IBridgeHelper.cpp b/src/BridgeHelper/IBridgeHelper.cpp
index 3a8a8b8fdd2c..844e2505e9c2 100644
--- a/src/BridgeHelper/IBridgeHelper.cpp
+++ b/src/BridgeHelper/IBridgeHelper.cpp
@@ -67,6 +67,8 @@ std::unique_ptr<ShellCommand> IBridgeHelper::startBridgeCommand()
     cmd_args.push_back(config.getString(configPrefix() + ".listen_host", DEFAULT_HOST));
     cmd_args.push_back("--http-timeout");
     cmd_args.push_back(std::to_string(getHTTPTimeout().totalMicroseconds()));
+    cmd_args.push_back("--http-max-field-value-size");
+    cmd_args.push_back("99999999999999999"); // something "big" to accept large datasets (issue 47616)
     if (config.has("logger." + configPrefix() + "_log"))
     {
         cmd_args.push_back("--log-path");
diff --git a/utils/changelog-simple/format-changelog.py b/utils/changelog-simple/format-changelog.py
index d5e1518270e1..01f2694dd0ff 100755
--- a/utils/changelog-simple/format-changelog.py
+++ b/utils/changelog-simple/format-changelog.py
@@ -20,6 +20,7 @@
 )
 args = parser.parse_args()
 
+
 # This function mirrors the PR description checks in ClickhousePullRequestTrigger.
 # Returns False if the PR should not be mentioned changelog.
 def parse_one_pull_request(item):
diff --git a/utils/keeper-overload/keeper-overload.py b/utils/keeper-overload/keeper-overload.py
index bdb4563c713e..0a059b105889 100755
--- a/utils/keeper-overload/keeper-overload.py
+++ b/utils/keeper-overload/keeper-overload.py
@@ -166,7 +166,7 @@ def main(args):
     keeper_bench_path = args.keeper_bench_path
 
     keepers = []
-    for (port, server_id) in zip(PORTS, SERVER_IDS):
+    for port, server_id in zip(PORTS, SERVER_IDS):
         keepers.append(
             Keeper(
                 keeper_binary_path, server_id, port, workdir, args.with_thread_fuzzer
