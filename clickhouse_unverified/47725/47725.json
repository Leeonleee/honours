{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 47725,
  "instance_id": "ClickHouse__ClickHouse-47725",
  "issue_numbers": [
    "46741"
  ],
  "base_commit": "ed503780603a70e25ef235dfd4d83793a021d1e5",
  "patch": "diff --git a/src/Interpreters/InterpreterSelectQuery.cpp b/src/Interpreters/InterpreterSelectQuery.cpp\nindex 79b073e30f3e..bbd8a5744fc0 100644\n--- a/src/Interpreters/InterpreterSelectQuery.cpp\n+++ b/src/Interpreters/InterpreterSelectQuery.cpp\n@@ -415,7 +415,7 @@ InterpreterSelectQuery::InterpreterSelectQuery(\n         RewriteCountDistinctFunctionVisitor(data_rewrite_countdistinct).visit(query_ptr);\n     }\n \n-    JoinedTables joined_tables(getSubqueryContext(context), getSelectQuery(), options.with_all_cols);\n+    JoinedTables joined_tables(getSubqueryContext(context), getSelectQuery(), options.with_all_cols, options_.is_create_parameterized_view);\n \n     bool got_storage_from_query = false;\n     if (!has_input && !storage)\ndiff --git a/src/Interpreters/InterpreterSelectWithUnionQuery.cpp b/src/Interpreters/InterpreterSelectWithUnionQuery.cpp\nindex bfa3d16bf296..8396cb32a699 100644\n--- a/src/Interpreters/InterpreterSelectWithUnionQuery.cpp\n+++ b/src/Interpreters/InterpreterSelectWithUnionQuery.cpp\n@@ -258,12 +258,12 @@ Block InterpreterSelectWithUnionQuery::getSampleBlock(const ASTPtr & query_ptr_,\n {\n     if (!context_->hasQueryContext())\n     {\n+        SelectQueryOptions options;\n         if (is_subquery)\n-            return InterpreterSelectWithUnionQuery(query_ptr_, context_, SelectQueryOptions().subquery().analyze()).getSampleBlock();\n-        else if (is_create_parameterized_view)\n-            return InterpreterSelectWithUnionQuery(query_ptr_, context_, SelectQueryOptions().createParameterizedView().analyze()).getSampleBlock();\n-        else\n-            return InterpreterSelectWithUnionQuery(query_ptr_, context_, SelectQueryOptions().analyze()).getSampleBlock();\n+            options = options.subquery();\n+        if (is_create_parameterized_view)\n+            options = options.createParameterizedView();\n+        return InterpreterSelectWithUnionQuery(query_ptr_, context_, std::move(options.analyze())).getSampleBlock();\n     }\n \n     auto & cache = context_->getSampleBlockCache();\n@@ -274,21 +274,12 @@ Block InterpreterSelectWithUnionQuery::getSampleBlock(const ASTPtr & query_ptr_,\n         return cache[key];\n     }\n \n+    SelectQueryOptions options;\n     if (is_subquery)\n-    {\n-        return cache[key]\n-            = InterpreterSelectWithUnionQuery(query_ptr_, context_, SelectQueryOptions().subquery().analyze()).getSampleBlock();\n-    }\n-    else if (is_create_parameterized_view)\n-    {\n-        return cache[key]\n-            = InterpreterSelectWithUnionQuery(query_ptr_, context_, SelectQueryOptions().createParameterizedView().analyze())\n-            .getSampleBlock();\n-    }\n-    else\n-    {\n-        return cache[key] = InterpreterSelectWithUnionQuery(query_ptr_, context_, SelectQueryOptions().analyze()).getSampleBlock();\n-    }\n+        options = options.subquery();\n+    if (is_create_parameterized_view)\n+        options = options.createParameterizedView();\n+    return cache[key] = InterpreterSelectWithUnionQuery(query_ptr_, context_, std::move(options.analyze())).getSampleBlock();\n }\n \n \ndiff --git a/src/Interpreters/JoinedTables.cpp b/src/Interpreters/JoinedTables.cpp\nindex 7c999803b449..80b2fe5302c4 100644\n--- a/src/Interpreters/JoinedTables.cpp\n+++ b/src/Interpreters/JoinedTables.cpp\n@@ -173,13 +173,14 @@ using RenameQualifiedIdentifiersVisitor = InDepthNodeVisitor<RenameQualifiedIden\n \n }\n \n-JoinedTables::JoinedTables(ContextPtr context_, const ASTSelectQuery & select_query_, bool include_all_columns_)\n+JoinedTables::JoinedTables(ContextPtr context_, const ASTSelectQuery & select_query_, bool include_all_columns_, bool is_create_parameterized_view_)\n     : context(context_)\n     , table_expressions(getTableExpressions(select_query_))\n     , include_all_columns(include_all_columns_)\n     , left_table_expression(extractTableExpression(select_query_, 0))\n     , left_db_and_table(getDatabaseAndTable(select_query_, 0))\n     , select_query(select_query_)\n+    , is_create_parameterized_view(is_create_parameterized_view_)\n {}\n \n bool JoinedTables::isLeftTableSubquery() const\n@@ -239,7 +240,7 @@ bool JoinedTables::resolveTables()\n     const auto & settings = context->getSettingsRef();\n     bool include_alias_cols = include_all_columns || settings.asterisk_include_alias_columns;\n     bool include_materialized_cols = include_all_columns || settings.asterisk_include_materialized_columns;\n-    tables_with_columns = getDatabaseAndTablesWithColumns(table_expressions, context, include_alias_cols, include_materialized_cols);\n+    tables_with_columns = getDatabaseAndTablesWithColumns(table_expressions, context, include_alias_cols, include_materialized_cols, is_create_parameterized_view);\n     if (tables_with_columns.size() != table_expressions.size())\n         throw Exception(ErrorCodes::LOGICAL_ERROR, \"Unexpected tables count\");\n \ndiff --git a/src/Interpreters/JoinedTables.h b/src/Interpreters/JoinedTables.h\nindex 7562dbc9ac50..771f5ae6ef0c 100644\n--- a/src/Interpreters/JoinedTables.h\n+++ b/src/Interpreters/JoinedTables.h\n@@ -22,7 +22,7 @@ using StorageMetadataPtr = std::shared_ptr<const StorageInMemoryMetadata>;\n class JoinedTables\n {\n public:\n-    JoinedTables(ContextPtr context, const ASTSelectQuery & select_query_, bool include_all_columns_ = false);\n+    JoinedTables(ContextPtr context, const ASTSelectQuery & select_query_, bool include_all_columns_ = false, bool is_create_parameterized_view_ = false);\n \n     void reset(const ASTSelectQuery & select_query);\n \n@@ -53,6 +53,7 @@ class JoinedTables\n     ASTPtr left_table_expression;\n     std::optional<DatabaseAndTableWithAlias> left_db_and_table;\n     const ASTSelectQuery & select_query;\n+    const bool is_create_parameterized_view;\n };\n \n }\ndiff --git a/src/Interpreters/getTableExpressions.cpp b/src/Interpreters/getTableExpressions.cpp\nindex 830f0ea4411b..70e38526648f 100644\n--- a/src/Interpreters/getTableExpressions.cpp\n+++ b/src/Interpreters/getTableExpressions.cpp\n@@ -73,18 +73,21 @@ ASTPtr extractTableExpression(const ASTSelectQuery & select, size_t table_number\n     return nullptr;\n }\n \n+/// The parameter is_create_parameterized_view is used in getSampleBlock of the subquery.\n+/// If it is set to true, then query parameters are allowed in the subquery, and that expression is not evaluated.\n static NamesAndTypesList getColumnsFromTableExpression(\n     const ASTTableExpression & table_expression,\n     ContextPtr context,\n     NamesAndTypesList & materialized,\n     NamesAndTypesList & aliases,\n-    NamesAndTypesList & virtuals)\n+    NamesAndTypesList & virtuals,\n+    bool is_create_parameterized_view)\n {\n     NamesAndTypesList names_and_type_list;\n     if (table_expression.subquery)\n     {\n         const auto & subquery = table_expression.subquery->children.at(0);\n-        names_and_type_list = InterpreterSelectWithUnionQuery::getSampleBlock(subquery, context, true).getNamesAndTypesList();\n+        names_and_type_list = InterpreterSelectWithUnionQuery::getSampleBlock(subquery, context, true, is_create_parameterized_view).getNamesAndTypesList();\n     }\n     else if (table_expression.table_function)\n     {\n@@ -117,7 +120,8 @@ TablesWithColumns getDatabaseAndTablesWithColumns(\n         const ASTTableExprConstPtrs & table_expressions,\n         ContextPtr context,\n         bool include_alias_cols,\n-        bool include_materialized_cols)\n+        bool include_materialized_cols,\n+        bool is_create_parameterized_view)\n {\n     TablesWithColumns tables_with_columns;\n \n@@ -129,7 +133,7 @@ TablesWithColumns getDatabaseAndTablesWithColumns(\n         NamesAndTypesList aliases;\n         NamesAndTypesList virtuals;\n         NamesAndTypesList names_and_types = getColumnsFromTableExpression(\n-            *table_expression, context, materialized, aliases, virtuals);\n+            *table_expression, context, materialized, aliases, virtuals, is_create_parameterized_view);\n \n         removeDuplicateColumns(names_and_types);\n \ndiff --git a/src/Interpreters/getTableExpressions.h b/src/Interpreters/getTableExpressions.h\nindex c4ca01ee3c36..02262e5f3139 100644\n--- a/src/Interpreters/getTableExpressions.h\n+++ b/src/Interpreters/getTableExpressions.h\n@@ -20,7 +20,9 @@ const ASTTableExpression * getTableExpression(const ASTSelectQuery & select, siz\n \n ASTPtr extractTableExpression(const ASTSelectQuery & select, size_t table_number);\n \n+/// The parameter is_create_parameterized_view is used in getSampleBlock of the subquery. It is forwarded to getColumnsFromTableExpression.\n+/// If it is set to true, then query parameters are allowed in the subquery, and that expression is not evaluated.\n TablesWithColumns getDatabaseAndTablesWithColumns(\n-    const ASTTableExprConstPtrs & table_expressions, ContextPtr context, bool include_alias_cols, bool include_materialized_cols);\n+    const ASTTableExprConstPtrs & table_expressions, ContextPtr context, bool include_alias_cols, bool include_materialized_cols, bool is_create_parameterized_view = false);\n \n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02428_parameterized_view.reference b/tests/queries/0_stateless/02428_parameterized_view.reference\nindex 27d7c6d19568..5af9e75680cf 100644\n--- a/tests/queries/0_stateless/02428_parameterized_view.reference\n+++ b/tests/queries/0_stateless/02428_parameterized_view.reference\n@@ -36,3 +36,5 @@ ERROR\n 20\n 10\n 10\n+10\n+10\ndiff --git a/tests/queries/0_stateless/02428_parameterized_view.sh b/tests/queries/0_stateless/02428_parameterized_view.sh\nindex aad3aad3b22b..274ee43e00dc 100755\n--- a/tests/queries/0_stateless/02428_parameterized_view.sh\n+++ b/tests/queries/0_stateless/02428_parameterized_view.sh\n@@ -16,13 +16,15 @@ $CLICKHOUSE_CLIENT -q \"DROP VIEW IF EXISTS test_02428_pv7\"\n $CLICKHOUSE_CLIENT -q \"DROP VIEW IF EXISTS test_02428_pv8\"\n $CLICKHOUSE_CLIENT -q \"DROP VIEW IF EXISTS test_02428_pv9\"\n $CLICKHOUSE_CLIENT -q \"DROP VIEW IF EXISTS test_02428_pv10\"\n+$CLICKHOUSE_CLIENT -q \"DROP VIEW IF EXISTS test_02428_pv11\"\n+$CLICKHOUSE_CLIENT -q \"DROP VIEW IF EXISTS test_02428_pv12\"\n $CLICKHOUSE_CLIENT -q \"DROP VIEW IF EXISTS test_02428_v1\"\n $CLICKHOUSE_CLIENT -q \"DROP TABLE IF EXISTS test_02428_Catalog\"\n $CLICKHOUSE_CLIENT -q \"DROP TABLE IF EXISTS ${CLICKHOUSE_TEST_UNIQUE_NAME}.pv1\"\n $CLICKHOUSE_CLIENT -q \"DROP TABLE IF EXISTS ${CLICKHOUSE_TEST_UNIQUE_NAME}.Catalog\"\n $CLICKHOUSE_CLIENT -q \"DROP DATABASE IF EXISTS ${CLICKHOUSE_TEST_UNIQUE_NAME}\"\n \n-$CLICKHOUSE_CLIENT -q \"CREATE TABLE test_02428_Catalog (Name String, Price UInt64, Quantity UInt64) ENGINE = Memory\"\n+$CLICKHOUSE_CLIENT -q \"CREATE TABLE test_02428_Catalog (Name String, Price UInt64, Quantity UInt64) ENGINE = ReplicatedMergeTree('/clickhouse/tables/$CLICKHOUSE_TEST_ZOOKEEPER_PREFIX/parameterized_view', 'r1') ORDER BY Name\"\n \n $CLICKHOUSE_CLIENT -q \"INSERT INTO test_02428_Catalog VALUES ('Pen', 10, 3)\"\n $CLICKHOUSE_CLIENT -q \"INSERT INTO test_02428_Catalog VALUES ('Book', 50, 2)\"\n@@ -71,7 +73,7 @@ $CLICKHOUSE_CLIENT -q \"SELECT Price FROM \\`${CLICKHOUSE_TEST_UNIQUE_NAME}.pv1\\`(\n \n $CLICKHOUSE_CLIENT -q \"INSERT INTO test_02428_Catalog VALUES ('Book2', 30, 8)\"\n $CLICKHOUSE_CLIENT -q \"INSERT INTO test_02428_Catalog VALUES ('Book3', 30, 8)\"\n-$CLICKHOUSE_CLIENT -q \"CREATE VIEW test_02428_pv5 AS SELECT Price FROM test_02428_Catalog WHERE {price:UInt64} HAVING Quantity in (SELECT {quantity:UInt64}) LIMIT {limit:UInt64}\"\n+$CLICKHOUSE_CLIENT -q \"CREATE VIEW test_02428_pv5 AS SELECT Price FROM test_02428_Catalog WHERE Price={price:UInt64} HAVING Quantity in (SELECT {quantity:UInt64}) LIMIT {limit:UInt64}\"\n $CLICKHOUSE_CLIENT -q \"SELECT Price FROM test_02428_pv5(price=30, quantity=8, limit=1)\"\n $CLICKHOUSE_CLIENT -q \"CREATE VIEW test_02428_pv6 AS SELECT Price+{price:UInt64} FROM test_02428_Catalog GROUP BY Price+{price:UInt64} ORDER BY Price+{price:UInt64}\"\n $CLICKHOUSE_CLIENT -q \"SELECT * FROM test_02428_pv6(price=10)\"\n@@ -87,6 +89,12 @@ $CLICKHOUSE_CLIENT -q \"SELECT * FROM test_02428_pv9(quantity=3)\"\n $CLICKHOUSE_CLIENT -q \"CREATE VIEW test_02428_pv10 AS SELECT Price FROM test_02428_Catalog WHERE Price={Pri:UInt64} ORDER BY Price\"\n $CLICKHOUSE_CLIENT -q \"SELECT * FROM test_02428_pv10(Pri=10)\"\n \n+$CLICKHOUSE_CLIENT -q \"CREATE VIEW test_02428_pv11 AS SELECT * from ( SELECT Price FROM test_02428_Catalog WHERE Price={price:UInt64} )\"\n+$CLICKHOUSE_CLIENT -q \"SELECT * FROM test_02428_pv11(price=10)\"\n+\n+$CLICKHOUSE_CLIENT -q \"CREATE VIEW test_02428_pv12 AS SELECT * from ( SELECT Price FROM test_02428_Catalog WHERE Price IN (SELECT number FROM numbers({price:UInt64})) )\"\n+$CLICKHOUSE_CLIENT -q \"SELECT * FROM test_02428_pv12(price=11)\"\n+\n $CLICKHOUSE_CLIENT -q \"DROP VIEW test_02428_pv1\"\n $CLICKHOUSE_CLIENT -q \"DROP VIEW test_02428_pv2\"\n $CLICKHOUSE_CLIENT -q \"DROP VIEW test_02428_pv3\"\n@@ -96,6 +104,8 @@ $CLICKHOUSE_CLIENT -q \"DROP VIEW test_02428_pv7\"\n $CLICKHOUSE_CLIENT -q \"DROP VIEW test_02428_pv8\"\n $CLICKHOUSE_CLIENT -q \"DROP VIEW test_02428_pv9\"\n $CLICKHOUSE_CLIENT -q \"DROP VIEW test_02428_pv10\"\n+$CLICKHOUSE_CLIENT -q \"DROP VIEW test_02428_pv11\"\n+$CLICKHOUSE_CLIENT -q \"DROP VIEW test_02428_pv12\"\n $CLICKHOUSE_CLIENT -q \"DROP VIEW test_02428_v1\"\n $CLICKHOUSE_CLIENT -q \"DROP TABLE test_02428_Catalog\"\n $CLICKHOUSE_CLIENT -q \"DROP TABLE ${CLICKHOUSE_TEST_UNIQUE_NAME}.pv1\"\n",
  "problem_statement": "Parametrized view - what is the syntax to use in IN clause? Is it possible to use parameter in subquery?\nIt's not clear from the [documentation](https://clickhouse.com/docs/en/sql-reference/statements/create/view/) or [Altinity article](https://kb.altinity.com/altinity-kb-queries-and-syntax/altinity-kb-parameterized-views/) how to use parametrized views.\r\nParametrized view works fine with the equality clause:\r\n```\r\ncreate or replace view live_agents_pv2 as\r\nselect * FROM default.service_library sl \r\n    where account_id = {account_id2:Int32} \r\n```\r\nFails with error UNKNOWN_QUERY_PARAMETER with IN clause:\r\n```\r\ncreate or replace view live_agents_pv2 as\r\nselect * FROM default.service_library sl \r\n    where account_id in ({account_id2:Array(Int32)}) \r\n```\r\nIt also fails when I use a parameter in a nested query:\r\n```\r\ncreate or replace view live_agents_pv2 as\r\nselect * from (\r\nselect * FROM default.service_library sl \r\n    where account_id = {account_id2:Int32} )\r\n```\r\n\r\nversion 23.1.3.5\r\n\r\nDDL:\r\n```\r\nCREATE TABLE default.service_library\r\n(\r\naccount_id Int32,\r\nchecksum String,\r\ncluster_agent_id Int32,\r\nentity_guid String,\r\nlanguage String,\r\nname String,\r\nreal_agent_id Int32,\r\nversion String,\r\ncreated_at DateTime DEFAULT now(),\r\nrun_id Int32,\r\nis_dead UInt8 DEFAULT 0\r\n)\r\nENGINE = ReplacingMergeTree(created_at)\r\nORDER BY (account_id, entity_guid, name, version, cluster_agent_id, real_agent_id)\r\nTTL created_at + toIntervalDay(3)\r\n```\n",
  "hints_text": "Yeah it would be great with some examples and notes about any limitations that exists. \nParameterized view support for IN clause is available from 23.2 (https://github.com/ClickHouse/ClickHouse/releases/tag/v23.2.1.2537-stable) ( PR #46583). The syntax used for IN clause in your query is fine.\r\n\r\nI will look into the issue with nested query.\r\n\r\n",
  "created_at": "2023-03-19T18:42:37Z",
  "modified_files": [
    "src/Interpreters/InterpreterSelectQuery.cpp",
    "src/Interpreters/InterpreterSelectWithUnionQuery.cpp",
    "src/Interpreters/JoinedTables.cpp",
    "src/Interpreters/JoinedTables.h",
    "src/Interpreters/getTableExpressions.cpp",
    "src/Interpreters/getTableExpressions.h"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/02428_parameterized_view.reference",
    "tests/queries/0_stateless/02428_parameterized_view.sh"
  ]
}