{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 19991,
  "instance_id": "ClickHouse__ClickHouse-19991",
  "issue_numbers": [
    "19877"
  ],
  "base_commit": "fb02d5653494e8b45560e3dc5f6f0be18c1dff9c",
  "patch": "diff --git a/src/Interpreters/ActionsDAG.cpp b/src/Interpreters/ActionsDAG.cpp\nindex d8c40ffda2f6..167e7a0a2ecf 100644\n--- a/src/Interpreters/ActionsDAG.cpp\n+++ b/src/Interpreters/ActionsDAG.cpp\n@@ -39,7 +39,17 @@ ActionsDAG::ActionsDAG(const ColumnsWithTypeAndName & inputs_)\n     for (const auto & input : inputs_)\n     {\n         if (input.column && isColumnConst(*input.column))\n+        {\n             addInput(input, true);\n+\n+            /// Here we also add column.\n+            /// It will allow to remove input which is actually constant (after projection).\n+            /// Also, some transforms from query pipeline may randomly materialize constants,\n+            ///   without any respect to header structure. So, it is a way to drop materialized column and use\n+            ///   constant value from header.\n+            /// We cannot remove such input right now cause inputs positions are important in some cases.\n+            addColumn(input, true);\n+        }\n         else\n             addInput(input.name, input.type, true);\n     }\n@@ -116,7 +126,6 @@ ActionsDAG::Node & ActionsDAG::addAlias(Node & child, std::string alias, bool ca\n     node.result_type = child.result_type;\n     node.result_name = std::move(alias);\n     node.column = child.column;\n-    node.allow_constant_folding = child.allow_constant_folding;\n     node.children.emplace_back(&child);\n \n     return addNode(std::move(node), can_replace);\n@@ -184,7 +193,6 @@ ActionsDAG::Node & ActionsDAG::addFunction(\n     for (size_t i = 0; i < num_arguments; ++i)\n     {\n         auto & child = *node.children[i];\n-        node.allow_constant_folding = node.allow_constant_folding && child.allow_constant_folding;\n \n         ColumnWithTypeAndName argument;\n         argument.column = child.column;\n@@ -349,10 +357,15 @@ void ActionsDAG::removeUnusedActions()\n         stack.push(node);\n     }\n \n-    /// We cannot remove arrayJoin because it changes the number of rows.\n     for (auto & node : nodes)\n     {\n-        if (node.type == ActionType::ARRAY_JOIN && visited_nodes.count(&node) == 0)\n+        /// We cannot remove function with side effects even if it returns constant (e.g. ignore(...)).\n+        bool prevent_constant_folding = node.column && isColumnConst(*node.column) && !node.allow_constant_folding;\n+        /// We cannot remove arrayJoin because it changes the number of rows.\n+        bool is_array_join = node.type == ActionType::ARRAY_JOIN;\n+\n+        bool must_keep_node = is_array_join || prevent_constant_folding;\n+        if (must_keep_node && visited_nodes.count(&node) == 0)\n         {\n             visited_nodes.insert(&node);\n             stack.push(&node);\n@@ -410,7 +423,6 @@ void ActionsDAG::addAliases(const NamesWithAliases & aliases, std::vector<Node *\n             node.result_type = child->result_type;\n             node.result_name = std::move(item.second);\n             node.column = child->column;\n-            node.allow_constant_folding = child->allow_constant_folding;\n             node.children.emplace_back(child);\n \n             auto & alias = addNode(std::move(node), true);\ndiff --git a/src/Storages/MergeTree/MergeTreeRangeReader.cpp b/src/Storages/MergeTree/MergeTreeRangeReader.cpp\nindex 4e5e7e6f9463..6d4d8737f103 100644\n--- a/src/Storages/MergeTree/MergeTreeRangeReader.cpp\n+++ b/src/Storages/MergeTree/MergeTreeRangeReader.cpp\n@@ -867,7 +867,7 @@ void MergeTreeRangeReader::executePrewhereActionsAndFilterColumns(ReadResult & r\n     if (result.totalRowsPerGranule() == 0)\n         result.setFilterConstFalse();\n     /// If we need to filter in PREWHERE\n-    else if (prewhere->need_filter || result.need_filter)\n+    else if (prewhere->need_filter || result.need_filter || prewhere->remove_prewhere_column)\n     {\n         /// If there is a filter and without optimized\n         if (result.getFilter() && last_reader_in_chain)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01671_merge_join_and_constants.reference b/tests/queries/0_stateless/01671_merge_join_and_constants.reference\nindex 114fc9ff91fc..efd814df893f 100644\n--- a/tests/queries/0_stateless/01671_merge_join_and_constants.reference\n+++ b/tests/queries/0_stateless/01671_merge_join_and_constants.reference\n@@ -3,3 +3,4 @@\n \u2502 b \u2502 2018-01-01 \u2502 B \u2502 2018-01-01 \u2502 0.10      \u2502\n \u2502 c \u2502 2018-01-01 \u2502 C \u2502 2018-01-01 \u2502 0.10      \u2502\n \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\\N\t\\N\t\\N\t\\N\t0\t0\ndiff --git a/tests/queries/0_stateless/01671_merge_join_and_constants.sql b/tests/queries/0_stateless/01671_merge_join_and_constants.sql\nindex 8611a96a7233..c34f8e6705d0 100644\n--- a/tests/queries/0_stateless/01671_merge_join_and_constants.sql\n+++ b/tests/queries/0_stateless/01671_merge_join_and_constants.sql\n@@ -11,5 +11,7 @@ set join_algorithm = 'partial_merge';\n \n SELECT * FROM table1 AS t1 ALL LEFT JOIN (SELECT *, '0.10', c, d AS b FROM table2) AS t2 USING (a, b) ORDER BY d ASC FORMAT PrettyCompact settings max_rows_in_join = 1;\n \n+SELECT pow('0.0000000257', NULL), pow(pow(NULL, NULL), NULL) - NULL, (val + NULL) = (rval * 0), * FROM (SELECT (val + 256) = (NULL * NULL), toLowCardinality(toNullable(dummy)) AS val FROM system.one) AS s1 ANY LEFT JOIN (SELECT toLowCardinality(dummy) AS rval FROM system.one) AS s2 ON (val + 0) = (rval * 255) settings max_rows_in_join = 1;\n+\n DROP TABLE IF EXISTS table1;\n DROP TABLE IF EXISTS table2;\n",
  "problem_statement": "Fuzzer: MSan report in LowCardinality + JOIN\n**Describe the bug**\r\n```\r\nSELECT pow('0.0000000257', NULL), pow(pow(NULL, NULL), NULL) - NULL, (val + NULL) = (rval * 0), * FROM (SELECT (val + 256) = (NULL * NULL), toLowCardinality(toNullable(dummy)) AS val FROM system.one) AS s1 ANY LEFT JOIN (SELECT toLowCardinality(dummy) AS rval FROM system.one) AS s2 ON (val + 0) = (rval * 255)\r\n```\r\n\r\nhttps://clickhouse-test-reports.s3.yandex.net/19868/c39ee3f58c85de0f2a7b609377e2f138305dc745/fuzzer_msan/server.log\n",
  "hints_text": "",
  "created_at": "2021-02-02T11:59:11Z"
}