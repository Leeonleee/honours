{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 12366,
  "instance_id": "ClickHouse__ClickHouse-12366",
  "issue_numbers": [
    "10437"
  ],
  "base_commit": "c410ae3ebf69b56d7d5e8e7b5b34bbad476b0390",
  "patch": "diff --git a/src/Functions/FunctionsExternalDictionaries.h b/src/Functions/FunctionsExternalDictionaries.h\nindex 8e538bf780b3..8e80e19a54ea 100644\n--- a/src/Functions/FunctionsExternalDictionaries.h\n+++ b/src/Functions/FunctionsExternalDictionaries.h\n@@ -95,6 +95,10 @@ class FunctionDictHelper\n \n     bool isDictGetFunctionInjective(const Block & sample_block)\n     {\n+        /// Assume non-injective by default\n+        if (!sample_block)\n+            return false;\n+\n         if (sample_block.columns() != 3 && sample_block.columns() != 4)\n             throw Exception{\"Function dictGet... takes 3 or 4 arguments\", ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH};\n \ndiff --git a/src/Functions/IFunction.h b/src/Functions/IFunction.h\nindex b8873ea26714..9bed7b209bf6 100644\n--- a/src/Functions/IFunction.h\n+++ b/src/Functions/IFunction.h\n@@ -133,6 +133,10 @@ class IFunctionBase\n       * But we assume, that it is injective. This could be documented as implementation-specific behaviour.\n       *\n       * sample_block should contain data types of arguments and values of constants, if relevant.\n+      * NOTE: to check is function injective with any arguments, you can pass\n+      *       empty block as sample_block (since most of the time function will\n+      *       ignore it anyway, and creating arguments just for checking is\n+      *       function injective or not is overkill).\n       */\n     virtual bool isInjective(const Block & /*sample_block*/) const { return false; }\n \ndiff --git a/src/Interpreters/SyntaxAnalyzer.cpp b/src/Interpreters/SyntaxAnalyzer.cpp\nindex 5e83287433b5..1a48b559ecc9 100644\n--- a/src/Interpreters/SyntaxAnalyzer.cpp\n+++ b/src/Interpreters/SyntaxAnalyzer.cpp\n@@ -225,6 +225,7 @@ void executeScalarSubqueries(ASTPtr & query, const Context & context, size_t sub\n \n const std::unordered_set<String> possibly_injective_function_names\n {\n+        \"dictGet\",\n         \"dictGetString\",\n         \"dictGetUInt8\",\n         \"dictGetUInt16\",\n@@ -304,10 +305,18 @@ void optimizeGroupBy(ASTSelectQuery * select_query, const NameSet & source_colum\n                     continue;\n                 }\n \n-                const auto & dict_name = function->arguments->children[0]->as<ASTLiteral &>().value.safeGet<String>();\n-                const auto & dict_ptr = context.getExternalDictionariesLoader().getDictionary(dict_name);\n-                const auto & attr_name = function->arguments->children[1]->as<ASTLiteral &>().value.safeGet<String>();\n+                const auto * dict_name_ast = function->arguments->children[0]->as<ASTLiteral>();\n+                const auto * attr_name_ast = function->arguments->children[1]->as<ASTLiteral>();\n+                if (!dict_name_ast || !attr_name_ast)\n+                {\n+                    ++i;\n+                    continue;\n+                }\n+\n+                const auto & dict_name = dict_name_ast->value.safeGet<String>();\n+                const auto & attr_name = attr_name_ast->value.safeGet<String>();\n \n+                const auto & dict_ptr = context.getExternalDictionariesLoader().getDictionary(dict_name);\n                 if (!dict_ptr->isInjective(attr_name))\n                 {\n                     ++i;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01375_GROUP_BY_injective_elimination_dictGet_BAD_ARGUMENTS.reference b/tests/queries/0_stateless/01375_GROUP_BY_injective_elimination_dictGet_BAD_ARGUMENTS.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/01375_GROUP_BY_injective_elimination_dictGet_BAD_ARGUMENTS.sql b/tests/queries/0_stateless/01375_GROUP_BY_injective_elimination_dictGet_BAD_ARGUMENTS.sql\nnew file mode 100644\nindex 000000000000..88a2b25c2dba\n--- /dev/null\n+++ b/tests/queries/0_stateless/01375_GROUP_BY_injective_elimination_dictGet_BAD_ARGUMENTS.sql\n@@ -0,0 +1,1 @@\n+SELECT dictGetString(concat('default', '.countryId'), 'country', toUInt64(number)) AS country FROM numbers(2) GROUP BY country; -- { serverError 36; }\ndiff --git a/tests/queries/0_stateless/01376_GROUP_BY_injective_elimination_dictGet.reference b/tests/queries/0_stateless/01376_GROUP_BY_injective_elimination_dictGet.reference\nnew file mode 100644\nindex 000000000000..9459d4ba2a0d\n--- /dev/null\n+++ b/tests/queries/0_stateless/01376_GROUP_BY_injective_elimination_dictGet.reference\n@@ -0,0 +1,1 @@\n+1.1\ndiff --git a/tests/queries/0_stateless/01376_GROUP_BY_injective_elimination_dictGet.sql b/tests/queries/0_stateless/01376_GROUP_BY_injective_elimination_dictGet.sql\nnew file mode 100644\nindex 000000000000..1c7a4d16f054\n--- /dev/null\n+++ b/tests/queries/0_stateless/01376_GROUP_BY_injective_elimination_dictGet.sql\n@@ -0,0 +1,31 @@\n+-- https://github.com/ClickHouse/ClickHouse/issues/11469\n+SELECT dictGet('default.countryId', 'country', toUInt64(number)) AS country FROM numbers(2) GROUP BY country; -- { serverError 36; }\n+\n+\n+-- with real dictionary\n+DROP TABLE IF EXISTS dictdb_01376.table_for_dict;\n+DROP DICTIONARY IF EXISTS dictdb_01376.dict_exists;\n+DROP DATABASE IF EXISTS dictdb_01376;\n+\n+CREATE DATABASE dictdb_01376 ENGINE = Ordinary;\n+\n+CREATE TABLE dictdb_01376.table_for_dict\n+(\n+  key_column UInt64,\n+  value Float64\n+)\n+ENGINE = Memory();\n+\n+INSERT INTO dictdb_01376.table_for_dict VALUES (1, 1.1);\n+\n+CREATE DICTIONARY IF NOT EXISTS dictdb_01376.dict_exists\n+(\n+  key_column UInt64,\n+  value Float64 DEFAULT 77.77\n+)\n+PRIMARY KEY key_column\n+SOURCE(CLICKHOUSE(HOST 'localhost' PORT 9000 USER 'default' TABLE 'table_for_dict' DB 'dictdb_01376'))\n+LIFETIME(1)\n+LAYOUT(FLAT());\n+\n+SELECT dictGet('dictdb_01376.dict_exists', 'value', toUInt64(1)) as val FROM numbers(2) GROUP BY val;\n",
  "problem_statement": "Mat view subquery + buffer table results in DB::Exception: There is no query\n```\r\nCREATE TABLE t1 (\r\n  i UInt32,\r\n  time DateTime\r\n) ENGINE = MergeTree()\r\nPARTITION BY time\r\nORDER BY time\r\n\r\nCREATE TABLE t2 (\r\n  i UInt32,\r\n  time DateTime\r\n) ENGINE = MergeTree()\r\nPARTITION BY time\r\nORDER BY time\r\n\r\nCREATE MATERIALIZED VIEW mv1\r\nTO t2\r\nAS SELECT * FROM (SELECT * FROM t1)\r\n\r\nCREATE TABLE b1 AS t1\r\nENGINE = Buffer(default, t1, 1, 0, 0, 1, 1, 1, 1)\r\n\r\nvmihailenco :) INSERT INTO b1 VALUES (1, now());\r\n\r\nINSERT INTO b1 VALUES\r\n\r\nReceived exception from server (version 20.3.7):\r\nCode: 393. DB::Exception: Received from localhost:9000. DB::Exception: There is no query.\r\n```\n",
  "hints_text": "I'm having same issue,\r\nI have \r\n1. table A engine ReplaceMergeTree()\r\n2. MV B on table A\r\n3. Buffer table on table A\r\n\r\nData is not written to the destination A table from the buffer.\r\nEven DROPing the Buffer that should trigger flush the data fails\r\n\r\n```\r\n2020.05.02 21:31:28.038219 [ 526 ] {06a0c14c-6c81-4204-9ab7-968755e881ce} <Error> virtual void DB::StorageBuffer::shutdown(): Code: 393, e.displayText() = DB::Exception: There is no query, Stack trace (when copying this message, always include the lines below):\r\n\r\n0. Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0xbecd55c in /usr/bin/clickhouse\r\n1. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x5009d49 in /usr/bin/clickhouse\r\n2. ? @ 0x4bfb800 in /usr/bin/clickhouse\r\n3. DB::Context::getSampleBlockCache() const @ 0x8cdcb99 in /usr/bin/clickhouse\r\n4. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&) @ 0x8da5c02 in /usr/bin/clickhouse\r\n5. ? @ 0x8f365b9 in /usr/bin/clickhouse\r\n6. DB::getDatabaseAndTablesWithColumnNames(std::__1::vector<DB::ASTTableExpression const*, std::__1::allocator<DB::ASTTableExpression const*> > const&, DB::Context const&, bool) @ 0x8f394f8 in /usr/bin/clickhouse\r\n7. DB::SyntaxAnalyzer::analyze(std::__1::shared_ptr<DB::IAST>&, DB::NamesAndTypesList const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::IStorage>, DB::NamesAndTypesList const&) const @ 0x8ef3983 in /usr/bin/clickhouse\r\n8. ? @ 0x8d6d616 in /usr/bin/clickhouse\r\n9. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6e8c8 in /usr/bin/clickhouse\r\n10. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6f9f5 in /usr/bin/clickhouse\r\n11. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8da5236 in /usr/bin/clickhouse\r\n12. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6f2af in /usr/bin/clickhouse\r\n13. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6f9f5 in /usr/bin/clickhouse\r\n14. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8da5236 in /usr/bin/clickhouse\r\n15. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6f2af in /usr/bin/clickhouse\r\n16. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6f9f5 in /usr/bin/clickhouse\r\n17. DB::PushingToViewsBlockOutputStream::PushingToViewsBlockOutputStream(std::__1::shared_ptr<DB::IStorage> const&, DB::Context const&, std::__1::shared_ptr<DB::IAST> const&, bool) @ 0x96f8baa in /usr/bin/clickhouse\r\n18. DB::InterpreterInsertQuery::execute() @ 0x8d4f07f in /usr/bin/clickhouse\r\n19. DB::StorageBuffer::writeBlockToDestination(DB::Block const&, std::__1::shared_ptr<DB::IStorage>) @ 0x99469fe in /usr/bin/clickhouse\r\n20. DB::StorageBuffer::flushBuffer(DB::StorageBuffer::Buffer&, bool, bool) @ 0x994796f in /usr/bin/clickhouse\r\n21. DB::StorageBuffer::optimize(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::IAST> const&, bool, bool, DB::Context const&) @ 0x9947baf in /usr/bin/clickhouse\r\n22. DB::StorageBuffer::shutdown() @ 0x9944103 in /usr/bin/clickhouse\r\n23. DB::InterpreterDropQuery::executeToTable(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::ASTDropQuery::Kind, bool, bool, bool) @ 0x8d47dd0 in /usr/bin/clickhouse\r\n24. DB::InterpreterDropQuery::execute() @ 0x8d49e3e in /usr/bin/clickhouse\r\n25. ? @ 0x8f2f50a in /usr/bin/clickhouse\r\n26. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, DB::Context&, std::__1::function<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>, std::__1::function<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>) @ 0x8f32b06 in /usr/bin/clickhouse\r\n27. DB::HTTPHandler::processQuery(Poco::Net::HTTPServerRequest&, HTMLForm&, Poco::Net::HTTPServerResponse&, DB::HTTPHandler::Output&) @ 0x5084816 in /usr/bin/clickhouse\r\n28. DB::HTTPHandler::handleRequest(Poco::Net::HTTPServerRequest&, Poco::Net::HTTPServerResponse&) @ 0x5087f03 in /usr/bin/clickhouse\r\n29. Poco::Net::HTTPServerConnection::run() @ 0x9e0480c in /usr/bin/clickhouse\r\n30. Poco::Net::TCPServerConnection::start() @ 0x9e01297 in /usr/bin/clickhouse\r\n31. Poco::Net::TCPServerDispatcher::run() @ 0x9e0168d in /usr/bin/clickhouse\r\n (version 20.2.1.2442 (official build))\r\n```",
  "created_at": "2020-07-09T18:54:40Z",
  "modified_files": [
    "src/Functions/FunctionsExternalDictionaries.h",
    "src/Functions/IFunction.h",
    "src/Interpreters/SyntaxAnalyzer.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01375_GROUP_BY_injective_elimination_dictGet_BAD_ARGUMENTS.sql",
    "b/tests/queries/0_stateless/01376_GROUP_BY_injective_elimination_dictGet.reference",
    "b/tests/queries/0_stateless/01376_GROUP_BY_injective_elimination_dictGet.sql"
  ]
}