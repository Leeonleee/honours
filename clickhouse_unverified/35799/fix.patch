diff --git a/src/Parsers/ExpressionElementParsers.cpp b/src/Parsers/ExpressionElementParsers.cpp
index c51201750c5f..ef236388a044 100644
--- a/src/Parsers/ExpressionElementParsers.cpp
+++ b/src/Parsers/ExpressionElementParsers.cpp
@@ -505,32 +505,34 @@ namespace
 
     bool parseExtract(IParser::Pos & pos, ASTPtr & node, Expected & expected)
     {
-        ASTPtr expr;
-
+        IParser::Pos begin = pos;
         IntervalKind interval_kind;
-        if (!parseIntervalKind(pos, expected, interval_kind))
+
+        if (parseIntervalKind(pos, expected, interval_kind))
         {
-            ASTPtr expr_list;
-            if (!ParserExpressionList(false, false).parse(pos, expr_list, expected))
-                return false;
+            ASTPtr expr;
 
-            auto res = std::make_shared<ASTFunction>();
-            res->name = "extract";
-            res->arguments = expr_list;
-            res->children.push_back(res->arguments);
-            node = std::move(res);
-            return true;
+            ParserKeyword s_from("FROM");
+            ParserExpression elem_parser;
+
+            if (s_from.ignore(pos, expected) && elem_parser.parse(pos, expr, expected))
+            {
+                node = makeASTFunction(interval_kind.toNameOfFunctionExtractTimePart(), expr);
+                return true;
+            }
         }
 
-        ParserKeyword s_from("FROM");
-        if (!s_from.ignore(pos, expected))
-            return false;
+        pos = begin;
 
-        ParserExpression elem_parser;
-        if (!elem_parser.parse(pos, expr, expected))
+        ASTPtr expr_list;
+        if (!ParserExpressionList(false, false).parse(pos, expr_list, expected))
             return false;
 
-        node = makeASTFunction(interval_kind.toNameOfFunctionExtractTimePart(), expr);
+        auto res = std::make_shared<ASTFunction>();
+        res->name = "extract";
+        res->arguments = expr_list;
+        res->children.push_back(res->arguments);
+        node = std::move(res);
         return true;
     }
 
