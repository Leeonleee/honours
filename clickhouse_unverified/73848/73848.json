{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 73848,
  "instance_id": "ClickHouse__ClickHouse-73848",
  "issue_numbers": [
    "70865"
  ],
  "base_commit": "a69b40520aeab6a0e774f15ebdef6b25bc8afe01",
  "patch": "diff --git a/programs/local/LocalServer.cpp b/programs/local/LocalServer.cpp\nindex ce2eca713a09..32e59f8b4a6c 100644\n--- a/programs/local/LocalServer.cpp\n+++ b/programs/local/LocalServer.cpp\n@@ -399,10 +399,13 @@ std::string LocalServer::getInitialCreateTableQuery()\n     auto table_structure = getClientConfiguration().getString(\"table-structure\", \"auto\");\n \n     String table_file;\n+    String compression = \"auto\";\n     if (!getClientConfiguration().has(\"table-file\") || getClientConfiguration().getString(\"table-file\") == \"-\")\n     {\n         /// Use Unix tools stdin naming convention\n         table_file = \"stdin\";\n+        if (default_input_compression_method != CompressionMethod::None)\n+            compression = toContentEncodingName(default_input_compression_method);\n     }\n     else\n     {\n@@ -418,8 +421,8 @@ std::string LocalServer::getInitialCreateTableQuery()\n     else\n         table_structure = \"(\" + table_structure + \")\";\n \n-    return fmt::format(\"CREATE TEMPORARY TABLE {} {} ENGINE = File({}, {});\",\n-                       table_name, table_structure, data_format, table_file);\n+    return fmt::format(\"CREATE TEMPORARY TABLE {} {} ENGINE = File({}, {}, {});\",\n+                       table_name, table_structure, data_format, table_file, compression);\n }\n \n \n@@ -498,7 +501,7 @@ void LocalServer::connect()\n     auto table_file = getClientConfiguration().getString(\"table-file\", \"-\");\n     if (table_file == \"-\" || table_file == \"stdin\")\n     {\n-        in = &std_in;\n+        in = std_in.get();\n     }\n     else\n     {\ndiff --git a/src/Client/ClientBase.cpp b/src/Client/ClientBase.cpp\nindex 59b37001a262..89a0e87cb15c 100644\n--- a/src/Client/ClientBase.cpp\n+++ b/src/Client/ClientBase.cpp\n@@ -289,8 +289,11 @@ ClientBase::ClientBase(\n     std::ostream & output_stream_,\n     std::ostream & error_stream_\n )\n-    : std_in(in_fd_)\n-    , std_out(out_fd_)\n+    : stdin_fd(in_fd_)\n+    , stdout_fd(out_fd_)\n+    , stderr_fd(err_fd_)\n+    , std_in(std::make_unique<ReadBufferFromFileDescriptor>(in_fd_))\n+    , std_out(std::make_unique<AutoCanceledWriteBuffer<WriteBufferFromFileDescriptor>>(out_fd_))\n     , progress_indication(output_stream_, in_fd_, err_fd_)\n     , progress_table(output_stream_, in_fd_, err_fd_)\n     , input_stream(input_stream_)\n@@ -573,7 +576,7 @@ try\n         }\n         else\n         {\n-            out_buf = &std_out;\n+            out_buf = std_out.get();\n         }\n \n         String current_format = default_output_format;\n@@ -628,7 +631,7 @@ try\n                 {\n                     select_into_file_and_stdout = true;\n                     out_file_buf = std::make_unique<ForkWriteBuffer>(std::vector<WriteBufferPtr>{std::move(out_file_buf),\n-                            std::make_shared<WriteBufferFromFileDescriptor>(STDOUT_FILENO)});\n+                        std::make_shared<WriteBufferFromFileDescriptor>(stdout_fd)});\n                 }\n \n                 // We are writing to file, so default format is the same as in non-interactive mode.\n@@ -691,14 +694,14 @@ void ClientBase::initLogsOutputStream()\n             if (server_logs_file.empty())\n             {\n                 /// Use stderr by default\n-                out_logs_buf = std::make_unique<AutoCanceledWriteBuffer<WriteBufferFromFileDescriptor>>(STDERR_FILENO);\n+                out_logs_buf = std::make_unique<AutoCanceledWriteBuffer<WriteBufferFromFileDescriptor>>(stderr_fd);\n                 wb = out_logs_buf.get();\n                 color_logs = stderr_is_a_tty;\n             }\n             else if (server_logs_file == \"-\")\n             {\n                 /// Use stdout if --server_logs_file=- specified\n-                wb = &std_out;\n+                wb = std_out.get();\n                 color_logs = stdout_is_a_tty;\n             }\n             else\n@@ -770,15 +773,15 @@ void ClientBase::setDefaultFormatsAndCompressionFromConfiguration()\n         default_output_format = \"Vertical\";\n         is_default_format = false;\n     }\n-    else if (isRegularFile(STDOUT_FILENO))\n+    else if (isRegularFile(stdout_fd))\n     {\n-        std::optional<String> format_from_file_name = FormatFactory::instance().tryGetFormatFromFileDescriptor(STDOUT_FILENO);\n+        std::optional<String> format_from_file_name = FormatFactory::instance().tryGetFormatFromFileDescriptor(stdout_fd);\n         if (format_from_file_name)\n             default_output_format = *format_from_file_name;\n         else\n             default_output_format = \"TSV\";\n \n-        std::optional<String> file_name = tryGetFileNameFromFileDescriptor(STDOUT_FILENO);\n+        std::optional<String> file_name = tryGetFileNameFromFileDescriptor(stdout_fd);\n         if (file_name)\n             default_output_compression_method = chooseCompressionMethod(*file_name, \"\");\n     }\n@@ -810,11 +813,15 @@ void ClientBase::setDefaultFormatsAndCompressionFromConfiguration()\n     }\n     else\n     {\n-        std::optional<String> format_from_file_name = FormatFactory::instance().tryGetFormatFromFileDescriptor(STDIN_FILENO);\n+        std::optional<String> format_from_file_name = FormatFactory::instance().tryGetFormatFromFileDescriptor(stdin_fd);\n         if (format_from_file_name)\n             default_input_format = *format_from_file_name;\n         else\n             default_input_format = \"TSV\";\n+\n+        std::optional<String> file_name = tryGetFileNameFromFileDescriptor(stdin_fd);\n+        if (file_name)\n+            default_input_compression_method = chooseCompressionMethod(*file_name, \"\");\n     }\n \n     format_max_block_size = getClientConfiguration().getUInt64(\"format_max_block_size\", global_context->getSettingsRef()[Setting::max_block_size]);\n@@ -892,7 +899,7 @@ void ClientBase::initTTYBuffer(ProgressOption progress_option, ProgressOption pr\n \n     if (stderr_is_a_tty || progress == ProgressOption::ERR)\n     {\n-        tty_buf = std::make_unique<AutoCanceledWriteBuffer<WriteBufferFromFileDescriptor>>(STDERR_FILENO, buf_size);\n+        tty_buf = std::make_unique<AutoCanceledWriteBuffer<WriteBufferFromFileDescriptor>>(stderr_fd, buf_size);\n     }\n     else\n     {\n@@ -905,7 +912,7 @@ void ClientBase::initKeystrokeInterceptor()\n {\n     if (is_interactive && need_render_progress_table && progress_table_toggle_enabled)\n     {\n-        keystroke_interceptor = std::make_unique<TerminalKeystrokeInterceptor>(std_in.getFD(), error_stream);\n+        keystroke_interceptor = std::make_unique<TerminalKeystrokeInterceptor>(stdin_fd, error_stream);\n         keystroke_interceptor->registerCallback(' ', [this]() { progress_table_toggle_on = !progress_table_toggle_on; });\n     }\n }\n@@ -1513,7 +1520,7 @@ void ClientBase::resetOutput()\n     }\n     pager_cmd = nullptr;\n \n-    std_out.next();\n+    std_out->next();\n }\n \n \n@@ -1571,7 +1578,7 @@ void ClientBase::setInsertionTable(const ASTInsertQuery & insert_query)\n \n namespace\n {\n-bool isStdinNotEmptyAndValid(ReadBufferFromFileDescriptor & std_in)\n+bool isStdinNotEmptyAndValid(ReadBuffer & std_in)\n {\n     try\n     {\n@@ -1605,7 +1612,7 @@ void ClientBase::processInsertQuery(const String & query_to_execute, ASTPtr pars\n \n     /// Process the query that requires transferring data blocks to the server.\n     const auto & parsed_insert_query = parsed_query->as<ASTInsertQuery &>();\n-    if ((!parsed_insert_query.data && !parsed_insert_query.infile) && (is_interactive || (!stdin_is_a_tty && !isStdinNotEmptyAndValid(std_in))))\n+    if ((!parsed_insert_query.data && !parsed_insert_query.infile) && (is_interactive || (!stdin_is_a_tty && !isStdinNotEmptyAndValid(*std_in))))\n     {\n         const auto & settings = client_context->getSettingsRef();\n         if (settings[Setting::throw_if_no_data_to_insert])\n@@ -1670,17 +1677,20 @@ void ClientBase::sendData(Block & sample, const ColumnsDescription & columns_des\n     if (!connection->isSendDataNeeded())\n         return;\n \n-    bool have_data_in_stdin = !is_interactive && !stdin_is_a_tty && isStdinNotEmptyAndValid(std_in);\n+    bool have_data_in_stdin = !is_interactive && !stdin_is_a_tty && isStdinNotEmptyAndValid(*std_in);\n \n     if (need_render_progress)\n     {\n-        /// Set total_bytes_to_read for current fd.\n-        FileProgress file_progress(0, std_in.getFileSize());\n-        progress_indication.updateProgress(Progress(file_progress));\n+        if (auto * std_in_desc = typeid_cast<ReadBufferFromFileDescriptor *>(std_in.get()))\n+        {\n+            /// Set total_bytes_to_read for current fd.\n+            FileProgress file_progress(0, std_in_desc->getFileSize());\n+            progress_indication.updateProgress(Progress(file_progress));\n \n-        /// Set callback to be called on file progress.\n-        if (tty_buf)\n-            progress_indication.setFileProgressCallback(client_context, *tty_buf, tty_mutex);\n+            /// Set callback to be called on file progress.\n+            if (tty_buf)\n+                progress_indication.setFileProgressCallback(client_context, *tty_buf, tty_mutex);\n+        }\n     }\n \n     /// If data fetched from file (maybe compressed file)\n@@ -1881,7 +1891,9 @@ void ClientBase::sendDataFromStdin(Block & sample, const ColumnsDescription & co\n     /// Send data read from stdin.\n     try\n     {\n-        sendDataFrom(std_in, sample, columns_description, parsed_query);\n+        if (default_input_compression_method != CompressionMethod::None)\n+            std_in = wrapReadBufferWithCompressionMethod(std::move(std_in), default_input_compression_method);\n+        sendDataFrom(*std_in, sample, columns_description, parsed_query);\n     }\n     catch (Exception & e)\n     {\n@@ -1990,9 +2002,9 @@ void ClientBase::processParsedSingleQuery(const String & full_query, const Strin\n \n     if (echo_query_ && *echo_query_)\n     {\n-        writeString(full_query, std_out);\n-        writeChar('\\n', std_out);\n-        std_out.next();\n+        writeString(full_query, *std_out);\n+        writeChar('\\n', *std_out);\n+        std_out->next();\n     }\n \n     if (is_interactive)\n@@ -2001,10 +2013,10 @@ void ClientBase::processParsedSingleQuery(const String & full_query, const Strin\n         // Generate a new query_id\n         for (const auto & query_id_format : query_id_formats)\n         {\n-            writeString(query_id_format.first, std_out);\n-            writeString(fmt::format(fmt::runtime(query_id_format.second), fmt::arg(\"query_id\", client_context->getCurrentQueryId())), std_out);\n-            writeChar('\\n', std_out);\n-            std_out.next();\n+            writeString(query_id_format.first, *std_out);\n+            writeString(fmt::format(fmt::runtime(query_id_format.second), fmt::arg(\"query_id\", client_context->getCurrentQueryId())), *std_out);\n+            writeChar('\\n', *std_out);\n+            std_out->next();\n         }\n     }\n \n@@ -2075,7 +2087,7 @@ void ClientBase::processParsedSingleQuery(const String & full_query, const Strin\n \n         if (is_async_insert_with_inlined_data)\n         {\n-            bool have_data_in_stdin = !is_interactive && !stdin_is_a_tty && isStdinNotEmptyAndValid(std_in);\n+            bool have_data_in_stdin = !is_interactive && !stdin_is_a_tty && isStdinNotEmptyAndValid(*std_in);\n             bool have_external_data = have_data_in_stdin || insert->infile;\n \n             if (have_external_data)\ndiff --git a/src/Client/ClientBase.h b/src/Client/ClientBase.h\nindex 60bddb03ff1f..1b366ed71e99 100644\n--- a/src/Client/ClientBase.h\n+++ b/src/Client/ClientBase.h\n@@ -280,6 +280,9 @@ class ClientBase\n     std::vector<String> queries_files; /// If not empty, queries will be read from these files\n     std::vector<String> interleave_queries_files; /// If not empty, run queries from these files before processing every file from 'queries_files'.\n \n+    int stdin_fd;\n+    int stdout_fd;\n+    int stderr_fd;\n     bool stdin_is_a_tty = false; /// stdin is a terminal.\n     bool stdout_is_a_tty = false; /// stdout is a terminal.\n     bool stderr_is_a_tty = false; /// stderr is a terminal.\n@@ -290,6 +293,7 @@ class ClientBase\n     String default_output_format; /// Query results output format.\n     CompressionMethod default_output_compression_method = CompressionMethod::None;\n     String default_input_format; /// Tables' format for clickhouse-local.\n+    CompressionMethod default_input_compression_method = CompressionMethod::None;\n \n     bool select_into_file = false; /// If writing result INTO OUTFILE. It affects progress rendering.\n     bool select_into_file_and_stdout = false; /// If writing result INTO OUTFILE AND STDOUT. It affects progress rendering.\n@@ -314,9 +318,9 @@ class ClientBase\n     ConnectionParameters connection_parameters;\n \n     /// Buffer that reads from stdin in batch mode.\n-    ReadBufferFromFileDescriptor std_in;\n+    std::unique_ptr<ReadBuffer> std_in;\n     /// Console output.\n-    AutoCanceledWriteBuffer<WriteBufferFromFileDescriptor> std_out;\n+    std::unique_ptr<AutoCanceledWriteBuffer<WriteBufferFromFileDescriptor>> std_out;\n     std::unique_ptr<ShellCommand> pager_cmd;\n \n     /// The user can specify to redirect query output to a file.\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02141_clickhouse_local_interactive_table.reference b/tests/queries/0_stateless/02141_clickhouse_local_interactive_table.reference\nindex 0e74c0a083ec..277f4df04ab0 100644\n--- a/tests/queries/0_stateless/02141_clickhouse_local_interactive_table.reference\n+++ b/tests/queries/0_stateless/02141_clickhouse_local_interactive_table.reference\n@@ -1,2 +1,2 @@\n-CREATE TEMPORARY TABLE `table`\\n(\\n    `key` String\\n)\\nENGINE = File(TSVWithNamesAndTypes, \\'/dev/null\\')\n-CREATE TEMPORARY TABLE `table`\\n(\\n    `key` String\\n)\\nENGINE = File(TSVWithNamesAndTypes, \\'/dev/null\\')\n+CREATE TEMPORARY TABLE `table`\\n(\\n    `key` String\\n)\\nENGINE = File(TSVWithNamesAndTypes, \\'/dev/null\\', auto)\n+CREATE TEMPORARY TABLE `table`\\n(\\n    `key` String\\n)\\nENGINE = File(TSVWithNamesAndTypes, \\'/dev/null\\', auto)\ndiff --git a/tests/queries/0_stateless/03297_input_compression_autodetect.reference b/tests/queries/0_stateless/03297_input_compression_autodetect.reference\nnew file mode 100644\nindex 000000000000..50edeb1fd436\n--- /dev/null\n+++ b/tests/queries/0_stateless/03297_input_compression_autodetect.reference\n@@ -0,0 +1,51 @@\n+0\n+1\n+2\n+3\n+4\n+5\n+6\n+7\n+8\n+9\n+0\n+1\n+2\n+3\n+4\n+5\n+6\n+7\n+8\n+9\n+---\n+0\n+1\n+2\n+3\n+4\n+5\n+6\n+7\n+8\n+9\n+0\n+1\n+2\n+3\n+4\n+5\n+6\n+7\n+8\n+9\n+0\n+1\n+2\n+3\n+4\n+5\n+6\n+7\n+8\n+9\ndiff --git a/tests/queries/0_stateless/03297_input_compression_autodetect.sh b/tests/queries/0_stateless/03297_input_compression_autodetect.sh\nnew file mode 100755\nindex 000000000000..81b4c160395f\n--- /dev/null\n+++ b/tests/queries/0_stateless/03297_input_compression_autodetect.sh\n@@ -0,0 +1,22 @@\n+#!/usr/bin/env bash\n+# Tags: no-fasttest\n+\n+CUR_DIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CUR_DIR\"/../shell_config.sh\n+\n+$CLICKHOUSE_LOCAL --query \"SELECT number FROM numbers(10)\" > \"${CLICKHOUSE_TMP}/numbers.jsonl.gz\"\n+$CLICKHOUSE_LOCAL --query \"SELECT * FROM table\" < \"${CLICKHOUSE_TMP}/numbers.jsonl.gz\"\n+$CLICKHOUSE_LOCAL --query \"SELECT * FROM table\" < \"${CLICKHOUSE_TMP}/numbers.jsonl.gz\" > \"${CLICKHOUSE_TMP}/numbers.csv.bz2\"\n+$CLICKHOUSE_LOCAL --copy < \"${CLICKHOUSE_TMP}/numbers.csv.bz2\" > \"${CLICKHOUSE_TMP}/numbers.parquet\"\n+$CLICKHOUSE_LOCAL --copy < \"${CLICKHOUSE_TMP}/numbers.parquet\"\n+\n+echo '---'\n+\n+$CLICKHOUSE_CLIENT --query \"DROP TABLE IF EXISTS test\"\n+$CLICKHOUSE_CLIENT --query \"CREATE TABLE test (number UInt64) ENGINE = Memory\"\n+$CLICKHOUSE_CLIENT --query \"INSERT INTO test FORMAT JSONLines\" < \"${CLICKHOUSE_TMP}/numbers.jsonl.gz\"\n+$CLICKHOUSE_CLIENT --query \"INSERT INTO test FORMAT CSV\" < \"${CLICKHOUSE_TMP}/numbers.csv.bz2\"\n+$CLICKHOUSE_CLIENT --query \"INSERT INTO test SELECT c1 FROM input() FORMAT Parquet\" < \"${CLICKHOUSE_TMP}/numbers.parquet\"\n+$CLICKHOUSE_CLIENT --query \"SELECT * FROM test\"\n+$CLICKHOUSE_CLIENT --query \"DROP TABLE test\"\n",
  "problem_statement": "clickhouse-local does not autodetect compression in `--copy` mode\n**Describe the issue**\r\nhttps://pastila.nl/?0116088b/301b3f71d6328fc929ad19c0b63750ee#w2RrrCvw+kr/+G/xK0V++A==\r\n\n",
  "hints_text": "",
  "created_at": "2024-12-26T13:32:43Z",
  "modified_files": [
    "programs/local/LocalServer.cpp",
    "src/Client/ClientBase.cpp",
    "src/Client/ClientBase.h"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/02141_clickhouse_local_interactive_table.reference",
    "b/tests/queries/0_stateless/03297_input_compression_autodetect.reference",
    "b/tests/queries/0_stateless/03297_input_compression_autodetect.sh"
  ]
}