{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 20541,
  "instance_id": "ClickHouse__ClickHouse-20541",
  "issue_numbers": [
    "21031",
    "21032",
    "19820"
  ],
  "base_commit": "6946514c0b3165ab79de7a9feca5d19d0a73c03e",
  "patch": "diff --git a/src/Columns/ColumnMap.cpp b/src/Columns/ColumnMap.cpp\nindex cc2640a9cf6e..e0e79d071b4c 100644\n--- a/src/Columns/ColumnMap.cpp\n+++ b/src/Columns/ColumnMap.cpp\n@@ -229,7 +229,21 @@ void ColumnMap::protect()\n \n void ColumnMap::getExtremes(Field & min, Field & max) const\n {\n-    nested->getExtremes(min, max);\n+    Field nested_min;\n+    Field nested_max;\n+\n+    nested->getExtremes(nested_min, nested_max);\n+\n+    /// Convert result Array fields to Map fields because client expect min and max field to have type Map\n+\n+    Array nested_min_value = nested_min.get<Array>();\n+    Array nested_max_value = nested_max.get<Array>();\n+\n+    Map map_min_value(nested_min_value.begin(), nested_min_value.end());\n+    Map map_max_value(nested_max_value.begin(), nested_max_value.end());\n+\n+    min = std::move(map_min_value);\n+    max = std::move(map_max_value);\n }\n \n void ColumnMap::forEachSubcolumn(ColumnCallback callback)\ndiff --git a/src/DataTypes/DataTypeTuple.cpp b/src/DataTypes/DataTypeTuple.cpp\nindex 2261e776ea2e..5d2050c09e98 100644\n--- a/src/DataTypes/DataTypeTuple.cpp\n+++ b/src/DataTypes/DataTypeTuple.cpp\n@@ -138,7 +138,7 @@ void DataTypeTuple::serializeBinary(const IColumn & column, size_t row_num, Writ\n         idx_elem.second->serializeBinary(extractElementColumn(column, idx_elem.first), row_num, ostr);\n }\n \n-\n+/// Function must atomically insert values into tuple column\n template <typename F>\n static void addElementSafe(const DataTypes & elems, IColumn & column, F && impl)\n {\n@@ -151,7 +151,8 @@ static void addElementSafe(const DataTypes & elems, IColumn & column, F && impl)\n \n         // Check that all columns now have the same size.\n         size_t new_size = column.size();\n-        for (auto i : ext::range(1, ext::size(elems)))\n+\n+        for (auto i : ext::range(0, ext::size(elems)))\n         {\n             const auto & element_column = extractElementColumn(column, i);\n             if (element_column.size() != new_size)\n@@ -168,6 +169,7 @@ static void addElementSafe(const DataTypes & elems, IColumn & column, F && impl)\n         for (const auto & i : ext::range(0, ext::size(elems)))\n         {\n             auto & element_column = extractElementColumn(column, i);\n+\n             if (element_column.size() > old_size)\n                 element_column.popBack(1);\n         }\n@@ -215,17 +217,18 @@ void DataTypeTuple::deserializeText(IColumn & column, ReadBuffer & istr, const F\n             }\n             elems[i]->deserializeAsTextQuoted(extractElementColumn(column, i), istr, settings);\n         }\n-    });\n \n-    // Special format for one element tuple (1,)\n-    if (1 == elems.size())\n-    {\n+        // Special format for one element tuple (1,)\n+        if (1 == elems.size())\n+        {\n+            skipWhitespaceIfAny(istr);\n+            // Allow both (1) and (1,)\n+            checkChar(',', istr);\n+        }\n+\n         skipWhitespaceIfAny(istr);\n-        // Allow both (1) and (1,)\n-        checkChar(',', istr);\n-    }\n-    skipWhitespaceIfAny(istr);\n-    assertChar(')', istr);\n+        assertChar(')', istr);\n+    });\n }\n \n void DataTypeTuple::serializeTextJSON(const IColumn & column, size_t row_num, WriteBuffer & ostr, const FormatSettings & settings) const\n@@ -290,10 +293,10 @@ void DataTypeTuple::deserializeTextJSON(IColumn & column, ReadBuffer & istr, con\n                 auto & element_column = extractElementColumn(column, element_pos);\n                 elems[element_pos]->deserializeAsTextJSON(element_column, istr, settings);\n             }\n-        });\n \n-        skipWhitespaceIfAny(istr);\n-        assertChar('}', istr);\n+            skipWhitespaceIfAny(istr);\n+            assertChar('}', istr);\n+        });\n     }\n     else\n     {\n@@ -312,10 +315,10 @@ void DataTypeTuple::deserializeTextJSON(IColumn & column, ReadBuffer & istr, con\n                 }\n                 elems[i]->deserializeAsTextJSON(extractElementColumn(column, i), istr, settings);\n             }\n-        });\n \n-        skipWhitespaceIfAny(istr);\n-        assertChar(']', istr);\n+            skipWhitespaceIfAny(istr);\n+            assertChar(']', istr);\n+        });\n     }\n }\n \ndiff --git a/src/Interpreters/convertFieldToType.cpp b/src/Interpreters/convertFieldToType.cpp\nindex 73bf493fa657..1d93ef56deac 100644\n--- a/src/Interpreters/convertFieldToType.cpp\n+++ b/src/Interpreters/convertFieldToType.cpp\n@@ -276,6 +276,44 @@ Field convertFieldToTypeImpl(const Field & src, const IDataType & type, const ID\n             return have_unconvertible_element ? Field(Null()) : Field(res);\n         }\n     }\n+    else if (const DataTypeMap * type_map = typeid_cast<const DataTypeMap *>(&type))\n+    {\n+        if (src.getType() == Field::Types::Map)\n+        {\n+            const auto & key_type = *type_map->getKeyType();\n+            const auto & value_type = *type_map->getValueType();\n+\n+            const auto & map = src.get<Map>();\n+            size_t map_size = map.size();\n+\n+            Map res(map_size);\n+\n+            bool have_unconvertible_element = false;\n+\n+            for (size_t i = 0; i < map_size; ++i)\n+            {\n+                const auto & map_entry = map[i].get<Tuple>();\n+\n+                const auto & key = map_entry[0];\n+                const auto & value = map_entry[1];\n+\n+                Tuple updated_entry(2);\n+\n+                updated_entry[0] = convertFieldToType(key, key_type);\n+\n+                if (updated_entry[0].isNull() && !key_type.isNullable())\n+                    have_unconvertible_element = true;\n+\n+                updated_entry[1] = convertFieldToType(value, value_type);\n+                if (updated_entry[1].isNull() && !value_type.isNullable())\n+                    have_unconvertible_element = true;\n+\n+                res[i] = updated_entry;\n+            }\n+\n+            return have_unconvertible_element ? Field(Null()) : Field(res);\n+        }\n+    }\n     else if (const DataTypeAggregateFunction * agg_func_type = typeid_cast<const DataTypeAggregateFunction *>(&type))\n     {\n         if (src.getType() != Field::Types::AggregateFunctionState)\ndiff --git a/src/Processors/Formats/Impl/ConstantExpressionTemplate.cpp b/src/Processors/Formats/Impl/ConstantExpressionTemplate.cpp\nindex 1685688f02dd..4aed9979ab29 100644\n--- a/src/Processors/Formats/Impl/ConstantExpressionTemplate.cpp\n+++ b/src/Processors/Formats/Impl/ConstantExpressionTemplate.cpp\n@@ -209,6 +209,14 @@ class ReplaceLiteralsVisitor\n                 if (map.size() % 2)\n                     return false;\n             }\n+            else if (literal->value.getType() == Field::Types::Tuple)\n+            {\n+                const Tuple & tuple = literal->value.get<Tuple>();\n+\n+                for (const auto & value : tuple)\n+                    if (value.isNull())\n+                        return true;\n+            }\n \n             String column_name = \"_dummy_\" + std::to_string(replaced_literals.size());\n             replaced_literals.emplace_back(literal, column_name, force_nullable);\ndiff --git a/src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp b/src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp\nindex 34a4a98f16b8..7d911beb7418 100644\n--- a/src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp\n+++ b/src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp\n@@ -8,10 +8,14 @@\n #include <Formats/FormatFactory.h>\n #include <Common/FieldVisitors.h>\n #include <Core/Block.h>\n-#include <Common/typeid_cast.h>\n #include <common/find_symbols.h>\n+#include <Common/typeid_cast.h>\n+#include <Common/checkStackSize.h>\n #include <Parsers/ASTLiteral.h>\n #include <DataTypes/DataTypeNullable.h>\n+#include <DataTypes/DataTypeTuple.h>\n+#include <DataTypes/DataTypeArray.h>\n+#include <DataTypes/DataTypeMap.h>\n \n \n namespace DB\n@@ -181,6 +185,87 @@ bool ValuesBlockInputFormat::tryReadValue(IColumn & column, size_t column_idx)\n     }\n }\n \n+namespace\n+{\n+    void tryToReplaceNullFieldsInComplexTypesWithDefaultValues(Field & value, const IDataType & data_type)\n+    {\n+        checkStackSize();\n+\n+        WhichDataType type(data_type);\n+\n+        if (type.isTuple() && value.getType() == Field::Types::Tuple)\n+        {\n+            const DataTypeTuple & type_tuple = static_cast<const DataTypeTuple &>(data_type);\n+\n+            Tuple & tuple_value = value.get<Tuple>();\n+\n+            size_t src_tuple_size = tuple_value.size();\n+            size_t dst_tuple_size = type_tuple.getElements().size();\n+\n+            if (src_tuple_size != dst_tuple_size)\n+                throw Exception(fmt::format(\"Bad size of tuple. Expected size: {}, actual size: {}.\",\n+                    std::to_string(src_tuple_size), std::to_string(dst_tuple_size)), ErrorCodes::TYPE_MISMATCH);\n+\n+            for (size_t i = 0; i < src_tuple_size; ++i)\n+            {\n+                const auto & element_type = *(type_tuple.getElements()[i]);\n+\n+                if (tuple_value[i].isNull() && !element_type.isNullable())\n+                    tuple_value[i] = element_type.getDefault();\n+\n+                tryToReplaceNullFieldsInComplexTypesWithDefaultValues(tuple_value[i], element_type);\n+            }\n+        }\n+        else if (type.isArray() && value.getType() == Field::Types::Array)\n+        {\n+            const DataTypeArray & type_aray = static_cast<const DataTypeArray &>(data_type);\n+            const auto & element_type = *(type_aray.getNestedType());\n+\n+            if (element_type.isNullable())\n+                return;\n+\n+            Array & array_value = value.get<Array>();\n+            size_t array_value_size = array_value.size();\n+\n+            for (size_t i = 0; i < array_value_size; ++i)\n+            {\n+                if (array_value[i].isNull())\n+                    array_value[i] = element_type.getDefault();\n+\n+                tryToReplaceNullFieldsInComplexTypesWithDefaultValues(array_value[i], element_type);\n+            }\n+        }\n+        else if (type.isMap() && value.getType() == Field::Types::Map)\n+        {\n+            const DataTypeMap & type_map = static_cast<const DataTypeMap &>(data_type);\n+\n+            const auto & key_type = *type_map.getKeyType();\n+            const auto & value_type = *type_map.getValueType();\n+\n+            auto & map = value.get<Map>();\n+            size_t map_size = map.size();\n+\n+            for (size_t i = 0; i < map_size; ++i)\n+            {\n+                auto & map_entry = map[i].get<Tuple>();\n+\n+                auto & entry_key = map_entry[0];\n+                auto & entry_value = map_entry[1];\n+\n+                if (entry_key.isNull() && !key_type.isNullable())\n+                    entry_key = key_type.getDefault();\n+\n+                tryToReplaceNullFieldsInComplexTypesWithDefaultValues(entry_key, key_type);\n+\n+                if (entry_value.isNull() && !value_type.isNullable())\n+                    entry_value = value_type.getDefault();\n+\n+                tryToReplaceNullFieldsInComplexTypesWithDefaultValues(entry_value, value_type);\n+            }\n+        }\n+    }\n+}\n+\n bool ValuesBlockInputFormat::parseExpression(IColumn & column, size_t column_idx)\n {\n     const Block & header = getPort().getHeader();\n@@ -298,7 +383,13 @@ bool ValuesBlockInputFormat::parseExpression(IColumn & column, size_t column_idx\n     buf.position() = const_cast<char *>(token_iterator->begin);\n \n     std::pair<Field, DataTypePtr> value_raw = evaluateConstantExpression(ast, *context);\n-    Field value = convertFieldToType(value_raw.first, type, value_raw.second.get());\n+\n+    Field & expression_value = value_raw.first;\n+\n+    if (format_settings.null_as_default)\n+        tryToReplaceNullFieldsInComplexTypesWithDefaultValues(expression_value, type);\n+\n+    Field value = convertFieldToType(expression_value, type, value_raw.second.get());\n \n     /// Check that we are indeed allowed to insert a NULL.\n     if (value.isNull() && !type.isNullable())\ndiff --git a/src/Processors/Formats/Impl/ValuesBlockInputFormat.h b/src/Processors/Formats/Impl/ValuesBlockInputFormat.h\nindex 01deb2865bbe..a541870e4840 100644\n--- a/src/Processors/Formats/Impl/ValuesBlockInputFormat.h\n+++ b/src/Processors/Formats/Impl/ValuesBlockInputFormat.h\n@@ -48,7 +48,7 @@ class ValuesBlockInputFormat final : public IInputFormat\n         SingleExpressionEvaluation\n     };\n \n-    typedef std::vector<std::optional<ConstantExpressionTemplate>> ConstantExpressionTemplates;\n+    using ConstantExpressionTemplates = std::vector<std::optional<ConstantExpressionTemplate>>;\n \n     Chunk generate() override;\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01550_create_map_type.reference b/tests/queries/0_stateless/01550_create_map_type.reference\nindex 877199e92d56..d4794ac14592 100644\n--- a/tests/queries/0_stateless/01550_create_map_type.reference\n+++ b/tests/queries/0_stateless/01550_create_map_type.reference\n@@ -6,6 +6,8 @@ lisi\n female\n zhangsan\n gender\n+2020-01-01\t{1:0,2:1}\n+2020-01-01\t{1:0,2:-1}\n 1116\n 1117\n 1118\ndiff --git a/tests/queries/0_stateless/01550_create_map_type.sql b/tests/queries/0_stateless/01550_create_map_type.sql\nindex 695a40c42b4a..26bbf3c7ddea 100644\n--- a/tests/queries/0_stateless/01550_create_map_type.sql\n+++ b/tests/queries/0_stateless/01550_create_map_type.sql\n@@ -22,7 +22,21 @@ select a[b] from table_map;\n select b from table_map where a = map('name','lisi', 'gender', 'female');\n drop table if exists table_map;\n \n--- Int type\n+-- Big Integer type\n+\n+create table table_map (d DATE, m Map(Int8, UInt256)) ENGINE = MergeTree() order by d;\n+insert into table_map values ('2020-01-01', map(1, 0, 2, 1));\n+select * from table_map;\n+drop table table_map;\n+\n+-- Integer type\n+\n+create table table_map (d DATE, m Map(Int8, Int8)) ENGINE = MergeTree() order by d;\n+insert into table_map values ('2020-01-01', map(1, 0, 2, -1));\n+select * from table_map;\n+drop table table_map;\n+\n+-- Unsigned Int type\n drop table if exists table_map;\n create table table_map(a Map(UInt8, UInt64), b UInt8) Engine = MergeTree() order by b;\n insert into table_map select map(number, number+5), number from numbers(1111,4);\ndiff --git a/tests/queries/0_stateless/01715_tuple_insert_null_as_default.reference b/tests/queries/0_stateless/01715_tuple_insert_null_as_default.reference\nnew file mode 100644\nindex 000000000000..20f0fadfdcfc\n--- /dev/null\n+++ b/tests/queries/0_stateless/01715_tuple_insert_null_as_default.reference\n@@ -0,0 +1,15 @@\n+Tuple\n+(0,1)\n+(0,1)\n+Tuple nested in Array\n+[(0,2),(3,0),(0,4)]\n+[(0,2),(3,0),(0,4)]\n+Tuple nested in Array nested in Tuple\n+(0,[(0,2),(3,0),(0,4)])\n+(0,[(0,2),(3,0),(0,4)])\n+Tuple nested in Map\n+{'test':(0,1)}\n+{'test':(0,1)}\n+Tuple nested in Map nested in Tuple\n+(0,{'test':(0,1)})\n+(0,{'test':(0,1)})\ndiff --git a/tests/queries/0_stateless/01715_tuple_insert_null_as_default.sql b/tests/queries/0_stateless/01715_tuple_insert_null_as_default.sql\nnew file mode 100644\nindex 000000000000..d5fd9af22bd9\n--- /dev/null\n+++ b/tests/queries/0_stateless/01715_tuple_insert_null_as_default.sql\n@@ -0,0 +1,77 @@\n+SELECT 'Tuple';\n+\n+DROP TABLE IF EXISTS test_tuple;\n+CREATE TABLE test_tuple (value Tuple(UInt8, UInt8)) ENGINE=TinyLog;\n+\n+SET input_format_null_as_default = 1;\n+INSERT INTO test_tuple VALUES ((NULL, 1));\n+SELECT * FROM test_tuple;\n+\n+SET input_format_null_as_default = 0;\n+INSERT INTO test_tuple VALUES ((NULL, 2)); -- { clientError 53 }\n+SELECT * FROM test_tuple;\n+\n+DROP TABLE test_tuple;\n+\n+SELECT 'Tuple nested in Array';\n+\n+DROP TABLE IF EXISTS test_tuple_nested_in_array;\n+CREATE TABLE test_tuple_nested_in_array (value Array(Tuple(UInt8, UInt8))) ENGINE=TinyLog;\n+\n+SET input_format_null_as_default = 1;\n+INSERT INTO test_tuple_nested_in_array VALUES ([(NULL, 2), (3, NULL), (NULL, 4)]);\n+SELECT * FROM test_tuple_nested_in_array;\n+\n+SET input_format_null_as_default = 0;\n+INSERT INTO test_tuple_nested_in_array VALUES ([(NULL, 1)]); -- { clientError 53 }\n+SELECT * FROM test_tuple_nested_in_array;\n+\n+DROP TABLE test_tuple_nested_in_array;\n+\n+SELECT 'Tuple nested in Array nested in Tuple';\n+\n+DROP TABLE IF EXISTS test_tuple_nested_in_array_nested_in_tuple;\n+CREATE TABLE test_tuple_nested_in_array_nested_in_tuple (value Tuple(UInt8, Array(Tuple(UInt8, UInt8)))) ENGINE=TinyLog;\n+\n+SET input_format_null_as_default = 1;\n+INSERT INTO test_tuple_nested_in_array_nested_in_tuple VALUES ( (NULL, [(NULL, 2), (3, NULL), (NULL, 4)]) );\n+SELECT * FROM test_tuple_nested_in_array_nested_in_tuple;\n+\n+SET input_format_null_as_default = 0;\n+INSERT INTO test_tuple_nested_in_array_nested_in_tuple VALUES ( (NULL, [(NULL, 1)]) ); -- { clientError 53 }\n+SELECT * FROM test_tuple_nested_in_array_nested_in_tuple;\n+\n+DROP TABLE test_tuple_nested_in_array_nested_in_tuple;\n+\n+SELECT 'Tuple nested in Map';\n+\n+SET allow_experimental_map_type = 1;\n+\n+DROP TABLE IF EXISTS test_tuple_nested_in_map;\n+CREATE TABLE test_tuple_nested_in_map (value Map(String, Tuple(UInt8, UInt8))) ENGINE=TinyLog;\n+\n+SET input_format_null_as_default = 1;\n+INSERT INTO test_tuple_nested_in_map VALUES (map('test', (NULL, 1)));\n+\n+SELECT * FROM test_tuple_nested_in_map;\n+\n+SET input_format_null_as_default = 0;\n+INSERT INTO test_tuple_nested_in_map VALUES (map('test', (NULL, 1))); -- { clientError 53 }\n+SELECT * FROM test_tuple_nested_in_map;\n+\n+DROP TABLE test_tuple_nested_in_map;\n+\n+SELECT 'Tuple nested in Map nested in Tuple';\n+\n+DROP TABLE IF EXISTS test_tuple_nested_in_map_nested_in_tuple;\n+CREATE TABLE test_tuple_nested_in_map_nested_in_tuple (value Tuple(UInt8, Map(String, Tuple(UInt8, UInt8)))) ENGINE=TinyLog;\n+\n+SET input_format_null_as_default = 1;\n+INSERT INTO test_tuple_nested_in_map_nested_in_tuple VALUES ( (NULL, map('test', (NULL, 1))) );\n+SELECT * FROM test_tuple_nested_in_map_nested_in_tuple;\n+\n+SET input_format_null_as_default = 0;\n+INSERT INTO test_tuple_nested_in_map_nested_in_tuple VALUES ( (NULL, map('test', (NULL, 1))) ); -- { clientError 53 }\n+SELECT * FROM test_tuple_nested_in_map_nested_in_tuple;\n+\n+DROP TABLE test_tuple_nested_in_map_nested_in_tuple;\n",
  "problem_statement": "Map Type: can't insert UInt256 value\nCan't insert `115792089237316195423570985008687907853269984665640564039457584007913129639935` value\r\ninto `Map(Int8, UInt256)` column.\r\n \r\n```\r\n Feb 21,2021 7:42:41         \u27e5  Example UInt256\r\n                                  Check what values we can insert into map type column with value integer.\r\n                                  Requirements\r\n                                    RQ.SRS-018.ClickHouse.Map.DataType.Value.Integer\r\n                                      version 1.0\r\n                                  Arguments\r\n                                    type\r\n                                      Map(Int8, UInt256)\r\n                                    data\r\n                                      ('2020-01-01', map(1,0,2,115792089237316195423570985008687907853269984665640564039457584007913129639935))\r\n                                    output\r\n                                      {\"d\":\"2020-01-01\",\"m\":{1:\"0\",2:\"115792089237316195423570985008687907853269984665640564039457584007913129639935\"}}\r\n Feb 21,2021 7:42:41           \u27e5  Given table definition with Map(Int8, UInt256), flags:MANDATORY\r\n               400us           \u27e5\u27e4 OK table definition with Map(Int8, UInt256), /map type/tests/table map with value integer/UInt256/table definition with Map(Int8, UInt256)\r\n Feb 21,2021 7:42:41           \u27e5  And I create a table, flags:MANDATORY\r\n                                    CREATE TABLE {name} (d DATE, m Map(Int8, UInt256)) ENGINE = MergeTree() PARTITION BY m ORDER BY d\r\n Feb 21,2021 7:42:41             \u27e5  And I have a table_map_with_value_integer_49ab6e1c_7442_11eb_869f_096b24b409b0 table, flags:MANDATORY\r\n Feb 21,2021 7:42:41               \u27e5  By executing command\r\n                                        echo -e \"CREATE TABLE table_map_with_value_integer_49ab6e1c_7442_11eb_869f_096b24b409b0 (d DATE, m Map(Int8, UInt256)) ENGINE = MergeTree() PARTITION BY m ORDER BY d\" | clickhouse client -n --allow_experimental_map_type \"1\"\r\n                 2ms                    [clickhouse1] bash# echo -e \"CREATE TABLE table_map_with_value_integer_49ab6e1c_7442_11eb_869f_096b24b409b0 (d DATE, m Map(Int8, UInt256)) ENGINE = MergeTree() PARTITION BY m ORDER BY d\" | clickhouse client -n --allow_experimental_map_type \"1\"\r\n                37ms                    [clickhouse1] bash# echo $?\r\n                37ms                    [clickhouse1] 0\r\n                37ms                    [clickhouse1] bash#\r\n                37ms               \u27e5\u27e4 OK executing command, /map type/tests/table map with value integer/UInt256/I create a table/I have a table_map_with_value_integer_49ab6e1c_7442_11eb_869f_096b24b409b0 table/executing command\r\n Feb 21,2021 7:42:41               \u27e5  Then check if output has exception\r\n               482us               \u27e5\u27e4 OK check if output has exception, /map type/tests/table map with value integer/UInt256/I create a table/I have a table_map_with_value_integer_49ab6e1c_7442_11eb_869f_096b24b409b0 table/check if output has exception\r\n                38ms             \u27e5\u27e4 OK I have a table_map_with_value_integer_49ab6e1c_7442_11eb_869f_096b24b409b0 table, /map type/tests/table map with value integer/UInt256/I create a table/I have a table_map_with_value_integer_49ab6e1c_7442_11eb_869f_096b24b409b0 table\r\n                39ms           \u27e5\u27e4 OK I create a table, /map type/tests/table map with value integer/UInt256/I create a table\r\n Feb 21,2021 7:42:41           \u27e5  When I insert data\r\n                                    ('2020-01-01', map(1,0,2,115792089237316195423570985008687907853269984665640564039457584007913129639935))\r\n Feb 21,2021 7:42:41             \u27e5  By executing command\r\n                                      echo -e \"INSERT INTO table_map_with_value_integer_49ab6e1c_7442_11eb_869f_096b24b409b0 VALUES ('2020-01-01', map(1,0,2,115792089237316195423570985008687907853269984665640564039457584007913129639935))\" | clickhouse client -n --allow_experimental_map_type \"1\"\r\n                 2ms                  [clickhouse1] bash# echo -e \"INSERT INTO table_map_with_value_integer_49ab6e1c_7442_11eb_869f_096b24b409b0 VALUES ('2020-01-01', map(1,0,2,115792089237316195423570985008687907853269984665640564039457584007913129639935))\" | clickhouse client -n --allow_experimental_map_type \"1\"\r\n                59ms                  [clickhouse1] Error on processing query 'INSERT INTO table_map_with_value_integer_49ab6e1c_7442_11eb_869f_096b24b409b0 VALUES ('2020-01-01', map(1,0,2,115792089237316195423570985008687907853269984665640564039457584007913129639935))':\r\n                68ms                  [clickhouse1] Code: 53, e.displayText() = DB::Exception: Type mismatch in IN or VALUES section. Expected: Map(Int8,UInt256). Got: Map: data for INSERT was parsed from query, Stack trace (when copying this message, always include the lines below):\r\n                68ms                  [clickhouse1] \r\n                68ms                  [clickhouse1] 0. ? @ 0xef62fae in /usr/bin/clickhouse\r\n                68ms                  [clickhouse1] 1. DB::convertFieldToType(DB::Field const&, DB::IDataType const&, DB::IDataType const*) @ 0xef61d24 in /usr/bin/clickhouse\r\n                68ms                  [clickhouse1] 2. DB::ValuesBlockInputFormat::parseExpression(DB::IColumn&, unsigned long) @ 0xf7f274b in /usr/bin/clickhouse\r\n                68ms                  [clickhouse1] 3. DB::ValuesBlockInputFormat::readRow(std::__1::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&, unsigned long) @ 0xf7f0398 in /usr/bin/clickhouse\r\n                68ms                  [clickhouse1] 4. DB::ValuesBlockInputFormat::generate() @ 0xf7ef73c in /usr/bin/clickhouse\r\n                68ms                  [clickhouse1] 5. DB::ISource::tryGenerate() @ 0xf6df1b5 in /usr/bin/clickhouse\r\n                69ms                  [clickhouse1] 6. DB::ISource::work() @ 0xf6deeca in /usr/bin/clickhouse\r\n                69ms                  [clickhouse1] 7. DB::InputStreamFromInputFormat::readImpl() @ 0xce6517f in /usr/bin/clickhouse\r\n                69ms                  [clickhouse1] 8. DB::IBlockInputStream::read() @ 0xe710385 in /usr/bin/clickhouse\r\n                69ms                  [clickhouse1] 9. DB::AsynchronousBlockInputStream::calculate() @ 0xe70c701 in /usr/bin/clickhouse\r\n                69ms                  [clickhouse1] 10. ? @ 0xe70cf77 in /usr/bin/clickhouse\r\n                69ms                  [clickhouse1] 11. ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::__1::__list_iterator<ThreadFromGlobalPool, void*>) @ 0x8528a48 in /usr/bin/clickhouse\r\n                69ms                  [clickhouse1] 12. ThreadFromGlobalPool::ThreadFromGlobalPool<void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()>(void&&, void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()&&...)::'lambda'()::operator()() @ 0x852a9ff in /usr/bin/clickhouse\r\n                69ms                  [clickhouse1] 13. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x852601f in /usr/bin/clickhouse\r\n                69ms                  [clickhouse1] 14. ? @ 0x8529ab3 in /usr/bin/clickhouse\r\n                69ms                  [clickhouse1] 15. start_thread @ 0x9609 in /usr/lib/x86_64-linux-gnu/libpthread-2.31.so\r\n                69ms                  [clickhouse1] 16. clone @ 0x122293 in /usr/lib/x86_64-linux-gnu/libc-2.31.so\r\n                69ms                  [clickhouse1]  (version 21.3.1.5944 (official build))\r\n                72ms                  [clickhouse1] bash# echo $?\r\n                72ms                  [clickhouse1] 53\r\n                73ms                  [clickhouse1] bash#\r\n```\r\n\r\nSimilar when trying to insert the same value as the key into `Map(UInt256, UInt8)` column\r\n\r\n```\r\nFeb 21,2021 7:46:05         \u27e5  Example UInt256\r\n                                  Check what values we can insert into map type column with key integer.\r\n                                  Requirements\r\n                                    RQ.SRS-018.ClickHouse.Map.DataType.Key.Integer\r\n                                      version 1.0\r\n                                  Arguments\r\n                                    type\r\n                                      Map(UInt256, Int8)\r\n                                    data\r\n                                      ('2020-01-01', map(0,1,115792089237316195423570985008687907853269984665640564039457584007913129639935,1))\r\n                                    output\r\n                                      {\"d\":\"2020-01-01\",\"m\":{\"0\":1,\"115792089237316195423570985008687907853269984665640564039457584007913129639935\":1}}\r\n Feb 21,2021 7:46:05           \u27e5  Given table definition with Map(UInt256, Int8), flags:MANDATORY\r\n               414us           \u27e5\u27e4 OK table definition with Map(UInt256, Int8), /map type/tests/table map with key integer/UInt256/table definition with Map(UInt256, Int8)\r\n Feb 21,2021 7:46:05           \u27e5  And I create a table, flags:MANDATORY\r\n                                    CREATE TABLE {name} (d DATE, m Map(UInt256, Int8)) ENGINE = MergeTree() PARTITION BY m ORDER BY d\r\n Feb 21,2021 7:46:05             \u27e5  And I have a table_map_with_key_integer_c318542c_7442_11eb_869f_096b24b409b0 table, flags:MANDATORY\r\n Feb 21,2021 7:46:05               \u27e5  By executing command\r\n                                        echo -e \"CREATE TABLE table_map_with_key_integer_c318542c_7442_11eb_869f_096b24b409b0 (d DATE, m Map(UInt256, Int8)) ENGINE = MergeTree() PARTITION BY m ORDER BY d\" | clickhouse client -n --allow_experimental_map_type \"1\"\r\n                 3ms                    [clickhouse1] bash# echo -e \"CREATE TABLE table_map_with_key_integer_c318542c_7442_11eb_869f_096b24b409b0 (d DATE, m Map(UInt256, Int8)) ENGINE = MergeTree() PARTITION BY m ORDER BY d\" | clickhouse client -n --allow_experimental_map_type \"1\"\r\n                40ms                    [clickhouse1] bash# echo $?\r\n                41ms                    [clickhouse1] 0\r\n                41ms                    [clickhouse1] bash#\r\n                41ms               \u27e5\u27e4 OK executing command, /map type/tests/table map with key integer/UInt256/I create a table/I have a table_map_with_key_integer_c318542c_7442_11eb_869f_096b24b409b0 table/executing command\r\n Feb 21,2021 7:46:05               \u27e5  Then check if output has exception\r\n               591us               \u27e5\u27e4 OK check if output has exception, /map type/tests/table map with key integer/UInt256/I create a table/I have a table_map_with_key_integer_c318542c_7442_11eb_869f_096b24b409b0 table/check if output has exception\r\n                43ms             \u27e5\u27e4 OK I have a table_map_with_key_integer_c318542c_7442_11eb_869f_096b24b409b0 table, /map type/tests/table map with key integer/UInt256/I create a table/I have a table_map_with_key_integer_c318542c_7442_11eb_869f_096b24b409b0 table\r\n                43ms           \u27e5\u27e4 OK I create a table, /map type/tests/table map with key integer/UInt256/I create a table\r\n Feb 21,2021 7:46:05           \u27e5  When I insert data\r\n                                    ('2020-01-01', map(0,1,115792089237316195423570985008687907853269984665640564039457584007913129639935,1))\r\n Feb 21,2021 7:46:05             \u27e5  By executing command\r\n                                      echo -e \"INSERT INTO table_map_with_key_integer_c318542c_7442_11eb_869f_096b24b409b0 VALUES ('2020-01-01', map(0,1,115792089237316195423570985008687907853269984665640564039457584007913129639935,1))\" | clickhouse client -n --allow_experimental_map_type \"1\"\r\n                 2ms                  [clickhouse1] bash# echo -e \"INSERT INTO table_map_with_key_integer_c318542c_7442_11eb_869f_096b24b409b0 VALUES ('2020-01-01', map(0,1,115792089237316195423570985008687907853269984665640564039457584007913129639935,1))\" | clickhouse client -n --allow_experimental_map_type \"1\"\r\n                52ms                  [clickhouse1] Error on processing query 'INSERT INTO table_map_with_key_integer_c318542c_7442_11eb_869f_096b24b409b0 VALUES ('2020-01-01', map(0,1,115792089237316195423570985008687907853269984665640564039457584007913129639935,1))':\r\n                52ms                  [clickhouse1] Code: 53, e.displayText() = DB::Exception: Type mismatch in IN or VALUES section. Expected: Map(UInt256,Int8). Got: Map: data for INSERT was parsed from query, Stack trace (when copying this message, always include the lines below):\r\n                52ms                  [clickhouse1] \r\n                52ms                  [clickhouse1] 0. ? @ 0xef62fae in /usr/bin/clickhouse\r\n                52ms                  [clickhouse1] 1. DB::convertFieldToType(DB::Field const&, DB::IDataType const&, DB::IDataType const*) @ 0xef61d24 in /usr/bin/clickhouse\r\n                52ms                  [clickhouse1] 2. DB::ValuesBlockInputFormat::parseExpression(DB::IColumn&, unsigned long) @ 0xf7f274b in /usr/bin/clickhouse\r\n                52ms                  [clickhouse1] 3. DB::ValuesBlockInputFormat::readRow(std::__1::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&, unsigned long) @ 0xf7f0398 in /usr/bin/clickhouse\r\n                52ms                  [clickhouse1] 4. DB::ValuesBlockInputFormat::generate() @ 0xf7ef73c in /usr/bin/clickhouse\r\n                52ms                  [clickhouse1] 5. DB::ISource::tryGenerate() @ 0xf6df1b5 in /usr/bin/clickhouse\r\n                52ms                  [clickhouse1] 6. DB::ISource::work() @ 0xf6deeca in /usr/bin/clickhouse\r\n                53ms                  [clickhouse1] 7. DB::InputStreamFromInputFormat::readImpl() @ 0xce6517f in /usr/bin/clickhouse\r\n                53ms                  [clickhouse1] 8. DB::IBlockInputStream::read() @ 0xe710385 in /usr/bin/clickhouse\r\n                53ms                  [clickhouse1] 9. DB::AsynchronousBlockInputStream::calculate() @ 0xe70c701 in /usr/bin/clickhouse\r\n                53ms                  [clickhouse1] 10. ? @ 0xe70cf77 in /usr/bin/clickhouse\r\n                53ms                  [clickhouse1] 11. ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::__1::__list_iterator<ThreadFromGlobalPool, void*>) @ 0x8528a48 in /usr/bin/clickhouse\r\n                53ms                  [clickhouse1] 12. ThreadFromGlobalPool::ThreadFromGlobalPool<void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()>(void&&, void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()&&...)::'lambda'()::operator()() @ 0x852a9ff in /usr/bin/clickhouse\r\n                53ms                  [clickhouse1] 13. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x852601f in /usr/bin/clickhouse\r\n                53ms                  [clickhouse1] 14. ? @ 0x8529ab3 in /usr/bin/clickhouse\r\n                53ms                  [clickhouse1] 15. start_thread @ 0x9609 in /usr/lib/x86_64-linux-gnu/libpthread-2.31.so\r\n                53ms                  [clickhouse1] 16. clone @ 0x122293 in /usr/lib/x86_64-linux-gnu/libc-2.31.so\r\n                53ms                  [clickhouse1]  (version 21.3.1.5944 (official build))\r\n                57ms                  [clickhouse1] bash# echo $?\r\n                57ms                  [clickhouse1] 53\r\n                58ms                  [clickhouse1] bash#\r\n```\r\n\r\n**Expected behavior**\r\nIt should work.\nMap Type: can't insert negative int values \n**Describe the bug**\r\nCan't insert negative values into `Map(Int8, Int8)` column either as keys or values.\r\nThe same when trying to insert negative values into `Map(Int8, Int16)`, `Map(Int8, Int32)` or `Map(Int8, Int64)`.\r\nSimilar problem when trying to insert negative keys into `Map(Int16, Int8)`, `Map(Int32, Int8)` or `Map(Int64, Int8)`.\r\n \r\n```\r\nFeb 21,2021 7:49:40         \u27e5  Example Int8\r\n                                  Check what values we can insert into map type column with value integer.\r\n                                  Requirements\r\n                                    RQ.SRS-018.ClickHouse.Map.DataType.Value.Integer\r\n                                      version 1.0\r\n                                  Arguments\r\n                                    type\r\n                                      Map(Int8, Int8)\r\n                                    data\r\n                                      ('2020-01-01', map(1,127,2,0,3,-128))\r\n                                    output\r\n                                      {\"d\":\"2020-01-01\",\"m\":{1:127,2:0,3:-128}}\r\n Feb 21,2021 7:49:40           \u27e5  Given table definition with Map(Int8, Int8), flags:MANDATORY\r\n               302us           \u27e5\u27e4 OK table definition with Map(Int8, Int8), /map type/tests/table map with value integer/Int8/table definition with Map(Int8, Int8)\r\n Feb 21,2021 7:49:40           \u27e5  And I create a table, flags:MANDATORY\r\n                                    CREATE TABLE {name} (d DATE, m Map(Int8, Int8)) ENGINE = MergeTree() PARTITION BY m ORDER BY d\r\n Feb 21,2021 7:49:40             \u27e5  And I have a table_map_with_value_integer_43276a40_7443_11eb_869f_096b24b409b0 table, flags:MANDATORY\r\n Feb 21,2021 7:49:40               \u27e5  By executing command\r\n                                        echo -e \"CREATE TABLE table_map_with_value_integer_43276a40_7443_11eb_869f_096b24b409b0 (d DATE, m Map(Int8, Int8)) ENGINE = MergeTree() PARTITION BY m ORDER BY d\" | clickhouse client -n --allow_experimental_map_type \"1\"\r\n                 3ms                    [clickhouse1] bash# echo -e \"CREATE TABLE table_map_with_value_integer_43276a40_7443_11eb_869f_096b24b409b0 (d DATE, m Map(Int8, Int8)) ENGINE = MergeTree() PARTITION BY m ORDER BY d\" | clickhouse client -n --allow_experimental_map_type \"1\"\r\n                41ms                    [clickhouse1] bash# echo $?\r\n                41ms                    [clickhouse1] 0\r\n                42ms                    [clickhouse1] bash#\r\n                42ms               \u27e5\u27e4 OK executing command, /map type/tests/table map with value integer/Int8/I create a table/I have a table_map_with_value_integer_43276a40_7443_11eb_869f_096b24b409b0 table/executing command\r\n Feb 21,2021 7:49:40               \u27e5  Then check if output has exception\r\n               829us               \u27e5\u27e4 OK check if output has exception, /map type/tests/table map with value integer/Int8/I create a table/I have a table_map_with_value_integer_43276a40_7443_11eb_869f_096b24b409b0 table/check if output has exception\r\n                44ms             \u27e5\u27e4 OK I have a table_map_with_value_integer_43276a40_7443_11eb_869f_096b24b409b0 table, /map type/tests/table map with value integer/Int8/I create a table/I have a table_map_with_value_integer_43276a40_7443_11eb_869f_096b24b409b0 table\r\n                44ms           \u27e5\u27e4 OK I create a table, /map type/tests/table map with value integer/Int8/I create a table\r\n Feb 21,2021 7:49:40           \u27e5  When I insert data\r\n                                    ('2020-01-01', map(1,127,2,0,3,-128))\r\n Feb 21,2021 7:49:40             \u27e5  By executing command\r\n                                      echo -e \"INSERT INTO table_map_with_value_integer_43276a40_7443_11eb_869f_096b24b409b0 VALUES ('2020-01-01', map(1,127,2,0,3,-128))\" | clickhouse client -n --allow_experimental_map_type \"1\"\r\n                 5ms                  [clickhouse1] bash# echo -e \"INSERT INTO table_map_with_value_integer_43276a40_7443_11eb_869f_096b24b409b0 VALUES ('2020-01-01', map(1,127,2,0,3,-128))\" | clickhouse client -n --allow_experimental_map_type \"1\"\r\n                50ms                  [clickhouse1] Error on processing query 'INSERT INTO table_map_with_value_integer_43276a40_7443_11eb_869f_096b24b409b0 VALUES ('2020-01-01', map(1,127,2,0,3,-128))':\r\n                51ms                  [clickhouse1] Code: 53, e.displayText() = DB::Exception: Type mismatch in IN or VALUES section. Expected: Map(Int8,Int8). Got: Map: data for INSERT was parsed from query, Stack trace (when copying this message, always include the lines below):\r\n                51ms                  [clickhouse1] \r\n                51ms                  [clickhouse1] 0. ? @ 0xef62fae in /usr/bin/clickhouse\r\n                51ms                  [clickhouse1] 1. DB::convertFieldToType(DB::Field const&, DB::IDataType const&, DB::IDataType const*) @ 0xef61d24 in /usr/bin/clickhouse\r\n                51ms                  [clickhouse1] 2. DB::ValuesBlockInputFormat::parseExpression(DB::IColumn&, unsigned long) @ 0xf7f274b in /usr/bin/clickhouse\r\n                51ms                  [clickhouse1] 3. DB::ValuesBlockInputFormat::readRow(std::__1::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&, unsigned long) @ 0xf7f0398 in /usr/bin/clickhouse\r\n                51ms                  [clickhouse1] 4. DB::ValuesBlockInputFormat::generate() @ 0xf7ef73c in /usr/bin/clickhouse\r\n                51ms                  [clickhouse1] 5. DB::ISource::tryGenerate() @ 0xf6df1b5 in /usr/bin/clickhouse\r\n                51ms                  [clickhouse1] 6. DB::ISource::work() @ 0xf6deeca in /usr/bin/clickhouse\r\n                51ms                  [clickhouse1] 7. DB::InputStreamFromInputFormat::readImpl() @ 0xce6517f in /usr/bin/clickhouse\r\n                51ms                  [clickhouse1] 8. DB::IBlockInputStream::read() @ 0xe710385 in /usr/bin/clickhouse\r\n                51ms                  [clickhouse1] 9. DB::AsynchronousBlockInputStream::calculate() @ 0xe70c701 in /usr/bin/clickhouse\r\n                51ms                  [clickhouse1] 10. ? @ 0xe70cf77 in /usr/bin/clickhouse\r\n                51ms                  [clickhouse1] 11. ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::__1::__list_iterator<ThreadFromGlobalPool, void*>) @ 0x8528a48 in /usr/bin/clickhouse\r\n                52ms                  [clickhouse1] 12. ThreadFromGlobalPool::ThreadFromGlobalPool<void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()>(void&&, void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()&&...)::'lambda'()::operator()() @ 0x852a9ff in /usr/bin/clickhouse\r\n                52ms                  [clickhouse1] 13. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x852601f in /usr/bin/clickhouse\r\n                52ms                  [clickhouse1] 14. ? @ 0x8529ab3 in /usr/bin/clickhouse\r\n                52ms                  [clickhouse1] 15. start_thread @ 0x9609 in /usr/lib/x86_64-linux-gnu/libpthread-2.31.so\r\n                52ms                  [clickhouse1] 16. clone @ 0x122293 in /usr/lib/x86_64-linux-gnu/libc-2.31.so\r\n                52ms                  [clickhouse1]  (version 21.3.1.5944 (official build))\r\n                56ms                  [clickhouse1] bash# echo $?\r\n                56ms                  [clickhouse1] 53\r\n                57ms                  [clickhouse1] bash#\r\n```\r\n\r\n**Expected behavior**\r\nIt should work.\r\n\nError while trying to insert a tuple containing NULL into a tuple column of non-nullable types\n```\r\n$ ~/arc/build/clickhouse/programs/clickhouse client\r\nClickHouse client version 21.2.1.1-arcadia.\r\nConnecting to localhost:9000 as user default.\r\nConnected to ClickHouse server version 21.2.1 revision 54447.\r\n\r\nmax42-dev.sas.yp-c.yandex.net :) create table t(a Tuple(UInt8, UInt8)) engine = Log()\r\n\r\nCREATE TABLE t\r\n(\r\n    `a` Tuple(UInt8, UInt8)\r\n)\r\nENGINE = Log\r\n\r\nQuery id: b49dbb5d-d2a9-4c99-b90e-00c60edf2103\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.005 sec. \r\n\r\nmax42-dev.sas.yp-c.yandex.net :) insert into t values ((NULL, 42))\r\n\r\nINSERT INTO t VALUES\r\n\r\nQuery id: 318d6f3e-f3bc-467c-85ff-62da908230dd\r\n\r\nLogical error: 'Unexpected literal type inside Array: Nothing. It's a bug'.\r\nAborted (core dumped)\r\n```\r\n\r\nThis is CH similar to one from Arcadia r7788360 (~fresh master version from GH).\r\n\r\n(you don't have to strictly follow this form)\r\n\n",
  "hints_text": "\n\n@kitaisreal have you checked what was the problem?",
  "created_at": "2021-02-15T18:53:59Z"
}