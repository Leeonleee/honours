{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 36353,
  "instance_id": "ClickHouse__ClickHouse-36353",
  "issue_numbers": [
    "36334"
  ],
  "base_commit": "89deaf0af19333c5883c53e4c69d49120ad38dd7",
  "patch": "diff --git a/src/TableFunctions/TableFunctionNull.cpp b/src/TableFunctions/TableFunctionNull.cpp\nindex 63e496ecd0c0..cb51799a4a70 100644\n--- a/src/TableFunctions/TableFunctionNull.cpp\n+++ b/src/TableFunctions/TableFunctionNull.cpp\n@@ -21,13 +21,16 @@ void TableFunctionNull::parseArguments(const ASTPtr & ast_function, ContextPtr c\n {\n     const auto * function = ast_function->as<ASTFunction>();\n     if (!function || !function->arguments)\n-        throw Exception(\"Table function '\" + getName() + \"' requires 'structure'.\", ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH);\n+        throw Exception(\"Table function '\" + getName() + \"' requires 'structure'\", ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH);\n \n     const auto & arguments = function->arguments->children;\n-    if (arguments.size() != 1)\n-        throw Exception(\"Table function '\" + getName() + \"' requires 'structure'.\", ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH);\n+    if (!arguments.empty() && arguments.size() != 1)\n+        throw Exception(\n+            \"Table function '\" + getName() + \"' requires 'structure' argument or empty argument\",\n+            ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH);\n \n-    structure = evaluateConstantExpressionOrIdentifierAsLiteral(arguments[0], context)->as<ASTLiteral>()->value.safeGet<String>();\n+    if (!arguments.empty())\n+        structure = evaluateConstantExpressionOrIdentifierAsLiteral(arguments[0], context)->as<ASTLiteral>()->value.safeGet<String>();\n }\n \n ColumnsDescription TableFunctionNull::getActualTableStructure(ContextPtr context) const\n@@ -37,7 +40,11 @@ ColumnsDescription TableFunctionNull::getActualTableStructure(ContextPtr context\n \n StoragePtr TableFunctionNull::executeImpl(const ASTPtr & /*ast_function*/, ContextPtr context, const std::string & table_name, ColumnsDescription /*cached_columns*/) const\n {\n-    auto columns = getActualTableStructure(context);\n+    ColumnsDescription columns;\n+    if (structure != \"auto\")\n+        columns = getActualTableStructure(context);\n+    else if (!structure_hint.empty())\n+        columns = structure_hint;\n     auto res = StorageNull::create(StorageID(getDatabaseName(), table_name), columns, ConstraintsDescription(), String{});\n     res->startup();\n     return res;\ndiff --git a/src/TableFunctions/TableFunctionNull.h b/src/TableFunctions/TableFunctionNull.h\nindex 6734fb8efb6e..329315e00c9d 100644\n--- a/src/TableFunctions/TableFunctionNull.h\n+++ b/src/TableFunctions/TableFunctionNull.h\n@@ -16,6 +16,10 @@ class TableFunctionNull : public ITableFunction\n public:\n     static constexpr auto name = \"null\";\n     std::string getName() const override { return name; }\n+\n+    bool needStructureHint() const override { return structure == \"auto\"; }\n+\n+    void setStructureHint(const ColumnsDescription & structure_hint_) override { structure_hint = structure_hint_; }\n private:\n     StoragePtr executeImpl(const ASTPtr & ast_function, ContextPtr context, const String & table_name, ColumnsDescription cached_columns) const override;\n     const char * getStorageTypeName() const override { return \"Null\"; }\n@@ -23,7 +27,8 @@ class TableFunctionNull : public ITableFunction\n     void parseArguments(const ASTPtr & ast_function, ContextPtr context) override;\n     ColumnsDescription getActualTableStructure(ContextPtr context) const override;\n \n-    String structure;\n+    String structure = \"auto\";\n+    ColumnsDescription structure_hint;\n };\n \n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02267_type_inference_for_insert_into_function_null.reference b/tests/queries/0_stateless/02267_type_inference_for_insert_into_function_null.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/02267_type_inference_for_insert_into_function_null.sql b/tests/queries/0_stateless/02267_type_inference_for_insert_into_function_null.sql\nnew file mode 100644\nindex 000000000000..de8332442c74\n--- /dev/null\n+++ b/tests/queries/0_stateless/02267_type_inference_for_insert_into_function_null.sql\n@@ -0,0 +1,6 @@\n+INSERT INTO function null() SELECT 1;\n+INSERT INTO function null() SELECT number FROM numbers(10);\n+INSERT INTO function null() SELECT number, toString(number) FROM numbers(10);\n+INSERT INTO function null('auto') SELECT 1;\n+INSERT INTO function null('auto') SELECT number FROM numbers(10);\n+INSERT INTO function null('auto') SELECT number, toString(number) FROM numbers(10);\n",
  "problem_statement": "Type inference for INSERT INTO FUNCTION null()\n**Use case**\r\n\r\n`INSERT INTO FUNCTION null() SELECT * FROM ...`\r\n\r\n```\r\nTable function 'null' requires 'structure'.\r\n```\n",
  "hints_text": "",
  "created_at": "2022-04-17T15:09:43Z",
  "modified_files": [
    "src/TableFunctions/TableFunctionNull.cpp",
    "src/TableFunctions/TableFunctionNull.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02267_type_inference_for_insert_into_function_null.sql"
  ]
}