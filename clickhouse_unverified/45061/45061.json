{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 45061,
  "instance_id": "ClickHouse__ClickHouse-45061",
  "issue_numbers": [
    "44588"
  ],
  "base_commit": "b22b51213fa785e94d3f076734e23b1a5b126e05",
  "patch": "diff --git a/src/Dictionaries/RangeHashedDictionary.cpp b/src/Dictionaries/RangeHashedDictionary.cpp\nindex 95bcd1076d5d..485897b22459 100644\n--- a/src/Dictionaries/RangeHashedDictionary.cpp\n+++ b/src/Dictionaries/RangeHashedDictionary.cpp\n@@ -688,7 +688,9 @@ void RangeHashedDictionary<dictionary_key_type>::updateData()\n         static constexpr size_t range_columns_size = 2;\n \n         auto pipe = source_ptr->loadUpdatedAll();\n-        mergeBlockWithPipe<dictionary_key_type>(\n+\n+        /// Use complex dictionary key type to count range columns as part of complex primary key during update\n+        mergeBlockWithPipe<DictionaryKeyType::Complex>(\n             dict_struct.getKeysSize() + range_columns_size,\n             *update_field_loaded_block,\n             std::move(pipe));\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02525_range_hashed_dictionary_update_field.reference b/tests/queries/0_stateless/02525_range_hashed_dictionary_update_field.reference\nnew file mode 100644\nindex 000000000000..4b53cc516233\n--- /dev/null\n+++ b/tests/queries/0_stateless/02525_range_hashed_dictionary_update_field.reference\n@@ -0,0 +1,11 @@\n+1\t101\t200\t2022-12-26 11:38:34\n+1\t0\t100\t2022-12-26 11:38:34\n+2\t1000\t10000\t2022-12-26 11:38:34\n+2\t0\t999\t2022-12-26 11:38:34\n+2022-12-26 11:38:34\n+--\n+1\t101\t200\t2022-12-26 11:38:34\n+1\t0\t100\t2022-12-26 11:38:34\n+2\t1000\t10000\t2022-12-26 11:38:34\n+2\t0\t999\t2022-12-26 11:38:34\n+2022-12-26 11:38:34\ndiff --git a/tests/queries/0_stateless/02525_range_hashed_dictionary_update_field.sql b/tests/queries/0_stateless/02525_range_hashed_dictionary_update_field.sql\nnew file mode 100644\nindex 000000000000..2534333afcd6\n--- /dev/null\n+++ b/tests/queries/0_stateless/02525_range_hashed_dictionary_update_field.sql\n@@ -0,0 +1,37 @@\n+DROP TABLE IF EXISTS test_table;\n+CREATE TABLE test_table\n+(\n+   uid Int64,\n+   start Int64,\n+   end Int64,\n+   insert_time DateTime\n+) ENGINE = MergeTree ORDER BY (uid, start);\n+\n+DROP DICTIONARY IF EXISTS test_dictionary;\n+CREATE DICTIONARY test_dictionary\n+(\n+  start Int64,\n+  end Int64,\n+  insert_time DateTime,\n+  uid Int64\n+) PRIMARY KEY uid\n+LAYOUT(RANGE_HASHED())\n+RANGE(MIN start MAX end)\n+SOURCE(CLICKHOUSE(TABLE 'test_table' UPDATE_FIELD 'insert_time' UPDATE_LAG 10))\n+LIFETIME(MIN 1 MAX 2);\n+\n+INSERT INTO test_table VALUES (1, 0, 100, '2022-12-26 11:38:34'), (1, 101, 200, '2022-12-26 11:38:34'), (2, 0, 999, '2022-12-26 11:38:34'), (2, 1000, 10000, '2022-12-26 11:38:34');\n+\n+SELECT * FROM test_dictionary;\n+SELECT dictGet('test_dictionary', 'insert_time', toUInt64(1), 10);\n+\n+SELECT sleep(3) format Null;\n+SELECT sleep(3) format Null;\n+\n+SELECT '--';\n+\n+SELECT * FROM test_dictionary;\n+SELECT dictGet('test_dictionary', 'insert_time', toUInt64(1), 10);\n+\n+DROP DICTIONARY test_dictionary;\n+DROP TABLE test_table;\n",
  "problem_statement": "the range doesn't work in RANGE_HASHED DICTIONARY after the DICTIONARY update version 22.10.3.27\n`DROP TABLE if exists default.test_20221226 on cluster clickhouse;\r\nCREATE TABLE default.test_20221226 on cluster clickhouse\r\n(\r\n   uid Int64,\r\n   start Int64,\r\n   end Int64,\r\n   ck_insert_time DateTime default now()\r\n)\r\nENGINE = ReplacingMergeTree(ck_insert_time)\r\nORDER BY (uid, start)\r\n;\r\n\r\nDROP TABLE if exists default.test_20221226_all on cluster clickhouse;\r\nCREATE TABLE default.test_20221226_all on cluster clickhouse AS default.test_20221226\r\nENGINE = Distributed('clickhouse', 'default', 'test_20221226', cityHash64(uid))\r\n;\r\n\r\nDROP DICTIONARY if exists default.test_20221226_dict on cluster clickhouse;\r\nCREATE DICTIONARY default.test_20221226_dict on cluster clickhouse\r\n(\r\n    uid Int64,\r\n    start Int64,\r\n    end Int64,\r\n    ck_insert_time DateTime\r\n)\r\nPRIMARY KEY uid\r\nSOURCE(CLICKHOUSE(HOST 'localhost' PORT 9000 USER 'default' PASSWORD 'default' DB 'default' TABLE 'test_20221226_all' UPDATE_FIELD 'ck_insert_time' UPDATE_LAG 60))\r\nLIFETIME(MIN 10 MAX 60)\r\nLAYOUT(RANGE_HASHED())\r\nRANGE(MIN start MAX end)\r\n;\r\n\r\nINSERT INTO default.test_20221226_all(uid,start,end) values (1, 0, 100),(1, 101,200),(2,0,999),(2,1000,10000);\r\n\r\nselect * from default.test_20221226_all ;\r\nuid\tstart\tend\tck_insert_time\r\n1\t0\t100\t2022-12-26 11:38:34\r\n1\t101\t200\t2022-12-26 11:38:34\r\n2\t0\t999\t2022-12-26 11:38:34\r\n2\t1000\t10000\t2022-12-26 11:38:34\r\n\r\nselect * from default.test_20221226_dict ;\r\nuid\tstart\tend\tck_insert_time\r\n1\t0\t100\t2022-12-26 11:38:34\r\n1\t101\t200\t2022-12-26 11:38:34\r\n2\t0\t999\t2022-12-26 11:38:34\r\n2\t1000\t10000\t2022-12-26 11:38:34\r\n\r\n`\r\n\r\nafter the DICTIONARY update. (one minute later)\r\n\r\n`\r\nselect * from default.test_20221226_all ;\r\nuid\tstart\tend\tck_insert_time\r\n1\t0\t100\t2022-12-26 11:38:34\r\n1\t101\t200\t2022-12-26 11:38:34\r\n2\t0\t999\t2022-12-26 11:38:34\r\n2\t1000\t10000\t2022-12-26 11:38:34\r\n\r\nselect * from default.test_20221226_dict ;\r\nuid\tstart\tend\tck_insert_time\r\n1\t101\t200\t2022-12-26 11:38:34\r\n2\t1000\t10000\t2022-12-26 11:38:34\r\n\r\n`\r\n\r\nthe result in dict is wrong, missing the first range for each PRIMARY KEY.\r\n\r\nsomthing wrong in my create sql? or a bug for this version. because i have used this plan in version 21.11.4.14, that's greats on it,\r\n\r\n\r\n\n",
  "hints_text": "related to `UPDATE_FIELD`\r\n\r\nhttps://fiddle.clickhouse.com/cc0825f7-1191-4090-99e6-b35f1ad78296\r\n\r\n```sql\r\nCREATE TABLE default.test_20221226  (\r\n   uid Int64,\r\n   start Int64,\r\n   end Int64,\r\n   ck_insert_time DateTime\r\n) ENGINE = MergeTree ORDER BY (uid, start);\r\n\r\nCREATE DICTIONARY default.test_20221226_dict  (\r\n  uid Int64,\r\n  start Int64,\r\n  end Int64,\r\n  ck_insert_time DateTime\r\n) PRIMARY KEY uid\r\nSOURCE(CLICKHOUSE(  TABLE 'test_20221226' UPDATE_FIELD 'ck_insert_time' UPDATE_LAG 10))\r\nLIFETIME(MIN 1 MAX 2) LAYOUT(RANGE_HASHED()) RANGE(MIN start MAX end);\r\n\r\n\r\ninsert into default.test_20221226 values (1,    0,   100, '2022-12-26 11:38:34')(1,  101,   200, '2022-12-26 11:38:34')(2,    0,   999, '2022-12-26 11:38:34')(2, 1000, 10000, '2022-12-26 11:38:34');\r\n\r\nselect * from default.test_20221226_dict ;\r\n\r\nselect dictGet('default.test_20221226_dict', 'ck_insert_time', toUInt64(1), 10) format Vertical;\r\nselect '-----------------';\r\nselect sleep(3) format Null;\r\nselect sleep(3) format Null;\r\nselect * from default.test_20221226_dict ;\r\nselect '-----------------';\r\nselect dictGet('default.test_20221226_dict', 'ck_insert_time', toUInt64(1), 10) format Vertical;\r\n\r\n\r\n\r\n1\t101\t200\t2022-12-26 11:38:34\r\n1\t0\t100\t2022-12-26 11:38:34\r\n2\t1000\t10000\t2022-12-26 11:38:34\r\n2\t0\t999\t2022-12-26 11:38:34\r\nRow 1:\r\n\u2500\u2500\u2500\u2500\u2500\u2500\r\ndictGet('default.test_20221226_dict', 'ck_insert_time', toUInt64(1), 10): 2022-12-26 11:38:34\r\n-----------------\r\n1\t101\t200\t2022-12-26 11:38:34\r\n2\t1000\t10000\t2022-12-26 11:38:34\r\n-----------------\r\nRow 1:\r\n\u2500\u2500\u2500\u2500\u2500\u2500\r\ndictGet('default.test_20221226_dict', 'ck_insert_time', toUInt64(1), 10): 1970-01-01 00:00:00\r\n\r\n```\ni found if optimize the source table  after insert into it, the dictionary can be right",
  "created_at": "2023-01-09T12:59:11Z",
  "modified_files": [
    "src/Dictionaries/RangeHashedDictionary.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02525_range_hashed_dictionary_update_field.reference",
    "b/tests/queries/0_stateless/02525_range_hashed_dictionary_update_field.sql"
  ]
}