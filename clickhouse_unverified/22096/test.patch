diff --git a/src/Common/tests/gtest_pod_array.cpp b/src/Common/tests/gtest_pod_array.cpp
index 63cf7026757a..9cc77b88195e 100644
--- a/src/Common/tests/gtest_pod_array.cpp
+++ b/src/Common/tests/gtest_pod_array.cpp
@@ -33,6 +33,19 @@ TEST(Common, PODArrayInsert)
     EXPECT_EQ(str, std::string(chars.data(), chars.size()));
 }
 
+TEST(Common, PODArrayInsertFromItself)
+{
+    {
+        PaddedPODArray<UInt64> array { 1 };
+
+        for (size_t i = 0; i < 3; ++i)
+            array.insertFromItself(array.begin(), array.end());
+
+        PaddedPODArray<UInt64> expected {1,1,1,1,1,1,1,1};
+        ASSERT_EQ(array,expected);
+    }
+}
+
 TEST(Common, PODPushBackRawMany)
 {
     PODArray<char> chars;
diff --git a/src/Dictionaries/tests/gtest_dictionary_ssd_cache_dictionary_storage.cpp b/src/Dictionaries/tests/gtest_dictionary_ssd_cache_dictionary_storage.cpp
index 20529e91bd3d..9fd9dc9b78c6 100644
--- a/src/Dictionaries/tests/gtest_dictionary_ssd_cache_dictionary_storage.cpp
+++ b/src/Dictionaries/tests/gtest_dictionary_ssd_cache_dictionary_storage.cpp
@@ -1,7 +1,5 @@
 #if defined(__linux__) || defined(__FreeBSD__)
 
-#include <iostream>
-
 #include <gtest/gtest.h>
 
 #include <Dictionaries/SSDCacheDictionaryStorage.h>
diff --git a/src/Dictionaries/tests/gtest_hierarchy_dictionaries_utils.cpp b/src/Dictionaries/tests/gtest_hierarchy_dictionaries_utils.cpp
new file mode 100644
index 000000000000..064f57dfe112
--- /dev/null
+++ b/src/Dictionaries/tests/gtest_hierarchy_dictionaries_utils.cpp
@@ -0,0 +1,225 @@
+#include <gtest/gtest.h>
+
+#include <Common/HashTable/HashMap.h>
+
+#include <Dictionaries/HierarchyDictionariesUtils.h>
+
+using namespace DB;
+
+TEST(HierarchyDictionariesUtils, getHierarchy)
+{
+    {
+        HashMap<UInt64, UInt64> child_to_parent;
+        child_to_parent[1] = 0;
+        child_to_parent[2] = 1;
+        child_to_parent[3] = 1;
+        child_to_parent[4] = 2;
+
+        auto is_key_valid_func = [&](auto key) { return child_to_parent.find(key) != nullptr; };
+
+        auto get_parent_key_func = [&](auto key)
+        {
+            auto it = child_to_parent.find(key);
+            std::optional<UInt64> value = (it != nullptr ? std::make_optional(it->getMapped()) : std::nullopt);
+            return value;
+        };
+
+        UInt64 hierarchy_null_value_key = 0;
+        PaddedPODArray<UInt64> keys = {1, 2, 3, 4, 5};
+
+        auto result = DB::detail::getHierarchy(
+            keys,
+            hierarchy_null_value_key,
+            is_key_valid_func,
+            get_parent_key_func);
+
+        const auto & actual_elements = result.elements;
+        const auto & actual_offsets = result.offsets;
+
+        PaddedPODArray<UInt64> expected_elements = {1, 2, 1, 3, 1, 4, 2, 1};
+        PaddedPODArray<IColumn::Offset> expected_offsets = {1, 3, 5, 8, 8};
+
+        ASSERT_EQ(actual_elements, expected_elements);
+        ASSERT_EQ(actual_offsets, expected_offsets);
+    }
+    {
+        HashMap<UInt64, UInt64> child_to_parent;
+        child_to_parent[1] = 2;
+        child_to_parent[2] = 1;
+
+        auto is_key_valid_func = [&](auto key) { return child_to_parent.find(key) != nullptr; };
+
+        auto get_parent_key_func = [&](auto key)
+        {
+            auto it = child_to_parent.find(key);
+            std::optional<UInt64> value = (it != nullptr ? std::make_optional(it->getMapped()) : std::nullopt);
+            return value;
+        };
+
+        UInt64 hierarchy_null_value_key = 0;
+        PaddedPODArray<UInt64> keys = {1, 2, 3};
+
+        auto result = DB::detail::getHierarchy(
+            keys,
+            hierarchy_null_value_key,
+            is_key_valid_func,
+            get_parent_key_func);
+
+        const auto & actual_elements = result.elements;
+        const auto & actual_offsets = result.offsets;
+
+        PaddedPODArray<UInt64> expected_elements = {1, 2, 2};
+        PaddedPODArray<IColumn::Offset> expected_offsets = {2, 3, 3};
+
+        ASSERT_EQ(actual_elements, expected_elements);
+        ASSERT_EQ(actual_offsets, expected_offsets);
+    }
+}
+
+TEST(HierarchyDictionariesUtils, getIsInHierarchy)
+{
+    {
+        HashMap<UInt64, UInt64> child_to_parent;
+        child_to_parent[1] = 0;
+        child_to_parent[2] = 1;
+        child_to_parent[3] = 1;
+        child_to_parent[4] = 2;
+
+        auto is_key_valid_func = [&](auto key) { return child_to_parent.find(key) != nullptr; };
+
+        auto get_parent_key_func = [&](auto key)
+        {
+            auto it = child_to_parent.find(key);
+            std::optional<UInt64> value = (it != nullptr ? std::make_optional(it->getMapped()) : std::nullopt);
+            return value;
+        };
+
+        UInt64 hierarchy_null_value_key = 0;
+        PaddedPODArray<UInt64> keys = {1, 2, 3, 4, 5};
+        PaddedPODArray<UInt64> keys_in = {1, 1, 1, 2, 5};
+
+        PaddedPODArray<UInt8> actual = DB::detail::getIsInHierarchy(
+            keys,
+            keys_in,
+            hierarchy_null_value_key,
+            is_key_valid_func,
+            get_parent_key_func);
+
+        PaddedPODArray<UInt8> expected = {1,1,1,1,0};
+
+        ASSERT_EQ(actual, expected);
+    }
+    {
+        HashMap<UInt64, UInt64> child_to_parent;
+        child_to_parent[1] = 2;
+        child_to_parent[2] = 1;
+
+        auto is_key_valid_func = [&](auto key)
+        {
+            return child_to_parent.find(key) != nullptr;
+        };
+
+        auto get_parent_key_func = [&](auto key)
+        {
+            auto it = child_to_parent.find(key);
+            std::optional<UInt64> value = (it != nullptr ? std::make_optional(it->getMapped()) : std::nullopt);
+            return value;
+        };
+
+        UInt64 hierarchy_null_value_key = 0;
+        PaddedPODArray<UInt64> keys = {1, 2, 3};
+        PaddedPODArray<UInt64> keys_in = {1, 2, 3};
+
+        PaddedPODArray<UInt8> actual = DB::detail::getIsInHierarchy(
+            keys,
+            keys_in,
+            hierarchy_null_value_key,
+            is_key_valid_func,
+            get_parent_key_func);
+
+        PaddedPODArray<UInt8> expected = {1, 1, 0};
+        ASSERT_EQ(actual, expected);
+    }
+}
+
+TEST(HierarchyDictionariesUtils, getDescendants)
+{
+    {
+        HashMap<UInt64, PaddedPODArray<UInt64>> parent_to_child;
+        parent_to_child[0].emplace_back(1);
+        parent_to_child[1].emplace_back(2);
+        parent_to_child[1].emplace_back(3);
+        parent_to_child[2].emplace_back(4);
+
+        PaddedPODArray<UInt64> keys = {0, 1, 2, 3, 4};
+
+        {
+            auto result = DB::detail::getDescendants(
+                keys,
+                parent_to_child,
+                DB::detail::GetAllDescendantsStrategy());
+
+            const auto & actual_elements = result.elements;
+            const auto & actual_offsets = result.offsets;
+
+            PaddedPODArray<UInt64> expected_elements = {1, 2, 3, 4, 2, 3, 4, 4};
+            PaddedPODArray<IColumn::Offset> expected_offsets = {4, 7, 8, 8, 8};
+
+            ASSERT_EQ(actual_elements, expected_elements);
+            ASSERT_EQ(actual_offsets, expected_offsets);
+        }
+        {
+            auto result = DB::detail::getDescendants(
+                keys,
+                parent_to_child,
+                DB::detail::GetDescendantsAtSpecificLevelStrategy{1});
+
+            const auto & actual_elements = result.elements;
+            const auto & actual_offsets = result.offsets;
+
+            PaddedPODArray<UInt64> expected_elements = {1, 2, 3, 4};
+            PaddedPODArray<IColumn::Offset> expected_offsets = {1, 3, 4, 4, 4};
+
+            ASSERT_EQ(actual_elements, expected_elements);
+            ASSERT_EQ(actual_offsets, expected_offsets);
+        }
+    }
+    {
+        HashMap<UInt64, PaddedPODArray<UInt64>> parent_to_child;
+        parent_to_child[1].emplace_back(2);
+        parent_to_child[2].emplace_back(1);
+
+        PaddedPODArray<UInt64> keys = {1, 2, 3};
+
+        {
+            auto result = DB::detail::getDescendants(
+                keys,
+                parent_to_child,
+                DB::detail::GetAllDescendantsStrategy());
+
+            const auto & actual_elements = result.elements;
+            const auto & actual_offsets = result.offsets;
+
+            PaddedPODArray<UInt64> expected_elements = {2, 1, 1};
+            PaddedPODArray<IColumn::Offset> expected_offsets = {2, 3, 3};
+
+            ASSERT_EQ(actual_elements, expected_elements);
+            ASSERT_EQ(actual_offsets, expected_offsets);
+        }
+        {
+            auto result = DB::detail::getDescendants(
+                keys,
+                parent_to_child,
+                DB::detail::GetDescendantsAtSpecificLevelStrategy{1});
+
+            const auto & actual_elements = result.elements;
+            const auto & actual_offsets = result.offsets;
+
+            PaddedPODArray<UInt64> expected_elements = {2, 1};
+            PaddedPODArray<IColumn::Offset> expected_offsets = {1, 2, 2};
+
+            ASSERT_EQ(actual_elements, expected_elements);
+            ASSERT_EQ(actual_offsets, expected_offsets);
+        }
+    }
+}
diff --git a/tests/performance/direct_dictionary.xml b/tests/performance/direct_dictionary.xml
index 68b52d917dda..97ecdfe3e951 100644
--- a/tests/performance/direct_dictionary.xml
+++ b/tests/performance/direct_dictionary.xml
@@ -1,57 +1,43 @@
 <test max_ignored_relative_change="0.3">
     <create_query>
-        CREATE TABLE simple_direct_dictionary_test_table
+        CREATE TABLE simple_key_direct_dictionary_source_table
         (
             id UInt64,
             value_int UInt64,
             value_string String,
             value_decimal Decimal64(8),
             value_string_nullable Nullable(String)
-        ) ENGINE = TinyLog;
-    </create_query>
-
-    <create_query>
-        INSERT INTO simple_direct_dictionary_test_table
-        SELECT number, number, toString(number), toDecimal64(number, 8), toString(number)
-        FROM system.numbers
-        LIMIT 100000;
+        ) ENGINE = Memory;
     </create_query>
 
     <create_query>
-        CREATE DICTIONARY simple_direct_dictionary
+        CREATE TABLE complex_key_direct_dictionary_source_table
         (
             id UInt64,
+            id_key String,
             value_int UInt64,
             value_string String,
             value_decimal Decimal64(8),
             value_string_nullable Nullable(String)
-        )
-        PRIMARY KEY id
-        SOURCE(CLICKHOUSE(DB 'default' TABLE 'simple_direct_dictionary_test_table'))
-        LAYOUT(DIRECT())
+        ) ENGINE = TinyLog;
     </create_query>
 
     <create_query>
-        CREATE TABLE complex_direct_dictionary_test_table
+        CREATE DICTIONARY simple_key_direct_dictionary
         (
             id UInt64,
-            id_key String,
             value_int UInt64,
             value_string String,
             value_decimal Decimal64(8),
             value_string_nullable Nullable(String)
-        ) ENGINE = TinyLog;
-    </create_query>
-
-    <create_query>
-        INSERT INTO complex_direct_dictionary_test_table
-        SELECT number, toString(number), number, toString(number), toDecimal64(number, 8), toString(number)
-        FROM system.numbers
-        LIMIT 100000;
+        )
+        PRIMARY KEY id
+        SOURCE(CLICKHOUSE(DB 'default' TABLE 'simple_key_direct_dictionary_source_table'))
+        LAYOUT(DIRECT())
     </create_query>
 
     <create_query>
-        CREATE DICTIONARY complex_direct_dictionary
+        CREATE DICTIONARY complex_key_direct_dictionary
         (
             id UInt64,
             id_key String,
@@ -61,20 +47,76 @@
             value_string_nullable Nullable(String)
         )
         PRIMARY KEY id, id_key
-        SOURCE(CLICKHOUSE(DB 'default' TABLE 'complex_direct_dictionary_test_table'))
+        SOURCE(CLICKHOUSE(DB 'default' TABLE 'complex_key_direct_dictionary_source_table'))
         LAYOUT(COMPLEX_KEY_DIRECT())
     </create_query>
 
-    <query>SELECT dictGet('default.simple_direct_dictionary', 'value_int', number) FROM system.numbers LIMIT 150000;</query>
-    <query>SELECT dictGet('default.simple_direct_dictionary', 'value_string', number) FROM system.numbers LIMIT 150000;</query>
-    <query>SELECT dictGet('default.simple_direct_dictionary', 'value_decimal', number) FROM system.numbers LIMIT 150000;</query>
-    <query>SELECT dictGet('default.simple_direct_dictionary', 'value_string_nullable', number) FROM system.numbers LIMIT 150000;</query>
-    <query>SELECT dictHas('default.simple_direct_dictionary', number) FROM system.numbers LIMIT 150000;</query>
+    <fill_query>
+        INSERT INTO simple_key_direct_dictionary_source_table
+        SELECT number, number, toString(number), toDecimal64(number, 8), toString(number)
+        FROM system.numbers
+        LIMIT 100000;
+    </fill_query>
+
+    <fill_query>
+        INSERT INTO complex_key_direct_dictionary_source_table
+        SELECT number, toString(number), number, toString(number), toDecimal64(number, 8), toString(number)
+        FROM system.numbers
+        LIMIT 100000;
+    </fill_query>
+
+    <substitutions>
+        <substitution>
+            <name>column_name</name>
+            <values>
+                <value>'value_int'</value>
+                <value>'value_string'</value>
+                <value>'value_decimal'</value>
+                <value>'value_string_nullable'</value>
+            </values>
+        </substitution>
+
+        <substitution>
+            <name>elements_count</name>
+            <values>
+                <value>25000</value>
+                <value>50000</value>
+                <value>75000</value>
+                <value>100000</value>
+            </values>
+        </substitution>
+    </substitutions>
+
+    <query>
+        SELECT dictGet('default.simple_key_direct_dictionary', {column_name}, number)
+        FROM system.numbers
+        LIMIT {elements_count}
+        FORMAT Null;
+    </query>
+    <query>
+        SELECT dictHas('default.simple_key_direct_dictionary', number)
+        FROM system.numbers
+        LIMIT {elements_count}
+        FORMAT Null;
+    </query>
+
+    <query>
+        SELECT dictGet('default.complex_key_direct_dictionary', {column_name}, (number, toString(number)))
+        FROM system.numbers
+        LIMIT {elements_count}
+        FORMAT Null;
+    </query>
+    <query>
+        SELECT dictHas('default.complex_key_direct_dictionary', (number, toString(number)))
+        FROM system.numbers
+        LIMIT {elements_count}
+        FORMAT Null;
+    </query>
+
+    <drop_query>DROP TABLE IF EXISTS simple_key_direct_dictionary_source_table;</drop_query>
+    <drop_query>DROP TABLE IF EXISTS complex_key_direct_dictionary_source_table;</drop_query>
 
-    <query>SELECT dictGet('default.complex_direct_dictionary', 'value_int', (number, toString(number))) FROM system.numbers LIMIT 150000;</query>
-    <query>SELECT dictGet('default.complex_direct_dictionary', 'value_string', (number, toString(number))) FROM system.numbers LIMIT 150000;</query>
-    <query>SELECT dictGet('default.complex_direct_dictionary', 'value_decimal', (number, toString(number))) FROM system.numbers LIMIT 150000;</query>
-    <query>SELECT dictGet('default.complex_direct_dictionary', 'value_string_nullable', (number, toString(number))) FROM system.numbers LIMIT 150000;</query>
-    <query>SELECT dictHas('default.complex_direct_dictionary', (number, toString(number))) FROM system.numbers LIMIT 150000;</query>
+    <drop_query>DROP DICTIONARY IF EXISTS simple_key_direct_dictionary;</drop_query>
+    <drop_query>DROP DICTIONARY IF EXISTS complex_key_direct_dictionary;</drop_query>
 
 </test>
diff --git a/tests/performance/flat_dictionary.xml b/tests/performance/flat_dictionary.xml
new file mode 100644
index 000000000000..426aa929bbc5
--- /dev/null
+++ b/tests/performance/flat_dictionary.xml
@@ -0,0 +1,75 @@
+<test max_ignored_relative_change="0.3">
+    <create_query>
+        CREATE TABLE simple_key_flat_dictionary_source_table
+        (
+            id UInt64,
+            value_int UInt64,
+            value_string String,
+            value_decimal Decimal64(8),
+            value_string_nullable Nullable(String)
+        ) ENGINE = Memory;
+    </create_query>
+
+    <create_query>
+        CREATE DICTIONARY simple_key_flat_dictionary
+        (
+            id UInt64,
+            value_int UInt64,
+            value_string String,
+            value_decimal Decimal64(8),
+            value_string_nullable Nullable(String)
+        )
+        PRIMARY KEY id
+        SOURCE(CLICKHOUSE(DB 'default' TABLE 'simple_key_flat_dictionary_source_table'))
+        LAYOUT(FLAT())
+        LIFETIME(MIN 0 MAX 1000)
+    </create_query>
+
+    <fill_query>
+        INSERT INTO simple_key_flat_dictionary_source_table
+        SELECT number, number, toString(number), toDecimal64(number, 8), toString(number)
+        FROM system.numbers
+        LIMIT 500000;
+    </fill_query>
+
+    <substitutions>
+        <substitution>
+            <name>column_name</name>
+            <values>
+                <value>'value_int'</value>
+                <value>'value_string'</value>
+                <value>'value_decimal'</value>
+                <value>'value_string_nullable'</value>
+            </values>
+        </substitution>
+
+        <substitution>
+            <name>elements_count</name>
+            <values>
+                <value>250000</value>
+                <value>500000</value>
+                <value>750000</value>
+                <value>1000000</value>
+            </values>
+        </substitution>
+    </substitutions>
+
+    <query>
+        SELECT dictGet('default.simple_key_flat_dictionary', {column_name}, number)
+        FROM system.numbers
+        LIMIT {elements_count}
+        FORMAR Null;
+    </query>
+
+    <query>
+        SELECT dictHas('default.simple_key_flat_dictionary', number)
+        FROM system.numbers
+        LIMIT {elements_count}
+        FORMAT Null;
+    </query>
+
+    <drop_query>DROP TABLE IF EXISTS simple_key_flat_dictionary_source_table</drop_query>
+
+    <drop_query>DROP DICTIONARY IF EXISTS simple_key_flat_dictionary</drop_query>
+
+</test>
diff --git a/tests/performance/hashed_dictionary.xml b/tests/performance/hashed_dictionary.xml
new file mode 100644
index 000000000000..a38d2f30c232
--- /dev/null
+++ b/tests/performance/hashed_dictionary.xml
@@ -0,0 +1,124 @@
+<test max_ignored_relative_change="0.3">
+    <create_query>
+        CREATE TABLE simple_key_hashed_dictionary_source_table
+        (
+            id UInt64,
+            value_int UInt64,
+            value_string String,
+            value_decimal Decimal64(8),
+            value_string_nullable Nullable(String)
+        ) ENGINE = Memory;
+    </create_query>
+
+    <create_query>
+        CREATE TABLE complex_key_hashed_dictionary_source_table
+        (
+            id UInt64,
+            id_key String,
+            value_int UInt64,
+            value_string String,
+            value_decimal Decimal64(8),
+            value_string_nullable Nullable(String)
+        ) ENGINE = Memory;
+    </create_query>
+
+    <create_query>
+        CREATE DICTIONARY simple_key_hashed_dictionary
+        (
+            id UInt64,
+            value_int UInt64,
+            value_string String,
+            value_decimal Decimal64(8),
+            value_string_nullable Nullable(String)
+        )
+        PRIMARY KEY id
+        SOURCE(CLICKHOUSE(DB 'default' TABLE 'simple_key_hashed_dictionary_source_table'))
+        LAYOUT(HASHED())
+        LIFETIME(MIN 0 MAX 1000);
+    </create_query>
+
+    <create_query>
+        CREATE DICTIONARY complex_key_hashed_dictionary
+        (
+            id UInt64,
+            id_key String,
+            value_int UInt64,
+            value_string String,
+            value_decimal Decimal64(8),
+            value_string_nullable Nullable(String)
+        )
+        PRIMARY KEY id, id_key
+        SOURCE(CLICKHOUSE(DB 'default' TABLE 'complex_key_hashed_dictionary_source_table'))
+        LAYOUT(COMPLEX_KEY_HASHED())
+        LIFETIME(MIN 0 MAX 1000);
+    </create_query>
+
+    <fill_query>
+        INSERT INTO simple_key_hashed_dictionary_source_table
+        SELECT number, number, toString(number), toDecimal64(number, 8), toString(number)
+        FROM system.numbers
+        LIMIT 5000000;
+    </fill_query>
+
+    <fill_query>
+        INSERT INTO complex_key_hashed_dictionary_source_table
+        SELECT number, toString(number), number, toString(number), toDecimal64(number, 8), toString(number)
+        FROM system.numbers
+        LIMIT 5000000;
+    </fill_query>
+
+    <substitutions>
+        <substitution>
+            <name>column_name</name>
+            <values>
+                <value>'value_int'</value>
+                <value>'value_string'</value>
+                <value>'value_decimal'</value>
+                <value>'value_string_nullable'</value>
+            </values>
+        </substitution>
+
+        <substitution>
+            <name>elements_count</name>
+            <values>
+                <value>2500000</value>
+                <value>5000000</value>
+                <value>7500000</value>
+                <value>10000000</value>
+            </values>
+        </substitution>
+    </substitutions>
+
+    <query>
+        SELECT dictGet('default.simple_key_hashed_dictionary', {column_name}, number)
+        FROM system.numbers
+        LIMIT {elements_count}
+        FORMAT Null;
+    </query>
+    <query>
+        SELECT dictHas('default.simple_key_hashed_dictionary', number)
+        FROM system.numbers
+        LIMIT {elements_count}
+        FORMAT Null;
+    </query>
+
+    <query>
+        SELECT dictGet('default.complex_key_hashed_dictionary', {column_name}, (number, toString(number)))
+        FROM system.numbers
+        LIMIT {elements_count}
+        FORMAT Null;
+    </query>
+    <query>
+        SELECT dictHas('default.complex_key_hashed_dictionary', (number, toString(number)))
+        FROM system.numbers
+        LIMIT {elements_count}
+        FORMAT Null;
+    </query>
+
+    <drop_query>DROP TABLE IF EXISTS simple_key_hashed_dictionary_source_table;</drop_query>
+    <drop_query>DROP TABLE IF EXISTS complex_key_hashed_dictionary_source_table;</drop_query>
+
+    <drop_query>DROP DICTIONARY IF EXISTS simple_key_hashed_dictionary;</drop_query>
+    <drop_query>DROP DICTIONARY IF EXISTS complex_key_hashed_dictionary;</drop_query>
+
+</test>
diff --git a/tests/queries/0_stateless/01251_dict_is_in_infinite_loop.reference b/tests/queries/0_stateless/01251_dict_is_in_infinite_loop.reference
index 757d2858524a..0a2c97efb42a 100644
--- a/tests/queries/0_stateless/01251_dict_is_in_infinite_loop.reference
+++ b/tests/queries/0_stateless/01251_dict_is_in_infinite_loop.reference
@@ -29,10 +29,10 @@
 1
 1
 1
-255
-255
 0
-255
+0
+0
+0
 [11,22]
 [22,11]
 [11,22]
diff --git a/tests/queries/0_stateless/01765_hashed_dictionary_simple_key.reference b/tests/queries/0_stateless/01765_hashed_dictionary_simple_key.reference
new file mode 100644
index 000000000000..2cc0a8668a2b
--- /dev/null
+++ b/tests/queries/0_stateless/01765_hashed_dictionary_simple_key.reference
@@ -0,0 +1,132 @@
+Dictionary hashed_dictionary_simple_key_simple_attributes
+dictGet existing value
+value_0	value_second_0
+value_1	value_second_1
+value_2	value_second_2
+dictGet with non existing value
+value_0	value_second_0
+value_1	value_second_1
+value_2	value_second_2
+value_first_default	value_second_default
+dictGetOrDefault existing value
+value_0	value_second_0
+value_1	value_second_1
+value_2	value_second_2
+dictGetOrDefault non existing value
+value_0	value_second_0
+value_1	value_second_1
+value_2	value_second_2
+default	default
+dictHas
+1
+1
+1
+0
+select all values as input stream
+0	value_0	value_second_0
+1	value_1	value_second_1
+2	value_2	value_second_2
+Dictionary sparse_hashed_dictionary_simple_key_simple_attributes
+dictGet existing value
+value_0	value_second_0
+value_1	value_second_1
+value_2	value_second_2
+dictGet with non existing value
+value_0	value_second_0
+value_1	value_second_1
+value_2	value_second_2
+value_first_default	value_second_default
+dictGetOrDefault existing value
+value_0	value_second_0
+value_1	value_second_1
+value_2	value_second_2
+dictGetOrDefault non existing value
+value_0	value_second_0
+value_1	value_second_1
+value_2	value_second_2
+default	default
+dictHas
+1
+1
+1
+0
+select all values as input stream
+0	value_0	value_second_0
+1	value_1	value_second_1
+2	value_2	value_second_2
+Dictionary hashed_dictionary_simple_key_complex_attributes
+dictGet existing value
+value_0	value_second_0
+value_1	\N
+value_2	value_second_2
+dictGet with non existing value
+value_0	value_second_0
+value_1	\N
+value_2	value_second_2
+value_first_default	value_second_default
+dictGetOrDefault existing value
+value_0	value_second_0
+value_1	\N
+value_2	value_second_2
+dictGetOrDefault non existing value
+value_0	value_second_0
+value_1	\N
+value_2	value_second_2
+default	default
+dictHas
+1
+1
+1
+0
+select all values as input stream
+0	value_0	value_second_0
+1	value_1	\N
+2	value_2	value_second_2
+Dictionary sparse_hashed_dictionary_simple_key_complex_attributes
+dictGet existing value
+value_0	value_second_0
+value_1	\N
+value_2	value_second_2
+dictGet with non existing value
+value_0	value_second_0
+value_1	\N
+value_2	value_second_2
+value_first_default	value_second_default
+dictGetOrDefault existing value
+value_0	value_second_0
+value_1	\N
+value_2	value_second_2
+dictGetOrDefault non existing value
+value_0	value_second_0
+value_1	\N
+value_2	value_second_2
+default	default
+dictHas
+1
+1
+1
+0
+select all values as input stream
+0	value_0	value_second_0
+1	value_1	\N
+2	value_2	value_second_2
+Dictionary hashed_dictionary_simple_key_hierarchy
+dictGet
+0
+0
+1
+1
+2
+dictGetHierarchy
+[1]
+[4,2,1]
+Dictionary sparse_hashed_dictionary_simple_key_hierarchy
+dictGet
+0
+0
+1
+1
+2
+dictGetHierarchy
+[1]
+[4,2,1]
diff --git a/tests/queries/0_stateless/01765_hashed_dictionary_simple_key.sql b/tests/queries/0_stateless/01765_hashed_dictionary_simple_key.sql
new file mode 100644
index 000000000000..7502c6a93bbe
--- /dev/null
+++ b/tests/queries/0_stateless/01765_hashed_dictionary_simple_key.sql
@@ -0,0 +1,207 @@
+DROP DATABASE IF EXISTS 01765_db;
+CREATE DATABASE 01765_db;
+
+CREATE TABLE 01765_db.simple_key_simple_attributes_source_table
+(
+   id UInt64,
+   value_first String,
+   value_second String
+)
+ENGINE = TinyLog;
+
+INSERT INTO 01765_db.simple_key_simple_attributes_source_table VALUES(0, 'value_0', 'value_second_0');
+INSERT INTO 01765_db.simple_key_simple_attributes_source_table VALUES(1, 'value_1', 'value_second_1');
+INSERT INTO 01765_db.simple_key_simple_attributes_source_table VALUES(2, 'value_2', 'value_second_2');
+
+CREATE DICTIONARY 01765_db.hashed_dictionary_simple_key_simple_attributes
+(
+   id UInt64,
+   value_first String DEFAULT 'value_first_default',
+   value_second String DEFAULT 'value_second_default'
+)
+PRIMARY KEY id
+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'simple_key_simple_attributes_source_table'))
+LIFETIME(MIN 1 MAX 1000)
+LAYOUT(HASHED());
+
+SELECT 'Dictionary hashed_dictionary_simple_key_simple_attributes';
+SELECT 'dictGet existing value';
+SELECT dictGet('01765_db.hashed_dictionary_simple_key_simple_attributes', 'value_first', number) as value_first,
+    dictGet('01765_db.hashed_dictionary_simple_key_simple_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 3;
+SELECT 'dictGet with non existing value';
+SELECT dictGet('01765_db.hashed_dictionary_simple_key_simple_attributes', 'value_first', number) as value_first,
+    dictGet('01765_db.hashed_dictionary_simple_key_simple_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 4;
+SELECT 'dictGetOrDefault existing value';
+SELECT dictGetOrDefault('01765_db.hashed_dictionary_simple_key_simple_attributes', 'value_first', number, toString('default')) as value_first,
+    dictGetOrDefault('01765_db.hashed_dictionary_simple_key_simple_attributes', 'value_second', number, toString('default')) as value_second FROM system.numbers LIMIT 3;
+SELECT 'dictGetOrDefault non existing value';
+SELECT dictGetOrDefault('01765_db.hashed_dictionary_simple_key_simple_attributes', 'value_first', number, toString('default')) as value_first,
+    dictGetOrDefault('01765_db.hashed_dictionary_simple_key_simple_attributes', 'value_second', number, toString('default')) as value_second FROM system.numbers LIMIT 4;
+SELECT 'dictHas';
+SELECT dictHas('01765_db.hashed_dictionary_simple_key_simple_attributes', number) FROM system.numbers LIMIT 4;
+SELECT 'select all values as input stream';
+SELECT * FROM 01765_db.hashed_dictionary_simple_key_simple_attributes ORDER BY id;
+
+DROP DICTIONARY 01765_db.hashed_dictionary_simple_key_simple_attributes;
+
+CREATE DICTIONARY 01765_db.sparse_hashed_dictionary_simple_key_simple_attributes
+(
+   id UInt64,
+   value_first String DEFAULT 'value_first_default',
+   value_second String DEFAULT 'value_second_default'
+)
+PRIMARY KEY id
+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'simple_key_simple_attributes_source_table'))
+LIFETIME(MIN 1 MAX 1000)
+LAYOUT(SPARSE_HASHED());
+
+SELECT 'Dictionary sparse_hashed_dictionary_simple_key_simple_attributes';
+SELECT 'dictGet existing value';
+SELECT dictGet('01765_db.sparse_hashed_dictionary_simple_key_simple_attributes', 'value_first', number) as value_first,
+    dictGet('01765_db.sparse_hashed_dictionary_simple_key_simple_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 3;
+SELECT 'dictGet with non existing value';
+SELECT dictGet('01765_db.sparse_hashed_dictionary_simple_key_simple_attributes', 'value_first', number) as value_first,
+    dictGet('01765_db.sparse_hashed_dictionary_simple_key_simple_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 4;
+SELECT 'dictGetOrDefault existing value';
+SELECT dictGetOrDefault('01765_db.sparse_hashed_dictionary_simple_key_simple_attributes', 'value_first', number, toString('default')) as value_first,
+    dictGetOrDefault('01765_db.sparse_hashed_dictionary_simple_key_simple_attributes', 'value_second', number, toString('default')) as value_second FROM system.numbers LIMIT 3;
+SELECT 'dictGetOrDefault non existing value';
+SELECT dictGetOrDefault('01765_db.sparse_hashed_dictionary_simple_key_simple_attributes', 'value_first', number, toString('default')) as value_first,
+    dictGetOrDefault('01765_db.sparse_hashed_dictionary_simple_key_simple_attributes', 'value_second', number, toString('default')) as value_second FROM system.numbers LIMIT 4;
+SELECT 'dictHas';
+SELECT dictHas('01765_db.sparse_hashed_dictionary_simple_key_simple_attributes', number) FROM system.numbers LIMIT 4;
+SELECT 'select all values as input stream';
+SELECT * FROM 01765_db.sparse_hashed_dictionary_simple_key_simple_attributes ORDER BY id;
+
+DROP DICTIONARY 01765_db.sparse_hashed_dictionary_simple_key_simple_attributes;
+
+DROP TABLE 01765_db.simple_key_simple_attributes_source_table;
+
+CREATE TABLE 01765_db.simple_key_complex_attributes_source_table
+(
+   id UInt64,
+   value_first String,
+   value_second Nullable(String)
+)
+ENGINE = TinyLog;
+
+INSERT INTO 01765_db.simple_key_complex_attributes_source_table VALUES(0, 'value_0', 'value_second_0');
+INSERT INTO 01765_db.simple_key_complex_attributes_source_table VALUES(1, 'value_1', NULL);
+INSERT INTO 01765_db.simple_key_complex_attributes_source_table VALUES(2, 'value_2', 'value_second_2');
+
+CREATE DICTIONARY 01765_db.hashed_dictionary_simple_key_complex_attributes
+(
+   id UInt64,
+   value_first String DEFAULT 'value_first_default',
+   value_second Nullable(String) DEFAULT 'value_second_default'
+)
+PRIMARY KEY id
+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'simple_key_complex_attributes_source_table'))
+LIFETIME(MIN 1 MAX 1000)
+LAYOUT(HASHED());
+
+SELECT 'Dictionary hashed_dictionary_simple_key_complex_attributes';
+SELECT 'dictGet existing value';
+SELECT dictGet('01765_db.hashed_dictionary_simple_key_complex_attributes', 'value_first', number) as value_first,
+    dictGet('01765_db.hashed_dictionary_simple_key_complex_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 3;
+SELECT 'dictGet with non existing value';
+SELECT dictGet('01765_db.hashed_dictionary_simple_key_complex_attributes', 'value_first', number) as value_first,
+    dictGet('01765_db.hashed_dictionary_simple_key_complex_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 4;
+SELECT 'dictGetOrDefault existing value';
+SELECT dictGetOrDefault('01765_db.hashed_dictionary_simple_key_complex_attributes', 'value_first', number, toString('default')) as value_first,
+    dictGetOrDefault('01765_db.hashed_dictionary_simple_key_complex_attributes', 'value_second', number, toString('default')) as value_second FROM system.numbers LIMIT 3;
+SELECT 'dictGetOrDefault non existing value';
+SELECT dictGetOrDefault('01765_db.hashed_dictionary_simple_key_complex_attributes', 'value_first', number, toString('default')) as value_first,
+    dictGetOrDefault('01765_db.hashed_dictionary_simple_key_complex_attributes', 'value_second', number, toString('default')) as value_second FROM system.numbers LIMIT 4;
+SELECT 'dictHas';
+SELECT dictHas('01765_db.hashed_dictionary_simple_key_complex_attributes', number) FROM system.numbers LIMIT 4;
+SELECT 'select all values as input stream';
+SELECT * FROM 01765_db.hashed_dictionary_simple_key_complex_attributes ORDER BY id;
+
+DROP DICTIONARY 01765_db.hashed_dictionary_simple_key_complex_attributes;
+
+CREATE DICTIONARY 01765_db.sparse_hashed_dictionary_simple_key_complex_attributes
+(
+   id UInt64,
+   value_first String DEFAULT 'value_first_default',
+   value_second Nullable(String) DEFAULT 'value_second_default'
+)
+PRIMARY KEY id
+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'simple_key_complex_attributes_source_table'))
+LIFETIME(MIN 1 MAX 1000)
+LAYOUT(HASHED());
+
+SELECT 'Dictionary sparse_hashed_dictionary_simple_key_complex_attributes';
+SELECT 'dictGet existing value';
+SELECT dictGet('01765_db.sparse_hashed_dictionary_simple_key_complex_attributes', 'value_first', number) as value_first,
+    dictGet('01765_db.sparse_hashed_dictionary_simple_key_complex_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 3;
+SELECT 'dictGet with non existing value';
+SELECT dictGet('01765_db.sparse_hashed_dictionary_simple_key_complex_attributes', 'value_first', number) as value_first,
+    dictGet('01765_db.sparse_hashed_dictionary_simple_key_complex_attributes', 'value_second', number) as value_second FROM system.numbers LIMIT 4;
+SELECT 'dictGetOrDefault existing value';
+SELECT dictGetOrDefault('01765_db.sparse_hashed_dictionary_simple_key_complex_attributes', 'value_first', number, toString('default')) as value_first,
+    dictGetOrDefault('01765_db.sparse_hashed_dictionary_simple_key_complex_attributes', 'value_second', number, toString('default')) as value_second FROM system.numbers LIMIT 3;
+SELECT 'dictGetOrDefault non existing value';
+SELECT dictGetOrDefault('01765_db.sparse_hashed_dictionary_simple_key_complex_attributes', 'value_first', number, toString('default')) as value_first,
+    dictGetOrDefault('01765_db.sparse_hashed_dictionary_simple_key_complex_attributes', 'value_second', number, toString('default')) as value_second FROM system.numbers LIMIT 4;
+SELECT 'dictHas';
+SELECT dictHas('01765_db.sparse_hashed_dictionary_simple_key_complex_attributes', number) FROM system.numbers LIMIT 4;
+SELECT 'select all values as input stream';
+SELECT * FROM 01765_db.sparse_hashed_dictionary_simple_key_complex_attributes ORDER BY id;
+
+DROP DICTIONARY 01765_db.sparse_hashed_dictionary_simple_key_complex_attributes;
+
+DROP TABLE 01765_db.simple_key_complex_attributes_source_table;
+
+CREATE TABLE 01765_db.simple_key_hierarchy_table
+(
+    id UInt64,
+    parent_id UInt64
+) ENGINE = TinyLog();
+
+INSERT INTO 01765_db.simple_key_hierarchy_table VALUES (1, 0);
+INSERT INTO 01765_db.simple_key_hierarchy_table VALUES (2, 1);
+INSERT INTO 01765_db.simple_key_hierarchy_table VALUES (3, 1);
+INSERT INTO 01765_db.simple_key_hierarchy_table VALUES (4, 2);
+
+CREATE DICTIONARY 01765_db.hashed_dictionary_simple_key_hierarchy
+(
+   id UInt64,
+   parent_id UInt64 HIERARCHICAL
+)
+PRIMARY KEY id
+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'simple_key_hierarchy_table'))
+LIFETIME(MIN 1 MAX 1000)
+LAYOUT(HASHED());
+
+SELECT 'Dictionary hashed_dictionary_simple_key_hierarchy';
+SELECT 'dictGet';
+SELECT dictGet('01765_db.hashed_dictionary_simple_key_hierarchy', 'parent_id', number) FROM system.numbers LIMIT 5;
+SELECT 'dictGetHierarchy';
+SELECT dictGetHierarchy('01765_db.hashed_dictionary_simple_key_hierarchy', toUInt64(1));
+SELECT dictGetHierarchy('01765_db.hashed_dictionary_simple_key_hierarchy', toUInt64(4));
+
+DROP DICTIONARY 01765_db.hashed_dictionary_simple_key_hierarchy;
+
+CREATE DICTIONARY 01765_db.sparse_hashed_dictionary_simple_key_hierarchy
+(
+   id UInt64,
+   parent_id UInt64 HIERARCHICAL
+)
+PRIMARY KEY id
+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'simple_key_hierarchy_table'))
+LIFETIME(MIN 1 MAX 1000)
+LAYOUT(HASHED());
+
+SELECT 'Dictionary sparse_hashed_dictionary_simple_key_hierarchy';
+SELECT 'dictGet';
+SELECT dictGet('01765_db.sparse_hashed_dictionary_simple_key_hierarchy', 'parent_id', number) FROM system.numbers LIMIT 5;
+SELECT 'dictGetHierarchy';
+SELECT dictGetHierarchy('01765_db.sparse_hashed_dictionary_simple_key_hierarchy', toUInt64(1));
+SELECT dictGetHierarchy('01765_db.sparse_hashed_dictionary_simple_key_hierarchy', toUInt64(4));
+
+DROP DICTIONARY 01765_db.sparse_hashed_dictionary_simple_key_hierarchy;
+
+DROP TABLE 01765_db.simple_key_hierarchy_table;
+
+DROP DATABASE 01765_db;
diff --git a/tests/queries/0_stateless/01766_hashed_dictionary_complex_key.reference b/tests/queries/0_stateless/01766_hashed_dictionary_complex_key.reference
new file mode 100644
index 000000000000..12c210581c23
--- /dev/null
+++ b/tests/queries/0_stateless/01766_hashed_dictionary_complex_key.reference
@@ -0,0 +1,56 @@
+Dictionary hashed_dictionary_complex_key_simple_attributes
+dictGet existing value
+value_0	value_second_0
+value_1	value_second_1
+value_2	value_second_2
+dictGet with non existing value
+value_0	value_second_0
+value_1	value_second_1
+value_2	value_second_2
+value_first_default	value_second_default
+dictGetOrDefault existing value
+value_0	value_second_0
+value_1	value_second_1
+value_2	value_second_2
+dictGetOrDefault non existing value
+value_0	value_second_0
+value_1	value_second_1
+value_2	value_second_2
+default	default
+dictHas
+1
+1
+1
+0
+select all values as input stream
+0	id_key_0	value_0	value_second_0
+1	id_key_1	value_1	value_second_1
+2	id_key_2	value_2	value_second_2
+Dictionary hashed_dictionary_complex_key_complex_attributes
+dictGet existing value
+value_0	value_second_0
+value_1	\N
+value_2	value_second_2
+dictGet with non existing value
+value_0	value_second_0
+value_1	\N
+value_2	value_second_2
+value_first_default	value_second_default
+dictGetOrDefault existing value
+value_0	value_second_0
+value_1	\N
+value_2	value_second_2
+dictGetOrDefault non existing value
+value_0	value_second_0
+value_1	\N
+value_2	value_second_2
+default	default
+dictHas
+1
+1
+1
+0
+select all values as input stream
+0	id_key_0	value_0	value_second_0
+1	id_key_1	value_1	\N
+2	id_key_2	value_2	value_second_2
diff --git a/tests/queries/0_stateless/01766_hashed_dictionary_complex_key.sql b/tests/queries/0_stateless/01766_hashed_dictionary_complex_key.sql
new file mode 100644
index 000000000000..de7ab5b5a1a4
--- /dev/null
+++ b/tests/queries/0_stateless/01766_hashed_dictionary_complex_key.sql
@@ -0,0 +1,98 @@
+DROP DATABASE IF EXISTS 01766_db;
+CREATE DATABASE 01766_db;
+
+CREATE TABLE 01766_db.complex_key_simple_attributes_source_table
+(
+   id UInt64,
+   id_key String,
+   value_first String,
+   value_second String
+)
+ENGINE = TinyLog;
+
+INSERT INTO 01766_db.complex_key_simple_attributes_source_table VALUES(0, 'id_key_0', 'value_0', 'value_second_0');
+INSERT INTO 01766_db.complex_key_simple_attributes_source_table VALUES(1, 'id_key_1', 'value_1', 'value_second_1');
+INSERT INTO 01766_db.complex_key_simple_attributes_source_table VALUES(2, 'id_key_2', 'value_2', 'value_second_2');
+
+CREATE DICTIONARY 01766_db.hashed_dictionary_complex_key_simple_attributes
+(
+   id UInt64,
+   id_key String,
+   value_first String DEFAULT 'value_first_default',
+   value_second String DEFAULT 'value_second_default'
+)
+PRIMARY KEY id, id_key
+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'complex_key_simple_attributes_source_table' DB '01766_db'))
+LIFETIME(MIN 1 MAX 1000)
+LAYOUT(COMPLEX_KEY_HASHED());
+
+SELECT 'Dictionary hashed_dictionary_complex_key_simple_attributes';
+SELECT 'dictGet existing value';
+SELECT dictGet('01766_db.hashed_dictionary_complex_key_simple_attributes', 'value_first', (number, concat('id_key_', toString(number)))) as value_first,
+    dictGet('01766_db.hashed_dictionary_complex_key_simple_attributes', 'value_second', (number, concat('id_key_', toString(number)))) as value_second FROM system.numbers LIMIT 3;
+SELECT 'dictGet with non existing value';
+SELECT dictGet('01766_db.hashed_dictionary_complex_key_simple_attributes', 'value_first', (number, concat('id_key_', toString(number)))) as value_first,
+    dictGet('01766_db.hashed_dictionary_complex_key_simple_attributes', 'value_second', (number, concat('id_key_', toString(number)))) as value_second FROM system.numbers LIMIT 4;
+SELECT 'dictGetOrDefault existing value';
+SELECT dictGetOrDefault('01766_db.hashed_dictionary_complex_key_simple_attributes', 'value_first', (number, concat('id_key_', toString(number))), toString('default')) as value_first,
+    dictGetOrDefault('01766_db.hashed_dictionary_complex_key_simple_attributes', 'value_second', (number, concat('id_key_', toString(number))), toString('default')) as value_second FROM system.numbers LIMIT 3;
+SELECT 'dictGetOrDefault non existing value';
+SELECT dictGetOrDefault('01766_db.hashed_dictionary_complex_key_simple_attributes', 'value_first', (number, concat('id_key_', toString(number))), toString('default')) as value_first,
+    dictGetOrDefault('01766_db.hashed_dictionary_complex_key_simple_attributes', 'value_second', (number, concat('id_key_', toString(number))), toString('default')) as value_second FROM system.numbers LIMIT 4;
+SELECT 'dictHas';
+SELECT dictHas('01766_db.hashed_dictionary_complex_key_simple_attributes', (number, concat('id_key_', toString(number)))) FROM system.numbers LIMIT 4;
+SELECT 'select all values as input stream';
+SELECT * FROM 01766_db.hashed_dictionary_complex_key_simple_attributes ORDER BY (id, id_key);
+
+DROP DICTIONARY 01766_db.hashed_dictionary_complex_key_simple_attributes;
+
+DROP TABLE 01766_db.complex_key_simple_attributes_source_table;
+
+CREATE TABLE 01766_db.complex_key_complex_attributes_source_table
+(
+   id UInt64,
+   id_key String,
+   value_first String,
+   value_second Nullable(String)
+)
+ENGINE = TinyLog;
+
+INSERT INTO 01766_db.complex_key_complex_attributes_source_table VALUES(0, 'id_key_0', 'value_0', 'value_second_0');
+INSERT INTO 01766_db.complex_key_complex_attributes_source_table VALUES(1, 'id_key_1', 'value_1', NULL);
+INSERT INTO 01766_db.complex_key_complex_attributes_source_table VALUES(2, 'id_key_2', 'value_2', 'value_second_2');
+
+CREATE DICTIONARY 01766_db.hashed_dictionary_complex_key_complex_attributes
+(
+    id UInt64,
+    id_key String,
+
+    value_first String DEFAULT 'value_first_default',
+    value_second Nullable(String) DEFAULT 'value_second_default'
+)
+PRIMARY KEY id, id_key
+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'complex_key_complex_attributes_source_table' DB '01766_db'))
+LIFETIME(MIN 1 MAX 1000)
+LAYOUT(COMPLEX_KEY_HASHED());
+
+SELECT 'Dictionary hashed_dictionary_complex_key_complex_attributes';
+SELECT 'dictGet existing value';
+SELECT dictGet('01766_db.hashed_dictionary_complex_key_complex_attributes', 'value_first', (number, concat('id_key_', toString(number)))) as value_first,
+    dictGet('01766_db.hashed_dictionary_complex_key_complex_attributes', 'value_second', (number, concat('id_key_', toString(number)))) as value_second FROM system.numbers LIMIT 3;
+SELECT 'dictGet with non existing value';
+SELECT dictGet('01766_db.hashed_dictionary_complex_key_complex_attributes', 'value_first', (number, concat('id_key_', toString(number)))) as value_first,
+    dictGet('01766_db.hashed_dictionary_complex_key_complex_attributes', 'value_second', (number, concat('id_key_', toString(number)))) as value_second FROM system.numbers LIMIT 4;
+SELECT 'dictGetOrDefault existing value';
+SELECT dictGetOrDefault('01766_db.hashed_dictionary_complex_key_complex_attributes', 'value_first', (number, concat('id_key_', toString(number))), toString('default')) as value_first,
+    dictGetOrDefault('01766_db.hashed_dictionary_complex_key_complex_attributes', 'value_second', (number, concat('id_key_', toString(number))), toString('default')) as value_second FROM system.numbers LIMIT 3;
+SELECT 'dictGetOrDefault non existing value';
+SELECT dictGetOrDefault('01766_db.hashed_dictionary_complex_key_complex_attributes', 'value_first', (number, concat('id_key_', toString(number))), toString('default')) as value_first,
+    dictGetOrDefault('01766_db.hashed_dictionary_complex_key_complex_attributes', 'value_second', (number, concat('id_key_', toString(number))), toString('default')) as value_second FROM system.numbers LIMIT 4;
+SELECT 'dictHas';
+SELECT dictHas('01766_db.hashed_dictionary_complex_key_complex_attributes', (number, concat('id_key_', toString(number)))) FROM system.numbers LIMIT 4;
+SELECT 'select all values as input stream';
+SELECT * FROM 01766_db.hashed_dictionary_complex_key_complex_attributes ORDER BY (id, id_key);
+
+DROP DICTIONARY 01766_db.hashed_dictionary_complex_key_complex_attributes;
+DROP TABLE 01766_db.complex_key_complex_attributes_source_table;
+
+DROP DATABASE 01766_db;
diff --git a/tests/queries/0_stateless/01778_hierarchical_dictionaries.reference b/tests/queries/0_stateless/01778_hierarchical_dictionaries.reference
new file mode 100644
index 000000000000..5fe5f5f1db6a
--- /dev/null
+++ b/tests/queries/0_stateless/01778_hierarchical_dictionaries.reference
@@ -0,0 +1,102 @@
+Flat dictionary
+Get hierarchy
+[]
+[1]
+[2,1]
+[3,1]
+[4,2,1]
+[]
+Get is in hierarchy
+0
+1
+1
+1
+1
+0
+Get children
+[1]
+[2,3]
+[4]
+[]
+[]
+[]
+Get all descendants
+[1,2,3,4]
+[2,3,4]
+[4]
+[]
+[]
+[]
+Get descendants at first level
+[1]
+[2,3]
+[4]
+[]
+[]
+[]
+Hashed dictionary
+Get hierarchy
+[]
+[1]
+[2,1]
+[3,1]
+[4,2,1]
+[]
+Get is in hierarchy
+0
+1
+1
+1
+1
+0
+Get children
+[1]
+[3,2]
+[4]
+[]
+[]
+[]
+Get all descendants
+[1,3,2,4]
+[3,2,4]
+[4]
+[]
+[]
+[]
+Get descendants at first level
+[1]
+[3,2]
+[4]
+[]
+[]
+[]
+Cache dictionary
+Get hierarchy
+[]
+[1]
+[2,1]
+[3,1]
+[4,2,1]
+[]
+Get is in hierarchy
+0
+1
+1
+1
+1
+0
+Direct dictionary
+Get hierarchy
+[]
+[1]
+[2,1]
+[3,1]
+[4,2,1]
+[]
+Get is in hierarchy
+0
+1
+1
+1
+1
+0
diff --git a/tests/queries/0_stateless/01778_hierarchical_dictionaries.sql b/tests/queries/0_stateless/01778_hierarchical_dictionaries.sql
new file mode 100644
index 000000000000..f6e1a7c9375c
--- /dev/null
+++ b/tests/queries/0_stateless/01778_hierarchical_dictionaries.sql
@@ -0,0 +1,95 @@
+DROP DATABASE IF EXISTS 01778_db;
+CREATE DATABASE 01778_db;
+
+CREATE TABLE 01778_db.hierarchy_source_table (id UInt64, parent_id UInt64) ENGINE = TinyLog;
+INSERT INTO 01778_db.hierarchy_source_table VALUES (1, 0), (2, 1), (3, 1), (4, 2);
+
+CREATE DICTIONARY 01778_db.hierarchy_flat_dictionary
+(
+    id UInt64,
+    parent_id UInt64 HIERARCHICAL
+)
+PRIMARY KEY id
+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'hierarchy_source_table' DB '01778_db'))
+LAYOUT(FLAT())
+LIFETIME(MIN 1 MAX 1000);
+
+SELECT 'Flat dictionary';
+
+SELECT 'Get hierarchy';
+SELECT dictGetHierarchy('01778_db.hierarchy_flat_dictionary', number) FROM system.numbers LIMIT 6;
+SELECT 'Get is in hierarchy';
+SELECT dictIsIn('01778_db.hierarchy_flat_dictionary', number, number) FROM system.numbers LIMIT 6;
+SELECT 'Get children';
+SELECT dictGetChildren('01778_db.hierarchy_flat_dictionary', number) FROM system.numbers LIMIT 6;
+SELECT 'Get all descendants';
+SELECT dictGetDescendants('01778_db.hierarchy_flat_dictionary', number) FROM system.numbers LIMIT 6;
+SELECT 'Get descendants at first level';
+SELECT dictGetDescendants('01778_db.hierarchy_flat_dictionary', number, 1) FROM system.numbers LIMIT 6;
+
+DROP DICTIONARY 01778_db.hierarchy_flat_dictionary;
+
+CREATE DICTIONARY 01778_db.hierarchy_hashed_dictionary
+(
+    id UInt64,
+    parent_id UInt64 HIERARCHICAL
+)
+PRIMARY KEY id
+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'hierarchy_source_table' DB '01778_db'))
+LAYOUT(HASHED())
+LIFETIME(MIN 1 MAX 1000);
+
+SELECT 'Hashed dictionary';
+
+SELECT 'Get hierarchy';
+SELECT dictGetHierarchy('01778_db.hierarchy_hashed_dictionary', number) FROM system.numbers LIMIT 6;
+SELECT 'Get is in hierarchy';
+SELECT dictIsIn('01778_db.hierarchy_hashed_dictionary', number, number) FROM system.numbers LIMIT 6;
+SELECT 'Get children';
+SELECT dictGetChildren('01778_db.hierarchy_hashed_dictionary', number) FROM system.numbers LIMIT 6;
+SELECT 'Get all descendants';
+SELECT dictGetDescendants('01778_db.hierarchy_hashed_dictionary', number) FROM system.numbers LIMIT 6;
+SELECT 'Get descendants at first level';
+SELECT dictGetDescendants('01778_db.hierarchy_hashed_dictionary', number, 1) FROM system.numbers LIMIT 6;
+
+DROP DICTIONARY 01778_db.hierarchy_hashed_dictionary;
+
+CREATE DICTIONARY 01778_db.hierarchy_cache_dictionary
+(
+    id UInt64,
+    parent_id UInt64 HIERARCHICAL
+)
+PRIMARY KEY id
+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'hierarchy_source_table' DB '01778_db'))
+LAYOUT(CACHE(SIZE_IN_CELLS 10))
+LIFETIME(MIN 1 MAX 1000);
+
+SELECT 'Cache dictionary';
+
+SELECT 'Get hierarchy';
+SELECT dictGetHierarchy('01778_db.hierarchy_cache_dictionary', number) FROM system.numbers LIMIT 6;
+SELECT 'Get is in hierarchy';
+SELECT dictIsIn('01778_db.hierarchy_cache_dictionary', number, number) FROM system.numbers LIMIT 6;
+
+DROP DICTIONARY 01778_db.hierarchy_cache_dictionary;
+
+CREATE DICTIONARY 01778_db.hierarchy_direct_dictionary
+(
+    id UInt64,
+    parent_id UInt64 HIERARCHICAL
+)
+PRIMARY KEY id
+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'hierarchy_source_table' DB '01778_db'))
+LAYOUT(DIRECT());
+
+SELECT 'Direct dictionary';
+
+SELECT 'Get hierarchy';
+SELECT dictGetHierarchy('01778_db.hierarchy_direct_dictionary', number) FROM system.numbers LIMIT 6;
+SELECT 'Get is in hierarchy';
+SELECT dictIsIn('01778_db.hierarchy_direct_dictionary', number, number) FROM system.numbers LIMIT 6;
+
+DROP DICTIONARY 01778_db.hierarchy_direct_dictionary;
+
+DROP TABLE 01778_db.hierarchy_source_table;
+DROP DATABASE 01778_db;
diff --git a/tests/queries/skip_list.json b/tests/queries/skip_list.json
index df2090325a33..627b76827a81 100644
--- a/tests/queries/skip_list.json
+++ b/tests/queries/skip_list.json
@@ -679,6 +679,19 @@
         "live_view",
         "memory_leak",
         "memory_limit",
-        "polygon_dicts" // they use an explicitly specified database
+        "polygon_dicts", // they use an explicitly specified database
+        "01658_read_file_to_stringcolumn",
+        "01721_engine_file_truncate_on_insert", // It's ok to execute in parallel but not several instances of the same test.
+        "01702_system_query_log", // It's ok to execute in parallel with oter tests but not several instances of the same test.
+        "01748_dictionary_table_dot", // creates database
+        "00950_dict_get",
+        "01683_flat_dictionary",
+        "01681_cache_dictionary_simple_key",
+        "01682_cache_dictionary_complex_key",
+        "01684_ssd_cache_dictionary_simple_key",
+        "01685_ssd_cache_dictionary_complex_key",
+        "01760_system_dictionaries",
+        "01760_polygon_dictionaries",
+        "01778_hierarchical_dictionaries"
     ]
 }
