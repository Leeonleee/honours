{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 59351,
  "instance_id": "ClickHouse__ClickHouse-59351",
  "issue_numbers": [
    "59342"
  ],
  "base_commit": "037d8ef7b2282ef95a18b07f50811ed84e600d6f",
  "patch": "diff --git a/src/Storages/System/StorageSystemTables.cpp b/src/Storages/System/StorageSystemTables.cpp\nindex a0f6b03cf89c..e0d2dd03e78f 100644\n--- a/src/Storages/System/StorageSystemTables.cpp\n+++ b/src/Storages/System/StorageSystemTables.cpp\n@@ -693,10 +693,15 @@ class ReadFromSystemTables : public SourceStepWithFilter\n     {\n     }\n \n+    void applyFilters() override;\n+\n private:\n     ContextPtr context;\n     std::vector<UInt8> columns_mask;\n     size_t max_block_size;\n+\n+    ColumnPtr filtered_databases_column;\n+    ColumnPtr filtered_tables_column;\n };\n \n void StorageSystemTables::read(\n@@ -723,16 +728,19 @@ void StorageSystemTables::read(\n     query_plan.addStep(std::move(reading));\n }\n \n-void ReadFromSystemTables::initializePipeline(QueryPipelineBuilder & pipeline, const BuildQueryPipelineSettings &)\n+void ReadFromSystemTables::applyFilters()\n {\n     auto filter_actions_dag = ActionsDAG::buildFilterActionsDAG(filter_nodes.nodes);\n     const ActionsDAG::Node * predicate = nullptr;\n     if (filter_actions_dag)\n         predicate = filter_actions_dag->getOutputs().at(0);\n \n-    ColumnPtr filtered_databases_column = getFilteredDatabases(predicate, context);\n-    ColumnPtr filtered_tables_column = getFilteredTables(predicate, filtered_databases_column, context);\n+    filtered_databases_column = getFilteredDatabases(predicate, context);\n+    filtered_tables_column = getFilteredTables(predicate, filtered_databases_column, context);\n+}\n \n+void ReadFromSystemTables::initializePipeline(QueryPipelineBuilder & pipeline, const BuildQueryPipelineSettings &)\n+{\n     Pipe pipe(std::make_shared<TablesBlockSource>(\n         std::move(columns_mask), getOutputStream().header, max_block_size, std::move(filtered_databases_column), std::move(filtered_tables_column), context));\n     pipeline.init(std::move(pipe));\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02841_not_ready_set_bug.sh b/tests/queries/0_stateless/02841_not_ready_set_bug.sh\nindex fd7f62d28bf2..3aaffe515789 100755\n--- a/tests/queries/0_stateless/02841_not_ready_set_bug.sh\n+++ b/tests/queries/0_stateless/02841_not_ready_set_bug.sh\n@@ -9,3 +9,4 @@ $CLICKHOUSE_CLIENT -q \"create table t1 (number UInt64) engine = MergeTree order\n $CLICKHOUSE_CLIENT -q \"insert into t1 select number from numbers(10);\"\n $CLICKHOUSE_CLIENT --max_threads=2 --max_result_rows=1 --result_overflow_mode=break -q \"with tab as (select min(number) from t1 prewhere number in (select number from view(select number, row_number() OVER (partition by number % 2 ORDER BY number DESC) from numbers_mt(1e4)) where number != 2 order by number)) select number from t1 union all select * from tab;\" > /dev/null\n \n+$CLICKHOUSE_CLIENT -q \"SELECT * FROM system.tables WHERE 1 in (SELECT number from numbers(2)) AND database = currentDatabase() format Null\"\n",
  "problem_statement": "Not-ready Set is passed as the second argument for function 'in'\n```\r\nSELECT *\r\nFROM information_schema.TABLES\r\nWHERE exists((\r\n    SELECT 1\r\n))\r\n```\r\n\r\n```\r\nReceived exception from server (version 23.12.2):\r\nCode: 49. DB::Exception: Received from localhost:9000. DB::Exception: Not-ready Set is passed as the second argument for function 'in': while executing 'FUNCTION in(1 :: 0, _subquery2 :: 1) -> in(1, _subquery2) UInt8 : 4'. (LOGICAL_ERROR)\r\n```\r\n\r\nhttps://fiddle.clickhouse.com/0a709c49-4530-40f3-8b31-7afb706b723b\n",
  "hints_text": "Looks like this bug is specific to system tables that optimize the amount of work by apply filter condition internally using `DB::VirtualColumnUtils::filterBlockWithPredicate` :\r\n\r\n```\r\nsed as the second argument for function 'in': while executing 'FUNCTION in(1 :: 0, _subquery149 :: 1) -> in(1, _subquery149) UInt8 : 2'. (LOGICAL_ERROR) (version 24.1.1.1) (from 127.0.0.1:58126) (in query: SELECT * FROM system.tables WHERE exists(( SELECT 1 )) SETTINGS send_logs_level = 'trace'), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. ./contrib/llvm-project/libcxx/include/exception:134: Poco::Exception::Exception(String const&, int) @ 0x0000000014ab35f2 in /home/davenger/src/ClickHouse/build/programs/clickhouse\r\n1. ./build/./src/Common/Exception.cpp:96: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000b62c737 in /home/davenger/src/ClickHouse/build/programs/clickhouse\r\n2. ? @ 0x00000000065411e3 in /home/davenger/src/ClickHouse/build/programs/clickhouse\r\n3. ? @ 0x0000000008a962e4 in /home/davenger/src/ClickHouse/build/programs/clickhouse\r\n4. ? @ 0x0000000006541bae in /home/davenger/src/ClickHouse/build/programs/clickhouse\r\n5. ./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:117: DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000000f3b26c5 in /home/davenger/src/ClickHouse/build/programs/clickhouse\r\n6. ./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:117: DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000000f3b2f78 in /home/davenger/src/ClickHouse/build/programs/clickhouse\r\n7. ./build/./src/Functions/IFunction.cpp:0: DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000000f3b420b in /home/davenger/src/ClickHouse/build/programs/clickhouse\r\n8. ./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:117: DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool) const @ 0x00000000102bab51 in /home/davenger/src/ClickHouse/build/programs/clickhouse\r\n9. ./contrib/llvm-project/libcxx/include/vector:537: DB::ExpressionActions::execute(DB::Block&, bool) const @ 0x00000000102bb8d8 in /home/davenger/src/ClickHouse/build/programs/clickhouse\r\n10. ./build/./src/Storages/VirtualColumnUtils.cpp:0: DB::VirtualColumnUtils::filterBlockWithDAG(std::shared_ptr<DB::ActionsDAG>, DB::Block&, std::shared_ptr<DB::Context const>) @ 0x00000000115598ae in /home/davenger/src/ClickHouse/build/programs/clickhouse\r\n11. ./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:701: DB::VirtualColumnUtils::filterBlockWithPredicate(DB::ActionsDAG::Node const*, DB::Block&, std::shared_ptr<DB::Context const>) @ 0x000000001155e942 in /home/davenger/src/ClickHouse/build/programs/clickhouse\r\n12. ./contrib/llvm-project/libcxx/include/vector:1457: DB::ReadFromSystemTables::initializePipeline(DB::QueryPipelineBuilder&, DB::BuildQueryPipelineSettings const&) @ 0x000000000f1dad4f in /home/davenger/src/ClickHouse/build/programs/clickhouse\r\n13. ./contrib/llvm-project/libcxx/include/vector:1420: DB::ISourceStep::updatePipeline(std::vector<std::unique_ptr<DB::QueryPipelineBuilder, std::default_delete<DB::QueryPipelineBuilder>>, std::allocator<std::unique_ptr<DB::QueryPipelineBuilder, std::default_delete<DB::QueryPipelineBuilder>>>>, DB::BuildQueryPipelineSettings const&) @ 0x00000000121780c2 in /home/davenger/src/ClickHouse/build/programs/clickhouse\r\n14. ./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:302: DB::QueryPlan::buildQueryPipeline(DB::QueryPlanOptimizationSettings const&, DB::BuildQueryPipelineSettings const&) @ 0x00000000121914ab in /home/davenger/src/ClickHouse/build/programs/clickhouse\r\n15. ./build/./src/Interpreters/InterpreterSelectWithUnionQuery.cpp:380: DB::InterpreterSelectWithUnionQuery::execute() @ 0x0000000010a7a40e in /home/davenger/src/ClickHouse/build/programs/clickhouse\r\n16. ./build/./src/Interpreters/executeQuery.cpp:0: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x0000000010d813ca in /home/davenger/src/ClickHouse/build/programs/clickhouse\r\n17. ./build/./src/Interpreters/executeQuery.cpp:1290: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x0000000010d7dd18 in /home/davenger/src/ClickHouse/build/programs/clickhouse\r\n18. ./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:612: DB::TCPHandler::runImpl() @ 0x0000000011d5eb8d in /home/davenger/src/ClickHouse/build/programs/clickhouse\r\n19. ./build/./src/Server/TCPHandler.cpp:2298: DB::TCPHandler::run() @ 0x0000000011d73d19 in /home/davenger/src/ClickHouse/build/programs/clickhouse\r\n20. ./build/./base/poco/Net/src/TCPServerConnection.cpp:57: Poco::Net::TCPServerConnection::start() @ 0x00000000149d1587 in /home/davenger/src/ClickHouse/build/programs/clickhouse\r\n21. ./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:48: Poco::Net::TCPServerDispatcher::run() @ 0x00000000149d1a6d in /home/davenger/src/ClickHouse/build/programs/clickhouse\r\n22. ./build/./base/poco/Foundation/src/ThreadPool.cpp:202: Poco::PooledThread::run() @ 0x0000000014b07cc7 in /home/davenger/src/ClickHouse/build/programs/clickhouse\r\n23. ./base/poco/Foundation/include/Poco/SharedPtr.h:139: Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000014b057c2 in /home/davenger/src/ClickHouse/build/programs/clickhouse\r\n24. ? @ 0x00007fdddfa94ac3\r\n25. ? @ 0x00007fdddfb26850\r\n\r\n```",
  "created_at": "2024-01-29T17:55:34Z"
}