{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 13868,
  "instance_id": "ClickHouse__ClickHouse-13868",
  "issue_numbers": [
    "13857"
  ],
  "base_commit": "793fd5bfb1a2370ef259d0679c614812e8cceea1",
  "patch": "diff --git a/src/Functions/array/arrayCompact.cpp b/src/Functions/array/arrayCompact.cpp\nindex 5b13c8d04b9b..e0f73207da8d 100644\n--- a/src/Functions/array/arrayCompact.cpp\n+++ b/src/Functions/array/arrayCompact.cpp\n@@ -2,6 +2,7 @@\n #include <DataTypes/DataTypesDecimal.h>\n #include <Columns/ColumnsNumber.h>\n #include <Columns/ColumnDecimal.h>\n+#include <Common/HashTable/HashTable.h>\n #include <Functions/array/FunctionArrayMapped.h>\n #include <Functions/FunctionFactory.h>\n \n@@ -67,7 +68,7 @@ struct ArrayCompactImpl\n                 ++res_pos;\n                 for (; src_pos < src_offset; ++src_pos)\n                 {\n-                    if (src_values[src_pos] != src_values[src_pos - 1])\n+                    if (!bitEquals(src_values[src_pos], src_values[src_pos - 1]))\n                     {\n                         res_values[res_pos] = src_values[src_pos];\n                         ++res_pos;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01025_array_compact_generic.reference b/tests/queries/0_stateless/01025_array_compact_generic.reference\nindex f849b0c9f0e6..d95e269cd3ff 100644\n--- a/tests/queries/0_stateless/01025_array_compact_generic.reference\n+++ b/tests/queries/0_stateless/01025_array_compact_generic.reference\n@@ -1,7 +1,8 @@\n []\n+[1,nan,2]\n [1,nan,nan,2]\n-[1,nan,nan,nan,2]\n [1,NULL,2]\n+[1,NULL,nan,2]\n ['hello','','world']\n [[[]],[[],[]],[[]]]\n []\ndiff --git a/tests/queries/0_stateless/01025_array_compact_generic.sql b/tests/queries/0_stateless/01025_array_compact_generic.sql\nindex a9e20d63f20a..bea39bfbd44f 100644\n--- a/tests/queries/0_stateless/01025_array_compact_generic.sql\n+++ b/tests/queries/0_stateless/01025_array_compact_generic.sql\n@@ -2,6 +2,7 @@ SELECT arrayCompact([]);\n SELECT arrayCompact([1, 1, nan, nan, 2, 2, 2]);\n SELECT arrayCompact([1, 1, nan, nan, -nan, 2, 2, 2]);\n SELECT arrayCompact([1, 1, NULL, NULL, 2, 2, 2]);\n+SELECT arrayCompact([1, 1, NULL, NULL, nan, nan, 2, 2, 2]);\n SELECT arrayCompact(['hello', '', '', '', 'world', 'world']);\n SELECT arrayCompact([[[]], [[], []], [[], []], [[]]]);\n SELECT arrayCompact(x -> toString(intDiv(x, 3)), range(number)) FROM numbers(10);\n",
  "problem_statement": "arrayCompact UB for nan, nan  + Null\nin some cases nan === nan\r\n\r\n```\r\nSELECT arrayCompact([1, 1, nan, nan, 2, 3, 3, 3]) AS x\r\n\r\n\u250c\u2500x\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 [1,nan,nan,2,3] \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nSELECT arrayCompact([1, 1, nan, nan, 2, 3, 3, inf, inf, 3]) AS x\r\n\r\n\u250c\u2500x\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 [1,nan,nan,2,3,inf,3] \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nSELECT arrayCompact([1, 1, nan, nan, 2, 3, 3, inf, inf, 3, NULL, NULL]) AS x\r\n\r\n\u250c\u2500x\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 [1,nan,2,3,inf,3,NULL] \u2502 ???\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nSELECT arrayCompact([1, 1, inf, nan, NULL, nan, nan]) AS x\r\n\r\n\u250c\u2500x\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 [1,inf,nan,NULL,nan] \u2502  ???\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\n",
  "hints_text": "I see, it is falling back to generic implementation if the type is Nullable,\r\nand generic implementation uses the same comparison operator as for sorting, that requires total order.\nImplementation specific behaviour for nans is generally Ok.\nI can stratify it in the way that nans will be compared for bit equality.",
  "created_at": "2020-08-18T19:20:53Z"
}