You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Another division by 0
### Describe the bug

Don't set `max_block_size = 0`. I mentioned in the comment here: https://github.com/ClickHouse/ClickHouse/issues/78392 , but that issue is now closed.

### How to reproduce

Run:

```sql
CREATE TABLE t0 (c0 Int) ENGINE = Memory;
INSERT INTO TABLE FUNCTION file('<path to file>', 'Values', 'c0 Int') SELECT 1;
INSERT INTO TABLE t0 (c0) FROM INFILE '<path to file>' SETTINGS max_block_size = 0 FORMAT Values;
```

### Error message and/or stacktrace

Stack trace:
```
Logical error: 'Unread data in PeekableReadBuffer will be lost. Most likely it's a bug.'.
Stack trace (when copying this message, always include the lines below):

0. src/contrib/llvm-project/libcxx/include/__exception/exception.h:113: std::exception::exception[abi:se190107]() @ 0x000000001a572b94
1. src/base/poco/Foundation/src/Exception.cpp:27: Poco::Exception::Exception(String const&, int) @ 0x00000000377cc8a0
2. src/src/Common/Exception.cpp:108: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000256bd6eb
3. src/src/Common/Exception.h:112: DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000001a56e296
4. src/src/Common/Exception.h:130: DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x000000001a5840ef
5. src/src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp:640: DB::ValuesBlockInputFormat::readSuffix() @ 0x0000000032e2bcff
6. src/src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp:171: DB::ValuesBlockInputFormat::read() @ 0x0000000032e294f3
7. src/src/Processors/Formats/IInputFormat.cpp:19: DB::IInputFormat::generate() @ 0x000000003294e524
8. src/src/Processors/ISource.cpp:139: DB::ISource::tryGenerate() @ 0x0000000032910179
9. src/src/Processors/ISource.cpp:108: DB::ISource::work() @ 0x000000003290fa44
10. src/src/Processors/Executors/ExecutionThreadContext.cpp:53: DB::ExecutionThreadContext::executeTask() @ 0x000000003293e9ad
11. src/src/Processors/Executors/PipelineExecutor.cpp:296: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000032929f7c
12. src/src/Processors/Executors/PipelineExecutor.cpp:170: DB::PipelineExecutor::executeStep(std::atomic<bool>*) @ 0x0000000032928da3
13. src/src/Processors/Executors/PullingPipelineExecutor.cpp:54: DB::PullingPipelineExecutor::pull(DB::Chunk&) @ 0x00000000329455d4
14. src/src/Storages/StorageFile.cpp:1480: DB::StorageFileSource::generate() @ 0x000000003155c1c2
15. src/src/Processors/ISource.cpp:139: DB::ISource::tryGenerate() @ 0x0000000032910179
16. src/src/Processors/ISource.cpp:108: DB::ISource::work() @ 0x000000003290fa44
17. src/src/Processors/Executors/ExecutionThreadContext.cpp:53: DB::ExecutionThreadContext::executeTask() @ 0x000000003293e9ad
18. src/src/Processors/Executors/PipelineExecutor.cpp:296: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000032929f7c
19. src/src/Processors/Executors/PipelineExecutor.cpp:262: DB::PipelineExecutor::executeSingleThread(unsigned long) @ 0x000000003292a201
20. src/src/Processors/Executors/PipelineExecutor.cpp:454: DB::PipelineExecutor::executeImpl(unsigned long, bool) @ 0x000000003292783c
21. src/src/Processors/Executors/PipelineExecutor.cpp:128: DB::PipelineExecutor::execute(unsigned long, bool) @ 0x0000000032926b80
22. src/src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:76: void std::__function::__policy_invoker<void ()>::__call_impl[abi:se190107]<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x0000000032943c78
23. src/contrib/llvm-project/libcxx/include/__functional/function.h:716: ? @ 0x0000000025898b3a
24. src/contrib/llvm-project/libcxx/include/__type_traits/invoke.h:117: void* std::__thread_proxy[abi:se190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x00000000258a08ff
25. ? @ 0x00007ffff7ca1e2e
26. ? @ 0x00007ffff7d33a4c
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
