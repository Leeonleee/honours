{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 12005,
  "instance_id": "ClickHouse__ClickHouse-12005",
  "issue_numbers": [
    "11378"
  ],
  "base_commit": "b4695846df5fc14068980960244f9ea67ada3faa",
  "patch": "diff --git a/src/Functions/DivisionUtils.h b/src/Functions/DivisionUtils.h\nindex 5a0c1b8232a6..cab947b92a2e 100644\n--- a/src/Functions/DivisionUtils.h\n+++ b/src/Functions/DivisionUtils.h\n@@ -44,6 +44,13 @@ inline bool divisionLeadsToFPE(A a, B b)\n     return false;\n }\n \n+template <typename A, typename B>\n+inline auto checkedDivision(A a, B b)\n+{\n+    throwIfDivisionLeadsToFPE(a, b);\n+    return a / b;\n+}\n+\n \n #pragma GCC diagnostic pop\n \n@@ -56,14 +63,13 @@ struct DivideIntegralImpl\n     template <typename Result = ResultType>\n     static inline Result apply(A a, B b)\n     {\n-        throwIfDivisionLeadsToFPE(a, b);\n-\n         /// Otherwise overflow may occur due to integer promotion. Example: int8_t(-1) / uint64_t(2).\n         /// NOTE: overflow is still possible when dividing large signed number to large unsigned number or vice-versa. But it's less harmful.\n         if constexpr (is_integral_v<A> && is_integral_v<B> && (is_signed_v<A> || is_signed_v<B>))\n-            return std::make_signed_t<A>(a) / std::make_signed_t<B>(b);\n+            return checkedDivision(std::make_signed_t<A>(a),\n+                sizeof(A) > sizeof(B) ? std::make_signed_t<A>(b) : std::make_signed_t<B>(b));\n         else\n-            return a / b;\n+            return checkedDivision(a, b);\n     }\n \n #if USE_EMBEDDED_COMPILER\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01350_intdiv_nontrivial_fpe.reference b/tests/queries/0_stateless/01350_intdiv_nontrivial_fpe.reference\nnew file mode 100644\nindex 000000000000..ff5ca85eb556\n--- /dev/null\n+++ b/tests/queries/0_stateless/01350_intdiv_nontrivial_fpe.reference\n@@ -0,0 +1,3 @@\n+-36170086419038336\n+-140739635871744\n+-2147483648\ndiff --git a/tests/queries/0_stateless/01350_intdiv_nontrivial_fpe.sql b/tests/queries/0_stateless/01350_intdiv_nontrivial_fpe.sql\nnew file mode 100644\nindex 000000000000..29dfb2c3fda1\n--- /dev/null\n+++ b/tests/queries/0_stateless/01350_intdiv_nontrivial_fpe.sql\n@@ -0,0 +1,5 @@\n+select intDiv(-9223372036854775808, 255);\n+select intDiv(-9223372036854775808, 65535);\n+select intDiv(-9223372036854775808, 4294967295);\n+select intDiv(-9223372036854775808, 18446744073709551615); -- { serverError 153 }\n+select intDiv(-9223372036854775808, -1); -- { serverError 153 }\n",
  "problem_statement": "intDiv: floating point exception\n```\r\nselect intDiv(-9223372036854775808, 255)\r\n```\n",
  "hints_text": "That's a great find!",
  "created_at": "2020-06-27T22:38:57Z"
}