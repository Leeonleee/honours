{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 44026,
  "instance_id": "ClickHouse__ClickHouse-44026",
  "issue_numbers": [
    "44010"
  ],
  "base_commit": "de33901c55c99052076877800d75c516488ae028",
  "patch": "diff --git a/src/Interpreters/InterpreterCreateQuery.cpp b/src/Interpreters/InterpreterCreateQuery.cpp\nindex 50536b661854..84b8175af32c 100644\n--- a/src/Interpreters/InterpreterCreateQuery.cpp\n+++ b/src/Interpreters/InterpreterCreateQuery.cpp\n@@ -404,6 +404,8 @@ ASTPtr InterpreterCreateQuery::formatColumns(const ColumnsDescription & columns)\n             column_declaration->children.push_back(column_declaration->default_expression);\n         }\n \n+        column_declaration->ephemeral_default = column.default_desc.ephemeral_default;\n+\n         if (!column.comment.empty())\n         {\n             column_declaration->comment = std::make_shared<ASTLiteral>(Field(column.comment));\n@@ -540,11 +542,7 @@ ColumnsDescription InterpreterCreateQuery::getColumnsDescription(\n                         final_column_name));\n \n                 default_expr_list->children.emplace_back(\n-                    setAlias(\n-                        col_decl.default_specifier == \"EPHEMERAL\" ? /// can be ASTLiteral::value NULL\n-                            std::make_shared<ASTLiteral>(data_type_ptr->getDefault()) :\n-                            col_decl.default_expression->clone(),\n-                        tmp_column_name));\n+                    setAlias(col_decl.default_expression->clone(), tmp_column_name));\n             }\n             else\n                 default_expr_list->children.emplace_back(setAlias(col_decl.default_expression->clone(), col_decl.name));\n@@ -590,10 +588,7 @@ ColumnsDescription InterpreterCreateQuery::getColumnsDescription(\n                 visitor.visit(col_decl.default_expression);\n             }\n \n-            ASTPtr default_expr =\n-                col_decl.default_specifier == \"EPHEMERAL\" && col_decl.default_expression->as<ASTLiteral>()->value.isNull() ?\n-                    std::make_shared<ASTLiteral>(DataTypeFactory::instance().get(col_decl.type)->getDefault()) :\n-                    col_decl.default_expression->clone();\n+            ASTPtr default_expr = col_decl.default_expression->clone();\n \n             if (col_decl.type)\n                 column.type = name_type_it->type;\n@@ -607,6 +602,7 @@ ColumnsDescription InterpreterCreateQuery::getColumnsDescription(\n \n             column.default_desc.kind = columnDefaultKindFromString(col_decl.default_specifier);\n             column.default_desc.expression = default_expr;\n+            column.default_desc.ephemeral_default = col_decl.ephemeral_default;\n         }\n         else if (col_decl.type)\n             column.type = name_type_it->type;\ndiff --git a/src/Parsers/ASTColumnDeclaration.cpp b/src/Parsers/ASTColumnDeclaration.cpp\nindex dc5651d9f14f..c2396708a73c 100644\n--- a/src/Parsers/ASTColumnDeclaration.cpp\n+++ b/src/Parsers/ASTColumnDeclaration.cpp\n@@ -2,6 +2,7 @@\n #include <Common/quoteString.h>\n #include <IO/Operators.h>\n #include <Parsers/ASTLiteral.h>\n+#include <DataTypes/DataTypeFactory.h>\n \n \n namespace DB\n@@ -78,7 +79,7 @@ void ASTColumnDeclaration::formatImpl(const FormatSettings & settings, FormatSta\n     if (default_expression)\n     {\n         settings.ostr << ' ' << (settings.hilite ? hilite_keyword : \"\") << default_specifier << (settings.hilite ? hilite_none : \"\");\n-        if (default_specifier != \"EPHEMERAL\" || !default_expression->as<ASTLiteral>()->value.isNull())\n+        if (!ephemeral_default)\n         {\n             settings.ostr << ' ';\n             default_expression->formatImpl(settings, state, frame);\ndiff --git a/src/Parsers/ASTColumnDeclaration.h b/src/Parsers/ASTColumnDeclaration.h\nindex 5ecfb859abcb..2008e4f99d16 100644\n--- a/src/Parsers/ASTColumnDeclaration.h\n+++ b/src/Parsers/ASTColumnDeclaration.h\n@@ -16,6 +16,7 @@ class ASTColumnDeclaration : public IAST\n     std::optional<bool> null_modifier;\n     String default_specifier;\n     ASTPtr default_expression;\n+    bool ephemeral_default;\n     ASTPtr comment;\n     ASTPtr codec;\n     ASTPtr ttl;\ndiff --git a/src/Parsers/ParserCreateQuery.h b/src/Parsers/ParserCreateQuery.h\nindex e97033c51f02..ef87988aab2f 100644\n--- a/src/Parsers/ParserCreateQuery.h\n+++ b/src/Parsers/ParserCreateQuery.h\n@@ -1,5 +1,6 @@\n #pragma once\n \n+#include <Parsers/ASTFunction.h>\n #include <Parsers/ASTColumnDeclaration.h>\n #include <Parsers/ASTIdentifier_fwd.h>\n #include <Parsers/ASTLiteral.h>\n@@ -170,6 +171,7 @@ bool IParserColumnDeclaration<NameParser>::parseImpl(Pos & pos, ASTPtr & node, E\n     ASTPtr type;\n     String default_specifier;\n     std::optional<bool> null_modifier;\n+    bool ephemeral_default = false;\n     ASTPtr default_expression;\n     ASTPtr comment_expression;\n     ASTPtr codec_expression;\n@@ -235,8 +237,16 @@ bool IParserColumnDeclaration<NameParser>::parseImpl(Pos & pos, ASTPtr & node, E\n     else if (s_ephemeral.ignore(pos, expected))\n     {\n         default_specifier = s_ephemeral.getName();\n-        if (!literal_parser.parse(pos, default_expression, expected) && type)\n-            default_expression = std::make_shared<ASTLiteral>(Field());\n+        if (!expr_parser.parse(pos, default_expression, expected) && type)\n+        {\n+            ephemeral_default = true;\n+\n+            auto default_function = std::make_shared<ASTFunction>();\n+            default_function->name = \"defaultValueOfTypeName\";\n+            default_function->arguments = std::make_shared<ASTExpressionList>();\n+            default_function->arguments->children.emplace_back(std::make_shared<ASTLiteral>(type->as<ASTFunction>()->formatWithSecretsHidden()));\n+            default_expression = default_function;\n+        }\n \n         if (!default_expression && !type)\n             return false;\n@@ -302,6 +312,7 @@ bool IParserColumnDeclaration<NameParser>::parseImpl(Pos & pos, ASTPtr & node, E\n     column_declaration->default_specifier = default_specifier;\n     if (default_expression)\n     {\n+        column_declaration->ephemeral_default = ephemeral_default;\n         column_declaration->default_expression = default_expression;\n         column_declaration->children.push_back(std::move(default_expression));\n     }\ndiff --git a/src/Storages/ColumnDefault.h b/src/Storages/ColumnDefault.h\nindex 096a1f177ab1..af1be6f3bec8 100644\n--- a/src/Storages/ColumnDefault.h\n+++ b/src/Storages/ColumnDefault.h\n@@ -26,6 +26,7 @@ struct ColumnDefault\n {\n     ColumnDefaultKind kind = ColumnDefaultKind::Default;\n     ASTPtr expression;\n+    bool ephemeral_default = false;\n };\n \n \ndiff --git a/src/Storages/ColumnsDescription.cpp b/src/Storages/ColumnsDescription.cpp\nindex 5fa267a964b3..0fdb21e064f6 100644\n--- a/src/Storages/ColumnsDescription.cpp\n+++ b/src/Storages/ColumnsDescription.cpp\n@@ -123,6 +123,7 @@ void ColumnDescription::readText(ReadBuffer & buf)\n             {\n                 default_desc.kind = columnDefaultKindFromString(col_ast->default_specifier);\n                 default_desc.expression = std::move(col_ast->default_expression);\n+                default_desc.ephemeral_default = col_ast->ephemeral_default;\n             }\n \n             if (col_ast->comment)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02205_ephemeral_1.reference b/tests/queries/0_stateless/02205_ephemeral_1.reference\nindex ba39033668fe..7c034ca72ea1 100644\n--- a/tests/queries/0_stateless/02205_ephemeral_1.reference\n+++ b/tests/queries/0_stateless/02205_ephemeral_1.reference\n@@ -7,7 +7,7 @@ z\tUInt32\tDEFAULT\t5\n 7\t5\n 21\t5\n x\tUInt32\tDEFAULT\ty\t\t\t\n-y\tUInt32\tEPHEMERAL\t0\t\t\t\n+y\tUInt32\tEPHEMERAL\tdefaultValueOfTypeName(\\'UInt32\\')\t\t\t\n z\tUInt32\tDEFAULT\t5\t\t\t\n 1\t2\n 0\t2\ndiff --git a/tests/queries/0_stateless/02287_ephemeral_format_crash.reference b/tests/queries/0_stateless/02287_ephemeral_format_crash.reference\nindex e69de29bb2d1..39bbe7c68eb5 100644\n--- a/tests/queries/0_stateless/02287_ephemeral_format_crash.reference\n+++ b/tests/queries/0_stateless/02287_ephemeral_format_crash.reference\n@@ -0,0 +1,2 @@\n+CREATE TABLE default.test\\n(\\n    `a` UInt8,\\n    `b` String EPHEMERAL\\n)\\nENGINE = Memory\n+CREATE TABLE default.test\\n(\\n    `a` UInt8,\\n    `b` String EPHEMERAL 1 + 2\\n)\\nENGINE = Memory\ndiff --git a/tests/queries/0_stateless/02287_ephemeral_format_crash.sql b/tests/queries/0_stateless/02287_ephemeral_format_crash.sql\nindex 8fd9a4b43324..466532970ab8 100644\n--- a/tests/queries/0_stateless/02287_ephemeral_format_crash.sql\n+++ b/tests/queries/0_stateless/02287_ephemeral_format_crash.sql\n@@ -1,10 +1,13 @@\n DROP TABLE IF EXISTS test;\n \n CREATE TABLE test(a UInt8, b String EPHEMERAL) Engine=Memory();\n-\n+SHOW CREATE TABLE test;\n DROP TABLE test;\n \n-CREATE TABLE test(a UInt8, b EPHEMERAL String) Engine=Memory(); -- { clientError SYNTAX_ERROR }\n+CREATE TABLE test(a UInt8, b EPHEMERAL String) Engine=Memory(); -- { serverError UNKNOWN_IDENTIFIER }\n CREATE TABLE test(a UInt8, b EPHEMERAL 'a' String) Engine=Memory(); -- { clientError SYNTAX_ERROR }\n-CREATE TABLE test(a UInt8, b String EPHEMERAL test) Engine=Memory(); -- { clientError SYNTAX_ERROR }\n-CREATE TABLE test(a UInt8, b String EPHEMERAL 1+2) Engine=Memory(); -- { clientError SYNTAX_ERROR }\n+CREATE TABLE test(a UInt8, b String EPHEMERAL test) Engine=Memory(); -- { serverError UNKNOWN_IDENTIFIER }\n+\n+CREATE TABLE test(a UInt8, b String EPHEMERAL 1+2) Engine=Memory();\n+SHOW CREATE TABLE test;\n+DROP TABLE test;\ndiff --git a/tests/queries/0_stateless/02293_compatibility_ignore_auto_increment_in_create_table.reference b/tests/queries/0_stateless/02293_compatibility_ignore_auto_increment_in_create_table.reference\nindex 2db591f7e5a3..63d74e4ea1e7 100644\n--- a/tests/queries/0_stateless/02293_compatibility_ignore_auto_increment_in_create_table.reference\n+++ b/tests/queries/0_stateless/02293_compatibility_ignore_auto_increment_in_create_table.reference\n@@ -11,7 +11,7 @@ s\tString\n create table, several columns with different default specifiers\n di\tUInt8\tDEFAULT\t1\t\t\t\n id\tInt32\t\t\t\t\t\n-s\tString\tEPHEMERAL\t\\'\\'\t\t\t\n+s\tString\tEPHEMERAL\tdefaultValueOfTypeName(\\'String\\')\t\t\t\n create table failed, column +type +DEFAULT +AUTO_INCREMENT\n create table failed, column -type +DEFAULT +AUTO_INCREMENT\n create table failed, column +type +AUTO_INCREMENT +DEFAULT\n",
  "problem_statement": "Ephemeral columns with Map type crash the server\n**Describe what's wrong**\r\n\r\nCreating a table with a Map-type Ephemeral column will make the server crash on the restart because of wrongly save metadata.\r\n\r\nFiddle to reproduce: https://fiddle.clickhouse.com/81fc3a83-f7ea-43c2-afad-2e2940d04e8c\r\n\r\n**Does it reproduce on recent release?**\r\n\r\nTested on version 22.11.1.1286.\r\n\r\n**How to reproduce**\r\n\r\n* Use version 22.11.x\r\n* Use the fiddle above to reproduce.\r\n\r\n**Expected behavior**\r\n\r\nWhen creating a `EPHEMERAL` columns, a default value is assigned.\r\nExample with a Int32:\r\n```sql\r\nCREATE TABLE name (\r\n  example_col Int32 EPHEMERAL\r\n) -- ... engine stuff here ...\r\n```\r\n\r\nMetadata will assign a default value:\r\n```sql\r\nCREATE TABLE name (\r\n  example_col Int32 EPHEMERAL 0\r\n) -- ... engine stuff here ...\r\n```\r\n\r\nBut, with Map-type, no default value gets assigned, only a `()` (empty parenthesis).\r\n\r\n**Error message and/or stacktrace**\r\n\r\n```\r\n2022.12.07 14:59:29.359153 [ 11464597 ] {} <Error> Application: DB::Exception: Syntax error (in file /Users/vlourme/Desktop/ch/store/75e/75e717de-1bbd-4011-802c-acd04e9a3409/bug_ephemeral.sql): failed at position 118 ('(') (line 4, col 41): (),\r\n    `result` Int32 DEFAULT (data['number']) * 2\r\n)\r\nENGINE = MergeTree\r\nORDER BY id\r\nSETTINGS index_granularity = 8192\r\n. Expected one of: literal, NULL, number, Bool, true, false, string literal, NOT, COMMENT, CODEC, TTL, token, Comma, ClosingRoundBracket: Cannot parse definition from metadata file /Users/vlourme/Desktop/ch/store/75e/75e717de-1bbd-4011-802c-acd04e9a3409/bug_ephemeral.sql\r\n```\r\n\r\n**Additional context**\r\n\r\nThe issue can't be fixed by setting a default expression after `EPHEMERAL`, this, for example will not work:\r\n```sql\r\nCREATE TABLE bug_ephemeral (\r\n    id Int32,\r\n    data Map(String, Int32) EPHEMERAL {},\r\n    result Int DEFAULT data['number'] * 2\r\n)\r\nEngine = MergeTree()\r\nORDER BY (id);\r\n```\r\n\r\nBut this, is accepted:\r\n```sql\r\nCREATE TABLE bug_ephemeral (\r\n    id Int32,\r\n    data Int32 EPHEMERAL 12,\r\n    result Int DEFAULT data * 2\r\n)\r\nEngine = MergeTree()\r\nORDER BY (id);\r\n```\r\n\n",
  "hints_text": "",
  "created_at": "2022-12-08T04:50:43Z"
}