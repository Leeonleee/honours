{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 79373,
  "instance_id": "ClickHouse__ClickHouse-79373",
  "issue_numbers": [
    "78829"
  ],
  "base_commit": "0680c11faddf874af4aed2ad587cbe5c6a00b487",
  "patch": "diff --git a/src/Common/OptimizedRegularExpression.cpp b/src/Common/OptimizedRegularExpression.cpp\nindex 5d44497c3f45..dbba8b5c8cf9 100644\n--- a/src/Common/OptimizedRegularExpression.cpp\n+++ b/src/Common/OptimizedRegularExpression.cpp\n@@ -401,7 +401,7 @@ const char * analyzeImpl(\n                 }\n             }\n \n-            if (max_length >= MIN_LENGTH_FOR_STRSTR || (!is_first_call && max_length > 0))\n+            if (max_length >= MIN_LENGTH_FOR_STRSTR || ((!is_first_call || has_alternative_on_depth_0) && max_length > 0))\n             {\n                 required_substring.literal = candidate_it->first;\n                 required_substring.prefix = candidate_it->second;\n@@ -421,7 +421,7 @@ const char * analyzeImpl(\n     if (has_alternative_on_depth_0)\n     {\n         /// compare the quality of required substring and alternatives and choose the better one.\n-        if (shortest_literal_length(global_alternatives) < required_substring.literal.size())\n+        if (global_alternatives.empty() || shortest_literal_length(global_alternatives) < required_substring.literal.size())\n             global_alternatives = {required_substring};\n         Literals next_alternatives;\n         /// this two vals are useless, xxx|xxx cannot be trivial nor prefix.\n",
  "test_patch": "diff --git a/src/Common/tests/gtest_optimize_re.cpp b/src/Common/tests/gtest_optimize_re.cpp\nindex d6735c3ccfe9..b0d66d7486df 100644\n--- a/src/Common/tests/gtest_optimize_re.cpp\n+++ b/src/Common/tests/gtest_optimize_re.cpp\n@@ -19,6 +19,11 @@ TEST(OptimizeRE, analyze)\n     };\n     test_f(\"abc\", \"abc\", {}, true, true);\n     test_f(\"c([^k]*)de\", \"\");\n+    test_f(\"a|XYZ\", \"\", {\"a\", \"XYZ\"});\n+    test_f(\"XYZ|a\", \"\", {\"XYZ\", \"a\"});\n+    test_f(\"[Ff]|XYZ\", \"\", {\"\", \"XYZ\"});\n+    test_f(\"XYZ|[Ff]\", \"\", {\"XYZ\", \"\"});\n+    test_f(\"XYZ|ABC|[Ff]\", \"\", {\"XYZ\", \"ABC\", \"\"});\n     test_f(\"(?-s)bob\", \"bob\", {}, false, true);\n     test_f(\"(?s)bob\", \"bob\", {}, false, true);\n     test_f(\"(?ssss\", \"\");\ndiff --git a/tests/queries/0_stateless/03443_index_match_alternatives.reference b/tests/queries/0_stateless/03443_index_match_alternatives.reference\nnew file mode 100644\nindex 000000000000..001c06f0001b\n--- /dev/null\n+++ b/tests/queries/0_stateless/03443_index_match_alternatives.reference\n@@ -0,0 +1,22 @@\n+-- Without index\n+John\n+John\n+John\n+John\n+-- With index\n+John\n+John\n+John\n+John\n+-- Assert selected granules\n+Granules: 3/3\n+Granules: 1/3\n+\n+Granules: 3/3\n+Granules: 1/3\n+\n+Granules: 3/3\n+Granules: 3/3\n+\n+Granules: 3/3\n+Granules: 3/3\ndiff --git a/tests/queries/0_stateless/03443_index_match_alternatives.sql b/tests/queries/0_stateless/03443_index_match_alternatives.sql\nnew file mode 100644\nindex 000000000000..fe147975fbb2\n--- /dev/null\n+++ b/tests/queries/0_stateless/03443_index_match_alternatives.sql\n@@ -0,0 +1,39 @@\n+DROP TABLE IF EXISTS 03443_data;\n+\n+CREATE TABLE 03443_data\n+(\n+    id Int32,\n+    name String,\n+    INDEX idx_name name TYPE ngrambf_v1(1, 1024, 3, 0) GRANULARITY 1\n+)\n+ENGINE = MergeTree ORDER BY id SETTINGS index_granularity = 1\n+AS\n+SELECT 1, 'John' UNION ALL\n+SELECT 2, 'Ksenia' UNION ALL\n+SELECT 3, 'Alice';\n+\n+SELECT '-- Without index';\n+SELECT name FROM 03443_data WHERE match(name, 'J|XYZ') SETTINGS use_skip_indexes = 0;\n+SELECT name FROM 03443_data WHERE match(name, 'XYZ|J') SETTINGS use_skip_indexes = 0;\n+SELECT name FROM 03443_data WHERE match(name, '[J]|XYZ') SETTINGS use_skip_indexes = 0;\n+SELECT name FROM 03443_data WHERE match(name, 'XYZ|[J]') SETTINGS use_skip_indexes = 0;\n+\n+SELECT '-- With index';\n+SELECT name FROM 03443_data WHERE match(name, 'J|XYZ') SETTINGS use_skip_indexes = 1;\n+SELECT name FROM 03443_data WHERE match(name, 'XYZ|J') SETTINGS use_skip_indexes = 1;\n+SELECT name FROM 03443_data WHERE match(name, '[J]|XYZ') SETTINGS use_skip_indexes = 1;\n+SELECT name FROM 03443_data WHERE match(name, 'XYZ|[J]') SETTINGS use_skip_indexes = 1;\n+\n+SELECT '-- Assert selected granules';\n+\n+SET parallel_replicas_local_plan = 1;\n+\n+SELECT trim(leading ' ' from explain) FROM (EXPLAIN indexes=1 SELECT name FROM 03443_data WHERE match(name, 'J|XYZ')) WHERE explain LIKE '%Granules: %' SETTINGS use_skip_indexes = 1;\n+SELECT '';\n+SELECT trim(leading ' ' from explain) FROM (EXPLAIN indexes=1 SELECT name FROM 03443_data WHERE match(name, 'XYZ|J')) WHERE explain LIKE '%Granules: %' SETTINGS use_skip_indexes = 1;\n+SELECT '';\n+SELECT trim(leading ' ' from explain) FROM (EXPLAIN indexes=1 SELECT name FROM 03443_data WHERE match(name, '[J]|XYZ')) WHERE explain LIKE '%Granules: %' SETTINGS use_skip_indexes = 1;\n+SELECT '';\n+SELECT trim(leading ' ' from explain) FROM (EXPLAIN indexes=1 SELECT name FROM 03443_data WHERE match(name, 'XYZ|[J]')) WHERE explain LIKE '%Granules: %' SETTINGS use_skip_indexes = 1;\n+\n+DROP TABLE 03443_data;\n",
  "problem_statement": "Text index for `match` incorrectly drops granules\n```sql\nCREATE TABLE users (\n  uid Int16,\n  name String,\n  INDEX name name TYPE ngrambf_v1(3, 1024, 3, 0) GRANULARITY 1\n)\nENGINE=MergeTree\nORDER BY uid\nSETTINGS index_granularity=1;\n\nINSERT INTO users VALUES (1231, 'John');\nINSERT INTO users VALUES (6666, 'Ksenia');\nINSERT INTO users VALUES (8888, 'Alice');\n\nSELECT count() FROM users WHERE match(name, '[J]|XYZ') SETTINGS use_skip_indexes=1;\nSELECT count() FROM users WHERE match(name, '[J]|XYZ') SETTINGS use_skip_indexes=0;\n\nexplain indexes=1 SELECT * FROM users WHERE match(name, '[J]|XYZ');\n```\n\n\n### Describe what's wrong\n\nExample queries return inconsistent result:\n```sql\nSELECT count() FROM users WHERE match(name, '[J]|XYZ') SETTINGS use_skip_indexes=1;\nSELECT count() FROM users WHERE match(name, '[J]|XYZ') SETTINGS use_skip_indexes=0;\nSELECT count() FROM users WHERE match(name, 'XYZ|[J]') SETTINGS use_skip_indexes=1;\nSELECT count() FROM users WHERE match(name, 'XYZ|[J]') SETTINGS use_skip_indexes=0;\n0\n1\n1\n1\n```\n\n### Does it reproduce on the most recent release?\n\nYes\n\n### How to reproduce\n\nSee example above.\n\n### Expected behavior\n\n_No response_\n\n### Error message and/or stacktrace\n\n_No response_\n\n### Additional context\n\n_No response_\n",
  "hints_text": "When analyzing **match** functions to figure out which exact literals can be used for Bloom filter optimization:\nFor a pattern like 'a|b', we can extract alternatives: \"a\" and \"b\" - similar to `IN ('a','b')`\nBut for patterns like '[J]|XYZ', current implement just get [\"XYZ\"] as alternatives (like IN ('XYZ')), which caused the bug",
  "created_at": "2025-04-21T13:24:54Z"
}