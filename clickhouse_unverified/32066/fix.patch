diff --git a/src/Storages/JoinSettings.cpp b/src/Storages/JoinSettings.cpp
deleted file mode 100644
index 8a2699746da1..000000000000
--- a/src/Storages/JoinSettings.cpp
+++ /dev/null
@@ -1,41 +0,0 @@
-#include <Storages/JoinSettings.h>
-#include <Parsers/ASTCreateQuery.h>
-#include <Parsers/ASTSetQuery.h>
-#include <Parsers/ASTFunction.h>
-#include <Common/Exception.h>
-
-
-namespace DB
-{
-
-namespace ErrorCodes
-{
-    extern const int UNKNOWN_SETTING;
-}
-
-IMPLEMENT_SETTINGS_TRAITS(joinSettingsTraits, LIST_OF_JOIN_SETTINGS)
-
-void JoinSettings::loadFromQuery(ASTStorage & storage_def)
-{
-    if (storage_def.settings)
-    {
-        try
-        {
-            applyChanges(storage_def.settings->changes);
-        }
-        catch (Exception & e)
-        {
-            if (e.code() == ErrorCodes::UNKNOWN_SETTING)
-                e.addMessage("for storage " + storage_def.engine->name);
-            throw;
-        }
-    }
-    else
-    {
-        auto settings_ast = std::make_shared<ASTSetQuery>();
-        settings_ast->is_standalone = false;
-        storage_def.set(storage_def.settings, settings_ast);
-    }
-}
-
-}
diff --git a/src/Storages/JoinSettings.h b/src/Storages/JoinSettings.h
deleted file mode 100644
index 13be557a439e..000000000000
--- a/src/Storages/JoinSettings.h
+++ /dev/null
@@ -1,30 +0,0 @@
-#pragma once
-
-#include <Core/BaseSettings.h>
-#include <Core/Settings.h>
-
-
-namespace DB
-{
-class ASTStorage;
-
-
-#define JOIN_RELATED_SETTINGS(M) \
-    M(Bool, persistent, true, "Disable setting to avoid the overhead of writing to disk for StorageJoin", 0)
-
-#define LIST_OF_JOIN_SETTINGS(M) \
-    JOIN_RELATED_SETTINGS(M) \
-    FORMAT_FACTORY_SETTINGS(M)
-
-DECLARE_SETTINGS_TRAITS(joinSettingsTraits, LIST_OF_JOIN_SETTINGS)
-
-
-/** Settings for the Join engine.
-  * Could be loaded from a CREATE TABLE query (SETTINGS clause).
-  */
-struct JoinSettings : public BaseSettings<joinSettingsTraits>
-{
-    void loadFromQuery(ASTStorage & storage_def);
-};
-
-}
diff --git a/src/Storages/StorageJoin.cpp b/src/Storages/StorageJoin.cpp
index 6c903b22846b..3a9b42f7371f 100644
--- a/src/Storages/StorageJoin.cpp
+++ b/src/Storages/StorageJoin.cpp
@@ -261,9 +261,7 @@ void registerStorageJoin(StorageFactory & factory)
                     disk_name = setting.value.get<String>();
                 else if (setting.name == "persistent")
                 {
-                    auto join_settings = std::make_unique<JoinSettings>();
-                    join_settings->loadFromQuery(*args.storage_def);
-                    persistent = join_settings->persistent;
+                    persistent = setting.value.get<bool>();
                 }
                 else
                     throw Exception("Unknown setting " + setting.name + " for storage " + args.engine_name, ErrorCodes::BAD_ARGUMENTS);
diff --git a/src/Storages/StorageJoin.h b/src/Storages/StorageJoin.h
index 1b9d34c46fa4..ee685830a6cb 100644
--- a/src/Storages/StorageJoin.h
+++ b/src/Storages/StorageJoin.h
@@ -5,7 +5,6 @@
 #include <Common/RWLock.h>
 #include <Storages/StorageSet.h>
 #include <Storages/TableLockHolder.h>
-#include <Storages/JoinSettings.h>
 #include <Parsers/ASTTablesInSelectQuery.h>
 
 
