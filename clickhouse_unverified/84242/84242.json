{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 84242,
  "instance_id": "ClickHouse__ClickHouse-84242",
  "issue_numbers": [
    "83131"
  ],
  "base_commit": "575cdc80c6484507684df2e637a14f2c4deb5a32",
  "patch": "diff --git a/src/Analyzer/Resolve/QueryAnalyzer.cpp b/src/Analyzer/Resolve/QueryAnalyzer.cpp\nindex 36aac41fece4..59a5e0d62d91 100644\n--- a/src/Analyzer/Resolve/QueryAnalyzer.cpp\n+++ b/src/Analyzer/Resolve/QueryAnalyzer.cpp\n@@ -2557,6 +2557,13 @@ ProjectionName QueryAnalyzer::resolveWindow(QueryTreeNodePtr & node, IdentifierR\n \n         parent_window_node = window_node_it->second;\n \n+        auto [_, inserted] = windows_in_resolve_process.emplace(parent_window_node.get());\n+        if (!inserted)\n+            throw Exception(ErrorCodes::UNSUPPORTED_METHOD,\n+                \"Recursive window {}. In scope {}\",\n+                node->formatASTForErrorMessage(),\n+                scope.scope_node->formatASTForErrorMessage());\n+\n         if (identifier_node)\n         {\n             node = parent_window_node->clone();\n@@ -2638,6 +2645,7 @@ ProjectionName QueryAnalyzer::resolveWindow(QueryTreeNodePtr & node, IdentifierR\n             frame_end_offset_projection_names.empty() ? \"\" : frame_end_offset_projection_names.front());\n     }\n \n+    windows_in_resolve_process.erase(parent_window_node.get());\n     return result_projection_name;\n }\n \ndiff --git a/src/Analyzer/Resolve/QueryAnalyzer.h b/src/Analyzer/Resolve/QueryAnalyzer.h\nindex 631e2067696f..800130f31c82 100644\n--- a/src/Analyzer/Resolve/QueryAnalyzer.h\n+++ b/src/Analyzer/Resolve/QueryAnalyzer.h\n@@ -1,6 +1,7 @@\n #pragma once\n \n #include <unordered_map>\n+#include <unordered_set>\n #include <Interpreters/Context_fwd.h>\n #include <Analyzer/HashUtils.h>\n #include <Analyzer/IQueryTreeNode.h>\n@@ -264,6 +265,9 @@ class QueryAnalyzer\n     /// CTEs that are currently in resolve process\n     QueryTreeNodePtrWithHashSet ctes_in_resolve_process;\n \n+    /// Window definitions that are currently in resolve process\n+    std::unordered_set<IQueryTreeNode *> windows_in_resolve_process;\n+\n     std::unordered_map<IQueryTreeNode *, QueryTreeNodePtr> cte_copy_to_original_map;\n \n     /// Function name to user defined lambda map\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03576_analyzer_recursive_window.reference b/tests/queries/0_stateless/03576_analyzer_recursive_window.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/03576_analyzer_recursive_window.sql b/tests/queries/0_stateless/03576_analyzer_recursive_window.sql\nnew file mode 100644\nindex 000000000000..80ba78f5d337\n--- /dev/null\n+++ b/tests/queries/0_stateless/03576_analyzer_recursive_window.sql\n@@ -0,0 +1,7 @@\n+SELECT 1\n+WINDOW w0 AS (ORDER BY min(1) OVER (w0))\n+SETTINGS allow_experimental_analyzer = 1; -- { serverError UNSUPPORTED_METHOD }\n+\n+SELECT 1\n+WINDOW w0 AS (ORDER BY min(1) OVER (w0))\n+SETTINGS allow_experimental_analyzer = 0; -- { serverError ILLEGAL_AGGREGATION }\n",
  "problem_statement": "Worse error message with the analyzer\n### Describe the bug\n\nAn invalid nested window function seems to give a better error with the old analyzer than the new one. Could the new one be improved to be on the same level?\n\n### How to reproduce\n\nFor old analyzer: https://fiddle.clickhouse.com/bafdf922-c41b-4b43-a2a9-c266f6a061d1\n```\nDB::Exception: Received from localhost:9000. DB::Exception: Window function min(1) OVER (w0) is found in WINDOW in query: \nWhile processing min(1) OVER (w0). (ILLEGAL_AGGREGATION)\n```\nFor new analyzer: https://fiddle.clickhouse.com/57fa2b7d-b6c5-4031-a523-1c1d05f5e3d4\n```\nDB::Exception: Stack size too large. Stack address: 0x79a7a4bdf000, \nframe address: 0x79a7a4fdedc0, stack size: 4194880, \nmaximum stack size: 8388608. (TOO_DEEP_RECURSION)\n```\n\n### Error message and/or stacktrace\n\n_No response_\n",
  "hints_text": "",
  "created_at": "2025-07-22T19:03:09Z"
}