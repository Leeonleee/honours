{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 67013,
  "instance_id": "ClickHouse__ClickHouse-67013",
  "issue_numbers": [
    "67742"
  ],
  "base_commit": "39d4a7bf1e775e592e53695fadde4ad4c85db889",
  "patch": "diff --git a/docs/en/engines/table-engines/mergetree-family/mergetree.md b/docs/en/engines/table-engines/mergetree-family/mergetree.md\nindex 0b693775dde8..74f1295ef964 100644\n--- a/docs/en/engines/table-engines/mergetree-family/mergetree.md\n+++ b/docs/en/engines/table-engines/mergetree-family/mergetree.md\n@@ -989,7 +989,11 @@ ALTER TABLE tab DROP STATISTICS a;\n These lightweight statistics aggregate information about distribution of values in columns. Statistics are stored in every part and updated when every insert comes.\n They can be used for prewhere optimization only if we enable `set allow_statistics_optimize = 1`.\n \n-#### Available Types of Column Statistics {#available-types-of-column-statistics}\n+### Available Types of Column Statistics {#available-types-of-column-statistics}\n+\n+- `MinMax`\n+\n+    The minimum and maximum column value which allows to estimate the selectivity of range filters on numeric columns.\n \n - `TDigest`\n \n@@ -1003,6 +1007,27 @@ They can be used for prewhere optimization only if we enable `set allow_statisti\n \n     [Count-min](https://en.wikipedia.org/wiki/Count%E2%80%93min_sketch) sketches which provide an approximate count of the frequency of each value in a column.\n \n+\n+### Supported Data Types {#supported-data-types}\n+\n+|           | (U)Int* | Float* | Decimal(*) | Date* | Boolean | Enum* | (Fixed)String    |\n+|-----------|---------|--------|------------|-------|---------|-------|------------------|\n+| count_min | \u2714       | \u2714      | \u2714          | \u2714     | \u2714       | \u2714     | \u2714                |\n+| MinMax    | \u2714       | \u2714      | \u2714          | \u2714     | \u2714       | \u2714     | \u2717                |\n+| TDigest   | \u2714       | \u2714      | \u2714          | \u2714     | \u2714       | \u2714     | \u2717                |\n+| Uniq      | \u2714       | \u2714      | \u2714          | \u2714     | \u2714       | \u2714     | \u2714                |\n+\n+\n+### Supported Operations {#supported-operations}\n+\n+|           | Equality filters (==) | Range filters (>, >=, <, <=) |\n+|-----------|-----------------------|------------------------------|\n+| count_min | \u2714                     | \u2717                            |\n+| MinMax    | \u2717                     | \u2714                            |\n+| TDigest   | \u2717                     | \u2714                            |\n+| Uniq      | \u2714                     | \u2717                            |\n+\n+\n ## Column-level Settings {#column-level-settings}\n \n Certain MergeTree settings can be overridden at column level:\ndiff --git a/src/Storages/Statistics/Statistics.cpp b/src/Storages/Statistics/Statistics.cpp\nindex 6372c804e0e9..795963bd55d6 100644\n--- a/src/Storages/Statistics/Statistics.cpp\n+++ b/src/Storages/Statistics/Statistics.cpp\n@@ -9,6 +9,7 @@\n #include <Storages/ColumnsDescription.h>\n #include <Storages/Statistics/ConditionSelectivityEstimator.h>\n #include <Storages/Statistics/StatisticsCountMinSketch.h>\n+#include <Storages/Statistics/StatisticsMinMax.h>\n #include <Storages/Statistics/StatisticsTDigest.h>\n #include <Storages/Statistics/StatisticsUniq.h>\n #include <Storages/StatisticsDescription.h>\n@@ -101,6 +102,8 @@ Float64 ColumnStatistics::estimateLess(const Field & val) const\n {\n     if (stats.contains(StatisticsType::TDigest))\n         return stats.at(StatisticsType::TDigest)->estimateLess(val);\n+    if (stats.contains(StatisticsType::MinMax))\n+        return stats.at(StatisticsType::MinMax)->estimateLess(val);\n     return rows * ConditionSelectivityEstimator::default_cond_range_factor;\n }\n \n@@ -121,6 +124,14 @@ Float64 ColumnStatistics::estimateEqual(const Field & val) const\n     if (stats.contains(StatisticsType::CountMinSketch))\n         return stats.at(StatisticsType::CountMinSketch)->estimateEqual(val);\n #endif\n+    if (stats.contains(StatisticsType::Uniq))\n+    {\n+        UInt64 cardinality = stats.at(StatisticsType::Uniq)->estimateCardinality();\n+        if (cardinality == 0 || rows == 0)\n+            return 0;\n+        return 1.0 / cardinality * rows; /// assume uniform distribution\n+    }\n+\n     return rows * ConditionSelectivityEstimator::default_cond_equal_factor;\n }\n \n@@ -198,6 +209,9 @@ void MergeTreeStatisticsFactory::registerValidator(StatisticsType stats_type, Va\n \n MergeTreeStatisticsFactory::MergeTreeStatisticsFactory()\n {\n+    registerValidator(StatisticsType::MinMax, minMaxStatisticsValidator);\n+    registerCreator(StatisticsType::MinMax, minMaxStatisticsCreator);\n+\n     registerValidator(StatisticsType::TDigest, tdigestStatisticsValidator);\n     registerCreator(StatisticsType::TDigest, tdigestStatisticsCreator);\n \n@@ -234,7 +248,7 @@ ColumnStatisticsPtr MergeTreeStatisticsFactory::get(const ColumnDescription & co\n     {\n         auto it = creators.find(type);\n         if (it == creators.end())\n-            throw Exception(ErrorCodes::INCORRECT_QUERY, \"Unknown statistic type '{}'. Available types: 'tdigest' 'uniq' and 'count_min'\", type);\n+            throw Exception(ErrorCodes::INCORRECT_QUERY, \"Unknown statistic type '{}'. Available types: 'count_min', 'minmax', 'tdigest' and 'uniq'\", type);\n         auto stat_ptr = (it->second)(desc, column_desc.type);\n         column_stat->stats[type] = stat_ptr;\n     }\ndiff --git a/src/Storages/Statistics/StatisticsCountMinSketch.cpp b/src/Storages/Statistics/StatisticsCountMinSketch.cpp\nindex 6dbd0625d3d4..1a2459c230de 100644\n--- a/src/Storages/Statistics/StatisticsCountMinSketch.cpp\n+++ b/src/Storages/Statistics/StatisticsCountMinSketch.cpp\n@@ -1,4 +1,3 @@\n-\n #include <Storages/Statistics/StatisticsCountMinSketch.h>\n #include <DataTypes/DataTypeLowCardinality.h>\n #include <DataTypes/DataTypeNullable.h>\ndiff --git a/src/Storages/Statistics/StatisticsMinMax.cpp b/src/Storages/Statistics/StatisticsMinMax.cpp\nnew file mode 100644\nindex 000000000000..27072d225de4\n--- /dev/null\n+++ b/src/Storages/Statistics/StatisticsMinMax.cpp\n@@ -0,0 +1,86 @@\n+#include <Storages/Statistics/StatisticsMinMax.h>\n+#include <DataTypes/DataTypeLowCardinality.h>\n+#include <DataTypes/DataTypeNullable.h>\n+#include <IO/ReadHelpers.h>\n+#include <IO/WriteHelpers.h>\n+\n+#include <algorithm>\n+\n+\n+namespace DB\n+{\n+\n+namespace ErrorCodes\n+{\n+extern const int ILLEGAL_STATISTICS;\n+}\n+\n+StatisticsMinMax::StatisticsMinMax(const SingleStatisticsDescription & description, const DataTypePtr & data_type_)\n+    : IStatistics(description)\n+    , data_type(data_type_)\n+{\n+}\n+\n+void StatisticsMinMax::update(const ColumnPtr & column)\n+{\n+    for (size_t row = 0; row < column->size(); ++row)\n+    {\n+        if (column->isNullAt(row))\n+            continue;\n+\n+        auto value = column->getFloat64(row);\n+        min = std::min(value, min);\n+        max = std::max(value, max);\n+    }\n+    row_count += column->size();\n+}\n+\n+void StatisticsMinMax::serialize(WriteBuffer & buf)\n+{\n+    writeIntBinary(row_count, buf);\n+    writeFloatBinary(min, buf);\n+    writeFloatBinary(max, buf);\n+}\n+\n+void StatisticsMinMax::deserialize(ReadBuffer & buf)\n+{\n+    readIntBinary(row_count, buf);\n+    readFloatBinary(min, buf);\n+    readFloatBinary(max, buf);\n+}\n+\n+Float64 StatisticsMinMax::estimateLess(const Field & val) const\n+{\n+    if (row_count == 0)\n+        return 0;\n+\n+    auto val_as_float = StatisticsUtils::tryConvertToFloat64(val, data_type);\n+    if (!val_as_float.has_value())\n+        return 0;\n+\n+    if (val_as_float < min)\n+        return 0;\n+\n+    if (val_as_float > max)\n+        return row_count;\n+\n+    if (min == max)\n+        return (val_as_float != max) ? 0 : row_count;\n+\n+    return ((*val_as_float - min) / (max - min)) * row_count;\n+}\n+\n+void minMaxStatisticsValidator(const SingleStatisticsDescription & /*description*/, const DataTypePtr & data_type)\n+{\n+    auto inner_data_type = removeNullable(data_type);\n+    inner_data_type = removeLowCardinalityAndNullable(inner_data_type);\n+    if (!inner_data_type->isValueRepresentedByNumber())\n+        throw Exception(ErrorCodes::ILLEGAL_STATISTICS, \"Statistics of type 'minmax' do not support type {}\", data_type->getName());\n+}\n+\n+StatisticsPtr minMaxStatisticsCreator(const SingleStatisticsDescription & description, const DataTypePtr & data_type)\n+{\n+    return std::make_shared<StatisticsMinMax>(description, data_type);\n+}\n+\n+}\ndiff --git a/src/Storages/Statistics/StatisticsMinMax.h b/src/Storages/Statistics/StatisticsMinMax.h\nnew file mode 100644\nindex 000000000000..c60fa810c47f\n--- /dev/null\n+++ b/src/Storages/Statistics/StatisticsMinMax.h\n@@ -0,0 +1,33 @@\n+#pragma once\n+\n+#include <Storages/Statistics/Statistics.h>\n+#include <DataTypes/IDataType.h>\n+\n+\n+namespace DB\n+{\n+\n+class StatisticsMinMax : public IStatistics\n+{\n+public:\n+    StatisticsMinMax(const SingleStatisticsDescription & statistics_description, const DataTypePtr & data_type_);\n+\n+    void update(const ColumnPtr & column) override;\n+\n+    void serialize(WriteBuffer & buf) override;\n+    void deserialize(ReadBuffer & buf) override;\n+\n+    Float64 estimateLess(const Field & val) const override;\n+\n+private:\n+    Float64 min = std::numeric_limits<Float64>::max();\n+    Float64 max = std::numeric_limits<Float64>::min();\n+    UInt64 row_count = 0;\n+\n+    DataTypePtr data_type;\n+};\n+\n+void minMaxStatisticsValidator(const SingleStatisticsDescription & description, const DataTypePtr & data_type);\n+StatisticsPtr minMaxStatisticsCreator(const SingleStatisticsDescription & description, const DataTypePtr & data_type);\n+\n+}\ndiff --git a/src/Storages/Statistics/StatisticsUniq.cpp b/src/Storages/Statistics/StatisticsUniq.cpp\nindex 07311b5b86d0..5e5b7a67b04a 100644\n--- a/src/Storages/Statistics/StatisticsUniq.cpp\n+++ b/src/Storages/Statistics/StatisticsUniq.cpp\n@@ -56,7 +56,7 @@ void uniqStatisticsValidator(const SingleStatisticsDescription & /*description*/\n {\n     DataTypePtr inner_data_type = removeNullable(data_type);\n     inner_data_type = removeLowCardinalityAndNullable(inner_data_type);\n-    if (!inner_data_type->isValueRepresentedByNumber())\n+    if (!inner_data_type->isValueRepresentedByNumber() && !isStringOrFixedString(inner_data_type))\n         throw Exception(ErrorCodes::ILLEGAL_STATISTICS, \"Statistics of type 'uniq' do not support type {}\", data_type->getName());\n }\n \ndiff --git a/src/Storages/StatisticsDescription.cpp b/src/Storages/StatisticsDescription.cpp\nindex 646341247580..4e0d901d0c75 100644\n--- a/src/Storages/StatisticsDescription.cpp\n+++ b/src/Storages/StatisticsDescription.cpp\n@@ -50,7 +50,9 @@ static StatisticsType stringToStatisticsType(String type)\n         return StatisticsType::Uniq;\n     if (type == \"count_min\")\n         return StatisticsType::CountMinSketch;\n-    throw Exception(ErrorCodes::INCORRECT_QUERY, \"Unknown statistics type: {}. Supported statistics types are 'tdigest', 'uniq' and 'count_min'.\", type);\n+    if (type == \"minmax\")\n+        return StatisticsType::MinMax;\n+    throw Exception(ErrorCodes::INCORRECT_QUERY, \"Unknown statistics type: {}. Supported statistics types are 'count_min', 'minmax', 'tdigest' and 'uniq'.\", type);\n }\n \n String SingleStatisticsDescription::getTypeName() const\n@@ -63,8 +65,10 @@ String SingleStatisticsDescription::getTypeName() const\n             return \"Uniq\";\n         case StatisticsType::CountMinSketch:\n             return \"count_min\";\n+        case StatisticsType::MinMax:\n+            return \"minmax\";\n         default:\n-            throw Exception(ErrorCodes::LOGICAL_ERROR, \"Unknown statistics type: {}. Supported statistics types are 'tdigest', 'uniq' and 'count_min'.\", type);\n+            throw Exception(ErrorCodes::LOGICAL_ERROR, \"Unknown statistics type: {}. Supported statistics types are 'count_min', 'minmax', 'tdigest' and 'uniq'.\", type);\n     }\n }\n \ndiff --git a/src/Storages/StatisticsDescription.h b/src/Storages/StatisticsDescription.h\nindex 46927f1418ce..3780de3e9679 100644\n--- a/src/Storages/StatisticsDescription.h\n+++ b/src/Storages/StatisticsDescription.h\n@@ -14,6 +14,7 @@ enum class StatisticsType : UInt8\n     TDigest = 0,\n     Uniq = 1,\n     CountMinSketch = 2,\n+    MinMax = 3,\n \n     Max = 63,\n };\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02864_statistics_create_materialize_drop.reference b/tests/queries/0_stateless/02864_statistics_create_materialize_drop.reference\nnew file mode 100644\nindex 000000000000..4ca2c5e5f9bd\n--- /dev/null\n+++ b/tests/queries/0_stateless/02864_statistics_create_materialize_drop.reference\n@@ -0,0 +1,5 @@\n+Test create statistics:\n+CREATE TABLE default.tab\\n(\\n    `a` LowCardinality(Int64) STATISTICS(tdigest, uniq, count_min, minmax),\\n    `b` LowCardinality(Nullable(String)) STATISTICS(uniq, count_min),\\n    `c` LowCardinality(Nullable(Int64)) STATISTICS(tdigest, uniq, count_min, minmax),\\n    `d` DateTime STATISTICS(tdigest, uniq, count_min, minmax),\\n    `pk` String\\n)\\nENGINE = MergeTree\\nORDER BY pk\\nSETTINGS index_granularity = 8192\n+Test materialize and drop statistics:\n+CREATE TABLE default.tab\\n(\\n    `a` LowCardinality(Int64),\\n    `b` LowCardinality(Nullable(String)) STATISTICS(uniq, count_min),\\n    `c` LowCardinality(Nullable(Int64)),\\n    `d` DateTime,\\n    `pk` String\\n)\\nENGINE = MergeTree\\nORDER BY pk\\nSETTINGS index_granularity = 8192\n+CREATE TABLE default.tab\\n(\\n    `a` LowCardinality(Int64),\\n    `b` LowCardinality(Nullable(String)),\\n    `c` LowCardinality(Nullable(Int64)),\\n    `d` DateTime,\\n    `pk` String\\n)\\nENGINE = MergeTree\\nORDER BY pk\\nSETTINGS index_granularity = 8192\ndiff --git a/tests/queries/0_stateless/02864_statistics_create_materialize_drop.sql b/tests/queries/0_stateless/02864_statistics_create_materialize_drop.sql\nnew file mode 100644\nindex 000000000000..90a57c99624b\n--- /dev/null\n+++ b/tests/queries/0_stateless/02864_statistics_create_materialize_drop.sql\n@@ -0,0 +1,35 @@\n+-- Tags: no-fasttest\n+\n+DROP TABLE IF EXISTS tab SYNC;\n+\n+SET allow_experimental_statistics = 1;\n+SET allow_statistics_optimize = 1;\n+SET allow_suspicious_low_cardinality_types=1;\n+SET mutations_sync = 2;\n+\n+\n+SELECT 'Test create statistics:';\n+\n+CREATE TABLE tab\n+(\n+    a LowCardinality(Int64) STATISTICS(count_min, minmax, tdigest, uniq),\n+    b LowCardinality(Nullable(String)) STATISTICS(count_min, uniq),\n+    c LowCardinality(Nullable(Int64)) STATISTICS(count_min, minmax, tdigest, uniq),\n+    d DateTime STATISTICS(count_min, minmax, tdigest, uniq),\n+    pk String,\n+) Engine = MergeTree() ORDER BY pk;\n+\n+INSERT INTO tab select number, number, number, toDateTime(number), generateUUIDv4() FROM system.numbers LIMIT 10000;\n+SHOW CREATE TABLE tab;\n+\n+\n+SELECT 'Test materialize and drop statistics:';\n+ALTER TABLE tab DROP STATISTICS a, b, c, d;\n+ALTER TABLE tab ADD STATISTICS b TYPE count_min, uniq;\n+ALTER TABLE tab MATERIALIZE STATISTICS b;\n+SHOW CREATE TABLE tab;\n+\n+ALTER TABLE tab DROP STATISTICS b;\n+SHOW CREATE TABLE tab;\n+\n+DROP TABLE IF EXISTS tab SYNC;\ndiff --git a/tests/queries/0_stateless/02864_statistics_ddl.sql b/tests/queries/0_stateless/02864_statistics_ddl.sql\nindex 32b56a842b7f..bcaaa9e7b614 100644\n--- a/tests/queries/0_stateless/02864_statistics_ddl.sql\n+++ b/tests/queries/0_stateless/02864_statistics_ddl.sql\n@@ -7,6 +7,7 @@ SET mutations_sync = 1;\n \n DROP TABLE IF EXISTS tab;\n \n+SET allow_experimental_statistics = 0;\n -- Error case: Can't create statistics when allow_experimental_statistics = 0\n CREATE TABLE tab (col Float64 STATISTICS(tdigest)) Engine = MergeTree() ORDER BY tuple(); -- { serverError INCORRECT_QUERY }\n \n@@ -46,7 +47,7 @@ CREATE TABLE tab (col Map(UInt64, UInt64) STATISTICS(tdigest)) Engine = MergeTre\n CREATE TABLE tab (col UUID STATISTICS(tdigest)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }\n CREATE TABLE tab (col IPv6 STATISTICS(tdigest)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }\n \n---   uniq requires data_type.isValueRepresentedByInteger\n+--   uniq requires data_type.isValueRepresentedByInteger or (Fixed)String\n --     These types work:\n CREATE TABLE tab (col UInt8 STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;\n CREATE TABLE tab (col UInt256 STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;\n@@ -61,9 +62,9 @@ CREATE TABLE tab (col IPv4 STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple\n CREATE TABLE tab (col Nullable(UInt8) STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;\n CREATE TABLE tab (col LowCardinality(UInt8) STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;\n CREATE TABLE tab (col LowCardinality(Nullable(UInt8)) STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;\n+CREATE TABLE tab (col String STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;\n+CREATE TABLE tab (col FixedString(1) STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;\n --     These types don't work:\n-CREATE TABLE tab (col String STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }\n-CREATE TABLE tab (col FixedString(1) STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }\n CREATE TABLE tab (col Array(Float64) STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }\n CREATE TABLE tab (col Tuple(Float64, Float64) STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }\n CREATE TABLE tab (col Map(UInt64, UInt64) STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }\n@@ -94,6 +95,30 @@ CREATE TABLE tab (col Map(UInt64, UInt64) STATISTICS(count_min)) Engine = MergeT\n CREATE TABLE tab (col UUID STATISTICS(count_min)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }\n CREATE TABLE tab (col IPv6 STATISTICS(count_min)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }\n \n+--   minmax requires data_type.isValueRepresentedByInteger\n+--     These types work:\n+CREATE TABLE tab (col UInt8 STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;\n+CREATE TABLE tab (col UInt256 STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;\n+CREATE TABLE tab (col Float32 STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;\n+CREATE TABLE tab (col Decimal32(3) STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;\n+CREATE TABLE tab (col Date STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;\n+CREATE TABLE tab (col Date32 STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;\n+CREATE TABLE tab (col DateTime STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;\n+CREATE TABLE tab (col DateTime64 STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;\n+CREATE TABLE tab (col Enum('hello', 'world') STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;\n+CREATE TABLE tab (col IPv4 STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;\n+CREATE TABLE tab (col Nullable(UInt8) STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;\n+CREATE TABLE tab (col LowCardinality(UInt8) STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;\n+CREATE TABLE tab (col LowCardinality(Nullable(UInt8)) STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;\n+--     These types don't work:\n+CREATE TABLE tab (col String STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }\n+CREATE TABLE tab (col FixedString(1) STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }\n+CREATE TABLE tab (col Array(Float64) STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }\n+CREATE TABLE tab (col Tuple(Float64, Float64) STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }\n+CREATE TABLE tab (col Map(UInt64, UInt64) STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }\n+CREATE TABLE tab (col UUID STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }\n+CREATE TABLE tab (col IPv6 STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }\n+\n -- CREATE TABLE was easy, ALTER is more fun\n \n CREATE TABLE tab\n@@ -173,6 +198,13 @@ ALTER TABLE tab MODIFY STATISTICS f64 TYPE count_min; ALTER TABLE tab DROP STATI\n --     Doesn't work:\n ALTER TABLE tab ADD STATISTICS a TYPE count_min; -- { serverError ILLEGAL_STATISTICS }\n ALTER TABLE tab MODIFY STATISTICS a TYPE count_min; -- { serverError ILLEGAL_STATISTICS }\n+--   minmax\n+--     Works:\n+ALTER TABLE tab ADD STATISTICS f64 TYPE minmax; ALTER TABLE tab DROP STATISTICS f64;\n+ALTER TABLE tab MODIFY STATISTICS f64 TYPE minmax; ALTER TABLE tab DROP STATISTICS f64;\n+--     Doesn't work:\n+ALTER TABLE tab ADD STATISTICS a TYPE minmax; -- { serverError ILLEGAL_STATISTICS }\n+ALTER TABLE tab MODIFY STATISTICS a TYPE minmax; -- { serverError ILLEGAL_STATISTICS }\n \n -- Any data type changes on columns with statistics are disallowed, for simplicity even if the new data type is compatible with all existing\n -- statistics objects (e.g. tdigest can be created on Float64 and UInt64)\ndiff --git a/tests/queries/0_stateless/02864_statistics_predicates.reference b/tests/queries/0_stateless/02864_statistics_predicates.reference\nindex ffbd7269e050..c2d74300fa9d 100644\n--- a/tests/queries/0_stateless/02864_statistics_predicates.reference\n+++ b/tests/queries/0_stateless/02864_statistics_predicates.reference\n@@ -3,6 +3,8 @@ u64 and =\n 10\n 10\n 10\n+10\n+0\n 0\n 0\n 0\n@@ -11,11 +13,14 @@ u64 and =\n 10\n 10\n 10\n+10\n u64 and <\n 70\n 70\n 70\n 70\n+70\n+80\n 80\n 80\n 80\n@@ -24,11 +29,14 @@ u64 and <\n 70\n 70\n 70\n+70\n f64 and =\n 10\n 10\n 10\n 10\n+10\n+0\n 0\n 0\n 0\n@@ -37,6 +45,8 @@ f64 and =\n 10\n 10\n 10\n+10\n+0\n 0\n 0\n 0\n@@ -46,6 +56,8 @@ f64 and <\n 70\n 70\n 70\n+70\n+80\n 80\n 80\n 80\n@@ -54,6 +66,8 @@ f64 and <\n 70\n 70\n 70\n+70\n+80\n 80\n 80\n 80\n@@ -63,6 +77,8 @@ dt and =\n 0\n 0\n 0\n+0\n+10\n 10\n 10\n 10\n@@ -72,6 +88,8 @@ dt and <\n 10000\n 10000\n 10000\n+10000\n+70\n 70\n 70\n 70\n@@ -89,6 +107,10 @@ b and =\n 5000\n 5000\n 5000\n+5000\n+5000\n+5000\n+0\n 0\n 0\n 0\n@@ -96,3 +118,4 @@ b and =\n s and =\n 10\n 10\n+10\ndiff --git a/tests/queries/0_stateless/02864_statistics_predicates.sql b/tests/queries/0_stateless/02864_statistics_predicates.sql\nindex 779116cf19af..473a7bc95ad6 100644\n--- a/tests/queries/0_stateless/02864_statistics_predicates.sql\n+++ b/tests/queries/0_stateless/02864_statistics_predicates.sql\n@@ -12,46 +12,56 @@ CREATE TABLE tab\n (\n     u64                 UInt64,\n     u64_tdigest         UInt64 STATISTICS(tdigest),\n+    u64_minmax          UInt64 STATISTICS(minmax),\n     u64_count_min       UInt64 STATISTICS(count_min),\n     u64_uniq            UInt64 STATISTICS(uniq),\n     f64                 Float64,\n     f64_tdigest         Float64 STATISTICS(tdigest),\n+    f64_minmax          Float64 STATISTICS(minmax),\n     f64_count_min       Float64 STATISTICS(count_min),\n     f64_uniq            Float64 STATISTICS(uniq),\n     dt                  DateTime,\n     dt_tdigest          DateTime STATISTICS(tdigest),\n+    dt_minmax           DateTime STATISTICS(minmax),\n     dt_count_min        DateTime STATISTICS(count_min),\n     dt_uniq             DateTime STATISTICS(uniq),\n     b                   Bool,\n     b_tdigest           Bool STATISTICS(tdigest),\n+    b_minmax            Bool STATISTICS(minmax),\n     b_count_min         Bool STATISTICS(count_min),\n     b_uniq              Bool STATISTICS(uniq),\n     s                   String,\n  -- s_tdigest           String STATISTICS(tdigest), -- not supported by tdigest\n-    s_count_min         String STATISTICS(count_min)\n- -- s_uniq              String STATISTICS(uniq), -- not supported by uniq\n+ -- s_minmax            String STATISTICS(minmax), -- not supported by minmax\n+    s_count_min         String STATISTICS(count_min),\n+    s_uniq              String STATISTICS(uniq)\n ) Engine = MergeTree() ORDER BY tuple()\n SETTINGS min_bytes_for_wide_part = 0;\n \n INSERT INTO tab\n -- SELECT number % 10000, number % 1000, -(number % 100) FROM system.numbers LIMIT 10000;\n-SELECT number % 1000,\n+SELECT number % 1000, -- u64\n        number % 1000,\n        number % 1000,\n        number % 1000,\n        number % 1000,\n+       number % 1000, -- f64\n        number % 1000,\n        number % 1000,\n        number % 1000,\n        number % 1000,\n+       number % 1000, -- dt\n        number % 1000,\n        number % 1000,\n        number % 1000,\n+       number % 1000,\n+       number % 2,    -- b\n        number % 2,\n        number % 2,\n        number % 2,\n        number % 2,\n        toString(number % 1000),\n+       toString(number % 1000),\n        toString(number % 1000)\n FROM system.numbers LIMIT 10000;\n \n@@ -61,21 +71,25 @@ SELECT 'u64 and =';\n \n SELECT count(*) FROM tab WHERE u64 = 7;\n SELECT count(*) FROM tab WHERE u64_tdigest = 7;\n+SELECT count(*) FROM tab WHERE u64_minmax = 7;\n SELECT count(*) FROM tab WHERE u64_count_min = 7;\n SELECT count(*) FROM tab WHERE u64_uniq = 7;\n \n SELECT count(*) FROM tab WHERE u64 = 7.7;\n SELECT count(*) FROM tab WHERE u64_tdigest = 7.7;\n+SELECT count(*) FROM tab WHERE u64_minmax = 7.7;\n SELECT count(*) FROM tab WHERE u64_count_min = 7.7;\n SELECT count(*) FROM tab WHERE u64_uniq = 7.7;\n \n SELECT count(*) FROM tab WHERE u64 = '7';\n SELECT count(*) FROM tab WHERE u64_tdigest = '7';\n+SELECT count(*) FROM tab WHERE u64_minmax = '7';\n SELECT count(*) FROM tab WHERE u64_count_min = '7';\n SELECT count(*) FROM tab WHERE u64_uniq = '7';\n \n SELECT count(*) FROM tab WHERE u64 = '7.7'; -- { serverError TYPE_MISMATCH }\n SELECT count(*) FROM tab WHERE u64_tdigest = '7.7'; -- { serverError TYPE_MISMATCH }\n+SELECT count(*) FROM tab WHERE u64_minmax = '7.7'; -- { serverError TYPE_MISMATCH }\n SELECT count(*) FROM tab WHERE u64_count_min = '7.7'; -- { serverError TYPE_MISMATCH }\n SELECT count(*) FROM tab WHERE u64_uniq = '7.7'; -- { serverError TYPE_MISMATCH }\n \n@@ -83,21 +97,25 @@ SELECT 'u64 and <';\n \n SELECT count(*) FROM tab WHERE u64 < 7;\n SELECT count(*) FROM tab WHERE u64_tdigest < 7;\n+SELECT count(*) FROM tab WHERE u64_minmax < 7;\n SELECT count(*) FROM tab WHERE u64_count_min < 7;\n SELECT count(*) FROM tab WHERE u64_uniq < 7;\n \n SELECT count(*) FROM tab WHERE u64 < 7.7;\n SELECT count(*) FROM tab WHERE u64_tdigest < 7.7;\n+SELECT count(*) FROM tab WHERE u64_minmax < 7.7;\n SELECT count(*) FROM tab WHERE u64_count_min < 7.7;\n SELECT count(*) FROM tab WHERE u64_uniq < 7.7;\n \n SELECT count(*) FROM tab WHERE u64 < '7';\n SELECT count(*) FROM tab WHERE u64_tdigest < '7';\n+SELECT count(*) FROM tab WHERE u64_minmax < '7';\n SELECT count(*) FROM tab WHERE u64_count_min < '7';\n SELECT count(*) FROM tab WHERE u64_uniq < '7';\n \n SELECT count(*) FROM tab WHERE u64 < '7.7'; -- { serverError TYPE_MISMATCH }\n SELECT count(*) FROM tab WHERE u64_tdigest < '7.7'; -- { serverError TYPE_MISMATCH }\n+SELECT count(*) FROM tab WHERE u64_minmax < '7.7'; -- { serverError TYPE_MISMATCH }\n SELECT count(*) FROM tab WHERE u64_count_min < '7.7'; -- { serverError TYPE_MISMATCH }\n SELECT count(*) FROM tab WHERE u64_uniq < '7.7'; -- { serverError TYPE_MISMATCH }\n \n@@ -107,21 +125,25 @@ SELECT 'f64 and =';\n \n SELECT count(*) FROM tab WHERE f64 = 7;\n SELECT count(*) FROM tab WHERE f64_tdigest = 7;\n+SELECT count(*) FROM tab WHERE f64_minmax = 7;\n SELECT count(*) FROM tab WHERE f64_count_min = 7;\n SELECT count(*) FROM tab WHERE f64_uniq = 7;\n \n SELECT count(*) FROM tab WHERE f64 = 7.7;\n SELECT count(*) FROM tab WHERE f64_tdigest = 7.7;\n+SELECT count(*) FROM tab WHERE f64_minmax = 7.7;\n SELECT count(*) FROM tab WHERE f64_count_min = 7.7;\n SELECT count(*) FROM tab WHERE f64_uniq = 7.7;\n \n SELECT count(*) FROM tab WHERE f64 = '7';\n SELECT count(*) FROM tab WHERE f64_tdigest = '7';\n+SELECT count(*) FROM tab WHERE f64_minmax = '7';\n SELECT count(*) FROM tab WHERE f64_count_min = '7';\n SELECT count(*) FROM tab WHERE f64_uniq = '7';\n \n SELECT count(*) FROM tab WHERE f64 = '7.7';\n SELECT count(*) FROM tab WHERE f64_tdigest = '7.7';\n+SELECT count(*) FROM tab WHERE f64_minmax = '7.7';\n SELECT count(*) FROM tab WHERE f64_count_min = '7.7';\n SELECT count(*) FROM tab WHERE f64_uniq = '7.7';\n \n@@ -129,21 +151,25 @@ SELECT 'f64 and <';\n \n SELECT count(*) FROM tab WHERE f64 < 7;\n SELECT count(*) FROM tab WHERE f64_tdigest < 7;\n+SELECT count(*) FROM tab WHERE f64_minmax < 7;\n SELECT count(*) FROM tab WHERE f64_count_min < 7;\n SELECT count(*) FROM tab WHERE f64_uniq < 7;\n \n SELECT count(*) FROM tab WHERE f64 < 7.7;\n SELECT count(*) FROM tab WHERE f64_tdigest < 7.7;\n+SELECT count(*) FROM tab WHERE f64_minmax < 7.7;\n SELECT count(*) FROM tab WHERE f64_count_min < 7.7;\n SELECT count(*) FROM tab WHERE f64_uniq < 7.7;\n \n SELECT count(*) FROM tab WHERE f64 < '7';\n SELECT count(*) FROM tab WHERE f64_tdigest < '7';\n+SELECT count(*) FROM tab WHERE f64_minmax < '7';\n SELECT count(*) FROM tab WHERE f64_count_min < '7';\n SELECT count(*) FROM tab WHERE f64_uniq < '7';\n \n SELECT count(*) FROM tab WHERE f64 < '7.7';\n SELECT count(*) FROM tab WHERE f64_tdigest < '7.7';\n+SELECT count(*) FROM tab WHERE f64_minmax < '7.7';\n SELECT count(*) FROM tab WHERE f64_count_min < '7.7';\n SELECT count(*) FROM tab WHERE f64_uniq < '7.7';\n \n@@ -153,11 +179,13 @@ SELECT 'dt and =';\n \n SELECT count(*) FROM tab WHERE dt = '2024-08-08 11:12:13';\n SELECT count(*) FROM tab WHERE dt_tdigest = '2024-08-08 11:12:13';\n+SELECT count(*) FROM tab WHERE dt_minmax = '2024-08-08 11:12:13';\n SELECT count(*) FROM tab WHERE dt_count_min = '2024-08-08 11:12:13';\n SELECT count(*) FROM tab WHERE dt_uniq = '2024-08-08 11:12:13';\n \n SELECT count(*) FROM tab WHERE dt = 7;\n SELECT count(*) FROM tab WHERE dt_tdigest = 7;\n+SELECT count(*) FROM tab WHERE dt_minmax = 7;\n SELECT count(*) FROM tab WHERE dt_count_min = 7;\n SELECT count(*) FROM tab WHERE dt_uniq = 7;\n \n@@ -165,11 +193,13 @@ SELECT 'dt and <';\n \n SELECT count(*) FROM tab WHERE dt < '2024-08-08 11:12:13';\n SELECT count(*) FROM tab WHERE dt_tdigest < '2024-08-08 11:12:13';\n+SELECT count(*) FROM tab WHERE dt_minmax < '2024-08-08 11:12:13';\n SELECT count(*) FROM tab WHERE dt_count_min < '2024-08-08 11:12:13';\n SELECT count(*) FROM tab WHERE dt_uniq < '2024-08-08 11:12:13';\n \n SELECT count(*) FROM tab WHERE dt < 7;\n SELECT count(*) FROM tab WHERE dt_tdigest < 7;\n+SELECT count(*) FROM tab WHERE dt_minmax < 7;\n SELECT count(*) FROM tab WHERE dt_count_min < 7;\n SELECT count(*) FROM tab WHERE dt_uniq < 7;\n \n@@ -179,21 +209,25 @@ SELECT 'b and =';\n \n SELECT count(*) FROM tab WHERE b = true;\n SELECT count(*) FROM tab WHERE b_tdigest = true;\n+SELECT count(*) FROM tab WHERE b_minmax = true;\n SELECT count(*) FROM tab WHERE b_count_min = true;\n SELECT count(*) FROM tab WHERE b_uniq = true;\n \n SELECT count(*) FROM tab WHERE b = 'true';\n SELECT count(*) FROM tab WHERE b_tdigest = 'true';\n+SELECT count(*) FROM tab WHERE b_minmax = 'true';\n SELECT count(*) FROM tab WHERE b_count_min = 'true';\n SELECT count(*) FROM tab WHERE b_uniq = 'true';\n \n SELECT count(*) FROM tab WHERE b = 1;\n SELECT count(*) FROM tab WHERE b_tdigest = 1;\n+SELECT count(*) FROM tab WHERE b_minmax = 1;\n SELECT count(*) FROM tab WHERE b_count_min = 1;\n SELECT count(*) FROM tab WHERE b_uniq = 1;\n \n SELECT count(*) FROM tab WHERE b = 1.1;\n SELECT count(*) FROM tab WHERE b_tdigest = 1.1;\n+SELECT count(*) FROM tab WHERE b_minmax = 1.1;\n SELECT count(*) FROM tab WHERE b_count_min = 1.1;\n SELECT count(*) FROM tab WHERE b_uniq = 1.1;\n \n@@ -203,12 +237,14 @@ SELECT 's and =';\n \n SELECT count(*) FROM tab WHERE s = 7; -- { serverError NO_COMMON_TYPE }\n -- SELECT count(*) FROM tab WHERE s_tdigest = 7; -- not supported\n+-- SELECT count(*) FROM tab WHERE s_minmax = 7; -- not supported\n SELECT count(*) FROM tab WHERE s_count_min = 7; -- { serverError NO_COMMON_TYPE }\n--- SELECT count(*) FROM tab WHERE s_uniq = 7; -- not supported\n+SELECT count(*) FROM tab WHERE s_uniq = 7; -- { serverError NO_COMMON_TYPE }\n \n SELECT count(*) FROM tab WHERE s = '7';\n -- SELECT count(*) FROM tab WHERE s_tdigest = '7'; -- not supported\n+-- SELECT count(*) FROM tab WHERE s_minmax = '7'; -- not supported\n SELECT count(*) FROM tab WHERE s_count_min = '7';\n--- SELECT count(*) FROM tab WHERE s_uniq = '7'; -- not supported\n+SELECT count(*) FROM tab WHERE s_uniq = '7';\n \n DROP TABLE tab;\n",
  "problem_statement": "Logical error: 'Statistics 'tdigest' does not support estimating value of type String'.\nhttps://s3.amazonaws.com/clickhouse-test-reports/67727/fc651cc0c61feb37e9cf104612cc0ac0cd7448e9/ast_fuzzer__ubsan_.html\r\n\r\nRevert this: https://github.com/ClickHouse/ClickHouse/pull/59357\n",
  "hints_text": "",
  "created_at": "2024-07-24T09:49:43Z"
}