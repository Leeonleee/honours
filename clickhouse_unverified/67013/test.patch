diff --git a/tests/queries/0_stateless/02864_statistics_create_materialize_drop.reference b/tests/queries/0_stateless/02864_statistics_create_materialize_drop.reference
new file mode 100644
index 000000000000..4ca2c5e5f9bd
--- /dev/null
+++ b/tests/queries/0_stateless/02864_statistics_create_materialize_drop.reference
@@ -0,0 +1,5 @@
+Test create statistics:
+CREATE TABLE default.tab
(
    `a` LowCardinality(Int64) STATISTICS(tdigest, uniq, count_min, minmax),
    `b` LowCardinality(Nullable(String)) STATISTICS(uniq, count_min),
    `c` LowCardinality(Nullable(Int64)) STATISTICS(tdigest, uniq, count_min, minmax),
    `d` DateTime STATISTICS(tdigest, uniq, count_min, minmax),
    `pk` String
)
ENGINE = MergeTree
ORDER BY pk
SETTINGS index_granularity = 8192
+Test materialize and drop statistics:
+CREATE TABLE default.tab
(
    `a` LowCardinality(Int64),
    `b` LowCardinality(Nullable(String)) STATISTICS(uniq, count_min),
    `c` LowCardinality(Nullable(Int64)),
    `d` DateTime,
    `pk` String
)
ENGINE = MergeTree
ORDER BY pk
SETTINGS index_granularity = 8192
+CREATE TABLE default.tab
(
    `a` LowCardinality(Int64),
    `b` LowCardinality(Nullable(String)),
    `c` LowCardinality(Nullable(Int64)),
    `d` DateTime,
    `pk` String
)
ENGINE = MergeTree
ORDER BY pk
SETTINGS index_granularity = 8192
diff --git a/tests/queries/0_stateless/02864_statistics_create_materialize_drop.sql b/tests/queries/0_stateless/02864_statistics_create_materialize_drop.sql
new file mode 100644
index 000000000000..90a57c99624b
--- /dev/null
+++ b/tests/queries/0_stateless/02864_statistics_create_materialize_drop.sql
@@ -0,0 +1,35 @@
+-- Tags: no-fasttest
+
+DROP TABLE IF EXISTS tab SYNC;
+
+SET allow_experimental_statistics = 1;
+SET allow_statistics_optimize = 1;
+SET allow_suspicious_low_cardinality_types=1;
+SET mutations_sync = 2;
+
+
+SELECT 'Test create statistics:';
+
+CREATE TABLE tab
+(
+    a LowCardinality(Int64) STATISTICS(count_min, minmax, tdigest, uniq),
+    b LowCardinality(Nullable(String)) STATISTICS(count_min, uniq),
+    c LowCardinality(Nullable(Int64)) STATISTICS(count_min, minmax, tdigest, uniq),
+    d DateTime STATISTICS(count_min, minmax, tdigest, uniq),
+    pk String,
+) Engine = MergeTree() ORDER BY pk;
+
+INSERT INTO tab select number, number, number, toDateTime(number), generateUUIDv4() FROM system.numbers LIMIT 10000;
+SHOW CREATE TABLE tab;
+
+
+SELECT 'Test materialize and drop statistics:';
+ALTER TABLE tab DROP STATISTICS a, b, c, d;
+ALTER TABLE tab ADD STATISTICS b TYPE count_min, uniq;
+ALTER TABLE tab MATERIALIZE STATISTICS b;
+SHOW CREATE TABLE tab;
+
+ALTER TABLE tab DROP STATISTICS b;
+SHOW CREATE TABLE tab;
+
+DROP TABLE IF EXISTS tab SYNC;
diff --git a/tests/queries/0_stateless/02864_statistics_ddl.sql b/tests/queries/0_stateless/02864_statistics_ddl.sql
index 32b56a842b7f..bcaaa9e7b614 100644
--- a/tests/queries/0_stateless/02864_statistics_ddl.sql
+++ b/tests/queries/0_stateless/02864_statistics_ddl.sql
@@ -7,6 +7,7 @@ SET mutations_sync = 1;
 
 DROP TABLE IF EXISTS tab;
 
+SET allow_experimental_statistics = 0;
 -- Error case: Can't create statistics when allow_experimental_statistics = 0
 CREATE TABLE tab (col Float64 STATISTICS(tdigest)) Engine = MergeTree() ORDER BY tuple(); -- { serverError INCORRECT_QUERY }
 
@@ -46,7 +47,7 @@ CREATE TABLE tab (col Map(UInt64, UInt64) STATISTICS(tdigest)) Engine = MergeTre
 CREATE TABLE tab (col UUID STATISTICS(tdigest)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }
 CREATE TABLE tab (col IPv6 STATISTICS(tdigest)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }
 
---   uniq requires data_type.isValueRepresentedByInteger
+--   uniq requires data_type.isValueRepresentedByInteger or (Fixed)String
 --     These types work:
 CREATE TABLE tab (col UInt8 STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;
 CREATE TABLE tab (col UInt256 STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;
@@ -61,9 +62,9 @@ CREATE TABLE tab (col IPv4 STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple
 CREATE TABLE tab (col Nullable(UInt8) STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;
 CREATE TABLE tab (col LowCardinality(UInt8) STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;
 CREATE TABLE tab (col LowCardinality(Nullable(UInt8)) STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;
+CREATE TABLE tab (col String STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;
+CREATE TABLE tab (col FixedString(1) STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;
 --     These types don't work:
-CREATE TABLE tab (col String STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }
-CREATE TABLE tab (col FixedString(1) STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }
 CREATE TABLE tab (col Array(Float64) STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }
 CREATE TABLE tab (col Tuple(Float64, Float64) STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }
 CREATE TABLE tab (col Map(UInt64, UInt64) STATISTICS(uniq)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }
@@ -94,6 +95,30 @@ CREATE TABLE tab (col Map(UInt64, UInt64) STATISTICS(count_min)) Engine = MergeT
 CREATE TABLE tab (col UUID STATISTICS(count_min)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }
 CREATE TABLE tab (col IPv6 STATISTICS(count_min)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }
 
+--   minmax requires data_type.isValueRepresentedByInteger
+--     These types work:
+CREATE TABLE tab (col UInt8 STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;
+CREATE TABLE tab (col UInt256 STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;
+CREATE TABLE tab (col Float32 STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;
+CREATE TABLE tab (col Decimal32(3) STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;
+CREATE TABLE tab (col Date STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;
+CREATE TABLE tab (col Date32 STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;
+CREATE TABLE tab (col DateTime STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;
+CREATE TABLE tab (col DateTime64 STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;
+CREATE TABLE tab (col Enum('hello', 'world') STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;
+CREATE TABLE tab (col IPv4 STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;
+CREATE TABLE tab (col Nullable(UInt8) STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;
+CREATE TABLE tab (col LowCardinality(UInt8) STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;
+CREATE TABLE tab (col LowCardinality(Nullable(UInt8)) STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); DROP TABLE tab;
+--     These types don't work:
+CREATE TABLE tab (col String STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }
+CREATE TABLE tab (col FixedString(1) STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }
+CREATE TABLE tab (col Array(Float64) STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }
+CREATE TABLE tab (col Tuple(Float64, Float64) STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }
+CREATE TABLE tab (col Map(UInt64, UInt64) STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }
+CREATE TABLE tab (col UUID STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }
+CREATE TABLE tab (col IPv6 STATISTICS(minmax)) Engine = MergeTree() ORDER BY tuple(); -- { serverError ILLEGAL_STATISTICS }
+
 -- CREATE TABLE was easy, ALTER is more fun
 
 CREATE TABLE tab
@@ -173,6 +198,13 @@ ALTER TABLE tab MODIFY STATISTICS f64 TYPE count_min; ALTER TABLE tab DROP STATI
 --     Doesn't work:
 ALTER TABLE tab ADD STATISTICS a TYPE count_min; -- { serverError ILLEGAL_STATISTICS }
 ALTER TABLE tab MODIFY STATISTICS a TYPE count_min; -- { serverError ILLEGAL_STATISTICS }
+--   minmax
+--     Works:
+ALTER TABLE tab ADD STATISTICS f64 TYPE minmax; ALTER TABLE tab DROP STATISTICS f64;
+ALTER TABLE tab MODIFY STATISTICS f64 TYPE minmax; ALTER TABLE tab DROP STATISTICS f64;
+--     Doesn't work:
+ALTER TABLE tab ADD STATISTICS a TYPE minmax; -- { serverError ILLEGAL_STATISTICS }
+ALTER TABLE tab MODIFY STATISTICS a TYPE minmax; -- { serverError ILLEGAL_STATISTICS }
 
 -- Any data type changes on columns with statistics are disallowed, for simplicity even if the new data type is compatible with all existing
 -- statistics objects (e.g. tdigest can be created on Float64 and UInt64)
diff --git a/tests/queries/0_stateless/02864_statistics_predicates.reference b/tests/queries/0_stateless/02864_statistics_predicates.reference
index ffbd7269e050..c2d74300fa9d 100644
--- a/tests/queries/0_stateless/02864_statistics_predicates.reference
+++ b/tests/queries/0_stateless/02864_statistics_predicates.reference
@@ -3,6 +3,8 @@ u64 and =
 10
 10
 10
+10
+0
 0
 0
 0
@@ -11,11 +13,14 @@ u64 and =
 10
 10
 10
+10
 u64 and <
 70
 70
 70
 70
+70
+80
 80
 80
 80
@@ -24,11 +29,14 @@ u64 and <
 70
 70
 70
+70
 f64 and =
 10
 10
 10
 10
+10
+0
 0
 0
 0
@@ -37,6 +45,8 @@ f64 and =
 10
 10
 10
+10
+0
 0
 0
 0
@@ -46,6 +56,8 @@ f64 and <
 70
 70
 70
+70
+80
 80
 80
 80
@@ -54,6 +66,8 @@ f64 and <
 70
 70
 70
+70
+80
 80
 80
 80
@@ -63,6 +77,8 @@ dt and =
 0
 0
 0
+0
+10
 10
 10
 10
@@ -72,6 +88,8 @@ dt and <
 10000
 10000
 10000
+10000
+70
 70
 70
 70
@@ -89,6 +107,10 @@ b and =
 5000
 5000
 5000
+5000
+5000
+5000
+0
 0
 0
 0
@@ -96,3 +118,4 @@ b and =
 s and =
 10
 10
+10
diff --git a/tests/queries/0_stateless/02864_statistics_predicates.sql b/tests/queries/0_stateless/02864_statistics_predicates.sql
index 779116cf19af..473a7bc95ad6 100644
--- a/tests/queries/0_stateless/02864_statistics_predicates.sql
+++ b/tests/queries/0_stateless/02864_statistics_predicates.sql
@@ -12,46 +12,56 @@ CREATE TABLE tab
 (
     u64                 UInt64,
     u64_tdigest         UInt64 STATISTICS(tdigest),
+    u64_minmax          UInt64 STATISTICS(minmax),
     u64_count_min       UInt64 STATISTICS(count_min),
     u64_uniq            UInt64 STATISTICS(uniq),
     f64                 Float64,
     f64_tdigest         Float64 STATISTICS(tdigest),
+    f64_minmax          Float64 STATISTICS(minmax),
     f64_count_min       Float64 STATISTICS(count_min),
     f64_uniq            Float64 STATISTICS(uniq),
     dt                  DateTime,
     dt_tdigest          DateTime STATISTICS(tdigest),
+    dt_minmax           DateTime STATISTICS(minmax),
     dt_count_min        DateTime STATISTICS(count_min),
     dt_uniq             DateTime STATISTICS(uniq),
     b                   Bool,
     b_tdigest           Bool STATISTICS(tdigest),
+    b_minmax            Bool STATISTICS(minmax),
     b_count_min         Bool STATISTICS(count_min),
     b_uniq              Bool STATISTICS(uniq),
     s                   String,
  -- s_tdigest           String STATISTICS(tdigest), -- not supported by tdigest
-    s_count_min         String STATISTICS(count_min)
- -- s_uniq              String STATISTICS(uniq), -- not supported by uniq
+ -- s_minmax            String STATISTICS(minmax), -- not supported by minmax
+    s_count_min         String STATISTICS(count_min),
+    s_uniq              String STATISTICS(uniq)
 ) Engine = MergeTree() ORDER BY tuple()
 SETTINGS min_bytes_for_wide_part = 0;
 
 INSERT INTO tab
 -- SELECT number % 10000, number % 1000, -(number % 100) FROM system.numbers LIMIT 10000;
-SELECT number % 1000,
+SELECT number % 1000, -- u64
        number % 1000,
        number % 1000,
        number % 1000,
        number % 1000,
+       number % 1000, -- f64
        number % 1000,
        number % 1000,
        number % 1000,
        number % 1000,
+       number % 1000, -- dt
        number % 1000,
        number % 1000,
        number % 1000,
+       number % 1000,
+       number % 2,    -- b
        number % 2,
        number % 2,
        number % 2,
        number % 2,
        toString(number % 1000),
+       toString(number % 1000),
        toString(number % 1000)
 FROM system.numbers LIMIT 10000;
 
@@ -61,21 +71,25 @@ SELECT 'u64 and =';
 
 SELECT count(*) FROM tab WHERE u64 = 7;
 SELECT count(*) FROM tab WHERE u64_tdigest = 7;
+SELECT count(*) FROM tab WHERE u64_minmax = 7;
 SELECT count(*) FROM tab WHERE u64_count_min = 7;
 SELECT count(*) FROM tab WHERE u64_uniq = 7;
 
 SELECT count(*) FROM tab WHERE u64 = 7.7;
 SELECT count(*) FROM tab WHERE u64_tdigest = 7.7;
+SELECT count(*) FROM tab WHERE u64_minmax = 7.7;
 SELECT count(*) FROM tab WHERE u64_count_min = 7.7;
 SELECT count(*) FROM tab WHERE u64_uniq = 7.7;
 
 SELECT count(*) FROM tab WHERE u64 = '7';
 SELECT count(*) FROM tab WHERE u64_tdigest = '7';
+SELECT count(*) FROM tab WHERE u64_minmax = '7';
 SELECT count(*) FROM tab WHERE u64_count_min = '7';
 SELECT count(*) FROM tab WHERE u64_uniq = '7';
 
 SELECT count(*) FROM tab WHERE u64 = '7.7'; -- { serverError TYPE_MISMATCH }
 SELECT count(*) FROM tab WHERE u64_tdigest = '7.7'; -- { serverError TYPE_MISMATCH }
+SELECT count(*) FROM tab WHERE u64_minmax = '7.7'; -- { serverError TYPE_MISMATCH }
 SELECT count(*) FROM tab WHERE u64_count_min = '7.7'; -- { serverError TYPE_MISMATCH }
 SELECT count(*) FROM tab WHERE u64_uniq = '7.7'; -- { serverError TYPE_MISMATCH }
 
@@ -83,21 +97,25 @@ SELECT 'u64 and <';
 
 SELECT count(*) FROM tab WHERE u64 < 7;
 SELECT count(*) FROM tab WHERE u64_tdigest < 7;
+SELECT count(*) FROM tab WHERE u64_minmax < 7;
 SELECT count(*) FROM tab WHERE u64_count_min < 7;
 SELECT count(*) FROM tab WHERE u64_uniq < 7;
 
 SELECT count(*) FROM tab WHERE u64 < 7.7;
 SELECT count(*) FROM tab WHERE u64_tdigest < 7.7;
+SELECT count(*) FROM tab WHERE u64_minmax < 7.7;
 SELECT count(*) FROM tab WHERE u64_count_min < 7.7;
 SELECT count(*) FROM tab WHERE u64_uniq < 7.7;
 
 SELECT count(*) FROM tab WHERE u64 < '7';
 SELECT count(*) FROM tab WHERE u64_tdigest < '7';
+SELECT count(*) FROM tab WHERE u64_minmax < '7';
 SELECT count(*) FROM tab WHERE u64_count_min < '7';
 SELECT count(*) FROM tab WHERE u64_uniq < '7';
 
 SELECT count(*) FROM tab WHERE u64 < '7.7'; -- { serverError TYPE_MISMATCH }
 SELECT count(*) FROM tab WHERE u64_tdigest < '7.7'; -- { serverError TYPE_MISMATCH }
+SELECT count(*) FROM tab WHERE u64_minmax < '7.7'; -- { serverError TYPE_MISMATCH }
 SELECT count(*) FROM tab WHERE u64_count_min < '7.7'; -- { serverError TYPE_MISMATCH }
 SELECT count(*) FROM tab WHERE u64_uniq < '7.7'; -- { serverError TYPE_MISMATCH }
 
@@ -107,21 +125,25 @@ SELECT 'f64 and =';
 
 SELECT count(*) FROM tab WHERE f64 = 7;
 SELECT count(*) FROM tab WHERE f64_tdigest = 7;
+SELECT count(*) FROM tab WHERE f64_minmax = 7;
 SELECT count(*) FROM tab WHERE f64_count_min = 7;
 SELECT count(*) FROM tab WHERE f64_uniq = 7;
 
 SELECT count(*) FROM tab WHERE f64 = 7.7;
 SELECT count(*) FROM tab WHERE f64_tdigest = 7.7;
+SELECT count(*) FROM tab WHERE f64_minmax = 7.7;
 SELECT count(*) FROM tab WHERE f64_count_min = 7.7;
 SELECT count(*) FROM tab WHERE f64_uniq = 7.7;
 
 SELECT count(*) FROM tab WHERE f64 = '7';
 SELECT count(*) FROM tab WHERE f64_tdigest = '7';
+SELECT count(*) FROM tab WHERE f64_minmax = '7';
 SELECT count(*) FROM tab WHERE f64_count_min = '7';
 SELECT count(*) FROM tab WHERE f64_uniq = '7';
 
 SELECT count(*) FROM tab WHERE f64 = '7.7';
 SELECT count(*) FROM tab WHERE f64_tdigest = '7.7';
+SELECT count(*) FROM tab WHERE f64_minmax = '7.7';
 SELECT count(*) FROM tab WHERE f64_count_min = '7.7';
 SELECT count(*) FROM tab WHERE f64_uniq = '7.7';
 
@@ -129,21 +151,25 @@ SELECT 'f64 and <';
 
 SELECT count(*) FROM tab WHERE f64 < 7;
 SELECT count(*) FROM tab WHERE f64_tdigest < 7;
+SELECT count(*) FROM tab WHERE f64_minmax < 7;
 SELECT count(*) FROM tab WHERE f64_count_min < 7;
 SELECT count(*) FROM tab WHERE f64_uniq < 7;
 
 SELECT count(*) FROM tab WHERE f64 < 7.7;
 SELECT count(*) FROM tab WHERE f64_tdigest < 7.7;
+SELECT count(*) FROM tab WHERE f64_minmax < 7.7;
 SELECT count(*) FROM tab WHERE f64_count_min < 7.7;
 SELECT count(*) FROM tab WHERE f64_uniq < 7.7;
 
 SELECT count(*) FROM tab WHERE f64 < '7';
 SELECT count(*) FROM tab WHERE f64_tdigest < '7';
+SELECT count(*) FROM tab WHERE f64_minmax < '7';
 SELECT count(*) FROM tab WHERE f64_count_min < '7';
 SELECT count(*) FROM tab WHERE f64_uniq < '7';
 
 SELECT count(*) FROM tab WHERE f64 < '7.7';
 SELECT count(*) FROM tab WHERE f64_tdigest < '7.7';
+SELECT count(*) FROM tab WHERE f64_minmax < '7.7';
 SELECT count(*) FROM tab WHERE f64_count_min < '7.7';
 SELECT count(*) FROM tab WHERE f64_uniq < '7.7';
 
@@ -153,11 +179,13 @@ SELECT 'dt and =';
 
 SELECT count(*) FROM tab WHERE dt = '2024-08-08 11:12:13';
 SELECT count(*) FROM tab WHERE dt_tdigest = '2024-08-08 11:12:13';
+SELECT count(*) FROM tab WHERE dt_minmax = '2024-08-08 11:12:13';
 SELECT count(*) FROM tab WHERE dt_count_min = '2024-08-08 11:12:13';
 SELECT count(*) FROM tab WHERE dt_uniq = '2024-08-08 11:12:13';
 
 SELECT count(*) FROM tab WHERE dt = 7;
 SELECT count(*) FROM tab WHERE dt_tdigest = 7;
+SELECT count(*) FROM tab WHERE dt_minmax = 7;
 SELECT count(*) FROM tab WHERE dt_count_min = 7;
 SELECT count(*) FROM tab WHERE dt_uniq = 7;
 
@@ -165,11 +193,13 @@ SELECT 'dt and <';
 
 SELECT count(*) FROM tab WHERE dt < '2024-08-08 11:12:13';
 SELECT count(*) FROM tab WHERE dt_tdigest < '2024-08-08 11:12:13';
+SELECT count(*) FROM tab WHERE dt_minmax < '2024-08-08 11:12:13';
 SELECT count(*) FROM tab WHERE dt_count_min < '2024-08-08 11:12:13';
 SELECT count(*) FROM tab WHERE dt_uniq < '2024-08-08 11:12:13';
 
 SELECT count(*) FROM tab WHERE dt < 7;
 SELECT count(*) FROM tab WHERE dt_tdigest < 7;
+SELECT count(*) FROM tab WHERE dt_minmax < 7;
 SELECT count(*) FROM tab WHERE dt_count_min < 7;
 SELECT count(*) FROM tab WHERE dt_uniq < 7;
 
@@ -179,21 +209,25 @@ SELECT 'b and =';
 
 SELECT count(*) FROM tab WHERE b = true;
 SELECT count(*) FROM tab WHERE b_tdigest = true;
+SELECT count(*) FROM tab WHERE b_minmax = true;
 SELECT count(*) FROM tab WHERE b_count_min = true;
 SELECT count(*) FROM tab WHERE b_uniq = true;
 
 SELECT count(*) FROM tab WHERE b = 'true';
 SELECT count(*) FROM tab WHERE b_tdigest = 'true';
+SELECT count(*) FROM tab WHERE b_minmax = 'true';
 SELECT count(*) FROM tab WHERE b_count_min = 'true';
 SELECT count(*) FROM tab WHERE b_uniq = 'true';
 
 SELECT count(*) FROM tab WHERE b = 1;
 SELECT count(*) FROM tab WHERE b_tdigest = 1;
+SELECT count(*) FROM tab WHERE b_minmax = 1;
 SELECT count(*) FROM tab WHERE b_count_min = 1;
 SELECT count(*) FROM tab WHERE b_uniq = 1;
 
 SELECT count(*) FROM tab WHERE b = 1.1;
 SELECT count(*) FROM tab WHERE b_tdigest = 1.1;
+SELECT count(*) FROM tab WHERE b_minmax = 1.1;
 SELECT count(*) FROM tab WHERE b_count_min = 1.1;
 SELECT count(*) FROM tab WHERE b_uniq = 1.1;
 
@@ -203,12 +237,14 @@ SELECT 's and =';
 
 SELECT count(*) FROM tab WHERE s = 7; -- { serverError NO_COMMON_TYPE }
 -- SELECT count(*) FROM tab WHERE s_tdigest = 7; -- not supported
+-- SELECT count(*) FROM tab WHERE s_minmax = 7; -- not supported
 SELECT count(*) FROM tab WHERE s_count_min = 7; -- { serverError NO_COMMON_TYPE }
--- SELECT count(*) FROM tab WHERE s_uniq = 7; -- not supported
+SELECT count(*) FROM tab WHERE s_uniq = 7; -- { serverError NO_COMMON_TYPE }
 
 SELECT count(*) FROM tab WHERE s = '7';
 -- SELECT count(*) FROM tab WHERE s_tdigest = '7'; -- not supported
+-- SELECT count(*) FROM tab WHERE s_minmax = '7'; -- not supported
 SELECT count(*) FROM tab WHERE s_count_min = '7';
--- SELECT count(*) FROM tab WHERE s_uniq = '7'; -- not supported
+SELECT count(*) FROM tab WHERE s_uniq = '7';
 
 DROP TABLE tab;
