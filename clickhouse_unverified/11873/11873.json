{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 11873,
  "instance_id": "ClickHouse__ClickHouse-11873",
  "issue_numbers": [
    "1118"
  ],
  "base_commit": "7138ccca2b106ed03d8f292c817d59a38498c213",
  "patch": "diff --git a/src/Core/SortDescription.cpp b/src/Core/SortDescription.cpp\nnew file mode 100644\nindex 000000000000..4a5952c3bc2e\n--- /dev/null\n+++ b/src/Core/SortDescription.cpp\n@@ -0,0 +1,41 @@\n+#include <Core/SortDescription.h>\n+#include <Core/Block.h>\n+#include <IO/Operators.h>\n+\n+namespace DB\n+{\n+\n+void dumpSortDescription(const SortDescription & description, const Block & header, WriteBuffer & out)\n+{\n+    bool first = true;\n+\n+    for (const auto & desc : description)\n+    {\n+        if (!first)\n+            out << \", \";\n+        first = false;\n+\n+        if (!desc.column_name.empty())\n+            out << desc.column_name;\n+        else\n+        {\n+            if (desc.column_number < header.columns())\n+                out << header.getByPosition(desc.column_number).name;\n+            else\n+                out << \"?\";\n+\n+            out << \" (pos \" << desc.column_number << \")\";\n+        }\n+\n+        if (desc.direction > 0)\n+            out << \" ASC\";\n+        else\n+            out << \" DESC\";\n+\n+        if (desc.with_fill)\n+            out << \" WITH FILL\";\n+    }\n+}\n+\n+}\n+\ndiff --git a/src/Core/SortDescription.h b/src/Core/SortDescription.h\nindex 86e4bb573eda..d433d369d0be 100644\n--- a/src/Core/SortDescription.h\n+++ b/src/Core/SortDescription.h\n@@ -71,4 +71,9 @@ struct SortColumnDescription\n /// Description of the sorting rule for several columns.\n using SortDescription = std::vector<SortColumnDescription>;\n \n+class Block;\n+\n+/// Outputs user-readable description into `out`.\n+void dumpSortDescription(const SortDescription & description, const Block & header, WriteBuffer & out);\n+\n }\ndiff --git a/src/Core/ya.make b/src/Core/ya.make\nindex 06fed2dc2573..14d609dfa963 100644\n--- a/src/Core/ya.make\n+++ b/src/Core/ya.make\n@@ -20,6 +20,7 @@ SRCS(\n     NamesAndTypes.cpp\n     Settings.cpp\n     SettingsCollection.cpp\n+    SortDescription.cpp\n )\n \n END()\ndiff --git a/src/Interpreters/AggregateDescription.cpp b/src/Interpreters/AggregateDescription.cpp\nnew file mode 100644\nindex 000000000000..e483eb1b7a12\n--- /dev/null\n+++ b/src/Interpreters/AggregateDescription.cpp\n@@ -0,0 +1,102 @@\n+#include <Interpreters/AggregateDescription.h>\n+#include <Common/FieldVisitors.h>\n+#include <IO/Operators.h>\n+\n+namespace DB\n+{\n+\n+void AggregateDescription::explain(WriteBuffer & out, size_t indent) const\n+{\n+    String prefix(indent, ' ');\n+\n+    out << prefix << column_name << '\\n';\n+\n+    auto dump_params = [&](const Array & arr)\n+    {\n+        bool first = true;\n+        for (const auto & param : arr)\n+        {\n+            if (!first)\n+                out << \", \";\n+\n+            first = false;\n+\n+            out << applyVisitor(FieldVisitorToString(), param);\n+        }\n+    };\n+\n+    if (function)\n+    {\n+        /// Double whitespace is intentional.\n+        out << prefix << \"  Function: \" << function->getName();\n+\n+        const auto & params = function->getParameters();\n+        if (!params.empty())\n+        {\n+            out << \"(\";\n+            dump_params(params);\n+            out << \")\";\n+        }\n+\n+        out << \"(\";\n+\n+        bool first = true;\n+        for (const auto & type : function->getArgumentTypes())\n+        {\n+            if (!first)\n+                out << \", \";\n+            first = false;\n+\n+            out << type->getName();\n+        }\n+\n+        out << \") \u2192 \" << function->getReturnType()->getName() << \"\\n\";\n+    }\n+    else\n+        out << prefix << \"  Function: nullptr\\n\";\n+\n+    if (!parameters.empty())\n+    {\n+        out << prefix << \"  Parameters: \";\n+        dump_params(parameters);\n+        out << '\\n';\n+    }\n+\n+    out << prefix << \"  Arguments: \";\n+\n+    if (argument_names.empty())\n+        out << \"none\\n\";\n+    else\n+    {\n+        bool first = true;\n+        for (const auto & arg : argument_names)\n+        {\n+            if (!first)\n+                out << \", \";\n+            first = false;\n+\n+            out << arg;\n+        }\n+        out << \"\\n\";\n+    }\n+\n+    out << prefix << \"  Argument positions: \";\n+\n+    if (arguments.empty())\n+        out << \"none\\n\";\n+    else\n+    {\n+        bool first = true;\n+        for (auto arg : arguments)\n+        {\n+            if (!first)\n+                out << \", \";\n+            first = false;\n+\n+            out << arg;\n+        }\n+        out << '\\n';\n+    }\n+}\n+\n+}\ndiff --git a/src/Interpreters/AggregateDescription.h b/src/Interpreters/AggregateDescription.h\nindex dece93c90932..396a62c446a1 100644\n--- a/src/Interpreters/AggregateDescription.h\n+++ b/src/Interpreters/AggregateDescription.h\n@@ -15,6 +15,8 @@ struct AggregateDescription\n     ColumnNumbers arguments;\n     Names argument_names;    /// used if no `arguments` are specified.\n     String column_name;      /// What name to use for a column with aggregate function values\n+\n+    void explain(WriteBuffer & out, size_t indent) const; /// Get description for EXPLAIN query.\n };\n \n using AggregateDescriptions = std::vector<AggregateDescription>;\ndiff --git a/src/Interpreters/Aggregator.cpp b/src/Interpreters/Aggregator.cpp\nindex 39fcb382e571..13c7f6ddb355 100644\n--- a/src/Interpreters/Aggregator.cpp\n+++ b/src/Interpreters/Aggregator.cpp\n@@ -30,6 +30,7 @@\n #include <AggregateFunctions/AggregateFunctionState.h>\n #include <AggregateFunctions/AggregateFunctionResample.h>\n #include <Disks/StoragePolicy.h>\n+#include <IO/Operators.h>\n \n \n namespace ProfileEvents\n@@ -151,6 +152,42 @@ Block Aggregator::Params::getHeader(\n     return materializeBlock(res);\n }\n \n+void Aggregator::Params::explain(WriteBuffer & out, size_t indent) const\n+{\n+    Strings res;\n+    const auto & header = src_header ? src_header\n+                                     : intermediate_header;\n+\n+    String prefix(indent, ' ');\n+\n+    {\n+        /// Dump keys.\n+        out << prefix << \"Keys: \";\n+\n+        bool first = true;\n+        for (auto key : keys)\n+        {\n+            if (!first)\n+                out << \", \";\n+            first = false;\n+\n+            if (key >= header.columns())\n+                out << \"unknown position \" << key;\n+            else\n+                out << header.getByPosition(key).name;\n+        }\n+\n+        out << '\\n';\n+    }\n+\n+    if (!aggregates.empty())\n+    {\n+        out << prefix << \"Aggregates:\\n\";\n+\n+        for (const auto & aggregate : aggregates)\n+            aggregate.explain(out, indent + 4);\n+    }\n+}\n \n Aggregator::Aggregator(const Params & params_)\n     : params(params_),\ndiff --git a/src/Interpreters/Aggregator.h b/src/Interpreters/Aggregator.h\nindex 7eb30bef7873..87480301c696 100644\n--- a/src/Interpreters/Aggregator.h\n+++ b/src/Interpreters/Aggregator.h\n@@ -923,6 +923,9 @@ class Aggregator\n         {\n             return getHeader(src_header, intermediate_header, keys, aggregates, final);\n         }\n+\n+        /// Returns keys and aggregated for EXPLAIN query\n+        void explain(WriteBuffer & out, size_t indent) const;\n     };\n \n     Aggregator(const Params & params_);\ndiff --git a/src/Interpreters/InterpreterExplainQuery.cpp b/src/Interpreters/InterpreterExplainQuery.cpp\nindex 4890287e81e1..cf74be26fc8e 100644\n--- a/src/Interpreters/InterpreterExplainQuery.cpp\n+++ b/src/Interpreters/InterpreterExplainQuery.cpp\n@@ -10,16 +10,25 @@\n #include <Parsers/DumpASTNode.h>\n #include <Parsers/queryToString.h>\n #include <Parsers/ASTExplainQuery.h>\n-#include <Parsers/ASTTablesInSelectQuery.h>\n #include <Parsers/ASTSelectQuery.h>\n+#include <IO/WriteBufferFromOStream.h>\n \n #include <Storages/StorageView.h>\n #include <sstream>\n-\n+#include <Processors/QueryPlan/QueryPlan.h>\n+#include <Processors/printPipeline.h>\n \n namespace DB\n {\n \n+namespace ErrorCodes\n+{\n+    extern const int INCORRECT_QUERY;\n+    extern const int INVALID_SETTING_VALUE;\n+    extern const int UNKNOWN_SETTING;\n+    extern const int LOGICAL_ERROR;\n+}\n+\n namespace\n {\n     struct ExplainAnalyzedSyntaxMatcher\n@@ -79,10 +88,133 @@ Block InterpreterExplainQuery::getSampleBlock()\n     return block;\n }\n \n+/// Split str by line feed and write as separate row to ColumnString.\n+static void fillColumn(IColumn & column, const std::string & str)\n+{\n+    size_t start = 0;\n+    size_t end = 0;\n+    size_t size = str.size();\n+\n+    while (end < size)\n+    {\n+        if (str[end] == '\\n')\n+        {\n+            column.insertData(str.data() + start, end - start);\n+            start = end + 1;\n+        }\n+\n+        ++end;\n+    }\n+\n+    if (start < end)\n+        column.insertData(str.data() + start, end - start);\n+}\n+\n+namespace\n+{\n+\n+/// Settings. Different for each explain type.\n+\n+struct QueryPlanSettings\n+{\n+    QueryPlan::ExplainPlanOptions query_plan_options;\n+\n+    constexpr static char name[] = \"PLAN\";\n+\n+    std::unordered_map<std::string, std::reference_wrapper<bool>> boolean_settings =\n+    {\n+            {\"header\", query_plan_options.header},\n+            {\"description\", query_plan_options.description},\n+            {\"actions\", query_plan_options.actions}\n+    };\n+};\n+\n+struct QueryPipelineSettings\n+{\n+    QueryPlan::ExplainPipelineOptions query_pipeline_options;\n+    bool graph = false;\n+    bool compact = true;\n+\n+    constexpr static char name[] = \"PIPELINE\";\n+\n+    std::unordered_map<std::string, std::reference_wrapper<bool>> boolean_settings =\n+    {\n+            {\"header\", query_pipeline_options.header},\n+            {\"graph\", graph},\n+            {\"compact\", compact},\n+    };\n+};\n+\n+template <typename Settings>\n+struct ExplainSettings : public Settings\n+{\n+    using Settings::boolean_settings;\n+\n+    bool has(const std::string & name_) const\n+    {\n+        return boolean_settings.count(name_) > 0;\n+    }\n+\n+    void setBooleanSetting(const std::string & name_, bool value)\n+    {\n+        auto it = boolean_settings.find(name_);\n+        if (it == boolean_settings.end())\n+            throw Exception(\"Unknown setting for ExplainSettings: \" + name_, ErrorCodes::LOGICAL_ERROR);\n+\n+        it->second.get() = value;\n+    }\n+\n+    std::string getSettingsList() const\n+    {\n+        std::string res;\n+        for (const auto & setting : boolean_settings)\n+        {\n+            if (!res.empty())\n+                res += \", \";\n+\n+            res += setting.first;\n+        }\n+\n+        return res;\n+    }\n+};\n+\n+template <typename Settings>\n+ExplainSettings<Settings> checkAndGetSettings(const ASTPtr & ast_settings)\n+{\n+    if (!ast_settings)\n+        return {};\n+\n+    ExplainSettings<Settings> settings;\n+    const auto & set_query = ast_settings->as<ASTSetQuery &>();\n+\n+    for (const auto & change : set_query.changes)\n+    {\n+        if (!settings.has(change.name))\n+            throw Exception(\"Unknown setting \\\"\" + change.name + \"\\\" for EXPLAIN \" + Settings::name + \" query. \"\n+                            \"Supported settings: \" + settings.getSettingsList(), ErrorCodes::UNKNOWN_SETTING);\n+\n+        if (change.value.getType() != Field::Types::UInt64)\n+            throw Exception(\"Invalid type \" + std::string(change.value.getTypeName()) + \" for setting \\\"\" + change.name +\n+                            \"\\\" only boolean settings are supported\", ErrorCodes::INVALID_SETTING_VALUE);\n+\n+        auto value = change.value.get<UInt64>();\n+        if (value > 1)\n+            throw Exception(\"Invalid value \" + std::to_string(value) + \" for setting \\\"\" + change.name +\n+                            \"\\\". Only boolean settings are supported\", ErrorCodes::INVALID_SETTING_VALUE);\n+\n+        settings.setBooleanSetting(change.name, value);\n+    }\n+\n+    return settings;\n+}\n+\n+}\n \n BlockInputStreamPtr InterpreterExplainQuery::executeImpl()\n {\n     const auto & ast = query->as<ASTExplainQuery &>();\n+\n     Block sample_block = getSampleBlock();\n     MutableColumns res_columns = sample_block.cloneEmptyColumns();\n \n@@ -90,17 +222,63 @@ BlockInputStreamPtr InterpreterExplainQuery::executeImpl()\n \n     if (ast.getKind() == ASTExplainQuery::ParsedAST)\n     {\n-        dumpAST(ast, ss);\n+        if (ast.getSettings())\n+            throw Exception(\"Settings are not supported for EXPLAIN AST query.\", ErrorCodes::UNKNOWN_SETTING);\n+\n+        dumpAST(*ast.getExplainedQuery(), ss);\n     }\n     else if (ast.getKind() == ASTExplainQuery::AnalyzedSyntax)\n     {\n+        if (ast.getSettings())\n+            throw Exception(\"Settings are not supported for EXPLAIN SYNTAX query.\", ErrorCodes::UNKNOWN_SETTING);\n+\n         ExplainAnalyzedSyntaxVisitor::Data data{.context = context};\n         ExplainAnalyzedSyntaxVisitor(data).visit(query);\n \n-        ast.children.at(0)->format(IAST::FormatSettings(ss, false));\n+        ast.getExplainedQuery()->format(IAST::FormatSettings(ss, false));\n+    }\n+    else if (ast.getKind() == ASTExplainQuery::QueryPlan)\n+    {\n+        if (!dynamic_cast<const ASTSelectWithUnionQuery *>(ast.getExplainedQuery().get()))\n+            throw Exception(\"Only SELECT is supported for EXPLAIN query\", ErrorCodes::INCORRECT_QUERY);\n+\n+        auto settings = checkAndGetSettings<QueryPlanSettings>(ast.getSettings());\n+        QueryPlan plan;\n+\n+        InterpreterSelectWithUnionQuery interpreter(ast.getExplainedQuery(), context, SelectQueryOptions());\n+        interpreter.buildQueryPlan(plan);\n+\n+        WriteBufferFromOStream buffer(ss);\n+        plan.explainPlan(buffer, settings.query_plan_options);\n+    }\n+    else if (ast.getKind() == ASTExplainQuery::QueryPipeline)\n+    {\n+        if (!dynamic_cast<const ASTSelectWithUnionQuery *>(ast.getExplainedQuery().get()))\n+            throw Exception(\"Only SELECT is supported for EXPLAIN query\", ErrorCodes::INCORRECT_QUERY);\n+\n+        auto settings = checkAndGetSettings<QueryPipelineSettings>(ast.getSettings());\n+        QueryPlan plan;\n+\n+        InterpreterSelectWithUnionQuery interpreter(ast.getExplainedQuery(), context, SelectQueryOptions());\n+        interpreter.buildQueryPlan(plan);\n+        auto pipeline = plan.buildQueryPipeline();\n+\n+        WriteBufferFromOStream buffer(ss);\n+\n+        if (settings.graph)\n+        {\n+            if (settings.compact)\n+                printPipelineCompact(pipeline->getProcessors(), buffer, settings.query_pipeline_options.header);\n+            else\n+                printPipeline(pipeline->getProcessors(), buffer);\n+        }\n+        else\n+        {\n+            plan.explainPipeline(buffer, settings.query_pipeline_options);\n+        }\n     }\n \n-    res_columns[0]->insert(ss.str());\n+    fillColumn(*res_columns[0], ss.str());\n \n     return std::make_shared<OneBlockInputStream>(sample_block.cloneWithColumns(std::move(res_columns)));\n }\ndiff --git a/src/Interpreters/InterpreterSelectQuery.cpp b/src/Interpreters/InterpreterSelectQuery.cpp\nindex dff40e56ae8d..e0abc80b51d5 100644\n--- a/src/Interpreters/InterpreterSelectQuery.cpp\n+++ b/src/Interpreters/InterpreterSelectQuery.cpp\n@@ -54,7 +54,7 @@\n #include <Processors/QueryPlan/CubeStep.h>\n #include <Processors/QueryPlan/FillingStep.h>\n #include <Processors/QueryPlan/ExtremesStep.h>\n-#include <Processors/QueryPlan/OffsetsStep.h>\n+#include <Processors/QueryPlan/OffsetStep.h>\n #include <Processors/QueryPlan/FinishSortingStep.h>\n #include <Processors/QueryPlan/QueryPlan.h>\n \n@@ -962,7 +962,7 @@ void InterpreterSelectQuery::executeImpl(QueryPlan & query_plan, const BlockInpu\n                   */\n \n                 if (!expressions.first_stage && !expressions.need_aggregate && !(query.group_by_with_totals && !aggregate_final))\n-                    executeMergeSorted(query_plan, \"before ORDER BY\");\n+                    executeMergeSorted(query_plan, \"for ORDER BY\");\n                 else    /// Otherwise, just sort.\n                     executeOrder(query_plan, query_info.input_order_info);\n             }\n@@ -1589,7 +1589,7 @@ void InterpreterSelectQuery::executeOrder(QueryPlan & query_plan, InputOrderInfo\n             limit,\n             SizeLimits(settings.max_rows_to_sort, settings.max_bytes_to_sort, settings.sort_overflow_mode));\n \n-    partial_sorting->setStepDescription(\"Sort each block before ORDER BY\");\n+    partial_sorting->setStepDescription(\"Sort each block for ORDER BY\");\n     query_plan.addStep(std::move(partial_sorting));\n \n     /// Merge the sorted blocks.\n@@ -1600,11 +1600,11 @@ void InterpreterSelectQuery::executeOrder(QueryPlan & query_plan, InputOrderInfo\n             settings.max_bytes_before_external_sort, context->getTemporaryVolume(),\n             settings.min_free_disk_space_for_temporary_data);\n \n-    merge_sorting_step->setStepDescription(\"Merge sorted blocks before ORDER BY\");\n+    merge_sorting_step->setStepDescription(\"Merge sorted blocks for ORDER BY\");\n     query_plan.addStep(std::move(merge_sorting_step));\n \n     /// If there are several streams, we merge them into one\n-    executeMergeSorted(query_plan, output_order_descr, limit, \"before ORDER BY\");\n+    executeMergeSorted(query_plan, output_order_descr, limit, \"for ORDER BY\");\n }\n \n \n@@ -1785,7 +1785,7 @@ void InterpreterSelectQuery::executeOffset(QueryPlan & query_plan)\n         UInt64 limit_offset;\n         std::tie(limit_length, limit_offset) = getLimitLengthAndOffset(query, *context);\n \n-        auto offsets_step = std::make_unique<OffsetsStep>(query_plan.getCurrentDataStream(), limit_offset);\n+        auto offsets_step = std::make_unique<OffsetStep>(query_plan.getCurrentDataStream(), limit_offset);\n         query_plan.addStep(std::move(offsets_step));\n     }\n }\ndiff --git a/src/Interpreters/ya.make b/src/Interpreters/ya.make\nindex 394c9c360644..3df3cb7f3dca 100644\n--- a/src/Interpreters/ya.make\n+++ b/src/Interpreters/ya.make\n@@ -18,6 +18,7 @@ SRCS(\n     ActionsVisitor.cpp\n     addMissingDefaults.cpp\n     addTypeConversionToAST.cpp\n+    AggregateDescription.cpp\n     Aggregator.cpp\n     AnyInputOptimize.cpp\n     ArithmeticOperationsInAgrFuncOptimize.cpp\ndiff --git a/src/Parsers/ASTExplainQuery.h b/src/Parsers/ASTExplainQuery.h\nindex d7a40a2eb859..0c376e270d45 100644\n--- a/src/Parsers/ASTExplainQuery.h\n+++ b/src/Parsers/ASTExplainQuery.h\n@@ -1,6 +1,6 @@\n #pragma once\n \n-#include <Parsers/IAST.h>\n+#include <Parsers/ASTQueryWithOutput.h>\n \n \n namespace DB\n@@ -8,45 +8,78 @@ namespace DB\n \n \n /// AST, EXPLAIN or other query with meaning of explanation query instead of execution\n-class ASTExplainQuery : public IAST\n+class ASTExplainQuery : public ASTQueryWithOutput\n {\n public:\n     enum ExplainKind\n     {\n-        ParsedAST,\n-        AnalyzedSyntax,\n+        ParsedAST, /// 'EXPLAIN AST SELECT ...'\n+        AnalyzedSyntax, /// 'EXPLAIN SYNTAX SELECT ...'\n+        QueryPlan, /// 'EXPLAIN SELECT ...'\n+        QueryPipeline, /// 'EXPLAIN PIPELINE ...'\n     };\n \n-    ASTExplainQuery(ExplainKind kind_)\n-        : kind(kind_)\n-    {}\n+    ASTExplainQuery(ExplainKind kind_, bool old_syntax_)\n+        : kind(kind_), old_syntax(old_syntax_)\n+    {\n+    }\n \n-    String getID(char delim) const override { return \"Explain\" + (delim + toString(kind)); }\n+    String getID(char delim) const override { return \"Explain\" + (delim + toString(kind, old_syntax)); }\n     ExplainKind getKind() const { return kind; }\n     ASTPtr clone() const override\n     {\n         auto res = std::make_shared<ASTExplainQuery>(*this);\n         res->children.clear();\n         res->children.push_back(children[0]->clone());\n+        cloneOutputOptions(*res);\n         return res;\n     }\n \n+    void setExplainedQuery(ASTPtr query_)\n+    {\n+        children.emplace_back(query_);\n+        query = std::move(query_);\n+    }\n+\n+    void setSettings(ASTPtr settings_)\n+    {\n+        children.emplace_back(settings_);\n+        ast_settings = std::move(settings_);\n+    }\n+\n+    const ASTPtr & getExplainedQuery() const { return query; }\n+    const ASTPtr & getSettings() const { return ast_settings; }\n+\n protected:\n-    void formatImpl(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const override\n+    void formatQueryImpl(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const override\n     {\n-        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << toString(kind) << (settings.hilite ? hilite_none : \"\") << \" \";\n-        children.at(0)->formatImpl(settings, state, frame);\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << toString(kind, old_syntax) << (settings.hilite ? hilite_none : \"\");\n+\n+        if (ast_settings)\n+        {\n+            settings.ostr << ' ';\n+            ast_settings->formatImpl(settings, state, frame);\n+        }\n+\n+        settings.ostr << settings.nl_or_ws;\n+        query->formatImpl(settings, state, frame);\n     }\n \n private:\n     ExplainKind kind;\n+    bool old_syntax; /// \"EXPLAIN AST\" -> \"AST\", \"EXPLAIN SYNTAX\" -> \"ANALYZE\"\n+\n+    ASTPtr query;\n+    ASTPtr ast_settings;\n \n-    static String toString(ExplainKind kind)\n+    static String toString(ExplainKind kind, bool old_syntax)\n     {\n         switch (kind)\n         {\n-            case ParsedAST: return \"AST\";\n-            case AnalyzedSyntax: return \"ANALYZE\";\n+            case ParsedAST: return old_syntax ? \"AST\" : \"EXPLAIN AST\";\n+            case AnalyzedSyntax: return old_syntax ? \"ANALYZE\" : \"EXPLAIN SYNTAX\";\n+            case QueryPlan: return \"EXPLAIN\";\n+            case QueryPipeline: return \"EXPLAIN PIPELINE\";\n         }\n \n         __builtin_unreachable();\ndiff --git a/src/Parsers/ParserExplainQuery.cpp b/src/Parsers/ParserExplainQuery.cpp\nnew file mode 100644\nindex 000000000000..c6792d6094b5\n--- /dev/null\n+++ b/src/Parsers/ParserExplainQuery.cpp\n@@ -0,0 +1,72 @@\n+#include <Parsers/ParserExplainQuery.h>\n+#include <Parsers/ASTExplainQuery.h>\n+#include <Parsers/CommonParsers.h>\n+#include <Parsers/ParserSelectWithUnionQuery.h>\n+#include <Parsers/ParserSetQuery.h>\n+\n+namespace DB\n+{\n+\n+bool ParserExplainQuery::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)\n+{\n+    ASTExplainQuery::ExplainKind kind;\n+    bool old_syntax = false;\n+\n+    ParserKeyword s_ast(\"AST\");\n+    ParserKeyword s_analyze(\"ANALYZE\");\n+    ParserKeyword s_explain(\"EXPLAIN\");\n+    ParserKeyword s_syntax(\"SYNTAX\");\n+    ParserKeyword s_pipeline(\"PIPELINE\");\n+    ParserKeyword s_plan(\"PLAN\");\n+\n+    if (enable_debug_queries && s_ast.ignore(pos, expected))\n+    {\n+        old_syntax = true;\n+        kind = ASTExplainQuery::ExplainKind::ParsedAST;\n+    }\n+    else if (enable_debug_queries && s_analyze.ignore(pos, expected))\n+    {\n+        old_syntax = true;\n+        kind = ASTExplainQuery::ExplainKind::AnalyzedSyntax;\n+    }\n+    else if (s_explain.ignore(pos, expected))\n+    {\n+        kind = ASTExplainQuery::QueryPlan;\n+\n+        if (s_ast.ignore(pos, expected))\n+            kind = ASTExplainQuery::ExplainKind::ParsedAST;\n+        else if (s_syntax.ignore(pos, expected))\n+            kind = ASTExplainQuery::ExplainKind::AnalyzedSyntax;\n+        else if (s_pipeline.ignore(pos, expected))\n+            kind = ASTExplainQuery::ExplainKind::QueryPipeline;\n+        else if (s_plan.ignore(pos, expected))\n+            kind = ASTExplainQuery::ExplainKind::QueryPlan;\n+    }\n+    else\n+        return false;\n+\n+    auto explain_query = std::make_shared<ASTExplainQuery>(kind, old_syntax);\n+\n+    {\n+        ASTPtr settings;\n+        ParserSetQuery parser_settings(true);\n+\n+        auto begin = pos;\n+        if (parser_settings.parse(pos, settings, expected))\n+            explain_query->setSettings(std::move(settings));\n+        else\n+            pos = begin;\n+    }\n+\n+    ParserSelectWithUnionQuery select_p;\n+    ASTPtr query;\n+    if (!select_p.parse(pos, query, expected))\n+        return false;\n+\n+    explain_query->setExplainedQuery(std::move(query));\n+\n+    node = std::move(explain_query);\n+    return true;\n+}\n+\n+}\ndiff --git a/src/Parsers/ParserExplainQuery.h b/src/Parsers/ParserExplainQuery.h\nnew file mode 100644\nindex 000000000000..224f466c1a16\n--- /dev/null\n+++ b/src/Parsers/ParserExplainQuery.h\n@@ -0,0 +1,25 @@\n+#pragma once\n+\n+#include <Parsers/IParserBase.h>\n+\n+namespace DB\n+{\n+\n+\n+class ParserExplainQuery : public IParserBase\n+{\n+public:\n+    explicit ParserExplainQuery(bool enable_debug_queries_ = false)\n+        : enable_debug_queries(enable_debug_queries_)\n+    {\n+    }\n+\n+protected:\n+    const char * getName() const override { return \"EXPLAIN\"; }\n+    bool parseImpl(Pos & pos, ASTPtr & node, Expected & expected) override;\n+\n+private:\n+    bool enable_debug_queries;\n+};\n+\n+}\ndiff --git a/src/Parsers/ParserQueryWithOutput.cpp b/src/Parsers/ParserQueryWithOutput.cpp\nindex c7a42b5bdad6..6c356955932f 100644\n--- a/src/Parsers/ParserQueryWithOutput.cpp\n+++ b/src/Parsers/ParserQueryWithOutput.cpp\n@@ -19,6 +19,7 @@\n #include <Parsers/ParserShowCreateAccessEntityQuery.h>\n #include <Parsers/ParserShowGrantsQuery.h>\n #include <Parsers/ParserShowPrivilegesQuery.h>\n+#include <Parsers/ParserExplainQuery.h>\n \n \n namespace DB\n@@ -44,21 +45,13 @@ bool ParserQueryWithOutput::parseImpl(Pos & pos, ASTPtr & node, Expected & expec\n     ParserShowCreateAccessEntityQuery show_create_access_entity_p;\n     ParserShowGrantsQuery show_grants_p;\n     ParserShowPrivilegesQuery show_privileges_p;\n+    ParserExplainQuery explain_p(enable_debug_queries);\n \n     ASTPtr query;\n \n-    ParserKeyword s_ast(\"AST\");\n-    ParserKeyword s_analyze(\"ANALYZE\");\n-    bool explain_ast = false;\n-    bool analyze_syntax = false;\n-\n-    if (enable_explain && s_ast.ignore(pos, expected))\n-        explain_ast = true;\n-\n-    if (enable_explain && s_analyze.ignore(pos, expected))\n-        analyze_syntax = true;\n-\n-    bool parsed = select_p.parse(pos, query, expected)\n+    bool parsed =\n+           explain_p.parse(pos, query, expected)\n+        || select_p.parse(pos, query, expected)\n         || show_create_access_entity_p.parse(pos, query, expected) /// should be before `show_tables_p`\n         || show_tables_p.parse(pos, query, expected)\n         || table_p.parse(pos, query, expected)\n@@ -116,19 +109,17 @@ bool ParserQueryWithOutput::parseImpl(Pos & pos, ASTPtr & node, Expected & expec\n         query_with_output.children.push_back(query_with_output.settings_ast);\n     }\n \n-    if (explain_ast)\n-    {\n-        node = std::make_shared<ASTExplainQuery>(ASTExplainQuery::ParsedAST);\n-        node->children.push_back(query);\n-    }\n-    else if (analyze_syntax)\n+    if (auto * ast = query->as<ASTExplainQuery>())\n     {\n-        node = std::make_shared<ASTExplainQuery>(ASTExplainQuery::AnalyzedSyntax);\n-        node->children.push_back(query);\n+        /// Set default format TSV, because output is a single string column.\n+        if (!ast->format)\n+        {\n+            ast->format = std::make_shared<ASTIdentifier>(\"TSV\");\n+            ast->children.push_back(ast->format);\n+        }\n     }\n-    else\n-        node = query;\n \n+    node = std::move(query);\n     return true;\n }\n \ndiff --git a/src/Parsers/ParserQueryWithOutput.h b/src/Parsers/ParserQueryWithOutput.h\nindex 3163bc38437c..d0962862c42d 100644\n--- a/src/Parsers/ParserQueryWithOutput.h\n+++ b/src/Parsers/ParserQueryWithOutput.h\n@@ -11,8 +11,9 @@ namespace DB\n class ParserQueryWithOutput : public IParserBase\n {\n public:\n-    ParserQueryWithOutput(bool enable_explain_ = false)\n-        : enable_explain(enable_explain_)\n+    /// enable_debug_queries flag enables queries 'AST SELECT' and 'ANALYZE SELECT'\n+    explicit ParserQueryWithOutput(bool enable_debug_queries_ = false)\n+        : enable_debug_queries(enable_debug_queries_)\n     {}\n \n protected:\n@@ -21,7 +22,7 @@ class ParserQueryWithOutput : public IParserBase\n     bool parseImpl(Pos & pos, ASTPtr & node, Expected & expected) override;\n \n private:\n-    bool enable_explain;\n+    bool enable_debug_queries;\n };\n \n }\ndiff --git a/src/Parsers/ya.make b/src/Parsers/ya.make\nindex cf1ff9f5a022..c7029426a49a 100644\n--- a/src/Parsers/ya.make\n+++ b/src/Parsers/ya.make\n@@ -84,6 +84,7 @@ SRCS(\n     ParserDictionaryAttributeDeclaration.cpp\n     ParserDropAccessEntityQuery.cpp\n     ParserDropQuery.cpp\n+    ParserExplainQuery.cpp\n     ParserGrantQuery.cpp\n     ParserInsertQuery.cpp\n     ParserKillQueryQuery.cpp\ndiff --git a/src/Processors/IProcessor.h b/src/Processors/IProcessor.h\nindex a9bd73d8026e..e9148dd50756 100644\n--- a/src/Processors/IProcessor.h\n+++ b/src/Processors/IProcessor.h\n@@ -15,6 +15,8 @@ namespace ErrorCodes\n     extern const int NOT_IMPLEMENTED;\n }\n \n+class IQueryPlanStep;\n+\n class IProcessor;\n using ProcessorPtr = std::shared_ptr<IProcessor>;\n using Processors = std::vector<ProcessorPtr>;\n@@ -288,6 +290,16 @@ class IProcessor\n     void enableQuota() { has_quota = true; }\n     bool hasQuota() const { return has_quota; }\n \n+    /// Step of QueryPlan from which processor was created.\n+    void setQueryPlanStep(IQueryPlanStep * step, size_t group = 0)\n+    {\n+        query_plan_step = step;\n+        query_plan_step_group = group;\n+    }\n+\n+    IQueryPlanStep * getQueryPlanStep() const { return query_plan_step; }\n+    size_t getQueryPlanStepGroup() const { return query_plan_step_group; }\n+\n protected:\n     virtual void onCancel() {}\n \n@@ -299,6 +311,9 @@ class IProcessor\n     size_t stream_number = NO_STREAM;\n \n     bool has_quota = false;\n+\n+    IQueryPlanStep * query_plan_step = nullptr;\n+    size_t query_plan_step_group = 0;\n };\n \n \ndiff --git a/src/Processors/QueryPipeline.cpp b/src/Processors/QueryPipeline.cpp\nindex 7ad7bddb1048..fa04082c82ff 100644\n--- a/src/Processors/QueryPipeline.cpp\n+++ b/src/Processors/QueryPipeline.cpp\n@@ -69,7 +69,8 @@ void QueryPipeline::init(Pipe pipe)\n     init(std::move(pipes));\n }\n \n-static OutputPort * uniteExtremes(const std::vector<OutputPort *> & ports, const Block & header, Processors & processors)\n+static OutputPort * uniteExtremes(const std::vector<OutputPort *> & ports, const Block & header,\n+                                  QueryPipeline::ProcessorsContainer & processors)\n {\n     /// Here we calculate extremes for extremes in case we unite several pipelines.\n     /// Example: select number from numbers(2) union all select number from numbers(3)\n@@ -90,14 +91,15 @@ static OutputPort * uniteExtremes(const std::vector<OutputPort *> & ports, const\n     connect(resize->getOutputs().front(), extremes->getInputPort());\n     connect(extremes->getOutputPort(), sink->getPort());\n \n-    processors.emplace_back(std::move(resize));\n-    processors.emplace_back(std::move(extremes));\n-    processors.emplace_back(std::move(sink));\n+    processors.emplace(std::move(resize));\n+    processors.emplace(std::move(extremes));\n+    processors.emplace(std::move(sink));\n \n     return extremes_port;\n }\n \n-static OutputPort * uniteTotals(const std::vector<OutputPort *> & ports, const Block & header, Processors & processors)\n+static OutputPort * uniteTotals(const std::vector<OutputPort *> & ports, const Block & header,\n+                                QueryPipeline::ProcessorsContainer & processors)\n {\n     /// Calculate totals fro several streams.\n     /// Take totals from first sources which has any, skip others.\n@@ -115,8 +117,8 @@ static OutputPort * uniteTotals(const std::vector<OutputPort *> & ports, const B\n \n     connect(concat->getOutputs().front(), limit->getInputPort());\n \n-    processors.emplace_back(std::move(concat));\n-    processors.emplace_back(std::move(limit));\n+    processors.emplace(std::move(concat));\n+    processors.emplace(std::move(limit));\n \n     return totals_port;\n }\n@@ -167,8 +169,7 @@ void QueryPipeline::init(Pipes pipes)\n         }\n \n         streams.addStream(&pipe.getPort(), pipe.maxParallelStreams());\n-        auto cur_processors = std::move(pipe).detachProcessors();\n-        processors.insert(processors.end(), cur_processors.begin(), cur_processors.end());\n+        processors.emplace(std::move(pipe).detachProcessors());\n     }\n \n     if (!totals.empty())\n@@ -242,7 +243,7 @@ void QueryPipeline::addSimpleTransformImpl(const TProcessorGetter & getter)\n         {\n             connect(*stream, transform->getInputs().front());\n             stream = &transform->getOutputs().front();\n-            processors.emplace_back(std::move(transform));\n+            processors.emplace(std::move(transform));\n         }\n     };\n \n@@ -293,7 +294,7 @@ void QueryPipeline::setSinks(const ProcessorGetterWithStreamKind & getter)\n             transform = std::make_shared<NullSink>(stream->getHeader());\n \n         connect(*stream, transform->getInputs().front());\n-        processors.emplace_back(std::move(transform));\n+        processors.emplace(std::move(transform));\n     };\n \n     for (auto & stream : streams)\n@@ -339,7 +340,7 @@ void QueryPipeline::addPipe(Processors pipe)\n             header = output.getHeader();\n     }\n \n-    processors.insert(processors.end(), pipe.begin(), pipe.end());\n+    processors.emplace(pipe);\n     current_header = std::move(header);\n }\n \n@@ -352,7 +353,7 @@ void QueryPipeline::addDelayedStream(ProcessorPtr source)\n \n     IProcessor::PortNumbers delayed_streams = { streams.size() };\n     streams.addStream(&source->getOutputs().front(), 0);\n-    processors.emplace_back(std::move(source));\n+    processors.emplace(std::move(source));\n \n     auto processor = std::make_shared<DelayedPortsProcessor>(current_header, streams.size(), delayed_streams);\n     addPipe({ std::move(processor) });\n@@ -383,7 +384,7 @@ void QueryPipeline::resize(size_t num_streams, bool force, bool strict)\n     for (auto & output : resize->getOutputs())\n         streams.addStream(&output, 0);\n \n-    processors.emplace_back(std::move(resize));\n+    processors.emplace(std::move(resize));\n }\n \n void QueryPipeline::enableQuotaForCurrentStreams()\n@@ -412,7 +413,7 @@ void QueryPipeline::addTotalsHavingTransform(ProcessorPtr transform)\n     streams.assign({ &outputs.front() });\n     totals_having_port = &outputs.back();\n     current_header = outputs.front().getHeader();\n-    processors.emplace_back(std::move(transform));\n+    processors.emplace(std::move(transform));\n }\n \n void QueryPipeline::addDefaultTotals()\n@@ -434,7 +435,7 @@ void QueryPipeline::addDefaultTotals()\n \n     auto source = std::make_shared<SourceFromSingleChunk>(current_header, Chunk(std::move(columns), 1));\n     totals_having_port = &source->getPort();\n-    processors.emplace_back(source);\n+    processors.emplace(std::move(source));\n }\n \n void QueryPipeline::addTotals(ProcessorPtr source)\n@@ -448,7 +449,7 @@ void QueryPipeline::addTotals(ProcessorPtr source)\n     assertBlocksHaveEqualStructure(current_header, source->getOutputs().front().getHeader(), \"QueryPipeline\");\n \n     totals_having_port = &source->getOutputs().front();\n-    processors.emplace_back(std::move(source));\n+    processors.emplace(std::move(source));\n }\n \n void QueryPipeline::dropTotalsAndExtremes()\n@@ -457,7 +458,7 @@ void QueryPipeline::dropTotalsAndExtremes()\n     {\n         auto null_sink = std::make_shared<NullSink>(port->getHeader());\n         connect(*port, null_sink->getPort());\n-        processors.emplace_back(std::move(null_sink));\n+        processors.emplace(std::move(null_sink));\n         port = nullptr;\n     };\n \n@@ -486,7 +487,7 @@ void QueryPipeline::addExtremesTransform()\n         stream = &transform->getOutputPort();\n         extremes.push_back(&transform->getExtremesPort());\n \n-        processors.emplace_back(std::move(transform));\n+        processors.emplace(std::move(transform));\n     }\n \n     if (extremes.size() == 1)\n@@ -510,8 +511,8 @@ void QueryPipeline::addCreatingSetsTransform(ProcessorPtr transform)\n     connect(*streams.back(), concat->getInputs().back());\n \n     streams.assign({ &concat->getOutputs().front() });\n-    processors.emplace_back(std::move(transform));\n-    processors.emplace_back(std::move(concat));\n+    processors.emplace(std::move(transform));\n+    processors.emplace(std::move(concat));\n }\n \n void QueryPipeline::setOutputFormat(ProcessorPtr output)\n@@ -538,17 +539,17 @@ void QueryPipeline::setOutputFormat(ProcessorPtr output)\n     {\n         auto null_source = std::make_shared<NullSource>(totals.getHeader());\n         totals_having_port = &null_source->getPort();\n-        processors.emplace_back(std::move(null_source));\n+        processors.emplace(std::move(null_source));\n     }\n \n     if (!extremes_port)\n     {\n         auto null_source = std::make_shared<NullSource>(extremes.getHeader());\n         extremes_port = &null_source->getPort();\n-        processors.emplace_back(std::move(null_source));\n+        processors.emplace(std::move(null_source));\n     }\n \n-    processors.emplace_back(std::move(output));\n+    processors.emplace(std::move(output));\n \n     connect(*streams.front(), main);\n     connect(*totals_having_port, totals);\n@@ -587,6 +588,7 @@ void QueryPipeline::unitePipelines(\n     {\n         auto & pipeline = *pipeline_ptr;\n         pipeline.checkInitialized();\n+        pipeline.processors.setCollectedProcessors(processors.getCollectedProcessors());\n \n         if (!pipeline.isCompleted())\n         {\n@@ -604,7 +606,7 @@ void QueryPipeline::unitePipelines(\n \n             connect(*pipeline.extremes_port, converting->getInputPort());\n             extremes.push_back(&converting->getOutputPort());\n-            processors.push_back(std::move(converting));\n+            processors.emplace(std::move(converting));\n         }\n \n         /// Take totals only from first port.\n@@ -615,10 +617,13 @@ void QueryPipeline::unitePipelines(\n \n             connect(*pipeline.totals_having_port, converting->getInputPort());\n             totals.push_back(&converting->getOutputPort());\n-            processors.push_back(std::move(converting));\n+            processors.emplace(std::move(converting));\n         }\n \n-        processors.insert(processors.end(), pipeline.processors.begin(), pipeline.processors.end());\n+        auto * collector = processors.setCollectedProcessors(nullptr);\n+        processors.emplace(pipeline.processors.detach());\n+        processors.setCollectedProcessors(collector);\n+\n         streams.addStreams(pipeline.streams);\n \n         table_locks.insert(table_locks.end(), std::make_move_iterator(pipeline.table_locks.begin()), std::make_move_iterator(pipeline.table_locks.end()));\n@@ -649,7 +654,7 @@ void QueryPipeline::unitePipelines(\n \n void QueryPipeline::setProgressCallback(const ProgressCallback & callback)\n {\n-    for (auto & processor : processors)\n+    for (auto & processor : processors.get())\n     {\n         if (auto * source = dynamic_cast<ISourceWithProgress *>(processor.get()))\n             source->setProgressCallback(callback);\n@@ -663,7 +668,7 @@ void QueryPipeline::setProcessListElement(QueryStatus * elem)\n {\n     process_list_element = elem;\n \n-    for (auto & processor : processors)\n+    for (auto & processor : processors.get())\n     {\n         if (auto * source = dynamic_cast<ISourceWithProgress *>(processor.get()))\n             source->setProcessListElement(elem);\n@@ -775,7 +780,7 @@ Pipe QueryPipeline::getPipe() &&\n \n Pipes QueryPipeline::getPipes() &&\n {\n-    Pipe pipe(std::move(processors), streams.at(0), totals_having_port, extremes_port);\n+    Pipe pipe(processors.detach(), streams.at(0), totals_having_port, extremes_port);\n     pipe.max_parallel_streams = streams.maxParallelStreams();\n \n     for (auto & lock : table_locks)\n@@ -807,7 +812,7 @@ PipelineExecutorPtr QueryPipeline::execute()\n     if (!isCompleted())\n         throw Exception(\"Cannot execute pipeline because it is not completed.\", ErrorCodes::LOGICAL_ERROR);\n \n-    return std::make_shared<PipelineExecutor>(processors, process_list_element);\n+    return std::make_shared<PipelineExecutor>(processors.get(), process_list_element);\n }\n \n QueryPipeline & QueryPipeline::operator= (QueryPipeline && rhs)\n@@ -837,4 +842,49 @@ QueryPipeline & QueryPipeline::operator= (QueryPipeline && rhs)\n     return *this;\n }\n \n+void QueryPipeline::ProcessorsContainer::emplace(ProcessorPtr processor)\n+{\n+    if (collected_processors)\n+        collected_processors->emplace_back(processor);\n+\n+    processors.emplace_back(std::move(processor));\n+}\n+\n+void QueryPipeline::ProcessorsContainer::emplace(Processors processors_)\n+{\n+    for (auto & processor : processors_)\n+        emplace(std::move(processor));\n+}\n+\n+Processors * QueryPipeline::ProcessorsContainer::setCollectedProcessors(Processors * collected_processors_)\n+{\n+    if (collected_processors && collected_processors_)\n+        throw Exception(\"Cannot set collected processors to QueryPipeline because \"\n+                        \"another one object was already created for current pipeline.\" , ErrorCodes::LOGICAL_ERROR);\n+\n+    std::swap(collected_processors, collected_processors_);\n+    return collected_processors_;\n+}\n+\n+QueryPipelineProcessorsCollector::QueryPipelineProcessorsCollector(QueryPipeline & pipeline_, IQueryPlanStep * step_)\n+    : pipeline(pipeline_), step(step_)\n+{\n+    pipeline.processors.setCollectedProcessors(&processors);\n+}\n+\n+QueryPipelineProcessorsCollector::~QueryPipelineProcessorsCollector()\n+{\n+    pipeline.processors.setCollectedProcessors(nullptr);\n+}\n+\n+Processors QueryPipelineProcessorsCollector::detachProcessors(size_t group)\n+{\n+    for (auto & processor : processors)\n+        processor->setQueryPlanStep(step, group);\n+\n+    Processors res;\n+    res.swap(processors);\n+    return res;\n+}\n+\n }\ndiff --git a/src/Processors/QueryPipeline.h b/src/Processors/QueryPipeline.h\nindex d1342385292a..7990b0b79f52 100644\n--- a/src/Processors/QueryPipeline.h\n+++ b/src/Processors/QueryPipeline.h\n@@ -18,6 +18,8 @@ class Context;\n \n class IOutputFormat;\n \n+class QueryPipelineProcessorsCollector;\n+\n class QueryPipeline\n {\n private:\n@@ -69,6 +71,27 @@ class QueryPipeline\n     };\n \n public:\n+\n+    class ProcessorsContainer\n+    {\n+    public:\n+        bool empty() const { return processors.empty(); }\n+        void emplace(ProcessorPtr processor);\n+        void emplace(Processors processors_);\n+        Processors * getCollectedProcessors() const { return collected_processors; }\n+        Processors * setCollectedProcessors(Processors * collected_processors);\n+        Processors & get() { return processors; }\n+        const Processors & get() const { return processors; }\n+        Processors detach() { return std::move(processors); }\n+    private:\n+        /// All added processors.\n+        Processors processors;\n+\n+        /// If is set, all newly created processors will be added to this too.\n+        /// It is needed for debug. See QueryPipelineProcessorsCollector below.\n+        Processors * collected_processors = nullptr;\n+    };\n+\n     QueryPipeline() = default;\n     QueryPipeline(QueryPipeline &&) = default;\n     ~QueryPipeline() = default;\n@@ -136,6 +159,8 @@ class QueryPipeline\n \n     void enableQuotaForCurrentStreams();\n \n+    /// Unite several pipelines together. Result pipeline would have common_header structure.\n+    /// If collector is used, it will collect only newly-added processors, but not processors from pipelines.\n     void unitePipelines(std::vector<std::unique_ptr<QueryPipeline>> pipelines, const Block & common_header);\n \n     PipelineExecutorPtr execute();\n@@ -180,6 +205,9 @@ class QueryPipeline\n     Pipe getPipe() &&;\n     Pipes getPipes() &&;\n \n+    /// Get internal processors.\n+    const Processors & getProcessors() const { return processors.get(); }\n+\n private:\n     /// Destruction order: processors, header, locks, temporary storages, local contexts\n \n@@ -193,8 +221,7 @@ class QueryPipeline\n     /// Common header for each stream.\n     Block current_header;\n \n-    /// All added processors.\n-    Processors processors;\n+    ProcessorsContainer processors;\n \n     /// Port for each independent \"stream\".\n     Streams streams;\n@@ -222,6 +249,24 @@ class QueryPipeline\n     void addSimpleTransformImpl(const TProcessorGetter & getter);\n \n     void initRowsBeforeLimit();\n+\n+    friend class QueryPipelineProcessorsCollector;\n+};\n+\n+/// This is a small class which collects newly added processors to QueryPipeline.\n+/// Pipeline must live longer that this class.\n+class QueryPipelineProcessorsCollector\n+{\n+public:\n+    explicit QueryPipelineProcessorsCollector(QueryPipeline & pipeline_, IQueryPlanStep * step_ = nullptr);\n+    ~QueryPipelineProcessorsCollector();\n+\n+    Processors detachProcessors(size_t group = 0);\n+\n+private:\n+    QueryPipeline & pipeline;\n+    IQueryPlanStep * step;\n+    Processors processors;\n };\n \n }\ndiff --git a/src/Processors/QueryPlan/AddingDelayedSourceStep.cpp b/src/Processors/QueryPlan/AddingDelayedSourceStep.cpp\nindex 8aeb7485c71e..9326d7808baf 100644\n--- a/src/Processors/QueryPlan/AddingDelayedSourceStep.cpp\n+++ b/src/Processors/QueryPlan/AddingDelayedSourceStep.cpp\n@@ -24,6 +24,7 @@ AddingDelayedSourceStep::AddingDelayedSourceStep(\n \n void AddingDelayedSourceStep::transformPipeline(QueryPipeline & pipeline)\n {\n+    source->setQueryPlanStep(this);\n     pipeline.addDelayedStream(source);\n }\n \ndiff --git a/src/Processors/QueryPlan/AggregatingStep.cpp b/src/Processors/QueryPlan/AggregatingStep.cpp\nindex cc6e1833a724..d8163cfa1cab 100644\n--- a/src/Processors/QueryPlan/AggregatingStep.cpp\n+++ b/src/Processors/QueryPlan/AggregatingStep.cpp\n@@ -27,7 +27,7 @@ AggregatingStep::AggregatingStep(\n     bool storage_has_evenly_distributed_read_,\n     InputOrderInfoPtr group_by_info_,\n     SortDescription group_by_sort_description_)\n-    : ITransformingStep(input_stream_, params_.getHeader(final_), getTraits())\n+    : ITransformingStep(input_stream_, params_.getHeader(final_), getTraits(), false)\n     , params(std::move(params_))\n     , final(std::move(final_))\n     , max_block_size(max_block_size_)\n@@ -41,6 +41,8 @@ AggregatingStep::AggregatingStep(\n \n void AggregatingStep::transformPipeline(QueryPipeline & pipeline)\n {\n+    QueryPipelineProcessorsCollector collector(pipeline, this);\n+\n     /// Forget about current totals and extremes. They will be calculated again after aggregation if needed.\n     pipeline.dropTotalsAndExtremes();\n \n@@ -76,6 +78,8 @@ void AggregatingStep::transformPipeline(QueryPipeline & pipeline)\n                     return std::make_shared<AggregatingInOrderTransform>(header, transform_params, group_by_sort_description, max_block_size, many_data, counter++);\n                 });\n \n+                aggregating_in_order = collector.detachProcessors(0);\n+\n                 for (auto & column_description : group_by_sort_description)\n                 {\n                     if (!column_description.column_name.empty())\n@@ -92,6 +96,7 @@ void AggregatingStep::transformPipeline(QueryPipeline & pipeline)\n                     max_block_size);\n \n                 pipeline.addPipe({ std::move(transform) });\n+                aggregating_sorted = collector.detachProcessors(1);\n             }\n             else\n             {\n@@ -99,6 +104,8 @@ void AggregatingStep::transformPipeline(QueryPipeline & pipeline)\n                 {\n                     return std::make_shared<AggregatingInOrderTransform>(header, transform_params, group_by_sort_description, max_block_size);\n                 });\n+\n+                aggregating_in_order = collector.detachProcessors(0);\n             }\n \n             pipeline.addSimpleTransform([&](const Block & header)\n@@ -106,6 +113,8 @@ void AggregatingStep::transformPipeline(QueryPipeline & pipeline)\n                 return std::make_shared<FinalizingSimpleTransform>(header, transform_params);\n             });\n \n+            finalizing = collector.detachProcessors(2);\n+\n             pipeline.enableQuotaForCurrentStreams();\n             return;\n         }\n@@ -127,6 +136,8 @@ void AggregatingStep::transformPipeline(QueryPipeline & pipeline)\n         });\n \n         pipeline.resize(1);\n+\n+        aggregating = collector.detachProcessors(0);\n     }\n     else\n     {\n@@ -136,9 +147,29 @@ void AggregatingStep::transformPipeline(QueryPipeline & pipeline)\n         {\n             return std::make_shared<AggregatingTransform>(header, transform_params);\n         });\n+\n+        aggregating = collector.detachProcessors(0);\n     }\n \n     pipeline.enableQuotaForCurrentStreams();\n }\n \n+void AggregatingStep::describeActions(FormatSettings & settings) const\n+{\n+    params.explain(settings.out, settings.offset);\n+}\n+\n+void AggregatingStep::describePipeline(FormatSettings & settings) const\n+{\n+    if (!aggregating.empty())\n+        IQueryPlanStep::describePipeline(aggregating, settings);\n+    else\n+    {\n+        /// Processors are printed in reverse order.\n+        IQueryPlanStep::describePipeline(finalizing, settings);\n+        IQueryPlanStep::describePipeline(aggregating_sorted, settings);\n+        IQueryPlanStep::describePipeline(aggregating_in_order, settings);\n+    }\n+}\n+\n }\ndiff --git a/src/Processors/QueryPlan/AggregatingStep.h b/src/Processors/QueryPlan/AggregatingStep.h\nindex e1be5ff0d348..853173895b32 100644\n--- a/src/Processors/QueryPlan/AggregatingStep.h\n+++ b/src/Processors/QueryPlan/AggregatingStep.h\n@@ -29,6 +29,9 @@ class AggregatingStep : public ITransformingStep\n \n     void transformPipeline(QueryPipeline & pipeline) override;\n \n+    void describeActions(FormatSettings &) const override;\n+    void describePipeline(FormatSettings & settings) const override;\n+\n private:\n     Aggregator::Params params;\n     bool final;\n@@ -40,6 +43,13 @@ class AggregatingStep : public ITransformingStep\n \n     InputOrderInfoPtr group_by_info;\n     SortDescription group_by_sort_description;\n+\n+    Processors aggregating_in_order;\n+    Processors aggregating_sorted;\n+    Processors finalizing;\n+\n+    Processors aggregating;\n+\n };\n \n }\ndiff --git a/src/Processors/QueryPlan/ConvertingStep.cpp b/src/Processors/QueryPlan/ConvertingStep.cpp\nindex 1c4c3529e805..4713a3c44027 100644\n--- a/src/Processors/QueryPlan/ConvertingStep.cpp\n+++ b/src/Processors/QueryPlan/ConvertingStep.cpp\n@@ -1,6 +1,7 @@\n #include <Processors/QueryPlan/ConvertingStep.h>\n #include <Processors/QueryPipeline.h>\n #include <Processors/Transforms/ConvertingTransform.h>\n+#include <IO/Operators.h>\n \n namespace DB\n {\n@@ -30,4 +31,40 @@ void ConvertingStep::transformPipeline(QueryPipeline & pipeline)\n     });\n }\n \n+void ConvertingStep::describeActions(FormatSettings & settings) const\n+{\n+    const auto & header = input_streams[0].header;\n+    auto conversion = ConvertingTransform(header, result_header, ConvertingTransform::MatchColumnsMode::Name)\n+            .getConversion();\n+\n+    auto dump_description = [&](const ColumnWithTypeAndName & elem, bool is_const)\n+    {\n+        settings.out << elem.name << ' ' << elem.type->getName() << (is_const ? \" Const\" : \"\") << '\\n';\n+    };\n+\n+    String prefix(settings.offset, ' ');\n+\n+    for (size_t i = 0; i < conversion.size(); ++i)\n+    {\n+        const auto & from = header.getByPosition(conversion[i]);\n+        const auto & to = result_header.getByPosition(i);\n+\n+        bool from_const = from.column && isColumnConst(*from.column);\n+        bool to_const = to.column && isColumnConst(*to.column);\n+\n+        settings.out << prefix;\n+\n+        if (from.name == to.name && from.type->equals(*to.type) && from_const == to_const)\n+            dump_description(from, from_const);\n+        else\n+        {\n+            dump_description(to, to_const);\n+            settings.out << \" \u2190 \";\n+            dump_description(from, from_const);\n+        }\n+\n+        settings.out << '\\n';\n+    }\n+}\n+\n }\ndiff --git a/src/Processors/QueryPlan/ConvertingStep.h b/src/Processors/QueryPlan/ConvertingStep.h\nindex cb53dfcbd5f4..5591b49028c5 100644\n--- a/src/Processors/QueryPlan/ConvertingStep.h\n+++ b/src/Processors/QueryPlan/ConvertingStep.h\n@@ -14,6 +14,8 @@ class ConvertingStep : public ITransformingStep\n \n     void transformPipeline(QueryPipeline & pipeline) override;\n \n+    void describeActions(FormatSettings & settings) const override;\n+\n private:\n     Block result_header;\n };\ndiff --git a/src/Processors/QueryPlan/CreatingSetsStep.cpp b/src/Processors/QueryPlan/CreatingSetsStep.cpp\nindex e402318ad709..a61900662c52 100644\n--- a/src/Processors/QueryPlan/CreatingSetsStep.cpp\n+++ b/src/Processors/QueryPlan/CreatingSetsStep.cpp\n@@ -1,6 +1,7 @@\n #include <Processors/QueryPlan/CreatingSetsStep.h>\n #include <Processors/QueryPipeline.h>\n #include <Processors/Transforms/CreatingSetsTransform.h>\n+#include <IO/Operators.h>\n \n namespace DB\n {\n@@ -37,4 +38,20 @@ void CreatingSetsStep::transformPipeline(QueryPipeline & pipeline)\n     pipeline.addCreatingSetsTransform(std::move(creating_sets));\n }\n \n+void CreatingSetsStep::describeActions(FormatSettings & settings) const\n+{\n+    String prefix(settings.offset, ' ');\n+\n+    for (const auto & set : subqueries_for_sets)\n+    {\n+        settings.out << prefix;\n+        if (set.second.set)\n+            settings.out << \"Set: \";\n+        else if (set.second.join)\n+            settings.out << \"Join: \";\n+\n+        settings.out << set.first << '\\n';\n+    }\n+}\n+\n }\ndiff --git a/src/Processors/QueryPlan/CreatingSetsStep.h b/src/Processors/QueryPlan/CreatingSetsStep.h\nindex e749b79c9a5c..4ba4863c043d 100644\n--- a/src/Processors/QueryPlan/CreatingSetsStep.h\n+++ b/src/Processors/QueryPlan/CreatingSetsStep.h\n@@ -20,6 +20,8 @@ class CreatingSetsStep : public ITransformingStep\n \n     void transformPipeline(QueryPipeline & pipeline) override;\n \n+    void describeActions(FormatSettings & settings) const override;\n+\n private:\n     SubqueriesForSets subqueries_for_sets;\n     SizeLimits network_transfer_limits;\ndiff --git a/src/Processors/QueryPlan/DistinctStep.cpp b/src/Processors/QueryPlan/DistinctStep.cpp\nindex be810a5f5cd5..2a94754a6b0e 100644\n--- a/src/Processors/QueryPlan/DistinctStep.cpp\n+++ b/src/Processors/QueryPlan/DistinctStep.cpp\n@@ -1,6 +1,7 @@\n #include <Processors/QueryPlan/DistinctStep.h>\n #include <Processors/Transforms/DistinctTransform.h>\n #include <Processors/QueryPipeline.h>\n+#include <IO/Operators.h>\n \n namespace DB\n {\n@@ -68,4 +69,27 @@ void DistinctStep::transformPipeline(QueryPipeline & pipeline)\n     });\n }\n \n+void DistinctStep::describeActions(FormatSettings & settings) const\n+{\n+    String prefix(settings.offset, ' ');\n+    settings.out << prefix << \"Columns: \";\n+\n+    if (columns.empty())\n+        settings.out << \"none\";\n+    else\n+    {\n+        bool first = true;\n+        for (const auto & column : columns)\n+        {\n+            if (!first)\n+                settings.out << \", \";\n+            first = false;\n+\n+            settings.out << column;\n+        }\n+    }\n+\n+    settings.out << '\\n';\n+}\n+\n }\ndiff --git a/src/Processors/QueryPlan/DistinctStep.h b/src/Processors/QueryPlan/DistinctStep.h\nindex 4460b3a37646..4bfd73ce0442 100644\n--- a/src/Processors/QueryPlan/DistinctStep.h\n+++ b/src/Processors/QueryPlan/DistinctStep.h\n@@ -20,6 +20,8 @@ class DistinctStep : public ITransformingStep\n \n     void transformPipeline(QueryPipeline & pipeline) override;\n \n+    void describeActions(FormatSettings & settings) const override;\n+\n private:\n     SizeLimits set_size_limits;\n     UInt64 limit_hint;\ndiff --git a/src/Processors/QueryPlan/ExpressionStep.cpp b/src/Processors/QueryPlan/ExpressionStep.cpp\nindex ca28d22163d3..66dd5fed31aa 100644\n--- a/src/Processors/QueryPlan/ExpressionStep.cpp\n+++ b/src/Processors/QueryPlan/ExpressionStep.cpp\n@@ -3,6 +3,7 @@\n #include <Processors/QueryPipeline.h>\n #include <Processors/Transforms/InflatingExpressionTransform.h>\n #include <Interpreters/ExpressionActions.h>\n+#include <IO/Operators.h>\n \n namespace DB\n {\n@@ -37,6 +38,25 @@ void ExpressionStep::transformPipeline(QueryPipeline & pipeline)\n     });\n }\n \n+static void doDescribeActions(const ExpressionActionsPtr & expression, IQueryPlanStep::FormatSettings & settings)\n+{\n+    String prefix(settings.offset, ' ');\n+    bool first = true;\n+\n+    for (const auto & action : expression->getActions())\n+    {\n+        settings.out << prefix << (first ? \"Actions: \"\n+                                         : \"         \");\n+        first = false;\n+        settings.out << action.toString() << '\\n';\n+    }\n+}\n+\n+void ExpressionStep::describeActions(FormatSettings & settings) const\n+{\n+    doDescribeActions(expression, settings);\n+}\n+\n InflatingExpressionStep::InflatingExpressionStep(const DataStream & input_stream_, ExpressionActionsPtr expression_)\n     : ITransformingStep(\n         input_stream_,\n@@ -64,4 +84,9 @@ void InflatingExpressionStep::transformPipeline(QueryPipeline & pipeline)\n     });\n }\n \n+void InflatingExpressionStep::describeActions(FormatSettings & settings) const\n+{\n+    doDescribeActions(expression, settings);\n+}\n+\n }\ndiff --git a/src/Processors/QueryPlan/ExpressionStep.h b/src/Processors/QueryPlan/ExpressionStep.h\nindex 0a7292ebdd90..80d2fd2630dc 100644\n--- a/src/Processors/QueryPlan/ExpressionStep.h\n+++ b/src/Processors/QueryPlan/ExpressionStep.h\n@@ -21,6 +21,8 @@ class ExpressionStep : public ITransformingStep\n \n     void transformPipeline(QueryPipeline & pipeline) override;\n \n+    void describeActions(FormatSettings & settings) const override;\n+\n private:\n     ExpressionActionsPtr expression;\n };\n@@ -36,6 +38,8 @@ class InflatingExpressionStep : public ITransformingStep\n \n     void transformPipeline(QueryPipeline & pipeline) override;\n \n+    void describeActions(FormatSettings & settings) const override;\n+\n private:\n     ExpressionActionsPtr expression;\n };\ndiff --git a/src/Processors/QueryPlan/FillingStep.cpp b/src/Processors/QueryPlan/FillingStep.cpp\nindex dbd4874bffce..2c06d14e6a5a 100644\n--- a/src/Processors/QueryPlan/FillingStep.cpp\n+++ b/src/Processors/QueryPlan/FillingStep.cpp\n@@ -1,6 +1,7 @@\n #include <Processors/QueryPlan/FillingStep.h>\n #include <Processors/Transforms/FillingTransform.h>\n #include <Processors/QueryPipeline.h>\n+#include <IO/Operators.h>\n \n namespace DB\n {\n@@ -36,4 +37,11 @@ void FillingStep::transformPipeline(QueryPipeline & pipeline)\n     });\n }\n \n+void FillingStep::describeActions(FormatSettings & settings) const\n+{\n+    settings.out << String(settings.offset, ' ');\n+    dumpSortDescription(sort_description, input_streams.front().header, settings.out);\n+    settings.out << '\\n';\n+}\n+\n }\ndiff --git a/src/Processors/QueryPlan/FillingStep.h b/src/Processors/QueryPlan/FillingStep.h\nindex fba63a3f0af7..85736464a6c3 100644\n--- a/src/Processors/QueryPlan/FillingStep.h\n+++ b/src/Processors/QueryPlan/FillingStep.h\n@@ -15,6 +15,8 @@ class FillingStep : public ITransformingStep\n \n     void transformPipeline(QueryPipeline & pipeline) override;\n \n+    void describeActions(FormatSettings & settings) const override;\n+\n private:\n     SortDescription sort_description;\n };\ndiff --git a/src/Processors/QueryPlan/FilterStep.cpp b/src/Processors/QueryPlan/FilterStep.cpp\nindex 4b9dd449b7cd..9abca58a5de3 100644\n--- a/src/Processors/QueryPlan/FilterStep.cpp\n+++ b/src/Processors/QueryPlan/FilterStep.cpp\n@@ -2,6 +2,7 @@\n #include <Processors/Transforms/FilterTransform.h>\n #include <Processors/QueryPipeline.h>\n #include <Interpreters/ExpressionActions.h>\n+#include <IO/Operators.h>\n \n namespace DB\n {\n@@ -42,4 +43,19 @@ void FilterStep::transformPipeline(QueryPipeline & pipeline)\n     });\n }\n \n+void FilterStep::describeActions(FormatSettings & settings) const\n+{\n+    String prefix(settings.offset, ' ');\n+    settings.out << prefix << \"Filter column: \" << filter_column_name << '\\n';\n+\n+    bool first = true;\n+    for (const auto & action : expression->getActions())\n+    {\n+        settings.out << prefix << (first ? \"Actions: \"\n+                                         : \"         \");\n+        first = false;\n+        settings.out << action.toString() << '\\n';\n+    }\n+}\n+\n }\ndiff --git a/src/Processors/QueryPlan/FilterStep.h b/src/Processors/QueryPlan/FilterStep.h\nindex 940253955eea..1decc61349a8 100644\n--- a/src/Processors/QueryPlan/FilterStep.h\n+++ b/src/Processors/QueryPlan/FilterStep.h\n@@ -20,6 +20,8 @@ class FilterStep : public ITransformingStep\n     String getName() const override { return \"Filter\"; }\n     void transformPipeline(QueryPipeline & pipeline) override;\n \n+    void describeActions(FormatSettings & settings) const override;\n+\n private:\n     ExpressionActionsPtr expression;\n     String filter_column_name;\ndiff --git a/src/Processors/QueryPlan/FinishSortingStep.cpp b/src/Processors/QueryPlan/FinishSortingStep.cpp\nindex a6a071b78486..85325e07a0cd 100644\n--- a/src/Processors/QueryPlan/FinishSortingStep.cpp\n+++ b/src/Processors/QueryPlan/FinishSortingStep.cpp\n@@ -4,6 +4,7 @@\n #include <Processors/Merges/MergingSortedTransform.h>\n #include <Processors/Transforms/PartialSortingTransform.h>\n #include <Processors/Transforms/FinishSortingTransform.h>\n+#include <IO/Operators.h>\n \n namespace DB\n {\n@@ -68,4 +69,20 @@ void FinishSortingStep::transformPipeline(QueryPipeline & pipeline)\n     }\n }\n \n+void FinishSortingStep::describeActions(FormatSettings & settings) const\n+{\n+    String prefix(settings.offset, ' ');\n+\n+    settings.out << prefix << \"Prefix sort description: \";\n+    dumpSortDescription(prefix_description, input_streams.front().header, settings.out);\n+    settings.out << '\\n';\n+\n+    settings.out << prefix << \"Result sort description: \";\n+    dumpSortDescription(result_description, input_streams.front().header, settings.out);\n+    settings.out << '\\n';\n+\n+    if (limit)\n+        settings.out << prefix << \"Limit \" << limit << '\\n';\n+}\n+\n }\ndiff --git a/src/Processors/QueryPlan/FinishSortingStep.h b/src/Processors/QueryPlan/FinishSortingStep.h\nindex e5bba41d51e3..41a96b9456a3 100644\n--- a/src/Processors/QueryPlan/FinishSortingStep.h\n+++ b/src/Processors/QueryPlan/FinishSortingStep.h\n@@ -20,6 +20,8 @@ class FinishSortingStep : public ITransformingStep\n \n     void transformPipeline(QueryPipeline & pipeline) override;\n \n+    void describeActions(FormatSettings & settings) const override;\n+\n private:\n     SortDescription prefix_description;\n     SortDescription result_description;\ndiff --git a/src/Processors/QueryPlan/IQueryPlanStep.cpp b/src/Processors/QueryPlan/IQueryPlanStep.cpp\nindex f25d17188ea1..0be40019c582 100644\n--- a/src/Processors/QueryPlan/IQueryPlanStep.cpp\n+++ b/src/Processors/QueryPlan/IQueryPlanStep.cpp\n@@ -1,4 +1,6 @@\n #include <Processors/QueryPlan/IQueryPlanStep.h>\n+#include <Processors/IProcessor.h>\n+#include <IO/Operators.h>\n \n namespace DB\n {\n@@ -16,4 +18,94 @@ const DataStream & IQueryPlanStep::getOutputStream() const\n     return *output_stream;\n }\n \n+static void doDescribeHeader(const Block & header, size_t count, IQueryPlanStep::FormatSettings & settings)\n+{\n+    String prefix(settings.offset, settings.indent_char);\n+    prefix += \"Header\";\n+\n+    if (count > 1)\n+        prefix += \" \u00d7 \" + std::to_string(count) + \" \";\n+\n+    prefix += \": \";\n+\n+    settings.out << prefix;\n+\n+    if (!header)\n+    {\n+        settings.out << \" empty\\n\";\n+        return;\n+    }\n+\n+    prefix.assign(prefix.size(), settings.indent_char);\n+    bool first = true;\n+\n+    for (const auto & elem : header)\n+    {\n+        if (!first)\n+            settings.out << prefix;\n+\n+        first = false;\n+        elem.dumpStructure(settings.out);\n+        settings.out << '\\n';\n+    }\n+}\n+\n+static void doDescribeProcessor(const IProcessor & processor, size_t count, IQueryPlanStep::FormatSettings & settings)\n+{\n+    settings.out << String(settings.offset, settings.indent_char) << processor.getName();\n+    if (count > 1)\n+        settings.out << \" \u00d7 \" << std::to_string(count);\n+\n+    size_t num_inputs = processor.getInputs().size();\n+    size_t num_outputs = processor.getOutputs().size();\n+    if (num_inputs != 1 || num_outputs != 1)\n+        settings.out << \" \" << std::to_string(num_inputs) << \" \u2192 \" << std::to_string(num_outputs);\n+\n+    settings.out << '\\n';\n+\n+    if (settings.write_header)\n+    {\n+        const Block * last_header = nullptr;\n+        size_t num_equal_headers = 0;\n+\n+        for (const auto & port : processor.getOutputs())\n+        {\n+            if (last_header && !blocksHaveEqualStructure(*last_header, port.getHeader()))\n+            {\n+                doDescribeHeader(*last_header, num_equal_headers, settings);\n+                num_equal_headers = 0;\n+            }\n+\n+            ++num_equal_headers;\n+            last_header = &port.getHeader();\n+        }\n+\n+        if (last_header)\n+            doDescribeHeader(*last_header, num_equal_headers, settings);\n+    }\n+\n+    settings.offset += settings.indent;\n+}\n+\n+void IQueryPlanStep::describePipeline(const Processors & processors, FormatSettings & settings)\n+{\n+    const IProcessor * prev = nullptr;\n+    size_t count = 0;\n+\n+    for (auto it = processors.rbegin(); it != processors.rend(); ++it)\n+    {\n+        if (prev && prev->getName() != (*it)->getName())\n+        {\n+            doDescribeProcessor(*prev, count, settings);\n+            count = 0;\n+        }\n+\n+        ++count;\n+        prev = it->get();\n+    }\n+\n+    if (prev)\n+        doDescribeProcessor(*prev, count, settings);\n+}\n+\n }\ndiff --git a/src/Processors/QueryPlan/IQueryPlanStep.h b/src/Processors/QueryPlan/IQueryPlanStep.h\nindex 6612f165188a..558b6a825cbc 100644\n--- a/src/Processors/QueryPlan/IQueryPlanStep.h\n+++ b/src/Processors/QueryPlan/IQueryPlanStep.h\n@@ -8,6 +8,10 @@ class QueryPipeline;\n using QueryPipelinePtr = std::unique_ptr<QueryPipeline>;\n using QueryPipelines = std::vector<QueryPipelinePtr>;\n \n+class IProcessor;\n+using ProcessorPtr = std::shared_ptr<IProcessor>;\n+using Processors = std::vector<ProcessorPtr>;\n+\n /// Description of data stream.\n /// Single logical data stream may relate to many ports of pipeline.\n class DataStream\n@@ -57,12 +61,29 @@ class IQueryPlanStep\n     const std::string & getStepDescription() const { return step_description; }\n     void setStepDescription(std::string description) { step_description = std::move(description); }\n \n+    struct FormatSettings\n+    {\n+        WriteBuffer & out;\n+        size_t offset = 0;\n+        const size_t indent = 2;\n+        const char indent_char = ' ';\n+        const bool write_header = false;\n+    };\n+\n+    /// Get detailed description of step actions. This is shown in EXPLAIN query with options `actions = 1`.\n+    virtual void describeActions(FormatSettings & /*settings*/) const {}\n+\n+    /// Get description of processors added in current step. Should be called after updatePipeline().\n+    virtual void describePipeline(FormatSettings & /*settings*/) const {}\n+\n protected:\n     DataStreams input_streams;\n     std::optional<DataStream> output_stream;\n \n     /// Text description about what current step does.\n     std::string step_description;\n+\n+    static void describePipeline(const Processors & processors, FormatSettings & settings);\n };\n \n using QueryPlanStepPtr = std::unique_ptr<IQueryPlanStep>;\ndiff --git a/src/Processors/QueryPlan/ISourceStep.cpp b/src/Processors/QueryPlan/ISourceStep.cpp\nindex 9909a7772675..cf68104f18c1 100644\n--- a/src/Processors/QueryPlan/ISourceStep.cpp\n+++ b/src/Processors/QueryPlan/ISourceStep.cpp\n@@ -12,8 +12,15 @@ ISourceStep::ISourceStep(DataStream output_stream_)\n QueryPipelinePtr ISourceStep::updatePipeline(QueryPipelines)\n {\n     auto pipeline = std::make_unique<QueryPipeline>();\n+    QueryPipelineProcessorsCollector collector(*pipeline, this);\n     initializePipeline(*pipeline);\n+    processors = collector.detachProcessors();\n     return pipeline;\n }\n \n+void ISourceStep::describePipeline(FormatSettings & settings) const\n+{\n+    IQueryPlanStep::describePipeline(processors, settings);\n+}\n+\n }\ndiff --git a/src/Processors/QueryPlan/ISourceStep.h b/src/Processors/QueryPlan/ISourceStep.h\nindex 7fdfa3e0e388..54bc19957f41 100644\n--- a/src/Processors/QueryPlan/ISourceStep.h\n+++ b/src/Processors/QueryPlan/ISourceStep.h\n@@ -13,6 +13,12 @@ class ISourceStep : public IQueryPlanStep\n     QueryPipelinePtr updatePipeline(QueryPipelines pipelines) override;\n \n     virtual void initializePipeline(QueryPipeline & pipeline) = 0;\n+\n+    void describePipeline(FormatSettings & settings) const override;\n+\n+private:\n+    /// We collect processors got after pipeline transformation.\n+    Processors processors;\n };\n \n }\ndiff --git a/src/Processors/QueryPlan/ITransformingStep.cpp b/src/Processors/QueryPlan/ITransformingStep.cpp\nindex 1510ee1e0eb5..9c67fedc734e 100644\n--- a/src/Processors/QueryPlan/ITransformingStep.cpp\n+++ b/src/Processors/QueryPlan/ITransformingStep.cpp\n@@ -4,7 +4,8 @@\n namespace DB\n {\n \n-ITransformingStep::ITransformingStep(DataStream input_stream, Block output_header, DataStreamTraits traits)\n+ITransformingStep::ITransformingStep(DataStream input_stream, Block output_header, DataStreamTraits traits, bool collect_processors_)\n+    : collect_processors(collect_processors_)\n {\n     output_stream = DataStream{.header = std::move(output_header)};\n \n@@ -19,7 +20,15 @@ ITransformingStep::ITransformingStep(DataStream input_stream, Block output_heade\n \n QueryPipelinePtr ITransformingStep::updatePipeline(QueryPipelines pipelines)\n {\n-    transformPipeline(*pipelines.front());\n+    if (collect_processors)\n+    {\n+        QueryPipelineProcessorsCollector collector(*pipelines.front(), this);\n+        transformPipeline(*pipelines.front());\n+        processors = collector.detachProcessors();\n+    }\n+    else\n+        transformPipeline(*pipelines.front());\n+\n     return std::move(pipelines.front());\n }\n \n@@ -38,4 +47,9 @@ void ITransformingStep::updateDistinctColumns(const Block & res_header, NameSet\n     }\n }\n \n+void ITransformingStep::describePipeline(FormatSettings & settings) const\n+{\n+    IQueryPlanStep::describePipeline(processors, settings);\n+}\n+\n }\ndiff --git a/src/Processors/QueryPlan/ITransformingStep.h b/src/Processors/QueryPlan/ITransformingStep.h\nindex 45b48c9ecc74..30ff039cf39c 100644\n--- a/src/Processors/QueryPlan/ITransformingStep.h\n+++ b/src/Processors/QueryPlan/ITransformingStep.h\n@@ -25,15 +25,22 @@ class ITransformingStep : public IQueryPlanStep\n         bool preserves_number_of_streams;\n     };\n \n-    ITransformingStep(DataStream input_stream, Block output_header, DataStreamTraits traits);\n+    ITransformingStep(DataStream input_stream, Block output_header, DataStreamTraits traits, bool collect_processors_ = true);\n \n     QueryPipelinePtr updatePipeline(QueryPipelines pipelines) override;\n \n     virtual void transformPipeline(QueryPipeline & pipeline) = 0;\n \n+    void describePipeline(FormatSettings & settings) const override;\n+\n protected:\n     /// Clear distinct_columns if res_header doesn't contain all of them.\n     static void updateDistinctColumns(const Block & res_header, NameSet & distinct_columns);\n+\n+private:\n+    /// We collect processors got after pipeline transformation.\n+    Processors processors;\n+    bool collect_processors;\n };\n \n }\ndiff --git a/src/Processors/QueryPlan/LimitByStep.cpp b/src/Processors/QueryPlan/LimitByStep.cpp\nindex 5eea41936669..30d226307868 100644\n--- a/src/Processors/QueryPlan/LimitByStep.cpp\n+++ b/src/Processors/QueryPlan/LimitByStep.cpp\n@@ -1,6 +1,7 @@\n #include <Processors/QueryPlan/LimitByStep.h>\n #include <Processors/Transforms/LimitByTransform.h>\n #include <Processors/QueryPipeline.h>\n+#include <IO/Operators.h>\n \n namespace DB\n {\n@@ -39,4 +40,30 @@ void LimitByStep::transformPipeline(QueryPipeline & pipeline)\n     });\n }\n \n+void LimitByStep::describeActions(FormatSettings & settings) const\n+{\n+    String prefix(settings.offset, ' ');\n+\n+    settings.out << prefix << \"Columns: \";\n+\n+    if (columns.empty())\n+        settings.out << \"none\\n\";\n+    else\n+    {\n+        bool first = true;\n+        for (const auto & column : columns)\n+        {\n+            if (!first)\n+                settings.out << \", \";\n+            first = false;\n+\n+            settings.out << column;\n+        }\n+        settings.out << '\\n';\n+    }\n+\n+    settings.out << prefix << \"Length \" << group_length << '\\n';\n+    settings.out << prefix << \"Offset \" << group_offset << '\\n';\n+}\n+\n }\ndiff --git a/src/Processors/QueryPlan/LimitByStep.h b/src/Processors/QueryPlan/LimitByStep.h\nindex bf3943a7f592..9320735640c9 100644\n--- a/src/Processors/QueryPlan/LimitByStep.h\n+++ b/src/Processors/QueryPlan/LimitByStep.h\n@@ -16,6 +16,8 @@ class LimitByStep : public ITransformingStep\n \n     void transformPipeline(QueryPipeline & pipeline) override;\n \n+    void describeActions(FormatSettings & settings) const override;\n+\n private:\n     size_t group_length;\n     size_t group_offset;\n@@ -23,5 +25,3 @@ class LimitByStep : public ITransformingStep\n };\n \n }\n-\n-\ndiff --git a/src/Processors/QueryPlan/LimitStep.cpp b/src/Processors/QueryPlan/LimitStep.cpp\nindex 9e11a8205676..55447535f814 100644\n--- a/src/Processors/QueryPlan/LimitStep.cpp\n+++ b/src/Processors/QueryPlan/LimitStep.cpp\n@@ -1,6 +1,7 @@\n #include <Processors/QueryPlan/LimitStep.h>\n #include <Processors/QueryPipeline.h>\n #include <Processors/LimitTransform.h>\n+#include <IO/Operators.h>\n \n namespace DB\n {\n@@ -36,4 +37,30 @@ void LimitStep::transformPipeline(QueryPipeline & pipeline)\n     pipeline.addPipe({std::move(transform)});\n }\n \n+void LimitStep::describeActions(FormatSettings & settings) const\n+{\n+    String prefix(settings.offset, ' ');\n+    settings.out << prefix << \"Limit \" << limit << '\\n';\n+    settings.out << prefix << \"Offset \" << offset << '\\n';\n+\n+    if (with_ties || always_read_till_end)\n+    {\n+        settings.out << prefix;\n+\n+        String str;\n+        if (with_ties)\n+            settings.out << \"WITH TIES\";\n+\n+        if (always_read_till_end)\n+        {\n+            if (!with_ties)\n+                settings.out << \", \";\n+\n+            settings.out << \"Reads all data\";\n+        }\n+\n+        settings.out << '\\n';\n+    }\n+}\n+\n }\ndiff --git a/src/Processors/QueryPlan/LimitStep.h b/src/Processors/QueryPlan/LimitStep.h\nindex 3fd77bea22fc..e04ecfcb471f 100644\n--- a/src/Processors/QueryPlan/LimitStep.h\n+++ b/src/Processors/QueryPlan/LimitStep.h\n@@ -21,6 +21,8 @@ class LimitStep : public ITransformingStep\n \n     void transformPipeline(QueryPipeline & pipeline) override;\n \n+    void describeActions(FormatSettings & settings) const override;\n+\n private:\n     size_t limit;\n     size_t offset;\ndiff --git a/src/Processors/QueryPlan/MergeSortingStep.cpp b/src/Processors/QueryPlan/MergeSortingStep.cpp\nindex 8fa5f4782f60..410d68d3c01f 100644\n--- a/src/Processors/QueryPlan/MergeSortingStep.cpp\n+++ b/src/Processors/QueryPlan/MergeSortingStep.cpp\n@@ -1,6 +1,7 @@\n #include <Processors/QueryPlan/MergeSortingStep.h>\n #include <Processors/QueryPipeline.h>\n #include <Processors/Transforms/MergeSortingTransform.h>\n+#include <IO/Operators.h>\n \n namespace DB\n {\n@@ -50,4 +51,15 @@ void MergeSortingStep::transformPipeline(QueryPipeline & pipeline)\n     });\n }\n \n+void MergeSortingStep::describeActions(FormatSettings & settings) const\n+{\n+    String prefix(settings.offset, ' ');\n+    settings.out << prefix << \"Sort description: \";\n+    dumpSortDescription(description, input_streams.front().header, settings.out);\n+    settings.out << '\\n';\n+\n+    if (limit)\n+        settings.out << prefix << \"Limit \" << limit << '\\n';\n+}\n+\n }\ndiff --git a/src/Processors/QueryPlan/MergeSortingStep.h b/src/Processors/QueryPlan/MergeSortingStep.h\nindex a0e33a826909..0bbc066622ec 100644\n--- a/src/Processors/QueryPlan/MergeSortingStep.h\n+++ b/src/Processors/QueryPlan/MergeSortingStep.h\n@@ -25,6 +25,8 @@ class MergeSortingStep : public ITransformingStep\n \n     void transformPipeline(QueryPipeline & pipeline) override;\n \n+    void describeActions(FormatSettings & settings) const override;\n+\n private:\n     SortDescription description;\n     size_t max_merged_block_size;\ndiff --git a/src/Processors/QueryPlan/MergingAggregatedStep.cpp b/src/Processors/QueryPlan/MergingAggregatedStep.cpp\nindex 870203842a1f..7e9d073e1868 100644\n--- a/src/Processors/QueryPlan/MergingAggregatedStep.cpp\n+++ b/src/Processors/QueryPlan/MergingAggregatedStep.cpp\n@@ -65,4 +65,9 @@ void MergingAggregatedStep::transformPipeline(QueryPipeline & pipeline)\n     pipeline.enableQuotaForCurrentStreams();\n }\n \n+void MergingAggregatedStep::describeActions(FormatSettings & settings) const\n+{\n+    return params->params.explain(settings.out, settings.offset);\n+}\n+\n }\ndiff --git a/src/Processors/QueryPlan/MergingAggregatedStep.h b/src/Processors/QueryPlan/MergingAggregatedStep.h\nindex c0da5961c52c..5ffceb7f9387 100644\n--- a/src/Processors/QueryPlan/MergingAggregatedStep.h\n+++ b/src/Processors/QueryPlan/MergingAggregatedStep.h\n@@ -23,6 +23,8 @@ class MergingAggregatedStep : public ITransformingStep\n \n     void transformPipeline(QueryPipeline & pipeline) override;\n \n+    void describeActions(FormatSettings & settings) const override;\n+\n private:\n     AggregatingTransformParamsPtr params;\n     bool memory_efficient_aggregation;\ndiff --git a/src/Processors/QueryPlan/MergingSortedStep.cpp b/src/Processors/QueryPlan/MergingSortedStep.cpp\nindex dc44a96e45e1..50bef82910c0 100644\n--- a/src/Processors/QueryPlan/MergingSortedStep.cpp\n+++ b/src/Processors/QueryPlan/MergingSortedStep.cpp\n@@ -1,6 +1,7 @@\n #include <Processors/QueryPlan/MergingSortedStep.h>\n #include <Processors/QueryPipeline.h>\n #include <Processors/Merges/MergingSortedTransform.h>\n+#include <IO/Operators.h>\n \n namespace DB\n {\n@@ -45,4 +46,12 @@ void MergingSortedStep::transformPipeline(QueryPipeline & pipeline)\n     }\n }\n \n+void MergingSortedStep::describeActions(FormatSettings & settings) const\n+{\n+    String prefix(settings.offset, ' ');\n+    settings.out << prefix << \"Sort description: \";\n+    dumpSortDescription(sort_description, input_streams.front().header, settings.out);\n+    settings.out << '\\n';\n+}\n+\n }\ndiff --git a/src/Processors/QueryPlan/MergingSortedStep.h b/src/Processors/QueryPlan/MergingSortedStep.h\nindex 195843032391..a5b0c12b1fb7 100644\n--- a/src/Processors/QueryPlan/MergingSortedStep.h\n+++ b/src/Processors/QueryPlan/MergingSortedStep.h\n@@ -21,6 +21,8 @@ class MergingSortedStep : public ITransformingStep\n \n     void transformPipeline(QueryPipeline & pipeline) override;\n \n+    void describeActions(FormatSettings & settings) const override;\n+\n private:\n     SortDescription sort_description;\n     size_t max_block_size;\ndiff --git a/src/Processors/QueryPlan/OffsetsStep.cpp b/src/Processors/QueryPlan/OffsetStep.cpp\nsimilarity index 64%\nrename from src/Processors/QueryPlan/OffsetsStep.cpp\nrename to src/Processors/QueryPlan/OffsetStep.cpp\nindex fc6ef1e7c302..79ccad26686a 100644\n--- a/src/Processors/QueryPlan/OffsetsStep.cpp\n+++ b/src/Processors/QueryPlan/OffsetStep.cpp\n@@ -1,6 +1,7 @@\n-#include <Processors/QueryPlan/OffsetsStep.h>\n+#include <Processors/QueryPlan/OffsetStep.h>\n #include <Processors/OffsetTransform.h>\n #include <Processors/QueryPipeline.h>\n+#include <IO/Operators.h>\n \n namespace DB\n {\n@@ -15,13 +16,13 @@ static ITransformingStep::DataStreamTraits getTraits()\n     };\n }\n \n-OffsetsStep::OffsetsStep(const DataStream & input_stream_, size_t offset_)\n+OffsetStep::OffsetStep(const DataStream & input_stream_, size_t offset_)\n     : ITransformingStep(input_stream_, input_stream_.header, getTraits())\n     , offset(offset_)\n {\n }\n \n-void OffsetsStep::transformPipeline(QueryPipeline & pipeline)\n+void OffsetStep::transformPipeline(QueryPipeline & pipeline)\n {\n     auto transform = std::make_shared<OffsetTransform>(\n             pipeline.getHeader(), offset, pipeline.getNumStreams());\n@@ -29,4 +30,9 @@ void OffsetsStep::transformPipeline(QueryPipeline & pipeline)\n     pipeline.addPipe({std::move(transform)});\n }\n \n+void OffsetStep::describeActions(FormatSettings & settings) const\n+{\n+    settings.out << String(settings.offset, ' ') << \"Offset \" << offset << '\\n';\n+}\n+\n }\ndiff --git a/src/Processors/QueryPlan/OffsetsStep.h b/src/Processors/QueryPlan/OffsetStep.h\nsimilarity index 54%\nrename from src/Processors/QueryPlan/OffsetsStep.h\nrename to src/Processors/QueryPlan/OffsetStep.h\nindex 41efac1a4220..17949371edf4 100644\n--- a/src/Processors/QueryPlan/OffsetsStep.h\n+++ b/src/Processors/QueryPlan/OffsetStep.h\n@@ -6,15 +6,17 @@ namespace DB\n {\n \n /// Executes OFFSET (without LIMIT). See OffsetTransform.\n-class OffsetsStep : public ITransformingStep\n+class OffsetStep : public ITransformingStep\n {\n public:\n-    OffsetsStep(const DataStream & input_stream_, size_t offset_);\n+    OffsetStep(const DataStream & input_stream_, size_t offset_);\n \n-    String getName() const override { return \"Offsets\"; }\n+    String getName() const override { return \"Offset\"; }\n \n     void transformPipeline(QueryPipeline & pipeline) override;\n \n+    void describeActions(FormatSettings & settings) const override;\n+\n private:\n     size_t offset;\n };\ndiff --git a/src/Processors/QueryPlan/PartialSortingStep.cpp b/src/Processors/QueryPlan/PartialSortingStep.cpp\nindex e9400492710a..3d602169087a 100644\n--- a/src/Processors/QueryPlan/PartialSortingStep.cpp\n+++ b/src/Processors/QueryPlan/PartialSortingStep.cpp\n@@ -2,6 +2,7 @@\n #include <Processors/QueryPipeline.h>\n #include <Processors/Transforms/PartialSortingTransform.h>\n #include <Processors/Transforms/LimitsCheckingTransform.h>\n+#include <IO/Operators.h>\n \n namespace DB\n {\n@@ -52,4 +53,12 @@ void PartialSortingStep::transformPipeline(QueryPipeline & pipeline)\n     });\n }\n \n+void PartialSortingStep::describeActions(FormatSettings & settings) const\n+{\n+    String prefix(settings.offset, ' ');\n+    settings.out << prefix << \"Sort description: \";\n+    dumpSortDescription(sort_description, input_streams.front().header, settings.out);\n+    settings.out << '\\n';\n+}\n+\n }\ndiff --git a/src/Processors/QueryPlan/PartialSortingStep.h b/src/Processors/QueryPlan/PartialSortingStep.h\nindex c4656b8c9f30..12e9cec961a9 100644\n--- a/src/Processors/QueryPlan/PartialSortingStep.h\n+++ b/src/Processors/QueryPlan/PartialSortingStep.h\n@@ -20,6 +20,8 @@ class PartialSortingStep : public ITransformingStep\n \n     void transformPipeline(QueryPipeline & pipeline) override;\n \n+    void describeActions(FormatSettings & settings) const override;\n+\n private:\n     SortDescription sort_description;\n     UInt64 limit;\ndiff --git a/src/Processors/QueryPlan/QueryPlan.cpp b/src/Processors/QueryPlan/QueryPlan.cpp\nindex cd8c442a3db7..2e5d2a3a5f41 100644\n--- a/src/Processors/QueryPlan/QueryPlan.cpp\n+++ b/src/Processors/QueryPlan/QueryPlan.cpp\n@@ -1,6 +1,8 @@\n #include <Processors/QueryPlan/QueryPlan.h>\n #include <Processors/QueryPlan/IQueryPlanStep.h>\n #include <Processors/QueryPipeline.h>\n+#include <IO/WriteBuffer.h>\n+#include <IO/Operators.h>\n #include <stack>\n \n namespace DB\n@@ -11,6 +13,7 @@ namespace ErrorCodes\n     extern const int LOGICAL_ERROR;\n }\n \n+QueryPlan::QueryPlan() = default;\n QueryPlan::~QueryPlan() = default;\n \n void QueryPlan::checkInitialized() const\n@@ -173,4 +176,135 @@ void QueryPlan::addInterpreterContext(std::shared_ptr<Context> context)\n     interpreter_context.emplace_back(std::move(context));\n }\n \n+\n+static void explainStep(\n+    const IQueryPlanStep & step,\n+    IQueryPlanStep::FormatSettings & settings,\n+    const QueryPlan::ExplainPlanOptions & options)\n+{\n+    std::string prefix(settings.offset, ' ');\n+    settings.out << prefix;\n+    settings.out << step.getName();\n+\n+    const auto & description = step.getStepDescription();\n+    if (options.description && !description.empty())\n+        settings.out <<\" (\" << description << ')';\n+\n+    settings.out.write('\\n');\n+\n+    if (options.header)\n+    {\n+        settings.out << prefix;\n+\n+        if (!step.hasOutputStream())\n+            settings.out << \"No header\";\n+        else if (!step.getOutputStream().header)\n+            settings.out << \"Empty header\";\n+        else\n+        {\n+            settings.out << \"Header: \";\n+            bool first = true;\n+\n+            for (const auto & elem : step.getOutputStream().header)\n+            {\n+                if (!first)\n+                    settings.out << \"\\n\" << prefix << \"        \";\n+\n+                first = false;\n+                elem.dumpStructure(settings.out);\n+            }\n+        }\n+\n+        settings.out.write('\\n');\n+    }\n+\n+    if (options.actions)\n+        step.describeActions(settings);\n+}\n+\n+void QueryPlan::explainPlan(WriteBuffer & buffer, const ExplainPlanOptions & options)\n+{\n+    checkInitialized();\n+\n+    IQueryPlanStep::FormatSettings settings{.out = buffer, .write_header = options.header};\n+\n+    struct Frame\n+    {\n+        Node * node;\n+        bool is_description_printed = false;\n+        size_t next_child = 0;\n+    };\n+\n+    std::stack<Frame> stack;\n+    stack.push(Frame{.node = root});\n+\n+    while (!stack.empty())\n+    {\n+        auto & frame = stack.top();\n+\n+        if (!frame.is_description_printed)\n+        {\n+            settings.offset = (stack.size() - 1) * settings.indent;\n+            explainStep(*frame.node->step, settings, options);\n+            frame.is_description_printed = true;\n+        }\n+\n+        if (frame.next_child < frame.node->children.size())\n+        {\n+            stack.push(Frame{frame.node->children[frame.next_child]});\n+            ++frame.next_child;\n+        }\n+        else\n+            stack.pop();\n+    }\n+}\n+\n+static void explainPipelineStep(IQueryPlanStep & step, IQueryPlanStep::FormatSettings & settings)\n+{\n+    settings.out << String(settings.offset, settings.indent_char) << \"(\" << step.getName() << \")\\n\";\n+    size_t current_offset = settings.offset;\n+    step.describePipeline(settings);\n+    if (current_offset == settings.offset)\n+        settings.offset += settings.indent;\n+}\n+\n+void QueryPlan::explainPipeline(WriteBuffer & buffer, const ExplainPipelineOptions & options)\n+{\n+    checkInitialized();\n+\n+    IQueryPlanStep::FormatSettings settings{.out = buffer, .write_header = options.header};\n+\n+    struct Frame\n+    {\n+        Node * node;\n+        size_t offset = 0;\n+        bool is_description_printed = false;\n+        size_t next_child = 0;\n+    };\n+\n+    std::stack<Frame> stack;\n+    stack.push(Frame{.node = root});\n+\n+    while (!stack.empty())\n+    {\n+        auto & frame = stack.top();\n+\n+        if (!frame.is_description_printed)\n+        {\n+            settings.offset = frame.offset;\n+            explainPipelineStep(*frame.node->step, settings);\n+            frame.offset = settings.offset;\n+            frame.is_description_printed = true;\n+        }\n+\n+        if (frame.next_child < frame.node->children.size())\n+        {\n+            stack.push(Frame{frame.node->children[frame.next_child], frame.offset});\n+            ++frame.next_child;\n+        }\n+        else\n+            stack.pop();\n+    }\n+}\n+\n }\ndiff --git a/src/Processors/QueryPlan/QueryPlan.h b/src/Processors/QueryPlan/QueryPlan.h\nindex 9fadc45c3b2d..6f965f7daece 100644\n--- a/src/Processors/QueryPlan/QueryPlan.h\n+++ b/src/Processors/QueryPlan/QueryPlan.h\n@@ -15,6 +15,7 @@ class QueryPipeline;\n using QueryPipelinePtr = std::unique_ptr<QueryPipeline>;\n \n class Context;\n+class WriteBuffer;\n \n /// A tree of query steps.\n /// The goal of QueryPlan is to build QueryPipeline.\n@@ -22,6 +23,7 @@ class Context;\n class QueryPlan\n {\n public:\n+    QueryPlan();\n     ~QueryPlan();\n \n     void unitePlans(QueryPlanStepPtr step, std::vector<QueryPlan> plans);\n@@ -33,6 +35,25 @@ class QueryPlan\n \n     QueryPipelinePtr buildQueryPipeline();\n \n+    struct ExplainPlanOptions\n+    {\n+        /// Add output header to step.\n+        bool header = false;\n+        /// Add description of step.\n+        bool description = true;\n+        /// Add detailed information about step actions.\n+        bool actions = false;\n+    };\n+\n+    struct ExplainPipelineOptions\n+    {\n+        /// Show header of output ports.\n+        bool header = false;\n+    };\n+\n+    void explainPlan(WriteBuffer & buffer, const ExplainPlanOptions & options);\n+    void explainPipeline(WriteBuffer & buffer, const ExplainPipelineOptions & options);\n+\n     /// Set upper limit for the recommend number of threads. Will be applied to the newly-created pipelines.\n     /// TODO: make it in a better way.\n     void setMaxThreads(size_t max_threads_) { max_threads = max_threads_; }\ndiff --git a/src/Processors/QueryPlan/ReadFromStorageStep.cpp b/src/Processors/QueryPlan/ReadFromStorageStep.cpp\nindex 7e8d44abed87..f3f7dd1bc8bf 100644\n--- a/src/Processors/QueryPlan/ReadFromStorageStep.cpp\n+++ b/src/Processors/QueryPlan/ReadFromStorageStep.cpp\n@@ -68,6 +68,7 @@ ReadFromStorageStep::ReadFromStorageStep(\n     }\n \n     pipeline = std::make_unique<QueryPipeline>();\n+    QueryPipelineProcessorsCollector collector(*pipeline, this);\n \n     /// Table lock is stored inside pipeline here.\n     pipeline->addTableLock(table_lock);\n@@ -124,6 +125,8 @@ ReadFromStorageStep::ReadFromStorageStep(\n     pipeline->addInterpreterContext(std::move(context));\n     pipeline->addStorageHolder(std::move(storage));\n \n+    processors = collector.detachProcessors();\n+\n     output_stream = DataStream{.header = pipeline->getHeader(), .has_single_port = pipeline->getNumStreams() == 1};\n }\n \n@@ -134,4 +137,9 @@ QueryPipelinePtr ReadFromStorageStep::updatePipeline(QueryPipelines)\n     return std::move(pipeline);\n }\n \n+void ReadFromStorageStep::describePipeline(FormatSettings & settings) const\n+{\n+    IQueryPlanStep::describePipeline(processors, settings);\n+}\n+\n }\ndiff --git a/src/Processors/QueryPlan/ReadFromStorageStep.h b/src/Processors/QueryPlan/ReadFromStorageStep.h\nindex fa34dedd573b..fce69bb0f0f9 100644\n--- a/src/Processors/QueryPlan/ReadFromStorageStep.h\n+++ b/src/Processors/QueryPlan/ReadFromStorageStep.h\n@@ -38,6 +38,8 @@ class ReadFromStorageStep : public IQueryPlanStep\n \n     QueryPipelinePtr updatePipeline(QueryPipelines) override;\n \n+    void describePipeline(FormatSettings & settings) const override;\n+\n private:\n     TableLockHolder table_lock;\n     StorageMetadataPtr metadata_snapshot;\n@@ -52,6 +54,7 @@ class ReadFromStorageStep : public IQueryPlanStep\n     size_t max_streams;\n \n     QueryPipelinePtr pipeline;\n+    Processors processors;\n };\n \n }\ndiff --git a/src/Processors/QueryPlan/TotalsHavingStep.cpp b/src/Processors/QueryPlan/TotalsHavingStep.cpp\nindex 8464e6d2ba67..aa1ee0bc49c0 100644\n--- a/src/Processors/QueryPlan/TotalsHavingStep.cpp\n+++ b/src/Processors/QueryPlan/TotalsHavingStep.cpp\n@@ -2,6 +2,8 @@\n #include <Processors/Transforms/DistinctTransform.h>\n #include <Processors/QueryPipeline.h>\n #include <Processors/Transforms/TotalsHavingTransform.h>\n+#include <Interpreters/ExpressionActions.h>\n+#include <IO/Operators.h>\n \n namespace DB\n {\n@@ -46,4 +48,37 @@ void TotalsHavingStep::transformPipeline(QueryPipeline & pipeline)\n     pipeline.addTotalsHavingTransform(std::move(totals_having));\n }\n \n+static String totalsModeToString(TotalsMode totals_mode, double auto_include_threshold)\n+{\n+    switch (totals_mode)\n+    {\n+        case TotalsMode::BEFORE_HAVING:\n+            return \"before_having\";\n+        case TotalsMode::AFTER_HAVING_INCLUSIVE:\n+            return \"after_having_inclusive\";\n+        case TotalsMode::AFTER_HAVING_EXCLUSIVE:\n+            return \"after_having_exclusive\";\n+        case TotalsMode::AFTER_HAVING_AUTO:\n+            return \"after_having_auto threshold \" + std::to_string(auto_include_threshold);\n+    }\n+\n+    __builtin_unreachable();\n+}\n+\n+void TotalsHavingStep::describeActions(FormatSettings & settings) const\n+{\n+    String prefix(settings.offset, ' ');\n+    settings.out << prefix << \"Filter column: \" << filter_column_name << '\\n';\n+    settings.out << prefix << \"Mode: \" << totalsModeToString(totals_mode, auto_include_threshold) << '\\n';\n+\n+    bool first = true;\n+    for (const auto & action : expression->getActions())\n+    {\n+        settings.out << prefix << (first ? \"Actions: \"\n+                                         : \"         \");\n+        first = false;\n+        settings.out << action.toString() << '\\n';\n+    }\n+}\n+\n }\ndiff --git a/src/Processors/QueryPlan/TotalsHavingStep.h b/src/Processors/QueryPlan/TotalsHavingStep.h\nindex 76d793bff774..c9c73985126a 100644\n--- a/src/Processors/QueryPlan/TotalsHavingStep.h\n+++ b/src/Processors/QueryPlan/TotalsHavingStep.h\n@@ -26,6 +26,8 @@ class TotalsHavingStep : public ITransformingStep\n \n     void transformPipeline(QueryPipeline & pipeline) override;\n \n+    void describeActions(FormatSettings & settings) const override;\n+\n private:\n     bool overflow_row;\n     ExpressionActionsPtr expression;\ndiff --git a/src/Processors/QueryPlan/UnionStep.cpp b/src/Processors/QueryPlan/UnionStep.cpp\nindex 14a43cac78b9..a8897e778a1f 100644\n--- a/src/Processors/QueryPlan/UnionStep.cpp\n+++ b/src/Processors/QueryPlan/UnionStep.cpp\n@@ -21,9 +21,12 @@ UnionStep::UnionStep(DataStreams input_streams_, Block result_header, size_t max\n QueryPipelinePtr UnionStep::updatePipeline(QueryPipelines pipelines)\n {\n     auto pipeline = std::make_unique<QueryPipeline>();\n+    QueryPipelineProcessorsCollector collector(*pipeline, this);\n+\n     if (pipelines.empty())\n     {\n         pipeline->init(Pipe(std::make_shared<NullSource>(output_stream->header)));\n+        processors = collector.detachProcessors();\n         return pipeline;\n     }\n \n@@ -37,7 +40,13 @@ QueryPipelinePtr UnionStep::updatePipeline(QueryPipelines pipelines)\n         pipeline->setMaxThreads(std::min<UInt64>(num_pipelines, max_threads));\n     }\n \n+    processors = collector.detachProcessors();\n     return pipeline;\n }\n \n+void UnionStep::describePipeline(FormatSettings & settings) const\n+{\n+    IQueryPlanStep::describePipeline(processors, settings);\n+}\n+\n }\ndiff --git a/src/Processors/QueryPlan/UnionStep.h b/src/Processors/QueryPlan/UnionStep.h\nindex 8209c95fa984..9e00e24279b6 100644\n--- a/src/Processors/QueryPlan/UnionStep.h\n+++ b/src/Processors/QueryPlan/UnionStep.h\n@@ -15,9 +15,12 @@ class UnionStep : public IQueryPlanStep\n \n     QueryPipelinePtr updatePipeline(QueryPipelines pipelines) override;\n \n+    void describePipeline(FormatSettings & settings) const override;\n+\n private:\n     Block header;\n     size_t max_threads;\n+    Processors processors;\n };\n \n }\ndiff --git a/src/Processors/Transforms/ConvertingTransform.h b/src/Processors/Transforms/ConvertingTransform.h\nindex 45a6688c07ab..b4b42dcb6ead 100644\n--- a/src/Processors/Transforms/ConvertingTransform.h\n+++ b/src/Processors/Transforms/ConvertingTransform.h\n@@ -35,6 +35,8 @@ class ConvertingTransform : public ISimpleTransform\n \n     String getName() const override { return \"Converting\"; }\n \n+    const ColumnNumbers & getConversion() const { return conversion; }\n+\n protected:\n     void transform(Chunk & chunk) override;\n \ndiff --git a/src/Processors/printPipeline.cpp b/src/Processors/printPipeline.cpp\nnew file mode 100644\nindex 000000000000..5cdab1ed3ffd\n--- /dev/null\n+++ b/src/Processors/printPipeline.cpp\n@@ -0,0 +1,177 @@\n+#include <Processors/printPipeline.h>\n+#include <Processors/QueryPlan/IQueryPlanStep.h>\n+#include <set>\n+#include <map>\n+\n+namespace DB\n+{\n+\n+void printPipelineCompact(const Processors & processors, WriteBuffer & out, bool with_header)\n+{\n+    struct Node;\n+\n+    /// Group by processors name, QueryPlanStep and group in this step.\n+    struct Key\n+    {\n+        size_t group;\n+        IQueryPlanStep * step;\n+        std::string name;\n+\n+        auto getTuple() const { return std::forward_as_tuple(group, step, name); }\n+\n+        bool operator<(const Key & other) const\n+        {\n+            return getTuple() < other.getTuple();\n+        }\n+    };\n+\n+    /// Group ports by header.\n+    struct EdgeData\n+    {\n+        Block header;\n+        size_t count;\n+    };\n+\n+    using Edge = std::vector<EdgeData>;\n+\n+    struct Node\n+    {\n+        size_t id = 0;\n+        std::map<Node *, Edge> edges = {};\n+        std::vector<const IProcessor *> agents = {};\n+    };\n+\n+    std::map<Key, Node> graph;\n+\n+    auto get_key = [](const IProcessor & processor)\n+    {\n+        return Key{processor.getQueryPlanStepGroup(), processor.getQueryPlanStep(), processor.getName()};\n+    };\n+\n+    /// Fill nodes.\n+    for (const auto & processor : processors)\n+    {\n+        auto res = graph.emplace(get_key(*processor), Node());\n+        auto & node = res.first->second;\n+        node.agents.emplace_back(processor.get());\n+\n+        if (res.second)\n+            node.id = graph.size();\n+    }\n+\n+    Block empty_header;\n+\n+    /// Fill edges.\n+    for (const auto & processor : processors)\n+    {\n+        auto & from =  graph[get_key(*processor)];\n+\n+        for (auto & port : processor->getOutputs())\n+        {\n+            if (!port.isConnected())\n+                continue;\n+\n+            auto & to = graph[get_key(port.getInputPort().getProcessor())];\n+            auto & edge = from.edges[&to];\n+\n+            /// Use empty header for each edge if with_header is false.\n+            const auto & header = with_header ? port.getHeader()\n+                                              : empty_header;\n+\n+            /// Group by header.\n+            bool found = false;\n+            for (auto & item : edge)\n+            {\n+                if (blocksHaveEqualStructure(header, item.header))\n+                {\n+                    found = true;\n+                    ++item.count;\n+                    break;\n+                }\n+            }\n+\n+            if (!found)\n+                edge.emplace_back(EdgeData{header, 1});\n+        }\n+    }\n+\n+    /// Group processors by it's QueryPlanStep.\n+    std::map<IQueryPlanStep *, std::vector<const Node *>> steps_map;\n+\n+    for (const auto & item : graph)\n+        steps_map[item.first.step].emplace_back(&item.second);\n+\n+    out << \"digraph\\n{\\n\";\n+    out << \"  rankdir=\\\"LR\\\";\\n\";\n+    out << \"  { node [shape = box]\\n\";\n+\n+    /// Nodes // TODO quoting and escaping\n+    size_t next_step = 0;\n+    for (const auto & item : steps_map)\n+    {\n+        /// Use separate clusters for each step.\n+        if (item.first != nullptr)\n+        {\n+            out << \"    subgraph cluster_\" << next_step << \" {\\n\";\n+            out << \"      label =\\\"\" << item.first->getName() << \"\\\";\\n\";\n+            out << \"      style=filled;\\n\";\n+            out << \"      color=lightgrey;\\n\";\n+            out << \"      node [style=filled,color=white];\\n\";\n+            out << \"      { rank = same;\\n\";\n+\n+            ++next_step;\n+        }\n+\n+        for (const auto & node : item.second)\n+        {\n+            const auto & processor = node->agents.front();\n+            out << \"        n\" << node->id << \" [label=\\\"\" << processor->getName();\n+\n+            if (node->agents.size() > 1)\n+                out << \" \u00d7 \" << node->agents.size();\n+\n+            const auto & description = processor->getDescription();\n+            if (!description.empty())\n+                out << ' ' << description;\n+\n+            out << \"\\\"];\\n\";\n+        }\n+\n+        if (item.first != nullptr)\n+        {\n+            out << \"      }\\n\";\n+            out << \"    }\\n\";\n+        }\n+    }\n+\n+    out << \"  }\\n\";\n+\n+    /// Edges\n+    for (const auto & item : graph)\n+    {\n+        for (const auto & edge : item.second.edges)\n+        {\n+            for (const auto & data : edge.second)\n+            {\n+                out << \"  n\" << item.second.id << \" -> \" << \"n\" << edge.first->id << \" [label=\\\"\";\n+\n+                if (data.count > 1)\n+                    out << \"\u00d7 \" << data.count;\n+\n+                if (with_header)\n+                {\n+                    for (const auto & elem : data.header)\n+                    {\n+                        out << \"\\n\";\n+                        elem.dumpStructure(out);\n+                    }\n+                }\n+\n+                out << \"\\\"];\\n\";\n+            }\n+        }\n+    }\n+    out << \"}\\n\";\n+}\n+\n+}\ndiff --git a/src/Processors/printPipeline.h b/src/Processors/printPipeline.h\nindex ce7306ec4cf9..9497bc3cc3c2 100644\n--- a/src/Processors/printPipeline.h\n+++ b/src/Processors/printPipeline.h\n@@ -15,6 +15,8 @@ template <typename Processors, typename Statuses>\n void printPipeline(const Processors & processors, const Statuses & statuses, WriteBuffer & out)\n {\n     out << \"digraph\\n{\\n\";\n+    out << \"  rankdir=\\\"LR\\\";\\n\";\n+    out << \"  { node [shape = box]\\n\";\n \n     auto get_proc_id = [](const IProcessor & proc) -> UInt64\n     {\n@@ -26,7 +28,7 @@ void printPipeline(const Processors & processors, const Statuses & statuses, Wri\n     /// Nodes // TODO quoting and escaping\n     for (const auto & processor : processors)\n     {\n-        out << \"n\" << get_proc_id(*processor) << \"[label=\\\"\" << processor->getName() << processor->getDescription();\n+        out << \"    n\" << get_proc_id(*processor) << \"[label=\\\"\" << processor->getName() << processor->getDescription();\n \n         if (statuses_iter != statuses.end())\n         {\n@@ -37,6 +39,8 @@ void printPipeline(const Processors & processors, const Statuses & statuses, Wri\n         out << \"\\\"];\\n\";\n     }\n \n+    out << \"  }\\n\";\n+\n     /// Edges\n     for (const auto & processor : processors)\n     {\n@@ -48,7 +52,7 @@ void printPipeline(const Processors & processors, const Statuses & statuses, Wri\n             const IProcessor & curr = *processor;\n             const IProcessor & next = port.getInputPort().getProcessor();\n \n-            out << \"n\" << get_proc_id(curr) << \" -> n\" << get_proc_id(next) << \";\\n\";\n+            out << \"  n\" << get_proc_id(curr) << \" -> n\" << get_proc_id(next) << \";\\n\";\n         }\n     }\n     out << \"}\\n\";\n@@ -60,4 +64,10 @@ void printPipeline(const Processors & processors, WriteBuffer & out)\n     printPipeline(processors, std::vector<IProcessor::Status>(), out);\n }\n \n+/// Prints pipeline in compact representation.\n+/// Group processors by it's name, QueryPlanStep and QueryPlanStepGroup.\n+/// If QueryPlanStep wasn't set for processor, representation may be not correct.\n+/// If with_header is set, prints block header for each edge.\n+void printPipelineCompact(const Processors & processors, WriteBuffer & out, bool with_header);\n+\n }\ndiff --git a/src/Processors/ya.make b/src/Processors/ya.make\nindex e0a9d96e1d3d..6cf7bee1dbd8 100644\n--- a/src/Processors/ya.make\n+++ b/src/Processors/ya.make\n@@ -105,6 +105,7 @@ SRCS(\n     OffsetTransform.cpp\n     Pipe.cpp\n     Port.cpp\n+    printPipeline.cpp\n     QueryPipeline.cpp\n     ResizeProcessor.cpp\n     Sources/DelayedSource.cpp\n@@ -157,7 +158,7 @@ SRCS(\n     QueryPlan/MergeSortingStep.cpp\n     QueryPlan/MergingAggregatedStep.cpp\n     QueryPlan/MergingSortedStep.cpp\n-    QueryPlan/OffsetsStep.cpp\n+    QueryPlan/OffsetStep.cpp\n     QueryPlan/PartialSortingStep.cpp\n     QueryPlan/UnionStep.cpp\n     QueryPlan/ReadFromPreparedSource.cpp\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00597_push_down_predicate.reference b/tests/queries/0_stateless/00597_push_down_predicate.reference\nindex 829c5a1577e5..1798c7270885 100644\n--- a/tests/queries/0_stateless/00597_push_down_predicate.reference\n+++ b/tests/queries/0_stateless/00597_push_down_predicate.reference\n@@ -4,61 +4,582 @@\n 1\n 2000-01-01\t1\ttest string 1\t1\n -------Forbid push down-------\n-SELECT count()\\nFROM \\n(\\n    SELECT \\n        [number] AS a,\\n        [number * 2] AS b\\n    FROM system.numbers\\n    LIMIT 1\\n) AS t\\nARRAY JOIN \\n    a,\\n    b\\nWHERE NOT ignore(a + b)\n+SELECT count()\n+FROM \n+(\n+    SELECT \n+        [number] AS a,\n+        [number * 2] AS b\n+    FROM system.numbers\n+    LIMIT 1\n+) AS t\n+ARRAY JOIN \n+    a,\n+    b\n+WHERE NOT ignore(a + b)\n 1\n-SELECT \\n    a,\\n    b\\nFROM \\n(\\n    SELECT 1 AS a\\n)\\nANY LEFT JOIN \\n(\\n    SELECT \\n        1 AS a,\\n        1 AS b\\n) USING (a)\\nWHERE b = 0\n-SELECT \\n    a,\\n    b\\nFROM \\n(\\n    SELECT \\n        1 AS a,\\n        1 AS b\\n)\\nANY RIGHT JOIN \\n(\\n    SELECT 1 AS a\\n) USING (a)\\nWHERE b = 0\n-SELECT \\n    a,\\n    b\\nFROM \\n(\\n    SELECT 1 AS a\\n)\\nANY FULL OUTER JOIN \\n(\\n    SELECT \\n        1 AS a,\\n        1 AS b\\n) USING (a)\\nWHERE b = 0\n-SELECT \\n    a,\\n    b\\nFROM \\n(\\n    SELECT \\n        1 AS a,\\n        1 AS b\\n)\\nANY FULL OUTER JOIN \\n(\\n    SELECT 1 AS a\\n) USING (a)\\nWHERE b = 0\n+SELECT \n+    a,\n+    b\n+FROM \n+(\n+    SELECT 1 AS a\n+)\n+ANY LEFT JOIN \n+(\n+    SELECT \n+        1 AS a,\n+        1 AS b\n+) USING (a)\n+WHERE b = 0\n+SELECT \n+    a,\n+    b\n+FROM \n+(\n+    SELECT \n+        1 AS a,\n+        1 AS b\n+)\n+ANY RIGHT JOIN \n+(\n+    SELECT 1 AS a\n+) USING (a)\n+WHERE b = 0\n+SELECT \n+    a,\n+    b\n+FROM \n+(\n+    SELECT 1 AS a\n+)\n+ANY FULL OUTER JOIN \n+(\n+    SELECT \n+        1 AS a,\n+        1 AS b\n+) USING (a)\n+WHERE b = 0\n+SELECT \n+    a,\n+    b\n+FROM \n+(\n+    SELECT \n+        1 AS a,\n+        1 AS b\n+)\n+ANY FULL OUTER JOIN \n+(\n+    SELECT 1 AS a\n+) USING (a)\n+WHERE b = 0\n -------Need push down-------\n-SELECT toString(value) AS value\\nFROM \\n(\\n    SELECT 1 AS value\\n)\n+SELECT toString(value) AS value\n+FROM \n+(\n+    SELECT 1 AS value\n+)\n 1\n-SELECT id\\nFROM \\n(\\n    SELECT 1 AS id\\n    UNION ALL\\n    SELECT 2 AS `--predicate_optimizer_0`\\n    WHERE 0\\n)\\nWHERE id = 1\n+SELECT id\n+FROM \n+(\n+    SELECT 1 AS id\n+    UNION ALL\n+    SELECT 2 AS `--predicate_optimizer_0`\n+    WHERE 0\n+)\n+WHERE id = 1\n 1\n-SELECT id\\nFROM \\n(\\n    SELECT arrayJoin([1, 2, 3]) AS id\\n    WHERE id = 1\\n)\\nWHERE id = 1\n+SELECT id\n+FROM \n+(\n+    SELECT arrayJoin([1, 2, 3]) AS id\n+    WHERE id = 1\n+)\n+WHERE id = 1\n 1\n-SELECT id\\nFROM \\n(\\n    SELECT arrayJoin([1, 2, 3]) AS id\\n    WHERE id = 1\\n)\\nWHERE id = 1\n+SELECT id\n+FROM \n+(\n+    SELECT arrayJoin([1, 2, 3]) AS id\n+    WHERE id = 1\n+)\n+WHERE id = 1\n 1\n-SELECT \\n    id,\\n    subquery\\nFROM \\n(\\n    SELECT \\n        1 AS id,\\n        CAST(1, \\'UInt8\\') AS subquery\\n)\n+SELECT \n+    id,\n+    subquery\n+FROM \n+(\n+    SELECT \n+        1 AS id,\n+        CAST(1, \\'UInt8\\') AS subquery\n+)\n 1\t1\n-SELECT \\n    a,\\n    b\\nFROM \\n(\\n    SELECT \\n        toUInt64(sum(id) AS b) AS a,\\n        b\\n    FROM test_00597\\n    HAVING a = 3\\n)\\nWHERE a = 3\n+SELECT \n+    a,\n+    b\n+FROM \n+(\n+    SELECT \n+        toUInt64(sum(id) AS b) AS a,\n+        b\n+    FROM test_00597\n+    HAVING a = 3\n+)\n+WHERE a = 3\n 3\t3\n-SELECT \\n    date,\\n    id,\\n    name,\\n    value\\nFROM \\n(\\n    SELECT \\n        date,\\n        name,\\n        value,\\n        min(id) AS id\\n    FROM test_00597\\n    GROUP BY \\n        date,\\n        name,\\n        value\\n    HAVING id = 1\\n)\\nWHERE id = 1\n+SELECT \n+    date,\n+    id,\n+    name,\n+    value\n+FROM \n+(\n+    SELECT \n+        date,\n+        name,\n+        value,\n+        min(id) AS id\n+    FROM test_00597\n+    GROUP BY \n+        date,\n+        name,\n+        value\n+    HAVING id = 1\n+)\n+WHERE id = 1\n 2000-01-01\t1\ttest string 1\t1\n-SELECT \\n    a,\\n    b\\nFROM \\n(\\n    SELECT \\n        toUInt64(sum(id) AS b) AS a,\\n        b\\n    FROM test_00597 AS table_alias\\n    HAVING b = 3\\n) AS outer_table_alias\\nWHERE b = 3\n+SELECT \n+    a,\n+    b\n+FROM \n+(\n+    SELECT \n+        toUInt64(sum(id) AS b) AS a,\n+        b\n+    FROM test_00597 AS table_alias\n+    HAVING b = 3\n+) AS outer_table_alias\n+WHERE b = 3\n 3\t3\n-SELECT \\n    date,\\n    id,\\n    name,\\n    value\\nFROM \\n(\\n    SELECT \\n        date,\\n        id,\\n        name,\\n        value\\n    FROM test_00597\\n    WHERE id = 1\\n)\\nWHERE id = 1\n+SELECT \n+    date,\n+    id,\n+    name,\n+    value\n+FROM \n+(\n+    SELECT \n+        date,\n+        id,\n+        name,\n+        value\n+    FROM test_00597\n+    WHERE id = 1\n+)\n+WHERE id = 1\n 2000-01-01\t1\ttest string 1\t1\n-SELECT \\n    date,\\n    id,\\n    name,\\n    value\\nFROM \\n(\\n    SELECT \\n        date,\\n        id,\\n        name,\\n        value\\n    FROM \\n    (\\n        SELECT \\n            date,\\n            id,\\n            name,\\n            value\\n        FROM test_00597\\n        WHERE id = 1\\n    )\\n    WHERE id = 1\\n)\\nWHERE id = 1\n+SELECT \n+    date,\n+    id,\n+    name,\n+    value\n+FROM \n+(\n+    SELECT \n+        date,\n+        id,\n+        name,\n+        value\n+    FROM \n+    (\n+        SELECT \n+            date,\n+            id,\n+            name,\n+            value\n+        FROM test_00597\n+        WHERE id = 1\n+    )\n+    WHERE id = 1\n+)\n+WHERE id = 1\n 2000-01-01\t1\ttest string 1\t1\n-SELECT \\n    date,\\n    id,\\n    name,\\n    value\\nFROM \\n(\\n    SELECT \\n        date,\\n        id,\\n        name,\\n        value\\n    FROM \\n    (\\n        SELECT \\n            date,\\n            id,\\n            name,\\n            value\\n        FROM test_00597\\n        WHERE id = 1\\n    ) AS b\\n    WHERE id = 1\\n)\\nWHERE id = 1\n+SELECT \n+    date,\n+    id,\n+    name,\n+    value\n+FROM \n+(\n+    SELECT \n+        date,\n+        id,\n+        name,\n+        value\n+    FROM \n+    (\n+        SELECT \n+            date,\n+            id,\n+            name,\n+            value\n+        FROM test_00597\n+        WHERE id = 1\n+    ) AS b\n+    WHERE id = 1\n+)\n+WHERE id = 1\n 2000-01-01\t1\ttest string 1\t1\n-SELECT \\n    date,\\n    id,\\n    name,\\n    value\\nFROM \\n(\\n    SELECT \\n        date,\\n        id,\\n        name,\\n        value\\n    FROM test_00597\\n    WHERE id = 1\\n)\\nWHERE id = 1\n+SELECT \n+    date,\n+    id,\n+    name,\n+    value\n+FROM \n+(\n+    SELECT \n+        date,\n+        id,\n+        name,\n+        value\n+    FROM test_00597\n+    WHERE id = 1\n+)\n+WHERE id = 1\n 2000-01-01\t1\ttest string 1\t1\n-SELECT \\n    date,\\n    id,\\n    name,\\n    value\\nFROM \\n(\\n    SELECT \\n        date,\\n        id,\\n        name,\\n        value\\n    FROM \\n    (\\n        SELECT \\n            date,\\n            id,\\n            name,\\n            value\\n        FROM test_00597\\n        WHERE id = 1\\n    )\\n    WHERE id = 1\\n)\\nWHERE id = 1\n+SELECT \n+    date,\n+    id,\n+    name,\n+    value\n+FROM \n+(\n+    SELECT \n+        date,\n+        id,\n+        name,\n+        value\n+    FROM \n+    (\n+        SELECT \n+            date,\n+            id,\n+            name,\n+            value\n+        FROM test_00597\n+        WHERE id = 1\n+    )\n+    WHERE id = 1\n+)\n+WHERE id = 1\n 2000-01-01\t1\ttest string 1\t1\n-SELECT \\n    date,\\n    id,\\n    name,\\n    value\\nFROM \\n(\\n    SELECT \\n        date,\\n        id,\\n        name,\\n        value\\n    FROM test_00597\\n    WHERE id = 1\\n) AS b\\nWHERE id = 1\n+SELECT \n+    date,\n+    id,\n+    name,\n+    value\n+FROM \n+(\n+    SELECT \n+        date,\n+        id,\n+        name,\n+        value\n+    FROM test_00597\n+    WHERE id = 1\n+) AS b\n+WHERE id = 1\n 2000-01-01\t1\ttest string 1\t1\n-SELECT \\n    date,\\n    id,\\n    name,\\n    value\\nFROM \\n(\\n    SELECT \\n        date,\\n        id,\\n        name,\\n        value\\n    FROM \\n    (\\n        SELECT \\n            date,\\n            id,\\n            name,\\n            value\\n        FROM test_00597\\n        WHERE id = 1\\n    ) AS a\\n    WHERE id = 1\\n) AS b\\nWHERE id = 1\n+SELECT \n+    date,\n+    id,\n+    name,\n+    value\n+FROM \n+(\n+    SELECT \n+        date,\n+        id,\n+        name,\n+        value\n+    FROM \n+    (\n+        SELECT \n+            date,\n+            id,\n+            name,\n+            value\n+        FROM test_00597\n+        WHERE id = 1\n+    ) AS a\n+    WHERE id = 1\n+) AS b\n+WHERE id = 1\n 2000-01-01\t1\ttest string 1\t1\n-SELECT \\n    id,\\n    date,\\n    value\\nFROM \\n(\\n    SELECT \\n        id,\\n        date,\\n        min(value) AS value\\n    FROM test_00597\\n    WHERE id = 1\\n    GROUP BY \\n        id,\\n        date\\n)\\nWHERE id = 1\n+SELECT \n+    id,\n+    date,\n+    value\n+FROM \n+(\n+    SELECT \n+        id,\n+        date,\n+        min(value) AS value\n+    FROM test_00597\n+    WHERE id = 1\n+    GROUP BY \n+        id,\n+        date\n+)\n+WHERE id = 1\n 1\t2000-01-01\t1\n-SELECT \\n    date,\\n    id,\\n    name,\\n    value\\nFROM \\n(\\n    SELECT \\n        date,\\n        id,\\n        name,\\n        value\\n    FROM test_00597\\n    WHERE id = 1\\n    UNION ALL\\n    SELECT \\n        date,\\n        id,\\n        name,\\n        value\\n    FROM test_00597\\n    WHERE id = 1\\n)\\nWHERE id = 1\n+SELECT \n+    date,\n+    id,\n+    name,\n+    value\n+FROM \n+(\n+    SELECT \n+        date,\n+        id,\n+        name,\n+        value\n+    FROM test_00597\n+    WHERE id = 1\n+    UNION ALL\n+    SELECT \n+        date,\n+        id,\n+        name,\n+        value\n+    FROM test_00597\n+    WHERE id = 1\n+)\n+WHERE id = 1\n 2000-01-01\t1\ttest string 1\t1\n 2000-01-01\t1\ttest string 1\t1\n-SELECT \\n    date,\\n    id,\\n    name,\\n    value,\\n    date,\\n    name,\\n    value\\nFROM \\n(\\n    SELECT \\n        date,\\n        id,\\n        name,\\n        value\\n    FROM test_00597\\n    WHERE id = 1\\n)\\nANY LEFT JOIN \\n(\\n    SELECT id\\n    FROM test_00597\\n) USING (id)\\nWHERE id = 1\n+SELECT \n+    date,\n+    id,\n+    name,\n+    value,\n+    date,\n+    name,\n+    value\n+FROM \n+(\n+    SELECT \n+        date,\n+        id,\n+        name,\n+        value\n+    FROM test_00597\n+    WHERE id = 1\n+)\n+ANY LEFT JOIN \n+(\n+    SELECT id\n+    FROM test_00597\n+) USING (id)\n+WHERE id = 1\n 2000-01-01\t1\ttest string 1\t1\t2000-01-01\ttest string 1\t1\n-SELECT \\n    id,\\n    date,\\n    name,\\n    value\\nFROM \\n(\\n    SELECT toInt8(1) AS id\\n)\\nANY LEFT JOIN \\n(\\n    SELECT \\n        date,\\n        id,\\n        name,\\n        value\\n    FROM test_00597\\n) AS test_00597 USING (id)\\nWHERE value = 1\n+SELECT \n+    id,\n+    date,\n+    name,\n+    value\n+FROM \n+(\n+    SELECT toInt8(1) AS id\n+)\n+ANY LEFT JOIN \n+(\n+    SELECT \n+        date,\n+        id,\n+        name,\n+        value\n+    FROM test_00597\n+) AS test_00597 USING (id)\n+WHERE value = 1\n 1\t2000-01-01\ttest string 1\t1\n-SELECT value\\nFROM \\n(\\n    SELECT toInt8(1) AS id\\n)\\nANY LEFT JOIN test_00597 AS b USING (id)\\nWHERE value = 1\n+SELECT value\n+FROM \n+(\n+    SELECT toInt8(1) AS id\n+)\n+ANY LEFT JOIN test_00597 AS b USING (id)\n+WHERE value = 1\n 1\n-SELECT \\n    date,\\n    id,\\n    name,\\n    value\\nFROM \\n(\\n    SELECT \\n        date,\\n        id,\\n        name,\\n        value,\\n        date,\\n        name,\\n        value\\n    FROM \\n    (\\n        SELECT \\n            date,\\n            id,\\n            name,\\n            value\\n        FROM test_00597\\n        WHERE id = 1\\n    )\\n    ANY LEFT JOIN \\n    (\\n        SELECT id\\n        FROM test_00597\\n    ) USING (id)\\n    WHERE id = 1\\n)\\nWHERE id = 1\n+SELECT \n+    date,\n+    id,\n+    name,\n+    value\n+FROM \n+(\n+    SELECT \n+        date,\n+        id,\n+        name,\n+        value,\n+        date,\n+        name,\n+        value\n+    FROM \n+    (\n+        SELECT \n+            date,\n+            id,\n+            name,\n+            value\n+        FROM test_00597\n+        WHERE id = 1\n+    )\n+    ANY LEFT JOIN \n+    (\n+        SELECT id\n+        FROM test_00597\n+    ) USING (id)\n+    WHERE id = 1\n+)\n+WHERE id = 1\n 2000-01-01\t1\ttest string 1\t1\n-SELECT \\n    date,\\n    id,\\n    name,\\n    value,\\n    b.date,\\n    b.name,\\n    b.value\\nFROM \\n(\\n    SELECT \\n        date,\\n        id,\\n        name,\\n        value\\n    FROM test_00597\\n)\\nANY LEFT JOIN \\n(\\n    SELECT \\n        date,\\n        id,\\n        name,\\n        value\\n    FROM test_00597\\n) AS b USING (id)\\nWHERE b.id = 1\n+SELECT \n+    date,\n+    id,\n+    name,\n+    value,\n+    b.date,\n+    b.name,\n+    b.value\n+FROM \n+(\n+    SELECT \n+        date,\n+        id,\n+        name,\n+        value\n+    FROM test_00597\n+)\n+ANY LEFT JOIN \n+(\n+    SELECT \n+        date,\n+        id,\n+        name,\n+        value\n+    FROM test_00597\n+) AS b USING (id)\n+WHERE b.id = 1\n 2000-01-01\t1\ttest string 1\t1\t2000-01-01\ttest string 1\t1\n-SELECT \\n    id,\\n    date,\\n    name,\\n    value\\nFROM \\n(\\n    SELECT \\n        toInt8(1) AS id,\\n        toDate(\\'2000-01-01\\') AS date\\n    FROM system.numbers\\n    LIMIT 1\\n)\\nANY LEFT JOIN \\n(\\n    SELECT \\n        date,\\n        id,\\n        name,\\n        value\\n    FROM test_00597\\n) AS b USING (date, id)\\nWHERE b.date = toDate(\\'2000-01-01\\')\n+SELECT \n+    id,\n+    date,\n+    name,\n+    value\n+FROM \n+(\n+    SELECT \n+        toInt8(1) AS id,\n+        toDate(\\'2000-01-01\\') AS date\n+    FROM system.numbers\n+    LIMIT 1\n+)\n+ANY LEFT JOIN \n+(\n+    SELECT \n+        date,\n+        id,\n+        name,\n+        value\n+    FROM test_00597\n+) AS b USING (date, id)\n+WHERE b.date = toDate(\\'2000-01-01\\')\n 1\t2000-01-01\ttest string 1\t1\n-SELECT \\n    date,\\n    id,\\n    name,\\n    value,\\n    `b.date`,\\n    `b.id`,\\n    `b.name`,\\n    `b.value`\\nFROM \\n(\\n    SELECT \\n        date,\\n        id,\\n        name,\\n        value,\\n        b.date,\\n        b.id,\\n        b.name,\\n        b.value\\n    FROM \\n    (\\n        SELECT \\n            date,\\n            id,\\n            name,\\n            value\\n        FROM test_00597\\n        WHERE id = 1\\n    ) AS a\\n    ANY LEFT JOIN \\n    (\\n        SELECT \\n            date,\\n            id,\\n            name,\\n            value\\n        FROM test_00597\\n    ) AS b ON id = b.id\\n    WHERE id = 1\\n)\\nWHERE id = 1\n+SELECT \n+    date,\n+    id,\n+    name,\n+    value,\n+    `b.date`,\n+    `b.id`,\n+    `b.name`,\n+    `b.value`\n+FROM \n+(\n+    SELECT \n+        date,\n+        id,\n+        name,\n+        value,\n+        b.date,\n+        b.id,\n+        b.name,\n+        b.value\n+    FROM \n+    (\n+        SELECT \n+            date,\n+            id,\n+            name,\n+            value\n+        FROM test_00597\n+        WHERE id = 1\n+    ) AS a\n+    ANY LEFT JOIN \n+    (\n+        SELECT \n+            date,\n+            id,\n+            name,\n+            value\n+        FROM test_00597\n+    ) AS b ON id = b.id\n+    WHERE id = 1\n+)\n+WHERE id = 1\n 2000-01-01\t1\ttest string 1\t1\t2000-01-01\t1\ttest string 1\t1\n-SELECT \\n    date,\\n    id,\\n    name,\\n    value,\\n    r.date,\\n    r.name,\\n    r.value\\nFROM \\n(\\n    SELECT \\n        date,\\n        id,\\n        name,\\n        value\\n    FROM test_00597\\n)\\nSEMI LEFT JOIN \\n(\\n    SELECT \\n        date,\\n        id,\\n        name,\\n        value\\n    FROM \\n    (\\n        SELECT \\n            date,\\n            id,\\n            name,\\n            value\\n        FROM test_00597\\n        WHERE id = 1\\n    )\\n    WHERE id = 1\\n) AS r USING (id)\\nWHERE r.id = 1\n+SELECT \n+    date,\n+    id,\n+    name,\n+    value,\n+    r.date,\n+    r.name,\n+    r.value\n+FROM \n+(\n+    SELECT \n+        date,\n+        id,\n+        name,\n+        value\n+    FROM test_00597\n+)\n+SEMI LEFT JOIN \n+(\n+    SELECT \n+        date,\n+        id,\n+        name,\n+        value\n+    FROM \n+    (\n+        SELECT \n+            date,\n+            id,\n+            name,\n+            value\n+        FROM test_00597\n+        WHERE id = 1\n+    )\n+    WHERE id = 1\n+) AS r USING (id)\n+WHERE r.id = 1\n 2000-01-01\t1\ttest string 1\t1\t2000-01-01\ttest string 1\t1\ndiff --git a/tests/queries/0_stateless/00826_cross_to_inner_join.reference b/tests/queries/0_stateless/00826_cross_to_inner_join.reference\nindex 2a4b1487f200..6e5cbdcab4e4 100644\n--- a/tests/queries/0_stateless/00826_cross_to_inner_join.reference\n+++ b/tests/queries/0_stateless/00826_cross_to_inner_join.reference\n@@ -35,18 +35,74 @@ comma nullable\n 1\t1\t1\t1\n 2\t2\t1\t2\n cross\n-SELECT \\n    a,\\n    b,\\n    t2_00826.a,\\n    t2_00826.b\\nFROM t1_00826\\nALL INNER JOIN t2_00826 ON a = t2_00826.a\\nWHERE a = t2_00826.a\n+SELECT \n+    a,\n+    b,\n+    t2_00826.a,\n+    t2_00826.b\n+FROM t1_00826\n+ALL INNER JOIN t2_00826 ON a = t2_00826.a\n+WHERE a = t2_00826.a\n cross nullable\n-SELECT \\n    a,\\n    b,\\n    t2_00826.a,\\n    t2_00826.b\\nFROM t1_00826\\nALL INNER JOIN t2_00826 ON a = t2_00826.a\\nWHERE a = t2_00826.a\n+SELECT \n+    a,\n+    b,\n+    t2_00826.a,\n+    t2_00826.b\n+FROM t1_00826\n+ALL INNER JOIN t2_00826 ON a = t2_00826.a\n+WHERE a = t2_00826.a\n cross nullable vs not nullable\n-SELECT \\n    a,\\n    b,\\n    t2_00826.a,\\n    t2_00826.b\\nFROM t1_00826\\nALL INNER JOIN t2_00826 ON a = t2_00826.b\\nWHERE a = t2_00826.b\n+SELECT \n+    a,\n+    b,\n+    t2_00826.a,\n+    t2_00826.b\n+FROM t1_00826\n+ALL INNER JOIN t2_00826 ON a = t2_00826.b\n+WHERE a = t2_00826.b\n cross self\n-SELECT \\n    a,\\n    b,\\n    y.a,\\n    y.b\\nFROM t1_00826 AS x\\nALL INNER JOIN t1_00826 AS y ON (a = y.a) AND (b = y.b)\\nWHERE (a = y.a) AND (b = y.b)\n+SELECT \n+    a,\n+    b,\n+    y.a,\n+    y.b\n+FROM t1_00826 AS x\n+ALL INNER JOIN t1_00826 AS y ON (a = y.a) AND (b = y.b)\n+WHERE (a = y.a) AND (b = y.b)\n cross one table expr\n-SELECT \\n    a,\\n    b,\\n    t2_00826.a,\\n    t2_00826.b\\nFROM t1_00826\\nCROSS JOIN t2_00826\\nWHERE a = b\n+SELECT \n+    a,\n+    b,\n+    t2_00826.a,\n+    t2_00826.b\n+FROM t1_00826\n+CROSS JOIN t2_00826\n+WHERE a = b\n cross multiple ands\n-SELECT \\n    a,\\n    b,\\n    t2_00826.a,\\n    t2_00826.b\\nFROM t1_00826\\nALL INNER JOIN t2_00826 ON (a = t2_00826.a) AND (b = t2_00826.b)\\nWHERE (a = t2_00826.a) AND (b = t2_00826.b)\n+SELECT \n+    a,\n+    b,\n+    t2_00826.a,\n+    t2_00826.b\n+FROM t1_00826\n+ALL INNER JOIN t2_00826 ON (a = t2_00826.a) AND (b = t2_00826.b)\n+WHERE (a = t2_00826.a) AND (b = t2_00826.b)\n cross and inside and\n-SELECT \\n    a,\\n    b,\\n    t2_00826.a,\\n    t2_00826.b\\nFROM t1_00826\\nALL INNER JOIN t2_00826 ON (a = t2_00826.a) AND (a = t2_00826.a) AND (a = t2_00826.a) AND (b = t2_00826.b)\\nWHERE (a = t2_00826.a) AND ((a = t2_00826.a) AND ((a = t2_00826.a) AND (b = t2_00826.b)))\n+SELECT \n+    a,\n+    b,\n+    t2_00826.a,\n+    t2_00826.b\n+FROM t1_00826\n+ALL INNER JOIN t2_00826 ON (a = t2_00826.a) AND (a = t2_00826.a) AND (a = t2_00826.a) AND (b = t2_00826.b)\n+WHERE (a = t2_00826.a) AND ((a = t2_00826.a) AND ((a = t2_00826.a) AND (b = t2_00826.b)))\n cross split conjunction\n-SELECT \\n    a,\\n    b,\\n    t2_00826.a,\\n    t2_00826.b\\nFROM t1_00826\\nALL INNER JOIN t2_00826 ON (a = t2_00826.a) AND (b = t2_00826.b)\\nWHERE (a = t2_00826.a) AND (b = t2_00826.b) AND (a >= 1) AND (t2_00826.b > 0)\n+SELECT \n+    a,\n+    b,\n+    t2_00826.a,\n+    t2_00826.b\n+FROM t1_00826\n+ALL INNER JOIN t2_00826 ON (a = t2_00826.a) AND (b = t2_00826.b)\n+WHERE (a = t2_00826.a) AND (b = t2_00826.b) AND (a >= 1) AND (t2_00826.b > 0)\ndiff --git a/tests/queries/0_stateless/00849_multiple_comma_join.reference b/tests/queries/0_stateless/00849_multiple_comma_join.reference\nindex 0f7d28b65a05..5a5a90cbdf2e 100644\n--- a/tests/queries/0_stateless/00849_multiple_comma_join.reference\n+++ b/tests/queries/0_stateless/00849_multiple_comma_join.reference\n@@ -1,18 +1,254 @@\n-SELECT a\\nFROM t1_00849\\nCROSS JOIN t2_00849\n-SELECT a\\nFROM t1_00849\\nALL INNER JOIN t2_00849 ON a = t2_00849.a\\nWHERE a = t2_00849.a\n-SELECT a\\nFROM t1_00849\\nALL INNER JOIN t2_00849 ON b = t2_00849.b\\nWHERE b = t2_00849.b\n-SELECT `--t1_00849.a` AS `t1_00849.a`\\nFROM \\n(\\n    SELECT \\n        a AS `--t1_00849.a`,\\n        b,\\n        t2_00849.a AS `--t2_00849.a`,\\n        t2_00849.b\\n    FROM t1_00849\\n    ALL INNER JOIN t2_00849 ON `--t1_00849.a` = `--t2_00849.a`\\n) AS `--.s`\\nALL INNER JOIN t3_00849 ON `--t1_00849.a` = a\\nWHERE (`--t1_00849.a` = `--t2_00849.a`) AND (`--t1_00849.a` = a)\n-SELECT `--t1_00849.a` AS `t1_00849.a`\\nFROM \\n(\\n    SELECT \\n        a AS `--t1_00849.a`,\\n        b AS `--t1_00849.b`,\\n        t2_00849.a,\\n        t2_00849.b AS `--t2_00849.b`\\n    FROM t1_00849\\n    ALL INNER JOIN t2_00849 ON `--t1_00849.b` = `--t2_00849.b`\\n) AS `--.s`\\nALL INNER JOIN t3_00849 ON `--t1_00849.b` = b\\nWHERE (`--t1_00849.b` = `--t2_00849.b`) AND (`--t1_00849.b` = b)\n-SELECT `--t1_00849.a` AS `t1_00849.a`\\nFROM \\n(\\n    SELECT \\n        `--t1_00849.a`,\\n        b,\\n        `--t2_00849.a`,\\n        `t2_00849.b`,\\n        a AS `--t3_00849.a`,\\n        t3_00849.b\\n    FROM \\n    (\\n        SELECT \\n            a AS `--t1_00849.a`,\\n            b,\\n            t2_00849.a AS `--t2_00849.a`,\\n            t2_00849.b\\n        FROM t1_00849\\n        ALL INNER JOIN t2_00849 ON `--t1_00849.a` = `--t2_00849.a`\\n    ) AS `--.s`\\n    ALL INNER JOIN t3_00849 ON `--t1_00849.a` = `--t3_00849.a`\\n) AS `--.s`\\nALL INNER JOIN t4_00849 ON `--t1_00849.a` = a\\nWHERE (`--t1_00849.a` = `--t2_00849.a`) AND (`--t1_00849.a` = `--t3_00849.a`) AND (`--t1_00849.a` = a)\n-SELECT `--t1_00849.a` AS `t1_00849.a`\\nFROM \\n(\\n    SELECT \\n        `--t1_00849.a`,\\n        `--t1_00849.b`,\\n        `t2_00849.a`,\\n        `--t2_00849.b`,\\n        a,\\n        b AS `--t3_00849.b`\\n    FROM \\n    (\\n        SELECT \\n            a AS `--t1_00849.a`,\\n            b AS `--t1_00849.b`,\\n            t2_00849.a,\\n            t2_00849.b AS `--t2_00849.b`\\n        FROM t1_00849\\n        ALL INNER JOIN t2_00849 ON `--t1_00849.b` = `--t2_00849.b`\\n    ) AS `--.s`\\n    ALL INNER JOIN t3_00849 ON `--t1_00849.b` = `--t3_00849.b`\\n) AS `--.s`\\nALL INNER JOIN t4_00849 ON `--t1_00849.b` = b\\nWHERE (`--t1_00849.b` = `--t2_00849.b`) AND (`--t1_00849.b` = `--t3_00849.b`) AND (`--t1_00849.b` = b)\n-SELECT `--t1_00849.a` AS `t1_00849.a`\\nFROM \\n(\\n    SELECT \\n        `--t1_00849.a`,\\n        b,\\n        `--t2_00849.a`,\\n        `t2_00849.b`,\\n        a AS `--t3_00849.a`,\\n        t3_00849.b\\n    FROM \\n    (\\n        SELECT \\n            a AS `--t1_00849.a`,\\n            b,\\n            t2_00849.a AS `--t2_00849.a`,\\n            t2_00849.b\\n        FROM t1_00849\\n        ALL INNER JOIN t2_00849 ON `--t2_00849.a` = `--t1_00849.a`\\n    ) AS `--.s`\\n    ALL INNER JOIN t3_00849 ON `--t2_00849.a` = `--t3_00849.a`\\n) AS `--.s`\\nALL INNER JOIN t4_00849 ON `--t2_00849.a` = a\\nWHERE (`--t2_00849.a` = `--t1_00849.a`) AND (`--t2_00849.a` = `--t3_00849.a`) AND (`--t2_00849.a` = a)\n-SELECT `--t1_00849.a` AS `t1_00849.a`\\nFROM \\n(\\n    SELECT \\n        `--t1_00849.a`,\\n        b,\\n        `--t2_00849.a`,\\n        `t2_00849.b`,\\n        a AS `--t3_00849.a`,\\n        t3_00849.b\\n    FROM \\n    (\\n        SELECT \\n            a AS `--t1_00849.a`,\\n            b,\\n            t2_00849.a AS `--t2_00849.a`,\\n            t2_00849.b\\n        FROM t1_00849\\n        CROSS JOIN t2_00849\\n    ) AS `--.s`\\n    ALL INNER JOIN t3_00849 ON (`--t3_00849.a` = `--t1_00849.a`) AND (`--t3_00849.a` = `--t2_00849.a`)\\n) AS `--.s`\\nALL INNER JOIN t4_00849 ON `--t3_00849.a` = a\\nWHERE (`--t3_00849.a` = `--t1_00849.a`) AND (`--t3_00849.a` = `--t2_00849.a`) AND (`--t3_00849.a` = a)\n-SELECT `--t1_00849.a` AS `t1_00849.a`\\nFROM \\n(\\n    SELECT \\n        `--t1_00849.a`,\\n        b,\\n        `--t2_00849.a`,\\n        `t2_00849.b`,\\n        a AS `--t3_00849.a`,\\n        t3_00849.b\\n    FROM \\n    (\\n        SELECT \\n            a AS `--t1_00849.a`,\\n            b,\\n            t2_00849.a AS `--t2_00849.a`,\\n            t2_00849.b\\n        FROM t1_00849\\n        CROSS JOIN t2_00849\\n    ) AS `--.s`\\n    CROSS JOIN t3_00849\\n) AS `--.s`\\nALL INNER JOIN t4_00849 ON (a = `--t1_00849.a`) AND (a = `--t2_00849.a`) AND (a = `--t3_00849.a`)\\nWHERE (a = `--t1_00849.a`) AND (a = `--t2_00849.a`) AND (a = `--t3_00849.a`)\n-SELECT `--t1_00849.a` AS `t1_00849.a`\\nFROM \\n(\\n    SELECT \\n        `--t1_00849.a`,\\n        b,\\n        `--t2_00849.a`,\\n        `t2_00849.b`,\\n        a AS `--t3_00849.a`,\\n        t3_00849.b\\n    FROM \\n    (\\n        SELECT \\n            a AS `--t1_00849.a`,\\n            b,\\n            t2_00849.a AS `--t2_00849.a`,\\n            t2_00849.b\\n        FROM t1_00849\\n        ALL INNER JOIN t2_00849 ON `--t1_00849.a` = `--t2_00849.a`\\n    ) AS `--.s`\\n    ALL INNER JOIN t3_00849 ON `--t2_00849.a` = `--t3_00849.a`\\n) AS `--.s`\\nALL INNER JOIN t4_00849 ON `--t3_00849.a` = a\\nWHERE (`--t1_00849.a` = `--t2_00849.a`) AND (`--t2_00849.a` = `--t3_00849.a`) AND (`--t3_00849.a` = a)\n-SELECT `--t1_00849.a` AS `t1_00849.a`\\nFROM \\n(\\n    SELECT \\n        `--t1_00849.a`,\\n        b,\\n        `t2_00849.a`,\\n        `t2_00849.b`,\\n        a,\\n        t3_00849.b\\n    FROM \\n    (\\n        SELECT \\n            a AS `--t1_00849.a`,\\n            b,\\n            t2_00849.a,\\n            t2_00849.b\\n        FROM t1_00849\\n        CROSS JOIN t2_00849\\n    ) AS `--.s`\\n    CROSS JOIN t3_00849\\n) AS `--.s`\\nCROSS JOIN t4_00849\n-SELECT `--t1_00849.a` AS `t1_00849.a`\\nFROM \\n(\\n    SELECT \\n        `--t1_00849.a`,\\n        b,\\n        `t2_00849.a`,\\n        `t2_00849.b`,\\n        a,\\n        t3_00849.b\\n    FROM \\n    (\\n        SELECT \\n            a AS `--t1_00849.a`,\\n            b,\\n            t2_00849.a,\\n            t2_00849.b\\n        FROM t1_00849\\n        CROSS JOIN t2_00849\\n    ) AS `--.s`\\n    CROSS JOIN t3_00849\\n) AS `--.s`\\nCROSS JOIN t4_00849\n-SELECT `--t1_00849.a` AS `t1_00849.a`\\nFROM \\n(\\n    SELECT \\n        a AS `--t1_00849.a`,\\n        b,\\n        t2_00849.a,\\n        t2_00849.b\\n    FROM t1_00849\\n    CROSS JOIN t2_00849\\n) AS `--.s`\\nCROSS JOIN t3_00849\n-SELECT `--t1_00849.a` AS `t1_00849.a`\\nFROM \\n(\\n    SELECT \\n        a AS `--t1_00849.a`,\\n        b,\\n        t2_00849.a AS `--t2_00849.a`,\\n        t2_00849.b\\n    FROM t1_00849\\n    ALL INNER JOIN t2_00849 ON `--t1_00849.a` = `--t2_00849.a`\\n) AS `--.s`\\nCROSS JOIN t3_00849\n+SELECT a\n+FROM t1_00849\n+CROSS JOIN t2_00849\n+SELECT a\n+FROM t1_00849\n+ALL INNER JOIN t2_00849 ON a = t2_00849.a\n+WHERE a = t2_00849.a\n+SELECT a\n+FROM t1_00849\n+ALL INNER JOIN t2_00849 ON b = t2_00849.b\n+WHERE b = t2_00849.b\n+SELECT `--t1_00849.a` AS `t1_00849.a`\n+FROM \n+(\n+    SELECT \n+        a AS `--t1_00849.a`,\n+        b,\n+        t2_00849.a AS `--t2_00849.a`,\n+        t2_00849.b\n+    FROM t1_00849\n+    ALL INNER JOIN t2_00849 ON `--t1_00849.a` = `--t2_00849.a`\n+) AS `--.s`\n+ALL INNER JOIN t3_00849 ON `--t1_00849.a` = a\n+WHERE (`--t1_00849.a` = `--t2_00849.a`) AND (`--t1_00849.a` = a)\n+SELECT `--t1_00849.a` AS `t1_00849.a`\n+FROM \n+(\n+    SELECT \n+        a AS `--t1_00849.a`,\n+        b AS `--t1_00849.b`,\n+        t2_00849.a,\n+        t2_00849.b AS `--t2_00849.b`\n+    FROM t1_00849\n+    ALL INNER JOIN t2_00849 ON `--t1_00849.b` = `--t2_00849.b`\n+) AS `--.s`\n+ALL INNER JOIN t3_00849 ON `--t1_00849.b` = b\n+WHERE (`--t1_00849.b` = `--t2_00849.b`) AND (`--t1_00849.b` = b)\n+SELECT `--t1_00849.a` AS `t1_00849.a`\n+FROM \n+(\n+    SELECT \n+        `--t1_00849.a`,\n+        b,\n+        `--t2_00849.a`,\n+        `t2_00849.b`,\n+        a AS `--t3_00849.a`,\n+        t3_00849.b\n+    FROM \n+    (\n+        SELECT \n+            a AS `--t1_00849.a`,\n+            b,\n+            t2_00849.a AS `--t2_00849.a`,\n+            t2_00849.b\n+        FROM t1_00849\n+        ALL INNER JOIN t2_00849 ON `--t1_00849.a` = `--t2_00849.a`\n+    ) AS `--.s`\n+    ALL INNER JOIN t3_00849 ON `--t1_00849.a` = `--t3_00849.a`\n+) AS `--.s`\n+ALL INNER JOIN t4_00849 ON `--t1_00849.a` = a\n+WHERE (`--t1_00849.a` = `--t2_00849.a`) AND (`--t1_00849.a` = `--t3_00849.a`) AND (`--t1_00849.a` = a)\n+SELECT `--t1_00849.a` AS `t1_00849.a`\n+FROM \n+(\n+    SELECT \n+        `--t1_00849.a`,\n+        `--t1_00849.b`,\n+        `t2_00849.a`,\n+        `--t2_00849.b`,\n+        a,\n+        b AS `--t3_00849.b`\n+    FROM \n+    (\n+        SELECT \n+            a AS `--t1_00849.a`,\n+            b AS `--t1_00849.b`,\n+            t2_00849.a,\n+            t2_00849.b AS `--t2_00849.b`\n+        FROM t1_00849\n+        ALL INNER JOIN t2_00849 ON `--t1_00849.b` = `--t2_00849.b`\n+    ) AS `--.s`\n+    ALL INNER JOIN t3_00849 ON `--t1_00849.b` = `--t3_00849.b`\n+) AS `--.s`\n+ALL INNER JOIN t4_00849 ON `--t1_00849.b` = b\n+WHERE (`--t1_00849.b` = `--t2_00849.b`) AND (`--t1_00849.b` = `--t3_00849.b`) AND (`--t1_00849.b` = b)\n+SELECT `--t1_00849.a` AS `t1_00849.a`\n+FROM \n+(\n+    SELECT \n+        `--t1_00849.a`,\n+        b,\n+        `--t2_00849.a`,\n+        `t2_00849.b`,\n+        a AS `--t3_00849.a`,\n+        t3_00849.b\n+    FROM \n+    (\n+        SELECT \n+            a AS `--t1_00849.a`,\n+            b,\n+            t2_00849.a AS `--t2_00849.a`,\n+            t2_00849.b\n+        FROM t1_00849\n+        ALL INNER JOIN t2_00849 ON `--t2_00849.a` = `--t1_00849.a`\n+    ) AS `--.s`\n+    ALL INNER JOIN t3_00849 ON `--t2_00849.a` = `--t3_00849.a`\n+) AS `--.s`\n+ALL INNER JOIN t4_00849 ON `--t2_00849.a` = a\n+WHERE (`--t2_00849.a` = `--t1_00849.a`) AND (`--t2_00849.a` = `--t3_00849.a`) AND (`--t2_00849.a` = a)\n+SELECT `--t1_00849.a` AS `t1_00849.a`\n+FROM \n+(\n+    SELECT \n+        `--t1_00849.a`,\n+        b,\n+        `--t2_00849.a`,\n+        `t2_00849.b`,\n+        a AS `--t3_00849.a`,\n+        t3_00849.b\n+    FROM \n+    (\n+        SELECT \n+            a AS `--t1_00849.a`,\n+            b,\n+            t2_00849.a AS `--t2_00849.a`,\n+            t2_00849.b\n+        FROM t1_00849\n+        CROSS JOIN t2_00849\n+    ) AS `--.s`\n+    ALL INNER JOIN t3_00849 ON (`--t3_00849.a` = `--t1_00849.a`) AND (`--t3_00849.a` = `--t2_00849.a`)\n+) AS `--.s`\n+ALL INNER JOIN t4_00849 ON `--t3_00849.a` = a\n+WHERE (`--t3_00849.a` = `--t1_00849.a`) AND (`--t3_00849.a` = `--t2_00849.a`) AND (`--t3_00849.a` = a)\n+SELECT `--t1_00849.a` AS `t1_00849.a`\n+FROM \n+(\n+    SELECT \n+        `--t1_00849.a`,\n+        b,\n+        `--t2_00849.a`,\n+        `t2_00849.b`,\n+        a AS `--t3_00849.a`,\n+        t3_00849.b\n+    FROM \n+    (\n+        SELECT \n+            a AS `--t1_00849.a`,\n+            b,\n+            t2_00849.a AS `--t2_00849.a`,\n+            t2_00849.b\n+        FROM t1_00849\n+        CROSS JOIN t2_00849\n+    ) AS `--.s`\n+    CROSS JOIN t3_00849\n+) AS `--.s`\n+ALL INNER JOIN t4_00849 ON (a = `--t1_00849.a`) AND (a = `--t2_00849.a`) AND (a = `--t3_00849.a`)\n+WHERE (a = `--t1_00849.a`) AND (a = `--t2_00849.a`) AND (a = `--t3_00849.a`)\n+SELECT `--t1_00849.a` AS `t1_00849.a`\n+FROM \n+(\n+    SELECT \n+        `--t1_00849.a`,\n+        b,\n+        `--t2_00849.a`,\n+        `t2_00849.b`,\n+        a AS `--t3_00849.a`,\n+        t3_00849.b\n+    FROM \n+    (\n+        SELECT \n+            a AS `--t1_00849.a`,\n+            b,\n+            t2_00849.a AS `--t2_00849.a`,\n+            t2_00849.b\n+        FROM t1_00849\n+        ALL INNER JOIN t2_00849 ON `--t1_00849.a` = `--t2_00849.a`\n+    ) AS `--.s`\n+    ALL INNER JOIN t3_00849 ON `--t2_00849.a` = `--t3_00849.a`\n+) AS `--.s`\n+ALL INNER JOIN t4_00849 ON `--t3_00849.a` = a\n+WHERE (`--t1_00849.a` = `--t2_00849.a`) AND (`--t2_00849.a` = `--t3_00849.a`) AND (`--t3_00849.a` = a)\n+SELECT `--t1_00849.a` AS `t1_00849.a`\n+FROM \n+(\n+    SELECT \n+        `--t1_00849.a`,\n+        b,\n+        `t2_00849.a`,\n+        `t2_00849.b`,\n+        a,\n+        t3_00849.b\n+    FROM \n+    (\n+        SELECT \n+            a AS `--t1_00849.a`,\n+            b,\n+            t2_00849.a,\n+            t2_00849.b\n+        FROM t1_00849\n+        CROSS JOIN t2_00849\n+    ) AS `--.s`\n+    CROSS JOIN t3_00849\n+) AS `--.s`\n+CROSS JOIN t4_00849\n+SELECT `--t1_00849.a` AS `t1_00849.a`\n+FROM \n+(\n+    SELECT \n+        `--t1_00849.a`,\n+        b,\n+        `t2_00849.a`,\n+        `t2_00849.b`,\n+        a,\n+        t3_00849.b\n+    FROM \n+    (\n+        SELECT \n+            a AS `--t1_00849.a`,\n+            b,\n+            t2_00849.a,\n+            t2_00849.b\n+        FROM t1_00849\n+        CROSS JOIN t2_00849\n+    ) AS `--.s`\n+    CROSS JOIN t3_00849\n+) AS `--.s`\n+CROSS JOIN t4_00849\n+SELECT `--t1_00849.a` AS `t1_00849.a`\n+FROM \n+(\n+    SELECT \n+        a AS `--t1_00849.a`,\n+        b,\n+        t2_00849.a,\n+        t2_00849.b\n+    FROM t1_00849\n+    CROSS JOIN t2_00849\n+) AS `--.s`\n+CROSS JOIN t3_00849\n+SELECT `--t1_00849.a` AS `t1_00849.a`\n+FROM \n+(\n+    SELECT \n+        a AS `--t1_00849.a`,\n+        b,\n+        t2_00849.a AS `--t2_00849.a`,\n+        t2_00849.b\n+    FROM t1_00849\n+    ALL INNER JOIN t2_00849 ON `--t1_00849.a` = `--t2_00849.a`\n+) AS `--.s`\n+CROSS JOIN t3_00849\n SELECT * FROM t1, t2\n 1\t1\t1\t1\n 1\t1\t1\t\\N\ndiff --git a/tests/queries/0_stateless/00849_multiple_comma_join_2.reference b/tests/queries/0_stateless/00849_multiple_comma_join_2.reference\nindex f2e832123e05..e08d6ff1192b 100644\n--- a/tests/queries/0_stateless/00849_multiple_comma_join_2.reference\n+++ b/tests/queries/0_stateless/00849_multiple_comma_join_2.reference\n@@ -1,18 +1,197 @@\n-SELECT a\\nFROM t1\\nCROSS JOIN t2\n-SELECT a\\nFROM t1\\nALL INNER JOIN t2 ON a = t2.a\\nWHERE a = t2.a\n-SELECT a\\nFROM t1\\nALL INNER JOIN t2 ON b = t2.b\\nWHERE b = t2.b\n-SELECT `--t1.a` AS `t1.a`\\nFROM \\n(\\n    SELECT \\n        a AS `--t1.a`,\\n        t2.a AS `--t2.a`\\n    FROM t1\\n    ALL INNER JOIN t2 ON `--t1.a` = `--t2.a`\\n) AS `--.s`\\nALL INNER JOIN t3 ON `--t1.a` = a\\nWHERE (`--t1.a` = `--t2.a`) AND (`--t1.a` = a)\n-SELECT `--t1.a` AS `t1.a`\\nFROM \\n(\\n    SELECT \\n        b AS `--t1.b`,\\n        a AS `--t1.a`,\\n        t2.b AS `--t2.b`\\n    FROM t1\\n    ALL INNER JOIN t2 ON `--t1.b` = `--t2.b`\\n) AS `--.s`\\nALL INNER JOIN t3 ON `--t1.b` = b\\nWHERE (`--t1.b` = `--t2.b`) AND (`--t1.b` = b)\n-SELECT `--t1.a` AS `t1.a`\\nFROM \\n(\\n    SELECT \\n        `--t1.a`,\\n        `--t2.a`,\\n        a AS `--t3.a`\\n    FROM \\n    (\\n        SELECT \\n            a AS `--t1.a`,\\n            t2.a AS `--t2.a`\\n        FROM t1\\n        ALL INNER JOIN t2 ON `--t1.a` = `--t2.a`\\n    ) AS `--.s`\\n    ALL INNER JOIN t3 ON `--t1.a` = `--t3.a`\\n) AS `--.s`\\nALL INNER JOIN t4 ON `--t1.a` = a\\nWHERE (`--t1.a` = `--t2.a`) AND (`--t1.a` = `--t3.a`) AND (`--t1.a` = a)\n-SELECT `--t1.a` AS `t1.a`\\nFROM \\n(\\n    SELECT \\n        `--t1.b`,\\n        `--t1.a`,\\n        `--t2.b`,\\n        b AS `--t3.b`\\n    FROM \\n    (\\n        SELECT \\n            b AS `--t1.b`,\\n            a AS `--t1.a`,\\n            t2.b AS `--t2.b`\\n        FROM t1\\n        ALL INNER JOIN t2 ON `--t1.b` = `--t2.b`\\n    ) AS `--.s`\\n    ALL INNER JOIN t3 ON `--t1.b` = `--t3.b`\\n) AS `--.s`\\nALL INNER JOIN t4 ON `--t1.b` = b\\nWHERE (`--t1.b` = `--t2.b`) AND (`--t1.b` = `--t3.b`) AND (`--t1.b` = b)\n-SELECT `--t1.a` AS `t1.a`\\nFROM \\n(\\n    SELECT \\n        `--t1.a`,\\n        `--t2.a`,\\n        a AS `--t3.a`\\n    FROM \\n    (\\n        SELECT \\n            a AS `--t1.a`,\\n            t2.a AS `--t2.a`\\n        FROM t1\\n        ALL INNER JOIN t2 ON `--t2.a` = `--t1.a`\\n    ) AS `--.s`\\n    ALL INNER JOIN t3 ON `--t2.a` = `--t3.a`\\n) AS `--.s`\\nALL INNER JOIN t4 ON `--t2.a` = a\\nWHERE (`--t2.a` = `--t1.a`) AND (`--t2.a` = `--t3.a`) AND (`--t2.a` = a)\n-SELECT `--t1.a` AS `t1.a`\\nFROM \\n(\\n    SELECT \\n        `--t1.a`,\\n        `--t2.a`,\\n        a AS `--t3.a`\\n    FROM \\n    (\\n        SELECT \\n            a AS `--t1.a`,\\n            t2.a AS `--t2.a`\\n        FROM t1\\n        CROSS JOIN t2\\n    ) AS `--.s`\\n    ALL INNER JOIN t3 ON (`--t3.a` = `--t1.a`) AND (`--t3.a` = `--t2.a`)\\n) AS `--.s`\\nALL INNER JOIN t4 ON `--t3.a` = a\\nWHERE (`--t3.a` = `--t1.a`) AND (`--t3.a` = `--t2.a`) AND (`--t3.a` = a)\n-SELECT `--t1.a` AS `t1.a`\\nFROM \\n(\\n    SELECT \\n        `--t1.a`,\\n        `--t2.a`,\\n        a AS `--t3.a`\\n    FROM \\n    (\\n        SELECT \\n            a AS `--t1.a`,\\n            t2.a AS `--t2.a`\\n        FROM t1\\n        CROSS JOIN t2\\n    ) AS `--.s`\\n    CROSS JOIN t3\\n) AS `--.s`\\nALL INNER JOIN t4 ON (a = `--t1.a`) AND (a = `--t2.a`) AND (a = `--t3.a`)\\nWHERE (a = `--t1.a`) AND (a = `--t2.a`) AND (a = `--t3.a`)\n-SELECT `--t1.a` AS `t1.a`\\nFROM \\n(\\n    SELECT \\n        `--t1.a`,\\n        `--t2.a`,\\n        a AS `--t3.a`\\n    FROM \\n    (\\n        SELECT \\n            a AS `--t1.a`,\\n            t2.a AS `--t2.a`\\n        FROM t1\\n        ALL INNER JOIN t2 ON `--t1.a` = `--t2.a`\\n    ) AS `--.s`\\n    ALL INNER JOIN t3 ON `--t2.a` = `--t3.a`\\n) AS `--.s`\\nALL INNER JOIN t4 ON `--t3.a` = a\\nWHERE (`--t1.a` = `--t2.a`) AND (`--t2.a` = `--t3.a`) AND (`--t3.a` = a)\n-SELECT `--t1.a` AS `t1.a`\\nFROM \\n(\\n    SELECT `--t1.a`\\n    FROM \\n    (\\n        SELECT a AS `--t1.a`\\n        FROM t1\\n        CROSS JOIN t2\\n    ) AS `--.s`\\n    CROSS JOIN t3\\n) AS `--.s`\\nCROSS JOIN t4\n-SELECT `--t1.a` AS `t1.a`\\nFROM \\n(\\n    SELECT `--t1.a`\\n    FROM \\n    (\\n        SELECT a AS `--t1.a`\\n        FROM t1\\n        CROSS JOIN t2\\n    ) AS `--.s`\\n    CROSS JOIN t3\\n) AS `--.s`\\nCROSS JOIN t4\n-SELECT `--t1.a` AS `t1.a`\\nFROM \\n(\\n    SELECT a AS `--t1.a`\\n    FROM t1\\n    CROSS JOIN t2\\n) AS `--.s`\\nCROSS JOIN t3\n-SELECT `--t1.a` AS `t1.a`\\nFROM \\n(\\n    SELECT \\n        a AS `--t1.a`,\\n        t2.a AS `--t2.a`\\n    FROM t1\\n    ALL INNER JOIN t2 ON `--t1.a` = `--t2.a`\\n) AS `--.s`\\nCROSS JOIN t3\n+SELECT a\n+FROM t1\n+CROSS JOIN t2\n+SELECT a\n+FROM t1\n+ALL INNER JOIN t2 ON a = t2.a\n+WHERE a = t2.a\n+SELECT a\n+FROM t1\n+ALL INNER JOIN t2 ON b = t2.b\n+WHERE b = t2.b\n+SELECT `--t1.a` AS `t1.a`\n+FROM \n+(\n+    SELECT \n+        a AS `--t1.a`,\n+        t2.a AS `--t2.a`\n+    FROM t1\n+    ALL INNER JOIN t2 ON `--t1.a` = `--t2.a`\n+) AS `--.s`\n+ALL INNER JOIN t3 ON `--t1.a` = a\n+WHERE (`--t1.a` = `--t2.a`) AND (`--t1.a` = a)\n+SELECT `--t1.a` AS `t1.a`\n+FROM \n+(\n+    SELECT \n+        b AS `--t1.b`,\n+        a AS `--t1.a`,\n+        t2.b AS `--t2.b`\n+    FROM t1\n+    ALL INNER JOIN t2 ON `--t1.b` = `--t2.b`\n+) AS `--.s`\n+ALL INNER JOIN t3 ON `--t1.b` = b\n+WHERE (`--t1.b` = `--t2.b`) AND (`--t1.b` = b)\n+SELECT `--t1.a` AS `t1.a`\n+FROM \n+(\n+    SELECT \n+        `--t1.a`,\n+        `--t2.a`,\n+        a AS `--t3.a`\n+    FROM \n+    (\n+        SELECT \n+            a AS `--t1.a`,\n+            t2.a AS `--t2.a`\n+        FROM t1\n+        ALL INNER JOIN t2 ON `--t1.a` = `--t2.a`\n+    ) AS `--.s`\n+    ALL INNER JOIN t3 ON `--t1.a` = `--t3.a`\n+) AS `--.s`\n+ALL INNER JOIN t4 ON `--t1.a` = a\n+WHERE (`--t1.a` = `--t2.a`) AND (`--t1.a` = `--t3.a`) AND (`--t1.a` = a)\n+SELECT `--t1.a` AS `t1.a`\n+FROM \n+(\n+    SELECT \n+        `--t1.b`,\n+        `--t1.a`,\n+        `--t2.b`,\n+        b AS `--t3.b`\n+    FROM \n+    (\n+        SELECT \n+            b AS `--t1.b`,\n+            a AS `--t1.a`,\n+            t2.b AS `--t2.b`\n+        FROM t1\n+        ALL INNER JOIN t2 ON `--t1.b` = `--t2.b`\n+    ) AS `--.s`\n+    ALL INNER JOIN t3 ON `--t1.b` = `--t3.b`\n+) AS `--.s`\n+ALL INNER JOIN t4 ON `--t1.b` = b\n+WHERE (`--t1.b` = `--t2.b`) AND (`--t1.b` = `--t3.b`) AND (`--t1.b` = b)\n+SELECT `--t1.a` AS `t1.a`\n+FROM \n+(\n+    SELECT \n+        `--t1.a`,\n+        `--t2.a`,\n+        a AS `--t3.a`\n+    FROM \n+    (\n+        SELECT \n+            a AS `--t1.a`,\n+            t2.a AS `--t2.a`\n+        FROM t1\n+        ALL INNER JOIN t2 ON `--t2.a` = `--t1.a`\n+    ) AS `--.s`\n+    ALL INNER JOIN t3 ON `--t2.a` = `--t3.a`\n+) AS `--.s`\n+ALL INNER JOIN t4 ON `--t2.a` = a\n+WHERE (`--t2.a` = `--t1.a`) AND (`--t2.a` = `--t3.a`) AND (`--t2.a` = a)\n+SELECT `--t1.a` AS `t1.a`\n+FROM \n+(\n+    SELECT \n+        `--t1.a`,\n+        `--t2.a`,\n+        a AS `--t3.a`\n+    FROM \n+    (\n+        SELECT \n+            a AS `--t1.a`,\n+            t2.a AS `--t2.a`\n+        FROM t1\n+        CROSS JOIN t2\n+    ) AS `--.s`\n+    ALL INNER JOIN t3 ON (`--t3.a` = `--t1.a`) AND (`--t3.a` = `--t2.a`)\n+) AS `--.s`\n+ALL INNER JOIN t4 ON `--t3.a` = a\n+WHERE (`--t3.a` = `--t1.a`) AND (`--t3.a` = `--t2.a`) AND (`--t3.a` = a)\n+SELECT `--t1.a` AS `t1.a`\n+FROM \n+(\n+    SELECT \n+        `--t1.a`,\n+        `--t2.a`,\n+        a AS `--t3.a`\n+    FROM \n+    (\n+        SELECT \n+            a AS `--t1.a`,\n+            t2.a AS `--t2.a`\n+        FROM t1\n+        CROSS JOIN t2\n+    ) AS `--.s`\n+    CROSS JOIN t3\n+) AS `--.s`\n+ALL INNER JOIN t4 ON (a = `--t1.a`) AND (a = `--t2.a`) AND (a = `--t3.a`)\n+WHERE (a = `--t1.a`) AND (a = `--t2.a`) AND (a = `--t3.a`)\n+SELECT `--t1.a` AS `t1.a`\n+FROM \n+(\n+    SELECT \n+        `--t1.a`,\n+        `--t2.a`,\n+        a AS `--t3.a`\n+    FROM \n+    (\n+        SELECT \n+            a AS `--t1.a`,\n+            t2.a AS `--t2.a`\n+        FROM t1\n+        ALL INNER JOIN t2 ON `--t1.a` = `--t2.a`\n+    ) AS `--.s`\n+    ALL INNER JOIN t3 ON `--t2.a` = `--t3.a`\n+) AS `--.s`\n+ALL INNER JOIN t4 ON `--t3.a` = a\n+WHERE (`--t1.a` = `--t2.a`) AND (`--t2.a` = `--t3.a`) AND (`--t3.a` = a)\n+SELECT `--t1.a` AS `t1.a`\n+FROM \n+(\n+    SELECT `--t1.a`\n+    FROM \n+    (\n+        SELECT a AS `--t1.a`\n+        FROM t1\n+        CROSS JOIN t2\n+    ) AS `--.s`\n+    CROSS JOIN t3\n+) AS `--.s`\n+CROSS JOIN t4\n+SELECT `--t1.a` AS `t1.a`\n+FROM \n+(\n+    SELECT `--t1.a`\n+    FROM \n+    (\n+        SELECT a AS `--t1.a`\n+        FROM t1\n+        CROSS JOIN t2\n+    ) AS `--.s`\n+    CROSS JOIN t3\n+) AS `--.s`\n+CROSS JOIN t4\n+SELECT `--t1.a` AS `t1.a`\n+FROM \n+(\n+    SELECT a AS `--t1.a`\n+    FROM t1\n+    CROSS JOIN t2\n+) AS `--.s`\n+CROSS JOIN t3\n+SELECT `--t1.a` AS `t1.a`\n+FROM \n+(\n+    SELECT \n+        a AS `--t1.a`,\n+        t2.a AS `--t2.a`\n+    FROM t1\n+    ALL INNER JOIN t2 ON `--t1.a` = `--t2.a`\n+) AS `--.s`\n+CROSS JOIN t3\n SELECT * FROM t1, t2\n 1\t1\t1\t1\n 1\t1\t1\t\\N\ndiff --git a/tests/queries/0_stateless/00908_analyze_query.reference b/tests/queries/0_stateless/00908_analyze_query.reference\nindex 66db6f5a2e47..0305f528b250 100644\n--- a/tests/queries/0_stateless/00908_analyze_query.reference\n+++ b/tests/queries/0_stateless/00908_analyze_query.reference\n@@ -1,1 +1,4 @@\n-SELECT \\n    a,\\n    b\\nFROM a\n+SELECT \n+    a,\n+    b\n+FROM a\ndiff --git a/tests/queries/0_stateless/01029_early_constant_folding.reference b/tests/queries/0_stateless/01029_early_constant_folding.reference\nindex 399f7f5d3b93..7e2f6c7ce765 100644\n--- a/tests/queries/0_stateless/01029_early_constant_folding.reference\n+++ b/tests/queries/0_stateless/01029_early_constant_folding.reference\n@@ -1,5 +1,12 @@\n-SELECT 1\\nWHERE 0\n SELECT 1\n-SELECT 1\\nWHERE 0\n-SELECT 1\\nWHERE 1 IN (\\n(\\n    SELECT arrayJoin([1, 2, 3])\\n) AS subquery)\n-SELECT 1\\nWHERE NOT ignore()\n+WHERE 0\n+SELECT 1\n+SELECT 1\n+WHERE 0\n+SELECT 1\n+WHERE 1 IN (\n+(\n+    SELECT arrayJoin([1, 2, 3])\n+) AS subquery)\n+SELECT 1\n+WHERE NOT ignore()\ndiff --git a/tests/queries/0_stateless/01056_predicate_optimizer_bugs.reference b/tests/queries/0_stateless/01056_predicate_optimizer_bugs.reference\nindex c797226d8321..fd9d96bdf5fa 100644\n--- a/tests/queries/0_stateless/01056_predicate_optimizer_bugs.reference\n+++ b/tests/queries/0_stateless/01056_predicate_optimizer_bugs.reference\n@@ -1,19 +1,125 @@\n-SELECT \\n    k,\\n    v,\\n    d,\\n    i\\nFROM \\n(\\n    SELECT \\n        t.1 AS k,\\n        t.2 AS v,\\n        runningDifference(v) AS d,\\n        runningDifference(cityHash64(t.1)) AS i\\n    FROM \\n    (\\n        SELECT arrayJoin([(\\'a\\', 1), (\\'a\\', 2), (\\'a\\', 3), (\\'b\\', 11), (\\'b\\', 13), (\\'b\\', 15)]) AS t\\n    )\\n)\\nWHERE i = 0\n+SELECT \n+    k,\n+    v,\n+    d,\n+    i\n+FROM \n+(\n+    SELECT \n+        t.1 AS k,\n+        t.2 AS v,\n+        runningDifference(v) AS d,\n+        runningDifference(cityHash64(t.1)) AS i\n+    FROM \n+    (\n+        SELECT arrayJoin([(\\'a\\', 1), (\\'a\\', 2), (\\'a\\', 3), (\\'b\\', 11), (\\'b\\', 13), (\\'b\\', 15)]) AS t\n+    )\n+)\n+WHERE i = 0\n a\t1\t0\t0\n a\t2\t1\t0\n a\t3\t1\t0\n b\t13\t2\t0\n b\t15\t2\t0\n-SELECT \\n    co,\\n    co2,\\n    co3,\\n    num\\nFROM \\n(\\n    SELECT \\n        co,\\n        co2,\\n        co3,\\n        count() AS num\\n    FROM \\n    (\\n        SELECT \\n            1 AS co,\\n            2 AS co2,\\n            3 AS co3\\n    )\\n    GROUP BY \\n        co,\\n        co2,\\n        co3\\n        WITH CUBE\\n    HAVING (co2 != 2) AND (co != 0)\\n)\\nWHERE (co != 0) AND (co2 != 2)\n+SELECT \n+    co,\n+    co2,\n+    co3,\n+    num\n+FROM \n+(\n+    SELECT \n+        co,\n+        co2,\n+        co3,\n+        count() AS num\n+    FROM \n+    (\n+        SELECT \n+            1 AS co,\n+            2 AS co2,\n+            3 AS co3\n+    )\n+    GROUP BY \n+        co,\n+        co2,\n+        co3\n+        WITH CUBE\n+    HAVING (co2 != 2) AND (co != 0)\n+)\n+WHERE (co != 0) AND (co2 != 2)\n 1\t0\t3\t1\n 1\t0\t0\t1\n-SELECT alias AS name\\nFROM \\n(\\n    SELECT name AS alias\\n    FROM system.settings\\n    WHERE alias = \\'enable_optimize_predicate_expression\\'\\n)\\nANY INNER JOIN \\n(\\n    SELECT name\\n    FROM system.settings\\n) USING (name)\\nWHERE name = \\'enable_optimize_predicate_expression\\'\n+SELECT alias AS name\n+FROM \n+(\n+    SELECT name AS alias\n+    FROM system.settings\n+    WHERE alias = \\'enable_optimize_predicate_expression\\'\n+)\n+ANY INNER JOIN \n+(\n+    SELECT name\n+    FROM system.settings\n+) USING (name)\n+WHERE name = \\'enable_optimize_predicate_expression\\'\n enable_optimize_predicate_expression\n 1\tval11\tval21\tval31\n-SELECT ccc\\nFROM \\n(\\n    SELECT 1 AS ccc\\n    WHERE 0\\n    UNION ALL\\n    SELECT ccc\\n    FROM \\n    (\\n        SELECT 2 AS ccc\\n    )\\n    ANY INNER JOIN \\n    (\\n        SELECT 2 AS ccc\\n    ) USING (ccc)\\n    WHERE ccc > 1\\n)\\nWHERE ccc > 1\n+SELECT ccc\n+FROM \n+(\n+    SELECT 1 AS ccc\n+    WHERE 0\n+    UNION ALL\n+    SELECT ccc\n+    FROM \n+    (\n+        SELECT 2 AS ccc\n+    )\n+    ANY INNER JOIN \n+    (\n+        SELECT 2 AS ccc\n+    ) USING (ccc)\n+    WHERE ccc > 1\n+)\n+WHERE ccc > 1\n 2\n-SELECT \\n    ts,\\n    id,\\n    id_b,\\n    b.ts,\\n    b.id,\\n    id_c\\nFROM \\n(\\n    SELECT \\n        ts,\\n        id,\\n        id_b\\n    FROM A\\n    WHERE ts <= toDateTime(\\'1970-01-01 03:00:00\\')\\n) AS a\\nALL LEFT JOIN B AS b ON b.id = id_b\\nWHERE ts <= toDateTime(\\'1970-01-01 03:00:00\\')\n-SELECT \\n    ts AS `--a.ts`,\\n    id AS `--a.id`,\\n    id_b AS `--a.id_b`,\\n    b.ts AS `--b.ts`,\\n    b.id AS `--b.id`,\\n    id_c AS `--b.id_c`\\nFROM \\n(\\n    SELECT \\n        ts,\\n        id,\\n        id_b\\n    FROM A\\n    WHERE ts <= toDateTime(\\'1970-01-01 03:00:00\\')\\n) AS a\\nALL LEFT JOIN B AS b ON `--b.id` = `--a.id_b`\\nWHERE `--a.ts` <= toDateTime(\\'1970-01-01 03:00:00\\')\n+SELECT \n+    ts,\n+    id,\n+    id_b,\n+    b.ts,\n+    b.id,\n+    id_c\n+FROM \n+(\n+    SELECT \n+        ts,\n+        id,\n+        id_b\n+    FROM A\n+    WHERE ts <= toDateTime(\\'1970-01-01 03:00:00\\')\n+) AS a\n+ALL LEFT JOIN B AS b ON b.id = id_b\n+WHERE ts <= toDateTime(\\'1970-01-01 03:00:00\\')\n+SELECT \n+    ts AS `--a.ts`,\n+    id AS `--a.id`,\n+    id_b AS `--a.id_b`,\n+    b.ts AS `--b.ts`,\n+    b.id AS `--b.id`,\n+    id_c AS `--b.id_c`\n+FROM \n+(\n+    SELECT \n+        ts,\n+        id,\n+        id_b\n+    FROM A\n+    WHERE ts <= toDateTime(\\'1970-01-01 03:00:00\\')\n+) AS a\n+ALL LEFT JOIN B AS b ON `--b.id` = `--a.id_b`\n+WHERE `--a.ts` <= toDateTime(\\'1970-01-01 03:00:00\\')\n 2\t3\n 3\t4\n 4\t5\n@@ -22,8 +128,33 @@ SELECT \\n    ts AS `--a.ts`,\\n    id AS `--a.id`,\\n    id_b AS `--a.id_b`,\\n\n 4\t0\n 2\t3\n 4\t5\n-SELECT dummy\\nFROM \\n(\\n    SELECT dummy\\n    FROM system.one\\n    WHERE arrayMap(x -> (x + 1), [dummy]) = [1]\\n)\\nWHERE arrayMap(x -> (x + 1), [dummy]) = [1]\n+SELECT dummy\n+FROM \n+(\n+    SELECT dummy\n+    FROM system.one\n+    WHERE arrayMap(x -> (x + 1), [dummy]) = [1]\n+)\n+WHERE arrayMap(x -> (x + 1), [dummy]) = [1]\n 0\n-SELECT \\n    id,\\n    value,\\n    value_1\\nFROM \\n(\\n    SELECT \\n        1 AS id,\\n        2 AS value\\n)\\nALL INNER JOIN \\n(\\n    SELECT \\n        1 AS id,\\n        3 AS value_1\\n) USING (id)\\nWHERE arrayMap(x -> ((x + value) + value_1), [1]) = [6]\n+SELECT \n+    id,\n+    value,\n+    value_1\n+FROM \n+(\n+    SELECT \n+        1 AS id,\n+        2 AS value\n+)\n+ALL INNER JOIN \n+(\n+    SELECT \n+        1 AS id,\n+        3 AS value_1\n+) USING (id)\n+WHERE arrayMap(x -> ((x + value) + value_1), [1]) = [6]\n 1\t2\t3\n-SELECT dummy\\nFROM system.one\\nWHERE (dummy > 0) AND (dummy < 0)\n+SELECT dummy\n+FROM system.one\n+WHERE (dummy > 0) AND (dummy < 0)\ndiff --git a/tests/queries/0_stateless/01076_predicate_optimizer_with_view.reference b/tests/queries/0_stateless/01076_predicate_optimizer_with_view.reference\nindex 5cc0a546e272..d6426f679c50 100644\n--- a/tests/queries/0_stateless/01076_predicate_optimizer_with_view.reference\n+++ b/tests/queries/0_stateless/01076_predicate_optimizer_with_view.reference\n@@ -1,4 +1,40 @@\n-SELECT \\n    date,\\n    id,\\n    name,\\n    value\\nFROM \\n(\\n    SELECT *\\n    FROM default.test\\n    HAVING id = 1\\n) AS test_view\\nWHERE id = 1\n-SELECT \\n    date,\\n    id,\\n    name,\\n    value\\nFROM \\n(\\n    SELECT *\\n    FROM default.test\\n    HAVING id = 2\\n) AS test_view\\nWHERE id = 2\n-SELECT id\\nFROM \\n(\\n    SELECT *\\n    FROM default.test\\n    HAVING id = 1\\n) AS test_view\\nWHERE id = 1\n-SELECT id\\nFROM \\n(\\n    SELECT *\\n    FROM default.test\\n    HAVING id = 1\\n) AS s\\nWHERE id = 1\n+SELECT \n+    date,\n+    id,\n+    name,\n+    value\n+FROM \n+(\n+    SELECT *\n+    FROM default.test\n+    HAVING id = 1\n+) AS test_view\n+WHERE id = 1\n+SELECT \n+    date,\n+    id,\n+    name,\n+    value\n+FROM \n+(\n+    SELECT *\n+    FROM default.test\n+    HAVING id = 2\n+) AS test_view\n+WHERE id = 2\n+SELECT id\n+FROM \n+(\n+    SELECT *\n+    FROM default.test\n+    HAVING id = 1\n+) AS test_view\n+WHERE id = 1\n+SELECT id\n+FROM \n+(\n+    SELECT *\n+    FROM default.test\n+    HAVING id = 1\n+) AS s\n+WHERE id = 1\ndiff --git a/tests/queries/0_stateless/01083_cross_to_inner_with_like.reference b/tests/queries/0_stateless/01083_cross_to_inner_with_like.reference\nindex e6ebffcae9c0..5491e82c7d32 100644\n--- a/tests/queries/0_stateless/01083_cross_to_inner_with_like.reference\n+++ b/tests/queries/0_stateless/01083_cross_to_inner_with_like.reference\n@@ -1,3 +1,21 @@\n-SELECT \\n    k,\\n    r.k,\\n    name\\nFROM n\\nALL INNER JOIN r ON k = r.k\\nWHERE (k = r.k) AND (name = \\'A\\')\n-SELECT \\n    k,\\n    r.k,\\n    name\\nFROM n\\nALL INNER JOIN r ON k = r.k\\nWHERE (k = r.k) AND (name LIKE \\'A%\\')\n-SELECT \\n    k,\\n    r.k,\\n    name\\nFROM n\\nALL INNER JOIN r ON k = r.k\\nWHERE (k = r.k) AND (name NOT LIKE \\'A%\\')\n+SELECT \n+    k,\n+    r.k,\n+    name\n+FROM n\n+ALL INNER JOIN r ON k = r.k\n+WHERE (k = r.k) AND (name = \\'A\\')\n+SELECT \n+    k,\n+    r.k,\n+    name\n+FROM n\n+ALL INNER JOIN r ON k = r.k\n+WHERE (k = r.k) AND (name LIKE \\'A%\\')\n+SELECT \n+    k,\n+    r.k,\n+    name\n+FROM n\n+ALL INNER JOIN r ON k = r.k\n+WHERE (k = r.k) AND (name NOT LIKE \\'A%\\')\ndiff --git a/tests/queries/0_stateless/01259_combinator_distinct.reference b/tests/queries/0_stateless/01259_combinator_distinct.reference\nindex 94e4f7d0d179..3196d78ee44f 100644\n--- a/tests/queries/0_stateless/01259_combinator_distinct.reference\n+++ b/tests/queries/0_stateless/01259_combinator_distinct.reference\n@@ -10,6 +10,8 @@\n 24\n 27\n 2\n-SELECT uniqExactIf(number % 10, (number % 5) = 2)\\nFROM numbers(10000)\n+SELECT uniqExactIf(number % 10, (number % 5) = 2)\n+FROM numbers(10000)\n 9\n-SELECT sumDistinctIf(number % 10, (number % 5) = 2)\\nFROM numbers(10000)\n+SELECT sumDistinctIf(number % 10, (number % 5) = 2)\n+FROM numbers(10000)\ndiff --git a/tests/queries/0_stateless/01271_optimize_arithmetic_operations_in_aggr_func.reference b/tests/queries/0_stateless/01271_optimize_arithmetic_operations_in_aggr_func.reference\nindex ba265f2a7ce0..eeba26460467 100644\n--- a/tests/queries/0_stateless/01271_optimize_arithmetic_operations_in_aggr_func.reference\n+++ b/tests/queries/0_stateless/01271_optimize_arithmetic_operations_in_aggr_func.reference\n@@ -1,51 +1,459 @@\n-SELECT \\n    sum(n + 1),\\n    sum(1 + n),\\n    sum(n - 1),\\n    sum(1 - n)\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    sum(n) * 2,\\n    2 * sum(n),\\n    sum(n) / 2,\\n    sum(1 / n)\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    min(n) + 1,\\n    1 + min(n),\\n    min(n) - 1,\\n    1 - min(n)\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    min(n) * 2,\\n    2 * min(n),\\n    min(n) / 2,\\n    min(1 / n)\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    max(n) + 1,\\n    1 + max(n),\\n    max(n) - 1,\\n    1 - max(n)\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    max(n) * 2,\\n    2 * max(n),\\n    max(n) / 2,\\n    max(1 / n)\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    sum(n + -1),\\n    sum(-1 + n),\\n    sum(n - -1),\\n    sum(-1 - n)\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    sum(n) * -2,\\n    -2 * sum(n),\\n    sum(n) / -2,\\n    sum(-1 / n)\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    min(n) + -1,\\n    -1 + min(n),\\n    min(n) - -1,\\n    -1 - min(n)\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    max(n) * -2,\\n    -2 * max(n),\\n    max(n) / -2,\\n    min(-1 / n)\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    max(n) + -1,\\n    -1 + max(n),\\n    max(n) - -1,\\n    -1 - max(n)\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    min(n) * -2,\\n    -2 * min(n),\\n    min(n) / -2,\\n    max(-1 / n)\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    sum(abs(2) + 1),\\n    sum(abs(2) + n),\\n    sum(n - abs(2)),\\n    sum(1 - abs(2))\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    sum(abs(2)) * 2,\\n    sum(abs(2) * n),\\n    sum(n / abs(2)),\\n    sum(1 / abs(2))\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    min(abs(2)) + 1,\\n    min(abs(2) + n),\\n    min(n - abs(2)),\\n    1 - min(abs(2))\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    min(abs(2)) * 2,\\n    min(abs(2) * n),\\n    min(n / abs(2)),\\n    min(1 / abs(2))\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    max(abs(2)) + 1,\\n    max(abs(2) + n),\\n    max(n - abs(2)),\\n    1 - max(abs(2))\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    max(abs(2)) * 2,\\n    max(abs(2) * n),\\n    max(n / abs(2)),\\n    max(1 / abs(2))\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    sum(abs(n) + 1),\\n    sum(abs(n) + n),\\n    sum(n - abs(n)),\\n    sum(1 - abs(n))\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    sum(abs(n)) * 2,\\n    sum(abs(n) * n),\\n    sum(n / abs(n)),\\n    sum(1 / abs(n))\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    min(abs(n)) + 1,\\n    min(abs(n) + n),\\n    min(n - abs(n)),\\n    1 - min(abs(n))\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    min(abs(n)) * 2,\\n    min(abs(n) * n),\\n    min(n / abs(n)),\\n    min(1 / abs(n))\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    max(abs(n)) + 1,\\n    max(abs(n) + n),\\n    max(n - abs(n)),\\n    1 - max(abs(n))\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    max(abs(n)) * 2,\\n    max(abs(n) * n),\\n    max(n / abs(n)),\\n    max(1 / abs(n))\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    sum((n * n) + 1),\\n    sum(1 + (n * n)),\\n    sum((n * n) - 1),\\n    sum(1 - (n * n))\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    sum(n * n) * 2,\\n    sum((2 * n) * n),\\n    sum(n * n) / 2,\\n    sum((1 / n) * n)\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    min(n * n) + 1,\\n    1 + min(n * n),\\n    min(n * n) - 1,\\n    1 - min(n * n)\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    min(n * n) * 2,\\n    min((2 * n) * n),\\n    min(n * n) / 2,\\n    min((1 / n) * n)\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    max(n * n) + 1,\\n    1 + max(n * n),\\n    max(n * n) - 1,\\n    1 - max(n * n)\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    max(n * n) * 2,\\n    max((2 * n) * n),\\n    max(n * n) / 2,\\n    max((1 / n) * n)\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    sum((1 + n) + 1),\\n    sum((1 + 1) + n),\\n    sum((1 + n) - 1),\\n    sum((1 + 1) - n)\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    sum(1 + (n * 2)),\\n    sum(1 + (2 * n)),\\n    sum(1 + (n / 2)),\\n    sum(1 + (1 / n))\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    (1 + min(n)) + 1,\\n    min((1 + 1) + n),\\n    (1 + min(n)) - 1,\\n    min((1 + 1) - n)\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    1 + min(n * 2),\\n    1 + min(2 * n),\\n    1 + min(n / 2),\\n    1 + min(1 / n)\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    (1 + max(n)) + 1,\\n    max((1 + 1) + n),\\n    (1 + max(n)) - 1,\\n    max((1 + 1) - n)\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    1 + max(n * 2),\\n    1 + max(2 * n),\\n    1 + max(n / 2),\\n    1 + max(1 / n)\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    sum((n + -1) + -1),\\n    sum((-1 + n) + -1),\\n    sum((n - -1) + -1),\\n    sum((-1 - n) + -1)\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    (sum(n) * -2) * -1,\\n    (-2 * sum(n)) * -1,\\n    (sum(n) / -2) / -1,\\n    sum(-1 / n) / -1\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    (min(n) + -1) + -1,\\n    (-1 + min(n)) + -1,\\n    (min(n) - -1) + -1,\\n    (-1 - min(n)) + -1\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    (min(n) * -2) * -1,\\n    (-2 * min(n)) * -1,\\n    (min(n) / -2) / -1,\\n    max(-1 / n) / -1\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    (max(n) + -1) + -1,\\n    (-1 + max(n)) + -1,\\n    (max(n) - -1) + -1,\\n    (-1 - max(n)) + -1\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT \\n    (max(n) * -2) * -1,\\n    (-2 * max(n)) * -1,\\n    (max(n) / -2) / -1,\\n    min(-1 / n) / -1\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT ((sum(n + 1) + sum(1 + n)) + sum(n - 1)) + sum(1 - n)\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT (((sum(n) * 2) + (2 * sum(n))) + (sum(n) / 2)) + sum(1 / n)\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT (((min(n) + 1) + (1 + min(n))) + (min(n) - 1)) + (1 - min(n))\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT (((min(n) * 2) + (2 * min(n))) + (min(n) / 2)) + min(1 / n)\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT (((max(n) + 1) + (1 + max(n))) + (max(n) - 1)) + (1 - max(n))\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n-SELECT (((max(n) * 2) + (2 * max(n))) + (max(n) / 2)) + max(1 / n)\\nFROM \\n(\\n    SELECT number AS n\\n    FROM numbers(10)\\n)\n+SELECT \n+    sum(n + 1),\n+    sum(1 + n),\n+    sum(n - 1),\n+    sum(1 - n)\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    sum(n) * 2,\n+    2 * sum(n),\n+    sum(n) / 2,\n+    sum(1 / n)\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    min(n) + 1,\n+    1 + min(n),\n+    min(n) - 1,\n+    1 - min(n)\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    min(n) * 2,\n+    2 * min(n),\n+    min(n) / 2,\n+    min(1 / n)\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    max(n) + 1,\n+    1 + max(n),\n+    max(n) - 1,\n+    1 - max(n)\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    max(n) * 2,\n+    2 * max(n),\n+    max(n) / 2,\n+    max(1 / n)\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    sum(n + -1),\n+    sum(-1 + n),\n+    sum(n - -1),\n+    sum(-1 - n)\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    sum(n) * -2,\n+    -2 * sum(n),\n+    sum(n) / -2,\n+    sum(-1 / n)\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    min(n) + -1,\n+    -1 + min(n),\n+    min(n) - -1,\n+    -1 - min(n)\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    max(n) * -2,\n+    -2 * max(n),\n+    max(n) / -2,\n+    min(-1 / n)\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    max(n) + -1,\n+    -1 + max(n),\n+    max(n) - -1,\n+    -1 - max(n)\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    min(n) * -2,\n+    -2 * min(n),\n+    min(n) / -2,\n+    max(-1 / n)\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    sum(abs(2) + 1),\n+    sum(abs(2) + n),\n+    sum(n - abs(2)),\n+    sum(1 - abs(2))\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    sum(abs(2)) * 2,\n+    sum(abs(2) * n),\n+    sum(n / abs(2)),\n+    sum(1 / abs(2))\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    min(abs(2)) + 1,\n+    min(abs(2) + n),\n+    min(n - abs(2)),\n+    1 - min(abs(2))\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    min(abs(2)) * 2,\n+    min(abs(2) * n),\n+    min(n / abs(2)),\n+    min(1 / abs(2))\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    max(abs(2)) + 1,\n+    max(abs(2) + n),\n+    max(n - abs(2)),\n+    1 - max(abs(2))\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    max(abs(2)) * 2,\n+    max(abs(2) * n),\n+    max(n / abs(2)),\n+    max(1 / abs(2))\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    sum(abs(n) + 1),\n+    sum(abs(n) + n),\n+    sum(n - abs(n)),\n+    sum(1 - abs(n))\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    sum(abs(n)) * 2,\n+    sum(abs(n) * n),\n+    sum(n / abs(n)),\n+    sum(1 / abs(n))\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    min(abs(n)) + 1,\n+    min(abs(n) + n),\n+    min(n - abs(n)),\n+    1 - min(abs(n))\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    min(abs(n)) * 2,\n+    min(abs(n) * n),\n+    min(n / abs(n)),\n+    min(1 / abs(n))\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    max(abs(n)) + 1,\n+    max(abs(n) + n),\n+    max(n - abs(n)),\n+    1 - max(abs(n))\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    max(abs(n)) * 2,\n+    max(abs(n) * n),\n+    max(n / abs(n)),\n+    max(1 / abs(n))\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    sum((n * n) + 1),\n+    sum(1 + (n * n)),\n+    sum((n * n) - 1),\n+    sum(1 - (n * n))\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    sum(n * n) * 2,\n+    sum((2 * n) * n),\n+    sum(n * n) / 2,\n+    sum((1 / n) * n)\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    min(n * n) + 1,\n+    1 + min(n * n),\n+    min(n * n) - 1,\n+    1 - min(n * n)\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    min(n * n) * 2,\n+    min((2 * n) * n),\n+    min(n * n) / 2,\n+    min((1 / n) * n)\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    max(n * n) + 1,\n+    1 + max(n * n),\n+    max(n * n) - 1,\n+    1 - max(n * n)\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    max(n * n) * 2,\n+    max((2 * n) * n),\n+    max(n * n) / 2,\n+    max((1 / n) * n)\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    sum((1 + n) + 1),\n+    sum((1 + 1) + n),\n+    sum((1 + n) - 1),\n+    sum((1 + 1) - n)\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    sum(1 + (n * 2)),\n+    sum(1 + (2 * n)),\n+    sum(1 + (n / 2)),\n+    sum(1 + (1 / n))\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    (1 + min(n)) + 1,\n+    min((1 + 1) + n),\n+    (1 + min(n)) - 1,\n+    min((1 + 1) - n)\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    1 + min(n * 2),\n+    1 + min(2 * n),\n+    1 + min(n / 2),\n+    1 + min(1 / n)\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    (1 + max(n)) + 1,\n+    max((1 + 1) + n),\n+    (1 + max(n)) - 1,\n+    max((1 + 1) - n)\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    1 + max(n * 2),\n+    1 + max(2 * n),\n+    1 + max(n / 2),\n+    1 + max(1 / n)\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    sum((n + -1) + -1),\n+    sum((-1 + n) + -1),\n+    sum((n - -1) + -1),\n+    sum((-1 - n) + -1)\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    (sum(n) * -2) * -1,\n+    (-2 * sum(n)) * -1,\n+    (sum(n) / -2) / -1,\n+    sum(-1 / n) / -1\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    (min(n) + -1) + -1,\n+    (-1 + min(n)) + -1,\n+    (min(n) - -1) + -1,\n+    (-1 - min(n)) + -1\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    (min(n) * -2) * -1,\n+    (-2 * min(n)) * -1,\n+    (min(n) / -2) / -1,\n+    max(-1 / n) / -1\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    (max(n) + -1) + -1,\n+    (-1 + max(n)) + -1,\n+    (max(n) - -1) + -1,\n+    (-1 - max(n)) + -1\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT \n+    (max(n) * -2) * -1,\n+    (-2 * max(n)) * -1,\n+    (max(n) / -2) / -1,\n+    min(-1 / n) / -1\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT ((sum(n + 1) + sum(1 + n)) + sum(n - 1)) + sum(1 - n)\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT (((sum(n) * 2) + (2 * sum(n))) + (sum(n) / 2)) + sum(1 / n)\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT (((min(n) + 1) + (1 + min(n))) + (min(n) - 1)) + (1 - min(n))\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT (((min(n) * 2) + (2 * min(n))) + (min(n) / 2)) + min(1 / n)\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT (((max(n) + 1) + (1 + max(n))) + (max(n) - 1)) + (1 - max(n))\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n+SELECT (((max(n) * 2) + (2 * max(n))) + (max(n) / 2)) + max(1 / n)\n+FROM \n+(\n+    SELECT number AS n\n+    FROM numbers(10)\n+)\n 55\t55\t35\t-35\n 90\t90\t22.5\tinf\n 1\t1\t-1\t1\ndiff --git a/tests/queries/0_stateless/01300_group_by_other_keys.reference b/tests/queries/0_stateless/01300_group_by_other_keys.reference\nindex 52a5e7f0002f..7f0661ec4fed 100644\n--- a/tests/queries/0_stateless/01300_group_by_other_keys.reference\n+++ b/tests/queries/0_stateless/01300_group_by_other_keys.reference\n@@ -22,11 +22,35 @@\n 3465736.595946905\n 3465735.2096525617\n 3465735.9027997428\n-SELECT max(log(2) * number) AS k\\nFROM numbers(10000000)\\nGROUP BY \\n    number % 2,\\n    number % 3,\\n    ((number % 2) + (number % 3)) % 2\\nORDER BY k ASC\n-SELECT avg(log(2) * number) AS k\\nFROM numbers(10000000)\\nGROUP BY number % 5\\nORDER BY k ASC\n-SELECT avg(log(2) * number) AS k\\nFROM numbers(10000000)\\nGROUP BY \\n    (number % 2) * (number % 3),\\n    number % 3\\nORDER BY k ASC\n-SELECT avg(log(2) * number) AS k\\nFROM numbers(10000000)\\nGROUP BY \\n    number % 3,\\n    number % 2\\nORDER BY k ASC\n-SELECT avg(log(2) * number) AS k\\nFROM numbers(10000000)\\nGROUP BY \\n    (number % 2) % 3,\\n    number % 2\\nORDER BY k ASC\n+SELECT max(log(2) * number) AS k\n+FROM numbers(10000000)\n+GROUP BY \n+    number % 2,\n+    number % 3,\n+    ((number % 2) + (number % 3)) % 2\n+ORDER BY k ASC\n+SELECT avg(log(2) * number) AS k\n+FROM numbers(10000000)\n+GROUP BY number % 5\n+ORDER BY k ASC\n+SELECT avg(log(2) * number) AS k\n+FROM numbers(10000000)\n+GROUP BY \n+    (number % 2) * (number % 3),\n+    number % 3\n+ORDER BY k ASC\n+SELECT avg(log(2) * number) AS k\n+FROM numbers(10000000)\n+GROUP BY \n+    number % 3,\n+    number % 2\n+ORDER BY k ASC\n+SELECT avg(log(2) * number) AS k\n+FROM numbers(10000000)\n+GROUP BY \n+    (number % 2) % 3,\n+    number % 2\n+ORDER BY k ASC\n 6931467.646716369\n 6931468.33986355\n 6931469.0330107305\n@@ -51,8 +75,35 @@ SELECT avg(log(2) * number) AS k\\nFROM numbers(10000000)\\nGROUP BY \\n    (number\n 3465736.595946905\n 3465735.2096525617\n 3465735.9027997428\n-SELECT max(log(2) * number) AS k\\nFROM numbers(10000000)\\nGROUP BY \\n    number % 2,\\n    number % 3,\\n    ((number % 2) + (number % 3)) % 2\\nORDER BY k ASC\n-SELECT avg(log(2) * number) AS k\\nFROM numbers(10000000)\\nGROUP BY \\n    number % 5,\\n    (number % 5) * (number % 5)\\nORDER BY k ASC\n-SELECT avg(log(2) * number) AS k\\nFROM numbers(10000000)\\nGROUP BY \\n    (number % 2) * (number % 3),\\n    number % 3\\nORDER BY k ASC\n-SELECT avg(log(2) * number) AS k\\nFROM numbers(10000000)\\nGROUP BY \\n    (number % 2) * (number % 3),\\n    number % 3,\\n    number % 2\\nORDER BY k ASC\n-SELECT avg(log(2) * number) AS k\\nFROM numbers(10000000)\\nGROUP BY \\n    (number % 2) % 3,\\n    number % 2\\nORDER BY k ASC\n+SELECT max(log(2) * number) AS k\n+FROM numbers(10000000)\n+GROUP BY \n+    number % 2,\n+    number % 3,\n+    ((number % 2) + (number % 3)) % 2\n+ORDER BY k ASC\n+SELECT avg(log(2) * number) AS k\n+FROM numbers(10000000)\n+GROUP BY \n+    number % 5,\n+    (number % 5) * (number % 5)\n+ORDER BY k ASC\n+SELECT avg(log(2) * number) AS k\n+FROM numbers(10000000)\n+GROUP BY \n+    (number % 2) * (number % 3),\n+    number % 3\n+ORDER BY k ASC\n+SELECT avg(log(2) * number) AS k\n+FROM numbers(10000000)\n+GROUP BY \n+    (number % 2) * (number % 3),\n+    number % 3,\n+    number % 2\n+ORDER BY k ASC\n+SELECT avg(log(2) * number) AS k\n+FROM numbers(10000000)\n+GROUP BY \n+    (number % 2) % 3,\n+    number % 2\n+ORDER BY k ASC\ndiff --git a/tests/queries/0_stateless/01300_group_by_other_keys_having.reference b/tests/queries/0_stateless/01300_group_by_other_keys_having.reference\nindex d7c04e64df5a..67262193df5b 100644\n--- a/tests/queries/0_stateless/01300_group_by_other_keys_having.reference\n+++ b/tests/queries/0_stateless/01300_group_by_other_keys_having.reference\n@@ -7,9 +7,23 @@\n 0\n 1\n 4\n-SELECT avg(log(2) * number) AS k\\nFROM numbers(10000000)\\nGROUP BY \\n    number % 3,\\n    number % 2\\nHAVING avg(log(2) * number) > 3465735.3\\nORDER BY k ASC\n-SELECT avg(log(2) * number) AS k\\nFROM numbers(10000000)\\nWHERE ((number % 5) * (number % 5)) < 5\\nGROUP BY number % 5\\nORDER BY k ASC\n-SELECT (number % 5) * (number % 5) AS k\\nFROM numbers(10000000)\\nWHERE ((number % 5) * (number % 5)) < 5\\nGROUP BY number % 5\\nORDER BY k ASC\n+SELECT avg(log(2) * number) AS k\n+FROM numbers(10000000)\n+GROUP BY \n+    number % 3,\n+    number % 2\n+HAVING avg(log(2) * number) > 3465735.3\n+ORDER BY k ASC\n+SELECT avg(log(2) * number) AS k\n+FROM numbers(10000000)\n+WHERE ((number % 5) * (number % 5)) < 5\n+GROUP BY number % 5\n+ORDER BY k ASC\n+SELECT (number % 5) * (number % 5) AS k\n+FROM numbers(10000000)\n+WHERE ((number % 5) * (number % 5)) < 5\n+GROUP BY number % 5\n+ORDER BY k ASC\n 3465735.9027997246\n 3465735.902799725\n 3465736.595946905\n@@ -19,6 +33,25 @@ SELECT (number % 5) * (number % 5) AS k\\nFROM numbers(10000000)\\nWHERE ((number\n 0\n 1\n 4\n-SELECT avg(log(2) * number) AS k\\nFROM numbers(10000000)\\nGROUP BY \\n    (number % 2) * (number % 3),\\n    number % 3,\\n    number % 2\\nHAVING avg(log(2) * number) > 3465735.3\\nORDER BY k ASC\n-SELECT avg(log(2) * number) AS k\\nFROM numbers(10000000)\\nWHERE ((number % 5) * (number % 5)) < 5\\nGROUP BY \\n    number % 5,\\n    (number % 5) * (number % 5)\\nORDER BY k ASC\n-SELECT (number % 5) * (number % 5) AS k\\nFROM numbers(10000000)\\nWHERE ((number % 5) * (number % 5)) < 5\\nGROUP BY \\n    number % 5,\\n    (number % 5) * (number % 5)\\nORDER BY k ASC\n+SELECT avg(log(2) * number) AS k\n+FROM numbers(10000000)\n+GROUP BY \n+    (number % 2) * (number % 3),\n+    number % 3,\n+    number % 2\n+HAVING avg(log(2) * number) > 3465735.3\n+ORDER BY k ASC\n+SELECT avg(log(2) * number) AS k\n+FROM numbers(10000000)\n+WHERE ((number % 5) * (number % 5)) < 5\n+GROUP BY \n+    number % 5,\n+    (number % 5) * (number % 5)\n+ORDER BY k ASC\n+SELECT (number % 5) * (number % 5) AS k\n+FROM numbers(10000000)\n+WHERE ((number % 5) * (number % 5)) < 5\n+GROUP BY \n+    number % 5,\n+    (number % 5) * (number % 5)\n+ORDER BY k ASC\ndiff --git a/tests/queries/0_stateless/01305_duplicate_order_by_and_distinct.reference b/tests/queries/0_stateless/01305_duplicate_order_by_and_distinct.reference\nindex 208f3d1abe5f..5e6fdfcdefb6 100644\n--- a/tests/queries/0_stateless/01305_duplicate_order_by_and_distinct.reference\n+++ b/tests/queries/0_stateless/01305_duplicate_order_by_and_distinct.reference\n@@ -1,14 +1,58 @@\n-SELECT number\\nFROM \\n(\\n    SELECT number\\n    FROM \\n    (\\n        SELECT DISTINCT number\\n        FROM numbers(3)\\n    )\\n)\\nORDER BY number ASC\n+SELECT number\n+FROM \n+(\n+    SELECT number\n+    FROM \n+    (\n+        SELECT DISTINCT number\n+        FROM numbers(3)\n+    )\n+)\n+ORDER BY number ASC\n 0\n 1\n 2\n-SELECT DISTINCT number\\nFROM \\n(\\n    SELECT DISTINCT number\\n    FROM \\n    (\\n        SELECT DISTINCT number\\n        FROM numbers(3)\\n        ORDER BY number ASC\\n    )\\n    ORDER BY number ASC\\n)\\nORDER BY number ASC\n+SELECT DISTINCT number\n+FROM \n+(\n+    SELECT DISTINCT number\n+    FROM \n+    (\n+        SELECT DISTINCT number\n+        FROM numbers(3)\n+        ORDER BY number ASC\n+    )\n+    ORDER BY number ASC\n+)\n+ORDER BY number ASC\n 0\n 1\n 2\n-SELECT number\\nFROM \\n(\\n    SELECT DISTINCT number\\n    FROM \\n    (\\n        SELECT DISTINCT number % 2 AS number\\n        FROM numbers(3)\\n    )\\n)\\nORDER BY number ASC\n+SELECT number\n+FROM \n+(\n+    SELECT DISTINCT number\n+    FROM \n+    (\n+        SELECT DISTINCT number % 2 AS number\n+        FROM numbers(3)\n+    )\n+)\n+ORDER BY number ASC\n 0\n 1\n-SELECT DISTINCT number\\nFROM \\n(\\n    SELECT DISTINCT number\\n    FROM \\n    (\\n        SELECT DISTINCT number % 2 AS number\\n        FROM numbers(3)\\n        ORDER BY number ASC\\n    )\\n    ORDER BY number ASC\\n)\\nORDER BY number ASC\n+SELECT DISTINCT number\n+FROM \n+(\n+    SELECT DISTINCT number\n+    FROM \n+    (\n+        SELECT DISTINCT number % 2 AS number\n+        FROM numbers(3)\n+        ORDER BY number ASC\n+    )\n+    ORDER BY number ASC\n+)\n+ORDER BY number ASC\n 0\n 1\ndiff --git a/tests/queries/0_stateless/01321_aggregate_functions_of_group_by_keys.reference b/tests/queries/0_stateless/01321_aggregate_functions_of_group_by_keys.reference\nindex 0ca6bee85a3a..875a6753f844 100644\n--- a/tests/queries/0_stateless/01321_aggregate_functions_of_group_by_keys.reference\n+++ b/tests/queries/0_stateless/01321_aggregate_functions_of_group_by_keys.reference\n@@ -47,10 +47,39 @@\n 24\n 0\n 0\n-SELECT \\n    number % 2 AS a,\\n    number % 3 AS b\\nFROM numbers(10000000)\\nGROUP BY \\n    number % 2,\\n    number % 3\\nORDER BY \\n    min(number % 2) AS a ASC,\\n    max(number % 3) AS b ASC\n-SELECT \\n    number % 2 AS a,\\n    number % 3 AS b\\nFROM numbers(10000000)\\nGROUP BY \\n    number % 2,\\n    number % 3\\nORDER BY \\n    any(number % 2) AS a ASC,\\n    anyLast(number % 3) AS b ASC\n-SELECT (number % 5) * (number % 7) AS a\\nFROM numbers(10000000)\\nGROUP BY \\n    number % 7,\\n    number % 5\\nORDER BY max((number % 5) * (number % 7)) AS a ASC\n-SELECT foo\\nFROM \\n(\\n    SELECT number AS foo\\n    FROM numbers(1)\\n    GROUP BY number\\n)\n+SELECT \n+    number % 2 AS a,\n+    number % 3 AS b\n+FROM numbers(10000000)\n+GROUP BY \n+    number % 2,\n+    number % 3\n+ORDER BY \n+    min(number % 2) AS a ASC,\n+    max(number % 3) AS b ASC\n+SELECT \n+    number % 2 AS a,\n+    number % 3 AS b\n+FROM numbers(10000000)\n+GROUP BY \n+    number % 2,\n+    number % 3\n+ORDER BY \n+    any(number % 2) AS a ASC,\n+    anyLast(number % 3) AS b ASC\n+SELECT (number % 5) * (number % 7) AS a\n+FROM numbers(10000000)\n+GROUP BY \n+    number % 7,\n+    number % 5\n+ORDER BY max((number % 5) * (number % 7)) AS a ASC\n+SELECT foo\n+FROM \n+(\n+    SELECT number AS foo\n+    FROM numbers(1)\n+    GROUP BY number\n+)\n 0\t0\n 0\t1\n 0\t2\n@@ -99,7 +128,36 @@ SELECT foo\\nFROM \\n(\\n    SELECT number AS foo\\n    FROM numbers(1)\\n    GROUP B\n 20\n 24\n 0\n-SELECT \\n    min(number % 2) AS a,\\n    max(number % 3) AS b\\nFROM numbers(10000000)\\nGROUP BY \\n    number % 2,\\n    number % 3\\nORDER BY \\n    a ASC,\\n    b ASC\n-SELECT \\n    any(number % 2) AS a,\\n    anyLast(number % 3) AS b\\nFROM numbers(10000000)\\nGROUP BY \\n    number % 2,\\n    number % 3\\nORDER BY \\n    a ASC,\\n    b ASC\n-SELECT max((number % 5) * (number % 7)) AS a\\nFROM numbers(10000000)\\nGROUP BY \\n    number % 7,\\n    number % 5\\nORDER BY a ASC\n-SELECT foo\\nFROM \\n(\\n    SELECT anyLast(number) AS foo\\n    FROM numbers(1)\\n    GROUP BY number\\n)\n+SELECT \n+    min(number % 2) AS a,\n+    max(number % 3) AS b\n+FROM numbers(10000000)\n+GROUP BY \n+    number % 2,\n+    number % 3\n+ORDER BY \n+    a ASC,\n+    b ASC\n+SELECT \n+    any(number % 2) AS a,\n+    anyLast(number % 3) AS b\n+FROM numbers(10000000)\n+GROUP BY \n+    number % 2,\n+    number % 3\n+ORDER BY \n+    a ASC,\n+    b ASC\n+SELECT max((number % 5) * (number % 7)) AS a\n+FROM numbers(10000000)\n+GROUP BY \n+    number % 7,\n+    number % 5\n+ORDER BY a ASC\n+SELECT foo\n+FROM \n+(\n+    SELECT anyLast(number) AS foo\n+    FROM numbers(1)\n+    GROUP BY number\n+)\ndiff --git a/tests/queries/0_stateless/01322_any_input_optimize.reference b/tests/queries/0_stateless/01322_any_input_optimize.reference\nindex 5b724453c71e..209a4afb3a2b 100644\n--- a/tests/queries/0_stateless/01322_any_input_optimize.reference\n+++ b/tests/queries/0_stateless/01322_any_input_optimize.reference\n@@ -1,2 +1,3 @@\n 9\n-SELECT any(number) + (any(number) * 2)\\nFROM numbers(3, 10)\n+SELECT any(number) + (any(number) * 2)\n+FROM numbers(3, 10)\ndiff --git a/tests/queries/0_stateless/01372_wrong_order_by_removal.reference b/tests/queries/0_stateless/01372_wrong_order_by_removal.reference\nindex c1b36bd53cae..8ed303c04aa7 100644\n--- a/tests/queries/0_stateless/01372_wrong_order_by_removal.reference\n+++ b/tests/queries/0_stateless/01372_wrong_order_by_removal.reference\n@@ -1,1 +1,16 @@\n-SELECT \\n    k,\\n    groupArrayMovingSum(v)\\nFROM \\n(\\n    SELECT \\n        k,\\n        dt,\\n        v\\n    FROM moving_sum_num\\n    ORDER BY \\n        k ASC,\\n        dt ASC\\n)\\nGROUP BY k\\nORDER BY k ASC\n+SELECT \n+    k,\n+    groupArrayMovingSum(v)\n+FROM \n+(\n+    SELECT \n+        k,\n+        dt,\n+        v\n+    FROM moving_sum_num\n+    ORDER BY \n+        k ASC,\n+        dt ASC\n+)\n+GROUP BY k\n+ORDER BY k ASC\n",
  "problem_statement": "feature request: EXPLAIN output\nI'm fairly new to Clickhouse and as I'm developing queries I'd like to be able to optimize them.  With a traditional RDBMS I can examine the query plan to get a sense of what my query will do without running it.  I'd like for Clickhouse to be able to give me some kind of diagnostic output that would guide my optimization efforts.  For example, see [SQLite](https://www.sqlite.org/eqp.html) and  [Postgres](https://www.postgresql.org/docs/9.6/static/sql-explain.html).\r\n\r\nI found [a previously discussion](https://groups.google.com/forum/#!topic/clickhouse/3He3N2g6_NE) but I don't have direct access to the server to read that log file.\r\n\r\nIn short, I'm asking for:\r\n\r\n- some type of EXPLAIN syntax that can be prefixed to a query when it is sent to Clickhouse\r\n- a query response detailing how Clickhouse intends to execute the query\r\n- documentation describing what that EXPLAIN query response means and pointers on how to optimize queries\r\n\r\nThanks!\r\n\n",
  "hints_text": "This is the part of a larger task and we have some related tasks planned:\r\n\r\nFirst, we are planning to implement rich profiling info for a query, to know,\r\nhow much time is spent in each server node, in each thread for each subquery, on\r\nCPU, disk IO, network and synchronization.\r\n\r\nSecond, we are going to implement a query, that will show, how many rows will be read for each subquery on each server, according to index info.\r\n\r\nBoth are not exactly an EXPLAIN query.\nHi @alexey-milovidov , is there any plan to implement this feature ?\nAny new information about this, please?\n@alexey-milovidov It would be also useful to include some recommendation about index granularity for the queries. E.g. when the most common and frequent query touches only few rows, but had to scan much more rows for that, we can suggest: \"If you want this query to be faster you can change your table index granularity to N\".\n> is there any plan to implement this feature ?\r\n\r\nWe started working on this plan: https://github.com/yandex/ClickHouse/issues/1118#issuecomment-323190806\n> @alexey-milovidov It would be also useful to include some recommendation about index granularity for the queries. E.g. when the most common and frequent query touches only few rows, but had to scan much more rows for that, we can suggest: \"If you want this query to be faster you can change your table index granularity to N\".\r\n\r\nAt first we want to make index granularity adaptive on row size in bytes. For example, marks should be put more frequently if you have fat rows. This is separate feature.\nis the task dead?\r\nany news about explain query plan?\r\n\n@akonyaev90 not dead, just in backlog, not currently in progress.\nCould you tell, when you implement explain query plan?\nLooking forward.\n@BlackEric001 nope, not scheduled yet. Though you can already use something like this to get some idea on how query is executed:\r\n```\r\n% clickhouse-client --send_logs_level=debug <<< 'select max(number) from numbers(100) where number % 2 union all select 123 as number;' > /dev/null\r\n[....yandex.net] 2018.11.20 16:18:29.703878 {9665eedb-4615-4701-85e4-050681dadc57} [ 25 ] <Debug> executeQuery: (from [::1]:53819) select max(number) from numbers(100) where number % 2 union all select 123 as number\r\n[....yandex.net] 2018.11.20 16:18:29.704895 {9665eedb-4615-4701-85e4-050681dadc57} [ 25 ] <Debug> executeQuery: Query pipeline:\r\nUnion\r\n Converting\r\n  Expression\r\n   Expression\r\n    Aggregating\r\n     Concat\r\n      ConvertColumnWithDictionaryToFull\r\n       Expression\r\n        Filter\r\n         Limit\r\n          Numbers\r\n Converting\r\n  Expression\r\n   Expression\r\n    One\r\n\r\n[....yandex.net] 2018.11.20 16:18:29.705772 {9665eedb-4615-4701-85e4-050681dadc57} [ 25 ] <Information> executeQuery: Read 101 rows, 801.00 B in 0.002 sec., 54998 rows/sec., 425.95 KiB/sec.\r\n```\nIs this still on the backlog?\n@MeteHanC yes\n> First, we are planning to implement rich profiling info for a query, to know,\r\nhow much time is spent in each server node, in each thread for each subquery, on\r\nCPU, disk IO, network and synchronization.\r\n\r\nThis task is done.\r\n\r\n> At first we want to make index granularity adaptive on row size in bytes. For example, marks should be put more frequently if you have fat rows. This is separate feature.\r\n\r\nThis task is also done.\r\n\r\n> @BlackEric001 nope, not scheduled yet. Though you can already use something like this to get some idea on how query is executed\r\n\r\nNow you can use `SET send_logs_level = 'trace'` in `clickhouse-client` to get this info.\r\n\r\nNow the task is depend on \"Processors\" feature, that is currently implemented by @KochetovNicolai \r\nThe current estimate is not earlier than Jan 2020.\n> First, we are planning to implement rich profiling info for a query, to know,\r\nhow much time is spent in each server node, in each thread for each subquery, on\r\nCPU, disk IO, network and synchronization.\r\n\r\n@alexey-milovidov  Do you know the PRs about this task?\nHello @blinkov @alexey-milovidov!\r\nCould you guys please share any news about plans on that feature?\r\n\r\nWe are trying to predict each query cost (based on the possible impact on ClickHouse cluster: such as read_rows, read_bytes, parts touched etc) on-fly in order to determine whether it's possible to run the query or not. With the explain feature the entire process is much more simplified.\n\r\n\r\n\r\n> @BlackEric001 nope, not scheduled yet. Though you can already use something like this to get some idea on how query is executed:\r\n> \r\n> ```\r\n> % clickhouse-client --send_logs_level=debug <<< 'select max(number) from numbers(100) where number % 2 union all select 123 as number;' > /dev/null\r\n> [....yandex.net] 2018.11.20 16:18:29.703878 {9665eedb-4615-4701-85e4-050681dadc57} [ 25 ] <Debug> executeQuery: (from [::1]:53819) select max(number) from numbers(100) where number % 2 union all select 123 as number\r\n> [....yandex.net] 2018.11.20 16:18:29.704895 {9665eedb-4615-4701-85e4-050681dadc57} [ 25 ] <Debug> executeQuery: Query pipeline:\r\n> Union\r\n>  Converting\r\n>   Expression\r\n>    Expression\r\n>     Aggregating\r\n>      Concat\r\n>       ConvertColumnWithDictionaryToFull\r\n>        Expression\r\n>         Filter\r\n>          Limit\r\n>           Numbers\r\n>  Converting\r\n>   Expression\r\n>    Expression\r\n>     One\r\n> \r\n> [....yandex.net] 2018.11.20 16:18:29.705772 {9665eedb-4615-4701-85e4-050681dadc57} [ 25 ] <Information> executeQuery: Read 101 rows, 801.00 B in 0.002 sec., 54998 rows/sec., 425.95 KiB/sec.\r\n> ```\r\n\r\nHI. why my output information don't have \"Query pipeline\"\r\n```\r\n#clickhouse-client -u anyuser --ask-password --port 9000 --send_logs_level=trace <<< 'select count(*) from bp_bst.action_bst limit 10' \r\nPassword for user (anyuser): \r\n[bj2-clickhouse-all-prod-01] 2020.05.23 09:11:01.938593 [ 23342 ] {c9848987-a84f-47ba-a976-c81aa321e118} <Debug> executeQuery: (from 127.0.0.1:49731, user: anyuser) SELECT count(*) FROM bp_bst.action_bst LIMIT 10\r\n[bj2-clickhouse-all-prod-01] 2020.05.23 09:11:01.938941 [ 23342 ] {c9848987-a84f-47ba-a976-c81aa321e118} <Trace> AccessRightsContext (anyuser): List of all grants: GRANT SHOW, EXISTS, SELECT, INSERT, ALTER, CREATE, CREATE TEMPORARY TABLE, DROP, TRUNCATE, OPTIMIZE, KILL, CREATE USER, ALTER USER, DROP USER, CREATE ROLE, DROP ROLE, CREATE POLICY, ALTER POLICY, DROP POLICY, CREATE QUOTA, ALTER QUOTA, DROP QUOTA, ROLE ADMIN, SYSTEM, dictGet(), TABLE FUNCTIONS ON *.*\r\n[bj2-clickhouse-all-prod-01] 2020.05.23 09:11:01.938978 [ 23342 ] {c9848987-a84f-47ba-a976-c81aa321e118} <Trace> AccessRightsContext (anyuser): Access granted: SELECT(D_CREATED_AT) ON bp_bst.action_bst\r\n[bj2-clickhouse-all-prod-01] 2020.05.23 09:11:01.939122 [ 23342 ] {c9848987-a84f-47ba-a976-c81aa321e118} <Trace> AccessRightsContext (anyuser): Access granted: SELECT(D_CREATED_AT) ON bp_bst.action_bst\r\n[bj2-clickhouse-all-prod-01] 2020.05.23 09:11:01.939241 [ 23342 ] {c9848987-a84f-47ba-a976-c81aa321e118} <Trace> AccessRightsContext (anyuser): Access granted: SELECT(D_CREATED_AT) ON bp_bst.action_bst_local\r\n[bj2-clickhouse-all-prod-01] 2020.05.23 09:11:01.939919 [ 23342 ] {c9848987-a84f-47ba-a976-c81aa321e118} <Trace> InterpreterSelectQuery: WithMergeableState -> WithMergeableState\r\n[bj2-clickhouse-all-prod-01] 2020.05.23 09:11:01.940014 [ 23342 ] {c9848987-a84f-47ba-a976-c81aa321e118} <Trace> InterpreterSelectQuery: WithMergeableState -> Complete\r\n1035815\r\n[bj2-clickhouse-all-prod-02] 2020.05.23 09:11:01.940616 [ 5470 ] {e01596ff-25c3-4e66-9cc8-499918b427f9} <Debug> executeQuery: (from 172.16.24.179:18502, initial_query_id: c9848987-a84f-47ba-a976-c81aa321e118) SELECT count() FROM bp_bst.action_bst_local LIMIT 10\r\n[bj2-clickhouse-all-prod-02] 2020.05.23 09:11:01.940853 [ 5470 ] {e01596ff-25c3-4e66-9cc8-499918b427f9} <Trace> AccessRightsContext (default): Access granted: SELECT(D_CREATED_AT) ON bp_bst.action_bst_local\r\n[bj2-clickhouse-all-prod-02] 2020.05.23 09:11:01.941489 [ 5470 ] {e01596ff-25c3-4e66-9cc8-499918b427f9} <Trace> InterpreterSelectQuery: WithMergeableState -> WithMergeableState\r\n[bj2-clickhouse-all-prod-02] 2020.05.23 09:11:01.941829 [ 5470 ] {e01596ff-25c3-4e66-9cc8-499918b427f9} <Information> executeQuery: Read 1 rows, 4.01 KiB in 0.001 sec., 867 rows/sec., 3.39 MiB/sec.\r\n[bj2-clickhouse-all-prod-02] 2020.05.23 09:11:01.941856 [ 5470 ] {e01596ff-25c3-4e66-9cc8-499918b427f9} <Debug> MemoryTracker: Peak memory usage (for query): 0.00 B.\r\n[bj2-clickhouse-all-prod-06] 2020.05.23 09:11:01.942701 [ 21214 ] {67b0250c-c8ac-45f5-9291-3c6862ff0ed5} <Debug> executeQuery: (from 172.16.24.179:4291, initial_query_id: c9848987-a84f-47ba-a976-c81aa321e118) SELECT count() FROM bp_bst.action_bst_local LIMIT 10\r\n[bj2-clickhouse-all-prod-06] 2020.05.23 09:11:01.942921 [ 21214 ] {67b0250c-c8ac-45f5-9291-3c6862ff0ed5} <Trace> AccessRightsContext (default): Access granted: SELECT(D_CREATED_AT) ON bp_bst.action_bst_local\r\n[bj2-clickhouse-all-prod-06] 2020.05.23 09:11:01.943468 [ 21214 ] {67b0250c-c8ac-45f5-9291-3c6862ff0ed5} <Trace> InterpreterSelectQuery: WithMergeableState -> WithMergeableState\r\n[bj2-clickhouse-all-prod-06] 2020.05.23 09:11:01.943760 [ 21214 ] {67b0250c-c8ac-45f5-9291-3c6862ff0ed5} <Information> executeQuery: Read 1 rows, 4.01 KiB in 0.001 sec., 996 rows/sec., 3.90 MiB/sec.\r\n[bj2-clickhouse-all-prod-06] 2020.05.23 09:11:01.943787 [ 21214 ] {67b0250c-c8ac-45f5-9291-3c6862ff0ed5} <Debug> MemoryTracker: Peak memory usage (for query): 0.00 B.\r\n[bj2-clickhouse-all-prod-01] 2020.05.23 09:11:01.943968 [ 28378 ] {c9848987-a84f-47ba-a976-c81aa321e118} <Trace> Aggregator: Merging partially aggregated blocks (bucket = -1).\r\n[bj2-clickhouse-all-prod-01] 2020.05.23 09:11:01.944035 [ 28378 ] {c9848987-a84f-47ba-a976-c81aa321e118} <Trace> Aggregator: Merged partially aggregated blocks. 1 rows, 0.000 MiB. in 0.000 sec. (74233.539 rows/sec., 0.566 MiB/sec.)\r\n[bj2-clickhouse-all-prod-01] 2020.05.23 09:11:01.944297 [ 23342 ] {c9848987-a84f-47ba-a976-c81aa321e118} <Information> executeQuery: Read 3 rows, 12.02 KiB in 0.006 sec., 535 rows/sec., 2.10 MiB/sec.\r\n[bj2-clickhouse-all-prod-01] 2020.05.23 09:11:01.944339 [ 23342 ] {c9848987-a84f-47ba-a976-c81aa321e118} <Debug> MemoryTracker: Peak memory usage (for query): 0.00 B.\r\n```",
  "created_at": "2020-06-22T18:58:51Z",
  "modified_files": [
    "b/src/Core/SortDescription.cpp",
    "src/Core/SortDescription.h",
    "src/Core/ya.make",
    "b/src/Interpreters/AggregateDescription.cpp",
    "src/Interpreters/AggregateDescription.h",
    "src/Interpreters/Aggregator.cpp",
    "src/Interpreters/Aggregator.h",
    "src/Interpreters/InterpreterExplainQuery.cpp",
    "src/Interpreters/InterpreterSelectQuery.cpp",
    "src/Interpreters/ya.make",
    "src/Parsers/ASTExplainQuery.h",
    "b/src/Parsers/ParserExplainQuery.cpp",
    "b/src/Parsers/ParserExplainQuery.h",
    "src/Parsers/ParserQueryWithOutput.cpp",
    "src/Parsers/ParserQueryWithOutput.h",
    "src/Parsers/ya.make",
    "src/Processors/IProcessor.h",
    "src/Processors/QueryPipeline.cpp",
    "src/Processors/QueryPipeline.h",
    "src/Processors/QueryPlan/AddingDelayedSourceStep.cpp",
    "src/Processors/QueryPlan/AggregatingStep.cpp",
    "src/Processors/QueryPlan/AggregatingStep.h",
    "src/Processors/QueryPlan/ConvertingStep.cpp",
    "src/Processors/QueryPlan/ConvertingStep.h",
    "src/Processors/QueryPlan/CreatingSetsStep.cpp",
    "src/Processors/QueryPlan/CreatingSetsStep.h",
    "src/Processors/QueryPlan/DistinctStep.cpp",
    "src/Processors/QueryPlan/DistinctStep.h",
    "src/Processors/QueryPlan/ExpressionStep.cpp",
    "src/Processors/QueryPlan/ExpressionStep.h",
    "src/Processors/QueryPlan/FillingStep.cpp",
    "src/Processors/QueryPlan/FillingStep.h",
    "src/Processors/QueryPlan/FilterStep.cpp",
    "src/Processors/QueryPlan/FilterStep.h",
    "src/Processors/QueryPlan/FinishSortingStep.cpp",
    "src/Processors/QueryPlan/FinishSortingStep.h",
    "src/Processors/QueryPlan/IQueryPlanStep.cpp",
    "src/Processors/QueryPlan/IQueryPlanStep.h",
    "src/Processors/QueryPlan/ISourceStep.cpp",
    "src/Processors/QueryPlan/ISourceStep.h",
    "src/Processors/QueryPlan/ITransformingStep.cpp",
    "src/Processors/QueryPlan/ITransformingStep.h",
    "src/Processors/QueryPlan/LimitByStep.cpp",
    "src/Processors/QueryPlan/LimitByStep.h",
    "src/Processors/QueryPlan/LimitStep.cpp",
    "src/Processors/QueryPlan/LimitStep.h",
    "src/Processors/QueryPlan/MergeSortingStep.cpp",
    "src/Processors/QueryPlan/MergeSortingStep.h",
    "src/Processors/QueryPlan/MergingAggregatedStep.cpp",
    "src/Processors/QueryPlan/MergingAggregatedStep.h",
    "src/Processors/QueryPlan/MergingSortedStep.cpp",
    "src/Processors/QueryPlan/MergingSortedStep.h",
    "b/src/Processors/QueryPlan/OffsetStep.cpp",
    "b/src/Processors/QueryPlan/OffsetStep.h",
    "src/Processors/QueryPlan/PartialSortingStep.cpp",
    "src/Processors/QueryPlan/PartialSortingStep.h",
    "src/Processors/QueryPlan/QueryPlan.cpp",
    "src/Processors/QueryPlan/QueryPlan.h",
    "src/Processors/QueryPlan/ReadFromStorageStep.cpp",
    "src/Processors/QueryPlan/ReadFromStorageStep.h",
    "src/Processors/QueryPlan/TotalsHavingStep.cpp",
    "src/Processors/QueryPlan/TotalsHavingStep.h",
    "src/Processors/QueryPlan/UnionStep.cpp",
    "src/Processors/QueryPlan/UnionStep.h",
    "src/Processors/Transforms/ConvertingTransform.h",
    "b/src/Processors/printPipeline.cpp",
    "src/Processors/printPipeline.h",
    "src/Processors/ya.make"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/00597_push_down_predicate.reference",
    "tests/queries/0_stateless/00826_cross_to_inner_join.reference",
    "tests/queries/0_stateless/00849_multiple_comma_join.reference",
    "tests/queries/0_stateless/00849_multiple_comma_join_2.reference",
    "tests/queries/0_stateless/00908_analyze_query.reference",
    "tests/queries/0_stateless/01029_early_constant_folding.reference",
    "tests/queries/0_stateless/01056_predicate_optimizer_bugs.reference",
    "tests/queries/0_stateless/01076_predicate_optimizer_with_view.reference",
    "tests/queries/0_stateless/01083_cross_to_inner_with_like.reference",
    "tests/queries/0_stateless/01259_combinator_distinct.reference",
    "tests/queries/0_stateless/01271_optimize_arithmetic_operations_in_aggr_func.reference",
    "tests/queries/0_stateless/01300_group_by_other_keys.reference",
    "tests/queries/0_stateless/01300_group_by_other_keys_having.reference",
    "tests/queries/0_stateless/01305_duplicate_order_by_and_distinct.reference",
    "tests/queries/0_stateless/01321_aggregate_functions_of_group_by_keys.reference",
    "tests/queries/0_stateless/01322_any_input_optimize.reference",
    "tests/queries/0_stateless/01372_wrong_order_by_removal.reference"
  ]
}