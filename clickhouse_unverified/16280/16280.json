{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 16280,
  "instance_id": "ClickHouse__ClickHouse-16280",
  "issue_numbers": [
    "12123"
  ],
  "base_commit": "033525e27e0e12c7fd939089430b9419befeb7de",
  "patch": "diff --git a/programs/local/LocalServer.cpp b/programs/local/LocalServer.cpp\nindex 2d019f813675..636673078766 100644\n--- a/programs/local/LocalServer.cpp\n+++ b/programs/local/LocalServer.cpp\n@@ -37,6 +37,7 @@\n #include <boost/program_options.hpp>\n #include <common/argsToConfig.h>\n #include <Common/TerminalSize.h>\n+#include <Common/randomSeed.h>\n \n #include <filesystem>\n \n@@ -47,9 +48,9 @@ namespace DB\n namespace ErrorCodes\n {\n     extern const int BAD_ARGUMENTS;\n-    extern const int LOGICAL_ERROR;\n     extern const int SYNTAX_ERROR;\n     extern const int CANNOT_LOAD_CONFIG;\n+    extern const int FILE_ALREADY_EXISTS;\n }\n \n \n@@ -121,31 +122,43 @@ void LocalServer::tryInitPath()\n     }\n     else\n     {\n-        // Default unique path in the system temporary directory.\n-        const auto tmp = std::filesystem::temp_directory_path();\n-        const auto default_path = tmp\n-            / fmt::format(\"clickhouse-local-{}\", getpid());\n+        // The path is not provided explicitly - use a unique path in the system temporary directory\n+        // (or in the current dir if temporary don't exist)\n+        Poco::Logger * log = &logger();\n+        std::filesystem::path parent_folder;\n+        std::filesystem::path default_path;\n \n-        if (exists(default_path))\n+        try\n         {\n-            // This is a directory that is left by a previous run of\n-            // clickhouse-local that had the same pid and did not complete\n-            // correctly. Remove it, with an additional sanity check.\n-            if (!std::filesystem::equivalent(default_path.parent_path(), tmp))\n-            {\n-                throw Exception(ErrorCodes::LOGICAL_ERROR,\n-                    \"The temporary directory of clickhouse-local '{}' is not\"\n-                    \" inside the system temporary directory '{}'. Will not delete\"\n-                    \" it\", default_path.string(), tmp.string());\n-            }\n-\n-            remove_all(default_path);\n+            // try to guess a tmp folder name, and check if it's a directory (throw exception otherwise)\n+            parent_folder = std::filesystem::temp_directory_path();\n+\n         }\n+        catch (const std::filesystem::filesystem_error& e)\n+        {\n+            // tmp folder don't exists? misconfiguration? chroot?\n+            LOG_DEBUG(log, \"Can not get temporary folder: {}\", e.what());\n+            parent_folder = std::filesystem::current_path();\n+\n+            std::filesystem::is_directory(parent_folder); // that will throw an exception if it's not a directory\n+            LOG_DEBUG(log, \"Will create working directory inside current directory: {}\", parent_folder.string());\n+        }\n+\n+        /// we can have another clickhouse-local running simultaneously, even with the same PID (for ex. - several dockers mounting the same folder)\n+        /// or it can be some leftovers from other clickhouse-local runs\n+        /// as we can't accurately distinguish those situations we don't touch any existent folders\n+        /// we just try to pick some free name for our working folder\n+\n+        default_path = parent_folder / fmt::format(\"clickhouse-local-{}-{}-{}\", getpid(), time(nullptr), randomSeed());\n+\n+        if (exists(default_path))\n+            throw Exception(ErrorCodes::FILE_ALREADY_EXISTS, \"Unsuccessfull attempt to create working directory: {} exist!\", default_path.string());\n \n         create_directory(default_path);\n         temporary_directory_to_delete = default_path;\n \n         path = default_path.string();\n+        LOG_DEBUG(log, \"Working directory created: {}\", path);\n     }\n \n     if (path.back() != '/')\n@@ -438,23 +451,12 @@ void LocalServer::setupUsers()\n \n void LocalServer::cleanup()\n {\n-    // Delete the temporary directory if needed. Just in case, check that it is\n-    // in the system temporary directory, not to delete user data if there is a\n-    // bug.\n+    // Delete the temporary directory if needed.\n     if (temporary_directory_to_delete)\n     {\n-        const auto tmp = std::filesystem::temp_directory_path();\n         const auto dir = *temporary_directory_to_delete;\n         temporary_directory_to_delete.reset();\n-\n-        if (!std::filesystem::equivalent(dir.parent_path(), tmp))\n-        {\n-            throw Exception(ErrorCodes::LOGICAL_ERROR,\n-                \"The temporary directory of clickhouse-local '{}' is not inside\"\n-                \" the system temporary directory '{}'. Will not delete it\",\n-                dir.string(), tmp.string());\n-        }\n-\n+        LOG_DEBUG(&logger(), \"Removing temporary directory: {}\", dir.string());\n         remove_all(dir);\n     }\n }\ndiff --git a/src/Interpreters/Context.cpp b/src/Interpreters/Context.cpp\nindex 7f2ada8a4266..328e122fdb56 100644\n--- a/src/Interpreters/Context.cpp\n+++ b/src/Interpreters/Context.cpp\n@@ -2029,10 +2029,15 @@ void Context::reloadConfig() const\n \n void Context::shutdown()\n {\n-    for (auto & [disk_name, disk] : getDisksMap())\n+    // Disk selector might not be initialized if there was some error during\n+    // its initialization. Don't try to initialize it again on shutdown.\n+    if (shared->merge_tree_disk_selector)\n     {\n-        LOG_INFO(shared->log, \"Shutdown disk {}\", disk_name);\n-        disk->shutdown();\n+        for (auto & [disk_name, disk] : getDisksMap())\n+        {\n+            LOG_INFO(shared->log, \"Shutdown disk {}\", disk_name);\n+            disk->shutdown();\n+        }\n     }\n \n     shared->shutdown();\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01532_clickhouse_local_tmp_folder.reference b/tests/queries/0_stateless/01532_clickhouse_local_tmp_folder.reference\nnew file mode 100644\nindex 000000000000..d00491fd7e5b\n--- /dev/null\n+++ b/tests/queries/0_stateless/01532_clickhouse_local_tmp_folder.reference\n@@ -0,0 +1,1 @@\n+1\ndiff --git a/tests/queries/0_stateless/01532_clickhouse_local_tmp_folder.sh b/tests/queries/0_stateless/01532_clickhouse_local_tmp_folder.sh\nnew file mode 100755\nindex 000000000000..f341fbcdd9b4\n--- /dev/null\n+++ b/tests/queries/0_stateless/01532_clickhouse_local_tmp_folder.sh\n@@ -0,0 +1,8 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+. \"$CURDIR\"/../shell_config.sh\n+\n+# in case when clickhouse-local can't use temp folder it will try to create\n+# temporary subfolder in the current dir\n+TMP=/non-existent-folder-12123 ${CLICKHOUSE_LOCAL} -q 'SELECT 1'\n",
  "problem_statement": "clickhouse-local does not work if there is no /tmp directory\n```\r\n$ ls -lR\r\n\r\n.:\r\ntotal 1645932\r\n-rwxrwxr-x 1 milovidov milovidov 1685419984 \u0438\u044e\u043b  4 00:33 clickhouse\r\ndrwxrwxr-x 2 milovidov milovidov       4096 \u0438\u044e\u043b  4 00:36 lib\r\ndrwxrwxr-x 2 milovidov milovidov       4096 \u0438\u044e\u043b  4 00:36 lib64\r\n\r\n./lib:\r\ntotal 3536\r\n-rwxr-xr-x 1 milovidov milovidov 2025032 \u0438\u044e\u043b  4 00:36 libc.so.6\r\n-rw-r--r-- 1 milovidov milovidov   18816 \u0438\u044e\u043b  4 00:36 libdl.so.2\r\n-rw-r--r-- 1 milovidov milovidov 1369352 \u0438\u044e\u043b  4 00:36 libm.so.6\r\n-rwxr-xr-x 1 milovidov milovidov  158288 \u0438\u044e\u043b  4 00:36 libpthread.so.0\r\n-rw-r--r-- 1 milovidov milovidov   40040 \u0438\u044e\u043b  4 00:36 librt.so.1\r\n\r\n./lib64:\r\ntotal 184\r\n-rwxr-xr-x 1 milovidov milovidov 187376 \u0438\u044e\u043b  4 00:36 ld-linux-x86-64.so.2\r\n\r\n\r\n$ sudo chroot . /clickhouse local --query \"SELECT 1\"\r\nfilesystem error: in temp_directory_path: path \"/tmp\" is not a directory: Not a directory\r\n```\n",
  "hints_text": "CC @akuzm \nAnd without procfs neither:\r\n\r\n```\r\n$ mkdir tmp\r\n$ sudo chroot . /clickhouse local --query \"SELECT 1\"\r\nCode: 468, e.displayText() = DB::ErrnoException: Cannot pthread_getattr_np, errno: 2, strerror: No such file or directory (version 20.6.1.1)\r\n```\n```\r\n$ mkdir proc\r\n$ sudo mount --bind /proc proc\r\n$ sudo chroot . /clickhouse local --query \"SELECT 1\"\r\n1\r\n```\r\n\r\nclickhouse-client fails with a cryptic error message:\r\n\r\n```\r\n$ sudo chroot . /clickhouse client\r\nClickHouse client version 20.6.1.1.\r\nConnecting to localhost:9000 as user default.\r\nPoco::Exception. Code: 1000, e.code() = 0, e.displayText() = I/O error: -1 (version 20.6.1.1)\r\n```\nBecause it cannot open a shared library for DNS lookup (part of glibc loaded at runtime).\nThe commands \r\n`cat /proc/$(pidof clickhouse-server)/maps`\r\n`sudo lsof -p $(pidof clickhouse-server)`\r\ncan show what kind of things are used from the system.\nThe command\r\n`sudo strace -f chroot . /clickhouse client`\r\nwill show us what is missing...\n```\r\n$ cp /lib/x86_64-linux-gnu/libnss_dns.so.2 lib\r\n$ cp /lib/x86_64-linux-gnu/libresolv.so.2 lib\r\n\r\n$ mkdir etc\r\n$ cp /etc/resolv.conf ./etc\r\n\r\n$ sudo chroot . /clickhouse client\r\nPoco::Exception. Code: 1000, e.code() = 2, e.displayText() = File not found: /root/.clickhouse-client-history (version 20.6.1.1)\r\n```\n```\r\n$ mkdir root\r\n\r\n$ sudo chroot . /clickhouse client\r\nClickHouse client version 20.6.1.1.\r\nConnecting to localhost:9000 as user default.\r\nConnected to ClickHouse server version 20.6.1 revision 54436.\r\n\r\nmilovidov-desktop :) SELECT 1\r\n\r\nSELECT 1\r\n\r\n\u250c\u25001\u2500\u2510\r\n\u2502 1 \u2502\r\n\u2514\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 0.002 sec. \r\n\r\nmilovidov-desktop :) Bye.\r\n```\nAfter these steps, clickhouse-server and clickhouse-client work successfully in chroot.\nPOSIX retains `/tmp` for compatibility, but encourages applications to use `TMPDIR` variable: https://pubs.opengroup.org/onlinepubs/9699919799/xrat/V4_xbd_chap10.html\r\n\r\nWe use `std::filesystem::temp_directory_path` which accounts for this and other variables: https://en.cppreference.com/w/cpp/filesystem/temp_directory_path\r\n\r\nIf there is `/tmp` and no temporary directory variable, it's going to fail, but I think we don't have to do anything about this. Maybe add lazy tmp dir creation, and also default to the current directory, but this is too much code.\nMaybe just check for existence of tmp directory with fallback to current directory.\nTest:\r\n```\r\nTMP=/non-existent-asdfasdkfhk clickhouse-local -q 'SELECT 1'\r\n```",
  "created_at": "2020-10-23T10:03:03Z"
}