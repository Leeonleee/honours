diff --git a/src/Interpreters/IdentifierSemantic.cpp b/src/Interpreters/IdentifierSemantic.cpp
index a1fc533eb7fa..81bd499ea2e7 100644
--- a/src/Interpreters/IdentifierSemantic.cpp
+++ b/src/Interpreters/IdentifierSemantic.cpp
@@ -209,7 +209,7 @@ IdentifierSemantic::ColumnMatch IdentifierSemantic::canReferColumnToTable(const
     return canReferColumnToTable(identifier, table_with_columns.table);
 }
 
-/// Strip qualificators from left side of column name.
+/// Strip qualifications from left side of column name.
 /// Example: 'database.table.name' -> 'name'.
 void IdentifierSemantic::setColumnShortName(ASTIdentifier & identifier, const DatabaseAndTableWithAlias & db_and_table)
 {
diff --git a/src/Interpreters/PredicateExpressionsOptimizer.cpp b/src/Interpreters/PredicateExpressionsOptimizer.cpp
index 00b47be408aa..476bdaaceea7 100644
--- a/src/Interpreters/PredicateExpressionsOptimizer.cpp
+++ b/src/Interpreters/PredicateExpressionsOptimizer.cpp
@@ -146,7 +146,7 @@ bool PredicateExpressionsOptimizer::tryRewritePredicatesToTables(ASTs & tables_e
                 break;  /// Skip left and right table optimization
 
             is_rewrite_tables |= tryRewritePredicatesToTable(tables_element[table_pos], tables_predicates[table_pos],
-                tables_with_columns[table_pos].columns.getNames());
+                tables_with_columns[table_pos]);
 
             if (table_element->table_join && isRight(table_element->table_join->as<ASTTableJoin>()->kind))
                 break;  /// Skip left table optimization
@@ -156,13 +156,13 @@ bool PredicateExpressionsOptimizer::tryRewritePredicatesToTables(ASTs & tables_e
     return is_rewrite_tables;
 }
 
-bool PredicateExpressionsOptimizer::tryRewritePredicatesToTable(ASTPtr & table_element, const ASTs & table_predicates, Names && table_columns) const
+bool PredicateExpressionsOptimizer::tryRewritePredicatesToTable(ASTPtr & table_element, const ASTs & table_predicates, const TableWithColumnNamesAndTypes & table_columns) const
 {
     if (!table_predicates.empty())
     {
         auto optimize_final = enable_optimize_predicate_expression_to_final_subquery;
         auto optimize_with = allow_push_predicate_when_subquery_contains_with;
-        PredicateRewriteVisitor::Data data(context, table_predicates, std::move(table_columns), optimize_final, optimize_with);
+        PredicateRewriteVisitor::Data data(context, table_predicates, table_columns, optimize_final, optimize_with);
 
         PredicateRewriteVisitor(data).visit(table_element);
         return data.is_rewrite;
diff --git a/src/Interpreters/PredicateExpressionsOptimizer.h b/src/Interpreters/PredicateExpressionsOptimizer.h
index 8cceda931641..223ac1e89988 100644
--- a/src/Interpreters/PredicateExpressionsOptimizer.h
+++ b/src/Interpreters/PredicateExpressionsOptimizer.h
@@ -33,7 +33,8 @@ class PredicateExpressionsOptimizer
 
     bool tryRewritePredicatesToTables(ASTs & tables_element, const std::vector<ASTs> & tables_predicates);
 
-    bool tryRewritePredicatesToTable(ASTPtr & table_element, const ASTs & table_predicates, Names && table_columns) const;
+    bool tryRewritePredicatesToTable(
+        ASTPtr & table_element, const ASTs & table_predicates, const TableWithColumnNamesAndTypes & table_columns) const;
 
     bool tryMovePredicatesFromHavingToWhere(ASTSelectQuery & select_query);
 };
diff --git a/src/Interpreters/PredicateRewriteVisitor.cpp b/src/Interpreters/PredicateRewriteVisitor.cpp
index 9e6d5543f2f2..6f28b9050df1 100644
--- a/src/Interpreters/PredicateRewriteVisitor.cpp
+++ b/src/Interpreters/PredicateRewriteVisitor.cpp
@@ -17,8 +17,8 @@ namespace DB
 {
 
 PredicateRewriteVisitorData::PredicateRewriteVisitorData(
-    const Context & context_, const ASTs & predicates_, Names && column_names_, bool optimize_final_, bool optimize_with_)
-    : context(context_), predicates(predicates_), column_names(column_names_), optimize_final(optimize_final_), optimize_with(optimize_with_)
+    const Context & context_, const ASTs & predicates_, const TableWithColumnNamesAndTypes & table_columns_, bool optimize_final_, bool optimize_with_)
+    : context(context_), predicates(predicates_), table_columns(table_columns_), optimize_final(optimize_final_), optimize_with(optimize_with_)
 {
 }
 
@@ -42,7 +42,8 @@ void PredicateRewriteVisitorData::visit(ASTSelectWithUnionQuery & union_select_q
 
 void PredicateRewriteVisitorData::visitFirstInternalSelect(ASTSelectQuery & select_query, ASTPtr &)
 {
-    is_rewrite |= rewriteSubquery(select_query, column_names, column_names);
+    /// In this case inner_columns same as outer_columns from table_columns
+    is_rewrite |= rewriteSubquery(select_query, table_columns.columns.getNames());
 }
 
 void PredicateRewriteVisitorData::visitOtherInternalSelect(ASTSelectQuery & select_query, ASTPtr &)
@@ -65,7 +66,7 @@ void PredicateRewriteVisitorData::visitOtherInternalSelect(ASTSelectQuery & sele
     const Names & internal_columns = InterpreterSelectQuery(
         temp_internal_select, context, SelectQueryOptions().analyze()).getSampleBlock().getNames();
 
-    if (rewriteSubquery(*temp_select_query, column_names, internal_columns))
+    if (rewriteSubquery(*temp_select_query, internal_columns))
     {
         is_rewrite |= true;
         select_query.setExpression(ASTSelectQuery::Expression::SELECT, std::move(temp_select_query->refSelect()));
@@ -89,7 +90,7 @@ static void cleanAliasAndCollectIdentifiers(ASTPtr & predicate, std::vector<ASTI
         identifiers.emplace_back(identifier);
 }
 
-bool PredicateRewriteVisitorData::rewriteSubquery(ASTSelectQuery & subquery, const Names & outer_columns, const Names & inner_columns)
+bool PredicateRewriteVisitorData::rewriteSubquery(ASTSelectQuery & subquery, const Names & inner_columns)
 {
     if ((!optimize_final && subquery.final())
         || (!optimize_with && subquery.with())
@@ -98,6 +99,7 @@ bool PredicateRewriteVisitorData::rewriteSubquery(ASTSelectQuery & subquery, con
         || hasNonRewritableFunction(subquery.select(), context))
         return false;
 
+    Names outer_columns = table_columns.columns.getNames();
     for (const auto & predicate : predicates)
     {
         std::vector<ASTIdentifier *> identifiers;
@@ -106,13 +108,16 @@ bool PredicateRewriteVisitorData::rewriteSubquery(ASTSelectQuery & subquery, con
 
         for (const auto & identifier : identifiers)
         {
-            const auto & column_name = identifier->shortName();
-            const auto & outer_column_iterator = std::find(outer_columns.begin(), outer_columns.end(), column_name);
+            IdentifierSemantic::setColumnShortName(*identifier, table_columns.table);
+            const auto & column_name = identifier->name();
 
             /// For lambda functions, we can't always find them in the list of columns
             /// For example: SELECT * FROM system.one WHERE arrayMap(x -> x, [dummy]) = [0]
+            const auto & outer_column_iterator = std::find(outer_columns.begin(), outer_columns.end(), column_name);
             if (outer_column_iterator != outer_columns.end())
+            {
                 identifier->setShortName(inner_columns[outer_column_iterator - outer_columns.begin()]);
+            }
         }
 
         /// We only need to push all the predicates to subquery having
diff --git a/src/Interpreters/PredicateRewriteVisitor.h b/src/Interpreters/PredicateRewriteVisitor.h
index 02c8b9ca422c..1132d93a5ec1 100644
--- a/src/Interpreters/PredicateRewriteVisitor.h
+++ b/src/Interpreters/PredicateRewriteVisitor.h
@@ -4,6 +4,7 @@
 #include <Parsers/ASTSelectQuery.h>
 #include <Parsers/ASTSelectWithUnionQuery.h>
 #include <Interpreters/InDepthNodeVisitor.h>
+#include <Interpreters/DatabaseAndTableWithAlias.h>
 
 namespace DB
 {
@@ -24,12 +25,13 @@ class PredicateRewriteVisitorData
         return true;
     }
 
-    PredicateRewriteVisitorData(const Context & context_, const ASTs & predicates_, Names && column_names_, bool optimize_final_, bool optimize_with_);
+    PredicateRewriteVisitorData(const Context & context_, const ASTs & predicates_,
+                                const TableWithColumnNamesAndTypes & table_columns_, bool optimize_final_, bool optimize_with_);
 
 private:
     const Context & context;
     const ASTs & predicates;
-    const Names column_names;
+    const TableWithColumnNamesAndTypes & table_columns;
     bool optimize_final;
     bool optimize_with;
 
@@ -37,7 +39,7 @@ class PredicateRewriteVisitorData
 
     void visitOtherInternalSelect(ASTSelectQuery & select_query, ASTPtr &);
 
-    bool rewriteSubquery(ASTSelectQuery & subquery, const Names & outer_columns, const Names & inner_columns);
+    bool rewriteSubquery(ASTSelectQuery & subquery, const Names & inner_columns);
 };
 
 using PredicateRewriteMatcher = OneTypeMatcher<PredicateRewriteVisitorData, PredicateRewriteVisitorData::needChild>;
