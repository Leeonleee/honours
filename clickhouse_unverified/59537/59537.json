{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 59537,
  "instance_id": "ClickHouse__ClickHouse-59537",
  "issue_numbers": [
    "58437"
  ],
  "base_commit": "5d20de7b52c221955c215180d0b22bc8f197f14b",
  "patch": "diff --git a/src/Processors/Transforms/AggregatingTransform.cpp b/src/Processors/Transforms/AggregatingTransform.cpp\nindex 2fd9f1021591..74da97f21990 100644\n--- a/src/Processors/Transforms/AggregatingTransform.cpp\n+++ b/src/Processors/Transforms/AggregatingTransform.cpp\n@@ -600,6 +600,12 @@ IProcessor::Status AggregatingTransform::prepare()\n         if (is_consume_finished)\n         {\n             output.finish();\n+            /// input.isFinished() means that merging is done. Now we can release our reference to aggregation states.\n+            /// TODO: there is another case, when output port is getting closed first.\n+            /// E.g. `select ... group by x limit 10`, if it was two-level aggregation and first few buckets contained already enough rows\n+            /// limit will stop merging. It turned out to be not trivial to both release aggregation states and ensure that\n+            /// ManyAggregatedData holds the last references to them to trigger parallel destruction in its dtor. Will work on that.\n+            many_data.reset();\n             return Status::Finished;\n         }\n         else\n@@ -828,8 +834,6 @@ void AggregatingTransform::initGenerate()\n \n         processors = Pipe::detachProcessors(std::move(pipe));\n     }\n-\n-    many_data.reset();\n }\n \n }\ndiff --git a/src/Processors/Transforms/AggregatingTransform.h b/src/Processors/Transforms/AggregatingTransform.h\nindex e05528afdc73..e167acde0675 100644\n--- a/src/Processors/Transforms/AggregatingTransform.h\n+++ b/src/Processors/Transforms/AggregatingTransform.h\n@@ -71,16 +71,12 @@ struct AggregatingTransformParams\n struct ManyAggregatedData\n {\n     ManyAggregatedDataVariants variants;\n-    std::vector<std::unique_ptr<std::mutex>> mutexes;\n     std::atomic<UInt32> num_finished = 0;\n \n-    explicit ManyAggregatedData(size_t num_threads = 0) : variants(num_threads), mutexes(num_threads)\n+    explicit ManyAggregatedData(size_t num_threads = 0) : variants(num_threads)\n     {\n         for (auto & elem : variants)\n             elem = std::make_shared<AggregatedDataVariants>();\n-\n-        for (auto & mut : mutexes)\n-            mut = std::make_unique<std::mutex>();\n     }\n \n     ~ManyAggregatedData()\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02982_aggregation_states_destruction.reference b/tests/queries/0_stateless/02982_aggregation_states_destruction.reference\nnew file mode 100644\nindex 000000000000..d00491fd7e5b\n--- /dev/null\n+++ b/tests/queries/0_stateless/02982_aggregation_states_destruction.reference\n@@ -0,0 +1,1 @@\n+1\ndiff --git a/tests/queries/0_stateless/02982_aggregation_states_destruction.sh b/tests/queries/0_stateless/02982_aggregation_states_destruction.sh\nnew file mode 100755\nindex 000000000000..1c72cf2b8c10\n--- /dev/null\n+++ b/tests/queries/0_stateless/02982_aggregation_states_destruction.sh\n@@ -0,0 +1,14 @@\n+#!/usr/bin/env bash\n+# Tags: no-random-settings\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+\n+query_id=\"02982_$RANDOM\"\n+$CLICKHOUSE_CLIENT --query_id $query_id --log_query_threads 1 --query=\"select number, uniq(number) from numbers_mt(1e7) group by number limit 100 format Null;\"\n+\n+$CLICKHOUSE_CLIENT -q \"system flush logs;\"\n+\n+$CLICKHOUSE_CLIENT -q \"select count() > 1 from system.query_thread_log where query_id = '$query_id' and current_database = currentDatabase() and thread_name = 'AggregDestruct';\"\n",
  "problem_statement": "Data race in `AggregatedDataVariants`\nhttps://s3.amazonaws.com/clickhouse-test-reports/58350/d3d5976d3e93a9fa7f14462ce84a1136e3437fee/stress_test__tsan_.html\r\n\r\n```\r\nWARNING: ThreadSanitizer: data race (pid=2961)\r\n  Read of size 8 at 0x7bb402d5bd58 by thread T1260:\r\n    #0 HashTable<unsigned long, HashMapCell<unsigned long, char*, HashCRC32<unsigned long>, HashTableNoState, PairNoInit<unsigned long, char*>>, HashCRC32<unsigned long>, TwoLevelHashTableGrower<8ul>, Allocator<true, true>>::size() const build_docker/./src/Common/HashTable/HashTable.h:1374:16 (clickhouse+0x17b06ac5) (BuildId: 8c3976ccfb5306aea92cfbe504c44be74bccbdd4)\r\n    #1 TwoLevelHashTable<unsigned long, HashMapCell<unsigned long, char*, HashCRC32<unsigned long>, HashTableNoState, PairNoInit<unsigned long, char*>>, HashCRC32<unsigned long>, TwoLevelHashTableGrower<8ul>, Allocator<true, true>, HashMapTable<unsigned long, HashMapCell<unsigned long, char*, HashCRC32<unsigned long>, HashTableNoState, PairNoInit<unsigned long, char*>>, HashCRC32<unsigned long>, TwoLevelHashTableGrower<8ul>, Allocator<true, true>>, 8ul>::size() const build_docker/./src/Common/HashTable/TwoLevelHashTable.h:326:29 (clickhouse+0x17b06ac5)\r\n    #2 DB::AggregatedDataVariants::size() const build_docker/./src/Interpreters/Aggregator.h:800:13 (clickhouse+0x17b06ac5)\r\n    #3 DB::ManyAggregatedData::~ManyAggregatedData() build_docker/./src/Processors/Transforms/AggregatingTransform.h:104:30 (clickhouse+0x19b1dd1d) (BuildId: 8c3976ccfb5306aea92cfbe504c44be74bccbdd4)\r\n    #4 void std::__1::__destroy_at[abi:v15000]<DB::ManyAggregatedData, 0>(DB::ManyAggregatedData*) build_docker/./contrib/llvm-project/libcxx/include/__memory/construct_at.h:63:13 (clickhouse+0x19b1d67d) (BuildId: 8c3976ccfb5306aea92cfbe504c44be74bccbdd4)\r\n    #5 void std::__1::destroy_at[abi:v15000]<DB::ManyAggregatedData, 0>(DB::ManyAggregatedData*) build_docker/./contrib/llvm-project/libcxx/include/__memory/construct_at.h:88:5 (clickhouse+0x19b1d67d)\r\n    #6 void std::__1::allocator_traits<std::__1::allocator<DB::ManyAggregatedData>>::destroy[abi:v15000]<DB::ManyAggregatedData, void, void>(std::__1::allocator<DB::ManyAggregatedData>&, DB::ManyAggregatedData*) build_docker/./contrib/llvm-project/libcxx/include/__memory/allocator_traits.h:317:9 (clickhouse+0x19b1d67d)\r\n    #7 std::__1::__shared_ptr_emplace<DB::ManyAggregatedData, std::__1::allocator<DB::ManyAggregatedData>>::__on_zero_shared() build_docker/./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:309:9 (clickhouse+0x19b1d67d)\r\n    #8 std::__1::__shared_count::__release_shared[abi:v15000]() build_docker/./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:174:9 (clickhouse+0x1a5208b5) (BuildId: 8c3976ccfb5306aea92cfbe504c44be74bccbdd4)\r\n    #9 std::__1::__shared_weak_count::__release_shared[abi:v15000]() build_docker/./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:215:27 (clickhouse+0x1a5208b5)\r\n    #10 std::__1::shared_ptr<DB::ManyAggregatedData>::~shared_ptr[abi:v15000]() build_docker/./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:702:23 (clickhouse+0x1a5208b5)\r\n    #11 std::__1::shared_ptr<DB::ManyAggregatedData>::reset[abi:v15000]() build_docker/./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:768:9 (clickhouse+0x1a5208b5)\r\n    #12 DB::AggregatingTransform::initGenerate() build_docker/./src/Processors/Transforms/AggregatingTransform.cpp (clickhouse+0x1a5208b5)\r\n    #13 DB::AggregatingTransform::work() build_docker/./src/Processors/Transforms/AggregatingTransform.cpp:638:9 (clickhouse+0x1a51cdb7) (BuildId: 8c3976ccfb5306aea92cfbe504c44be74bccbdd4)\r\n    #14 DB::executeJob(DB::ExecutingGraph::Node*, DB::ReadProgressCallback*) build_docker/./src/Processors/Executors/ExecutionThreadContext.cpp:47:26 (clickhouse+0x1a1940d4) (BuildId: 8c3976ccfb5306aea92cfbe504c44be74bccbdd4)\r\n    #15 DB::ExecutionThreadContext::executeTask() build_docker/./src/Processors/Executors/ExecutionThreadContext.cpp:95:9 (clickhouse+0x1a1940d4)\r\n    #16 DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*) build_docker/./src/Processors/Executors/PipelineExecutor.cpp:273:26 (clickhouse+0x1a187290) (BuildId: 8c3976ccfb5306aea92cfbe504c44be74bccbdd4)\r\n    #17 DB::PipelineExecutor::executeSingleThread(unsigned long) build_docker/./src/Processors/Executors/PipelineExecutor.cpp:239:5 (clickhouse+0x1a187290)\r\n    #18 DB::PipelineExecutor::spawnThreads()::$_0::operator()() const build_docker/./src/Processors/Executors/PipelineExecutor.cpp:373:17 (clickhouse+0x1a187d70) (BuildId: 8c3976ccfb5306aea92cfbe504c44be74bccbdd4)\r\n    #19 decltype(std::declval<DB::PipelineExecutor::spawnThreads()::$_0&>()()) std::__1::__invoke[abi:v15000]<DB::PipelineExecutor::spawnThreads()::$_0&>(DB::PipelineExecutor::spawnThreads()::$_0&) build_docker/./contrib/llvm-project/libcxx/include/__functional/invoke.h:394:23 (clickhouse+0x1a187d70)\r\n    #20 void std::__1::__invoke_void_return_wrapper<void, true>::__call<DB::PipelineExecutor::spawnThreads()::$_0&>(DB::PipelineExecutor::spawnThreads()::$_0&) build_docker/./contrib/llvm-project/libcxx/include/__functional/invoke.h:479:9 (clickhouse+0x1a187d70)\r\n    #21 std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads()::$_0, void ()>::operator()[abi:v15000]() build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:235:12 (clickhouse+0x1a187d70)\r\n    #22 void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads()::$_0, void ()>>(std::__1::__function::__policy_storage const*) build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:716:16 (clickhouse+0x1a187d70)\r\n    #23 std::__1::__function::__policy_func<void ()>::operator()[abi:v15000]() const build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:848:16 (clickhouse+0xf605cee) (BuildId: 8c3976ccfb5306aea92cfbe504c44be74bccbdd4)\r\n    #24 std::__1::function<void ()>::operator()() const build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:1187:12 (clickhouse+0xf605cee)\r\n    #25 ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::worker(std::__1::__list_iterator<ThreadFromGlobalPoolImpl<false>, void*>) build_docker/./src/Common/ThreadPool.cpp:455:13 (clickhouse+0xf605cee)\r\n    #26 void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()::operator()() const build_docker/./src/Common/ThreadPool.cpp:217:73 (clickhouse+0xf60a0bc) (BuildId: 8c3976ccfb5306aea92cfbe504c44be74bccbdd4)\r\n    #27 decltype(std::declval<void>()()) std::__1::__invoke[abi:v15000]<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()&>(void&&) build_docker/./contrib/llvm-project/libcxx/include/__functional/invoke.h:394:23 (clickhouse+0xf60a0bc)\r\n    #28 decltype(auto) std::__1::__apply_tuple_impl[abi:v15000]<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()&, std::__1::tuple<>&>(void&&, std::__1::tuple<>&, std::__1::__tuple_indices<>) build_docker/./contrib/llvm-project/libcxx/include/tuple:1789:1 (clickhouse+0xf60a0bc)\r\n    #29 decltype(auto) std::__1::apply[abi:v15000]<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()&, std::__1::tuple<>&>(void&&, std::__1::tuple<>&) build_docker/./contrib/llvm-project/libcxx/include/tuple:1798:1 (clickhouse+0xf60a0bc)\r\n    #30 ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'()::operator()() build_docker/./src/Common/ThreadPool.h:223:13 (clickhouse+0xf60a0bc)\r\n    #31 decltype(std::declval<void>()()) std::__1::__invoke[abi:v15000]<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'()&>(void&&) build_docker/./contrib/llvm-project/libcxx/include/__functional/invoke.h:394:23 (clickhouse+0xf60a021) (BuildId: 8c3976ccfb5306aea92cfbe504c44be74bccbdd4)\r\n    #32 void std::__1::__invoke_void_return_wrapper<void, true>::__call<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'()&>(ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'()&) build_docker/./contrib/llvm-project/libcxx/include/__functional/invoke.h:479:9 (clickhouse+0xf60a021)\r\n    #33 std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'(), void ()>::operator()[abi:v15000]() build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:235:12 (clickhouse+0xf60a021)\r\n    #34 void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'(), void ()>>(std::__1::__function::__policy_storage const*) build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:716:16 (clickhouse+0xf60a021)\r\n    #35 std::__1::__function::__policy_func<void ()>::operator()[abi:v15000]() const build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:848:16 (clickhouse+0xf601fce) (BuildId: 8c3976ccfb5306aea92cfbe504c44be74bccbdd4)\r\n    #36 std::__1::function<void ()>::operator()() const build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:1187:12 (clickhouse+0xf601fce)\r\n    #37 ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) build_docker/./src/Common/ThreadPool.cpp:455:13 (clickhouse+0xf601fce)\r\n    #38 void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()::operator()() const build_docker/./src/Common/ThreadPool.cpp:217:73 (clickhouse+0xf607e91) (BuildId: 8c3976ccfb5306aea92cfbe504c44be74bccbdd4)\r\n    #39 decltype(std::declval<void>()()) std::__1::__invoke[abi:v15000]<void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&) build_docker/./contrib/llvm-project/libcxx/include/__functional/invoke.h:394:23 (clickhouse+0xf607e91)\r\n    #40 void std::__1::__thread_execute[abi:v15000]<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(std::__1::tuple<void, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>&, std::__1::__tuple_indices<>) build_docker/./contrib/llvm-project/libcxx/include/thread:284:5 (clickhouse+0xf607e91)\r\n    #41 void* std::__1::__thread_proxy[abi:v15000]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>>(void*) build_docker/./contrib/llvm-project/libcxx/include/thread:295:5 (clickhouse+0xf607e91)\r\n\r\n  Previous write of size 8 at 0x7bb402d5bd58 by thread T1631:\r\n    #0 HashTable<unsigned long, HashMapCell<unsigned long, char*, HashCRC32<unsigned long>, HashTableNoState, PairNoInit<unsigned long, char*>>, HashCRC32<unsigned long>, TwoLevelHashTableGrower<8ul>, Allocator<true, true>>::clearAndShrink() build_docker/./src/Common/HashTable/HashTable.h:1395:16 (clickhouse+0x17ed6643) (BuildId: 8c3976ccfb5306aea92cfbe504c44be74bccbdd4)\r\n    #1 std::__1::conditional<true, DB::Block, std::__1::list<DB::Block, std::__1::allocator<DB::Block>>>::type DB::Aggregator::convertToBlockImpl<true, DB::AggregationMethodOneNumber<unsigned long, TwoLevelHashMapTable<unsigned long, HashMapCell<unsigned long, char*, HashCRC32<unsigned long>, HashTableNoState, PairNoInit<unsigned long, char*>>, HashCRC32<unsigned long>, TwoLevelHashTableGrower<8ul>, Allocator<true, true>, HashMapTable>, true, false>, HashMapTable<unsigned long, HashMapCell<unsigned long, char*, HashCRC32<unsigned long>, HashTableNoState, PairNoInit<unsigned long, char*>>, HashCRC32<unsigned long>, TwoLevelHashTableGrower<8ul>, Allocator<true, true>>>(DB::AggregationMethodOneNumber<unsigned long, TwoLevelHashMapTable<unsigned long, HashMapCell<unsigned long, char*, HashCRC32<unsigned long>, HashTableNoState, PairNoInit<unsigned long, char*>>, HashCRC32<unsigned long>, TwoLevelHashTableGrower<8ul>, Allocator<true, true>, HashMapTable>, true, false>&, HashMapTable<unsigned long, HashMapCell<unsigned long, char*, HashCRC32<unsigned long>, HashTableNoState, PairNoInit<unsigned long, char*>>, HashCRC32<unsigned long>, TwoLevelHashTableGrower<8ul>, Allocator<true, true>>&, DB::Arena*, std::__1::vector<std::__1::shared_ptr<DB::Arena>, std::__1::allocator<std::__1::shared_ptr<DB::Arena>>>&, bool, unsigned long) const build_docker/./src/Interpreters/Aggregator.cpp:1970:10 (clickhouse+0x17ed6643)\r\n    #2 DB::Block DB::Aggregator::convertOneBucketToBlock<DB::AggregationMethodOneNumber<unsigned long, TwoLevelHashMapTable<unsigned long, HashMapCell<unsigned long, char*, HashCRC32<unsigned long>, HashTableNoState, PairNoInit<unsigned long, char*>>, HashCRC32<unsigned long>, TwoLevelHashTableGrower<8ul>, Allocator<true, true>, HashMapTable>, true, false>>(DB::AggregatedDataVariants&, DB::AggregationMethodOneNumber<unsigned long, TwoLevelHashMapTable<unsigned long, HashMapCell<unsigned long, char*, HashCRC32<unsigned long>, HashTableNoState, PairNoInit<unsigned long, char*>>, HashCRC32<unsigned long>, TwoLevelHashTableGrower<8ul>, Allocator<true, true>, HashMapTable>, true, false>&, DB::Arena*, bool, int) const build_docker/./src/Interpreters/Aggregator.cpp:1817:19 (clickhouse+0x17a1ede8) (BuildId: 8c3976ccfb5306aea92cfbe504c44be74bccbdd4)\r\n    #3 DB::Aggregator::mergeAndConvertOneBucketToBlock(std::__1::vector<std::__1::shared_ptr<DB::AggregatedDataVariants>, std::__1::allocator<std::__1::shared_ptr<DB::AggregatedDataVariants>>>&, DB::Arena*, bool, int, std::__1::atomic<bool>*) const build_docker/./src/Interpreters/Aggregator.cpp:1845:5 (clickhouse+0x17a1ede8)\r\n    #4 DB::ConvertingAggregatedToChunksWithMergingSource::generate() build_docker/./src/Processors/Transforms/AggregatingTransform.cpp:132:42 (clickhouse+0x1a52cf74) (BuildId: 8c3976ccfb5306aea92cfbe504c44be74bccbdd4)\r\n    #5 DB::ISource::tryGenerate() build_docker/./src/Processors/ISource.cpp:139:18 (clickhouse+0x1a16f8f4) (BuildId: 8c3976ccfb5306aea92cfbe504c44be74bccbdd4)\r\n    #6 DB::ISource::work() build_docker/./src/Processors/ISource.cpp:108:26 (clickhouse+0x1a16f32a) (BuildId: 8c3976ccfb5306aea92cfbe504c44be74bccbdd4)\r\n    #7 DB::executeJob(DB::ExecutingGraph::Node*, DB::ReadProgressCallback*) build_docker/./src/Processors/Executors/ExecutionThreadContext.cpp:47:26 (clickhouse+0x1a1940d4) (BuildId: 8c3976ccfb5306aea92cfbe504c44be74bccbdd4)\r\n    #8 DB::ExecutionThreadContext::executeTask() build_docker/./src/Processors/Executors/ExecutionThreadContext.cpp:95:9 (clickhouse+0x1a1940d4)\r\n    #9 DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*) build_docker/./src/Processors/Executors/PipelineExecutor.cpp:273:26 (clickhouse+0x1a187290) (BuildId: 8c3976ccfb5306aea92cfbe504c44be74bccbdd4)\r\n    #10 DB::PipelineExecutor::executeSingleThread(unsigned long) build_docker/./src/Processors/Executors/PipelineExecutor.cpp:239:5 (clickhouse+0x1a187290)\r\n    #11 DB::PipelineExecutor::spawnThreads()::$_0::operator()() const build_docker/./src/Processors/Executors/PipelineExecutor.cpp:373:17 (clickhouse+0x1a187d70) (BuildId: 8c3976ccfb5306aea92cfbe504c44be74bccbdd4)\r\n    #12 decltype(std::declval<DB::PipelineExecutor::spawnThreads()::$_0&>()()) std::__1::__invoke[abi:v15000]<DB::PipelineExecutor::spawnThreads()::$_0&>(DB::PipelineExecutor::spawnThreads()::$_0&) build_docker/./contrib/llvm-project/libcxx/include/__functional/invoke.h:394:23 (clickhouse+0x1a187d70)\r\n    #13 void std::__1::__invoke_void_return_wrapper<void, true>::__call<DB::PipelineExecutor::spawnThreads()::$_0&>(DB::PipelineExecutor::spawnThreads()::$_0&) build_docker/./contrib/llvm-project/libcxx/include/__functional/invoke.h:479:9 (clickhouse+0x1a187d70)\r\n    #14 std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads()::$_0, void ()>::operator()[abi:v15000]() build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:235:12 (clickhouse+0x1a187d70)\r\n    #15 void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads()::$_0, void ()>>(std::__1::__function::__policy_storage const*) build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:716:16 (clickhouse+0x1a187d70)\r\n    #16 std::__1::__function::__policy_func<void ()>::operator()[abi:v15000]() const build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:848:16 (clickhouse+0xf605cee) (BuildId: 8c3976ccfb5306aea92cfbe504c44be74bccbdd4)\r\n    #17 std::__1::function<void ()>::operator()() const build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:1187:12 (clickhouse+0xf605cee)\r\n    #18 ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::worker(std::__1::__list_iterator<ThreadFromGlobalPoolImpl<false>, void*>) build_docker/./src/Common/ThreadPool.cpp:455:13 (clickhouse+0xf605cee)\r\n    #19 void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()::operator()() const build_docker/./src/Common/ThreadPool.cpp:217:73 (clickhouse+0xf60a0bc) (BuildId: 8c3976ccfb5306aea92cfbe504c44be74bccbdd4)\r\n    #20 decltype(std::declval<void>()()) std::__1::__invoke[abi:v15000]<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()&>(void&&) build_docker/./contrib/llvm-project/libcxx/include/__functional/invoke.h:394:23 (clickhouse+0xf60a0bc)\r\n    #21 decltype(auto) std::__1::__apply_tuple_impl[abi:v15000]<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()&, std::__1::tuple<>&>(void&&, std::__1::tuple<>&, std::__1::__tuple_indices<>) build_docker/./contrib/llvm-project/libcxx/include/tuple:1789:1 (clickhouse+0xf60a0bc)\r\n    #22 decltype(auto) std::__1::apply[abi:v15000]<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()&, std::__1::tuple<>&>(void&&, std::__1::tuple<>&) build_docker/./contrib/llvm-project/libcxx/include/tuple:1798:1 (clickhouse+0xf60a0bc)\r\n    #23 ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'()::operator()() build_docker/./src/Common/ThreadPool.h:223:13 (clickhouse+0xf60a0bc)\r\n    #24 decltype(std::declval<void>()()) std::__1::__invoke[abi:v15000]<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'()&>(void&&) build_docker/./contrib/llvm-project/libcxx/include/__functional/invoke.h:394:23 (clickhouse+0xf60a021) (BuildId: 8c3976ccfb5306aea92cfbe504c44be74bccbdd4)\r\n    #25 void std::__1::__invoke_void_return_wrapper<void, true>::__call<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'()&>(ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'()&) build_docker/./contrib/llvm-project/libcxx/include/__functional/invoke.h:479:9 (clickhouse+0xf60a021)\r\n    #26 std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'(), void ()>::operator()[abi:v15000]() build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:235:12 (clickhouse+0xf60a021)\r\n    #27 void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'(), void ()>>(std::__1::__function::__policy_storage const*) build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:716:16 (clickhouse+0xf60a021)\r\n    #28 std::__1::__function::__policy_func<void ()>::operator()[abi:v15000]() const build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:848:16 (clickhouse+0xf601fce) (BuildId: 8c3976ccfb5306aea92cfbe504c44be74bccbdd4)\r\n    #29 std::__1::function<void ()>::operator()() const build_docker/./contrib/llvm-project/libcxx/include/__functional/function.h:1187:12 (clickhouse+0xf601fce)\r\n    #30 ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) build_docker/./src/Common/ThreadPool.cpp:455:13 (clickhouse+0xf601fce)\r\n    #31 void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()::operator()() const build_docker/./src/Common/ThreadPool.cpp:217:73 (clickhouse+0xf607e91) (BuildId: 8c3976ccfb5306aea92cfbe504c44be74bccbdd4)\r\n    #32 decltype(std::declval<void>()()) std::__1::__invoke[abi:v15000]<void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&) build_docker/./contrib/llvm-project/libcxx/include/__functional/invoke.h:394:23 (clickhouse+0xf607e91)\r\n    #33 void std::__1::__thread_execute[abi:v15000]<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(std::__1::tuple<void, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>&, std::__1::__tuple_indices<>) build_docker/./contrib/llvm-project/libcxx/include/thread:284:5 (clickhouse+0xf607e91)\r\n    #34 void* std::__1::__thread_proxy[abi:v15000]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>>(void*) build_docker/./contrib/llvm-project/libcxx/include/thread:295:5 (clickhouse+0xf607e91)\r\n```\n",
  "hints_text": "https://s3.amazonaws.com/clickhouse-test-reports/0/657da6b55e420dfdaf36467ea2b8d3e7f69b77bc/stress_test__tsan_.html\nhttps://s3.amazonaws.com/clickhouse-test-reports/58455/8f26e2af67614984d1e7db0330f556e1fb584c18/stateless_tests__tsan__s3_storage__[5_5].html\n@KochetovNicolai I suspect this PR https://github.com/ClickHouse/ClickHouse/pull/57691\r\n\r\nCould you take a look maybe?\nStill happening even with the fix: https://s3.amazonaws.com/clickhouse-test-reports/58792/bf2e5748575ad2eb74eb057e0ee242a149edecdb/stress_test__tsan_/stderr.log\r\n\r\nCommit bf2e5748575ad2eb74eb057e0ee242a149edecdb contains f4b12757956462b96401f18a267eebeefb693125 / https://github.com/ClickHouse/ClickHouse/pull/58624\nhttps://s3.amazonaws.com/clickhouse-test-reports/0/b8d2af957488544722d307bebe23537a49798c13/stress_test__tsan_.html\r\n\r\nhere we go again\nSo I think this is how we end up with many_data accessed from multiple threads:\r\nhttps://github.com/ClickHouse/ClickHouse/blob/master/src/Processors/QueryPlan/AggregatingStep.cpp#L248\r\nwhen we destroy `ManyAggregatedData` we iterate all variants which are used in different streams AFAIU.\r\n\r\nFirst question is, is it okay we moved variants like this because they are accessible from different threads? https://github.com/ClickHouse/ClickHouse/pull/58624\r\nOther question is, did early release cause this race? https://github.com/ClickHouse/ClickHouse/pull/57691\r\nPreviously ManyData would be destroyed when `AggregatingTransform` is destroyed, which I assume happens when everything is done with execution.\r\ncc @KochetovNicolai \nAnother repro https://s3.amazonaws.com/clickhouse-test-reports/59137/41e6dd7a9d91eef031a9c375278183a35acc927e/stress_test__tsan_.html\nwe indeed shouldn't just release all references to variants, it not only causes this race, but also breaks the optimisation (parallel destruction of states)\r\n\r\n<img width=\"1971\" alt=\"Screenshot 2024-02-02 at 18 18 31\" src=\"https://github.com/ClickHouse/ClickHouse/assets/5218483/6fbbdde7-5b9a-4634-b0db-37eccd171366\">\r\n<img width=\"1971\" alt=\"Screenshot 2024-02-02 at 18 18 41\" src=\"https://github.com/ClickHouse/ClickHouse/assets/5218483/ee1b93c1-7745-4e4e-b287-764722c8107f\">\r\n",
  "created_at": "2024-02-02T22:03:14Z"
}