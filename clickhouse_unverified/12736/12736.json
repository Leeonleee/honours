{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 12736,
  "instance_id": "ClickHouse__ClickHouse-12736",
  "issue_numbers": [
    "13819"
  ],
  "base_commit": "d42ffa02bd9ec0d2ba241c9e4781533ad7217c36",
  "patch": "diff --git a/contrib/libhdfs3 b/contrib/libhdfs3\nindex 24b058c35679..30552ac527f2 160000\n--- a/contrib/libhdfs3\n+++ b/contrib/libhdfs3\n@@ -1,1 +1,1 @@\n-Subproject commit 24b058c356794ef6cc2d31323dc9adf0386652ff\n+Subproject commit 30552ac527f2c14070d834e171493b2e7f662375\ndiff --git a/programs/server/config.xml b/programs/server/config.xml\nindex 83921b123824..bf41a331a365 100644\n--- a/programs/server/config.xml\n+++ b/programs/server/config.xml\n@@ -212,22 +212,10 @@\n     <!-- Directory with user provided files that are accessible by 'file' table function. -->\n     <user_files_path>/var/lib/clickhouse/user_files/</user_files_path>\n \n-    <!-- Sources to read users, roles, access rights, profiles of settings, quotas. -->\n-    <user_directories>\n-        <users_xml>\n-            <!-- Path to configuration file with predefined users. -->\n-            <path>users.xml</path>\n-        </users_xml>\n-        <local_directory>\n-            <!-- Path to folder where users created by SQL commands are stored. -->\n-            <path>/var/lib/clickhouse/access/</path>\n-        </local_directory>\n-    </user_directories>\n-\n-    <!-- External user directories (LDAP). -->\n+    <!-- LDAP server definitions. -->\n     <ldap_servers>\n-        <!-- List LDAP servers with their connection parameters here to later use them as authenticators for dedicated users,\n-             who have 'ldap' authentication mechanism specified instead of 'password'.\n+        <!-- List LDAP servers with their connection parameters here to later 1) use them as authenticators for dedicated local users,\n+              who have 'ldap' authentication mechanism specified instead of 'password', or to 2) use them as remote user directories.\n              Parameters:\n                 host - LDAP server hostname or IP, this parameter is mandatory and cannot be empty.\n                 port - LDAP server port, default is 636 if enable_tls is set to true, 389 otherwise.\n@@ -246,7 +234,7 @@\n                 tls_key_file - path to certificate key file.\n                 tls_ca_cert_file - path to CA certificate file.\n                 tls_ca_cert_dir - path to the directory containing CA certificates.\n-                tls_cipher_suite - allowed cipher suite.\n+                tls_cipher_suite - allowed cipher suite (in OpenSSL notation).\n              Example:\n                 <my_ldap_server>\n                     <host>localhost</host>\n@@ -265,6 +253,36 @@\n         -->\n     </ldap_servers>\n \n+    <!-- Sources to read users, roles, access rights, profiles of settings, quotas. -->\n+    <user_directories>\n+        <users_xml>\n+            <!-- Path to configuration file with predefined users. -->\n+            <path>users.xml</path>\n+        </users_xml>\n+        <local_directory>\n+            <!-- Path to folder where users created by SQL commands are stored. -->\n+            <path>/var/lib/clickhouse/access/</path>\n+        </local_directory>\n+\n+        <!-- To add an LDAP server as a remote user directory of users that are not defined locally, define a single 'ldap' section\n+              with the following parameters:\n+                server - one of LDAP server names defined in 'ldap_servers' config section above.\n+                        This parameter is mandatory and cannot be empty.\n+                roles - section with a list of locally defined roles that will be assigned to each user retrieved from the LDAP server.\n+                        If no roles are specified, user will not be able to perform any actions after authentication.\n+                        If any of the listed roles is not defined locally at the time of authentication, the authenthication attept\n+                         will fail as if the provided password was incorrect.\n+             Example:\n+                <ldap>\n+                    <server>my_ldap_server</server>\n+                    <roles>\n+                        <my_local_role1 />\n+                        <my_local_role2 />\n+                    </roles>\n+                </ldap>\n+        -->\n+    </user_directories>\n+\n     <!-- Default profile of settings. -->\n     <default_profile>default</default_profile>\n \ndiff --git a/src/Access/AccessControlManager.cpp b/src/Access/AccessControlManager.cpp\nindex ecbb02966f00..56d225f64f4c 100644\n--- a/src/Access/AccessControlManager.cpp\n+++ b/src/Access/AccessControlManager.cpp\n@@ -3,6 +3,7 @@\n #include <Access/MemoryAccessStorage.h>\n #include <Access/UsersConfigAccessStorage.h>\n #include <Access/DiskAccessStorage.h>\n+#include <Access/LDAPAccessStorage.h>\n #include <Access/ContextAccess.h>\n #include <Access/RoleCache.h>\n #include <Access/RowPolicyCache.h>\n@@ -253,6 +254,12 @@ void AccessControlManager::addMemoryStorage(const String & storage_name_)\n }\n \n \n+void AccessControlManager::addLDAPStorage(const String & storage_name_, const Poco::Util::AbstractConfiguration & config_, const String & prefix_)\n+{\n+    addStorage(std::make_shared<LDAPAccessStorage>(storage_name_, this, config_, prefix_));\n+}\n+\n+\n void AccessControlManager::addStoragesFromUserDirectoriesConfig(\n     const Poco::Util::AbstractConfiguration & config,\n     const String & key,\n@@ -275,6 +282,8 @@ void AccessControlManager::addStoragesFromUserDirectoriesConfig(\n             type = UsersConfigAccessStorage::STORAGE_TYPE;\n         else if ((type == \"local\") || (type == \"local_directory\"))\n             type = DiskAccessStorage::STORAGE_TYPE;\n+        else if (type == \"ldap\")\n+            type = LDAPAccessStorage::STORAGE_TYPE;\n \n         String name = config.getString(prefix + \".name\", type);\n \n@@ -295,6 +304,10 @@ void AccessControlManager::addStoragesFromUserDirectoriesConfig(\n             bool readonly = config.getBool(prefix + \".readonly\", false);\n             addDiskStorage(name, path, readonly);\n         }\n+        else if (type == LDAPAccessStorage::STORAGE_TYPE)\n+        {\n+            addLDAPStorage(name, config, prefix);\n+        }\n         else\n             throw Exception(\"Unknown storage type '\" + type + \"' at \" + prefix + \" in config\", ErrorCodes::UNKNOWN_ELEMENT_IN_CONFIG);\n     }\n@@ -346,7 +359,7 @@ UUID AccessControlManager::login(const String & user_name, const String & passwo\n \n void AccessControlManager::setExternalAuthenticatorsConfig(const Poco::Util::AbstractConfiguration & config)\n {\n-    external_authenticators->setConfig(config, getLogger());\n+    external_authenticators->setConfiguration(config, getLogger());\n }\n \n \ndiff --git a/src/Access/AccessControlManager.h b/src/Access/AccessControlManager.h\nindex 81a66ce8f1dd..c960b330ee6a 100644\n--- a/src/Access/AccessControlManager.h\n+++ b/src/Access/AccessControlManager.h\n@@ -82,6 +82,9 @@ class AccessControlManager : public MultipleAccessStorage\n     void addMemoryStorage();\n     void addMemoryStorage(const String & storage_name_);\n \n+    /// Adds LDAPAccessStorage which allows querying remote LDAP server for user info.\n+    void addLDAPStorage(const String & storage_name_, const Poco::Util::AbstractConfiguration & config_, const String & prefix_);\n+\n     /// Adds storages from <users_directories> config.\n     void addStoragesFromUserDirectoriesConfig(const Poco::Util::AbstractConfiguration & config,\n                                               const String & key,\ndiff --git a/src/Access/ExternalAuthenticators.cpp b/src/Access/ExternalAuthenticators.cpp\nindex a0c5fbf1a795..3ed1b21c3c2a 100644\n--- a/src/Access/ExternalAuthenticators.cpp\n+++ b/src/Access/ExternalAuthenticators.cpp\n@@ -156,7 +156,7 @@ void ExternalAuthenticators::reset()\n     ldap_server_params.clear();\n }\n \n-void ExternalAuthenticators::setConfig(const Poco::Util::AbstractConfiguration & config, Poco::Logger * log)\n+void ExternalAuthenticators::setConfiguration(const Poco::Util::AbstractConfiguration & config, Poco::Logger * log)\n {\n     std::scoped_lock lock(mutex);\n     reset();\ndiff --git a/src/Access/ExternalAuthenticators.h b/src/Access/ExternalAuthenticators.h\nindex 7484996c4729..7502409d817c 100644\n--- a/src/Access/ExternalAuthenticators.h\n+++ b/src/Access/ExternalAuthenticators.h\n@@ -26,7 +26,7 @@ class ExternalAuthenticators\n {\n public:\n     void reset();\n-    void setConfig(const Poco::Util::AbstractConfiguration & config, Poco::Logger * log);\n+    void setConfiguration(const Poco::Util::AbstractConfiguration & config, Poco::Logger * log);\n \n     void setLDAPServerParams(const String & server, const LDAPServerParams & params);\n     LDAPServerParams getLDAPServerParams(const String & server) const;\ndiff --git a/src/Access/IAccessStorage.cpp b/src/Access/IAccessStorage.cpp\nindex e5170221e185..8dd219e07d79 100644\n--- a/src/Access/IAccessStorage.cpp\n+++ b/src/Access/IAccessStorage.cpp\n@@ -14,6 +14,8 @@ namespace ErrorCodes\n     extern const int ACCESS_ENTITY_ALREADY_EXISTS;\n     extern const int ACCESS_ENTITY_NOT_FOUND;\n     extern const int ACCESS_STORAGE_READONLY;\n+    extern const int WRONG_PASSWORD;\n+    extern const int IP_ADDRESS_NOT_ALLOWED;\n     extern const int AUTHENTICATION_FAILED;\n     extern const int LOGICAL_ERROR;\n }\n@@ -418,9 +420,21 @@ UUID IAccessStorage::login(\n     const String & user_name,\n     const String & password,\n     const Poco::Net::IPAddress & address,\n-    const ExternalAuthenticators & external_authenticators) const\n+    const ExternalAuthenticators & external_authenticators,\n+    bool replace_exception_with_cannot_authenticate) const\n {\n-    return loginImpl(user_name, password, address, external_authenticators);\n+    try\n+    {\n+        return loginImpl(user_name, password, address, external_authenticators);\n+    }\n+    catch (...)\n+    {\n+        if (!replace_exception_with_cannot_authenticate)\n+            throw;\n+\n+        tryLogCurrentException(getLogger(), user_name + \": Authentication failed\");\n+        throwCannotAuthenticate(user_name);\n+    }\n }\n \n \n@@ -434,11 +448,16 @@ UUID IAccessStorage::loginImpl(\n     {\n         if (auto user = tryRead<User>(*id))\n         {\n-            if (isPasswordCorrectImpl(*user, password, external_authenticators) && isAddressAllowedImpl(*user, address))\n-                return *id;\n+            if (!isPasswordCorrectImpl(*user, password, external_authenticators))\n+                throwInvalidPassword();\n+\n+            if (!isAddressAllowedImpl(*user, address))\n+                throwAddressNotAllowed(address);\n+\n+            return *id;\n         }\n     }\n-    throwCannotAuthenticate(user_name);\n+    throwNotFound(EntityType::USER, user_name);\n }\n \n \n@@ -554,6 +573,15 @@ void IAccessStorage::throwReadonlyCannotRemove(EntityType type, const String & n\n         ErrorCodes::ACCESS_STORAGE_READONLY);\n }\n \n+void IAccessStorage::throwAddressNotAllowed(const Poco::Net::IPAddress & address)\n+{\n+    throw Exception(\"Connections from \" + address.toString() + \" are not allowed\", ErrorCodes::IP_ADDRESS_NOT_ALLOWED);\n+}\n+\n+void IAccessStorage::throwInvalidPassword()\n+{\n+    throw Exception(\"Invalid password\", ErrorCodes::WRONG_PASSWORD);\n+}\n \n void IAccessStorage::throwCannotAuthenticate(const String & user_name)\n {\ndiff --git a/src/Access/IAccessStorage.h b/src/Access/IAccessStorage.h\nindex 5a86e817fb21..ecf6b2607122 100644\n--- a/src/Access/IAccessStorage.h\n+++ b/src/Access/IAccessStorage.h\n@@ -144,7 +144,7 @@ class IAccessStorage\n \n     /// Finds an user, check its password and returns the ID of the user.\n     /// Throws an exception if no such user or password is incorrect.\n-    UUID login(const String & user_name, const String & password, const Poco::Net::IPAddress & address, const ExternalAuthenticators & external_authenticators) const;\n+    UUID login(const String & user_name, const String & password, const Poco::Net::IPAddress & address, const ExternalAuthenticators & external_authenticators, bool replace_exception_with_cannot_authenticate = true) const;\n \n     /// Returns the ID of an user who has logged in (maybe on another node).\n     /// The function assumes that the password has been already checked somehow, so we can skip checking it now.\n@@ -182,6 +182,8 @@ class IAccessStorage\n     [[noreturn]] void throwReadonlyCannotInsert(EntityType type, const String & name) const;\n     [[noreturn]] void throwReadonlyCannotUpdate(EntityType type, const String & name) const;\n     [[noreturn]] void throwReadonlyCannotRemove(EntityType type, const String & name) const;\n+    [[noreturn]] static void throwAddressNotAllowed(const Poco::Net::IPAddress & address);\n+    [[noreturn]] static void throwInvalidPassword();\n     [[noreturn]] static void throwCannotAuthenticate(const String & user_name);\n \n     using Notification = std::tuple<OnChangedHandler, UUID, AccessEntityPtr>;\ndiff --git a/src/Access/LDAPAccessStorage.cpp b/src/Access/LDAPAccessStorage.cpp\nnew file mode 100644\nindex 000000000000..cf5e7673e40e\n--- /dev/null\n+++ b/src/Access/LDAPAccessStorage.cpp\n@@ -0,0 +1,313 @@\n+#include <Access/LDAPAccessStorage.h>\n+#include <Access/AccessControlManager.h>\n+#include <Access/User.h>\n+#include <Access/Role.h>\n+#include <Common/Exception.h>\n+#include <common/logger_useful.h>\n+#include <ext/scope_guard.h>\n+#include <Poco/Util/AbstractConfiguration.h>\n+#include <Poco/JSON/JSON.h>\n+#include <Poco/JSON/Object.h>\n+#include <Poco/JSON/Stringifier.h>\n+#include <boost/range/algorithm/copy.hpp>\n+#include <iterator>\n+#include <sstream>\n+\n+\n+namespace DB\n+{\n+namespace ErrorCodes\n+{\n+    extern const int BAD_ARGUMENTS;\n+}\n+\n+\n+LDAPAccessStorage::LDAPAccessStorage(const String & storage_name_, AccessControlManager * access_control_manager_, const Poco::Util::AbstractConfiguration & config, const String & prefix)\n+    : IAccessStorage(storage_name_)\n+{\n+    setConfiguration(access_control_manager_, config, prefix);\n+}\n+\n+\n+void LDAPAccessStorage::setConfiguration(AccessControlManager * access_control_manager_, const Poco::Util::AbstractConfiguration & config, const String & prefix)\n+{\n+    std::scoped_lock lock(mutex);\n+\n+    // TODO: switch to passing config as a ConfigurationView and remove this extra prefix once a version of Poco with proper implementation is available.\n+    const String prefix_str = (prefix.empty() ? \"\" : prefix + \".\");\n+\n+    const bool has_server = config.has(prefix_str + \"server\");\n+    const bool has_roles = config.has(prefix_str + \"roles\");\n+\n+    if (!has_server)\n+        throw Exception(\"Missing 'server' field for LDAP user directory.\", ErrorCodes::BAD_ARGUMENTS);\n+\n+    const auto ldap_server_cfg = config.getString(prefix_str + \"server\");\n+    if (ldap_server_cfg.empty())\n+        throw Exception(\"Empty 'server' field for LDAP user directory.\", ErrorCodes::BAD_ARGUMENTS);\n+\n+    std::set<String> roles_cfg;\n+    if (has_roles)\n+    {\n+        Poco::Util::AbstractConfiguration::Keys role_names;\n+        config.keys(prefix_str + \"roles\", role_names);\n+\n+        // Currently, we only extract names of roles from the section names and assign them directly and unconditionally.\n+        roles_cfg.insert(role_names.begin(), role_names.end());\n+    }\n+\n+    access_control_manager = access_control_manager_;\n+    ldap_server = ldap_server_cfg;\n+    default_role_names.swap(roles_cfg);\n+    roles_of_interest.clear();\n+    role_change_subscription = access_control_manager->subscribeForChanges<Role>(\n+        [this] (const UUID & id, const AccessEntityPtr & entity)\n+        {\n+            return this->processRoleChange(id, entity);\n+        }\n+    );\n+\n+    /// Update `roles_of_interests` with initial values.\n+    for (const auto & role_name : default_role_names)\n+    {\n+        if (auto role_id = access_control_manager->find<Role>(role_name))\n+            roles_of_interest.emplace(*role_id, role_name);\n+    }\n+}\n+\n+\n+void LDAPAccessStorage::processRoleChange(const UUID & id, const AccessEntityPtr & entity)\n+{\n+    std::scoped_lock lock(mutex);\n+\n+    /// Update `roles_of_interests`.\n+    auto role = typeid_cast<std::shared_ptr<const Role>>(entity);\n+    bool need_to_update_users = false;\n+\n+    if (role && default_role_names.count(role->getName()))\n+    {\n+        /// If a role was created with one of the `default_role_names` or renamed to one of the `default_role_names`,\n+        /// then set `need_to_update_users`.\n+        need_to_update_users = roles_of_interest.insert_or_assign(id, role->getName()).second;\n+    }\n+    else\n+    {\n+        /// If a role was removed or renamed to a name which isn't contained in the `default_role_names`,\n+        /// then set `need_to_update_users`.\n+        need_to_update_users = roles_of_interest.erase(id) > 0;\n+    }\n+\n+    /// Update users which have been created.\n+    if (need_to_update_users)\n+    {\n+        auto update_func = [this] (const AccessEntityPtr & entity_) -> AccessEntityPtr\n+        {\n+            if (auto user = typeid_cast<std::shared_ptr<const User>>(entity_))\n+            {\n+                auto changed_user = typeid_cast<std::shared_ptr<User>>(user->clone());\n+                auto & granted_roles = changed_user->granted_roles.roles;\n+                granted_roles.clear();\n+                boost::range::copy(roles_of_interest | boost::adaptors::map_keys, std::inserter(granted_roles, granted_roles.end()));\n+                return changed_user;\n+            }\n+            return entity_;\n+        };\n+        memory_storage.update(memory_storage.findAll<User>(), update_func);\n+    }\n+}\n+\n+\n+void LDAPAccessStorage::checkAllDefaultRoleNamesFoundNoLock() const\n+{\n+    boost::container::flat_set<std::string_view> role_names_of_interest;\n+    boost::range::copy(roles_of_interest | boost::adaptors::map_values, std::inserter(role_names_of_interest, role_names_of_interest.end()));\n+\n+    for (const auto & role_name : default_role_names)\n+    {\n+        if (!role_names_of_interest.count(role_name))\n+            throwDefaultRoleNotFound(role_name);\n+    }\n+}\n+\n+\n+const char * LDAPAccessStorage::getStorageType() const\n+{\n+    return STORAGE_TYPE;\n+}\n+\n+\n+String LDAPAccessStorage::getStorageParamsJSON() const\n+{\n+    std::scoped_lock lock(mutex);\n+    Poco::JSON::Object params_json;\n+\n+    params_json.set(\"server\", ldap_server);\n+    params_json.set(\"roles\", default_role_names);\n+\n+    std::ostringstream oss;\n+    Poco::JSON::Stringifier::stringify(params_json, oss);\n+\n+    return oss.str();\n+}\n+\n+\n+std::optional<UUID> LDAPAccessStorage::findImpl(EntityType type, const String & name) const\n+{\n+    std::scoped_lock lock(mutex);\n+    return memory_storage.find(type, name);\n+}\n+\n+\n+std::vector<UUID> LDAPAccessStorage::findAllImpl(EntityType type) const\n+{\n+    std::scoped_lock lock(mutex);\n+    return memory_storage.findAll(type);\n+}\n+\n+\n+bool LDAPAccessStorage::existsImpl(const UUID & id) const\n+{\n+    std::scoped_lock lock(mutex);\n+    return memory_storage.exists(id);\n+}\n+\n+\n+AccessEntityPtr LDAPAccessStorage::readImpl(const UUID & id) const\n+{\n+    std::scoped_lock lock(mutex);\n+    return memory_storage.read(id);\n+}\n+\n+\n+String LDAPAccessStorage::readNameImpl(const UUID & id) const\n+{\n+    std::scoped_lock lock(mutex);\n+    return memory_storage.readName(id);\n+}\n+\n+\n+bool LDAPAccessStorage::canInsertImpl(const AccessEntityPtr &) const\n+{\n+    return false;\n+}\n+\n+\n+UUID LDAPAccessStorage::insertImpl(const AccessEntityPtr & entity, bool)\n+{\n+    throwReadonlyCannotInsert(entity->getType(), entity->getName());\n+}\n+\n+\n+void LDAPAccessStorage::removeImpl(const UUID & id)\n+{\n+    std::scoped_lock lock(mutex);\n+    auto entity = read(id);\n+    throwReadonlyCannotRemove(entity->getType(), entity->getName());\n+}\n+\n+\n+void LDAPAccessStorage::updateImpl(const UUID & id, const UpdateFunc &)\n+{\n+    std::scoped_lock lock(mutex);\n+    auto entity = read(id);\n+    throwReadonlyCannotUpdate(entity->getType(), entity->getName());\n+}\n+\n+\n+ext::scope_guard LDAPAccessStorage::subscribeForChangesImpl(const UUID & id, const OnChangedHandler & handler) const\n+{\n+    std::scoped_lock lock(mutex);\n+    return memory_storage.subscribeForChanges(id, handler);\n+}\n+\n+\n+ext::scope_guard LDAPAccessStorage::subscribeForChangesImpl(EntityType type, const OnChangedHandler & handler) const\n+{\n+    std::scoped_lock lock(mutex);\n+    return memory_storage.subscribeForChanges(type, handler);\n+}\n+\n+\n+bool LDAPAccessStorage::hasSubscriptionImpl(const UUID & id) const\n+{\n+    std::scoped_lock lock(mutex);\n+    return memory_storage.hasSubscription(id);\n+}\n+\n+\n+bool LDAPAccessStorage::hasSubscriptionImpl(EntityType type) const\n+{\n+    std::scoped_lock lock(mutex);\n+    return memory_storage.hasSubscription(type);\n+}\n+\n+UUID LDAPAccessStorage::loginImpl(const String & user_name, const String & password, const Poco::Net::IPAddress & address, const ExternalAuthenticators & external_authenticators) const\n+{\n+    std::scoped_lock lock(mutex);\n+    auto id = memory_storage.find<User>(user_name);\n+    if (id)\n+    {\n+        auto user = memory_storage.read<User>(*id);\n+\n+        if (!isPasswordCorrectImpl(*user, password, external_authenticators))\n+            throwInvalidPassword();\n+\n+        if (!isAddressAllowedImpl(*user, address))\n+            throwAddressNotAllowed(address);\n+\n+        return *id;\n+    }\n+    else\n+    {\n+        // User does not exist, so we create one, and will add it if authentication is successful.\n+        auto user = std::make_shared<User>();\n+        user->setName(user_name);\n+        user->authentication = Authentication(Authentication::Type::LDAP_SERVER);\n+        user->authentication.setServerName(ldap_server);\n+\n+        if (!isPasswordCorrectImpl(*user, password, external_authenticators))\n+            throwInvalidPassword();\n+\n+        if (!isAddressAllowedImpl(*user, address))\n+            throwAddressNotAllowed(address);\n+\n+        checkAllDefaultRoleNamesFoundNoLock();\n+\n+        auto & granted_roles = user->granted_roles.roles;\n+        boost::range::copy(roles_of_interest | boost::adaptors::map_keys, std::inserter(granted_roles, granted_roles.end()));\n+\n+        return memory_storage.insert(user);\n+    }\n+}\n+\n+UUID LDAPAccessStorage::getIDOfLoggedUserImpl(const String & user_name) const\n+{\n+    std::scoped_lock lock(mutex);\n+    auto id = memory_storage.find<User>(user_name);\n+    if (id)\n+    {\n+        return *id;\n+    }\n+    else\n+    {\n+        // User does not exist, so we create one, and add it pretending that the authentication is successful.\n+        auto user = std::make_shared<User>();\n+        user->setName(user_name);\n+        user->authentication = Authentication(Authentication::Type::LDAP_SERVER);\n+        user->authentication.setServerName(ldap_server);\n+\n+        checkAllDefaultRoleNamesFoundNoLock();\n+\n+        auto & granted_roles = user->granted_roles.roles;\n+        boost::range::copy(roles_of_interest | boost::adaptors::map_keys, std::inserter(granted_roles, granted_roles.end()));\n+\n+        return memory_storage.insert(user);\n+    }\n+}\n+\n+void LDAPAccessStorage::throwDefaultRoleNotFound(const String & role_name)\n+{\n+    throw Exception(\"One of the default roles, the role '\" + role_name + \"', is not found\", IAccessEntity::TypeInfo::get(IAccessEntity::Type::ROLE).not_found_error_code);\n+}\n+\n+}\ndiff --git a/src/Access/LDAPAccessStorage.h b/src/Access/LDAPAccessStorage.h\nnew file mode 100644\nindex 000000000000..a845279841ca\n--- /dev/null\n+++ b/src/Access/LDAPAccessStorage.h\n@@ -0,0 +1,71 @@\n+#pragma once\n+\n+#include <Access/MemoryAccessStorage.h>\n+#include <Core/Types.h>\n+#include <ext/scope_guard.h>\n+#include <map>\n+#include <mutex>\n+#include <set>\n+\n+\n+namespace Poco\n+{\n+    namespace Util\n+    {\n+        class AbstractConfiguration;\n+    }\n+}\n+\n+\n+namespace DB\n+{\n+class AccessControlManager;\n+\n+/// Implementation of IAccessStorage which allows attaching users from a remote LDAP server.\n+/// Currently, any user name will be treated as a name of an existing remote user,\n+/// a user info entity will be created, with LDAP_SERVER authentication type.\n+class LDAPAccessStorage : public IAccessStorage\n+{\n+public:\n+    static constexpr char STORAGE_TYPE[] = \"ldap\";\n+\n+    explicit LDAPAccessStorage(const String & storage_name_, AccessControlManager * access_control_manager_, const Poco::Util::AbstractConfiguration & config, const String & prefix);\n+    virtual ~LDAPAccessStorage() override = default;\n+\n+public: // IAccessStorage implementations.\n+    virtual const char * getStorageType() const override;\n+    virtual String getStorageParamsJSON() const override;\n+\n+private: // IAccessStorage implementations.\n+    virtual std::optional<UUID> findImpl(EntityType type, const String & name) const override;\n+    virtual std::vector<UUID> findAllImpl(EntityType type) const override;\n+    virtual bool existsImpl(const UUID & id) const override;\n+    virtual AccessEntityPtr readImpl(const UUID & id) const override;\n+    virtual String readNameImpl(const UUID & id) const override;\n+    virtual bool canInsertImpl(const AccessEntityPtr &) const override;\n+    virtual UUID insertImpl(const AccessEntityPtr & entity, bool replace_if_exists) override;\n+    virtual void removeImpl(const UUID & id) override;\n+    virtual void updateImpl(const UUID & id, const UpdateFunc & update_func) override;\n+    virtual ext::scope_guard subscribeForChangesImpl(const UUID & id, const OnChangedHandler & handler) const override;\n+    virtual ext::scope_guard subscribeForChangesImpl(EntityType type, const OnChangedHandler & handler) const override;\n+    virtual bool hasSubscriptionImpl(const UUID & id) const override;\n+    virtual bool hasSubscriptionImpl(EntityType type) const override;\n+    virtual UUID loginImpl(const String & user_name, const String & password, const Poco::Net::IPAddress & address, const ExternalAuthenticators & external_authenticators) const override;\n+    virtual UUID getIDOfLoggedUserImpl(const String & user_name) const override;\n+\n+private:\n+    void setConfiguration(AccessControlManager * access_control_manager_, const Poco::Util::AbstractConfiguration & config, const String & prefix);\n+    void processRoleChange(const UUID & id, const AccessEntityPtr & entity);\n+    void checkAllDefaultRoleNamesFoundNoLock() const;\n+\n+    [[noreturn]] static void throwDefaultRoleNotFound(const String & role_name);\n+\n+    mutable std::recursive_mutex mutex;\n+    AccessControlManager * access_control_manager = nullptr;\n+    String ldap_server;\n+    std::set<String> default_role_names;\n+    std::map<UUID, String> roles_of_interest;\n+    ext::scope_guard role_change_subscription;\n+    mutable MemoryAccessStorage memory_storage;\n+};\n+}\ndiff --git a/src/Access/LDAPClient.cpp b/src/Access/LDAPClient.cpp\nindex a85e96ab86c2..a32239023611 100644\n--- a/src/Access/LDAPClient.cpp\n+++ b/src/Access/LDAPClient.cpp\n@@ -2,6 +2,8 @@\n #include <Common/Exception.h>\n #include <ext/scope_guard.h>\n \n+#include <mutex>\n+\n #include <cstring>\n \n #include <sys/time.h>\n@@ -27,16 +29,13 @@ LDAPClient::~LDAPClient()\n     closeConnection();\n }\n \n-void LDAPClient::openConnection()\n-{\n-    const bool graceful_bind_failure = false;\n-    diag(openConnection(graceful_bind_failure));\n-}\n-\n #if USE_LDAP\n \n namespace\n {\n+\n+    std::recursive_mutex ldap_global_mutex;\n+\n     auto escapeForLDAP(const String & src)\n     {\n         String dest;\n@@ -63,10 +62,13 @@ namespace\n \n         return dest;\n     }\n+\n }\n \n void LDAPClient::diag(const int rc)\n {\n+    std::scoped_lock lock(ldap_global_mutex);\n+\n     if (rc != LDAP_SUCCESS)\n     {\n         String text;\n@@ -100,8 +102,10 @@ void LDAPClient::diag(const int rc)\n     }\n }\n \n-int LDAPClient::openConnection(const bool graceful_bind_failure)\n+void LDAPClient::openConnection()\n {\n+    std::scoped_lock lock(ldap_global_mutex);\n+\n     closeConnection();\n \n     {\n@@ -232,8 +236,6 @@ int LDAPClient::openConnection(const bool graceful_bind_failure)\n     if (params.enable_tls == LDAPServerParams::TLSEnable::YES_STARTTLS)\n         diag(ldap_start_tls_s(handle, nullptr, nullptr));\n \n-    int rc = LDAP_OTHER;\n-\n     switch (params.sasl_mechanism)\n     {\n         case LDAPServerParams::SASLMechanism::SIMPLE:\n@@ -244,20 +246,21 @@ int LDAPClient::openConnection(const bool graceful_bind_failure)\n             cred.bv_val = const_cast<char *>(params.password.c_str());\n             cred.bv_len = params.password.size();\n \n-            rc = ldap_sasl_bind_s(handle, dn.c_str(), LDAP_SASL_SIMPLE, &cred, nullptr, nullptr, nullptr);\n-\n-            if (!graceful_bind_failure)\n-                diag(rc);\n+            diag(ldap_sasl_bind_s(handle, dn.c_str(), LDAP_SASL_SIMPLE, &cred, nullptr, nullptr, nullptr));\n \n             break;\n         }\n+        default:\n+        {\n+            throw Exception(\"Unknown SASL mechanism\", ErrorCodes::LDAP_ERROR);\n+        }\n     }\n-\n-    return rc;\n }\n \n void LDAPClient::closeConnection() noexcept\n {\n+    std::scoped_lock lock(ldap_global_mutex);\n+\n     if (!handle)\n         return;\n \n@@ -267,42 +270,21 @@ void LDAPClient::closeConnection() noexcept\n \n bool LDAPSimpleAuthClient::check()\n {\n+    std::scoped_lock lock(ldap_global_mutex);\n+\n     if (params.user.empty())\n-        throw Exception(\"LDAP authentication of a user with an empty name is not allowed\", ErrorCodes::BAD_ARGUMENTS);\n+        throw Exception(\"LDAP authentication of a user with empty name is not allowed\", ErrorCodes::BAD_ARGUMENTS);\n \n+    // Silently reject authentication attempt if the password is empty as if it didn't match.\n     if (params.password.empty())\n-        return false; // Silently reject authentication attempt if the password is empty as if it didn't match.\n+        return false;\n \n     SCOPE_EXIT({ closeConnection(); });\n \n-    const bool graceful_bind_failure = true;\n-    const auto rc = openConnection(graceful_bind_failure);\n-\n-    bool result = false;\n-\n-    switch (rc)\n-    {\n-        case LDAP_SUCCESS:\n-        {\n-            result = true;\n-            break;\n-        }\n-\n-        case LDAP_INVALID_CREDENTIALS:\n-        {\n-            result = false;\n-            break;\n-        }\n-\n-        default:\n-        {\n-            result = false;\n-            diag(rc);\n-            break;\n-        }\n-    }\n+    // Will throw on any error, including invalid credentials.\n+    openConnection();\n \n-    return result;\n+    return true;\n }\n \n #else // USE_LDAP\n@@ -312,7 +294,7 @@ void LDAPClient::diag(const int)\n     throw Exception(\"ClickHouse was built without LDAP support\", ErrorCodes::FEATURE_IS_NOT_ENABLED_AT_BUILD_TIME);\n }\n \n-int LDAPClient::openConnection(const bool)\n+void LDAPClient::openConnection()\n {\n     throw Exception(\"ClickHouse was built without LDAP support\", ErrorCodes::FEATURE_IS_NOT_ENABLED_AT_BUILD_TIME);\n }\ndiff --git a/src/Access/LDAPClient.h b/src/Access/LDAPClient.h\nindex b117ed9a0265..777c87c5b943 100644\n--- a/src/Access/LDAPClient.h\n+++ b/src/Access/LDAPClient.h\n@@ -32,7 +32,6 @@ class LDAPClient\n protected:\n     MAYBE_NORETURN void diag(const int rc);\n     MAYBE_NORETURN void openConnection();\n-    int openConnection(const bool graceful_bind_failure = false);\n     void closeConnection() noexcept;\n \n protected:\ndiff --git a/src/Access/LDAPParams.h b/src/Access/LDAPParams.h\nindex 2168ce452032..eeadba6bc01e 100644\n--- a/src/Access/LDAPParams.h\n+++ b/src/Access/LDAPParams.h\n@@ -42,6 +42,7 @@ struct LDAPServerParams\n \n     enum class SASLMechanism\n     {\n+        UNKNOWN,\n         SIMPLE\n     };\n \ndiff --git a/src/Access/MemoryAccessStorage.cpp b/src/Access/MemoryAccessStorage.cpp\nindex 114c8eb8bee3..58280c8b1d74 100644\n--- a/src/Access/MemoryAccessStorage.cpp\n+++ b/src/Access/MemoryAccessStorage.cpp\n@@ -69,7 +69,7 @@ UUID MemoryAccessStorage::insertImpl(const AccessEntityPtr & new_entity, bool re\n \n     UUID id = generateRandomID();\n     std::lock_guard lock{mutex};\n-    insertNoLock(generateRandomID(), new_entity, replace_if_exists, notifications);\n+    insertNoLock(id, new_entity, replace_if_exists, notifications);\n     return id;\n }\n \ndiff --git a/src/Access/MultipleAccessStorage.cpp b/src/Access/MultipleAccessStorage.cpp\nindex 8ddc7410d8dc..a8ce3f602ed2 100644\n--- a/src/Access/MultipleAccessStorage.cpp\n+++ b/src/Access/MultipleAccessStorage.cpp\n@@ -2,6 +2,7 @@\n #include <Common/Exception.h>\n #include <ext/range.h>\n #include <boost/range/adaptor/map.hpp>\n+#include <boost/range/adaptor/reversed.hpp>\n #include <boost/range/algorithm/copy.hpp>\n #include <boost/range/algorithm/find.hpp>\n \n@@ -27,6 +28,15 @@ MultipleAccessStorage::MultipleAccessStorage(const String & storage_name_)\n {\n }\n \n+MultipleAccessStorage::~MultipleAccessStorage()\n+{\n+    /// It's better to remove the storages in the reverse order because they could depend on each other somehow.\n+    const auto storages = getStoragesPtr();\n+    for (const auto & storage : *storages | boost::adaptors::reversed)\n+    {\n+        removeStorage(storage);\n+    }\n+}\n \n void MultipleAccessStorage::setStorages(const std::vector<StoragePtr> & storages)\n {\n@@ -400,7 +410,7 @@ UUID MultipleAccessStorage::loginImpl(const String & user_name, const String & p\n     {\n         try\n         {\n-            auto id = storage->login(user_name, password, address, external_authenticators);\n+            auto id = storage->login(user_name, password, address, external_authenticators, /* replace_exception_with_cannot_authenticate = */ false);\n             std::lock_guard lock{mutex};\n             ids_cache.set(id, storage);\n             return id;\n@@ -416,7 +426,7 @@ UUID MultipleAccessStorage::loginImpl(const String & user_name, const String & p\n             throw;\n         }\n     }\n-    throwCannotAuthenticate(user_name);\n+    throwNotFound(EntityType::USER, user_name);\n }\n \n \ndiff --git a/src/Access/MultipleAccessStorage.h b/src/Access/MultipleAccessStorage.h\nindex 36551f1cbc8d..8844de8c0290 100644\n--- a/src/Access/MultipleAccessStorage.h\n+++ b/src/Access/MultipleAccessStorage.h\n@@ -18,6 +18,7 @@ class MultipleAccessStorage : public IAccessStorage\n     using ConstStoragePtr = std::shared_ptr<const Storage>;\n \n     MultipleAccessStorage(const String & storage_name_ = STORAGE_TYPE);\n+    ~MultipleAccessStorage() override;\n \n     const char * getStorageType() const override { return STORAGE_TYPE; }\n \ndiff --git a/src/Access/ya.make b/src/Access/ya.make\nindex e5fa73f107c6..b945c5a192af 100644\n--- a/src/Access/ya.make\n+++ b/src/Access/ya.make\n@@ -24,6 +24,7 @@ SRCS(\n     GrantedRoles.cpp\n     IAccessEntity.cpp\n     IAccessStorage.cpp\n+    LDAPAccessStorage.cpp\n     LDAPClient.cpp\n     MemoryAccessStorage.cpp\n     MultipleAccessStorage.cpp\n",
  "test_patch": "diff --git a/tests/testflows/helpers/cluster.py b/tests/testflows/helpers/cluster.py\nindex 8fda8ac43d87..01ebfa8424b9 100644\n--- a/tests/testflows/helpers/cluster.py\n+++ b/tests/testflows/helpers/cluster.py\n@@ -53,7 +53,7 @@ def wait_healthy(self, timeout=120):\n                     continue\n                 assert False, \"container is not healthy\"\n \n-    def restart(self, timeout=120, safe=True):\n+    def restart(self, timeout=120, safe=True, wait_healthy=True):\n         \"\"\"Restart node.\n         \"\"\"\n         if safe:\n@@ -73,7 +73,8 @@ def restart(self, timeout=120, safe=True):\n \n         self.cluster.command(None, f'{self.cluster.docker_compose} restart {self.name}', timeout=timeout)\n \n-        self.wait_healthy(timeout)\n+        if wait_healthy:\n+            self.wait_healthy(timeout)\n \n     def query(self, sql, message=None, exitcode=None, steps=True, no_checks=False,\n               raise_on_exception=False, step=By, settings=None, *args, **kwargs):\n@@ -295,12 +296,12 @@ def command(self, node, command, message=None, exitcode=None, steps=True, *args,\n         :param steps: don't break command into steps, default: True\n         \"\"\"\n         debug(f\"command() {node}, {command}\")\n-        with By(\"executing command\", description=command) if steps else NullStep():\n+        with By(\"executing command\", description=command, format_description=False) if steps else NullStep():\n             r = self.bash(node)(command, *args, **kwargs)\n         if exitcode is not None:\n-            with Then(f\"exitcode should be {exitcode}\") if steps else NullStep():\n+            with Then(f\"exitcode should be {exitcode}\", format_name=False) if steps else NullStep():\n                 assert r.exitcode == exitcode, error(r.output)\n         if message is not None:\n-            with Then(f\"output should contain message\", description=message) if steps else NullStep():\n+            with Then(f\"output should contain message\", description=message, format_description=False) if steps else NullStep():\n                 assert message in r.output, error(r.output)\n         return r\ndiff --git a/tests/testflows/ldap/authentication/__init__.py b/tests/testflows/ldap/authentication/__init__.py\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/testflows/ldap/configs/CA/ca.crt b/tests/testflows/ldap/authentication/configs/CA/ca.crt\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/CA/ca.crt\nrename to tests/testflows/ldap/authentication/configs/CA/ca.crt\ndiff --git a/tests/testflows/ldap/configs/CA/ca.key b/tests/testflows/ldap/authentication/configs/CA/ca.key\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/CA/ca.key\nrename to tests/testflows/ldap/authentication/configs/CA/ca.key\ndiff --git a/tests/testflows/ldap/configs/CA/ca.srl b/tests/testflows/ldap/authentication/configs/CA/ca.srl\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/CA/ca.srl\nrename to tests/testflows/ldap/authentication/configs/CA/ca.srl\ndiff --git a/tests/testflows/ldap/configs/CA/dhparam.pem b/tests/testflows/ldap/authentication/configs/CA/dhparam.pem\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/CA/dhparam.pem\nrename to tests/testflows/ldap/authentication/configs/CA/dhparam.pem\ndiff --git a/tests/testflows/ldap/configs/CA/passphrase.txt b/tests/testflows/ldap/authentication/configs/CA/passphrase.txt\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/CA/passphrase.txt\nrename to tests/testflows/ldap/authentication/configs/CA/passphrase.txt\ndiff --git a/tests/testflows/ldap/configs/clickhouse/common.xml b/tests/testflows/ldap/authentication/configs/clickhouse/common.xml\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/clickhouse/common.xml\nrename to tests/testflows/ldap/authentication/configs/clickhouse/common.xml\ndiff --git a/tests/testflows/ldap/configs/clickhouse/config.d/logs.xml b/tests/testflows/ldap/authentication/configs/clickhouse/config.d/logs.xml\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/clickhouse/config.d/logs.xml\nrename to tests/testflows/ldap/authentication/configs/clickhouse/config.d/logs.xml\ndiff --git a/tests/testflows/ldap/configs/clickhouse/config.d/ports.xml b/tests/testflows/ldap/authentication/configs/clickhouse/config.d/ports.xml\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/clickhouse/config.d/ports.xml\nrename to tests/testflows/ldap/authentication/configs/clickhouse/config.d/ports.xml\ndiff --git a/tests/testflows/ldap/configs/clickhouse/config.d/remote.xml b/tests/testflows/ldap/authentication/configs/clickhouse/config.d/remote.xml\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/clickhouse/config.d/remote.xml\nrename to tests/testflows/ldap/authentication/configs/clickhouse/config.d/remote.xml\ndiff --git a/tests/testflows/ldap/configs/clickhouse/config.d/ssl.xml b/tests/testflows/ldap/authentication/configs/clickhouse/config.d/ssl.xml\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/clickhouse/config.d/ssl.xml\nrename to tests/testflows/ldap/authentication/configs/clickhouse/config.d/ssl.xml\ndiff --git a/tests/testflows/ldap/configs/clickhouse/config.d/storage.xml b/tests/testflows/ldap/authentication/configs/clickhouse/config.d/storage.xml\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/clickhouse/config.d/storage.xml\nrename to tests/testflows/ldap/authentication/configs/clickhouse/config.d/storage.xml\ndiff --git a/tests/testflows/ldap/configs/clickhouse/config.d/zookeeper.xml b/tests/testflows/ldap/authentication/configs/clickhouse/config.d/zookeeper.xml\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/clickhouse/config.d/zookeeper.xml\nrename to tests/testflows/ldap/authentication/configs/clickhouse/config.d/zookeeper.xml\ndiff --git a/tests/testflows/ldap/configs/clickhouse/config.xml b/tests/testflows/ldap/authentication/configs/clickhouse/config.xml\nsimilarity index 97%\nrename from tests/testflows/ldap/configs/clickhouse/config.xml\nrename to tests/testflows/ldap/authentication/configs/clickhouse/config.xml\nindex d34d2c352537..e28a0c8e255b 100644\n--- a/tests/testflows/ldap/configs/clickhouse/config.xml\n+++ b/tests/testflows/ldap/authentication/configs/clickhouse/config.xml\n@@ -117,11 +117,17 @@\n     <!-- Directory with user provided files that are accessible by 'file' table function. -->\n     <user_files_path>/var/lib/clickhouse/user_files/</user_files_path>\n \n-    <!-- Path to folder where users and roles created by SQL commands are stored. -->\n-    <access_control_path>/var/lib/clickhouse/access/</access_control_path>\n-\n-    <!-- Path to configuration file with users, access rights, profiles of settings, quotas. -->\n-    <users_config>users.xml</users_config>\n+    <!-- Sources to read users, roles, access rights, profiles of settings, quotas. -->\n+    <user_directories>\n+        <users_xml>\n+            <!-- Path to configuration file with predefined users. -->\n+            <path>users.xml</path>\n+        </users_xml>\n+        <local_directory>\n+            <!-- Path to folder where users created by SQL commands are stored. -->\n+            <path>/var/lib/clickhouse/access/</path>\n+        </local_directory>\n+    </user_directories>\n \n     <!-- Default profile of settings. -->\n     <default_profile>default</default_profile>\ndiff --git a/tests/testflows/ldap/configs/clickhouse/ssl/dhparam.pem b/tests/testflows/ldap/authentication/configs/clickhouse/ssl/dhparam.pem\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/clickhouse/ssl/dhparam.pem\nrename to tests/testflows/ldap/authentication/configs/clickhouse/ssl/dhparam.pem\ndiff --git a/tests/testflows/ldap/configs/clickhouse/ssl/server.crt b/tests/testflows/ldap/authentication/configs/clickhouse/ssl/server.crt\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/clickhouse/ssl/server.crt\nrename to tests/testflows/ldap/authentication/configs/clickhouse/ssl/server.crt\ndiff --git a/tests/testflows/ldap/configs/clickhouse/ssl/server.key b/tests/testflows/ldap/authentication/configs/clickhouse/ssl/server.key\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/clickhouse/ssl/server.key\nrename to tests/testflows/ldap/authentication/configs/clickhouse/ssl/server.key\ndiff --git a/tests/testflows/ldap/configs/clickhouse/users.xml b/tests/testflows/ldap/authentication/configs/clickhouse/users.xml\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/clickhouse/users.xml\nrename to tests/testflows/ldap/authentication/configs/clickhouse/users.xml\ndiff --git a/tests/testflows/ldap/configs/clickhouse1/config.d/macros.xml b/tests/testflows/ldap/authentication/configs/clickhouse1/config.d/macros.xml\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/clickhouse1/config.d/macros.xml\nrename to tests/testflows/ldap/authentication/configs/clickhouse1/config.d/macros.xml\ndiff --git a/tests/testflows/ldap/configs/clickhouse2/config.d/macros.xml b/tests/testflows/ldap/authentication/configs/clickhouse2/config.d/macros.xml\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/clickhouse2/config.d/macros.xml\nrename to tests/testflows/ldap/authentication/configs/clickhouse2/config.d/macros.xml\ndiff --git a/tests/testflows/ldap/configs/clickhouse3/config.d/macros.xml b/tests/testflows/ldap/authentication/configs/clickhouse3/config.d/macros.xml\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/clickhouse3/config.d/macros.xml\nrename to tests/testflows/ldap/authentication/configs/clickhouse3/config.d/macros.xml\ndiff --git a/tests/testflows/ldap/configs/ldap1/config/export.ldif b/tests/testflows/ldap/authentication/configs/ldap1/config/export.ldif\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/ldap1/config/export.ldif\nrename to tests/testflows/ldap/authentication/configs/ldap1/config/export.ldif\ndiff --git a/tests/testflows/ldap/configs/ldap2/certs/ca.crt b/tests/testflows/ldap/authentication/configs/ldap2/certs/ca.crt\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/ldap2/certs/ca.crt\nrename to tests/testflows/ldap/authentication/configs/ldap2/certs/ca.crt\ndiff --git a/tests/testflows/ldap/configs/ldap2/certs/dhparam.pem b/tests/testflows/ldap/authentication/configs/ldap2/certs/dhparam.pem\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/ldap2/certs/dhparam.pem\nrename to tests/testflows/ldap/authentication/configs/ldap2/certs/dhparam.pem\ndiff --git a/tests/testflows/ldap/configs/ldap2/certs/ldap.crt b/tests/testflows/ldap/authentication/configs/ldap2/certs/ldap.crt\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/ldap2/certs/ldap.crt\nrename to tests/testflows/ldap/authentication/configs/ldap2/certs/ldap.crt\ndiff --git a/tests/testflows/ldap/configs/ldap2/certs/ldap.csr b/tests/testflows/ldap/authentication/configs/ldap2/certs/ldap.csr\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/ldap2/certs/ldap.csr\nrename to tests/testflows/ldap/authentication/configs/ldap2/certs/ldap.csr\ndiff --git a/tests/testflows/ldap/configs/ldap2/certs/ldap.key b/tests/testflows/ldap/authentication/configs/ldap2/certs/ldap.key\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/ldap2/certs/ldap.key\nrename to tests/testflows/ldap/authentication/configs/ldap2/certs/ldap.key\ndiff --git a/tests/testflows/ldap/configs/ldap2/config/export.ldif b/tests/testflows/ldap/authentication/configs/ldap2/config/export.ldif\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/ldap2/config/export.ldif\nrename to tests/testflows/ldap/authentication/configs/ldap2/config/export.ldif\ndiff --git a/tests/testflows/ldap/configs/ldap3/certs/ca.crt b/tests/testflows/ldap/authentication/configs/ldap3/certs/ca.crt\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/ldap3/certs/ca.crt\nrename to tests/testflows/ldap/authentication/configs/ldap3/certs/ca.crt\ndiff --git a/tests/testflows/ldap/configs/ldap3/certs/dhparam.pem b/tests/testflows/ldap/authentication/configs/ldap3/certs/dhparam.pem\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/ldap3/certs/dhparam.pem\nrename to tests/testflows/ldap/authentication/configs/ldap3/certs/dhparam.pem\ndiff --git a/tests/testflows/ldap/configs/ldap3/certs/ldap.crt b/tests/testflows/ldap/authentication/configs/ldap3/certs/ldap.crt\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/ldap3/certs/ldap.crt\nrename to tests/testflows/ldap/authentication/configs/ldap3/certs/ldap.crt\ndiff --git a/tests/testflows/ldap/configs/ldap3/certs/ldap.csr b/tests/testflows/ldap/authentication/configs/ldap3/certs/ldap.csr\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/ldap3/certs/ldap.csr\nrename to tests/testflows/ldap/authentication/configs/ldap3/certs/ldap.csr\ndiff --git a/tests/testflows/ldap/configs/ldap3/certs/ldap.key b/tests/testflows/ldap/authentication/configs/ldap3/certs/ldap.key\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/ldap3/certs/ldap.key\nrename to tests/testflows/ldap/authentication/configs/ldap3/certs/ldap.key\ndiff --git a/tests/testflows/ldap/configs/ldap3/config/export.ldif b/tests/testflows/ldap/authentication/configs/ldap3/config/export.ldif\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/ldap3/config/export.ldif\nrename to tests/testflows/ldap/authentication/configs/ldap3/config/export.ldif\ndiff --git a/tests/testflows/ldap/configs/ldap4/certs/ca.crt b/tests/testflows/ldap/authentication/configs/ldap4/certs/ca.crt\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/ldap4/certs/ca.crt\nrename to tests/testflows/ldap/authentication/configs/ldap4/certs/ca.crt\ndiff --git a/tests/testflows/ldap/configs/ldap4/certs/dhparam.pem b/tests/testflows/ldap/authentication/configs/ldap4/certs/dhparam.pem\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/ldap4/certs/dhparam.pem\nrename to tests/testflows/ldap/authentication/configs/ldap4/certs/dhparam.pem\ndiff --git a/tests/testflows/ldap/configs/ldap4/certs/ldap.crt b/tests/testflows/ldap/authentication/configs/ldap4/certs/ldap.crt\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/ldap4/certs/ldap.crt\nrename to tests/testflows/ldap/authentication/configs/ldap4/certs/ldap.crt\ndiff --git a/tests/testflows/ldap/configs/ldap4/certs/ldap.csr b/tests/testflows/ldap/authentication/configs/ldap4/certs/ldap.csr\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/ldap4/certs/ldap.csr\nrename to tests/testflows/ldap/authentication/configs/ldap4/certs/ldap.csr\ndiff --git a/tests/testflows/ldap/configs/ldap4/certs/ldap.key b/tests/testflows/ldap/authentication/configs/ldap4/certs/ldap.key\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/ldap4/certs/ldap.key\nrename to tests/testflows/ldap/authentication/configs/ldap4/certs/ldap.key\ndiff --git a/tests/testflows/ldap/configs/ldap4/config/export.ldif b/tests/testflows/ldap/authentication/configs/ldap4/config/export.ldif\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/ldap4/config/export.ldif\nrename to tests/testflows/ldap/authentication/configs/ldap4/config/export.ldif\ndiff --git a/tests/testflows/ldap/configs/ldap5/config/export.ldif b/tests/testflows/ldap/authentication/configs/ldap5/config/export.ldif\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/ldap5/config/export.ldif\nrename to tests/testflows/ldap/authentication/configs/ldap5/config/export.ldif\ndiff --git a/tests/testflows/ldap/configs/ldap5/ldap2/certs/ca.crt b/tests/testflows/ldap/authentication/configs/ldap5/ldap2/certs/ca.crt\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/ldap5/ldap2/certs/ca.crt\nrename to tests/testflows/ldap/authentication/configs/ldap5/ldap2/certs/ca.crt\ndiff --git a/tests/testflows/ldap/configs/ldap5/ldap2/certs/dhparam.pem b/tests/testflows/ldap/authentication/configs/ldap5/ldap2/certs/dhparam.pem\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/ldap5/ldap2/certs/dhparam.pem\nrename to tests/testflows/ldap/authentication/configs/ldap5/ldap2/certs/dhparam.pem\ndiff --git a/tests/testflows/ldap/configs/ldap5/ldap2/certs/ldap.crt b/tests/testflows/ldap/authentication/configs/ldap5/ldap2/certs/ldap.crt\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/ldap5/ldap2/certs/ldap.crt\nrename to tests/testflows/ldap/authentication/configs/ldap5/ldap2/certs/ldap.crt\ndiff --git a/tests/testflows/ldap/configs/ldap5/ldap2/certs/ldap.csr b/tests/testflows/ldap/authentication/configs/ldap5/ldap2/certs/ldap.csr\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/ldap5/ldap2/certs/ldap.csr\nrename to tests/testflows/ldap/authentication/configs/ldap5/ldap2/certs/ldap.csr\ndiff --git a/tests/testflows/ldap/configs/ldap5/ldap2/certs/ldap.key b/tests/testflows/ldap/authentication/configs/ldap5/ldap2/certs/ldap.key\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/ldap5/ldap2/certs/ldap.key\nrename to tests/testflows/ldap/authentication/configs/ldap5/ldap2/certs/ldap.key\ndiff --git a/tests/testflows/ldap/configs/ldap5/ldap2/config/export.ldif b/tests/testflows/ldap/authentication/configs/ldap5/ldap2/config/export.ldif\nsimilarity index 100%\nrename from tests/testflows/ldap/configs/ldap5/ldap2/config/export.ldif\nrename to tests/testflows/ldap/authentication/configs/ldap5/ldap2/config/export.ldif\ndiff --git a/tests/testflows/ldap/docker-compose/clickhouse-service.yml b/tests/testflows/ldap/authentication/docker-compose/clickhouse-service.yml\nsimilarity index 100%\nrename from tests/testflows/ldap/docker-compose/clickhouse-service.yml\nrename to tests/testflows/ldap/authentication/docker-compose/clickhouse-service.yml\ndiff --git a/tests/testflows/ldap/docker-compose/docker-compose.yml b/tests/testflows/ldap/authentication/docker-compose/docker-compose.yml\nsimilarity index 100%\nrename from tests/testflows/ldap/docker-compose/docker-compose.yml\nrename to tests/testflows/ldap/authentication/docker-compose/docker-compose.yml\ndiff --git a/tests/testflows/ldap/docker-compose/openldap-service.yml b/tests/testflows/ldap/authentication/docker-compose/openldap-service.yml\nsimilarity index 100%\nrename from tests/testflows/ldap/docker-compose/openldap-service.yml\nrename to tests/testflows/ldap/authentication/docker-compose/openldap-service.yml\ndiff --git a/tests/testflows/ldap/docker-compose/zookeeper-service.yml b/tests/testflows/ldap/authentication/docker-compose/zookeeper-service.yml\nsimilarity index 100%\nrename from tests/testflows/ldap/docker-compose/zookeeper-service.yml\nrename to tests/testflows/ldap/authentication/docker-compose/zookeeper-service.yml\ndiff --git a/tests/testflows/ldap/authentication/regression.py b/tests/testflows/ldap/authentication/regression.py\nnew file mode 100755\nindex 000000000000..9d0a5ca743f2\n--- /dev/null\n+++ b/tests/testflows/ldap/authentication/regression.py\n@@ -0,0 +1,54 @@\n+#!/usr/bin/env python3\n+import sys\n+from testflows.core import *\n+\n+append_path(sys.path, \"..\", \"..\")\n+\n+from helpers.cluster import Cluster\n+from helpers.argparser import argparser\n+from ldap.authentication.requirements import *\n+\n+# Cross-outs of known fails\n+xfails = {\n+    \"connection protocols/tls/tls_require_cert='try'\":\n+     [(Fail, \"can't be tested with self-signed certificates\")],\n+    \"connection protocols/tls/tls_require_cert='demand'\":\n+     [(Fail, \"can't be tested with self-signed certificates\")],\n+    \"connection protocols/starttls/tls_require_cert='try'\":\n+     [(Fail, \"can't be tested with self-signed certificates\")],\n+    \"connection protocols/starttls/tls_require_cert='demand'\":\n+     [(Fail, \"can't be tested with self-signed certificates\")],\n+    \"connection protocols/tls require cert default demand\":\n+     [(Fail, \"can't be tested with self-signed certificates\")],\n+    \"connection protocols/starttls with custom port\":\n+     [(Fail, \"it seems that starttls is not enabled by default on custom plain-text ports in LDAP server\")],\n+    \"connection protocols/tls cipher suite\":\n+     [(Fail, \"can't get it to work\")]\n+}\n+\n+@TestFeature\n+@Name(\"authentication\")\n+@ArgumentParser(argparser)\n+@Requirements(\n+    RQ_SRS_007_LDAP_Authentication(\"1.0\")\n+)\n+@XFails(xfails)\n+def regression(self, local, clickhouse_binary_path):\n+    \"\"\"ClickHouse integration with LDAP regression module.\n+    \"\"\"\n+    nodes = {\n+        \"clickhouse\": (\"clickhouse1\", \"clickhouse2\", \"clickhouse3\"),\n+    }\n+\n+    with Cluster(local, clickhouse_binary_path, nodes=nodes) as cluster:\n+        self.context.cluster = cluster\n+\n+        Scenario(run=load(\"ldap.authentication.tests.sanity\", \"scenario\"))\n+        Scenario(run=load(\"ldap.authentication.tests.multiple_servers\", \"scenario\"))\n+        Feature(run=load(\"ldap.authentication.tests.connections\", \"feature\"))\n+        Feature(run=load(\"ldap.authentication.tests.server_config\", \"feature\"))\n+        Feature(run=load(\"ldap.authentication.tests.user_config\", \"feature\"))\n+        Feature(run=load(\"ldap.authentication.tests.authentications\", \"feature\"))\n+\n+if main():\n+    regression()\ndiff --git a/tests/testflows/ldap/requirements/__init__.py b/tests/testflows/ldap/authentication/requirements/__init__.py\nsimilarity index 100%\nrename from tests/testflows/ldap/requirements/__init__.py\nrename to tests/testflows/ldap/authentication/requirements/__init__.py\ndiff --git a/tests/testflows/ldap/requirements/requirements.md b/tests/testflows/ldap/authentication/requirements/requirements.md\nsimilarity index 98%\nrename from tests/testflows/ldap/requirements/requirements.md\nrename to tests/testflows/ldap/authentication/requirements/requirements.md\nindex 6d787670138e..d322db703303 100644\n--- a/tests/testflows/ldap/requirements/requirements.md\n+++ b/tests/testflows/ldap/authentication/requirements/requirements.md\n@@ -524,9 +524,6 @@ used to authenticate users using an [LDAP] server.\n ## References\n \n * **ClickHouse:** https://clickhouse.tech\n-* **GitHub repository:** https://github.com/ClickHouse/ClickHouse/blob/master/tests/testflows/ldap/requirements/requirements.md\n-* **Revision history:** https://github.com/ClickHouse/ClickHouse/commits/master/tests/testflows/ldap/requirements/requirements.md\n-* **Git:** https://git-scm.com/\n \n [Anonymous Authentication Mechanism of Simple Bind]: https://ldapwiki.com/wiki/Simple%20Authentication#section-Simple+Authentication-AnonymousAuthenticationMechanismOfSimpleBind\n [Unauthenticated Authentication Mechanism of Simple Bind]: https://ldapwiki.com/wiki/Simple%20Authentication#section-Simple+Authentication-UnauthenticatedAuthenticationMechanismOfSimpleBind\n@@ -539,6 +536,6 @@ used to authenticate users using an [LDAP] server.\n [LDAP]: https://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol\n [ClickHouse]: https://clickhouse.tech\n [GitHub]: https://github.com\n-[GitHub Repository]: https://github.com/ClickHouse/ClickHouse/blob/master/tests/testflows/ldap/requirements/requirements.md\n-[Revision History]: https://github.com/ClickHouse/ClickHouse/commits/master/tests/testflows/ldap/requirements/requirements.md\n+[GitHub Repository]: https://github.com/ClickHouse/ClickHouse/blob/master/tests/testflows/ldap/authentication/requirements/requirements.md\n+[Revision History]: https://github.com/ClickHouse/ClickHouse/commits/master/tests/testflows/ldap/authentication/requirements/requirements.md\n [Git]: https://git-scm.com/\ndiff --git a/tests/testflows/ldap/requirements/requirements.py b/tests/testflows/ldap/authentication/requirements/requirements.py\nsimilarity index 100%\nrename from tests/testflows/ldap/requirements/requirements.py\nrename to tests/testflows/ldap/authentication/requirements/requirements.py\ndiff --git a/tests/testflows/ldap/tests/authentications.py b/tests/testflows/ldap/authentication/tests/authentications.py\nsimilarity index 99%\nrename from tests/testflows/ldap/tests/authentications.py\nrename to tests/testflows/ldap/authentication/tests/authentications.py\nindex a1fb27bd51a0..1b21dce7cc19 100644\n--- a/tests/testflows/ldap/tests/authentications.py\n+++ b/tests/testflows/ldap/authentication/tests/authentications.py\n@@ -4,8 +4,8 @@\n from multiprocessing.dummy import Pool\n from testflows.core import *\n from testflows.asserts import error\n-from ldap.tests.common import *\n-from ldap.requirements import *\n+from ldap.authentication.tests.common import *\n+from ldap.authentication.requirements import *\n \n servers = {\n     \"openldap1\": {\ndiff --git a/tests/testflows/ldap/tests/common.py b/tests/testflows/ldap/authentication/tests/common.py\nsimilarity index 78%\nrename from tests/testflows/ldap/tests/common.py\nrename to tests/testflows/ldap/authentication/tests/common.py\nindex c065576c9d44..cf5cfc1d5733 100644\n--- a/tests/testflows/ldap/tests/common.py\n+++ b/tests/testflows/ldap/authentication/tests/common.py\n@@ -47,6 +47,37 @@ def xml_append(root, tag, text):\n def randomword(length, chars=ASCII_CHARS):\n     return ''.join(random.choice(chars) for i in range(length))\n \n+def restart(node=None, safe=False, timeout=20):\n+    \"\"\"Restart ClickHouse server and wait for config to be reloaded.\n+    \"\"\"\n+    with When(\"I restart ClickHouse server node\"):\n+        if node is None:\n+            node = current().context.node\n+\n+        with node.cluster.shell(node.name) as bash:\n+            bash.expect(bash.prompt)\n+\n+            with By(\"closing terminal to the node to be restarted\"):\n+                bash.close()\n+\n+            with And(\"getting current log size\"):\n+                logsize = \\\n+                    node.command(\"ls -s --block-size=1 /var/log/clickhouse-server/clickhouse-server.log\").output.split(\" \")[\n+                    0].strip()\n+\n+            with And(\"restarting ClickHouse server\"):\n+                node.restart(safe=safe)\n+\n+            with Then(\"tailing the log file from using previous log size as the offset\"):\n+                bash.prompt = bash.__class__.prompt\n+                bash.open()\n+                bash.send(f\"tail -c +{logsize} -f /var/log/clickhouse-server/clickhouse-server.log\")\n+\n+            with And(\"waiting for config reload message in the log file\"):\n+                bash.expect(\n+                    f\"ConfigReloader: Loaded config '/etc/clickhouse-server/config.xml', performed update on configuration\",\n+                    timeout=timeout)\n+\n def add_config(config, timeout=20, restart=False):\n     \"\"\"Add dynamic configuration file to ClickHouse.\n \n@@ -54,6 +85,48 @@ def add_config(config, timeout=20, restart=False):\n     :param config: configuration file description\n     :param timeout: timeout, default: 20 sec\n     \"\"\"\n+    def check_preprocessed_config_is_updated():\n+        \"\"\"Check that preprocessed config is updated.\n+        \"\"\"\n+        started = time.time()\n+        command = f\"cat /var/lib/clickhouse/preprocessed_configs/{config.preprocessed_name} | grep {config.uid}{' > /dev/null' if not settings.debug else ''}\"\n+        while time.time() - started < timeout:\n+            exitcode = node.command(command, steps=False).exitcode\n+            if exitcode == 0:\n+                break\n+            time.sleep(1)\n+        assert exitcode == 0, error()\n+\n+    def wait_for_config_to_be_loaded():\n+        \"\"\"Wait for config to be loaded.\n+        \"\"\"\n+        if restart:\n+            with When(\"I close terminal to the node to be restarted\"):\n+                bash.close()\n+\n+            with And(\"I get the current log size\"):\n+                logsize = \\\n+                    node.command(\"ls -s --block-size=1 /var/log/clickhouse-server/clickhouse-server.log\").output.split(\" \")[\n+                    0].strip()\n+\n+            with And(\"I restart ClickHouse to apply the config changes\"):\n+                node.restart(safe=False)\n+\n+            with Then(\"I tail the log file from using previous log size as the offset\"):\n+                bash.prompt = bash.__class__.prompt\n+                bash.open()\n+                bash.send(f\"tail -c +{logsize} -f /var/log/clickhouse-server/clickhouse-server.log\")\n+\n+        with Then(\"I wait for config reload message in the log file\"):\n+            if restart:\n+                bash.expect(\n+                    f\"ConfigReloader: Loaded config '/etc/clickhouse-server/config.xml', performed update on configuration\",\n+                    timeout=timeout)\n+            else:\n+                bash.expect(\n+                    f\"ConfigReloader: Loaded config '/etc/clickhouse-server/{config.preprocessed_name}', performed update on configuration\",\n+                    timeout=timeout)\n+\n     node = current().context.node\n     try:\n         with Given(f\"{config.name}\"):\n@@ -70,29 +143,10 @@ def add_config(config, timeout=20, restart=False):\n                     node.command(command, steps=False, exitcode=0)\n \n                 with Then(f\"{config.preprocessed_name} should be updated\", description=f\"timeout {timeout}\"):\n-                    started = time.time()\n-                    command = f\"cat /var/lib/clickhouse/preprocessed_configs/{config.preprocessed_name} | grep {config.uid}{' > /dev/null' if not settings.debug else ''}\"\n-                    while time.time() - started < timeout:\n-                        exitcode = node.command(command, steps=False).exitcode\n-                        if exitcode == 0:\n-                            break\n-                        time.sleep(1)\n-                    assert exitcode == 0, error()\n-\n-                if restart:\n-                    bash.close()\n-                    logsize = node.command(\"ls -s --block-size=1 /var/log/clickhouse-server/clickhouse-server.log\").output.split(\" \")[0].strip()\n-                    with When(\"I restart ClickHouse to apply the config changes\"):\n-                        node.restart(safe=False)\n-                    bash.prompt = bash.__class__.prompt\n-                    bash.open()\n-                    bash.send(f\"tail -c +{logsize} -f /var/log/clickhouse-server/clickhouse-server.log\")\n-\n-                with When(\"I wait for config to be loaded\"):\n-                    if restart:\n-                        bash.expect(f\"ConfigReloader: Loaded config '/etc/clickhouse-server/config.xml', performed update on configuration\", timeout=timeout)\n-                    else:\n-                        bash.expect(f\"ConfigReloader: Loaded config '/etc/clickhouse-server/{config.preprocessed_name}', performed update on configuration\", timeout=timeout)\n+                    check_preprocessed_config_is_updated()\n+\n+                with And(\"I wait for config to be reloaded\"):\n+                    wait_for_config_to_be_loaded()\n         yield\n     finally:\n         with Finally(f\"I remove {config.name}\"):\n@@ -103,20 +157,11 @@ def add_config(config, timeout=20, restart=False):\n                 with By(\"removing the config file\", description=config.path):\n                     node.command(f\"rm -rf {config.path}\", exitcode=0)\n \n-                with Then(f\"{config.preprocessed_name} should be updated\"):\n-                    started = time.time()\n-                    command = f\"cat /var/lib/clickhouse/preprocessed_configs/{config.preprocessed_name} | grep '{config.uid}'{' > /dev/null' if not settings.debug else ''}\"\n-                    while time.time() - started < timeout:\n-                        exitcode = node.command(command, steps=False).exitcode\n-                        if exitcode == 1:\n-                            break\n-                        time.sleep(1)\n-                    assert exitcode == 1, error()\n-\n-                with When(\"I wait for config to be loaded\"):\n-                    started = time.time()\n-                    bash.expect(f\"ConfigReloader: Loaded config '/etc/clickhouse-server/{config.preprocessed_name}', performed update on configuration\", timeout=timeout)\n+                with Then(f\"{config.preprocessed_name} should be updated\", description=f\"timeout {timeout}\"):\n+                    check_preprocessed_config_is_updated()\n \n+                with And(\"I wait for config to be reloaded\"):\n+                    wait_for_config_to_be_loaded()\n \n def create_ldap_servers_config_content(servers, config_d_dir=\"/etc/clickhouse-server/config.d\", config_file=\"ldap_servers.xml\"):\n     \"\"\"Create LDAP servers configuration content.\n@@ -172,7 +217,7 @@ def create_ldap_users_config_content(*users, config_d_dir=\"/etc/clickhouse-serve\n     return Config(content, path, name, uid, \"users.xml\")\n \n def add_users_identified_with_ldap(*users):\n-    \"\"\"Add one or more users that are identified via \n+    \"\"\"Add one or more users that are identified via\n     an ldap server using RBAC.\n     \"\"\"\n     node = current().context.node\n@@ -288,6 +333,7 @@ def add_user_to_ldap(cn, userpassword, givenname=None, homedirectory=None, sn=No\n     }\n \n     lines = []\n+\n     for key, value in list(user.items()):\n         if key.startswith(\"_\"):\n             continue\ndiff --git a/tests/testflows/ldap/tests/connections.py b/tests/testflows/ldap/authentication/tests/connections.py\nsimilarity index 98%\nrename from tests/testflows/ldap/tests/connections.py\nrename to tests/testflows/ldap/authentication/tests/connections.py\nindex 8de4b3f4d016..f16f6c29b0ed 100644\n--- a/tests/testflows/ldap/tests/connections.py\n+++ b/tests/testflows/ldap/authentication/tests/connections.py\n@@ -1,8 +1,8 @@\n from testflows.core import *\n from testflows.asserts import error\n \n-from ldap.tests.common import login\n-from ldap.requirements import *\n+from ldap.authentication.tests.common import login\n+from ldap.authentication.requirements import *\n \n @TestScenario\n @Requirements(\ndiff --git a/tests/testflows/ldap/tests/multiple_servers.py b/tests/testflows/ldap/authentication/tests/multiple_servers.py\nsimilarity index 88%\nrename from tests/testflows/ldap/tests/multiple_servers.py\nrename to tests/testflows/ldap/authentication/tests/multiple_servers.py\nindex aefc0116fa2e..6e906023b0a6 100644\n--- a/tests/testflows/ldap/tests/multiple_servers.py\n+++ b/tests/testflows/ldap/authentication/tests/multiple_servers.py\n@@ -1,8 +1,8 @@\n from testflows.core import *\n from testflows.asserts import error\n \n-from ldap.tests.common import login\n-from ldap.requirements import RQ_SRS_007_LDAP_Authentication_MultipleServers\n+from ldap.authentication.tests.common import login\n+from ldap.authentication.requirements import RQ_SRS_007_LDAP_Authentication_MultipleServers\n \n @TestScenario\n @Name(\"multiple servers\")\ndiff --git a/tests/testflows/ldap/tests/sanity.py b/tests/testflows/ldap/authentication/tests/sanity.py\nsimilarity index 95%\nrename from tests/testflows/ldap/tests/sanity.py\nrename to tests/testflows/ldap/authentication/tests/sanity.py\nindex 9e5d8a2ddd78..542fa2a48b10 100644\n--- a/tests/testflows/ldap/tests/sanity.py\n+++ b/tests/testflows/ldap/authentication/tests/sanity.py\n@@ -1,7 +1,7 @@\n from testflows.core import *\n from testflows.asserts import error\n \n-from ldap.tests.common import add_user_to_ldap, delete_user_from_ldap\n+from ldap.authentication.tests.common import add_user_to_ldap, delete_user_from_ldap\n \n @TestScenario\n @Name(\"sanity\")\ndiff --git a/tests/testflows/ldap/tests/server_config.py b/tests/testflows/ldap/authentication/tests/server_config.py\nsimilarity index 84%\nrename from tests/testflows/ldap/tests/server_config.py\nrename to tests/testflows/ldap/authentication/tests/server_config.py\nindex f3d03434afea..80f2a496b0ec 100644\n--- a/tests/testflows/ldap/tests/server_config.py\n+++ b/tests/testflows/ldap/authentication/tests/server_config.py\n@@ -1,7 +1,7 @@\n from testflows.core import *\n \n-from ldap.tests.common import *\n-from ldap.requirements import *\n+from ldap.authentication.tests.common import *\n+from ldap.authentication.requirements import *\n \n @TestScenario\n @Requirements(\n@@ -28,7 +28,8 @@ def invalid_host(self):\n     servers = {\"foo\": {\"host\": \"foo\", \"port\": \"389\", \"enable_tls\": \"no\"}}\n     users = [{\n         \"server\": \"foo\", \"username\": \"user1\", \"password\": \"user1\", \"login\": True,\n-        \"exitcode\": 20, \"message\": \"DB::Exception: Can't contact LDAP server\"\n+        \"exitcode\": 4,\n+        \"message\": \"DB::Exception: user1: Authentication failed: password is incorrect or there is no user with such name\"\n     }]\n     login(servers, *users)\n \n@@ -44,7 +45,8 @@ def empty_host(self):\n     servers = {\"foo\": {\"host\": \"\", \"port\": \"389\", \"enable_tls\": \"no\"}}\n     users = [{\n         \"server\": \"foo\", \"username\": \"user1\", \"password\": \"user1\", \"login\": True,\n-        \"exitcode\": 36, \"message\": \"DB::Exception: LDAP server 'foo' is not configured.\"\n+        \"exitcode\": 4,\n+        \"message\": \"DB::Exception: user1: Authentication failed: password is incorrect or there is no user with such name\"\n     }]\n     login(servers, *users)\n \n@@ -60,7 +62,8 @@ def missing_host(self):\n     servers = {\"foo\": {\"port\": \"389\", \"enable_tls\": \"no\"}}\n     users = [{\n         \"server\": \"foo\", \"username\": \"user1\", \"password\": \"user1\", \"login\": True,\n-        \"exitcode\": 36, \"message\": \"DB::Exception: LDAP server 'foo' is not configured.\"\n+        \"exitcode\": 4,\n+        \"message\": \"DB::Exception: user1: Authentication failed: password is incorrect or there is no user with such name\"\n     }]\n     login(servers, *users)\n \n@@ -75,7 +78,8 @@ def invalid_port(self):\n     servers = {\"openldap1\": {\"host\": \"openldap1\", \"port\": \"3890\", \"enable_tls\": \"no\"}}\n     users = [{\n         \"server\": \"openldap1\", \"username\": \"user1\", \"password\": \"user1\", \"login\": True,\n-        \"exitcode\": 20, \"message\": \"DB::Exception: Can't contact LDAP server.\"\n+        \"exitcode\": 4,\n+        \"message\": \"DB::Exception: user1: Authentication failed: password is incorrect or there is no user with such name\"\n     }]\n     login(servers, *users)\n \n@@ -93,7 +97,8 @@ def invalid_auth_dn_prefix(self):\n     }}\n     users = [{\n         \"server\": \"openldap1\", \"username\": \"user1\", \"password\": \"user1\", \"login\": True,\n-        \"exitcode\": 20, \"message\": \"DB::Exception: Invalid DN syntax: invalid DN\"\n+        \"exitcode\": 4,\n+        \"message\": \"DB::Exception: user1: Authentication failed: password is incorrect or there is no user with such name\"\n     }]\n     login(servers, *users)\n \n@@ -110,7 +115,8 @@ def invalid_auth_dn_suffix(self):\n     }}\n     users = [{\n         \"server\": \"openldap1\", \"username\": \"user1\", \"password\": \"user1\", \"login\": True,\n-        \"exitcode\": 20, \"message\": \"DB::Exception: Invalid DN syntax: invalid DN\"\n+        \"exitcode\": 4,\n+        \"message\": \"DB::Exception: user1: Authentication failed: password is incorrect or there is no user with such name\"\n     }]\n     login(servers, *users)\n \n@@ -127,7 +133,8 @@ def invalid_enable_tls_value(self):\n     }}\n     users = [{\n         \"server\": \"openldap1\", \"username\": \"user1\", \"password\": \"user1\", \"login\": True,\n-        \"exitcode\": 36, \"message\": \"DB::Exception: LDAP server 'openldap1' is not configured\"\n+        \"exitcode\": 4,\n+        \"message\": \"DB::Exception: user1: Authentication failed: password is incorrect or there is no user with such name\"\n     }]\n     login(servers, *users)\n \n@@ -148,7 +155,8 @@ def invalid_tls_require_cert_value(self):\n     }}\n     users = [{\n         \"server\": \"openldap2\", \"username\": \"user2\", \"password\": \"user2\", \"login\": True,\n-        \"exitcode\": 36, \"message\": \"DB::Exception: LDAP server 'openldap2' is not configured\"\n+        \"exitcode\": 4,\n+        \"message\": \"DB::Exception: user2: Authentication failed: password is incorrect or there is no user with such name\"\n     }]\n     login(servers, *users)\n \n@@ -167,8 +175,8 @@ def empty_ca_cert_dir(self):\n     }}\n     users = [{\n         \"server\": \"openldap2\", \"username\": \"user2\", \"password\": \"user2\", \"login\": True,\n-        \"exitcode\": 20,\n-        \"message\": \"DB::Exception: Can't contact LDAP server: error:14000086:SSL routines::certificate verify failed (self signed certificate in certificate chain\"\n+        \"exitcode\": 4,\n+        \"message\": \"DB::Exception: user2: Authentication failed: password is incorrect or there is no user with such name\"\n     }]\n     login(servers, *users)\n \n@@ -187,8 +195,8 @@ def empty_ca_cert_file(self):\n     }}\n     users = [{\n         \"server\": \"openldap2\", \"username\": \"user2\", \"password\": \"user2\", \"login\": True,\n-        \"exitcode\": 20,\n-        \"message\": \"Received from localhost:9000. DB::Exception: Can't contact LDAP server: error:14000086:SSL routines::certificate verify failed (self signed certificate in certificate chain)\"\n+        \"exitcode\": 4,\n+        \"message\": \"DB::Exception: user2: Authentication failed: password is incorrect or there is no user with such name\"\n     }]\n     login(servers, *users)\n \ndiff --git a/tests/testflows/ldap/tests/user_config.py b/tests/testflows/ldap/authentication/tests/user_config.py\nsimilarity index 96%\nrename from tests/testflows/ldap/tests/user_config.py\nrename to tests/testflows/ldap/authentication/tests/user_config.py\nindex f609231b7525..36ed33ed17ab 100644\n--- a/tests/testflows/ldap/tests/user_config.py\n+++ b/tests/testflows/ldap/authentication/tests/user_config.py\n@@ -2,8 +2,8 @@\n \n from testflows.core import *\n \n-from ldap.tests.common import *\n-from ldap.requirements import *\n+from ldap.authentication.tests.common import *\n+from ldap.authentication.requirements import *\n \n @TestScenario\n @Requirements(\n@@ -54,8 +54,8 @@ def empty_server_not_defined(self, timeout=20):\n         \"auth_dn_prefix\": \"cn=\", \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\"\n     }}\n     users = [{\"server\": \"foo\", \"username\": \"user1\", \"password\": \"user1\", \"login\": True,\n-        \"errorcode\": 36,\n-        \"message\": \"DB::Exception: LDAP server 'foo' is not configured\"\n+        \"errorcode\": 4,\n+        \"message\": \"DB::Exception: user1: Authentication failed: password is incorrect or there is no user with such name\"\n     }]\n     login(servers, *users)\n \ndiff --git a/tests/testflows/ldap/external_user_directory/__init__.py b/tests/testflows/ldap/external_user_directory/__init__.py\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/CA/ca.crt b/tests/testflows/ldap/external_user_directory/configs/CA/ca.crt\nnew file mode 100644\nindex 000000000000..8c71e3afc91d\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/CA/ca.crt\n@@ -0,0 +1,22 @@\n+-----BEGIN CERTIFICATE-----\n+MIIDlTCCAn2gAwIBAgIUJBqw2dHM2DDCZjYSkPOESlvDH6swDQYJKoZIhvcNAQEL\n+BQAwWjELMAkGA1UEBhMCQ0ExCzAJBgNVBAgMAk9OMQ8wDQYDVQQHDAZPdHRhd2Ex\n+ETAPBgNVBAoMCEFsdGluaXR5MQswCQYDVQQLDAJRQTENMAsGA1UEAwwEcm9vdDAe\n+Fw0yMDA2MTExOTAzNDhaFw0zMDA2MDkxOTAzNDhaMFoxCzAJBgNVBAYTAkNBMQsw\n+CQYDVQQIDAJPTjEPMA0GA1UEBwwGT3R0YXdhMREwDwYDVQQKDAhBbHRpbml0eTEL\n+MAkGA1UECwwCUUExDTALBgNVBAMMBHJvb3QwggEiMA0GCSqGSIb3DQEBAQUAA4IB\n+DwAwggEKAoIBAQC9Irr0zGV+HCI2fZ0ht4hR5It4Sbjz4RwZV8ENRP/+TEz8l9eK\n+J6ygxhKX7SMYzIs/jS9Gsq4plX1r2ujW1qRf8yLpR4+dGLP+jBRi1drj0XjZXosT\n+SERjWzgPauWxL9LN8+l26eBAqz6fw5e0W8WRSTgf5iGiCcKOTmaATIUjP0CdfWKK\n+qpktI4vhe++CXZFJ3usR+8KZ/FwwbCLJM/3J2HnbcXfcaYPYvr1tfqLudKSTbG9H\n+M3+AVwjctdesc/0sbd51Zsm0ClQptMbuKnDCYauGg61kNkgbgPgRmH9Pzo67DtxF\n+/WW+PtOzq8xLOifciQ9Piboy9QBSQZGwf4wzAgMBAAGjUzBRMB0GA1UdDgQWBBSi\n+njya0RDozx3OZTLYFpwqYnlpIDAfBgNVHSMEGDAWgBSinjya0RDozx3OZTLYFpwq\n+YnlpIDAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQBAD7VyFg7F\n+U1C25KFvtauchAOjCW6w7U/b3z1dVZvcQ88/kH1VsLUcfGixlSilUEfPTJsi7OA0\n+R5BQdh2GGcjUJv4iqEFGU05KvMVmRRKn08P62+ZhJxKMxG26VzcliRZzCMkI6d0W\n+lFwI6nM45yeqdHVh5k4xbuJzqpbD9BtXXLI+/Ra9Fx8S9ETA3GdidpZLU5P1VLxq\n+UuedfqyAVWZXpr6TAURGxouRmRzul9yFzbSUex+MLEIPrstjtEwV3+tBQZJz9xAS\n+TVPj+Nv3LO7GCq54bdwkq1ioWbSL2hEmABkj6kdW/JwmfhGHf/2rirDVMzrTYw07\n+dFJfAZC+FEsv\n+-----END CERTIFICATE-----\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/CA/ca.key b/tests/testflows/ldap/external_user_directory/configs/CA/ca.key\nnew file mode 100644\nindex 000000000000..e7a7f664dcf5\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/CA/ca.key\n@@ -0,0 +1,30 @@\n+-----BEGIN RSA PRIVATE KEY-----\n+Proc-Type: 4,ENCRYPTED\n+DEK-Info: AES-256-CBC,D06B9754A2069EBB4E77065DC9B605A1\n+\n+FJT794Z6AUuUB5Vp5W2iR6zzCvQUg2dtKoE+xhFdbgC7lmSfA2W/O9fx15Il67Yj\n+Bbpm9Y6yteUSDQpJrvBdkhXeBkYEa5K1CA+0Jdx98nzwP3KBhHNxVVrTWRc5kniB\n+LMV3iBQEbAafxgL7gN+EWr3eV7w7ZSqT7D5br/mlBALU62gv2UzwTXLu1CgyNWMC\n+HIPjIX50Zga+BnhZhtQvM4Yj1gOsn+X6AaEZ3KjTfCDqthYQf2ldswW4gAlPAq83\n++INq9Spx+QG97Z+1XO2DmmGTZL0z+OFLT+3y26/UcftM26ODY09Dcf3gt0n6RIUV\n+0KsD1qQL0ppu4CHVnbIkOKMBe86qBl+kG8FVmyhgZ8D9ULlF1tpyTVKvHR82V2B5\n+ztbc5EY1Fhb+r7OVVJlbCeo/bWmWybODZrpN49x5gGZpM3+8ApaHupGZ+cRFkQKG\n+rDpqC5gflT3WwFNxtP5noWcV+Gzb3riXNM3c8G5aIpLZwmmaTLK9ahKqMcq4Ljf+\n+hir8kuCMqIKt3m7Ceoj4wAHSP8xO0y/cc1WYNb3CI0Emk795aR6IPUw4vDEXHG27\n+OLoCJTvl/JKRWJGkdQx8wKAs/uw/qwtbhYoQJccTjfvy4NXH3tpSgxCE8OTWuEch\n+TAN8ra1PDGAUu+1MeT5gZ9uI1BEU6hXMME4mVRpJdcmw9MVy3V+B6rkUqX3kFAfR\n+e2ueF5qgIp+A4/UlVe5cKdWAQxu4BnUESLooA7cbgcLypdao9bRx9bXH8S3aNgxW\n+IdgICpc/v8wAX2yqMe191KgR9Vh1p0RCw/kEGVgWfY/IaQpsaYuq5quZbvr/fN5T\n+d++ySAMaPysaCadLUdZJLw56uk4Y+PYzR+ygjTX9dCCHedrAU8RYM55FJ/fyD3bQ\n+Hn9/n7PZyWy6u/TYt6dhlcYxaS3Opzw4eAQB8tGZJRYQ3AKpHpTEC57lXoMnUPKo\n++nBmb0+YulylMZdns0WIBJlcv6qzIaNhDMrjyi18n1ezzPIGH7ivUjoXy2FL23q5\n+f3aqJK4UUDEDkC8IeZkS+ykYxnohjFDhUyBe5gjryLqdMdy9EerehCWPf425AztX\n+c/EWPzDl46qmxWhugOlz3Fiw95VlYu0MUDRayHuZiYPplgJypChuU4EHJ+q8V2z3\n+BwjSo1bD4nfc8f68qEOtdZ1u/ClcolMwlZQYDJz/DiE4JOcd2Gx4QSF5vaInm0/4\n+mMj/ZWna4DAYFbH8IGh7xUPDqeIWhBYlgrD69ajKyay5Vu3La/d2QW20BhX35Ro2\n+ZJVR+lfioMmxn4y481H2pv+5gOlGwh02Oa8qLhZBb8W+DvFShNk6mk87eCForFFT\n+CDgmvfsC/cS2wZkcFTecq6vbjFlt+OF13NCKlcO3wCm44D+bwVPeMrU6HycCVQw7\n+SASrnP/th5sJbv11byb2lKgVdVHWk090bqnDwB9H2hGIb9JnPC9ZpaL/mocYyzTi\n+H9fcBrMYkL09FJGr3Uff7qEY4XQTMlLadXue3iKd19PRgV8cRyKp37MYI9/3iLwv\n+eYHLtMfrifZahf1ksOPeBphnlfzWo9qqfooUCaGxfSlNPUHhrHZ4aMiRyTE8Xeh2\n+-----END RSA PRIVATE KEY-----\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/CA/ca.srl b/tests/testflows/ldap/external_user_directory/configs/CA/ca.srl\nnew file mode 100644\nindex 000000000000..66feb9c8a359\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/CA/ca.srl\n@@ -0,0 +1,1 @@\n+227B125D27B6B1A4B5955361365DF8EC2D7098C1\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/CA/dhparam.pem b/tests/testflows/ldap/external_user_directory/configs/CA/dhparam.pem\nnew file mode 100644\nindex 000000000000..554d75696ee1\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/CA/dhparam.pem\n@@ -0,0 +1,8 @@\n+-----BEGIN DH PARAMETERS-----\n+MIIBCAKCAQEA1iatTn4jdw1WIu09qeLj8OEeLhzG/w2lI4RUeJT9nU+WTwegpvLN\n+/MvrIMIKHRmItyxgraYFau2moC7RKm7OKLmFt6e34QeMvM1vXpuwQav6mfp8GsYL\n+mEIw5riFcB73E32NN3g7qmfmurkTF28BohmqhuQp2et7FNoGBKQ6ePZzGHWil3yG\n+nEnCwyK0o3eP2IEytx2N50uUWVdfg3MN34L3wqpUivArrjBkoMpqm3/V3wdfoYG9\n+ZQkH0gIxT/2FIixCLGlfBsJ1qA/Apz1BJZbGqVu5M5iiQmq+LWN5JLS3xYai4wJL\n+rIY8DhjbciSNVWkwTJHzaLwIQa9a6p6mUwIBAg==\n+-----END DH PARAMETERS-----\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/CA/passphrase.txt b/tests/testflows/ldap/external_user_directory/configs/CA/passphrase.txt\nnew file mode 100644\nindex 000000000000..2cf58b2364c3\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/CA/passphrase.txt\n@@ -0,0 +1,1 @@\n+altinity\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/clickhouse/common.xml b/tests/testflows/ldap/external_user_directory/configs/clickhouse/common.xml\nnew file mode 100644\nindex 000000000000..df952b28c82d\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/clickhouse/common.xml\n@@ -0,0 +1,6 @@\n+<yandex>\n+    <timezone>Europe/Moscow</timezone>\n+    <listen_host replace=\"replace\">0.0.0.0</listen_host>\n+    <path>/var/lib/clickhouse/</path>\n+    <tmp_path>/var/lib/clickhouse/tmp/</tmp_path>\n+</yandex>\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/logs.xml b/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/logs.xml\nnew file mode 100644\nindex 000000000000..bdf1bbc11c11\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/logs.xml\n@@ -0,0 +1,17 @@\n+<yandex>\n+    <shutdown_wait_unfinished>3</shutdown_wait_unfinished>\n+    <logger>\n+        <level>trace</level>\n+        <log>/var/log/clickhouse-server/log.log</log>\n+        <errorlog>/var/log/clickhouse-server/log.err.log</errorlog>\n+        <size>1000M</size>\n+        <count>10</count>\n+        <stderr>/var/log/clickhouse-server/stderr.log</stderr>\n+        <stdout>/var/log/clickhouse-server/stdout.log</stdout>\n+    </logger>\n+    <part_log>\n+        <database>system</database>\n+        <table>part_log</table>\n+        <flush_interval_milliseconds>500</flush_interval_milliseconds>\n+    </part_log>\n+</yandex>\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/ports.xml b/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/ports.xml\nnew file mode 100644\nindex 000000000000..fbc6cea74c0c\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/ports.xml\n@@ -0,0 +1,5 @@\n+<?xml version=\"1.0\"?>\n+<yandex>\n+    <https_port>8443</https_port>\n+    <tcp_port_secure>9440</tcp_port_secure>\n+</yandex>\n\\ No newline at end of file\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/remote.xml b/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/remote.xml\nnew file mode 100644\nindex 000000000000..51be2a6e8e3b\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/remote.xml\n@@ -0,0 +1,107 @@\n+<?xml version=\"1.0\"?>\n+<yandex>\n+    <remote_servers>\n+        <replicated_cluster>\n+            <shard>\n+                <internal_replication>true</internal_replication>\n+                <replica>\n+                    <host>clickhouse1</host>\n+                    <port>9000</port>\n+                </replica>\n+                <replica>\n+                    <host>clickhouse2</host>\n+                    <port>9000</port>\n+                </replica>\n+                <replica>\n+                    <host>clickhouse3</host>\n+                    <port>9000</port>\n+                </replica>\n+            </shard>\n+        </replicated_cluster>\n+        <!--\n+        <replicated_cluster_readonly>\n+            <shard>\n+                <internal_replication>true</internal_replication>\n+                <replica>\n+                    <host>clickhouse1</host>\n+                    <port>9000</port>\n+                    <user>readonly</user>\n+                </replica>\n+                <replica>\n+                    <host>clickhouse2</host>\n+                    <port>9000</port>\n+                    <user>readonly</user>\n+                </replica>\n+                <replica>\n+                    <host>clickhouse3</host>\n+                    <port>9000</port>\n+                    <user>readonly</user>\n+                </replica>\n+            </shard>\n+        </replicated_cluster_readonly>\n+        -->\n+        <replicated_cluster_secure>\n+            <shard>\n+                <internal_replication>true</internal_replication>\n+                <replica>\n+                    <host>clickhouse1</host>\n+                    <port>9440</port>\n+                    <secure>1</secure>\n+                </replica>\n+                <replica>\n+                    <host>clickhouse2</host>\n+                    <port>9440</port>\n+                    <secure>1</secure>\n+                </replica>\n+                <replica>\n+                    <host>clickhouse3</host>\n+                    <port>9440</port>\n+                    <secure>1</secure>\n+                </replica>\n+            </shard>\n+        </replicated_cluster_secure>\n+        <sharded_cluster>\n+            <shard>\n+                <replica>\n+                    <host>clickhouse1</host>\n+                    <port>9000</port>\n+                </replica>\n+            </shard>\n+            <shard>\n+                <replica>\n+                    <host>clickhouse2</host>\n+                    <port>9000</port>\n+                </replica>\n+            </shard>\n+            <shard>\n+                <replica>\n+                    <host>clickhouse3</host>\n+                    <port>9000</port>\n+                </replica>\n+            </shard>\n+        </sharded_cluster>\n+        <sharded_cluster_secure>\n+            <shard>\n+                <replica>\n+                    <host>clickhouse1</host>\n+                    <port>9440</port>\n+                    <secure>1</secure>\n+                </replica>\n+            </shard>\n+            <shard>\n+                <replica>\n+                    <host>clickhouse2</host>\n+                    <port>9440</port>\n+                    <secure>1</secure>\n+                </replica>\n+            </shard>\n+            <shard>\n+                <replica>\n+                    <host>clickhouse3</host>\n+                    <port>9440</port>\n+                    <secure>1</secure>\n+                </replica>\n+            </shard>\n+        </sharded_cluster_secure>\n+    </remote_servers>\n+</yandex>\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/ssl.xml b/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/ssl.xml\nnew file mode 100644\nindex 000000000000..ca65ffd5e043\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/ssl.xml\n@@ -0,0 +1,17 @@\n+<yandex>\n+    <openSSL>\n+        <server>\n+            <certificateFile>/etc/clickhouse-server/ssl/server.crt</certificateFile>\n+            <privateKeyFile>/etc/clickhouse-server/ssl/server.key</privateKeyFile>\n+            <verificationMode>none</verificationMode>\n+            <cacheSessions>true</cacheSessions>\n+        </server>\n+        <client>\n+            <cacheSessions>true</cacheSessions>\n+            <verificationMode>none</verificationMode>\n+            <invalidCertificateHandler>\n+                <name>AcceptCertificateHandler</name>\n+            </invalidCertificateHandler>\n+        </client>\n+    </openSSL>\n+</yandex>\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/storage.xml b/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/storage.xml\nnew file mode 100644\nindex 000000000000..618fd6b6d24a\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/storage.xml\n@@ -0,0 +1,20 @@\n+<yandex>\n+\n+<storage_configuration>\n+    <disks>\n+        <default>\n+            <keep_free_space_bytes>1024</keep_free_space_bytes>\n+        </default>\n+    </disks>\n+    <policies>\n+        <default>\n+            <volumes>\n+                <default>\n+                    <disk>default</disk>\n+                </default>\n+            </volumes>\n+        </default>\n+    </policies>\n+</storage_configuration>\n+\n+</yandex>\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/zookeeper.xml b/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/zookeeper.xml\nnew file mode 100644\nindex 000000000000..96270e7b645a\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/zookeeper.xml\n@@ -0,0 +1,10 @@\n+<?xml version=\"1.0\"?>\n+<yandex>\n+    <zookeeper>\n+\t    <node index=\"1\">\n+\t\t    <host>zookeeper</host>\n+\t\t    <port>2181</port>\n+\t    </node>\n+        <session_timeout_ms>15000</session_timeout_ms>\n+    </zookeeper>\n+</yandex>\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.xml b/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.xml\nnew file mode 100644\nindex 000000000000..e28a0c8e255b\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.xml\n@@ -0,0 +1,442 @@\n+<?xml version=\"1.0\"?>\n+<!--\n+  NOTE: User and query level settings are set up in \"users.xml\" file.\n+-->\n+<yandex>\n+    <logger>\n+        <!-- Possible levels: https://github.com/pocoproject/poco/blob/develop/Foundation/include/Poco/Logger.h#L105 -->\n+        <level>trace</level>\n+        <log>/var/log/clickhouse-server/clickhouse-server.log</log>\n+        <errorlog>/var/log/clickhouse-server/clickhouse-server.err.log</errorlog>\n+        <size>1000M</size>\n+        <count>10</count>\n+        <!-- <console>1</console> --> <!-- Default behavior is autodetection (log to console if not daemon mode and is tty) -->\n+    </logger>\n+    <!--display_name>production</display_name--> <!-- It is the name that will be shown in the client -->\n+    <http_port>8123</http_port>\n+    <tcp_port>9000</tcp_port>\n+\n+    <!-- For HTTPS and SSL over native protocol. -->\n+    <!--\n+    <https_port>8443</https_port>\n+    <tcp_port_secure>9440</tcp_port_secure>\n+    -->\n+\n+    <!-- Used with https_port and tcp_port_secure. Full ssl options list: https://github.com/ClickHouse-Extras/poco/blob/master/NetSSL_OpenSSL/include/Poco/Net/SSLManager.h#L71 -->\n+    <openSSL>\n+        <server> <!-- Used for https server AND secure tcp port -->\n+            <!-- openssl req -subj \"/CN=localhost\" -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout /etc/clickhouse-server/server.key -out /etc/clickhouse-server/server.crt -->\n+            <certificateFile>/etc/clickhouse-server/server.crt</certificateFile>\n+            <privateKeyFile>/etc/clickhouse-server/server.key</privateKeyFile>\n+            <!-- openssl dhparam -out /etc/clickhouse-server/dhparam.pem 4096 -->\n+            <dhParamsFile>/etc/clickhouse-server/dhparam.pem</dhParamsFile>\n+            <verificationMode>none</verificationMode>\n+            <loadDefaultCAFile>true</loadDefaultCAFile>\n+            <cacheSessions>true</cacheSessions>\n+            <disableProtocols>sslv2,sslv3</disableProtocols>\n+            <preferServerCiphers>true</preferServerCiphers>\n+        </server>\n+\n+        <client> <!-- Used for connecting to https dictionary source -->\n+            <loadDefaultCAFile>true</loadDefaultCAFile>\n+            <cacheSessions>true</cacheSessions>\n+            <disableProtocols>sslv2,sslv3</disableProtocols>\n+            <preferServerCiphers>true</preferServerCiphers>\n+            <!-- Use for self-signed: <verificationMode>none</verificationMode> -->\n+            <invalidCertificateHandler>\n+                <!-- Use for self-signed: <name>AcceptCertificateHandler</name> -->\n+                <name>RejectCertificateHandler</name>\n+            </invalidCertificateHandler>\n+        </client>\n+    </openSSL>\n+\n+    <!-- Default root page on http[s] server. For example load UI from https://tabix.io/ when opening http://localhost:8123 -->\n+    <!--\n+    <http_server_default_response><![CDATA[<html ng-app=\"SMI2\"><head><base href=\"http://ui.tabix.io/\"></head><body><div ui-view=\"\" class=\"content-ui\"></div><script src=\"http://loader.tabix.io/master.js\"></script></body></html>]]></http_server_default_response>\n+    -->\n+\n+    <!-- Port for communication between replicas. Used for data exchange. -->\n+    <interserver_http_port>9009</interserver_http_port>\n+\n+    <!-- Hostname that is used by other replicas to request this server.\n+         If not specified, than it is determined analoguous to 'hostname -f' command.\n+         This setting could be used to switch replication to another network interface.\n+      -->\n+    <!--\n+    <interserver_http_host>example.yandex.ru</interserver_http_host>\n+    -->\n+\n+    <!-- Listen specified host. use :: (wildcard IPv6 address), if you want to accept connections both with IPv4 and IPv6 from everywhere. -->\n+    <!-- <listen_host>::</listen_host> -->\n+    <!-- Same for hosts with disabled ipv6: -->\n+    <!-- <listen_host>0.0.0.0</listen_host> -->\n+\n+    <!-- Default values - try listen localhost on ipv4 and ipv6: -->\n+    <!--\n+    <listen_host>::1</listen_host>\n+    <listen_host>127.0.0.1</listen_host>\n+    -->\n+    <!-- Don't exit if ipv6 or ipv4 unavailable, but listen_host with this protocol specified -->\n+    <!-- <listen_try>0</listen_try> -->\n+\n+    <!-- Allow listen on same address:port -->\n+    <!-- <listen_reuse_port>0</listen_reuse_port> -->\n+\n+    <!-- <listen_backlog>64</listen_backlog> -->\n+\n+    <max_connections>4096</max_connections>\n+    <keep_alive_timeout>3</keep_alive_timeout>\n+\n+    <!-- Maximum number of concurrent queries. -->\n+    <max_concurrent_queries>100</max_concurrent_queries>\n+\n+    <!-- Set limit on number of open files (default: maximum). This setting makes sense on Mac OS X because getrlimit() fails to retrieve\n+         correct maximum value. -->\n+    <!-- <max_open_files>262144</max_open_files> -->\n+\n+    <!-- Size of cache of uncompressed blocks of data, used in tables of MergeTree family.\n+         In bytes. Cache is single for server. Memory is allocated only on demand.\n+         Cache is used when 'use_uncompressed_cache' user setting turned on (off by default).\n+         Uncompressed cache is advantageous only for very short queries and in rare cases.\n+      -->\n+    <uncompressed_cache_size>8589934592</uncompressed_cache_size>\n+\n+    <!-- Approximate size of mark cache, used in tables of MergeTree family.\n+         In bytes. Cache is single for server. Memory is allocated only on demand.\n+         You should not lower this value.\n+      -->\n+    <mark_cache_size>5368709120</mark_cache_size>\n+\n+\n+    <!-- Path to data directory, with trailing slash. -->\n+    <path>/var/lib/clickhouse/</path>\n+\n+    <!-- Path to temporary data for processing hard queries. -->\n+    <tmp_path>/var/lib/clickhouse/tmp/</tmp_path>\n+\n+    <!-- Directory with user provided files that are accessible by 'file' table function. -->\n+    <user_files_path>/var/lib/clickhouse/user_files/</user_files_path>\n+\n+    <!-- Sources to read users, roles, access rights, profiles of settings, quotas. -->\n+    <user_directories>\n+        <users_xml>\n+            <!-- Path to configuration file with predefined users. -->\n+            <path>users.xml</path>\n+        </users_xml>\n+        <local_directory>\n+            <!-- Path to folder where users created by SQL commands are stored. -->\n+            <path>/var/lib/clickhouse/access/</path>\n+        </local_directory>\n+    </user_directories>\n+\n+    <!-- Default profile of settings. -->\n+    <default_profile>default</default_profile>\n+\n+    <!-- System profile of settings. This settings are used by internal processes (Buffer storage, Distibuted DDL worker and so on). -->\n+    <!-- <system_profile>default</system_profile> -->\n+\n+    <!-- Default database. -->\n+    <default_database>default</default_database>\n+\n+    <!-- Server time zone could be set here.\n+\n+         Time zone is used when converting between String and DateTime types,\n+          when printing DateTime in text formats and parsing DateTime from text,\n+          it is used in date and time related functions, if specific time zone was not passed as an argument.\n+\n+         Time zone is specified as identifier from IANA time zone database, like UTC or Africa/Abidjan.\n+         If not specified, system time zone at server startup is used.\n+\n+         Please note, that server could display time zone alias instead of specified name.\n+         Example: W-SU is an alias for Europe/Moscow and Zulu is an alias for UTC.\n+    -->\n+    <!-- <timezone>Europe/Moscow</timezone> -->\n+\n+    <!-- You can specify umask here (see \"man umask\"). Server will apply it on startup.\n+         Number is always parsed as octal. Default umask is 027 (other users cannot read logs, data files, etc; group can only read).\n+    -->\n+    <!-- <umask>022</umask> -->\n+\n+    <!-- Perform mlockall after startup to lower first queries latency\n+          and to prevent clickhouse executable from being paged out under high IO load.\n+         Enabling this option is recommended but will lead to increased startup time for up to a few seconds.\n+    -->\n+    <mlock_executable>false</mlock_executable>\n+\n+    <!-- Configuration of clusters that could be used in Distributed tables.\n+         https://clickhouse.yandex/docs/en/table_engines/distributed/\n+      -->\n+    <remote_servers incl=\"remote\" >\n+        <!-- Test only shard config for testing distributed storage -->\n+        <test_shard_localhost>\n+            <shard>\n+                <replica>\n+                    <host>localhost</host>\n+                    <port>9000</port>\n+                </replica>\n+            </shard>\n+        </test_shard_localhost>\n+        <test_cluster_two_shards_localhost>\n+             <shard>\n+                 <replica>\n+                     <host>localhost</host>\n+                     <port>9000</port>\n+                 </replica>\n+             </shard>\n+             <shard>\n+                 <replica>\n+                     <host>localhost</host>\n+                     <port>9000</port>\n+                 </replica>\n+             </shard>\n+         </test_cluster_two_shards_localhost>\n+        <test_shard_localhost_secure>\n+            <shard>\n+                <replica>\n+                    <host>localhost</host>\n+                    <port>9440</port>\n+                    <secure>1</secure>\n+                </replica>\n+            </shard>\n+        </test_shard_localhost_secure>\n+        <test_unavailable_shard>\n+            <shard>\n+                <replica>\n+                    <host>localhost</host>\n+                    <port>9000</port>\n+                </replica>\n+            </shard>\n+            <shard>\n+                <replica>\n+                    <host>localhost</host>\n+                    <port>1</port>\n+                </replica>\n+            </shard>\n+        </test_unavailable_shard>\n+    </remote_servers>\n+\n+\n+    <!-- If element has 'incl' attribute, then for it's value will be used corresponding substitution from another file.\n+         By default, path to file with substitutions is /etc/metrika.xml. It could be changed in config in 'include_from' element.\n+         Values for substitutions are specified in /yandex/name_of_substitution elements in that file.\n+      -->\n+\n+    <!-- ZooKeeper is used to store metadata about replicas, when using Replicated tables.\n+         Optional. If you don't use replicated tables, you could omit that.\n+\n+         See https://clickhouse.yandex/docs/en/table_engines/replication/\n+      -->\n+    <zookeeper incl=\"zookeeper\" optional=\"true\" />\n+\n+    <!-- Substitutions for parameters of replicated tables.\n+          Optional. If you don't use replicated tables, you could omit that.\n+\n+         See https://clickhouse.yandex/docs/en/table_engines/replication/#creating-replicated-tables\n+      -->\n+    <macros incl=\"macros\" optional=\"true\" />\n+\n+\n+    <!-- Reloading interval for embedded dictionaries, in seconds. Default: 3600. -->\n+    <builtin_dictionaries_reload_interval>3600</builtin_dictionaries_reload_interval>\n+\n+\n+    <!-- Maximum session timeout, in seconds. Default: 3600. -->\n+    <max_session_timeout>3600</max_session_timeout>\n+\n+    <!-- Default session timeout, in seconds. Default: 60. -->\n+    <default_session_timeout>60</default_session_timeout>\n+\n+    <!-- Sending data to Graphite for monitoring. Several sections can be defined. -->\n+    <!--\n+        interval - send every X second\n+        root_path - prefix for keys\n+        hostname_in_path - append hostname to root_path (default = true)\n+        metrics - send data from table system.metrics\n+        events - send data from table system.events\n+        asynchronous_metrics - send data from table system.asynchronous_metrics\n+    -->\n+    <!--\n+    <graphite>\n+        <host>localhost</host>\n+        <port>42000</port>\n+        <timeout>0.1</timeout>\n+        <interval>60</interval>\n+        <root_path>one_min</root_path>\n+        <hostname_in_path>true</hostname_in_path>\n+\n+        <metrics>true</metrics>\n+        <events>true</events>\n+        <asynchronous_metrics>true</asynchronous_metrics>\n+    </graphite>\n+    <graphite>\n+        <host>localhost</host>\n+        <port>42000</port>\n+        <timeout>0.1</timeout>\n+        <interval>1</interval>\n+        <root_path>one_sec</root_path>\n+\n+        <metrics>true</metrics>\n+        <events>true</events>\n+        <asynchronous_metrics>false</asynchronous_metrics>\n+    </graphite>\n+    -->\n+\n+\n+    <!-- Query log. Used only for queries with setting log_queries = 1. -->\n+    <query_log>\n+        <!-- What table to insert data. If table is not exist, it will be created.\n+             When query log structure is changed after system update,\n+              then old table will be renamed and new table will be created automatically.\n+        -->\n+        <database>system</database>\n+        <table>query_log</table>\n+        <!--\n+            PARTITION BY expr https://clickhouse.yandex/docs/en/table_engines/custom_partitioning_key/\n+            Example:\n+                event_date\n+                toMonday(event_date)\n+                toYYYYMM(event_date)\n+                toStartOfHour(event_time)\n+        -->\n+        <partition_by>toYYYYMM(event_date)</partition_by>\n+        <!-- Interval of flushing data. -->\n+        <flush_interval_milliseconds>7500</flush_interval_milliseconds>\n+    </query_log>\n+\n+    <!-- Trace log. Stores stack traces collected by query profilers.\n+         See query_profiler_real_time_period_ns and query_profiler_cpu_time_period_ns settings. -->\n+    <trace_log>\n+        <database>system</database>\n+        <table>trace_log</table>\n+\n+        <partition_by>toYYYYMM(event_date)</partition_by>\n+        <flush_interval_milliseconds>7500</flush_interval_milliseconds>\n+    </trace_log>\n+\n+    <!-- Query thread log. Has information about all threads participated in query execution.\n+         Used only for queries with setting log_query_threads = 1. -->\n+    <query_thread_log>\n+        <database>system</database>\n+        <table>query_thread_log</table>\n+        <partition_by>toYYYYMM(event_date)</partition_by>\n+        <flush_interval_milliseconds>7500</flush_interval_milliseconds>\n+    </query_thread_log>\n+\n+    <!-- Uncomment if use part log.\n+         Part log contains information about all actions with parts in MergeTree tables (creation, deletion, merges, downloads).\n+    <part_log>\n+        <database>system</database>\n+        <table>part_log</table>\n+        <flush_interval_milliseconds>7500</flush_interval_milliseconds>\n+    </part_log>\n+    -->\n+\n+    <!-- Uncomment to write text log into table.\n+         Text log contains all information from usual server log but stores it in structured and efficient way.\n+    <text_log>\n+        <database>system</database>\n+        <table>text_log</table>\n+        <flush_interval_milliseconds>7500</flush_interval_milliseconds>\n+    </text_log>\n+    -->\n+\n+    <!-- Parameters for embedded dictionaries, used in Yandex.Metrica.\n+         See https://clickhouse.yandex/docs/en/dicts/internal_dicts/\n+    -->\n+\n+    <!-- Path to file with region hierarchy. -->\n+    <!-- <path_to_regions_hierarchy_file>/opt/geo/regions_hierarchy.txt</path_to_regions_hierarchy_file> -->\n+\n+    <!-- Path to directory with files containing names of regions -->\n+    <!-- <path_to_regions_names_files>/opt/geo/</path_to_regions_names_files> -->\n+\n+\n+    <!-- Configuration of external dictionaries. See:\n+         https://clickhouse.yandex/docs/en/dicts/external_dicts/\n+    -->\n+    <dictionaries_config>*_dictionary.xml</dictionaries_config>\n+\n+    <!-- Uncomment if you want data to be compressed 30-100% better.\n+         Don't do that if you just started using ClickHouse.\n+      -->\n+    <compression incl=\"compression\">\n+    <!--\n+        <!- - Set of variants. Checked in order. Last matching case wins. If nothing matches, lz4 will be used. - ->\n+        <case>\n+\n+            <!- - Conditions. All must be satisfied. Some conditions may be omitted. - ->\n+            <min_part_size>10000000000</min_part_size>        <!- - Min part size in bytes. - ->\n+            <min_part_size_ratio>0.01</min_part_size_ratio>   <!- - Min size of part relative to whole table size. - ->\n+\n+            <!- - What compression method to use. - ->\n+            <method>zstd</method>\n+        </case>\n+    -->\n+    </compression>\n+\n+    <!-- Allow to execute distributed DDL queries (CREATE, DROP, ALTER, RENAME) on cluster.\n+         Works only if ZooKeeper is enabled. Comment it if such functionality isn't required. -->\n+    <distributed_ddl>\n+        <!-- Path in ZooKeeper to queue with DDL queries -->\n+        <path>/clickhouse/task_queue/ddl</path>\n+\n+        <!-- Settings from this profile will be used to execute DDL queries -->\n+        <!-- <profile>default</profile> -->\n+    </distributed_ddl>\n+\n+    <!-- Settings to fine tune MergeTree tables. See documentation in source code, in MergeTreeSettings.h -->\n+    <!--\n+    <merge_tree>\n+        <max_suspicious_broken_parts>5</max_suspicious_broken_parts>\n+    </merge_tree>\n+    -->\n+\n+    <!-- Protection from accidental DROP.\n+         If size of a MergeTree table is greater than max_table_size_to_drop (in bytes) than table could not be dropped with any DROP query.\n+         If you want do delete one table and don't want to restart clickhouse-server, you could create special file <clickhouse-path>/flags/force_drop_table and make DROP once.\n+         By default max_table_size_to_drop is 50GB; max_table_size_to_drop=0 allows to DROP any tables.\n+         The same for max_partition_size_to_drop.\n+         Uncomment to disable protection.\n+    -->\n+    <!-- <max_table_size_to_drop>0</max_table_size_to_drop> -->\n+    <!-- <max_partition_size_to_drop>0</max_partition_size_to_drop> -->\n+\n+    <!-- Example of parameters for GraphiteMergeTree table engine -->\n+    <graphite_rollup_example>\n+        <pattern>\n+            <regexp>click_cost</regexp>\n+            <function>any</function>\n+            <retention>\n+                <age>0</age>\n+                <precision>3600</precision>\n+            </retention>\n+            <retention>\n+                <age>86400</age>\n+                <precision>60</precision>\n+            </retention>\n+        </pattern>\n+        <default>\n+            <function>max</function>\n+            <retention>\n+                <age>0</age>\n+                <precision>60</precision>\n+            </retention>\n+            <retention>\n+                <age>3600</age>\n+                <precision>300</precision>\n+            </retention>\n+            <retention>\n+                <age>86400</age>\n+                <precision>3600</precision>\n+            </retention>\n+        </default>\n+    </graphite_rollup_example>\n+\n+    <!-- Directory in <clickhouse-path> containing schema files for various input formats.\n+         The directory will be created if it doesn't exist.\n+      -->\n+    <format_schema_path>/var/lib/clickhouse/format_schemas/</format_schema_path>\n+\n+    <!-- Uncomment to disable ClickHouse internal DNS caching. -->\n+    <!-- <disable_internal_dns_cache>1</disable_internal_dns_cache> -->\n+</yandex>\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/clickhouse/ssl/dhparam.pem b/tests/testflows/ldap/external_user_directory/configs/clickhouse/ssl/dhparam.pem\nnew file mode 100644\nindex 000000000000..2e6cee0798d7\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/clickhouse/ssl/dhparam.pem\n@@ -0,0 +1,8 @@\n+-----BEGIN DH PARAMETERS-----\n+MIIBCAKCAQEAua92DDli13gJ+//ZXyGaggjIuidqB0crXfhUlsrBk9BV1hH3i7fR\n+XGP9rUdk2ubnB3k2ejBStL5oBrkHm9SzUFSQHqfDjLZjKoUpOEmuDc4cHvX1XTR5\n+Pr1vf5cd0yEncJWG5W4zyUB8k++SUdL2qaeslSs+f491HBLDYn/h8zCgRbBvxhxb\n+9qeho1xcbnWeqkN6Kc9bgGozA16P9NLuuLttNnOblkH+lMBf42BSne/TWt3AlGZf\n+slKmmZcySUhF8aKfJnLKbkBCFqOtFRh8zBA9a7g+BT/lSANATCDPaAk1YVih2EKb\n+dpc3briTDbRsiqg2JKMI7+VdULY9bh3EawIBAg==\n+-----END DH PARAMETERS-----\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/clickhouse/ssl/server.crt b/tests/testflows/ldap/external_user_directory/configs/clickhouse/ssl/server.crt\nnew file mode 100644\nindex 000000000000..7ade2d962733\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/clickhouse/ssl/server.crt\n@@ -0,0 +1,19 @@\n+-----BEGIN CERTIFICATE-----\n+MIIC/TCCAeWgAwIBAgIJANjx1QSR77HBMA0GCSqGSIb3DQEBCwUAMBQxEjAQBgNV\n+BAMMCWxvY2FsaG9zdDAgFw0xODA3MzAxODE2MDhaGA8yMjkyMDUxNDE4MTYwOFow\n+FDESMBAGA1UEAwwJbG9jYWxob3N0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB\n+CgKCAQEAs9uSo6lJG8o8pw0fbVGVu0tPOljSWcVSXH9uiJBwlZLQnhN4SFSFohfI\n+4K8U1tBDTnxPLUo/V1K9yzoLiRDGMkwVj6+4+hE2udS2ePTQv5oaMeJ9wrs+5c9T\n+4pOtlq3pLAdm04ZMB1nbrEysceVudHRkQbGHzHp6VG29Fw7Ga6YpqyHQihRmEkTU\n+7UCYNA+Vk7aDPdMS/khweyTpXYZimaK9f0ECU3/VOeG3fH6Sp2X6FN4tUj/aFXEj\n+sRmU5G2TlYiSIUMF2JPdhSihfk1hJVALrHPTU38SOL+GyyBRWdNcrIwVwbpvsvPg\n+pryMSNxnpr0AK0dFhjwnupIv5hJIOQIDAQABo1AwTjAdBgNVHQ4EFgQUjPLb3uYC\n+kcamyZHK4/EV8jAP0wQwHwYDVR0jBBgwFoAUjPLb3uYCkcamyZHK4/EV8jAP0wQw\n+DAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAM/ocuDvfPus/KpMVD51j\n+4IdlU8R0vmnYLQ+ygzOAo7+hUWP5j0yvq4ILWNmQX6HNvUggCgFv9bjwDFhb/5Vr\n+85ieWfTd9+LTjrOzTw4avdGwpX9G+6jJJSSq15tw5ElOIFb/qNA9O4dBiu8vn03C\n+L/zRSXrARhSqTW5w/tZkUcSTT+M5h28+Lgn9ysx4Ff5vi44LJ1NnrbJbEAIYsAAD\n++UA+4MBFKx1r6hHINULev8+lCfkpwIaeS8RL+op4fr6kQPxnULw8wT8gkuc8I4+L\n+P9gg/xDHB44T3ADGZ5Ib6O0DJaNiToO6rnoaaxs0KkotbvDWvRoxEytSbXKoYjYp\n+0g==\n+-----END CERTIFICATE-----\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/clickhouse/ssl/server.key b/tests/testflows/ldap/external_user_directory/configs/clickhouse/ssl/server.key\nnew file mode 100644\nindex 000000000000..f0fb61ac443f\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/clickhouse/ssl/server.key\n@@ -0,0 +1,28 @@\n+-----BEGIN PRIVATE KEY-----\n+MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCz25KjqUkbyjyn\n+DR9tUZW7S086WNJZxVJcf26IkHCVktCeE3hIVIWiF8jgrxTW0ENOfE8tSj9XUr3L\n+OguJEMYyTBWPr7j6ETa51LZ49NC/mhox4n3Cuz7lz1Pik62WreksB2bThkwHWdus\n+TKxx5W50dGRBsYfMenpUbb0XDsZrpimrIdCKFGYSRNTtQJg0D5WTtoM90xL+SHB7\n+JOldhmKZor1/QQJTf9U54bd8fpKnZfoU3i1SP9oVcSOxGZTkbZOViJIhQwXYk92F\n+KKF+TWElUAusc9NTfxI4v4bLIFFZ01ysjBXBum+y8+CmvIxI3GemvQArR0WGPCe6\n+ki/mEkg5AgMBAAECggEATrbIBIxwDJOD2/BoUqWkDCY3dGevF8697vFuZKIiQ7PP\n+TX9j4vPq0DfsmDjHvAPFkTHiTQXzlroFik3LAp+uvhCCVzImmHq0IrwvZ9xtB43f\n+7Pkc5P6h1l3Ybo8HJ6zRIY3TuLtLxuPSuiOMTQSGRL0zq3SQ5DKuGwkz+kVjHXUN\n+MR2TECFwMHKQ5VLrC+7PMpsJYyOMlDAWhRfUalxC55xOXTpaN8TxNnwQ8K2ISVY5\n+212Jz/a4hn4LdwxSz3Tiu95PN072K87HLWx3EdT6vW4Ge5P/A3y+smIuNAlanMnu\n+plHBRtpATLiTxZt/n6npyrfQVbYjSH7KWhB8hBHtaQKBgQDh9Cq1c/KtqDtE0Ccr\n+/r9tZNTUwBE6VP+3OJeKdEdtsfuxjOCkS1oAjgBJiSDOiWPh1DdoDeVZjPKq6pIu\n+Mq12OE3Doa8znfCXGbkSzEKOb2unKZMJxzrz99kXt40W5DtrqKPNb24CNqTiY8Aa\n+CjtcX+3weat82VRXvph6U8ltMwKBgQDLxjiQQzNoY7qvg7CwJCjf9qq8jmLK766g\n+1FHXopqS+dTxDLM8eJSRrpmxGWJvNeNc1uPhsKsKgotqAMdBUQTf7rSTbt4MyoH5\n+bUcRLtr+0QTK9hDWMOOvleqNXha68vATkohWYfCueNsC60qD44o8RZAS6UNy3ENq\n+cM1cxqe84wKBgQDKkHutWnooJtajlTxY27O/nZKT/HA1bDgniMuKaz4R4Gr1PIez\n+on3YW3V0d0P7BP6PWRIm7bY79vkiMtLEKdiKUGWeyZdo3eHvhDb/3DCawtau8L2K\n+GZsHVp2//mS1Lfz7Qh8/L/NedqCQ+L4iWiPnZ3THjjwn3CoZ05ucpvrAMwKBgB54\n+nay039MUVq44Owub3KDg+dcIU62U+cAC/9oG7qZbxYPmKkc4oL7IJSNecGHA5SbU\n+2268RFdl/gLz6tfRjbEOuOHzCjFPdvAdbysanpTMHLNc6FefJ+zxtgk9sJh0C4Jh\n+vxFrw9nTKKzfEl12gQ1SOaEaUIO0fEBGbe8ZpauRAoGAMAlGV+2/K4ebvAJKOVTa\n+dKAzQ+TD2SJmeR1HZmKDYddNqwtZlzg3v4ZhCk4eaUmGeC1Bdh8MDuB3QQvXz4Dr\n+vOIP4UVaOr+uM+7TgAgVnP4/K6IeJGzUDhX93pmpWhODfdu/oojEKVcpCojmEmS1\n+KCBtmIrQLqzMpnBpLNuSY+Q=\n+-----END PRIVATE KEY-----\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/clickhouse/users.xml b/tests/testflows/ldap/external_user_directory/configs/clickhouse/users.xml\nnew file mode 100644\nindex 000000000000..86b2cd9e1e3d\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/clickhouse/users.xml\n@@ -0,0 +1,133 @@\n+<?xml version=\"1.0\"?>\n+<yandex>\n+    <!-- Profiles of settings. -->\n+    <profiles>\n+        <!-- Default settings. -->\n+        <default>\n+            <!-- Maximum memory usage for processing single query, in bytes. -->\n+            <max_memory_usage>10000000000</max_memory_usage>\n+\n+            <!-- Use cache of uncompressed blocks of data. Meaningful only for processing many of very short queries. -->\n+            <use_uncompressed_cache>0</use_uncompressed_cache>\n+\n+            <!-- How to choose between replicas during distributed query processing.\n+                 random - choose random replica from set of replicas with minimum number of errors\n+                 nearest_hostname - from set of replicas with minimum number of errors, choose replica\n+                  with minimum number of different symbols between replica's hostname and local hostname\n+                  (Hamming distance).\n+                 in_order - first live replica is chosen in specified order.\n+                 first_or_random - if first replica one has higher number of errors, pick a random one from replicas with minimum number of errors.\n+            -->\n+            <load_balancing>random</load_balancing>\n+        </default>\n+\n+        <!-- Profile that allows only read queries. -->\n+        <readonly>\n+            <readonly>1</readonly>\n+        </readonly>\n+    </profiles>\n+\n+    <!-- Users and ACL. -->\n+    <users>\n+        <!-- If user name was not specified, 'default' user is used. -->\n+        <default>\n+            <!-- Password could be specified in plaintext or in SHA256 (in hex format).\n+\n+                 If you want to specify password in plaintext (not recommended), place it in 'password' element.\n+                 Example: <password>qwerty</password>.\n+                 Password could be empty.\n+\n+                 If you want to specify SHA256, place it in 'password_sha256_hex' element.\n+                 Example: <password_sha256_hex>65e84be33532fb784c48129675f9eff3a682b27168c0ea744b2cf58ee02337c5</password_sha256_hex>\n+                 Restrictions of SHA256: impossibility to connect to ClickHouse using MySQL JS client (as of July 2019).\n+\n+                 If you want to specify double SHA1, place it in 'password_double_sha1_hex' element.\n+                 Example: <password_double_sha1_hex>e395796d6546b1b65db9d665cd43f0e858dd4303</password_double_sha1_hex>\n+\n+                 How to generate decent password:\n+                 Execute: PASSWORD=$(base64 < /dev/urandom | head -c8); echo \"$PASSWORD\"; echo -n \"$PASSWORD\" | sha256sum | tr -d '-'\n+                 In first line will be password and in second - corresponding SHA256.\n+\n+                 How to generate double SHA1:\n+                 Execute: PASSWORD=$(base64 < /dev/urandom | head -c8); echo \"$PASSWORD\"; echo -n \"$PASSWORD\" | openssl dgst -sha1 -binary | openssl dgst -sha1\n+                 In first line will be password and in second - corresponding double SHA1.\n+            -->\n+            <password></password>\n+\n+            <!-- List of networks with open access.\n+\n+                 To open access from everywhere, specify:\n+                    <ip>::/0</ip>\n+\n+                 To open access only from localhost, specify:\n+                    <ip>::1</ip>\n+                    <ip>127.0.0.1</ip>\n+\n+                 Each element of list has one of the following forms:\n+                 <ip> IP-address or network mask. Examples: 213.180.204.3 or 10.0.0.1/8 or 10.0.0.1/255.255.255.0\n+                     2a02:6b8::3 or 2a02:6b8::3/64 or 2a02:6b8::3/ffff:ffff:ffff:ffff::.\n+                 <host> Hostname. Example: server01.yandex.ru.\n+                     To check access, DNS query is performed, and all received addresses compared to peer address.\n+                 <host_regexp> Regular expression for host names. Example, ^server\\d\\d-\\d\\d-\\d\\.yandex\\.ru$\n+                     To check access, DNS PTR query is performed for peer address and then regexp is applied.\n+                     Then, for result of PTR query, another DNS query is performed and all received addresses compared to peer address.\n+                     Strongly recommended that regexp is ends with $\n+                 All results of DNS requests are cached till server restart.\n+            -->\n+            <networks incl=\"networks\" replace=\"replace\">\n+                <ip>::/0</ip>\n+            </networks>\n+\n+            <!-- Settings profile for user. -->\n+            <profile>default</profile>\n+\n+            <!-- Quota for user. -->\n+            <quota>default</quota>\n+\n+            <!-- Allow access management -->\n+            <access_management>1</access_management>\n+\n+            <!-- Example of row level security policy. -->\n+            <!-- <databases>\n+                <test>\n+                    <filtered_table1>\n+                        <filter>a = 1</filter>\n+                    </filtered_table1>\n+                    <filtered_table2>\n+                        <filter>a + b &lt; 1 or c - d &gt; 5</filter>\n+                    </filtered_table2>\n+                </test>\n+            </databases> -->\n+        </default>\n+\n+        <!-- Example of user with readonly access. -->\n+        <!-- <readonly>\n+            <password></password>\n+            <networks incl=\"networks\" replace=\"replace\">\n+                <ip>::1</ip>\n+                <ip>127.0.0.1</ip>\n+            </networks>\n+            <profile>readonly</profile>\n+            <quota>default</quota>\n+        </readonly> -->\n+    </users>\n+\n+    <!-- Quotas. -->\n+    <quotas>\n+        <!-- Name of quota. -->\n+        <default>\n+            <!-- Limits for time interval. You could specify many intervals with different limits. -->\n+            <interval>\n+                <!-- Length of interval. -->\n+                <duration>3600</duration>\n+\n+                <!-- No limits. Just calculate resource usage for time interval. -->\n+                <queries>0</queries>\n+                <errors>0</errors>\n+                <result_rows>0</result_rows>\n+                <read_rows>0</read_rows>\n+                <execution_time>0</execution_time>\n+            </interval>\n+        </default>\n+    </quotas>\n+</yandex>\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/clickhouse1/config.d/macros.xml b/tests/testflows/ldap/external_user_directory/configs/clickhouse1/config.d/macros.xml\nnew file mode 100644\nindex 000000000000..6cdcc1b440c3\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/clickhouse1/config.d/macros.xml\n@@ -0,0 +1,8 @@\n+<?xml version=\"1.0\"?>\n+<yandex>\n+    <macros>\n+        <replica>clickhouse1</replica>\n+        <shard>01</shard>\n+        <shard2>01</shard2>\n+    </macros>\n+</yandex>\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/clickhouse2/config.d/macros.xml b/tests/testflows/ldap/external_user_directory/configs/clickhouse2/config.d/macros.xml\nnew file mode 100644\nindex 000000000000..a114a9ce4ab1\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/clickhouse2/config.d/macros.xml\n@@ -0,0 +1,8 @@\n+<?xml version=\"1.0\"?>\n+<yandex>\n+    <macros>\n+        <replica>clickhouse2</replica>\n+        <shard>01</shard>\n+        <shard2>02</shard2>\n+    </macros>\n+</yandex>\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/clickhouse3/config.d/macros.xml b/tests/testflows/ldap/external_user_directory/configs/clickhouse3/config.d/macros.xml\nnew file mode 100644\nindex 000000000000..904a27b01723\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/clickhouse3/config.d/macros.xml\n@@ -0,0 +1,8 @@\n+<?xml version=\"1.0\"?>\n+<yandex>\n+    <macros>\n+        <replica>clickhouse3</replica>\n+        <shard>01</shard>\n+        <shard2>03</shard2>\n+    </macros>\n+</yandex>\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/ldap1/config/export.ldif b/tests/testflows/ldap/external_user_directory/configs/ldap1/config/export.ldif\nnew file mode 100644\nindex 000000000000..621dd32ca0c0\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/ldap1/config/export.ldif\n@@ -0,0 +1,64 @@\n+# LDIF Export for dc=company,dc=com\n+# Server: openldap (openldap)\n+# Search Scope: sub\n+# Search Filter: (objectClass=*)\n+# Total Entries: 7\n+#\n+# Generated by phpLDAPadmin (http://phpldapadmin.sourceforge.net) on May 22, 2020 5:51 pm\n+# Version: 1.2.5\n+\n+# Entry 1: dc=company,dc=com\n+#dn: dc=company,dc=com\n+#dc: company\n+#o: company\n+#objectclass: top\n+#objectclass: dcObject\n+#objectclass: organization\n+\n+# Entry 2: cn=admin,dc=company,dc=com\n+#dn: cn=admin,dc=company,dc=com\n+#cn: admin\n+#description: LDAP administrator\n+#objectclass: simpleSecurityObject\n+#objectclass: organizationalRole\n+#userpassword: {SSHA}eUEupkQCTvq9SkrxfWGSe5rX+orrjVbF\n+\n+# Entry 3: ou=groups,dc=company,dc=com\n+dn: ou=groups,dc=company,dc=com\n+objectclass: organizationalUnit\n+objectclass: top\n+ou: groups\n+\n+# Entry 4: cn=admin,ou=groups,dc=company,dc=com\n+dn: cn=admin,ou=groups,dc=company,dc=com\n+cn: admin\n+gidnumber: 500\n+objectclass: posixGroup\n+objectclass: top\n+\n+# Entry 5: cn=users,ou=groups,dc=company,dc=com\n+dn: cn=users,ou=groups,dc=company,dc=com\n+cn: users\n+gidnumber: 501\n+objectclass: posixGroup\n+objectclass: top\n+\n+# Entry 6: ou=users,dc=company,dc=com\n+dn: ou=users,dc=company,dc=com\n+objectclass: organizationalUnit\n+objectclass: top\n+ou: users\n+\n+# Entry 7: cn=user1,ou=users,dc=company,dc=com\n+dn: cn=user1,ou=users,dc=company,dc=com\n+cn: user1\n+gidnumber: 501\n+givenname: John\n+homedirectory: /home/users/user1\n+objectclass: inetOrgPerson\n+objectclass: posixAccount\n+objectclass: top\n+sn: User\n+uid: user1\n+uidnumber: 1101\n+userpassword: user1\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/ldap2/certs/ca.crt b/tests/testflows/ldap/external_user_directory/configs/ldap2/certs/ca.crt\nnew file mode 100644\nindex 000000000000..8c71e3afc91d\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/ldap2/certs/ca.crt\n@@ -0,0 +1,22 @@\n+-----BEGIN CERTIFICATE-----\n+MIIDlTCCAn2gAwIBAgIUJBqw2dHM2DDCZjYSkPOESlvDH6swDQYJKoZIhvcNAQEL\n+BQAwWjELMAkGA1UEBhMCQ0ExCzAJBgNVBAgMAk9OMQ8wDQYDVQQHDAZPdHRhd2Ex\n+ETAPBgNVBAoMCEFsdGluaXR5MQswCQYDVQQLDAJRQTENMAsGA1UEAwwEcm9vdDAe\n+Fw0yMDA2MTExOTAzNDhaFw0zMDA2MDkxOTAzNDhaMFoxCzAJBgNVBAYTAkNBMQsw\n+CQYDVQQIDAJPTjEPMA0GA1UEBwwGT3R0YXdhMREwDwYDVQQKDAhBbHRpbml0eTEL\n+MAkGA1UECwwCUUExDTALBgNVBAMMBHJvb3QwggEiMA0GCSqGSIb3DQEBAQUAA4IB\n+DwAwggEKAoIBAQC9Irr0zGV+HCI2fZ0ht4hR5It4Sbjz4RwZV8ENRP/+TEz8l9eK\n+J6ygxhKX7SMYzIs/jS9Gsq4plX1r2ujW1qRf8yLpR4+dGLP+jBRi1drj0XjZXosT\n+SERjWzgPauWxL9LN8+l26eBAqz6fw5e0W8WRSTgf5iGiCcKOTmaATIUjP0CdfWKK\n+qpktI4vhe++CXZFJ3usR+8KZ/FwwbCLJM/3J2HnbcXfcaYPYvr1tfqLudKSTbG9H\n+M3+AVwjctdesc/0sbd51Zsm0ClQptMbuKnDCYauGg61kNkgbgPgRmH9Pzo67DtxF\n+/WW+PtOzq8xLOifciQ9Piboy9QBSQZGwf4wzAgMBAAGjUzBRMB0GA1UdDgQWBBSi\n+njya0RDozx3OZTLYFpwqYnlpIDAfBgNVHSMEGDAWgBSinjya0RDozx3OZTLYFpwq\n+YnlpIDAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQBAD7VyFg7F\n+U1C25KFvtauchAOjCW6w7U/b3z1dVZvcQ88/kH1VsLUcfGixlSilUEfPTJsi7OA0\n+R5BQdh2GGcjUJv4iqEFGU05KvMVmRRKn08P62+ZhJxKMxG26VzcliRZzCMkI6d0W\n+lFwI6nM45yeqdHVh5k4xbuJzqpbD9BtXXLI+/Ra9Fx8S9ETA3GdidpZLU5P1VLxq\n+UuedfqyAVWZXpr6TAURGxouRmRzul9yFzbSUex+MLEIPrstjtEwV3+tBQZJz9xAS\n+TVPj+Nv3LO7GCq54bdwkq1ioWbSL2hEmABkj6kdW/JwmfhGHf/2rirDVMzrTYw07\n+dFJfAZC+FEsv\n+-----END CERTIFICATE-----\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/ldap2/certs/dhparam.pem b/tests/testflows/ldap/external_user_directory/configs/ldap2/certs/dhparam.pem\nnew file mode 100644\nindex 000000000000..0a96faffd627\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/ldap2/certs/dhparam.pem\n@@ -0,0 +1,5 @@\n+-----BEGIN DH PARAMETERS-----\n+MIGHAoGBAJitt2hhnpDViQ5ko2ipBMdjy+bZ6FR/WdZ987R7lQvBkKehPXmxtEyV\n+AO6ofv5CZSDJokc5bUeBOAtg0EhMTCH82uPdwQvt58jRXcxXBg4JTjkx+oW9LBv2\n+FdZsbaX8+SYivmiZ0Jp8T/HBm/4DA9VBS0O5GFRS4C7dHhmSTPfDAgEC\n+-----END DH PARAMETERS-----\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/ldap2/certs/ldap.crt b/tests/testflows/ldap/external_user_directory/configs/ldap2/certs/ldap.crt\nnew file mode 100644\nindex 000000000000..9167cbf861d0\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/ldap2/certs/ldap.crt\n@@ -0,0 +1,20 @@\n+-----BEGIN CERTIFICATE-----\n+MIIDQDCCAigCFCJ7El0ntrGktZVTYTZd+OwtcJjBMA0GCSqGSIb3DQEBCwUAMFox\n+CzAJBgNVBAYTAkNBMQswCQYDVQQIDAJPTjEPMA0GA1UEBwwGT3R0YXdhMREwDwYD\n+VQQKDAhBbHRpbml0eTELMAkGA1UECwwCUUExDTALBgNVBAMMBHJvb3QwHhcNMjAw\n+NjExMTkxMTQzWhcNMzAwNjA5MTkxMTQzWjBfMQswCQYDVQQGEwJDQTELMAkGA1UE\n+CAwCT04xDzANBgNVBAcMBk90dGF3YTERMA8GA1UECgwIQWx0aW5pdHkxCzAJBgNV\n+BAsMAlFBMRIwEAYDVQQDDAlvcGVubGRhcDIwggEiMA0GCSqGSIb3DQEBAQUAA4IB\n+DwAwggEKAoIBAQC0Mbn//U56URavMgXm82FWP6vBdKuRydFX/L0M5XLlnAtk/IXG\n+/T+4t7nOBJxWmTp/xpsPtSMALE4eFJpEUEqlpVbG5DfBzVWcYOWoMeRAcHWCDkzr\n+PkB6I0dfF0Mm5hoaDhn+ZXjBWvoh/IlJdAnPg5mlejflJBQ7xtFC9eN6WjldXuRO\n+vyntGNuMfVLgITHwXuH2yZ98G0mFO6TU/9dRY/Z3D6RTSzKdb17Yk/VnG+ry92u2\n+0sgXIBvhuJuC3ksWLArwwFoMl8DVa05D4O2H76goGdCcQ0KzqBV8RPXAh3UcgP2e\n+Zu90p2EGIhIk+sZTCkPd4dorxjL9nkRR86HdAgMBAAEwDQYJKoZIhvcNAQELBQAD\n+ggEBAJWiCxJaTksv/BTsh/etxlDY5eHwqStqIuiovEQ8bhGAcKJ3bfWd/YTb8DUS\n+hrLvXrXdOVC+U8PqPFXBpdOqcm5Dc233z52VgUCb+0EKv3lAzgKXRIo32h52skdK\n+NnRrCHDeDzgfEIXR4MEJ99cLEaxWyXQhremmTYWHYznry9/4NYz40gCDxHn9dJAi\n+KxFyDNxhtuKs58zp4PrBoo+542JurAoLPtRGOhdXpU2RkQVU/ho38HsAXDStAB5D\n+vAoSxPuMHKgo17ffrb0oqU3didwaA9fIsz7Mr6RxmI7X03s7hLzNBq9FCqu0U3RR\n+CX4zWGFNJu/ieSGVWLYKQzbYxp8=\n+-----END CERTIFICATE-----\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/ldap2/certs/ldap.csr b/tests/testflows/ldap/external_user_directory/configs/ldap2/certs/ldap.csr\nnew file mode 100644\nindex 000000000000..bf569f727d63\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/ldap2/certs/ldap.csr\n@@ -0,0 +1,17 @@\n+-----BEGIN CERTIFICATE REQUEST-----\n+MIICpDCCAYwCAQAwXzELMAkGA1UEBhMCQ0ExCzAJBgNVBAgMAk9OMQ8wDQYDVQQH\n+DAZPdHRhd2ExETAPBgNVBAoMCEFsdGluaXR5MQswCQYDVQQLDAJRQTESMBAGA1UE\n+AwwJb3BlbmxkYXAyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtDG5\n+//1OelEWrzIF5vNhVj+rwXSrkcnRV/y9DOVy5ZwLZPyFxv0/uLe5zgScVpk6f8ab\n+D7UjACxOHhSaRFBKpaVWxuQ3wc1VnGDlqDHkQHB1gg5M6z5AeiNHXxdDJuYaGg4Z\n+/mV4wVr6IfyJSXQJz4OZpXo35SQUO8bRQvXjelo5XV7kTr8p7RjbjH1S4CEx8F7h\n+9smffBtJhTuk1P/XUWP2dw+kU0synW9e2JP1Zxvq8vdrttLIFyAb4bibgt5LFiwK\n+8MBaDJfA1WtOQ+Dth++oKBnQnENCs6gVfET1wId1HID9nmbvdKdhBiISJPrGUwpD\n+3eHaK8Yy/Z5EUfOh3QIDAQABoAAwDQYJKoZIhvcNAQELBQADggEBAEzIjZQOT5R7\n+mEJg+RFpCSIoPn3xJ4/VMMyWqA3bTGZKpb4S6GxgsierY/87kPL7jZrMdGYB4Dc3\n+2M3VWZGXlYo8vctH1zLE9VW6CzosUpl20lhdgydoCMz3RQqdJyK8aGeFTeLtk7G/\n+TRCCUFUE6jaA+VtaCPCnOJSff3jUf76xguEu7dgTZgCKV7dtBqald8gIzF3D+AJJ\n+7pEN2UrC3UR0xpe2cj2GhndQJ+WsIyft3zpNFzAO13j8ZPibuVP7oDWcW3ixNCWC\n+213aeRVplJGof8Eo6llDxP+6Fwp1YmOoQmwB1Xm3t4ADn7FLJ14LONLB7q40KviG\n+RyLyqu3IVOI=\n+-----END CERTIFICATE REQUEST-----\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/ldap2/certs/ldap.key b/tests/testflows/ldap/external_user_directory/configs/ldap2/certs/ldap.key\nnew file mode 100644\nindex 000000000000..5ab3a3f8b590\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/ldap2/certs/ldap.key\n@@ -0,0 +1,27 @@\n+-----BEGIN RSA PRIVATE KEY-----\n+MIIEogIBAAKCAQEAtDG5//1OelEWrzIF5vNhVj+rwXSrkcnRV/y9DOVy5ZwLZPyF\n+xv0/uLe5zgScVpk6f8abD7UjACxOHhSaRFBKpaVWxuQ3wc1VnGDlqDHkQHB1gg5M\n+6z5AeiNHXxdDJuYaGg4Z/mV4wVr6IfyJSXQJz4OZpXo35SQUO8bRQvXjelo5XV7k\n+Tr8p7RjbjH1S4CEx8F7h9smffBtJhTuk1P/XUWP2dw+kU0synW9e2JP1Zxvq8vdr\n+ttLIFyAb4bibgt5LFiwK8MBaDJfA1WtOQ+Dth++oKBnQnENCs6gVfET1wId1HID9\n+nmbvdKdhBiISJPrGUwpD3eHaK8Yy/Z5EUfOh3QIDAQABAoIBADugMMIKWcuTxYPX\n+c6iGZHEbxIPRTWyCcalB0nTQAAMGbabPAJ1l8432DZ+kWu806OybFXhPIfPOtVKy\n+0pFEWE8TtPE/V0vj3C5Qye2sBLFmBRwyCzXUdZV00wseMXRPs9dnTyalAR5KMnbI\n+j80kfpKSI2dkV9aU57UYBuq3Xrx/TCGItwL769D4ZZW9BvbpiTZApQQFZ0gwUFFn\n+btPXGU9Ti8H4mfBuZWL+5CaZdqOo76+CXvMPaUK0F9MJp4yX3XxQLRNH3qz/Tyn7\n+h7QOOo0XTqoUmzRw0N9QRVH5LRdSE5yq3aF9aFKjNW59exz+62pufOFadngzkpkn\n+OKCzgWkCgYEA4mOWWMzdYwMn3GtfG7whqlqy7wOmMkNb81zTDQejHBV98dnj0AHr\n+deurfKWzHrAh3DXo6tFeqUIgXabhBPS/0dEx/S5sgLFmuUZP05EUYahfWBgzzmM9\n+C6Oe5xIMLzxsZCJczolsfkEsoFe4o0vkvuLYoQrQL7InzewcDy8cUxsCgYEAy8Na\n+YCnanSNDY03Bulcni+5sF+opaHseeki1pv3nlw8TwsWuZF9ApS+yL7ck9jJjxBRR\n+RC3KGmpoqIr0vTmUYS946ngQWXPE90zfuhJfM+NRv/q0oCjH0qAcxRbTkls5On9v\n+oxJ8rO7gD6K85eHqasWdbCVzdZrobOXzay37tmcCgYBfyUUmw190cjReZauzH3Gb\n+E48b5A5gu/Fe0cqWe8G+szU7rDZgnz9SAGnpbm6QMHPTKZgoKngD42+wUFhq8Wdr\n+zjh5aDgOZ4EQKTjDSmI2Q7g7nNnmnESK9SrZl+BB6C3wXD2qQaj+7nKEUTlVFlpt\n+jaucz+dwFtASp7Djl8pDOwKBgEtr2c3ycArt/ImLRIP2spqm+7e2YvFbcSKOOz6+\n+iLRvTj8v8KcSYtlB2FC1F6dRa4AujQ4RbNduP6LzHDfWUkfOzJDtNBAIPAXVnJJB\n+LqAEKkRHRghqT9x0i3GgS1vHDF3MwcO4mhFgserXr9ffUWeIEgbvrdcAKbv1Oa6Y\n+bK1NAoGAGPm8ISmboDJynjBl9wMrkcy23Pwg9kmyocdWUHh0zMLDKriZNKYB6u/U\n+C+/RTfkohPoHPzkeqWiHp7z3JhMItYUfTkNW6vMCxEGc0NEN6ZyMIjtiDPGN1n6O\n+E7jmODFmj1AQICQGdV5SHp+yKvKyb0YHKyDwETbs4SZBXxVvjEw=\n+-----END RSA PRIVATE KEY-----\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/ldap2/config/export.ldif b/tests/testflows/ldap/external_user_directory/configs/ldap2/config/export.ldif\nnew file mode 100644\nindex 000000000000..6766aaae6f10\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/ldap2/config/export.ldif\n@@ -0,0 +1,64 @@\n+# LDIF Export for dc=company,dc=com\n+# Server: openldap (openldap)\n+# Search Scope: sub\n+# Search Filter: (objectClass=*)\n+# Total Entries: 7\n+#\n+# Generated by phpLDAPadmin (http://phpldapadmin.sourceforge.net) on May 22, 2020 5:51 pm\n+# Version: 1.2.5\n+\n+# Entry 1: dc=company,dc=com\n+#dn: dc=company,dc=com\n+#dc: company\n+#o: company\n+#objectclass: top\n+#objectclass: dcObject\n+#objectclass: organization\n+\n+# Entry 2: cn=admin,dc=company,dc=com\n+#dn: cn=admin,dc=company,dc=com\n+#cn: admin\n+#description: LDAP administrator\n+#objectclass: simpleSecurityObject\n+#objectclass: organizationalRole\n+#userpassword: {SSHA}eUEupkQCTvq9SkrxfWGSe5rX+orrjVbF\n+\n+# Entry 3: ou=groups,dc=company,dc=com\n+dn: ou=groups,dc=company,dc=com\n+objectclass: organizationalUnit\n+objectclass: top\n+ou: groups\n+\n+# Entry 4: cn=admin,ou=groups,dc=company,dc=com\n+dn: cn=admin,ou=groups,dc=company,dc=com\n+cn: admin\n+gidnumber: 500\n+objectclass: posixGroup\n+objectclass: top\n+\n+# Entry 5: cn=users,ou=groups,dc=company,dc=com\n+dn: cn=users,ou=groups,dc=company,dc=com\n+cn: users\n+gidnumber: 501\n+objectclass: posixGroup\n+objectclass: top\n+\n+# Entry 6: ou=users,dc=company,dc=com\n+dn: ou=users,dc=company,dc=com\n+objectclass: organizationalUnit\n+objectclass: top\n+ou: users\n+\n+# Entry 7: cn=user2,ou=users,dc=company,dc=com\n+dn: cn=user2,ou=users,dc=company,dc=com\n+cn: user2\n+gidnumber: 501\n+givenname: John\n+homedirectory: /home/users/user2\n+objectclass: inetOrgPerson\n+objectclass: posixAccount\n+objectclass: top\n+sn: User\n+uid: user2\n+uidnumber: 1002\n+userpassword: user2\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/ldap3/certs/ca.crt b/tests/testflows/ldap/external_user_directory/configs/ldap3/certs/ca.crt\nnew file mode 100644\nindex 000000000000..8c71e3afc91d\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/ldap3/certs/ca.crt\n@@ -0,0 +1,22 @@\n+-----BEGIN CERTIFICATE-----\n+MIIDlTCCAn2gAwIBAgIUJBqw2dHM2DDCZjYSkPOESlvDH6swDQYJKoZIhvcNAQEL\n+BQAwWjELMAkGA1UEBhMCQ0ExCzAJBgNVBAgMAk9OMQ8wDQYDVQQHDAZPdHRhd2Ex\n+ETAPBgNVBAoMCEFsdGluaXR5MQswCQYDVQQLDAJRQTENMAsGA1UEAwwEcm9vdDAe\n+Fw0yMDA2MTExOTAzNDhaFw0zMDA2MDkxOTAzNDhaMFoxCzAJBgNVBAYTAkNBMQsw\n+CQYDVQQIDAJPTjEPMA0GA1UEBwwGT3R0YXdhMREwDwYDVQQKDAhBbHRpbml0eTEL\n+MAkGA1UECwwCUUExDTALBgNVBAMMBHJvb3QwggEiMA0GCSqGSIb3DQEBAQUAA4IB\n+DwAwggEKAoIBAQC9Irr0zGV+HCI2fZ0ht4hR5It4Sbjz4RwZV8ENRP/+TEz8l9eK\n+J6ygxhKX7SMYzIs/jS9Gsq4plX1r2ujW1qRf8yLpR4+dGLP+jBRi1drj0XjZXosT\n+SERjWzgPauWxL9LN8+l26eBAqz6fw5e0W8WRSTgf5iGiCcKOTmaATIUjP0CdfWKK\n+qpktI4vhe++CXZFJ3usR+8KZ/FwwbCLJM/3J2HnbcXfcaYPYvr1tfqLudKSTbG9H\n+M3+AVwjctdesc/0sbd51Zsm0ClQptMbuKnDCYauGg61kNkgbgPgRmH9Pzo67DtxF\n+/WW+PtOzq8xLOifciQ9Piboy9QBSQZGwf4wzAgMBAAGjUzBRMB0GA1UdDgQWBBSi\n+njya0RDozx3OZTLYFpwqYnlpIDAfBgNVHSMEGDAWgBSinjya0RDozx3OZTLYFpwq\n+YnlpIDAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQBAD7VyFg7F\n+U1C25KFvtauchAOjCW6w7U/b3z1dVZvcQ88/kH1VsLUcfGixlSilUEfPTJsi7OA0\n+R5BQdh2GGcjUJv4iqEFGU05KvMVmRRKn08P62+ZhJxKMxG26VzcliRZzCMkI6d0W\n+lFwI6nM45yeqdHVh5k4xbuJzqpbD9BtXXLI+/Ra9Fx8S9ETA3GdidpZLU5P1VLxq\n+UuedfqyAVWZXpr6TAURGxouRmRzul9yFzbSUex+MLEIPrstjtEwV3+tBQZJz9xAS\n+TVPj+Nv3LO7GCq54bdwkq1ioWbSL2hEmABkj6kdW/JwmfhGHf/2rirDVMzrTYw07\n+dFJfAZC+FEsv\n+-----END CERTIFICATE-----\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/ldap3/certs/dhparam.pem b/tests/testflows/ldap/external_user_directory/configs/ldap3/certs/dhparam.pem\nnew file mode 100644\nindex 000000000000..0a96faffd627\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/ldap3/certs/dhparam.pem\n@@ -0,0 +1,5 @@\n+-----BEGIN DH PARAMETERS-----\n+MIGHAoGBAJitt2hhnpDViQ5ko2ipBMdjy+bZ6FR/WdZ987R7lQvBkKehPXmxtEyV\n+AO6ofv5CZSDJokc5bUeBOAtg0EhMTCH82uPdwQvt58jRXcxXBg4JTjkx+oW9LBv2\n+FdZsbaX8+SYivmiZ0Jp8T/HBm/4DA9VBS0O5GFRS4C7dHhmSTPfDAgEC\n+-----END DH PARAMETERS-----\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/ldap3/certs/ldap.crt b/tests/testflows/ldap/external_user_directory/configs/ldap3/certs/ldap.crt\nnew file mode 100644\nindex 000000000000..9167cbf861d0\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/ldap3/certs/ldap.crt\n@@ -0,0 +1,20 @@\n+-----BEGIN CERTIFICATE-----\n+MIIDQDCCAigCFCJ7El0ntrGktZVTYTZd+OwtcJjBMA0GCSqGSIb3DQEBCwUAMFox\n+CzAJBgNVBAYTAkNBMQswCQYDVQQIDAJPTjEPMA0GA1UEBwwGT3R0YXdhMREwDwYD\n+VQQKDAhBbHRpbml0eTELMAkGA1UECwwCUUExDTALBgNVBAMMBHJvb3QwHhcNMjAw\n+NjExMTkxMTQzWhcNMzAwNjA5MTkxMTQzWjBfMQswCQYDVQQGEwJDQTELMAkGA1UE\n+CAwCT04xDzANBgNVBAcMBk90dGF3YTERMA8GA1UECgwIQWx0aW5pdHkxCzAJBgNV\n+BAsMAlFBMRIwEAYDVQQDDAlvcGVubGRhcDIwggEiMA0GCSqGSIb3DQEBAQUAA4IB\n+DwAwggEKAoIBAQC0Mbn//U56URavMgXm82FWP6vBdKuRydFX/L0M5XLlnAtk/IXG\n+/T+4t7nOBJxWmTp/xpsPtSMALE4eFJpEUEqlpVbG5DfBzVWcYOWoMeRAcHWCDkzr\n+PkB6I0dfF0Mm5hoaDhn+ZXjBWvoh/IlJdAnPg5mlejflJBQ7xtFC9eN6WjldXuRO\n+vyntGNuMfVLgITHwXuH2yZ98G0mFO6TU/9dRY/Z3D6RTSzKdb17Yk/VnG+ry92u2\n+0sgXIBvhuJuC3ksWLArwwFoMl8DVa05D4O2H76goGdCcQ0KzqBV8RPXAh3UcgP2e\n+Zu90p2EGIhIk+sZTCkPd4dorxjL9nkRR86HdAgMBAAEwDQYJKoZIhvcNAQELBQAD\n+ggEBAJWiCxJaTksv/BTsh/etxlDY5eHwqStqIuiovEQ8bhGAcKJ3bfWd/YTb8DUS\n+hrLvXrXdOVC+U8PqPFXBpdOqcm5Dc233z52VgUCb+0EKv3lAzgKXRIo32h52skdK\n+NnRrCHDeDzgfEIXR4MEJ99cLEaxWyXQhremmTYWHYznry9/4NYz40gCDxHn9dJAi\n+KxFyDNxhtuKs58zp4PrBoo+542JurAoLPtRGOhdXpU2RkQVU/ho38HsAXDStAB5D\n+vAoSxPuMHKgo17ffrb0oqU3didwaA9fIsz7Mr6RxmI7X03s7hLzNBq9FCqu0U3RR\n+CX4zWGFNJu/ieSGVWLYKQzbYxp8=\n+-----END CERTIFICATE-----\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/ldap3/certs/ldap.csr b/tests/testflows/ldap/external_user_directory/configs/ldap3/certs/ldap.csr\nnew file mode 100644\nindex 000000000000..bf569f727d63\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/ldap3/certs/ldap.csr\n@@ -0,0 +1,17 @@\n+-----BEGIN CERTIFICATE REQUEST-----\n+MIICpDCCAYwCAQAwXzELMAkGA1UEBhMCQ0ExCzAJBgNVBAgMAk9OMQ8wDQYDVQQH\n+DAZPdHRhd2ExETAPBgNVBAoMCEFsdGluaXR5MQswCQYDVQQLDAJRQTESMBAGA1UE\n+AwwJb3BlbmxkYXAyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtDG5\n+//1OelEWrzIF5vNhVj+rwXSrkcnRV/y9DOVy5ZwLZPyFxv0/uLe5zgScVpk6f8ab\n+D7UjACxOHhSaRFBKpaVWxuQ3wc1VnGDlqDHkQHB1gg5M6z5AeiNHXxdDJuYaGg4Z\n+/mV4wVr6IfyJSXQJz4OZpXo35SQUO8bRQvXjelo5XV7kTr8p7RjbjH1S4CEx8F7h\n+9smffBtJhTuk1P/XUWP2dw+kU0synW9e2JP1Zxvq8vdrttLIFyAb4bibgt5LFiwK\n+8MBaDJfA1WtOQ+Dth++oKBnQnENCs6gVfET1wId1HID9nmbvdKdhBiISJPrGUwpD\n+3eHaK8Yy/Z5EUfOh3QIDAQABoAAwDQYJKoZIhvcNAQELBQADggEBAEzIjZQOT5R7\n+mEJg+RFpCSIoPn3xJ4/VMMyWqA3bTGZKpb4S6GxgsierY/87kPL7jZrMdGYB4Dc3\n+2M3VWZGXlYo8vctH1zLE9VW6CzosUpl20lhdgydoCMz3RQqdJyK8aGeFTeLtk7G/\n+TRCCUFUE6jaA+VtaCPCnOJSff3jUf76xguEu7dgTZgCKV7dtBqald8gIzF3D+AJJ\n+7pEN2UrC3UR0xpe2cj2GhndQJ+WsIyft3zpNFzAO13j8ZPibuVP7oDWcW3ixNCWC\n+213aeRVplJGof8Eo6llDxP+6Fwp1YmOoQmwB1Xm3t4ADn7FLJ14LONLB7q40KviG\n+RyLyqu3IVOI=\n+-----END CERTIFICATE REQUEST-----\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/ldap3/certs/ldap.key b/tests/testflows/ldap/external_user_directory/configs/ldap3/certs/ldap.key\nnew file mode 100644\nindex 000000000000..5ab3a3f8b590\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/ldap3/certs/ldap.key\n@@ -0,0 +1,27 @@\n+-----BEGIN RSA PRIVATE KEY-----\n+MIIEogIBAAKCAQEAtDG5//1OelEWrzIF5vNhVj+rwXSrkcnRV/y9DOVy5ZwLZPyF\n+xv0/uLe5zgScVpk6f8abD7UjACxOHhSaRFBKpaVWxuQ3wc1VnGDlqDHkQHB1gg5M\n+6z5AeiNHXxdDJuYaGg4Z/mV4wVr6IfyJSXQJz4OZpXo35SQUO8bRQvXjelo5XV7k\n+Tr8p7RjbjH1S4CEx8F7h9smffBtJhTuk1P/XUWP2dw+kU0synW9e2JP1Zxvq8vdr\n+ttLIFyAb4bibgt5LFiwK8MBaDJfA1WtOQ+Dth++oKBnQnENCs6gVfET1wId1HID9\n+nmbvdKdhBiISJPrGUwpD3eHaK8Yy/Z5EUfOh3QIDAQABAoIBADugMMIKWcuTxYPX\n+c6iGZHEbxIPRTWyCcalB0nTQAAMGbabPAJ1l8432DZ+kWu806OybFXhPIfPOtVKy\n+0pFEWE8TtPE/V0vj3C5Qye2sBLFmBRwyCzXUdZV00wseMXRPs9dnTyalAR5KMnbI\n+j80kfpKSI2dkV9aU57UYBuq3Xrx/TCGItwL769D4ZZW9BvbpiTZApQQFZ0gwUFFn\n+btPXGU9Ti8H4mfBuZWL+5CaZdqOo76+CXvMPaUK0F9MJp4yX3XxQLRNH3qz/Tyn7\n+h7QOOo0XTqoUmzRw0N9QRVH5LRdSE5yq3aF9aFKjNW59exz+62pufOFadngzkpkn\n+OKCzgWkCgYEA4mOWWMzdYwMn3GtfG7whqlqy7wOmMkNb81zTDQejHBV98dnj0AHr\n+deurfKWzHrAh3DXo6tFeqUIgXabhBPS/0dEx/S5sgLFmuUZP05EUYahfWBgzzmM9\n+C6Oe5xIMLzxsZCJczolsfkEsoFe4o0vkvuLYoQrQL7InzewcDy8cUxsCgYEAy8Na\n+YCnanSNDY03Bulcni+5sF+opaHseeki1pv3nlw8TwsWuZF9ApS+yL7ck9jJjxBRR\n+RC3KGmpoqIr0vTmUYS946ngQWXPE90zfuhJfM+NRv/q0oCjH0qAcxRbTkls5On9v\n+oxJ8rO7gD6K85eHqasWdbCVzdZrobOXzay37tmcCgYBfyUUmw190cjReZauzH3Gb\n+E48b5A5gu/Fe0cqWe8G+szU7rDZgnz9SAGnpbm6QMHPTKZgoKngD42+wUFhq8Wdr\n+zjh5aDgOZ4EQKTjDSmI2Q7g7nNnmnESK9SrZl+BB6C3wXD2qQaj+7nKEUTlVFlpt\n+jaucz+dwFtASp7Djl8pDOwKBgEtr2c3ycArt/ImLRIP2spqm+7e2YvFbcSKOOz6+\n+iLRvTj8v8KcSYtlB2FC1F6dRa4AujQ4RbNduP6LzHDfWUkfOzJDtNBAIPAXVnJJB\n+LqAEKkRHRghqT9x0i3GgS1vHDF3MwcO4mhFgserXr9ffUWeIEgbvrdcAKbv1Oa6Y\n+bK1NAoGAGPm8ISmboDJynjBl9wMrkcy23Pwg9kmyocdWUHh0zMLDKriZNKYB6u/U\n+C+/RTfkohPoHPzkeqWiHp7z3JhMItYUfTkNW6vMCxEGc0NEN6ZyMIjtiDPGN1n6O\n+E7jmODFmj1AQICQGdV5SHp+yKvKyb0YHKyDwETbs4SZBXxVvjEw=\n+-----END RSA PRIVATE KEY-----\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/ldap3/config/export.ldif b/tests/testflows/ldap/external_user_directory/configs/ldap3/config/export.ldif\nnew file mode 100644\nindex 000000000000..6ac9a995efd0\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/ldap3/config/export.ldif\n@@ -0,0 +1,64 @@\n+# LDIF Export for dc=company,dc=com\n+# Server: openldap (openldap)\n+# Search Scope: sub\n+# Search Filter: (objectClass=*)\n+# Total Entries: 7\n+#\n+# Generated by phpLDAPadmin (http://phpldapadmin.sourceforge.net) on May 22, 2020 5:51 pm\n+# Version: 1.2.5\n+\n+# Entry 1: dc=company,dc=com\n+#dn: dc=company,dc=com\n+#dc: company\n+#o: company\n+#objectclass: top\n+#objectclass: dcObject\n+#objectclass: organization\n+\n+# Entry 2: cn=admin,dc=company,dc=com\n+#dn: cn=admin,dc=company,dc=com\n+#cn: admin\n+#description: LDAP administrator\n+#objectclass: simpleSecurityObject\n+#objectclass: organizationalRole\n+#userpassword: {SSHA}eUEupkQCTvq9SkrxfWGSe5rX+orrjVbF\n+\n+# Entry 3: ou=groups,dc=company,dc=com\n+dn: ou=groups,dc=company,dc=com\n+objectclass: organizationalUnit\n+objectclass: top\n+ou: groups\n+\n+# Entry 4: cn=admin,ou=groups,dc=company,dc=com\n+dn: cn=admin,ou=groups,dc=company,dc=com\n+cn: admin\n+gidnumber: 500\n+objectclass: posixGroup\n+objectclass: top\n+\n+# Entry 5: cn=users,ou=groups,dc=company,dc=com\n+dn: cn=users,ou=groups,dc=company,dc=com\n+cn: users\n+gidnumber: 501\n+objectclass: posixGroup\n+objectclass: top\n+\n+# Entry 6: ou=users,dc=company,dc=com\n+dn: ou=users,dc=company,dc=com\n+objectclass: organizationalUnit\n+objectclass: top\n+ou: users\n+\n+# Entry 7: cn=user3,ou=users,dc=company,dc=com\n+dn: cn=user3,ou=users,dc=company,dc=com\n+cn: user3\n+gidnumber: 501\n+givenname: John\n+homedirectory: /home/users/user3\n+objectclass: inetOrgPerson\n+objectclass: posixAccount\n+objectclass: top\n+sn: User\n+uid: user3\n+uidnumber: 1003\n+userpassword: user3\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/ldap4/certs/ca.crt b/tests/testflows/ldap/external_user_directory/configs/ldap4/certs/ca.crt\nnew file mode 100644\nindex 000000000000..8c71e3afc91d\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/ldap4/certs/ca.crt\n@@ -0,0 +1,22 @@\n+-----BEGIN CERTIFICATE-----\n+MIIDlTCCAn2gAwIBAgIUJBqw2dHM2DDCZjYSkPOESlvDH6swDQYJKoZIhvcNAQEL\n+BQAwWjELMAkGA1UEBhMCQ0ExCzAJBgNVBAgMAk9OMQ8wDQYDVQQHDAZPdHRhd2Ex\n+ETAPBgNVBAoMCEFsdGluaXR5MQswCQYDVQQLDAJRQTENMAsGA1UEAwwEcm9vdDAe\n+Fw0yMDA2MTExOTAzNDhaFw0zMDA2MDkxOTAzNDhaMFoxCzAJBgNVBAYTAkNBMQsw\n+CQYDVQQIDAJPTjEPMA0GA1UEBwwGT3R0YXdhMREwDwYDVQQKDAhBbHRpbml0eTEL\n+MAkGA1UECwwCUUExDTALBgNVBAMMBHJvb3QwggEiMA0GCSqGSIb3DQEBAQUAA4IB\n+DwAwggEKAoIBAQC9Irr0zGV+HCI2fZ0ht4hR5It4Sbjz4RwZV8ENRP/+TEz8l9eK\n+J6ygxhKX7SMYzIs/jS9Gsq4plX1r2ujW1qRf8yLpR4+dGLP+jBRi1drj0XjZXosT\n+SERjWzgPauWxL9LN8+l26eBAqz6fw5e0W8WRSTgf5iGiCcKOTmaATIUjP0CdfWKK\n+qpktI4vhe++CXZFJ3usR+8KZ/FwwbCLJM/3J2HnbcXfcaYPYvr1tfqLudKSTbG9H\n+M3+AVwjctdesc/0sbd51Zsm0ClQptMbuKnDCYauGg61kNkgbgPgRmH9Pzo67DtxF\n+/WW+PtOzq8xLOifciQ9Piboy9QBSQZGwf4wzAgMBAAGjUzBRMB0GA1UdDgQWBBSi\n+njya0RDozx3OZTLYFpwqYnlpIDAfBgNVHSMEGDAWgBSinjya0RDozx3OZTLYFpwq\n+YnlpIDAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQBAD7VyFg7F\n+U1C25KFvtauchAOjCW6w7U/b3z1dVZvcQ88/kH1VsLUcfGixlSilUEfPTJsi7OA0\n+R5BQdh2GGcjUJv4iqEFGU05KvMVmRRKn08P62+ZhJxKMxG26VzcliRZzCMkI6d0W\n+lFwI6nM45yeqdHVh5k4xbuJzqpbD9BtXXLI+/Ra9Fx8S9ETA3GdidpZLU5P1VLxq\n+UuedfqyAVWZXpr6TAURGxouRmRzul9yFzbSUex+MLEIPrstjtEwV3+tBQZJz9xAS\n+TVPj+Nv3LO7GCq54bdwkq1ioWbSL2hEmABkj6kdW/JwmfhGHf/2rirDVMzrTYw07\n+dFJfAZC+FEsv\n+-----END CERTIFICATE-----\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/ldap4/certs/dhparam.pem b/tests/testflows/ldap/external_user_directory/configs/ldap4/certs/dhparam.pem\nnew file mode 100644\nindex 000000000000..0a96faffd627\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/ldap4/certs/dhparam.pem\n@@ -0,0 +1,5 @@\n+-----BEGIN DH PARAMETERS-----\n+MIGHAoGBAJitt2hhnpDViQ5ko2ipBMdjy+bZ6FR/WdZ987R7lQvBkKehPXmxtEyV\n+AO6ofv5CZSDJokc5bUeBOAtg0EhMTCH82uPdwQvt58jRXcxXBg4JTjkx+oW9LBv2\n+FdZsbaX8+SYivmiZ0Jp8T/HBm/4DA9VBS0O5GFRS4C7dHhmSTPfDAgEC\n+-----END DH PARAMETERS-----\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/ldap4/certs/ldap.crt b/tests/testflows/ldap/external_user_directory/configs/ldap4/certs/ldap.crt\nnew file mode 100644\nindex 000000000000..9167cbf861d0\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/ldap4/certs/ldap.crt\n@@ -0,0 +1,20 @@\n+-----BEGIN CERTIFICATE-----\n+MIIDQDCCAigCFCJ7El0ntrGktZVTYTZd+OwtcJjBMA0GCSqGSIb3DQEBCwUAMFox\n+CzAJBgNVBAYTAkNBMQswCQYDVQQIDAJPTjEPMA0GA1UEBwwGT3R0YXdhMREwDwYD\n+VQQKDAhBbHRpbml0eTELMAkGA1UECwwCUUExDTALBgNVBAMMBHJvb3QwHhcNMjAw\n+NjExMTkxMTQzWhcNMzAwNjA5MTkxMTQzWjBfMQswCQYDVQQGEwJDQTELMAkGA1UE\n+CAwCT04xDzANBgNVBAcMBk90dGF3YTERMA8GA1UECgwIQWx0aW5pdHkxCzAJBgNV\n+BAsMAlFBMRIwEAYDVQQDDAlvcGVubGRhcDIwggEiMA0GCSqGSIb3DQEBAQUAA4IB\n+DwAwggEKAoIBAQC0Mbn//U56URavMgXm82FWP6vBdKuRydFX/L0M5XLlnAtk/IXG\n+/T+4t7nOBJxWmTp/xpsPtSMALE4eFJpEUEqlpVbG5DfBzVWcYOWoMeRAcHWCDkzr\n+PkB6I0dfF0Mm5hoaDhn+ZXjBWvoh/IlJdAnPg5mlejflJBQ7xtFC9eN6WjldXuRO\n+vyntGNuMfVLgITHwXuH2yZ98G0mFO6TU/9dRY/Z3D6RTSzKdb17Yk/VnG+ry92u2\n+0sgXIBvhuJuC3ksWLArwwFoMl8DVa05D4O2H76goGdCcQ0KzqBV8RPXAh3UcgP2e\n+Zu90p2EGIhIk+sZTCkPd4dorxjL9nkRR86HdAgMBAAEwDQYJKoZIhvcNAQELBQAD\n+ggEBAJWiCxJaTksv/BTsh/etxlDY5eHwqStqIuiovEQ8bhGAcKJ3bfWd/YTb8DUS\n+hrLvXrXdOVC+U8PqPFXBpdOqcm5Dc233z52VgUCb+0EKv3lAzgKXRIo32h52skdK\n+NnRrCHDeDzgfEIXR4MEJ99cLEaxWyXQhremmTYWHYznry9/4NYz40gCDxHn9dJAi\n+KxFyDNxhtuKs58zp4PrBoo+542JurAoLPtRGOhdXpU2RkQVU/ho38HsAXDStAB5D\n+vAoSxPuMHKgo17ffrb0oqU3didwaA9fIsz7Mr6RxmI7X03s7hLzNBq9FCqu0U3RR\n+CX4zWGFNJu/ieSGVWLYKQzbYxp8=\n+-----END CERTIFICATE-----\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/ldap4/certs/ldap.csr b/tests/testflows/ldap/external_user_directory/configs/ldap4/certs/ldap.csr\nnew file mode 100644\nindex 000000000000..bf569f727d63\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/ldap4/certs/ldap.csr\n@@ -0,0 +1,17 @@\n+-----BEGIN CERTIFICATE REQUEST-----\n+MIICpDCCAYwCAQAwXzELMAkGA1UEBhMCQ0ExCzAJBgNVBAgMAk9OMQ8wDQYDVQQH\n+DAZPdHRhd2ExETAPBgNVBAoMCEFsdGluaXR5MQswCQYDVQQLDAJRQTESMBAGA1UE\n+AwwJb3BlbmxkYXAyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtDG5\n+//1OelEWrzIF5vNhVj+rwXSrkcnRV/y9DOVy5ZwLZPyFxv0/uLe5zgScVpk6f8ab\n+D7UjACxOHhSaRFBKpaVWxuQ3wc1VnGDlqDHkQHB1gg5M6z5AeiNHXxdDJuYaGg4Z\n+/mV4wVr6IfyJSXQJz4OZpXo35SQUO8bRQvXjelo5XV7kTr8p7RjbjH1S4CEx8F7h\n+9smffBtJhTuk1P/XUWP2dw+kU0synW9e2JP1Zxvq8vdrttLIFyAb4bibgt5LFiwK\n+8MBaDJfA1WtOQ+Dth++oKBnQnENCs6gVfET1wId1HID9nmbvdKdhBiISJPrGUwpD\n+3eHaK8Yy/Z5EUfOh3QIDAQABoAAwDQYJKoZIhvcNAQELBQADggEBAEzIjZQOT5R7\n+mEJg+RFpCSIoPn3xJ4/VMMyWqA3bTGZKpb4S6GxgsierY/87kPL7jZrMdGYB4Dc3\n+2M3VWZGXlYo8vctH1zLE9VW6CzosUpl20lhdgydoCMz3RQqdJyK8aGeFTeLtk7G/\n+TRCCUFUE6jaA+VtaCPCnOJSff3jUf76xguEu7dgTZgCKV7dtBqald8gIzF3D+AJJ\n+7pEN2UrC3UR0xpe2cj2GhndQJ+WsIyft3zpNFzAO13j8ZPibuVP7oDWcW3ixNCWC\n+213aeRVplJGof8Eo6llDxP+6Fwp1YmOoQmwB1Xm3t4ADn7FLJ14LONLB7q40KviG\n+RyLyqu3IVOI=\n+-----END CERTIFICATE REQUEST-----\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/ldap4/certs/ldap.key b/tests/testflows/ldap/external_user_directory/configs/ldap4/certs/ldap.key\nnew file mode 100644\nindex 000000000000..5ab3a3f8b590\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/ldap4/certs/ldap.key\n@@ -0,0 +1,27 @@\n+-----BEGIN RSA PRIVATE KEY-----\n+MIIEogIBAAKCAQEAtDG5//1OelEWrzIF5vNhVj+rwXSrkcnRV/y9DOVy5ZwLZPyF\n+xv0/uLe5zgScVpk6f8abD7UjACxOHhSaRFBKpaVWxuQ3wc1VnGDlqDHkQHB1gg5M\n+6z5AeiNHXxdDJuYaGg4Z/mV4wVr6IfyJSXQJz4OZpXo35SQUO8bRQvXjelo5XV7k\n+Tr8p7RjbjH1S4CEx8F7h9smffBtJhTuk1P/XUWP2dw+kU0synW9e2JP1Zxvq8vdr\n+ttLIFyAb4bibgt5LFiwK8MBaDJfA1WtOQ+Dth++oKBnQnENCs6gVfET1wId1HID9\n+nmbvdKdhBiISJPrGUwpD3eHaK8Yy/Z5EUfOh3QIDAQABAoIBADugMMIKWcuTxYPX\n+c6iGZHEbxIPRTWyCcalB0nTQAAMGbabPAJ1l8432DZ+kWu806OybFXhPIfPOtVKy\n+0pFEWE8TtPE/V0vj3C5Qye2sBLFmBRwyCzXUdZV00wseMXRPs9dnTyalAR5KMnbI\n+j80kfpKSI2dkV9aU57UYBuq3Xrx/TCGItwL769D4ZZW9BvbpiTZApQQFZ0gwUFFn\n+btPXGU9Ti8H4mfBuZWL+5CaZdqOo76+CXvMPaUK0F9MJp4yX3XxQLRNH3qz/Tyn7\n+h7QOOo0XTqoUmzRw0N9QRVH5LRdSE5yq3aF9aFKjNW59exz+62pufOFadngzkpkn\n+OKCzgWkCgYEA4mOWWMzdYwMn3GtfG7whqlqy7wOmMkNb81zTDQejHBV98dnj0AHr\n+deurfKWzHrAh3DXo6tFeqUIgXabhBPS/0dEx/S5sgLFmuUZP05EUYahfWBgzzmM9\n+C6Oe5xIMLzxsZCJczolsfkEsoFe4o0vkvuLYoQrQL7InzewcDy8cUxsCgYEAy8Na\n+YCnanSNDY03Bulcni+5sF+opaHseeki1pv3nlw8TwsWuZF9ApS+yL7ck9jJjxBRR\n+RC3KGmpoqIr0vTmUYS946ngQWXPE90zfuhJfM+NRv/q0oCjH0qAcxRbTkls5On9v\n+oxJ8rO7gD6K85eHqasWdbCVzdZrobOXzay37tmcCgYBfyUUmw190cjReZauzH3Gb\n+E48b5A5gu/Fe0cqWe8G+szU7rDZgnz9SAGnpbm6QMHPTKZgoKngD42+wUFhq8Wdr\n+zjh5aDgOZ4EQKTjDSmI2Q7g7nNnmnESK9SrZl+BB6C3wXD2qQaj+7nKEUTlVFlpt\n+jaucz+dwFtASp7Djl8pDOwKBgEtr2c3ycArt/ImLRIP2spqm+7e2YvFbcSKOOz6+\n+iLRvTj8v8KcSYtlB2FC1F6dRa4AujQ4RbNduP6LzHDfWUkfOzJDtNBAIPAXVnJJB\n+LqAEKkRHRghqT9x0i3GgS1vHDF3MwcO4mhFgserXr9ffUWeIEgbvrdcAKbv1Oa6Y\n+bK1NAoGAGPm8ISmboDJynjBl9wMrkcy23Pwg9kmyocdWUHh0zMLDKriZNKYB6u/U\n+C+/RTfkohPoHPzkeqWiHp7z3JhMItYUfTkNW6vMCxEGc0NEN6ZyMIjtiDPGN1n6O\n+E7jmODFmj1AQICQGdV5SHp+yKvKyb0YHKyDwETbs4SZBXxVvjEw=\n+-----END RSA PRIVATE KEY-----\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/ldap4/config/export.ldif b/tests/testflows/ldap/external_user_directory/configs/ldap4/config/export.ldif\nnew file mode 100644\nindex 000000000000..36afdb4e350e\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/ldap4/config/export.ldif\n@@ -0,0 +1,64 @@\n+# LDIF Export for dc=company,dc=com\n+# Server: openldap (openldap)\n+# Search Scope: sub\n+# Search Filter: (objectClass=*)\n+# Total Entries: 7\n+#\n+# Generated by phpLDAPadmin (http://phpldapadmin.sourceforge.net) on May 22, 2020 5:51 pm\n+# Version: 1.2.5\n+\n+# Entry 1: dc=company,dc=com\n+#dn: dc=company,dc=com\n+#dc: company\n+#o: company\n+#objectclass: top\n+#objectclass: dcObject\n+#objectclass: organization\n+\n+# Entry 2: cn=admin,dc=company,dc=com\n+#dn: cn=admin,dc=company,dc=com\n+#cn: admin\n+#description: LDAP administrator\n+#objectclass: simpleSecurityObject\n+#objectclass: organizationalRole\n+#userpassword: {SSHA}eUEupkQCTvq9SkrxfWGSe5rX+orrjVbF\n+\n+# Entry 3: ou=groups,dc=company,dc=com\n+dn: ou=groups,dc=company,dc=com\n+objectclass: organizationalUnit\n+objectclass: top\n+ou: groups\n+\n+# Entry 4: cn=admin,ou=groups,dc=company,dc=com\n+dn: cn=admin,ou=groups,dc=company,dc=com\n+cn: admin\n+gidnumber: 500\n+objectclass: posixGroup\n+objectclass: top\n+\n+# Entry 5: cn=users,ou=groups,dc=company,dc=com\n+dn: cn=users,ou=groups,dc=company,dc=com\n+cn: users\n+gidnumber: 501\n+objectclass: posixGroup\n+objectclass: top\n+\n+# Entry 6: ou=users,dc=company,dc=com\n+dn: ou=users,dc=company,dc=com\n+objectclass: organizationalUnit\n+objectclass: top\n+ou: users\n+\n+# Entry 7: cn=user4,ou=users,dc=company,dc=com\n+dn: cn=user4,ou=users,dc=company,dc=com\n+cn: user4\n+gidnumber: 501\n+givenname: John\n+homedirectory: /home/users/user4\n+objectclass: inetOrgPerson\n+objectclass: posixAccount\n+objectclass: top\n+sn: User\n+uid: user4\n+uidnumber: 1004\n+userpassword: user4\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/ldap5/config/export.ldif b/tests/testflows/ldap/external_user_directory/configs/ldap5/config/export.ldif\nnew file mode 100644\nindex 000000000000..bc3d2ff75fc7\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/ldap5/config/export.ldif\n@@ -0,0 +1,64 @@\n+# LDIF Export for dc=company,dc=com\n+# Server: openldap (openldap)\n+# Search Scope: sub\n+# Search Filter: (objectClass=*)\n+# Total Entries: 7\n+#\n+# Generated by phpLDAPadmin (http://phpldapadmin.sourceforge.net) on May 22, 2020 5:51 pm\n+# Version: 1.2.5\n+\n+# Entry 1: dc=company,dc=com\n+#dn: dc=company,dc=com\n+#dc: company\n+#o: company\n+#objectclass: top\n+#objectclass: dcObject\n+#objectclass: organization\n+\n+# Entry 2: cn=admin,dc=company,dc=com\n+#dn: cn=admin,dc=company,dc=com\n+#cn: admin\n+#description: LDAP administrator\n+#objectclass: simpleSecurityObject\n+#objectclass: organizationalRole\n+#userpassword: {SSHA}eUEupkQCTvq9SkrxfWGSe5rX+orrjVbF\n+\n+# Entry 3: ou=groups,dc=company,dc=com\n+dn: ou=groups,dc=company,dc=com\n+objectclass: organizationalUnit\n+objectclass: top\n+ou: groups\n+\n+# Entry 4: cn=admin,ou=groups,dc=company,dc=com\n+dn: cn=admin,ou=groups,dc=company,dc=com\n+cn: admin\n+gidnumber: 500\n+objectclass: posixGroup\n+objectclass: top\n+\n+# Entry 5: cn=users,ou=groups,dc=company,dc=com\n+dn: cn=users,ou=groups,dc=company,dc=com\n+cn: users\n+gidnumber: 501\n+objectclass: posixGroup\n+objectclass: top\n+\n+# Entry 6: ou=users,dc=company,dc=com\n+dn: ou=users,dc=company,dc=com\n+objectclass: organizationalUnit\n+objectclass: top\n+ou: users\n+\n+# Entry 7: cn=user5,ou=users,dc=company,dc=com\n+dn: cn=user5,ou=users,dc=company,dc=com\n+cn: user5\n+gidnumber: 501\n+givenname: John\n+homedirectory: /home/users/user5\n+objectclass: inetOrgPerson\n+objectclass: posixAccount\n+objectclass: top\n+sn: User\n+uid: user5\n+uidnumber: 1005\n+userpassword: user5\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/certs/ca.crt b/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/certs/ca.crt\nnew file mode 100644\nindex 000000000000..8c71e3afc91d\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/certs/ca.crt\n@@ -0,0 +1,22 @@\n+-----BEGIN CERTIFICATE-----\n+MIIDlTCCAn2gAwIBAgIUJBqw2dHM2DDCZjYSkPOESlvDH6swDQYJKoZIhvcNAQEL\n+BQAwWjELMAkGA1UEBhMCQ0ExCzAJBgNVBAgMAk9OMQ8wDQYDVQQHDAZPdHRhd2Ex\n+ETAPBgNVBAoMCEFsdGluaXR5MQswCQYDVQQLDAJRQTENMAsGA1UEAwwEcm9vdDAe\n+Fw0yMDA2MTExOTAzNDhaFw0zMDA2MDkxOTAzNDhaMFoxCzAJBgNVBAYTAkNBMQsw\n+CQYDVQQIDAJPTjEPMA0GA1UEBwwGT3R0YXdhMREwDwYDVQQKDAhBbHRpbml0eTEL\n+MAkGA1UECwwCUUExDTALBgNVBAMMBHJvb3QwggEiMA0GCSqGSIb3DQEBAQUAA4IB\n+DwAwggEKAoIBAQC9Irr0zGV+HCI2fZ0ht4hR5It4Sbjz4RwZV8ENRP/+TEz8l9eK\n+J6ygxhKX7SMYzIs/jS9Gsq4plX1r2ujW1qRf8yLpR4+dGLP+jBRi1drj0XjZXosT\n+SERjWzgPauWxL9LN8+l26eBAqz6fw5e0W8WRSTgf5iGiCcKOTmaATIUjP0CdfWKK\n+qpktI4vhe++CXZFJ3usR+8KZ/FwwbCLJM/3J2HnbcXfcaYPYvr1tfqLudKSTbG9H\n+M3+AVwjctdesc/0sbd51Zsm0ClQptMbuKnDCYauGg61kNkgbgPgRmH9Pzo67DtxF\n+/WW+PtOzq8xLOifciQ9Piboy9QBSQZGwf4wzAgMBAAGjUzBRMB0GA1UdDgQWBBSi\n+njya0RDozx3OZTLYFpwqYnlpIDAfBgNVHSMEGDAWgBSinjya0RDozx3OZTLYFpwq\n+YnlpIDAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQBAD7VyFg7F\n+U1C25KFvtauchAOjCW6w7U/b3z1dVZvcQ88/kH1VsLUcfGixlSilUEfPTJsi7OA0\n+R5BQdh2GGcjUJv4iqEFGU05KvMVmRRKn08P62+ZhJxKMxG26VzcliRZzCMkI6d0W\n+lFwI6nM45yeqdHVh5k4xbuJzqpbD9BtXXLI+/Ra9Fx8S9ETA3GdidpZLU5P1VLxq\n+UuedfqyAVWZXpr6TAURGxouRmRzul9yFzbSUex+MLEIPrstjtEwV3+tBQZJz9xAS\n+TVPj+Nv3LO7GCq54bdwkq1ioWbSL2hEmABkj6kdW/JwmfhGHf/2rirDVMzrTYw07\n+dFJfAZC+FEsv\n+-----END CERTIFICATE-----\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/certs/dhparam.pem b/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/certs/dhparam.pem\nnew file mode 100644\nindex 000000000000..0a96faffd627\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/certs/dhparam.pem\n@@ -0,0 +1,5 @@\n+-----BEGIN DH PARAMETERS-----\n+MIGHAoGBAJitt2hhnpDViQ5ko2ipBMdjy+bZ6FR/WdZ987R7lQvBkKehPXmxtEyV\n+AO6ofv5CZSDJokc5bUeBOAtg0EhMTCH82uPdwQvt58jRXcxXBg4JTjkx+oW9LBv2\n+FdZsbaX8+SYivmiZ0Jp8T/HBm/4DA9VBS0O5GFRS4C7dHhmSTPfDAgEC\n+-----END DH PARAMETERS-----\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/certs/ldap.crt b/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/certs/ldap.crt\nnew file mode 100644\nindex 000000000000..9167cbf861d0\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/certs/ldap.crt\n@@ -0,0 +1,20 @@\n+-----BEGIN CERTIFICATE-----\n+MIIDQDCCAigCFCJ7El0ntrGktZVTYTZd+OwtcJjBMA0GCSqGSIb3DQEBCwUAMFox\n+CzAJBgNVBAYTAkNBMQswCQYDVQQIDAJPTjEPMA0GA1UEBwwGT3R0YXdhMREwDwYD\n+VQQKDAhBbHRpbml0eTELMAkGA1UECwwCUUExDTALBgNVBAMMBHJvb3QwHhcNMjAw\n+NjExMTkxMTQzWhcNMzAwNjA5MTkxMTQzWjBfMQswCQYDVQQGEwJDQTELMAkGA1UE\n+CAwCT04xDzANBgNVBAcMBk90dGF3YTERMA8GA1UECgwIQWx0aW5pdHkxCzAJBgNV\n+BAsMAlFBMRIwEAYDVQQDDAlvcGVubGRhcDIwggEiMA0GCSqGSIb3DQEBAQUAA4IB\n+DwAwggEKAoIBAQC0Mbn//U56URavMgXm82FWP6vBdKuRydFX/L0M5XLlnAtk/IXG\n+/T+4t7nOBJxWmTp/xpsPtSMALE4eFJpEUEqlpVbG5DfBzVWcYOWoMeRAcHWCDkzr\n+PkB6I0dfF0Mm5hoaDhn+ZXjBWvoh/IlJdAnPg5mlejflJBQ7xtFC9eN6WjldXuRO\n+vyntGNuMfVLgITHwXuH2yZ98G0mFO6TU/9dRY/Z3D6RTSzKdb17Yk/VnG+ry92u2\n+0sgXIBvhuJuC3ksWLArwwFoMl8DVa05D4O2H76goGdCcQ0KzqBV8RPXAh3UcgP2e\n+Zu90p2EGIhIk+sZTCkPd4dorxjL9nkRR86HdAgMBAAEwDQYJKoZIhvcNAQELBQAD\n+ggEBAJWiCxJaTksv/BTsh/etxlDY5eHwqStqIuiovEQ8bhGAcKJ3bfWd/YTb8DUS\n+hrLvXrXdOVC+U8PqPFXBpdOqcm5Dc233z52VgUCb+0EKv3lAzgKXRIo32h52skdK\n+NnRrCHDeDzgfEIXR4MEJ99cLEaxWyXQhremmTYWHYznry9/4NYz40gCDxHn9dJAi\n+KxFyDNxhtuKs58zp4PrBoo+542JurAoLPtRGOhdXpU2RkQVU/ho38HsAXDStAB5D\n+vAoSxPuMHKgo17ffrb0oqU3didwaA9fIsz7Mr6RxmI7X03s7hLzNBq9FCqu0U3RR\n+CX4zWGFNJu/ieSGVWLYKQzbYxp8=\n+-----END CERTIFICATE-----\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/certs/ldap.csr b/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/certs/ldap.csr\nnew file mode 100644\nindex 000000000000..bf569f727d63\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/certs/ldap.csr\n@@ -0,0 +1,17 @@\n+-----BEGIN CERTIFICATE REQUEST-----\n+MIICpDCCAYwCAQAwXzELMAkGA1UEBhMCQ0ExCzAJBgNVBAgMAk9OMQ8wDQYDVQQH\n+DAZPdHRhd2ExETAPBgNVBAoMCEFsdGluaXR5MQswCQYDVQQLDAJRQTESMBAGA1UE\n+AwwJb3BlbmxkYXAyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtDG5\n+//1OelEWrzIF5vNhVj+rwXSrkcnRV/y9DOVy5ZwLZPyFxv0/uLe5zgScVpk6f8ab\n+D7UjACxOHhSaRFBKpaVWxuQ3wc1VnGDlqDHkQHB1gg5M6z5AeiNHXxdDJuYaGg4Z\n+/mV4wVr6IfyJSXQJz4OZpXo35SQUO8bRQvXjelo5XV7kTr8p7RjbjH1S4CEx8F7h\n+9smffBtJhTuk1P/XUWP2dw+kU0synW9e2JP1Zxvq8vdrttLIFyAb4bibgt5LFiwK\n+8MBaDJfA1WtOQ+Dth++oKBnQnENCs6gVfET1wId1HID9nmbvdKdhBiISJPrGUwpD\n+3eHaK8Yy/Z5EUfOh3QIDAQABoAAwDQYJKoZIhvcNAQELBQADggEBAEzIjZQOT5R7\n+mEJg+RFpCSIoPn3xJ4/VMMyWqA3bTGZKpb4S6GxgsierY/87kPL7jZrMdGYB4Dc3\n+2M3VWZGXlYo8vctH1zLE9VW6CzosUpl20lhdgydoCMz3RQqdJyK8aGeFTeLtk7G/\n+TRCCUFUE6jaA+VtaCPCnOJSff3jUf76xguEu7dgTZgCKV7dtBqald8gIzF3D+AJJ\n+7pEN2UrC3UR0xpe2cj2GhndQJ+WsIyft3zpNFzAO13j8ZPibuVP7oDWcW3ixNCWC\n+213aeRVplJGof8Eo6llDxP+6Fwp1YmOoQmwB1Xm3t4ADn7FLJ14LONLB7q40KviG\n+RyLyqu3IVOI=\n+-----END CERTIFICATE REQUEST-----\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/certs/ldap.key b/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/certs/ldap.key\nnew file mode 100644\nindex 000000000000..5ab3a3f8b590\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/certs/ldap.key\n@@ -0,0 +1,27 @@\n+-----BEGIN RSA PRIVATE KEY-----\n+MIIEogIBAAKCAQEAtDG5//1OelEWrzIF5vNhVj+rwXSrkcnRV/y9DOVy5ZwLZPyF\n+xv0/uLe5zgScVpk6f8abD7UjACxOHhSaRFBKpaVWxuQ3wc1VnGDlqDHkQHB1gg5M\n+6z5AeiNHXxdDJuYaGg4Z/mV4wVr6IfyJSXQJz4OZpXo35SQUO8bRQvXjelo5XV7k\n+Tr8p7RjbjH1S4CEx8F7h9smffBtJhTuk1P/XUWP2dw+kU0synW9e2JP1Zxvq8vdr\n+ttLIFyAb4bibgt5LFiwK8MBaDJfA1WtOQ+Dth++oKBnQnENCs6gVfET1wId1HID9\n+nmbvdKdhBiISJPrGUwpD3eHaK8Yy/Z5EUfOh3QIDAQABAoIBADugMMIKWcuTxYPX\n+c6iGZHEbxIPRTWyCcalB0nTQAAMGbabPAJ1l8432DZ+kWu806OybFXhPIfPOtVKy\n+0pFEWE8TtPE/V0vj3C5Qye2sBLFmBRwyCzXUdZV00wseMXRPs9dnTyalAR5KMnbI\n+j80kfpKSI2dkV9aU57UYBuq3Xrx/TCGItwL769D4ZZW9BvbpiTZApQQFZ0gwUFFn\n+btPXGU9Ti8H4mfBuZWL+5CaZdqOo76+CXvMPaUK0F9MJp4yX3XxQLRNH3qz/Tyn7\n+h7QOOo0XTqoUmzRw0N9QRVH5LRdSE5yq3aF9aFKjNW59exz+62pufOFadngzkpkn\n+OKCzgWkCgYEA4mOWWMzdYwMn3GtfG7whqlqy7wOmMkNb81zTDQejHBV98dnj0AHr\n+deurfKWzHrAh3DXo6tFeqUIgXabhBPS/0dEx/S5sgLFmuUZP05EUYahfWBgzzmM9\n+C6Oe5xIMLzxsZCJczolsfkEsoFe4o0vkvuLYoQrQL7InzewcDy8cUxsCgYEAy8Na\n+YCnanSNDY03Bulcni+5sF+opaHseeki1pv3nlw8TwsWuZF9ApS+yL7ck9jJjxBRR\n+RC3KGmpoqIr0vTmUYS946ngQWXPE90zfuhJfM+NRv/q0oCjH0qAcxRbTkls5On9v\n+oxJ8rO7gD6K85eHqasWdbCVzdZrobOXzay37tmcCgYBfyUUmw190cjReZauzH3Gb\n+E48b5A5gu/Fe0cqWe8G+szU7rDZgnz9SAGnpbm6QMHPTKZgoKngD42+wUFhq8Wdr\n+zjh5aDgOZ4EQKTjDSmI2Q7g7nNnmnESK9SrZl+BB6C3wXD2qQaj+7nKEUTlVFlpt\n+jaucz+dwFtASp7Djl8pDOwKBgEtr2c3ycArt/ImLRIP2spqm+7e2YvFbcSKOOz6+\n+iLRvTj8v8KcSYtlB2FC1F6dRa4AujQ4RbNduP6LzHDfWUkfOzJDtNBAIPAXVnJJB\n+LqAEKkRHRghqT9x0i3GgS1vHDF3MwcO4mhFgserXr9ffUWeIEgbvrdcAKbv1Oa6Y\n+bK1NAoGAGPm8ISmboDJynjBl9wMrkcy23Pwg9kmyocdWUHh0zMLDKriZNKYB6u/U\n+C+/RTfkohPoHPzkeqWiHp7z3JhMItYUfTkNW6vMCxEGc0NEN6ZyMIjtiDPGN1n6O\n+E7jmODFmj1AQICQGdV5SHp+yKvKyb0YHKyDwETbs4SZBXxVvjEw=\n+-----END RSA PRIVATE KEY-----\ndiff --git a/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/config/export.ldif b/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/config/export.ldif\nnew file mode 100644\nindex 000000000000..c6470176a5e7\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/config/export.ldif\n@@ -0,0 +1,64 @@\n+# LDIF Export for dc=company,dc=com\n+# Server: openldap (openldap)\n+# Search Scope: sub\n+# Search Filter: (objectClass=*)\n+# Total Entries: 7\n+#\n+# Generated by phpLDAPadmin (http://phpldapadmin.sourceforge.net) on May 22, 2020 5:51 pm\n+# Version: 1.2.5\n+\n+# Entry 1: dc=company,dc=com\n+#dn: dc=company,dc=com\n+#dc: company\n+#o: company\n+#objectclass: top\n+#objectclass: dcObject\n+#objectclass: organization\n+\n+# Entry 2: cn=admin,dc=company,dc=com\n+#dn: cn=admin,dc=company,dc=com\n+#cn: admin\n+#description: LDAP administrator\n+#objectclass: simpleSecurityObject\n+#objectclass: organizationalRole\n+#userpassword: {SSHA}eUEupkQCTvq9SkrxfWGSe5rX+orrjVbF\n+\n+# Entry 3: ou=groups,dc=company,dc=com\n+dn: ou=groups,dc=company,dc=com\n+objectclass: organizationalUnit\n+objectclass: top\n+ou: groups\n+\n+# Entry 4: cn=admin,ou=groups,dc=company,dc=com\n+dn: cn=admin,ou=groups,dc=company,dc=com\n+cn: admin\n+gidnumber: 500\n+objectclass: posixGroup\n+objectclass: top\n+\n+# Entry 5: cn=users,ou=groups,dc=company,dc=com\n+dn: cn=users,ou=groups,dc=company,dc=com\n+cn: users\n+gidnumber: 501\n+objectclass: posixGroup\n+objectclass: top\n+\n+# Entry 6: ou=users,dc=company,dc=com\n+dn: ou=users,dc=company,dc=com\n+objectclass: organizationalUnit\n+objectclass: top\n+ou: users\n+\n+# Entry 7: cn=user1,ou=users,dc=company,dc=com\n+dn: cn=user1,ou=users,dc=company,dc=com\n+cn: user1\n+gidnumber: 501\n+givenname: John1\n+homedirectory: /home/users/user1\n+objectclass: inetOrgPerson\n+objectclass: posixAccount\n+objectclass: top\n+sn: User1\n+uid: user1\n+uidnumber: 1001\n+userpassword: user1\ndiff --git a/tests/testflows/ldap/external_user_directory/docker-compose/clickhouse-service.yml b/tests/testflows/ldap/external_user_directory/docker-compose/clickhouse-service.yml\nnew file mode 100644\nindex 000000000000..2a56876c72e1\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/docker-compose/clickhouse-service.yml\n@@ -0,0 +1,28 @@\n+version: '2.3'\n+\n+services:\n+  clickhouse:\n+    image: yandex/clickhouse-integration-test\n+    expose:\n+      - \"9000\"\n+      - \"9009\"\n+      - \"8123\"\n+    volumes:\n+      - \"${CLICKHOUSE_TESTS_DIR}/configs/clickhouse/config.d:/etc/clickhouse-server/config.d\"\n+      - \"${CLICKHOUSE_TESTS_DIR}/configs/clickhouse/users.d/:/etc/clickhouse-server/users.d\"\n+      - \"${CLICKHOUSE_TESTS_DIR}/configs/clickhouse/ssl:/etc/clickhouse-server/ssl\"\n+      - \"${CLICKHOUSE_TESTS_DIR}/configs/clickhouse/config.xml:/etc/clickhouse-server/config.xml\"\n+      - \"${CLICKHOUSE_TESTS_DIR}/configs/clickhouse/users.xml:/etc/clickhouse-server/users.xml\"\n+      - \"${CLICKHOUSE_TESTS_SERVER_BIN_PATH:-/usr/bin/clickhouse}:/usr/bin/clickhouse\"\n+      - \"${CLICKHOUSE_TESTS_ODBC_BRIDGE_BIN_PATH:-/usr/bin/clickhouse-odbc-bridge}:/usr/bin/clickhouse-odbc-bridge\"\n+    entrypoint: bash -c \"clickhouse server --config-file=/etc/clickhouse-server/config.xml --log-file=/var/log/clickhouse-server/clickhouse-server.log --errorlog-file=/var/log/clickhouse-server/clickhouse-server.err.log\"\n+    healthcheck:\n+      test: clickhouse client --query='select 1'\n+      interval: 10s\n+      timeout: 10s\n+      retries: 3\n+      start_period: 300s\n+    cap_add:\n+      - SYS_PTRACE\n+    security_opt:\n+      - label:disable\ndiff --git a/tests/testflows/ldap/external_user_directory/docker-compose/docker-compose.yml b/tests/testflows/ldap/external_user_directory/docker-compose/docker-compose.yml\nnew file mode 100644\nindex 000000000000..c8ff683df587\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/docker-compose/docker-compose.yml\n@@ -0,0 +1,162 @@\n+version: '2.3'\n+\n+services:\n+  openldap1:\n+    # plain text\n+    extends:\n+      file: openldap-service.yml\n+      service: openldap\n+    volumes:\n+      - \"${CLICKHOUSE_TESTS_DIR}/configs/ldap1/config:/container/service/slapd/assets/config/bootstrap/ldif/custom\"\n+\n+  openldap2:\n+    # TLS - never\n+    extends:\n+      file: openldap-service.yml\n+      service: openldap\n+    environment:\n+      LDAP_TLS: \"true\"\n+      LDAP_TLS_CRT_FILENAME: \"ldap.crt\"\n+      LDAP_TLS_KEY_FILENAME: \"ldap.key\"\n+      LDAP_TLS_DH_PARAM_FILENAME: \"dhparam.pem\"\n+      LDAP_TLS_CA_CRT_FILENAME: \"ca.crt\"\n+      LDAP_TLS_ENFORCE: \"false\"\n+      LDAP_TLS_VERIFY_CLIENT: \"never\"\n+    volumes:\n+      - \"${CLICKHOUSE_TESTS_DIR}/configs/ldap2/config:/container/service/slapd/assets/config/bootstrap/ldif/custom\"\n+      - \"${CLICKHOUSE_TESTS_DIR}/configs/ldap2/certs:/container/service/slapd/assets/certs/\"\n+\n+  openldap3:\n+    # plain text - custom port\n+    extends:\n+      file: openldap-service.yml\n+      service: openldap\n+    expose:\n+      - \"3089\"\n+    environment:\n+      LDAP_PORT: \"3089\"\n+    volumes:\n+      - \"${CLICKHOUSE_TESTS_DIR}/configs/ldap3/config:/container/service/slapd/assets/config/bootstrap/ldif/custom\"\n+\n+  openldap4:\n+    # TLS - never custom port\n+    extends:\n+      file: openldap-service.yml\n+      service: openldap\n+    expose:\n+      - \"3089\"\n+      - \"6036\"\n+    environment:\n+      LDAP_PORT: \"3089\"\n+      LDAPS_PORT: \"6036\"\n+      LDAP_TLS: \"true\"\n+      LDAP_TLS_CRT_FILENAME: \"ldap.crt\"\n+      LDAP_TLS_KEY_FILENAME: \"ldap.key\"\n+      LDAP_TLS_DH_PARAM_FILENAME: \"dhparam.pem\"\n+      LDAP_TLS_CA_CRT_FILENAME: \"ca.crt\"\n+      LDAP_TLS_ENFORCE: \"false\"\n+      LDAP_TLS_VERIFY_CLIENT: \"never\"\n+      LDAP_TLS_CIPHER_SUITE: \"SECURE256:+SECURE128:-VERS-TLS-ALL:+VERS-TLS1.2:-RSA:-DHE-DSS:-CAMELLIA-128-CBC:-CAMELLIA-256-CBC\"\n+    volumes:\n+      - \"${CLICKHOUSE_TESTS_DIR}/configs/ldap4/config:/container/service/slapd/assets/config/bootstrap/ldif/custom\"\n+      - \"${CLICKHOUSE_TESTS_DIR}/configs/ldap4/certs:/container/service/slapd/assets/certs/\"\n+\n+  openldap5:\n+    # TLS - try\n+    extends:\n+      file: openldap-service.yml\n+      service: openldap\n+    environment:\n+      LDAP_TLS: \"true\"\n+      LDAP_TLS_CRT_FILENAME: \"ldap.crt\"\n+      LDAP_TLS_KEY_FILENAME: \"ldap.key\"\n+      LDAP_TLS_DH_PARAM_FILENAME: \"dhparam.pem\"\n+      LDAP_TLS_CA_CRT_FILENAME: \"ca.crt\"\n+      LDAP_TLS_ENFORCE: \"false\"\n+      LDAP_TLS_VERIFY_CLIENT: \"try\"\n+    volumes:\n+      - \"${CLICKHOUSE_TESTS_DIR}/configs/ldap5/config:/container/service/slapd/assets/config/bootstrap/ldif/custom\"\n+      - \"${CLICKHOUSE_TESTS_DIR}/configs/ldap5/certs:/container/service/slapd/assets/certs/\"\n+\n+  phpldapadmin:\n+    extends:\n+      file: openldap-service.yml\n+      service: phpldapadmin\n+    environment:\n+      PHPLDAPADMIN_LDAP_HOSTS: \"openldap1\"\n+    depends_on:\n+      openldap1:\n+        condition: service_healthy\n+\n+  zookeeper:\n+    extends:\n+      file: zookeeper-service.yml\n+      service: zookeeper\n+\n+  clickhouse1:\n+    extends:\n+      file: clickhouse-service.yml\n+      service: clickhouse\n+    hostname: clickhouse1\n+    volumes:\n+      - \"${CLICKHOUSE_TESTS_DIR}/_instances/clickhouse1/database/:/var/lib/clickhouse/\"\n+      - \"${CLICKHOUSE_TESTS_DIR}/_instances/clickhouse1/logs/:/var/log/clickhouse-server/\"\n+      - \"${CLICKHOUSE_TESTS_DIR}/configs/clickhouse1/config.d:/etc/clickhouse-server/config.d\"\n+      - \"${CLICKHOUSE_TESTS_DIR}/configs/clickhouse1/users.d:/etc/clickhouse-server/users.d\"\n+    depends_on:\n+      zookeeper:\n+        condition: service_healthy\n+\n+  clickhouse2:\n+    extends:\n+      file: clickhouse-service.yml\n+      service: clickhouse\n+    hostname: clickhouse2\n+    volumes:\n+      - \"${CLICKHOUSE_TESTS_DIR}/_instances/clickhouse2/database/:/var/lib/clickhouse/\"\n+      - \"${CLICKHOUSE_TESTS_DIR}/_instances/clickhouse2/logs/:/var/log/clickhouse-server/\"\n+      - \"${CLICKHOUSE_TESTS_DIR}/configs/clickhouse2/config.d:/etc/clickhouse-server/config.d\"\n+      - \"${CLICKHOUSE_TESTS_DIR}/configs/clickhouse2/users.d:/etc/clickhouse-server/users.d\"\n+    depends_on:\n+      zookeeper:\n+        condition: service_healthy\n+\n+  clickhouse3:\n+    extends:\n+      file: clickhouse-service.yml\n+      service: clickhouse\n+    hostname: clickhouse3\n+    volumes:\n+      - \"${CLICKHOUSE_TESTS_DIR}/_instances/clickhouse3/database/:/var/lib/clickhouse/\"\n+      - \"${CLICKHOUSE_TESTS_DIR}/_instances/clickhouse3/logs/:/var/log/clickhouse-server/\"\n+      - \"${CLICKHOUSE_TESTS_DIR}/configs/clickhouse3/config.d:/etc/clickhouse-server/config.d\"\n+      - \"${CLICKHOUSE_TESTS_DIR}/configs/clickhouse3/users.d:/etc/clickhouse-server/users.d\"\n+    depends_on:\n+      zookeeper:\n+        condition: service_healthy\n+\n+  # dummy service which does nothing, but allows to postpone \n+  # 'docker-compose up -d' till all dependecies will go healthy\n+  all_services_ready:\n+    image: hello-world\n+    depends_on:\n+      clickhouse1:\n+        condition: service_healthy\n+      clickhouse2:\n+        condition: service_healthy\n+      clickhouse3:\n+        condition: service_healthy\n+      zookeeper:\n+        condition: service_healthy\n+      openldap1:\n+        condition: service_healthy\n+      openldap2:\n+        condition: service_healthy\n+      openldap3:\n+        condition: service_healthy\n+      openldap4:\n+        condition: service_healthy\n+      openldap5:\n+        condition: service_healthy\n+      phpldapadmin:\n+        condition: service_healthy\ndiff --git a/tests/testflows/ldap/external_user_directory/docker-compose/openldap-service.yml b/tests/testflows/ldap/external_user_directory/docker-compose/openldap-service.yml\nnew file mode 100644\nindex 000000000000..139907c513cf\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/docker-compose/openldap-service.yml\n@@ -0,0 +1,40 @@\n+version: '2.3'\n+\n+services:\n+  openldap:\n+    image: osixia/openldap:1.4.0\n+    command: \"--copy-service --loglevel debug\"\n+    environment:\n+      LDAP_ORGANIZATION: \"company\"\n+      LDAP_DOMAIN: \"company.com\"\n+      LDAP_ADMIN_PASSWORD: \"admin\"\n+      LDAP_TLS: \"false\"\n+    expose:\n+      - \"389\"\n+      - \"636\"\n+    healthcheck:\n+      test: ldapsearch -x -H ldap://localhost:$${LDAP_PORT:-389} -b \"dc=company,dc=com\" -D \"cn=admin,dc=company,dc=com\" -w admin\n+      interval: 10s\n+      timeout: 10s\n+      retries: 3\n+      start_period: 300s\n+    security_opt:\n+      - label:disable\n+\n+\n+  phpldapadmin:\n+    image: osixia/phpldapadmin:0.9.0\n+    container_name: phpldapadmin\n+    environment:\n+      PHPLDAPADMIN_HTTPS=false:\n+    ports:\n+      - \"8080:80\"      \n+    healthcheck:\n+      test: echo 1\n+      interval: 10s\n+      timeout: 10s\n+      retries: 3\n+      start_period: 300s\n+    security_opt:\n+      - label:disable\n+\ndiff --git a/tests/testflows/ldap/external_user_directory/docker-compose/zookeeper-service.yml b/tests/testflows/ldap/external_user_directory/docker-compose/zookeeper-service.yml\nnew file mode 100644\nindex 000000000000..6691a2df31c1\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/docker-compose/zookeeper-service.yml\n@@ -0,0 +1,18 @@\n+version: '2.3'\n+\n+services:\n+  zookeeper:\n+    image: zookeeper:3.4.12\n+    expose:\n+      - \"2181\"\n+    environment:\n+      ZOO_TICK_TIME: 500\n+      ZOO_MY_ID: 1\n+    healthcheck:\n+      test: echo stat | nc localhost 2181\n+      interval: 10s\n+      timeout: 10s\n+      retries: 3\n+      start_period: 300s\n+    security_opt:\n+      - label:disable\ndiff --git a/tests/testflows/ldap/external_user_directory/regression.py b/tests/testflows/ldap/external_user_directory/regression.py\nnew file mode 100755\nindex 000000000000..6ce860a6fd2a\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/regression.py\n@@ -0,0 +1,56 @@\n+#!/usr/bin/env python3\n+import sys\n+from testflows.core import *\n+\n+append_path(sys.path, \"..\", \"..\")\n+\n+from helpers.cluster import Cluster\n+from helpers.argparser import argparser\n+from ldap.external_user_directory.requirements import *\n+\n+# Cross-outs of known fails\n+xfails = {\n+    \"connection protocols/tls/tls_require_cert='try'\":\n+     [(Fail, \"can't be tested with self-signed certificates\")],\n+    \"connection protocols/tls/tls_require_cert='demand'\":\n+     [(Fail, \"can't be tested with self-signed certificates\")],\n+    \"connection protocols/starttls/tls_require_cert='try'\":\n+     [(Fail, \"can't be tested with self-signed certificates\")],\n+    \"connection protocols/starttls/tls_require_cert='demand'\":\n+     [(Fail, \"can't be tested with self-signed certificates\")],\n+    \"connection protocols/tls require cert default demand\":\n+     [(Fail, \"can't be tested with self-signed certificates\")],\n+    \"connection protocols/starttls with custom port\":\n+     [(Fail, \"it seems that starttls is not enabled by default on custom plain-text ports in LDAP server\")],\n+    \"connection protocols/tls cipher suite\":\n+     [(Fail, \"can't get it to work\")]\n+}\n+\n+@TestFeature\n+@Name(\"external user directory\")\n+@ArgumentParser(argparser)\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication(\"1.0\")\n+)\n+@XFails(xfails)\n+def regression(self, local, clickhouse_binary_path):\n+    \"\"\"ClickHouse LDAP external user directory regression module.\n+    \"\"\"\n+    nodes = {\n+        \"clickhouse\": (\"clickhouse1\", \"clickhouse2\", \"clickhouse3\"),\n+    }\n+\n+    with Cluster(local, clickhouse_binary_path, nodes=nodes) as cluster:\n+        self.context.cluster = cluster\n+\n+        Scenario(run=load(\"ldap.authentication.tests.sanity\", \"scenario\"))\n+        Scenario(run=load(\"ldap.external_user_directory.tests.simple\", \"scenario\"))\n+        Feature(run=load(\"ldap.external_user_directory.tests.restart\", \"feature\"))\n+        Feature(run=load(\"ldap.external_user_directory.tests.server_config\", \"feature\"))\n+        Feature(run=load(\"ldap.external_user_directory.tests.external_user_directory_config\", \"feature\"))\n+        Feature(run=load(\"ldap.external_user_directory.tests.connections\", \"feature\"))\n+        Feature(run=load(\"ldap.external_user_directory.tests.authentications\", \"feature\"))\n+        Feature(run=load(\"ldap.external_user_directory.tests.roles\", \"feature\"))\n+\n+if main():\n+    regression()\ndiff --git a/tests/testflows/ldap/external_user_directory/requirements/__init__.py b/tests/testflows/ldap/external_user_directory/requirements/__init__.py\nnew file mode 100644\nindex 000000000000..02f7d4301544\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/requirements/__init__.py\n@@ -0,0 +1,1 @@\n+from .requirements import *\ndiff --git a/tests/testflows/ldap/external_user_directory/requirements/requirements.md b/tests/testflows/ldap/external_user_directory/requirements/requirements.md\nnew file mode 100644\nindex 000000000000..46532c3945d9\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/requirements/requirements.md\n@@ -0,0 +1,734 @@\n+# SRS-009 ClickHouse LDAP External User Directory\n+# Software Requirements Specification\n+\n+## Table of Contents\n+\n+* 1 [Revision History](#revision-history)\n+* 2 [Introduction](#introduction)\n+* 3 [Terminology](#terminology)\n+  * 3.1 [LDAP](#ldap)\n+* 4 [Requirements](#requirements)\n+  * 4.1 [Generic](#generic)\n+    * 4.1.1 [User Authentication](#user-authentication)\n+      * 4.1.1.1 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication](#rqsrs-009ldapexternaluserdirectoryauthentication)\n+      * 4.1.1.2 [RQ.SRS-009.LDAP.ExternalUserDirectory.MultipleUserDirectories](#rqsrs-009ldapexternaluserdirectorymultipleuserdirectories)\n+      * 4.1.1.3 [RQ.SRS-009.LDAP.ExternalUserDirectory.MultipleUserDirectories.Lookup](#rqsrs-009ldapexternaluserdirectorymultipleuserdirectorieslookup)\n+      * 4.1.1.4 [RQ.SRS-009.LDAP.ExternalUserDirectory.Users.Authentication.NewUsers](#rqsrs-009ldapexternaluserdirectoryusersauthenticationnewusers)\n+      * 4.1.1.5 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.DeletedUsers](#rqsrs-009ldapexternaluserdirectoryauthenticationdeletedusers)\n+      * 4.1.1.6 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Valid](#rqsrs-009ldapexternaluserdirectoryauthenticationvalid)\n+      * 4.1.1.7 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Invalid](#rqsrs-009ldapexternaluserdirectoryauthenticationinvalid)\n+      * 4.1.1.8 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.UsernameChanged](#rqsrs-009ldapexternaluserdirectoryauthenticationusernamechanged)\n+      * 4.1.1.9 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.PasswordChanged](#rqsrs-009ldapexternaluserdirectoryauthenticationpasswordchanged)\n+      * 4.1.1.10 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.LDAPServerRestart](#rqsrs-009ldapexternaluserdirectoryauthenticationldapserverrestart)\n+      * 4.1.1.11 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.ClickHouseServerRestart](#rqsrs-009ldapexternaluserdirectoryauthenticationclickhouseserverrestart)\n+      * 4.1.1.12 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel](#rqsrs-009ldapexternaluserdirectoryauthenticationparallel)\n+      * 4.1.1.13 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel.ValidAndInvalid](#rqsrs-009ldapexternaluserdirectoryauthenticationparallelvalidandinvalid)\n+      * 4.1.1.14 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel.MultipleServers](#rqsrs-009ldapexternaluserdirectoryauthenticationparallelmultipleservers)\n+      * 4.1.1.15 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel.LocalOnly](#rqsrs-009ldapexternaluserdirectoryauthenticationparallellocalonly)\n+      * 4.1.1.16 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel.LocalAndMultipleLDAP](#rqsrs-009ldapexternaluserdirectoryauthenticationparallellocalandmultipleldap)\n+      * 4.1.1.17 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel.SameUser](#rqsrs-009ldapexternaluserdirectoryauthenticationparallelsameuser)\n+      * 4.1.1.18 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel.DynamicallyAddedAndRemovedUsers](#rqsrs-009ldapexternaluserdirectoryauthenticationparalleldynamicallyaddedandremovedusers)\n+    * 4.1.2 [Connection](#connection)\n+      * 4.1.2.1 [RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Protocol.PlainText](#rqsrs-009ldapexternaluserdirectoryconnectionprotocolplaintext)\n+      * 4.1.2.2 [RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Protocol.TLS](#rqsrs-009ldapexternaluserdirectoryconnectionprotocoltls)\n+      * 4.1.2.3 [RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Protocol.StartTLS](#rqsrs-009ldapexternaluserdirectoryconnectionprotocolstarttls)\n+      * 4.1.2.4 [RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Protocol.TLS.Certificate.Validation](#rqsrs-009ldapexternaluserdirectoryconnectionprotocoltlscertificatevalidation)\n+      * 4.1.2.5 [RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Protocol.TLS.Certificate.SelfSigned](#rqsrs-009ldapexternaluserdirectoryconnectionprotocoltlscertificateselfsigned)\n+      * 4.1.2.6 [RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Protocol.TLS.Certificate.SpecificCertificationAuthority](#rqsrs-009ldapexternaluserdirectoryconnectionprotocoltlscertificatespecificcertificationauthority)\n+      * 4.1.2.7 [RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Authentication.Mechanism.Anonymous](#rqsrs-009ldapexternaluserdirectoryconnectionauthenticationmechanismanonymous)\n+      * 4.1.2.8 [RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Authentication.Mechanism.Unauthenticated](#rqsrs-009ldapexternaluserdirectoryconnectionauthenticationmechanismunauthenticated)\n+      * 4.1.2.9 [RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Authentication.Mechanism.NamePassword](#rqsrs-009ldapexternaluserdirectoryconnectionauthenticationmechanismnamepassword)\n+      * 4.1.2.10 [RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Authentication.UnreachableServer](#rqsrs-009ldapexternaluserdirectoryconnectionauthenticationunreachableserver)\n+  * 4.2 [Specific](#specific)\n+    * 4.2.1 [User Discovery](#user-discovery)\n+      * 4.2.1.1 [RQ.SRS-009.LDAP.ExternalUserDirectory.Users.Lookup.Priority](#rqsrs-009ldapexternaluserdirectoryuserslookuppriority)\n+      * 4.2.1.2 [RQ.SRS-009.LDAP.ExternalUserDirectory.Restart.Server](#rqsrs-009ldapexternaluserdirectoryrestartserver)\n+      * 4.2.1.3 [RQ.SRS-009.LDAP.ExternalUserDirectory.Restart.Server.ParallelLogins](#rqsrs-009ldapexternaluserdirectoryrestartserverparallellogins)\n+    * 4.2.2 [Roles](#roles)\n+      * 4.2.2.1 [RQ.SRS-009.LDAP.ExternalUserDirectory.Role.Removed](#rqsrs-009ldapexternaluserdirectoryroleremoved)\n+      * 4.2.2.2 [RQ.SRS-009.LDAP.ExternalUserDirectory.Role.Removed.Privileges](#rqsrs-009ldapexternaluserdirectoryroleremovedprivileges)\n+      * 4.2.2.3 [RQ.SRS-009.LDAP.ExternalUserDirectory.Role.Readded.Privileges](#rqsrs-009ldapexternaluserdirectoryrolereaddedprivileges)\n+      * 4.2.2.4 [RQ.SRS-009.LDAP.ExternalUserDirectory.Role.New](#rqsrs-009ldapexternaluserdirectoryrolenew)\n+      * 4.2.2.5 [RQ.SRS-009.LDAP.ExternalUserDirectory.Role.NewPrivilege](#rqsrs-009ldapexternaluserdirectoryrolenewprivilege)\n+      * 4.2.2.6 [RQ.SRS-009.LDAP.ExternalUserDirectory.Role.RemovedPrivilege](#rqsrs-009ldapexternaluserdirectoryroleremovedprivilege)\n+    * 4.2.3 [Configuration](#configuration)\n+      * 4.2.3.1 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Invalid](#rqsrs-009ldapexternaluserdirectoryconfigurationserverinvalid)\n+      * 4.2.3.2 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Definition](#rqsrs-009ldapexternaluserdirectoryconfigurationserverdefinition)\n+      * 4.2.3.3 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Name](#rqsrs-009ldapexternaluserdirectoryconfigurationservername)\n+      * 4.2.3.4 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Host](#rqsrs-009ldapexternaluserdirectoryconfigurationserverhost)\n+      * 4.2.3.5 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Port](#rqsrs-009ldapexternaluserdirectoryconfigurationserverport)\n+      * 4.2.3.6 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Port.Default](#rqsrs-009ldapexternaluserdirectoryconfigurationserverportdefault)\n+      * 4.2.3.7 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.AuthDN.Prefix](#rqsrs-009ldapexternaluserdirectoryconfigurationserverauthdnprefix)\n+      * 4.2.3.8 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.AuthDN.Suffix](#rqsrs-009ldapexternaluserdirectoryconfigurationserverauthdnsuffix)\n+      * 4.2.3.9 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.AuthDN.Value](#rqsrs-009ldapexternaluserdirectoryconfigurationserverauthdnvalue)\n+      * 4.2.3.10 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.EnableTLS](#rqsrs-009ldapexternaluserdirectoryconfigurationserverenabletls)\n+      * 4.2.3.11 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.EnableTLS.Options.Default](#rqsrs-009ldapexternaluserdirectoryconfigurationserverenabletlsoptionsdefault)\n+      * 4.2.3.12 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.EnableTLS.Options.No](#rqsrs-009ldapexternaluserdirectoryconfigurationserverenabletlsoptionsno)\n+      * 4.2.3.13 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.EnableTLS.Options.Yes](#rqsrs-009ldapexternaluserdirectoryconfigurationserverenabletlsoptionsyes)\n+      * 4.2.3.14 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.EnableTLS.Options.StartTLS](#rqsrs-009ldapexternaluserdirectoryconfigurationserverenabletlsoptionsstarttls)\n+      * 4.2.3.15 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSMinimumProtocolVersion](#rqsrs-009ldapexternaluserdirectoryconfigurationservertlsminimumprotocolversion)\n+      * 4.2.3.16 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSMinimumProtocolVersion.Values](#rqsrs-009ldapexternaluserdirectoryconfigurationservertlsminimumprotocolversionvalues)\n+      * 4.2.3.17 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSMinimumProtocolVersion.Default](#rqsrs-009ldapexternaluserdirectoryconfigurationservertlsminimumprotocolversiondefault)\n+      * 4.2.3.18 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSRequireCert](#rqsrs-009ldapexternaluserdirectoryconfigurationservertlsrequirecert)\n+      * 4.2.3.19 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSRequireCert.Options.Default](#rqsrs-009ldapexternaluserdirectoryconfigurationservertlsrequirecertoptionsdefault)\n+      * 4.2.3.20 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSRequireCert.Options.Demand](#rqsrs-009ldapexternaluserdirectoryconfigurationservertlsrequirecertoptionsdemand)\n+      * 4.2.3.21 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSRequireCert.Options.Allow](#rqsrs-009ldapexternaluserdirectoryconfigurationservertlsrequirecertoptionsallow)\n+      * 4.2.3.22 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSRequireCert.Options.Try](#rqsrs-009ldapexternaluserdirectoryconfigurationservertlsrequirecertoptionstry)\n+      * 4.2.3.23 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSRequireCert.Options.Never](#rqsrs-009ldapexternaluserdirectoryconfigurationservertlsrequirecertoptionsnever)\n+      * 4.2.3.24 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSCertFile](#rqsrs-009ldapexternaluserdirectoryconfigurationservertlscertfile)\n+      * 4.2.3.25 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSKeyFile](#rqsrs-009ldapexternaluserdirectoryconfigurationservertlskeyfile)\n+      * 4.2.3.26 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSCACertDir](#rqsrs-009ldapexternaluserdirectoryconfigurationservertlscacertdir)\n+      * 4.2.3.27 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSCACertFile](#rqsrs-009ldapexternaluserdirectoryconfigurationservertlscacertfile)\n+      * 4.2.3.28 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSCipherSuite](#rqsrs-009ldapexternaluserdirectoryconfigurationservertlsciphersuite)\n+      * 4.2.3.29 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Syntax](#rqsrs-009ldapexternaluserdirectoryconfigurationserversyntax)\n+      * 4.2.3.30 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.LDAPUserDirectory](#rqsrs-009ldapexternaluserdirectoryconfigurationusersldapuserdirectory)\n+      * 4.2.3.31 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.LDAPUserDirectory.MoreThanOne](#rqsrs-009ldapexternaluserdirectoryconfigurationusersldapuserdirectorymorethanone)\n+      * 4.2.3.32 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Syntax](#rqsrs-009ldapexternaluserdirectoryconfigurationuserssyntax)\n+      * 4.2.3.33 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Server](#rqsrs-009ldapexternaluserdirectoryconfigurationusersparametersserver)\n+      * 4.2.3.34 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Server.Empty](#rqsrs-009ldapexternaluserdirectoryconfigurationusersparametersserverempty)\n+      * 4.2.3.35 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Server.Missing](#rqsrs-009ldapexternaluserdirectoryconfigurationusersparametersservermissing)\n+      * 4.2.3.36 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Server.MoreThanOne](#rqsrs-009ldapexternaluserdirectoryconfigurationusersparametersservermorethanone)\n+      * 4.2.3.37 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Server.Invalid](#rqsrs-009ldapexternaluserdirectoryconfigurationusersparametersserverinvalid)\n+      * 4.2.3.38 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Roles](#rqsrs-009ldapexternaluserdirectoryconfigurationusersparametersroles)\n+      * 4.2.3.39 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Roles.MoreThanOne](#rqsrs-009ldapexternaluserdirectoryconfigurationusersparametersrolesmorethanone)\n+      * 4.2.3.40 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Roles.Invalid](#rqsrs-009ldapexternaluserdirectoryconfigurationusersparametersrolesinvalid)\n+      * 4.2.3.41 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Roles.Empty](#rqsrs-009ldapexternaluserdirectoryconfigurationusersparametersrolesempty)\n+      * 4.2.3.42 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Roles.Missing](#rqsrs-009ldapexternaluserdirectoryconfigurationusersparametersrolesmissing)\n+    * 4.2.4 [Authentication](#authentication)\n+      * 4.2.4.1 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Username.Empty](#rqsrs-009ldapexternaluserdirectoryauthenticationusernameempty)\n+      * 4.2.4.2 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Username.Long](#rqsrs-009ldapexternaluserdirectoryauthenticationusernamelong)\n+      * 4.2.4.3 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Username.UTF8](#rqsrs-009ldapexternaluserdirectoryauthenticationusernameutf8)\n+      * 4.2.4.4 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Password.Empty](#rqsrs-009ldapexternaluserdirectoryauthenticationpasswordempty)\n+      * 4.2.4.5 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Password.Long](#rqsrs-009ldapexternaluserdirectoryauthenticationpasswordlong)\n+      * 4.2.4.6 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Password.UTF8](#rqsrs-009ldapexternaluserdirectoryauthenticationpasswordutf8)\n+* 5 [References](#references)\n+\n+## Revision History\n+\n+This document is stored in an electronic form using [Git] source control management software\n+hosted in a [GitHub Repository].\n+All the updates are tracked using the [Revision History].\n+\n+## Introduction\n+\n+The [QA-SRS007 ClickHouse Authentication of Users via LDAP] enables support for authenticating\n+users using an [LDAP] server. This requirements specifications add addition functionality\n+for integrating [LDAP] with [ClickHouse].\n+\n+This document will cover requirements to allow authenticatoin of users stored in the\n+external user discovery using an [LDAP] server without having to explicitly define users in [ClickHouse]'s\n+`users.xml` configuration file.\n+\n+## Terminology\n+\n+### LDAP\n+\n+* Lightweight Directory Access Protocol\n+\n+## Requirements\n+\n+### Generic\n+\n+#### User Authentication\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication\n+version: 1.0\n+\n+[ClickHouse] SHALL support authenticating users that are defined only on the [LDAP] server.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.MultipleUserDirectories\n+version: 1.0\n+\n+[ClickHouse] SHALL support authenticating users using multiple [LDAP] external user directories.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.MultipleUserDirectories.Lookup\n+version: 1.0\n+\n+[ClickHouse] SHALL attempt to authenticate external [LDAP] user\n+using [LDAP] external user directory in the same order\n+in which user directories are specified in the `config.xml` file.\n+If a user cannot be authenticated using the first [LDAP] external user directory\n+then the next user directory in the list SHALL be used.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Users.Authentication.NewUsers\n+version: 1.0\n+\n+[ClickHouse] SHALL support authenticating users that are defined only on the [LDAP] server\n+as soon as they are added to the [LDAP] server.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.DeletedUsers\n+version: 1.0\n+\n+[ClickHouse] SHALL not allow authentication of users that\n+were previously defined only on the [LDAP] server but were removed\n+from the [LDAP] server.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Valid\n+version: 1.0\n+\n+[ClickHouse] SHALL only allow user authentication using [LDAP] server if and only if\n+user name and password match [LDAP] server records for the user\n+when using [LDAP] external user directory.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Invalid\n+version: 1.0\n+\n+[ClickHouse] SHALL return an error and prohibit authentication if either user name or password\n+do not match [LDAP] server records for the user\n+when using [LDAP] external user directory.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.UsernameChanged\n+version: 1.0\n+\n+[ClickHouse] SHALL return an error and prohibit authentication if the username is changed\n+on the [LDAP] server when using [LDAP] external user directory.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.PasswordChanged\n+version: 1.0\n+\n+[ClickHouse] SHALL return an error and prohibit authentication if the password\n+for the user is changed on the [LDAP] server when using [LDAP] external user directory.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.LDAPServerRestart\n+version: 1.0\n+\n+[ClickHouse] SHALL support authenticating users after [LDAP] server is restarted\n+when using [LDAP] external user directory.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.ClickHouseServerRestart\n+version: 1.0\n+\n+[ClickHouse] SHALL support authenticating users after server is restarted\n+when using [LDAP] external user directory.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel\n+version: 1.0\n+\n+[ClickHouse] SHALL support parallel authentication of users using [LDAP] server\n+when using [LDAP] external user directory.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel.ValidAndInvalid\n+version: 1.0\n+\n+[ClickHouse] SHALL support authentication of valid users and\n+prohibit authentication of invalid users using [LDAP] server\n+in parallel without having invalid attempts affecting valid authentications\n+when using [LDAP] external user directory.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel.MultipleServers\n+version: 1.0\n+\n+[ClickHouse] SHALL support parallel authentication of external [LDAP] users\n+authenticated using multiple [LDAP] external user directories.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel.LocalOnly\n+version: 1.0\n+\n+[ClickHouse] SHALL support parallel authentication of users defined only locally\n+when one or more [LDAP] external user directories are specified in the configuration file.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel.LocalAndMultipleLDAP\n+version: 1.0\n+\n+[ClickHouse] SHALL support parallel authentication of local and external [LDAP] users\n+authenticated using multiple [LDAP] external user directories.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel.SameUser\n+version: 1.0\n+\n+[ClickHouse] SHALL support parallel authentication of the same external [LDAP] user\n+authenticated using the same [LDAP] external user directory.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel.DynamicallyAddedAndRemovedUsers\n+version: 1.0\n+\n+[ClickHouse] SHALL support parallel authentication of users using\n+[LDAP] external user directory when [LDAP] users are dynamically added and\n+removed.\n+\n+#### Connection\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Protocol.PlainText\n+version: 1.0\n+\n+[ClickHouse] SHALL support user authentication using plain text `ldap://` non secure protocol\n+while connecting to the [LDAP] server when using [LDAP] external user directory.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Protocol.TLS\n+version: 1.0\n+\n+[ClickHouse] SHALL support user authentication using `SSL/TLS` `ldaps://` secure protocol\n+while connecting to the [LDAP] server when using [LDAP] external user directory.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Protocol.StartTLS\n+version: 1.0\n+\n+[ClickHouse] SHALL support user authentication using legacy `StartTLS` protocol which is a\n+plain text `ldap://` protocol that is upgraded to [TLS] when connecting to the [LDAP] server\n+when using [LDAP] external user directory.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Protocol.TLS.Certificate.Validation\n+version: 1.0\n+\n+[ClickHouse] SHALL support certificate validation used for [TLS] connections\n+to the [LDAP] server when using [LDAP] external user directory.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Protocol.TLS.Certificate.SelfSigned\n+version: 1.0\n+\n+[ClickHouse] SHALL support self-signed certificates for [TLS] connections\n+to the [LDAP] server when using [LDAP] external user directory.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Protocol.TLS.Certificate.SpecificCertificationAuthority\n+version: 1.0\n+\n+[ClickHouse] SHALL support certificates signed by specific Certification Authority for [TLS] connections\n+to the [LDAP] server when using [LDAP] external user directory.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Authentication.Mechanism.Anonymous\n+version: 1.0\n+\n+[ClickHouse] SHALL return an error and prohibit authentication using [Anonymous Authentication Mechanism of Simple Bind]\n+authentication mechanism when connecting to the [LDAP] server when using [LDAP] external server directory.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Authentication.Mechanism.Unauthenticated\n+version: 1.0\n+\n+[ClickHouse] SHALL return an error and prohibit authentication using [Unauthenticated Authentication Mechanism of Simple Bind]\n+authentication mechanism when connecting to the [LDAP] server when using [LDAP] external server directory.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Authentication.Mechanism.NamePassword\n+version: 1.0\n+\n+[ClickHouse] SHALL allow authentication using only [Name/Password Authentication Mechanism of Simple Bind]\n+authentication mechanism when connecting to the [LDAP] server when using [LDAP] external server directory.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Authentication.UnreachableServer\n+version: 1.0\n+\n+[ClickHouse] SHALL return an error and prohibit user login if [LDAP] server is unreachable\n+when using [LDAP] external user directory.\n+\n+### Specific\n+\n+#### User Discovery\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Users.Lookup.Priority\n+version: 2.0\n+\n+[ClickHouse] SHALL lookup user presence in the same order\n+as user directories are defined in the `config.xml`.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Restart.Server\n+version: 1.0\n+\n+[ClickHouse] SHALL support restarting server when one or more LDAP external directories\n+are configured.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Restart.Server.ParallelLogins\n+version: 1.0\n+\n+[ClickHouse] SHALL support restarting server when one or more LDAP external directories\n+are configured during parallel [LDAP] user logins.\n+\n+#### Roles\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Role.Removed\n+version: 1.0\n+\n+[ClickHouse] SHALL reject authentication attempt if any of the roles that are specified in the configuration\n+of the external user directory are not defined at the time of the authentication attempt\n+with an exception that if a user was able to authenticate in past and its internal user object was created and cached\n+then the user SHALL be able to authenticate again, even if one of the roles is missing.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Role.Removed.Privileges\n+version: 1.0\n+\n+[ClickHouse] SHALL remove the privileges provided by the role from all the LDAP\n+users authenticated using external user directory if it is removed\n+including currently cached users that are still able to authenticated where the removed\n+role is specified in the configuration of the external user directory.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Role.Readded.Privileges\n+version: 1.0\n+\n+[ClickHouse] SHALL reassign the role and add the privileges provided by the role\n+when it is re-added after removal for all LDAP users authenticated using external user directory\n+including any cached users where the re-added role was specified in the configuration of the external user directory.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Role.New\n+version: 1.0\n+\n+[ClickHouse] SHALL not allow any new roles to be assigned to any LDAP\n+users authenticated using external user directory unless the role is specified\n+in the configuration of the external user directory.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Role.NewPrivilege\n+version: 1.0\n+\n+[ClickHouse] SHALL add new privilege to all the LDAP users authenticated using external user directory\n+including cached users when new privilege is added to one of the roles specified\n+in the configuration of the external user directory.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Role.RemovedPrivilege\n+version: 1.0\n+\n+[ClickHouse] SHALL remove privilege from all the LDAP users authenticated using external user directory\n+including cached users when privilege is removed from all the roles specified\n+in the configuration of the external user directory.\n+\n+#### Configuration\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Invalid\n+version: 1.0\n+\n+[ClickHouse] SHALL return an error and prohibit user login if [LDAP] server configuration is not valid.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Definition\n+version: 1.0\n+\n+[ClickHouse] SHALL support using the [LDAP] servers defined in the\n+`ldap_servers` section of the `config.xml` as the server to be used\n+for a external user directory that uses an [LDAP] server as a source of user definitions.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Name\n+version: 1.0\n+\n+[ClickHouse] SHALL not support empty string as a server name.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Host\n+version: 1.0\n+\n+[ClickHouse] SHALL support `<host>` parameter to specify [LDAP]\n+server hostname or IP, this parameter SHALL be mandatory and SHALL not be empty.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Port\n+version: 1.0\n+\n+[ClickHouse] SHALL support `<port>` parameter to specify [LDAP] server port.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Port.Default\n+version: 1.0\n+\n+[ClickHouse] SHALL use default port number `636` if `enable_tls` is set to `yes` or `389` otherwise.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.AuthDN.Prefix\n+version: 1.0\n+\n+[ClickHouse] SHALL support `<auth_dn_prefix>` parameter to specify the prefix\n+of value used to construct the DN to bound to during authentication via [LDAP] server.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.AuthDN.Suffix\n+version: 1.0\n+\n+[ClickHouse] SHALL support `<auth_dn_suffix>` parameter to specify the suffix\n+of value used to construct the DN to bound to during authentication via [LDAP] server.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.AuthDN.Value\n+version: 1.0\n+\n+[ClickHouse] SHALL construct DN as  `auth_dn_prefix + escape(user_name) + auth_dn_suffix` string.\n+\n+> This implies that auth_dn_suffix should usually have comma ',' as its first non-space character.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.EnableTLS\n+version: 1.0\n+\n+[ClickHouse] SHALL support `<enable_tls>` parameter to trigger the use of secure connection to the [LDAP] server.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.EnableTLS.Options.Default\n+version: 1.0\n+\n+[ClickHouse] SHALL use `yes` value as the default for `<enable_tls>` parameter\n+to enable SSL/TLS `ldaps://` protocol.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.EnableTLS.Options.No\n+version: 1.0\n+\n+[ClickHouse] SHALL support specifying `no` as the value of `<enable_tls>` parameter to enable\n+plain text `ldap://` protocol.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.EnableTLS.Options.Yes\n+version: 1.0\n+\n+[ClickHouse] SHALL support specifying `yes` as the value of `<enable_tls>` parameter to enable\n+SSL/TLS `ldaps://` protocol.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.EnableTLS.Options.StartTLS\n+version: 1.0\n+\n+[ClickHouse] SHALL support specifying `starttls` as the value of `<enable_tls>` parameter to enable\n+legacy `StartTLS` protocol that used plain text `ldap://` protocol, upgraded to [TLS].\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSMinimumProtocolVersion\n+version: 1.0\n+\n+[ClickHouse] SHALL support `<tls_minimum_protocol_version>` parameter to specify\n+the minimum protocol version of SSL/TLS.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSMinimumProtocolVersion.Values\n+version: 1.0\n+\n+[ClickHouse] SHALL support specifying `ssl2`, `ssl3`, `tls1.0`, `tls1.1`, and `tls1.2`\n+as a value of the `<tls_minimum_protocol_version>` parameter.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSMinimumProtocolVersion.Default\n+version: 1.0\n+\n+[ClickHouse] SHALL set `tls1.2` as the default value of the `<tls_minimum_protocol_version>` parameter.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSRequireCert\n+version: 1.0\n+\n+[ClickHouse] SHALL support `<tls_require_cert>` parameter to specify [TLS] peer\n+certificate verification behavior.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSRequireCert.Options.Default\n+version: 1.0\n+\n+[ClickHouse] SHALL use `demand` value as the default for the `<tls_require_cert>` parameter.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSRequireCert.Options.Demand\n+version: 1.0\n+\n+[ClickHouse] SHALL support specifying `demand` as the value of `<tls_require_cert>` parameter to\n+enable requesting of client certificate.  If no certificate  is  provided,  or  a  bad   certificate   is\n+provided, the session SHALL be immediately terminated.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSRequireCert.Options.Allow\n+version: 1.0\n+\n+[ClickHouse] SHALL support specifying `allow` as the value of `<tls_require_cert>` parameter to\n+enable requesting of client certificate. If no\n+certificate is provided, the session SHALL proceed normally.\n+If a bad certificate is provided, it SHALL be ignored and the session SHALL proceed normally.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSRequireCert.Options.Try\n+version: 1.0\n+\n+[ClickHouse] SHALL support specifying `try` as the value of `<tls_require_cert>` parameter to\n+enable requesting of client certificate. If no certificate is provided, the session\n+SHALL proceed  normally.  If a bad certificate is provided, the session SHALL be\n+immediately terminated.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSRequireCert.Options.Never\n+version: 1.0\n+\n+[ClickHouse] SHALL support specifying `never` as the value of `<tls_require_cert>` parameter to\n+disable requesting of client certificate.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSCertFile\n+version: 1.0\n+\n+[ClickHouse] SHALL support `<tls_cert_file>` to specify the path to certificate file used by\n+[ClickHouse] to establish connection with the [LDAP] server.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSKeyFile\n+version: 1.0\n+\n+[ClickHouse] SHALL support `<tls_key_file>` to specify the path to key file for the certificate\n+specified by the `<tls_cert_file>` parameter.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSCACertDir\n+version: 1.0\n+\n+[ClickHouse] SHALL support `<tls_ca_cert_dir>` parameter to specify to a path to\n+the directory containing [CA] certificates used to verify certificates provided by the [LDAP] server.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSCACertFile\n+version: 1.0\n+\n+[ClickHouse] SHALL support `<tls_ca_cert_file>` parameter to specify a path to a specific\n+[CA] certificate file used to verify certificates provided by the [LDAP] server.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSCipherSuite\n+version: 1.0\n+\n+[ClickHouse] SHALL support `tls_cipher_suite` parameter to specify allowed cipher suites.\n+The value SHALL use the same format as the `ciphersuites` in the [OpenSSL Ciphers].\n+\n+For example,\n+\n+```xml\n+<tls_cipher_suite>ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:AES256-GCM-SHA384</tls_cipher_suite>\n+```\n+\n+The available suites SHALL depend on the [OpenSSL] library version and variant used to build\n+[ClickHouse] and therefore might change.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Syntax\n+version: 1.0\n+\n+[ClickHouse] SHALL support the following example syntax to create an entry for an [LDAP] server inside the `config.xml`\n+configuration file or of any configuration file inside the `config.d` directory.\n+\n+```xml\n+<yandex>\n+    <my_ldap_server>\n+        <host>localhost</host>\n+        <port>636</port>\n+        <auth_dn_prefix>cn=</auth_dn_prefix>\n+        <auth_dn_suffix>, ou=users, dc=example, dc=com</auth_dn_suffix>\n+        <enable_tls>yes</enable_tls>\n+        <tls_minimum_protocol_version>tls1.2</tls_minimum_protocol_version>\n+        <tls_require_cert>demand</tls_require_cert>\n+        <tls_cert_file>/path/to/tls_cert_file</tls_cert_file>\n+        <tls_key_file>/path/to/tls_key_file</tls_key_file>\n+        <tls_ca_cert_file>/path/to/tls_ca_cert_file</tls_ca_cert_file>\n+        <tls_ca_cert_dir>/path/to/tls_ca_cert_dir</tls_ca_cert_dir>\n+        <tls_cipher_suite>ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:AES256-GCM-SHA384</tls_cipher_suite>\n+    </my_ldap_server>\n+</yandex>\n+```\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.LDAPUserDirectory\n+version: 1.0\n+\n+[ClickHouse] SHALL support `<ldap>` sub-section in the `<user_directories>` section of the `config.xml`\n+that SHALL define a external user directory that uses an [LDAP] server as a source of user definitions.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.LDAPUserDirectory.MoreThanOne\n+version: 2.0\n+\n+[ClickHouse] SHALL support more than one `<ldap>` sub-sections in the `<user_directories>` section of the `config.xml`\n+that SHALL allow to define more than one external user directory that use an [LDAP] server as a source\n+of user definitions.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Syntax\n+version: 1.0\n+\n+[ClickHouse] SHALL support `<ldap>` section with the following syntax\n+\n+```xml\n+<yandex>\n+    <user_directories>\n+        <ldap>\n+            <server>my_ldap_server</server>\n+            <roles>\n+                <my_local_role1 />\n+                <my_local_role2 />\n+            </roles>\n+        </ldap>\n+    </user_directories>\n+</yandex>\n+```\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Server\n+version: 1.0\n+\n+[ClickHouse] SHALL support `server` parameter in the `<ldap>` sub-section in the `<user_directories>`\n+section of the `config.xml` that SHALL specify one of LDAP server names\n+defined in `<ldap_servers>` section.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Server.Empty\n+version: 1.0\n+\n+[ClickHouse] SHALL return an error if the `server` parameter in the `<ldap>` sub-section in the `<user_directories>`\n+is empty.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Server.Missing\n+version: 1.0\n+\n+[ClickHouse] SHALL return an error if the `server` parameter in the `<ldap>` sub-section in the `<user_directories>`\n+is missing.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Server.MoreThanOne\n+version: 1.0\n+\n+[ClickHouse] SHALL only use the first definitition of the `server` parameter in the `<ldap>` sub-section in the `<user_directories>`\n+if more than one `server` parameter is defined in the configuration.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Server.Invalid\n+version: 1.0\n+\n+[ClickHouse] SHALL return an error if the server specified as the value of the `<server>`\n+parameter is not defined.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Roles\n+version: 1.0\n+\n+[ClickHouse] SHALL support `roles` parameter in the `<ldap>` sub-section in the `<user_directories>`\n+section of the `config.xml` that SHALL specify the names of a locally defined roles that SHALL\n+be assigned to all users retrieved from the [LDAP] server.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Roles.MoreThanOne\n+version: 1.0\n+\n+[ClickHouse] SHALL only use the first definitition of the `roles` parameter\n+in the `<ldap>` sub-section in the `<user_directories>`\n+if more than one `roles` parameter is defined in the configuration.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Roles.Invalid\n+version: 1.0\n+\n+[ClickHouse] SHALL return an error if the role specified in the `<roles>`\n+parameter does not exist locally.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Roles.Empty\n+version: 1.0\n+\n+[ClickHouse] SHALL not allow users authenticated using LDAP external user directory\n+to perform any action if the `roles` parameter in the `<ldap>` sub-section in the `<user_directories>`\n+section is empty.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Roles.Missing\n+version: 1.0\n+\n+[ClickHouse] SHALL not allow users authenticated using LDAP external user directory\n+to perform any action if the `roles` parameter in the `<ldap>` sub-section in the `<user_directories>`\n+section is missing.\n+\n+#### Authentication\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Username.Empty\n+version: 1.0\n+\n+[ClickHouse] SHALL not support authenticating users with empty username\n+when using [LDAP] external user directory.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Username.Long\n+version: 1.0\n+\n+[ClickHouse] SHALL support authenticating users with a long username of at least 256 bytes\n+when using [LDAP] external user directory.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Username.UTF8\n+version: 1.0\n+\n+[ClickHouse] SHALL support authentication users with a username that contains [UTF-8] characters\n+when using [LDAP] external user directory.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Password.Empty\n+version: 1.0\n+\n+[ClickHouse] SHALL not support authenticating users with empty passwords\n+even if an empty password is valid for the user and\n+is allowed by the [LDAP] server when using [LDAP] external user directory.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Password.Long\n+version: 1.0\n+\n+[ClickHouse] SHALL support long password of at least 256 bytes\n+that can be used to authenticate users when using [LDAP] external user directory.\n+\n+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Password.UTF8\n+version: 1.0\n+\n+[ClickHouse] SHALL support [UTF-8] characters in passwords\n+used to authenticate users when using [LDAP] external user directory.\n+\n+## References\n+\n+* **Access Control and Account Management**: https://clickhouse.tech/docs/en/operations/access-rights/\n+* **LDAP**: https://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol\n+* **ClickHouse:** https://clickhouse.tech\n+\n+[SRS]: #srs\n+[Access Control and Account Management]: https://clickhouse.tech/docs/en/operations/access-rights/\n+[SRS-007 ClickHouse Authentication of Users via LDAP]: https://github.com/ClickHouse/ClickHouse/blob/master/tests/testflows/ldap/authentication/requirements/requirements.md\n+[LDAP]: https://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol\n+[ClickHouse]: https://clickhouse.tech\n+[GitHub Repository]: https://github.com/ClickHouse/ClickHouse/blob/master/tests/testflows/ldap/external_user_directory/requirements/requirements.md\n+[Revision History]: https://github.com/ClickHouse/ClickHouse/commits/master/tests/testflows/ldap/external_user_directory/requirements/requirements.md\n+[Git]: https://git-scm.com/\n+[GitHub]: https://github.com\ndiff --git a/tests/testflows/ldap/external_user_directory/requirements/requirements.py b/tests/testflows/ldap/external_user_directory/requirements/requirements.py\nnew file mode 100644\nindex 000000000000..4c4b17d01dc4\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/requirements/requirements.py\n@@ -0,0 +1,1260 @@\n+# These requirements were auto generated\n+# from software requirements specification (SRS)\n+# document by TestFlows v1.6.201009.1190249.\n+# Do not edit by hand but re-generate instead\n+# using 'tfs requirements generate' command.\n+from testflows.core import Requirement\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support authenticating users that are defined only on the [LDAP] server.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_MultipleUserDirectories = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.MultipleUserDirectories',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support authenticating users using multiple [LDAP] external user directories.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_MultipleUserDirectories_Lookup = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.MultipleUserDirectories.Lookup',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL attempt to authenticate external [LDAP] user\\n'\n+        'using [LDAP] external user directory in the same order\\n'\n+        'in which user directories are specified in the `config.xml` file.\\n'\n+        'If a user cannot be authenticated using the first [LDAP] external user directory\\n'\n+        'then the next user directory in the list SHALL be used.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Users_Authentication_NewUsers = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Users.Authentication.NewUsers',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support authenticating users that are defined only on the [LDAP] server\\n'\n+        'as soon as they are added to the [LDAP] server.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_DeletedUsers = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.DeletedUsers',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL not allow authentication of users that\\n'\n+        'were previously defined only on the [LDAP] server but were removed\\n'\n+        'from the [LDAP] server.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Valid = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Valid',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL only allow user authentication using [LDAP] server if and only if\\n'\n+        'user name and password match [LDAP] server records for the user\\n'\n+        'when using [LDAP] external user directory.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Invalid = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Invalid',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL return an error and prohibit authentication if either user name or password\\n'\n+        'do not match [LDAP] server records for the user\\n'\n+        'when using [LDAP] external user directory.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_UsernameChanged = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.UsernameChanged',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL return an error and prohibit authentication if the username is changed\\n'\n+        'on the [LDAP] server when using [LDAP] external user directory.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_PasswordChanged = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.PasswordChanged',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL return an error and prohibit authentication if the password\\n'\n+        'for the user is changed on the [LDAP] server when using [LDAP] external user directory.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_LDAPServerRestart = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.LDAPServerRestart',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support authenticating users after [LDAP] server is restarted\\n'\n+        'when using [LDAP] external user directory.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_ClickHouseServerRestart = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.ClickHouseServerRestart',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support authenticating users after server is restarted\\n'\n+        'when using [LDAP] external user directory.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Parallel = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support parallel authentication of users using [LDAP] server\\n'\n+        'when using [LDAP] external user directory.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Parallel_ValidAndInvalid = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel.ValidAndInvalid',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support authentication of valid users and\\n'\n+        'prohibit authentication of invalid users using [LDAP] server\\n'\n+        'in parallel without having invalid attempts affecting valid authentications\\n'\n+        'when using [LDAP] external user directory.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Parallel_MultipleServers = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel.MultipleServers',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support parallel authentication of external [LDAP] users\\n'\n+        'authenticated using multiple [LDAP] external user directories.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Parallel_LocalOnly = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel.LocalOnly',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support parallel authentication of users defined only locally\\n'\n+        'when one or more [LDAP] external user directories are specified in the configuration file.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Parallel_LocalAndMultipleLDAP = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel.LocalAndMultipleLDAP',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support parallel authentication of local and external [LDAP] users\\n'\n+        'authenticated using multiple [LDAP] external user directories.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Parallel_SameUser = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel.SameUser',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support parallel authentication of the same external [LDAP] user\\n'\n+        'authenticated using the same [LDAP] external user directory.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Parallel_DynamicallyAddedAndRemovedUsers = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel.DynamicallyAddedAndRemovedUsers',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support parallel authentication of users using\\n'\n+        '[LDAP] external user directory when [LDAP] users are dynamically added and\\n'\n+        'removed.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Connection_Protocol_PlainText = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Protocol.PlainText',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support user authentication using plain text `ldap://` non secure protocol\\n'\n+        'while connecting to the [LDAP] server when using [LDAP] external user directory.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Connection_Protocol_TLS = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Protocol.TLS',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support user authentication using `SSL/TLS` `ldaps://` secure protocol\\n'\n+        'while connecting to the [LDAP] server when using [LDAP] external user directory.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Connection_Protocol_StartTLS = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Protocol.StartTLS',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support user authentication using legacy `StartTLS` protocol which is a\\n'\n+        'plain text `ldap://` protocol that is upgraded to [TLS] when connecting to the [LDAP] server\\n'\n+        'when using [LDAP] external user directory.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Connection_Protocol_TLS_Certificate_Validation = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Protocol.TLS.Certificate.Validation',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support certificate validation used for [TLS] connections\\n'\n+        'to the [LDAP] server when using [LDAP] external user directory.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Connection_Protocol_TLS_Certificate_SelfSigned = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Protocol.TLS.Certificate.SelfSigned',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support self-signed certificates for [TLS] connections\\n'\n+        'to the [LDAP] server when using [LDAP] external user directory.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Connection_Protocol_TLS_Certificate_SpecificCertificationAuthority = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Protocol.TLS.Certificate.SpecificCertificationAuthority',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support certificates signed by specific Certification Authority for [TLS] connections\\n'\n+        'to the [LDAP] server when using [LDAP] external user directory.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Connection_Authentication_Mechanism_Anonymous = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Authentication.Mechanism.Anonymous',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL return an error and prohibit authentication using [Anonymous Authentication Mechanism of Simple Bind]\\n'\n+        'authentication mechanism when connecting to the [LDAP] server when using [LDAP] external server directory.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Connection_Authentication_Mechanism_Unauthenticated = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Authentication.Mechanism.Unauthenticated',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL return an error and prohibit authentication using [Unauthenticated Authentication Mechanism of Simple Bind]\\n'\n+        'authentication mechanism when connecting to the [LDAP] server when using [LDAP] external server directory.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Connection_Authentication_Mechanism_NamePassword = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Authentication.Mechanism.NamePassword',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL allow authentication using only [Name/Password Authentication Mechanism of Simple Bind]\\n'\n+        'authentication mechanism when connecting to the [LDAP] server when using [LDAP] external server directory.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Connection_Authentication_UnreachableServer = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Authentication.UnreachableServer',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL return an error and prohibit user login if [LDAP] server is unreachable\\n'\n+        'when using [LDAP] external user directory.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Users_Lookup_Priority = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Users.Lookup.Priority',\n+        version='2.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL lookup user presence in the same order\\n'\n+        'as user directories are defined in the `config.xml`.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Restart_Server = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Restart.Server',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support restarting server when one or more LDAP external directories\\n'\n+        'are configured.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Restart_Server_ParallelLogins = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Restart.Server.ParallelLogins',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support restarting server when one or more LDAP external directories\\n'\n+        'are configured during parallel [LDAP] user logins.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Role_Removed = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Role.Removed',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL reject authentication attempt if any of the roles that are specified in the configuration\\n'\n+        'of the external user directory are not defined at the time of the authentication attempt\\n'\n+        'with an exception that if a user was able to authenticate in past and its internal user object was created and cached\\n'\n+        'then the user SHALL be able to authenticate again, even if one of the roles is missing.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Role_Removed_Privileges = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Role.Removed.Privileges',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL remove the privileges provided by the role from all the LDAP\\n'\n+        'users authenticated using external user directory if it is removed\\n'\n+        'including currently cached users that are still able to authenticated where the removed\\n'\n+        'role is specified in the configuration of the external user directory.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Role_Readded_Privileges = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Role.Readded.Privileges',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL reassign the role and add the privileges provided by the role\\n'\n+        'when it is re-added after removal for all LDAP users authenticated using external user directory\\n'\n+        'including any cached users where the re-added role was specified in the configuration of the external user directory.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Role_New = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Role.New',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL not allow any new roles to be assigned to any LDAP\\n'\n+        'users authenticated using external user directory unless the role is specified\\n'\n+        'in the configuration of the external user directory.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Role_NewPrivilege = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Role.NewPrivilege',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL add new privilege to all the LDAP users authenticated using external user directory\\n'\n+        'including cached users when new privilege is added to one of the roles specified\\n'\n+        'in the configuration of the external user directory.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Role_RemovedPrivilege = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Role.RemovedPrivilege',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL remove privilege from all the LDAP users authenticated using external user directory\\n'\n+        'including cached users when privilege is removed from all the roles specified\\n'\n+        'in the configuration of the external user directory.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Invalid = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Invalid',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL return an error and prohibit user login if [LDAP] server configuration is not valid.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Definition = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Definition',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support using the [LDAP] servers defined in the\\n'\n+        '`ldap_servers` section of the `config.xml` as the server to be used\\n'\n+        'for a external user directory that uses an [LDAP] server as a source of user definitions.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Name = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Name',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL not support empty string as a server name.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Host = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Host',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support `<host>` parameter to specify [LDAP]\\n'\n+        'server hostname or IP, this parameter SHALL be mandatory and SHALL not be empty.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Port = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Port',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support `<port>` parameter to specify [LDAP] server port.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Port_Default = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Port.Default',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL use default port number `636` if `enable_tls` is set to `yes` or `389` otherwise.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_AuthDN_Prefix = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.AuthDN.Prefix',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support `<auth_dn_prefix>` parameter to specify the prefix\\n'\n+        'of value used to construct the DN to bound to during authentication via [LDAP] server.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_AuthDN_Suffix = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.AuthDN.Suffix',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support `<auth_dn_suffix>` parameter to specify the suffix\\n'\n+        'of value used to construct the DN to bound to during authentication via [LDAP] server.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_AuthDN_Value = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.AuthDN.Value',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL construct DN as  `auth_dn_prefix + escape(user_name) + auth_dn_suffix` string.\\n'\n+        '\\n'\n+        \"> This implies that auth_dn_suffix should usually have comma ',' as its first non-space character.\\n\"\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_EnableTLS = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.EnableTLS',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support `<enable_tls>` parameter to trigger the use of secure connection to the [LDAP] server.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_EnableTLS_Options_Default = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.EnableTLS.Options.Default',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL use `yes` value as the default for `<enable_tls>` parameter\\n'\n+        'to enable SSL/TLS `ldaps://` protocol.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_EnableTLS_Options_No = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.EnableTLS.Options.No',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support specifying `no` as the value of `<enable_tls>` parameter to enable\\n'\n+        'plain text `ldap://` protocol.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_EnableTLS_Options_Yes = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.EnableTLS.Options.Yes',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support specifying `yes` as the value of `<enable_tls>` parameter to enable\\n'\n+        'SSL/TLS `ldaps://` protocol.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_EnableTLS_Options_StartTLS = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.EnableTLS.Options.StartTLS',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support specifying `starttls` as the value of `<enable_tls>` parameter to enable\\n'\n+        'legacy `StartTLS` protocol that used plain text `ldap://` protocol, upgraded to [TLS].\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSMinimumProtocolVersion = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSMinimumProtocolVersion',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support `<tls_minimum_protocol_version>` parameter to specify\\n'\n+        'the minimum protocol version of SSL/TLS.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSMinimumProtocolVersion_Values = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSMinimumProtocolVersion.Values',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support specifying `ssl2`, `ssl3`, `tls1.0`, `tls1.1`, and `tls1.2`\\n'\n+        'as a value of the `<tls_minimum_protocol_version>` parameter.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSMinimumProtocolVersion_Default = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSMinimumProtocolVersion.Default',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL set `tls1.2` as the default value of the `<tls_minimum_protocol_version>` parameter.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSRequireCert = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSRequireCert',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support `<tls_require_cert>` parameter to specify [TLS] peer\\n'\n+        'certificate verification behavior.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSRequireCert_Options_Default = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSRequireCert.Options.Default',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL use `demand` value as the default for the `<tls_require_cert>` parameter.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSRequireCert_Options_Demand = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSRequireCert.Options.Demand',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support specifying `demand` as the value of `<tls_require_cert>` parameter to\\n'\n+        'enable requesting of client certificate.  If no certificate  is  provided,  or  a  bad   certificate   is\\n'\n+        'provided, the session SHALL be immediately terminated.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSRequireCert_Options_Allow = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSRequireCert.Options.Allow',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support specifying `allow` as the value of `<tls_require_cert>` parameter to\\n'\n+        'enable requesting of client certificate. If no\\n'\n+        'certificate is provided, the session SHALL proceed normally.\\n'\n+        'If a bad certificate is provided, it SHALL be ignored and the session SHALL proceed normally.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSRequireCert_Options_Try = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSRequireCert.Options.Try',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support specifying `try` as the value of `<tls_require_cert>` parameter to\\n'\n+        'enable requesting of client certificate. If no certificate is provided, the session\\n'\n+        'SHALL proceed  normally.  If a bad certificate is provided, the session SHALL be\\n'\n+        'immediately terminated.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSRequireCert_Options_Never = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSRequireCert.Options.Never',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support specifying `never` as the value of `<tls_require_cert>` parameter to\\n'\n+        'disable requesting of client certificate.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSCertFile = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSCertFile',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support `<tls_cert_file>` to specify the path to certificate file used by\\n'\n+        '[ClickHouse] to establish connection with the [LDAP] server.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSKeyFile = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSKeyFile',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support `<tls_key_file>` to specify the path to key file for the certificate\\n'\n+        'specified by the `<tls_cert_file>` parameter.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSCACertDir = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSCACertDir',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support `<tls_ca_cert_dir>` parameter to specify to a path to\\n'\n+        'the directory containing [CA] certificates used to verify certificates provided by the [LDAP] server.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSCACertFile = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSCACertFile',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support `<tls_ca_cert_file>` parameter to specify a path to a specific\\n'\n+        '[CA] certificate file used to verify certificates provided by the [LDAP] server.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSCipherSuite = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSCipherSuite',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support `tls_cipher_suite` parameter to specify allowed cipher suites.\\n'\n+        'The value SHALL use the same format as the `ciphersuites` in the [OpenSSL Ciphers].\\n'\n+        '\\n'\n+        'For example,\\n'\n+        '\\n'\n+        '```xml\\n'\n+        '<tls_cipher_suite>ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:AES256-GCM-SHA384</tls_cipher_suite>\\n'\n+        '```\\n'\n+        '\\n'\n+        'The available suites SHALL depend on the [OpenSSL] library version and variant used to build\\n'\n+        '[ClickHouse] and therefore might change.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Syntax = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Syntax',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support the following example syntax to create an entry for an [LDAP] server inside the `config.xml`\\n'\n+        'configuration file or of any configuration file inside the `config.d` directory.\\n'\n+        '\\n'\n+        '```xml\\n'\n+        '<yandex>\\n'\n+        '    <my_ldap_server>\\n'\n+        '        <host>localhost</host>\\n'\n+        '        <port>636</port>\\n'\n+        '        <auth_dn_prefix>cn=</auth_dn_prefix>\\n'\n+        '        <auth_dn_suffix>, ou=users, dc=example, dc=com</auth_dn_suffix>\\n'\n+        '        <enable_tls>yes</enable_tls>\\n'\n+        '        <tls_minimum_protocol_version>tls1.2</tls_minimum_protocol_version>\\n'\n+        '        <tls_require_cert>demand</tls_require_cert>\\n'\n+        '        <tls_cert_file>/path/to/tls_cert_file</tls_cert_file>\\n'\n+        '        <tls_key_file>/path/to/tls_key_file</tls_key_file>\\n'\n+        '        <tls_ca_cert_file>/path/to/tls_ca_cert_file</tls_ca_cert_file>\\n'\n+        '        <tls_ca_cert_dir>/path/to/tls_ca_cert_dir</tls_ca_cert_dir>\\n'\n+        '        <tls_cipher_suite>ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:AES256-GCM-SHA384</tls_cipher_suite>\\n'\n+        '    </my_ldap_server>\\n'\n+        '</yandex>\\n'\n+        '```\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_LDAPUserDirectory = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.LDAPUserDirectory',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support `<ldap>` sub-section in the `<user_directories>` section of the `config.xml`\\n'\n+        'that SHALL define a external user directory that uses an [LDAP] server as a source of user definitions.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_LDAPUserDirectory_MoreThanOne = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.LDAPUserDirectory.MoreThanOne',\n+        version='2.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support more than one `<ldap>` sub-sections in the `<user_directories>` section of the `config.xml`\\n'\n+        'that SHALL allow to define more than one external user directory that use an [LDAP] server as a source\\n'\n+        'of user definitions.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Syntax = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Syntax',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support `<ldap>` section with the following syntax\\n'\n+        '\\n'\n+        '```xml\\n'\n+        '<yandex>\\n'\n+        '    <user_directories>\\n'\n+        '        <ldap>\\n'\n+        '            <server>my_ldap_server</server>\\n'\n+        '            <roles>\\n'\n+        '                <my_local_role1 />\\n'\n+        '                <my_local_role2 />\\n'\n+        '            </roles>\\n'\n+        '        </ldap>\\n'\n+        '    </user_directories>\\n'\n+        '</yandex>\\n'\n+        '```\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Server = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Server',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support `server` parameter in the `<ldap>` sub-section in the `<user_directories>`\\n'\n+        'section of the `config.xml` that SHALL specify one of LDAP server names\\n'\n+        'defined in `<ldap_servers>` section.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Server_Empty = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Server.Empty',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL return an error if the `server` parameter in the `<ldap>` sub-section in the `<user_directories>`\\n'\n+        'is empty.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Server_Missing = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Server.Missing',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL return an error if the `server` parameter in the `<ldap>` sub-section in the `<user_directories>`\\n'\n+        'is missing.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Server_MoreThanOne = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Server.MoreThanOne',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL only use the first definitition of the `server` parameter in the `<ldap>` sub-section in the `<user_directories>`\\n'\n+        'if more than one `server` parameter is defined in the configuration.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Server_Invalid = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Server.Invalid',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL return an error if the server specified as the value of the `<server>`\\n'\n+        'parameter is not defined.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Roles = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Roles',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support `roles` parameter in the `<ldap>` sub-section in the `<user_directories>`\\n'\n+        'section of the `config.xml` that SHALL specify the names of a locally defined roles that SHALL\\n'\n+        'be assigned to all users retrieved from the [LDAP] server.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Roles_MoreThanOne = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Roles.MoreThanOne',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL only use the first definitition of the `roles` parameter\\n'\n+        'in the `<ldap>` sub-section in the `<user_directories>`\\n'\n+        'if more than one `roles` parameter is defined in the configuration.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Roles_Invalid = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Roles.Invalid',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL return an error if the role specified in the `<roles>`\\n'\n+        'parameter does not exist locally.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Roles_Empty = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Roles.Empty',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL not allow users authenticated using LDAP external user directory\\n'\n+        'to perform any action if the `roles` parameter in the `<ldap>` sub-section in the `<user_directories>`\\n'\n+        'section is empty.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Roles_Missing = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Roles.Missing',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL not allow users authenticated using LDAP external user directory\\n'\n+        'to perform any action if the `roles` parameter in the `<ldap>` sub-section in the `<user_directories>`\\n'\n+        'section is missing.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Username_Empty = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Username.Empty',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL not support authenticating users with empty username\\n'\n+        'when using [LDAP] external user directory.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Username_Long = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Username.Long',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support authenticating users with a long username of at least 256 bytes\\n'\n+        'when using [LDAP] external user directory.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Username_UTF8 = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Username.UTF8',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support authentication users with a username that contains [UTF-8] characters\\n'\n+        'when using [LDAP] external user directory.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Password_Empty = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Password.Empty',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL not support authenticating users with empty passwords\\n'\n+        'even if an empty password is valid for the user and\\n'\n+        'is allowed by the [LDAP] server when using [LDAP] external user directory.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Password_Long = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Password.Long',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support long password of at least 256 bytes\\n'\n+        'that can be used to authenticate users when using [LDAP] external user directory.\\n'\n+        '\\n'\n+        ),\n+        link=None)\n+\n+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Password_UTF8 = Requirement(\n+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Password.UTF8',\n+        version='1.0',\n+        priority=None,\n+        group=None,\n+        type=None,\n+        uid=None,\n+        description=(\n+        '[ClickHouse] SHALL support [UTF-8] characters in passwords\\n'\n+        'used to authenticate users when using [LDAP] external user directory.\\n'\n+        '\\n'\n+        ),\n+        link=None)\ndiff --git a/tests/testflows/ldap/external_user_directory/tests/authentications.py b/tests/testflows/ldap/external_user_directory/tests/authentications.py\nnew file mode 100644\nindex 000000000000..bf5a788c4d5c\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/tests/authentications.py\n@@ -0,0 +1,734 @@\n+# -*- coding: utf-8 -*-\n+import random\n+\n+from multiprocessing.dummy import Pool\n+from testflows.core import *\n+from testflows.asserts import error\n+\n+from ldap.external_user_directory.tests.common import *\n+from ldap.external_user_directory.requirements import *\n+\n+servers = {\n+    \"openldap1\": {\n+        \"host\": \"openldap1\",\n+        \"port\": \"389\",\n+        \"enable_tls\": \"no\",\n+        \"auth_dn_prefix\": \"cn=\",\n+        \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\"\n+    },\n+    \"openldap2\": {\n+        \"host\": \"openldap2\",\n+        \"port\": \"636\",\n+        \"enable_tls\": \"yes\",\n+        \"auth_dn_prefix\": \"cn=\",\n+        \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\",\n+        \"tls_require_cert\": \"never\",\n+    }\n+}\n+\n+@TestOutline\n+def add_user_to_ldap_and_login(self, server, user=None, ch_user=None, login=None, exitcode=None, message=None):\n+    \"\"\"Add user to LDAP and ClickHouse and then try to login.\"\"\"\n+    self.context.ldap_node = self.context.cluster.node(server)\n+\n+    if ch_user is None:\n+        ch_user = {}\n+    if login is None:\n+        login = {}\n+    if user is None:\n+        user = {\"cn\": \"myuser\", \"userpassword\": \"myuser\"}\n+\n+    with ldap_user(**user) as user:\n+        username = login.get(\"username\", user[\"cn\"])\n+        password = login.get(\"password\", user[\"userpassword\"])\n+\n+        login_and_execute_query(username=username, password=password, exitcode=exitcode, message=message)\n+\n+def login_with_valid_username_and_password(users, i, iterations=10):\n+    \"\"\"Login with valid username and password.\n+    \"\"\"\n+    with When(f\"valid users try to login #{i}\"):\n+        for i in range(iterations):\n+            random_user = users[random.randint(0, len(users)-1)]\n+            login_and_execute_query(username=random_user[\"cn\"], password=random_user[\"userpassword\"], steps=False)\n+\n+def login_with_valid_username_and_invalid_password(users, i, iterations=10):\n+    \"\"\"Login with valid username and invalid password.\n+    \"\"\"\n+    with When(f\"users try to login with valid username and invalid password #{i}\"):\n+        for i in range(iterations):\n+            random_user = users[random.randint(0, len(users)-1)]\n+            login_and_execute_query(username=random_user[\"cn\"],\n+                password=(random_user[\"userpassword\"] + randomword(1)),\n+                exitcode=4,\n+                message=f\"DB::Exception: {random_user['cn']}: Authentication failed: password is incorrect or there is no user with such name\",\n+                steps=False)\n+\n+def login_with_invalid_username_and_valid_password(users, i, iterations=10):\n+    \"\"\"Login with invalid username and valid password.\n+    \"\"\"\n+    with When(f\"users try to login with invalid username and valid password #{i}\"):\n+        for i in range(iterations):\n+            random_user = dict(users[random.randint(0, len(users)-1)])\n+            random_user[\"cn\"] += randomword(1)\n+            login_and_execute_query(username=random_user[\"cn\"],\n+                password=random_user[\"userpassword\"],\n+                exitcode=4,\n+                message=f\"DB::Exception: {random_user['cn']}: Authentication failed: password is incorrect or there is no user with such name\",\n+                steps=False)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Parallel(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Parallel_ValidAndInvalid(\"1.0\")\n+)\n+def parallel_login(self, server, user_count=10, timeout=200):\n+    \"\"\"Check that login of valid and invalid LDAP authenticated users works in parallel.\n+    \"\"\"\n+    self.context.ldap_node = self.context.cluster.node(server)\n+    user = None\n+\n+    with Given(\"a group of LDAP users\"):\n+        users = [{\"cn\": f\"parallel_user{i}\", \"userpassword\": randomword(20)} for i in range(user_count)]\n+\n+    with ldap_users(*users):\n+        tasks = []\n+        try:\n+            with When(\"users try to login in parallel\", description=\"\"\"\n+                * with valid username and password\n+                * with invalid username and valid password\n+                * with valid username and invalid password\n+                \"\"\"):\n+                p = Pool(15)\n+                for i in range(25):\n+                    tasks.append(p.apply_async(login_with_valid_username_and_password, (users, i, 50,)))\n+                    tasks.append(p.apply_async(login_with_valid_username_and_invalid_password, (users, i, 50,)))\n+                    tasks.append(p.apply_async(login_with_invalid_username_and_valid_password, (users, i, 50,)))\n+\n+        finally:\n+            with Then(\"it should work\"):\n+                join(tasks, timeout)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Parallel_SameUser(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Parallel_ValidAndInvalid(\"1.0\")\n+)\n+def parallel_login_with_the_same_user(self, server, timeout=200):\n+    \"\"\"Check that valid and invalid logins of the same\n+    LDAP authenticated user works in parallel.\n+    \"\"\"\n+    self.context.ldap_node = self.context.cluster.node(server)\n+    user = None\n+\n+    with Given(\"only one LDAP user\"):\n+        users = [{\"cn\": f\"parallel_user1\", \"userpassword\": randomword(20)}]\n+\n+    with ldap_users(*users):\n+        tasks = []\n+        try:\n+            with When(\"the same user tries to login in parallel\", description=\"\"\"\n+                * with valid username and password\n+                * with invalid username and valid password\n+                * with valid username and invalid password\n+                \"\"\"):\n+                p = Pool(15)\n+                for i in range(25):\n+                    tasks.append(p.apply_async(login_with_valid_username_and_password, (users, i, 50,)))\n+                    tasks.append(p.apply_async(login_with_valid_username_and_invalid_password, (users, i, 50,)))\n+                    tasks.append(p.apply_async(login_with_invalid_username_and_valid_password, (users, i, 50,)))\n+\n+        finally:\n+            with Then(\"it should work\"):\n+                join(tasks, timeout)\n+\n+@TestScenario\n+def login_after_ldap_external_user_directory_is_removed(self, server):\n+    \"\"\"Check that ClickHouse stops authenticating LDAP users\n+    after LDAP external user directory is removed.\n+    \"\"\"\n+    with When(\"I attempt to login after LDAP external user directory is added\"):\n+        with ldap_external_user_directory(server=\"openldap2\", roles=[], restart=True):\n+            login_and_execute_query(username=\"user2\", password=\"user2\")\n+\n+    with When(\"I attempt to login after LDAP external user directory is removed\"):\n+        exitcode = 4\n+        message = f\"DB::Exception: user2: Authentication failed: password is incorrect or there is no user with such name\"\n+        login_and_execute_query(username=\"user2\", password=\"user2\", exitcode=exitcode, message=message)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Parallel_SameUser(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Parallel_ValidAndInvalid(\"1.0\")\n+)\n+def parallel_login_with_the_same_user_multiple_servers(self, server, timeout=200):\n+    \"\"\"Check that valid and invalid logins of the same\n+    user defined in multiple LDAP external user directories\n+    works in parallel.\n+    \"\"\"\n+    with Given(\"I have two LDAP servers\"):\n+        entries = [\n+            ([\"openldap1\"], []),\n+            ([\"openldap2\"], [])\n+        ]\n+\n+    with Given(\"I define only one LDAP user\"):\n+        users = [{\"cn\": f\"parallel_user1\", \"userpassword\": randomword(20)}]\n+\n+    with And(\"I create config file to define LDAP external user directory for each LDAP server\"):\n+        config = create_entries_ldap_external_user_directory_config_content(entries)\n+\n+    with ldap_external_user_directory(server=None, roles=None, restart=True, config=config):\n+        with ldap_users(*users, node=self.context.cluster.node(\"openldap1\")):\n+            with ldap_users(*users, node=self.context.cluster.node(\"openldap2\")):\n+                tasks = []\n+                try:\n+                    with When(\"the same user tries to login in parallel\", description=\"\"\"\n+                        * with valid username and password\n+                        * with invalid username and valid password\n+                        * with valid username and invalid password\n+                        \"\"\"):\n+                        p = Pool(15)\n+                        for i in range(25):\n+                            tasks.append(p.apply_async(login_with_valid_username_and_password, (users, i, 50,)))\n+                            tasks.append(p.apply_async(login_with_valid_username_and_invalid_password, (users, i, 50,)))\n+                            tasks.append(p.apply_async(login_with_invalid_username_and_valid_password, (users, i, 50,)))\n+\n+                finally:\n+                    with Then(\"it should work\"):\n+                        join(tasks, timeout)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Parallel_MultipleServers(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Parallel_ValidAndInvalid(\"1.0\")\n+)\n+def parallel_login_with_multiple_servers(self, server, user_count=10, timeout=200):\n+    \"\"\"Check that login of valid and invalid LDAP authenticated users works in parallel\n+    using multiple LDAP external user directories.\n+    \"\"\"\n+    with Given(\"I have two LDAP servers\"):\n+        entries = [\n+            ([\"openldap1\"], []),\n+            ([\"openldap2\"], [])\n+        ]\n+\n+    with And(\"I define a group of users to be created on each LDAP server\"):\n+        user_groups = {\n+            \"openldap1_users\": [{\"cn\": f\"openldap1_parallel_user{i}\", \"userpassword\": randomword(20)} for i in range(user_count)],\n+            \"openldap2_users\": [{\"cn\": f\"openldap2_parallel_user{i}\", \"userpassword\": randomword(20)} for i in range(user_count)]\n+        }\n+\n+    with And(\"I have a list of checks that I want to run for each user group\"):\n+        checks = [\n+            login_with_valid_username_and_password,\n+            login_with_valid_username_and_invalid_password,\n+            login_with_invalid_username_and_valid_password\n+        ]\n+\n+    with And(\"I create config file to define LDAP external user directory for each LDAP server\"):\n+        config = create_entries_ldap_external_user_directory_config_content(entries)\n+\n+    with ldap_external_user_directory(server=None, roles=None, restart=True, config=config):\n+        with ldap_users(*user_groups[\"openldap1_users\"], node=self.context.cluster.node(\"openldap1\")):\n+            with ldap_users(*user_groups[\"openldap2_users\"], node=self.context.cluster.node(\"openldap2\")):\n+                tasks = []\n+\n+                try:\n+                    with When(\"users in each group try to login in parallel\", description=\"\"\"\n+                        * with valid username and password\n+                        * with invalid username and valid password\n+                        * with valid username and invalid password\n+                        \"\"\"):\n+                        p = Pool(15)\n+                        for i in range(25):\n+                            for users in user_groups.values():\n+                                for check in checks:\n+                                    tasks.append(p.apply_async(check, (users, i, 50,)))\n+\n+                finally:\n+                    with Then(\"it should work\"):\n+                        join(tasks, timeout)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Parallel_LocalAndMultipleLDAP(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Parallel_ValidAndInvalid(\"1.0\")\n+)\n+def parallel_login_with_rbac_and_multiple_servers(self, server, user_count=10, timeout=200):\n+    \"\"\"Check that login of valid and invalid users works in parallel\n+    using local users defined using RBAC and LDAP users authenticated using\n+    multiple LDAP external user directories.\n+    \"\"\"\n+    with Given(\"I have two LDAP servers\"):\n+        entries = [\n+            ([\"openldap1\"], []),\n+            ([\"openldap2\"], [])\n+        ]\n+\n+    with And(\"I define a group of users to be created on each LDAP server\"):\n+        user_groups = {\n+            \"openldap1_users\": [{\"cn\": f\"openldap1_parallel_user{i}\", \"userpassword\": randomword(20)} for i in range(user_count)],\n+            \"openldap2_users\": [{\"cn\": f\"openldap2_parallel_user{i}\", \"userpassword\": randomword(20)} for i in range(user_count)],\n+            \"local_users\": [{\"cn\": f\"local_parallel_user{i}\", \"userpassword\": randomword(20)} for i in range(user_count)]\n+        }\n+\n+    with And(\"I have a list of checks that I want to run for each user group\"):\n+        checks = [\n+            login_with_valid_username_and_password,\n+            login_with_valid_username_and_invalid_password,\n+            login_with_invalid_username_and_valid_password\n+        ]\n+\n+    with And(\"I create config file to define LDAP external user directory for each LDAP server\"):\n+        config = create_entries_ldap_external_user_directory_config_content(entries)\n+\n+    with ldap_external_user_directory(server=None, roles=None, restart=True, config=config):\n+        with ldap_users(*user_groups[\"openldap1_users\"], node=self.context.cluster.node(\"openldap1\")):\n+            with ldap_users(*user_groups[\"openldap2_users\"], node=self.context.cluster.node(\"openldap2\")):\n+                with rbac_users(*user_groups[\"local_users\"]):\n+                    tasks = []\n+\n+                    try:\n+                        with When(\"users in each group try to login in parallel\", description=\"\"\"\n+                            * with valid username and password\n+                            * with invalid username and valid password\n+                            * with valid username and invalid password\n+                            \"\"\"):\n+                            p = Pool(15)\n+                            for i in range(25):\n+                                for users in user_groups.values():\n+                                    for check in checks:\n+                                        tasks.append(p.apply_async(check, (users, i, 50,)))\n+\n+                    finally:\n+                        with Then(\"it should work\"):\n+                            join(tasks, timeout)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Parallel_LocalOnly(\"1.0\")\n+)\n+def parallel_login_with_rbac_users(self, server, user_count=10, timeout=200):\n+    \"\"\"Check that login of only valid and invalid local users created using RBAC\n+    works in parallel when server configuration includes LDAP external user directory.\n+    \"\"\"\n+    self.context.ldap_node = self.context.cluster.node(server)\n+    user = None\n+\n+    users = [{\"cn\": f\"parallel_user{i}\", \"userpassword\": randomword(20)} for i in range(user_count)]\n+\n+    with rbac_users(*users):\n+        tasks = []\n+        try:\n+            with When(\"I login in parallel\"):\n+                p = Pool(15)\n+                for i in range(25):\n+                    tasks.append(p.apply_async(login_with_valid_username_and_password, (users, i, 50,)))\n+                    tasks.append(p.apply_async(login_with_valid_username_and_invalid_password, (users, i, 50,)))\n+                    tasks.append(p.apply_async(login_with_invalid_username_and_valid_password, (users, i, 50,)))\n+        finally:\n+            with Then(\"it should work\"):\n+                join(tasks, timeout)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Users_Authentication_NewUsers(\"1.0\")\n+)\n+def login_after_user_is_added_to_ldap(self, server):\n+    \"\"\"Check that user can login as soon as it is added to LDAP.\"\"\"\n+    user = {\"cn\": \"myuser\", \"userpassword\": \"myuser\"}\n+\n+    with When(f\"I add user to LDAP and try to login\"):\n+       add_user_to_ldap_and_login(user=user, server=server)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Invalid(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_DeletedUsers(\"1.0\")\n+)\n+def login_after_user_is_deleted_from_ldap(self, server):\n+    \"\"\"Check that login fails after user is deleted from LDAP.\"\"\"\n+    self.context.ldap_node = self.context.cluster.node(server)\n+    user = None\n+\n+    try:\n+        with Given(f\"I add user to LDAP\"):\n+            user = {\"cn\": \"myuser\", \"userpassword\": \"myuser\"}\n+            user = add_user_to_ldap(**user)\n+\n+        login_and_execute_query(username=user[\"cn\"], password=user[\"userpassword\"])\n+\n+        with When(\"I delete this user from LDAP\"):\n+            delete_user_from_ldap(user)\n+\n+        with Then(\"when I try to login again it should fail\"):\n+            login_and_execute_query(username=user[\"cn\"], password=user[\"userpassword\"],\n+                exitcode=4,\n+                message=f\"DB::Exception: {user['cn']}: Authentication failed: password is incorrect or there is no user with such name\"\n+            )\n+    finally:\n+        with Finally(\"I make sure LDAP user is deleted\"):\n+            if user is not None:\n+                delete_user_from_ldap(user, exitcode=None)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Invalid(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_PasswordChanged(\"1.0\")\n+)\n+def login_after_user_password_changed_in_ldap(self, server):\n+    \"\"\"Check that login fails after user password is changed in LDAP.\"\"\"\n+    self.context.ldap_node = self.context.cluster.node(server)\n+    user = None\n+\n+    try:\n+        with Given(f\"I add user to LDAP\"):\n+            user = {\"cn\": \"myuser\", \"userpassword\": \"myuser\"}\n+            user = add_user_to_ldap(**user)\n+\n+        login_and_execute_query(username=user[\"cn\"], password=user[\"userpassword\"])\n+\n+        with When(\"I change user password in LDAP\"):\n+            change_user_password_in_ldap(user, \"newpassword\")\n+\n+        with Then(\"when I try to login again it should fail\"):\n+            login_and_execute_query(username=user[\"cn\"], password=user[\"userpassword\"],\n+                exitcode=4,\n+                message=f\"DB::Exception: {user['cn']}: Authentication failed: password is incorrect or there is no user with such name\"\n+            )\n+\n+        with And(\"when I try to login with the new password it should work\"):\n+            login_and_execute_query(username=user[\"cn\"], password=\"newpassword\")\n+\n+    finally:\n+        with Finally(\"I make sure LDAP user is deleted\"):\n+            if user is not None:\n+                delete_user_from_ldap(user, exitcode=None)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Invalid(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_UsernameChanged(\"1.0\")\n+)\n+def login_after_user_cn_changed_in_ldap(self, server):\n+    \"\"\"Check that login fails after user cn is changed in LDAP.\"\"\"\n+    self.context.ldap_node = self.context.cluster.node(server)\n+    user = None\n+    new_user = None\n+\n+    try:\n+        with Given(f\"I add user to LDAP\"):\n+            user = {\"cn\": \"myuser\", \"userpassword\": \"myuser\"}\n+            user = add_user_to_ldap(**user)\n+\n+        login_and_execute_query(username=user[\"cn\"], password=user[\"userpassword\"])\n+\n+        with When(\"I change user password in LDAP\"):\n+            new_user = change_user_cn_in_ldap(user, \"myuser2\")\n+\n+        with Then(\"when I try to login again it should fail\"):\n+            login_and_execute_query(username=user[\"cn\"], password=user[\"userpassword\"],\n+                exitcode=4,\n+                message=f\"DB::Exception: {user['cn']}: Authentication failed: password is incorrect or there is no user with such name\"\n+            )\n+    finally:\n+        with Finally(\"I make sure LDAP user is deleted\"):\n+            if new_user is not None:\n+                delete_user_from_ldap(new_user, exitcode=None)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Valid(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_LDAPServerRestart(\"1.0\")\n+)\n+def login_after_ldap_server_is_restarted(self, server, timeout=60):\n+    \"\"\"Check that login succeeds after LDAP server is restarted.\"\"\"\n+    self.context.ldap_node = self.context.cluster.node(server)\n+    user = None\n+\n+    try:\n+        with Given(f\"I add user to LDAP\"):\n+            user = {\"cn\": \"myuser\", \"userpassword\": getuid()}\n+            user = add_user_to_ldap(**user)\n+\n+        login_and_execute_query(username=user[\"cn\"], password=user[\"userpassword\"])\n+\n+        with When(\"I restart LDAP server\"):\n+            self.context.ldap_node.restart()\n+\n+        with Then(\"I try to login until it works\", description=f\"timeout {timeout} sec\"):\n+            started = time.time()\n+            while True:\n+                r = self.context.node.query(\"SELECT 1\",\n+                    settings=[(\"user\", user[\"cn\"]), (\"password\", user[\"userpassword\"])],\n+                    no_checks=True)\n+                if r.exitcode == 0:\n+                    break\n+                assert time.time() - started < timeout, error(r.output)\n+    finally:\n+        with Finally(\"I make sure LDAP user is deleted\"):\n+            if user is not None:\n+                delete_user_from_ldap(user, exitcode=None)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Valid(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_ClickHouseServerRestart(\"1.0\")\n+)\n+def login_after_clickhouse_server_is_restarted(self, server, timeout=60):\n+    \"\"\"Check that login succeeds after ClickHouse server is restarted.\"\"\"\n+    self.context.ldap_node = self.context.cluster.node(server)\n+    user = None\n+\n+    try:\n+        with Given(f\"I add user to LDAP\"):\n+            user = {\"cn\": \"myuser\", \"userpassword\": getuid()}\n+            user = add_user_to_ldap(**user)\n+\n+        login_and_execute_query(username=user[\"cn\"], password=user[\"userpassword\"])\n+\n+        with When(\"I restart ClickHouse server\"):\n+            self.context.node.restart()\n+\n+        with Then(\"I try to login until it works\", description=f\"timeout {timeout} sec\"):\n+            started = time.time()\n+            while True:\n+                r = self.context.node.query(\"SELECT 1\",\n+                    settings=[(\"user\", user[\"cn\"]), (\"password\", user[\"userpassword\"])],\n+                    no_checks=True)\n+                if r.exitcode == 0:\n+                    break\n+                assert time.time() - started < timeout, error(r.output)\n+    finally:\n+        with Finally(\"I make sure LDAP user is deleted\"):\n+            if user is not None:\n+                delete_user_from_ldap(user, exitcode=None)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Invalid(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Password_Empty(\"1.0\")\n+)\n+def valid_username_with_valid_empty_password(self, server):\n+    \"\"\"Check that we can't login using valid username that has empty password.\"\"\"\n+    user = {\"cn\": \"empty_password\", \"userpassword\": \"\"}\n+    exitcode = 4\n+    message = f\"DB::Exception: {user['cn']}: Authentication failed: password is incorrect or there is no user with such name\"\n+\n+    add_user_to_ldap_and_login(user=user, exitcode=exitcode, message=message, server=server)\n+\n+@TestScenario\n+@Requirements(\n+   RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Invalid(\"1.0\"),\n+   RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Password_Empty(\"1.0\")\n+)\n+def valid_username_and_invalid_empty_password(self, server):\n+   \"\"\"Check that we can't login using valid username but invalid empty password.\"\"\"\n+   username = \"user_non_empty_password\"\n+   user = {\"cn\": username, \"userpassword\": username}\n+   login = {\"password\": \"\"}\n+\n+   exitcode = 4\n+   message = f\"DB::Exception: {username}: Authentication failed: password is incorrect or there is no user with such name\"\n+\n+   add_user_to_ldap_and_login(user=user, login=login, exitcode=exitcode, message=message, server=server)\n+\n+@TestScenario\n+@Requirements(\n+   RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Valid(\"1.0\")\n+)\n+def valid_username_and_password(self, server):\n+   \"\"\"Check that we can login using valid username and password.\"\"\"\n+   username = \"valid_username_and_password\"\n+   user = {\"cn\": username, \"userpassword\": username}\n+\n+   with When(f\"I add user {username} to LDAP and try to login\"):\n+       add_user_to_ldap_and_login(user=user, server=server)\n+\n+@TestScenario\n+@Requirements(\n+   RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Invalid(\"1.0\")\n+)\n+def valid_username_and_password_invalid_server(self, server=None):\n+   \"\"\"Check that we can't login using valid username and valid\n+   password but for a different server.\"\"\"\n+   self.context.ldap_node = self.context.cluster.node(\"openldap1\")\n+\n+   exitcode = 4\n+   message = f\"DB::Exception: user2: Authentication failed: password is incorrect or there is no user with such name\"\n+\n+   login_and_execute_query(username=\"user2\", password=\"user2\", exitcode=exitcode, message=message)\n+\n+@TestScenario\n+@Requirements(\n+   RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Valid(\"1.0\"),\n+   RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Username_Long(\"1.0\"),\n+)\n+def valid_long_username_and_short_password(self, server):\n+   \"\"\"Check that we can login using valid very long username and short password.\"\"\"\n+   username = \"long_username_12345678901234567890123456789012345678901234567890123456789012345678901234567890\"\n+   user = {\"cn\": username, \"userpassword\": \"long_username\"}\n+\n+   add_user_to_ldap_and_login(user=user, server=server)\n+\n+@TestScenario\n+@Requirements(\n+   RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Invalid(\"1.0\")\n+)\n+def invalid_long_username_and_valid_short_password(self, server):\n+   \"\"\"Check that we can't login using slightly invalid long username but valid password.\"\"\"\n+   username = \"long_username_12345678901234567890123456789012345678901234567890123456789012345678901234567890\"\n+   user = {\"cn\": username, \"userpassword\": \"long_username\"}\n+   login = {\"username\": f\"{username}?\"}\n+\n+   exitcode = 4\n+   message=f\"DB::Exception: {login['username']}: Authentication failed: password is incorrect or there is no user with such name\"\n+\n+   add_user_to_ldap_and_login(user=user, login=login, exitcode=exitcode, message=message, server=server)\n+\n+@TestScenario\n+@Requirements(\n+   RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Valid(\"1.0\"),\n+   RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Password_Long(\"1.0\")\n+)\n+def valid_short_username_and_long_password(self, server):\n+   \"\"\"Check that we can login using valid short username with very long password.\"\"\"\n+   username = \"long_password\"\n+   user = {\"cn\": username, \"userpassword\": \"long_password_12345678901234567890123456789012345678901234567890123456789012345678901234567890\"}\n+   add_user_to_ldap_and_login(user=user, server=server)\n+\n+@TestScenario\n+@Requirements(\n+   RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Invalid(\"1.0\")\n+)\n+def valid_short_username_and_invalid_long_password(self, server):\n+   \"\"\"Check that we can't login using valid short username and invalid long password.\"\"\"\n+   username = \"long_password\"\n+   user = {\"cn\": username, \"userpassword\": \"long_password_12345678901234567890123456789012345678901234567890123456789012345678901234567890\"}\n+   login = {\"password\": user[\"userpassword\"] + \"1\"}\n+\n+   exitcode = 4\n+   message=f\"DB::Exception: {username}: Authentication failed: password is incorrect or there is no user with such name\"\n+\n+   add_user_to_ldap_and_login(user=user, login=login, exitcode=exitcode, message=message, server=server)\n+\n+@TestScenario\n+@Requirements(\n+   RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Invalid(\"1.0\")\n+)\n+def valid_username_and_invalid_password(self, server):\n+   \"\"\"Check that we can't login using valid username and invalid password.\"\"\"\n+   username = \"valid_username_and_invalid_password\"\n+   user = {\"cn\": username, \"userpassword\": username}\n+   login = {\"password\": user[\"userpassword\"] + \"1\"}\n+\n+   exitcode = 4\n+   message=f\"DB::Exception: {username}: Authentication failed: password is incorrect or there is no user with such name\"\n+\n+   add_user_to_ldap_and_login(user=user, login=login, exitcode=exitcode, message=message, server=server)\n+\n+@TestScenario\n+@Requirements(\n+   RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Invalid(\"1.0\")\n+)\n+def invalid_username_and_valid_password(self, server):\n+   \"\"\"Check that we can't login using slightly invalid username but valid password.\"\"\"\n+   username = \"invalid_username_and_valid_password\"\n+   user = {\"cn\": username, \"userpassword\": username}\n+   login = {\"username\": user[\"cn\"] + \"1\"}\n+\n+   exitcode = 4\n+   message=f\"DB::Exception: {login['username']}: Authentication failed: password is incorrect or there is no user with such name\"\n+\n+   add_user_to_ldap_and_login(user=user, login=login, exitcode=exitcode, message=message, server=server)\n+\n+@TestScenario\n+@Requirements(\n+   RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Valid(\"1.0\"),\n+   RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Username_UTF8(\"1.0\")\n+)\n+def valid_utf8_username_and_ascii_password(self, server):\n+   \"\"\"Check that we can login using valid utf-8 username with ascii password.\"\"\"\n+   username = \"utf8_username_G\u00e3\u0144d\u00e5\u0142f_Th\u00ea_Gr\u0119\u00e2t\"\n+   user = {\"cn\": username, \"userpassword\": \"utf8_username\"}\n+\n+   add_user_to_ldap_and_login(user=user, server=server)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Valid(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Password_UTF8(\"1.0\")\n+)\n+def valid_ascii_username_and_utf8_password(self, server):\n+    \"\"\"Check that we can login using valid ascii username with utf-8 password.\"\"\"\n+    username = \"utf8_password\"\n+    user = {\"cn\": username, \"userpassword\": \"utf8_password_G\u00e3\u0144d\u00e5\u0142f_Th\u00ea_Gr\u0119\u00e2t\"}\n+\n+    add_user_to_ldap_and_login(user=user, server=server)\n+\n+@TestScenario\n+def empty_username_and_empty_password(self, server=None):\n+    \"\"\"Check that we can login using empty username and empty password as\n+    it will use the default user and that has an empty password.\"\"\"\n+    login_and_execute_query(username=\"\", password=\"\")\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Users_Lookup_Priority(\"2.0\")\n+)\n+def user_lookup_priority(self, server):\n+    \"\"\"Check that users are looked up in the same priority\n+    as they are defined in the `<user_dictionaries>` section\n+    of the `config.xml`. For this test we have the following priority list\n+    as defined by the configuration files:\n+\n+    * users.xml\n+    * local directory\n+    * LDAP external user directory\n+    \"\"\"\n+    self.context.ldap_node = self.context.cluster.node(server)\n+\n+    message=\"DB::Exception: {username}: Authentication failed: password is incorrect or there is no user with such name\"\n+    exitcode = 4\n+\n+    users = {\n+        \"default\": {\"username\": \"default\", \"password\": \"userdefault\"},\n+        \"local\": {\"username\": \"local\", \"password\": \"userlocal\"},\n+        \"ldap\": {\"username\": \"ldap\", \"password\": \"userldap\"}\n+    }\n+\n+    with ldap_users(*[{\"cn\": user[\"username\"], \"userpassword\": user[\"password\"]} for user in users.values()]):\n+        with rbac_users({\"cn\": \"local\", \"userpassword\": \"local\"}):\n+            with When(\"I try to login as 'default' user which is also defined in users.xml it should fail\"):\n+                login_and_execute_query(**users[\"default\"], exitcode=exitcode, message=message.format(username=\"default\"))\n+\n+            with When(\"I try to login as 'local' user which is also defined in local storage it should fail\"):\n+                login_and_execute_query(**users[\"local\"], exitcode=exitcode, message=message.format(username=\"local\"))\n+\n+            with When(\"I try to login as 'ldap' user defined only in LDAP it should work\"):\n+                login_and_execute_query(**users[\"ldap\"])\n+\n+\n+@TestOutline(Feature)\n+@Name(\"user authentications\")\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Connection_Authentication_Mechanism_NamePassword(\"1.0\")\n+)\n+def feature(self, servers=None, server=None, node=\"clickhouse1\"):\n+    \"\"\"Check that users can be authenticated using an LDAP external user directory.\n+    \"\"\"\n+    self.context.node = self.context.cluster.node(node)\n+\n+    if servers is None:\n+        servers = globals()[\"servers\"]\n+\n+    if server is None:\n+        server = \"openldap1\"\n+\n+    with ldap_servers(servers):\n+        with rbac_roles(\"ldap_role\") as roles:\n+            with ldap_external_user_directory(server=server, roles=roles, restart=True):\n+                for scenario in loads(current_module(), Scenario):\n+                    Scenario(test=scenario, flags=TE)(server=server)\ndiff --git a/tests/testflows/ldap/external_user_directory/tests/common.py b/tests/testflows/ldap/external_user_directory/tests/common.py\nnew file mode 100644\nindex 000000000000..b4a8c9e6640b\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/tests/common.py\n@@ -0,0 +1,204 @@\n+import os\n+import time\n+from contextlib import contextmanager\n+\n+import testflows.settings as settings\n+from testflows.core import *\n+from testflows.asserts import error\n+from ldap.authentication.tests.common import getuid, Config, ldap_servers, add_config, restart\n+from ldap.authentication.tests.common import xmltree, xml_indent, xml_append, xml_with_utf8\n+from ldap.authentication.tests.common import ldap_user, ldap_users, add_user_to_ldap, delete_user_from_ldap\n+from ldap.authentication.tests.common import change_user_password_in_ldap, change_user_cn_in_ldap\n+from ldap.authentication.tests.common import randomword\n+\n+def join(tasks, timeout):\n+    \"\"\"Join async tasks by waiting for their completion.\n+    \"\"\"\n+    task_exc = None\n+\n+    for task in tasks:\n+        try:\n+            task.get(timeout=timeout)\n+        except Exception as exc:\n+            if task_exc is None:\n+                task_exc = exc\n+\n+    if task_exc is not None:\n+        raise task_exc\n+\n+@contextmanager\n+def table(name, create_statement, on_cluster=False):\n+    node = current().context.node\n+    try:\n+        with Given(f\"I have a {name} table\"):\n+            node.query(create_statement.format(name=name))\n+        yield name\n+    finally:\n+        with Finally(\"I drop the table\"):\n+            if on_cluster:\n+                node.query(f\"DROP TABLE IF EXISTS {name} ON CLUSTER {on_cluster}\")\n+            else:\n+                node.query(f\"DROP TABLE IF EXISTS {name}\")\n+\n+@contextmanager\n+def rbac_users(*users):\n+    node = current().context.node\n+    try:\n+        with Given(\"I have local users\"):\n+            for user in users:\n+                with By(f\"creating user {user['cn']}\", format_name=False):\n+                    node.query(f\"CREATE USER OR REPLACE {user['cn']} IDENTIFIED WITH PLAINTEXT_PASSWORD BY '{user['userpassword']}'\")\n+        yield users\n+    finally:\n+        with Finally(\"I drop local users\"):\n+            for user in users:\n+                with By(f\"dropping user {user['cn']}\", flags=TE, format_name=False):\n+                    node.query(f\"DROP USER IF EXISTS {user['cn']}\")\n+\n+@contextmanager\n+def rbac_roles(*roles):\n+    node = current().context.node\n+    try:\n+        with Given(\"I have roles\"):\n+            for role in roles:\n+                with By(f\"creating role {role}\"):\n+                    node.query(f\"CREATE ROLE OR REPLACE {role}\")\n+        yield roles\n+    finally:\n+        with Finally(\"I drop the roles\"):\n+            for role in roles:\n+                with By(f\"dropping role {role}\", flags=TE):\n+                    node.query(f\"DROP ROLE IF EXISTS {role}\")\n+\n+def create_ldap_external_user_directory_config_content(server=None, roles=None, **kwargs):\n+    \"\"\"Create LDAP external user directory configuration file content.\n+    \"\"\"\n+    return create_entries_ldap_external_user_directory_config_content(entries=[([server], [roles])], **kwargs)\n+\n+def create_entries_ldap_external_user_directory_config_content(entries, config_d_dir=\"/etc/clickhouse-server/config.d\",\n+        config_file=\"ldap_external_user_directories.xml\"):\n+    \"\"\"Create configurattion file content that contains\n+    one or more entries for the LDAP external user directory.\n+\n+    For example,\n+\n+    ```xml\n+        <user_directories>\n+            <ldap>\n+                <server>my_ldap_server</server>\n+                <user_template>my_user</user_template>\n+            </ldap>\n+        </user_directories>\n+    ```\n+    \"\"\"\n+    uid = getuid()\n+    path = os.path.join(config_d_dir, config_file)\n+    name = config_file\n+\n+    root = xmltree.fromstring(\"<yandex><user_directories></user_directories></yandex>\")\n+    xml_user_directories = root.find(\"user_directories\")\n+    xml_user_directories.append(xmltree.Comment(text=f\"LDAP external user directories {uid}\"))\n+\n+    for entry in entries:\n+        servers, roles_entries = entry\n+        xml_directory = xmltree.Element(\"ldap\")\n+        for server in servers:\n+            if server is not None:\n+                xml_append(xml_directory, \"server\", server)\n+        if roles_entries:\n+            for roles_entry in roles_entries:\n+                xml_roles = xmltree.Element(\"roles\")\n+                if roles_entry:\n+                    for role in roles_entry:\n+                        if role is not None:\n+                            xml_append(xml_roles, role, \"\")\n+                xml_directory.append(xml_roles)\n+        xml_user_directories.append(xml_directory)\n+\n+    xml_indent(root)\n+    content = xml_with_utf8 + str(xmltree.tostring(root, short_empty_elements=False, encoding=\"utf-8\"), \"utf-8\")\n+\n+    return Config(content, path, name, uid, \"config.xml\")\n+\n+def invalid_ldap_external_user_directory_config(server, roles, message, tail=20, timeout=20, config=None):\n+    \"\"\"Check that ClickHouse errors when trying to load invalid LDAP external user directory\n+    configuration file.\n+    \"\"\"\n+    cluster = current().context.cluster\n+    node = current().context.node\n+\n+    if config is None:\n+        config = create_ldap_external_user_directory_config_content(server=server, roles=roles)\n+\n+    try:\n+        with Given(\"I prepare the error log by writting empty lines into it\"):\n+            node.command(\"echo -e \\\"%s\\\" > /var/log/clickhouse-server/clickhouse-server.err.log\" % (\"-\\\\n\" * tail))\n+\n+        with When(\"I add the config\", description=config.path):\n+            command = f\"cat <<HEREDOC > {config.path}\\n{config.content}\\nHEREDOC\"\n+            node.command(command, steps=False, exitcode=0)\n+\n+        with Then(f\"{config.preprocessed_name} should be updated\", description=f\"timeout {timeout}\"):\n+            started = time.time()\n+            command = f\"cat /var/lib/clickhouse/preprocessed_configs/{config.preprocessed_name} | grep {config.uid}{' > /dev/null' if not settings.debug else ''}\"\n+            while time.time() - started < timeout:\n+                exitcode = node.command(command, steps=False).exitcode\n+                if exitcode == 0:\n+                    break\n+                time.sleep(1)\n+            assert exitcode == 0, error()\n+\n+        with When(\"I restart ClickHouse to apply the config changes\"):\n+            node.restart(safe=False, wait_healthy=False)\n+\n+    finally:\n+        with Finally(f\"I remove {config.name}\"):\n+            with By(\"removing invalid configuration file\"):\n+                system_config_path = os.path.join(current_dir(), \"..\", \"configs\", node.name, \"config.d\", config.path.split(\"config.d/\")[-1])\n+                cluster.command(None, f'rm -rf {system_config_path}', timeout=timeout, exitcode=0)\n+\n+            with And(\"restarting the node\"):\n+                node.restart(safe=False)\n+\n+    with Then(\"error log should contain the expected error message\"):\n+        started = time.time()\n+        command = f\"tail -n {tail} /var/log/clickhouse-server/clickhouse-server.err.log | grep \\\"{message}\\\"\"\n+        while time.time() - started < timeout:\n+            exitcode = node.command(command, steps=False).exitcode\n+            if exitcode == 0:\n+                break\n+            time.sleep(1)\n+        assert exitcode == 0, error()\n+\n+@contextmanager\n+def ldap_external_user_directory(server, roles, config_d_dir=\"/etc/clickhouse-server/config.d\",\n+        config_file=None, timeout=20, restart=True, config=None):\n+    \"\"\"Add LDAP external user directory.\n+    \"\"\"\n+    if config_file is None:\n+        config_file = f\"ldap_external_user_directory_{getuid()}.xml\"\n+    if config is None:\n+        config = create_ldap_external_user_directory_config_content(server=server, roles=roles, config_d_dir=config_d_dir, config_file=config_file)\n+    return add_config(config, restart=restart)\n+\n+def login(servers, directory_server, *users, config=None):\n+    \"\"\"Configure LDAP server and LDAP external user directory and\n+    try to login and execute a query\"\"\"\n+    with ldap_servers(servers):\n+        with rbac_roles(f\"role_{getuid()}\") as roles:\n+            with ldap_external_user_directory(server=servers[directory_server][\"host\"], roles=roles, restart=True, config=config):\n+                for user in users:\n+                    if user.get(\"login\", False):\n+                        with When(f\"I login as {user['username']} and execute query\"):\n+                            current().context.node.query(\"SELECT 1\",\n+                                settings=[(\"user\", user[\"username\"]), (\"password\", user[\"password\"])],\n+                                exitcode=user.get(\"exitcode\", None),\n+                                message=user.get(\"message\", None))\n+\n+@TestStep(When)\n+@Name(\"I login as {username} and execute query\")\n+def login_and_execute_query(self, username, password, exitcode=None, message=None, steps=True, timeout=60):\n+    self.context.node.query(\"SELECT 1\",\n+        settings=[(\"user\", username), (\"password\", password)],\n+        exitcode=exitcode or 0,\n+        message=message, steps=steps, timeout=timeout)\ndiff --git a/tests/testflows/ldap/external_user_directory/tests/connections.py b/tests/testflows/ldap/external_user_directory/tests/connections.py\nnew file mode 100644\nindex 000000000000..ba734bb6c714\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/tests/connections.py\n@@ -0,0 +1,270 @@\n+from testflows.core import *\n+from testflows.asserts import error\n+\n+from ldap.external_user_directory.tests.common import login\n+from ldap.external_user_directory.requirements import *\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Connection_Protocol_PlainText(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_EnableTLS(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_EnableTLS_Options_No(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Port_Default(\"1.0\")\n+)\n+def plain_text(self):\n+    \"\"\"Check that we can perform LDAP user authentication using `plain text` connection protocol.\n+    \"\"\"\n+    servers = {\n+        \"openldap1\": {\n+            \"host\": \"openldap1\",\n+            \"enable_tls\": \"no\",\n+            \"auth_dn_prefix\": \"cn=\",\n+            \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\"\n+        }\n+    }\n+    users = [\n+        {\"server\": \"openldap1\", \"username\": \"user1\", \"password\": \"user1\", \"login\": True}\n+    ]\n+    login(servers, \"openldap1\", *users)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Connection_Protocol_PlainText(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Port(\"1.0\")\n+)\n+def plain_text_with_custom_port(self):\n+    \"\"\"Check that we can perform LDAP user authentication using `plain text` connection protocol\n+    with the server that uses custom port.\n+    \"\"\"\n+    servers = {\n+        \"openldap3\": {\n+            \"host\": \"openldap3\",\n+            \"port\": \"3089\",\n+            \"enable_tls\": \"no\",\n+            \"auth_dn_prefix\": \"cn=\",\n+            \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\"\n+        }\n+    }\n+    users = [\n+        {\"server\": \"openldap3\", \"username\": \"user3\", \"password\": \"user3\", \"login\": True}\n+    ]\n+    login(servers, \"openldap3\", *users)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Connection_Protocol_TLS(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Port(\"1.0\")\n+)\n+def tls_with_custom_port(self):\n+    \"\"\"Check that we can perform LDAP user authentication using `TLS` connection protocol\n+    with the server that uses custom port.\n+    \"\"\"\n+    servers = {\n+        \"openldap4\": {\n+            \"host\": \"openldap4\",\n+            \"port\": \"6036\",\n+            \"tls_require_cert\": \"never\",\n+            \"auth_dn_prefix\": \"cn=\",\n+            \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\"\n+        }\n+    }\n+    users = [\n+        {\"server\": \"openldap4\", \"username\": \"user4\", \"password\": \"user4\", \"login\": True}\n+    ]\n+    login(servers, \"openldap4\", *users)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Connection_Protocol_StartTLS(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Port(\"1.0\")\n+)\n+def starttls_with_custom_port(self):\n+    \"\"\"Check that we can perform LDAP user authentication using `StartTLS` connection protocol\n+    with the server that uses custom port.\n+    \"\"\"\n+    servers = {\n+        \"openldap4\": {\n+            \"host\": \"openldap4\",\n+            \"port\": \"3089\",\n+            \"enable_tls\": \"starttls\",\n+            \"tls_require_cert\": \"never\",\n+            \"auth_dn_prefix\": \"cn=\",\n+            \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\"\n+        }\n+    }\n+    users = [\n+        {\"server\": \"openldap4\", \"username\": \"user4\", \"password\": \"user4\", \"login\": True}\n+    ]\n+    login(servers, \"openldap4\", *users)\n+\n+def tls_connection(enable_tls, tls_require_cert):\n+    \"\"\"Try to login using LDAP user authentication over a TLS connection.\"\"\"\n+    servers = {\n+        \"openldap2\": {\n+            \"host\": \"openldap2\",\n+            \"enable_tls\": enable_tls,\n+            \"tls_require_cert\": tls_require_cert,\n+            \"auth_dn_prefix\": \"cn=\",\n+            \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\"\n+        }\n+    }\n+    users = [\n+        {\"server\": \"openldap2\", \"username\": \"user2\", \"password\": \"user2\", \"login\": True}\n+    ]\n+\n+    requirements = []\n+\n+    if tls_require_cert == \"never\":\n+        requirements = [RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSRequireCert_Options_Never(\"1.0\")]\n+    elif tls_require_cert == \"allow\":\n+        requirements = [RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSRequireCert_Options_Allow(\"1.0\")]\n+    elif tls_require_cert == \"try\":\n+        requirements = [RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSRequireCert_Options_Try(\"1.0\")]\n+    elif tls_require_cert == \"demand\":\n+        requirements = [RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSRequireCert_Options_Demand(\"1.0\")]\n+\n+    with Example(name=f\"tls_require_cert='{tls_require_cert}'\", requirements=requirements):\n+        login(servers, \"openldap2\", *users)\n+\n+@TestScenario\n+@Examples(\"enable_tls tls_require_cert\", [\n+    (\"yes\", \"never\"),\n+    (\"yes\", \"allow\"),\n+    (\"yes\", \"try\"),\n+    (\"yes\", \"demand\")\n+])\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Connection_Protocol_TLS(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_EnableTLS(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_EnableTLS_Options_Yes(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Port_Default(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSRequireCert(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSMinimumProtocolVersion_Default(\"1.0\")\n+)\n+def tls(self):\n+    \"\"\"Check that we can perform LDAP user authentication using `TLS` connection protocol.\n+    \"\"\"\n+    for example in self.examples:\n+        tls_connection(*example)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_EnableTLS_Options_Default(\"1.0\")\n+)\n+def tls_enable_tls_default_yes(self):\n+    \"\"\"Check that the default value for the `enable_tls` is set to `yes`.\"\"\"\n+    servers = {\n+        \"openldap2\": {\n+            \"host\": \"openldap2\",\n+            \"tls_require_cert\": \"never\",\n+            \"auth_dn_prefix\": \"cn=\",\n+            \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\"\n+        }\n+    }\n+    users = [\n+        {\"server\": \"openldap2\", \"username\": \"user2\", \"password\": \"user2\", \"login\": True}\n+    ]\n+    login(servers, \"openldap2\", *users)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSRequireCert_Options_Default(\"1.0\")\n+)\n+def tls_require_cert_default_demand(self):\n+    \"\"\"Check that the default value for the `tls_require_cert` is set to `demand`.\"\"\"\n+    servers = {\n+        \"openldap2\": {\n+            \"host\": \"openldap2\",\n+            \"enable_tls\": \"yes\",\n+            \"port\": \"636\",\n+            \"auth_dn_prefix\": \"cn=\",\n+            \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\"\n+        }\n+    }\n+    users = [\n+        {\"server\": \"openldap2\", \"username\": \"user2\", \"password\": \"user2\", \"login\": True}\n+    ]\n+    login(servers, \"openldap2\", *users)\n+\n+@TestScenario\n+@Examples(\"enable_tls tls_require_cert\", [\n+    (\"starttls\", \"never\"),\n+    (\"starttls\", \"allow\"),\n+    (\"starttls\", \"try\"),\n+    (\"starttls\", \"demand\")\n+])\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Connection_Protocol_StartTLS(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_EnableTLS(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_EnableTLS_Options_StartTLS(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Port_Default(\"1.0\")\n+)\n+def starttls(self):\n+    \"\"\"Check that we can perform LDAP user authentication using legacy `StartTLS` connection protocol.\n+    \"\"\"\n+    for example in self.examples:\n+        tls_connection(*example)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSCipherSuite(\"1.0\")\n+)\n+def tls_cipher_suite(self):\n+    \"\"\"Check that `tls_cipher_suite` parameter can be used specify allowed cipher suites.\"\"\"\n+    servers = {\n+        \"openldap4\": {\n+            \"host\": \"openldap4\",\n+            \"port\": \"6036\",\n+            \"tls_require_cert\": \"never\",\n+            \"tls_cipher_suite\": \"SECURE256:+SECURE128:-VERS-TLS-ALL:+VERS-TLS1.2:-RSA:-DHE-DSS:-CAMELLIA-128-CBC:-CAMELLIA-256-CBC\",\n+            \"tls_minimum_protocol_version\": \"tls1.2\",\n+            \"auth_dn_prefix\": \"cn=\",\n+            \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\"\n+        }\n+    }\n+    users = [\n+        {\"server\": \"openldap4\", \"username\": \"user4\", \"password\": \"user4\", \"login\": True}\n+    ]\n+    login(servers, \"openldap4\", *users)\n+\n+@TestOutline(Scenario)\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSMinimumProtocolVersion(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSMinimumProtocolVersion_Values(\"1.0\")\n+)\n+@Examples(\"version exitcode message\", [\n+    (\"ssl2\", None, None),\n+    (\"ssl3\", None, None),\n+    (\"tls1.0\", None, None),\n+    (\"tls1.1\", None, None),\n+    (\"tls1.2\", None, None)\n+])\n+def tls_minimum_protocol_version(self, version, exitcode, message):\n+    \"\"\"Check that `tls_minimum_protocol_version` parameter can be used specify\n+    to specify the minimum protocol version of SSL/TLS.\"\"\"\n+\n+    servers = {\n+        \"openldap4\": {\n+            \"host\": \"openldap4\",\n+            \"port\": \"6036\",\n+            \"tls_require_cert\": \"never\",\n+            \"tls_minimum_protocol_version\": version,\n+            \"auth_dn_prefix\": \"cn=\",\n+            \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\"\n+        }\n+    }\n+\n+    users = [{\n+        \"server\": \"openldap4\", \"username\": \"user4\", \"password\": \"user4\",\n+        \"login\": True, \"exitcode\": int(exitcode) if exitcode is not None else None, \"message\": message\n+    }]\n+\n+    login(servers,\"openldap4\", *users)\n+\n+@TestFeature\n+@Name(\"connection protocols\")\n+def feature(self, node=\"clickhouse1\"):\n+    self.context.node = self.context.cluster.node(node)\n+\n+    for scenario in loads(current_module(), Scenario):\n+        scenario()\ndiff --git a/tests/testflows/ldap/external_user_directory/tests/external_user_directory_config.py b/tests/testflows/ldap/external_user_directory/tests/external_user_directory_config.py\nnew file mode 100644\nindex 000000000000..b5677eba4b22\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/tests/external_user_directory_config.py\n@@ -0,0 +1,293 @@\n+from testflows.core import *\n+\n+from ldap.external_user_directory.tests.common import *\n+from ldap.external_user_directory.requirements import *\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_LDAPUserDirectory_MoreThanOne(\"2.0\")\n+)\n+def more_than_one_user_directory(self, timeout=20):\n+    \"\"\"Check when more than one LDAP user directory is\n+    defined inside a configuration file.\n+    \"\"\"\n+    message = \"DB::Exception: Duplicate storage type 'ldap' at user_directories\"\n+    servers = {\n+        \"openldap1\": {\n+            \"host\": \"openldap1\", \"port\": \"389\", \"enable_tls\": \"no\",\n+            \"auth_dn_prefix\": \"cn=\", \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\"\n+        },\n+        \"openldap2\": {\n+            \"host\": \"openldap2\", \"port\": \"636\", \"enable_tls\": \"yes\",\n+            \"auth_dn_prefix\": \"cn=\", \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\",\n+            \"tls_require_cert\": \"never\"\n+        }\n+    }\n+    users = [\n+        {\"server\": \"openldap1\", \"username\": \"user1\", \"password\": \"user1\", \"login\": True},\n+        {\"server\": \"openldap2\", \"username\": \"user2\", \"password\": \"user2\", \"login\": True}\n+    ]\n+    role = f\"role_{getuid()}\"\n+    entries = [\n+        ([\"openldap1\"], [(role,)]),\n+        ([\"openldap2\"], [(role,)])\n+    ]\n+\n+    with ldap_servers(servers):\n+        with rbac_roles(role) as roles:\n+            config = create_entries_ldap_external_user_directory_config_content(entries)\n+\n+            with ldap_external_user_directory(server=None, roles=None, restart=True, config=config):\n+                    with When(f\"I login as {users[0]['username']} authenticated using openldap1\"):\n+                        current().context.node.query(f\"SELECT 1\",\n+                        settings=[(\"user\", users[0][\"username\"]), (\"password\", users[0][\"password\"])])\n+\n+                    with And(f\"I login as {users[1]['username']} authenticated using openldap2\"):\n+                        current().context.node.query(f\"SELECT 1\",\n+                        settings=[(\"user\", users[1][\"username\"]), (\"password\", users[1][\"password\"])])\n+\n+\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Server_Empty(\"1.0\")\n+)\n+def empty_server(self, timeout=20):\n+    \"\"\"Check that empty string in a `server` field is not allowed.\n+    \"\"\"\n+    message = \"DB::Exception: Empty 'server' field for LDAP user directory\"\n+    servers = {\n+        \"openldap1\": {\n+            \"host\": \"openldap1\", \"port\": \"389\", \"enable_tls\": \"no\",\n+            \"auth_dn_prefix\": \"cn=\", \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\"\n+        },\n+    }\n+\n+    with ldap_servers(servers):\n+        with rbac_roles(f\"role_{getuid()}\") as roles:\n+            invalid_ldap_external_user_directory_config(server=\"\", roles=roles, message=message, timeout=timeout)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Server_Missing(\"1.0\")\n+)\n+def missing_server(self, timeout=20):\n+    \"\"\"Check that missing `server` field is not allowed.\n+    \"\"\"\n+    message = \"DB::Exception: Missing 'server' field for LDAP user directory\"\n+    servers = {\n+        \"openldap1\": {\n+            \"host\": \"openldap1\", \"port\": \"389\", \"enable_tls\": \"no\",\n+            \"auth_dn_prefix\": \"cn=\", \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\"\n+        },\n+    }\n+\n+    with ldap_servers(servers):\n+        with rbac_roles(f\"role_{getuid()}\") as roles:\n+            invalid_ldap_external_user_directory_config(server=None, roles=roles, message=message, timeout=timeout)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Server_MoreThanOne(\"1.0\")\n+)\n+def defined_twice_server(self, timeout=20):\n+    \"\"\"Check that when `server` field is defined twice that only the first\n+    entry is used.\n+    \"\"\"\n+    servers = {\n+        \"openldap1\": {\n+            \"host\": \"openldap1\", \"port\": \"389\", \"enable_tls\": \"no\",\n+            \"auth_dn_prefix\": \"cn=\", \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\"\n+        },\n+    }\n+    user = {\"server\": \"openldap1\", \"username\": \"user1\", \"password\": \"user1\", \"login\": True}\n+\n+    role = f\"role_{getuid()}\"\n+    entries = [\n+        ([\"openldap1\", \"openldap2\"], [(role,)])\n+    ]\n+\n+    with ldap_servers(servers):\n+        with rbac_roles(role) as roles:\n+            config = create_entries_ldap_external_user_directory_config_content(entries)\n+            with ldap_external_user_directory(server=None, roles=None, restart=True, config=config):\n+                with When(f\"I login as {user['username']} and execute query\"):\n+                    current().context.node.query(\"SELECT 1\",\n+                    settings=[(\"user\", user[\"username\"]), (\"password\", user[\"password\"])])\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Server_Invalid(\"1.0\")\n+)\n+def invalid_server(self, timeout=20):\n+    \"\"\"Check when `server` field value is invalid.\n+    \"\"\"\n+    servers = {\n+        \"openldap1\": {\n+            \"host\": \"openldap1\", \"port\": \"389\", \"enable_tls\": \"no\",\n+            \"auth_dn_prefix\": \"cn=\", \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\"\n+        },\n+    }\n+    user = {\"server\": \"openldap1\", \"username\": \"user1\", \"password\": \"user1\", \"login\": True}\n+    role = f\"role_{getuid()}\"\n+\n+    entries = [\n+        ([\"openldap2\"], [(role,)])\n+    ]\n+\n+    with ldap_servers(servers):\n+        with rbac_roles(role) as roles:\n+            config = create_entries_ldap_external_user_directory_config_content(entries)\n+            with ldap_external_user_directory(server=None, roles=None, restart=True, config=config):\n+                with When(f\"I login as {user['username']} and execute query\"):\n+                    current().context.node.query(\"SELECT 1\",\n+                    settings=[(\"user\", user[\"username\"]), (\"password\", user[\"password\"])],\n+                    exitcode=4, message=\"DB::Exception: user1: Authentication failed: password is incorrect or there is no user with such name.\")\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Roles_Empty(\"1.0\")\n+)\n+def empty_roles(self, timeout=20):\n+    \"\"\"Check when `roles` parameter is empty then user can't read any tables.\n+    \"\"\"\n+    message = \"DB::Exception: user1: Not enough privileges.\"\n+    exitcode = 241\n+    servers = {\n+        \"openldap1\": {\n+            \"host\": \"openldap1\", \"port\": \"389\", \"enable_tls\": \"no\",\n+            \"auth_dn_prefix\": \"cn=\", \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\"\n+        },\n+    }\n+    user = {\"server\": \"openldap1\", \"username\": \"user1\", \"password\": \"user1\"}\n+\n+    entries = [\n+        ([\"openldap1\"], [[]])\n+    ]\n+\n+    with ldap_servers(servers):\n+        with table(f\"table_{getuid()}\", \"CREATE TABLE {name} (d DATE, s String, i UInt8) ENGINE = Memory()\") as table_name:\n+            config = create_entries_ldap_external_user_directory_config_content(entries)\n+            with ldap_external_user_directory(server=None, roles=None, restart=True, config=config):\n+                with When(f\"I login as {user['username']} and execute query\"):\n+                    current().context.node.query(f\"SELECT * FROM {table_name} LIMIT 1\",\n+                    settings=[(\"user\", user[\"username\"]), (\"password\", user[\"password\"])],\n+                    exitcode=exitcode, message=message)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Roles_MoreThanOne(\"1.0\")\n+)\n+def defined_twice_roles(self, timeout=20):\n+    \"\"\"Check that when `roles` is defined twice then only the first entry is used.\n+    \"\"\"\n+    node = self.context.node\n+\n+    create_statement = \"CREATE TABLE {name} (d DATE, s String, i UInt8) ENGINE = Memory()\"\n+    servers = {\n+        \"openldap1\": {\n+            \"host\": \"openldap1\", \"port\": \"389\", \"enable_tls\": \"no\",\n+            \"auth_dn_prefix\": \"cn=\", \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\"\n+        },\n+    }\n+    user = {\"server\": \"openldap1\", \"username\": \"user1\", \"password\": \"user1\", \"login\": True}\n+    roles = [f\"role0_{getuid()}\", f\"role1_{getuid()}\"]\n+    entries = [\n+        ([\"openldap1\"], [[roles[0]],[roles[1]]])\n+    ]\n+\n+    with ldap_servers(servers):\n+        with rbac_roles(*roles):\n+            with table(f\"table0_{getuid()}\", create_statement) as table0_name, \\\n+                    table(f\"table1_{getuid()}\", create_statement) as table1_name:\n+\n+                with Given(\"I grant select privilege for the first table to the first role\"):\n+                    node.query(f\"GRANT SELECT ON {table0_name} TO {roles[0]}\")\n+\n+                with And(\"I grant select privilege for the second table to the second role\"):\n+                    node.query(f\"GRANT SELECT ON {table1_name} TO {roles[1]}\")\n+\n+                config = create_entries_ldap_external_user_directory_config_content(entries)\n+\n+                with ldap_external_user_directory(server=None, roles=None, restart=True, config=config):\n+                    with When(f\"I login as {user['username']} and try to read from the first table\"):\n+                        current().context.node.query(f\"SELECT * FROM {table0_name} LIMIT 1\",\n+                        settings=[(\"user\", user[\"username\"]), (\"password\", user[\"password\"])])\n+\n+                    with And(f\"I login as {user['username']} again and try to read from the second table\"):\n+                        current().context.node.query(f\"SELECT * FROM {table0_name} LIMIT 1\",\n+                        settings=[(\"user\", user[\"username\"]), (\"password\", user[\"password\"])])\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Roles_Invalid(\"1.0\")\n+)\n+def invalid_role_in_roles(self, timeout=20):\n+    \"\"\"Check that an error is returned when LDAP users try to authenticate\n+    if an invalid role is specified inside the `roles` section.\n+    \"\"\"\n+    exitcode = 4\n+    message = \"DB::Exception: user1: Authentication failed\"\n+\n+    servers = {\n+        \"openldap1\": {\n+            \"host\": \"openldap1\", \"port\": \"389\", \"enable_tls\": \"no\",\n+            \"auth_dn_prefix\": \"cn=\", \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\"\n+        },\n+    }\n+    user = {\"server\": \"openldap1\", \"username\": \"user1\", \"password\": \"user1\"}\n+\n+    with ldap_servers(servers):\n+        with ldap_external_user_directory(\"openldap1\", roles=[\"foo\"], restart=True):\n+            with When(f\"I login as {user['username']} and execute query\"):\n+                current().context.node.query(\"SELECT 1\",\n+                settings=[(\"user\", user[\"username\"]), (\"password\", user[\"password\"])],\n+                exitcode=exitcode, message=message)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Roles_Missing(\"1.0\")\n+)\n+def missing_roles(self, timeout=20):\n+    \"\"\"Check that when the `roles` are missing then\n+    LDAP users can still login but can't read from any table.\n+    \"\"\"\n+    message = \"DB::Exception: user1: Not enough privileges.\"\n+    exitcode = 241\n+    servers = {\n+        \"openldap1\": {\n+            \"host\": \"openldap1\", \"port\": \"389\", \"enable_tls\": \"no\",\n+            \"auth_dn_prefix\": \"cn=\", \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\"\n+        },\n+    }\n+    user = {\"server\": \"openldap1\", \"username\": \"user1\", \"password\": \"user1\"}\n+    entries = [\n+        ([\"openldap1\"], None)\n+    ]\n+\n+    with ldap_servers(servers):\n+        with table(f\"table_{getuid()}\", \"CREATE TABLE {name} (d DATE, s String, i UInt8) ENGINE = Memory()\") as table_name:\n+\n+            config = create_entries_ldap_external_user_directory_config_content(entries)\n+\n+            with ldap_external_user_directory(server=None, roles=None, restart=True, config=config):\n+                with When(f\"I login as {user['username']} and execute query\"):\n+                    current().context.node.query(f\"SELECT * FROM {table_name} LIMIT 1\",\n+                    settings=[(\"user\", user[\"username\"]), (\"password\", user[\"password\"])],\n+                    exitcode=exitcode, message=message)\n+\n+@TestFeature\n+@Name(\"external user directory config\")\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Syntax(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Server(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_LDAPUserDirectory(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Definition(\"1.0\")\n+)\n+def feature(self, node=\"clickhouse1\"):\n+    \"\"\"Check LDAP external user directory configuration.\n+    \"\"\"\n+    self.context.node = self.context.cluster.node(node)\n+\n+    for scenario in loads(current_module(), Scenario):\n+        scenario()\ndiff --git a/tests/testflows/ldap/external_user_directory/tests/restart.py b/tests/testflows/ldap/external_user_directory/tests/restart.py\nnew file mode 100644\nindex 000000000000..9b688909cb2e\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/tests/restart.py\n@@ -0,0 +1,300 @@\n+import random\n+\n+from multiprocessing.dummy import Pool\n+from testflows.core import *\n+from testflows.asserts import error\n+\n+from ldap.external_user_directory.tests.common import *\n+from ldap.external_user_directory.requirements import *\n+\n+@TestScenario\n+def one_external_user_directory(self, node=\"clickhouse1\"):\n+    \"\"\"Check that we can restart ClickHouse server when one\n+    LDAP external user directory is configured.\n+    \"\"\"\n+    self.context.node = self.context.cluster.node(node)\n+\n+    servers = {\n+        \"openldap1\": {\n+            \"host\": \"openldap1\",\n+            \"port\": \"389\",\n+            \"enable_tls\": \"no\",\n+            \"auth_dn_prefix\": \"cn=\",\n+            \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\"\n+        },\n+    }\n+\n+    with ldap_servers(servers):\n+        with rbac_roles(\"ldap_role\") as roles:\n+            with ldap_external_user_directory(server=\"openldap1\", roles=roles, restart=True):\n+                with Given(\"I login and execute query\"):\n+                    login_and_execute_query(username=\"user1\", password=\"user1\")\n+\n+                with When(\"I then restart the server\"):\n+                    restart()\n+\n+                with Then(\"I should be able to login and execute query after restart\"):\n+                    login_and_execute_query(username=\"user1\", password=\"user1\")\n+\n+@TestScenario\n+def multiple_external_user_directories(self, node=\"clickhouse1\"):\n+    \"\"\"Check that we can restart ClickHouse server when two\n+    LDAP external user directory are configured.\n+    \"\"\"\n+    self.context.node = self.context.cluster.node(node)\n+\n+    servers = {\n+        \"openldap1\": {\n+            \"host\": \"openldap1\",\n+            \"port\": \"389\",\n+            \"enable_tls\": \"no\",\n+            \"auth_dn_prefix\": \"cn=\",\n+            \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\"\n+        },\n+        \"openldap2\": {\n+            \"host\": \"openldap2\",\n+            \"port\": \"636\",\n+            \"enable_tls\": \"yes\",\n+            \"auth_dn_prefix\": \"cn=\",\n+            \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\",\n+            \"tls_require_cert\": \"never\",\n+        }\n+    }\n+\n+    with Given(\"I have two LDAP servers\"):\n+        entries = [\n+            ([\"openldap1\"], []),\n+            ([\"openldap2\"], [])\n+        ]\n+\n+    with And(\"I create config file to define LDAP external user directory for each LDAP server\"):\n+        config = create_entries_ldap_external_user_directory_config_content(entries)\n+\n+    with ldap_servers(servers):\n+        with ldap_external_user_directory(server=None, roles=None, restart=True, config=config):\n+            with Given(\"I login and execute query using a user defined in the first LDAP server\"):\n+                login_and_execute_query(username=\"user1\", password=\"user1\")\n+\n+            with And(\"I login and execute query using a user defined the second LDAP server\"):\n+                login_and_execute_query(username=\"user2\", password=\"user2\")\n+\n+            with When(\"I restart the server\"):\n+                restart()\n+\n+            with Then(\"I should be able to login and execute query again using a user defined in the first LDAP server\"):\n+                login_and_execute_query(username=\"user1\", password=\"user1\")\n+\n+            with And(\"I should be able to login and execute query again using a user defined in the second LDAP server\"):\n+                login_and_execute_query(username=\"user2\", password=\"user2\")\n+\n+@TestScenario\n+def dynamically_added_users(self, node=\"clickhouse1\", count=10):\n+    \"\"\"Check that we can restart ClickHouse server when one\n+    LDAP external user directory is configured and the login\n+    with an LDAP users that are dynamically added after restart.\n+    \"\"\"\n+    self.context.node = self.context.cluster.node(node)\n+\n+    servers = {\n+        \"openldap1\": {\n+            \"host\": \"openldap1\",\n+            \"port\": \"389\",\n+            \"enable_tls\": \"no\",\n+            \"auth_dn_prefix\": \"cn=\",\n+            \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\"\n+        },\n+    }\n+\n+    with ldap_servers(servers):\n+        with rbac_roles(\"ldap_role\") as roles:\n+            with ldap_external_user_directory(server=\"openldap1\", roles=roles, restart=True):\n+                with Given(\"I login and execute query using existing LDAP user\"):\n+                    login_and_execute_query(username=\"user1\", password=\"user1\")\n+\n+                with When(\"I then restart the server\"):\n+                    restart()\n+\n+                with Then(\"after restart I should be able to login and execute query using existing LDAP user\"):\n+                    login_and_execute_query(username=\"user1\", password=\"user1\")\n+\n+                dynamic_users = []\n+                with When(\"I define dynamically added LDAP users\"):\n+                    for i in range(count):\n+                        dynamic_users.append(\n+                            {\"cn\": f\"dynamic_user{i}\", \"userpassword\": randomword(20)}\n+                        )\n+\n+                with ldap_users(*dynamic_users, node=self.context.cluster.node(\"openldap1\")):\n+                    with Then(\"I should be able to login and execute queries using dynamically added users\"):\n+                        for dynamic_user in dynamic_users:\n+                            with When(f\"using dynamically added user {dynamic_user['cn']}\"):\n+                                login_and_execute_query(username=dynamic_user[\"cn\"], password=dynamic_user[\"userpassword\"])\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Restart_Server_ParallelLogins(\"1.0\")\n+)\n+def parallel_login(self, server=None, user_count=10, timeout=200):\n+    \"\"\"Check that login of valid and invalid users works in parallel\n+    using local users defined using RBAC and LDAP users authenticated using\n+    multiple LDAP external user directories when server is restarted\n+    in the middle of parallel login attempts. After server is restarted\n+    makes sure that parallel logins work as expected.\n+    \"\"\"\n+    servers = {\n+        \"openldap1\": {\n+            \"host\": \"openldap1\",\n+            \"port\": \"389\",\n+            \"enable_tls\": \"no\",\n+            \"auth_dn_prefix\": \"cn=\",\n+            \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\"\n+        },\n+        \"openldap2\": {\n+            \"host\": \"openldap2\",\n+            \"port\": \"636\",\n+            \"enable_tls\": \"yes\",\n+            \"auth_dn_prefix\": \"cn=\",\n+            \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\",\n+            \"tls_require_cert\": \"never\",\n+        }\n+    }\n+\n+    with Given(\"I have two LDAP servers\"):\n+        entries = [\n+            ([\"openldap1\"], []),\n+            ([\"openldap2\"], [])\n+        ]\n+\n+    with And(\"I define a group of users to be created on each LDAP server\"):\n+        user_groups = {\n+            \"openldap1_users\": [{\"cn\": f\"openldap1_parallel_user{i}\", \"userpassword\": randomword(20)} for i in\n+                                range(user_count)],\n+            \"openldap2_users\": [{\"cn\": f\"openldap2_parallel_user{i}\", \"userpassword\": randomword(20)} for i in\n+                                range(user_count)],\n+            \"local_users\": [{\"cn\": f\"local_parallel_user{i}\", \"userpassword\": randomword(20)} for i in\n+                            range(user_count)]\n+        }\n+\n+    @TestStep(When)\n+    @Name(\"I login as {username} and execute query\")\n+    def login_and_execute_query_during_restart(self, username, password, exitcode, message, steps=True, timeout=60):\n+        \"\"\"Execute a query and ignore exitcode and message as\n+        during restart exit codes and messages vary based on the state\n+        of the restarted container and the ClickHouse server\n+        and there are too many cases and complete list is not fully known\n+        therefore trying to list all possible cases produces random fails.\n+        \"\"\"\n+        r = self.context.cluster.command(None, f\"{self.context.cluster.docker_compose} exec {self.context.node.name} \" +\n+           f\"clickhouse client -q \\\"SELECT 1\\\" --user {username} --password {password}\", steps=steps, timeout=timeout)\n+\n+        return r\n+\n+    @TestStep(When)\n+    @Name(\"I login as {username} and execute query\")\n+    def login_and_execute_query(self, username, password, exitcode=None, message=None, steps=True, timeout=60):\n+        self.context.node.query(\"SELECT 1\",\n+            settings=[(\"user\", username), (\"password\", password)],\n+            exitcode=exitcode or 0,\n+            message=message, steps=steps, timeout=timeout)\n+\n+    def login_with_valid_username_and_password(users, i, iterations=10, during_restart=False):\n+        \"\"\"Login with valid username and password.\n+        \"\"\"\n+        query = login_and_execute_query\n+        if during_restart:\n+            query = login_and_execute_query_during_restart\n+\n+        with When(f\"valid users try to login #{i}\"):\n+            for i in range(iterations):\n+                random_user = users[random.randint(0, len(users) - 1)]\n+\n+                query(username=random_user[\"cn\"], password=random_user[\"userpassword\"],\n+                    exitcode=0, message=\"1\", steps=False)\n+\n+    def login_with_valid_username_and_invalid_password(users, i, iterations=10, during_restart=False):\n+        \"\"\"Login with valid username and invalid password.\n+        \"\"\"\n+        query = login_and_execute_query\n+        if during_restart:\n+            query = login_and_execute_query_during_restart\n+\n+        with When(f\"users try to login with valid username and invalid password #{i}\"):\n+            for i in range(iterations):\n+                random_user = users[random.randint(0, len(users) - 1)]\n+\n+                query(username=random_user[\"cn\"],\n+                    password=(random_user[\"userpassword\"] + randomword(1)),\n+                    exitcode=4,\n+                    message=f\"DB::Exception: {random_user['cn']}: Authentication failed: password is incorrect or there is no user with such name\",\n+                    steps=False)\n+\n+    def login_with_invalid_username_and_valid_password(users, i, iterations=10, during_restart=False):\n+        \"\"\"Login with invalid username and valid password.\n+        \"\"\"\n+        query = login_and_execute_query\n+        if during_restart:\n+            query = login_and_execute_query_during_restart\n+\n+        with When(f\"users try to login with invalid username and valid password #{i}\"):\n+            for i in range(iterations):\n+                random_user = dict(users[random.randint(0, len(users) - 1)])\n+                random_user[\"cn\"] += randomword(1)\n+\n+                query(username=random_user[\"cn\"],\n+                    password=random_user[\"userpassword\"],\n+                    exitcode=4,\n+                    message=f\"DB::Exception: {random_user['cn']}: Authentication failed: password is incorrect or there is no user with such name\",\n+                    steps=False)\n+\n+    with And(\"I have a list of checks that I want to run for each user group\"):\n+        checks = [\n+            login_with_valid_username_and_password,\n+            login_with_valid_username_and_invalid_password,\n+            login_with_invalid_username_and_valid_password\n+        ]\n+\n+    with And(\"I create config file to define LDAP external user directory for each LDAP server\"):\n+        config = create_entries_ldap_external_user_directory_config_content(entries)\n+\n+    with ldap_servers(servers):\n+        with ldap_external_user_directory(server=None, roles=None, restart=True, config=config):\n+            with ldap_users(*user_groups[\"openldap1_users\"], node=self.context.cluster.node(\"openldap1\")):\n+                with ldap_users(*user_groups[\"openldap2_users\"], node=self.context.cluster.node(\"openldap2\")):\n+                    with rbac_users(*user_groups[\"local_users\"]):\n+                        tasks = []\n+                        try:\n+                            with When(\"I restart the server during parallel login of users in each group\"):\n+                                p = Pool(10)\n+                                for users in user_groups.values():\n+                                    for check in checks:\n+                                        tasks.append(p.apply_async(check, (users, 0, 25, True)))\n+\n+                                tasks.append(p.apply_async(restart))\n+                        finally:\n+                            with Then(\"logins during restart should work\"):\n+                                join(tasks, timeout)\n+\n+                        tasks = []\n+                        try:\n+                            with When(\"I perform parallel login of users in each group after restart\"):\n+                                p = Pool(10)\n+                                for users in user_groups.values():\n+                                    for check in checks:\n+                                        tasks.append(p.apply_async(check, (users, 0, 10, False)))\n+                        finally:\n+                            with Then(\"logins after restart should work\"):\n+                                join(tasks, timeout)\n+\n+@TestOutline(Feature)\n+@Name(\"restart\")\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Restart_Server(\"1.0\")\n+)\n+def feature(self, servers=None, server=None, node=\"clickhouse1\"):\n+    \"\"\"Check that we can restart ClickHouse server\n+    when one or more external user directories are configured.\n+    \"\"\"\n+    self.context.node = self.context.cluster.node(node)\n+\n+    for scenario in loads(current_module(), Scenario):\n+        Scenario(test=scenario, flags=TE)()\ndiff --git a/tests/testflows/ldap/external_user_directory/tests/roles.py b/tests/testflows/ldap/external_user_directory/tests/roles.py\nnew file mode 100644\nindex 000000000000..8a6c6f465d17\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/tests/roles.py\n@@ -0,0 +1,314 @@\n+from testflows.core import *\n+\n+from ldap.external_user_directory.tests.common import *\n+from ldap.external_user_directory.requirements import *\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Role_New(\"1.0\")\n+)\n+def new_role(self, server, timeout=20):\n+    \"\"\"Check that new roles can't be assigned to any LDAP user\n+    authenticated using external user directory.\n+    \"\"\"\n+    node = self.context.node\n+    uid = getuid()\n+\n+    self.context.ldap_node = self.context.cluster.node(server)\n+\n+    users = [\n+        {\"username\": f\"user0_{uid}\", \"password\": \"user0_password\"},\n+        {\"username\": f\"user1_{uid}\", \"password\": \"user1_password\"}\n+    ]\n+\n+    with rbac_roles(f\"role0_{uid}\", f\"role1_{uid}\") as roles:\n+        with table(f\"table_{getuid()}\", \"CREATE TABLE {name} (d DATE, s String, i UInt8) ENGINE = Memory()\") as table_name:\n+            with ldap_external_user_directory(server=server, roles=roles, restart=True):\n+                with ldap_users(*[{\"cn\": user[\"username\"], \"userpassword\": user[\"password\"]} for user in users]):\n+\n+                    with When(f\"I login and execute query simple query to cache the LDAP user\"):\n+                        node.query(f\"SELECT 1\",\n+                            settings=[(\"user\", users[0][\"username\"]), (\"password\", users[0][\"password\"])])\n+\n+                    with rbac_roles(f\"new_role0_{uid}\") as new_roles:\n+\n+                        message = \"DB::Exception: Cannot update user `{user}` in ldap because this storage is readonly\"\n+                        exitcode = 239\n+\n+                        with And(\"I try to grant new role to the cached LDAP user\"):\n+                            node.query(f\"GRANT {new_roles[0]} TO {users[0]['username']}\",\n+                                exitcode=exitcode, message=message.format(user=users[0][\"username\"]))\n+\n+                        message = \"DB::Exception: There is no role `{user}` in user directories\"\n+                        exitcode = 255\n+\n+                        with And(\"I try to grant new role to the non-cached LDAP user\"):\n+                            node.query(f\"GRANT {new_roles[0]} TO {users[1]['username']}\",\n+                                exitcode=exitcode, message=message.format(user=users[1][\"username\"]))\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Role_NewPrivilege(\"1.0\")\n+)\n+def add_privilege(self, server, timeout=20):\n+    \"\"\"Check that we can add privilege to a role used\n+    in the external user directory configuration.\n+    \"\"\"\n+    node = self.context.node\n+    uid = getuid()\n+    message = \"DB::Exception: {user}: Not enough privileges.\"\n+    exitcode = 241\n+\n+    self.context.ldap_node = self.context.cluster.node(server)\n+\n+    users = [\n+        {\"username\": f\"user0_{uid}\", \"password\": \"user0_password\"},\n+        {\"username\": f\"user1_{uid}\", \"password\": \"user1_password\"}\n+    ]\n+\n+    with rbac_roles(f\"role0_{uid}\", f\"role1_{uid}\") as roles:\n+        with table(f\"table_{getuid()}\", \"CREATE TABLE {name} (d DATE, s String, i UInt8) ENGINE = Memory()\") as table_name:\n+            with ldap_external_user_directory(server=server, roles=roles, restart=True):\n+                with ldap_users(*[{\"cn\": user[\"username\"], \"userpassword\": user[\"password\"]} for user in users]):\n+\n+                    with When(f\"I login and execute query that requires no privileges\"):\n+                        node.query(f\"SELECT 1\",\n+                            settings=[(\"user\", users[0][\"username\"]), (\"password\", users[0][\"password\"])])\n+\n+                    with And(f\"I login and try to read from the table without having select privilege\"):\n+                        node.query(f\"SELECT * FROM {table_name} LIMIT 1\",\n+                            settings=[(\"user\", users[0][\"username\"]), (\"password\", users[0][\"password\"])],\n+                            exitcode=exitcode, message=message.format(user=users[0][\"username\"]))\n+\n+                    with When(f\"I grant select privilege to one of the two roles assigned to LDAP users\"):\n+                        node.query(f\"GRANT SELECT ON {table_name} TO {roles[0]}\")\n+\n+                    with And(f\"I login again and expect that cached LDAP user can successfully read from the table\"):\n+                        node.query(f\"SELECT * FROM {table_name} LIMIT 1\",\n+                            settings=[(\"user\", users[0][\"username\"]), (\"password\", users[0][\"password\"])])\n+\n+                    with And(f\"I login again and expect that non-cached LDAP user can successfully read from the table\"):\n+                        node.query(f\"SELECT * FROM {table_name} LIMIT 1\",\n+                            settings=[(\"user\", users[1][\"username\"]), (\"password\", users[1][\"password\"])])\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Role_RemovedPrivilege(\"1.0\")\n+)\n+def remove_privilege(self, server, timeout=20):\n+    \"\"\"Check that we can remove privilege from a role used\n+    in the external user directory configuration.\n+    \"\"\"\n+    node = self.context.node\n+    uid = getuid()\n+    message = \"DB::Exception: {user}: Not enough privileges.\"\n+    exitcode = 241\n+\n+    self.context.ldap_node = self.context.cluster.node(server)\n+\n+    users = [\n+        {\"username\": f\"user0_{uid}\", \"password\": \"user0_password\"},\n+        {\"username\": f\"user1_{uid}\", \"password\": \"user1_password\"}\n+    ]\n+\n+    with rbac_roles(f\"role0_{uid}\", f\"role1_{uid}\") as roles:\n+        with table(f\"table_{getuid()}\", \"CREATE TABLE {name} (d DATE, s String, i UInt8) ENGINE = Memory()\") as table_name:\n+\n+            with When(f\"I grant select privilege to one of the two roles assigned to LDAP users\"):\n+                node.query(f\"GRANT SELECT ON {table_name} TO {roles[0]}\")\n+\n+            with ldap_external_user_directory(server=server, roles=roles, restart=True):\n+                with ldap_users(*[{\"cn\": user[\"username\"], \"userpassword\": user[\"password\"]} for user in users]):\n+\n+                    with When(f\"I login then LDAP user should be able to read from the table\"):\n+                        node.query(f\"SELECT * FROM {table_name} LIMIT 1\",\n+                            settings=[(\"user\", users[0][\"username\"]), (\"password\", users[0][\"password\"])])\n+\n+                    with When(f\"I revoke select privilege from all the roles assigned to LDAP users\"):\n+                        node.query(f\"REVOKE SELECT ON {table_name} FROM {roles[0]}\")\n+\n+                    with When(f\"I login again then cached LDAP user should not be able to read from the table\"):\n+                        node.query(f\"SELECT * FROM {table_name} LIMIT 1\",\n+                            settings=[(\"user\", users[0][\"username\"]), (\"password\", users[0][\"password\"])],\n+                            exitcode=exitcode, message=message.format(user=users[0][\"username\"]))\n+\n+                    with When(f\"I login with non-cached LDAP user then the user should also not be able to read from the table\"):\n+                        node.query(f\"SELECT * FROM {table_name} LIMIT 1\",\n+                            settings=[(\"user\", users[1][\"username\"]), (\"password\", users[1][\"password\"])],\n+                            exitcode=exitcode, message=message.format(user=users[1][\"username\"]))\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Role_Removed(\"1.0\")\n+)\n+def remove_role(self, server, timeout=20):\n+    \"\"\"Check that when a role used in the external user directory configuration\n+    is dynamically removed then any non-cached LDAP users should not be authenticated using\n+    LDAP external user directory.\n+    \"\"\"\n+    node = self.context.node\n+    uid = getuid()\n+    exitcode = 4\n+    message = \"DB::Exception: {user}: Authentication failed: password is incorrect or there is no user with such name\"\n+\n+    self.context.ldap_node = self.context.cluster.node(server)\n+\n+    users = [\n+        {\"username\": f\"user0_{uid}\", \"password\": \"user0_password\"},\n+        {\"username\": f\"user1_{uid}\", \"password\": \"user1_password\"}\n+    ]\n+\n+    with rbac_roles(f\"role0_{uid}\", f\"role1_{uid}\") as roles:\n+            with ldap_external_user_directory(server=server, roles=roles, restart=True):\n+                with ldap_users(*[{\"cn\": user[\"username\"], \"userpassword\": user[\"password\"]} for user in users]):\n+                    with When(f\"I login and execute query that requires no privileges\"):\n+                        node.query(f\"SELECT 1\",\n+                            settings=[(\"user\", users[0][\"username\"]), (\"password\", users[0][\"password\"])])\n+\n+                    with And(\"I remove one of the roles\"):\n+                        node.query(f\"DROP ROLE {roles[1]}\")\n+\n+                    with And(f\"I try to login using cached LDAP user\"):\n+                        node.query(f\"SELECT 1\",\n+                            settings=[(\"user\", users[0][\"username\"]), (\"password\", users[0][\"password\"])])\n+\n+                    with And(f\"I try to login again using non-cached LDAP user\"):\n+                        node.query(f\"SELECT 1\",\n+                            settings=[(\"user\", users[1][\"username\"]), (\"password\", users[1][\"password\"])],\n+                            exitcode=exitcode, message=message.format(user=users[1][\"username\"]))\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Role_Removed_Privileges(\"1.0\")\n+)\n+def remove_privilege_by_removing_role(self, server, timeout=20):\n+    \"\"\"Check that when the role used in the external user directory configuration\n+    is dynamically removed then privileges are removed from all\n+    LDAP users that are authenticated using external user directory.\n+    \"\"\"\n+    node = self.context.node\n+    message = \"DB::Exception: {user}: Not enough privileges.\"\n+    exitcode = 241\n+    uid = getuid()\n+\n+    self.context.ldap_node = self.context.cluster.node(server)\n+\n+    users = [\n+        {\"username\": f\"user0_{uid}\", \"password\": \"user0_password\"},\n+        {\"username\": f\"user1_{uid}\", \"password\": \"user1_password\"}\n+    ]\n+\n+    with rbac_roles(f\"role0_{uid}\", f\"role1_{uid}\") as roles:\n+            with table(f\"table_{getuid()}\", \"CREATE TABLE {name} (d DATE, s String, i UInt8) ENGINE = Memory()\") as table_name:\n+\n+                with When(f\"I grant select privilege to one of the two roles assigned to LDAP users\"):\n+                    node.query(f\"GRANT SELECT ON {table_name} TO {roles[0]}\")\n+\n+                with ldap_external_user_directory(server=server, roles=roles, restart=True):\n+                    with ldap_users(*[{\"cn\": user[\"username\"], \"userpassword\": user[\"password\"]} for user in users]):\n+\n+                        with When(f\"I login and expect that LDAP user can read from the table\"):\n+                            node.query(f\"SELECT * FROM {table_name} LIMIT 1\",\n+                                settings=[(\"user\", users[0][\"username\"]), (\"password\", users[0][\"password\"])])\n+\n+                        with And(\"I remove the role that grants the privilege\"):\n+                            node.query(f\"DROP ROLE {roles[0]}\")\n+\n+                        with And(f\"I try to relogin and expect that cached LDAP user can login \"\n+                                \"but does not have privilege that was provided by the removed role\"):\n+                            node.query(f\"SELECT * FROM {table_name} LIMIT 1\",\n+                                settings=[(\"user\", users[0][\"username\"]), (\"password\", users[0][\"password\"])],\n+                                exitcode=exitcode, message=message.format(user=users[0][\"username\"]))\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Role_Readded_Privileges(\"1.0\")\n+)\n+def readd_privilege_by_readding_role(self, server, timeout=20):\n+    \"\"\"Check that when the role used in the external user directory configuration\n+    is dynamically removed then all the privileges are removed from any\n+    LDAP users authenticated using external user directory but when the role is re-added\n+    then privileges are restored and non-cached users can login again.\n+    \"\"\"\n+    node = self.context.node\n+    uid = getuid()\n+\n+    self.context.ldap_node = self.context.cluster.node(server)\n+\n+    users = [\n+        {\"username\": f\"user0_{uid}\", \"password\": \"user0_password\"},\n+        {\"username\": f\"user1_{uid}\", \"password\": \"user1_password\"}\n+    ]\n+\n+    with rbac_roles(f\"role0_{uid}\", f\"role1_{uid}\") as roles:\n+            with table(f\"table_{getuid()}\", \"CREATE TABLE {name} (d DATE, s String, i UInt8) ENGINE = Memory()\") as table_name:\n+\n+                with When(f\"I grant select privilege to one of the two roles assigned to LDAP users\"):\n+                    node.query(f\"GRANT SELECT ON {table_name} TO {roles[0]}\")\n+\n+                with ldap_external_user_directory(server=server, roles=roles, restart=True):\n+                    with ldap_users(*[{\"cn\": user[\"username\"], \"userpassword\": user[\"password\"]} for user in users]):\n+\n+                        with When(f\"I login and expect that LDAP user can read from the table\"):\n+                            node.query(f\"SELECT * FROM {table_name} LIMIT 1\",\n+                                settings=[(\"user\", users[0][\"username\"]), (\"password\", users[0][\"password\"])])\n+\n+                        with And(\"I remove the role that grants the privilege\"):\n+                            node.query(f\"DROP ROLE {roles[0]}\")\n+\n+                        message = \"DB::Exception: {user}: Not enough privileges.\"\n+                        exitcode = 241\n+\n+                        with And(f\"I try to relogin and expect that cached LDAP user can login \"\n+                                \"but does not have privilege that was provided by the removed role\"):\n+                            node.query(f\"SELECT * FROM {table_name} LIMIT 1\",\n+                                settings=[(\"user\", users[0][\"username\"]), (\"password\", users[0][\"password\"])],\n+                                exitcode=exitcode, message=message.format(user=users[0][\"username\"]))\n+\n+                        message = \"DB::Exception: {user}: Authentication failed: password is incorrect or there is no user with such name\"\n+                        exitcode = 4\n+\n+                        with And(f\"I try to login using non-cached LDAP user and expect it to fail\"):\n+                            node.query(f\"SELECT 1\",\n+                                settings=[(\"user\", users[1][\"username\"]), (\"password\", users[1][\"password\"])],\n+                                exitcode=exitcode, message=message.format(user=users[1][\"username\"]))\n+\n+                        with When(\"I re-add the role\"):\n+                            node.query(f\"CREATE ROLE {roles[0]}\")\n+\n+                        with And(f\"I grant select privilege to the re-added role\"):\n+                            node.query(f\"GRANT SELECT ON {table_name} TO {roles[0]}\")\n+\n+                        with And(f\"I try to relogin and expect that cached LDAP user can login \"\n+                                \"and again has the privilege that is provided by the role\"):\n+                            node.query(f\"SELECT * FROM {table_name} LIMIT 1\",\n+                                settings=[(\"user\", users[0][\"username\"]), (\"password\", users[0][\"password\"])])\n+\n+                        with And(\"I try to login using non-cached LDAP expect it to work \"\n+                                \"with user also having privilege provided by the role\"):\n+                            node.query(f\"SELECT * FROM {table_name} LIMIT 1\",\n+                                settings=[(\"user\", users[1][\"username\"]), (\"password\", users[1][\"password\"])])\n+\n+@TestFeature\n+@Name(\"roles\")\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Roles(\"1.0\")\n+)\n+def feature(self, node=\"clickhouse1\"):\n+    \"\"\"Check that all the users that are authenticated using\n+    LDAP external user directory are assigned the roles specified\n+    in the configuration of the LDAP external user directory.\n+    \"\"\"\n+    self.context.node = self.context.cluster.node(node)\n+\n+    servers = {\n+        \"openldap1\": {\n+            \"host\": \"openldap1\", \"port\": \"389\", \"enable_tls\": \"no\",\n+            \"auth_dn_prefix\": \"cn=\", \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\"\n+        },\n+    }\n+    user = {\"server\": \"openldap1\", \"username\": \"user1\", \"password\": \"user1\"}\n+\n+    with ldap_servers(servers):\n+        for scenario in loads(current_module(), Scenario):\n+            scenario(server=\"openldap1\")\ndiff --git a/tests/testflows/ldap/external_user_directory/tests/server_config.py b/tests/testflows/ldap/external_user_directory/tests/server_config.py\nnew file mode 100644\nindex 000000000000..5df343b53dfa\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/tests/server_config.py\n@@ -0,0 +1,286 @@\n+import time\n+\n+from testflows.core import *\n+\n+from ldap.external_user_directory.tests.common import *\n+from ldap.external_user_directory.requirements import *\n+\n+from ldap.authentication.tests.common import invalid_server_config\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Invalid(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Name(\"1.0\")\n+)\n+def empty_server_name(self, timeout=60):\n+    \"\"\"Check that empty string as a server name is not allowed.\n+    \"\"\"\n+    servers = {\"\": {\"host\": \"foo\", \"port\": \"389\", \"enable_tls\": \"no\",\n+            \"auth_dn_prefix\": \"cn=\", \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\"\n+    }}\n+    invalid_server_config(servers, timeout=timeout)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Invalid(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Connection_Authentication_UnreachableServer(\"1.0\")\n+)\n+def invalid_host(self):\n+    \"\"\"Check that server returns an error when LDAP server\n+    host name is invalid.\n+    \"\"\"\n+    servers = {\"foo\": {\"host\": \"foo\", \"port\": \"389\", \"enable_tls\": \"no\"}}\n+    users = [{\n+        \"server\": \"foo\", \"username\": \"user1\", \"password\": \"user1\", \"login\": True,\n+        \"exitcode\": 4, \"message\": \"DB::Exception: user1: Authentication failed: password is incorrect or there is no user with such name.\"\n+    }]\n+    login(servers, \"foo\", *users)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Invalid(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Host(\"1.0\")\n+)\n+def empty_host(self, tail=20, timeout=60):\n+    \"\"\"Check that server returns an error when LDAP server\n+    host value is empty.\n+    \"\"\"\n+    node = current().context.node\n+    message = \"DB::Exception: Empty 'host' entry\"\n+\n+    servers = {\"foo\": {\"host\": \"\", \"port\": \"389\", \"enable_tls\": \"no\"}}\n+\n+    invalid_server_config(servers, message=message, tail=16, timeout=timeout)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Invalid(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Host(\"1.0\")\n+)\n+def missing_host(self, tail=20, timeout=60):\n+    \"\"\"Check that server returns an error when LDAP server\n+    host is missing.\n+    \"\"\"\n+    node = current().context.node\n+    message = \"DB::Exception: Missing 'host' entry\"\n+\n+    servers = {\"foo\": {\"port\": \"389\", \"enable_tls\": \"no\"}}\n+    users = [{\n+        \"server\": \"foo\", \"username\": \"user1\", \"password\": \"user1\", \"login\": True,\n+        \"exitcode\": 36, \"message\": \"DB::Exception: LDAP server 'foo' is not configured.\"\n+    }]\n+\n+    with Given(\"I prepare the error log by writting empty lines into it\"):\n+        node.command(\"echo -e \\\"%s\\\" > /var/log/clickhouse-server/clickhouse-server.err.log\" % (\"-\\\\n\" * tail))\n+\n+    with ldap_servers(servers):\n+        with Then(\"server shall fail to merge the new config\"):\n+            started = time.time()\n+            command = f\"tail -n {tail} /var/log/clickhouse-server/clickhouse-server.err.log | grep \\\"{message}\\\"\"\n+            while time.time() - started < timeout:\n+                exitcode = node.command(command, steps=False).exitcode\n+                if exitcode == 0:\n+                    break\n+                time.sleep(1)\n+            assert exitcode == 0, error()\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Invalid(\"1.0\"),\n+)\n+def invalid_port(self):\n+    \"\"\"Check that server returns an error when LDAP server\n+    port is not valid.\n+    \"\"\"\n+    servers = {\"openldap1\": {\"host\": \"openldap1\", \"port\": \"3890\", \"enable_tls\": \"no\"}}\n+    users = [{\n+        \"server\": \"openldap1\", \"username\": \"user1\", \"password\": \"user1\", \"login\": True,\n+        \"exitcode\": 4, \"message\": \"DB::Exception: user1: Authentication failed: password is incorrect or there is no user with such name.\"\n+    }]\n+    login(servers, \"openldap1\", *users)\n+\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Invalid(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_AuthDN_Prefix(\"1.0\")\n+)\n+def invalid_auth_dn_prefix(self):\n+    \"\"\"Check that server returns an error when LDAP server definition\n+    has invalid auth_dn_prefix.\n+    \"\"\"\n+    servers = {\"openldap1\": {\"host\": \"openldap1\", \"port\": \"389\", \"enable_tls\": \"no\",\n+        \"auth_dn_prefix\": \"foo=\", \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\"\n+    }}\n+    users = [{\n+        \"server\": \"openldap1\", \"username\": \"user1\", \"password\": \"user1\", \"login\": True,\n+        \"exitcode\": 4, \"message\": \"DB::Exception: user1: Authentication failed: password is incorrect or there is no user with such name.\"\n+    }]\n+    login(servers, \"openldap1\", *users)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Invalid(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_AuthDN_Suffix(\"1.0\")\n+)\n+def invalid_auth_dn_suffix(self):\n+    \"\"\"Check that server returns an error when LDAP server definition\n+    has invalid auth_dn_suffix.\n+    \"\"\"\n+    servers = {\"openldap1\": {\"host\": \"openldap1\", \"port\": \"389\", \"enable_tls\": \"no\",\n+        \"auth_dn_prefix\": \"cn=\", \"auth_dn_suffix\": \",foo=users,dc=company,dc=com\"\n+    }}\n+    users = [{\n+        \"server\": \"openldap1\", \"username\": \"user1\", \"password\": \"user1\", \"login\": True,\n+        \"exitcode\": 4, \"message\": \"DB::Exception: user1: Authentication failed: password is incorrect or there is no user with such name.\"\n+    }]\n+    login(servers, \"openldap1\", *users)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Invalid(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_EnableTLS(\"1.0\")\n+)\n+def invalid_enable_tls_value(self, timeout=60):\n+    \"\"\"Check that server returns an error when enable_tls\n+    option has invalid value.\n+    \"\"\"\n+    message = \"Syntax error: Cannot convert to boolean: foo\"\n+    servers = {\"openldap1\": {\"host\": \"openldap1\", \"port\": \"389\", \"enable_tls\": \"foo\",\n+        \"auth_dn_prefix\": \"cn=\", \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\"\n+    }}\n+    invalid_server_config(servers, message=message, tail=17, timeout=timeout)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Invalid(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSRequireCert(\"1.0\")\n+)\n+def invalid_tls_require_cert_value(self):\n+    \"\"\"Check that server returns an error when tls_require_cert\n+    option has invalid value.\n+    \"\"\"\n+    servers = {\"openldap2\": {\n+        \"host\": \"openldap2\", \"port\": \"636\", \"enable_tls\": \"yes\",\n+        \"auth_dn_prefix\": \"cn=\", \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\",\n+        \"tls_require_cert\": \"foo\",\n+        \"ca_cert_dir\": \"/container/service/slapd/assets/certs/\",\n+        \"ca_cert_file\": \"/container/service/slapd/assets/certs/ca.crt\"\n+    }}\n+    users = [{\n+        \"server\": \"openldap2\", \"username\": \"user2\", \"password\": \"user2\", \"login\": True,\n+        \"exitcode\": 4, \"message\": \"DB::Exception: user2: Authentication failed: password is incorrect or there is no user with such name.\"\n+    }]\n+    login(servers, \"openldap2\", *users)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Invalid(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSCACertDir(\"1.0\")\n+)\n+def empty_ca_cert_dir(self):\n+    \"\"\"Check that server returns an error when ca_cert_dir is empty.\n+    \"\"\"\n+    servers = {\"openldap2\": {\"host\": \"openldap2\", \"port\": \"636\", \"enable_tls\": \"yes\",\n+        \"auth_dn_prefix\": \"cn=\", \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\",\n+        \"tls_require_cert\": \"demand\",\n+        \"ca_cert_dir\": \"\",\n+        \"ca_cert_file\": \"/container/service/slapd/assets/certs/ca.crt\"\n+    }}\n+    users = [{\n+        \"server\": \"openldap2\", \"username\": \"user2\", \"password\": \"user2\", \"login\": True,\n+        \"exitcode\": 4,\n+        \"message\": \"DB::Exception: user2: Authentication failed: password is incorrect or there is no user with such name\"\n+    }]\n+    login(servers, \"openldap2\", *users)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Invalid(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSCertFile(\"1.0\")\n+)\n+def empty_ca_cert_file(self):\n+    \"\"\"Check that server returns an error when ca_cert_file is empty.\n+    \"\"\"\n+    servers = {\"openldap2\": {\"host\": \"openldap2\", \"port\": \"636\", \"enable_tls\": \"yes\",\n+        \"auth_dn_prefix\": \"cn=\", \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\",\n+        \"tls_require_cert\": \"demand\",\n+        \"ca_cert_dir\": \"/container/service/slapd/assets/certs/\",\n+        \"ca_cert_file\": \"\"\n+    }}\n+    users = [{\n+        \"server\": \"openldap2\", \"username\": \"user2\", \"password\": \"user2\", \"login\": True,\n+        \"exitcode\": 4,\n+        \"message\": \"DB::Exception: user2: Authentication failed: password is incorrect or there is no user with such name.\"\n+    }]\n+    login(servers, \"openldap2\", *users)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_AuthDN_Value(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_AuthDN_Prefix(\"1.0\"),\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_AuthDN_Suffix(\"1.0\")\n+)\n+def auth_dn_value(self):\n+    \"\"\"Check that server configuration can properly define the `dn` value of the user.\"\"\"\n+    servers = {\n+        \"openldap1\": {\n+            \"host\": \"openldap1\", \"port\": \"389\", \"enable_tls\": \"no\",\n+            \"auth_dn_prefix\": \"cn=\", \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\"\n+        }}\n+    user = {\"server\": \"openldap1\", \"username\": \"user1\", \"password\": \"user1\", \"login\": True}\n+\n+    login(servers, \"openldap1\", user)\n+\n+@TestScenario\n+@Requirements(\n+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Syntax(\"1.0\")\n+)\n+def syntax(self):\n+    \"\"\"Check that server configuration with valid syntax can be loaded.\n+    ```xml\n+    <yandex>\n+        <ldap_server>\n+            <host>localhost</host>\n+            <port>636</port>\n+            <auth_dn_prefix>cn=</auth_dn_prefix>\n+            <auth_dn_suffix>, ou=users, dc=example, dc=com</auth_dn_suffix>\n+            <enable_tls>yes</enable_tls>\n+            <tls_minimum_protocol_version>tls1.2</tls_minimum_protocol_version>\n+            <tls_require_cert>demand</tls_require_cert>\n+            <tls_cert_file>/path/to/tls_cert_file</tls_cert_file>\n+            <tls_key_file>/path/to/tls_key_file</tls_key_file>\n+            <tls_ca_cert_file>/path/to/tls_ca_cert_file</tls_ca_cert_file>\n+            <tls_ca_cert_dir>/path/to/tls_ca_cert_dir</tls_ca_cert_dir>\n+            <tls_cipher_suite>ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:AES256-GCM-SHA384</tls_cipher_suite>\n+        </ldap_server>\n+    </yandex>\n+    ```\n+    \"\"\"\n+    servers = {\n+        \"openldap2\": {\n+            \"host\": \"openldap2\",\n+            \"port\": \"389\",\n+            \"auth_dn_prefix\": \"cn=\",\n+            \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\",\n+            \"enable_tls\": \"yes\",\n+            \"tls_minimum_protocol_version\": \"tls1.2\" ,\n+            \"tls_require_cert\": \"demand\",\n+            \"tls_cert_file\": \"/container/service/slapd/assets/certs/ldap.crt\",\n+            \"tls_key_file\": \"/container/service/slapd/assets/certs/ldap.key\",\n+            \"tls_ca_cert_file\": \"/container/service/slapd/assets/certs/ca.crt\",\n+            \"tls_ca_cert_dir\": \"/container/service/slapd/assets/certs/\",\n+            \"tls_cipher_suite\": \"ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:AES256-GCM-SHA384\"\n+        }\n+    }\n+    with ldap_servers(servers):\n+        pass\n+\n+@TestFeature\n+@Name(\"server config\")\n+def feature(self, node=\"clickhouse1\"):\n+    \"\"\"Check LDAP server configuration.\n+    \"\"\"\n+    self.context.node = self.context.cluster.node(node)\n+    for scenario in loads(current_module(), Scenario):\n+        scenario()\ndiff --git a/tests/testflows/ldap/external_user_directory/tests/simple.py b/tests/testflows/ldap/external_user_directory/tests/simple.py\nnew file mode 100644\nindex 000000000000..c48048833c72\n--- /dev/null\n+++ b/tests/testflows/ldap/external_user_directory/tests/simple.py\n@@ -0,0 +1,24 @@\n+from testflows.core import *\n+from testflows.asserts import error\n+\n+from ldap.external_user_directory.tests.common import login\n+\n+@TestScenario\n+@Name(\"simple\")\n+def scenario(self, node=\"clickhouse1\"):\n+    \"\"\"Check that an LDAP external user directory can be used to authenticate a user.\n+    \"\"\"\n+    self.context.node = self.context.cluster.node(node)\n+    servers = {\n+        \"openldap1\": {\n+            \"host\": \"openldap1\",\n+            \"port\": \"389\",\n+            \"enable_tls\": \"no\",\n+            \"auth_dn_prefix\": \"cn=\",\n+            \"auth_dn_suffix\": \",ou=users,dc=company,dc=com\"\n+        },\n+    }\n+    users = [\n+        {\"server\": \"openldap1\", \"username\": \"user1\", \"password\": \"user1\", \"login\": True},\n+    ]\n+    login(servers, \"openldap1\", *users)\ndiff --git a/tests/testflows/ldap/regression.py b/tests/testflows/ldap/regression.py\nindex 567807fc0a84..0e9d06cf84a8 100755\n--- a/tests/testflows/ldap/regression.py\n+++ b/tests/testflows/ldap/regression.py\n@@ -2,53 +2,20 @@\n import sys\n from testflows.core import *\n \n-append_path(sys.path, \"..\") \n+append_path(sys.path, \"..\")\n \n-from helpers.cluster import Cluster\n from helpers.argparser import argparser\n-from ldap.requirements import *\n \n-# Cross-outs of known fails\n-xfails = {\n-    \"connection protocols/tls/tls_require_cert='try'\":\n-     [(Fail, \"can't be tested with self-signed certificates\")],\n-    \"connection protocols/tls/tls_require_cert='demand'\":\n-     [(Fail, \"can't be tested with self-signed certificates\")],\n-    \"connection protocols/starttls/tls_require_cert='try'\":\n-     [(Fail, \"can't be tested with self-signed certificates\")],\n-    \"connection protocols/starttls/tls_require_cert='demand'\":\n-     [(Fail, \"can't be tested with self-signed certificates\")],\n-    \"connection protocols/tls require cert default demand\":\n-     [(Fail, \"can't be tested with self-signed certificates\")],\n-    \"connection protocols/starttls with custom port\":\n-     [(Fail, \"it seems that starttls is not enabled by default on custom plain-text ports in LDAP server\")],\n-    \"connection protocols/tls cipher suite\":\n-     [(Fail, \"can't get it to work\")]\n-}\n-\n-@TestFeature\n-@Name(\"ldap authentication\")\n+@TestModule\n+@Name(\"ldap\")\n @ArgumentParser(argparser)\n-@Requirements(\n-    RQ_SRS_007_LDAP_Authentication(\"1.0\")\n-)\n-@XFails(xfails)\n def regression(self, local, clickhouse_binary_path):\n-    \"\"\"ClickHouse integration with LDAP regression module.\n+    \"\"\"ClickHouse LDAP integration regression module.\n     \"\"\"\n-    nodes = {\n-        \"clickhouse\": (\"clickhouse1\", \"clickhouse2\", \"clickhouse3\"),\n-    }\n- \n-    with Cluster(local, clickhouse_binary_path, nodes=nodes) as cluster:\n-        self.context.cluster = cluster\n+    args = {\"local\": local, \"clickhouse_binary_path\": clickhouse_binary_path}\n \n-        Scenario(run=load(\"ldap.tests.sanity\", \"scenario\"))\n-        Scenario(run=load(\"ldap.tests.multiple_servers\", \"scenario\"))\n-        Feature(run=load(\"ldap.tests.connections\", \"feature\"))\n-        Feature(run=load(\"ldap.tests.server_config\", \"feature\"))\n-        Feature(run=load(\"ldap.tests.user_config\", \"feature\"))\n-        Feature(run=load(\"ldap.tests.authentications\", \"feature\"))\n+    Feature(test=load(\"ldap.authentication.regression\", \"regression\"))(**args)\n+    Feature(test=load(\"ldap.external_user_directory.regression\", \"regression\"))(**args)\n \n if main():\n     regression()\n",
  "problem_statement": "\"Engines => Special => MaterializedView\": wrong text & link\nThe current documentation visible in the page \"[Engines => Special => MaterializedView](https://clickhouse.tech/docs/en/engines/table-engines/special/materializedview/)\" states the following:\r\n\r\n> Used for implementing materialized views (for more information, see [CREATE TABLE](https://clickhouse.tech/docs/en/sql-reference/statements/create/table/)).\r\n\r\nI think that both the text and the link are wrong as the page \"CREATE TABLE\" explains only how to use materialized \"columns\" in a normal table and not how to use a materialized view.\r\nThe correct text should be:\r\n\r\n> Used for implementing materialized views (for more information, see [CREATE VIEW](https://clickhouse.tech/docs/en/sql-reference/statements/create/view/))\n",
  "hints_text": "",
  "created_at": "2020-07-23T18:01:48Z",
  "modified_files": [
    "contrib/libhdfs3",
    "programs/server/config.xml",
    "src/Access/AccessControlManager.cpp",
    "src/Access/AccessControlManager.h",
    "src/Access/ExternalAuthenticators.cpp",
    "src/Access/ExternalAuthenticators.h",
    "src/Access/IAccessStorage.cpp",
    "src/Access/IAccessStorage.h",
    "b/src/Access/LDAPAccessStorage.cpp",
    "b/src/Access/LDAPAccessStorage.h",
    "src/Access/LDAPClient.cpp",
    "src/Access/LDAPClient.h",
    "src/Access/LDAPParams.h",
    "src/Access/MemoryAccessStorage.cpp",
    "src/Access/MultipleAccessStorage.cpp",
    "src/Access/MultipleAccessStorage.h",
    "src/Access/ya.make"
  ],
  "modified_test_files": [
    "tests/testflows/helpers/cluster.py",
    "tests/testflows/ldap/configs/clickhouse/config.xml",
    "b/tests/testflows/ldap/authentication/regression.py",
    "tests/testflows/ldap/requirements/requirements.md",
    "tests/testflows/ldap/tests/authentications.py",
    "tests/testflows/ldap/tests/common.py",
    "tests/testflows/ldap/tests/connections.py",
    "tests/testflows/ldap/tests/multiple_servers.py",
    "tests/testflows/ldap/tests/sanity.py",
    "tests/testflows/ldap/tests/server_config.py",
    "tests/testflows/ldap/tests/user_config.py",
    "b/tests/testflows/ldap/external_user_directory/configs/CA/ca.crt",
    "b/tests/testflows/ldap/external_user_directory/configs/CA/ca.key",
    "b/tests/testflows/ldap/external_user_directory/configs/CA/ca.srl",
    "b/tests/testflows/ldap/external_user_directory/configs/CA/dhparam.pem",
    "b/tests/testflows/ldap/external_user_directory/configs/CA/passphrase.txt",
    "b/tests/testflows/ldap/external_user_directory/configs/clickhouse/common.xml",
    "b/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/logs.xml",
    "b/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/ports.xml",
    "b/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/remote.xml",
    "b/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/ssl.xml",
    "b/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/storage.xml",
    "b/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/zookeeper.xml",
    "b/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.xml",
    "b/tests/testflows/ldap/external_user_directory/configs/clickhouse/ssl/dhparam.pem",
    "b/tests/testflows/ldap/external_user_directory/configs/clickhouse/ssl/server.crt",
    "b/tests/testflows/ldap/external_user_directory/configs/clickhouse/ssl/server.key",
    "b/tests/testflows/ldap/external_user_directory/configs/clickhouse/users.xml",
    "b/tests/testflows/ldap/external_user_directory/configs/clickhouse1/config.d/macros.xml",
    "b/tests/testflows/ldap/external_user_directory/configs/clickhouse2/config.d/macros.xml",
    "b/tests/testflows/ldap/external_user_directory/configs/clickhouse3/config.d/macros.xml",
    "b/tests/testflows/ldap/external_user_directory/configs/ldap1/config/export.ldif",
    "b/tests/testflows/ldap/external_user_directory/configs/ldap2/certs/ca.crt",
    "b/tests/testflows/ldap/external_user_directory/configs/ldap2/certs/dhparam.pem",
    "b/tests/testflows/ldap/external_user_directory/configs/ldap2/certs/ldap.crt",
    "b/tests/testflows/ldap/external_user_directory/configs/ldap2/certs/ldap.csr",
    "b/tests/testflows/ldap/external_user_directory/configs/ldap2/certs/ldap.key",
    "b/tests/testflows/ldap/external_user_directory/configs/ldap2/config/export.ldif",
    "b/tests/testflows/ldap/external_user_directory/configs/ldap3/certs/ca.crt",
    "b/tests/testflows/ldap/external_user_directory/configs/ldap3/certs/dhparam.pem",
    "b/tests/testflows/ldap/external_user_directory/configs/ldap3/certs/ldap.crt",
    "b/tests/testflows/ldap/external_user_directory/configs/ldap3/certs/ldap.csr",
    "b/tests/testflows/ldap/external_user_directory/configs/ldap3/certs/ldap.key",
    "b/tests/testflows/ldap/external_user_directory/configs/ldap3/config/export.ldif",
    "b/tests/testflows/ldap/external_user_directory/configs/ldap4/certs/ca.crt",
    "b/tests/testflows/ldap/external_user_directory/configs/ldap4/certs/dhparam.pem",
    "b/tests/testflows/ldap/external_user_directory/configs/ldap4/certs/ldap.crt",
    "b/tests/testflows/ldap/external_user_directory/configs/ldap4/certs/ldap.csr",
    "b/tests/testflows/ldap/external_user_directory/configs/ldap4/certs/ldap.key",
    "b/tests/testflows/ldap/external_user_directory/configs/ldap4/config/export.ldif",
    "b/tests/testflows/ldap/external_user_directory/configs/ldap5/config/export.ldif",
    "b/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/certs/ca.crt",
    "b/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/certs/dhparam.pem",
    "b/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/certs/ldap.crt",
    "b/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/certs/ldap.csr",
    "b/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/certs/ldap.key",
    "b/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/config/export.ldif",
    "b/tests/testflows/ldap/external_user_directory/docker-compose/clickhouse-service.yml",
    "b/tests/testflows/ldap/external_user_directory/docker-compose/docker-compose.yml",
    "b/tests/testflows/ldap/external_user_directory/docker-compose/openldap-service.yml",
    "b/tests/testflows/ldap/external_user_directory/docker-compose/zookeeper-service.yml",
    "b/tests/testflows/ldap/external_user_directory/regression.py",
    "b/tests/testflows/ldap/external_user_directory/requirements/__init__.py",
    "b/tests/testflows/ldap/external_user_directory/requirements/requirements.md",
    "b/tests/testflows/ldap/external_user_directory/requirements/requirements.py",
    "b/tests/testflows/ldap/external_user_directory/tests/authentications.py",
    "b/tests/testflows/ldap/external_user_directory/tests/common.py",
    "b/tests/testflows/ldap/external_user_directory/tests/connections.py",
    "b/tests/testflows/ldap/external_user_directory/tests/external_user_directory_config.py",
    "b/tests/testflows/ldap/external_user_directory/tests/restart.py",
    "b/tests/testflows/ldap/external_user_directory/tests/roles.py",
    "b/tests/testflows/ldap/external_user_directory/tests/server_config.py",
    "b/tests/testflows/ldap/external_user_directory/tests/simple.py",
    "tests/testflows/ldap/regression.py"
  ]
}