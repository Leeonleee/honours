{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 73324,
  "instance_id": "ClickHouse__ClickHouse-73324",
  "issue_numbers": [
    "72879"
  ],
  "base_commit": "b99948340461fe0b809a0c72f4fb67c981ee48ad",
  "patch": "diff --git a/docs/en/sql-reference/functions/date-time-functions.md b/docs/en/sql-reference/functions/date-time-functions.md\nindex 2c563495777f..1ecb7922972f 100644\n--- a/docs/en/sql-reference/functions/date-time-functions.md\n+++ b/docs/en/sql-reference/functions/date-time-functions.md\n@@ -4355,51 +4355,53 @@ Returns time and date values according to the determined format.\n \n Using replacement fields, you can define a pattern for the resulting string. \u201cExample\u201d column shows formatting result for `2018-01-02 22:33:44`.\n \n-| Placeholder | Description                                          | Example    |\n-|----------|---------------------------------------------------------|------------|\n-| %a       | abbreviated weekday name (Mon-Sun)                      | Mon        |\n-| %b       | abbreviated month name (Jan-Dec)                        | Jan        |\n-| %c       | month as an integer number (01-12), see 'Note 3' below  | 01         |\n-| %C       | year divided by 100 and truncated to integer (00-99)    | 20         |\n-| %d       | day of the month, zero-padded (01-31)                   | 02         |\n-| %D       | Short MM/DD/YY date, equivalent to %m/%d/%y             | 01/02/18   |\n-| %e       | day of the month, space-padded (1-31)                   | &nbsp; 2   |\n-| %f       | fractional second, see 'Note 1' below                   | 1234560    |\n-| %F       | short YYYY-MM-DD date, equivalent to %Y-%m-%d           | 2018-01-02 |\n-| %g       | two-digit year format, aligned to ISO 8601, abbreviated from four-digit notation                                | 18       |\n-| %G       | four-digit year format for ISO week number, calculated from the week-based year [defined by the ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Week_dates) standard, normally useful only with %V  | 2018         |\n-| %h       | hour in 12h format (01-12)                              | 09         |\n-| %H       | hour in 24h format (00-23)                              | 22         |\n-| %i       | minute (00-59)                                          | 33         |\n-| %I       | hour in 12h format (01-12)                              | 10         |\n-| %j       | day of the year (001-366)                               | 002        |\n-| %k       | hour in 24h format (00-23), see 'Note 3' below          | 14         |\n-| %l       | hour in 12h format (01-12), see 'Note 3' below          | 09         |\n-| %m       | month as an integer number (01-12)                      | 01         |\n-| %M       | full month name (January-December), see 'Note 2' below  | January    |\n-| %n       | new-line character (\u2018\u2019)                                 |            |\n-| %p       | AM or PM designation                                    | PM         |\n-| %Q       | Quarter (1-4)                                           | 1          |\n-| %r       | 12-hour HH:MM AM/PM time, equivalent to %h:%i %p        | 10:30 PM   |\n-| %R       | 24-hour HH:MM time, equivalent to %H:%i                 | 22:33      |\n-| %s       | second (00-59)                                          | 44         |\n-| %S       | second (00-59)                                          | 44         |\n-| %t       | horizontal-tab character (\u2019)                            |            |\n-| %T       | ISO 8601 time format (HH:MM:SS), equivalent to %H:%i:%S | 22:33:44   |\n-| %u       | ISO 8601 weekday as number with Monday as 1 (1-7)       | 2          |\n-| %V       | ISO 8601 week number (01-53)                            | 01         |\n-| %w       | weekday as a integer number with Sunday as 0 (0-6)      | 2          |\n-| %W       | full weekday name (Monday-Sunday)                       | Monday     |\n-| %y       | Year, last two digits (00-99)                           | 18         |\n-| %Y       | Year                                                    | 2018       |\n-| %z       | Time offset from UTC as +HHMM or -HHMM                  | -0500      |\n-| %%       | a % sign                                                | %          |\n+| Placeholder | Description                                                                                                                                                                                         | Example   |\n+|----------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|\n+| %a       | abbreviated weekday name (Mon-Sun)                                                                                                                                                                  | Mon       |\n+| %b       | abbreviated month name (Jan-Dec)                                                                                                                                                                    | Jan       |\n+| %c       | month as an integer number (01-12), see 'Note 4' below                                                                                                                                              | 01        |\n+| %C       | year divided by 100 and truncated to integer (00-99)                                                                                                                                                | 20        |\n+| %d       | day of the month, zero-padded (01-31)                                                                                                                                                               | 02        |\n+| %D       | Short MM/DD/YY date, equivalent to %m/%d/%y                                                                                                                                                         | 01/02/18  |\n+| %e       | day of the month, space-padded (1-31)                                                                                                                                                               | &nbsp; 2  |\n+| %f       | fractional second, see 'Note 1' and 'Note 2' below                                                                                                                                                  | 123456    |\n+| %F       | short YYYY-MM-DD date, equivalent to %Y-%m-%d                                                                                                                                                       | 2018-01-02 |\n+| %g       | two-digit year format, aligned to ISO 8601, abbreviated from four-digit notation                                                                                                                    | 18       |\n+| %G       | four-digit year format for ISO week number, calculated from the week-based year [defined by the ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Week_dates) standard, normally useful only with %V | 2018        |\n+| %h       | hour in 12h format (01-12)                                                                                                                                                                          | 09        |\n+| %H       | hour in 24h format (00-23)                                                                                                                                                                          | 22        |\n+| %i       | minute (00-59)                                                                                                                                                                                      | 33        |\n+| %I       | hour in 12h format (01-12)                                                                                                                                                                          | 10        |\n+| %j       | day of the year (001-366)                                                                                                                                                                           | 002       |\n+| %k       | hour in 24h format (00-23), see 'Note 4' below                                                                                                                                                      | 14        |\n+| %l       | hour in 12h format (01-12), see 'Note 4' below                                                                                                                                                      | 09        |\n+| %m       | month as an integer number (01-12)                                                                                                                                                                  | 01        |\n+| %M       | full month name (January-December), see 'Note 3' below                                                                                                                                              | January   |\n+| %n       | new-line character (\u2018\u2019)                                                                                                                                                                             |           |\n+| %p       | AM or PM designation                                                                                                                                                                                | PM        |\n+| %Q       | Quarter (1-4)                                                                                                                                                                                       | 1         |\n+| %r       | 12-hour HH:MM AM/PM time, equivalent to %h:%i %p                                                                                                                                                    | 10:30 PM  |\n+| %R       | 24-hour HH:MM time, equivalent to %H:%i                                                                                                                                                             | 22:33     |\n+| %s       | second (00-59)                                                                                                                                                                                      | 44        |\n+| %S       | second (00-59)                                                                                                                                                                                      | 44        |\n+| %t       | horizontal-tab character (\u2019)                                                                                                                                                                        |           |\n+| %T       | ISO 8601 time format (HH:MM:SS), equivalent to %H:%i:%S                                                                                                                                             | 22:33:44  |\n+| %u       | ISO 8601 weekday as number with Monday as 1 (1-7)                                                                                                                                                   | 2         |\n+| %V       | ISO 8601 week number (01-53)                                                                                                                                                                        | 01        |\n+| %w       | weekday as a integer number with Sunday as 0 (0-6)                                                                                                                                                  | 2         |\n+| %W       | full weekday name (Monday-Sunday)                                                                                                                                                                   | Monday    |\n+| %y       | Year, last two digits (00-99)                                                                                                                                                                       | 18        |\n+| %Y       | Year                                                                                                                                                                                                | 2018      |\n+| %z       | Time offset from UTC as +HHMM or -HHMM                                                                                                                                                              | -0500     |\n+| %%       | a % sign                                                                                                                                                                                            | %         |\n \n Note 1: In ClickHouse versions earlier than v23.4, `%f` prints a single zero (0) if the formatted value is a Date, Date32 or DateTime (which have no fractional seconds) or a DateTime64 with a precision of 0. The previous behavior can be restored using setting `formatdatetime_f_prints_single_zero = 1`.\n \n-Note 2: In ClickHouse versions earlier than v23.4, `%M` prints the minute (00-59) instead of the full month name (January-December). The previous behavior can be restored using setting `formatdatetime_parsedatetime_m_is_month_name = 0`.\n+Note 2: In ClickHouse versions earlier than v25.1, `%f` prints as many digits as specified by the scale of the DateTime64 instead of fixed 6 digits. The previous behavior can be restored using setting `formatdatetime_f_prints_scale_number_of_digits= 1`.\n \n-Note 3: In ClickHouse versions earlier than v23.11, function `parseDateTime()` required leading zeros for formatters `%c` (month) and `%l`/`%k` (hour), e.g. `07`. In later versions, the leading zero may be omitted, e.g. `7`. The previous behavior can be restored using setting `parsedatetime_parse_without_leading_zeros = 0`. Note that function `formatDateTime()` by default still prints leading zeros for `%c` and `%l`/`%k` to not break existing use cases. This behavior can be changed by setting `formatdatetime_format_without_leading_zeros = 1`.\n+Note 3: In ClickHouse versions earlier than v23.4, `%M` prints the minute (00-59) instead of the full month name (January-December). The previous behavior can be restored using setting `formatdatetime_parsedatetime_m_is_month_name = 0`.\n+\n+Note 4: In ClickHouse versions earlier than v23.11, function `parseDateTime()` required leading zeros for formatters `%c` (month) and `%l`/`%k` (hour), e.g. `07`. In later versions, the leading zero may be omitted, e.g. `7`. The previous behavior can be restored using setting `parsedatetime_parse_without_leading_zeros = 0`. Note that function `formatDateTime()` by default still prints leading zeros for `%c` and `%l`/`%k` to not break existing use cases. This behavior can be changed by setting `formatdatetime_format_without_leading_zeros = 1`.\n \n **Example**\n \ndiff --git a/src/Core/Settings.cpp b/src/Core/Settings.cpp\nindex 8f8e7a7e6b3d..073d40d9d5ec 100644\n--- a/src/Core/Settings.cpp\n+++ b/src/Core/Settings.cpp\n@@ -3159,6 +3159,9 @@ Allow execute multiIf function columnar\n )\", 0) \\\n     DECLARE(Bool, formatdatetime_f_prints_single_zero, false, R\"(\n Formatter '%f' in function 'formatDateTime' prints a single zero instead of six zeros if the formatted value has no fractional seconds.\n+)\", 0) \\\n+    DECLARE(Bool, formatdatetime_f_prints_scale_number_of_digits, false, R\"(\n+Formatter '%f' in function 'formatDateTime' prints only the scale amount of digits for a DateTime64 instead of fixed 6 digits.\n )\", 0) \\\n     DECLARE(Bool, formatdatetime_parsedatetime_m_is_month_name, true, R\"(\n Formatter '%M' in functions 'formatDateTime' and 'parseDateTime' print/parse the month name instead of minutes.\ndiff --git a/src/Core/SettingsChangesHistory.cpp b/src/Core/SettingsChangesHistory.cpp\nindex 54ddc7abdf2d..86f2965d50d2 100644\n--- a/src/Core/SettingsChangesHistory.cpp\n+++ b/src/Core/SettingsChangesHistory.cpp\n@@ -67,6 +67,7 @@ const VersionToSettingsChangesMap & getSettingsChangesHistory()\n         addSettingsChanges(settings_changes_history, \"25.1\",\n         {\n             {\"allow_experimental_ts_to_grid_aggregate_function\", false, false, \"Cloud only\"},\n+            {\"formatdatetime_f_prints_scale_number_of_digits\", true, false, \"New setting.\"},\n             {\"distributed_cache_connect_max_tries\", 20, 20, \"Cloud only\"},\n             {\"distributed_cache_min_bytes_for_seek\", false, false, \"New private setting.\"},\n             {\"max_bytes_ratio_before_external_group_by\", 0.0, 0.5, \"Enable automatic spilling to disk by default.\"},\ndiff --git a/src/Functions/formatDateTime.cpp b/src/Functions/formatDateTime.cpp\nindex 602c99ee3697..2dbb2fc5c9be 100644\n--- a/src/Functions/formatDateTime.cpp\n+++ b/src/Functions/formatDateTime.cpp\n@@ -33,8 +33,9 @@ namespace DB\n {\n namespace Setting\n {\n-    extern const SettingsBool formatdatetime_format_without_leading_zeros;\n+    extern const SettingsBool formatdatetime_f_prints_scale_number_of_digits;\n     extern const SettingsBool formatdatetime_f_prints_single_zero;\n+    extern const SettingsBool formatdatetime_format_without_leading_zeros;\n     extern const SettingsBool formatdatetime_parsedatetime_m_is_month_name;\n }\n \n@@ -495,7 +496,26 @@ class FunctionFormatDateTimeImpl : public IFunction\n             return writeNumber2(dest, ToSecondImpl::execute(source, timezone));\n         }\n \n+        /// Always prints six digits (as specified by MySQL documentation)\n         size_t mysqlFractionalSecond(char * dest, Time /*source*/, UInt64 fractional_second, UInt32 scale, const DateLUTImpl & /*timezone*/)\n+        {\n+            /// Truncate to buffer size == 6 if more than 6 digits are passed in.\n+            while (scale > 6)\n+            {\n+                --scale;\n+                fractional_second /= 10;\n+            }\n+\n+            for (UInt32 i = scale, value = fractional_second; i > 0 && value > 0; --i)\n+            {\n+                dest[i - 1] += value % 10;\n+                value /= 10;\n+            }\n+            return 6;\n+        }\n+\n+        /// Prints the number of digits that were specified by the scale of the DateTime64. Legacy.\n+        size_t mysqlFractionalSecondScaleNumDigits(char * dest, Time /*source*/, UInt64 fractional_second, UInt32 scale, const DateLUTImpl & /*timezone*/)\n         {\n             if (scale == 0)\n                 scale = 6;\n@@ -508,7 +528,7 @@ class FunctionFormatDateTimeImpl : public IFunction\n             return scale;\n         }\n \n-        /// Same as mysqlFractionalSecond but prints a single zero if the value has no fractional seconds\n+        /// Same as mysqlFractionalSecondScaleNumDigits but prints a single zero if the value has no fractional seconds. Legacy.\n         size_t mysqlFractionalSecondSingleZero(char * dest, Time /*source*/, UInt64 fractional_second, UInt32 scale, const DateLUTImpl & /*timezone*/)\n         {\n             if (scale == 0)\n@@ -780,6 +800,7 @@ class FunctionFormatDateTimeImpl : public IFunction\n \n     const bool mysql_M_is_month_name;\n     const bool mysql_f_prints_single_zero;\n+    const bool mysql_f_prints_scale_number_of_digits;\n     const bool mysql_format_ckl_without_leading_zeros;\n \n public:\n@@ -790,6 +811,7 @@ class FunctionFormatDateTimeImpl : public IFunction\n     explicit FunctionFormatDateTimeImpl(ContextPtr context)\n         : mysql_M_is_month_name(context->getSettingsRef()[Setting::formatdatetime_parsedatetime_m_is_month_name])\n         , mysql_f_prints_single_zero(context->getSettingsRef()[Setting::formatdatetime_f_prints_single_zero])\n+        , mysql_f_prints_scale_number_of_digits(context->getSettingsRef()[Setting::formatdatetime_f_prints_scale_number_of_digits])\n         , mysql_format_ckl_without_leading_zeros(context->getSettingsRef()[Setting::formatdatetime_format_without_leading_zeros])\n     {\n     }\n@@ -1230,10 +1252,22 @@ class FunctionFormatDateTimeImpl : public IFunction\n                         }\n                         else\n                         {\n-                            Instruction<T> instruction;\n-                            instruction.setMysqlFunc(&Instruction<T>::mysqlFractionalSecond);\n-                            instructions.push_back(std::move(instruction));\n-                            out_template += String(scale == 0 ? 6 : scale, '0');\n+                            if (mysql_f_prints_scale_number_of_digits)\n+                            {\n+                                /// Print as many digits as specified by scale. Legacy behavior.\n+                                Instruction<T> instruction;\n+                                instruction.setMysqlFunc(&Instruction<T>::mysqlFractionalSecondScaleNumDigits);\n+                                instructions.push_back(std::move(instruction));\n+                                out_template += String(scale == 0 ? 6 : scale, '0');\n+                            }\n+                            else\n+                            {\n+                                /// Unconditionally print six digits (independent of scale). This is what MySQL does, may it live long and prosper.\n+                                Instruction<T> instruction;\n+                                instruction.setMysqlFunc(&Instruction<T>::mysqlFractionalSecond);\n+                                instructions.push_back(std::move(instruction));\n+                                out_template += String(6, '0');\n+                            }\n                         }\n                         break;\n                     }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00718_format_datetime.reference b/tests/queries/0_stateless/00718_format_datetime.reference\nindex f22c953e739d..43c630ac83b9 100644\n--- a/tests/queries/0_stateless/00718_format_datetime.reference\n+++ b/tests/queries/0_stateless/00718_format_datetime.reference\n@@ -48,9 +48,9 @@ no formatting pattern\tno formatting pattern\n 000000\n 000000\n 000000\n-123\n+123000\n+123456\n 123456\n-123456789\n 0\n 0\n 0\n@@ -58,8 +58,8 @@ no formatting pattern\tno formatting pattern\n 123\n 123456\n 123456789\n-2022-12-08 18:11:29.123400000\n-2022-12-08 18:11:29.1\n+2022-12-08 18:11:29.123400\n+2022-12-08 18:11:29.100000\n 2022-12-08 18:11:29.000000\n 2022-12-08 18:11:29.000000\n 2022-12-08 00:00:00.000000\ndiff --git a/tests/queries/0_stateless/00718_format_datetime_1.reference b/tests/queries/0_stateless/00718_format_datetime_1.reference\nindex e495b69ddfcc..78367f4cabb7 100644\n--- a/tests/queries/0_stateless/00718_format_datetime_1.reference\n+++ b/tests/queries/0_stateless/00718_format_datetime_1.reference\n@@ -1,5 +1,5 @@\n-1900-01-01 00:00:00.000\n-1962-12-08 18:11:29.123\n-1969-12-31 23:59:59.999\n-1970-01-01 00:00:00.000\n-1970-01-01 00:00:00.001\n+1900-01-01 00:00:00.000000\n+1962-12-08 18:11:29.123000\n+1969-12-31 23:59:59.999000\n+1970-01-01 00:00:00.000000\n+1970-01-01 00:00:00.001000\ndiff --git a/tests/queries/0_stateless/03287_format_datetime_mysqlfraction.reference b/tests/queries/0_stateless/03287_format_datetime_mysqlfraction.reference\nnew file mode 100644\nindex 000000000000..ccfbaa46a840\n--- /dev/null\n+++ b/tests/queries/0_stateless/03287_format_datetime_mysqlfraction.reference\n@@ -0,0 +1,14 @@\n+Default settings\n+123456\n+123456\n+123400\n+120000\n+100000\n+000000\n+Compatibility settings\n+12345678\n+123456\n+1234\n+12\n+1\n+000000\ndiff --git a/tests/queries/0_stateless/03287_format_datetime_mysqlfraction.sql b/tests/queries/0_stateless/03287_format_datetime_mysqlfraction.sql\nnew file mode 100644\nindex 000000000000..9ed5a1151df9\n--- /dev/null\n+++ b/tests/queries/0_stateless/03287_format_datetime_mysqlfraction.sql\n@@ -0,0 +1,17 @@\n+-- Test for issue #72879\n+\n+SELECT 'Default settings';\n+SELECT formatDateTime(toDateTime64('1970-01-01 00:00:00.12345678', 8, 'UTC'), '%f') SETTINGS formatdatetime_f_prints_scale_number_of_digits = 0;\n+SELECT formatDateTime(toDateTime64('1970-01-01 00:00:00.123456', 6, 'UTC'), '%f') SETTINGS formatdatetime_f_prints_scale_number_of_digits = 0;\n+SELECT formatDateTime(toDateTime64('1970-01-01 00:00:00.1234', 4, 'UTC'), '%f') SETTINGS formatdatetime_f_prints_scale_number_of_digits = 0;\n+SELECT formatDateTime(toDateTime64('1970-01-01 00:00:00.12', 2, 'UTC'), '%f') SETTINGS formatdatetime_f_prints_scale_number_of_digits = 0;\n+SELECT formatDateTime(toDateTime64('1970-01-01 00:00:00.1', 1, 'UTC'), '%f') SETTINGS formatdatetime_f_prints_scale_number_of_digits = 0;\n+SELECT formatDateTime(toDateTime64('1970-01-01 00:00:00', 0, 'UTC'), '%f') SETTINGS formatdatetime_f_prints_scale_number_of_digits = 0;\n+\n+SELECT 'Compatibility settings';\n+SELECT formatDateTime(toDateTime64('1970-01-01 00:00:00.12345678', 8, 'UTC'), '%f') SETTINGS formatdatetime_f_prints_scale_number_of_digits = 1;\n+SELECT formatDateTime(toDateTime64('1970-01-01 00:00:00.123456', 6, 'UTC'), '%f') SETTINGS formatdatetime_f_prints_scale_number_of_digits = 1;\n+SELECT formatDateTime(toDateTime64('1970-01-01 00:00:00.1234', 4, 'UTC'), '%f') SETTINGS formatdatetime_f_prints_scale_number_of_digits = 1;\n+SELECT formatDateTime(toDateTime64('1970-01-01 00:00:00.12', 2, 'UTC'), '%f') SETTINGS formatdatetime_f_prints_scale_number_of_digits = 1;\n+SELECT formatDateTime(toDateTime64('1970-01-01 00:00:00.1', 1, 'UTC'), '%f') SETTINGS formatdatetime_f_prints_scale_number_of_digits = 1;\n+SELECT formatDateTime(toDateTime64('1970-01-01 00:00:00', 0, 'UTC'), '%f') SETTINGS formatdatetime_f_prints_scale_number_of_digits = 1;\n",
  "problem_statement": "formatDateTime %f inconsistent depending on scale/precision\n**Company or project name**\r\n\r\nCribl\r\n\r\n**Describe what's wrong**\r\n\r\nWhen using `formatDateTime()`, the `%f` format doesn't conform to MySQL's definition.  It's supposed to be \"Microseconds (000000..999999)\" but the length seems to vary based on the scale/precision of the DateTime.\r\n\r\nEasily reproduced:\r\nhttps://fiddle.clickhouse.com/d17eb9b5-6cb0-4a7b-81c1-8163c799761c\r\n\r\n**Does it reproduce on the most recent release?**\r\n\r\nYes\r\n\r\n**How to reproduce**\r\n\r\nDoesn't matter which server version/interface/settings.  See the Fiddle link above, or just run:\r\n\r\n```sql\r\nselect\r\n    formatDateTime(toDateTime64(now(), 2), '%f'),\r\n    formatDateTime(toDateTime64(now(), 3), '%f'),\r\n    formatDateTime(toDateTime64(now(), 4), '%f'),\r\n    formatDateTime(now(), '%f')\r\n```\r\n\r\n**Expected behavior**\r\n\r\nI'd expect 6 digits every time irrespective of the date's precision.  i.e. `000000` just as MySQL documented it.\n",
  "hints_text": "",
  "created_at": "2024-12-14T03:20:54Z"
}