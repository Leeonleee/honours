diff --git a/docs/en/sql-reference/functions/date-time-functions.md b/docs/en/sql-reference/functions/date-time-functions.md
index 2c563495777f..1ecb7922972f 100644
--- a/docs/en/sql-reference/functions/date-time-functions.md
+++ b/docs/en/sql-reference/functions/date-time-functions.md
@@ -4355,51 +4355,53 @@ Returns time and date values according to the determined format.
 
 Using replacement fields, you can define a pattern for the resulting string. “Example” column shows formatting result for `2018-01-02 22:33:44`.
 
-| Placeholder | Description                                          | Example    |
-|----------|---------------------------------------------------------|------------|
-| %a       | abbreviated weekday name (Mon-Sun)                      | Mon        |
-| %b       | abbreviated month name (Jan-Dec)                        | Jan        |
-| %c       | month as an integer number (01-12), see 'Note 3' below  | 01         |
-| %C       | year divided by 100 and truncated to integer (00-99)    | 20         |
-| %d       | day of the month, zero-padded (01-31)                   | 02         |
-| %D       | Short MM/DD/YY date, equivalent to %m/%d/%y             | 01/02/18   |
-| %e       | day of the month, space-padded (1-31)                   | &nbsp; 2   |
-| %f       | fractional second, see 'Note 1' below                   | 1234560    |
-| %F       | short YYYY-MM-DD date, equivalent to %Y-%m-%d           | 2018-01-02 |
-| %g       | two-digit year format, aligned to ISO 8601, abbreviated from four-digit notation                                | 18       |
-| %G       | four-digit year format for ISO week number, calculated from the week-based year [defined by the ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Week_dates) standard, normally useful only with %V  | 2018         |
-| %h       | hour in 12h format (01-12)                              | 09         |
-| %H       | hour in 24h format (00-23)                              | 22         |
-| %i       | minute (00-59)                                          | 33         |
-| %I       | hour in 12h format (01-12)                              | 10         |
-| %j       | day of the year (001-366)                               | 002        |
-| %k       | hour in 24h format (00-23), see 'Note 3' below          | 14         |
-| %l       | hour in 12h format (01-12), see 'Note 3' below          | 09         |
-| %m       | month as an integer number (01-12)                      | 01         |
-| %M       | full month name (January-December), see 'Note 2' below  | January    |
-| %n       | new-line character (‘’)                                 |            |
-| %p       | AM or PM designation                                    | PM         |
-| %Q       | Quarter (1-4)                                           | 1          |
-| %r       | 12-hour HH:MM AM/PM time, equivalent to %h:%i %p        | 10:30 PM   |
-| %R       | 24-hour HH:MM time, equivalent to %H:%i                 | 22:33      |
-| %s       | second (00-59)                                          | 44         |
-| %S       | second (00-59)                                          | 44         |
-| %t       | horizontal-tab character (’)                            |            |
-| %T       | ISO 8601 time format (HH:MM:SS), equivalent to %H:%i:%S | 22:33:44   |
-| %u       | ISO 8601 weekday as number with Monday as 1 (1-7)       | 2          |
-| %V       | ISO 8601 week number (01-53)                            | 01         |
-| %w       | weekday as a integer number with Sunday as 0 (0-6)      | 2          |
-| %W       | full weekday name (Monday-Sunday)                       | Monday     |
-| %y       | Year, last two digits (00-99)                           | 18         |
-| %Y       | Year                                                    | 2018       |
-| %z       | Time offset from UTC as +HHMM or -HHMM                  | -0500      |
-| %%       | a % sign                                                | %          |
+| Placeholder | Description                                                                                                                                                                                         | Example   |
+|----------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|
+| %a       | abbreviated weekday name (Mon-Sun)                                                                                                                                                                  | Mon       |
+| %b       | abbreviated month name (Jan-Dec)                                                                                                                                                                    | Jan       |
+| %c       | month as an integer number (01-12), see 'Note 4' below                                                                                                                                              | 01        |
+| %C       | year divided by 100 and truncated to integer (00-99)                                                                                                                                                | 20        |
+| %d       | day of the month, zero-padded (01-31)                                                                                                                                                               | 02        |
+| %D       | Short MM/DD/YY date, equivalent to %m/%d/%y                                                                                                                                                         | 01/02/18  |
+| %e       | day of the month, space-padded (1-31)                                                                                                                                                               | &nbsp; 2  |
+| %f       | fractional second, see 'Note 1' and 'Note 2' below                                                                                                                                                  | 123456    |
+| %F       | short YYYY-MM-DD date, equivalent to %Y-%m-%d                                                                                                                                                       | 2018-01-02 |
+| %g       | two-digit year format, aligned to ISO 8601, abbreviated from four-digit notation                                                                                                                    | 18       |
+| %G       | four-digit year format for ISO week number, calculated from the week-based year [defined by the ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Week_dates) standard, normally useful only with %V | 2018        |
+| %h       | hour in 12h format (01-12)                                                                                                                                                                          | 09        |
+| %H       | hour in 24h format (00-23)                                                                                                                                                                          | 22        |
+| %i       | minute (00-59)                                                                                                                                                                                      | 33        |
+| %I       | hour in 12h format (01-12)                                                                                                                                                                          | 10        |
+| %j       | day of the year (001-366)                                                                                                                                                                           | 002       |
+| %k       | hour in 24h format (00-23), see 'Note 4' below                                                                                                                                                      | 14        |
+| %l       | hour in 12h format (01-12), see 'Note 4' below                                                                                                                                                      | 09        |
+| %m       | month as an integer number (01-12)                                                                                                                                                                  | 01        |
+| %M       | full month name (January-December), see 'Note 3' below                                                                                                                                              | January   |
+| %n       | new-line character (‘’)                                                                                                                                                                             |           |
+| %p       | AM or PM designation                                                                                                                                                                                | PM        |
+| %Q       | Quarter (1-4)                                                                                                                                                                                       | 1         |
+| %r       | 12-hour HH:MM AM/PM time, equivalent to %h:%i %p                                                                                                                                                    | 10:30 PM  |
+| %R       | 24-hour HH:MM time, equivalent to %H:%i                                                                                                                                                             | 22:33     |
+| %s       | second (00-59)                                                                                                                                                                                      | 44        |
+| %S       | second (00-59)                                                                                                                                                                                      | 44        |
+| %t       | horizontal-tab character (’)                                                                                                                                                                        |           |
+| %T       | ISO 8601 time format (HH:MM:SS), equivalent to %H:%i:%S                                                                                                                                             | 22:33:44  |
+| %u       | ISO 8601 weekday as number with Monday as 1 (1-7)                                                                                                                                                   | 2         |
+| %V       | ISO 8601 week number (01-53)                                                                                                                                                                        | 01        |
+| %w       | weekday as a integer number with Sunday as 0 (0-6)                                                                                                                                                  | 2         |
+| %W       | full weekday name (Monday-Sunday)                                                                                                                                                                   | Monday    |
+| %y       | Year, last two digits (00-99)                                                                                                                                                                       | 18        |
+| %Y       | Year                                                                                                                                                                                                | 2018      |
+| %z       | Time offset from UTC as +HHMM or -HHMM                                                                                                                                                              | -0500     |
+| %%       | a % sign                                                                                                                                                                                            | %         |
 
 Note 1: In ClickHouse versions earlier than v23.4, `%f` prints a single zero (0) if the formatted value is a Date, Date32 or DateTime (which have no fractional seconds) or a DateTime64 with a precision of 0. The previous behavior can be restored using setting `formatdatetime_f_prints_single_zero = 1`.
 
-Note 2: In ClickHouse versions earlier than v23.4, `%M` prints the minute (00-59) instead of the full month name (January-December). The previous behavior can be restored using setting `formatdatetime_parsedatetime_m_is_month_name = 0`.
+Note 2: In ClickHouse versions earlier than v25.1, `%f` prints as many digits as specified by the scale of the DateTime64 instead of fixed 6 digits. The previous behavior can be restored using setting `formatdatetime_f_prints_scale_number_of_digits= 1`.
 
-Note 3: In ClickHouse versions earlier than v23.11, function `parseDateTime()` required leading zeros for formatters `%c` (month) and `%l`/`%k` (hour), e.g. `07`. In later versions, the leading zero may be omitted, e.g. `7`. The previous behavior can be restored using setting `parsedatetime_parse_without_leading_zeros = 0`. Note that function `formatDateTime()` by default still prints leading zeros for `%c` and `%l`/`%k` to not break existing use cases. This behavior can be changed by setting `formatdatetime_format_without_leading_zeros = 1`.
+Note 3: In ClickHouse versions earlier than v23.4, `%M` prints the minute (00-59) instead of the full month name (January-December). The previous behavior can be restored using setting `formatdatetime_parsedatetime_m_is_month_name = 0`.
+
+Note 4: In ClickHouse versions earlier than v23.11, function `parseDateTime()` required leading zeros for formatters `%c` (month) and `%l`/`%k` (hour), e.g. `07`. In later versions, the leading zero may be omitted, e.g. `7`. The previous behavior can be restored using setting `parsedatetime_parse_without_leading_zeros = 0`. Note that function `formatDateTime()` by default still prints leading zeros for `%c` and `%l`/`%k` to not break existing use cases. This behavior can be changed by setting `formatdatetime_format_without_leading_zeros = 1`.
 
 **Example**
 
diff --git a/src/Core/Settings.cpp b/src/Core/Settings.cpp
index 8f8e7a7e6b3d..073d40d9d5ec 100644
--- a/src/Core/Settings.cpp
+++ b/src/Core/Settings.cpp
@@ -3159,6 +3159,9 @@ Allow execute multiIf function columnar
 )", 0) \
     DECLARE(Bool, formatdatetime_f_prints_single_zero, false, R"(
 Formatter '%f' in function 'formatDateTime' prints a single zero instead of six zeros if the formatted value has no fractional seconds.
+)", 0) \
+    DECLARE(Bool, formatdatetime_f_prints_scale_number_of_digits, false, R"(
+Formatter '%f' in function 'formatDateTime' prints only the scale amount of digits for a DateTime64 instead of fixed 6 digits.
 )", 0) \
     DECLARE(Bool, formatdatetime_parsedatetime_m_is_month_name, true, R"(
 Formatter '%M' in functions 'formatDateTime' and 'parseDateTime' print/parse the month name instead of minutes.
diff --git a/src/Core/SettingsChangesHistory.cpp b/src/Core/SettingsChangesHistory.cpp
index 54ddc7abdf2d..86f2965d50d2 100644
--- a/src/Core/SettingsChangesHistory.cpp
+++ b/src/Core/SettingsChangesHistory.cpp
@@ -67,6 +67,7 @@ const VersionToSettingsChangesMap & getSettingsChangesHistory()
         addSettingsChanges(settings_changes_history, "25.1",
         {
             {"allow_experimental_ts_to_grid_aggregate_function", false, false, "Cloud only"},
+            {"formatdatetime_f_prints_scale_number_of_digits", true, false, "New setting."},
             {"distributed_cache_connect_max_tries", 20, 20, "Cloud only"},
             {"distributed_cache_min_bytes_for_seek", false, false, "New private setting."},
             {"max_bytes_ratio_before_external_group_by", 0.0, 0.5, "Enable automatic spilling to disk by default."},
diff --git a/src/Functions/formatDateTime.cpp b/src/Functions/formatDateTime.cpp
index 602c99ee3697..2dbb2fc5c9be 100644
--- a/src/Functions/formatDateTime.cpp
+++ b/src/Functions/formatDateTime.cpp
@@ -33,8 +33,9 @@ namespace DB
 {
 namespace Setting
 {
-    extern const SettingsBool formatdatetime_format_without_leading_zeros;
+    extern const SettingsBool formatdatetime_f_prints_scale_number_of_digits;
     extern const SettingsBool formatdatetime_f_prints_single_zero;
+    extern const SettingsBool formatdatetime_format_without_leading_zeros;
     extern const SettingsBool formatdatetime_parsedatetime_m_is_month_name;
 }
 
@@ -495,7 +496,26 @@ class FunctionFormatDateTimeImpl : public IFunction
             return writeNumber2(dest, ToSecondImpl::execute(source, timezone));
         }
 
+        /// Always prints six digits (as specified by MySQL documentation)
         size_t mysqlFractionalSecond(char * dest, Time /*source*/, UInt64 fractional_second, UInt32 scale, const DateLUTImpl & /*timezone*/)
+        {
+            /// Truncate to buffer size == 6 if more than 6 digits are passed in.
+            while (scale > 6)
+            {
+                --scale;
+                fractional_second /= 10;
+            }
+
+            for (UInt32 i = scale, value = fractional_second; i > 0 && value > 0; --i)
+            {
+                dest[i - 1] += value % 10;
+                value /= 10;
+            }
+            return 6;
+        }
+
+        /// Prints the number of digits that were specified by the scale of the DateTime64. Legacy.
+        size_t mysqlFractionalSecondScaleNumDigits(char * dest, Time /*source*/, UInt64 fractional_second, UInt32 scale, const DateLUTImpl & /*timezone*/)
         {
             if (scale == 0)
                 scale = 6;
@@ -508,7 +528,7 @@ class FunctionFormatDateTimeImpl : public IFunction
             return scale;
         }
 
-        /// Same as mysqlFractionalSecond but prints a single zero if the value has no fractional seconds
+        /// Same as mysqlFractionalSecondScaleNumDigits but prints a single zero if the value has no fractional seconds. Legacy.
         size_t mysqlFractionalSecondSingleZero(char * dest, Time /*source*/, UInt64 fractional_second, UInt32 scale, const DateLUTImpl & /*timezone*/)
         {
             if (scale == 0)
@@ -780,6 +800,7 @@ class FunctionFormatDateTimeImpl : public IFunction
 
     const bool mysql_M_is_month_name;
     const bool mysql_f_prints_single_zero;
+    const bool mysql_f_prints_scale_number_of_digits;
     const bool mysql_format_ckl_without_leading_zeros;
 
 public:
@@ -790,6 +811,7 @@ class FunctionFormatDateTimeImpl : public IFunction
     explicit FunctionFormatDateTimeImpl(ContextPtr context)
         : mysql_M_is_month_name(context->getSettingsRef()[Setting::formatdatetime_parsedatetime_m_is_month_name])
         , mysql_f_prints_single_zero(context->getSettingsRef()[Setting::formatdatetime_f_prints_single_zero])
+        , mysql_f_prints_scale_number_of_digits(context->getSettingsRef()[Setting::formatdatetime_f_prints_scale_number_of_digits])
         , mysql_format_ckl_without_leading_zeros(context->getSettingsRef()[Setting::formatdatetime_format_without_leading_zeros])
     {
     }
@@ -1230,10 +1252,22 @@ class FunctionFormatDateTimeImpl : public IFunction
                         }
                         else
                         {
-                            Instruction<T> instruction;
-                            instruction.setMysqlFunc(&Instruction<T>::mysqlFractionalSecond);
-                            instructions.push_back(std::move(instruction));
-                            out_template += String(scale == 0 ? 6 : scale, '0');
+                            if (mysql_f_prints_scale_number_of_digits)
+                            {
+                                /// Print as many digits as specified by scale. Legacy behavior.
+                                Instruction<T> instruction;
+                                instruction.setMysqlFunc(&Instruction<T>::mysqlFractionalSecondScaleNumDigits);
+                                instructions.push_back(std::move(instruction));
+                                out_template += String(scale == 0 ? 6 : scale, '0');
+                            }
+                            else
+                            {
+                                /// Unconditionally print six digits (independent of scale). This is what MySQL does, may it live long and prosper.
+                                Instruction<T> instruction;
+                                instruction.setMysqlFunc(&Instruction<T>::mysqlFractionalSecond);
+                                instructions.push_back(std::move(instruction));
+                                out_template += String(6, '0');
+                            }
                         }
                         break;
                     }
