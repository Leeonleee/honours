{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 40185,
  "instance_id": "ClickHouse__ClickHouse-40185",
  "issue_numbers": [
    "28720"
  ],
  "base_commit": "8d1d2ecbfa0e06a212e52dd357a8fd2dc55233e5",
  "patch": "diff --git a/src/Functions/array/arrayElement.cpp b/src/Functions/array/arrayElement.cpp\nindex d3255d6412e8..a7b27bae2684 100644\n--- a/src/Functions/array/arrayElement.cpp\n+++ b/src/Functions/array/arrayElement.cpp\n@@ -475,10 +475,11 @@ ColumnPtr FunctionArrayElement::executeNumberConst(\n \n     auto col_res = ColumnVector<DataType>::create();\n \n-    if (index.getType() == Field::Types::UInt64)\n+    if (index.getType() == Field::Types::UInt64\n+        || (index.getType() == Field::Types::Int64 && get<Int64>(index) >= 0))\n     {\n         ArrayElementNumImpl<DataType>::template vectorConst<false>(\n-            col_nested->getData(), col_array->getOffsets(), safeGet<UInt64>(index) - 1, col_res->getData(), builder);\n+            col_nested->getData(), col_array->getOffsets(), get<UInt64>(index) - 1, col_res->getData(), builder);\n     }\n     else if (index.getType() == Field::Types::Int64)\n     {\n@@ -537,12 +538,13 @@ FunctionArrayElement::executeStringConst(const ColumnsWithTypeAndName & argument\n \n     auto col_res = ColumnString::create();\n \n-    if (index.getType() == Field::Types::UInt64)\n+    if (index.getType() == Field::Types::UInt64\n+        || (index.getType() == Field::Types::Int64 && get<Int64>(index) >= 0))\n         ArrayElementStringImpl::vectorConst<false>(\n             col_nested->getChars(),\n             col_array->getOffsets(),\n             col_nested->getOffsets(),\n-            safeGet<UInt64>(index) - 1,\n+            get<UInt64>(index) - 1,\n             col_res->getChars(),\n             col_res->getOffsets(),\n             builder);\n@@ -551,7 +553,7 @@ FunctionArrayElement::executeStringConst(const ColumnsWithTypeAndName & argument\n             col_nested->getChars(),\n             col_array->getOffsets(),\n             col_nested->getOffsets(),\n-            -(UInt64(safeGet<Int64>(index)) + 1),\n+            -(UInt64(get<Int64>(index)) + 1),\n             col_res->getChars(),\n             col_res->getOffsets(),\n             builder);\n@@ -600,12 +602,13 @@ ColumnPtr FunctionArrayElement::executeGenericConst(\n     const auto & col_nested = col_array->getData();\n     auto col_res = col_nested.cloneEmpty();\n \n-    if (index.getType() == Field::Types::UInt64)\n+    if (index.getType() == Field::Types::UInt64\n+        || (index.getType() == Field::Types::Int64 && get<Int64>(index) >= 0))\n         ArrayElementGenericImpl::vectorConst<false>(\n-            col_nested, col_array->getOffsets(), safeGet<UInt64>(index) - 1, *col_res, builder);\n+            col_nested, col_array->getOffsets(), get<UInt64>(index) - 1, *col_res, builder);\n     else if (index.getType() == Field::Types::Int64)\n         ArrayElementGenericImpl::vectorConst<true>(\n-            col_nested, col_array->getOffsets(), -(static_cast<UInt64>(safeGet<Int64>(index) + 1)), *col_res, builder);\n+            col_nested, col_array->getOffsets(), -(static_cast<UInt64>(get<Int64>(index) + 1)), *col_res, builder);\n     else\n         throw Exception(\"Illegal type of array index\", ErrorCodes::LOGICAL_ERROR);\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02383_array_signed_const_positive_index.reference b/tests/queries/0_stateless/02383_array_signed_const_positive_index.reference\nnew file mode 100644\nindex 000000000000..0d236990b8b4\n--- /dev/null\n+++ b/tests/queries/0_stateless/02383_array_signed_const_positive_index.reference\n@@ -0,0 +1,58 @@\n+-- { echo }\n+\n+SELECT materialize([[13]])[1::Int8];\n+[13]\n+SELECT materialize([['Hello']])[1::Int8];\n+['Hello']\n+SELECT materialize([13])[1::Int8];\n+13\n+SELECT materialize(['Hello'])[1::Int8];\n+Hello\n+SELECT materialize([[13], [14]])[2::Int8];\n+[14]\n+SELECT materialize([['Hello'], ['world']])[2::Int8];\n+['world']\n+SELECT materialize([13, 14])[2::Int8];\n+14\n+SELECT materialize(['Hello', 'world'])[2::Int8];\n+world\n+SELECT materialize([[13], [14]])[3::Int8];\n+[]\n+SELECT materialize([['Hello'], ['world']])[3::Int8];\n+[]\n+SELECT materialize([13, 14])[3::Int8];\n+0\n+SELECT materialize(['Hello', 'world'])[3::Int8];\n+\n+SELECT materialize([[13], [14]])[0::Int8];\n+[]\n+SELECT materialize([['Hello'], ['world']])[0::Int8];\n+[]\n+SELECT materialize([13, 14])[0::Int8];\n+0\n+SELECT materialize(['Hello', 'world'])[0::Int8];\n+\n+SELECT materialize([[13], [14]])[-1];\n+[14]\n+SELECT materialize([['Hello'], ['world']])[-1];\n+['world']\n+SELECT materialize([13, 14])[-1];\n+14\n+SELECT materialize(['Hello', 'world'])[-1];\n+world\n+SELECT materialize([[13], [14]])[-9223372036854775808];\n+[]\n+SELECT materialize([['Hello'], ['world']])[-9223372036854775808];\n+[]\n+SELECT materialize([13, 14])[-9223372036854775808];\n+0\n+SELECT materialize(['Hello', 'world'])[-9223372036854775808];\n+\n+SELECT materialize([[toNullable(13)], [14]])[-9223372036854775808];\n+[]\n+SELECT materialize([['Hello'], [toNullable('world')]])[-9223372036854775808];\n+[]\n+SELECT materialize([13, toNullable(14)])[-9223372036854775808];\n+\\N\n+SELECT materialize(['Hello', toLowCardinality('world')])[-9223372036854775808];\n+\ndiff --git a/tests/queries/0_stateless/02383_array_signed_const_positive_index.sql b/tests/queries/0_stateless/02383_array_signed_const_positive_index.sql\nnew file mode 100644\nindex 000000000000..4f92215f4c02\n--- /dev/null\n+++ b/tests/queries/0_stateless/02383_array_signed_const_positive_index.sql\n@@ -0,0 +1,36 @@\n+-- { echo }\n+\n+SELECT materialize([[13]])[1::Int8];\n+SELECT materialize([['Hello']])[1::Int8];\n+SELECT materialize([13])[1::Int8];\n+SELECT materialize(['Hello'])[1::Int8];\n+\n+SELECT materialize([[13], [14]])[2::Int8];\n+SELECT materialize([['Hello'], ['world']])[2::Int8];\n+SELECT materialize([13, 14])[2::Int8];\n+SELECT materialize(['Hello', 'world'])[2::Int8];\n+\n+SELECT materialize([[13], [14]])[3::Int8];\n+SELECT materialize([['Hello'], ['world']])[3::Int8];\n+SELECT materialize([13, 14])[3::Int8];\n+SELECT materialize(['Hello', 'world'])[3::Int8];\n+\n+SELECT materialize([[13], [14]])[0::Int8];\n+SELECT materialize([['Hello'], ['world']])[0::Int8];\n+SELECT materialize([13, 14])[0::Int8];\n+SELECT materialize(['Hello', 'world'])[0::Int8];\n+\n+SELECT materialize([[13], [14]])[-1];\n+SELECT materialize([['Hello'], ['world']])[-1];\n+SELECT materialize([13, 14])[-1];\n+SELECT materialize(['Hello', 'world'])[-1];\n+\n+SELECT materialize([[13], [14]])[-9223372036854775808];\n+SELECT materialize([['Hello'], ['world']])[-9223372036854775808];\n+SELECT materialize([13, 14])[-9223372036854775808];\n+SELECT materialize(['Hello', 'world'])[-9223372036854775808];\n+\n+SELECT materialize([[toNullable(13)], [14]])[-9223372036854775808];\n+SELECT materialize([['Hello'], [toNullable('world')]])[-9223372036854775808];\n+SELECT materialize([13, toNullable(14)])[-9223372036854775808];\n+SELECT materialize(['Hello', toLowCardinality('world')])[-9223372036854775808];\n",
  "problem_statement": "Different behavior when working with arrays\n```\r\nSELECT version()\r\n\u2500version()\u2500\u2510\r\n\u2502 21.8.5.7  \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\nWe have a request, as a result of which we get an array.\r\nWhen getting an item using a computed value, there is no value\r\n```\r\nSELECT\r\n    arrayMap(x -> x, [[1], [2], [3]]) AS x,\r\n    toTypeName(x),\r\n    x[3 - 2] AS y,\r\n    x[toInt64(1)] AS yy,\r\n    x[toUInt8(1)] AS yyy\r\n\r\n\u250c\u2500x\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500toTypeName(arrayMap(lambda(tuple(x), x), [[1], [2], [3]]))\u2500\u252c\u2500y\u2500\u2500\u252c\u2500yy\u2500\u252c\u2500yyy\u2500\u2510\r\n\u2502 [[1],[2],[3]] \u2502 Array(Array(UInt8))                                        \u2502 [] \u2502 [] \u2502 [1] \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\nHowever, when the array is explicitly specified, the value is present.\r\nThe types are the same.\r\n```\r\nSELECT\r\n    [[1], [2], [3]] AS x,\r\n    toTypeName(x),\r\n    x[3 - 2] AS y,\r\n    x[toInt64(1)] AS yy,\r\n    x[toInt8(1)] AS yyy\r\n\r\n\u250c\u2500x\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500toTypeName([[1], [2], [3]])\u2500\u252c\u2500y\u2500\u2500\u2500\u252c\u2500yy\u2500\u2500\u252c\u2500yyy\u2500\u2510\r\n\u2502 [[1],[2],[3]] \u2502 Array(Array(UInt8))         \u2502 [1] \u2502 [1] \u2502 [1] \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n\n",
  "hints_text": "Looks like his bug exists for a long time:\r\n21.3\r\n```\r\nConnected to ClickHouse server version 21.3.16 revision 54447.                                                                                                                                                                                                                                                                                                                                                                                                       \r\n521e2a23cf02 :) SELECT                                                                                                                                                                                                                        \r\n:-]     arrayMap(x -> x, [[1], [2], [3]]) AS x,                                                                                                                                                                                               \r\n:-]     toTypeName(x),                                                                                                                                                                                                                        \r\n:-]     x[3 - 2] AS y,\r\n:-]     x[toInt64(1)] AS yy,\r\n:-]     x[toUInt8(1)] AS yyy\r\n\r\nSELECT\r\n    arrayMap(x -> x, [[1], [2], [3]]) AS x,\r\n    toTypeName(x),\r\n    x[3 - 2] AS y,\r\n    x[toInt64(1)] AS yy,\r\n    x[toUInt8(1)] AS yyy\r\n\r\nQuery id: 72669b48-bdc0-4062-803b-52c5aa443cf6\r\n\r\n\u250c\u2500x\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500toTypeName(arrayMap(lambda(tuple(x), x), [[1], [2], [3]]))\u2500\u252c\u2500y\u2500\u2500\u252c\u2500yy\u2500\u252c\u2500yyy\u2500\u2510\r\n\u2502 [[1],[2],[3]] \u2502 Array(Array(UInt8))                                        \u2502 [] \u2502 [] \u2502 [1] \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n20.3\r\n```\r\nConnected to ClickHouse server version 20.3.21 revision 54433.\r\n\r\nclick.sas.yp-c.yandex.net :) SELECT\r\n:-]     arrayMap(x -> x, [[1], [2], [3]]) AS x,\r\n:-]     toTypeName(x),\r\n:-]     x[3 - 2] AS y,\r\n:-]     x[toInt64(1)] AS yy,\r\n:-]     x[toUInt8(1)] AS yyy\r\n\r\nSELECT \r\n    arrayMap(x -> x, [[1], [2], [3]]) AS x, \r\n    toTypeName(x), \r\n    x[3 - 2] AS y, \r\n    x[toInt64(1)] AS yy, \r\n    x[toUInt8(1)] AS yyy\r\n\r\n\u250c\u2500x\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500toTypeName(arrayMap(lambda(tuple(x), x), [[1], [2], [3]]))\u2500\u252c\u2500y\u2500\u2500\u252c\u2500yy\u2500\u252c\u2500yyy\u2500\u2510\r\n\u2502 [[1],[2],[3]] \u2502 Array(Array(UInt8))                                        \u2502 [] \u2502 [] \u2502 [1] \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 0.003 sec. \r\n```\r\n18.6\r\n```\r\nConnected to ClickHouse server version 18.6.0 revision 54401.\r\n\r\nclick.sas.yp-c.yandex.net :) SELECT\r\n:-]     arrayMap(x -> x, [[1], [2], [3]]) AS x,\r\n:-]     toTypeName(x),\r\n:-]     x[3 - 2] AS y,\r\n:-]     x[toInt64(1)] AS yy,\r\n:-]     x[toUInt8(1)] AS yyy\r\n\r\nSELECT\r\n    arrayMap(x -> x, [[1], [2], [3]]) AS x,\r\n    toTypeName(x),\r\n    x[3 - 2] AS y,\r\n    x[toInt64(1)] AS yy,\r\n    x[toUInt8(1)] AS yyy\r\n\r\nQuery id: dbd2744a-0600-4aa9-a70d-f02ef1e9550c\r\n\r\n\u250c\u2500x\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500toTypeName(arrayMap(lambda(tuple(x), x), array([1], [2], [3])))\u2500\u252c\u2500y\u2500\u2500\u252c\u2500yy\u2500\u252c\u2500yyy\u2500\u2510\r\n\u2502 [[1],[2],[3]] \u2502 Array(Array(UInt8))                                             \u2502 [] \u2502 [] \u2502 [1] \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\nI'll mark it as `minor`. Thank you for reporting such rare bug.\r\n\nwa\r\n\r\n```\r\nSELECT\r\n    arrayMap(x -> x, [[1], [2], [3]]) AS x,\r\n    toTypeName(x),\r\n    x[materialize(3 - 2)] AS y,\r\n    x[materialize(toInt64(1))] AS yy,\r\n    x[materialize(toUInt8(1))] AS yyy\r\n\r\n\u250c\u2500x\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500toTypeName(arrayMap(lambda(tuple(x), x), [[1], [2], [3]]))\u2500\u252c\u2500y\u2500\u2500\u2500\u252c\u2500yy\u2500\u2500\u252c\u2500yyy\u2500\u2510\r\n\u2502 [[1],[2],[3]] \u2502 Array(Array(UInt8))                                        \u2502 [1] \u2502 [1] \u2502 [1] \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\n`SELECT materialize([[1]])[1::Int8]`",
  "created_at": "2022-08-13T06:05:41Z",
  "modified_files": [
    "src/Functions/array/arrayElement.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02383_array_signed_const_positive_index.reference",
    "b/tests/queries/0_stateless/02383_array_signed_const_positive_index.sql"
  ]
}