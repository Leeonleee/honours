{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 81885,
  "instance_id": "ClickHouse__ClickHouse-81885",
  "issue_numbers": [
    "81643"
  ],
  "base_commit": "85103187a72fb4013c4bf9ca9da2ee7587f1f1e0",
  "patch": "diff --git a/src/DataTypes/Serializations/SerializationBool.h b/src/DataTypes/Serializations/SerializationBool.h\nindex deab26304e4b..a0bd1e6cc3f6 100644\n--- a/src/DataTypes/Serializations/SerializationBool.h\n+++ b/src/DataTypes/Serializations/SerializationBool.h\n@@ -33,9 +33,9 @@ class SerializationBool final : public SerializationWrapper\n     void deserializeTextRaw(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const override;\n     bool tryDeserializeTextRaw(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const override;\n \n-    void serializeTextQuoted(const IColumn & column, size_t row_num, WriteBuffer & ostr, const FormatSettings &) const  override;\n-    void deserializeTextQuoted(IColumn & column, ReadBuffer & istr, const FormatSettings &) const  override;\n-    bool tryDeserializeTextQuoted(IColumn & column, ReadBuffer & istr, const FormatSettings &) const  override;\n+    void serializeTextQuoted(const IColumn & column, size_t row_num, WriteBuffer & ostr, const FormatSettings &) const override;\n+    void deserializeTextQuoted(IColumn & column, ReadBuffer & istr, const FormatSettings &) const override;\n+    bool tryDeserializeTextQuoted(IColumn & column, ReadBuffer & istr, const FormatSettings &) const override;\n \n     void deserializeWholeText(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const override;\n     bool tryDeserializeWholeText(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const override;\ndiff --git a/src/DataTypes/Serializations/SerializationCustomSimpleText.h b/src/DataTypes/Serializations/SerializationCustomSimpleText.h\nindex f7aea8697ff6..c95c00f899a4 100644\n--- a/src/DataTypes/Serializations/SerializationCustomSimpleText.h\n+++ b/src/DataTypes/Serializations/SerializationCustomSimpleText.h\n@@ -11,10 +11,12 @@ struct FormatSettings;\n class IColumn;\n \n /** Simple ISerialization that uses serializeText/deserializeText\n- * for all serialization and deserialization. */\n+  * for all serialization and deserialization.\n+  */\n class SerializationCustomSimpleText : public SerializationWrapper\n {\n public:\n+    SerializationCustomSimpleText() = delete;\n     explicit SerializationCustomSimpleText(const SerializationPtr & nested_);\n \n     // Methods that subclasses must override in order to get full serialization/deserialization support.\n@@ -32,14 +34,14 @@ class SerializationCustomSimpleText : public SerializationWrapper\n     /** Text serialization with escaping but without quoting.\n       */\n     void serializeTextEscaped(const IColumn & column, size_t row_num, WriteBuffer & ostr, const FormatSettings &) const override;\n-    void deserializeTextEscaped(IColumn & column, ReadBuffer & istr, const FormatSettings &) const  override;\n-    bool tryDeserializeTextEscaped(IColumn & column, ReadBuffer & istr, const FormatSettings &) const  override;\n+    void deserializeTextEscaped(IColumn & column, ReadBuffer & istr, const FormatSettings &) const override;\n+    bool tryDeserializeTextEscaped(IColumn & column, ReadBuffer & istr, const FormatSettings &) const override;\n \n     /** Text serialization as a literal that may be inserted into a query.\n       */\n-    void serializeTextQuoted(const IColumn & column, size_t row_num, WriteBuffer & ostr, const FormatSettings &) const  override;\n-    void deserializeTextQuoted(IColumn & column, ReadBuffer & istr, const FormatSettings &) const  override;\n-    bool tryDeserializeTextQuoted(IColumn & column, ReadBuffer & istr, const FormatSettings &) const  override;\n+    void serializeTextQuoted(const IColumn & column, size_t row_num, WriteBuffer & ostr, const FormatSettings &) const override;\n+    void deserializeTextQuoted(IColumn & column, ReadBuffer & istr, const FormatSettings &) const override;\n+    bool tryDeserializeTextQuoted(IColumn & column, ReadBuffer & istr, const FormatSettings &) const override;\n \n     /** Text serialization for the CSV format.\n       */\ndiff --git a/src/DataTypes/Serializations/SerializationInterval.cpp b/src/DataTypes/Serializations/SerializationInterval.cpp\nindex 6c723d375c85..048dfce7b00d 100644\n--- a/src/DataTypes/Serializations/SerializationInterval.cpp\n+++ b/src/DataTypes/Serializations/SerializationInterval.cpp\n@@ -1,4 +1,4 @@\n-#include \"SerializationInterval.h\"\n+#include <DataTypes/Serializations/SerializationInterval.h>\n \n #include <Columns/ColumnsNumber.h>\n #include <IO/WriteBuffer.h>\n@@ -8,208 +8,97 @@\n \n namespace DB\n {\n+\n using ColumnInterval = DataTypeInterval::ColumnType;\n \n namespace ErrorCodes\n {\n     extern const int ILLEGAL_COLUMN;\n-    extern const int NOT_IMPLEMENTED;\n     extern const int BAD_ARGUMENTS;\n }\n \n-SerializationInterval::SerializationInterval(IntervalKind interval_kind_) : interval_kind(std::move(interval_kind_))\n-{\n-}\n-\n-void SerializationInterval::deserializeBinary(Field & field, ReadBuffer & istr, const FormatSettings & settings) const\n-{\n-    dispatch(\n-        static_cast<void (ISerialization::*)(Field &, ReadBuffer &, const FormatSettings &) const>(&ISerialization::deserializeBinary),\n-        settings.interval.output_format,\n-        field,\n-        istr,\n-        settings);\n-}\n-\n-void SerializationInterval::deserializeBinary(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const\n-{\n-    dispatch(\n-        static_cast<void (ISerialization::*)(IColumn &, ReadBuffer &, const FormatSettings &) const>(&ISerialization::deserializeBinary),\n-        settings.interval.output_format,\n-        column,\n-        istr,\n-        settings);\n-}\n-\n-void SerializationInterval::deserializeBinaryBulk(IColumn & column, ReadBuffer & istr, size_t rows_offset, size_t limit, double avg_value_size_hint) const\n+namespace\n {\n-    dispatch(\n-        &ISerialization::deserializeBinaryBulk, FormatSettings::IntervalOutputFormat::Numeric, column, istr, rows_offset, limit, avg_value_size_hint);\n-}\n-\n-void SerializationInterval::deserializeBinaryBulkStatePrefix(\n-    DeserializeBinaryBulkSettings & settings, DeserializeBinaryBulkStatePtr & state, SubstreamsDeserializeStatesCache * cache) const\n-{\n-    dispatch(&ISerialization::deserializeBinaryBulkStatePrefix, FormatSettings::IntervalOutputFormat::Numeric, settings, state, cache);\n-}\n-\n \n-void SerializationInterval::deserializeBinaryBulkWithMultipleStreams(\n-    ColumnPtr & column,\n-    size_t rows_offset,\n-    size_t limit,\n-    DeserializeBinaryBulkSettings & settings,\n-    DeserializeBinaryBulkStatePtr & state,\n-    SubstreamsCache * cache) const\n+/// Trash for Kusto dialect:\n+void serializeTextKusto(IntervalKind interval_kind, const IColumn & column, const size_t row, WriteBuffer & ostr, const FormatSettings &)\n {\n-    dispatch(\n-        &ISerialization::deserializeBinaryBulkWithMultipleStreams,\n-        FormatSettings::IntervalOutputFormat::Numeric,\n-        column,\n-        rows_offset,\n-        limit,\n-        settings,\n-        state,\n-        cache);\n-}\n-\n-\n-void SerializationInterval::deserializeTextCSV(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const\n-{\n-    dispatch(&ISerialization::deserializeTextCSV, settings.interval.output_format, column, istr, settings);\n-}\n-\n-void SerializationInterval::deserializeTextEscaped(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const\n-{\n-    dispatch(&ISerialization::deserializeTextEscaped, settings.interval.output_format, column, istr, settings);\n-}\n-\n-void SerializationInterval::deserializeTextJSON(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const\n-{\n-    dispatch(&ISerialization::deserializeTextJSON, settings.interval.output_format, column, istr, settings);\n-}\n-\n-void SerializationInterval::deserializeTextQuoted(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const\n-{\n-    dispatch(&ISerialization::deserializeTextQuoted, settings.interval.output_format, column, istr, settings);\n-}\n-\n-void SerializationInterval::deserializeTextRaw(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const\n-{\n-    dispatch(&ISerialization::deserializeTextRaw, settings.interval.output_format, column, istr, settings);\n-}\n-\n-\n-void SerializationInterval::deserializeWholeText(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const\n-{\n-    dispatch(&ISerialization::deserializeWholeText, settings.interval.output_format, column, istr, settings);\n-}\n-\n-void SerializationInterval::serializeBinary(const Field & field, WriteBuffer & ostr, const FormatSettings & settings) const\n-{\n-    dispatch(\n-        static_cast<void (ISerialization::*)(const Field &, WriteBuffer &, const FormatSettings &) const>(&ISerialization::serializeBinary),\n-        settings.interval.output_format,\n-        field,\n-        ostr,\n-        settings);\n-}\n-\n-void SerializationInterval::serializeBinary(const IColumn & column, size_t row, WriteBuffer & ostr, const FormatSettings & settings) const\n-{\n-    dispatch(\n-        static_cast<void (ISerialization::*)(const IColumn &, size_t, WriteBuffer &, const FormatSettings &) const>(\n-            &ISerialization::serializeBinary),\n-        settings.interval.output_format,\n-        column,\n-        row,\n-        ostr,\n-        settings);\n-}\n+    const auto * interval_column = checkAndGetColumn<ColumnInterval>(&column);\n+    if (!interval_column)\n+        throw Exception(ErrorCodes::ILLEGAL_COLUMN, \"Expected column of underlying type of Interval\");\n \n-void SerializationInterval::serializeBinaryBulk(const IColumn & column, WriteBuffer & ostr, size_t offset, size_t limit) const\n-{\n-    dispatch(&ISerialization::serializeBinaryBulk, FormatSettings::IntervalOutputFormat::Numeric, column, ostr, offset, limit);\n+    Int64 value = interval_column->getData()[row];\n+    Int64 ticks = 0;\n+    if (common::mulOverflow(interval_kind.toAvgNanoseconds(), value, ticks))\n+        throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Formatting an interval in Kusto dialect will overflow\");\n+    ticks = ticks / 100;\n+    std::string interval_as_string = formatKQLTimespan(ticks);\n+    ostr.write(interval_as_string.c_str(), interval_as_string.length());\n }\n \n-void SerializationInterval::serializeBinaryBulkStatePrefix(\n-    const IColumn & column, SerializeBinaryBulkSettings & settings, SerializeBinaryBulkStatePtr & state) const\n-{\n-    dispatch(&ISerialization::serializeBinaryBulkStatePrefix, FormatSettings::IntervalOutputFormat::Numeric, column, settings, state);\n }\n \n-void SerializationInterval::serializeBinaryBulkStateSuffix(\n-    SerializeBinaryBulkSettings & settings, SerializeBinaryBulkStatePtr & state) const\n+SerializationInterval::SerializationInterval(IntervalKind interval_kind_) : interval_kind(std::move(interval_kind_))\n {\n-    dispatch(&ISerialization::serializeBinaryBulkStateSuffix, FormatSettings::IntervalOutputFormat::Numeric, settings, state);\n }\n \n-void SerializationInterval::serializeBinaryBulkWithMultipleStreams(\n-    const IColumn & column, size_t offset, size_t limit, SerializeBinaryBulkSettings & settings, SerializeBinaryBulkStatePtr & state) const\n-{\n-    dispatch(\n-        &ISerialization::serializeBinaryBulkWithMultipleStreams,\n-        FormatSettings::IntervalOutputFormat::Numeric,\n-        column,\n-        offset,\n-        limit,\n-        settings,\n-        state);\n-}\n \n void SerializationInterval::serializeText(const IColumn & column, size_t row, WriteBuffer & ostr, const FormatSettings & settings) const\n {\n-    dispatch(&ISerialization::serializeText, settings.interval.output_format, column, row, ostr, settings);\n-}\n-\n-void SerializationInterval::serializeTextCSV(const IColumn & column, size_t row, WriteBuffer & ostr, const FormatSettings & settings) const\n-{\n-    dispatch(&ISerialization::serializeTextCSV, settings.interval.output_format, column, row, ostr, settings);\n-}\n-\n-void SerializationInterval::serializeTextEscaped(\n-    const IColumn & column, size_t row, WriteBuffer & ostr, const FormatSettings & settings) const\n-{\n-    dispatch(&ISerialization::serializeTextEscaped, settings.interval.output_format, column, row, ostr, settings);\n+    switch (settings.interval_output_format)\n+    {\n+        case FormatSettings::IntervalOutputFormat::Numeric:\n+            Base::serializeText(column, row, ostr, settings);\n+            return;\n+        case FormatSettings::IntervalOutputFormat::Kusto:\n+            serializeTextKusto(interval_kind, column, row, ostr, settings);\n+            return;\n+    }\n }\n \n void SerializationInterval::serializeTextJSON(const IColumn & column, size_t row, WriteBuffer & ostr, const FormatSettings & settings) const\n {\n-    dispatch(&ISerialization::serializeTextJSON, settings.interval.output_format, column, row, ostr, settings);\n+    switch (settings.interval_output_format)\n+    {\n+        case FormatSettings::IntervalOutputFormat::Numeric:\n+            Base::serializeTextJSON(column, row, ostr, settings);\n+            return;\n+        case FormatSettings::IntervalOutputFormat::Kusto:\n+            ostr.write('\"');\n+            serializeTextKusto(interval_kind, column, row, ostr, settings);\n+            ostr.write('\"');\n+            return;\n+    }\n }\n \n-void SerializationInterval::serializeTextQuoted(\n-    const IColumn & column, size_t row, WriteBuffer & ostr, const FormatSettings & settings) const\n-{\n-    dispatch(&ISerialization::serializeTextQuoted, settings.interval.output_format, column, row, ostr, settings);\n-}\n-\n-void SerializationInterval::serializeTextRaw(const IColumn & column, size_t row, WriteBuffer & ostr, const FormatSettings & settings) const\n-{\n-    dispatch(&ISerialization::serializeTextRaw, settings.interval.output_format, column, row, ostr, settings);\n-}\n-\n-/// Everything below is trash for the Kusto dialect:\n-\n-void SerializationKustoInterval::serializeText(\n-    const IColumn & column, const size_t row, WriteBuffer & ostr, const FormatSettings &) const\n-{\n-    const auto * interval_column = checkAndGetColumn<ColumnInterval>(&column);\n-    if (!interval_column)\n-        throw Exception(ErrorCodes::ILLEGAL_COLUMN, \"Expected column of underlying type of Interval\");\n-\n-    Int64 value = interval_column->getData()[row];\n-    Int64 ticks = 0;\n-    if (common::mulOverflow(kind.toAvgNanoseconds(), value, ticks))\n-        throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Formatting an interval in Kusto dialect will overflow\");\n-    ticks = ticks / 100;\n-    std::string interval_as_string = formatKQLTimespan(ticks);\n-    ostr.write(interval_as_string.c_str(), interval_as_string.length());\n-}\n-\n-void SerializationKustoInterval::deserializeText(IColumn &, ReadBuffer &, const FormatSettings &, const bool) const\n+void SerializationInterval::serializeTextCSV(const IColumn & column, size_t row, WriteBuffer & ostr, const FormatSettings & settings) const\n {\n-    throw Exception(ErrorCodes::NOT_IMPLEMENTED, \"Deserialization in the Kusto dialect is not implemented\");\n+    switch (settings.interval_output_format)\n+    {\n+        case FormatSettings::IntervalOutputFormat::Numeric:\n+            Base::serializeTextCSV(column, row, ostr, settings);\n+            return;\n+        case FormatSettings::IntervalOutputFormat::Kusto:\n+            ostr.write('\"');\n+            serializeTextKusto(interval_kind, column, row, ostr, settings);\n+            ostr.write('\"');\n+            return;\n+    }\n+}\n+\n+void SerializationInterval::serializeTextQuoted(const IColumn & column, size_t row, WriteBuffer & ostr, const FormatSettings & settings) const\n+{\n+    switch (settings.interval_output_format)\n+    {\n+        case FormatSettings::IntervalOutputFormat::Numeric:\n+            Base::serializeTextQuoted(column, row, ostr, settings);\n+            return;\n+        case FormatSettings::IntervalOutputFormat::Kusto:\n+            ostr.write('\\'');\n+            serializeTextKusto(interval_kind, column, row, ostr, settings);\n+            ostr.write('\\'');\n+            return;\n+    }\n }\n \n }\ndiff --git a/src/DataTypes/Serializations/SerializationInterval.h b/src/DataTypes/Serializations/SerializationInterval.h\nindex 07223162e90b..3a6ee571164e 100644\n--- a/src/DataTypes/Serializations/SerializationInterval.h\n+++ b/src/DataTypes/Serializations/SerializationInterval.h\n@@ -1,94 +1,26 @@\n #pragma once\n \n-#include \"ISerialization.h\"\n-#include \"SerializationCustomSimpleText.h\"\n+#include <DataTypes/Serializations/ISerialization.h>\n \n #include <DataTypes/DataTypeInterval.h>\n #include <Formats/FormatSettings.h>\n #include <Common/IntervalKind.h>\n \n-namespace DB\n-{\n-namespace ErrorCodes\n-{\n-    extern const int NOT_IMPLEMENTED;\n-}\n \n-class SerializationKustoInterval : public SerializationCustomSimpleText\n+namespace DB\n {\n-public:\n-    explicit SerializationKustoInterval(IntervalKind kind_) : SerializationCustomSimpleText(nullptr), kind(kind_) { }\n-\n-    void serializeText(const IColumn & column, size_t row, WriteBuffer & ostr, const FormatSettings & settings) const override;\n-    void deserializeText(IColumn & column, ReadBuffer & istr, const FormatSettings & settings, bool whole) const override;\n-\n-private:\n-    IntervalKind kind;\n-};\n \n-class SerializationInterval : public ISerialization\n+class SerializationInterval : public SerializationNumber<typename DataTypeInterval::FieldType>\n {\n public:\n     explicit SerializationInterval(IntervalKind kind_);\n-\n-    void deserializeBinary(Field & field, ReadBuffer & istr, const FormatSettings & settings) const override;\n-    void deserializeBinary(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const override;\n-    void deserializeBinaryBulk(IColumn & column, ReadBuffer & istr, size_t rows_offset, size_t limit, double avg_value_size_hint) const override;\n-    void deserializeBinaryBulkStatePrefix(\n-        DeserializeBinaryBulkSettings & settings,\n-        DeserializeBinaryBulkStatePtr & state,\n-        SubstreamsDeserializeStatesCache * cache) const override;\n-    void deserializeBinaryBulkWithMultipleStreams(\n-        ColumnPtr & column,\n-        size_t rows_offset,\n-        size_t limit,\n-        DeserializeBinaryBulkSettings & settings,\n-        DeserializeBinaryBulkStatePtr & state,\n-        SubstreamsCache * cache) const override;\n-    void deserializeTextCSV(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const override;\n-    void deserializeTextEscaped(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const override;\n-    void deserializeTextJSON(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const override;\n-    void deserializeTextQuoted(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const override;\n-    void deserializeTextRaw(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const override;\n-    void deserializeWholeText(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const override;\n-\n-    void serializeBinary(const Field & field, WriteBuffer & ostr, const FormatSettings & settings) const override;\n-    void serializeBinary(const IColumn & column, size_t row, WriteBuffer & ostr, const FormatSettings & settings) const override;\n-    void serializeBinaryBulk(const IColumn & column, WriteBuffer & ostr, size_t offset, size_t limit) const override;\n-    void serializeBinaryBulkStatePrefix(\n-        const IColumn & column, SerializeBinaryBulkSettings & settings, SerializeBinaryBulkStatePtr & state) const override;\n-    void serializeBinaryBulkStateSuffix(SerializeBinaryBulkSettings & settings, SerializeBinaryBulkStatePtr & state) const override;\n-    void serializeBinaryBulkWithMultipleStreams(\n-        const IColumn & column,\n-        size_t offset,\n-        size_t limit,\n-        SerializeBinaryBulkSettings & settings,\n-        SerializeBinaryBulkStatePtr & state) const override;\n     void serializeText(const IColumn & column, size_t row, WriteBuffer & ostr, const FormatSettings & settings) const override;\n-    void serializeTextCSV(const IColumn & column, size_t row, WriteBuffer & ostr, const FormatSettings & settings) const override;\n-    void serializeTextEscaped(const IColumn & column, size_t row, WriteBuffer & ostr, const FormatSettings & settings) const override;\n     void serializeTextJSON(const IColumn & column, size_t row, WriteBuffer & ostr, const FormatSettings & settings) const override;\n+    void serializeTextCSV(const IColumn & column, size_t row, WriteBuffer & ostr, const FormatSettings & settings) const override;\n     void serializeTextQuoted(const IColumn & column, size_t row, WriteBuffer & ostr, const FormatSettings & settings) const override;\n-    void serializeTextRaw(const IColumn & column, size_t row, WriteBuffer & ostr, const FormatSettings & settings) const override;\n-\n private:\n-    template <typename... Args, std::invocable<const ISerialization *, Args...> Method>\n-    void dispatch(const Method method, const FormatSettings::IntervalOutputFormat format, Args &&... args) const\n-    {\n-        const ISerialization * serialization = nullptr;\n-        if (format == FormatSettings::IntervalOutputFormat::Kusto)\n-            serialization = &serialization_kusto;\n-        else if (format == FormatSettings::IntervalOutputFormat::Numeric)\n-            serialization = &serialization_numeric;\n-\n-        if (!serialization)\n-            throw Exception(ErrorCodes::NOT_IMPLEMENTED, \"Option {} is not implemented\", magic_enum::enum_name(format));\n-\n-        (serialization->*method)(std::forward<Args>(args)...);\n-    }\n-\n+    using Base = SerializationNumber<typename DataTypeInterval::FieldType>;\n     IntervalKind interval_kind;\n-    SerializationKustoInterval serialization_kusto{interval_kind};\n-    SerializationNumber<typename DataTypeInterval::FieldType> serialization_numeric;\n };\n+\n }\ndiff --git a/src/Formats/FormatFactory.cpp b/src/Formats/FormatFactory.cpp\nindex d587a5b6d6b1..41d944819fc2 100644\n--- a/src/Formats/FormatFactory.cpp\n+++ b/src/Formats/FormatFactory.cpp\n@@ -143,7 +143,7 @@ FormatSettings getFormatSettings(const ContextPtr & context, const Settings & se\n     format_settings.date_time_input_format = settings[Setting::date_time_input_format];\n     format_settings.date_time_output_format = settings[Setting::date_time_output_format];\n     format_settings.date_time_64_output_format_cut_trailing_zeros_align_to_groups_of_thousands = settings[Setting::date_time_64_output_format_cut_trailing_zeros_align_to_groups_of_thousands];\n-    format_settings.interval.output_format = settings[Setting::interval_output_format];\n+    format_settings.interval_output_format = settings[Setting::interval_output_format];\n     format_settings.input_format_ipv4_default_on_conversion_error = settings[Setting::input_format_ipv4_default_on_conversion_error];\n     format_settings.input_format_ipv6_default_on_conversion_error = settings[Setting::input_format_ipv6_default_on_conversion_error];\n     format_settings.bool_true_representation = settings[Setting::bool_true_representation];\ndiff --git a/src/Formats/FormatSettings.h b/src/Formats/FormatSettings.h\nindex 8679d16d025d..060f0c768fd2 100644\n--- a/src/Formats/FormatSettings.h\n+++ b/src/Formats/FormatSettings.h\n@@ -84,10 +84,7 @@ struct FormatSettings\n         Numeric\n     };\n \n-    struct\n-    {\n-        IntervalOutputFormat output_format = IntervalOutputFormat::Numeric;\n-    } interval{};\n+    IntervalOutputFormat interval_output_format = IntervalOutputFormat::Numeric;\n \n     enum class DateTimeOverflowBehavior : uint8_t\n     {\ndiff --git a/src/Storages/MergeTree/MergeTreeData.h b/src/Storages/MergeTree/MergeTreeData.h\nindex b02a58a166a7..89d3507266e0 100644\n--- a/src/Storages/MergeTree/MergeTreeData.h\n+++ b/src/Storages/MergeTree/MergeTreeData.h\n@@ -816,7 +816,7 @@ class MergeTreeData : public IStorage, public WithMutableContext\n     /// Check if the ALTER can be performed:\n     /// - all needed columns are present.\n     /// - all type conversions can be done.\n-    /// - columns corresponding to primary key, indices, sign, sampling expression and date are not affected.\n+    /// - columns corresponding to primary key, indices, sign, sampling expression, summed columns, and date are not affected.\n     /// If something is wrong, throws an exception.\n     void checkAlterIsPossible(const AlterCommands & commands, ContextPtr context) const override;\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03539_kusto_output_format_trash.reference b/tests/queries/0_stateless/03539_kusto_output_format_trash.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/03539_kusto_output_format_trash.sql b/tests/queries/0_stateless/03539_kusto_output_format_trash.sql\nnew file mode 100644\nindex 000000000000..4dc51c519162\n--- /dev/null\n+++ b/tests/queries/0_stateless/03539_kusto_output_format_trash.sql\n@@ -0,0 +1,1 @@\n+INSERT INTO TABLE FUNCTION file(currentDatabase() || '/query.data', 'RowBinary') SELECT INTERVAL 1 SECOND SETTINGS interval_output_format = 'kusto';\n",
  "problem_statement": "Kusto format null pointer dereference on export\n### Describe the bug\n\nThere are still issues with kusto format.\n\n### How to reproduce\n\nRun Fiddle: https://fiddle.clickhouse.com/daf5c0f9-7adb-4b69-8684-6fe0873d60a9\n\n### Error message and/or stacktrace\n\nStack trace:\n\n```\n#0  DB::SerializationWrapper::serializeBinary (this=<optimized out>, column=..., row_num=0, ostr=..., settings=...) at src/DataTypes/Serializations/SerializationWrapper.cpp:83\n#1  0x000055556b657424 in DB::SerializationInterval::serializeBinary (this=0x0, column=..., row=0, ostr=..., settings=...)\n    at src/DataTypes/Serializations/SerializationInterval.cpp:120\n#2  0x000055556e5b9ddc in DB::IRowOutputFormat::write (this=0x7ffd02b19018, columns=..., row_num=0) at src/Processors/Formats/IRowOutputFormat.cpp:78\n#3  0x000055556e5b9b0c in DB::IRowOutputFormat::consume (this=0x7ffd02b19018, chunk=...) at src/Processors/Formats/IRowOutputFormat.cpp:31\n#4  0x000055556e720764 in DB::ParallelFormattingOutputFormat::formatterThreadFunction (this=0x7ffd02fc7018, current_unit_number=<optimized out>, first_row_num=<optimized out>, thread_group=...)\n    at src/Processors/Formats/Impl/ParallelFormattingOutputFormat.cpp:228\n#5  0x0000555567465213 in std::__1::__function::__policy_func<void ()>::operator()[abi:se190107]() const (this=0x7ffcfa7f19d0)\n    at contrib/llvm-project/libcxx/include/__functional/function.h:716\n#6  std::__1::function<void()>::operator() (this=0x7ffcfa7f19d0) at contrib/llvm-project/libcxx/include/__functional/function.h:989\n#7  ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true> >::ThreadFromThreadPool::worker (this=0x7ffd1aabffe0) at src/Common/ThreadPool.cpp:799\n#8  0x000055556746b33e in std::__1::__invoke[abi:se190107]<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true> >::ThreadFromThreadPool::*&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true> >::ThreadFromThreadPool*&, , void>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true> >::ThreadFromThreadPool::*&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true> >::ThreadFromThreadPool*&) (__f=<optimized out>, __a0=<optimized out>)\n    at contrib/llvm-project/libcxx/include/__type_traits/invoke.h:117\n#9  std::__1::__apply_tuple_impl[abi:se190107]<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true> >::ThreadFromThreadPool::*&)(), std::__1::tuple<ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true> >::ThreadFromThreadPool*>&, 0ul>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true> >::ThreadFromThreadPool::*&)(), std::__1::tuple<ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true> >::ThreadFromThreadPool*>&, std::__1::__tuple_indices<0ul>) (\n    __f=<optimized out>, __t=...) at contrib/llvm-project/libcxx/include/tuple:1354\n#10 std::__1::apply[abi:se190107]<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true> >::ThreadFromThreadPool::*&)(), std::__1::tuple<ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true> >::ThreadFromThreadPool*>&>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true> >::ThreadFromThreadPool::*&)(), std::__1::tuple<ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true> >::ThreadFromThreadPool*>&) (__f=<optimized out>, __t=...)\n    at contrib/llvm-project/libcxx/include/tuple:1358\n#11 ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true> >::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true> >::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true> >::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true> >::ThreadFromThreadPool*&&)::{lambda()#1}::operator()() (this=0x7ffd1aab2d40)\n    at src/Common/ThreadPool.h:312\n#12 0x0000555567462826 in std::__1::__function::__policy_func<void ()>::operator()[abi:se190107]() const (this=0x7ffcfa7f2000)\n    at contrib/llvm-project/libcxx/include/__functional/function.h:716\n#13 std::__1::function<void()>::operator() (this=0x7ffcfa7f2000) at contrib/llvm-project/libcxx/include/__functional/function.h:989\n#14 ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker (this=0x7ffd1aa9d900) at src/Common/ThreadPool.cpp:809\n#15 0x0000555567468e00 in std::__1::__invoke[abi:se190107]<void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*, , void>(void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*&&) (__f=<optimized out>, __a0=<optimized out>)\n    at contrib/llvm-project/libcxx/include/__type_traits/invoke.h:117\n#16 std::__1::__thread_execute[abi:se190107]<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*, 2ul>(std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>&, std::__1::__tuple_indices<2ul>) (__t=...) at contrib/llvm-project/libcxx/include/__thread/thread.h:192\n#17 std::__1::__thread_proxy[abi:se190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*> >(void*) (__vp=<optimized out>) at contrib/llvm-project/libcxx/include/__thread/thread.h:201\n#18 0x00007ffff7ca2ef1 in start_thread (arg=<optimized out>) at ./nptl/pthread_create.c:448\n#19 0x00007ffff7d3445c in __GI___clone3 () at ../sysdeps/unix/sysv/linux/x86_64/clone3.S:78\n```\n",
  "hints_text": "Better delete Kusto.\nActually, I have not set `allow_experimental_kusto_dialect`. How was this allowed?\nThey added a feature, \"kusto's inverval formatting mode\", that can be activated independently of the dialect.\nHint: if you specify a relative path in the `file` table function, it will be relative to `user_files`.",
  "created_at": "2025-06-15T19:22:36Z"
}