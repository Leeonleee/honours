{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 43269,
  "instance_id": "ClickHouse__ClickHouse-43269",
  "issue_numbers": [
    "43246"
  ],
  "base_commit": "eea0e33613f93e541b5bb20dd42511c276b96bf4",
  "patch": "diff --git a/src/Columns/ColumnAggregateFunction.cpp b/src/Columns/ColumnAggregateFunction.cpp\nindex b51b21307f38..f51a0426199f 100644\n--- a/src/Columns/ColumnAggregateFunction.cpp\n+++ b/src/Columns/ColumnAggregateFunction.cpp\n@@ -152,16 +152,16 @@ MutableColumnPtr ColumnAggregateFunction::convertToValues(MutableColumnPtr colum\n     /// If there are references to states in final column, we must hold their ownership\n     /// by holding arenas and source.\n \n-    auto callback = [&](auto & subcolumn)\n+    auto callback = [&](IColumn & subcolumn)\n     {\n-        if (auto * aggregate_subcolumn = typeid_cast<ColumnAggregateFunction *>(subcolumn.get()))\n+        if (auto * aggregate_subcolumn = typeid_cast<ColumnAggregateFunction *>(&subcolumn))\n         {\n             aggregate_subcolumn->foreign_arenas = concatArenas(column_aggregate_func.foreign_arenas, column_aggregate_func.my_arena);\n             aggregate_subcolumn->src = column_aggregate_func.getPtr();\n         }\n     };\n \n-    callback(res);\n+    callback(*res);\n     res->forEachSubcolumnRecursively(callback);\n \n     for (auto * val : data)\ndiff --git a/src/Columns/ColumnArray.h b/src/Columns/ColumnArray.h\nindex 5970802f598b..44652fd0c4b1 100644\n--- a/src/Columns/ColumnArray.h\n+++ b/src/Columns/ColumnArray.h\n@@ -151,17 +151,17 @@ class ColumnArray final : public COWHelper<IColumn, ColumnArray>\n \n     ColumnPtr compress() const override;\n \n-    void forEachSubcolumn(ColumnCallback callback) override\n+    void forEachSubcolumn(ColumnCallback callback) const override\n     {\n         callback(offsets);\n         callback(data);\n     }\n \n-    void forEachSubcolumnRecursively(ColumnCallback callback) override\n+    void forEachSubcolumnRecursively(RecursiveColumnCallback callback) const override\n     {\n-        callback(offsets);\n+        callback(*offsets);\n         offsets->forEachSubcolumnRecursively(callback);\n-        callback(data);\n+        callback(*data);\n         data->forEachSubcolumnRecursively(callback);\n     }\n \ndiff --git a/src/Columns/ColumnConst.h b/src/Columns/ColumnConst.h\nindex e1f335460fd0..0c9245885c4d 100644\n--- a/src/Columns/ColumnConst.h\n+++ b/src/Columns/ColumnConst.h\n@@ -230,14 +230,14 @@ class ColumnConst final : public COWHelper<IColumn, ColumnConst>\n         data->getExtremes(min, max);\n     }\n \n-    void forEachSubcolumn(ColumnCallback callback) override\n+    void forEachSubcolumn(ColumnCallback callback) const override\n     {\n         callback(data);\n     }\n \n-    void forEachSubcolumnRecursively(ColumnCallback callback) override\n+    void forEachSubcolumnRecursively(RecursiveColumnCallback callback) const override\n     {\n-        callback(data);\n+        callback(*data);\n         data->forEachSubcolumnRecursively(callback);\n     }\n \ndiff --git a/src/Columns/ColumnLowCardinality.h b/src/Columns/ColumnLowCardinality.h\nindex 20bc45eb5690..e7310e70fcbe 100644\n--- a/src/Columns/ColumnLowCardinality.h\n+++ b/src/Columns/ColumnLowCardinality.h\n@@ -164,7 +164,7 @@ class ColumnLowCardinality final : public COWHelper<IColumn, ColumnLowCardinalit\n     size_t byteSizeAt(size_t n) const override { return getDictionary().byteSizeAt(getIndexes().getUInt(n)); }\n     size_t allocatedBytes() const override { return idx.getPositions()->allocatedBytes() + getDictionary().allocatedBytes(); }\n \n-    void forEachSubcolumn(ColumnCallback callback) override\n+    void forEachSubcolumn(ColumnCallback callback) const override\n     {\n         callback(idx.getPositionsPtr());\n \n@@ -173,15 +173,15 @@ class ColumnLowCardinality final : public COWHelper<IColumn, ColumnLowCardinalit\n             callback(dictionary.getColumnUniquePtr());\n     }\n \n-    void forEachSubcolumnRecursively(ColumnCallback callback) override\n+    void forEachSubcolumnRecursively(RecursiveColumnCallback callback) const override\n     {\n-        callback(idx.getPositionsPtr());\n+        callback(*idx.getPositionsPtr());\n         idx.getPositionsPtr()->forEachSubcolumnRecursively(callback);\n \n         /// Column doesn't own dictionary if it's shared.\n         if (!dictionary.isShared())\n         {\n-            callback(dictionary.getColumnUniquePtr());\n+            callback(*dictionary.getColumnUniquePtr());\n             dictionary.getColumnUniquePtr()->forEachSubcolumnRecursively(callback);\n         }\n     }\n@@ -278,6 +278,7 @@ class ColumnLowCardinality final : public COWHelper<IColumn, ColumnLowCardinalit\n \n         const ColumnPtr & getPositions() const { return positions; }\n         WrappedPtr & getPositionsPtr() { return positions; }\n+        const WrappedPtr & getPositionsPtr() const { return positions; }\n         size_t getPositionAt(size_t row) const;\n         void insertPosition(UInt64 position);\n         void insertPositionsRange(const IColumn & column, UInt64 offset, UInt64 limit);\ndiff --git a/src/Columns/ColumnMap.cpp b/src/Columns/ColumnMap.cpp\nindex 7377707bdb22..0fe6d4c361b5 100644\n--- a/src/Columns/ColumnMap.cpp\n+++ b/src/Columns/ColumnMap.cpp\n@@ -273,14 +273,14 @@ void ColumnMap::getExtremes(Field & min, Field & max) const\n     max = std::move(map_max_value);\n }\n \n-void ColumnMap::forEachSubcolumn(ColumnCallback callback)\n+void ColumnMap::forEachSubcolumn(ColumnCallback callback) const\n {\n     callback(nested);\n }\n \n-void ColumnMap::forEachSubcolumnRecursively(ColumnCallback callback)\n+void ColumnMap::forEachSubcolumnRecursively(RecursiveColumnCallback callback) const\n {\n-    callback(nested);\n+    callback(*nested);\n     nested->forEachSubcolumnRecursively(callback);\n }\n \ndiff --git a/src/Columns/ColumnMap.h b/src/Columns/ColumnMap.h\nindex 1e03633ced70..db918c3db501 100644\n--- a/src/Columns/ColumnMap.h\n+++ b/src/Columns/ColumnMap.h\n@@ -88,8 +88,8 @@ class ColumnMap final : public COWHelper<IColumn, ColumnMap>\n     size_t byteSizeAt(size_t n) const override;\n     size_t allocatedBytes() const override;\n     void protect() override;\n-    void forEachSubcolumn(ColumnCallback callback) override;\n-    void forEachSubcolumnRecursively(ColumnCallback callback) override;\n+    void forEachSubcolumn(ColumnCallback callback) const override;\n+    void forEachSubcolumnRecursively(RecursiveColumnCallback callback) const override;\n     bool structureEquals(const IColumn & rhs) const override;\n     double getRatioOfDefaultRows(double sample_ratio) const override;\n     void getIndicesOfNonDefaultRows(Offsets & indices, size_t from, size_t limit) const override;\ndiff --git a/src/Columns/ColumnNullable.h b/src/Columns/ColumnNullable.h\nindex 2d15442e5838..85bf095a9d18 100644\n--- a/src/Columns/ColumnNullable.h\n+++ b/src/Columns/ColumnNullable.h\n@@ -130,17 +130,17 @@ class ColumnNullable final : public COWHelper<IColumn, ColumnNullable>\n \n     ColumnPtr compress() const override;\n \n-    void forEachSubcolumn(ColumnCallback callback) override\n+    void forEachSubcolumn(ColumnCallback callback) const override\n     {\n         callback(nested_column);\n         callback(null_map);\n     }\n \n-    void forEachSubcolumnRecursively(ColumnCallback callback) override\n+    void forEachSubcolumnRecursively(RecursiveColumnCallback callback) const override\n     {\n-        callback(nested_column);\n+        callback(*nested_column);\n         nested_column->forEachSubcolumnRecursively(callback);\n-        callback(null_map);\n+        callback(*null_map);\n         null_map->forEachSubcolumnRecursively(callback);\n     }\n \ndiff --git a/src/Columns/ColumnObject.cpp b/src/Columns/ColumnObject.cpp\nindex bf4630137d5c..b2adf9e00599 100644\n--- a/src/Columns/ColumnObject.cpp\n+++ b/src/Columns/ColumnObject.cpp\n@@ -664,20 +664,20 @@ size_t ColumnObject::allocatedBytes() const\n     return res;\n }\n \n-void ColumnObject::forEachSubcolumn(ColumnCallback callback)\n+void ColumnObject::forEachSubcolumn(ColumnCallback callback) const\n {\n-    for (auto & entry : subcolumns)\n-        for (auto & part : entry->data.data)\n+    for (const auto & entry : subcolumns)\n+        for (const auto & part : entry->data.data)\n             callback(part);\n }\n \n-void ColumnObject::forEachSubcolumnRecursively(ColumnCallback callback)\n+void ColumnObject::forEachSubcolumnRecursively(RecursiveColumnCallback callback) const\n {\n-    for (auto & entry : subcolumns)\n+    for (const auto & entry : subcolumns)\n     {\n-        for (auto & part : entry->data.data)\n+        for (const auto & part : entry->data.data)\n         {\n-            callback(part);\n+            callback(*part);\n             part->forEachSubcolumnRecursively(callback);\n         }\n     }\ndiff --git a/src/Columns/ColumnObject.h b/src/Columns/ColumnObject.h\nindex 8fcf3d41fbad..aa31cf54413a 100644\n--- a/src/Columns/ColumnObject.h\n+++ b/src/Columns/ColumnObject.h\n@@ -206,8 +206,8 @@ class ColumnObject final : public COWHelper<IColumn, ColumnObject>\n     size_t size() const override;\n     size_t byteSize() const override;\n     size_t allocatedBytes() const override;\n-    void forEachSubcolumn(ColumnCallback callback) override;\n-    void forEachSubcolumnRecursively(ColumnCallback callback) override;\n+    void forEachSubcolumn(ColumnCallback callback) const override;\n+    void forEachSubcolumnRecursively(RecursiveColumnCallback callback) const override;\n     void insert(const Field & field) override;\n     void insertDefault() override;\n     void insertFrom(const IColumn & src, size_t n) override;\ndiff --git a/src/Columns/ColumnSparse.cpp b/src/Columns/ColumnSparse.cpp\nindex 0c3f8d11adca..0f44d2994fb2 100644\n--- a/src/Columns/ColumnSparse.cpp\n+++ b/src/Columns/ColumnSparse.cpp\n@@ -744,17 +744,17 @@ bool ColumnSparse::structureEquals(const IColumn & rhs) const\n     return false;\n }\n \n-void ColumnSparse::forEachSubcolumn(ColumnCallback callback)\n+void ColumnSparse::forEachSubcolumn(ColumnCallback callback) const\n {\n     callback(values);\n     callback(offsets);\n }\n \n-void ColumnSparse::forEachSubcolumnRecursively(ColumnCallback callback)\n+void ColumnSparse::forEachSubcolumnRecursively(RecursiveColumnCallback callback) const\n {\n-    callback(values);\n+    callback(*values);\n     values->forEachSubcolumnRecursively(callback);\n-    callback(offsets);\n+    callback(*offsets);\n     offsets->forEachSubcolumnRecursively(callback);\n }\n \ndiff --git a/src/Columns/ColumnSparse.h b/src/Columns/ColumnSparse.h\nindex 5814cd77637d..ffe392a83c1b 100644\n--- a/src/Columns/ColumnSparse.h\n+++ b/src/Columns/ColumnSparse.h\n@@ -139,8 +139,8 @@ class ColumnSparse final : public COWHelper<IColumn, ColumnSparse>\n \n     ColumnPtr compress() const override;\n \n-    void forEachSubcolumn(ColumnCallback callback) override;\n-    void forEachSubcolumnRecursively(ColumnCallback callback) override;\n+    void forEachSubcolumn(ColumnCallback callback) const override;\n+    void forEachSubcolumnRecursively(RecursiveColumnCallback callback) const override;\n \n     bool structureEquals(const IColumn & rhs) const override;\n \ndiff --git a/src/Columns/ColumnTuple.cpp b/src/Columns/ColumnTuple.cpp\nindex d8a43bf510db..8827b7b98505 100644\n--- a/src/Columns/ColumnTuple.cpp\n+++ b/src/Columns/ColumnTuple.cpp\n@@ -495,17 +495,17 @@ void ColumnTuple::getExtremes(Field & min, Field & max) const\n     max = max_tuple;\n }\n \n-void ColumnTuple::forEachSubcolumn(ColumnCallback callback)\n+void ColumnTuple::forEachSubcolumn(ColumnCallback callback) const\n {\n-    for (auto & column : columns)\n+    for (const auto & column : columns)\n         callback(column);\n }\n \n-void ColumnTuple::forEachSubcolumnRecursively(ColumnCallback callback)\n+void ColumnTuple::forEachSubcolumnRecursively(RecursiveColumnCallback callback) const\n {\n-    for (auto & column : columns)\n+    for (const auto & column : columns)\n     {\n-        callback(column);\n+        callback(*column);\n         column->forEachSubcolumnRecursively(callback);\n     }\n }\ndiff --git a/src/Columns/ColumnTuple.h b/src/Columns/ColumnTuple.h\nindex 96395d4edfb8..25f6328b3fc6 100644\n--- a/src/Columns/ColumnTuple.h\n+++ b/src/Columns/ColumnTuple.h\n@@ -96,8 +96,8 @@ class ColumnTuple final : public COWHelper<IColumn, ColumnTuple>\n     size_t byteSizeAt(size_t n) const override;\n     size_t allocatedBytes() const override;\n     void protect() override;\n-    void forEachSubcolumn(ColumnCallback callback) override;\n-    void forEachSubcolumnRecursively(ColumnCallback callback) override;\n+    void forEachSubcolumn(ColumnCallback callback) const override;\n+    void forEachSubcolumnRecursively(RecursiveColumnCallback callback) const override;\n     bool structureEquals(const IColumn & rhs) const override;\n     bool isCollationSupported() const override;\n     ColumnPtr compress() const override;\ndiff --git a/src/Columns/ColumnUnique.h b/src/Columns/ColumnUnique.h\nindex a1579a46ae05..27faf4bd2ad3 100644\n--- a/src/Columns/ColumnUnique.h\n+++ b/src/Columns/ColumnUnique.h\n@@ -105,7 +105,13 @@ class ColumnUnique final : public COWHelper<IColumnUnique, ColumnUnique<ColumnTy\n         return column_holder->allocatedBytes() + reverse_index.allocatedBytes()\n             + (nested_null_mask ? nested_null_mask->allocatedBytes() : 0);\n     }\n-    void forEachSubcolumn(IColumn::ColumnCallback callback) override\n+\n+    void forEachSubcolumn(IColumn::ColumnCallback callback) const override\n+    {\n+        callback(column_holder);\n+    }\n+\n+    void forEachSubcolumn(IColumn::MutableColumnCallback callback) override\n     {\n         callback(column_holder);\n         reverse_index.setColumn(getRawColumnPtr());\n@@ -113,9 +119,15 @@ class ColumnUnique final : public COWHelper<IColumnUnique, ColumnUnique<ColumnTy\n             nested_column_nullable = ColumnNullable::create(column_holder, nested_null_mask);\n     }\n \n-    void forEachSubcolumnRecursively(IColumn::ColumnCallback callback) override\n+    void forEachSubcolumnRecursively(IColumn::RecursiveColumnCallback callback) const override\n     {\n-        callback(column_holder);\n+        callback(*column_holder);\n+        column_holder->forEachSubcolumnRecursively(callback);\n+    }\n+\n+    void forEachSubcolumnRecursively(IColumn::RecursiveMutableColumnCallback callback) override\n+    {\n+        callback(*column_holder);\n         column_holder->forEachSubcolumnRecursively(callback);\n         reverse_index.setColumn(getRawColumnPtr());\n         if (is_nullable)\ndiff --git a/src/Columns/IColumn.cpp b/src/Columns/IColumn.cpp\nindex 2158adb86a84..46f07cffa9e7 100644\n--- a/src/Columns/IColumn.cpp\n+++ b/src/Columns/IColumn.cpp\n@@ -20,12 +20,10 @@ String IColumn::dumpStructure() const\n     WriteBufferFromOwnString res;\n     res << getFamilyName() << \"(size = \" << size();\n \n-    ColumnCallback callback = [&](ColumnPtr & subcolumn)\n+    forEachSubcolumn([&](const auto & subcolumn)\n     {\n         res << \", \" << subcolumn->dumpStructure();\n-    };\n-\n-    const_cast<IColumn*>(this)->forEachSubcolumn(callback);\n+    });\n \n     res << \")\";\n     return res.str();\n@@ -64,6 +62,22 @@ ColumnPtr IColumn::createWithOffsets(const Offsets & offsets, const Field & defa\n     return res;\n }\n \n+void IColumn::forEachSubcolumn(MutableColumnCallback callback)\n+{\n+    std::as_const(*this).forEachSubcolumn([&callback](const WrappedPtr & subcolumn)\n+    {\n+        callback(const_cast<WrappedPtr &>(subcolumn));\n+    });\n+}\n+\n+void IColumn::forEachSubcolumnRecursively(RecursiveMutableColumnCallback callback)\n+{\n+    std::as_const(*this).forEachSubcolumnRecursively([&callback](const IColumn & subcolumn)\n+    {\n+        callback(const_cast<IColumn &>(subcolumn));\n+    });\n+}\n+\n bool isColumnNullable(const IColumn & column)\n {\n     return checkColumn<ColumnNullable>(column);\ndiff --git a/src/Columns/IColumn.h b/src/Columns/IColumn.h\nindex 461e41e3eece..94e875086192 100644\n--- a/src/Columns/IColumn.h\n+++ b/src/Columns/IColumn.h\n@@ -411,11 +411,22 @@ class IColumn : public COW<IColumn>\n \n     /// If the column contains subcolumns (such as Array, Nullable, etc), do callback on them.\n     /// Shallow: doesn't do recursive calls; don't do call for itself.\n-    using ColumnCallback = std::function<void(WrappedPtr&)>;\n-    virtual void forEachSubcolumn(ColumnCallback) {}\n+\n+    using ColumnCallback = std::function<void(const WrappedPtr &)>;\n+    virtual void forEachSubcolumn(ColumnCallback) const {}\n+\n+    using MutableColumnCallback = std::function<void(WrappedPtr &)>;\n+    virtual void forEachSubcolumn(MutableColumnCallback callback);\n \n     /// Similar to forEachSubcolumn but it also do recursive calls.\n-    virtual void forEachSubcolumnRecursively(ColumnCallback) {}\n+    /// In recursive calls it's prohibited to replace pointers\n+    /// to subcolumns, so we use another callback function.\n+\n+    using RecursiveColumnCallback = std::function<void(const IColumn &)>;\n+    virtual void forEachSubcolumnRecursively(RecursiveColumnCallback) const {}\n+\n+    using RecursiveMutableColumnCallback = std::function<void(IColumn &)>;\n+    virtual void forEachSubcolumnRecursively(RecursiveMutableColumnCallback callback);\n \n     /// Columns have equal structure.\n     /// If true - you can use \"compareAt\", \"insertFrom\", etc. methods.\ndiff --git a/src/Interpreters/AggregationUtils.cpp b/src/Interpreters/AggregationUtils.cpp\nindex ed5e1512a1f7..4e870e8152be 100644\n--- a/src/Interpreters/AggregationUtils.cpp\n+++ b/src/Interpreters/AggregationUtils.cpp\n@@ -50,14 +50,15 @@ OutputBlockColumns prepareOutputBlockColumns(\n \n             if (aggregate_functions[i]->isState())\n             {\n-                auto callback = [&](auto & subcolumn)\n+                auto callback = [&](IColumn & subcolumn)\n                 {\n                     /// The ColumnAggregateFunction column captures the shared ownership of the arena with aggregate function states.\n-                    if (auto * column_aggregate_func = typeid_cast<ColumnAggregateFunction *>(subcolumn.get()))\n+                    if (auto * column_aggregate_func = typeid_cast<ColumnAggregateFunction *>(&subcolumn))\n                         for (auto & pool : aggregates_pools)\n                             column_aggregate_func->addArena(pool);\n                 };\n-                callback(final_aggregate_columns[i]);\n+\n+                callback(*final_aggregate_columns[i]);\n                 final_aggregate_columns[i]->forEachSubcolumnRecursively(callback);\n             }\n         }\n",
  "test_patch": "diff --git a/src/Columns/tests/gtest_column_dump_structure.cpp b/src/Columns/tests/gtest_column_dump_structure.cpp\nnew file mode 100644\nindex 000000000000..e00c77798c85\n--- /dev/null\n+++ b/src/Columns/tests/gtest_column_dump_structure.cpp\n@@ -0,0 +1,27 @@\n+#include <Columns/ColumnLowCardinality.h>\n+#include <DataTypes/DataTypeString.h>\n+#include <DataTypes/DataTypeLowCardinality.h>\n+#include <gtest/gtest.h>\n+#include <thread>\n+\n+using namespace DB;\n+\n+TEST(IColumn, dumpStructure)\n+{\n+    auto type_lc = std::make_shared<DataTypeLowCardinality>(std::make_shared<DataTypeString>());\n+    ColumnPtr column_lc = type_lc->createColumn();\n+    String expected_structure = \"ColumnLowCardinality(size = 0, UInt8(size = 0), ColumnUnique(size = 1, String(size = 1)))\";\n+\n+    std::vector<std::thread> threads;\n+    for (size_t i = 0; i < 6; ++i)\n+    {\n+        threads.emplace_back([&]\n+        {\n+            for (size_t j = 0; j < 10000; ++j)\n+                ASSERT_EQ(column_lc->dumpStructure(), expected_structure);\n+        });\n+    }\n+\n+    for (auto & t : threads)\n+        t.join();\n+}\ndiff --git a/tests/queries/0_stateless/02482_insert_into_dist_race.reference b/tests/queries/0_stateless/02482_insert_into_dist_race.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/02482_insert_into_dist_race.sql b/tests/queries/0_stateless/02482_insert_into_dist_race.sql\nnew file mode 100644\nindex 000000000000..ee412a87d331\n--- /dev/null\n+++ b/tests/queries/0_stateless/02482_insert_into_dist_race.sql\n@@ -0,0 +1,26 @@\n+DROP TABLE IF EXISTS tmp_02482;\n+DROP TABLE IF EXISTS dist_02482;\n+\n+-- This test produces warning\n+SET send_logs_level = 'error';\n+SET prefer_localhost_replica=0;\n+\n+CREATE TABLE tmp_02482 (i UInt64, n LowCardinality(String)) ENGINE = Memory;\n+CREATE TABLE dist_02482(i UInt64, n LowCardinality(Nullable(String))) ENGINE = Distributed(test_cluster_two_shards, currentDatabase(), tmp_02482, i);\n+\n+SET insert_distributed_sync=1;\n+\n+INSERT INTO dist_02482 VALUES (1, '1'), (2, '2');\n+INSERT INTO dist_02482 SELECT number, number FROM numbers(1000);\n+\n+SET insert_distributed_sync=0;\n+\n+SYSTEM STOP DISTRIBUTED SENDS dist_02482;\n+\n+INSERT INTO dist_02482 VALUES (1, '1'),(2, '2');\n+INSERT INTO dist_02482 SELECT number, number FROM numbers(1000);\n+\n+SYSTEM FLUSH DISTRIBUTED dist_02482;\n+\n+DROP TABLE tmp_02482;\n+DROP TABLE dist_02482;\n",
  "problem_statement": "Data race in ReverseIndex::setColumn\nhttps://s3.amazonaws.com/clickhouse-test-reports/42761/3768641bf76e8c057ae4c9612d52ad321c2ad2d3/fuzzer_astfuzzertsan//report.html\r\n\r\n```\r\nWARNING: ThreadSanitizer: data race (pid=159)\r\n  Read of size 8 at 0x7b2c0017c068 by thread T224:\r\n    #0 DB::ReverseIndex<unsigned long, DB::ColumnVector<float>>::setColumn(DB::ColumnVector<float>*) build_docker/../src/Columns/R\r\neverseIndex.h:407:9 (clickhouse+0x1b633911) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)\r\n    #1 DB::ColumnUnique<DB::ColumnVector<float>>::forEachSubcolumn(std::__1::function<void (COW<DB::IColumn>::chameleon_ptr<DB::IC\r\nolumn>&)>) build_docker/../src/Columns/ColumnUnique.h:111:23 (clickhouse+0x1b633911)\r\n    #2 DB::IColumn::dumpStructure() const build_docker/../src/Columns/IColumn.cpp:28:33 (clickhouse+0x1d1ad7f2) (BuildId: fb8e058e\r\nf54aea63a7b5a37fdfb350152ad24750)\r\n    #3 DB::IColumn::dumpStructure() const::$_0::operator()(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&) const build_docker/../sr\r\nc/Columns/IColumn.cpp:25:35 (clickhouse+0x1d1ae12f) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)\r\n    #4 decltype(std::declval<DB::IColumn::dumpStructure() const::$_0&>()(std::declval<COW<DB::IColumn>::chameleon_ptr<DB::IColumn>\r\n&>())) std::__1::__invoke[abi:v15003]<DB::IColumn::dumpStructure() const::$_0&, COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&>(DB:\r\n:IColumn::dumpStructure() const::$_0&, COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&) build_docker/../contrib/libcxx/include/__fun\r\nctional/invoke.h:394:23 (clickhouse+0x1d1ae12f)\r\n    #5 void std::__1::__invoke_void_return_wrapper<void, true>::__call<DB::IColumn::dumpStructure() const::$_0&, COW<DB::IColumn>:\r\n:chameleon_ptr<DB::IColumn>&>(DB::IColumn::dumpStructure() const::$_0&, COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&) build_docke\r\nr/../contrib/libcxx/include/__functional/invoke.h:479:9 (clickhouse+0x1d1ae12f)\r\n    #6 std::__1::__function::__default_alloc_func<DB::IColumn::dumpStructure() const::$_0, void (COW<DB::IColumn>::chameleon_ptr<D\r\nB::IColumn>&)>::operator()[abi:v15003](COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&) build_docker/../contrib/libcxx/include/__fun\r\nctional/function.h:235:12 (clickhouse+0x1d1ae12f)\r\n    #7 void std::__1::__function::__policy_invoker<void (COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&)>::__call_impl<std::__1::__\r\nfunction::__default_alloc_func<DB::IColumn::dumpStructure() const::$_0, void (COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&)>>(std\r\n::__1::__function::__policy_storage const*, COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&) build_docker/../contrib/libcxx/include/\r\n__functional/function.h:716:16 (clickhouse+0x1d1ae12f)\r\n    #8 std::__1::__function::__policy_func<void (COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&)>::operator()[abi:v15003](COW<DB::I\r\nColumn>::chameleon_ptr<DB::IColumn>&) const build_docker/../contrib/libcxx/include/__functional/function.h:848:16 (clickhouse+0x1c\r\neefcf8) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)\r\n    #9 std::__1::function<void (COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&)>::operator()(COW<DB::IColumn>::chameleon_ptr<DB::IC\r\nolumn>&) const build_docker/../contrib/libcxx/include/__functional/function.h:1197:12 (clickhouse+0x1ceefcf8)\r\n    #10 DB::ColumnLowCardinality::forEachSubcolumn(std::__1::function<void (COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&)>) build\r\n_docker/../src/Columns/ColumnLowCardinality.h:173:13 (clickhouse+0x1ceefcf8)\r\n    #11 DB::IColumn::dumpStructure() const build_docker/../src/Columns/IColumn.cpp:28:33 (clickhouse+0x1d1ad7f2) (BuildId: fb8e058\r\nef54aea63a7b5a37fdfb350152ad24750)\r\n    #12 DB::ColumnWithTypeAndName::dumpStructure(DB::WriteBuffer&) const build_docker/../src/Core/ColumnWithTypeAndName.cpp:45:31\r\n(clickhouse+0x1b2b73b0) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)\r\n    #13 DB::ColumnWithTypeAndName::dumpStructure() const build_docker/../src/Core/ColumnWithTypeAndName.cpp:53:5 (clickhouse+0x1b2\r\nb74da) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)\r\n    #14 bool DB::checkColumnStructure<bool>(DB::ColumnWithTypeAndName const&, DB::ColumnWithTypeAndName const&, std::__1::basic_st\r\nring_view<char, std::__1::char_traits<char>>, bool, int) build_docker/../src/Core/Block.cpp:53:56 (clickhouse+0x1b2ac939) (BuildId\r\n: fb8e058ef54aea63a7b5a37fdfb350152ad24750)\r\n    #15 bool DB::checkBlockStructure<bool>(DB::Block const&, DB::Block const&, std::__1::basic_string_view<char, std::__1::char_tr\r\naits<char>>, bool) build_docker/../src/Core/Block.cpp:124:18 (clickhouse+0x1b2ac939)\r\n    #16 DB::blocksHaveEqualStructure(DB::Block const&, DB::Block const&) build_docker/../src/Core/Block.cpp:678:12 (clickhouse+0x1\r\nb2ab5ca) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)\r\n    #17 DB::adoptBlock(DB::Block const&, DB::Block const&, Poco::Logger*) build_docker/../src/Storages/Distributed/DistributedSink\r\n.cpp:64:9 (clickhouse+0x1d7a7d19) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)\r\n    #18 DB::DistributedSink::runWritingJob(DB::DistributedSink::JobReplica&, DB::Block const&, unsigned long)::$_0::operator()() c\r\nonst build_docker/../src/Storages/Distributed/DistributedSink.cpp:390:41 (clickhouse+0x1d7a9f56) (BuildId: fb8e058ef54aea63a7b5a37\r\nfdfb350152ad24750)\r\n    #19 decltype(std::declval<DB::DistributedSink::runWritingJob(DB::DistributedSink::JobReplica&, DB::Block const&, unsigned long\r\n)::$_0&>()()) std::__1::__invoke[abi:v15003]<DB::DistributedSink::runWritingJob(DB::DistributedSink::JobReplica&, DB::Block const&\r\n, unsigned long)::$_0&>(DB::DistributedSink::runWritingJob(DB::DistributedSink::JobReplica&, DB::Block const&, unsigned long)::$_0\r\n&) build_docker/../contrib/libcxx/include/__functional/invoke.h:394:23 (clickhouse+0x1d7a9f56)\r\n    #20 void std::__1::__invoke_void_return_wrapper<void, true>::__call<DB::DistributedSink::runWritingJob(DB::DistributedSink::Jo\r\nbReplica&, DB::Block const&, unsigned long)::$_0&>(DB::DistributedSink::runWritingJob(DB::DistributedSink::JobReplica&, DB::Block\r\nconst&, unsigned long)::$_0&) build_docker/../contrib/libcxx/include/__functional/invoke.h:479:9 (clickhouse+0x1d7a9f56)\r\n    #21 std::__1::__function::__default_alloc_func<DB::DistributedSink::runWritingJob(DB::DistributedSink::JobReplica&, DB::Block\r\nconst&, unsigned long)::$_0, void ()>::operator()[abi:v15003]() build_docker/../contrib/libcxx/include/__functional/function.h:235\r\n:12 (clickhouse+0x1d7a9f56)\r\n    #22 void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<DB::Distribut\r\nedSink::runWritingJob(DB::DistributedSink::JobReplica&, DB::Block const&, unsigned long)::$_0, void ()>>(std::__1::__function::__p\r\nolicy_storage const*) build_docker/../contrib/libcxx/include/__functional/function.h:716:16 (clickhouse+0x1d7a9f56)\r\n    #23 std::__1::__function::__policy_func<void ()>::operator()[abi:v15003]() const build_docker/../contrib/libcxx/include/__func\r\ntional/function.h:848:16 (clickhouse+0x139c9f90) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)\r\n    #24 std::__1::function<void ()>::operator()() const build_docker/../contrib/libcxx/include/__functional/function.h:1197:12 (cl\r\nickhouse+0x139c9f90)\r\n    #25 ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::worker(std::__1::__list_iterator<ThreadFromGlobalPoolImpl<false>, void*>)\r\n build_docker/../src/Common/ThreadPool.cpp:294:17 (clickhouse+0x139c9f90)\r\n    #26 void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::opti\r\nonal<unsigned long>, bool)::'lambda0'()::operator()() const build_docker/../src/Common/ThreadPool.cpp:144:73 (clickhouse+0x139ce41\r\n7) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)\r\n    #27 decltype(std::declval<void>()()) std::__1::__invoke[abi:v15003]<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::sche\r\nduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()&>(void&&) build_docker/../\r\ncontrib/libcxx/include/__functional/invoke.h:394:23 (clickhouse+0x139ce417)\r\n    #28 decltype(auto) std::__1::__apply_tuple_impl[abi:v15003]<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl\r\n<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()&, std::__1::tuple<>&>(void&&, std:\r\n:__1::tuple<>&, std::__1::__tuple_indices<>) build_docker/../contrib/libcxx/include/tuple:1789:1 (clickhouse+0x139ce417)\r\n    #29 decltype(auto) std::__1::apply[abi:v15003]<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::_\r\n_1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()&, std::__1::tuple<>&>(void&&, std::__1::tuple<>\r\n&) build_docker/../contrib/libcxx/include/tuple:1798:1 (clickhouse+0x139ce417)\r\n    #30 ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleIm\r\npl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'()::operator()\r\n() build_docker/../src/Common/ThreadPool.h:196:13 (clickhouse+0x139ce417)\r\n    #31 decltype(std::declval<void>()()) std::__1::__invoke[abi:v15003]<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<\r\nvoid ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<uns\r\nigned long>, bool)::'lambda0'()>(void&&)::'lambda'()&>(void&&) build_docker/../contrib/libcxx/include/__functional/invoke.h:394:23\r\n (clickhouse+0x139ce381) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)\r\n    #32 void std::__1::__invoke_void_return_wrapper<void, true>::__call<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<\r\nvoid ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<uns\r\nigned long>, bool)::'lambda0'()>(void&&)::'lambda'()&>(ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolIm\r\npl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool\r\n)::'lambda0'()>(void&&)::'lambda'()&) build_docker/../contrib/libcxx/include/__functional/invoke.h:479:9 (clickhouse+0x139ce381)\r\n    #33 std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<T\r\nhreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'\r\nlambda0'()>(void&&)::'lambda'(), void ()>::operator()[abi:v15003]() build_docker/../contrib/libcxx/include/__functional/function.h\r\n:235:12 (clickhouse+0x139ce381)\r\n    #34 void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlo\r\nbalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::fu\r\nnction<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'(), void ()>>(std::__1::__function:\r\n:__policy_storage const*) build_docker/../contrib/libcxx/include/__functional/function.h:716:16 (clickhouse+0x139ce381)\r\n    #35 std::__1::__function::__policy_func<void ()>::operator()[abi:v15003]() const build_docker/../contrib/libcxx/include/__func\r\ntional/function.h:848:16 (clickhouse+0x139c7230) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)\r\n    #36 std::__1::function<void ()>::operator()() const build_docker/../contrib/libcxx/include/__functional/function.h:1197:12 (cl\r\nickhouse+0x139c7230)\r\n    #37 ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) build_docker/../src/Common/Th\r\nreadPool.cpp:294:17 (clickhouse+0x139c7230)\r\n    #38 void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned l\r\nong>, bool)::'lambda0'()::operator()() const build_docker/../src/Common/ThreadPool.cpp:144:73 (clickhouse+0x139cb951) (BuildId: fb\r\n8e058ef54aea63a7b5a37fdfb350152ad24750)\r\n    #39 decltype(std::declval<void>()()) std::__1::__invoke[abi:v15003]<void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(\r\nstd::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&) build_docker/../contrib/libcxx/i\r\nnclude/__functional/invoke.h:394:23 (clickhouse+0x139cb951)\r\n    #40 void std::__1::__thread_execute[abi:v15003]<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::\r\n__1::__thread_struct>>, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::opt\r\nional<unsigned long>, bool)::'lambda0'()>(std::__1::tuple<void, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1\r\n::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()>&, std::__1::__tuple_indices<>) build_docker/../c\r\nontrib/libcxx/include/thread:284:5 (clickhouse+0x139cb951)\r\n    #41 void* std::__1::__thread_proxy[abi:v15003]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::defau\r\nlt_delete<std::__1::__thread_struct>>, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, long\r\n, std::__1::optional<unsigned long>, bool)::'lambda0'()>>(void*) build_docker/../contrib/libcxx/include/thread:295:5 (clickhouse+0\r\nx139cb951)\r\n\r\n  Previous write of size 8 at 0x7b2c0017c068 by thread T228:\r\n    #0 DB::ReverseIndex<unsigned long, DB::ColumnVector<float>>::setColumn(DB::ColumnVector<float>*) build_docker/../src/Columns/R\r\neverseIndex.h:413:12 (clickhouse+0x1b6339ce) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)\r\n    #1 DB::ColumnUnique<DB::ColumnVector<float>>::forEachSubcolumn(std::__1::function<void (COW<DB::IColumn>::chameleon_ptr<DB::IC\r\nolumn>&)>) build_docker/../src/Columns/ColumnUnique.h:111:23 (clickhouse+0x1b6339ce)\r\n    #2 DB::IColumn::dumpStructure() const build_docker/../src/Columns/IColumn.cpp:28:33 (clickhouse+0x1d1ad7f2) (BuildId: fb8e058e\r\nf54aea63a7b5a37fdfb350152ad24750)\r\n    #3 DB::IColumn::dumpStructure() const::$_0::operator()(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&) const build_docker/../sr\r\nc/Columns/IColumn.cpp:25:35 (clickhouse+0x1d1ae12f) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)\r\n    #4 decltype(std::declval<DB::IColumn::dumpStructure() const::$_0&>()(std::declval<COW<DB::IColumn>::chameleon_ptr<DB::IColumn>\r\n&>())) std::__1::__invoke[abi:v15003]<DB::IColumn::dumpStructure() const::$_0&, COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&>(DB:\r\n:IColumn::dumpStructure() const::$_0&, COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&) build_docker/../contrib/libcxx/include/__fun\r\nctional/invoke.h:394:23 (clickhouse+0x1d1ae12f)\r\n    #5 void std::__1::__invoke_void_return_wrapper<void, true>::__call<DB::IColumn::dumpStructure() const::$_0&, COW<DB::IColumn>:\r\n:chameleon_ptr<DB::IColumn>&>(DB::IColumn::dumpStructure() const::$_0&, COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&) build_docke\r\nr/../contrib/libcxx/include/__functional/invoke.h:479:9 (clickhouse+0x1d1ae12f)\r\n    #6 std::__1::__function::__default_alloc_func<DB::IColumn::dumpStructure() const::$_0, void (COW<DB::IColumn>::chameleon_ptr<D\r\nB::IColumn>&)>::operator()[abi:v15003](COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&) build_docker/../contrib/libcxx/include/__fun\r\nctional/function.h:235:12 (clickhouse+0x1d1ae12f)\r\n    #7 void std::__1::__function::__policy_invoker<void (COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&)>::__call_impl<std::__1::__\r\nfunction::__default_alloc_func<DB::IColumn::dumpStructure() const::$_0, void (COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&)>>(std\r\n::__1::__function::__policy_storage const*, COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&) build_docker/../contrib/libcxx/include/\r\n__functional/function.h:716:16 (clickhouse+0x1d1ae12f)\r\n    #8 std::__1::__function::__policy_func<void (COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&)>::operator()[abi:v15003](COW<DB::I\r\nColumn>::chameleon_ptr<DB::IColumn>&) const build_docker/../contrib/libcxx/include/__functional/function.h:848:16 (clickhouse+0x1c\r\neefcf8) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)\r\n    #9 std::__1::function<void (COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&)>::operator()(COW<DB::IColumn>::chameleon_ptr<DB::IC\r\nolumn>&) const build_docker/../contrib/libcxx/include/__functional/function.h:1197:12 (clickhouse+0x1ceefcf8)\r\n    #10 DB::ColumnLowCardinality::forEachSubcolumn(std::__1::function<void (COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&)>) build\r\n_docker/../src/Columns/ColumnLowCardinality.h:173:13 (clickhouse+0x1ceefcf8)\r\n    #11 DB::IColumn::dumpStructure() const build_docker/../src/Columns/IColumn.cpp:28:33 (clickhouse+0x1d1ad7f2) (BuildId: fb8e058\r\nef54aea63a7b5a37fdfb350152ad24750)\r\n    #12 DB::ColumnWithTypeAndName::dumpStructure(DB::WriteBuffer&) const build_docker/../src/Core/ColumnWithTypeAndName.cpp:45:31\r\n(clickhouse+0x1b2b73b0) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)\r\n    #13 DB::Block::dumpStructure() const build_docker/../src/Core/Block.cpp:419:13 (clickhouse+0x1b2a83f9) (BuildId: fb8e058ef54ae\r\na63a7b5a37fdfb350152ad24750)\r\n    #14 DB::adoptBlock(DB::Block const&, DB::Block const&, Poco::Logger*) build_docker/../src/Storages/Distributed/DistributedSink\r\n.cpp:67:5 (clickhouse+0x1d7a7f47) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)\r\n    #15 DB::DistributedSink::runWritingJob(DB::DistributedSink::JobReplica&, DB::Block const&, unsigned long)::$_0::operator()() c\r\nonst build_docker/../src/Storages/Distributed/DistributedSink.cpp:390:41 (clickhouse+0x1d7a9f56) (BuildId: fb8e058ef54aea63a7b5a37\r\nfdfb350152ad24750)\r\n    #16 decltype(std::declval<DB::DistributedSink::runWritingJob(DB::DistributedSink::JobReplica&, DB::Block const&, unsigned long\r\n)::$_0&>()()) std::__1::__invoke[abi:v15003]<DB::DistributedSink::runWritingJob(DB::DistributedSink::JobReplica&, DB::Block const&\r\n, unsigned long)::$_0&>(DB::DistributedSink::runWritingJob(DB::DistributedSink::JobReplica&, DB::Block const&, unsigned long)::$_0\r\n&) build_docker/../contrib/libcxx/include/__functional/invoke.h:394:23 (clickhouse+0x1d7a9f56)\r\n    #17 void std::__1::__invoke_void_return_wrapper<void, true>::__call<DB::DistributedSink::runWritingJob(DB::DistributedSink::Jo\r\nbReplica&, DB::Block const&, unsigned long)::$_0&>(DB::DistributedSink::runWritingJob(DB::DistributedSink::JobReplica&, DB::Block\r\nconst&, unsigned long)::$_0&) build_docker/../contrib/libcxx/include/__functional/invoke.h:479:9 (clickhouse+0x1d7a9f56)\r\n    #18 std::__1::__function::__default_alloc_func<DB::DistributedSink::runWritingJob(DB::DistributedSink::JobReplica&, DB::Block\r\nconst&, unsigned long)::$_0, void ()>::operator()[abi:v15003]() build_docker/../contrib/libcxx/include/__functional/function.h:235\r\n:12 (clickhouse+0x1d7a9f56)\r\n    #19 void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<DB::Distribut\r\nedSink::runWritingJob(DB::DistributedSink::JobReplica&, DB::Block const&, unsigned long)::$_0, void ()>>(std::__1::__function::__p\r\nolicy_storage const*) build_docker/../contrib/libcxx/include/__functional/function.h:716:16 (clickhouse+0x1d7a9f56)\r\n    #20 std::__1::__function::__policy_func<void ()>::operator()[abi:v15003]() const build_docker/../contrib/libcxx/include/__func\r\ntional/function.h:848:16 (clickhouse+0x139c9f90) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)\r\n    #21 std::__1::function<void ()>::operator()() const build_docker/../contrib/libcxx/include/__functional/function.h:1197:12 (cl\r\nickhouse+0x139c9f90)\r\n    #22 ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::worker(std::__1::__list_iterator<ThreadFromGlobalPoolImpl<false>, void*>)\r\n build_docker/../src/Common/ThreadPool.cpp:294:17 (clickhouse+0x139c9f90)\r\n    #23 void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::opti\r\nonal<unsigned long>, bool)::'lambda0'()::operator()() const build_docker/../src/Common/ThreadPool.cpp:144:73 (clickhouse+0x139ce41\r\n7) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)\r\n    #24 decltype(std::declval<void>()()) std::__1::__invoke[abi:v15003]<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::sche\r\nduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()&>(void&&) build_docker/../\r\ncontrib/libcxx/include/__functional/invoke.h:394:23 (clickhouse+0x139ce417)\r\n    #25 decltype(auto) std::__1::__apply_tuple_impl[abi:v15003]<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl\r\n<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()&, std::__1::tuple<>&>(void&&, std:\r\n:__1::tuple<>&, std::__1::__tuple_indices<>) build_docker/../contrib/libcxx/include/tuple:1789:1 (clickhouse+0x139ce417)\r\n    #26 decltype(auto) std::__1::apply[abi:v15003]<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::_\r\n_1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()&, std::__1::tuple<>&>(void&&, std::__1::tuple<>\r\n&) build_docker/../contrib/libcxx/include/tuple:1798:1 (clickhouse+0x139ce417)\r\n    #27 ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleIm\r\npl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'()::operator()\r\n() build_docker/../src/Common/ThreadPool.h:196:13 (clickhouse+0x139ce417)\r\n    #28 decltype(std::declval<void>()()) std::__1::__invoke[abi:v15003]<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<\r\nvoid ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<uns\r\nigned long>, bool)::'lambda0'()>(void&&)::'lambda'()&>(void&&) build_docker/../contrib/libcxx/include/__functional/invoke.h:394:23\r\n (clickhouse+0x139ce381) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)\r\n    #29 void std::__1::__invoke_void_return_wrapper<void, true>::__call<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<\r\nvoid ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<uns\r\nigned long>, bool)::'lambda0'()>(void&&)::'lambda'()&>(ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolIm\r\npl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool\r\n)::'lambda0'()>(void&&)::'lambda'()&) build_docker/../contrib/libcxx/include/__functional/invoke.h:479:9 (clickhouse+0x139ce381)\r\n    #30 std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<T\r\nhreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'\r\nlambda0'()>(void&&)::'lambda'(), void ()>::operator()[abi:v15003]() build_docker/../contrib/libcxx/include/__functional/function.h\r\n:235:12 (clickhouse+0x139ce381)\r\n    #31 void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlo\r\nbalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::fu\r\nnction<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'(), void ()>>(std::__1::__function:\r\n:__policy_storage const*) build_docker/../contrib/libcxx/include/__functional/function.h:716:16 (clickhouse+0x139ce381)\r\n    #32 std::__1::__function::__policy_func<void ()>::operator()[abi:v15003]() const build_docker/../contrib/libcxx/include/__func\r\ntional/function.h:848:16 (clickhouse+0x139c7230) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)\r\n    #33 std::__1::function<void ()>::operator()() const build_docker/../contrib/libcxx/include/__functional/function.h:1197:12 (cl\r\nickhouse+0x139c7230)\r\n    #34 ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) build_docker/../src/Common/Th\r\nreadPool.cpp:294:17 (clickhouse+0x139c7230)\r\n    #35 void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned l\r\nong>, bool)::'lambda0'()::operator()() const build_docker/../src/Common/ThreadPool.cpp:144:73 (clickhouse+0x139cb951) (BuildId: fb\r\n8e058ef54aea63a7b5a37fdfb350152ad24750)\r\n    #36 decltype(std::declval<void>()()) std::__1::__invoke[abi:v15003]<void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(\r\nstd::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&) build_docker/../contrib/libcxx/i\r\nnclude/__functional/invoke.h:394:23 (clickhouse+0x139cb951)\r\n    #37 void std::__1::__thread_execute[abi:v15003]<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::\r\n__1::__thread_struct>>, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::opt\r\nional<unsigned long>, bool)::'lambda0'()>(std::__1::tuple<void, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1\r\n::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()>&, std::__1::__tuple_indices<>) build_docker/../c\r\nontrib/libcxx/include/thread:284:5 (clickhouse+0x139cb951)\r\n    #38 void* std::__1::__thread_proxy[abi:v15003]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::defau\r\nlt_delete<std::__1::__thread_struct>>, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, long\r\n, std::__1::optional<unsigned long>, bool)::'lambda0'()>>(void*) build_docker/../contrib/libcxx/include/thread:295:5 (clickhouse+0\r\nx139cb951)\r\n```\n",
  "hints_text": "",
  "created_at": "2022-11-16T00:51:41Z",
  "modified_files": [
    "src/Columns/ColumnAggregateFunction.cpp",
    "src/Columns/ColumnArray.h",
    "src/Columns/ColumnConst.h",
    "src/Columns/ColumnLowCardinality.h",
    "src/Columns/ColumnMap.cpp",
    "src/Columns/ColumnMap.h",
    "src/Columns/ColumnNullable.h",
    "src/Columns/ColumnObject.cpp",
    "src/Columns/ColumnObject.h",
    "src/Columns/ColumnSparse.cpp",
    "src/Columns/ColumnSparse.h",
    "src/Columns/ColumnTuple.cpp",
    "src/Columns/ColumnTuple.h",
    "src/Columns/ColumnUnique.h",
    "src/Columns/IColumn.cpp",
    "src/Columns/IColumn.h",
    "src/Interpreters/AggregationUtils.cpp"
  ],
  "modified_test_files": [
    "b/src/Columns/tests/gtest_column_dump_structure.cpp",
    "b/tests/queries/0_stateless/02482_insert_into_dist_race.sql"
  ]
}