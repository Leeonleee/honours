{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 49636,
  "instance_id": "ClickHouse__ClickHouse-49636",
  "issue_numbers": [
    "49622"
  ],
  "base_commit": "33e1888ca74fa8388a7f214970b8a60d7a96555a",
  "patch": "diff --git a/src/Common/HashTable/ClearableHashSet.h b/src/Common/HashTable/ClearableHashSet.h\nindex 4cbce1a52132..006d45df7cd0 100644\n--- a/src/Common/HashTable/ClearableHashSet.h\n+++ b/src/Common/HashTable/ClearableHashSet.h\n@@ -80,6 +80,8 @@ template <\n class ClearableHashSet\n     : public HashTable<Key, ClearableHashTableCell<Key, HashTableCell<Key, Hash, ClearableHashSetState>>, Hash, Grower, Allocator>\n {\n+    using Cell = ClearableHashTableCell<Key, HashTableCell<Key, Hash, ClearableHashSetState>>;\n+\n public:\n     using Base = HashTable<Key, ClearableHashTableCell<Key, HashTableCell<Key, Hash, ClearableHashSetState>>, Hash, Grower, Allocator>;\n     using typename Base::LookupResult;\n@@ -88,6 +90,13 @@ class ClearableHashSet\n     {\n         ++this->version;\n         this->m_size = 0;\n+\n+        if constexpr (Cell::need_zero_value_storage)\n+        {\n+            /// clear ZeroValueStorage\n+            if (this->hasZero())\n+                this->clearHasZero();\n+        }\n     }\n };\n \n@@ -103,11 +112,20 @@ class ClearableHashSetWithSavedHash : public HashTable<\n                                           Grower,\n                                           Allocator>\n {\n+    using Cell = ClearableHashTableCell<Key, HashSetCellWithSavedHash<Key, Hash, ClearableHashSetState>>;\n+\n public:\n     void clear()\n     {\n         ++this->version;\n         this->m_size = 0;\n+\n+        if constexpr (Cell::need_zero_value_storage)\n+        {\n+            /// clear ZeroValueStorage\n+            if (this->hasZero())\n+                this->clearHasZero();\n+        }\n     }\n };\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02733_fix_distinct_in_order_bug_49622.reference b/tests/queries/0_stateless/02733_fix_distinct_in_order_bug_49622.reference\nnew file mode 100644\nindex 000000000000..19f58f6ca911\n--- /dev/null\n+++ b/tests/queries/0_stateless/02733_fix_distinct_in_order_bug_49622.reference\n@@ -0,0 +1,2 @@\n+\t1\n+\t2\ndiff --git a/tests/queries/0_stateless/02733_fix_distinct_in_order_bug_49622.sql b/tests/queries/0_stateless/02733_fix_distinct_in_order_bug_49622.sql\nnew file mode 100644\nindex 000000000000..9501a2c07619\n--- /dev/null\n+++ b/tests/queries/0_stateless/02733_fix_distinct_in_order_bug_49622.sql\n@@ -0,0 +1,15 @@\n+set optimize_distinct_in_order=1;\n+\n+DROP TABLE IF EXISTS test_string;\n+\n+CREATE TABLE test_string\n+(\n+    `c1` String,\n+    `c2` String\n+)\n+ENGINE = MergeTree\n+ORDER BY c1;\n+\n+INSERT INTO test_string(c1, c2) VALUES ('1',  ''), ('2', '');\n+\n+SELECT DISTINCT c2, c1 FROM test_string;\n",
  "problem_statement": "Unexpected \"DISTINCT\" result with empty string\n+ ClickHouse Version\r\n\r\n    `23.4.2.11`\r\n\r\n+ DDL\r\n    ```sql\r\n    CREATE TABLE test\r\n    (\r\n        c1 String,\r\n        c2 String,\r\n        c3 String\r\n    )\r\n    ENGINE = ReplacingMergeTree\r\n    ORDER BY (c1, c3);\r\n    \r\n    INSERT INTO test(c1, c2, c3) VALUES\r\n        ('', '', '1'), ('', '', '2'),('v1', 'v2', '3'),('v1', 'v2', '4'),('v1', 'v2', '5');\r\n    ```\r\n\r\n```sql\r\n\r\nSELECT c1, c2, c3 FROM test GROUP BY c1, c2, c3;\r\n\u250c\u2500c1\u2500\u252c\u2500c2\u2500\u252c\u2500c3\u2500\u2510\r\n\u2502    \u2502    \u2502 2  \u2502\r\n\u2502 v1 \u2502 v2 \u2502 4  \u2502\r\n\u2502 v1 \u2502 v2 \u2502 3  \u2502\r\n\u2502    \u2502    \u2502 1  \u2502\r\n\u2502 v1 \u2502 v2 \u2502 5  \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\r\n\r\nSELECT DISTINCT c1, c2, c3 FROM test;\r\n\u250c\u2500c1\u2500\u252c\u2500c2\u2500\u252c\u2500c3\u2500\u2510\r\n\u2502    \u2502    \u2502 1  \u2502\r\n\u2502 v1 \u2502 v2 \u2502 3  \u2502\r\n\u2502 v1 \u2502 v2 \u2502 4  \u2502\r\n\u2502 v1 \u2502 v2 \u2502 5  \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\r\n\r\n```\r\nWhy does the query result of this DISTINCT clause not contain rows where c3 is 2\r\n\r\n\r\n\r\n\r\n\n",
  "hints_text": "It's a bug in `optimize_distinct_in_order`\r\n\r\nhttps://fiddle.clickhouse.com/11229299-e12c-40b0-ab26-d0051344d96f\r\n\r\n@devcrafter \r\n\r\nbroken in 23.1.7.30\nMinimal example:\r\n```sql\r\nCREATE TABLE test\r\n(\r\n    `c1` String,\r\n    `c2` String\r\n)\r\nENGINE = MergeTree\r\nORDER BY c1;\r\n\r\nINSERT INTO test(c1, c2) VALUES ('1',  ''), ('2', '');\r\n\r\nSELECT DISTINCT *\r\nFROM test\r\n\r\nQuery id: 29f37b24-c93e-4e05-bac4-d26e8f1f48cf\r\n\r\n\u250c\u2500c1\u2500\u252c\u2500c2\u2500\u2510\r\n\u2502 1  \u2502    \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n`ZeroValueStorage` is _not_ cleared in `ClearableHashSet*` when `clear()` is called\r\n\r\nDetails:\r\nThe `ClearableSetVariants` is used to determine distinct values in non-sorted columns(`c2` in example above) inside ranges in sorted columns (`c1` is sorted column).\r\nIn the example above, there are 2 ranges, 1 row each, and for both ranges `c2` contains zero value for `String`.\r\nBefore counting distinct values in each range, the `clear()` is called for the`ClearableHashSet*` for corresponding type, the code is [here](https://github.com/ClickHouse/ClickHouse/blob/33e1888ca74fa8388a7f214970b8a60d7a96555a/src/Processors/Transforms/DistinctSortedChunkTransform.cpp#L76). But the `clear()` call doesn't clear `ZeroValueStorage` in the hash set, so the empty string in the second range considered as already counted\r\n\r\n",
  "created_at": "2023-05-07T21:13:10Z"
}