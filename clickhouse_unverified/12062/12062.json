{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 12062,
  "instance_id": "ClickHouse__ClickHouse-12062",
  "issue_numbers": [
    "10574"
  ],
  "base_commit": "40942a2164e7d0d4fef55460348906d87e5a2d32",
  "patch": "diff --git a/src/Interpreters/Set.cpp b/src/Interpreters/Set.cpp\nindex 6f3031d5e7d3..f331f3cecb38 100644\n--- a/src/Interpreters/Set.cpp\n+++ b/src/Interpreters/Set.cpp\n@@ -441,9 +441,14 @@ void Set::checkColumnsNumber(size_t num_key_columns) const\n     }\n }\n \n+bool Set::areTypesEqual(size_t set_type_idx, const DataTypePtr & other_type) const\n+{\n+    return removeNullable(recursiveRemoveLowCardinality(data_types[set_type_idx]))->equals(*removeNullable(recursiveRemoveLowCardinality(other_type)));\n+}\n+\n void Set::checkTypesEqual(size_t set_type_idx, const DataTypePtr & other_type) const\n {\n-    if (!removeNullable(recursiveRemoveLowCardinality(data_types[set_type_idx]))->equals(*removeNullable(recursiveRemoveLowCardinality(other_type))))\n+    if (!this->areTypesEqual(set_type_idx, other_type))\n         throw Exception(\"Types of column \" + toString(set_type_idx + 1) + \" in section IN don't match: \"\n                         + other_type->getName() + \" on the left, \"\n                         + data_types[set_type_idx]->getName() + \" on the right\", ErrorCodes::TYPE_MISMATCH);\ndiff --git a/src/Interpreters/Set.h b/src/Interpreters/Set.h\nindex a4c8fd59245e..933bace5e454 100644\n--- a/src/Interpreters/Set.h\n+++ b/src/Interpreters/Set.h\n@@ -74,6 +74,7 @@ class Set\n     Columns getSetElements() const { return { set_elements.begin(), set_elements.end() }; }\n \n     void checkColumnsNumber(size_t num_key_columns) const;\n+    bool areTypesEqual(size_t set_type_idx, const DataTypePtr & other_type) const;\n     void checkTypesEqual(size_t set_type_idx, const DataTypePtr & other_type) const;\n \n private:\ndiff --git a/src/Parsers/ASTFunction.h b/src/Parsers/ASTFunction.h\nindex effc9a6cea9b..f44eba30ee3d 100644\n--- a/src/Parsers/ASTFunction.h\n+++ b/src/Parsers/ASTFunction.h\n@@ -32,7 +32,7 @@ class ASTFunction : public ASTWithAlias\n template <typename... Args>\n std::shared_ptr<ASTFunction> makeASTFunction(const String & name, Args &&... args)\n {\n-    const auto function = std::make_shared<ASTFunction>();\n+    auto function = std::make_shared<ASTFunction>();\n \n     function->name = name;\n     function->arguments = std::make_shared<ASTExpressionList>();\ndiff --git a/src/Storages/MergeTree/KeyCondition.cpp b/src/Storages/MergeTree/KeyCondition.cpp\nindex 281f8511a592..d85a44a2f6ae 100644\n--- a/src/Storages/MergeTree/KeyCondition.cpp\n+++ b/src/Storages/MergeTree/KeyCondition.cpp\n@@ -617,17 +617,40 @@ bool KeyCondition::tryPrepareSetIndex(\n \n     const ASTPtr & right_arg = args[1];\n \n-    PreparedSetKey set_key;\n+    SetPtr prepared_set;\n     if (right_arg->as<ASTSubquery>() || right_arg->as<ASTIdentifier>())\n-        set_key = PreparedSetKey::forSubquery(*right_arg);\n+    {\n+        auto set_it = prepared_sets.find(PreparedSetKey::forSubquery(*right_arg));\n+        if (set_it == prepared_sets.end())\n+            return false;\n+\n+        prepared_set = set_it->second;\n+    }\n     else\n-        set_key = PreparedSetKey::forLiteral(*right_arg, data_types);\n+    {\n+        /// We have `PreparedSetKey::forLiteral` but it is useless here as we don't have enough information\n+        /// about types in left argument of the IN operator. Instead, we manually iterate through all the sets\n+        /// and find the one for the right arg based on the AST structure (getTreeHash), after that we check\n+        /// that the types it was prepared with are compatible with the types of the primary key.\n+        auto set_ast_hash = right_arg->getTreeHash();\n+        auto set_it = std::find_if(\n+            prepared_sets.begin(), prepared_sets.end(),\n+            [&](const auto & candidate_entry)\n+            {\n+                if (candidate_entry.first.ast_hash != set_ast_hash)\n+                    return false;\n \n-    auto set_it = prepared_sets.find(set_key);\n-    if (set_it == prepared_sets.end())\n-        return false;\n+                for (size_t i = 0; i < indexes_mapping.size(); ++i)\n+                    if (!candidate_entry.second->areTypesEqual(indexes_mapping[i].tuple_index, data_types[i]))\n+                        return false;\n \n-    const SetPtr & prepared_set = set_it->second;\n+                return true;\n+        });\n+        if (set_it == prepared_sets.end())\n+            return false;\n+\n+        prepared_set = set_it->second;\n+    }\n \n     /// The index can be prepared if the elements of the set were saved in advance.\n     if (!prepared_set->hasExplicitSetElements())\n@@ -635,7 +658,7 @@ bool KeyCondition::tryPrepareSetIndex(\n \n     prepared_set->checkColumnsNumber(left_args_count);\n     for (size_t i = 0; i < indexes_mapping.size(); ++i)\n-        prepared_set->checkTypesEqual(indexes_mapping[i].tuple_index, removeLowCardinality(data_types[i]));\n+        prepared_set->checkTypesEqual(indexes_mapping[i].tuple_index, data_types[i]);\n \n     out.set_index = std::make_shared<MergeTreeSetIndex>(prepared_set->getSetElements(), std::move(indexes_mapping));\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00612_pk_in_tuple.reference b/tests/queries/0_stateless/00612_pk_in_tuple.reference\nindex 74e8e642f20f..294ab7491c10 100644\n--- a/tests/queries/0_stateless/00612_pk_in_tuple.reference\n+++ b/tests/queries/0_stateless/00612_pk_in_tuple.reference\n@@ -35,3 +35,4 @@ max(key) from tab_00612 any left join (select key, arrayJoin(n.x) as val from ta\n max(key) from tab_00612 any left join (select key, arrayJoin(n.x) as val from tab_00612) using key where (key, val) in ((1, 1), (2, 2))\n 2\n 1\n+1\ndiff --git a/tests/queries/0_stateless/00612_pk_in_tuple.sql b/tests/queries/0_stateless/00612_pk_in_tuple.sql\nindex 499474d1b0a4..081e8a75092e 100644\n--- a/tests/queries/0_stateless/00612_pk_in_tuple.sql\n+++ b/tests/queries/0_stateless/00612_pk_in_tuple.sql\n@@ -43,4 +43,6 @@ CREATE TABLE tab_00612 (key1 Int32, id1  Int64, c1 Int64) ENGINE = MergeTree  PA\n insert into tab_00612 values ( -1, 1, 0 );\n SELECT count(*) FROM  tab_00612 PREWHERE id1 IN (1);\n \n+SELECT count() FROM tab_00612 WHERE (key1, id1) IN (-1, 1) AND (key1, 1) IN (-1, 1) SETTINGS force_primary_key = 1;\n+\n drop table tab_00612;\ndiff --git a/tests/queries/0_stateless/00612_pk_in_tuple_perf.reference b/tests/queries/0_stateless/00612_pk_in_tuple_perf.reference\nnew file mode 100644\nindex 000000000000..5bea74275a13\n--- /dev/null\n+++ b/tests/queries/0_stateless/00612_pk_in_tuple_perf.reference\n@@ -0,0 +1,4 @@\n+1\n+\t\t\"rows_read\": 2,\n+1\n+\t\t\"rows_read\": 2,\ndiff --git a/tests/queries/0_stateless/00612_pk_in_tuple_perf.sh b/tests/queries/0_stateless/00612_pk_in_tuple_perf.sh\nnew file mode 100755\nindex 000000000000..8f3e89098e62\n--- /dev/null\n+++ b/tests/queries/0_stateless/00612_pk_in_tuple_perf.sh\n@@ -0,0 +1,45 @@\n+#!/usr/bin/env bash\n+\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+. $CURDIR/../shell_config.sh\n+\n+\n+\n+$CLICKHOUSE_CLIENT --multiquery <<EOF\n+DROP TABLE IF EXISTS pk_in_tuple_perf;\n+CREATE TABLE pk_in_tuple_perf\n+(\n+    v UInt64,\n+    u UInt32\n+) ENGINE = MergeTree()\n+ORDER BY v\n+SETTINGS index_granularity = 1;\n+\n+INSERT INTO pk_in_tuple_perf SELECT number, number * 10 FROM numbers(100);\n+EOF\n+\n+query=\"SELECT count() FROM pk_in_tuple_perf WHERE (v, u) IN ((2, 10), (2, 20))\"\n+\n+$CLICKHOUSE_CLIENT --query \"$query\"\n+$CLICKHOUSE_CLIENT --query \"$query FORMAT JSON\" | grep \"rows_read\"\n+\n+## Test with non-const args in tuple\n+\n+$CLICKHOUSE_CLIENT --multiquery <<EOF\n+DROP TABLE IF EXISTS pk_in_tuple_perf_non_const;\n+CREATE TABLE pk_in_tuple_perf_non_const\n+(\n+    d Date,\n+    u UInt32\n+) ENGINE = MergeTree()\n+ORDER BY (u, d)\n+SETTINGS index_granularity = 1;\n+\n+INSERT INTO pk_in_tuple_perf_non_const SELECT today() - number, number FROM numbers(100);\n+EOF\n+\n+query=\"SELECT count() FROM pk_in_tuple_perf_non_const WHERE (u, d) IN ((0, today()), (1, today()))\"\n+\n+$CLICKHOUSE_CLIENT --query \"$query\"\n+$CLICKHOUSE_CLIENT --query \"$query FORMAT JSON\" | grep \"rows_read\"\n",
  "problem_statement": "Index not used for IN operator with literals\nUse hits table from Yandex.Metrica dataset. \r\nThe first query does IN over a subquery, and we can see that the index is used. On the other hand, when I write out the subquery output as literals, the index is not used. Note the reported number of processed rows, and merge tree optimizer output in server log.\r\n\r\n```\r\n/4/ :) select UserID from hits where (CounterID, EventTime) in (select CounterID, max(EventTime) from hits where CounterID = 25703952 and EventDate < '2014-03-20' group by CounterID)\r\n\r\n...\r\n\r\n1 rows in set. Elapsed: 0.008 sec. Processed 155.65 thousand rows, 1.26 MB (20.07 million rows/s., 162.94 MB/s.) \r\n\r\n2020.04.29 11:28:41.012947 [ 16461 ] {283cd210-3ad6-4bfd-b4fc-9c4d72ed9565} <Debug> InterpreterSelectQuery: MergeTreeWhereOptimizer: condition \"(CounterID, EventTime) IN ((SELECT CounterID, max(EventTime) FROM hits WHERE (CounterID = 25703952) AND (EventDate < '2014-03-20') GROUP BY CounterID) AS _subquery10)\" moved to PREWHERE\r\n2020.04.29 11:28:41.013204 [ 16461 ] {283cd210-3ad6-4bfd-b4fc-9c4d72ed9565} <Debug> default.hits (SelectExecutor): Key condition: (column 0 in 1-element set)\r\n2020.04.29 11:28:41.013214 [ 16461 ] {283cd210-3ad6-4bfd-b4fc-9c4d72ed9565} <Debug> default.hits (SelectExecutor): MinMax index condition: unknown\r\n2020.04.29 11:28:41.013246 [ 16461 ] {283cd210-3ad6-4bfd-b4fc-9c4d72ed9565} <Debug> default.hits (SelectExecutor): Selected 1 parts by date, 1 parts by key, 19 marks to read from 1 ranges\r\n2020.04.29 11:28:41.013367 [ 16461 ] {283cd210-3ad6-4bfd-b4fc-9c4d72ed9565} <Trace> default.hits (SelectExecutor): Reading approx. 155648 rows with 1 streams\r\n\r\n/4/ :) select UserID from hits where (CounterID, EventTime) in (toUInt32(25703952), toDateTime('2014-03-19 23:59:58'))\r\n\r\n...\r\n\r\n1 rows in set. Elapsed: 0.030 sec. Processed 8.87 million rows, 71.01 MB (291.92 million rows/s., 2.34 GB/s.) \r\n\r\n2020.04.29 11:22:35.593363 [ 16461 ] {df28294d-5bc4-4738-a47f-27e2a6ed2c12} <Debug> InterpreterSelectQuery: MergeTreeWhereOptimizer: condition \"(CounterID, EventTime) IN (toUInt32(25703952), toDateTime('2014-03-19 23:59:58'))\" moved to PREWHERE\r\n2020.04.29 11:22:35.593608 [ 16461 ] {df28294d-5bc4-4738-a47f-27e2a6ed2c12} <Debug> default.hits (SelectExecutor): Key condition: unknown\r\n2020.04.29 11:22:35.593619 [ 16461 ] {df28294d-5bc4-4738-a47f-27e2a6ed2c12} <Debug> default.hits (SelectExecutor): MinMax index condition: unknown\r\n2020.04.29 11:22:35.593684 [ 16461 ] {df28294d-5bc4-4738-a47f-27e2a6ed2c12} <Debug> default.hits (SelectExecutor): Selected 1 parts by date, 1 parts by key, 1094 marks to read from 1 ranges\r\n2020.04.29 11:22:35.593862 [ 16461 ] {df28294d-5bc4-4738-a47f-27e2a6ed2c12} <Trace> default.hits (SelectExecutor): Reading approx. 8873898 rows with 6 streams\r\n```\n",
  "hints_text": "Simple test case:\r\n\r\n```sql\r\ndrop database if exists test;\r\ncreate database test;\r\nuse test;\r\ncreate table z(v UInt64) engine = MergeTree() order by (v) settings index_granularity = 1;\r\ninsert into z select number from numbers(10000000);\r\nselect count() from z where (v, 0) IN ((1, 0));\r\n```\r\n\r\nLast good version available on docker hub: v19.1.5\r\nfirst bad version available on docker hub v19.3.3\r\n\r\nv19.1.6 - good https://github.com/clickhouse/clickhouse/compare/v19.1.6-stable...v19.1.7-stable \ud83e\udd14 \nCaused by https://github.com/ClickHouse/ClickHouse/commit/1168ba53157ab59ffc9c38f1d7c962c6c5d7a1f9 from https://github.com/ClickHouse/ClickHouse/pull/4099",
  "created_at": "2020-06-30T15:39:35Z"
}