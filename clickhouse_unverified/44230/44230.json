{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 44230,
  "instance_id": "ClickHouse__ClickHouse-44230",
  "issue_numbers": [
    "44185"
  ],
  "base_commit": "44fa78e742f088789709127a059b75e2f939a8e5",
  "patch": "diff --git a/src/Interpreters/InterpreterSelectQueryAnalyzer.cpp b/src/Interpreters/InterpreterSelectQueryAnalyzer.cpp\nindex ad3ec9b3189b..fb77f0997d8c 100644\n--- a/src/Interpreters/InterpreterSelectQueryAnalyzer.cpp\n+++ b/src/Interpreters/InterpreterSelectQueryAnalyzer.cpp\n@@ -112,6 +112,11 @@ QueryPlan && InterpreterSelectQueryAnalyzer::extractQueryPlan() &&\n     return std::move(planner).extractQueryPlan();\n }\n \n+void InterpreterSelectQueryAnalyzer::addStorageLimits(const StorageLimitsList & storage_limits)\n+{\n+    planner.addStorageLimits(storage_limits);\n+}\n+\n void InterpreterSelectQueryAnalyzer::extendQueryLogElemImpl(QueryLogElement & elem, const ASTPtr &, ContextPtr) const\n {\n     elem.query_kind = \"Select\";\ndiff --git a/src/Interpreters/InterpreterSelectQueryAnalyzer.h b/src/Interpreters/InterpreterSelectQueryAnalyzer.h\nindex 1dbe5ffccc6e..04dfe4e09486 100644\n--- a/src/Interpreters/InterpreterSelectQueryAnalyzer.h\n+++ b/src/Interpreters/InterpreterSelectQueryAnalyzer.h\n@@ -41,6 +41,8 @@ class InterpreterSelectQueryAnalyzer : public IInterpreter\n \n     QueryPlan && extractQueryPlan() &&;\n \n+    void addStorageLimits(const StorageLimitsList & storage_limits);\n+\n     bool supportsTransactions() const override { return true; }\n \n     bool ignoreLimits() const override { return select_query_options.ignore_limits; }\ndiff --git a/src/Planner/Planner.cpp b/src/Planner/Planner.cpp\nindex 0cb4f77035b6..d88766f3656a 100644\n--- a/src/Planner/Planner.cpp\n+++ b/src/Planner/Planner.cpp\n@@ -365,9 +365,9 @@ void Planner::buildQueryPlanIfNeeded()\n     select_query_info.query = select_query_info.original_query;\n     select_query_info.planner_context = planner_context;\n \n-    StorageLimitsList storage_limits;\n-    storage_limits.push_back(buildStorageLimits(*query_context, select_query_options));\n-    select_query_info.storage_limits = std::make_shared<StorageLimitsList>(storage_limits);\n+    auto current_storage_limits = storage_limits;\n+    current_storage_limits.push_back(buildStorageLimits(*query_context, select_query_options));\n+    select_query_info.storage_limits = std::make_shared<StorageLimitsList>(std::move(current_storage_limits));\n \n     collectTableExpressionData(query_tree, *planner_context);\n     checkStoragesSupportTransactions(planner_context);\n@@ -847,4 +847,10 @@ void Planner::buildQueryPlanIfNeeded()\n     extendQueryContextAndStoragesLifetime(query_plan, planner_context);\n }\n \n+void Planner::addStorageLimits(const StorageLimitsList & limits)\n+{\n+    for (const auto & limit : limits)\n+        storage_limits.push_back(limit);\n+}\n+\n }\ndiff --git a/src/Planner/Planner.h b/src/Planner/Planner.h\nindex de4ed5b92e9a..1de3e0efdeda 100644\n--- a/src/Planner/Planner.h\n+++ b/src/Planner/Planner.h\n@@ -45,11 +45,14 @@ class Planner\n         return std::move(query_plan);\n     }\n \n+    void addStorageLimits(const StorageLimitsList & limits);\n+\n private:\n     QueryTreeNodePtr query_tree;\n     QueryPlan query_plan;\n     SelectQueryOptions select_query_options;\n     PlannerContextPtr planner_context;\n+    StorageLimitsList storage_limits;\n };\n \n }\ndiff --git a/src/Storages/StorageView.cpp b/src/Storages/StorageView.cpp\nindex a55d7ad3c091..4f3003e68b09 100644\n--- a/src/Storages/StorageView.cpp\n+++ b/src/Storages/StorageView.cpp\n@@ -1,5 +1,6 @@\n #include <Interpreters/InterpreterSelectQuery.h>\n #include <Interpreters/InterpreterSelectWithUnionQuery.h>\n+#include <Interpreters/InterpreterSelectQueryAnalyzer.h>\n #include <Interpreters/Context.h>\n #include <DataTypes/DataTypeLowCardinality.h>\n \n@@ -123,9 +124,19 @@ void StorageView::read(\n     }\n \n     auto options = SelectQueryOptions(QueryProcessingStage::Complete, 0, false, query_info.settings_limit_offset_done);\n-    InterpreterSelectWithUnionQuery interpreter(current_inner_query, context, options, column_names);\n-    interpreter.addStorageLimits(*query_info.storage_limits);\n-    interpreter.buildQueryPlan(query_plan);\n+\n+    if (context->getSettingsRef().allow_experimental_analyzer)\n+    {\n+        InterpreterSelectQueryAnalyzer interpreter(current_inner_query, options, context);\n+        interpreter.addStorageLimits(*query_info.storage_limits);\n+        query_plan = std::move(interpreter).extractQueryPlan();\n+    }\n+    else\n+    {\n+        InterpreterSelectWithUnionQuery interpreter(current_inner_query, context, options, column_names);\n+        interpreter.addStorageLimits(*query_info.storage_limits);\n+        interpreter.buildQueryPlan(query_plan);\n+    }\n \n     /// It's expected that the columns read from storage are not constant.\n     /// Because method 'getSampleBlockForColumns' is used to obtain a structure of result in InterpreterSelectQuery.\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02500_analyzer_storage_view_crash_fix.reference b/tests/queries/0_stateless/02500_analyzer_storage_view_crash_fix.reference\nnew file mode 100644\nindex 000000000000..bfde072a7963\n--- /dev/null\n+++ b/tests/queries/0_stateless/02500_analyzer_storage_view_crash_fix.reference\n@@ -0,0 +1,1 @@\n+2\t2\ndiff --git a/tests/queries/0_stateless/02500_analyzer_storage_view_crash_fix.sql b/tests/queries/0_stateless/02500_analyzer_storage_view_crash_fix.sql\nnew file mode 100644\nindex 000000000000..8f4d14b95cc0\n--- /dev/null\n+++ b/tests/queries/0_stateless/02500_analyzer_storage_view_crash_fix.sql\n@@ -0,0 +1,19 @@\n+SET allow_experimental_analyzer = 1;\n+\n+DROP TABLE IF EXISTS test_table;\n+CREATE TABLE test_table\n+(\n+    f1 Int32,\n+    f2 Int32,\n+    pk Int32\n+) ENGINE = MergeTree PARTITION BY pk ORDER BY f1;\n+\n+INSERT INTO test_table SELECT number, number, number FROM numbers(10);\n+\n+DROP VIEW IF EXISTS test_view;\n+CREATE VIEW test_view AS SELECT f1, f2 FROM test_table WHERE pk = 2;\n+\n+SELECT * FROM test_view;\n+\n+DROP VIEW test_view;\n+DROP TABLE test_table;\n",
  "problem_statement": "Segmentation fault: DB::PlannerContext::getTableExpressionDataOrThrow\nhttps://s3.amazonaws.com/clickhouse-test-reports/0/092f87a60df8a4324bb0fbe53f7bc845d32c1e8d/fuzzer_astfuzzermsan//report.html\r\n\r\n**Describe the bug**\r\n```\r\n[ip-172-31-12-205] 2022.12.12 14:06:20.281976 [ 1195 ] <Fatal> BaseDaemon: ########################################\r\n[ip-172-31-12-205] 2022.12.12 14:06:20.282360 [ 1195 ] <Fatal> BaseDaemon: (version 22.12.1.1 (official build), build id: 876E6F97EFDC98B1A82E31AEAA1B236CABA2CCBA) (from thread 157) (query_id: ae6509d5-4686-4570-bee0-ec9955c22f79) (query: SELECT * FROM test_view ORDER BY f1 ASC, f2 ASC) Received signal Segmentation fault (11)\r\n[ip-172-31-12-205] 2022.12.12 14:06:20.282559 [ 1195 ] <Fatal> BaseDaemon: Address: 0x50 Access: read. Address not mapped to object.\r\n[ip-172-31-12-205] 2022.12.12 14:06:20.282741 [ 1195 ] <Fatal> BaseDaemon: Stack trace: 0x457e91e5 0x457e2485 0x4af5ea71 0x4af5d642 0x4af6df54 0x4af6ea18 0x4ae8a621 0x4aefb77f 0x4577d8ca 0x465a43b8 0x465978be 0x49e4c4b6 0x49e8d3be 0x55cde55e 0x55cdf8ef 0x5643fe4c 0x5643b3e2 0x564371a9 0x7fa0c8e0b609 0x7fa0c8d30133\r\n[ip-172-31-12-205] 2022.12.12 14:06:20.439687 [ 1195 ] <Fatal> BaseDaemon: 4.1. inlined from ./build_docker/../contrib/llvm-project/libcxx/include/__hash_table:768: std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<DB::IQueryTreeNode>, DB::TableExpressionData>, void*>*>*>>::size[abi:v15000]() const\r\n[ip-172-31-12-205] 2022.12.12 14:06:20.439947 [ 1195 ] <Fatal> BaseDaemon: 4.2. inlined from ./build_docker/../contrib/llvm-project/libcxx/include/__hash_table:1164: std::__1::__hash_table<std::__1::__hash_value_type<std::__1::shared_ptr<DB::IQueryTreeNode>, DB::TableExpressionData>, std::__1::__unordered_map_hasher<std::__1::shared_ptr<DB::IQueryTreeNode>, std::__1::__hash_value_type<std::__1::shared_ptr<DB::IQueryTreeNode>, DB::TableExpressionData>, std::__1::hash<std::__1::shared_ptr<DB::IQueryTreeNode>>, std::__1::equal_to<std::__1::shared_ptr<DB::IQueryTreeNode>>, true>, std::__1::__unordered_map_equal<std::__1::shared_ptr<DB::IQueryTreeNode>, std::__1::__hash_value_type<std::__1::shared_ptr<DB::IQueryTreeNode>, DB::TableExpressionData>, std::__1::equal_to<std::__1::shared_ptr<DB::IQueryTreeNode>>, std::__1::hash<std::__1::shared_ptr<DB::IQueryTreeNode>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::shared_ptr<DB::IQueryTreeNode>, DB::TableExpressionData>>>::bucket_count[abi:v15000]() const\r\n[ip-172-31-12-205] 2022.12.12 14:06:20.440061 [ 1195 ] <Fatal> BaseDaemon: 4. ./build_docker/../contrib/llvm-project/libcxx/include/__hash_table:2307: std::__1::__hash_iterator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::shared_ptr<DB::IQueryTreeNode>, DB::TableExpressionData>, void*>*> std::__1::__hash_table<std::__1::__hash_value_type<std::__1::shared_ptr<DB::IQueryTreeNode>, DB::TableExpressionData>, std::__1::__unordered_map_hasher<std::__1::shared_ptr<DB::IQueryTreeNode>, std::__1::__hash_value_type<std::__1::shared_ptr<DB::IQueryTreeNode>, DB::TableExpressionData>, std::__1::hash<std::__1::shared_ptr<DB::IQueryTreeNode>>, std::__1::equal_to<std::__1::shared_ptr<DB::IQueryTreeNode>>, true>, std::__1::__unordered_map_equal<std::__1::shared_ptr<DB::IQueryTreeNode>, std::__1::__hash_value_type<std::__1::shared_ptr<DB::IQueryTreeNode>, DB::TableExpressionData>, std::__1::equal_to<std::__1::shared_ptr<DB::IQueryTreeNode>>, std::__1::hash<std::__1::shared_ptr<DB::IQueryTreeNode>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::shared_ptr<DB::IQueryTreeNode>, DB::TableExpressionData>>>::find<std::__1::shared_ptr<DB::IQueryTreeNode>>(std::__1::shared_ptr<DB::IQueryTreeNode> const&) @ 0x457e91e5 in /workspace/clickhouse\r\n[ip-172-31-12-205] 2022.12.12 14:06:20.592677 [ 1195 ] <Fatal> BaseDaemon: 5. ./build_docker/../src/Planner/PlannerContext.cpp:0: DB::PlannerContext::getTableExpressionDataOrThrow(std::__1::shared_ptr<DB::IQueryTreeNode> const&) @ 0x457e2485 in /workspace/clickhouse\r\n[ip-172-31-12-205] 2022.12.12 14:06:21.626461 [ 1195 ] <Fatal> BaseDaemon: 6. ./build_docker/../src/Processors/QueryPlan/ReadFromMergeTree.cpp:0: DB::ReadFromMergeTree::selectRangesToRead(std::__1::vector<std::__1::shared_ptr<DB::IMergeTreeDataPart const>, std::__1::allocator<std::__1::shared_ptr<DB::IMergeTreeDataPart const>>>, std::__1::shared_ptr<DB::PrewhereInfo> const&, DB::ActionDAGNodes const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::SelectQueryInfo const&, std::__1::shared_ptr<DB::Context const>, unsigned long, std::__1::shared_ptr<std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, long, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const, long>>>>, DB::MergeTreeData const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, bool, Poco::Logger*) @ 0x4af5ea71 in /workspace/clickhouse\r\n[ip-172-31-12-205] 2022.12.12 14:06:22.646370 [ 1195 ] <Fatal> BaseDaemon: 7. ./build_docker/../src/Processors/QueryPlan/ReadFromMergeTree.cpp:0: DB::ReadFromMergeTree::selectRangesToRead(std::__1::vector<std::__1::shared_ptr<DB::IMergeTreeDataPart const>, std::__1::allocator<std::__1::shared_ptr<DB::IMergeTreeDataPart const>>>) const @ 0x4af5d642 in /workspace/clickhouse\r\n[ip-172-31-12-205] 2022.12.12 14:06:23.727306 [ 1195 ] <Fatal> BaseDaemon: 8. ./build_docker/../src/Processors/QueryPlan/ReadFromMergeTree.cpp:1206: DB::ReadFromMergeTree::getAnalysisResult() const @ 0x4af6df54 in /workspace/clickhouse\r\n[ip-172-31-12-205] 2022.12.12 14:06:24.600106 [ 1195 ] <Fatal> BaseDaemon: 9. ./build_docker/../src/Processors/QueryPlan/ReadFromMergeTree.cpp:0: DB::ReadFromMergeTree::initializePipeline(DB::QueryPipelineBuilder&, DB::BuildQueryPipelineSettings const&) @ 0x4af6ea18 in /workspace/clickhouse\r\n[ip-172-31-12-205] 2022.12.12 14:06:24.708944 [ 1195 ] <Fatal> BaseDaemon: 10. ./build_docker/../src/Processors/QueryPlan/ISourceStep.cpp:0: DB::ISourceStep::updatePipeline(std::__1::vector<std::__1::unique_ptr<DB::QueryPipelineBuilder, std::__1::default_delete<DB::QueryPipelineBuilder>>, std::__1::allocator<std::__1::unique_ptr<DB::QueryPipelineBuilder, std::__1::default_delete<DB::QueryPipelineBuilder>>>>, DB::BuildQueryPipelineSettings const&) @ 0x4ae8a621 in /workspace/clickhouse\r\n[ip-172-31-12-205] 2022.12.12 14:06:24.939660 [ 1195 ] <Fatal> BaseDaemon: 11. ./build_docker/../src/Processors/QueryPlan/QueryPlan.cpp:0: DB::QueryPlan::buildQueryPipeline(DB::QueryPlanOptimizationSettings const&, DB::BuildQueryPipelineSettings const&) @ 0x4aefb77f in /workspace/clickhouse\r\n[ip-172-31-12-205] 2022.12.12 14:06:25.063400 [ 1195 ] <Fatal> BaseDaemon: 12. ./build_docker/../src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:0: DB::InterpreterSelectQueryAnalyzer::execute() @ 0x4577d8ca in /workspace/clickhouse\r\n[ip-172-31-12-205] 2022.12.12 14:06:25.725276 [ 1195 ] <Fatal> BaseDaemon: 13. ./build_docker/../src/Interpreters/executeQuery.cpp:686: DB::executeQueryImpl(char const*, char const*, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x465a43b8 in /workspace/clickhouse\r\n[ip-172-31-12-205] 2022.12.12 14:06:26.446840 [ 1195 ] <Fatal> BaseDaemon: 14. ./build_docker/../src/Interpreters/executeQuery.cpp:1083: DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x465978be in /workspace/clickhouse\r\n[ip-172-31-12-205] 2022.12.12 14:06:26.914939 [ 1195 ] <Fatal> BaseDaemon: 15. ./build_docker/../src/Server/TCPHandler.cpp:374: DB::TCPHandler::runImpl() @ 0x49e4c4b6 in /workspace/clickhouse\r\n[ip-172-31-12-205] 2022.12.12 14:06:27.621919 [ 1195 ] <Fatal> BaseDaemon: 16. ./build_docker/../src/Server/TCPHandler.cpp:1902: DB::TCPHandler::run() @ 0x49e8d3be in /workspace/clickhouse\r\n[ip-172-31-12-205] 2022.12.12 14:06:27.642455 [ 1195 ] <Fatal> BaseDaemon: 17. ./build_docker/../contrib/poco/Net/src/TCPServerConnection.cpp:57: Poco::Net::TCPServerConnection::start() @ 0x55cde55e in /workspace/clickhouse\r\n[ip-172-31-12-205] 2022.12.12 14:06:27.679776 [ 1195 ] <Fatal> BaseDaemon: 18.1. inlined from ./build_docker/../contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:302: std::__1::unique_ptr<Poco::Net::TCPServerConnection, std::__1::default_delete<Poco::Net::TCPServerConnection>>::reset[abi:v15000](Poco::Net::TCPServerConnection*)\r\n[ip-172-31-12-205] 2022.12.12 14:06:27.679913 [ 1195 ] <Fatal> BaseDaemon: 18.2. inlined from ./build_docker/../contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:259: ~unique_ptr\r\n[ip-172-31-12-205] 2022.12.12 14:06:27.679995 [ 1195 ] <Fatal> BaseDaemon: 18. ./build_docker/../contrib/poco/Net/src/TCPServerDispatcher.cpp:116: Poco::Net::TCPServerDispatcher::run() @ 0x55cdf8ef in /workspace/clickhouse\r\n[ip-172-31-12-205] 2022.12.12 14:06:27.723980 [ 1195 ] <Fatal> BaseDaemon: 19. ./build_docker/../contrib/poco/Foundation/src/ThreadPool.cpp:0: Poco::PooledThread::run() @ 0x5643fe4c in /workspace/clickhouse\r\n[ip-172-31-12-205] 2022.12.12 14:06:27.768210 [ 1195 ] <Fatal> BaseDaemon: 20. ./build_docker/../contrib/poco/Foundation/src/Thread.cpp:56: Poco::(anonymous namespace)::RunnableHolder::run() @ 0x5643b3e2 in /workspace/clickhouse\r\n[ip-172-31-12-205] 2022.12.12 14:06:27.804457 [ 1195 ] <Fatal> BaseDaemon: 21. ./build_docker/../contrib/poco/Foundation/src/Thread_POSIX.cpp:360: Poco::ThreadImpl::runnableEntry(void*) @ 0x564371a9 in /workspace/clickhouse\r\n[ip-172-31-12-205] 2022.12.12 14:06:27.804578 [ 1195 ] <Fatal> BaseDaemon: 22. ? @ 0x7fa0c8e0b609 in ?\r\n[ip-172-31-12-205] 2022.12.12 14:06:27.804669 [ 1195 ] <Fatal> BaseDaemon: 23. __clone @ 0x7fa0c8d30133 in ?\r\n[ip-172-31-12-205] 2022.12.12 14:06:30.648294 [ 1195 ] <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: 3663193C8A04B8593463680CB8385041)\r\n```\n",
  "hints_text": "",
  "created_at": "2022-12-14T16:05:37Z"
}