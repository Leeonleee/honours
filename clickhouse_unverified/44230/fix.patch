diff --git a/src/Interpreters/InterpreterSelectQueryAnalyzer.cpp b/src/Interpreters/InterpreterSelectQueryAnalyzer.cpp
index ad3ec9b3189b..fb77f0997d8c 100644
--- a/src/Interpreters/InterpreterSelectQueryAnalyzer.cpp
+++ b/src/Interpreters/InterpreterSelectQueryAnalyzer.cpp
@@ -112,6 +112,11 @@ QueryPlan && InterpreterSelectQueryAnalyzer::extractQueryPlan() &&
     return std::move(planner).extractQueryPlan();
 }
 
+void InterpreterSelectQueryAnalyzer::addStorageLimits(const StorageLimitsList & storage_limits)
+{
+    planner.addStorageLimits(storage_limits);
+}
+
 void InterpreterSelectQueryAnalyzer::extendQueryLogElemImpl(QueryLogElement & elem, const ASTPtr &, ContextPtr) const
 {
     elem.query_kind = "Select";
diff --git a/src/Interpreters/InterpreterSelectQueryAnalyzer.h b/src/Interpreters/InterpreterSelectQueryAnalyzer.h
index 1dbe5ffccc6e..04dfe4e09486 100644
--- a/src/Interpreters/InterpreterSelectQueryAnalyzer.h
+++ b/src/Interpreters/InterpreterSelectQueryAnalyzer.h
@@ -41,6 +41,8 @@ class InterpreterSelectQueryAnalyzer : public IInterpreter
 
     QueryPlan && extractQueryPlan() &&;
 
+    void addStorageLimits(const StorageLimitsList & storage_limits);
+
     bool supportsTransactions() const override { return true; }
 
     bool ignoreLimits() const override { return select_query_options.ignore_limits; }
diff --git a/src/Planner/Planner.cpp b/src/Planner/Planner.cpp
index 0cb4f77035b6..d88766f3656a 100644
--- a/src/Planner/Planner.cpp
+++ b/src/Planner/Planner.cpp
@@ -365,9 +365,9 @@ void Planner::buildQueryPlanIfNeeded()
     select_query_info.query = select_query_info.original_query;
     select_query_info.planner_context = planner_context;
 
-    StorageLimitsList storage_limits;
-    storage_limits.push_back(buildStorageLimits(*query_context, select_query_options));
-    select_query_info.storage_limits = std::make_shared<StorageLimitsList>(storage_limits);
+    auto current_storage_limits = storage_limits;
+    current_storage_limits.push_back(buildStorageLimits(*query_context, select_query_options));
+    select_query_info.storage_limits = std::make_shared<StorageLimitsList>(std::move(current_storage_limits));
 
     collectTableExpressionData(query_tree, *planner_context);
     checkStoragesSupportTransactions(planner_context);
@@ -847,4 +847,10 @@ void Planner::buildQueryPlanIfNeeded()
     extendQueryContextAndStoragesLifetime(query_plan, planner_context);
 }
 
+void Planner::addStorageLimits(const StorageLimitsList & limits)
+{
+    for (const auto & limit : limits)
+        storage_limits.push_back(limit);
+}
+
 }
diff --git a/src/Planner/Planner.h b/src/Planner/Planner.h
index de4ed5b92e9a..1de3e0efdeda 100644
--- a/src/Planner/Planner.h
+++ b/src/Planner/Planner.h
@@ -45,11 +45,14 @@ class Planner
         return std::move(query_plan);
     }
 
+    void addStorageLimits(const StorageLimitsList & limits);
+
 private:
     QueryTreeNodePtr query_tree;
     QueryPlan query_plan;
     SelectQueryOptions select_query_options;
     PlannerContextPtr planner_context;
+    StorageLimitsList storage_limits;
 };
 
 }
diff --git a/src/Storages/StorageView.cpp b/src/Storages/StorageView.cpp
index a55d7ad3c091..4f3003e68b09 100644
--- a/src/Storages/StorageView.cpp
+++ b/src/Storages/StorageView.cpp
@@ -1,5 +1,6 @@
 #include <Interpreters/InterpreterSelectQuery.h>
 #include <Interpreters/InterpreterSelectWithUnionQuery.h>
+#include <Interpreters/InterpreterSelectQueryAnalyzer.h>
 #include <Interpreters/Context.h>
 #include <DataTypes/DataTypeLowCardinality.h>
 
@@ -123,9 +124,19 @@ void StorageView::read(
     }
 
     auto options = SelectQueryOptions(QueryProcessingStage::Complete, 0, false, query_info.settings_limit_offset_done);
-    InterpreterSelectWithUnionQuery interpreter(current_inner_query, context, options, column_names);
-    interpreter.addStorageLimits(*query_info.storage_limits);
-    interpreter.buildQueryPlan(query_plan);
+
+    if (context->getSettingsRef().allow_experimental_analyzer)
+    {
+        InterpreterSelectQueryAnalyzer interpreter(current_inner_query, options, context);
+        interpreter.addStorageLimits(*query_info.storage_limits);
+        query_plan = std::move(interpreter).extractQueryPlan();
+    }
+    else
+    {
+        InterpreterSelectWithUnionQuery interpreter(current_inner_query, context, options, column_names);
+        interpreter.addStorageLimits(*query_info.storage_limits);
+        interpreter.buildQueryPlan(query_plan);
+    }
 
     /// It's expected that the columns read from storage are not constant.
     /// Because method 'getSampleBlockForColumns' is used to obtain a structure of result in InterpreterSelectQuery.
