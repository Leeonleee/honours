diff --git a/dbms/src/Common/tests/gtest_rw_lock.cpp b/dbms/src/Common/tests/gtest_rw_lock.cpp
index c95be0d641d3..6e9b91dc048c 100644
--- a/dbms/src/Common/tests/gtest_rw_lock.cpp
+++ b/dbms/src/Common/tests/gtest_rw_lock.cpp
@@ -39,7 +39,7 @@ TEST(Common, RWLock_1)
             auto type = (std::uniform_int_distribution<>(0, 9)(gen) >= round) ? RWLockImpl::Read : RWLockImpl::Write;
             auto sleep_for = std::chrono::duration<int, std::micro>(std::uniform_int_distribution<>(1, 100)(gen));
 
-            auto lock = fifo_lock->getLock(type);
+            auto lock = fifo_lock->getLock(type, RWLockImpl::NO_QUERY);
 
             if (type == RWLockImpl::Write)
             {
@@ -99,7 +99,7 @@ TEST(Common, RWLock_Recursive)
     {
         for (int i = 0; i < 2 * cycles; ++i)
         {
-            auto lock = fifo_lock->getLock(RWLockImpl::Write);
+            auto lock = fifo_lock->getLock(RWLockImpl::Write, RWLockImpl::NO_QUERY);
 
             auto sleep_for = std::chrono::duration<int, std::micro>(std::uniform_int_distribution<>(1, 100)(gen));
             std::this_thread::sleep_for(sleep_for);
@@ -110,17 +110,17 @@ TEST(Common, RWLock_Recursive)
     {
         for (int i = 0; i < cycles; ++i)
         {
-            auto lock1 = fifo_lock->getLock(RWLockImpl::Read);
+            auto lock1 = fifo_lock->getLock(RWLockImpl::Read, RWLockImpl::NO_QUERY);
 
             auto sleep_for = std::chrono::duration<int, std::micro>(std::uniform_int_distribution<>(1, 100)(gen));
             std::this_thread::sleep_for(sleep_for);
 
-            auto lock2 = fifo_lock->getLock(RWLockImpl::Read);
+            auto lock2 = fifo_lock->getLock(RWLockImpl::Read, RWLockImpl::NO_QUERY);
 
-            EXPECT_ANY_THROW({fifo_lock->getLock(RWLockImpl::Write);});
+            EXPECT_ANY_THROW({fifo_lock->getLock(RWLockImpl::Write, RWLockImpl::NO_QUERY);});
         }
 
-        fifo_lock->getLock(RWLockImpl::Write);
+        fifo_lock->getLock(RWLockImpl::Write, RWLockImpl::NO_QUERY);
     });
 
     t1.join();
@@ -143,7 +143,7 @@ TEST(Common, RWLock_PerfTest_Readers)
             {
                 for (auto i = 0; i < cycles; ++i)
                 {
-                    auto lock = fifo_lock->getLock(RWLockImpl::Read);
+                    auto lock = fifo_lock->getLock(RWLockImpl::Read, RWLockImpl::NO_QUERY);
                 }
             };
 
diff --git a/dbms/tests/queries/0_stateless/00840_concurrent_select_and_drop_deadlock.reference b/dbms/tests/queries/0_stateless/00840_concurrent_select_and_drop_deadlock.reference
new file mode 100644
index 000000000000..6d8907676485
--- /dev/null
+++ b/dbms/tests/queries/0_stateless/00840_concurrent_select_and_drop_deadlock.reference
@@ -0,0 +1,1 @@
+did not deadlock
diff --git a/dbms/tests/queries/0_stateless/00840_concurrent_select_and_drop_deadlock.sh b/dbms/tests/queries/0_stateless/00840_concurrent_select_and_drop_deadlock.sh
new file mode 100755
index 000000000000..739ea6ba33c5
--- /dev/null
+++ b/dbms/tests/queries/0_stateless/00840_concurrent_select_and_drop_deadlock.sh
@@ -0,0 +1,15 @@
+#!/usr/bin/env bash
+
+set -e
+
+CURDIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
+. $CURDIR/../shell_config.sh
+
+for i in {1..200}; do echo "drop table if exists test.view" | $CLICKHOUSE_CLIENT; echo "create view test.view as select count(*),database,table from system.columns group by database,table" | $CLICKHOUSE_CLIENT; done &
+for i in {1..500}; do echo "select * from test.view order by table" | $CLICKHOUSE_CLIENT >/dev/null 2>&1 || true; done &
+
+wait
+
+echo "drop table test.view" | $CLICKHOUSE_CLIENT
+
+echo 'did not deadlock'
diff --git a/dbms/tests/queries/bugs/00840_select_drop.sh b/dbms/tests/queries/bugs/00840_select_drop.sh
deleted file mode 100755
index bcc10bfa54b8..000000000000
--- a/dbms/tests/queries/bugs/00840_select_drop.sh
+++ /dev/null
@@ -1,11 +0,0 @@
-#!/usr/bin/env bash
-
-set -e
-
-CURDIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
-. $CURDIR/../shell_config.sh
-
-for i in {1..1000}; do echo "ddl $i"; echo "drop table if exists test.view" | $CLICKHOUSE_CLIENT; echo "create view test.view as select count(*),database,table from system.columns group by database,table" | $CLICKHOUSE_CLIENT; done &
-for i in {1..1000}; do echo "select $i"; echo "select * from test.view order by table" | $CLICKHOUSE_CLIENT >/dev/null 2>&1 || true; done &
-
-wait
