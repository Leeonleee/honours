{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 43261,
  "instance_id": "ClickHouse__ClickHouse-43261",
  "issue_numbers": [
    "43257"
  ],
  "base_commit": "f40fd7a15124cd6d18f10b65b8bbaf9d7155d7e2",
  "patch": "diff --git a/src/Analyzer/ConstantNode.cpp b/src/Analyzer/ConstantNode.cpp\nindex ce3774a9bc4c..28b2f5a0ed07 100644\n--- a/src/Analyzer/ConstantNode.cpp\n+++ b/src/Analyzer/ConstantNode.cpp\n@@ -48,7 +48,7 @@ void ConstantNode::dumpTreeImpl(WriteBuffer & buffer, FormatState & format_state\n \n     if (getSourceExpression())\n     {\n-        buffer << '\\n' << std::string(indent + 2, ' ') << \"EXPRESSION \" << '\\n';\n+        buffer << '\\n' << std::string(indent + 2, ' ') << \"EXPRESSION\" << '\\n';\n         getSourceExpression()->dumpTreeImpl(buffer, format_state, indent + 4);\n     }\n }\ndiff --git a/src/Analyzer/Passes/OptimizeGroupByFunctionKeysPass.cpp b/src/Analyzer/Passes/OptimizeGroupByFunctionKeysPass.cpp\nnew file mode 100644\nindex 000000000000..a61a2388d765\n--- /dev/null\n+++ b/src/Analyzer/Passes/OptimizeGroupByFunctionKeysPass.cpp\n@@ -0,0 +1,113 @@\n+#include <Analyzer/Passes/OptimizeGroupByFunctionKeysPass.h>\n+#include <Analyzer/FunctionNode.h>\n+#include <Analyzer/HashUtils.h>\n+#include <Analyzer/IQueryTreeNode.h>\n+#include <Analyzer/InDepthQueryTreeVisitor.h>\n+#include <Analyzer/QueryNode.h>\n+\n+#include <algorithm>\n+#include <queue>\n+\n+namespace DB\n+{\n+\n+class OptimizeGroupByFunctionKeysVisitor : public InDepthQueryTreeVisitor<OptimizeGroupByFunctionKeysVisitor>\n+{\n+public:\n+    static bool needChildVisit(QueryTreeNodePtr & /*parent*/, QueryTreeNodePtr & child)\n+    {\n+        return !child->as<FunctionNode>();\n+    }\n+\n+    static void visitImpl(QueryTreeNodePtr & node)\n+    {\n+        auto * query = node->as<QueryNode>();\n+        if (!query)\n+            return;\n+\n+        if (!query->hasGroupBy())\n+            return;\n+\n+        auto & group_by = query->getGroupBy().getNodes();\n+        if (query->isGroupByWithGroupingSets())\n+        {\n+            for (auto & set : group_by)\n+            {\n+                auto & grouping_set = set->as<ListNode>()->getNodes();\n+                optimizeGroupingSet(grouping_set);\n+            }\n+        }\n+        else\n+            optimizeGroupingSet(group_by);\n+    }\n+private:\n+\n+    static bool canBeEliminated(QueryTreeNodePtr & node, const QueryTreeNodePtrWithHashSet & group_by_keys)\n+    {\n+        auto * function = node->as<FunctionNode>();\n+        if (!function || function->getArguments().getNodes().empty())\n+            return false;\n+\n+        QueryTreeNodes candidates;\n+        auto & function_arguments = function->getArguments().getNodes();\n+        for (auto it = function_arguments.rbegin(); it != function_arguments.rend(); ++it)\n+            candidates.push_back(*it);\n+\n+        // Using DFS we traverse function tree and try to find if it uses other keys as function arguments.\n+        // TODO: Also process CONSTANT here. We can simplify GROUP BY x, x + 1 to GROUP BY x.\n+        while (!candidates.empty())\n+        {\n+            auto candidate = candidates.back();\n+            candidates.pop_back();\n+\n+            bool found = group_by_keys.contains(candidate);\n+\n+            switch (candidate->getNodeType())\n+            {\n+                case QueryTreeNodeType::FUNCTION:\n+                {\n+                    auto * func = candidate->as<FunctionNode>();\n+                    auto & arguments = func->getArguments().getNodes();\n+                    if (arguments.empty())\n+                        return false;\n+\n+                    if (!found)\n+                    {\n+                        for (auto it = arguments.rbegin(); it != arguments.rend(); ++it)\n+                            candidates.push_back(*it);\n+                    }\n+                    break;\n+                }\n+                case QueryTreeNodeType::COLUMN:\n+                    if (!found)\n+                        return false;\n+                    break;\n+                default:\n+                    return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    static void optimizeGroupingSet(QueryTreeNodes & grouping_set)\n+    {\n+        QueryTreeNodePtrWithHashSet group_by_keys(grouping_set.begin(), grouping_set.end());\n+\n+        QueryTreeNodes new_group_by_keys;\n+        new_group_by_keys.reserve(grouping_set.size());\n+        for (auto & group_by_elem : grouping_set)\n+        {\n+            if (!canBeEliminated(group_by_elem, group_by_keys))\n+                new_group_by_keys.push_back(group_by_elem);\n+        }\n+\n+        grouping_set = std::move(new_group_by_keys);\n+    }\n+};\n+\n+void OptimizeGroupByFunctionKeysPass::run(QueryTreeNodePtr query_tree_node, ContextPtr /*context*/)\n+{\n+    OptimizeGroupByFunctionKeysVisitor().visit(query_tree_node);\n+}\n+\n+}\ndiff --git a/src/Analyzer/Passes/OptimizeGroupByFunctionKeysPass.h b/src/Analyzer/Passes/OptimizeGroupByFunctionKeysPass.h\nnew file mode 100644\nindex 000000000000..632960c45bbb\n--- /dev/null\n+++ b/src/Analyzer/Passes/OptimizeGroupByFunctionKeysPass.h\n@@ -0,0 +1,22 @@\n+#pragma once\n+\n+#include <Analyzer/IQueryTreePass.h>\n+\n+namespace DB\n+{\n+\n+/* Eliminates functions of other keys in GROUP BY section.\n+ * Ex.:    GROUP BY x, f(x)\n+ * Output: GROUP BY x\n+ */\n+class OptimizeGroupByFunctionKeysPass final : public IQueryTreePass\n+{\n+public:\n+    String getName() override { return \"OptimizeGroupByFunctionKeys\"; }\n+\n+    String getDescription() override { return \"Eliminates functions of other keys in GROUP BY section.\"; }\n+\n+    void run(QueryTreeNodePtr query_tree_node, ContextPtr context) override;\n+};\n+\n+}\ndiff --git a/src/Analyzer/QueryTreePassManager.cpp b/src/Analyzer/QueryTreePassManager.cpp\nindex 4a1ab74130df..bbcea363dcb2 100644\n--- a/src/Analyzer/QueryTreePassManager.cpp\n+++ b/src/Analyzer/QueryTreePassManager.cpp\n@@ -27,6 +27,7 @@\n #include <Analyzer/Passes/UniqInjectiveFunctionsEliminationPass.h>\n #include <Analyzer/Passes/OrderByLimitByDuplicateEliminationPass.h>\n #include <Analyzer/Passes/FuseFunctionsPass.h>\n+#include <Analyzer/Passes/OptimizeGroupByFunctionKeysPass.h>\n #include <Analyzer/Passes/IfTransformStringsToEnumPass.h>\n #include <Analyzer/Passes/OptimizeRedundantFunctionsInOrderByPass.h>\n \n@@ -125,7 +126,6 @@ class ValidationChecker : public InDepthQueryTreeVisitor<ValidationChecker>\n   * TODO: Support setting optimize_using_constraints.\n   * TODO: Support setting optimize_substitute_columns.\n   * TODO: Support GROUP BY injective function elimination.\n-  * TODO: Support GROUP BY functions of other keys elimination.\n   * TODO: Support setting optimize_move_functions_out_of_any.\n   * TODO: Support setting optimize_aggregators_of_group_by_keys.\n   * TODO: Support setting optimize_duplicate_order_by_and_distinct.\n@@ -232,6 +232,9 @@ void addQueryTreePasses(QueryTreePassManager & manager)\n     if (settings.optimize_injective_functions_inside_uniq)\n         manager.addPass(std::make_unique<UniqInjectiveFunctionsEliminationPass>());\n \n+    if (settings.optimize_group_by_function_keys)\n+        manager.addPass(std::make_unique<OptimizeGroupByFunctionKeysPass>());\n+\n     if (settings.optimize_multiif_to_if)\n         manager.addPass(std::make_unique<MultiIfToIfPass>());\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01300_group_by_other_keys_having.reference b/tests/queries/0_stateless/01300_group_by_other_keys_having.reference\nindex a470c19a2444..1f72535c40ce 100644\n--- a/tests/queries/0_stateless/01300_group_by_other_keys_having.reference\n+++ b/tests/queries/0_stateless/01300_group_by_other_keys_having.reference\n@@ -1,9 +1,25 @@\n+-- { echoOn }\n+SELECT round(avg(log(2) * number), 6) AS k FROM numbers(10000000) GROUP BY (number % 2) * (number % 3), number % 3, number % 2 HAVING avg(log(2) * number) > 3465735.3 ORDER BY k;\n 3465735.9028\n 3465735.9028\n 3465736.595947\n+SELECT round(avg(log(2) * number), 6) AS k FROM numbers(10000000) GROUP BY (number % 2) * (number % 3), number % 3, number % 2 HAVING avg(log(2) * number) > 3465735.3 ORDER BY k SETTINGS allow_experimental_analyzer=1;\n+3465735.9028\n+3465735.9028\n+3465736.595947\n+SELECT round(avg(log(2) * number), 6) AS k FROM numbers(10000000) GROUP BY number % 5, ((number % 5) * (number % 5)) HAVING ((number % 5) * (number % 5)) < 5 ORDER BY k;\n 3465734.169932\n 3465734.863079\n 3465735.556226\n+SELECT round(avg(log(2) * number), 6) AS k FROM numbers(10000000) GROUP BY number % 5, ((number % 5) * (number % 5)) HAVING ((number % 5) * (number % 5)) < 5 ORDER BY k SETTINGS allow_experimental_analyzer=1;\n+3465734.169932\n+3465734.863079\n+3465735.556226\n+SELECT (number % 5) * (number % 5) AS k FROM numbers(10000000) GROUP BY number % 5, ((number % 5) * (number % 5)) HAVING ((number % 5) * (number % 5)) < 5 ORDER BY k;\n+0\n+1\n+4\n+SELECT (number % 5) * (number % 5) AS k FROM numbers(10000000) GROUP BY number % 5, ((number % 5) * (number % 5)) HAVING ((number % 5) * (number % 5)) < 5 ORDER BY k SETTINGS allow_experimental_analyzer=1;\n 0\n 1\n 4\n@@ -14,16 +30,216 @@ GROUP BY\n     number % 2\n HAVING avg(log(2) * number) > 3465735.3\n ORDER BY k ASC\n+QUERY id: 0\n+  PROJECTION COLUMNS\n+    k Float64\n+  PROJECTION\n+    LIST id: 1, nodes: 1\n+      FUNCTION id: 2, function_name: multiply, function_type: ordinary, result_type: Float64\n+        ARGUMENTS\n+          LIST id: 3, nodes: 2\n+            CONSTANT id: 4, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n+              EXPRESSION\n+                FUNCTION id: 5, function_name: log, function_type: ordinary, result_type: Float64\n+                  ARGUMENTS\n+                    LIST id: 6, nodes: 1\n+                      CONSTANT id: 7, constant_value: UInt64_2, constant_value_type: UInt8\n+            FUNCTION id: 8, function_name: avg, function_type: aggregate, result_type: Float64\n+              ARGUMENTS\n+                LIST id: 9, nodes: 1\n+                  COLUMN id: 10, column_name: number, result_type: UInt64, source_id: 11\n+  JOIN TREE\n+    TABLE_FUNCTION id: 11, table_function_name: numbers\n+      ARGUMENTS\n+        LIST id: 12, nodes: 1\n+          CONSTANT id: 13, constant_value: UInt64_10000000, constant_value_type: UInt32\n+  GROUP BY\n+    LIST id: 14, nodes: 2\n+      FUNCTION id: 15, function_name: modulo, function_type: ordinary, result_type: UInt8\n+        ARGUMENTS\n+          LIST id: 16, nodes: 2\n+            COLUMN id: 17, column_name: number, result_type: UInt64, source_id: 11\n+            CONSTANT id: 18, constant_value: UInt64_3, constant_value_type: UInt8\n+      FUNCTION id: 19, function_name: modulo, function_type: ordinary, result_type: UInt8\n+        ARGUMENTS\n+          LIST id: 20, nodes: 2\n+            COLUMN id: 17, column_name: number, result_type: UInt64, source_id: 11\n+            CONSTANT id: 21, constant_value: UInt64_2, constant_value_type: UInt8\n+  HAVING\n+    FUNCTION id: 22, function_name: greater, function_type: ordinary, result_type: UInt8\n+      ARGUMENTS\n+        LIST id: 23, nodes: 2\n+          FUNCTION id: 24, function_name: multiply, function_type: ordinary, result_type: Float64\n+            ARGUMENTS\n+              LIST id: 25, nodes: 2\n+                CONSTANT id: 26, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n+                  EXPRESSION\n+                    FUNCTION id: 27, function_name: log, function_type: ordinary, result_type: Float64\n+                      ARGUMENTS\n+                        LIST id: 28, nodes: 1\n+                          CONSTANT id: 29, constant_value: UInt64_2, constant_value_type: UInt8\n+                FUNCTION id: 30, function_name: avg, function_type: aggregate, result_type: Float64\n+                  ARGUMENTS\n+                    LIST id: 31, nodes: 1\n+                      COLUMN id: 32, column_name: number, result_type: UInt64, source_id: 11\n+          CONSTANT id: 33, constant_value: Float64_3465735.3, constant_value_type: Float64\n+  ORDER BY\n+    LIST id: 34, nodes: 1\n+      SORT id: 35, sort_direction: ASCENDING, with_fill: 0\n+        EXPRESSION\n+          FUNCTION id: 36, function_name: multiply, function_type: ordinary, result_type: Float64\n+            ARGUMENTS\n+              LIST id: 37, nodes: 2\n+                CONSTANT id: 38, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n+                  EXPRESSION\n+                    FUNCTION id: 39, function_name: log, function_type: ordinary, result_type: Float64\n+                      ARGUMENTS\n+                        LIST id: 40, nodes: 1\n+                          CONSTANT id: 41, constant_value: UInt64_2, constant_value_type: UInt8\n+                FUNCTION id: 42, function_name: avg, function_type: aggregate, result_type: Float64\n+                  ARGUMENTS\n+                    LIST id: 43, nodes: 1\n+                      COLUMN id: 44, column_name: number, result_type: UInt64, source_id: 11\n SELECT avg(log(2) * number) AS k\n FROM numbers(10000000)\n WHERE ((number % 5) * (number % 5)) < 5\n GROUP BY number % 5\n ORDER BY k ASC\n+QUERY id: 0\n+  PROJECTION COLUMNS\n+    k Float64\n+  PROJECTION\n+    LIST id: 1, nodes: 1\n+      FUNCTION id: 2, function_name: multiply, function_type: ordinary, result_type: Float64\n+        ARGUMENTS\n+          LIST id: 3, nodes: 2\n+            CONSTANT id: 4, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n+              EXPRESSION\n+                FUNCTION id: 5, function_name: log, function_type: ordinary, result_type: Float64\n+                  ARGUMENTS\n+                    LIST id: 6, nodes: 1\n+                      CONSTANT id: 7, constant_value: UInt64_2, constant_value_type: UInt8\n+            FUNCTION id: 8, function_name: avg, function_type: aggregate, result_type: Float64\n+              ARGUMENTS\n+                LIST id: 9, nodes: 1\n+                  COLUMN id: 10, column_name: number, result_type: UInt64, source_id: 11\n+  JOIN TREE\n+    TABLE_FUNCTION id: 11, table_function_name: numbers\n+      ARGUMENTS\n+        LIST id: 12, nodes: 1\n+          CONSTANT id: 13, constant_value: UInt64_10000000, constant_value_type: UInt32\n+  GROUP BY\n+    LIST id: 14, nodes: 1\n+      FUNCTION id: 15, function_name: modulo, function_type: ordinary, result_type: UInt8\n+        ARGUMENTS\n+          LIST id: 16, nodes: 2\n+            COLUMN id: 17, column_name: number, result_type: UInt64, source_id: 11\n+            CONSTANT id: 18, constant_value: UInt64_5, constant_value_type: UInt8\n+  HAVING\n+    FUNCTION id: 19, function_name: less, function_type: ordinary, result_type: UInt8\n+      ARGUMENTS\n+        LIST id: 20, nodes: 2\n+          FUNCTION id: 21, function_name: multiply, function_type: ordinary, result_type: UInt16\n+            ARGUMENTS\n+              LIST id: 22, nodes: 2\n+                FUNCTION id: 23, function_name: modulo, function_type: ordinary, result_type: UInt8\n+                  ARGUMENTS\n+                    LIST id: 24, nodes: 2\n+                      COLUMN id: 17, column_name: number, result_type: UInt64, source_id: 11\n+                      CONSTANT id: 25, constant_value: UInt64_5, constant_value_type: UInt8\n+                FUNCTION id: 26, function_name: modulo, function_type: ordinary, result_type: UInt8\n+                  ARGUMENTS\n+                    LIST id: 27, nodes: 2\n+                      COLUMN id: 17, column_name: number, result_type: UInt64, source_id: 11\n+                      CONSTANT id: 28, constant_value: UInt64_5, constant_value_type: UInt8\n+          CONSTANT id: 29, constant_value: UInt64_5, constant_value_type: UInt8\n+  ORDER BY\n+    LIST id: 30, nodes: 1\n+      SORT id: 31, sort_direction: ASCENDING, with_fill: 0\n+        EXPRESSION\n+          FUNCTION id: 32, function_name: multiply, function_type: ordinary, result_type: Float64\n+            ARGUMENTS\n+              LIST id: 33, nodes: 2\n+                CONSTANT id: 34, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n+                  EXPRESSION\n+                    FUNCTION id: 35, function_name: log, function_type: ordinary, result_type: Float64\n+                      ARGUMENTS\n+                        LIST id: 36, nodes: 1\n+                          CONSTANT id: 37, constant_value: UInt64_2, constant_value_type: UInt8\n+                FUNCTION id: 38, function_name: avg, function_type: aggregate, result_type: Float64\n+                  ARGUMENTS\n+                    LIST id: 39, nodes: 1\n+                      COLUMN id: 40, column_name: number, result_type: UInt64, source_id: 11\n SELECT (number % 5) * (number % 5) AS k\n FROM numbers(10000000)\n WHERE ((number % 5) * (number % 5)) < 5\n GROUP BY number % 5\n ORDER BY k ASC\n+QUERY id: 0\n+  PROJECTION COLUMNS\n+    k UInt16\n+  PROJECTION\n+    LIST id: 1, nodes: 1\n+      FUNCTION id: 2, function_name: multiply, function_type: ordinary, result_type: UInt16\n+        ARGUMENTS\n+          LIST id: 3, nodes: 2\n+            FUNCTION id: 4, function_name: modulo, function_type: ordinary, result_type: UInt8\n+              ARGUMENTS\n+                LIST id: 5, nodes: 2\n+                  COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n+                  CONSTANT id: 8, constant_value: UInt64_5, constant_value_type: UInt8\n+            FUNCTION id: 9, function_name: modulo, function_type: ordinary, result_type: UInt8\n+              ARGUMENTS\n+                LIST id: 10, nodes: 2\n+                  COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n+                  CONSTANT id: 11, constant_value: UInt64_5, constant_value_type: UInt8\n+  JOIN TREE\n+    TABLE_FUNCTION id: 7, table_function_name: numbers\n+      ARGUMENTS\n+        LIST id: 12, nodes: 1\n+          CONSTANT id: 13, constant_value: UInt64_10000000, constant_value_type: UInt32\n+  GROUP BY\n+    LIST id: 14, nodes: 1\n+      FUNCTION id: 15, function_name: modulo, function_type: ordinary, result_type: UInt8\n+        ARGUMENTS\n+          LIST id: 16, nodes: 2\n+            COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n+            CONSTANT id: 17, constant_value: UInt64_5, constant_value_type: UInt8\n+  HAVING\n+    FUNCTION id: 18, function_name: less, function_type: ordinary, result_type: UInt8\n+      ARGUMENTS\n+        LIST id: 19, nodes: 2\n+          FUNCTION id: 20, function_name: multiply, function_type: ordinary, result_type: UInt16\n+            ARGUMENTS\n+              LIST id: 21, nodes: 2\n+                FUNCTION id: 22, function_name: modulo, function_type: ordinary, result_type: UInt8\n+                  ARGUMENTS\n+                    LIST id: 23, nodes: 2\n+                      COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n+                      CONSTANT id: 24, constant_value: UInt64_5, constant_value_type: UInt8\n+                FUNCTION id: 25, function_name: modulo, function_type: ordinary, result_type: UInt8\n+                  ARGUMENTS\n+                    LIST id: 26, nodes: 2\n+                      COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n+                      CONSTANT id: 27, constant_value: UInt64_5, constant_value_type: UInt8\n+          CONSTANT id: 28, constant_value: UInt64_5, constant_value_type: UInt8\n+  ORDER BY\n+    LIST id: 29, nodes: 1\n+      SORT id: 30, sort_direction: ASCENDING, with_fill: 0\n+        EXPRESSION\n+          FUNCTION id: 2, function_name: multiply, function_type: ordinary, result_type: UInt16\n+            ARGUMENTS\n+              LIST id: 3, nodes: 2\n+                FUNCTION id: 4, function_name: modulo, function_type: ordinary, result_type: UInt8\n+                  ARGUMENTS\n+                    LIST id: 5, nodes: 2\n+                      COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n+                      CONSTANT id: 8, constant_value: UInt64_5, constant_value_type: UInt8\n+                FUNCTION id: 9, function_name: modulo, function_type: ordinary, result_type: UInt8\n+                  ARGUMENTS\n+                    LIST id: 10, nodes: 2\n+                      COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n+                      CONSTANT id: 11, constant_value: UInt64_5, constant_value_type: UInt8\n 3465735.9028\n 3465735.9028\n 3465736.595947\n@@ -41,6 +257,89 @@ GROUP BY\n     number % 2\n HAVING avg(log(2) * number) > 3465735.3\n ORDER BY k ASC\n+QUERY id: 0\n+  PROJECTION COLUMNS\n+    k Float64\n+  PROJECTION\n+    LIST id: 1, nodes: 1\n+      FUNCTION id: 2, function_name: multiply, function_type: ordinary, result_type: Float64\n+        ARGUMENTS\n+          LIST id: 3, nodes: 2\n+            CONSTANT id: 4, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n+              EXPRESSION\n+                FUNCTION id: 5, function_name: log, function_type: ordinary, result_type: Float64\n+                  ARGUMENTS\n+                    LIST id: 6, nodes: 1\n+                      CONSTANT id: 7, constant_value: UInt64_2, constant_value_type: UInt8\n+            FUNCTION id: 8, function_name: avg, function_type: aggregate, result_type: Float64\n+              ARGUMENTS\n+                LIST id: 9, nodes: 1\n+                  COLUMN id: 10, column_name: number, result_type: UInt64, source_id: 11\n+  JOIN TREE\n+    TABLE_FUNCTION id: 11, table_function_name: numbers\n+      ARGUMENTS\n+        LIST id: 12, nodes: 1\n+          CONSTANT id: 13, constant_value: UInt64_10000000, constant_value_type: UInt32\n+  GROUP BY\n+    LIST id: 14, nodes: 3\n+      FUNCTION id: 15, function_name: multiply, function_type: ordinary, result_type: UInt16\n+        ARGUMENTS\n+          LIST id: 16, nodes: 2\n+            FUNCTION id: 17, function_name: modulo, function_type: ordinary, result_type: UInt8\n+              ARGUMENTS\n+                LIST id: 18, nodes: 2\n+                  COLUMN id: 19, column_name: number, result_type: UInt64, source_id: 11\n+                  CONSTANT id: 20, constant_value: UInt64_2, constant_value_type: UInt8\n+            FUNCTION id: 21, function_name: modulo, function_type: ordinary, result_type: UInt8\n+              ARGUMENTS\n+                LIST id: 22, nodes: 2\n+                  COLUMN id: 19, column_name: number, result_type: UInt64, source_id: 11\n+                  CONSTANT id: 23, constant_value: UInt64_3, constant_value_type: UInt8\n+      FUNCTION id: 24, function_name: modulo, function_type: ordinary, result_type: UInt8\n+        ARGUMENTS\n+          LIST id: 25, nodes: 2\n+            COLUMN id: 19, column_name: number, result_type: UInt64, source_id: 11\n+            CONSTANT id: 26, constant_value: UInt64_3, constant_value_type: UInt8\n+      FUNCTION id: 27, function_name: modulo, function_type: ordinary, result_type: UInt8\n+        ARGUMENTS\n+          LIST id: 28, nodes: 2\n+            COLUMN id: 19, column_name: number, result_type: UInt64, source_id: 11\n+            CONSTANT id: 29, constant_value: UInt64_2, constant_value_type: UInt8\n+  HAVING\n+    FUNCTION id: 30, function_name: greater, function_type: ordinary, result_type: UInt8\n+      ARGUMENTS\n+        LIST id: 31, nodes: 2\n+          FUNCTION id: 32, function_name: multiply, function_type: ordinary, result_type: Float64\n+            ARGUMENTS\n+              LIST id: 33, nodes: 2\n+                CONSTANT id: 34, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n+                  EXPRESSION\n+                    FUNCTION id: 35, function_name: log, function_type: ordinary, result_type: Float64\n+                      ARGUMENTS\n+                        LIST id: 36, nodes: 1\n+                          CONSTANT id: 37, constant_value: UInt64_2, constant_value_type: UInt8\n+                FUNCTION id: 38, function_name: avg, function_type: aggregate, result_type: Float64\n+                  ARGUMENTS\n+                    LIST id: 39, nodes: 1\n+                      COLUMN id: 40, column_name: number, result_type: UInt64, source_id: 11\n+          CONSTANT id: 41, constant_value: Float64_3465735.3, constant_value_type: Float64\n+  ORDER BY\n+    LIST id: 42, nodes: 1\n+      SORT id: 43, sort_direction: ASCENDING, with_fill: 0\n+        EXPRESSION\n+          FUNCTION id: 44, function_name: multiply, function_type: ordinary, result_type: Float64\n+            ARGUMENTS\n+              LIST id: 45, nodes: 2\n+                CONSTANT id: 46, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n+                  EXPRESSION\n+                    FUNCTION id: 47, function_name: log, function_type: ordinary, result_type: Float64\n+                      ARGUMENTS\n+                        LIST id: 48, nodes: 1\n+                          CONSTANT id: 49, constant_value: UInt64_2, constant_value_type: UInt8\n+                FUNCTION id: 50, function_name: avg, function_type: aggregate, result_type: Float64\n+                  ARGUMENTS\n+                    LIST id: 51, nodes: 1\n+                      COLUMN id: 52, column_name: number, result_type: UInt64, source_id: 11\n SELECT avg(log(2) * number) AS k\n FROM numbers(10000000)\n WHERE ((number % 5) * (number % 5)) < 5\ndiff --git a/tests/queries/0_stateless/01300_group_by_other_keys_having.sql b/tests/queries/0_stateless/01300_group_by_other_keys_having.sql\nindex e17438f749a2..d209c5f24e3a 100644\n--- a/tests/queries/0_stateless/01300_group_by_other_keys_having.sql\n+++ b/tests/queries/0_stateless/01300_group_by_other_keys_having.sql\n@@ -1,13 +1,24 @@\n set optimize_group_by_function_keys = 1;\n \n+\n+-- { echoOn }\n SELECT round(avg(log(2) * number), 6) AS k FROM numbers(10000000) GROUP BY (number % 2) * (number % 3), number % 3, number % 2 HAVING avg(log(2) * number) > 3465735.3 ORDER BY k;\n+SELECT round(avg(log(2) * number), 6) AS k FROM numbers(10000000) GROUP BY (number % 2) * (number % 3), number % 3, number % 2 HAVING avg(log(2) * number) > 3465735.3 ORDER BY k SETTINGS allow_experimental_analyzer=1;\n+\n SELECT round(avg(log(2) * number), 6) AS k FROM numbers(10000000) GROUP BY number % 5, ((number % 5) * (number % 5)) HAVING ((number % 5) * (number % 5)) < 5 ORDER BY k;\n+SELECT round(avg(log(2) * number), 6) AS k FROM numbers(10000000) GROUP BY number % 5, ((number % 5) * (number % 5)) HAVING ((number % 5) * (number % 5)) < 5 ORDER BY k SETTINGS allow_experimental_analyzer=1;\n+\n SELECT (number % 5) * (number % 5) AS k FROM numbers(10000000) GROUP BY number % 5, ((number % 5) * (number % 5)) HAVING ((number % 5) * (number % 5)) < 5 ORDER BY k;\n+SELECT (number % 5) * (number % 5) AS k FROM numbers(10000000) GROUP BY number % 5, ((number % 5) * (number % 5)) HAVING ((number % 5) * (number % 5)) < 5 ORDER BY k SETTINGS allow_experimental_analyzer=1;\n \n+-- { echoOff }\n \n EXPLAIN SYNTAX SELECT avg(log(2) * number) AS k FROM numbers(10000000) GROUP BY (number % 2) * (number % 3), number % 3, number % 2 HAVING avg(log(2) * number) > 3465735.3 ORDER BY k;\n+EXPLAIN QUERY TREE run_passes=1 SELECT avg(log(2) * number) AS k FROM numbers(10000000) GROUP BY (number % 2) * (number % 3), number % 3, number % 2 HAVING avg(log(2) * number) > 3465735.3 ORDER BY k;\n EXPLAIN SYNTAX SELECT avg(log(2) * number) AS k FROM numbers(10000000) GROUP BY number % 5, ((number % 5) * (number % 5)) HAVING ((number % 5) * (number % 5)) < 5 ORDER BY k;\n+EXPLAIN QUERY TREE run_passes=1 SELECT avg(log(2) * number) AS k FROM numbers(10000000) GROUP BY number % 5, ((number % 5) * (number % 5)) HAVING ((number % 5) * (number % 5)) < 5 ORDER BY k;\n EXPLAIN SYNTAX SELECT (number % 5) * (number % 5) AS k FROM numbers(10000000) GROUP BY number % 5, ((number % 5) * (number % 5)) HAVING ((number % 5) * (number % 5)) < 5 ORDER BY k;\n+EXPLAIN QUERY TREE run_passes=1 SELECT (number % 5) * (number % 5) AS k FROM numbers(10000000) GROUP BY number % 5, ((number % 5) * (number % 5)) HAVING ((number % 5) * (number % 5)) < 5 ORDER BY k;\n \n set optimize_group_by_function_keys = 0;\n \n@@ -16,5 +27,6 @@ SELECT round(avg(log(2) * number), 6) AS k FROM numbers(10000000) GROUP BY numbe\n SELECT (number % 5) * (number % 5) AS k FROM numbers(10000000) GROUP BY number % 5, ((number % 5) * (number % 5)) HAVING ((number % 5) * (number % 5)) < 5 ORDER BY k;\n \n EXPLAIN SYNTAX SELECT avg(log(2) * number) AS k FROM numbers(10000000) GROUP BY (number % 2) * (number % 3), number % 3, number % 2 HAVING avg(log(2) * number) > 3465735.3 ORDER BY k;\n+EXPLAIN QUERY TREE run_passes=1 SELECT avg(log(2) * number) AS k FROM numbers(10000000) GROUP BY (number % 2) * (number % 3), number % 3, number % 2 HAVING avg(log(2) * number) > 3465735.3 ORDER BY k;\n EXPLAIN SYNTAX SELECT avg(log(2) * number) AS k FROM numbers(10000000) GROUP BY number % 5, ((number % 5) * (number % 5)) HAVING ((number % 5) * (number % 5)) < 5 ORDER BY k;\n EXPLAIN SYNTAX SELECT (number % 5) * (number % 5) AS k FROM numbers(10000000) GROUP BY number % 5, ((number % 5) * (number % 5)) HAVING ((number % 5) * (number % 5)) < 5 ORDER BY k;\ndiff --git a/tests/queries/0_stateless/02129_window_functions_disable_optimizations.reference b/tests/queries/0_stateless/02129_window_functions_disable_optimizations.reference\nindex f66c81021c9b..12a3b589371f 100644\n--- a/tests/queries/0_stateless/02129_window_functions_disable_optimizations.reference\n+++ b/tests/queries/0_stateless/02129_window_functions_disable_optimizations.reference\n@@ -34,3 +34,9 @@\n 5776226.273617\n 5777381.749967\n 5778537.226317\n+5772761.230862\n+5773916.014064\n+5775070.797267\n+5776226.273617\n+5777381.749967\n+5778537.226317\ndiff --git a/tests/queries/0_stateless/02129_window_functions_disable_optimizations.sql b/tests/queries/0_stateless/02129_window_functions_disable_optimizations.sql\nindex cfe9f20d3783..0f12bc2eb9cd 100644\n--- a/tests/queries/0_stateless/02129_window_functions_disable_optimizations.sql\n+++ b/tests/queries/0_stateless/02129_window_functions_disable_optimizations.sql\n@@ -25,3 +25,8 @@ SET optimize_group_by_function_keys = 1;\n SELECT round(sum(log(2) * number), 6) AS k FROM numbers(10000)\n GROUP BY (number % 2) * (number % 3), number % 3, number % 2\n HAVING sum(log(2) * number) > 346.57353 ORDER BY k;\n+\n+SELECT round(sum(log(2) * number), 6) AS k FROM numbers(10000)\n+GROUP BY (number % 2) * (number % 3), number % 3, number % 2\n+HAVING sum(log(2) * number) > 346.57353 ORDER BY k\n+SETTINGS allow_experimental_analyzer=1;\ndiff --git a/tests/queries/0_stateless/02481_analyzer_optimize_aggregation_arithmetics.reference b/tests/queries/0_stateless/02481_analyzer_optimize_aggregation_arithmetics.reference\nindex ab6d42000fef..22dda253066d 100644\n--- a/tests/queries/0_stateless/02481_analyzer_optimize_aggregation_arithmetics.reference\n+++ b/tests/queries/0_stateless/02481_analyzer_optimize_aggregation_arithmetics.reference\n@@ -10,7 +10,7 @@ QUERY id: 0\n         ARGUMENTS\n           LIST id: 3, nodes: 2\n             CONSTANT id: 4, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n-              EXPRESSION \n+              EXPRESSION\n                 FUNCTION id: 5, function_name: log, function_type: ordinary, result_type: Float64\n                   ARGUMENTS\n                     LIST id: 6, nodes: 1\n@@ -38,7 +38,7 @@ QUERY id: 0\n                 LIST id: 5, nodes: 1\n                   COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n             CONSTANT id: 8, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n-              EXPRESSION \n+              EXPRESSION\n                 FUNCTION id: 9, function_name: log, function_type: ordinary, result_type: Float64\n                   ARGUMENTS\n                     LIST id: 10, nodes: 1\ndiff --git a/tests/queries/0_stateless/02481_analyzer_optimize_grouping_sets_keys.reference b/tests/queries/0_stateless/02481_analyzer_optimize_grouping_sets_keys.reference\nnew file mode 100644\nindex 000000000000..fdab24700acf\n--- /dev/null\n+++ b/tests/queries/0_stateless/02481_analyzer_optimize_grouping_sets_keys.reference\n@@ -0,0 +1,248 @@\n+QUERY id: 0, group_by_type: grouping_sets\n+  PROJECTION COLUMNS\n+    k Float64\n+  PROJECTION\n+    LIST id: 1, nodes: 1\n+      FUNCTION id: 2, function_name: multiply, function_type: ordinary, result_type: Float64\n+        ARGUMENTS\n+          LIST id: 3, nodes: 2\n+            CONSTANT id: 4, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n+              EXPRESSION\n+                FUNCTION id: 5, function_name: log, function_type: ordinary, result_type: Float64\n+                  ARGUMENTS\n+                    LIST id: 6, nodes: 1\n+                      CONSTANT id: 7, constant_value: UInt64_2, constant_value_type: UInt8\n+            FUNCTION id: 8, function_name: avg, function_type: aggregate, result_type: Float64\n+              ARGUMENTS\n+                LIST id: 9, nodes: 1\n+                  COLUMN id: 10, column_name: number, result_type: UInt64, source_id: 11\n+  JOIN TREE\n+    TABLE_FUNCTION id: 11, table_function_name: numbers\n+      ARGUMENTS\n+        LIST id: 12, nodes: 1\n+          CONSTANT id: 13, constant_value: UInt64_10000000, constant_value_type: UInt32\n+  GROUP BY\n+    LIST id: 14, nodes: 3\n+      LIST id: 15, nodes: 1\n+        FUNCTION id: 16, function_name: multiply, function_type: ordinary, result_type: UInt16\n+          ARGUMENTS\n+            LIST id: 17, nodes: 2\n+              FUNCTION id: 18, function_name: modulo, function_type: ordinary, result_type: UInt8\n+                ARGUMENTS\n+                  LIST id: 19, nodes: 2\n+                    COLUMN id: 20, column_name: number, result_type: UInt64, source_id: 11\n+                    CONSTANT id: 21, constant_value: UInt64_2, constant_value_type: UInt8\n+              FUNCTION id: 22, function_name: modulo, function_type: ordinary, result_type: UInt8\n+                ARGUMENTS\n+                  LIST id: 23, nodes: 2\n+                    COLUMN id: 20, column_name: number, result_type: UInt64, source_id: 11\n+                    CONSTANT id: 24, constant_value: UInt64_3, constant_value_type: UInt8\n+      LIST id: 25, nodes: 1\n+        FUNCTION id: 26, function_name: modulo, function_type: ordinary, result_type: UInt8\n+          ARGUMENTS\n+            LIST id: 27, nodes: 2\n+              COLUMN id: 20, column_name: number, result_type: UInt64, source_id: 11\n+              CONSTANT id: 28, constant_value: UInt64_3, constant_value_type: UInt8\n+      LIST id: 29, nodes: 1\n+        FUNCTION id: 30, function_name: modulo, function_type: ordinary, result_type: UInt8\n+          ARGUMENTS\n+            LIST id: 31, nodes: 2\n+              COLUMN id: 20, column_name: number, result_type: UInt64, source_id: 11\n+              CONSTANT id: 32, constant_value: UInt64_2, constant_value_type: UInt8\n+  HAVING\n+    FUNCTION id: 33, function_name: greater, function_type: ordinary, result_type: UInt8\n+      ARGUMENTS\n+        LIST id: 34, nodes: 2\n+          FUNCTION id: 35, function_name: multiply, function_type: ordinary, result_type: Float64\n+            ARGUMENTS\n+              LIST id: 36, nodes: 2\n+                CONSTANT id: 37, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n+                  EXPRESSION\n+                    FUNCTION id: 38, function_name: log, function_type: ordinary, result_type: Float64\n+                      ARGUMENTS\n+                        LIST id: 39, nodes: 1\n+                          CONSTANT id: 40, constant_value: UInt64_2, constant_value_type: UInt8\n+                FUNCTION id: 41, function_name: avg, function_type: aggregate, result_type: Float64\n+                  ARGUMENTS\n+                    LIST id: 42, nodes: 1\n+                      COLUMN id: 43, column_name: number, result_type: UInt64, source_id: 11\n+          CONSTANT id: 44, constant_value: Float64_3465735.3, constant_value_type: Float64\n+  ORDER BY\n+    LIST id: 45, nodes: 1\n+      SORT id: 46, sort_direction: ASCENDING, with_fill: 0\n+        EXPRESSION\n+          FUNCTION id: 47, function_name: multiply, function_type: ordinary, result_type: Float64\n+            ARGUMENTS\n+              LIST id: 48, nodes: 2\n+                CONSTANT id: 49, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n+                  EXPRESSION\n+                    FUNCTION id: 50, function_name: log, function_type: ordinary, result_type: Float64\n+                      ARGUMENTS\n+                        LIST id: 51, nodes: 1\n+                          CONSTANT id: 52, constant_value: UInt64_2, constant_value_type: UInt8\n+                FUNCTION id: 53, function_name: avg, function_type: aggregate, result_type: Float64\n+                  ARGUMENTS\n+                    LIST id: 54, nodes: 1\n+                      COLUMN id: 55, column_name: number, result_type: UInt64, source_id: 11\n+QUERY id: 0, group_by_type: grouping_sets\n+  PROJECTION COLUMNS\n+    k Float64\n+  PROJECTION\n+    LIST id: 1, nodes: 1\n+      FUNCTION id: 2, function_name: multiply, function_type: ordinary, result_type: Float64\n+        ARGUMENTS\n+          LIST id: 3, nodes: 2\n+            CONSTANT id: 4, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n+              EXPRESSION\n+                FUNCTION id: 5, function_name: log, function_type: ordinary, result_type: Float64\n+                  ARGUMENTS\n+                    LIST id: 6, nodes: 1\n+                      CONSTANT id: 7, constant_value: UInt64_2, constant_value_type: UInt8\n+            FUNCTION id: 8, function_name: avg, function_type: aggregate, result_type: Float64\n+              ARGUMENTS\n+                LIST id: 9, nodes: 1\n+                  COLUMN id: 10, column_name: number, result_type: UInt64, source_id: 11\n+  JOIN TREE\n+    TABLE_FUNCTION id: 11, table_function_name: numbers\n+      ARGUMENTS\n+        LIST id: 12, nodes: 1\n+          CONSTANT id: 13, constant_value: UInt64_10000000, constant_value_type: UInt32\n+  GROUP BY\n+    LIST id: 14, nodes: 2\n+      LIST id: 15, nodes: 2\n+        FUNCTION id: 16, function_name: modulo, function_type: ordinary, result_type: UInt8\n+          ARGUMENTS\n+            LIST id: 17, nodes: 2\n+              COLUMN id: 18, column_name: number, result_type: UInt64, source_id: 11\n+              CONSTANT id: 19, constant_value: UInt64_3, constant_value_type: UInt8\n+        FUNCTION id: 20, function_name: modulo, function_type: ordinary, result_type: UInt8\n+          ARGUMENTS\n+            LIST id: 21, nodes: 2\n+              COLUMN id: 18, column_name: number, result_type: UInt64, source_id: 11\n+              CONSTANT id: 22, constant_value: UInt64_2, constant_value_type: UInt8\n+      LIST id: 23, nodes: 1\n+        FUNCTION id: 24, function_name: modulo, function_type: ordinary, result_type: UInt8\n+          ARGUMENTS\n+            LIST id: 25, nodes: 2\n+              COLUMN id: 18, column_name: number, result_type: UInt64, source_id: 11\n+              CONSTANT id: 26, constant_value: UInt64_4, constant_value_type: UInt8\n+  HAVING\n+    FUNCTION id: 27, function_name: greater, function_type: ordinary, result_type: UInt8\n+      ARGUMENTS\n+        LIST id: 28, nodes: 2\n+          FUNCTION id: 29, function_name: multiply, function_type: ordinary, result_type: Float64\n+            ARGUMENTS\n+              LIST id: 30, nodes: 2\n+                CONSTANT id: 31, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n+                  EXPRESSION\n+                    FUNCTION id: 32, function_name: log, function_type: ordinary, result_type: Float64\n+                      ARGUMENTS\n+                        LIST id: 33, nodes: 1\n+                          CONSTANT id: 34, constant_value: UInt64_2, constant_value_type: UInt8\n+                FUNCTION id: 35, function_name: avg, function_type: aggregate, result_type: Float64\n+                  ARGUMENTS\n+                    LIST id: 36, nodes: 1\n+                      COLUMN id: 37, column_name: number, result_type: UInt64, source_id: 11\n+          CONSTANT id: 38, constant_value: Float64_3465735.3, constant_value_type: Float64\n+  ORDER BY\n+    LIST id: 39, nodes: 1\n+      SORT id: 40, sort_direction: ASCENDING, with_fill: 0\n+        EXPRESSION\n+          FUNCTION id: 41, function_name: multiply, function_type: ordinary, result_type: Float64\n+            ARGUMENTS\n+              LIST id: 42, nodes: 2\n+                CONSTANT id: 43, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n+                  EXPRESSION\n+                    FUNCTION id: 44, function_name: log, function_type: ordinary, result_type: Float64\n+                      ARGUMENTS\n+                        LIST id: 45, nodes: 1\n+                          CONSTANT id: 46, constant_value: UInt64_2, constant_value_type: UInt8\n+                FUNCTION id: 47, function_name: avg, function_type: aggregate, result_type: Float64\n+                  ARGUMENTS\n+                    LIST id: 48, nodes: 1\n+                      COLUMN id: 49, column_name: number, result_type: UInt64, source_id: 11\n+QUERY id: 0, group_by_type: grouping_sets\n+  PROJECTION COLUMNS\n+    k Float64\n+  PROJECTION\n+    LIST id: 1, nodes: 1\n+      FUNCTION id: 2, function_name: multiply, function_type: ordinary, result_type: Float64\n+        ARGUMENTS\n+          LIST id: 3, nodes: 2\n+            CONSTANT id: 4, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n+              EXPRESSION\n+                FUNCTION id: 5, function_name: log, function_type: ordinary, result_type: Float64\n+                  ARGUMENTS\n+                    LIST id: 6, nodes: 1\n+                      CONSTANT id: 7, constant_value: UInt64_2, constant_value_type: UInt8\n+            FUNCTION id: 8, function_name: avg, function_type: aggregate, result_type: Float64\n+              ARGUMENTS\n+                LIST id: 9, nodes: 1\n+                  COLUMN id: 10, column_name: number, result_type: UInt64, source_id: 11\n+  JOIN TREE\n+    TABLE_FUNCTION id: 11, table_function_name: numbers\n+      ARGUMENTS\n+        LIST id: 12, nodes: 1\n+          CONSTANT id: 13, constant_value: UInt64_10000000, constant_value_type: UInt32\n+  GROUP BY\n+    LIST id: 14, nodes: 2\n+      LIST id: 15, nodes: 2\n+        FUNCTION id: 16, function_name: multiply, function_type: ordinary, result_type: UInt16\n+          ARGUMENTS\n+            LIST id: 17, nodes: 2\n+              FUNCTION id: 18, function_name: modulo, function_type: ordinary, result_type: UInt8\n+                ARGUMENTS\n+                  LIST id: 19, nodes: 2\n+                    COLUMN id: 20, column_name: number, result_type: UInt64, source_id: 11\n+                    CONSTANT id: 21, constant_value: UInt64_2, constant_value_type: UInt8\n+              FUNCTION id: 22, function_name: modulo, function_type: ordinary, result_type: UInt8\n+                ARGUMENTS\n+                  LIST id: 23, nodes: 2\n+                    COLUMN id: 20, column_name: number, result_type: UInt64, source_id: 11\n+                    CONSTANT id: 24, constant_value: UInt64_3, constant_value_type: UInt8\n+        FUNCTION id: 25, function_name: modulo, function_type: ordinary, result_type: UInt8\n+          ARGUMENTS\n+            LIST id: 26, nodes: 2\n+              COLUMN id: 20, column_name: number, result_type: UInt64, source_id: 11\n+              CONSTANT id: 27, constant_value: UInt64_3, constant_value_type: UInt8\n+      LIST id: 28, nodes: 1\n+        FUNCTION id: 29, function_name: modulo, function_type: ordinary, result_type: UInt8\n+          ARGUMENTS\n+            LIST id: 30, nodes: 2\n+              COLUMN id: 20, column_name: number, result_type: UInt64, source_id: 11\n+              CONSTANT id: 31, constant_value: UInt64_2, constant_value_type: UInt8\n+  HAVING\n+    FUNCTION id: 32, function_name: greater, function_type: ordinary, result_type: UInt8\n+      ARGUMENTS\n+        LIST id: 33, nodes: 2\n+          FUNCTION id: 34, function_name: multiply, function_type: ordinary, result_type: Float64\n+            ARGUMENTS\n+              LIST id: 35, nodes: 2\n+                CONSTANT id: 36, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n+                  EXPRESSION\n+                    FUNCTION id: 37, function_name: log, function_type: ordinary, result_type: Float64\n+                      ARGUMENTS\n+                        LIST id: 38, nodes: 1\n+                          CONSTANT id: 39, constant_value: UInt64_2, constant_value_type: UInt8\n+                FUNCTION id: 40, function_name: avg, function_type: aggregate, result_type: Float64\n+                  ARGUMENTS\n+                    LIST id: 41, nodes: 1\n+                      COLUMN id: 42, column_name: number, result_type: UInt64, source_id: 11\n+          CONSTANT id: 43, constant_value: Float64_3465735.3, constant_value_type: Float64\n+  ORDER BY\n+    LIST id: 44, nodes: 1\n+      SORT id: 45, sort_direction: ASCENDING, with_fill: 0\n+        EXPRESSION\n+          FUNCTION id: 46, function_name: multiply, function_type: ordinary, result_type: Float64\n+            ARGUMENTS\n+              LIST id: 47, nodes: 2\n+                CONSTANT id: 48, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n+                  EXPRESSION\n+                    FUNCTION id: 49, function_name: log, function_type: ordinary, result_type: Float64\n+                      ARGUMENTS\n+                        LIST id: 50, nodes: 1\n+                          CONSTANT id: 51, constant_value: UInt64_2, constant_value_type: UInt8\n+                FUNCTION id: 52, function_name: avg, function_type: aggregate, result_type: Float64\n+                  ARGUMENTS\n+                    LIST id: 53, nodes: 1\n+                      COLUMN id: 54, column_name: number, result_type: UInt64, source_id: 11\ndiff --git a/tests/queries/0_stateless/02481_analyzer_optimize_grouping_sets_keys.sql b/tests/queries/0_stateless/02481_analyzer_optimize_grouping_sets_keys.sql\nnew file mode 100644\nindex 000000000000..0c757cb111ca\n--- /dev/null\n+++ b/tests/queries/0_stateless/02481_analyzer_optimize_grouping_sets_keys.sql\n@@ -0,0 +1,17 @@\n+EXPLAIN QUERY TREE run_passes=1\n+SELECT avg(log(2) * number) AS k FROM numbers(10000000)\n+GROUP BY GROUPING SETS (((number % 2) * (number % 3)), number % 3, number % 2)\n+HAVING avg(log(2) * number) > 3465735.3\n+ORDER BY k;\n+\n+EXPLAIN QUERY TREE run_passes=1\n+SELECT avg(log(2) * number) AS k FROM numbers(10000000)\n+GROUP BY GROUPING SETS (((number % 2) * (number % 3), number % 3, number % 2), (number % 4))\n+HAVING avg(log(2) * number) > 3465735.3\n+ORDER BY k;\n+\n+EXPLAIN QUERY TREE run_passes=1\n+SELECT avg(log(2) * number) AS k FROM numbers(10000000)\n+GROUP BY GROUPING SETS (((number % 2) * (number % 3), number % 3), (number % 2))\n+HAVING avg(log(2) * number) > 3465735.3\n+ORDER BY k;\ndiff --git a/tests/queries/0_stateless/02493_analyzer_uniq_injective_functions_elimination.reference b/tests/queries/0_stateless/02493_analyzer_uniq_injective_functions_elimination.reference\nindex 01ba2d199501..c42b9ce0cc4e 100644\n--- a/tests/queries/0_stateless/02493_analyzer_uniq_injective_functions_elimination.reference\n+++ b/tests/queries/0_stateless/02493_analyzer_uniq_injective_functions_elimination.reference\n@@ -7,7 +7,7 @@ QUERY id: 0\n         ARGUMENTS\n           LIST id: 3, nodes: 1\n             CONSTANT id: 4, constant_value: Tuple_(\\'\\'), constant_value_type: Tuple(String)\n-              EXPRESSION \n+              EXPRESSION\n                 FUNCTION id: 5, function_name: tuple, function_type: ordinary, result_type: Tuple(String)\n                   ARGUMENTS\n                     LIST id: 6, nodes: 1\n",
  "problem_statement": "Aggregation result is incorrect using new analyzer\nQuery:\r\n```sql\r\nSELECT round(avg(log(2) * number), 6) AS k FROM numbers(10000000)\r\nGROUP BY (number % 2) * (number % 3), number % 3, number % 2\r\nHAVING avg(log(2) * number) > 3465735.3 ORDER BY k\r\nSETTINGS allow_experimental_analyzer=1, optimize_group_by_function_keys=0;\r\n```\r\nOutput:\r\n```\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.079 sec. Processed 10.01 million rows, 80.06 MB (127.02 million rows/s., 1.02 GB/s.)\r\n```\r\n\r\nQuery:\r\n```sql\r\nSELECT round(avg(log(2) * number), 6) AS k FROM numbers(10000000)\r\nGROUP BY (number % 2) * (number % 3), number % 3, number % 2\r\nHAVING avg(log(2) * number) > 3465735.3 ORDER BY k\r\nSETTINGS allow_experimental_analyzer=0, optimize_group_by_function_keys=0;\r\n```\r\n\r\nOutput:\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500k\u2500\u2510\r\n\u2502   3465735.9028 \u2502\r\n\u2502   3465735.9028 \u2502\r\n\u2502 3465736.595947 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n3 rows in set. Elapsed: 0.085 sec. Processed 10.01 million rows, 80.06 MB (117.56 million rows/s., 940.52 MB/s.)\r\n```\r\n\r\ncc @kitaisreal \n",
  "hints_text": "",
  "created_at": "2022-11-15T17:48:21Z",
  "modified_files": [
    "src/Analyzer/ConstantNode.cpp",
    "b/src/Analyzer/Passes/OptimizeGroupByFunctionKeysPass.cpp",
    "b/src/Analyzer/Passes/OptimizeGroupByFunctionKeysPass.h",
    "src/Analyzer/QueryTreePassManager.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/01300_group_by_other_keys_having.reference",
    "tests/queries/0_stateless/01300_group_by_other_keys_having.sql",
    "tests/queries/0_stateless/02129_window_functions_disable_optimizations.reference",
    "tests/queries/0_stateless/02129_window_functions_disable_optimizations.sql",
    "tests/queries/0_stateless/02481_analyzer_optimize_aggregation_arithmetics.reference",
    "b/tests/queries/0_stateless/02481_analyzer_optimize_grouping_sets_keys.reference",
    "b/tests/queries/0_stateless/02481_analyzer_optimize_grouping_sets_keys.sql",
    "tests/queries/0_stateless/02493_analyzer_uniq_injective_functions_elimination.reference"
  ]
}