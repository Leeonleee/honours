{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 22129,
  "instance_id": "ClickHouse__ClickHouse-22129",
  "issue_numbers": [
    "19303"
  ],
  "base_commit": "66b8431e711c86f5fcdf571cf8d4afef9f803f30",
  "patch": "diff --git a/src/Interpreters/join_common.cpp b/src/Interpreters/join_common.cpp\nindex 4c124f99e571..9a9253cee758 100644\n--- a/src/Interpreters/join_common.cpp\n+++ b/src/Interpreters/join_common.cpp\n@@ -268,6 +268,10 @@ void joinTotals(const Block & totals, const Block & columns_to_add, const TableJ\n         {\n             if (table_join.rightBecomeNullable(col.type))\n                 JoinCommon::convertColumnToNullable(col);\n+\n+            /// In case of arrayJoin it can be not one row\n+            if (col.column->size() != 1)\n+                col.column = col.column->cloneResized(1);\n         }\n \n         for (size_t i = 0; i < totals_without_keys.columns(); ++i)\ndiff --git a/src/Processors/Transforms/JoiningTransform.cpp b/src/Processors/Transforms/JoiningTransform.cpp\nindex 26630f80b179..dea887fd7d70 100644\n--- a/src/Processors/Transforms/JoiningTransform.cpp\n+++ b/src/Processors/Transforms/JoiningTransform.cpp\n@@ -38,7 +38,11 @@ void JoiningTransform::transform(Chunk & chunk)\n     if (on_totals)\n     {\n         /// We have to make chunk empty before return\n-        block = getInputPort().getHeader().cloneWithColumns(chunk.detachColumns());\n+        /// In case of using `arrayJoin` we can get more or less rows than one\n+        auto cols = chunk.detachColumns();\n+        for (auto & col : cols)\n+            col = col->cloneResized(1);\n+        block = getInputPort().getHeader().cloneWithColumns(std::move(cols));\n \n         /// Drop totals if both out stream and joined stream doesn't have ones.\n         /// See comment in ExpressionTransform.h\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01107_join_right_table_totals.reference b/tests/queries/0_stateless/01107_join_right_table_totals.reference\nindex 77db8015b0ea..f71d3b0d05f4 100644\n--- a/tests/queries/0_stateless/01107_join_right_table_totals.reference\n+++ b/tests/queries/0_stateless/01107_join_right_table_totals.reference\n@@ -8,3 +8,13 @@\n 0\n \n 0\t0\t0\n+\n+0\t0\n+\n+0\t0\n+\n+0\t0\n+\n+0\t0\n+\n+0\t0\ndiff --git a/tests/queries/0_stateless/01107_join_right_table_totals.sql b/tests/queries/0_stateless/01107_join_right_table_totals.sql\nindex 77e8848c9572..a4f284e5e2da 100644\n--- a/tests/queries/0_stateless/01107_join_right_table_totals.sql\n+++ b/tests/queries/0_stateless/01107_join_right_table_totals.sql\n@@ -35,4 +35,29 @@ FULL JOIN\n ) rr\n USING (id);\n \n+SELECT id, yago \n+FROM ( SELECT item_id AS id FROM t GROUP BY id ) AS ll\n+FULL OUTER JOIN ( SELECT item_id AS id, arrayJoin([111, 222, 333, 444]), SUM(price_sold) AS yago FROM t GROUP BY id WITH TOTALS ) AS rr \n+USING (id);\n+\n+SELECT id, yago \n+FROM ( SELECT item_id AS id, arrayJoin([111, 222, 333]) FROM t GROUP BY id WITH TOTALS ) AS ll\n+FULL OUTER JOIN ( SELECT item_id AS id, SUM(price_sold) AS yago FROM t GROUP BY id ) AS rr \n+USING (id);\n+\n+SELECT id, yago \n+FROM ( SELECT item_id AS id, arrayJoin(emptyArrayInt32()) FROM t GROUP BY id WITH TOTALS ) AS ll\n+FULL OUTER JOIN ( SELECT item_id AS id, SUM(price_sold) AS yago FROM t GROUP BY id ) AS rr \n+USING (id);\n+\n+SELECT id, yago \n+FROM ( SELECT item_id AS id FROM t GROUP BY id ) AS ll\n+FULL OUTER JOIN ( SELECT item_id AS id, arrayJoin(emptyArrayInt32()), SUM(price_sold) AS yago FROM t GROUP BY id WITH TOTALS ) AS rr \n+USING (id);\n+\n+SELECT id, yago \n+FROM ( SELECT item_id AS id, arrayJoin([111, 222, 333]) FROM t GROUP BY id WITH TOTALS ) AS ll\n+FULL OUTER JOIN ( SELECT item_id AS id, arrayJoin([111, 222, 333, 444]), SUM(price_sold) AS yago FROM t GROUP BY id WITH TOTALS ) AS rr \n+USING (id);\n+\n DROP TABLE t;\n",
  "problem_statement": "Join + Invalid number of rows in Chunk\n```sql\r\nCREATE TABLE t (item_id UInt64, price_sold Float32, date Date) ENGINE MergeTree ORDER BY item_id;\r\nSELECT id, yago FROM (SELECT item_id AS id, materialize([arrayJoin([NULL, NULL]), NULL AS x, arrayJoin([0.9998999834060669, NULL, NULL, NULL]), arrayJoin([1048577, -inf, 100.0000991821289, NULL])]), SUM(price_sold) AS recent FROM t WHERE and(date >= NULL) GROUP BY 1023, id WITH TOTALS) AS ll FULL OUTER JOIN (SELECT item_id AS id, SUM(price_sold) AS yago FROM t WHERE (date >= '2018-12-17') AND (date <= '2019-03-10') GROUP BY id WITH TOTALS) AS rr USING (id);\r\n```\r\n```sql\r\nSELECT\r\n    id,\r\n    yago\r\nFROM \r\n(\r\n    SELECT\r\n        item_id AS id,\r\n        materialize([arrayJoin([NULL, NULL]), NULL AS x, arrayJoin([0.9998999834060669, NULL, NULL, NULL]), arrayJoin([1048577, -inf, 100.0000991821289, NULL])]),\r\n        SUM(price_sold) AS recent\r\n    FROM t\r\n    WHERE and(date >= NULL)\r\n    GROUP BY\r\n        1023,\r\n        id\r\n        WITH TOTALS\r\n) AS ll\r\nFULL OUTER JOIN \r\n(\r\n    SELECT\r\n        item_id AS id,\r\n        SUM(price_sold) AS yago\r\n    FROM t\r\n    WHERE (date >= '2018-12-17') AND (date <= '2019-03-10')\r\n    GROUP BY id\r\n        WITH TOTALS\r\n) AS rr USING (id)\r\n\r\nQuery id: 308fbfd9-aed7-4de6-9f34-843c909b9243\r\n\r\n\r\nReceived exception from server (version 21.1.1):\r\nCode: 49. DB::Exception: Received from localhost:9000. DB::Exception: Invalid number of rows in Chunk column Float64 position 1: expected 32, got 1. \r\n\r\n```\n",
  "hints_text": "also #19279 \nhttps://clickhouse-test-reports.s3.yandex.net/0/9a9d5a74ba901ee65b330f47423bbb019d82b2c2/fuzzer_debug/report.html#fail1",
  "created_at": "2021-03-25T14:34:55Z"
}