{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 12728,
  "instance_id": "ClickHouse__ClickHouse-12728",
  "issue_numbers": [
    "10897"
  ],
  "base_commit": "77444e76a771088ba3067d3e8c791373420ec1f2",
  "patch": "diff --git a/src/Storages/MergeTree/MergeTreeDataMergerMutator.cpp b/src/Storages/MergeTree/MergeTreeDataMergerMutator.cpp\nindex b59070ca0707..2284021881f8 100644\n--- a/src/Storages/MergeTree/MergeTreeDataMergerMutator.cpp\n+++ b/src/Storages/MergeTree/MergeTreeDataMergerMutator.cpp\n@@ -173,8 +173,12 @@ UInt64 MergeTreeDataMergerMutator::getMaxSourcePartsSizeForMerge(size_t pool_siz\n     size_t free_entries = pool_size - pool_used;\n     const auto data_settings = data.getSettings();\n \n+    /// Always allow maximum size if one or less pool entries is busy.\n+    /// One entry is probably the entry where this function is executed.\n+    /// This will protect from bad settings.\n+\n     UInt64 max_size = 0;\n-    if (free_entries >= data_settings->number_of_free_entries_in_pool_to_lower_max_size_of_merge)\n+    if (pool_used <= 1 || free_entries >= data_settings->number_of_free_entries_in_pool_to_lower_max_size_of_merge)\n         max_size = data_settings->max_bytes_to_merge_at_max_space_in_pool;\n     else\n         max_size = interpolateExponential(\n@@ -195,7 +199,8 @@ UInt64 MergeTreeDataMergerMutator::getMaxSourcePartSizeForMutation()\n     UInt64 disk_space = data.getStoragePolicy()->getMaxUnreservedFreeSpace();\n \n     /// Allow mutations only if there are enough threads, leave free threads for merges else\n-    if (background_pool_size - busy_threads_in_pool >= data_settings->number_of_free_entries_in_pool_to_execute_mutation)\n+    if (busy_threads_in_pool <= 1\n+        || background_pool_size - busy_threads_in_pool >= data_settings->number_of_free_entries_in_pool_to_execute_mutation)\n         return static_cast<UInt64>(disk_space / DISK_USAGE_COEFFICIENT_TO_RESERVE);\n \n     return 0;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01415_inconsistent_merge_tree_settings.reference b/tests/queries/0_stateless/01415_inconsistent_merge_tree_settings.reference\nnew file mode 100644\nindex 000000000000..dd57652a491d\n--- /dev/null\n+++ b/tests/queries/0_stateless/01415_inconsistent_merge_tree_settings.reference\n@@ -0,0 +1,2 @@\n+1\thello\n+1\tworld\ndiff --git a/tests/queries/0_stateless/01415_inconsistent_merge_tree_settings.sql b/tests/queries/0_stateless/01415_inconsistent_merge_tree_settings.sql\nnew file mode 100644\nindex 000000000000..f3bf24193a89\n--- /dev/null\n+++ b/tests/queries/0_stateless/01415_inconsistent_merge_tree_settings.sql\n@@ -0,0 +1,12 @@\n+DROP TABLE IF EXISTS t;\n+\n+SET mutations_sync = 1;\n+CREATE TABLE t (x UInt8, s String) ENGINE = MergeTree ORDER BY x SETTINGS number_of_free_entries_in_pool_to_execute_mutation = 1000;\n+\n+INSERT INTO t VALUES (1, 'hello');\n+SELECT * FROM t;\n+\n+ALTER TABLE t UPDATE s = 'world' WHERE x = 1;\n+SELECT * FROM t;\n+\n+DROP TABLE t;\n",
  "problem_statement": "The user may accidentially set background pool size lower than `number_of_free_entries_in_pool_to_execute_mutation` and it will prevent ALTERs to process.\nHello,\r\n\r\nI upgrade to Clickhouse c811e1f0d0c439b74843770082569aa7fd5f9743 (master 2 days ago) and I'm facing lot of problems (https://github.com/ClickHouse/ClickHouse/issues/10892) .\r\n\r\nFor example:\r\n\r\n```bash\r\nCREATE DATABASE tb1\r\nCREATE TABLE tb1.collection_ops_SUITE(`string` Nullable(String),`int` Nullable(Int64),`timestamp` DateTime,`created_at` DateTime) ENGINE = MergeTree PARTITION BY toYYYYMM(timestamp) ORDER BY (timestamp)\r\nINSERT INTO tb1.collection_ops_SUITE(`created_at`,`timestamp`,`int`,`string`) VALUES (1589395126,1589395126,1,'str'),(1589395126,1589395126,2,'str')\r\nALTER TABLE tb1.collection_ops_SUITE DROP COLUMN `int`\r\n```\r\n\r\nRunning following queries with HTTP client or tabbix will hang forever in the ALTER table.\r\n\r\nIn logs I see:\r\n\r\n```\r\n2020.05.13 18:44:13.557064 [ 2579621 ] {00000000-0000-4000-8000-000000000000} <Information> tb1.collection_ops_SUITE: Added mutation: mutation_2.txt\r\n2020.05.13 18:44:13.557266 [ 2579621 ] {00000000-0000-4000-8000-000000000000} <Information> tb1.collection_ops_SUITE: Waiting mutation: mutation_2.txt\r\n```\r\n\r\nThen nothing more\r\n\r\nSilviu\r\n\n",
  "hints_text": "No issue for me.\r\n\r\n20.5.1.3327 https://repo.yandex.ru/clickhouse/deb/testing/main/ \r\nhttps://github.com/ClickHouse/ClickHouse/commit/c811e1f0d0c439b74843770082569aa7fd5f9743\r\n\r\nTested 4 times (clickhouse-client & http)\r\n\r\n\n@den-crane Testing on linux ? I'm testing on OSX .\nLinux. I do not have OSX\nCan you paste the config files :) I want to try with your config files to see maybe something related from config\nNo configs. Only vendor's from deb.\nWill try to replace the config files with the default one and see. Can you please test https://github.com/ClickHouse/ClickHouse/issues/10900 as well to see if for you crashes ?\r\n\r\nSilviu\nDid you build it? \r\nTry official binary clang-10-darwin https://clickhouse-builds.s3.yandex.net/0/c811e1f0d0c439b74843770082569aa7fd5f9743/report.html \nI build myself and disabled some modules :)) but same build instruction are used on past version which works fine. I'll try to use a precompiled binary to see.\nOk thanks for links I see the prebuild works just fine. will recompile mine with all modules enabled then isolate the problem and post here the results.\nI would check a compiler and build options https://clickhouse-builds.s3.yandex.net/0/c811e1f0d0c439b74843770082569aa7fd5f9743/build_log_673063988_1589261189.txt\nHmm that seems a build did on linux for osx.. https://clickhouse.tech/docs/en/development/build-cross-osx/\r\n\r\n\n@alexey-milovidov  I can replicate this problem on OSX no matter what build I'm using. The offcial build or building myself...\r\n\r\nAnything that can generate this ?\n@qoega Please validate.\nIf helps in my canse the code freeze in the `mutation_wait_event.wait(lock, check);` (see image)\r\n<img width=\"1133\" alt=\"Screen Shot 2020-05-14 at 6 18 07 PM\" src=\"https://user-images.githubusercontent.com/4814731/81952635-66b47600-960f-11ea-872a-62a1528c2a10.png\">\r\n\r\nIn the file system I see a new file created mutation_2.txt with the following content:\r\n\r\n```\r\nformat version: 1\r\ncreate time: 2020-05-14 15:17:44\r\ncommands: DROP COLUMN int \r\n```\nOK so I found the real problem.   background_pool_size If is less than 11 mutations are freezing forever. If is 11 or more works like charm.\r\n\r\nI have a feeling that's because of :\r\n\r\nM(SettingUInt64, number_of_free_entries_in_pool_to_execute_mutation, 10, \"When there is less than specified number of free entries in pool, do not execute part mutations. This is to leave free threads for regular merges and avoid \\\"Too many parts\\\"\", 0) \\\r\n\r\nSilviu\nThe issue caused by PR: https://github.com/ClickHouse/ClickHouse/pull/6617 (the feature was introduced in 19.14).\nSame with ALTER TABLE DROP PARTITION on 20.5.2.7\r\n```\r\n2020.07.10 09:43:14.382172 [ 31263 ] {} <Error> DynamicQueryHandler: Code: 473, e.displayText() = DB::Exception: READ locking attempt on \"table\" has timed out! (120000ms) Possible deadlock avoided. Client should retry.: While executing Tables, Stack trace (when copying this message, always include the lines below):\r\n\r\n0. Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x10ed0da0 in /usr/bin/clickhouse\r\n1. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x95c923d in /usr/bin/clickhouse\r\n2. ? @ 0xe1a7746 in /usr/bin/clickhouse\r\n3. DB::IStorage::lockStructureForShare(bool, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::SettingTimespan<(DB::SettingTimespanIO)1> const&) @ 0xe1a1ed3 in /usr/bin/clickhouse\r\n4. DB::TablesBlockSource::generate() @ 0xd6a6434 in /usr/bin/clickhouse\r\n5. DB::ISource::work() @ 0xe6dd3ab in /usr/bin/clickhouse\r\n6. DB::SourceWithProgress::work() @ 0xe91f337 in /usr/bin/clickhouse\r\n7. ? @ 0xe70aa21 in /usr/bin/clickhouse\r\n8. ? @ 0xe70f1a6 in /usr/bin/clickhouse\r\n9. DB::PipelineExecutor::executeImpl(unsigned long) @ 0xe71072d in /usr/bin/clickhouse\r\n10. DB::PipelineExecutor::execute(unsigned long) @ 0xe711161 in /usr/bin/clickhouse\r\n11. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, DB::Context&, std::__1::function<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>) @ 0xe078f00 in /usr/bin/clickhouse\r\n12. DB::HTTPHandler::processQuery(Poco::Net::HTTPServerRequest&, HTMLForm&, Poco::Net::HTTPServerResponse&, DB::HTTPHandler::Output&) @ 0xe634b09 in /usr/bin/clickhouse\r\n13. DB::HTTPHandler::handleRequest(Poco::Net::HTTPServerRequest&, Poco::Net::HTTPServerResponse&) @ 0xe6382ba in /usr/bin/clickhouse\r\n14. Poco::Net::HTTPServerConnection::run() @ 0x10db5183 in /usr/bin/clickhouse\r\n15. Poco::Net::TCPServerConnection::start() @ 0x10deebcb in /usr/bin/clickhouse\r\n16. Poco::Net::TCPServerDispatcher::run() @ 0x10def05b in /usr/bin/clickhouse\r\n17. Poco::PooledThread::run() @ 0x10f6db86 in /usr/bin/clickhouse\r\n18. Poco::ThreadImpl::runnableEntry(void*) @ 0x10f68f80 in /usr/bin/clickhouse\r\n19. start_thread @ 0x7fa3 in /lib/x86_64-linux-gnu/libpthread-2.28.so\r\n20. __clone @ 0xf94cf in /lib/x86_64-linux-gnu/libc-2.28.so\r\n (version 20.5.2.7 (official build))\r\n```",
  "created_at": "2020-07-23T12:34:18Z"
}