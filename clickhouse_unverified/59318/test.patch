diff --git a/tests/queries/0_stateless/01651_map_functions.reference b/tests/queries/0_stateless/01651_map_functions.reference
index 60f1b6e0d0c4..0dafb841e0c1 100644
--- a/tests/queries/0_stateless/01651_map_functions.reference
+++ b/tests/queries/0_stateless/01651_map_functions.reference
@@ -24,6 +24,16 @@
 {'1002':'2004','1002':'3006','1002':'4008'}
 {'aa':4,'bb':5}	['aa','bb']	[4,5]
 {'aa':4,'bb':5}	1	0
+{0.1:4,0.2:5}	[0.1,0.2]	[4,5]
+{0.1:4,0.2:5}	1	0
+{0.1:4,0.2:5}	[0.1,0.2]	[4,5]
+{0.1:4,0.2:5}	1	0
+{[1,2]:4,[3,4]:5}	[[1,2],[3,4]]	[4,5]
+{[1,2]:4,[3,4]:5}	1	0
+{{1:2}:4,{3:4}:5}	[{1:2},{3:4}]	[4,5]
+{{1:2}:4,{3:4}:5}	1	0
+{(1,2):4,(3,4):5}	[(1,2),(3,4)]	[4,5]
+{(1,2):4,(3,4):5}	1	0
 {0:0}	1
 {0:0}	0
 {'aa':4,'bb':5}
diff --git a/tests/queries/0_stateless/01651_map_functions.sql b/tests/queries/0_stateless/01651_map_functions.sql
index 5942bf8b2c22..5a54d22ac974 100644
--- a/tests/queries/0_stateless/01651_map_functions.sql
+++ b/tests/queries/0_stateless/01651_map_functions.sql
@@ -28,6 +28,17 @@ drop table if exists table_map;
 select map( 'aa', 4, 'bb' , 5) as m, mapKeys(m), mapValues(m);
 select map( 'aa', 4, 'bb' , 5) as m, mapContains(m, 'aa'), mapContains(m, 'k');
 
+select map(0.1::Float32, 4, 0.2::Float32, 5) as m, mapKeys(m), mapValues(m);
+select map(0.1::Float32, 4, 0.2::Float32, 5) as m, mapContains(m, 0.1::Float32), mapContains(m, 0.3::Float32);
+select map(0.1::Float64, 4, 0.2::Float64, 5) as m, mapKeys(m), mapValues(m);
+select map(0.1::Float64, 4, 0.2::Float64, 5) as m, mapContains(m, 0.1::Float64), mapContains(m, 0.3::Float64);
+select map(array(1,2), 4, array(3,4), 5) as m, mapKeys(m), mapValues(m);
+select map(array(1,2), 4, array(3,4), 5) as m, mapContains(m, array(1,2)), mapContains(m, array(1,3));
+select map(map(1,2), 4, map(3,4), 5) as m, mapKeys(m), mapValues(m);
+select map(map(1,2), 4, map(3,4), 5) as m, mapContains(m, map(1,2)), mapContains(m, map(1,3));
+select map(tuple(1,2), 4, tuple(3,4), 5) as m, mapKeys(m), mapValues(m);
+select map(tuple(1,2), 4, tuple(3,4), 5) as m, mapContains(m, tuple(1,2)), mapContains(m, tuple(1,3));
+
 select map(0, 0) as m, mapContains(m, number % 2) from numbers(2);
 
 select mapFromArrays(['aa', 'bb'], [4, 5]);
@@ -38,7 +49,7 @@ select mapFromArrays('aa', [4, 5]); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }
 select mapFromArrays(['aa', 'bb'], 5); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }
 select mapFromArrays(['aa', 'bb'], [4, 5], [6, 7]); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }
 select mapFromArrays(['aa', 'bb'], [4, 5, 6]); -- { serverError SIZES_OF_ARRAYS_DONT_MATCH }
-select mapFromArrays([[1,2], [3,4]], [4, 5, 6]); -- { serverError BAD_ARGUMENTS }
+select mapFromArrays([[1,2], [3,4]], [4, 5, 6]); -- { serverError SIZES_OF_ARRAYS_DONT_MATCH }
 
 select mapFromArrays(['aa', 'bb'], map('a', 4, 'b', 5));
 select mapFromArrays(['aa', 'bb'], materialize(map('a', 4, 'b', 5))) from numbers(2);
diff --git a/tests/queries/0_stateless/01720_type_map_and_casts.sql b/tests/queries/0_stateless/01720_type_map_and_casts.sql
index f03773d90849..d090d0e5b664 100644
--- a/tests/queries/0_stateless/01720_type_map_and_casts.sql
+++ b/tests/queries/0_stateless/01720_type_map_and_casts.sql
@@ -79,6 +79,10 @@ SELECT m[toUInt64(0)], m[toInt64(0)], m[toUInt8(0)], m[toUInt16(0)] FROM table_m
 DROP TABLE IF EXISTS table_map_with_key_integer;
 
 
-CREATE TABLE table_map_with_key_integer (m Map(Float32, String)) ENGINE = MergeTree() ORDER BY tuple(); -- { serverError 36}
+CREATE TABLE table_map_with_key_integer (m Map(Float32, String)) ENGINE = MergeTree() ORDER BY tuple();
+DROP TABLE IF EXISTS table_map_with_key_integer;
+
+CREATE TABLE table_map_with_key_integer (m Map(Array(UInt32), String)) ENGINE = MergeTree() ORDER BY tuple();
+DROP TABLE IF EXISTS table_map_with_key_integer;
+
 CREATE TABLE table_map_with_key_integer (m Map(Nullable(String), String)) ENGINE = MergeTree() ORDER BY tuple(); -- { serverError 36}
-CREATE TABLE table_map_with_key_integer (m Map(Array(UInt32), String)) ENGINE = MergeTree() ORDER BY tuple(); -- { serverError 36}
diff --git a/tests/queries/0_stateless/02169_map_functions.reference b/tests/queries/0_stateless/02169_map_functions.reference
index 10746a70f06c..6100de6abaf2 100644
--- a/tests/queries/0_stateless/02169_map_functions.reference
+++ b/tests/queries/0_stateless/02169_map_functions.reference
@@ -26,6 +26,21 @@
 {}
 {}
 {}
+{0.1:4}
+{0.1:4}
+{[1,2]:4}
+{{1:2}:4}
+{(1,2):4}
+1
+1
+1
+1
+1
+{0.1:4,0.2:5}
+{0.1:4,0.2:5}
+{[1,2]:4,[3,4]:5}
+{{1:2}:4,{3:4}:5}
+{(1,2):4,(3,4):5}
 {'key3':100,'key2':101,'key4':102,'key5':500,'key6':600}
 {'key3':101,'key2':102,'key4':103,'key5':500,'key6':600}
 {'key3':102,'key2':103,'key4':104,'key5':500,'key6':600}
@@ -42,6 +57,11 @@
 {'key1':1113,'key2':2226,'key5':500,'key6':600}
 {'key5':500,'key6':600}
 {'key5':500,'key6':600}
+{0.1:4,0.2:5}
+{0.1:4,0.2:5}
+{[1,2]:4,[3,4]:5}
+{{1:2}:4,{3:4}:5}
+{(1,2):4,(3,4):5}
 1
 1
 1
@@ -104,3 +124,4 @@
 {1:1,3:3,5:5,0:0,2:4,4:16,6:36}
 {1:1,3:3,5:5,7:7,0:0,2:4,4:16,6:36}
 {1:1,3:3,5:5,7:7,0:0,2:4,4:16,6:36,8:64}
+{(1,0):(1,0),(2,0):(2,0)}
diff --git a/tests/queries/0_stateless/02169_map_functions.sql b/tests/queries/0_stateless/02169_map_functions.sql
index febaf2bd9d08..854ce214924e 100644
--- a/tests/queries/0_stateless/02169_map_functions.sql
+++ b/tests/queries/0_stateless/02169_map_functions.sql
@@ -9,11 +9,35 @@ SELECT mapApply((k, v) -> (k, v + 1), col) FROM table_map ORDER BY id;
 SELECT mapFilter((k, v) -> 0, col) from table_map;
 SELECT mapApply((k, v) -> tuple(v + 9223372036854775806), col) FROM table_map; -- { serverError BAD_ARGUMENTS }
 
+SELECT mapFilter((k, v) -> k = 0.1::Float32, map(0.1::Float32, 4, 0.2::Float32, 5));
+SELECT mapFilter((k, v) -> k = 0.1::Float64, map(0.1::Float64, 4, 0.2::Float64, 5));
+SELECT mapFilter((k, v) -> k = array(1,2), map(array(1,2), 4, array(3,4), 5));
+SELECT mapFilter((k, v) -> k = map(1,2), map(map(1,2), 4, map(3,4), 5));
+SELECT mapFilter((k, v) -> k = tuple(1,2), map(tuple(1,2), 4, tuple(3,4), 5));
+
+SELECT mapExists((k, v) -> k = 0.1::Float32, map(0.1::Float32, 4, 0.2::Float32, 5));
+SELECT mapExists((k, v) -> k = 0.1::Float64, map(0.1::Float64, 4, 0.2::Float64, 5));
+SELECT mapExists((k, v) -> k = array(1,2), map(array(1,2), 4, array(3,4), 5));
+SELECT mapExists((k, v) -> k = map(1,2), map(map(1,2), 4, map(3,4), 5));
+SELECT mapExists((k, v) -> k = tuple(1,2), map(tuple(1,2), 4, tuple(3,4), 5));
+
+SELECT mapSort((k, v) -> k, map(0.1::Float32, 4, 0.2::Float32, 5));
+SELECT mapSort((k, v) -> k, map(0.1::Float64, 4, 0.2::Float64, 5));
+SELECT mapSort((k, v) -> k, map(array(1,2), 4, array(3,4), 5));
+SELECT mapSort((k, v) -> k, map(map(1,2), 4, map(3,4), 5));
+SELECT mapSort((k, v) -> k, map(tuple(1,2), 4, tuple(3,4), 5));
+
 SELECT mapConcat(col, map('key5', 500), map('key6', 600)) FROM table_map ORDER BY id;
 SELECT mapConcat(col, materialize(map('key5', 500)), map('key6', 600)) FROM table_map ORDER BY id;
 SELECT concat(map('key5', 500), map('key6', 600));
 SELECT map('key5', 500) || map('key6', 600);
 
+SELECT mapConcat(map(0.1::Float32, 4), map(0.2::Float32, 5));
+SELECT mapConcat(map(0.1::Float64, 4), map(0.2::Float64, 5));
+SELECT mapConcat(map(array(1,2), 4), map(array(3,4), 5));
+SELECT mapConcat(map(map(1,2), 4), map(map(3,4), 5));
+SELECT mapConcat(map(tuple(1,2), 4), map(tuple(3,4), 5));
+
 SELECT mapExists((k, v) -> k LIKE '%3', col) FROM table_map ORDER BY id;
 SELECT mapExists((k, v) -> k LIKE '%2' AND v < 1000, col) FROM table_map ORDER BY id;
 
@@ -49,7 +73,7 @@ SELECT DISTINCT mapUpdate(m1, m2) FROM numbers (100000);
 SELECT mapApply(); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }
 SELECT mapApply((x, y) -> (x), map(1, 0, 2, 0)); -- { serverError BAD_ARGUMENTS }
 SELECT mapApply((x, y) -> ('x'), map(1, 0, 2, 0)); -- { serverError BAD_ARGUMENTS }
-SELECT mapApply((x) -> (x, x), map(1, 0, 2, 0)); -- { serverError BAD_ARGUMENTS }
+SELECT mapApply((x) -> (x, x), map(1, 0, 2, 0));
 SELECT mapApply((x, y) -> (x, 1, 2), map(1, 0, 2, 0)); -- { serverError BAD_ARGUMENTS }
 SELECT mapApply((x, y) -> (x, x + 1)); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }
 SELECT mapApply(map(1, 0, 2, 0), (x, y) -> (x, x + 1)); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }
