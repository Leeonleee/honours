{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 49789,
  "instance_id": "ClickHouse__ClickHouse-49789",
  "issue_numbers": [
    "49781"
  ],
  "base_commit": "2f8a530bf35ac8a14cfee109f954be6a9600c97f",
  "patch": "diff --git a/src/Functions/array/FunctionArrayMapped.h b/src/Functions/array/FunctionArrayMapped.h\nindex 9917a38e144e..a7ab80f697af 100644\n--- a/src/Functions/array/FunctionArrayMapped.h\n+++ b/src/Functions/array/FunctionArrayMapped.h\n@@ -135,7 +135,7 @@ class FunctionArrayMapped : public IFunction\n \n         size_t num_function_arguments = function_type->getArgumentTypes().size();\n         if (is_single_array_argument\n-            && tuple_argument_size\n+            && tuple_argument_size > 1\n             && tuple_argument_size == num_function_arguments)\n         {\n             assert(nested_types.size() == 1);\n@@ -337,12 +337,13 @@ class FunctionArrayMapped : public IFunction\n                 }\n \n                 const auto * column_tuple = checkAndGetColumn<ColumnTuple>(&column_array->getData());\n-                if (is_single_array_argument && column_tuple && column_tuple->getColumns().size() == num_function_arguments)\n+                size_t tuple_size = column_tuple ? column_tuple->getColumns().size() : 0;\n+\n+                if (is_single_array_argument && tuple_size > 1 && tuple_size == num_function_arguments)\n                 {\n                     const auto & type_tuple = assert_cast<const DataTypeTuple &>(*array_type->getNestedType());\n                     const auto & tuple_names = type_tuple.getElementNames();\n \n-                    size_t tuple_size = column_tuple->getColumns().size();\n                     arrays.reserve(column_tuple->getColumns().size());\n                     for (size_t j = 0; j < tuple_size; ++j)\n                     {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02735_array_map_array_of_tuples.reference b/tests/queries/0_stateless/02735_array_map_array_of_tuples.reference\nnew file mode 100644\nindex 000000000000..80481fee564a\n--- /dev/null\n+++ b/tests/queries/0_stateless/02735_array_map_array_of_tuples.reference\n@@ -0,0 +1,4 @@\n+[(1)]\n+[1]\n+[3]\n+[3]\ndiff --git a/tests/queries/0_stateless/02735_array_map_array_of_tuples.sql b/tests/queries/0_stateless/02735_array_map_array_of_tuples.sql\nnew file mode 100644\nindex 000000000000..51d60aa0cd0f\n--- /dev/null\n+++ b/tests/queries/0_stateless/02735_array_map_array_of_tuples.sql\n@@ -0,0 +1,4 @@\n+SELECT arrayMap((x) -> x, [tuple(1)]);\n+SELECT arrayMap((x) -> x.1, [tuple(1)]);\n+SELECT arrayMap((x) -> x.1 + x.2, [tuple(1, 2)]);\n+SELECT arrayMap((x, y) -> x + y, [tuple(1, 2)]);\n",
  "problem_statement": "arrayMap unwraps tuples with a single element\n\r\n\r\n**Describe the unexpected behaviour**\r\n\r\n```\r\nSELECT arrayMap(e -> e, [tuple(NULL)])\r\n\r\nQuery id: 0acdde56-2f1e-43ea-8de5-b69a84465f15\r\n\r\n\u250c\u2500arrayMap(lambda(tuple(e), e), [tuple(NULL)])\u2500\u2510\r\n\u2502 [NULL]                                       \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n**How to reproduce**\r\n* clickhouse version 23.4.2.1, it was returning tuple in 23.3\r\n\r\n**Expected behavior**\r\nArrayMap with identity lamba should return an array of tuples, not an array of the tuple value. \r\n\n",
  "hints_text": "broken in 23.4\r\n\r\nhttps://fiddle.clickhouse.com/64fc2276-031d-4352-b7d6-aa5fb9912541",
  "created_at": "2023-05-11T14:55:40Z",
  "modified_files": [
    "src/Functions/array/FunctionArrayMapped.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02735_array_map_array_of_tuples.reference",
    "b/tests/queries/0_stateless/02735_array_map_array_of_tuples.sql"
  ]
}