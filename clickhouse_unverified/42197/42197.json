{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 42197,
  "instance_id": "ClickHouse__ClickHouse-42197",
  "issue_numbers": [
    "658"
  ],
  "base_commit": "9a73eb2fbbcdc199458f09dcc3e7c52e6b4f8071",
  "patch": "diff --git a/base/base/safeExit.cpp b/base/base/safeExit.cpp\nindex e4f9e80759e0..ddb93dac65b3 100644\n--- a/base/base/safeExit.cpp\n+++ b/base/base/safeExit.cpp\n@@ -1,10 +1,8 @@\n #if defined(OS_LINUX)\n #    include <sys/syscall.h>\n #endif\n-#include <cstdlib>\n #include <unistd.h>\n #include <base/safeExit.h>\n-#include <base/defines.h>\n \n [[noreturn]] void safeExit(int code)\n {\n",
  "test_patch": "diff --git a/tests/queries/1_stateful/00097_constexpr_in_index.reference b/tests/queries/1_stateful/00097_constexpr_in_index.reference\nnew file mode 100644\nindex 000000000000..5080d6d4cd8e\n--- /dev/null\n+++ b/tests/queries/1_stateful/00097_constexpr_in_index.reference\n@@ -0,0 +1,1 @@\n+1803\ndiff --git a/tests/queries/1_stateful/00097_constexpr_in_index.sql b/tests/queries/1_stateful/00097_constexpr_in_index.sql\nnew file mode 100644\nindex 000000000000..b5cac75c7679\n--- /dev/null\n+++ b/tests/queries/1_stateful/00097_constexpr_in_index.sql\n@@ -0,0 +1,3 @@\n+-- Even in presense of OR, we evaluate the \"0 IN (1, 2, 3)\" as a constant expression therefore it does not prevent the index analysis.\n+\n+SELECT count() FROM test.hits WHERE CounterID IN (14917930, 33034174) OR 0 IN (1, 2, 3) SETTINGS max_rows_to_read = 1000000, force_primary_key = 1;\ndiff --git a/tests/queries/1_stateful/00168_parallel_processing_on_replicas_part_1.reference b/tests/queries/1_stateful/00168_parallel_processing_on_replicas_part_1.reference\ndeleted file mode 100644\nindex 2675904dea0a..000000000000\n--- a/tests/queries/1_stateful/00168_parallel_processing_on_replicas_part_1.reference\n+++ /dev/null\n@@ -1,110 +0,0 @@\n-Testing 00001_count_hits.sql ----> Ok! \u2705\n-Testing 00002_count_visits.sql ----> Ok! \u2705\n-Testing 00004_top_counters.sql ----> Ok! \u2705\n-Testing 00005_filtering.sql ----> Ok! \u2705\n-Testing 00006_agregates.sql ----> Ok! \u2705\n-Testing 00007_uniq.sql ----> Ok! \u2705\n-Testing 00008_uniq.sql ----> Ok! \u2705\n-Testing 00009_uniq_distributed.sql ----> Ok! \u2705\n-Testing 00010_quantiles_segfault.sql ----> Ok! \u2705\n-Testing 00011_sorting.sql ----> Ok! \u2705\n-Testing 00012_sorting_distributed.sql ----> Ok! \u2705\n-Skipping 00013_sorting_of_nested.sql \n-Testing 00014_filtering_arrays.sql ----> Ok! \u2705\n-Testing 00015_totals_and_no_aggregate_functions.sql ----> Ok! \u2705\n-Testing 00016_any_if_distributed_cond_always_false.sql ----> Ok! \u2705\n-Testing 00017_aggregation_uninitialized_memory.sql ----> Ok! \u2705\n-Testing 00020_distinct_order_by_distributed.sql ----> Ok! \u2705\n-Testing 00021_1_select_with_in.sql ----> Ok! \u2705\n-Testing 00021_2_select_with_in.sql ----> Ok! \u2705\n-Testing 00021_3_select_with_in.sql ----> Ok! \u2705\n-Testing 00022_merge_prewhere.sql ----> Ok! \u2705\n-Testing 00023_totals_limit.sql ----> Ok! \u2705\n-Testing 00024_random_counters.sql ----> Ok! \u2705\n-Testing 00030_array_enumerate_uniq.sql ----> Ok! \u2705\n-Testing 00031_array_enumerate_uniq.sql ----> Ok! \u2705\n-Testing 00032_aggregate_key64.sql ----> Ok! \u2705\n-Testing 00033_aggregate_key_string.sql ----> Ok! \u2705\n-Testing 00034_aggregate_key_fixed_string.sql ----> Ok! \u2705\n-Testing 00035_aggregate_keys128.sql ----> Ok! \u2705\n-Testing 00036_aggregate_hashed.sql ----> Ok! \u2705\n-Testing 00037_uniq_state_merge1.sql ----> Ok! \u2705\n-Testing 00038_uniq_state_merge2.sql ----> Ok! \u2705\n-Testing 00039_primary_key.sql ----> Ok! \u2705\n-Testing 00040_aggregating_materialized_view.sql ----> Ok! \u2705\n-Testing 00041_aggregating_materialized_view.sql ----> Ok! \u2705\n-Testing 00042_any_left_join.sql ----> Ok! \u2705\n-Testing 00043_any_left_join.sql ----> Ok! \u2705\n-Testing 00044_any_left_join_string.sql ----> Ok! \u2705\n-Testing 00045_uniq_upto.sql ----> Ok! \u2705\n-Testing 00046_uniq_upto_distributed.sql ----> Ok! \u2705\n-Testing 00047_bar.sql ----> Ok! \u2705\n-Testing 00048_min_max.sql ----> Ok! \u2705\n-Testing 00049_max_string_if.sql ----> Ok! \u2705\n-Testing 00050_min_max.sql ----> Ok! \u2705\n-Testing 00051_min_max_array.sql ----> Ok! \u2705\n-Testing 00052_group_by_in.sql ----> Ok! \u2705\n-Testing 00053_replicate_segfault.sql ----> Ok! \u2705\n-Testing 00054_merge_tree_partitions.sql ----> Ok! \u2705\n-Testing 00055_index_and_not.sql ----> Ok! \u2705\n-Testing 00056_view.sql ----> Ok! \u2705\n-Testing 00059_merge_sorting_empty_array_joined.sql ----> Ok! \u2705\n-Testing 00060_move_to_prewhere_and_sets.sql ----> Ok! \u2705\n-Skipping 00061_storage_buffer.sql \n-Testing 00062_loyalty.sql ----> Ok! \u2705\n-Testing 00063_loyalty_joins.sql ----> Ok! \u2705\n-Testing 00065_loyalty_with_storage_join.sql ----> Ok! \u2705\n-Testing 00066_sorting_distributed_many_replicas.sql ----> Ok! \u2705\n-Testing 00067_union_all.sql ----> Ok! \u2705\n-Testing 00068_subquery_in_prewhere.sql ----> Ok! \u2705\n-Testing 00069_duplicate_aggregation_keys.sql ----> Ok! \u2705\n-Testing 00071_merge_tree_optimize_aio.sql ----> Ok! \u2705\n-Testing 00072_compare_date_and_string_index.sql ----> Ok! \u2705\n-Testing 00073_uniq_array.sql ----> Ok! \u2705\n-Testing 00074_full_join.sql ----> Ok! \u2705\n-Testing 00075_left_array_join.sql ----> Ok! \u2705\n-Testing 00076_system_columns_bytes.sql ----> Ok! \u2705\n-Testing 00077_log_tinylog_stripelog.sql ----> Ok! \u2705\n-Testing 00078_group_by_arrays.sql ----> Ok! \u2705\n-Testing 00079_array_join_not_used_joined_column.sql ----> Ok! \u2705\n-Testing 00080_array_join_and_union.sql ----> Ok! \u2705\n-Testing 00081_group_by_without_key_and_totals.sql ----> Ok! \u2705\n-Testing 00082_quantiles.sql ----> Ok! \u2705\n-Testing 00083_array_filter.sql ----> Ok! \u2705\n-Testing 00084_external_aggregation.sql ----> Ok! \u2705\n-Testing 00085_monotonic_evaluation_segfault.sql ----> Ok! \u2705\n-Testing 00086_array_reduce.sql ----> Ok! \u2705\n-Testing 00087_where_0.sql ----> Ok! \u2705\n-Testing 00088_global_in_one_shard_and_rows_before_limit.sql ----> Ok! \u2705\n-Testing 00089_position_functions_with_non_constant_arg.sql ----> Ok! \u2705\n-Testing 00091_prewhere_two_conditions.sql ----> Ok! \u2705\n-Testing 00093_prewhere_array_join.sql ----> Ok! \u2705\n-Testing 00094_order_by_array_join_limit.sql ----> Ok! \u2705\n-Skipping 00095_hyperscan_profiler.sql \n-Testing 00139_like.sql ----> Ok! \u2705\n-Skipping 00140_rename.sql \n-Testing 00141_transform.sql ----> Ok! \u2705\n-Testing 00142_system_columns.sql ----> Ok! \u2705\n-Testing 00143_transform_non_const_default.sql ----> Ok! \u2705\n-Testing 00144_functions_of_aggregation_states.sql ----> Ok! \u2705\n-Testing 00145_aggregate_functions_statistics.sql ----> Ok! \u2705\n-Testing 00146_aggregate_function_uniq.sql ----> Ok! \u2705\n-Testing 00147_global_in_aggregate_function.sql ----> Ok! \u2705\n-Testing 00148_monotonic_functions_and_index.sql ----> Ok! \u2705\n-Testing 00149_quantiles_timing_distributed.sql ----> Ok! \u2705\n-Testing 00150_quantiles_timing_precision.sql ----> Ok! \u2705\n-Testing 00151_order_by_read_in_order.sql ----> Ok! \u2705\n-Skipping 00151_replace_partition_with_different_granularity.sql \n-Skipping 00152_insert_different_granularity.sql \n-Testing 00153_aggregate_arena_race.sql ----> Ok! \u2705\n-Skipping 00154_avro.sql \n-Testing 00156_max_execution_speed_sample_merge.sql ----> Ok! \u2705\n-Skipping 00157_cache_dictionary.sql \n-Skipping 00158_cache_dictionary_has.sql \n-Testing 00160_decode_xml_component.sql ----> Ok! \u2705\n-Testing 00162_mmap_compression_none.sql ----> Ok! \u2705\n-Testing 00164_quantileBfloat16.sql ----> Ok! \u2705\n-Testing 00165_jit_aggregate_functions.sql ----> Ok! \u2705\n-Skipping 00166_explain_estimate.sql \n-Testing 00167_read_bytes_from_fs.sql ----> Ok! \u2705\n-Total failed tests: \ndiff --git a/tests/queries/1_stateful/00168_parallel_processing_on_replicas_part_1.sh b/tests/queries/1_stateful/00168_parallel_processing_on_replicas_part_1.sh\ndeleted file mode 100755\nindex ecd0d281b536..000000000000\n--- a/tests/queries/1_stateful/00168_parallel_processing_on_replicas_part_1.sh\n+++ /dev/null\n@@ -1,102 +0,0 @@\n-#!/usr/bin/env bash\n-# Tags: no-tsan, no-random-settings\n-\n-CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n-# shellcheck source=../shell_config.sh\n-. \"$CURDIR\"/../shell_config.sh\n-\n-# set -e\n-\n-# All replicas are localhost, disable `prefer_localhost_replica` option to test network interface\n-# Currently this feature could not work with hedged requests\n-# Enabling `enable_sample_offset_parallel_processing` feature could lead to intersecting marks, so some of them would be thrown away and it will lead to incorrect result of SELECT query\n-SETTINGS=\"--max_parallel_replicas=3 --use_hedged_requests=false --allow_experimental_parallel_reading_from_replicas=true\"\n-\n-# Prepare tables\n-$CLICKHOUSE_CLIENT $SETTINGS -nm -q '''\n-    drop table if exists test.dist_hits SYNC;\n-    drop table if exists test.dist_visits SYNC;\n-\n-    create table test.dist_hits as test.hits engine = Distributed(\"test_cluster_one_shard_three_replicas_localhost\", test, hits, rand());\n-    create table test.dist_visits as test.visits engine = Distributed(\"test_cluster_one_shard_three_replicas_localhost\", test, visits, rand());\n-''';\n-\n-FAILED=()\n-\n-# PreviouslyFailed=(\n-# )\n-\n-SkipList=(\n-    \"00013_sorting_of_nested.sql\" # It contains FINAL, which is not allowed together with parallel reading\n-\n-    \"00061_storage_buffer.sql\"\n-    \"00095_hyperscan_profiler.sql\" # too long in debug (there is a --no-debug tag inside a test)\n-\n-    \"00140_rename.sql\" # Multiple renames are not allowed with DatabaseReplicated and tags are not forwarded through this test\n-\n-    \"00154_avro.sql\" # Plain select * with limit with Distributed table is not deterministic\n-    \"00151_replace_partition_with_different_granularity.sql\" # Replace partition from Distributed is not allowed\n-    \"00152_insert_different_granularity.sql\" # The same as above\n-\n-    \"00157_cache_dictionary.sql\" # Too long in debug mode, but result is correct\n-    \"00158_cache_dictionary_has.sql\" # The same as above\n-\n-    \"00166_explain_estimate.sql\" # Distributed table returns nothing\n-)\n-\n-# for TESTPATH in \"${PreviouslyFailed[@]}\"\n-for TESTPATH in \"$CURDIR\"/*.sql;\n-do\n-    TESTNAME=$(basename $TESTPATH)\n-    NUM=$(echo \"${TESTNAME}\" | grep -o -P '^\\d+' | sed 's/^0*//')\n-    if [[ \"${NUM}\" -ge 168 ]]; then\n-        continue\n-    fi\n-\n-    if [[ \" ${SkipList[*]} \" =~ ${TESTNAME} ]]; then\n-        echo  \"Skipping $TESTNAME \"\n-        continue\n-    fi\n-\n-    echo -n \"Testing $TESTNAME ----> \"\n-\n-    # prepare test\n-    NEW_TESTNAME=\"/tmp/dist_$TESTNAME\"\n-    # Added g to sed command to replace all tables, not the first\n-    cat $TESTPATH | sed -e 's/test.hits/test.dist_hits/g'  | sed -e 's/test.visits/test.dist_visits/g' > $NEW_TESTNAME\n-\n-    TESTNAME_RESULT=\"/tmp/result_$TESTNAME\"\n-    NEW_TESTNAME_RESULT=\"/tmp/result_dist_$TESTNAME\"\n-\n-    $CLICKHOUSE_CLIENT $SETTINGS -nm < $TESTPATH > $TESTNAME_RESULT\n-    $CLICKHOUSE_CLIENT $SETTINGS -nm < $NEW_TESTNAME > $NEW_TESTNAME_RESULT\n-\n-    expected=$(cat $TESTNAME_RESULT | md5sum)\n-    actual=$(cat $NEW_TESTNAME_RESULT | md5sum)\n-\n-    if [[ \"$expected\" != \"$actual\" ]]; then\n-        FAILED+=(\"$TESTNAME\")\n-        echo \"Failed! \u274c\"\n-        echo \"Plain:\"\n-        cat $TESTNAME_RESULT\n-        echo \"Distributed:\"\n-        cat $NEW_TESTNAME_RESULT\n-    else\n-        echo \"Ok! \u2705\"\n-    fi\n-done\n-\n-\n-echo \"Total failed tests: \"\n-# Iterate the loop to read and print each array element\n-for value in \"${FAILED[@]}\"\n-do\n-    echo \"\ud83d\udd3a  $value\"\n-done\n-\n-# Drop tables\n-\n-$CLICKHOUSE_CLIENT $SETTINGS -nm -q '''\n-    drop table if exists test.dist_hits SYNC;\n-    drop table if exists test.dist_visits SYNC;\n-''';\n",
  "problem_statement": "Feature request: evaluate and prune constant expressions before columns' scanning\n### The issue\r\n\r\nSuppose the following table exists:\r\n\r\n```sql\r\nCREATE TABLE events (\r\n    EventDate Date,\r\n    ClientID UInt32\r\n) Engine = MergeTree(EventDate, (EventDate, ClientID), 8192);\r\n```\r\n\r\nWe use the following query template for counting the number of events for the given client on the given date:\r\n\r\n```sql\r\nSELECT count(*) FROM events\r\nWHERE EventDate = <EventDate> AND (ClientID = <ClientID> OR -1 = <ClientID>)\r\n```\r\n\r\nThe `-1 = <ClientID>` part is used for selecting the total number of events for the given `EventDate`. `<ClientID>` is substituted by `-1` in this case.\r\n\r\nUnfortunately, this part disables `(EventDate, ClientID)` key usage, so the `clickhouse` scans all the rows for the given `EventDate` even if `ClientID` isn't equal to `-1`.\r\n\r\n### The solution\r\n\r\nIt would be great if `clickhouse` could evaluate and prune constant expressions before columns' scanning.\r\n\r\nFor instance, for `EventDate = '2017-04-01'` and `ClientID = 42` the query becomes:\r\n```sql\r\nSELECT count(*) FROM events\r\nWHERE EventDate = '2017-04-01' AND (ClientID = 42 OR -1 = 42)\r\n```\r\nThe `-1 = 42` constant part is always evaluated to `false`, so it could be safely pruned. Then the query transforms to:\r\n```sql\r\nSELECT count(*) FROM events\r\nWHERE EventDate = '2017-04-01' AND ClientID = 42\r\n```\r\nThis query successfully uses `(EventDate, ClientID)` key.\r\n\r\nFor `ClientID = -1` the query looks like:\r\n```sql\r\nSELECT count(*) FROM events\r\nWHERE EventDate = '2017-04-01' AND (ClientID = -1 OR -1 = -1)\r\n```\r\nThe `-1 = -1` part is always evaluated to `true`, so the `ClientID = -1` part could be safely pruned. Then the query transforms to:\r\n```sql\r\nSELECT count(*) FROM events\r\nWHERE EventDate = '2017-04-01'\r\n```\r\n\r\nIt would be great if the constant expression evaluation would work for `IN` operators too, so the following construction could be optimized:\r\n\r\n`(ClientID IN (<ClientIDs>) OR -1 IN (<ClientIDs>))`\r\n\r\n### Possible workaround\r\n\r\n- To use distinct query templates depending on whether the `ClientID` is selected or not. Unfortunately, this doesn't work for `grafana` templates when using [clickhouse-grafana](https://github.com/Vertamedia/clickhouse-grafana).\n",
  "hints_text": "Thank you for your suggestions.\r\nWe are updating our expression analyzer, it will enable to introduce more optimizations (including more powerful constants pruning).\r\n\r\nCurrently `if(const, expr1, expr2)` function supports it, you could try to rewrite the queries using `if`.\nI did some tests and can confirm that `if` statement helps\n> The -1 = <ClientID> part is used for selecting the total number of events for the given EventDate. <ClientID> is substituted by -1 in this case.\r\n\r\n> Unfortunately, this part disables (EventDate, ClientID) key usage, so the clickhouse scans all the rows for the given EventDate even if ClientID isn't equal to -1.\r\n\r\nThis is just not true. The index works (and always worked) for arbitrary expressions involving comparisons (including IN, LIKE), and logical operations AND, OR, NOT and also some partially monotonic functions.\r\n\r\n```\r\nexample-perftest03j.yandex.ru :) SELECT count() FROM test.hits WHERE EventDate = '2014-03-18'\r\n\r\nSELECT count()\r\nFROM test.hits \r\nWHERE EventDate = '2014-03-18'\r\n\r\n\u250c\u2500count()\u2500\u2510\r\n\u2502 1383658 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 0.014 sec. Processed 6.65 million rows, 13.31 MB (474.18 million rows/s., 948.36 MB/s.) \r\n\r\nexample-perftest03j.yandex.ru :) SELECT count() FROM test.hits WHERE EventDate = '2014-03-18' AND CounterID = 154850\r\n\r\nSELECT count()\r\nFROM test.hits \r\nWHERE (EventDate = '2014-03-18') AND (CounterID = 154850)\r\n\r\n\u250c\u2500count()\u2500\u2510\r\n\u2502     127 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 0.008 sec. Processed 16.38 thousand rows, 98.30 KB (2.01 million rows/s., 12.06 MB/s.) \r\n\r\nexample-perftest03j.yandex.ru :) SELECT count() FROM test.hits WHERE EventDate = '2014-03-18' AND (CounterID = 154850 OR CounterID = -1)\r\n\r\nSELECT count()\r\nFROM test.hits \r\nWHERE (EventDate = '2014-03-18') AND ((CounterID = 154850) OR (CounterID = -1))\r\n\r\n\u250c\u2500count()\u2500\u2510\r\n\u2502     127 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 0.010 sec. Processed 16.38 thousand rows, 98.30 KB (1.68 million rows/s., 10.08 MB/s.) \r\n\r\nexample-perftest03j.yandex.ru :) SELECT count() FROM test.hits WHERE EventDate = '2014-03-18' AND (CounterID = 154850 OR CounterID = 111)\r\n\r\nSELECT count()\r\nFROM test.hits \r\nWHERE (EventDate = '2014-03-18') AND ((CounterID = 154850) OR (CounterID = 111))\r\n\r\n\u250c\u2500count()\u2500\u2510\r\n\u2502     127 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 0.010 sec. Processed 32.77 thousand rows, 196.61 KB (3.44 million rows/s., 20.63 MB/s.)\r\n```\r\n\r\nYou see, that `6.65 million rows` have scanned for condition `EventDate = '2014-03-18'`\r\nbut just `32.77 thousand rows` have scanned for condition `EventDate = '2014-03-18' AND (CounterID = 154850 OR CounterID = 111)`.\nBut the task remains.\nArtem @4ertus2 is currently doing a similar task: transitive constant propagation from WHERE via JOIN ON for pushdown: #9733\r\n\n> It would be great if the constant expression evaluation would work for IN operators too\r\n\r\nI checked, and it works:\r\n\r\n```\r\nmilovidov-desktop :) SELECT count() FROM hits WHERE CounterID = 117796 OR -1 IN (1, 2, 3)\r\n\r\nSELECT count()\r\nFROM hits\r\nWHERE (CounterID = 117796) OR (-1 IN (1, 2, 3))\r\n\r\nQuery id: ab170d56-c773-48f9-b3b7-5dbf505b0a1d\r\n\r\n\u250c\u2500count()\u2500\u2510\r\n\u2502    2592 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.004 sec. Processed 8.19 thousand rows, 32.77 KB (1.98 million rows/s., 7.93 MB/s.)\r\n\r\nmilovidov-desktop :) SELECT count() FROM hits WHERE CounterID IN (117796, 71172) OR -1 IN (1, 2, 3)\r\n\r\nSELECT count()\r\nFROM hits\r\nWHERE (CounterID IN (117796, 71172)) OR (-1 IN (1, 2, 3))\r\n\r\nQuery id: baf6848d-9f78-40ec-8ecb-d4a48809c93f\r\n\r\n\u250c\u2500count()\u2500\u2510\r\n\u2502    5167 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.004 sec. Processed 24.58 thousand rows, 98.30 KB (6.00 million rows/s., 24.00 MB/s.)\r\n```",
  "created_at": "2022-10-09T02:47:05Z",
  "modified_files": [
    "base/base/safeExit.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/1_stateful/00097_constexpr_in_index.reference",
    "b/tests/queries/1_stateful/00097_constexpr_in_index.sql",
    "tests/queries/1_stateful/00168_parallel_processing_on_replicas_part_1.reference",
    "tests/queries/1_stateful/00168_parallel_processing_on_replicas_part_1.sh"
  ]
}