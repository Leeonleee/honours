{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 60199,
  "instance_id": "ClickHouse__ClickHouse-60199",
  "issue_numbers": [
    "59557"
  ],
  "base_commit": "7ac5821a2396aa6d1880b2b6d58e644e60b2b078",
  "patch": "diff --git a/docs/en/interfaces/formats.md b/docs/en/interfaces/formats.md\nindex 03cf345349e2..e66dfac4db74 100644\n--- a/docs/en/interfaces/formats.md\n+++ b/docs/en/interfaces/formats.md\n@@ -91,6 +91,7 @@ The supported formats are:\n | [MySQLDump](#mysqldump)                                                                   | \u2714    | \u2717     |\n | [DWARF](#dwarf)                                                                           | \u2714    | \u2717     |\n | [Markdown](#markdown)                                                                     | \u2717    | \u2714     |\n+| [Form](#form)                                                                             | \u2714    | \u2717     |\n \n \n You can control some format processing parameters with the ClickHouse settings. For more information read the [Settings](/docs/en/operations/settings/settings-formats.md) section.\n@@ -2843,3 +2844,31 @@ FORMAT Markdown\n ```\n \n Markdown table will be generated automatically and can be used on markdown-enabled platforms, like Github. This format is used only for output.\n+\n+## Form {#form}\n+\n+The Form format can be used to read or write a single record in the application/x-www-form-urlencoded format in which data is formatted `key1=value1&key2=value2`\n+\n+Examples:\n+\n+Given a file `data.tmp` placed in the `user_files` path with some URL encoded data:\n+\n+```text\n+t_page=116&c.e=ls7xfkpm&c.tti.m=raf&rt.start=navigation&rt.bmr=390%2C11%2C10\n+```\n+\n+```sql\n+SELECT * FROM file(data.tmp, Form) FORMAT vertical;\n+```\n+\n+Result:\n+\n+```text\n+Row 1:\n+\u2500\u2500\u2500\u2500\u2500\u2500\n+t_page:   116\n+c.e:      ls7xfkpm\n+c.tti.m:  raf\n+rt.start: navigation\n+rt.bmr:   390,11,10\n+```\ndiff --git a/src/Formats/registerFormats.cpp b/src/Formats/registerFormats.cpp\nindex cc9cf380693f..1f851da850a8 100644\n--- a/src/Formats/registerFormats.cpp\n+++ b/src/Formats/registerFormats.cpp\n@@ -76,6 +76,7 @@ void registerInputFormatCustomSeparated(FormatFactory & factory);\n void registerOutputFormatCustomSeparated(FormatFactory & factory);\n void registerInputFormatCapnProto(FormatFactory & factory);\n void registerOutputFormatCapnProto(FormatFactory & factory);\n+void registerInputFormatForm(FormatFactory & factory);\n \n /// Output only (presentational) formats.\n \n@@ -148,6 +149,7 @@ void registerParquetMetadataSchemaReader(FormatFactory & factory);\n void registerDWARFSchemaReader(FormatFactory & factory);\n void registerOneSchemaReader(FormatFactory & factory);\n void registerNpySchemaReader(FormatFactory & factory);\n+void registerFormSchemaReader(FormatFactory & factory);\n \n void registerFileExtensions(FormatFactory & factory);\n \n@@ -212,6 +214,7 @@ void registerFormats()\n     registerOutputFormatRawBLOB(factory);\n     registerInputFormatCustomSeparated(factory);\n     registerOutputFormatCustomSeparated(factory);\n+    registerInputFormatForm(factory);\n \n     registerInputFormatORC(factory);\n     registerOutputFormatORC(factory);\n@@ -291,6 +294,7 @@ void registerFormats()\n     registerDWARFSchemaReader(factory);\n     registerOneSchemaReader(factory);\n     registerNpySchemaReader(factory);\n+    registerFormSchemaReader(factory);\n }\n \n }\ndiff --git a/src/IO/ReadHelpers.cpp b/src/IO/ReadHelpers.cpp\nindex 68b61e96c513..8c83eac5cff7 100644\n--- a/src/IO/ReadHelpers.cpp\n+++ b/src/IO/ReadHelpers.cpp\n@@ -243,6 +243,18 @@ void readStringUntilWhitespace(String & s, ReadBuffer & buf)\n     readStringUntilWhitespaceInto(s, buf);\n }\n \n+void readStringUntilAmpersand(String & s, ReadBuffer & buf)\n+{\n+    s.clear();\n+    readStringUntilCharsInto<'&'>(s, buf);\n+}\n+\n+void readStringUntilEquals(String & s, ReadBuffer & buf)\n+{\n+    s.clear();\n+    readStringUntilCharsInto<'='>(s, buf);\n+}\n+\n template void readNullTerminated<PODArray<char>>(PODArray<char> & s, ReadBuffer & buf);\n template void readNullTerminated<String>(String & s, ReadBuffer & buf);\n \ndiff --git a/src/IO/ReadHelpers.h b/src/IO/ReadHelpers.h\nindex a136eb4d1551..f349ab45cfe0 100644\n--- a/src/IO/ReadHelpers.h\n+++ b/src/IO/ReadHelpers.h\n@@ -609,6 +609,9 @@ void readEscapedStringUntilEOL(String & s, ReadBuffer & buf);\n /// Only 0x20 as whitespace character\n void readStringUntilWhitespace(String & s, ReadBuffer & buf);\n \n+void readStringUntilAmpersand(String & s, ReadBuffer & buf);\n+void readStringUntilEquals(String & s, ReadBuffer & buf);\n+\n \n /** Read string in CSV format.\n   * Parsing rules:\ndiff --git a/src/Processors/Formats/Impl/FormRowInputFormat.cpp b/src/Processors/Formats/Impl/FormRowInputFormat.cpp\nnew file mode 100644\nindex 000000000000..448c9e52cce2\n--- /dev/null\n+++ b/src/Processors/Formats/Impl/FormRowInputFormat.cpp\n@@ -0,0 +1,179 @@\n+#include<Processors/Formats/Impl/FormRowInputFormat.h>\n+#include \"Formats/EscapingRuleUtils.h\"\n+#include <Formats/FormatFactory.h>\n+\n+namespace DB\n+{\n+\n+namespace ErrorCodes\n+{\n+    extern const int INCORRECT_DATA;\n+}\n+\n+namespace\n+{\n+    String readFieldName(ReadBuffer & buf)\n+    {\n+        String field;\n+        readStringUntilEquals(field, buf);\n+        assertChar('=', buf);\n+        return field;\n+    }\n+}\n+\n+FormRowInputFormat::FormRowInputFormat(ReadBuffer & in_, Block header_, Params params_, const FormatSettings & format_settings_) : IRowInputFormat(std::move(header_), in_, params_), format_settings(format_settings_)\n+{\n+    const auto & header = getPort().getHeader();\n+    size_t num_columns = header.columns();\n+    for (size_t i = 0; i < num_columns; ++i)\n+        name_map[header.getByPosition(i).name] = i;\n+}\n+\n+void FormRowInputFormat::readPrefix()\n+{\n+    skipBOMIfExists(*in);\n+}\n+\n+const String & FormRowInputFormat::columnName(size_t i) const\n+{\n+    return getPort().getHeader().getByPosition(i).name;\n+}\n+\n+void FormRowInputFormat::readField(size_t index, MutableColumns & columns)\n+{\n+    if (seen_columns[index])\n+        throw Exception(ErrorCodes::INCORRECT_DATA, \"Duplicate field found while parsing Form format: {}\", columnName(index));\n+\n+    seen_columns[index] = true;\n+    const auto & serialization = serializations[index];\n+\n+    String encoded_str, decoded_str;\n+    readStringUntilAmpersand(encoded_str,*in);\n+\n+    if (!in->eof())\n+        assertChar('&', *in);\n+\n+    Poco::URI::decode(encoded_str, decoded_str);\n+    ReadBufferFromString buf(decoded_str);\n+    serialization->deserializeWholeText(*columns[index], buf, format_settings);\n+}\n+\n+void FormRowInputFormat::readFormData(MutableColumns & columns)\n+{\n+    size_t index = 0;\n+    StringRef name_ref;\n+    while (true)\n+    {\n+        if (in->eof())\n+            break;\n+\n+        auto tmp = readFieldName(*in);\n+        name_ref = StringRef(tmp);\n+        auto * it = name_map.find(name_ref);\n+\n+        if (!it)\n+        {\n+            if (!format_settings.skip_unknown_fields)\n+                throw Exception(ErrorCodes::INCORRECT_DATA, \"Unknown field found while parsing Form format: {}\", name_ref.toString());\n+\n+            /// Skip the value if key is not found.\n+            String encoded_str;\n+            readStringUntilAmpersand(encoded_str, *in);\n+\n+            if (!in->eof())\n+                assertChar('&',*in);\n+\n+        }\n+        else\n+        {\n+            index = it->getMapped();\n+            readField(index, columns);\n+        }\n+    }\n+}\n+\n+bool FormRowInputFormat::readRow(MutableColumns & columns, RowReadExtension & ext)\n+{\n+    if (in->eof())\n+        return false;\n+\n+    size_t num_columns = columns.size();\n+    seen_columns.assign(num_columns, false);\n+\n+    readFormData(columns);\n+\n+    const auto & header = getPort().getHeader();\n+    /// Non-visited columns get filled with default values\n+    for (size_t i = 0; i < num_columns; ++i)\n+        if (!seen_columns[i])\n+            header.getByPosition(i).type->insertDefaultInto(*columns[i]);\n+\n+    /// Return info about defaults set.\n+    /// If defaults_for_omitted_fields is set to 0, then we leave already inserted defaults.\n+    if (format_settings.defaults_for_omitted_fields)\n+        ext.read_columns = seen_columns;\n+    else\n+        ext.read_columns.assign(seen_columns.size(), true);\n+    return true;\n+}\n+\n+void FormRowInputFormat::resetParser()\n+{\n+    IRowInputFormat::resetParser();\n+    seen_columns.clear();\n+}\n+\n+FormSchemaReader::FormSchemaReader(ReadBuffer & in_, const FormatSettings & format_settings_)\n+    : IRowWithNamesSchemaReader(in_, format_settings_,getDefaultDataTypeForEscapingRule(FormatSettings::EscapingRule::Escaped))\n+{\n+}\n+\n+NamesAndTypesList readRowAndGetNamesAndDataTypesForFormRow(ReadBuffer & in, const FormatSettings & settings)\n+{\n+    NamesAndTypesList names_and_types;\n+    String field, value, decoded_value;\n+    do\n+    {\n+        auto name = readFieldName(in);\n+        readStringUntilAmpersand(value,in);\n+        Poco::URI::decode(value, decoded_value);\n+        auto type = tryInferDataTypeByEscapingRule(decoded_value, settings, FormatSettings::EscapingRule::Raw);\n+        names_and_types.emplace_back(name, type);\n+    }\n+    while (checkChar('&',in));\n+    return names_and_types;\n+}\n+\n+NamesAndTypesList FormSchemaReader::readRowAndGetNamesAndDataTypes(bool & eof)\n+{\n+    if (in.eof())\n+    {\n+        eof = true;\n+        return {};\n+    }\n+    return readRowAndGetNamesAndDataTypesForFormRow(in, format_settings);\n+}\n+\n+void registerInputFormatForm(FormatFactory & factory)\n+{\n+    factory.registerInputFormat(\"Form\", [](\n+        ReadBuffer & buf,\n+        const Block & sample,\n+        IRowInputFormat::Params params,\n+        const FormatSettings & settings)\n+    {\n+        return std::make_shared<FormRowInputFormat>(buf, sample, std::move(params),settings);\n+    });\n+}\n+\n+void registerFormSchemaReader(FormatFactory & factory)\n+{\n+    factory.registerSchemaReader(\"Form\", [](ReadBuffer & buffer, const FormatSettings & settings)\n+    {\n+        return std::make_shared<FormSchemaReader>(buffer, settings);\n+    });\n+}\n+\n+}\n+\n+\ndiff --git a/src/Processors/Formats/Impl/FormRowInputFormat.h b/src/Processors/Formats/Impl/FormRowInputFormat.h\nnew file mode 100644\nindex 000000000000..00a90f39e8e7\n--- /dev/null\n+++ b/src/Processors/Formats/Impl/FormRowInputFormat.h\n@@ -0,0 +1,46 @@\n+#pragma once\n+\n+#include <Processors/Formats/IRowInputFormat.h>\n+#include <Processors/Formats/ISchemaReader.h>\n+#include <Formats/FormatSettings.h>\n+#include <Common/HashTable/HashMap.h>\n+\n+namespace DB\n+{\n+\n+class ReadBuffer;\n+\n+class FormRowInputFormat final : public IRowInputFormat\n+{\n+public:\n+    FormRowInputFormat(ReadBuffer & in_, Block header_, Params params_, const FormatSettings & format_settings_);\n+    String getName() const override { return \"FormInputFormat\"; }\n+    void resetParser() override;\n+\n+private:\n+    void readPrefix() override;\n+    bool readRow(MutableColumns & columns, RowReadExtension & ext) override;\n+    void readFormData(MutableColumns & columns);\n+    void readField(size_t index, MutableColumns & columns);\n+    const String & columnName(size_t i) const;\n+\n+    /// Hash table matches field name to position in the block\n+    using NameMap = HashMap<StringRef, size_t, StringRefHash>;\n+    NameMap name_map;\n+\n+protected:\n+    const FormatSettings format_settings;\n+    std::vector<UInt8> seen_columns;\n+};\n+\n+class FormSchemaReader : public IRowWithNamesSchemaReader\n+{\n+public:\n+    FormSchemaReader(ReadBuffer & in_, const FormatSettings & format_settings_);\n+private:\n+    NamesAndTypesList readRowAndGetNamesAndDataTypes(bool & eof) override;\n+    NamesAndTypesList readRowAndGetNamesAndDataTypesForForm(ReadBuffer & in, const FormatSettings & settings);\n+};\n+\n+}\n+\ndiff --git a/utils/check-style/aspell-ignore/en/aspell-dict.txt b/utils/check-style/aspell-ignore/en/aspell-dict.txt\nindex 2b260566816d..755bc9cea2ce 100644\n--- a/utils/check-style/aspell-ignore/en/aspell-dict.txt\n+++ b/utils/check-style/aspell-ignore/en/aspell-dict.txt\n@@ -1002,6 +1002,7 @@ UMTS\n UNDROP\n UPDATEs\n URIs\n+URL\n URL's\n URLHash\n URLHierarchy\n@@ -2761,6 +2762,7 @@ uptime\n uptrace\n uring\n url\n+urlencoded\n urlCluster\n urls\n usearch\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02984_form_format.reference b/tests/queries/0_stateless/02984_form_format.reference\nnew file mode 100644\nindex 000000000000..34612dbbb504\n--- /dev/null\n+++ b/tests/queries/0_stateless/02984_form_format.reference\n@@ -0,0 +1,90 @@\n+42\tHello, World!\n+Hello, World!\n+col1\tNullable(Int64)\t\t\t\t\t\n+col2\tNullable(String)\t\t\t\t\t\n+col3\tNullable(String)\t\t\t\t\t\n+42\tHello, World!\t[1, 2, 3]\n+Row 1:\n+\u2500\u2500\u2500\u2500\u2500\u2500\n+c.e:                  ls7xfkpm\n+c.tti.m:              raf\n+rt.start:             navigation\n+rt.bmr:               390,11,10\n+rt.tstart:            1707076768666\n+rt.bstart:            1707076769091\n+rt.blstart:           1707076769056\n+rt.end:               1707076769078\n+t_resp:               296\n+t_page:               116\n+t_done:               412\n+t_other:              boomerang|6,boomr_fb|425,boomr_ld|390,boomr_lat|35\n+rt.tt:                2685\n+rt.obo:               0\n+pt.fcp:               407\n+nt_nav_st:            1707076768666\n+nt_dns_st:            1707076768683\n+nt_dns_end:           1707076768684\n+nt_con_st:            1707076768684\n+nt_con_end:           1707076768850\n+nt_req_st:            1707076768850\n+nt_res_st:            1707076768962\n+nt_res_end:           1707076768962\n+nt_domloading:        1707076769040\n+nt_domint:            1707076769066\n+nt_domcontloaded_st:  1707076769067\n+nt_domcontloaded_end: 1707076769068\n+nt_domcomp:           1707076769069\n+nt_load_st:           1707076769069\n+nt_load_end:          1707076769078\n+nt_unload_st:         1707076769040\n+nt_unload_end:        1707076769041\n+nt_ssl_st:            1707076768788\n+nt_enc_size:          3209\n+nt_dec_size:          10093\n+nt_trn_size:          3940\n+nt_protocol:          h2\n+nt_red_cnt:           0\n+nt_nav_type:          1\n+restiming:            {\"https://www.basicrum.com/\":{\"publications/\":\"6,88,88,54,54,3e,i,i,h*12h5,kb,5b8\",\"assets/js/\":{\"just-the-docs.js\":\"3am,e,e*12pc,_,8oj*20\",\"boomerang-1.737.60.cutting-edge.min.js\":\"2au,b,a*1pu3,_,1m19*21*42\",\"vendor/lunr.min.js\":\"3am,d,8*16t2,_,fym*20\"}}}\n+u:                    https://www.basicrum.com/publications/\n+r:                    https://www.basicrum.com/cost-analyses/\n+v:                    1.737.60\n+sv:                   14\n+sm:                   p\n+rt.si:                dd0c542f-7adf-4310-830a-6c0a3d157c90-s8cjr1\n+rt.ss:                1707075325294\n+rt.sl:                4\n+vis.st:               visible\n+ua.plt:               Linux x86_64\n+ua.vnd:               \n+pid:                  8fftz949\n+n:                    1\n+c.t.fps:              07*4*65*j*61\n+c.t.busy:             2*4*0034\n+c.tti.vr:             408\n+c.tti:                408\n+c.b:                  2\n+c.f:                  60\n+c.f.d:                2511\n+c.f.m:                1\n+c.f.s:                ls7xfl1h\n+dom.res:              5\n+dom.doms:             1\n+mem.lsln:             0\n+mem.ssln:             0\n+mem.lssz:             2\n+mem.sssz:             2\n+scr.xy:               1920x1200\n+scr.bpp:              24/24\n+scr.orn:              0/landscape-primary\n+cpu.cnc:              16\n+dom.ln:               114\n+dom.sz:               10438\n+dom.ck:               157\n+dom.img:              0\n+dom.script:           6\n+dom.script.ext:       3\n+dom.iframe:           0\n+dom.link:             4\n+dom.link.css:         1\n+sb:                   1\ndiff --git a/tests/queries/0_stateless/02984_form_format.sh b/tests/queries/0_stateless/02984_form_format.sh\nnew file mode 100755\nindex 000000000000..ce5feb60130a\n--- /dev/null\n+++ b/tests/queries/0_stateless/02984_form_format.sh\n@@ -0,0 +1,33 @@\n+#!/bin/bash\n+# Tags: no-parallel\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+# Test setup \n+USER_FILES_PATH=$($CLICKHOUSE_CLIENT_BINARY --query \"select _path,_file from file('nonexist.txt', 'CSV', 'val1 char')\" 2>&1 | grep Exception | awk '{gsub(\"/nonexist.txt\",\"\",$9); print $9}')\n+FILE_NAME=\"data.tmp\"\n+FORM_DATA=\"${USER_FILES_PATH}/${CLICKHOUSE_TEST_UNIQUE_NAME}/${FILE_NAME}\"\n+mkdir -p ${USER_FILES_PATH}/${CLICKHOUSE_TEST_UNIQUE_NAME}/\n+touch $FORM_DATA \n+\n+# Simple tests\n+echo -ne \"col1=42&col2=Hello%2C%20World%21\" > $FORM_DATA\n+$CLICKHOUSE_CLIENT -q \"SELECT * from file('$FORM_DATA', Form, 'col1 UInt64, col2 String')\"\n+$CLICKHOUSE_CLIENT -q \"SELECT * from file('$FORM_DATA', Form, 'col2 String')\"\n+rm $FORM_DATA\n+\n+# Schema reader test\n+touch $FORM_DATA\n+echo -ne \"col1=42&col2=Hello%2C%20World%21&col3=%5B1%2C%202%2C%203%5D\" > $FORM_DATA\n+$CLICKHOUSE_CLIENT -q \"DESC file('$FORM_DATA', Form)\"\n+$CLICKHOUSE_CLIENT -q \"SELECT * FROM file('$FORM_DATA', Form)\"\n+rm $FORM_DATA\n+\n+# Test with data-raw from request\n+touch $FORM_DATA\n+echo -ne \"c.e=ls7xfkpm&c.tti.m=raf&rt.start=navigation&rt.bmr=390%2C11%2C10&rt.tstart=1707076768666&rt.bstart=1707076769091&rt.blstart=1707076769056&rt.end=1707076769078&t_resp=296&t_page=116&t_done=412&t_other=boomerang%7C6%2Cboomr_fb%7C425%2Cboomr_ld%7C390%2Cboomr_lat%7C35&rt.tt=2685&rt.obo=0&pt.fcp=407&nt_nav_st=1707076768666&nt_dns_st=1707076768683&nt_dns_end=1707076768684&nt_con_st=1707076768684&nt_con_end=1707076768850&nt_req_st=1707076768850&nt_res_st=1707076768962&nt_res_end=1707076768962&nt_domloading=1707076769040&nt_domint=1707076769066&nt_domcontloaded_st=1707076769067&nt_domcontloaded_end=1707076769068&nt_domcomp=1707076769069&nt_load_st=1707076769069&nt_load_end=1707076769078&nt_unload_st=1707076769040&nt_unload_end=1707076769041&nt_ssl_st=1707076768788&nt_enc_size=3209&nt_dec_size=10093&nt_trn_size=3940&nt_protocol=h2&nt_red_cnt=0&nt_nav_type=1&restiming=%7B%22https%3A%2F%2Fwww.basicrum.com%2F%22%3A%7B%22publications%2F%22%3A%226%2C88%2C88%2C54%2C54%2C3e%2Ci%2Ci%2Ch*12h5%2Ckb%2C5b8%22%2C%22assets%2Fjs%2F%22%3A%7B%22just-the-docs.js%22%3A%223am%2Ce%2Ce*12pc%2C_%2C8oj*20%22%2C%22boomerang-1.737.60.cutting-edge.min.js%22%3A%222au%2Cb%2Ca*1pu3%2C_%2C1m19*21*42%22%2C%22vendor%2Flunr.min.js%22%3A%223am%2Cd%2C8*16t2%2C_%2Cfym*20%22%7D%7D%7D&u=https%3A%2F%2Fwww.basicrum.com%2Fpublications%2F&r=https%3A%2F%2Fwww.basicrum.com%2Fcost-analyses%2F&v=1.737.60&sv=14&sm=p&rt.si=dd0c542f-7adf-4310-830a-6c0a3d157c90-s8cjr1&rt.ss=1707075325294&rt.sl=4&vis.st=visible&ua.plt=Linux%20x86_64&ua.vnd=&pid=8fftz949&n=1&c.t.fps=07*4*65*j*61&c.t.busy=2*4*0034&c.tti.vr=408&c.tti=408&c.b=2&c.f=60&c.f.d=2511&c.f.m=1&c.f.s=ls7xfl1h&dom.res=5&dom.doms=1&mem.lsln=0&mem.ssln=0&mem.lssz=2&mem.sssz=2&scr.xy=1920x1200&scr.bpp=24%2F24&scr.orn=0%2Flandscape-primary&cpu.cnc=16&dom.ln=114&dom.sz=10438&dom.ck=157&dom.img=0&dom.script=6&dom.script.ext=3&dom.iframe=0&dom.link=4&dom.link.css=1&sb=1\" > $FORM_DATA\n+$CLICKHOUSE_CLIENT -q \"SELECT * FROM file('$FORM_DATA', Form) FORMAT Vertical\"\n+\n+rm $FORM_DATA\n\\ No newline at end of file\n",
  "problem_statement": "Input format `Form` to read/write a single record in the `application/x-www-form-urlencoded` format\n**Use case**\r\n\r\nOpen this website, open the browser console, then check the \"beacon\" request:\r\n\r\n`curl 'https://beacon.basicrum.com/beacon/catcher.php' -X POST -H 'User-Agent: ...' -H 'Accept: */*' -H 'Accept-Language: en-US,en;q=0.5' -H 'Accept-Encoding: gzip, deflate, br' -H 'Content-Type: application/x-www-form-urlencoded' -H 'Origin: https://www.basicrum.com' -H 'Connection: keep-alive' -H 'Referer: https://www.basicrum.com/' -H 'Cookie: RT=\"z=1&dm=basicrum.com&si=dd0c542f-7adf-4310-830a-6c0a3d157c90&ss=ls7wkmzy&sl=4&tt=22l&bcn=https%3A%2F%2Fbeacon.basicrum.com%2Fbeacon%2Fcatcher.php&ld=uy1r\"' -H 'Sec-Fetch-Dest: empty' -H 'Sec-Fetch-Mode: no-cors' -H 'Sec-Fetch-Site: same-site' -H 'TE: trailers' --data-raw 'c.e=ls7xfkpm&c.tti.m=raf&rt.start=navigation&rt.bmr=390%2C11%2C10&rt.tstart=1707076768666&rt.bstart=1707076769091&rt.blstart=1707076769056&rt.end=1707076769078&t_resp=296&t_page=116&t_done=412&t_other=boomerang%7C6%2Cboomr_fb%7C425%2Cboomr_ld%7C390%2Cboomr_lat%7C35&rt.tt=2685&rt.obo=0&pt.fcp=407&nt_nav_st=1707076768666&nt_dns_st=1707076768683&nt_dns_end=1707076768684&nt_con_st=1707076768684&nt_con_end=1707076768850&nt_req_st=1707076768850&nt_res_st=1707076768962&nt_res_end=1707076768962&nt_domloading=1707076769040&nt_domint=1707076769066&nt_domcontloaded_st=1707076769067&nt_domcontloaded_end=1707076769068&nt_domcomp=1707076769069&nt_load_st=1707076769069&nt_load_end=1707076769078&nt_unload_st=1707076769040&nt_unload_end=1707076769041&nt_ssl_st=1707076768788&nt_enc_size=3209&nt_dec_size=10093&nt_trn_size=3940&nt_protocol=h2&nt_red_cnt=0&nt_nav_type=1&restiming=%7B%22https%3A%2F%2Fwww.basicrum.com%2F%22%3A%7B%22publications%2F%22%3A%226%2C88%2C88%2C54%2C54%2C3e%2Ci%2Ci%2Ch*12h5%2Ckb%2C5b8%22%2C%22assets%2Fjs%2F%22%3A%7B%22just-the-docs.js%22%3A%223am%2Ce%2Ce*12pc%2C_%2C8oj*20%22%2C%22boomerang-1.737.60.cutting-edge.min.js%22%3A%222au%2Cb%2Ca*1pu3%2C_%2C1m19*21*42%22%2C%22vendor%2Flunr.min.js%22%3A%223am%2Cd%2C8*16t2%2C_%2Cfym*20%22%7D%7D%7D&u=https%3A%2F%2Fwww.basicrum.com%2Fpublications%2F&r=https%3A%2F%2Fwww.basicrum.com%2Fcost-analyses%2F&v=1.737.60&sv=14&sm=p&rt.si=dd0c542f-7adf-4310-830a-6c0a3d157c90-s8cjr1&rt.ss=1707075325294&rt.sl=4&vis.st=visible&ua.plt=Linux%20x86_64&ua.vnd=&pid=8fftz949&n=1&c.t.fps=07*4*65*j*61&c.t.busy=2*4*0034&c.tti.vr=408&c.tti=408&c.b=2&c.f=60&c.f.d=2511&c.f.m=1&c.f.s=ls7xfl1h&dom.res=5&dom.doms=1&mem.lsln=0&mem.ssln=0&mem.lssz=2&mem.sssz=2&scr.xy=1920x1200&scr.bpp=24%2F24&scr.orn=0%2Flandscape-primary&cpu.cnc=16&dom.ln=114&dom.sz=10438&dom.ck=157&dom.img=0&dom.script=6&dom.script.ext=3&dom.iframe=0&dom.link=4&dom.link.css=1&sb=1'`\r\n\r\n![Screenshot_20240204_210312](https://github.com/ClickHouse/ClickHouse/assets/18581488/923cf4fb-c37e-40e0-b9d8-23f2e56592c2)\r\n\r\nThe format is just a set of URL-encoded key-value pairs.\r\nWe should parse it as a single record with the corresponding columns.\r\n\r\n**Additional context**\r\n\r\nSee https://github.com/akamai/boomerang\r\n\r\nWe should also implement an output format to send forms easily with the URL engine.\n",
  "hints_text": "@alexey-milovidov I'll gladly pick this up - I want to tackle the Npy output format issue but this might be a nice easy introduction to doing a new format. baby steps... \n@Blargian, thank you! This will be really nice, appreciate your help!\n@alexey-milovidov as I understand we are interested in parsing the form-data (or `--data-raw` with curl above) where key-value pair will map to column-name and field?\r\n![Screenshot from 2024-02-08 13-21-36](https://github.com/ClickHouse/ClickHouse/assets/41984034/323c61e0-3b33-40d0-913e-bb88bd46809d)\r\n\r\nI have a question how input to ClickHouse will look in the use case. Basicrum page mentions:\r\n\r\n> The Beacon Catcher server persists beacons in a raw format in a temporary storage prepared for reading and decoding on the nex.\r\n\r\n> The beacon decoding service reads a batch of raw beacons, decodes them and prepares the decoded beacon data for inserting in ClickHouse DB. \r\n\r\nI'd like to better understand this. Is this decoded beacon data that ClickHouse ingests what we see in the curl command as `--data-raw 'c.e=ls7xfkpm&c.tti.m=raf...`?  I.e we would have a `.tmp` file with contents like below, which CH reads in:\r\n\r\n```\r\nc.e=ls7xfkpm&c.tti.m=raf&rt.start=navigation&rt.bmr=390%2C11%2C10&rt.tstart=1707076768666&rt.bstart=1707076769091&rt.blstart=1707076769056&rt.end=1707076769078&t_resp=296&t_page=116&t_done=412&t_other=boomerang%7C6%2Cboomr_fb%7C425%2Cboomr_ld%7C390%2Cboomr_lat%7C35&rt.tt=2685&rt.obo=0&pt.fcp=407&nt_nav_st=1707076768666&nt_dns_st=1707076768683&nt_dns_end=1707076768684&nt_con_st=1707076768684&nt_con_end=1707076768850\r\n```\r\n\r\nExample usage something like `SELECT * FROM file('beacon_data.tmp', Form)`\r\n\r\nAlso, could you tell me if there are any formats which have aspects in common with this problem that I could use for reference? I think implementation will inherit from `IRowInputFormat` for a start.   \nClickHouse accepts HTTP POST data for insertion.\r\n\r\nExample:\r\n\r\n`curl http://localhost:8123/?query=INSERT%20INTO%20table%20FORMAT%20TSV --data-binary @- < data.tsv`\r\n\r\nIn the same way, it will be expected to work with the new Form format:\r\n\r\n`curl http://localhost:8123/?query=INSERT%20INTO%20table%20FORMAT%20Form --data-binary @- < data`\r\n\r\nInsertion from `clickhouse-client`, and selects from `file` will also work, although the main use-case will be - inserts over HTTP.\r\n\r\n> if there are any formats which have aspects in common\r\n\r\n`TSKV`, `JSONEachRow` will be similar. Yes, inheriting from `IRowInputFormat` makes sense.",
  "created_at": "2024-02-20T20:33:23Z",
  "modified_files": [
    "docs/en/interfaces/formats.md",
    "src/Formats/registerFormats.cpp",
    "src/IO/ReadHelpers.cpp",
    "src/IO/ReadHelpers.h",
    "b/src/Processors/Formats/Impl/FormRowInputFormat.cpp",
    "b/src/Processors/Formats/Impl/FormRowInputFormat.h",
    "utils/check-style/aspell-ignore/en/aspell-dict.txt"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02984_form_format.reference",
    "b/tests/queries/0_stateless/02984_form_format.sh"
  ]
}