{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 56545,
  "instance_id": "ClickHouse__ClickHouse-56545",
  "issue_numbers": [
    "56258"
  ],
  "base_commit": "bda459ab4d8060f371ef4dcb9911ea7e765d6e97",
  "patch": "diff --git a/src/Interpreters/Cache/QueryCache.cpp b/src/Interpreters/Cache/QueryCache.cpp\nindex 33cb124f3bcb..e8b52bbc6a0c 100644\n--- a/src/Interpreters/Cache/QueryCache.cpp\n+++ b/src/Interpreters/Cache/QueryCache.cpp\n@@ -147,17 +147,18 @@ QueryCache::Key::Key(ASTPtr ast_, const String & user_name_)\n {\n }\n \n+/// Hashing of ASTs must consider aliases (issue #56258)\n+constexpr bool ignore_aliases = false;\n+\n bool QueryCache::Key::operator==(const Key & other) const\n {\n-    return ast->getTreeHash() == other.ast->getTreeHash();\n+    return ast->getTreeHash(ignore_aliases) == other.ast->getTreeHash(ignore_aliases);\n }\n \n size_t QueryCache::KeyHasher::operator()(const Key & key) const\n {\n-    SipHash hash;\n-    hash.update(key.ast->getTreeHash());\n-    auto res = hash.get64();\n-    return res;\n+    IAST::Hash hash = key.ast->getTreeHash(ignore_aliases);\n+    return hash.low64;\n }\n \n size_t QueryCache::QueryCacheEntryWeight::operator()(const Entry & entry) const\ndiff --git a/src/Parsers/ASTColumnsMatcher.cpp b/src/Parsers/ASTColumnsMatcher.cpp\nindex aff7d9fa8336..30b172ecbb81 100644\n--- a/src/Parsers/ASTColumnsMatcher.cpp\n+++ b/src/Parsers/ASTColumnsMatcher.cpp\n@@ -46,11 +46,11 @@ void ASTColumnsRegexpMatcher::appendColumnName(WriteBuffer & ostr) const\n     writeChar(')', ostr);\n }\n \n-void ASTColumnsRegexpMatcher::updateTreeHashImpl(SipHash & hash_state) const\n+void ASTColumnsRegexpMatcher::updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const\n {\n     hash_state.update(original_pattern.size());\n     hash_state.update(original_pattern);\n-    IAST::updateTreeHashImpl(hash_state);\n+    IAST::updateTreeHashImpl(hash_state, ignore_aliases);\n }\n \n void ASTColumnsRegexpMatcher::formatImpl(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const\n@@ -201,11 +201,11 @@ const std::shared_ptr<re2::RE2> & ASTQualifiedColumnsRegexpMatcher::getMatcher()\n     return column_matcher;\n }\n \n-void ASTQualifiedColumnsRegexpMatcher::updateTreeHashImpl(SipHash & hash_state) const\n+void ASTQualifiedColumnsRegexpMatcher::updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const\n {\n     hash_state.update(original_pattern.size());\n     hash_state.update(original_pattern);\n-    IAST::updateTreeHashImpl(hash_state);\n+    IAST::updateTreeHashImpl(hash_state, ignore_aliases);\n }\n \n void ASTQualifiedColumnsRegexpMatcher::formatImpl(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const\ndiff --git a/src/Parsers/ASTColumnsMatcher.h b/src/Parsers/ASTColumnsMatcher.h\nindex f31a8bd9a22a..6fc5581a4ebe 100644\n--- a/src/Parsers/ASTColumnsMatcher.h\n+++ b/src/Parsers/ASTColumnsMatcher.h\n@@ -27,7 +27,7 @@ class ASTColumnsRegexpMatcher : public IAST\n     const String & getPattern() const;\n     const std::shared_ptr<re2::RE2> & getMatcher() const;\n     bool isColumnMatching(const String & column_name) const;\n-    void updateTreeHashImpl(SipHash & hash_state) const override;\n+    void updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const override;\n \n     ASTPtr expression;\n     ASTPtr transformers;\n@@ -65,7 +65,7 @@ class ASTQualifiedColumnsRegexpMatcher : public IAST\n     const std::shared_ptr<re2::RE2> & getMatcher() const;\n     void setPattern(String pattern, bool set_matcher = true);\n     void setMatcher(std::shared_ptr<re2::RE2> matcher);\n-    void updateTreeHashImpl(SipHash & hash_state) const override;\n+    void updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const override;\n \n     ASTPtr qualifier;\n     ASTPtr transformers;\ndiff --git a/src/Parsers/ASTColumnsTransformers.cpp b/src/Parsers/ASTColumnsTransformers.cpp\nindex 27d56dec283c..6976683678ef 100644\n--- a/src/Parsers/ASTColumnsTransformers.cpp\n+++ b/src/Parsers/ASTColumnsTransformers.cpp\n@@ -151,15 +151,15 @@ void ASTColumnsApplyTransformer::appendColumnName(WriteBuffer & ostr) const\n     }\n }\n \n-void ASTColumnsApplyTransformer::updateTreeHashImpl(SipHash & hash_state) const\n+void ASTColumnsApplyTransformer::updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const\n {\n     hash_state.update(func_name.size());\n     hash_state.update(func_name);\n     if (parameters)\n-        parameters->updateTreeHashImpl(hash_state);\n+        parameters->updateTreeHashImpl(hash_state, ignore_aliases);\n \n     if (lambda)\n-        lambda->updateTreeHashImpl(hash_state);\n+        lambda->updateTreeHashImpl(hash_state, ignore_aliases);\n \n     hash_state.update(lambda_arg.size());\n     hash_state.update(lambda_arg);\n@@ -167,7 +167,7 @@ void ASTColumnsApplyTransformer::updateTreeHashImpl(SipHash & hash_state) const\n     hash_state.update(column_name_prefix.size());\n     hash_state.update(column_name_prefix);\n \n-    IAST::updateTreeHashImpl(hash_state);\n+    IAST::updateTreeHashImpl(hash_state, ignore_aliases);\n }\n \n void ASTColumnsExceptTransformer::formatImpl(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const\n@@ -216,13 +216,13 @@ void ASTColumnsExceptTransformer::appendColumnName(WriteBuffer & ostr) const\n         writeChar(')', ostr);\n }\n \n-void ASTColumnsExceptTransformer::updateTreeHashImpl(SipHash & hash_state) const\n+void ASTColumnsExceptTransformer::updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const\n {\n     hash_state.update(is_strict);\n     hash_state.update(original_pattern.size());\n     hash_state.update(original_pattern);\n \n-    IAST::updateTreeHashImpl(hash_state);\n+    IAST::updateTreeHashImpl(hash_state, ignore_aliases);\n }\n \n void ASTColumnsExceptTransformer::transform(ASTs & nodes) const\n@@ -312,14 +312,14 @@ void ASTColumnsReplaceTransformer::Replacement::appendColumnName(WriteBuffer & o\n     writeProbablyBackQuotedString(name, ostr);\n }\n \n-void ASTColumnsReplaceTransformer::Replacement::updateTreeHashImpl(SipHash & hash_state) const\n+void ASTColumnsReplaceTransformer::Replacement::updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const\n {\n     assert(children.size() == 1);\n \n     hash_state.update(name.size());\n     hash_state.update(name);\n-    children[0]->updateTreeHashImpl(hash_state);\n-    IAST::updateTreeHashImpl(hash_state);\n+    children[0]->updateTreeHashImpl(hash_state, ignore_aliases);\n+    IAST::updateTreeHashImpl(hash_state, ignore_aliases);\n }\n \n void ASTColumnsReplaceTransformer::formatImpl(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const\n@@ -361,10 +361,10 @@ void ASTColumnsReplaceTransformer::appendColumnName(WriteBuffer & ostr) const\n         writeChar(')', ostr);\n }\n \n-void ASTColumnsReplaceTransformer::updateTreeHashImpl(SipHash & hash_state) const\n+void ASTColumnsReplaceTransformer::updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const\n {\n     hash_state.update(is_strict);\n-    IAST::updateTreeHashImpl(hash_state);\n+    IAST::updateTreeHashImpl(hash_state, ignore_aliases);\n }\n \n void ASTColumnsReplaceTransformer::replaceChildren(ASTPtr & node, const ASTPtr & replacement, const String & name)\ndiff --git a/src/Parsers/ASTColumnsTransformers.h b/src/Parsers/ASTColumnsTransformers.h\nindex e42949ebfd8a..a2a138e13c9b 100644\n--- a/src/Parsers/ASTColumnsTransformers.h\n+++ b/src/Parsers/ASTColumnsTransformers.h\n@@ -48,7 +48,7 @@ class ASTColumnsApplyTransformer : public IASTColumnsTransformer\n     }\n     void transform(ASTs & nodes) const override;\n     void appendColumnName(WriteBuffer & ostr) const override;\n-    void updateTreeHashImpl(SipHash & hash_state) const override;\n+    void updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const override;\n \n     // Case 1  APPLY (quantile(0.9))\n     String func_name;\n@@ -80,7 +80,7 @@ class ASTColumnsExceptTransformer : public IASTColumnsTransformer\n     const std::shared_ptr<re2::RE2> & getMatcher() const;\n     bool isColumnMatching(const String & column_name) const;\n     void appendColumnName(WriteBuffer & ostr) const override;\n-    void updateTreeHashImpl(SipHash & hash_state) const override;\n+    void updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const override;\n \n protected:\n     void formatImpl(const FormatSettings & settings, FormatState &, FormatStateStacked) const override;\n@@ -103,7 +103,7 @@ class ASTColumnsReplaceTransformer : public IASTColumnsTransformer\n         }\n \n         void appendColumnName(WriteBuffer & ostr) const override;\n-        void updateTreeHashImpl(SipHash & hash_state) const override;\n+        void updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const override;\n \n         String name;\n \n@@ -121,7 +121,7 @@ class ASTColumnsReplaceTransformer : public IASTColumnsTransformer\n     }\n     void transform(ASTs & nodes) const override;\n     void appendColumnName(WriteBuffer & ostr) const override;\n-    void updateTreeHashImpl(SipHash & hash_state) const override;\n+    void updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const override;\n \n protected:\n     void formatImpl(const FormatSettings & settings, FormatState &, FormatStateStacked) const override;\ndiff --git a/src/Parsers/ASTFunction.cpp b/src/Parsers/ASTFunction.cpp\nindex 267148ee62b5..80d9f2fb4a53 100644\n--- a/src/Parsers/ASTFunction.cpp\n+++ b/src/Parsers/ASTFunction.cpp\n@@ -599,11 +599,11 @@ ASTPtr ASTFunction::clone() const\n }\n \n \n-void ASTFunction::updateTreeHashImpl(SipHash & hash_state) const\n+void ASTFunction::updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const\n {\n     hash_state.update(name.size());\n     hash_state.update(name);\n-    IAST::updateTreeHashImpl(hash_state);\n+    ASTWithAlias::updateTreeHashImpl(hash_state, ignore_aliases);\n }\n \n template <typename Container>\ndiff --git a/src/Parsers/ASTFunction.h b/src/Parsers/ASTFunction.h\nindex 4a036c5e94af..fe30b7c6e95b 100644\n--- a/src/Parsers/ASTFunction.h\n+++ b/src/Parsers/ASTFunction.h\n@@ -63,7 +63,7 @@ class ASTFunction : public ASTWithAlias\n \n     ASTPtr clone() const override;\n \n-    void updateTreeHashImpl(SipHash & hash_state) const override;\n+    void updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const override;\n \n     ASTSelectWithUnionQuery * tryGetQueryArgument() const;\n \ndiff --git a/src/Parsers/ASTFunctionWithKeyValueArguments.cpp b/src/Parsers/ASTFunctionWithKeyValueArguments.cpp\nindex 2c28e3426105..a5467bef3631 100644\n--- a/src/Parsers/ASTFunctionWithKeyValueArguments.cpp\n+++ b/src/Parsers/ASTFunctionWithKeyValueArguments.cpp\n@@ -53,12 +53,12 @@ bool ASTPair::hasSecretParts() const\n }\n \n \n-void ASTPair::updateTreeHashImpl(SipHash & hash_state) const\n+void ASTPair::updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const\n {\n     hash_state.update(first.size());\n     hash_state.update(first);\n     hash_state.update(second_with_brackets);\n-    IAST::updateTreeHashImpl(hash_state);\n+    IAST::updateTreeHashImpl(hash_state, ignore_aliases);\n }\n \n \n@@ -92,12 +92,12 @@ void ASTFunctionWithKeyValueArguments::formatImpl(const FormatSettings & setting\n }\n \n \n-void ASTFunctionWithKeyValueArguments::updateTreeHashImpl(SipHash & hash_state) const\n+void ASTFunctionWithKeyValueArguments::updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const\n {\n     hash_state.update(name.size());\n     hash_state.update(name);\n     hash_state.update(has_brackets);\n-    IAST::updateTreeHashImpl(hash_state);\n+    IAST::updateTreeHashImpl(hash_state, ignore_aliases);\n }\n \n }\ndiff --git a/src/Parsers/ASTFunctionWithKeyValueArguments.h b/src/Parsers/ASTFunctionWithKeyValueArguments.h\nindex 75a8ae0415ea..ec2a793154fa 100644\n--- a/src/Parsers/ASTFunctionWithKeyValueArguments.h\n+++ b/src/Parsers/ASTFunctionWithKeyValueArguments.h\n@@ -32,7 +32,7 @@ class ASTPair : public IAST\n \n     bool hasSecretParts() const override;\n \n-    void updateTreeHashImpl(SipHash & hash_state) const override;\n+    void updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const override;\n \n     void forEachPointerToChild(std::function<void(void**)> f) override\n     {\n@@ -66,7 +66,7 @@ class ASTFunctionWithKeyValueArguments : public IAST\n \n     void formatImpl(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const override;\n \n-    void updateTreeHashImpl(SipHash & hash_state) const override;\n+    void updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const override;\n };\n \n }\ndiff --git a/src/Parsers/ASTIdentifier.cpp b/src/Parsers/ASTIdentifier.cpp\nindex 042b4d9085d1..80a618170c6d 100644\n--- a/src/Parsers/ASTIdentifier.cpp\n+++ b/src/Parsers/ASTIdentifier.cpp\n@@ -87,6 +87,11 @@ void ASTIdentifier::setShortName(const String & new_name)\n     semantic->table = table;\n }\n \n+void ASTIdentifier::updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const\n+{\n+    ASTWithAlias::updateTreeHashImpl(hash_state, ignore_aliases);\n+}\n+\n const String & ASTIdentifier::name() const\n {\n     if (children.empty())\n@@ -244,10 +249,10 @@ void ASTTableIdentifier::resetTable(const String & database_name, const String &\n     uuid = identifier->uuid;\n }\n \n-void ASTTableIdentifier::updateTreeHashImpl(SipHash & hash_state) const\n+void ASTTableIdentifier::updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const\n {\n     hash_state.update(uuid);\n-    IAST::updateTreeHashImpl(hash_state);\n+    ASTIdentifier::updateTreeHashImpl(hash_state, ignore_aliases);\n }\n \n String getIdentifierName(const IAST * ast)\ndiff --git a/src/Parsers/ASTIdentifier.h b/src/Parsers/ASTIdentifier.h\nindex 0e030c797ceb..d986b9170f3c 100644\n--- a/src/Parsers/ASTIdentifier.h\n+++ b/src/Parsers/ASTIdentifier.h\n@@ -47,6 +47,8 @@ class ASTIdentifier : public ASTWithAlias\n     const String & shortName() const { return name_parts.back(); }\n     const String & name() const;\n \n+    void updateTreeHashImpl(SipHash & hash_state, bool ignore_alias) const override;\n+\n     void restoreTable();  // TODO(ilezhankin): get rid of this\n     std::shared_ptr<ASTTableIdentifier> createTable() const;  // returns |nullptr| if identifier is not table.\n \n@@ -91,7 +93,7 @@ class ASTTableIdentifier : public ASTIdentifier\n     // FIXME: used only when it's needed to rewrite distributed table name to real remote table name.\n     void resetTable(const String & database_name, const String & table_name);  // TODO(ilezhankin): get rid of this\n \n-    void updateTreeHashImpl(SipHash & hash_state) const override;\n+    void updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const override;\n };\n \n }\ndiff --git a/src/Parsers/ASTInsertQuery.cpp b/src/Parsers/ASTInsertQuery.cpp\nindex ecb2d4e331bc..88e087dd4eeb 100644\n--- a/src/Parsers/ASTInsertQuery.cpp\n+++ b/src/Parsers/ASTInsertQuery.cpp\n@@ -138,13 +138,13 @@ void ASTInsertQuery::formatImpl(const FormatSettings & settings, FormatState & s\n     }\n }\n \n-void ASTInsertQuery::updateTreeHashImpl(SipHash & hash_state) const\n+void ASTInsertQuery::updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const\n {\n     hash_state.update(table_id.database_name);\n     hash_state.update(table_id.table_name);\n     hash_state.update(table_id.uuid);\n     hash_state.update(format);\n-    IAST::updateTreeHashImpl(hash_state);\n+    IAST::updateTreeHashImpl(hash_state, ignore_aliases);\n }\n \n \ndiff --git a/src/Parsers/ASTInsertQuery.h b/src/Parsers/ASTInsertQuery.h\nindex 45fd3d979507..6a4ce078f79a 100644\n--- a/src/Parsers/ASTInsertQuery.h\n+++ b/src/Parsers/ASTInsertQuery.h\n@@ -72,7 +72,7 @@ class ASTInsertQuery : public IAST\n \n protected:\n     void formatImpl(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const override;\n-    void updateTreeHashImpl(SipHash & hash_state) const override;\n+    void updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const override;\n };\n \n }\ndiff --git a/src/Parsers/ASTLiteral.cpp b/src/Parsers/ASTLiteral.cpp\nindex 425e5c73bee6..8dedc5dc95d2 100644\n--- a/src/Parsers/ASTLiteral.cpp\n+++ b/src/Parsers/ASTLiteral.cpp\n@@ -10,11 +10,13 @@\n namespace DB\n {\n \n-void ASTLiteral::updateTreeHashImpl(SipHash & hash_state) const\n+void ASTLiteral::updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const\n {\n     const char * prefix = \"Literal_\";\n     hash_state.update(prefix, strlen(prefix));\n     applyVisitor(FieldVisitorHash(hash_state), value);\n+    if (!ignore_aliases)\n+        ASTWithAlias::updateTreeHashImpl(hash_state, ignore_aliases);\n }\n \n ASTPtr ASTLiteral::clone() const\ndiff --git a/src/Parsers/ASTLiteral.h b/src/Parsers/ASTLiteral.h\nindex e57bcfcd9d5a..0c55aceb0682 100644\n--- a/src/Parsers/ASTLiteral.h\n+++ b/src/Parsers/ASTLiteral.h\n@@ -41,7 +41,7 @@ class ASTLiteral : public ASTWithAlias\n \n     ASTPtr clone() const override;\n \n-    void updateTreeHashImpl(SipHash & hash_state) const override;\n+    void updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const override;\n \n protected:\n     void formatImplWithoutAlias(const FormatSettings & settings, FormatState &, FormatStateStacked) const override;\ndiff --git a/src/Parsers/ASTOrderByElement.cpp b/src/Parsers/ASTOrderByElement.cpp\nindex 884d69a18e34..318849812aa5 100644\n--- a/src/Parsers/ASTOrderByElement.cpp\n+++ b/src/Parsers/ASTOrderByElement.cpp\n@@ -7,13 +7,13 @@\n namespace DB\n {\n \n-void ASTOrderByElement::updateTreeHashImpl(SipHash & hash_state) const\n+void ASTOrderByElement::updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const\n {\n     hash_state.update(direction);\n     hash_state.update(nulls_direction);\n     hash_state.update(nulls_direction_was_explicitly_specified);\n     hash_state.update(with_fill);\n-    IAST::updateTreeHashImpl(hash_state);\n+    IAST::updateTreeHashImpl(hash_state, ignore_aliases);\n }\n \n void ASTOrderByElement::formatImpl(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const\ndiff --git a/src/Parsers/ASTOrderByElement.h b/src/Parsers/ASTOrderByElement.h\nindex 468d2161dff5..4cebc30be31b 100644\n--- a/src/Parsers/ASTOrderByElement.h\n+++ b/src/Parsers/ASTOrderByElement.h\n@@ -32,7 +32,7 @@ class ASTOrderByElement : public IAST\n         return clone;\n     }\n \n-    void updateTreeHashImpl(SipHash & hash_state) const override;\n+    void updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const override;\n \n protected:\n     void formatImpl(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const override;\ndiff --git a/src/Parsers/ASTQueryParameter.cpp b/src/Parsers/ASTQueryParameter.cpp\nindex c10cced23ce6..9e98252e779d 100644\n--- a/src/Parsers/ASTQueryParameter.cpp\n+++ b/src/Parsers/ASTQueryParameter.cpp\n@@ -23,4 +23,9 @@ void ASTQueryParameter::appendColumnNameImpl(WriteBuffer & ostr) const\n     writeString(name, ostr);\n }\n \n+void ASTQueryParameter::updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const\n+{\n+    ASTWithAlias::updateTreeHashImpl(hash_state, ignore_aliases);\n+}\n+\n }\ndiff --git a/src/Parsers/ASTQueryParameter.h b/src/Parsers/ASTQueryParameter.h\nindex 858b23a0250e..dd7f9bff863a 100644\n--- a/src/Parsers/ASTQueryParameter.h\n+++ b/src/Parsers/ASTQueryParameter.h\n@@ -21,6 +21,8 @@ class ASTQueryParameter : public ASTWithAlias\n \n     ASTPtr clone() const override { return std::make_shared<ASTQueryParameter>(*this); }\n \n+    void updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const override;\n+\n protected:\n     void formatImplWithoutAlias(const FormatSettings & settings, FormatState &, FormatStateStacked) const override;\n     void appendColumnNameImpl(WriteBuffer & ostr) const override;\ndiff --git a/src/Parsers/ASTSelectQuery.cpp b/src/Parsers/ASTSelectQuery.cpp\nindex 2d82708c70df..7c96db006c4f 100644\n--- a/src/Parsers/ASTSelectQuery.cpp\n+++ b/src/Parsers/ASTSelectQuery.cpp\n@@ -42,14 +42,14 @@ ASTPtr ASTSelectQuery::clone() const\n }\n \n \n-void ASTSelectQuery::updateTreeHashImpl(SipHash & hash_state) const\n+void ASTSelectQuery::updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const\n {\n     hash_state.update(distinct);\n     hash_state.update(group_by_with_totals);\n     hash_state.update(group_by_with_rollup);\n     hash_state.update(group_by_with_cube);\n     hash_state.update(limit_with_ties);\n-    IAST::updateTreeHashImpl(hash_state);\n+    IAST::updateTreeHashImpl(hash_state, ignore_aliases);\n }\n \n \ndiff --git a/src/Parsers/ASTSelectQuery.h b/src/Parsers/ASTSelectQuery.h\nindex 101dbe9d02c5..57f45a8aacd9 100644\n--- a/src/Parsers/ASTSelectQuery.h\n+++ b/src/Parsers/ASTSelectQuery.h\n@@ -137,7 +137,7 @@ class ASTSelectQuery : public IAST\n     void replaceDatabaseAndTable(const String & database_name, const String & table_name);\n     void replaceDatabaseAndTable(const StorageID & table_id);\n     void addTableFunction(ASTPtr & table_function_ptr);\n-    void updateTreeHashImpl(SipHash & hash_state) const override;\n+    void updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const override;\n \n     void setFinal();\n \ndiff --git a/src/Parsers/ASTSetQuery.cpp b/src/Parsers/ASTSetQuery.cpp\nindex 1b7b76fe2310..e2c60e8369d5 100644\n--- a/src/Parsers/ASTSetQuery.cpp\n+++ b/src/Parsers/ASTSetQuery.cpp\n@@ -9,7 +9,7 @@\n namespace DB\n {\n \n-void ASTSetQuery::updateTreeHashImpl(SipHash & hash_state) const\n+void ASTSetQuery::updateTreeHashImpl(SipHash & hash_state, bool /*ignore_aliases*/) const\n {\n     for (const auto & change : changes)\n     {\ndiff --git a/src/Parsers/ASTSetQuery.h b/src/Parsers/ASTSetQuery.h\nindex beed052c79a9..944f08dcbaa0 100644\n--- a/src/Parsers/ASTSetQuery.h\n+++ b/src/Parsers/ASTSetQuery.h\n@@ -34,7 +34,7 @@ class ASTSetQuery : public IAST\n \n     void formatImpl(const FormatSettings & format, FormatState &, FormatStateStacked) const override;\n \n-    void updateTreeHashImpl(SipHash & hash_state) const override;\n+    void updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const override;\n \n     QueryKind getQueryKind() const override { return QueryKind::Set; }\n \ndiff --git a/src/Parsers/ASTSubquery.cpp b/src/Parsers/ASTSubquery.cpp\nindex 92adad666ed5..75dfccd6e139 100644\n--- a/src/Parsers/ASTSubquery.cpp\n+++ b/src/Parsers/ASTSubquery.cpp\n@@ -51,11 +51,11 @@ void ASTSubquery::formatImplWithoutAlias(const FormatSettings & settings, Format\n     settings.ostr << nl_or_nothing << indent_str << \")\";\n }\n \n-void ASTSubquery::updateTreeHashImpl(SipHash & hash_state) const\n+void ASTSubquery::updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const\n {\n     if (!cte_name.empty())\n         hash_state.update(cte_name);\n-    IAST::updateTreeHashImpl(hash_state);\n+    ASTWithAlias::updateTreeHashImpl(hash_state, ignore_aliases);\n }\n \n String ASTSubquery::getAliasOrColumnName() const\ndiff --git a/src/Parsers/ASTSubquery.h b/src/Parsers/ASTSubquery.h\nindex e4de766621a0..ef277a631260 100644\n--- a/src/Parsers/ASTSubquery.h\n+++ b/src/Parsers/ASTSubquery.h\n@@ -14,7 +14,7 @@ class ASTSubquery : public ASTWithAlias\n public:\n     // Stored the name when the subquery is defined in WITH clause. For example:\n     // WITH (SELECT 1) AS a SELECT * FROM a AS b; cte_name will be `a`.\n-    std::string cte_name;\n+    String cte_name;\n \n     /** Get the text that identifies this element. */\n     String getID(char) const override { return \"Subquery\"; }\n@@ -26,7 +26,7 @@ class ASTSubquery : public ASTWithAlias\n         return clone;\n     }\n \n-    void updateTreeHashImpl(SipHash & hash_state) const override;\n+    void updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const override;\n     String getAliasOrColumnName() const override;\n     String tryGetAlias() const override;\n \ndiff --git a/src/Parsers/ASTTablesInSelectQuery.cpp b/src/Parsers/ASTTablesInSelectQuery.cpp\nindex 75c0ef26c07e..e4e8c00879ee 100644\n--- a/src/Parsers/ASTTablesInSelectQuery.cpp\n+++ b/src/Parsers/ASTTablesInSelectQuery.cpp\n@@ -21,10 +21,10 @@ do \\\n while (false)\n \n \n-void ASTTableExpression::updateTreeHashImpl(SipHash & hash_state) const\n+void ASTTableExpression::updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const\n {\n     hash_state.update(final);\n-    IAST::updateTreeHashImpl(hash_state);\n+    IAST::updateTreeHashImpl(hash_state, ignore_aliases);\n }\n \n \n@@ -42,12 +42,12 @@ ASTPtr ASTTableExpression::clone() const\n     return res;\n }\n \n-void ASTTableJoin::updateTreeHashImpl(SipHash & hash_state) const\n+void ASTTableJoin::updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const\n {\n     hash_state.update(locality);\n     hash_state.update(strictness);\n     hash_state.update(kind);\n-    IAST::updateTreeHashImpl(hash_state);\n+    IAST::updateTreeHashImpl(hash_state, ignore_aliases);\n }\n \n ASTPtr ASTTableJoin::clone() const\n@@ -61,10 +61,10 @@ ASTPtr ASTTableJoin::clone() const\n     return res;\n }\n \n-void ASTArrayJoin::updateTreeHashImpl(SipHash & hash_state) const\n+void ASTArrayJoin::updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const\n {\n     hash_state.update(kind);\n-    IAST::updateTreeHashImpl(hash_state);\n+    IAST::updateTreeHashImpl(hash_state, ignore_aliases);\n }\n \n ASTPtr ASTArrayJoin::clone() const\ndiff --git a/src/Parsers/ASTTablesInSelectQuery.h b/src/Parsers/ASTTablesInSelectQuery.h\nindex a004cbf9847a..67370eaee146 100644\n--- a/src/Parsers/ASTTablesInSelectQuery.h\n+++ b/src/Parsers/ASTTablesInSelectQuery.h\n@@ -59,7 +59,7 @@ struct ASTTableExpression : public IAST\n     String getID(char) const override { return \"TableExpression\"; }\n     ASTPtr clone() const override;\n     void formatImpl(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const override;\n-    void updateTreeHashImpl(SipHash & hash_state) const override;\n+    void updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const override;\n };\n \n \n@@ -81,7 +81,7 @@ struct ASTTableJoin : public IAST\n     void formatImplBeforeTable(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const;\n     void formatImplAfterTable(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const;\n     void formatImpl(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const override;\n-    void updateTreeHashImpl(SipHash & hash_state) const override;\n+    void updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const override;\n };\n \n /// Specification of ARRAY JOIN.\n@@ -102,7 +102,7 @@ struct ASTArrayJoin : public IAST\n     String getID(char) const override { return \"ArrayJoin\"; }\n     ASTPtr clone() const override;\n     void formatImpl(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const override;\n-    void updateTreeHashImpl(SipHash & hash_state) const override;\n+    void updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const override;\n };\n \n \ndiff --git a/src/Parsers/ASTTransactionControl.cpp b/src/Parsers/ASTTransactionControl.cpp\nindex 3106d432c909..6964441622d5 100644\n--- a/src/Parsers/ASTTransactionControl.cpp\n+++ b/src/Parsers/ASTTransactionControl.cpp\n@@ -39,7 +39,7 @@ IAST::QueryKind ASTTransactionControl::getQueryKind() const\n     }\n }\n \n-void ASTTransactionControl::updateTreeHashImpl(SipHash & hash_state) const\n+void ASTTransactionControl::updateTreeHashImpl(SipHash & hash_state, bool /*ignore_aliases*/) const\n {\n     hash_state.update(action);\n }\ndiff --git a/src/Parsers/ASTTransactionControl.h b/src/Parsers/ASTTransactionControl.h\nindex fb0058144dd9..84a1dcf09702 100644\n--- a/src/Parsers/ASTTransactionControl.h\n+++ b/src/Parsers/ASTTransactionControl.h\n@@ -20,13 +20,13 @@ class ASTTransactionControl : public IAST\n \n     UInt64 snapshot;    /// For SET TRANSACTION SNAPSHOT ...\n \n-    ASTTransactionControl(QueryType action_) : action(action_) {}\n+    explicit ASTTransactionControl(QueryType action_) : action(action_) {}\n \n     String getID(char /*delimiter*/) const override { return \"ASTTransactionControl\"; }\n     ASTPtr clone() const override { return std::make_shared<ASTTransactionControl>(*this); }\n \n     void formatImpl(const FormatSettings & format, FormatState & /*state*/, FormatStateStacked /*frame*/) const override;\n-    void updateTreeHashImpl(SipHash & hash_state) const override;\n+    void updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const override;\n \n     QueryKind getQueryKind() const override;\n };\ndiff --git a/src/Parsers/ASTWithAlias.cpp b/src/Parsers/ASTWithAlias.cpp\nindex 1b5397654fd8..5d1122ae4d80 100644\n--- a/src/Parsers/ASTWithAlias.cpp\n+++ b/src/Parsers/ASTWithAlias.cpp\n@@ -1,3 +1,4 @@\n+#include <Common/SipHash.h>\n #include <Parsers/ASTWithAlias.h>\n #include <IO/WriteHelpers.h>\n #include <IO/Operators.h>\n@@ -42,6 +43,13 @@ void ASTWithAlias::formatImpl(const FormatSettings & settings, FormatState & sta\n     }\n }\n \n+void ASTWithAlias::updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const\n+{\n+    if (!alias.empty() && !ignore_aliases)\n+        hash_state.update(alias);\n+    IAST::updateTreeHashImpl(hash_state, ignore_aliases);\n+}\n+\n void ASTWithAlias::appendColumnName(WriteBuffer & ostr) const\n {\n     if (prefer_alias_to_column_name && !alias.empty())\ndiff --git a/src/Parsers/ASTWithAlias.h b/src/Parsers/ASTWithAlias.h\nindex ea4419402b0b..452e2038e55e 100644\n--- a/src/Parsers/ASTWithAlias.h\n+++ b/src/Parsers/ASTWithAlias.h\n@@ -27,7 +27,9 @@ class ASTWithAlias : public IAST\n     void setAlias(const String & to) override { alias = to; }\n \n     /// Calls formatImplWithoutAlias, and also outputs an alias. If necessary, encloses the entire expression in brackets.\n-    void formatImpl(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const override final;\n+    void formatImpl(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const final;\n+\n+    void updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const override;\n \n     virtual void formatImplWithoutAlias(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const = 0;\n \ndiff --git a/src/Parsers/IAST.cpp b/src/Parsers/IAST.cpp\nindex a494a528cd2f..37d7f458d613 100644\n--- a/src/Parsers/IAST.cpp\n+++ b/src/Parsers/IAST.cpp\n@@ -114,24 +114,24 @@ size_t IAST::checkSize(size_t max_size) const\n }\n \n \n-IAST::Hash IAST::getTreeHash() const\n+IAST::Hash IAST::getTreeHash(bool ignore_aliases) const\n {\n     SipHash hash_state;\n-    updateTreeHash(hash_state);\n+    updateTreeHash(hash_state, ignore_aliases);\n     return getSipHash128AsPair(hash_state);\n }\n \n \n-void IAST::updateTreeHash(SipHash & hash_state) const\n+void IAST::updateTreeHash(SipHash & hash_state, bool ignore_aliases) const\n {\n-    updateTreeHashImpl(hash_state);\n+    updateTreeHashImpl(hash_state, ignore_aliases);\n     hash_state.update(children.size());\n     for (const auto & child : children)\n-        child->updateTreeHash(hash_state);\n+        child->updateTreeHash(hash_state, ignore_aliases);\n }\n \n \n-void IAST::updateTreeHashImpl(SipHash & hash_state) const\n+void IAST::updateTreeHashImpl(SipHash & hash_state, bool /*ignore_aliases*/) const\n {\n     auto id = getID();\n     hash_state.update(id.data(), id.size());\ndiff --git a/src/Parsers/IAST.h b/src/Parsers/IAST.h\nindex 812fd082476d..9afd59caa05e 100644\n--- a/src/Parsers/IAST.h\n+++ b/src/Parsers/IAST.h\n@@ -78,11 +78,13 @@ class IAST : public std::enable_shared_from_this<IAST>, public TypePromotion<IAS\n     virtual ASTPtr clone() const = 0;\n \n     /** Get hash code, identifying this element and its subtree.\n+     *  Hashing by default ignores aliases (e.g. identifier aliases, function aliases, literal aliases) which is\n+     *  useful for common subexpression elimination. Set 'ignore_aliases = false' if you don't want that behavior.\n       */\n     using Hash = CityHash_v1_0_2::uint128;\n-    Hash getTreeHash() const;\n-    void updateTreeHash(SipHash & hash_state) const;\n-    virtual void updateTreeHashImpl(SipHash & hash_state) const;\n+    Hash getTreeHash(bool ignore_aliases = true) const;\n+    void updateTreeHash(SipHash & hash_state, bool ignore_aliases = true) const;\n+    virtual void updateTreeHashImpl(SipHash & hash_state, bool ignore_aliases) const;\n \n     void dumpTree(WriteBuffer & ostr, size_t indent = 0) const;\n     std::string dumpTree(size_t indent = 0) const;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02494_query_cache_bugs.reference b/tests/queries/0_stateless/02494_query_cache_bugs.reference\nnew file mode 100644\nindex 000000000000..448e1366ea7a\n--- /dev/null\n+++ b/tests/queries/0_stateless/02494_query_cache_bugs.reference\n@@ -0,0 +1,24 @@\n+-- Bug 56258: Check literals (ASTLiteral)\n+Row 1:\n+\u2500\u2500\u2500\u2500\u2500\u2500\n+10: 10\n+Row 1:\n+\u2500\u2500\u2500\u2500\u2500\u2500\n+x: 10\n+2\n+-- Bug 56258: Check functions (ASTFunction)\n+Row 1:\n+\u2500\u2500\u2500\u2500\u2500\u2500\n+toUInt64(42): 42\n+Row 1:\n+\u2500\u2500\u2500\u2500\u2500\u2500\n+x: 42\n+2\n+-- Bug 56258: Check identifiers (ASTIdentifier)\n+Row 1:\n+\u2500\u2500\u2500\u2500\u2500\u2500\n+c: 1\n+Row 1:\n+\u2500\u2500\u2500\u2500\u2500\u2500\n+x: 1\n+2\ndiff --git a/tests/queries/0_stateless/02494_query_cache_bugs.sql b/tests/queries/0_stateless/02494_query_cache_bugs.sql\nnew file mode 100644\nindex 000000000000..74496e0f77a1\n--- /dev/null\n+++ b/tests/queries/0_stateless/02494_query_cache_bugs.sql\n@@ -0,0 +1,39 @@\n+-- Tags: no-parallel\n+-- Tag no-parallel: Messes with internal cache\n+\n+-- Test for Bug 56258\n+\n+SYSTEM DROP QUERY CACHE;\n+\n+SELECT '-- Bug 56258: Check literals (ASTLiteral)';\n+\n+SELECT 10 FORMAT Vertical SETTINGS use_query_cache = 1;\n+SELECT 10 AS x FORMAT Vertical SETTINGS use_query_cache = 1;\n+\n+SELECT count(*) FROM system.query_cache;\n+\n+SYSTEM DROP QUERY CACHE;\n+\n+SELECT '-- Bug 56258: Check functions (ASTFunction)';\n+\n+SELECT toUInt64(42) FORMAT Vertical SETTINGS use_query_cache = 1;\n+SELECT toUInt64(42) AS x FORMAT Vertical SETTINGS use_query_cache = 1;\n+\n+SELECT count(*) FROM system.query_cache;\n+\n+SYSTEM DROP QUERY CACHE;\n+\n+SELECT '-- Bug 56258: Check identifiers (ASTIdentifier)';\n+\n+DROP TABLE IF EXISTS tab;\n+\n+CREATE TABLE tab(c UInt64) ENGINE = Memory AS SELECT 1;\n+\n+SELECT c FROM tab FORMAT Vertical SETTINGS use_query_cache = 1;\n+SELECT c AS x FROM tab FORMAT Vertical SETTINGS use_query_cache = 1;\n+\n+SELECT count(*) FROM system.query_cache;\n+\n+DROP TABLE tab;\n+\n+SYSTEM DROP QUERY CACHE;\n",
  "problem_statement": "Return same datas by query cache after change some alias\nClickHouse version: 23.8.3\r\n\r\n```\r\nCREATE OR REPLACE TABLE test\r\n(\r\n    `id` UInt64\r\n)\r\nENGINE = MergeTree\r\nORDER BY id;\r\n\r\nINSERT INTO test VALUES (1),(2),(3);\r\n```\r\n\r\nIf I set `use_query_cache=1`, `SELECT id FROM test` and `SELECT id AS id1 FROM test` return the same datas, column name is `id`, which `id1` should the correct answer for the second query.\r\n\r\nIs it by design?\r\n\n",
  "hints_text": ">Is it by design?\r\n\r\nIt's an issue.\r\n\r\nhttps://fiddle.clickhouse.com/b97c64db-4769-43b4-a9ea-9ca43c1cbc9c\nMini repro: https://fiddle.clickhouse.com/fe5c7c45-0293-4bde-981c-71008c8b173b\r\n\r\nThe query result cache indexes the stored query results by the hashes of the corresponding query ASTs. A query is answered directly from the cache only if the hash of its AST matches a hash of another querie's AST stored in the query cache.\r\n\r\nThe problem is (as far as I see), that hashing of ASTs (`IAST::getTreeHash()`) ignores aliases, i.e. is based on the underlying column name. Queries `SELECT id FROM test` and `SELECT id AS id_x FROM test` produce the same hash. They also produce the same result, if one considers field names not part of the result.\r\n\r\nI could change the hashing to hash \"physically\" instead of \"logically\". At this point it seems like a trade-off: logical hashing makes the query cache cover (a few) more cases at the cost of surprising result field names (we could document that). I could actually not come up with a counter example, where the current behavior causes truly wrong results.\nHere you go, the cache returning wrong results:\r\n\r\n```\r\nproduction-01 :) Select 10 as dummy, dummy from system.one limit 1;\r\n\r\nSELECT\r\n    10 AS dummy,\r\n    dummy\r\nFROM system.one\r\nLIMIT 1\r\n\r\nQuery id: 832da2f7-4219-4dfd-a882-35cc3f6a74a7\r\n\r\n\u250c\u2500dummy\u2500\u252c\u2500dummy\u2500\u2510\r\n\u2502    10 \u2502    10 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.001 sec. \r\n\r\nproduction-01 :) Select 10 as other, dummy from system.one limit 1;\r\n\r\nSELECT\r\n    10 AS other,\r\n    dummy\r\nFROM system.one\r\nLIMIT 1\r\n\r\nQuery id: 8591aa82-fc9d-4fb8-8a60-50bd6d457160\r\n\r\n\u250c\u2500dummy\u2500\u252c\u2500dummy\u2500\u2510\r\n\u2502    10 \u2502    10 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.001 sec. \r\n```\r\n\r\nWithout cache:\r\n```\r\nproduction-01 :) Select 10 as other, dummy from system.one limit 1 settings use_query_cache = 0\r\n\r\nSELECT\r\n    10 AS other,\r\n    dummy\r\nFROM system.one\r\nLIMIT 1\r\nSETTINGS use_query_cache = 0\r\n\r\nQuery id: 58b4f6fd-9004-462d-b0ad-a0b51efac1a2\r\n\r\n\u250c\u2500other\u2500\u252c\u2500dummy\u2500\u2510\r\n\u2502    10 \u2502     0 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.001 sec.\r\n```\nNote that this issue is also present in CTE's caching -> https://github.com/ClickHouse/ClickHouse/issues/33825",
  "created_at": "2023-11-09T21:03:56Z",
  "modified_files": [
    "src/Interpreters/Cache/QueryCache.cpp",
    "src/Parsers/ASTColumnsMatcher.cpp",
    "src/Parsers/ASTColumnsMatcher.h",
    "src/Parsers/ASTColumnsTransformers.cpp",
    "src/Parsers/ASTColumnsTransformers.h",
    "src/Parsers/ASTFunction.cpp",
    "src/Parsers/ASTFunction.h",
    "src/Parsers/ASTFunctionWithKeyValueArguments.cpp",
    "src/Parsers/ASTFunctionWithKeyValueArguments.h",
    "src/Parsers/ASTIdentifier.cpp",
    "src/Parsers/ASTIdentifier.h",
    "src/Parsers/ASTInsertQuery.cpp",
    "src/Parsers/ASTInsertQuery.h",
    "src/Parsers/ASTLiteral.cpp",
    "src/Parsers/ASTLiteral.h",
    "src/Parsers/ASTOrderByElement.cpp",
    "src/Parsers/ASTOrderByElement.h",
    "src/Parsers/ASTQueryParameter.cpp",
    "src/Parsers/ASTQueryParameter.h",
    "src/Parsers/ASTSelectQuery.cpp",
    "src/Parsers/ASTSelectQuery.h",
    "src/Parsers/ASTSetQuery.cpp",
    "src/Parsers/ASTSetQuery.h",
    "src/Parsers/ASTSubquery.cpp",
    "src/Parsers/ASTSubquery.h",
    "src/Parsers/ASTTablesInSelectQuery.cpp",
    "src/Parsers/ASTTablesInSelectQuery.h",
    "src/Parsers/ASTTransactionControl.cpp",
    "src/Parsers/ASTTransactionControl.h",
    "src/Parsers/ASTWithAlias.cpp",
    "src/Parsers/ASTWithAlias.h",
    "src/Parsers/IAST.cpp",
    "src/Parsers/IAST.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02494_query_cache_bugs.reference",
    "b/tests/queries/0_stateless/02494_query_cache_bugs.sql"
  ]
}