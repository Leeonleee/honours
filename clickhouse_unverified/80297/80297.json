{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 80297,
  "instance_id": "ClickHouse__ClickHouse-80297",
  "issue_numbers": [
    "80275"
  ],
  "base_commit": "7de87dad2a71cd9610e42d38580c5881bbd6e1d0",
  "patch": "diff --git a/src/Parsers/ASTDropQuery.cpp b/src/Parsers/ASTDropQuery.cpp\nindex 99e239cd1d33..385980c43349 100644\n--- a/src/Parsers/ASTDropQuery.cpp\n+++ b/src/Parsers/ASTDropQuery.cpp\n@@ -1,6 +1,7 @@\n #include <Parsers/ASTDropQuery.h>\n #include <Parsers/ASTIdentifier.h>\n #include <Parsers/ASTExpressionList.h>\n+#include <Parsers/ASTLiteral.h>\n #include <Common/quoteString.h>\n #include <IO/Operators.h>\n \n@@ -109,11 +110,16 @@ void ASTDropQuery::formatQueryImpl(WriteBuffer & ostr, const FormatSettings & se\n     }\n \n     if (!like.empty())\n+    {\n         ostr << (settings.hilite ? hilite_keyword : \"\")\n-                      << (not_like ? \" NOT\" : \"\")\n-                      << (case_insensitive_like ? \" ILIKE \" : \" LIKE\")\n-                      << (settings.hilite ? hilite_none : \"\")\n-                      << DB::quote << like;\n+            << (not_like ? \" NOT\" : \"\")\n+            << (case_insensitive_like ? \" ILIKE \" : \" LIKE\")\n+            << (settings.hilite ? hilite_none : \"\");\n+        if (settings.hilite)\n+            highlightStringWithMetacharacters(quoteString(like), ostr, \"%_\");\n+        else\n+            ostr << quoteString(like);\n+    }\n \n     formatOnCluster(ostr, settings);\n \ndiff --git a/src/Parsers/ASTFunction.cpp b/src/Parsers/ASTFunction.cpp\nindex cb2a0eec9ecc..c5617987bfef 100644\n--- a/src/Parsers/ASTFunction.cpp\n+++ b/src/Parsers/ASTFunction.cpp\n@@ -204,54 +204,6 @@ ASTPtr ASTFunction::toLiteral() const\n }\n \n \n-/** A special hack. If it's [I]LIKE or NOT [I]LIKE expression and the right hand side is a string literal,\n-  *  we will highlight unescaped metacharacters % and _ in string literal for convenience.\n-  * Motivation: most people are unaware that _ is a metacharacter and forgot to properly escape it with two backslashes.\n-  * With highlighting we make it clearly obvious.\n-  *\n-  * Another case is regexp match. Suppose the user types match(URL, 'www.clickhouse.com'). It often means that the user is unaware that . is a metacharacter.\n-  */\n-static bool highlightStringLiteralWithMetacharacters(const ASTPtr & node, WriteBuffer & ostr, const char * metacharacters)\n-{\n-    if (const auto * literal = node->as<ASTLiteral>())\n-    {\n-        if (literal->value.getType() == Field::Types::String)\n-        {\n-            auto string = applyVisitor(FieldVisitorToString(), literal->value);\n-\n-            unsigned escaping = 0;\n-            for (auto c : string)\n-            {\n-                if (c == '\\\\')\n-                {\n-                    ostr << c;\n-                    if (escaping == 2)\n-                        escaping = 0;\n-                    ++escaping;\n-                }\n-                else if (nullptr != strchr(metacharacters, c))\n-                {\n-                    if (escaping == 2)      /// Properly escaped metacharacter\n-                        ostr << c;\n-                    else                    /// Unescaped metacharacter\n-                        ostr << \"\\033[1;35m\" << c << \"\\033[0m\";\n-                    escaping = 0;\n-                }\n-                else\n-                {\n-                    ostr << c;\n-                    escaping = 0;\n-                }\n-            }\n-\n-            return true;\n-        }\n-    }\n-\n-    return false;\n-}\n-\n-\n ASTSelectWithUnionQuery * ASTFunction::tryGetQueryArgument() const\n {\n     if (arguments && arguments->children.size() == 1)\ndiff --git a/src/Parsers/ASTLiteral.cpp b/src/Parsers/ASTLiteral.cpp\nindex c457895ba575..8b4b4c631cf9 100644\n--- a/src/Parsers/ASTLiteral.cpp\n+++ b/src/Parsers/ASTLiteral.cpp\n@@ -2,6 +2,7 @@\n #include <Common/SipHash.h>\n #include <Common/FieldVisitorToString.h>\n #include <Common/FieldVisitorHash.h>\n+#include <Common/quoteString.h>\n #include <DataTypes/IDataType.h>\n #include <Parsers/ASTLiteral.h>\n #include <IO/WriteHelpers.h>\n@@ -162,4 +163,48 @@ void ASTLiteral::formatImplWithoutAlias(WriteBuffer & ostr, const FormatSettings\n         ostr << applyVisitor(FieldVisitorToStringPostgreSQL(), value);\n }\n \n+\n+bool highlightStringLiteralWithMetacharacters(const ASTPtr & node, WriteBuffer & ostr, const char * metacharacters)\n+{\n+    if (const auto * literal = node->as<ASTLiteral>())\n+    {\n+        if (literal->value.getType() == Field::Types::String)\n+        {\n+            auto string = applyVisitor(FieldVisitorToString(), literal->value);\n+            highlightStringWithMetacharacters(string, ostr, metacharacters);\n+            return true;\n+        }\n+    }\n+\n+    return false;\n+}\n+\n+void highlightStringWithMetacharacters(const String & string, WriteBuffer & ostr, const char * metacharacters)\n+{\n+    unsigned escaping = 0;\n+    for (auto c : string)\n+    {\n+        if (c == '\\\\')\n+        {\n+            ostr << c;\n+            if (escaping == 2)\n+                escaping = 0;\n+            ++escaping;\n+        }\n+        else if (nullptr != strchr(metacharacters, c))\n+        {\n+            if (escaping == 2)      /// Properly escaped metacharacter\n+                ostr << c;\n+            else                    /// Unescaped metacharacter\n+                ostr << \"\\033[1;35m\" << c << \"\\033[0m\";\n+            escaping = 0;\n+        }\n+        else\n+        {\n+            ostr << c;\n+            escaping = 0;\n+        }\n+    }\n+}\n+\n }\ndiff --git a/src/Parsers/ASTLiteral.h b/src/Parsers/ASTLiteral.h\nindex f36a428352a6..d9c72eec0a21 100644\n--- a/src/Parsers/ASTLiteral.h\n+++ b/src/Parsers/ASTLiteral.h\n@@ -63,4 +63,15 @@ class ASTLiteral : public ASTWithAlias\n     void appendColumnNameImplLegacy(WriteBuffer & ostr) const;\n };\n \n+\n+/** A special UX improvement. If it's [I]LIKE or NOT [I]LIKE expression and the right hand side is a string literal,\n+  *  we will highlight unescaped metacharacters % and _ in string literal for convenience.\n+  * Motivation: most people are unaware that _ is a metacharacter and forgot to properly escape it with two backslashes.\n+  * With highlighting we make it clearly obvious.\n+  *\n+  * Another case is regexp match. Suppose the user types match(URL, 'www.clickhouse.com'). It often means that the user is unaware that . is a metacharacter.\n+  */\n+bool highlightStringLiteralWithMetacharacters(const ASTPtr & node, WriteBuffer & ostr, const char * metacharacters);\n+void highlightStringWithMetacharacters(const String & string, WriteBuffer & ostr, const char * metacharacters);\n+\n }\ndiff --git a/src/Parsers/ASTShowColumnsQuery.cpp b/src/Parsers/ASTShowColumnsQuery.cpp\nindex 7c7fd6bbb38c..3dd4d6bcff18 100644\n--- a/src/Parsers/ASTShowColumnsQuery.cpp\n+++ b/src/Parsers/ASTShowColumnsQuery.cpp\n@@ -1,4 +1,5 @@\n #include <Parsers/ASTShowColumnsQuery.h>\n+#include <Parsers/ASTLiteral.h>\n \n #include <iomanip>\n #include <Common/quoteString.h>\n@@ -30,11 +31,17 @@ void ASTShowColumnsQuery::formatQueryImpl(WriteBuffer & ostr, const FormatSettin\n \n \n     if (!like.empty())\n-        ostr << (settings.hilite ? hilite_keyword : \"\")\n-                      << (not_like ? \" NOT\" : \"\")\n-                      << (case_insensitive_like ? \" ILIKE \" : \" LIKE\")\n-                      << (settings.hilite ? hilite_none : \"\")\n-                      << DB::quote << like;\n+    {\n+        ostr\n+            << (settings.hilite ? hilite_keyword : \"\")\n+            << (not_like ? \" NOT\" : \"\")\n+            << (case_insensitive_like ? \" ILIKE \" : \" LIKE\")\n+            << (settings.hilite ? hilite_none : \"\");\n+        if (settings.hilite)\n+            highlightStringWithMetacharacters(quoteString(like), ostr, \"%_\");\n+        else\n+            ostr << quoteString(like);\n+    }\n \n     if (where_expression)\n     {\ndiff --git a/src/Parsers/ASTShowFunctionsQuery.cpp b/src/Parsers/ASTShowFunctionsQuery.cpp\nindex b9e07120c0d3..f1215c14333e 100644\n--- a/src/Parsers/ASTShowFunctionsQuery.cpp\n+++ b/src/Parsers/ASTShowFunctionsQuery.cpp\n@@ -1,4 +1,6 @@\n #include <Parsers/ASTShowFunctionsQuery.h>\n+#include <Parsers/ASTLiteral.h>\n+#include <Common/quoteString.h>\n \n \n namespace DB\n@@ -17,8 +19,14 @@ void ASTShowFunctionsQuery::formatQueryImpl(WriteBuffer & ostr, const FormatSett\n     ostr << (settings.hilite ? hilite_keyword : \"\") << \"SHOW FUNCTIONS\" << (settings.hilite ? hilite_none : \"\");\n \n     if (!like.empty())\n+    {\n         ostr << (settings.hilite ? hilite_keyword : \"\") << (case_insensitive_like ? \" ILIKE \" : \" LIKE \")\n-                      << (settings.hilite ? hilite_none : \"\") << DB::quote << like;\n+            << (settings.hilite ? hilite_none : \"\");\n+        if (settings.hilite)\n+            highlightStringWithMetacharacters(quoteString(like), ostr, \"%_\");\n+        else\n+            ostr << quoteString(like);\n+    }\n }\n \n }\ndiff --git a/src/Parsers/ASTShowTablesQuery.cpp b/src/Parsers/ASTShowTablesQuery.cpp\nindex 302930805c5f..95c31cee3a9e 100644\n--- a/src/Parsers/ASTShowTablesQuery.cpp\n+++ b/src/Parsers/ASTShowTablesQuery.cpp\n@@ -1,6 +1,7 @@\n #include <iomanip>\n #include <Parsers/ASTIdentifier_fwd.h>\n #include <Parsers/ASTShowTablesQuery.h>\n+#include <Parsers/ASTLiteral.h>\n #include <Common/quoteString.h>\n #include <IO/Operators.h>\n \n@@ -28,12 +29,18 @@ String ASTShowTablesQuery::getFrom() const\n void ASTShowTablesQuery::formatLike(WriteBuffer & ostr, const FormatSettings & settings) const\n {\n     if (!like.empty())\n+    {\n         ostr\n             << (settings.hilite ? hilite_keyword : \"\")\n             << (not_like ? \" NOT\" : \"\")\n             << (case_insensitive_like ? \" ILIKE \" : \" LIKE \")\n-            << (settings.hilite ? hilite_none : \"\")\n-            << DB::quote << like;\n+            << (settings.hilite ? hilite_none : \"\");\n+\n+        if (settings.hilite)\n+            highlightStringWithMetacharacters(quoteString(like), ostr, \"%_\");\n+        else\n+            ostr << quoteString(like);\n+    }\n }\n \n void ASTShowTablesQuery::formatLimit(WriteBuffer & ostr, const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01287_max_execution_speed.sql b/tests/queries/0_stateless/01287_max_execution_speed.sql\nindex 89c3050a2565..8fdd16e0a590 100644\n--- a/tests/queries/0_stateless/01287_max_execution_speed.sql\n+++ b/tests/queries/0_stateless/01287_max_execution_speed.sql\n@@ -13,6 +13,7 @@ SELECT count() FROM system.numbers; -- { serverError TOO_SLOW }\n SET min_execution_speed_bytes = 0;\n SELECT 'Ok (2)';\n \n+SET max_execution_time = 600;\n SET max_execution_speed = 1000000;\n SET max_block_size = 100;\n \ndiff --git a/tests/queries/0_stateless/03462_highlight_like_in_show_queries.reference b/tests/queries/0_stateless/03462_highlight_like_in_show_queries.reference\nnew file mode 100644\nindex 000000000000..951b62f7e7ab\n--- /dev/null\n+++ b/tests/queries/0_stateless/03462_highlight_like_in_show_queries.reference\n@@ -0,0 +1,1 @@\n+\u001b[1mSHOW TABLES\u001b[0m\u001b[1m ILIKE \u001b[0m'\u001b[1;35m%\u001b[0mte\u001b[1;35m_\u001b[0mst\u001b[1;35m%\u001b[0m'\ndiff --git a/tests/queries/0_stateless/03462_highlight_like_in_show_queries.sh b/tests/queries/0_stateless/03462_highlight_like_in_show_queries.sh\nnew file mode 100755\nindex 000000000000..b68354c528c9\n--- /dev/null\n+++ b/tests/queries/0_stateless/03462_highlight_like_in_show_queries.sh\n@@ -0,0 +1,7 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+${CLICKHOUSE_FORMAT} --hilite <<< \"SHOW TABLES ILIKE '%te_st%'\"\n",
  "problem_statement": "SHOW TABLES LIKE does not highlight metacharacters in clickhouse-client's echo\n### Company or project name\n\nClickHouse\n\n### Describe the unexpected behaviour\n\nCompare these two examples:\n\n<img width=\"304\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/66b4123d-3d8b-4a75-a374-1f8939b32b04\" />\n\n### How to reproduce\n\n^\n\n### Expected behavior\n\n_No response_\n\n### Error message and/or stacktrace\n\n_No response_\n\n### Additional context\n\n_No response_\n",
  "hints_text": "",
  "created_at": "2025-05-16T02:45:45Z"
}