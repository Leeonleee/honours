{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 10237,
  "instance_id": "ClickHouse__ClickHouse-10237",
  "issue_numbers": [
    "8109"
  ],
  "base_commit": "396360cd9001d52012578f432fca9f98e2224f92",
  "patch": "diff --git a/src/Interpreters/MutationsInterpreter.cpp b/src/Interpreters/MutationsInterpreter.cpp\nindex df0267b94507..b1b226b157f2 100644\n--- a/src/Interpreters/MutationsInterpreter.cpp\n+++ b/src/Interpreters/MutationsInterpreter.cpp\n@@ -36,34 +36,46 @@ namespace ErrorCodes\n \n namespace\n {\n-struct FirstNonDeterministicFuncData\n+/// Helps to detect situations, where non-deterministic functions may be used in mutations of Replicated*MergeTree.\n+class FirstNonDeterministicFuncMatcher\n {\n-    using TypeToVisit = ASTFunction;\n-\n-    explicit FirstNonDeterministicFuncData(const Context & context_)\n-        : context{context_}\n-    {}\n+public:\n+    struct Data\n+    {\n+        const Context & context;\n+        std::optional<String> nondeterministic_function_name;\n+    };\n \n-    const Context & context;\n-    std::optional<String> nondeterministic_function_name;\n+public:\n+    static bool needChildVisit(const ASTPtr & /*node*/, const ASTPtr & child)\n+    {\n+        return child != nullptr;\n+    }\n \n-    void visit(ASTFunction & function, ASTPtr &)\n+    static void visit(const ASTPtr & node, Data & data)\n     {\n-        if (nondeterministic_function_name)\n+        if (data.nondeterministic_function_name)\n             return;\n \n-        const auto func = FunctionFactory::instance().get(function.name, context);\n-        if (!func->isDeterministic())\n-            nondeterministic_function_name = func->getName();\n+        if (const auto * function = typeid_cast<const ASTFunction *>(node.get()))\n+        {\n+            /// Property of being deterministic for lambda expression is completely determined\n+            /// by the contents of its definition, so we just proceed to it.\n+            if (function->name != \"lambda\")\n+            {\n+                const auto func = FunctionFactory::instance().get(function->name, data.context);\n+                if (!func->isDeterministic())\n+                    data.nondeterministic_function_name = func->getName();\n+            }\n+        }\n     }\n };\n \n-using FirstNonDeterministicFuncFinder =\n-        InDepthNodeVisitor<OneTypeMatcher<FirstNonDeterministicFuncData>, true>;\n+using FirstNonDeterministicFuncFinder = InDepthNodeVisitor<FirstNonDeterministicFuncMatcher, true>;\n \n std::optional<String> findFirstNonDeterministicFuncName(const MutationCommand & command, const Context & context)\n {\n-    FirstNonDeterministicFuncData finder_data(context);\n+    FirstNonDeterministicFuncMatcher::Data finder_data{context, std::nullopt};\n \n     switch (command.type)\n     {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01017_mutations_with_nondeterministic_functions_zookeeper.reference b/tests/queries/0_stateless/01017_mutations_with_nondeterministic_functions_zookeeper.reference\nindex f799e8ed8f03..6bf25043399c 100644\n--- a/tests/queries/0_stateless/01017_mutations_with_nondeterministic_functions_zookeeper.reference\n+++ b/tests/queries/0_stateless/01017_mutations_with_nondeterministic_functions_zookeeper.reference\n@@ -5,3 +5,5 @@ OK\n OK\n OK\n OK\n+OK\n+OK\ndiff --git a/tests/queries/0_stateless/01017_mutations_with_nondeterministic_functions_zookeeper.sh b/tests/queries/0_stateless/01017_mutations_with_nondeterministic_functions_zookeeper.sh\nindex 9b190855adf6..68cb5e0e7606 100755\n--- a/tests/queries/0_stateless/01017_mutations_with_nondeterministic_functions_zookeeper.sh\n+++ b/tests/queries/0_stateless/01017_mutations_with_nondeterministic_functions_zookeeper.sh\n@@ -43,6 +43,12 @@ ${CLICKHOUSE_CLIENT} --query \"ALTER TABLE $R1 DELETE WHERE ignore(rand())\" 2>&1\n ${CLICKHOUSE_CLIENT} --query \"ALTER TABLE $R1 UPDATE y = y + rand() % 1 WHERE not ignore()\" 2>&1 \\\n | fgrep -q \"must use only deterministic functions\" && echo 'OK' || echo 'FAIL'\n \n+${CLICKHOUSE_CLIENT} --query \"ALTER TABLE $R1 UPDATE y = x + arrayCount(x -> (x + y) % 2, range(y)) WHERE not ignore()\" 2>&1 > /dev/null \\\n+&& echo 'OK' || echo 'FAIL'\n+\n+${CLICKHOUSE_CLIENT} --query \"ALTER TABLE $R1 UPDATE y = x + arrayCount(x -> (rand() + x) % 2, range(y)) WHERE not ignore()\" 2>&1 \\\n+| fgrep -q \"must use only deterministic functions\" && echo 'OK' || echo 'FAIL'\n+\n \n # For regular tables we do not enforce deterministic functions\n ${CLICKHOUSE_CLIENT} --query \"ALTER TABLE $T1 DELETE WHERE rand() = 0\" 2>&1 > /dev/null \\\n",
  "problem_statement": "Usage of lambda functions in an ALTER UPDATE results in an exception.\nHello. We've attempted to provide an `ALTER` to our 19.17.4 ReplicatedMergeTree table and are receiving this error:\r\n```sql\r\nALTER TABLE transactions_local\r\n    UPDATE _tags_flattened = concat('|', arrayStringConcat(arrayMap((k, v) -> concat(k, '=', v), `tags.key`, `tags.value`), '||'), '|') WHERE _tags_flattened = ''\r\n\r\n\r\nReceived exception from server (version 19.17.4):\r\nCode: 46. DB::Exception: Received from localhost:9000. DB::Exception: Unknown function lambda.\r\n```\r\n\r\nThe alter can be applied in local development, and the statement is valid when running a similar SELECT:\r\n```sql\r\nSELECT concat('|', arrayStringConcat(arrayMap((k, v) -> concat(k, '=', v), `tags.key`, `tags.value`), '||'), '|') AS _tags_flattened\r\nFROM transactions_local\r\nLIMIT 1\r\nFORMAT Vertical\r\n\r\nRow 1:\r\n\u2500\u2500\u2500\u2500\u2500\u2500\r\n_tags_flattened: |browser=Chrome 77.0.3865||browser.name=Chrome||client_os.name=Linux||interface_type=spans||level=error||runtime=CPython 3.6.7||runtime.name=CPython||sentry:release=*******||sentry:user=id:1||server_name=local-app||trace=090c77136de045618056ab4dd3ec3140||trace.ctx=090c77136de045618056ab4dd3ec3140-b602b78be05a5dfa||trace.span=b602b78be05a5dfa||transaction=/jsreverse/||url=****|\r\n```\r\n\r\nI'll be happy to provide any additional information. We've been attempting to reproduce this with our local machines but cannot yet.\n",
  "hints_text": "Broken in #7247.\r\n\r\nWhat happens is that we check each function in `alter update` to see whether it is deterministic, and we don't work correctly with special function `lambda`. So if you have any lambda expression in your `alter update`, it breaks.\r\n\r\nIt reproduces for any table with Replicated engine, but doesn't reproduce for non-replicated tables.\r\n\r\nThe stack trace is like this:\r\n```\r\n2020.04.08 15:17:57.846211 [ 6260 ] {3769505e-a572-46c7-b503-b6c8b32dc69e} <Error> executeQuery: Code: 46, e.displayText() = DB::Exception: Unknown function lambda (version 20.4.1.1) (from [::1]:53676) (in query: ALTER TABLE task_4 UPDATE input_values = arrayMap(x -> substringUTF8(x, 1, 1024), input_values), known_solution_values = arrayMap(x -> substringUTF8(x, 1, 1024), known_solution_values) WHERE 1 = 1 ), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. /home/akuzm/ch2/ch/contrib/libcxx/include/exception:129: std::exception::capture() @ 0x150748 in /home/akuzm/ch2/build-clang9/programs/server/libclickhouse-server-libd.so\r\n1. /home/akuzm/ch2/ch/contrib/libcxx/include/exception:109: std::exception::exception() @ 0x1c3f42 in /home/akuzm/ch2/build-clang9/contrib/poco/Foundation/libPocoFoundationd.so.63\r\n2. /home/akuzm/ch2/ch/contrib/poco/Foundation/src/Exception.cpp:28: Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x1da403 in /home/akuzm/ch2/build-clang9/contrib/poco/Foundation/libPocoFoundationd.so.63\r\n3. /home/akuzm/ch2/ch/src/Common/Exception.cpp:29: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x17ab53 in /home/akuzm/ch2/build-clang9/src/libclickhouse_common_iod.so\r\n4. /home/akuzm/ch2/ch/src/Functions/FunctionFactory.cpp:54: DB::FunctionFactory::getImpl(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context const&) const @ 0x1fbc83 in /home/akuzm/ch2/build-clang9/src/libdbmsd.so\r\n5. /home/akuzm/ch2/ch/src/Functions/FunctionFactory.cpp:63: DB::FunctionFactory::get(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context const&) const @ 0x1fbfdf in /home/akuzm/ch2/build-clang9/src/libdbmsd.so\r\n6. /home/akuzm/ch2/ch/src/Interpreters/MutationsInterpreter.cpp:59: DB::(anonymous namespace)::FirstNonDeterministicFuncData::visit(DB::ASTFunction&, std::__1::shared_ptr<DB::IAST>&) @ 0x1576bc6 in /home/akuzm/ch2/build-clang9/src/libclickhouse_interpretersd.so\r\n7. /home/akuzm/ch2/ch/src/Interpreters/InDepthNodeVisitor.h:74: DB::OneTypeMatcher<DB::(anonymous namespace)::FirstNonDeterministicFuncData, true, std::__1::shared_ptr<DB::IAST> >::visit(std::__1::shared_ptr<DB::IAST>&, DB::(anonymous namespace)::FirstNonDeterministicFuncData&) @ 0x15769d1 in /home/akuzm/ch2/build-clang9/src/libclickhouse_interpretersd.so\r\n8. /home/akuzm/ch2/ch/src/Interpreters/InDepthNodeVisitor.h:32: DB::InDepthNodeVisitor<DB::OneTypeMatcher<DB::(anonymous namespace)::FirstNonDeterministicFuncData, true, std::__1::shared_ptr<DB::IAST> >, true, std::__1::shared_ptr<DB::IAST> >::visit(std::__1::shared_ptr<DB::IAST>&) @ 0x157691d in /home/akuzm/ch2/build-clang9/src/libclickhouse_interpretersd.so\r\n9. /home/akuzm/ch2/ch/src/Interpreters/InDepthNodeVisitor.h:45: DB::InDepthNodeVisitor<DB::OneTypeMatcher<DB::(anonymous namespace)::FirstNonDeterministicFuncData, true, std::__1::shared_ptr<DB::IAST> >, true, std::__1::shared_ptr<DB::IAST> >::visitChildren(std::__1::shared_ptr<DB::IAST>&) @ 0x1576a76 in /home/akuzm/ch2/build-clang9/src/libclickhouse_interpretersd.so\r\n10. /home/akuzm/ch2/ch/src/Interpreters/InDepthNodeVisitor.h:35: DB::InDepthNodeVisitor<DB::OneTypeMatcher<DB::(anonymous namespace)::FirstNonDeterministicFuncData, true, std::__1::shared_ptr<DB::IAST> >, true, std::__1::shared_ptr<DB::IAST> >::visit(std::__1::shared_ptr<DB::IAST>&) @ 0x157692f in /home/akuzm/ch2/build-clang9/src/libclickhouse_interpretersd.so\r\n11. /home/akuzm/ch2/ch/src/Interpreters/InDepthNodeVisitor.h:45: DB::InDepthNodeVisitor<DB::OneTypeMatcher<DB::(anonymous namespace)::FirstNonDeterministicFuncData, true, std::__1::shared_ptr<DB::IAST> >, true, std::__1::shared_ptr<DB::IAST> >::visitChildren(std::__1::shared_ptr<DB::IAST>&) @ 0x1576a76 in /home/akuzm/ch2/build-clang9/src/libclickhouse_interpretersd.so\r\n12. /home/akuzm/ch2/ch/src/Interpreters/InDepthNodeVisitor.h:35: DB::InDepthNodeVisitor<DB::OneTypeMatcher<DB::(anonymous namespace)::FirstNonDeterministicFuncData, true, std::__1::shared_ptr<DB::IAST> >, true, std::__1::shared_ptr<DB::IAST> >::visit(std::__1::shared_ptr<DB::IAST>&) @ 0x157692f in /home/akuzm/ch2/build-clang9/src/libclickhouse_interpretersd.so\r\n13. /home/akuzm/ch2/ch/src/Interpreters/InDepthNodeVisitor.h:45: DB::InDepthNodeVisitor<DB::OneTypeMatcher<DB::(anonymous namespace)::FirstNonDeterministicFuncData, true, std::__1::shared_ptr<DB::IAST> >, true, std::__1::shared_ptr<DB::IAST> >::visitChildren(std::__1::shared_ptr<DB::IAST>&) @ 0x1576a76 in /home/akuzm/ch2/build-clang9/src/libclickhouse_interpretersd.so\r\n14. /home/akuzm/ch2/ch/src/Interpreters/InDepthNodeVisitor.h:35: DB::InDepthNodeVisitor<DB::OneTypeMatcher<DB::(anonymous namespace)::FirstNonDeterministicFuncData, true, std::__1::shared_ptr<DB::IAST> >, true, std::__1::shared_ptr<DB::IAST> >::visit(std::__1::shared_ptr<DB::IAST>&) @ 0x157692f in /home/akuzm/ch2/build-clang9/src/libclickhouse_interpretersd.so\r\n15. /home/akuzm/ch2/ch/src/Interpreters/InDepthNodeVisitor.h:45: DB::InDepthNodeVisitor<DB::OneTypeMatcher<DB::(anonymous namespace)::FirstNonDeterministicFuncData, true, std::__1::shared_ptr<DB::IAST> >, true, std::__1::shared_ptr<DB::IAST> >::visitChildren(std::__1::shared_ptr<DB::IAST>&) @ 0x1576a76 in /home/akuzm/ch2/build-clang9/src/libclickhouse_interpretersd.so\r\n16. /home/akuzm/ch2/ch/src/Interpreters/InDepthNodeVisitor.h:35: DB::InDepthNodeVisitor<DB::OneTypeMatcher<DB::(anonymous namespace)::FirstNonDeterministicFuncData, true, std::__1::shared_ptr<DB::IAST> >, true, std::__1::shared_ptr<DB::IAST> >::visit(std::__1::shared_ptr<DB::IAST>&) @ 0x157692f in /home/akuzm/ch2/build-clang9/src/libclickhouse_interpretersd.so\r\n17. /home/akuzm/ch2/ch/src/Interpreters/MutationsInterpreter.cpp:82: DB::(anonymous namespace)::findFirstNonDeterministicFuncName(DB::MutationCommand const&, DB::Context const&) @ 0x1575a77 in /home/akuzm/ch2/build-clang9/src/libclickhouse_interpretersd.so\r\n18. /home/akuzm/ch2/ch/src/Interpreters/MutationsInterpreter.cpp:680: DB::MutationsInterpreter::validate(DB::TableStructureReadLockHolder&) @ 0x1575580 in /home/akuzm/ch2/build-clang9/src/libclickhouse_interpretersd.so\r\n19. /home/akuzm/ch2/ch/src/Interpreters/InterpreterAlterQuery.cpp:86: DB::InterpreterAlterQuery::execute() @ 0x108b2b1 in /home/akuzm/ch2/build-clang9/src/libclickhouse_interpretersd.so\r\n20. /home/akuzm/ch2/ch/src/Interpreters/executeQuery.cpp:333: DB::executeQueryImpl(char const*, char const*, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool, DB::ReadBuffer*, bool) @ 0x17bb553 in /home/akuzm/ch2/build-clang9/src/libclickhouse_interpretersd.so\r\n21. /home/akuzm/ch2/ch/src/Interpreters/executeQuery.cpp:578: DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool, bool) @ 0x17ba593 in /home/akuzm/ch2/build-clang9/src/libclickhouse_interpretersd.so\r\n22. /home/akuzm/ch2/ch/programs/server/TCPHandler.cpp:253: DB::TCPHandler::runImpl() @ 0x1e2847 in /home/akuzm/ch2/build-clang9/programs/server/libclickhouse-server-libd.so\r\n23. /home/akuzm/ch2/ch/programs/server/TCPHandler.cpp:1241: DB::TCPHandler::run() @ 0x1e9322 in /home/akuzm/ch2/build-clang9/programs/server/libclickhouse-server-libd.so\r\n24. /home/akuzm/ch2/ch/contrib/poco/Net/src/TCPServerConnection.cpp:43: Poco::Net::TCPServerConnection::start() @ 0x1b66ac in /home/akuzm/ch2/build-clang9/contrib/poco/Net/libPocoNetd.so.63\r\n25. /home/akuzm/ch2/ch/contrib/poco/Net/src/TCPServerDispatcher.cpp:114: Poco::Net::TCPServerDispatcher::run() @ 0x1b6eba in /home/akuzm/ch2/build-clang9/contrib/poco/Net/libPocoNetd.so.63\r\n26. /home/akuzm/ch2/ch/contrib/poco/Foundation/src/ThreadPool.cpp:199: Poco::PooledThread::run() @ 0x28c433 in /home/akuzm/ch2/build-clang9/contrib/poco/Foundation/libPocoFoundationd.so.63\r\n27. /home/akuzm/ch2/ch/contrib/poco/Foundation/src/Thread.cpp:56: Poco::(anonymous namespace)::RunnableHolder::run() @ 0x28932d in /home/akuzm/ch2/build-clang9/contrib/poco/Foundation/libPocoFoundationd.so.63\r\n28. /home/akuzm/ch2/ch/contrib/poco/Foundation/src/Thread_POSIX.cpp:345: Poco::ThreadImpl::runnableEntry(void*) @ 0x2881aa in /home/akuzm/ch2/build-clang9/contrib/poco/Foundation/libPocoFoundationd.so.63\r\n29. start_thread @ 0x76db in /lib/x86_64-linux-gnu/libpthread-2.27.so\r\n30. /build/glibc-OTsEL5/glibc-2.27/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:97: __GI___clone @ 0x12188f in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.27.so\r\n```",
  "created_at": "2020-04-13T14:44:40Z"
}