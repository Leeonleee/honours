{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 23182,
  "instance_id": "ClickHouse__ClickHouse-23182",
  "issue_numbers": [
    "18722"
  ],
  "base_commit": "37b05f407edf1c16a3d2a709b54755e7a1afb9f6",
  "patch": "diff --git a/src/Access/AccessType.h b/src/Access/AccessType.h\nindex 952cddba5f50..d5185b9931d2 100644\n--- a/src/Access/AccessType.h\n+++ b/src/Access/AccessType.h\n@@ -130,6 +130,7 @@ enum class AccessType\n     M(SYSTEM_RELOAD_CONFIG, \"RELOAD CONFIG\", GLOBAL, SYSTEM_RELOAD) \\\n     M(SYSTEM_RELOAD_SYMBOLS, \"RELOAD SYMBOLS\", GLOBAL, SYSTEM_RELOAD) \\\n     M(SYSTEM_RELOAD_DICTIONARY, \"SYSTEM RELOAD DICTIONARIES, RELOAD DICTIONARY, RELOAD DICTIONARIES\", GLOBAL, SYSTEM_RELOAD) \\\n+    M(SYSTEM_RELOAD_MODEL, \"SYSTEM RELOAD MODELS, RELOAD MODEL, RELOAD MODELS\", GLOBAL, SYSTEM_RELOAD) \\\n     M(SYSTEM_RELOAD_EMBEDDED_DICTIONARIES, \"RELOAD EMBEDDED DICTIONARIES\", GLOBAL, SYSTEM_RELOAD) /* implicitly enabled by the grant SYSTEM_RELOAD_DICTIONARY ON *.* */\\\n     M(SYSTEM_RELOAD, \"\", GROUP, SYSTEM) \\\n     M(SYSTEM_MERGES, \"SYSTEM STOP MERGES, SYSTEM START MERGES, STOP_MERGES, START MERGES\", TABLE, SYSTEM) \\\ndiff --git a/src/Interpreters/ExternalModelsLoader.h b/src/Interpreters/ExternalModelsLoader.h\nindex ebf6de675405..f0a7592f4d36 100644\n--- a/src/Interpreters/ExternalModelsLoader.h\n+++ b/src/Interpreters/ExternalModelsLoader.h\n@@ -20,9 +20,14 @@ class ExternalModelsLoader : public ExternalLoader, WithContext\n     /// Models will be loaded immediately and then will be updated in separate thread, each 'reload_period' seconds.\n     explicit ExternalModelsLoader(ContextPtr context_);\n \n-    ModelPtr getModel(const std::string & name) const\n+    ModelPtr getModel(const std::string & model_name) const\n     {\n-        return std::static_pointer_cast<const IModel>(load(name));\n+        return std::static_pointer_cast<const IModel>(load(model_name));\n+    }\n+\n+    void reloadModel(const std::string & model_name) const\n+    {\n+        loadOrReload(model_name);\n     }\n \n protected:\ndiff --git a/src/Interpreters/InterpreterSystemQuery.cpp b/src/Interpreters/InterpreterSystemQuery.cpp\nindex 02d5296a9d20..117aa0da2dad 100644\n--- a/src/Interpreters/InterpreterSystemQuery.cpp\n+++ b/src/Interpreters/InterpreterSystemQuery.cpp\n@@ -10,6 +10,7 @@\n #include <Interpreters/Context.h>\n #include <Interpreters/DatabaseCatalog.h>\n #include <Interpreters/ExternalDictionariesLoader.h>\n+#include <Interpreters/ExternalModelsLoader.h>\n #include <Interpreters/EmbeddedDictionaries.h>\n #include <Interpreters/ActionLocksManager.h>\n #include <Interpreters/InterpreterDropQuery.h>\n@@ -286,6 +287,7 @@ BlockIO InterpreterSystemQuery::execute()\n             auto & external_dictionaries_loader = system_context->getExternalDictionariesLoader();\n             external_dictionaries_loader.reloadDictionary(query.target_dictionary, getContext());\n \n+\n             ExternalDictionariesLoader::resetAll();\n             break;\n         }\n@@ -299,6 +301,22 @@ BlockIO InterpreterSystemQuery::execute()\n             ExternalDictionariesLoader::resetAll();\n             break;\n         }\n+        case Type::RELOAD_MODEL:\n+        {\n+            getContext()->checkAccess(AccessType::SYSTEM_RELOAD_MODEL);\n+\n+            auto & external_models_loader = system_context->getExternalModelsLoader();\n+            external_models_loader.reloadModel(query.target_model);\n+            break;\n+        }\n+        case Type::RELOAD_MODELS:\n+        {\n+            getContext()->checkAccess(AccessType::SYSTEM_RELOAD_MODEL);\n+\n+            auto & external_models_loader = system_context->getExternalModelsLoader();\n+            external_models_loader.reloadAllTriedToLoad();\n+            break;\n+        }\n         case Type::RELOAD_EMBEDDED_DICTIONARIES:\n             getContext()->checkAccess(AccessType::SYSTEM_RELOAD_EMBEDDED_DICTIONARIES);\n             system_context->getEmbeddedDictionaries().reload();\n@@ -652,6 +670,12 @@ AccessRightsElements InterpreterSystemQuery::getRequiredAccessForDDLOnCluster()\n             required_access.emplace_back(AccessType::SYSTEM_RELOAD_DICTIONARY);\n             break;\n         }\n+        case Type::RELOAD_MODEL: [[fallthrough]];\n+        case Type::RELOAD_MODELS:\n+        {\n+            required_access.emplace_back(AccessType::SYSTEM_RELOAD_MODEL);\n+            break;\n+        }\n         case Type::RELOAD_CONFIG:\n         {\n             required_access.emplace_back(AccessType::SYSTEM_RELOAD_CONFIG);\ndiff --git a/src/Parsers/ASTSystemQuery.cpp b/src/Parsers/ASTSystemQuery.cpp\nindex 71bda0c7709f..c929383a256a 100644\n--- a/src/Parsers/ASTSystemQuery.cpp\n+++ b/src/Parsers/ASTSystemQuery.cpp\n@@ -54,6 +54,10 @@ const char * ASTSystemQuery::typeToString(Type type)\n             return \"RELOAD DICTIONARY\";\n         case Type::RELOAD_DICTIONARIES:\n             return \"RELOAD DICTIONARIES\";\n+        case Type::RELOAD_MODEL:\n+            return \"RELOAD MODEL\";\n+        case Type::RELOAD_MODELS:\n+            return \"RELOAD MODELS\";\n         case Type::RELOAD_EMBEDDED_DICTIONARIES:\n             return \"RELOAD EMBEDDED DICTIONARIES\";\n         case Type::RELOAD_CONFIG:\ndiff --git a/src/Parsers/ASTSystemQuery.h b/src/Parsers/ASTSystemQuery.h\nindex 5bcdcc7875d3..af3244573e47 100644\n--- a/src/Parsers/ASTSystemQuery.h\n+++ b/src/Parsers/ASTSystemQuery.h\n@@ -36,6 +36,8 @@ class ASTSystemQuery : public IAST, public ASTQueryWithOnCluster\n         SYNC_REPLICA,\n         RELOAD_DICTIONARY,\n         RELOAD_DICTIONARIES,\n+        RELOAD_MODEL,\n+        RELOAD_MODELS,\n         RELOAD_EMBEDDED_DICTIONARIES,\n         RELOAD_CONFIG,\n         RELOAD_SYMBOLS,\n@@ -63,6 +65,7 @@ class ASTSystemQuery : public IAST, public ASTQueryWithOnCluster\n     Type type = Type::UNKNOWN;\n \n     String target_dictionary;\n+    String target_model;\n     String database;\n     String table;\n     String replica;\ndiff --git a/src/Parsers/ParserSystemQuery.cpp b/src/Parsers/ParserSystemQuery.cpp\nindex 491037da9a95..2fc168ea1672 100644\n--- a/src/Parsers/ParserSystemQuery.cpp\n+++ b/src/Parsers/ParserSystemQuery.cpp\n@@ -57,7 +57,35 @@ bool ParserSystemQuery::parseImpl(IParser::Pos & pos, ASTPtr & node, Expected &\n                 return false;\n             break;\n         }\n+        case Type::RELOAD_MODEL:\n+        {\n+            String cluster_str;\n+            if (ParserKeyword{\"ON\"}.ignore(pos, expected))\n+            {\n+                if (!ASTQueryWithOnCluster::parse(pos, cluster_str, expected))\n+                    return false;\n+            }\n+            res->cluster = cluster_str;\n+            ASTPtr ast;\n+            if (ParserStringLiteral{}.parse(pos, ast, expected))\n+            {\n+                res->target_model = ast->as<ASTLiteral &>().value.safeGet<String>();\n+            }\n+            else\n+            {\n+                ParserIdentifier model_parser;\n+                ASTPtr model;\n+                String target_model;\n+\n+                if (!model_parser.parse(pos, model, expected))\n+                    return false;\n \n+                if (!tryGetIdentifierNameInto(model, res->target_model))\n+                    return false;\n+            }\n+\n+            break;\n+        }\n         case Type::DROP_REPLICA:\n         {\n             ASTPtr ast;\n",
  "test_patch": "diff --git a/tests/integration/test_catboost_model_reload/__init__.py b/tests/integration/test_catboost_model_reload/__init__.py\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/integration/test_catboost_model_reload/config/catboost_lib.xml b/tests/integration/test_catboost_model_reload/config/catboost_lib.xml\nnew file mode 100644\nindex 000000000000..745be7cebe62\n--- /dev/null\n+++ b/tests/integration/test_catboost_model_reload/config/catboost_lib.xml\n@@ -0,0 +1,3 @@\n+<yandex>\n+    <catboost_dynamic_library_path>/etc/clickhouse-server/model/libcatboostmodel.so</catboost_dynamic_library_path>\n+</yandex>\ndiff --git a/tests/integration/test_catboost_model_reload/config/models_config.xml b/tests/integration/test_catboost_model_reload/config/models_config.xml\nnew file mode 100644\nindex 000000000000..e84ca8b52855\n--- /dev/null\n+++ b/tests/integration/test_catboost_model_reload/config/models_config.xml\n@@ -0,0 +1,3 @@\n+<yandex>\n+    <models_config>/etc/clickhouse-server/model/model_config.xml</models_config>\n+</yandex>\ndiff --git a/tests/integration/test_catboost_model_reload/model/conjunction.cbm b/tests/integration/test_catboost_model_reload/model/conjunction.cbm\nnew file mode 100644\nindex 000000000000..7b75fb5f8866\nBinary files /dev/null and b/tests/integration/test_catboost_model_reload/model/conjunction.cbm differ\ndiff --git a/tests/integration/test_catboost_model_reload/model/disjunction.cbm b/tests/integration/test_catboost_model_reload/model/disjunction.cbm\nnew file mode 100644\nindex 000000000000..8145c24637fc\nBinary files /dev/null and b/tests/integration/test_catboost_model_reload/model/disjunction.cbm differ\ndiff --git a/tests/integration/test_catboost_model_reload/model/libcatboostmodel.so b/tests/integration/test_catboost_model_reload/model/libcatboostmodel.so\nnew file mode 100755\nindex 000000000000..388d9f887b46\nBinary files /dev/null and b/tests/integration/test_catboost_model_reload/model/libcatboostmodel.so differ\ndiff --git a/tests/integration/test_catboost_model_reload/model/model_config.xml b/tests/integration/test_catboost_model_reload/model/model_config.xml\nnew file mode 100644\nindex 000000000000..7cbda165ce90\n--- /dev/null\n+++ b/tests/integration/test_catboost_model_reload/model/model_config.xml\n@@ -0,0 +1,8 @@\n+<models>\n+    <model>\n+        <type>catboost</type>\n+        <name>model</name>\n+        <path>/etc/clickhouse-server/model/model.cbm</path>\n+        <lifetime>0</lifetime>\n+    </model>\n+</models>\ndiff --git a/tests/integration/test_catboost_model_reload/test.py b/tests/integration/test_catboost_model_reload/test.py\nnew file mode 100644\nindex 000000000000..8283e6af9750\n--- /dev/null\n+++ b/tests/integration/test_catboost_model_reload/test.py\n@@ -0,0 +1,74 @@\n+import os\n+import sys\n+import time\n+\n+import pytest\n+\n+sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n+SCRIPT_DIR = os.path.dirname(os.path.realpath(__file__))\n+\n+from helpers.cluster import ClickHouseCluster\n+\n+cluster = ClickHouseCluster(__file__)\n+node = cluster.add_instance('node', stay_alive=True, main_configs=['config/models_config.xml', 'config/catboost_lib.xml'])\n+\n+def copy_file_to_container(local_path, dist_path, container_id):\n+    os.system(\"docker cp {local} {cont_id}:{dist}\".format(local=local_path, cont_id=container_id, dist=dist_path))\n+\n+@pytest.fixture(scope=\"module\")\n+def started_cluster():\n+    try:\n+        cluster.start()\n+\n+        copy_file_to_container(os.path.join(SCRIPT_DIR, 'model/.'), '/etc/clickhouse-server/model', node.docker_id)\n+        node.query(\"CREATE TABLE binary (x UInt64, y UInt64) ENGINE = TinyLog()\")\n+        node.query(\"INSERT INTO binary VALUES (1, 1), (1, 0), (0, 1), (0, 0)\")\n+\n+        node.restart_clickhouse()\n+\n+        yield cluster\n+\n+    finally:\n+        cluster.shutdown()\n+\n+def test_model_reload(started_cluster):\n+    node.exec_in_container([\"bash\", \"-c\", \"rm -f /etc/clickhouse-server/model/model.cbm\"])\n+    node.exec_in_container([\"bash\", \"-c\", \"ln /etc/clickhouse-server/model/conjunction.cbm /etc/clickhouse-server/model/model.cbm\"])\n+    node.query(\"SYSTEM RELOAD MODEL model\")\n+\n+    result = node.query(\"\"\"\n+        WITH modelEvaluate('model', toFloat64(x), toFloat64(y)) as prediction, exp(prediction) / (1 + exp(prediction)) as probability\n+        SELECT if(probability > 0.5, 1, 0) FROM binary;\n+        \"\"\")\n+    assert result == '1\\n0\\n0\\n0\\n'\n+\n+    node.exec_in_container([\"bash\", \"-c\", \"rm /etc/clickhouse-server/model/model.cbm\"])\n+    node.exec_in_container([\"bash\", \"-c\", \"ln /etc/clickhouse-server/model/disjunction.cbm /etc/clickhouse-server/model/model.cbm\"])\n+    node.query(\"SYSTEM RELOAD MODEL model\")\n+\n+    result = node.query(\"\"\"\n+        WITH modelEvaluate('model', toFloat64(x), toFloat64(y)) as prediction, exp(prediction) / (1 + exp(prediction)) as probability\n+        SELECT if(probability > 0.5, 1, 0) FROM binary;\n+        \"\"\")\n+    assert result == '1\\n1\\n1\\n0\\n'\n+\n+def test_models_reload(started_cluster):\n+    node.exec_in_container([\"bash\", \"-c\", \"rm -f /etc/clickhouse-server/model/model.cbm\"])\n+    node.exec_in_container([\"bash\", \"-c\", \"ln /etc/clickhouse-server/model/conjunction.cbm /etc/clickhouse-server/model/model.cbm\"])\n+    node.query(\"SYSTEM RELOAD MODELS\")\n+\n+    result = node.query(\"\"\"\n+        WITH modelEvaluate('model', toFloat64(x), toFloat64(y)) as prediction, exp(prediction) / (1 + exp(prediction)) as probability\n+        SELECT if(probability > 0.5, 1, 0) FROM binary;\n+        \"\"\")\n+    assert result == '1\\n0\\n0\\n0\\n'\n+\n+    node.exec_in_container([\"bash\", \"-c\", \"rm /etc/clickhouse-server/model/model.cbm\"])\n+    node.exec_in_container([\"bash\", \"-c\", \"ln /etc/clickhouse-server/model/disjunction.cbm /etc/clickhouse-server/model/model.cbm\"])\n+    node.query(\"SYSTEM RELOAD MODELS\")\n+\n+    result = node.query(\"\"\"\n+        WITH modelEvaluate('model', toFloat64(x), toFloat64(y)) as prediction, exp(prediction) / (1 + exp(prediction)) as probability\n+        SELECT if(probability > 0.5, 1, 0) FROM binary;\n+        \"\"\")\n+    assert result == '1\\n1\\n1\\n0\\n'\n\\ No newline at end of file\ndiff --git a/tests/queries/0_stateless/01271_show_privileges.reference b/tests/queries/0_stateless/01271_show_privileges.reference\nindex c8b8662dc3ee..892bd95d2d96 100644\n--- a/tests/queries/0_stateless/01271_show_privileges.reference\n+++ b/tests/queries/0_stateless/01271_show_privileges.reference\n@@ -82,6 +82,7 @@ SYSTEM DROP CACHE\t['DROP CACHE']\t\\N\tSYSTEM\n SYSTEM RELOAD CONFIG\t['RELOAD CONFIG']\tGLOBAL\tSYSTEM RELOAD\n SYSTEM RELOAD SYMBOLS\t['RELOAD SYMBOLS']\tGLOBAL\tSYSTEM RELOAD\n SYSTEM RELOAD DICTIONARY\t['SYSTEM RELOAD DICTIONARIES','RELOAD DICTIONARY','RELOAD DICTIONARIES']\tGLOBAL\tSYSTEM RELOAD\n+SYSTEM RELOAD MODEL\t['SYSTEM RELOAD MODELS','RELOAD MODEL','RELOAD MODELS']\tGLOBAL\tSYSTEM RELOAD\n SYSTEM RELOAD EMBEDDED DICTIONARIES\t['RELOAD EMBEDDED DICTIONARIES']\tGLOBAL\tSYSTEM RELOAD\n SYSTEM RELOAD\t[]\t\\N\tSYSTEM\n SYSTEM MERGES\t['SYSTEM STOP MERGES','SYSTEM START MERGES','STOP_MERGES','START MERGES']\tTABLE\tSYSTEM\n",
  "problem_statement": "Catboost model reload\nProvide a way to reload / add / remove catboost models w/o server restart.\n",
  "hints_text": "It would be great if in catboost configuration file we can specify for example s3 bucket, and clickhouse load models from it periodically. \n@kitaisreal those catboost models are almost the same as dictionaries :) So maybe you can pick it?\r\nSimilar to SYSTEM RELOAD DICTIONARIES",
  "created_at": "2021-04-16T09:58:20Z"
}