diff --git a/tests/queries/0_stateless/01280_ssd_complex_key_dictionary.sql b/tests/queries/0_stateless/01280_ssd_complex_key_dictionary.sql
index 8c304818602a..50b34c4b18fe 100644
--- a/tests/queries/0_stateless/01280_ssd_complex_key_dictionary.sql
+++ b/tests/queries/0_stateless/01280_ssd_complex_key_dictionary.sql
@@ -42,8 +42,7 @@ LAYOUT(COMPLEX_KEY_SSD_CACHE(FILE_SIZE 8192 PATH '/var/lib/clickhouse/clickhouse
 SELECT 'TEST_SMALL';
 SELECT 'VALUE FROM RAM BUFFER';
 
--- NUMBER_OF_ARGUMENTS_DOESNT_MATCH
-SELECT dictHas('01280_db.ssd_dict', 'a', tuple('1')); -- { serverError 42 }
+SELECT dictHas('01280_db.ssd_dict', 'a', tuple('1')); -- { serverError 43 }
 
 SELECT dictGetUInt64('01280_db.ssd_dict', 'a', tuple('1', toInt32(3)));
 SELECT dictGetInt32('01280_db.ssd_dict', 'b', tuple('1', toInt32(3)));
diff --git a/tests/queries/0_stateless/01676_range_hashed_dictionary.reference b/tests/queries/0_stateless/01676_range_hashed_dictionary.reference
new file mode 100644
index 000000000000..23a5180d99ca
--- /dev/null
+++ b/tests/queries/0_stateless/01676_range_hashed_dictionary.reference
@@ -0,0 +1,58 @@
+Dictionary not nullable
+dictGet
+0.33
+0.42
+0.46
+0.2
+0.4
+dictHas
+1
+1
+1
+0
+select columns from dictionary
+allColumns
+1	2019-05-05	2019-05-20	0.33
+1	2019-05-21	2019-05-30	0.42
+2	2019-05-21	2019-05-30	0.46
+noColumns
+1
+1
+1
+onlySpecificColumns
+1	2019-05-05	0.33
+1	2019-05-21	0.42
+2	2019-05-21	0.46
+onlySpecificColumn
+0.33
+0.42
+0.46
+Dictionary nullable
+dictGet
+0.33
+0.42
+\N
+0.2
+0.4
+dictHas
+1
+1
+1
+0
+select columns from dictionary
+allColumns
+1	2019-05-05	2019-05-20	0.33
+1	2019-05-21	2019-05-30	0.42
+2	2019-05-21	2019-05-30	\N
+noColumns
+1
+1
+1
+onlySpecificColumns
+1	2019-05-05	0.33
+1	2019-05-21	0.42
+2	2019-05-21	\N
+onlySpecificColumn
+0.33
+0.42
+\N
diff --git a/tests/queries/0_stateless/01676_range_hashed_dictionary.sql b/tests/queries/0_stateless/01676_range_hashed_dictionary.sql
new file mode 100644
index 000000000000..455e850b2392
--- /dev/null
+++ b/tests/queries/0_stateless/01676_range_hashed_dictionary.sql
@@ -0,0 +1,110 @@
+DROP DATABASE IF EXISTS database_for_range_dict;
+
+CREATE DATABASE database_for_range_dict;
+
+CREATE TABLE database_for_range_dict.date_table
+(
+  CountryID UInt64,
+  StartDate Date,
+  EndDate Date,
+  Tax Float64
+)
+ENGINE = MergeTree()
+ORDER BY CountryID;
+
+INSERT INTO database_for_range_dict.date_table VALUES(1, toDate('2019-05-05'), toDate('2019-05-20'), 0.33);
+INSERT INTO database_for_range_dict.date_table VALUES(1, toDate('2019-05-21'), toDate('2019-05-30'), 0.42);
+INSERT INTO database_for_range_dict.date_table VALUES(2, toDate('2019-05-21'), toDate('2019-05-30'), 0.46);
+
+CREATE DICTIONARY database_for_range_dict.range_dictionary
+(
+  CountryID UInt64,
+  StartDate Date,
+  EndDate Date,
+  Tax Float64 DEFAULT 0.2
+)
+PRIMARY KEY CountryID
+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'date_table' DB 'database_for_range_dict'))
+LIFETIME(MIN 1 MAX 1000)
+LAYOUT(RANGE_HASHED())
+RANGE(MIN StartDate MAX EndDate);
+
+SELECT 'Dictionary not nullable';
+SELECT 'dictGet';
+SELECT dictGet('database_for_range_dict.range_dictionary', 'Tax', toUInt64(1), toDate('2019-05-15'));
+SELECT dictGet('database_for_range_dict.range_dictionary', 'Tax', toUInt64(1), toDate('2019-05-29'));
+SELECT dictGet('database_for_range_dict.range_dictionary', 'Tax', toUInt64(2), toDate('2019-05-29'));
+SELECT dictGet('database_for_range_dict.range_dictionary', 'Tax', toUInt64(2), toDate('2019-05-31'));
+SELECT dictGetOrDefault('database_for_range_dict.range_dictionary', 'Tax', toUInt64(2), toDate('2019-05-31'), 0.4);
+SELECT 'dictHas';
+SELECT dictHas('database_for_range_dict.range_dictionary', toUInt64(1), toDate('2019-05-15'));
+SELECT dictHas('database_for_range_dict.range_dictionary', toUInt64(1), toDate('2019-05-29'));
+SELECT dictHas('database_for_range_dict.range_dictionary', toUInt64(2), toDate('2019-05-29'));
+SELECT dictHas('database_for_range_dict.range_dictionary', toUInt64(2), toDate('2019-05-31'));
+SELECT 'select columns from dictionary';
+SELECT 'allColumns';
+SELECT * FROM database_for_range_dict.range_dictionary;
+SELECT 'noColumns';
+SELECT 1 FROM database_for_range_dict.range_dictionary;
+SELECT 'onlySpecificColumns';
+SELECT CountryID, StartDate, Tax FROM database_for_range_dict.range_dictionary;
+SELECT 'onlySpecificColumn';
+SELECT Tax FROM database_for_range_dict.range_dictionary;
+
+DROP TABLE database_for_range_dict.date_table;
+DROP DICTIONARY database_for_range_dict.range_dictionary;
+
+CREATE TABLE database_for_range_dict.date_table
+(
+  CountryID UInt64,
+  StartDate Date,
+  EndDate Date,
+  Tax Nullable(Float64)
+)
+ENGINE = MergeTree()
+ORDER BY CountryID;
+
+INSERT INTO database_for_range_dict.date_table VALUES(1, toDate('2019-05-05'), toDate('2019-05-20'), 0.33);
+INSERT INTO database_for_range_dict.date_table VALUES(1, toDate('2019-05-21'), toDate('2019-05-30'), 0.42);
+INSERT INTO database_for_range_dict.date_table VALUES(2, toDate('2019-05-21'), toDate('2019-05-30'), NULL);
+
+CREATE DICTIONARY database_for_range_dict.range_dictionary_nullable
+(
+  CountryID UInt64,
+  StartDate Date,
+  EndDate Date,
+  Tax Nullable(Float64) DEFAULT 0.2
+)
+PRIMARY KEY CountryID
+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'date_table' DB 'database_for_range_dict'))
+LIFETIME(MIN 1 MAX 1000)
+LAYOUT(RANGE_HASHED())
+RANGE(MIN StartDate MAX EndDate);
+
+SELECT 'Dictionary nullable';
+SELECT 'dictGet';
+SELECT dictGet('database_for_range_dict.range_dictionary_nullable', 'Tax', toUInt64(1), toDate('2019-05-15'));
+SELECT dictGet('database_for_range_dict.range_dictionary_nullable', 'Tax', toUInt64(1), toDate('2019-05-29'));
+SELECT dictGet('database_for_range_dict.range_dictionary_nullable', 'Tax', toUInt64(2), toDate('2019-05-29'));
+SELECT dictGet('database_for_range_dict.range_dictionary_nullable', 'Tax', toUInt64(2), toDate('2019-05-31'));
+SELECT dictGetOrDefault('database_for_range_dict.range_dictionary_nullable', 'Tax', toUInt64(2), toDate('2019-05-31'), 0.4);
+SELECT 'dictHas';
+SELECT dictHas('database_for_range_dict.range_dictionary_nullable', toUInt64(1), toDate('2019-05-15'));
+SELECT dictHas('database_for_range_dict.range_dictionary_nullable', toUInt64(1), toDate('2019-05-29'));
+SELECT dictHas('database_for_range_dict.range_dictionary_nullable', toUInt64(2), toDate('2019-05-29'));
+SELECT dictHas('database_for_range_dict.range_dictionary_nullable', toUInt64(2), toDate('2019-05-31'));
+SELECT 'select columns from dictionary';
+SELECT 'allColumns';
+SELECT * FROM database_for_range_dict.range_dictionary_nullable;
+SELECT 'noColumns';
+SELECT 1 FROM database_for_range_dict.range_dictionary_nullable;
+SELECT 'onlySpecificColumns';
+SELECT CountryID, StartDate, Tax FROM database_for_range_dict.range_dictionary_nullable;
+SELECT 'onlySpecificColumn';
+SELECT Tax FROM database_for_range_dict.range_dictionary_nullable;
+
+DROP TABLE database_for_range_dict.date_table;
+DROP DICTIONARY database_for_range_dict.range_dictionary_nullable;
+
+DROP DATABASE database_for_range_dict;
+
