diff --git a/src/DataStreams/PushingToViewsBlockOutputStream.cpp b/src/DataStreams/PushingToViewsBlockOutputStream.cpp
index 7f730b5fd3f2..b7a5c3f34e46 100644
--- a/src/DataStreams/PushingToViewsBlockOutputStream.cpp
+++ b/src/DataStreams/PushingToViewsBlockOutputStream.cpp
@@ -153,7 +153,7 @@ void PushingToViewsBlockOutputStream::write(const Block & block)
     const Settings & settings = context.getSettingsRef();
     if (settings.parallel_view_processing && views.size() > 1)
     {
-        // Push to views concurrently if enabled, and more than one view is attached
+        // Push to views concurrently if enabled and more than one view is attached
         ThreadPool pool(std::min(size_t(settings.max_threads), views.size()));
         for (size_t view_num = 0; view_num < views.size(); ++view_num)
         {
@@ -208,6 +208,45 @@ void PushingToViewsBlockOutputStream::writeSuffix()
 
     std::exception_ptr first_exception;
 
+    const Settings & settings = context.getSettingsRef();
+    bool parallel_processing = false;
+
+    /// Run writeSuffix() for views in separate thread pool.
+    /// In could have been done in PushingToViewsBlockOutputStream::process, however
+    /// it is not good if insert into main table fail but into view succeed.
+    if (settings.parallel_view_processing && views.size() > 1)
+    {
+        parallel_processing = true;
+
+        // Push to views concurrently if enabled and more than one view is attached
+        ThreadPool pool(std::min(size_t(settings.max_threads), views.size()));
+        auto thread_group = CurrentThread::getGroup();
+
+        for (auto & view : views)
+        {
+            if (view.exception)
+                continue;
+
+            pool.scheduleOrThrowOnError([thread_group, &view]
+            {
+                setThreadName("PushingToViews");
+                if (thread_group)
+                    CurrentThread::attachToIfDetached(thread_group);
+
+                try
+                {
+                    view.out->writeSuffix();
+                }
+                catch (...)
+                {
+                    view.exception = std::current_exception();
+                }
+            });
+        }
+        // Wait for concurrent view processing
+        pool.wait();
+    }
+
     for (auto & view : views)
     {
         if (view.exception)
@@ -218,6 +257,9 @@ void PushingToViewsBlockOutputStream::writeSuffix()
             continue;
         }
 
+        if (parallel_processing)
+            continue;
+
         try
         {
             view.out->writeSuffix();
