{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 23040,
  "instance_id": "ClickHouse__ClickHouse-23040",
  "issue_numbers": [
    "22158"
  ],
  "base_commit": "6d8efe5d5b3efe303cc966657862722f4952dbc7",
  "patch": "diff --git a/programs/client/Suggest.cpp b/programs/client/Suggest.cpp\nindex dfa7048349e9..8d4c0fdbd5a1 100644\n--- a/programs/client/Suggest.cpp\n+++ b/programs/client/Suggest.cpp\n@@ -108,14 +108,6 @@ void Suggest::loadImpl(Connection & connection, const ConnectionTimeouts & timeo\n         \" UNION ALL \"\n         \"SELECT cluster FROM system.clusters\"\n         \" UNION ALL \"\n-        \"SELECT name FROM system.errors\"\n-        \" UNION ALL \"\n-        \"SELECT event FROM system.events\"\n-        \" UNION ALL \"\n-        \"SELECT metric FROM system.asynchronous_metrics\"\n-        \" UNION ALL \"\n-        \"SELECT metric FROM system.metrics\"\n-        \" UNION ALL \"\n         \"SELECT macro FROM system.macros\"\n         \" UNION ALL \"\n         \"SELECT policy_name FROM system.storage_policies\"\n@@ -139,17 +131,12 @@ void Suggest::loadImpl(Connection & connection, const ConnectionTimeouts & timeo\n \n     query << \") WHERE notEmpty(res)\";\n \n-    Settings settings;\n-    /// To show all rows from:\n-    /// - system.errors\n-    /// - system.events\n-    settings.system_events_show_zero_values = true;\n-    fetch(connection, timeouts, query.str(), settings);\n+    fetch(connection, timeouts, query.str());\n }\n \n-void Suggest::fetch(Connection & connection, const ConnectionTimeouts & timeouts, const std::string & query, Settings & settings)\n+void Suggest::fetch(Connection & connection, const ConnectionTimeouts & timeouts, const std::string & query)\n {\n-    connection.sendQuery(timeouts, query, \"\" /* query_id */, QueryProcessingStage::Complete, &settings);\n+    connection.sendQuery(timeouts, query, \"\" /* query_id */, QueryProcessingStage::Complete);\n \n     while (true)\n     {\ndiff --git a/programs/client/Suggest.h b/programs/client/Suggest.h\nindex 0049bc08ebff..03332088cbe4 100644\n--- a/programs/client/Suggest.h\n+++ b/programs/client/Suggest.h\n@@ -33,7 +33,7 @@ class Suggest : public LineReader::Suggest, boost::noncopyable\n private:\n \n     void loadImpl(Connection & connection, const ConnectionTimeouts & timeouts, size_t suggestion_limit);\n-    void fetch(Connection & connection, const ConnectionTimeouts & timeouts, const std::string & query, Settings & settings);\n+    void fetch(Connection & connection, const ConnectionTimeouts & timeouts, const std::string & query);\n     void fillWordsFromBlock(const Block & block);\n \n     /// Words are fetched asynchronously.\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01676_clickhouse_client_autocomplete.reference b/tests/queries/0_stateless/01676_long_clickhouse_client_autocomplete.reference\nsimilarity index 100%\nrename from tests/queries/0_stateless/01676_clickhouse_client_autocomplete.reference\nrename to tests/queries/0_stateless/01676_long_clickhouse_client_autocomplete.reference\ndiff --git a/tests/queries/0_stateless/01676_clickhouse_client_autocomplete.sh b/tests/queries/0_stateless/01676_long_clickhouse_client_autocomplete.sh\nsimilarity index 80%\nrename from tests/queries/0_stateless/01676_clickhouse_client_autocomplete.sh\nrename to tests/queries/0_stateless/01676_long_clickhouse_client_autocomplete.sh\nindex 08e070448410..1ed5c6be2724 100755\n--- a/tests/queries/0_stateless/01676_clickhouse_client_autocomplete.sh\n+++ b/tests/queries/0_stateless/01676_long_clickhouse_client_autocomplete.sh\n@@ -69,18 +69,6 @@ compwords_positive=(\n     max_concurrent_queries_for_all_users\n     # system.clusters\n     test_shard_localhost\n-    # system.errors, also it is very rare to cover system_events_show_zero_values\n-    CONDITIONAL_TREE_PARENT_NOT_FOUND\n-    # system.events, also it is very rare to cover system_events_show_zero_values\n-    WriteBufferFromFileDescriptorWriteFailed\n-    # system.asynchronous_metrics, also this metric has zero value\n-    #\n-    # NOTE: that there is no ability to complete metrics like\n-    # jemalloc.background_thread.num_runs, due to \".\" is used as a word breaker\n-    # (and this cannot be changed -- db.table)\n-    ReplicasMaxAbsoluteDelay\n-    # system.metrics\n-    PartsPreCommitted\n     # system.macros\n     default_path_test\n     # system.storage_policies, egh not uniq\n",
  "problem_statement": "Unexpected errors in read-only mode\n**Describe the bug**\r\nWhen connecting via read-only user to clickhouse, unexpected exceptions are logged both by clickhouse-client and clickhouse-server.\r\n\r\n**Does it reproduce on recent release?**\r\n[The list of releases](https://github.com/ClickHouse/ClickHouse/blob/master/utils/list-versions/version_date.tsv)\r\nReproduces on 21.3.3.14-lts\r\n\r\n**How to reproduce**\r\nTo reproduce this issue, official RPMs may be used. It doesn't reproduce with docker image yandex/clickhouse-{client,server}\r\n* run fedora in docker:\r\n`$ docker run --privileged -ti registry.fedoraproject.org/fedora:rawhide /bin/bash`\r\n* install dependencies, wget and a text editor:\r\n` # dnf install initscripts wget nano`\r\n* download clickhouse 21.3.3.14 rpms and install it:\r\n```\r\n# cd /root\r\n# wget https://github.com/ClickHouse/ClickHouse/releases/download/v21.3.3.14-lts/clickhouse-client-21.3.3.14-2.noarch.rpm\r\n# wget https://github.com/ClickHouse/ClickHouse/releases/download/v21.3.3.14-lts/clickhouse-common-static-21.3.3.14-2.x86_64.rpm\r\n# wget https://github.com/ClickHouse/ClickHouse/releases/download/v21.3.3.14-lts/clickhouse-server-21.3.3.14-2.noarch.rpm\r\n# rpm -i -U -v -h clickhouse-client-21.3.3.14-2.noarch.rpm clickhouse-common-static-21.3.3.14-2.x86_64.rpm clickhouse-server-21.3.3.14-2.noarch.rpm\r\n```\r\n* uncomment `<access_management>1</access_management>` line in file `/etc/clickhouse-server/users.xml`\r\n* start clickhouse server:\r\n`/etc/init.d/clickhouse-server start`\r\n* connect to clickhouse server and create read-only user:\r\n```\r\n# clickhouse-client \r\nClickHouse client version 21.3.3.14 (official build).\r\nConnecting to localhost:9000 as user default.\r\nConnected to ClickHouse server version 21.3.3 revision 54447.\r\n\r\ne9cae3b6abc2 :) create user readonlyuser identified with plaintext_password by 'password' settings profile 'readonly'\r\n\r\nCREATE USER readonlyuser IDENTIFIED WITH plaintext_password BY 'password' SETTINGS PROFILE readonly\r\n\r\nQuery id: 32e34c2d-0b7d-4bb2-8806-abb5789d8a43\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.003 sec. \r\n\r\ne9cae3b6abc2 :) Bye.\r\n```\r\n* now connect as read-only user\r\n`clickhouse-client -u readonlyuser --ask-password`\r\n\r\n**Expected behavior**\r\nExpected that it works without any errors.\r\n\r\n**Error message and/or stacktrace**\r\nError on client:\r\n```\r\n# clickhouse-client -u readonlyuser --ask-password\r\nClickHouse client version 21.3.3.14 (official build).\r\nPassword for user (readonlyuser): \r\nConnecting to localhost:9000 as user readonlyuser.\r\nConnected to ClickHouse server version 21.3.3 revision 54447.\r\n\r\ne9cae3b6abc2 :) Cannot load data for command line suggestions: Code: 164, e.displayText() = DB::Exception: Received from localhost:9000. DB::Exception: Cannot modify 'system_events_show_zero_values' setting in readonly mode. (version 21.3.3.14 (official build))\r\n```\r\n\r\nError on server (`/var/log/clickhouse-server/clickhouse-server.err.log`):\r\n```\r\n2021.03.26 09:45:58.976489 [ 259 ] {} <Error> TCPHandler: Code: 164, e.displayText() = DB::Exception: Cannot modify 'system_events_show_zero_values' setting in readonly mode, Stack trace:\r\n\r\n0. DB::SettingsConstraints::checkImpl(DB::Settings const&, DB::SettingChange&, DB::SettingsConstraints::ReactionOnViolation) const @ 0xe6d2170 in /usr/bin/clickhouse\r\n1. DB::SettingsConstraints::check(DB::Settings const&, DB::SettingsChanges&) const @ 0xe6d2b20 in /usr/bin/clickhouse\r\n2. DB::TCPHandler::receiveQuery() @ 0xf8c916b in /usr/bin/clickhouse\r\n3. DB::TCPHandler::receivePacket() @ 0xf8bfbb7 in /usr/bin/clickhouse\r\n4. DB::TCPHandler::runImpl() @ 0xf8b83b2 in /usr/bin/clickhouse\r\n5. DB::TCPHandler::run() @ 0xf8cad69 in /usr/bin/clickhouse\r\n6. Poco::Net::TCPServerConnection::start() @ 0x11f7d83f in /usr/bin/clickhouse\r\n7. Poco::Net::TCPServerDispatcher::run() @ 0x11f7f251 in /usr/bin/clickhouse\r\n8. Poco::PooledThread::run() @ 0x120b5979 in /usr/bin/clickhouse\r\n9. Poco::ThreadImpl::runnableEntry(void*) @ 0x120b17da in /usr/bin/clickhouse\r\n10. start_thread @ 0x91c9 in /usr/lib64/libpthread-2.33.9000.so\r\n11. clone @ 0x100463 in /usr/lib64/libc-2.33.9000.so\r\n\r\n2021.03.26 09:45:58.978054 [ 259 ] {} <Error> TCPHandler: Code: 261, e.displayText() = DB::Exception: Unknown BlockInfo field number: 227213735, Stack trace:\r\n\r\n0. DB::BlockInfo::read(DB::ReadBuffer&) @ 0xe8a6658 in /usr/bin/clickhouse\r\n1. DB::NativeBlockInputStream::readImpl() @ 0xefdd853 in /usr/bin/clickhouse\r\n2. DB::IBlockInputStream::read() @ 0xe8ab0a5 in /usr/bin/clickhouse\r\n3. DB::TCPHandler::receiveUnexpectedData() @ 0xf8c9c35 in /usr/bin/clickhouse\r\n4. DB::TCPHandler::receivePacket() @ 0xf8bfd36 in /usr/bin/clickhouse\r\n5. DB::TCPHandler::runImpl() @ 0xf8b83b2 in /usr/bin/clickhouse\r\n6. DB::TCPHandler::run() @ 0xf8cad69 in /usr/bin/clickhouse\r\n7. Poco::Net::TCPServerConnection::start() @ 0x11f7d83f in /usr/bin/clickhouse\r\n8. Poco::Net::TCPServerDispatcher::run() @ 0x11f7f251 in /usr/bin/clickhouse\r\n9. Poco::PooledThread::run() @ 0x120b5979 in /usr/bin/clickhouse\r\n10. Poco::ThreadImpl::runnableEntry(void*) @ 0x120b17da in /usr/bin/clickhouse\r\n11. start_thread @ 0x91c9 in /usr/lib64/libpthread-2.33.9000.so\r\n12. clone @ 0x100463 in /usr/lib64/libc-2.33.9000.so\r\n\r\n2021.03.26 09:45:58.978523 [ 259 ] {} <Error> ServerErrorHandler: Code: 99, e.displayText() = DB::Exception: Unknown packet 11861 from client, Stack trace (when copying this message, always include the lines below):\r\n\r\n0. DB::TCPHandler::receivePacket() @ 0xf8bfcfc in /usr/bin/clickhouse\r\n1. DB::TCPHandler::runImpl() @ 0xf8b83b2 in /usr/bin/clickhouse\r\n2. DB::TCPHandler::run() @ 0xf8cad69 in /usr/bin/clickhouse\r\n3. Poco::Net::TCPServerConnection::start() @ 0x11f7d83f in /usr/bin/clickhouse\r\n4. Poco::Net::TCPServerDispatcher::run() @ 0x11f7f251 in /usr/bin/clickhouse\r\n5. Poco::PooledThread::run() @ 0x120b5979 in /usr/bin/clickhouse\r\n6. Poco::ThreadImpl::runnableEntry(void*) @ 0x120b17da in /usr/bin/clickhouse\r\n7. start_thread @ 0x91c9 in /usr/lib64/libpthread-2.33.9000.so\r\n8. clone @ 0x100463 in /usr/lib64/libc-2.33.9000.so\r\n (version 21.3.3.14 (official build))\r\n```\r\n\r\n**Additional context**\r\nAs stated before, it reproduces with official RPMs but doesn't reproduce with yandex/clickhouse-{client,server} docker images.\n",
  "hints_text": "",
  "created_at": "2021-04-13T12:41:28Z"
}