{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 17571,
  "instance_id": "ClickHouse__ClickHouse-17571",
  "issue_numbers": [
    "6804"
  ],
  "base_commit": "7f1a8b15fd3a7a01a84ce48a98a6bed1823c26ef",
  "patch": "diff --git a/src/Dictionaries/IPAddressDictionary.cpp b/src/Dictionaries/IPAddressDictionary.cpp\nindex 1e6ac5f77832..82e27361dc9c 100644\n--- a/src/Dictionaries/IPAddressDictionary.cpp\n+++ b/src/Dictionaries/IPAddressDictionary.cpp\n@@ -112,9 +112,12 @@ static void validateKeyTypes(const DataTypes & key_types)\n     if (key_types.empty() || key_types.size() > 2)\n         throw Exception{\"Expected a single IP address or IP with mask\", ErrorCodes::TYPE_MISMATCH};\n \n-    const auto & actual_type = key_types[0]->getName();\n-    if (actual_type != \"UInt32\" && actual_type != \"FixedString(16)\")\n-        throw Exception{\"Key does not match, expected either UInt32 or FixedString(16)\", ErrorCodes::TYPE_MISMATCH};\n+    const auto * key_ipv4type = typeid_cast<const DataTypeUInt32 *>(key_types[0].get());\n+    const auto * key_ipv6type = typeid_cast<const DataTypeFixedString *>(key_types[0].get());\n+\n+    if (key_ipv4type == nullptr && (key_ipv6type == nullptr || key_ipv6type->getN() != 16))\n+        throw Exception{\"Key does not match, expected either `IPv4` (`UInt32`) or `IPv6` (`FixedString(16)`)\",\n+                        ErrorCodes::TYPE_MISMATCH};\n \n     if (key_types.size() > 1)\n     {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01018_ip_dictionary.reference b/tests/queries/0_stateless/01018_ip_dictionary.reference\nindex 7fcf75f4d6d0..d791352e01cc 100644\n--- a/tests/queries/0_stateless/01018_ip_dictionary.reference\n+++ b/tests/queries/0_stateless/01018_ip_dictionary.reference\n@@ -50,6 +50,8 @@\n 1\n 1\n 1\n+1\n+1\n ***ipv4 trie dict mask***\n 1\n 1\ndiff --git a/tests/queries/0_stateless/01018_ip_dictionary.sql b/tests/queries/0_stateless/01018_ip_dictionary.sql\nindex 790d38b93062..53ddf1111c7b 100644\n--- a/tests/queries/0_stateless/01018_ip_dictionary.sql\n+++ b/tests/queries/0_stateless/01018_ip_dictionary.sql\n@@ -95,6 +95,10 @@ SELECT 11212 == dictGetUInt32('database_for_dict.dict_ipv4_trie', 'asn', tuple(I\n \n SELECT 11211 == dictGetUInt32('database_for_dict.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('202.79.32.2')));\n \n+-- check that dictionary works with aliased types `IPv4` and `IPv6`\n+SELECT 11211 == dictGetUInt32('database_for_dict.dict_ipv4_trie', 'asn', tuple(toIPv4('202.79.32.2')));\n+SELECT 11212 == dictGetUInt32('database_for_dict.dict_ipv4_trie', 'asn', tuple(toIPv6('::ffff:101.79.55.22')));\n+\n CREATE TABLE database_for_dict.table_from_ipv4_trie_dict\n (\n   prefix String,\n",
  "problem_statement": "Add support for IPv4 / IPv6 to ip_trie dict\n**Use case**\r\nI want to be able to use IPv4 / IPv6 types directly when using ip_trie dict\r\nRight now only UInt32 or FixedString(16) are accepted\r\n\r\n**Additional context**\r\n```\r\nSELECT dictGetString('hub', 'name', tuple(toIPv6('::ffff:8.8.8.8')))\r\n\r\nReceived exception from server (version 19.7.3):\r\nCode: 53. DB::Exception: Received from localhost:9000, ::1. DB::Exception: Key does not match, expected either UInt32 or FixedString(16).\r\n```\r\n```\r\n# cat /etc/clickhouse-server/hub_dictionary.xml \r\n<dictionaries>\r\n    <dictionary>\r\n        <name>hub</name>\r\n        <source>\r\n            <file>\r\n                <path>/opt/analytics-gui/hub.csv</path>\r\n                <format>CSVWithNames</format>\r\n            </file>\r\n        </source>\r\n\r\n        <lifetime>600</lifetime>\r\n\r\n        <layout>\r\n            <ip_trie/>\r\n        </layout>\r\n\r\n        <structure>\r\n            <key>\r\n                <attribute>\r\n                    <name>prefix</name>\r\n                    <type>String</type>\r\n                </attribute>\r\n            </key>\r\n            <attribute>\r\n                <name>name</name>\r\n                <type>String</type>\r\n                <null_value />\r\n            </attribute>\r\n        </structure>\r\n    </dictionary>\r\n</dictionaries>\r\n```\r\n\r\n```\r\n# cat /opt/analytics-gui/hub.csv \r\nprefix,name\r\n\"::ffff:8.8.8.8/128\",\"google dns\"\r\n```\r\n\r\n**Current workaround**\r\nExplicitely convert to the right type\r\n```\r\nSELECT dictGetString('hub', 'name', tuple(toFixedString(toIPv6('::ffff:8.8.8.8'), 16)))\r\nSELECT dictGetString('hub', 'name', tuple(toUInt32(toIPv4('8.8.8.8'))))\r\n```\n",
  "hints_text": "",
  "created_at": "2020-11-29T18:23:14Z",
  "modified_files": [
    "src/Dictionaries/IPAddressDictionary.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/01018_ip_dictionary.reference",
    "tests/queries/0_stateless/01018_ip_dictionary.sql"
  ]
}