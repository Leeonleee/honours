{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 29348,
  "instance_id": "ClickHouse__ClickHouse-29348",
  "issue_numbers": [
    "29347"
  ],
  "base_commit": "7628273df4441ceab134f3f9273ed889d60e5180",
  "patch": "diff --git a/src/Processors/Transforms/WindowTransform.cpp b/src/Processors/Transforms/WindowTransform.cpp\nindex 2f8231d8cfb5..ff62df8d939b 100644\n--- a/src/Processors/Transforms/WindowTransform.cpp\n+++ b/src/Processors/Transforms/WindowTransform.cpp\n@@ -1658,68 +1658,6 @@ struct WindowFunctionLagLeadInFrame final : public WindowFunction\n     }\n };\n \n-struct WindowFunctionNthValue final : public WindowFunction\n-{\n-    WindowFunctionNthValue(const std::string & name_,\n-    const DataTypes & argument_types_, const Array & parameters_)\n-    : WindowFunction(name_, argument_types_, parameters_)\n-    {\n-        if (!parameters.empty())\n-        {\n-            throw Exception(ErrorCodes::BAD_ARGUMENTS,\n-                \"Function {} cannot be parameterized\", name_);\n-        }\n-\n-        if (argument_types.size() != 2)\n-        {\n-            throw Exception(ErrorCodes::BAD_ARGUMENTS,\n-                \"Function '{}' accepts 2 arguments, {} given\",\n-                name_, argument_types.size());\n-        }\n-    }\n-\n-    DataTypePtr getReturnType() const override\n-    { return argument_types[0]; }\n-\n-    bool allocatesMemoryInArena() const override { return false; }\n-\n-    void windowInsertResultInto(const WindowTransform * transform,\n-        size_t function_index) override\n-    {\n-        const auto & current_block = transform->blockAt(transform->current_row);\n-        IColumn & to = *(current_block.output_columns[function_index]);\n-        const auto & workspace = transform->workspaces[function_index];\n-\n-        int64_t offset = (*current_block.input_columns[\n-                workspace.argument_column_indices[1]])[\n-            transform->current_row.row].get<Int64>();\n-\n-        /// Either overflow or really negative value, both is not acceptable.\n-        if (offset <= 0)\n-        {\n-            throw Exception(ErrorCodes::BAD_ARGUMENTS,\n-                \"The offset for function {} must be in (0, {}], {} given\",\n-                getName(), INT64_MAX, offset);\n-        }\n-\n-        --offset;\n-        const auto [target_row, offset_left] = transform->moveRowNumber(transform->frame_start, offset);\n-        if (offset_left != 0\n-            || target_row < transform->frame_start\n-            || transform->frame_end <= target_row)\n-        {\n-            // Offset is outside the frame.\n-            to.insertDefault();\n-        }\n-        else\n-        {\n-            // Offset is inside the frame.\n-            to.insertFrom(*transform->blockAt(target_row).input_columns[\n-                    workspace.argument_column_indices[0]],\n-               target_row.row);\n-        }\n-    }\n-};\n \n void registerWindowFunctions(AggregateFunctionFactory & factory)\n {\n@@ -1784,13 +1722,6 @@ void registerWindowFunctions(AggregateFunctionFactory & factory)\n             return std::make_shared<WindowFunctionLagLeadInFrame<true>>(\n                 name, argument_types, parameters);\n         }, properties});\n-\n-    factory.registerFunction(\"nth_value\", {[](const std::string & name,\n-            const DataTypes & argument_types, const Array & parameters, const Settings *)\n-        {\n-            return std::make_shared<WindowFunctionNthValue>(\n-                name, argument_types, parameters);\n-        }, properties}, AggregateFunctionFactory::CaseInsensitive);\n }\n \n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01591_window_functions.reference b/tests/queries/0_stateless/01591_window_functions.reference\nindex 926718054367..f54c10ee8b9e 100644\n--- a/tests/queries/0_stateless/01591_window_functions.reference\n+++ b/tests/queries/0_stateless/01591_window_functions.reference\n@@ -1094,70 +1094,6 @@ order by number\n 7\t6\t8\n 8\t7\t9\n 9\t8\t9\n--- nth_value without specific frame range given\n-select\n-    number,\n-    nth_value(number, 1) over w as firstValue,\n-    nth_value(number, 2) over w as secondValue,\n-    nth_value(number, 3) over w as thirdValue,\n-    nth_value(number, 4) over w as fourthValue\n-from numbers(10)\n-window w as (order by number)\n-order by number\n-;\n-0\t0\t0\t0\t0\n-1\t0\t1\t0\t0\n-2\t0\t1\t2\t0\n-3\t0\t1\t2\t3\n-4\t0\t1\t2\t3\n-5\t0\t1\t2\t3\n-6\t0\t1\t2\t3\n-7\t0\t1\t2\t3\n-8\t0\t1\t2\t3\n-9\t0\t1\t2\t3\n--- nth_value with frame range specified\n-select\n-    number,\n-    nth_value(number, 1) over w as firstValue,\n-    nth_value(number, 2) over w as secondValue,\n-    nth_value(number, 3) over w as thirdValue,\n-    nth_value(number, 4) over w as fourthValue\n-from numbers(10)\n-window w as (order by number range between 1 preceding and 1 following)\n-order by number\n-;\n-0\t0\t1\t0\t0\n-1\t0\t1\t2\t0\n-2\t1\t2\t3\t0\n-3\t2\t3\t4\t0\n-4\t3\t4\t5\t0\n-5\t4\t5\t6\t0\n-6\t5\t6\t7\t0\n-7\t6\t7\t8\t0\n-8\t7\t8\t9\t0\n-9\t8\t9\t0\t0\n--- to make nth_value return null for out-of-frame rows, cast the argument to\n--- Nullable; otherwise, it returns default values.\n-SELECT\n-    number,\n-    nth_value(toNullable(number), 1) OVER w as firstValue,\n-    nth_value(toNullable(number), 3) OVER w as thridValue\n-FROM numbers(5)\n-WINDOW w AS (ORDER BY number ASC)\n-;\n-0\t0\t\\N\n-1\t0\t\\N\n-2\t0\t2\n-3\t0\t2\n-4\t0\t2\n--- nth_value UBsan\n-SELECT nth_value(1, -1) OVER (); -- { serverError BAD_ARGUMENTS }\n-SELECT nth_value(1, 0) OVER (); -- { serverError BAD_ARGUMENTS }\n-SELECT nth_value(1, /* INT64_MAX+1 */ 0x7fffffffffffffff+1) OVER (); -- { serverError BAD_ARGUMENTS }\n-SELECT nth_value(1, /* INT64_MAX */ 0x7fffffffffffffff) OVER ();\n-0\n-SELECT nth_value(1, 1) OVER ();\n-1\n -- lagInFrame UBsan\n SELECT lagInFrame(1, -1) OVER (); -- { serverError BAD_ARGUMENTS }\n SELECT lagInFrame(1, 0) OVER ();\ndiff --git a/tests/queries/0_stateless/01591_window_functions.sql b/tests/queries/0_stateless/01591_window_functions.sql\nindex 43946ddb3fe8..aa9bd9795e71 100644\n--- a/tests/queries/0_stateless/01591_window_functions.sql\n+++ b/tests/queries/0_stateless/01591_window_functions.sql\n@@ -401,47 +401,6 @@ window w as (order by number range between 1 preceding and 1 following)\n order by number\n ;\n \n--- nth_value without specific frame range given\n-select\n-    number,\n-    nth_value(number, 1) over w as firstValue,\n-    nth_value(number, 2) over w as secondValue,\n-    nth_value(number, 3) over w as thirdValue,\n-    nth_value(number, 4) over w as fourthValue\n-from numbers(10)\n-window w as (order by number)\n-order by number\n-;\n-\n--- nth_value with frame range specified\n-select\n-    number,\n-    nth_value(number, 1) over w as firstValue,\n-    nth_value(number, 2) over w as secondValue,\n-    nth_value(number, 3) over w as thirdValue,\n-    nth_value(number, 4) over w as fourthValue\n-from numbers(10)\n-window w as (order by number range between 1 preceding and 1 following)\n-order by number\n-;\n-\n--- to make nth_value return null for out-of-frame rows, cast the argument to\n--- Nullable; otherwise, it returns default values.\n-SELECT\n-    number,\n-    nth_value(toNullable(number), 1) OVER w as firstValue,\n-    nth_value(toNullable(number), 3) OVER w as thridValue\n-FROM numbers(5)\n-WINDOW w AS (ORDER BY number ASC)\n-;\n-\n--- nth_value UBsan\n-SELECT nth_value(1, -1) OVER (); -- { serverError BAD_ARGUMENTS }\n-SELECT nth_value(1, 0) OVER (); -- { serverError BAD_ARGUMENTS }\n-SELECT nth_value(1, /* INT64_MAX+1 */ 0x7fffffffffffffff+1) OVER (); -- { serverError BAD_ARGUMENTS }\n-SELECT nth_value(1, /* INT64_MAX */ 0x7fffffffffffffff) OVER ();\n-SELECT nth_value(1, 1) OVER ();\n-\n -- lagInFrame UBsan\n SELECT lagInFrame(1, -1) OVER (); -- { serverError BAD_ARGUMENTS }\n SELECT lagInFrame(1, 0) OVER ();\n",
  "problem_statement": "Uninitialized memory in window function `nth_value`\nRun under MSan:\r\n\r\n**Describe the bug**\r\nhttps://clickhouse-test-reports.s3.yandex.net/29341/2b2bec3679df7965af908ce3f1e8e17e39bd12fe/fuzzer_msan/report.html#fail1\r\n\r\n**How to reproduce**\r\n```\r\nSELECT number, nth_value(number, '10') OVER w AS secondValue, nth_value(number, 2147483647) OVER w AS thirdValue FROM numbers(1.) WINDOW w AS (ORDER BY number ASC) ORDER BY toInt64(2147483646 - intDiv(number, 2147483647), toInt64(number, NULL - intDiv(number, NULL), 100000002004087730000.)) ASC, number DESC NULLS FIRST\r\n```\r\n\r\n```\r\nChanged settings: max_block_size = '1', max_threads = '1', receive_timeout = '10', receive_data_timeout_ms = '10000', max_rows_to_read = '3', engine_file_empty_if_not_exists = '0'\r\n```\n",
  "hints_text": "",
  "created_at": "2021-09-25T01:42:23Z"
}