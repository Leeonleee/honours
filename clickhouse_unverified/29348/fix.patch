diff --git a/src/Processors/Transforms/WindowTransform.cpp b/src/Processors/Transforms/WindowTransform.cpp
index 2f8231d8cfb5..ff62df8d939b 100644
--- a/src/Processors/Transforms/WindowTransform.cpp
+++ b/src/Processors/Transforms/WindowTransform.cpp
@@ -1658,68 +1658,6 @@ struct WindowFunctionLagLeadInFrame final : public WindowFunction
     }
 };
 
-struct WindowFunctionNthValue final : public WindowFunction
-{
-    WindowFunctionNthValue(const std::string & name_,
-    const DataTypes & argument_types_, const Array & parameters_)
-    : WindowFunction(name_, argument_types_, parameters_)
-    {
-        if (!parameters.empty())
-        {
-            throw Exception(ErrorCodes::BAD_ARGUMENTS,
-                "Function {} cannot be parameterized", name_);
-        }
-
-        if (argument_types.size() != 2)
-        {
-            throw Exception(ErrorCodes::BAD_ARGUMENTS,
-                "Function '{}' accepts 2 arguments, {} given",
-                name_, argument_types.size());
-        }
-    }
-
-    DataTypePtr getReturnType() const override
-    { return argument_types[0]; }
-
-    bool allocatesMemoryInArena() const override { return false; }
-
-    void windowInsertResultInto(const WindowTransform * transform,
-        size_t function_index) override
-    {
-        const auto & current_block = transform->blockAt(transform->current_row);
-        IColumn & to = *(current_block.output_columns[function_index]);
-        const auto & workspace = transform->workspaces[function_index];
-
-        int64_t offset = (*current_block.input_columns[
-                workspace.argument_column_indices[1]])[
-            transform->current_row.row].get<Int64>();
-
-        /// Either overflow or really negative value, both is not acceptable.
-        if (offset <= 0)
-        {
-            throw Exception(ErrorCodes::BAD_ARGUMENTS,
-                "The offset for function {} must be in (0, {}], {} given",
-                getName(), INT64_MAX, offset);
-        }
-
-        --offset;
-        const auto [target_row, offset_left] = transform->moveRowNumber(transform->frame_start, offset);
-        if (offset_left != 0
-            || target_row < transform->frame_start
-            || transform->frame_end <= target_row)
-        {
-            // Offset is outside the frame.
-            to.insertDefault();
-        }
-        else
-        {
-            // Offset is inside the frame.
-            to.insertFrom(*transform->blockAt(target_row).input_columns[
-                    workspace.argument_column_indices[0]],
-               target_row.row);
-        }
-    }
-};
 
 void registerWindowFunctions(AggregateFunctionFactory & factory)
 {
@@ -1784,13 +1722,6 @@ void registerWindowFunctions(AggregateFunctionFactory & factory)
             return std::make_shared<WindowFunctionLagLeadInFrame<true>>(
                 name, argument_types, parameters);
         }, properties});
-
-    factory.registerFunction("nth_value", {[](const std::string & name,
-            const DataTypes & argument_types, const Array & parameters, const Settings *)
-        {
-            return std::make_shared<WindowFunctionNthValue>(
-                name, argument_types, parameters);
-        }, properties}, AggregateFunctionFactory::CaseInsensitive);
 }
 
 }
