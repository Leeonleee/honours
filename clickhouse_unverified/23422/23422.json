{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 23422,
  "instance_id": "ClickHouse__ClickHouse-23422",
  "issue_numbers": [
    "23029"
  ],
  "base_commit": "9eb5e3843e0c56b6a95417aa6a3e2a0fc481db4e",
  "patch": "diff --git a/src/Core/Block.cpp b/src/Core/Block.cpp\nindex 0c9a470dc1d4..0f470c10b81b 100644\n--- a/src/Core/Block.cpp\n+++ b/src/Core/Block.cpp\n@@ -484,7 +484,7 @@ DataTypes Block::getDataTypes() const\n \n \n template <typename ReturnType>\n-static ReturnType checkBlockStructure(const Block & lhs, const Block & rhs, const std::string & context_description)\n+static ReturnType checkBlockStructure(const Block & lhs, const Block & rhs, const std::string & context_description, bool allow_remove_constants)\n {\n     auto on_error = [](const std::string & message [[maybe_unused]], int code [[maybe_unused]])\n     {\n@@ -515,7 +515,16 @@ static ReturnType checkBlockStructure(const Block & lhs, const Block & rhs, cons\n         if (!actual.column || !expected.column)\n             continue;\n \n-        if (actual.column->getName() != expected.column->getName())\n+        const IColumn * actual_column = actual.column.get();\n+\n+        /// If we allow to remove constants, and expected column is not const, then unwrap actual constant column.\n+        if (allow_remove_constants && !isColumnConst(*expected.column))\n+        {\n+            if (const auto * column_const = typeid_cast<const ColumnConst *>(actual_column))\n+                actual_column = &column_const->getDataColumn();\n+        }\n+\n+        if (actual_column->getName() != expected.column->getName())\n             return on_error(\"Block structure mismatch in \" + context_description + \" stream: different columns:\\n\"\n                 + lhs.dumpStructure() + \"\\n\" + rhs.dumpStructure(), ErrorCodes::LOGICAL_ERROR);\n \n@@ -537,13 +546,25 @@ static ReturnType checkBlockStructure(const Block & lhs, const Block & rhs, cons\n \n bool blocksHaveEqualStructure(const Block & lhs, const Block & rhs)\n {\n-    return checkBlockStructure<bool>(lhs, rhs, {});\n+    return checkBlockStructure<bool>(lhs, rhs, {}, false);\n }\n \n \n void assertBlocksHaveEqualStructure(const Block & lhs, const Block & rhs, const std::string & context_description)\n {\n-    checkBlockStructure<void>(lhs, rhs, context_description);\n+    checkBlockStructure<void>(lhs, rhs, context_description, false);\n+}\n+\n+\n+bool isCompatibleHeader(const Block & actual, const Block & desired)\n+{\n+    return checkBlockStructure<bool>(actual, desired, {}, true);\n+}\n+\n+\n+void assertCompatibleHeader(const Block & actual, const Block & desired, const std::string & context_description)\n+{\n+    checkBlockStructure<void>(actual, desired, context_description, true);\n }\n \n \ndiff --git a/src/Core/Block.h b/src/Core/Block.h\nindex 0cfd17b27dc7..6a94034b8fdc 100644\n--- a/src/Core/Block.h\n+++ b/src/Core/Block.h\n@@ -184,6 +184,12 @@ bool blocksHaveEqualStructure(const Block & lhs, const Block & rhs);\n /// Throw exception when blocks are different.\n void assertBlocksHaveEqualStructure(const Block & lhs, const Block & rhs, const std::string & context_description);\n \n+/// Actual header is compatible to desired if block have equal structure except constants.\n+/// It is allowed when column from actual header is constant, but in desired is not.\n+/// If both columns are constant, it is checked that they have the same value.\n+bool isCompatibleHeader(const Block & actual, const Block & desired);\n+void assertCompatibleHeader(const Block & actual, const Block & desired, const std::string & context_description);\n+\n /// Calculate difference in structure of blocks and write description into output strings. NOTE It doesn't compare values of constant columns.\n void getBlocksDifference(const Block & lhs, const Block & rhs, std::string & out_lhs_diff, std::string & out_rhs_diff);\n \ndiff --git a/src/Processors/Pipe.cpp b/src/Processors/Pipe.cpp\nindex 677956db299a..044975448ad4 100644\n--- a/src/Processors/Pipe.cpp\n+++ b/src/Processors/Pipe.cpp\n@@ -8,6 +8,7 @@\n #include <Processors/Transforms/ExtremesTransform.h>\n #include <Processors/Formats/IOutputFormat.h>\n #include <Processors/Sources/NullSource.h>\n+#include <Columns/ColumnConst.h>\n \n namespace DB\n {\n@@ -250,6 +251,47 @@ static Pipes removeEmptyPipes(Pipes pipes)\n     return res;\n }\n \n+/// Calculate common header for pipes.\n+/// This function is needed only to remove ColumnConst from common header in case if some columns are const, and some not.\n+/// E.g. if the first header is `x, const y, const z` and the second is `const x, y, const z`, the common header will be `x, y, const z`.\n+static Block getCommonHeader(const Pipes & pipes)\n+{\n+    Block res;\n+\n+    for (const auto & pipe : pipes)\n+    {\n+        if (const auto & header = pipe.getHeader())\n+        {\n+            res = header;\n+            break;\n+        }\n+    }\n+\n+    for (const auto & pipe : pipes)\n+    {\n+        const auto & header = pipe.getHeader();\n+        for (size_t i = 0; i < res.columns(); ++i)\n+        {\n+            /// We do not check that headers are compatible here. Will do it later.\n+\n+            if (i >= header.columns())\n+                break;\n+\n+            auto & common = res.getByPosition(i).column;\n+            const auto & cur = header.getByPosition(i).column;\n+\n+            /// Only remove const from common header if it is not const for current pipe.\n+            if (cur && common && !isColumnConst(*cur))\n+            {\n+                if (const auto * column_const = typeid_cast<const ColumnConst *>(common.get()))\n+                    common = column_const->getDataColumnPtr();\n+            }\n+        }\n+    }\n+\n+    return res;\n+}\n+\n Pipe Pipe::unitePipes(Pipes pipes)\n {\n     return Pipe::unitePipes(std::move(pipes), nullptr, false);\n@@ -276,23 +318,12 @@ Pipe Pipe::unitePipes(Pipes pipes, Processors * collected_processors, bool allow\n     OutputPortRawPtrs totals;\n     OutputPortRawPtrs extremes;\n     res.collected_processors = collected_processors;\n-    res.header = pipes.front().header;\n-    if (allow_empty_header && !res.header)\n-    {\n-        for (const auto & pipe : pipes)\n-        {\n-            if (const auto & header = pipe.getHeader())\n-            {\n-                res.header = header;\n-                break;\n-            }\n-        }\n-    }\n+    res.header = getCommonHeader(pipes);\n \n     for (auto & pipe : pipes)\n     {\n         if (!allow_empty_header || pipe.header)\n-            assertBlocksHaveEqualStructure(res.header, pipe.header, \"Pipe::unitePipes\");\n+            assertCompatibleHeader(pipe.header, res.header, \"Pipe::unitePipes\");\n \n         res.processors.insert(res.processors.end(), pipe.processors.begin(), pipe.processors.end());\n         res.output_ports.insert(res.output_ports.end(), pipe.output_ports.begin(), pipe.output_ports.end());\ndiff --git a/src/Processors/Port.cpp b/src/Processors/Port.cpp\nindex 7e7ccb1adad1..0a6026b27f2e 100644\n--- a/src/Processors/Port.cpp\n+++ b/src/Processors/Port.cpp\n@@ -16,7 +16,7 @@ void connect(OutputPort & output, InputPort & input)\n     auto out_name = output.getProcessor().getName();\n     auto in_name = input.getProcessor().getName();\n \n-    assertBlocksHaveEqualStructure(input.getHeader(), output.getHeader(), \" function connect between \" + out_name + \" and \" + in_name);\n+    assertCompatibleHeader(output.getHeader(), input.getHeader(), \" function connect between \" + out_name + \" and \" + in_name);\n \n     input.output_port = &output;\n     output.input_port = &input;\ndiff --git a/src/Processors/QueryPipeline.cpp b/src/Processors/QueryPipeline.cpp\nindex cabf5f19190a..1b803ec08860 100644\n--- a/src/Processors/QueryPipeline.cpp\n+++ b/src/Processors/QueryPipeline.cpp\n@@ -232,8 +232,6 @@ QueryPipeline QueryPipeline::unitePipelines(\n         pipeline.checkInitialized();\n         pipeline.pipe.collected_processors = collected_processors;\n \n-        assertBlocksHaveEqualStructure(pipeline.getHeader(), common_header, \"QueryPipeline::unitePipelines\");\n-\n         pipes.emplace_back(std::move(pipeline.pipe));\n \n         max_threads += pipeline.max_threads;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01822_union_and_constans_error.reference b/tests/queries/0_stateless/01822_union_and_constans_error.reference\nnew file mode 100644\nindex 000000000000..d00491fd7e5b\n--- /dev/null\n+++ b/tests/queries/0_stateless/01822_union_and_constans_error.reference\n@@ -0,0 +1,1 @@\n+1\ndiff --git a/tests/queries/0_stateless/01822_union_and_constans_error.sql b/tests/queries/0_stateless/01822_union_and_constans_error.sql\nnew file mode 100644\nindex 000000000000..38b7df700cd9\n--- /dev/null\n+++ b/tests/queries/0_stateless/01822_union_and_constans_error.sql\n@@ -0,0 +1,20 @@\n+drop table if exists t0;\n+CREATE TABLE t0 (c0 String) ENGINE = Log();\n+\n+SELECT isNull(t0.c0) OR COUNT('\\n?pVa')\n+FROM t0\n+GROUP BY t0.c0\n+HAVING isNull(t0.c0)\n+UNION ALL\n+SELECT isNull(t0.c0) OR COUNT('\\n?pVa')\n+FROM t0\n+GROUP BY t0.c0\n+HAVING NOT isNull(t0.c0)\n+UNION ALL\n+SELECT isNull(t0.c0) OR COUNT('\\n?pVa')\n+FROM t0\n+GROUP BY t0.c0\n+HAVING isNull(isNull(t0.c0))\n+SETTINGS aggregate_functions_null_for_empty = 1, enable_optimize_predicate_expression = 0;\n+\n+drop table if exists t0;\n",
  "problem_statement": "Logical error: Block structure mismatch in QueryPipeline::unitePipelines stream: different columns\n\r\n**Describe the bug**\r\nTLPHaving of Sqlancer test\r\n\r\n- log [link](https://clickhouse-test-reports.s3.yandex.net/22706/520f4f39eccfcc16491fbc58d9cb44856deb5f53/sqlancer_test/TLPHaving.err)\r\n```\r\n+ java -jar target/sqlancer-1.1.0.jar --num-threads 10 --timeout-seconds 300 --num-queries 1000 --username default --password '' clickhouse --oracle TLPHaving\r\n+ tee /test_output/TLPHaving.out\r\njava.lang.AssertionError: SELECT MAX(((t0.c0)=(t0.c0))), (MIN(t0.c0)) and ((- (COUNT((t0.c0) OR (t0.c0))))), t0.c0, (- (t0.c0)), MIN(t0.c0) FROM t0 GROUP BY t0.c0 HAVING MAX(((t0.c0)>(''))) UNION ALL SELECT MAX(((t0.c0)==(t0.c0))), (MIN(t0.c0)) and ((- (COUNT((t0.c0) OR (t0.c0))))), t0.c0, (- (t0.c0)), MIN(t0.c0) FROM t0 GROUP BY t0.c0 HAVING (NOT (MAX(((t0.c0)>(''))))) UNION ALL SELECT MAX(((t0.c0)=(t0.c0))), (MIN(t0.c0)) and ((- (COUNT((t0.c0) OR (t0.c0))))), t0.c0, (- (t0.c0)), MIN(t0.c0) FROM t0 GROUP BY t0.c0 HAVING ((MAX(((t0.c0)>('')))) IS NULL) SETTINGS aggregate_functions_null_for_empty=1, enable_optimize_predicate_expression=0;\r\n\tat sqlancer.common.query.SQLQueryAdapter.checkException(SQLQueryAdapter.java:100)\r\n\tat sqlancer.common.query.SQLQueryAdapter.executeAndGet(SQLQueryAdapter.java:131)\r\n\tat sqlancer.ComparatorHelper.getResultSetFirstColumnAsString(ComparatorHelper.java:54)\r\n\tat sqlancer.clickhouse.oracle.tlp.ClickHouseTLPHavingOracle.check(ClickHouseTLPHavingOracle.java:66)\r\n\tat sqlancer.ProviderAdapter.generateAndTestDatabase(ProviderAdapter.java:49)\r\n\tat sqlancer.Main$DBMSExecutor.run(Main.java:323)\r\n\tat sqlancer.Main$2.run(Main.java:507)\r\n\tat sqlancer.Main$2.runThread(Main.java:485)\r\n\tat sqlancer.Main$2.run(Main.java:475)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)\r\n\tat java.base/java.lang.Thread.run(Thread.java:832)\r\nCaused by: ru.yandex.clickhouse.except.ClickHouseUnknownException: ClickHouse exception, code: 1002, host: localhost, port: 8123; localhost:8123 failed to respond\r\n\tat ru.yandex.clickhouse.except.ClickHouseExceptionSpecifier.getException(ClickHouseExceptionSpecifier.java:91)\r\n\tat ru.yandex.clickhouse.except.ClickHouseExceptionSpecifier.specify(ClickHouseExceptionSpecifier.java:55)\r\n\tat ru.yandex.clickhouse.except.ClickHouseExceptionSpecifier.specify(ClickHouseExceptionSpecifier.java:24)\r\n\tat ru.yandex.clickhouse.ClickHouseStatementImpl.getInputStream(ClickHouseStatementImpl.java:633)\r\n\tat ru.yandex.clickhouse.ClickHouseStatementImpl.executeQuery(ClickHouseStatementImpl.java:117)\r\n\tat ru.yandex.clickhouse.ClickHouseStatementImpl.executeQuery(ClickHouseStatementImpl.java:100)\r\n\tat ru.yandex.clickhouse.ClickHouseStatementImpl.executeQuery(ClickHouseStatementImpl.java:95)\r\n\tat ru.yandex.clickhouse.ClickHouseStatementImpl.executeQuery(ClickHouseStatementImpl.java:90)\r\n\tat sqlancer.common.query.SQLQueryAdapter.executeAndGet(SQLQueryAdapter.java:121)\r\n\t... 10 more\r\nCaused by: org.apache.http.NoHttpResponseException: localhost:8123 failed to respond\r\n\tat org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:141)\r\n\tat org.apache.http.impl.conn.DefaultHttpResponseParser.parseHead(DefaultHttpResponseParser.java:56)\r\n\tat org.apache.http.impl.io.AbstractMessageParser.parse(AbstractMessageParser.java:259)\r\n\tat org.apache.http.impl.DefaultBHttpClientConnection.receiveResponseHeader(DefaultBHttpClientConnection.java:163)\r\n\tat org.apache.http.impl.conn.CPoolProxy.receiveResponseHeader(CPoolProxy.java:157)\r\n\tat org.apache.http.protocol.HttpRequestExecutor.doReceiveResponse(HttpRequestExecutor.java:273)\r\n\tat org.apache.http.protocol.HttpRequestExecutor.execute(HttpRequestExecutor.java:125)\r\n\tat org.apache.http.impl.execchain.MainClientExec.execute(MainClientExec.java:272)\r\n\tat org.apache.http.impl.execchain.ProtocolExec.execute(ProtocolExec.java:186)\r\n\tat org.apache.http.impl.execchain.RetryExec.execute(RetryExec.java:89)\r\n\tat org.apache.http.impl.client.InternalHttpClient.doExecute(InternalHttpClient.java:185)\r\n\tat org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:83)\r\n\tat org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:108)\r\n\tat ru.yandex.clickhouse.ClickHouseStatementImpl.getInputStream(ClickHouseStatementImpl.java:614)\r\n\t... 15 more\r\n```\n",
  "hints_text": "```\r\navtokmakov-dev.sas.yp-c.yandex.net :) CREATE TABLE t0 (c0 String) ENGINE = Log() ;\r\n\r\navtokmakov-dev.sas.yp-c.yandex.net :) INSERT INTO t0(c0) VALUES ('ug9'), ('Lc\\\\.'), ('l.\r\n:-] P'), ('wz>\r\n:-] am');\r\n\r\navtokmakov-dev.sas.yp-c.yandex.net :) INSERT INTO t0(c0) VALUES ('AN'), ('');\r\n\r\navtokmakov-dev.sas.yp-c.yandex.net :) INSERT INTO t0(c0) VALUES ('?E2?>?'), ('uHCK');\r\n\r\navtokmakov-dev.sas.yp-c.yandex.net :) INSERT INTO t0(c0) VALUES (''), (''), ('^');\r\n\r\navtokmakov-dev.sas.yp-c.yandex.net :) INSERT INTO t0(c0) VALUES (''), ('E'), ('/9');\r\n\r\navtokmakov-dev.sas.yp-c.yandex.net :) INSERT INTO t0(c0) VALUES ('(|P)T'), ('1070269151'), (']|n'), ('J^');\r\n\r\navtokmakov-dev.sas.yp-c.yandex.net :) SELECT (((t0.c0) IS NULL)) or (COUNT('\r\n:-] ?pVa')) FROM t0 GROUP BY t0.c0 HAVING ((t0.c0) IS NULL) UNION ALL SELECT (((t0.c0) IS NULL)) or (COUNT('\r\n:-] ?pVa')) FROM t0 GROUP BY t0.c0 HAVING (NOT (((t0.c0) IS NULL))) UNION ALL SELECT (((t0.c0) IS NULL)) or (COUNT('\r\n:-] ?pVa')) FROM t0 GROUP BY t0.c0 HAVING ((((t0.c0) IS NULL)) IS NULL) SETTINGS aggregate_functions_null_for_empty=1, enable_optimize_predicate_expression=0;\r\n\r\nSELECT isNull(t0.c0) OR COUNT('\\n?pVa')\r\nFROM t0\r\nGROUP BY t0.c0\r\nHAVING isNull(t0.c0)\r\nUNION ALL\r\nSELECT isNull(t0.c0) OR COUNT('\\n?pVa')\r\nFROM t0\r\nGROUP BY t0.c0\r\nHAVING NOT isNull(t0.c0)\r\nUNION ALL\r\nSELECT isNull(t0.c0) OR COUNT('\\n?pVa')\r\nFROM t0\r\nGROUP BY t0.c0\r\nHAVING isNull(isNull(t0.c0))\r\nSETTINGS aggregate_functions_null_for_empty = 1, enable_optimize_predicate_expression = 0\r\n\r\nQuery id: 4f592dae-b34d-4fbf-aa63-c55b3236a2a9\r\n\r\n[avtokmakov-dev.sas.yp-c.yandex.net] 2021.04.13 13:23:18.183516 [ 13687 ] {4f592dae-b34d-4fbf-aa63-c55b3236a2a9} <Fatal> : Logical error: 'Block structure mismatch in QueryPipeline::unitePipelines stream: different columns:\r\nor(isNull(c0), count()) UInt8 UInt8(size = 0)\r\nor(isNull(c0), count()) UInt8 Const(size = 0, UInt8(size = 1))'.\r\n[avtokmakov-dev.sas.yp-c.yandex.net] 2021.04.13 13:23:18.185263 [ 25763 ] <Fatal> BaseDaemon: ########################################\r\n[avtokmakov-dev.sas.yp-c.yandex.net] 2021.04.13 13:23:18.185739 [ 25763 ] <Fatal> BaseDaemon: (version 21.5.1.1, build id: 5B9CF526898862D8F41F6361F658AAEDA279D1A2) (from thread 13687) (query_id: 4f592dae-b34d-4fbf-aa63-c55b3236a2a9) Received signal Aborted (6)\r\n[avtokmakov-dev.sas.yp-c.yandex.net] 2021.04.13 13:23:18.186145 [ 25763 ] <Fatal> BaseDaemon: \r\n[avtokmakov-dev.sas.yp-c.yandex.net] 2021.04.13 13:23:18.186551 [ 25763 ] <Fatal> BaseDaemon: Stack trace: 0x7f66d8ce518b 0x7f66d8cc4859 0x93ad1c6 0x93ad2d5 0x121741a9 0x121717d6 0x12170f35 0x130440df 0x1327b527 0x13268056 0x126d8295 0x1282e1f9 0x1282c385 0x12fd14bd 0x12fddcd8 0x1752b9bc 0x1752c1c0 0x17657723 0x1765459d 0x17653428 0x7f66d8e9a609 0x7f66d8dc1103\r\n[avtokmakov-dev.sas.yp-c.yandex.net] 2021.04.13 13:23:18.188568 [ 25763 ] <Fatal> BaseDaemon: 4. /build/glibc-YYA7BZ/glibc-2.31/signal/../sysdeps/unix/sysv/linux/raise.c:51: __GI_raise @ 0x4618b in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n[avtokmakov-dev.sas.yp-c.yandex.net] 2021.04.13 13:23:18.194091 [ 25763 ] <Fatal> BaseDaemon: 5. /build/glibc-YYA7BZ/glibc-2.31/stdlib/abort.c:81: __GI_abort @ 0x25859 in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n[avtokmakov-dev.sas.yp-c.yandex.net] 2021.04.13 13:23:18.338867 [ 25763 ] <Fatal> BaseDaemon: 6. /home/avtokmakov/ch/ClickHouse/build_debug/../src/Common/Exception.cpp:51: DB::handle_error_code(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool, std::__1::vector<void*, std::__1::allocator<void*> > const&) @ 0x93ad1c6 in /home/avtokmakov/ch/ClickHouse/build_debug/programs/clickhouse\r\n[avtokmakov-dev.sas.yp-c.yandex.net] 2021.04.13 13:23:18.466578 [ 25763 ] <Fatal> BaseDaemon: 7. /home/avtokmakov/ch/ClickHouse/build_debug/../src/Common/Exception.cpp:58: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0x93ad2d5 in /home/avtokmakov/ch/ClickHouse/build_debug/programs/clickhouse\r\n[avtokmakov-dev.sas.yp-c.yandex.net] 2021.04.13 13:23:18.638498 [ 25763 ] <Fatal> BaseDaemon: 8. /home/avtokmakov/ch/ClickHouse/build_debug/../src/Core/Block.cpp:492: void DB::checkBlockStructure<void>(DB::Block const&, DB::Block const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)::'lambda'(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int)::operator()(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) const @ 0x121741a9 in /home/avtokmakov/ch/ClickHouse/build_debug/programs/clickhouse\r\n[avtokmakov-dev.sas.yp-c.yandex.net] 2021.04.13 13:23:18.810436 [ 25763 ] <Fatal> BaseDaemon: 9. /home/avtokmakov/ch/ClickHouse/build_debug/../src/Core/Block.cpp:519: void DB::checkBlockStructure<void>(DB::Block const&, DB::Block const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) @ 0x121717d6 in /home/avtokmakov/ch/ClickHouse/build_debug/programs/clickhouse\r\n[avtokmakov-dev.sas.yp-c.yandex.net] 2021.04.13 13:23:18.982957 [ 25763 ] <Fatal> BaseDaemon: 10. /home/avtokmakov/ch/ClickHouse/build_debug/../src/Core/Block.cpp:547: DB::assertBlocksHaveEqualStructure(DB::Block const&, DB::Block const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) @ 0x12170f35 in /home/avtokmakov/ch/ClickHouse/build_debug/programs/clickhouse\r\n[avtokmakov-dev.sas.yp-c.yandex.net] 2021.04.13 13:23:19.429758 [ 25763 ] <Fatal> BaseDaemon: 11. /home/avtokmakov/ch/ClickHouse/build_debug/../src/Processors/QueryPipeline.cpp:235: DB::QueryPipeline::unitePipelines(std::__1::vector<std::__1::unique_ptr<DB::QueryPipeline, std::__1::default_delete<DB::QueryPipeline> >, std::__1::allocator<std::__1::unique_ptr<DB::QueryPipeline, std::__1::default_delete<DB::QueryPipeline> > > >, unsigned long, std::__1::vector<std::__1::shared_ptr<DB::IProcessor>, std::__1::allocator<std::__1::shared_ptr<DB::IProcessor> > >*) @ 0x130440df in /home/avtokmakov/ch/ClickHouse/build_debug/programs/clickhouse\r\n[avtokmakov-dev.sas.yp-c.yandex.net] 2021.04.13 13:23:19.637869 [ 25763 ] <Fatal> BaseDaemon: 12. /home/avtokmakov/ch/ClickHouse/build_debug/../src/Processors/QueryPlan/UnionStep.cpp:50: DB::UnionStep::updatePipeline(std::__1::vector<std::__1::unique_ptr<DB::QueryPipeline, std::__1::default_delete<DB::QueryPipeline> >, std::__1::allocator<std::__1::unique_ptr<DB::QueryPipeline, std::__1::default_delete<DB::QueryPipeline> > > >, DB::BuildQueryPipelineSettings const&) @ 0x1327b527 in /home/avtokmakov/ch/ClickHouse/build_debug/programs/clickhouse\r\n[avtokmakov-dev.sas.yp-c.yandex.net] 2021.04.13 13:23:19.841444 [ 25763 ] <Fatal> BaseDaemon: 13. /home/avtokmakov/ch/ClickHouse/build_debug/../src/Processors/QueryPlan/QueryPlan.cpp:167: DB::QueryPlan::buildQueryPipeline(DB::QueryPlanOptimizationSettings const&, DB::BuildQueryPipelineSettings const&) @ 0x13268056 in /home/avtokmakov/ch/ClickHouse/build_debug/programs/clickhouse\r\n[avtokmakov-dev.sas.yp-c.yandex.net] 2021.04.13 13:23:20.318320 [ 25763 ] <Fatal> BaseDaemon: 14. /home/avtokmakov/ch/ClickHouse/build_debug/../src/Interpreters/InterpreterSelectWithUnionQuery.cpp:313: DB::InterpreterSelectWithUnionQuery::execute() @ 0x126d8295 in /home/avtokmakov/ch/ClickHouse/build_debug/programs/clickhouse\r\n[avtokmakov-dev.sas.yp-c.yandex.net] 2021.04.13 13:23:20.934417 [ 25763 ] <Fatal> BaseDaemon: 15. /home/avtokmakov/ch/ClickHouse/build_debug/../src/Interpreters/executeQuery.cpp:561: DB::executeQueryImpl(char const*, char const*, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, bool, DB::ReadBuffer*) @ 0x1282e1f9 in /home/avtokmakov/ch/ClickHouse/build_debug/programs/clickhouse\r\n[avtokmakov-dev.sas.yp-c.yandex.net] 2021.04.13 13:23:21.590522 [ 25763 ] <Fatal> BaseDaemon: 16. /home/avtokmakov/ch/ClickHouse/build_debug/../src/Interpreters/executeQuery.cpp:919: DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, bool) @ 0x1282c385 in /home/avtokmakov/ch/ClickHouse/build_debug/programs/clickhouse\r\n[avtokmakov-dev.sas.yp-c.yandex.net] 2021.04.13 13:23:22.244622 [ 25763 ] <Fatal> BaseDaemon: 17. /home/avtokmakov/ch/ClickHouse/build_debug/../src/Server/TCPHandler.cpp:290: DB::TCPHandler::runImpl() @ 0x12fd14bd in /home/avtokmakov/ch/ClickHouse/build_debug/programs/clickhouse\r\n[avtokmakov-dev.sas.yp-c.yandex.net] 2021.04.13 13:23:22.944027 [ 25763 ] <Fatal> BaseDaemon: 18. /home/avtokmakov/ch/ClickHouse/build_debug/../src/Server/TCPHandler.cpp:1548: DB::TCPHandler::run() @ 0x12fddcd8 in /home/avtokmakov/ch/ClickHouse/build_debug/programs/clickhouse\r\n[avtokmakov-dev.sas.yp-c.yandex.net] 2021.04.13 13:23:22.999468 [ 25763 ] <Fatal> BaseDaemon: 19. /home/avtokmakov/ch/ClickHouse/build_debug/../contrib/poco/Net/src/TCPServerConnection.cpp:43: Poco::Net::TCPServerConnection::start() @ 0x1752b9bc in /home/avtokmakov/ch/ClickHouse/build_debug/programs/clickhouse\r\n[avtokmakov-dev.sas.yp-c.yandex.net] 2021.04.13 13:23:23.094685 [ 25763 ] <Fatal> BaseDaemon: 20. /home/avtokmakov/ch/ClickHouse/build_debug/../contrib/poco/Net/src/TCPServerDispatcher.cpp:113: Poco::Net::TCPServerDispatcher::run() @ 0x1752c1c0 in /home/avtokmakov/ch/ClickHouse/build_debug/programs/clickhouse\r\n[avtokmakov-dev.sas.yp-c.yandex.net] 2021.04.13 13:23:23.177874 [ 25763 ] <Fatal> BaseDaemon: 21. /home/avtokmakov/ch/ClickHouse/build_debug/../contrib/poco/Foundation/src/ThreadPool.cpp:199: Poco::PooledThread::run() @ 0x17657723 in /home/avtokmakov/ch/ClickHouse/build_debug/programs/clickhouse\r\n[avtokmakov-dev.sas.yp-c.yandex.net] 2021.04.13 13:23:23.254929 [ 25763 ] <Fatal> BaseDaemon: 22. /home/avtokmakov/ch/ClickHouse/build_debug/../contrib/poco/Foundation/src/Thread.cpp:56: Poco::(anonymous namespace)::RunnableHolder::run() @ 0x1765459d in /home/avtokmakov/ch/ClickHouse/build_debug/programs/clickhouse\r\n[avtokmakov-dev.sas.yp-c.yandex.net] 2021.04.13 13:23:23.331178 [ 25763 ] <Fatal> BaseDaemon: 23. /home/avtokmakov/ch/ClickHouse/build_debug/../contrib/poco/Foundation/src/Thread_POSIX.cpp:345: Poco::ThreadImpl::runnableEntry(void*) @ 0x17653428 in /home/avtokmakov/ch/ClickHouse/build_debug/programs/clickhouse\r\n[avtokmakov-dev.sas.yp-c.yandex.net] 2021.04.13 13:23:23.331888 [ 25763 ] <Fatal> BaseDaemon: 24. start_thread @ 0x9609 in /lib/x86_64-linux-gnu/libpthread-2.31.so\r\n[avtokmakov-dev.sas.yp-c.yandex.net] 2021.04.13 13:23:23.332750 [ 25763 ] <Fatal> BaseDaemon: 25. /build/glibc-YYA7BZ/glibc-2.31/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:97: __clone @ 0x122103 in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n[avtokmakov-dev.sas.yp-c.yandex.net] 2021.04.13 13:23:25.608526 [ 25763 ] <Fatal> BaseDaemon: Calculated checksum of the binary: D0ADF264983999AAA2CBE553CF87E911. There is no information about the reference checksum.\r\n\r\n```\nSame there https://clickhouse-test-reports.s3.yandex.net/23021/445591b73e45f7fdaf1737aba89dbfb894ca4098/sqlancer_test.html#fail1\n```\r\nCREATE TEMPORARY TABLE t (c String);\r\n\r\nSELECT isNull(c) OR COUNT(1)\r\nFROM t\r\nGROUP BY c\r\nHAVING isNull(c)\r\nUNION ALL\r\nSELECT isNull(c) OR COUNT(1)\r\nFROM t\r\nGROUP BY c\r\nHAVING isNull(isNull(c))\r\nSETTINGS enable_optimize_predicate_expression = 0\r\n```\n```\r\nSELECT isNull(c) OR COUNT(1) AS x\u3000FROM t\u3000GROUP BY c\u3000HAVING isNull(c)\r\nUNION ALL\u3000SELECT 0\u3000SETTINGS enable_optimize_predicate_expression = 0\r\n```",
  "created_at": "2021-04-21T07:53:31Z"
}