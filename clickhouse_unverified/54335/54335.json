{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 54335,
  "instance_id": "ClickHouse__ClickHouse-54335",
  "issue_numbers": [
    "53417"
  ],
  "base_commit": "de59c52a51e9743ca0f01057955416d737a13b0a",
  "patch": "diff --git a/docs/en/operations/system-tables/query_log.md b/docs/en/operations/system-tables/query_log.md\nindex 7143520835f3..ced971667021 100644\n--- a/docs/en/operations/system-tables/query_log.md\n+++ b/docs/en/operations/system-tables/query_log.md\n@@ -101,7 +101,8 @@ Columns:\n - `ProfileEvents` ([Map(String, UInt64)](../../sql-reference/data-types/map.md)) \u2014 ProfileEvents that measure different metrics. The description of them could be found in the table [system.events](../../operations/system-tables/events.md#system_tables-events)\n - `Settings` ([Map(String, String)](../../sql-reference/data-types/map.md)) \u2014 Settings that were changed when the client ran the query. To enable logging changes to settings, set the `log_query_settings` parameter to 1.\n - `log_comment` ([String](../../sql-reference/data-types/string.md)) \u2014 Log comment. It can be set to arbitrary string no longer than [max_query_size](../../operations/settings/settings.md#settings-max_query_size). An empty string if it is not defined.\n-- `thread_ids` ([Array(UInt64)](../../sql-reference/data-types/array.md)) \u2014 Thread ids that are participating in query execution.\n+- `thread_ids` ([Array(UInt64)](../../sql-reference/data-types/array.md)) \u2014 Thread ids that are participating in query execution. These threads may not have run simultaneously.\n+- `peak_threads_usage` ([UInt64)](../../sql-reference/data-types/int-uint.md)) \u2014 Maximum count of simultaneous threads executing the query.\n - `used_aggregate_functions` ([Array(String)](../../sql-reference/data-types/array.md)) \u2014 Canonical names of `aggregate functions`, which were used during query execution.\n - `used_aggregate_function_combinators` ([Array(String)](../../sql-reference/data-types/array.md)) \u2014 Canonical names of `aggregate functions combinators`, which were used during query execution.\n - `used_database_engines` ([Array(String)](../../sql-reference/data-types/array.md)) \u2014 Canonical names of `database engines`, which were used during query execution.\ndiff --git a/docs/ru/operations/system-tables/query_log.md b/docs/ru/operations/system-tables/query_log.md\nindex 29793188d3db..8d79aa0eef70 100644\n--- a/docs/ru/operations/system-tables/query_log.md\n+++ b/docs/ru/operations/system-tables/query_log.md\n@@ -99,7 +99,8 @@ ClickHouse \u043d\u0435 \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\n -   `ProfileEvents` ([Map(String, UInt64)](../../sql-reference/data-types/array.md)) \u2014 \u0441\u0447\u0435\u0442\u0447\u0438\u043a\u0438 \u0434\u043b\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b [system.events](#system_tables-events)(#system_tables-events\n -   `Settings` ([Map(String, String)](../../sql-reference/data-types/array.md)) \u2014 \u0438\u043c\u0435\u043d\u0430 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f, \u043a\u043e\u0433\u0434\u0430 \u043a\u043b\u0438\u0435\u043d\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441. \u0427\u0442\u043e\u0431\u044b \u0440\u0430\u0437\u0440\u0435\u0448\u0438\u0442\u044c \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 `log_query_settings` \u0440\u0430\u0432\u043d\u044b\u043c 1.\n -   `log_comment` ([String](../../sql-reference/data-types/string.md)) \u2014 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u043a \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u043b\u043e\u0433\u0435. \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443, \u0434\u043b\u0438\u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u043d\u0435 \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c [max_query_size](../../operations/settings/settings.md#settings-max_query_size). \u0415\u0441\u043b\u0438 \u043d\u0435\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0442\u043e \u043f\u0443\u0441\u0442\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430.\n--   `thread_ids` ([Array(UInt64)](../../sql-reference/data-types/array.md)) \u2014 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b \u043f\u043e\u0442\u043e\u043a\u043e\u0432, \u0443\u0447\u0430\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.\n+-   `thread_ids` ([Array(UInt64)](../../sql-reference/data-types/array.md)) \u2014 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b \u043f\u043e\u0442\u043e\u043a\u043e\u0432, \u0443\u0447\u0430\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u044d\u0442\u0438 \u043f\u043e\u0442\u043e\u043a\u0438 \u043d\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e.\n+- `peak_threads_usage` ([UInt64)](../../sql-reference/data-types/int-uint.md)) \u2014 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0432\u0448\u0438\u0445 \u043f\u043e\u0442\u043e\u043a\u043e\u0432, \u0443\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u0448\u0438\u0445 \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430.\n -   `used_aggregate_functions` ([Array(String)](../../sql-reference/data-types/array.md)) \u2014 \u043a\u0430\u043d\u043e\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0438\u043c\u0435\u043d\u0430 `\u0430\u0433\u0440\u0435\u0433\u0430\u0442\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439`, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430.\n -   `used_aggregate_function_combinators` ([Array(String)](../../sql-reference/data-types/array.md)) \u2014 \u043a\u0430\u043d\u043e\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0438\u043c\u0435\u043d\u0430 `\u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0442\u043e\u0440\u043e\u0432 \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439`, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430.\n -   `used_database_engines` ([Array(String)](../../sql-reference/data-types/array.md)) \u2014 \u043a\u0430\u043d\u043e\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0438\u043c\u0435\u043d\u0430 `\u0434\u0432\u0438\u0436\u043a\u043e\u0432 \u0431\u0430\u0437 \u0434\u0430\u043d\u043d\u044b\u0445`, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430.\ndiff --git a/src/Common/ConcurrencyControl.cpp b/src/Common/ConcurrencyControl.cpp\nindex de46f0e90cab..c9fe51550dcb 100644\n--- a/src/Common/ConcurrencyControl.cpp\n+++ b/src/Common/ConcurrencyControl.cpp\n@@ -57,7 +57,7 @@ ConcurrencyControl::Allocation::Allocation(ConcurrencyControl & parent_, SlotCou\n         *waiter = this;\n }\n \n-// Grant single slot to allocation, returns true iff more slot(s) are required\n+// Grant single slot to allocation returns true iff more slot(s) are required\n bool ConcurrencyControl::Allocation::grant()\n {\n     std::unique_lock lock{mutex};\ndiff --git a/src/Common/ThreadStatus.h b/src/Common/ThreadStatus.h\nindex 7c8dbdb68bdf..970bb5cd6e60 100644\n--- a/src/Common/ThreadStatus.h\n+++ b/src/Common/ThreadStatus.h\n@@ -107,15 +107,25 @@ class ThreadGroup\n     static ThreadGroupPtr createForBackgroundProcess(ContextPtr storage_context);\n \n     std::vector<UInt64> getInvolvedThreadIds() const;\n-    void linkThread(UInt64 thread_it);\n+    size_t getPeakThreadsUsage() const;\n+\n+    void linkThread(UInt64 thread_id);\n+    void unlinkThread();\n \n private:\n     mutable std::mutex mutex;\n \n     /// Set up at creation, no race when reading\n-    SharedData shared_data;\n+    SharedData shared_data TSA_GUARDED_BY(mutex);\n+\n     /// Set of all thread ids which has been attached to the group\n-    std::unordered_set<UInt64> thread_ids;\n+    std::unordered_set<UInt64> thread_ids TSA_GUARDED_BY(mutex);\n+\n+    /// Count of simultaneously working threads\n+    size_t active_thread_count TSA_GUARDED_BY(mutex) = 0;\n+\n+    /// Peak threads count in the group\n+    size_t peak_threads_usage TSA_GUARDED_BY(mutex) = 0;\n };\n \n /**\ndiff --git a/src/Interpreters/ProcessList.cpp b/src/Interpreters/ProcessList.cpp\nindex c299572ef41d..8572470abc1f 100644\n--- a/src/Interpreters/ProcessList.cpp\n+++ b/src/Interpreters/ProcessList.cpp\n@@ -590,8 +590,10 @@ QueryStatusInfo QueryStatus::getInfo(bool get_thread_list, bool get_profile_even\n         res.peak_memory_usage = thread_group->memory_tracker.getPeak();\n \n         if (get_thread_list)\n+        {\n             res.thread_ids = thread_group->getInvolvedThreadIds();\n-\n+            res.peak_threads_usage = thread_group->getPeakThreadsUsage();\n+        }\n         if (get_profile_events)\n             res.profile_counters = std::make_shared<ProfileEvents::Counters::Snapshot>(thread_group->performance_counters.getPartiallyAtomicSnapshot());\n     }\ndiff --git a/src/Interpreters/ProcessList.h b/src/Interpreters/ProcessList.h\nindex 2eea49e1267b..75a0eaa34bce 100644\n--- a/src/Interpreters/ProcessList.h\n+++ b/src/Interpreters/ProcessList.h\n@@ -67,6 +67,7 @@ struct QueryStatusInfo\n \n     /// Optional fields, filled by query\n     std::vector<UInt64> thread_ids;\n+    size_t peak_threads_usage;\n     std::shared_ptr<ProfileEvents::Counters::Snapshot> profile_counters;\n     std::shared_ptr<Settings> query_settings;\n     std::string current_database;\ndiff --git a/src/Interpreters/QueryLog.cpp b/src/Interpreters/QueryLog.cpp\nindex df21e82305a7..57f3968fba13 100644\n--- a/src/Interpreters/QueryLog.cpp\n+++ b/src/Interpreters/QueryLog.cpp\n@@ -118,6 +118,7 @@ NamesAndTypesList QueryLogElement::getNamesAndTypes()\n         {\"log_comment\", std::make_shared<DataTypeString>()},\n \n         {\"thread_ids\", std::make_shared<DataTypeArray>(std::make_shared<DataTypeUInt64>())},\n+        {\"peak_threads_usage\", std::make_shared<DataTypeUInt64>()},\n         {\"ProfileEvents\", std::make_shared<DataTypeMap>(low_cardinality_string, std::make_shared<DataTypeUInt64>())},\n         {\"Settings\", std::make_shared<DataTypeMap>(low_cardinality_string, low_cardinality_string)},\n \n@@ -230,6 +231,8 @@ void QueryLogElement::appendToBlock(MutableColumns & columns) const\n         columns[i++]->insert(threads_array);\n     }\n \n+    columns[i++]->insert(peak_threads_usage);\n+\n     if (profile_counters)\n     {\n         auto * column = columns[i++].get();\ndiff --git a/src/Interpreters/QueryLog.h b/src/Interpreters/QueryLog.h\nindex 5bc80280eac9..fe9b7cbdbc88 100644\n--- a/src/Interpreters/QueryLog.h\n+++ b/src/Interpreters/QueryLog.h\n@@ -91,6 +91,7 @@ struct QueryLogElement\n     String log_comment;\n \n     std::vector<UInt64> thread_ids;\n+    UInt64 peak_threads_usage = 0;\n     std::shared_ptr<ProfileEvents::Counters::Snapshot> profile_counters;\n     std::shared_ptr<AsyncReadCounters> async_read_counters;\n     std::shared_ptr<Settings> query_settings;\ndiff --git a/src/Interpreters/ThreadStatusExt.cpp b/src/Interpreters/ThreadStatusExt.cpp\nindex 6ee8ec987db2..efb8c6792bcc 100644\n--- a/src/Interpreters/ThreadStatusExt.cpp\n+++ b/src/Interpreters/ThreadStatusExt.cpp\n@@ -61,10 +61,27 @@ std::vector<UInt64> ThreadGroup::getInvolvedThreadIds() const\n     return res;\n }\n \n-void ThreadGroup::linkThread(UInt64 thread_it)\n+size_t ThreadGroup::getPeakThreadsUsage() const\n {\n     std::lock_guard lock(mutex);\n-    thread_ids.insert(thread_it);\n+    return peak_threads_usage;\n+}\n+\n+\n+void ThreadGroup::linkThread(UInt64 thread_id)\n+{\n+    std::lock_guard lock(mutex);\n+    thread_ids.insert(thread_id);\n+\n+    ++active_thread_count;\n+    peak_threads_usage = std::max(peak_threads_usage, active_thread_count);\n+}\n+\n+void ThreadGroup::unlinkThread()\n+{\n+    std::lock_guard lock(mutex);\n+    chassert(active_thread_count > 0);\n+    --active_thread_count;\n }\n \n ThreadGroupPtr ThreadGroup::createForQuery(ContextPtr query_context_, std::function<void()> fatal_error_callback_)\n@@ -243,6 +260,8 @@ void ThreadStatus::detachFromGroup()\n     /// Extract MemoryTracker out from query and user context\n     memory_tracker.setParent(&total_memory_tracker);\n \n+    thread_group->unlinkThread();\n+\n     thread_group.reset();\n \n     query_id_from_query_context.clear();\ndiff --git a/src/Interpreters/executeQuery.cpp b/src/Interpreters/executeQuery.cpp\nindex bac6807b6821..1bfeeaa8ad49 100644\n--- a/src/Interpreters/executeQuery.cpp\n+++ b/src/Interpreters/executeQuery.cpp\n@@ -241,6 +241,7 @@ addStatusInfoToQueryLogElement(QueryLogElement & element, const QueryStatusInfo\n     element.memory_usage = info.peak_memory_usage > 0 ? info.peak_memory_usage : 0;\n \n     element.thread_ids = info.thread_ids;\n+    element.peak_threads_usage = info.peak_threads_usage;\n     element.profile_counters = info.profile_counters;\n \n     /// We need to refresh the access info since dependent views might have added extra information, either during\ndiff --git a/src/Storages/MergeTree/MergePlainMergeTreeTask.cpp b/src/Storages/MergeTree/MergePlainMergeTreeTask.cpp\nindex 3f5753a0c95d..c218acce903c 100644\n--- a/src/Storages/MergeTree/MergePlainMergeTreeTask.cpp\n+++ b/src/Storages/MergeTree/MergePlainMergeTreeTask.cpp\n@@ -40,7 +40,6 @@ bool MergePlainMergeTreeTask::executeStep()\n     if (merge_list_entry)\n     {\n         switcher.emplace((*merge_list_entry)->thread_group);\n-\n     }\n \n     switch (state)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02871_peak_threads_usage.reference b/tests/queries/0_stateless/02871_peak_threads_usage.reference\nnew file mode 100644\nindex 000000000000..d772a2c4b4e2\n--- /dev/null\n+++ b/tests/queries/0_stateless/02871_peak_threads_usage.reference\n@@ -0,0 +1,14 @@\n+1\t2\t1\t1\n+2\t2\t1\t1\n+3\t2\t1\t1\n+4\t2\t1\t1\n+5\t4\t1\t1\n+6\t6\t1\t1\n+7\t2\t1\t1\n+8\t2\t1\t1\n+9\t2\t1\t1\n+10\t6\t1\t1\n+11\t6\t1\t1\n+12\t6\t1\t1\n+13\t2\t1\t1\n+14\t2\t1\t1\ndiff --git a/tests/queries/0_stateless/02871_peak_threads_usage.sh b/tests/queries/0_stateless/02871_peak_threads_usage.sh\nnew file mode 100755\nindex 000000000000..dfb3e6650204\n--- /dev/null\n+++ b/tests/queries/0_stateless/02871_peak_threads_usage.sh\n@@ -0,0 +1,85 @@\n+#!/usr/bin/env bash\n+# Tags: no-parallel\n+# Tag no-parallel: Avoid using threads in other parallel queries.\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+QUERY_OPTIONS=(\n+    \"--log_query_threads=1\"\n+    \"--log_queries_min_type=QUERY_FINISH\"\n+    \"--log_queries=1\"\n+    \"--format=Null\"\n+    \"--use_concurrency_control=0\"\n+)\n+\n+UNIQUE_QUERY_ID=\"02871_1_$$\"\n+\n+# TCPHandler and QueryPullPipeEx threads are always part of the query thread group, but those threads are not within the max_threads limit.\n+${CLICKHOUSE_CLIENT} --query_id=\"${UNIQUE_QUERY_ID}_1\" --query='SELECT 1' \"${QUERY_OPTIONS[@]}\"\n+${CLICKHOUSE_CLIENT} --query_id=\"${UNIQUE_QUERY_ID}_2\" --query='SELECT 1 SETTINGS max_threads = 1' \"${QUERY_OPTIONS[@]}\"\n+${CLICKHOUSE_CLIENT} --query_id=\"${UNIQUE_QUERY_ID}_3\" --query='SELECT 1 SETTINGS max_threads = 8' \"${QUERY_OPTIONS[@]}\"\n+${CLICKHOUSE_CLIENT} --query_id=\"${UNIQUE_QUERY_ID}_4\" --query='SELECT * FROM numbers_mt(500000) SETTINGS max_threads = 1' \"${QUERY_OPTIONS[@]}\"\n+${CLICKHOUSE_CLIENT} --query_id=\"${UNIQUE_QUERY_ID}_5\" --query='SELECT * FROM numbers_mt(500000) SETTINGS max_threads = 2' \"${QUERY_OPTIONS[@]}\"\n+${CLICKHOUSE_CLIENT} --query_id=\"${UNIQUE_QUERY_ID}_6\" --query='SELECT * FROM numbers_mt(500000) SETTINGS max_threads = 4' \"${QUERY_OPTIONS[@]}\"\n+${CLICKHOUSE_CLIENT} --query_id=\"${UNIQUE_QUERY_ID}_7\" --query='SELECT * FROM numbers_mt(5000), numbers(5000) SETTINGS max_threads = 1, joined_subquery_requires_alias=0' \"${QUERY_OPTIONS[@]}\"\n+${CLICKHOUSE_CLIENT} --query_id=\"${UNIQUE_QUERY_ID}_8\" --query='SELECT * FROM numbers_mt(5000), numbers(5000) SETTINGS max_threads = 4, joined_subquery_requires_alias=0' \"${QUERY_OPTIONS[@]}\"\n+\n+${CLICKHOUSE_CLIENT} --query_id=\"${UNIQUE_QUERY_ID}_9\" -mn --query=\"\"\"\n+SELECT count() FROM \n+    (SELECT number FROM numbers_mt(1,100000) \n+            UNION ALL SELECT number FROM numbers_mt(10000, 200000)\n+            UNION ALL SELECT number FROM numbers_mt(30000, 40000)\n+            UNION ALL SELECT number FROM numbers_mt(30000, 40000)\n+            UNION ALL SELECT number FROM numbers_mt(300000, 400000)\n+            UNION ALL SELECT number FROM numbers_mt(300000, 400000)\n+            UNION ALL SELECT number FROM numbers_mt(300000, 4000000)\n+            UNION ALL SELECT number FROM numbers_mt(300000, 4000000)\n+    ) SETTINGS max_threads = 1\"\"\" \"${QUERY_OPTIONS[@]}\"\n+\n+${CLICKHOUSE_CLIENT} --query_id=\"${UNIQUE_QUERY_ID}_10\" -mn --query=\"\"\"\n+SELECT count() FROM \n+    (SELECT number FROM numbers_mt(1,100000) \n+            UNION ALL SELECT number FROM numbers_mt(10000, 2000)\n+            UNION ALL SELECT number FROM numbers_mt(30000, 40000)\n+            UNION ALL SELECT number FROM numbers_mt(30000, 40)\n+            UNION ALL SELECT number FROM numbers_mt(300000, 400)\n+            UNION ALL SELECT number FROM numbers_mt(300000, 4000)\n+            UNION ALL SELECT number FROM numbers_mt(300000, 40000)\n+            UNION ALL SELECT number FROM numbers_mt(300000, 4000000)\n+    ) SETTINGS max_threads = 4\"\"\" \"${QUERY_OPTIONS[@]}\"\n+\n+${CLICKHOUSE_CLIENT} --query_id=\"${UNIQUE_QUERY_ID}_11\" -mn --query=\"\"\"\n+SELECT count() FROM \n+    (SELECT number FROM numbers_mt(1,100000) \n+            UNION ALL SELECT number FROM numbers_mt(1, 1)\n+            UNION ALL SELECT number FROM numbers_mt(1, 1)\n+            UNION ALL SELECT number FROM numbers_mt(1, 1)\n+            UNION ALL SELECT number FROM numbers_mt(1, 1)\n+            UNION ALL SELECT number FROM numbers_mt(1, 1)\n+            UNION ALL SELECT number FROM numbers_mt(1, 1)\n+            UNION ALL SELECT number FROM numbers_mt(1, 4000000)\n+    ) SETTINGS max_threads = 4\"\"\" \"${QUERY_OPTIONS[@]}\"\n+\n+${CLICKHOUSE_CLIENT} --query_id=\"${UNIQUE_QUERY_ID}_12\" -mn --query=\"\"\"\n+SELECT sum(number) FROM numbers_mt(100000)\n+GROUP BY number % 2\n+WITH TOTALS ORDER BY number % 2\n+SETTINGS max_threads = 4\"\"\" \"${QUERY_OPTIONS[@]}\"\n+\n+${CLICKHOUSE_CLIENT} --query_id=\"${UNIQUE_QUERY_ID}_13\" -mn --query=\"SELECT * FROM numbers(100000) SETTINGS max_threads = 1\" \"${QUERY_OPTIONS[@]}\"\n+\n+${CLICKHOUSE_CLIENT} --query_id=\"${UNIQUE_QUERY_ID}_14\" -mn --query=\"SELECT * FROM numbers(100000) SETTINGS max_threads = 4\" \"${QUERY_OPTIONS[@]}\"\n+\n+${CLICKHOUSE_CLIENT} -q \"SYSTEM FLUSH LOGS\"\n+for i in {1..14}\n+do\n+    ${CLICKHOUSE_CLIENT} -mn --query=\"\"\"\n+    SELECT '${i}',\n+           peak_threads_usage, \n+           (select count() from system.query_thread_log WHERE system.query_thread_log.query_id = '${UNIQUE_QUERY_ID}_${i}' AND current_database = currentDatabase()) = length(thread_ids),\n+           length(thread_ids) >= peak_threads_usage\n+    FROM system.query_log \n+    WHERE type = 'QueryFinish' AND query_id = '${UNIQUE_QUERY_ID}_${i}' AND current_database = currentDatabase()\"\n+done\n",
  "problem_statement": "peak_threads_usage in the system.query_log\nSimilar to peak memory usage.\r\n\r\nThat should help to find the cases when the query uses more (or fewer) threads than it should.\r\n\r\nIt can be used in CI/CD (so after the test suite finished we can check if there are any queries using more than max_threads threads).\r\nhttps://github.com/ClickHouse/ClickHouse/issues/53287\r\nhttps://github.com/ClickHouse/ClickHouse/issues/51565\r\n\r\n\r\nAlternatives: \r\n* length of the thread_ids in system.query_log - poor metric (long running queries can take threads with different ids during execution)\r\n* system.query_thread_log - hard to use\r\n* system.trace_log - captures the data only for long-running queries.\r\n* GlobalThreadActive  metric - does not capture rapid changes\r\n\n",
  "hints_text": "Hello!\r\nPlease assign me to this task! I'm going to implement this feature.",
  "created_at": "2023-09-06T01:06:06Z",
  "modified_files": [
    "docs/en/operations/system-tables/query_log.md",
    "docs/ru/operations/system-tables/query_log.md",
    "src/Common/ConcurrencyControl.cpp",
    "src/Common/ThreadStatus.h",
    "src/Interpreters/ProcessList.cpp",
    "src/Interpreters/ProcessList.h",
    "src/Interpreters/QueryLog.cpp",
    "src/Interpreters/QueryLog.h",
    "src/Interpreters/ThreadStatusExt.cpp",
    "src/Interpreters/executeQuery.cpp",
    "src/Storages/MergeTree/MergePlainMergeTreeTask.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02871_peak_threads_usage.reference",
    "b/tests/queries/0_stateless/02871_peak_threads_usage.sh"
  ]
}