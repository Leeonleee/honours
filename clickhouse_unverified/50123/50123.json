{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 50123,
  "instance_id": "ClickHouse__ClickHouse-50123",
  "issue_numbers": [
    "50099"
  ],
  "base_commit": "afc823032cca41b49cee00258cef878827088697",
  "patch": "diff --git a/src/Interpreters/InterpreterSelectQuery.cpp b/src/Interpreters/InterpreterSelectQuery.cpp\nindex f7ddf0e1eded..d68f9c8e6a6f 100644\n--- a/src/Interpreters/InterpreterSelectQuery.cpp\n+++ b/src/Interpreters/InterpreterSelectQuery.cpp\n@@ -440,7 +440,6 @@ InterpreterSelectQuery::InterpreterSelectQuery(\n     if (has_input || !joined_tables.resolveTables())\n         joined_tables.makeFakeTable(storage, metadata_snapshot, source_header);\n \n-\n     if (context->getCurrentTransaction() && context->getSettingsRef().throw_on_unsupported_query_inside_transaction)\n     {\n         if (storage)\ndiff --git a/src/Interpreters/TreeOptimizer.cpp b/src/Interpreters/TreeOptimizer.cpp\nindex da15b2a7e5fd..c38b3c790265 100644\n--- a/src/Interpreters/TreeOptimizer.cpp\n+++ b/src/Interpreters/TreeOptimizer.cpp\n@@ -703,8 +703,11 @@ void optimizeOrLikeChain(ASTPtr & query)\n \n }\n \n-void TreeOptimizer::optimizeIf(ASTPtr & query, Aliases & aliases, bool if_chain_to_multiif)\n+void TreeOptimizer::optimizeIf(ASTPtr & query, Aliases & aliases, bool if_chain_to_multiif, bool multiif_to_if)\n {\n+    if (multiif_to_if)\n+        optimizeMultiIfToIf(query);\n+\n     /// Optimize if with constant condition after constants was substituted instead of scalar subqueries.\n     OptimizeIfWithConstantConditionVisitor(aliases).visit(query);\n \n@@ -791,9 +794,6 @@ void TreeOptimizer::apply(ASTPtr & query, TreeRewriterResult & result,\n     if (settings.optimize_normalize_count_variants)\n         optimizeCountConstantAndSumOne(query, context);\n \n-    if (settings.optimize_multiif_to_if)\n-        optimizeMultiIfToIf(query);\n-\n     if (settings.optimize_rewrite_sum_if_to_count_if)\n         optimizeSumIfFunctions(query);\n \ndiff --git a/src/Interpreters/TreeOptimizer.h b/src/Interpreters/TreeOptimizer.h\nindex 07ae2fbd12de..74a0a9928c45 100644\n--- a/src/Interpreters/TreeOptimizer.h\n+++ b/src/Interpreters/TreeOptimizer.h\n@@ -23,7 +23,7 @@ class TreeOptimizer\n         const std::vector<TableWithColumnNamesAndTypes> & tables_with_columns,\n         ContextPtr context);\n \n-    static void optimizeIf(ASTPtr & query, Aliases & aliases, bool if_chain_to_multiif);\n+    static void optimizeIf(ASTPtr & query, Aliases & aliases, bool if_chain_to_multiif, bool multiif_to_if);\n     static void optimizeCountConstantAndSumOne(ASTPtr & query, ContextPtr context);\n     static void optimizeGroupByFunctionKeys(ASTSelectQuery * select_query);\n };\ndiff --git a/src/Interpreters/TreeRewriter.cpp b/src/Interpreters/TreeRewriter.cpp\nindex bf6840779428..0824d360c7f4 100644\n--- a/src/Interpreters/TreeRewriter.cpp\n+++ b/src/Interpreters/TreeRewriter.cpp\n@@ -1230,11 +1230,14 @@ TreeRewriterResultPtr TreeRewriter::analyzeSelect(\n     /// Push the predicate expression down to subqueries. The optimization should be applied to both initial and secondary queries.\n     result.rewrite_subqueries = PredicateExpressionsOptimizer(getContext(), tables_with_columns, settings).optimize(*select_query);\n \n-    TreeOptimizer::optimizeIf(query, result.aliases, settings.optimize_if_chain_to_multiif);\n+     /// Only apply AST optimization for initial queries.\n+    const bool ast_optimizations_allowed =\n+        getContext()->getClientInfo().query_kind != ClientInfo::QueryKind::SECONDARY_QUERY\n+        && !select_options.ignore_ast_optimizations;\n+\n+    bool optimize_multiif_to_if = ast_optimizations_allowed && settings.optimize_multiif_to_if;\n+    TreeOptimizer::optimizeIf(query, result.aliases, settings.optimize_if_chain_to_multiif, optimize_multiif_to_if);\n \n-    /// Only apply AST optimization for initial queries.\n-    const bool ast_optimizations_allowed\n-        = getContext()->getClientInfo().query_kind != ClientInfo::QueryKind::SECONDARY_QUERY && !select_options.ignore_ast_optimizations;\n     if (ast_optimizations_allowed)\n         TreeOptimizer::apply(query, result, tables_with_columns, getContext());\n \n@@ -1341,7 +1344,7 @@ TreeRewriterResultPtr TreeRewriter::analyze(\n     if (settings.legacy_column_name_of_tuple_literal)\n         markTupleLiteralsAsLegacy(query);\n \n-    TreeOptimizer::optimizeIf(query, result.aliases, settings.optimize_if_chain_to_multiif);\n+    TreeOptimizer::optimizeIf(query, result.aliases, settings.optimize_if_chain_to_multiif, false);\n \n     if (allow_aggregations)\n     {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02751_multiif_to_if_crash.reference b/tests/queries/0_stateless/02751_multiif_to_if_crash.reference\nnew file mode 100644\nindex 000000000000..d00491fd7e5b\n--- /dev/null\n+++ b/tests/queries/0_stateless/02751_multiif_to_if_crash.reference\n@@ -0,0 +1,1 @@\n+1\ndiff --git a/tests/queries/0_stateless/02751_multiif_to_if_crash.sql b/tests/queries/0_stateless/02751_multiif_to_if_crash.sql\nnew file mode 100644\nindex 000000000000..05233c2c4b93\n--- /dev/null\n+++ b/tests/queries/0_stateless/02751_multiif_to_if_crash.sql\n@@ -0,0 +1,1 @@\n+SELECT sum(A) FROM (SELECT multiIf(1, 1, NULL) as A);\n",
  "problem_statement": "Segmentation fault on simple query with nested SELECT on multiif\nWhen running this query on Clickhouse server version 23.4.2.11 (and previous) 23.*:\r\n\r\n`SELECT sum(A) FROM (SELECT multiIf(1, 1, NULL) as A);`\r\n\r\nWe get a segmentation fault on Clickhouse server.\r\n\r\n\r\nThe following (small) variations do work correctly though.\r\n\r\n```\r\nSELECT sum(multiIf(1, 1, NULL));                            \r\nSELECT A      FROM (SELECT multiIf(1, 1, NULL) as A);       \r\nSELECT sum(A) FROM (SELECT 1 as A);                         \r\nSELECT sum(A) FROM (SELECT multiIf(true, 1, NULL) as A);    \r\nSELECT sum(A) FROM (SELECT multiIf(1, 1, 2) as A);          \r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n",
  "hints_text": "```\r\ndell9510 :) SELECT sum(A) FROM (SELECT multiIf(1, 1, NULL) as A);\r\n\r\nSELECT sum(A)\r\nFROM\r\n(\r\n    SELECT multiIf(1, 1, NULL) AS A\r\n)\r\n\r\nQuery id: 17ef2260-4d8e-4861-91b8-50bede19503f\r\n\r\n[dell9510] 2023.05.22 14:53:09.508898 [ 78217 ] {17ef2260-4d8e-4861-91b8-50bede19503f} <Fatal> : Logical error: 'Bad cast from type DB::IColumn const* to DB::ColumnNullable const*'.\r\n[dell9510] 2023.05.22 14:53:09.520379 [ 130173 ] <Fatal> BaseDaemon: ########################################\r\n[dell9510] 2023.05.22 14:53:09.520892 [ 130173 ] <Fatal> BaseDaemon: (version 23.5.1.1, build id: C585FCA917EC5BECBF2F0727E1FA234434031B36) (from thread 78217) (query_id: 17ef2260-4d8e-4861-91b8-50bede19503f) (query: SELECT sum(A) FROM (SELECT multiIf(1, 1, NULL) as A);) Received signal Aborted (6)\r\n[dell9510] 2023.05.22 14:53:09.536647 [ 130173 ] <Fatal> BaseDaemon: \r\n[dell9510] 2023.05.22 14:53:09.537118 [ 130173 ] <Fatal> BaseDaemon: Stack trace: 0x00007f4a065718ec 0x00007f4a06522ea8 0x00007f4a0650c53d 0x00000000241ec637 0x00000000241ec6b5 0x00000000241ecaec 0x000000001abc0ab7 0x000000001abc458f 0x0000000028478b41 0x00000000284a8b05 0x000000002cabb6ee 0x000000002ca0baa5 0x000000002f9a2351 0x000000002f99f9e1 0x000000002f524150 0x000000002f523e41 0x000000002f5063be 0x000000002f506744 0x000000002f507807 0x000000002f507755 0x000000002f507735 0x000000002f507715 0x000000002f5076e0 0x000000002424cab6 0x000000002424be55 0x000000002436a0c3 0x00000000243747b1 0x0000000024374775 0x0000000024374759 0x00000000243746bd 0x000000002437458e 0x00000000243744d5 0x00000000243744b5 0x0000000024374495 0x0000000024374460 0x000000002424cab6 0x000000002424be55 0x0000000024366663 0x000000002436e111 0x000000002436e0b5 0x000000002436dfdd\r\n[dell9510] 2023.05.22 14:53:09.537701 [ 130173 ] <Fatal> BaseDaemon: 4. ? @ 0x00007f4a065718ec in ?\r\n[dell9510] 2023.05.22 14:53:09.537981 [ 130173 ] <Fatal> BaseDaemon: 5. raise @ 0x00007f4a06522ea8 in ?\r\n[dell9510] 2023.05.22 14:53:09.538398 [ 130173 ] <Fatal> BaseDaemon: 6. abort @ 0x00007f4a0650c53d in ?\r\n[dell9510] 2023.05.22 14:53:10.061097 [ 130173 ] <Fatal> BaseDaemon: 7. /home/tavplubix/ch/ClickHouse/src/Common/Exception.cpp:42: DB::abortOnFailedAssertion(String const&) @ 0x00000000241ec637 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.05.22 14:53:10.261152 [ 130173 ] <Fatal> BaseDaemon: 8. /home/tavplubix/ch/ClickHouse/src/Common/Exception.cpp:65: DB::handle_error_code(String const&, int, bool, std::vector<void*, std::allocator<void*>> const&) @ 0x00000000241ec6b5 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.05.22 14:53:10.412090 [ 130173 ] <Fatal> BaseDaemon: 9. /home/tavplubix/ch/ClickHouse/src/Common/Exception.cpp:93: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000241ecaec in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.05.22 14:53:10.590216 [ 130173 ] <Fatal> BaseDaemon: 10. /home/tavplubix/ch/ClickHouse/src/Common/Exception.h:54: DB::Exception::Exception(String&&, int, bool) @ 0x000000001abc0ab7 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.05.22 14:53:10.770515 [ 130173 ] <Fatal> BaseDaemon: 11. /home/tavplubix/ch/ClickHouse/src/Common/Exception.h:81: DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x000000001abc458f in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.05.22 14:53:11.238760 [ 130173 ] <Fatal> BaseDaemon: 12. /home/tavplubix/ch/ClickHouse/src/Common/assert_cast.h:47: DB::ColumnNullable const* assert_cast<DB::ColumnNullable const*, DB::IColumn const*&>(DB::IColumn const*&) @ 0x0000000028478b41 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.05.22 14:53:11.517269 [ 130173 ] <Fatal> BaseDaemon: 13. /home/tavplubix/ch/ClickHouse/src/AggregateFunctions/AggregateFunctionNull.h:360: DB::AggregateFunctionNullUnary<true, true>::addBatchSinglePlace(unsigned long, unsigned long, char*, DB::IColumn const**, DB::Arena*, long) const @ 0x00000000284a8b05 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.05.22 14:53:13.345045 [ 130173 ] <Fatal> BaseDaemon: 14. /home/tavplubix/ch/ClickHouse/src/Interpreters/Aggregator.cpp:0: void DB::Aggregator::executeWithoutKeyImpl<false>(char*&, unsigned long, unsigned long, DB::Aggregator::AggregateFunctionInstruction*, DB::Arena*) const @ 0x000000002cabb6ee in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.05.22 14:53:14.733831 [ 130173 ] <Fatal> BaseDaemon: 15. /home/tavplubix/ch/ClickHouse/src/Interpreters/Aggregator.cpp:1585: DB::Aggregator::executeOnBlock(std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>, unsigned long, unsigned long, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*>>&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*>>, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*>>>>&, bool&) const @ 0x000000002ca0baa5 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.05.22 14:53:15.392632 [ 130173 ] <Fatal> BaseDaemon: 16. /home/tavplubix/ch/ClickHouse/src/Processors/Transforms/AggregatingTransform.cpp:669: DB::AggregatingTransform::consume(DB::Chunk) @ 0x000000002f9a2351 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.05.22 14:53:15.821202 [ 130173 ] <Fatal> BaseDaemon: 17. /home/tavplubix/ch/ClickHouse/src/Processors/Transforms/AggregatingTransform.cpp:628: DB::AggregatingTransform::work() @ 0x000000002f99f9e1 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.05.22 14:53:15.955217 [ 130173 ] <Fatal> BaseDaemon: 18. /home/tavplubix/ch/ClickHouse/src/Processors/Executors/ExecutionThreadContext.cpp:47: DB::executeJob(DB::ExecutingGraph::Node*, DB::ReadProgressCallback*) @ 0x000000002f524150 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.05.22 14:53:16.073376 [ 130173 ] <Fatal> BaseDaemon: 19. /home/tavplubix/ch/ClickHouse/src/Processors/Executors/ExecutionThreadContext.cpp:92: DB::ExecutionThreadContext::executeTask() @ 0x000000002f523e41 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.05.22 14:53:16.307991 [ 130173 ] <Fatal> BaseDaemon: 20. /home/tavplubix/ch/ClickHouse/src/Processors/Executors/PipelineExecutor.cpp:255: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x000000002f5063be in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.05.22 14:53:16.480832 [ 130173 ] <Fatal> BaseDaemon: 21. /home/tavplubix/ch/ClickHouse/src/Processors/Executors/PipelineExecutor.cpp:221: DB::PipelineExecutor::executeSingleThread(unsigned long) @ 0x000000002f506744 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.05.22 14:53:16.649448 [ 130173 ] <Fatal> BaseDaemon: 22. /home/tavplubix/ch/ClickHouse/src/Processors/Executors/PipelineExecutor.cpp:343: DB::PipelineExecutor::spawnThreads()::$_0::operator()() const @ 0x000000002f507807 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.05.22 14:53:16.875320 [ 130173 ] <Fatal> BaseDaemon: 23. /home/tavplubix/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/invoke.h:394: decltype(std::declval<DB::PipelineExecutor::spawnThreads()::$_0&>()()) std::__invoke[abi:v15000]<DB::PipelineExecutor::spawnThreads()::$_0&>(DB::PipelineExecutor::spawnThreads()::$_0&) @ 0x000000002f507755 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.05.22 14:53:17.136394 [ 130173 ] <Fatal> BaseDaemon: 24. /home/tavplubix/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/invoke.h:480: void std::__invoke_void_return_wrapper<void, true>::__call<DB::PipelineExecutor::spawnThreads()::$_0&>(DB::PipelineExecutor::spawnThreads()::$_0&) @ 0x000000002f507735 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.05.22 14:53:17.359526 [ 130173 ] <Fatal> BaseDaemon: 25. /home/tavplubix/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/function.h:235: std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads()::$_0, void ()>::operator()[abi:v15000]() @ 0x000000002f507715 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.05.22 14:53:17.614622 [ 130173 ] <Fatal> BaseDaemon: 26. /home/tavplubix/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/function.h:716: void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads()::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x000000002f5076e0 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.05.22 14:53:17.735716 [ 130173 ] <Fatal> BaseDaemon: 27. /home/tavplubix/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/function.h:848: std::__function::__policy_func<void ()>::operator()[abi:v15000]() const @ 0x000000002424cab6 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.05.22 14:53:17.830860 [ 130173 ] <Fatal> BaseDaemon: 28. /home/tavplubix/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/function.h:1187: std::function<void ()>::operator()() const @ 0x000000002424be55 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.05.22 14:53:17.960801 [ 130173 ] <Fatal> BaseDaemon: 29. /home/tavplubix/ch/ClickHouse/src/Common/ThreadPool.cpp:416: ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::worker(std::__list_iterator<ThreadFromGlobalPoolImpl<false>, void*>) @ 0x000000002436a0c3 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.05.22 14:53:18.118894 [ 130173 ] <Fatal> BaseDaemon: 30. /home/tavplubix/ch/ClickHouse/src/Common/ThreadPool.cpp:180: void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::function<void ()>, long, std::optional<unsigned long>, bool)::'lambda0'()::operator()() const @ 0x00000000243747b1 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.05.22 14:53:18.283235 [ 130173 ] <Fatal> BaseDaemon: 31. /home/tavplubix/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/invoke.h:394: decltype(std::declval<void>()()) std::__invoke[abi:v15000]<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::function<void ()>, long, std::optional<unsigned long>, bool)::'lambda0'()&>(void&&) @ 0x0000000024374775 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.05.22 14:53:18.596571 [ 130173 ] <Fatal> BaseDaemon: 32. /home/tavplubix/ch/ClickHouse/contrib/llvm-project/libcxx/include/tuple:1789: decltype(auto) std::__apply_tuple_impl[abi:v15000]<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::function<void ()>, long, std::optional<unsigned long>, bool)::'lambda0'()&, std::tuple<>&>(void&&, std::tuple<>&, std::__tuple_indices<>) @ 0x0000000024374759 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.05.22 14:53:18.872216 [ 130173 ] <Fatal> BaseDaemon: 33. /home/tavplubix/ch/ClickHouse/contrib/llvm-project/libcxx/include/tuple:1798: decltype(auto) std::apply[abi:v15000]<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::function<void ()>, long, std::optional<unsigned long>, bool)::'lambda0'()&, std::tuple<>&>(void&&, std::tuple<>&) @ 0x00000000243746bd in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.05.22 14:53:19.007366 [ 130173 ] <Fatal> BaseDaemon: 34. /home/tavplubix/ch/ClickHouse/src/Common/ThreadPool.h:228: ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::function<void ()>, long, std::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'()::operator()() @ 0x000000002437458e in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.05.22 14:53:19.169405 [ 130173 ] <Fatal> BaseDaemon: 35. /home/tavplubix/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/invoke.h:394: decltype(std::declval<void>()()) std::__invoke[abi:v15000]<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::function<void ()>, long, std::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'()&>(void&&) @ 0x00000000243744d5 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.05.22 14:53:19.350611 [ 130173 ] <Fatal> BaseDaemon: 36. /home/tavplubix/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/invoke.h:480: void std::__invoke_void_return_wrapper<void, true>::__call<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::function<void ()>, long, std::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'()&>(ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::function<void ()>, long, std::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'()&) @ 0x00000000243744b5 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.05.22 14:53:19.509559 [ 130173 ] <Fatal> BaseDaemon: 37. /home/tavplubix/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/function.h:235: std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::function<void ()>, long, std::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'(), void ()>::operator()[abi:v15000]() @ 0x0000000024374495 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.05.22 14:53:19.667442 [ 130173 ] <Fatal> BaseDaemon: 38. /home/tavplubix/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/function.h:716: void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::function<void ()>, long, std::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x0000000024374460 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.05.22 14:53:19.779234 [ 130173 ] <Fatal> BaseDaemon: 39. /home/tavplubix/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/function.h:848: std::__function::__policy_func<void ()>::operator()[abi:v15000]() const @ 0x000000002424cab6 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.05.22 14:53:19.876881 [ 130173 ] <Fatal> BaseDaemon: 40. /home/tavplubix/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/function.h:1187: std::function<void ()>::operator()() const @ 0x000000002424be55 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.05.22 14:53:20.000175 [ 130173 ] <Fatal> BaseDaemon: 41. /home/tavplubix/ch/ClickHouse/src/Common/ThreadPool.cpp:416: ThreadPoolImpl<std::thread>::worker(std::__list_iterator<std::thread, void*>) @ 0x0000000024366663 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.05.22 14:53:20.160969 [ 130173 ] <Fatal> BaseDaemon: 42. /home/tavplubix/ch/ClickHouse/src/Common/ThreadPool.cpp:180: void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, long, std::optional<unsigned long>, bool)::'lambda0'()::operator()() const @ 0x000000002436e111 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.05.22 14:53:20.343437 [ 130173 ] <Fatal> BaseDaemon: 43. /home/tavplubix/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/invoke.h:394: decltype(std::declval<void>()()) std::__invoke[abi:v15000]<void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, long, std::optional<unsigned long>, bool)::'lambda0'()>(void&&) @ 0x000000002436e0b5 in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.05.22 14:53:20.509474 [ 130173 ] <Fatal> BaseDaemon: 44. /home/tavplubix/ch/ClickHouse/contrib/llvm-project/libcxx/include/thread:285: void std::__thread_execute[abi:v15000]<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, long, std::optional<unsigned long>, bool)::'lambda0'()>(std::tuple<void, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, long, std::optional<unsigned long>, bool)::'lambda0'()>&, std::__tuple_indices<>) @ 0x000000002436dfdd in /home/tavplubix/ch/ClickHouse/cmake-build-debug/programs/clickhouse\r\n[dell9510] 2023.05.22 14:53:20.510113 [ 130173 ] <Fatal> BaseDaemon: Integrity check of the executable skipped because the reference checksum could not be read.\r\n\u2197 Progress: 1.00 rows, 1.00 B (0.05 rows/s., 0.05 B/s.)                                                                                                                                                                         Exception on client:\r\nCode: 32. DB::Exception: Attempt to read after eof: while receiving packet from localhost:9000. (ATTEMPT_TO_READ_AFTER_EOF)\r\n\r\n```\r\n\r\n```\r\ndell9510 :) set optimize_multiif_to_if=0\r\n\r\nSET optimize_multiif_to_if = 0\r\n\r\nQuery id: 451ce4f1-0a17-4512-8c00-67496c966ecb\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.007 sec. \r\n\r\ndell9510 :) SELECT sum(A) FROM (SELECT multiIf(1, 1, NULL) as A);\r\n\r\nSELECT sum(A)\r\nFROM\r\n(\r\n    SELECT multiIf(1, 1, NULL) AS A\r\n)\r\n\r\nQuery id: 951c9e1a-f7c1-4858-93ac-ee9f943a219d\r\n\r\n\u250c\u2500sum(A)\u2500\u2510\r\n\u2502      1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.051 sec. \r\n\r\n```",
  "created_at": "2023-05-22T23:33:42Z"
}