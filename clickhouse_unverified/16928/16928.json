{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 16928,
  "instance_id": "ClickHouse__ClickHouse-16928",
  "issue_numbers": [
    "16580"
  ],
  "base_commit": "6e62108606bbe8212ff301796ea5c19fd27da468",
  "patch": "diff --git a/src/Interpreters/MonotonicityCheckVisitor.h b/src/Interpreters/MonotonicityCheckVisitor.h\nindex 405ec1cb479a..73c1e5497dd7 100644\n--- a/src/Interpreters/MonotonicityCheckVisitor.h\n+++ b/src/Interpreters/MonotonicityCheckVisitor.h\n@@ -131,8 +131,13 @@ class MonotonicityCheckMatcher\n             data.reject();\n     }\n \n-    static bool needChildVisit(const ASTPtr &, const ASTPtr &)\n+    static bool needChildVisit(const ASTPtr & parent, const ASTPtr &)\n     {\n+        /// Currently we check monotonicity only for single-argument functions.\n+        /// Although, multi-argument functions with all but one constant arguments can also be monotonic.\n+        if (const auto * func = typeid_cast<const ASTFunction *>(parent.get()))\n+            return func->arguments->children.size() < 2;\n+\n         return true;\n     }\n };\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01560_monotonicity_check_multiple_args_bug.reference b/tests/queries/0_stateless/01560_monotonicity_check_multiple_args_bug.reference\nnew file mode 100644\nindex 000000000000..5d632f2f5b82\n--- /dev/null\n+++ b/tests/queries/0_stateless/01560_monotonicity_check_multiple_args_bug.reference\n@@ -0,0 +1,4 @@\n+2020-11-12\n+2020-11-13\n+2020-11-12\n+2020-11-13\ndiff --git a/tests/queries/0_stateless/01560_monotonicity_check_multiple_args_bug.sql b/tests/queries/0_stateless/01560_monotonicity_check_multiple_args_bug.sql\nnew file mode 100644\nindex 000000000000..befc13be8eb0\n--- /dev/null\n+++ b/tests/queries/0_stateless/01560_monotonicity_check_multiple_args_bug.sql\n@@ -0,0 +1,17 @@\n+WITH arrayJoin(range(2)) AS delta\n+SELECT\n+    toDate(time) + toIntervalDay(delta) AS dt\n+FROM \n+(\n+    SELECT toDateTime('2020.11.12 19:02:04') AS time\n+)\n+ORDER BY dt ASC;\n+\n+WITH arrayJoin([0, 1]) AS delta\n+SELECT\n+    toDate(time) + toIntervalDay(delta) AS dt\n+FROM \n+(\n+    SELECT toDateTime('2020.11.12 19:02:04') AS time\n+)\n+ORDER BY dt ASC;\n",
  "problem_statement": "Strange errors while using arrayJoin with ORDER BY on DateTime datatype values\n**How to reproduce**\r\n* Working query\r\n```sql\r\nWITH arrayJoin(range(2)) AS delta\r\nSELECT\r\n    toDate(time) + toIntervalDay(delta) AS dt,\r\n    version()\r\nFROM \r\n(\r\n    SELECT NOW() AS time\r\n)\r\n\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500dt\u2500\u252c\u2500version()\u2500\u2500\u2510\r\n\u2502 2020-11-01 \u2502 20.10.3.30 \u2502\r\n\u2502 2020-11-02 \u2502 20.10.3.30 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n2 rows in set. Elapsed: 0.006 sec. \r\n\r\n```\r\n\r\n* After adding ORDER BY dt\r\n```sql\r\nWITH arrayJoin(range(2)) AS delta\r\nSELECT\r\n    toDate(time) + toIntervalDay(delta) AS dt,\r\n    version()\r\nFROM \r\n(\r\n    SELECT NOW() AS time\r\n)\r\nORDER BY dt ASC\r\n\r\n\r\nReceived exception from server (version 20.10.3):\r\nCode: 43. DB::Exception: Received from localhost:9000. DB::Exception: Illegal type Date of argument of function range. \r\n\r\n0 rows in set. Elapsed: 0.022 sec. \r\n```\r\n* Try to change range(2) to equivalent array [0,1]\r\n```sql\r\nWITH arrayJoin([0, 1]) AS delta\r\nSELECT\r\n    toDate(time) + toIntervalDay(delta) AS dt,\r\n    version()\r\nFROM \r\n(\r\n    SELECT NOW() AS time\r\n)\r\nORDER BY dt ASC\r\n\r\n\r\nReceived exception from server (version 20.10.3):\r\nCode: 43. DB::Exception: Received from localhost:9000. DB::Exception: Argument for function arrayJoin must be Array.. \r\n\r\n0 rows in set. Elapsed: 0.004 sec. \r\n```\r\n\r\n**Expected behavior**\r\nCorrectly ordered result set\r\n\r\n**Additional context**\r\nBoth queries with errors correctly run on version 20.7.2.30 \r\n```sql\r\nWITH arrayJoin(range(2)) AS delta\r\nSELECT \r\n    toDate(time) + toIntervalDay(delta) AS dt,\r\n    version()\r\nFROM \r\n(\r\n    SELECT NOW() AS time\r\n)\r\nORDER BY dt ASC\r\n\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500dt\u2500\u252c\u2500version()\u2500\u2510\r\n\u2502 2020-11-01 \u2502 20.7.2.30 \u2502\r\n\u2502 2020-11-02 \u2502 20.7.2.30 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n2 rows in set. Elapsed: 0.003 sec. \r\n```\r\n```sql\r\nWITH arrayJoin([0, 1]) AS delta\r\nSELECT \r\n    toDate(time) + toIntervalDay(delta) AS dt,\r\n    version()\r\nFROM \r\n(\r\n    SELECT NOW() AS time\r\n)\r\nORDER BY dt ASC\r\n\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500dt\u2500\u252c\u2500version()\u2500\u2510\r\n\u2502 2020-11-01 \u2502 20.7.2.30 \u2502\r\n\u2502 2020-11-02 \u2502 20.7.2.30 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n2 rows in set. Elapsed: 0.001 sec. \r\n```\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2020-11-12T12:41:54Z"
}