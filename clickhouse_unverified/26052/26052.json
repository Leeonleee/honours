{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 26052,
  "instance_id": "ClickHouse__ClickHouse-26052",
  "issue_numbers": [
    "24075"
  ],
  "base_commit": "e231f6ce5cea254acbf7a7f681c52d83a04f6626",
  "patch": "diff --git a/src/Processors/QueryPipeline.cpp b/src/Processors/QueryPipeline.cpp\nindex 14b60d0b14cf..2b882ee93ab4 100644\n--- a/src/Processors/QueryPipeline.cpp\n+++ b/src/Processors/QueryPipeline.cpp\n@@ -350,6 +350,7 @@ std::unique_ptr<QueryPipeline> QueryPipeline::joinPipelines(\n     left->pipe.processors.insert(left->pipe.processors.end(), right->pipe.processors.begin(), right->pipe.processors.end());\n     left->pipe.holder = std::move(right->pipe.holder);\n     left->pipe.header = left->pipe.output_ports.front()->getHeader();\n+    left->pipe.max_parallel_streams = std::max(left->pipe.max_parallel_streams, right->pipe.max_parallel_streams);\n     return left;\n }\n \n",
  "test_patch": "diff --git a/tests/performance/join_max_streams.xml b/tests/performance/join_max_streams.xml\nnew file mode 100644\nindex 000000000000..1505e1d6e6e0\n--- /dev/null\n+++ b/tests/performance/join_max_streams.xml\n@@ -0,0 +1,5 @@\n+<test>\n+    <query>SELECT * FROM (SELECT 1 AS k FROM numbers_mt(1)) t1 LEFT JOIN (SELECT 1 AS k FROM numbers_mt(10000000000) WHERE number = 1) t2 USING k</query>\n+    <query>SELECT * FROM (SELECT 1 AS k FROM numbers_mt(1)) t1 LEFT JOIN (SELECT 1 AS k FROM numbers_mt(10000000000) GROUP BY k) t2 USING k</query>\n+    <query>SELECT * FROM (SELECT 1 AS k FROM numbers_mt(1)) t1 LEFT JOIN (SELECT 1 AS k FROM numbers_mt(10000000000) WHERE number = 1) t2 ON t1.k = t2.k</query>\n+</test>\n",
  "problem_statement": "version 21.6 is much slower than 21.4\n\r\n\r\nI got the binary from follwing url then strip it\r\n\r\n```\r\nwget -c https://builds.clickhouse.tech/master/aarch64/clickhouse\r\n\r\nkylin@kylin-gtj:~$ strip clickhouse\r\nkylin@kylin-gtj:~$ ll cl*\r\n-rw-r--r-- 1 kylin kylin 234645184 5\u6708  13 08:21 clickhouse\r\nkylin@kylin-gtj:~$ cd ch\r\nkylin@kylin-gtj:~/ch$ ll\r\n\u603b\u7528\u91cf 242132\r\ndrwxrwxr-x 13 kylin kylin      4096 5\u6708  11 16:28 ./\r\ndrwx------ 39 kylin kylin      4096 5\u6708  13 08:21 ../\r\n-rwxrwxr-x  1 kylin kylin 219328512 3\u6708  26 15:24 clickhouse*\r\ndrwxr-x---  6 kylin kylin      4096 5\u6708  11 13:56 data/\r\ndrwxr-x---  2 kylin kylin      4096 3\u6708  26 15:25 dictionaries_lib/\r\ndrwxr-x---  2 kylin kylin      4096 3\u6708  26 15:25 flags/\r\ndrwxr-x---  2 kylin kylin      4096 3\u6708  26 15:25 format_schemas/\r\ndrwxr-x---  2 kylin kylin      4096 3\u6708  30 09:45 metadata/\r\ndrwxr-x---  2 kylin kylin      4096 4\u6708  29 13:31 metadata_dropped/\r\n-rw-------  1 kylin kylin  28550256 5\u6708  11 16:28 nohup.out\r\ndrwxr-x---  2 kylin kylin      4096 3\u6708  26 15:25 preprocessed_configs/\r\ndrwxr-x---  4 kylin kylin      4096 4\u6708   8 09:47 shadow/\r\ndrwxr-x--- 53 kylin kylin      4096 4\u6708  29 13:23 store/\r\ndrwxr-x---  3 kylin kylin      4096 3\u6708  31 12:50 tmp/\r\ndrwxr-x---  2 kylin kylin      4096 3\u6708  26 15:25 user_files/\r\n```\r\n\r\nthen rename the old binary file to clickhouse214 and satrt new file and run a query.\r\n\r\n```\r\nkylin@kylin-gtj:~/ch$ mv clickhouse clickhouse214\r\nkylin@kylin-gtj:~/ch$ mv ../clickhouse .\r\nkylin@kylin-gtj:~/ch$ chmod +x clickhouse\r\nkylin@kylin-gtj:~/ch$ nohup ./clickhouse server &\r\n[1] 3369\r\nkylin@kylin-gtj:~/ch$ nohup: \u5ffd\u7565\u8f93\u5165\u5e76\u628a\u8f93\u51fa\u8ffd\u52a0\u5230'nohup.out'\r\n\r\nkylin@kylin-gtj:~/ch$ mysql --protocol tcp -u default -P 9004\r\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\r\nYour MySQL connection id is 0\r\nServer version: 21.6.1.6818-ClickHouse \r\n\r\nCopyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.\r\n\r\nOracle is a registered trademark of Oracle Corporation and/or its\r\naffiliates. Other names may be trademarks of their respective\r\nowners.\r\n\r\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\r\n\r\nmysql> use pop\r\nReading table information for completion of table and column names\r\nYou can turn off this feature to get a quicker startup with -A\r\n\r\nDatabase changed\r\n\r\nmysql> with t as(\r\n    -> select  agg,age1,d6,d4,count(*)cnt from ren group by cube(agg,age1,d6,d4)), \r\n    -> st as (\r\n    -> select agg,age1,d6,d4 from aggs,age1s,d6s,d4s where age1=0 or toUInt8((age1+4)/5)=agg order by d6,d4)\r\n    -> select agg,age1,arraySlice(groupArray(cnt),1,10)ac from st left join t using(agg,age1,d6,d4) group by agg,age1 order by agg,age1\r\n    -> ;\r\n+------+------+---------------------------------------------------------------------------------------+\r\n| agg  | age1 | ac                                                                                    |\r\n+------+------+---------------------------------------------------------------------------------------+\r\n126 rows in set (9.99 sec)\r\nRead 128000189 rows, 2.01 GiB in 9.98721409 sec., 12816405 rows/sec., 205.82 MiB/sec.\r\n\r\nmysql> explain with t as( select  agg,age1,d6,d4,count(*)cnt from ren group by cube(agg,age1,d6,d4)),  st as ( select agg,age1,d6,d4 from aggs,age1s,d6s,d4s where age1=0 or toUInt8((age1+4)/5)=agg order by d6,d4) select agg,age1,arraySlice(groupArray(cnt),1,10)ac from st left join t using(agg,age1,d6,d4) group by agg,age1 order by agg,age1;\r\n+------------------------------------------------------------------------------------------------------------------------------------+\r\n| explain                                                                                                                            |\r\n+------------------------------------------------------------------------------------------------------------------------------------+\r\n| Expression (Projection)                                                                                                            |\r\n|   MergingSorted (Merge sorted streams for ORDER BY)                                                                                |\r\n|     MergeSorting (Merge sorted blocks for ORDER BY)                                                                                |\r\n|       PartialSorting (Sort each block for ORDER BY)                                                                                |\r\n|         Expression (Before ORDER BY)                                                                                               |\r\n|           Aggregating                                                                                                              |\r\n|             Expression (Before GROUP BY)                                                                                           |\r\n|               Join (JOIN)                                                                                                          |\r\n|                 Expression ((Before JOIN + Projection))                                                                            |\r\n|                   MergingSorted (Merge sorted streams for ORDER BY)                                                                |\r\n|                     MergeSorting (Merge sorted blocks for ORDER BY)                                                                |\r\n|                       PartialSorting (Sort each block for ORDER BY)                                                                |\r\n|                         Expression (Before ORDER BY)                                                                               |\r\n|                           Filter (WHERE)                                                                                           |\r\n|                             Join (JOIN)                                                                                            |\r\n|                               Expression ((Before JOIN + (Projection + Before ORDER BY)))                                          |\r\n|                                 Filter (WHERE)                                                                                     |\r\n|                                   Join (JOIN)                                                                                      |\r\n|                                     Expression ((Before JOIN + (Projection + Before ORDER BY)))                                    |\r\n|                                       Filter (WHERE)                                                                               |\r\n|                                         Join (JOIN)                                                                                |\r\n|                                           Expression (Before JOIN)                                                                 |\r\n|                                             SettingQuotaAndLimits (Set limits and quota after reading from storage)                |\r\n|                                               ReadFromStorage (Log)                                                                |\r\n|                                           Expression ((Joined actions + (Rename joined columns + (Projection + Before ORDER BY)))) |\r\n|                                             SettingQuotaAndLimits (Set limits and quota after reading from storage)                |\r\n|                                               ReadFromStorage (Log)                                                                |\r\n|                                     Expression ((Joined actions + (Rename joined columns + (Projection + Before ORDER BY))))       |\r\n|                                       SettingQuotaAndLimits (Set limits and quota after reading from storage)                      |\r\n|                                         ReadFromStorage (Log)                                                                      |\r\n|                               Expression ((Joined actions + (Rename joined columns + (Projection + Before ORDER BY))))             |\r\n|                                 SettingQuotaAndLimits (Set limits and quota after reading from storage)                            |\r\n|                                   ReadFromStorage (Log)                                                                            |\r\n|                 Expression ((Joined actions + (Rename joined columns + (Projection + Before ORDER BY))))                           |\r\n|                   Cube                                                                                                             |\r\n|                     Aggregating                                                                                                    |\r\n|                       Expression (Before GROUP BY)                                                                                 |\r\n|                         SettingQuotaAndLimits (Set limits and quota after reading from storage)                                    |\r\n|                           ReadFromMergeTree                                                                                        |\r\n+------------------------------------------------------------------------------------------------------------------------------------+\r\n39 rows in set (0.00 sec)\r\nRead 39 rows, 2.82 KiB in 0.00643683 sec., 6058 rows/sec., 438.30 KiB/sec.\r\n\r\n\r\n```\r\nthe query took about 10 seconds, but each of the sub-query are all very fast (ren has 128000000 rows, t has 7917 rows, and st has 22302 rows )\r\n```\r\nmysql> with t as( select  agg,age1,d6,d4,count(*)cnt from ren group by cube(agg,age1,d6,d4))select count(*) from t;\r\n+---------+\r\n| count() |\r\n+---------+\r\n|    7917 |\r\n+---------+\r\n1 row in set (1.33 sec)\r\nRead 128000000 rows, 2.01 GiB in 1.32724088 sec., 96440670 rows/sec., 1.51 GiB/sec.\r\n\r\nmysql> with st as ( select agg,age1,d6,d4 from aggs,age1s,d6s,d4s where age1=0 or toUInt8((age1+4)/5)=agg order by d6,d4)select count(*) from st;\r\n+---------+\r\n| count() |\r\n+---------+\r\n|   22302 |\r\n+---------+\r\n1 row in set (0.01 sec)\r\nRead 189 rows, 189.00 B in 0.01041345 sec., 18149 rows/sec., 17.72 KiB/sec.\r\n\r\nmysql> select count(*) from ren;\r\n+-----------+\r\n| count()   |\r\n+-----------+\r\n| 128000000 |\r\n+-----------+\r\n1 row in set (0.00 sec)\r\nRead 1 rows, 4.01 KiB in 0.00057369 sec., 1743 rows/sec., 6.82 MiB/sec.\r\n```\r\nthen I quit the version: 21.6, restart the version 2.14.\r\nthe same query took about 1.4 seconds. \r\n\r\n```\r\nkylin@kylin-gtj:~/ch$ pgrep clickhouse\r\n3370\r\nkylin@kylin-gtj:~/ch$ kill 3370\r\nkylin@kylin-gtj:~/ch$ pgrep clickhouse\r\n[1]+  \u5df2\u5b8c\u6210               nohup ./clickhouse server\r\nkylin@kylin-gtj:~/ch$ nohup ./clickhouse214 server &\r\n[1] 3931\r\nkylin@kylin-gtj:~/ch$ nohup: \u5ffd\u7565\u8f93\u5165\u5e76\u628a\u8f93\u51fa\u8ffd\u52a0\u5230'nohup.out'\r\n\r\nkylin@kylin-gtj:~/ch$ mysql --protocol tcp -u default -P 9004\r\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\r\nYour MySQL connection id is 0\r\nServer version: 21.4.1.6351-ClickHouse \r\n\r\nCopyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.\r\n\r\nOracle is a registered trademark of Oracle Corporation and/or its\r\naffiliates. Other names may be trademarks of their respective\r\nowners.\r\n\r\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\r\n\r\nmysql> use pop\r\nReading table information for completion of table and column names\r\nYou can turn off this feature to get a quicker startup with -A\r\n\r\nDatabase changed\r\nmysql> with t as( select  agg,age1,d6,d4,count(*)cnt from ren group by cube(agg,age1,d6,d4)),  st as ( select agg,age1,d6,d4 from aggs,age1s,d6s,d4s where age1=0 or toUInt8((age1+4)/5)=agg order by d6,d4) select agg,age1,arraySlice(groupArray(cnt),1,10)ac from st left join t using(agg,age1,d6,d4) group by agg,age1 order by agg,age1;\r\n+------+------+---------------------------------------------------------------------------------------+\r\n| agg  | age1 | ac                                                                                    |\r\n+------+------+---------------------------------------------------------------------------------------+\r\n126 rows in set (1.41 sec)\r\nRead 128000189 rows, 2.01 GiB in 1.40947438 sec., 90814129 rows/sec., 1.42 GiB/sec.\r\n\r\nmysql> select count(*) from ren;\r\n+-----------+\r\n| count()   |\r\n+-----------+\r\n| 128000000 |\r\n+-----------+\r\n1 row in set (0.00 sec)\r\nRead 1 rows, 4.01 KiB in 0.00055921 sec., 1788 rows/sec., 7.00 MiB/sec.\r\n\r\nmysql> with st as ( select agg,age1,d6,d4 from aggs,age1s,d6s,d4s where age1=0 or toUInt8((age1+4)/5)=agg order by d6,d4)select count(*) from st;\r\n+---------+\r\n| count() |\r\n+---------+\r\n|   22302 |\r\n+---------+\r\n1 row in set (0.01 sec)\r\nRead 189 rows, 189.00 B in 0.00977349 sec., 19338 rows/sec., 18.88 KiB/sec.\r\n\r\nmysql> with t as( select  agg,age1,d6,d4,count(*)cnt from ren group by cube(agg,age1,d6,d4))select count(*) from t;\r\n+---------+\r\n| count() |\r\n+---------+\r\n|    7917 |\r\n+---------+\r\n1 row in set (1.33 sec)\r\nRead 128000000 rows, 2.01 GiB in 1.33491026 sec., 95886595 rows/sec., 1.50 GiB/sec.\r\n\r\nmysql> explain with t as( select  agg,age1,d6,d4,count(*)cnt from ren group by cube(agg,age1,d6,d4)),  st as ( select agg,age1,d6,d4 from aggs,age1s,d6s,d4s where age1=0 or toUInt8((age1+4)/5)=agg order by d6,d4) select agg,age1,arraySlice(groupArray(cnt),1,10)ac from st left join t using(agg,age1,d6,d4) group by agg,age1 order by agg,age1;\r\n+---------------------------------------------------------------------------------------------------------------------------------+\r\n| explain                                                                                                                         |\r\n+---------------------------------------------------------------------------------------------------------------------------------+\r\n| Expression (Projection)                                                                                                         |\r\n|   MergingSorted (Merge sorted streams for ORDER BY)                                                                             |\r\n|     MergeSorting (Merge sorted blocks for ORDER BY)                                                                             |\r\n|       PartialSorting (Sort each block for ORDER BY)                                                                             |\r\n|         Expression (Before ORDER BY)                                                                                            |\r\n|           CreatingSets (Create sets before main query execution)                                                                |\r\n|             Aggregating                                                                                                         |\r\n|               Expression (Before GROUP BY)                                                                                      |\r\n|                 Join (JOIN)                                                                                                     |\r\n|                   Expression ((Before JOIN + Projection))                                                                       |\r\n|                     MergingSorted (Merge sorted streams for ORDER BY)                                                           |\r\n|                       MergeSorting (Merge sorted blocks for ORDER BY)                                                           |\r\n|                         PartialSorting (Sort each block for ORDER BY)                                                           |\r\n|                           CreatingSets (Create sets before main query execution)                                                |\r\n|                             Expression (Before ORDER BY)                                                                        |\r\n|                               Filter (WHERE)                                                                                    |\r\n|                                 Join (JOIN)                                                                                     |\r\n|                                   Expression ((Before JOIN + Projection))                                                       |\r\n|                                     CreatingSets (Create sets before main query execution)                                      |\r\n|                                       Expression (Before ORDER BY)                                                              |\r\n|                                         Filter (WHERE)                                                                          |\r\n|                                           Join (JOIN)                                                                           |\r\n|                                             Expression ((Before JOIN + Projection))                                             |\r\n|                                               CreatingSets (Create sets before main query execution)                            |\r\n|                                                 Expression (Before ORDER BY)                                                    |\r\n|                                                   Filter (WHERE)                                                                |\r\n|                                                     Join (JOIN)                                                                 |\r\n|                                                       Expression (Before JOIN)                                                  |\r\n|                                                         SettingQuotaAndLimits (Set limits and quota after reading from storage) |\r\n|                                                           ReadFromStorage (Log)                                                 |\r\n|                                                 CreatingSet (Create set for JOIN)                                               |\r\n|                                                   Expression ((Projection + Before ORDER BY))                                   |\r\n|                                                     SettingQuotaAndLimits (Set limits and quota after reading from storage)     |\r\n|                                                       ReadFromStorage (Log)                                                     |\r\n|                                       CreatingSet (Create set for JOIN)                                                         |\r\n|                                         Expression ((Projection + Before ORDER BY))                                             |\r\n|                                           SettingQuotaAndLimits (Set limits and quota after reading from storage)               |\r\n|                                             ReadFromStorage (Log)                                                               |\r\n|                             CreatingSet (Create set for JOIN)                                                                   |\r\n|                               Expression ((Projection + Before ORDER BY))                                                       |\r\n|                                 SettingQuotaAndLimits (Set limits and quota after reading from storage)                         |\r\n|                                   ReadFromStorage (Log)                                                                         |\r\n|             CreatingSet (Create set for JOIN)                                                                                   |\r\n|               Expression ((Projection + Before ORDER BY))                                                                       |\r\n|                 Cube                                                                                                            |\r\n|                   Aggregating                                                                                                   |\r\n|                     Expression (Before GROUP BY)                                                                                |\r\n|                       SettingQuotaAndLimits (Set limits and quota after reading from storage)                                   |\r\n|                         ReadFromStorage (MergeTree)                                                                             |\r\n+---------------------------------------------------------------------------------------------------------------------------------+\r\n49 rows in set (0.01 sec)\r\nRead 49 rows, 3.56 KiB in 0.00660192 sec., 7422 rows/sec., 538.58 KiB/sec.\r\n```\r\n\r\n\r\n\r\n\t\t\n",
  "hints_text": "can you please help to test on a 21. 5 version?\nversion 21.7.1.7113 still has this problem. \r\n\r\n@filimonov\n@l1t1 We need a reproducible example. Please provide the dataset to reproduce or a query that reproduces the issue without dataset.\nCREATE TABLE t_ren2 (\r\n  code UInt64 , \r\n  r_no varchar(3) , \r\n  d4 UInt8, \r\n  d5_birth_year UInt16 , \r\n  d5_birth_month UInt8 , \r\n  d6 UInt8 \r\n) ENGINE=MergeTree()order by (code,r_no) \r\n;\r\n\r\ninsert into t_ren2 \r\nwith sheng as (select number+11 sheng from numbers(2)),\r\ndi as (select number+1 di from numbers(20)),\r\nxian as (select number+1 xian from numbers(20)),\r\nxiang as (select number+1 xiang from numbers(10)),\r\ncun as (select number+1 cun from numbers(10)),\r\nxiao as (select number+1 xiao from numbers(5)),\r\nhu as (select number+1 hu from numbers(80)),\r\nt_hu as(\r\nselect (((((toUInt64(sheng)*100+di)*100+xian)*1000+xiang)*1000+cun)*1000+xiao)*1000+hu code,\r\ncode%7+1 r_count\r\nfrom sheng,di,xian,xiang,cun,xiao,hu),\r\nt as(select number+1 n from numbers(7))\r\nselect \r\n code,            \r\n n r_no,                    \r\n n%2+1 d4,                    \r\n (code+n)%100+1921 d5_birth_year,             \r\n (code+n)%12+1 d5_birth_month  , \r\n (code+n)%56+1 d6                   \r\nfrom t_hu,t\r\nwhere n<=r_count;\r\n\r\n\r\nalter table t_ren2 add column age1 UInt8 default (2020-d5_birth_year - case when d5_birth_month>=11 then 2 else 1 end);\r\n\r\nalter table t_ren2 update age1=age1 where 1;\r\n\r\nalter table t_ren2 add column agg UInt8 default \r\n(case \r\nwhen age1-1=0 then 1\r\nwhen age1-1> 0 and age1-1 <100 then toUInt8((age1-1)/5)\r\nwhen age1-1>=100 then 20\r\nend )\r\n;\r\nalter table t_ren2 update agg=agg where 1;\r\n\r\n\r\nwith \r\ntaggs as (select number agg from numbers(20+1)),\r\ntage1s as (select number age1 from numbers(100+1)),\r\ntd6s as (select number d6 from numbers(58+1)),\r\ntd4s as (select number d4 from numbers(2+1)),\r\nt as( select  agg,age1,d6,d4,count(*)cnt from t_ren2 group by cube(agg,age1,d6,d4)),  \r\nst as ( select agg,age1,d6,d4 from taggs,tage1s,td6s,td4s where age1=0 or toUInt8((age1-1)/5)=agg order by d6,d4) \r\nselect agg,age1,arraySlice(groupArray(cnt),1,10)ac from st left join t using(agg,age1,d6,d4) group by agg,age1 order by agg,age1;\r\n\r\n-- run in v21.4 costs 0.4s, in v21.7, 2.5s\ndoes x86 version 21.7 works well\nI run sql above on centos7 vm on windows7 x86_64, it has the same performance problem.\r\non 21.1.1     0.8 s\r\non 21.6.5.37   2.5s\r\n\r\nfor 21.1 doesn't support UInt64 join to UInt8, I fixed the sql as following\r\n\r\nwith\r\ntaggs as (select toUInt8(number)  agg from numbers(20+1)),\r\ntage1s as (select toUInt8(number)  age1 from numbers(100+1)),\r\ntd6s as (select toUInt8(number)  d6 from numbers(58+1)),\r\ntd4s as (select toUInt8(number)  d4 from numbers(2+1)),\r\nt as( select agg,age1,d6,d4,count(*)cnt from t_ren2 group by cube(agg,age1,d6,d4)),\r\nst as ( select agg,age1,d6,d4 from taggs,tage1s,td6s,td4s where age1=0 or toUInt8((age1-1)/5)=agg order by d6,d4)\r\nselect agg,age1,arraySlice(groupArray(cnt),1,10)ac from st left join t using(agg,age1,d6,d4) group by agg,age1 order by agg,age1;\r\n\n 21.1\r\n![VirtualBox_centos7_01_07_2021_12_26_55](https://user-images.githubusercontent.com/23301704/124068624-6d00ee00-da6d-11eb-97bf-35b15ceb81fd.png)\r\n 21.6\r\n![VirtualBox_centos7_01_07_2021_12_55_53](https://user-images.githubusercontent.com/23301704/124068648-768a5600-da6d-11eb-8a48-917b7ca84a7f.png)\r\n\n21.4.7.3 is no problem\r\n21.5.7.9 is no problem\n21.7.1.7283 has this problem\n![VirtualBox_centos7_01_07_2021_13_32_32](https://user-images.githubusercontent.com/23301704/124073962-5ced0c80-da75-11eb-963f-5c3e44e619be.png)\r\n![VirtualBox_centos7_01_07_2021_13_37_42](https://user-images.githubusercontent.com/23301704/124073975-61192a00-da75-11eb-9094-657a74cdddc6.png)\r\n![VirtualBox_centos7_01_07_2021_13_56_31](https://user-images.githubusercontent.com/23301704/124073984-637b8400-da75-11eb-8f02-f8856a89b639.png)\r\n\nIt is somehow related to query parallelism. With max_threads = 1 there is no performance difference.\r\nNew version is using 100% CPU (single core) for some reason.\r\nOld version is using 1400% CPU on 16 core machine.\nMinimal query to reproduce:\r\n```\r\nSELECT * FROM \r\n(SELECT 1 AS k) t1\r\nLEFT JOIN\r\n(SELECT 1 AS k FROM numbers_mt(10000000000) WHERE number = 1) t2\r\nUSING k\r\n```\r\n\r\nThe right hand side of JOIN does not get required number of threads.\nVersion 21.5 is Ok.\nMaybe #23743 or #24574.\nThis commit is slow: 08f10dc\r\nThis commit is good: 6f08f945e84f614e64d3cb2e36ea925c3267c508\r\n",
  "created_at": "2021-07-07T17:54:25Z",
  "modified_files": [
    "src/Processors/QueryPipeline.cpp"
  ],
  "modified_test_files": [
    "b/tests/performance/join_max_streams.xml"
  ]
}