{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 27758,
  "instance_id": "ClickHouse__ClickHouse-27758",
  "issue_numbers": [
    "27745"
  ],
  "base_commit": "2ce40988b62ab6b68bd9f95983831717c5c45aa6",
  "patch": "diff --git a/src/AggregateFunctions/AggregateFunctionQuantile.cpp b/src/AggregateFunctions/AggregateFunctionQuantile.cpp\nindex 11b145856532..5f84eb9b271e 100644\n--- a/src/AggregateFunctions/AggregateFunctionQuantile.cpp\n+++ b/src/AggregateFunctions/AggregateFunctionQuantile.cpp\n@@ -56,6 +56,8 @@ template <typename Value, bool float_return> using FuncQuantilesTDigestWeighted\n template <typename Value, bool float_return> using FuncQuantileBFloat16 = AggregateFunctionQuantile<Value, QuantileBFloat16Histogram<Value>, NameQuantileBFloat16, false, std::conditional_t<float_return, Float64, void>, false>;\n template <typename Value, bool float_return> using FuncQuantilesBFloat16 = AggregateFunctionQuantile<Value, QuantileBFloat16Histogram<Value>, NameQuantilesBFloat16, false, std::conditional_t<float_return, Float64, void>, true>;\n \n+template <typename Value, bool float_return> using FuncQuantileBFloat16Weighted = AggregateFunctionQuantile<Value, QuantileBFloat16Histogram<Value>, NameQuantileBFloat16Weighted, true, std::conditional_t<float_return, Float64, void>, false>;\n+template <typename Value, bool float_return> using FuncQuantilesBFloat16Weighted = AggregateFunctionQuantile<Value, QuantileBFloat16Histogram<Value>, NameQuantilesBFloat16Weighted, true, std::conditional_t<float_return, Float64, void>, true>;\n \n template <template <typename, bool> class Function>\n static constexpr bool supportDecimal()\n@@ -167,6 +169,9 @@ void registerAggregateFunctionsQuantile(AggregateFunctionFactory & factory)\n     factory.registerFunction(NameQuantileBFloat16::name, createAggregateFunctionQuantile<FuncQuantileBFloat16>);\n     factory.registerFunction(NameQuantilesBFloat16::name, { createAggregateFunctionQuantile<FuncQuantilesBFloat16>, properties });\n \n+    factory.registerFunction(NameQuantileBFloat16Weighted::name, createAggregateFunctionQuantile<FuncQuantileBFloat16Weighted>);\n+    factory.registerFunction(NameQuantilesBFloat16Weighted::name, createAggregateFunctionQuantile<FuncQuantilesBFloat16Weighted>);\n+\n     /// 'median' is an alias for 'quantile'\n     factory.registerAlias(\"median\", NameQuantile::name);\n     factory.registerAlias(\"medianDeterministic\", NameQuantileDeterministic::name);\n@@ -179,6 +184,7 @@ void registerAggregateFunctionsQuantile(AggregateFunctionFactory & factory)\n     factory.registerAlias(\"medianTDigest\", NameQuantileTDigest::name);\n     factory.registerAlias(\"medianTDigestWeighted\", NameQuantileTDigestWeighted::name);\n     factory.registerAlias(\"medianBFloat16\", NameQuantileBFloat16::name);\n+    factory.registerAlias(\"medianBFloat16Weighted\", NameQuantileBFloat16Weighted::name);\n }\n \n }\ndiff --git a/src/AggregateFunctions/AggregateFunctionQuantile.h b/src/AggregateFunctions/AggregateFunctionQuantile.h\nindex a7a3d4042c29..65d1df9fe775 100644\n--- a/src/AggregateFunctions/AggregateFunctionQuantile.h\n+++ b/src/AggregateFunctions/AggregateFunctionQuantile.h\n@@ -237,5 +237,7 @@ struct NameQuantilesTDigestWeighted { static constexpr auto name = \"quantilesTDi\n \n struct NameQuantileBFloat16 { static constexpr auto name = \"quantileBFloat16\"; };\n struct NameQuantilesBFloat16 { static constexpr auto name = \"quantilesBFloat16\"; };\n+struct NameQuantileBFloat16Weighted { static constexpr auto name = \"quantileBFloat16Weighted\"; };\n+struct NameQuantilesBFloat16Weighted { static constexpr auto name = \"quantilesBFloat16Weighted\"; };\n \n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00753_quantile_format.reference b/tests/queries/0_stateless/00753_quantile_format.reference\nindex d3503745e4b2..cd662caf5c7e 100644\n--- a/tests/queries/0_stateless/00753_quantile_format.reference\n+++ b/tests/queries/0_stateless/00753_quantile_format.reference\n@@ -16,3 +16,5 @@\n ['2016-06-15 23:00:16']\n 2016-04-02 17:23:12\n ['2016-04-02 17:23:12']\n+2016-04-02 17:23:12\n+['2016-04-02 17:23:12']\ndiff --git a/tests/queries/0_stateless/00753_quantile_format.sql b/tests/queries/0_stateless/00753_quantile_format.sql\nindex f72ecc8a49fd..8caa3f313686 100644\n--- a/tests/queries/0_stateless/00753_quantile_format.sql\n+++ b/tests/queries/0_stateless/00753_quantile_format.sql\n@@ -30,4 +30,7 @@ SELECT quantilesTDigestWeighted(0.2)(d, 1) FROM datetime;\n SELECT quantileBFloat16(0.2)(d) FROM datetime;\n SELECT quantilesBFloat16(0.2)(d) FROM datetime;\n \n+SELECT quantileBFloat16Weighted(0.2)(d, 1) FROM datetime;\n+SELECT quantilesBFloat16Weighted(0.2)(d, 1) FROM datetime;\n+\n DROP TABLE datetime;\n",
  "problem_statement": "Unknown function quantileBFloat16Weighted\nLooks like bfloat16 quantiles don't provide a way to specify the weight:\r\n\r\n```sql\r\nSELECT quantileBFloat16Weighted(0.5)(number, number)\r\nFROM numbers(100)\r\n\r\nReceived exception from server (version 21.8.3):\r\nCode: 46. DB::Exception: Received from localhost:9000. DB::Exception: Unknown function quantileBFloat16Weighted\r\n```\r\n\r\nBut I expect it to work the same way as tdigest:\r\n\r\n```sql\r\nSELECT quantileTDigestWeighted(0.5)(number, number)\r\nFROM numbers(100)\r\n\r\nQuery id: ea66ede3-afc6-4e5d-8949-2da5970e1349\r\n\r\n\u250c\u2500quantileTDigestWeighted(0.5)(number, number)\u2500\u2510\r\n\u2502                                     70.35461 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n/cc @RedClusive just in case :)\n",
  "hints_text": "",
  "created_at": "2021-08-16T21:39:23Z"
}