{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 77680,
  "instance_id": "ClickHouse__ClickHouse-77680",
  "issue_numbers": [
    "74208"
  ],
  "base_commit": "c7d73611b19e33bd58d8a02dd4a8de726eb2249b",
  "patch": "diff --git a/src/Interpreters/InterpreterSelectQuery.cpp b/src/Interpreters/InterpreterSelectQuery.cpp\nindex a05c4729ba38..ab5e41fd4963 100644\n--- a/src/Interpreters/InterpreterSelectQuery.cpp\n+++ b/src/Interpreters/InterpreterSelectQuery.cpp\n@@ -43,6 +43,7 @@\n #include <Interpreters/RewriteCountDistinctVisitor.h>\n #include <Interpreters/RewriteUniqToCountVisitor.h>\n #include <Interpreters/getCustomKeyFilterForParallelReplicas.h>\n+#include <Interpreters/ReplaceQueryParameterVisitor.h>\n \n #include <QueryPipeline/Pipe.h>\n #include <Processors/QueryPlan/AggregatingStep.h>\n@@ -94,6 +95,7 @@\n #include <Interpreters/IJoin.h>\n #include <QueryPipeline/SizeLimits.h>\n #include <base/map.h>\n+#include <base/find_symbols.h>\n #include <Common/FieldVisitorToString.h>\n #include <Common/FieldAccurateComparison.h>\n #include <Common/NaNUtils.h>\n@@ -425,7 +427,7 @@ ASTPtr parseAdditionalFilterConditionForTable(\n             /// Try to parse expression\n             ParserExpression parser;\n             const auto & settings = context.getSettingsRef();\n-            return parseQuery(\n+            auto query_ast = parseQuery(\n                 parser,\n                 filter.data(),\n                 filter.data() + filter.size(),\n@@ -433,6 +435,13 @@ ASTPtr parseAdditionalFilterConditionForTable(\n                 settings[Setting::max_query_size],\n                 settings[Setting::max_parser_depth],\n                 settings[Setting::max_parser_backtracks]);\n+\n+            if (find_first_symbols<'{'>(filter.data(), filter.data() + filter.size()) && !context.getQueryParameters().empty())\n+            {\n+                ReplaceQueryParameterVisitor visitor(context.getQueryParameters());\n+                visitor.visit(query_ast);\n+            }\n+            return query_ast;\n         }\n     }\n \ndiff --git a/src/Planner/PlannerJoinTree.cpp b/src/Planner/PlannerJoinTree.cpp\nindex 76265b9fc953..5a7ed2767177 100644\n--- a/src/Planner/PlannerJoinTree.cpp\n+++ b/src/Planner/PlannerJoinTree.cpp\n@@ -65,6 +65,7 @@\n #include <Interpreters/TableJoin.h>\n #include <Interpreters/getCustomKeyFilterForParallelReplicas.h>\n #include <Interpreters/ClusterProxy/executeQuery.h>\n+#include <Interpreters/ReplaceQueryParameterVisitor.h>\n \n #include <Planner/CollectColumnIdentifiers.h>\n #include <Planner/Planner.h>\n@@ -79,6 +80,7 @@\n #include <Common/logger_useful.h>\n \n #include <ranges>\n+#include <base/find_symbols.h>\n \n namespace DB\n {\n@@ -603,6 +605,12 @@ std::optional<FilterDAGInfo> buildAdditionalFiltersIfNeeded(const StoragePtr & s\n                 settings[Setting::max_query_size],\n                 settings[Setting::max_parser_depth],\n                 settings[Setting::max_parser_backtracks]);\n+\n+            if (find_first_symbols<'{'>(filter.data(), filter.data() + filter.size()) && !planner_context->getQueryContext()->getQueryParameters().empty())\n+            {\n+                ReplaceQueryParameterVisitor visitor(planner_context->getQueryContext()->getQueryParameters());\n+                visitor.visit(additional_filter_ast);\n+            }\n             break;\n         }\n     }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03393_additional_table_filter_with_param.reference b/tests/queries/0_stateless/03393_additional_table_filter_with_param.reference\nnew file mode 100644\nindex 000000000000..98944cf02d60\n--- /dev/null\n+++ b/tests/queries/0_stateless/03393_additional_table_filter_with_param.reference\n@@ -0,0 +1,31 @@\n+-- {echoOn}\n+\n+DROP TABLE IF EXISTS t_param_filter;\n+SET param_a = 3;\n+SET param_b = 5;\n+CREATE TABLE t_param_filter\n+(\n+    n Int32,\n+) ENGINE = MergeTree()\n+ORDER BY n;\n+INSERT INTO t_param_filter\n+SELECT number\n+FROM numbers(10);\n+SET allow_experimental_analyzer = 1;\n+SELECT n FROM t_param_filter SETTINGS additional_table_filters = {'t_param_filter': 'n < {b:String}'};\n+0\n+1\n+2\n+3\n+4\n+SELECT n FROM t_param_filter WHERE n > {a:String} SETTINGS additional_table_filters = {'t_param_filter': 'n < {b:String}'};\n+4\n+SET allow_experimental_analyzer = 0;\n+SELECT n FROM t_param_filter SETTINGS additional_table_filters = {'t_param_filter': 'n < {b:String}'};\n+0\n+1\n+2\n+3\n+4\n+SELECT n FROM t_param_filter WHERE n > {a:String} SETTINGS additional_table_filters = {'t_param_filter': 'n < {b:String}'};\n+4\ndiff --git a/tests/queries/0_stateless/03393_additional_table_filter_with_param.sql b/tests/queries/0_stateless/03393_additional_table_filter_with_param.sql\nnew file mode 100644\nindex 000000000000..ec47199123a9\n--- /dev/null\n+++ b/tests/queries/0_stateless/03393_additional_table_filter_with_param.sql\n@@ -0,0 +1,25 @@\n+-- {echoOn}\n+\n+DROP TABLE IF EXISTS t_param_filter;\n+\n+SET param_a = 3;\n+SET param_b = 5;\n+\n+CREATE TABLE t_param_filter\n+(\n+    n Int32,\n+) ENGINE = MergeTree()\n+ORDER BY n;\n+\n+INSERT INTO t_param_filter\n+SELECT number\n+FROM numbers(10);\n+\n+SET allow_experimental_analyzer = 1;\n+SELECT n FROM t_param_filter SETTINGS additional_table_filters = {'t_param_filter': 'n < {b:String}'};\n+SELECT n FROM t_param_filter WHERE n > {a:String} SETTINGS additional_table_filters = {'t_param_filter': 'n < {b:String}'};\n+\n+SET allow_experimental_analyzer = 0;\n+SELECT n FROM t_param_filter SETTINGS additional_table_filters = {'t_param_filter': 'n < {b:String}'};\n+SELECT n FROM t_param_filter WHERE n > {a:String} SETTINGS additional_table_filters = {'t_param_filter': 'n < {b:String}'};\n+\n",
  "problem_statement": "Setting `additional_table_filters` should recognize query parameters\n**Describe the unexpected behaviour**\r\nWhen using `additional_table_filters` it does not take query parameters into account.\r\n\r\n**How to reproduce**\r\n* Clickhouse 24.12\r\n![image](https://github.com/user-attachments/assets/9941eb72-5966-4136-9210-54f03b4d4a9a)\r\n\r\n**Expected behavior**\r\nI would expect it to respect the set query parameters. This is extremely useful for abstracting filtering away, but now you can't really use it when you need to accept user input.\r\n\r\n\n",
  "hints_text": "@hanfei1991 I'd like to work on this :)",
  "created_at": "2025-03-16T07:54:46Z"
}