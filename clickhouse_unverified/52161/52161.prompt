You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
ClickHouse Server receives SIGFPE after running a SELECT statement
**Describe the bug**
The ClickHouse server received signal Arithmetic exception (8) due to "Integer divide by zero" after running a SQL statement.

**How to reproduce**
The SQL statement to reproduce:
```sql
SELECT groupArrayMovingAvg ( toInt64 ( 0 ) ) ( toDecimal32 ( 1 , 1 ) );
```

It can be reproduced on the official docker image. (`clickhouse/clickhouse-server:head` and `clickhouse/clickhouse-server:latest`).

The log:
```
SELECT groupArrayMovingAvg(toInt64(0))(toDecimal32(1, 1 AS is_empty))
FROM numbers(300)

Query id: fae5edc7-50d4-4462-872b-9530457300ee

[50992739ea1d] 2023.07.10 13:52:59.888348 [ 388 ] <Fatal> BaseDaemon: ########################################
[50992739ea1d] 2023.07.10 13:52:59.888405 [ 388 ] <Fatal> BaseDaemon: (version 23.7.1.857 (official build), build id: EBF7F00D257A03E61ABF10B376C4A7BDD0EED2BA, git hash: 9aef39a7888e10995ea85faad559a110c0e22a82) (from thread 349) (query_id: fae5edc7-50d4-4462-872b-9530457300ee) (query: SELECT groupArrayMovingAvg ( toInt64 ( 0 ) ) ( toDecimal32 ( 1 , 1 AS is_empty ) ) FROM numbers ( 300 ) ;) Received signal Arithmetic exception (8)
[50992739ea1d] 2023.07.10 13:52:59.888444 [ 388 ] <Fatal> BaseDaemon: Integer divide by zero.
[50992739ea1d] 2023.07.10 13:52:59.888472 [ 388 ] <Fatal> BaseDaemon: Stack trace: 0x00000000081aa9af 0x0000000010a90a87 0x0000000010abee26 0x00000000131a426d 0x00000000131a3e6b 0x0000000014c5c790 0x0000000014a5d1e9 0x0000000014a53e50 0x0000000014a54fe3 0x000000000e29d8af 0x000000000e2a05fc 0x000000000e2991ef 0x000000000e29f1e1 0x00007f92b3447609 0x00007f92b336c133
[50992739ea1d] 2023.07.10 13:52:59.888529 [ 388 ] <Fatal> BaseDaemon: 2. ? @ 0x00000000081aa9af in /usr/bin/clickhouse
[50992739ea1d] 2023.07.10 13:52:59.888566 [ 388 ] <Fatal> BaseDaemon: 3. ? @ 0x0000000010a90a87 in /usr/bin/clickhouse
[50992739ea1d] 2023.07.10 13:52:59.888592 [ 388 ] <Fatal> BaseDaemon: 4. ? @ 0x0000000010abee26 in /usr/bin/clickhouse
[50992739ea1d] 2023.07.10 13:52:59.888624 [ 388 ] <Fatal> BaseDaemon: 5. ? @ 0x00000000131a426d in /usr/bin/clickhouse
[50992739ea1d] 2023.07.10 13:52:59.888669 [ 388 ] <Fatal> BaseDaemon: 6. DB::Aggregator::prepareBlockAndFillWithoutKey(DB::AggregatedDataVariants&, bool, bool) const @ 0x00000000131a3e6b in /usr/bin/clickhouse
[50992739ea1d] 2023.07.10 13:52:59.888701 [ 388 ] <Fatal> BaseDaemon: 7. ? @ 0x0000000014c5c790 in /usr/bin/clickhouse
[50992739ea1d] 2023.07.10 13:52:59.888733 [ 388 ] <Fatal> BaseDaemon: 8. DB::ExecutionThreadContext::executeTask() @ 0x0000000014a5d1e9 in /usr/bin/clickhouse
[50992739ea1d] 2023.07.10 13:52:59.888761 [ 388 ] <Fatal> BaseDaemon: 9. DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000014a53e50 in /usr/bin/clickhouse
[50992739ea1d] 2023.07.10 13:52:59.888797 [ 388 ] <Fatal> BaseDaemon: 10. ? @ 0x0000000014a54fe3 in /usr/bin/clickhouse
[50992739ea1d] 2023.07.10 13:52:59.888858 [ 388 ] <Fatal> BaseDaemon: 11. ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::worker(std::__list_iterator<ThreadFromGlobalPoolImpl<false>, void*>) @ 0x000000000e29d8af in /usr/bin/clickhouse
[50992739ea1d] 2023.07.10 13:52:59.888931 [ 388 ] <Fatal> BaseDaemon: 12. void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000e2a05fc in /usr/bin/clickhouse
[50992739ea1d] 2023.07.10 13:52:59.888962 [ 388 ] <Fatal> BaseDaemon: 13. ThreadPoolImpl<std::thread>::worker(std::__list_iterator<std::thread, void*>) @ 0x000000000e2991ef in /usr/bin/clickhouse
[50992739ea1d] 2023.07.10 13:52:59.888991 [ 388 ] <Fatal> BaseDaemon: 14. ? @ 0x000000000e29f1e1 in /usr/bin/clickhouse
[50992739ea1d] 2023.07.10 13:52:59.889042 [ 388 ] <Fatal> BaseDaemon: 15. ? @ 0x00007f92b3447609 in ?
[50992739ea1d] 2023.07.10 13:52:59.889075 [ 388 ] <Fatal> BaseDaemon: 16. clone @ 0x00007f92b336c133 in ?
[50992739ea1d] 2023.07.10 13:53:00.072033 [ 388 ] <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: C8DB2CC6CEEB111C8AB95A0F4BA5538E)
[50992739ea1d] 2023.07.10 13:53:00.072250 [ 388 ] <Fatal> BaseDaemon: Report this error to https://github.com/ClickHouse/ClickHouse/issues
[50992739ea1d] 2023.07.10 13:53:00.072353 [ 388 ] <Fatal> BaseDaemon: No settings were changed
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
