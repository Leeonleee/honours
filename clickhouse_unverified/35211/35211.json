{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 35211,
  "instance_id": "ClickHouse__ClickHouse-35211",
  "issue_numbers": [
    "35185"
  ],
  "base_commit": "61a0becae5c0ed8a1f1aab58e1f0823980196059",
  "patch": "diff --git a/.github/workflows/master.yml b/.github/workflows/master.yml\nindex cfa95b84ee58..081fa165c68d 100644\n--- a/.github/workflows/master.yml\n+++ b/.github/workflows/master.yml\n@@ -947,6 +947,34 @@ jobs:\n           docker rm -f \"$(docker ps -a -q)\" ||:\n           sudo rm -fr \"$TEMP_PATH\" \"$CACHES_PATH\"\n ############################################################################################\n+##################################### Docker images  #######################################\n+############################################################################################\n+  DockerServerImages:\n+    needs:\n+      - BuilderDebRelease\n+      - BuilderDebAarch64\n+    runs-on: [self-hosted, style-checker]\n+    steps:\n+      - name: Clear repository\n+        run: |\n+          sudo rm -fr \"$GITHUB_WORKSPACE\" && mkdir \"$GITHUB_WORKSPACE\"\n+      - name: Check out repository code\n+        uses: actions/checkout@v2\n+        with:\n+          fetch-depth: 0  # otherwise we will have no version info\n+      - name: Check docker clickhouse/clickhouse-server building\n+        run: |\n+          cd \"$GITHUB_WORKSPACE/tests/ci\"\n+          python3 docker_server.py --release-type head\n+          python3 docker_server.py --release-type head --no-ubuntu \\\n+            --image-repo clickhouse/clickhouse-keeper --image-path docker/keeper\n+      - name: Cleanup\n+        if: always()\n+        run: |\n+          docker kill \"$(docker ps -q)\" ||:\n+          docker rm -f \"$(docker ps -a -q)\" ||:\n+          sudo rm -fr \"$TEMP_PATH\"\n+############################################################################################\n ##################################### BUILD REPORTER #######################################\n ############################################################################################\n   BuilderReport:\ndiff --git a/.github/workflows/pull_request.yml b/.github/workflows/pull_request.yml\nindex 87a31b9683c0..c01d1821d0f6 100644\n--- a/.github/workflows/pull_request.yml\n+++ b/.github/workflows/pull_request.yml\n@@ -4,7 +4,7 @@ env:\n   # Force the stdout and stderr streams to be unbuffered\n   PYTHONUNBUFFERED: 1\n \n-on: # yamllint disable-line rule:truthy\n+on:  # yamllint disable-line rule:truthy\n   pull_request:\n     types:\n       - synchronize\n@@ -998,6 +998,34 @@ jobs:\n           docker rm -f \"$(docker ps -a -q)\" ||:\n           sudo rm -fr \"$TEMP_PATH\" \"$CACHES_PATH\"\n ############################################################################################\n+##################################### Docker images  #######################################\n+############################################################################################\n+  DockerServerImages:\n+    needs:\n+      - BuilderDebRelease\n+      - BuilderDebAarch64\n+    runs-on: [self-hosted, style-checker]\n+    steps:\n+      - name: Clear repository\n+        run: |\n+          sudo rm -fr \"$GITHUB_WORKSPACE\" && mkdir \"$GITHUB_WORKSPACE\"\n+      - name: Check out repository code\n+        uses: actions/checkout@v2\n+        with:\n+          fetch-depth: 0  # otherwise we will have no version info\n+      - name: Check docker clickhouse/clickhouse-server building\n+        run: |\n+          cd \"$GITHUB_WORKSPACE/tests/ci\"\n+          python3 docker_server.py --release-type head --no-push\n+          python3 docker_server.py --release-type head --no-push --no-ubuntu \\\n+            --image-repo clickhouse/clickhouse-keeper --image-path docker/keeper\n+      - name: Cleanup\n+        if: always()\n+        run: |\n+          docker kill \"$(docker ps -q)\" ||:\n+          docker rm -f \"$(docker ps -a -q)\" ||:\n+          sudo rm -fr \"$TEMP_PATH\"\n+############################################################################################\n ##################################### BUILD REPORTER #######################################\n ############################################################################################\n   BuilderReport:\n@@ -3138,6 +3166,7 @@ jobs:\n     needs:\n       - StyleCheck\n       - DockerHubPush\n+      - DockerServerImages\n       - CheckLabels\n       - BuilderReport\n       - FastTest\ndiff --git a/.github/workflows/release.yml b/.github/workflows/release.yml\nindex bd62e64409f3..29e3d0c4358a 100644\n--- a/.github/workflows/release.yml\n+++ b/.github/workflows/release.yml\n@@ -36,3 +36,28 @@ jobs:\n         overwrite: true\n         tag: ${{ github.ref }}\n         file_glob: true\n+  ############################################################################################\n+  ##################################### Docker images  #######################################\n+  ############################################################################################\n+  DockerServerImages:\n+    runs-on: [self-hosted, style-checker]\n+    steps:\n+    - name: Clear repository\n+      run: |\n+        sudo rm -fr \"$GITHUB_WORKSPACE\" && mkdir \"$GITHUB_WORKSPACE\"\n+    - name: Check out repository code\n+      uses: actions/checkout@v2\n+      with:\n+        fetch-depth: 0  # otherwise we will have no version info\n+    - name: Check docker clickhouse/clickhouse-server building\n+      run: |\n+        cd \"$GITHUB_WORKSPACE/tests/ci\"\n+        python3 docker_server.py --release-type auto\n+        python3 docker_server.py --release-type auto --no-ubuntu \\\n+          --image-repo clickhouse/clickhouse-keeper --image-path docker/keeper\n+    - name: Cleanup\n+      if: always()\n+      run: |\n+        docker kill \"$(docker ps -q)\" ||:\n+        docker rm -f \"$(docker ps -a -q)\" ||:\n+        sudo rm -fr \"$TEMP_PATH\"\ndiff --git a/docker/keeper/Dockerfile b/docker/keeper/Dockerfile\nnew file mode 100644\nindex 000000000000..207dddce1bbe\n--- /dev/null\n+++ b/docker/keeper/Dockerfile\n@@ -0,0 +1,72 @@\n+FROM ubuntu:20.04 AS glibc-donor\n+\n+ARG TARGETARCH\n+RUN arch=${TARGETARCH:-amd64} \\\n+    && case $arch in \\\n+        amd64) rarch=x86_64 ;; \\\n+        arm64) rarch=aarch64 ;; \\\n+    esac \\\n+    && ln -s \"${rarch}-linux-gnu\" /lib/linux-gnu\n+\n+\n+FROM alpine\n+\n+ENV LANG=en_US.UTF-8 \\\n+    LANGUAGE=en_US:en \\\n+    LC_ALL=en_US.UTF-8 \\\n+    TZ=UTC \\\n+    CLICKHOUSE_CONFIG=/etc/clickhouse-server/config.xml\n+\n+COPY --from=glibc-donor /lib/linux-gnu/libc.so.6 /lib/linux-gnu/libdl.so.2 /lib/linux-gnu/libm.so.6 /lib/linux-gnu/libpthread.so.0 /lib/linux-gnu/librt.so.1 /lib/linux-gnu/libnss_dns.so.2 /lib/linux-gnu/libnss_files.so.2 /lib/linux-gnu/libresolv.so.2 /lib/linux-gnu/ld-2.31.so /lib/\n+COPY --from=glibc-donor /etc/nsswitch.conf /etc/\n+COPY entrypoint.sh /entrypoint.sh\n+RUN arch=${TARGETARCH:-amd64} \\\n+    && case $arch in \\\n+        amd64) mkdir -p /lib64 && ln -sf /lib/ld-2.31.so /lib64/ld-linux-x86-64.so.2 ;; \\\n+        arm64) ln -sf /lib/ld-2.31.so /lib/ld-linux-aarch64.so.1 ;; \\\n+    esac\n+\n+ARG REPOSITORY=\"https://s3.amazonaws.com/clickhouse-builds/22.4/31c367d3cd3aefd316778601ff6565119fe36682/package_release\"\n+ARG VERSION=\"22.4.1.917\"\n+ARG PACKAGES=\"clickhouse-keeper\"\n+\n+# user/group precreated explicitly with fixed uid/gid on purpose.\n+# It is especially important for rootless containers: in that case entrypoint\n+# can't do chown and owners of mounted volumes should be configured externally.\n+# We do that in advance at the begining of Dockerfile before any packages will be\n+# installed to prevent picking those uid / gid by some unrelated software.\n+# The same uid / gid (101) is used both for alpine and ubuntu.\n+\n+\n+ARG TARGETARCH\n+RUN arch=${TARGETARCH:-amd64} \\\n+    && for package in ${PACKAGES}; do \\\n+        { \\\n+            { echo \"Get ${REPOSITORY}/${package}-${VERSION}-${arch}.tgz\" \\\n+                && wget -c -q \"${REPOSITORY}/${package}-${VERSION}-${arch}.tgz\" -O \"/tmp/${package}-${VERSION}-${arch}.tgz\" \\\n+                && tar xvzf \"/tmp/${package}-${VERSION}-${arch}.tgz\" --strip-components=1 -C / ; \\\n+            } || \\\n+            { echo \"Fallback to ${REPOSITORY}/${package}-${VERSION}.tgz\" \\\n+                && wget -c -q \"${REPOSITORY}/${package}-${VERSION}.tgz\" -O \"/tmp/${package}-${VERSION}.tgz\" \\\n+                && tar xvzf \"/tmp/${package}-${VERSION}.tgz\" --strip-components=2 -C / ; \\\n+            } ; \\\n+        } || exit 1 \\\n+    ; done \\\n+    && rm /tmp/*.tgz /install -r \\\n+    && addgroup -S -g 101 clickhouse \\\n+    && adduser -S -h /var/lib/clickhouse -s /bin/bash -G clickhouse -g \"ClickHouse keeper\" -u 101 clickhouse \\\n+    && mkdir -p /var/lib/clickhouse /var/log/clickhouse-keeper /etc/clickhouse-keeper \\\n+    && chown clickhouse:clickhouse /var/lib/clickhouse \\\n+    && chown root:clickhouse /var/log/clickhouse-keeper \\\n+    && chmod +x /entrypoint.sh \\\n+    && apk add --no-cache su-exec bash tzdata \\\n+    && cp /usr/share/zoneinfo/UTC /etc/localtime \\\n+    && echo \"UTC\" > /etc/timezone \\\n+    && chmod ugo+Xrw -R /var/lib/clickhouse /var/log/clickhouse-keeper /etc/clickhouse-keeper\n+\n+\n+EXPOSE 2181 10181 44444\n+\n+VOLUME /var/lib/clickhouse /var/log/clickhouse-keeper /etc/clickhouse-keeper\n+\n+ENTRYPOINT [\"/entrypoint.sh\"]\ndiff --git a/docker/keeper/Dockerfile.alpine b/docker/keeper/Dockerfile.alpine\nnew file mode 120000\nindex 000000000000..1d1fe94df492\n--- /dev/null\n+++ b/docker/keeper/Dockerfile.alpine\n@@ -0,0 +1,1 @@\n+Dockerfile\n\\ No newline at end of file\ndiff --git a/docker/keeper/entrypoint.sh b/docker/keeper/entrypoint.sh\nnew file mode 100644\nindex 000000000000..3aacf655c281\n--- /dev/null\n+++ b/docker/keeper/entrypoint.sh\n@@ -0,0 +1,93 @@\n+#!/bin/bash\n+\n+set +x\n+set -eo pipefail\n+shopt -s nullglob\n+\n+DO_CHOWN=1\n+if [ \"${CLICKHOUSE_DO_NOT_CHOWN:-0}\" = \"1\" ]; then\n+    DO_CHOWN=0\n+fi\n+\n+CLICKHOUSE_UID=\"${CLICKHOUSE_UID:-\"$(id -u clickhouse)\"}\"\n+CLICKHOUSE_GID=\"${CLICKHOUSE_GID:-\"$(id -g clickhouse)\"}\"\n+\n+# support --user\n+if [ \"$(id -u)\" = \"0\" ]; then\n+    USER=$CLICKHOUSE_UID\n+    GROUP=$CLICKHOUSE_GID\n+    if command -v gosu &> /dev/null; then\n+        gosu=\"gosu $USER:$GROUP\"\n+    elif command -v su-exec &> /dev/null; then\n+        gosu=\"su-exec $USER:$GROUP\"\n+    else\n+        echo \"No gosu/su-exec detected!\"\n+        exit 1\n+    fi\n+else\n+    USER=\"$(id -u)\"\n+    GROUP=\"$(id -g)\"\n+    gosu=\"\"\n+    DO_CHOWN=0\n+fi\n+\n+KEEPER_CONFIG=\"${KEEPER_CONFIG:-/etc/clickhouse-keeper/config.yaml}\"\n+\n+if [ -f \"$KEEPER_CONFIG\" ] && ! $gosu test -f \"$KEEPER_CONFIG\" -a -r \"$KEEPER_CONFIG\"; then\n+    echo \"Configuration file '$KEEPER_CONFIG' isn't readable by user with id '$USER'\"\n+    exit 1\n+fi\n+\n+DATA_DIR=\"${CLICKHOUSE_DATA_DIR:-/var/lib/clickhouse}\"\n+LOG_DIR=\"${LOG_DIR:-/var/log/clickhouse-keeper}\"\n+LOG_PATH=\"${LOG_DIR}/clickhouse-keeper.log\"\n+ERROR_LOG_PATH=\"${LOG_DIR}/clickhouse-keeper.err.log\"\n+COORDINATION_LOG_DIR=\"${DATA_DIR}/coordination/log\"\n+COORDINATION_SNAPSHOT_DIR=\"${DATA_DIR}/coordination/snapshots\"\n+CLICKHOUSE_WATCHDOG_ENABLE=${CLICKHOUSE_WATCHDOG_ENABLE:-0}\n+\n+for dir in \"$DATA_DIR\" \\\n+  \"$LOG_DIR\" \\\n+  \"$TMP_DIR\" \\\n+  \"$COORDINATION_LOG_DIR\" \\\n+  \"$COORDINATION_SNAPSHOT_DIR\"\n+do\n+    # check if variable not empty\n+    [ -z \"$dir\" ] && continue\n+    # ensure directories exist\n+    if ! mkdir -p \"$dir\"; then\n+        echo \"Couldn't create necessary directory: $dir\"\n+        exit 1\n+    fi\n+\n+    if [ \"$DO_CHOWN\" = \"1\" ]; then\n+        # ensure proper directories permissions\n+        # but skip it for if directory already has proper premissions, cause recursive chown may be slow\n+        if [ \"$(stat -c %u \"$dir\")\" != \"$USER\" ] || [ \"$(stat -c %g \"$dir\")\" != \"$GROUP\" ]; then\n+            chown -R \"$USER:$GROUP\" \"$dir\"\n+        fi\n+    elif ! $gosu test -d \"$dir\" -a -w \"$dir\" -a -r \"$dir\"; then\n+        echo \"Necessary directory '$dir' isn't accessible by user with id '$USER'\"\n+        exit 1\n+    fi\n+done\n+\n+# if no args passed to `docker run` or first argument start with `--`, then the user is passing clickhouse-server arguments\n+if [[ $# -lt 1 ]] || [[ \"$1\" == \"--\"* ]]; then\n+    # Watchdog is launched by default, but does not send SIGINT to the main process,\n+    # so the container can't be finished by ctrl+c\n+    export CLICKHOUSE_WATCHDOG_ENABLE\n+\n+    cd /var/lib/clickhouse\n+\n+    # There is a config file. It is already tested with gosu (if it is readably by keeper user)\n+    if [ -f \"$KEEPER_CONFIG\" ]; then\n+        exec $gosu /usr/bin/clickhouse-keeper --config-file=\"$KEEPER_CONFIG\" --log-file=\"$LOG_PATH\" --errorlog-file=\"$ERROR_LOG_PATH\" \"$@\"\n+    fi\n+\n+    # There is no config file. Will use embedded one\n+    exec $gosu /usr/bin/clickhouse-keeper --log-file=\"$LOG_PATH\" --errorlog-file=\"$ERROR_LOG_PATH\" \"$@\"\n+fi\n+\n+# Otherwise, we assume the user want to run his own process, for example a `bash` shell to explore this image\n+exec \"$@\"\ndiff --git a/docker/server/.gitignore b/docker/server/.gitignore\ndeleted file mode 100644\nindex 692758d55aa1..000000000000\n--- a/docker/server/.gitignore\n+++ /dev/null\n@@ -1,2 +0,0 @@\n-alpine-root/*\n-tgz-packages/*\ndiff --git a/docker/server/Dockerfile b/docker/server/Dockerfile\ndeleted file mode 100644\nindex 5b7990ab0300..000000000000\n--- a/docker/server/Dockerfile\n+++ /dev/null\n@@ -1,122 +0,0 @@\n-FROM ubuntu:20.04\n-\n-# ARG for quick switch to a given ubuntu mirror\n-ARG apt_archive=\"http://archive.ubuntu.com\"\n-RUN sed -i \"s|http://archive.ubuntu.com|$apt_archive|g\" /etc/apt/sources.list\n-\n-ARG repository=\"deb https://packages.clickhouse.com/deb stable main\"\n-ARG version=22.1.1.*\n-\n-# set non-empty deb_location_url url to create a docker image\n-# from debs created by CI build, for example:\n-# docker build . --network host --build-arg version=\"21.4.1.6282\" --build-arg deb_location_url=\"https://clickhouse-builds.s3.yandex.net/21852/069cfbff388b3d478d1a16dc7060b48073f5d522/clickhouse_build_check/clang-11_relwithdebuginfo_none_bundled_unsplitted_disable_False_deb/\" -t filimonovq/clickhouse-server:pr21852\n-ARG deb_location_url=\"\"\n-\n-# set non-empty single_binary_location_url to create docker image\n-# from a single binary url (useful for non-standard builds - with sanitizers, for arm64).\n-# for example (run on aarch64 server):\n-# docker build . --network host --build-arg single_binary_location_url=\"https://builds.clickhouse.com/master/aarch64/clickhouse\" -t altinity/clickhouse-server:master-testing-arm\n-# note: clickhouse-odbc-bridge is not supported there.\n-ARG single_binary_location_url=\"\"\n-\n-# see https://github.com/moby/moby/issues/4032#issuecomment-192327844\n-ARG DEBIAN_FRONTEND=noninteractive\n-\n-# user/group precreated explicitly with fixed uid/gid on purpose.\n-# It is especially important for rootless containers: in that case entrypoint\n-# can't do chown and owners of mounted volumes should be configured externally.\n-# We do that in advance at the begining of Dockerfile before any packages will be\n-# installed to prevent picking those uid / gid by some unrelated software.\n-# The same uid / gid (101) is used both for alpine and ubuntu.\n-\n-# To drop privileges, we need 'su' command, that simply changes uid and gid.\n-# In fact, the 'su' command from Linux is not so simple, due to inherent vulnerability in Linux:\n-# https://ruderich.org/simon/notes/su-sudo-from-root-tty-hijacking\n-# It has to mitigate this drawback of Linux, and to do this, 'su' command is creating it's own pseudo-terminal\n-# and forwarding commands. Due to some ridiculous curcumstances, it does not work in Docker (or it does)\n-# and for these reasons people are using alternatives to the 'su' command in Docker,\n-# that don't mess with the terminal, don't care about closing the opened files, etc...\n-# but can only be safe to drop privileges inside Docker.\n-# The question - what implementation of 'su' command to use.\n-# It should be a simple script doing about just two syscalls.\n-# Some people tend to use 'gosu' tool that is written in Go.\n-# It is not used for several reasons:\n-# 1. Dependency on some foreign code in yet another programming language - does not sound alright.\n-# 2. Anselmo D. Adams suggested not to use it due to false positive alarms in some undisclosed security scanners.\n-\n-COPY su-exec.c /su-exec.c\n-\n-RUN groupadd -r clickhouse --gid=101 \\\n-    && useradd -r -g clickhouse --uid=101 --home-dir=/var/lib/clickhouse --shell=/bin/bash clickhouse \\\n-    && apt-get update \\\n-    && apt-get install --yes --no-install-recommends \\\n-        apt-transport-https \\\n-        ca-certificates \\\n-        dirmngr \\\n-        gnupg \\\n-        locales \\\n-        wget \\\n-        tzdata \\\n-    && mkdir -p /etc/apt/sources.list.d \\\n-    && apt-key adv --keyserver keyserver.ubuntu.com --recv 8919F6BD2B48D754 \\\n-    && echo $repository > /etc/apt/sources.list.d/clickhouse.list \\\n-    && if [ -n \"$deb_location_url\" ]; then \\\n-            echo \"installing from custom url with deb packages: $deb_location_url\" \\\n-            rm -rf /tmp/clickhouse_debs \\\n-            && mkdir -p /tmp/clickhouse_debs \\\n-            && wget --progress=bar:force:noscroll \"${deb_location_url}/clickhouse-common-static_${version}_amd64.deb\" -P /tmp/clickhouse_debs \\\n-            && wget --progress=bar:force:noscroll \"${deb_location_url}/clickhouse-client_${version}_all.deb\" -P /tmp/clickhouse_debs \\\n-            && wget --progress=bar:force:noscroll \"${deb_location_url}/clickhouse-server_${version}_all.deb\" -P /tmp/clickhouse_debs \\\n-            && dpkg -i /tmp/clickhouse_debs/*.deb ; \\\n-       elif [ -n \"$single_binary_location_url\" ]; then \\\n-            echo \"installing from single binary url: $single_binary_location_url\" \\\n-            && rm -rf /tmp/clickhouse_binary \\\n-            && mkdir -p /tmp/clickhouse_binary \\\n-            && wget --progress=bar:force:noscroll \"$single_binary_location_url\" -O /tmp/clickhouse_binary/clickhouse \\\n-            && chmod +x /tmp/clickhouse_binary/clickhouse \\\n-            && /tmp/clickhouse_binary/clickhouse install --user \"clickhouse\" --group \"clickhouse\" ; \\\n-       else \\\n-           echo \"installing from repository: $repository\" \\\n-           && apt-get update \\\n-           && apt-get --yes -o \"Dpkg::Options::=--force-confdef\" -o \"Dpkg::Options::=--force-confold\" upgrade \\\n-           && apt-get install --allow-unauthenticated --yes --no-install-recommends \\\n-                clickhouse-common-static=$version \\\n-                clickhouse-client=$version \\\n-                clickhouse-server=$version ; \\\n-       fi \\\n-    && apt-get install -y --no-install-recommends tcc libc-dev && \\\n-        tcc /su-exec.c -o /bin/su-exec && \\\n-        chown root:root /bin/su-exec && \\\n-        chmod 0755 /bin/su-exec && \\\n-        rm /su-exec.c && \\\n-        apt-get purge -y --auto-remove tcc libc-dev libc-dev-bin libc6-dev linux-libc-dev \\\n-    && clickhouse-local -q 'SELECT * FROM system.build_options' \\\n-    && rm -rf \\\n-        /var/lib/apt/lists/* \\\n-        /var/cache/debconf \\\n-        /tmp/* \\\n-    && apt-get clean \\\n-    && mkdir -p /var/lib/clickhouse /var/log/clickhouse-server /etc/clickhouse-server /etc/clickhouse-client \\\n-    && chmod ugo+Xrw -R /var/lib/clickhouse /var/log/clickhouse-server /etc/clickhouse-server /etc/clickhouse-client\n-\n-# we need to allow \"others\" access to clickhouse folder, because docker container\n-# can be started with arbitrary uid (openshift usecase)\n-\n-RUN locale-gen en_US.UTF-8\n-ENV LANG en_US.UTF-8\n-ENV LANGUAGE en_US:en\n-ENV LC_ALL en_US.UTF-8\n-ENV TZ UTC\n-\n-RUN mkdir /docker-entrypoint-initdb.d\n-\n-COPY docker_related_config.xml /etc/clickhouse-server/config.d/\n-COPY entrypoint.sh /entrypoint.sh\n-RUN chmod +x /entrypoint.sh\n-\n-EXPOSE 9000 8123 9009\n-VOLUME /var/lib/clickhouse\n-\n-ENV CLICKHOUSE_CONFIG /etc/clickhouse-server/config.xml\n-\n-ENTRYPOINT [\"/entrypoint.sh\"]\ndiff --git a/docker/server/Dockerfile b/docker/server/Dockerfile\nnew file mode 120000\nindex 000000000000..fd45f0f7c7cd\n--- /dev/null\n+++ b/docker/server/Dockerfile\n@@ -0,0 +1,1 @@\n+Dockerfile.ubuntu\n\\ No newline at end of file\ndiff --git a/docker/server/Dockerfile.alpine b/docker/server/Dockerfile.alpine\nindex cd192c0c9da4..5aaf5dd55115 100644\n--- a/docker/server/Dockerfile.alpine\n+++ b/docker/server/Dockerfile.alpine\n@@ -1,3 +1,14 @@\n+FROM ubuntu:20.04 AS glibc-donor\n+ARG TARGETARCH\n+\n+RUN arch=${TARGETARCH:-amd64} \\\n+    && case $arch in \\\n+        amd64) rarch=x86_64 ;; \\\n+        arm64) rarch=aarch64 ;; \\\n+    esac \\\n+    && ln -s \"${rarch}-linux-gnu\" /lib/linux-gnu\n+\n+\n FROM alpine\n \n ENV LANG=en_US.UTF-8 \\\n@@ -6,7 +17,24 @@ ENV LANG=en_US.UTF-8 \\\n     TZ=UTC \\\n     CLICKHOUSE_CONFIG=/etc/clickhouse-server/config.xml\n \n-COPY alpine-root/ /\n+COPY --from=glibc-donor /lib/linux-gnu/libc.so.6 /lib/linux-gnu/libdl.so.2 /lib/linux-gnu/libm.so.6 /lib/linux-gnu/libpthread.so.0 /lib/linux-gnu/librt.so.1 /lib/linux-gnu/libnss_dns.so.2 /lib/linux-gnu/libnss_files.so.2 /lib/linux-gnu/libresolv.so.2 /lib/linux-gnu/ld-2.31.so /lib/\n+COPY --from=glibc-donor /etc/nsswitch.conf /etc/\n+COPY docker_related_config.xml /etc/clickhouse-server/config.d/\n+COPY entrypoint.sh /entrypoint.sh\n+\n+ARG TARGETARCH\n+\n+RUN arch=${TARGETARCH:-amd64} \\\n+    && case $arch in \\\n+        amd64) mkdir -p /lib64 && ln -sf /lib/ld-2.31.so /lib64/ld-linux-x86-64.so.2 ;; \\\n+        arm64) ln -sf /lib/ld-2.31.so /lib/ld-linux-aarch64.so.1 ;; \\\n+    esac\n+\n+# lts / testing / prestable / etc\n+ARG REPO_CHANNEL=\"stable\"\n+ARG REPOSITORY=\"https://packages.clickhouse.com/tgz/${REPO_CHANNEL}\"\n+ARG VERSION=\"20.9.3.45\"\n+ARG PACKAGES=\"clickhouse-client clickhouse-server clickhouse-common-static\"\n \n # user/group precreated explicitly with fixed uid/gid on purpose.\n # It is especially important for rootless containers: in that case entrypoint\n@@ -15,9 +43,23 @@ COPY alpine-root/ /\n # installed to prevent picking those uid / gid by some unrelated software.\n # The same uid / gid (101) is used both for alpine and ubuntu.\n \n-RUN addgroup -S -g 101 clickhouse \\\n+RUN arch=${TARGETARCH:-amd64} \\\n+    && for package in ${PACKAGES}; do \\\n+        { \\\n+            { echo \"Get ${REPOSITORY}/${package}-${VERSION}-${arch}.tgz\" \\\n+                && wget -c -q \"${REPOSITORY}/${package}-${VERSION}-${arch}.tgz\" -O \"/tmp/${package}-${VERSION}-${arch}.tgz\" \\\n+                && tar xvzf \"/tmp/${package}-${VERSION}-${arch}.tgz\" --strip-components=1 -C / ; \\\n+            } || \\\n+            { echo \"Fallback to ${REPOSITORY}/${package}-${VERSION}.tgz\" \\\n+                && wget -c -q \"${REPOSITORY}/${package}-${VERSION}.tgz\" -O \"/tmp/${package}-${VERSION}.tgz\" \\\n+                && tar xvzf \"/tmp/${package}-${VERSION}.tgz\" --strip-components=2 -C / ; \\\n+            } ; \\\n+        } || exit 1 \\\n+    ; done \\\n+    && rm /tmp/*.tgz /install -r \\\n+    && addgroup -S -g 101 clickhouse \\\n     && adduser -S -h /var/lib/clickhouse -s /bin/bash -G clickhouse -g \"ClickHouse server\" -u 101 clickhouse \\\n-    && mkdir -p /var/lib/clickhouse /var/log/clickhouse-server /etc/clickhouse-server /etc/clickhouse-client \\\n+    && mkdir -p /var/lib/clickhouse /var/log/clickhouse-server /etc/clickhouse-server/config.d /etc/clickhouse-server/users.d /etc/clickhouse-client /docker-entrypoint-initdb.d \\\n     && chown clickhouse:clickhouse /var/lib/clickhouse \\\n     && chown root:clickhouse /var/log/clickhouse-server \\\n     && chmod +x /entrypoint.sh \\\ndiff --git a/docker/server/Dockerfile.ubuntu b/docker/server/Dockerfile.ubuntu\nnew file mode 100644\nindex 000000000000..cc198772251a\n--- /dev/null\n+++ b/docker/server/Dockerfile.ubuntu\n@@ -0,0 +1,128 @@\n+FROM ubuntu:20.04\n+\n+# see https://github.com/moby/moby/issues/4032#issuecomment-192327844\n+ARG DEBIAN_FRONTEND=noninteractive\n+\n+COPY su-exec.c /su-exec.c\n+\n+# ARG for quick switch to a given ubuntu mirror\n+ARG apt_archive=\"http://archive.ubuntu.com\"\n+RUN sed -i \"s|http://archive.ubuntu.com|${apt_archive}|g\" /etc/apt/sources.list \\\n+    && groupadd -r clickhouse --gid=101 \\\n+    && useradd -r -g clickhouse --uid=101 --home-dir=/var/lib/clickhouse --shell=/bin/bash clickhouse \\\n+    && apt-get update \\\n+    && apt-get install --yes --no-install-recommends \\\n+        apt-transport-https \\\n+        ca-certificates \\\n+        dirmngr \\\n+        gnupg \\\n+        locales \\\n+        wget \\\n+        tzdata \\\n+    && apt-get install -y --no-install-recommends tcc libc-dev && \\\n+        tcc /su-exec.c -o /bin/su-exec && \\\n+        chown root:root /bin/su-exec && \\\n+        chmod 0755 /bin/su-exec && \\\n+        rm /su-exec.c && \\\n+        apt-get purge -y --auto-remove tcc libc-dev libc-dev-bin libc6-dev linux-libc-dev \\\n+    && apt-get clean\n+\n+ARG REPO_CHANNEL=\"stable\"\n+ARG REPOSITORY=\"deb https://packages.clickhouse.com/deb ${REPO_CHANNEL} main\"\n+ARG VERSION=22.1.1.*\n+ARG PACKAGES=\"clickhouse-client clickhouse-server clickhouse-common-static\"\n+\n+# set non-empty deb_location_url url to create a docker image\n+# from debs created by CI build, for example:\n+# docker build . --network host --build-arg version=\"21.4.1.6282\" --build-arg deb_location_url=\"https://clickhouse-builds.s3.yandex.net/21852/069cfbff388b3d478d1a16dc7060b48073f5d522/clickhouse_build_check/clang-11_relwithdebuginfo_none_bundled_unsplitted_disable_False_deb/\" -t filimonovq/clickhouse-server:pr21852\n+ARG deb_location_url=\"\"\n+\n+# set non-empty single_binary_location_url to create docker image\n+# from a single binary url (useful for non-standard builds - with sanitizers, for arm64).\n+# for example (run on aarch64 server):\n+# docker build . --network host --build-arg single_binary_location_url=\"https://builds.clickhouse.com/master/aarch64/clickhouse\" -t altinity/clickhouse-server:master-testing-arm\n+# note: clickhouse-odbc-bridge is not supported there.\n+ARG single_binary_location_url=\"\"\n+\n+# user/group precreated explicitly with fixed uid/gid on purpose.\n+# It is especially important for rootless containers: in that case entrypoint\n+# can't do chown and owners of mounted volumes should be configured externally.\n+# We do that in advance at the begining of Dockerfile before any packages will be\n+# installed to prevent picking those uid / gid by some unrelated software.\n+# The same uid / gid (101) is used both for alpine and ubuntu.\n+\n+# To drop privileges, we need 'su' command, that simply changes uid and gid.\n+# In fact, the 'su' command from Linux is not so simple, due to inherent vulnerability in Linux:\n+# https://ruderich.org/simon/notes/su-sudo-from-root-tty-hijacking\n+# It has to mitigate this drawback of Linux, and to do this, 'su' command is creating it's own pseudo-terminal\n+# and forwarding commands. Due to some ridiculous curcumstances, it does not work in Docker (or it does)\n+# and for these reasons people are using alternatives to the 'su' command in Docker,\n+# that don't mess with the terminal, don't care about closing the opened files, etc...\n+# but can only be safe to drop privileges inside Docker.\n+# The question - what implementation of 'su' command to use.\n+# It should be a simple script doing about just two syscalls.\n+# Some people tend to use 'gosu' tool that is written in Go.\n+# It is not used for several reasons:\n+# 1. Dependency on some foreign code in yet another programming language - does not sound alright.\n+# 2. Anselmo D. Adams suggested not to use it due to false positive alarms in some undisclosed security scanners.\n+\n+ARG TARGETARCH\n+\n+RUN arch=${TARGETARCH:-amd64} \\\n+    && if [ -n \"${deb_location_url}\" ]; then \\\n+        echo \"installing from custom url with deb packages: ${deb_location_url}\" \\\n+        rm -rf /tmp/clickhouse_debs \\\n+        && mkdir -p /tmp/clickhouse_debs \\\n+        && for package in ${PACKAGES}; do \\\n+            { wget --progress=bar:force:noscroll \"${deb_location_url}/${package}_${VERSION}_${arch}.deb\" -P /tmp/clickhouse_debs || \\\n+                wget --progress=bar:force:noscroll \"${deb_location_url}/${package}_${VERSION}_all.deb\" -P /tmp/clickhouse_debs ; } \\\n+            || exit 1 \\\n+        ; done \\\n+        && dpkg -i /tmp/clickhouse_debs/*.deb ; \\\n+    elif [ -n \"${single_binary_location_url}\" ]; then \\\n+        echo \"installing from single binary url: ${single_binary_location_url}\" \\\n+        && rm -rf /tmp/clickhouse_binary \\\n+        && mkdir -p /tmp/clickhouse_binary \\\n+        && wget --progress=bar:force:noscroll \"${single_binary_location_url}\" -O /tmp/clickhouse_binary/clickhouse \\\n+        && chmod +x /tmp/clickhouse_binary/clickhouse \\\n+        && /tmp/clickhouse_binary/clickhouse install --user \"clickhouse\" --group \"clickhouse\" ; \\\n+    else \\\n+        mkdir -p /etc/apt/sources.list.d \\\n+        && apt-key adv --keyserver keyserver.ubuntu.com --recv 8919F6BD2B48D754 \\\n+        && echo ${REPOSITORY} > /etc/apt/sources.list.d/clickhouse.list \\\n+        && echo \"installing from repository: ${REPOSITORY}\" \\\n+        && apt-get update \\\n+        && apt-get --yes -o \"Dpkg::Options::=--force-confdef\" -o \"Dpkg::Options::=--force-confold\" upgrade \\\n+        && for package in ${PACKAGES}; do \\\n+            apt-get install --allow-unauthenticated --yes --no-install-recommends \"${package}=${VERSION}\" || exit 1 \\\n+        ; done \\\n+    ; fi \\\n+    && clickhouse-local -q 'SELECT * FROM system.build_options' \\\n+    && rm -rf \\\n+        /var/lib/apt/lists/* \\\n+        /var/cache/debconf \\\n+        /tmp/* \\\n+    && mkdir -p /var/lib/clickhouse /var/log/clickhouse-server /etc/clickhouse-server /etc/clickhouse-client \\\n+    && chmod ugo+Xrw -R /var/lib/clickhouse /var/log/clickhouse-server /etc/clickhouse-server /etc/clickhouse-client\n+\n+# we need to allow \"others\" access to clickhouse folder, because docker container\n+# can be started with arbitrary uid (openshift usecase)\n+\n+RUN locale-gen en_US.UTF-8\n+ENV LANG en_US.UTF-8\n+ENV LANGUAGE en_US:en\n+ENV LC_ALL en_US.UTF-8\n+ENV TZ UTC\n+\n+RUN mkdir /docker-entrypoint-initdb.d\n+\n+COPY docker_related_config.xml /etc/clickhouse-server/config.d/\n+COPY entrypoint.sh /entrypoint.sh\n+RUN chmod +x /entrypoint.sh\n+\n+EXPOSE 9000 8123 9009\n+VOLUME /var/lib/clickhouse\n+\n+ENV CLICKHOUSE_CONFIG /etc/clickhouse-server/config.xml\n+\n+ENTRYPOINT [\"/entrypoint.sh\"]\ndiff --git a/docker/server/alpine-build.sh b/docker/server/alpine-build.sh\ndeleted file mode 100755\nindex 1b448c61fbbd..000000000000\n--- a/docker/server/alpine-build.sh\n+++ /dev/null\n@@ -1,63 +0,0 @@\n-#!/bin/bash\n-set -x\n-\n-REPO_CHANNEL=\"${REPO_CHANNEL:-stable}\" # lts / testing / prestable / etc\n-REPO_URL=\"${REPO_URL:-\"https://repo.yandex.ru/clickhouse/tgz/${REPO_CHANNEL}\"}\"\n-VERSION=\"${VERSION:-20.9.3.45}\"\n-DOCKER_IMAGE=\"${DOCKER_IMAGE:-clickhouse/clickhouse-server}\"\n-\n-# where original files live\n-DOCKER_BUILD_FOLDER=\"${BASH_SOURCE%/*}\"\n-\n-# we will create root for our image here\n-CONTAINER_ROOT_FOLDER=\"${DOCKER_BUILD_FOLDER}/alpine-root\"\n-\n-# clean up the root from old runs, it's reconstructed each time\n-rm -rf \"$CONTAINER_ROOT_FOLDER\"\n-mkdir -p \"$CONTAINER_ROOT_FOLDER\"\n-\n-# where to put downloaded tgz\n-TGZ_PACKAGES_FOLDER=\"${DOCKER_BUILD_FOLDER}/tgz-packages\"\n-mkdir -p \"$TGZ_PACKAGES_FOLDER\"\n-\n-PACKAGES=( \"clickhouse-client\" \"clickhouse-server\" \"clickhouse-common-static\" )\n-\n-# download tars from the repo\n-for package in \"${PACKAGES[@]}\"\n-do\n-    wget -c -q --show-progress \"${REPO_URL}/${package}-${VERSION}.tgz\" -O \"${TGZ_PACKAGES_FOLDER}/${package}-${VERSION}.tgz\"\n-done\n-\n-# unpack tars\n-for package in \"${PACKAGES[@]}\"\n-do\n-    tar xvzf \"${TGZ_PACKAGES_FOLDER}/${package}-${VERSION}.tgz\" --strip-components=2 -C \"$CONTAINER_ROOT_FOLDER\"\n-done\n-\n-# prepare few more folders\n-mkdir -p \"${CONTAINER_ROOT_FOLDER}/etc/clickhouse-server/users.d\" \\\n-         \"${CONTAINER_ROOT_FOLDER}/etc/clickhouse-server/config.d\" \\\n-         \"${CONTAINER_ROOT_FOLDER}/var/log/clickhouse-server\" \\\n-         \"${CONTAINER_ROOT_FOLDER}/var/lib/clickhouse\" \\\n-         \"${CONTAINER_ROOT_FOLDER}/docker-entrypoint-initdb.d\" \\\n-         \"${CONTAINER_ROOT_FOLDER}/lib64\"\n-\n-cp \"${DOCKER_BUILD_FOLDER}/docker_related_config.xml\" \"${CONTAINER_ROOT_FOLDER}/etc/clickhouse-server/config.d/\"\n-cp \"${DOCKER_BUILD_FOLDER}/entrypoint.sh\"             \"${CONTAINER_ROOT_FOLDER}/entrypoint.sh\"\n-\n-## get glibc components from ubuntu 20.04 and put them to expected place\n-docker pull ubuntu:20.04\n-ubuntu20image=$(docker create --rm ubuntu:20.04)\n-docker cp -L \"${ubuntu20image}\":/lib/x86_64-linux-gnu/libc.so.6       \"${CONTAINER_ROOT_FOLDER}/lib\"\n-docker cp -L \"${ubuntu20image}\":/lib/x86_64-linux-gnu/libdl.so.2      \"${CONTAINER_ROOT_FOLDER}/lib\"\n-docker cp -L \"${ubuntu20image}\":/lib/x86_64-linux-gnu/libm.so.6       \"${CONTAINER_ROOT_FOLDER}/lib\"\n-docker cp -L \"${ubuntu20image}\":/lib/x86_64-linux-gnu/libpthread.so.0 \"${CONTAINER_ROOT_FOLDER}/lib\"\n-docker cp -L \"${ubuntu20image}\":/lib/x86_64-linux-gnu/librt.so.1      \"${CONTAINER_ROOT_FOLDER}/lib\"\n-docker cp -L \"${ubuntu20image}\":/lib/x86_64-linux-gnu/libnss_dns.so.2 \"${CONTAINER_ROOT_FOLDER}/lib\"\n-docker cp -L \"${ubuntu20image}\":/lib/x86_64-linux-gnu/libnss_files.so.2 \"${CONTAINER_ROOT_FOLDER}/lib\"\n-docker cp -L \"${ubuntu20image}\":/lib/x86_64-linux-gnu/libresolv.so.2  \"${CONTAINER_ROOT_FOLDER}/lib\"\n-docker cp -L \"${ubuntu20image}\":/lib64/ld-linux-x86-64.so.2           \"${CONTAINER_ROOT_FOLDER}/lib64\"\n-docker cp -L \"${ubuntu20image}\":/etc/nsswitch.conf                    \"${CONTAINER_ROOT_FOLDER}/etc\"\n-\n-docker build \"$DOCKER_BUILD_FOLDER\" -f Dockerfile.alpine -t \"${DOCKER_IMAGE}:${VERSION}-alpine\" --pull\n-rm -rf \"$CONTAINER_ROOT_FOLDER\"\ndiff --git a/docker/server/local.Dockerfile b/docker/server/local.Dockerfile\ndeleted file mode 100644\nindex 0d86c9ce45a3..000000000000\n--- a/docker/server/local.Dockerfile\n+++ /dev/null\n@@ -1,47 +0,0 @@\n-# Since right now we can't set volumes to the docker during build, we split building container in stages:\n-# 1. build base container\n-# 2. run base conatiner with mounted volumes\n-# 3. commit container as image\n-# 4. build final container atop that image\n-# Middle steps are performed by the bash script.\n-\n-FROM ubuntu:18.04 as clickhouse-server-base\n-ARG gosu_ver=1.14\n-\n-VOLUME /packages/\n-\n-# update to allow installing dependencies of clickhouse automatically\n-RUN apt update; \\\n-    DEBIAN_FRONTEND=noninteractive \\\n-    apt install -y locales;\n-\n-ADD https://github.com/tianon/gosu/releases/download/${gosu_ver}/gosu-amd64 /bin/gosu\n-\n-RUN locale-gen en_US.UTF-8\n-ENV LANG en_US.UTF-8\n-ENV LANGUAGE en_US:en\n-ENV LC_ALL en_US.UTF-8\n-\n-# installing via apt to simulate real-world scenario, where user installs deb package and all it's dependecies automatically.\n-CMD DEBIAN_FRONTEND=noninteractive \\\n-    apt install -y \\\n-        /packages/clickhouse-common-static_*.deb \\\n-        /packages/clickhouse-server_*.deb ;\n-\n-FROM clickhouse-server-base:postinstall as clickhouse-server\n-\n-RUN mkdir /docker-entrypoint-initdb.d\n-\n-COPY docker_related_config.xml /etc/clickhouse-server/config.d/\n-COPY entrypoint.sh /entrypoint.sh\n-\n-RUN chmod +x \\\n-    /entrypoint.sh \\\n-    /bin/gosu\n-\n-EXPOSE 9000 8123 9009\n-VOLUME /var/lib/clickhouse\n-\n-ENV CLICKHOUSE_CONFIG /etc/clickhouse-server/config.xml\n-\n-ENTRYPOINT [\"/entrypoint.sh\"]\n",
  "test_patch": "diff --git a/docker/test/test_runner.sh b/docker/test/test_runner.sh\ndeleted file mode 100755\nindex 0c99c8c2b323..000000000000\n--- a/docker/test/test_runner.sh\n+++ /dev/null\n@@ -1,86 +0,0 @@\n-#!/bin/sh\n-\n-set -e -x\n-\n-# Not sure why shellcheck complains that rc is not assigned before it is referenced.\n-# shellcheck disable=SC2154\n-trap 'rc=$?; echo EXITED WITH: $rc; exit $rc' EXIT\n-\n-# CLI option to prevent rebuilding images, just re-run tests with images leftover from previuos time\n-readonly NO_REBUILD_FLAG=\"--no-rebuild\"\n-\n-readonly CLICKHOUSE_DOCKER_DIR=\"$(realpath \"${1}\")\"\n-readonly CLICKHOUSE_PACKAGES_ARG=\"${2}\"\n-CLICKHOUSE_SERVER_IMAGE=\"${3}\"\n-\n-if [ \"${CLICKHOUSE_PACKAGES_ARG}\" != \"${NO_REBUILD_FLAG}\" ]; then\n-    readonly CLICKHOUSE_PACKAGES_DIR=\"$(realpath \"${2}\")\" # or --no-rebuild\n-fi\n-\n-\n-# In order to allow packages directory to be anywhere, and to reduce amount of context sent to the docker daemon,\n-# all images are built in multiple stages:\n-# 1. build base image, install dependencies\n-# 2. run image with volume mounted, install what needed from those volumes\n-# 3. tag container as image\n-# 4. [optional] build another image atop of tagged.\n-\n-# TODO: optionally mount most recent clickhouse-test and queries directory from local machine\n-\n-if [ \"${CLICKHOUSE_PACKAGES_ARG}\" != \"${NO_REBUILD_FLAG}\" ]; then\n-    docker build --network=host \\\n-        -f \"${CLICKHOUSE_DOCKER_DIR}/test/stateless/clickhouse-statelest-test-runner.Dockerfile\" \\\n-        --target clickhouse-test-runner-base \\\n-        -t clickhouse-test-runner-base:preinstall \\\n-        \"${CLICKHOUSE_DOCKER_DIR}/test/stateless\"\n-\n-    docker rm -f clickhouse-test-runner-installing-packages || true\n-    docker run  --network=host \\\n-        -v \"${CLICKHOUSE_PACKAGES_DIR}:/packages\" \\\n-        --name clickhouse-test-runner-installing-packages \\\n-        clickhouse-test-runner-base:preinstall\n-    docker commit clickhouse-test-runner-installing-packages clickhouse-statelest-test-runner:local\n-    docker rm -f clickhouse-test-runner-installing-packages || true\n-fi\n-\n-# # Create a bind-volume to the clickhouse-test script file\n-# docker volume create --driver local --opt type=none --opt device=/home/enmk/proj/ClickHouse_master/tests/clickhouse-test --opt o=bind clickhouse-test-script-volume\n-# docker volume create --driver local --opt type=none --opt device=/home/enmk/proj/ClickHouse_master/tests/queries --opt o=bind clickhouse-test-queries-dir-volume\n-\n-# Build server image (optional) from local packages\n-if [ -z \"${CLICKHOUSE_SERVER_IMAGE}\" ]; then\n-    CLICKHOUSE_SERVER_IMAGE=\"clickhouse/server:local\"\n-\n-    if [ \"${CLICKHOUSE_PACKAGES_ARG}\" != \"${NO_REBUILD_FLAG}\" ]; then\n-        docker build --network=host \\\n-            -f \"${CLICKHOUSE_DOCKER_DIR}/server/local.Dockerfile\" \\\n-            --target clickhouse-server-base \\\n-            -t clickhouse-server-base:preinstall \\\n-            \"${CLICKHOUSE_DOCKER_DIR}/server\"\n-\n-        docker rm -f clickhouse_server_base_installing_server || true\n-        docker run  --network=host -v \"${CLICKHOUSE_PACKAGES_DIR}:/packages\" \\\n-            --name clickhouse_server_base_installing_server \\\n-            clickhouse-server-base:preinstall\n-        docker commit clickhouse_server_base_installing_server clickhouse-server-base:postinstall\n-\n-        docker build --network=host \\\n-            -f \"${CLICKHOUSE_DOCKER_DIR}/server/local.Dockerfile\" \\\n-            --target clickhouse-server \\\n-            -t \"${CLICKHOUSE_SERVER_IMAGE}\" \\\n-            \"${CLICKHOUSE_DOCKER_DIR}/server\"\n-    fi\n-fi\n-\n-docker rm -f test-runner || true\n-docker-compose down\n-CLICKHOUSE_SERVER_IMAGE=\"${CLICKHOUSE_SERVER_IMAGE}\" \\\n-    docker-compose -f \"${CLICKHOUSE_DOCKER_DIR}/test/test_runner_docker_compose.yaml\" \\\n-    create \\\n-    --build --force-recreate\n-\n-CLICKHOUSE_SERVER_IMAGE=\"${CLICKHOUSE_SERVER_IMAGE}\" \\\n-    docker-compose -f \"${CLICKHOUSE_DOCKER_DIR}/test/test_runner_docker_compose.yaml\" \\\n-    run \\\n-    --name test-runner \\\n-    test-runner\ndiff --git a/docker/test/test_runner_docker_compose.yaml b/docker/test/test_runner_docker_compose.yaml\ndeleted file mode 100644\nindex 2aef6a48d77f..000000000000\n--- a/docker/test/test_runner_docker_compose.yaml\n+++ /dev/null\n@@ -1,34 +0,0 @@\n-version: \"2\"\n-\n-services:\n-  clickhouse-server:\n-    image: ${CLICKHOUSE_SERVER_IMAGE}\n-    expose:\n-      - \"8123\" # HTTP\n-      - \"9000\" # TCP\n-      - \"9009\" # HTTP-interserver\n-    restart: \"no\"\n-\n-  test-runner:\n-    image: clickhouse-statelest-test-runner:local\n-\n-    restart: \"no\"\n-    depends_on:\n-      - clickhouse-server\n-    environment:\n-      # these are used by clickhouse-test to point clickhouse-client to the right server\n-      - CLICKHOUSE_HOST=clickhouse-server\n-      - CLICKHOUSE_PORT=9009\n-      - CLICKHOUSE_TEST_HOST_EXPOSED_PORT=51234\n-    expose:\n-      # port for any test to serve data to clickhouse-server on rare occasion (like URL-engine tables in 00646),\n-      # should match value of CLICKHOUSE_TEST_HOST_EXPOSED_PORT above\n-      - \"51234\"\n-\n-    # NOTE: Dev-mode: mount newest versions of the queries and clickhouse-test script into container.\n-    # volumes:\n-    #   - /home/enmk/proj/ClickHouse_master/tests/queries:/usr/share/clickhouse-test/queries:ro\n-    #   - /home/enmk/proj/ClickHouse_master/tests/clickhouse-test:/usr/bin/clickhouse-test:ro\n-\n-    # String-form instead of list-form to allow multiple arguments in \"${CLICKHOUSE_TEST_ARGS}\"\n-    entrypoint: \"clickhouse-test ${CLICKHOUSE_TEST_ARGS}\"\ndiff --git a/tests/ci/build_check.py b/tests/ci/build_check.py\nindex 2a079a603674..8ef723454d55 100644\n--- a/tests/ci/build_check.py\n+++ b/tests/ci/build_check.py\n@@ -264,7 +264,7 @@ def main():\n         version_type = \"stable\"\n         official_flag = True\n \n-    update_version_local(REPO_COPY, version, version_type)\n+    update_version_local(version, version_type)\n \n     logging.info(\"Updated local files with version\")\n \ndiff --git a/tests/ci/docker_images_check.py b/tests/ci/docker_images_check.py\nindex 30aebb6aaeb7..43671e3a2f73 100644\n--- a/tests/ci/docker_images_check.py\n+++ b/tests/ci/docker_images_check.py\n@@ -397,17 +397,19 @@ def main():\n \n     images_dict = get_images_dict(GITHUB_WORKSPACE, \"docker/images.json\")\n \n+    pr_info = PRInfo()\n     if args.all:\n-        pr_info = PRInfo()\n         pr_info.changed_files = set(images_dict.keys())\n     elif args.image_path:\n-        pr_info = PRInfo()\n         pr_info.changed_files = set(i for i in args.image_path)\n     else:\n-        pr_info = PRInfo(need_changed_files=True)\n+        pr_info.fetch_changed_files()\n \n     changed_images = get_changed_docker_images(pr_info, images_dict)\n-    logging.info(\"Has changed images %s\", \", \".join([im.path for im in changed_images]))\n+    if changed_images:\n+        logging.info(\n+            \"Has changed images: %s\", \", \".join([im.path for im in changed_images])\n+        )\n \n     image_versions, result_version = gen_versions(pr_info, args.suffix)\n \ndiff --git a/tests/ci/docker_server.py b/tests/ci/docker_server.py\nnew file mode 100644\nindex 000000000000..0d22724fcb77\n--- /dev/null\n+++ b/tests/ci/docker_server.py\n@@ -0,0 +1,356 @@\n+#!/usr/bin/env python\n+\n+# here\n+import argparse\n+import json\n+import logging\n+import subprocess\n+from os import path as p, makedirs\n+from typing import List, Tuple\n+\n+from github import Github\n+\n+from clickhouse_helper import ClickHouseHelper, prepare_tests_results_for_clickhouse\n+from commit_status_helper import post_commit_status\n+from docker_images_check import DockerImage\n+from env_helper import CI, GITHUB_RUN_URL, RUNNER_TEMP, S3_BUILDS_BUCKET\n+from get_robot_token import get_best_robot_token, get_parameter_from_ssm\n+from pr_info import PRInfo\n+from s3_helper import S3Helper\n+from stopwatch import Stopwatch\n+from upload_result_helper import upload_results\n+from version_helper import (\n+    get_tagged_versions,\n+    get_version_from_repo,\n+    get_version_from_string,\n+    validate_version,\n+)\n+\n+TEMP_PATH = p.join(RUNNER_TEMP, \"docker_images_check\")\n+BUCKETS = {\"amd64\": \"package_release\", \"arm64\": \"package_aarch64\"}\n+\n+\n+class DelOS(argparse.Action):\n+    def __call__(self, _, namespace, __, option_string=None):\n+        no_build = self.dest[3:] if self.dest.startswith(\"no_\") else self.dest\n+        if no_build in namespace.os:\n+            namespace.os.remove(no_build)\n+\n+\n+def parse_args() -> argparse.Namespace:\n+    parser = argparse.ArgumentParser(\n+        formatter_class=argparse.ArgumentDefaultsHelpFormatter,\n+        description=\"A program to build clickhouse-server image, both alpine and \"\n+        \"ubuntu versions\",\n+    )\n+\n+    parser.add_argument(\n+        \"--version\",\n+        type=version_arg,\n+        default=get_version_from_repo().string,\n+        help=\"a version to build\",\n+    )\n+    parser.add_argument(\n+        \"--release-type\",\n+        type=str,\n+        choices=(\"auto\", \"latest\", \"major\", \"minor\", \"patch\", \"head\"),\n+        default=\"head\",\n+        help=\"version part that will be updated when '--version' is set; \"\n+        \"'auto' is a special case, it will get versions from github and detect the \"\n+        \"release type (latest, major, minor or patch) automatically\",\n+    )\n+    parser.add_argument(\n+        \"--image-path\",\n+        type=str,\n+        default=\"docker/server\",\n+        help=\"a path to docker context directory\",\n+    )\n+    parser.add_argument(\n+        \"--image-repo\",\n+        type=str,\n+        default=\"clickhouse/clickhouse-server\",\n+        help=\"image name on docker hub\",\n+    )\n+    parser.add_argument(\n+        \"--bucket-prefix\",\n+        help=\"if set, then is used as source for deb and tgz files\",\n+    )\n+    parser.add_argument(\"--reports\", default=True, help=argparse.SUPPRESS)\n+    parser.add_argument(\n+        \"--no-reports\",\n+        action=\"store_false\",\n+        dest=\"reports\",\n+        default=argparse.SUPPRESS,\n+        help=\"don't push reports to S3 and github\",\n+    )\n+    parser.add_argument(\"--push\", default=True, help=argparse.SUPPRESS)\n+    parser.add_argument(\n+        \"--no-push-images\",\n+        action=\"store_false\",\n+        dest=\"push\",\n+        default=argparse.SUPPRESS,\n+        help=\"don't push images to docker hub\",\n+    )\n+    parser.add_argument(\"--os\", default=[\"ubuntu\", \"alpine\"], help=argparse.SUPPRESS)\n+    parser.add_argument(\n+        \"--no-ubuntu\",\n+        action=DelOS,\n+        nargs=0,\n+        default=argparse.SUPPRESS,\n+        help=\"don't build ubuntu image\",\n+    )\n+    parser.add_argument(\n+        \"--no-alpine\",\n+        action=DelOS,\n+        nargs=0,\n+        default=argparse.SUPPRESS,\n+        help=\"don't build alpine image\",\n+    )\n+\n+    return parser.parse_args()\n+\n+\n+def version_arg(version: str) -> str:\n+    try:\n+        validate_version(version)\n+        return version\n+    except ValueError as e:\n+        raise argparse.ArgumentTypeError(e)\n+\n+\n+def auto_release_type(version: str, release_type: str) -> str:\n+    if release_type != \"auto\":\n+        return release_type\n+    current_version = get_version_from_string(version)\n+\n+    git_versions = get_tagged_versions()\n+    reference_version = git_versions[0]\n+    for i in reversed(range(len(git_versions))):\n+        if git_versions[i] < current_version:\n+            if i == len(git_versions) - 1:\n+                return \"latest\"\n+            reference_version = git_versions[i + 1]\n+            break\n+\n+    if current_version.major < reference_version.major:\n+        return \"major\"\n+    if current_version.minor < reference_version.minor:\n+        return \"minor\"\n+    if current_version.patch < reference_version.patch:\n+        return \"patch\"\n+\n+    raise ValueError(\n+        \"Release type 'tweak' is not supported for \"\n+        f\"{current_version.string} < {reference_version.string}\"\n+    )\n+\n+\n+def gen_tags(version: str, release_type: str) -> List[str]:\n+    \"\"\"\n+    22.2.2.2 + latest:\n+    - latest\n+    - 22\n+    - 22.2\n+    - 22.2.2\n+    - 22.2.2.2\n+    22.2.2.2 + major:\n+    - 22\n+    - 22.2\n+    - 22.2.2\n+    - 22.2.2.2\n+    22.2.2.2 + minor:\n+    - 22.2\n+    - 22.2.2\n+    - 22.2.2.2\n+    22.2.2.2 + patch:\n+    - 22.2.2\n+    - 22.2.2.2\n+    22.2.2.2 + head:\n+    - head\n+    \"\"\"\n+    validate_version(version)\n+    parts = version.split(\".\")\n+    tags = []\n+    if release_type == \"latest\":\n+        tags.append(release_type)\n+        for i in range(len(parts)):\n+            tags.append(\".\".join(parts[: i + 1]))\n+    elif release_type == \"major\":\n+        for i in range(len(parts)):\n+            tags.append(\".\".join(parts[: i + 1]))\n+    elif release_type == \"minor\":\n+        for i in range(1, len(parts)):\n+            tags.append(\".\".join(parts[: i + 1]))\n+    elif release_type == \"patch\":\n+        for i in range(2, len(parts)):\n+            tags.append(\".\".join(parts[: i + 1]))\n+    elif release_type == \"head\":\n+        tags.append(release_type)\n+    else:\n+        raise ValueError(f\"{release_type} is not valid release part\")\n+    return tags\n+\n+\n+def buildx_args(bucket_prefix: str, arch: str) -> List[str]:\n+    args = [f\"--platform=linux/{arch}\", f\"--label=build-url={GITHUB_RUN_URL}\"]\n+    if bucket_prefix:\n+        url = p.join(bucket_prefix, BUCKETS[arch])  # to prevent a double //\n+        args.append(f\"--build-arg=REPOSITORY='{url}'\")\n+        args.append(f\"--build-arg=deb_location_url='{url}'\")\n+    return args\n+\n+\n+def build_and_push_image(\n+    image: DockerImage, push: bool, bucket_prefix: str, os: str, tag: str, version: str\n+) -> List[Tuple[str, str]]:\n+    result = []\n+    if os != \"ubuntu\":\n+        tag += f\"-{os}\"\n+    init_args = [\"docker\", \"buildx\", \"build\"]\n+    if push:\n+        init_args.append(\"--push\")\n+        init_args.append(\"--output=type=image,push-by-digest=true\")\n+        init_args.append(f\"--tag={image.repo}\")\n+    else:\n+        init_args.append(\"--output=type=docker\")\n+\n+    # `docker buildx build --load` does not support multiple images currently\n+    # images must be built separately and merged together with `docker manifest`\n+    digests = []\n+    for arch in BUCKETS:\n+        arch_tag = f\"{tag}-{arch}\"\n+        metadata_path = p.join(TEMP_PATH, arch_tag)\n+        dockerfile = p.join(image.full_path, f\"Dockerfile.{os}\")\n+        cmd_args = list(init_args)\n+        cmd_args.extend(buildx_args(bucket_prefix, arch))\n+        if not push:\n+            cmd_args.append(f\"--tag={image.repo}:{arch_tag}\")\n+        cmd_args.extend(\n+            [\n+                f\"--metadata-file={metadata_path}\",\n+                f\"--build-arg=VERSION='{version}'\",\n+                \"--progress=plain\",\n+                f\"--file={dockerfile}\",\n+                image.full_path,\n+            ]\n+        )\n+        cmd = \" \".join(cmd_args)\n+        logging.info(\"Building image %s:%s for arch %s: %s\", image.repo, tag, arch, cmd)\n+        with subprocess.Popen(\n+            cmd,\n+            shell=True,\n+            stderr=subprocess.STDOUT,\n+            stdout=subprocess.PIPE,\n+            universal_newlines=True,\n+        ) as process:\n+            for line in process.stdout:  # type: ignore\n+                print(line, end=\"\")\n+            retcode = process.wait()\n+            if retcode != 0:\n+                result.append((f\"{image.repo}:{tag}-{arch}\", \"FAIL\"))\n+                return result\n+            result.append((f\"{image.repo}:{tag}-{arch}\", \"OK\"))\n+            with open(metadata_path, \"rb\") as m:\n+                metadata = json.load(m)\n+                digests.append(metadata[\"containerimage.digest\"])\n+    if push:\n+        cmd = (\n+            \"docker buildx imagetools create \"\n+            f\"--tag {image.repo}:{tag} {' '.join(digests)}\"\n+        )\n+        logging.info(\"Pushing merged %s:%s image: %s\", image.repo, tag, cmd)\n+        with subprocess.Popen(\n+            cmd,\n+            shell=True,\n+            stderr=subprocess.STDOUT,\n+            stdout=subprocess.PIPE,\n+            universal_newlines=True,\n+        ) as process:\n+            for line in process.stdout:  # type: ignore\n+                print(line, end=\"\")\n+            retcode = process.wait()\n+            if retcode != 0:\n+                result.append((f\"{image.repo}:{tag}\", \"FAIL\"))\n+    else:\n+        logging.info(\n+            \"Merging is available only on push, separate %s images are created\",\n+            f\"{image.repo}:{tag}-$arch\",\n+        )\n+\n+    return result\n+\n+\n+def main():\n+    logging.basicConfig(level=logging.INFO)\n+    stopwatch = Stopwatch()\n+    makedirs(TEMP_PATH, exist_ok=True)\n+\n+    args = parse_args()\n+    image = DockerImage(args.image_path, args.image_repo, False)\n+    args.release_type = auto_release_type(args.version, args.release_type)\n+    tags = gen_tags(args.version, args.release_type)\n+    NAME = f\"Docker image {image.repo} building check (actions)\"\n+    pr_info = None\n+    if CI:\n+        pr_info = PRInfo()\n+        args.bucket_prefix = (\n+            f\"https://s3.amazonaws.com/{S3_BUILDS_BUCKET}/\"\n+            f\"{pr_info.number}/{pr_info.sha}\"\n+        )\n+\n+    if args.push:\n+        subprocess.check_output(  # pylint: disable=unexpected-keyword-arg\n+            \"docker login --username 'robotclickhouse' --password-stdin\",\n+            input=get_parameter_from_ssm(\"dockerhub_robot_password\"),\n+            encoding=\"utf-8\",\n+            shell=True,\n+        )\n+        NAME = f\"Docker image {image.repo} build and push (actions)\"\n+\n+    logging.info(\"Following tags will be created: %s\", \", \".join(tags))\n+    status = \"success\"\n+    test_results = []  # type: List[Tuple[str, str]]\n+    for os in args.os:\n+        for tag in tags:\n+            test_results.extend(\n+                build_and_push_image(\n+                    image, args.push, args.bucket_prefix, os, tag, args.version\n+                )\n+            )\n+            if test_results[-1][1] != \"OK\":\n+                status = \"failure\"\n+\n+    pr_info = pr_info or PRInfo()\n+    s3_helper = S3Helper(\"https://s3.amazonaws.com\")\n+\n+    url = upload_results(s3_helper, pr_info.number, pr_info.sha, test_results, [], NAME)\n+\n+    print(f\"::notice ::Report url: {url}\")\n+    print(f'::set-output name=url_output::\"{url}\"')\n+\n+    if not args.reports:\n+        return\n+\n+    description = f\"Processed tags: {', '.join(tags)}\"\n+\n+    if len(description) >= 140:\n+        description = description[:136] + \"...\"\n+\n+    gh = Github(get_best_robot_token())\n+    post_commit_status(gh, pr_info.sha, NAME, description, status, url)\n+\n+    prepared_events = prepare_tests_results_for_clickhouse(\n+        pr_info,\n+        test_results,\n+        status,\n+        stopwatch.duration_seconds,\n+        stopwatch.start_time_str,\n+        url,\n+        NAME,\n+    )\n+    ch_helper = ClickHouseHelper()\n+    ch_helper.insert_events_into(db=\"default\", table=\"checks\", events=prepared_events)\n+\n+\n+if __name__ == \"__main__\":\n+    main()\ndiff --git a/tests/ci/docker_test.py b/tests/ci/docker_test.py\nindex 2b864b6b94c6..e2dc8874a7ae 100644\n--- a/tests/ci/docker_test.py\n+++ b/tests/ci/docker_test.py\n@@ -2,12 +2,16 @@\n \n import os\n import unittest\n-from unittest.mock import patch\n+from unittest.mock import patch, MagicMock\n \n from env_helper import GITHUB_RUN_URL\n from pr_info import PRInfo\n import docker_images_check as di\n \n+with patch(\"git_helper.Git\"):\n+    from version_helper import get_version_from_string, get_tagged_versions\n+    import docker_server as ds\n+\n # di.logging.basicConfig(level=di.logging.INFO)\n \n \n@@ -221,5 +225,45 @@ def test_process_image_with_parents(self, mock_build):\n         self.assertEqual(results, expected)\n \n \n+class TestDockerServer(unittest.TestCase):\n+    def test_gen_tags(self):\n+        cases = (\n+            ((\"22.2.2.2\", \"latest\"), [\"latest\", \"22\", \"22.2\", \"22.2.2\", \"22.2.2.2\"]),\n+            ((\"22.2.2.2\", \"major\"), [\"22\", \"22.2\", \"22.2.2\", \"22.2.2.2\"]),\n+            ((\"22.2.2.2\", \"minor\"), [\"22.2\", \"22.2.2\", \"22.2.2.2\"]),\n+            ((\"22.2.2.2\", \"patch\"), [\"22.2.2\", \"22.2.2.2\"]),\n+            ((\"22.2.2.2\", \"head\"), [\"head\"]),\n+        )\n+        for case in cases:\n+            version, release_type = case[0]\n+            self.assertEqual(case[1], ds.gen_tags(version, release_type))\n+\n+        with self.assertRaises(ValueError):\n+            ds.gen_tags(\"22.2.2.2\", \"auto\")\n+\n+    @patch(\"docker_server.get_tagged_versions\")\n+    def test_auto_release_type(self, mock_tagged_versions: MagicMock):\n+        mock_tagged_versions.return_value = [\n+            get_version_from_string(\"1.1.1.1\"),\n+            get_version_from_string(\"1.2.1.1\"),\n+            get_version_from_string(\"2.1.1.1\"),\n+            get_version_from_string(\"2.2.1.1\"),\n+            get_version_from_string(\"2.2.2.1\"),\n+        ]\n+        cases = (\n+            (\"1.0.1.1\", \"minor\"),\n+            (\"1.1.2.1\", \"minor\"),\n+            (\"1.3.1.1\", \"major\"),\n+            (\"2.1.2.1\", \"minor\"),\n+            (\"2.2.1.3\", \"patch\"),\n+            (\"2.2.3.1\", \"latest\"),\n+            (\"2.3.1.1\", \"latest\"),\n+        )\n+        _ = get_tagged_versions()\n+        for case in cases:\n+            release = ds.auto_release_type(case[0], \"auto\")\n+            self.assertEqual(case[1], release)\n+\n+\n if __name__ == \"__main__\":\n     unittest.main()\ndiff --git a/tests/ci/env_helper.py b/tests/ci/env_helper.py\nindex c34162ba51ad..242d6bf5e409 100644\n--- a/tests/ci/env_helper.py\n+++ b/tests/ci/env_helper.py\n@@ -1,7 +1,11 @@\n import os\n+from os import path as p\n+\n+module_dir = p.abspath(p.dirname(__file__))\n+git_root = p.abspath(p.join(module_dir, \"..\", \"..\"))\n \n CI = bool(os.getenv(\"CI\"))\n-TEMP_PATH = os.getenv(\"TEMP_PATH\", os.path.abspath(\".\"))\n+TEMP_PATH = os.getenv(\"TEMP_PATH\", module_dir)\n \n CACHES_PATH = os.getenv(\"CACHES_PATH\", TEMP_PATH)\n CLOUDFLARE_TOKEN = os.getenv(\"CLOUDFLARE_TOKEN\")\n@@ -9,11 +13,11 @@\n GITHUB_REPOSITORY = os.getenv(\"GITHUB_REPOSITORY\", \"ClickHouse/ClickHouse\")\n GITHUB_RUN_ID = os.getenv(\"GITHUB_RUN_ID\", \"0\")\n GITHUB_SERVER_URL = os.getenv(\"GITHUB_SERVER_URL\", \"https://github.com\")\n-GITHUB_WORKSPACE = os.getenv(\"GITHUB_WORKSPACE\", os.path.abspath(\"../../\"))\n+GITHUB_WORKSPACE = os.getenv(\"GITHUB_WORKSPACE\", git_root)\n GITHUB_RUN_URL = f\"{GITHUB_SERVER_URL}/{GITHUB_REPOSITORY}/actions/runs/{GITHUB_RUN_ID}\"\n IMAGES_PATH = os.getenv(\"IMAGES_PATH\")\n-REPORTS_PATH = os.getenv(\"REPORTS_PATH\", \"./reports\")\n-REPO_COPY = os.getenv(\"REPO_COPY\", os.path.abspath(\"../../\"))\n-RUNNER_TEMP = os.getenv(\"RUNNER_TEMP\", os.path.abspath(\"./tmp\"))\n+REPORTS_PATH = os.getenv(\"REPORTS_PATH\", p.abspath(p.join(module_dir, \"./reports\")))\n+REPO_COPY = os.getenv(\"REPO_COPY\", git_root)\n+RUNNER_TEMP = os.getenv(\"RUNNER_TEMP\", p.abspath(p.join(module_dir, \"./tmp\")))\n S3_BUILDS_BUCKET = os.getenv(\"S3_BUILDS_BUCKET\", \"clickhouse-builds\")\n S3_TEST_REPORTS_BUCKET = os.getenv(\"S3_TEST_REPORTS_BUCKET\", \"clickhouse-test-reports\")\ndiff --git a/tests/ci/git_helper.py b/tests/ci/git_helper.py\nindex 2d28c6930877..5c02ea53cf89 100644\n--- a/tests/ci/git_helper.py\n+++ b/tests/ci/git_helper.py\n@@ -3,7 +3,7 @@\n import os.path as p\n import re\n import subprocess\n-from typing import Optional\n+from typing import List, Optional\n \n # ^ and $ match subline in `multiple\\nlines`\n # \\A and \\Z match only start and end of the whole string\n@@ -89,7 +89,7 @@ def update(self):\n             self.run(f\"git rev-list {self.latest_tag}..HEAD --count\")\n         )\n \n-    def _check_tag(self, value: str):\n+    def check_tag(self, value: str):\n         if value == \"\":\n             return\n         if not self._tag_pattern.match(value):\n@@ -101,7 +101,7 @@ def latest_tag(self) -> str:\n \n     @latest_tag.setter\n     def latest_tag(self, value: str):\n-        self._check_tag(value)\n+        self.check_tag(value)\n         self._latest_tag = value\n \n     @property\n@@ -110,7 +110,7 @@ def new_tag(self) -> str:\n \n     @new_tag.setter\n     def new_tag(self, value: str):\n-        self._check_tag(value)\n+        self.check_tag(value)\n         self._new_tag = value\n \n     @property\n@@ -122,3 +122,6 @@ def tweak(self) -> int:\n \n         version = self.latest_tag.split(\"-\", maxsplit=1)[0]\n         return int(version.split(\".\")[-1]) + self.commits_since_tag\n+\n+    def get_tags(self) -> List[str]:\n+        return self.run(\"git tag\").split()\ndiff --git a/tests/ci/version_helper.py b/tests/ci/version_helper.py\nindex 3bb547333e7f..7db96cfde7cf 100755\n--- a/tests/ci/version_helper.py\n+++ b/tests/ci/version_helper.py\n@@ -1,10 +1,8 @@\n #!/usr/bin/env python3\n-import datetime\n import logging\n import os.path as p\n-import subprocess\n from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter\n-from typing import Dict, Tuple, Union\n+from typing import Dict, List, Tuple, Union\n \n from git_helper import Git, removeprefix\n \n@@ -49,12 +47,16 @@ def __init__(\n         patch: Union[int, str],\n         revision: Union[int, str],\n         git: Git,\n+        tweak: str = None,\n     ):\n         self._major = int(major)\n         self._minor = int(minor)\n         self._patch = int(patch)\n         self._revision = int(revision)\n         self._git = git\n+        self._tweak = None\n+        if tweak is not None:\n+            self._tweak = int(tweak)\n         self._describe = \"\"\n \n     def update(self, part: str) -> \"ClickHouseVersion\":\n@@ -89,7 +91,7 @@ def patch(self) -> int:\n \n     @property\n     def tweak(self) -> int:\n-        return self._git.tweak\n+        return self._tweak or self._git.tweak\n \n     @property\n     def revision(self) -> int:\n@@ -129,6 +131,25 @@ def with_description(self, version_type):\n             raise ValueError(f\"version type {version_type} not in {VersionType.VALID}\")\n         self._describe = f\"v{self.string}-{version_type}\"\n \n+    def __eq__(self, other) -> bool:\n+        if not isinstance(self, type(other)):\n+            return NotImplemented\n+        return (\n+            self.major == other.major\n+            and self.minor == other.minor\n+            and self.patch == other.patch\n+            and self.tweak == other.tweak\n+        )\n+\n+    def __lt__(self, other: \"ClickHouseVersion\") -> bool:\n+        for part in (\"major\", \"minor\", \"patch\", \"tweak\"):\n+            if getattr(self, part) < getattr(other, part):\n+                return True\n+            elif getattr(self, part) > getattr(other, part):\n+                return False\n+\n+        return False\n+\n \n class VersionType:\n     LTS = \"lts\"\n@@ -138,6 +159,14 @@ class VersionType:\n     VALID = (TESTING, PRESTABLE, STABLE, LTS)\n \n \n+def validate_version(version: str):\n+    parts = version.split(\".\")\n+    if len(parts) != 4:\n+        raise ValueError(f\"{version} does not contain 4 parts\")\n+    for part in parts:\n+        int(part)\n+\n+\n def get_abs_path(path: str) -> str:\n     return p.abspath(p.join(git.root, path))\n \n@@ -176,6 +205,29 @@ def get_version_from_repo(\n     )\n \n \n+def get_version_from_string(version: str) -> ClickHouseVersion:\n+    validate_version(version)\n+    parts = version.split(\".\")\n+    return ClickHouseVersion(parts[0], parts[1], parts[2], -1, git, parts[3])\n+\n+\n+def get_version_from_tag(tag: str) -> ClickHouseVersion:\n+    git.check_tag(tag)\n+    tag = tag[1:].split(\"-\")[0]\n+    return get_version_from_string(tag)\n+\n+\n+def get_tagged_versions() -> List[ClickHouseVersion]:\n+    versions = []\n+    for tag in git.get_tags():\n+        try:\n+            version = get_version_from_tag(tag)\n+            versions.append(version)\n+        except Exception:\n+            continue\n+    return sorted(versions)\n+\n+\n def update_cmake_version(\n     version: ClickHouseVersion,\n     versions_path: str = FILE_WITH_VERSION_PATH,\n@@ -185,22 +237,6 @@ def update_cmake_version(\n         f.write(VERSIONS_TEMPLATE.format_map(version.as_dict()))\n \n \n-def _update_changelog(repo_path: str, version: ClickHouseVersion):\n-    cmd = \"\"\"sed \\\n-        -e \"s/[@]VERSION_STRING[@]/{version_str}/g\" \\\n-        -e \"s/[@]DATE[@]/{date}/g\" \\\n-        -e \"s/[@]AUTHOR[@]/clickhouse-release/g\" \\\n-        -e \"s/[@]EMAIL[@]/clickhouse-release@yandex-team.ru/g\" \\\n-        < {in_path} > {changelog_path}\n-    \"\"\".format(\n-        version_str=version.string,\n-        date=datetime.datetime.now().strftime(\"%a, %d %b %Y %H:%M:%S\") + \" +0300\",\n-        in_path=p.join(repo_path, CHANGELOG_IN_PATH),\n-        changelog_path=p.join(repo_path, CHANGELOG_PATH),\n-    )\n-    subprocess.check_call(cmd, shell=True)\n-\n-\n def update_contributors(\n     relative_contributors_path: str = GENERATED_CONTRIBUTORS, force: bool = False\n ):\n@@ -225,22 +261,10 @@ def update_contributors(\n         cfd.write(content)\n \n \n-def _update_dockerfile(repo_path: str, version: ClickHouseVersion):\n-    version_str_for_docker = \".\".join(\n-        [str(version.major), str(version.minor), str(version.patch), \"*\"]\n-    )\n-    cmd = \"ls -1 {path}/docker/*/Dockerfile | xargs sed -i -r -e 's/ARG version=.+$/ARG version='{ver}'/'\".format(\n-        path=repo_path, ver=version_str_for_docker\n-    )\n-    subprocess.check_call(cmd, shell=True)\n-\n-\n-def update_version_local(repo_path, version, version_type=\"testing\"):\n+def update_version_local(version, version_type=\"testing\"):\n     update_contributors()\n     version.with_description(version_type)\n     update_cmake_version(version)\n-    _update_changelog(repo_path, version)\n-    _update_dockerfile(repo_path, version)\n \n \n def main():\n",
  "problem_statement": "Build and push docker images on new releases\n- [x] redo alpine image to use clean Dockerfile\r\n- [x] Create a script in tests/ci to build both ubuntu and alpine images\r\n- [x] Add a job to a ReleaseCI\r\n- [x] Add a job to MasterCI to build and push `clickhouse/clickhouse-server:head` image for each merged PR\r\n\r\ncc: @nikitamikhaylov \n",
  "hints_text": "",
  "created_at": "2022-03-11T11:42:24Z",
  "modified_files": [
    ".github/workflows/master.yml",
    ".github/workflows/pull_request.yml",
    ".github/workflows/release.yml",
    "b/docker/keeper/Dockerfile",
    "b/docker/keeper/Dockerfile.alpine",
    "b/docker/keeper/entrypoint.sh",
    "docker/server/.gitignore",
    "docker/server/Dockerfile",
    "b/docker/server/Dockerfile",
    "docker/server/Dockerfile.alpine",
    "b/docker/server/Dockerfile.ubuntu",
    "docker/server/alpine-build.sh",
    "docker/server/local.Dockerfile"
  ],
  "modified_test_files": [
    "docker/test/test_runner.sh",
    "docker/test/test_runner_docker_compose.yaml",
    "tests/ci/build_check.py",
    "tests/ci/docker_images_check.py",
    "b/tests/ci/docker_server.py",
    "tests/ci/docker_test.py",
    "tests/ci/env_helper.py",
    "tests/ci/git_helper.py",
    "tests/ci/version_helper.py"
  ]
}