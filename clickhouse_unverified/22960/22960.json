{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 22960,
  "instance_id": "ClickHouse__ClickHouse-22960",
  "issue_numbers": [
    "20979"
  ],
  "base_commit": "2d4a8c47875e2bfff913599b4a6eb641d5335339",
  "patch": "diff --git a/src/Dictionaries/CacheDictionaryStorage.h b/src/Dictionaries/CacheDictionaryStorage.h\nindex 98031801b114..d91ffbbb279e 100644\n--- a/src/Dictionaries/CacheDictionaryStorage.h\n+++ b/src/Dictionaries/CacheDictionaryStorage.h\n@@ -601,6 +601,7 @@ class CacheDictionaryStorage final : public ICacheDictionaryStorage\n             PaddedPODArray<Decimal32>,\n             PaddedPODArray<Decimal64>,\n             PaddedPODArray<Decimal128>,\n+            PaddedPODArray<Decimal256>,\n             PaddedPODArray<Float32>,\n             PaddedPODArray<Float64>,\n             PaddedPODArray<StringRef>,\ndiff --git a/src/Dictionaries/DictionaryStructure.cpp b/src/Dictionaries/DictionaryStructure.cpp\nindex 806ee0b80e00..7d2f826b4f1b 100644\n--- a/src/Dictionaries/DictionaryStructure.cpp\n+++ b/src/Dictionaries/DictionaryStructure.cpp\n@@ -65,6 +65,7 @@ AttributeUnderlyingType getAttributeUnderlyingType(const DataTypePtr & type)\n         case TypeIndex::Decimal32:      return AttributeUnderlyingType::utDecimal32;\n         case TypeIndex::Decimal64:      return AttributeUnderlyingType::utDecimal64;\n         case TypeIndex::Decimal128:     return AttributeUnderlyingType::utDecimal128;\n+        case TypeIndex::Decimal256:     return AttributeUnderlyingType::utDecimal256;\n \n         case TypeIndex::Date:           return AttributeUnderlyingType::utUInt16;\n         case TypeIndex::DateTime:       return AttributeUnderlyingType::utUInt32;\n@@ -85,7 +86,7 @@ AttributeUnderlyingType getAttributeUnderlyingType(const DataTypePtr & type)\n }\n \n \n-std::string toString(const AttributeUnderlyingType type)\n+std::string toString(AttributeUnderlyingType type)\n {\n     switch (type)\n     {\n@@ -117,6 +118,8 @@ std::string toString(const AttributeUnderlyingType type)\n             return \"Decimal64\";\n         case AttributeUnderlyingType::utDecimal128:\n             return \"Decimal128\";\n+        case AttributeUnderlyingType::utDecimal256:\n+            return \"Decimal256\";\n         case AttributeUnderlyingType::utString:\n             return \"String\";\n     }\ndiff --git a/src/Dictionaries/DictionaryStructure.h b/src/Dictionaries/DictionaryStructure.h\nindex 4f03b4ff09e9..ce5dd3dd422c 100644\n--- a/src/Dictionaries/DictionaryStructure.h\n+++ b/src/Dictionaries/DictionaryStructure.h\n@@ -32,13 +32,14 @@ enum class AttributeUnderlyingType\n     utDecimal32,\n     utDecimal64,\n     utDecimal128,\n+    utDecimal256,\n     utString\n };\n \n \n AttributeUnderlyingType getAttributeUnderlyingType(const std::string & type);\n \n-std::string toString(const AttributeUnderlyingType type);\n+std::string toString(AttributeUnderlyingType type);\n \n /// Min and max lifetimes for a dictionary or it's entry\n using DictionaryLifetime = ExternalLoadableLifetime;\n@@ -125,6 +126,9 @@ void callOnDictionaryAttributeType(AttributeUnderlyingType type, F&& func)\n         case AttributeUnderlyingType::utDecimal128:\n             func(DictionaryAttributeType<Decimal128>());\n             break;\n+        case AttributeUnderlyingType::utDecimal256:\n+            func(DictionaryAttributeType<Decimal256>());\n+            break;\n     }\n };\n \ndiff --git a/src/Dictionaries/FlatDictionary.h b/src/Dictionaries/FlatDictionary.h\nindex 27d361da1e17..0a5f88f270ad 100644\n--- a/src/Dictionaries/FlatDictionary.h\n+++ b/src/Dictionaries/FlatDictionary.h\n@@ -120,6 +120,7 @@ class FlatDictionary final : public IDictionary\n             Decimal32,\n             Decimal64,\n             Decimal128,\n+            Decimal256,\n             Float32,\n             Float64,\n             StringRef>\n@@ -137,6 +138,7 @@ class FlatDictionary final : public IDictionary\n             ContainerType<Decimal32>,\n             ContainerType<Decimal64>,\n             ContainerType<Decimal128>,\n+            ContainerType<Decimal256>,\n             ContainerType<Float32>,\n             ContainerType<Float64>,\n             ContainerType<StringRef>>\ndiff --git a/src/Dictionaries/HashedDictionary.cpp b/src/Dictionaries/HashedDictionary.cpp\nindex 913f06b5e92c..8c1081ebea0f 100644\n--- a/src/Dictionaries/HashedDictionary.cpp\n+++ b/src/Dictionaries/HashedDictionary.cpp\n@@ -123,7 +123,7 @@ ColumnPtr HashedDictionary<dictionary_key_type, sparse>::getColumn(\n                 [&](const size_t row, const auto value) { return out[row] = value; },\n                 [&](const size_t row)\n                 {\n-                    out[row] = 0;\n+                    out[row] = ValueType();\n                     (*vec_null_map_to)[row] = true;\n                 },\n                 default_value_extractor);\ndiff --git a/src/Dictionaries/HashedDictionary.h b/src/Dictionaries/HashedDictionary.h\nindex bc66d10d7faf..0d0ab8dcb433 100644\n--- a/src/Dictionaries/HashedDictionary.h\n+++ b/src/Dictionaries/HashedDictionary.h\n@@ -152,6 +152,7 @@ class HashedDictionary final : public IDictionary\n             Decimal32,\n             Decimal64,\n             Decimal128,\n+            Decimal256,\n             Float32,\n             Float64,\n             StringRef>\n@@ -170,13 +171,13 @@ class HashedDictionary final : public IDictionary\n             CollectionType<Decimal32>,\n             CollectionType<Decimal64>,\n             CollectionType<Decimal128>,\n+            CollectionType<Decimal256>,\n             CollectionType<Float32>,\n             CollectionType<Float64>,\n             CollectionType<StringRef>>\n             container;\n \n         std::unique_ptr<Arena> string_arena;\n-\n     };\n \n     void createAttributes();\ndiff --git a/src/Dictionaries/IPAddressDictionary.h b/src/Dictionaries/IPAddressDictionary.h\nindex cf79caa75fcd..619d1579e4e3 100644\n--- a/src/Dictionaries/IPAddressDictionary.h\n+++ b/src/Dictionaries/IPAddressDictionary.h\n@@ -101,6 +101,7 @@ class IPAddressDictionary final : public IDictionary\n             Decimal32,\n             Decimal64,\n             Decimal128,\n+            Decimal256,\n             Float32,\n             Float64,\n             String>\n@@ -118,6 +119,7 @@ class IPAddressDictionary final : public IDictionary\n             ContainerType<Decimal32>,\n             ContainerType<Decimal64>,\n             ContainerType<Decimal128>,\n+            ContainerType<Decimal256>,\n             ContainerType<Float32>,\n             ContainerType<Float64>,\n             ContainerType<StringRef>>\ndiff --git a/src/Dictionaries/MongoDBDictionarySource.cpp b/src/Dictionaries/MongoDBDictionarySource.cpp\nindex 5b5d0c4d20fc..782174ded6f0 100644\n--- a/src/Dictionaries/MongoDBDictionarySource.cpp\n+++ b/src/Dictionaries/MongoDBDictionarySource.cpp\n@@ -198,6 +198,7 @@ BlockInputStreamPtr MongoDBDictionarySource::loadKeys(const Columns & key_column\n                 case AttributeUnderlyingType::utDecimal32:\n                 case AttributeUnderlyingType::utDecimal64:\n                 case AttributeUnderlyingType::utDecimal128:\n+                case AttributeUnderlyingType::utDecimal256:\n                     key.add(attr.second.name, Int32(key_columns[attr.first]->get64(row_idx)));\n                     break;\n \ndiff --git a/src/Dictionaries/RangeHashedDictionary.h b/src/Dictionaries/RangeHashedDictionary.h\nindex ca2a925df5e3..8a286f530baa 100644\n--- a/src/Dictionaries/RangeHashedDictionary.h\n+++ b/src/Dictionaries/RangeHashedDictionary.h\n@@ -112,6 +112,7 @@ class RangeHashedDictionary final : public IDictionary\n             Decimal32,\n             Decimal64,\n             Decimal128,\n+            Decimal256,\n             Float32,\n             Float64,\n             StringRef>\n@@ -129,6 +130,7 @@ class RangeHashedDictionary final : public IDictionary\n             Ptr<Decimal32>,\n             Ptr<Decimal64>,\n             Ptr<Decimal128>,\n+            Ptr<Decimal256>,\n             Ptr<Float32>,\n             Ptr<Float64>,\n             Ptr<StringRef>>\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01802_dict_sparse_hashed_bytes_allocated.reference b/tests/queries/0_stateless/01802_dict_sparse_hashed_bytes_allocated.reference\ndeleted file mode 100644\nindex c4844ab2c99e..000000000000\n--- a/tests/queries/0_stateless/01802_dict_sparse_hashed_bytes_allocated.reference\n+++ /dev/null\n@@ -1,1 +0,0 @@\n-4422\ndiff --git a/tests/queries/0_stateless/01802_dict_sparse_hashed_bytes_allocated.sql b/tests/queries/0_stateless/01802_dict_sparse_hashed_bytes_allocated.sql\ndeleted file mode 100644\nindex 1b69de273a2f..000000000000\n--- a/tests/queries/0_stateless/01802_dict_sparse_hashed_bytes_allocated.sql\n+++ /dev/null\n@@ -1,30 +0,0 @@\n-DROP TABLE IF EXISTS data_01802;\n-DROP DICTIONARY IF EXISTS dict_01802;\n-\n-CREATE TABLE data_01802\n-(\n-   id UInt64,\n-   value UInt16\n-)\n-ENGINE = Memory();\n-\n-INSERT INTO data_01802 VALUES(0, 0);\n-INSERT INTO data_01802 VALUES(1, 0);\n-INSERT INTO data_01802 VALUES(2, 0);\n-\n-CREATE DICTIONARY dict_01802\n-(\n-   id UInt64,\n-   value UInt16\n-)\n-PRIMARY KEY id\n-SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'data_01802'))\n-LIFETIME(MIN 1 MAX 1000)\n-LAYOUT(SPARSE_HASHED());\n-\n-SYSTEM RELOAD DICTIONARY dict_01802;\n-\n-SELECT bytes_allocated FROM system.dictionaries WHERE database = currentDatabase() AND name = 'dict_01802';\n-\n-DROP TABLE data_01802;\n-DROP DICTIONARY dict_01802;\ndiff --git a/tests/queries/0_stateless/01804_dictionary_decimal256_type.reference b/tests/queries/0_stateless/01804_dictionary_decimal256_type.reference\nnew file mode 100644\nindex 000000000000..1af9d45f72b4\n--- /dev/null\n+++ b/tests/queries/0_stateless/01804_dictionary_decimal256_type.reference\n@@ -0,0 +1,14 @@\n+Flat dictionary\n+5.00000\n+Hashed dictionary\n+5.00000\n+Cache dictionary\n+5.00000\n+SSDCache dictionary\n+5.00000\n+Direct dictionary\n+5.00000\n+IPTrie dictionary\n+5.00000\n+Polygon dictionary\n+5.00000\ndiff --git a/tests/queries/0_stateless/01804_dictionary_decimal256_type.sql b/tests/queries/0_stateless/01804_dictionary_decimal256_type.sql\nnew file mode 100644\nindex 000000000000..cc0ec598b70f\n--- /dev/null\n+++ b/tests/queries/0_stateless/01804_dictionary_decimal256_type.sql\n@@ -0,0 +1,141 @@\n+SET allow_experimental_bigint_types = 1;\n+\n+DROP TABLE IF EXISTS dictionary_decimal_source_table;\n+CREATE TABLE dictionary_decimal_source_table\n+(\n+    id UInt64,\n+    decimal_value Decimal256(5)\n+) ENGINE = TinyLog;\n+\n+INSERT INTO dictionary_decimal_source_table VALUES (1, 5.0);\n+\n+DROP DICTIONARY IF EXISTS flat_dictionary;\n+CREATE DICTIONARY flat_dictionary\n+(\n+    id UInt64,\n+    decimal_value Decimal256(5)\n+)\n+PRIMARY KEY id\n+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() TABLE 'dictionary_decimal_source_table'))\n+LIFETIME(MIN 1 MAX 1000)\n+LAYOUT(FLAT());\n+\n+SELECT 'Flat dictionary';\n+SELECT dictGet('flat_dictionary', 'decimal_value', toUInt64(1));\n+\n+DROP DICTIONARY IF EXISTS hashed_dictionary;\n+CREATE DICTIONARY hashed_dictionary\n+(\n+    id UInt64,\n+    decimal_value Decimal256(5)\n+)\n+PRIMARY KEY id\n+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() TABLE 'dictionary_decimal_source_table'))\n+LIFETIME(MIN 1 MAX 1000)\n+LAYOUT(HASHED());\n+\n+SELECT 'Hashed dictionary';\n+SELECT dictGet('hashed_dictionary', 'decimal_value', toUInt64(1));\n+\n+DROP DICTIONARY hashed_dictionary;\n+\n+DROP DICTIONARY IF EXISTS cache_dictionary;\n+CREATE DICTIONARY cache_dictionary\n+(\n+    id UInt64,\n+    decimal_value Decimal256(5)\n+)\n+PRIMARY KEY id\n+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() TABLE 'dictionary_decimal_source_table'))\n+LIFETIME(MIN 1 MAX 1000)\n+LAYOUT(CACHE(SIZE_IN_CELLS 10));\n+\n+SELECT 'Cache dictionary';\n+SELECT dictGet('cache_dictionary', 'decimal_value', toUInt64(1));\n+\n+DROP DICTIONARY cache_dictionary;\n+\n+DROP DICTIONARY IF EXISTS ssd_cache_dictionary;\n+CREATE DICTIONARY ssd_cache_dictionary\n+(\n+    id UInt64,\n+    decimal_value Decimal256(5)\n+)\n+PRIMARY KEY id\n+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() TABLE 'dictionary_decimal_source_table'))\n+LIFETIME(MIN 1 MAX 1000)\n+LAYOUT(SSD_CACHE(BLOCK_SIZE 4096 FILE_SIZE 8192 PATH '/var/lib/clickhouse/clickhouse_dicts/0d'));\n+\n+SELECT 'SSDCache dictionary';\n+SELECT dictGet('ssd_cache_dictionary', 'decimal_value', toUInt64(1));\n+\n+DROP DICTIONARY ssd_cache_dictionary;\n+\n+DROP DICTIONARY IF EXISTS direct_dictionary;\n+CREATE DICTIONARY direct_dictionary\n+(\n+    id UInt64,\n+    decimal_value Decimal256(5)\n+)\n+PRIMARY KEY id\n+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() TABLE 'dictionary_decimal_source_table'))\n+LAYOUT(DIRECT());\n+\n+SELECT 'Direct dictionary';\n+SELECT dictGet('direct_dictionary', 'decimal_value', toUInt64(1));\n+\n+DROP DICTIONARY direct_dictionary;\n+\n+DROP TABLE dictionary_decimal_source_table;\n+\n+DROP TABLE IF EXISTS ip_trie_dictionary_decimal_source_table;\n+CREATE TABLE ip_trie_dictionary_decimal_source_table\n+(\n+    prefix String,\n+    decimal_value Decimal256(5)\n+) ENGINE = TinyLog;\n+\n+INSERT INTO ip_trie_dictionary_decimal_source_table VALUES ('127.0.0.0', 5.0);\n+\n+DROP DICTIONARY IF EXISTS ip_trie_dictionary;\n+CREATE DICTIONARY ip_trie_dictionary\n+(\n+    prefix String,\n+    decimal_value Decimal256(5)\n+)\n+PRIMARY KEY prefix\n+SOURCE(CLICKHOUSE(HOST 'localhost' port tcpPort() TABLE 'ip_trie_dictionary_decimal_source_table'))\n+LIFETIME(MIN 10 MAX 1000)\n+LAYOUT(IP_TRIE());\n+\n+SELECT 'IPTrie dictionary';\n+SELECT dictGet('ip_trie_dictionary', 'decimal_value', tuple(IPv4StringToNum('127.0.0.0')));\n+\n+DROP DICTIONARY ip_trie_dictionary;\n+DROP TABLE ip_trie_dictionary_decimal_source_table;\n+\n+DROP TABLE IF EXISTS dictionary_decimal_polygons_source_table;\n+CREATE TABLE dictionary_decimal_polygons_source_table\n+(\n+    key Array(Array(Array(Tuple(Float64, Float64)))),\n+    decimal_value Decimal256(5)\n+) ENGINE = TinyLog;\n+\n+INSERT INTO dictionary_decimal_polygons_source_table VALUES ([[[(0, 0), (0, 1), (1, 1), (1, 0)]]], 5.0);\n+\n+DROP DICTIONARY IF EXISTS polygon_dictionary;\n+CREATE DICTIONARY polygon_dictionary\n+(\n+    key Array(Array(Array(Tuple(Float64, Float64)))),\n+    decimal_value Decimal256(5)\n+)\n+PRIMARY KEY key\n+SOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() TABLE 'dictionary_decimal_polygons_source_table'))\n+LIFETIME(MIN 0 MAX 1000)\n+LAYOUT(POLYGON());\n+\n+SELECT 'Polygon dictionary';\n+SELECT dictGet('polygon_dictionary', 'decimal_value', tuple(0.5, 0.5));\n+\n+DROP DICTIONARY polygon_dictionary;\n+DROP TABLE dictionary_decimal_polygons_source_table;\ndiff --git a/tests/queries/0_stateless/arcadia_skip_list.txt b/tests/queries/0_stateless/arcadia_skip_list.txt\nindex 7dfbce1e6f0b..c8a0971bb282 100644\n--- a/tests/queries/0_stateless/arcadia_skip_list.txt\n+++ b/tests/queries/0_stateless/arcadia_skip_list.txt\n@@ -228,3 +228,4 @@\n 01790_dist_INSERT_block_structure_mismatch_types_and_names\n 01791_dist_INSERT_block_structure_mismatch\n 01801_distinct_group_by_shard\n+01804_dictionary_decimal256_type\ndiff --git a/tests/queries/skip_list.json b/tests/queries/skip_list.json\nindex c1a1cd026722..d41a41bd5244 100644\n--- a/tests/queries/skip_list.json\n+++ b/tests/queries/skip_list.json\n@@ -700,6 +700,7 @@\n         \"01760_polygon_dictionaries\",\n         \"01778_hierarchical_dictionaries\",\n         \"01780_clickhouse_dictionary_source_loop\",\n-        \"01785_dictionary_element_count\"\n+        \"01785_dictionary_element_count\",\n+        \"01804_dictionary_decimal256_type\"\n     ]\n }\n",
  "problem_statement": "Decimal256 is not supported in Dictionaries.\n```\r\nset allow_experimental_bigint_types=1;\r\n\r\nCREATE TABLE table_decimal_dict(\r\nKeyField UInt64,\r\nDecimal256_ Decimal256(37)\r\n)\r\nENGINE = Memory;\r\n\r\nCREATE DICTIONARY IF NOT EXISTS decimal_dict (\r\n\tKeyField UInt64 DEFAULT 9999999,\r\n        Decimal256_ Decimal256(37) DEFAULT 0.11\r\n)\r\nPRIMARY KEY KeyField\r\nSOURCE(CLICKHOUSE(HOST 'localhost' PORT tcpPort() USER 'default' TABLE 'table_decimal_dict' DB 'default'))\r\nLIFETIME(0) LAYOUT(SPARSE_HASHED);\r\n\r\nReceived exception from server (version 21.3.1):\r\nCode: 50. DB::Exception: Received from localhost:9000. DB::Exception: Unknown type for dictionaryDecimal(76, 37).\r\n\r\n```\n",
  "hints_text": "",
  "created_at": "2021-04-10T16:54:43Z"
}