{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 19765,
  "instance_id": "ClickHouse__ClickHouse-19765",
  "issue_numbers": [
    "19371"
  ],
  "base_commit": "6946514c0b3165ab79de7a9feca5d19d0a73c03e",
  "patch": "diff --git a/src/AggregateFunctions/AggregateFunctionFactory.cpp b/src/AggregateFunctions/AggregateFunctionFactory.cpp\nindex 061077dd8fab..c0011b6ebec8 100644\n--- a/src/AggregateFunctions/AggregateFunctionFactory.cpp\n+++ b/src/AggregateFunctions/AggregateFunctionFactory.cpp\n@@ -106,6 +106,7 @@ AggregateFunctionPtr AggregateFunctionFactory::getImpl(\n     bool has_null_arguments) const\n {\n     String name = getAliasToOrName(name_param);\n+    bool is_case_insensitive = false;\n     Value found;\n \n     /// Find by exact match.\n@@ -115,7 +116,10 @@ AggregateFunctionPtr AggregateFunctionFactory::getImpl(\n     }\n \n     if (auto jt = case_insensitive_aggregate_functions.find(Poco::toLower(name)); jt != case_insensitive_aggregate_functions.end())\n+    {\n         found = jt->second;\n+        is_case_insensitive = true;\n+    }\n \n     const Context * query_context = nullptr;\n     if (CurrentThread::isInitialized())\n@@ -126,7 +130,8 @@ AggregateFunctionPtr AggregateFunctionFactory::getImpl(\n         out_properties = found.properties;\n \n         if (query_context && query_context->getSettingsRef().log_queries)\n-            query_context->addQueryFactoriesInfo(Context::QueryLogFactories::AggregateFunction, name);\n+            query_context->addQueryFactoriesInfo(\n+                    Context::QueryLogFactories::AggregateFunction, is_case_insensitive ? Poco::toLower(name) : name);\n \n         /// The case when aggregate function should return NULL on NULL arguments. This case is handled in \"get\" method.\n         if (!out_properties.returns_default_when_only_null && has_null_arguments)\ndiff --git a/src/DataTypes/DataTypeFactory.cpp b/src/DataTypes/DataTypeFactory.cpp\nindex dc3ce039dbde..eee3f22f9f13 100644\n--- a/src/DataTypes/DataTypeFactory.cpp\n+++ b/src/DataTypes/DataTypeFactory.cpp\n@@ -84,16 +84,7 @@ DataTypePtr DataTypeFactory::get(const String & family_name_param, const ASTPtr\n         return get(\"LowCardinality\", low_cardinality_params);\n     }\n \n-    DataTypePtr res = findCreatorByName(family_name)(parameters);\n-\n-    if (CurrentThread::isInitialized())\n-    {\n-        const auto * query_context = CurrentThread::get().getQueryContext();\n-        if (query_context && query_context->getSettingsRef().log_queries)\n-            query_context->addQueryFactoriesInfo(Context::QueryLogFactories::DataType, family_name);\n-    }\n-\n-    return res;\n+    return findCreatorByName(family_name)(parameters);\n }\n \n DataTypePtr DataTypeFactory::getCustom(DataTypeCustomDescPtr customization) const\n@@ -165,10 +156,18 @@ void DataTypeFactory::registerSimpleDataTypeCustom(const String &name, SimpleCre\n \n const DataTypeFactory::Value & DataTypeFactory::findCreatorByName(const String & family_name) const\n {\n+    const Context * query_context = nullptr;\n+    if (CurrentThread::isInitialized())\n+        query_context = CurrentThread::get().getQueryContext();\n+\n     {\n         DataTypesDictionary::const_iterator it = data_types.find(family_name);\n         if (data_types.end() != it)\n+        {\n+            if (query_context && query_context->getSettingsRef().log_queries)\n+                query_context->addQueryFactoriesInfo(Context::QueryLogFactories::DataType, family_name);\n             return it->second;\n+        }\n     }\n \n     String family_name_lowercase = Poco::toLower(family_name);\n@@ -176,7 +175,11 @@ const DataTypeFactory::Value & DataTypeFactory::findCreatorByName(const String &\n     {\n         DataTypesDictionary::const_iterator it = case_insensitive_data_types.find(family_name_lowercase);\n         if (case_insensitive_data_types.end() != it)\n+        {\n+            if (query_context && query_context->getSettingsRef().log_queries)\n+                query_context->addQueryFactoriesInfo(Context::QueryLogFactories::DataType, family_name_lowercase);\n             return it->second;\n+        }\n     }\n \n     auto hints = this->getHints(family_name);\ndiff --git a/src/Functions/FunctionFactory.cpp b/src/Functions/FunctionFactory.cpp\nindex 09fd360a9259..e13f310de09f 100644\n--- a/src/Functions/FunctionFactory.cpp\n+++ b/src/Functions/FunctionFactory.cpp\n@@ -99,7 +99,8 @@ FunctionOverloadResolverImplPtr FunctionFactory::tryGetImpl(\n         res = it->second(context);\n     else\n     {\n-        it = case_insensitive_functions.find(Poco::toLower(name));\n+        name = Poco::toLower(name);\n+        it = case_insensitive_functions.find(name);\n         if (case_insensitive_functions.end() != it)\n             res = it->second(context);\n     }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01656_test_query_log_factories_info.reference b/tests/queries/0_stateless/01656_test_query_log_factories_info.reference\nindex 324890c0a5a6..af7feae5a381 100644\n--- a/tests/queries/0_stateless/01656_test_query_log_factories_info.reference\n+++ b/tests/queries/0_stateless/01656_test_query_log_factories_info.reference\n@@ -1,8 +1,8 @@\n-2\t worl\t[123,1,1]\t49\t\\N\t50\t4950\tNullable(UInt64)\t50\n-2\t worl\t[123,1,1]\t49\t\\N\t50\t4950\tNullable(UInt64)\t50\n+2\t worl\t1\t1\t0\t4950\t99\t[123,1,1]\t49\t\\N\t50\t4950\tNullable(UInt64)\t50\n+2\t worl\t1\t1\t0\t4950\t99\t[123,1,1]\t49\t\\N\t50\t4950\tNullable(UInt64)\t50\n \n arraySort(used_aggregate_functions)\n-['avg','count','groupBitAnd','sum','uniq']\n+['avg','count','groupBitAnd','max','sum','uniq']\n \n arraySort(used_aggregate_function_combinators)\n ['Array','If','OrDefault','OrNull']\n@@ -11,7 +11,7 @@ arraySort(used_table_functions)\n ['numbers']\n \n arraySort(used_functions)\n-['CAST','addDays','array','arrayFlatten','modulo','plus','substring','toDate','toDayOfYear','toTypeName','toWeek']\n+['CAST','CRC32','addDays','array','arrayFlatten','modulo','plus','pow','round','substring','tanh','toDate','toDayOfYear','toTypeName','toWeek']\n \n arraySort(used_data_type_families)\n ['Array','Int32','Nullable','String']\n@@ -20,5 +20,5 @@ used_database_engines\n ['Atomic']\n \n arraySort(used_data_type_families)\tused_storages\n-['DateTime','Int64']\t['Memory']\n+['Int64','datetime']\t['Memory']\n \ndiff --git a/tests/queries/0_stateless/01656_test_query_log_factories_info.sql b/tests/queries/0_stateless/01656_test_query_log_factories_info.sql\nindex 17657cf60f5f..3a890ce16f9a 100644\n--- a/tests/queries/0_stateless/01656_test_query_log_factories_info.sql\n+++ b/tests/queries/0_stateless/01656_test_query_log_factories_info.sql\n@@ -2,6 +2,8 @@ SET database_atomic_wait_for_drop_and_detach_synchronously=1;\n \n SELECT uniqArray([1, 1, 2]),\n        SUBSTRING('Hello, world', 7, 5),\n+       POW(1, 2), ROUND(TANh(1)), CrC32(''),\n+       SUM(number), MAX(number),\n        flatten([[[BIT_AND(123)]], [[mod(3, 2)], [CAST('1' AS INTEGER)]]]),\n        week(toDate('2000-12-05')),\n        CAST(arrayJoin([NULL, NULL]) AS Nullable(TEXT)),\n@@ -49,7 +51,7 @@ WHERE current_database = currentDatabase() AND type == 'QueryFinish' AND (query\n ORDER BY query_start_time DESC LIMIT 1 FORMAT TabSeparatedWithNames;\n SELECT '';\n \n-CREATE OR REPLACE TABLE test_query_log_factories_info1.memory_table (id BIGINT, date DateTime) ENGINE=Memory();\n+CREATE OR REPLACE TABLE test_query_log_factories_info1.memory_table (id BIGINT, date DATETIME) ENGINE=Memory();\n \n SYSTEM FLUSH LOGS;\n SELECT arraySort(used_data_type_families), used_storages\n",
  "problem_statement": "test coverage with factories \nI hereby agree to the terms of the CLA available at: https://yandex.ru/legal/cla/?lang=en\r\n\r\nChangelog category (leave one):\r\n- New Feature\r\n\r\nChangelog entry (a user-readable short description of the changes that goes to CHANGELOG.md):\r\nAdd factories' objects names, created during query, into system.query_log. Closes https://github.com/ClickHouse/ClickHouse/issues/18495.\r\n\r\ncc @alexey-milovidov \r\n\n",
  "hints_text": "Have you tried and got any report from stateless tests?\n@kssenii We need to save canonical (normalized) function names, not exactly what user specified. Currently it's not the case:\r\n```\r\nSELECT arrayJoin(used_functions) AS f, count() AS c FROM system.query_log GROUP BY f ORDER BY c DESC\r\n\r\n...\r\n\u2502 CrC32                                       \u2502     1 \u2502\r\n\u2502 POW                                         \u2502     1 \u2502\r\n\u2502 TANh                                        \u2502     1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\nFYI this feature allowed to find functions that are not covered by (functional) tests:\r\n\r\n```\r\n:) SELECT * FROM system.functions WHERE NOT is_aggregate AND name NOT IN (SELECT arrayJoin(used_functions) AS f FROM system.query_log)\r\n\r\nSELECT *\r\nFROM system.functions\r\nWHERE (NOT is_aggregate) AND (name NOT IN \r\n(\r\n    SELECT arrayJoin(used_functions) AS f\r\n    FROM system.query_log\r\n))\r\n\r\nQuery id: 4a97b0f4-f73f-45a4-8161-51fc18b64a89\r\n\r\n\u250c\u2500name\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500is_aggregate\u2500\u252c\u2500case_insensitive\u2500\u252c\u2500alias_to\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 dictGetUUIDOrDefault     \u2502            0 \u2502                0 \u2502                          \u2502\r\n\u2502 dictGetUInt64OrDefault   \u2502            0 \u2502                0 \u2502                          \u2502\r\n\u2502 dictGetDateOrDefault     \u2502            0 \u2502                0 \u2502                          \u2502\r\n\u2502 dictGetFloat64OrDefault  \u2502            0 \u2502                0 \u2502                          \u2502\r\n\u2502 dictGetInt64OrDefault    \u2502            0 \u2502                0 \u2502                          \u2502\r\n\u2502 dictGetUInt32OrDefault   \u2502            0 \u2502                0 \u2502                          \u2502\r\n\u2502 dictGetUInt16OrDefault   \u2502            0 \u2502                0 \u2502                          \u2502\r\n\u2502 regionToTopContinent     \u2502            0 \u2502                0 \u2502                          \u2502\r\n\u2502 regionToContinent        \u2502            0 \u2502                0 \u2502                          \u2502\r\n\u2502 regionToCountry          \u2502            0 \u2502                0 \u2502                          \u2502\r\n\u2502 regionToDistrict         \u2502            0 \u2502                0 \u2502                          \u2502\r\n\u2502 modelEvaluate            \u2502            0 \u2502                0 \u2502                          \u2502\r\n\u2502 regionToPopulation       \u2502            0 \u2502                0 \u2502                          \u2502\r\n\u2502 dictGetDateTimeOrDefault \u2502            0 \u2502                0 \u2502                          \u2502\r\n\u2502 regionHierarchy          \u2502            0 \u2502                0 \u2502                          \u2502\r\n\u2502 regionIn                 \u2502            0 \u2502                0 \u2502                          \u2502\r\n\u2502 regionToArea             \u2502            0 \u2502                0 \u2502                          \u2502\r\n\u2502 dictGetUInt8OrDefault    \u2502            0 \u2502                0 \u2502                          \u2502\r\n\u2502 dictGetInt16OrDefault    \u2502            0 \u2502                0 \u2502                          \u2502\r\n\u2502 regionToCity             \u2502            0 \u2502                0 \u2502                          \u2502\r\n\u2502 regionToName             \u2502            0 \u2502                0 \u2502                          \u2502\r\n\u2502 dictGetInt32OrDefault    \u2502            0 \u2502                0 \u2502                          \u2502\r\n\u2502 dictGetInt8OrDefault     \u2502            0 \u2502                0 \u2502                          \u2502\r\n\u2502 extractAllGroups         \u2502            0 \u2502                1 \u2502 extractAllGroupsVertical \u2502\r\n\u2502 power                    \u2502            0 \u2502                1 \u2502 pow                      \u2502\r\n\u2502 locate                   \u2502            0 \u2502                1 \u2502 position                 \u2502\r\n\u2502 mid                      \u2502            0 \u2502                1 \u2502 substring                \u2502\r\n\u2502 substr                   \u2502            0 \u2502                1 \u2502 substring                \u2502\r\n\u2502 ucase                    \u2502            0 \u2502                1 \u2502 upper                    \u2502\r\n\u2502 replace                  \u2502            0 \u2502                1 \u2502 replaceAll               \u2502\r\n\u2502 lcase                    \u2502            0 \u2502                1 \u2502 lower                    \u2502\r\n\u2502 truncate                 \u2502            0 \u2502                1 \u2502 trunc                    \u2502\r\n\u2502 ceiling                  \u2502            0 \u2502                1 \u2502 ceil                     \u2502\r\n\u2502 rand32                   \u2502            0 \u2502                0 \u2502 rand                     \u2502\r\n\u2502 hostname                 \u2502            0 \u2502                0 \u2502 hostName                 \u2502\r\n\u2502 dateTrunc                \u2502            0 \u2502                0 \u2502 date_trunc               \u2502\r\n\u2502 ln                       \u2502            0 \u2502                1 \u2502 log                      \u2502\r\n\u2502 user                     \u2502            0 \u2502                1 \u2502 currentUser              \u2502\r\n\u2502 yearweek                 \u2502            0 \u2502                1 \u2502 toYearWeek               \u2502\r\n\u2502 flatten                  \u2502            0 \u2502                1 \u2502 arrayFlatten             \u2502\r\n\u2502 week                     \u2502            0 \u2502                1 \u2502 toWeek                   \u2502\r\n\u2502 fromUnixTimestamp        \u2502            0 \u2502                0 \u2502 FROM_UNIXTIME            \u2502\r\n\u2502 mod                      \u2502            0 \u2502                1 \u2502 modulo                   \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n43 rows in set. Elapsed: 0.011 sec. Processed 344.35 thousand rows, 4.71 MB (30.87 million rows/s., 422.05 MB/s.)\r\n\r\nSELECT *\r\nFROM system.functions\r\nWHERE is_aggregate AND (name NOT IN \r\n(\r\n    SELECT arrayJoin(used_aggregate_functions) AS f\r\n    FROM system.query_log\r\n))\r\n\r\nQuery id: 4e9e33bd-c41d-448e-8996-a31b06f1ecf2\r\n\r\n\u250c\u2500name\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500is_aggregate\u2500\u252c\u2500case_insensitive\u2500\u252c\u2500alias_to\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 BIT_AND               \u2502            1 \u2502                1 \u2502 groupBitAnd             \u2502\r\n\u2502 VAR_SAMP              \u2502            1 \u2502                1 \u2502 varSamp                 \u2502\r\n\u2502 medianTimingWeighted  \u2502            1 \u2502                0 \u2502 quantileTimingWeighted  \u2502\r\n\u2502 COVAR_SAMP            \u2502            1 \u2502                1 \u2502 covarSamp               \u2502\r\n\u2502 VAR_POP               \u2502            1 \u2502                1 \u2502 varPop                  \u2502\r\n\u2502 medianTDigest         \u2502            1 \u2502                0 \u2502 quantileTDigest         \u2502\r\n\u2502 medianTiming          \u2502            1 \u2502                0 \u2502 quantileTiming          \u2502\r\n\u2502 medianExactHigh       \u2502            1 \u2502                0 \u2502 quantileExactHigh       \u2502\r\n\u2502 BIT_OR                \u2502            1 \u2502                1 \u2502 groupBitOr              \u2502\r\n\u2502 medianDeterministic   \u2502            1 \u2502                0 \u2502 quantileDeterministic   \u2502\r\n\u2502 STDDEV_POP            \u2502            1 \u2502                1 \u2502 stddevPop               \u2502\r\n\u2502 STDDEV_SAMP           \u2502            1 \u2502                1 \u2502 stddevSamp              \u2502\r\n\u2502 medianExactLow        \u2502            1 \u2502                0 \u2502 quantileExactLow        \u2502\r\n\u2502 medianTDigestWeighted \u2502            1 \u2502                0 \u2502 quantileTDigestWeighted \u2502\r\n\u2502 medianExact           \u2502            1 \u2502                0 \u2502 quantileExact           \u2502\r\n\u2502 COVAR_POP             \u2502            1 \u2502                1 \u2502 covarPop                \u2502\r\n\u2502 medianExactWeighted   \u2502            1 \u2502                0 \u2502 quantileExactWeighted   \u2502\r\n\u2502 BIT_XOR               \u2502            1 \u2502                1 \u2502 groupBitXor             \u2502\r\n\u2502 median                \u2502            1 \u2502                0 \u2502 quantile                \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n19 rows in set. Elapsed: 0.011 sec. Processed 347.68 thousand rows, 3.11 MB (32.70 million rows/s., 292.68 MB/s.)\r\n```",
  "created_at": "2021-01-28T10:36:08Z",
  "modified_files": [
    "src/AggregateFunctions/AggregateFunctionFactory.cpp",
    "src/DataTypes/DataTypeFactory.cpp",
    "src/Functions/FunctionFactory.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/01656_test_query_log_factories_info.reference",
    "tests/queries/0_stateless/01656_test_query_log_factories_info.sql"
  ]
}