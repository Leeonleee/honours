{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 37596,
  "instance_id": "ClickHouse__ClickHouse-37596",
  "issue_numbers": [
    "22130"
  ],
  "base_commit": "141334448e65d8be64bca7c00ae28cb0e2e9f557",
  "patch": "diff --git a/src/Storages/System/StorageSystemZooKeeper.cpp b/src/Storages/System/StorageSystemZooKeeper.cpp\nindex 4ba6c00ad9df..1212d9da60ae 100644\n--- a/src/Storages/System/StorageSystemZooKeeper.cpp\n+++ b/src/Storages/System/StorageSystemZooKeeper.cpp\n@@ -16,8 +16,12 @@\n #include <Interpreters/Set.h>\n #include <Interpreters/interpretSubquery.h>\n #include <Processors/Executors/PullingPipelineExecutor.h>\n+#include <Processors/Sinks/SinkToStorage.h>\n+#include <boost/algorithm/string/join.hpp>\n+#include <boost/algorithm/string.hpp>\n #include <algorithm>\n #include <deque>\n+#include <climits>\n \n \n namespace DB\n@@ -28,6 +32,157 @@ namespace ErrorCodes\n     extern const int BAD_ARGUMENTS;\n }\n \n+/** ZkNodeCache is a trie tree to cache all the zookeeper writes. The purpose of this struct is to avoid creating/setting nodes\n+  * repeatedly. For example, If we create path /a/b/c/d/e and path /a/b/d/f in the same transaction. We don't want to create\n+  * their common path \"/a/b\" twice. This data structure will cache this changes and generates the eventual requests within one pass.\n+  */\n+struct ZkNodeCache\n+{\n+    using ZkNodeCachePtr = std::shared_ptr<ZkNodeCache>;\n+\n+    std::unordered_map<String, ZkNodeCachePtr> children;\n+    String value;\n+    String path;\n+    bool exists;\n+    bool changed;\n+\n+    ZkNodeCache() : exists(true), changed(false) { }\n+    ZkNodeCache(String path_, bool exists_) : path(path_), exists(exists_), changed(false) { }\n+\n+    void insert(const std::vector<String> & nodes, zkutil::ZooKeeperPtr zookeeper, const String & value_to_set, size_t index)\n+    {\n+        /// If this node has an empty name, just skip it.\n+        /// Possibly a \"/a//b///c//d/\" will cause empty node.\n+        while (index < nodes.size() && nodes[index].empty())\n+            ++index;\n+\n+        if (index == nodes.size())\n+        {\n+            value = value_to_set;\n+            changed = true;\n+            return;\n+        }\n+        const String & child_name = nodes[index];\n+        ++index;\n+        if (!children.contains(child_name))\n+        {\n+            String sub_path = path + \"/\" + child_name;\n+            bool child_exist = false;\n+            if (exists)\n+            {\n+                /// If this node doesn't exists, neither will its child.\n+                child_exist = zookeeper->exists(sub_path);\n+            }\n+            children[child_name] = std::make_shared<ZkNodeCache>(sub_path, child_exist);\n+        }\n+        children[child_name]->insert(nodes, zookeeper, value_to_set, index);\n+    }\n+\n+    void generateRequests(Coordination::Requests & requests)\n+    {\n+        /** If the node doesn't exists, we should generate create request.\n+          * If the node exists, we should generate set request.\n+          * This dfs will prove ancestor nodes are processed first.\n+          */\n+        if (!exists)\n+        {\n+            auto request = zkutil::makeCreateRequest(path, value, zkutil::CreateMode::Persistent);\n+            requests.push_back(request);\n+        }\n+        else if (changed)\n+        {\n+            auto request = zkutil::makeSetRequest(path, value, -1);\n+            requests.push_back(request);\n+        }\n+        for (auto [_, child] : children)\n+            child->generateRequests(requests);\n+    }\n+};\n+\n+class ZooKeeperSink : public SinkToStorage\n+{\n+    zkutil::ZooKeeperPtr zookeeper;\n+\n+    ZkNodeCache cache;\n+\n+public:\n+    ZooKeeperSink(const Block & header, ContextPtr context) : SinkToStorage(header), zookeeper(context->getZooKeeper()) { }\n+    String getName() const override { return \"ZooKeeperSink\"; }\n+\n+    void consume(Chunk chunk) override\n+    {\n+        auto block = getHeader().cloneWithColumns(chunk.getColumns());\n+        size_t rows = block.rows();\n+        for (size_t i = 0; i < rows; i++)\n+        {\n+            String name = block.getByPosition(0).column->getDataAt(i).toString();\n+            String value = block.getByPosition(1).column->getDataAt(i).toString();\n+            String path = block.getByPosition(2).column->getDataAt(i).toString();\n+\n+            /// We don't expect a \"name\" contains a path.\n+            if (name.find('/') != std::string::npos)\n+            {\n+                throw Exception(\"Column `name` should not contain '/'\", ErrorCodes::BAD_ARGUMENTS);\n+            }\n+\n+            if (name.empty())\n+            {\n+                throw Exception(\"Column `name` should not be empty\", ErrorCodes::BAD_ARGUMENTS);\n+            }\n+\n+            if (path.empty())\n+            {\n+                throw Exception(\"Column `path` should not be empty\", ErrorCodes::BAD_ARGUMENTS);\n+            }\n+\n+            if (path.size() + name.size() > PATH_MAX)\n+            {\n+                throw Exception(\"Sum of `name` length and `path` length should not exceed PATH_MAX\", ErrorCodes::BAD_ARGUMENTS);\n+            }\n+\n+            std::vector<String> path_vec;\n+            boost::split(path_vec, path, boost::is_any_of(\"/\"));\n+            path_vec.push_back(name);\n+            cache.insert(path_vec, zookeeper, value, 0);\n+        }\n+    }\n+\n+    void onFinish() override\n+    {\n+        Coordination::Requests requests;\n+        cache.generateRequests(requests);\n+        zookeeper->multi(requests);\n+    }\n+};\n+\n+StorageSystemZooKeeper::StorageSystemZooKeeper(const StorageID & table_id_)\n+        : IStorageSystemOneBlock<StorageSystemZooKeeper>(table_id_)\n+{\n+        StorageInMemoryMetadata storage_metadata;\n+        ColumnsDescription desc;\n+        auto columns = getNamesAndTypes();\n+        for (const auto & col : columns)\n+        {\n+            ColumnDescription col_desc(col.name, col.type);\n+            /// We only allow column `name`, `path`, `value` to insert.\n+            if (col.name != \"name\" && col.name != \"path\" && col.name != \"value\")\n+                col_desc.default_desc.kind = ColumnDefaultKind::Materialized;\n+            desc.add(col_desc);\n+        }\n+        storage_metadata.setColumns(desc);\n+        setInMemoryMetadata(storage_metadata);\n+}\n+\n+SinkToStoragePtr StorageSystemZooKeeper::write(const ASTPtr &, const StorageMetadataPtr &, ContextPtr context)\n+{\n+    if (!context->getConfigRef().getBool(\"allow_zookeeper_write\", false))\n+        throw Exception(\"Prohibit writing to system.zookeeper, unless config `allow_zookeeper_write` as true\", ErrorCodes::BAD_ARGUMENTS);\n+    Block write_header;\n+    write_header.insert(ColumnWithTypeAndName(std::make_shared<DataTypeString>(), \"name\"));\n+    write_header.insert(ColumnWithTypeAndName(std::make_shared<DataTypeString>(), \"value\"));\n+    write_header.insert(ColumnWithTypeAndName(std::make_shared<DataTypeString>(), \"path\"));\n+    return std::make_shared<ZooKeeperSink>(write_header, context);\n+}\n \n NamesAndTypesList StorageSystemZooKeeper::getNamesAndTypes()\n {\ndiff --git a/src/Storages/System/StorageSystemZooKeeper.h b/src/Storages/System/StorageSystemZooKeeper.h\nindex 32ca767ac244..20ad29af4818 100644\n--- a/src/Storages/System/StorageSystemZooKeeper.h\n+++ b/src/Storages/System/StorageSystemZooKeeper.h\n@@ -14,10 +14,14 @@ class Context;\n class StorageSystemZooKeeper final : public IStorageSystemOneBlock<StorageSystemZooKeeper>\n {\n public:\n+    explicit StorageSystemZooKeeper(const StorageID & table_id_);\n+\n     std::string getName() const override { return \"SystemZooKeeper\"; }\n \n     static NamesAndTypesList getNamesAndTypes();\n \n+    SinkToStoragePtr write(const ASTPtr & /*query*/, const StorageMetadataPtr & /*metadata_snapshot*/, ContextPtr /*context*/) override;\n+\n protected:\n     using IStorageSystemOneBlock::IStorageSystemOneBlock;\n \n",
  "test_patch": "diff --git a/tests/config/config.d/zookeeper_write.xml b/tests/config/config.d/zookeeper_write.xml\nnew file mode 100644\nindex 000000000000..ce484261abab\n--- /dev/null\n+++ b/tests/config/config.d/zookeeper_write.xml\n@@ -0,0 +1,3 @@\n+<clickhouse>\n+    <allow_zookeeper_write>true</allow_zookeeper_write>\n+</clickhouse>\ndiff --git a/tests/config/install.sh b/tests/config/install.sh\nindex 3bc1967ab1f9..54031eb8f32d 100755\n--- a/tests/config/install.sh\n+++ b/tests/config/install.sh\n@@ -16,6 +16,7 @@ mkdir -p $DEST_SERVER_PATH/users.d/\n mkdir -p $DEST_CLIENT_PATH\n \n ln -sf $SRC_PATH/config.d/zookeeper.xml $DEST_SERVER_PATH/config.d/\n+ln -sf $SRC_PATH/config.d/zookeeper_write.xml $DEST_SERVER_PATH/config.d/\n ln -sf $SRC_PATH/config.d/listen.xml $DEST_SERVER_PATH/config.d/\n ln -sf $SRC_PATH/config.d/text_log.xml $DEST_SERVER_PATH/config.d/\n ln -sf $SRC_PATH/config.d/custom_settings_prefixes.xml $DEST_SERVER_PATH/config.d/\ndiff --git a/tests/queries/0_stateless/02311_system_zookeeper_insert.reference b/tests/queries/0_stateless/02311_system_zookeeper_insert.reference\nnew file mode 100644\nindex 000000000000..d8a35d57e075\n--- /dev/null\n+++ b/tests/queries/0_stateless/02311_system_zookeeper_insert.reference\n@@ -0,0 +1,27 @@\n+/default/1-insert-testc\tc\t\n+/default/1-insert-testc/c\tc\t\n+/default/1-insert-testc/c/c\tc\t\n+/default/1-insert-testc/c/c\td\t\n+/default/1-insert-testc/c/c\te\t\n+/default/1-insert-testc/c/c\tf\t\n+/default/1-insert-testc/c/c\tkk\t\n+/default/1-insert-testc/c/c/c\tc\t\n+/default/1-insert-testc/c/c/c/c\tc\t\n+/default/1-insert-testc/c/c/c/c/c\tc\t\n+/default/1-insert-testc/c/c/c/c/c/c\tc\t9\n+/default/1-insert-testc/c/c/c/c/c/c/c\tc\t10\n+/default/1-insert-testc/c/c/d\te\t10\n+/default/1-insert-testc/c/c/d\tf\t11\n+/default/1-insert-testc/c/c/d\tg\t12\n+/default/1-insert-testc/c/c/e\tg\t13\n+/default/1-insert-testc/c/c/f\tg\t14\n+/default/1-insert-testc/c/c/kk\tg\t14\n+-------------------------\n+/default/2-insert-testx\ttestb\tz\n+/default/2-insert-testx\ttestc\tx\n+/default/2-insert-testx\ttestz\ty\n+/default/2-insert-testz\tc\t\n+/default/2-insert-testz/c\tcd\t\n+/default/2-insert-testz/c/cd\tdd\t\n+/default/2-insert-testz/c/cd\ttestc\t\n+/default/2-insert-testz/c/cd/dd\ttestc\ty\ndiff --git a/tests/queries/0_stateless/02311_system_zookeeper_insert.sql b/tests/queries/0_stateless/02311_system_zookeeper_insert.sql\nnew file mode 100644\nindex 000000000000..e1c42278086e\n--- /dev/null\n+++ b/tests/queries/0_stateless/02311_system_zookeeper_insert.sql\n@@ -0,0 +1,43 @@\n+-- Tags: zookeeper\n+\n+set allow_unrestricted_reads_from_keeper = 'true';\n+\n+drop table if exists test_zkinsert;\n+\n+create table test_zkinsert (\n+\tname String,\n+\tpath String,\n+\tvalue String\n+) ENGINE Memory;\n+\n+-- test recursive create and big transaction\n+insert into test_zkinsert (name, path, value) values ('c', '/1-insert-testc/c/c/c/c/c/c', 11), ('e', '/1-insert-testc/c/c/d', 10), ('c', '/1-insert-testc/c/c/c/c/c/c/c', 10), ('c', '/1-insert-testc/c/c/c/c/c/c', 9), ('f', '/1-insert-testc/c/c/d', 11), ('g', '/1-insert-testc/c/c/d', 12), ('g', '/1-insert-testc/c/c/e', 13), ('g', '/1-insert-testc/c/c/f', 14), ('g', '/1-insert-testc/c/c/kk', 14);\n+-- insert same value, suppose to have no side effects\n+insert into system.zookeeper (name, path, value) SELECT name, '/' || currentDatabase() || path, value from test_zkinsert;\n+\n+SELECT * FROM (SELECT path, name, value FROM system.zookeeper ORDER BY path, name) WHERE path LIKE '/' || currentDatabase() || '/1-insert-test%';\n+\n+SELECT '-------------------------';\n+\n+-- test inserting into root path\n+insert into test_zkinsert (name, path, value) values ('testc', '/2-insert-testx', 'x');\n+insert into test_zkinsert (name, path, value) values ('testz', '/2-insert-testx', 'y');\n+insert into test_zkinsert (name, path, value) values ('testc', '/2-insert-testz//c/cd/dd//', 'y');\n+insert into test_zkinsert (name, path) values ('testc', '/2-insert-testz//c/cd/');\n+insert into test_zkinsert (name, value, path) values ('testb', 'z', '/2-insert-testx');\n+\n+insert into system.zookeeper (name, path, value) SELECT name, '/' || currentDatabase() || path, value from test_zkinsert;\n+\n+SELECT * FROM (SELECT path, name, value FROM system.zookeeper ORDER BY path, name) WHERE path LIKE '/' || currentDatabase() || '/2-insert-test%';\n+\n+-- test exceptions \n+insert into system.zookeeper (name, value) values ('abc', 'y'); -- { serverError 36 }\n+insert into system.zookeeper (path, value) values ('a/b/c', 'y'); -- { serverError 36 }\n+insert into system.zookeeper (name, version) values ('abc', 111); -- { serverError 44 }\n+insert into system.zookeeper (name, versionxyz) values ('abc', 111); -- { serverError 16 }\n+insert into system.zookeeper (name, path, value) values ('a/b/c', '/', 'y'); -- { serverError 36 }\n+insert into system.zookeeper (name, path, value) values ('/', '/a/b/c', 'z'); -- { serverError 36 }\n+insert into system.zookeeper (name, path, value) values ('', '/', 'y'); -- { serverError 36 }\n+insert into system.zookeeper (name, path, value) values ('abc', '/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc/abc', 'y'); -- { serverError 36 }\n+\n+drop table if exists test_zkinsert;\ndiff --git a/tests/queries/0_stateless/02311_system_zookeeper_insert_priv.reference b/tests/queries/0_stateless/02311_system_zookeeper_insert_priv.reference\nnew file mode 100644\nindex 000000000000..d00491fd7e5b\n--- /dev/null\n+++ b/tests/queries/0_stateless/02311_system_zookeeper_insert_priv.reference\n@@ -0,0 +1,1 @@\n+1\ndiff --git a/tests/queries/0_stateless/02311_system_zookeeper_insert_priv.sh b/tests/queries/0_stateless/02311_system_zookeeper_insert_priv.sh\nnew file mode 100755\nindex 000000000000..24a1f7e7c390\n--- /dev/null\n+++ b/tests/queries/0_stateless/02311_system_zookeeper_insert_priv.sh\n@@ -0,0 +1,15 @@\n+#!/usr/bin/env bash\n+# Tags: no-parallel\n+\n+\n+CUR_DIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CUR_DIR\"/../shell_config.sh\n+\n+\n+${CLICKHOUSE_CLIENT_BINARY}  --query \"drop user if exists u_02311\"\n+${CLICKHOUSE_CLIENT_BINARY}  --query \"create user u_02311\"\n+error=\"$(${CLICKHOUSE_CLIENT_BINARY}  --user=u_02311 --query \"insert into system.zookeeper (path, name, value) values ('//3-insert-testc/c/c/kk', 'kk', '11')\" 2>&1 > /dev/null)\"\n+echo \"${error}\" | grep -Fc \"ACCESS_DENIED\"\n+\n+${CLICKHOUSE_CLIENT_BINARY}  --query \"drop user u_02311\"\n",
  "problem_statement": "Allow writes into system.zookeeper table\n**Use case**\r\nManually modify the contents of ZooKeeper.\r\nNot for normal usage scenarios... mostly for operations engineers.\r\n\r\n**Describe the solution you'd like**\r\n\r\nAllow INSERT. It should contain only subset of the columns, because some of the columns in `system.zookeeper` table (like numChildren, ctime, etc...) cannot be specified explicitly.\r\n\r\nINSERT will perform multiple create operations.\r\n\r\nAdd a setting to perform set operations (update existing nodes) instead of creating new nodes.\r\n\r\n**Additional context**\r\n\r\nAlso it will be nice to allow \"full scan\" queries to `system.zookeeper` table to quickly creating dumps.\r\nIt can be filtered by condition on prefix of path.\r\n\n",
  "hints_text": "I went through this issue and found it interesting.\r\n\r\nThe insert statement will directly translate to the \"set\" or \"create or update\" api for the ZooKeeper, so I want to clarify some behaviours:\r\n\r\n1. The allowed written columns should be node path, data and version, because the stats is immutable. Is it right?\r\n2. When columns are path/data/version, it is obviously a set operation. If NO_NODE or BAD_VERSION is detected, we should return the value.\r\n3. If only two columns\u00a0(path, data) exist, it is a \"createOrUpdate\" operation.\r\n4. Other column patterns (such as (path, version) ) are invalid.\r\n5. If we insert multiple rows at one time, should we choose to insert one by one and exit when meeting any exceptions , or continue to finish inserting all the rows, or rollback all the inserts at once?\n1. Probably you can't change version as well, but we indeed can check it in zk transaction. Version should be optional (it's also ok if user is not allowed to specify it). I think it would be also logical to recursively create all parents for a node.\r\n2. I think we can ignore returning any value (but should throw an exception if needed).\r\n3. Yes.\r\n4. Yes.\r\n5. I think we need to create a transaction for multiple rows.",
  "created_at": "2022-05-27T11:03:04Z"
}