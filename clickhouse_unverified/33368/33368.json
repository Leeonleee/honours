{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 33368,
  "instance_id": "ClickHouse__ClickHouse-33368",
  "issue_numbers": [
    "23230"
  ],
  "base_commit": "9e9e6b79227e8ddb916bddfe779cc9e917a396b0",
  "patch": "diff --git a/docker/images.json b/docker/images.json\nindex dc7126a3f5a2..354bdaa8728b 100644\n--- a/docker/images.json\n+++ b/docker/images.json\n@@ -103,6 +103,10 @@\n         \"name\": \"clickhouse/mysql-golang-client\",\n         \"dependent\": []\n     },\n+    \"docker/test/integration/dotnet_client\": {\n+        \"name\": \"clickhouse/dotnet-client\",\n+        \"dependent\": []\n+    },\n     \"docker/test/integration/mysql_java_client\": {\n         \"name\": \"clickhouse/mysql-java-client\",\n         \"dependent\": []\n",
  "test_patch": "diff --git a/docker/test/integration/dotnet_client/.gitignore b/docker/test/integration/dotnet_client/.gitignore\nnew file mode 100644\nindex 000000000000..cd42ee34e873\n--- /dev/null\n+++ b/docker/test/integration/dotnet_client/.gitignore\n@@ -0,0 +1,2 @@\n+bin/\n+obj/\ndiff --git a/docker/test/integration/dotnet_client/Dockerfile b/docker/test/integration/dotnet_client/Dockerfile\nnew file mode 100644\nindex 000000000000..f8d334151759\n--- /dev/null\n+++ b/docker/test/integration/dotnet_client/Dockerfile\n@@ -0,0 +1,10 @@\n+# docker build .\n+# docker run -it --rm --network=host 14f23e59669c dotnet run --host localhost --port 8123 --user default --database default\n+\n+FROM mcr.microsoft.com/dotnet/sdk:3.1\n+\n+WORKDIR /client\n+COPY *.cs *.csproj /client/\n+\n+ARG VERSION=4.1.0\n+RUN dotnet add package ClickHouse.Client -v ${VERSION}\ndiff --git a/docker/test/integration/dotnet_client/Program.cs b/docker/test/integration/dotnet_client/Program.cs\nnew file mode 100644\nindex 000000000000..3f640d15e864\n--- /dev/null\n+++ b/docker/test/integration/dotnet_client/Program.cs\n@@ -0,0 +1,90 @@\n+\ufeffusing System;\n+using System.Threading.Tasks;\n+using ClickHouse.Client.ADO;\n+using ClickHouse.Client.Utility;\n+\n+namespace clickhouse.test\n+{\n+    class Program\n+    {\n+        static async Task Main(string[] args)\n+        {\n+            try\n+            {\n+                using var connection = new ClickHouseConnection(GetConnectionString(args));\n+\n+                await connection.ExecuteStatementAsync(\"CREATE DATABASE IF NOT EXISTS test\");\n+                await connection.ExecuteStatementAsync(\"TRUNCATE TABLE IF EXISTS test.dotnet_test\");\n+                await connection.ExecuteStatementAsync(\"CREATE TABLE IF NOT EXISTS test.dotnet_test (`age` Int32, `name` String) Engine = Memory\");\n+\n+                using var command = connection.CreateCommand();\n+                command.AddParameter(\"name\", \"Linus Torvalds\");\n+                command.AddParameter(\"age\", 51);\n+                command.CommandText = \"INSERT INTO test.dotnet_test VALUES({age:Int32}, {name:String})\";\n+                await command.ExecuteNonQueryAsync();\n+\n+                using var result1 = await connection.ExecuteReaderAsync(\"SELECT * FROM test.dotnet_test\");\n+                while (result1.Read())\n+                {\n+                    var values = new object[result1.FieldCount];\n+                    result1.GetValues(values);\n+\n+                    foreach (var row in values)\n+                    {\n+                        Console.WriteLine(row);\n+                    }\n+                }\n+\n+                using var result2 = await connection.ExecuteReaderAsync(selectSql);\n+                while (result2.Read())\n+                {\n+                    var values = new object[result2.FieldCount];\n+                    result2.GetValues(values);\n+\n+                    foreach (var row in values)\n+                    {\n+                        Console.WriteLine(row);\n+                    }\n+                }\n+            }\n+            catch (Exception e)\n+            {\n+                Console.Error.WriteLine(e);\n+                Environment.ExitCode = 1;\n+            }\n+        }\n+\n+        private static string GetConnectionString(string[] args)\n+        {\n+            var builder = new ClickHouseConnectionStringBuilder();\n+            int i = 0;\n+            while (i < args.Length)\n+            {\n+                switch (args[i])\n+                {\n+                    case \"--host\":\n+                        builder.Host = args[++i];\n+                        break;\n+                    case \"--port\":\n+                        builder.Port = UInt16.Parse(args[++i]);\n+                        break;\n+                    case \"--user\":\n+                        builder.Username = args[++i];\n+                        break;\n+                    case \"--password\":\n+                        builder.Password = args[++i];\n+                        break;\n+                    case \"--database\":\n+                        builder.Database = args[++i];\n+                        break;\n+                    default:\n+                        i++;\n+                        break;\n+                }\n+            }\n+            return builder.ToString();\n+        }\n+\n+        private static string selectSql = @\"SELECT NULL, toInt8(-8), toUInt8(8), toInt16(-16), toUInt16(16), toInt16(-32), toUInt16(32), toInt64(-64), toUInt64(64), toFloat32(32e6), toFloat32(-32e6), toFloat64(64e6), toFloat64(-64e6), 'TestString', toFixedString('ASD',3), toFixedString('ASD',5), toUUID('00000000-0000-0000-0000-000000000000'), toUUID('61f0c404-5cb3-11e7-907b-a6006ad3dba0'), toIPv4('1.2.3.4'), toIPv4('255.255.255.255'), CAST('a', 'Enum(\\'a\\' = 1, \\'b\\' = 2)'), CAST('a', 'Enum8(\\'a\\' = -1, \\'b\\' = 127)'), CAST('a', 'Enum16(\\'a\\' = -32768, \\'b\\' = 32767)'), array(1, 2, 3), array('a', 'b', 'c'), array(1, 2, NULL), toInt32OrNull('123'), toInt32OrNull(NULL), CAST(NULL AS Nullable(DateTime)), CAST(NULL AS LowCardinality(Nullable(String))), toLowCardinality('lowcardinality'), tuple(1, 'a', 8), tuple(123, tuple(5, 'a', 7)), toDateOrNull('1999-11-12'), toDateTime('1988-08-28 11:22:33'), toDateTime64('2043-03-01 18:34:04.4444444', 9), toDecimal32(123.45, 3), toDecimal32(-123.45, 3), toDecimal64(1.2345, 7), toDecimal64(-1.2345, 7), toDecimal128(12.34, 9), toDecimal128(-12.34, 9), toIPv6('2001:0db8:85a3:0000:0000:8a2e:0370:7334')\";\n+    }\n+}\ndiff --git a/docker/test/integration/dotnet_client/clickhouse.test.csproj b/docker/test/integration/dotnet_client/clickhouse.test.csproj\nnew file mode 100644\nindex 000000000000..11704487bf6a\n--- /dev/null\n+++ b/docker/test/integration/dotnet_client/clickhouse.test.csproj\n@@ -0,0 +1,13 @@\n+<Project Sdk=\"Microsoft.NET.Sdk\">\n+\n+  <PropertyGroup>\n+    <OutputType>Exe</OutputType>\n+    <TargetFramework>netcoreapp3.1</TargetFramework>\n+  </PropertyGroup>\n+\n+  <ItemGroup>\n+    <PackageReference Include=\"clickhouse.client\" Version=\"4.1.0\" />\n+    <PackageReference Include=\"dapper\" Version=\"2.0.30\" />\n+  </ItemGroup>\n+\n+</Project>\ndiff --git a/docker/test/integration/runner/compose/docker_compose_dotnet_client.yml b/docker/test/integration/runner/compose/docker_compose_dotnet_client.yml\nnew file mode 100644\nindex 000000000000..b63dac51522c\n--- /dev/null\n+++ b/docker/test/integration/runner/compose/docker_compose_dotnet_client.yml\n@@ -0,0 +1,6 @@\n+version: '2.3'\n+services:\n+  dotnet1:\n+    image: clickhouse/dotnet-client:${DOCKER_DOTNET_CLIENT_TAG:-latest}\n+    # to keep container running\n+    command: sleep infinity\ndiff --git a/docker/test/integration/runner/dockerd-entrypoint.sh b/docker/test/integration/runner/dockerd-entrypoint.sh\nindex ad8a8e4eb84a..8109ef7ae64e 100755\n--- a/docker/test/integration/runner/dockerd-entrypoint.sh\n+++ b/docker/test/integration/runner/dockerd-entrypoint.sh\n@@ -39,6 +39,7 @@ export CLICKHOUSE_ODBC_BRIDGE_BINARY_PATH=/clickhouse-odbc-bridge\n export CLICKHOUSE_LIBRARY_BRIDGE_BINARY_PATH=/clickhouse-library-bridge\n \n export DOCKER_MYSQL_GOLANG_CLIENT_TAG=${DOCKER_MYSQL_GOLANG_CLIENT_TAG:=latest}\n+export DOCKER_DOTNET_CLIENT_TAG=${DOCKER_DOTNET_CLIENT_TAG:=latest}\n export DOCKER_MYSQL_JAVA_CLIENT_TAG=${DOCKER_MYSQL_JAVA_CLIENT_TAG:=latest}\n export DOCKER_MYSQL_JS_CLIENT_TAG=${DOCKER_MYSQL_JS_CLIENT_TAG:=latest}\n export DOCKER_MYSQL_PHP_CLIENT_TAG=${DOCKER_MYSQL_PHP_CLIENT_TAG:=latest}\ndiff --git a/tests/ci/integration_test_check.py b/tests/ci/integration_test_check.py\nindex 20e33f2f2dc0..e87528dd528f 100644\n--- a/tests/ci/integration_test_check.py\n+++ b/tests/ci/integration_test_check.py\n@@ -33,6 +33,7 @@\n     \"clickhouse/integration-test\",\n     \"clickhouse/kerberos-kdc\",\n     \"clickhouse/integration-helper\",\n+    \"clickhouse/dotnet-client\",\n ]\n \n def get_json_params_dict(check_name, pr_info, docker_images, run_by_hash_total, run_by_hash_num):\ndiff --git a/tests/integration/ci-runner.py b/tests/integration/ci-runner.py\nindex 830b8e149f6a..6058a332c294 100755\n--- a/tests/integration/ci-runner.py\n+++ b/tests/integration/ci-runner.py\n@@ -228,6 +228,7 @@ def get_images_names():\n                 \"clickhouse/mysql-java-client\", \"clickhouse/mysql-js-client\",\n                 \"clickhouse/mysql-php-client\", \"clickhouse/postgresql-java-client\",\n                 \"clickhouse/integration-test\", \"clickhouse/kerberos-kdc\",\n+                \"clickhouse/dotnet-client\",\n                 \"clickhouse/integration-helper\", ]\n \n \n@@ -252,7 +253,7 @@ def _install_clickhouse(self, debs_path):\n                         logging.info(\"Executing installation cmd %s\", cmd)\n                         retcode = subprocess.Popen(cmd, shell=True, stderr=log, stdout=log).wait()\n                         if retcode == 0:\n-                            logging.info(\"Instsallation of %s successfull\", full_path)\n+                            logging.info(\"Installation of %s successfull\", full_path)\n                         else:\n                             raise Exception(\"Installation of %s failed\", full_path)\n                     break\ndiff --git a/tests/integration/runner b/tests/integration/runner\nindex 4d01b9737d10..3687ca4068c6 100755\n--- a/tests/integration/runner\n+++ b/tests/integration/runner\n@@ -226,6 +226,8 @@ if __name__ == \"__main__\":\n             [image, tag] = img_tag.split(\":\")\n             if image == \"clickhouse/mysql-golang-client\":\n                 env_tags += \"-e {}={} \".format(\"DOCKER_MYSQL_GOLANG_CLIENT_TAG\", tag)\n+            elif image == \"clickhouse/dotnet-client\":\n+                env_tags += \"-e {}={} \".format(\"DOCKER_DOTNET_CLIENT_TAG\", tag)\n             elif image == \"clickhouse/mysql-java-client\":\n                 env_tags += \"-e {}={} \".format(\"DOCKER_MYSQL_JAVA_CLIENT_TAG\", tag)\n             elif image == \"clickhouse/mysql-js-client\":\n@@ -237,7 +239,7 @@ if __name__ == \"__main__\":\n             elif image == \"clickhouse/integration-test\":\n                 env_tags += \"-e {}={} \".format(\"DOCKER_BASE_TAG\", tag)\n             elif image == \"clickhouse/kerberos-kdc\":\n-                env_tags += \"-e {}={}\".format(\"DOCKER_KERBEROS_KDC_TAG\", tag)\n+                env_tags += \"-e {}={} \".format(\"DOCKER_KERBEROS_KDC_TAG\", tag)\n             else:\n                 logging.info(\"Unknown image %s\" % (image))\n \ndiff --git a/tests/integration/test_dotnet_client/__init__.py b/tests/integration/test_dotnet_client/__init__.py\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/integration/test_dotnet_client/configs/config.xml b/tests/integration/test_dotnet_client/configs/config.xml\nnew file mode 100644\nindex 000000000000..9bcadc43f105\n--- /dev/null\n+++ b/tests/integration/test_dotnet_client/configs/config.xml\n@@ -0,0 +1,16 @@\n+<?xml version=\"1.0\"?>\n+<clickhouse>\n+    <logger>\n+        <level>trace</level>\n+        <log>/var/log/clickhouse-server/clickhouse-server.log</log>\n+        <errorlog>/var/log/clickhouse-server/clickhouse-server.err.log</errorlog>\n+        <size>1000M</size>\n+        <count>10</count>\n+    </logger>\n+\n+    <http_port>8123</http_port>\n+    <listen_host>127.0.0.1</listen_host>\n+\n+    <path>./clickhouse/</path>\n+    <users_config>users.xml</users_config>\n+</clickhouse>\ndiff --git a/tests/integration/test_dotnet_client/configs/users.xml b/tests/integration/test_dotnet_client/configs/users.xml\nnew file mode 100644\nindex 000000000000..1874371871a9\n--- /dev/null\n+++ b/tests/integration/test_dotnet_client/configs/users.xml\n@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\"?>\n+<clickhouse>\n+    <profiles>\n+        <default>\n+        </default>\n+    </profiles>\n+\n+    <users>\n+        <default>\n+            <password>123</password>\n+            <networks incl=\"networks\" replace=\"replace\">\n+                <ip>::/0</ip>\n+            </networks>\n+            <profile>default</profile>\n+            <quota>default</quota>\n+        </default>\n+\n+        <user_with_empty_password>\n+            <password></password>\n+            <networks incl=\"networks\" replace=\"replace\">\n+                <ip>::/0</ip>\n+            </networks>\n+            <profile>default</profile>\n+            <quota>default</quota>\n+        </user_with_empty_password>\n+    </users>\n+\n+    <quotas>\n+        <default>\n+        </default>\n+    </quotas>\n+</clickhouse>\ndiff --git a/tests/integration/test_dotnet_client/dotnet.reference b/tests/integration/test_dotnet_client/dotnet.reference\nnew file mode 100644\nindex 000000000000..a3d6e1d5ba83\nBinary files /dev/null and b/tests/integration/test_dotnet_client/dotnet.reference differ\ndiff --git a/tests/integration/test_dotnet_client/test.py b/tests/integration/test_dotnet_client/test.py\nnew file mode 100644\nindex 000000000000..4cc16ac826ef\n--- /dev/null\n+++ b/tests/integration/test_dotnet_client/test.py\n@@ -0,0 +1,47 @@\n+# coding: utf-8\n+\n+import datetime\n+import math\n+import os\n+import time\n+\n+import logging\n+import docker\n+import pytest\n+from docker.models.containers import Container\n+from helpers.cluster import ClickHouseCluster, get_docker_compose_path, run_and_check\n+\n+SCRIPT_DIR = os.path.dirname(os.path.realpath(__file__))\n+DOCKER_COMPOSE_PATH = get_docker_compose_path()\n+\n+cluster = ClickHouseCluster(__file__)\n+node = cluster.add_instance('node',\n+                            user_configs=[\"configs/users.xml\"], env_variables={'UBSAN_OPTIONS': 'print_stacktrace=1'})\n+\n+@pytest.fixture(scope=\"module\")\n+def started_cluster():\n+    cluster.start()\n+    try:\n+        yield cluster\n+    finally:\n+        cluster.shutdown()\n+\n+\n+@pytest.fixture(scope='module')\n+def dotnet_container():\n+    docker_compose = os.path.join(DOCKER_COMPOSE_PATH, 'docker_compose_dotnet_client.yml')\n+    run_and_check(\n+        ['docker-compose', '-p', cluster.project_name, '-f', docker_compose, 'up', '--no-recreate', '-d', '--no-build'])\n+    yield docker.from_env().containers.get(cluster.project_name + '_dotnet1_1')\n+\n+\n+def test_dotnet_client(started_cluster, dotnet_container):\n+    with open(os.path.join(SCRIPT_DIR, 'dotnet.reference'), 'rb') as fp:\n+        reference = fp.read()\n+\n+    code, (stdout, stderr) = dotnet_container.exec_run(\n+        'dotnet run --host {host} --port {port} --user default --password 123 --database default'\n+        .format(host=started_cluster.get_instance_ip('node'), port=8123), demux=True)\n+\n+    assert code == 0\n+    assert stdout == reference\n",
  "problem_statement": "Adding integration test for ClickHouse.Client\nI hereby agree to the terms of the CLA available at: https://yandex.ru/legal/cla/?lang=en\r\n\r\nChangelog category (leave one):\r\n- Build/Testing Improvement\r\n\r\nChangelog entry (a user-readable short description of the changes that goes to CHANGELOG.md):\r\nAdded integration test for external .NET client ([ClickHouse.Client](https://github.com/DarkWanderer/ClickHouse.Client))\r\n\r\nAdditional info:\r\n- I don't have a machine to run the integration test suite locally, so this PR is a bit of 'shot in the dark'\n",
  "hints_text": "",
  "created_at": "2022-01-03T00:44:37Z"
}