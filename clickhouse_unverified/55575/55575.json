{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 55575,
  "instance_id": "ClickHouse__ClickHouse-55575",
  "issue_numbers": [
    "54380"
  ],
  "base_commit": "5136562e91d7e4113d5d0211d080f752c171e0c7",
  "patch": "diff --git a/src/Processors/Formats/Impl/ConstantExpressionTemplate.cpp b/src/Processors/Formats/Impl/ConstantExpressionTemplate.cpp\nindex 2602f8b881de..316a84fe94f6 100644\n--- a/src/Processors/Formats/Impl/ConstantExpressionTemplate.cpp\n+++ b/src/Processors/Formats/Impl/ConstantExpressionTemplate.cpp\n@@ -603,18 +603,21 @@ bool ConstantExpressionTemplate::parseLiteralAndAssertType(\n             memcpy(buf, istr.position(), bytes_to_copy);\n             buf[bytes_to_copy] = 0;\n \n-            char * pos_double = buf;\n+            /// Skip leading zeroes - we don't want any funny octal business\n+            char * non_zero_buf = find_first_not_symbols<'0'>(buf, buf + bytes_to_copy);\n+\n+            char * pos_double = non_zero_buf;\n             errno = 0;\n-            Float64 float_value = std::strtod(buf, &pos_double);\n-            if (pos_double == buf || errno == ERANGE || float_value < 0)\n+            Float64 float_value = std::strtod(non_zero_buf, &pos_double);\n+            if (pos_double == non_zero_buf || errno == ERANGE || float_value < 0)\n                 return false;\n \n             if (negative)\n                 float_value = -float_value;\n \n-            char * pos_integer = buf;\n+            char * pos_integer = non_zero_buf;\n             errno = 0;\n-            UInt64 uint_value = std::strtoull(buf, &pos_integer, 0);\n+            UInt64 uint_value = std::strtoull(non_zero_buf, &pos_integer, 0);\n             if (pos_integer == pos_double && errno != ERANGE && (!negative || uint_value <= (1ULL << 63)))\n             {\n                 istr.position() += pos_integer - buf;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02896_leading_zeroes_no_octal.reference b/tests/queries/0_stateless/02896_leading_zeroes_no_octal.reference\nnew file mode 100644\nindex 000000000000..5b932f508242\n--- /dev/null\n+++ b/tests/queries/0_stateless/02896_leading_zeroes_no_octal.reference\n@@ -0,0 +1,35 @@\n+Leading zeroes into INTEGER\n+1\t1\t00000\t0\t0\n+1\t2\t0\t0\t0\n+1\t3\t00\t0\t0\n+1\t4\t01\t1\t1\n+1\t5\t+01\t1\t1\n+1\t6\t-01\t-1\t-1\n+1\t7\t0001\t1\t1\n+1\t8\t0005\t5\t5\n+1\t9\t0008\t8\t8\n+1\t10\t0017\t17\t17\n+1\t11\t0021\t21\t21\n+1\t12\t0051\t51\t51\n+1\t13\t00000123\t123\t123\n+1\t14\t0b10000\t16\t16\n+1\t15\t0x0abcd\t43981\t43981\n+1\t16\t0000.008\t0\t0\n+1\t17\t1000.0008\t1000\t1000\n+1\t18\t0008.0008\t8\t8\n+Leading zeroes into Float32\n+1\t1\t00000\t0\t0\n+1\t2\t00009.00009\t9.00009\t9.00009\n+1\t3\t00009e9\t9000000000\t9000000000\n+1\t4\t00009e09\t9000000000\t9000000000\n+1\t5\t00009e0009\t9000000000\t9000000000\n+1\t6\t-00000\t-0.1\t-0.1\n+1\t7\t-00009.00009\t-9.00009\t-9.00009\n+1\t8\t-00009e9\t-9000000000\t-9000000000\n+1\t9\t-00009e09\t-9000000000\t-9000000000\n+1\t10\t-00009e0009\t-9000000000\t-9000000000\n+1\t11\t+00000\t0\t0\n+1\t12\t+00009.00009\t9.00009\t9.00009\n+1\t13\t+00009e9\t9000000000\t9000000000\n+1\t14\t+00009e09\t9000000000\t9000000000\n+1\t15\t+00009e0009\t9000000000\t9000000000\ndiff --git a/tests/queries/0_stateless/02896_leading_zeroes_no_octal.sql b/tests/queries/0_stateless/02896_leading_zeroes_no_octal.sql\nnew file mode 100644\nindex 000000000000..69cc06a46f8b\n--- /dev/null\n+++ b/tests/queries/0_stateless/02896_leading_zeroes_no_octal.sql\n@@ -0,0 +1,28 @@\n+DROP TABLE IF EXISTS t_leading_zeroes;\n+DROP TABLE IF EXISTS t_leading_zeroes_f;\n+\n+CREATE TABLE t_leading_zeroes(id INTEGER, input String, val INTEGER, expected INTEGER) ENGINE=MergeTree ORDER BY id;\n+\n+INSERT INTO t_leading_zeroes VALUES (1, '00000', 00000, 0), (2, '0', 0, 0), (3, '00', 00, 0), (4, '01', 01, 1), (5, '+01', +01, 1);\n+INSERT INTO t_leading_zeroes VALUES (6, '-01', -01, -1), (7, '0001', 0001, 1), (8, '0005', 0005, 5), (9, '0008', 0008, 8);\n+INSERT INTO t_leading_zeroes VALUES (10, '0017', 0017, 17), (11, '0021', 0021, 21), (12, '0051', 0051, 51), (13, '00000123', 00000123, 123);\n+INSERT INTO t_leading_zeroes VALUES (14, '0b10000', 0b10000, 16), (15, '0x0abcd', 0x0abcd, 43981), (16, '0000.008', 0000.008, 0)\n+INSERT INTO t_leading_zeroes VALUES (17, '1000.0008', 1000.0008, 1000), (18, '0008.0008', 0008.0008, 8);\n+\n+SELECT 'Leading zeroes into INTEGER';\n+SELECT t.val == t.expected AS ok, * FROM t_leading_zeroes t ORDER BY id;\n+\n+-- Floats don't go via the weird octal path:\n+CREATE TABLE t_leading_zeroes_f(id INTEGER, input String, val Float32, expected Float32) ENGINE=MergeTree ORDER BY id;\n+INSERT INTO t_leading_zeroes_f VALUES (1, '00000', 00000, 0), (2, '00009.00009', 00009.00009, 9.00009), (3, '00009e9', 00009e9, 9e9), (4, '00009e09', 00009e09, 9e9), (5, '00009e0009', 00009e0009, 9e9);\n+INSERT INTO t_leading_zeroes_f VALUES (6, '-00000', -00000.1, -0.1), (7, '-00009.00009', -00009.00009, -9.00009), (8, '-00009e9', -00009e9, -9e9), (9, '-00009e09', -00009e09, -9e9), (10, '-00009e0009', -00009e0009, -9e9);\n+INSERT INTO t_leading_zeroes_f VALUES (11, '+00000', +00000., 0), (12, '+00009.00009', +00009.00009, 9.00009), (13, '+00009e9', +00009e9, 9e9), (14, '+00009e09', +00009e09, 9e9), (15, '+00009e0009', +00009e0009, 9e9);\n+-- Coincidentally, the following result in 9 rather than 9e9 because of readFloatTextFastImpl\n+-- using readUIntTextUpToNSignificantDigits<4>(exponent, in)\n+-- INSERT INTO t_leading_zeroes_f VALUES (100, '00009e00009', 00009e00009, 9e9), (101, '-00009e00009', -00009e00009, -9e9), (102, '+00009e00009', +00009e00009, 9e9)\n+\n+SELECT 'Leading zeroes into Float32';\n+SELECT t.val == t.expected AS ok, * FROM t_leading_zeroes_f t ORDER BY id;\n+\n+DROP TABLE IF EXISTS t_leading_zeroes;\n+DROP TABLE IF EXISTS t_leading_zeroes_f;\n\\ No newline at end of file\n",
  "problem_statement": "Incorrect handling of leading zeroes during INSERT\n**How to reproduce**\r\n```sql\r\nCREATE TABLE EMPLOYEE\r\n(\r\n    `empId` INTEGER PRIMARY KEY,\r\n    `d` DOUBLE\r\n)\r\nENGINE = MergeTree\r\nORDER BY empId;\r\n\r\nINSERT INTO EMPLOYEE VALUES (0001, 1.456), (0005, 45.98), (0008, 4342.766), (0017, 345.87), (0021, 43.78), (0051, 0.781);\r\n\r\nSELECT * FROM EMPLOYEE;\r\n```\r\nResults into\r\n```\r\n\u250c\u2500empId\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500d\u2500\u2510\r\n\u2502     1 \u2502    1.456 \u2502\r\n\u2502     5 \u2502    45.98 \u2502\r\n\u2502     8 \u2502 4342.766 \u2502\r\n\u2502    15 \u2502   345.87 \u2502\r\n\u2502    17 \u2502    43.78 \u2502\r\n\u2502    41 \u2502    0.781 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n**Expected behavior**\r\n```\r\n\u250c\u2500empId\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500d\u2500\u2510\r\n\u2502     1 \u2502    1.456 \u2502\r\n\u2502     5 \u2502    45.98 \u2502\r\n\u2502     8 \u2502 4342.766 \u2502\r\n\u2502    17 \u2502   345.87 \u2502\r\n\u2502    21 \u2502    43.78 \u2502\r\n\u2502    51 \u2502    0.781 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nReproduces on the latest master:\r\nhttps://fiddle.clickhouse.com/8d27f2fe-31a8-4af5-a54b-c0d1608886db\n",
  "hints_text": "The numbers are mistakenly parsed as octal. We shouldn't do that - octal numbers are harmful, as well as functions like `strto*` from C.",
  "created_at": "2023-10-12T20:47:52Z",
  "modified_files": [
    "src/Processors/Formats/Impl/ConstantExpressionTemplate.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02896_leading_zeroes_no_octal.reference",
    "b/tests/queries/0_stateless/02896_leading_zeroes_no_octal.sql"
  ]
}