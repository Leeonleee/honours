diff --git a/src/Functions/initialQueryID.cpp b/src/Functions/initialQueryID.cpp
new file mode 100644
index 000000000000..118339a8fb60
--- /dev/null
+++ b/src/Functions/initialQueryID.cpp
@@ -0,0 +1,44 @@
+#include <Functions/IFunction.h>
+#include <Functions/FunctionFactory.h>
+#include <Interpreters/Context.h>
+#include <DataTypes/DataTypeString.h>
+#include <Core/Field.h>
+
+namespace DB
+{
+class FunctionInitialQueryID : public IFunction
+{
+    const String initial_query_id;
+
+public:
+    static constexpr auto name = "initialQueryID";
+    static FunctionPtr create(ContextPtr context)
+    {
+        return std::make_shared<FunctionInitialQueryID>(context->getClientInfo().initial_query_id);
+    }
+
+    explicit FunctionInitialQueryID(const String & initial_query_id_) : initial_query_id(initial_query_id_) {}
+
+    inline String getName() const override { return name; }
+
+    inline size_t getNumberOfArguments() const override { return 0; }
+
+    DataTypePtr getReturnTypeImpl(const DataTypes & /*arguments*/) const override
+    {
+        return std::make_shared<DataTypeString>();
+    }
+
+    inline bool isDeterministic() const override { return false; }
+
+    ColumnPtr executeImpl(const ColumnsWithTypeAndName &, const DataTypePtr &, size_t input_rows_count) const override
+    {
+        return DataTypeString().createColumnConst(input_rows_count, initial_query_id);
+    }
+};
+
+void registerFunctionInitialQueryID(FunctionFactory & factory)
+{
+    factory.registerFunction<FunctionInitialQueryID>();
+    factory.registerAlias("initial_query_id", FunctionInitialQueryID::name, FunctionFactory::CaseInsensitive);
+}
+}
diff --git a/src/Functions/queryID.cpp b/src/Functions/queryID.cpp
new file mode 100644
index 000000000000..b55d3fa03266
--- /dev/null
+++ b/src/Functions/queryID.cpp
@@ -0,0 +1,44 @@
+#include <Functions/IFunction.h>
+#include <Functions/FunctionFactory.h>
+#include <Interpreters/Context.h>
+#include <DataTypes/DataTypeString.h>
+#include <Core/Field.h>
+
+namespace DB
+{
+class FunctionQueryID : public IFunction
+{
+    const String query_id;
+
+public:
+    static constexpr auto name = "queryID";
+    static FunctionPtr create(ContextPtr context)
+    {
+        return std::make_shared<FunctionQueryID>(context->getClientInfo().current_query_id);
+    }
+
+    explicit FunctionQueryID(const String & query_id_) : query_id(query_id_) {}
+
+    inline String getName() const override { return name; }
+
+    inline size_t getNumberOfArguments() const override { return 0; }
+
+    DataTypePtr getReturnTypeImpl(const DataTypes & /*arguments*/) const override
+    {
+        return std::make_shared<DataTypeString>();
+    }
+
+    inline bool isDeterministic() const override { return false; }
+
+    ColumnPtr executeImpl(const ColumnsWithTypeAndName &, const DataTypePtr &, size_t input_rows_count) const override
+    {
+        return DataTypeString().createColumnConst(input_rows_count, query_id)->convertToFullColumnIfConst();
+    }
+};
+
+void registerFunctionQueryID(FunctionFactory & factory)
+{
+    factory.registerFunction<FunctionQueryID>();
+    factory.registerAlias("query_id", FunctionQueryID::name, FunctionFactory::CaseInsensitive);
+}
+}
diff --git a/src/Functions/registerFunctionsMiscellaneous.cpp b/src/Functions/registerFunctionsMiscellaneous.cpp
index 3403390ea72c..ed9b642738b3 100644
--- a/src/Functions/registerFunctionsMiscellaneous.cpp
+++ b/src/Functions/registerFunctionsMiscellaneous.cpp
@@ -74,6 +74,8 @@ void registerFunctionFile(FunctionFactory & factory);
 void registerFunctionConnectionId(FunctionFactory & factory);
 void registerFunctionPartitionId(FunctionFactory & factory);
 void registerFunctionIsIPAddressContainedIn(FunctionFactory &);
+void registerFunctionQueryID(FunctionFactory & factory);
+void registerFunctionInitialQueryID(FunctionFactory & factory);
 
 #if USE_ICU
 void registerFunctionConvertCharset(FunctionFactory &);
@@ -148,6 +150,8 @@ void registerFunctionsMiscellaneous(FunctionFactory & factory)
     registerFunctionConnectionId(factory);
     registerFunctionPartitionId(factory);
     registerFunctionIsIPAddressContainedIn(factory);
+    registerFunctionQueryID(factory);
+    registerFunctionInitialQueryID(factory);
 
 #if USE_ICU
     registerFunctionConvertCharset(factory);
