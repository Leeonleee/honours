{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 34141,
  "instance_id": "ClickHouse__ClickHouse-34141",
  "issue_numbers": [
    "34135"
  ],
  "base_commit": "f3453024ffdd62c5c850f289d11237a918beb71f",
  "patch": "diff --git a/src/Parsers/ParserDictionary.cpp b/src/Parsers/ParserDictionary.cpp\nindex 399dda089113..ef914e2264a1 100644\n--- a/src/Parsers/ParserDictionary.cpp\n+++ b/src/Parsers/ParserDictionary.cpp\n@@ -188,8 +188,19 @@ bool ParserDictionary::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)\n     ASTPtr ast_settings;\n \n     /// Primary is required to be the first in dictionary definition\n-    if (primary_key_keyword.ignore(pos) && !expression_list_p.parse(pos, primary_key, expected))\n-        return false;\n+    if (primary_key_keyword.ignore(pos))\n+    {\n+        bool was_open = false;\n+\n+        if (open.ignore(pos, expected))\n+            was_open = true;\n+\n+        if (!expression_list_p.parse(pos, primary_key, expected))\n+            return false;\n+\n+        if (was_open && !close.ignore(pos, expected))\n+            return false;\n+    }\n \n     /// Loop is used to avoid strict order of dictionary properties\n     while (true)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02188_parser_dictionary_primary_key.reference b/tests/queries/0_stateless/02188_parser_dictionary_primary_key.reference\nnew file mode 100644\nindex 000000000000..0e4e614d2640\n--- /dev/null\n+++ b/tests/queries/0_stateless/02188_parser_dictionary_primary_key.reference\n@@ -0,0 +1,8 @@\n+Dictionary output\n+0\tValue\n+Dictionary output\n+0\tValue\n+Dictionary output\n+0\tValue\n+Dictionary output\n+0\tValue\ndiff --git a/tests/queries/0_stateless/02188_parser_dictionary_primary_key.sql b/tests/queries/0_stateless/02188_parser_dictionary_primary_key.sql\nnew file mode 100644\nindex 000000000000..a939c30b57b5\n--- /dev/null\n+++ b/tests/queries/0_stateless/02188_parser_dictionary_primary_key.sql\n@@ -0,0 +1,65 @@\n+DROP TABLE IF EXISTS 02188_test_dictionary_source;\n+CREATE TABLE 02188_test_dictionary_source\n+(\n+    id UInt64,\n+    value String\n+)\n+ENGINE=TinyLog;\n+\n+INSERT INTO 02188_test_dictionary_source VALUES (0, 'Value');\n+\n+DROP DICTIONARY IF EXISTS 02188_test_dictionary_simple_primary_key;\n+CREATE DICTIONARY 02188_test_dictionary_simple_primary_key\n+(\n+    id UInt64,\n+    value String\n+)\n+PRIMARY KEY id\n+SOURCE(CLICKHOUSE(TABLE '02188_test_dictionary_source'))\n+LAYOUT(DIRECT());\n+\n+SELECT 'Dictionary output';\n+SELECT * FROM 02188_test_dictionary_simple_primary_key;\n+DROP DICTIONARY 02188_test_dictionary_simple_primary_key;\n+\n+CREATE DICTIONARY 02188_test_dictionary_simple_primary_key\n+(\n+    id UInt64,\n+    value String\n+)\n+PRIMARY KEY (id)\n+SOURCE(CLICKHOUSE(TABLE '02188_test_dictionary_source'))\n+LAYOUT(DIRECT());\n+\n+SELECT 'Dictionary output';\n+SELECT * FROM 02188_test_dictionary_simple_primary_key;\n+DROP DICTIONARY 02188_test_dictionary_simple_primary_key;\n+\n+DROP DICTIONARY IF EXISTS 02188_test_dictionary_complex_primary_key;\n+CREATE DICTIONARY 02188_test_dictionary_complex_primary_key\n+(\n+    id UInt64,\n+    value String\n+)\n+PRIMARY KEY id, value\n+SOURCE(CLICKHOUSE(TABLE '02188_test_dictionary_source'))\n+LAYOUT(COMPLEX_KEY_DIRECT());\n+\n+SELECT 'Dictionary output';\n+SELECT * FROM 02188_test_dictionary_complex_primary_key;\n+DROP DICTIONARY 02188_test_dictionary_complex_primary_key;\n+\n+CREATE DICTIONARY 02188_test_dictionary_complex_primary_key\n+(\n+    id UInt64,\n+    value String\n+)\n+PRIMARY KEY (id, value)\n+SOURCE(CLICKHOUSE(TABLE '02188_test_dictionary_source'))\n+LAYOUT(COMPLEX_KEY_DIRECT());\n+\n+SELECT 'Dictionary output';\n+SELECT * FROM 02188_test_dictionary_complex_primary_key;\n+DROP DICTIONARY 02188_test_dictionary_complex_primary_key;\n+\n+DROP TABLE 02188_test_dictionary_source;\n",
  "problem_statement": "Dictionaries complex primary key does not allow ( )\n`PRIMARY KEY (key1,key2,key3)` VS `PRIMARY KEY key1,key2,key3`\r\n\r\n```\r\ncreate database test;\r\nuse test;\r\n\r\ncreate table dict_table ( key1 UInt64, key2 String, key3 String, S String)\r\nEngine MergeTree order by (key1, key2, key3);\r\n\r\nCREATE DICTIONARY item_dict ( key1 UInt64, key2 String, key3 String, S String ) \r\nPRIMARY KEY (key1,key2,key3) \r\nSOURCE(CLICKHOUSE(TABLE dict_table DB 'test' USER 'default')) \r\nLAYOUT(complex_key_direct());\r\n\r\nExpected one of: list of elements, identifier\r\n\r\nCREATE DICTIONARY item_dict ( key1 UInt64, key2 String, key3 String, S String ) \r\nPRIMARY KEY key1,key2,key3\r\nSOURCE(CLICKHOUSE(TABLE dict_table DB 'test' USER 'default')) \r\nLAYOUT(complex_key_direct());\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.007 sec.\r\n```\n",
  "hints_text": "@kitaisreal We should support the variant in parens.",
  "created_at": "2022-01-29T15:47:50Z"
}