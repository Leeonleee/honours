{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 10270,
  "instance_id": "ClickHouse__ClickHouse-10270",
  "issue_numbers": [
    "10227"
  ],
  "base_commit": "0fd0711b5145a1c2b3096391bf1158d0504e0b24",
  "patch": "diff --git a/programs/client/Client.cpp b/programs/client/Client.cpp\nindex 0c18301df0c8..53947283faf0 100644\n--- a/programs/client/Client.cpp\n+++ b/programs/client/Client.cpp\n@@ -398,6 +398,10 @@ class Client : public Poco::Util::Application\n             ignore_error = config().getBool(\"ignore-error\", false);\n         }\n \n+        ClientInfo & client_info = context.getClientInfo();\n+        client_info.setInitialQuery();\n+        client_info.quota_key = config().getString(\"quota_key\", \"\");\n+\n         connect();\n \n         /// Initialize DateLUT here to avoid counting time spent here as query execution time.\n@@ -606,9 +610,7 @@ class Client : public Poco::Util::Application\n \n         server_version = toString(server_version_major) + \".\" + toString(server_version_minor) + \".\" + toString(server_version_patch);\n \n-        if (\n-            server_display_name = connection->getServerDisplayName(connection_parameters.timeouts);\n-            server_display_name.length() == 0)\n+        if (server_display_name = connection->getServerDisplayName(connection_parameters.timeouts); server_display_name.empty())\n         {\n             server_display_name = config().getString(\"host\", \"localhost\");\n         }\n@@ -914,7 +916,7 @@ class Client : public Poco::Util::Application\n                     query_id,\n                     QueryProcessingStage::Complete,\n                     &context.getSettingsRef(),\n-                    nullptr,\n+                    &context.getClientInfo(),\n                     true);\n \n                 sendExternalTables();\n@@ -946,7 +948,15 @@ class Client : public Poco::Util::Application\n         if (!parsed_insert_query.data && (is_interactive || (!stdin_is_a_tty && std_in.eof())))\n             throw Exception(\"No data to insert\", ErrorCodes::NO_DATA_TO_INSERT);\n \n-        connection->sendQuery(connection_parameters.timeouts, query_without_data, query_id, QueryProcessingStage::Complete, &context.getSettingsRef(), nullptr, true);\n+        connection->sendQuery(\n+            connection_parameters.timeouts,\n+            query_without_data,\n+            query_id,\n+            QueryProcessingStage::Complete,\n+            &context.getSettingsRef(),\n+            &context.getClientInfo(),\n+            true);\n+\n         sendExternalTables();\n \n         /// Receive description of table structure.\n@@ -1719,6 +1729,7 @@ class Client : public Poco::Util::Application\n               */\n             (\"password\", po::value<std::string>()->implicit_value(\"\\n\", \"\"), \"password\")\n             (\"ask-password\", \"ask-password\")\n+            (\"quota_key\", po::value<std::string>(), \"A string to differentiate quotas when the user have keyed quotas configured on server\")\n             (\"query_id\", po::value<std::string>(), \"query_id\")\n             (\"query,q\", po::value<std::string>(), \"query\")\n             (\"database,d\", po::value<std::string>(), \"database\")\n@@ -1854,6 +1865,8 @@ class Client : public Poco::Util::Application\n             config().setString(\"password\", options[\"password\"].as<std::string>());\n         if (options.count(\"ask-password\"))\n             config().setBool(\"ask-password\", true);\n+        if (options.count(\"quota_key\"))\n+            config().setString(\"quota_key\", options[\"quota_key\"].as<std::string>());\n         if (options.count(\"multiline\"))\n             config().setBool(\"multiline\", true);\n         if (options.count(\"multiquery\"))\ndiff --git a/programs/client/ConnectionParameters.cpp b/programs/client/ConnectionParameters.cpp\nindex e1611af249d0..50cac3b78007 100644\n--- a/programs/client/ConnectionParameters.cpp\n+++ b/programs/client/ConnectionParameters.cpp\n@@ -29,8 +29,10 @@ ConnectionParameters::ConnectionParameters(const Poco::Util::AbstractConfigurati\n         \"port\", config.getInt(is_secure ? \"tcp_port_secure\" : \"tcp_port\", is_secure ? DBMS_DEFAULT_SECURE_PORT : DBMS_DEFAULT_PORT));\n \n     default_database = config.getString(\"database\", \"\");\n+\n     /// changed the default value to \"default\" to fix the issue when the user in the prompt is blank\n     user = config.getString(\"user\", \"default\");\n+\n     bool password_prompt = false;\n     if (config.getBool(\"ask-password\", false))\n     {\n@@ -52,6 +54,7 @@ ConnectionParameters::ConnectionParameters(const Poco::Util::AbstractConfigurati\n         if (auto result = readpassphrase(prompt.c_str(), buf, sizeof(buf), 0))\n             password = result;\n     }\n+\n     compression = config.getBool(\"compression\", true) ? Protocol::Compression::Enable : Protocol::Compression::Disable;\n \n     timeouts = ConnectionTimeouts(\ndiff --git a/programs/client/ConnectionParameters.h b/programs/client/ConnectionParameters.h\nindex 834f08df9cb4..a169df8390a1 100644\n--- a/programs/client/ConnectionParameters.h\n+++ b/programs/client/ConnectionParameters.h\n@@ -23,7 +23,6 @@ struct ConnectionParameters\n     ConnectionTimeouts timeouts;\n \n     ConnectionParameters() {}\n-\n     ConnectionParameters(const Poco::Util::AbstractConfiguration & config);\n };\n \ndiff --git a/programs/local/LocalServer.cpp b/programs/local/LocalServer.cpp\nindex d2d19a395bbd..06790038a5ec 100644\n--- a/programs/local/LocalServer.cpp\n+++ b/programs/local/LocalServer.cpp\n@@ -279,7 +279,7 @@ void LocalServer::processQueries()\n     context->makeSessionContext();\n     context->makeQueryContext();\n \n-    context->setUser(\"default\", \"\", Poco::Net::SocketAddress{}, \"\");\n+    context->setUser(\"default\", \"\", Poco::Net::SocketAddress{});\n     context->setCurrentQueryId(\"\");\n     applyCmdSettings();\n \ndiff --git a/programs/server/HTTPHandler.cpp b/programs/server/HTTPHandler.cpp\nindex 3d25d6454564..bceeec306cf0 100644\n--- a/programs/server/HTTPHandler.cpp\n+++ b/programs/server/HTTPHandler.cpp\n@@ -283,8 +283,10 @@ void HTTPHandler::processQuery(\n     }\n \n     std::string query_id = params.get(\"query_id\", \"\");\n-    context.setUser(user, password, request.clientAddress(), quota_key);\n+    context.setUser(user, password, request.clientAddress());\n     context.setCurrentQueryId(query_id);\n+    if (!quota_key.empty())\n+        context.setQuotaKey(quota_key);\n \n     /// The user could specify session identifier and session timeout.\n     /// It allows to modify settings, create temporary tables and reuse them in subsequent requests.\ndiff --git a/programs/server/TCPHandler.cpp b/programs/server/TCPHandler.cpp\nindex 93fa78499a18..a792af30cf2f 100644\n--- a/programs/server/TCPHandler.cpp\n+++ b/programs/server/TCPHandler.cpp\n@@ -735,7 +735,7 @@ void TCPHandler::receiveHello()\n         << (!user.empty() ? \", user: \" + user : \"\")\n         << \".\");\n \n-    connection_context.setUser(user, password, socket().peerAddress(), \"\");\n+    connection_context.setUser(user, password, socket().peerAddress());\n }\n \n \ndiff --git a/src/Client/Connection.cpp b/src/Client/Connection.cpp\nindex 7f12e02ae3a1..64cd7f27cd99 100644\n--- a/src/Client/Connection.cpp\n+++ b/src/Client/Connection.cpp\n@@ -61,8 +61,11 @@ void Connection::connect(const ConnectionTimeouts & timeouts)\n         if (connected)\n             disconnect();\n \n-        LOG_TRACE(log_wrapper.get(), \"Connecting. Database: \" << (default_database.empty() ? \"(not specified)\" : default_database) << \". User: \" << user\n-        << (static_cast<bool>(secure) ? \". Secure\" : \"\") << (static_cast<bool>(compression) ? \"\" : \". Uncompressed\"));\n+        LOG_TRACE(log_wrapper.get(), \"Connecting. Database: \"\n+            << (default_database.empty() ? \"(not specified)\" : default_database)\n+            << \". User: \" << user\n+            << (static_cast<bool>(secure) ? \". Secure\" : \"\")\n+            << (static_cast<bool>(compression) ? \"\" : \". Uncompressed\"));\n \n         if (static_cast<bool>(secure))\n         {\n@@ -165,12 +168,14 @@ void Connection::sendHello()\n         || has_control_character(password))\n         throw Exception(\"Parameters 'default_database', 'user' and 'password' must not contain ASCII control characters\", ErrorCodes::BAD_ARGUMENTS);\n \n+    auto client_revision = ClickHouseRevision::get();\n+\n     writeVarUInt(Protocol::Client::Hello, *out);\n     writeStringBinary((DBMS_NAME \" \") + client_name, *out);\n     writeVarUInt(DBMS_VERSION_MAJOR, *out);\n     writeVarUInt(DBMS_VERSION_MINOR, *out);\n     // NOTE For backward compatibility of the protocol, client cannot send its version_patch.\n-    writeVarUInt(ClickHouseRevision::get(), *out);\n+    writeVarUInt(client_revision, *out);\n     writeStringBinary(default_database, *out);\n     writeStringBinary(user, *out);\n     writeStringBinary(password, *out);\n@@ -394,23 +399,10 @@ void Connection::sendQuery(\n     /// Client info.\n     if (server_revision >= DBMS_MIN_REVISION_WITH_CLIENT_INFO)\n     {\n-        ClientInfo client_info_to_send;\n-\n-        if (!client_info || client_info->empty())\n-        {\n-            /// No client info passed - means this query initiated by me.\n-            client_info_to_send.query_kind = ClientInfo::QueryKind::INITIAL_QUERY;\n-            client_info_to_send.fillOSUserHostNameAndVersionInfo();\n-            client_info_to_send.client_name = (DBMS_NAME \" \") + client_name;\n-        }\n+        if (client_info && !client_info->empty())\n+            client_info->write(*out, server_revision);\n         else\n-        {\n-            /// This query is initiated by another query.\n-            client_info_to_send = *client_info;\n-            client_info_to_send.query_kind = ClientInfo::QueryKind::SECONDARY_QUERY;\n-        }\n-\n-        client_info_to_send.write(*out, server_revision);\n+            ClientInfo().write(*out, server_revision);\n     }\n \n     /// Per query settings.\ndiff --git a/src/Client/ConnectionPool.h b/src/Client/ConnectionPool.h\nindex 1ecb432c827b..be52234b9049 100644\n--- a/src/Client/ConnectionPool.h\n+++ b/src/Client/ConnectionPool.h\n@@ -15,8 +15,8 @@ namespace DB\n   *\n   *    void thread()\n   *    {\n-  *          auto connection = pool.get();\n-  *        connection->sendQuery(\"SELECT 'Hello, world!' AS world\");\n+  *        auto connection = pool.get();\n+  *        connection->sendQuery(...);\n   *    }\n   */\n \ndiff --git a/src/Client/MultiplexedConnections.cpp b/src/Client/MultiplexedConnections.cpp\nindex b0ff2104ab15..282aaabd119d 100644\n--- a/src/Client/MultiplexedConnections.cpp\n+++ b/src/Client/MultiplexedConnections.cpp\n@@ -94,7 +94,7 @@ void MultiplexedConnections::sendQuery(\n     const String & query,\n     const String & query_id,\n     UInt64 stage,\n-    const ClientInfo * client_info,\n+    const ClientInfo & client_info,\n     bool with_pending_data)\n {\n     std::lock_guard lock(cancel_mutex);\n@@ -126,14 +126,14 @@ void MultiplexedConnections::sendQuery(\n         {\n             modified_settings.parallel_replica_offset = i;\n             replica_states[i].connection->sendQuery(timeouts, query, query_id,\n-                                                    stage, &modified_settings, client_info, with_pending_data);\n+                stage, &modified_settings, &client_info, with_pending_data);\n         }\n     }\n     else\n     {\n         /// Use single replica.\n-        replica_states[0].connection->sendQuery(timeouts, query, query_id, stage,\n-                                                &modified_settings, client_info, with_pending_data);\n+        replica_states[0].connection->sendQuery(timeouts, query, query_id,\n+                stage, &modified_settings, &client_info, with_pending_data);\n     }\n \n     sent_query = true;\ndiff --git a/src/Client/MultiplexedConnections.h b/src/Client/MultiplexedConnections.h\nindex 9d825adb2272..eaec7f744bcd 100644\n--- a/src/Client/MultiplexedConnections.h\n+++ b/src/Client/MultiplexedConnections.h\n@@ -36,10 +36,10 @@ class MultiplexedConnections final : private boost::noncopyable\n     void sendQuery(\n         const ConnectionTimeouts & timeouts,\n         const String & query,\n-        const String & query_id = \"\",\n-        UInt64 stage = QueryProcessingStage::Complete,\n-        const ClientInfo * client_info = nullptr,\n-        bool with_pending_data = false);\n+        const String & query_id,\n+        UInt64 stage,\n+        const ClientInfo & client_info,\n+        bool with_pending_data);\n \n     /// Get packet from any replica.\n     Packet receivePacket();\ndiff --git a/src/Core/MySQLProtocol.h b/src/Core/MySQLProtocol.h\nindex 20dd25b6b2de..b548b573a901 100644\n--- a/src/Core/MySQLProtocol.h\n+++ b/src/Core/MySQLProtocol.h\n@@ -959,7 +959,7 @@ class Native41 : public IPlugin\n \n         if (auth_response->empty())\n         {\n-            context.setUser(user_name, \"\", address, \"\");\n+            context.setUser(user_name, \"\", address);\n             return;\n         }\n \n@@ -982,7 +982,7 @@ class Native41 : public IPlugin\n         {\n             password_sha1[i] = digest[i] ^ static_cast<unsigned char>((*auth_response)[i]);\n         }\n-        context.setUser(user_name, password_sha1, address, \"\");\n+        context.setUser(user_name, password_sha1, address);\n     }\n private:\n     String scramble;\n@@ -1124,7 +1124,7 @@ class Sha256Password : public IPlugin\n             password.pop_back();\n         }\n \n-        context.setUser(user_name, password, address, \"\");\n+        context.setUser(user_name, password, address);\n     }\n \n private:\ndiff --git a/src/DataStreams/RemoteBlockInputStream.cpp b/src/DataStreams/RemoteBlockInputStream.cpp\nindex fc1578d1749d..e9b8d26f975c 100644\n--- a/src/DataStreams/RemoteBlockInputStream.cpp\n+++ b/src/DataStreams/RemoteBlockInputStream.cpp\n@@ -347,7 +347,10 @@ void RemoteBlockInputStream::sendQuery()\n     established = true;\n \n     auto timeouts = ConnectionTimeouts::getTCPTimeoutsWithFailover(settings);\n-    multiplexed_connections->sendQuery(timeouts, query, query_id, stage, &context.getClientInfo(), true);\n+    ClientInfo modified_client_info = context.getClientInfo();\n+    modified_client_info.query_kind = ClientInfo::QueryKind::SECONDARY_QUERY;\n+\n+    multiplexed_connections->sendQuery(timeouts, query, query_id, stage, modified_client_info, true);\n \n     established = false;\n     sent_query = true;\ndiff --git a/src/DataStreams/RemoteBlockOutputStream.cpp b/src/DataStreams/RemoteBlockOutputStream.cpp\nindex 5200500cd002..327e0204892c 100644\n--- a/src/DataStreams/RemoteBlockOutputStream.cpp\n+++ b/src/DataStreams/RemoteBlockOutputStream.cpp\n@@ -21,14 +21,17 @@ namespace ErrorCodes\n RemoteBlockOutputStream::RemoteBlockOutputStream(Connection & connection_,\n                                                  const ConnectionTimeouts & timeouts,\n                                                  const String & query_,\n-                                                 const Settings * settings_,\n-                                                 const ClientInfo * client_info_)\n-    : connection(connection_), query(query_), settings(settings_), client_info(client_info_)\n+                                                 const Settings & settings_,\n+                                                 const ClientInfo & client_info_)\n+    : connection(connection_), query(query_)\n {\n-    /** Send query and receive \"header\", that describe table structure.\n+    ClientInfo modified_client_info = client_info_;\n+    modified_client_info.query_kind = ClientInfo::QueryKind::SECONDARY_QUERY;\n+\n+    /** Send query and receive \"header\", that describes table structure.\n       * Header is needed to know, what structure is required for blocks to be passed to 'write' method.\n       */\n-    connection.sendQuery(timeouts, query, \"\", QueryProcessingStage::Complete, settings, client_info);\n+    connection.sendQuery(timeouts, query, \"\", QueryProcessingStage::Complete, &settings_, &modified_client_info);\n \n     while (true)\n     {\ndiff --git a/src/DataStreams/RemoteBlockOutputStream.h b/src/DataStreams/RemoteBlockOutputStream.h\nindex f7f1ab468065..403871809974 100644\n--- a/src/DataStreams/RemoteBlockOutputStream.h\n+++ b/src/DataStreams/RemoteBlockOutputStream.h\n@@ -22,8 +22,8 @@ class RemoteBlockOutputStream : public IBlockOutputStream\n     RemoteBlockOutputStream(Connection & connection_,\n                             const ConnectionTimeouts & timeouts,\n                             const String & query_,\n-                            const Settings * settings_ = nullptr,\n-                            const ClientInfo * client_info_ = nullptr);\n+                            const Settings & settings_,\n+                            const ClientInfo & client_info_);\n \n     Block getHeader() const override { return header; }\n \n@@ -38,8 +38,6 @@ class RemoteBlockOutputStream : public IBlockOutputStream\n private:\n     Connection & connection;\n     String query;\n-    const Settings * settings;\n-    const ClientInfo * client_info;\n     Block header;\n     bool finished = false;\n };\ndiff --git a/src/Dictionaries/ClickHouseDictionarySource.cpp b/src/Dictionaries/ClickHouseDictionarySource.cpp\nindex 8c736bc0e561..7bf147dd5399 100644\n--- a/src/Dictionaries/ClickHouseDictionarySource.cpp\n+++ b/src/Dictionaries/ClickHouseDictionarySource.cpp\n@@ -74,7 +74,7 @@ ClickHouseDictionarySource::ClickHouseDictionarySource(\n     , load_all_query{query_builder.composeLoadAllQuery()}\n {\n     /// We should set user info even for the case when the dictionary is loaded in-process (without TCP communication).\n-    context.setUser(user, password, Poco::Net::SocketAddress(\"127.0.0.1\", 0), {});\n+    context.setUser(user, password, Poco::Net::SocketAddress(\"127.0.0.1\", 0));\n     context = copyContextAndApplySettings(path_to_settings, context, config);\n \n     /// Query context is needed because some code in executeQuery function may assume it exists.\ndiff --git a/src/Interpreters/ClientInfo.cpp b/src/Interpreters/ClientInfo.cpp\nindex 909582aa3082..378375dcc18e 100644\n--- a/src/Interpreters/ClientInfo.cpp\n+++ b/src/Interpreters/ClientInfo.cpp\n@@ -116,6 +116,14 @@ void ClientInfo::read(ReadBuffer & in, const UInt64 client_protocol_revision)\n }\n \n \n+void ClientInfo::setInitialQuery()\n+{\n+    query_kind = QueryKind::INITIAL_QUERY;\n+    fillOSUserHostNameAndVersionInfo();\n+    client_name = (DBMS_NAME \" \") + client_name;\n+}\n+\n+\n void ClientInfo::fillOSUserHostNameAndVersionInfo()\n {\n     os_user.resize(256, '\\0');\ndiff --git a/src/Interpreters/ClientInfo.h b/src/Interpreters/ClientInfo.h\nindex 492cc299a061..7a4df63c17a6 100644\n--- a/src/Interpreters/ClientInfo.h\n+++ b/src/Interpreters/ClientInfo.h\n@@ -84,6 +84,10 @@ class ClientInfo\n     void write(WriteBuffer & out, const UInt64 server_protocol_revision) const;\n     void read(ReadBuffer & in, const UInt64 client_protocol_revision);\n \n+    /// Initialize parameters on client initiating query.\n+    void setInitialQuery();\n+\n+private:\n     void fillOSUserHostNameAndVersionInfo();\n };\n \ndiff --git a/src/Interpreters/Context.cpp b/src/Interpreters/Context.cpp\nindex 2022c66b4e51..dc94b32a34d0 100644\n--- a/src/Interpreters/Context.cpp\n+++ b/src/Interpreters/Context.cpp\n@@ -648,15 +648,13 @@ ConfigurationPtr Context::getUsersConfig()\n }\n \n \n-void Context::setUser(const String & name, const String & password, const Poco::Net::SocketAddress & address, const String & quota_key)\n+void Context::setUser(const String & name, const String & password, const Poco::Net::SocketAddress & address)\n {\n     auto lock = getLock();\n \n     client_info.current_user = name;\n     client_info.current_password = password;\n     client_info.current_address = address;\n-    if (!quota_key.empty())\n-        client_info.quota_key = quota_key;\n \n     auto new_user_id = getAccessControlManager().find<User>(name);\n     std::shared_ptr<const ContextAccess> new_access;\n@@ -686,6 +684,12 @@ std::shared_ptr<const User> Context::getUser() const\n     return getAccess()->getUser();\n }\n \n+void Context::setQuotaKey(String quota_key_)\n+{\n+    auto lock = getLock();\n+    client_info.quota_key = std::move(quota_key_);\n+}\n+\n String Context::getUserName() const\n {\n     return getAccess()->getUserName();\ndiff --git a/src/Interpreters/Context.h b/src/Interpreters/Context.h\nindex 31d7b1f1e134..4ba135d0b1a2 100644\n--- a/src/Interpreters/Context.h\n+++ b/src/Interpreters/Context.h\n@@ -250,7 +250,8 @@ class Context\n \n     /// Sets the current user, checks the password and that the specified host is allowed.\n     /// Must be called before getClientInfo.\n-    void setUser(const String & name, const String & password, const Poco::Net::SocketAddress & address, const String & quota_key);\n+    void setUser(const String & name, const String & password, const Poco::Net::SocketAddress & address);\n+    void setQuotaKey(String quota_key_);\n \n     UserPtr getUser() const;\n     String getUserName() const;\ndiff --git a/src/Storages/Distributed/DirectoryMonitor.cpp b/src/Storages/Distributed/DirectoryMonitor.cpp\nindex 2a5e47fdf047..f1593cd73d06 100644\n--- a/src/Storages/Distributed/DirectoryMonitor.cpp\n+++ b/src/Storages/Distributed/DirectoryMonitor.cpp\n@@ -274,7 +274,7 @@ void StorageDistributedDirectoryMonitor::processFile(const std::string & file_pa\n         ClientInfo client_info;\n         readHeader(in, insert_settings, insert_query, client_info, log);\n \n-        RemoteBlockOutputStream remote{*connection, timeouts, insert_query, &insert_settings, &client_info};\n+        RemoteBlockOutputStream remote{*connection, timeouts, insert_query, insert_settings, client_info};\n \n         remote.writePrefix();\n         remote.writePrepared(in);\n@@ -463,7 +463,7 @@ struct StorageDistributedDirectoryMonitor::Batch\n                 if (first)\n                 {\n                     first = false;\n-                    remote = std::make_unique<RemoteBlockOutputStream>(*connection, timeouts, insert_query, &insert_settings, &client_info);\n+                    remote = std::make_unique<RemoteBlockOutputStream>(*connection, timeouts, insert_query, insert_settings, client_info);\n                     remote->writePrefix();\n                 }\n \ndiff --git a/src/Storages/Distributed/DistributedBlockOutputStream.cpp b/src/Storages/Distributed/DistributedBlockOutputStream.cpp\nindex 55d8d4da9d87..1c4621a6cae1 100644\n--- a/src/Storages/Distributed/DistributedBlockOutputStream.cpp\n+++ b/src/Storages/Distributed/DistributedBlockOutputStream.cpp\n@@ -311,7 +311,7 @@ ThreadPool::Job DistributedBlockOutputStream::runWritingJob(DistributedBlockOutp\n                 if (throttler)\n                     job.connection_entry->setThrottler(throttler);\n \n-                job.stream = std::make_shared<RemoteBlockOutputStream>(*job.connection_entry, timeouts, query_string, &settings, &context.getClientInfo());\n+                job.stream = std::make_shared<RemoteBlockOutputStream>(*job.connection_entry, timeouts, query_string, settings, context.getClientInfo());\n                 job.stream->writePrefix();\n             }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01198_client_quota_key.reference b/tests/queries/0_stateless/01198_client_quota_key.reference\nnew file mode 100644\nindex 000000000000..c25611c15c61\n--- /dev/null\n+++ b/tests/queries/0_stateless/01198_client_quota_key.reference\n@@ -0,0 +1,2 @@\n+1\n+Hello\ndiff --git a/tests/queries/0_stateless/01198_client_quota_key.sh b/tests/queries/0_stateless/01198_client_quota_key.sh\nnew file mode 100755\nindex 000000000000..f4b66aea6ac6\n--- /dev/null\n+++ b/tests/queries/0_stateless/01198_client_quota_key.sh\n@@ -0,0 +1,6 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+. $CURDIR/../shell_config.sh\n+\n+$CLICKHOUSE_CLIENT --quota_key Hello --query_id test_quota_key --log_queries 1 --multiquery --query \"SELECT 1; SYSTEM FLUSH LOGS; SELECT DISTINCT quota_key FROM system.query_log WHERE event_date >= yesterday() AND event_time >= now() - 300 AND query_id = 'test_quota_key'\"\n",
  "problem_statement": "Support quota_key for Native client\n**Use case**\r\nAllow to pass quota_key with query from `clickhouse-client`\r\nhttps://github.com/ClickHouse/ClickHouse/blob/97f2a2213e754ba25dabba4bc8ddf507cd67660c/programs/server/TCPHandler.cpp#L788\r\n\r\n**Additional context**\r\nQuota key is currently supported in HTTP handler and is not considered deprecated.\r\n[Docs about quota_key](https://clickhouse.tech/docs/en/operations/quotas/)\n",
  "hints_text": "",
  "created_at": "2020-04-15T02:02:14Z"
}