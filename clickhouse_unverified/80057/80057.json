{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 80057,
  "instance_id": "ClickHouse__ClickHouse-80057",
  "issue_numbers": [
    "78243"
  ],
  "base_commit": "15ad4779c89ccff38662599a952c921c21d37012",
  "patch": "diff --git a/docs/en/sql-reference/functions/date-time-functions.md b/docs/en/sql-reference/functions/date-time-functions.md\nindex 0a0faf999d23..0bfdecf11ec9 100644\n--- a/docs/en/sql-reference/functions/date-time-functions.md\n+++ b/docs/en/sql-reference/functions/date-time-functions.md\n@@ -4375,7 +4375,7 @@ Using replacement fields, you can define a pattern for the resulting string. \"Ex\n | %C       | year divided by 100 and truncated to integer (00-99)                                                                                                                                                | 20        |\n | %d       | day of the month, zero-padded (01-31)                                                                                                                                                               | 02        |\n | %D       | Short MM/DD/YY date, equivalent to %m/%d/%y                                                                                                                                                         | 01/02/18  |\n-| %e       | day of the month, space-padded ( 1-31)                                                                                                                                                              | &nbsp; 2  |\n+| %e       | day of the month, space-padded ( 1-31), see 'Note 5' below                                                                                                                                          | &nbsp; 2  |\n | %f       | fractional second, see 'Note 1' and 'Note 2' below                                                                                                                                                  | 123456    |\n | %F       | short YYYY-MM-DD date, equivalent to %Y-%m-%d                                                                                                                                                       | 2018-01-02 |\n | %g       | two-digit year format, aligned to ISO 8601, abbreviated from four-digit notation                                                                                                                    | 18       |\n@@ -4413,7 +4413,9 @@ Note 2: In ClickHouse versions earlier than v25.1, `%f` prints as many digits as\n \n Note 3: In ClickHouse versions earlier than v23.4, `%M` prints the minute (00-59) instead of the full month name (January-December). The previous behavior can be restored using setting `formatdatetime_parsedatetime_m_is_month_name = 0`.\n \n-Note 4: In ClickHouse versions earlier than v23.11, function `parseDateTime()` required leading zeros for formatters `%c` (month) and `%l`/`%k` (hour), e.g. `07`. In later versions, the leading zero may be omitted, e.g. `7`. The previous behavior can be restored using setting `parsedatetime_parse_without_leading_zeros = 0`. Note that function `formatDateTime()` by default still prints leading zeros for `%c` and `%l`/`%k` to not break existing use cases. This behavior can be changed by setting `formatdatetime_format_without_leading_zeros = 1`.\n+Note 4: In ClickHouse versions earlier than v23.11, function `parseDateTime` required leading zeros for formatters `%c` (month) and `%l`/`%k` (hour), e.g. `07`. In later versions, the leading zero may be omitted, e.g. `7`. The previous behavior can be restored using setting `parsedatetime_parse_without_leading_zeros = 0`. Note that function `formatDateTime` by default still prints leading zeros for `%c` and `%l`/`%k` to not break existing use cases. This behavior can be changed by setting `formatdatetime_format_without_leading_zeros = 1`.\n+\n+Note 5: In ClickHouse versions earlier than v25.5, function `parseDateTime` required for formatter `%e` that single-digit days are space padded, e.g. ` 3`. In later versions, space padding is optional, e.g. `3` and ` 3` work. To retain the previous behaviour, set setting `parsedatetime_e_requires_space_padding = 1`. Similarly, formatter `%e` in function `formatDateTime` previously space-padded single-printed unconditionally whereas it now prints them without leading whitespace. To retain the previous behavior, set setting `formatdatetime_e_with_space_padding = 1`.\n \n **Example**\n \ndiff --git a/src/Core/Settings.cpp b/src/Core/Settings.cpp\nindex bf7a6c235ee4..d82992282fa5 100644\n--- a/src/Core/Settings.cpp\n+++ b/src/Core/Settings.cpp\n@@ -3631,9 +3631,15 @@ Formatter '%M' in functions 'formatDateTime' and 'parseDateTime' print/parse the\n     DECLARE(Bool, parsedatetime_parse_without_leading_zeros, true, R\"(\n Formatters '%c', '%l' and '%k' in function 'parseDateTime' parse months and hours without leading zeros.\n )\", 0) \\\n+    DECLARE(Bool, parsedatetime_e_requires_space_padding, false, R\"(\n+Formatter '%e' in function 'parseDateTime' expects that single-digit days are space-padded, e.g., ' 2' is accepted but '2' raises an error.\n+    )\", 0) \\\n     DECLARE(Bool, formatdatetime_format_without_leading_zeros, false, R\"(\n Formatters '%c', '%l' and '%k' in function 'formatDateTime' print months and hours without leading zeros.\n )\", 0) \\\n+    DECLARE(Bool, formatdatetime_e_with_space_padding, false, R\"(\n+Formatter '%e' in function 'formatDateTime' prints single-digit days with a leading space, e.g. ' 2' instead of '2'.\n+    )\", 0) \\\n     DECLARE(Bool, least_greatest_legacy_null_behavior, false, R\"(\n If enabled, functions 'least' and 'greatest' return NULL if one of their arguments is NULL.\n )\", 0) \\\ndiff --git a/src/Core/SettingsChangesHistory.cpp b/src/Core/SettingsChangesHistory.cpp\nindex 3371989c3d00..66083c162ce7 100644\n--- a/src/Core/SettingsChangesHistory.cpp\n+++ b/src/Core/SettingsChangesHistory.cpp\n@@ -73,6 +73,8 @@ const VersionToSettingsChangesMap & getSettingsChangesHistory()\n             {\"secondary_indices_enable_bulk_filtering\", false, true, \"A new algorithm for filtering by data skipping indices\"},\n             {\"implicit_table_at_top_level\", \"\", \"\", \"A new setting, used in clickhouse-local\"},\n             {\"use_skip_indexes_if_final_exact_mode\", 0, 0, \"This setting was introduced to help FINAL query return correct results with skip indexes\"},\n+            {\"parsedatetime_e_requires_space_padding\", true, false, \"Improved compatibility with MySQL DATE_FORMAT/STR_TO_DATE\"},\n+            {\"formatdatetime_e_with_space_padding\", true, false, \"Improved compatibility with MySQL DATE_FORMAT/STR_TO_DATE\"},\n             {\"input_format_max_block_size_bytes\", 0, 0, \"New setting to limit bytes size if blocks created by input format\"},\n             {\"parallel_replicas_insert_select_local_pipeline\", false, true, \"Use local pipeline during distributed INSERT SELECT with parallel replicas. Currently disabled due to performance issues\"},\n             {\"page_cache_block_size\", 1048576, 1048576, \"Made this setting adjustable on a per-query level.\"},\ndiff --git a/src/Functions/formatDateTime.cpp b/src/Functions/formatDateTime.cpp\nindex 4922b3b61bb7..8c728a2be6dc 100644\n--- a/src/Functions/formatDateTime.cpp\n+++ b/src/Functions/formatDateTime.cpp\n@@ -37,6 +37,7 @@ namespace Setting\n     extern const SettingsBool formatdatetime_f_prints_single_zero;\n     extern const SettingsBool formatdatetime_format_without_leading_zeros;\n     extern const SettingsBool formatdatetime_parsedatetime_m_is_month_name;\n+    extern const SettingsBool formatdatetime_e_with_space_padding;\n }\n \n namespace ErrorCodes\n@@ -341,6 +342,28 @@ class FunctionFormatDateTimeImpl : public IFunction\n             return mysqlISO8601Date(dest, source, timezone);\n         }\n \n+        size_t mysqlDayOfMonthWithSpacePadding(char * dest, Time source, UInt64, UInt32, const DateLUTImpl & timezone)\n+        {\n+            auto day = ToDayOfMonthImpl::execute(source, timezone);\n+            if (day < 10)\n+                dest[1] = '0' + day;\n+            else\n+                writeNumber2(dest, day);\n+            return 2;\n+        }\n+\n+        size_t mysqlDayOfMonthWithoutSpacePadding(char * dest, Time source, UInt64, UInt32, const DateLUTImpl & timezone)\n+        {\n+            auto day = ToDayOfMonthImpl::execute(source, timezone);\n+            if (day < 10)\n+            {\n+                dest[0] = '0' + day;\n+                return 1;\n+            }\n+            writeNumber2(dest, day);\n+            return 2;\n+        }\n+\n         size_t mysqlISO8601DateWithSeparators(char * dest, Time source, UInt64, UInt32, const DateLUTImpl & timezone)\n         {\n             size_t total_bytes = mysqlISO8601Date(dest, source, timezone);\n@@ -819,11 +842,12 @@ class FunctionFormatDateTimeImpl : public IFunction\n         throw Exception(ErrorCodes::BAD_ARGUMENTS, \"'%' must not be the last character in the format string, use '%%' instead\");\n     }\n \n-    static bool containsOnlyFixedWidthMySQLFormatters(std::string_view format, bool mysql_M_is_month_name, bool mysql_format_ckl_without_leading_zeros)\n+    static bool containsOnlyFixedWidthMySQLFormatters(std::string_view format, bool mysql_M_is_month_name, bool mysql_format_ckl_without_leading_zeros, bool mysql_e_with_space_padding)\n     {\n         static constexpr std::array variable_width_formatter = {'W'};\n         static constexpr std::array variable_width_formatter_M_is_month_name = {'W', 'M'};\n         static constexpr std::array variable_width_formatter_leading_zeros = {'c', 'l', 'k'};\n+        static constexpr std::array variable_width_formatter_e_with_space_padding = {'e'};\n \n         for (size_t i = 0; i < format.size(); ++i)\n         {\n@@ -846,6 +870,13 @@ class FunctionFormatDateTimeImpl : public IFunction\n                                 [&](char c){ return c == format[i + 1]; }))\n                             return false;\n                     }\n+                    if (!mysql_e_with_space_padding)\n+                    {\n+                        if (std::any_of(\n+                                variable_width_formatter_e_with_space_padding.begin(), variable_width_formatter_e_with_space_padding.end(),\n+                                [&](char c){ return c == format[i + 1]; }))\n+                            return false;\n+                    }\n                     else\n                     {\n                         if (std::any_of(\n@@ -867,6 +898,7 @@ class FunctionFormatDateTimeImpl : public IFunction\n     const bool mysql_f_prints_single_zero;\n     const bool mysql_f_prints_scale_number_of_digits;\n     const bool mysql_format_ckl_without_leading_zeros;\n+    const bool mysql_e_with_space_padding;\n \n public:\n     static constexpr auto name = Name::name;\n@@ -878,6 +910,7 @@ class FunctionFormatDateTimeImpl : public IFunction\n         , mysql_f_prints_single_zero(context->getSettingsRef()[Setting::formatdatetime_f_prints_single_zero])\n         , mysql_f_prints_scale_number_of_digits(context->getSettingsRef()[Setting::formatdatetime_f_prints_scale_number_of_digits])\n         , mysql_format_ckl_without_leading_zeros(context->getSettingsRef()[Setting::formatdatetime_format_without_leading_zeros])\n+        , mysql_e_with_space_padding(context->getSettingsRef()[Setting::formatdatetime_e_with_space_padding])\n     {\n     }\n \n@@ -1031,7 +1064,9 @@ class FunctionFormatDateTimeImpl : public IFunction\n         ///   column rows are NOT populated with the template and left uninitialized. We run the normal instructions for formatters AND\n         ///   instructions that copy literal characters before/between/after formatters. As a result, each byte of each result row is\n         ///   written which is obviously slow.\n-        bool mysql_with_only_fixed_length_formatters = (format_syntax == FormatSyntax::MySQL) ? containsOnlyFixedWidthMySQLFormatters(format, mysql_M_is_month_name, mysql_format_ckl_without_leading_zeros) : false;\n+        bool mysql_with_only_fixed_length_formatters = (format_syntax == FormatSyntax::MySQL)\n+            ? containsOnlyFixedWidthMySQLFormatters(format, mysql_M_is_month_name, mysql_format_ckl_without_leading_zeros, mysql_e_with_space_padding)\n+            : false;\n \n         using T = typename InstructionValueTypeMap<DataType>::InstructionValueType;\n         std::vector<Instruction<T>> instructions;\n@@ -1275,13 +1310,25 @@ class FunctionFormatDateTimeImpl : public IFunction\n                         break;\n                     }\n \n-                    // Day of month, space-padded ( 1-31)  23\n+                    // Day of month\n                     case 'e':\n                     {\n-                        Instruction<T> instruction;\n-                        instruction.setMysqlFunc(&Instruction<T>::mysqlDayOfMonthSpacePadded);\n-                        instructions.push_back(std::move(std::move(instruction)));\n-                        out_template += \" 0\";\n+                        if (mysql_e_with_space_padding)\n+                        {\n+                            /// Space-padded ( 1-31)\n+                            Instruction<T> instruction;\n+                            instruction.setMysqlFunc(&Instruction<T>::mysqlDayOfMonthWithSpacePadding);\n+                            instructions.push_back(std::move(std::move(instruction)));\n+                            out_template += \" 0\";\n+                        }\n+                        else\n+                        {\n+                            /// Not space-padded (1-31)\n+                            Instruction<T> instruction;\n+                            instruction.setMysqlFunc(&Instruction<T>::mysqlDayOfMonthWithoutSpacePadding);\n+                            instructions.push_back(std::move(std::move(instruction)));\n+                            out_template += \"00\";\n+                        }\n                         break;\n                     }\n \ndiff --git a/src/Functions/parseDateTime.cpp b/src/Functions/parseDateTime.cpp\nindex b6d55a16e7d5..40c002e626c1 100644\n--- a/src/Functions/parseDateTime.cpp\n+++ b/src/Functions/parseDateTime.cpp\n@@ -29,6 +29,7 @@ namespace Setting\n {\n     extern const SettingsBool formatdatetime_parsedatetime_m_is_month_name;\n     extern const SettingsBool parsedatetime_parse_without_leading_zeros;\n+    extern const SettingsBool parsedatetime_e_requires_space_padding;\n }\n \n namespace ErrorCodes\n@@ -642,6 +643,7 @@ namespace\n     public:\n         const bool mysql_M_is_month_name;\n         const bool mysql_parse_ckl_without_leading_zeros;\n+        const bool mysql_e_requires_space_padding;\n \n         static constexpr auto name = Name::name;\n         static FunctionPtr create(ContextPtr context) { return std::make_shared<FunctionParseDateTimeImpl>(context); }\n@@ -649,6 +651,7 @@ namespace\n         explicit FunctionParseDateTimeImpl(ContextPtr context)\n             : mysql_M_is_month_name(context->getSettingsRef()[Setting::formatdatetime_parsedatetime_m_is_month_name])\n             , mysql_parse_ckl_without_leading_zeros(context->getSettingsRef()[Setting::parsedatetime_parse_without_leading_zeros])\n+            , mysql_e_requires_space_padding(context->getSettingsRef()[Setting::parsedatetime_e_requires_space_padding])\n         {\n         }\n \n@@ -1160,9 +1163,9 @@ namespace\n             }\n \n             [[nodiscard]]\n-            static PosOrError mysqlDayOfMonthSpacePadded(Pos cur, Pos end, const String & fragment, ParsedValue<error_handling, return_type> & parsed_value)\n+            static PosOrError mysqlDayOfMonthMandatorySpacePadding(Pos cur, Pos end, const String & fragment, ParsedValue<error_handling, return_type> & parsed_value)\n             {\n-                RETURN_ERROR_IF_FAILED(checkSpace(cur, end, 2, \"mysqlDayOfMonthSpacePadded requires size >= 2\", fragment))\n+                RETURN_ERROR_IF_FAILED(checkSpace(cur, end, 2, \"mysqlDayOfMonthMandatorySpacePadding requires size >= 2\", fragment))\n \n                 Int32 day_of_month = *cur == ' ' ? 0 : (*cur - '0');\n                 ++cur;\n@@ -1174,6 +1177,21 @@ namespace\n                 return cur;\n             }\n \n+            [[nodiscard]]\n+            static PosOrError mysqlDayOfMonthOptionalSpacePadding(Pos cur, Pos end, const String & fragment, ParsedValue<error_handling, return_type> & parsed_value)\n+            {\n+                RETURN_ERROR_IF_FAILED(checkSpace(cur, end, 1, \"mysqlDayOfMonthOptionalSpacePadding requires size >= 1\", fragment))\n+\n+                while (cur < end && *cur == ' ')\n+                    ++cur;\n+\n+                Int32 day_of_month = 0;\n+                ASSIGN_RESULT_OR_RETURN_ERROR(cur, readNumberWithVariableLength(cur, end, false, false, false, 1, 2, fragment, day_of_month))\n+\n+                RETURN_ERROR_IF_FAILED(parsed_value.setDayOfMonth(day_of_month))\n+                return cur;\n+            }\n+\n             [[nodiscard]]\n             static PosOrError mysqlISO8601Date(Pos cur, Pos end, const String & fragment, ParsedValue<error_handling, return_type> & parsed_value)\n             {\n@@ -1951,9 +1969,12 @@ namespace\n                             instructions.emplace_back(ACTION_ARGS(Instruction::mysqlAmericanDate));\n                             break;\n \n-                        // Day of month, space-padded ( 1-31)  23\n+                        // Day of month\n                         case 'e':\n-                            instructions.emplace_back(ACTION_ARGS(Instruction::mysqlDayOfMonthSpacePadded));\n+                            if (mysql_e_requires_space_padding)\n+                                instructions.emplace_back(ACTION_ARGS(Instruction::mysqlDayOfMonthMandatorySpacePadding)); /// ' 1' - '31'\n+                            else\n+                                instructions.emplace_back(ACTION_ARGS(Instruction::mysqlDayOfMonthOptionalSpacePadding));  /// '1' (or ' 1') - '31'\n                             break;\n \n                         // Fractional seconds\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00718_format_datetime.reference b/tests/queries/0_stateless/00718_format_datetime.reference\nindex 43c630ac83b9..10a658ec8d9d 100644\n--- a/tests/queries/0_stateless/00718_format_datetime.reference\n+++ b/tests/queries/0_stateless/00718_format_datetime.reference\n@@ -4,7 +4,7 @@ Jan\tJan\n 20\t20\n 02\t02\n 01/02/18\t01/02/18\n- 2\t 2\n+2\t2\n 000000\t000000\n 2018-01-02\t2018-01-02\n 10\t12\ndiff --git a/tests/queries/0_stateless/01411_from_unixtime.reference b/tests/queries/0_stateless/01411_from_unixtime.reference\nindex f5b3be44e00a..44f002b127d5 100644\n--- a/tests/queries/0_stateless/01411_from_unixtime.reference\n+++ b/tests/queries/0_stateless/01411_from_unixtime.reference\n@@ -11,7 +11,7 @@ Jan\tJan\n 20\t20\n 02\t02\n 01/02/18\t01/02/18\n- 2\t 2\n+2\t2\n 2018-01-02\t2018-01-02\n 10\t12\n 22\t00\ndiff --git a/tests/queries/0_stateless/02564_date_format.reference b/tests/queries/0_stateless/02564_date_format.reference\nindex 38c0d39340b7..d40d6165c451 100644\n--- a/tests/queries/0_stateless/02564_date_format.reference\n+++ b/tests/queries/0_stateless/02564_date_format.reference\n@@ -4,7 +4,7 @@ Jan\tJan\n 20\t20\n 02\t02\n 01/02/18\t01/02/18\n- 2\t 2\n+2\t2\n 2018-01-02\t2018-01-02\n 10\t12\n 22\t00\ndiff --git a/tests/queries/0_stateless/02668_parse_datetime.reference b/tests/queries/0_stateless/02668_parse_datetime.reference\nindex 519e62e42fbc..4e4dc34f6667 100644\n--- a/tests/queries/0_stateless/02668_parse_datetime.reference\n+++ b/tests/queries/0_stateless/02668_parse_datetime.reference\n@@ -275,6 +275,19 @@ set session_timezone = 'UTC'; -- don't randomize the session timezone\n select parseDateTime('2021-01-04 23:12:34') = toDateTime('2021-01-04 23:12:34');\n 1\n select parseDateTime(''); -- { serverError NOT_ENOUGH_SPACE }\n+-- Test setting 'parsedatetime_e_requires_space_padding'\n+--     In the default behavior, leading spaces for %e are optional\n+select parseDateTime('  1/12/2024', '%e/%m/%Y') settings parsedatetime_e_requires_space_padding = 0;\n+2024-12-01 00:00:00\n+select parseDateTime(' 1/12/2024', '%e/%m/%Y') settings parsedatetime_e_requires_space_padding = 0;\n+2024-12-01 00:00:00\n+select parseDateTime('1/12/2024', '%e/%m/%Y') settings parsedatetime_e_requires_space_padding = 0;\n+2024-12-01 00:00:00\n+--     If we enable the legacy behavior, leading spaces for %e are mandatory\n+select parseDateTime('  1/12/2024', '%e/%m/%Y') settings parsedatetime_e_requires_space_padding = 1; -- { serverError CANNOT_PARSE_DATETIME }\n+select parseDateTime(' 1/12/2024', '%e/%m/%Y') settings parsedatetime_e_requires_space_padding = 1;\n+2024-12-01 00:00:00\n+select parseDateTime('1/12/2024', '%e/%m/%Y') settings parsedatetime_e_requires_space_padding = 1; -- { serverError CANNOT_PARSE_DATETIME }\n -- -------------------------------------------------------------------------------------------------------------------------\n -- Tests for parseDateTime64, these are not systematic\n \ndiff --git a/tests/queries/0_stateless/02668_parse_datetime.sql b/tests/queries/0_stateless/02668_parse_datetime.sql\nindex e04b0dc3feec..96443b1a8137 100644\n--- a/tests/queries/0_stateless/02668_parse_datetime.sql\n+++ b/tests/queries/0_stateless/02668_parse_datetime.sql\n@@ -192,6 +192,16 @@ set session_timezone = 'UTC'; -- don't randomize the session timezone\n select parseDateTime('2021-01-04 23:12:34') = toDateTime('2021-01-04 23:12:34');\n select parseDateTime(''); -- { serverError NOT_ENOUGH_SPACE }\n \n+-- Test setting 'parsedatetime_e_requires_space_padding'\n+--     In the default behavior, leading spaces for %e are optional\n+select parseDateTime('  1/12/2024', '%e/%m/%Y') settings parsedatetime_e_requires_space_padding = 0;\n+select parseDateTime(' 1/12/2024', '%e/%m/%Y') settings parsedatetime_e_requires_space_padding = 0;\n+select parseDateTime('1/12/2024', '%e/%m/%Y') settings parsedatetime_e_requires_space_padding = 0;\n+--     If we enable the legacy behavior, leading spaces for %e are mandatory\n+select parseDateTime('  1/12/2024', '%e/%m/%Y') settings parsedatetime_e_requires_space_padding = 1; -- { serverError CANNOT_PARSE_DATETIME }\n+select parseDateTime(' 1/12/2024', '%e/%m/%Y') settings parsedatetime_e_requires_space_padding = 1;\n+select parseDateTime('1/12/2024', '%e/%m/%Y') settings parsedatetime_e_requires_space_padding = 1; -- { serverError CANNOT_PARSE_DATETIME }\n+\n -- -------------------------------------------------------------------------------------------------------------------------\n -- Tests for parseDateTime64, these are not systematic\n \ndiff --git a/tests/queries/0_stateless/02783_parsedatetimebesteffort_syslog.sql b/tests/queries/0_stateless/02783_parsedatetimebesteffort_syslog.sql\nindex ecaec9f99bf1..94c4462d51f7 100644\n--- a/tests/queries/0_stateless/02783_parsedatetimebesteffort_syslog.sql\n+++ b/tests/queries/0_stateless/02783_parsedatetimebesteffort_syslog.sql\n@@ -1,4 +1,5 @@\n SET session_timezone = 'UTC';\n+SET formatdatetime_e_with_space_padding = 1;\n \n SELECT 'The reference time point is 2023-06-30 23:59:30';\n SELECT '\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500';\n@@ -7,7 +8,7 @@ SELECT '\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n \n WITH\n     toDateTime('2023-06-30 23:59:30') AS dt_ref,\n-    now() AS dt_now, \n+    now() AS dt_now,\n     date_sub(DAY, 1, dt_now) as dt_before,\n     dateDiff(SECOND, dt_ref, dt_now) AS time_shift,\n     formatDateTime(dt_before, '%b %e %T') AS syslog_before\n@@ -33,7 +34,7 @@ SELECT '\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n \n WITH\n     toDateTime('2023-06-30 23:59:30') AS dt_ref,\n-    now() AS dt_now, \n+    now() AS dt_now,\n     date_add(DAY, 1, dt_now) as dt_after,\n     dateDiff(SECOND, dt_ref, dt_now) AS time_shift,\n     formatDateTime(dt_after, '%b %e %T') AS syslog_after\ndiff --git a/tests/queries/0_stateless/03511_formatDateTime_e_space_padding.reference b/tests/queries/0_stateless/03511_formatDateTime_e_space_padding.reference\nnew file mode 100644\nindex 000000000000..97ee62917669\n--- /dev/null\n+++ b/tests/queries/0_stateless/03511_formatDateTime_e_space_padding.reference\n@@ -0,0 +1,3 @@\n+7/05/2024\t9\n+ 7/05/2024\t10\n+7/05/2024\t9\ndiff --git a/tests/queries/0_stateless/03511_formatDateTime_e_space_padding.sql b/tests/queries/0_stateless/03511_formatDateTime_e_space_padding.sql\nnew file mode 100644\nindex 000000000000..17fbf520d9a4\n--- /dev/null\n+++ b/tests/queries/0_stateless/03511_formatDateTime_e_space_padding.sql\n@@ -0,0 +1,3 @@\n+SELECT formatDateTime(toDate('2024-05-07'), '%e/%m/%Y') as _date, length(_date); -- default behavior\n+SELECT formatDateTime(toDate('2024-05-07'), '%e/%m/%Y') as _date, length(_date) settings formatdatetime_e_with_space_padding = 1;\n+SELECT formatDateTime(toDate('2024-05-07'), '%e/%m/%Y') as _date, length(_date) settings formatdatetime_e_with_space_padding = 0;\n",
  "problem_statement": "Bug with parseDateTime using mysql format %e for day of month\n### Company or project name\n\n_No response_\n\n### Describe the unexpected behaviour\n\nThe following queries will fail, and give different errors\n```sql\nSELECT parseDateTime('1/12/2024', '%e/%m/%Y')\n```\n```sql\nSELECT parseDateTime('6/12/2024', '%e/%m/%Y')\n```\n\nIt should return the datetime: `2024-12-01 00:00:00.000`\n\n### How to reproduce\n\nTested with:\n24.8.4.13\n24.12.1.18134\n23.10.5.20\n\nAll have these issues, both clickhouse-client and jdbc\n\n### Expected behavior\n\nIt should return the datetime: `2024-12-01 00:00:00.000` as in MySql\n\n### Error message and/or stacktrace\n\nFirst query returns:\n\n> DB::Exception: Unable to parse fragment LITERAL from 12/2024 because literal / is expected but 1 provided: While processing parseDateTime('1/12/2024', '%e/%m/%Y'). (CANNOT_PARSE_DATETIME)\n\nSecond query returns:\n\n> DB::Exception: Value 59 for day of month must be in the range [1, 31]: While processing parseDateTime('6/12/2024', '%e/%m/%Y'). (CANNOT_PARSE_DATETIME)\n\n### Additional context\n\n_No response_\n",
  "hints_text": "The [docs](https://clickhouse.com/docs/sql-reference/functions/date-time-functions#formatdatetime) say\n\n```\n%e\tday of the month, space-padded (1-31)\t  2\n```\n\nThe day components in\n\n```sql\nSELECT parseDateTime('1/12/2024', '%e/%m/%Y')\nSELECT parseDateTime('6/12/2024', '%e/%m/%Y')\n```\n\nare not space-padded and as a result, the functions behave funnily. You'd need `' 1/12/2024'` instead of `'1/12/2024'`.\n\nThe ClickHouse docs were slightly misleading, I fixed them [here](https://github.com/ClickHouse/ClickHouse/pull/78249).\n\nIt is also interesting that your examples work in MySQL's corresponding function ([here](https://onecompiler.com/mysql/43cv2p5ys)).\n\nHandling variable-length inputs is a little bit involved. If someone likes to fix this: Please implement it in a similar way as `mysqlMonthOfYearTextLong`.\n@rschu1ze The BestEffort version, handles this well !\n\nIf you can direct me on where to start, I can fix this\nThis code is wrong: https://github.com/ClickHouse/ClickHouse/blob/master/src/Functions/parseDateTime.cpp#L1162-L1175\n\nFunction [formatDateTime](https://clickhouse.com/docs/sql-reference/functions/date-time-functions#formatdatetime) is supposed to do the opposite of function parseDateTime. As a result, a similar change would need here: \n\nhttps://github.com/ClickHouse/ClickHouse/blob/master/src/Functions/formatDateTime.cpp#L308-L316",
  "created_at": "2025-05-10T21:23:21Z",
  "modified_files": [
    "docs/en/sql-reference/functions/date-time-functions.md",
    "src/Core/Settings.cpp",
    "src/Core/SettingsChangesHistory.cpp",
    "src/Functions/formatDateTime.cpp",
    "src/Functions/parseDateTime.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/00718_format_datetime.reference",
    "tests/queries/0_stateless/01411_from_unixtime.reference",
    "tests/queries/0_stateless/02564_date_format.reference",
    "tests/queries/0_stateless/02668_parse_datetime.reference",
    "tests/queries/0_stateless/02668_parse_datetime.sql",
    "tests/queries/0_stateless/02783_parsedatetimebesteffort_syslog.sql",
    "b/tests/queries/0_stateless/03511_formatDateTime_e_space_padding.reference",
    "b/tests/queries/0_stateless/03511_formatDateTime_e_space_padding.sql"
  ]
}