{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 58369,
  "instance_id": "ClickHouse__ClickHouse-58369",
  "issue_numbers": [
    "58368"
  ],
  "base_commit": "d86e59eb08bddba11e3d5e426d679497c59ba354",
  "patch": "diff --git a/docs/en/sql-reference/functions/ip-address-functions.md b/docs/en/sql-reference/functions/ip-address-functions.md\nindex 33c788a632ee..be20e02d77ec 100644\n--- a/docs/en/sql-reference/functions/ip-address-functions.md\n+++ b/docs/en/sql-reference/functions/ip-address-functions.md\n@@ -501,41 +501,3 @@ Result:\n \u2502                                                                  0 \u2502\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n ```\n-\n-## reverseDNSQuery\n-\n-Performs a reverse DNS query to get the PTR records associated with the IP address.\n-\n-**Syntax**\n-\n-``` sql\n-reverseDNSQuery(address)\n-```\n-\n-This function performs reverse DNS resolutions on both IPv4 and IPv6.\n-\n-**Arguments**\n-\n-- `address` \u2014 An IPv4 or IPv6 address. [String](../../sql-reference/data-types/string.md).\n-\n-**Returned value**\n-\n-- Associated domains (PTR records).\n-\n-Type: Type: [Array(String)](../../sql-reference/data-types/array.md).\n-\n-**Example**\n-\n-Query:\n-\n-``` sql\n-SELECT reverseDNSQuery('192.168.0.2');\n-```\n-\n-Result:\n-\n-``` text\n-\u250c\u2500reverseDNSQuery('192.168.0.2')\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n-\u2502 ['test2.example.com','test3.example.com'] \u2502\n-\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n-```\ndiff --git a/src/Functions/reverseDNSQuery.cpp b/src/Functions/reverseDNSQuery.cpp\ndeleted file mode 100644\nindex b4d963a6a15e..000000000000\n--- a/src/Functions/reverseDNSQuery.cpp\n+++ /dev/null\n@@ -1,118 +0,0 @@\n-#include <Columns/ColumnString.h>\n-#include <Columns/ColumnArray.h>\n-#include <Functions/FunctionFactory.h>\n-#include <Functions/IFunction.h>\n-#include <DataTypes/DataTypeString.h>\n-#include <DataTypes/DataTypeArray.h>\n-#include <Common/DNSResolver.h>\n-#include <Poco/Net/IPAddress.h>\n-#include <Interpreters/Context.h>\n-#include <Poco/Util/AbstractConfiguration.h>\n-\n-namespace DB\n-{\n-\n-namespace ErrorCodes\n-{\n-    extern const int NUMBER_OF_ARGUMENTS_DOESNT_MATCH;\n-    extern const int BAD_ARGUMENTS;\n-    extern const int FUNCTION_NOT_ALLOWED;\n-}\n-\n-class ReverseDNSQuery : public IFunction\n-{\n-public:\n-    static constexpr auto name = \"reverseDNSQuery\";\n-    static constexpr auto allow_function_config_name = \"allow_reverse_dns_query_function\";\n-\n-    static FunctionPtr create(ContextPtr)\n-    {\n-        return std::make_shared<ReverseDNSQuery>();\n-    }\n-\n-    String getName() const override\n-    {\n-        return name;\n-    }\n-\n-    ColumnPtr executeImpl(const ColumnsWithTypeAndName & arguments, const DataTypePtr & data_type, size_t input_rows_count) const override\n-    {\n-        if (!Context::getGlobalContextInstance()->getConfigRef().getBool(allow_function_config_name, false))\n-        {\n-            throw Exception(ErrorCodes::FUNCTION_NOT_ALLOWED, \"Function {} is not allowed because {} is not set\", name, allow_function_config_name);\n-        }\n-\n-        if (arguments.empty())\n-        {\n-            throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH, \"Function {} requires at least one argument\", name);\n-        }\n-\n-        auto res_type = getReturnTypeImpl({data_type});\n-\n-        if (input_rows_count == 0u)\n-        {\n-            return res_type->createColumnConstWithDefaultValue(input_rows_count);\n-        }\n-\n-        if (!isString(arguments[0].type))\n-        {\n-            throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Function {} requires the input column to be of type String\", name);\n-        }\n-\n-        auto input_column = arguments[0].column;\n-\n-        auto ip_address = Poco::Net::IPAddress(input_column->getDataAt(0).toString());\n-\n-        auto ptr_records = DNSResolver::instance().reverseResolve(ip_address);\n-\n-        if (ptr_records.empty())\n-            return res_type->createColumnConstWithDefaultValue(input_rows_count);\n-\n-        Array res;\n-\n-        for (const auto & ptr_record : ptr_records)\n-        {\n-            res.push_back(ptr_record);\n-        }\n-\n-        return res_type->createColumnConst(input_rows_count, res);\n-    }\n-\n-    bool isSuitableForShortCircuitArgumentsExecution(const DataTypesWithConstInfo & /*arguments*/) const override\n-    {\n-        return false;\n-    }\n-\n-    size_t getNumberOfArguments() const override\n-    {\n-        return 1u;\n-    }\n-\n-    DataTypePtr getReturnTypeImpl(const DataTypes & /*arguments*/) const override\n-    {\n-        return std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>());\n-    }\n-\n-};\n-\n-\n-REGISTER_FUNCTION(ReverseDNSQuery)\n-{\n-    factory.registerFunction<ReverseDNSQuery>(\n-            FunctionDocumentation{\n-                .description = R\"(Performs a reverse DNS query to get the PTR records associated with the IP address)\",\n-                .syntax = \"reverseDNSQuery(address)\",\n-                .arguments = {{\"address\", \"An IPv4 or IPv6 address. [String](../../sql-reference/data-types/string.md)\"}},\n-                .returned_value = \"Associated domains (PTR records). [String](../../sql-reference/data-types/string.md).\",\n-                .examples = {{\"\",\n-                              \"SELECT reverseDNSQuery('192.168.0.2');\",\n-R\"(\n-\u250c\u2500reverseDNSQuery('192.168.0.2')\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n-\u2502 ['test2.example.com','test3.example.com'] \u2502\n-\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n-)\"}}\n-            }\n-    );\n-}\n-\n-}\ndiff --git a/utils/check-style/aspell-ignore/en/aspell-dict.txt b/utils/check-style/aspell-ignore/en/aspell-dict.txt\nindex 66d5599de6ee..d68330771e5b 100644\n--- a/utils/check-style/aspell-ignore/en/aspell-dict.txt\n+++ b/utils/check-style/aspell-ignore/en/aspell-dict.txt\n@@ -2198,8 +2198,6 @@ retentions\n rethrow\n retransmit\n retriable\n-retuned\n-reverseDNSQuery\n reverseUTF\n rightPad\n rightPadUTF\n",
  "test_patch": "diff --git a/tests/config/config.d/reverse_dns_query_function.xml b/tests/config/config.d/reverse_dns_query_function.xml\ndeleted file mode 100644\nindex 8cd7695b4d33..000000000000\n--- a/tests/config/config.d/reverse_dns_query_function.xml\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-<clickhouse>\n-    <allow_reverse_dns_query_function>1</allow_reverse_dns_query_function>\n-</clickhouse>\n\\ No newline at end of file\ndiff --git a/tests/integration/test_reverse_dns_query/__init__.py b/tests/integration/test_reverse_dns_query/__init__.py\ndeleted file mode 100644\nindex e69de29bb2d1..000000000000\ndiff --git a/tests/integration/test_reverse_dns_query/configs/config.xml b/tests/integration/test_reverse_dns_query/configs/config.xml\ndeleted file mode 100644\nindex 5ce55afa2a7e..000000000000\n--- a/tests/integration/test_reverse_dns_query/configs/config.xml\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-<clickhouse>\n-    <disable_internal_dns_cache>1</disable_internal_dns_cache>\n-</clickhouse>\ndiff --git a/tests/integration/test_reverse_dns_query/configs/listen_host.xml b/tests/integration/test_reverse_dns_query/configs/listen_host.xml\ndeleted file mode 100644\nindex 9c27c612f63c..000000000000\n--- a/tests/integration/test_reverse_dns_query/configs/listen_host.xml\n+++ /dev/null\n@@ -1,5 +0,0 @@\n-<clickhouse>\n-    <listen_host>::</listen_host>\n-    <listen_host>0.0.0.0</listen_host>\n-    <listen_try>1</listen_try>\n-</clickhouse>\ndiff --git a/tests/integration/test_reverse_dns_query/configs/reverse_dns_function.xml b/tests/integration/test_reverse_dns_query/configs/reverse_dns_function.xml\ndeleted file mode 100644\nindex 35d0a07c6a6c..000000000000\n--- a/tests/integration/test_reverse_dns_query/configs/reverse_dns_function.xml\n+++ /dev/null\n@@ -1,3 +0,0 @@\n-<clickhouse>\n-    <allow_reverse_dns_query_function>1</allow_reverse_dns_query_function>\n-</clickhouse>\ndiff --git a/tests/integration/test_reverse_dns_query/coredns_config/Corefile b/tests/integration/test_reverse_dns_query/coredns_config/Corefile\ndeleted file mode 100644\nindex 3edf37dafa51..000000000000\n--- a/tests/integration/test_reverse_dns_query/coredns_config/Corefile\n+++ /dev/null\n@@ -1,8 +0,0 @@\n-. {\n-    hosts /example.com {\n-        reload \"20ms\"\n-        fallthrough\n-    }\n-    forward . 127.0.0.11\n-    log\n-}\ndiff --git a/tests/integration/test_reverse_dns_query/coredns_config/example.com b/tests/integration/test_reverse_dns_query/coredns_config/example.com\ndeleted file mode 100644\nindex 6c6e4cbee2ee..000000000000\n--- a/tests/integration/test_reverse_dns_query/coredns_config/example.com\n+++ /dev/null\n@@ -1,1 +0,0 @@\n-filled in runtime, but needs to exist in order to be volume mapped in docker\ndiff --git a/tests/integration/test_reverse_dns_query/test.py b/tests/integration/test_reverse_dns_query/test.py\ndeleted file mode 100644\nindex 00c3956f74f8..000000000000\n--- a/tests/integration/test_reverse_dns_query/test.py\n+++ /dev/null\n@@ -1,74 +0,0 @@\n-import pytest\n-import socket\n-from helpers.cluster import ClickHouseCluster, get_docker_compose_path, run_and_check\n-from time import sleep\n-import os\n-\n-DOCKER_COMPOSE_PATH = get_docker_compose_path()\n-SCRIPT_DIR = os.path.dirname(os.path.realpath(__file__))\n-\n-cluster = ClickHouseCluster(__file__)\n-\n-ch_server = cluster.add_instance(\n-    \"clickhouse-server\",\n-    with_coredns=True,\n-    main_configs=[\n-        \"configs/config.xml\",\n-        \"configs/reverse_dns_function.xml\",\n-        \"configs/listen_host.xml\",\n-    ],\n-)\n-\n-\n-@pytest.fixture(scope=\"module\")\n-def started_cluster():\n-    global cluster\n-    try:\n-        cluster.start()\n-        yield cluster\n-\n-    finally:\n-        cluster.shutdown()\n-\n-\n-def check_ptr_record(ip, hostname):\n-    try:\n-        host, aliaslist, ipaddrlist = socket.gethostbyaddr(ip)\n-        if hostname.lower() == host.lower():\n-            return True\n-    except socket.herror:\n-        pass\n-    return False\n-\n-\n-def setup_dns_server(ip):\n-    domains_string = \"test.example.com\"\n-    example_file_path = f'{ch_server.env_variables[\"COREDNS_CONFIG_DIR\"]}/example.com'\n-    run_and_check(f\"echo '{ip} {domains_string}' > {example_file_path}\", shell=True)\n-\n-    # DNS server takes time to reload the configuration.\n-    for try_num in range(10):\n-        if all(check_ptr_record(ip, host) for host in domains_string.split()):\n-            break\n-        sleep(1)\n-\n-\n-def setup_ch_server(dns_server_ip):\n-    ch_server.exec_in_container(\n-        ([\"bash\", \"-c\", f\"echo 'nameserver {dns_server_ip}' > /etc/resolv.conf\"])\n-    )\n-    ch_server.exec_in_container(\n-        ([\"bash\", \"-c\", \"echo 'options ndots:0' >> /etc/resolv.conf\"])\n-    )\n-    ch_server.query(\"SYSTEM DROP DNS CACHE\")\n-\n-\n-def test_reverse_dns_query(started_cluster):\n-    dns_server_ip = cluster.get_instance_ip(cluster.coredns_host)\n-    random_ipv6 = \"4ae8:fa0f:ee1d:68c5:0b76:1b79:7ae6:1549\"  # https://commentpicker.com/ip-address-generator.php\n-    setup_dns_server(random_ipv6)\n-    setup_ch_server(dns_server_ip)\n-\n-    for _ in range(0, 200):\n-        response = ch_server.query(f\"select reverseDNSQuery('{random_ipv6}')\")\n-        assert response == \"['test.example.com']\\n\"\ndiff --git a/tests/queries/0_stateless/02483_test_reverse_dns_resolution.reference b/tests/queries/0_stateless/02483_test_reverse_dns_resolution.reference\ndeleted file mode 100644\nindex 2bae467069f8..000000000000\n--- a/tests/queries/0_stateless/02483_test_reverse_dns_resolution.reference\n+++ /dev/null\n@@ -1,14 +0,0 @@\n--- { echoOn }\n--- Expect dns.google on both queries\n-select reverseDNSQuery('8.8.8.8');\n-['dns.google']\n-select reverseDNSQuery('2001:4860:4860::8888');\n-['dns.google']\n--- Expect empty response\n-select reverseDNSQuery('');\n-[]\n--- Expect error, invalid column type\n-select reverseDNSQuery(1); -- {serverError 36}\n--- Expect error, wrong number of arguments\n-select reverseDNSQuery(); -- {serverError 42}\n-select reverseDNSQuery(1, 2); -- {serverError 42}\ndiff --git a/tests/queries/0_stateless/02483_test_reverse_dns_resolution.sql b/tests/queries/0_stateless/02483_test_reverse_dns_resolution.sql\ndeleted file mode 100644\nindex d9576c0641a9..000000000000\n--- a/tests/queries/0_stateless/02483_test_reverse_dns_resolution.sql\n+++ /dev/null\n@@ -1,14 +0,0 @@\n--- { echoOn }\n--- Expect dns.google on both queries\n-select reverseDNSQuery('8.8.8.8');\n-select reverseDNSQuery('2001:4860:4860::8888');\n-\n--- Expect empty response\n-select reverseDNSQuery('');\n-\n--- Expect error, invalid column type\n-select reverseDNSQuery(1); -- {serverError 36}\n-\n--- Expect error, wrong number of arguments\n-select reverseDNSQuery(); -- {serverError 42}\n-select reverseDNSQuery(1, 2); -- {serverError 42}\n",
  "problem_statement": "The function `reverseDNSQuery` is garbage, remove it.\n1. The test has failed, because it depends on the environment. Read https://dubroy.com/blog/cold-blooded-software/\r\nhttps://s3.amazonaws.com/clickhouse-test-reports/0/ebd95586d223c28b87e257b71909e0970e47abd3/stateless_tests__msan__[1_6].html\r\n\r\n2. The function works incorrectly because it uses only the first row in a block:\r\n```\r\nmilovidov-desktop :) SELECT reverseDNSQuery(arrayJoin(['1.0.0.1', '1.1.1.1']))\r\n\r\nSELECT reverseDNSQuery(arrayJoin(['1.0.0.1', '1.1.1.1']))\r\n\r\nQuery id: f0a6b518-1ee3-465b-9b3a-cf0adb4a9e2c\r\n\r\n\u250c\u2500reverseDNSQuery(arrayJoin(['1.0.0.1', '1.1.1.1']))\u2500\u2510\r\n\u2502 ['one.one.one.one']                                \u2502\r\n\u2502 ['one.one.one.one']                                \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n2 rows in set. Elapsed: 0.015 sec. \r\n\r\nmilovidov-desktop :) SELECT reverseDNSQuery(arrayJoin(['1.0.0.1', '0.0.0.0']))\r\n\r\nSELECT reverseDNSQuery(arrayJoin(['1.0.0.1', '0.0.0.0']))\r\n\r\nQuery id: 51b35005-4820-4019-b58e-468fd8ab6b7b\r\n\r\n\u250c\u2500reverseDNSQuery(arrayJoin(['1.0.0.1', '0.0.0.0']))\u2500\u2510\r\n\u2502 ['one.one.one.one']                                \u2502\r\n\u2502 ['one.one.one.one']                                \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n2 rows in set. Elapsed: 0.001 sec.\r\n```\r\n\r\n3. The function requires enabling it in the configuration file, but I doubt anyone will go that far.\r\n\r\n4. It does not support the IPv4 or IPv6 data types, but it is natural to expect:\r\n```\r\nmilovidov-desktop :) SELECT reverseDNSQuery(arrayJoin(['0.0.0.0'::IPv4, '1.1.1.1'::IPv4]))\r\n\r\nSELECT reverseDNSQuery(arrayJoin([CAST('0.0.0.0', 'IPv4'), CAST('1.1.1.1', 'IPv4')]))\r\n\r\nQuery id: 92458732-843d-4876-addb-3ba43f680f8e\r\n\r\n\r\nElapsed: 0.016 sec. \r\n\r\nReceived exception from server (version 23.13.1):\r\nCode: 36. DB::Exception: Received from localhost:9000. DB::Exception: Function reverseDNSQuery requires the input column to be of type String: while executing 'FUNCTION reverseDNSQuery(arrayJoin(array(CAST('0.0.0.0', 'IPv4'), CAST('1.1.1.1', 'IPv4'))) :: 1) -> reverseDNSQuery(arrayJoin(array(CAST('0.0.0.0', 'IPv4'), CAST('1.1.1.1', 'IPv4')))) Array(String) : 0'. (BAD_ARGUMENTS)\r\n```\r\n\r\n5. It is difficult to use without reading the docs:\r\n```\r\nmilovidov-desktop :) SELECT reverseDNSQuery(arrayJoin(['0.0.0.0', '1.1.1.1']))\r\n\r\nSELECT reverseDNSQuery(arrayJoin(['0.0.0.0', '1.1.1.1']))\r\n\r\nQuery id: f7425fd9-ac7b-447f-a7dc-bc4eae6a7e4c\r\n\r\n\r\nElapsed: 0.015 sec. \r\n\r\nReceived exception:\r\nCode: 446. DB::Exception: Function reverseDNSQuery is not allowed because allow_reverse_dns_query_function is not set. (FUNCTION_NOT_ALLOWED)\r\n\r\nmilovidov-desktop :) SET allow_reverse_dns_query_function = 1\r\n\r\nSET allow_reverse_dns_query_function = 1\r\n\r\nQuery id: 8b4901b8-db44-4d45-9164-ad9710f1dae2\r\n\r\n\r\nElapsed: 0.019 sec. \r\n\r\nReceived exception:\r\nCode: 115. DB::Exception: Unknown setting allow_reverse_dns_query_function. (UNKNOWN_SETTING)\r\n```\r\n\r\n6. Finally, there is no motivation to have it as an embedded function rather than UDF.\r\n\r\nWe overlooked it during the code review. We apologize for that. https://github.com/ClickHouse/ClickHouse/pull/45629\n",
  "hints_text": "",
  "created_at": "2023-12-30T13:53:40Z"
}