{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 11831,
  "instance_id": "ClickHouse__ClickHouse-11831",
  "issue_numbers": [
    "10202"
  ],
  "base_commit": "bcf086e5929a22d84f040c456ec5c6c97dbb1dff",
  "patch": "diff --git a/src/Common/intExp.h b/src/Common/intExp.h\nindex 0212eb4c084d..a021d9660ffd 100644\n--- a/src/Common/intExp.h\n+++ b/src/Common/intExp.h\n@@ -134,3 +134,14 @@ inline __int128 exp10_i128(int x)\n }\n \n }\n+\n+\n+/// intExp10 returning the type T.\n+template <typename T>\n+inline T intExp10OfSize(int x)\n+{\n+    if constexpr (sizeof(T) <= 8)\n+        return intExp10(x);\n+    else\n+        return common::exp10_i128(x);\n+}\ndiff --git a/src/Functions/intExp10.cpp b/src/Functions/intExp10.cpp\nindex 112e21a51b4e..3192c9e2f795 100644\n--- a/src/Functions/intExp10.cpp\n+++ b/src/Functions/intExp10.cpp\n@@ -31,8 +31,13 @@ template <> struct FunctionUnaryArithmeticMonotonicity<NameIntExp10>\n     static bool has() { return true; }\n     static IFunction::Monotonicity get(const Field & left, const Field & right)\n     {\n-        Float64 left_float = left.isNull() ? -std::numeric_limits<Float64>::infinity() : applyVisitor(FieldVisitorConvertToNumber<Float64>(), left);\n-        Float64 right_float = right.isNull() ? std::numeric_limits<Float64>::infinity() : applyVisitor(FieldVisitorConvertToNumber<Float64>(), right);\n+        Float64 left_float = left.isNull()\n+            ? -std::numeric_limits<Float64>::infinity()\n+            : applyVisitor(FieldVisitorConvertToNumber<Float64>(), left);\n+\n+        Float64 right_float = right.isNull()\n+            ? std::numeric_limits<Float64>::infinity()\n+            : applyVisitor(FieldVisitorConvertToNumber<Float64>(), right);\n \n         if (left_float < 0 || right_float > 19)\n             return {};\ndiff --git a/src/IO/readDecimalText.h b/src/IO/readDecimalText.h\nindex 5a6a63529e21..44405357a107 100644\n--- a/src/IO/readDecimalText.h\n+++ b/src/IO/readDecimalText.h\n@@ -1,4 +1,7 @@\n+#pragma once\n+\n #include <IO/ReadHelpers.h>\n+#include <Common/intExp.h>\n \n \n namespace DB\n@@ -80,21 +83,33 @@ inline bool readDigits(ReadBuffer & buf, T & x, uint32_t & digits, int32_t & exp\n                 ++places; // num zeroes before + current digit\n                 if (digits + places > max_digits)\n                 {\n-                    if constexpr (_throw_on_error)\n-                        throw Exception(\"Too many digits (\" + std::to_string(digits + places) + \" > \" + std::to_string(max_digits)\n-                            + \") in decimal value\", ErrorCodes::ARGUMENT_OUT_OF_BOUND);\n-                    return false;\n+                    if (after_point)\n+                    {\n+                        /// Simply cut excessive digits.\n+                        break;\n+                    }\n+                    else\n+                    {\n+                        if constexpr (_throw_on_error)\n+                            throw Exception(\"Too many digits (\" + std::to_string(digits + places) + \" > \" + std::to_string(max_digits)\n+                                + \") in decimal value\", ErrorCodes::ARGUMENT_OUT_OF_BOUND);\n+\n+                        return false;\n+                    }\n                 }\n+                else\n+                {\n+                    digits += places;\n+                    if (after_point)\n+                        exponent -= places;\n \n-                digits += places;\n-                if (after_point)\n-                    exponent -= places;\n+                    // TODO: accurate shift10 for big integers\n+                    x *= intExp10OfSize<T>(places);\n+                    places = 0;\n \n-                // TODO: accurate shift10 for big integers\n-                for (; places; --places)\n-                    x *= 10;\n-                x += (byte - '0');\n-                break;\n+                    x += (byte - '0');\n+                    break;\n+                }\n             }\n             case 'e': [[fallthrough]];\n             case 'E':\n@@ -144,10 +159,14 @@ inline void readDecimalText(ReadBuffer & buf, T & x, uint32_t precision, uint32_\n             digits, x, exponent, scale, precision), ErrorCodes::ARGUMENT_OUT_OF_BOUND);\n \n     if (static_cast<int32_t>(scale) + exponent < 0)\n-        throw Exception(fmt::format(\n-            \"Decimal value has too large number of digits after point: {} digits were read: {}e{}.\"\n-            \" Expected to read decimal with scale {} and precision {}\",\n-            digits, x, exponent, scale, precision), ErrorCodes::ARGUMENT_OUT_OF_BOUND);\n+    {\n+        /// Too many digits after point. Just cut off excessive digits.\n+        auto divisor = intExp10OfSize<T>(-exponent - static_cast<int32_t>(scale));\n+        assert(divisor > 0);    /// This is for Clang Static Analyzer. It is not smart enough to infer it automatically.\n+        x.value /= divisor;\n+        scale = 0;\n+        return;\n+    }\n \n     scale += exponent;\n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00700_decimal_bounds.reference b/tests/queries/0_stateless/00700_decimal_bounds.reference\nindex e589b6c1dfa3..3f25fccc9426 100644\n--- a/tests/queries/0_stateless/00700_decimal_bounds.reference\n+++ b/tests/queries/0_stateless/00700_decimal_bounds.reference\n@@ -11,6 +11,26 @@\n 0\t0\t0\t0.000000000\t0.000000000000000000\t0.00000000000000000000000000000000000000\t0.00000\t0.000000000\t0.000000000000000000\t0\n 0\t0\t0\t0.000000000\t0.000000000000000000\t0.00000000000000000000000000000000000000\t0.00000\t0.000000000\t0.000000000000000000\t0\n 0\t0\t0\t0.000000000\t0.000000000000000000\t0.00000000000000000000000000000000000000\t0.00000\t0.000000000\t0.000000000000000000\t0\n+0\t0\t0\t0.000000000\t0.000000000000000000\t0.00000000000000000000000000000000000000\t0.00000\t0.000000000\t0.000000000000000000\t0\n+0\t0\t0\t0.000000000\t0.000000000000000000\t0.00000000000000000000000000000000000000\t0.00000\t0.000000000\t0.000000000000000000\t0\n+0\t0\t0\t0.000000000\t0.000000000000000000\t0.00000000000000000000000000000000000000\t0.00000\t0.000000000\t0.000000000000000000\t0\n+0\t0\t0\t0.000000000\t0.000000000000000000\t0.00000000000000000000000000000000000000\t0.00000\t0.000000000\t0.000000000000000000\t0\n+0\t0\t0\t0.000000000\t0.000000000000000000\t0.00000000000000000000000000000000000000\t0.00000\t0.000000000\t0.000000000000000000\t0\n+0\t0\t0\t0.000000000\t0.000000000000000000\t0.00000000000000000000000000000000000000\t0.00000\t0.000000000\t0.000000000000000000\t0\n+0\t0\t0\t0.000000000\t0.000000000000000000\t0.00000000000000000000000000000000000000\t0.00000\t0.000000000\t0.000000000000000000\t0\n+0\t0\t0\t0.000000000\t0.000000000000000000\t0.00000000000000000000000000000000000000\t0.00000\t0.000000000\t0.000000000000000000\t0\n+0\t0\t0\t0.000000000\t0.000000000000000000\t0.00000000000000000000000000000000000000\t0.00000\t0.000000000\t0.000000000000000000\t0\n+0\t0\t0\t0.000000000\t0.000000000000000000\t0.00000000000000000000000000000000000000\t0.00000\t0.000000000\t0.000000000000000000\t0\n+0\t0\t0\t0.000000000\t0.000000000000000000\t0.00000000000000000000000000000000000000\t0.00000\t0.000000000\t0.000000000000000000\t0\n+0\t0\t0\t0.000000000\t0.000000000000000000\t0.00000000000000000000000000000000000000\t0.00000\t0.000000000\t0.000000000000000000\t0\n+0\t0\t0\t0.000000000\t0.000000000000000000\t0.00000000000000000000000000000000000000\t0.00000\t0.000000000\t0.000000000000000000\t0\n+0\t0\t0\t0.000000000\t0.000000000000000000\t0.00000000000000000000000000000000000000\t0.00000\t0.000000000\t0.000000000000000000\t0\n+0\t0\t0\t0.000000000\t0.000000000000000000\t0.00000000000000000000000000000000000000\t0.00000\t0.000000000\t0.000000000000000000\t0\n+0\t0\t0\t0.000000000\t0.000000000000000000\t0.00000000000000000000000000000000000000\t0.00000\t0.000000000\t0.000000000000000000\t0\n+0\t0\t0\t0.000000000\t0.000000000000000000\t0.00000000000000000000000000000000000000\t0.00000\t0.000000000\t0.000000000000000000\t0\n+0\t0\t0\t0.000000000\t0.000000000000000000\t0.00000000000000000000000000000000000000\t0.00000\t0.000000000\t0.000000000000000000\t0\n+0\t0\t0\t0.000000000\t0.000000000000000000\t0.00000000000000000000000000000000000000\t0.00000\t0.000000000\t0.000000000000000000\t0\n+0\t0\t0\t0.000000000\t0.000000000000000000\t0.00000000000000000000000000000000000000\t0.00000\t0.000000000\t0.000000000000000000\t0\n 0\t0\t0\t0.000000000\t0.000000000000000000\t0.00000000000000000000000000000000000000\t0.00000\t0.000000000\t0.000000000000000001\t0\n 0\t0\t0\t0.000000000\t0.000000000000000000\t0.00000000000000000000000000000000000000\t0.00000\t0.000000000\t99999999999999999999.999999999999999999\t0\n 0\t0\t0\t0.000000000\t0.000000000000000000\t0.99999999999999999999999999999999999999\t0.00000\t0.000000000\t0.000000000000000000\t0\ndiff --git a/tests/queries/0_stateless/00700_decimal_bounds.sql b/tests/queries/0_stateless/00700_decimal_bounds.sql\nindex e8c185f7ee62..ddf096149abe 100644\n--- a/tests/queries/0_stateless/00700_decimal_bounds.sql\n+++ b/tests/queries/0_stateless/00700_decimal_bounds.sql\n@@ -39,26 +39,26 @@ INSERT INTO decimal (i) VALUES (-100000000000000000000); -- { clientError 69 }\n INSERT INTO decimal (j) VALUES (10); -- { clientError 69 }\n INSERT INTO decimal (j) VALUES (-10); -- { clientError 69 }\n \n-INSERT INTO decimal (a) VALUES (0.1); -- { clientError 69 }\n-INSERT INTO decimal (a) VALUES (-0.1); -- { clientError 69 }\n-INSERT INTO decimal (b) VALUES (0.1); -- { clientError 69 }\n-INSERT INTO decimal (b) VALUES (-0.1); -- { clientError 69 }\n-INSERT INTO decimal (c) VALUES (0.1); -- { clientError 69 }\n-INSERT INTO decimal (c) VALUES (-0.1); -- { clientError 69 }\n-INSERT INTO decimal (d) VALUES (0.0000000001); -- { clientError 69 }\n-INSERT INTO decimal (d) VALUES (-0.0000000001); -- { clientError 69 }\n-INSERT INTO decimal (e) VALUES (0.0000000000000000001); -- { clientError 69 }\n-INSERT INTO decimal (e) VALUES (-0.0000000000000000001); -- { clientError 69 }\n-INSERT INTO decimal (f) VALUES (0.000000000000000000000000000000000000001); -- { clientError 69 }\n-INSERT INTO decimal (f) VALUES (-0.000000000000000000000000000000000000001); -- { clientError 69 }\n-INSERT INTO decimal (g) VALUES (0.000001); -- { clientError 69 }\n-INSERT INTO decimal (g) VALUES (-0.000001); -- { clientError 69 }\n-INSERT INTO decimal (h) VALUES (0.0000000001); -- { clientError 69 }\n-INSERT INTO decimal (h) VALUES (-0.0000000001); -- { clientError 69 }\n-INSERT INTO decimal (i) VALUES (0.0000000000000000001); -- { clientError 69 }\n-INSERT INTO decimal (i) VALUES (-0.0000000000000000001); -- { clientError 69 }\n-INSERT INTO decimal (j) VALUES (0.1); -- { clientError 69 }\n-INSERT INTO decimal (j) VALUES (-0.1); -- { clientError 69 }\n+INSERT INTO decimal (a) VALUES (0.1);\n+INSERT INTO decimal (a) VALUES (-0.1);\n+INSERT INTO decimal (b) VALUES (0.1);\n+INSERT INTO decimal (b) VALUES (-0.1);\n+INSERT INTO decimal (c) VALUES (0.1);\n+INSERT INTO decimal (c) VALUES (-0.1);\n+INSERT INTO decimal (d) VALUES (0.0000000001);\n+INSERT INTO decimal (d) VALUES (-0.0000000001);\n+INSERT INTO decimal (e) VALUES (0.0000000000000000001);\n+INSERT INTO decimal (e) VALUES (-0.0000000000000000001);\n+INSERT INTO decimal (f) VALUES (0.000000000000000000000000000000000000001);\n+INSERT INTO decimal (f) VALUES (-0.000000000000000000000000000000000000001);\n+INSERT INTO decimal (g) VALUES (0.000001);\n+INSERT INTO decimal (g) VALUES (-0.000001);\n+INSERT INTO decimal (h) VALUES (0.0000000001);\n+INSERT INTO decimal (h) VALUES (-0.0000000001);\n+INSERT INTO decimal (i) VALUES (0.0000000000000000001);\n+INSERT INTO decimal (i) VALUES (-0.0000000000000000001);\n+INSERT INTO decimal (j) VALUES (0.1);\n+INSERT INTO decimal (j) VALUES (-0.1);\n \n INSERT INTO decimal (a, b, d, g) VALUES (999999999, 999999999999999999, 0.999999999, 9999.99999);\n INSERT INTO decimal (a, b, d, g) VALUES (-999999999, -999999999999999999, -0.999999999, -9999.99999);\n@@ -90,8 +90,8 @@ INSERT INTO decimal (a) VALUES ('0x1'); -- { clientError 6 }\n INSERT INTO decimal (a, b, c, d, e, f) VALUES ('0.9e9', '0.9e18', '0.9e38', '9e-9', '9e-18', '9e-38');\n INSERT INTO decimal (a, b, c, d, e, f) VALUES ('-0.9e9', '-0.9e18', '-0.9e38', '-9e-9', '-9e-18', '-9e-38');\n \n-INSERT INTO decimal (a, b, c, d, e, f) VALUES ('1e9', '1e18', '1e38', '1e-10', '1e-19', '1e-39');  -- { clientError 69 }\n-INSERT INTO decimal (a, b, c, d, e, f) VALUES ('-1e9', '-1e18', '-1e38', '-1e-10', '-1e-19', '-1e-39');  -- { clientError 69 }\n+INSERT INTO decimal (a, b, c, d, e, f) VALUES ('1e9', '1e18', '1e38', '1e-10', '1e-19', '1e-39'); -- { clientError 69 }\n+INSERT INTO decimal (a, b, c, d, e, f) VALUES ('-1e9', '-1e18', '-1e38', '-1e-10', '-1e-19', '-1e-39'); -- { clientError 69 }\n \n SELECT * FROM decimal ORDER BY a, b, c, d, e, f, g, h, i, j;\n DROP TABLE IF EXISTS decimal;\ndiff --git a/tests/queries/0_stateless/00700_decimal_casts.reference b/tests/queries/0_stateless/00700_decimal_casts.reference\nindex 0a4aba94bcc2..8832c2109f9a 100644\n--- a/tests/queries/0_stateless/00700_decimal_casts.reference\n+++ b/tests/queries/0_stateless/00700_decimal_casts.reference\n@@ -1,5 +1,30 @@\n 1.1\t1.10\t1.10000000\n+1\n 1\t1.1\t1.10\t1.10000000\n+0.1\t0\n+-0.1\t0\n+0.1\t0\n+-0.1\t0\n+0.1\t0\n+-0.1\t0\n+0.0000000001\t0.000000000\n+-0.0000000001\t0.000000000\n+0.0000000000000000001\t0.000000000000000000\n+-0.0000000000000000001\t0.000000000000000000\n+0.000000000000000000000000000000000000001\t0.00000000000000000000000000000000000000\n+-0.000000000000000000000000000000000000001\t0.00000000000000000000000000000000000000\n+1e-1\t0\n+-1e-1\t0\n+1e-1\t0\n+-1e-1\t0\n+1e-1\t0\n+-1e-1\t0\n+1e-10\t0.000000000\n+-1e-10\t0.000000000\n+1e-19\t0.000000000000000000\n+-1e-19\t0.000000000000000000\n+1e-39\t0.00000000000000000000000000000000000000\n+-1e-39\t0.00000000000000000000000000000000000000\n 9999999\t9999999\t-9999999\t9999999\t-9999999\n 999999.9\t999999.9\t-999999.9\t999999.9\t-999999.9\n 99999.99\t99999.99\t-99999.99\t99999.99\t-99999.99\n@@ -129,6 +154,9 @@\n 12345678901234567890123456789012345678\n 0.123456789\t0.123456789123456789\n 0.12345678901234567890123456789012345678\n+0.12345678\n+0.12345678912345678\n+0.1234567890123456789012345678901234567\n 1234567890.0000000000000000000000000000\t1234567890.00000000000000000000000000000\t1234567890.00000000000000000000000000000\n 1234567890.00000000\t1234567890.000000000\t1234567890.000000000\n 12345678.0\t12345678.00\t12345678.00\ndiff --git a/tests/queries/0_stateless/00700_decimal_casts.sql b/tests/queries/0_stateless/00700_decimal_casts.sql\nindex 4f761bd723ad..602ee02bc07b 100644\n--- a/tests/queries/0_stateless/00700_decimal_casts.sql\n+++ b/tests/queries/0_stateless/00700_decimal_casts.sql\n@@ -1,5 +1,5 @@\n SELECT toDecimal32('1.1', 1), toDecimal32('1.1', 2), toDecimal32('1.1', 8);\n-SELECT toDecimal32('1.1', 0); -- { serverError 69 }\n+SELECT toDecimal32('1.1', 0);\n SELECT toDecimal32(1.1, 0), toDecimal32(1.1, 1), toDecimal32(1.1, 2), toDecimal32(1.1, 8);\n \n SELECT '1000000000' AS x, toDecimal32(x, 0); -- { serverError 69 }\n@@ -15,18 +15,18 @@ SELECT '-1' AS x, toDecimal64(x, 18); -- { serverError 69 }\n SELECT '1' AS x, toDecimal128(x, 38); -- { serverError 69 }\n SELECT '-1' AS x, toDecimal128(x, 38); -- { serverError 69 }\n \n-SELECT '0.1' AS x, toDecimal32(x, 0); -- { serverError 69 }\n-SELECT '-0.1' AS x, toDecimal32(x, 0); -- { serverError 69 }\n-SELECT '0.1' AS x, toDecimal64(x, 0); -- { serverError 69 }\n-SELECT '-0.1' AS x, toDecimal64(x, 0); -- { serverError 69 }\n-SELECT '0.1' AS x, toDecimal128(x, 0); -- { serverError 69 }\n-SELECT '-0.1' AS x, toDecimal128(x, 0); -- { serverError 69 }\n-SELECT '0.0000000001' AS x, toDecimal32(x, 9); -- { serverError 69 }\n-SELECT '-0.0000000001' AS x, toDecimal32(x, 9); -- { serverError 69 }\n-SELECT '0.0000000000000000001' AS x, toDecimal64(x, 18); -- { serverError 69 }\n-SELECT '-0.0000000000000000001' AS x, toDecimal64(x, 18); -- { serverError 69 }\n-SELECT '0.000000000000000000000000000000000000001' AS x, toDecimal128(x, 38); -- { serverError 69 }\n-SELECT '-0.000000000000000000000000000000000000001' AS x, toDecimal128(x, 38); -- { serverError 69 }\n+SELECT '0.1' AS x, toDecimal32(x, 0);\n+SELECT '-0.1' AS x, toDecimal32(x, 0);\n+SELECT '0.1' AS x, toDecimal64(x, 0);\n+SELECT '-0.1' AS x, toDecimal64(x, 0);\n+SELECT '0.1' AS x, toDecimal128(x, 0);\n+SELECT '-0.1' AS x, toDecimal128(x, 0);\n+SELECT '0.0000000001' AS x, toDecimal32(x, 9);\n+SELECT '-0.0000000001' AS x, toDecimal32(x, 9);\n+SELECT '0.0000000000000000001' AS x, toDecimal64(x, 18);\n+SELECT '-0.0000000000000000001' AS x, toDecimal64(x, 18);\n+SELECT '0.000000000000000000000000000000000000001' AS x, toDecimal128(x, 38);\n+SELECT '-0.000000000000000000000000000000000000001' AS x, toDecimal128(x, 38);\n \n SELECT '1e9' AS x, toDecimal32(x, 0); -- { serverError 69 }\n SELECT '-1E9' AS x, toDecimal32(x, 0); -- { serverError 69 }\n@@ -41,18 +41,18 @@ SELECT '-1e-0' AS x, toDecimal64(x, 18); -- { serverError 69 }\n SELECT '1e-0' AS x, toDecimal128(x, 38); -- { serverError 69 }\n SELECT '-1e0' AS x, toDecimal128(x, 38); -- { serverError 69 }\n \n-SELECT '1e-1' AS x, toDecimal32(x, 0); -- { serverError 69 }\n-SELECT '-1e-1' AS x, toDecimal32(x, 0); -- { serverError 69 }\n-SELECT '1e-1' AS x, toDecimal64(x, 0); -- { serverError 69 }\n-SELECT '-1e-1' AS x, toDecimal64(x, 0); -- { serverError 69 }\n-SELECT '1e-1' AS x, toDecimal128(x, 0); -- { serverError 69 }\n-SELECT '-1e-1' AS x, toDecimal128(x, 0); -- { serverError 69 }\n-SELECT '1e-10' AS x, toDecimal32(x, 9); -- { serverError 69 }\n-SELECT '-1e-10' AS x, toDecimal32(x, 9); -- { serverError 69 }\n-SELECT '1e-19' AS x, toDecimal64(x, 18); -- { serverError 69 }\n-SELECT '-1e-19' AS x, toDecimal64(x, 18); -- { serverError 69 }\n-SELECT '1e-39' AS x, toDecimal128(x, 38); -- { serverError 69 }\n-SELECT '-1e-39' AS x, toDecimal128(x, 38); -- { serverError 69 }\n+SELECT '1e-1' AS x, toDecimal32(x, 0);\n+SELECT '-1e-1' AS x, toDecimal32(x, 0);\n+SELECT '1e-1' AS x, toDecimal64(x, 0);\n+SELECT '-1e-1' AS x, toDecimal64(x, 0);\n+SELECT '1e-1' AS x, toDecimal128(x, 0);\n+SELECT '-1e-1' AS x, toDecimal128(x, 0);\n+SELECT '1e-10' AS x, toDecimal32(x, 9);\n+SELECT '-1e-10' AS x, toDecimal32(x, 9);\n+SELECT '1e-19' AS x, toDecimal64(x, 18);\n+SELECT '-1e-19' AS x, toDecimal64(x, 18);\n+SELECT '1e-39' AS x, toDecimal128(x, 38);\n+SELECT '-1e-39' AS x, toDecimal128(x, 38);\n \n SELECT toFloat32(9999999)   as x, toDecimal32(x, 0), toDecimal32(-x, 0), toDecimal64(x, 0), toDecimal64(-x, 0);\n SELECT toFloat32(999999.9)  as x, toDecimal32(x, 1), toDecimal32(-x, 1), toDecimal64(x, 1), toDecimal64(-x, 1);\n@@ -143,9 +143,9 @@ SELECT CAST('12345678901234567890123456789012345678', 'Decimal(38,1)'); -- { ser\n \n SELECT CAST('0.123456789', 'Decimal(9,9)'), CAST('0.123456789123456789', 'Decimal(18,18)');\n SELECT CAST('0.12345678901234567890123456789012345678', 'Decimal(38,38)');\n-SELECT CAST('0.123456789', 'Decimal(9,8)'); -- { serverError 69 }\n-SELECT CAST('0.123456789123456789', 'Decimal(18,17)'); -- { serverError 69 }\n-SELECT CAST('0.12345678901234567890123456789012345678', 'Decimal(38,37)'); -- { serverError 69 }\n+SELECT CAST('0.123456789', 'Decimal(9,8)');\n+SELECT CAST('0.123456789123456789', 'Decimal(18,17)');\n+SELECT CAST('0.12345678901234567890123456789012345678', 'Decimal(38,37)');\n \n SELECT toDecimal128('1234567890', 28) AS x, toDecimal128(x, 29), toDecimal128(toDecimal128('1234567890', 28), 29);\n SELECT toDecimal128(toDecimal128('1234567890', 28), 30); -- { serverError 407 }\ndiff --git a/tests/queries/0_stateless/01327_decimal_cut_extra_digits_after_point.reference b/tests/queries/0_stateless/01327_decimal_cut_extra_digits_after_point.reference\nnew file mode 100644\nindex 000000000000..6006f9981b4c\n--- /dev/null\n+++ b/tests/queries/0_stateless/01327_decimal_cut_extra_digits_after_point.reference\n@@ -0,0 +1,14 @@\n+1.10000\n+1.12345\n+1.12345\n+1.12345\n+1.12345\n+1.12345\n+12345.10000\n+123456789123.10000\n+1234567891234.10000\n+1234567891234.12345\n+1.12345\n+1.12345\n+1.12344\n+1.12345\ndiff --git a/tests/queries/0_stateless/01327_decimal_cut_extra_digits_after_point.sql b/tests/queries/0_stateless/01327_decimal_cut_extra_digits_after_point.sql\nnew file mode 100644\nindex 000000000000..4d456296d8fb\n--- /dev/null\n+++ b/tests/queries/0_stateless/01327_decimal_cut_extra_digits_after_point.sql\n@@ -0,0 +1,24 @@\n+SELECT CAST('1.1' AS Decimal(10, 5));\n+SELECT CAST('1.12345' AS Decimal(10, 5));\n+SELECT CAST('1.123451' AS Decimal(10, 5));\n+SELECT CAST('1.1234511111' AS Decimal(10, 5));\n+SELECT CAST('1.12345111111' AS Decimal(10, 5));\n+SELECT CAST('1.12345111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111' AS Decimal(10, 5));\n+SELECT CAST('12345.1' AS Decimal(10, 5));\n+\n+-- Actually our decimal can contain more than 10 digits for free.\n+SELECT CAST('123456789123.1' AS Decimal(10, 5));\n+SELECT CAST('1234567891234.1' AS Decimal(10, 5));\n+SELECT CAST('1234567891234.12345111' AS Decimal(10, 5));\n+-- But it's just Decimal64, so there is the limit.\n+SELECT CAST('12345678912345.1' AS Decimal(10, 5)); -- { serverError 69 }\n+\n+-- The rounding may work in unexpected way: this is just integer rounding.\n+-- We can improve it but here is the current behaviour:\n+SELECT CAST('1.123455' AS Decimal(10, 5));\n+SELECT CAST('1.123456' AS Decimal(10, 5));\n+SELECT CAST('1.123445' AS Decimal(10, 5)); -- Check if suddenly banker's rounding will be implemented.\n+\n+CREATE TEMPORARY TABLE test (x Decimal(10, 5));\n+INSERT INTO test VALUES (1.12345111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111);\n+SELECT * FROM test;\n",
  "problem_statement": "Code: 69. DB::Exception: Decimal value is too big\n**Describe the bug**\r\nI have a cloud Clickhouse instance that I want to have a local copy from. So I exported the metadata (and changed the ReplicatedMergeTree() to MergeTree(), plus I exteended the Decimals() because the metadata as-is was giving me errors \"Code: 69. DB::Exception: Too many digits (11 > 10) in decimal value\" for Decimal(10,7)) and data from MCS instance and I'm trying to insert it locally, into CH v19.11.5.28_6 running on FreeBSD.\r\n\r\nAt some point I have an error: Code: 69. DB::Exception: Decimal value is too big.\r\n\r\nWhen bisecting the dump I managed to find the troublesome line:\r\n\r\n    \"2020-01-08\",\"2020-01-08 04:19:14\",1986136,0,23.7283008,90.4046029,30.00,0.00,0.00,0.00,47,0,0,0,0,\"system\",\"gps\",\"STILL\",\"PASSIVE\",0,0,0,0,\"['PASSIVE']\",\"['gps']\",\"[23.7283008]\",\"[90.4046029]\",\"[-2147467.79]\",\"[]\",\"[]\",\"[]\",\"[]\",\"[]\",\"[]\",\"[]\",\"[]\",\"[11]\",11,0,\"-1\",\"[]\",\"[]\",1,100,\"{\"\"locale\"\":\"\"ru\"\",\"\"appVersion\"\":\"\"199882\"\",\"\"ts\"\":\"\"2020-01-08 01:19:14+03:00\"\",\"\"now\"\":\"\"2020-01-08 01:19:15\"\"}\",0\r\n\r\nand I really can't see in the line above the values that would exceed Decimal64(12).\r\n\r\nWould be also nice if clickhouse-client would print the troublesome like inself, that would save a huuuge amount of time.\r\n\r\nThe table metadata is as follows:\r\n\r\n````\r\nCREATE TABLE geo.history (\r\n    `dt` Date,\r\n    `ts` DateTime,\r\n    `user` UInt32,\r\n    `parent` UInt32,\r\n    `latitude` Decimal64(12),\r\n    `longitude` Decimal64(12),\r\n    `accuracy` Decimal64(12),\r\n    `speed` Decimal64(12),\r\n    `course` Decimal64(12),\r\n    `altitude` Decimal64(12),\r\n    `batteryLevel` Int32,\r\n    `steps` Int32,\r\n    `turnovers` Int32,\r\n    `isIgnored` UInt8,\r\n    `isOffline` UInt8,\r\n    `reason` String,\r\n    `source` String,\r\n    `activityType` String,\r\n    `provider` String,\r\n    `totalSatellitesCount` Int16,\r\n    `notUsedSatellitesCount` Int16,\r\n    `usedSatellitesCount` Int16,\r\n    `timeToFirstFix` Int32,\r\n    `locations.provider` Array(String),\r\n    `locations.source` Array(String),\r\n    `locations.latitude` Array(Decimal64(12)),\r\n    `locations.longitude` Array(Decimal64(12)),\r\n    `locations.accuracy` Array(Decimal64(12)),\r\n    `lbs.cellId` Array(Int32), `lbs.countryCode` Array(Int16),\r\n    `lbs.lac` Array(Int32), `lbs.level` Array(Int16),\r\n    `lbs.operatorId` Array(Int16),\r\n    `wifi.bssid` Array(String),\r\n    `wifi.level` Array(Int16),\r\n    `wifi.state` Array(Int8),\r\n    `locations.age` Array(UInt32),\r\n    `age` UInt32,\r\n    `isCharging` UInt8,\r\n    `failureReason` String,\r\n    `sensors.id` Array(Int16),\r\n    `sensors.value` Array(Int16),\r\n    `deviceOS` Int8,\r\n    `confidence` Int16,\r\n    `debug` String,\r\n    `threshold` UInt32 DEFAULT CAST(0, 'UInt32'))\r\n    ENGINE = MergeTree PARTITION BY dt ORDER BY (dt, user) SETTINGS index_granularity = 8192\r\n````\r\n\n",
  "hints_text": "Decimal64 has maximum 18 digits, because it's represented by Int64, and the maximum power of ten, represented within Int64 is 1000000000000000000, so the maximum decimal value with 12 digits after decimal point will be 999999.999999999999.\nAnd the value of `locations.accuracy`: -2147467.79 looks suspicious.\r\nIt looks like it indicated an error in your application as it looks like -2^31 / 1000 with some additional error.\nSo, it's not a bug.\r\nBut we have to improve diagnostics.",
  "created_at": "2020-06-20T14:44:43Z",
  "modified_files": [
    "src/Common/intExp.h",
    "src/Functions/intExp10.cpp",
    "src/IO/readDecimalText.h"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/00700_decimal_bounds.reference",
    "tests/queries/0_stateless/00700_decimal_bounds.sql",
    "tests/queries/0_stateless/00700_decimal_casts.reference",
    "tests/queries/0_stateless/00700_decimal_casts.sql",
    "b/tests/queries/0_stateless/01327_decimal_cut_extra_digits_after_point.reference",
    "b/tests/queries/0_stateless/01327_decimal_cut_extra_digits_after_point.sql"
  ]
}