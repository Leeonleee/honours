{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 79079,
  "instance_id": "ClickHouse__ClickHouse-79079",
  "issue_numbers": [
    "75057"
  ],
  "base_commit": "646e1b1de67cd9f0c506590d97ba9b4c91ab8b32",
  "patch": "diff --git a/src/Functions/array/arrayIntersect.cpp b/src/Functions/array/arrayIntersect.cpp\nindex 905ec73ccd74..9770e45720c4 100644\n--- a/src/Functions/array/arrayIntersect.cpp\n+++ b/src/Functions/array/arrayIntersect.cpp\n@@ -657,6 +657,12 @@ ColumnPtr FunctionArrayIntersect<Mode>::execute(const UnpackedArrays & arrays, M\n                 null_map.push_back(1);\n                 null_added = true;\n             }\n+            const auto & arg = arrays.args[0];\n+            // const array has only one row\n+            if (arg.is_const)\n+                prev_off[0] = 0;\n+            else\n+                prev_off[0] = (*arg.offsets)[row];\n         }\n         else if constexpr (std::is_same_v<Mode, ArrayModeSymmetricDifference>)\n         {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03224_arrayUnion.reference b/tests/queries/0_stateless/03224_arrayUnion.reference\nindex 9b871234d275..00593aefe945 100644\n--- a/tests/queries/0_stateless/03224_arrayUnion.reference\n+++ b/tests/queries/0_stateless/03224_arrayUnion.reference\n@@ -51,3 +51,13 @@\n 199999\n -------\n [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n+1\t['1']\t['1']\n+2\t['2']\t['2']\n+3\t['3']\t['3']\n+4\t['4']\t['4']\n+5\t['5']\t['5']\n+6\t['6']\t['6']\n+7\t['7']\t['7']\n+8\t['8']\t['8']\n+9\t['9']\t['9']\n+10\t['10']\t['10']\ndiff --git a/tests/queries/0_stateless/03224_arrayUnion.sql b/tests/queries/0_stateless/03224_arrayUnion.sql\nindex 14a9192f39a8..5fd09b146eab 100644\n--- a/tests/queries/0_stateless/03224_arrayUnion.sql\n+++ b/tests/queries/0_stateless/03224_arrayUnion.sql\n@@ -55,3 +55,33 @@ SELECT length(arrayUnion(range(1, 100000), range(9999, 200000)));\n select '-------';\n --bigger number of arguments\n SELECT arraySort(arrayUnion([1, 2], [1, 3], [1, 4], [1, 5], [1, 6], [1, 7], [1, 8], [1, 9], [1, 10], [1, 11], [1, 12], [1, 13], [1, 14], [1, 15], [1, 16], [1, 17], [1, 18], [1, 19]));\n+\n+-- Table with batch inserts\n+DROP TABLE IF EXISTS test_array_union;\n+CREATE TABLE test_array_union\n+(\n+    `id` Int8,\n+    `properties` Array(String),\n+)\n+ENGINE = MergeTree\n+ORDER BY id\n+SETTINGS index_granularity = 8192;\n+\n+INSERT INTO test_array_union\n+VALUES\n+(1, ['1']),\n+(2, ['2']),\n+(3, ['3']),\n+(4, ['4']),\n+(5, ['5']),\n+(6, ['6']),\n+(7, ['7']),\n+(8, ['8']),\n+(9, ['9']),\n+(10, ['10']);\n+\n+SELECT\n+\tta.id AS id,\n+    ta.properties AS properties,\n+\tarrayUnion(ta.properties) AS propertiesUnion\n+FROM test_array_union ta;\n",
  "problem_statement": "ArrayUnion gives wrong results when joining tables together\n### Company or project name\n\n_No response_\n\n### Describe what's wrong\n\n`ArrayUnion` joins together arrays of unrelated rows when joining together two tables.\nThe array:\n```\n1\t['1']\n2\t['2']\n3\t['3']\n4\t['4']\n5\t['5']\n6\t['6']\n7\t['7']\n8\t['8']\n9\t['9']\n10\t['10']\n```\nwhen joined full outer joined with an empty table and their arrays union'ed produces:\n```\n1\t['1']\n2\t['1','2']\n3\t['3','1','2']\n4\t['3','1','2','4']\n5\t['5','3','1','2','4']\n6\t['6','5','3','1','2','4']\n7\t['6','5','3','1','7','2','4']\n8\t['6','5','3','1','7','8','2','4']\n9\t['6','5','3','1','7','8','2','9','4']\n10\t['6','5','10','3','1','7','8','2','9','4']\n```\n\nClickhouse playground:\nhttps://fiddle.clickhouse.com/201b7d01-8107-48c1-ac55-94ffbf3be7de\n\n### Does it reproduce on the most recent release?\n\nYes\n\n### How to reproduce\n\nClickHouse version: 24.12.1.1614\n\nFull query with table:\n```\nCREATE OR REPLACE TABLE test_array_union\n(\n    `id` Int8,\n    `properties` Array(String)\n)\nENGINE = MergeTree\nORDER BY id\nSETTINGS index_granularity = 8192;\n\nINSERT INTO test_array_union \nVALUES \n(1, ['1']),\n(2, ['2']),\n(3, ['3']),\n(4, ['4']),\n(5, ['5']),\n(6, ['6']),\n(7, ['7']),\n(8, ['8']),\n(9, ['9']),\n(10, ['10']);\n\nselect \n\tif(ta.id is null, tb.id, ta.id) as id,\n\tarrayUnion(ta.properties, tb.properties) as properties\nfrom test_array_union ta \n  full outer join (select * from test_array_union tau limit 0) tb on ta.id = tb.id \n```\n\n### Expected behavior\n\nThe `arrayUnion` should only join together the array within its row.\n\nThe `array_union_test` table is full outer joined with an essentially empty table thanks to the limit 0. I would expect that the result is just the original `array_union_test` table.\n\n### Error message and/or stacktrace\n\n_No response_\n\n### Additional context\n\n_No response_\n",
  "hints_text": "I don't know if the issue is related to joining the tables. As I can see, it gives the same results even without the join:\n[https://fiddle.clickhouse.com/e38528d1-88cc-435c-a5b2-797293ea1214](https://fiddle.clickhouse.com/e38528d1-88cc-435c-a5b2-797293ea1214)\n\n```\nselect \n\tta.id as id,\n    ta.properties as properties,\n\tarrayUnion(ta.properties) as propertiesUnion,\n\tarrayDistinct(arrayConcat(ta.properties)) as propertiesConcat\nfrom test_array_union ta;\n1\t['1']\t['1']\t['1']\n2\t['2']\t['1','2']\t['2']\n3\t['3']\t['3','1','2']\t['3']\n4\t['4']\t['3','1','2','4']\t['4']\n5\t['5']\t['5','3','1','2','4']\t['5']\n6\t['6']\t['6','5','3','1','2','4']\t['6']\n7\t['7']\t['6','5','3','1','7','2','4']\t['7']\n8\t['8']\t['6','5','3','1','7','8','2','4']\t['8']\n9\t['9']\t['6','5','3','1','7','8','2','9','4']\t['9']\n10\t['10']\t['6','5','10','3','1','7','8','2','9','4']\t['10']\n```\n\nAs I see, it was built this way initially - https://github.com/ClickHouse/ClickHouse/pull/68989\nBut in the initial task, ArrayUnion should be equal to arrayDistinct(arrayConcat)), which is not the case.\n@petern48, @vdimir is it expected behavior, or is it a bug?\nThis is a bug because `arrayUnion` is a regular function, and different rows should not affect each other. So, it\u2019s completely unclear where `'1'` in the row `2\t['2']\t['1','2']\t['2']` comes from (the same issue applies to other rows as well).\nYes, this definitely isn't right. I've been very busy lately, but I'm hoping I can find time to look into this soon.\nI just wanted to add a smaller repro after I ran into the bug today:\n\n```sql\nSELECT \n    foo.id,\n    arraySort(arrayUnion(foo.numbers1, foo.numbers2)) as unioned\nFROM (\n    SELECT \n        arrayJoin([([1, 2, 3], [10, 20, 30], 100), \n                   ([1, 2], [10, 20], 101)]) AS tuple_data,\n        tuple_data.1 AS numbers1,\n        tuple_data.2 AS numbers2,\n        tuple_data.3 AS id\n) foo\n```\n\n```\nid |unioned         |\n---+----------------+\n100|[1,2,3,10,20,30]|\n101|[1,2,3,10,20]   |\n```\n\nThe second id included a 3 from the `numbers1`. The second id did not include the 30 from `numbers2`, so even were this intentional, it is buggy. As you add rows with unique array elements, they union previous data similarly.\n\nI used `arraySort` for output convenience; it is not required for the bug.\n\nWorkaround that works for my example above: Insert first element `[]`, as in `arrayUnion([], foo.numbers1, foo.numbers2)`\n\nAlternative: `arrayReduce('groupUniqArray', arrayConcat(foo.numbers1, foo.numbers2))`",
  "created_at": "2025-04-12T20:01:48Z"
}