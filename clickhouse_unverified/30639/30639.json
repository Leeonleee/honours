{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 30639,
  "instance_id": "ClickHouse__ClickHouse-30639",
  "issue_numbers": [
    "30545"
  ],
  "base_commit": "68e75c2727571575287c15f7357b022cbf67ccff",
  "patch": "diff --git a/src/Functions/now.cpp b/src/Functions/now.cpp\nindex b244d054cfe5..653a39b38d0d 100644\n--- a/src/Functions/now.cpp\n+++ b/src/Functions/now.cpp\n@@ -43,13 +43,13 @@ class ExecutableFunctionNow : public IExecutableFunction\n class FunctionBaseNow : public IFunctionBase\n {\n public:\n-    explicit FunctionBaseNow(time_t time_, DataTypePtr return_type_) : time_value(time_), return_type(return_type_) {}\n+    explicit FunctionBaseNow(time_t time_, DataTypes argument_types_, DataTypePtr return_type_)\n+        : time_value(time_), argument_types(std::move(argument_types_)), return_type(std::move(return_type_)) {}\n \n     String getName() const override { return \"now\"; }\n \n     const DataTypes & getArgumentTypes() const override\n     {\n-        static const DataTypes argument_types;\n         return argument_types;\n     }\n \n@@ -69,6 +69,7 @@ class FunctionBaseNow : public IFunctionBase\n \n private:\n     time_t time_value;\n+    DataTypes argument_types;\n     DataTypePtr return_type;\n };\n \n@@ -117,8 +118,10 @@ class NowOverloadResolver : public IFunctionOverloadResolver\n         }\n         if (arguments.size() == 1)\n             return std::make_unique<FunctionBaseNow>(\n-                time(nullptr), std::make_shared<DataTypeDateTime>(extractTimeZoneNameFromFunctionArguments(arguments, 0, 0)));\n-        return std::make_unique<FunctionBaseNow>(time(nullptr), std::make_shared<DataTypeDateTime>());\n+                time(nullptr), DataTypes{arguments.front().type},\n+                std::make_shared<DataTypeDateTime>(extractTimeZoneNameFromFunctionArguments(arguments, 0, 0)));\n+\n+        return std::make_unique<FunctionBaseNow>(time(nullptr), DataTypes(), std::make_shared<DataTypeDateTime>());\n     }\n };\n \ndiff --git a/src/Functions/now64.cpp b/src/Functions/now64.cpp\nindex 4a3f4dbfb221..bd1038b1fc6e 100644\n--- a/src/Functions/now64.cpp\n+++ b/src/Functions/now64.cpp\n@@ -67,13 +67,13 @@ class ExecutableFunctionNow64 : public IExecutableFunction\n class FunctionBaseNow64 : public IFunctionBase\n {\n public:\n-    explicit FunctionBaseNow64(Field time_, DataTypePtr return_type_) : time_value(time_), return_type(return_type_) {}\n+    explicit FunctionBaseNow64(Field time_, DataTypes argument_types_, DataTypePtr return_type_)\n+        : time_value(time_), argument_types(std::move(argument_types_)), return_type(std::move(return_type_)) {}\n \n     String getName() const override { return \"now64\"; }\n \n     const DataTypes & getArgumentTypes() const override\n     {\n-        static const DataTypes argument_types;\n         return argument_types;\n     }\n \n@@ -93,6 +93,7 @@ class FunctionBaseNow64 : public IFunctionBase\n \n private:\n     Field time_value;\n+    DataTypes argument_types;\n     DataTypePtr return_type;\n };\n \n@@ -139,14 +140,19 @@ class Now64OverloadResolver : public IFunctionOverloadResolver\n         return std::make_shared<DataTypeDateTime64>(scale, timezone_name);\n     }\n \n-    FunctionBasePtr buildImpl(const ColumnsWithTypeAndName &, const DataTypePtr & result_type) const override\n+    FunctionBasePtr buildImpl(const ColumnsWithTypeAndName & arguments, const DataTypePtr & result_type) const override\n     {\n         UInt32 scale = DataTypeDateTime64::default_scale;\n         auto res_type = removeNullable(result_type);\n         if (const auto * type = typeid_cast<const DataTypeDateTime64 *>(res_type.get()))\n             scale = type->getScale();\n \n-        return std::make_unique<FunctionBaseNow64>(nowSubsecond(scale), result_type);\n+        DataTypes arg_types;\n+        arg_types.reserve(arguments.size());\n+        for (const auto & arg : arguments)\n+            arg_types.push_back(arg.type);\n+\n+        return std::make_unique<FunctionBaseNow64>(nowSubsecond(scale), std::move(arg_types), std::move(result_type));\n     }\n };\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02100_now64_types_bug.reference b/tests/queries/0_stateless/02100_now64_types_bug.reference\nnew file mode 100644\nindex 000000000000..ae136939b645\n--- /dev/null\n+++ b/tests/queries/0_stateless/02100_now64_types_bug.reference\n@@ -0,0 +1,3 @@\n+2\n+1\n+0\ndiff --git a/tests/queries/0_stateless/02100_now64_types_bug.sql b/tests/queries/0_stateless/02100_now64_types_bug.sql\nnew file mode 100644\nindex 000000000000..ef91b19bb08c\n--- /dev/null\n+++ b/tests/queries/0_stateless/02100_now64_types_bug.sql\n@@ -0,0 +1,8 @@\n+SELECT x\n+FROM\n+(\n+    SELECT if((number % NULL) = -2147483648, NULL, if(toInt64(toInt64(now64(if((number % NULL) = -2147483648, NULL, if(toInt64(now64(toInt64(9223372036854775807, now64(plus(NULL, NULL))), plus(NULL, NULL))) = (number % NULL), nan, toFloat64(number))), toInt64(9223372036854775807, toInt64(9223372036854775807, now64(plus(NULL, NULL))), now64(plus(NULL, NULL))), plus(NULL, NULL))), now64(toInt64(9223372036854775807, toInt64(0, now64(plus(NULL, NULL))), now64(plus(NULL, NULL))), plus(NULL, NULL))) = (number % NULL), nan, toFloat64(number))) AS x\n+    FROM system.numbers\n+    LIMIT 3\n+)\n+ORDER BY x DESC NULLS LAST\n",
  "problem_statement": "Logical error found by fuzzer: cannot capture columns in now64\n```\r\nSELECT x\r\nFROM\r\n(\r\n    SELECT if((number % NULL) = -2147483648, NULL, if(toInt64(toInt64(now64(if((number % NULL) = -2147483648, NULL, if(toInt64(now64(toInt64(9223372036854775807, now64(h3kRing(NULL, NULL))), h3kRing(NULL, NULL))) = (number % NULL), nan, toFloat64(number))), toInt64(9223372036854775807, toInt64(9223372036854775807, now64(h3kRing(NULL, NULL))), now64(h3kRing(NULL, NULL))), h3kRing(NULL, NULL))), now64(toInt64(9223372036854775807, toInt64(0, now64(h3kRing(NULL, NULL))), now64(h3kRing(NULL, NULL))), h3kRing(NULL, NULL))) = (number % NULL), nan, toFloat64(number))) AS x\r\n    FROM system.numbers\r\n    LIMIT 3\r\n)\r\nORDER BY x DESC NULLS LAST\r\n\r\nQuery id: d38af640-03bb-47ec-9ad0-144373bf6ac4\r\n\r\n\r\n0 rows in set. Elapsed: 0.011 sec. \r\n\r\nReceived exception from server (version 21.11.1):\r\nCode: 49. DB::Exception: Received from localhost:9000. DB::Exception: Cannot capture 3 columns because function now64 has 0 arguments.: while executing 'FUNCTION now64(if(equals(modulo(number, NULL), -2147483648), NULL, if(equals(toInt64(now64(toInt64(9223372036854775807, now64(h3kRing(NULL, NULL))), h3kRing(NULL, NULL))), modulo(number, NULL)), nan, toFloat64(number))) :: 2, toInt64(9223372036854775807, toInt64(9223372036854775807, now64(h3kRing(NULL, NULL))), now64(h3kRing(NULL, NULL))) :: 6, h3kRing(NULL, NULL) :: 3) -> now64(if(equals(modulo(number, NULL), -2147483648), NULL, if(equals(toInt64(now64(toInt64(9223372036854775807, now64(h3kRing(NULL, NULL))), h3kRing(NULL, NULL))), modulo(number, NULL)), nan, toFloat64(number))), toInt64(9223372036854775807, toInt64(9223372036854775807, now64(h3kRing(NULL, NULL))), now64(h3kRing(NULL, NULL))), h3kRing(NULL, NULL)) Nullable(Nothing) : 4'. (LOGICAL_ERROR)\r\n```\n",
  "hints_text": "Always reproducible.\nIt's connected with short circuit, we cannot convert now64 to ColumnFunction. Bug is here:\r\nhttps://github.com/ClickHouse/ClickHouse/blob/1467a59f91eb435c2d12c98f94252a49c978fa4e/src/Functions/now64.cpp#L110\n@Avogar `now64` is variadic function.\nOh, sorry, tried to find the problem from the phone and made a mistake. The error is occurred here:\r\nhttps://github.com/ClickHouse/ClickHouse/blob/1467a59f91eb435c2d12c98f94252a49c978fa4e/src/Columns/ColumnFunction.cpp#L175-L183\r\n\r\nSo we need to check method getArgumentTypes in now64 Base function:\r\nhttps://github.com/ClickHouse/ClickHouse/blob/1467a59f91eb435c2d12c98f94252a49c978fa4e/src/Functions/now64.cpp#L74-L79\r\n\r\nSeems like it always returns empty array of types, but we  know argument types when we create this function in overload resolved. ",
  "created_at": "2021-10-25T09:07:42Z",
  "modified_files": [
    "src/Functions/now.cpp",
    "src/Functions/now64.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02100_now64_types_bug.reference",
    "b/tests/queries/0_stateless/02100_now64_types_bug.sql"
  ]
}