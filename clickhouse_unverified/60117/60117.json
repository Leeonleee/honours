{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 60117,
  "instance_id": "ClickHouse__ClickHouse-60117",
  "issue_numbers": [
    "38316"
  ],
  "base_commit": "96d1f7a6ec6ed7796d8c99f09297a786e155ce0a",
  "patch": "diff --git a/docs/en/sql-reference/statements/grant.md b/docs/en/sql-reference/statements/grant.md\nindex a93db29e82cf..ccef5066e899 100644\n--- a/docs/en/sql-reference/statements/grant.md\n+++ b/docs/en/sql-reference/statements/grant.md\n@@ -209,6 +209,7 @@ Hierarchy of privileges:\n     - `SHOW NAMED COLLECTIONS`\n     - `SHOW NAMED COLLECTIONS SECRETS`\n     - `NAMED COLLECTION`\n+- [TABLE ENGINE](#grant-table-engine)\n \n Examples of how this hierarchy is treated:\n \n@@ -505,6 +506,7 @@ and\n [`format_display_secrets_in_show_and_select` format setting](../../operations/settings/formats#format_display_secrets_in_show_and_select)\n are turned on.\n \n+\n ### NAMED COLLECTION ADMIN\n \n Allows a certain operation on a specified named collection. Before version 23.7 it was called NAMED COLLECTION CONTROL, and after 23.7 NAMED COLLECTION ADMIN was added and NAMED COLLECTION CONTROL is preserved as an alias.\n@@ -524,6 +526,17 @@ Unlike all other grants (CREATE, DROP, ALTER, SHOW) grant NAMED COLLECTION was a\n Assuming a named collection is called abc, we grant privilege CREATE NAMED COLLECTION to user john.\n - `GRANT CREATE NAMED COLLECTION ON abc TO john`\n \n+\n+### TABLE ENGINE\n+\n+Allows using a specified table engine when creating a table. Applies to [table engines](../../engines/table-engines/index.md).\n+\n+**Examples**\n+\n+- `GRANT TABLE ENGINE ON * TO john`\n+- `GRANT TABLE ENGINE ON TinyLog TO john`\n+\n+\n ### ALL\n \n Grants all the privileges on regulated entity to a user account or a role.\ndiff --git a/programs/server/config.xml b/programs/server/config.xml\nindex ea3ead47c32f..4c59cd9d2209 100644\n--- a/programs/server/config.xml\n+++ b/programs/server/config.xml\n@@ -742,6 +742,10 @@\n              It also enables 'changeable_in_readonly' constraint type -->\n         <settings_constraints_replace_previous>true</settings_constraints_replace_previous>\n \n+        <!-- By default, for backward compatibility create table with a specific table engine ignores grant,\n+             however you can change this behaviour by setting this to true -->\n+        <table_engines_require_grant>true</table_engines_require_grant>\n+\n         <!-- Number of seconds since last access a role is stored in the Role Cache -->\n         <role_cache_expiration_time_seconds>600</role_cache_expiration_time_seconds>\n     </access_control_improvements>\ndiff --git a/src/Access/AccessControl.cpp b/src/Access/AccessControl.cpp\nindex d02af01126a1..da047d1cb1d7 100644\n--- a/src/Access/AccessControl.cpp\n+++ b/src/Access/AccessControl.cpp\n@@ -285,6 +285,7 @@ void AccessControl::setUpFromMainConfig(const Poco::Util::AbstractConfiguration\n     setSelectFromSystemDatabaseRequiresGrant(config_.getBool(\"access_control_improvements.select_from_system_db_requires_grant\", false));\n     setSelectFromInformationSchemaRequiresGrant(config_.getBool(\"access_control_improvements.select_from_information_schema_requires_grant\", false));\n     setSettingsConstraintsReplacePrevious(config_.getBool(\"access_control_improvements.settings_constraints_replace_previous\", false));\n+    setTableEnginesRequireGrant(config_.getBool(\"access_control_improvements.table_engines_require_grant\", false));\n \n     addStoragesFromMainConfig(config_, config_path_, get_zookeeper_function_);\n \ndiff --git a/src/Access/AccessControl.h b/src/Access/AccessControl.h\nindex 1af74e02fb71..d1537219a068 100644\n--- a/src/Access/AccessControl.h\n+++ b/src/Access/AccessControl.h\n@@ -182,6 +182,9 @@ class AccessControl : public MultipleAccessStorage\n     void setSettingsConstraintsReplacePrevious(bool enable) { settings_constraints_replace_previous = enable; }\n     bool doesSettingsConstraintsReplacePrevious() const { return settings_constraints_replace_previous; }\n \n+    void setTableEnginesRequireGrant(bool enable) { table_engines_require_grant = enable; }\n+    bool doesTableEnginesRequireGrant() const { return table_engines_require_grant; }\n+\n     std::shared_ptr<const ContextAccess> getContextAccess(const ContextAccessParams & params) const;\n \n     std::shared_ptr<const EnabledRoles> getEnabledRoles(\n@@ -258,6 +261,7 @@ class AccessControl : public MultipleAccessStorage\n     std::atomic_bool select_from_system_db_requires_grant = false;\n     std::atomic_bool select_from_information_schema_requires_grant = false;\n     std::atomic_bool settings_constraints_replace_previous = false;\n+    std::atomic_bool table_engines_require_grant = false;\n     std::atomic_int bcrypt_workfactor = 12;\n     std::atomic<AuthenticationType> default_password_type = AuthenticationType::SHA256_PASSWORD;\n };\ndiff --git a/src/Access/Common/AccessFlags.cpp b/src/Access/Common/AccessFlags.cpp\nindex d3b6d5a98188..9d846821e420 100644\n--- a/src/Access/Common/AccessFlags.cpp\n+++ b/src/Access/Common/AccessFlags.cpp\n@@ -101,8 +101,9 @@ namespace\n         const Flags & getTableFlags() const { return all_flags_for_target[TABLE]; }\n         const Flags & getColumnFlags() const { return all_flags_for_target[COLUMN]; }\n         const Flags & getDictionaryFlags() const { return all_flags_for_target[DICTIONARY]; }\n-        const Flags & getNamedCollectionFlags() const { return all_flags_for_target[NAMED_COLLECTION]; }\n+        const Flags & getTableEngineFlags() const { return all_flags_for_target[TABLE_ENGINE]; }\n         const Flags & getUserNameFlags() const { return all_flags_for_target[USER_NAME]; }\n+        const Flags & getNamedCollectionFlags() const { return all_flags_for_target[NAMED_COLLECTION]; }\n         const Flags & getAllFlagsGrantableOnGlobalLevel() const { return getAllFlags(); }\n         const Flags & getAllFlagsGrantableOnGlobalWithParameterLevel() const { return getGlobalWithParameterFlags(); }\n         const Flags & getAllFlagsGrantableOnDatabaseLevel() const { return all_flags_grantable_on_database_level; }\n@@ -122,6 +123,7 @@ namespace\n             DICTIONARY,\n             NAMED_COLLECTION,\n             USER_NAME,\n+            TABLE_ENGINE,\n         };\n \n         struct Node;\n@@ -301,7 +303,7 @@ namespace\n                 collectAllFlags(child.get());\n \n             all_flags_grantable_on_table_level = all_flags_for_target[TABLE] | all_flags_for_target[DICTIONARY] | all_flags_for_target[COLUMN];\n-            all_flags_grantable_on_global_with_parameter_level = all_flags_for_target[NAMED_COLLECTION] | all_flags_for_target[USER_NAME];\n+            all_flags_grantable_on_global_with_parameter_level = all_flags_for_target[NAMED_COLLECTION] | all_flags_for_target[USER_NAME] | all_flags_for_target[TABLE_ENGINE];\n             all_flags_grantable_on_database_level = all_flags_for_target[DATABASE] | all_flags_grantable_on_table_level;\n         }\n \n@@ -352,7 +354,7 @@ namespace\n         std::unordered_map<std::string_view, Flags> keyword_to_flags_map;\n         std::vector<Flags> access_type_to_flags_mapping;\n         Flags all_flags;\n-        Flags all_flags_for_target[static_cast<size_t>(USER_NAME) + 1];\n+        Flags all_flags_for_target[static_cast<size_t>(TABLE_ENGINE) + 1];\n         Flags all_flags_grantable_on_database_level;\n         Flags all_flags_grantable_on_table_level;\n         Flags all_flags_grantable_on_global_with_parameter_level;\n@@ -376,7 +378,11 @@ std::unordered_map<AccessFlags::ParameterType, AccessFlags> AccessFlags::splitIn\n     if (user_flags)\n         result.emplace(ParameterType::USER_NAME, user_flags);\n \n-    auto other_flags = (~named_collection_flags & ~user_flags) & *this;\n+    auto table_engine_flags = AccessFlags::allTableEngineFlags() & *this;\n+    if (table_engine_flags)\n+        result.emplace(ParameterType::TABLE_ENGINE, table_engine_flags);\n+\n+    auto other_flags = (~named_collection_flags & ~user_flags & ~table_engine_flags) & *this;\n     if (other_flags)\n         result.emplace(ParameterType::NONE, other_flags);\n \n@@ -395,6 +401,10 @@ AccessFlags::ParameterType AccessFlags::getParameterType() const\n     if (AccessFlags::allUserNameFlags().contains(*this))\n         return AccessFlags::USER_NAME;\n \n+    /// All flags refer to TABLE ENGINE access type.\n+    if (AccessFlags::allTableEngineFlags().contains(*this))\n+        return AccessFlags::TABLE_ENGINE;\n+\n     throw Exception(ErrorCodes::MIXED_ACCESS_PARAMETER_TYPES, \"Having mixed parameter types: {}\", toString());\n }\n \n@@ -414,6 +424,7 @@ AccessFlags AccessFlags::allColumnFlags() { return Helper::instance().getColumnF\n AccessFlags AccessFlags::allDictionaryFlags() { return Helper::instance().getDictionaryFlags(); }\n AccessFlags AccessFlags::allNamedCollectionFlags() { return Helper::instance().getNamedCollectionFlags(); }\n AccessFlags AccessFlags::allUserNameFlags() { return Helper::instance().getUserNameFlags(); }\n+AccessFlags AccessFlags::allTableEngineFlags() { return Helper::instance().getTableEngineFlags(); }\n AccessFlags AccessFlags::allFlagsGrantableOnGlobalLevel() { return Helper::instance().getAllFlagsGrantableOnGlobalLevel(); }\n AccessFlags AccessFlags::allFlagsGrantableOnGlobalWithParameterLevel() { return Helper::instance().getAllFlagsGrantableOnGlobalWithParameterLevel(); }\n AccessFlags AccessFlags::allFlagsGrantableOnDatabaseLevel() { return Helper::instance().getAllFlagsGrantableOnDatabaseLevel(); }\ndiff --git a/src/Access/Common/AccessFlags.h b/src/Access/Common/AccessFlags.h\nindex a684731055ce..e2c0611be527 100644\n--- a/src/Access/Common/AccessFlags.h\n+++ b/src/Access/Common/AccessFlags.h\n@@ -56,6 +56,7 @@ class AccessFlags\n     enum ParameterType\n     {\n         NONE,\n+        TABLE_ENGINE,\n         NAMED_COLLECTION,\n         USER_NAME,\n     };\n@@ -107,6 +108,9 @@ class AccessFlags\n     /// Returns all the flags related to a user.\n     static AccessFlags allUserNameFlags();\n \n+    /// Returns all the flags related to a table engine.\n+    static AccessFlags allTableEngineFlags();\n+\n     /// Returns all the flags which could be granted on the global level.\n     /// The same as allFlags().\n     static AccessFlags allFlagsGrantableOnGlobalLevel();\ndiff --git a/src/Access/Common/AccessType.h b/src/Access/Common/AccessType.h\nindex 83b50ce96c3a..35f7c6bee90f 100644\n--- a/src/Access/Common/AccessType.h\n+++ b/src/Access/Common/AccessType.h\n@@ -12,7 +12,7 @@ enum class AccessType\n /// Macro M should be defined as M(name, aliases, node_type, parent_group_name)\n /// where name is identifier with underscores (instead of spaces);\n /// aliases is a string containing comma-separated list;\n-/// node_type either specifies access type's level (GLOBAL/NAMED_COLLECTION/USER_NAME/DATABASE/TABLE/DICTIONARY/VIEW/COLUMNS),\n+/// node_type either specifies access type's level (GLOBAL/NAMED_COLLECTION/USER_NAME/TABLE_ENGINE/DATABASE/TABLE/DICTIONARY/VIEW/COLUMNS),\n /// or specifies that the access type is a GROUP of other access types;\n /// parent_group_name is the name of the group containing this access type (or NONE if there is no such group).\n /// NOTE A parent group must be declared AFTER all its children.\n@@ -153,6 +153,8 @@ enum class AccessType\n     M(NAMED_COLLECTION_ADMIN, \"NAMED COLLECTION CONTROL\", NAMED_COLLECTION, ALL) \\\n     M(SET_DEFINER, \"\", USER_NAME, ALL) \\\n     \\\n+    M(TABLE_ENGINE, \"TABLE ENGINE\", TABLE_ENGINE, ALL) \\\n+    \\\n     M(SYSTEM_SHUTDOWN, \"SYSTEM KILL, SHUTDOWN\", GLOBAL, SYSTEM) \\\n     M(SYSTEM_DROP_DNS_CACHE, \"SYSTEM DROP DNS, DROP DNS CACHE, DROP DNS\", GLOBAL, SYSTEM_DROP_CACHE)  \\\n     M(SYSTEM_DROP_CONNECTIONS_CACHE, \"SYSTEM DROP CONNECTIONS CACHE, DROP CONNECTIONS CACHE\", GLOBAL, SYSTEM_DROP_CACHE)  \\\ndiff --git a/src/Access/ContextAccess.cpp b/src/Access/ContextAccess.cpp\nindex 0943e797e3ff..2736d13e751b 100644\n--- a/src/Access/ContextAccess.cpp\n+++ b/src/Access/ContextAccess.cpp\n@@ -204,6 +204,52 @@ namespace\n             res.grant(AccessType::SELECT, DatabaseCatalog::INFORMATION_SCHEMA_UPPERCASE);\n         }\n \n+        /// There is overlap between AccessType sources and table engines, so the following code avoids user granting twice.\n+        static const std::vector<std::tuple<AccessFlags, std::string>> source_and_table_engines = {\n+            {AccessType::FILE, \"File\"},\n+            {AccessType::URL, \"URL\"},\n+            {AccessType::REMOTE, \"Distributed\"},\n+            {AccessType::MONGO, \"MongoDB\"},\n+            {AccessType::REDIS, \"Redis\"},\n+            {AccessType::MYSQL, \"MySQL\"},\n+            {AccessType::POSTGRES, \"PostgreSQL\"},\n+            {AccessType::SQLITE, \"SQLite\"},\n+            {AccessType::ODBC, \"ODBC\"},\n+            {AccessType::JDBC, \"JDBC\"},\n+            {AccessType::HDFS, \"HDFS\"},\n+            {AccessType::S3, \"S3\"},\n+            {AccessType::HIVE, \"Hive\"},\n+            {AccessType::AZURE, \"AzureBlobStorage\"}\n+        };\n+\n+        /// Sync SOURCE and TABLE_ENGINE, so only need to check TABLE_ENGINE later.\n+        if (access_control.doesTableEnginesRequireGrant())\n+        {\n+            for (const auto & source_and_table_engine : source_and_table_engines)\n+            {\n+                const auto & source = std::get<0>(source_and_table_engine);\n+                if (res.isGranted(source))\n+                {\n+                    const auto & table_engine = std::get<1>(source_and_table_engine);\n+                    res.grant(AccessType::TABLE_ENGINE, table_engine);\n+                }\n+            }\n+        }\n+        else\n+        {\n+            /// Add TABLE_ENGINE on * and then remove TABLE_ENGINE on particular engines.\n+            res.grant(AccessType::TABLE_ENGINE);\n+            for (const auto & source_and_table_engine : source_and_table_engines)\n+            {\n+                const auto & source = std::get<0>(source_and_table_engine);\n+                if (!res.isGranted(source))\n+                {\n+                    const auto & table_engine = std::get<1>(source_and_table_engine);\n+                    res.revoke(AccessType::TABLE_ENGINE, table_engine);\n+                }\n+            }\n+        }\n+\n         return res;\n     }\n \ndiff --git a/src/Access/UsersConfigAccessStorage.cpp b/src/Access/UsersConfigAccessStorage.cpp\nindex b4b843fc77ea..4144ecae15f5 100644\n--- a/src/Access/UsersConfigAccessStorage.cpp\n+++ b/src/Access/UsersConfigAccessStorage.cpp\n@@ -371,6 +371,7 @@ namespace\n             if (databases)\n             {\n                 user->access.revoke(AccessFlags::allFlags() - AccessFlags::allGlobalFlags());\n+                user->access.grantWithGrantOption(AccessType::TABLE_ENGINE);\n                 user->access.grantWithGrantOption(AccessFlags::allDictionaryFlags(), IDictionary::NO_DATABASE_TAG);\n                 for (const String & database : *databases)\n                     user->access.grantWithGrantOption(AccessFlags::allFlags(), database);\ndiff --git a/src/Interpreters/InterpreterCreateQuery.cpp b/src/Interpreters/InterpreterCreateQuery.cpp\nindex 7c3bed7388c8..acf00b5184e3 100644\n--- a/src/Interpreters/InterpreterCreateQuery.cpp\n+++ b/src/Interpreters/InterpreterCreateQuery.cpp\n@@ -723,11 +723,7 @@ InterpreterCreateQuery::TableProperties InterpreterCreateQuery::getTableProperti\n \n     /// We have to check access rights again (in case engine was changed).\n     if (create.storage && create.storage->engine)\n-    {\n-        auto source_access_type = StorageFactory::instance().getSourceAccessType(create.storage->engine->name);\n-        if (source_access_type != AccessType::NONE)\n-            getContext()->checkAccess(source_access_type);\n-    }\n+        getContext()->checkAccess(AccessType::TABLE_ENGINE, create.storage->engine->name);\n \n     TableProperties properties;\n     TableLockHolder as_storage_lock;\n@@ -1833,11 +1829,7 @@ AccessRightsElements InterpreterCreateQuery::getRequiredAccess() const\n         required_access.emplace_back(AccessType::SELECT | AccessType::INSERT, create.to_table_id.database_name, create.to_table_id.table_name);\n \n     if (create.storage && create.storage->engine)\n-    {\n-        auto source_access_type = StorageFactory::instance().getSourceAccessType(create.storage->engine->name);\n-        if (source_access_type != AccessType::NONE)\n-            required_access.emplace_back(source_access_type);\n-    }\n+        required_access.emplace_back(AccessType::TABLE_ENGINE, create.storage->engine->name);\n \n     return required_access;\n }\ndiff --git a/src/Storages/System/StorageSystemPrivileges.cpp b/src/Storages/System/StorageSystemPrivileges.cpp\nindex 58dcf62115e8..15ab25ea8203 100644\n--- a/src/Storages/System/StorageSystemPrivileges.cpp\n+++ b/src/Storages/System/StorageSystemPrivileges.cpp\n@@ -30,6 +30,7 @@ namespace\n         COLUMN,\n         NAMED_COLLECTION,\n         USER_NAME,\n+        TABLE_ENGINE,\n     };\n \n     DataTypeEnum8::Values getLevelEnumValues()\n@@ -43,6 +44,7 @@ namespace\n         enum_values.emplace_back(\"COLUMN\", static_cast<Int8>(COLUMN));\n         enum_values.emplace_back(\"NAMED_COLLECTION\", static_cast<Int8>(NAMED_COLLECTION));\n         enum_values.emplace_back(\"USER_NAME\", static_cast<Int8>(USER_NAME));\n+        enum_values.emplace_back(\"TABLE_ENGINE\", static_cast<Int8>(TABLE_ENGINE));\n         return enum_values;\n     }\n }\n",
  "test_patch": "diff --git a/src/Access/tests/gtest_access_rights_ops.cpp b/src/Access/tests/gtest_access_rights_ops.cpp\nindex 97acef1c9eba..d25d1bb6ee4b 100644\n--- a/src/Access/tests/gtest_access_rights_ops.cpp\n+++ b/src/Access/tests/gtest_access_rights_ops.cpp\n@@ -54,7 +54,7 @@ TEST(AccessRights, Union)\n               \"SYSTEM MOVES, SYSTEM PULLING REPLICATION LOG, SYSTEM CLEANUP, SYSTEM VIEWS, SYSTEM SENDS, SYSTEM REPLICATION QUEUES, SYSTEM VIRTUAL PARTS UPDATE, \"\n               \"SYSTEM DROP REPLICA, SYSTEM SYNC REPLICA, SYSTEM RESTART REPLICA, \"\n               \"SYSTEM RESTORE REPLICA, SYSTEM WAIT LOADING PARTS, SYSTEM SYNC DATABASE REPLICA, SYSTEM FLUSH DISTRIBUTED, dictGet ON db1.*, \"\n-              \"GRANT SET DEFINER ON db1, GRANT NAMED COLLECTION ADMIN ON db1\");\n+              \"GRANT TABLE ENGINE ON db1, GRANT SET DEFINER ON db1, GRANT NAMED COLLECTION ADMIN ON db1\");\n }\n \n \ndiff --git a/tests/config/config.d/enable_access_control_improvements.xml b/tests/config/config.d/enable_access_control_improvements.xml\nindex 564b656a0ad0..350c6fc4f44c 100644\n--- a/tests/config/config.d/enable_access_control_improvements.xml\n+++ b/tests/config/config.d/enable_access_control_improvements.xml\n@@ -5,5 +5,6 @@\n         <select_from_system_db_requires_grant>true</select_from_system_db_requires_grant>\n         <select_from_information_schema_requires_grant>true</select_from_information_schema_requires_grant>\n         <settings_constraints_replace_previous>true</settings_constraints_replace_previous>\n+        <table_engines_require_grant>true</table_engines_require_grant>\n     </access_control_improvements>\n </clickhouse>\ndiff --git a/tests/integration/test_backup_restore_new/test.py b/tests/integration/test_backup_restore_new/test.py\nindex 34ffdf7a8df7..2e714c297710 100644\n--- a/tests/integration/test_backup_restore_new/test.py\n+++ b/tests/integration/test_backup_restore_new/test.py\n@@ -1036,6 +1036,7 @@ def test_required_privileges():\n     )\n \n     instance.query(\"GRANT INSERT, CREATE ON test.table2 TO u1\")\n+    instance.query(\"GRANT TABLE ENGINE ON MergeTree TO u1\")\n     instance.query(\n         f\"RESTORE TABLE test.table AS test.table2 FROM {backup_name}\", user=\"u1\"\n     )\ndiff --git a/tests/integration/test_distributed_ddl/test.py b/tests/integration/test_distributed_ddl/test.py\nindex 7cee60a7f35c..f08c6265b829 100755\n--- a/tests/integration/test_distributed_ddl/test.py\n+++ b/tests/integration/test_distributed_ddl/test.py\n@@ -300,11 +300,13 @@ def test_allowed_databases(test_cluster):\n             \"CREATE TABLE db2.t2 ON CLUSTER cluster (i Int8) ENGINE = Memory\",\n             settings={\"user\": \"restricted_user\"},\n         )\n+\n     with pytest.raises(Exception):\n         instance.query(\n             \"CREATE TABLE t3 ON CLUSTER cluster (i Int8) ENGINE = Memory\",\n             settings={\"user\": \"restricted_user\"},\n         )\n+\n     with pytest.raises(Exception):\n         instance.query(\n             \"DROP DATABASE db2 ON CLUSTER cluster\", settings={\"user\": \"restricted_user\"}\ndiff --git a/tests/integration/test_grant_and_revoke/configs/config.xml b/tests/integration/test_grant_and_revoke/configs/config.xml\nnew file mode 100644\nindex 000000000000..fa009296dd3f\n--- /dev/null\n+++ b/tests/integration/test_grant_and_revoke/configs/config.xml\n@@ -0,0 +1,5 @@\n+<clickhouse>\n+    <access_control_improvements>\n+        <table_engines_require_grant>true</table_engines_require_grant>\n+    </access_control_improvements>\n+</clickhouse>\ndiff --git a/tests/integration/test_grant_and_revoke/test.py b/tests/integration/test_grant_and_revoke/test.py\nindex 46d8d254a0a2..b3a82d3f7a5a 100644\n--- a/tests/integration/test_grant_and_revoke/test.py\n+++ b/tests/integration/test_grant_and_revoke/test.py\n@@ -5,9 +5,8 @@\n cluster = ClickHouseCluster(__file__)\n instance = cluster.add_instance(\n     \"instance\",\n-    user_configs=[\n-        \"configs/users.d/users.xml\",\n-    ],\n+    main_configs=[\"configs/config.xml\"],\n+    user_configs=[\"configs/users.d/users.xml\"],\n )\n \n \n@@ -370,6 +369,7 @@ def test_implicit_create_temporary_table_grant():\n     )\n \n     instance.query(\"GRANT CREATE TABLE ON test.* TO A\")\n+    instance.query(\"GRANT TABLE ENGINE ON Memory TO A\")\n     instance.query(\"CREATE TEMPORARY TABLE tmp(name String)\", user=\"A\")\n \n     instance.query(\"REVOKE CREATE TABLE ON *.* FROM A\")\n@@ -718,3 +718,74 @@ def test_current_grants_override():\n             \"REVOKE SELECT ON test.* FROM B\",\n         ]\n     )\n+\n+\n+def test_table_engine_grant_and_revoke():\n+    instance.query(\"DROP USER IF EXISTS A\")\n+    instance.query(\"CREATE USER A\")\n+    instance.query(\"GRANT CREATE TABLE ON test.table1 TO A\")\n+    assert \"Not enough privileges\" in instance.query_and_get_error(\n+        \"CREATE TABLE test.table1(a Integer) engine=TinyLog\", user=\"A\"\n+    )\n+\n+    instance.query(\"GRANT TABLE ENGINE ON TinyLog TO A\")\n+\n+    instance.query(\"CREATE TABLE test.table1(a Integer) engine=TinyLog\", user=\"A\")\n+\n+    assert instance.query(\"SHOW GRANTS FOR A\") == TSV(\n+        [\n+            \"GRANT TABLE ENGINE ON TinyLog TO A\",\n+            \"GRANT CREATE TABLE ON test.table1 TO A\",\n+        ]\n+    )\n+\n+    instance.query(\"REVOKE TABLE ENGINE ON TinyLog FROM A\")\n+\n+    assert \"Not enough privileges\" in instance.query_and_get_error(\n+        \"CREATE TABLE test.table1(a Integer) engine=TinyLog\", user=\"A\"\n+    )\n+\n+    instance.query(\"REVOKE CREATE TABLE ON test.table1 FROM A\")\n+    instance.query(\"DROP TABLE test.table1\")\n+\n+    assert instance.query(\"SHOW GRANTS FOR A\") == TSV([])\n+\n+\n+def test_table_engine_and_source_grant():\n+    instance.query(\"DROP USER IF EXISTS A\")\n+    instance.query(\"CREATE USER A\")\n+    instance.query(\"GRANT CREATE TABLE ON test.table1 TO A\")\n+\n+    instance.query(\"GRANT TABLE ENGINE ON PostgreSQL TO A\")\n+\n+    instance.query(\n+        \"\"\"\n+        CREATE TABLE test.table1(a Integer)\n+        engine=PostgreSQL('localhost:5432', 'dummy', 'dummy', 'dummy', 'dummy');\n+        \"\"\",\n+        user=\"A\",\n+    )\n+\n+    instance.query(\"DROP TABLE test.table1\")\n+\n+    instance.query(\"REVOKE TABLE ENGINE ON PostgreSQL FROM A\")\n+\n+    assert \"Not enough privileges\" in instance.query_and_get_error(\n+        \"\"\"\n+        CREATE TABLE test.table1(a Integer)\n+        engine=PostgreSQL('localhost:5432', 'dummy', 'dummy', 'dummy', 'dummy');\n+        \"\"\",\n+        user=\"A\",\n+    )\n+\n+    instance.query(\"GRANT SOURCES ON *.* TO A\")\n+\n+    instance.query(\n+        \"\"\"\n+        CREATE TABLE test.table1(a Integer)\n+        engine=PostgreSQL('localhost:5432', 'dummy', 'dummy', 'dummy', 'dummy');\n+        \"\"\",\n+        user=\"A\",\n+    )\n+\n+    instance.query(\"DROP TABLE test.table1\")\ndiff --git a/tests/integration/test_settings_profile/test.py b/tests/integration/test_settings_profile/test.py\nindex 61237af08c57..e5c0a072ff9e 100644\n--- a/tests/integration/test_settings_profile/test.py\n+++ b/tests/integration/test_settings_profile/test.py\n@@ -621,6 +621,7 @@ def test_allow_ddl():\n     )\n \n     instance.query(\"GRANT CREATE ON tbl TO robin\")\n+    instance.query(\"GRANT TABLE ENGINE ON Log TO robin\")\n     instance.query(\"CREATE TABLE tbl(a Int32) ENGINE=Log\", user=\"robin\")\n     instance.query(\"DROP TABLE tbl\")\n \ndiff --git a/tests/queries/0_stateless/01271_show_privileges.reference b/tests/queries/0_stateless/01271_show_privileges.reference\nindex b1237189cb31..da9b324185d9 100644\n--- a/tests/queries/0_stateless/01271_show_privileges.reference\n+++ b/tests/queries/0_stateless/01271_show_privileges.reference\n@@ -103,6 +103,7 @@ SHOW NAMED COLLECTIONS SECRETS\t['SHOW NAMED COLLECTIONS SECRETS']\tNAMED_COLLECTI\n NAMED COLLECTION\t['NAMED COLLECTION USAGE','USE NAMED COLLECTION']\tNAMED_COLLECTION\tNAMED COLLECTION ADMIN\n NAMED COLLECTION ADMIN\t['NAMED COLLECTION CONTROL']\tNAMED_COLLECTION\tALL\n SET DEFINER\t[]\tUSER_NAME\tALL\n+TABLE ENGINE\t['TABLE ENGINE']\tTABLE_ENGINE\tALL\n SYSTEM SHUTDOWN\t['SYSTEM KILL','SHUTDOWN']\tGLOBAL\tSYSTEM\n SYSTEM DROP DNS CACHE\t['SYSTEM DROP DNS','DROP DNS CACHE','DROP DNS']\tGLOBAL\tSYSTEM DROP CACHE\n SYSTEM DROP CONNECTIONS CACHE\t['SYSTEM DROP CONNECTIONS CACHE','DROP CONNECTIONS CACHE']\tGLOBAL\tSYSTEM DROP CACHE\ndiff --git a/tests/queries/0_stateless/02232_allow_only_replicated_engine.sh b/tests/queries/0_stateless/02232_allow_only_replicated_engine.sh\nindex 193d5fdb6d55..791102b9cbd0 100755\n--- a/tests/queries/0_stateless/02232_allow_only_replicated_engine.sh\n+++ b/tests/queries/0_stateless/02232_allow_only_replicated_engine.sh\n@@ -9,6 +9,7 @@ ${CLICKHOUSE_CLIENT} -q \"create table mute_stylecheck (x UInt32) engine = Replic\n \n ${CLICKHOUSE_CLIENT} -q \"CREATE USER user_${CLICKHOUSE_DATABASE} settings database_replicated_allow_only_replicated_engine=1\"\n ${CLICKHOUSE_CLIENT} -q \"GRANT CREATE TABLE ON ${CLICKHOUSE_DATABASE}_db.* TO user_${CLICKHOUSE_DATABASE}\"\n+${CLICKHOUSE_CLIENT} -q \"GRANT TABLE ENGINE ON Memory, TABLE ENGINE ON MergeTree, TABLE ENGINE ON ReplicatedMergeTree TO user_${CLICKHOUSE_DATABASE}\"\n ${CLICKHOUSE_CLIENT} --allow_experimental_database_replicated=1 --query \"CREATE DATABASE ${CLICKHOUSE_DATABASE}_db engine = Replicated('/clickhouse/databases/${CLICKHOUSE_TEST_ZOOKEEPER_PREFIX}/${CLICKHOUSE_DATABASE}_db', '{shard}', '{replica}')\"\n ${CLICKHOUSE_CLIENT} --distributed_ddl_output_mode=none --user \"user_${CLICKHOUSE_DATABASE}\" --query \"CREATE TABLE ${CLICKHOUSE_DATABASE}_db.tab_memory (x UInt32) engine = Memory;\"\n ${CLICKHOUSE_CLIENT} --distributed_ddl_output_mode=none --user \"user_${CLICKHOUSE_DATABASE}\" -n --query \"CREATE TABLE ${CLICKHOUSE_DATABASE}_db.tab_mt (x UInt32) engine = MergeTree order by x;\" 2>&1 | grep -o \"Only tables with a Replicated engine\"\ndiff --git a/tests/queries/0_stateless/02514_database_replicated_no_arguments_for_rmt.sh b/tests/queries/0_stateless/02514_database_replicated_no_arguments_for_rmt.sh\nindex ee51640488e4..a050f7b00d73 100755\n--- a/tests/queries/0_stateless/02514_database_replicated_no_arguments_for_rmt.sh\n+++ b/tests/queries/0_stateless/02514_database_replicated_no_arguments_for_rmt.sh\n@@ -12,6 +12,7 @@ ${CLICKHOUSE_CLIENT} -q \"create table mute_stylecheck (x UInt32) engine = Replic\n \n ${CLICKHOUSE_CLIENT} -q \"CREATE USER user_${CLICKHOUSE_DATABASE} settings database_replicated_allow_replicated_engine_arguments=0\"\n ${CLICKHOUSE_CLIENT} -q \"GRANT CREATE TABLE ON ${CLICKHOUSE_DATABASE}_db.* TO user_${CLICKHOUSE_DATABASE}\"\n+${CLICKHOUSE_CLIENT} -q \"GRANT TABLE ENGINE ON ReplicatedMergeTree TO user_${CLICKHOUSE_DATABASE}\"\n ${CLICKHOUSE_CLIENT} --allow_experimental_database_replicated=1 --query \"CREATE DATABASE ${CLICKHOUSE_DATABASE}_db engine = Replicated('/clickhouse/databases/${CLICKHOUSE_TEST_ZOOKEEPER_PREFIX}/${CLICKHOUSE_DATABASE}_db', '{shard}', '{replica}')\"\n ${CLICKHOUSE_CLIENT} --distributed_ddl_output_mode=none --user \"user_${CLICKHOUSE_DATABASE}\" -n --query \"CREATE TABLE ${CLICKHOUSE_DATABASE}_db.tab_rmt_ok (x UInt32) engine = ReplicatedMergeTree order by x;\"\n ${CLICKHOUSE_CLIENT} --distributed_ddl_output_mode=none --user \"user_${CLICKHOUSE_DATABASE}\" -n --query \"CREATE TABLE ${CLICKHOUSE_DATABASE}_db.tab_rmt_fail (x UInt32) engine = ReplicatedMergeTree('/clickhouse/tables/$CLICKHOUSE_TEST_ZOOKEEPER_PREFIX/root/{shard}', '{replica}') order by x; -- { serverError 80 }\"\ndiff --git a/tests/queries/0_stateless/02561_temporary_table_grants.sh b/tests/queries/0_stateless/02561_temporary_table_grants.sh\nindex 33784f1d536f..6bd6383d3101 100755\n--- a/tests/queries/0_stateless/02561_temporary_table_grants.sh\n+++ b/tests/queries/0_stateless/02561_temporary_table_grants.sh\n@@ -13,21 +13,24 @@ $CLICKHOUSE_CLIENT --query \"CREATE USER $user IDENTIFIED WITH PLAINTEXT_PASSWORD\n $CLICKHOUSE_CLIENT --user $user --password hello --query \"CREATE TEMPORARY TABLE table_memory_02561(name String)\" 2>&1 | grep -F \"Not enough privileges. To execute this query, it's necessary to have the grant CREATE TEMPORARY TABLE\" > /dev/null && echo \"OK\"\n \n $CLICKHOUSE_CLIENT --query \"GRANT CREATE TEMPORARY TABLE ON *.* TO $user\"\n+$CLICKHOUSE_CLIENT --query \"GRANT TABLE ENGINE ON Memory TO $user\"\n+\n $CLICKHOUSE_CLIENT --user $user --password hello --query \"CREATE TEMPORARY TABLE table_memory_02561(name String)\"\n \n $CLICKHOUSE_CLIENT --user $user --password hello --query \"CREATE TEMPORARY TABLE table_merge_tree_02561(name String) ENGINE = MergeTree() ORDER BY name\" 2>&1 | grep -F \"Not enough privileges. To execute this query, it's necessary to have the grant CREATE ARBITRARY TEMPORARY TABLE\" > /dev/null && echo \"OK\"\n \n $CLICKHOUSE_CLIENT --query \"GRANT CREATE ARBITRARY TEMPORARY TABLE ON *.* TO $user\"\n+$CLICKHOUSE_CLIENT --query \"GRANT TABLE ENGINE ON MergeTree TO $user\"\n \n $CLICKHOUSE_CLIENT --user $user --password hello --query \"CREATE TEMPORARY TABLE table_merge_tree_02561(name String) ENGINE = MergeTree() ORDER BY name\"\n \n-$CLICKHOUSE_CLIENT --user $user --password hello --query \"CREATE TEMPORARY TABLE table_file_02561(name String) ENGINE = File(TabSeparated)\" 2>&1 | grep -F \"Not enough privileges. To execute this query, it's necessary to have the grant FILE\" > /dev/null && echo \"OK\"\n+$CLICKHOUSE_CLIENT --user $user --password hello --query \"CREATE TEMPORARY TABLE table_file_02561(name String) ENGINE = File(TabSeparated)\" 2>&1 | grep -F \"Not enough privileges. To execute this query, it's necessary to have the grant TABLE ENGINE ON File\" > /dev/null && echo \"OK\"\n \n $CLICKHOUSE_CLIENT --query \"GRANT FILE ON *.* TO $user\"\n \n $CLICKHOUSE_CLIENT --user $user --password hello --query \"CREATE TEMPORARY TABLE table_file_02561(name String) ENGINE = File(TabSeparated)\"\n \n-$CLICKHOUSE_CLIENT --user $user --password hello --query \"CREATE TEMPORARY TABLE table_url_02561(name String) ENGINE = URL('http://127.0.0.1:8123?query=select+12', 'RawBLOB')\" 2>&1 | grep -F \"Not enough privileges. To execute this query, it's necessary to have the grant URL\" > /dev/null && echo \"OK\"\n+$CLICKHOUSE_CLIENT --user $user --password hello --query \"CREATE TEMPORARY TABLE table_url_02561(name String) ENGINE = URL('http://127.0.0.1:8123?query=select+12', 'RawBLOB')\" 2>&1 | grep -F \"Not enough privileges. To execute this query, it's necessary to have the grant TABLE ENGINE ON URL\" > /dev/null && echo \"OK\"\n \n $CLICKHOUSE_CLIENT --query \"GRANT URL ON *.* TO $user\"\n \n",
  "problem_statement": "Ability to restrict allowed table engines\n**Use case**\r\n\r\nAs an admin of ClickHouse cluster I want to restrict creation of tables with particular table engines. In particular, I want to forbid usage of tables with Log engines because backup tools like https://github.com/AlexAkulov/clickhouse-backup do not support backuping data of such tables.\r\n\r\n**Describe the solution you'd like**\r\n\r\nA server setting with list of table engines that cannot be used.\r\n\n",
  "hints_text": "`set allowed_engines='MergeTree,ReplicatedMergeTree'`\r\n\r\n`CREATE TABLE tbl (key UInt64) Engine = Log;  -- throw exception` \n@alesapin, for cases when it's required to forbid one particular engine, it would be convenient to have `disallowed_engines` or `forbidden_engines`. Otherwise it will be required to specify very long list of supported engines and update it when upgrading ClickHouse versions. \r\n\nI thought about implementing that as privileges:\r\n\r\n```\r\nGRANT SET TABLE ENGINE ON * TO john; <-- grant user john an ability to use any table engine when creating tables\r\nREVOKE SET TABLE ENGINE ON Log FROM john; <-- prohibit user john to create tables with the table engine Log\r\n```\n@vitlibar Is it possible? How big this implementation will be?\n> @vitlibar Is it possible? How big this implementation will be?\r\n\r\nIt's possible of course. And thanks to @kssenii and her PR https://github.com/ClickHouse/ClickHouse/pull/46241, now it must not be difficult.\nIf my understanding is correct, SET is session-wise, so GRANT approach is better.\nI find it is easy to implement the approach of GRANT table engine, but there is an issue arising up. For existing users (not default) after the implementation, they have to get granted for the usage of their current table engine, which is not good since it is a change of existing user behavior. I am thinking of an approach of separation of table engines, some of them granted by default, others not. Still, the approach is not applicable to existing users since we cannot tell whether the user is created before or after the implementation. \nLet it be required for CREATE and ATTACH (only on table creation), but not checked on SELECT, DROP, etc...\n> Let it be required for CREATE and ATTACH (only on table creation), but not checked on SELECT, DROP, etc...\r\n\r\nOf course. It should be only for CREATE TABLE because ATTACH never checks any grants (because it's executed only internally on startup).\n> I find it is easy to implement the approach of GRANT table engine, but there is an issue arising up. For existing users (not default) after the implementation, they have to get granted for the usage of their current table engine, which is not good since it is a change of existing user behavior.\r\n\r\nThat's a difficult part. We can implement it anyway but it will be a breaking change. Or we can hide that new privilege type under a setting in the configuration file but it's unclear what should be its default value then.\n@alexey-milovidov Would you mind compare this with #55911? There is some overlap in terms of functionality. The difference is \"set is temporary, grant is durable\".\n@jsc0218, Your implementation will cover that old task completely.",
  "created_at": "2024-02-19T02:27:15Z"
}