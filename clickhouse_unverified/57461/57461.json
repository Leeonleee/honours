{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 57461,
  "instance_id": "ClickHouse__ClickHouse-57461",
  "issue_numbers": [
    "56405"
  ],
  "base_commit": "8c69c14d4a65fc67ceb8574b4bc380e460821c1d",
  "patch": "diff --git a/src/Processors/Transforms/buildPushingToViewsChain.cpp b/src/Processors/Transforms/buildPushingToViewsChain.cpp\nindex ea10b025e878..781a162d2bd3 100644\n--- a/src/Processors/Transforms/buildPushingToViewsChain.cpp\n+++ b/src/Processors/Transforms/buildPushingToViewsChain.cpp\n@@ -349,7 +349,7 @@ Chain buildPushingToViewsChain(\n             for (const auto & column : header)\n             {\n                 /// But skip columns which storage doesn't have.\n-                if (inner_table_columns.hasPhysical(column.name))\n+                if (inner_table_columns.hasNotAlias(column.name))\n                     insert_columns.emplace_back(column.name);\n             }\n \ndiff --git a/src/Storages/ColumnsDescription.cpp b/src/Storages/ColumnsDescription.cpp\nindex cf8f341f9ff4..10bdc05fbdcc 100644\n--- a/src/Storages/ColumnsDescription.cpp\n+++ b/src/Storages/ColumnsDescription.cpp\n@@ -679,6 +679,12 @@ bool ColumnsDescription::hasPhysical(const String & column_name) const\n         it->default_desc.kind != ColumnDefaultKind::Alias && it->default_desc.kind != ColumnDefaultKind::Ephemeral;\n }\n \n+bool ColumnsDescription::hasNotAlias(const String & column_name) const\n+{\n+    auto it = columns.get<1>().find(column_name);\n+    return it != columns.get<1>().end() && it->default_desc.kind != ColumnDefaultKind::Alias;\n+}\n+\n bool ColumnsDescription::hasAlias(const String & column_name) const\n {\n     auto it = columns.get<1>().find(column_name);\ndiff --git a/src/Storages/ColumnsDescription.h b/src/Storages/ColumnsDescription.h\nindex 688092f90da4..5ee5a7555931 100644\n--- a/src/Storages/ColumnsDescription.h\n+++ b/src/Storages/ColumnsDescription.h\n@@ -184,6 +184,7 @@ class ColumnsDescription : public IHints<>\n     Names getNamesOfPhysical() const;\n \n     bool hasPhysical(const String & column_name) const;\n+    bool hasNotAlias(const String & column_name) const;\n     bool hasAlias(const String & column_name) const;\n     bool hasColumnOrSubcolumn(GetColumnsOptions::Kind kind, const String & column_name) const;\n     bool hasColumnOrNested(GetColumnsOptions::Kind kind, const String & column_name) const;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02933_ephemeral_mv.reference b/tests/queries/0_stateless/02933_ephemeral_mv.reference\nnew file mode 100644\nindex 000000000000..a77853390d39\n--- /dev/null\n+++ b/tests/queries/0_stateless/02933_ephemeral_mv.reference\n@@ -0,0 +1,2 @@\n+3\t3\n+42\t42\ndiff --git a/tests/queries/0_stateless/02933_ephemeral_mv.sql b/tests/queries/0_stateless/02933_ephemeral_mv.sql\nnew file mode 100644\nindex 000000000000..d0725d894f06\n--- /dev/null\n+++ b/tests/queries/0_stateless/02933_ephemeral_mv.sql\n@@ -0,0 +1,30 @@\n+\n+CREATE TABLE raw\n+(\n+  name String,\n+  num String\n+) ENGINE = MergeTree\n+ORDER BY (name);\n+\n+CREATE TABLE parsed_eph\n+(\n+  name String,\n+  num_ephemeral UInt32 EPHEMERAL,\n+  num UInt32 MATERIALIZED num_ephemeral,\n+) ENGINE = MergeTree\n+ORDER BY (name);\n+\n+CREATE MATERIALIZED VIEW parse_mv_eph\n+TO parsed_eph\n+AS\n+SELECT\n+  name,\n+  toUInt32(num) as num_ephemeral\n+FROM raw;\n+\n+INSERT INTO raw VALUES ('3', '3'), ('42', '42');\n+SELECT name, num FROM parsed_eph;\n+\n+DROP VIEW parse_mv_eph;\n+DROP TABLE parsed_eph;\n+DROP TABLE raw;\n",
  "problem_statement": "Default value of EPHEMERAL column written by materialized view instead of actual value\n\r\n```sql\r\nCREATE TABLE raw\r\n(\r\n  name String,\r\n  ts String\r\n) ENGINE = MergeTree\r\nORDER BY (name, ts);\r\n\r\nCREATE TABLE parsed\r\n(\r\n  name String,\r\n  ts_ephemeral Nullable(DateTime64(9)), -- no EPHEMERAL\r\n  ts DateTime64(9, 'UTC') MATERIALIZED if(ts_ephemeral IS NULL, date(0), ts_ephemeral),\r\n) ENGINE = MergeTree \r\nORDER BY (name, ts);\r\n\r\nCREATE TABLE parsed_eph\r\n(\r\n  name String,\r\n  ts_ephemeral Nullable(DateTime64(9)) EPHEMERAL, -- with EPHEMERAL\r\n  ts DateTime64(9, 'UTC') MATERIALIZED if(ts_ephemeral IS NULL, date(0), ts_ephemeral),\r\n) ENGINE = MergeTree \r\nORDER BY (name, ts);\r\n\r\nCREATE MATERIALIZED VIEW parse_mv_eph\r\nTO parsed_eph\r\nAS\r\nSELECT\r\n  name,\r\n  toDateTime64OrNull(ts, 9 ,'UTC') as ts_ephemeral\r\nFROM raw;\r\n\r\nCREATE MATERIALIZED VIEW parse_mv\r\nTO parsed\r\nAS\r\nSELECT\r\n  name,\r\n  toDateTime64OrNull(ts, 9 ,'UTC') as ts_ephemeral\r\nFROM raw;\r\n\r\nINSERT INTO raw VALUES ('abc', '1451611580')\r\n\r\nSELECT 'input_parsed';\r\nSELECT\r\n  name,\r\n  toDateTime64OrNull(ts, 9 ,'UTC') as ts_ephemeral\r\nFROM raw;\r\n\r\nSELECT 'parsed';\r\nSELECT name, ts FROM parsed;\r\n\r\nSELECT 'parsed_eph';\r\nSELECT name, ts FROM parsed_eph;\r\n```\r\n\r\n```\r\ninput_parsed\r\nabc\t2016-01-01 01:26:20.000000000\r\nparsed\r\nabc\t2016-01-01 01:26:20.000000000\r\nparsed_eph\r\nabc\t1970-01-01 00:00:00.000000000\r\n```\r\n\r\nhttps://fiddle.clickhouse.com/0f10a874-8f3f-464a-a21a-5bf39d8d786a\n",
  "hints_text": "",
  "created_at": "2023-12-04T07:02:06Z",
  "modified_files": [
    "src/Processors/Transforms/buildPushingToViewsChain.cpp",
    "src/Storages/ColumnsDescription.cpp",
    "src/Storages/ColumnsDescription.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02933_ephemeral_mv.reference",
    "b/tests/queries/0_stateless/02933_ephemeral_mv.sql"
  ]
}