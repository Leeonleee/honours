You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Per-column compression block size
> (you don't have to strictly follow this form)

**Use case**

When table has a big string column and we want to explicitly set a big compression block size for that column.

**Describe the solution you'd like**

```
CREATE TABLE t
(
        ...
        big_column String CODEC(ZSTD(1)) COMPRESSION BLOCK (min_block_size, max_block_size)
)
ENGINE = MergeTree ORDER BY tuple();
```

**Describe alternatives you've considered**

Tuning `min_compress_block_size` and `max_compress_block_size` but it's hard to get the optimal compression ratio for the big columns without using big compression block size. E.g.


```
CREATE TABLE t
(
        ... /*all small columns*/
        big_column String CODEC(ZSTD(1)) COMPRESSION BLOCK (min_block_size, max_block_size)
)
ENGINE = MergeTree ORDER BY tuple() SETTINGS min_compress_block_size = 67108864, max _compress_block_size = 67108864;
```
--> good compression ratio, but reading all columns costs too much memory.

```
CREATE TABLE t
(
        ... /*all small columns*/
        big_column String CODEC(ZSTD(1)) COMPRESSION BLOCK (min_block_size, max_block_size)
)
ENGINE = MergeTree ORDER BY tuple() SETTINGS min_compress_block_size = 16384, max _compress_block_size = 67108864;
```
---> compression ratio reduced by 30%

**Additional context**

[Greenplum](https://greenplum.org/10-examples-of-compression-enablement-in-greenplum/) can do it as:

```
CREATE TABLE t 
(
        c1 int ENCODING (compresstype=zstd),
        c2 char ENCODING (compresstype=zlib, blocksize=65536),
        c3 char
) WITH (orientation=column);
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
