{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 67146,
  "instance_id": "ClickHouse__ClickHouse-67146",
  "issue_numbers": [
    "66565"
  ],
  "base_commit": "3f598f6825f9ad7bc437f2f40790eb33b45f9717",
  "patch": "diff --git a/src/Storages/StorageMerge.cpp b/src/Storages/StorageMerge.cpp\nindex f5bc183931f7..9962da3d6deb 100644\n--- a/src/Storages/StorageMerge.cpp\n+++ b/src/Storages/StorageMerge.cpp\n@@ -369,6 +369,14 @@ void StorageMerge::read(\n     /// What will be result structure depending on query processed stage in source tables?\n     Block common_header = getHeaderForProcessingStage(column_names, storage_snapshot, query_info, local_context, processed_stage);\n \n+    if (local_context->getSettingsRef().allow_experimental_analyzer && processed_stage == QueryProcessingStage::Complete)\n+    {\n+        /// Remove constants.\n+        /// For StorageDistributed some functions like `hostName` that are constants only for local queries.\n+        for (auto & column : common_header)\n+            column.column = column.column->convertToFullColumnIfConst();\n+    }\n+\n     auto step = std::make_unique<ReadFromMerge>(\n         column_names,\n         query_info,\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02563_analyzer_merge.reference b/tests/queries/0_stateless/02563_analyzer_merge.reference\nindex 8be01c88d6ff..2b3cc2d5dfba 100644\n--- a/tests/queries/0_stateless/02563_analyzer_merge.reference\n+++ b/tests/queries/0_stateless/02563_analyzer_merge.reference\n@@ -1,2 +1,3 @@\n 0\tValue_0\t02563_db\ttest_merge_table_1\n 1\tValue_1\t02563_db\ttest_merge_table_2\n+91138316-5127-45ac-9c25-4ad8779777b4\t160\ndiff --git a/tests/queries/0_stateless/02563_analyzer_merge.sql b/tests/queries/0_stateless/02563_analyzer_merge.sql\nindex c90f7dcb2a55..217fb7019c4c 100644\n--- a/tests/queries/0_stateless/02563_analyzer_merge.sql\n+++ b/tests/queries/0_stateless/02563_analyzer_merge.sql\n@@ -35,4 +35,49 @@ SELECT id, value, _database, _table FROM 02563_db.test_merge_table ORDER BY id;\n DROP TABLE 02563_db.test_merge_table;\n DROP TABLE 02563_db.test_merge_table_1;\n DROP TABLE 02563_db.test_merge_table_2;\n+\n+CREATE TABLE 02563_db.t_1\n+(\n+    timestamp DateTime64(9),\n+    a String,\n+    b String\n+)\n+ENGINE = MergeTree\n+PARTITION BY formatDateTime(toStartOfMinute(timestamp), '%Y%m%d%H', 'UTC')\n+ORDER BY (timestamp, a, b);\n+\n+CREATE TABLE 02563_db.dist_t_1 (timestamp DateTime64(9), a String, b String) ENGINE = Distributed('test_shard_localhost', '02563_db', 't_1');\n+\n+CREATE TABLE 02563_db.m ENGINE = Merge('02563_db', '^dist_');\n+\n+INSERT INTO 02563_db.t_1 (timestamp, a, b)\n+select\n+    addMinutes(toDateTime64('2024-07-13 22:00:00', 9, 'UTC'), number),\n+    randomString(5),\n+    randomString(5)\n+from numbers(30);\n+\n+INSERT INTO 02563_db.t_1 (timestamp, a, b)\n+select\n+    addMinutes(toDateTime64('2024-07-13 23:00:00', 9, 'UTC'), number),\n+    randomString(5),\n+    randomString(5)\n+from numbers(30);\n+\n+INSERT INTO 02563_db.t_1 (timestamp, a, b)\n+select\n+    addMinutes(toDateTime64('2024-07-14 00:00:00', 9, 'UTC'), number),\n+    randomString(5),\n+    randomString(5)\n+from numbers(100);\n+\n+\n+SELECT '91138316-5127-45ac-9c25-4ad8779777b4',\n+  count()\n+FROM 02563_db.m;\n+\n+DROP TABLE 02563_db.t_1;\n+DROP TABLE 02563_db.dist_t_1;\n+DROP TABLE 02563_db.m;\n+\n DROP DATABASE 02563_db;\n",
  "problem_statement": "\"exception\": \"Code: 44\" for merge engine after upgrade to 24.6.2.17\nwhen i run below select in 24.3.5.46 after upgrade, it is failed\r\n\r\n```\r\nSELECT '91138316-5127-45ac-9c25-4ad8779777b4',\r\n  count()\r\nFROM test.m;\r\n```\r\n\"exception\": \"Code: 44. DB::Exception: Cannot convert column 'ee5d14e8-0347-48f7-8fda-d657a3af5605' because it is non constant in source stream but must be constant in result. (ILLEGAL_COLUMN) (version 24.6.2.17 (official build))\"\r\n\r\n**How to reproduce**\r\n```\r\nselect version();\r\n\r\nCREATE DATABASE test;\r\n\r\nCREATE TABLE test.t_1\r\n(\r\n    timestamp DateTime64(9),\r\n    a String,\r\n    b String\r\n)\r\nENGINE = MergeTree\r\nPARTITION BY formatDateTime(toStartOfMinute(timestamp), '%Y%m%d%H', 'UTC')\r\nORDER BY (timestamp, a, b);\r\n\r\n\r\nCREATE TABLE test.dist_t_1 (timestamp DateTime64(9), a String, b String) ENGINE = Distributed('default', 'test', 't_1');\r\n\r\n\r\nCREATE TABLE test.m ENGINE = Merge('test', '^dist_');\r\n\r\nINSERT INTO test.t_1 (timestamp, a, b)\r\nselect\r\n    addMinutes(toDateTime64('2024-07-13 22:00:00', 9, 'UTC'), number),\r\n    randomString(5),\r\n    randomString(5)\r\nfrom numbers(30);\r\n\r\nINSERT INTO test.t_1 (timestamp, a, b)\r\nselect\r\n    addMinutes(toDateTime64('2024-07-13 23:00:00', 9, 'UTC'), number),\r\n    randomString(5),\r\n    randomString(5)\r\nfrom numbers(30);\r\n\r\nINSERT INTO test.t_1 (timestamp, a, b)\r\nselect\r\n    addMinutes(toDateTime64('2024-07-14 00:00:00', 9, 'UTC'), number),\r\n    randomString(5),\r\n    randomString(5)\r\nfrom numbers(100);\r\n\r\n\r\nSELECT '91138316-5127-45ac-9c25-4ad8779777b4',\r\n  count()\r\nFROM test.m;\r\n```\r\n\r\nlook it: https://fiddle.clickhouse.com/be360d1c-47d0-4a5b-998c-c197edbf5b9f\r\n\r\nbut when have many leaf table, it's ok! https://fiddle.clickhouse.com/1c69845c-579f-4e3c-8e82-536613f923df\r\n\r\n\n",
  "hints_text": "The issue seems to be in new analyzer, as it works with old analyser:\r\nhttps://fiddle.clickhouse.com/c8e0852e-36c2-4fe6-ae90-a4ebbcb6fad4\r\n```\r\nSELECT '91138316-5127-45ac-9c25-4ad8779777b4',\r\n  count()\r\nFROM test.m SETTINGS allow_experimental_analyzer=0;\r\n```\nit works with settings allow_experimental_analyzer=0",
  "created_at": "2024-07-25T17:31:34Z"
}