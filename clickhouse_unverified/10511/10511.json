{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 10511,
  "instance_id": "ClickHouse__ClickHouse-10511",
  "issue_numbers": [
    "8973"
  ],
  "base_commit": "d1464a441f0fc49114353c51a5cd00031dcd0397",
  "patch": "diff --git a/src/Core/DecimalFunctions.h b/src/Core/DecimalFunctions.h\nindex f098f2427eb6..d8fdccf8628e 100644\n--- a/src/Core/DecimalFunctions.h\n+++ b/src/Core/DecimalFunctions.h\n@@ -2,15 +2,20 @@\n // Moved Decimal-related functions out from Core/Types.h to reduce compilation time.\n \n #include <Core/Types.h>\n-#include <Common/intExp.h>\n+#include <Common/Exception.h>\n+#include <common/arithmeticOverflow.h>\n \n #include <limits>\n \n-class DateLUTImpl;\n \n namespace DB\n {\n \n+namespace ErrorCodes\n+{\n+    extern const int DECIMAL_OVERFLOW;\n+}\n+\n namespace DecimalUtils\n {\n \n@@ -37,22 +42,26 @@ struct DecimalComponents\n };\n \n /** Make a decimal value from whole and fractional components with given scale multiplier.\n- * where scale_multiplier = scaleMultiplier<T>(scale)\n- * this is to reduce number of calls to scaleMultiplier when scale is known.\n- *\n- * Sign of `whole` controls sign of result: negative whole => negative result, positive whole => positive result.\n- * Sign of `fractional` is expected to be positive, otherwise result is undefined.\n- * If `scale` is to big (scale > maxPrecision<DecimalType::NativeType>), result is undefined.\n- */\n+  * where scale_multiplier = scaleMultiplier<T>(scale)\n+  * this is to reduce number of calls to scaleMultiplier when scale is known.\n+  *\n+  * Sign of `whole` controls sign of result: negative whole => negative result, positive whole => positive result.\n+  * Sign of `fractional` is expected to be positive, otherwise result is undefined.\n+  * If `scale` is to big (scale > maxPrecision<DecimalType::NativeType>), result is undefined.\n+  */\n template <typename DecimalType>\n DecimalType decimalFromComponentsWithMultiplier(const typename DecimalType::NativeType & whole,\n-                                                 const typename DecimalType::NativeType & fractional,\n-                                                 typename DecimalType::NativeType scale_multiplier)\n+                                                const typename DecimalType::NativeType & fractional,\n+                                                typename DecimalType::NativeType scale_multiplier)\n {\n     using T = typename DecimalType::NativeType;\n     const auto fractional_sign = whole < 0 ? -1 : 1;\n \n-    const T value = whole * scale_multiplier + fractional_sign * (fractional % scale_multiplier);\n+    T whole_scaled = 0;\n+    if (common::mulOverflow(whole, scale_multiplier, whole_scaled))\n+        throw Exception(\"Decimal math overflow\", ErrorCodes::DECIMAL_OVERFLOW);\n+\n+    const T value = whole_scaled + fractional_sign * (fractional % scale_multiplier);\n     return DecimalType(value);\n }\n \n@@ -61,7 +70,8 @@ DecimalType decimalFromComponentsWithMultiplier(const typename DecimalType::Nati\n  * @see `decimalFromComponentsWithMultiplier` for details.\n  */\n template <typename DecimalType>\n-DecimalType decimalFromComponents(const typename DecimalType::NativeType & whole, const typename DecimalType::NativeType & fractional, UInt32 scale)\n+DecimalType decimalFromComponents(\n+    const typename DecimalType::NativeType & whole, const typename DecimalType::NativeType & fractional, UInt32 scale)\n {\n     using T = typename DecimalType::NativeType;\n \n@@ -72,7 +82,8 @@ DecimalType decimalFromComponents(const typename DecimalType::NativeType & whole\n  * @see `decimalFromComponentsWithMultiplier` for details.\n  */\n template <typename DecimalType>\n-DecimalType decimalFromComponents(const DecimalComponents<typename DecimalType::NativeType> & components, UInt32 scale)\n+DecimalType decimalFromComponents(\n+    const DecimalComponents<typename DecimalType::NativeType> & components, UInt32 scale)\n {\n     return decimalFromComponents<DecimalType>(components.whole, components.fractional, scale);\n }\n@@ -81,7 +92,8 @@ DecimalType decimalFromComponents(const DecimalComponents<typename DecimalType::\n  * This is an optimization to reduce number of calls to scaleMultiplier on known scale.\n  */\n template <typename DecimalType>\n-DecimalComponents<typename DecimalType::NativeType> splitWithScaleMultiplier(const DecimalType & decimal, typename DecimalType::NativeType scale_multiplier)\n+DecimalComponents<typename DecimalType::NativeType> splitWithScaleMultiplier(\n+    const DecimalType & decimal, typename DecimalType::NativeType scale_multiplier)\n {\n     using T = typename DecimalType::NativeType;\n     const auto whole = decimal.value / scale_multiplier;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01259_datetime64_ubsan.reference b/tests/queries/0_stateless/01259_datetime64_ubsan.reference\nnew file mode 100644\nindex 000000000000..f04c001f3f7f\n--- /dev/null\n+++ b/tests/queries/0_stateless/01259_datetime64_ubsan.reference\n@@ -0,0 +1,1 @@\n+29\ndiff --git a/tests/queries/0_stateless/01259_datetime64_ubsan.sql b/tests/queries/0_stateless/01259_datetime64_ubsan.sql\nnew file mode 100644\nindex 000000000000..3cba78c713f7\n--- /dev/null\n+++ b/tests/queries/0_stateless/01259_datetime64_ubsan.sql\n@@ -0,0 +1,2 @@\n+select now64(10); -- { serverError 407 }\n+select length(toString(now64(9)));\n",
  "problem_statement": "UBSan report from fuzz test: signed integer overflow.\n**How to reproduce**\r\n```select now64(10)```\r\n\r\n```\r\n../dbms/src/Core/DecimalFunctions.h:55:27: runtime error: signed integer overflow: 1580737114 * 1000000000000000000 cannot be represented in type 'long'\r\n    #0 0x15e406de in DB::Decimal<long> DB::DecimalUtils::decimalFromComponentsWithMultiplier<DB::Decimal<long> >(DB::Decimal<long>::NativeType const&, DB::Decimal<long>::NativeType const&, DB::Decimal<long>::NativeType) (/usr/bin/clickhouse+0x15e406de)\r\n    #1 0x1882dd7d  (/usr/bin/clickhouse+0x1882dd7d)\r\n    #2 0x1882eb4b in DB::FunctionNow64::executeImpl(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long) (/usr/bin/clickhouse+0x1882eb4b)\r\n    #3 0x15fee3ce in DB::ExecutableFunctionAdaptor::execute(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long, bool) (/usr/bin/clickhouse+0x15fee3ce)\r\n    #4 0x1e352085 in DB::ExpressionAction::prepare(DB::Block&, DB::Settings const&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&) /build/obj-x86_64-linux-gnu/../dbms/src/Interpreters/ExpressionActions.cpp:219:27\r\n    #5 0x1e358bdd in DB::ExpressionActions::addImpl(DB::ExpressionAction, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&) /build/obj-x86_64-linux-gnu/../dbms/src/Interpreters/ExpressionActions.cpp:702:12\r\n    #6 0x1e3586ac in DB::ExpressionActions::add(DB::ExpressionAction const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&) /build/obj-x86_64-linux-gnu/../dbms/src/Interpreters/ExpressionActions.cpp:665:5\r\n    #7 0x1e337067 in DB::ScopeStack::addAction(DB::ExpressionAction const&) /build/obj-x86_64-linux-gnu/../dbms/src/Interpreters/ActionsVisitor.cpp:258:27\r\n    #8 0x1e33b2dd in DB::ActionsMatcher::Data::addAction(DB::ExpressionAction const&) /build/obj-x86_64-linux-gnu/../dbms/src/Interpreters/ActionsVisitor.h:106:27\r\n    #9 0x1e33b2dd in DB::ActionsMatcher::visit(DB::ASTFunction const&, std::__1::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) /build/obj-x86_64-linux-gnu/../dbms/src/Interpreters/ActionsVisitor.cpp:598\r\n    #10 0x1e323acd in DB::InDepthNodeVisitor<DB::ActionsMatcher, true, std::__1::shared_ptr<DB::IAST> const>::visit(std::__1::shared_ptr<DB::IAST> const&) /build/obj-x86_64-linux-gnu/../dbms/src/Interpreters/InDepthNodeVisitor.h:32:9\r\n    #11 0x1e32f883 in DB::InDepthNodeVisitor<DB::ActionsMatcher, true, std::__1::shared_ptr<DB::IAST> const>::visitChildren(std::__1::shared_ptr<DB::IAST> const&) /build/obj-x86_64-linux-gnu/../dbms/src/Interpreters/InDepthNodeVisitor.h:47:17\r\n    #12 0x1e323ad8 in DB::InDepthNodeVisitor<DB::ActionsMatcher, true, std::__1::shared_ptr<DB::IAST> const>::visit(std::__1::shared_ptr<DB::IAST> const&) /build/obj-x86_64-linux-gnu/../dbms/src/Interpreters/InDepthNodeVisitor.h:35:13\r\n    #13 0x1e31ae17 in DB::ExpressionAnalyzer::getRootActions(std::__1::shared_ptr<DB::IAST> const&, bool, std::__1::shared_ptr<DB::ExpressionActions>&, bool) /build/obj-x86_64-linux-gnu/../dbms/src/Interpreters/ExpressionAnalyzer.cpp:344:48\r\n    #14 0x1e31ed7e in DB::SelectQueryExpressionAnalyzer::appendSelect(DB::ExpressionActionsChain&, bool) /build/obj-x86_64-linux-gnu/../dbms/src/Interpreters/ExpressionAnalyzer.cpp:730:5\r\n    #15 0x1e3dd202 in DB::InterpreterSelectQuery::analyzeExpressions(DB::ASTSelectQuery const&, DB::SelectQueryExpressionAnalyzer&, DB::QueryProcessingStage::Enum, DB::QueryProcessingStage::Enum, DB::Context const&, std::__1::shared_ptr<DB::IStorage> const&, bool, std::__1::shared_ptr<DB::FilterInfo> const&, DB::Block const&) /build/obj-x86_64-linux-gnu/../dbms/src/Interpreters/InterpreterSelectQuery.cpp:801:24\r\n    #16 0x1e3da165 in DB::InterpreterSelectQuery::getSampleBlockImpl() /build/obj-x86_64-linux-gnu/../dbms/src/Interpreters/InterpreterSelectQuery.cpp:549:23\r\n    #17 0x1e3d63b9 in DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&)::$_1::operator()() const /build/obj-x86_64-linux-gnu/../dbms/src/Interpreters/InterpreterSelectQuery.cpp:400:25\r\n    #18 0x1e3d0a57 in DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) /build/obj-x86_64-linux-gnu/../dbms/src/Interpreters/InterpreterSelectQuery.cpp:403:5\r\n    #19 0x1e3cf8b7 in DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) /build/obj-x86_64-linux-gnu/../dbms/src/Interpreters/InterpreterSelectQuery.cpp:169:7\r\n    #20 0x1e6ff134 in std::__1::__unique_if<DB::InterpreterSelectQuery>::__unique_single std::__1::make_unique<DB::InterpreterSelectQuery, std::__1::shared_ptr<DB::IAST>&, DB::Context&, DB::SelectQueryOptions&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&>(std::__1::shared_ptr<DB::IAST>&, DB::Context&, DB::SelectQueryOptions&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/memory:3028:32\r\n    #21 0x1e6fbb24 in DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) /build/obj-x86_64-linux-gnu/../dbms/src/Interpreters/InterpreterSelectWithUnionQuery.cpp:89:42\r\n    #22 0x1e37eb6c in std::__1::__unique_if<DB::InterpreterSelectWithUnionQuery>::__unique_single std::__1::make_unique<DB::InterpreterSelectWithUnionQuery, std::__1::shared_ptr<DB::IAST>&, DB::Context&, DB::SelectQueryOptions>(std::__1::shared_ptr<DB::IAST>&, DB::Context&, DB::SelectQueryOptions&&) /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/memory:3028:32\r\n    #23 0x1e37c6e5 in DB::InterpreterFactory::get(std::__1::shared_ptr<DB::IAST>&, DB::Context&, DB::QueryProcessingStage::Enum) /build/obj-x86_64-linux-gnu/../dbms/src/Interpreters/InterpreterFactory.cpp:90:16\r\n    #24 0x1eb46155 in DB::executeQueryImpl(char const*, char const*, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool, DB::ReadBuffer*, bool) /build/obj-x86_64-linux-gnu/../dbms/src/Interpreters/executeQuery.cpp:309:28\r\n    #25 0x1eb4537f in DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool, bool) /build/obj-x86_64-linux-gnu/../dbms/src/Interpreters/executeQuery.cpp:574:30\r\n    #26 0x15771927 in DB::TCPHandler::runImpl() /build/obj-x86_64-linux-gnu/../dbms/programs/server/TCPHandler.cpp:248:24\r\n    #27 0x15786dc9 in DB::TCPHandler::run() /build/obj-x86_64-linux-gnu/../dbms/programs/server/TCPHandler.cpp:1222:9\r\n    #28 0x1fb36e79 in Poco::Net::TCPServerConnection::start() /build/obj-x86_64-linux-gnu/../contrib/poco/Net/src/TCPServerConnection.cpp:43:3\r\n    #29 0x1fb37d1a in Poco::Net::TCPServerDispatcher::run() /build/obj-x86_64-linux-gnu/../contrib/poco/Net/src/TCPServerDispatcher.cpp:114:20\r\n    #30 0x20b97d12 in Poco::PooledThread::run() /build/obj-x86_64-linux-gnu/../contrib/poco/Foundation/src/ThreadPool.cpp:214:14\r\n    #31 0x20b927b6 in Poco::ThreadImpl::runnableEntry(void*) /build/obj-x86_64-linux-gnu/../contrib/poco/Foundation/src/Thread_STD.cpp:139:27\r\n    #32 0x20b950e1 in decltype(std::__1::forward<void* (*)(void*)>(fp)(std::__1::forward<Poco::ThreadImpl*>(fp0))) std::__1::__invoke<void* (*)(void*), Poco::ThreadImpl*>(void* (*&&)(void*), Poco::ThreadImpl*&&) /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/type_traits:3539:1\r\n    #33 0x20b950e1 in void std::__1::__thread_execute<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void* (*)(void*), Poco::ThreadImpl*, 2ul>(std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void* (*)(void*), Poco::ThreadImpl*>&, std::__1::__tuple_indices<2ul>) /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/thread:273\r\n    #34 0x20b950e1 in void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void* (*)(void*), Poco::ThreadImpl*> >(void*) /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/thread:284\r\n    #35 0x7f790fef26da in start_thread (/lib/x86_64-linux-gnu/libpthread.so.0+0x76da)\r\n    #36 0x7f790f80f88e in clone (/lib/x86_64-linux-gnu/libc.so.6+0x12188e)\r\n```\r\n\r\n\r\n\n",
  "hints_text": "Similar to https://github.com/ClickHouse/ClickHouse/issues/7540",
  "created_at": "2020-04-26T14:58:51Z"
}