{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 9235,
  "instance_id": "ClickHouse__ClickHouse-9235",
  "issue_numbers": [
    "9230"
  ],
  "base_commit": "2f12f636cb6be049e90596ed95b6d54f30df966d",
  "patch": "diff --git a/dbms/src/Interpreters/ExpressionAnalyzer.cpp b/dbms/src/Interpreters/ExpressionAnalyzer.cpp\nindex f131afb86c6d..1f06fc42a0f1 100644\n--- a/dbms/src/Interpreters/ExpressionAnalyzer.cpp\n+++ b/dbms/src/Interpreters/ExpressionAnalyzer.cpp\n@@ -294,7 +294,7 @@ void SelectQueryExpressionAnalyzer::tryMakeSetForIndexFromSubquery(const ASTPtr\n         return;\n     }\n \n-    auto interpreter_subquery = interpretSubquery(subquery_or_table_name, context, subquery_depth + 1, {});\n+    auto interpreter_subquery = interpretSubquery(subquery_or_table_name, context, {}, query_options);\n     BlockIO res = interpreter_subquery->execute();\n \n     SetPtr set = std::make_shared<Set>(settings.size_limits_for_set, true);\n@@ -583,7 +583,7 @@ void SelectQueryExpressionAnalyzer::makeSubqueryForJoin(const ASTTablesInSelectQ\n     for (auto & pr : required_columns_with_aliases)\n         original_columns.push_back(pr.first);\n \n-    auto interpreter = interpretSubquery(join_element.table_expression, context, subquery_depth, original_columns);\n+    auto interpreter = interpretSubquery(join_element.table_expression, context, original_columns, query_options);\n \n     subquery_for_set.makeSource(interpreter, std::move(required_columns_with_aliases));\n }\ndiff --git a/dbms/src/Interpreters/ExpressionAnalyzer.h b/dbms/src/Interpreters/ExpressionAnalyzer.h\nindex f262132c002e..ac48bfbd5cd5 100644\n--- a/dbms/src/Interpreters/ExpressionAnalyzer.h\n+++ b/dbms/src/Interpreters/ExpressionAnalyzer.h\n@@ -228,11 +228,12 @@ class SelectQueryExpressionAnalyzer : public ExpressionAnalyzer\n         const SyntaxAnalyzerResultPtr & syntax_analyzer_result_,\n         const Context & context_,\n         const NameSet & required_result_columns_ = {},\n-        size_t subquery_depth_ = 0,\n-        bool do_global_ = false)\n-    :   ExpressionAnalyzer(query_, syntax_analyzer_result_, context_, subquery_depth_, do_global_)\n-    ,   required_result_columns(required_result_columns_)\n-    {}\n+        bool do_global_ = false,\n+        const SelectQueryOptions & options_ = {})\n+    :   ExpressionAnalyzer(query_, syntax_analyzer_result_, context_, options_.subquery_depth, do_global_)\n+    ,   required_result_columns(required_result_columns_), query_options(options_)\n+    {\n+    }\n \n     /// Does the expression have aggregate functions or a GROUP BY or HAVING section.\n     bool hasAggregation() const { return has_aggregation; }\n@@ -258,6 +259,7 @@ class SelectQueryExpressionAnalyzer : public ExpressionAnalyzer\n private:\n     /// If non-empty, ignore all expressions not from this list.\n     NameSet required_result_columns;\n+    SelectQueryOptions query_options;\n \n     /**\n       * Create Set from a subquery or a table expression in the query. The created set is suitable for using the index.\ndiff --git a/dbms/src/Interpreters/InterpreterExplainQuery.cpp b/dbms/src/Interpreters/InterpreterExplainQuery.cpp\nindex 0a158a2b9bc1..fd97841a55d2 100644\n--- a/dbms/src/Interpreters/InterpreterExplainQuery.cpp\n+++ b/dbms/src/Interpreters/InterpreterExplainQuery.cpp\n@@ -53,7 +53,8 @@ BlockInputStreamPtr InterpreterExplainQuery::executeImpl()\n     else if (ast.getKind() == ASTExplainQuery::AnalyzedSyntax)\n     {\n         InterpreterSelectWithUnionQuery interpreter(ast.children.at(0), context,\n-                                                    SelectQueryOptions(QueryProcessingStage::FetchColumns).analyze().modify());\n+            SelectQueryOptions(QueryProcessingStage::FetchColumns).analyze().modify());\n+\n         interpreter.getQuery()->format(IAST::FormatSettings(ss, false));\n     }\n \ndiff --git a/dbms/src/Interpreters/InterpreterSelectQuery.cpp b/dbms/src/Interpreters/InterpreterSelectQuery.cpp\nindex c100ef1e0fa5..7180794a5edd 100644\n--- a/dbms/src/Interpreters/InterpreterSelectQuery.cpp\n+++ b/dbms/src/Interpreters/InterpreterSelectQuery.cpp\n@@ -324,7 +324,7 @@ InterpreterSelectQuery::InterpreterSelectQuery(\n         query_analyzer = std::make_unique<SelectQueryExpressionAnalyzer>(\n                 query_ptr, syntax_analyzer_result, *context,\n                 NameSet(required_result_column_names.begin(), required_result_column_names.end()),\n-                options.subquery_depth, !options.only_analyze);\n+                !options.only_analyze, options);\n \n         if (!options.only_analyze)\n         {\ndiff --git a/dbms/src/Interpreters/interpretSubquery.cpp b/dbms/src/Interpreters/interpretSubquery.cpp\nindex e06d7f159ac9..aed4c23b4ff3 100644\n--- a/dbms/src/Interpreters/interpretSubquery.cpp\n+++ b/dbms/src/Interpreters/interpretSubquery.cpp\n@@ -18,6 +18,13 @@ namespace DB\n \n std::shared_ptr<InterpreterSelectWithUnionQuery> interpretSubquery(\n     const ASTPtr & table_expression, const Context & context, size_t subquery_depth, const Names & required_source_columns)\n+{\n+    auto subquery_options = SelectQueryOptions(QueryProcessingStage::Complete, subquery_depth);\n+    return interpretSubquery(table_expression, context, required_source_columns, subquery_options);\n+}\n+\n+std::shared_ptr<InterpreterSelectWithUnionQuery> interpretSubquery(\n+    const ASTPtr & table_expression, const Context & context, const Names & required_source_columns, const SelectQueryOptions & options)\n {\n     if (auto * expr = table_expression->as<ASTTableExpression>())\n     {\n@@ -29,7 +36,7 @@ std::shared_ptr<InterpreterSelectWithUnionQuery> interpretSubquery(\n         else if (expr->database_and_table_name)\n             table = expr->database_and_table_name;\n \n-        return interpretSubquery(table, context, subquery_depth, required_source_columns);\n+        return interpretSubquery(table, context, required_source_columns, options);\n     }\n \n     /// Subquery or table name. The name of the table is similar to the subquery `SELECT * FROM t`.\n@@ -55,7 +62,7 @@ std::shared_ptr<InterpreterSelectWithUnionQuery> interpretSubquery(\n     subquery_settings.extremes = 0;\n     subquery_context.setSettings(subquery_settings);\n \n-    auto subquery_options = SelectQueryOptions(QueryProcessingStage::Complete, subquery_depth).subquery();\n+    auto subquery_options = options.subquery();\n \n     ASTPtr query;\n     if (table || function)\ndiff --git a/dbms/src/Interpreters/interpretSubquery.h b/dbms/src/Interpreters/interpretSubquery.h\nindex 2af72eea6a90..2aee6ffd81a8 100644\n--- a/dbms/src/Interpreters/interpretSubquery.h\n+++ b/dbms/src/Interpreters/interpretSubquery.h\n@@ -11,4 +11,7 @@ class Context;\n std::shared_ptr<InterpreterSelectWithUnionQuery> interpretSubquery(\n     const ASTPtr & table_expression, const Context & context, size_t subquery_depth, const Names & required_source_columns);\n \n+std::shared_ptr<InterpreterSelectWithUnionQuery> interpretSubquery(\n+    const ASTPtr & table_expression, const Context & context, const Names & required_source_columns, const SelectQueryOptions & options);\n+\n }\n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/00597_push_down_predicate.reference b/dbms/tests/queries/0_stateless/00597_push_down_predicate.reference\nindex 9fde80689f13..480b1c4525cb 100644\n--- a/dbms/tests/queries/0_stateless/00597_push_down_predicate.reference\n+++ b/dbms/tests/queries/0_stateless/00597_push_down_predicate.reference\n@@ -46,17 +46,19 @@ SELECT \\n    id, \\n    date, \\n    value\\nFROM \\n(\\n    SELECT \\n        id, \\n\n SELECT \\n    date, \\n    id, \\n    name, \\n    value\\nFROM \\n(\\n    SELECT \\n        date, \\n        id, \\n        name, \\n        value\\n    FROM test_00597\\n    WHERE id = 1\\n    UNION ALL\\n    SELECT \\n        date, \\n        id, \\n        name, \\n        value\\n    FROM test_00597\\n    WHERE id = 1\\n)\\nWHERE id = 1\n 2000-01-01\t1\ttest string 1\t1\n 2000-01-01\t1\ttest string 1\t1\n-SELECT \\n    date, \\n    id, \\n    name, \\n    value, \\n    date, \\n    name, \\n    value\\nFROM \\n(\\n    SELECT \\n        date, \\n        id, \\n        name, \\n        value\\n    FROM test_00597\\n    WHERE id = 1\\n)\\nANY LEFT JOIN \\n(\\n    SELECT *\\n    FROM test_00597\\n) USING (id)\\nWHERE id = 1\n+SELECT \\n    date, \\n    id, \\n    name, \\n    value, \\n    date, \\n    name, \\n    value\\nFROM \\n(\\n    SELECT \\n        date, \\n        id, \\n        name, \\n        value\\n    FROM test_00597\\n    WHERE id = 1\\n)\\nANY LEFT JOIN \\n(\\n    SELECT id\\n    FROM test_00597\\n) USING (id)\\nWHERE id = 1\n 2000-01-01\t1\ttest string 1\t1\t2000-01-01\ttest string 1\t1\n-SELECT \\n    id, \\n    date, \\n    name, \\n    value\\nFROM \\n(\\n    SELECT toInt8(1) AS id\\n)\\nANY LEFT JOIN \\n(\\n    SELECT *\\n    FROM test_00597\\n) AS test_00597 USING (id)\\nWHERE value = 1\n+SELECT \\n    id, \\n    date, \\n    name, \\n    value\\nFROM \\n(\\n    SELECT toInt8(1) AS id\\n)\\nANY LEFT JOIN \\n(\\n    SELECT \\n        date, \\n        id, \\n        name, \\n        value\\n    FROM test_00597\\n) AS test_00597 USING (id)\\nWHERE value = 1\n 1\t2000-01-01\ttest string 1\t1\n SELECT value\\nFROM \\n(\\n    SELECT toInt8(1) AS id\\n)\\nANY LEFT JOIN test_00597 AS b USING (id)\\nWHERE value = 1\n 1\n-SELECT \\n    date, \\n    id, \\n    name, \\n    value\\nFROM \\n(\\n    SELECT \\n        date, \\n        id, \\n        name, \\n        value, \\n        date, \\n        name, \\n        value\\n    FROM \\n    (\\n        SELECT \\n            date, \\n            id, \\n            name, \\n            value\\n        FROM test_00597\\n        WHERE id = 1\\n    )\\n    ANY LEFT JOIN \\n    (\\n        SELECT *\\n        FROM test_00597\\n    ) USING (id)\\n    WHERE id = 1\\n)\\nWHERE id = 1\n+SELECT \\n    date, \\n    id, \\n    name, \\n    value\\nFROM \\n(\\n    SELECT \\n        date, \\n        id, \\n        name, \\n        value, \\n        date, \\n        name, \\n        value\\n    FROM \\n    (\\n        SELECT \\n            date, \\n            id, \\n            name, \\n            value\\n        FROM test_00597\\n        WHERE id = 1\\n    )\\n    ANY LEFT JOIN \\n    (\\n        SELECT id\\n        FROM test_00597\\n    ) USING (id)\\n    WHERE id = 1\\n)\\nWHERE id = 1\n 2000-01-01\t1\ttest string 1\t1\n-SELECT \\n    date, \\n    id, \\n    name, \\n    value, \\n    b.date, \\n    b.name, \\n    b.value\\nFROM \\n(\\n    SELECT \\n        date, \\n        id, \\n        name, \\n        value\\n    FROM test_00597\\n)\\nANY LEFT JOIN \\n(\\n    SELECT *\\n    FROM test_00597\\n) AS b USING (id)\\nWHERE b.id = 1\n+SELECT \\n    date, \\n    id, \\n    name, \\n    value, \\n    b.date, \\n    b.name, \\n    b.value\\nFROM \\n(\\n    SELECT \\n        date, \\n        id, \\n        name, \\n        value\\n    FROM test_00597\\n)\\nANY LEFT JOIN \\n(\\n    SELECT \\n        date, \\n        id, \\n        name, \\n        value\\n    FROM test_00597\\n) AS b USING (id)\\nWHERE b.id = 1\n 2000-01-01\t1\ttest string 1\t1\t2000-01-01\ttest string 1\t1\n-SELECT \\n    id, \\n    date, \\n    name, \\n    value\\nFROM \\n(\\n    SELECT \\n        toInt8(1) AS id, \\n        toDate(\\'2000-01-01\\') AS date\\n    FROM system.numbers\\n    LIMIT 1\\n)\\nANY LEFT JOIN \\n(\\n    SELECT *\\n    FROM test_00597\\n) AS b USING (date, id)\\nWHERE b.date = toDate(\\'2000-01-01\\')\n+SELECT \\n    id, \\n    date, \\n    name, \\n    value\\nFROM \\n(\\n    SELECT \\n        toInt8(1) AS id, \\n        toDate(\\'2000-01-01\\') AS date\\n    FROM system.numbers\\n    LIMIT 1\\n)\\nANY LEFT JOIN \\n(\\n    SELECT \\n        date, \\n        id, \\n        name, \\n        value\\n    FROM test_00597\\n) AS b USING (date, id)\\nWHERE b.date = toDate(\\'2000-01-01\\')\n 1\t2000-01-01\ttest string 1\t1\n-SELECT \\n    date, \\n    id, \\n    name, \\n    value, \\n    `b.date`, \\n    `b.id`, \\n    `b.name`, \\n    `b.value`\\nFROM \\n(\\n    SELECT \\n        date, \\n        id, \\n        name, \\n        value, \\n        b.date, \\n        b.id, \\n        b.name, \\n        b.value\\n    FROM \\n    (\\n        SELECT \\n            date, \\n            id, \\n            name, \\n            value\\n        FROM test_00597\\n        WHERE id = 1\\n    ) AS a\\n    ANY LEFT JOIN \\n    (\\n        SELECT *\\n        FROM test_00597\\n    ) AS b ON id = b.id\\n    WHERE id = 1\\n)\\nWHERE id = 1\n+SELECT \\n    date, \\n    id, \\n    name, \\n    value, \\n    `b.date`, \\n    `b.id`, \\n    `b.name`, \\n    `b.value`\\nFROM \\n(\\n    SELECT \\n        date, \\n        id, \\n        name, \\n        value, \\n        b.date, \\n        b.id, \\n        b.name, \\n        b.value\\n    FROM \\n    (\\n        SELECT \\n            date, \\n            id, \\n            name, \\n            value\\n        FROM test_00597\\n        WHERE id = 1\\n    ) AS a\\n    ANY LEFT JOIN \\n    (\\n        SELECT \\n            date, \\n            id, \\n            name, \\n            value\\n        FROM test_00597\\n    ) AS b ON id = b.id\\n    WHERE id = 1\\n)\\nWHERE id = 1\n 2000-01-01\t1\ttest string 1\t1\t2000-01-01\t1\ttest string 1\t1\n+SELECT \\n    date, \\n    id, \\n    name, \\n    value, \\n    r.date, \\n    r.name, \\n    r.value\\nFROM \\n(\\n    SELECT \\n        date, \\n        id, \\n        name, \\n        value\\n    FROM test_00597\\n)\\nSEMI LEFT JOIN \\n(\\n    SELECT \\n        date, \\n        id, \\n        name, \\n        value\\n    FROM \\n    (\\n        SELECT \\n            date, \\n            id, \\n            name, \\n            value\\n        FROM test_00597\\n        WHERE id = 1\\n    )\\n    WHERE id = 1\\n) AS r USING (id)\\nWHERE r.id = 1\n+2000-01-01\t1\ttest string 1\t1\t2000-01-01\ttest string 1\t1\ndiff --git a/dbms/tests/queries/0_stateless/00597_push_down_predicate.sql b/dbms/tests/queries/0_stateless/00597_push_down_predicate.sql\nindex 997750831c94..774c855c369e 100644\n--- a/dbms/tests/queries/0_stateless/00597_push_down_predicate.sql\n+++ b/dbms/tests/queries/0_stateless/00597_push_down_predicate.sql\n@@ -130,5 +130,9 @@ SELECT * FROM (SELECT toInt8(1) AS id, toDate('2000-01-01') AS date FROM system.\n ANALYZE SELECT * FROM (SELECT * FROM (SELECT * FROM test_00597) AS a ANY LEFT JOIN (SELECT * FROM test_00597) AS b  ON  a.id = b.id) WHERE id = 1;\n SELECT * FROM (SELECT * FROM (SELECT * FROM test_00597) AS a ANY LEFT JOIN (SELECT * FROM test_00597) AS b  ON  a.id = b.id) WHERE id = 1;\n \n+-- Explain with join subquery\n+ANALYZE SELECT * FROM (SELECT * FROM test_00597) ANY INNER JOIN (SELECT * FROM (SELECT * FROM test_00597)) as r USING id WHERE r.id = 1;\n+SELECT * FROM (SELECT * FROM test_00597) ANY INNER JOIN (SELECT * FROM (SELECT * FROM test_00597)) as r USING id WHERE r.id = 1;\n+\n DROP TABLE IF EXISTS test_00597;\n DROP TABLE IF EXISTS test_view_00597;\n",
  "problem_statement": "Unexpected HAVING if push down is enabled\n```\r\nCREATE TABLE n (k UInt32) ENGINE = Memory;\r\nCREATE TABLE r (k UInt32, name String) ENGINE = Memory;\r\n\r\nSET enable_debug_queries = 1;\r\nSET enable_optimize_predicate_expression = 1;\r\n\r\nANALYZE SELECT * FROM n, r WHERE n.k = r.k AND r.name = 'A';\r\n```\r\n\r\n```\r\nSELECT \r\n    k, \r\n    r.k, \r\n    name\r\nFROM n\r\nALL INNER JOIN \r\n(\r\n    SELECT *\r\n    FROM r\r\n    HAVING name = 'A'\r\n) AS r ON k = r.k\r\nWHERE (k = r.k) AND (name = 'A')\r\n```\n",
  "hints_text": "#8915 ? ",
  "created_at": "2020-02-20T03:18:47Z"
}