{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 23456,
  "instance_id": "ClickHouse__ClickHouse-23456",
  "issue_numbers": [
    "14476"
  ],
  "base_commit": "3604aa92f884c539fbab6799cebd2c82800771ed",
  "patch": "diff --git a/src/DataTypes/IDataType.h b/src/DataTypes/IDataType.h\nindex 9b762cfa4c5a..5a676819b77b 100644\n--- a/src/DataTypes/IDataType.h\n+++ b/src/DataTypes/IDataType.h\n@@ -360,7 +360,8 @@ inline bool isEnum(const DataTypePtr & data_type) { return WhichDataType(data_ty\n inline bool isDecimal(const DataTypePtr & data_type) { return WhichDataType(data_type).isDecimal(); }\n inline bool isTuple(const DataTypePtr & data_type) { return WhichDataType(data_type).isTuple(); }\n inline bool isArray(const DataTypePtr & data_type) { return WhichDataType(data_type).isArray(); }\n-inline bool isMap(const DataTypePtr & data_type) {return WhichDataType(data_type).isMap(); }\n+inline bool isMap(const DataTypePtr & data_type) { return WhichDataType(data_type).isMap(); }\n+inline bool isNothing(const DataTypePtr & data_type) { return WhichDataType(data_type).isNothing(); }\n \n template <typename T>\n inline bool isUInt8(const T & data_type)\ndiff --git a/src/Functions/FunctionsConversion.h b/src/Functions/FunctionsConversion.h\nindex 9b40be58862e..1cd308c774d3 100644\n--- a/src/Functions/FunctionsConversion.h\n+++ b/src/Functions/FunctionsConversion.h\n@@ -2496,7 +2496,7 @@ class FunctionCast final : public IFunctionBaseImpl\n         }\n     }\n \n-    WrapperType createArrayWrapper(const DataTypePtr & from_type_untyped, const DataTypeArray * to_type) const\n+    WrapperType createArrayWrapper(const DataTypePtr & from_type_untyped, const DataTypeArray & to_type) const\n     {\n         /// Conversion from String through parsing.\n         if (checkAndGetDataType<DataTypeString>(from_type_untyped.get()))\n@@ -2507,24 +2507,23 @@ class FunctionCast final : public IFunctionBaseImpl\n             };\n         }\n \n-        DataTypePtr from_nested_type;\n-        DataTypePtr to_nested_type;\n         const auto * from_type = checkAndGetDataType<DataTypeArray>(from_type_untyped.get());\n-\n-        /// get the most nested type\n-        if (from_type && to_type)\n+        if (!from_type)\n         {\n-            from_nested_type = from_type->getNestedType();\n-            to_nested_type = to_type->getNestedType();\n-\n-            from_type = checkAndGetDataType<DataTypeArray>(from_nested_type.get());\n-            to_type = checkAndGetDataType<DataTypeArray>(to_nested_type.get());\n+            throw Exception(ErrorCodes::TYPE_MISMATCH,\n+                \"CAST AS Array can only be perforamed between same-dimensional Array or String types\");\n         }\n \n-        /// both from_type and to_type should be nullptr now is array types had same dimensions\n-        if ((from_type == nullptr) != (to_type == nullptr))\n-            throw Exception{\"CAST AS Array can only be performed between same-dimensional array types or from String\",\n-                ErrorCodes::TYPE_MISMATCH};\n+        DataTypePtr from_nested_type = from_type->getNestedType();\n+\n+        /// In query SELECT CAST([] AS Array(Array(String))) from type is Array(Nothing)\n+        bool from_empty_array = isNothing(from_nested_type);\n+\n+        if (from_type->getNumberOfDimensions() != to_type.getNumberOfDimensions() && !from_empty_array)\n+            throw Exception(ErrorCodes::TYPE_MISMATCH,\n+                \"CAST AS Array can only be perforamed between same-dimensional array types\");\n+\n+        const DataTypePtr & to_nested_type = to_type.getNestedType();\n \n         /// Prepare nested type conversion\n         const auto nested_function = prepareUnpackDictionaries(from_nested_type, to_nested_type);\n@@ -3090,14 +3089,12 @@ class FunctionCast final : public IFunctionBaseImpl\n                 return createStringWrapper(from_type);\n             case TypeIndex::FixedString:\n                 return createFixedStringWrapper(from_type, checkAndGetDataType<DataTypeFixedString>(to_type.get())->getN());\n-\n             case TypeIndex::Array:\n-                return createArrayWrapper(from_type, checkAndGetDataType<DataTypeArray>(to_type.get()));\n+                return createArrayWrapper(from_type, static_cast<const DataTypeArray &>(*to_type));\n             case TypeIndex::Tuple:\n                 return createTupleWrapper(from_type, checkAndGetDataType<DataTypeTuple>(to_type.get()));\n             case TypeIndex::Map:\n                 return createMapWrapper(from_type, checkAndGetDataType<DataTypeMap>(to_type.get()));\n-\n             case TypeIndex::AggregateFunction:\n                 return createAggregateFunctionWrapper(from_type, checkAndGetDataType<DataTypeAggregateFunction>(to_type.get()));\n             default:\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01837_cast_to_array_from_empty_array.reference b/tests/queries/0_stateless/01837_cast_to_array_from_empty_array.reference\nnew file mode 100644\nindex 000000000000..c71bf50e82fd\n--- /dev/null\n+++ b/tests/queries/0_stateless/01837_cast_to_array_from_empty_array.reference\n@@ -0,0 +1,2 @@\n+[]\n+[]\ndiff --git a/tests/queries/0_stateless/01837_cast_to_array_from_empty_array.sql b/tests/queries/0_stateless/01837_cast_to_array_from_empty_array.sql\nnew file mode 100644\nindex 000000000000..f3aa595f6d5d\n--- /dev/null\n+++ b/tests/queries/0_stateless/01837_cast_to_array_from_empty_array.sql\n@@ -0,0 +1,2 @@\n+SELECT CAST([] AS Array(Array(String)));\n+SELECT CAST([] AS Array(Array(Array(String))));\n",
  "problem_statement": "Can't create VIEW from select query\n**Describe the unexpected behaviour**\r\nExpected create view from any \"select\" query, but it doesn't work.\r\nBut select-query is correct and working\r\nversion 20.4.5.36\r\n**How to reproduce**\r\n\r\nCREATE VIEW tempView AS\r\nWITH(SELECT groupArray(a) FROM (SELECT [1, 2] AS a)) AS aaa\r\nSELECT aaa\r\n\r\n\r\n**Error message and/or stacktrace**\r\nCode: 53, e.displayText() = DB::Exception: CAST AS Array can only be performed between same-dimensional array types or from String\r\n\n",
  "hints_text": "A simple example to reproduce the issue\r\n\r\n```\r\nwith (select groupArray(a) from (select  [1, 2] as a)) as aaa\r\nselect aaa\r\n```\n@javisantana yes, this example is more simple. Thank you!\n> A simple example to reproduce the issue\r\n> \r\n> ```\r\n> with (select groupArray(a) from (select  [1, 2] as a)) as aaa\r\n> select aaa\r\n> ```\r\n\r\nTried to reproduce on several versions, but it works. What version you have?\nsorry, full steps:\r\n\r\n```\r\n :) select version();\r\n\r\nSELECT version()\r\n\r\n\u250c\u2500version()\u2500\u2510\r\n\u2502 20.7.2.30 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 0.002 sec.\r\n\r\n :) SELECT * FROM ( WITH ( SELECT groupArray(a) FROM ( SELECT [1, 2] AS a ) ) AS aaa SELECT aaa ) FORMAT JSON;\r\n\r\nSELECT *\r\nFROM\r\n(\r\n    WITH\r\n        (\r\n            SELECT groupArray(a)\r\n            FROM\r\n            (\r\n                SELECT [1, 2] AS a\r\n            )\r\n        ) AS aaa\r\n    SELECT aaa\r\n)\r\nFORMAT JSON\r\n\r\n\r\nReceived exception from server (version 20.7.2):\r\nCode: 53. DB::Exception: Received from localhost:9000. DB::Exception: CAST AS Array can only be performed between same-dimensional array types or from String.\r\n\r\n0 rows in set. Elapsed: 0.003 sec.\r\n```\r\n\r\n\nit worked before, at least in 20.1 \r\n```\r\nClickHouse client version 20.1.4.14 (official build).\r\nConnecting to localhost:9000 as user default.\r\nConnected to ClickHouse server version 20.1.4 revision 54431.\r\n\r\n:) CREATE VIEW tempView AS\r\n:-] WITH(SELECT groupArray(a) FROM (SELECT [1, 2] AS a)) AS aaa\r\n:-] SELECT aaa\r\n\r\nCREATE VIEW tempView AS\r\nWITH\r\n    (\r\n        SELECT groupArray(a)\r\n        FROM\r\n        (\r\n            SELECT [1, 2] AS a\r\n        )\r\n    ) AS aaa\r\nSELECT aaa\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.006 sec.\r\n\r\n\r\n\r\n\r\n :) select * from tempView\r\n\r\n\r\n\u250c\u2500aaa\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 [[1,2]] \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n\r\nafter upgrade to 20.3.17.173 select from view still working?\r\n\r\n```\r\nselect * from tempView\r\n\r\n\u250c\u2500aaa\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 [[1,2]] \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n\r\nSELECT *\r\nFROM\r\n(\r\n    WITH\r\n        (\r\n            SELECT groupArray(a)\r\n            FROM\r\n            (\r\n                SELECT [1, 2] AS a\r\n            )\r\n        ) AS aaa\r\n    SELECT aaa\r\n)\r\n\r\nReceived exception from server (version 20.3.17):\r\nCode: 53. DB::Exception: Received from localhost:9000. DB::Exception: CAST AS Array can only be performed between same-dimensional array types or from String.\r\n\r\n:) SET experimental_use_processors = 0 -- does not change anything\r\n\r\n\r\ndrop table tempView;\r\n\r\nCREATE VIEW tempView AS\r\nWITH(SELECT groupArray(a) FROM (SELECT [1, 2] AS a)) AS aaa\r\nSELECT aaa\r\n\r\nReceived exception from server (version 20.3.17):\r\nCode: 53. DB::Exception: Received from localhost:9000. DB::Exception: CAST AS Array can only be performed between same-dimensional array types or from String.\r\n\r\n```\nDo you have any clue so it can help to fix the issue (or try to debug it further)\n```\r\nmilovidov-desktop :) SELECT (SELECT groupArray(a) FROM (SELECT [1, 2] AS a)) AS aaa\r\n\r\nSELECT \r\n    (\r\n        SELECT groupArray(a)\r\n        FROM \r\n        (\r\n            SELECT [1, 2] AS a\r\n        )\r\n    ) AS aaa\r\n\r\n\u250c\u2500aaa\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 [[1,2]] \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 0.017 sec. \r\n\r\nmilovidov-desktop :) EXPLAIN SYNTAX SELECT (SELECT groupArray(a) FROM (SELECT [1, 2] AS a)) AS aaa\r\n\r\nEXPLAIN SYNTAX\r\nSELECT \r\n    (\r\n        SELECT groupArray(a)\r\n        FROM \r\n        (\r\n            SELECT [1, 2] AS a\r\n        )\r\n    ) AS aaa\r\n\r\n\r\nReceived exception from server (version 20.10.1):\r\nCode: 53. DB::Exception: Received from localhost:9000. DB::Exception: CAST AS Array can only be performed between same-dimensional array types or from String.\r\n```\n`SELECT CAST([] AS Array(Array(String)))`",
  "created_at": "2021-04-21T17:37:30Z",
  "modified_files": [
    "src/DataTypes/IDataType.h",
    "src/Functions/FunctionsConversion.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01837_cast_to_array_from_empty_array.reference",
    "b/tests/queries/0_stateless/01837_cast_to_array_from_empty_array.sql"
  ]
}