{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 46187,
  "instance_id": "ClickHouse__ClickHouse-46187",
  "issue_numbers": [
    "44518"
  ],
  "base_commit": "4fd40582597a358ed4c25eaa4a23694ffb1cf7be",
  "patch": "diff --git a/base/base/itoa.h b/base/base/itoa.h\nindex dd3e3cc96fec..513070c99d9f 100644\n--- a/base/base/itoa.h\n+++ b/base/base/itoa.h\n@@ -33,6 +33,41 @@\n #include <base/extended_types.h>\n \n \n+template <typename T>\n+inline int digits10(T x)\n+{\n+    if (x < 10ULL)\n+        return 1;\n+    if (x < 100ULL)\n+        return 2;\n+    if (x < 1000ULL)\n+        return 3;\n+\n+    if (x < 1000000000000ULL)\n+    {\n+        if (x < 100000000ULL)\n+        {\n+            if (x < 1000000ULL)\n+            {\n+                if (x < 10000ULL)\n+                    return 4;\n+                else\n+                    return 5 + (x >= 100000ULL);\n+            }\n+\n+            return 7 + (x >= 10000000ULL);\n+        }\n+\n+        if (x < 10000000000ULL)\n+            return 9 + (x >= 1000000000ULL);\n+\n+        return 11 + (x >= 100000000000ULL);\n+    }\n+\n+    return 12 + digits10(x / 1000000000000ULL);\n+}\n+\n+\n namespace impl\n {\n \n@@ -312,39 +347,6 @@ namespace convert\n     }\n }\n \n-template <typename T>\n-static inline int digits10(T x)\n-{\n-    if (x < 10ULL)\n-        return 1;\n-    if (x < 100ULL)\n-        return 2;\n-    if (x < 1000ULL)\n-        return 3;\n-\n-    if (x < 1000000000000ULL)\n-    {\n-        if (x < 100000000ULL)\n-        {\n-            if (x < 1000000ULL)\n-            {\n-                if (x < 10000ULL)\n-                    return 4;\n-                else\n-                    return 5 + (x >= 100000ULL);\n-            }\n-\n-            return 7 + (x >= 10000000ULL);\n-        }\n-\n-        if (x < 10000000000ULL)\n-            return 9 + (x >= 1000000000ULL);\n-\n-        return 11 + (x >= 100000000000ULL);\n-    }\n-\n-    return 12 + digits10(x / 1000000000000ULL);\n-}\n \n template <typename T>\n static inline char * writeUIntText(T x, char * p)\ndiff --git a/src/Functions/countDigits.cpp b/src/Functions/countDigits.cpp\nindex aefe0d92d944..2ca8d944b0a9 100644\n--- a/src/Functions/countDigits.cpp\n+++ b/src/Functions/countDigits.cpp\n@@ -2,9 +2,10 @@\n #include <Functions/FunctionFactory.h>\n #include <Functions/FunctionHelpers.h>\n #include <DataTypes/DataTypesNumber.h>\n-#include <DataTypes/DataTypesDecimal.h>\n #include <Columns/ColumnsNumber.h>\n #include <Columns/ColumnDecimal.h>\n+#include <base/extended_types.h>\n+#include <base/itoa.h>\n \n \n namespace DB\n@@ -83,7 +84,7 @@ class FunctionCountDigits : public IFunction\n     template <typename T, typename ColVecType>\n     static void execute(const ColVecType & col, ColumnUInt8 & result_column, size_t rows_count)\n     {\n-        using NativeT = NativeType<T>;\n+        using NativeT = make_unsigned_t<NativeType<T>>;\n \n         const auto & src_data = col.getData();\n         auto & dst_data = result_column.getData();\n@@ -92,50 +93,22 @@ class FunctionCountDigits : public IFunction\n         for (size_t i = 0; i < rows_count; ++i)\n         {\n             if constexpr (is_decimal<T>)\n-                dst_data[i] = digits<NativeT>(src_data[i].value);\n+            {\n+                auto value = src_data[i].value;\n+                if (unlikely(value < 0))\n+                    dst_data[i] = digits10<NativeT>(-static_cast<NativeT>(value));\n+                else\n+                    dst_data[i] = digits10<NativeT>(value);\n+            }\n             else\n-                dst_data[i] = digits<NativeT>(src_data[i]);\n-        }\n-    }\n-\n-    template <typename T>\n-    static UInt32 digits(T value)\n-    {\n-        static_assert(!is_decimal<T>);\n-        using DivT = std::conditional_t<is_signed_v<T>, Int32, UInt32>;\n-\n-        UInt32 res = 0;\n-        T tmp;\n-\n-        if constexpr (sizeof(T) > sizeof(Int32))\n-        {\n-            static constexpr const DivT e9 = 1000000000;\n-\n-            tmp = value / e9;\n-            while (tmp != 0)\n             {\n-                value = tmp;\n-                tmp /= e9;\n-                res += 9;\n+                auto value = src_data[i];\n+                if (unlikely(value < 0))\n+                    dst_data[i] = digits10<NativeT>(-static_cast<NativeT>(value));\n+                else\n+                    dst_data[i] = digits10<NativeT>(value);\n             }\n         }\n-\n-        static constexpr const DivT e3 = 1000;\n-\n-        tmp = value / e3;\n-        while (tmp != 0)\n-        {\n-            value = tmp;\n-            tmp /= e3;\n-            res += 3;\n-        }\n-\n-        while (value != 0)\n-        {\n-            value /= 10;\n-            ++res;\n-        }\n-        return res;\n     }\n };\n \n",
  "test_patch": "diff --git a/tests/performance/countDigits.xml b/tests/performance/countDigits.xml\nnew file mode 100644\nindex 000000000000..5e822b3c4fd7\n--- /dev/null\n+++ b/tests/performance/countDigits.xml\n@@ -0,0 +1,6 @@\n+<test>\n+    <query>SELECT count() FROM test.hits WHERE NOT ignore(countDigits(RegionID))</query>\n+    <query>SELECT count() FROM test.hits WHERE NOT ignore(countDigits(AdvEngineID))</query>\n+    <query>SELECT count() FROM test.hits WHERE NOT ignore(countDigits(ClientIP))</query>\n+    <query>SELECT count() FROM test.hits WHERE NOT ignore(countDigits(WatchID))</query>\n+</test>\ndiff --git a/tests/queries/0_stateless/01458_count_digits.reference b/tests/queries/0_stateless/01458_count_digits.reference\nindex 80c210bc0afa..93cb52f73524 100644\n--- a/tests/queries/0_stateless/01458_count_digits.reference\n+++ b/tests/queries/0_stateless/01458_count_digits.reference\n@@ -1,7 +1,7 @@\n-0\t2\t2\t0\t2\t3\t0\t2\t4\n+1\t2\t2\t1\t2\t3\t1\t2\t4\n 2\t3\t4\n 10\t10\t19\t19\t39\t39\n 2\t2\t2\t2\t2\t2\t2\t2\t2\t2\t2\t2\n-0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\t0\n+1\t1\t1\t1\t1\t1\t1\t1\t1\t1\t1\t1\n 3\t3\t3\t5\t5\t5\t10\t10\t10\t19\t19\t20\n 2\t3\t4\t5\t6\t7\ndiff --git a/tests/queries/0_stateless/02560_count_digits.reference b/tests/queries/0_stateless/02560_count_digits.reference\nnew file mode 100644\nindex 000000000000..836975f7db45\n--- /dev/null\n+++ b/tests/queries/0_stateless/02560_count_digits.reference\n@@ -0,0 +1,19 @@\n+1\n+1\n+1\n+5\n+5\n+20\n+19\n+39\n+78\n+39\n+77\n+8\n+9\n+10\n+11\n+8\n+9\n+10\n+11\ndiff --git a/tests/queries/0_stateless/02560_count_digits.sql b/tests/queries/0_stateless/02560_count_digits.sql\nnew file mode 100644\nindex 000000000000..19f5403bdf5e\n--- /dev/null\n+++ b/tests/queries/0_stateless/02560_count_digits.sql\n@@ -0,0 +1,22 @@\n+SELECT countDigits(0);\n+SELECT countDigits(1);\n+SELECT countDigits(-1);\n+SELECT countDigits(12345);\n+SELECT countDigits(-12345);\n+SELECT countDigits(0xFFFFFFFFFFFFFFFF);\n+SELECT countDigits(CAST(0x8000000000000000 AS Int64));\n+SELECT countDigits(CAST(-1 AS UInt128));\n+SELECT countDigits(CAST(-1 AS UInt256));\n+SELECT countDigits(CAST(CAST(-1 AS UInt128) DIV 2 + 1 AS Int128));\n+SELECT countDigits(CAST(CAST(-1 AS UInt256) DIV 2 + 1 AS Int256));\n+\n+SELECT countDigits(-123.45678::Decimal32(5));\n+SELECT countDigits(-123.456789::Decimal64(6));\n+SELECT countDigits(-123.4567890::Decimal128(7));\n+SELECT countDigits(-123.45678901::Decimal256(8));\n+\n+-- this behavior can be surprising, but actually reasonable:\n+SELECT countDigits(-123.456::Decimal32(5));\n+SELECT countDigits(-123.4567::Decimal64(6));\n+SELECT countDigits(-123.45678::Decimal128(7));\n+SELECT countDigits(-123.456789::Decimal256(8));\n",
  "problem_statement": "A faster branchless countDigits\n<!---\r\nA technical comment, you are free to remove or leave it as it is when PR is created\r\nThe following categories are used in the next scripts, update them accordingly\r\nutils/changelog/changelog.py\r\ntests/ci/run_check.py\r\n-->\r\n### Changelog category (leave one):\r\n- Improvement\r\n\r\n\r\n### Changelog entry (a user-readable short description of the changes that goes to CHANGELOG.md):\r\nA faster branchless countDigits\r\n\r\n> Information about CI checks: https://clickhouse.com/docs/en/development/continuous-integration/\r\n\n",
  "hints_text": "A test for this function has failed, indicating a change in behavior.\nA branchful version can be faster: https://github.com/ClickHouse/ClickHouse/blob/master/base/base/itoa.h#L315\nShould we remove countDigits current division version\uff1fuse this if version\r\n\r\n> A branchful version can be faster: https://github.com/ClickHouse/ClickHouse/blob/master/base/base/itoa.h#L315\r\n\r\n\nYes, it should be better.",
  "created_at": "2023-02-09T03:40:23Z",
  "modified_files": [
    "base/base/itoa.h",
    "src/Functions/countDigits.cpp"
  ],
  "modified_test_files": [
    "b/tests/performance/countDigits.xml",
    "tests/queries/0_stateless/01458_count_digits.reference",
    "b/tests/queries/0_stateless/02560_count_digits.reference",
    "b/tests/queries/0_stateless/02560_count_digits.sql"
  ]
}