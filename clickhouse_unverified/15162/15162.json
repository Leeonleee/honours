{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 15162,
  "instance_id": "ClickHouse__ClickHouse-15162",
  "issue_numbers": [
    "14627"
  ],
  "base_commit": "3a1ec56486f9ad138318024fc3f2d1bb72ad9291",
  "patch": "diff --git a/src/Interpreters/CollectJoinOnKeysVisitor.cpp b/src/Interpreters/CollectJoinOnKeysVisitor.cpp\nindex 48273e322097..3b3fdaa65cb7 100644\n--- a/src/Interpreters/CollectJoinOnKeysVisitor.cpp\n+++ b/src/Interpreters/CollectJoinOnKeysVisitor.cpp\n@@ -127,6 +127,12 @@ std::pair<size_t, size_t> CollectJoinOnKeysMatcher::getTableNumbers(const ASTPtr\n     getIdentifiers(left_ast, left_identifiers);\n     getIdentifiers(right_ast, right_identifiers);\n \n+    if (left_identifiers.empty() || right_identifiers.empty())\n+    {\n+        throw Exception(\"Not equi-join ON expression: \" + queryToString(expr) + \". No columns in one of equality side.\",\n+                        ErrorCodes::INVALID_JOIN_ON_EXPRESSION);\n+    }\n+\n     size_t left_idents_table = getTableForIdentifiers(left_identifiers, data);\n     size_t right_idents_table = getTableForIdentifiers(right_identifiers, data);\n \n",
  "test_patch": "diff --git a/tests/integration/test_distributed_load_balancing/test.py b/tests/integration/test_distributed_load_balancing/test.py\nindex 0758dc38ba70..df7b74fcae18 100644\n--- a/tests/integration/test_distributed_load_balancing/test.py\n+++ b/tests/integration/test_distributed_load_balancing/test.py\n@@ -106,7 +106,7 @@ def get_node(query_node, table='dist', *args, **kwargs):\n         LIMIT 1\n     ) a\n     JOIN system.clusters c\n-    ON a._shard_num = c.shard_num AND cluster = 'shards_cluster'\n+    ON a._shard_num = c.shard_num WHERE cluster = 'shards_cluster'\n     \"\"\".format(query_id=query_id))\n     return rows.strip()\n \ndiff --git a/tests/queries/0_stateless/00878_join_unexpected_results.reference b/tests/queries/0_stateless/00878_join_unexpected_results.reference\nindex 65fcbc257ca6..a389cb47a962 100644\n--- a/tests/queries/0_stateless/00878_join_unexpected_results.reference\n+++ b/tests/queries/0_stateless/00878_join_unexpected_results.reference\n@@ -23,8 +23,6 @@ join_use_nulls = 1\n -\n \\N\t\\N\n -\n-1\t1\t\\N\t\\N\n-2\t2\t\\N\t\\N\n -\n 1\t1\t1\t1\n 2\t2\t\\N\t\\N\n@@ -51,8 +49,6 @@ join_use_nulls = 0\n -\n -\n -\n-1\t1\t0\t0\n-2\t2\t0\t0\n -\n 1\t1\t1\t1\n 2\t2\t0\t0\ndiff --git a/tests/queries/0_stateless/00878_join_unexpected_results.sql b/tests/queries/0_stateless/00878_join_unexpected_results.sql\nindex 6f6cd6e64792..0aef5208b26e 100644\n--- a/tests/queries/0_stateless/00878_join_unexpected_results.sql\n+++ b/tests/queries/0_stateless/00878_join_unexpected_results.sql\n@@ -30,11 +30,11 @@ select * from t left outer join s on (t.a=s.a and t.b=s.b) where s.a is null;\n select '-';\n select s.* from t left outer join s on (t.a=s.a and t.b=s.b) where s.a is null;\n select '-';\n-select t.*, s.* from t left join s on (s.a=t.a and t.b=s.b and t.a=toInt64(2)) order by t.a;\n+select t.*, s.* from t left join s on (s.a=t.a and t.b=s.b and t.a=toInt64(2)) order by t.a; -- {serverError 403 }\n select '-';\n select t.*, s.* from t left join s on (s.a=t.a) order by t.a;\n select '-';\n-select t.*, s.* from t left join s on (t.b=toInt64(2) and s.a=t.a) where s.b=2;\n+select t.*, s.* from t left join s on (t.b=toInt64(2) and s.a=t.a) where s.b=2; -- {serverError 403 }\n \n select 'join_use_nulls = 0';\n set join_use_nulls = 0;\n@@ -58,11 +58,11 @@ select '-';\n select '-';\n -- select s.* from t left outer join s on (t.a=s.a and t.b=s.b) where s.a is null; -- TODO\n select '-';\n-select t.*, s.* from t left join s on (s.a=t.a and t.b=s.b and t.a=toInt64(2)) order by t.a;\n+select t.*, s.* from t left join s on (s.a=t.a and t.b=s.b and t.a=toInt64(2)) order by t.a; -- {serverError 403 }\n select '-';\n select t.*, s.* from t left join s on (s.a=t.a) order by t.a;\n select '-';\n-select t.*, s.* from t left join s on (t.b=toInt64(2) and s.a=t.a) where s.b=2;\n+select t.*, s.* from t left join s on (t.b=toInt64(2) and s.a=t.a) where s.b=2; -- {serverError 403 }\n \n drop table t;\n drop table s;\ndiff --git a/tests/queries/0_stateless/01018_Distributed__shard_num.reference b/tests/queries/0_stateless/01018_Distributed__shard_num.reference\nindex 679383f969e1..f4b920117599 100644\n--- a/tests/queries/0_stateless/01018_Distributed__shard_num.reference\n+++ b/tests/queries/0_stateless/01018_Distributed__shard_num.reference\n@@ -29,8 +29,6 @@ remote(Distributed)\n JOIN system.clusters\n 1\t10\tlocalhost\t::1\t9000\n 1\t20\tlocalhost\t::1\t9000\n-1\t10\tlocalhost\t::1\t9000\n-1\t20\tlocalhost\t::1\t9000\n dist_3\n 100\tfoo\n foo\t100\tfoo\ndiff --git a/tests/queries/0_stateless/01018_Distributed__shard_num.sql b/tests/queries/0_stateless/01018_Distributed__shard_num.sql\nindex ddb8505a4159..f6d5f23eca82 100644\n--- a/tests/queries/0_stateless/01018_Distributed__shard_num.sql\n+++ b/tests/queries/0_stateless/01018_Distributed__shard_num.sql\n@@ -48,11 +48,12 @@ FROM (SELECT *, _shard_num FROM dist_1) a\n JOIN system.clusters b\n ON a._shard_num = b.shard_num\n WHERE b.cluster = 'test_cluster_two_shards_localhost';\n+\n SELECT _shard_num, key, b.host_name, b.host_address, b.port\n FROM dist_1 a\n JOIN system.clusters b\n ON _shard_num = b.shard_num\n-WHERE b.cluster = 'test_cluster_two_shards_localhost';\n+WHERE b.cluster = 'test_cluster_two_shards_localhost'; -- { serverError 403 }\n \n -- rewrite does not work with aliases, hence Missing columns (47)\n SELECT a._shard_num, key FROM dist_1 a; -- { serverError 47; }\ndiff --git a/tests/queries/0_stateless/01081_PartialSortingTransform_full_column.sql b/tests/queries/0_stateless/01081_PartialSortingTransform_full_column.sql\nindex 768a20c8ca4e..eaf1278d9baa 100644\n--- a/tests/queries/0_stateless/01081_PartialSortingTransform_full_column.sql\n+++ b/tests/queries/0_stateless/01081_PartialSortingTransform_full_column.sql\n@@ -2,7 +2,7 @@ drop table if exists test_01081;\n \n create table test_01081 (key Int) engine=MergeTree() order by key;\n insert into test_01081 select * from system.numbers limit 10;\n-select 1 from remote('127.{1,2}', currentDatabase(), test_01081) lhs join system.one as rhs on rhs.dummy = 1 order by 1;\n+select 1 from remote('127.{1,2}', currentDatabase(), test_01081) lhs join system.one as rhs on rhs.dummy = 1 order by 1; -- { serverError 403 }\n \n -- With multiple blocks triggers:\n --\n@@ -11,6 +11,6 @@ select 1 from remote('127.{1,2}', currentDatabase(), test_01081) lhs join system\n --     _dummy Int Int32(size = 0), 1 UInt8 Const(size = 0, UInt8(size = 1)).\n \n insert into test_01081 select * from system.numbers limit 10;\n-select 1 from remote('127.{1,2}', currentDatabase(), test_01081) lhs join system.one as rhs on rhs.dummy = 1 order by 1;\n+select 1 from remote('127.{1,2}', currentDatabase(), test_01081) lhs join system.one as rhs on rhs.dummy = 1 order by 1; -- { serverError 403 }\n \n drop table if exists test_01081;\ndiff --git a/tests/queries/0_stateless/01101_literal_column_clash.reference b/tests/queries/0_stateless/01101_literal_column_clash.reference\nindex 47458541f793..e63f96416afe 100644\n--- a/tests/queries/0_stateless/01101_literal_column_clash.reference\n+++ b/tests/queries/0_stateless/01101_literal_column_clash.reference\n@@ -8,7 +8,3 @@ xyzabc\t2\n 1\t0\t0\t3\n \\N\t1\t2\t\\N\t0\n \\N\t1\t0\t\\N\t3\n-1\n-1\n-1\thello\\0\\0\\0\n-1\thello\\0\\0\\0\ndiff --git a/tests/queries/0_stateless/01101_literal_column_clash.sql b/tests/queries/0_stateless/01101_literal_column_clash.sql\nindex 2c665d3833b1..f96aad4bacf6 100644\n--- a/tests/queries/0_stateless/01101_literal_column_clash.sql\n+++ b/tests/queries/0_stateless/01101_literal_column_clash.sql\n@@ -17,7 +17,6 @@ select null, isConstant(null), * from (select 2 x, null) a right join (select 3\n \n -- other cases with joins and constants\n \n-select cast(1, 'UInt8') from (select arrayJoin([1, 2]) as a) t1 left join (select 1 as b) t2 on b = ignore('UInt8');\n-\n-select isConstant('UInt8'), toFixedString('hello', toUInt8(substring('UInt8', 5, 1))) from (select arrayJoin([1, 2]) as a) t1 left join (select 1 as b) t2 on b = ignore('UInt8');\n+select cast(1, 'UInt8') from (select arrayJoin([1, 2]) as a) t1 left join (select 1 as b) t2 on b = ignore('UInt8'); -- { serverError 403 }\n \n+select isConstant('UInt8'), toFixedString('hello', toUInt8(substring('UInt8', 5, 1))) from (select arrayJoin([1, 2]) as a) t1 left join (select 1 as b) t2 on b = ignore('UInt8');  -- { serverError 403 }\ndiff --git a/tests/queries/0_stateless/01478_not_equi-join_on.reference b/tests/queries/0_stateless/01478_not_equi-join_on.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/01478_not_equi-join_on.sql b/tests/queries/0_stateless/01478_not_equi-join_on.sql\nnew file mode 100644\nindex 000000000000..b52af5fcb46c\n--- /dev/null\n+++ b/tests/queries/0_stateless/01478_not_equi-join_on.sql\n@@ -0,0 +1,7 @@\n+SELECT * FROM (SELECT NULL AS a, 1 AS b) AS foo\n+RIGHT JOIN (SELECT 1024 AS b) AS bar\n+ON 1 = foo.b; -- { serverError 403 }\n+\n+SELECT * FROM (SELECT NULL AS a, 1 AS b) AS foo\n+RIGHT JOIN (SELECT 1024 AS b) AS bar\n+ON 1 = bar.b; -- { serverError 403 }\n",
  "problem_statement": "Debug assertion: Wrong columns assign in RIGHT|FULL JOIN: UInt8 UInt16\n```sql\r\nSELECT foo.a\r\nFROM \r\n(\r\n    SELECT \r\n        NULL AND 3,\r\n        NULL AS a,\r\n        1 AS b\r\n) AS foo\r\nRIGHT JOIN \r\n(\r\n    SELECT \r\n        ((inf AND NULL) AND ((NULL AND 65537) AND 257 AND NULL) AND NULL) AND 256 AND NULL AND ((NULL AND NULL) AND 257 AND NULL) AND NULL AND NULL,\r\n        1024 AS b\r\n) AS bar ON (and(and(-1)) AND NULL) AND (NULL AND '0.0000001025' AND NULL) AND (((((((100 AND NULL AND NULL) AND NULL) AND NULL AND ((1 AND NULL) AND (NULL AND NULL) AND NULL) AND NULL) AND 65536) AND 100.0000991821289) AND 1) = foo.b)\r\nORDER BY foo.a ASC\r\n\r\n```\r\n\r\n```bash\r\n2020.09.09 15:48:33.643572 [ 60548 ] {65cdeea3-71f7-42f0-8d56-698941ebbd79} <Error> : Logical error: 'Wrong columns assign in RIGHT|FULL JOIN: UInt8 UInt16'.\r\nclickhouse: ../src/Common/Exception.cpp:45: DB::Exception::Exception(const std::string &, int): Assertion `false' failed.\r\n2020.09.09 15:48:33.644418 [ 60468 ] {} <Trace> BaseDaemon: Received signal 6\r\n2020.09.09 15:48:33.644693 [ 60554 ] {} <Fatal> BaseDaemon: ########################################\r\n2020.09.09 15:48:33.645050 [ 60554 ] {} <Fatal> BaseDaemon: (version 20.8.1.1, build id: A74DBD0D50188A47) (from thread 60548) (query_id: 65cdeea3-71f7-42f0-8d56-698941ebbd79) Received signal Aborted (6)\r\n2020.09.09 15:48:33.645207 [ 60554 ] {} <Fatal> BaseDaemon: \r\n2020.09.09 15:48:33.645433 [ 60554 ] {} <Fatal> BaseDaemon: Stack trace: 0x7f3c6898818b 0x7f3c68967859 0x7f3c68967729 0x7f3c68978f36 0x25ca81c1 0x30509c06 0x2fe8c890 0x2fe8bfa5 0x2f8c265d 0x31169691 0x30e9ad67 0x31169343 0x30ef7d4c 0x30ef7caf 0x30ef7c6d 0x30ef7c1d 0x30ef7bed 0x30ef6d4e 0x25ccb0f5 0x25cca015 0x30ef5665 0x30ef5e59 0x30ef9fac 0x30ef9f0d 0x30ef9ed1 0x30ef9ea2 0x30ef9d9c 0x30ef9d2d\r\n2020.09.09 15:48:33.647723 [ 60554 ] {} <Fatal> BaseDaemon: 4. /build/glibc-YYA7BZ/glibc-2.31/signal/../sysdeps/unix/sysv/linux/raise.c:51: __GI_raise @ 0x4618b in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n2020.09.09 15:48:33.648423 [ 60554 ] {} <Fatal> BaseDaemon: 5. /build/glibc-YYA7BZ/glibc-2.31/stdlib/abort.c:81: __GI_abort @ 0x25859 in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n2020.09.09 15:48:33.649163 [ 60554 ] {} <Fatal> BaseDaemon: 6. /build/glibc-YYA7BZ/glibc-2.31/intl/loadmsgcat.c:509: _nl_load_domain.cold @ 0x25729 in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n2020.09.09 15:48:33.649476 [ 60554 ] {} <Fatal> BaseDaemon: 7. ? @ 0x36f36 in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n2020.09.09 15:48:33.649769 [ 60554 ] {} <Fatal> BaseDaemon: 8. /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/../src/Common/Exception.cpp:48: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x25ca81c1 in /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/programs/clickhouse\r\n2020.09.09 15:48:33.689845 [ 60554 ] {} <Fatal> BaseDaemon: 9. /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/../src/Interpreters/join_common.cpp:392: DB::NotJoined::addRightColumns(DB::Block&, std::__1::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&) const @ 0x30509c06 in /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/programs/clickhouse\r\n2020.09.09 15:48:33.739602 [ 60554 ] {} <Fatal> BaseDaemon: 10. /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/../src/Interpreters/HashJoin.cpp:1321: DB::NonJoinedBlockInputStream::createBlock() @ 0x2fe8c890 in /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/programs/clickhouse\r\n2020.09.09 15:48:33.789678 [ 60554 ] {} <Fatal> BaseDaemon: 11. /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/../src/Interpreters/HashJoin.cpp:0: DB::NonJoinedBlockInputStream::readImpl() @ 0x2fe8bfa5 in /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/programs/clickhouse\r\n2020.09.09 15:48:33.823090 [ 60554 ] {} <Fatal> BaseDaemon: 12. /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/../src/DataStreams/IBlockInputStream.cpp:57: DB::IBlockInputStream::read() @ 0x2f8c265d in /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/programs/clickhouse\r\n2020.09.09 15:48:33.869041 [ 60554 ] {} <Fatal> BaseDaemon: 13. /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/../src/Processors/Sources/SourceFromInputStream.cpp:145: DB::SourceFromInputStream::generate() @ 0x31169691 in /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/programs/clickhouse\r\n2020.09.09 15:48:33.912618 [ 60554 ] {} <Fatal> BaseDaemon: 14. /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/../src/Processors/ISource.cpp:48: DB::ISource::work() @ 0x30e9ad67 in /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/programs/clickhouse\r\n2020.09.09 15:48:33.957535 [ 60554 ] {} <Fatal> BaseDaemon: 15. /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/../src/Processors/Sources/SourceFromInputStream.cpp:97: DB::SourceFromInputStream::work() @ 0x31169343 in /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/programs/clickhouse\r\n2020.09.09 15:48:34.002818 [ 60554 ] {} <Fatal> BaseDaemon: 16. /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/../src/Processors/Executors/PipelineExecutor.cpp:78: DB::executeJob(DB::IProcessor*) @ 0x30ef7d4c in /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/programs/clickhouse\r\n2020.09.09 15:48:34.046606 [ 60554 ] {} <Fatal> BaseDaemon: 17. /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/../src/Processors/Executors/PipelineExecutor.cpp:95: DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0::operator()() const @ 0x30ef7caf in /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/programs/clickhouse\r\n2020.09.09 15:48:34.091207 [ 60554 ] {} <Fatal> BaseDaemon: 18. /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/../contrib/libcxx/include/type_traits:3519: decltype(std::__1::forward<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&>(fp)()) std::__1::__invoke<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&>(DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&) @ 0x30ef7c6d in /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/programs/clickhouse\r\n2020.09.09 15:48:34.135256 [ 60554 ] {} <Fatal> BaseDaemon: 19. /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/../contrib/libcxx/include/__functional_base:349: void std::__1::__invoke_void_return_wrapper<void>::__call<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&>(DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&) @ 0x30ef7c1d in /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/programs/clickhouse\r\n2020.09.09 15:48:34.179108 [ 60554 ] {} <Fatal> BaseDaemon: 20. /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/../contrib/libcxx/include/functional:1540: std::__1::__function::__alloc_func<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0, std::__1::allocator<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0>, void ()>::operator()() @ 0x30ef7bed in /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/programs/clickhouse\r\n2020.09.09 15:48:34.222482 [ 60554 ] {} <Fatal> BaseDaemon: 21. /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/../contrib/libcxx/include/functional:1714: std::__1::__function::__func<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0, std::__1::allocator<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0>, void ()>::operator()() @ 0x30ef6d4e in /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/programs/clickhouse\r\n2020.09.09 15:48:34.224242 [ 60554 ] {} <Fatal> BaseDaemon: 22. /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/../contrib/libcxx/include/functional:1867: std::__1::__function::__value_func<void ()>::operator()() const @ 0x25ccb0f5 in /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/programs/clickhouse\r\n2020.09.09 15:48:34.224544 [ 60554 ] {} <Fatal> BaseDaemon: 23. /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/../contrib/libcxx/include/functional:2473: std::__1::function<void ()>::operator()() const @ 0x25cca015 in /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/programs/clickhouse\r\n2020.09.09 15:48:34.268480 [ 60554 ] {} <Fatal> BaseDaemon: 24. /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/../src/Processors/Executors/PipelineExecutor.cpp:559: DB::PipelineExecutor::executeStepImpl(unsigned long, unsigned long, std::__1::atomic<bool>*) @ 0x30ef5665 in /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/programs/clickhouse\r\n2020.09.09 15:48:34.311235 [ 60554 ] {} <Fatal> BaseDaemon: 25. /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/../src/Processors/Executors/PipelineExecutor.cpp:472: DB::PipelineExecutor::executeSingleThread(unsigned long, unsigned long) @ 0x30ef5e59 in /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/programs/clickhouse\r\n2020.09.09 15:48:34.355083 [ 60554 ] {} <Fatal> BaseDaemon: 26. /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/../src/Processors/Executors/PipelineExecutor.cpp:729: DB::PipelineExecutor::executeImpl(unsigned long)::$_4::operator()() const @ 0x30ef9fac in /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/programs/clickhouse\r\n2020.09.09 15:48:34.400146 [ 60554 ] {} <Fatal> BaseDaemon: 27. /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/../contrib/libcxx/include/type_traits:3525: decltype(std::__1::forward<DB::PipelineExecutor::executeImpl(unsigned long)::$_4 const&>(fp)()) std::__1::__invoke_constexpr<DB::PipelineExecutor::executeImpl(unsigned long)::$_4 const&>(DB::PipelineExecutor::executeImpl(unsigned long)::$_4 const&) @ 0x30ef9f0d in /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/programs/clickhouse\r\n2020.09.09 15:48:34.444150 [ 60554 ] {} <Fatal> BaseDaemon: 28. /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/../contrib/libcxx/include/tuple:1415: decltype(auto) std::__1::__apply_tuple_impl<DB::PipelineExecutor::executeImpl(unsigned long)::$_4 const&, std::__1::tuple<> const&>(DB::PipelineExecutor::executeImpl(unsigned long)::$_4 const&, std::__1::tuple<> const&, std::__1::__tuple_indices<>) @ 0x30ef9ed1 in /home/jakalletti/ClickHouse/ClickHouse/build-clang-debug/programs/clickhouse\r\n\r\n```\n",
  "hints_text": "Another case: https://clickhouse-test-reports.s3.yandex.net/14962/194c8da69a302f5cff694ea22d84cacc1db53fa3/fuzzer/report.html#fail1\r\n",
  "created_at": "2020-09-22T17:50:26Z",
  "modified_files": [
    "src/Interpreters/CollectJoinOnKeysVisitor.cpp"
  ],
  "modified_test_files": [
    "tests/integration/test_distributed_load_balancing/test.py",
    "tests/queries/0_stateless/00878_join_unexpected_results.reference",
    "tests/queries/0_stateless/00878_join_unexpected_results.sql",
    "tests/queries/0_stateless/01018_Distributed__shard_num.reference",
    "tests/queries/0_stateless/01018_Distributed__shard_num.sql",
    "tests/queries/0_stateless/01081_PartialSortingTransform_full_column.sql",
    "tests/queries/0_stateless/01101_literal_column_clash.reference",
    "tests/queries/0_stateless/01101_literal_column_clash.sql",
    "b/tests/queries/0_stateless/01478_not_equi-join_on.sql"
  ]
}