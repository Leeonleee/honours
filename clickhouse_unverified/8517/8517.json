{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 8517,
  "instance_id": "ClickHouse__ClickHouse-8517",
  "issue_numbers": [
    "7488"
  ],
  "base_commit": "d884ab4318a0210af52c8d2a52d61aaa6cae521a",
  "patch": "diff --git a/dbms/src/Interpreters/ReplaceQueryParameterVisitor.cpp b/dbms/src/Interpreters/ReplaceQueryParameterVisitor.cpp\nindex 1cbcb758bf32..5c29c722f88e 100644\n--- a/dbms/src/Interpreters/ReplaceQueryParameterVisitor.cpp\n+++ b/dbms/src/Interpreters/ReplaceQueryParameterVisitor.cpp\n@@ -7,6 +7,7 @@\n #include <DataTypes/DataTypeFactory.h>\n #include <Formats/FormatSettings.h>\n #include <IO/ReadBufferFromString.h>\n+#include <IO/WriteHelpers.h>\n #include <Parsers/ASTLiteral.h>\n #include <Parsers/ASTQueryParameter.h>\n #include <Interpreters/ReplaceQueryParameterVisitor.h>\n@@ -54,10 +55,12 @@ void ReplaceQueryParameterVisitor::visitQueryParameter(ASTPtr & ast)\n     IColumn & temp_column = *temp_column_ptr;\n     ReadBufferFromString read_buffer{value};\n     FormatSettings format_settings;\n-    data_type->deserializeAsWholeText(temp_column, read_buffer, format_settings);\n+    data_type->deserializeAsTextEscaped(temp_column, read_buffer, format_settings);\n \n     if (!read_buffer.eof())\n-        throw Exception(\"Value \" + value + \" cannot be parsed as \" + type_name + \" for query parameter '\"  + ast_param.name + \"'\", ErrorCodes::BAD_QUERY_PARAMETER);\n+        throw Exception(\"Value \" + value + \" cannot be parsed as \" + type_name + \" for query parameter '\"  + ast_param.name + \"'\"\n+            \" because it isn't parsed completely: only \" + toString(read_buffer.count()) + \" of \" + toString(value.size()) + \" bytes was parsed: \"\n+            + value.substr(0, read_buffer.count()), ErrorCodes::BAD_QUERY_PARAMETER);\n \n     ast = addTypeConversionToAST(std::make_shared<ASTLiteral>(temp_column[0]), type_name);\n }\n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/01056_prepared_statements_null_and_escaping.reference b/dbms/tests/queries/0_stateless/01056_prepared_statements_null_and_escaping.reference\nnew file mode 100644\nindex 000000000000..b1ec6c8a4ed9\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/01056_prepared_statements_null_and_escaping.reference\n@@ -0,0 +1,8 @@\n+Hello, World\n+Hello,\\tWorld\n+Hello,\\nWorld\n+Hello,\\tWorld\n+Hello,\\nWorld\n+\\N\n+457\n+457\ndiff --git a/dbms/tests/queries/0_stateless/01056_prepared_statements_null_and_escaping.sh b/dbms/tests/queries/0_stateless/01056_prepared_statements_null_and_escaping.sh\nnew file mode 100755\nindex 000000000000..4840a8f672d7\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/01056_prepared_statements_null_and_escaping.sh\n@@ -0,0 +1,28 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+. $CURDIR/../shell_config.sh\n+\n+${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}&param_x=Hello,%20World\" \\\n+    -d \"SELECT {x:Nullable(String)}\";\n+\n+${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}&param_x=Hello,%5CtWorld\" \\\n+    -d \"SELECT {x:Nullable(String)}\";\n+\n+${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}&param_x=Hello,%5CnWorld\" \\\n+    -d \"SELECT {x:Nullable(String)}\";\n+\n+${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}&param_x=Hello,%5C%09World\" \\\n+    -d \"SELECT {x:Nullable(String)}\";\n+\n+${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}&param_x=Hello,%5C%0AWorld\" \\\n+    -d \"SELECT {x:Nullable(String)}\";\n+\n+${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}&param_x=%5CN\" \\\n+    -d \"SELECT {x:Nullable(String)}\";\n+\n+${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}&param_x=Hello,%09World\" \\\n+    -d \"SELECT {x:Nullable(String)}\" 2>&1 | grep -oF '457';\n+\n+${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}&param_x=Hello,%0AWorld\" \\\n+    -d \"SELECT {x:Nullable(String)}\" 2>&1 | grep -oF '457';\n",
  "problem_statement": "bind parameters: Nullable string can't start from N.  \n```\r\nclickhouse-client --param_x=No-no-no\r\nlaptop5591 :) select isNull( {x:Nullable(String)} );\r\n\r\nException on client:\r\nCode: 27. DB::Exception: Cannot parse input: expected NULL before: o-no-no\r\n```\n",
  "hints_text": "```\r\nclickhouse-client --param_x='Null-not-am-I'\r\nCode: 457. DB::Exception: Value Null-not-am-I cannot be parsed as Nullable(String) for query parameter 'x'\r\n```\n@filimonov I wonder why it is not solved three days ago, when we discussed the solution.\n> Alexey Milovidov, [25.10.19 17:31]\r\n> \u0414\u043b\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0438\u0437 \u0442\u0435\u043a\u0441\u0442\u0430 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 URL), \u043c\u0435\u0442\u043e\u0434 \u0447\u0442\u043e-\u0442\u043e \u0442\u0438\u043f\u0430 deserializeWholeAsText. \u041d\u0430\u0434\u043e \u0443\u043c\u0435\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 'NULL' \u0438 NULL. \u041d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u044f \u043f\u043e\u043d\u044f\u043b, \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e \u0441\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0438\u0437 CSV, \u0433\u0434\u0435 \u043c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0438 \u0431\u0435\u0437 \u043a\u0430\u0432\u044b\u0447\u0435\u043a, \u043d\u043e \u0434\u043b\u044f \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043d\u0435\u043e\u0434\u043d\u043e\u0437\u043d\u0430\u0447\u043d\u043e\u0441\u0442\u0438, \u043a\u0430\u0432\u044b\u0447\u043a\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b. \u0422\u0430\u043a \u043a\u0430\u043a \u043f\u0440\u0438 \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0435 \u0438\u0437 \u0442\u0435\u043a\u0441\u0442\u0430 (\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 URL), \u043a\u0430\u0432\u044b\u0447\u043a\u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043d\u0435\u043b\u044c\u0437\u044f (\u0431\u044b\u043b\u043e \u0431\u044b \u043e\u0447\u0435\u043d\u044c \u043d\u0435\u043b\u043e\u0433\u0438\u0447\u043d\u043e), \u0438\u0441\u043f\u0440\u0430\u0432\u0438\u043c \u044d\u0442\u0443 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044e \u043d\u0430 \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u0443\u044e \u0438\u0437 TSV, \u0433\u0434\u0435 NULL \u043c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043a\u0430\u043a \\N.\r\n> \r\n> \u041f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f, \u0447\u0442\u043e NULL \u043d\u0430\u0434\u043e \u0431\u0443\u0434\u0435\u0442 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0442\u0430\u043a:\r\n> \r\n> ...&param_name=%5CN\r\n> \r\n> \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0442\u0440\u0438\u0432\u0438\u0430\u043b\u044c\u043d\u043e, \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0439\u0447\u0430\u0441.\r\n> \nhttps://github.com/ClickHouse/ClickHouse/blob/8c24d5e66a4982f4faaa31106496e6eecd886aaa/dbms/src/Interpreters/ReplaceQueryParameterVisitor.cpp#L57\r\n\r\ndeserializeTextEscaped ?\nYes, let's use `deserializeTextEscaped` for parameters.\r\n\r\nWe will only pay for extra escaping (that's required only for tabs, newlines and backslashes)\r\nand we get support for \\N for that price.\r\n\r\nDon't forget to include as backward incompatible change into changelog.\r\n\r\nThe function `deserializeAsWholeText` will be almost unused after this change.",
  "created_at": "2020-01-03T14:14:32Z",
  "modified_files": [
    "dbms/src/Interpreters/ReplaceQueryParameterVisitor.cpp"
  ],
  "modified_test_files": [
    "b/dbms/tests/queries/0_stateless/01056_prepared_statements_null_and_escaping.reference",
    "b/dbms/tests/queries/0_stateless/01056_prepared_statements_null_and_escaping.sh"
  ]
}