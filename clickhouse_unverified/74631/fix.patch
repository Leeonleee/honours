diff --git a/contrib/SimSIMD b/contrib/SimSIMD
index da2d38537299..bee6bb499ab5 160000
--- a/contrib/SimSIMD
+++ b/contrib/SimSIMD
@@ -1,1 +1,1 @@
-Subproject commit da2d38537299ade247c2499131d936fb8db38f03
+Subproject commit bee6bb499ab526007fc5d5289f1d998aa1eb6249
diff --git a/contrib/usearch b/contrib/usearch
index 9561fcae1249..914947990a88 160000
--- a/contrib/usearch
+++ b/contrib/usearch
@@ -1,1 +1,1 @@
-Subproject commit 9561fcae1249ea8effbf71250e8a7a7ea97e5dfe
+Subproject commit 914947990a88898c7380dcf4387fdd5bb220926c
diff --git a/docs/en/engines/table-engines/mergetree-family/annindexes.md b/docs/en/engines/table-engines/mergetree-family/annindexes.md
index 47d40e38999b..fba42df46be6 100644
--- a/docs/en/engines/table-engines/mergetree-family/annindexes.md
+++ b/docs/en/engines/table-engines/mergetree-family/annindexes.md
@@ -71,8 +71,8 @@ ORDER BY id;
 USearch indexes are currently experimental, to use them you first need to `SET allow_experimental_vector_similarity_index = 1`.
 :::
 
-The index can be build on a column of type [Array(Float64)](../../../sql-reference/data-types/array.md),
-[Array(Float32)](../../../sql-reference/data-types/array.md), or [Array(BFloat16)](../../../sql-reference/data-types/array.md).
+The index can be build on columns of type [Array(Float64)](../../../sql-reference/data-types/array.md) or
+[Array(Float32)](../../../sql-reference/data-types/array.md).
 
 Index parameters:
 - `method`: Currently only `hnsw` is supported.
diff --git a/src/Storages/MergeTree/MergeTreeIndexVectorSimilarity.cpp b/src/Storages/MergeTree/MergeTreeIndexVectorSimilarity.cpp
index 6f986abe2057..fd17bf70ffdd 100644
--- a/src/Storages/MergeTree/MergeTreeIndexVectorSimilarity.cpp
+++ b/src/Storages/MergeTree/MergeTreeIndexVectorSimilarity.cpp
@@ -378,8 +378,8 @@ void MergeTreeIndexAggregatorVectorSimilarity::update(const Block & block, size_
     const auto * data_type_array = typeid_cast<const DataTypeArray *>(block.getByName(index_column_name).type.get());
     if (!data_type_array)
         throw Exception(ErrorCodes::LOGICAL_ERROR, "Expected data type Array(Float*)");
-    const TypeIndex nested_type_index = data_type_array->getNestedType()->getTypeId();
 
+    const TypeIndex nested_type_index = data_type_array->getNestedType()->getTypeId();
     if (WhichDataType(nested_type_index).isFloat32())
         updateImpl<ColumnFloat32>(column_array, column_array_offsets, index, dimensions, rows);
     else if (WhichDataType(nested_type_index).isFloat64())
@@ -569,7 +569,7 @@ void vectorSimilarityIndexValidator(const IndexDescription & index, bool /* atta
     if (!data_type_array)
         throw Exception(ErrorCodes::ILLEGAL_COLUMN, "Vector similarity indexes can only be created on columns of type Array(Float*)");
     TypeIndex nested_type_index = data_type_array->getNestedType()->getTypeId();
-    if (!WhichDataType(nested_type_index).isFloat())
+    if (!WhichDataType(nested_type_index).isNativeFloat())
         throw Exception(ErrorCodes::ILLEGAL_COLUMN, "Vector similarity indexes can only be created on columns of type Array(Float*)");
 }
 
