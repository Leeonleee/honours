{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 65697,
  "instance_id": "ClickHouse__ClickHouse-65697",
  "issue_numbers": [
    "65695"
  ],
  "base_commit": "e8480b9073d48c8c31f8f3d533dcb4847db7410e",
  "patch": "diff --git a/programs/local/LocalServer.cpp b/programs/local/LocalServer.cpp\nindex 670dc378b97d..b33e1595056e 100644\n--- a/programs/local/LocalServer.cpp\n+++ b/programs/local/LocalServer.cpp\n@@ -32,6 +32,7 @@\n #include <Common/quoteString.h>\n #include <Common/randomSeed.h>\n #include <Common/ThreadPool.h>\n+#include <Common/CurrentMetrics.h>\n #include <Loggers/OwnFormattingChannel.h>\n #include <Loggers/OwnPatternFormatter.h>\n #include <IO/ReadBufferFromFile.h>\n@@ -59,8 +60,13 @@\n #   include <azure/storage/common/internal/xml_wrapper.hpp>\n #endif\n \n+\n namespace fs = std::filesystem;\n \n+namespace CurrentMetrics\n+{\n+    extern const Metric MemoryTracking;\n+}\n \n namespace DB\n {\n@@ -131,11 +137,12 @@ void LocalServer::initialize(Poco::Util::Application & self)\n         getClientConfiguration().add(loaded_config.configuration.duplicate(), PRIO_DEFAULT, false);\n     }\n \n+    server_settings.loadSettingsFromConfig(config());\n+\n     GlobalThreadPool::initialize(\n-        getClientConfiguration().getUInt(\"max_thread_pool_size\", 10000),\n-        getClientConfiguration().getUInt(\"max_thread_pool_free_size\", 1000),\n-        getClientConfiguration().getUInt(\"thread_pool_queue_size\", 10000)\n-    );\n+        server_settings.max_thread_pool_size,\n+        server_settings.max_thread_pool_free_size,\n+        server_settings.thread_pool_queue_size);\n \n #if USE_AZURE_BLOB_STORAGE\n     /// See the explanation near the same line in Server.cpp\n@@ -146,17 +153,17 @@ void LocalServer::initialize(Poco::Util::Application & self)\n #endif\n \n     getIOThreadPool().initialize(\n-        getClientConfiguration().getUInt(\"max_io_thread_pool_size\", 100),\n-        getClientConfiguration().getUInt(\"max_io_thread_pool_free_size\", 0),\n-        getClientConfiguration().getUInt(\"io_thread_pool_queue_size\", 10000));\n+        server_settings.max_io_thread_pool_size,\n+        server_settings.max_io_thread_pool_free_size,\n+        server_settings.io_thread_pool_queue_size);\n \n-    const size_t active_parts_loading_threads = getClientConfiguration().getUInt(\"max_active_parts_loading_thread_pool_size\", 64);\n+    const size_t active_parts_loading_threads = server_settings.max_active_parts_loading_thread_pool_size;\n     getActivePartsLoadingThreadPool().initialize(\n         active_parts_loading_threads,\n         0, // We don't need any threads one all the parts will be loaded\n         active_parts_loading_threads);\n \n-    const size_t outdated_parts_loading_threads = getClientConfiguration().getUInt(\"max_outdated_parts_loading_thread_pool_size\", 32);\n+    const size_t outdated_parts_loading_threads = server_settings.max_outdated_parts_loading_thread_pool_size;\n     getOutdatedPartsLoadingThreadPool().initialize(\n         outdated_parts_loading_threads,\n         0, // We don't need any threads one all the parts will be loaded\n@@ -164,7 +171,7 @@ void LocalServer::initialize(Poco::Util::Application & self)\n \n     getOutdatedPartsLoadingThreadPool().setMaxTurboThreads(active_parts_loading_threads);\n \n-    const size_t unexpected_parts_loading_threads = getClientConfiguration().getUInt(\"max_unexpected_parts_loading_thread_pool_size\", 32);\n+    const size_t unexpected_parts_loading_threads = server_settings.max_unexpected_parts_loading_thread_pool_size;\n     getUnexpectedPartsLoadingThreadPool().initialize(\n         unexpected_parts_loading_threads,\n         0, // We don't need any threads one all the parts will be loaded\n@@ -172,7 +179,7 @@ void LocalServer::initialize(Poco::Util::Application & self)\n \n     getUnexpectedPartsLoadingThreadPool().setMaxTurboThreads(active_parts_loading_threads);\n \n-    const size_t cleanup_threads = getClientConfiguration().getUInt(\"max_parts_cleaning_thread_pool_size\", 128);\n+    const size_t cleanup_threads = server_settings.max_parts_cleaning_thread_pool_size;\n     getPartsCleaningThreadPool().initialize(\n         cleanup_threads,\n         0, // We don't need any threads one all the parts will be deleted\n@@ -437,7 +444,7 @@ try\n     UseSSL use_ssl;\n     thread_status.emplace();\n \n-    StackTrace::setShowAddresses(getClientConfiguration().getBool(\"show_addresses_in_stack_traces\", true));\n+    StackTrace::setShowAddresses(server_settings.show_addresses_in_stack_traces);\n \n     setupSignalHandler();\n \n@@ -623,12 +630,43 @@ void LocalServer::processConfig()\n     global_context->getProcessList().setMaxSize(0);\n \n     const size_t physical_server_memory = getMemoryAmount();\n-    const double cache_size_to_ram_max_ratio = getClientConfiguration().getDouble(\"cache_size_to_ram_max_ratio\", 0.5);\n+\n+    size_t max_server_memory_usage = server_settings.max_server_memory_usage;\n+    double max_server_memory_usage_to_ram_ratio = server_settings.max_server_memory_usage_to_ram_ratio;\n+\n+    size_t default_max_server_memory_usage = static_cast<size_t>(physical_server_memory * max_server_memory_usage_to_ram_ratio);\n+\n+    if (max_server_memory_usage == 0)\n+    {\n+        max_server_memory_usage = default_max_server_memory_usage;\n+        LOG_INFO(log, \"Setting max_server_memory_usage was set to {}\"\n+                      \" ({} available * {:.2f} max_server_memory_usage_to_ram_ratio)\",\n+                 formatReadableSizeWithBinarySuffix(max_server_memory_usage),\n+                 formatReadableSizeWithBinarySuffix(physical_server_memory),\n+                 max_server_memory_usage_to_ram_ratio);\n+    }\n+    else if (max_server_memory_usage > default_max_server_memory_usage)\n+    {\n+        max_server_memory_usage = default_max_server_memory_usage;\n+        LOG_INFO(log, \"Setting max_server_memory_usage was lowered to {}\"\n+                      \" because the system has low amount of memory. The amount was\"\n+                      \" calculated as {} available\"\n+                      \" * {:.2f} max_server_memory_usage_to_ram_ratio\",\n+                 formatReadableSizeWithBinarySuffix(max_server_memory_usage),\n+                 formatReadableSizeWithBinarySuffix(physical_server_memory),\n+                 max_server_memory_usage_to_ram_ratio);\n+    }\n+\n+    total_memory_tracker.setHardLimit(max_server_memory_usage);\n+    total_memory_tracker.setDescription(\"(total)\");\n+    total_memory_tracker.setMetric(CurrentMetrics::MemoryTracking);\n+\n+    const double cache_size_to_ram_max_ratio = server_settings.cache_size_to_ram_max_ratio;\n     const size_t max_cache_size = static_cast<size_t>(physical_server_memory * cache_size_to_ram_max_ratio);\n \n-    String uncompressed_cache_policy = getClientConfiguration().getString(\"uncompressed_cache_policy\", DEFAULT_UNCOMPRESSED_CACHE_POLICY);\n-    size_t uncompressed_cache_size = getClientConfiguration().getUInt64(\"uncompressed_cache_size\", DEFAULT_UNCOMPRESSED_CACHE_MAX_SIZE);\n-    double uncompressed_cache_size_ratio = getClientConfiguration().getDouble(\"uncompressed_cache_size_ratio\", DEFAULT_UNCOMPRESSED_CACHE_SIZE_RATIO);\n+    String uncompressed_cache_policy = server_settings.uncompressed_cache_policy;\n+    size_t uncompressed_cache_size = server_settings.uncompressed_cache_size;\n+    double uncompressed_cache_size_ratio = server_settings.uncompressed_cache_size_ratio;\n     if (uncompressed_cache_size > max_cache_size)\n     {\n         uncompressed_cache_size = max_cache_size;\n@@ -636,9 +674,9 @@ void LocalServer::processConfig()\n     }\n     global_context->setUncompressedCache(uncompressed_cache_policy, uncompressed_cache_size, uncompressed_cache_size_ratio);\n \n-    String mark_cache_policy = getClientConfiguration().getString(\"mark_cache_policy\", DEFAULT_MARK_CACHE_POLICY);\n-    size_t mark_cache_size = getClientConfiguration().getUInt64(\"mark_cache_size\", DEFAULT_MARK_CACHE_MAX_SIZE);\n-    double mark_cache_size_ratio = getClientConfiguration().getDouble(\"mark_cache_size_ratio\", DEFAULT_MARK_CACHE_SIZE_RATIO);\n+    String mark_cache_policy = server_settings.mark_cache_policy;\n+    size_t mark_cache_size = server_settings.mark_cache_size;\n+    double mark_cache_size_ratio = server_settings.mark_cache_size_ratio;\n     if (!mark_cache_size)\n         LOG_ERROR(log, \"Too low mark cache size will lead to severe performance degradation.\");\n     if (mark_cache_size > max_cache_size)\n@@ -648,9 +686,9 @@ void LocalServer::processConfig()\n     }\n     global_context->setMarkCache(mark_cache_policy, mark_cache_size, mark_cache_size_ratio);\n \n-    String index_uncompressed_cache_policy = getClientConfiguration().getString(\"index_uncompressed_cache_policy\", DEFAULT_INDEX_UNCOMPRESSED_CACHE_POLICY);\n-    size_t index_uncompressed_cache_size = getClientConfiguration().getUInt64(\"index_uncompressed_cache_size\", DEFAULT_INDEX_UNCOMPRESSED_CACHE_MAX_SIZE);\n-    double index_uncompressed_cache_size_ratio = getClientConfiguration().getDouble(\"index_uncompressed_cache_size_ratio\", DEFAULT_INDEX_UNCOMPRESSED_CACHE_SIZE_RATIO);\n+    String index_uncompressed_cache_policy = server_settings.index_uncompressed_cache_policy;\n+    size_t index_uncompressed_cache_size = server_settings.index_uncompressed_cache_size;\n+    double index_uncompressed_cache_size_ratio = server_settings.index_uncompressed_cache_size_ratio;\n     if (index_uncompressed_cache_size > max_cache_size)\n     {\n         index_uncompressed_cache_size = max_cache_size;\n@@ -658,9 +696,9 @@ void LocalServer::processConfig()\n     }\n     global_context->setIndexUncompressedCache(index_uncompressed_cache_policy, index_uncompressed_cache_size, index_uncompressed_cache_size_ratio);\n \n-    String index_mark_cache_policy = getClientConfiguration().getString(\"index_mark_cache_policy\", DEFAULT_INDEX_MARK_CACHE_POLICY);\n-    size_t index_mark_cache_size = getClientConfiguration().getUInt64(\"index_mark_cache_size\", DEFAULT_INDEX_MARK_CACHE_MAX_SIZE);\n-    double index_mark_cache_size_ratio = getClientConfiguration().getDouble(\"index_mark_cache_size_ratio\", DEFAULT_INDEX_MARK_CACHE_SIZE_RATIO);\n+    String index_mark_cache_policy = server_settings.index_mark_cache_policy;\n+    size_t index_mark_cache_size = server_settings.index_mark_cache_size;\n+    double index_mark_cache_size_ratio = server_settings.index_mark_cache_size_ratio;\n     if (index_mark_cache_size > max_cache_size)\n     {\n         index_mark_cache_size = max_cache_size;\n@@ -668,7 +706,7 @@ void LocalServer::processConfig()\n     }\n     global_context->setIndexMarkCache(index_mark_cache_policy, index_mark_cache_size, index_mark_cache_size_ratio);\n \n-    size_t mmap_cache_size = getClientConfiguration().getUInt64(\"mmap_cache_size\", DEFAULT_MMAP_CACHE_MAX_SIZE);\n+    size_t mmap_cache_size = server_settings.mmap_cache_size;\n     if (mmap_cache_size > max_cache_size)\n     {\n         mmap_cache_size = max_cache_size;\n@@ -680,8 +718,8 @@ void LocalServer::processConfig()\n     global_context->setQueryCache(0, 0, 0, 0);\n \n #if USE_EMBEDDED_COMPILER\n-    size_t compiled_expression_cache_max_size_in_bytes = getClientConfiguration().getUInt64(\"compiled_expression_cache_size\", DEFAULT_COMPILED_EXPRESSION_CACHE_MAX_SIZE);\n-    size_t compiled_expression_cache_max_elements = getClientConfiguration().getUInt64(\"compiled_expression_cache_elements_size\", DEFAULT_COMPILED_EXPRESSION_CACHE_MAX_ENTRIES);\n+    size_t compiled_expression_cache_max_size_in_bytes = server_settings.compiled_expression_cache_size;\n+    size_t compiled_expression_cache_max_elements = server_settings.compiled_expression_cache_elements_size;\n     CompiledExpressionCacheFactory::instance().init(compiled_expression_cache_max_size_in_bytes, compiled_expression_cache_max_elements);\n #endif\n \n@@ -698,7 +736,7 @@ void LocalServer::processConfig()\n     /// We load temporary database first, because projections need it.\n     DatabaseCatalog::instance().initializeAndLoadTemporaryDatabase();\n \n-    std::string default_database = getClientConfiguration().getString(\"default_database\", \"default\");\n+    std::string default_database = server_settings.default_database;\n     DatabaseCatalog::instance().attachDatabase(default_database, createClickHouseLocalDatabaseOverlay(default_database, global_context));\n     global_context->setCurrentDatabase(default_database);\n \ndiff --git a/programs/local/LocalServer.h b/programs/local/LocalServer.h\nindex 4ab09ffc353d..da2466650a70 100644\n--- a/programs/local/LocalServer.h\n+++ b/programs/local/LocalServer.h\n@@ -66,6 +66,8 @@ class LocalServer : public ClientBase, public Loggers\n     void applyCmdOptions(ContextMutablePtr context);\n     void applyCmdSettings(ContextMutablePtr context);\n \n+    ServerSettings server_settings;\n+\n     std::optional<StatusFile> status;\n     std::optional<std::filesystem::path> temporary_directory_to_delete;\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03196_local_memory_limit.reference b/tests/queries/0_stateless/03196_local_memory_limit.reference\nnew file mode 100644\nindex 000000000000..f2e22e8aa5b7\n--- /dev/null\n+++ b/tests/queries/0_stateless/03196_local_memory_limit.reference\n@@ -0,0 +1,1 @@\n+maximum: 95.37 MiB\ndiff --git a/tests/queries/0_stateless/03196_local_memory_limit.sh b/tests/queries/0_stateless/03196_local_memory_limit.sh\nnew file mode 100755\nindex 000000000000..346b37be006b\n--- /dev/null\n+++ b/tests/queries/0_stateless/03196_local_memory_limit.sh\n@@ -0,0 +1,7 @@\n+#!/usr/bin/env bash\n+\n+CUR_DIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CUR_DIR\"/../shell_config.sh\n+\n+${CLICKHOUSE_LOCAL} --config-file <(echo \"<clickhouse><max_server_memory_usage>100M</max_server_memory_usage></clickhouse>\") --query \"SELECT number FROM system.numbers GROUP BY number HAVING count() > 1\" 2>&1 | grep -o -P 'maximum: [\\d\\.]+ MiB'\n",
  "problem_statement": "`clickhouse-local` should have `max_memory_usage` by default\nTo avoid OOM on small machines.\r\nIt can be set to 0.9 of the system memory by default.\n",
  "hints_text": "",
  "created_at": "2024-06-26T00:33:35Z",
  "modified_files": [
    "programs/local/LocalServer.cpp",
    "programs/local/LocalServer.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03196_local_memory_limit.reference",
    "b/tests/queries/0_stateless/03196_local_memory_limit.sh"
  ]
}