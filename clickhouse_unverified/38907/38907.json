{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 38907,
  "instance_id": "ClickHouse__ClickHouse-38907",
  "issue_numbers": [
    "38412"
  ],
  "base_commit": "b94489d52cf0135bbf74e5133b6940a49c0038a7",
  "patch": "diff --git a/docs/en/sql-reference/statements/select/index.md b/docs/en/sql-reference/statements/select/index.md\nindex b05fb2ba334a..e039548e50ae 100644\n--- a/docs/en/sql-reference/statements/select/index.md\n+++ b/docs/en/sql-reference/statements/select/index.md\n@@ -25,7 +25,7 @@ SELECT [DISTINCT [ON (column1, column2, ...)]] expr_list\n [LIMIT [n, ]m] [WITH TIES]\n [SETTINGS ...]\n [UNION  ...]\n-[INTO OUTFILE filename [COMPRESSION type] ]\n+[INTO OUTFILE filename [COMPRESSION type [LEVEL level]] ]\n [FORMAT format]\n ```\n \ndiff --git a/docs/en/sql-reference/statements/select/into-outfile.md b/docs/en/sql-reference/statements/select/into-outfile.md\nindex db1ed2551a77..f101c10ff60c 100644\n--- a/docs/en/sql-reference/statements/select/into-outfile.md\n+++ b/docs/en/sql-reference/statements/select/into-outfile.md\n@@ -6,16 +6,18 @@ sidebar_label: INTO OUTFILE\n \n `INTO OUTFILE` clause redirects the result of a `SELECT` query to a file on the **client** side.\n \n-Compressed files are supported. Compression type is detected by the extension of the file name (mode `'auto'` is used by default). Or it can be explicitly specified in a `COMPRESSION` clause.\n+Compressed files are supported. Compression type is detected by the extension of the file name (mode `'auto'` is used by default). Or it can be explicitly specified in a `COMPRESSION` clause. The compression level for a certain compression type can be specified in a `LEVEL` clause.\n \n **Syntax**\n \n ```sql\n-SELECT <expr_list> INTO OUTFILE file_name [COMPRESSION type]\n+SELECT <expr_list> INTO OUTFILE file_name [COMPRESSION type [LEVEL level]]\n ```\n \n `file_name` and `type` are string literals. Supported compression types are: `'none'`, `'gzip'`, `'deflate'`, `'br'`, `'xz'`, `'zstd'`, `'lz4'`, `'bz2'`.\n \n+`level` is a numeric literal. Positive integers in following ranges are supported: `1-12` for `lz4` type, `1-22` for `zstd` type and `1-9` for other compression types.\n+\n ## Implementation Details\n \n -   This functionality is available in the [command-line client](../../../interfaces/cli.md) and [clickhouse-local](../../../operations/utilities/clickhouse-local.md). Thus a query sent via [HTTP interface](../../../interfaces/http.md) will fail.\ndiff --git a/docs/ru/sql-reference/statements/select/index.md b/docs/ru/sql-reference/statements/select/index.md\nindex 6222efe5dd12..1edf93faeaa5 100644\n--- a/docs/ru/sql-reference/statements/select/index.md\n+++ b/docs/ru/sql-reference/statements/select/index.md\n@@ -24,7 +24,7 @@ SELECT [DISTINCT [ON (column1, column2, ...)]] expr_list\n [LIMIT [n, ]m] [WITH TIES]\n [SETTINGS ...]\n [UNION ALL ...]\n-[INTO OUTFILE filename [COMPRESSION type] ]\n+[INTO OUTFILE filename [COMPRESSION type [LEVEL level]] ]\n [FORMAT format]\n ```\n \ndiff --git a/docs/ru/sql-reference/statements/select/into-outfile.md b/docs/ru/sql-reference/statements/select/into-outfile.md\nindex 2952ef2a3a2b..81d48badbe65 100644\n--- a/docs/ru/sql-reference/statements/select/into-outfile.md\n+++ b/docs/ru/sql-reference/statements/select/into-outfile.md\n@@ -6,16 +6,18 @@ sidebar_label: INTO OUTFILE\n \n \u0421\u0435\u043a\u0446\u0438\u044f `INTO OUTFILE` \u043f\u0435\u0440\u0435\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 `SELECT` \u0432 \u0444\u0430\u0439\u043b \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 **\u043a\u043b\u0438\u0435\u043d\u0442\u0430**.\n \n-\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0441\u0436\u0430\u0442\u044b\u0435 \u0444\u0430\u0439\u043b\u044b. \u0424\u043e\u0440\u043c\u0430\u0442 \u0441\u0436\u0430\u0442\u0438\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u043e \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044e \u0444\u0430\u0439\u043b\u0430 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0440\u0435\u0436\u0438\u043c `'auto'`), \u043b\u0438\u0431\u043e \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0437\u0430\u0434\u0430\u043d \u044f\u0432\u043d\u043e \u0432 \u0441\u0435\u043a\u0446\u0438\u0438 `COMPRESSION`. \n+\u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0441\u0436\u0430\u0442\u044b\u0435 \u0444\u0430\u0439\u043b\u044b. \u0424\u043e\u0440\u043c\u0430\u0442 \u0441\u0436\u0430\u0442\u0438\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u043e \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u044e \u0444\u0430\u0439\u043b\u0430 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0440\u0435\u0436\u0438\u043c `'auto'`), \u043b\u0438\u0431\u043e \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0437\u0430\u0434\u0430\u043d \u044f\u0432\u043d\u043e \u0432 \u0441\u0435\u043a\u0446\u0438\u0438 `COMPRESSION`. \u0423\u0440\u043e\u0432\u0435\u043d\u044c \u0441\u0436\u0430\u0442\u0438\u044f \u0434\u043b\u044f \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u043e\u0433\u043e \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u0430 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0437\u0430\u0434\u0430\u043d \u0432 \u0441\u0435\u043a\u0446\u0438\u0438 `LEVEL`.\n \n **\u0421\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441**\n \n ```sql\n-SELECT <expr_list> INTO OUTFILE file_name [COMPRESSION type]\n+SELECT <expr_list> INTO OUTFILE file_name [COMPRESSION type [LEVEL level]]\n ```\n \n `file_name` \u0438 `type` \u0437\u0430\u0434\u0430\u044e\u0442\u0441\u044f \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0445 \u043b\u0438\u0442\u0435\u0440\u0430\u043b\u043e\u0432. \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0444\u043e\u0440\u043c\u0430\u0442\u044b \u0441\u0436\u0430\u0442\u0438\u044f: `'none`', `'gzip'`, `'deflate'`, `'br'`, `'xz'`, `'zstd'`, `'lz4'`, `'bz2'`.\n \n+`level` \u0437\u0430\u0434\u0430\u0435\u0442\u0441\u044f \u0432 \u0432\u0438\u0434\u0435 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u0433\u043e \u043b\u0438\u0442\u0435\u0440\u0430\u043b\u0430. \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430\u0445: `1-12` \u0434\u043b\u044f \u0444\u043e\u0440\u043c\u0430\u0442\u0430 `lz4`, `1-22` \u0434\u043b\u044f \u0444\u043e\u0440\u043c\u0430\u0442\u0430 `zstd` \u0438 `1-9` \u0434\u043b\u044f \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0444\u043e\u0440\u043c\u0430\u0442\u043e\u0432.\n+\n ## \u0414\u0435\u0442\u0430\u043b\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 {#implementation-details}\n \n -   \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u0430\u0445: [\u043a\u043b\u0438\u0435\u043d\u0442 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438](../../../interfaces/cli.md) \u0438 [clickhouse-local](../../../operations/utilities/clickhouse-local.md). \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0437\u0430\u043f\u0440\u043e\u0441, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0439 \u0447\u0435\u0440\u0435\u0437 [HTTP \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441](../../../interfaces/http.md) \u0432\u0435\u0440\u043d\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0443.\ndiff --git a/src/Client/ClientBase.cpp b/src/Client/ClientBase.cpp\nindex 8230c97f49ca..0e243f97aaf0 100644\n--- a/src/Client/ClientBase.cpp\n+++ b/src/Client/ClientBase.cpp\n@@ -524,17 +524,35 @@ try\n                 const auto & out_file_node = query_with_output->out_file->as<ASTLiteral &>();\n                 out_file = out_file_node.value.safeGet<std::string>();\n \n-                std::string compression_method;\n+                std::string compression_method_string;\n+\n                 if (query_with_output->compression)\n                 {\n                     const auto & compression_method_node = query_with_output->compression->as<ASTLiteral &>();\n-                    compression_method = compression_method_node.value.safeGet<std::string>();\n+                    compression_method_string = compression_method_node.value.safeGet<std::string>();\n+                }\n+\n+                CompressionMethod compression_method = chooseCompressionMethod(out_file, compression_method_string);\n+                UInt64 compression_level = 3;\n+\n+                if (query_with_output->compression_level)\n+                {\n+                    const auto & compression_level_node = query_with_output->compression_level->as<ASTLiteral &>();\n+                    bool res = compression_level_node.value.tryGet<UInt64>(compression_level);\n+                    auto range = getCompressionLevelRange(compression_method);\n+\n+                    if (!res || compression_level < range.first || compression_level > range.second)\n+                        throw Exception(\n+                            ErrorCodes::BAD_ARGUMENTS,\n+                            \"Invalid compression level, must be positive integer in range {}-{}\",\n+                            range.first,\n+                            range.second);\n                 }\n \n                 out_file_buf = wrapWriteBufferWithCompressionMethod(\n                     std::make_unique<WriteBufferFromFile>(out_file, DBMS_DEFAULT_BUFFER_SIZE, O_WRONLY | O_EXCL | O_CREAT),\n-                    chooseCompressionMethod(out_file, compression_method),\n-                    /* compression level = */ 3\n+                    compression_method,\n+                    compression_level\n                 );\n \n                 // We are writing to file, so default format is the same as in non-interactive mode.\ndiff --git a/src/IO/CompressionMethod.cpp b/src/IO/CompressionMethod.cpp\nindex 0da235c074ca..449335407aa6 100644\n--- a/src/IO/CompressionMethod.cpp\n+++ b/src/IO/CompressionMethod.cpp\n@@ -98,6 +98,19 @@ CompressionMethod chooseCompressionMethod(const std::string & path, const std::s\n         ErrorCodes::NOT_IMPLEMENTED);\n }\n \n+std::pair<uint64_t, uint64_t> getCompressionLevelRange(const CompressionMethod & method)\n+{\n+    switch (method)\n+    {\n+        case CompressionMethod::Zstd:\n+            return {1, 22};\n+        case CompressionMethod::Lz4:\n+            return {1, 12};\n+        default:\n+            return {1, 9};\n+    }\n+}\n+\n static std::unique_ptr<CompressedReadBufferWrapper> createCompressedWrapper(\n     std::unique_ptr<ReadBuffer> nested, CompressionMethod method, size_t buf_size, char * existing_memory, size_t alignment, int zstd_window_log_max)\n {\ndiff --git a/src/IO/CompressionMethod.h b/src/IO/CompressionMethod.h\nindex a399a756c13b..29a18e5e978a 100644\n--- a/src/IO/CompressionMethod.h\n+++ b/src/IO/CompressionMethod.h\n@@ -46,6 +46,9 @@ std::string toContentEncodingName(CompressionMethod method);\n   */\n CompressionMethod chooseCompressionMethod(const std::string & path, const std::string & hint);\n \n+/// Get a range of the valid compression levels for the compression method.\n+std::pair<uint64_t, uint64_t> getCompressionLevelRange(const CompressionMethod & method);\n+\n std::unique_ptr<ReadBuffer> wrapReadBufferWithCompressionMethod(\n     std::unique_ptr<ReadBuffer> nested,\n     CompressionMethod method,\ndiff --git a/src/Parsers/ASTQueryWithOutput.h b/src/Parsers/ASTQueryWithOutput.h\nindex 10852467a769..a34826d128cd 100644\n--- a/src/Parsers/ASTQueryWithOutput.h\n+++ b/src/Parsers/ASTQueryWithOutput.h\n@@ -18,6 +18,7 @@ class ASTQueryWithOutput : public IAST\n     ASTPtr format;\n     ASTPtr settings_ast;\n     ASTPtr compression;\n+    ASTPtr compression_level;\n \n     void formatImpl(const FormatSettings & s, FormatState & state, FormatStateStacked frame) const final;\n \ndiff --git a/src/Parsers/ParserQueryWithOutput.cpp b/src/Parsers/ParserQueryWithOutput.cpp\nindex a6af19fc6708..79203c6d3d1d 100644\n--- a/src/Parsers/ParserQueryWithOutput.cpp\n+++ b/src/Parsers/ParserQueryWithOutput.cpp\n@@ -96,6 +96,14 @@ bool ParserQueryWithOutput::parseImpl(Pos & pos, ASTPtr & node, Expected & expec\n             ParserStringLiteral compression;\n             if (!compression.parse(pos, query_with_output.compression, expected))\n                 return false;\n+\n+            ParserKeyword s_compression_level(\"LEVEL\");\n+            if (s_compression_level.ignore(pos, expected))\n+            {\n+                ParserNumber compression_level;\n+                if (!compression_level.parse(pos, query_with_output.compression_level, expected))\n+                    return false;\n+            }\n         }\n \n         query_with_output.children.push_back(query_with_output.out_file);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02353_compression_level.reference b/tests/queries/0_stateless/02353_compression_level.reference\nnew file mode 100644\nindex 000000000000..0ab28a4efa5b\n--- /dev/null\n+++ b/tests/queries/0_stateless/02353_compression_level.reference\n@@ -0,0 +1,18 @@\n+6000\t5999\t13\n+6000\t5999\t13\n+Ok\n+6000\t5999\t13\n+6000\t5999\t13\n+Ok\n+6000\t5999\t13\n+6000\t5999\t13\n+Ok\n+6000\t5999\t13\n+6000\t5999\t13\n+Ok\n+6000\t5999\t13\n+6000\t5999\t13\n+Ok\n+6000\t5999\t13\n+6000\t5999\t13\n+Ok\ndiff --git a/tests/queries/0_stateless/02353_compression_level.sh b/tests/queries/0_stateless/02353_compression_level.sh\nnew file mode 100755\nindex 000000000000..b08dc1e204ca\n--- /dev/null\n+++ b/tests/queries/0_stateless/02353_compression_level.sh\n@@ -0,0 +1,34 @@\n+#!/usr/bin/env bash\n+# Tags: no-fasttest, no-parallel\n+# Tag no-fasttest: depends on brotli and bzip2\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+USER_FILES_PATH=$(clickhouse-client --query \"select _path,_file from file('nonexist.txt', 'CSV', 'val1 char')\" 2>&1 | grep Exception | awk '{gsub(\"/nonexist.txt\",\"\",$9); print $9}')\n+WORKING_FOLDER_02353=\"${USER_FILES_PATH}/${CLICKHOUSE_DATABASE}\"\n+\n+rm -rf \"${WORKING_FOLDER_02353}\"\n+mkdir \"${WORKING_FOLDER_02353}\"\n+\n+for m in gz br xz zst lz4 bz2\n+do\n+    ${CLICKHOUSE_CLIENT} --query \"SELECT number, 'Hello, world!' FROM numbers(6000) INTO OUTFILE '${WORKING_FOLDER_02353}/${m}_1.${m}' COMPRESSION '${m}' LEVEL 1\"\n+    ${CLICKHOUSE_CLIENT} --query \"SELECT number, 'Hello, world!' FROM numbers(6000) INTO OUTFILE '${WORKING_FOLDER_02353}/${m}_9.${m}' COMPRESSION '${m}' LEVEL 9\"\n+\n+    ${CLICKHOUSE_CLIENT} --query \"SELECT count(), max(x), avg(length(s)) FROM file('${WORKING_FOLDER_02353}/${m}_1.${m}', 'TabSeparated', 'x UInt32, s String')\"\n+    ${CLICKHOUSE_CLIENT} --query \"SELECT count(), max(x), avg(length(s)) FROM file('${WORKING_FOLDER_02353}/${m}_9.${m}', 'TabSeparated', 'x UInt32, s String')\"\n+\n+    level_1=$(du -b ${WORKING_FOLDER_02353}/${m}_1.${m} | awk '{print $1}')\n+    level_9=$(du -b ${WORKING_FOLDER_02353}/${m}_9.${m} | awk '{print $1}')\n+\n+    if [ \"$level_1\" != \"$level_9\" ]; then\n+        echo \"Ok\"\n+    else\n+        echo \"Failed\"\n+    fi\n+\n+done\n+\n+rm -rf \"${WORKING_FOLDER_02353}\"\n",
  "problem_statement": "Allow to specify compression level for data export.\n**Use case**\r\n\r\nWe allow to export data in gz, xz, bz2, lz4, and zst, but only with predefined compression level.\r\nSometimes I want higher compression.\n",
  "hints_text": "",
  "created_at": "2022-07-06T14:24:48Z"
}