{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 38873,
  "instance_id": "ClickHouse__ClickHouse-38873",
  "issue_numbers": [
    "38772"
  ],
  "base_commit": "01bbfd86ada152e057eb91e435c96765ba3c70be",
  "patch": "diff --git a/src/Interpreters/InterpreterSelectQuery.cpp b/src/Interpreters/InterpreterSelectQuery.cpp\nindex 42a53fb7138e..8b2b105f769e 100644\n--- a/src/Interpreters/InterpreterSelectQuery.cpp\n+++ b/src/Interpreters/InterpreterSelectQuery.cpp\n@@ -890,21 +890,23 @@ SortDescription InterpreterSelectQuery::getSortDescription(const ASTSelectQuery\n {\n     SortDescription order_descr;\n     order_descr.reserve(query.orderBy()->children.size());\n+\n     for (const auto & elem : query.orderBy()->children)\n     {\n-        String name = elem->children.front()->getColumnName();\n+        const String & column_name = elem->children.front()->getColumnName();\n         const auto & order_by_elem = elem->as<ASTOrderByElement &>();\n \n         std::shared_ptr<Collator> collator;\n         if (order_by_elem.collation)\n             collator = std::make_shared<Collator>(order_by_elem.collation->as<ASTLiteral &>().value.get<String>());\n+\n         if (order_by_elem.with_fill)\n         {\n             FillColumnDescription fill_desc = getWithFillDescription(order_by_elem, context_);\n-            order_descr.emplace_back(name, order_by_elem.direction, order_by_elem.nulls_direction, collator, true, fill_desc);\n+            order_descr.emplace_back(column_name, order_by_elem.direction, order_by_elem.nulls_direction, collator, true, fill_desc);\n         }\n         else\n-            order_descr.emplace_back(name, order_by_elem.direction, order_by_elem.nulls_direction, collator);\n+            order_descr.emplace_back(column_name, order_by_elem.direction, order_by_elem.nulls_direction, collator);\n     }\n \n     order_descr.compile_sort_description = context_->getSettingsRef().compile_sort_description;\ndiff --git a/src/Interpreters/RewriteOrderByVisitor.cpp b/src/Interpreters/RewriteOrderByVisitor.cpp\nnew file mode 100644\nindex 000000000000..694dec84b7a0\n--- /dev/null\n+++ b/src/Interpreters/RewriteOrderByVisitor.cpp\n@@ -0,0 +1,53 @@\n+#include <Interpreters/RewriteOrderByVisitor.hpp>\n+#include <Parsers/ASTExpressionList.h>\n+#include <Parsers/ASTFunction.h>\n+#include <Parsers/ASTOrderByElement.h>\n+#include <Parsers/ASTSelectQuery.h>\n+\n+namespace DB\n+{\n+\n+void RewriteOrderBy::visit(ASTPtr & ast, Data &)\n+{\n+    auto * query = ast->as<ASTSelectQuery>();\n+    if (!query)\n+        return;\n+\n+    const ASTPtr & order_by = query->orderBy();\n+    if (!order_by)\n+        return;\n+\n+    const auto * expr_list = order_by->as<ASTExpressionList>();\n+    if (!expr_list)\n+        return;\n+\n+    if (expr_list->children.size() != 1)\n+        return;\n+\n+    const auto * order_by_elem = expr_list->children.front()->as<ASTOrderByElement>();\n+    if (!order_by_elem)\n+        return;\n+\n+    const auto * func = order_by_elem->children.front()->as<ASTFunction>();\n+    if (!func || func->name != \"tuple\")\n+        return;\n+\n+    if (const auto * inner_list = func->children.front()->as<ASTExpressionList>())\n+    {\n+        auto new_order_by = std::make_shared<ASTExpressionList>();\n+        for (const auto & identifier : inner_list->children)\n+        {\n+            // clone w/o children\n+            auto clone = std::make_shared<ASTOrderByElement>(*order_by_elem);\n+            clone->children.clear();\n+\n+            clone->children.emplace_back(identifier);\n+            new_order_by->children.emplace_back(clone);\n+        }\n+        if (!new_order_by->children.empty())\n+            query->setExpression(ASTSelectQuery::Expression::ORDER_BY, std::move(new_order_by));\n+    }\n+}\n+\n+}\n+\ndiff --git a/src/Interpreters/RewriteOrderByVisitor.hpp b/src/Interpreters/RewriteOrderByVisitor.hpp\nnew file mode 100644\nindex 000000000000..a3857e046cad\n--- /dev/null\n+++ b/src/Interpreters/RewriteOrderByVisitor.hpp\n@@ -0,0 +1,35 @@\n+#pragma once\n+\n+#include <Parsers/IAST.h>\n+#include <Interpreters/InDepthNodeVisitor.h>\n+\n+namespace DB\n+{\n+///\n+/// Remove outer braces in ORDER BY\n+/// For example, rewrite (1) to (2)\n+/// (1) ... ORDER BY (a, b)\n+/// \u2502    ExpressionList (children 1)              \u2502\n+/// \u2502     OrderByElement (children 1)             \u2502\n+/// \u2502      Function tuple (children 1)            \u2502\n+/// \u2502       ExpressionList (children 2)           \u2502\n+/// \u2502        Identifier CounterID                 \u2502\n+/// \u2502        Identifier EventDate                 \u2502\n+/// (2) ... ORDER BY a,b\n+/// \u2502    ExpressionList (children 2)              \u2502\n+/// \u2502     OrderByElement (children 1)             \u2502\n+/// \u2502      Identifier CounterID                   \u2502\n+/// \u2502     OrderByElement (children 1)             \u2502\n+/// \u2502      Identifier EventDate                   \u2502\n+///\n+class RewriteOrderBy\n+{\n+public:\n+    struct Data {};\n+    static void visit(ASTPtr & ast, Data &);\n+    static bool needChildVisit(const ASTPtr &, const ASTPtr &) { return true; }\n+};\n+\n+using RewriteOrderByVisitor = InDepthNodeVisitor<RewriteOrderBy, true>;\n+}\n+\ndiff --git a/src/Interpreters/TreeRewriter.cpp b/src/Interpreters/TreeRewriter.cpp\nindex 9a4a956f3dc8..b57433fb0c67 100644\n--- a/src/Interpreters/TreeRewriter.cpp\n+++ b/src/Interpreters/TreeRewriter.cpp\n@@ -26,6 +26,7 @@\n #include <Interpreters/replaceAliasColumnsInQuery.h>\n #include <Interpreters/evaluateConstantExpression.h>\n #include <Interpreters/PredicateExpressionsOptimizer.h>\n+#include <Interpreters/RewriteOrderByVisitor.hpp>\n \n #include <Parsers/ASTExpressionList.h>\n #include <Parsers/ASTFunction.h>\n@@ -1326,6 +1327,10 @@ TreeRewriterResultPtr TreeRewriter::analyzeSelect(\n             !select_query->sampleSize() && !select_query->sampleOffset() && !select_query->final() &&\n             (tables_with_columns.size() < 2 || isLeft(result.analyzed_join->kind()));\n \n+    // remove outer braces in order by\n+    RewriteOrderByVisitor::Data data;\n+    RewriteOrderByVisitor(data).visit(query);\n+\n     return std::make_shared<const TreeRewriterResult>(result);\n }\n \n",
  "test_patch": "diff --git a/tests/performance/order_by_read_in_order.xml b/tests/performance/order_by_read_in_order.xml\nindex 9ba116bb9553..358ef0da65da 100644\n--- a/tests/performance/order_by_read_in_order.xml\n+++ b/tests/performance/order_by_read_in_order.xml\n@@ -1,9 +1,9 @@\n <test>\n \n <!-- Some queries are almost instantaneous index lookups, so we mark them as short. -->\n-<query short=\"1\">SELECT * FROM hits_100m_single ORDER BY CounterID, EventDate LIMIT 100</query>\n+<query short=\"1\">SELECT * FROM hits_100m_single ORDER BY (CounterID, EventDate) LIMIT 100</query>\n <query short=\"1\">SELECT * FROM hits_100m_single ORDER BY CounterID DESC, toStartOfWeek(EventDate) DESC LIMIT 100</query>\n-<query>SELECT * FROM hits_100m_single ORDER BY CounterID, EventDate, URL LIMIT 100</query>\n+<query>SELECT * FROM hits_100m_single ORDER BY (CounterID, EventDate, URL) LIMIT 100</query>\n <query short=\"1\">SELECT * FROM hits_100m_single WHERE CounterID IN (152220, 168777, 149234, 149234) ORDER BY CounterID DESC, EventDate DESC LIMIT 100</query>\n <query>SELECT * FROM hits_100m_single WHERE UserID=1988954671305023629 ORDER BY CounterID, EventDate LIMIT 100</query>\n \ndiff --git a/tests/queries/0_stateless/02353_order_by_tuple.reference b/tests/queries/0_stateless/02353_order_by_tuple.reference\nnew file mode 100644\nindex 000000000000..1637224ed18c\n--- /dev/null\n+++ b/tests/queries/0_stateless/02353_order_by_tuple.reference\n@@ -0,0 +1,3 @@\n+SELECT number AS a, number % 2 AS b FROM numbers(10) ORDER BY a DESC NULLS FIRST WITH FILL FROM 2 TO 1 STEP -1, b DESC NULLS FIRST WITH FILL FROM 2 TO 1 STEP -1\n+SELECT number AS a, number % 2 AS b FROM numbers(10) ORDER BY a DESC NULLS FIRST WITH FILL FROM 2 TO 1 STEP -1, b DESC NULLS FIRST WITH FILL FROM 2 TO 1 STEP -1\n+OK\ndiff --git a/tests/queries/0_stateless/02353_order_by_tuple.sh b/tests/queries/0_stateless/02353_order_by_tuple.sh\nnew file mode 100755\nindex 000000000000..78c7dfc92886\n--- /dev/null\n+++ b/tests/queries/0_stateless/02353_order_by_tuple.sh\n@@ -0,0 +1,21 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+[ ! -z \"$CLICKHOUSE_CLIENT_REDEFINED\" ] && CLICKHOUSE_CLIENT=$CLICKHOUSE_CLIENT_REDEFINED\n+\n+##################\n+# check that both queries have the same AST after rewrite, EXPLAIN SYNTAX returns it in form of query\n+##################\n+QUERY_ORDER_BY=\"SELECT number AS a, number % 2 AS b FROM numbers(10) ORDER BY a DESC NULLS FIRST WITH FILL FROM 2 TO 1 STEP -1, b DESC NULLS FIRST WITH FILL FROM 2 TO 1 STEP -1\"\n+QUERY_ORDER_BY_TUPLE=\"SELECT number AS a, number % 2 AS b FROM numbers(10) ORDER BY (a, b) DESC NULLS FIRST WITH FILL FROM 2 TO 1 STEP -1\"\n+\n+EXPLAIN=\"EXPLAIN SYNTAX\"\n+OUTPUT_EXPLAIN_ORDER_BY=$($CLICKHOUSE_CLIENT -q \"$EXPLAIN $QUERY_ORDER_BY\")\n+echo $OUTPUT_EXPLAIN_ORDER_BY\n+OUTPUT_EXPLAIN_ORDER_BY_TUPLE=$($CLICKHOUSE_CLIENT -q \"$EXPLAIN $QUERY_ORDER_BY_TUPLE\")\n+echo $OUTPUT_EXPLAIN_ORDER_BY_TUPLE\n+\n+[ \"$OUTPUT_EXPLAIN_ORDER_BY\" == \"$OUTPUT_EXPLAIN_ORDER_BY_TUPLE\" ] && echo \"OK\"\n",
  "problem_statement": "ORDER BY with columns in braces\nPerformance of ORDER BY on sorting key prefix with braces is 2x slower than without due to inefficient execution plan.\r\nWithout braces:\r\n```sql\r\nEXPLAIN PIPELINE\r\nSELECT\r\n    CounterID,\r\n    EventDate\r\nFROM hits_v1\r\nORDER BY\r\n    CounterID ASC,\r\n    EventDate ASC\r\n\r\n\u250c\u2500explain\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 (Expression)                      \u2502\r\n\u2502 ExpressionTransform               \u2502\r\n\u2502   (Sorting)                       \u2502\r\n\u2502   MergingSortedTransform 19 \u2192 1   \u2502\r\n\u2502     (Expression)                  \u2502\r\n\u2502     ExpressionTransform \u00d7 19      \u2502\r\n\u2502       (ReadFromMergeTree)         \u2502\r\n\u2502       MergeTreeInOrder \u00d7 19 0 \u2192 1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\nWith braces:\r\n```sql\r\nEXPLAIN PIPELINE\r\nSELECT\r\n    CounterID,\r\n    EventDate\r\nFROM hits_v1\r\nORDER BY (CounterID, EventDate) ASC\r\n\r\n\u250c\u2500explain\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 (Expression)                           \u2502\r\n\u2502 ExpressionTransform                    \u2502\r\n\u2502   (Sorting)                            \u2502\r\n\u2502   MergingSortedTransform 16 \u2192 1        \u2502\r\n\u2502     MergeSortingTransform \u00d7 16         \u2502\r\n\u2502       LimitsCheckingTransform \u00d7 16     \u2502\r\n\u2502         PartialSortingTransform \u00d7 16   \u2502\r\n\u2502           (Expression)                 \u2502\r\n\u2502           ExpressionTransform \u00d7 16     \u2502\r\n\u2502             (ReadFromMergeTree)        \u2502\r\n\u2502             MergeTreeThread \u00d7 16 0 \u2192 1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\n",
  "hints_text": "AFAIU, the issue is in this function\r\nhttps://github.com/ClickHouse/ClickHouse/blob/2e2ef087129ed072404bdc084e8028a5c5869dc0/src/Interpreters/InterpreterSelectQuery.cpp#L889\r\nIt doesn't consider the case that `OrderByElement` can have `Function tuple` as a child, and returns `SortDescription` with one column instead of 2 columns.\r\n\r\n`EXPLAIN AST` for `ORDER BY` with braces:\r\n<pre>\r\nEXPLAIN AST\r\nSELECT\r\n    CounterID,\r\n    EventDate\r\nFROM hits_v1\r\nORDER BY (CounterID, EventDate) ASC\r\n\r\n\u250c\u2500explain\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 SelectWithUnionQuery (children 1)           \u2502\r\n\u2502  ExpressionList (children 1)                \u2502\r\n\u2502   SelectQuery (children 3)                  \u2502\r\n\u2502    ExpressionList (children 2)              \u2502\r\n\u2502     Identifier CounterID                    \u2502\r\n\u2502     Identifier EventDate                    \u2502\r\n\u2502    TablesInSelectQuery (children 1)         \u2502\r\n\u2502     TablesInSelectQueryElement (children 1) \u2502\r\n\u2502      TableExpression (children 1)           \u2502\r\n\u2502       TableIdentifier hits_v1               \u2502\r\n\u2502    ExpressionList (children 1)              \u2502\r\n\u2502     <b>OrderByElement (children 1)</b>             \u2502\r\n\u2502      <b>Function tuple (children 1)</b>            \u2502\r\n\u2502       ExpressionList (children 2)           \u2502\r\n\u2502        Identifier CounterID                 \u2502\r\n\u2502        Identifier EventDate                 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n</pre>\r\n`EXPLAIN AST` for `ORDER BY` w/o braces for comparison:\r\n```sql\r\nEXPLAIN AST\r\nSELECT\r\n    CounterID,\r\n    EventDate\r\nFROM hits_v1\r\nORDER BY\r\n    CounterID ASC,\r\n    EventDate ASC\r\n\r\nQuery id: 2a9d0c75-a0a3-4e9b-8cf8-e25db4fd0e7b\r\n\r\n\u250c\u2500explain\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 SelectWithUnionQuery (children 1)           \u2502\r\n\u2502  ExpressionList (children 1)                \u2502\r\n\u2502   SelectQuery (children 3)                  \u2502\r\n\u2502    ExpressionList (children 2)              \u2502\r\n\u2502     Identifier CounterID                    \u2502\r\n\u2502     Identifier EventDate                    \u2502\r\n\u2502    TablesInSelectQuery (children 1)         \u2502\r\n\u2502     TablesInSelectQueryElement (children 1) \u2502\r\n\u2502      TableExpression (children 1)           \u2502\r\n\u2502       TableIdentifier hits_v1               \u2502\r\n\u2502    ExpressionList (children 2)              \u2502\r\n\u2502     OrderByElement (children 1)             \u2502\r\n\u2502      Identifier CounterID                   \u2502\r\n\u2502     OrderByElement (children 1)             \u2502\r\n\u2502      Identifier EventDate                   \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```",
  "created_at": "2022-07-05T21:27:15Z"
}