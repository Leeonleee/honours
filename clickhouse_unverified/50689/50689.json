{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 50689,
  "instance_id": "ClickHouse__ClickHouse-50689",
  "issue_numbers": [
    "29880"
  ],
  "base_commit": "23cff1fc32a0e3fbc8e2b3453ea909a69ead2964",
  "patch": "diff --git a/docs/en/interfaces/cli.md b/docs/en/interfaces/cli.md\nindex f670d4640068..8779dd1a5443 100644\n--- a/docs/en/interfaces/cli.md\n+++ b/docs/en/interfaces/cli.md\n@@ -194,7 +194,129 @@ You can pass parameters to `clickhouse-client` (all parameters have a default va\n - `--print-profile-events` \u2013 Print `ProfileEvents` packets.\n - `--profile-events-delay-ms` \u2013 Delay between printing `ProfileEvents` packets (-1 - print only totals, 0 - print every single packet).\n \n-Since version 20.5, `clickhouse-client` has automatic syntax highlighting (always enabled).\n+Instead of `--host`, `--port`, `--user` and `--password` options, ClickHouse client also supports connection strings (see next section).\n+\n+\n+## Connection string {#connection_string}\n+\n+clickhouse-client alternatively supports connecting to clickhouse server using a connection string similar to [MongoDB](https://www.mongodb.com/docs/manual/reference/connection-string/), [PostgreSQL](https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING), [MySQL](https://dev.mysql.com/doc/refman/8.0/en/connecting-using-uri-or-key-value-pairs.html#connecting-using-uri). It has the following syntax:\n+\n+```text\n+clickhouse:[//[user[:password]@][hosts_and_ports]][/database][?query_parameters]\n+```\n+\n+Where\n+\n+- `user` - (optional) is a user name,\n+- `password` - (optional) is a user password. If `:` is specified and the password is blank, the client will prompt for the user's password.\n+- `hosts_and_ports` - (optional) is a list of hosts and optional ports `host[:port] [, host:[port]], ...`,\n+- `database` - (optional) is the database name,\n+- `query_parameters` - (optional) is a list of key-value pairs `param1=value1[,&param2=value2], ...`. For some parameters, no value is required. Parameter names and values are case-sensitive.\n+\n+If no user is specified, `default` user without password will be used.\n+If no host is specified, the `localhost` will be used (localhost).\n+If no port is specified is not specified, `9000` will be used as port.\n+If no database is specified, the `default` database will be used.\n+\n+If the user name, password or database was specified in the connection string, it cannot be specified using `--user`, `--password` or `--database` (and vice versa).\n+\n+The host component can either be an a host name and IP address. Put an IPv6 address in square brackets to specify it:\n+\n+```text\n+clickhouse://[2001:db8::1234]\n+```\n+\n+URI allows multiple hosts to be connected to. Connection strings can contain multiple hosts. ClickHouse-client will try to connect to these hosts in order (i.e. from left to right). After the connection is established, no attempt to connect to the remaining hosts is made.\n+\n+The connection string must be specified as the first argument of clickhouse-client. The connection string can be combined with arbitrary other [command-line-options](#command-line-options) except `--host/-h` and `--port`.\n+\n+The following keys are allowed for component `query_parameter`:\n+\n+- `secure` or shorthanded `s` - no value. If specified, client will connect to the server over a secure connection (TLS). See `secure` in [command-line-options](#command-line-options)\n+\n+### Percent encoding {#connection_string_uri_percent_encoding}\n+\n+Non-US ASCII, spaces and special characters in the `user`, `password`, `hosts`, `database` and `query parameters` must be [percent-encoded](https://en.wikipedia.org/wiki/URL_encoding).\n+\n+### Examples {#connection_string_examples}\n+\n+Connect to localhost using port 9000 and execute the query `SELECT 1`.\n+\n+``` bash\n+clickhouse-client clickhouse://localhost:9000 --query \"SELECT 1\"\n+```\n+\n+Connect to localhost using user `john` with password `secret`, host `127.0.0.1` and port `9000`\n+\n+``` bash\n+clickhouse-client clickhouse://john:secret@127.0.0.1:9000\n+```\n+\n+Connect to localhost using default user, host with IPV6 address `[::1]` and port `9000`.\n+\n+``` bash\n+clickhouse-client clickhouse://[::1]:9000\n+```\n+\n+Connect to localhost using port 9000 in multiline mode.\n+\n+``` bash\n+clickhouse-client clickhouse://localhost:9000 '-m'\n+```\n+\n+Connect to localhost using port 9000 with the user `default`.\n+\n+``` bash\n+clickhouse-client clickhouse://default@localhost:9000\n+\n+# equivalent to:\n+clickhouse-client clickhouse://localhost:9000 --user default\n+```\n+\n+Connect to localhost using port 9000 to `my_database` database.\n+\n+``` bash\n+clickhouse-client clickhouse://localhost:9000/my_database\n+\n+# equivalent to:\n+clickhouse-client clickhouse://localhost:9000 --database my_database\n+```\n+\n+Connect to localhost using port 9000 to `my_database` database specified in the connection string and a secure connection using shorthanded 's' URI parameter.\n+\n+```bash\n+clickhouse-client clickhouse://localhost/my_database?s\n+\n+# equivalent to:\n+clickhouse-client clickhouse://localhost/my_database -s\n+```\n+\n+Connect to default host using default port, default user, and default database.\n+\n+``` bash\n+clickhouse-client clickhouse:\n+```\n+\n+Connect to the default host using the default port, using user `my_user` and no password.\n+\n+``` bash\n+clickhouse-client clickhouse://my_user@\n+\n+# Using a blank password between : and @ means to asking user to enter the password before starting the connection.\n+clickhouse-client clickhouse://my_user:@\n+```\n+\n+Connect to localhost using email as the user name. `@` symbol is percent encoded to `%40`.\n+\n+``` bash\n+clickhouse-client clickhouse://some_user%40some_mail.com@localhost:9000\n+```\n+\n+Connect to one of provides hosts: `192.168.1.15`, `192.168.1.25`.\n+\n+``` bash\n+clickhouse-client clickhouse://192.168.1.15,192.168.1.25 \n+```\n \n ### Configuration Files {#configuration_files}\n \ndiff --git a/docs/ru/interfaces/cli.md b/docs/ru/interfaces/cli.md\nindex 4c22eae02071..aa6ae3629e8a 100644\n--- a/docs/ru/interfaces/cli.md\n+++ b/docs/ru/interfaces/cli.md\n@@ -142,7 +142,129 @@ $ clickhouse-client --param_tbl=\"numbers\" --param_db=\"system\" --param_col=\"numbe\n -   `--history_file` - \u043f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443 \u0441 \u0438\u0441\u0442\u043e\u0440\u0438\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434.\n -   `--param_<name>` \u2014 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0434\u043b\u044f [\u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438](#cli-queries-with-parameters).\n \n-\u041d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 \u0432\u0435\u0440\u0441\u0438\u0438 20.5, \u0432 `clickhouse-client` \u0435\u0441\u0442\u044c \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u043f\u043e\u0434\u0441\u0432\u0435\u0442\u043a\u0430 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441\u0430 (\u0432\u043a\u043b\u044e\u0447\u0435\u043d\u0430 \u0432\u0441\u0435\u0433\u0434\u0430).\n+\u0412\u043c\u0435\u0441\u0442\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 `--host`, `--port`, `--user` \u0438 `--password` \u043a\u043b\u0438\u0435\u043d\u0442 ClickHouse \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f (\u0441\u043c\u043e\u0442\u0440\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0440\u0430\u0437\u0434\u0435\u043b).\n+\n+## \u0421\u0442\u0440\u043e\u043a\u0430 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f {#connection_string}\n+\n+clickhouse-client \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 clickhouse \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0441\u0442\u0440\u043e\u043a\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e\u0439 [MongoDB](https://www.mongodb.com/docs/manual/reference/connection-string/), [PostgreSQL](https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING), [MySQL](https://dev.mysql.com/doc/refman/8.0/en/connecting-using-uri-or-key-value-pairs.html#connecting-using-uri). \u041e\u043d\u0430 \u0438\u043c\u0435\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441:\n+\n+```text\n+clickhouse:[//[user[:password]@][hosts_and_ports]][/database][?query_parameters]\n+```\n+\n+\u0413\u0434\u0435\n+\n+- `user` - (\u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e) - \u044d\u0442\u043e \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f,\n+- `password` - (\u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e) - \u041f\u0430\u0440\u043e\u043b\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u0415\u0441\u043b\u0438 \u0441\u0438\u043c\u0432\u043e\u043b `:` \u0443\u043a\u0430\u043a\u0430\u0437\u0430\u043d, \u0438 \u043f\u0430\u0440\u043e\u043b\u044c \u043f\u0443\u0441\u0442, \u0442\u043e \u043a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u0438\u0442 \u0432\u0432\u0435\u0441\u0442\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u0430\u0440\u043e\u043b\u044c.\n+- `hosts_and_ports` - (\u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e) - \u0441\u043f\u0438\u0441\u043e\u043a \u0445\u043e\u0441\u0442\u043e\u0432 \u0438 \u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043f\u043e\u0440\u0442\u043e\u0432. `host[:port] [, host:[port]], ...`,\n+- `database` - (\u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e) - \u044d\u0442\u043e \u0438\u043c\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445,\n+- `query_parameters` - (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e) \u0441\u043f\u0438\u0441\u043e\u043a \u043f\u0430\u0440 \u043a\u043b\u044e\u0447-\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 `param1=value1[,&param2=value2], ...`. \u0414\u043b\u044f \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f. \u0418\u043c\u0435\u043d\u0430 \u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0447\u0443\u0432\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b \u043a \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0443.\n+\n+\u0415\u0441\u043b\u0438 user \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d, \u0431\u0443\u0434\u0443\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f `default`.\n+\u0415\u0441\u043b\u0438 host \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d, \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d \u0445\u043e\u0441\u0442 `localhost`.\n+\u0415\u0441\u043b\u0438 port \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d, \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043f\u043e\u0440\u0442 `9000`.\n+\u0415\u0441\u043b\u0438 \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u0430, \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 `default`.\n+\n+\u0415\u0441\u043b\u0438 \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u043f\u0430\u0440\u043e\u043b\u044c \u0438\u043b\u0438 \u0431\u0430\u0437\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0431\u044b\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u044b \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u0438\u0445 \u043d\u0435\u043b\u044c\u0437\u044f \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e `--user`, `--password` \u0438\u043b\u0438 `--database` (\u0438 \u043d\u0430\u043e\u0431\u043e\u0440\u043e\u0442).\n+\n+\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 host \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043b\u0438\u0431\u043e \u0438\u043c\u0435\u043d\u0435\u043c \u0445\u043e\u0441\u0442\u0430, \u043b\u0438\u0431\u043e IP-\u0430\u0434\u0440\u0435\u0441\u043e\u043c. \u0414\u043b\u044f \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f IPv6-\u0430\u0434\u0440\u0435\u0441\u0430 \u043f\u043e\u043c\u0435\u0441\u0442\u0438\u0442\u0435 \u0435\u0433\u043e \u0432 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0435 \u0441\u043a\u043e\u0431\u043a\u0438:\n+\n+```text\n+clickhouse://[2001:db8::1234]\n+```\n+\n+URI \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0442\u044c\u0441\u044f \u043a \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c \u0445\u043e\u0441\u0442\u0430\u043c. \u0421\u0442\u0440\u043e\u043a\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0433\u0443\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0445\u043e\u0441\u0442\u043e\u0432. ClickHouse-client \u0431\u0443\u0434\u0435\u0442 \u043f\u044b\u0442\u0430\u0442\u044c\u0441\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043a \u044d\u0442\u0438\u043c \u0445\u043e\u0441\u0442\u0430\u043c \u043f\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0443 (\u0442.\u0435. \u0441\u043b\u0435\u0432\u0430 \u043d\u0430\u043f\u0440\u0430\u0432\u043e). \u041f\u043e\u0441\u043b\u0435 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f \u043f\u043e\u043f\u044b\u0442\u043a\u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u043c\u0441\u044f \u0445\u043e\u0441\u0442\u0430\u043c \u043d\u0435 \u043f\u0440\u0435\u0434\u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0442\u0441\u044f.\n+\n+\n+\n+\u0421\u0442\u0440\u043e\u043a\u0430 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u0430 \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0435 clickhouse-client. \u0421\u0442\u0440\u043e\u043a\u0430 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043c\u043e\u0436\u0435\u0442 \u043a\u043e\u043c\u0431\u0438\u043d\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 [\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438] (#command-line-options) \u043a\u0440\u043e\u043c\u0435 `--host/-h` \u0438 `--port`.\n+\n+\u0414\u043b\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u0430 `query_parameter` \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u044b \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u043a\u043b\u044e\u0447\u0438:\n+\n+- `secure` \u0438\u043b\u0438 \u0441\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u043d\u043e `s` - \u0431\u0435\u0437 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435. \u0415\u0441\u043b\u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0443\u043a\u0430\u0437\u0430\u043d, \u0442\u043e \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0441 \u0441\u0435\u0440\u0432\u0435\u0440\u043e\u043c \u0431\u0443\u0434\u0435\u0442 \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0442\u044c\u0441\u044f \u043f\u043e \u0437\u0430\u0449\u0438\u0449\u0435\u043d\u043d\u043e\u043c\u0443 \u043a\u0430\u043d\u0430\u043b\u0443 (TLS). \u0421\u043c. `secure` \u0432 [command-line-options](#command-line-options).\n+\n+### \u041a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 URI {#connection_string_uri_percent_encoding}\n+\n+\u041d\u0435 US ASCII \u0438 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0432 \u0438\u043c\u0435\u043d\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f, \u043f\u0430\u0440\u043e\u043b\u0435, \u0445\u043e\u0441\u0442\u0430\u0445, \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c [\u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d\u044b](https://ru.wikipedia.org/wiki/URL#%D0%9A%D0%BE%D0%B4%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5_URL).\n+\n+### \u041f\u0440\u0438\u043c\u0435\u0440\u044b {#connection_string_examples}\n+\n+\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043a localhost \u0447\u0435\u0440\u0435\u0437 \u043f\u043e\u0440\u0442 9000 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 `SELECT 1`\n+\n+``` bash\n+clickhouse-client clickhouse://localhost:9000 --query \"SELECT 1\"\n+```\n+\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043a localhost, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f `john` \u0441 \u043f\u0430\u0440\u043e\u043b\u0435\u043c `secret`, \u0445\u043e\u0441\u0442 `127.0.0.1` \u0438 \u043f\u043e\u0440\u0442 `9000`\n+\n+``bash\n+clickhouse-client clickhouse://john:secret@127.0.0.1:9000\n+```\n+\n+\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043a localhost, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0445\u043e\u0441\u0442 \u0441 IPV6 \u0430\u0434\u0440\u0435\u0441\u043e\u043c `[::1]` \u0438 \u043f\u043e\u0440\u0442 `9000`.\n+\n+``` bash\n+clickhouse-client clickhouse://[::1]:9000\n+```\n+\n+\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043a localhost \u0447\u0435\u0440\u0435\u0437 \u043f\u043e\u0440\u0442 9000  \u043c\u043d\u043e\u0433\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435.\n+\n+``` bash\n+clickhouse-client clickhouse://localhost:9000 '-m'\n+```\n+\n+\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043a localhost \u0447\u0435\u0440\u0435\u0437 \u043f\u043e\u0440\u0442 9000 \u0441 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u043c default.\n+\n+``` bash\n+clickhouse-client clickhouse://default@localhost:9000\n+\n+# \u042d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u0442\u043d\u043e:\n+clickhouse-client clickhouse://localhost:9000 --user default\n+```\n+\n+\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043a localhost \u0447\u0435\u0440\u0435\u0437 \u043f\u043e\u0440\u0442 9000 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 `my_database`\n+\n+``` bash\n+clickhouse-client clickhouse://localhost:9000/my_database\n+\n+# \u042d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u0442\u043d\u043e:\n+clickhouse-client clickhouse://localhost:9000 --database my_database\n+```\n+\n+\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043a localhost \u0447\u0435\u0440\u0435\u0437 \u043f\u043e\u0440\u0442 9000 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 `my_database`, \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0439 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0431\u0435\u0437\u043e\u043f\u0430\u0441\u043d\u044b\u043c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435\u043c  \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043a\u043e\u0440\u043e\u0442\u043a\u043e\u0433\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0430 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 URI 's'.\n+\n+``` bash\n+clickhouse-client clickhouse://localhost/my_database?s\n+\n+# \u042d\u043a\u0432\u0438\u0432\u0430\u043b\u0435\u0442\u043d\u043e:\n+clickhouse-client clickhouse://localhost/my_database -s\n+```\n+\n+\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043a \u0445\u043e\u0441\u0442\u0443 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0440\u0442\u0430 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0438 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e.\n+\n+``` bash\n+clickhouse-client clickhouse:\n+```\n+\n+\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043a \u0445\u043e\u0441\u0442\u0443 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0447\u0435\u0440\u0435\u0437 \u043f\u043e\u0440\u0442 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f `my_user` \u0431\u0435\u0437 \u043f\u0430\u0440\u043e\u043b\u044f.\n+\n+``` bash\n+clickhouse-client clickhouse://my_user@\n+\n+# \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0443\u0441\u0442\u043e\u0433\u043e \u043f\u0430\u0440\u043e\u043b\u044f \u043c\u0435\u0436\u0434\u0443 : \u0438 @ \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u0432\u0435\u0441\u0442\u0438 \u043f\u0430\u0440\u043e\u043b\u044c \u043f\u0435\u0440\u0435\u0434 \u043d\u0430\u0447\u0430\u043b\u043e\u043c \u0441\u043e\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u044f.\n+clickhouse-client clickhouse://my_user:@\n+```\n+\n+\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u044c\u0441\u044f \u043a localhost, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u0443\u044e \u043f\u043e\u0447\u0442\u0443, \u043a\u0430\u043a \u0438\u043c\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. \u0421\u0438\u043c\u0432\u043e\u043b `@` \u0437\u0430\u043a\u043e\u0434\u0438\u0440\u043e\u0432\u0430\u043d \u043a\u0430\u043a `%40`.\n+\n+``` bash\n+clickhouse-client clickhouse://some_user%40some_mail.com@localhost:9000\n+```\n+\n+\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u0442\u0441\u044f \u043a \u043e\u0434\u043d\u043e\u043c\u0443 \u0438\u0437 \u0445\u043e\u0441\u0442\u043e\u0432: `192.168.1.15`, `192.168.1.25`.\n+\n+``` bash\n+clickhouse-client clickhouse://192.168.1.15,192.168.1.25 \n+```\n \n ### \u041a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b {#configuration_files}\n \ndiff --git a/programs/client/Client.cpp b/programs/client/Client.cpp\nindex 32a07284d268..6c3df3520e91 100644\n--- a/programs/client/Client.cpp\n+++ b/programs/client/Client.cpp\n@@ -5,13 +5,13 @@\n #include <iostream>\n #include <iomanip>\n #include <optional>\n-#include <string_view>\n #include <Common/scope_guard_safe.h>\n #include <boost/program_options.hpp>\n #include <boost/algorithm/string/replace.hpp>\n #include <filesystem>\n #include <string>\n #include \"Client.h\"\n+#include \"Client/ConnectionString.h\"\n #include \"Core/Protocol.h\"\n #include \"Parsers/formatAST.h\"\n \n@@ -1248,6 +1248,9 @@ void Client::readArguments(\n     std::vector<Arguments> & external_tables_arguments,\n     std::vector<Arguments> & hosts_and_ports_arguments)\n {\n+    bool has_connection_string = argc >= 2 && tryParseConnectionString(std::string_view(argv[1]), common_arguments, hosts_and_ports_arguments);\n+    int start_argument_index = has_connection_string ? 2 : 1;\n+\n     /** We allow different groups of arguments:\n         * - common arguments;\n         * - arguments for any number of external tables each in form \"--external args...\",\n@@ -1260,10 +1263,13 @@ void Client::readArguments(\n     std::string prev_host_arg;\n     std::string prev_port_arg;\n \n-    for (int arg_num = 1; arg_num < argc; ++arg_num)\n+    for (int arg_num = start_argument_index; arg_num < argc; ++arg_num)\n     {\n         std::string_view arg = argv[arg_num];\n \n+        if (has_connection_string)\n+            checkIfCmdLineOptionCanBeUsedWithConnectionString(arg);\n+\n         if (arg == \"--external\")\n         {\n             in_external_group = true;\ndiff --git a/src/Client/ConnectionString.cpp b/src/Client/ConnectionString.cpp\nnew file mode 100644\nindex 000000000000..f4a4e73c1987\n--- /dev/null\n+++ b/src/Client/ConnectionString.cpp\n@@ -0,0 +1,239 @@\n+#include \"ConnectionString.h\"\n+\n+#include <Common/Exception.h>\n+#include <Poco/Exception.h>\n+#include <Poco/URI.h>\n+\n+#include <array>\n+#include <iostream>\n+#include <string>\n+#include <unordered_map>\n+\n+namespace DB\n+{\n+\n+namespace ErrorCodes\n+{\n+    extern const int BAD_ARGUMENTS;\n+}\n+\n+}\n+\n+namespace\n+{\n+\n+using namespace std::string_literals;\n+using namespace std::literals::string_view_literals;\n+\n+constexpr auto CONNECTION_URI_SCHEME = \"clickhouse:\"sv;\n+\n+const std::unordered_map<std::string_view, std::string_view> PROHIBITED_CLIENT_OPTIONS = {\n+    /// Client option, client option long name\n+    {\"-h\", \"--host\"},\n+    {\"--host\", \"--host\"},\n+    {\"--port\", \"--port\"},\n+    {\"--connection\", \"--connection\"},\n+};\n+\n+std::string uriDecode(const std::string & uri_encoded_string, bool plus_as_space)\n+{\n+    std::string decoded_string;\n+    Poco::URI::decode(uri_encoded_string, decoded_string, plus_as_space);\n+    return decoded_string;\n+}\n+\n+void getHostAndPort(const Poco::URI & uri, std::vector<std::vector<std::string>> & hosts_and_ports_arguments)\n+{\n+    std::vector<std::string> host_and_port;\n+    const std::string & host = uri.getHost();\n+    if (!host.empty())\n+    {\n+        host_and_port.push_back(\"--host=\" + uriDecode(host, false));\n+    }\n+\n+    // Port can be written without host (\":9000\"). Empty host name equals to default host.\n+    auto port = uri.getPort();\n+    if (port != 0)\n+        host_and_port.push_back(\"--port=\" + std::to_string(port));\n+\n+    if (!host_and_port.empty())\n+        hosts_and_ports_arguments.push_back(std::move(host_and_port));\n+}\n+\n+void buildConnectionString(\n+    std::string_view host_and_port,\n+    std::string_view right_part,\n+    Poco::URI & uri,\n+    std::vector<std::vector<std::string>> & hosts_and_ports_arguments)\n+{\n+    // User info does not matter in sub URI\n+    auto uri_string = std::string(CONNECTION_URI_SCHEME);\n+    if (!host_and_port.empty())\n+    {\n+        uri_string.append(\"//\");\n+        uri_string.append(host_and_port);\n+    }\n+\n+    // Right part from string includes '/database?[params]'\n+    uri_string.append(right_part);\n+    try\n+    {\n+        uri = Poco::URI(uri_string);\n+    }\n+    catch (const Poco::URISyntaxException & invalid_uri_exception)\n+    {\n+        throw DB::Exception(DB::ErrorCodes::BAD_ARGUMENTS,\n+                            \"Invalid connection string syntax {}: {}\", uri_string, invalid_uri_exception.what());\n+    }\n+\n+    getHostAndPort(uri, hosts_and_ports_arguments);\n+}\n+\n+std::string makeArgument(const std::string & connection_string_parameter_name)\n+{\n+    return (connection_string_parameter_name.size() == 1 ? \"-\"s : \"--\"s) + connection_string_parameter_name;\n+}\n+\n+}\n+\n+namespace DB\n+{\n+\n+bool tryParseConnectionString(\n+    std::string_view connection_string,\n+    std::vector<std::string> & common_arguments,\n+    std::vector<std::vector<std::string>> & hosts_and_ports_arguments)\n+{\n+    if (connection_string == CONNECTION_URI_SCHEME)\n+        return true;\n+\n+    if (!connection_string.starts_with(CONNECTION_URI_SCHEME))\n+        return false;\n+\n+    size_t offset = CONNECTION_URI_SCHEME.size();\n+    if ((connection_string.substr(offset).starts_with(\"//\")))\n+        offset += 2;\n+\n+    auto hosts_end_pos = std::string_view::npos;\n+    auto hosts_or_user_info_end_pos = connection_string.find_first_of(\"?/@\", offset);\n+\n+    auto has_user_info = hosts_or_user_info_end_pos != std::string_view::npos && connection_string[hosts_or_user_info_end_pos] == '@';\n+    if (has_user_info)\n+    {\n+        // Move offset right after user info\n+        offset = hosts_or_user_info_end_pos + 1;\n+        hosts_end_pos = connection_string.find_first_of(\"?/@\", offset);\n+        // Several '@' symbols in connection string is prohibited.\n+        // If user name contains '@' then it should be percent-encoded.\n+        // several users: 'usr1@host1,@usr2@host2' is invalid.\n+        if (hosts_end_pos != std::string_view::npos && connection_string[hosts_end_pos] == '@')\n+        {\n+            throw Exception(ErrorCodes::BAD_ARGUMENTS,\n+                            \"Symbols '@' in URI in password or user name should be percent-encoded. Individual user names for different hosts also prohibited. {}\",\n+                            connection_string);\n+        }\n+    }\n+    else\n+        hosts_end_pos = hosts_or_user_info_end_pos;\n+\n+    const auto * hosts_end = hosts_end_pos != std::string_view::npos ? connection_string.begin() + hosts_end_pos\n+                                                                     : connection_string.end();\n+\n+    try\n+    {\n+        /** Poco::URI doesn't support several hosts in URI.\n+          * Split string clickhouse:[user[:password]@]host1:port1, ... , hostN:portN[database]?[query_parameters]\n+          * into multiple string for each host:\n+          * clickhouse:[user[:password]@]host1:port1[database]?[query_parameters]\n+          * ...\n+          * clickhouse:[user[:password]@]hostN:portN[database]?[query_parameters]\n+          */\n+        Poco::URI uri;\n+        const auto * last_host_begin = connection_string.begin() + offset;\n+        for (const auto * it = last_host_begin; it != hosts_end; ++it)\n+        {\n+            if (*it == ',')\n+            {\n+                buildConnectionString({last_host_begin, it}, {hosts_end, connection_string.end()}, uri, hosts_and_ports_arguments);\n+                last_host_begin = it + 1;\n+            }\n+        }\n+\n+        if (uri.empty())\n+        {\n+            // URI has no host specified\n+            uri = std::string(connection_string);\n+            getHostAndPort(uri, hosts_and_ports_arguments);\n+        }\n+        else\n+            buildConnectionString({last_host_begin, hosts_end}, {hosts_end, connection_string.end()}, uri, hosts_and_ports_arguments);\n+\n+        Poco::URI::QueryParameters params = uri.getQueryParameters();\n+        for (const auto & param : params)\n+        {\n+            if (param.first == \"secure\" || param.first == \"s\")\n+            {\n+                if (!param.second.empty())\n+                    throw Exception(ErrorCodes::BAD_ARGUMENTS, \"secure URI query parameter does not allow value\");\n+\n+                common_arguments.push_back(makeArgument(param.first));\n+            }\n+            else\n+                throw Exception(ErrorCodes::BAD_ARGUMENTS, \"URI query parameter {} is not supported\", param.first);\n+        }\n+\n+        auto user_info = uri.getUserInfo();\n+        if (!user_info.empty())\n+        {\n+            // Poco::URI doesn't decode user name/password by default.\n+            // But ClickHouse allows to have users with email user name like: 'john@some_mail.com'\n+            // john@some_mail.com should be percent-encoded: 'john%40some_mail.com'\n+            size_t pos = user_info.find(':');\n+            if (pos != std::string::npos)\n+            {\n+                common_arguments.push_back(\"--user\");\n+                common_arguments.push_back(uriDecode(user_info.substr(0, pos), true));\n+\n+                ++pos; // Skip ':'\n+                common_arguments.push_back(\"--password\");\n+                if (user_info.size() > pos + 1)\n+                    common_arguments.push_back(uriDecode(user_info.substr(pos), true));\n+                else\n+                {\n+                    // in case of user_info == 'user:', ':' is specified, but password is empty\n+                    // then add password argument \"\\n\" which means: Ask user for a password.\n+                    common_arguments.push_back(\"\\n\");\n+                }\n+            }\n+            else\n+            {\n+                common_arguments.push_back(\"--user\");\n+                common_arguments.push_back(uriDecode(user_info, true));\n+            }\n+        }\n+\n+        const auto & database_name = uri.getPath();\n+        size_t start_symbol = !database_name.empty() && database_name[0] == '/' ? 1u : 0u;\n+        if (database_name.size() > start_symbol)\n+        {\n+            common_arguments.push_back(\"--database\");\n+            common_arguments.push_back(start_symbol == 0u ? database_name : database_name.substr(start_symbol));\n+        }\n+    }\n+    catch (const Poco::URISyntaxException & invalid_uri_exception)\n+    {\n+        throw DB::Exception(DB::ErrorCodes::BAD_ARGUMENTS,\n+                            \"Invalid connection string '{}': {}\", connection_string, invalid_uri_exception.what());\n+    }\n+\n+    return true;\n+}\n+\n+void checkIfCmdLineOptionCanBeUsedWithConnectionString(std::string_view command_line_option)\n+{\n+    if (PROHIBITED_CLIENT_OPTIONS.contains(command_line_option))\n+        throw Exception(ErrorCodes::BAD_ARGUMENTS,\n+                        \"Mixing a connection string and {} option is prohibited\", PROHIBITED_CLIENT_OPTIONS.at(command_line_option));\n+}\n+\n+}\ndiff --git a/src/Client/ConnectionString.h b/src/Client/ConnectionString.h\nnew file mode 100644\nindex 000000000000..ad63e9cda3d4\n--- /dev/null\n+++ b/src/Client/ConnectionString.h\n@@ -0,0 +1,27 @@\n+#pragma once\n+\n+#include <string>\n+#include <string_view>\n+#include <vector>\n+\n+namespace DB\n+{\n+/** Tries to parse ClickHouse connection string.\n+ * if @connection_string starts with 'clickhouse:' then connection string will be parsed\n+ * and converted into a set of arguments for the client.\n+ * Connection string format is similar to URI \"clickhouse:[//[user[:password]@][hosts_and_ports]][/dbname][?query_parameters]\"\n+ * with the difference that hosts_and_ports can contain multiple hosts separated by ','.\n+ * example: clickhouse://user@host1:port1,host2:port2\n+ * @return Returns false if no connection string was specified. If a connection string was specified, returns true if it is valid, and throws an exception if it is invalid.\n+ * @exception Throws DB::Exception if URI has valid scheme (clickhouse:), but invalid internals.\n+*/\n+bool tryParseConnectionString(\n+    std::string_view connection_string,\n+    std::vector<std::string> & common_arguments,\n+    std::vector<std::vector<std::string>> & hosts_and_ports_arguments);\n+\n+// Throws DB::Exception with BAD_ARGUMENTS if the given command line argument\n+// is not allowed to be used with a connection string.\n+void checkIfCmdLineOptionCanBeUsedWithConnectionString(std::string_view command_line_option);\n+\n+}\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02784_connection_string.reference b/tests/queries/0_stateless/02784_connection_string.reference\nnew file mode 100644\nindex 000000000000..9d58d485a14b\n--- /dev/null\n+++ b/tests/queries/0_stateless/02784_connection_string.reference\n@@ -0,0 +1,126 @@\n+0\n+1\n+2\n+3\n+4\n+5\n+6\n+7\n+8\n+9\n+10\n+11\n+12\n+13\n+14\n+15\n+16\n+17\n+18\n+19\n+20\n+21\n+22\n+23\n+24\n+25\n+26\n+27\n+28\n+29\n+30\n+31\n+32\n+33\n+34\n+35\n+36\n+37\n+38\n+39\n+40\n+41\n+42\n+43\n+44\n+45\n+46\n+47\n+48\n+49\n+50\n+51\n+52\n+53\n+54\n+55\n+56\n+57\n+58\n+59\n+60\n+61\n+62\n+63\n+64\n+65\n+66\n+67\n+68\n+500\n+501\n+502\n+1000\n+1001\n+1002\n+1003\n+Bad arguments\n+Bad arguments\n+Bad arguments\n+Bad arguments\n+Bad arguments\n+Bad arguments\n+Bad arguments\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+Authentication failed\n+Authentication failed\ndiff --git a/tests/queries/0_stateless/02784_connection_string.sh b/tests/queries/0_stateless/02784_connection_string.sh\nnew file mode 100755\nindex 000000000000..8353ac5b1e40\n--- /dev/null\n+++ b/tests/queries/0_stateless/02784_connection_string.sh\n@@ -0,0 +1,159 @@\n+#!/usr/bin/env bash\n+\n+CUR_DIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CUR_DIR\"/../shell_config.sh\n+\n+USER_INFOS=('default' '')\n+HOSTS_PORTS=(\"$CLICKHOUSE_HOST:$CLICKHOUSE_PORT_TCP\" \"$CLICKHOUSE_HOST\" \"$CLICKHOUSE_HOST:\" \":$CLICKHOUSE_PORT_TCP\"  \"127.0.0.1\" \"127.0.0.1:$CLICKHOUSE_PORT_TCP\" \"$CLICKHOUSE_HOST:$CLICKHOUSE_PORT_TCP,invalid_host:9000\" \"[0000:0000:0000:0000:0000:0000:0000:0001]\" \"[::1]\"  \"[::1]:$CLICKHOUSE_PORT_TCP\" \"\" )\n+DATABASES=(\"$CLICKHOUSE_DATABASE\" \"\")\n+\n+TEST_INDEX=0\n+\n+function runClient() \n+{\n+    $CLICKHOUSE_CLIENT_BINARY \"$@\" -q \"SELECT $TEST_INDEX\" --log_comment 02766_connection_string.sh --send_logs_level=warning\n+    ((++TEST_INDEX))\n+}\n+\n+function testConnectionString() \n+{\n+    if [ \"$database\" == \"\" ]; then\n+        runClient \"clickhouse:$1\"\n+        runClient \"clickhouse:$1/\"\n+    else\n+        runClient \"clickhouse:$1/$database\"\n+    fi\n+}\n+\n+function testConnectionWithUserName() \n+{\n+if [ \"$user_info\" == \"\" ] && [ \"$host_port\" == \"\" ]; then\n+        testConnectionString \"//\"\n+        testConnectionString \"\"\n+    else\n+        testConnectionString \"//$user_info@$host_port\"\n+    fi\n+}\n+\n+for user_info in \"${USER_INFOS[@]}\"\n+do\n+    for host_port in \"${HOSTS_PORTS[@]}\"\n+    do\n+        for database in \"${DATABASES[@]}\"\n+        do\n+            testConnectionWithUserName\n+        done\n+    done\n+done\n+\n+# Specific user and password\n+TEST_INDEX=500\n+TEST_USER_NAME=\"test_user_02771_$$\"\n+TEST_USER_EMAIL_NAME=\"test_user_02771_$$@some_mail.com\"\n+TEST_USER_EMAIL_NAME_ENCODED=\"test_user_02771_$$%40some_mail.com\"\n+\n+TEST_USER_PASSWORD=\"zyx%$&abc\" \n+# %, $, & percent encoded\n+TEST_USER_PASSWORD_ENCODED=\"zyx%25%24%26abc\" \n+\n+$CLICKHOUSE_CLIENT -q \"CREATE USER '$TEST_USER_NAME'\"\n+$CLICKHOUSE_CLIENT -q \"CREATE USER '$TEST_USER_EMAIL_NAME' IDENTIFIED WITH plaintext_password BY '$TEST_USER_PASSWORD'\"\n+\n+runClient \"clickhouse://$TEST_USER_NAME@$CLICKHOUSE_HOST/$CLICKHOUSE_DATABASE\"\n+runClient \"clickhouse://$TEST_USER_EMAIL_NAME_ENCODED:$TEST_USER_PASSWORD_ENCODED@$CLICKHOUSE_HOST/$CLICKHOUSE_DATABASE\"\n+\n+$CLICKHOUSE_CLIENT -q \"DROP USER '$TEST_USER_NAME'\"\n+$CLICKHOUSE_CLIENT -q \"DROP USER '$TEST_USER_EMAIL_NAME'\"\n+\n+# Percent-encoded database in non-ascii symbols \n+UTF8_DATABASE=\"\u0411\u0430\u0437\u0430\u0414\u0430\u043d\u043d\u044b\u0445_$$\"\n+UTF8_DATABASE_PERCENT_ENCODED=\"%D0%91%D0%B0%D0%B7%D0%B0%D0%94%D0%B0%D0%BD%D0%BD%D1%8B%D1%85_$$\"\n+$CLICKHOUSE_CLIENT -q \"CREATE DATABASE IF NOT EXISTS \\`$UTF8_DATABASE\\`\"\n+runClient \"clickhouse://default@$CLICKHOUSE_HOST/$UTF8_DATABASE_PERCENT_ENCODED\"\n+$CLICKHOUSE_CLIENT -q \"DROP DATABASE IF EXISTS \\`$UTF8_DATABASE\\`\"\n+\n+# clickhouse-client extra options cases \n+TEST_INDEX=1000\n+\n+runClient \"clickhouse://$CLICKHOUSE_HOST/\" --user 'default'\n+runClient \"clickhouse://$CLICKHOUSE_HOST/default\" --user 'default'\n+runClient \"clickhouse:\" --database \"$CLICKHOUSE_DATABASE\"\n+\n+# User 'default' and default host\n+runClient \"clickhouse://default@\"\n+\n+# Invalid URI cases\n+TEST_INDEX=10000\n+runClient \"clickhouse://default:@$CLICKHOUSE_HOST/\" --user 'default' 2>&1 | grep -o 'Bad arguments'\n+runClient \"clickhouse://default:pswrd@$CLICKHOUSE_HOST/\" --user 'default' 2>&1 | grep -o 'Bad arguments'\n+runClient \"clickhouse://default:pswrd@$CLICKHOUSE_HOST/\" --password 'pswrd' 2>&1 | grep -o 'Bad arguments'\n+runClient \"clickhouse:///$CLICKHOUSE_DATABASE\" --database \"$CLICKHOUSE_DATABASE\" 2>&1 | grep -o 'Bad arguments'\n+runClient \"clickhouse://$CLICKHOUSE_HOST/$CLICKHOUSE_DATABASE\" --database \"$CLICKHOUSE_DATABASE\" 2>&1 | grep -o 'Bad arguments'\n+runClient \"clickhouse://$CLICKHOUSE_HOST/$CLICKHOUSE_DATABASE?s\" --database \"$CLICKHOUSE_DATABASE\" 2>&1 | grep -o 'Bad arguments'\n+runClient \"clickhouse:/$CLICKHOUSE_DATABASE?s\" --database \"$CLICKHOUSE_DATABASE\" 2>&1 | grep -o 'Bad arguments'\n+\n+runClient \"http://\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+runClient \"click_house:\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+\n+TEST_INDEX=1000087\n+# Using connection string prohibits to use --host and --port options\n+runClient \"clickhouse://default:@$CLICKHOUSE_HOST/\" --host \"$CLICKHOUSE_HOST\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+runClient \"clickhouse://default:@$CLICKHOUSE_HOST:$CLICKHOUSE_PORT_TCP/\" --host \"$CLICKHOUSE_HOST\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+runClient \"clickhouse://default:@$CLICKHOUSE_HOST:$CLICKHOUSE_PORT_TCP/\" --port \"$CLICKHOUSE_PORT_TCP\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+runClient \"clickhouse://default:@$CLICKHOUSE_HOST:$CLICKHOUSE_PORT_TCP/\" --host \"$CLICKHOUSE_HOST\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+runClient \"clickhouse://default:@$CLICKHOUSE_HOST:$CLICKHOUSE_PORT_TCP/\" --host \"$CLICKHOUSE_HOST\" --host \"$CLICKHOUSE_HOST\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+runClient \"clickhouse://default:@$CLICKHOUSE_HOST:$CLICKHOUSE_PORT_TCP/\" --port \"$CLICKHOUSE_PORT_TCP\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+runClient \"clickhouse://default:@$CLICKHOUSE_HOST/\" --port \"$CLICKHOUSE_PORT_TCP\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+runClient \"clickhouse://$CLICKHOUSE_HOST/\" --port \"$CLICKHOUSE_PORT_TCP\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+runClient \"clickhouse://:@$CLICKHOUSE_HOST/\" --port \"$CLICKHOUSE_PORT_TCP\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+runClient \"clickhouse://$CLICKHOUSE_HOST/\" --port \"$CLICKHOUSE_PORT_TCP\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+runClient \"clickhouse://\" --host \"$CLICKHOUSE_HOST\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+runClient \"clickhouse:\" --port \"$CLICKHOUSE_PORT_TCP\" --host \"$CLICKHOUSE_HOST\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+runClient \"clickhouse://\" --port \"$CLICKHOUSE_PORT_TCP\" --host \"$CLICKHOUSE_HOST\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+runClient \"clickhouse:///\" --port \"$CLICKHOUSE_PORT_TCP\" --host \"$CLICKHOUSE_HOST\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+runClient \"clickhouse:///?\" --port \"$CLICKHOUSE_PORT_TCP\" --host \"$CLICKHOUSE_HOST\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+runClient \"clickhouse://:/?\" --port \"$CLICKHOUSE_PORT_TCP\" --host \"$CLICKHOUSE_HOST\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+runClient \"clickhouse:\" --database \"$CLICKHOUSE_DATABASE\" --port \"$CLICKHOUSE_PORT_TCP\" --host \"$CLICKHOUSE_HOST\" 2>&1 | grep -o 'BAD_ARGUMENTS' \n+\n+# Using clickhouse-client and connection is prohibited\n+runClient \"clickhouse:\" --connection \"connection\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+\n+# Space is used in connection string (This is prohibited).\n+runClient \" clickhouse:\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+runClient \"clickhouse: \" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+runClient \"clickhouse://host1 /\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+runClient \"clickhouse://host1, host2/\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+runClient \"clickhouse://host1 ,host2/\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+runClient \"clickhouse://host1 host2/\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+runClient \"clickhouse://host1/ database:\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+runClient \"clickhouse://user :password@host1\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+runClient \"clickhouse://user: password@host1\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+\n+# Connection string is not first argument\n+runClient --multiline \"clickhouse://default:@$CLICKHOUSE_HOST/\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+# Connection string used as the first and the second argument of client\n+runClient \"clickhouse://default:@$CLICKHOUSE_HOST/\" \"clickhouse://default:@$CLICKHOUSE_HOST/\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+\n+# Invalid hosts\n+runClient \"clickhouse://host1,,,\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+runClient \"clickhouse://,\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+\n+# Invalid parameters\n+runClient \"clickhouse:?invalid_parameter\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+runClient \"clickhouse:?invalid_parameter&secure\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+runClient \"clickhouse:?s&invalid_parameter\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+runClient \"clickhouse:?s&invalid_parameter=val\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+runClient \"clickhouse:?invalid_parameter=arg\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+runClient \"clickhouse:?invalid_parameter=arg&s\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+# Several users prohibited\n+runClient \"clickhouse://user1@localhost,default@localhost/\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+# Using '@' in user name is prohibited. User name should be percent-encoded.\n+runClient \"clickhouse://my_mail@email.com@host/\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+\n+# Wrong input cases \n+TEST_INDEX=100000\n+# Invalid user name\n+runClient \"clickhouse://non_exist_user@$CLICKHOUSE_HOST:$CLICKHOUSE_PORT_TCP/\" 2>&1 | grep -o 'Authentication failed'\n+# Invalid password\n+runClient \"clickhouse://default:invalid_password@$CLICKHOUSE_HOST:$CLICKHOUSE_PORT_TCP/\" 2>&1 | grep -o 'Authentication failed'\n",
  "problem_statement": "ClickHouse connection strings\n**Use case**\r\n\r\nNow you can connect to ClickHouse by specifiying separately host, port, username, password and other parameters.\r\n_clickhouse-client --host=... --port=... --user=... --password=..._\r\n\r\nIt is already possible to specify the connection string as a URI in many databases. Example from PostgreSQL\r\n_postgresql://localhost:5433/my_database_\r\n\r\nIt is simple, convenient and frequently used. You can just copy the link and connect.\r\n\r\n**Describe the solution you'd like**\r\n\r\nI want to achieve next general form of the connection URL:\r\n\r\n```\r\nclickhouse://[userspec@][hostspec][/dbname][?paramspec]\r\nwhere userspec is:\r\nuser[:password]\r\nwhere hostspec is:\r\n[host][:port][,...]\r\nand paramspec is:\r\nname=value[&...]\r\n```\r\nEx: `clickhouse://login:password@host:port/database`\r\nThere are many params for connecting to ClickHouse. Therefore last [?paramspec] is necessary.\r\nCredentials will be verified after connection string accepted if it is not specified.\r\n\r\nI propose this solution because it is convenient and general way. It is similar on example from PostgreSQL(details below).\r\n\r\n**Describe alternatives you've considered**\r\n\r\nOther implementations are similar:\r\n1) **PostgreSql**\r\n_postgresql://[userspec@][hostspec][/dbname][?paramspec]_\r\n```\r\nwhere userspec is:\r\nuser[:password]\r\nand hostspec is:\r\n[host][:port][,...]\r\nand paramspec is:\r\nname=value[&...]\r\n```\r\nThe following examples illustrate valid URI syntax:\r\n```\r\npostgresql://\r\npostgresql://localhost\r\npostgresql://localhost:5433\r\npostgresql://localhost/mydb\r\npostgresql://user@localhost\r\npostgresql://user:secret@localhost\r\npostgresql://other@localhost/otherdb?connect_timeout=10&application_name=myapp\r\npostgresql://host1:123,host2:456/somedb?target_session_attrs=any&application_name=myapp\r\n```\r\nhttps://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING\r\n\r\n2) **JDBC driver(SQL Server)**\r\n_jdbc:sqlserver://[serverName[\\instanceName][:portNumber]][;property=value[;property=value]]_\r\n```\r\nwhere:\r\n- jdbc:sqlserver:// (Required) is known as the subprotocol and is constant.\r\n- serverName (Optional) is the address of the server to connect to. This address can be a DNS or IP address, or it can be localhost or 127.0.0.1 for the local computer. If not specified in the connection URL, the server name must be specified in the properties collection.\r\n- instanceName (Optional) is the instance to connect to on serverName. If not specified, a connection to the default instance is made.\r\n- portNumber (Optional) is the port to connect to on serverName. The default is 1433. If you're using the default, you don't have to specify the port, nor its preceding ':', in the URL.\r\n- property (Optional) is one or more option connection properties. For more information, see Setting the connection properties. Any property from the list can be specified. Properties can only be delimited by using the semicolon (';'), and they can't be duplicated.\r\n```\r\nExamples:\r\n```\r\njdbc:sqlserver://localhost;user=MyUserName;password=*****;\r\njdbc:sqlserver://localhost:1433;databaseName=AdventureWorks;integratedSecurity=true;\r\n```\r\nhttps://docs.microsoft.com/en-us/sql/connect/jdbc/building-the-connection-url?view=sql-server-ver15\r\n\r\n3) **ODBC driver(SQL Server 2000)**\r\nDriver={SQL Server};Server=myServerAddress;Database=myDataBase;Uid=myUsername;Pwd=myPassword;\r\nhttps://www.connectionstrings.com/microsoft-sql-server-odbc-driver/\r\n\r\n4) **JDBC Oracle**\r\n\r\nConnect to Oracle Database SID. In some older versions of the Oracle database, the database is defined as a SID\r\n```\r\njdbc:oracle:thin:[<user>/<password>]@<host>[:<port>]:<SID>\r\nEx: jdbc:oracle:thin:@myoracle.db.server:1521:my_sid\r\n```\r\n\r\nConnect to Oracle Database Service Name\r\n```\r\njdbc:oracle:thin:[<user>/<password>]@//<host>[:<port>]/<service>\r\nEx: jdbc:oracle:thin:@//myoracle.db.server:1521/my_servicename\r\n```\r\nhttps://www.baeldung.com/java-jdbc-url-format\r\n\r\n5) **JDBC MySQL**\r\n_protocol//[hosts][/database][?properties]_\r\n```\r\njdbc:mysql://mysql.db.server:3306/my_database?useSSL=false&serverTimezone=UTC\r\nprotocol \u2013 jdbc:mysql:  // specific param for mysql. There are a lot of values.\r\nhost \u2013 mysql.db.server:3306\r\ndatabase \u2013 my_database\r\nproperties \u2013 useSSL=false&serverTimezone=UTC\r\n```\r\nhttps://www.baeldung.com/java-jdbc-url-format\r\n\r\nAnother examples for JDBC provided in screen:\r\n![image](https://user-images.githubusercontent.com/29354173/136739663-c77a10d2-390a-4c89-8fa2-a4d25cdd89a1.png)\r\nhttps://www.tutorialspoint.com/jdbc/jdbc-db-connections.htm\r\n\n",
  "hints_text": "in golang\r\nhttps://github.com/ClickHouse/clickhouse-go#dsn\r\nhttps://github.com/golang-migrate/migrate/tree/master/database/clickhouse\r\n\r\nin python sqlalchemy (supports both http and native)\r\nhttps://pypi.org/project/clickhouse-sqlalchemy/\r\n\r\nin python driver\r\nhttps://clickhouse-driver.readthedocs.io/en/latest/misc.html\nSeconded. For now I'm going to settle for setting an env var like `CLICKHOUSE_CONFIG={host:\"...\",username:\"...\",password:\"...\"}` and parsing that before creating the client.\n@rschu1ze Please assign this task to me. I just started working on it.",
  "created_at": "2023-06-08T02:28:31Z"
}