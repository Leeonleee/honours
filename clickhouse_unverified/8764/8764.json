{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 8764,
  "instance_id": "ClickHouse__ClickHouse-8764",
  "issue_numbers": [
    "8312"
  ],
  "base_commit": "c28e224e24006cf5b0234497ec73ea48b545c59e",
  "patch": "diff --git a/dbms/src/IO/readDecimalText.h b/dbms/src/IO/readDecimalText.h\nindex 4dad5fdb5579..5b2a3f76481a 100644\n--- a/dbms/src/IO/readDecimalText.h\n+++ b/dbms/src/IO/readDecimalText.h\n@@ -101,7 +101,13 @@ inline bool readDigits(ReadBuffer & buf, T & x, unsigned int & digits, int & exp\n             {\n                 ++buf.position();\n                 Int32 addition_exp = 0;\n-                readIntText(addition_exp, buf);\n+                if (!tryReadIntText(addition_exp, buf))\n+                {\n+                    if constexpr (_throw_on_error)\n+                        throw Exception(\"Cannot parse exponent while reading decimal\", ErrorCodes::CANNOT_PARSE_NUMBER);\n+                    else\n+                        return false;\n+                }\n                 exponent += addition_exp;\n                 stop = true;\n                 continue;\n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/01070_to_decimal_or_null_exception.reference b/dbms/tests/queries/0_stateless/01070_to_decimal_or_null_exception.reference\nnew file mode 100644\nindex 000000000000..b981dd4e1b67\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/01070_to_decimal_or_null_exception.reference\n@@ -0,0 +1,3 @@\n+\\N\t1\n+\\N\t1\n+\\N\t1\ndiff --git a/dbms/tests/queries/0_stateless/01070_to_decimal_or_null_exception.sql b/dbms/tests/queries/0_stateless/01070_to_decimal_or_null_exception.sql\nnew file mode 100644\nindex 000000000000..9283cc76cd79\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/01070_to_decimal_or_null_exception.sql\n@@ -0,0 +1,7 @@\n+SELECT toDecimal32('e', 1); -- { serverError 72 }\n+SELECT toDecimal64('e', 2); -- { serverError 72 }\n+SELECT toDecimal128('e', 3); -- { serverError 72 }\n+\n+SELECT toDecimal32OrNull('e', 1) x, isNull(x);\n+SELECT toDecimal64OrNull('e', 2) x, isNull(x);\n+SELECT toDecimal128OrNull('e', 3) x, isNull(x);\n",
  "problem_statement": "toDecimal128OrNull throws an exception but it is supposed to return Null\n```\r\nSELECT toDecimal128OrNull('ee', 1)\r\n\r\n\u250c\u2500toDecimal128OrNull('ee', 1)\u2500\u2510\r\n\u2502                        \u1d3a\u1d41\u1d38\u1d38 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nSELECT toDecimal128OrNull('e', 1)\r\n\r\nReceived exception from server (version 19.17.4):\r\nCode: 32. DB::Exception: Received from localhost:9000. DB::Exception: Attempt to read after eof.\r\n```\n",
  "hints_text": "",
  "created_at": "2020-01-21T13:28:55Z",
  "modified_files": [
    "dbms/src/IO/readDecimalText.h"
  ],
  "modified_test_files": [
    "b/dbms/tests/queries/0_stateless/01070_to_decimal_or_null_exception.reference",
    "b/dbms/tests/queries/0_stateless/01070_to_decimal_or_null_exception.sql"
  ]
}