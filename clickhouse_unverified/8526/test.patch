diff --git a/dbms/src/IO/tests/CMakeLists.txt b/dbms/src/IO/tests/CMakeLists.txt
index 38802718dd1d..40defb504705 100644
--- a/dbms/src/IO/tests/CMakeLists.txt
+++ b/dbms/src/IO/tests/CMakeLists.txt
@@ -78,7 +78,4 @@ add_executable (parse_date_time_best_effort parse_date_time_best_effort.cpp)
 target_link_libraries (parse_date_time_best_effort PRIVATE clickhouse_common_io)
 
 add_executable (zlib_ng_bug zlib_ng_bug.cpp)
-target_link_libraries (zlib_ng_bug PRIVATE ${Poco_Foundation_LIBRARY})
-if(NOT USE_INTERNAL_POCO_LIBRARY)
-    target_include_directories(zlib_ng_bug SYSTEM BEFORE PRIVATE ${Poco_INCLUDE_DIRS})
-endif()
+target_link_libraries (zlib_ng_bug PRIVATE ${Poco_Foundation_LIBRARY} ${ZLIB_LIBRARY})
diff --git a/dbms/src/IO/tests/zlib_ng_bug.cpp b/dbms/src/IO/tests/zlib_ng_bug.cpp
index 8b94b4e49d26..e9b3c448b888 100644
--- a/dbms/src/IO/tests/zlib_ng_bug.cpp
+++ b/dbms/src/IO/tests/zlib_ng_bug.cpp
@@ -1,32 +1,50 @@
-#include <Poco/FileStream.h>
-#include <Poco/NullStream.h>
-#include <Poco/StreamCopier.h>
-#include <Poco/DeflatingStream.h>
-
-/** This script reproduces the bug in zlib-ng library.
-  * Put the following content to "data.bin" file:
-abcdefghijklmn!@Aab#AAabcdefghijklmn$%
-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
-  * There are two lines. First line make sense. Second line contains padding to make file size large enough.
-  * Compile with
-  *  cmake -D SANITIZE=address
-  * and run:
-
-./zlib_ng_bug data2.bin
-=================================================================
-==204952==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x6310000147ff at pc 0x000000596d7a bp 0x7ffd139edd50 sp 0x7ffd139edd48
-READ of size 1 at 0x6310000147ff thread T0
-  */
-
-int main(int argc, char ** argv)
+#include <unistd.h>
+#include <vector>
+#include <stdexcept>
+#include <zlib.h>
+
+#pragma GCC diagnostic ignored "-Wold-style-cast"
+
+
+/// https://github.com/zlib-ng/zlib-ng/issues/494
+int main(int, char **)
 {
-    using namespace Poco;
+    std::vector<unsigned char> in(1048576);
+    std::vector<unsigned char> out(1048576);
+
+    ssize_t in_size = read(STDIN_FILENO, in.data(), 1048576);
+    if (in_size < 0)
+        throw std::runtime_error("Cannot read");
+    in.resize(in_size);
+
+    z_stream zstr{};
+    if (Z_OK != deflateInit2(&zstr, 1, Z_DEFLATED, 15 + 16, 8, Z_DEFAULT_STRATEGY))
+        throw std::runtime_error("Cannot deflateInit2");
+
+    zstr.next_in = in.data();
+    zstr.avail_in = in.size();
+    zstr.next_out = out.data();
+    zstr.avail_out = out.size();
+
+    while (zstr.avail_in > 0)
+        if (Z_OK != deflate(&zstr, Z_NO_FLUSH))
+            throw std::runtime_error("Cannot deflate");
+
+    while (true)
+    {
+        int rc = deflate(&zstr, Z_FINISH);
+
+        if (rc == Z_STREAM_END)
+            break;
+
+        if (rc != Z_OK)
+            throw std::runtime_error("Cannot finish deflate");
+    }
+
+    deflateEnd(&zstr);
 
-    std::string filename(argc >= 2 ? argv[1] : "data.bin");
-    FileInputStream istr(filename);
-    NullOutputStream ostr;
-    DeflatingOutputStream deflater(ostr, DeflatingStreamBuf::STREAM_GZIP);
-    StreamCopier::copyStream(istr, deflater);
+    if (ssize_t(zstr.total_out) != write(STDOUT_FILENO, out.data(), zstr.total_out))
+        throw std::runtime_error("Cannot write");
 
     return 0;
 }
diff --git a/dbms/tests/queries/0_stateless/01057_http_compression_prefer_brotli.reference b/dbms/tests/queries/0_stateless/01057_http_compression_prefer_brotli.reference
new file mode 100644
index 000000000000..5dd396a38c97
--- /dev/null
+++ b/dbms/tests/queries/0_stateless/01057_http_compression_prefer_brotli.reference
@@ -0,0 +1,11 @@
+1
+1
+1
+1
+1
+999997
+999998
+999999
+999997
+999998
+999999
diff --git a/dbms/tests/queries/0_stateless/01057_http_compression_prefer_brotli.sh b/dbms/tests/queries/0_stateless/01057_http_compression_prefer_brotli.sh
new file mode 100755
index 000000000000..419f774e5020
--- /dev/null
+++ b/dbms/tests/queries/0_stateless/01057_http_compression_prefer_brotli.sh
@@ -0,0 +1,12 @@
+#!/usr/bin/env bash
+
+CURDIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
+. $CURDIR/../shell_config.sh
+
+${CLICKHOUSE_CURL} -sS -H 'Accept-Encoding: br'              "${CLICKHOUSE_URL}&enable_http_compression=1" -d 'SELECT 1' | brotli -d
+${CLICKHOUSE_CURL} -sS -H 'Accept-Encoding: br,gzip'         "${CLICKHOUSE_URL}&enable_http_compression=1" -d 'SELECT 1' | brotli -d
+${CLICKHOUSE_CURL} -sS -H 'Accept-Encoding: gzip,br'         "${CLICKHOUSE_URL}&enable_http_compression=1" -d 'SELECT 1' | brotli -d
+${CLICKHOUSE_CURL} -sS -H 'Accept-Encoding: gzip,deflate,br' "${CLICKHOUSE_URL}&enable_http_compression=1" -d 'SELECT 1' | brotli -d
+${CLICKHOUSE_CURL} -sS -H 'Accept-Encoding: gzip,deflate'    "${CLICKHOUSE_URL}&enable_http_compression=1" -d 'SELECT 1' | gzip -d
+${CLICKHOUSE_CURL} -sS -H 'Accept-Encoding: gzip'            "${CLICKHOUSE_URL}&enable_http_compression=1" -d 'SELECT number FROM numbers(1000000)' | gzip -d | tail -n3
+${CLICKHOUSE_CURL} -sS -H 'Accept-Encoding: br'              "${CLICKHOUSE_URL}&enable_http_compression=1" -d 'SELECT number FROM numbers(1000000)' | brotli -d | tail -n3
diff --git a/dbms/tests/queries/0_stateless/01058_zlib_ng_level1_bug.reference b/dbms/tests/queries/0_stateless/01058_zlib_ng_level1_bug.reference
new file mode 100644
index 000000000000..1036eecb9b0d
--- /dev/null
+++ b/dbms/tests/queries/0_stateless/01058_zlib_ng_level1_bug.reference
@@ -0,0 +1,101 @@
+34529
+34530
+34531
+34532
+34533
+34534
+34535
+34536
+34537
+34538
+34539
+34540
+34541
+34542
+34543
+34544
+34545
+34546
+34547
+34548
+34549
+34550
+34551
+34552
+34553
+34554
+34555
+34556
+34557
+34558
+34559
+34560
+34561
+34562
+34563
+34564
+34565
+34566
+34567
+34568
+34569
+34570
+34571
+34572
+34573
+34574
+34575
+34576
+34577
+34578
+34579
+34580
+34581
+34582
+34583
+34584
+34585
+34586
+34587
+34588
+34589
+34590
+34591
+34592
+34593
+34594
+34595
+34596
+34597
+34598
+34599
+34600
+34601
+34602
+34603
+34604
+34605
+34606
+34607
+34608
+34609
+34610
+34611
+34612
+34613
+34614
+34615
+34616
+34617
+34618
+34619
+34620
+34621
+34622
+34623
+34624
+34625
+34626
+34627
+34628
+34629
diff --git a/dbms/tests/queries/0_stateless/01058_zlib_ng_level1_bug.sh b/dbms/tests/queries/0_stateless/01058_zlib_ng_level1_bug.sh
new file mode 100755
index 000000000000..f554aec4fcac
--- /dev/null
+++ b/dbms/tests/queries/0_stateless/01058_zlib_ng_level1_bug.sh
@@ -0,0 +1,6 @@
+#!/usr/bin/env bash
+
+CURDIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
+. $CURDIR/../shell_config.sh
+
+for i in $(seq 34530 1 34630); do ${CLICKHOUSE_CURL} -sS -H 'Accept-Encoding: gzip' "${CLICKHOUSE_URL}&enable_http_compression=1&http_zlib_compression_level=1" -d "SELECT * FROM numbers($i)" | gzip -d | tail -n1; done
diff --git a/dbms/tests/queries/0_stateless/01059_storage_file_brotli.reference b/dbms/tests/queries/0_stateless/01059_storage_file_brotli.reference
new file mode 100644
index 000000000000..6c545e9faec1
--- /dev/null
+++ b/dbms/tests/queries/0_stateless/01059_storage_file_brotli.reference
@@ -0,0 +1,5 @@
+1000000	999999
+1000000	999999
+2000000	999999
+1	255
+1	255
diff --git a/dbms/tests/queries/0_stateless/01059_storage_file_brotli.sql b/dbms/tests/queries/0_stateless/01059_storage_file_brotli.sql
new file mode 100644
index 000000000000..e7d5a87b2aff
--- /dev/null
+++ b/dbms/tests/queries/0_stateless/01059_storage_file_brotli.sql
@@ -0,0 +1,22 @@
+DROP TABLE IF EXISTS file;
+CREATE TABLE file (x UInt64) ENGINE = File(TSV, 'data1.tsv.br');
+TRUNCATE TABLE file;
+
+INSERT INTO file SELECT * FROM numbers(1000000);
+SELECT count(), max(x) FROM file;
+
+DROP TABLE file;
+
+CREATE TABLE file (x UInt64) ENGINE = File(TSV, 'data2.tsv.gz');
+TRUNCATE TABLE file;
+
+INSERT INTO file SELECT * FROM numbers(1000000);
+SELECT count(), max(x) FROM file;
+
+DROP TABLE file;
+
+SELECT count(), max(x) FROM file('data{1,2}.tsv.{gz,br}', TSV, 'x UInt64');
+
+-- check that they are compressed
+SELECT count() < 1000000, max(x) FROM file('data1.tsv.br', RowBinary, 'x UInt8', 'none');
+SELECT count() < 3000000, max(x) FROM file('data2.tsv.gz', RowBinary, 'x UInt8', 'none');
