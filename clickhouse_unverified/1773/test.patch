diff --git a/dbms/tests/integration/test_system_queries/configs/config.d/clusters_config.xml b/dbms/tests/integration/test_system_queries/configs/config.d/clusters_config.xml
new file mode 100644
index 000000000000..1353e2f74b5d
--- /dev/null
+++ b/dbms/tests/integration/test_system_queries/configs/config.d/clusters_config.xml
@@ -0,0 +1,14 @@
+<?xml version="1.0"?>
+<yandex>
+    <remote_servers>
+    	<lost_host_cluster>
+    		<shard>
+    			<internal_replication>false</internal_replication>
+    			<replica>
+    				<host>lost_host</host>
+                	<port>9000</port>
+    			</replica>
+    		</shard>
+    	</lost_host_cluster>
+    </remote_servers>
+</yandex>
diff --git a/dbms/tests/integration/test_system_queries/test.py b/dbms/tests/integration/test_system_queries/test.py
index b7bf350d3957..d19e2df67819 100644
--- a/dbms/tests/integration/test_system_queries/test.py
+++ b/dbms/tests/integration/test_system_queries/test.py
@@ -9,6 +9,7 @@
 sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
 from helpers.cluster import ClickHouseCluster
 from helpers.test_tools import TSV
+from helpers.client import QueryRuntimeException
 
 
 @pytest.fixture(scope="module")
@@ -24,10 +25,12 @@ def started_cluster():
         instance.query('CREATE DATABASE dictionaries ENGINE = Dictionary')
         instance.query('CREATE TABLE dictionary_source (id UInt64, value UInt8) ENGINE = Memory')
         #print instance.query('SELECT * FROM system.dictionaries FORMAT Vertical')
+        print "Started ", instance.ip_address
 
         yield cluster
 
     finally:
+        pass
         cluster.shutdown()
 
 
@@ -54,13 +57,21 @@ def test_SYSTEM_RELOAD_DICTIONARY(started_cluster):
 def test_DROP_DNS_CACHE(started_cluster):
     instance = cluster.instances['ch1']
 
-    with pytest.raises(Exception):
-        instance.query("SELECT * FROM remote('aperol', 'system', 'one')")
+    instance.exec_in_container(['bash', '-c', 'echo 127.255.255.255 lost_host > /etc/hosts'], privileged=True, user='root')
 
-    instance.exec_in_container(['bash', '-c', 'echo 127.0.0.1 aperol >> /etc/hosts'], privileged=True, user='root')
+    with pytest.raises(QueryRuntimeException):
+        instance.query("SELECT * FROM remote('lost_host', 'system', 'one')")
+
+    instance.query("CREATE TABLE distributed_lost_host (dummy UInt8) ENGINE = Distributed(lost_host_cluster, 'system', 'one')")
+    with pytest.raises(QueryRuntimeException):
+        instance.query("SELECT * FROM distributed_lost_host")
+
+    instance.exec_in_container(['bash', '-c', 'echo 127.0.0.1 lost_host > /etc/hosts'], privileged=True, user='root')
     instance.query("SYSTEM DROP DNS CACHE")
 
-    instance.query("SELECT * FROM remote('aperol', 'system', 'one')")
+    instance.query("SELECT * FROM remote('lost_host', 'system', 'one')")
+    instance.query("SELECT * FROM distributed_lost_host")
+    assert TSV(instance.query("SELECT DISTINCT host_name, host_address FROM system.clusters")) == TSV("lost_host\t127.0.0.1
")
 
 
 if __name__ == '__main__':
diff --git a/dbms/tests/perf_drafts/vert_merge/test_merges b/dbms/tests/perf_drafts/vert_merge/test_merges
index 7240ad9a41f3..61dbf639bce3 100755
--- a/dbms/tests/perf_drafts/vert_merge/test_merges
+++ b/dbms/tests/perf_drafts/vert_merge/test_merges
@@ -22,8 +22,8 @@ table_name="ontime"
 table="test.ontime"
 
 function read_src_data {
-	clickhouse-local --file "$SOURCE" --input-format CSV --structure "$STRUCT" -of Native --query "$@" 2>/dev/null
-	#clickhouse-local --file "$SOURCE" --input-format Native --structure "$STRUCT" -of Native --query "$@" 2>/dev/null
+	clickhouse-local -s --file "$SOURCE" --input-format CSV --structure "$STRUCT" -of Native --query "$@"
+	#clickhouse-local -s --file "$SOURCE" --input-format Native --structure "$STRUCT" -of Native --query "$@"
 }
 
 function set_vertical_alg {
@@ -71,7 +71,7 @@ function get_last_merge_time {
 }
 
 function total_merge_time_from_log {
-    cat /var/log/clickhouse-server/clickhouse-server.log | grep "(Merger): Merge sorted" | cut -d " " -f 21 | clickhouse-local -S "d Float64" --query "SELECT round(sum(d), 3) FROM table" 2>/dev/null
+    cat /var/log/clickhouse-server/clickhouse-server.log | grep "(Merger): Merge sorted" | cut -d " " -f 21 | clickhouse-local -s -S "d Float64" --query "SELECT round(sum(d), 3) FROM table"
 }
 
 function get_max_clickhouse_server_memory {
diff --git a/dbms/tests/queries/0_stateless/00113_shard_group_array.sql b/dbms/tests/queries/0_stateless/00113_shard_group_array.sql
index cfdb7b6b6fdb..858e7f82ba6a 100644
--- a/dbms/tests/queries/0_stateless/00113_shard_group_array.sql
+++ b/dbms/tests/queries/0_stateless/00113_shard_group_array.sql
@@ -34,4 +34,4 @@ SELECT roundToExp2(number) AS k, length(groupArray(1)([hex(number)] AS i)), leng
 DROP TABLE test.numbers_mt;
 
 -- Check binary compability:
--- clickhouse-client -h old -q "SELECT arrayReduce('groupArrayState', [['1'], ['22'], ['333']]) FORMAT RowBinary" | clickhouse-local --input-format RowBinary --structure "d AggregateFunction(groupArray2, Array(String))" -q "SELECT groupArray2Merge(d) FROM table"
+-- clickhouse-client -h old -q "SELECT arrayReduce('groupArrayState', [['1'], ['22'], ['333']]) FORMAT RowBinary" | clickhouse-local -s --input-format RowBinary --structure "d AggregateFunction(groupArray2, Array(String))" -q "SELECT groupArray2Merge(d) FROM table"
diff --git a/dbms/tests/queries/0_stateless/00385_storage_file_and_clickhouse-local_app.sh b/dbms/tests/queries/0_stateless/00385_storage_file_and_clickhouse-local_app.sh
index 28b737a62b15..d20094b1e612 100755
--- a/dbms/tests/queries/0_stateless/00385_storage_file_and_clickhouse-local_app.sh
+++ b/dbms/tests/queries/0_stateless/00385_storage_file_and_clickhouse-local_app.sh
@@ -20,8 +20,8 @@ function pack_unpack_compare()
     local res_db_file=$(${CLICKHOUSE_CLIENT} --max_threads=1 --query "SELECT $TABLE_HASH FROM test.buf_file")
 
     ${CLICKHOUSE_CLIENT} --max_threads=1 --query "SELECT * FROM test.buf FORMAT $3" > "$buf_file"
-    local res_ch_local1=$(${CLICKHOUSE_LOCAL} --structure "$2" --file "$buf_file" --table "my super table" --input-format "$3" --output-format TabSeparated --query "SELECT $TABLE_HASH FROM \`my super table\`" 2>${CLICKHOUSE_TMP}/stderr || cat stderr 1>&2)
-    local res_ch_local2=$(${CLICKHOUSE_LOCAL} --structure "$2" --table "my super table" --input-format "$3" --output-format TabSeparated --query "SELECT $TABLE_HASH FROM \`my super table\`" < "$buf_file" 2>${CLICKHOUSE_TMP}/stderr || cat ${CLICKHOUSE_TMP}/stderr 1>&2)
+    local res_ch_local1=$(${CLICKHOUSE_LOCAL} -s --structure "$2" --file "$buf_file" --table "my super table" --input-format "$3" --output-format TabSeparated --query "SELECT $TABLE_HASH FROM \`my super table\`")
+    local res_ch_local2=$(${CLICKHOUSE_LOCAL} -s --structure "$2" --table "my super table" --input-format "$3" --output-format TabSeparated --query "SELECT $TABLE_HASH FROM \`my super table\`" < "$buf_file")
 
     ${CLICKHOUSE_CLIENT} --query "DROP TABLE IF EXISTS test.buf"
     ${CLICKHOUSE_CLIENT} --query "DROP TABLE IF EXISTS test.buf_file"
@@ -38,7 +38,7 @@ pack_unpack_compare "SELECT name, is_aggregate FROM system.functions" "name Stri
 pack_unpack_compare "SELECT name, is_aggregate FROM system.functions" "name String, is_aggregate UInt8" "Native"
 pack_unpack_compare "SELECT name, is_aggregate FROM system.functions" "name String, is_aggregate UInt8" "TSKV"
 echo
-${CLICKHOUSE_LOCAL} -q "CREATE TABLE sophisticated_default
+${CLICKHOUSE_LOCAL} -s -q "CREATE TABLE sophisticated_default
 (
     a UInt8 DEFAULT
     (
@@ -49,4 +49,7 @@ ${CLICKHOUSE_LOCAL} -q "CREATE TABLE sophisticated_default
         SELECT dummy+9 FROM system.one
     ),
     c UInt8
-) ENGINE = Memory; SELECT count() FROM system.tables WHERE name='sophisticated_default';" 2>/dev/null
+) ENGINE = Memory; SELECT count() FROM system.tables WHERE name='sophisticated_default';"
+
+# Help is not skipped
+[[ `${CLICKHOUSE_LOCAL} -s --help 2>&1 | wc -l` > 100 ]]
\ No newline at end of file
diff --git a/dbms/tests/queries/0_stateless/00407_parsing_nulls.sh b/dbms/tests/queries/0_stateless/00407_parsing_nulls.sh
index 92e30aa10102..f4bd51e2a684 100755
--- a/dbms/tests/queries/0_stateless/00407_parsing_nulls.sh
+++ b/dbms/tests/queries/0_stateless/00407_parsing_nulls.sh
@@ -5,26 +5,26 @@ set -e
 CURDIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
 . $CURDIR/../shell_config.sh
 
-echo -ne '\\tHello\t123\t\\N
\\N\t\t2000-01-01 00:00:00
' | ${CLICKHOUSE_LOCAL} --input-format=TabSeparated --output-format=TabSeparated --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table" 2>/dev/null
-echo -ne 'Hello,123,\\N
\\N,0,"2000-01-01 00:00:00"' | ${CLICKHOUSE_LOCAL} --input-format=CSV --output-format=TabSeparated --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table" 2>/dev/null
-echo -ne '"\\Hello",123,\\N
"\\N",0,"2000-01-01 00:00:00"' | ${CLICKHOUSE_LOCAL} --input-format=CSV --output-format=TabSeparated --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table" 2>/dev/null
-echo -ne '{"s" : null, "x" : 123}, {"s" : "\N", "t":"2000-01-01 00:00:00"}' | ${CLICKHOUSE_LOCAL} --input-format=JSONEachRow --output-format=TabSeparated --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table" 2>/dev/null
-echo "(NULL, 111, '2000-01-01 00:00:00'), ('\N', NULL, NULL), ('a\Nb', NULL, NULL)" | ${CLICKHOUSE_LOCAL} --input-format=Values --output-format=TabSeparated --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table" 2>/dev/null
+echo -ne '\\tHello\t123\t\\N
\\N\t\t2000-01-01 00:00:00
' | ${CLICKHOUSE_LOCAL} -s --input-format=TabSeparated --output-format=TabSeparated --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table"
+echo -ne 'Hello,123,\\N
\\N,0,"2000-01-01 00:00:00"' | ${CLICKHOUSE_LOCAL} -s --input-format=CSV --output-format=TabSeparated --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table"
+echo -ne '"\\Hello",123,\\N
"\\N",0,"2000-01-01 00:00:00"' | ${CLICKHOUSE_LOCAL} -s --input-format=CSV --output-format=TabSeparated --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table"
+echo -ne '{"s" : null, "x" : 123}, {"s" : "\N", "t":"2000-01-01 00:00:00"}' | ${CLICKHOUSE_LOCAL} -s --input-format=JSONEachRow --output-format=TabSeparated --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table"
+echo "(NULL, 111, '2000-01-01 00:00:00'), ('\N', NULL, NULL), ('a\Nb', NULL, NULL)" | ${CLICKHOUSE_LOCAL} -s --input-format=Values --output-format=TabSeparated --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table"
 
-echo -ne '\\tHello\t123\t\\N
\\N\t\t2000-01-01 00:00:00
' | ${CLICKHOUSE_LOCAL} --input-format=TabSeparated --output-format=CSV --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table" 2>/dev/null
-echo -ne 'Hello,123,\\N
\\N,0,"2000-01-01 00:00:00"' | ${CLICKHOUSE_LOCAL} --input-format=CSV --output-format=CSV --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table" 2>/dev/null
-echo -ne '"\\Hello",123,\\N
"\\N",0,"2000-01-01 00:00:00"' | ${CLICKHOUSE_LOCAL} --input-format=CSV --output-format=CSV --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table" 2>/dev/null
-echo -ne '{"s" : null, "x" : 123}, {"s" : "\N", "t":"2000-01-01 00:00:00"}' | ${CLICKHOUSE_LOCAL} --input-format=JSONEachRow --output-format=CSV --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table" 2>/dev/null
-echo "(NULL, 111, '2000-01-01 00:00:00'), ('\N', NULL, NULL), ('a\Nb', NULL, NULL)" | ${CLICKHOUSE_LOCAL} --input-format=Values --output-format=CSV --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table" 2>/dev/null
+echo -ne '\\tHello\t123\t\\N
\\N\t\t2000-01-01 00:00:00
' | ${CLICKHOUSE_LOCAL} -s --input-format=TabSeparated --output-format=CSV --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table"
+echo -ne 'Hello,123,\\N
\\N,0,"2000-01-01 00:00:00"' | ${CLICKHOUSE_LOCAL} -s --input-format=CSV --output-format=CSV --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table"
+echo -ne '"\\Hello",123,\\N
"\\N",0,"2000-01-01 00:00:00"' | ${CLICKHOUSE_LOCAL} -s --input-format=CSV --output-format=CSV --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table"
+echo -ne '{"s" : null, "x" : 123}, {"s" : "\N", "t":"2000-01-01 00:00:00"}' | ${CLICKHOUSE_LOCAL} -s --input-format=JSONEachRow --output-format=CSV --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table"
+echo "(NULL, 111, '2000-01-01 00:00:00'), ('\N', NULL, NULL), ('a\Nb', NULL, NULL)" | ${CLICKHOUSE_LOCAL} -s --input-format=Values --output-format=CSV --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table"
 
-echo -ne '\\tHello\t123\t\\N
\\N\t\t2000-01-01 00:00:00
' | ${CLICKHOUSE_LOCAL} --input-format=TabSeparated --output-format=JSONEachRow --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table" 2>/dev/null
-echo -ne 'Hello,123,\\N
\\N,0,"2000-01-01 00:00:00"' | ${CLICKHOUSE_LOCAL} --input-format=CSV --output-format=JSONEachRow --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table" 2>/dev/null
-echo -ne '"\\Hello",123,\\N
"\\N",0,"2000-01-01 00:00:00"' | ${CLICKHOUSE_LOCAL} --input-format=CSV --output-format=JSONEachRow --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table" 2>/dev/null
-echo -ne '{"s" : null, "x" : 123}, {"s" : "\N", "t":"2000-01-01 00:00:00"}' | ${CLICKHOUSE_LOCAL} --input-format=JSONEachRow --output-format=JSONEachRow --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table" 2>/dev/null
-echo "(NULL, 111, '2000-01-01 00:00:00'), ('\N', NULL, NULL), ('a\Nb', NULL, NULL)" | ${CLICKHOUSE_LOCAL} --input-format=Values --output-format=JSONEachRow --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table" 2>/dev/null
+echo -ne '\\tHello\t123\t\\N
\\N\t\t2000-01-01 00:00:00
' | ${CLICKHOUSE_LOCAL} -s --input-format=TabSeparated --output-format=JSONEachRow --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table"
+echo -ne 'Hello,123,\\N
\\N,0,"2000-01-01 00:00:00"' | ${CLICKHOUSE_LOCAL} -s --input-format=CSV --output-format=JSONEachRow --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table"
+echo -ne '"\\Hello",123,\\N
"\\N",0,"2000-01-01 00:00:00"' | ${CLICKHOUSE_LOCAL} -s --input-format=CSV --output-format=JSONEachRow --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table"
+echo -ne '{"s" : null, "x" : 123}, {"s" : "\N", "t":"2000-01-01 00:00:00"}' | ${CLICKHOUSE_LOCAL} -s --input-format=JSONEachRow --output-format=JSONEachRow --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table"
+echo "(NULL, 111, '2000-01-01 00:00:00'), ('\N', NULL, NULL), ('a\Nb', NULL, NULL)" | ${CLICKHOUSE_LOCAL} -s --input-format=Values --output-format=JSONEachRow --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table"
 
-echo -ne '\\tHello\t123\t\\N
\\N\t\t2000-01-01 00:00:00
' | ${CLICKHOUSE_LOCAL} --input-format=TabSeparated --output-format=Values --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table" 2>/dev/null
-echo -ne 'Hello,123,\\N
\\N,0,"2000-01-01 00:00:00"' | ${CLICKHOUSE_LOCAL} --input-format=CSV --output-format=Values --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table" 2>/dev/null
-echo -ne '"\\Hello",123,\\N
"\\N",0,"2000-01-01 00:00:00"' | ${CLICKHOUSE_LOCAL} --input-format=CSV --output-format=Values --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table" 2>/dev/null
-echo -ne '{"s" : null, "x" : 123}, {"s" : "\N", "t":"2000-01-01 00:00:00"}' | ${CLICKHOUSE_LOCAL} --input-format=JSONEachRow --output-format=Values --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table" 2>/dev/null
-echo "(NULL, 111, '2000-01-01 00:00:00'), ('\N', NULL, NULL), ('a\Nb', NULL, NULL)" | ${CLICKHOUSE_LOCAL} --input-format=Values --output-format=Values --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table" 2>/dev/null
+echo -ne '\\tHello\t123\t\\N
\\N\t\t2000-01-01 00:00:00
' | ${CLICKHOUSE_LOCAL} -s --input-format=TabSeparated --output-format=Values --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table"
+echo -ne 'Hello,123,\\N
\\N,0,"2000-01-01 00:00:00"' | ${CLICKHOUSE_LOCAL} -s --input-format=CSV --output-format=Values --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table"
+echo -ne '"\\Hello",123,\\N
"\\N",0,"2000-01-01 00:00:00"' | ${CLICKHOUSE_LOCAL} -s --input-format=CSV --output-format=Values --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table"
+echo -ne '{"s" : null, "x" : 123}, {"s" : "\N", "t":"2000-01-01 00:00:00"}' | ${CLICKHOUSE_LOCAL} -s --input-format=JSONEachRow --output-format=Values --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table"
+echo "(NULL, 111, '2000-01-01 00:00:00'), ('\N', NULL, NULL), ('a\Nb', NULL, NULL)" | ${CLICKHOUSE_LOCAL} -s --input-format=Values --output-format=Values --structure='s Nullable(String), x Nullable(UInt64), t Nullable(DateTime)' --query="SELECT * FROM table"
diff --git a/dbms/tests/queries/0_stateless/00415_into_outfile.sh b/dbms/tests/queries/0_stateless/00415_into_outfile.sh
index 19641feca50d..ec7cef9dbbae 100755
--- a/dbms/tests/queries/0_stateless/00415_into_outfile.sh
+++ b/dbms/tests/queries/0_stateless/00415_into_outfile.sh
@@ -27,7 +27,7 @@ perform "bad_union_all" "SELECT 1, 2 INTO OUTFILE '${CLICKHOUSE_TMP}/test_into_o
 perform "describe_table" "DESCRIBE TABLE system.one INTO OUTFILE '${CLICKHOUSE_TMP}/test_into_outfile_describe_table.out'"
 
 echo "performing test: clickhouse-local"
-echo -e '1\t2' | ${CLICKHOUSE_LOCAL} --structure 'col1 UInt32, col2 UInt32' --query "SELECT col1 + 1, col2 + 1 FROM table INTO OUTFILE '${CLICKHOUSE_TMP}/test_into_outfile_clickhouse-local.out'" 2>/dev/null
+echo -e '1\t2' | ${CLICKHOUSE_LOCAL} -s --structure 'col1 UInt32, col2 UInt32' --query "SELECT col1 + 1, col2 + 1 FROM table INTO OUTFILE '${CLICKHOUSE_TMP}/test_into_outfile_clickhouse-local.out'"
 if [ "$?" -eq 0 ]; then
     cat "${CLICKHOUSE_TMP}/test_into_outfile_clickhouse-local.out"
 else
diff --git a/dbms/tests/queries/0_stateless/00446_clear_column_in_partition_zookeeper.reference b/dbms/tests/queries/0_stateless/00446_clear_column_in_partition_zookeeper.reference
index b219c65b7ff6..8d08c18de60d 100644
--- a/dbms/tests/queries/0_stateless/00446_clear_column_in_partition_zookeeper.reference
+++ b/dbms/tests/queries/0_stateless/00446_clear_column_in_partition_zookeeper.reference
@@ -1,7 +1,12 @@
+===Ordinary case===
+16
 1	a
 2	b
 0	a
 2	b
+8
+0	0
+===Replicated case===
 all
 2000-01-01	0	
 2000-01-01	1	a
diff --git a/dbms/tests/queries/0_stateless/00446_clear_column_in_partition_zookeeper.sql b/dbms/tests/queries/0_stateless/00446_clear_column_in_partition_zookeeper.sql
index 760b59cf6c39..0ace86c2e5e9 100644
--- a/dbms/tests/queries/0_stateless/00446_clear_column_in_partition_zookeeper.sql
+++ b/dbms/tests/queries/0_stateless/00446_clear_column_in_partition_zookeeper.sql
@@ -1,15 +1,23 @@
+SELECT '===Ordinary case===';
+
 DROP TABLE IF EXISTS test.clear_column;
 CREATE TABLE test.clear_column (d Date, num Int64, str String) ENGINE = MergeTree(d, d, 8192);
 
 INSERT INTO test.clear_column VALUES ('2016-12-12', 1, 'a'), ('2016-11-12', 2, 'b');
 
+SELECT data_uncompressed_bytes FROM system.columns WHERE (database = 'test') AND (table = 'clear_column') AND (name = 'num');
+
 SELECT num, str FROM test.clear_column ORDER BY num;
 ALTER TABLE test.clear_column CLEAR COLUMN num IN PARTITION '201612';
 SELECT num, str FROM test.clear_column ORDER BY num;
 
+SELECT data_uncompressed_bytes FROM system.columns WHERE (database = 'test') AND (table = 'clear_column') AND (name = 'num');
+ALTER TABLE test.clear_column CLEAR COLUMN num IN PARTITION '201611';
+SELECT data_compressed_bytes, data_uncompressed_bytes FROM system.columns WHERE (database = 'test') AND (table = 'clear_column') AND (name = 'num');
+
 DROP TABLE test.clear_column;
 
--- Replicated case
+SELECT '===Replicated case===';
 
 DROP TABLE IF EXISTS test.clear_column1;
 DROP TABLE IF EXISTS test.clear_column2;
diff --git a/dbms/tests/queries/0_stateless/00512_fractional_time_zones.sh b/dbms/tests/queries/0_stateless/00512_fractional_time_zones.sh
index 4d7745e88921..2ac93a796c41 100755
--- a/dbms/tests/queries/0_stateless/00512_fractional_time_zones.sh
+++ b/dbms/tests/queries/0_stateless/00512_fractional_time_zones.sh
@@ -3,6 +3,6 @@
 CURDIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
 . $CURDIR/../shell_config.sh
 
-TZ=Europe/Moscow ${CLICKHOUSE_LOCAL} --query="SELECT toDateTime('1990-10-19 00:00:00')" 2>/dev/null
-TZ=Asia/Colombo ${CLICKHOUSE_LOCAL} --query="SELECT toDateTime('1990-10-19 00:00:00')" 2>/dev/null
-TZ=Asia/Kathmandu ${CLICKHOUSE_LOCAL} --query="SELECT toDateTime('1990-10-19 00:00:00')" 2>/dev/null
+TZ=Europe/Moscow ${CLICKHOUSE_LOCAL} -s --query="SELECT toDateTime('1990-10-19 00:00:00')"
+TZ=Asia/Colombo ${CLICKHOUSE_LOCAL} -s --query="SELECT toDateTime('1990-10-19 00:00:00')"
+TZ=Asia/Kathmandu ${CLICKHOUSE_LOCAL} -s --query="SELECT toDateTime('1990-10-19 00:00:00')"
