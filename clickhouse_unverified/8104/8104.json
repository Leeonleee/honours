{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 8104,
  "instance_id": "ClickHouse__ClickHouse-8104",
  "issue_numbers": [
    "8103"
  ],
  "base_commit": "650277afb0017c7fb83e05df266b7885a1bef3d9",
  "patch": "diff --git a/dbms/src/Common/DiskSpaceMonitor.h b/dbms/src/Common/DiskSpaceMonitor.h\nindex 2cf17daccd11..ec339c8d4ece 100644\n--- a/dbms/src/Common/DiskSpaceMonitor.h\n+++ b/dbms/src/Common/DiskSpaceMonitor.h\n@@ -34,6 +34,7 @@ namespace ErrorCodes\n     extern const int CANNOT_STATVFS;\n     extern const int NOT_ENOUGH_SPACE;\n     extern const int NOT_IMPLEMENTED;\n+    extern const int NO_SUCH_DATA_PART;\n     extern const int SYSTEM_ERROR;\n     extern const int UNKNOWN_ELEMENT_IN_CONFIG;\n     extern const int EXCESSIVE_ELEMENT_IN_CONFIG;\ndiff --git a/dbms/src/Storages/MergeTree/MergeTreeData.cpp b/dbms/src/Storages/MergeTree/MergeTreeData.cpp\nindex ba1212484069..442f46ea5522 100644\n--- a/dbms/src/Storages/MergeTree/MergeTreeData.cpp\n+++ b/dbms/src/Storages/MergeTree/MergeTreeData.cpp\n@@ -2574,7 +2574,6 @@ MergeTreeData::DataPartPtr MergeTreeData::getActiveContainingPart(const String &\n     return getActiveContainingPart(part_info);\n }\n \n-\n MergeTreeData::DataPartsVector MergeTreeData::getDataPartsVectorInPartition(MergeTreeData::DataPartState state, const String & partition_id)\n {\n     DataPartStateAndPartitionID state_with_partition{state, partition_id};\n@@ -2740,8 +2739,9 @@ void MergeTreeData::movePartitionToDisk(const ASTPtr & partition, const String &\n     DataPartsVector parts;\n     if (moving_part)\n     {\n-        parts.push_back(getActiveContainingPart(partition_id));\n-        if (!parts.back())\n+        auto part_info = MergeTreePartInfo::fromPartName(partition_id, format_version);\n+        parts.push_back(getActiveContainingPart(part_info));\n+        if (!parts.back() || parts.back()->name != part_info.getPartName())\n             throw Exception(\"Part \" + partition_id + \" is not exists or not active\", ErrorCodes::NO_SUCH_DATA_PART);\n     }\n     else\n@@ -2756,6 +2756,9 @@ void MergeTreeData::movePartitionToDisk(const ASTPtr & partition, const String &\n             return part_ptr->disk->getName() == disk->getName();\n         }), parts.end());\n \n+    if (parts.empty())\n+        throw Exception(\"Nothing to move\", ErrorCodes::NO_SUCH_DATA_PART);\n+\n     if (parts.empty())\n     {\n         String no_parts_to_move_message;\n@@ -2768,7 +2771,7 @@ void MergeTreeData::movePartitionToDisk(const ASTPtr & partition, const String &\n     }\n \n     if (!movePartsToSpace(parts, std::static_pointer_cast<const DiskSpace::Space>(disk)))\n-        throw Exception(\"Cannot move parts because moves are manually disabled.\", ErrorCodes::ABORTED);\n+        throw Exception(\"Cannot move parts because moves are manually disabled\", ErrorCodes::ABORTED);\n }\n \n \n@@ -2784,18 +2787,21 @@ void MergeTreeData::movePartitionToVolume(const ASTPtr & partition, const String\n     DataPartsVector parts;\n     if (moving_part)\n     {\n-        parts.push_back(getActiveContainingPart(partition_id));\n-        if (!parts.back())\n+        auto part_info = MergeTreePartInfo::fromPartName(partition_id, format_version);\n+        parts.emplace_back(getActiveContainingPart(part_info));\n+        if (!parts.back() || parts.back()->name != part_info.getPartName())\n             throw Exception(\"Part \" + partition_id + \" is not exists or not active\", ErrorCodes::NO_SUCH_DATA_PART);\n     }\n     else\n         parts = getDataPartsVectorInPartition(MergeTreeDataPartState::Committed, partition_id);\n \n-\n     auto volume = storage_policy->getVolumeByName(name);\n     if (!volume)\n         throw Exception(\"Volume \" + name + \" does not exists on policy \" + storage_policy->getName(), ErrorCodes::UNKNOWN_DISK);\n \n+    if (parts.empty())\n+        throw Exception(\"Nothing to move\", ErrorCodes::NO_SUCH_DATA_PART);\n+\n     parts.erase(std::remove_if(parts.begin(), parts.end(), [&](auto part_ptr)\n         {\n             for (const auto & disk : volume->disks)\n@@ -2820,7 +2826,7 @@ void MergeTreeData::movePartitionToVolume(const ASTPtr & partition, const String\n     }\n \n     if (!movePartsToSpace(parts, std::static_pointer_cast<const DiskSpace::Space>(volume)))\n-        throw Exception(\"Cannot move parts because moves are manually disabled.\", ErrorCodes::ABORTED);\n+        throw Exception(\"Cannot move parts because moves are manually disabled\", ErrorCodes::ABORTED);\n }\n \n \n",
  "test_patch": "diff --git a/dbms/tests/integration/test_multiple_disks/test.py b/dbms/tests/integration/test_multiple_disks/test.py\nindex 57f54fe1edce..575ca5d7fce2 100644\n--- a/dbms/tests/integration/test_multiple_disks/test.py\n+++ b/dbms/tests/integration/test_multiple_disks/test.py\n@@ -1108,3 +1108,61 @@ def test_kill_while_insert(start_cluster):\n \n     finally:\n         \"\"\"Don't drop table afterwards to not shadow assertion.\"\"\"\n+\n+\n+def test_move_while_merge(start_cluster):\n+    try:\n+        name = \"test_move_while_merge\"\n+\n+        node1.query(\"\"\"\n+            CREATE TABLE {name} (\n+                n Int64\n+            ) ENGINE = MergeTree\n+            ORDER BY sleep(2)\n+            SETTINGS storage_policy='small_jbod_with_external'\n+        \"\"\".format(name=name))\n+\n+        node1.query(\"INSERT INTO {name} VALUES (1)\".format(name=name))\n+        node1.query(\"INSERT INTO {name} VALUES (2)\".format(name=name))\n+\n+        parts = node1.query(\"SELECT name FROM system.parts WHERE table = '{name}' AND active = 1\".format(name=name)).splitlines()\n+        assert len(parts) == 2\n+\n+        def optimize():\n+            node1.query(\"OPTIMIZE TABLE {name}\".format(name=name))\n+\n+        optimize = threading.Thread(target=optimize)\n+        optimize.start()\n+\n+        time.sleep(0.5)\n+\n+        with pytest.raises(QueryRuntimeException):\n+            node1.query(\"ALTER TABLE {name} MOVE PART '{part}' TO DISK 'external'\".format(name=name, part=parts[0]))\n+\n+        exiting = False\n+        no_exception = {}\n+\n+        def alter():\n+            while not exiting:\n+                try:\n+                    node1.query(\"ALTER TABLE {name} MOVE PART '{part}' TO DISK 'external'\".format(name=name, part=parts[0]))\n+                    no_exception['missing'] = 'exception'\n+                    break\n+                except QueryRuntimeException:\n+                    \"\"\"\"\"\"\n+\n+        alter_thread = threading.Thread(target=alter)\n+        alter_thread.start()\n+\n+        optimize.join()\n+\n+        time.sleep(0.5)\n+\n+        exiting = True\n+        alter_thread.join()\n+        assert len(no_exception) == 0\n+\n+        assert node1.query(\"SELECT count() FROM {name}\".format(name=name)).splitlines() == [\"2\"]\n+\n+    finally:\n+        node1.query(\"DROP TABLE IF EXISTS {name}\".format(name=name))\n",
  "problem_statement": "ALTER MOVE ran immediately after merge finish moves superpart\n```\r\n2019.12.09 20:36:17.972690 [ 61 ] {f8f6ebe0-05ee-4342-b6be-d501d01fcba0} <Debug> executeQuery: (from 172.20.0.1:51064) ALTER TABLE test_move_while_merge MOVE PART 'all_1_1_0' TO DISK 'external'\r\n2019.12.09 20:36:17.972771 [ 61 ] {f8f6ebe0-05ee-4342-b6be-d501d01fcba0} <Debug> DiskSpaceMonitor: Reserving 90.00 B on disk `external`, having unreserved 200.00 MiB.\r\n2019.12.09 20:36:17.972787 [ 61 ] {f8f6ebe0-05ee-4342-b6be-d501d01fcba0} <Information> default.test_move_while_merge: Got 1 parts to move.\r\n2019.12.09 20:36:17.972794 [ 61 ] {f8f6ebe0-05ee-4342-b6be-d501d01fcba0} <Trace> MergeTreePartsMover: Cloning part all_1_2_1\r\n2019.12.09 20:36:17.972942 [ 61 ] {f8f6ebe0-05ee-4342-b6be-d501d01fcba0} <Trace> MergeTreePartsMover: Part all_1_2_1 was cloned to /external/data/default/test_move_while_merge/detached/all_1_2_1/\r\n2019.12.09 20:36:17.973050 [ 61 ] {f8f6ebe0-05ee-4342-b6be-d501d01fcba0} <Trace> MergeTreePartsMover: Part all_1_2_1 was moved to /external/data/default/test_move_while_merge/all_1_2_1/\r\n```\n",
  "hints_text": "",
  "created_at": "2019-12-09T18:00:44Z"
}