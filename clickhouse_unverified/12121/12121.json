{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 12121,
  "instance_id": "ClickHouse__ClickHouse-12121",
  "issue_numbers": [
    "12093"
  ],
  "base_commit": "5a4d9fb9ae60de0d4e1744f8c47d102a2cb05b2b",
  "patch": "diff --git a/src/Storages/MergeTree/ReplicatedMergeTreeTableMetadata.cpp b/src/Storages/MergeTree/ReplicatedMergeTreeTableMetadata.cpp\nindex 50a234b18f6e..194614cf4213 100644\n--- a/src/Storages/MergeTree/ReplicatedMergeTreeTableMetadata.cpp\n+++ b/src/Storages/MergeTree/ReplicatedMergeTreeTableMetadata.cpp\n@@ -40,13 +40,10 @@ ReplicatedMergeTreeTableMetadata::ReplicatedMergeTreeTableMetadata(const MergeTr\n     /// So rules in zookeeper metadata is following:\n     /// - When we have only ORDER BY, than store it in \"primary key:\" row of /metadata\n     /// - When we have both, than store PRIMARY KEY in \"primary key:\" row and ORDER BY in \"sorting key:\" row of /metadata\n-    if (!metadata_snapshot->isPrimaryKeyDefined())\n-        primary_key = formattedAST(metadata_snapshot->getSortingKey().expression_list_ast);\n-    else\n-    {\n-        primary_key = formattedAST(metadata_snapshot->getPrimaryKey().expression_list_ast);\n+\n+    primary_key = formattedAST(metadata_snapshot->getPrimaryKey().expression_list_ast);\n+    if (metadata_snapshot->isPrimaryKeyDefined())\n         sorting_key = formattedAST(metadata_snapshot->getSortingKey().expression_list_ast);\n-    }\n \n     data_format_version = data.format_version;\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01357_version_collapsing_attach_detach_zookeeper.reference b/tests/queries/0_stateless/01357_version_collapsing_attach_detach_zookeeper.reference\nnew file mode 100644\nindex 000000000000..353c70aec11c\n--- /dev/null\n+++ b/tests/queries/0_stateless/01357_version_collapsing_attach_detach_zookeeper.reference\n@@ -0,0 +1,3 @@\n+metadata format version: 1\\ndate column: \\nsampling expression: \\nindex granularity: 8192\\nmode: 7\\nsign column: sign\\nprimary key: key1, key2\\ndata format version: 1\\npartition key: d\\ngranularity bytes: 10485760\\n\n+1\n+1\ndiff --git a/tests/queries/0_stateless/01357_version_collapsing_attach_detach_zookeeper.sql b/tests/queries/0_stateless/01357_version_collapsing_attach_detach_zookeeper.sql\nnew file mode 100644\nindex 000000000000..0086ec5c2a3b\n--- /dev/null\n+++ b/tests/queries/0_stateless/01357_version_collapsing_attach_detach_zookeeper.sql\n@@ -0,0 +1,26 @@\n+DROP TABLE IF EXISTS versioned_collapsing_table;\n+\n+CREATE TABLE versioned_collapsing_table(\n+  d Date,\n+  key1 UInt64,\n+  key2 UInt32,\n+  value String,\n+  sign Int8,\n+  version UInt16\n+)\n+ENGINE = ReplicatedVersionedCollapsingMergeTree('/clickhouse/versioned_collapsing_table', '1', sign, version)\n+PARTITION BY d\n+ORDER BY (key1, key2);\n+\n+INSERT INTO versioned_collapsing_table VALUES (toDate('2019-10-10'), 1, 1, 'Hello', -1, 1);\n+\n+SELECT value FROM system.zookeeper WHERE path = '/clickhouse/versioned_collapsing_table' and name = 'metadata';\n+\n+SELECT COUNT() FROM versioned_collapsing_table;\n+\n+DETACH TABLE versioned_collapsing_table;\n+ATTACH TABLE versioned_collapsing_table;\n+\n+SELECT COUNT() FROM versioned_collapsing_table;\n+\n+DROP TABLE IF EXISTS versioned_collapsing_table;\n",
  "problem_statement": "Inconsistent metadata in ReplicatedVersionedCollapsingMergeTree after upgrading to v20.5\nWe have upgraded to v20.5.2.7 from v20.1.11.73\r\n\r\nAnd now CH won't start up and we're seeing error where local PK metadata differ from ZK metadata.\r\n\r\nExisting table metadata in ZooKeeper differs in primary key. Stored in ZooKeeper: mac, port_id, topology_type, first_seen_at, last_seen_at, local: mac, port_id, topology_type, first_seen_at, last_seen_at, version\r\n\r\n```diff\r\n- ZK: mac, port_id, topology_type, first_seen_at, last_seen_at\r\n+ local mac, port_id, topology_type, first_seen_at, last_seen_at, version\r\n```\r\n\r\nAs you can see, CH somehow added `version` field to the PK in table with ReplicatedVersionedCollapsingMergeTree engine\r\n\r\nHow to resolve this?\r\n\r\nStacktrace:\r\n\r\n```0. Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x10ed0da0 in /usr/bin/clickhouse\r\n1. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x95c923d in /usr/bin/clickhouse\r\n2. ? @ 0xe5d7da6 in /usr/bin/clickhouse\r\n3. DB::ReplicatedMergeTreeTableMetadata::checkEquals(DB::ReplicatedMergeTreeTableMetadata const&, DB::ColumnsDescription const&, DB::Context const&) const @ 0xe5d5c49 in /usr/bin/clickhouse\r\n4. DB::StorageReplicatedMergeTree::checkTableStructure(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) @ 0xe27d184 in /usr/bin/clickhouse\r\n5. DB::StorageReplicatedMergeTree::StorageReplicatedMergeTree(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, bool, DB::StorageID const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::StorageInMemoryMetadata const&, DB::Context&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::MergeTreeData::MergingParams const&, std::__1::unique_ptr<DB::MergeTreeSettings, std::__1::default_delete<DB::MergeTreeSettings> >, bool) @ 0xe2a4e79 in /usr/bin/clickhouse\r\n6. ? @ 0xe5e382d in /usr/bin/clickhouse\r\n7. std::__1::__function::__func<std::__1::shared_ptr<DB::IStorage> (*)(DB::StorageFactory::Arguments const&), std::__1::allocator<std::__1::shared_ptr<DB::IStorage> (*)(DB::StorageFactory::Arguments const&)>, std::__1::shared_ptr<DB::IStorage> (DB::StorageFactory::Arguments const&)>::operator()(DB::StorageFactory::Arguments const&) @ 0xe5e7a37 in /usr/bin/clickhouse\r\n8. DB::StorageFactory::get(DB::ASTCreateQuery const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&, DB::Context&, DB::ColumnsDescription const&, DB::ConstraintsDescription const&, bool) const @ 0xe1e7d2d in /usr/bin/clickhouse\r\n9. DB::createTableFromAST(DB::ASTCreateQuery, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&, bool) @ 0xdba5749 in /usr/bin/clickhouse\r\n10. ? @ 0xdb98528 in /usr/bin/clickhouse\r\n11. ? @ 0xdb98ee2 in /usr/bin/clickhouse\r\n12. ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::__1::__list_iterator<ThreadFromGlobalPool, void*>) @ 0x95f7987 in /usr/bin/clickhouse\r\n13. ThreadFromGlobalPool::ThreadFromGlobalPool<void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()>(void&&, void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()&&...)::'lambda'()::operator()() const @ 0x95f80fa in /usr/bin/clickhouse\r\n14. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x95f6e97 in /usr/bin/clickhouse\r\n15. ? @ 0x95f5383 in /usr/bin/clickhouse\r\n16. start_thread @ 0x74a4 in /lib/x86_64-linux-gnu/libpthread-2.24.so\r\n17. __clone @ 0xe8d0f in /lib/x86_64-linux-gnu/libc-2.24.so\r\n (version 20.5.2.7 (official build))\r\n2020.07.02 16:40:02.369840 [ 4862 ] {} <Error> Application: DB::Exception: Existing table metadata in ZooKeeper differs in primary key. Stored in ZooKeeper: mac, port_id, topology_type, first_seen_at, last_seen_at, local: mac, port_id, topology_type, first_seen_at, last_seen_at, version: Cannot attach table `default`.`map___mac__port` from metadata file /var/lib/clickhouse/metadata/default/map___mac__port.sql from query ATTACH TABLE map___mac__port (`first_seen_at` DateTime, `last_seen_at` DateTime, `mac` UInt64, `port_id` UUID, `topology_type` Enum8('Edge' = 1, 'Infrastructure' = 2), `sign` Int8, `version` UInt32) ENGINE = ReplicatedVersionedCollapsingMergeTree('/clickhouse/tables/{shard}/map___mac__port', '{replica}', sign, version) PARTITION BY toDate(first_seen_at) ORDER BY (mac, port_id, topology_type, first_seen_at, last_seen_at) SETTINGS index_granularity = 8192```\n",
  "hints_text": "",
  "created_at": "2020-07-03T18:05:55Z"
}