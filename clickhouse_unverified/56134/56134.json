{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 56134,
  "instance_id": "ClickHouse__ClickHouse-56134",
  "issue_numbers": [
    "55331"
  ],
  "base_commit": "e33dc02c8c226c58ced9faef2fcb8fa09d4c917a",
  "patch": "diff --git a/docs/en/operations/settings/settings.md b/docs/en/operations/settings/settings.md\nindex ccf290c8e20c..0e26bb71be2b 100644\n--- a/docs/en/operations/settings/settings.md\n+++ b/docs/en/operations/settings/settings.md\n@@ -3944,6 +3944,16 @@ Possible values:\n \n Default value: `0`.\n \n+## force_optimize_projection_name {#force-optimize-projection_name}\n+\n+If it is set to a non-empty string, check that this projection is used in the query at least once.\n+\n+Possible values:\n+\n+- string: name of projection that used in a query\n+\n+Default value: `''`.\n+\n ## alter_sync {#alter-sync}\n \n Allows to set up waiting for actions to be executed on replicas by [ALTER](../../sql-reference/statements/alter/index.md), [OPTIMIZE](../../sql-reference/statements/optimize.md) or [TRUNCATE](../../sql-reference/statements/truncate.md) queries.\ndiff --git a/src/Core/Settings.h b/src/Core/Settings.h\nindex 733cebe44114..645d0a81a849 100644\n--- a/src/Core/Settings.h\n+++ b/src/Core/Settings.h\n@@ -601,6 +601,7 @@ class IColumn;\n     M(Bool, optimize_use_projections, true, \"Automatically choose projections to perform SELECT query\", 0) ALIAS(allow_experimental_projection_optimization) \\\n     M(Bool, optimize_use_implicit_projections, true, \"Automatically choose implicit projections to perform SELECT query\", 0) \\\n     M(Bool, force_optimize_projection, false, \"If projection optimization is enabled, SELECT queries need to use projection\", 0) \\\n+    M(String, force_optimize_projection_name, \"\", \"If it is set to a non-empty string, check that this projection is used in the query at least once.\", 0) \\\n     M(Bool, async_socket_for_remote, true, \"Asynchronously read from socket executing remote query\", 0) \\\n     M(Bool, async_query_sending_for_remote, true, \"Asynchronously create connections and send query to shards in remote query\", 0) \\\n     M(Bool, insert_null_as_default, true, \"Insert DEFAULT values instead of NULL in INSERT SELECT (UNION ALL)\", 0) \\\ndiff --git a/src/Interpreters/executeQuery.cpp b/src/Interpreters/executeQuery.cpp\nindex decda4c62f92..a5c0d9421d9a 100644\n--- a/src/Interpreters/executeQuery.cpp\n+++ b/src/Interpreters/executeQuery.cpp\n@@ -101,6 +101,7 @@ namespace ErrorCodes\n     extern const int LOGICAL_ERROR;\n     extern const int NOT_IMPLEMENTED;\n     extern const int QUERY_WAS_CANCELLED;\n+    extern const int INCORRECT_DATA;\n }\n \n \n@@ -1131,6 +1132,29 @@ static std::tuple<ASTPtr, BlockIO> executeQueryImpl(\n                 }\n             }\n         }\n+        // Here we check if our our projections contain force_optimize_projection_name\n+        if (!settings.force_optimize_projection_name.value.empty())\n+        {\n+            bool found = false;\n+            std::set<std::string> projections = context->getQueryAccessInfo().projections;\n+\n+            for (const auto &projection : projections)\n+            {\n+                // projection value has structure like: <db_name>.<table_name>.<projection_name>\n+                // We need to get only the projection name\n+                size_t last_dot_pos = projection.find_last_of('.');\n+                std::string projection_name = (last_dot_pos != std::string::npos) ? projection.substr(last_dot_pos + 1) : projection;\n+                if (settings.force_optimize_projection_name.value == projection_name)\n+                {\n+                    found = true;\n+                    break;\n+                }\n+            }\n+\n+            if (!found)\n+                throw Exception(ErrorCodes::INCORRECT_DATA, \"Projection {} is specified in setting force_optimize_projection_name but not used\",\n+                                settings.force_optimize_projection_name.value);\n+        }\n \n         if (process_list_entry)\n         {\ndiff --git a/src/Processors/QueryPlan/Optimizations/QueryPlanOptimizationSettings.cpp b/src/Processors/QueryPlan/Optimizations/QueryPlanOptimizationSettings.cpp\nindex b36449ab5685..0149ecc11d03 100644\n--- a/src/Processors/QueryPlan/Optimizations/QueryPlanOptimizationSettings.cpp\n+++ b/src/Processors/QueryPlan/Optimizations/QueryPlanOptimizationSettings.cpp\n@@ -19,6 +19,7 @@ QueryPlanOptimizationSettings QueryPlanOptimizationSettings::fromSettings(const\n     settings.remove_redundant_distinct = from.query_plan_remove_redundant_distinct;\n     settings.optimize_projection = from.optimize_use_projections;\n     settings.force_use_projection = settings.optimize_projection && from.force_optimize_projection;\n+    settings.force_projection_name = from.force_optimize_projection_name;\n     settings.optimize_use_implicit_projections = settings.optimize_projection && from.optimize_use_implicit_projections;\n     return settings;\n }\ndiff --git a/src/Processors/QueryPlan/Optimizations/QueryPlanOptimizationSettings.h b/src/Processors/QueryPlan/Optimizations/QueryPlanOptimizationSettings.h\nindex d98c34ce2264..9315b4b9ee43 100644\n--- a/src/Processors/QueryPlan/Optimizations/QueryPlanOptimizationSettings.h\n+++ b/src/Processors/QueryPlan/Optimizations/QueryPlanOptimizationSettings.h\n@@ -41,6 +41,7 @@ struct QueryPlanOptimizationSettings\n     /// If reading from projection can be applied\n     bool optimize_projection = false;\n     bool force_use_projection = false;\n+    String force_projection_name;\n     bool optimize_use_implicit_projections = false;\n \n     static QueryPlanOptimizationSettings fromSettings(const Settings & from);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02906_force_optimize_projection_name.reference b/tests/queries/0_stateless/02906_force_optimize_projection_name.reference\nnew file mode 100644\nindex 000000000000..9daeafb9864c\n--- /dev/null\n+++ b/tests/queries/0_stateless/02906_force_optimize_projection_name.reference\n@@ -0,0 +1,1 @@\n+test\ndiff --git a/tests/queries/0_stateless/02906_force_optimize_projection_name.sql b/tests/queries/0_stateless/02906_force_optimize_projection_name.sql\nnew file mode 100644\nindex 000000000000..773f8cc514d7\n--- /dev/null\n+++ b/tests/queries/0_stateless/02906_force_optimize_projection_name.sql\n@@ -0,0 +1,19 @@\n+CREATE TABLE test\n+(\n+   `id` UInt64,\n+   `name` String,\n+   PROJECTION projection_name\n+   (\n+       SELECT sum(id) GROUP BY id, name\n+   )\n+)\n+ENGINE = MergeTree()\n+ORDER BY id;\n+\n+INSERT INTO test SELECT number, 'test' FROM numbers(1, 100);\n+\n+SELECT name FROM test GROUP BY name SETTINGS force_optimize_projection_name='projection_name';\n+\n+SELECT name FROM test GROUP BY name SETTINGS force_optimize_projection_name='non_existing_projection'; -- { serverError 117 }\n+\n+SELECT name FROM test SETTINGS force_optimize_projection_name='projection_name'; -- { serverError 117 }\n",
  "problem_statement": "A setting `force_optimize_projection_name`\n**Use case**\r\n\r\nSimilar to `force_optimize_projection`.\r\n\r\n**Describe the solution you'd like**\r\n\r\nIf it is set to a non-empty string, check that this projection is used in the query at least once.\r\n\r\n**Additional context**\r\n\r\nThere could be ambiguity with queries containing multiple tables, possibly with identical projection names.\r\n\r\nWe should resolve this ambiguity by checking that the reading from at least one table was optimized by using the projection with this name.\r\n\r\nAlternatively, we could make the setting value as a map of database.table -> projection_name, but it does not resolve the case of one table being used multiple times when only some cases have to be optimized, and will also be harder to use... while the simple name specification is good enough for a hint.\r\n\n",
  "hints_text": "Could you let me try this ?\r\n\n@lingtaolf, thank you!\r\n\r\nThe only tricky part I see is to collect the used projections in a query and check them later (instead of checking immediately as `force_optimize_projection` does).",
  "created_at": "2023-10-30T17:21:25Z",
  "modified_files": [
    "docs/en/operations/settings/settings.md",
    "src/Core/Settings.h",
    "src/Interpreters/executeQuery.cpp",
    "src/Processors/QueryPlan/Optimizations/QueryPlanOptimizationSettings.cpp",
    "src/Processors/QueryPlan/Optimizations/QueryPlanOptimizationSettings.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02906_force_optimize_projection_name.reference",
    "b/tests/queries/0_stateless/02906_force_optimize_projection_name.sql"
  ]
}