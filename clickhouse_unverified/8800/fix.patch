diff --git a/dbms/src/DataStreams/TTLBlockInputStream.cpp b/dbms/src/DataStreams/TTLBlockInputStream.cpp
index 339f81321e4b..c08abba3bdf3 100644
--- a/dbms/src/DataStreams/TTLBlockInputStream.cpp
+++ b/dbms/src/DataStreams/TTLBlockInputStream.cpp
@@ -70,7 +70,7 @@ bool TTLBlockInputStream::isTTLExpired(time_t ttl)
 Block TTLBlockInputStream::readImpl()
 {
     /// Skip all data if table ttl is expired for part
-    if (storage.hasTableTTL() && isTTLExpired(old_ttl_infos.table_ttl.max))
+    if (storage.hasRowsTTL() && isTTLExpired(old_ttl_infos.table_ttl.max))
     {
         rows_removed = data_part->rows_count;
         return {};
@@ -80,7 +80,7 @@ Block TTLBlockInputStream::readImpl()
     if (!block)
         return block;
 
-    if (storage.hasTableTTL() && (force || isTTLExpired(old_ttl_infos.table_ttl.min)))
+    if (storage.hasRowsTTL() && (force || isTTLExpired(old_ttl_infos.table_ttl.min)))
         removeRowsWithExpiredTableTTL(block);
 
     removeValuesWithExpiredColumnTTL(block);
@@ -106,10 +106,10 @@ void TTLBlockInputStream::readSuffixImpl()
 
 void TTLBlockInputStream::removeRowsWithExpiredTableTTL(Block & block)
 {
-    storage.ttl_table_entry.expression->execute(block);
+    storage.rows_ttl_entry.expression->execute(block);
 
     const IColumn * ttl_column =
-        block.getByName(storage.ttl_table_entry.result_column).column.get();
+        block.getByName(storage.rows_ttl_entry.result_column).column.get();
 
     const auto & column_names = header.getNames();
     MutableColumns result_columns;
diff --git a/dbms/src/Storages/MergeTree/MergeTreeData.cpp b/dbms/src/Storages/MergeTree/MergeTreeData.cpp
index 210d412d86f9..d1c9e274e381 100644
--- a/dbms/src/Storages/MergeTree/MergeTreeData.cpp
+++ b/dbms/src/Storages/MergeTree/MergeTreeData.cpp
@@ -101,6 +101,7 @@ namespace ErrorCodes
     extern const int UNKNOWN_SETTING;
     extern const int READONLY_SETTING;
     extern const int ABORTED;
+    extern const int UNEXPECTED_AST_STRUCTURE;
 }
 
 
@@ -626,7 +627,7 @@ void MergeTreeData::setTTLExpressions(const ColumnsDescription::ColumnTTLs & new
             {
                 auto new_ttl_entry = create_ttl_entry(ast);
                 if (!only_check)
-                    column_ttl_entries_by_name.emplace(name, new_ttl_entry);
+                    column_ttl_entries_by_name[name] = new_ttl_entry;
             }
         }
     }
@@ -634,36 +635,35 @@ void MergeTreeData::setTTLExpressions(const ColumnsDescription::ColumnTTLs & new
     if (new_ttl_table_ast)
     {
         std::vector<TTLEntry> update_move_ttl_entries;
-        ASTPtr update_ttl_table_ast = nullptr;
-        TTLEntry update_ttl_table_entry;
+        TTLEntry update_rows_ttl_entry;
 
         bool seen_delete_ttl = false;
         for (auto ttl_element_ptr : new_ttl_table_ast->children)
         {
-            ASTTTLElement & ttl_element = static_cast<ASTTTLElement &>(*ttl_element_ptr);
-            if (ttl_element.destination_type == PartDestinationType::DELETE)
+            const auto * ttl_element = ttl_element_ptr->as<ASTTTLElement>();
+            if (!ttl_element)
+                throw Exception("Unexpected AST element in TTL expression", ErrorCodes::UNEXPECTED_AST_STRUCTURE);
+
+            if (ttl_element->destination_type == PartDestinationType::DELETE)
             {
                 if (seen_delete_ttl)
                 {
                     throw Exception("More than one DELETE TTL expression is not allowed", ErrorCodes::BAD_TTL_EXPRESSION);
                 }
 
-                auto new_ttl_table_entry = create_ttl_entry(ttl_element.children[0]);
+                auto new_rows_ttl_entry = create_ttl_entry(ttl_element->children[0]);
                 if (!only_check)
-                {
-                    update_ttl_table_ast = ttl_element.children[0];
-                    update_ttl_table_entry = new_ttl_table_entry;
-                }
+                    update_rows_ttl_entry = new_rows_ttl_entry;
 
                 seen_delete_ttl = true;
             }
             else
             {
-                auto new_ttl_entry = create_ttl_entry(ttl_element.children[0]);
+                auto new_ttl_entry = create_ttl_entry(ttl_element->children[0]);
 
                 new_ttl_entry.entry_ast = ttl_element_ptr;
-                new_ttl_entry.destination_type = ttl_element.destination_type;
-                new_ttl_entry.destination_name = ttl_element.destination_name;
+                new_ttl_entry.destination_type = ttl_element->destination_type;
+                new_ttl_entry.destination_name = ttl_element->destination_name;
                 if (!new_ttl_entry.getDestination(getStoragePolicy()))
                 {
                     String message;
@@ -681,8 +681,8 @@ void MergeTreeData::setTTLExpressions(const ColumnsDescription::ColumnTTLs & new
 
         if (!only_check)
         {
-            ttl_table_entry = update_ttl_table_entry;
-            ttl_table_ast = update_ttl_table_ast;
+            rows_ttl_entry = update_rows_ttl_entry;
+            ttl_table_ast = new_ttl_table_ast;
 
             auto move_ttl_entries_lock = std::lock_guard<std::mutex>(move_ttl_entries_mutex);
             move_ttl_entries = update_move_ttl_entries;
diff --git a/dbms/src/Storages/MergeTree/MergeTreeData.h b/dbms/src/Storages/MergeTree/MergeTreeData.h
index 3c051829a61b..ba2af73a421f 100644
--- a/dbms/src/Storages/MergeTree/MergeTreeData.h
+++ b/dbms/src/Storages/MergeTree/MergeTreeData.h
@@ -576,8 +576,10 @@ class MergeTreeData : public IStorage
     bool hasSortingKey() const { return !sorting_key_columns.empty(); }
     bool hasPrimaryKey() const { return !primary_key_columns.empty(); }
     bool hasSkipIndices() const { return !skip_indices.empty(); }
-    bool hasTableTTL() const { return ttl_table_ast != nullptr; }
+
     bool hasAnyColumnTTL() const { return !column_ttl_entries_by_name.empty(); }
+    bool hasAnyMoveTTL() const { return !move_ttl_entries.empty(); }
+    bool hasRowsTTL() const { return rows_ttl_entry.isEmpty(); }
 
     /// Check that the part is not broken and calculate the checksums for it if they are not present.
     MutableDataPartPtr loadPartAndFixMetadata(const DiskPtr & disk, const String & relative_path);
@@ -735,6 +737,8 @@ class MergeTreeData : public IStorage
 
         /// Checks if given part already belongs destination disk or volume for this rule.
         bool isPartInDestination(const StoragePolicyPtr & policy, const MergeTreeDataPart & part) const;
+
+        bool isEmpty() const { return expression != nullptr; }
     };
 
     std::optional<TTLEntry> selectTTLEntryForTTLInfos(const MergeTreeDataPart::TTLInfos & ttl_infos, time_t time_of_move) const;
@@ -742,7 +746,7 @@ class MergeTreeData : public IStorage
     using TTLEntriesByName = std::unordered_map<String, TTLEntry>;
     TTLEntriesByName column_ttl_entries_by_name;
 
-    TTLEntry ttl_table_entry;
+    TTLEntry rows_ttl_entry;
 
     /// This mutex is required for background move operations which do not obtain global locks.
     mutable std::mutex move_ttl_entries_mutex;
diff --git a/dbms/src/Storages/MergeTree/MergeTreeDataWriter.cpp b/dbms/src/Storages/MergeTree/MergeTreeDataWriter.cpp
index 1c8e2e5621ab..549345de8d1e 100644
--- a/dbms/src/Storages/MergeTree/MergeTreeDataWriter.cpp
+++ b/dbms/src/Storages/MergeTree/MergeTreeDataWriter.cpp
@@ -278,8 +278,8 @@ MergeTreeData::MutableDataPartPtr MergeTreeDataWriter::writeTempPart(BlockWithPa
             ProfileEvents::increment(ProfileEvents::MergeTreeDataWriterBlocksAlreadySorted);
     }
 
-    if (data.hasTableTTL())
-        updateTTL(data.ttl_table_entry, new_data_part->ttl_infos, new_data_part->ttl_infos.table_ttl, block, true);
+    if (data.hasRowsTTL())
+        updateTTL(data.rows_ttl_entry, new_data_part->ttl_infos, new_data_part->ttl_infos.table_ttl, block, true);
 
     for (const auto & [name, ttl_entry] : data.column_ttl_entries_by_name)
         updateTTL(ttl_entry, new_data_part->ttl_infos, new_data_part->ttl_infos.columns_ttl[name], block, true);
diff --git a/dbms/src/Storages/MergeTree/ReplicatedMergeTreeTableMetadata.cpp b/dbms/src/Storages/MergeTree/ReplicatedMergeTreeTableMetadata.cpp
index 703659bb4eae..4ebb51f0b41c 100644
--- a/dbms/src/Storages/MergeTree/ReplicatedMergeTreeTableMetadata.cpp
+++ b/dbms/src/Storages/MergeTree/ReplicatedMergeTreeTableMetadata.cpp
@@ -55,15 +55,6 @@ ReplicatedMergeTreeTableMetadata::ReplicatedMergeTreeTableMetadata(const MergeTr
 
     ttl_table = formattedAST(data.ttl_table_ast);
 
-    std::ostringstream ttl_move_stream;
-    for (const auto & ttl_entry : data.move_ttl_entries)
-    {
-        if (ttl_move_stream.tellp() > 0)
-            ttl_move_stream << ", ";
-        ttl_move_stream << formattedAST(ttl_entry.entry_ast);
-    }
-    ttl_move = ttl_move_stream.str();
-
     skip_indices = data.getIndices().toString();
     if (data.canUseAdaptiveGranularity())
         index_granularity_bytes = data_settings->index_granularity_bytes;
@@ -95,9 +86,6 @@ void ReplicatedMergeTreeTableMetadata::write(WriteBuffer & out) const
     if (!ttl_table.empty())
         out << "ttl: " << ttl_table << "
";
 
-    if (!ttl_move.empty())
-        out << "move ttl: " << ttl_move << "
";
-
     if (!skip_indices.empty())
         out << "indices: " << skip_indices << "
";
 
@@ -139,9 +127,6 @@ void ReplicatedMergeTreeTableMetadata::read(ReadBuffer & in)
     if (checkString("ttl: ", in))
         in >> ttl_table >> "
";
 
-    if (checkString("move ttl: ", in))
-        in >> ttl_move >> "
";
-
     if (checkString("indices: ", in))
         in >> skip_indices >> "
";
 
@@ -252,21 +237,6 @@ ReplicatedMergeTreeTableMetadata::checkAndFindDiff(const ReplicatedMergeTreeTabl
                     ErrorCodes::METADATA_MISMATCH);
     }
 
-    if (ttl_move != from_zk.ttl_move)
-    {
-        if (allow_alter)
-        {
-            diff.ttl_move_changed = true;
-            diff.new_ttl_move = from_zk.ttl_move;
-        }
-        else
-            throw Exception(
-                    "Existing table metadata in ZooKeeper differs in move TTL."
-                    " Stored in ZooKeeper: " + from_zk.ttl_move +
-                    ", local: " + ttl_move,
-                    ErrorCodes::METADATA_MISMATCH);
-    }
-
     if (skip_indices != from_zk.skip_indices)
     {
         if (allow_alter)
diff --git a/dbms/src/Storages/MergeTree/ReplicatedMergeTreeTableMetadata.h b/dbms/src/Storages/MergeTree/ReplicatedMergeTreeTableMetadata.h
index 23fc4f6a0246..d8af3c2087af 100644
--- a/dbms/src/Storages/MergeTree/ReplicatedMergeTreeTableMetadata.h
+++ b/dbms/src/Storages/MergeTree/ReplicatedMergeTreeTableMetadata.h
@@ -28,7 +28,6 @@ struct ReplicatedMergeTreeTableMetadata
     String skip_indices;
     String constraints;
     String ttl_table;
-    String ttl_move;
     UInt64 index_granularity_bytes;
 
     ReplicatedMergeTreeTableMetadata() = default;
@@ -54,12 +53,9 @@ struct ReplicatedMergeTreeTableMetadata
         bool ttl_table_changed = false;
         String new_ttl_table;
 
-        bool ttl_move_changed = false;
-        String new_ttl_move;
-
         bool empty() const
         {
-            return !sorting_key_changed && !skip_indices_changed && !ttl_table_changed && !constraints_changed && !ttl_move_changed;
+            return !sorting_key_changed && !skip_indices_changed && !ttl_table_changed && !constraints_changed;
         }
     };
 
diff --git a/dbms/src/Storages/StorageMergeTree.cpp b/dbms/src/Storages/StorageMergeTree.cpp
index f5279ebef923..d8b25627a7e7 100644
--- a/dbms/src/Storages/StorageMergeTree.cpp
+++ b/dbms/src/Storages/StorageMergeTree.cpp
@@ -652,7 +652,7 @@ bool StorageMergeTree::merge(
     {
         /// Force filter by TTL in 'OPTIMIZE ... FINAL' query to remove expired values from old parts
         ///  without TTL infos or with outdated TTL infos, e.g. after 'ALTER ... MODIFY TTL' query.
-        bool force_ttl = (final && (hasTableTTL() || hasAnyColumnTTL()));
+        bool force_ttl = (final && (hasRowsTTL() || hasAnyColumnTTL()));
 
         new_part = merger_mutator.mergePartsToTemporaryPart(
             future_part, *merge_entry, table_lock_holder, time(nullptr),
diff --git a/dbms/src/Storages/StorageReplicatedMergeTree.cpp b/dbms/src/Storages/StorageReplicatedMergeTree.cpp
index 2fdd7daa6844..db113624f68b 100644
--- a/dbms/src/Storages/StorageReplicatedMergeTree.cpp
+++ b/dbms/src/Storages/StorageReplicatedMergeTree.cpp
@@ -3132,7 +3132,7 @@ bool StorageReplicatedMergeTree::optimize(const ASTPtr & query, const ASTPtr & p
             return false;
         };
 
-        bool force_ttl = (final && (hasTableTTL() || hasAnyColumnTTL()));
+        bool force_ttl = (final && (hasRowsTTL() || hasAnyColumnTTL()));
         const auto storage_settings_ptr = getSettings();
 
         if (!partition && final)
