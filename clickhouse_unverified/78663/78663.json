{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 78663,
  "instance_id": "ClickHouse__ClickHouse-78663",
  "issue_numbers": [
    "67602"
  ],
  "base_commit": "98102ff6ff1e04847234314a103426f778fbfd08",
  "patch": "diff --git a/src/Interpreters/InterpreterCreateQuery.cpp b/src/Interpreters/InterpreterCreateQuery.cpp\nindex 110f5280b1ec..2ee1a5aeda72 100644\n--- a/src/Interpreters/InterpreterCreateQuery.cpp\n+++ b/src/Interpreters/InterpreterCreateQuery.cpp\n@@ -1107,7 +1107,10 @@ void InterpreterCreateQuery::validateMaterializedViewColumnsAndEngine(const ASTC\n         {\n             if (getContext()->getSettingsRef()[Setting::allow_experimental_analyzer])\n             {\n-                input_block = InterpreterSelectQueryAnalyzer::getSampleBlock(create.select->clone(), getContext());\n+                /// We should treat SELECT as an initial query in order to properly analyze it.\n+                auto context = Context::createCopy(getContext());\n+                context->setQueryKindInitial();\n+                input_block = InterpreterSelectQueryAnalyzer::getSampleBlock(create.select->clone(), context, SelectQueryOptions{}.createView());\n             }\n             else\n             {\ndiff --git a/src/Interpreters/InterpreterSelectQueryAnalyzer.cpp b/src/Interpreters/InterpreterSelectQueryAnalyzer.cpp\nindex fc74a1687ccd..886769808fb5 100644\n--- a/src/Interpreters/InterpreterSelectQueryAnalyzer.cpp\n+++ b/src/Interpreters/InterpreterSelectQueryAnalyzer.cpp\n@@ -158,6 +158,7 @@ static QueryTreeNodePtr buildQueryTreeAndRunPasses(const ASTPtr & query,\n     /// We should not apply any query tree level optimizations on shards\n     /// because it can lead to a changed header.\n     if (select_query_options.ignore_ast_optimizations\n+        || select_query_options.is_create_view\n         || context->getClientInfo().query_kind == ClientInfo::QueryKind::SECONDARY_QUERY)\n         query_tree_pass_manager.runOnlyResolve(query_tree);\n     else\ndiff --git a/src/Interpreters/SelectQueryOptions.h b/src/Interpreters/SelectQueryOptions.h\nindex efe94f96772e..a87c5993a538 100644\n--- a/src/Interpreters/SelectQueryOptions.h\n+++ b/src/Interpreters/SelectQueryOptions.h\n@@ -45,6 +45,7 @@ struct SelectQueryOptions\n     bool is_create_parameterized_view = false;\n     /// Bypass setting constraints for some internal queries such as projection ASTs.\n     bool ignore_setting_constraints = false;\n+    bool is_create_view = false; /// this select is a part of CREATE [MATERIALIZED] VIEW query\n \n     /// Bypass access check for select query.\n     /// This allows to skip double access check in some specific cases (e.g. insert into table with materialized view)\n@@ -84,6 +85,12 @@ struct SelectQueryOptions\n         return out;\n     }\n \n+    SelectQueryOptions & createView(bool value = true)\n+    {\n+        is_create_view = value;\n+        return *this;\n+    }\n+\n     SelectQueryOptions createParameterizedView() const\n     {\n         SelectQueryOptions out = *this;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02006_test_positional_arguments_on_cluster.reference b/tests/queries/0_stateless/02006_test_positional_arguments_on_cluster.reference\nindex 05dd41748d1a..9c178b82473d 100644\n--- a/tests/queries/0_stateless/02006_test_positional_arguments_on_cluster.reference\n+++ b/tests/queries/0_stateless/02006_test_positional_arguments_on_cluster.reference\n@@ -1,2 +1,4 @@\n d\tDate\t\t\t\t\t\n f\tUInt64\t\t\t\t\t\n+a\tString\t\t\t\t\t\n+total\tUInt64\t\t\t\t\t\ndiff --git a/tests/queries/0_stateless/02006_test_positional_arguments_on_cluster.sql b/tests/queries/0_stateless/02006_test_positional_arguments_on_cluster.sql\nindex 1d8a4e4f8d7b..e13ebf491271 100644\n--- a/tests/queries/0_stateless/02006_test_positional_arguments_on_cluster.sql\n+++ b/tests/queries/0_stateless/02006_test_positional_arguments_on_cluster.sql\n@@ -17,3 +17,40 @@ DESC t02006;\n \n DROP TABLE IF EXISTS t02006 on cluster test_shard_localhost format Null;\n DROP TABLE IF EXISTS m02006 on cluster test_shard_localhost format Null;\n+DROP TABLE IF EXISTS tt02006 on cluster test_shard_localhost format Null;\n+\n+SET enable_analyzer=1;\n+\n+CREATE TABLE t02006 ON CLUSTER test_shard_localhost\n+(\n+    `a` String,\n+    `b` UInt32\n+)\n+ENGINE = ReplicatedMergeTree\n+PRIMARY KEY a\n+ORDER BY a\n+format Null;\n+\n+CREATE TABLE tt02006 ON CLUSTER test_shard_localhost\n+(\n+    `a` String,\n+    `total` SimpleAggregateFunction(sum, UInt64)\n+)\n+ENGINE = ReplicatedAggregatingMergeTree\n+ORDER BY a\n+format Null;\n+\n+CREATE MATERIALIZED VIEW m02006 ON CLUSTER test_shard_localhost TO tt02006\n+AS SELECT\n+    a,\n+    sum(b) AS total\n+FROM  t02006\n+GROUP BY 1\n+ORDER BY 1 ASC\n+format Null;\n+\n+DESC m02006;\n+\n+DROP TABLE IF EXISTS t02006 on cluster test_shard_localhost format Null;\n+DROP TABLE IF EXISTS m02006 on cluster test_shard_localhost format Null;\n+DROP TABLE IF EXISTS tt02006 on cluster test_shard_localhost format Null;\n",
  "problem_statement": "NOT_AN_AGGREGATE Error when creating MVs witn ON CLUSTER clause\n**Describe what's wrong**\r\n\r\nWhen creating an MV with an `ON CLUSTER` clause, the following error is being raised:\r\n```\r\nReceived exception from server (version 24.7.1):\r\nCode: 215. DB::Exception: Received from localhost:9000. DB::Exception: There was an error on [chi-clickhouse-vusmart-0-1:9000]: Code: 215. DB::Exception: Column default.test.a is not under aggregate function and not in GROUP BY keys. In query SELECT a, sum(b) AS total FROM default.test GROUP BY 1 ORDER BY 1 ASC. (NOT_AN_AGGREGATE) (version 24.7.1.2915 (official build)). (NOT_AN_AGGREGATE)\r\n```\r\n**This error happens with version `24.7.1` but not with version `23.12`**\r\n\r\n**How to reproduce**\r\n\r\nRun the following statements:\r\n\r\n```SQL\r\nCREATE TABLE default.test ON CLUSTER default\r\n(\r\n    `a` String,\r\n    `b` UInt32\r\n)\r\nENGINE = ReplicatedMergeTree\r\nPRIMARY KEY a\r\nORDER BY a;\r\n\r\n\r\nSELECT * FROM cluster('default', default.test);\r\n\r\n\r\n\r\nCREATE TABLE default.test_mv_tbl ON CLUSTER default\r\n(\r\n    `a` String,\r\n    `total` SimpleAggregateFunction(sum, UInt64)\r\n)\r\nENGINE = ReplicatedAggregatingMergeTree\r\nORDER BY a;\r\n\r\n\r\nCREATE MATERIALIZED VIEW test_mv ON CLUSTER default TO test_mv_tbl\r\nAS SELECT\r\n    a,\r\n    sum(b) AS total\r\nFROM  default.test\r\nGROUP BY 1\r\nORDER BY 1 ASC\r\n```\r\n\r\n\r\n**Expected behavior**\r\n\r\nWe expect the MV to be created with no issues.\r\n\r\n**Error message and/or stacktrace**\r\n```\r\nReceived exception from server (version 24.7.1):\r\nCode: 215. DB::Exception: Received from localhost:9000. DB::Exception: There was an error on [chi-clickhouse-vusmart-0-1:9000]: Code: 215. DB::Exception: Column default.test.a is not under aggregate function and not in GROUP BY keys. In query SELECT a, sum(b) AS total FROM default.test GROUP BY 1 ORDER BY 1 ASC. (NOT_AN_AGGREGATE) (version 24.7.1.2915 (official build)). (NOT_AN_AGGREGATE)\r\n```\r\n\r\n**Additional context**\r\nWhen disabling the analyzer with `SET allow_experimental_analyzer = 0`, this works with `24.7.1` as well.\r\n\n",
  "hints_text": "Not sure if this is related, but we changed our MV definition from `GROUP BY 1, 2` (ordinal position) to `GROUP BY col1, col2` (explicit column names). Hope that helps.\nAlso happening on `24.8.5.115` server version. Tables seems to be unaffected, only MVs.",
  "created_at": "2025-04-04T04:13:41Z",
  "modified_files": [
    "src/Interpreters/InterpreterCreateQuery.cpp",
    "src/Interpreters/InterpreterSelectQueryAnalyzer.cpp",
    "src/Interpreters/SelectQueryOptions.h"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/02006_test_positional_arguments_on_cluster.reference",
    "tests/queries/0_stateless/02006_test_positional_arguments_on_cluster.sql"
  ]
}