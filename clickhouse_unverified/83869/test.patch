diff --git a/tests/queries/0_stateless/03567_max_joined_block_size_bytes.reference b/tests/queries/0_stateless/03567_max_joined_block_size_bytes.reference
new file mode 100644
index 000000000000..26b99bf2a7c0
--- /dev/null
+++ b/tests/queries/0_stateless/03567_max_joined_block_size_bytes.reference
@@ -0,0 +1,991 @@
+-- { echo ON }
+
+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))
+FROM
+(
+    SELECT blockSize() AS bs
+    FROM
+    (
+        SELECT v1, v2
+        FROM
+        (
+            SELECT
+                number AS n,
+                rightPad(toString(number), 64, '_') AS v1,
+                bitAnd(number, 7) AS k
+            FROM numbers(65536)
+        ) AS l
+        INNER JOIN
+        (
+            SELECT bitAnd(number, 7) AS k,
+            rightPad(toString(number), 64, '_') AS v2
+            FROM numbers(8 * 32)
+        ) AS r ON l.k = r.k
+    )
+)
+SETTINGS max_joined_block_size_bytes = '10Mi', join_algorithm = 'hash';
+ok
+SELECT DISTINCT if (blockSize() as bs < 1000, 'ok', toString(bs))
+FROM
+(
+    SELECT v
+    FROM
+    (
+        SELECT
+            number AS n,
+            rightPad(toString(number), 1024, '_') AS v,
+            bitAnd(number, 7) AS k
+        FROM numbers(65536)
+    ) AS l
+    INNER JOIN
+    (
+        SELECT bitAnd(number, 7) AS k
+        FROM numbers(8 * 32)
+    ) AS r ON l.k = r.k
+)
+SETTINGS max_joined_block_size_bytes = '1Mi', join_algorithm='hash';
+ok
+SELECT DISTINCT if (blockSize() as bs < 1000, 'ok', toString(bs))
+FROM
+(
+    SELECT v
+    FROM
+    (
+        SELECT
+            number AS n,
+            bitAnd(number, 7) AS k
+        FROM numbers(65536)
+    ) AS l
+    INNER JOIN
+    (
+        SELECT
+            bitAnd(number, 7) AS k,
+            rightPad(toString(number), 1024, '_') AS v
+        FROM numbers(8 * 32)
+    ) AS r ON l.k = r.k
+)
+SETTINGS max_joined_block_size_bytes = '1Mi', join_algorithm='hash';
+ok
+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))
+FROM
+(
+    SELECT blockSize() AS bs
+    FROM
+    (
+        SELECT v
+        FROM
+        (
+            SELECT
+                number AS n,
+                rightPad(toString(number), 1024, '_') AS v,
+                bitAnd(number, 7) AS k
+            FROM numbers(65536)
+        ) AS l
+        INNER JOIN
+        (
+            SELECT bitAnd(number, 7) AS k
+            FROM numbers(8 * 32)
+        ) AS r ON l.k = r.k
+    )
+)
+SETTINGS max_joined_block_size_bytes = '1Gi', join_algorithm = 'hash';
+ok
+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))
+FROM
+(
+    SELECT blockSize() AS bs
+    FROM
+    (
+        SELECT v
+        FROM
+        (
+            SELECT
+                number AS n,
+                bitAnd(number, 7) AS k
+            FROM numbers(65536)
+        ) AS l
+        INNER JOIN
+        (
+            SELECT
+                bitAnd(number, 7) AS k,
+                rightPad(toString(number), 1024, '_') AS v
+            FROM numbers(8 * 32)
+        ) AS r ON l.k = r.k
+    )
+)
+SETTINGS max_joined_block_size_bytes = '1Gi', join_algorithm = 'hash';
+ok
+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))
+FROM
+(
+    SELECT blockSize() AS bs
+    FROM
+    (
+        SELECT v1, v2
+        FROM
+        (
+            SELECT
+                number AS n,
+                rightPad(toString(number), 64, '_') AS v1,
+                bitAnd(number, 7) AS k
+            FROM numbers(65536)
+        ) AS l
+        INNER JOIN
+        (
+            SELECT bitAnd(number, 7) AS k,
+            rightPad(toString(number), 64, '_') AS v2
+            FROM numbers(8 * 32)
+        ) AS r ON l.k = r.k
+    )
+)
+SETTINGS max_joined_block_size_bytes = '10Mi', join_algorithm = 'parallel_hash';
+ok
+SELECT DISTINCT if (blockSize() as bs < 1000, 'ok', toString(bs))
+FROM
+(
+    SELECT v
+    FROM
+    (
+        SELECT
+            number AS n,
+            rightPad(toString(number), 1024, '_') AS v,
+            bitAnd(number, 7) AS k
+        FROM numbers(65536)
+    ) AS l
+    INNER JOIN
+    (
+        SELECT bitAnd(number, 7) AS k
+        FROM numbers(8 * 32)
+    ) AS r ON l.k = r.k
+)
+SETTINGS max_joined_block_size_bytes = '1Mi', join_algorithm='parallel_hash';
+ok
+SELECT DISTINCT if (blockSize() as bs < 1000, 'ok', toString(bs))
+FROM
+(
+    SELECT v
+    FROM
+    (
+        SELECT
+            number AS n,
+            bitAnd(number, 7) AS k
+        FROM numbers(65536)
+    ) AS l
+    INNER JOIN
+    (
+        SELECT
+            bitAnd(number, 7) AS k,
+            rightPad(toString(number), 1024, '_') AS v
+        FROM numbers(8 * 32)
+    ) AS r ON l.k = r.k
+)
+SETTINGS max_joined_block_size_bytes = '1Mi', join_algorithm='parallel_hash';
+ok
+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))
+FROM
+(
+    SELECT blockSize() AS bs
+    FROM
+    (
+        SELECT v
+        FROM
+        (
+            SELECT
+                number AS n,
+                rightPad(toString(number), 1024, '_') AS v,
+                bitAnd(number, 7) AS k
+            FROM numbers(65536)
+        ) AS l
+        INNER JOIN
+        (
+            SELECT bitAnd(number, 7) AS k
+            FROM numbers(8 * 32)
+        ) AS r ON l.k = r.k
+    )
+)
+SETTINGS max_joined_block_size_bytes = '1Gi', join_algorithm = 'parallel_hash';
+ok
+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))
+FROM
+(
+    SELECT blockSize() AS bs
+    FROM
+    (
+        SELECT v
+        FROM
+        (
+            SELECT
+                number AS n,
+                bitAnd(number, 7) AS k
+            FROM numbers(65536)
+        ) AS l
+        INNER JOIN
+        (
+            SELECT
+                bitAnd(number, 7) AS k,
+                rightPad(toString(number), 1024, '_') AS v
+            FROM numbers(8 * 32)
+        ) AS r ON l.k = r.k
+    )
+)
+SETTINGS max_joined_block_size_bytes = '1Gi', join_algorithm = 'parallel_hash';
+ok
+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))
+FROM
+(
+    SELECT blockSize() AS bs
+    FROM
+    (
+        SELECT v1, v2
+        FROM
+        (
+            SELECT
+                number AS n,
+                rightPad(toString(number), 64, '_') AS v1,
+                bitAnd(number, 7) AS k
+            FROM numbers(65536)
+        ) AS l
+        LEFT JOIN
+        (
+            SELECT bitAnd(number, 7) AS k,
+            rightPad(toString(number), 64, '_') AS v2
+            FROM numbers(8 * 32)
+        ) AS r ON l.k = r.k
+    )
+)
+SETTINGS max_joined_block_size_bytes = '10Mi', join_algorithm = 'hash';
+ok
+SELECT DISTINCT if (blockSize() as bs < 1000, 'ok', toString(bs))
+FROM
+(
+    SELECT v
+    FROM
+    (
+        SELECT
+            number AS n,
+            rightPad(toString(number), 1024, '_') AS v,
+            bitAnd(number, 7) AS k
+        FROM numbers(65536)
+    ) AS l
+    LEFT JOIN
+    (
+        SELECT bitAnd(number, 7) AS k
+        FROM numbers(8 * 32)
+    ) AS r ON l.k = r.k
+)
+SETTINGS max_joined_block_size_bytes = '1Mi', join_algorithm='hash';
+ok
+SELECT DISTINCT if (blockSize() as bs < 1000, 'ok', toString(bs))
+FROM
+(
+    SELECT v
+    FROM
+    (
+        SELECT
+            number AS n,
+            bitAnd(number, 7) AS k
+        FROM numbers(65536)
+    ) AS l
+    LEFT JOIN
+    (
+        SELECT
+            bitAnd(number, 7) AS k,
+            rightPad(toString(number), 1024, '_') AS v
+        FROM numbers(8 * 32)
+    ) AS r ON l.k = r.k
+)
+SETTINGS max_joined_block_size_bytes = '1Mi', join_algorithm='hash';
+ok
+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))
+FROM
+(
+    SELECT blockSize() AS bs
+    FROM
+    (
+        SELECT v
+        FROM
+        (
+            SELECT
+                number AS n,
+                rightPad(toString(number), 1024, '_') AS v,
+                bitAnd(number, 7) AS k
+            FROM numbers(65536)
+        ) AS l
+        LEFT JOIN
+        (
+            SELECT bitAnd(number, 7) AS k
+            FROM numbers(8 * 32)
+        ) AS r ON l.k = r.k
+    )
+)
+SETTINGS max_joined_block_size_bytes = '1Gi', join_algorithm = 'hash';
+ok
+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))
+FROM
+(
+    SELECT blockSize() AS bs
+    FROM
+    (
+        SELECT v
+        FROM
+        (
+            SELECT
+                number AS n,
+                bitAnd(number, 7) AS k
+            FROM numbers(65536)
+        ) AS l
+        LEFT JOIN
+        (
+            SELECT
+                bitAnd(number, 7) AS k,
+                rightPad(toString(number), 1024, '_') AS v
+            FROM numbers(8 * 32)
+        ) AS r ON l.k = r.k
+    )
+)
+SETTINGS max_joined_block_size_bytes = '1Gi', join_algorithm = 'hash';
+ok
+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))
+FROM
+(
+    SELECT blockSize() AS bs
+    FROM
+    (
+        SELECT v1, v2
+        FROM
+        (
+            SELECT
+                number AS n,
+                rightPad(toString(number), 64, '_') AS v1,
+                bitAnd(number, 7) AS k
+            FROM numbers(65536)
+        ) AS l
+        LEFT JOIN
+        (
+            SELECT bitAnd(number, 7) AS k,
+            rightPad(toString(number), 64, '_') AS v2
+            FROM numbers(8 * 32)
+        ) AS r ON l.k = r.k
+    )
+)
+SETTINGS max_joined_block_size_bytes = '10Mi', join_algorithm = 'parallel_hash';
+ok
+SELECT DISTINCT if (blockSize() as bs < 1000, 'ok', toString(bs))
+FROM
+(
+    SELECT v
+    FROM
+    (
+        SELECT
+            number AS n,
+            rightPad(toString(number), 1024, '_') AS v,
+            bitAnd(number, 7) AS k
+        FROM numbers(65536)
+    ) AS l
+    LEFT JOIN
+    (
+        SELECT bitAnd(number, 7) AS k
+        FROM numbers(8 * 32)
+    ) AS r ON l.k = r.k
+)
+SETTINGS max_joined_block_size_bytes = '1Mi', join_algorithm='parallel_hash';
+ok
+SELECT DISTINCT if (blockSize() as bs < 1000, 'ok', toString(bs))
+FROM
+(
+    SELECT v
+    FROM
+    (
+        SELECT
+            number AS n,
+            bitAnd(number, 7) AS k
+        FROM numbers(65536)
+    ) AS l
+    LEFT JOIN
+    (
+        SELECT
+            bitAnd(number, 7) AS k,
+            rightPad(toString(number), 1024, '_') AS v
+        FROM numbers(8 * 32)
+    ) AS r ON l.k = r.k
+)
+SETTINGS max_joined_block_size_bytes = '1Mi', join_algorithm='parallel_hash';
+ok
+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))
+FROM
+(
+    SELECT blockSize() AS bs
+    FROM
+    (
+        SELECT v
+        FROM
+        (
+            SELECT
+                number AS n,
+                rightPad(toString(number), 1024, '_') AS v,
+                bitAnd(number, 7) AS k
+            FROM numbers(65536)
+        ) AS l
+        LEFT JOIN
+        (
+            SELECT bitAnd(number, 7) AS k
+            FROM numbers(8 * 32)
+        ) AS r ON l.k = r.k
+    )
+)
+SETTINGS max_joined_block_size_bytes = '1Gi', join_algorithm = 'parallel_hash';
+ok
+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))
+FROM
+(
+    SELECT blockSize() AS bs
+    FROM
+    (
+        SELECT v
+        FROM
+        (
+            SELECT
+                number AS n,
+                bitAnd(number, 7) AS k
+            FROM numbers(65536)
+        ) AS l
+        LEFT JOIN
+        (
+            SELECT
+                bitAnd(number, 7) AS k,
+                rightPad(toString(number), 1024, '_') AS v
+            FROM numbers(8 * 32)
+        ) AS r ON l.k = r.k
+    )
+)
+SETTINGS max_joined_block_size_bytes = '1Gi', join_algorithm = 'parallel_hash';
+ok
+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))
+FROM
+(
+    SELECT blockSize() AS bs
+    FROM
+    (
+        SELECT v1, v2
+        FROM
+        (
+            SELECT
+                number AS n,
+                rightPad(toString(number), 64, '_') AS v1,
+                bitAnd(number, 7) AS k
+            FROM numbers(65536)
+        ) AS l
+        RIGHT JOIN
+        (
+            SELECT bitAnd(number, 7) AS k,
+            rightPad(toString(number), 64, '_') AS v2
+            FROM numbers(8 * 32)
+        ) AS r ON l.k = r.k
+    )
+)
+SETTINGS max_joined_block_size_bytes = '10Mi', join_algorithm = 'hash';
+ok
+SELECT DISTINCT if (blockSize() as bs < 1000, 'ok', toString(bs))
+FROM
+(
+    SELECT v
+    FROM
+    (
+        SELECT
+            number AS n,
+            rightPad(toString(number), 1024, '_') AS v,
+            bitAnd(number, 7) AS k
+        FROM numbers(65536)
+    ) AS l
+    RIGHT JOIN
+    (
+        SELECT bitAnd(number, 7) AS k
+        FROM numbers(8 * 32)
+    ) AS r ON l.k = r.k
+)
+SETTINGS max_joined_block_size_bytes = '1Mi', join_algorithm='hash';
+ok
+SELECT DISTINCT if (blockSize() as bs < 1000, 'ok', toString(bs))
+FROM
+(
+    SELECT v
+    FROM
+    (
+        SELECT
+            number AS n,
+            bitAnd(number, 7) AS k
+        FROM numbers(65536)
+    ) AS l
+    RIGHT JOIN
+    (
+        SELECT
+            bitAnd(number, 7) AS k,
+            rightPad(toString(number), 1024, '_') AS v
+        FROM numbers(8 * 32)
+    ) AS r ON l.k = r.k
+)
+SETTINGS max_joined_block_size_bytes = '1Mi', join_algorithm='hash';
+ok
+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))
+FROM
+(
+    SELECT blockSize() AS bs
+    FROM
+    (
+        SELECT v
+        FROM
+        (
+            SELECT
+                number AS n,
+                rightPad(toString(number), 1024, '_') AS v,
+                bitAnd(number, 7) AS k
+            FROM numbers(65536)
+        ) AS l
+        RIGHT JOIN
+        (
+            SELECT bitAnd(number, 7) AS k
+            FROM numbers(8 * 32)
+        ) AS r ON l.k = r.k
+    )
+)
+SETTINGS max_joined_block_size_bytes = '1Gi', join_algorithm = 'hash';
+ok
+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))
+FROM
+(
+    SELECT blockSize() AS bs
+    FROM
+    (
+        SELECT v
+        FROM
+        (
+            SELECT
+                number AS n,
+                bitAnd(number, 7) AS k
+            FROM numbers(65536)
+        ) AS l
+        RIGHT JOIN
+        (
+            SELECT
+                bitAnd(number, 7) AS k,
+                rightPad(toString(number), 1024, '_') AS v
+            FROM numbers(8 * 32)
+        ) AS r ON l.k = r.k
+    )
+)
+SETTINGS max_joined_block_size_bytes = '1Gi', join_algorithm = 'hash';
+ok
+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))
+FROM
+(
+    SELECT blockSize() AS bs
+    FROM
+    (
+        SELECT v1, v2
+        FROM
+        (
+            SELECT
+                number AS n,
+                rightPad(toString(number), 64, '_') AS v1,
+                bitAnd(number, 7) AS k
+            FROM numbers(65536)
+        ) AS l
+        RIGHT JOIN
+        (
+            SELECT bitAnd(number, 7) AS k,
+            rightPad(toString(number), 64, '_') AS v2
+            FROM numbers(8 * 32)
+        ) AS r ON l.k = r.k
+    )
+)
+SETTINGS max_joined_block_size_bytes = '10Mi', join_algorithm = 'parallel_hash';
+ok
+SELECT DISTINCT if (blockSize() as bs < 1000, 'ok', toString(bs))
+FROM
+(
+    SELECT v
+    FROM
+    (
+        SELECT
+            number AS n,
+            rightPad(toString(number), 1024, '_') AS v,
+            bitAnd(number, 7) AS k
+        FROM numbers(65536)
+    ) AS l
+    RIGHT JOIN
+    (
+        SELECT bitAnd(number, 7) AS k
+        FROM numbers(8 * 32)
+    ) AS r ON l.k = r.k
+)
+SETTINGS max_joined_block_size_bytes = '1Mi', join_algorithm='parallel_hash';
+ok
+SELECT DISTINCT if (blockSize() as bs < 1000, 'ok', toString(bs))
+FROM
+(
+    SELECT v
+    FROM
+    (
+        SELECT
+            number AS n,
+            bitAnd(number, 7) AS k
+        FROM numbers(65536)
+    ) AS l
+    RIGHT JOIN
+    (
+        SELECT
+            bitAnd(number, 7) AS k,
+            rightPad(toString(number), 1024, '_') AS v
+        FROM numbers(8 * 32)
+    ) AS r ON l.k = r.k
+)
+SETTINGS max_joined_block_size_bytes = '1Mi', join_algorithm='parallel_hash';
+ok
+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))
+FROM
+(
+    SELECT blockSize() AS bs
+    FROM
+    (
+        SELECT v
+        FROM
+        (
+            SELECT
+                number AS n,
+                rightPad(toString(number), 1024, '_') AS v,
+                bitAnd(number, 7) AS k
+            FROM numbers(65536)
+        ) AS l
+        RIGHT JOIN
+        (
+            SELECT bitAnd(number, 7) AS k
+            FROM numbers(8 * 32)
+        ) AS r ON l.k = r.k
+    )
+)
+SETTINGS max_joined_block_size_bytes = '1Gi', join_algorithm = 'parallel_hash';
+ok
+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))
+FROM
+(
+    SELECT blockSize() AS bs
+    FROM
+    (
+        SELECT v
+        FROM
+        (
+            SELECT
+                number AS n,
+                bitAnd(number, 7) AS k
+            FROM numbers(65536)
+        ) AS l
+        RIGHT JOIN
+        (
+            SELECT
+                bitAnd(number, 7) AS k,
+                rightPad(toString(number), 1024, '_') AS v
+            FROM numbers(8 * 32)
+        ) AS r ON l.k = r.k
+    )
+)
+SETTINGS max_joined_block_size_bytes = '1Gi', join_algorithm = 'parallel_hash';
+ok
+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))
+FROM
+(
+    SELECT blockSize() AS bs
+    FROM
+    (
+        SELECT v1, v2
+        FROM
+        (
+            SELECT
+                number AS n,
+                rightPad(toString(number), 64, '_') AS v1,
+                bitAnd(number, 7) AS k
+            FROM numbers(65536)
+        ) AS l
+        FULL OUTER JOIN
+        (
+            SELECT bitAnd(number, 7) AS k,
+            rightPad(toString(number), 64, '_') AS v2
+            FROM numbers(8 * 32)
+        ) AS r ON l.k = r.k
+    )
+)
+SETTINGS max_joined_block_size_bytes = '10Mi', join_algorithm = 'hash';
+ok
+SELECT DISTINCT if (blockSize() as bs < 1000, 'ok', toString(bs))
+FROM
+(
+    SELECT v
+    FROM
+    (
+        SELECT
+            number AS n,
+            rightPad(toString(number), 1024, '_') AS v,
+            bitAnd(number, 7) AS k
+        FROM numbers(65536)
+    ) AS l
+    FULL OUTER JOIN
+    (
+        SELECT bitAnd(number, 7) AS k
+        FROM numbers(8 * 32)
+    ) AS r ON l.k = r.k
+)
+SETTINGS max_joined_block_size_bytes = '1Mi', join_algorithm='hash';
+ok
+SELECT DISTINCT if (blockSize() as bs < 1000, 'ok', toString(bs))
+FROM
+(
+    SELECT v
+    FROM
+    (
+        SELECT
+            number AS n,
+            bitAnd(number, 7) AS k
+        FROM numbers(65536)
+    ) AS l
+    FULL OUTER JOIN
+    (
+        SELECT
+            bitAnd(number, 7) AS k,
+            rightPad(toString(number), 1024, '_') AS v
+        FROM numbers(8 * 32)
+    ) AS r ON l.k = r.k
+)
+SETTINGS max_joined_block_size_bytes = '1Mi', join_algorithm='hash';
+ok
+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))
+FROM
+(
+    SELECT blockSize() AS bs
+    FROM
+    (
+        SELECT v
+        FROM
+        (
+            SELECT
+                number AS n,
+                rightPad(toString(number), 1024, '_') AS v,
+                bitAnd(number, 7) AS k
+            FROM numbers(65536)
+        ) AS l
+        FULL OUTER JOIN
+        (
+            SELECT bitAnd(number, 7) AS k
+            FROM numbers(8 * 32)
+        ) AS r ON l.k = r.k
+    )
+)
+SETTINGS max_joined_block_size_bytes = '1Gi', join_algorithm = 'hash';
+ok
+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))
+FROM
+(
+    SELECT blockSize() AS bs
+    FROM
+    (
+        SELECT v
+        FROM
+        (
+            SELECT
+                number AS n,
+                bitAnd(number, 7) AS k
+            FROM numbers(65536)
+        ) AS l
+        FULL OUTER JOIN
+        (
+            SELECT
+                bitAnd(number, 7) AS k,
+                rightPad(toString(number), 1024, '_') AS v
+            FROM numbers(8 * 32)
+        ) AS r ON l.k = r.k
+    )
+)
+SETTINGS max_joined_block_size_bytes = '1Gi', join_algorithm = 'hash';
+ok
+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))
+FROM
+(
+    SELECT blockSize() AS bs
+    FROM
+    (
+        SELECT v1, v2
+        FROM
+        (
+            SELECT
+                number AS n,
+                rightPad(toString(number), 64, '_') AS v1,
+                bitAnd(number, 7) AS k
+            FROM numbers(65536)
+        ) AS l
+        FULL OUTER JOIN
+        (
+            SELECT bitAnd(number, 7) AS k,
+            rightPad(toString(number), 64, '_') AS v2
+            FROM numbers(8 * 32)
+        ) AS r ON l.k = r.k
+    )
+)
+SETTINGS max_joined_block_size_bytes = '10Mi', join_algorithm = 'parallel_hash';
+ok
+SELECT DISTINCT if (blockSize() as bs < 1000, 'ok', toString(bs))
+FROM
+(
+    SELECT v
+    FROM
+    (
+        SELECT
+            number AS n,
+            rightPad(toString(number), 1024, '_') AS v,
+            bitAnd(number, 7) AS k
+        FROM numbers(65536)
+    ) AS l
+    FULL OUTER JOIN
+    (
+        SELECT bitAnd(number, 7) AS k
+        FROM numbers(8 * 32)
+    ) AS r ON l.k = r.k
+)
+SETTINGS max_joined_block_size_bytes = '1Mi', join_algorithm='parallel_hash';
+ok
+SELECT DISTINCT if (blockSize() as bs < 1000, 'ok', toString(bs))
+FROM
+(
+    SELECT v
+    FROM
+    (
+        SELECT
+            number AS n,
+            bitAnd(number, 7) AS k
+        FROM numbers(65536)
+    ) AS l
+    FULL OUTER JOIN
+    (
+        SELECT
+            bitAnd(number, 7) AS k,
+            rightPad(toString(number), 1024, '_') AS v
+        FROM numbers(8 * 32)
+    ) AS r ON l.k = r.k
+)
+SETTINGS max_joined_block_size_bytes = '1Mi', join_algorithm='parallel_hash';
+ok
+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))
+FROM
+(
+    SELECT blockSize() AS bs
+    FROM
+    (
+        SELECT v
+        FROM
+        (
+            SELECT
+                number AS n,
+                rightPad(toString(number), 1024, '_') AS v,
+                bitAnd(number, 7) AS k
+            FROM numbers(65536)
+        ) AS l
+        FULL OUTER JOIN
+        (
+            SELECT bitAnd(number, 7) AS k
+            FROM numbers(8 * 32)
+        ) AS r ON l.k = r.k
+    )
+)
+SETTINGS max_joined_block_size_bytes = '1Gi', join_algorithm = 'parallel_hash';
+ok
+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))
+FROM
+(
+    SELECT blockSize() AS bs
+    FROM
+    (
+        SELECT v
+        FROM
+        (
+            SELECT
+                number AS n,
+                bitAnd(number, 7) AS k
+            FROM numbers(65536)
+        ) AS l
+        FULL OUTER JOIN
+        (
+            SELECT
+                bitAnd(number, 7) AS k,
+                rightPad(toString(number), 1024, '_') AS v
+            FROM numbers(8 * 32)
+        ) AS r ON l.k = r.k
+    )
+)
+SETTINGS max_joined_block_size_bytes = '1Gi', join_algorithm = 'parallel_hash';
+ok
+SELECT if(max(bs) >= ((128 * 128) * 4), 'ok', toString(max(bs)))
+FROM
+(
+    SELECT blockSize() AS bs
+    FROM
+    (
+        SELECT
+            v1,
+            v2
+        FROM
+        (
+            SELECT rightPad(toString(number), 10, '_') AS v1
+            FROM numbers(128 * 4)
+        ) AS l
+        CROSS JOIN
+        (
+            SELECT rightPad(toString(number), 10, '_') AS v2
+            FROM numbers(128 * 4)
+        ) AS r
+    )
+)
+SETTINGS max_block_size = 128, max_joined_block_size_bytes = '10Mi';
+ok
+SELECT DISTINCT if((blockSize() AS bs) < 100000, 'ok', toString(bs))
+FROM
+(
+    SELECT blockSize() AS bs
+    FROM
+    (
+        SELECT
+            v1,
+            v2
+        FROM
+        (
+            SELECT rightPad(toString(number), 128, '_') AS v1
+            FROM numbers(128 * 4)
+        ) AS l
+        CROSS JOIN
+        (
+            SELECT rightPad(toString(number), 10, '_') AS v2
+            FROM numbers(128 * 4)
+        ) AS r
+    )
+)
+SETTINGS max_block_size = 128, max_joined_block_size_bytes = '10Mi';
+ok
+SELECT DISTINCT if((blockSize() AS bs) < 100000, 'ok', toString(bs))
+FROM
+(
+    SELECT blockSize() AS bs
+    FROM
+    (
+        SELECT
+            v1,
+            v2
+        FROM
+        (
+            SELECT rightPad(toString(number), 10, '_') AS v1
+            FROM numbers(128 * 4)
+        ) AS l
+        CROSS JOIN
+        (
+            SELECT rightPad(toString(number), 128, '_') AS v2
+            FROM numbers(128 * 4)
+        ) AS r
+    )
+)
+SETTINGS max_block_size = 128, max_joined_block_size_bytes = '10Mi';
+ok
diff --git a/tests/queries/0_stateless/03567_max_joined_block_size_bytes.sql.j2 b/tests/queries/0_stateless/03567_max_joined_block_size_bytes.sql.j2
new file mode 100644
index 000000000000..9c2136d3db49
--- /dev/null
+++ b/tests/queries/0_stateless/03567_max_joined_block_size_bytes.sql.j2
@@ -0,0 +1,200 @@
+-- Tags: long, no-tsan, no-asan, no-msan, no-ubsan
+SET max_block_size = 65536;
+SET min_joined_block_size_rows = 65536;
+SET min_joined_block_size_bytes = 512000;
+-- Setting a big number to avoid limiting by the number of rows
+SET max_joined_block_size_rows = 100000000;
+
+SET query_plan_join_swap_table = false;
+
+-- { echo ON }
+
+{% for join_kind in ['INNER', 'LEFT', 'RIGHT', 'FULL OUTER'] -%}
+{% for join_algorithm in ['hash', 'parallel_hash'] -%}
+
+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))
+FROM
+(
+    SELECT blockSize() AS bs
+    FROM
+    (
+        SELECT v1, v2
+        FROM
+        (
+            SELECT
+                number AS n,
+                rightPad(toString(number), 64, '_') AS v1,
+                bitAnd(number, 7) AS k
+            FROM numbers(65536)
+        ) AS l
+        {{ join_kind }} JOIN
+        (
+            SELECT bitAnd(number, 7) AS k,
+            rightPad(toString(number), 64, '_') AS v2
+            FROM numbers(8 * 32)
+        ) AS r ON l.k = r.k
+    )
+)
+SETTINGS max_joined_block_size_bytes = '10Mi', join_algorithm = '{{ join_algorithm }}';
+
+SELECT DISTINCT if (blockSize() as bs < 1000, 'ok', toString(bs))
+FROM
+(
+    SELECT v
+    FROM
+    (
+        SELECT
+            number AS n,
+            rightPad(toString(number), 1024, '_') AS v,
+            bitAnd(number, 7) AS k
+        FROM numbers(65536)
+    ) AS l
+    {{ join_kind }} JOIN
+    (
+        SELECT bitAnd(number, 7) AS k
+        FROM numbers(8 * 32)
+    ) AS r ON l.k = r.k
+)
+SETTINGS max_joined_block_size_bytes = '1Mi', join_algorithm='{{ join_algorithm }}';
+
+SELECT DISTINCT if (blockSize() as bs < 1000, 'ok', toString(bs))
+FROM
+(
+    SELECT v
+    FROM
+    (
+        SELECT
+            number AS n,
+            bitAnd(number, 7) AS k
+        FROM numbers(65536)
+    ) AS l
+    {{ join_kind }} JOIN
+    (
+        SELECT
+            bitAnd(number, 7) AS k,
+            rightPad(toString(number), 1024, '_') AS v
+        FROM numbers(8 * 32)
+    ) AS r ON l.k = r.k
+)
+SETTINGS max_joined_block_size_bytes = '1Mi', join_algorithm='{{ join_algorithm }}';
+
+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))
+FROM
+(
+    SELECT blockSize() AS bs
+    FROM
+    (
+        SELECT v
+        FROM
+        (
+            SELECT
+                number AS n,
+                rightPad(toString(number), 1024, '_') AS v,
+                bitAnd(number, 7) AS k
+            FROM numbers(65536)
+        ) AS l
+        {{ join_kind }} JOIN
+        (
+            SELECT bitAnd(number, 7) AS k
+            FROM numbers(8 * 32)
+        ) AS r ON l.k = r.k
+    )
+)
+SETTINGS max_joined_block_size_bytes = '1Gi', join_algorithm = '{{ join_algorithm }}';
+
+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))
+FROM
+(
+    SELECT blockSize() AS bs
+    FROM
+    (
+        SELECT v
+        FROM
+        (
+            SELECT
+                number AS n,
+                bitAnd(number, 7) AS k
+            FROM numbers(65536)
+        ) AS l
+        {{ join_kind }} JOIN
+        (
+            SELECT
+                bitAnd(number, 7) AS k,
+                rightPad(toString(number), 1024, '_') AS v
+            FROM numbers(8 * 32)
+        ) AS r ON l.k = r.k
+    )
+)
+SETTINGS max_joined_block_size_bytes = '1Gi', join_algorithm = '{{ join_algorithm }}';
+
+{% endfor -%}
+{% endfor -%}
+
+SELECT if(max(bs) >= ((128 * 128) * 4), 'ok', toString(max(bs)))
+FROM
+(
+    SELECT blockSize() AS bs
+    FROM
+    (
+        SELECT
+            v1,
+            v2
+        FROM
+        (
+            SELECT rightPad(toString(number), 10, '_') AS v1
+            FROM numbers(128 * 4)
+        ) AS l
+        CROSS JOIN
+        (
+            SELECT rightPad(toString(number), 10, '_') AS v2
+            FROM numbers(128 * 4)
+        ) AS r
+    )
+)
+SETTINGS max_block_size = 128, max_joined_block_size_bytes = '10Mi';
+
+SELECT DISTINCT if((blockSize() AS bs) < 100000, 'ok', toString(bs))
+FROM
+(
+    SELECT blockSize() AS bs
+    FROM
+    (
+        SELECT
+            v1,
+            v2
+        FROM
+        (
+            SELECT rightPad(toString(number), 128, '_') AS v1
+            FROM numbers(128 * 4)
+        ) AS l
+        CROSS JOIN
+        (
+            SELECT rightPad(toString(number), 10, '_') AS v2
+            FROM numbers(128 * 4)
+        ) AS r
+    )
+)
+SETTINGS max_block_size = 128, max_joined_block_size_bytes = '10Mi';
+
+SELECT DISTINCT if((blockSize() AS bs) < 100000, 'ok', toString(bs))
+FROM
+(
+    SELECT blockSize() AS bs
+    FROM
+    (
+        SELECT
+            v1,
+            v2
+        FROM
+        (
+            SELECT rightPad(toString(number), 10, '_') AS v1
+            FROM numbers(128 * 4)
+        ) AS l
+        CROSS JOIN
+        (
+            SELECT rightPad(toString(number), 128, '_') AS v2
+            FROM numbers(128 * 4)
+        ) AS r
+    )
+)
+SETTINGS max_block_size = 128, max_joined_block_size_bytes = '10Mi';
diff --git a/tests/queries/0_stateless/03569_max_joined_block_size_rows_bug.reference b/tests/queries/0_stateless/03569_max_joined_block_size_rows_bug.reference
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/queries/0_stateless/03569_max_joined_block_size_rows_bug.sql b/tests/queries/0_stateless/03569_max_joined_block_size_rows_bug.sql
new file mode 100644
index 000000000000..40e2abd841a3
--- /dev/null
+++ b/tests/queries/0_stateless/03569_max_joined_block_size_rows_bug.sql
@@ -0,0 +1,2 @@
+set enable_analyzer=1;
+select * from system.one, system.one settings max_joined_block_size_rows=0 format Null;
