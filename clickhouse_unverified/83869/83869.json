{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 83869,
  "instance_id": "ClickHouse__ClickHouse-83869",
  "issue_numbers": [
    "83979"
  ],
  "base_commit": "aae6ebb4fc0748bccbade0e69b6cb919a0735ab6",
  "patch": "diff --git a/src/Core/Settings.cpp b/src/Core/Settings.cpp\nindex e1bee79e5bd6..5f5a326ff94e 100644\n--- a/src/Core/Settings.cpp\n+++ b/src/Core/Settings.cpp\n@@ -169,11 +169,14 @@ Squash blocks passed to the external table to a specified size in bytes, if bloc\n )\", 0) \\\n     DECLARE(UInt64, max_joined_block_size_rows, DEFAULT_BLOCK_SIZE, R\"(\n Maximum block size for JOIN result (if join algorithm supports it). 0 means unlimited.\n+)\", 0) \\\n+    DECLARE(UInt64, max_joined_block_size_bytes, 4 * 1024 * 1024, R\"(\n+Maximum block size in bytes for JOIN result (if join algorithm supports it). 0 means unlimited.\n )\", 0) \\\n     DECLARE(UInt64, min_joined_block_size_rows, DEFAULT_BLOCK_SIZE, R\"(\n Minimum block size in rows for JOIN input and output blocks (if join algorithm supports it). Small blocks will be squashed. 0 means unlimited.\n )\", 0) \\\n-    DECLARE(UInt64, min_joined_block_size_bytes, 524288, R\"(\n+    DECLARE(UInt64, min_joined_block_size_bytes, 512 * 1024, R\"(\n Minimum block size in bytes for JOIN input and output blocks (if join algorithm supports it). Small blocks will be squashed. 0 means unlimited.\n )\", 0) \\\n     DECLARE(UInt64, max_insert_threads, 0, R\"(\ndiff --git a/src/Core/SettingsChangesHistory.cpp b/src/Core/SettingsChangesHistory.cpp\nindex c7c48f2506b4..a431c8087957 100644\n--- a/src/Core/SettingsChangesHistory.cpp\n+++ b/src/Core/SettingsChangesHistory.cpp\n@@ -41,6 +41,7 @@ const VersionToSettingsChangesMap & getSettingsChangesHistory()\n         /// Note: please check if the key already exists to prevent duplicate entries.\n         addSettingsChanges(settings_changes_history, \"25.8\",\n         {\n+            {\"max_joined_block_size_bytes\", 0, 4 * 1024 * 1024, \"New setting\"},\n             {\"azure_max_single_part_upload_size\", 100 * 1024 * 1024, 32 * 1024 * 1024, \"Align with S3\"},\n             {\"azure_max_redirects\", 10, 10, \"New setting\"},\n             {\"azure_max_get_rps\", 0, 0, \"New setting\"},\ndiff --git a/src/Interpreters/ConcurrentHashJoin.cpp b/src/Interpreters/ConcurrentHashJoin.cpp\nindex 9987f643e783..332e1aa4d23d 100644\n--- a/src/Interpreters/ConcurrentHashJoin.cpp\n+++ b/src/Interpreters/ConcurrentHashJoin.cpp\n@@ -189,6 +189,7 @@ ConcurrentHashJoin::ConcurrentHashJoin(\n                         fmt::format(\"concurrent{}\", i),\n                         /*use_two_level_maps*/ true);\n                     inner_hash_join->data->setMaxJoinedBlockRows(table_join->maxJoinedBlockRows());\n+                    inner_hash_join->data->setMaxJoinedBlockBytes(table_join->maxJoinedBlockBytes());\n                     hash_joins[i] = std::move(inner_hash_join);\n                 });\n         }\ndiff --git a/src/Interpreters/HashJoin/HashJoin.cpp b/src/Interpreters/HashJoin/HashJoin.cpp\nindex 138b07fc7ad2..f444f92ea4d5 100644\n--- a/src/Interpreters/HashJoin/HashJoin.cpp\n+++ b/src/Interpreters/HashJoin/HashJoin.cpp\n@@ -139,6 +139,7 @@ HashJoin::HashJoin(\n     , tmp_data(table_join_->getTempDataOnDisk())\n     , right_sample_block(*right_sample_block_)\n     , max_joined_block_rows(table_join->maxJoinedBlockRows())\n+    , max_joined_block_bytes(table_join->maxJoinedBlockBytes())\n     , instance_log_id(!instance_id_.empty() ? \"(\" + instance_id_ + \") \" : \"\")\n     , log(getLogger(\"HashJoin\"))\n {\n@@ -916,15 +917,29 @@ IJoinResult::JoinResultBlock CrossJoinResult::next()\n         for (const ColumnWithTypeAndName & right_column : join.sample_block_with_columns_to_add)\n             dst_columns.emplace_back(right_column.column->cloneEmpty());\n \n+        size_t to_reserve = 0;\n+        if (common::mulOverflow(block.rows(), join.data->rows_to_join, to_reserve))\n+            to_reserve = join.max_joined_block_rows;\n+\n+        to_reserve = std::min(join.max_joined_block_rows, to_reserve);\n+\n         for (auto & dst : dst_columns)\n-            dst->reserve(join.max_joined_block_rows);\n+            dst->reserve(to_reserve);\n     }\n \n     size_t rows_total = block.rows();\n     size_t rows_added = 0;\n+    size_t bytes_added = 0;\n+\n+    auto enough_data = [&]()\n+    {\n+        return (join.max_joined_block_rows && rows_added > join.max_joined_block_rows)\n+            || (join.max_joined_block_bytes && bytes_added > join.max_joined_block_bytes);\n+    };\n+\n     for (; left_row < rows_total; ++left_row)\n     {\n-        if (rows_added >= join.max_joined_block_rows)\n+        if (enough_data())\n             break;\n \n         auto process_right_block = [&](const Columns & columns)\n@@ -940,6 +955,14 @@ IJoinResult::JoinResultBlock CrossJoinResult::next()\n                 const IColumn & column_right = *columns[col_num];\n                 dst_columns[num_existing_columns + col_num]->insertRangeFrom(column_right, 0, rows_right);\n             }\n+\n+            if (join.max_joined_block_bytes)\n+            {\n+                bytes_added = 0;\n+                /// Using byteSize here instead of allocatedBytes because memory was already reserved.\n+                for (const auto & dst : dst_columns)\n+                    bytes_added += dst->byteSize();\n+            }\n         };\n \n         if (!right_block_it.has_value())\n@@ -947,7 +970,7 @@ IJoinResult::JoinResultBlock CrossJoinResult::next()\n \n         for (; *right_block_it != join.data->columns.end(); ++*right_block_it)\n         {\n-            if (rows_added >= join.max_joined_block_rows)\n+            if (enough_data())\n                 break;\n \n             const auto & scattered_columns = **right_block_it;\n@@ -978,7 +1001,7 @@ IJoinResult::JoinResultBlock CrossJoinResult::next()\n \n             while (reader)\n             {\n-                if (rows_added >= join.max_joined_block_rows)\n+                if (enough_data())\n                     break;\n \n                 auto block_right = reader.value()->read();\ndiff --git a/src/Interpreters/HashJoin/HashJoin.h b/src/Interpreters/HashJoin/HashJoin.h\nindex 0d13e60e43db..5752f83db229 100644\n--- a/src/Interpreters/HashJoin/HashJoin.h\n+++ b/src/Interpreters/HashJoin/HashJoin.h\n@@ -438,6 +438,7 @@ class HashJoin : public IJoin\n     void shrinkStoredBlocksToFit(size_t & total_bytes_in_join, bool force_optimize = false);\n \n     void setMaxJoinedBlockRows(size_t value) { max_joined_block_rows = value; }\n+    void setMaxJoinedBlockBytes(size_t value) { max_joined_block_bytes = value; }\n \n     void materializeColumnsFromLeftBlock(Block & block) const;\n     Block materializeColumnsFromRightBlock(Block block) const;\n@@ -506,6 +507,7 @@ class HashJoin : public IJoin\n \n     /// Maximum number of rows in result block. If it is 0, then no limits.\n     size_t max_joined_block_rows = 0;\n+    size_t max_joined_block_bytes = 0;\n \n     /// When tracked memory consumption is more than a threshold, we will shrink to fit stored blocks.\n     bool shrink_blocks = false;\ndiff --git a/src/Interpreters/HashJoin/HashJoinMethodsImpl.h b/src/Interpreters/HashJoin/HashJoinMethodsImpl.h\nindex 41eda2847580..6eff70b7dc48 100644\n--- a/src/Interpreters/HashJoin/HashJoinMethodsImpl.h\n+++ b/src/Interpreters/HashJoin/HashJoinMethodsImpl.h\n@@ -123,6 +123,8 @@ JoinResultPtr HashJoinMethods<KIND, STRICTNESS, MapsTemplate>::joinBlockImpl(\n             join.required_right_keys,\n             join.required_right_keys_sources,\n             join.max_joined_block_rows,\n+            join.max_joined_block_bytes,\n+            join.data->allocated_size / std::max<size_t>(1, join.data->rows_to_join),\n             join_features.need_filter,\n             is_join_get\n         });\ndiff --git a/src/Interpreters/HashJoin/HashJoinResult.cpp b/src/Interpreters/HashJoin/HashJoinResult.cpp\nindex 62e853d22e0b..8528ba672100 100644\n--- a/src/Interpreters/HashJoin/HashJoinResult.cpp\n+++ b/src/Interpreters/HashJoin/HashJoinResult.cpp\n@@ -188,18 +188,24 @@ static Block generateBlock(\n static size_t numLeftRowsForNextBlock(\n     size_t next_row,\n     const IColumn::Offsets & offsets,\n-    size_t max_joined_block_rows)\n+    size_t max_joined_block_rows,\n+    size_t max_joined_block_bytes,\n+    size_t avg_bytes_per_row)\n {\n     /// If rows are not replicated, do not split block.\n-    if (offsets.empty() || max_joined_block_rows == 0)\n+    if (offsets.empty() || (max_joined_block_rows == 0 && max_joined_block_bytes == 0))\n         return 0;\n \n     /// If offsets does not increase block size, do not split block.\n     if (offsets.back() <= offsets.size())\n         return 0;\n \n+    size_t max_rows = max_joined_block_rows;\n+    if (max_joined_block_bytes)\n+        max_rows = std::min<size_t>(max_rows, max_joined_block_bytes / std::max<size_t>(avg_bytes_per_row, 1));\n+\n     const size_t prev_offset = next_row ? offsets[next_row - 1] : 0;\n-    const size_t next_allowed_offset = prev_offset + max_joined_block_rows;\n+    const size_t next_allowed_offset = prev_offset + max_rows;\n \n     if (offsets.back() <= next_allowed_offset)\n         return offsets.size() - next_row;\n@@ -234,12 +240,18 @@ HashJoinResult::HashJoinResult(\n {\n }\n \n+static size_t getAvgBytesPerRow(const Block & block)\n+{\n+    return block.allocatedBytes() / std::max<size_t>(1, block.rows());\n+}\n+\n IJoinResult::JoinResultBlock HashJoinResult::next()\n {\n     if (!scattered_block)\n         return {};\n \n-    auto num_lhs_rows = numLeftRowsForNextBlock(next_row, offsets, properties.max_joined_block_rows);\n+    size_t avg_bytes_per_row = properties.avg_joined_bytes_per_row + getAvgBytesPerRow(scattered_block->getSourceBlock());\n+    auto num_lhs_rows = numLeftRowsForNextBlock(next_row, offsets, properties.max_joined_block_rows, properties.max_joined_block_bytes, avg_bytes_per_row);\n     if (num_lhs_rows == 0 || (next_row == 0 && num_lhs_rows >= scattered_block->rows()))\n     {\n         auto block = generateBlock(\ndiff --git a/src/Interpreters/HashJoin/HashJoinResult.h b/src/Interpreters/HashJoin/HashJoinResult.h\nindex 2ed6f4d8b59a..f4d0e169ae97 100644\n--- a/src/Interpreters/HashJoin/HashJoinResult.h\n+++ b/src/Interpreters/HashJoin/HashJoinResult.h\n@@ -16,6 +16,9 @@ class HashJoinResult : public IJoinResult\n         const std::vector<String> & required_right_keys_sources;\n \n         size_t max_joined_block_rows;\n+        size_t max_joined_block_bytes;\n+\n+        size_t avg_joined_bytes_per_row;\n \n         bool need_filter;\n         bool is_join_get;\ndiff --git a/src/Interpreters/JoinInfo.cpp b/src/Interpreters/JoinInfo.cpp\nindex 837e62c87107..72acca4b9520 100644\n--- a/src/Interpreters/JoinInfo.cpp\n+++ b/src/Interpreters/JoinInfo.cpp\n@@ -43,6 +43,7 @@ namespace Setting\n     extern const SettingsUInt64 parallel_hash_join_threshold;\n \n     extern const SettingsUInt64 max_joined_block_size_rows;\n+    extern const SettingsUInt64 max_joined_block_size_bytes;\n     extern const SettingsString temporary_files_codec;\n     extern const SettingsUInt64 join_output_by_rowlist_perkey_rows_threshold;\n     extern const SettingsUInt64 join_to_sort_minimum_perkey_rows;\n@@ -79,6 +80,7 @@ namespace QueryPlanSerializationSetting\n     extern const QueryPlanSerializationSettingsUInt64 parallel_hash_join_threshold;\n \n     extern const QueryPlanSerializationSettingsUInt64 max_joined_block_size_rows;\n+    extern const QueryPlanSerializationSettingsUInt64 max_joined_block_size_bytes;\n     extern const QueryPlanSerializationSettingsString temporary_files_codec;\n     extern const QueryPlanSerializationSettingsUInt64 join_output_by_rowlist_perkey_rows_threshold;\n     extern const QueryPlanSerializationSettingsUInt64 join_to_sort_minimum_perkey_rows;\n@@ -101,6 +103,7 @@ JoinSettings::JoinSettings(const Settings & query_settings)\n     default_max_bytes_in_join = query_settings[Setting::default_max_bytes_in_join];\n \n     max_joined_block_size_rows = query_settings[Setting::max_joined_block_size_rows];\n+    max_joined_block_size_bytes = query_settings[Setting::max_joined_block_size_bytes];\n     min_joined_block_size_rows = query_settings[Setting::min_joined_block_size_rows];\n     min_joined_block_size_bytes = query_settings[Setting::min_joined_block_size_bytes];\n \n@@ -158,6 +161,7 @@ JoinSettings::JoinSettings(const QueryPlanSerializationSettings & settings)\n     parallel_hash_join_threshold = settings[QueryPlanSerializationSetting::parallel_hash_join_threshold];\n \n     max_joined_block_size_rows = settings[QueryPlanSerializationSetting::max_joined_block_size_rows];\n+    max_joined_block_size_bytes = settings[QueryPlanSerializationSetting::max_joined_block_size_bytes];\n     temporary_files_codec = settings[QueryPlanSerializationSetting::temporary_files_codec];\n     join_output_by_rowlist_perkey_rows_threshold = settings[QueryPlanSerializationSetting::join_output_by_rowlist_perkey_rows_threshold];\n     join_to_sort_minimum_perkey_rows = settings[QueryPlanSerializationSetting::join_to_sort_minimum_perkey_rows];\n@@ -197,6 +201,7 @@ void JoinSettings::updatePlanSettings(QueryPlanSerializationSettings & settings)\n     settings[QueryPlanSerializationSetting::parallel_hash_join_threshold] = parallel_hash_join_threshold;\n \n     settings[QueryPlanSerializationSetting::max_joined_block_size_rows] = max_joined_block_size_rows;\n+    settings[QueryPlanSerializationSetting::max_joined_block_size_rows] = max_joined_block_size_bytes;\n     settings[QueryPlanSerializationSetting::temporary_files_codec] = temporary_files_codec;\n     settings[QueryPlanSerializationSetting::join_output_by_rowlist_perkey_rows_threshold] = join_output_by_rowlist_perkey_rows_threshold;\n     settings[QueryPlanSerializationSetting::join_to_sort_minimum_perkey_rows] = join_to_sort_minimum_perkey_rows;\ndiff --git a/src/Interpreters/JoinInfo.h b/src/Interpreters/JoinInfo.h\nindex 1bc0a7ffb72b..c3f9f5e26d9f 100644\n--- a/src/Interpreters/JoinInfo.h\n+++ b/src/Interpreters/JoinInfo.h\n@@ -222,6 +222,7 @@ struct JoinSettings\n     UInt64 default_max_bytes_in_join;\n \n     UInt64 max_joined_block_size_rows;\n+    UInt64 max_joined_block_size_bytes;\n     UInt64 min_joined_block_size_rows;\n     UInt64 min_joined_block_size_bytes;\n \ndiff --git a/src/Interpreters/TableJoin.cpp b/src/Interpreters/TableJoin.cpp\nindex 0844d10c9802..e6ec44ffe6f0 100644\n--- a/src/Interpreters/TableJoin.cpp\n+++ b/src/Interpreters/TableJoin.cpp\n@@ -55,6 +55,7 @@ namespace Setting\n     extern const SettingsBool join_use_nulls;\n     extern const SettingsUInt64 max_bytes_in_join;\n     extern const SettingsUInt64 max_joined_block_size_rows;\n+    extern const SettingsUInt64 max_joined_block_size_bytes;\n     extern const SettingsUInt64 max_memory_usage;\n     extern const SettingsUInt64 max_rows_in_join;\n     extern const SettingsUInt64 partial_merge_join_left_table_buffer_bytes;\n@@ -142,6 +143,7 @@ TableJoin::TableJoin(const Settings & settings, VolumePtr tmp_volume_, Temporary\n     , cross_join_min_rows_to_compress(settings[Setting::cross_join_min_rows_to_compress])\n     , cross_join_min_bytes_to_compress(settings[Setting::cross_join_min_bytes_to_compress])\n     , max_joined_block_rows(settings[Setting::max_joined_block_size_rows])\n+    , max_joined_block_bytes(settings[Setting::max_joined_block_size_bytes])\n     , join_algorithms(settings[Setting::join_algorithm])\n     , partial_merge_join_rows_in_right_blocks(settings[Setting::partial_merge_join_rows_in_right_blocks])\n     , partial_merge_join_left_table_buffer_bytes(settings[Setting::partial_merge_join_left_table_buffer_bytes])\n@@ -165,6 +167,7 @@ TableJoin::TableJoin(const JoinSettings & settings, bool join_use_nulls_, Volume\n     , cross_join_min_rows_to_compress(settings.cross_join_min_rows_to_compress)\n     , cross_join_min_bytes_to_compress(settings.cross_join_min_bytes_to_compress)\n     , max_joined_block_rows(settings.max_joined_block_size_rows)\n+    , max_joined_block_bytes(settings.max_joined_block_size_bytes)\n     , join_algorithms(settings.join_algorithms)\n     , partial_merge_join_rows_in_right_blocks(settings.partial_merge_join_rows_in_right_blocks)\n     , partial_merge_join_left_table_buffer_bytes(settings.partial_merge_join_left_table_buffer_bytes)\ndiff --git a/src/Interpreters/TableJoin.h b/src/Interpreters/TableJoin.h\nindex d06666d1d8b4..d69e01bccd46 100644\n--- a/src/Interpreters/TableJoin.h\n+++ b/src/Interpreters/TableJoin.h\n@@ -151,6 +151,7 @@ class TableJoin\n     const UInt64 cross_join_min_rows_to_compress = 1000;\n     const UInt64 cross_join_min_bytes_to_compress = 10000;\n     const size_t max_joined_block_rows = 0;\n+    const size_t max_joined_block_bytes = 0;\n     std::vector<JoinAlgorithm> join_algorithms;\n     const size_t partial_merge_join_rows_in_right_blocks = 0;\n     const size_t partial_merge_join_left_table_buffer_bytes = 0;\n@@ -309,6 +310,7 @@ class TableJoin\n     bool allowJoinSorting() const { return allow_join_sorting; }\n     size_t defaultMaxBytes() const { return default_max_bytes; }\n     size_t maxJoinedBlockRows() const { return max_joined_block_rows; }\n+    size_t maxJoinedBlockBytes() const { return max_joined_block_bytes; }\n     size_t maxRowsInRightBlock() const { return partial_merge_join_rows_in_right_blocks; }\n     size_t maxBytesInLeftBuffer() const { return partial_merge_join_left_table_buffer_bytes; }\n     size_t maxFilesToMerge() const { return max_files_to_merge; }\ndiff --git a/src/Processors/QueryPlan/QueryPlanSerializationSettings.cpp b/src/Processors/QueryPlan/QueryPlanSerializationSettings.cpp\nindex b71355293d8e..6e9e7d0beb27 100644\n--- a/src/Processors/QueryPlan/QueryPlanSerializationSettings.cpp\n+++ b/src/Processors/QueryPlan/QueryPlanSerializationSettings.cpp\n@@ -54,6 +54,7 @@ namespace DB\n     DECLARE(UInt64, max_bytes_in_join, 0, \"Maximum size of the hash table for JOIN (in number of bytes in memory).\", 0) \\\n     DECLARE(UInt64, default_max_bytes_in_join, 1000000000, \"Maximum size of right-side table if limit is required but max_bytes_in_join is not set.\", 0) \\\n     DECLARE(UInt64, max_joined_block_size_rows, DEFAULT_BLOCK_SIZE, \"Maximum block size for JOIN result (if join algorithm supports it). 0 means unlimited.\", 0) \\\n+    DECLARE(UInt64, max_joined_block_size_bytes, 4 * 1024 * 1024, \"Maximum block size in bytes for JOIN result (if join algorithm supports it). 0 means unlimited.\", 0) \\\n     DECLARE(UInt64, min_joined_block_size_rows, DEFAULT_BLOCK_SIZE, \"Minimum block size in rows for JOIN input and output blocks (if join algorithm supports it). Small blocks will be squashed. 0 means unlimited.\", 0) \\\n     DECLARE(UInt64, min_joined_block_size_bytes, 524288, \"Minimum block size in bytes for JOIN input and output blocks (if join algorithm supports it). Small blocks will be squashed. 0 means unlimited.)\", 0) \\\n     \\\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03567_max_joined_block_size_bytes.reference b/tests/queries/0_stateless/03567_max_joined_block_size_bytes.reference\nnew file mode 100644\nindex 000000000000..26b99bf2a7c0\n--- /dev/null\n+++ b/tests/queries/0_stateless/03567_max_joined_block_size_bytes.reference\n@@ -0,0 +1,991 @@\n+-- { echo ON }\n+\n+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))\n+FROM\n+(\n+    SELECT blockSize() AS bs\n+    FROM\n+    (\n+        SELECT v1, v2\n+        FROM\n+        (\n+            SELECT\n+                number AS n,\n+                rightPad(toString(number), 64, '_') AS v1,\n+                bitAnd(number, 7) AS k\n+            FROM numbers(65536)\n+        ) AS l\n+        INNER JOIN\n+        (\n+            SELECT bitAnd(number, 7) AS k,\n+            rightPad(toString(number), 64, '_') AS v2\n+            FROM numbers(8 * 32)\n+        ) AS r ON l.k = r.k\n+    )\n+)\n+SETTINGS max_joined_block_size_bytes = '10Mi', join_algorithm = 'hash';\n+ok\n+SELECT DISTINCT if (blockSize() as bs < 1000, 'ok', toString(bs))\n+FROM\n+(\n+    SELECT v\n+    FROM\n+    (\n+        SELECT\n+            number AS n,\n+            rightPad(toString(number), 1024, '_') AS v,\n+            bitAnd(number, 7) AS k\n+        FROM numbers(65536)\n+    ) AS l\n+    INNER JOIN\n+    (\n+        SELECT bitAnd(number, 7) AS k\n+        FROM numbers(8 * 32)\n+    ) AS r ON l.k = r.k\n+)\n+SETTINGS max_joined_block_size_bytes = '1Mi', join_algorithm='hash';\n+ok\n+SELECT DISTINCT if (blockSize() as bs < 1000, 'ok', toString(bs))\n+FROM\n+(\n+    SELECT v\n+    FROM\n+    (\n+        SELECT\n+            number AS n,\n+            bitAnd(number, 7) AS k\n+        FROM numbers(65536)\n+    ) AS l\n+    INNER JOIN\n+    (\n+        SELECT\n+            bitAnd(number, 7) AS k,\n+            rightPad(toString(number), 1024, '_') AS v\n+        FROM numbers(8 * 32)\n+    ) AS r ON l.k = r.k\n+)\n+SETTINGS max_joined_block_size_bytes = '1Mi', join_algorithm='hash';\n+ok\n+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))\n+FROM\n+(\n+    SELECT blockSize() AS bs\n+    FROM\n+    (\n+        SELECT v\n+        FROM\n+        (\n+            SELECT\n+                number AS n,\n+                rightPad(toString(number), 1024, '_') AS v,\n+                bitAnd(number, 7) AS k\n+            FROM numbers(65536)\n+        ) AS l\n+        INNER JOIN\n+        (\n+            SELECT bitAnd(number, 7) AS k\n+            FROM numbers(8 * 32)\n+        ) AS r ON l.k = r.k\n+    )\n+)\n+SETTINGS max_joined_block_size_bytes = '1Gi', join_algorithm = 'hash';\n+ok\n+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))\n+FROM\n+(\n+    SELECT blockSize() AS bs\n+    FROM\n+    (\n+        SELECT v\n+        FROM\n+        (\n+            SELECT\n+                number AS n,\n+                bitAnd(number, 7) AS k\n+            FROM numbers(65536)\n+        ) AS l\n+        INNER JOIN\n+        (\n+            SELECT\n+                bitAnd(number, 7) AS k,\n+                rightPad(toString(number), 1024, '_') AS v\n+            FROM numbers(8 * 32)\n+        ) AS r ON l.k = r.k\n+    )\n+)\n+SETTINGS max_joined_block_size_bytes = '1Gi', join_algorithm = 'hash';\n+ok\n+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))\n+FROM\n+(\n+    SELECT blockSize() AS bs\n+    FROM\n+    (\n+        SELECT v1, v2\n+        FROM\n+        (\n+            SELECT\n+                number AS n,\n+                rightPad(toString(number), 64, '_') AS v1,\n+                bitAnd(number, 7) AS k\n+            FROM numbers(65536)\n+        ) AS l\n+        INNER JOIN\n+        (\n+            SELECT bitAnd(number, 7) AS k,\n+            rightPad(toString(number), 64, '_') AS v2\n+            FROM numbers(8 * 32)\n+        ) AS r ON l.k = r.k\n+    )\n+)\n+SETTINGS max_joined_block_size_bytes = '10Mi', join_algorithm = 'parallel_hash';\n+ok\n+SELECT DISTINCT if (blockSize() as bs < 1000, 'ok', toString(bs))\n+FROM\n+(\n+    SELECT v\n+    FROM\n+    (\n+        SELECT\n+            number AS n,\n+            rightPad(toString(number), 1024, '_') AS v,\n+            bitAnd(number, 7) AS k\n+        FROM numbers(65536)\n+    ) AS l\n+    INNER JOIN\n+    (\n+        SELECT bitAnd(number, 7) AS k\n+        FROM numbers(8 * 32)\n+    ) AS r ON l.k = r.k\n+)\n+SETTINGS max_joined_block_size_bytes = '1Mi', join_algorithm='parallel_hash';\n+ok\n+SELECT DISTINCT if (blockSize() as bs < 1000, 'ok', toString(bs))\n+FROM\n+(\n+    SELECT v\n+    FROM\n+    (\n+        SELECT\n+            number AS n,\n+            bitAnd(number, 7) AS k\n+        FROM numbers(65536)\n+    ) AS l\n+    INNER JOIN\n+    (\n+        SELECT\n+            bitAnd(number, 7) AS k,\n+            rightPad(toString(number), 1024, '_') AS v\n+        FROM numbers(8 * 32)\n+    ) AS r ON l.k = r.k\n+)\n+SETTINGS max_joined_block_size_bytes = '1Mi', join_algorithm='parallel_hash';\n+ok\n+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))\n+FROM\n+(\n+    SELECT blockSize() AS bs\n+    FROM\n+    (\n+        SELECT v\n+        FROM\n+        (\n+            SELECT\n+                number AS n,\n+                rightPad(toString(number), 1024, '_') AS v,\n+                bitAnd(number, 7) AS k\n+            FROM numbers(65536)\n+        ) AS l\n+        INNER JOIN\n+        (\n+            SELECT bitAnd(number, 7) AS k\n+            FROM numbers(8 * 32)\n+        ) AS r ON l.k = r.k\n+    )\n+)\n+SETTINGS max_joined_block_size_bytes = '1Gi', join_algorithm = 'parallel_hash';\n+ok\n+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))\n+FROM\n+(\n+    SELECT blockSize() AS bs\n+    FROM\n+    (\n+        SELECT v\n+        FROM\n+        (\n+            SELECT\n+                number AS n,\n+                bitAnd(number, 7) AS k\n+            FROM numbers(65536)\n+        ) AS l\n+        INNER JOIN\n+        (\n+            SELECT\n+                bitAnd(number, 7) AS k,\n+                rightPad(toString(number), 1024, '_') AS v\n+            FROM numbers(8 * 32)\n+        ) AS r ON l.k = r.k\n+    )\n+)\n+SETTINGS max_joined_block_size_bytes = '1Gi', join_algorithm = 'parallel_hash';\n+ok\n+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))\n+FROM\n+(\n+    SELECT blockSize() AS bs\n+    FROM\n+    (\n+        SELECT v1, v2\n+        FROM\n+        (\n+            SELECT\n+                number AS n,\n+                rightPad(toString(number), 64, '_') AS v1,\n+                bitAnd(number, 7) AS k\n+            FROM numbers(65536)\n+        ) AS l\n+        LEFT JOIN\n+        (\n+            SELECT bitAnd(number, 7) AS k,\n+            rightPad(toString(number), 64, '_') AS v2\n+            FROM numbers(8 * 32)\n+        ) AS r ON l.k = r.k\n+    )\n+)\n+SETTINGS max_joined_block_size_bytes = '10Mi', join_algorithm = 'hash';\n+ok\n+SELECT DISTINCT if (blockSize() as bs < 1000, 'ok', toString(bs))\n+FROM\n+(\n+    SELECT v\n+    FROM\n+    (\n+        SELECT\n+            number AS n,\n+            rightPad(toString(number), 1024, '_') AS v,\n+            bitAnd(number, 7) AS k\n+        FROM numbers(65536)\n+    ) AS l\n+    LEFT JOIN\n+    (\n+        SELECT bitAnd(number, 7) AS k\n+        FROM numbers(8 * 32)\n+    ) AS r ON l.k = r.k\n+)\n+SETTINGS max_joined_block_size_bytes = '1Mi', join_algorithm='hash';\n+ok\n+SELECT DISTINCT if (blockSize() as bs < 1000, 'ok', toString(bs))\n+FROM\n+(\n+    SELECT v\n+    FROM\n+    (\n+        SELECT\n+            number AS n,\n+            bitAnd(number, 7) AS k\n+        FROM numbers(65536)\n+    ) AS l\n+    LEFT JOIN\n+    (\n+        SELECT\n+            bitAnd(number, 7) AS k,\n+            rightPad(toString(number), 1024, '_') AS v\n+        FROM numbers(8 * 32)\n+    ) AS r ON l.k = r.k\n+)\n+SETTINGS max_joined_block_size_bytes = '1Mi', join_algorithm='hash';\n+ok\n+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))\n+FROM\n+(\n+    SELECT blockSize() AS bs\n+    FROM\n+    (\n+        SELECT v\n+        FROM\n+        (\n+            SELECT\n+                number AS n,\n+                rightPad(toString(number), 1024, '_') AS v,\n+                bitAnd(number, 7) AS k\n+            FROM numbers(65536)\n+        ) AS l\n+        LEFT JOIN\n+        (\n+            SELECT bitAnd(number, 7) AS k\n+            FROM numbers(8 * 32)\n+        ) AS r ON l.k = r.k\n+    )\n+)\n+SETTINGS max_joined_block_size_bytes = '1Gi', join_algorithm = 'hash';\n+ok\n+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))\n+FROM\n+(\n+    SELECT blockSize() AS bs\n+    FROM\n+    (\n+        SELECT v\n+        FROM\n+        (\n+            SELECT\n+                number AS n,\n+                bitAnd(number, 7) AS k\n+            FROM numbers(65536)\n+        ) AS l\n+        LEFT JOIN\n+        (\n+            SELECT\n+                bitAnd(number, 7) AS k,\n+                rightPad(toString(number), 1024, '_') AS v\n+            FROM numbers(8 * 32)\n+        ) AS r ON l.k = r.k\n+    )\n+)\n+SETTINGS max_joined_block_size_bytes = '1Gi', join_algorithm = 'hash';\n+ok\n+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))\n+FROM\n+(\n+    SELECT blockSize() AS bs\n+    FROM\n+    (\n+        SELECT v1, v2\n+        FROM\n+        (\n+            SELECT\n+                number AS n,\n+                rightPad(toString(number), 64, '_') AS v1,\n+                bitAnd(number, 7) AS k\n+            FROM numbers(65536)\n+        ) AS l\n+        LEFT JOIN\n+        (\n+            SELECT bitAnd(number, 7) AS k,\n+            rightPad(toString(number), 64, '_') AS v2\n+            FROM numbers(8 * 32)\n+        ) AS r ON l.k = r.k\n+    )\n+)\n+SETTINGS max_joined_block_size_bytes = '10Mi', join_algorithm = 'parallel_hash';\n+ok\n+SELECT DISTINCT if (blockSize() as bs < 1000, 'ok', toString(bs))\n+FROM\n+(\n+    SELECT v\n+    FROM\n+    (\n+        SELECT\n+            number AS n,\n+            rightPad(toString(number), 1024, '_') AS v,\n+            bitAnd(number, 7) AS k\n+        FROM numbers(65536)\n+    ) AS l\n+    LEFT JOIN\n+    (\n+        SELECT bitAnd(number, 7) AS k\n+        FROM numbers(8 * 32)\n+    ) AS r ON l.k = r.k\n+)\n+SETTINGS max_joined_block_size_bytes = '1Mi', join_algorithm='parallel_hash';\n+ok\n+SELECT DISTINCT if (blockSize() as bs < 1000, 'ok', toString(bs))\n+FROM\n+(\n+    SELECT v\n+    FROM\n+    (\n+        SELECT\n+            number AS n,\n+            bitAnd(number, 7) AS k\n+        FROM numbers(65536)\n+    ) AS l\n+    LEFT JOIN\n+    (\n+        SELECT\n+            bitAnd(number, 7) AS k,\n+            rightPad(toString(number), 1024, '_') AS v\n+        FROM numbers(8 * 32)\n+    ) AS r ON l.k = r.k\n+)\n+SETTINGS max_joined_block_size_bytes = '1Mi', join_algorithm='parallel_hash';\n+ok\n+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))\n+FROM\n+(\n+    SELECT blockSize() AS bs\n+    FROM\n+    (\n+        SELECT v\n+        FROM\n+        (\n+            SELECT\n+                number AS n,\n+                rightPad(toString(number), 1024, '_') AS v,\n+                bitAnd(number, 7) AS k\n+            FROM numbers(65536)\n+        ) AS l\n+        LEFT JOIN\n+        (\n+            SELECT bitAnd(number, 7) AS k\n+            FROM numbers(8 * 32)\n+        ) AS r ON l.k = r.k\n+    )\n+)\n+SETTINGS max_joined_block_size_bytes = '1Gi', join_algorithm = 'parallel_hash';\n+ok\n+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))\n+FROM\n+(\n+    SELECT blockSize() AS bs\n+    FROM\n+    (\n+        SELECT v\n+        FROM\n+        (\n+            SELECT\n+                number AS n,\n+                bitAnd(number, 7) AS k\n+            FROM numbers(65536)\n+        ) AS l\n+        LEFT JOIN\n+        (\n+            SELECT\n+                bitAnd(number, 7) AS k,\n+                rightPad(toString(number), 1024, '_') AS v\n+            FROM numbers(8 * 32)\n+        ) AS r ON l.k = r.k\n+    )\n+)\n+SETTINGS max_joined_block_size_bytes = '1Gi', join_algorithm = 'parallel_hash';\n+ok\n+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))\n+FROM\n+(\n+    SELECT blockSize() AS bs\n+    FROM\n+    (\n+        SELECT v1, v2\n+        FROM\n+        (\n+            SELECT\n+                number AS n,\n+                rightPad(toString(number), 64, '_') AS v1,\n+                bitAnd(number, 7) AS k\n+            FROM numbers(65536)\n+        ) AS l\n+        RIGHT JOIN\n+        (\n+            SELECT bitAnd(number, 7) AS k,\n+            rightPad(toString(number), 64, '_') AS v2\n+            FROM numbers(8 * 32)\n+        ) AS r ON l.k = r.k\n+    )\n+)\n+SETTINGS max_joined_block_size_bytes = '10Mi', join_algorithm = 'hash';\n+ok\n+SELECT DISTINCT if (blockSize() as bs < 1000, 'ok', toString(bs))\n+FROM\n+(\n+    SELECT v\n+    FROM\n+    (\n+        SELECT\n+            number AS n,\n+            rightPad(toString(number), 1024, '_') AS v,\n+            bitAnd(number, 7) AS k\n+        FROM numbers(65536)\n+    ) AS l\n+    RIGHT JOIN\n+    (\n+        SELECT bitAnd(number, 7) AS k\n+        FROM numbers(8 * 32)\n+    ) AS r ON l.k = r.k\n+)\n+SETTINGS max_joined_block_size_bytes = '1Mi', join_algorithm='hash';\n+ok\n+SELECT DISTINCT if (blockSize() as bs < 1000, 'ok', toString(bs))\n+FROM\n+(\n+    SELECT v\n+    FROM\n+    (\n+        SELECT\n+            number AS n,\n+            bitAnd(number, 7) AS k\n+        FROM numbers(65536)\n+    ) AS l\n+    RIGHT JOIN\n+    (\n+        SELECT\n+            bitAnd(number, 7) AS k,\n+            rightPad(toString(number), 1024, '_') AS v\n+        FROM numbers(8 * 32)\n+    ) AS r ON l.k = r.k\n+)\n+SETTINGS max_joined_block_size_bytes = '1Mi', join_algorithm='hash';\n+ok\n+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))\n+FROM\n+(\n+    SELECT blockSize() AS bs\n+    FROM\n+    (\n+        SELECT v\n+        FROM\n+        (\n+            SELECT\n+                number AS n,\n+                rightPad(toString(number), 1024, '_') AS v,\n+                bitAnd(number, 7) AS k\n+            FROM numbers(65536)\n+        ) AS l\n+        RIGHT JOIN\n+        (\n+            SELECT bitAnd(number, 7) AS k\n+            FROM numbers(8 * 32)\n+        ) AS r ON l.k = r.k\n+    )\n+)\n+SETTINGS max_joined_block_size_bytes = '1Gi', join_algorithm = 'hash';\n+ok\n+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))\n+FROM\n+(\n+    SELECT blockSize() AS bs\n+    FROM\n+    (\n+        SELECT v\n+        FROM\n+        (\n+            SELECT\n+                number AS n,\n+                bitAnd(number, 7) AS k\n+            FROM numbers(65536)\n+        ) AS l\n+        RIGHT JOIN\n+        (\n+            SELECT\n+                bitAnd(number, 7) AS k,\n+                rightPad(toString(number), 1024, '_') AS v\n+            FROM numbers(8 * 32)\n+        ) AS r ON l.k = r.k\n+    )\n+)\n+SETTINGS max_joined_block_size_bytes = '1Gi', join_algorithm = 'hash';\n+ok\n+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))\n+FROM\n+(\n+    SELECT blockSize() AS bs\n+    FROM\n+    (\n+        SELECT v1, v2\n+        FROM\n+        (\n+            SELECT\n+                number AS n,\n+                rightPad(toString(number), 64, '_') AS v1,\n+                bitAnd(number, 7) AS k\n+            FROM numbers(65536)\n+        ) AS l\n+        RIGHT JOIN\n+        (\n+            SELECT bitAnd(number, 7) AS k,\n+            rightPad(toString(number), 64, '_') AS v2\n+            FROM numbers(8 * 32)\n+        ) AS r ON l.k = r.k\n+    )\n+)\n+SETTINGS max_joined_block_size_bytes = '10Mi', join_algorithm = 'parallel_hash';\n+ok\n+SELECT DISTINCT if (blockSize() as bs < 1000, 'ok', toString(bs))\n+FROM\n+(\n+    SELECT v\n+    FROM\n+    (\n+        SELECT\n+            number AS n,\n+            rightPad(toString(number), 1024, '_') AS v,\n+            bitAnd(number, 7) AS k\n+        FROM numbers(65536)\n+    ) AS l\n+    RIGHT JOIN\n+    (\n+        SELECT bitAnd(number, 7) AS k\n+        FROM numbers(8 * 32)\n+    ) AS r ON l.k = r.k\n+)\n+SETTINGS max_joined_block_size_bytes = '1Mi', join_algorithm='parallel_hash';\n+ok\n+SELECT DISTINCT if (blockSize() as bs < 1000, 'ok', toString(bs))\n+FROM\n+(\n+    SELECT v\n+    FROM\n+    (\n+        SELECT\n+            number AS n,\n+            bitAnd(number, 7) AS k\n+        FROM numbers(65536)\n+    ) AS l\n+    RIGHT JOIN\n+    (\n+        SELECT\n+            bitAnd(number, 7) AS k,\n+            rightPad(toString(number), 1024, '_') AS v\n+        FROM numbers(8 * 32)\n+    ) AS r ON l.k = r.k\n+)\n+SETTINGS max_joined_block_size_bytes = '1Mi', join_algorithm='parallel_hash';\n+ok\n+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))\n+FROM\n+(\n+    SELECT blockSize() AS bs\n+    FROM\n+    (\n+        SELECT v\n+        FROM\n+        (\n+            SELECT\n+                number AS n,\n+                rightPad(toString(number), 1024, '_') AS v,\n+                bitAnd(number, 7) AS k\n+            FROM numbers(65536)\n+        ) AS l\n+        RIGHT JOIN\n+        (\n+            SELECT bitAnd(number, 7) AS k\n+            FROM numbers(8 * 32)\n+        ) AS r ON l.k = r.k\n+    )\n+)\n+SETTINGS max_joined_block_size_bytes = '1Gi', join_algorithm = 'parallel_hash';\n+ok\n+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))\n+FROM\n+(\n+    SELECT blockSize() AS bs\n+    FROM\n+    (\n+        SELECT v\n+        FROM\n+        (\n+            SELECT\n+                number AS n,\n+                bitAnd(number, 7) AS k\n+            FROM numbers(65536)\n+        ) AS l\n+        RIGHT JOIN\n+        (\n+            SELECT\n+                bitAnd(number, 7) AS k,\n+                rightPad(toString(number), 1024, '_') AS v\n+            FROM numbers(8 * 32)\n+        ) AS r ON l.k = r.k\n+    )\n+)\n+SETTINGS max_joined_block_size_bytes = '1Gi', join_algorithm = 'parallel_hash';\n+ok\n+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))\n+FROM\n+(\n+    SELECT blockSize() AS bs\n+    FROM\n+    (\n+        SELECT v1, v2\n+        FROM\n+        (\n+            SELECT\n+                number AS n,\n+                rightPad(toString(number), 64, '_') AS v1,\n+                bitAnd(number, 7) AS k\n+            FROM numbers(65536)\n+        ) AS l\n+        FULL OUTER JOIN\n+        (\n+            SELECT bitAnd(number, 7) AS k,\n+            rightPad(toString(number), 64, '_') AS v2\n+            FROM numbers(8 * 32)\n+        ) AS r ON l.k = r.k\n+    )\n+)\n+SETTINGS max_joined_block_size_bytes = '10Mi', join_algorithm = 'hash';\n+ok\n+SELECT DISTINCT if (blockSize() as bs < 1000, 'ok', toString(bs))\n+FROM\n+(\n+    SELECT v\n+    FROM\n+    (\n+        SELECT\n+            number AS n,\n+            rightPad(toString(number), 1024, '_') AS v,\n+            bitAnd(number, 7) AS k\n+        FROM numbers(65536)\n+    ) AS l\n+    FULL OUTER JOIN\n+    (\n+        SELECT bitAnd(number, 7) AS k\n+        FROM numbers(8 * 32)\n+    ) AS r ON l.k = r.k\n+)\n+SETTINGS max_joined_block_size_bytes = '1Mi', join_algorithm='hash';\n+ok\n+SELECT DISTINCT if (blockSize() as bs < 1000, 'ok', toString(bs))\n+FROM\n+(\n+    SELECT v\n+    FROM\n+    (\n+        SELECT\n+            number AS n,\n+            bitAnd(number, 7) AS k\n+        FROM numbers(65536)\n+    ) AS l\n+    FULL OUTER JOIN\n+    (\n+        SELECT\n+            bitAnd(number, 7) AS k,\n+            rightPad(toString(number), 1024, '_') AS v\n+        FROM numbers(8 * 32)\n+    ) AS r ON l.k = r.k\n+)\n+SETTINGS max_joined_block_size_bytes = '1Mi', join_algorithm='hash';\n+ok\n+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))\n+FROM\n+(\n+    SELECT blockSize() AS bs\n+    FROM\n+    (\n+        SELECT v\n+        FROM\n+        (\n+            SELECT\n+                number AS n,\n+                rightPad(toString(number), 1024, '_') AS v,\n+                bitAnd(number, 7) AS k\n+            FROM numbers(65536)\n+        ) AS l\n+        FULL OUTER JOIN\n+        (\n+            SELECT bitAnd(number, 7) AS k\n+            FROM numbers(8 * 32)\n+        ) AS r ON l.k = r.k\n+    )\n+)\n+SETTINGS max_joined_block_size_bytes = '1Gi', join_algorithm = 'hash';\n+ok\n+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))\n+FROM\n+(\n+    SELECT blockSize() AS bs\n+    FROM\n+    (\n+        SELECT v\n+        FROM\n+        (\n+            SELECT\n+                number AS n,\n+                bitAnd(number, 7) AS k\n+            FROM numbers(65536)\n+        ) AS l\n+        FULL OUTER JOIN\n+        (\n+            SELECT\n+                bitAnd(number, 7) AS k,\n+                rightPad(toString(number), 1024, '_') AS v\n+            FROM numbers(8 * 32)\n+        ) AS r ON l.k = r.k\n+    )\n+)\n+SETTINGS max_joined_block_size_bytes = '1Gi', join_algorithm = 'hash';\n+ok\n+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))\n+FROM\n+(\n+    SELECT blockSize() AS bs\n+    FROM\n+    (\n+        SELECT v1, v2\n+        FROM\n+        (\n+            SELECT\n+                number AS n,\n+                rightPad(toString(number), 64, '_') AS v1,\n+                bitAnd(number, 7) AS k\n+            FROM numbers(65536)\n+        ) AS l\n+        FULL OUTER JOIN\n+        (\n+            SELECT bitAnd(number, 7) AS k,\n+            rightPad(toString(number), 64, '_') AS v2\n+            FROM numbers(8 * 32)\n+        ) AS r ON l.k = r.k\n+    )\n+)\n+SETTINGS max_joined_block_size_bytes = '10Mi', join_algorithm = 'parallel_hash';\n+ok\n+SELECT DISTINCT if (blockSize() as bs < 1000, 'ok', toString(bs))\n+FROM\n+(\n+    SELECT v\n+    FROM\n+    (\n+        SELECT\n+            number AS n,\n+            rightPad(toString(number), 1024, '_') AS v,\n+            bitAnd(number, 7) AS k\n+        FROM numbers(65536)\n+    ) AS l\n+    FULL OUTER JOIN\n+    (\n+        SELECT bitAnd(number, 7) AS k\n+        FROM numbers(8 * 32)\n+    ) AS r ON l.k = r.k\n+)\n+SETTINGS max_joined_block_size_bytes = '1Mi', join_algorithm='parallel_hash';\n+ok\n+SELECT DISTINCT if (blockSize() as bs < 1000, 'ok', toString(bs))\n+FROM\n+(\n+    SELECT v\n+    FROM\n+    (\n+        SELECT\n+            number AS n,\n+            bitAnd(number, 7) AS k\n+        FROM numbers(65536)\n+    ) AS l\n+    FULL OUTER JOIN\n+    (\n+        SELECT\n+            bitAnd(number, 7) AS k,\n+            rightPad(toString(number), 1024, '_') AS v\n+        FROM numbers(8 * 32)\n+    ) AS r ON l.k = r.k\n+)\n+SETTINGS max_joined_block_size_bytes = '1Mi', join_algorithm='parallel_hash';\n+ok\n+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))\n+FROM\n+(\n+    SELECT blockSize() AS bs\n+    FROM\n+    (\n+        SELECT v\n+        FROM\n+        (\n+            SELECT\n+                number AS n,\n+                rightPad(toString(number), 1024, '_') AS v,\n+                bitAnd(number, 7) AS k\n+            FROM numbers(65536)\n+        ) AS l\n+        FULL OUTER JOIN\n+        (\n+            SELECT bitAnd(number, 7) AS k\n+            FROM numbers(8 * 32)\n+        ) AS r ON l.k = r.k\n+    )\n+)\n+SETTINGS max_joined_block_size_bytes = '1Gi', join_algorithm = 'parallel_hash';\n+ok\n+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))\n+FROM\n+(\n+    SELECT blockSize() AS bs\n+    FROM\n+    (\n+        SELECT v\n+        FROM\n+        (\n+            SELECT\n+                number AS n,\n+                bitAnd(number, 7) AS k\n+            FROM numbers(65536)\n+        ) AS l\n+        FULL OUTER JOIN\n+        (\n+            SELECT\n+                bitAnd(number, 7) AS k,\n+                rightPad(toString(number), 1024, '_') AS v\n+            FROM numbers(8 * 32)\n+        ) AS r ON l.k = r.k\n+    )\n+)\n+SETTINGS max_joined_block_size_bytes = '1Gi', join_algorithm = 'parallel_hash';\n+ok\n+SELECT if(max(bs) >= ((128 * 128) * 4), 'ok', toString(max(bs)))\n+FROM\n+(\n+    SELECT blockSize() AS bs\n+    FROM\n+    (\n+        SELECT\n+            v1,\n+            v2\n+        FROM\n+        (\n+            SELECT rightPad(toString(number), 10, '_') AS v1\n+            FROM numbers(128 * 4)\n+        ) AS l\n+        CROSS JOIN\n+        (\n+            SELECT rightPad(toString(number), 10, '_') AS v2\n+            FROM numbers(128 * 4)\n+        ) AS r\n+    )\n+)\n+SETTINGS max_block_size = 128, max_joined_block_size_bytes = '10Mi';\n+ok\n+SELECT DISTINCT if((blockSize() AS bs) < 100000, 'ok', toString(bs))\n+FROM\n+(\n+    SELECT blockSize() AS bs\n+    FROM\n+    (\n+        SELECT\n+            v1,\n+            v2\n+        FROM\n+        (\n+            SELECT rightPad(toString(number), 128, '_') AS v1\n+            FROM numbers(128 * 4)\n+        ) AS l\n+        CROSS JOIN\n+        (\n+            SELECT rightPad(toString(number), 10, '_') AS v2\n+            FROM numbers(128 * 4)\n+        ) AS r\n+    )\n+)\n+SETTINGS max_block_size = 128, max_joined_block_size_bytes = '10Mi';\n+ok\n+SELECT DISTINCT if((blockSize() AS bs) < 100000, 'ok', toString(bs))\n+FROM\n+(\n+    SELECT blockSize() AS bs\n+    FROM\n+    (\n+        SELECT\n+            v1,\n+            v2\n+        FROM\n+        (\n+            SELECT rightPad(toString(number), 10, '_') AS v1\n+            FROM numbers(128 * 4)\n+        ) AS l\n+        CROSS JOIN\n+        (\n+            SELECT rightPad(toString(number), 128, '_') AS v2\n+            FROM numbers(128 * 4)\n+        ) AS r\n+    )\n+)\n+SETTINGS max_block_size = 128, max_joined_block_size_bytes = '10Mi';\n+ok\ndiff --git a/tests/queries/0_stateless/03567_max_joined_block_size_bytes.sql.j2 b/tests/queries/0_stateless/03567_max_joined_block_size_bytes.sql.j2\nnew file mode 100644\nindex 000000000000..9c2136d3db49\n--- /dev/null\n+++ b/tests/queries/0_stateless/03567_max_joined_block_size_bytes.sql.j2\n@@ -0,0 +1,200 @@\n+-- Tags: long, no-tsan, no-asan, no-msan, no-ubsan\n+SET max_block_size = 65536;\n+SET min_joined_block_size_rows = 65536;\n+SET min_joined_block_size_bytes = 512000;\n+-- Setting a big number to avoid limiting by the number of rows\n+SET max_joined_block_size_rows = 100000000;\n+\n+SET query_plan_join_swap_table = false;\n+\n+-- { echo ON }\n+\n+{% for join_kind in ['INNER', 'LEFT', 'RIGHT', 'FULL OUTER'] -%}\n+{% for join_algorithm in ['hash', 'parallel_hash'] -%}\n+\n+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))\n+FROM\n+(\n+    SELECT blockSize() AS bs\n+    FROM\n+    (\n+        SELECT v1, v2\n+        FROM\n+        (\n+            SELECT\n+                number AS n,\n+                rightPad(toString(number), 64, '_') AS v1,\n+                bitAnd(number, 7) AS k\n+            FROM numbers(65536)\n+        ) AS l\n+        {{ join_kind }} JOIN\n+        (\n+            SELECT bitAnd(number, 7) AS k,\n+            rightPad(toString(number), 64, '_') AS v2\n+            FROM numbers(8 * 32)\n+        ) AS r ON l.k = r.k\n+    )\n+)\n+SETTINGS max_joined_block_size_bytes = '10Mi', join_algorithm = '{{ join_algorithm }}';\n+\n+SELECT DISTINCT if (blockSize() as bs < 1000, 'ok', toString(bs))\n+FROM\n+(\n+    SELECT v\n+    FROM\n+    (\n+        SELECT\n+            number AS n,\n+            rightPad(toString(number), 1024, '_') AS v,\n+            bitAnd(number, 7) AS k\n+        FROM numbers(65536)\n+    ) AS l\n+    {{ join_kind }} JOIN\n+    (\n+        SELECT bitAnd(number, 7) AS k\n+        FROM numbers(8 * 32)\n+    ) AS r ON l.k = r.k\n+)\n+SETTINGS max_joined_block_size_bytes = '1Mi', join_algorithm='{{ join_algorithm }}';\n+\n+SELECT DISTINCT if (blockSize() as bs < 1000, 'ok', toString(bs))\n+FROM\n+(\n+    SELECT v\n+    FROM\n+    (\n+        SELECT\n+            number AS n,\n+            bitAnd(number, 7) AS k\n+        FROM numbers(65536)\n+    ) AS l\n+    {{ join_kind }} JOIN\n+    (\n+        SELECT\n+            bitAnd(number, 7) AS k,\n+            rightPad(toString(number), 1024, '_') AS v\n+        FROM numbers(8 * 32)\n+    ) AS r ON l.k = r.k\n+)\n+SETTINGS max_joined_block_size_bytes = '1Mi', join_algorithm='{{ join_algorithm }}';\n+\n+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))\n+FROM\n+(\n+    SELECT blockSize() AS bs\n+    FROM\n+    (\n+        SELECT v\n+        FROM\n+        (\n+            SELECT\n+                number AS n,\n+                rightPad(toString(number), 1024, '_') AS v,\n+                bitAnd(number, 7) AS k\n+            FROM numbers(65536)\n+        ) AS l\n+        {{ join_kind }} JOIN\n+        (\n+            SELECT bitAnd(number, 7) AS k\n+            FROM numbers(8 * 32)\n+        ) AS r ON l.k = r.k\n+    )\n+)\n+SETTINGS max_joined_block_size_bytes = '1Gi', join_algorithm = '{{ join_algorithm }}';\n+\n+SELECT if(max(bs) > 65000, 'ok', toString(max(bs)))\n+FROM\n+(\n+    SELECT blockSize() AS bs\n+    FROM\n+    (\n+        SELECT v\n+        FROM\n+        (\n+            SELECT\n+                number AS n,\n+                bitAnd(number, 7) AS k\n+            FROM numbers(65536)\n+        ) AS l\n+        {{ join_kind }} JOIN\n+        (\n+            SELECT\n+                bitAnd(number, 7) AS k,\n+                rightPad(toString(number), 1024, '_') AS v\n+            FROM numbers(8 * 32)\n+        ) AS r ON l.k = r.k\n+    )\n+)\n+SETTINGS max_joined_block_size_bytes = '1Gi', join_algorithm = '{{ join_algorithm }}';\n+\n+{% endfor -%}\n+{% endfor -%}\n+\n+SELECT if(max(bs) >= ((128 * 128) * 4), 'ok', toString(max(bs)))\n+FROM\n+(\n+    SELECT blockSize() AS bs\n+    FROM\n+    (\n+        SELECT\n+            v1,\n+            v2\n+        FROM\n+        (\n+            SELECT rightPad(toString(number), 10, '_') AS v1\n+            FROM numbers(128 * 4)\n+        ) AS l\n+        CROSS JOIN\n+        (\n+            SELECT rightPad(toString(number), 10, '_') AS v2\n+            FROM numbers(128 * 4)\n+        ) AS r\n+    )\n+)\n+SETTINGS max_block_size = 128, max_joined_block_size_bytes = '10Mi';\n+\n+SELECT DISTINCT if((blockSize() AS bs) < 100000, 'ok', toString(bs))\n+FROM\n+(\n+    SELECT blockSize() AS bs\n+    FROM\n+    (\n+        SELECT\n+            v1,\n+            v2\n+        FROM\n+        (\n+            SELECT rightPad(toString(number), 128, '_') AS v1\n+            FROM numbers(128 * 4)\n+        ) AS l\n+        CROSS JOIN\n+        (\n+            SELECT rightPad(toString(number), 10, '_') AS v2\n+            FROM numbers(128 * 4)\n+        ) AS r\n+    )\n+)\n+SETTINGS max_block_size = 128, max_joined_block_size_bytes = '10Mi';\n+\n+SELECT DISTINCT if((blockSize() AS bs) < 100000, 'ok', toString(bs))\n+FROM\n+(\n+    SELECT blockSize() AS bs\n+    FROM\n+    (\n+        SELECT\n+            v1,\n+            v2\n+        FROM\n+        (\n+            SELECT rightPad(toString(number), 10, '_') AS v1\n+            FROM numbers(128 * 4)\n+        ) AS l\n+        CROSS JOIN\n+        (\n+            SELECT rightPad(toString(number), 128, '_') AS v2\n+            FROM numbers(128 * 4)\n+        ) AS r\n+    )\n+)\n+SETTINGS max_block_size = 128, max_joined_block_size_bytes = '10Mi';\ndiff --git a/tests/queries/0_stateless/03569_max_joined_block_size_rows_bug.reference b/tests/queries/0_stateless/03569_max_joined_block_size_rows_bug.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/03569_max_joined_block_size_rows_bug.sql b/tests/queries/0_stateless/03569_max_joined_block_size_rows_bug.sql\nnew file mode 100644\nindex 000000000000..40e2abd841a3\n--- /dev/null\n+++ b/tests/queries/0_stateless/03569_max_joined_block_size_rows_bug.sql\n@@ -0,0 +1,2 @@\n+set enable_analyzer=1;\n+select * from system.one, system.one settings max_joined_block_size_rows=0 format Null;\n",
  "problem_statement": "Infinite loop with `max_joined_block_size_rows` set to 0\n### Describe the bug\n\nAccording to the docs, setting `max_joined_block_size_rows` to 0 should be allowed, but I am getting a query stuck.\n\n### How to reproduce\n\nRun:\n\n```sql\nSELECT (SELECT number) FROM numbers(1) SETTINGS allow_experimental_correlated_subqueries = 1, max_joined_block_size_rows = 0; --stuck\n```\n\n### Error message and/or stacktrace\n\n_No response_\n",
  "hints_text": "",
  "created_at": "2025-07-16T19:00:39Z"
}