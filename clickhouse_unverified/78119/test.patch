diff --git a/tests/integration/test_select_access_rights/test_from_system_tables.py b/tests/integration/test_select_access_rights/test_from_system_tables.py
index 5fb69d266258..9d5d509d65a6 100644
--- a/tests/integration/test_select_access_rights/test_from_system_tables.py
+++ b/tests/integration/test_select_access_rights/test_from_system_tables.py
@@ -162,6 +162,19 @@ def test_information_schema():
     )
 
     node.query("GRANT SELECT ON information_schema.* TO sqluser")
+    expected_error = (
+        "necessary to have the grant SELECT(database, `table`) ON system.parts"
+    )
+    assert expected_error in node.query_and_get_error(
+        "SELECT count() FROM information_schema.tables WHERE table_name='table1'",
+        user="sqluser",
+    )
+    assert expected_error in node.query_and_get_error(
+        "SELECT count() FROM information_schema.tables WHERE table_name='table2'",
+        user="sqluser",
+    )
+
+    node.query("GRANT SELECT ON system.parts TO sqluser")
     assert (
         node.query(
             "SELECT count() FROM information_schema.tables WHERE table_name='table1'",
diff --git a/tests/queries/0_stateless/01161_information_schema.reference b/tests/queries/0_stateless/01161_information_schema.reference
index 6fbcce3ba940..0a69b764d1e7 100644
--- a/tests/queries/0_stateless/01161_information_schema.reference
+++ b/tests/queries/0_stateless/01161_information_schema.reference
@@ -42,11 +42,11 @@ views
 INFORMATION_SCHEMA	INFORMATION_SCHEMA	default	\N	\N	\N	\N	INFORMATION_SCHEMA	INFORMATION_SCHEMA	default	\N	\N	\N	\N
 information_schema	information_schema	default	\N	\N	\N	\N	information_schema	information_schema	default	\N	\N	\N	\N
 -- information_schema.tables
-default	default	kcu1	BASE TABLE	0	0	utf8mb4_0900_ai_ci		default	default	kcu1	BASE TABLE	0	0	utf8mb4_0900_ai_ci	
-default	default	kcu2	BASE TABLE	0	0	utf8mb4_0900_ai_ci		default	default	kcu2	BASE TABLE	0	0	utf8mb4_0900_ai_ci	
-default	default	mv	VIEW	0	0	utf8mb4_0900_ai_ci		default	default	mv	VIEW	0	0	utf8mb4_0900_ai_ci	
-default	default	t	FOREIGN TABLE	0	0	utf8mb4_0900_ai_ci		default	default	t	FOREIGN TABLE	0	0	utf8mb4_0900_ai_ci	
-default	default	v	VIEW	\N	\N	utf8mb4_0900_ai_ci		default	default	v	VIEW	\N	\N	utf8mb4_0900_ai_ci	
+default	default	kcu1	BASE TABLE	0	0	0	utf8mb4_0900_ai_ci		default	default	kcu1	BASE TABLE	0	0	utf8mb4_0900_ai_ci	
+default	default	kcu2	BASE TABLE	0	0	0	utf8mb4_0900_ai_ci		default	default	kcu2	BASE TABLE	0	0	utf8mb4_0900_ai_ci	
+default	default	mv	VIEW	0	0	0	utf8mb4_0900_ai_ci		default	default	mv	VIEW	0	0	utf8mb4_0900_ai_ci	
+default	default	t	FOREIGN TABLE	0	0	0	utf8mb4_0900_ai_ci		default	default	t	FOREIGN TABLE	0	0	utf8mb4_0900_ai_ci	
+default	default	v	VIEW	\N	\N	0	utf8mb4_0900_ai_ci		default	default	v	VIEW	\N	\N	utf8mb4_0900_ai_ci	
 -- information_schema.views
 default	default	mv	SELECT * FROM system.one	NONE	NO	YES	NO	NO	NO	default	default	mv	SELECT * FROM system.one	NONE	NO	YES	NO	NO	NO
 default	default	v	SELECT n, f FROM default.t	NONE	NO	NO	NO	NO	NO	default	default	v	SELECT n, f FROM default.t	NONE	NO	NO	NO	NO	NO
diff --git a/tests/queries/0_stateless/02206_information_schema_show_database.reference b/tests/queries/0_stateless/02206_information_schema_show_database.reference
index 2cc93c56e82a..36c5273a9412 100644
--- a/tests/queries/0_stateless/02206_information_schema_show_database.reference
+++ b/tests/queries/0_stateless/02206_information_schema_show_database.reference
@@ -1,6 +1,6 @@
 CREATE DATABASE INFORMATION_SCHEMA
ENGINE = Memory
 CREATE VIEW INFORMATION_SCHEMA.COLUMNS
(
    `table_catalog` String,
    `table_schema` String,
    `table_name` String,
    `column_name` String,
    `ordinal_position` UInt64,
    `column_default` String,
    `is_nullable` String,
    `data_type` String,
    `character_maximum_length` Nullable(UInt64),
    `character_octet_length` Nullable(UInt64),
    `numeric_precision` Nullable(UInt64),
    `numeric_precision_radix` Nullable(UInt64),
    `numeric_scale` Nullable(UInt64),
    `datetime_precision` Nullable(UInt64),
    `character_set_catalog` Nullable(String),
    `character_set_schema` Nullable(String),
    `character_set_name` Nullable(String),
    `collation_catalog` Nullable(String),
    `collation_schema` Nullable(String),
    `collation_name` Nullable(String),
    `domain_catalog` Nullable(String),
    `domain_schema` Nullable(String),
    `domain_name` Nullable(String),
    `extra` Nullable(String),
    `column_comment` String,
    `column_type` String,
    `TABLE_CATALOG` String,
    `TABLE_SCHEMA` String,
    `TABLE_NAME` String,
    `COLUMN_NAME` String,
    `ORDINAL_POSITION` UInt64,
    `COLUMN_DEFAULT` String,
    `IS_NULLABLE` String,
    `DATA_TYPE` String,
    `CHARACTER_MAXIMUM_LENGTH` Nullable(UInt64),
    `CHARACTER_OCTET_LENGTH` Nullable(UInt64),
    `NUMERIC_PRECISION` Nullable(UInt64),
    `NUMERIC_PRECISION_RADIX` Nullable(UInt64),
    `NUMERIC_SCALE` Nullable(UInt64),
    `DATETIME_PRECISION` Nullable(UInt64),
    `CHARACTER_SET_CATALOG` Nullable(String),
    `CHARACTER_SET_SCHEMA` Nullable(String),
    `CHARACTER_SET_NAME` Nullable(String),
    `COLLATION_CATALOG` Nullable(String),
    `COLLATION_SCHEMA` Nullable(String),
    `COLLATION_NAME` Nullable(String),
    `DOMAIN_CATALOG` Nullable(String),
    `DOMAIN_SCHEMA` Nullable(String),
    `DOMAIN_NAME` Nullable(String),
    `EXTRA` Nullable(String),
    `COLUMN_COMMENT` String,
    `COLUMN_TYPE` String
)
SQL SECURITY INVOKER
AS SELECT
    database AS table_catalog,
    database AS table_schema,
    `table` AS table_name,
    name AS column_name,
    position AS ordinal_position,
    default_expression AS column_default,
    type LIKE \'Nullable(%)\' AS is_nullable,
    type AS data_type,
    character_octet_length AS character_maximum_length,
    character_octet_length,
    numeric_precision,
    numeric_precision_radix,
    numeric_scale,
    datetime_precision,
    NULL AS character_set_catalog,
    NULL AS character_set_schema,
    NULL AS character_set_name,
    NULL AS collation_catalog,
    NULL AS collation_schema,
    NULL AS collation_name,
    NULL AS domain_catalog,
    NULL AS domain_schema,
    NULL AS domain_name,
    multiIf(default_kind = \'DEFAULT\', \'DEFAULT_GENERATED\', default_kind = \'MATERIALIZED\', \'STORED GENERATED\', default_kind = \'ALIAS\', \'VIRTUAL GENERATED\', \'\') AS extra,
    comment AS column_comment,
    type AS column_type,
    table_catalog AS TABLE_CATALOG,
    table_schema AS TABLE_SCHEMA,
    table_name AS TABLE_NAME,
    column_name AS COLUMN_NAME,
    ordinal_position AS ORDINAL_POSITION,
    column_default AS COLUMN_DEFAULT,
    is_nullable AS IS_NULLABLE,
    data_type AS DATA_TYPE,
    character_maximum_length AS CHARACTER_MAXIMUM_LENGTH,
    character_octet_length AS CHARACTER_OCTET_LENGTH,
    numeric_precision AS NUMERIC_PRECISION,
    numeric_precision_radix AS NUMERIC_PRECISION_RADIX,
    numeric_scale AS NUMERIC_SCALE,
    datetime_precision AS DATETIME_PRECISION,
    character_set_catalog AS CHARACTER_SET_CATALOG,
    character_set_schema AS CHARACTER_SET_SCHEMA,
    character_set_name AS CHARACTER_SET_NAME,
    collation_catalog AS COLLATION_CATALOG,
    collation_schema AS COLLATION_SCHEMA,
    collation_name AS COLLATION_NAME,
    domain_catalog AS DOMAIN_CATALOG,
    domain_schema AS DOMAIN_SCHEMA,
    domain_name AS DOMAIN_NAME,
    extra AS EXTRA,
    column_comment AS COLUMN_COMMENT,
    column_type AS COLUMN_TYPE
FROM system.columns
-CREATE VIEW INFORMATION_SCHEMA.TABLES (`table_catalog` String, `table_schema` String, `table_name` String, `table_type` String, `table_rows` Nullable(UInt64), `data_length` Nullable(UInt64), `table_collation` Nullable(String), `table_comment` Nullable(String), `TABLE_CATALOG` String, `TABLE_SCHEMA` String, `TABLE_NAME` String, `TABLE_TYPE` String, `TABLE_ROWS` Nullable(UInt64), `DATA_LENGTH` Nullable(UInt64), `TABLE_COLLATION` Nullable(String), `TABLE_COMMENT` Nullable(String)) SQL SECURITY INVOKER AS SELECT database AS table_catalog, database AS table_schema, name AS table_name, multiIf(is_temporary, \'LOCAL TEMPORARY\', engine LIKE \'%View\', \'VIEW\', engine LIKE \'System%\', \'SYSTEM VIEW\', has_own_data = 0, \'FOREIGN TABLE\', \'BASE TABLE\') AS table_type, total_rows AS table_rows, total_bytes AS data_length, \'utf8mb4_0900_ai_ci\' AS table_collation, comment AS table_comment, table_catalog AS TABLE_CATALOG, table_schema AS TABLE_SCHEMA, table_name AS TABLE_NAME, table_type AS TABLE_TYPE, table_rows AS TABLE_ROWS, data_length AS DATA_LENGTH, table_collation AS TABLE_COLLATION, table_comment AS TABLE_COMMENT FROM system.tables
-CREATE VIEW INFORMATION_SCHEMA.tables (`table_catalog` String, `table_schema` String, `table_name` String, `table_type` String, `table_rows` Nullable(UInt64), `data_length` Nullable(UInt64), `table_collation` Nullable(String), `table_comment` Nullable(String), `TABLE_CATALOG` String, `TABLE_SCHEMA` String, `TABLE_NAME` String, `TABLE_TYPE` String, `TABLE_ROWS` Nullable(UInt64), `DATA_LENGTH` Nullable(UInt64), `TABLE_COLLATION` Nullable(String), `TABLE_COMMENT` Nullable(String)) SQL SECURITY INVOKER AS SELECT database AS table_catalog, database AS table_schema, name AS table_name, multiIf(is_temporary, \'LOCAL TEMPORARY\', engine LIKE \'%View\', \'VIEW\', engine LIKE \'System%\', \'SYSTEM VIEW\', has_own_data = 0, \'FOREIGN TABLE\', \'BASE TABLE\') AS table_type, total_rows AS table_rows, total_bytes AS data_length, \'utf8mb4_0900_ai_ci\' AS table_collation, comment AS table_comment, table_catalog AS TABLE_CATALOG, table_schema AS TABLE_SCHEMA, table_name AS TABLE_NAME, table_type AS TABLE_TYPE, table_rows AS TABLE_ROWS, data_length AS DATA_LENGTH, table_collation AS TABLE_COLLATION, table_comment AS TABLE_COMMENT FROM system.tables
-CREATE VIEW information_schema.TABLES (`table_catalog` String, `table_schema` String, `table_name` String, `table_type` String, `table_rows` Nullable(UInt64), `data_length` Nullable(UInt64), `table_collation` Nullable(String), `table_comment` Nullable(String), `TABLE_CATALOG` String, `TABLE_SCHEMA` String, `TABLE_NAME` String, `TABLE_TYPE` String, `TABLE_ROWS` Nullable(UInt64), `DATA_LENGTH` Nullable(UInt64), `TABLE_COLLATION` Nullable(String), `TABLE_COMMENT` Nullable(String)) SQL SECURITY INVOKER AS SELECT database AS table_catalog, database AS table_schema, name AS table_name, multiIf(is_temporary, \'LOCAL TEMPORARY\', engine LIKE \'%View\', \'VIEW\', engine LIKE \'System%\', \'SYSTEM VIEW\', has_own_data = 0, \'FOREIGN TABLE\', \'BASE TABLE\') AS table_type, total_rows AS table_rows, total_bytes AS data_length, \'utf8mb4_0900_ai_ci\' AS table_collation, comment AS table_comment, table_catalog AS TABLE_CATALOG, table_schema AS TABLE_SCHEMA, table_name AS TABLE_NAME, table_type AS TABLE_TYPE, table_rows AS TABLE_ROWS, data_length AS DATA_LENGTH, table_collation AS TABLE_COLLATION, table_comment AS TABLE_COMMENT FROM system.tables
-CREATE VIEW information_schema.tables (`table_catalog` String, `table_schema` String, `table_name` String, `table_type` String, `table_rows` Nullable(UInt64), `data_length` Nullable(UInt64), `table_collation` Nullable(String), `table_comment` Nullable(String), `TABLE_CATALOG` String, `TABLE_SCHEMA` String, `TABLE_NAME` String, `TABLE_TYPE` String, `TABLE_ROWS` Nullable(UInt64), `DATA_LENGTH` Nullable(UInt64), `TABLE_COLLATION` Nullable(String), `TABLE_COMMENT` Nullable(String)) SQL SECURITY INVOKER AS SELECT database AS table_catalog, database AS table_schema, name AS table_name, multiIf(is_temporary, \'LOCAL TEMPORARY\', engine LIKE \'%View\', \'VIEW\', engine LIKE \'System%\', \'SYSTEM VIEW\', has_own_data = 0, \'FOREIGN TABLE\', \'BASE TABLE\') AS table_type, total_rows AS table_rows, total_bytes AS data_length, \'utf8mb4_0900_ai_ci\' AS table_collation, comment AS table_comment, table_catalog AS TABLE_CATALOG, table_schema AS TABLE_SCHEMA, table_name AS TABLE_NAME, table_type AS TABLE_TYPE, table_rows AS TABLE_ROWS, data_length AS DATA_LENGTH, table_collation AS TABLE_COLLATION, table_comment AS TABLE_COMMENT FROM system.tables
+CREATE VIEW INFORMATION_SCHEMA.TABLES (`table_catalog` String, `table_schema` String, `table_name` String, `table_type` String, `table_rows` Nullable(UInt64), `data_length` Nullable(UInt64), `index_length` Nullable(UInt64), `table_collation` Nullable(String), `table_comment` Nullable(String), `TABLE_CATALOG` String, `TABLE_SCHEMA` String, `TABLE_NAME` String, `TABLE_TYPE` String, `TABLE_ROWS` Nullable(UInt64), `DATA_LENGTH` Nullable(UInt64), `TABLE_COLLATION` Nullable(String), `TABLE_COMMENT` Nullable(String)) SQL SECURITY INVOKER AS SELECT database AS table_catalog, database AS table_schema, name AS table_name, multiIf(is_temporary, \'LOCAL TEMPORARY\', engine LIKE \'%View\', \'VIEW\', engine LIKE \'System%\', \'SYSTEM VIEW\', has_own_data = 0, \'FOREIGN TABLE\', \'BASE TABLE\') AS table_type, total_rows AS table_rows, total_bytes AS data_length, sum(((p.primary_key_size + p.marks_bytes) + p.secondary_indices_compressed_bytes) + p.secondary_indices_marks_bytes) AS index_length, \'utf8mb4_0900_ai_ci\' AS table_collation, comment AS table_comment, table_catalog AS TABLE_CATALOG, table_schema AS TABLE_SCHEMA, table_name AS TABLE_NAME, table_type AS TABLE_TYPE, table_rows AS TABLE_ROWS, data_length AS DATA_LENGTH, table_collation AS TABLE_COLLATION, table_comment AS TABLE_COMMENT FROM system.tables AS t LEFT JOIN system.parts AS p ON (t.database = p.database) AND (t.name = p.`table`) GROUP BY t.database, t.name, t.is_temporary, t.engine, t.has_own_data, t.total_rows, t.total_bytes, t.comment
+CREATE VIEW INFORMATION_SCHEMA.tables (`table_catalog` String, `table_schema` String, `table_name` String, `table_type` String, `table_rows` Nullable(UInt64), `data_length` Nullable(UInt64), `index_length` Nullable(UInt64), `table_collation` Nullable(String), `table_comment` Nullable(String), `TABLE_CATALOG` String, `TABLE_SCHEMA` String, `TABLE_NAME` String, `TABLE_TYPE` String, `TABLE_ROWS` Nullable(UInt64), `DATA_LENGTH` Nullable(UInt64), `TABLE_COLLATION` Nullable(String), `TABLE_COMMENT` Nullable(String)) SQL SECURITY INVOKER AS SELECT database AS table_catalog, database AS table_schema, name AS table_name, multiIf(is_temporary, \'LOCAL TEMPORARY\', engine LIKE \'%View\', \'VIEW\', engine LIKE \'System%\', \'SYSTEM VIEW\', has_own_data = 0, \'FOREIGN TABLE\', \'BASE TABLE\') AS table_type, total_rows AS table_rows, total_bytes AS data_length, sum(((p.primary_key_size + p.marks_bytes) + p.secondary_indices_compressed_bytes) + p.secondary_indices_marks_bytes) AS index_length, \'utf8mb4_0900_ai_ci\' AS table_collation, comment AS table_comment, table_catalog AS TABLE_CATALOG, table_schema AS TABLE_SCHEMA, table_name AS TABLE_NAME, table_type AS TABLE_TYPE, table_rows AS TABLE_ROWS, data_length AS DATA_LENGTH, table_collation AS TABLE_COLLATION, table_comment AS TABLE_COMMENT FROM system.tables AS t LEFT JOIN system.parts AS p ON (t.database = p.database) AND (t.name = p.`table`) GROUP BY t.database, t.name, t.is_temporary, t.engine, t.has_own_data, t.total_rows, t.total_bytes, t.comment
+CREATE VIEW information_schema.TABLES (`table_catalog` String, `table_schema` String, `table_name` String, `table_type` String, `table_rows` Nullable(UInt64), `data_length` Nullable(UInt64), `index_length` Nullable(UInt64), `table_collation` Nullable(String), `table_comment` Nullable(String), `TABLE_CATALOG` String, `TABLE_SCHEMA` String, `TABLE_NAME` String, `TABLE_TYPE` String, `TABLE_ROWS` Nullable(UInt64), `DATA_LENGTH` Nullable(UInt64), `TABLE_COLLATION` Nullable(String), `TABLE_COMMENT` Nullable(String)) SQL SECURITY INVOKER AS SELECT database AS table_catalog, database AS table_schema, name AS table_name, multiIf(is_temporary, \'LOCAL TEMPORARY\', engine LIKE \'%View\', \'VIEW\', engine LIKE \'System%\', \'SYSTEM VIEW\', has_own_data = 0, \'FOREIGN TABLE\', \'BASE TABLE\') AS table_type, total_rows AS table_rows, total_bytes AS data_length, sum(((p.primary_key_size + p.marks_bytes) + p.secondary_indices_compressed_bytes) + p.secondary_indices_marks_bytes) AS index_length, \'utf8mb4_0900_ai_ci\' AS table_collation, comment AS table_comment, table_catalog AS TABLE_CATALOG, table_schema AS TABLE_SCHEMA, table_name AS TABLE_NAME, table_type AS TABLE_TYPE, table_rows AS TABLE_ROWS, data_length AS DATA_LENGTH, table_collation AS TABLE_COLLATION, table_comment AS TABLE_COMMENT FROM system.tables AS t LEFT JOIN system.parts AS p ON (t.database = p.database) AND (t.name = p.`table`) GROUP BY t.database, t.name, t.is_temporary, t.engine, t.has_own_data, t.total_rows, t.total_bytes, t.comment
+CREATE VIEW information_schema.tables (`table_catalog` String, `table_schema` String, `table_name` String, `table_type` String, `table_rows` Nullable(UInt64), `data_length` Nullable(UInt64), `index_length` Nullable(UInt64), `table_collation` Nullable(String), `table_comment` Nullable(String), `TABLE_CATALOG` String, `TABLE_SCHEMA` String, `TABLE_NAME` String, `TABLE_TYPE` String, `TABLE_ROWS` Nullable(UInt64), `DATA_LENGTH` Nullable(UInt64), `TABLE_COLLATION` Nullable(String), `TABLE_COMMENT` Nullable(String)) SQL SECURITY INVOKER AS SELECT database AS table_catalog, database AS table_schema, name AS table_name, multiIf(is_temporary, \'LOCAL TEMPORARY\', engine LIKE \'%View\', \'VIEW\', engine LIKE \'System%\', \'SYSTEM VIEW\', has_own_data = 0, \'FOREIGN TABLE\', \'BASE TABLE\') AS table_type, total_rows AS table_rows, total_bytes AS data_length, sum(((p.primary_key_size + p.marks_bytes) + p.secondary_indices_compressed_bytes) + p.secondary_indices_marks_bytes) AS index_length, \'utf8mb4_0900_ai_ci\' AS table_collation, comment AS table_comment, table_catalog AS TABLE_CATALOG, table_schema AS TABLE_SCHEMA, table_name AS TABLE_NAME, table_type AS TABLE_TYPE, table_rows AS TABLE_ROWS, data_length AS DATA_LENGTH, table_collation AS TABLE_COLLATION, table_comment AS TABLE_COMMENT FROM system.tables AS t LEFT JOIN system.parts AS p ON (t.database = p.database) AND (t.name = p.`table`) GROUP BY t.database, t.name, t.is_temporary, t.engine, t.has_own_data, t.total_rows, t.total_bytes, t.comment
diff --git a/tests/queries/0_stateless/03397_information_schema_tables_index_length.reference b/tests/queries/0_stateless/03397_information_schema_tables_index_length.reference
new file mode 100644
index 000000000000..872fd820314f
--- /dev/null
+++ b/tests/queries/0_stateless/03397_information_schema_tables_index_length.reference
@@ -0,0 +1,4 @@
+OK
+OK
+2
+OK
diff --git a/tests/queries/0_stateless/03397_information_schema_tables_index_length.sql b/tests/queries/0_stateless/03397_information_schema_tables_index_length.sql
new file mode 100644
index 000000000000..4ec3d4a1832e
--- /dev/null
+++ b/tests/queries/0_stateless/03397_information_schema_tables_index_length.sql
@@ -0,0 +1,29 @@
+-- https://github.com/ClickHouse/ClickHouse/issues/57590
+
+DROP TABLE IF EXISTS tab_with_primary_key_index;
+CREATE TABLE tab_with_primary_key_index (id UInt32, a UInt32) ENGINE = MergeTree ORDER BY id;
+INSERT INTO tab_with_primary_key_index SELECT number, number % 2 ? 1 : number FROM numbers(10);
+
+DROP TABLE IF EXISTS tab_with_primary_key_index_and_skipping_index;
+CREATE TABLE tab_with_primary_key_index_and_skipping_index (id UInt32, a UInt32, INDEX idx a TYPE set(0)) ENGINE = MergeTree ORDER BY id;
+INSERT INTO tab_with_primary_key_index_and_skipping_index SELECT number, number % 2 ? 1 : number FROM numbers(10);
+
+-- Check that information_schema.tables.index_length is larger than 0 for both tables
+SELECT if(index_length > 0, 'OK', 'FAIL')
+FROM information_schema.tables
+WHERE table_name LIKE 'tab_with_primary_key_index%'
+    AND table_schema = currentDatabase();
+
+-- A very crude check that information_schema.tables.index_length is different for both tables
+SELECT count(*)
+FROM information_schema.tables
+WHERE table_name LIKE 'tab_with_primary_key_index%'
+    AND table_schema = currentDatabase();
+
+DROP TABLE tab_with_primary_key_index;
+
+-- Check that information_schema.tables.index_length is 0 for non-MergeTree tables
+SELECT if(index_length = 0, 'OK', 'FAIL')
+FROM information_schema.tables
+WHERE table_name = 'tables'
+    AND table_schema = 'system'; -- table engine is 'SystemTables'
