{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 5828,
  "instance_id": "ClickHouse__ClickHouse-5828",
  "issue_numbers": [
    "5804"
  ],
  "base_commit": "28ae9f90448194637e9e40a984cc227f22cf632d",
  "patch": "diff --git a/libs/libcommon/src/DateLUT.cpp b/libs/libcommon/src/DateLUT.cpp\nindex cac38634a265..c7dcf5689fff 100644\n--- a/libs/libcommon/src/DateLUT.cpp\n+++ b/libs/libcommon/src/DateLUT.cpp\n@@ -6,6 +6,7 @@\n #include <Poco/DigestStream.h>\n #include <fstream>\n \n+\n namespace\n {\n \n@@ -22,6 +23,7 @@ Poco::DigestEngine::Digest calcSHA1(const std::string & path)\n     return digest_engine.digest();\n }\n \n+\n std::string determineDefaultTimeZone()\n {\n     namespace fs = boost::filesystem;\n@@ -50,22 +52,45 @@ std::string determineDefaultTimeZone()\n     else\n     {\n         error_prefix = \"Could not determine local time zone: \";\n-        tz_file_path = \"/etc/localtime\"; /// FIXME: in case of no TZ use the immediate linked file as tz name.\n+        tz_file_path = \"/etc/localtime\";\n+\n+        /// No TZ variable and no tzdata installed (e.g. Docker)\n+        if (!fs::exists(tz_file_path))\n+            return \"UTC\";\n+\n+        /// Read symlink but not transitive.\n+        /// Example:\n+        ///  /etc/localtime -> /usr/share/zoneinfo//UTC\n+        ///  /usr/share/zoneinfo//UTC -> UCT\n+        /// But the preferred time zone name is pointed by the first link (UTC), and the second link is just an internal detail.\n+        if (fs::is_symlink(tz_file_path))\n+            tz_file_path = fs::read_symlink(tz_file_path);\n     }\n \n     try\n     {\n         tz_database_path = fs::canonical(tz_database_path);\n-        tz_file_path = fs::canonical(tz_file_path, tz_database_path);\n \n         /// The tzdata file exists. If it is inside the tz_database_dir,\n         /// then the relative path is the time zone id.\n-        fs::path relative_path = tz_file_path.lexically_relative(tz_database_path);\n-        if (!relative_path.empty() && *relative_path.begin() != \"..\" && *relative_path.begin() != \".\")\n-            return tz_name.empty() ? relative_path.string() : tz_name;\n+        {\n+            fs::path relative_path = tz_file_path.lexically_relative(tz_database_path);\n+\n+            if (!relative_path.empty() && *relative_path.begin() != \"..\" && *relative_path.begin() != \".\")\n+                return tz_name.empty() ? relative_path.string() : tz_name;\n+        }\n+\n+        /// Try the same with full symlinks resolution\n+        {\n+            tz_file_path = fs::canonical(tz_file_path, tz_database_path);\n+\n+            fs::path relative_path = tz_file_path.lexically_relative(tz_database_path);\n+            if (!relative_path.empty() && *relative_path.begin() != \"..\" && *relative_path.begin() != \".\")\n+                return tz_name.empty() ? relative_path.string() : tz_name;\n+        }\n \n-        /// The file is not inside the tz_database_dir, so we hope that it was copied and\n-        /// try to find the file with exact same contents in the database.\n+        /// The file is not inside the tz_database_dir, so we hope that it was copied (not symlinked)\n+        /// and try to find the file with exact same contents in the database.\n \n         size_t tzfile_size = fs::file_size(tz_file_path);\n         Poco::SHA1Engine::Digest tzfile_sha1 = calcSHA1(tz_file_path.string());\n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/00336_shard_stack_trace.sh b/dbms/tests/queries/0_stateless/00336_shard_stack_trace.sh\nindex f2a2556d3285..a7f25be52be9 100755\n--- a/dbms/tests/queries/0_stateless/00336_shard_stack_trace.sh\n+++ b/dbms/tests/queries/0_stateless/00336_shard_stack_trace.sh\n@@ -5,9 +5,9 @@ CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n \n ${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}\" -d 'SELECT a' | wc -l\n ${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}?stacktrace=0\" -d 'SELECT a' | wc -l\n-[[ $(${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}?stacktrace=1\" -d 'SELECT a' | wc -l) -gt 3 ]] && echo 'Ok' || echo 'Fail'\n+[[ $(${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}?stacktrace=1\" -d 'SELECT a' | wc -l) -ge 3 ]] && echo 'Ok' || echo 'Fail'\n ${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}\" -d \"SELECT intDiv(number, 0) FROM remote('127.0.0.{2,3}', system.numbers)\" | wc -l\n \n $CLICKHOUSE_CLIENT --query=\"SELECT a\" --server_logs_file=/dev/null 2>&1 | wc -l\n-[[ $($CLICKHOUSE_CLIENT --query=\"SELECT a\" --server_logs_file=/dev/null --stacktrace 2>&1 | wc -l) -gt 3 ]] && echo 'Ok' || echo 'Fail'\n+[[ $($CLICKHOUSE_CLIENT --query=\"SELECT a\" --server_logs_file=/dev/null --stacktrace 2>&1 | wc -l) -ge 3 ]] && echo 'Ok' || echo 'Fail'\n $CLICKHOUSE_CLIENT --query=\"SELECT intDiv(number, 0) FROM remote('127.0.0.{2,3}', system.numbers)\" --server_logs_file=/dev/null 2>&1 | wc -l\n",
  "problem_statement": "Timezone UCT instead of UTC\n```sql\r\nSELECT intDiv(toStartOfMinute(toDateTime('2019-06-29 00:00:00')), 60);\r\n```\r\n\r\nReturns \r\n> Illegal types DateTime('UCT') and UInt8 of arguments of function intDiv\r\n\r\nshould be \r\n\r\n```diff\r\n-Illegal types DateTime('UCT') and UInt8 of arguments of function intDiv\r\n+Illegal types DateTime('UTC') and UInt8 of arguments of function intDiv\r\n```\r\n\r\nv19.6.2.11\n",
  "hints_text": "toInt32\r\n\r\nSELECT intDiv(toInt32(toStartOfMinute(toDateTime('2019-06-29 00:00:00'))), 60);\r\n\r\nIt's not because of TZ. And UCT it's the same as UTC (just a symlink in tzdata2019.2) and can be overridden by TZ variable (new feature of CH). \nYup, I know I have to convert it to Int for it to work, thanks. \r\n\r\nJust `UCT` seemed like a typo. Do you know a docs/PR where I can learn more about the feature?\nUCT is not typo, it's a legacy TZ name. And has no relation to CH.\r\nIt's just a symlink in a new version of Linux tzdata.\r\n\r\n```\r\n# readlink -f /etc/localtime\r\n/usr/share/zoneinfo/UCT\r\n\r\n# dpkg -l 'tzdata*'\r\n||/ Name           Version      Architecture Description\r\n+++-==============-============-============-=======================================\r\nii  tzdata         2019a-1      all          time zone and daylight-saving time data\r\n```\r\nZulu === UTC === UCT === Universal.\r\n\r\n\r\nDebian10\r\n\r\n```\r\n# readlink -f /etc/localtime\r\n/usr/share/zoneinfo/UCT\r\n\r\nSELECT intDiv(toStartOfMinute(toDateTime('2019-06-29 00:00:00')), 60)\r\n\r\nReceived exception from server (version 19.8.3):\r\nCode: 43. DB::Exception: Received from localhost:9000, ::1. DB::Exception: Illegal types \r\nDateTime('UCT') and UInt8 of arguments of function intDiv.\r\n\r\nSELECT timezone()\r\n\r\n\u250c\u2500timezone()\u2500\u2510\r\n\u2502 UCT        \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nDebian9\r\n```\r\n# readlink -f /etc/localtime\r\n/usr/share/zoneinfo/UTC\r\n\r\nSELECT intDiv(toStartOfMinute(toDateTime('2019-06-29 00:00:00')), 60)\r\n\r\nReceived exception from server (version 19.10.1):\r\nCode: 43. DB::Exception: Received from localhost:9000, ::1. DB::Exception: Illegal types \r\nDateTime('UTC') and UInt8 of arguments of function intDiv.\r\n\r\nSELECT timezone()\r\n\r\n\u250c\u2500timezone()\u2500\u2510\r\n\u2502 UTC        \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n\nAnd CH timezone behavior can be overridden by \r\n\r\nUse contents of environment variable TZ as the name for timezone. \r\nIt helps to correctly detect default timezone in some cases. https://github.com/yandex/ClickHouse/pull/5443 (Ivan) \nOk, thanks!\nIt's major usability issue when if you run clickhouse-server on a server with new tzdata and clickhouse-client on a server with old tzdata.",
  "created_at": "2019-07-02T00:16:00Z",
  "modified_files": [
    "libs/libcommon/src/DateLUT.cpp"
  ],
  "modified_test_files": [
    "dbms/tests/queries/0_stateless/00336_shard_stack_trace.sh"
  ]
}