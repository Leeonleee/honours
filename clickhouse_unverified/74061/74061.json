{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 74061,
  "instance_id": "ClickHouse__ClickHouse-74061",
  "issue_numbers": [
    "68605"
  ],
  "base_commit": "a06f3b0f6c0dd5359cbee058f7219136bd716a06",
  "patch": "diff --git a/src/AggregateFunctions/AggregateFunctionAny.cpp b/src/AggregateFunctions/AggregateFunctionAny.cpp\nindex 2bcee0fdd5fb..2ff2b693a181 100644\n--- a/src/AggregateFunctions/AggregateFunctionAny.cpp\n+++ b/src/AggregateFunctions/AggregateFunctionAny.cpp\n@@ -1,5 +1,7 @@\n #include <AggregateFunctions/AggregateFunctionFactory.h>\n #include <AggregateFunctions/SingleValueData.h>\n+#include <DataTypes/IDataType.h>\n+#include <DataTypes/DataTypeEnum.h>\n #include <IO/ReadHelpers.h>\n #include <IO/WriteHelpers.h>\n #include <base/defines.h>\n@@ -11,6 +13,7 @@ struct Settings;\n \n namespace ErrorCodes\n {\n+extern const int LOGICAL_ERROR;\n extern const int NOT_IMPLEMENTED;\n }\n \n@@ -130,7 +133,25 @@ class AggregateFunctionAny final : public IAggregateFunctionDataHelper<Data, Agg\n \n     void insertResultInto(AggregateDataPtr __restrict place, IColumn & to, Arena *) const override\n     {\n-        this->data(place).insertResultInto(to);\n+        if (isEnum(this->argument_types[0]) && !this->data(place).has())\n+        {\n+            if (checkColumn<typename DataTypeEnum8::ColumnType>(&to))\n+            {\n+                const auto* type_enum8 = assert_cast<const DataTypeEnum8*>(this->argument_types[0].get());\n+                type_enum8->insertDefaultInto(to);\n+            }\n+            else if (checkColumn<typename DataTypeEnum16::ColumnType>(&to))\n+            {\n+                const auto* type_enum16 = assert_cast<const DataTypeEnum16*>(this->argument_types[0].get());\n+                type_enum16->insertDefaultInto(to);\n+            }\n+            else\n+            {\n+                throw Exception(ErrorCodes::LOGICAL_ERROR, \"Unexpected enum type: {}\", this->argument_types[0]->getName());\n+            }\n+        }\n+        else\n+            this->data(place).insertResultInto(to);\n     }\n \n #if USE_EMBEDDED_COMPILER\n@@ -300,7 +321,25 @@ class AggregateFunctionAnyLast final : public IAggregateFunctionDataHelper<Data,\n \n     void insertResultInto(AggregateDataPtr __restrict place, IColumn & to, Arena *) const override\n     {\n-        this->data(place).insertResultInto(to);\n+        if (isEnum(this->argument_types[0]) && !this->data(place).has())\n+        {\n+            if (checkColumn<typename DataTypeEnum8::ColumnType>(&to))\n+            {\n+                const auto* type_enum8 = assert_cast<const DataTypeEnum8*>(this->argument_types[0].get());\n+                type_enum8->insertDefaultInto(to);\n+            }\n+            else if (checkColumn<typename DataTypeEnum16::ColumnType>(&to))\n+            {\n+                const auto* type_enum16 = assert_cast<const DataTypeEnum16*>(this->argument_types[0].get());\n+                type_enum16->insertDefaultInto(to);\n+            }\n+            else\n+            {\n+                throw Exception(ErrorCodes::LOGICAL_ERROR, \"Unexpected enum type: {}\", this->argument_types[0]->getName());\n+            }\n+        }\n+        else\n+            this->data(place).insertResultInto(to);\n     }\n \n #if USE_EMBEDDED_COMPILER\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03302_any_enum_aggregation.reference b/tests/queries/0_stateless/03302_any_enum_aggregation.reference\nnew file mode 100644\nindex 000000000000..37d2e903991e\n--- /dev/null\n+++ b/tests/queries/0_stateless/03302_any_enum_aggregation.reference\n@@ -0,0 +1,16 @@\n+Issue 68605\n+LOW\n+LOW\t\t0\n+LOW\t\t0\n+Empty Enum8 table:\n+MEDIUM\n+MEDIUM\n+Enum8 table with HIGH value:\n+HIGH\n+HIGH\n+Empty Enum16 table:\n+MEDIUM\n+MEDIUM\n+Enum16 table with HIGH value:\n+HIGH\n+HIGH\ndiff --git a/tests/queries/0_stateless/03302_any_enum_aggregation.sql b/tests/queries/0_stateless/03302_any_enum_aggregation.sql\nnew file mode 100644\nindex 000000000000..d1ac1deed34f\n--- /dev/null\n+++ b/tests/queries/0_stateless/03302_any_enum_aggregation.sql\n@@ -0,0 +1,32 @@\n+SELECT 'Issue 68605';\n+DROP TABLE IF EXISTS test_33602;\n+CREATE TABLE test_33602 (name String, score UInt8, user_level  Enum8('LOW' = 1, 'MEDIUM' = 2, 'HIGH' = 3)) ENGINE=Memory;\n+SELECT any(user_level) FROM test_33602;\n+SELECT any(user_level), any(name), any(score) FROM test_33602;\n+SELECT anyLast(user_level), anyLast(name), anyLast(score) FROM test_33602;\n+DROP TABLE test_33602;\n+\n+SELECT 'Empty Enum8 table:';\n+DROP TABLE IF EXISTS test_33602_t0a;\n+CREATE TABLE test_33602_t0a (e Enum8('LOW' = 123, 'MEDIUM' = 12, 'HIGH' = 33)) ENGINE=Memory;\n+SELECT any(e) FROM test_33602_t0a;\n+SELECT anyLast(e) FROM test_33602_t0a;\n+\n+SELECT 'Enum8 table with HIGH value:';\n+INSERT INTO test_33602_t0a VALUES('HIGH');\n+SELECT any(e) FROM test_33602_t0a;\n+SELECT anyLast(e) FROM test_33602_t0a;\n+DROP TABLE test_33602_t0a;\n+\n+\n+SELECT 'Empty Enum16 table:';\n+DROP TABLE IF EXISTS test_33602_t0b;\n+CREATE TABLE test_33602_t0b (e Enum16('LOW' = 123, 'MEDIUM' = 12, 'HIGH' = 33)) ENGINE=Memory;\n+SELECT any(e) FROM test_33602_t0b;\n+SELECT anyLast(e) FROM test_33602_t0b;\n+\n+SELECT 'Enum16 table with HIGH value:';\n+INSERT INTO test_33602_t0b VALUES('HIGH');\n+SELECT any(e) FROM test_33602_t0b;\n+SELECT anyLast(e) FROM test_33602_t0b;\n+DROP TABLE test_33602_t0b;\n",
  "problem_statement": "any(Enum) on return Unknown enum value: 0 error\nDescribe what's wrong\r\n\r\nWhen running any() on enum when query responce is empty, error thrown\r\n`Unknown enum value: 0` \r\n\r\nDoes it reproduce on the most recent release?\r\n\r\nYes, on latest https://fiddle.clickhouse.com/2d2d48dc-33cb-4377-9ab9-fd4cb2a89321\r\n\r\nHow to reproduce\r\n\r\n```\r\nCREATE TABLE users (name String, score UInt8, user_level  Enum8('LOW' = 1, 'MEDIUM' = 2, 'HIGH' = 3)) ENGINE=Memory;\r\n\r\nSELECT any(user_level) FROM users\r\n```\r\n\r\n\r\nExpected behavior\r\n\r\nReturn empty response without error\n",
  "hints_text": "",
  "created_at": "2025-01-01T15:58:00Z",
  "modified_files": [
    "src/AggregateFunctions/AggregateFunctionAny.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03302_any_enum_aggregation.reference",
    "b/tests/queries/0_stateless/03302_any_enum_aggregation.sql"
  ]
}