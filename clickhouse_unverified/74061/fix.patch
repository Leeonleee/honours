diff --git a/src/AggregateFunctions/AggregateFunctionAny.cpp b/src/AggregateFunctions/AggregateFunctionAny.cpp
index 2bcee0fdd5fb..2ff2b693a181 100644
--- a/src/AggregateFunctions/AggregateFunctionAny.cpp
+++ b/src/AggregateFunctions/AggregateFunctionAny.cpp
@@ -1,5 +1,7 @@
 #include <AggregateFunctions/AggregateFunctionFactory.h>
 #include <AggregateFunctions/SingleValueData.h>
+#include <DataTypes/IDataType.h>
+#include <DataTypes/DataTypeEnum.h>
 #include <IO/ReadHelpers.h>
 #include <IO/WriteHelpers.h>
 #include <base/defines.h>
@@ -11,6 +13,7 @@ struct Settings;
 
 namespace ErrorCodes
 {
+extern const int LOGICAL_ERROR;
 extern const int NOT_IMPLEMENTED;
 }
 
@@ -130,7 +133,25 @@ class AggregateFunctionAny final : public IAggregateFunctionDataHelper<Data, Agg
 
     void insertResultInto(AggregateDataPtr __restrict place, IColumn & to, Arena *) const override
     {
-        this->data(place).insertResultInto(to);
+        if (isEnum(this->argument_types[0]) && !this->data(place).has())
+        {
+            if (checkColumn<typename DataTypeEnum8::ColumnType>(&to))
+            {
+                const auto* type_enum8 = assert_cast<const DataTypeEnum8*>(this->argument_types[0].get());
+                type_enum8->insertDefaultInto(to);
+            }
+            else if (checkColumn<typename DataTypeEnum16::ColumnType>(&to))
+            {
+                const auto* type_enum16 = assert_cast<const DataTypeEnum16*>(this->argument_types[0].get());
+                type_enum16->insertDefaultInto(to);
+            }
+            else
+            {
+                throw Exception(ErrorCodes::LOGICAL_ERROR, "Unexpected enum type: {}", this->argument_types[0]->getName());
+            }
+        }
+        else
+            this->data(place).insertResultInto(to);
     }
 
 #if USE_EMBEDDED_COMPILER
@@ -300,7 +321,25 @@ class AggregateFunctionAnyLast final : public IAggregateFunctionDataHelper<Data,
 
     void insertResultInto(AggregateDataPtr __restrict place, IColumn & to, Arena *) const override
     {
-        this->data(place).insertResultInto(to);
+        if (isEnum(this->argument_types[0]) && !this->data(place).has())
+        {
+            if (checkColumn<typename DataTypeEnum8::ColumnType>(&to))
+            {
+                const auto* type_enum8 = assert_cast<const DataTypeEnum8*>(this->argument_types[0].get());
+                type_enum8->insertDefaultInto(to);
+            }
+            else if (checkColumn<typename DataTypeEnum16::ColumnType>(&to))
+            {
+                const auto* type_enum16 = assert_cast<const DataTypeEnum16*>(this->argument_types[0].get());
+                type_enum16->insertDefaultInto(to);
+            }
+            else
+            {
+                throw Exception(ErrorCodes::LOGICAL_ERROR, "Unexpected enum type: {}", this->argument_types[0]->getName());
+            }
+        }
+        else
+            this->data(place).insertResultInto(to);
     }
 
 #if USE_EMBEDDED_COMPILER
