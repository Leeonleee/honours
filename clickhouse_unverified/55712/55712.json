{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 55712,
  "instance_id": "ClickHouse__ClickHouse-55712",
  "issue_numbers": [
    "54239"
  ],
  "base_commit": "70711b08988958598cab9b9522f299b24bf8f7e1",
  "patch": "diff --git a/src/Interpreters/Set.cpp b/src/Interpreters/Set.cpp\nindex b8b61c7c11f9..5df226cc2962 100644\n--- a/src/Interpreters/Set.cpp\n+++ b/src/Interpreters/Set.cpp\n@@ -324,11 +324,11 @@ ColumnPtr Set::execute(const ColumnsWithTypeAndName & columns, bool negative) co\n \n         if (!transform_null_in && data_types[i]->canBeInsideNullable())\n         {\n-            result = castColumnAccurateOrNull(column_to_cast, data_types[i]);\n+            result = castColumnAccurateOrNull(column_to_cast, data_types[i], cast_cache.get());\n         }\n         else\n         {\n-            result = castColumnAccurate(column_to_cast, data_types[i]);\n+            result = castColumnAccurate(column_to_cast, data_types[i], cast_cache.get());\n         }\n \n         materialized_columns.emplace_back() = result;\ndiff --git a/src/Interpreters/Set.h b/src/Interpreters/Set.h\nindex 9ea46e117ef5..08c472c3c950 100644\n--- a/src/Interpreters/Set.h\n+++ b/src/Interpreters/Set.h\n@@ -9,6 +9,7 @@\n #include <Storages/MergeTree/BoolMask.h>\n \n #include <Common/SharedMutex.h>\n+#include <Interpreters/castColumn.h>\n \n \n namespace DB\n@@ -33,9 +34,9 @@ class Set\n     /// This is needed for subsequent use for index.\n     Set(const SizeLimits & limits_, size_t max_elements_to_fill_, bool transform_null_in_)\n         : log(&Poco::Logger::get(\"Set\")),\n-        limits(limits_), max_elements_to_fill(max_elements_to_fill_), transform_null_in(transform_null_in_)\n-    {\n-    }\n+        limits(limits_), max_elements_to_fill(max_elements_to_fill_), transform_null_in(transform_null_in_),\n+        cast_cache(std::make_unique<InternalCastFunctionCache>())\n+    {}\n \n     /** Set can be created either from AST or from a stream of data (subquery result).\n       */\n@@ -142,6 +143,10 @@ class Set\n       */\n     mutable SharedMutex rwlock;\n \n+    /// A cache for cast functions (if any) to avoid rebuilding cast functions\n+    /// for every call to `execute`\n+    mutable std::unique_ptr<InternalCastFunctionCache> cast_cache;\n+\n     template <typename Method>\n     void insertFromBlockImpl(\n         Method & method,\ndiff --git a/src/Interpreters/castColumn.cpp b/src/Interpreters/castColumn.cpp\nindex dc9882b84b05..44e669a21abb 100644\n--- a/src/Interpreters/castColumn.cpp\n+++ b/src/Interpreters/castColumn.cpp\n@@ -7,24 +7,29 @@ namespace DB\n {\n \n template <CastType cast_type = CastType::nonAccurate>\n-static ColumnPtr castColumn(const ColumnWithTypeAndName & arg, const DataTypePtr & type)\n+static ColumnPtr castColumn(const ColumnWithTypeAndName & arg, const DataTypePtr & type, InternalCastFunctionCache * cache = nullptr)\n {\n     if (arg.type->equals(*type) && cast_type != CastType::accurateOrNull)\n         return arg.column;\n \n+    const auto from_name = arg.type->getName();\n+    const auto to_name = type->getName();\n     ColumnsWithTypeAndName arguments\n     {\n         arg,\n         {\n-            DataTypeString().createColumnConst(arg.column->size(), type->getName()),\n+            DataTypeString().createColumnConst(arg.column->size(), to_name),\n             std::make_shared<DataTypeString>(),\n             \"\"\n         }\n     };\n+    auto get_cast_func = [&arguments]\n+    {\n+        FunctionOverloadResolverPtr func_builder_cast = CastInternalOverloadResolver<cast_type>::createImpl();\n+        return func_builder_cast->build(arguments);\n+    };\n \n-    FunctionOverloadResolverPtr func_builder_cast = CastInternalOverloadResolver<cast_type>::createImpl();\n-\n-    auto func_cast = func_builder_cast->build(arguments);\n+    FunctionBasePtr func_cast = cache ? cache->getOrSet(cast_type, from_name, to_name, std::move(get_cast_func)) : get_cast_func();\n \n     if constexpr (cast_type == CastType::accurateOrNull)\n     {\n@@ -36,19 +41,19 @@ static ColumnPtr castColumn(const ColumnWithTypeAndName & arg, const DataTypePtr\n     }\n }\n \n-ColumnPtr castColumn(const ColumnWithTypeAndName & arg, const DataTypePtr & type)\n+ColumnPtr castColumn(const ColumnWithTypeAndName & arg, const DataTypePtr & type, InternalCastFunctionCache * cache)\n {\n-    return castColumn<CastType::nonAccurate>(arg, type);\n+    return castColumn<CastType::nonAccurate>(arg, type, cache);\n }\n \n-ColumnPtr castColumnAccurate(const ColumnWithTypeAndName & arg, const DataTypePtr & type)\n+ColumnPtr castColumnAccurate(const ColumnWithTypeAndName & arg, const DataTypePtr & type, InternalCastFunctionCache * cache)\n {\n-    return castColumn<CastType::accurate>(arg, type);\n+    return castColumn<CastType::accurate>(arg, type, cache);\n }\n \n-ColumnPtr castColumnAccurateOrNull(const ColumnWithTypeAndName & arg, const DataTypePtr & type)\n+ColumnPtr castColumnAccurateOrNull(const ColumnWithTypeAndName & arg, const DataTypePtr & type, InternalCastFunctionCache * cache)\n {\n-    return castColumn<CastType::accurateOrNull>(arg, type);\n+    return castColumn<CastType::accurateOrNull>(arg, type, cache);\n }\n \n }\ndiff --git a/src/Interpreters/castColumn.h b/src/Interpreters/castColumn.h\nindex fcbea0f46465..8d2c05025bb9 100644\n--- a/src/Interpreters/castColumn.h\n+++ b/src/Interpreters/castColumn.h\n@@ -1,12 +1,34 @@\n #pragma once\n \n+#include <tuple>\n #include <Core/ColumnWithTypeAndName.h>\n+#include <Functions/FunctionsConversion.h>\n \n namespace DB\n {\n \n-ColumnPtr castColumn(const ColumnWithTypeAndName & arg, const DataTypePtr & type);\n-ColumnPtr castColumnAccurate(const ColumnWithTypeAndName & arg, const DataTypePtr & type);\n-ColumnPtr castColumnAccurateOrNull(const ColumnWithTypeAndName & arg, const DataTypePtr & type);\n+struct InternalCastFunctionCache\n+{\n+private:\n+    /// Maps <cast_type, from_type, to_type> -> cast functions\n+    /// Doesn't own key, never refer to key after inserted\n+    std::map<std::tuple<CastType, String, String>, FunctionBasePtr> impl;\n+    mutable std::mutex mutex;\n+public:\n+    template<typename Getter>\n+    FunctionBasePtr getOrSet(CastType cast_type, const String & from, const String & to, Getter && getter)\n+    {\n+        std::lock_guard lock{mutex};\n+        auto key = std::forward_as_tuple(cast_type, from, to);\n+        auto it = impl.find(key);\n+        if (it == impl.end())\n+            it = impl.emplace(key, getter()).first;\n+        return it->second;\n+    }\n+};\n+\n+ColumnPtr castColumn(const ColumnWithTypeAndName & arg, const DataTypePtr & type, InternalCastFunctionCache * cache = nullptr);\n+ColumnPtr castColumnAccurate(const ColumnWithTypeAndName & arg, const DataTypePtr & type, InternalCastFunctionCache * cache = nullptr);\n+ColumnPtr castColumnAccurateOrNull(const ColumnWithTypeAndName & arg, const DataTypePtr & type, InternalCastFunctionCache * cache = nullptr);\n \n }\n",
  "test_patch": "diff --git a/tests/performance/enum_in_set.xml b/tests/performance/enum_in_set.xml\nnew file mode 100644\nindex 000000000000..bfd9742a206e\n--- /dev/null\n+++ b/tests/performance/enum_in_set.xml\n@@ -0,0 +1,18 @@\n+<test>\n+    <!-- high cardinality -->\n+    <create_query>\n+    CREATE TABLE iso_3166_1_alpha_2\n+    (\n+        `c` Enum8('LI' = -128, 'LT' = -127, 'LU' = -126, 'MO' = -125, 'MK' = -124, 'MG' = -123, 'MW' = -122, 'MY' = -121, 'MV' = -120, 'ML' = -119, 'MT' = -118, 'MH' = -117, 'MQ' = -116, 'MR' = -115, 'MU' = -114, 'YT' = -113, 'MX' = -112, 'FM' = -111, 'MD' = -110, 'MC' = -109, 'MN' = -108, 'ME' = -107, 'MS' = -106, 'MA' = -105, 'MZ' = -104, 'MM' = -103, 'NA' = -102, 'NR' = -101, 'NP' = -100, 'NL' = -99, 'NC' = -98, 'NZ' = -97, 'NI' = -96, 'NE' = -95, 'NG' = -94, 'NU' = -93, 'NF' = -92, 'MP' = -91, 'NO' = -90, 'OM' = -89, 'PK' = -88, 'PW' = -87, 'PS' = -86, 'PA' = -85, 'PG' = -84, 'PY' = -83, 'PE' = -82, 'PH' = -81, 'PN' = -80, 'PL' = -79, 'PT' = -78, 'PR' = -77, 'QA' = -76, 'RE' = -75, 'RO' = -74, 'RU' = -73, 'RW' = -72, 'BL' = -71, 'SH' = -70, 'KN' = -69, 'LC' = -68, 'MF' = -67, 'PM' = -66, 'VC' = -65, 'WS' = -64, 'SM' = -63, 'ST' = -62, 'SA' = -61, 'SN' = -60, 'RS' = -59, 'SC' = -58, 'SL' = -57, 'SG' = -56, 'SX' = -55, 'SK' = -54, 'SI' = -53, 'SB' = -52, 'SO' = -51, 'ZA' = -50, 'GS' = -49, 'SS' = -48, 'ES' = -47, 'LK' = -46, 'SD' = -45, 'SR' = -44, 'SJ' = -43, 'SZ' = -42, 'SE' = -41, 'CH' = -40, 'SY' = -39, 'TW' = -38, 'TJ' = -37, 'TZ' = -36, 'TH' = -35, 'TL' = -34, 'TG' = -33, 'TK' = -32, 'TO' = -31, 'TT' = -30, 'TN' = -29, 'TR' = -28, 'TM' = -27, 'TC' = -26, 'TV' = -25, 'UG' = -24, 'UA' = -23, 'AE' = -22, 'GB' = -21, 'UM' = -20, 'US' = -19, 'UY' = -18, 'UZ' = -17, 'VU' = -16, 'VE' = -15, 'VN' = -14, 'VG' = -13, 'VI' = -12, 'WF' = -11, 'EH' = -10, 'YE' = -9, 'ZM' = -8, 'ZW' = -7, 'OTHER' = 0, 'AF' = 1, 'AX' = 2, 'AL' = 3, 'DZ' = 4, 'AS' = 5, 'AD' = 6, 'AO' = 7, 'AI' = 8, 'AQ' = 9, 'AG' = 10, 'AR' = 11, 'AM' = 12, 'AW' = 13, 'AU' = 14, 'AT' = 15, 'AZ' = 16, 'BS' = 17, 'BH' = 18, 'BD' = 19, 'BB' = 20, 'BY' = 21, 'BE' = 22, 'BZ' = 23, 'BJ' = 24, 'BM' = 25, 'BT' = 26, 'BO' = 27, 'BQ' = 28, 'BA' = 29, 'BW' = 30, 'BV' = 31, 'BR' = 32, 'IO' = 33, 'BN' = 34, 'BG' = 35, 'BF' = 36, 'BI' = 37, 'CV' = 38, 'KH' = 39, 'CM' = 40, 'CA' = 41, 'KY' = 42, 'CF' = 43, 'TD' = 44, 'CL' = 45, 'CN' = 46, 'CX' = 47, 'CC' = 48, 'CO' = 49, 'KM' = 50, 'CD' = 51, 'CG' = 52, 'CK' = 53, 'CR' = 54, 'CI' = 55, 'HR' = 56, 'CU' = 57, 'CW' = 58, 'CY' = 59, 'CZ' = 60, 'DK' = 61, 'DJ' = 62, 'DM' = 63, 'DO' = 64, 'EC' = 65, 'EG' = 66, 'SV' = 67, 'GQ' = 68, 'ER' = 69, 'EE' = 70, 'ET' = 71, 'FK' = 72, 'FO' = 73, 'FJ' = 74, 'FI' = 75, 'FR' = 76, 'GF' = 77, 'PF' = 78, 'TF' = 79, 'GA' = 80, 'GM' = 81, 'GE' = 82, 'DE' = 83, 'GH' = 84, 'GI' = 85, 'GR' = 86, 'GL' = 87, 'GD' = 88, 'GP' = 89, 'GU' = 90, 'GT' = 91, 'GG' = 92, 'GN' = 93, 'GW' = 94, 'GY' = 95, 'HT' = 96, 'HM' = 97, 'VA' = 98, 'HN' = 99, 'HK' = 100, 'HU' = 101, 'IS' = 102, 'IN' = 103, 'ID' = 104, 'IR' = 105, 'IQ' = 106, 'IE' = 107, 'IM' = 108, 'IL' = 109, 'IT' = 110, 'JM' = 111, 'JP' = 112, 'JE' = 113, 'JO' = 114, 'KZ' = 115, 'KE' = 116, 'KI' = 117, 'KP' = 118, 'KR' = 119, 'KW' = 120, 'KG' = 121, 'LA' = 122, 'LV' = 123, 'LB' = 124, 'LS' = 125, 'LR' = 126, 'LY' = 127)\n+    )\n+    ENGINE = MergeTree\n+    ORDER BY tuple()\n+    SETTINGS index_granularity = 8192\n+    </create_query>\n+    <fill_query>INSERT INTO iso_3166_1_alpha_2 SELECT (rand(number) % 256) - 128 FROM numbers(200000000)</fill_query>\n+    <fill_query>OPTIMIZE TABLE iso_3166_1_alpha_2 FINAL</fill_query>\n+\n+    <query>SELECT count() FROM iso_3166_1_alpha_2 WHERE c NOT IN ('CU', 'BN', 'VI', 'US', 'AQ', 'AG', 'AR', 'AM', 'AW', 'AU', 'AT', 'AZ', 'BS', 'BH', 'BD', 'BB', 'BY', 'BE') FORMAT Null SETTINGS max_threads = 1</query>\n+\n+    <drop_query>DROP TABLE IF EXISTS iso_3166_1_alpha_2</drop_query>\n+</test>\n",
  "problem_statement": "Set::execute excessively builds internal CAST functions\n<img width=\"1491\" alt=\"image\" src=\"https://github.com/ClickHouse/ClickHouse/assets/22796953/32e20f98-90f7-4630-9bd3-c3ff35fb2e8d\">\r\n\r\n====\r\n\r\nBuilding functions require parsing, so it can be slow. Probably `Set` should cache the `CAST` corresponding functions for each column.\n",
  "hints_text": "",
  "created_at": "2023-10-17T07:49:04Z",
  "modified_files": [
    "src/Interpreters/Set.cpp",
    "src/Interpreters/Set.h",
    "src/Interpreters/castColumn.cpp",
    "src/Interpreters/castColumn.h"
  ],
  "modified_test_files": [
    "b/tests/performance/enum_in_set.xml"
  ]
}