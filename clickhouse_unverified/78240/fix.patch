diff --git a/src/Functions/map.cpp b/src/Functions/map.cpp
index 839bc16cdb18..adc4c68d385a 100644
--- a/src/Functions/map.cpp
+++ b/src/Functions/map.cpp
@@ -234,24 +234,23 @@ class FunctionMapFromArrays : public IFunction
         ColumnPtr data_keys = col_keys->getDataPtr();
         if (isColumnNullableOrLowCardinalityNullable(*data_keys))
         {
-            const NullMap * null_map = nullptr;
             if (const auto * nullable = checkAndGetColumn<ColumnNullable>(data_keys.get()))
             {
-                null_map = &nullable->getNullMapData();
+                const auto * null_map = &nullable->getNullMapData();
+                if (null_map && !memoryIsZero(null_map->data(), 0, null_map->size()))
+                    throw Exception(
+                        ErrorCodes::BAD_ARGUMENTS, "The nested column of first argument in function {} must not contain NULLs", getName());
+
                 data_keys = nullable->getNestedColumnPtr();
             }
             else if (const auto * low_cardinality = checkAndGetColumn<ColumnLowCardinality>(data_keys.get()))
             {
-                if (const auto * nullable_dict = checkAndGetColumn<ColumnNullable>(low_cardinality->getDictionaryPtr().get()))
-                {
-                    null_map = &nullable_dict->getNullMapData();
-                    data_keys = ColumnLowCardinality::create(nullable_dict->getNestedColumnPtr(), low_cardinality->getIndexesPtr());
-                }
-            }
+                if (low_cardinality->containsNull())
+                    throw Exception(
+                        ErrorCodes::BAD_ARGUMENTS, "The nested column of first argument in function {} must not contain NULLs", getName());
 
-            if (null_map && !memoryIsZero(null_map->data(), 0, null_map->size()))
-                throw Exception(
-                    ErrorCodes::BAD_ARGUMENTS, "The nested column of first argument in function {} must not contain NULLs", getName());
+                data_keys = low_cardinality->cloneWithDefaultOnNull();
+            }
         }
 
         if (!col_keys->hasEqualOffsets(*col_values))
