{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 78240,
  "instance_id": "ClickHouse__ClickHouse-78240",
  "issue_numbers": [
    "77803"
  ],
  "base_commit": "403ccc7f652d0b84c3d038888671d82a6784a4aa",
  "patch": "diff --git a/src/Functions/map.cpp b/src/Functions/map.cpp\nindex 839bc16cdb18..adc4c68d385a 100644\n--- a/src/Functions/map.cpp\n+++ b/src/Functions/map.cpp\n@@ -234,24 +234,23 @@ class FunctionMapFromArrays : public IFunction\n         ColumnPtr data_keys = col_keys->getDataPtr();\n         if (isColumnNullableOrLowCardinalityNullable(*data_keys))\n         {\n-            const NullMap * null_map = nullptr;\n             if (const auto * nullable = checkAndGetColumn<ColumnNullable>(data_keys.get()))\n             {\n-                null_map = &nullable->getNullMapData();\n+                const auto * null_map = &nullable->getNullMapData();\n+                if (null_map && !memoryIsZero(null_map->data(), 0, null_map->size()))\n+                    throw Exception(\n+                        ErrorCodes::BAD_ARGUMENTS, \"The nested column of first argument in function {} must not contain NULLs\", getName());\n+\n                 data_keys = nullable->getNestedColumnPtr();\n             }\n             else if (const auto * low_cardinality = checkAndGetColumn<ColumnLowCardinality>(data_keys.get()))\n             {\n-                if (const auto * nullable_dict = checkAndGetColumn<ColumnNullable>(low_cardinality->getDictionaryPtr().get()))\n-                {\n-                    null_map = &nullable_dict->getNullMapData();\n-                    data_keys = ColumnLowCardinality::create(nullable_dict->getNestedColumnPtr(), low_cardinality->getIndexesPtr());\n-                }\n-            }\n+                if (low_cardinality->containsNull())\n+                    throw Exception(\n+                        ErrorCodes::BAD_ARGUMENTS, \"The nested column of first argument in function {} must not contain NULLs\", getName());\n \n-            if (null_map && !memoryIsZero(null_map->data(), 0, null_map->size()))\n-                throw Exception(\n-                    ErrorCodes::BAD_ARGUMENTS, \"The nested column of first argument in function {} must not contain NULLs\", getName());\n+                data_keys = low_cardinality->cloneWithDefaultOnNull();\n+            }\n         }\n \n         if (!col_keys->hasEqualOffsets(*col_values))\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03399_lc_nullable_mapfromarrays.reference b/tests/queries/0_stateless/03399_lc_nullable_mapfromarrays.reference\nnew file mode 100644\nindex 000000000000..0b5130cee36b\n--- /dev/null\n+++ b/tests/queries/0_stateless/03399_lc_nullable_mapfromarrays.reference\n@@ -0,0 +1,11 @@\n+{'c':('b',1),'d':('a',2)}\n+\n+-- Literal tests\n+{'a':1,'b':2}\n+{1:3,2:4}\n+\n+-- Table tests\n+{1:3,2:4}\n+{1:3,2:4}\n+{'a':1,'b':2}\n+{'a':1,'b':2}\ndiff --git a/tests/queries/0_stateless/03399_lc_nullable_mapfromarrays.sql b/tests/queries/0_stateless/03399_lc_nullable_mapfromarrays.sql\nnew file mode 100644\nindex 000000000000..0370b206c871\n--- /dev/null\n+++ b/tests/queries/0_stateless/03399_lc_nullable_mapfromarrays.sql\n@@ -0,0 +1,87 @@\n+-- Original reproducer from the issue\n+-- https://github.com/ClickHouse/ClickHouse/issues/77803\n+SELECT mapFromArrays(\n+    [toNullable(toLowCardinality('c')), toFixedString(toFixedString('d', toUInt256(1)), toLowCardinality(1))],\n+    map('b', 1, toFixedString('a', 1), 2)\n+)\n+GROUP BY 1;\n+\n+SELECT '';\n+SELECT '-- Literal tests';\n+\n+-- Simpler test variations\n+SELECT mapFromArrays([toLowCardinality(toNullable('a')), toLowCardinality(toNullable('b'))], [1, 2]) GROUP BY 1;\n+SELECT mapFromArrays([toLowCardinality(toNullable(1)), toLowCardinality(toNullable(2))], [3, 4]) GROUP BY 1;\n+\n+SELECT mapFromArrays(\n+    [toLowCardinality(toNullable(1)), toLowCardinality(cast(NULL as Nullable(Int32)))],\n+    [3, 4]\n+) GROUP BY 1; -- { serverError BAD_ARGUMENTS }\n+\n+SELECT mapFromArrays(\n+    [toLowCardinality(toNullable('x')), toLowCardinality(cast(NULL as Nullable(String)))],\n+    [3, 4]\n+) GROUP BY 1; -- { serverError BAD_ARGUMENTS }\n+\n+SELECT '';\n+SELECT '-- Table tests';\n+\n+-- Run tests on tables\n+SET allow_suspicious_low_cardinality_types=1;\n+\n+DROP TABLE IF EXISTS 03399_lc_nullable_int_simple;\n+CREATE TABLE 03399_lc_nullable_int_simple(\n+    k Array(LowCardinality(Nullable(Int32))),\n+    v Array(Int32)\n+) engine = Memory\n+AS\n+SELECT [1, 2], [3, 4];\n+\n+SELECT mapFromArrays(k, v) FROM 03399_lc_nullable_int_simple;\n+SELECT mapFromArrays(k, v) FROM 03399_lc_nullable_int_simple GROUP BY 1;\n+\n+DROP TABLE IF EXISTS 03399_lc_nullable_int_simple;\n+\n+DROP TABLE IF EXISTS 03399_lc_nullable_int_mixed;\n+CREATE TABLE 03399_lc_nullable_int_mixed(\n+    k Array(LowCardinality(Nullable(Int32))),\n+    v Array(Int32)\n+) engine = Memory\n+AS\n+SELECT [1, 2], [3, 4]\n+UNION ALL\n+SELECT [5, null], [7, 8];\n+\n+SELECT mapFromArrays(k, v) FROM 03399_lc_nullable_int_mixed; -- { serverError BAD_ARGUMENTS }\n+SELECT mapFromArrays(k, v) FROM 03399_lc_nullable_int_mixed GROUP BY 1; -- { serverError BAD_ARGUMENTS }\n+\n+DROP TABLE IF EXISTS 03399_lc_nullable_int_mixed;\n+\n+\n+DROP TABLE IF EXISTS 03399_lc_nullable_string_simple;\n+CREATE TABLE 03399_lc_nullable_string_simple(\n+    k Array(LowCardinality(Nullable(String))),\n+    v Array(Int32)\n+) engine = Memory\n+AS\n+SELECT ['a', 'b'], [1, 2];\n+\n+SELECT mapFromArrays(k, v) FROM 03399_lc_nullable_string_simple;\n+SELECT mapFromArrays(k, v) FROM 03399_lc_nullable_string_simple GROUP BY 1;\n+\n+DROP TABLE IF EXISTS 03399_lc_nullable_string_simple;\n+\n+DROP TABLE IF EXISTS 03399_lc_nullable_string_mixed;\n+CREATE TABLE 03399_lc_nullable_string_mixed(\n+    k Array(LowCardinality(Nullable(String))),\n+    v Array(Int32)\n+) engine = Memory\n+AS\n+SELECT ['a', 'b'], [1, 2]\n+UNION ALL\n+SELECT [NULL, 'c'], [3, 4];\n+\n+SELECT mapFromArrays(k, v) FROM 03399_lc_nullable_string_mixed; -- { serverError BAD_ARGUMENTS }\n+SELECT mapFromArrays(k, v) FROM 03399_lc_nullable_string_mixed GROUP BY 1; -- { serverError BAD_ARGUMENTS }\n+\n+DROP TABLE IF EXISTS 03399_lc_nullable_string_mixed;\n",
  "problem_statement": "Crash with mapFromArrays\n### Describe the bug\n\nhttps://s3.amazonaws.com/clickhouse-test-reports/json.html?PR=77336&sha=e92be9c734c17d0827bcae4dbc2a8c9f7cfd67c9&name_0=PR&name_1=AST%20fuzzer%20%28debug%29\n\n### How to reproduce\n\n```sql\nSELECT mapFromArrays([toNullable(toLowCardinality('c')), toFixedString(toFixedString('d', toUInt256(1)), toLowCardinality(1))], map('b', 1, toFixedString('a', 1), 2))\n```\n\n### Error message and/or stacktrace\n\n```\n\n2025.03.18 12:32:52.239759 [ 137053 ] {} <Fatal> ClientBase: ########## Short fault info ############\n2025.03.18 12:32:52.276082 [ 137053 ] {} <Fatal> ClientBase: (version 25.2.1.3085 (official build), build id: 1A3F7CA3FA57AA5910DEB2DA4440126BF05F69CD, git hash: 09989205d6fd661fb2683cbb1390fe4fcedaa548, architecture: x86_64) (from thread 137029) Received signal 11\n2025.03.18 12:32:52.276096 [ 137053 ] {} <Fatal> ClientBase: Signal description: Segmentation fault\n2025.03.18 12:32:52.276100 [ 137053 ] {} <Fatal> ClientBase: Address: 0x724a00000047. Access: read. Address not mapped to object.\n2025.03.18 12:32:52.276104 [ 137053 ] {} <Fatal> ClientBase: Stack trace: 0x000000000f2324b7 0x00007209b63f0cd0 0x0000000009fe6791 0x000000001231c610 0x00000000122dbdae 0x00000000122ddfd1 0x0000000014888b5b 0x0000000014888382 0x000000001488e109 0x00000000146e5762 0x00000000144c995d 0x00000000144c8a22 0x00000000144c8059 0x00000000144c5b83 0x00000000144d0dca 0x00000000144d26f0 0x00000000144d9c5b 0x000000000f139a06 0x0000000017d1d906 0x000000000f147f6f 0x0000000009eff6e1 0x00007209b63da488 0x00007209b63da54c 0x0000000006a9002e\n2025.03.18 12:32:52.276121 [ 137053 ] {} <Fatal> ClientBase: ########################################\n2025.03.18 12:32:52.276125 [ 137053 ] {} <Fatal> ClientBase: (version 25.2.1.3085 (official build), build id: 1A3F7CA3FA57AA5910DEB2DA4440126BF05F69CD, git hash: 09989205d6fd661fb2683cbb1390fe4fcedaa548) (from thread 137029) (no query) Received signal Segmentation fault (11)\n2025.03.18 12:32:52.276129 [ 137053 ] {} <Fatal> ClientBase: Address: 0x724a00000047. Access: read. Address not mapped to object.\n2025.03.18 12:32:52.276132 [ 137053 ] {} <Fatal> ClientBase: Stack trace: 0x000000000f2324b7 0x00007209b63f0cd0 0x0000000009fe6791 0x000000001231c610 0x00000000122dbdae 0x00000000122ddfd1 0x0000000014888b5b 0x0000000014888382 0x000000001488e109 0x00000000146e5762 0x00000000144c995d 0x00000000144c8a22 0x00000000144c8059 0x00000000144c5b83 0x00000000144d0dca 0x00000000144d26f0 0x00000000144d9c5b 0x000000000f139a06 0x0000000017d1d906 0x000000000f147f6f 0x0000000009eff6e1 0x00007209b63da488 0x00007209b63da54c 0x0000000006a9002e\n2025.03.18 12:32:52.276546 [ 137053 ] {} <Fatal> ClientBase: 0. signalHandler(int, siginfo_t*, void*) @ 0x000000000f2324b7\n2025.03.18 12:32:52.276550 [ 137053 ] {} <Fatal> ClientBase: 1. ? @ 0x00007209b63f0cd0\n2025.03.18 12:32:52.276881 [ 137053 ] {} <Fatal> ClientBase: 2. void DB::writeAnyEscapedString<(char)39, false, true>(char const*, char const*, DB::WriteBuffer&) @ 0x0000000009fe6791\n2025.03.18 12:32:52.277099 [ 137053 ] {} <Fatal> ClientBase: 3. DB::SerializationString::serializeTextQuoted(DB::IColumn const&, unsigned long, DB::WriteBuffer&, DB::FormatSettings const&) const @ 0x000000001231c610\n2025.03.18 12:32:52.277267 [ 137053 ] {} <Fatal> ClientBase: 4. void DB::SerializationLowCardinality::serializeImpl<DB::WriteBuffer&, DB::FormatSettings const&, DB::WriteBuffer&, DB::FormatSettings const&>(DB::IColumn const&, unsigned long, void (DB::ISerialization::*)(DB::IColumn const&, unsigned long, DB::WriteBuffer&, DB::FormatSettings const&) const, DB::WriteBuffer&, DB::FormatSettings const&) const @ 0x00000000122dbdae\n2025.03.18 12:32:52.277274 [ 137053 ] {} <Fatal> ClientBase: 5. DB::SerializationMap::serializeText(DB::IColumn const&, unsigned long, DB::WriteBuffer&, DB::FormatSettings const&) const @ 0x00000000122ddfd1\n2025.03.18 12:32:52.277521 [ 137053 ] {} <Fatal> ClientBase: 6. DB::PrettyBlockOutputFormat::writeChunk(DB::Chunk const&, DB::IOutputFormat::PortKind) @ 0x0000000014888b5b\n2025.03.18 12:32:52.277695 [ 137053 ] {} <Fatal> ClientBase: 7. DB::PrettyBlockOutputFormat::writeMonoChunkIfNeeded() @ 0x0000000014888382\n2025.03.18 12:32:52.277878 [ 137053 ] {} <Fatal> ClientBase: 8. DB::PrettyBlockOutputFormat::writeSuffix() @ 0x000000001488e109\n2025.03.18 12:32:52.278106 [ 137053 ] {} <Fatal> ClientBase: 9. DB::IOutputFormat::finalize() @ 0x00000000146e5762\n2025.03.18 12:32:52.278328 [ 137053 ] {} <Fatal> ClientBase: 10. DB::ClientBase::onEndOfStream() @ 0x00000000144c995d\n2025.03.18 12:32:52.278606 [ 137053 ] {} <Fatal> ClientBase: 11. DB::ClientBase::receiveAndProcessPacket(std::shared_ptr<DB::IAST>, bool) @ 0x00000000144c8a22\n2025.03.18 12:32:52.278751 [ 137053 ] {} <Fatal> ClientBase: 12. DB::ClientBase::receiveResult(std::shared_ptr<DB::IAST>, int, bool) @ 0x00000000144c8059\n2025.03.18 12:32:52.278759 [ 137053 ] {} <Fatal> ClientBase: 13. DB::ClientBase::processParsedSingleQuery(String const&, String const&, std::shared_ptr<DB::IAST>, std::optional<bool>, bool) @ 0x00000000144c5b83\n2025.03.18 12:32:52.279092 [ 137053 ] {} <Fatal> ClientBase: 14. DB::ClientBase::executeMultiQuery(String const&) @ 0x00000000144d0dca\n2025.03.18 12:32:52.279097 [ 137053 ] {} <Fatal> ClientBase: 15. DB::ClientBase::processQueryText(String const&) @ 0x00000000144d26f0\n2025.03.18 12:32:52.279239 [ 137053 ] {} <Fatal> ClientBase: 16. DB::ClientBase::runInteractive() @ 0x00000000144d9c5b\n2025.03.18 12:32:52.279433 [ 137053 ] {} <Fatal> ClientBase: 17. DB::LocalServer::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000f139a06\n2025.03.18 12:32:52.279620 [ 137053 ] {} <Fatal> ClientBase: 18. Poco::Util::Application::run() @ 0x0000000017d1d906\n2025.03.18 12:32:52.279791 [ 137053 ] {} <Fatal> ClientBase: 19. mainEntryClickHouseLocal(int, char**) @ 0x000000000f147f6f\n2025.03.18 12:32:52.279926 [ 137053 ] {} <Fatal> ClientBase: 20. main @ 0x0000000009eff6e1\n2025.03.18 12:32:52.279929 [ 137053 ] {} <Fatal> ClientBase: 21. ? @ 0x00007209b63da488\n2025.03.18 12:32:52.279933 [ 137053 ] {} <Fatal> ClientBase: 22. ? @ 0x00007209b63da54c\n2025.03.18 12:32:52.280133 [ 137053 ] {} <Fatal> ClientBase: 23. _start @ 0x0000000006a9002e\n2025.03.18 12:32:52.280139 [ 137053 ] {} <Fatal> ClientBase: Report this error to https://github.com/ClickHouse/ClickHouse/issues\n```\n\n\nAFAICT it started happening in 25.1 (no crash in 24.12)\n",
  "hints_text": "",
  "created_at": "2025-03-25T12:44:34Z"
}