{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 10077,
  "instance_id": "ClickHouse__ClickHouse-10077",
  "issue_numbers": [
    "10056"
  ],
  "base_commit": "1e3ec9113a77d44772336050b6fe8fd7d41b43c0",
  "patch": "diff --git a/docs/en/engines/database_engines/mysql.md b/docs/en/engines/database_engines/mysql.md\nindex 678c174e1fb3..467a3aa032d3 100644\n--- a/docs/en/engines/database_engines/mysql.md\n+++ b/docs/en/engines/database_engines/mysql.md\n@@ -3,7 +3,7 @@ toc_priority: 30\n toc_title: MySQL\n ---\n \n-# Mysql {#mysql}\n+# MySQL {#mysql}\n \n Allows to connect to databases on a remote MySQL server and perform `INSERT` and `SELECT` queries to exchange data between ClickHouse and MySQL.\n \n@@ -19,7 +19,7 @@ You cannot perform the following queries:\n \n ``` sql\n CREATE DATABASE [IF NOT EXISTS] db_name [ON CLUSTER cluster]\n-ENGINE = MySQL('host:port', 'database', 'user', 'password')\n+ENGINE = MySQL('host:port', ['database' | database], 'user', 'password')\n ```\n \n **Engine Parameters**\ndiff --git a/docs/ru/database_engines/mysql.md b/docs/ru/database_engines/mysql.md\nindex 420ca3702974..45547407be6f 100644\n--- a/docs/ru/database_engines/mysql.md\n+++ b/docs/ru/database_engines/mysql.md\n@@ -6,8 +6,6 @@\n \n \u041d\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u043c\u044b\u0435 \u0432\u0438\u0434\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432:\n \n--   `ATTACH`/`DETACH`\n--   `DROP`\n -   `RENAME`\n -   `CREATE TABLE`\n -   `ALTER`\n@@ -16,7 +14,7 @@\n \n ``` sql\n CREATE DATABASE [IF NOT EXISTS] db_name [ON CLUSTER cluster]\n-ENGINE = MySQL('host:port', 'database', 'user', 'password')\n+ENGINE = MySQL('host:port', ['database' | database], 'user', 'password')\n ```\n \n **\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u0434\u0432\u0438\u0436\u043a\u0430**\ndiff --git a/docs/zh/engines/database_engines/mysql.md b/docs/zh/engines/database_engines/mysql.md\nindex 78844154bcec..80ff82ec2d34 100644\n--- a/docs/zh/engines/database_engines/mysql.md\n+++ b/docs/zh/engines/database_engines/mysql.md\n@@ -7,8 +7,6 @@ MySQL\u5f15\u64ce\u7528\u4e8e\u5c06\u8fdc\u7a0b\u7684MySQL\u670d\u52a1\u5668\u4e2d\u7684\u8868\u6620\u5c04\u5230ClickHouse\u4e2d\uff0c\u5e76\n \n \u4f46\u60a8\u65e0\u6cd5\u5bf9\u5176\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n \n--   `ATTACH`/`DETACH`\n--   `DROP`\n -   `RENAME`\n -   `CREATE TABLE`\n -   `ALTER`\n@@ -17,7 +15,7 @@ MySQL\u5f15\u64ce\u7528\u4e8e\u5c06\u8fdc\u7a0b\u7684MySQL\u670d\u52a1\u5668\u4e2d\u7684\u8868\u6620\u5c04\u5230ClickHouse\u4e2d\uff0c\u5e76\n \n ``` sql\n CREATE DATABASE [IF NOT EXISTS] db_name [ON CLUSTER cluster]\n-ENGINE = MySQL('host:port', 'database', 'user', 'password')\n+ENGINE = MySQL('host:port', ['database' | database], 'user', 'password')\n ```\n \n **MySQL\u6570\u636e\u5e93\u5f15\u64ce\u53c2\u6570**\ndiff --git a/src/Databases/DatabaseFactory.cpp b/src/Databases/DatabaseFactory.cpp\nindex 40e5682565d0..f1cea04dc29d 100644\n--- a/src/Databases/DatabaseFactory.cpp\n+++ b/src/Databases/DatabaseFactory.cpp\n@@ -4,6 +4,7 @@\n #include <Databases/DatabaseMemory.h>\n #include <Databases/DatabaseOrdinary.h>\n #include <Parsers/ASTLiteral.h>\n+#include <Parsers/ASTIdentifier.h>\n #include <Parsers/formatAST.h>\n #include <Parsers/ASTCreateQuery.h>\n #include <Parsers/ASTFunction.h>\n@@ -15,6 +16,7 @@\n #if USE_MYSQL\n \n #include <Databases/DatabaseMySQL.h>\n+#include <Interpreters/evaluateConstantExpression.h>\n \n #endif\n \n@@ -49,6 +51,15 @@ DatabasePtr DatabaseFactory::get(\n     }\n }\n \n+template <typename ValueType>\n+static inline ValueType safeGetLiteralValue(const ASTPtr &ast, const String &engine_name)\n+{\n+    if (!ast || !ast->as<ASTLiteral>())\n+        throw Exception(\"Database engine \" + engine_name + \" requested literal argument.\", ErrorCodes::BAD_ARGUMENTS);\n+\n+    return ast->as<ASTLiteral>()->value.safeGet<ValueType>();\n+}\n+\n DatabasePtr DatabaseFactory::getImpl(\n     const String & database_name, const String & metadata_path, const ASTStorage * engine_define, Context & context)\n {\n@@ -79,11 +90,14 @@ DatabasePtr DatabaseFactory::getImpl(\n             throw Exception(\"MySQL Database require mysql_hostname, mysql_database_name, mysql_username, mysql_password arguments.\",\n                             ErrorCodes::BAD_ARGUMENTS);\n \n-        const auto & arguments = engine->arguments->children;\n-        const auto & host_name_and_port = arguments[0]->as<ASTLiteral>()->value.safeGet<String>();\n-        const auto & database_name_in_mysql = arguments[1]->as<ASTLiteral>()->value.safeGet<String>();\n-        const auto & mysql_user_name = arguments[2]->as<ASTLiteral>()->value.safeGet<String>();\n-        const auto & mysql_user_password = arguments[3]->as<ASTLiteral>()->value.safeGet<String>();\n+\n+        ASTs & arguments = engine->arguments->children;\n+        arguments[1] = evaluateConstantExpressionOrIdentifierAsLiteral(arguments[1], context);\n+\n+        const auto & host_name_and_port = safeGetLiteralValue<String>(arguments[0], \"MySQL\");\n+        const auto & database_name_in_mysql = safeGetLiteralValue<String>(arguments[1], \"MySQL\");\n+        const auto & mysql_user_name = safeGetLiteralValue<String>(arguments[2], \"MySQL\");\n+        const auto & mysql_user_password = safeGetLiteralValue<String>(arguments[3], \"MySQL\");\n \n         try\n         {\n@@ -114,7 +128,7 @@ DatabasePtr DatabaseFactory::getImpl(\n \n         const auto & arguments = engine->arguments->children;\n \n-        const auto cache_expiration_time_seconds = arguments[0]->as<ASTLiteral>()->value.safeGet<UInt64>();\n+        const auto cache_expiration_time_seconds = safeGetLiteralValue<UInt64>(arguments[0], \"Lazy\");\n         return std::make_shared<DatabaseLazy>(database_name, metadata_path, cache_expiration_time_seconds, context);\n     }\n \n",
  "test_patch": "diff --git a/tests/integration/test_mysql_database_engine/test.py b/tests/integration/test_mysql_database_engine/test.py\nindex 86e0b9df5fd7..2791cc7b382f 100644\n--- a/tests/integration/test_mysql_database_engine/test.py\n+++ b/tests/integration/test_mysql_database_engine/test.py\n@@ -5,6 +5,7 @@\n import pytest\n \n from helpers.cluster import ClickHouseCluster\n+from helpers.client import QueryRuntimeException\n \n cluster = ClickHouseCluster(__file__)\n clickhouse_node = cluster.add_instance('node1', main_configs=['configs/remote_servers.xml'], with_mysql=True)\n@@ -92,7 +93,7 @@ def test_clickhouse_dml_for_mysql_database(started_cluster):\n     with contextlib.closing(MySQLNodeInstance('root', 'clickhouse', '127.0.0.1', port=3308)) as mysql_node:\n         mysql_node.query(\"CREATE DATABASE test_database DEFAULT CHARACTER SET 'utf8'\")\n         mysql_node.query('CREATE TABLE `test_database`.`test_table` ( `i``d` int(11) NOT NULL, PRIMARY KEY (`i``d`)) ENGINE=InnoDB;')\n-        clickhouse_node.query(\"CREATE DATABASE test_database ENGINE = MySQL('mysql1:3306', 'test_database', 'root', 'clickhouse')\")\n+        clickhouse_node.query(\"CREATE DATABASE test_database ENGINE = MySQL('mysql1:3306', test_database, 'root', 'clickhouse')\")\n \n         assert clickhouse_node.query(\"SELECT count() FROM `test_database`.`test_table`\").rstrip() == '0'\n         clickhouse_node.query(\"INSERT INTO `test_database`.`test_table`(`i\\`d`) select number from numbers(10000)\")\n@@ -116,7 +117,17 @@ def test_clickhouse_join_for_mysql_database(started_cluster):\n         clickhouse_node.query(\"CREATE TABLE default.t1_remote_mysql AS mysql('mysql1:3306','test','t1_mysql_local','root','clickhouse')\")\n         clickhouse_node.query(\"CREATE TABLE default.t2_remote_mysql AS mysql('mysql1:3306','test','t2_mysql_local','root','clickhouse')\")\n         assert clickhouse_node.query(\"SELECT s.pays \"\n-                              \"FROM default.t1_remote_mysql AS s \"\n-                              \"LEFT JOIN default.t1_remote_mysql AS s_ref \"\n-                              \"ON (s_ref.opco = s.opco AND s_ref.service = s.service)\") == ''\n+                                     \"FROM default.t1_remote_mysql AS s \"\n+                                     \"LEFT JOIN default.t1_remote_mysql AS s_ref \"\n+                                     \"ON (s_ref.opco = s.opco AND s_ref.service = s.service)\") == ''\n         mysql_node.query(\"DROP DATABASE test\")\n+\n+\n+def test_bad_arguments_for_mysql_database_engine(started_cluster):\n+    with contextlib.closing(MySQLNodeInstance('root', 'clickhouse', '127.0.0.1', port=3308)) as mysql_node:\n+        with pytest.raises(QueryRuntimeException) as exception:\n+            mysql_node.query(\"CREATE DATABASE IF NOT EXISTS test_bad_arguments DEFAULT CHARACTER SET 'utf8'\")\n+            clickhouse_node.query(\"CREATE DATABASE test_database ENGINE = MySQL('mysql1:3306', test_bad_arguments, root, 'clickhouse')\")\n+\n+        assert 'Database engine MySQL requested literal argument.' in str(exception.value)\n+        mysql_node.query(\"DROP DATABASE test_bad_arguments\")\n",
  "problem_statement": "CREATE DATABASE ENGINE = MySQL does not work\n**Describe the bug**\r\n```\r\nCREATE DATABASE conv_main ENGINE = MySQL('host:3306', conv_main, 'metrika', 'password')\r\n```\r\n\r\n```\r\n2020.04.06 04:14:34.359167 [ 172773 ] {905160b8-3bed-4129-ac2a-cd435384de4d} <Debug> executeQuery: (from [::1]:51104) CREATE DATABASE conv_main ENGINE = MySQL('host:3306', conv_main, 'metrika', 'password')\r\n2020.04.06 04:14:34.359259 [ 172773 ] {905160b8-3bed-4129-ac2a-cd435384de4d} <Trace> ContextAccess (default): Access granted: CREATE DATABASE ON conv_main.*\r\n2020.04.06 04:14:34.359588 [ 172049 ] {} <Trace> BaseDaemon: Received signal 11\r\n2020.04.06 04:14:34.359778 [ 175713 ] {} <Fatal> BaseDaemon: ########################################\r\n2020.04.06 04:14:34.359848 [ 175713 ] {} <Fatal> BaseDaemon: (version 20.4.1.1) (from thread 172773) (query_id: 905160b8-3bed-4129-ac2a-cd435384de4d) Received signal Segmentation fault (11).\r\n2020.04.06 04:14:34.359890 [ 175713 ] {} <Fatal> BaseDaemon: Address: 0x80 Access: read. Address not mapped to object.\r\n2020.04.06 04:14:34.359914 [ 175713 ] {} <Fatal> BaseDaemon: Stack trace: 0xcf5a0b6 0xcf5aa9a 0xcf51792 0xcf521c7 0xd46bf83 0xd46ed6d 0x8ff64d4 0x8ff73ec 0xe353807 0xe353c7b 0x104a40ce 0x1049f67c 0x7f73737cd6db 0x7f7373ea4a4f\r\n2020.04.06 04:14:34.360749 [ 175713 ] {} <Fatal> BaseDaemon: 3. /home/milovidov/ClickHouse/build_gcc9/../src/Core/Field.h:398: DB::DatabaseFactory::getImpl(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::ASTStorage const*, DB::Context&) @ 0xcf5a0b6 in /usr/bin/clickhouse\r\n2020.04.06 04:14:34.361626 [ 175713 ] {} <Fatal> BaseDaemon: 4. /home/milovidov/ClickHouse/build_gcc9/../src/Databases/DatabaseFactory.cpp:50: DB::DatabaseFactory::get(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::ASTStorage const*, DB::Context&) @ 0xcf5aa9a in /usr/bin/clickhouse\r\n2020.04.06 04:14:34.363393 [ 175713 ] {} <Fatal> BaseDaemon: 5. /home/milovidov/ClickHouse/build_gcc9/../contrib/libcxx/include/string:1426: DB::InterpreterCreateQuery::createDatabase(DB::ASTCreateQuery&) @ 0xcf51792 in /usr/bin/clickhouse\r\n2020.04.06 04:14:34.365126 [ 175713 ] {} <Fatal> BaseDaemon: 6. /home/milovidov/ClickHouse/build_gcc9/../src/Interpreters/InterpreterCreateQuery.cpp:722: DB::InterpreterCreateQuery::execute() @ 0xcf521c7 in /usr/bin/clickhouse\r\n2020.04.06 04:14:34.366016 [ 175713 ] {} <Fatal> BaseDaemon: 7. /home/milovidov/ClickHouse/build_gcc9/../src/Interpreters/executeQuery.cpp:333: DB::executeQueryImpl(char const*, char const*, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool, DB::ReadBuffer*, bool) @ 0xd46bf83 in /usr/bin/clickhouse\r\n2020.04.06 04:14:34.366907 [ 175713 ] {} <Fatal> BaseDaemon: 8. /home/milovidov/ClickHouse/build_gcc9/../src/Interpreters/executeQuery.cpp:578: DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool, bool) @ 0xd46ed6d in /usr/bin/clickhouse\r\n2020.04.06 04:14:34.367768 [ 175713 ] {} <Fatal> BaseDaemon: 9. /home/milovidov/ClickHouse/build_gcc9/../programs/server/TCPHandler.cpp:253: DB::TCPHandler::runImpl() @ 0x8ff64d4 in /usr/bin/clickhouse\r\n2020.04.06 04:14:34.368766 [ 175713 ] {} <Fatal> BaseDaemon: 10. /home/milovidov/ClickHouse/build_gcc9/../programs/server/TCPHandler.cpp:1243: DB::TCPHandler::run() @ 0x8ff73ec in /usr/bin/clickhouse\r\n2020.04.06 04:14:34.369547 [ 175713 ] {} <Fatal> BaseDaemon: 11. /home/milovidov/ClickHouse/build_gcc9/../contrib/poco/Net/src/TCPServerConnection.cpp:57: Poco::Net::TCPServerConnection::start() @ 0xe353807 in /usr/bin/clickhouse\r\n2020.04.06 04:14:34.370394 [ 175713 ] {} <Fatal> BaseDaemon: 12. /home/milovidov/ClickHouse/build_gcc9/../contrib/libcxx/include/atomic:856: Poco::Net::TCPServerDispatcher::run() @ 0xe353c7b in /usr/bin/clickhouse\r\n2020.04.06 04:14:34.371293 [ 175713 ] {} <Fatal> BaseDaemon: 13. /home/milovidov/ClickHouse/build_gcc9/../contrib/poco/Foundation/include/Poco/Mutex_POSIX.h:59: Poco::PooledThread::run() @ 0x104a40ce in /usr/bin/clickhouse\r\n2020.04.06 04:14:34.372109 [ 175713 ] {} <Fatal> BaseDaemon: 14. /home/milovidov/ClickHouse/build_gcc9/../contrib/poco/Foundation/include/Poco/AutoPtr.h:223: Poco::ThreadImpl::runnableEntry(void*) @ 0x1049f67c in /usr/bin/clickhouse\r\n2020.04.06 04:14:34.372149 [ 175713 ] {} <Fatal> BaseDaemon: 15. start_thread @ 0x76db in /lib/x86_64-linux-gnu/libpthread-2.27.so\r\n2020.04.06 04:14:34.372267 [ 175713 ] {} <Fatal> BaseDaemon: 16. /build/glibc_2.27-3ubuntu1yandex1/glibc-2.27/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:97: clone @ 0x121a4f in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.27.so\r\n```\n",
  "hints_text": "The reason is obvious. It does not process the case when database name is specified as identifier: `conv_main`.",
  "created_at": "2020-04-07T05:16:21Z"
}