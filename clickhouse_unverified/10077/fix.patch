diff --git a/docs/en/engines/database_engines/mysql.md b/docs/en/engines/database_engines/mysql.md
index 678c174e1fb3..467a3aa032d3 100644
--- a/docs/en/engines/database_engines/mysql.md
+++ b/docs/en/engines/database_engines/mysql.md
@@ -3,7 +3,7 @@ toc_priority: 30
 toc_title: MySQL
 ---
 
-# Mysql {#mysql}
+# MySQL {#mysql}
 
 Allows to connect to databases on a remote MySQL server and perform `INSERT` and `SELECT` queries to exchange data between ClickHouse and MySQL.
 
@@ -19,7 +19,7 @@ You cannot perform the following queries:
 
 ``` sql
 CREATE DATABASE [IF NOT EXISTS] db_name [ON CLUSTER cluster]
-ENGINE = MySQL('host:port', 'database', 'user', 'password')
+ENGINE = MySQL('host:port', ['database' | database], 'user', 'password')
 ```
 
 **Engine Parameters**
diff --git a/docs/ru/database_engines/mysql.md b/docs/ru/database_engines/mysql.md
index 420ca3702974..45547407be6f 100644
--- a/docs/ru/database_engines/mysql.md
+++ b/docs/ru/database_engines/mysql.md
@@ -6,8 +6,6 @@
 
 Не поддерживаемые виды запросов:
 
--   `ATTACH`/`DETACH`
--   `DROP`
 -   `RENAME`
 -   `CREATE TABLE`
 -   `ALTER`
@@ -16,7 +14,7 @@
 
 ``` sql
 CREATE DATABASE [IF NOT EXISTS] db_name [ON CLUSTER cluster]
-ENGINE = MySQL('host:port', 'database', 'user', 'password')
+ENGINE = MySQL('host:port', ['database' | database], 'user', 'password')
 ```
 
 **Параметры движка**
diff --git a/docs/zh/engines/database_engines/mysql.md b/docs/zh/engines/database_engines/mysql.md
index 78844154bcec..80ff82ec2d34 100644
--- a/docs/zh/engines/database_engines/mysql.md
+++ b/docs/zh/engines/database_engines/mysql.md
@@ -7,8 +7,6 @@ MySQL引擎用于将远程的MySQL服务器中的表映射到ClickHouse中，并
 
 但您无法对其执行以下操作：
 
--   `ATTACH`/`DETACH`
--   `DROP`
 -   `RENAME`
 -   `CREATE TABLE`
 -   `ALTER`
@@ -17,7 +15,7 @@ MySQL引擎用于将远程的MySQL服务器中的表映射到ClickHouse中，并
 
 ``` sql
 CREATE DATABASE [IF NOT EXISTS] db_name [ON CLUSTER cluster]
-ENGINE = MySQL('host:port', 'database', 'user', 'password')
+ENGINE = MySQL('host:port', ['database' | database], 'user', 'password')
 ```
 
 **MySQL数据库引擎参数**
diff --git a/src/Databases/DatabaseFactory.cpp b/src/Databases/DatabaseFactory.cpp
index 40e5682565d0..f1cea04dc29d 100644
--- a/src/Databases/DatabaseFactory.cpp
+++ b/src/Databases/DatabaseFactory.cpp
@@ -4,6 +4,7 @@
 #include <Databases/DatabaseMemory.h>
 #include <Databases/DatabaseOrdinary.h>
 #include <Parsers/ASTLiteral.h>
+#include <Parsers/ASTIdentifier.h>
 #include <Parsers/formatAST.h>
 #include <Parsers/ASTCreateQuery.h>
 #include <Parsers/ASTFunction.h>
@@ -15,6 +16,7 @@
 #if USE_MYSQL
 
 #include <Databases/DatabaseMySQL.h>
+#include <Interpreters/evaluateConstantExpression.h>
 
 #endif
 
@@ -49,6 +51,15 @@ DatabasePtr DatabaseFactory::get(
     }
 }
 
+template <typename ValueType>
+static inline ValueType safeGetLiteralValue(const ASTPtr &ast, const String &engine_name)
+{
+    if (!ast || !ast->as<ASTLiteral>())
+        throw Exception("Database engine " + engine_name + " requested literal argument.", ErrorCodes::BAD_ARGUMENTS);
+
+    return ast->as<ASTLiteral>()->value.safeGet<ValueType>();
+}
+
 DatabasePtr DatabaseFactory::getImpl(
     const String & database_name, const String & metadata_path, const ASTStorage * engine_define, Context & context)
 {
@@ -79,11 +90,14 @@ DatabasePtr DatabaseFactory::getImpl(
             throw Exception("MySQL Database require mysql_hostname, mysql_database_name, mysql_username, mysql_password arguments.",
                             ErrorCodes::BAD_ARGUMENTS);
 
-        const auto & arguments = engine->arguments->children;
-        const auto & host_name_and_port = arguments[0]->as<ASTLiteral>()->value.safeGet<String>();
-        const auto & database_name_in_mysql = arguments[1]->as<ASTLiteral>()->value.safeGet<String>();
-        const auto & mysql_user_name = arguments[2]->as<ASTLiteral>()->value.safeGet<String>();
-        const auto & mysql_user_password = arguments[3]->as<ASTLiteral>()->value.safeGet<String>();
+
+        ASTs & arguments = engine->arguments->children;
+        arguments[1] = evaluateConstantExpressionOrIdentifierAsLiteral(arguments[1], context);
+
+        const auto & host_name_and_port = safeGetLiteralValue<String>(arguments[0], "MySQL");
+        const auto & database_name_in_mysql = safeGetLiteralValue<String>(arguments[1], "MySQL");
+        const auto & mysql_user_name = safeGetLiteralValue<String>(arguments[2], "MySQL");
+        const auto & mysql_user_password = safeGetLiteralValue<String>(arguments[3], "MySQL");
 
         try
         {
@@ -114,7 +128,7 @@ DatabasePtr DatabaseFactory::getImpl(
 
         const auto & arguments = engine->arguments->children;
 
-        const auto cache_expiration_time_seconds = arguments[0]->as<ASTLiteral>()->value.safeGet<UInt64>();
+        const auto cache_expiration_time_seconds = safeGetLiteralValue<UInt64>(arguments[0], "Lazy");
         return std::make_shared<DatabaseLazy>(database_name, metadata_path, cache_expiration_time_seconds, context);
     }
 
