{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 14500,
  "instance_id": "ClickHouse__ClickHouse-14500",
  "issue_numbers": [
    "12460"
  ],
  "base_commit": "7c20aa2c621e31bcad50d4bc5eb2384d8a6286bd",
  "patch": "diff --git a/src/Processors/Formats/IOutputFormat.cpp b/src/Processors/Formats/IOutputFormat.cpp\nindex 76920c0fa533..d6f2cf75f58f 100644\n--- a/src/Processors/Formats/IOutputFormat.cpp\n+++ b/src/Processors/Formats/IOutputFormat.cpp\n@@ -44,6 +44,25 @@ IOutputFormat::Status IOutputFormat::prepare()\n     return Status::Finished;\n }\n \n+static Chunk prepareTotals(Chunk chunk)\n+{\n+    if (!chunk.hasRows())\n+        return {};\n+\n+    if (chunk.getNumRows() > 1)\n+    {\n+        /// This may happen if something like ARRAY JOIN was executed on totals.\n+        /// Skip rows except the first one.\n+        auto columns = chunk.detachColumns();\n+        for (auto & column : columns)\n+            column = column->cut(0, 1);\n+\n+        chunk.setColumns(std::move(columns), 1);\n+    }\n+\n+    return chunk;\n+}\n+\n void IOutputFormat::work()\n {\n     if (!prefix_written)\n@@ -70,7 +89,8 @@ void IOutputFormat::work()\n             consume(std::move(current_chunk));\n             break;\n         case Totals:\n-            consumeTotals(std::move(current_chunk));\n+            if (auto totals = prepareTotals(std::move(current_chunk)))\n+                consumeTotals(std::move(totals));\n             break;\n         case Extremes:\n             consumeExtremes(std::move(current_chunk));\ndiff --git a/src/Processors/Formats/Impl/TemplateBlockOutputFormat.cpp b/src/Processors/Formats/Impl/TemplateBlockOutputFormat.cpp\nindex 9adf631bfaac..9786943a79e3 100644\n--- a/src/Processors/Formats/Impl/TemplateBlockOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/TemplateBlockOutputFormat.cpp\n@@ -186,7 +186,7 @@ void TemplateBlockOutputFormat::finalize()\n         switch (static_cast<ResultsetPart>(*format.format_idx_to_column_idx[i]))\n         {\n             case ResultsetPart::Totals:\n-                if (!totals)\n+                if (!totals || !totals.hasRows())\n                     format.throwInvalidFormat(\"Cannot print totals for this request\", i);\n                 writeRow(totals, 0);\n                 break;\ndiff --git a/src/Processors/Transforms/TotalsHavingTransform.cpp b/src/Processors/Transforms/TotalsHavingTransform.cpp\nindex 0c82c99680d8..65043f65e1a6 100644\n--- a/src/Processors/Transforms/TotalsHavingTransform.cpp\n+++ b/src/Processors/Transforms/TotalsHavingTransform.cpp\n@@ -257,7 +257,8 @@ void TotalsHavingTransform::prepareTotals()\n     {\n         auto block = finalized_header.cloneWithColumns(totals.detachColumns());\n         expression->execute(block);\n-        totals = Chunk(block.getColumns(), 1);\n+        /// Note: after expression totals may have several rows if `arrayJoin` was used in expression.\n+        totals = Chunk(block.getColumns(), block.rows());\n     }\n }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01472_many_rows_in_totals.reference b/tests/queries/0_stateless/01472_many_rows_in_totals.reference\nnew file mode 100644\nindex 000000000000..6c91bf9f1047\n--- /dev/null\n+++ b/tests/queries/0_stateless/01472_many_rows_in_totals.reference\n@@ -0,0 +1,133 @@\n+\u250f\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n+\u2503 \u001b[1mg\u001b[0m \u2503 \u001b[1msum(number)\u001b[0m \u2503\n+\u2521\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n+\u2502 0 \u2502           2 \u2502\n+\u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n+\u2502 0 \u2502           2 \u2502\n+\u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n+\u2502 1 \u2502           4 \u2502\n+\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\n+Totals:\n+\u250f\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n+\u2503 \u001b[1mg\u001b[0m \u2503 \u001b[1msum(number)\u001b[0m \u2503\n+\u2521\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n+\u2502 0 \u2502           6 \u2502\n+\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+-\n+\u250f\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2513\n+\u2503 \u001b[1mg\u001b[0m \u2503 \u001b[1ms\u001b[0m \u2503\n+\u2521\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2529\n+\u2502 0 \u2502 2 \u2502\n+\u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\n+\u2502 0 \u2502 2 \u2502\n+\u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\n+\u2502 1 \u2502 4 \u2502\n+\u251c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\n+\u2502 1 \u2502 4 \u2502\n+\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n+\n+Totals:\n+\u250f\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2513\n+\u2503 \u001b[1mg\u001b[0m \u2503 \u001b[1ms\u001b[0m \u2503\n+\u2521\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2529\n+\u2502 0 \u2502 6 \u2502\n+\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\n+--\n+0\t2\n+0\t2\n+1\t4\n+\n+0\t6\n+-\n+0\t2\n+0\t2\n+1\t4\n+1\t4\n+\n+0\t6\n+--\n+{\n+\t\"meta\":\n+\t[\n+\t\t{\n+\t\t\t\"name\": \"g\",\n+\t\t\t\"type\": \"UInt64\"\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"sum(number)\",\n+\t\t\t\"type\": \"UInt64\"\n+\t\t}\n+\t],\n+\n+\t\"data\":\n+\t[\n+\t\t{\n+\t\t\t\"g\": \"0\",\n+\t\t\t\"sum(number)\": \"2\"\n+\t\t},\n+\t\t{\n+\t\t\t\"g\": \"0\",\n+\t\t\t\"sum(number)\": \"2\"\n+\t\t},\n+\t\t{\n+\t\t\t\"g\": \"1\",\n+\t\t\t\"sum(number)\": \"4\"\n+\t\t}\n+\t],\n+\n+\t\"totals\":\n+\t{\n+\t\t\"g\": \"0\",\n+\t\t\"sum(number)\": \"6\"\n+\t},\n+\n+\t\"rows\": 3,\n+\n+\t\"rows_before_limit_at_least\": 4\n+}\n+-\n+{\n+\t\"meta\":\n+\t[\n+\t\t{\n+\t\t\t\"name\": \"g\",\n+\t\t\t\"type\": \"UInt64\"\n+\t\t},\n+\t\t{\n+\t\t\t\"name\": \"s\",\n+\t\t\t\"type\": \"UInt64\"\n+\t\t}\n+\t],\n+\n+\t\"data\":\n+\t[\n+\t\t{\n+\t\t\t\"g\": \"0\",\n+\t\t\t\"s\": \"2\"\n+\t\t},\n+\t\t{\n+\t\t\t\"g\": \"0\",\n+\t\t\t\"s\": \"2\"\n+\t\t},\n+\t\t{\n+\t\t\t\"g\": \"1\",\n+\t\t\t\"s\": \"4\"\n+\t\t},\n+\t\t{\n+\t\t\t\"g\": \"1\",\n+\t\t\t\"s\": \"4\"\n+\t\t}\n+\t],\n+\n+\t\"totals\":\n+\t{\n+\t\t\"g\": \"0\",\n+\t\t\"s\": \"6\"\n+\t},\n+\n+\t\"rows\": 4,\n+\n+\t\"rows_before_limit_at_least\": 4\n+}\n+--\ndiff --git a/tests/queries/0_stateless/01472_many_rows_in_totals.sql b/tests/queries/0_stateless/01472_many_rows_in_totals.sql\nnew file mode 100644\nindex 000000000000..0be4e2c5c37b\n--- /dev/null\n+++ b/tests/queries/0_stateless/01472_many_rows_in_totals.sql\n@@ -0,0 +1,15 @@\n+set output_format_write_statistics = 0;\n+select g, sum(number) from numbers(4) group by bitAnd(number, 1) as g with totals having sum(number) <= arrayJoin([2, 4]) format Pretty;\n+select '-';\n+select g, s from (select g, sum(number) as s from numbers(4) group by bitAnd(number, 1) as g with totals) array join [1, 2] as a format Pretty;\n+select '--';\n+\n+select g, sum(number) from numbers(4) group by bitAnd(number, 1) as g with totals having sum(number) <= arrayJoin([2, 4]) format TSV;\n+select '-';\n+select g, s from (select g, sum(number) as s from numbers(4) group by bitAnd(number, 1) as g with totals) array join [1, 2] as a format TSV;\n+select '--';\n+\n+select g, sum(number) from numbers(4) group by bitAnd(number, 1) as g with totals having sum(number) <= arrayJoin([2, 4]) format JSON;\n+select '-';\n+select g, s from (select g, sum(number) as s from numbers(4) group by bitAnd(number, 1) as g with totals) array join [1, 2] as a format JSON;\n+select '--';\n",
  "problem_statement": "clickhouse-client: Got 2 in totals chunk, expected 1\n```\r\n/4/ :) SELECT arrayJoin([1, 2])  GROUP BY 1 WITH TOTALS FORMAT JSON\r\n\r\n{\r\n\t\"meta\":\r\n\t[\r\n\t\t{\r\n\t\t\t\"name\": \"arrayJoin([1, 2])\",\r\n\t\t\t\"type\": \"UInt8\"\r\n\t\t}\r\n\t],\r\n\r\n\t\"data\":\r\n\t[\r\n\t\t{\r\n\t\t\t\"arrayJoin([1, 2])\": 1\r\n\t\t},\r\n\t\t{\r\n\t\t\t\"arrayJoin([1, 2])\": 2\r\n\t\t}\u2190 Progress: 0.00 rows, 0.00 B (0.00 rows/s., 0.00 B/s.) Logical error: 'Got 2 in totals chunk, expected 1'.\r\nclickhouse-client: /home/akuzm/ch4/ch/src/Common/Exception.cpp:45: DB::Exception::Exception(const std::string &, int): Assertion `false' failed.\r\nAborted (core dumped)\r\n```\r\n\r\n\n",
  "hints_text": "Another variety, same error on the server:\r\n```\r\n/4/ :) SELECT anyLast(s) FROM (SELECT '1' s UNION ALL SELECT '2') GROUP BY 1 WITH TOTALS HAVING length(anyLast(s)) > arrayJoin([1, 1])\r\n\r\n\r\n2020.07.16 21:45:40.032881 [ 686655 ] {b63e2f9f-0b48-42b4-b650-84e0f447269b} <Error> : Logical error: 'Invalid number of rows in Chunk column String: expected 1, got 2'.\r\nclickhouse-server: /home/akuzm/ch4/ch/src/Common/Exception.cpp:45: DB::Exception::Exception(const std::string &, int): Assertion `false' failed.\r\n2020.07.16 21:45:40.033375 [ 686580 ] {} <Trace> BaseDaemon: Received signal 6\r\n2020.07.16 21:45:40.033828 [ 686716 ] {} <Fatal> BaseDaemon: ########################################\r\n2020.07.16 21:45:40.034457 [ 686716 ] {} <Fatal> BaseDaemon: (version 20.7.1.1, build id: 21B0DCC47427FD8E) (from thread 686655) (query_id: b63e2f9f-0b48-42b4-b650-84e0f447269b) Received signal Aborted (6)\r\n2020.07.16 21:45:40.034659 [ 686716 ] {} <Fatal> BaseDaemon: \r\n2020.07.16 21:45:40.034933 [ 686716 ] {} <Fatal> BaseDaemon: Stack trace: 0x7f58f867a18b 0x7f58f8659859 0x7f58f8659729 0x7f58f866af36 0x7f58fc5a63a5 0x7f58e7f6c313 0x7f58e7f6c111 0x7f58e750e938 0x7f58e750e6aa 0x7f58e7dbb4cc 0x7f58e7dbb440 0x7f58e7dbb3fd 0x7f58e7dbb3ad 0x7f58e7dbb37d 0x7f58e7dba4ce 0x7f58fcdc85c5 0x7f58fcdc8565 0x7f58e7db8b05 0x7f58e7db9329 0x7f58e7dbd749 0x7f58e7dbd6ad 0x7f58e7dbd671 0x7f58e7dbd642 0x7f58e7dbd53c 0x7f58e7dbd4cd 0x7f58e7dbd47d 0x7f58e7dbd44d 0x7f58e7dbc5ee\r\n2020.07.16 21:45:40.035293 [ 686716 ] {} <Fatal> BaseDaemon: 4. /build/glibc-YYA7BZ/glibc-2.31/signal/../sysdeps/unix/sysv/linux/raise.c:51: raise @ 0x4618b in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n2020.07.16 21:45:40.035457 [ 686716 ] {} <Fatal> BaseDaemon: 5. /build/glibc-YYA7BZ/glibc-2.31/stdlib/abort.c:81: abort @ 0x25859 in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n2020.07.16 21:45:40.035674 [ 686716 ] {} <Fatal> BaseDaemon: 6. /build/glibc-YYA7BZ/glibc-2.31/intl/loadmsgcat.c:509: _nl_load_domain.cold @ 0x25729 in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n2020.07.16 21:45:40.035946 [ 686716 ] {} <Fatal> BaseDaemon: 7. ? @ 0x36f36 in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n2020.07.16 21:45:40.036243 [ 686716 ] {} <Fatal> BaseDaemon: 8. /home/akuzm/ch4/ch/src/Common/Exception.cpp:48: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x2a13a5 in /home/akuzm/ch4/build-clang10/src/libclickhouse_common_iod.so\r\n2020.07.16 21:45:40.036525 [ 686716 ] {} <Fatal> BaseDaemon: 9. /home/akuzm/ch4/ch/src/Processors/Chunk.cpp:70: DB::Chunk::checkNumRowsIsConsistent() @ 0x15f313 in /home/akuzm/ch4/build-clang10/src/libclickhouse_processorsd.so\r\n2020.07.16 21:45:40.036811 [ 686716 ] {} <Fatal> BaseDaemon: 10. /home/akuzm/ch4/ch/src/Processors/Chunk.cpp:16: DB::Chunk::Chunk(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > >, unsigned long) @ 0x15f111 in /home/akuzm/ch4/build-clang10/src/libclickhouse_processorsd.so\r\n2020.07.16 21:45:40.037863 [ 686716 ] {} <Fatal> BaseDaemon: 11. /home/akuzm/ch4/ch/src/Processors/Transforms/TotalsHavingTransform.cpp:260: DB::TotalsHavingTransform::prepareTotals() @ 0x2b9938 in /home/akuzm/ch4/build-clang10/src/libclickhouse_processors_transformsd.so\r\n2020.07.16 21:45:40.038620 [ 686716 ] {} <Fatal> BaseDaemon: 12. /home/akuzm/ch4/ch/src/Processors/Transforms/TotalsHavingTransform.cpp:115: DB::TotalsHavingTransform::work() @ 0x2b96aa in /home/akuzm/ch4/build-clang10/src/libclickhouse_processors_transformsd.so\r\n2020.07.16 21:45:40.039195 [ 686716 ] {} <Fatal> BaseDaemon: 13. /home/akuzm/ch4/ch/src/Processors/Executors/PipelineExecutor.cpp:155: DB::executeJob(DB::IProcessor*) @ 0x13d4cc in /home/akuzm/ch4/build-clang10/src/libclickhouse_processors_executorsd.so\r\n2020.07.16 21:45:40.039571 [ 686716 ] {} <Fatal> BaseDaemon: 14. /home/akuzm/ch4/ch/src/Processors/Executors/PipelineExecutor.cpp:172: DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1::operator()() const @ 0x13d440 in /home/akuzm/ch4/build-clang10/src/libclickhouse_processors_executorsd.so\r\n2020.07.16 21:45:40.039940 [ 686716 ] {} <Fatal> BaseDaemon: 15. /home/akuzm/ch4/ch/contrib/libcxx/include/type_traits:3519: decltype(std::__1::forward<DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1&>(fp)()) std::__1::__invoke<DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1&>(DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1&) @ 0x13d3fd in /home/akuzm/ch4/build-clang10/src/libclickhouse_processors_executorsd.so\r\n2020.07.16 21:45:40.040315 [ 686716 ] {} <Fatal> BaseDaemon: 16. /home/akuzm/ch4/ch/contrib/libcxx/include/__functional_base:349: void std::__1::__invoke_void_return_wrapper<void>::__call<DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1&>(DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1&) @ 0x13d3ad in /home/akuzm/ch4/build-clang10/src/libclickhouse_processors_executorsd.so\r\n2020.07.16 21:45:40.040681 [ 686716 ] {} <Fatal> BaseDaemon: 17. /home/akuzm/ch4/ch/contrib/libcxx/include/functional:1540: std::__1::__function::__alloc_func<DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1, std::__1::allocator<DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1>, void ()>::operator()() @ 0x13d37d in /home/akuzm/ch4/build-clang10/src/libclickhouse_processors_executorsd.so\r\n2020.07.16 21:45:40.040994 [ 686716 ] {} <Fatal> BaseDaemon: 18. /home/akuzm/ch4/ch/contrib/libcxx/include/functional:1714: std::__1::__function::__func<DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1, std::__1::allocator<DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1>, void ()>::operator()() @ 0x13c4ce in /home/akuzm/ch4/build-clang10/src/libclickhouse_processors_executorsd.so\r\n2020.07.16 21:45:40.042669 [ 686716 ] {} <Fatal> BaseDaemon: 19. /home/akuzm/ch4/ch/contrib/libcxx/include/functional:1867: std::__1::__function::__value_func<void ()>::operator()() const @ 0x1c85c5 in /home/akuzm/ch4/build-clang10/programs/server/libclickhouse-server-libd.so\r\n2020.07.16 21:45:40.044566 [ 686716 ] {} <Fatal> BaseDaemon: 20. /home/akuzm/ch4/ch/contrib/libcxx/include/functional:2473: std::__1::function<void ()>::operator()() const @ 0x1c8565 in /home/akuzm/ch4/build-clang10/programs/server/libclickhouse-server-libd.so\r\n2020.07.16 21:45:40.045130 [ 686716 ] {} <Fatal> BaseDaemon: 21. /home/akuzm/ch4/ch/src/Processors/Executors/PipelineExecutor.cpp:633: DB::PipelineExecutor::executeStepImpl(unsigned long, unsigned long, std::__1::atomic<bool>*) @ 0x13ab05 in /home/akuzm/ch4/build-clang10/src/libclickhouse_processors_executorsd.so\r\n2020.07.16 21:45:40.045388 [ 686716 ] {} <Fatal> BaseDaemon: 22. /home/akuzm/ch4/ch/src/Processors/Executors/PipelineExecutor.cpp:546: DB::PipelineExecutor::executeSingleThread(unsigned long, unsigned long) @ 0x13b329 in /home/akuzm/ch4/build-clang10/src/libclickhouse_processors_executorsd.so\r\n2020.07.16 21:45:40.045804 [ 686716 ] {} <Fatal> BaseDaemon: 23. /home/akuzm/ch4/ch/src/Processors/Executors/PipelineExecutor.cpp:803: DB::PipelineExecutor::executeImpl(unsigned long)::$_5::operator()() const @ 0x13f749 in /home/akuzm/ch4/build-clang10/src/libclickhouse_processors_executorsd.so\r\n2020.07.16 21:45:40.046167 [ 686716 ] {} <Fatal> BaseDaemon: 24. /home/akuzm/ch4/ch/contrib/libcxx/include/type_traits:3525: decltype(std::__1::forward<DB::PipelineExecutor::executeImpl(unsigned long)::$_5 const&>(fp)()) std::__1::__invoke_constexpr<DB::PipelineExecutor::executeImpl(unsigned long)::$_5 const&>(DB::PipelineExecutor::executeImpl(unsigned long)::$_5 const&) @ 0x13f6ad in /home/akuzm/ch4/build-clang10/src/libclickhouse_processors_executorsd.so\r\n2020.07.16 21:45:40.046513 [ 686716 ] {} <Fatal> BaseDaemon: 25. /home/akuzm/ch4/ch/contrib/libcxx/include/tuple:1415: decltype(auto) std::__1::__apply_tuple_impl<DB::PipelineExecutor::executeImpl(unsigned long)::$_5 const&, std::__1::tuple<> const&>(DB::PipelineExecutor::executeImpl(unsigned long)::$_5 const&, std::__1::tuple<> const&, std::__1::__tuple_indices<>) @ 0x13f671 in /home/akuzm/ch4/build-clang10/src/libclickhouse_processors_executorsd.so\r\n2020.07.16 21:45:40.046859 [ 686716 ] {} <Fatal> BaseDaemon: 26. /home/akuzm/ch4/ch/contrib/libcxx/include/tuple:1424: decltype(auto) std::__1::apply<DB::PipelineExecutor::executeImpl(unsigned long)::$_5 const&, std::__1::tuple<> const&>(DB::PipelineExecutor::executeImpl(unsigned long)::$_5 const&, std::__1::tuple<> const&) @ 0x13f642 in /home/akuzm/ch4/build-clang10/src/libclickhouse_processors_executorsd.so\r\n2020.07.16 21:45:40.047204 [ 686716 ] {} <Fatal> BaseDaemon: 27. /home/akuzm/ch4/ch/src/Common/ThreadPool.h:168: ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PipelineExecutor::executeImpl(unsigned long)::$_5>(DB::PipelineExecutor::executeImpl(unsigned long)::$_5&&)::'lambda'()::operator()() const @ 0x13f53c in /home/akuzm/ch4/build-clang10/src/libclickhouse_processors_executorsd.so\r\n2020.07.16 21:45:40.047544 [ 686716 ] {} <Fatal> BaseDaemon: 28. /home/akuzm/ch4/ch/contrib/libcxx/include/type_traits:3519: decltype(std::__1::forward<DB::PipelineExecutor::executeImpl(unsigned long)::$_5>(fp)()) std::__1::__invoke<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PipelineExecutor::executeImpl(unsigned long)::$_5>(DB::PipelineExecutor::executeImpl(unsigned long)::$_5&&)::'lambda'()&>(DB::PipelineExecutor::executeImpl(unsigned long)::$_5&&) @ 0x13f4cd in /home/akuzm/ch4/build-clang10/src/libclickhouse_processors_executorsd.so\r\n2020.07.16 21:45:40.047935 [ 686716 ] {} <Fatal> BaseDaemon: 29. /home/akuzm/ch4/ch/contrib/libcxx/include/__functional_base:349: void std::__1::__invoke_void_return_wrapper<void>::__call<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PipelineExecutor::executeImpl(unsigned long)::$_5>(DB::PipelineExecutor::executeImpl(unsigned long)::$_5&&)::'lambda'()&>(DB::PipelineExecutor::executeImpl(unsigned long)::$_5&&...) @ 0x13f47d in /home/akuzm/ch4/build-clang10/src/libclickhouse_processors_executorsd.so\r\n2020.07.16 21:45:40.048278 [ 686716 ] {} <Fatal> BaseDaemon: 30. /home/akuzm/ch4/ch/contrib/libcxx/include/functional:1540: std::__1::__function::__alloc_func<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PipelineExecutor::executeImpl(unsigned long)::$_5>(DB::PipelineExecutor::executeImpl(unsigned long)::$_5&&)::'lambda'(), std::__1::allocator<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PipelineExecutor::executeImpl(unsigned long)::$_5>(DB::PipelineExecutor::executeImpl(unsigned long)::$_5&&)::'lambda'()>, void ()>::operator()() @ 0x13f44d in /home/akuzm/ch4/build-clang10/src/libclickhouse_processors_executorsd.so\r\n2020.07.16 21:45:40.048606 [ 686716 ] {} <Fatal> BaseDaemon: 31. /home/akuzm/ch4/ch/contrib/libcxx/include/functional:1714: std::__1::__function::__func<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PipelineExecutor::executeImpl(unsigned long)::$_5>(DB::PipelineExecutor::executeImpl(unsigned long)::$_5&&)::'lambda'(), std::__1::allocator<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PipelineExecutor::executeImpl(unsigned long)::$_5>(DB::PipelineExecutor::executeImpl(unsigned long)::$_5&&)::'lambda'()>, void ()>::operator()() @ 0x13e5ee in /home/akuzm/ch4/build-clang10/src/libclickhouse_processors_executorsd.so\r\n```\n>@alexey-milovidov alexey-milovidov assigned KochetovNicolai on Aug 2\r\n\r\n@alexey-milovidov I will close mine #13625 (anyway for now there is only test)",
  "created_at": "2020-09-04T16:34:24Z"
}