diff --git a/src/Processors/Formats/IOutputFormat.cpp b/src/Processors/Formats/IOutputFormat.cpp
index 76920c0fa533..d6f2cf75f58f 100644
--- a/src/Processors/Formats/IOutputFormat.cpp
+++ b/src/Processors/Formats/IOutputFormat.cpp
@@ -44,6 +44,25 @@ IOutputFormat::Status IOutputFormat::prepare()
     return Status::Finished;
 }
 
+static Chunk prepareTotals(Chunk chunk)
+{
+    if (!chunk.hasRows())
+        return {};
+
+    if (chunk.getNumRows() > 1)
+    {
+        /// This may happen if something like ARRAY JOIN was executed on totals.
+        /// Skip rows except the first one.
+        auto columns = chunk.detachColumns();
+        for (auto & column : columns)
+            column = column->cut(0, 1);
+
+        chunk.setColumns(std::move(columns), 1);
+    }
+
+    return chunk;
+}
+
 void IOutputFormat::work()
 {
     if (!prefix_written)
@@ -70,7 +89,8 @@ void IOutputFormat::work()
             consume(std::move(current_chunk));
             break;
         case Totals:
-            consumeTotals(std::move(current_chunk));
+            if (auto totals = prepareTotals(std::move(current_chunk)))
+                consumeTotals(std::move(totals));
             break;
         case Extremes:
             consumeExtremes(std::move(current_chunk));
diff --git a/src/Processors/Formats/Impl/TemplateBlockOutputFormat.cpp b/src/Processors/Formats/Impl/TemplateBlockOutputFormat.cpp
index 9adf631bfaac..9786943a79e3 100644
--- a/src/Processors/Formats/Impl/TemplateBlockOutputFormat.cpp
+++ b/src/Processors/Formats/Impl/TemplateBlockOutputFormat.cpp
@@ -186,7 +186,7 @@ void TemplateBlockOutputFormat::finalize()
         switch (static_cast<ResultsetPart>(*format.format_idx_to_column_idx[i]))
         {
             case ResultsetPart::Totals:
-                if (!totals)
+                if (!totals || !totals.hasRows())
                     format.throwInvalidFormat("Cannot print totals for this request", i);
                 writeRow(totals, 0);
                 break;
diff --git a/src/Processors/Transforms/TotalsHavingTransform.cpp b/src/Processors/Transforms/TotalsHavingTransform.cpp
index 0c82c99680d8..65043f65e1a6 100644
--- a/src/Processors/Transforms/TotalsHavingTransform.cpp
+++ b/src/Processors/Transforms/TotalsHavingTransform.cpp
@@ -257,7 +257,8 @@ void TotalsHavingTransform::prepareTotals()
     {
         auto block = finalized_header.cloneWithColumns(totals.detachColumns());
         expression->execute(block);
-        totals = Chunk(block.getColumns(), 1);
+        /// Note: after expression totals may have several rows if `arrayJoin` was used in expression.
+        totals = Chunk(block.getColumns(), block.rows());
     }
 }
 
