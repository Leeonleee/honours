{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 14609,
  "instance_id": "ClickHouse__ClickHouse-14609",
  "issue_numbers": [
    "11138"
  ],
  "base_commit": "87b3984d1776545fa3bd05ec23317d556ef4bcfd",
  "patch": "diff --git a/cmake/warnings.cmake b/cmake/warnings.cmake\nindex 2f78dc340795..6b26b9b95a5f 100644\n--- a/cmake/warnings.cmake\n+++ b/cmake/warnings.cmake\n@@ -23,7 +23,7 @@ option (WEVERYTHING \"Enables -Weverything option with some exceptions. This is i\n # Control maximum size of stack frames. It can be important if the code is run in fibers with small stack size.\n # Only in release build because debug has too large stack frames.\n if ((NOT CMAKE_BUILD_TYPE_UC STREQUAL \"DEBUG\") AND (NOT SANITIZE))\n-    add_warning(frame-larger-than=16384)\n+    add_warning(frame-larger-than=32768)\n endif ()\n \n if (COMPILER_CLANG)\n@@ -169,9 +169,16 @@ elseif (COMPILER_GCC)\n     # Warn if vector operation is not implemented via SIMD capabilities of the architecture\n     add_cxx_compile_options(-Wvector-operation-performance)\n \n-    # XXX: gcc10 stuck with this option while compiling GatherUtils code\n-    # (anyway there are builds with clang, that will warn)\n     if (CMAKE_CXX_COMPILER_VERSION VERSION_GREATER_EQUAL 10)\n+        # XXX: gcc10 stuck with this option while compiling GatherUtils code\n+        # (anyway there are builds with clang, that will warn)\n         add_cxx_compile_options(-Wno-sequence-point)\n+        # XXX: gcc10 false positive with this warning in MergeTreePartition.cpp\n+        #     inlined from 'void writeHexByteLowercase(UInt8, void*)' at ../src/Common/hex.h:39:11,\n+        #     inlined from 'DB::String DB::MergeTreePartition::getID(const DB::Block&) const' at ../src/Storages/MergeTree/MergeTreePartition.cpp:85:30:\n+        #     ../contrib/libc-headers/x86_64-linux-gnu/bits/string_fortified.h:34:33: error: writing 2 bytes into a region of size 0 [-Werror=stringop-overflow=]\n+        #     34 |   return __builtin___memcpy_chk (__dest, __src, __len, __bos0 (__dest));\n+        # For some reason (bug in gcc?) macro 'GCC diagnostic ignored \"-Wstringop-overflow\"' doesn't help.\n+        add_cxx_compile_options(-Wno-stringop-overflow)\n     endif()\n endif ()\ndiff --git a/contrib/llvm b/contrib/llvm\nindex 3d6c7e916760..8f24d507c1cf 160000\n--- a/contrib/llvm\n+++ b/contrib/llvm\n@@ -1,1 +1,1 @@\n-Subproject commit 3d6c7e916760b395908f28a1c885c8334d4fa98b\n+Subproject commit 8f24d507c1cfeec66d27f48fe74518fd278e2d25\ndiff --git a/docker/packager/binary/Dockerfile b/docker/packager/binary/Dockerfile\nindex 45c35c2e0f34..03bb3b5aefa3 100644\n--- a/docker/packager/binary/Dockerfile\n+++ b/docker/packager/binary/Dockerfile\n@@ -32,8 +32,6 @@ RUN apt-get update \\\n         curl \\\n         gcc-9 \\\n         g++-9 \\\n-        gcc-10 \\\n-        g++-10 \\\n         llvm-${LLVM_VERSION} \\\n         clang-${LLVM_VERSION} \\\n         lld-${LLVM_VERSION} \\\n@@ -93,5 +91,16 @@ RUN wget -nv \"https://developer.arm.com/-/media/Files/downloads/gnu-a/8.3-2019.0\n # Download toolchain for FreeBSD 11.3\n RUN wget -nv https://clickhouse-datasets.s3.yandex.net/toolchains/toolchains/freebsd-11.3-toolchain.tar.xz\n \n+# NOTE: For some reason we have outdated version of gcc-10 in ubuntu 20.04 stable.\n+# Current workaround is to use latest version proposed repo. Remove as soon as\n+# gcc-10.2 appear in stable repo.\n+RUN echo 'deb http://archive.ubuntu.com/ubuntu/ focal-proposed restricted main multiverse universe' > /etc/apt/sources.list.d/proposed-repositories.list\n+\n+RUN apt-get update \\\n+    && apt-get install gcc-10 g++-10 --yes\n+\n+RUN rm /etc/apt/sources.list.d/proposed-repositories.list && apt-get update\n+\n+\n COPY build.sh /\n CMD [\"/bin/bash\", \"/build.sh\"]\ndiff --git a/docker/packager/deb/Dockerfile b/docker/packager/deb/Dockerfile\nindex 87f4582f8e25..a3c87f13fe44 100644\n--- a/docker/packager/deb/Dockerfile\n+++ b/docker/packager/deb/Dockerfile\n@@ -42,8 +42,6 @@ RUN  export CODENAME=\"$(lsb_release --codename --short | tr 'A-Z' 'a-z')\" \\\n # Libraries from OS are only needed to test the \"unbundled\" build (this is not used in production).\n RUN apt-get update \\\n     && apt-get install \\\n-        gcc-10 \\\n-        g++-10 \\\n         gcc-9 \\\n         g++-9 \\\n         clang-11 \\\n@@ -75,6 +73,16 @@ RUN apt-get update \\\n         pigz \\\n         --yes --no-install-recommends\n \n+# NOTE: For some reason we have outdated version of gcc-10 in ubuntu 20.04 stable.\n+# Current workaround is to use latest version proposed repo. Remove as soon as\n+# gcc-10.2 appear in stable repo.\n+RUN echo 'deb http://archive.ubuntu.com/ubuntu/ focal-proposed restricted main multiverse universe' > /etc/apt/sources.list.d/proposed-repositories.list\n+\n+RUN apt-get update \\\n+    && apt-get install gcc-10 g++-10 --yes --no-install-recommends\n+\n+RUN rm /etc/apt/sources.list.d/proposed-repositories.list && apt-get update\n+\n # This symlink required by gcc to find lld compiler\n RUN ln -s /usr/bin/lld-${LLVM_VERSION} /usr/bin/ld.lld\n \ndiff --git a/docker/packager/packager b/docker/packager/packager\nindex 5874bedd17a0..909f20acd6d2 100755\n--- a/docker/packager/packager\n+++ b/docker/packager/packager\n@@ -93,7 +93,7 @@ def parse_env_variables(build_type, compiler, sanitizer, package_type, image_typ\n \n     cxx = cc.replace('gcc', 'g++').replace('clang', 'clang++')\n \n-    if image_type == \"deb\":\n+    if image_type == \"deb\" or image_type == \"unbundled\":\n         result.append(\"DEB_CC={}\".format(cc))\n         result.append(\"DEB_CXX={}\".format(cxx))\n     elif image_type == \"binary\":\ndiff --git a/src/Core/MultiEnum.h b/src/Core/MultiEnum.h\nindex 748550a87796..ddfc5b13e86c 100644\n--- a/src/Core/MultiEnum.h\n+++ b/src/Core/MultiEnum.h\n@@ -83,13 +83,13 @@ struct MultiEnum\n     template <typename ValueType, typename = std::enable_if_t<std::is_convertible_v<ValueType, StorageType>>>\n     friend bool operator==(ValueType left, MultiEnum right)\n     {\n-        return right == left;\n+        return right.operator==(left);\n     }\n \n     template <typename L>\n     friend bool operator!=(L left, MultiEnum right)\n     {\n-        return !(right == left);\n+        return !(right.operator==(left));\n     }\n \n private:\ndiff --git a/src/Functions/negate.cpp b/src/Functions/negate.cpp\nindex 39ca434ea89a..de3995927d3e 100644\n--- a/src/Functions/negate.cpp\n+++ b/src/Functions/negate.cpp\n@@ -13,7 +13,14 @@ struct NegateImpl\n \n     static inline NO_SANITIZE_UNDEFINED ResultType apply(A a)\n     {\n+#if defined (__GNUC__) && __GNUC__ >= 10\n+    #pragma GCC diagnostic push\n+    #pragma GCC diagnostic ignored \"-Wvector-operation-performance\"\n+#endif\n         return -static_cast<ResultType>(a);\n+#if defined (__GNUC__) && __GNUC__ >= 10\n+    #pragma GCC diagnostic pop\n+#endif\n     }\n \n #if USE_EMBEDDED_COMPILER\n",
  "test_patch": "diff --git a/tests/ci/ci_config.json b/tests/ci/ci_config.json\nindex 44e9df492164..504b554029b3 100644\n--- a/tests/ci/ci_config.json\n+++ b/tests/ci/ci_config.json\n@@ -1,7 +1,7 @@\n {\n     \"build_config\": [\n         {\n-            \"compiler\": \"gcc-9\",\n+            \"compiler\": \"gcc-10\",\n             \"build-type\": \"\",\n             \"sanitizer\": \"\",\n             \"package-type\": \"deb\",\n@@ -12,7 +12,7 @@\n             \"with_coverage\": false\n         },\n         {\n-            \"compiler\": \"gcc-9\",\n+            \"compiler\": \"gcc-10\",\n             \"build-type\": \"\",\n             \"sanitizer\": \"\",\n             \"package-type\": \"performance\",\n@@ -22,7 +22,7 @@\n             \"with_coverage\": false\n         },\n         {\n-            \"compiler\": \"gcc-9\",\n+            \"compiler\": \"gcc-10\",\n             \"build-type\": \"\",\n             \"sanitizer\": \"\",\n             \"package-type\": \"binary\",\n@@ -227,7 +227,7 @@\n         },\n         \"Functional stateful tests (release)\": {\n             \"required_build_properties\": {\n-                \"compiler\": \"gcc-9\",\n+                \"compiler\": \"gcc-10\",\n                 \"package_type\": \"deb\",\n                 \"build_type\": \"relwithdebuginfo\",\n                 \"sanitizer\": \"none\",\n@@ -239,7 +239,7 @@\n         },\n         \"Functional stateful tests (release, DatabaseAtomic)\": {\n             \"required_build_properties\": {\n-                \"compiler\": \"gcc-9\",\n+                \"compiler\": \"gcc-10\",\n                 \"package_type\": \"deb\",\n                 \"build_type\": \"relwithdebuginfo\",\n                 \"sanitizer\": \"none\",\n@@ -311,7 +311,7 @@\n         },\n         \"Functional stateless tests (release)\": {\n             \"required_build_properties\": {\n-                \"compiler\": \"gcc-9\",\n+                \"compiler\": \"gcc-10\",\n                 \"package_type\": \"deb\",\n                 \"build_type\": \"relwithdebuginfo\",\n                 \"sanitizer\": \"none\",\n@@ -335,7 +335,7 @@\n         },\n         \"Functional stateless tests (release, polymorphic parts enabled)\": {\n             \"required_build_properties\": {\n-                \"compiler\": \"gcc-9\",\n+                \"compiler\": \"gcc-10\",\n                 \"package_type\": \"deb\",\n                 \"build_type\": \"relwithdebuginfo\",\n                 \"sanitizer\": \"none\",\n@@ -347,7 +347,7 @@\n         },\n         \"Functional stateless tests (release, DatabaseAtomic)\": {\n             \"required_build_properties\": {\n-                \"compiler\": \"gcc-9\",\n+                \"compiler\": \"gcc-10\",\n                 \"package_type\": \"deb\",\n                 \"build_type\": \"relwithdebuginfo\",\n                 \"sanitizer\": \"none\",\n@@ -443,7 +443,7 @@\n         },\n         \"Compatibility check\": {\n             \"required_build_properties\": {\n-                \"compiler\": \"gcc-9\",\n+                \"compiler\": \"gcc-10\",\n                 \"package_type\": \"deb\",\n                 \"build_type\": \"relwithdebuginfo\",\n                 \"sanitizer\": \"none\",\n@@ -467,7 +467,7 @@\n         },\n         \"Testflows check\": {\n             \"required_build_properties\": {\n-                \"compiler\": \"gcc-9\",\n+                \"compiler\": \"gcc-10\",\n                 \"package_type\": \"deb\",\n                 \"build_type\": \"relwithdebuginfo\",\n                 \"sanitizer\": \"none\",\n@@ -479,7 +479,7 @@\n         },\n         \"Unit tests release gcc\": {\n             \"required_build_properties\": {\n-                \"compiler\": \"gcc-9\",\n+                \"compiler\": \"gcc-10\",\n                 \"package_type\": \"binary\",\n                 \"build_type\": \"relwithdebuginfo\",\n                 \"sanitizer\": \"none\",\n",
  "problem_statement": "Add gcc-10 to CI.\nIt was released and now we have to start support it.\n",
  "hints_text": "https://launchpad.net/~ubuntu-toolchain-r/+archive/ubuntu/test\r\n\r\nStatus: building (3 days ago).",
  "created_at": "2020-09-09T07:11:15Z"
}