diff --git a/tests/queries/0_stateless/02911_support_alias_column_in_indices.reference b/tests/queries/0_stateless/02911_support_alias_column_in_indices.reference
new file mode 100644
index 000000000000..883966ce6b5e
--- /dev/null
+++ b/tests/queries/0_stateless/02911_support_alias_column_in_indices.reference
@@ -0,0 +1,55 @@
+Expression ((Projection + Before ORDER BY))
+  Filter (WHERE)
+    ReadFromMergeTree (02911_support_alias_column_in_indices.test1)
+    Indexes:
+      PrimaryKey
+        Keys: 
+          c
+        Condition: (plus(c, 1) in [11, +Inf))
+        Parts: 1/2
+        Granules: 1/2
+      Skip
+        Name: i
+        Description: minmax GRANULARITY 1
+        Parts: 1/1
+        Granules: 1/1
+Expression ((Project names + Projection))
+  Filter ((WHERE + Change column names to column identifiers))
+    ReadFromMergeTree (02911_support_alias_column_in_indices.test1)
+    Indexes:
+      PrimaryKey
+        Keys: 
+          c
+        Condition: (_CAST(plus(c, \'UInt64\'), 1) in [11, +Inf))
+        Parts: 1/2
+        Granules: 1/2
+      Skip
+        Name: i
+        Description: minmax GRANULARITY 1
+        Parts: 1/1
+        Granules: 1/1
+Expression ((Projection + Before ORDER BY))
+  Filter (WHERE)
+    ReadFromMergeTree (02911_support_alias_column_in_indices.test2)
+    Indexes:
+      PrimaryKey
+        Keys: 
+          c
+        Condition: (plus(plus(c, 1), 1) in [16, +Inf))
+        Parts: 1/2
+        Granules: 1/2
+      Skip
+        Name: i
+        Description: minmax GRANULARITY 1
+        Parts: 1/1
+        Granules: 1/1
+Expression ((Project names + Projection))
+  Filter ((WHERE + Change column names to column identifiers))
+    ReadFromMergeTree (02911_support_alias_column_in_indices.test2)
+    Indexes:
+      PrimaryKey
+        Keys: 
+          c
+        Condition: (_CAST(plus(_CAST(plus(c, \'UInt64\'), 1), \'UInt64\'), 1) in [16, +Inf))
+        Parts: 1/2
+        Granules: 1/2
diff --git a/tests/queries/0_stateless/02911_support_alias_column_in_indices.sql b/tests/queries/0_stateless/02911_support_alias_column_in_indices.sql
new file mode 100644
index 000000000000..46d915343398
--- /dev/null
+++ b/tests/queries/0_stateless/02911_support_alias_column_in_indices.sql
@@ -0,0 +1,40 @@
+-- Tags: no-parallel
+
+drop database if exists 02911_support_alias_column_in_indices;
+create database 02911_support_alias_column_in_indices;
+use 02911_support_alias_column_in_indices;
+
+create table test1
+(
+    c UInt32,
+    a alias c + 1,
+    index i (a) type minmax
+)
+engine = MergeTree
+order by c
+settings index_granularity = 8192, min_index_granularity_bytes = 1024, index_granularity_bytes = 10485760; -- default settings, prevent randomization in tests
+
+insert into test1 select * from numbers(10);
+insert into test1 select * from numbers(11, 20);
+
+explain indexes = 1 select * from test1 where a > 10 settings allow_experimental_analyzer = 0;
+explain indexes = 1 select * from test1 where a > 10 settings allow_experimental_analyzer = 1;
+
+create table test2
+(
+    c UInt32,
+    a1 alias c + 1,
+    a2 alias a1 + 1,
+    index i (a2) type minmax
+)
+engine = MergeTree
+order by c
+settings index_granularity = 8192, min_index_granularity_bytes = 1024, index_granularity_bytes = 10485760; -- default settings, prevent randomization in tests
+
+insert into test2 select * from numbers(10);
+insert into test2 select * from numbers(11, 20);
+
+explain indexes = 1 select * from test2 where a2 > 15 settings allow_experimental_analyzer = 0;
+explain indexes = 1 select * from test2 where a2 > 15 settings allow_experimental_analyzer = 1; -- buggy, analyzer does not pick up index i
+
+drop database 02911_support_alias_column_in_indices;
