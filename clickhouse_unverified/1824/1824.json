{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 1824,
  "instance_id": "ClickHouse__ClickHouse-1824",
  "issue_numbers": [
    "117"
  ],
  "base_commit": "3c607171d2393c736abe7411b7aea305cd8b273c",
  "patch": "diff --git a/dbms/src/Interpreters/InterpreterDropQuery.cpp b/dbms/src/Interpreters/InterpreterDropQuery.cpp\nindex 303081a54842..29ab35665e40 100644\n--- a/dbms/src/Interpreters/InterpreterDropQuery.cpp\n+++ b/dbms/src/Interpreters/InterpreterDropQuery.cpp\n@@ -46,11 +46,16 @@ BlockIO InterpreterDropQuery::execute()\n     }\n \n     /// Drop temporary table.\n-    if (drop.database.empty())\n+    if (drop.database.empty() || drop.temporary)\n     {\n         StoragePtr table = (context.hasSessionContext() ? context.getSessionContext() : context).tryRemoveExternalTable(drop.table);\n         if (table)\n         {\n+            if (drop.database.empty() && !drop.temporary)\n+            {\n+                LOG_WARNING((&Logger::get(\"InterpreterDropQuery\")),\n+                            \"It is recommended to use `DROP TEMPORARY TABLE` to delete temporary tables\");\n+            }\n             table->shutdown();\n             /// If table was already dropped by anyone, an exception will be thrown\n             auto table_lock = table->lockForAlter(__PRETTY_FUNCTION__);\ndiff --git a/dbms/src/Interpreters/InterpreterShowTablesQuery.cpp b/dbms/src/Interpreters/InterpreterShowTablesQuery.cpp\nindex 6010ee217945..c9f07425aa40 100644\n--- a/dbms/src/Interpreters/InterpreterShowTablesQuery.cpp\n+++ b/dbms/src/Interpreters/InterpreterShowTablesQuery.cpp\n@@ -30,6 +30,9 @@ String InterpreterShowTablesQuery::getRewrittenQuery()\n     if (query.databases)\n         return \"SELECT name FROM system.databases\";\n \n+    if (query.temporary && !query.from.empty())\n+        throw Exception(\"The `FROM` and `TEMPORARY` cannot be used together in `SHOW TABLES`\", ErrorCodes::SYNTAX_ERROR);\n+\n     String database = query.from.empty() ? context.getCurrentDatabase() : query.from;\n \n     /** The parameter check_database_access_rights is reset when the SHOW TABLES query is processed,\n@@ -39,7 +42,12 @@ String InterpreterShowTablesQuery::getRewrittenQuery()\n     context.assertDatabaseExists(database, false);\n \n     std::stringstream rewritten_query;\n-    rewritten_query << \"SELECT name FROM system.tables WHERE database = \" << std::quoted(database, '\\'');\n+    rewritten_query << \"SELECT name FROM system.tables WHERE \";\n+\n+    if (query.temporary)\n+        rewritten_query << \"is_temporary\";\n+    else\n+        rewritten_query << \"database = \" << std::quoted(database, '\\'');\n \n     if (!query.like.empty())\n         rewritten_query << \" AND name \" << (query.not_like ? \"NOT \" : \"\") << \"LIKE \" << std::quoted(query.like, '\\'');\ndiff --git a/dbms/src/Parsers/ASTDropQuery.h b/dbms/src/Parsers/ASTDropQuery.h\nindex 3f240b7ccf95..3735a58ab66d 100644\n--- a/dbms/src/Parsers/ASTDropQuery.h\n+++ b/dbms/src/Parsers/ASTDropQuery.h\n@@ -15,6 +15,7 @@ class ASTDropQuery : public ASTQueryWithOutput, public ASTQueryWithOnCluster\n public:\n     bool detach{false};    /// DETACH query, not DROP.\n     bool if_exists{false};\n+    bool temporary{false};\n     String database;\n     String table;\n \ndiff --git a/dbms/src/Parsers/ASTShowTablesQuery.h b/dbms/src/Parsers/ASTShowTablesQuery.h\nindex d24ffe006afc..176f9d69697b 100644\n--- a/dbms/src/Parsers/ASTShowTablesQuery.h\n+++ b/dbms/src/Parsers/ASTShowTablesQuery.h\n@@ -15,6 +15,7 @@ class ASTShowTablesQuery : public ASTQueryWithOutput\n {\n public:\n     bool databases{false};\n+    bool temporary{false};\n     String from;\n     String like;\n     bool not_like{false};\ndiff --git a/dbms/src/Parsers/ParserDropQuery.cpp b/dbms/src/Parsers/ParserDropQuery.cpp\nindex 607d37b8c885..0475711a225c 100644\n--- a/dbms/src/Parsers/ParserDropQuery.cpp\n+++ b/dbms/src/Parsers/ParserDropQuery.cpp\n@@ -17,6 +17,7 @@ bool ParserDropQuery::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)\n \n     ParserKeyword s_drop(\"DROP\");\n     ParserKeyword s_detach(\"DETACH\");\n+    ParserKeyword s_temporary(\"TEMPORARY\");\n     ParserKeyword s_table(\"TABLE\");\n     ParserKeyword s_database(\"DATABASE\");\n     ParserToken s_dot(TokenType::Dot);\n@@ -28,6 +29,7 @@ bool ParserDropQuery::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)\n     String cluster_str;\n     bool detach = false;\n     bool if_exists = false;\n+    bool temporary = false;\n \n     if (!s_drop.ignore(pos, expected))\n     {\n@@ -53,6 +55,9 @@ bool ParserDropQuery::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)\n     }\n     else\n     {\n+        if (s_temporary.ignore(pos, expected))\n+            temporary = true;\n+\n         if (!s_table.ignore(pos, expected))\n             return false;\n \n@@ -81,6 +86,7 @@ bool ParserDropQuery::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)\n \n     query->detach = detach;\n     query->if_exists = if_exists;\n+    query->temporary = temporary;\n     if (database)\n         query->database = typeid_cast<ASTIdentifier &>(*database).name;\n     if (table)\ndiff --git a/dbms/src/Parsers/ParserShowTablesQuery.cpp b/dbms/src/Parsers/ParserShowTablesQuery.cpp\nindex 80e5f986c706..5399eeef50ca 100644\n--- a/dbms/src/Parsers/ParserShowTablesQuery.cpp\n+++ b/dbms/src/Parsers/ParserShowTablesQuery.cpp\n@@ -18,6 +18,7 @@ bool ParserShowTablesQuery::parseImpl(Pos & pos, ASTPtr & node, Expected & expec\n     Pos begin = pos;\n \n     ParserKeyword s_show(\"SHOW\");\n+    ParserKeyword s_temporary(\"TEMPORARY\");\n     ParserKeyword s_tables(\"TABLES\");\n     ParserKeyword s_databases(\"DATABASES\");\n     ParserKeyword s_from(\"FROM\");\n@@ -38,27 +39,33 @@ bool ParserShowTablesQuery::parseImpl(Pos & pos, ASTPtr & node, Expected & expec\n     {\n         query->databases = true;\n     }\n-    else if (s_tables.ignore(pos, expected))\n+    else\n     {\n-        if (s_from.ignore(pos, expected))\n-        {\n-            if (!name_p.parse(pos, database, expected))\n-                return false;\n-        }\n+        if (s_temporary.ignore(pos))\n+            query->temporary = true;\n \n-        if (s_not.ignore(pos, expected))\n-            query->not_like = true;\n-\n-        if (s_like.ignore(pos, expected))\n+        if (s_tables.ignore(pos, expected))\n         {\n-            if (!like_p.parse(pos, like, expected))\n+            if (s_from.ignore(pos, expected))\n+            {\n+                if (!name_p.parse(pos, database, expected))\n+                    return false;\n+            }\n+\n+            if (s_not.ignore(pos, expected))\n+                query->not_like = true;\n+\n+            if (s_like.ignore(pos, expected))\n+            {\n+                if (!like_p.parse(pos, like, expected))\n+                    return false;\n+            }\n+            else if (query->not_like)\n                 return false;\n         }\n-        else if (query->not_like)\n+        else\n             return false;\n     }\n-    else\n-        return false;\n \n     query->range = StringRange(begin, pos);\n \ndiff --git a/dbms/src/Parsers/ParserShowTablesQuery.h b/dbms/src/Parsers/ParserShowTablesQuery.h\nindex 0308a0e665d9..e5c2aab55719 100644\n--- a/dbms/src/Parsers/ParserShowTablesQuery.h\n+++ b/dbms/src/Parsers/ParserShowTablesQuery.h\n@@ -14,7 +14,7 @@ namespace DB\n class ParserShowTablesQuery : public IParserBase\n {\n protected:\n-    const char * getName() const { return \"SHOW TABLES|DATABASES query\"; }\n+    const char * getName() const { return \"SHOW [TEMPORARY] TABLES|DATABASES [[NOT] LIKE 'str']\"; }\n     bool parseImpl(Pos & pos, ASTPtr & node, Expected & expected);\n };\n \ndiff --git a/dbms/src/Storages/System/StorageSystemTables.cpp b/dbms/src/Storages/System/StorageSystemTables.cpp\nindex b40cf29498f9..0f68f6864036 100644\n--- a/dbms/src/Storages/System/StorageSystemTables.cpp\n+++ b/dbms/src/Storages/System/StorageSystemTables.cpp\n@@ -7,7 +7,7 @@\n #include <Storages/VirtualColumnUtils.h>\n #include <Databases/IDatabase.h>\n #include <Interpreters/Context.h>\n-\n+#include <DataTypes/DataTypesNumber.h>\n \n namespace DB\n {\n@@ -19,7 +19,8 @@ StorageSystemTables::StorageSystemTables(const std::string & name_)\n         {\"database\", std::make_shared<DataTypeString>()},\n         {\"name\", std::make_shared<DataTypeString>()},\n         {\"engine\", std::make_shared<DataTypeString>()},\n-        {\"metadata_modification_time\", std::make_shared<DataTypeDateTime>()}\n+        {\"metadata_modification_time\", std::make_shared<DataTypeDateTime>()},\n+        {\"is_temporary\", std::make_shared<DataTypeUInt8>()}\n     };\n }\n \n@@ -54,6 +55,7 @@ BlockInputStreams StorageSystemTables::read(\n     for (size_t row_number = 0; row_number < filtered_databases_column->size(); ++row_number)\n     {\n         std::string database_name = filtered_databases_column->getDataAt(row_number).toString();\n+\n         auto database = context.tryGetDatabase(database_name);\n \n         if (!database)\n@@ -68,10 +70,28 @@ BlockInputStreams StorageSystemTables::read(\n             res_columns[0]->insert(database_name);\n             res_columns[1]->insert(table_name);\n             res_columns[2]->insert(iterator->table()->getName());\n-            res_columns[3]->insert(static_cast<UInt64>(database->getTableMetadataModificationTime(context, table_name)));\n+            res_columns[3]->insert(\n+                static_cast<UInt64>(database->getTableMetadataModificationTime(context, table_name)));\n+            res_columns[4]->insert(UInt64(0));\n+        }\n+    }\n+\n+    if (context.hasSessionContext())\n+    {\n+        Tables external_tables = context.getSessionContext().getExternalTables();\n+\n+        for (auto table : external_tables)\n+        {\n+            res_columns[0]->insert(String{});\n+            res_columns[1]->insert(table.first);\n+            res_columns[2]->insert(table.second->getName());\n+            res_columns[3]->insert(UInt64(0));\n+            res_columns[4]->insert(UInt64(1));\n         }\n     }\n \n+\n+\n     return BlockInputStreams(1, std::make_shared<OneBlockInputStream>(getSampleBlock().cloneWithColumns(std::move(res_columns))));\n }\n \n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/00492_drop_temporary_table.sql b/dbms/tests/queries/0_stateless/00492_drop_temporary_table.sql\nindex 715c78d675c5..dceb4dc22678 100644\n--- a/dbms/tests/queries/0_stateless/00492_drop_temporary_table.sql\n+++ b/dbms/tests/queries/0_stateless/00492_drop_temporary_table.sql\n@@ -1,8 +1,8 @@\n-drop table if exists temp_tab;\n-create temporary table temp_tab (number UInt64);\n-insert into temp_tab select number from system.numbers limit 1;\n-select number from temp_tab;\n-drop table temp_tab;\n-create temporary table temp_tab (number UInt64);\n-select number from temp_tab;\n-drop table temp_tab;\n+DROP TEMPORARY TABLE IF EXISTS temp_tab;\n+CREATE TEMPORARY TABLE temp_tab (number UInt64);\n+INSERT INTO temp_tab SELECT number FROM system.numbers LIMIT 1;\n+SELECT number FROM temp_tab;\n+DROP TABLE temp_tab;\n+CREATE TEMPORARY TABLE temp_tab (number UInt64);\n+SELECT number FROM temp_tab;\n+DROP TEMPORARY TABLE temp_tab;\ndiff --git a/dbms/tests/queries/0_stateless/00542_access_to_temporary_table_in_readonly_mode.sql b/dbms/tests/queries/0_stateless/00542_access_to_temporary_table_in_readonly_mode.sql\nindex cee94d59fa4e..07d6955d51c2 100644\n--- a/dbms/tests/queries/0_stateless/00542_access_to_temporary_table_in_readonly_mode.sql\n+++ b/dbms/tests/queries/0_stateless/00542_access_to_temporary_table_in_readonly_mode.sql\n@@ -16,4 +16,4 @@ SELECT '---';\n \n SELECT ID FROM readonly00542 ORDER BY ID;\n \n-DROP TABLE readonly00542;\n+DROP TEMPORARY TABLE readonly00542;\ndiff --git a/dbms/tests/queries/0_stateless/00543_access_to_temporary_table_in_readonly_mode.sh b/dbms/tests/queries/0_stateless/00543_access_to_temporary_table_in_readonly_mode.sh\nindex a2d5593852bd..d9c4d335d66d 100755\n--- a/dbms/tests/queries/0_stateless/00543_access_to_temporary_table_in_readonly_mode.sh\n+++ b/dbms/tests/queries/0_stateless/00543_access_to_temporary_table_in_readonly_mode.sh\n@@ -51,7 +51,7 @@ $CLICKHOUSE_CLIENT -n --query=\"\n         ID Int\n     ) Engine=Memory;\n     INSERT INTO readonly (ID) VALUES (1);\n-    DROP TABLE readonly;\n+    DROP TEMPORARY TABLE readonly;\n \" 2> /dev/null;\n CODE=$?;\n [ \"$CODE\" -ne \"0\" ] && echo \"Fail\" && exit $CODE;\n@@ -83,7 +83,7 @@ $CLICKHOUSE_CLIENT -n --query=\"\n         ID Int\n     ) Engine=Memory;\n     INSERT INTO readonly (ID) VALUES (1);\n-    DROP TABLE readonly;\n+    DROP TEMPORARY TABLE readonly;\n \" 2> /dev/null;\n CODE=$?;\n [ \"$CODE\" -ne \"0\" ] && echo \"Fail\" && exit $CODE;\ndiff --git a/dbms/tests/queries/0_stateless/00564_show_tables_with_temporary.reference b/dbms/tests/queries/0_stateless/00564_show_tables_with_temporary.reference\nnew file mode 100644\nindex 000000000000..97a6c4574bbf\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/00564_show_tables_with_temporary.reference\n@@ -0,0 +1,1 @@\n+temp_tab\ndiff --git a/dbms/tests/queries/0_stateless/00564_show_tables_with_temporary.sql b/dbms/tests/queries/0_stateless/00564_show_tables_with_temporary.sql\nnew file mode 100644\nindex 000000000000..fb9e8baad1da\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/00564_show_tables_with_temporary.sql\n@@ -0,0 +1,4 @@\n+DROP TEMPORARY TABLE IF EXISTS temp_tab;\n+CREATE TEMPORARY TABLE temp_tab (number UInt64);\n+SHOW TEMPORARY TABLES LIKE 'temp_tab';\n+DROP TEMPORARY TABLE temp_tab;\n\\ No newline at end of file\n",
  "problem_statement": "Temporary table management\nHey, Happy Birthday to your company and thanks for making an awesome DBMS!\n\nIt'd be great to have better control over the native `TEMPORARY TABLE`s.\nFor instance, if you create one using `CREATE TEMPORARY TABLE temp_table (id UInt8);`,\nyou won't be able to\n1) execute `SHOW CREATE TABLE temp_table;`\n`#107: Cannot open file /.../metadata/default/temp_table.sql, errno: 2, strerror: No such file or directory.`\n\nJudging by the exception, it may look like it supports just the permanently-stored ones, but you certainly can do `SHOW CREATE TABLE` over the regular tables with the `Memory` engine.\nAlso I've thought that the table was already deleted, but it was the same session and `SELECT * FROM temp_table;` works OK.\n\n2) Same with `SHOW TABLES;` - the temporary tables aren't there.\n\n3) You can't run `DROP TABLE` over a temporary table. You can over a `Memory` one though.\nOf course, I'm free to end the session to make it disappear, but nevertheless...\n\nI understand that it's not a big deal, and I guess I can send a pull request later that reflects these issues in the documentation. Just wanted to let you know.\n\n",
  "hints_text": "> Hey, Happy Birthday to your company\n\nThanks for greetings!\n\n> I understand that it's not a big deal, and I guess I can send a pull request later that reflects these issues in the documentation. Just wanted to let you know.\n\nBetter to fix these issues (It is not very hard).\nApproved.\n",
  "created_at": "2018-01-25T17:53:07Z",
  "modified_files": [
    "dbms/src/Interpreters/InterpreterDropQuery.cpp",
    "dbms/src/Interpreters/InterpreterShowTablesQuery.cpp",
    "dbms/src/Parsers/ASTDropQuery.h",
    "dbms/src/Parsers/ASTShowTablesQuery.h",
    "dbms/src/Parsers/ParserDropQuery.cpp",
    "dbms/src/Parsers/ParserShowTablesQuery.cpp",
    "dbms/src/Parsers/ParserShowTablesQuery.h",
    "dbms/src/Storages/System/StorageSystemTables.cpp"
  ],
  "modified_test_files": [
    "dbms/tests/queries/0_stateless/00492_drop_temporary_table.sql",
    "dbms/tests/queries/0_stateless/00542_access_to_temporary_table_in_readonly_mode.sql",
    "dbms/tests/queries/0_stateless/00543_access_to_temporary_table_in_readonly_mode.sh",
    "b/dbms/tests/queries/0_stateless/00564_show_tables_with_temporary.reference",
    "b/dbms/tests/queries/0_stateless/00564_show_tables_with_temporary.sql"
  ]
}