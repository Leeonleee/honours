{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 74477,
  "instance_id": "ClickHouse__ClickHouse-74477",
  "issue_numbers": [
    "67542"
  ],
  "base_commit": "b26ce2b51d05dbffeea4f213cb53229b4c84bcfe",
  "patch": "diff --git a/base/base/find_symbols.h b/base/base/find_symbols.h\nindex 6d4c96f911c3..eb1290dd2894 100644\n--- a/base/base/find_symbols.h\n+++ b/base/base/find_symbols.h\n@@ -33,6 +33,10 @@\n   *\n   * Allow to search for the last matching character in a string.\n   * If no such characters, returns nullptr.\n+  *\n+  * count_symbols<c1, c2, ...>(begin, end):\n+  *\n+  * Count the number of symbols of the set in a string.\n   */\n \n struct SearchSymbols\n@@ -441,6 +445,15 @@ inline char * find_last_not_symbols_or_null(char * begin, char * end)\n     return const_cast<char *>(detail::find_last_symbols_sse2<false, detail::ReturnMode::Nullptr, symbols...>(begin, end));\n }\n \n+template <char... symbols>\n+inline size_t count_symbols(const char * begin, const char * end)\n+{\n+    size_t res = 0;\n+    for (const auto * ptr = begin; ptr < end; ++ptr)\n+        res += detail::is_in<symbols...>(*ptr);\n+    return res;\n+}\n+\n \n /// Slightly resembles boost::split. The drawback of boost::split is that it fires a false positive in clang static analyzer.\n /// See https://github.com/boostorg/algorithm/issues/63\ndiff --git a/docs/en/operations/system-tables/query_log.md b/docs/en/operations/system-tables/query_log.md\nindex 0975771dfd4d..5e34f130b143 100644\n--- a/docs/en/operations/system-tables/query_log.md\n+++ b/docs/en/operations/system-tables/query_log.md\n@@ -94,6 +94,8 @@ Columns:\n - `client_version_major` ([UInt32](../../sql-reference/data-types/int-uint.md)) \u2014 Major version of the [clickhouse-client](../../interfaces/cli.md) or another TCP client.\n - `client_version_minor` ([UInt32](../../sql-reference/data-types/int-uint.md)) \u2014 Minor version of the [clickhouse-client](../../interfaces/cli.md) or another TCP client.\n - `client_version_patch` ([UInt32](../../sql-reference/data-types/int-uint.md)) \u2014 Patch component of the [clickhouse-client](../../interfaces/cli.md) or another TCP client version.\n+- `script_query_number` ([UInt32](../../sql-reference/data-types/int-uint.md)) \u2014 A sequential query number in a multi-query script in [clickhouse-client](../../interfaces/cli.md).\n+- `script_line_number` ([UInt32](../../sql-reference/data-types/int-uint.md)) \u2014 A line number in a multi-query script in [clickhouse-client](../../interfaces/cli.md) where the current query starts.\n - `http_method` (UInt8) \u2014 HTTP method that initiated the query. Possible values:\n     - 0 \u2014 The query was launched from the TCP interface.\n     - 1 \u2014 `GET` method was used.\ndiff --git a/src/Client/ClientBase.cpp b/src/Client/ClientBase.cpp\nindex 393188a0bd64..3948b17f7ef9 100644\n--- a/src/Client/ClientBase.cpp\n+++ b/src/Client/ClientBase.cpp\n@@ -1172,7 +1172,8 @@ void ClientBase::processOrdinaryQuery(const String & query_to_execute, ASTPtr pa\n             query_interrupt_handler.start(signals_before_stop);\n             SCOPE_EXIT({ query_interrupt_handler.stop(); });\n \n-            try {\n+            try\n+            {\n                 connection->sendQuery(\n                     connection_parameters.timeouts,\n                     query,\n@@ -2417,6 +2418,10 @@ bool ClientBase::executeMultiQuery(const String & all_queries_text)\n     const char * this_query_end;\n     const char * all_queries_end = all_queries_text.data() + all_queries_text.size();\n \n+    const char * prev_query_begin = all_queries_text.data();\n+    UInt32 script_query_number = 0;\n+    UInt32 script_line_number = 0;\n+\n     String full_query; // full_query is the query + inline INSERT data + trailing comments (the latter is our best guess for now).\n     String query_to_execute;\n     ASTPtr parsed_query;\n@@ -2480,6 +2485,12 @@ bool ClientBase::executeMultiQuery(const String & all_queries_text)\n             {\n                 is_first = false;\n                 full_query = all_queries_text.substr(this_query_begin - all_queries_text.data(), this_query_end - this_query_begin);\n+\n+                ++script_query_number;\n+                script_line_number += count_symbols<'\\n'>(prev_query_begin, this_query_begin);\n+                prev_query_begin = this_query_begin;\n+                client_context->setScriptLineNumbers(script_query_number, 1 + script_line_number);\n+\n                 if (query_fuzzer_runs)\n                 {\n                     if (!processWithFuzzing(full_query))\ndiff --git a/src/Core/ProtocolDefines.h b/src/Core/ProtocolDefines.h\nindex a1c2f4b94fa2..bc98cc94f9a7 100644\n--- a/src/Core/ProtocolDefines.h\n+++ b/src/Core/ProtocolDefines.h\n@@ -39,10 +39,11 @@ static constexpr auto DBMS_MIN_SUPPORTED_PARALLEL_REPLICAS_PROTOCOL_VERSION = 3;\n static constexpr auto DBMS_PARALLEL_REPLICAS_MIN_VERSION_WITH_MARK_SEGMENT_SIZE_FIELD = 4;\n static constexpr auto DBMS_PARALLEL_REPLICAS_PROTOCOL_VERSION = 4;\n static constexpr auto DBMS_MIN_REVISION_WITH_PARALLEL_REPLICAS = 54453;\n+static constexpr auto DBMS_MIN_REVISION_WITH_QUERY_AND_LINE_NUMBERS = 54475;\n \n static constexpr auto DBMS_MERGE_TREE_PART_INFO_VERSION = 1;\n \n-static constexpr auto DBMS_QUERY_PLAN_SERIALIZATIONL_VERSION = 0;\n+static constexpr auto DBMS_QUERY_PLAN_SERIALIZATION_VERSION = 0;\n \n static constexpr auto DBMS_MIN_REVISION_WITH_INTERSERVER_SECRET = 54441;\n \n@@ -108,6 +109,6 @@ static constexpr auto DBMS_MIN_REVISION_WITH_SERVER_SETTINGS = 54474;\n /// NOTE: DBMS_TCP_PROTOCOL_VERSION has nothing common with VERSION_REVISION,\n /// later is just a number for server version (one number instead of commit SHA)\n /// for simplicity (sometimes it may be more convenient in some use cases).\n-static constexpr auto DBMS_TCP_PROTOCOL_VERSION = 54474;\n+static constexpr auto DBMS_TCP_PROTOCOL_VERSION = 54475;\n \n }\ndiff --git a/src/Interpreters/ClientInfo.cpp b/src/Interpreters/ClientInfo.cpp\nindex a2ade948a29d..6a06b20b07a2 100644\n--- a/src/Interpreters/ClientInfo.cpp\n+++ b/src/Interpreters/ClientInfo.cpp\n@@ -98,6 +98,12 @@ void ClientInfo::write(WriteBuffer & out, UInt64 server_protocol_revision) const\n         writeVarUInt(obsolete_count_participating_replicas, out);\n         writeVarUInt(number_of_current_replica, out);\n     }\n+\n+    if (server_protocol_revision >= DBMS_MIN_REVISION_WITH_QUERY_AND_LINE_NUMBERS)\n+    {\n+        writeVarUInt(script_query_number, out);\n+        writeVarUInt(script_line_number, out);\n+    }\n }\n \n \n@@ -188,6 +194,12 @@ void ClientInfo::read(ReadBuffer & in, UInt64 client_protocol_revision)\n         readVarUInt(obsolete_count_participating_replicas, in);\n         readVarUInt(number_of_current_replica, in);\n     }\n+\n+    if (client_protocol_revision >= DBMS_MIN_REVISION_WITH_QUERY_AND_LINE_NUMBERS)\n+    {\n+        readVarUInt(script_query_number, in);\n+        readVarUInt(script_line_number, in);\n+    }\n }\n \n \ndiff --git a/src/Interpreters/ClientInfo.h b/src/Interpreters/ClientInfo.h\nindex 9777e3044d9c..3212d9b65842 100644\n--- a/src/Interpreters/ClientInfo.h\n+++ b/src/Interpreters/ClientInfo.h\n@@ -86,7 +86,11 @@ class ClientInfo\n     UInt64 client_version_major = 0;\n     UInt64 client_version_minor = 0;\n     UInt64 client_version_patch = 0;\n-    unsigned client_tcp_protocol_version = 0;\n+    UInt32 client_tcp_protocol_version = 0;\n+\n+    /// Numbers are starting from 1. Zero means unset.\n+    UInt32 script_query_number = 0;\n+    UInt32 script_line_number = 0;\n \n     /// In case of distributed query, client info for query is actually a client info of client.\n     /// In order to get a version of server-initiator, use connection_ values.\n@@ -94,7 +98,7 @@ class ClientInfo\n     UInt64 connection_client_version_major = 0;\n     UInt64 connection_client_version_minor = 0;\n     UInt64 connection_client_version_patch = 0;\n-    unsigned connection_tcp_protocol_version = 0;\n+    UInt32 connection_tcp_protocol_version = 0;\n \n     /// For http\n     HTTPMethod http_method = HTTPMethod::UNKNOWN;\ndiff --git a/src/Interpreters/Context.cpp b/src/Interpreters/Context.cpp\nindex 432e60913072..12ba20e41e24 100644\n--- a/src/Interpreters/Context.cpp\n+++ b/src/Interpreters/Context.cpp\n@@ -5376,6 +5376,12 @@ void Context::setClientVersion(UInt64 client_version_major, UInt64 client_versio\n     client_info.client_tcp_protocol_version = client_tcp_protocol_version;\n }\n \n+void Context::setScriptLineNumbers(uint32_t query_number, uint32_t line_number)\n+{\n+    client_info.script_query_number = query_number;\n+    client_info.script_line_number = line_number;\n+}\n+\n void Context::setClientConnectionId(uint32_t connection_id_)\n {\n     client_info.connection_id = connection_id_;\ndiff --git a/src/Interpreters/Context.h b/src/Interpreters/Context.h\nindex 67524d0f7930..86973521b977 100644\n--- a/src/Interpreters/Context.h\n+++ b/src/Interpreters/Context.h\n@@ -721,6 +721,7 @@ class Context: public ContextData, public std::enable_shared_from_this<Context>\n     void setClientInterface(ClientInfo::Interface interface);\n     void setClientVersion(UInt64 client_version_major, UInt64 client_version_minor, UInt64 client_version_patch, unsigned client_tcp_protocol_version);\n     void setClientConnectionId(uint32_t connection_id);\n+    void setScriptLineNumbers(uint32_t query_number, uint32_t line_number);\n     void setHTTPClientInfo(const Poco::Net::HTTPRequest & request);\n     void setForwardedFor(const String & forwarded_for);\n     void setQueryKind(ClientInfo::QueryKind query_kind);\ndiff --git a/src/Interpreters/QueryLog.cpp b/src/Interpreters/QueryLog.cpp\nindex 527159dc981b..1c3f0db5f315 100644\n--- a/src/Interpreters/QueryLog.cpp\n+++ b/src/Interpreters/QueryLog.cpp\n@@ -109,6 +109,8 @@ ColumnsDescription QueryLogElement::getColumnsDescription()\n         {\"client_version_major\", std::make_shared<DataTypeUInt32>(), \"Major version of the clickhouse-client or another TCP client.\"},\n         {\"client_version_minor\", std::make_shared<DataTypeUInt32>(), \"Minor version of the clickhouse-client or another TCP client.\"},\n         {\"client_version_patch\", std::make_shared<DataTypeUInt32>(), \"Patch component of the clickhouse-client or another TCP client version.\"},\n+        {\"script_query_number\", std::make_shared<DataTypeUInt32>(), \"A sequential query number in a multi-query script.\"},\n+        {\"script_line_number\", std::make_shared<DataTypeUInt32>(), \"A line number in a multi-query script where the current query starts.\"},\n         {\"http_method\", std::make_shared<DataTypeUInt8>(), \"HTTP method that initiated the query. Possible values: 0 \u2014 The query was launched from the TCP interface, 1 \u2014 GET method was used, 2 \u2014 POST method was used.\"},\n         {\"http_user_agent\", low_cardinality_string, \"HTTP header UserAgent passed in the HTTP query.\"},\n         {\"http_referer\", std::make_shared<DataTypeString>(), \"HTTP header Referer passed in the HTTP query (contains an absolute or partial address of the page making the query).\"},\n@@ -337,6 +339,9 @@ void QueryLogElement::appendClientInfo(const ClientInfo & client_info, MutableCo\n     columns[i++]->insert(client_info.client_version_minor);\n     columns[i++]->insert(client_info.client_version_patch);\n \n+    columns[i++]->insert(client_info.script_query_number);\n+    columns[i++]->insert(client_info.script_line_number);\n+\n     columns[i++]->insert(static_cast<UInt64>(client_info.http_method));\n     columns[i++]->insert(client_info.http_user_agent);\n     columns[i++]->insert(client_info.http_referer);\ndiff --git a/src/Interpreters/QueryThreadLog.cpp b/src/Interpreters/QueryThreadLog.cpp\nindex f50458745b9b..c46ee278c6a0 100644\n--- a/src/Interpreters/QueryThreadLog.cpp\n+++ b/src/Interpreters/QueryThreadLog.cpp\n@@ -70,6 +70,8 @@ ColumnsDescription QueryThreadLogElement::getColumnsDescription()\n         {\"client_version_major\", std::make_shared<DataTypeUInt32>(), \"Major version of the clickhouse-client or another TCP client.\"},\n         {\"client_version_minor\", std::make_shared<DataTypeUInt32>(), \"Minor version of the clickhouse-client or another TCP client.\"},\n         {\"client_version_patch\", std::make_shared<DataTypeUInt32>(), \"Patch component of the clickhouse-client or another TCP client version.\"},\n+        {\"script_query_number\", std::make_shared<DataTypeUInt32>(), \"A sequential query number in a multi-query script.\"},\n+        {\"script_line_number\", std::make_shared<DataTypeUInt32>(), \"A line number in a multi-query script where the current query starts.\"},\n         {\"http_method\", std::make_shared<DataTypeUInt8>(), \"HTTP method that initiated the query. Possible values: 0 \u2014 The query was launched from the TCP interface, 1 \u2014 GET method was used., 2 \u2014 POST method was used.\"},\n         {\"http_user_agent\", low_cardinality_string, \"The UserAgent header passed in the HTTP request.\"},\n         {\"http_referer\", std::make_shared<DataTypeString>(), \"HTTP header `Referer` passed in the HTTP query (contains an absolute or partial address of the page making the query).\"},\ndiff --git a/src/Interpreters/executeQuery.cpp b/src/Interpreters/executeQuery.cpp\nindex fe6d15c06e0a..2e9ceeb274e2 100644\n--- a/src/Interpreters/executeQuery.cpp\n+++ b/src/Interpreters/executeQuery.cpp\n@@ -223,16 +223,21 @@ static void logQuery(const String & query, ContextPtr context, bool internal, Qu\n         if (!comment.empty())\n             comment = fmt::format(\" (comment: {})\", comment);\n \n+        String line_info;\n+        if (client_info.script_line_number)\n+            line_info = fmt::format(\" (query {}, line {})\", client_info.script_query_number, client_info.script_line_number);\n+\n         String transaction_info;\n         if (auto txn = context->getCurrentTransaction())\n             transaction_info = fmt::format(\" (TID: {}, TIDH: {})\", txn->tid, txn->tid.getHash());\n \n-        LOG_DEBUG(getLogger(\"executeQuery\"), \"(from {}{}{}){}{} {} (stage: {})\",\n+        LOG_DEBUG(getLogger(\"executeQuery\"), \"(from {}{}{}){}{}{} {} (stage: {})\",\n             client_info.current_address.toString(),\n             (current_user != \"default\" ? \", user: \" + current_user : \"\"),\n             (!initial_query_id.empty() && current_query_id != initial_query_id ? \", initial_query_id: \" + initial_query_id : std::string()),\n             transaction_info,\n             comment,\n+            line_info,\n             toOneLineQuery(query),\n             QueryProcessingStage::toString(stage));\n \n@@ -278,17 +283,24 @@ static void logException(ContextPtr context, QueryLogElement & elem, bool log_er\n     message.format_string = elem.exception_format_string;\n     message.format_string_args = elem.exception_format_string_args;\n \n+    const auto & client_info = context->getClientInfo();\n+    String line_info;\n+    if (client_info.script_line_number)\n+        line_info = fmt::format(\" (query {}, line {})\", client_info.script_query_number, client_info.script_line_number);\n+\n     if (elem.stack_trace.empty() || !log_error)\n-        message.text = fmt::format(\"{} (from {}){} (in query: {})\", elem.exception,\n+        message.text = fmt::format(\"{} (from {}){}{} (in query: {})\", elem.exception,\n                         context->getClientInfo().current_address.toString(),\n                         comment,\n+                        line_info,\n                         toOneLineQuery(elem.query));\n     else\n         message.text = fmt::format(\n-            \"{} (from {}){} (in query: {}), Stack trace (when copying this message, always include the lines below):\\n\\n{}\",\n+            \"{} (from {}){}{} (in query: {}), Stack trace (when copying this message, always include the lines below):\\n\\n{}\",\n             elem.exception,\n             context->getClientInfo().current_address.toString(),\n             comment,\n+            line_info,\n             toOneLineQuery(elem.query),\n             elem.stack_trace);\n \ndiff --git a/src/Processors/QueryPlan/Serialization.cpp b/src/Processors/QueryPlan/Serialization.cpp\nindex 16d78496e509..172929efd4e8 100644\n--- a/src/Processors/QueryPlan/Serialization.cpp\n+++ b/src/Processors/QueryPlan/Serialization.cpp\n@@ -64,7 +64,7 @@ struct QueryPlan::SerializationFlags\n \n void QueryPlan::serialize(WriteBuffer & out, size_t max_supported_version) const\n {\n-    UInt64 version = std::min<UInt64>(max_supported_version, DBMS_QUERY_PLAN_SERIALIZATIONL_VERSION);\n+    UInt64 version = std::min<UInt64>(max_supported_version, DBMS_QUERY_PLAN_SERIALIZATION_VERSION);\n     writeVarUInt(version, out);\n \n     SerializationFlags flags;\n@@ -135,10 +135,10 @@ QueryPlanAndSets QueryPlan::deserialize(ReadBuffer & in, const ContextPtr & cont\n     UInt64 version;\n     readVarUInt(version, in);\n \n-    if (version > DBMS_QUERY_PLAN_SERIALIZATIONL_VERSION)\n+    if (version > DBMS_QUERY_PLAN_SERIALIZATION_VERSION)\n         throw Exception(ErrorCodes::NOT_IMPLEMENTED,\n             \"Query plan serialization version {} is not supported. The last supported version is {}\",\n-            version, DBMS_QUERY_PLAN_SERIALIZATIONL_VERSION);\n+            version, DBMS_QUERY_PLAN_SERIALIZATION_VERSION);\n \n     SerializationFlags flags;\n     return deserialize(in, context, flags);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01547_query_log_current_database.sql b/tests/queries/0_stateless/01547_query_log_current_database.sql\nindex 5eec8a81cccc..7ed0f389f39f 100644\n--- a/tests/queries/0_stateless/01547_query_log_current_database.sql\n+++ b/tests/queries/0_stateless/01547_query_log_current_database.sql\n@@ -1,5 +1,5 @@\n --\n--- This is more cleaner approach for writing a test that relies on system.query_log/query_thread_log.\n+-- This is a cleaner approach for writing a test that relies on system.query_log/query_thread_log.\n --\n -- It uses current database, and since clickhouse-test will generate random for\n -- each run you can run the test multiple times without worrying about\n@@ -30,6 +30,6 @@ where\n select count() == 2\n from system.query_thread_log\n where\n-    query like 'select \\'01547_query_log_current_database%'\n+    query like 'select \\'01547\\_query\\_log\\_current\\_database%'\n     and current_database = currentDatabase()\n     and event_date >= yesterday()\ndiff --git a/tests/queries/0_stateless/03312_line_numbers.reference b/tests/queries/0_stateless/03312_line_numbers.reference\nnew file mode 100644\nindex 000000000000..168ed4fcaa00\n--- /dev/null\n+++ b/tests/queries/0_stateless/03312_line_numbers.reference\n@@ -0,0 +1,8 @@\n+This is the first query, and it is located on line 4\t1\t2\t3\n+This is the second query, and it is located on line 8\n+QueryStart\t1\t4\tSELECT \\'This is the first query, and it is located on line 4\\',\\n1, -- Just random stuff to ensure proper counting of lines.\\n2, 3;\n+QueryFinish\t1\t4\tSELECT \\'This is the first query, and it is located on line 4\\',\\n1, -- Just random stuff to ensure proper counting of lines.\\n2, 3;\n+QueryStart\t2\t8\tSELECT \\'This is the second query, and it is located on line 8\\';\n+QueryFinish\t2\t8\tSELECT \\'This is the second query, and it is located on line 8\\';\n+Ok\n+Ok\ndiff --git a/tests/queries/0_stateless/03312_line_numbers.sql b/tests/queries/0_stateless/03312_line_numbers.sql\nnew file mode 100644\nindex 000000000000..d5616e76b568\n--- /dev/null\n+++ b/tests/queries/0_stateless/03312_line_numbers.sql\n@@ -0,0 +1,14 @@\n+-- Tags: no-fasttest\n+-- ^ due to the usage of system logs\n+\n+SELECT 'This is the first query, and it is located on line 4',\n+1, -- Just random stuff to ensure proper counting of lines.\n+2, 3;\n+\n+SELECT 'This is the second query, and it is located on line 8';\n+\n+SYSTEM FLUSH LOGS;\n+SELECT type, script_query_number, script_line_number, query FROM system.query_log WHERE current_database = currentDatabase() AND event_date >= yesterday() ORDER BY event_time_microseconds, type;\n+\n+SELECT 'Ok' FROM system.text_log WHERE event_date >= yesterday() AND message LIKE '%(query 1, line 4)%' AND message LIKE '%This is the first query%' LIMIT 1;\n+SELECT 'Ok' FROM system.text_log WHERE event_date >= yesterday() AND message LIKE '%(query 2, line 8)%' AND message LIKE '%This is the second query%' LIMIT 1;\n",
  "problem_statement": "A setting `script_line_number`\nAdd a new setting `script_line_number` of unsigned integer type.\r\n\r\nWhen clickhouse-client processes a script, it will set it to the line number inside the script for each query.\r\nOther clients are free to set it in a similar way.\r\n\r\nThe server will output the line number to the log near `comment: ` (see the similar `log_comment` setting).\n",
  "hints_text": "Hi @alexey-milovidov! I would like to pick up this issue. Wanted to write down things I have understood so far so that anyone can correct me if im wrong.\r\n\r\n1. We are adding the script_line_number to make it easier for people debugging issues, the server will output the line number of the current line that is being processed in the current script. I will figure how to fetch the line number.\r\n2. I am unsure about what other clients use this, would love to explore about that.\r\n3. Will need to decide on adding the script_line_number to the same line as [comment](https://github.com/KanniShashankh/ClickHouse/blob/a596f0b6d1baa64dd13481d6d7d01244eeada7dd/src/Interpreters/executeQuery.cpp#L148) or in a seperate line\r\n4. Need to understand how [context->getSettingsRef()](https://github.com/KanniShashankh/ClickHouse/blob/a596f0b6d1baa64dd13481d6d7d01244eeada7dd/src/Interpreters/executeQuery.cpp#L141C26-L141C51) works.\r\n\r\nThanks!!\n@KanniShashankh, let me know if you are still working on this. I would like to pick this up. Cheers!\nHey @pinsvin00, you can pick it up. Thanks!",
  "created_at": "2025-01-11T01:43:49Z",
  "modified_files": [
    "base/base/find_symbols.h",
    "docs/en/operations/system-tables/query_log.md",
    "src/Client/ClientBase.cpp",
    "src/Core/ProtocolDefines.h",
    "src/Interpreters/ClientInfo.cpp",
    "src/Interpreters/ClientInfo.h",
    "src/Interpreters/Context.cpp",
    "src/Interpreters/Context.h",
    "src/Interpreters/QueryLog.cpp",
    "src/Interpreters/QueryThreadLog.cpp",
    "src/Interpreters/executeQuery.cpp",
    "src/Processors/QueryPlan/Serialization.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/01547_query_log_current_database.sql",
    "b/tests/queries/0_stateless/03312_line_numbers.reference",
    "b/tests/queries/0_stateless/03312_line_numbers.sql"
  ]
}