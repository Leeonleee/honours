{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 33429,
  "instance_id": "ClickHouse__ClickHouse-33429",
  "issue_numbers": [
    "18091"
  ],
  "base_commit": "cb7bac2db5534bbb740be0ae458527a9460e17ed",
  "patch": "diff --git a/docs/en/engines/database-engines/materialized-mysql.md b/docs/en/engines/database-engines/materialized-mysql.md\nindex cdc904f1e949..bcb026aa0dc5 100644\n--- a/docs/en/engines/database-engines/materialized-mysql.md\n+++ b/docs/en/engines/database-engines/materialized-mysql.md\n@@ -78,15 +78,21 @@ When working with the `MaterializedMySQL` database engine, [ReplacingMergeTree](\n | DATE, NEWDATE           | [Date](../../sql-reference/data-types/date.md)               |\n | DATETIME, TIMESTAMP     | [DateTime](../../sql-reference/data-types/datetime.md)       |\n | DATETIME2, TIMESTAMP2   | [DateTime64](../../sql-reference/data-types/datetime64.md)   |\n+| YEAR                    | [UInt16](../../sql-reference/data-types/int-uint.md)         |\n+| TIME                    | [Int64](../../sql-reference/data-types/int-uint.md)          |\n | ENUM                    | [Enum](../../sql-reference/data-types/enum.md)               |\n | STRING                  | [String](../../sql-reference/data-types/string.md)           |\n | VARCHAR, VAR_STRING     | [String](../../sql-reference/data-types/string.md)           |\n | BLOB                    | [String](../../sql-reference/data-types/string.md)           |\n+| GEOMETRY                | [String](../../sql-reference/data-types/string.md)           |\n | BINARY                  | [FixedString](../../sql-reference/data-types/fixedstring.md) |\n | BIT                     | [UInt64](../../sql-reference/data-types/int-uint.md)         |\n+| SET                     | [UInt64](../../sql-reference/data-types/int-uint.md)         |\n \n [Nullable](../../sql-reference/data-types/nullable.md) is supported.\n \n+The data of TIME type in MySQL is converted to microseconds in ClickHouse.\n+\n Other types are not supported. If MySQL table contains a column of such type, ClickHouse throws exception \"Unhandled data type\" and stops replication.\n \n ## Specifics and Recommendations {#specifics-and-recommendations}\ndiff --git a/src/Common/mysqlxx/mysqlxx/Types.h b/src/Common/mysqlxx/mysqlxx/Types.h\nindex 5fd9aa8bbc88..6ad4eb7c3550 100644\n--- a/src/Common/mysqlxx/mysqlxx/Types.h\n+++ b/src/Common/mysqlxx/mysqlxx/Types.h\n@@ -16,7 +16,15 @@ using MYSQL_ROW = char**;\n struct st_mysql_field;\n using MYSQL_FIELD = st_mysql_field;\n \n-enum struct enum_field_types;\n+enum struct enum_field_types { MYSQL_TYPE_DECIMAL, MYSQL_TYPE_TINY,\n+                        MYSQL_TYPE_SHORT, MYSQL_TYPE_LONG,\n+                        MYSQL_TYPE_FLOAT, MYSQL_TYPE_DOUBLE,\n+                        MYSQL_TYPE_NULL, MYSQL_TYPE_TIMESTAMP,\n+                        MYSQL_TYPE_LONGLONG, MYSQL_TYPE_INT24,\n+                        MYSQL_TYPE_DATE, MYSQL_TYPE_TIME,\n+                        MYSQL_TYPE_DATETIME, MYSQL_TYPE_YEAR,\n+                        MYSQL_TYPE_NEWDATE, MYSQL_TYPE_VARCHAR,\n+                        MYSQL_TYPE_BIT };\n \n #endif\n \ndiff --git a/src/Core/MySQL/MySQLReplication.cpp b/src/Core/MySQL/MySQLReplication.cpp\nindex fb230f412f01..50f6be23f83b 100644\n--- a/src/Core/MySQL/MySQLReplication.cpp\n+++ b/src/Core/MySQL/MySQLReplication.cpp\n@@ -204,6 +204,7 @@ namespace MySQLReplication\n                 case MYSQL_TYPE_DATE:\n                 case MYSQL_TYPE_DATETIME:\n                 case MYSQL_TYPE_NEWDATE:\n+                case MYSQL_TYPE_YEAR:\n                 {\n                     /// No data here.\n                     column_meta.emplace_back(0);\n@@ -214,7 +215,9 @@ namespace MySQLReplication\n                 case MYSQL_TYPE_DOUBLE:\n                 case MYSQL_TYPE_TIMESTAMP2:\n                 case MYSQL_TYPE_DATETIME2:\n+                case MYSQL_TYPE_TIME2:\n                 case MYSQL_TYPE_BLOB:\n+                case MYSQL_TYPE_GEOMETRY:\n                 {\n                     column_meta.emplace_back(UInt16(meta[pos]));\n                     pos += 1;\n@@ -432,6 +435,98 @@ namespace MySQLReplication\n                         row.push_back(Field(date_day_number.toUnderType()));\n                         break;\n                     }\n+                    case MYSQL_TYPE_YEAR: {\n+                        Int16 val = 0;\n+                        payload.readStrict(reinterpret_cast<char *>(&val), 1);\n+                        row.push_back(Field{UInt16{static_cast<UInt16>(val + 1900)}});\n+                        break;\n+                    }\n+                    case MYSQL_TYPE_TIME2:\n+                    {\n+                        UInt64 uintpart = 0UL;\n+                        Int32 frac = 0U;\n+                        Int64 ltime;\n+                        Int64 intpart;\n+                        switch (meta)\n+                        {\n+                            case 0:\n+                            {\n+                                readBigEndianStrict(payload, reinterpret_cast<char *>(&uintpart), 3);\n+                                intpart = uintpart - 0x800000L;\n+                                ltime = intpart << 24;\n+                                break;\n+                            }\n+                            case 1:\n+                            case 2:\n+                            {\n+                                readBigEndianStrict(payload, reinterpret_cast<char *>(&uintpart), 3);\n+                                intpart = uintpart - 0x800000L;\n+                                readBigEndianStrict(payload, reinterpret_cast<char *>(&frac), 1);\n+                                if (intpart < 0 && frac > 0)\n+                                {\n+                                    intpart ++;\n+                                    frac -= 0x100;\n+                                }\n+                                frac = frac * 10000;\n+                                ltime = intpart << 24;\n+                                break;\n+                            }\n+                            case 3:\n+                            case 4:\n+                            {\n+                                readBigEndianStrict(payload, reinterpret_cast<char *>(&uintpart), 3);\n+                                intpart = uintpart - 0x800000L;\n+                                readBigEndianStrict(payload, reinterpret_cast<char *>(&frac), 2);\n+                                if (intpart < 0 && frac > 0)\n+                                {\n+                                    intpart ++;\n+                                    frac -= 0x10000;\n+                                }\n+                                frac = frac * 100;\n+                                ltime = intpart << 24;\n+                                break;\n+                            }\n+                            case 5:\n+                            case 6:\n+                            {\n+                                readBigEndianStrict(payload, reinterpret_cast<char *>(&uintpart), 6);\n+                                intpart = uintpart - 0x800000000000L;\n+                                ltime = intpart;\n+                                frac = std::abs(intpart % (1L << 24));\n+                                break;\n+                            }\n+                            default:\n+                            {\n+                                readBigEndianStrict(payload, reinterpret_cast<char *>(&uintpart), 3);\n+                                intpart = uintpart - 0x800000L;\n+                                ltime = intpart << 24;\n+                                break;\n+                            }\n+                        }\n+                        Int64 hh, mm, ss;\n+                        bool negative = false;\n+                        if (intpart == 0)\n+                        {\n+                            hh = 0;\n+                            mm = 0;\n+                            ss = 0;\n+                        }\n+                        else\n+                        {\n+                            if (ltime < 0) negative= true;\n+                            UInt64 ultime = std::abs(ltime);\n+                            intpart = ultime >> 24;\n+                            hh = (intpart >> 12) % (1 << 10);\n+                            mm = (intpart >> 6) % (1 << 6);\n+                            ss = intpart % (1 << 6);\n+                        }\n+\n+                        Int64 time_micro = 0;\n+                        time_micro = (hh * 3600  + mm * 60 + ss) * 1000000 + std::abs(frac);\n+                        if (negative) time_micro = - time_micro;\n+                        row.push_back(Field{Int64{time_micro}});\n+                        break;\n+                    }\n                     case MYSQL_TYPE_DATETIME2:\n                     {\n                         Int64 val = 0;\n@@ -585,6 +680,14 @@ namespace MySQLReplication\n                         }\n                         break;\n                     }\n+                    case MYSQL_TYPE_SET:\n+                    {\n+                        UInt32 size = (meta & 0xff);\n+                        Bitmap bitmap1;\n+                        readBitmap(payload, bitmap1, size);\n+                        row.push_back(Field{UInt64{bitmap1.to_ulong()}});\n+                        break;\n+                    }\n                     case MYSQL_TYPE_BIT:\n                     {\n                         UInt32 bits = ((meta >> 8) * 8) + (meta & 0xff);\n@@ -631,6 +734,7 @@ namespace MySQLReplication\n                         row.push_back(Field{String{val}});\n                         break;\n                     }\n+                    case MYSQL_TYPE_GEOMETRY:\n                     case MYSQL_TYPE_BLOB:\n                     {\n                         UInt32 size = 0;\ndiff --git a/src/DataTypes/DataTypeString.cpp b/src/DataTypes/DataTypeString.cpp\nindex 7fa3a394be8a..b52d20242042 100644\n--- a/src/DataTypes/DataTypeString.cpp\n+++ b/src/DataTypes/DataTypeString.cpp\n@@ -92,5 +92,7 @@ void registerDataTypeString(DataTypeFactory & factory)\n     factory.registerAlias(\"BINARY LARGE OBJECT\", \"String\", DataTypeFactory::CaseInsensitive);\n     factory.registerAlias(\"BINARY VARYING\", \"String\", DataTypeFactory::CaseInsensitive);\n     factory.registerAlias(\"VARBINARY\", \"String\", DataTypeFactory::CaseInsensitive);\n+    factory.registerAlias(\"GEOMETRY\", \"String\", DataTypeFactory::CaseInsensitive); //mysql\n+\n }\n }\ndiff --git a/src/DataTypes/DataTypesNumber.cpp b/src/DataTypes/DataTypesNumber.cpp\nindex 0c9a410077fc..d85f52a7e6b4 100644\n--- a/src/DataTypes/DataTypesNumber.cpp\n+++ b/src/DataTypes/DataTypesNumber.cpp\n@@ -86,7 +86,10 @@ void registerDataTypeNumbers(DataTypeFactory & factory)\n     factory.registerAlias(\"INT UNSIGNED\", \"UInt32\", DataTypeFactory::CaseInsensitive);\n     factory.registerAlias(\"INTEGER UNSIGNED\", \"UInt32\", DataTypeFactory::CaseInsensitive);\n     factory.registerAlias(\"BIGINT UNSIGNED\", \"UInt64\", DataTypeFactory::CaseInsensitive);\n-    factory.registerAlias(\"BIT\", \"UInt64\", DataTypeFactory::CaseInsensitive);\n+    factory.registerAlias(\"BIT\", \"UInt64\", DataTypeFactory::CaseInsensitive);  /// MySQL\n+    factory.registerAlias(\"SET\", \"UInt64\", DataTypeFactory::CaseInsensitive);  /// MySQL\n+    factory.registerAlias(\"YEAR\", \"UInt16\", DataTypeFactory::CaseInsensitive);\n+    factory.registerAlias(\"TIME\", \"Int64\", DataTypeFactory::CaseInsensitive);\n }\n \n }\ndiff --git a/src/Databases/MySQL/MaterializedMySQLSyncThread.cpp b/src/Databases/MySQL/MaterializedMySQLSyncThread.cpp\nindex ce5a3e9a947f..9dbe611537b8 100644\n--- a/src/Databases/MySQL/MaterializedMySQLSyncThread.cpp\n+++ b/src/Databases/MySQL/MaterializedMySQLSyncThread.cpp\n@@ -17,6 +17,7 @@\n #include <Databases/MySQL/MaterializeMetadata.h>\n #include <Processors/Sources/MySQLSource.h>\n #include <IO/ReadBufferFromString.h>\n+#include <IO/Operators.h>\n #include <Interpreters/Context.h>\n #include <Interpreters/executeQuery.h>\n #include <Storages/StorageMergeTree.h>\n@@ -315,6 +316,47 @@ getTableOutput(const String & database_name, const String & table_name, ContextM\n     return std::move(res.pipeline);\n }\n \n+static inline String reWriteMysqlQueryColumn(mysqlxx::Pool::Entry & connection, const String & database_name, const String & table_name, const Settings & global_settings)\n+{\n+    Block tables_columns_sample_block\n+            {\n+                    { std::make_shared<DataTypeString>(),   \"column_name\" },\n+                    { std::make_shared<DataTypeString>(),   \"column_type\" }\n+            };\n+\n+    const String & query =  \"SELECT COLUMN_NAME AS column_name, COLUMN_TYPE AS column_type FROM INFORMATION_SCHEMA.COLUMNS\"\n+                            \" WHERE TABLE_SCHEMA = '\"  + backQuoteIfNeed(database_name) +\n+                            \"' AND TABLE_NAME = '\" + backQuoteIfNeed(table_name) +  \"' ORDER BY ORDINAL_POSITION\";\n+\n+    StreamSettings mysql_input_stream_settings(global_settings, false, true);\n+    auto mysql_source = std::make_unique<MySQLSource>(connection, query, tables_columns_sample_block, mysql_input_stream_settings);\n+\n+    Block block;\n+    WriteBufferFromOwnString query_columns;\n+    QueryPipeline pipeline(std::move(mysql_source));\n+    PullingPipelineExecutor executor(pipeline);\n+    while (executor.pull(block))\n+    {\n+        const auto & column_name_col = *block.getByPosition(0).column;\n+        const auto & column_type_col = *block.getByPosition(1).column;\n+        size_t rows = block.rows();\n+        for (size_t i = 0; i < rows; ++i)\n+        {\n+            String column_name = column_name_col[i].safeGet<String>();\n+            String column_type = column_type_col[i].safeGet<String>();\n+            //we can do something special conversion to guarantee select results is the same as the binlog parse results\n+            if (column_type.starts_with(\"set\"))\n+            {\n+                query_columns << (backQuote(column_name) + \" + 0\");\n+            } else\n+                query_columns << backQuote(column_name);\n+            query_columns << \",\";\n+        }\n+    }\n+    String query_columns_str = query_columns.str();\n+    return query_columns_str.substr(0, query_columns_str.length() - 1);\n+}\n+\n static inline void dumpDataForTables(\n     mysqlxx::Pool::Entry & connection, const std::unordered_map<String, String> & need_dumping_tables,\n     const String & query_prefix, const String & database_name, const String & mysql_database_name,\n@@ -334,9 +376,10 @@ static inline void dumpDataForTables(\n \n             auto pipeline = getTableOutput(database_name, table_name, query_context);\n             StreamSettings mysql_input_stream_settings(context->getSettingsRef());\n-            auto input = std::make_unique<MySQLSource>(\n-                connection, \"SELECT * FROM \" + backQuoteIfNeed(mysql_database_name) + \".\" + backQuoteIfNeed(table_name),\n-                pipeline.getHeader(), mysql_input_stream_settings);\n+            String mysql_select_all_query = \"SELECT \" + reWriteMysqlQueryColumn(connection, mysql_database_name, table_name, context->getSettings()) + \" FROM \"\n+                    + backQuoteIfNeed(mysql_database_name) + \".\" + backQuoteIfNeed(table_name);\n+            LOG_INFO(&Poco::Logger::get(\"MaterializedMySQLSyncThread(\" + database_name + \")\"), \"mysql_select_all_query is {}\", mysql_select_all_query);\n+            auto input = std::make_unique<MySQLSource>(connection, mysql_select_all_query, pipeline.getHeader(), mysql_input_stream_settings);\n             auto counting = std::make_shared<CountingTransform>(pipeline.getHeader());\n             Pipe pipe(std::move(input));\n             pipe.addTransform(counting);\ndiff --git a/src/Interpreters/MySQL/InterpretersMySQLDDLQuery.cpp b/src/Interpreters/MySQL/InterpretersMySQLDDLQuery.cpp\nindex 9494c4133ff8..df74a94ee577 100644\n--- a/src/Interpreters/MySQL/InterpretersMySQLDDLQuery.cpp\n+++ b/src/Interpreters/MySQL/InterpretersMySQLDDLQuery.cpp\n@@ -108,6 +108,9 @@ static NamesAndTypesList getColumnsList(const ASTExpressionList * columns_defini\n                     data_type_function->name = type_name_upper + \" UNSIGNED\";\n             }\n \n+            if (type_name_upper == \"SET\")\n+                data_type_function->arguments.reset();\n+\n             /// Transforms MySQL ENUM's list of strings to ClickHouse string-integer pairs\n             /// For example ENUM('a', 'b', 'c') -> ENUM('a'=1, 'b'=2, 'c'=3)\n             /// Elements on a position further than 32767 are assigned negative values, starting with -32768.\ndiff --git a/src/Processors/Sources/MySQLSource.cpp b/src/Processors/Sources/MySQLSource.cpp\nindex b0cb62340e90..538aba9d1f3a 100644\n--- a/src/Processors/Sources/MySQLSource.cpp\n+++ b/src/Processors/Sources/MySQLSource.cpp\n@@ -19,6 +19,7 @@\n #include <base/range.h>\n #include <base/logger_useful.h>\n #include <Processors/Sources/MySQLSource.h>\n+#include <boost/algorithm/string.hpp>\n \n \n namespace DB\n@@ -145,8 +146,7 @@ namespace\n                 break;\n             case ValueType::vtUInt64:\n             {\n-                //we don't have enum enum_field_types definition in mysqlxx/Types.h, so we use literal values directly here.\n-                if (static_cast<int>(mysql_type) == 16)\n+                if (mysql_type == enum_field_types::MYSQL_TYPE_BIT)\n                 {\n                     size_t n = value.size();\n                     UInt64 val = 0UL;\n@@ -175,9 +175,32 @@ namespace\n                 read_bytes_size += 4;\n                 break;\n             case ValueType::vtInt64:\n-                assert_cast<ColumnInt64 &>(column).insertValue(value.getInt());\n-                read_bytes_size += 8;\n+            {\n+                if (mysql_type == enum_field_types::MYSQL_TYPE_TIME)\n+                {\n+                    String time_str(value.data(), value.size());\n+                    bool negative = time_str.starts_with(\"-\");\n+                    if (negative) time_str = time_str.substr(1);\n+                    std::vector<String> hhmmss;\n+                    boost::split(hhmmss, time_str, [](char c) { return c == ':'; });\n+                    Int64 v = 0;\n+                    if (hhmmss.size() == 3)\n+                    {\n+                        v = (std::stoi(hhmmss[0]) * 3600 + std::stoi(hhmmss[1]) * 60 + std::stold(hhmmss[2])) * 1000000;\n+                    }\n+                    else\n+                        throw Exception(\"Unsupported value format\", ErrorCodes::NOT_IMPLEMENTED);\n+                    if (negative) v = -v;\n+                    assert_cast<ColumnInt64 &>(column).insertValue(v);\n+                    read_bytes_size += value.size();\n+                }\n+                else\n+                {\n+                    assert_cast<ColumnInt64 &>(column).insertValue(value.getInt());\n+                    read_bytes_size += 8;\n+                }\n                 break;\n+            }\n             case ValueType::vtFloat32:\n                 assert_cast<ColumnFloat32 &>(column).insertValue(value.getDouble());\n                 read_bytes_size += 4;\n",
  "test_patch": "diff --git a/src/Interpreters/MySQL/tests/gtest_create_rewritten.cpp b/src/Interpreters/MySQL/tests/gtest_create_rewritten.cpp\nindex efa0e921527c..680b9bd56068 100644\n--- a/src/Interpreters/MySQL/tests/gtest_create_rewritten.cpp\n+++ b/src/Interpreters/MySQL/tests/gtest_create_rewritten.cpp\n@@ -40,7 +40,8 @@ TEST(MySQLCreateRewritten, ColumnsDataType)\n         {\"TINYINT\", \"Int8\"}, {\"SMALLINT\", \"Int16\"}, {\"MEDIUMINT\", \"Int32\"}, {\"INT\", \"Int32\"},\n         {\"INTEGER\", \"Int32\"}, {\"BIGINT\", \"Int64\"}, {\"FLOAT\", \"Float32\"}, {\"DOUBLE\", \"Float64\"},\n         {\"VARCHAR(10)\", \"String\"}, {\"CHAR(10)\", \"String\"}, {\"Date\", \"Date\"}, {\"DateTime\", \"DateTime\"},\n-        {\"TIMESTAMP\", \"DateTime\"}, {\"BOOLEAN\", \"Bool\"}, {\"BIT\", \"UInt64\"}\n+        {\"TIMESTAMP\", \"DateTime\"}, {\"BOOLEAN\", \"Bool\"}, {\"BIT\", \"UInt64\"}, {\"SET\", \"UInt64\"},\n+        {\"YEAR\", \"UInt16\"}, {\"TIME\", \"Int64\"}, {\"GEOMETRY\", \"String\"}\n     };\n \n     for (const auto & [test_type, mapped_type] : test_types)\ndiff --git a/tests/integration/test_materialized_mysql_database/materialize_with_ddl.py b/tests/integration/test_materialized_mysql_database/materialize_with_ddl.py\nindex 1528103e1cb1..377a48be7edc 100644\n--- a/tests/integration/test_materialized_mysql_database/materialize_with_ddl.py\n+++ b/tests/integration/test_materialized_mysql_database/materialize_with_ddl.py\n@@ -1141,14 +1141,14 @@ def materialized_database_support_all_kinds_of_mysql_datatype(clickhouse_node, m\n             `v19` datetime(6) DEFAULT CURRENT_TIMESTAMP(6),\n             `v20` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n             `v21` TIMESTAMP(6) DEFAULT CURRENT_TIMESTAMP(6),\n-            /* todo support */\n-            # `v22` YEAR,\n-            # `v23` TIME,\n-            # `v24` TIME(3),\n-            # `v25` GEOMETRY,\n+            `v22` YEAR,\n+            `v23` TIME,\n+            `v24` TIME(6),\n+            `v25` GEOMETRY,\n             `v26` bit(4),\n+             /* todo support */\n             # `v27` JSON DEFAULT NULL,\n-            # `v28` set('a', 'c', 'f', 'd', 'e', 'b'),\n+            `v28` set('a', 'c', 'f', 'd', 'e', 'b'),\n             `v29` mediumint(4) unsigned NOT NULL DEFAULT '0',\n             `v30` varbinary(255) DEFAULT NULL COMMENT 'varbinary support',\n             `v31`  binary(200) DEFAULT NULL,\n@@ -1158,8 +1158,9 @@ def materialized_database_support_all_kinds_of_mysql_datatype(clickhouse_node, m\n         \"\"\")\n \n     mysql_node.query(\"\"\"\n-        INSERT INTO test_database_datatype.t1 (v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v26, v29, v30, v31, v32) values \n-        (1, 11, 9223372036854775807, -1,  1, 11, 18446744073709551615, -1.1,  1.1, -1.111, 1.111, 1.1111, '2021-10-06', 'text', 'varchar', 'BLOB', '2021-10-06 18:32:57',  '2021-10-06 18:32:57.482786', '2021-10-06 18:32:57', '2021-10-06 18:32:57.482786', b'1010', 11, 'varbinary', 'binary', 'RED');\n+        INSERT INTO test_database_datatype.t1 (v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v28, v29, v30, v31, v32) values \n+        (1, 11, 9223372036854775807, -1,  1, 11, 18446744073709551615, -1.1,  1.1, -1.111, 1.111, 1.1111, '2021-10-06', 'text', 'varchar', 'BLOB', '2021-10-06 18:32:57',  \n+        '2021-10-06 18:32:57.482786', '2021-10-06 18:32:57', '2021-10-06 18:32:57.482786', '2021', '838:59:59', '838:59:59.000000', ST_GeometryFromText('point(0.0 0.0)'), b'1010', 'a', 11, 'varbinary', 'binary', 'RED');\n         \"\"\")\n     clickhouse_node.query(\n         \"CREATE DATABASE test_database_datatype ENGINE = MaterializeMySQL('{}:3306', 'test_database_datatype', 'root', 'clickhouse')\".format(\n@@ -1167,14 +1168,18 @@ def materialized_database_support_all_kinds_of_mysql_datatype(clickhouse_node, m\n \n     check_query(clickhouse_node, \"SELECT name FROM system.tables WHERE database = 'test_database_datatype'\", \"t1\\n\")\n     # full synchronization check\n-    check_query(clickhouse_node, \"SELECT v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v26, v29, v30, v32 FROM test_database_datatype.t1 FORMAT TSV\",\n-                \"1\\t1\\t11\\t9223372036854775807\\t-1\\t1\\t11\\t18446744073709551615\\t-1.1\\t1.1\\t-1.111\\t1.111\\t1.1111\\t2021-10-06\\ttext\\tvarchar\\tBLOB\\t2021-10-06 18:32:57\\t2021-10-06 18:32:57.482786\\t2021-10-06 18:32:57\\t2021-10-06 18:32:57.482786\\t10\\t11\\tvarbinary\\tRED\\n\")\n+    check_query(clickhouse_node, \"SELECT v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, hex(v25), v26, v28, v29, v30, v32 FROM test_database_datatype.t1 FORMAT TSV\",\n+                \"1\\t1\\t11\\t9223372036854775807\\t-1\\t1\\t11\\t18446744073709551615\\t-1.1\\t1.1\\t-1.111\\t1.111\\t1.1111\\t2021-10-06\\ttext\\tvarchar\\tBLOB\\t2021-10-06 18:32:57\\t2021-10-06 18:32:57.482786\\t2021-10-06 18:32:57\" +\n+                \"\\t2021-10-06 18:32:57.482786\\t2021\\t3020399000000\\t3020399000000\\t00000000010100000000000000000000000000000000000000\\t10\\t1\\t11\\tvarbinary\\tRED\\n\")\n \n     mysql_node.query(\"\"\"\n-            INSERT INTO test_database_datatype.t1 (v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v26, v29, v30, v31, v32) values \n-            (2, 22, 9223372036854775807, -2,  2, 22, 18446744073709551615, -2.2,  2.2, -2.22, 2.222, 2.2222, '2021-10-07', 'text', 'varchar', 'BLOB',  '2021-10-07 18:32:57',  '2021-10-07 18:32:57.482786', '2021-10-07 18:32:57', '2021-10-07 18:32:57.482786', b'1011', 22, 'varbinary', 'binary', 'GREEN' );\n+            INSERT INTO test_database_datatype.t1 (v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, v25, v26, v28, v29, v30, v31, v32) values \n+            (2, 22, 9223372036854775807, -2,  2, 22, 18446744073709551615, -2.2,  2.2, -2.22, 2.222, 2.2222, '2021-10-07', 'text', 'varchar', 'BLOB',  '2021-10-07 18:32:57',  \n+            '2021-10-07 18:32:57.482786', '2021-10-07 18:32:57', '2021-10-07 18:32:57.482786', '2021', '-838:59:59', '-12:59:58.000001',  ST_GeometryFromText('point(120.153576 30.287459)'), b'1011', 'a,c', 22, 'varbinary', 'binary', 'GREEN' );\n             \"\"\")\n     # increment synchronization check\n-    check_query(clickhouse_node, \"SELECT v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v26, v29, v30, v32 FROM   test_database_datatype.t1 ORDER BY v1 FORMAT TSV\",\n-                \"1\\t1\\t11\\t9223372036854775807\\t-1\\t1\\t11\\t18446744073709551615\\t-1.1\\t1.1\\t-1.111\\t1.111\\t1.1111\\t2021-10-06\\ttext\\tvarchar\\tBLOB\\t2021-10-06 18:32:57\\t2021-10-06 18:32:57.482786\\t2021-10-06 18:32:57\\t2021-10-06 18:32:57.482786\\t10\\t11\\tvarbinary\\tRED\\n\" +\n-                \"2\\t2\\t22\\t9223372036854775807\\t-2\\t2\\t22\\t18446744073709551615\\t-2.2\\t2.2\\t-2.22\\t2.222\\t2.2222\\t2021-10-07\\ttext\\tvarchar\\tBLOB\\t2021-10-07 18:32:57\\t2021-10-07 18:32:57.482786\\t2021-10-07 18:32:57\\t2021-10-07 18:32:57.482786\\t11\\t22\\tvarbinary\\tGREEN\\n\")\n+    check_query(clickhouse_node, \"SELECT v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22, v23, v24, hex(v25), v26, v28, v29, v30, v32 FROM test_database_datatype.t1 FORMAT TSV\",\n+                \"1\\t1\\t11\\t9223372036854775807\\t-1\\t1\\t11\\t18446744073709551615\\t-1.1\\t1.1\\t-1.111\\t1.111\\t1.1111\\t2021-10-06\\ttext\\tvarchar\\tBLOB\\t2021-10-06 18:32:57\\t2021-10-06 18:32:57.482786\\t2021-10-06 18:32:57\\t2021-10-06 18:32:57.482786\" +\n+                \"\\t2021\\t3020399000000\\t3020399000000\\t00000000010100000000000000000000000000000000000000\\t10\\t1\\t11\\tvarbinary\\tRED\\n\" +\n+                \"2\\t2\\t22\\t9223372036854775807\\t-2\\t2\\t22\\t18446744073709551615\\t-2.2\\t2.2\\t-2.22\\t2.222\\t2.2222\\t2021-10-07\\ttext\\tvarchar\\tBLOB\\t2021-10-07 18:32:57\\t2021-10-07 18:32:57.482786\\t2021-10-07 18:32:57\\t2021-10-07 18:32:57.482786\" +\n+                \"\\t2021\\t-3020399000000\\t-46798000001\\t000000000101000000D55C6E30D4095E40DCF0BBE996493E40\\t11\\t3\\t22\\tvarbinary\\tGREEN\\n\")\n",
  "problem_statement": "MaterializeMySQL: support time data type\n<Error> MaterializeMySQLSyncThread: Code: 50, e.displayText() = DB::Exception: Unknown data type family: time, Stack trace (when copying this message, always include the lines below):\r\n\r\n0. DB::DataTypeFactory::findCreatorByName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const @ 0xd7689b2 in /usr/bin/clickhouse\r\n1. DB::DataTypeFactory::get(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::IAST> const&) const @ 0xd767d18 in /usr/bin/clickhouse\r\n2. DB::DataTypeFactory::get(std::__1::shared_ptr<DB::IAST> const&) const @ 0xd767b00 in /usr/bin/clickhouse\r\n3. ? @ 0xdf117d8 in /usr/bin/clickhouse\r\n4. DB::MySQLInterpreter::InterpreterCreateImpl::getRewrittenQueries(DB::MySQLParser::ASTCreateQuery const&, DB::Context const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) @ 0xdf0dd57 in /usr/bin/clickhouse\r\n5. DB::MySQLInterpreter::InterpreterMySQLDDLQuery<DB::MySQLInterpreter::InterpreterCreateImpl>::execute() @ 0xdba14bc in /usr/bin/clickhouse\r\n6. DB::InterpreterExternalDDLQuery::execute() @ 0xdba0507 in /usr/bin/clickhouse\r\n7. ? @ 0xdeec307 in /usr/bin/clickhouse\r\n8. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool) @ 0xdeeaedd in /usr/bin/clickhouse\r\n9. ? @ 0xdb4d8c4 in /usr/bin/clickhouse\r\n10. DB::MaterializeMySQLSyncThread::executeDDLAtomic(DB::MySQLReplication::QueryEvent const&) @ 0xdb4d3ab in /usr/bin/clickhouse\r\n11. DB::commitMetadata(std::__1::function<void ()> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) @ 0xdb6bf5e in /usr/bin/clickhouse\r\n12. DB::MaterializeMetadata::transaction(DB::MySQLReplication::Position const&, std::__1::function<void ()> const&) @ 0xdb6c451 in /usr/bin/clickhouse\r\n13. DB::MaterializeMySQLSyncThread::onEvent(DB::MaterializeMySQLSyncThread::Buffers&, std::__1::shared_ptr<DB::MySQLReplication::EventBase> const&, DB::MaterializeMetadata&) @ 0xdb48be8 in /usr/bin/clickhouse\r\n14. DB::MaterializeMySQLSyncThread::synchronization(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) @ 0xdb4624c in /usr/bin/clickhouse\r\n15. ? @ 0xdb64b7a in /usr/bin/clickhouse\r\n16. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x7d1baad in /usr/bin/clickhouse\r\n17. ? @ 0x7d1f5d3 in /usr/bin/clickhouse\r\n18. start_thread @ 0x7e65 in /usr/lib64/libpthread-2.17.so\r\n19. __clone @ 0xfe88d in /usr/lib64/libc-2.17.so\r\n (version 20.12.3.3 (official build))\n",
  "hints_text": "I found that clickhouse has no time data type, maybe MaterializeMySQL can convert the time data type to string",
  "created_at": "2022-01-06T06:20:01Z"
}