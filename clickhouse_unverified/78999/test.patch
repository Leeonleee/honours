diff --git a/tests/queries/0_stateless/03408_limit_by_rows_before_limit.reference b/tests/queries/0_stateless/03408_limit_by_rows_before_limit.reference
new file mode 100644
index 000000000000..54c63b6e880f
--- /dev/null
+++ b/tests/queries/0_stateless/03408_limit_by_rows_before_limit.reference
@@ -0,0 +1,161 @@
+-- Assert total number of groups and records in unsorted
+10	50
+
+-- Assert rows_before_limit for unsorted ORDER BY + LIMIT BY + LIMIT
+{
+	"meta":
+	[
+		{
+			"name": "id",
+			"type": "Int32"
+		},
+		{
+			"name": "val",
+			"type": "String"
+		}
+	],
+
+	"data":
+	[
+		[0, "00"],
+		[1, "01"],
+		[2, "02"]
+	],
+
+	"rows": 3,
+
+	"rows_before_limit_at_least": 3
+}
+
+-- Assert rows_before_limit for unsorted ORDER BY + LIMIT BY + LIMIT, exact
+{
+	"meta":
+	[
+		{
+			"name": "id",
+			"type": "Int32"
+		},
+		{
+			"name": "val",
+			"type": "String"
+		}
+	],
+
+	"data":
+	[
+		[0, "00"],
+		[1, "01"],
+		[2, "02"]
+	],
+
+	"rows": 3,
+
+	"rows_before_limit_at_least": 10
+}
+
+-- Assert rows_before_limit for unsorted HAVING + ORDER BY + LIMIT BY + LIMIT, exact
+{
+	"meta":
+	[
+		{
+			"name": "id",
+			"type": "Int32"
+		},
+		{
+			"name": "val",
+			"type": "String"
+		}
+	],
+
+	"data":
+	[
+		[0, "40"],
+		[1, "41"],
+		[2, "42"]
+	],
+
+	"rows": 3,
+
+	"rows_before_limit_at_least": 7
+}
+
+-- Assert total number of groups and records in sorted
+10	50
+
+-- Assert rows_before_limit for sorted ORDER BY + LIMIT BY + LIMIT
+{
+	"meta":
+	[
+		{
+			"name": "id",
+			"type": "Int32"
+		},
+		{
+			"name": "val",
+			"type": "String"
+		}
+	],
+
+	"data":
+	[
+		[0, "00"],
+		[1, "01"],
+		[2, "02"]
+	],
+
+	"rows": 3,
+
+	"rows_before_limit_at_least": 3
+}
+
+-- Assert rows_before_limit for sorted ORDER BY + LIMIT BY + LIMIT, exact
+{
+	"meta":
+	[
+		{
+			"name": "id",
+			"type": "Int32"
+		},
+		{
+			"name": "val",
+			"type": "String"
+		}
+	],
+
+	"data":
+	[
+		[0, "00"],
+		[1, "01"],
+		[2, "02"]
+	],
+
+	"rows": 3,
+
+	"rows_before_limit_at_least": 10
+}
+
+-- Assert rows_before_limit for sorted HAVING + ORDER BY + LIMIT BY + LIMIT, exact
+{
+	"meta":
+	[
+		{
+			"name": "id",
+			"type": "Int32"
+		},
+		{
+			"name": "val",
+			"type": "String"
+		}
+	],
+
+	"data":
+	[
+		[0, "40"],
+		[1, "41"],
+		[2, "42"]
+	],
+
+	"rows": 3,
+
+	"rows_before_limit_at_least": 7
+}
diff --git a/tests/queries/0_stateless/03408_limit_by_rows_before_limit.sql b/tests/queries/0_stateless/03408_limit_by_rows_before_limit.sql
new file mode 100644
index 000000000000..9a897b5edeff
--- /dev/null
+++ b/tests/queries/0_stateless/03408_limit_by_rows_before_limit.sql
@@ -0,0 +1,60 @@
+SET output_format_write_statistics = 0;
+
+DROP TABLE IF EXISTS 03408_unsorted;
+
+CREATE TABLE 03408_unsorted (id Int32, val String) ENGINE = MergeTree ORDER BY tuple() SETTINGS min_bytes_for_wide_part=1
+AS
+SELECT number % 10, leftPad(toString(number), 2, '0') FROM numbers(50);
+
+SELECT '-- Assert total number of groups and records in unsorted';
+SELECT uniqExact(id), count() FROM 03408_unsorted;
+
+SELECT '';
+SELECT '-- Assert rows_before_limit for unsorted ORDER BY + LIMIT BY + LIMIT';
+
+SELECT id, val FROM 03408_unsorted ORDER BY id, val LIMIT 1 BY id LIMIT 3
+FORMAT JsonCompact SETTINGS max_block_size=1, exact_rows_before_limit=0;
+
+SELECT '';
+SELECT '-- Assert rows_before_limit for unsorted ORDER BY + LIMIT BY + LIMIT, exact';
+
+SELECT id, val FROM 03408_unsorted ORDER BY id, val LIMIT 1 BY id LIMIT 3
+FORMAT JsonCompact SETTINGS max_block_size=1, exact_rows_before_limit=1;
+
+SELECT '';
+SELECT '-- Assert rows_before_limit for unsorted HAVING + ORDER BY + LIMIT BY + LIMIT, exact';
+
+SELECT id, val FROM 03408_unsorted GROUP BY id, val HAVING id < 7 ORDER BY id, val DESC LIMIT 1 BY id LIMIT 3
+FORMAT JsonCompact SETTINGS max_block_size=1, exact_rows_before_limit=1;
+
+DROP TABLE 03408_unsorted;
+
+DROP TABLE IF EXISTS 03408_sorted;
+
+CREATE TABLE 03408_sorted (id Int32, val String) ENGINE = MergeTree ORDER BY (id, val) SETTINGS min_bytes_for_wide_part=1
+AS
+SELECT number % 10, leftPad(toString(number), 2, '0') FROM numbers(50);
+
+SELECT '';
+SELECT '-- Assert total number of groups and records in sorted';
+SELECT uniqExact(id), count() FROM 03408_sorted;
+
+SELECT '';
+SELECT '-- Assert rows_before_limit for sorted ORDER BY + LIMIT BY + LIMIT';
+
+SELECT id, val FROM 03408_sorted ORDER BY id, val LIMIT 1 BY id LIMIT 3
+FORMAT JsonCompact SETTINGS max_block_size=1, exact_rows_before_limit=0;
+
+SELECT '';
+SELECT '-- Assert rows_before_limit for sorted ORDER BY + LIMIT BY + LIMIT, exact';
+
+SELECT id, val FROM 03408_sorted ORDER BY id, val LIMIT 1 BY id LIMIT 3
+FORMAT JsonCompact SETTINGS max_block_size=1, exact_rows_before_limit=1;
+
+SELECT '';
+SELECT '-- Assert rows_before_limit for sorted HAVING + ORDER BY + LIMIT BY + LIMIT, exact';
+
+SELECT id, val FROM 03408_sorted GROUP BY id, val HAVING id < 7 ORDER BY id, val DESC LIMIT 1 BY id LIMIT 3
+FORMAT JsonCompact SETTINGS max_block_size=1, exact_rows_before_limit=1;
+
+DROP TABLE 03408_sorted;
diff --git a/tests/queries/0_stateless/03408_limit_by_rows_before_limit_dist.reference b/tests/queries/0_stateless/03408_limit_by_rows_before_limit_dist.reference
new file mode 100644
index 000000000000..e84fb63fe260
--- /dev/null
+++ b/tests/queries/0_stateless/03408_limit_by_rows_before_limit_dist.reference
@@ -0,0 +1,107 @@
+-- Assert total number of groups and records in distributed
+10	100
+
+-- Assert rows_before_limit for distributed ORDER BY + LIMIT BY + LIMIT
+{
+	"meta":
+	[
+		{
+			"name": "id",
+			"type": "Int32"
+		},
+		{
+			"name": "val",
+			"type": "String"
+		}
+	],
+
+	"data":
+	[
+		[0, "00"],
+		[1, "01"],
+		[2, "02"]
+	],
+
+	"rows": 3,
+
+	"rows_before_limit_at_least": 3
+}
+
+-- Assert rows_before_limit for distributed ORDER BY + LIMIT BY + LIMIT, exact
+{
+	"meta":
+	[
+		{
+			"name": "id",
+			"type": "Int32"
+		},
+		{
+			"name": "val",
+			"type": "String"
+		}
+	],
+
+	"data":
+	[
+		[0, "00"],
+		[1, "01"],
+		[2, "02"]
+	],
+
+	"rows": 3,
+
+	"rows_before_limit_at_least": 10
+}
+
+-- Assert rows_before_limit for distributed HAVING + ORDER BY + LIMIT BY + LIMIT, exact
+{
+	"meta":
+	[
+		{
+			"name": "id",
+			"type": "Int32"
+		},
+		{
+			"name": "val",
+			"type": "String"
+		}
+	],
+
+	"data":
+	[
+		[0, "40"],
+		[1, "41"],
+		[2, "42"]
+	],
+
+	"rows": 3,
+
+	"rows_before_limit_at_least": 7
+}
+
+-- Assert rows_before_limit for distributed without LIMIT BY on initiator, exact
+{
+	"meta":
+	[
+		{
+			"name": "id",
+			"type": "Int32"
+		},
+		{
+			"name": "max(val)",
+			"type": "String"
+		}
+	],
+
+	"data":
+	[
+		[0, "40"],
+		[0, "40"],
+		[1, "41"],
+		[1, "41"]
+	],
+
+	"rows": 4,
+
+	"rows_before_limit_at_least": 20
+}
diff --git a/tests/queries/0_stateless/03408_limit_by_rows_before_limit_dist.sql b/tests/queries/0_stateless/03408_limit_by_rows_before_limit_dist.sql
new file mode 100644
index 000000000000..48cb4a2241b0
--- /dev/null
+++ b/tests/queries/0_stateless/03408_limit_by_rows_before_limit_dist.sql
@@ -0,0 +1,42 @@
+-- Tags: shard
+
+SET output_format_write_statistics = 0;
+
+DROP TABLE IF EXISTS 03408_local;
+DROP TABLE IF EXISTS 03408_dist;
+
+CREATE TABLE 03408_local (id Int32, val String) ENGINE = MergeTree ORDER BY tuple() SETTINGS min_bytes_for_wide_part=1
+AS
+SELECT number % 10, leftPad(toString(number), 2, '0') FROM numbers(50);
+
+CREATE TABLE 03408_dist(id Int32, val String) engine = Distributed(test_cluster_two_shards, currentDatabase(), 03408_local, id);
+
+SELECT '-- Assert total number of groups and records in distributed';
+SELECT uniqExact(id), count() FROM 03408_dist;
+
+SELECT '';
+SELECT '-- Assert rows_before_limit for distributed ORDER BY + LIMIT BY + LIMIT';
+
+SELECT id, val FROM 03408_dist ORDER BY id, val LIMIT 1 BY id LIMIT 3
+FORMAT JsonCompact SETTINGS max_block_size=1, exact_rows_before_limit=0;
+
+SELECT '';
+SELECT '-- Assert rows_before_limit for distributed ORDER BY + LIMIT BY + LIMIT, exact';
+
+SELECT id, val FROM 03408_dist ORDER BY id, val LIMIT 1 BY id LIMIT 3
+FORMAT JsonCompact SETTINGS max_block_size=1, exact_rows_before_limit=1;
+
+SELECT '';
+SELECT '-- Assert rows_before_limit for distributed HAVING + ORDER BY + LIMIT BY + LIMIT, exact';
+
+SELECT id, val FROM 03408_dist GROUP BY id, val HAVING id < 7 ORDER BY id, val DESC LIMIT 1 BY id LIMIT 3
+FORMAT JsonCompact SETTINGS max_block_size=1, exact_rows_before_limit=1;
+
+SELECT '';
+SELECT '-- Assert rows_before_limit for distributed without LIMIT BY on initiator, exact';
+
+SELECT id, max(val) FROM 03408_dist GROUP BY id ORDER BY id LIMIT 1 BY id LIMIT 4
+FORMAT JSONCompact SETTINGS max_block_size=1, exact_rows_before_limit = 1, distributed_group_by_no_merge=2;
+
+DROP TABLE 03408_local;
+DROP TABLE 03408_dist;
diff --git a/tests/queries/0_stateless/03408_limit_by_rows_before_limit_mem.reference b/tests/queries/0_stateless/03408_limit_by_rows_before_limit_mem.reference
new file mode 100644
index 000000000000..0dd922754c02
--- /dev/null
+++ b/tests/queries/0_stateless/03408_limit_by_rows_before_limit_mem.reference
@@ -0,0 +1,54 @@
+-- Assert total number of groups and records in memory
+10	50
+
+-- Assert rows_before_limit for memory ORDER BY + LIMIT BY + LIMIT, exact
+{
+	"meta":
+	[
+		{
+			"name": "id",
+			"type": "Int32"
+		},
+		{
+			"name": "val",
+			"type": "String"
+		}
+	],
+
+	"data":
+	[
+		[0, "00"],
+		[1, "01"],
+		[2, "02"]
+	],
+
+	"rows": 3,
+
+	"rows_before_limit_at_least": 10
+}
+
+-- Assert rows_before_limit for memory HAVING + ORDER BY + LIMIT BY + LIMIT, exact
+{
+	"meta":
+	[
+		{
+			"name": "id",
+			"type": "Int32"
+		},
+		{
+			"name": "val",
+			"type": "String"
+		}
+	],
+
+	"data":
+	[
+		[0, "40"],
+		[1, "41"],
+		[2, "42"]
+	],
+
+	"rows": 3,
+
+	"rows_before_limit_at_least": 7
+}
diff --git a/tests/queries/0_stateless/03408_limit_by_rows_before_limit_mem.sql b/tests/queries/0_stateless/03408_limit_by_rows_before_limit_mem.sql
new file mode 100644
index 000000000000..8c80ff80453b
--- /dev/null
+++ b/tests/queries/0_stateless/03408_limit_by_rows_before_limit_mem.sql
@@ -0,0 +1,24 @@
+-- Tags: no-parallel-replicas
+
+SET output_format_write_statistics = 0;
+
+DROP TABLE IF EXISTS 03408_memory;
+
+CREATE TABLE 03408_memory (id Int32, val String) ENGINE = Memory
+AS
+SELECT number % 10, leftPad(toString(number), 2, '0') FROM numbers(50);
+
+SELECT '-- Assert total number of groups and records in memory';
+SELECT uniqExact(id), count() FROM 03408_memory;
+
+SELECT '';
+SELECT '-- Assert rows_before_limit for memory ORDER BY + LIMIT BY + LIMIT, exact';
+SELECT id, val FROM 03408_memory ORDER BY id, val LIMIT 1 BY id LIMIT 3
+FORMAT JsonCompact SETTINGS exact_rows_before_limit=1;
+
+SELECT '';
+SELECT '-- Assert rows_before_limit for memory HAVING + ORDER BY + LIMIT BY + LIMIT, exact';
+SELECT id, val FROM 03408_memory GROUP BY id, val HAVING id < 7 ORDER BY id, val DESC LIMIT 1 BY id LIMIT 3
+FORMAT JsonCompact SETTINGS exact_rows_before_limit=1;
+
+DROP TABLE 03408_memory;
