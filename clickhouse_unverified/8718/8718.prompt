You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Inconstitency about the WHERE filtering with Nullable columns with operator <= and >=
**Describe the bug or unexpected behaviour**

When we try to filter using a `Nullable` column using the operator `>=` and `<=`, we could have some unexpected results depending the complexity of the filtering, where the `NULL` columns could be returned. 

**How to reproduce**

```
CREATE TABLE foo (
    `id` UInt32,
    `status` Nullable(UInt32)
)  ENGINE = MergeTree()
   PARTITION BY id % 5
   PRIMARY KEY (id)
   ORDER BY (id, assumeNotNull(status));

INSERT INTO foo SELECT number, nullIf(number % 3, 1) from system.numbers LIMIT 1000000;
```

On this example, we set every status where his `status = 1` to `NULL`, so we don't have any status who correspond to 1.

```
SELECT count()
FROM foo
WHERE ((status >= 1) AND (status <= 1))
      OR ((status >= 1) AND (status <= 1))
      OR ((status >= 1) AND (status <= 1))
      OR ((status >= 1) AND (status <= 1))
      OR ((status >= 1) AND (status <= 1))
      OR ((status >= 1) AND (status <= 1))
      OR ((status >= 1) AND (status <= 1))
      OR ((status >= 1) AND (status <= 1))
      OR ((status >= 1) AND (status <= 1))
      OR ((status >= 1) AND (status <= 1))
      OR ((status >= 1) AND (status <= 1));

┌─count()─┐
│  333333 │
└─────────┘

```
On this case, if we show what values we got on the table `foo` for the column `status`, the value is equal to `NULL`

While :

```
SELECT count()
FROM foo
WHERE status = 1;

┌─count()─┐
│       0 │
└─────────┘
```

or even a bit weirder, if we remove only one clause from the original `SELECT` query.

```
SELECT count()
FROM foo
WHERE ((status >= 1) AND (status <= 1))
      OR ((status >= 1) AND (status <= 1))
      OR ((status >= 1) AND (status <= 1))
      OR ((status >= 1) AND (status <= 1))
      OR ((status >= 1) AND (status <= 1))
      OR ((status >= 1) AND (status <= 1))
      OR ((status >= 1) AND (status <= 1))
      OR ((status >= 1) AND (status <= 1))
      OR ((status >= 1) AND (status <= 1))
      OR ((status >= 1) AND (status <= 1));

┌─count()─┐
│       0 │
└─────────┘

```

* Which ClickHouse server version to use

`19.17.2.4`

**Expected behavior**
We should have a consistent result for the three queries, where ClickHouse shouldn't return any rows.
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
