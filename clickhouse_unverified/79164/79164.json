{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 79164,
  "instance_id": "ClickHouse__ClickHouse-79164",
  "issue_numbers": [
    "77917"
  ],
  "base_commit": "c765b946991b578af228a43e68979f9681b26e2f",
  "patch": "diff --git a/src/Processors/QueryPlan/Optimizations/filterPushDown.cpp b/src/Processors/QueryPlan/Optimizations/filterPushDown.cpp\nindex df87d49d3b94..5796ef5a610b 100644\n--- a/src/Processors/QueryPlan/Optimizations/filterPushDown.cpp\n+++ b/src/Processors/QueryPlan/Optimizations/filterPushDown.cpp\n@@ -152,6 +152,14 @@ addNewFilterStepOrThrow(QueryPlan::Node * parent_node, QueryPlan::Nodes & nodes,\n     /// New filter column is the first one.\n     String split_filter_column_name = split_filter.getOutputs().front()->result_name;\n \n+    // If no new columns added, filter just used one of the input columns as-is and moved it to the front, move it back to keep aggregation key in order.\n+    if (const auto & input = node.children.at(0)->step->getOutputHeader(); split_filter.getOutputs().size() == input.columns())\n+    {\n+        auto pos = input.getPositionByName(split_filter_column_name);\n+        if (pos != 0)\n+            std::rotate(split_filter.getOutputs().begin(), split_filter.getOutputs().begin() + 1, split_filter.getOutputs().begin() + pos + 1);\n+    }\n+\n     node.step = std::make_unique<FilterStep>(\n         node.children.at(0)->step->getOutputHeader(), std::move(split_filter), std::move(split_filter_column_name), can_remove_filter);\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01798_having_push_down.reference b/tests/queries/0_stateless/01798_having_push_down.reference\nindex 6fddbbee6b50..2cee78a81129 100644\n--- a/tests/queries/0_stateless/01798_having_push_down.reference\n+++ b/tests/queries/0_stateless/01798_having_push_down.reference\n@@ -1,3 +1,5 @@\n 1\t1\t2\n 1\t\\N\n 1\t1\t2\n+2\n+1\ndiff --git a/tests/queries/0_stateless/01798_having_push_down.sql b/tests/queries/0_stateless/01798_having_push_down.sql\nindex af32ed7adfff..afedc8c03590 100644\n--- a/tests/queries/0_stateless/01798_having_push_down.sql\n+++ b/tests/queries/0_stateless/01798_having_push_down.sql\n@@ -25,3 +25,11 @@ SELECT sum(c0 = 0), min(c0 + 1), sum(c0 + 2) FROM t_having\n GROUP BY c0 HAVING c0 = 0;\n \n DROP TABLE t_having;\n+\n+CREATE TABLE t_exact (c0 Bool, c1 Int) ENGINE = MergeTree() ORDER BY tuple();\n+INSERT INTO TABLE t_exact (c0, c1) VALUES (FALSE, 1), (TRUE, 2);\n+SELECT c1 FROM t_exact GROUP BY c1, c0 HAVING c0;\n+DROP TABLE t_exact;\n+\n+SELECT 1 FROM remote('127.0.0.{1,1}') GROUP BY (2, materialize(3)) HAVING materialize(3) SETTINGS group_by_use_nulls = true;\n+\n",
  "problem_statement": "Logical error: Wrong key in block with `group_by_use_nulls` + `remote` + `QUALIFY`\n### Describe the bug\n\nhttps://s3.amazonaws.com/clickhouse-test-reports/json.html?REF=master&sha=c69c63368fbaabc7abee88bead33b8395c9ae8fa&name_0=MasterCI&name_1=AST%20fuzzer%20%28debug%29\n\n### How to reproduce\n\nNeeds a server with asserts (debug)\n\n```\nSELECT\n    (10 IS NOT NULL, 10, 10, *, 10, *, *, *, *, *, *, *),\n    (*, *, isZeroOrNull(10), *, 10, *, *, *, *, *, 10)\nFROM remote('127.0.0.{1,2}')\nGROUP BY\n    (*, *, *, 10, *, materialize(10), *, 10, *, *, *),\n    2,\n    (assumeNotNull(10) IS NOT NULL, 10, toLowCardinality(10) IS NULL, *, toUInt256(10), *, *, *, *, *, *)\nQUALIFY materialize(10)\nSETTINGS group_by_use_nulls = true\n```\n\nNo issues fine with `group_by_use_nulls=false`.\nNo issues if `remote('127.0.0.{1,2}')` is replaced by `system.one`\nNo issues if `QUALIFY` is removed\n\n### Error message and/or stacktrace\n\nhttps://pastila.nl/?00018202/d1552738253c05323901dd30d8f24231#GCmwdODX+vk5bfEEocpFyg==\n",
  "hints_text": "Reproduced today with BuzzHouse in an ASAN build with:\n\n```sql\nCREATE TABLE t0 (c0 Bool, c1 Int) ENGINE = MergeTree() ORDER BY tuple();\nINSERT INTO TABLE t0 (c0, c1) VALUES (FALSE, 1), (TRUE, 2);\nSELECT c1 FROM t0 GROUP BY c1, c0 QUALIFY c0;\n```\nStack trace:\n```\n<Fatal> : Logical error: 'Wrong key in block [__table1.c0 Bool UInt8(size = 1), __table1.c1 Int32 Int32(size = 1)] at position 0, expected keys: [__table1.c1, __table1.c0]'.\n<Fatal> : Stack trace (when copying this message, always include the lines below):\n\n0. contrib/llvm-project/libcxx/include/__exception/exception.h:113: Poco::Exception::Exception(String const&, int) @ 0x0000000037f78af1\n1. src/Common/Exception.cpp:108: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000001be3e6b1\n2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000c17e20b\n3. src/Common/Exception.h:130: DB::Exception::Exception<String, unsigned long&, fmt::v11::join_view<std::__wrap_iter<String const*>, std::__wrap_iter<String const*>, char>>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<unsigned long&>::type, std::type_identity<fmt::v11::join_view<std::__wrap_iter<String const*>, std::__wrap_iter<String const*>, char>>::type>, String&&, unsigned long&, fmt::v11::join_view<std::__wrap_iter<String const*>, std::__wrap_iter<String const*>, char>&&) @ 0x000000002971eb04\n4. src/Interpreters/Aggregator.cpp:345: DB::Aggregator::Params::makeRawKeyColumns(DB::Block const&) const @ 0x00000000295b17b5\n5. src/Interpreters/Aggregator.cpp:2892: void DB::Aggregator::mergeStreamsImpl<DB::AggregationMethodKeysFixed<HashMapTable<unsigned long, HashMapCell<unsigned long, char*, HashCRC32<unsigned long>, HashTableNoState, PairNoInit<unsigned long, char*>>, HashCRC32<unsigned long>, HashTableGrowerWithPrecalculation<8ul>, Allocator<true, true>>, false, false, false>, HashMapTable<unsigned long, HashMapCell<unsigned long, char*, HashCRC32<unsigned long>, HashTableNoState, PairNoInit<unsigned long, char*>>, HashCRC32<unsigned long>, HashTableGrowerWithPrecalculation<8ul>, Allocator<true, true>>>(DB::Block, DB::Arena*, DB::AggregationMethodKeysFixed<HashMapTable<unsigned long, HashMapCell<unsigned long, char*, HashCRC32<unsigned long>, HashTableNoState, PairNoInit<unsigned long, char*>>, HashCRC32<unsigned long>, HashTableGrowerWithPrecalculation<8ul>, Allocator<true, true>>, false, false, false>&, HashMapTable<unsigned long, HashMapCell<unsigned long, char*, HashCRC32<unsigned long>, HashTableNoState, PairNoInit<unsigned long, char*>>, HashCRC32<unsigned long>, HashTableGrowerWithPrecalculation<8ul>, Allocator<true, true>>&, char*, DB::ColumnsHashing::LastElementCacheStats&, bool, DB::Arena*) const @ 0x0000000029793412\n6. src/Interpreters/Aggregator.cpp:3250: DB::Aggregator::mergeBlocks(std::list<DB::Block, std::allocator<DB::Block>>&, bool, std::atomic<bool>&) @ 0x00000000295f4637\n7. src/Processors/Transforms/MergingAggregatedMemoryEfficientTransform.cpp:366: DB::MergingAggregatedBucketTransform::transform(DB::Chunk&) @ 0x00000000302eaf46\n8. src/Processors/ISimpleTransform.h:33: DB::ISimpleTransform::transform(DB::Chunk&, DB::Chunk&) @ 0x00000000217421bf\n9. src/Processors/ISimpleTransform.cpp:89: DB::ISimpleTransform::work() @ 0x000000002fc2f283\n10. src/Processors/Executors/ExecutionThreadContext.cpp:53: DB::ExecutionThreadContext::executeTask() @ 0x000000002fc74114\n11. src/Processors/Executors/PipelineExecutor.cpp:296: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x000000002fc54c60\n12. src/Processors/Executors/PipelineExecutor.cpp:262: void std::__function::__policy_invoker<void ()>::__call_impl[abi:ne190107]<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreadsImpl()::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x000000002fc5769d\n13. contrib/llvm-project/libcxx/include/__functional/function.h:716: ? @ 0x000000001c10eef2\n14. contrib/llvm-project/libcxx/include/__type_traits/invoke.h:117: ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::ThreadFromThreadPool*&&)::'lambda'()::operator()() @ 0x000000001c11ce43\n15. contrib/llvm-project/libcxx/include/__functional/function.h:716: ? @ 0x000000001c1096d1\n16. contrib/llvm-project/libcxx/include/__type_traits/invoke.h:117: void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x000000001c117b30\n17. asan_thread_start(void*) @ 0x000000000c130e77\n18. ? @ 0x00007ffff7ca1e2e\n19. ? @ 0x00007ffff7d33a4c\n```",
  "created_at": "2025-04-14T18:27:54Z"
}