{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 16570,
  "instance_id": "ClickHouse__ClickHouse-16570",
  "issue_numbers": [
    "5488"
  ],
  "base_commit": "cb139203b731e5950de37a336fa55df47ea29e5c",
  "patch": "diff --git a/docs/en/sql-reference/functions/hash-functions.md b/docs/en/sql-reference/functions/hash-functions.md\nindex 73e9ef6254e3..3594737c18a8 100644\n--- a/docs/en/sql-reference/functions/hash-functions.md\n+++ b/docs/en/sql-reference/functions/hash-functions.md\n@@ -153,15 +153,18 @@ A fast, decent-quality non-cryptographic hash function for a string obtained fro\n `URLHash(s, N)` \u2013 Calculates a hash from a string up to the N level in the URL hierarchy, without one of the trailing symbols `/`,`?` or `#` at the end, if present.\n Levels are the same as in URLHierarchy. This function is specific to Yandex.Metrica.\n \n+## farmFingerprint64 {#farmfingerprint64}\n+\n ## farmHash64 {#farmhash64}\n \n-Produces a 64-bit [FarmHash](https://github.com/google/farmhash) hash value.\n+Produces a 64-bit [FarmHash](https://github.com/google/farmhash) or Fingerprint value. Prefer `farmFingerprint64` for a stable and portable value.\n \n ``` sql\n+farmFingerprint64(par1, ...)\n farmHash64(par1, ...)\n ```\n \n-The function uses the `Hash64` method from all [available methods](https://github.com/google/farmhash/blob/master/src/farmhash.h).\n+These functions use the `Fingerprint64` and `Hash64` method respectively from all [available methods](https://github.com/google/farmhash/blob/master/src/farmhash.h).\n \n **Parameters**\n \ndiff --git a/src/Functions/FunctionsHashing.cpp b/src/Functions/FunctionsHashing.cpp\nindex 900455a10159..5983e97a093b 100644\n--- a/src/Functions/FunctionsHashing.cpp\n+++ b/src/Functions/FunctionsHashing.cpp\n@@ -18,6 +18,7 @@ void registerFunctionsHashing(FunctionFactory & factory)\n     factory.registerFunction<FunctionSipHash64>();\n     factory.registerFunction<FunctionSipHash128>();\n     factory.registerFunction<FunctionCityHash64>();\n+    factory.registerFunction<FunctionFarmFingerprint64>();\n     factory.registerFunction<FunctionFarmHash64>();\n     factory.registerFunction<FunctionMetroHash64>();\n     factory.registerFunction<FunctionIntHash32>();\ndiff --git a/src/Functions/FunctionsHashing.h b/src/Functions/FunctionsHashing.h\nindex 678214cdbad6..17165e12e37c 100644\n--- a/src/Functions/FunctionsHashing.h\n+++ b/src/Functions/FunctionsHashing.h\n@@ -439,6 +439,18 @@ struct ImplCityHash64\n     static constexpr bool use_int_hash_for_pods = true;\n };\n \n+// see farmhash.h for definition of NAMESPACE_FOR_HASH_FUNCTIONS\n+struct ImplFarmFingerprint64\n+{\n+    static constexpr auto name = \"farmFingerprint64\";\n+    using ReturnType = UInt64;\n+    using uint128_t = NAMESPACE_FOR_HASH_FUNCTIONS::uint128_t;\n+\n+    static auto combineHashes(UInt64 h1, UInt64 h2) { return NAMESPACE_FOR_HASH_FUNCTIONS::Fingerprint(uint128_t(h1, h2)); }\n+    static auto apply(const char * s, const size_t len) { return NAMESPACE_FOR_HASH_FUNCTIONS::Fingerprint64(s, len); }\n+    static constexpr bool use_int_hash_for_pods = true;\n+};\n+\n // see farmhash.h for definition of NAMESPACE_FOR_HASH_FUNCTIONS\n struct ImplFarmHash64\n {\n@@ -1316,6 +1328,7 @@ using FunctionSHA256 = FunctionStringHashFixedString<SHA256Impl>;\n #endif\n using FunctionSipHash128 = FunctionStringHashFixedString<SipHash128Impl>;\n using FunctionCityHash64 = FunctionAnyHash<ImplCityHash64>;\n+using FunctionFarmFingerprint64 = FunctionAnyHash<ImplFarmFingerprint64>;\n using FunctionFarmHash64 = FunctionAnyHash<ImplFarmHash64>;\n using FunctionMetroHash64 = FunctionAnyHash<ImplMetroHash64>;\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00751_hashing_ints.reference b/tests/queries/0_stateless/00751_hashing_ints.reference\nindex 8eccccd0449b..31acc13a762c 100644\n--- a/tests/queries/0_stateless/00751_hashing_ints.reference\n+++ b/tests/queries/0_stateless/00751_hashing_ints.reference\n@@ -2,6 +2,8 @@\n 11717965186011240346\n 13379111408315310133\n 13379111408315310133\n+7773179648686038998\n+13379111408315310133\n 13379111408315310133\n 623211862\n 9052087431341907723\ndiff --git a/tests/queries/0_stateless/00751_hashing_ints.sql b/tests/queries/0_stateless/00751_hashing_ints.sql\nindex d2f0a26cef4f..be3268da29d5 100644\n--- a/tests/queries/0_stateless/00751_hashing_ints.sql\n+++ b/tests/queries/0_stateless/00751_hashing_ints.sql\n@@ -1,6 +1,8 @@\n SELECT halfMD5(123456);\n SELECT sipHash64(123456);\n SELECT cityHash64(123456);\n+SELECT farmFingerprint64(123456);\n+SELECT farmFingerprint64('123456');\n SELECT farmHash64(123456);\n SELECT metroHash64(123456);\n SELECT murmurHash2_32(123456);\n",
  "problem_statement": "farmhash function should use stable Fingerprint64 not transient Hash64 api\nfarmhash has two family of functions - transient Hash* functions without any guarantees on result compatibility between platform/versions/etc and persistent Fingerprint* that are guaranteed to provide same result. Quoting their README : \r\n```\r\nOur belief is that the typical hash function is mostly used for in-memory hash\r\ntables and similar.  That use case allows hash functions that differ on\r\ndifferent platforms, and that change from time to time.  For this, I recommend\r\nusing wrapper functions in a .h file with comments such as, \"may change from\r\ntime to time, may differ on different platforms, and may change depending on\r\nNDEBUG.\"\r\n\r\nSome projects may also require a forever-fixed, portable hash function.  Again\r\nwe recommend using wrapper functions in a .h, but in this case the comments on\r\nthem would be very different.\r\n```\r\n\r\nI believe clickhouse usecase falls into the second category and [Fingerprint64](https://github.com/google/farmhash/blob/master/src/farmhash.h#L151) should be used, either in place of current implementation or add one more function, please.\n",
  "hints_text": "btw current farmHash64 function actually (luckily) evaluates to Fingerprint64 because contrib/libfarmhash is not compiled with SSE enabled afaics and libfarmhash uses same implementation for Fingerprint64 and Hash64 so this change will be not noticeable in practice, would be nice to set this in stone and use Fingerprint64 explicitly.\nThis would be great to guarantee (we're starting to generate and load data into clickhouse with fingerprints from other systems). I'll try to add a `farmFingerprint64` like [this one](https://github.com/ClickHouse/ClickHouse/blob/5e29fe3425a6dcb331a7a7abdb2d2973e4685d65/dbms/src/Functions/FunctionsHashing.h#L434-L444) in the next few days if this would be considered.\n@JacobHayes Let's do it.\r\n\n@ygrek It's Ok for farmHash64 function in ClickHouse to be non stable between different machines / releases if it will be clearly stated in docs.",
  "created_at": "2020-10-31T13:05:53Z"
}