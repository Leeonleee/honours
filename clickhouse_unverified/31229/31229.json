{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 31229,
  "instance_id": "ClickHouse__ClickHouse-31229",
  "issue_numbers": [
    "31181"
  ],
  "base_commit": "56e5e05fc5b661dd8e0acc137c4599f0c86f7257",
  "patch": "diff --git a/src/Dictionaries/SSDCacheDictionaryStorage.h b/src/Dictionaries/SSDCacheDictionaryStorage.h\nindex 7c53ecc2b2c6..8074c0a77af3 100644\n--- a/src/Dictionaries/SSDCacheDictionaryStorage.h\n+++ b/src/Dictionaries/SSDCacheDictionaryStorage.h\n@@ -542,8 +542,13 @@ class SSDCacheFileBuffer : private boost::noncopyable\n                 file_path,\n                 std::to_string(bytes_written));\n \n+        #if defined(OS_DARWIN)\n         if (::fsync(file.fd) < 0)\n             throwFromErrnoWithPath(\"Cannot fsync \" + file_path, file_path, ErrorCodes::CANNOT_FSYNC);\n+        #else\n+        if (::fdatasync(file.fd) < 0)\n+            throwFromErrnoWithPath(\"Cannot fdatasync \" + file_path, file_path, ErrorCodes::CANNOT_FSYNC);\n+        #endif\n \n         current_block_index += buffer_size_in_blocks;\n \ndiff --git a/src/Disks/LocalDirectorySyncGuard.cpp b/src/Disks/LocalDirectorySyncGuard.cpp\nindex ad66cdab6826..2610cd7c37f5 100644\n--- a/src/Disks/LocalDirectorySyncGuard.cpp\n+++ b/src/Disks/LocalDirectorySyncGuard.cpp\n@@ -34,10 +34,10 @@ LocalDirectorySyncGuard::~LocalDirectorySyncGuard()\n #if defined(OS_DARWIN)\n         if (fcntl(fd, F_FULLFSYNC, 0))\n             throwFromErrno(\"Cannot fcntl(F_FULLFSYNC)\", ErrorCodes::CANNOT_FSYNC);\n+#else\n+        if (-1 == ::fdatasync(fd))\n+            throw Exception(\"Cannot fdatasync\", ErrorCodes::CANNOT_FSYNC);\n #endif\n-        if (-1 == ::fsync(fd))\n-            throw Exception(\"Cannot fsync\", ErrorCodes::CANNOT_FSYNC);\n-\n         if (-1 == ::close(fd))\n             throw Exception(\"Cannot close file\", ErrorCodes::CANNOT_CLOSE_FILE);\n     }\ndiff --git a/src/IO/WriteBufferFromFileDescriptor.cpp b/src/IO/WriteBufferFromFileDescriptor.cpp\nindex 38aaa945362b..5f0db6816659 100644\n--- a/src/IO/WriteBufferFromFileDescriptor.cpp\n+++ b/src/IO/WriteBufferFromFileDescriptor.cpp\n@@ -114,7 +114,11 @@ void WriteBufferFromFileDescriptor::sync()\n     next();\n \n     /// Request OS to sync data with storage medium.\n-    int res = fsync(fd);\n+#if defined(OS_DARWIN)\n+    int res = ::fsync(fd);\n+#else\n+    int res = ::fdatasync(fd);\n+#endif\n     if (-1 == res)\n         throwFromErrnoWithPath(\"Cannot fsync \" + getFileName(), getFileName(), ErrorCodes::CANNOT_FSYNC);\n }\n",
  "test_patch": "diff --git a/utils/iotest/iotest.cpp b/utils/iotest/iotest.cpp\nindex b327355d07b8..91f097693e47 100644\n--- a/utils/iotest/iotest.cpp\n+++ b/utils/iotest/iotest.cpp\n@@ -156,7 +156,11 @@ int mainImpl(int argc, char ** argv)\n         pool.scheduleOrThrowOnError([=]{ thread(fd, mode, min_offset, max_offset, block_size, count); });\n     pool.wait();\n \n-    fsync(fd);\n+    #if defined(OS_DARWIN)\n+        fsync(fd);\n+    #else\n+        fdatasync(fd);\n+    #endif\n \n     watch.stop();\n \ndiff --git a/utils/iotest/iotest_nonblock.cpp b/utils/iotest/iotest_nonblock.cpp\nindex 524d6298da55..430e951d36b7 100644\n--- a/utils/iotest/iotest_nonblock.cpp\n+++ b/utils/iotest/iotest_nonblock.cpp\n@@ -136,8 +136,13 @@ int mainImpl(int argc, char ** argv)\n \n     for (size_t i = 0; i < descriptors; ++i)\n     {\n+#if defined(OS_DARWIN)\n         if (fsync(fds[i]))\n             throwFromErrno(\"Cannot fsync\", ErrorCodes::CANNOT_FSYNC);\n+#else\n+        if (fdatasync(fds[i]))\n+            throwFromErrno(\"Cannot fdatasync\", ErrorCodes::CANNOT_FSYNC);\n+#endif\n     }\n \n     watch.stop();\n",
  "problem_statement": "Replace `fsync` to `fdatasync` in all places.\nFile size is updated correctly according to \r\n\r\n> fdatasync() is similar to fsync(), but does not flush modified metadata unless that metadata is needed in order to allow a subsequent data retrieval to be correctly handled.  For example, changes to  st_atime  or  st_mtime  (respec\u2010\r\n       tively,  time  of  last  access  and  time  of last modification; see inode(7)) do not require flushing because they are not necessary for a subsequent data read to be handled correctly.  On the other hand, a change to the file size\r\n       (st_size, as made by say ftruncate(2)), would require a metadata flush.\r\n\r\nAnd we don't care about modification times.\r\nShould work alright.\n",
  "hints_text": "",
  "created_at": "2021-11-10T09:31:34Z",
  "modified_files": [
    "src/Dictionaries/SSDCacheDictionaryStorage.h",
    "src/Disks/LocalDirectorySyncGuard.cpp",
    "src/IO/WriteBufferFromFileDescriptor.cpp"
  ],
  "modified_test_files": [
    "utils/iotest/iotest.cpp",
    "utils/iotest/iotest_nonblock.cpp"
  ]
}