{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 42465,
  "instance_id": "ClickHouse__ClickHouse-42465",
  "issue_numbers": [
    "42451"
  ],
  "base_commit": "27133c92e4c571da327bef807ac53537d5fc7a62",
  "patch": "diff --git a/src/Common/intExp.h b/src/Common/intExp.h\nindex 3529990ef3be..04c163ff2242 100644\n--- a/src/Common/intExp.h\n+++ b/src/Common/intExp.h\n@@ -47,6 +47,11 @@ namespace common\n \n constexpr inline int exp10_i32(int x)\n {\n+    if (x < 0)\n+        return 0;\n+    if (x > 9)\n+        return std::numeric_limits<int>::max();\n+\n     constexpr int values[] =\n     {\n         1,\n@@ -65,6 +70,11 @@ constexpr inline int exp10_i32(int x)\n \n constexpr inline int64_t exp10_i64(int x)\n {\n+    if (x < 0)\n+        return 0;\n+    if (x > 18)\n+        return std::numeric_limits<int64_t>::max();\n+\n     constexpr int64_t values[] =\n     {\n         1LL,\n@@ -92,6 +102,11 @@ constexpr inline int64_t exp10_i64(int x)\n \n constexpr inline Int128 exp10_i128(int x)\n {\n+    if (x < 0)\n+        return 0;\n+    if (x > 38)\n+        return std::numeric_limits<Int128>::max();\n+\n     constexpr Int128 values[] =\n     {\n         static_cast<Int128>(1LL),\n@@ -140,6 +155,11 @@ constexpr inline Int128 exp10_i128(int x)\n \n inline Int256 exp10_i256(int x)\n {\n+    if (x < 0)\n+        return 0;\n+    if (x > 76)\n+        return std::numeric_limits<Int256>::max();\n+\n     using Int256 = Int256;\n     static constexpr Int256 i10e18{1000000000000000000ll};\n     static const Int256 values[] = {\n@@ -231,8 +251,10 @@ inline Int256 exp10_i256(int x)\n template <typename T>\n constexpr inline T intExp10OfSize(int x)\n {\n-    if constexpr (sizeof(T) <= 8)\n-        return intExp10(x);\n+    if constexpr (sizeof(T) <= 4)\n+        return common::exp10_i32(x);\n+    else if constexpr (sizeof(T) <= 8)\n+        return common::exp10_i64(x);\n     else if constexpr (sizeof(T) <= 16)\n         return common::exp10_i128(x);\n     else\ndiff --git a/src/Functions/timeSlots.cpp b/src/Functions/timeSlots.cpp\nindex 949ca7bc0e41..e986e32d76f9 100644\n--- a/src/Functions/timeSlots.cpp\n+++ b/src/Functions/timeSlots.cpp\n@@ -19,6 +19,7 @@ namespace ErrorCodes\n     extern const int NUMBER_OF_ARGUMENTS_DOESNT_MATCH;\n     extern const int ILLEGAL_TYPE_OF_ARGUMENT;\n     extern const int ILLEGAL_COLUMN;\n+    extern const int BAD_ARGUMENTS;\n }\n \n namespace\n@@ -41,6 +42,9 @@ struct TimeSlotsImpl\n         const PaddedPODArray<UInt32> & starts, const PaddedPODArray<UInt32> & durations, UInt32 time_slot_size,\n         PaddedPODArray<UInt32> & result_values, ColumnArray::Offsets & result_offsets)\n     {\n+        if (time_slot_size == 0)\n+            throw Exception(\"Time slot size cannot be zero\", ErrorCodes::BAD_ARGUMENTS);\n+\n         size_t size = starts.size();\n \n         result_offsets.resize(size);\n@@ -63,6 +67,9 @@ struct TimeSlotsImpl\n         const PaddedPODArray<UInt32> & starts, UInt32 duration, UInt32 time_slot_size,\n         PaddedPODArray<UInt32> & result_values, ColumnArray::Offsets & result_offsets)\n     {\n+        if (time_slot_size == 0)\n+            throw Exception(\"Time slot size cannot be zero\", ErrorCodes::BAD_ARGUMENTS);\n+\n         size_t size = starts.size();\n \n         result_offsets.resize(size);\n@@ -85,6 +92,9 @@ struct TimeSlotsImpl\n         UInt32 start, const PaddedPODArray<UInt32> & durations, UInt32 time_slot_size,\n         PaddedPODArray<UInt32> & result_values, ColumnArray::Offsets & result_offsets)\n     {\n+        if (time_slot_size == 0)\n+            throw Exception(\"Time slot size cannot be zero\", ErrorCodes::BAD_ARGUMENTS);\n+\n         size_t size = durations.size();\n \n         result_offsets.resize(size);\n@@ -125,6 +135,9 @@ struct TimeSlotsImpl\n \n         ColumnArray::Offset current_offset = 0;\n         time_slot_size = time_slot_size.value * ts_multiplier;\n+        if (time_slot_size == 0)\n+            throw Exception(\"Time slot size cannot be zero\", ErrorCodes::BAD_ARGUMENTS);\n+\n         for (size_t i = 0; i < size; ++i)\n         {\n             for (DateTime64 value = (starts[i] * dt_multiplier) / time_slot_size, end = (starts[i] * dt_multiplier + durations[i] * dur_multiplier) / time_slot_size; value <= end; value += 1)\n@@ -155,6 +168,9 @@ struct TimeSlotsImpl\n         ColumnArray::Offset current_offset = 0;\n         duration = duration * dur_multiplier;\n         time_slot_size = time_slot_size.value * ts_multiplier;\n+        if (time_slot_size == 0)\n+            throw Exception(\"Time slot size cannot be zero\", ErrorCodes::BAD_ARGUMENTS);\n+\n         for (size_t i = 0; i < size; ++i)\n         {\n             for (DateTime64 value = (starts[i] * dt_multiplier) / time_slot_size, end = (starts[i] * dt_multiplier + duration) / time_slot_size; value <= end; value += 1)\n@@ -185,6 +201,9 @@ struct TimeSlotsImpl\n         ColumnArray::Offset current_offset = 0;\n         start = dt_multiplier * start;\n         time_slot_size = time_slot_size.value * ts_multiplier;\n+        if (time_slot_size == 0)\n+            throw Exception(\"Time slot size cannot be zero\", ErrorCodes::BAD_ARGUMENTS);\n+\n         for (size_t i = 0; i < size; ++i)\n         {\n             for (DateTime64 value = start / time_slot_size, end = (start + durations[i] * dur_multiplier) / time_slot_size; value <= end; value += 1)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02464_decimal_scale_buffer_overflow.reference b/tests/queries/0_stateless/02464_decimal_scale_buffer_overflow.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/02464_decimal_scale_buffer_overflow.sql b/tests/queries/0_stateless/02464_decimal_scale_buffer_overflow.sql\nnew file mode 100644\nindex 000000000000..355d9012f1f4\n--- /dev/null\n+++ b/tests/queries/0_stateless/02464_decimal_scale_buffer_overflow.sql\n@@ -0,0 +1,5 @@\n+DROP TABLE IF EXISTS series__fuzz_35;\n+CREATE TABLE series__fuzz_35 (`i` UInt8, `x_value` Decimal(18, 14), `y_value` DateTime) ENGINE = Memory;\n+INSERT INTO series__fuzz_35(i, x_value, y_value) VALUES (1, 5.6,-4.4),(2, -9.6,3),(3, -1.3,-4),(4, 5.3,9.7),(5, 4.4,0.037),(6, -8.6,-7.8),(7, 5.1,9.3),(8, 7.9,-3.6),(9, -8.2,0.62),(10, -3,7.3);\n+SELECT skewSamp(x_value) FROM (SELECT x_value as x_value FROM series__fuzz_35 LIMIT 2) FORMAT Null;\n+DROP TABLE series__fuzz_35;\n",
  "problem_statement": "Asan: global-buffer-overflow in function `skewSamp`\n**Describe the bug**\r\n[A link to the report\r\n](https://s3.amazonaws.com/clickhouse-test-reports/0/a298a5238b1a795ae0673af234a8f1c82637c1a3/fuzzer_astfuzzerasan//report.html)\r\n**How to reproduce**\r\n```sql\r\n\r\nDROP TABLE IF EXISTS series__fuzz_35;\r\n\r\nCREATE TABLE series__fuzz_35 (`i` UInt8, `x_value` Decimal(18, 14), `y_value` DateTime) ENGINE = Memory;\r\n\r\nINSERT INTO series__fuzz_35(i, x_value, y_value) VALUES (1, 5.6,-4.4),(2, -9.6,3),(3, -1.3,-4),(4, 5.3,9.7),(5, 4.4,0.037),(6, -8.6,-7.8),(7, 5.1,9.3),(8, 7.9,-3.6),(9, -8.2,0.62),(10, -3,7.3);\r\n\r\nSELECT skewSamp(x_value) FROM (SELECT x_value as x_value FROM series__fuzz_35 LIMIT 2);\r\n```\r\n\r\n```\r\n=================================================================\r\n==196220==ERROR: AddressSanitizer: global-buffer-overflow on address 0x00000737c740 at pc 0x0000232b6a0e bp 0x7f2be69c1d90 sp 0x7f2be69c1d88\r\nREAD of size 8 at 0x00000737c740 thread T257 (QueryPullPipeEx)\r\n    #0 0x232b6a0d in common::exp10_i128(int) build_docker/../src/Common/intExp.h:137:12\r\n    #1 0x232b6a0d in auto DB::DecimalUtils::scaleMultiplier<wide::integer<128ul, int>>(unsigned int) build_docker/../src/Core/DecimalFunctions.h:43:16\r\n    #2 0x232b6a0d in void DB::DecimalUtils::convertToImpl<double, DB::Decimal<wide::integer<128ul, int>>, void>(DB::Decimal<wide::integer<128ul, int>> const&, unsigned long, double&) build_docker/../src/Core/DecimalFunctions.h:293:67\r\n    #3 0x232b6a0d in double DB::DecimalUtils::convertTo<double, DB::Decimal<wide::integer<128ul, int>>>(DB::Decimal<wide::integer<128ul, int>> const&, unsigned long) build_docker/../src/Core/DecimalFunctions.h:340:5\r\n    #4 0x232b6a0d in DB::VarMomentsDecimal<DB::Decimal<wide::integer<128ul, int>>, 3ul>::getMoment3(unsigned int) const build_docker/../src/AggregateFunctions/Moments.h:192:16\r\n    #5 0x232b7636 in DB::AggregateFunctionVarianceSimple<DB::StatFuncOneArg<DB::Decimal<long>, (DB::StatisticsFunctionKind)5, 3ul>>::insertResultInto(char*, DB::IColumn&, DB::Arena*) const build_docker/../src/AggregateFunctions/AggregateFunctionStatisticsSimple.h:190:40\r\n    #6 0x2e085eb0 in void DB::Aggregator::insertAggregatesIntoColumns<char*>(char*&, std::__1::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn>>>&, DB::Arena*) const build_docker/../src/Interpreters/Aggregator.cpp:1818:44\r\n    #7 0x2deffa22 in DB::Aggregator::prepareBlockAndFillWithoutKey(DB::AggregatedDataVariants&, bool, bool) const build_docker/../src/Interpreters/Aggregator.cpp:2164:13\r\n    #8 0x33022e76 in DB::ConvertingAggregatedToChunksTransform::initialize() build_docker/../src/Processors/Transforms/AggregatingTransform.cpp:333:45\r\n    #9 0x32ad520d in DB::executeJob(DB::ExecutingGraph::Node*, DB::ReadProgressCallback*) build_docker/../src/Processors/Executors/ExecutionThreadContext.cpp:47:26\r\n    #10 0x32ad520d in DB::ExecutionThreadContext::executeTask() build_docker/../src/Processors/Executors/ExecutionThreadContext.cpp:92:9\r\n    #11 0x32ab45a4 in DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*) build_docker/../src/Processors/Executors/PipelineExecutor.cpp:228:26\r\n    #12 0x32ab2e95 in DB::PipelineExecutor::executeSingleThread(unsigned long) build_docker/../src/Processors/Executors/PipelineExecutor.cpp:194:5\r\n    #13 0x32ab2e95 in DB::PipelineExecutor::executeImpl(unsigned long) build_docker/../src/Processors/Executors/PipelineExecutor.cpp:367:9\r\n    #14 0x32ab2a74 in DB::PipelineExecutor::execute(unsigned long) build_docker/../src/Processors/Executors/PipelineExecutor.cpp:89:9\r\n    #15 0x32adef9b in DB::threadFunction(DB::PullingAsyncPipelineExecutor::Data&, std::__1::shared_ptr<DB::ThreadGroupStatus>, unsigned long) build_docker/../src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:79:24\r\n    #16 0x32adef9b in DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0::operator()() const build_docker/../src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:107:13\r\n    #17 0x32adef9b in decltype(static_cast<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>(fp)()) std::__1::__invoke_constexpr<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&) build_docker/../contrib/libcxx/include/type_traits:3648:23\r\n    #18 0x32adef9b in decltype(auto) std::__1::__apply_tuple_impl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::__1::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::__1::tuple<>&, std::__1::__tuple_indices<>) build_docker/../contrib/libcxx/include/tuple:1595:1\r\n    #19 0x32adef9b in decltype(auto) std::__1::apply<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::__1::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::__1::tuple<>&) build_docker/../contrib/libcxx/include/tuple:1604:1\r\n    #20 0x32adef9b in ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()::operator()() build_docker/../src/Common/ThreadPool.h:193:13\r\n    #21 0x32adef9b in decltype(static_cast<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(fp)()) std::__1::__invoke<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&) build_docker/../contrib/libcxx/include/type_traits:3640:23\r\n    #22 0x32adef9b in void std::__1::__invoke_void_return_wrapper<void, true>::__call<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&>(ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&) build_docker/../contrib/libcxx/include/__functional/invoke.h:61:9\r\n    #23 0x32adef9b in std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'(), void ()>::operator()() build_docker/../contrib/libcxx/include/__functional/function.h:230:12\r\n    #24 0x32adef9b in void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'(), void ()>>(std::__1::__function::__policy_storage const*) build_docker/../contrib/libcxx/include/__functional/function.h:711:16\r\n    #25 0x1ecf1a7f in std::__1::__function::__policy_func<void ()>::operator()() const build_docker/../contrib/libcxx/include/__functional/function.h:843:16\r\n    #26 0x1ecf1a7f in std::__1::function<void ()>::operator()() const build_docker/../contrib/libcxx/include/__functional/function.h:1184:12\r\n    #27 0x1ecf1a7f in ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) build_docker/../src/Common/ThreadPool.cpp:294:17\r\n    #28 0x1ecfb56c in void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>, bool)::'lambda0'()::operator()() const build_docker/../src/Common/ThreadPool.cpp:144:73\r\n    #29 0x1ecfb56c in decltype(static_cast<void>(fp)()) std::__1::__invoke<void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&) build_docker/../contrib/libcxx/include/type_traits:3640:23\r\n    #30 0x1ecfb56c in void std::__1::__thread_execute<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>, bool)::'lambda0'()>(std::__1::tuple<void, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>, bool)::'lambda0'()>&, std::__1::__tuple_indices<>) build_docker/../contrib/libcxx/include/thread:282:5\r\n    #31 0x1ecfb56c in void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>, bool)::'lambda0'()>>(void*) build_docker/../contrib/libcxx/include/thread:293:5\r\n    #32 0x7f2e24b13608 in start_thread /build/glibc-sMfBJT/glibc-2.31/nptl/pthread_create.c:477:8\r\n    #33 0x7f2e24a38162 in __clone /build/glibc-sMfBJT/glibc-2.31/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:95\r\n```\n",
  "hints_text": "",
  "created_at": "2022-10-19T02:16:23Z"
}