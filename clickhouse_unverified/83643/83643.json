{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 83643,
  "instance_id": "ClickHouse__ClickHouse-83643",
  "issue_numbers": [
    "83618"
  ],
  "base_commit": "d0941b157fd9c32da431b5ced5cab16fc1f459f3",
  "patch": "diff --git a/src/Parsers/ParserInsertQuery.cpp b/src/Parsers/ParserInsertQuery.cpp\nindex 1a09cd6f3bdb..93824401cbb8 100644\n--- a/src/Parsers/ParserInsertQuery.cpp\n+++ b/src/Parsers/ParserInsertQuery.cpp\n@@ -1,19 +1,18 @@\n #include <Parsers/ASTIdentifier_fwd.h>\n #include <Parsers/ASTInsertQuery.h>\n #include <Parsers/ASTSelectQuery.h>\n+#include <Parsers/ASTSubquery.h>\n #include <Parsers/ASTSelectWithUnionQuery.h>\n \n #include <Parsers/CommonParsers.h>\n #include <Parsers/ExpressionElementParsers.h>\n #include <Parsers/ExpressionListParsers.h>\n #include <Parsers/ParserSelectWithUnionQuery.h>\n-#include <Parsers/ParserWatchQuery.h>\n #include <Parsers/ParserWithElement.h>\n #include <Parsers/ParserInsertQuery.h>\n #include <Parsers/ParserSetQuery.h>\n #include <Parsers/InsertQuerySettingsPushDownVisitor.h>\n #include <Common/typeid_cast.h>\n-#include <Parsers/IAST_fwd.h>\n \n \n namespace DB\n@@ -187,11 +186,15 @@ bool ParserInsertQuery::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)\n             const auto & children = select->as<ASTSelectWithUnionQuery>()->list_of_selects->children;\n             for (const auto & child : children)\n             {\n-                if (child->as<ASTSelectQuery>()->getExpression(ASTSelectQuery::Expression::WITH, false))\n-                    throw Exception(ErrorCodes::SYNTAX_ERROR,\n-                        \"Only one WITH should be presented, either before INSERT or SELECT.\");\n-                child->as<ASTSelectQuery>()->setExpression(ASTSelectQuery::Expression::WITH,\n-                    std::move(with_expression_list));\n+                auto * child_select = child->as<ASTSelectQuery>();\n+                if (child_select)\n+                {\n+                    if (child_select->getExpression(ASTSelectQuery::Expression::WITH, false))\n+                        throw Exception(ErrorCodes::SYNTAX_ERROR,\n+                            \"Only one WITH should be presented, either before INSERT or SELECT.\");\n+                    child_select->setExpression(ASTSelectQuery::Expression::WITH,\n+                        std::move(with_expression_list));\n+                }\n             }\n         }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03565_union_all_nullptr.reference b/tests/queries/0_stateless/03565_union_all_nullptr.reference\nnew file mode 100644\nindex 000000000000..1191247b6d9a\n--- /dev/null\n+++ b/tests/queries/0_stateless/03565_union_all_nullptr.reference\n@@ -0,0 +1,2 @@\n+1\n+2\ndiff --git a/tests/queries/0_stateless/03565_union_all_nullptr.sql b/tests/queries/0_stateless/03565_union_all_nullptr.sql\nnew file mode 100644\nindex 000000000000..f630c97278bb\n--- /dev/null\n+++ b/tests/queries/0_stateless/03565_union_all_nullptr.sql\n@@ -0,0 +1,3 @@\n+CREATE TEMPORARY TABLE t (x UInt8);\n+WITH 2 AS x INSERT INTO TABLE t SELECT 1 UNION ALL (SELECT x);\n+SELECT * FROM t ORDER BY ALL;\n",
  "problem_statement": "Null pointer dereference: WITH + INSERT + UNION SEGV\n### Describe the bug\n\nCrash on client. Happens since v24.10. I am not generating parentheses for both sides of set queries all the time now. That's why this was found.\n\n### How to reproduce\n\nRun Fiddle: https://fiddle.clickhouse.com/85e52b8d-f2b1-43eb-a8a6-cce720188b09\n\n### Error message and/or stacktrace\n\nStack trace:\n\n```\n########## Short fault info ############\n(version 25.7.1.2960 (official build), build id: EBC9B10987D015C8080F09B9F110D7DF60738B32, git hash: a66a6a5dd8c3cf6aa33a6b8782d5099bf8ad0a82, architecture: x86_64) (from thread 2720898) Received signal 11\nSignal description: Segmentation fault\nAddress: 0xc0. Access: read. Address not mapped to object.\nStack trace: 0x00005e7b6a7f37d2 0x00005e7b74aead57 0x00005e7b74ac7be0 0x00005e7b74aefb09 0x00005e7b74ac7be0 0x00005e7b738ba46f 0x00005e7b7c2f9a70 0x00005e7b7c2f77b8 0x00005e7b7c2f8f3e 0x00005e7b7c2f8b22 0x00005e7b739155c7 0x00005e7b738fdf9e 0x00005e7b738b1375 0x00005e7b6a7c6179 0x00005e7b7b8541f1 0x00005e7b6a7d14a6 0x00005e7b635f1ea7 0x000073512ae2a338 0x000073512ae2a3fb 0x00005e7b635e302e\n########################################\n(version 25.7.1.2960 (official build), build id: EBC9B10987D015C8080F09B9F110D7DF60738B32, git hash: a66a6a5dd8c3cf6aa33a6b8782d5099bf8ad0a82) (from thread 2720898) (no query) Received signal Segmentation fault (11)\nAddress: 0xc0. Access: read. Address not mapped to object.\nStack trace: 0x00005e7b6a7f37d2 0x00005e7b74aead57 0x00005e7b74ac7be0 0x00005e7b74aefb09 0x00005e7b74ac7be0 0x00005e7b738ba46f 0x00005e7b7c2f9a70 0x00005e7b7c2f77b8 0x00005e7b7c2f8f3e 0x00005e7b7c2f8b22 0x00005e7b739155c7 0x00005e7b738fdf9e 0x00005e7b738b1375 0x00005e7b6a7c6179 0x00005e7b7b8541f1 0x00005e7b6a7d14a6 0x00005e7b635f1ea7 0x000073512ae2a338 0x000073512ae2a3fb 0x00005e7b635e302e\n3.0. inlined from contrib/llvm-project/libcxx/include/__hash_table:576: std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<DB::ASTSelectQuery::Expression, unsigned long>, void*>*>*>>::size[abi:se190107]() const\n3.1. inlined from contrib/llvm-project/libcxx/include/__hash_table:884: std::__hash_table<std::__hash_value_type<DB::ASTSelectQuery::Expression, unsigned long>, std::__unordered_map_hasher<DB::ASTSelectQuery::Expression, std::__hash_value_type<DB::ASTSelectQuery::Expression, unsigned long>, std::hash<DB::ASTSelectQuery::Expression>, std::equal_to<DB::ASTSelectQuery::Expression>, true>, std::__unordered_map_equal<DB::ASTSelectQuery::Expression, std::__hash_value_type<DB::ASTSelectQuery::Expression, unsigned long>, std::equal_to<DB::ASTSelectQuery::Expression>, std::hash<DB::ASTSelectQuery::Expression>, true>, std::allocator<std::__hash_value_type<DB::ASTSelectQuery::Expression, unsigned long>>>::bucket_count[abi:se190107]() const\n3.2. inlined from contrib/llvm-project/libcxx/include/__hash_table:1770: std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<DB::ASTSelectQuery::Expression, unsigned long>, void*>*> std::__hash_table<std::__hash_value_type<DB::ASTSelectQuery::Expression, unsigned long>, std::__unordered_map_hasher<DB::ASTSelectQuery::Expression, std::__hash_value_type<DB::ASTSelectQuery::Expression, unsigned long>, std::hash<DB::ASTSelectQuery::Expression>, std::equal_to<DB::ASTSelectQuery::Expression>, true>, std::__unordered_map_equal<DB::ASTSelectQuery::Expression, std::__hash_value_type<DB::ASTSelectQuery::Expression, unsigned long>, std::equal_to<DB::ASTSelectQuery::Expression>, std::hash<DB::ASTSelectQuery::Expression>, true>, std::allocator<std::__hash_value_type<DB::ASTSelectQuery::Expression, unsigned long>>>::find<DB::ASTSelectQuery::Expression>(DB::ASTSelectQuery::Expression const&) const\n3.3. inlined from contrib/llvm-project/libcxx/include/unordered_map:1380: std::unordered_map<DB::ASTSelectQuery::Expression, unsigned long, std::hash<DB::ASTSelectQuery::Expression>, std::equal_to<DB::ASTSelectQuery::Expression>, std::allocator<std::pair<DB::ASTSelectQuery::Expression const, unsigned long>>>::find[abi:se190107](DB::ASTSelectQuery::Expression const&) const\n3. src/Parsers/ASTSelectQuery.h:139: DB::ASTSelectQuery::getExpression(DB::ASTSelectQuery::Expression, bool) const @ 0x0000000013c657d2\n4. src/Parsers/ParserInsertQuery.cpp:190: DB::ParserInsertQuery::parseImpl(DB::IParser::Pos&, std::shared_ptr<DB::IAST>&, DB::Expected&) @ 0x000000001df5cd57\n5.0. inlined from src/Parsers/IParserBase.cpp:14: operator()\n5.1. inlined from src/Parsers/IParserBase.h:31: bool DB::IParserBase::wrapParseImpl<DB::IParserBase::parse(DB::IParser::Pos&, std::shared_ptr<DB::IAST>&, DB::Expected&)::$_0>(DB::IParser::Pos&, DB::IParserBase::IncreaseDepthTag, DB::IParserBase::parse(DB::IParser::Pos&, std::shared_ptr<DB::IAST>&, DB::Expected&)::$_0 const&)\n5. src/Parsers/IParserBase.cpp:11: DB::IParserBase::parse(DB::IParser::Pos&, std::shared_ptr<DB::IAST>&, DB::Expected&) @ 0x000000001df39be0\n6. src/Parsers/ParserQuery.cpp:80: DB::ParserQuery::parseImpl(DB::IParser::Pos&, std::shared_ptr<DB::IAST>&, DB::Expected&) @ 0x000000001df61b09\n7.0. inlined from src/Parsers/IParserBase.cpp:14: operator()\n7.1. inlined from src/Parsers/IParserBase.h:31: bool DB::IParserBase::wrapParseImpl<DB::IParserBase::parse(DB::IParser::Pos&, std::shared_ptr<DB::IAST>&, DB::Expected&)::$_0>(DB::IParser::Pos&, DB::IParserBase::IncreaseDepthTag, DB::IParserBase::parse(DB::IParser::Pos&, std::shared_ptr<DB::IAST>&, DB::Expected&)::$_0 const&)\n7. src/Parsers/IParserBase.cpp:11: DB::IParserBase::parse(DB::IParser::Pos&, std::shared_ptr<DB::IAST>&, DB::Expected&) @ 0x000000001df39be0\n8. src/Client/ClientBaseHelpers.cpp:181: DB::highlight(String const&, std::vector<replxx::Replxx::Color, std::allocator<replxx::Replxx::Color>>&, DB::Context const&, int) @ 0x000000001cd2c46f\n9.0. inlined from contrib/llvm-project/libcxx/include/__functional/function.h:716: ?\n9.1. inlined from contrib/llvm-project/libcxx/include/__functional/function.h:989: ?\n9. contrib/replxx/src/replxx_impl.cxx:814: replxx::Replxx::ReplxxImpl::render(replxx::Replxx::ReplxxImpl::HINT_ACTION) @ 0x000000002576ba70\n10. contrib/replxx/src/replxx_impl.cxx:1012: replxx::Replxx::ReplxxImpl::refresh_line(replxx::Replxx::ReplxxImpl::HINT_ACTION, bool) @ 0x00000000257697b8\n11. contrib/replxx/src/replxx_impl.cxx:1437: replxx::Replxx::ReplxxImpl::get_input_line() @ 0x000000002576af3e\n12. contrib/replxx/src/replxx_impl.cxx:672: replxx::Replxx::ReplxxImpl::input(String const&) @ 0x000000002576ab22\n13. src/Client/ReplxxLineReader.cpp:505: DB::ReplxxLineReader::readOneLine(String const&) @ 0x000000001cd875c7\n14. src/Client/LineReader.cpp:165: DB::LineReader::readLine(String const&, String const&) @ 0x000000001cd6ff9e\n15. src/Client/ClientBase.cpp:3333: DB::ClientBase::runInteractive() @ 0x000000001cd23375\n16. programs/client/Client.cpp:397: DB::Client::main(std::vector<String, std::allocator<String>> const&) @ 0x0000000013c38179\n17. base/poco/Util/src/Application.cpp:315: Poco::Util::Application::run() @ 0x0000000024cc61f1\n18. programs/client/Client.cpp:1139: mainEntryClickHouseClient(int, char**) @ 0x0000000013c434a6\n19. programs/main.cpp:340: main @ 0x000000000ca63ea7\n20. __libc_start_call_main @ 0x000000000002a338\n21. __libc_start_main@@GLIBC_2.34 @ 0x000000000002a3fb\n22. _start @ 0x000000000ca5502e\n```\n",
  "hints_text": "",
  "created_at": "2025-07-12T12:46:46Z"
}