diff --git a/src/Processors/tests/gtest_exception_on_incorrect_pipeline.cpp b/src/Processors/tests/gtest_exception_on_incorrect_pipeline.cpp
index df3901e2eb19..ee661b39fac7 100644
--- a/src/Processors/tests/gtest_exception_on_incorrect_pipeline.cpp
+++ b/src/Processors/tests/gtest_exception_on_incorrect_pipeline.cpp
@@ -27,7 +27,8 @@ TEST(Processors, PortsConnected)
     processors.emplace_back(std::move(source));
     processors.emplace_back(std::move(sink));
 
-    PipelineExecutor executor(processors);
+    QueryStatus * element = nullptr;
+    PipelineExecutor executor(processors, element);
     executor.execute(1);
 }
 
@@ -51,7 +52,8 @@ TEST(Processors, PortsNotConnected)
 
     try
     {
-        PipelineExecutor executor(processors);
+        QueryStatus * element = nullptr;
+        PipelineExecutor executor(processors, element);
         executor.execute(1);
         ASSERT_TRUE(false) << "Should have thrown.";
     }
diff --git a/tests/performance/set_index.xml b/tests/performance/set_index.xml
index 1fb7cf967f3f..631cad9986ef 100644
--- a/tests/performance/set_index.xml
+++ b/tests/performance/set_index.xml
@@ -3,17 +3,17 @@
     <fill_query>INSERT INTO test_in SELECT number FROM numbers(500000000)</fill_query>
 
     <!-- IN is used at index analysis -->
-    <query>SELECT count() FROM test_in WHERE a IN (SELECT rand(1) FROM numbers(200000)) SETTINGS max_rows_to_read = 1, read_overflow_mode = 'break'</query>
+    <query short="1">SELECT count() FROM test_in WHERE a IN (SELECT rand(1) FROM numbers(200000)) SETTINGS max_rows_to_read = 200001, read_overflow_mode = 'break'</query>
 
-    <query>SELECT count() FROM test_in WHERE toInt64(a) IN (SELECT toInt64(rand(1)) FROM numbers(200000)) settings max_rows_to_read=1, read_overflow_mode='break'</query>
+    <query short="1">SELECT count() FROM test_in WHERE toInt64(a) IN (SELECT toInt64(rand(1)) FROM numbers(200000)) settings max_rows_to_read=200001, read_overflow_mode='break'</query>
 
      <!-- Analyze only one range. The query is short because nothing is selected. -->
-    <query short="1">SELECT count() FROM test_in WHERE -toInt64(a) IN (SELECT toInt64(rand(1)) FROM numbers(200000)) settings max_rows_to_read=1, read_overflow_mode='break'</query>
+    <query short="1">SELECT count() FROM test_in WHERE -toInt64(a) IN (SELECT toInt64(rand(1)) FROM numbers(200000)) settings max_rows_to_read=200001, read_overflow_mode='break'</query>
     <!-- Analyze all ranges. The query is short because nothing is selected. -->
-    <query short="1">SELECT count() FROM test_in WHERE -toInt64(a) NOT IN (SELECT toInt64(rand(1)) FROM numbers(200000)) settings max_rows_to_read=1, read_overflow_mode='break'</query>
+    <query short="1">SELECT count() FROM test_in WHERE -toInt64(a) NOT IN (SELECT toInt64(rand(1)) FROM numbers(200000)) settings max_rows_to_read=200001, read_overflow_mode='break'</query>
 
     <!--
-        Test with explicitly defined large set (10000 elemnets).
+        Test with explicitly defined large set (10000 elements).
         We test the speed of parsing the query and not the speed of lookup, so one
         lookup is enough. This also keeps the query duration under 20 ms, which
         means it is considered "short" and compared qualitatively, not quantitatively.
@@ -64,7 +64,7 @@
     4120, 11402, 91344, 95169]::Array(UInt32)</query>
 
     <!--
-        Test with explicitly defined large set (10000 elemnets), but with tuples.
+        Test with explicitly defined large set (10000 elements), but with tuples.
         Ditto the above comment.
     -->
     <query>SELECT (rand(), rand()) IN ((17258, 93148), (4508, 52749), (68660, 70017), (77797, 23528), (1136, 37393), (53237, 15379), (68370, 73211), (15782, 54962), (59432, 45415), (68396, 920), (96154, 21016), (12700, 26887), (88016, 43191), (68153, 51575), (91315, 40005), (18070, 73178), (86, 631), (77717, 20324), (3227, 76188), (74960, 43147), (77538, 19628), (82292, 6525), (24293, 12566), (85244, 96287), (93982, 1329), (38064, 54723), (83999, 45810), (71921, 53673), (88638, 9669), (1959, 39535), (82235, 95796), (27907, 90975), (42383, 91015), (9948, 91514), (81712, 47309), (400, 25808), (31791, 46948), (39740, 36098), (25943, 84598), (99598, 52939), (77134, 15845), (40313, 72174), (85017, 94036), (36595, 14303), (83961, 68078), (55792, 72759), (73574, 43606), (9853, 63560), (28580, 56721), (74804, 41025), (32095, 55657), (52881, 63416), (91368, 90310), (23922, 38883), (30592, 10758), (66448, 61183), (31880, 96697), (11362, 20633), (75331, 2015), (71129, 8785), (1115, 70955), (7886, 83698), (18961, 84556), (16677, 43028), (37347, 70220), (31699, 71244), (10578, 96159), (67600, 39041), (78791, 86687), (21545, 54174), (68774, 37637), (46132, 81768), (98413, 20605), (2960, 23665), (31507, 35719), (96209, 18368), (60558, 38035), (21952, 3264), (11834, 86458), (21651, 17650), (86276, 36087), (18818, 24849), (61951, 3390), (59637, 62545), (30346, 72253), (36281, 2992), (78340, 49872), (94326, 93723), (3416, 94405), (12272, 8741), (22600, 22095), (57636, 37106), (38702, 14889), (70238, 11276), (17325, 60648), (16492, 41271), (52100, 1304), (93416, 7795), (57209, 71008), (48010, 36078), (20384, 74420), (77440, 34439), (69224, 45099), (30374, 33884), (49038, 90140), (1154, 84725), (64926, 86985), (91746, 73472), (59757, 75755), (45860, 71557), (45833, 36526), (74618, 73598), (91360, 65168), (58029, 30793), (56332, 14973), (99943, 96877), (97454, 6450), (64502, 77301), (73182, 31853), (76809, 83964), (82916, 86188), (78736, 65427), (36495, 7422), (76196, 2804), (96117, 61093), (9177, 26099), (52942, 63007), (48578, 47876), (50638, 89903), (7113, 97316), (35301, 12750), (47807, 7254), (38217, 55418), (56970, 41687), (20527, 62886), (358, 14021), (64018, 18582), (91740, 21683), (81967, 53589), (45437, 38450), (45476, 67752), (76851, 72072), (7304, 60091), (40097, 12897), (39906, 29247), (84262, 58734), (30857, 43791), (56087, 78929), (20498, 45954), (48726, 500), (62723, 43763), (28368, 30756), (74048, 52403), (15045, 95926), (75542, 55384), (52543, 22525), (56001, 6935), (11431, 46745), (77731, 7310), (36718, 59909), (32235, 91254), (92417, 25917), (21782, 79277), (46378, 87536), (35324, 26075), (6310, 76915), (1551, 69473), (50642, 68865), (55190, 72934), (49780, 21873), (99466, 29686), (90761, 13179), (72959, 57033), (20020, 90200), (46186, 79105), (73871, 52382), (59559, 38801), (59916, 16082), (33610, 94966), (46001, 45225), (86679, 26469), (77245, 91929), (32887, 36623), (11179, 46898), (87881, 68087), (45438, 47991), (24950, 94525), (91664, 51656), (43914, 47805), (15736, 96156), (56346, 20283), (85053, 48931), (17790, 26179), (96195, 55728), (43765, 54807), (44988, 89269), (55911, 99411), (52446, 47397), (28346, 65442), (96669, 68226), (66194, 26848), (37276, 55864), (14116, 41583), (18058, 16317), (93136, 85318), (35616, 86252), (29222, 29969), (33386, 85372), (71094, 44238), (27733, 31838), (64626, 16692), (52904, 97899), (97619, 12663), (50165, 4688), (67557, 44053), (69184, 66269), (73164, 89705), (39822, 15169), (65499, 72808), (30068, 63697), (30154, 64235), (97016, 58716), (94366, 36592), (1592, 16261), (87985, 52102), (12554, 23652), (15909, 25292), (2527, 91531), (92139, 36031), (28986, 30032), (3038, 56314), (32239, 26707), (15973, 34901), (70246, 39680), (82529, 38132), (45827, 74783), (53665, 64111), (55218, 84170), (20466, 16130), (55734, 71203), (31438, 96906), (66338, 85858), (35988, 68511), (78391, 15191), (80747, 59213), (5357, 11546), (16822, 16607), (36607, 41106), (74949, 30739), (45726, 64887), (1524, 54847), (37371, 89195), (28726, 27788), (22600, 44777), (53999, 63625), (84304, 98338), (49260, 76480), (74564, 53907), (89867, 97096), (60157, 61299), (17165, 10146), (56334, 36268), (62114, 49222), (22715, 23620), (42830, 11539), (41091, 69151), (75471, 68364), (18681, 43249), (42738, 63219), (35474, 98454), (76815, 46024), (66310, 36521), (86095, 77013), (63693, 77319), (80731, 63031), (95478, 92387), (23787, 63724), (46299, 68994), (4800, 2460), (9663, 80639), (77231, 85814), (81615, 11311), (35638, 27340), (13598, 14322), (30657, 17238), (90957, 96846), (69962, 52140), (41681, 65962), (96836, 58177), (36190, 11623), (4231, 40500), (43049, 41949), (71177, 98492), (30193, 39750), (19744, 33204), (63358, 30210), (45638, 58918), (43641, 38741), (35598, 40932), (33238, 36236), (50835, 20968), (25099, 34071), (84986, 88456), (35333, 1529), (79771, 23985), (647, 61658), (9424, 11743), (77766, 31528), (77811, 86973), (76403, 74377), (55568, 79251), (68858, 20762), (68520, 66773), (93598, 89823), (8080, 82539), (87760, 52247), (25191, 16905), (17837, 8339), (85177, 59050), (51680, 77374), (3287, 43018), (43479, 62141), (34909, 46322), (11869, 5885), (96193, 58417), (101, 47460), (34937, 88582), (83216, 88388), (28571, 15292), (66683, 62613), (34478, 8924), (2680, 89973), (62438, 44460), (11724, 4791), (5383, 72888), (88206, 67586), (8124, 21690), (28779, 75789), (66791, 4757), (6176, 47760), (6403, 78084), (78122, 35446), (99494, 73608), (39691, 89098), (59182, 19484), (25389, 98963), (96487, 3692), (76222, 67381), (21199, 50358), (95998, 58137), (28777, 43913), (14176, 60117), (52257, 81703), (14604, 13438), (71301, 14401), (19758, 66914), (15506, 29873), (87205, 29449), (93295, 15930), (63651, 11287), (19785, 15966), (30795, 75112), (69462, 37655), (18793, 85764), (36240, 31236), (98153, 73724), (72491, 4223), (66930, 35048), (25686, 13269), (13940, 13259), (69163, 11235), (1183, 86961), (54323, 67315), (85044, 60872), (48875, 3683), (43052, 92861), (87574, 32969), (92552, 80564), (94832, 47682), (72011, 80994), (60182, 917), (97788, 34169), (66432, 47940), (87468, 80954), (35385, 68758), (50555, 63710), (55311, 44337), (87065, 26514), (84581, 98736), (23212, 56499), (75120, 72447), (56087, 38285), (58171, 45629), (28401, 44319), (70432, 27883), (18891, 14646), (26206, 49924), (79957, 44914), (56064, 27529), (99090, 29197), (49435, 340), (53525, 65601), (76998, 88349), (50416, 70860), (42506, 75290), (34024, 13295), (86663, 46523), (88814, 231), (57809, 21), (84914, 84771), (43042, 66892), (17288, 33908), (4934, 63195), (50590, 1516), (97843, 80208), (20091, 86717), (71566, 15929), (19531, 23634), (41646, 45549), (89226, 82902), (96683, 63386), (31072, 53788), (51135, 41099), (78912, 65609), (36094, 23603), (88403, 51455), (73795, 47066), (26448, 82852), (22829, 2894), (30041, 92548), (27733, 20608), (70180, 19892), (51650, 63440), (76328, 13666), (40514, 6677), (2786, 51059), (40809, 16499), (10857, 82541), (78221, 61067), (17982, 51969), (85369, 66965), (47153, 47149), (43965, 75796), (82725, 60767), (42407, 97249), (51475, 81224), (60957, 89414), (33065, 21663), (36601, 5290), (95842, 67301), (64630, 60398), (55212, 35638), (41750, 44235), (75260, 82400), (91291, 25843), (6477, 8311), (14919, 52306), (66220, 33180), (45736, 2313), (37450, 64444), (98614, 61344), (75007, 50946), (56701, 28117), (66632, 5174), (92323, 76613), (6796, 73695), (33696, 76280), (86876, 5614), (50863, 67993), (36068, 17049), (91912, 34271), (70706, 1904), (97798, 41117), (68154, 72483), (83862, 25578), (61643, 17204), (69974, 64232), (77926, 19637), (64901, 88988), (71424, 91703), (91655, 17147), (46872, 56530), (44189, 98087), (95939, 54420), (72651, 68785), (67624, 84875), (92587, 87663), (65275, 81256), (53798, 2506), (14702, 3638), (71291, 50452), (14909, 13903), (66965, 26606), (14127, 60345), (35306, 1738), (77234, 10468), (53521, 41218), (80681, 82583), (44227, 26521), (32263, 21482), (82270, 56963), (50580, 80567), (11593, 22346), (20074, 26867), (73126, 28667), (62996, 24317), (20295, 57163), (1506, 57668), (69567, 45236), (43366, 26001), (88052, 40181), (1599, 89349), (36789, 1579), (39895, 46673), (30381, 3206), (31723, 5625), (19252, 31317), (16932, 77149), (48794, 34409), (55986, 30328), (47551, 75088), (57363, 78365), (95221, 63385), (26449, 5733), (96588, 53077), (52980, 41140), (8187, 85947), (36723, 26520), (23579, 38909), (33350, 19275), (63930, 19357), (43536, 59941), (31117, 77322), (44638, 94812), (44730, 99097), (95108, 48170), (57813, 49503), (79959, 89436), (86980, 62031), (8275, 44009), (36666, 94645), (22064, 38882), (40471, 16939), (31156, 11337), (13101, 96977), (17906, 26835), (89861, 51405), (73369, 67946), (99141, 58572), (27131, 98703), (15900, 43412), (51768, 93125), (78579, 46689), (23029, 13895), (60870, 55830), (22553, 8236), (76449, 96207), (83766, 51024), (27630, 50614), (53484, 90104), (77626, 21944), (46755, 41583), (53616, 34240), (94159, 44415), (13914, 90059), (44387, 89012), (27499, 64579), (83415, 30809), (77558, 82619), (88880, 9814), (8466, 4424), (43598, 91921), (24695, 3349), (46295, 65208), (51256, 82461), (49126, 93012), (16186, 96585), (43284, 22655), (93130, 90393), (77495, 34372), (85509, 65856), (86662, 61906), (50988, 44393), (29828, 17737), (91651, 35308), (29796, 49716), (14019, 87751), (29688, 71207), (82845, 19100), (11989, 50132), (21158, 99905), (54732, 42547), (32314, 12851), (46405, 43794), (87849, 45643), (53524, 21212), (61925, 75491), (12498, 21937), (30185, 69475), (48421, 52487), (15112, 90935), (33187, 17801), (61704, 25514), (17889, 23917), (18758, 57197), (7693, 47232), (47905, 24618), (11494, 78950), (95662, 54561), (8075, 33909), (90427, 46065), (73962, 19821), (50691, 79400), (58218, 4881), (94106, 2509), (60633, 55169), (49600, 83054), (23339, 13270), (70262, 58946), (48417, 97266), (27629, 46905), (74465, 75514), (41687, 2564), (12814, 19492), (78899, 30168), (17745, 35206), (37972, 35296), (22288, 80001),
diff --git a/tests/queries/0_stateless/00945_bloom_filter_index.sql b/tests/queries/0_stateless/00945_bloom_filter_index.sql
index f45c4c042907..d72f5ad1c6da 100644
--- a/tests/queries/0_stateless/00945_bloom_filter_index.sql
+++ b/tests/queries/0_stateless/00945_bloom_filter_index.sql
@@ -14,10 +14,10 @@ SELECT COUNT() FROM single_column_bloom_filter WHERE i32 IN (1, 2) SETTINGS max_
 SELECT COUNT() FROM single_column_bloom_filter WHERE (i32, i32) IN ((1, 2), (2, 3)) SETTINGS max_rows_to_read = 6;
 SELECT COUNT() FROM single_column_bloom_filter WHERE (i32, i64) IN ((1, 1), (2, 2)) SETTINGS max_rows_to_read = 6;
 SELECT COUNT() FROM single_column_bloom_filter WHERE (i64, (i64, i32)) IN ((1, (1, 1)), (2, (2, 2))) SETTINGS max_rows_to_read = 6;
-SELECT COUNT() FROM single_column_bloom_filter WHERE i32 IN (SELECT arrayJoin([toInt32(1), toInt32(2)])) SETTINGS max_rows_to_read = 6;
-SELECT COUNT() FROM single_column_bloom_filter WHERE (i32, i32) IN (SELECT arrayJoin([(toInt32(1), toInt32(2)), (toInt32(2), toInt32(3))])) SETTINGS max_rows_to_read = 6;
-SELECT COUNT() FROM single_column_bloom_filter WHERE (i32, i64) IN (SELECT arrayJoin([(toInt32(1), toUInt64(1)), (toInt32(2), toUInt64(2))])) SETTINGS max_rows_to_read = 6;
-SELECT COUNT() FROM single_column_bloom_filter WHERE (i64, (i64, i32)) IN (SELECT arrayJoin([(toUInt64(1), (toUInt64(1), toInt32(1))), (toUInt64(2), (toUInt64(2), toInt32(2)))])) SETTINGS max_rows_to_read = 6;
+SELECT COUNT() FROM single_column_bloom_filter WHERE i32 IN (SELECT arrayJoin([toInt32(1), toInt32(2)])) SETTINGS max_rows_to_read = 7;
+SELECT COUNT() FROM single_column_bloom_filter WHERE (i32, i32) IN (SELECT arrayJoin([(toInt32(1), toInt32(2)), (toInt32(2), toInt32(3))])) SETTINGS max_rows_to_read = 7;
+SELECT COUNT() FROM single_column_bloom_filter WHERE (i32, i64) IN (SELECT arrayJoin([(toInt32(1), toUInt64(1)), (toInt32(2), toUInt64(2))])) SETTINGS max_rows_to_read = 7;
+SELECT COUNT() FROM single_column_bloom_filter WHERE (i64, (i64, i32)) IN (SELECT arrayJoin([(toUInt64(1), (toUInt64(1), toInt32(1))), (toUInt64(2), (toUInt64(2), toInt32(2)))])) SETTINGS max_rows_to_read = 7;
 WITH (1, 2) AS liter_prepared_set SELECT COUNT() FROM single_column_bloom_filter WHERE i32 IN liter_prepared_set SETTINGS max_rows_to_read = 6;
 WITH ((1, 2), (2, 3)) AS liter_prepared_set SELECT COUNT() FROM single_column_bloom_filter WHERE (i32, i32) IN liter_prepared_set SETTINGS max_rows_to_read = 6;
 WITH ((1, 1), (2, 2)) AS liter_prepared_set SELECT COUNT() FROM single_column_bloom_filter WHERE (i32, i64) IN liter_prepared_set SETTINGS max_rows_to_read = 6;
diff --git a/tests/queries/0_stateless/01064_incremental_streaming_from_2_src_with_feedback.sql b/tests/queries/0_stateless/01064_incremental_streaming_from_2_src_with_feedback.sql
index a653206fe18f..0bc5fcd1db84 100644
--- a/tests/queries/0_stateless/01064_incremental_streaming_from_2_src_with_feedback.sql
+++ b/tests/queries/0_stateless/01064_incremental_streaming_from_2_src_with_feedback.sql
@@ -89,8 +89,11 @@ INSERT INTO checkouts SELECT number as id, '2000-01-01 10:00:00' from numbers(50
 -- by this time we should have 3 parts for target_table because of prev inserts
 -- and we plan to make two more inserts. With index_granularity=128 and max id=1000
 -- we expect to read not more than:
+--      1000 rows read from numbers(1000) in the INSERT itself
+--      1000 rows in the `IN (SELECT id FROM table)` in the mat views
 --      (1000/128) marks per part * (3 + 2) parts * 128 granularity = 5120 rows
-set max_rows_to_read = 5120;
+--      Total: 7120
+set max_rows_to_read = 7120;
 
 INSERT INTO logins    SELECT number as id, '2000-01-01 11:00:00' from numbers(1000);
 INSERT INTO checkouts SELECT number as id, '2000-01-01 11:10:00' from numbers(1000);
@@ -98,8 +101,8 @@ INSERT INTO checkouts SELECT number as id, '2000-01-01 11:10:00' from numbers(10
 -- by this time we should have 5 parts for target_table because of prev inserts
 -- and we plan to make two more inserts. With index_granularity=128 and max id=1
 -- we expect to read not more than:
---      1 mark per part * (5 + 2) parts * 128 granularity = 896 rows
-set max_rows_to_read = 896;
+--      1 mark per part * (5 + 2) parts * 128 granularity + 1 (numbers(1)) = 897 rows
+set max_rows_to_read = 897;
 
 INSERT INTO logins    SELECT number+2 as id, '2001-01-01 11:10:01' from numbers(1);
 INSERT INTO checkouts SELECT number+2 as id, '2001-01-01 11:10:02' from numbers(1);
diff --git a/tests/queries/0_stateless/01504_rocksdb.sql b/tests/queries/0_stateless/01504_rocksdb.sql
index 9f9e6c3b1aca..f79f31139fee 100644
--- a/tests/queries/0_stateless/01504_rocksdb.sql
+++ b/tests/queries/0_stateless/01504_rocksdb.sql
@@ -34,7 +34,7 @@ INSERT INTO 01504_test_memory SELECT number % 77 AS k, SUM(number) AS value, (1,
 
 SELECT  A.a = B.a, A.b = B.b, A.c = B.c, A.d = B.d, A.e = B.e FROM ( SELECT 0 AS a, groupBitmapMerge(bm) AS b , SUM(k) AS c, SUM(value) AS d, SUM(dummy.1) AS e FROM 01504_test) A  ANY LEFT JOIN  (SELECT 0 AS a, groupBitmapMerge(bm) AS b , SUM(k) AS c, SUM(value) AS d, SUM(dummy.1) AS e FROM 01504_test_memory) B USING a ORDER BY a;
 
-CREATE TEMPORARY TABLE keys AS SELECT * FROM numbers(1000);
+CREATE TEMPORARY TABLE keys AS SELECT * FROM system.numbers LIMIT 1 OFFSET 4;
 
 SET max_rows_to_read = 2;
 SELECT dummy == (1,1.2) FROM 01504_test WHERE k IN (1, 3) OR k IN (1) OR k IN (3, 1) OR k IN [1] OR k IN [1, 3] ;
diff --git a/tests/queries/0_stateless/01583_const_column_in_set_index.sql b/tests/queries/0_stateless/01583_const_column_in_set_index.sql
index e40249eaf081..b781efb0f133 100644
--- a/tests/queries/0_stateless/01583_const_column_in_set_index.sql
+++ b/tests/queries/0_stateless/01583_const_column_in_set_index.sql
@@ -3,7 +3,7 @@ drop table if exists insub;
 create table insub (i int, j int) engine MergeTree order by i settings index_granularity = 1;
 insert into insub select number a, a + 2 from numbers(10);
 
-SET max_rows_to_read = 2;
+SET max_rows_to_read = 12; -- 10 from numbers + 2 from table
 select * from insub where i in (select toInt32(3) from numbers(10));
 
 drop table if exists insub;
diff --git a/tests/queries/0_stateless/01585_use_index_for_global_in.sql b/tests/queries/0_stateless/01585_use_index_for_global_in.sql
index a0a5b90ac1f7..1dd7609350fd 100644
--- a/tests/queries/0_stateless/01585_use_index_for_global_in.sql
+++ b/tests/queries/0_stateless/01585_use_index_for_global_in.sql
@@ -8,10 +8,12 @@ create table xp_d as xp engine Distributed(test_shard_localhost, currentDatabase
 
 insert into xp select number, number + 2 from numbers(10);
 
-set max_rows_to_read = 2;
+set max_rows_to_read = 4; -- 2 from numbers, 2 from tables
 select * from xp where i in (select * from numbers(2));
 select * from xp where i global in (select * from numbers(2));
 select * from xp_d where i in (select * from numbers(2));
+
+set max_rows_to_read = 6; -- 2 from numbers, 2 from GLOBAL temp table (pushed from numbers), 2 from local xp
 select * from xp_d where i global in (select * from numbers(2));
 
 drop table if exists xp;
diff --git a/tests/queries/0_stateless/01585_use_index_for_global_in_with_null.reference b/tests/queries/0_stateless/01585_use_index_for_global_in_with_null.reference
index de0116f9eaa1..0cb1993057fd 100644
--- a/tests/queries/0_stateless/01585_use_index_for_global_in_with_null.reference
+++ b/tests/queries/0_stateless/01585_use_index_for_global_in_with_null.reference
@@ -14,6 +14,14 @@
 1	3
 0	2
 1	3
+0	2
+1	3
+0	2
+1	3
+0	2
+1	3
+0	2
+1	3
 \N	100
 \N	100
 \N	100
diff --git a/tests/queries/0_stateless/01585_use_index_for_global_in_with_null.sql b/tests/queries/0_stateless/01585_use_index_for_global_in_with_null.sql
index 6129c92c888a..d4147a445ec3 100644
--- a/tests/queries/0_stateless/01585_use_index_for_global_in_with_null.sql
+++ b/tests/queries/0_stateless/01585_use_index_for_global_in_with_null.sql
@@ -12,17 +12,29 @@ insert into xp select null, 100;
 optimize table xp final;
 
 set max_rows_to_read = 2;
+select * from xp where i in [0, 1];
+select * from xp where i global in [0, 1];
+select * from xp_d where i in [0, 1];
+select * from xp_d where i global in [0, 1];
+
+set max_rows_to_read = 4; -- 2 in the subquery, 2 in the query itself
 select * from xp where i in (select * from numbers(2));
 select * from xp where i global in (select * from numbers(2));
 select * from xp_d where i in (select * from numbers(2));
+
+set max_rows_to_read = 6; -- 2 subquery, 2 from global temp table (GLOBAL IN), 2 from local xp table
 select * from xp_d where i global in (select * from numbers(2));
 
 set transform_null_in = 1;
+set max_rows_to_read = 4; -- 2 in the subquery, 2 in the query itself
 select * from xp where i in (select * from numbers(2));
 select * from xp where i global in (select * from numbers(2));
 select * from xp_d where i in (select * from numbers(2));
+
+set max_rows_to_read = 6; -- 2 subquery, 2 from global temp table (GLOBAL IN), 2 from local xp table
 select * from xp_d where i global in (select * from numbers(2));
 
+set max_rows_to_read = 0; -- No rows should be read
 select * from xp where i in (null);
 select * from xp where i global in (null);
 select * from xp_d where i in (null);
diff --git a/tests/queries/0_stateless/01748_partition_id_pruning.sql b/tests/queries/0_stateless/01748_partition_id_pruning.sql
index 17a405e17ade..e0d45884c600 100644
--- a/tests/queries/0_stateless/01748_partition_id_pruning.sql
+++ b/tests/queries/0_stateless/01748_partition_id_pruning.sql
@@ -8,12 +8,12 @@ set max_rows_to_read = 3;
 
 select * from x where _partition_id = partitionId(1);
 
-set max_rows_to_read = 4; -- one row for subquery
+set max_rows_to_read = 5; -- one row for subquery + subquery
 
 select * from x where _partition_id in (select partitionId(number + 1) from numbers(1));
 
 -- trivial count optimization test
-set max_rows_to_read = 1; -- one row for subquery
+set max_rows_to_read = 2; -- one row for subquery + subquery itself
 select count() from x where _partition_id in (select partitionId(number + 1) from numbers(1));
 
 drop table x;
diff --git a/tests/queries/0_stateless/01927_query_views_log_current_database.reference b/tests/queries/0_stateless/01927_query_views_log_current_database.reference
index ff9eca2d97fc..eaa1e98c55c3 100644
--- a/tests/queries/0_stateless/01927_query_views_log_current_database.reference
+++ b/tests/queries/0_stateless/01927_query_views_log_current_database.reference
@@ -1,70 +1,94 @@
 Row 1:
 ──────
-stage:        Query log rows
-read_rows:    100
-written_rows: 201
-databases:    ['_table_function','default']
-tables:       ['_table_function.numbers','default.table_a','default.table_b','default.table_b_live_view','default.table_c']
-views:        ['default.matview_a_to_b','default.matview_b_to_c','default.table_b_live_view']
-sleep_calls:  200
-sleep_us:     298
+stage:                Query log rows
+read_rows:            400
+written_rows:         201
+databases:            ['_table_function','default']
+tables:               ['_table_function.numbers','default.table_a','default.table_b','default.table_b_live_view','default.table_c']
+views:                ['default.matview_a_to_b','default.matview_b_to_c','default.table_b_live_view']
+sleep_calls:          200
+sleep_us:             298
+profile_select_rows:  400
+profile_select_bytes: 5200
+profile_insert_rows:  201
+profile_insert_bytes: 2808
 Row 1:
 ──────
-stage:        Depending views
-view_name:    default.matview_a_to_b
-view_type:    Materialized
-status:       QueryFinish
-view_target:  default.table_b
-view_query:   SELECT toFloat64(a) AS a, b + sleepEachRow(0.000001) AS count FROM default.table_a
-read_rows:    100
-written_rows: 100
-sleep_calls:  100
-sleep_us:     99
+stage:                Depending views
+view_name:            default.matview_a_to_b
+view_type:            Materialized
+status:               QueryFinish
+view_target:          default.table_b
+view_query:           SELECT toFloat64(a) AS a, b + sleepEachRow(0.000001) AS count FROM default.table_a
+read_rows:            100
+written_rows:         100
+sleep_calls:          100
+sleep_us:             99
+profile_select_rows:  100
+profile_select_bytes: 2000
+profile_insert_rows:  100
+profile_insert_bytes: 800
 
 Row 2:
 ──────
-stage:        Depending views
-view_name:    default.matview_b_to_c
-view_type:    Materialized
-status:       QueryFinish
-view_target:  default.table_c
-view_query:   SELECT sum(a + sleepEachRow(0.000002)) AS a FROM default.table_b
-read_rows:    100
-written_rows: 1
-sleep_calls:  100
-sleep_us:     199
+stage:                Depending views
+view_name:            default.matview_b_to_c
+view_type:            Materialized
+status:               QueryFinish
+view_target:          default.table_c
+view_query:           SELECT sum(a + sleepEachRow(0.000002)) AS a FROM default.table_b
+read_rows:            100
+written_rows:         1
+sleep_calls:          100
+sleep_us:             199
+profile_select_rows:  100
+profile_select_bytes: 800
+profile_insert_rows:  1
+profile_insert_bytes: 8
 
 Row 3:
 ──────
-stage:        Depending views
-view_name:    default.table_b_live_view
-view_type:    Live
-status:       QueryFinish
-view_target:  default.table_b_live_view
-view_query:   SELECT sum(a + b) FROM default.table_b
-read_rows:    100
-written_rows: 0
-sleep_calls:  0
-sleep_us:     0
+stage:                Depending views
+view_name:            default.table_b_live_view
+view_type:            Live
+status:               QueryFinish
+view_target:          default.table_b_live_view
+view_query:           SELECT sum(a + b) FROM default.table_b
+read_rows:            100
+written_rows:         0
+sleep_calls:          0
+sleep_us:             0
+profile_select_rows:  100
+profile_select_bytes: 1600
+profile_insert_rows:  0
+profile_insert_bytes: 0
 Row 1:
 ──────
-stage:        Query log rows 2
-read_rows:    50
-written_rows: 100
-databases:    ['_table_function','default']
-tables:       ['_table_function.numbers','default.table_d','default.table_e','default.table_f']
-views:        ['default.matview_join_d_e']
-sleep_calls:  50
-sleep_us:     150
+stage:                Query log rows 2
+read_rows:            100
+written_rows:         100
+databases:            ['_table_function','default']
+tables:               ['_table_function.numbers','default.table_d','default.table_e','default.table_f']
+views:                ['default.matview_join_d_e']
+sleep_calls:          50
+sleep_us:             150
+profile_select_rows:  100
+profile_select_bytes: 800
+profile_insert_rows:  100
+profile_insert_bytes: 1600
 Row 1:
 ──────
-stage:        Depending views 2
-view_name:    default.matview_join_d_e
-view_type:    Materialized
-status:       QueryFinish
-view_target:  default.table_f
-view_query:   SELECT table_d.a AS a, table_e.count + sleepEachRow(0.000003) AS count FROM default.table_d LEFT JOIN default.table_e ON table_d.a = table_e.a
-read_rows:    50
-written_rows: 50
-sleep_calls:  50
-sleep_us:     150
+stage:                Depending views 2
+view_name:            default.matview_join_d_e
+view_type:            Materialized
+status:               QueryFinish
+view_target:          default.table_f
+view_query:           SELECT table_d.a AS a, table_e.count + sleepEachRow(0.000003) AS count FROM default.table_d LEFT JOIN default.table_e ON table_d.a = table_e.a
+read_rows:            50
+written_rows:         50
+sleep_calls:          50
+sleep_us:             150
+profile_select_rows:  50
+profile_select_bytes: 400
+profile_insert_rows:  50
+profile_insert_bytes: 800
diff --git a/tests/queries/0_stateless/01927_query_views_log_current_database.sql b/tests/queries/0_stateless/01927_query_views_log_current_database.sql
index 40ab8c8e16a3..fbfbeab01672 100644
--- a/tests/queries/0_stateless/01927_query_views_log_current_database.sql
+++ b/tests/queries/0_stateless/01927_query_views_log_current_database.sql
@@ -45,7 +45,11 @@ SELECT
     arraySort(tables) as tables,
     arraySort(views) as views,
     ProfileEvents['SleepFunctionCalls'] as sleep_calls,
-    ProfileEvents['SleepFunctionMicroseconds'] as sleep_us
+    ProfileEvents['SleepFunctionMicroseconds'] as sleep_us,
+    ProfileEvents['SelectedRows'] as profile_select_rows,
+    ProfileEvents['SelectedBytes'] as profile_select_bytes,
+    ProfileEvents['InsertedRows'] as profile_insert_rows,
+    ProfileEvents['InsertedBytes'] as profile_insert_bytes
 FROM system.query_log
 WHERE query like '-- INSERT 1%INSERT INTO table_a%'
   AND current_database = currentDatabase()
@@ -62,7 +66,11 @@ SELECT
     read_rows,
     written_rows,
     ProfileEvents['SleepFunctionCalls'] as sleep_calls,
-    ProfileEvents['SleepFunctionMicroseconds'] as sleep_us
+    ProfileEvents['SleepFunctionMicroseconds'] as sleep_us,
+    ProfileEvents['SelectedRows'] as profile_select_rows,
+    ProfileEvents['SelectedBytes'] as profile_select_bytes,
+    ProfileEvents['InsertedRows'] as profile_insert_rows,
+    ProfileEvents['InsertedBytes'] as profile_insert_bytes
 FROM system.query_views_log
 WHERE initial_query_id =
       (
@@ -85,7 +93,11 @@ SELECT
     arraySort(tables) as tables,
     arraySort(views) as views,
     ProfileEvents['SleepFunctionCalls'] as sleep_calls,
-    ProfileEvents['SleepFunctionMicroseconds'] as sleep_us
+    ProfileEvents['SleepFunctionMicroseconds'] as sleep_us,
+    ProfileEvents['SelectedRows'] as profile_select_rows,
+    ProfileEvents['SelectedBytes'] as profile_select_bytes,
+    ProfileEvents['InsertedRows'] as profile_insert_rows,
+    ProfileEvents['InsertedBytes'] as profile_insert_bytes
 FROM system.query_log
 WHERE query like '-- INSERT 2%INSERT INTO table_d%'
   AND current_database = currentDatabase()
@@ -102,7 +114,11 @@ SELECT
     read_rows,
     written_rows,
     ProfileEvents['SleepFunctionCalls'] as sleep_calls,
-    ProfileEvents['SleepFunctionMicroseconds'] as sleep_us
+    ProfileEvents['SleepFunctionMicroseconds'] as sleep_us,
+    ProfileEvents['SelectedRows'] as profile_select_rows,
+    ProfileEvents['SelectedBytes'] as profile_select_bytes,
+    ProfileEvents['InsertedRows'] as profile_insert_rows,
+    ProfileEvents['InsertedBytes'] as profile_insert_bytes
 FROM system.query_views_log
 WHERE initial_query_id =
       (
diff --git a/tests/queries/0_stateless/02125_query_views_log.reference b/tests/queries/0_stateless/02125_query_views_log.reference
index 3ae4af9b4d0f..fac70027113e 100644
--- a/tests/queries/0_stateless/02125_query_views_log.reference
+++ b/tests/queries/0_stateless/02125_query_views_log.reference
@@ -18,7 +18,7 @@ written_bytes: 4000000
 select read_rows, read_bytes, written_rows, written_bytes from system.query_log where type = 'QueryFinish' and query_kind = 'Insert' and current_database = currentDatabase() format Vertical;
 Row 1:
 ──────
-read_rows:     1000000
-read_bytes:    8000000
+read_rows:     3000000
+read_bytes:    16000000
 written_rows:  3000000
 written_bytes: 12000000
diff --git a/tests/queries/0_stateless/02136_kill_scalar_queries.reference b/tests/queries/0_stateless/02136_kill_scalar_queries.reference
new file mode 100644
index 000000000000..a598447cff52
--- /dev/null
+++ b/tests/queries/0_stateless/02136_kill_scalar_queries.reference
@@ -0,0 +1,2 @@
+finished	default_TEST02132KILL_QUERY1	default	select (SELECT max(number) from system.numbers) + 1;
+finished	default_TEST02132KILL_QUERY2	default	SELECT (SELECT number FROM system.numbers WHERE number = 1000000000000);
diff --git a/tests/queries/0_stateless/02136_kill_scalar_queries.sh b/tests/queries/0_stateless/02136_kill_scalar_queries.sh
new file mode 100755
index 000000000000..382f6555c667
--- /dev/null
+++ b/tests/queries/0_stateless/02136_kill_scalar_queries.sh
@@ -0,0 +1,22 @@
+#!/usr/bin/env bash
+# Ref: https://github.com/ClickHouse/ClickHouse/issues/1576
+CURDIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
+# shellcheck source=../shell_config.sh
+. "$CURDIR"/../shell_config.sh
+
+function wait_for_query_to_start()
+{
+    while [[ $($CLICKHOUSE_CURL -sS "$CLICKHOUSE_URL" -d "SELECT count() FROM system.processes WHERE query_id = '$1'") == 0 ]]; do sleep 0.1; done
+}
+
+QUERY_1_ID="${CLICKHOUSE_DATABASE}_TEST02132KILL_QUERY1"
+(${CLICKHOUSE_CLIENT} --query_id="${QUERY_1_ID}" --query='select (SELECT max(number) from system.numbers) + 1;'  2>&1 | grep -q "Code: 394." || echo 'FAIL') &
+wait_for_query_to_start "${QUERY_1_ID}"
+${CLICKHOUSE_CLIENT} --query="KILL QUERY WHERE query_id='${QUERY_1_ID}' SYNC"
+
+QUERY_2_ID="${CLICKHOUSE_DATABASE}_TEST02132KILL_QUERY2"
+(${CLICKHOUSE_CLIENT} --query_id="${QUERY_2_ID}" --query='SELECT (SELECT number FROM system.numbers WHERE number = 1000000000000);'  2>&1 | grep -q "Code: 394." || echo 'FAIL') &
+wait_for_query_to_start "${QUERY_2_ID}"
+${CLICKHOUSE_CLIENT} --query="KILL QUERY WHERE query_id='${QUERY_2_ID}' SYNC"
+
+wait
diff --git a/tests/queries/0_stateless/02136_scalar_progress.reference b/tests/queries/0_stateless/02136_scalar_progress.reference
new file mode 100644
index 000000000000..21f6d3e00432
--- /dev/null
+++ b/tests/queries/0_stateless/02136_scalar_progress.reference
@@ -0,0 +1,6 @@
+< X-ClickHouse-Progress: {"read_rows":"0","read_bytes":"0","written_rows":"0","written_bytes":"0","total_rows_to_read":"100000"}
+< X-ClickHouse-Progress: {"read_rows":"65505","read_bytes":"524040","written_rows":"0","written_bytes":"0","total_rows_to_read":"100000"}
+< X-ClickHouse-Progress: {"read_rows":"131010","read_bytes":"1048080","written_rows":"0","written_bytes":"0","total_rows_to_read":"100000"}
+< X-ClickHouse-Progress: {"read_rows":"131011","read_bytes":"1048081","written_rows":"0","written_bytes":"0","total_rows_to_read":"100000"}
+< X-ClickHouse-Progress: {"read_rows":"131011","read_bytes":"1048081","written_rows":"0","written_bytes":"0","total_rows_to_read":"100000"}
+< X-ClickHouse-Summary: {"read_rows":"131011","read_bytes":"1048081","written_rows":"0","written_bytes":"0","total_rows_to_read":"100000"}
diff --git a/tests/queries/0_stateless/02136_scalar_progress.sh b/tests/queries/0_stateless/02136_scalar_progress.sh
new file mode 100755
index 000000000000..4608031f83d7
--- /dev/null
+++ b/tests/queries/0_stateless/02136_scalar_progress.sh
@@ -0,0 +1,7 @@
+#!/usr/bin/env bash
+# Ref: https://github.com/ClickHouse/ClickHouse/issues/1576
+CURDIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
+# shellcheck source=../shell_config.sh
+. "$CURDIR"/../shell_config.sh
+
+$CLICKHOUSE_CURL -sS "${CLICKHOUSE_URL}&wait_end_of_query=1&send_progress_in_http_headers=1&http_headers_progress_interval_ms=0" -d "SELECT (SELECT max(number), count(number) FROM numbers(100000));" -v 2>&1 | grep -E "X-ClickHouse-Summary|X-ClickHouse-Progress"
diff --git a/tests/queries/0_stateless/02136_scalar_read_rows_json.reference b/tests/queries/0_stateless/02136_scalar_read_rows_json.reference
new file mode 100644
index 000000000000..49020a4432f9
--- /dev/null
+++ b/tests/queries/0_stateless/02136_scalar_read_rows_json.reference
@@ -0,0 +1,50 @@
+#1
+{
+	"meta":
+	[
+		{
+			"name": "count()",
+			"type": "UInt64"
+		}
+	],
+
+	"data":
+	[
+		{
+			"count()": "100"
+		}
+	],
+
+	"rows": 1,
+
+	"rows_before_limit_at_least": 100,
+
+	"statistics":
+	{
+		"rows_read": 100,
+		"bytes_read": 800
+	}
+}
+#2
+{
+	"meta":
+	[
+		{
+			"type": "Tuple(UInt64, UInt64)"
+		}
+	],
+
+	"data":
+	[
+		{
+		}
+	],
+
+	"rows": 1,
+
+	"statistics":
+	{
+		"rows_read": 131011,
+		"bytes_read": 1048081
+	}
+}
diff --git a/tests/queries/0_stateless/02136_scalar_read_rows_json.sh b/tests/queries/0_stateless/02136_scalar_read_rows_json.sh
new file mode 100755
index 000000000000..d589cb600868
--- /dev/null
+++ b/tests/queries/0_stateless/02136_scalar_read_rows_json.sh
@@ -0,0 +1,10 @@
+#!/usr/bin/env bash
+# Ref: https://github.com/ClickHouse/ClickHouse/issues/1576
+CURDIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
+# shellcheck source=../shell_config.sh
+. "$CURDIR"/../shell_config.sh
+
+echo "#1"
+${CLICKHOUSE_CLIENT} --query='SELECT count() FROM numbers(100) FORMAT JSON;' | grep -a -v "elapsed"
+echo "#2"
+${CLICKHOUSE_CLIENT} --query='SELECT (SELECT max(number), count(number) FROM numbers(100000) as n) FORMAT JSON;' | grep -a -v "elapsed" | grep -v "_subquery"
diff --git a/tests/queries/0_stateless/02136_scalar_subquery_metrics.reference b/tests/queries/0_stateless/02136_scalar_subquery_metrics.reference
new file mode 100644
index 000000000000..7bef11d008f6
--- /dev/null
+++ b/tests/queries/0_stateless/02136_scalar_subquery_metrics.reference
@@ -0,0 +1,9 @@
+#02136_scalar_subquery_1	999
+#02136_scalar_subquery_2	999	0
+#02136_scalar_subquery_3	999	999
+#02136_scalar_subquery_4	999
+#02136_scalar_subquery_4	999
+1001	SELECT \'#02136_scalar_subquery_1\', (SELECT max(number) FROM numbers(1000)) as n;
+2001	SELECT \'#02136_scalar_subquery_2\', (SELECT max(number) FROM numbers(1000)) as n, (SELECT min(number) FROM numbers(1000)) as n2;
+1001	SELECT \'#02136_scalar_subquery_3\', (SELECT max(number) FROM numbers(1000)) as n, (SELECT max(number) FROM numbers(1000)) as n2;
+1002	SELECT \'#02136_scalar_subquery_4\', (SELECT max(number) FROM numbers(1000)) as n FROM system.numbers LIMIT 2;
diff --git a/tests/queries/0_stateless/02136_scalar_subquery_metrics.sql b/tests/queries/0_stateless/02136_scalar_subquery_metrics.sql
new file mode 100644
index 000000000000..180610288aaa
--- /dev/null
+++ b/tests/queries/0_stateless/02136_scalar_subquery_metrics.sql
@@ -0,0 +1,13 @@
+SELECT '#02136_scalar_subquery_1', (SELECT max(number) FROM numbers(1000)) as n;
+SELECT '#02136_scalar_subquery_2', (SELECT max(number) FROM numbers(1000)) as n, (SELECT min(number) FROM numbers(1000)) as n2;
+SELECT '#02136_scalar_subquery_3', (SELECT max(number) FROM numbers(1000)) as n, (SELECT max(number) FROM numbers(1000)) as n2; -- Cached
+SELECT '#02136_scalar_subquery_4', (SELECT max(number) FROM numbers(1000)) as n FROM system.numbers LIMIT 2; -- Cached
+
+SYSTEM FLUSH LOGS;
+SELECT read_rows, query FROM system.query_log
+WHERE
+      event_date > yesterday()
+  AND type = 'QueryFinish'
+  AND current_database == currentDatabase()
+  AND query LIKE 'SELECT ''#02136_scalar_subquery_%'
+ORDER BY query ASC;
