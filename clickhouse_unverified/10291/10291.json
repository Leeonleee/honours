{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 10291,
  "instance_id": "ClickHouse__ClickHouse-10291",
  "issue_numbers": [
    "9853"
  ],
  "base_commit": "7974fcb9d7c033734a5a171d09b61782ab3a7e7a",
  "patch": "diff --git a/src/Interpreters/JoinToSubqueryTransformVisitor.cpp b/src/Interpreters/JoinToSubqueryTransformVisitor.cpp\nindex ca21a53b5b05..331c364c5faa 100644\n--- a/src/Interpreters/JoinToSubqueryTransformVisitor.cpp\n+++ b/src/Interpreters/JoinToSubqueryTransformVisitor.cpp\n@@ -9,6 +9,7 @@\n #include <Parsers/ASTTablesInSelectQuery.h>\n #include <Parsers/ASTIdentifier.h>\n #include <Parsers/ASTExpressionList.h>\n+#include <Parsers/ASTFunction.h>\n #include <Parsers/ParserTablesInSelectQuery.h>\n #include <Parsers/ExpressionListParsers.h>\n #include <Parsers/parseQuery.h>\n@@ -129,6 +130,8 @@ class ExtractAsterisksMatcher\n /// Make aliases maps (alias -> column_name, column_name -> alias)\n struct ColumnAliasesMatcher\n {\n+    using Visitor = ConstInDepthNodeVisitor<ColumnAliasesMatcher, true>;\n+\n     struct Data\n     {\n         const std::vector<DatabaseAndTableWithAlias> tables;\n@@ -137,6 +140,7 @@ struct ColumnAliasesMatcher\n         std::unordered_map<String, String> aliases;     /// alias -> long_name\n         std::vector<std::pair<ASTIdentifier *, bool>> compound_identifiers;\n         std::set<String> allowed_long_names;            /// original names allowed as aliases '--t.x as t.x' (select expressions only).\n+        bool inside_function = false;\n \n         explicit Data(const std::vector<DatabaseAndTableWithAlias> && tables_)\n             : tables(tables_)\n@@ -192,6 +196,10 @@ struct ColumnAliasesMatcher\n \n     static bool needChildVisit(const ASTPtr & node, const ASTPtr &)\n     {\n+        /// Do not go into subqueries. Function visits children itself.\n+        if (node->as<ASTSubquery>() ||\n+            node->as<ASTFunction>())\n+            return false;\n         return !node->as<ASTQualifiedAsterisk>();\n     }\n \n@@ -199,11 +207,24 @@ struct ColumnAliasesMatcher\n     {\n         if (auto * t = ast->as<ASTIdentifier>())\n             visit(*t, ast, data);\n+        else if (auto * f = ast->as<ASTFunction>())\n+            visit(*f, ast, data);\n \n-        if (ast->as<ASTAsterisk>() || ast->as<ASTQualifiedAsterisk>())\n+        /// Do not allow asterisks but ignore them inside functions. I.e. allow 'count(*)'.\n+        if (!data.inside_function && (ast->as<ASTAsterisk>() || ast->as<ASTQualifiedAsterisk>()))\n             throw Exception(\"Multiple JOIN do not support asterisks for complex queries yet\", ErrorCodes::NOT_IMPLEMENTED);\n     }\n \n+    static void visit(const ASTFunction &, const ASTPtr & ast, Data & data)\n+    {\n+        /// Grandchild case: Function -> (ExpressionList) -> Asterisk\n+        data.inside_function = true;\n+        Visitor visitor(data);\n+        for (auto & child : ast->children)\n+            visitor.visit(child);\n+        data.inside_function = false;\n+    }\n+\n     static void visit(const ASTIdentifier & const_node, const ASTPtr &, Data & data)\n     {\n         ASTIdentifier & node = const_cast<ASTIdentifier &>(const_node); /// we know it's not const\n@@ -348,7 +369,7 @@ bool needRewrite(ASTSelectQuery & select, std::vector<const ASTTableExpression *\n using RewriteMatcher = OneTypeMatcher<RewriteTablesVisitorData>;\n using RewriteVisitor = InDepthNodeVisitor<RewriteMatcher, true>;\n using ExtractAsterisksVisitor = ConstInDepthNodeVisitor<ExtractAsterisksMatcher, true>;\n-using ColumnAliasesVisitor = ConstInDepthNodeVisitor<ColumnAliasesMatcher, true>;\n+using ColumnAliasesVisitor = ColumnAliasesMatcher::Visitor;\n using AppendSemanticMatcher = OneTypeMatcher<AppendSemanticVisitorData>;\n using AppendSemanticVisitor = InDepthNodeVisitor<AppendSemanticMatcher, true>;\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01116_cross_count_asterisks.reference b/tests/queries/0_stateless/01116_cross_count_asterisks.reference\nnew file mode 100644\nindex 000000000000..8347b144a351\n--- /dev/null\n+++ b/tests/queries/0_stateless/01116_cross_count_asterisks.reference\n@@ -0,0 +1,4 @@\n+2\n+1\n+2\n+1\ndiff --git a/tests/queries/0_stateless/01116_cross_count_asterisks.sql b/tests/queries/0_stateless/01116_cross_count_asterisks.sql\nnew file mode 100644\nindex 000000000000..1fb8b0b0e664\n--- /dev/null\n+++ b/tests/queries/0_stateless/01116_cross_count_asterisks.sql\n@@ -0,0 +1,29 @@\n+SET multiple_joins_rewriter_version = 2;\n+\n+SELECT count(*)\n+FROM numbers(2) AS n1, numbers(3) AS n2, numbers(4) AS n3\n+WHERE (n1.number = n2.number) AND (n2.number = n3.number);\n+\n+SELECT count(*) c FROM (\n+    SELECT count(*), count(*) as c\n+    FROM numbers(2) AS n1, numbers(3) AS n2, numbers(4) AS n3\n+    WHERE (n1.number = n2.number) AND (n2.number = n3.number)\n+        AND (SELECT count(*) FROM numbers(1)) = 1\n+)\n+WHERE (SELECT count(*) FROM numbers(2)) = 2\n+HAVING c IN(SELECT count(*) c FROM numbers(1));\n+\n+SET multiple_joins_rewriter_version = 1;\n+\n+SELECT count(*)\n+FROM numbers(2) AS n1, numbers(3) AS n2, numbers(4) AS n3\n+WHERE (n1.number = n2.number) AND (n2.number = n3.number);\n+\n+SELECT count(*) c FROM (\n+    SELECT count(*), count(*) as c\n+    FROM numbers(2) AS n1, numbers(3) AS n2, numbers(4) AS n3\n+    WHERE (n1.number = n2.number) AND (n2.number = n3.number)\n+        AND (SELECT count(*) FROM numbers(1)) = 1\n+)\n+WHERE (SELECT count(*) FROM numbers(2)) = 2\n+HAVING c IN(SELECT count(*) c FROM numbers(1));\n",
  "problem_statement": "Cross join does not support asterisks for complex queries\nCross join doesn't support asterisk for queries with more than two tables.\r\n\r\nThis query works:\r\n```sql\r\nSELECT count(*)\r\nFROM numbers(4) AS n1, numbers(3) AS n2\r\nWHERE (n1.number = n2.number);\r\n```\r\nThis one failed:\r\n```sql\r\nSELECT count(*)\r\nFROM numbers(4) AS n1, numbers(3) AS n2, numbers(6) AS n3\r\nWHERE (n1.number = n2.number) AND (n2.number = n3.number);\r\n```\r\nwith error:\r\n```bash\r\nReceived exception from server (version 20.3.3):\r\nCode: 48. DB::Exception: Received from localhost:9000. DB::Exception: Multiple JOIN do not support asterisks for complex queries yet. Stack trace:\r\n\r\n0. Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x102d352c in /usr/bin/clickhouse\r\n1. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x8f2d989 in /usr/bin/clickhouse\r\n2. ? @ 0xd2c36f6 in /usr/bin/clickhouse\r\n3. ? @ 0xd2be444 in /usr/bin/clickhouse\r\n4. ? @ 0xd2be444 in /usr/bin/clickhouse\r\n5. ? @ 0xd2be444 in /usr/bin/clickhouse\r\n6. DB::JoinToSubqueryTransformMatcher::visit(DB::ASTSelectQuery&, std::__1::shared_ptr<DB::IAST>&, DB::JoinToSubqueryTransformMatcher::Data&) @ 0xd2bed9d in /usr/bin/clickhouse\r\n7. DB::JoinToSubqueryTransformMatcher::visit(std::__1::shared_ptr<DB::IAST>&, DB::JoinToSubqueryTransformMatcher::Data&) @ 0xd2c15df in /usr/bin/clickhouse\r\n8. DB::InDepthNodeVisitor<DB::JoinToSubqueryTransformMatcher, true, std::__1::shared_ptr<DB::IAST> >::visit(std::__1::shared_ptr<DB::IAST>&) @ 0xcfc8145 in /usr/bin/clickhouse\r\n9. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xcfba877 in /usr/bin/clickhouse\r\n10. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xcfbb395 in /usr/bin/clickhouse\r\n11. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xd1b6d26 in /usr/bin/clickhouse\r\n12. DB::InterpreterFactory::get(std::__1::shared_ptr<DB::IAST>&, DB::Context&, DB::QueryProcessingStage::Enum) @ 0xcf0f404 in /usr/bin/clickhouse\r\n13. ? @ 0xd3b3a05 in /usr/bin/clickhouse\r\n14. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool, bool) @ 0xd3b66fd in /usr/bin/clickhouse\r\n15. DB::TCPHandler::runImpl() @ 0x9009ab9 in /usr/bin/clickhouse\r\n16. DB::TCPHandler::run() @ 0x900a9cc in /usr/bin/clickhouse\r\n17. Poco::Net::TCPServerConnection::start() @ 0xe088257 in /usr/bin/clickhouse\r\n18. Poco::Net::TCPServerDispatcher::run() @ 0xe0886bd in /usr/bin/clickhouse\r\n19. Poco::PooledThread::run() @ 0x1035d71f in /usr/bin/clickhouse\r\n20. Poco::ThreadImpl::runnableEntry(void*) @ 0x10359768 in /usr/bin/clickhouse\r\n21. ? @ 0x1035b009 in /usr/bin/clickhouse\r\n22. start_thread @ 0x76db in /lib/x86_64-linux-gnu/libpthread-2.27.so\r\n23. __clone @ 0x12188f in /lib/x86_64-linux-gnu/libc-2.27.so\r\n```\r\n[CH 20.3.3]\n",
  "hints_text": "",
  "created_at": "2020-04-15T17:50:02Z"
}