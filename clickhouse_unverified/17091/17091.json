{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 17091,
  "instance_id": "ClickHouse__ClickHouse-17091",
  "issue_numbers": [
    "15883",
    "16923"
  ],
  "base_commit": "7b784fb92565a14befa25ade86afe046f18efef8",
  "patch": "diff --git a/src/Core/MySQL/MySQLClient.cpp b/src/Core/MySQL/MySQLClient.cpp\nindex 9cb21a2d39a3..f65fbe622740 100644\n--- a/src/Core/MySQL/MySQLClient.cpp\n+++ b/src/Core/MySQL/MySQLClient.cpp\n@@ -6,6 +6,7 @@\n #include <Core/MySQL/PacketsProtocolText.h>\n #include <Core/MySQL/PacketsReplication.h>\n #include <Core/MySQL/MySQLReplication.h>\n+#include <Poco/String.h>\n \n namespace DB\n {\n@@ -132,11 +133,19 @@ void MySQLClient::ping()\n     writeCommand(Command::COM_PING, \"\");\n }\n \n-void MySQLClient::startBinlogDumpGTID(UInt32 slave_id, String replicate_db, String gtid_str)\n+void MySQLClient::setBinlogChecksum(const String & binlog_checksum)\n {\n-    /// Set binlog checksum to CRC32.\n-    String checksum = \"CRC32\";\n-    writeCommand(Command::COM_QUERY, \"SET @master_binlog_checksum = '\" + checksum + \"'\");\n+    replication.setChecksumSignatureLength(Poco::toUpper(binlog_checksum) == \"NONE\" ? 0 : 4);\n+}\n+\n+void MySQLClient::startBinlogDumpGTID(UInt32 slave_id, String replicate_db, String gtid_str, const String & binlog_checksum)\n+{\n+    /// Maybe CRC32 or NONE. mysqlbinlog.cc use NONE, see its below comments:\n+    /// Make a notice to the server that this client is checksum-aware.\n+    /// It does not need the first fake Rotate necessary checksummed.\n+    writeCommand(Command::COM_QUERY, \"SET @master_binlog_checksum = 'CRC32'\");\n+\n+    setBinlogChecksum(binlog_checksum);\n \n     /// Set heartbeat 1s.\n     UInt64 period_ns = (1 * 1e9);\ndiff --git a/src/Core/MySQL/MySQLClient.h b/src/Core/MySQL/MySQLClient.h\nindex a31794acc423..5835e9801494 100644\n--- a/src/Core/MySQL/MySQLClient.h\n+++ b/src/Core/MySQL/MySQLClient.h\n@@ -29,10 +29,12 @@ class MySQLClient\n     void disconnect();\n     void ping();\n \n+    void setBinlogChecksum(const String & binlog_checksum);\n+\n     /// Start replication stream by GTID.\n     /// replicate_db: replication database schema, events from other databases will be ignored.\n     /// gtid: executed gtid sets format like 'hhhhhhhh-hhhh-hhhh-hhhh-hhhhhhhhhhhh:x-y'.\n-    void startBinlogDumpGTID(UInt32 slave_id, String replicate_db, String gtid);\n+    void startBinlogDumpGTID(UInt32 slave_id, String replicate_db, String gtid, const String & binlog_checksum);\n \n     BinlogEventPtr readOneBinlogEvent(UInt64 milliseconds = 0);\n     Position getPosition() const { return replication.getPosition(); }\ndiff --git a/src/Core/MySQL/MySQLReplication.cpp b/src/Core/MySQL/MySQLReplication.cpp\nindex 6ff1670777ac..a33d65fcbd5e 100644\n--- a/src/Core/MySQL/MySQLReplication.cpp\n+++ b/src/Core/MySQL/MySQLReplication.cpp\n@@ -57,7 +57,6 @@ namespace MySQLReplication\n         payload.readStrict(reinterpret_cast<char *>(&create_timestamp), 4);\n         payload.readStrict(reinterpret_cast<char *>(&event_header_length), 1);\n         assert(event_header_length == EVENT_HEADER_LENGTH);\n-\n         readStringUntilEOF(event_type_header_length, payload);\n     }\n \n@@ -745,7 +744,7 @@ namespace MySQLReplication\n         // skip the generic response packets header flag.\n         payload.ignore(1);\n \n-        MySQLBinlogEventReadBuffer event_payload(payload);\n+        MySQLBinlogEventReadBuffer event_payload(payload, checksum_signature_length);\n \n         EventHeader event_header;\n         event_header.parse(event_payload);\ndiff --git a/src/Core/MySQL/MySQLReplication.h b/src/Core/MySQL/MySQLReplication.h\nindex 394ac729d1bf..bbefb368aafe 100644\n--- a/src/Core/MySQL/MySQLReplication.h\n+++ b/src/Core/MySQL/MySQLReplication.h\n@@ -526,6 +526,8 @@ namespace MySQLReplication\n         virtual BinlogEventPtr readOneEvent() = 0;\n         virtual void setReplicateDatabase(String db) = 0;\n         virtual void setGTIDSets(GTIDSets sets) = 0;\n+        virtual void setChecksumSignatureLength(size_t checksum_signature_length_) = 0;\n+\n         virtual ~IFlavor() override = default;\n     };\n \n@@ -538,12 +540,14 @@ namespace MySQLReplication\n         BinlogEventPtr readOneEvent() override { return event; }\n         void setReplicateDatabase(String db) override { replicate_do_db = std::move(db); }\n         void setGTIDSets(GTIDSets sets) override { position.gtid_sets = std::move(sets); }\n+        void setChecksumSignatureLength(size_t checksum_signature_length_) override { checksum_signature_length = checksum_signature_length_; }\n \n     private:\n         Position position;\n         BinlogEventPtr event;\n         String replicate_do_db;\n         std::shared_ptr<TableMapEvent> table_map;\n+        size_t checksum_signature_length = 4;\n \n         inline bool do_replicate() { return (replicate_do_db.empty() || table_map->schema == replicate_do_db); }\n     };\ndiff --git a/src/Databases/MySQL/MaterializeMetadata.cpp b/src/Databases/MySQL/MaterializeMetadata.cpp\nindex eed4bddb5885..c001955a8ae9 100644\n--- a/src/Databases/MySQL/MaterializeMetadata.cpp\n+++ b/src/Databases/MySQL/MaterializeMetadata.cpp\n@@ -91,6 +91,29 @@ void MaterializeMetadata::fetchMasterStatus(mysqlxx::PoolWithFailover::Entry & c\n     executed_gtid_set = (*master_status.getByPosition(4).column)[0].safeGet<String>();\n }\n \n+void MaterializeMetadata::fetchMasterVariablesValue(const mysqlxx::PoolWithFailover::Entry & connection)\n+{\n+    Block variables_header{\n+        {std::make_shared<DataTypeString>(), \"Variable_name\"},\n+        {std::make_shared<DataTypeString>(), \"Value\"}\n+    };\n+\n+    const String & fetch_query = \"SHOW VARIABLES WHERE Variable_name = 'binlog_checksum'\";\n+    MySQLBlockInputStream variables_input(connection, fetch_query, variables_header, DEFAULT_BLOCK_SIZE);\n+\n+    while (Block variables_block = variables_input.read())\n+    {\n+        ColumnPtr variables_name = variables_block.getByName(\"Variable_name\").column;\n+        ColumnPtr variables_value = variables_block.getByName(\"Value\").column;\n+\n+        for (size_t index = 0; index < variables_block.rows(); ++index)\n+        {\n+            if (variables_name->getDataAt(index) == \"binlog_checksum\")\n+                binlog_checksum = variables_value->getDataAt(index).toString();\n+        }\n+    }\n+}\n+\n static Block getShowMasterLogHeader(const String & mysql_version)\n {\n     if (startsWith(mysql_version, \"5.\"))\n@@ -241,6 +264,7 @@ MaterializeMetadata::MaterializeMetadata(\n \n         locked_tables = true;\n         fetchMasterStatus(connection);\n+        fetchMasterVariablesValue(connection);\n         connection->query(\"SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;\").execute();\n         connection->query(\"START TRANSACTION /*!40100 WITH CONSISTENT SNAPSHOT */;\").execute();\n \ndiff --git a/src/Databases/MySQL/MaterializeMetadata.h b/src/Databases/MySQL/MaterializeMetadata.h\nindex 5e77620e365b..94dfc73e5df2 100644\n--- a/src/Databases/MySQL/MaterializeMetadata.h\n+++ b/src/Databases/MySQL/MaterializeMetadata.h\n@@ -34,10 +34,13 @@ struct MaterializeMetadata\n \n     size_t data_version = 1;\n     size_t meta_version = 2;\n+    String binlog_checksum = \"CRC32\";\n     std::unordered_map<String, String> need_dumping_tables;\n \n     void fetchMasterStatus(mysqlxx::PoolWithFailover::Entry & connection);\n \n+    void fetchMasterVariablesValue(const mysqlxx::PoolWithFailover::Entry & connection);\n+\n     bool checkBinlogFileExists(mysqlxx::PoolWithFailover::Entry & connection, const String & mysql_version) const;\n \n     void transaction(const MySQLReplication::Position & position, const std::function<void()> & fun);\ndiff --git a/src/Databases/MySQL/MaterializeMySQLSyncThread.cpp b/src/Databases/MySQL/MaterializeMySQLSyncThread.cpp\nindex 0bc4e6c22d3a..b8f13f4ed189 100644\n--- a/src/Databases/MySQL/MaterializeMySQLSyncThread.cpp\n+++ b/src/Databases/MySQL/MaterializeMySQLSyncThread.cpp\n@@ -364,7 +364,7 @@ std::optional<MaterializeMetadata> MaterializeMySQLSyncThread::prepareSynchroniz\n                 connection->query(\"COMMIT\").execute();\n \n             client.connect();\n-            client.startBinlogDumpGTID(randomNumber(), mysql_database_name, metadata.executed_gtid_set);\n+            client.startBinlogDumpGTID(randomNumber(), mysql_database_name, metadata.executed_gtid_set, metadata.binlog_checksum);\n             return metadata;\n         }\n         catch (...)\n@@ -648,16 +648,27 @@ void MaterializeMySQLSyncThread::onEvent(Buffers & buffers, const BinlogEventPtr\n         metadata.transaction(position_before_ddl, [&]() { buffers.commit(global_context); });\n         metadata.transaction(client.getPosition(),[&](){ executeDDLAtomic(query_event); });\n     }\n-    else if (receive_event->header.type != HEARTBEAT_EVENT)\n+    else\n     {\n-        const auto & dump_event_message = [&]()\n+        /// MYSQL_UNHANDLED_EVENT\n+        if (receive_event->header.type == ROTATE_EVENT)\n         {\n-            WriteBufferFromOwnString buf;\n-            receive_event->dump(buf);\n-            return buf.str();\n-        };\n+            /// Some behaviors(such as changing the value of \"binlog_checksum\") rotate the binlog file.\n+            /// To ensure that the synchronization continues, we need to handle these events\n+            metadata.fetchMasterVariablesValue(pool.get());\n+            client.setBinlogChecksum(metadata.binlog_checksum);\n+        }\n+        else if (receive_event->header.type != HEARTBEAT_EVENT)\n+        {\n+            const auto & dump_event_message = [&]()\n+            {\n+                WriteBufferFromOwnString buf;\n+                receive_event->dump(buf);\n+                return buf.str();\n+            };\n \n-        LOG_DEBUG(log, \"Skip MySQL event: \\n {}\", dump_event_message());\n+            LOG_DEBUG(log, \"Skip MySQL event: \\n {}\", dump_event_message());\n+        }\n     }\n }\n \ndiff --git a/src/IO/MySQLBinlogEventReadBuffer.cpp b/src/IO/MySQLBinlogEventReadBuffer.cpp\nindex 3a2aba045d36..5b1d23545a2b 100644\n--- a/src/IO/MySQLBinlogEventReadBuffer.cpp\n+++ b/src/IO/MySQLBinlogEventReadBuffer.cpp\n@@ -4,9 +4,18 @@\n namespace DB\n {\n \n-MySQLBinlogEventReadBuffer::MySQLBinlogEventReadBuffer(ReadBuffer & in_)\n-    : ReadBuffer(nullptr, 0, 0), in(in_)\n+namespace ErrorCodes\n {\n+    extern const int LOGICAL_ERROR;\n+}\n+\n+MySQLBinlogEventReadBuffer::MySQLBinlogEventReadBuffer(ReadBuffer & in_, size_t checksum_signature_length_)\n+    : ReadBuffer(nullptr, 0, 0), in(in_), checksum_signature_length(checksum_signature_length_)\n+{\n+    if (checksum_signature_length > MAX_CHECKSUM_SIGNATURE_LENGTH)\n+        throw Exception(\"LOGICAL ERROR: checksum_signature_length must be less than MAX_CHECKSUM_SIGNATURE_LENGTH. It is a bug.\",\n+            ErrorCodes::LOGICAL_ERROR);\n+\n     nextIfAtEnd();\n }\n \n@@ -20,15 +29,15 @@ bool MySQLBinlogEventReadBuffer::nextImpl()\n \n     if (checksum_buff_size == checksum_buff_limit)\n     {\n-        if (likely(in.available() > CHECKSUM_CRC32_SIGNATURE_LENGTH))\n+        if (likely(in.available() > checksum_signature_length))\n         {\n-            working_buffer = ReadBuffer::Buffer(in.position(), in.buffer().end() - CHECKSUM_CRC32_SIGNATURE_LENGTH);\n+            working_buffer = ReadBuffer::Buffer(in.position(), in.buffer().end() - checksum_signature_length);\n             in.ignore(working_buffer.size());\n             return true;\n         }\n \n-        in.readStrict(checksum_buf, CHECKSUM_CRC32_SIGNATURE_LENGTH);\n-        checksum_buff_size = checksum_buff_limit = CHECKSUM_CRC32_SIGNATURE_LENGTH;\n+        in.readStrict(checksum_buf, checksum_signature_length);\n+        checksum_buff_size = checksum_buff_limit = checksum_signature_length;\n     }\n     else\n     {\n@@ -36,17 +45,17 @@ bool MySQLBinlogEventReadBuffer::nextImpl()\n             checksum_buf[index] = checksum_buf[checksum_buff_limit + index];\n \n         checksum_buff_size -= checksum_buff_limit;\n-        size_t read_bytes = CHECKSUM_CRC32_SIGNATURE_LENGTH - checksum_buff_size;\n-        in.readStrict(checksum_buf + checksum_buff_size, read_bytes);   /// Minimum CHECKSUM_CRC32_SIGNATURE_LENGTH bytes\n-        checksum_buff_size = checksum_buff_limit = CHECKSUM_CRC32_SIGNATURE_LENGTH;\n+        size_t read_bytes = checksum_signature_length - checksum_buff_size;\n+        in.readStrict(checksum_buf + checksum_buff_size, read_bytes);   /// Minimum checksum_signature_length bytes\n+        checksum_buff_size = checksum_buff_limit = checksum_signature_length;\n     }\n \n     if (in.eof())\n         return false;\n \n-    if (in.available() < CHECKSUM_CRC32_SIGNATURE_LENGTH)\n+    if (in.available() < checksum_signature_length)\n     {\n-        size_t left_move_size = CHECKSUM_CRC32_SIGNATURE_LENGTH - in.available();\n+        size_t left_move_size = checksum_signature_length - in.available();\n         checksum_buff_limit = checksum_buff_size - left_move_size;\n     }\n \n@@ -58,7 +67,7 @@ MySQLBinlogEventReadBuffer::~MySQLBinlogEventReadBuffer()\n {\n     try\n     {\n-        /// ignore last 4 bytes\n+        /// ignore last checksum_signature_length bytes\n         nextIfAtEnd();\n     }\n     catch (...)\ndiff --git a/src/IO/MySQLBinlogEventReadBuffer.h b/src/IO/MySQLBinlogEventReadBuffer.h\nindex e9452aa551ec..d31e19d82b81 100644\n--- a/src/IO/MySQLBinlogEventReadBuffer.h\n+++ b/src/IO/MySQLBinlogEventReadBuffer.h\n@@ -8,19 +8,21 @@ namespace DB\n class MySQLBinlogEventReadBuffer : public ReadBuffer\n {\n protected:\n-    static const size_t CHECKSUM_CRC32_SIGNATURE_LENGTH = 4;\n+    static const size_t MAX_CHECKSUM_SIGNATURE_LENGTH = 4;\n+\n     ReadBuffer & in;\n+    size_t checksum_signature_length;\n \n     size_t checksum_buff_size = 0;\n     size_t checksum_buff_limit = 0;\n-    char checksum_buf[CHECKSUM_CRC32_SIGNATURE_LENGTH];\n+    char checksum_buf[MAX_CHECKSUM_SIGNATURE_LENGTH];\n \n     bool nextImpl() override;\n \n public:\n     ~MySQLBinlogEventReadBuffer() override;\n \n-    MySQLBinlogEventReadBuffer(ReadBuffer & in_);\n+    MySQLBinlogEventReadBuffer(ReadBuffer & in_, size_t checksum_signature_length_);\n \n };\n \ndiff --git a/utils/check-mysql-binlog/main.cpp b/utils/check-mysql-binlog/main.cpp\nindex 0d831b84dcee..ccdc4cd168c3 100644\n--- a/utils/check-mysql-binlog/main.cpp\n+++ b/utils/check-mysql-binlog/main.cpp\n@@ -18,10 +18,7 @@ static DB::MySQLReplication::BinlogEventPtr parseSingleEventBody(\n {\n     DB::MySQLReplication::BinlogEventPtr event;\n     DB::ReadBufferPtr limit_read_buffer = std::make_shared<DB::LimitReadBuffer>(payload, header.event_size - 19, false);\n-    DB::ReadBufferPtr event_payload = limit_read_buffer;\n-\n-    if (exist_checksum)\n-        event_payload = std::make_shared<DB::MySQLBinlogEventReadBuffer>(*limit_read_buffer);\n+    DB::ReadBufferPtr event_payload = std::make_shared<DB::MySQLBinlogEventReadBuffer>(*limit_read_buffer, exist_checksum ? 4 : 0);\n \n     switch (header.type)\n     {\n",
  "test_patch": "diff --git a/src/Core/tests/mysql_protocol.cpp b/src/Core/tests/mysql_protocol.cpp\nindex 9dc468912416..98555ddcfe00 100644\n--- a/src/Core/tests/mysql_protocol.cpp\n+++ b/src/Core/tests/mysql_protocol.cpp\n@@ -304,7 +304,8 @@ int main(int argc, char ** argv)\n                 \"user\", boost::program_options::value<std::string>()->default_value(\"root\"), \"master user\")(\n                 \"password\", boost::program_options::value<std::string>()->required(), \"master password\")(\n                 \"gtid\", boost::program_options::value<std::string>()->default_value(\"\"), \"executed GTID sets\")(\n-                \"db\", boost::program_options::value<std::string>()->required(), \"replicate do db\");\n+                \"db\", boost::program_options::value<std::string>()->required(), \"replicate do db\")(\n+                \"binlog_checksum\", boost::program_options::value<std::string>()->default_value(\"CRC32\"), \"master binlog_checksum\");\n \n             boost::program_options::variables_map options;\n             boost::program_options::store(boost::program_options::parse_command_line(argc, argv, desc), options);\n@@ -319,6 +320,7 @@ int main(int argc, char ** argv)\n             auto master_password = options.at(\"password\").as<DB::String>();\n             auto gtid_sets = options.at(\"gtid\").as<DB::String>();\n             auto replicate_db = options.at(\"db\").as<DB::String>();\n+            auto binlog_checksum = options.at(\"binlog_checksum\").as<String>();\n \n             std::cerr << \"Master Host: \" << host << \", Port: \" << port << \", User: \" << master_user << \", Password: \" << master_password\n                       << \", Replicate DB: \" << replicate_db << \", GTID: \" << gtid_sets << std::endl;\n@@ -328,7 +330,7 @@ int main(int argc, char ** argv)\n \n             /// Connect to the master.\n             slave.connect();\n-            slave.startBinlogDumpGTID(slave_id, replicate_db, gtid_sets);\n+            slave.startBinlogDumpGTID(slave_id, replicate_db, gtid_sets, binlog_checksum);\n \n             WriteBufferFromOStream cerr(std::cerr);\n \ndiff --git a/src/IO/tests/gtest_mysql_binlog_event_read_buffer.cpp b/src/IO/tests/gtest_mysql_binlog_event_read_buffer.cpp\nindex f4d39c73a7c8..536e5a89ca97 100644\n--- a/src/IO/tests/gtest_mysql_binlog_event_read_buffer.cpp\n+++ b/src/IO/tests/gtest_mysql_binlog_event_read_buffer.cpp\n@@ -13,7 +13,7 @@ TEST(MySQLBinlogEventReadBuffer, CheckBoundary)\n         std::vector<char> memory_data(index, 0x01);\n         ReadBufferFromMemory nested_in(memory_data.data(), index);\n \n-        EXPECT_THROW({ MySQLBinlogEventReadBuffer binlog_in(nested_in); }, Exception);\n+        EXPECT_THROW({ MySQLBinlogEventReadBuffer binlog_in(nested_in, 4); }, Exception);\n     }\n }\n \n@@ -23,7 +23,7 @@ TEST(MySQLBinlogEventReadBuffer, NiceBufferSize)\n     std::vector<char> memory_data(6, 0x01);\n     ReadBufferFromMemory nested_in(memory_data.data(), 6);\n \n-    MySQLBinlogEventReadBuffer binlog_in(nested_in);\n+    MySQLBinlogEventReadBuffer binlog_in(nested_in, 4);\n     binlog_in.readStrict(res, 2);\n     ASSERT_EQ(res[0], 0x01);\n     ASSERT_EQ(res[1], 0x01);\n@@ -46,7 +46,7 @@ TEST(MySQLBinlogEventReadBuffer, BadBufferSizes)\n     }\n \n     ConcatReadBuffer concat_buffer(nested_buffers);\n-    MySQLBinlogEventReadBuffer binlog_in(concat_buffer);\n+    MySQLBinlogEventReadBuffer binlog_in(concat_buffer, 4);\n     binlog_in.readStrict(res, 4);\n \n     for (const auto & res_byte : res)\n@@ -71,7 +71,7 @@ TEST(MySQLBinlogEventReadBuffer, NiceAndBadBufferSizes)\n     }\n \n     ConcatReadBuffer concat_buffer(nested_buffers);\n-    MySQLBinlogEventReadBuffer binlog_in(concat_buffer);\n+    MySQLBinlogEventReadBuffer binlog_in(concat_buffer, 4);\n     binlog_in.readStrict(res, 12);\n \n     for (const auto & res_byte : res)\ndiff --git a/tests/integration/test_materialize_mysql_database/materialize_with_ddl.py b/tests/integration/test_materialize_mysql_database/materialize_with_ddl.py\nindex 387064dd70af..f0b69c84be9c 100644\n--- a/tests/integration/test_materialize_mysql_database/materialize_with_ddl.py\n+++ b/tests/integration/test_materialize_mysql_database/materialize_with_ddl.py\n@@ -456,6 +456,7 @@ def query_event_with_empty_transaction(clickhouse_node, mysql_node, service_name\n     clickhouse_node.query(\"DROP DATABASE test_database\")\n     mysql_node.query(\"DROP DATABASE test_database\")\n \n+\n def select_without_columns(clickhouse_node, mysql_node, service_name):\n     mysql_node.query(\"DROP DATABASE IF EXISTS db\")\n     clickhouse_node.query(\"DROP DATABASE IF EXISTS db\")\n@@ -489,6 +490,26 @@ def select_without_columns(clickhouse_node, mysql_node, service_name):\n     mysql_node.query(\"DROP DATABASE db\")\n \n \n+def insert_with_modify_binlog_checksum(clickhouse_node, mysql_node, service_name):\n+    mysql_node.query(\"CREATE DATABASE test_checksum\")\n+    mysql_node.query(\"CREATE TABLE test_checksum.t (a INT PRIMARY KEY, b varchar(200))\")\n+    clickhouse_node.query(\"CREATE DATABASE test_checksum ENGINE = MaterializeMySQL('{}:3306', 'test_checksum', 'root', 'clickhouse')\".format(service_name))\n+    check_query(clickhouse_node, \"SHOW TABLES FROM test_checksum FORMAT TSV\", \"t\\n\")\n+    mysql_node.query(\"INSERT INTO test_checksum.t VALUES(1, '1111')\")\n+    check_query(clickhouse_node, \"SELECT * FROM test_checksum.t ORDER BY a FORMAT TSV\", \"1\\t1111\\n\")\n+\n+    mysql_node.query(\"SET GLOBAL binlog_checksum=NONE\")\n+    mysql_node.query(\"INSERT INTO test_checksum.t VALUES(2, '2222')\")\n+    check_query(clickhouse_node, \"SELECT * FROM test_checksum.t ORDER BY a FORMAT TSV\", \"1\\t1111\\n2\\t2222\\n\")\n+\n+    mysql_node.query(\"SET GLOBAL binlog_checksum=CRC32\")\n+    mysql_node.query(\"INSERT INTO test_checksum.t VALUES(3, '3333')\")\n+    check_query(clickhouse_node, \"SELECT * FROM test_checksum.t ORDER BY a FORMAT TSV\", \"1\\t1111\\n2\\t2222\\n3\\t3333\\n\")\n+\n+    clickhouse_node.query(\"DROP DATABASE test_checksum\")\n+    mysql_node.query(\"DROP DATABASE test_checksum\")\n+\n+\n def err_sync_user_privs_with_materialize_mysql_database(clickhouse_node, mysql_node, service_name):\n     clickhouse_node.query(\"DROP DATABASE IF EXISTS priv_err_db\")\n     mysql_node.query(\"DROP DATABASE IF EXISTS priv_err_db\")\ndiff --git a/tests/integration/test_materialize_mysql_database/test.py b/tests/integration/test_materialize_mysql_database/test.py\nindex 3befd708b2e7..7881dcc222ef 100644\n--- a/tests/integration/test_materialize_mysql_database/test.py\n+++ b/tests/integration/test_materialize_mysql_database/test.py\n@@ -167,10 +167,19 @@ def test_materialize_database_ddl_with_empty_transaction_8_0(started_cluster, st\n def test_select_without_columns_5_7(started_cluster, started_mysql_5_7):\n     materialize_with_ddl.select_without_columns(clickhouse_node, started_mysql_5_7, \"mysql1\")\n \n+\n def test_select_without_columns_8_0(started_cluster, started_mysql_8_0):\n     materialize_with_ddl.select_without_columns(clickhouse_node, started_mysql_8_0, \"mysql8_0\")\n \n \n+def test_insert_with_modify_binlog_checksum_5_7(started_cluster, started_mysql_5_7):\n+    materialize_with_ddl.insert_with_modify_binlog_checksum(clickhouse_node, started_mysql_5_7, \"mysql1\")\n+\n+\n+def test_insert_with_modify_binlog_checksum_8_0(started_cluster, started_mysql_8_0):\n+    materialize_with_ddl.insert_with_modify_binlog_checksum(clickhouse_node, started_mysql_8_0, \"mysql8_0\")\n+\n+\n def test_materialize_database_err_sync_user_privs_5_7(started_cluster, started_mysql_5_7):\n     try:\n         materialize_with_ddl.err_sync_user_privs_with_materialize_mysql_database(clickhouse_node, started_mysql_5_7, \"mysql1\")\n",
  "problem_statement": "to create MaterializeMySQL engin wasn't finished successfully\nThe first few completed tables can be queried normally\r\n\r\n`\r\n2020.10.13 09:14:48.751772 [ 23597 ] {} <Error> MaterializeMySQLSyncThread(): Query EXTERNAL DDL FROM MySQL(hd_db, eqs_hd) B wasn't finished successfully: Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 102 ('B'): B. Expected one of: RENAME DATABASE, TRUNCATE, RENAME TABLE, DROP query, RENAME DICTIONARY, DETACH, RENAME query, DROP, create query, CREATE, EXCHANGE TABLES, ALTER TABLE, alter query, Stack trace (when copying this message, always include the lines below):\r\n\r\n0. DB::parseQueryAndMovePosition(DB::IParser&, char const*&, char const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, bool, unsigned long, unsigned long) @ 0xe922219 in /usr/bin/clickhouse\r\n1. ? @ 0xdeb61b7 in /usr/bin/clickhouse\r\n2. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool) @ 0xdeb5dbd in /usr/bin/clickhouse\r\n3. ? @ 0xdaf5594 in /usr/bin/clickhouse\r\n4. DB::MaterializeMySQLSyncThread::onEvent(DB::MaterializeMySQLSyncThread::Buffers&, std::__1::shared_ptr<DB::MySQLReplication::EventBase> const&, DB::MaterializeMetadata&) @ 0xdaf1752 in /usr/bin/clickhouse\r\n5. DB::MaterializeMySQLSyncThread::synchronization(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) @ 0xdaeeaac in /usr/bin/clickhouse\r\n6. ? @ 0xdb0acbd in /usr/bin/clickhouse\r\n7. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x7b8375d in /usr/bin/clickhouse\r\n8. ? @ 0x7b87273 in /usr/bin/clickhouse\r\n9. start_thread @ 0x7dd5 in /usr/lib64/libpthread-2.17.so\r\n10. clone @ 0xfdead in /usr/lib64/libc-2.17.so\r\n (version 20.10.1.4881 (official build))\r\n`\r\n\r\nafter that\uff0call tables can not be queried\r\n\r\n2020.10.13 09:19:10.930722 [ 24253 ] {} <Error> MaterializeMySQLSyncThread: Code: 33, e.displayText() = DB::Exception: Cannot read all data. Bytes read: 13. Bytes expected: 14., Stack trace (when copying this message, always include the lines below):\nMaterializeMySQL while query got error.\nMaterializeMySQLSyncThread(): Query EXTERNAL DDL FROM MySQL(bear, clickhouse) B wasn't finished successfully: Code: 62, \r\ne.displayText() = DB::Exception: Syntax error: failed at position 105 ('B'): B. Expected one of: RENAME DATABASE, TRUNCATE, RENAME TABLE, DROP query, RENAME DICTIONARY,\r\n DETACH, RENAME query, DROP, create query, CREATE, EXCHANGE TABLES, ALTER TABLE, alter query,\r\n Stack trace (when copying this message, always include the lines below):\r\n\r\n0. DB::parseQueryAndMovePosition(DB::IParser&, char const*&, char const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, bool, \r\nunsigned long, unsigned long) @ 0xe937819 in /usr/bin/clickhouse\r\n1. ? @ 0xdec81b7 in /usr/bin/clickhouse\r\n2. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool) @ 0xdec7dbd in /usr/bin/clickhouse\r\n3. ? @ 0xdaff0e4 in /usr/bin/clickhouse\r\n4. DB::MaterializeMySQLSyncThread::onEvent(DB::MaterializeMySQLSyncThread::Buffers&, std::__1::shared_ptr<DB::MySQLReplication::EventBase> const&, DB::MaterializeMetadata&) @ 0xdafb2a2 in /usr/bin/clickhouse\r\n5. DB::MaterializeMySQLSyncThread::synchronization(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) @ 0xdaf85fc in /usr/bin/clickhouse\r\n6. ? @ 0xdb1480d in /usr/bin/clickhouse\r\n7. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x7b8963d in /usr/bin/clickhouse\r\n8. ? @ 0x7b8d153 in /usr/bin/clickhouse\r\n9. start_thread @ 0x7dd5 in /usr/lib64/libpthread-2.17.so\r\n10. __clone @ 0xfdead in /usr/lib64/libc-2.17.so\r\n (version 20.10.3.30 (official build))\r\n2020.11.12 17:37:57.583104 [ 25151 ] {} <Error> MaterializeMySQLSyncThread: Code: 62, e.displayText() = DB::Exception: Syntax error: failed at position 105 ('B'): B. Expected one of: \r\nRENAME DATABASE, TRUNCATE, RENAME TABLE, DROP query, RENAME DICTIONARY, DETACH, RENAME query, DROP, create query, CREATE, EXCHANGE TABLES, ALTER TABLE, alter query, Stack trac\r\ne (when copying this message, always include the lines below):\r\n\r\n0. DB::parseQueryAndMovePosition(DB::IParser&, char const*&, char const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, bool, unsigned long, unsigned long) @ 0xe937819 in /usr/bin/clickhouse\r\n1. ? @ 0xdec81b7 in /usr/bin/clickhouse\r\n2. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool) @ 0xdec7dbd in /usr/bin/clickhouse\r\n3. ? @ 0xdaff0e4 in /usr/bin/clickhouse\r\n4. DB::MaterializeMySQLSyncThread::onEvent(DB::MaterializeMySQLSyncThread::Buffers&, std::__1::shared_ptr<DB::MySQLReplication::EventBase> const&, DB::MaterializeMetadata&) @ 0xdafb2a2 in /usr/bin/clickhouse\r\n5. DB::MaterializeMySQLSyncThread::synchronization(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) @ 0xdaf85fc in /usr/bin/clickhouse\r\n6. ? @ 0xdb1480d in /usr/bin/clickhouse\r\n7. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x7b8963d in /usr/bin/clickhouse\r\n8. ? @ 0x7b8d153 in /usr/bin/clickhouse\r\n9. start_thread @ 0x7dd5 in /usr/lib64/libpthread-2.17.so\r\n10. __clone @ 0xfdead in /usr/lib64/libc-2.17.so\r\n (version 20.10.3.30 (official build))\r\n2020.11.12 17:37:57.583469 [ 25151 ] {} <Error> MaterializeMySQLSyncThread: Code: 33, e.displayText() = DB::Exception: Cannot read all data. Bytes read: 1. Bytes expected: 5., Stack trace (when copying this message, always include the lines below):\n",
  "hints_text": "Can you provide some information on how to reproduce this problem?\n> Can you provide some information on how to reproduce this problem?\r\n\r\nthis is source table schema in mysql \r\n\r\nCREATE TABLE `dashboard_datasource` (\r\n  `datasource_id` bigint(20) NOT NULL AUTO_INCREMENT,\r\n  `user_id` varchar(50) NOT NULL,\r\n  `source_name` varchar(100) NOT NULL,\r\n  `source_type` varchar(100) NOT NULL,\r\n  `config` text,\r\n  `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\r\n  `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,\r\n  PRIMARY KEY (`datasource_id`)\r\n) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8mb4\n\u5373\u4fbf\u662f\u8868\u91cc\u9762\u6ca1\u6709\u6570\u636e clickhouse\u4e5f\u62a5\u4e0b\u9762\u7684\u9519\u8bef @zhang2014 \r\nCode: 33. DB::Exception: Received from localhost:9000. DB::Exception: Cannot read all data. Bytes read: 1. Bytes expected: 4.\n> Code: 33. DB::Exception: Received from localhost:9000. DB::Exception: Cannot read all data. Bytes read: 1. Bytes expected: 4.\r\n\r\n@yanchaoguo  \u80fd\u63d0\u4f9b\u4e00\u4e0b\u5806\u6808\u4fe1\u606f\u4e48? \u53e6\u5916\u9488\u5bf9\u7b2c\u4e00\u4e2a\u9519\u8bef\u7684\u590d\u73b0\u6b65\u9aa4(\u6216\u8005\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e0b\u7b2c\u4e00\u4e2a\u9519\u8bef\u53d1\u751f\u65f6\u7684clickhouse\u5b8c\u6574\u65e5\u5fd7)\uff1f\n> > Code: 33. DB::Exception: Received from localhost:9000. DB::Exception: Cannot read all data. Bytes read: 1. Bytes expected: 4.\r\n> \r\n> @yanchaoguo \u80fd\u63d0\u4f9b\u4e00\u4e0b\u5806\u6808\u4fe1\u606f\u4e48? \u53e6\u5916\u9488\u5bf9\u7b2c\u4e00\u4e2a\u9519\u8bef\u7684\u590d\u73b0\u6b65\u9aa4(\u6216\u8005\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e0b\u7b2c\u4e00\u4e2a\u9519\u8bef\u53d1\u751f\u65f6\u7684clickhouse\u5b8c\u6574\u65e5\u5fd7)\uff1f\r\n\r\n\u4e0a\u9762\u7684\u9519\u8bef\u4fe1\u606f\u662f\u65e5\u5fd7\u4e2d\u7684\u5168\u90e8\u4e86 \uff0c\u60a8\u53ef\u4ee5\u6309\u7167\u6211\u4e0a\u9762\u7684\u63d0\u4f9b\u7684\u8868\u7ed3\u6784\u5728mysql5.6\u7248\u672c\u4e2d\u521b\u5efa\u7a7a\u8868 \u8ba9\u540e\u5728clickhouse20.10\u4e2d\u751f\u6210MaterializeMySQL database  \u8fd9\u4e2a\u65f6\u5019\u53bb\u67e5\u8be2clickhouse\u5bf9\u5e94\u7684\u8868\u5c31\u4f1a\u590d\u73b0\u4e0a\u9762\u7684\u9519\u8bef\u4e86\n>>> Code: 33. DB::Exception: Received from localhost:9000. DB::Exception: Cannot read all data. Bytes read: 1. Bytes expected: 4.\r\n\r\n>> @yanchaoguo \u80fd\u63d0\u4f9b\u4e00\u4e0b\u5806\u6808\u4fe1\u606f\u4e48? \u53e6\u5916\u9488\u5bf9\u7b2c\u4e00\u4e2a\u9519\u8bef\u7684\u590d\u73b0\u6b65\u9aa4(\u6216\u8005\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e0b\u7b2c\u4e00\u4e2a\u9519\u8bef\u53d1\u751f\u65f6\u7684clickhouse\u5b8c\u6574\u65e5\u5fd7)\uff1f\r\n\r\n> \u4e0a\u9762\u7684\u9519\u8bef\u4fe1\u606f\u662f\u65e5\u5fd7\u4e2d\u7684\u5168\u90e8\u4e86 \uff0c\u60a8\u53ef\u4ee5\u6309\u7167\u6211\u4e0a\u9762\u7684\u63d0\u4f9b\u7684\u8868\u7ed3\u6784\u5728mysql5.6\u7248\u672c\u4e2d\u521b\u5efa\u7a7a\u8868 \u8ba9\u540e\u5728clickhouse20.10\u4e2d\u751f\u6210MaterializeMySQL database \u8fd9\u4e2a\u65f6\u5019\u53bb\u67e5\u8be2clickhouse\u5bf9\u5e94\u7684\u8868\u5c31\u4f1a\u590d\u73b0\u4e0a\u9762\u7684\u9519\u8bef\u4e86\r\n\r\n\u5e93\u4e2d\u8fd8\u5305\u542b\u5176\u5b83\u8868\u4e48?\n> \u8fd8\u5305\u542b\u5176\u5b83\u8868\u4e48\r\n\r\n\u5c31\u8fd9\u4e00\u5f20\u8868\u5c31\u53ef\u4ee5\u590d\u73b0\u95ee\u9898\u4e86\n> > > > Code: 33. DB::Exception: Received from localhost:9000. DB::Exception: Cannot read all data. Bytes read: 1. Bytes expected: 4.\r\n> \r\n> > > @yanchaoguo \u80fd\u63d0\u4f9b\u4e00\u4e0b\u5806\u6808\u4fe1\u606f\u4e48? \u53e6\u5916\u9488\u5bf9\u7b2c\u4e00\u4e2a\u9519\u8bef\u7684\u590d\u73b0\u6b65\u9aa4(\u6216\u8005\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e0b\u7b2c\u4e00\u4e2a\u9519\u8bef\u53d1\u751f\u65f6\u7684clickhouse\u5b8c\u6574\u65e5\u5fd7)\uff1f\r\n> \r\n> > \u4e0a\u9762\u7684\u9519\u8bef\u4fe1\u606f\u662f\u65e5\u5fd7\u4e2d\u7684\u5168\u90e8\u4e86 \uff0c\u60a8\u53ef\u4ee5\u6309\u7167\u6211\u4e0a\u9762\u7684\u63d0\u4f9b\u7684\u8868\u7ed3\u6784\u5728mysql5.6\u7248\u672c\u4e2d\u521b\u5efa\u7a7a\u8868 \u8ba9\u540e\u5728clickhouse20.10\u4e2d\u751f\u6210MaterializeMySQL database \u8fd9\u4e2a\u65f6\u5019\u53bb\u67e5\u8be2clickhouse\u5bf9\u5e94\u7684\u8868\u5c31\u4f1a\u590d\u73b0\u4e0a\u9762\u7684\u9519\u8bef\u4e86\r\n> \r\n> \u5e93\u4e2d\u8fd8\u5305\u542b\u5176\u5b83\u8868\u4e48?\r\n\r\n\u521d\u6b65\u5224\u5b9a \u662fclickhouse\u76ee\u524d\u9047\u5230 \u8868\u7ed3\u6784\u4e2dtimestamp\u7c7b\u578b\u88abNOT NULL DEFAULT CURRENT_TIMESTAMP\u4fee\u9970\u65f6\u5c31\u4f1a\u62a5\u4e0a\u8ff0\u9519\u8bef\n\u6682\u4e0d\u652f\u6301MySQL 5.6 #14564\n> \u6682\u4e0d\u652f\u6301MySQL 5.6 #14564\r\n\r\n\u5927\u6982\u5728\u54ea\u4e2a\u7248\u672c\u4f1a\u652f\u6301 \u56e0\u4e3a5.6\u73b0\u5728\u5728\u4f01\u4e1a\u5f53\u4e2d\u8fd8\u662f\u4f7f\u7528\u5f88\u5e7f\u6cdb\u7684\n> \u6682\u4e0d\u652f\u6301MySQL 5.6 #14564\r\n\r\n\r\n\r\n\u4e0d\u5e78\u7684\u662f \u6211\u57285.7\u7248\u672c\u4e0a\u8bd5\u4e86\u4e00\u4e0b \u4e5f\u6709\u540c\u6837\u7684\u95ee\u9898\r\n\r\n`Welcome to the MySQL monitor. Commands end with ; or \\g.\r\nYour MySQL connection id is 3757518\r\nServer version: 5.7.18-txsql-log 20200331`\n@yanchaoguo \u901a\u8fc7\u63d0\u4f9b\u7684\u590d\u73b0\u7528\u4f8b\u65e0\u6cd5\u5728\u6211\u7684\u73af\u5883\u4e2d\u590d\u73b0. \u60a8\u80fd\u63d0\u4f9b\u4e00\u4e0b\u590d\u73b0\u7684mysql\u7684binlog\u6587\u4ef6\u4e48\uff1f\r\n\r\n\u53e6\u5916\u60a8\u53ef\u4ee5\u4f7f\u7528clickhouse-client \u5c1d\u8bd5\u6267\u884c\u4ee5\u4e0bSQL, \u5e76\u7c98\u8d34\u7ed3\u679c\u5230issues\u4e2d\u4e48:\r\n``` sql\r\nSELECT * FROM system.build_options WHERE name like '%VERSION%' ;\r\n```\n> ```sql\r\n> SELECT * FROM system.build_options WHERE name like '%VERSION%'\r\n> ```\r\n\r\n\r\n\u250c\u2500name\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500value\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 VERSION_FULL         \u2502 ClickHouse 20.10.1.4881                  \u2502\r\n\u2502 VERSION_DESCRIBE     \u2502 v20.10.1.4881-testing                    \u2502\r\n\u2502 VERSION_INTEGER      \u2502 20010001                                 \u2502\r\n\u2502 VERSION_GITHASH      \u2502 76a04fb4b4f6cd27ad999baf6dc9a25e88851c42 \u2502\r\n\u2502 VERSION_REVISION     \u2502 54441                                    \u2502\r\n\u2502 CMAKE_VERSION        \u2502 3.16.3                                   \u2502\r\n\u2502 C_COMPILER_VERSION   \u2502 11.0.0                                   \u2502\r\n\u2502 CXX_COMPILER_VERSION \u2502 11.0.0                                   \u2502\r\n\u2502 TZDATA_VERSION       \u2502 2020a                                    \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\n@yanchaoguo \u80fd\u63d0\u4f9b\u4e00\u4e0b\u590d\u73b0\u8be5\u95ee\u9898\u7684MySQL \u7684binlog\u6587\u4ef6\u4e48?\n> @yanchaoguo \u80fd\u63d0\u4f9b\u4e00\u4e0b\u590d\u73b0\u8be5\u95ee\u9898\u7684MySQL \u7684binlog\u6587\u4ef6\u4e48?\r\n\r\n\u8fd9\u4e2a\u65e5\u5fd7\u5728\u54ea\u91cc\u770b\n\u6267\u884c```cat ${ClickHouse\u7684\u6570\u636e\u76ee\u5f55\u4e0b}/metadata/test_database/.metadata``` \u5f97\u5230\u5982\u4e0b\u5185\u5bb9:\r\n```text\r\nVersion:\t2\r\nBinlog File:\tbinlog.000026\r\nExecuted GTID:\t2ac45abe-931e-11ea-8515-607d56350782:1-131\r\nBinlog Position:\t10046316\r\nData Version:\t1%\r\n```\r\n\r\n\u53bbMySQL\u6570\u636e\u76ee\u5f55\u4e0b\u627e\u5230\u5bf9\u5e94\u7684binlog\u6587\u4ef6(\u6700\u597d\u5305\u542b\u540e\u7eed\u7684binlog\u6587\u4ef6, binlog.0000xx \u5176\u4e2dxx\u4e3abinlog\u7684\u987a\u5e8f, \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u627e\u5230\u6bd426\u5927\u7684\u6240\u6709\u7684binlog\u6587\u4ef6, \u622a\u53d6\u524d5\u4e2a\u6587\u4ef6\u6253\u5305\u53d1\u9001\u5373\u53ef)\u3002\n`[root@VM_8_129_centos` ~]# cat /data//work/clickhouse/metadata/bigdata_db/.metadata\r\nVersion:\t2\r\nBinlog File:\tmysql-bin.000243\r\nExecuted GTID:\t19831069-f04c-11e7-8e4b-6c92bf479de4:1-514984,262b31bb-f04c-11e7-a29b-c81fbecfcfdf:1-111,535eacda-93b3-11e9-848d-a4dcbef43ebe:1-913541241,5fc474d5-93b3-11e9-88a7-e435c87fc7f2:1-2,9b07b534-ba0c-11ea-bf4b-e435c881d062:1-3,d6886002-bcec-11ea-8f67-94292fc1df7f:1-97086022,ed71d648-06f6-11e8-85ba-5cb9018d7a68:1-572869758,f5a79f7c-06f6-11e8-8864-5cb901896350:1-996\r\nBinlog Position:\t261790019`\r\n\r\n[binlog-243](https://mysql-database-backup-sh-local-1256569818.cos.ap-shanghai.myqcloud.com/1252021759%2Fmysql%2F0fe55062-f04c-11e7-bc91-70e2840e12bd%2Fbinlog%2Fautomatic-delete%2F2020-10-15%2Fautomatic%2Fbinlog%2Fbl_334_11822971%2Fcdb-2fhxmzdt_binlog_20201015130303.log?sign=q-sign-algorithm%3Dsha1%26q-ak%3DAKIDjGYxDI8SBhz1zr7UdY8VfYEQhyzoI0HJ%26q-sign-time%3D1602740939%3B1602784139%26q-key-time%3D1602740939%3B1602784139%26q-header-list%3D%26q-url-param-list%3D%26q-signature%3Da182e47b0ae39777f16fcc8299e87ced8964edc5&response-content-disposition=attachment%3Bfilename%3D%22big_data%E5%A4%A7%E6%95%B0%E6%8D%AE_binlog_mysqlbin.000243%22&response-content-type=application%2Foctet-stream)\r\n\r\n\u4eca\u5929\u53ea\u67091\u4e2a\u6587\u4ef6\r\n\n@yanchaoguo The reason for this problem may be `binlog_checksum = NONE`, you can check it with `SHOW VARIABLES WHERE Variable_name ='binlog_checksum';`\n> @yanchaoguo The reason for this problem may be `binlog_checksum = NONE`, you can check it with `SHOW VARIABLES WHERE Variable_name ='binlog_checksum';`\r\n\r\n\u597d\u7684  \u660e\u5929\u6211\u8bd5\u8bd5\n> @yanchaoguo The reason for this problem may be `binlog_checksum = NONE`, you can check it with `SHOW VARIABLES WHERE Variable_name ='binlog_checksum';`\r\n\r\nmysql> SHOW VARIABLES WHERE Variable_name ='binlog_checksum'\r\n    -> ;\r\n+-----------------+-------+\r\n| Variable_name   | Value |\r\n+-----------------+-------+\r\n| binlog_checksum | NONE  |\r\n+-----------------+-------+\r\n\n@yanchaoguo \u6682\u4e0d\u652f\u6301binlog_checksum = None\u7684MySQL\u4e3b\u4ece\u6d88\u8d39\uff0c\u6211\u5c06\u5c1d\u8bd5\u4fee\u590d\u5b83\u3002\nMySQL version: 8.0.21-0ubuntu0.20.04.4\r\nClickHouse version: 20.9.3\r\n\r\n\\<Error\\> MaterializeMySQLSyncThread(joomla_clickhouse): Query EXTERNAL DDL FROM MySQL(test_clickhouse, test)  CREATE TABLE `users` (\r\n  `id` int NOT NULL AUTO_INCREMENT,\r\n  `name` varchar(400) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',\r\n  `username` varchar(150) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',\r\n  `email` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',\r\n  `password` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',\r\n  `block` tinyint NOT NULL DEFAULT '0',\r\n  `sendEmail` tinyint DEFAULT '0',\r\n  `registerDate` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',\r\n  `lastvisitDate` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',\r\n  `activation` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '',\r\n  `params` mediumtext CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL,\r\n  `lastResetTime` datetime NOT NULL DEFAULT '0000-00-00 00:00:00' COMMENT 'Date of last password reset',\r\n  `resetCount` int NOT NULL DEFAULT '0' COMMENT 'Count of password resets since lastResetTime',\r\n  `otpKey` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '' COMMENT 'Two factor authentication encrypted keys',\r\n  `otep` varchar(1000) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT '' COMMENT 'One time emergency passwords',\r\n  `requireReset` tinyint NOT NULL DEFAULT '0' COMMENT 'Require user to reset password on next login',\r\n  PRIMARY KEY (\\`id\\`),\r\n  KEY \\`idx_block\\` (\\`block\\`),\r\n  KEY \\`username\\` (\\`username\\`),\r\n  KEY \\`email\\` (\\`email\\`),\r\n  KEY \\`idx_name\\` (\\`name\\`(100))\r\n) ENGINE=InnoDB AUTO_INCREMENT=112728 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci wasn't finished successfully: Code: 46, e.displayText() = DB::Exception: Unknown function name, Stack trace (when copying this message, always include the lines below):\r\n\r\n0. Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x18e1b360 in /usr/bin/clickhouse\r\n1. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0xe736dad in /usr/bin/clickhouse\r\n2. ? @ 0x1546de1a in /usr/bin/clickhouse\r\n3. DB::FunctionFactory::get(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context const&) const @ 0x1546d5f5 in /usr/bin/clickhouse\r\n4. DB::ActionsMatcher::visit(DB::ASTFunction const&, std::__1::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x15b8ee25 in /usr/bin/clickhouse\r\n5. DB::ActionsMatcher::visit(DB::ASTFunction const&, std::__1::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x15b8ef9b in /usr/bin/clickhouse\r\n6. ? @ 0x15b688b9 in /usr/bin/clickhouse\r\n7. DB::ExpressionAnalyzer::getActions(bool, bool) @ 0x15b6bd17 in /usr/bin/clickhouse\r\n8. ? @ 0x15e4f6a8 in /usr/bin/clickhouse\r\n9. ? @ 0x15e513dd in /usr/bin/clickhouse\r\n10. DB::MySQLInterpreter::InterpreterCreateImpl::getRewrittenQueries(DB::MySQLParser::ASTCreateQuery const&, DB::Context const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) @ 0x15e53e85 in /usr/bin/clickhouse\r\n11. DB::InterpreterExternalDDLQuery::execute() @ 0x15ac20e2 in /usr/bin/clickhouse\r\n12. ? @ 0x15e2fdd2 in /usr/bin/clickhouse\r\n13. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool) @ 0x15e31732 in /usr/bin/clickhouse\r\n14. ? @ 0x15a1fff4 in /usr/bin/clickhouse\r\n15. ? @ 0x15a2a055 in /usr/bin/clickhouse\r\n16. ? @ 0x15a2b793 in /usr/bin/clickhouse\r\n17. DB::commitMetadata(std::__1::function<void ()> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) @ 0x15a65b69 in /usr/bin/clickhouse\r\n18. DB::MaterializeMetadata::transaction(DB::MySQLReplication::Position const&, std::__1::function<void ()> const&) @ 0x15a67fbe in /usr/bin/clickhouse\r\n19. DB::MaterializeMySQLSyncThread::prepareSynchronized(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) @ 0x15a23a19 in /usr/bin/clickhouse\r\n20. DB::MaterializeMySQLSyncThread::synchronization(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) @ 0x15a286ab in /usr/bin/clickhouse\r\n21. ? @ 0x15a28bc6 in /usr/bin/clickhouse\r\n22. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0xe7645b7 in /usr/bin/clickhouse\r\n23. ? @ 0xe762b03 in /usr/bin/clickhouse\r\n24. start_thread @ 0x9609 in /usr/lib/x86_64-linux-gnu/libpthread-2.31.so\r\n25. clone @ 0x122293 in /usr/lib/x86_64-linux-gnu/libc-2.31.so\r\n (version 20.9.3.45 (official build))\r\n\r\n\r\nI created a MaterializeMySQL with the table ddl like above and it failed, but when i removed the length limit of last index \\`idx_name\\`(\\`name\\`(100)) to \\`idx_name\\`(\\`name\\`), it successed, so if the clickhouse not support index length limit of mysql ddl?\n> I created a MaterializeMySQL with the table ddl like above and it failed, but when i removed the length limit of last index `idx_name`(`name`(100)) to `idx_name`(`name`), it successed, so if the clickhouse not support index length limit of mysql ddl?\r\n\r\nYes, index length limit is not support.\nThe reason for this problem may be binlog_checksum = NONE, you can check it with SHOW VARIABLES WHERE Variable_name ='binlog_checksum';\n@zhang2014  tks\uff0cquestion solved",
  "created_at": "2020-11-16T13:51:46Z",
  "modified_files": [
    "src/Core/MySQL/MySQLClient.cpp",
    "src/Core/MySQL/MySQLClient.h",
    "src/Core/MySQL/MySQLReplication.cpp",
    "src/Core/MySQL/MySQLReplication.h",
    "src/Databases/MySQL/MaterializeMetadata.cpp",
    "src/Databases/MySQL/MaterializeMetadata.h",
    "src/Databases/MySQL/MaterializeMySQLSyncThread.cpp",
    "src/IO/MySQLBinlogEventReadBuffer.cpp",
    "src/IO/MySQLBinlogEventReadBuffer.h",
    "utils/check-mysql-binlog/main.cpp"
  ],
  "modified_test_files": [
    "src/Core/tests/mysql_protocol.cpp",
    "src/IO/tests/gtest_mysql_binlog_event_read_buffer.cpp",
    "tests/integration/test_materialize_mysql_database/materialize_with_ddl.py",
    "tests/integration/test_materialize_mysql_database/test.py"
  ]
}