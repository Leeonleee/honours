{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 10311,
  "instance_id": "ClickHouse__ClickHouse-10311",
  "issue_numbers": [
    "9910"
  ],
  "base_commit": "fa8e4e4735b932f08b6beffcb2d069b72de34401",
  "patch": "diff --git a/src/Interpreters/CrossToInnerJoinVisitor.cpp b/src/Interpreters/CrossToInnerJoinVisitor.cpp\nindex 903f561b8bb7..af694fe634a5 100644\n--- a/src/Interpreters/CrossToInnerJoinVisitor.cpp\n+++ b/src/Interpreters/CrossToInnerJoinVisitor.cpp\n@@ -52,17 +52,21 @@ struct JoinedElement\n \n     void rewriteCommaToCross()\n     {\n-        if (join)\n+        if (join && join->kind == ASTTableJoin::Kind::Comma)\n             join->kind = ASTTableJoin::Kind::Cross;\n     }\n \n-    void rewriteCrossToInner(ASTPtr on_expression)\n+    bool rewriteCrossToInner(ASTPtr on_expression)\n     {\n+        if (join->kind != ASTTableJoin::Kind::Cross)\n+            return false;\n+\n         join->kind = ASTTableJoin::Kind::Inner;\n         join->strictness = ASTTableJoin::Strictness::All;\n \n         join->on_expression = on_expression;\n         join->children.push_back(join->on_expression);\n+        return true;\n     }\n \n     ASTPtr arrayJoin() const { return element.array_join; }\n@@ -329,8 +333,8 @@ void CrossToInnerJoinMatcher::visit(ASTSelectQuery & select, ASTPtr &, Data & da\n     {\n         if (visitor_data.matchAny(i))\n         {\n-            joined_tables[i].rewriteCrossToInner(visitor_data.makeOnExpression(i));\n-            data.done = true;\n+            if (joined_tables[i].rewriteCrossToInner(visitor_data.makeOnExpression(i)))\n+                data.done = true;\n         }\n     }\n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01117_comma_and_others_join_mix.reference b/tests/queries/0_stateless/01117_comma_and_others_join_mix.reference\nnew file mode 100644\nindex 000000000000..e50321284f48\n--- /dev/null\n+++ b/tests/queries/0_stateless/01117_comma_and_others_join_mix.reference\n@@ -0,0 +1,23 @@\n+0\t0\t0\n+0\t0\t1\n+0\t0\t2\n+0\t0\t3\n+1\t1\t0\n+1\t1\t1\n+1\t1\t2\n+1\t1\t3\n+-\n+0\t0\t0\n+0\t1\t0\n+1\t0\t1\n+1\t1\t1\n+2\t0\t\\N\n+2\t1\t\\N\n+-\n+0\t0\t0\n+0\t1\t1\n+0\t2\t2\n+1\t0\t0\n+1\t1\t1\n+1\t2\t2\n+\\N\t\\N\t3\ndiff --git a/tests/queries/0_stateless/01117_comma_and_others_join_mix.sql b/tests/queries/0_stateless/01117_comma_and_others_join_mix.sql\nnew file mode 100644\nindex 000000000000..5fe297956b8c\n--- /dev/null\n+++ b/tests/queries/0_stateless/01117_comma_and_others_join_mix.sql\n@@ -0,0 +1,20 @@\n+SET join_use_nulls = 1;\n+\n+SELECT *\n+FROM numbers(2) AS n1\n+JOIN numbers(3) AS n2 ON n1.number = n2.number, numbers(4) AS n3\n+ORDER BY n1.number, n2.number, n3.number;\n+\n+SELECT '-';\n+\n+SELECT *\n+FROM numbers(3) AS n1, numbers(2) AS n2\n+LEFT JOIN numbers(2) AS n3 ON n1.number = n3.number\n+ORDER BY n1.number, n2.number, n3.number;\n+\n+SELECT '-';\n+\n+SELECT *\n+FROM numbers(2) AS n1, numbers(3) AS n2\n+RIGHT JOIN numbers(4) AS n3 ON n2.number = n3.number\n+ORDER BY n1.number, n2.number, n3.number;\n",
  "problem_statement": "Cross join failed with the error 'Logical error: CROSS JOIN has expressions'\n**How to reproduce**\r\n* CH 20.3.5.21\r\n```sql\r\nSELECT *\r\nFROM numbers(5) AS n1\r\nLEFT JOIN numbers(3) AS n2 ON (n1.number = n2.number), numbers(3) AS n3\r\n```\r\n\r\n**Error message and stacktrace**\r\n```bash\r\nReceived exception from server (version 20.3.5):\r\nCode: 49. DB::Exception: Received from localhost:9000. DB::Exception: Logical error: CROSS JOIN has expressions. Stack trace:\r\n\r\n0. Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x1050f0d0 in /usr/bin/clickhouse\r\n1. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x8f3272d in /usr/bin/clickhouse\r\n2. ? @ 0xd278805 in /usr/bin/clickhouse\r\n3. DB::CrossToInnerJoinMatcher::visit(std::__1::shared_ptr<DB::IAST>&, DB::CrossToInnerJoinMatcher::Data&) @ 0xd278083 in /usr/bin/clickhouse\r\n4. DB::InDepthNodeVisitor<DB::CrossToInnerJoinMatcher, true, std::__1::shared_ptr<DB::IAST> >::visit(std::__1::shared_ptr<DB::IAST>&) @ 0xd13274b in /usr/bin/clickhouse\r\n5. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xd124adc in /usr/bin/clickhouse\r\n6. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xd1256a9 in /usr/bin/clickhouse\r\n7. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xd327e76 in /usr/bin/clickhouse\r\n8. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&) @ 0xd32895a in /usr/bin/clickhouse\r\n9. ? @ 0xd53d559 in /usr/bin/clickhouse\r\n10. DB::getDatabaseAndTablesWithColumns(std::__1::vector<DB::ASTTableExpression const*, std::__1::allocator<DB::ASTTableExpression const*> > const&, DB::Context const&) @ 0xd5404df in /usr/bin/clickhouse\r\n11. DB::JoinedTables::resolveTables() @ 0xd43b1e5 in /usr/bin/clickhouse\r\n12. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xd124dba in /usr/bin/clickhouse\r\n13. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xd1256a9 in /usr/bin/clickhouse\r\n14. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xd327e76 in /usr/bin/clickhouse\r\n15. DB::InterpreterFactory::get(std::__1::shared_ptr<DB::IAST>&, DB::Context&, DB::QueryProcessingStage::Enum) @ 0xd077004 in /usr/bin/clickhouse\r\n16. ? @ 0xd535695 in /usr/bin/clickhouse\r\n17. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool, bool) @ 0xd538471 in /usr/bin/clickhouse\r\n18. DB::TCPHandler::runImpl() @ 0x9015119 in /usr/bin/clickhouse\r\n19. DB::TCPHandler::run() @ 0x9016100 in /usr/bin/clickhouse\r\n20. Poco::Net::TCPServerConnection::start() @ 0xe3867bb in /usr/bin/clickhouse\r\n21. Poco::Net::TCPServerDispatcher::run() @ 0xe386c3d in /usr/bin/clickhouse\r\n22. Poco::PooledThread::run() @ 0x1059d237 in /usr/bin/clickhouse\r\n23. Poco::ThreadImpl::runnableEntry(void*) @ 0x1059903c in /usr/bin/clickhouse\r\n24. ? @ 0x1059a9dd in /usr/bin/clickhouse\r\n25. start_thread @ 0x76db in /lib/x86_64-linux-gnu/libpthread-2.27.so\r\n26. __clone @ 0x12188f in /lib/x86_64-linux-gnu/libc-2.27.so\r\n```\n",
  "hints_text": "",
  "created_at": "2020-04-16T15:54:52Z"
}