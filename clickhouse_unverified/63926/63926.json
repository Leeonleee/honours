{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 63926,
  "instance_id": "ClickHouse__ClickHouse-63926",
  "issue_numbers": [
    "63918"
  ],
  "base_commit": "7aeeaabf3dcdafa6b604ff326bac533a2f1aa8da",
  "patch": "diff --git a/src/Client/QueryFuzzer.cpp b/src/Client/QueryFuzzer.cpp\nindex 7be01686258c..03730fcedaa1 100644\n--- a/src/Client/QueryFuzzer.cpp\n+++ b/src/Client/QueryFuzzer.cpp\n@@ -1242,8 +1242,9 @@ void QueryFuzzer::fuzz(ASTPtr & ast)\n     }\n     else if (auto * explain_query = typeid_cast<ASTExplainQuery *>(ast.get()))\n     {\n+        const auto & explained_query = explain_query->getExplainedQuery();\n         /// Fuzzing EXPLAIN query to SELECT query randomly\n-        if (fuzz_rand() % 20 == 0 && explain_query->getExplainedQuery()->getQueryKind() == IAST::QueryKind::Select)\n+        if (explained_query && explained_query->getQueryKind() == IAST::QueryKind::Select && fuzz_rand() % 20 == 0)\n         {\n             auto select_query = explain_query->getExplainedQuery()->clone();\n             fuzz(select_query);\ndiff --git a/src/Interpreters/executeQuery.cpp b/src/Interpreters/executeQuery.cpp\nindex 33a4cf2a74cc..f1f72a4ea4a1 100644\n--- a/src/Interpreters/executeQuery.cpp\n+++ b/src/Interpreters/executeQuery.cpp\n@@ -808,12 +808,14 @@ static std::tuple<ASTPtr, BlockIO> executeQueryImpl(\n \n         bool is_create_parameterized_view = false;\n         if (const auto * create_query = ast->as<ASTCreateQuery>())\n+        {\n             is_create_parameterized_view = create_query->isParameterizedView();\n+        }\n         else if (const auto * explain_query = ast->as<ASTExplainQuery>())\n         {\n-            assert(!explain_query->children.empty());\n-            if (const auto * create_of_explain_query = explain_query->children[0]->as<ASTCreateQuery>())\n-                is_create_parameterized_view = create_of_explain_query->isParameterizedView();\n+            if (!explain_query->children.empty())\n+                if (const auto * create_of_explain_query = explain_query->children[0]->as<ASTCreateQuery>())\n+                    is_create_parameterized_view = create_of_explain_query->isParameterizedView();\n         }\n \n         /// Replace ASTQueryParameter with ASTLiteral for prepared statements.\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03155_explain_current_transaction.reference b/tests/queries/0_stateless/03155_explain_current_transaction.reference\nnew file mode 100644\nindex 000000000000..76f7af4a4ffa\n--- /dev/null\n+++ b/tests/queries/0_stateless/03155_explain_current_transaction.reference\n@@ -0,0 +1,1 @@\n+<no current transaction>\ndiff --git a/tests/queries/0_stateless/03155_explain_current_transaction.sql b/tests/queries/0_stateless/03155_explain_current_transaction.sql\nnew file mode 100644\nindex 000000000000..fa0fd06e7982\n--- /dev/null\n+++ b/tests/queries/0_stateless/03155_explain_current_transaction.sql\n@@ -0,0 +1,1 @@\n+EXPLAIN CURRENT TRANSACTION;\n",
  "problem_statement": "(experimental transactions) An EXPLAIN query causes a segfault\n**Describe what's wrong**\r\nAlthough not documented, an  `EXPLAIN CURRENT TRANSACTION` query is possible. \r\nExecuting the query - `EXPLAIN CURRENT TRANSACTION;` causes a segmentation fault. \r\nQuery Result:\r\n```\r\n[32d3a7360825] 2024.05.15 19:31:26.025140 [ 713 ] <Fatal> BaseDaemon: ########################################\r\n[32d3a7360825] 2024.05.15 19:31:26.025200 [ 713 ] <Fatal> BaseDaemon: (version 24.4.1.2088 (official build), build id: 8474BE9DB7BA90A8E303C2F4B836BA6EC5A57A63, git hash: 6d4b31322d168356c8b10c43b4cef157c82337ff) (from thread 48) (query_id: 3df1d272-0de9-4f11-bb12-116af1499d7e) (query: ) Received signal Segmentation fault (11)\r\n[32d3a7360825] 2024.05.15 19:31:26.025241 [ 713 ] <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Address not mapped to object.\r\n[32d3a7360825] 2024.05.15 19:31:26.025268 [ 713 ] <Fatal> BaseDaemon: Stack trace: 0x0000000011117852 0x00000000111169ba 0x00000000122a59c4 0x00000000122c1fb9 0x0000000014c105b2 0x0000000014c113f9 0x0000000014d09a61 0x0000000014d07ffd 0x00007116d8389609 0x00007116d82a4353\r\n[32d3a7360825] 2024.05.15 19:31:26.025340 [ 713 ] <Fatal> BaseDaemon: 2. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x0000000011117852\r\n[32d3a7360825] 2024.05.15 19:31:26.025392 [ 713 ] <Fatal> BaseDaemon: 3. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000111169ba\r\n[32d3a7360825] 2024.05.15 19:31:26.025434 [ 713 ] <Fatal> BaseDaemon: 4. DB::TCPHandler::runImpl() @ 0x00000000122a59c4\r\n[32d3a7360825] 2024.05.15 19:31:26.025482 [ 713 ] <Fatal> BaseDaemon: 5. DB::TCPHandler::run() @ 0x00000000122c1fb9\r\n[32d3a7360825] 2024.05.15 19:31:26.025542 [ 713 ] <Fatal> BaseDaemon: 6. Poco::Net::TCPServerConnection::start() @ 0x0000000014c105b2\r\n[32d3a7360825] 2024.05.15 19:31:26.025605 [ 713 ] <Fatal> BaseDaemon: 7. Poco::Net::TCPServerDispatcher::run() @ 0x0000000014c113f9\r\n[32d3a7360825] 2024.05.15 19:31:26.025660 [ 713 ] <Fatal> BaseDaemon: 8. Poco::PooledThread::run() @ 0x0000000014d09a61\r\n[32d3a7360825] 2024.05.15 19:31:26.025721 [ 713 ] <Fatal> BaseDaemon: 9. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000014d07ffd\r\n[32d3a7360825] 2024.05.15 19:31:26.025764 [ 713 ] <Fatal> BaseDaemon: 10. ? @ 0x00007116d8389609\r\n[32d3a7360825] 2024.05.15 19:31:26.025812 [ 713 ] <Fatal> BaseDaemon: 11. ? @ 0x00007116d82a4353\r\n[32d3a7360825] 2024.05.15 19:31:26.144100 [ 713 ] <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: 1B4AB729A4BACA7860A3C947777632AD)\r\n[32d3a7360825] 2024.05.15 19:31:26.144299 [ 713 ] <Fatal> BaseDaemon: Report this error to https://github.com/ClickHouse/ClickHouse/issues\r\n[32d3a7360825] 2024.05.15 19:31:26.144425 [ 713 ] <Fatal> BaseDaemon: Changed settings: output_format_pretty_color = 0, output_format_pretty_grid_charset = 'ASCII'\r\n```\r\n\r\n**Does it reproduce on the most recent release?**\r\nYes. Links to fiddles:\r\n* `head`: https://fiddle.clickhouse.com/9c967181-b72e-4dc0-a90a-cf0a07e77a13\r\n* `24.4.1.2088`: https://fiddle.clickhouse.com/a20160a4-4a49-4b9b-b1c1-053d0d072547\r\n\r\n**How to reproduce**\r\nRunning `EXPLAIN CURRENT TRANSACTION;` against the `head` version causes the segmentation fault. \r\n\r\n**Expected behavior**\r\nSince `EXPLAIN CURRENT TRANSACTION;` is not documented, the server should report its incorrect usage or that it is unsupported, instead of crashing. \r\nIf it is indeed supported,  then either `<no current transaction>` or the description of the current transaction should be returned as the query result. \r\n\r\n**Error message and/or stacktrace**\r\n```\r\n[32d3a7360825] 2024.05.15 19:31:26.025140 [ 713 ] <Fatal> BaseDaemon: ########################################\r\n[32d3a7360825] 2024.05.15 19:31:26.025200 [ 713 ] <Fatal> BaseDaemon: (version 24.4.1.2088 (official build), build id: 8474BE9DB7BA90A8E303C2F4B836BA6EC5A57A63, git hash: 6d4b31322d168356c8b10c43b4cef157c82337ff) (from thread 48) (query_id: 3df1d272-0de9-4f11-bb12-116af1499d7e) (query: ) Received signal Segmentation fault (11)\r\n[32d3a7360825] 2024.05.15 19:31:26.025241 [ 713 ] <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Address not mapped to object.\r\n[32d3a7360825] 2024.05.15 19:31:26.025268 [ 713 ] <Fatal> BaseDaemon: Stack trace: 0x0000000011117852 0x00000000111169ba 0x00000000122a59c4 0x00000000122c1fb9 0x0000000014c105b2 0x0000000014c113f9 0x0000000014d09a61 0x0000000014d07ffd 0x00007116d8389609 0x00007116d82a4353\r\n[32d3a7360825] 2024.05.15 19:31:26.025340 [ 713 ] <Fatal> BaseDaemon: 2. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x0000000011117852\r\n[32d3a7360825] 2024.05.15 19:31:26.025392 [ 713 ] <Fatal> BaseDaemon: 3. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000111169ba\r\n[32d3a7360825] 2024.05.15 19:31:26.025434 [ 713 ] <Fatal> BaseDaemon: 4. DB::TCPHandler::runImpl() @ 0x00000000122a59c4\r\n[32d3a7360825] 2024.05.15 19:31:26.025482 [ 713 ] <Fatal> BaseDaemon: 5. DB::TCPHandler::run() @ 0x00000000122c1fb9\r\n[32d3a7360825] 2024.05.15 19:31:26.025542 [ 713 ] <Fatal> BaseDaemon: 6. Poco::Net::TCPServerConnection::start() @ 0x0000000014c105b2\r\n[32d3a7360825] 2024.05.15 19:31:26.025605 [ 713 ] <Fatal> BaseDaemon: 7. Poco::Net::TCPServerDispatcher::run() @ 0x0000000014c113f9\r\n[32d3a7360825] 2024.05.15 19:31:26.025660 [ 713 ] <Fatal> BaseDaemon: 8. Poco::PooledThread::run() @ 0x0000000014d09a61\r\n[32d3a7360825] 2024.05.15 19:31:26.025721 [ 713 ] <Fatal> BaseDaemon: 9. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000014d07ffd\r\n[32d3a7360825] 2024.05.15 19:31:26.025764 [ 713 ] <Fatal> BaseDaemon: 10. ? @ 0x00007116d8389609\r\n[32d3a7360825] 2024.05.15 19:31:26.025812 [ 713 ] <Fatal> BaseDaemon: 11. ? @ 0x00007116d82a4353\r\n[32d3a7360825] 2024.05.15 19:31:26.144100 [ 713 ] <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: 1B4AB729A4BACA7860A3C947777632AD)\r\n[32d3a7360825] 2024.05.15 19:31:26.144299 [ 713 ] <Fatal> BaseDaemon: Report this error to https://github.com/ClickHouse/ClickHouse/issues\r\n[32d3a7360825] 2024.05.15 19:31:26.144425 [ 713 ] <Fatal> BaseDaemon: Changed settings: output_format_pretty_color = 0, output_format_pretty_grid_charset = 'ASCII'\r\n```\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2024-05-16T00:05:45Z",
  "modified_files": [
    "src/Client/QueryFuzzer.cpp",
    "src/Interpreters/executeQuery.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03155_explain_current_transaction.reference",
    "b/tests/queries/0_stateless/03155_explain_current_transaction.sql"
  ]
}