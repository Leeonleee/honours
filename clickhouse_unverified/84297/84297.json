{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 84297,
  "instance_id": "ClickHouse__ClickHouse-84297",
  "issue_numbers": [
    "84202"
  ],
  "base_commit": "c01616ccf6fd8acf5c1c966ae020f6635e159290",
  "patch": "diff --git a/src/Functions/array/array.cpp b/src/Functions/array/array.cpp\nindex 266392517d0e..301c0fcb3441 100644\n--- a/src/Functions/array/array.cpp\n+++ b/src/Functions/array/array.cpp\n@@ -254,15 +254,22 @@ class FunctionArray : public IFunction\n             return false;\n \n         const size_t tuple_size = concrete_out_data->tupleSize();\n-        for (size_t i = 0; i < tuple_size; ++i)\n+        if (tuple_size == 0)\n         {\n-            ColumnRawPtrs elem_columns(columns.size(), nullptr);\n-            for (size_t j = 0; j < columns.size(); ++j)\n+            out_data.insertManyDefaults(columns.size());\n+        }\n+        else\n+        {\n+            for (size_t i = 0; i < tuple_size; ++i)\n             {\n-                const ColumnTuple * concrete_column = assert_cast<const ColumnTuple *>(columns[j]);\n-                elem_columns[j] = &concrete_column->getColumn(i);\n+                ColumnRawPtrs elem_columns(columns.size(), nullptr);\n+                for (size_t j = 0; j < columns.size(); ++j)\n+                {\n+                    const ColumnTuple * concrete_column = assert_cast<const ColumnTuple *>(columns[j]);\n+                    elem_columns[j] = &concrete_column->getColumn(i);\n+                }\n+                execute(elem_columns, concrete_out_data->getColumn(i), input_rows_count);\n             }\n-            execute(elem_columns, concrete_out_data->getColumn(i), input_rows_count);\n         }\n         return true;\n     }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03572_empty_tuple_in_nested_type.reference b/tests/queries/0_stateless/03572_empty_tuple_in_nested_type.reference\nnew file mode 100644\nindex 000000000000..6ea92a0bcbcd\n--- /dev/null\n+++ b/tests/queries/0_stateless/03572_empty_tuple_in_nested_type.reference\n@@ -0,0 +1,9 @@\n+-- { echo ON }\n+\n+DROP TABLE IF EXISTS t0;\n+CREATE TABLE t0 (c0 Array(Tuple())) ENGINE = Memory;\n+SET max_insert_block_size = 4;\n+INSERT INTO TABLE t0 (c0) VALUES ([()]), ([()]), ([()]), ([()]), ([()]), ([()]), ([()]::Array(Tuple())), ([()]), ([(), ()]), ([()]);\n+DROP TABLE t0;\n+SELECT [(), ()];\n+[(),()]\ndiff --git a/tests/queries/0_stateless/03572_empty_tuple_in_nested_type.sql b/tests/queries/0_stateless/03572_empty_tuple_in_nested_type.sql\nnew file mode 100644\nindex 000000000000..9fbb20a4eb61\n--- /dev/null\n+++ b/tests/queries/0_stateless/03572_empty_tuple_in_nested_type.sql\n@@ -0,0 +1,13 @@\n+-- { echo ON }\n+\n+DROP TABLE IF EXISTS t0;\n+\n+CREATE TABLE t0 (c0 Array(Tuple())) ENGINE = Memory;\n+\n+SET max_insert_block_size = 4;\n+\n+INSERT INTO TABLE t0 (c0) VALUES ([()]), ([()]), ([()]), ([()]), ([()]), ([()]), ([()]::Array(Tuple())), ([()]), ([(), ()]), ([()]);\n+\n+DROP TABLE t0;\n+\n+SELECT [(), ()];\n",
  "problem_statement": "Bad alignment with empty tuples\n### Describe the bug\n\nEasy to reproduce.\n\n### How to reproduce\n\nRun Fiddle: https://fiddle.clickhouse.com/f2bbb34e-6899-430d-940f-676f963cd47f or in the client:\n\n```sql\nCREATE TABLE t0 (c0 Array(Tuple())) ENGINE = Memory;\nSET max_insert_block_size = 4;\nINSERT INTO TABLE t0 (c0) VALUES ([()]);\nINSERT INTO TABLE t0 (c0) VALUES ([()]), ([()]), ([()]), ([()]), ([()]), ([()]), ([()]::Array(Tuple())), ([()]), ([(), ()]), ([()]); --Logical error\n```\n\n### Error message and/or stacktrace\n\nStack trace:\n```\nLogical error: 'offsets_column has data inconsistent with nested_column. Data size: 1, last offset: 3'.                                                                      \nStack trace (when copying this message, always include the lines below):\n\n0. contrib/llvm-project/libcxx/include/__exception/exception.h:113: Poco::Exception::Exception(String const&, int) @ 0x00000000265e58f2\n1. src/Common/Exception.cpp:115: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000001407ab26\n2. src/Common/Exception.h:119: DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000cd9b5ac\n3. src/Common/Exception.h:137: DB::Exception::Exception<unsigned long, unsigned long&>(int, FormatStringHelperImpl<std::type_identity<unsigned long>::type, std::type_identity<unsigned long&>::type>, unsigned long&&, unsigned long&) @ 0x0000000015b66836\n4. src/Columns/ColumnArray.cpp:58: DB::ColumnArray::ColumnArray(COW<DB::IColumn>::mutable_ptr<DB::IColumn>&&, COW<DB::IColumn>::mutable_ptr<DB::IColumn>&&) @ 0x000000001d24db78\n5. src/Common/COW.h:293: DB::ColumnArray::create(COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&) @ 0x000000000cdc4e50\n6. src/Columns/ColumnArray.cpp:574: DB::ColumnArray::convertToFullColumnIfConst() const @ 0x000000001d251473\n7. src/Formats/NativeWriter.cpp:74: DB::NativeWriter::writeData(DB::ISerialization const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&, DB::WriteBuffer&, std::optional<DB::FormatSettings> const&, unsigned long, unsigned long, unsigned long) @ 0x000000001e588183\n8. src/Formats/NativeWriter.cpp:218: DB::NativeWriter::write(DB::Block const&) @ 0x000000001e588f5d\n9. src/Client/Connection.cpp:1031: DB::Connection::sendData(DB::Block const&, String const&, bool) @ 0x000000001e3bef53\n10. src/Client/ClientBase.cpp:2040: DB::ClientBase::sendDataFromPipe(DB::Pipe&&, std::shared_ptr<DB::IAST>, bool) @ 0x000000001e388a84\n11. src/Client/ClientBase.cpp:1997: DB::ClientBase::sendDataFrom(DB::ReadBuffer&, DB::Block&, DB::ColumnsDescription const&, std::shared_ptr<DB::IAST>, bool) @ 0x000000001e3891ed\n12. src/Client/ClientBase.cpp:1944: DB::ClientBase::sendData(DB::Block&, DB::ColumnsDescription const&, std::shared_ptr<DB::IAST>) @ 0x000000001e386632\n13. src/Client/ClientBase.cpp:1793: DB::ClientBase::processInsertQuery(String, std::shared_ptr<DB::IAST>) @ 0x000000001e385ecb\n14. src/Client/ClientBase.cpp:2280: DB::ClientBase::processParsedSingleQuery(std::basic_string_view<char, std::char_traits<char>>, std::shared_ptr<DB::IAST>, bool&, unsigned long) @ 0x000000001e37f38d\n15. src/Client/ClientBase.cpp:2658: DB::ClientBase::executeMultiQuery(String const&) @ 0x000000001e38a751\n16. src/Client/ClientBase.cpp:2898: DB::ClientBase::processQueryText(String const&) @ 0x000000001e38ba32\n17. src/Client/ClientBase.cpp:3602: DB::ClientBase::runInteractive() @ 0x000000001e39428b\n18. programs/client/Client.cpp:401: DB::Client::main(std::vector<String, std::allocator<String>> const&) @ 0x00000000142bd3b9\n19. base/poco/Util/src/Application.cpp:315: Poco::Util::Application::run() @ 0x00000000266c06f1\n20. programs/client/Client.cpp:1143: mainEntryClickHouseClient(int, char**) @ 0x00000000142c87c6\n21. programs/main.cpp:340: main @ 0x000000000cd91fe7\n22. strcmp @ 0x000000000002a578\n23. __libc_start_main_alias_1 @ 0x000000000002a63b\n24. _start @ 0x000000000cd8302e\n```\n",
  "hints_text": "This is a very good finding!\n\n@amosbird, maybe you can take a look?\nSure.",
  "created_at": "2025-07-23T13:01:42Z"
}