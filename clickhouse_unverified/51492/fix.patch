diff --git a/src/Processors/QueryPlan/PartsSplitter.cpp b/src/Processors/QueryPlan/PartsSplitter.cpp
index 9796e696f6c2..533fbde1e130 100644
--- a/src/Processors/QueryPlan/PartsSplitter.cpp
+++ b/src/Processors/QueryPlan/PartsSplitter.cpp
@@ -256,6 +256,7 @@ namespace ErrorCodes
 
 Pipes buildPipesForReadingByPKRanges(
     const KeyDescription & primary_key,
+    ExpressionActionsPtr sorting_expr,
     RangesInDataParts parts,
     size_t max_layers,
     ContextPtr context,
@@ -271,6 +272,8 @@ Pipes buildPipesForReadingByPKRanges(
     for (size_t i = 0; i < result_layers.size(); ++i)
     {
         pipes[i] = reading_step_getter(std::move(result_layers[i]));
+        pipes[i].addSimpleTransform([sorting_expr](const Block & header)
+                                    { return std::make_shared<ExpressionTransform>(header, sorting_expr); });
         auto & filter_function = filters[i];
         if (!filter_function)
             continue;
@@ -279,9 +282,6 @@ Pipes buildPipesForReadingByPKRanges(
         ExpressionActionsPtr expression_actions = std::make_shared<ExpressionActions>(std::move(actions));
         auto description = fmt::format(
             "filter values in [{}, {})", i ? ::toString(borders[i - 1]) : "-inf", i < borders.size() ? ::toString(borders[i]) : "+inf");
-        auto pk_expression = std::make_shared<ExpressionActions>(primary_key.expression->getActionsDAG().clone());
-        pipes[i].addSimpleTransform([pk_expression](const Block & header)
-                                    { return std::make_shared<ExpressionTransform>(header, pk_expression); });
         pipes[i].addSimpleTransform(
             [&](const Block & header)
             {
diff --git a/src/Processors/QueryPlan/PartsSplitter.h b/src/Processors/QueryPlan/PartsSplitter.h
index 56bca688c2d4..4ba655a6f6d0 100644
--- a/src/Processors/QueryPlan/PartsSplitter.h
+++ b/src/Processors/QueryPlan/PartsSplitter.h
@@ -18,6 +18,7 @@ using ReadingInOrderStepGetter = std::function<Pipe(RangesInDataParts)>;
 /// Will try to produce exactly max_layer pipes but may return less if data is distributed in not a very parallelizable way.
 Pipes buildPipesForReadingByPKRanges(
     const KeyDescription & primary_key,
+    ExpressionActionsPtr sorting_expr,
     RangesInDataParts parts,
     size_t max_layers,
     ContextPtr context,
diff --git a/src/Processors/QueryPlan/ReadFromMergeTree.cpp b/src/Processors/QueryPlan/ReadFromMergeTree.cpp
index 3c38ecbbd3fb..fac8ebd6e1f8 100644
--- a/src/Processors/QueryPlan/ReadFromMergeTree.cpp
+++ b/src/Processors/QueryPlan/ReadFromMergeTree.cpp
@@ -979,6 +979,8 @@ Pipe ReadFromMergeTree::spreadMarkRangesAmongStreamsFinal(
     RangesInDataParts lonely_parts;
     size_t sum_marks_in_lonely_parts = 0;
 
+    auto sorting_expr = std::make_shared<ExpressionActions>(metadata_for_reading->getSortingKey().expression->getActionsDAG().clone());
+
     for (size_t range_index = 0; range_index < parts_to_merge_ranges.size() - 1; ++range_index)
     {
         Pipes pipes;
@@ -1022,12 +1024,20 @@ Pipe ReadFromMergeTree::spreadMarkRangesAmongStreamsFinal(
                         info.use_uncompressed_cache);
                 };
                 pipes = buildPipesForReadingByPKRanges(
-                    metadata_for_reading->getPrimaryKey(), std::move(new_parts), num_streams, context, std::move(reading_step_getter));
+                    metadata_for_reading->getPrimaryKey(),
+                    sorting_expr,
+                    std::move(new_parts),
+                    num_streams,
+                    context,
+                    std::move(reading_step_getter));
             }
             else
             {
                 pipes.emplace_back(read(
                     std::move(new_parts), column_names, ReadFromMergeTree::ReadType::InOrder, num_streams, 0, info.use_uncompressed_cache));
+
+                pipes.back().addSimpleTransform([sorting_expr](const Block & header)
+                                                { return std::make_shared<ExpressionTransform>(header, sorting_expr); });
             }
 
             /// Drop temporary columns, added by 'sorting_key_expr'
@@ -1035,13 +1045,6 @@ Pipe ReadFromMergeTree::spreadMarkRangesAmongStreamsFinal(
                 out_projection = createProjection(pipes.front().getHeader());
         }
 
-        auto sorting_expr = std::make_shared<ExpressionActions>(
-            metadata_for_reading->getSortingKey().expression->getActionsDAG().clone());
-
-        for (auto & pipe : pipes)
-            pipe.addSimpleTransform([sorting_expr](const Block & header)
-                                    { return std::make_shared<ExpressionTransform>(header, sorting_expr); });
-
         /// If do_not_merge_across_partitions_select_final is true and there is only one part in partition
         /// with level > 0 then we won't postprocess this part
         if (settings.do_not_merge_across_partitions_select_final &&
@@ -1098,9 +1101,6 @@ Pipe ReadFromMergeTree::spreadMarkRangesAmongStreamsFinal(
         if (!out_projection)
             out_projection = createProjection(pipe.getHeader());
 
-        auto sorting_expr = std::make_shared<ExpressionActions>(
-            metadata_for_reading->getSortingKey().expression->getActionsDAG().clone());
-
         pipe.addSimpleTransform([sorting_expr](const Block & header)
         {
             return std::make_shared<ExpressionTransform>(header, sorting_expr);
