{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 33938,
  "instance_id": "ClickHouse__ClickHouse-33938",
  "issue_numbers": [
    "32374"
  ],
  "base_commit": "88629657ca54f92c7fe1bf3f055e3389668ded3c",
  "patch": "diff --git a/src/Parsers/ASTFunction.cpp b/src/Parsers/ASTFunction.cpp\nindex 36731a3acd0e..f9a5c7be75f5 100644\n--- a/src/Parsers/ASTFunction.cpp\n+++ b/src/Parsers/ASTFunction.cpp\n@@ -32,6 +32,15 @@ void ASTFunction::appendColumnNameImpl(WriteBuffer & ostr) const\n     if (name == \"view\")\n         throw Exception(\"Table function view cannot be used as an expression\", ErrorCodes::UNEXPECTED_EXPRESSION);\n \n+    /// If function can be converted to literal it will be parsed as literal after formatting.\n+    /// In distributed query it may lead to mismathed column names.\n+    /// To avoid it we check whether we can convert function to literal.\n+    if (auto literal = toLiteral())\n+    {\n+        literal->appendColumnName(ostr);\n+        return;\n+    }\n+\n     writeString(name, ostr);\n \n     if (parameters)\n@@ -111,32 +120,43 @@ void ASTFunction::updateTreeHashImpl(SipHash & hash_state) const\n     IAST::updateTreeHashImpl(hash_state);\n }\n \n-\n-ASTPtr ASTFunction::toLiteral() const\n+template <typename Container>\n+static ASTPtr createLiteral(const ASTs & arguments)\n {\n-    if (!arguments) return {};\n+    Container container;\n \n-    if (name == \"array\")\n+    for (const auto & arg : arguments)\n     {\n-        Array array;\n-\n-        for (const auto & arg : arguments->children)\n+        if (const auto * literal = arg->as<ASTLiteral>())\n         {\n-            if (auto * literal = arg->as<ASTLiteral>())\n-                array.push_back(literal->value);\n-            else if (auto * func = arg->as<ASTFunction>())\n-            {\n-                if (auto func_literal = func->toLiteral())\n-                    array.push_back(func_literal->as<ASTLiteral>()->value);\n-            }\n+            container.push_back(literal->value);\n+        }\n+        else if (auto * func = arg->as<ASTFunction>())\n+        {\n+            if (auto func_literal = func->toLiteral())\n+                container.push_back(func_literal->as<ASTLiteral>()->value);\n             else\n-                /// Some of the Array arguments is not literal\n                 return {};\n         }\n-\n-        return std::make_shared<ASTLiteral>(array);\n+        else\n+            /// Some of the Array or Tuple arguments is not literal\n+            return {};\n     }\n \n+    return std::make_shared<ASTLiteral>(container);\n+}\n+\n+ASTPtr ASTFunction::toLiteral() const\n+{\n+    if (!arguments)\n+        return {};\n+\n+    if (name == \"array\")\n+        return createLiteral<Array>(arguments->children);\n+\n+    if (name == \"tuple\")\n+        return createLiteral<Tuple>(arguments->children);\n+\n     return {};\n }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02183_array_tuple_literals_remote.reference b/tests/queries/0_stateless/02183_array_tuple_literals_remote.reference\nnew file mode 100644\nindex 000000000000..1444ec4d2d96\n--- /dev/null\n+++ b/tests/queries/0_stateless/02183_array_tuple_literals_remote.reference\n@@ -0,0 +1,11 @@\n+[0]\n+(0,1)\n+[[0,1],[2,3]]\n+[(0,1),(2,3)]\n+[(0,1),(2,3)]\n+([0,1],(2,3),[4],(5,'a'),6,'b')\n+[0,1]\n+(0,1)\n+[[0,1],[2,3]]\n+[[0,1],[0,0]]\n+[[[0]],[[1],[2,3]]]\ndiff --git a/tests/queries/0_stateless/02183_array_tuple_literals_remote.sql b/tests/queries/0_stateless/02183_array_tuple_literals_remote.sql\nnew file mode 100644\nindex 000000000000..25c7e7d7348c\n--- /dev/null\n+++ b/tests/queries/0_stateless/02183_array_tuple_literals_remote.sql\n@@ -0,0 +1,11 @@\n+SELECT any(array(0)) AS k FROM remote('127.0.0.{1,2}', numbers(10));\n+SELECT any(tuple(0, 1)) AS k FROM remote('127.0.0.{1,2}', numbers(10));\n+SELECT any(array(array(0, 1), array(2, 3))) AS k FROM remote('127.0.0.{1,2}', numbers(10));\n+SELECT any(array(tuple(0, 1), tuple(2, 3))) AS k FROM remote('127.0.0.{1,2}', numbers(10));\n+SELECT any(array((0, 1), (2, 3))) AS k FROM remote('127.0.0.{1,2}', numbers(10));\n+SELECT any(tuple(array(0, 1), tuple(2, 3), [4], (5, 'a'), 6, 'b')) AS k FROM remote('127.0.0.{1,2}', numbers(10));\n+SELECT any(array(number, 1)) AS k FROM remote('127.0.0.{1,2}', numbers(10));\n+SELECT any(tuple(number, 1)) AS k FROM remote('127.0.0.{1,2}', numbers(10));\n+SELECT any(array(array(0, 1), [2, 3])) AS k FROM remote('127.0.0.{1,2}', numbers(10));\n+SELECT any(array(array(0, 1), [number, number])) AS k FROM remote('127.0.0.{1,2}', numbers(10));\n+SELECT any([[[number]],[[number + 1], [number + 2, number + 3]]]) AS k FROM remote('127.0.0.{1,2}', numbers(10));\n",
  "problem_statement": "Exception when use function array in function multiIf\n**Describe what's wrong**\r\n\r\n> Using the function 'array' in the function 'multiIf' will get an Exception, but it can be executed normally using [] to replace the function 'array'.\r\n\r\n**How to reproduce**\r\n\r\n* Which ClickHouse server version to use\r\n```\r\nBased on the latest version: \r\nVERSION_DESCRIBE: v21.12.1.1-prestable\r\ncommit: 514120adfefd8836b8e0c9c6f89e878d5faf883e\r\n```\r\n* `CREATE TABLE` statements for all tables involved\r\n```\r\n# Create distributed tables and local tables on a cluster with two shards (test_2_0). \r\nCREATE TABLE default.test_array (`x` Nullable(String)) ENGINE = MergeTree ORDER BY tuple() SETTINGS index_granularity = 8192;\r\nCREATE TABLE default.test_array_all (`x` Nullable(String)) ENGINE = Distributed(test_2_0, default, test_array);\r\n```\r\n* Sample data for all these tables, use [clickhouse-obfuscator](https://github.com/ClickHouse/ClickHouse/blob/master/programs/obfuscator/Obfuscator.cpp#L42-L80) if necessary\r\n```\r\n# Insert data into two local tables.\r\nINSERT INTO default.test_array values (null, ''); \r\n```\r\n* Queries to run that lead to unexpected result\r\n```sql\r\n# Exception SQL:\r\nSELECT multiIf(x='a', array('a'), array()) FROM test_array_all\r\n# Normally SQL\r\nSELECT multiIf(x = 'a', ['a'], []) FROM test_array_all\r\n```\r\n\r\n**Expected behavior**\r\n\r\n> Non Exception.\r\n\r\n**Error message and/or stacktrace**\r\n\r\n```\r\nReceived exception from server (version 21.12.1):\r\nCode: 10. DB::Exception: Received from localhost:9020. DB::Exception: Not found column multiIf(equals(x, 'a'), array('a'), array()) inblock. There are only columns: multiIf(equals(x, 'a'), ['a'], array()): While executing Remote. Stack trace:\r\n\r\n0. ./build/../contrib/libcxx/include/exception:133: Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x143bb14c in /data01/yuanquan/community_clickhouse/build/programs/clickhouse\r\n1. ./build/../src/Common/Exception.cpp:57: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0x9e972fa in /data01/yuanquan/community_clickhouse/build/programs/clickhouse\r\n2. ./build/../src/Core/Block.cpp:0: DB::Block::getByName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const @ 0x10e681d7 in /data01/yuanquan/community_clickhouse/build/programs/clickhouse\r\n3. ./build/../src/QueryPipeline/RemoteQueryExecutor.cpp:181: DB::RemoteQueryExecutor::processPacket(DB::Packet) @ 0x1102d49c in /data01/yuanquan/community_clickhouse/build/programs/clickhouse\r\n4. ./build/../contrib/libcxx/include/vector:463: DB::RemoteQueryExecutor::read(std::__1::unique_ptr<DB::RemoteQueryExecutorReadContext, std::__1::default_delete<DB::RemoteQueryExecutorReadContext> >&) @ 0x1102e588 in /data01/yuanquan/community_clickhouse/build/programs/clickhouse\r\n5. ./build/../contrib/libcxx/include/variant:700: DB::RemoteSource::tryGenerate() @ 0x123271df in /data01/yuanquan/community_clickhouse/build/programs/clickhouse\r\n6. ./build/../contrib/libcxx/include/optional:295: DB::ISource::work() @ 0x121768ba in /data01/yuanquan/community_clickhouse/build/programs/clickhouse\r\n7. ./build/../src/Processors/Sources/SourceWithProgress.cpp:67: DB::SourceWithProgress::work() @ 0x1232a316 in /data01/yuanquan/community_clickhouse/build/programs/clickhouse\r\n8. ./build/../src/Processors/Executors/ExecutionThreadContext.cpp:65: DB::ExecutionThreadContext::executeTask() @ 0x1218cd63 in /data01/yuanquan/community_clickhouse/build/programs/clickhouse\r\n9. ./build/../src/Processors/Executors/PipelineExecutor.cpp:213: DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*) @ 0x121888e0 in /data01/yuanquan/community_clickhouse/build/programs/clickhouse\r\n10. ./build/../contrib/libcxx/include/memory:2851: void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PipelineExecutor::executeImpl(unsigned long)::$_1>(DB::PipelineExecutor::executeImpl(unsigned long)::$_1&&)::'lambda'(), void ()> >(std::__1::__function::__policy_storage const*) @ 0x121899e8 in /data01/yuanquan/community_clickhouse/build/programs/clickhouse\r\n11. ./build/../contrib/libcxx/include/functional:2210: ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x9ecb530 in /data01/yuanquan/community_clickhouse/build/programs/clickhouse\r\n12. ./build/../contrib/libcxx/include/memory:1655: void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda0'()> >(void*) @ 0x9ecd933 in /data01/yuanquan/community_clickhouse/build/programs/clickhouse\r\n13. start_thread @ 0x74a4 in /lib/x86_64-linux-gnu/libpthread-2.24.so\r\n14. __clone @ 0xe8d0f in /lib/x86_64-linux-gnu/libc-2.24.so\r\n. (NOT_FOUND_COLUMN_IN_BLOCK)\r\n```\n",
  "hints_text": "`SELECT any(array(0)) AS k FROM remote('127.0.0.{1,2}', numbers(10))`\n`SELECT any(tuple(0, 1)) AS k FROM remote('127.0.0.{1,2}', numbers(10))`",
  "created_at": "2022-01-24T07:50:45Z",
  "modified_files": [
    "src/Parsers/ASTFunction.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02183_array_tuple_literals_remote.reference",
    "b/tests/queries/0_stateless/02183_array_tuple_literals_remote.sql"
  ]
}