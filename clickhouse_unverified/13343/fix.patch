diff --git a/src/Processors/Formats/IOutputFormat.cpp b/src/Processors/Formats/IOutputFormat.cpp
index f7fc6170cad3..76920c0fa533 100644
--- a/src/Processors/Formats/IOutputFormat.cpp
+++ b/src/Processors/Formats/IOutputFormat.cpp
@@ -46,6 +46,12 @@ IOutputFormat::Status IOutputFormat::prepare()
 
 void IOutputFormat::work()
 {
+    if (!prefix_written)
+    {
+        doWritePrefix();
+        prefix_written = true;
+    }
+
     if (finished && !finalized)
     {
         if (rows_before_limit_counter && rows_before_limit_counter->hasAppliedLimit())
diff --git a/src/Processors/Formats/IOutputFormat.h b/src/Processors/Formats/IOutputFormat.h
index bab746c1772f..67c307df2aa8 100644
--- a/src/Processors/Formats/IOutputFormat.h
+++ b/src/Processors/Formats/IOutputFormat.h
@@ -87,6 +87,8 @@ class IOutputFormat : public IProcessor
     /// Counters for consumed chunks. Are used for QueryLog.
     size_t result_rows = 0;
     size_t result_bytes = 0;
+
+    bool prefix_written = false;
 };
 }
 
diff --git a/src/Processors/Formats/Impl/TabSeparatedRowOutputFormat.cpp b/src/Processors/Formats/Impl/TabSeparatedRowOutputFormat.cpp
index 1c493cd1ab42..95377c13b55a 100644
--- a/src/Processors/Formats/Impl/TabSeparatedRowOutputFormat.cpp
+++ b/src/Processors/Formats/Impl/TabSeparatedRowOutputFormat.cpp
@@ -18,7 +18,7 @@ TabSeparatedRowOutputFormat::TabSeparatedRowOutputFormat(
 }
 
 
-void TabSeparatedRowOutputFormat::writePrefix()
+void TabSeparatedRowOutputFormat::doWritePrefix()
 {
     const auto & header = getPort(PortKind::Main).getHeader();
     size_t columns = header.columns();
diff --git a/src/Processors/Formats/Impl/TabSeparatedRowOutputFormat.h b/src/Processors/Formats/Impl/TabSeparatedRowOutputFormat.h
index 3d3f82e7833d..137ffde4b185 100644
--- a/src/Processors/Formats/Impl/TabSeparatedRowOutputFormat.h
+++ b/src/Processors/Formats/Impl/TabSeparatedRowOutputFormat.h
@@ -31,10 +31,11 @@ class TabSeparatedRowOutputFormat : public IRowOutputFormat
     void writeField(const IColumn & column, const IDataType & type, size_t row_num) override;
     void writeFieldDelimiter() override;
     void writeRowEndDelimiter() override;
-    void writePrefix() override;
     void writeBeforeTotals() override;
     void writeBeforeExtremes() override;
 
+    void doWritePrefix() override;
+
     /// https://www.iana.org/assignments/media-types/text/tab-separated-values
     String getContentType() const override { return "text/tab-separated-values; charset=UTF-8"; }
 
diff --git a/src/Processors/Sources/SinkToOutputStream.cpp b/src/Processors/Sources/SinkToOutputStream.cpp
index 29619dff463f..9727b637d8bb 100644
--- a/src/Processors/Sources/SinkToOutputStream.cpp
+++ b/src/Processors/Sources/SinkToOutputStream.cpp
@@ -8,15 +8,11 @@ SinkToOutputStream::SinkToOutputStream(BlockOutputStreamPtr stream_)
     : ISink(stream_->getHeader())
     , stream(std::move(stream_))
 {
+    stream->writePrefix();
 }
 
 void SinkToOutputStream::consume(Chunk chunk)
 {
-    if (!initialized)
-        stream->writePrefix();
-
-    initialized = true;
-
     stream->write(getPort().getHeader().cloneWithColumns(chunk.detachColumns()));
 }
 
diff --git a/src/Processors/Sources/SinkToOutputStream.h b/src/Processors/Sources/SinkToOutputStream.h
index 037cee0085d7..5362608551f5 100644
--- a/src/Processors/Sources/SinkToOutputStream.h
+++ b/src/Processors/Sources/SinkToOutputStream.h
@@ -22,7 +22,6 @@ class SinkToOutputStream : public ISink
 
 private:
     BlockOutputStreamPtr stream;
-    bool initialized = false;
 };
 
 }
