{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 13343,
  "instance_id": "ClickHouse__ClickHouse-13343",
  "issue_numbers": [
    "12504"
  ],
  "base_commit": "604b918d44bd53ed7a64b4df885094e2c2add8f4",
  "patch": "diff --git a/src/Processors/Formats/IOutputFormat.cpp b/src/Processors/Formats/IOutputFormat.cpp\nindex f7fc6170cad3..76920c0fa533 100644\n--- a/src/Processors/Formats/IOutputFormat.cpp\n+++ b/src/Processors/Formats/IOutputFormat.cpp\n@@ -46,6 +46,12 @@ IOutputFormat::Status IOutputFormat::prepare()\n \n void IOutputFormat::work()\n {\n+    if (!prefix_written)\n+    {\n+        doWritePrefix();\n+        prefix_written = true;\n+    }\n+\n     if (finished && !finalized)\n     {\n         if (rows_before_limit_counter && rows_before_limit_counter->hasAppliedLimit())\ndiff --git a/src/Processors/Formats/IOutputFormat.h b/src/Processors/Formats/IOutputFormat.h\nindex bab746c1772f..67c307df2aa8 100644\n--- a/src/Processors/Formats/IOutputFormat.h\n+++ b/src/Processors/Formats/IOutputFormat.h\n@@ -87,6 +87,8 @@ class IOutputFormat : public IProcessor\n     /// Counters for consumed chunks. Are used for QueryLog.\n     size_t result_rows = 0;\n     size_t result_bytes = 0;\n+\n+    bool prefix_written = false;\n };\n }\n \ndiff --git a/src/Processors/Formats/Impl/TabSeparatedRowOutputFormat.cpp b/src/Processors/Formats/Impl/TabSeparatedRowOutputFormat.cpp\nindex 1c493cd1ab42..95377c13b55a 100644\n--- a/src/Processors/Formats/Impl/TabSeparatedRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/TabSeparatedRowOutputFormat.cpp\n@@ -18,7 +18,7 @@ TabSeparatedRowOutputFormat::TabSeparatedRowOutputFormat(\n }\n \n \n-void TabSeparatedRowOutputFormat::writePrefix()\n+void TabSeparatedRowOutputFormat::doWritePrefix()\n {\n     const auto & header = getPort(PortKind::Main).getHeader();\n     size_t columns = header.columns();\ndiff --git a/src/Processors/Formats/Impl/TabSeparatedRowOutputFormat.h b/src/Processors/Formats/Impl/TabSeparatedRowOutputFormat.h\nindex 3d3f82e7833d..137ffde4b185 100644\n--- a/src/Processors/Formats/Impl/TabSeparatedRowOutputFormat.h\n+++ b/src/Processors/Formats/Impl/TabSeparatedRowOutputFormat.h\n@@ -31,10 +31,11 @@ class TabSeparatedRowOutputFormat : public IRowOutputFormat\n     void writeField(const IColumn & column, const IDataType & type, size_t row_num) override;\n     void writeFieldDelimiter() override;\n     void writeRowEndDelimiter() override;\n-    void writePrefix() override;\n     void writeBeforeTotals() override;\n     void writeBeforeExtremes() override;\n \n+    void doWritePrefix() override;\n+\n     /// https://www.iana.org/assignments/media-types/text/tab-separated-values\n     String getContentType() const override { return \"text/tab-separated-values; charset=UTF-8\"; }\n \ndiff --git a/src/Processors/Sources/SinkToOutputStream.cpp b/src/Processors/Sources/SinkToOutputStream.cpp\nindex 29619dff463f..9727b637d8bb 100644\n--- a/src/Processors/Sources/SinkToOutputStream.cpp\n+++ b/src/Processors/Sources/SinkToOutputStream.cpp\n@@ -8,15 +8,11 @@ SinkToOutputStream::SinkToOutputStream(BlockOutputStreamPtr stream_)\n     : ISink(stream_->getHeader())\n     , stream(std::move(stream_))\n {\n+    stream->writePrefix();\n }\n \n void SinkToOutputStream::consume(Chunk chunk)\n {\n-    if (!initialized)\n-        stream->writePrefix();\n-\n-    initialized = true;\n-\n     stream->write(getPort().getHeader().cloneWithColumns(chunk.detachColumns()));\n }\n \ndiff --git a/src/Processors/Sources/SinkToOutputStream.h b/src/Processors/Sources/SinkToOutputStream.h\nindex 037cee0085d7..5362608551f5 100644\n--- a/src/Processors/Sources/SinkToOutputStream.h\n+++ b/src/Processors/Sources/SinkToOutputStream.h\n@@ -22,7 +22,6 @@ class SinkToOutputStream : public ISink\n \n private:\n     BlockOutputStreamPtr stream;\n-    bool initialized = false;\n };\n \n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01375_output_format_tsv_csv_with_names.reference b/tests/queries/0_stateless/01375_output_format_tsv_csv_with_names.reference\nnew file mode 100644\nindex 000000000000..6f1974ccd73d\n--- /dev/null\n+++ b/tests/queries/0_stateless/01375_output_format_tsv_csv_with_names.reference\n@@ -0,0 +1,13 @@\n+TSVWithNames\n+number\n+0\n+1\n+TSVWithNamesAndTypes\n+number\n+UInt64\n+0\n+1\n+CSVWithNames\n+\"number\"\n+0\n+1\ndiff --git a/tests/queries/0_stateless/01375_output_format_tsv_csv_with_names.sh b/tests/queries/0_stateless/01375_output_format_tsv_csv_with_names.sh\nnew file mode 100755\nindex 000000000000..de4486a88a5c\n--- /dev/null\n+++ b/tests/queries/0_stateless/01375_output_format_tsv_csv_with_names.sh\n@@ -0,0 +1,18 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+. \"$CURDIR\"/../shell_config.sh\n+\n+opts=(\n+    --input-format CSV\n+    -q 'SELECT number FROM numbers(2)'\n+)\n+\n+echo 'TSVWithNames'\n+${CLICKHOUSE_LOCAL} \"${opts[@]}\" --format TSVWithNames\n+\n+echo 'TSVWithNamesAndTypes'\n+${CLICKHOUSE_LOCAL} \"${opts[@]}\" --format TSVWithNamesAndTypes\n+\n+echo 'CSVWithNames'\n+${CLICKHOUSE_LOCAL} \"${opts[@]}\" --format CSVWithNames\ndiff --git a/tests/queries/0_stateless/01375_storage_file_tsv_csv_with_names_write_prefix.reference b/tests/queries/0_stateless/01375_storage_file_tsv_csv_with_names_write_prefix.reference\nnew file mode 100644\nindex 000000000000..4f2a79b99059\n--- /dev/null\n+++ b/tests/queries/0_stateless/01375_storage_file_tsv_csv_with_names_write_prefix.reference\n@@ -0,0 +1,17 @@\n+zero rows\n+TSVWithNames\n+TSVWithNamesAndTypes\n+CSVWithNames\n+multi clickhouse-local one file\n+TSVWithNames\n+0\n+0\n+0\n+TSVWithNamesAndTypes\n+0\n+0\n+0\n+CSVWithNames\n+0\n+0\n+0\ndiff --git a/tests/queries/0_stateless/01375_storage_file_tsv_csv_with_names_write_prefix.sh b/tests/queries/0_stateless/01375_storage_file_tsv_csv_with_names_write_prefix.sh\nnew file mode 100755\nindex 000000000000..d396981f873c\n--- /dev/null\n+++ b/tests/queries/0_stateless/01375_storage_file_tsv_csv_with_names_write_prefix.sh\n@@ -0,0 +1,30 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+. \"$CURDIR\"/../shell_config.sh\n+\n+# zero rows\n+echo 'zero rows'\n+for format in TSVWithNames TSVWithNamesAndTypes CSVWithNames; do\n+    echo $format\n+    ${CLICKHOUSE_LOCAL} --query=\"\n+        CREATE TABLE ${format}_01375 ENGINE File($format, '01375_$format.tsv') AS SELECT * FROM numbers(1) WHERE number < 0;\n+        SELECT * FROM ${format}_01375;\n+        DROP TABLE ${format}_01375;\n+    \"\n+    rm 01375_$format.tsv\n+done\n+\n+# run multiple times to the same file\n+echo 'multi clickhouse-local one file'\n+for format in TSVWithNames TSVWithNamesAndTypes CSVWithNames; do\n+    echo $format\n+    for _ in {1..2}; do\n+        ${CLICKHOUSE_LOCAL} --query=\"\n+            CREATE TABLE ${format}_01375 ENGINE File($format, '01375_$format.tsv') AS SELECT * FROM numbers(1);\n+            SELECT * FROM ${format}_01375;\n+            DROP TABLE ${format}_01375;\n+        \"\n+    done\n+    rm 01375_$format.tsv\n+done\ndiff --git a/tests/queries/0_stateless/01375_storage_file_write_prefix.reference b/tests/queries/0_stateless/01375_storage_file_write_prefix_csv_with_names.reference\nsimilarity index 100%\nrename from tests/queries/0_stateless/01375_storage_file_write_prefix.reference\nrename to tests/queries/0_stateless/01375_storage_file_write_prefix_csv_with_names.reference\ndiff --git a/tests/queries/0_stateless/01375_storage_file_write_prefix.sql b/tests/queries/0_stateless/01375_storage_file_write_prefix_csv_with_names.sql\nsimilarity index 100%\nrename from tests/queries/0_stateless/01375_storage_file_write_prefix.sql\nrename to tests/queries/0_stateless/01375_storage_file_write_prefix_csv_with_names.sql\ndiff --git a/tests/queries/0_stateless/01375_storage_file_write_prefix_tsv_with_names.reference b/tests/queries/0_stateless/01375_storage_file_write_prefix_tsv_with_names.reference\nnew file mode 100644\nindex 000000000000..ed9a18b93463\n--- /dev/null\n+++ b/tests/queries/0_stateless/01375_storage_file_write_prefix_tsv_with_names.reference\n@@ -0,0 +1,30 @@\n+0\t0\n+1\t1\n+2\t2\n+3\t3\n+4\t4\n+5\t5\n+6\t6\n+7\t7\n+8\t8\n+9\t9\n+0\t0\n+1\t1\n+2\t2\n+3\t3\n+4\t4\n+5\t5\n+6\t6\n+7\t7\n+8\t8\n+9\t9\n+0\t0\n+1\t1\n+2\t2\n+3\t3\n+4\t4\n+5\t5\n+6\t6\n+7\t7\n+8\t8\n+9\t9\ndiff --git a/tests/queries/0_stateless/01375_storage_file_write_prefix_tsv_with_names.sql b/tests/queries/0_stateless/01375_storage_file_write_prefix_tsv_with_names.sql\nnew file mode 100644\nindex 000000000000..55a97eb6e957\n--- /dev/null\n+++ b/tests/queries/0_stateless/01375_storage_file_write_prefix_tsv_with_names.sql\n@@ -0,0 +1,14 @@\n+DROP TABLE IF EXISTS tmp_01375;\n+DROP TABLE IF EXISTS table_tsv_01375;\n+\n+CREATE TABLE tmp_01375 (n UInt32, s String) ENGINE = Memory;\n+CREATE TABLE table_tsv_01375 AS tmp_01375 ENGINE = File(TSVWithNames);\n+\n+INSERT INTO table_tsv_01375 SELECT number as n, toString(n) as s FROM numbers(10);\n+INSERT INTO table_tsv_01375 SELECT number as n, toString(n) as s FROM numbers(10);\n+INSERT INTO table_tsv_01375 SELECT number as n, toString(n) as s FROM numbers(10);\n+\n+SELECT * FROM table_tsv_01375;\n+\n+DROP TABLE IF EXISTS tmp_01375;\n+DROP TABLE IF EXISTS table_tsv_01375;\n",
  "problem_statement": "CSVWithNames via HTTP lacks header row on 20.4.7.67\n**Describe the bug**\r\nWhen using the HTTP interface, the CSVWithNames result format looks like just CSV, lacking the header row. It behaves properly via `clickhouse-client` though.\r\n\r\n**How to reproduce**\r\n```bash\r\n~$ echo \"select * from system.build_options\r\n> where name='VERSION_DESCRIBE' format CSVWithNames\" |\r\n> curl localhost:8123 --data-binary @-\r\n\"VERSION_DESCRIBE\",\"v20.4.7.67-stable\"\r\n```\r\n```sql\r\nhost :) select * from system.build_options where name='VERSION_DESCRIBE' format CSVWithNames\r\n\r\nSELECT *\r\nFROM system.build_options\r\nWHERE name = 'VERSION_DESCRIBE'\r\nFORMAT CSVWithNames\r\n\r\n\"name\",\"value\"\r\n\"VERSION_DESCRIBE\",\"v20.4.7.67-stable\"\r\n```\r\n\r\n**Expected behavior**\r\nThe two results should match, and both have the header row with field names.\r\n\r\n**Additional context**\r\nTSVWithNames seems to work OK on both interfaces. Both were working on the last 20.4.6... version.\r\n\n",
  "hints_text": "",
  "created_at": "2020-08-04T21:23:07Z",
  "modified_files": [
    "src/Processors/Formats/IOutputFormat.cpp",
    "src/Processors/Formats/IOutputFormat.h",
    "src/Processors/Formats/Impl/TabSeparatedRowOutputFormat.cpp",
    "src/Processors/Formats/Impl/TabSeparatedRowOutputFormat.h",
    "src/Processors/Sources/SinkToOutputStream.cpp",
    "src/Processors/Sources/SinkToOutputStream.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01375_output_format_tsv_csv_with_names.reference",
    "b/tests/queries/0_stateless/01375_output_format_tsv_csv_with_names.sh",
    "b/tests/queries/0_stateless/01375_storage_file_tsv_csv_with_names_write_prefix.reference",
    "b/tests/queries/0_stateless/01375_storage_file_tsv_csv_with_names_write_prefix.sh",
    "b/tests/queries/0_stateless/01375_storage_file_write_prefix_tsv_with_names.reference",
    "b/tests/queries/0_stateless/01375_storage_file_write_prefix_tsv_with_names.sql"
  ]
}