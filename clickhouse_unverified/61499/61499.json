{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 61499,
  "instance_id": "ClickHouse__ClickHouse-61499",
  "issue_numbers": [
    "60268"
  ],
  "base_commit": "f53f3cd833db545d31cd3b5ad3973fddd4791438",
  "patch": "diff --git a/CMakeLists.txt b/CMakeLists.txt\nindex eff6dd3ff6af..8c4e16eace2b 100644\n--- a/CMakeLists.txt\n+++ b/CMakeLists.txt\n@@ -110,11 +110,6 @@ endif()\n # - sanitize.cmake\n add_library(global-libs INTERFACE)\n \n-# We don't want to instrument everything with fuzzer, but only specific targets (see below),\n-# also, since we build our own llvm, we specifically don't want to instrument\n-# libFuzzer library itself - it would result in infinite recursion\n-#include (cmake/fuzzer.cmake)\n-\n include (cmake/sanitize.cmake)\n \n option(ENABLE_COLORED_BUILD \"Enable colors in compiler output\" ON)\n@@ -554,7 +549,9 @@ if (ENABLE_RUST)\n     endif()\n endif()\n \n-if (CMAKE_BUILD_TYPE_UC STREQUAL \"RELWITHDEBINFO\" AND NOT SANITIZE AND NOT SANITIZE_COVERAGE AND OS_LINUX AND (ARCH_AMD64 OR ARCH_AARCH64))\n+if (CMAKE_BUILD_TYPE_UC STREQUAL \"RELWITHDEBINFO\"\n+    AND NOT SANITIZE AND NOT SANITIZE_COVERAGE AND NOT ENABLE_FUZZING\n+    AND OS_LINUX AND (ARCH_AMD64 OR ARCH_AARCH64))\n     set(CHECK_LARGE_OBJECT_SIZES_DEFAULT ON)\n else ()\n     set(CHECK_LARGE_OBJECT_SIZES_DEFAULT OFF)\n@@ -577,10 +574,7 @@ if (FUZZER)\n             if (NOT(target_type STREQUAL \"INTERFACE_LIBRARY\" OR target_type STREQUAL \"UTILITY\"))\n                 target_compile_options(${target} PRIVATE \"-fsanitize=fuzzer-no-link\")\n             endif()\n-            # clickhouse fuzzer isn't working correctly\n-            # initial PR https://github.com/ClickHouse/ClickHouse/pull/27526\n-            #if (target MATCHES \".+_fuzzer\" OR target STREQUAL \"clickhouse\")\n-            if (target_type STREQUAL \"EXECUTABLE\" AND target MATCHES \".+_fuzzer\")\n+            if (target_type STREQUAL \"EXECUTABLE\" AND (target MATCHES \".+_fuzzer\" OR target STREQUAL \"clickhouse\"))\n                 message(STATUS \"${target} instrumented with fuzzer\")\n                 target_link_libraries(${target} PUBLIC ch_contrib::fuzzer)\n                 # Add to fuzzers bundle\ndiff --git a/cmake/fuzzer.cmake b/cmake/fuzzer.cmake\ndeleted file mode 100644\nindex dd0c4b080fe3..000000000000\n--- a/cmake/fuzzer.cmake\n+++ /dev/null\n@@ -1,17 +0,0 @@\n-# see ./CMakeLists.txt for variable declaration\n-if (FUZZER)\n-    if (FUZZER STREQUAL \"libfuzzer\")\n-        # NOTE: Eldar Zaitov decided to name it \"libfuzzer\" instead of \"fuzzer\" to keep in mind another possible fuzzer backends.\n-        # NOTE: no-link means that all the targets are built with instrumentation for fuzzer, but only some of them\n-        # (tests) have entry point for fuzzer and it's not checked.\n-        set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${SAN_FLAGS} -fsanitize=fuzzer-no-link -DFUZZER=1\")\n-        set (CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${SAN_FLAGS} -fsanitize=fuzzer-no-link -DFUZZER=1\")\n-\n-        # NOTE: oss-fuzz can change LIB_FUZZING_ENGINE variable\n-        if (NOT LIB_FUZZING_ENGINE)\n-            set (LIB_FUZZING_ENGINE \"-fsanitize=fuzzer\")\n-        endif ()\n-    else ()\n-        message (FATAL_ERROR \"Unknown fuzzer type: ${FUZZER}\")\n-    endif ()\n-endif()\ndiff --git a/programs/local/LocalServer.cpp b/programs/local/LocalServer.cpp\nindex 50f9c2427127..10fbda0fe46f 100644\n--- a/programs/local/LocalServer.cpp\n+++ b/programs/local/LocalServer.cpp\n@@ -1000,12 +1000,6 @@ extern \"C\" int LLVMFuzzerInitialize(int * pargc, char *** pargv)\n {\n     std::vector<char *> argv(*pargv, *pargv + (*pargc + 1));\n \n-    if (!isClickhouseApp(\"local\", argv))\n-    {\n-        std::cerr << \"\\033[31m\" << \"ClickHouse compiled in fuzzing mode, only clickhouse local is available.\" << \"\\033[0m\" << std::endl;\n-        exit(1);\n-    }\n-\n     /// As a user you can add flags to clickhouse binary in fuzzing mode as follows\n     /// clickhouse local <set of clickhouse-local specific flag> -- <set of libfuzzer flags>\n \ndiff --git a/programs/main.cpp b/programs/main.cpp\nindex c5f1b30f60e6..0a35594bd30f 100644\n--- a/programs/main.cpp\n+++ b/programs/main.cpp\n@@ -68,7 +68,6 @@ namespace\n using MainFunc = int (*)(int, char**);\n \n #if !defined(FUZZING_MODE)\n-\n /// Add an item here to register new application\n std::pair<std::string_view, MainFunc> clickhouse_applications[] =\n {\n@@ -105,13 +104,6 @@ std::pair<std::string_view, MainFunc> clickhouse_applications[] =\n     {\"restart\", mainEntryClickHouseRestart},\n };\n \n-/// Add an item here to register a new short name\n-std::pair<std::string_view, std::string_view> clickhouse_short_names[] =\n-{\n-    {\"chl\", \"local\"},\n-    {\"chc\", \"client\"},\n-};\n-\n int printHelp(int, char **)\n {\n     std::cerr << \"Use one of the following commands:\" << std::endl;\n@@ -121,6 +113,13 @@ int printHelp(int, char **)\n }\n #endif\n \n+/// Add an item here to register a new short name\n+std::pair<std::string_view, std::string_view> clickhouse_short_names[] =\n+{\n+    {\"chl\", \"local\"},\n+    {\"chc\", \"client\"},\n+};\n+\n \n enum class InstructionFail\n {\ndiff --git a/src/AggregateFunctions/fuzzers/aggregate_function_state_deserialization_fuzzer.cpp b/src/AggregateFunctions/fuzzers/aggregate_function_state_deserialization_fuzzer.cpp\nindex 290da81944df..425364efb9c2 100644\n--- a/src/AggregateFunctions/fuzzers/aggregate_function_state_deserialization_fuzzer.cpp\n+++ b/src/AggregateFunctions/fuzzers/aggregate_function_state_deserialization_fuzzer.cpp\n@@ -27,6 +27,9 @@ extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t * data, size_t size)\n \n         auto initialize = [&]() mutable\n         {\n+            if (context)\n+                return true;\n+\n             shared_context = Context::createShared();\n             context = Context::createGlobal(shared_context.get());\n             context->makeGlobalContext();\ndiff --git a/src/DataTypes/fuzzers/data_type_deserialization_fuzzer.cpp b/src/DataTypes/fuzzers/data_type_deserialization_fuzzer.cpp\nindex e40734e0a57e..0ae325871fb1 100644\n--- a/src/DataTypes/fuzzers/data_type_deserialization_fuzzer.cpp\n+++ b/src/DataTypes/fuzzers/data_type_deserialization_fuzzer.cpp\n@@ -24,6 +24,9 @@ extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t * data, size_t size)\n \n         auto initialize = [&]() mutable\n         {\n+            if (context)\n+                return true;\n+\n             shared_context = Context::createShared();\n             context = Context::createGlobal(shared_context.get());\n             context->makeGlobalContext();\ndiff --git a/src/Formats/fuzzers/format_fuzzer.cpp b/src/Formats/fuzzers/format_fuzzer.cpp\nindex 583d1173a014..46661e4828cd 100644\n--- a/src/Formats/fuzzers/format_fuzzer.cpp\n+++ b/src/Formats/fuzzers/format_fuzzer.cpp\n@@ -32,6 +32,9 @@ extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t * data, size_t size)\n \n         auto initialize = [&]() mutable\n         {\n+            if (context)\n+                return true;\n+\n             shared_context = Context::createShared();\n             context = Context::createGlobal(shared_context.get());\n             context->makeGlobalContext();\ndiff --git a/src/Interpreters/AsynchronousMetricLog.cpp b/src/Interpreters/AsynchronousMetricLog.cpp\nindex f905f72e7a73..5cf7f951eece 100644\n--- a/src/Interpreters/AsynchronousMetricLog.cpp\n+++ b/src/Interpreters/AsynchronousMetricLog.cpp\n@@ -8,7 +8,6 @@\n #include <Interpreters/AsynchronousMetricLog.h>\n #include <Parsers/parseQuery.h>\n #include <Parsers/ExpressionElementParsers.h>\n-#include <Common/AsynchronousMetrics.h>\n \n \n namespace DB\ndiff --git a/src/Interpreters/fuzzers/execute_query_fuzzer.cpp b/src/Interpreters/fuzzers/execute_query_fuzzer.cpp\nindex edff202d5476..a02ce66e6b58 100644\n--- a/src/Interpreters/fuzzers/execute_query_fuzzer.cpp\n+++ b/src/Interpreters/fuzzers/execute_query_fuzzer.cpp\n@@ -25,6 +25,9 @@ extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t * data, size_t size)\n \n         auto initialize = [&]() mutable\n         {\n+            if (context)\n+                return true;\n+\n             shared_context = Context::createShared();\n             context = Context::createGlobal(shared_context.get());\n             context->makeGlobalContext();\n",
  "test_patch": "diff --git a/src/Common/tests/gtest_global_context.cpp b/src/Common/tests/gtest_global_context.cpp\nindex ec86c953c5b0..0c1556766a95 100644\n--- a/src/Common/tests/gtest_global_context.cpp\n+++ b/src/Common/tests/gtest_global_context.cpp\n@@ -10,9 +10,3 @@ ContextHolder & getMutableContext()\n     static ContextHolder holder;\n     return holder;\n }\n-\n-void destroyContext()\n-{\n-    auto & holder = getMutableContext();\n-    return holder.destroy();\n-}\ndiff --git a/src/Common/tests/gtest_global_context.h b/src/Common/tests/gtest_global_context.h\nindex f846a0dbe4f2..7ae8bb32f708 100644\n--- a/src/Common/tests/gtest_global_context.h\n+++ b/src/Common/tests/gtest_global_context.h\n@@ -28,5 +28,3 @@ struct ContextHolder\n const ContextHolder & getContext();\n \n ContextHolder & getMutableContext();\n-\n-void destroyContext();\n",
  "problem_statement": "Some of the fuzzing tests failed with errors\n**Describe the bug**\r\nThe following fuzzing tests failed with errors:\r\n#### data_type_deserialization_fuzzer\r\n```bash\r\n$ ch-fuzz/build/fuzzers/data_type_deserialization_fuzzer -rss_limit_mb=5560 -timeout=25 -seed=1337 -runs=4 -error_exitcode=78\r\nINFO: Running with entropic power schedule (0xFF, 100).\r\nINFO: Seed: 1337\r\nINFO: Loaded 1 modules   (2125499 inline 8-bit counters): 2125499 [0x563baf9e41e0, 0x563bafbeb09b),\r\nINFO: Loaded 1 PC tables (2125499 PCs): 2125499 [0x563bafbeb0a0,0x563bb1c59c50),\r\nINFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes\r\nINFO: A corpus is not provided, starting from an empty corpus\r\nAttempting to create multiple ContextShared instances. Stack trace:\r\n0. ./build/./src/Common/StackTrace.cpp:349: StackTrace::tryCapture() @ 0x0000000019ec2f7c in /home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/data_type_deserialization_fuzzer\r\n1. ./src/Common/StackTrace.h:0: DB::ContextSharedPart::ContextSharedPart() @ 0x000000000a77b97c in /home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/data_type_deserialization_fuzzer\r\n2. ./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:0: DB::Context::createShared() @ 0x000000000a6b27a9 in /home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/data_type_deserialization_fuzzer\r\n3. ./build/./src/DataTypes/fuzzers/data_type_deserialization_fuzzer.cpp:27: LLVMFuzzerTestOneInput::$_0::operator()() @ 0x0000000009f78bf7 in /home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/data_type_deserialization_fuzzer\r\n4. ./build/./src/DataTypes/fuzzers/data_type_deserialization_fuzzer.cpp:38: LLVMFuzzerTestOneInput @ 0x0000000009f78780 in /home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/data_type_deserialization_fuzzer\r\n5. ./build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:0: fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) @ 0x000000001954f0dd in /home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/data_type_deserialization_fuzzer\r\n6. ./build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:514: fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool, bool*) @ 0x000000001954d393 in /home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/data_type_deserialization_fuzzer\r\n7. ./build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:810: fuzzer::Fuzzer::ReadAndExecuteSeedCorpora(std::vector<fuzzer::SizedFile, std::allocator<fuzzer::SizedFile>>&) @ 0x0000000019553753 in /home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/data_type_deserialization_fuzzer\r\n8. ./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerDataFlowTrace.h:121: fuzzer::Fuzzer::Loop(std::vector<fuzzer::SizedFile, std::allocator<fuzzer::SizedFile>>&) @ 0x0000000019554831 in /home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/data_type_deserialization_fuzzer\r\n9. ./build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:914: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) @ 0x0000000019530b8e in /home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/data_type_deserialization_fuzzer\r\n10. ./build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20: main @ 0x0000000019523a88 in /home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/data_type_deserialization_fuzzer\r\n11. ? @ 0x00007fa361661d90\r\n12. ? @ 0x00007fa361661e40\r\n13. _start @ 0x0000000009ea7b2e in /home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/data_type_deserialization_fuzzer\r\nlibc++abi: terminating\r\n==31499== ERROR: libFuzzer: deadly signal\r\n    #0 0x563b9b03e321 in __sanitizer_print_stack_trace (/home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/data_type_deserialization_fuzzer+0x9f4a321) (BuildId: 2f04e3bfd24d6f9cc848461e41dc031af7c7b589)\r\n    #1 0x563baa662077 in fuzzer::PrintStackTrace() build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerUtil.cpp:210:5\r\n    #2 0x563baa63e48a in fuzzer::Fuzzer::CrashCallback() build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:233:3\r\n    #3 0x7fa36167a51f  (/lib/x86_64-linux-gnu/libc.so.6+0x4251f) (BuildId: c289da5071a3399de893d2af81d6a30c62646e1e)\r\n    #4 0x7fa3616ce9fb in pthread_kill (/lib/x86_64-linux-gnu/libc.so.6+0x969fb) (BuildId: c289da5071a3399de893d2af81d6a30c62646e1e)\r\n    #5 0x7fa36167a475 in gsignal (/lib/x86_64-linux-gnu/libc.so.6+0x42475) (BuildId: c289da5071a3399de893d2af81d6a30c62646e1e)\r\n    #6 0x7fa3616607f2 in abort (/lib/x86_64-linux-gnu/libc.so.6+0x287f2) (BuildId: c289da5071a3399de893d2af81d6a30c62646e1e)\r\n    #7 0x563bac1ad560 in abort_message build/./contrib/llvm-project/libcxxabi/src/abort_message.cpp:78:5\r\n    #8 0x563bac1ad996 in demangling_terminate_handler() build/./contrib/llvm-project/libcxxabi/src/cxa_default_handlers.cpp\r\n    #9 0x563bac1ad790 in std::__terminate(void (*)()) build/./contrib/llvm-project/libcxxabi/src/cxa_handlers.cpp:59:9\r\n    #10 0x563bac1ad68f in std::terminate() build/./contrib/llvm-project/libcxxabi/src/cxa_handlers.cpp\r\n    #11 0x563b9b86fa0c in DB::ContextSharedPart::ContextSharedPart() build/./src/Interpreters/Context.cpp:429:13\r\n    #12 0x563b9b7a67a8 in std::__1::__unique_if<DB::ContextSharedPart>::__unique_single std::__1::make_unique[abi:v15000]<DB::ContextSharedPart>() build/./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:714:32\r\n    #13 0x563b9b7a67a8 in DB::Context::createShared() build/./src/Interpreters/Context.cpp:810:32\r\n    #14 0x563b9b06cbf6 in LLVMFuzzerTestOneInput::$_0::operator()() build/./src/DataTypes/fuzzers/data_type_deserialization_fuzzer.cpp:27:30\r\n    #15 0x563b9b06c77f in LLVMFuzzerTestOneInput build/./src/DataTypes/fuzzers/data_type_deserialization_fuzzer.cpp:38:35\r\n    #16 0x563baa6430dc in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:612:13\r\n    #17 0x563baa641392 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool, bool*) build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:514:7\r\n    #18 0x563baa647752 in fuzzer::Fuzzer::ReadAndExecuteSeedCorpora(std::__1::vector<fuzzer::SizedFile, std::__1::allocator<fuzzer::SizedFile>>&) build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:810:5\r\n    #19 0x563baa648830 in fuzzer::Fuzzer::Loop(std::__1::vector<fuzzer::SizedFile, std::__1::allocator<fuzzer::SizedFile>>&) build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:865:3\r\n    #20 0x563baa624b8d in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:912:6\r\n    #21 0x563baa617a87 in main build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10\r\n    #22 0x7fa361661d8f  (/lib/x86_64-linux-gnu/libc.so.6+0x29d8f) (BuildId: c289da5071a3399de893d2af81d6a30c62646e1e)\r\n    #23 0x7fa361661e3f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e3f) (BuildId: c289da5071a3399de893d2af81d6a30c62646e1e)\r\n    #24 0x563b9af9bb2d in _start (/home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/data_type_deserialization_fuzzer+0x9ea7b2d) (BuildId: 2f04e3bfd24d6f9cc848461e41dc031af7c7b589)\r\n\r\nNOTE: libFuzzer has rudimentary signal handlers.\r\n      Combine libFuzzer with AddressSanitizer or similar for better crash reports.\r\nSUMMARY: libFuzzer: deadly signal\r\nMS: 0 ; base unit: 0000000000000000000000000000000000000000\r\n0xa,\r\n\\012\r\nartifact_prefix='./'; Test unit written to ./crash-adc83b19e793491b1c6ea0fd8b46cd9f32e592fc\r\nBase64: Cg==\r\n```\r\n\r\n#### format_fuzzer\r\n```bash\r\n$ ch-fuzz/build/fuzzers/format_fuzzer -rss_limit_mb=5560 -timeout=25 -seed=1337 -runs=4 -error_exitcode=78\r\nINFO: Running with entropic power schedule (0xFF, 100).\r\nINFO: Seed: 1337\r\nINFO: Loaded 1 modules   (2203877 inline 8-bit counters): 2203877 [0x555f7ba51448, 0x555f7bc6b52d),\r\nINFO: Loaded 1 PC tables (2203877 PCs): 2203877 [0x555f7bc6b530,0x555f7de0c380),\r\nINFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes\r\nINFO: A corpus is not provided, starting from an empty corpus\r\nAttempting to create multiple ContextShared instances. Stack trace:\r\n0. ./build/./src/Common/StackTrace.cpp:349: StackTrace::tryCapture() @ 0x000000001acb8a9c in /home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/format_fuzzer\r\n1. ./src/Common/StackTrace.h:0: DB::ContextSharedPart::ContextSharedPart() @ 0x000000000d6824fc in /home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/format_fuzzer\r\n2. ./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:0: DB::Context::createShared() @ 0x000000000d5c2f29 in /home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/format_fuzzer\r\n3. ./build/./src/Formats/fuzzers/format_fuzzer.cpp:35: LLVMFuzzerTestOneInput::$_0::operator()() @ 0x000000000a8d59f7 in /home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/format_fuzzer\r\n4. ./build/./src/Formats/fuzzers/format_fuzzer.cpp:48: LLVMFuzzerTestOneInput @ 0x000000000a8d526e in /home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/format_fuzzer\r\n5. ./build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:0: fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) @ 0x000000001a2dee5d in /home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/format_fuzzer\r\n6. ./build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:514: fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool, bool*) @ 0x000000001a2dd113 in /home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/format_fuzzer\r\n7. ./build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:810: fuzzer::Fuzzer::ReadAndExecuteSeedCorpora(std::vector<fuzzer::SizedFile, std::allocator<fuzzer::SizedFile>>&) @ 0x000000001a2e34d3 in /home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/format_fuzzer\r\n8. ./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerDataFlowTrace.h:121: fuzzer::Fuzzer::Loop(std::vector<fuzzer::SizedFile, std::allocator<fuzzer::SizedFile>>&) @ 0x000000001a2e45b1 in /home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/format_fuzzer\r\n9. ./build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:914: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) @ 0x000000001a2c090e in /home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/format_fuzzer\r\n10. ./build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20: main @ 0x000000001a2b3808 in /home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/format_fuzzer\r\n11. ? @ 0x00007f059aaaed90\r\n12. ? @ 0x00007f059aaaee40\r\n13. _start @ 0x000000000a8035ae in /home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/format_fuzzer\r\nlibc++abi: terminating\r\n==31503== ERROR: libFuzzer: deadly signal\r\n    #0 0x555f661aada1 in __sanitizer_print_stack_trace (/home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/format_fuzzer+0xa8a5da1) (BuildId: 8d28cbd4dda4188ae7579956a91869b2f53fb741)\r\n    #1 0x555f75c02df7 in fuzzer::PrintStackTrace() build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerUtil.cpp:210:5\r\n    #2 0x555f75bdf20a in fuzzer::Fuzzer::CrashCallback() build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:233:3\r\n    #3 0x7f059aac751f  (/lib/x86_64-linux-gnu/libc.so.6+0x4251f) (BuildId: c289da5071a3399de893d2af81d6a30c62646e1e)\r\n    #4 0x7f059ab1b9fb in pthread_kill (/lib/x86_64-linux-gnu/libc.so.6+0x969fb) (BuildId: c289da5071a3399de893d2af81d6a30c62646e1e)\r\n    #5 0x7f059aac7475 in gsignal (/lib/x86_64-linux-gnu/libc.so.6+0x42475) (BuildId: c289da5071a3399de893d2af81d6a30c62646e1e)\r\n    #6 0x7f059aaad7f2 in abort (/lib/x86_64-linux-gnu/libc.so.6+0x287f2) (BuildId: c289da5071a3399de893d2af81d6a30c62646e1e)\r\n    #7 0x555f77e0e040 in abort_message build/./contrib/llvm-project/libcxxabi/src/abort_message.cpp:78:5\r\n    #8 0x555f77e0e476 in demangling_terminate_handler() build/./contrib/llvm-project/libcxxabi/src/cxa_default_handlers.cpp\r\n    #9 0x555f77e0e270 in std::__terminate(void (*)()) build/./contrib/llvm-project/libcxxabi/src/cxa_handlers.cpp:59:9\r\n    #10 0x555f77e0e16f in std::terminate() build/./contrib/llvm-project/libcxxabi/src/cxa_handlers.cpp\r\n    #11 0x555f68f8758c in DB::ContextSharedPart::ContextSharedPart() build/./src/Interpreters/Context.cpp:429:13\r\n    #12 0x555f68ec7f28 in std::__1::__unique_if<DB::ContextSharedPart>::__unique_single std::__1::make_unique[abi:v15000]<DB::ContextSharedPart>() build/./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:714:32\r\n    #13 0x555f68ec7f28 in DB::Context::createShared() build/./src/Interpreters/Context.cpp:810:32\r\n    #14 0x555f661da9f6 in LLVMFuzzerTestOneInput::$_0::operator()() build/./src/Formats/fuzzers/format_fuzzer.cpp:35:30\r\n    #15 0x555f661da26d in LLVMFuzzerTestOneInput build/./src/Formats/fuzzers/format_fuzzer.cpp:48:35\r\n    #16 0x555f75be3e5c in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:612:13\r\n    #17 0x555f75be2112 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool, bool*) build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:514:7\r\n    #18 0x555f75be84d2 in fuzzer::Fuzzer::ReadAndExecuteSeedCorpora(std::__1::vector<fuzzer::SizedFile, std::__1::allocator<fuzzer::SizedFile>>&) build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:810:5\r\n    #19 0x555f75be95b0 in fuzzer::Fuzzer::Loop(std::__1::vector<fuzzer::SizedFile, std::__1::allocator<fuzzer::SizedFile>>&) build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:865:3\r\n    #20 0x555f75bc590d in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:912:6\r\n    #21 0x555f75bb8807 in main build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10\r\n    #22 0x7f059aaaed8f  (/lib/x86_64-linux-gnu/libc.so.6+0x29d8f) (BuildId: c289da5071a3399de893d2af81d6a30c62646e1e)\r\n    #23 0x7f059aaaee3f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e3f) (BuildId: c289da5071a3399de893d2af81d6a30c62646e1e)\r\n    #24 0x555f661085ad in _start (/home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/format_fuzzer+0xa8035ad) (BuildId: 8d28cbd4dda4188ae7579956a91869b2f53fb741)\r\n\r\nNOTE: libFuzzer has rudimentary signal handlers.\r\n      Combine libFuzzer with AddressSanitizer or similar for better crash reports.\r\nSUMMARY: libFuzzer: deadly signal\r\nMS: 0 ; base unit: 0000000000000000000000000000000000000000\r\n0xa,\r\n\\012\r\nartifact_prefix='./'; Test unit written to ./crash-adc83b19e793491b1c6ea0fd8b46cd9f32e592fc\r\nBase64: Cg==\r\n```\r\n\r\n#### aggregate_function_state_deserialization_fuzzer\r\n```bash\r\n$ ch-fuzz/build/fuzzers/aggregate_function_state_deserialization_fuzzer -rss_limit_mb=5560 -timeout=25 -seed=1337 -runs=4 -error_exitcode=78\r\nINFO: Running with entropic power schedule (0xFF, 100).\r\nINFO: Seed: 1337\r\nINFO: Loaded 1 modules   (2125501 inline 8-bit counters): 2125501 [0x556f5cb10cf8, 0x556f5cd17bb5),\r\nINFO: Loaded 1 PC tables (2125501 PCs): 2125501 [0x556f5cd17bb8,0x556f5ed86788),\r\nINFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes\r\nINFO: A corpus is not provided, starting from an empty corpus\r\nAttempting to create multiple ContextShared instances. Stack trace:\r\n0. ./build/./src/Common/StackTrace.cpp:349: StackTrace::tryCapture() @ 0x0000000019ec161c in /home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/aggregate_function_state_deserialization_fuzzer\r\n1. ./src/Common/StackTrace.h:0: DB::ContextSharedPart::ContextSharedPart() @ 0x000000000a74891c in /home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/aggregate_function_state_deserialization_fuzzer\r\n2. ./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:0: DB::Context::createShared() @ 0x000000000a67e4e9 in /home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/aggregate_function_state_deserialization_fuzzer\r\n3. ./build/./src/AggregateFunctions/fuzzers/aggregate_function_state_deserialization_fuzzer.cpp:30: LLVMFuzzerTestOneInput::$_0::operator()() @ 0x0000000009f78317 in /home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/aggregate_function_state_deserialization_fuzzer\r\n4. ./build/./src/AggregateFunctions/fuzzers/aggregate_function_state_deserialization_fuzzer.cpp:41: LLVMFuzzerTestOneInput @ 0x0000000009f77dc3 in /home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/aggregate_function_state_deserialization_fuzzer\r\n5. ./build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:0: fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) @ 0x000000001954d77d in /home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/aggregate_function_state_deserialization_fuzzer\r\n6. ./build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:514: fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool, bool*) @ 0x000000001954ba33 in /home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/aggregate_function_state_deserialization_fuzzer\r\n7. ./build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:810: fuzzer::Fuzzer::ReadAndExecuteSeedCorpora(std::vector<fuzzer::SizedFile, std::allocator<fuzzer::SizedFile>>&) @ 0x0000000019551df3 in /home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/aggregate_function_state_deserialization_fuzzer\r\n8. ./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerDataFlowTrace.h:121: fuzzer::Fuzzer::Loop(std::vector<fuzzer::SizedFile, std::allocator<fuzzer::SizedFile>>&) @ 0x0000000019552ed1 in /home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/aggregate_function_state_deserialization_fuzzer\r\n9. ./build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:914: fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) @ 0x000000001952f22e in /home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/aggregate_function_state_deserialization_fuzzer\r\n10. ./build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20: main @ 0x0000000019522128 in /home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/aggregate_function_state_deserialization_fuzzer\r\n11. ? @ 0x00007fad8de78d90\r\n12. ? @ 0x00007fad8de78e40\r\n13. _start @ 0x0000000009ea6dee in /home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/aggregate_function_state_deserialization_fuzzer\r\nlibc++abi: terminating\r\n==31506== ERROR: libFuzzer: deadly signal\r\n    #0 0x556f4816c5e1 in __sanitizer_print_stack_trace (/home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/aggregate_function_state_deserialization_fuzzer+0x9f495e1) (BuildId: 63e32b695e40af5a26ae2bfd156cdfec0c11e302)\r\n    #1 0x556f5778f717 in fuzzer::PrintStackTrace() build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerUtil.cpp:210:5\r\n    #2 0x556f5776bb2a in fuzzer::Fuzzer::CrashCallback() build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:233:3\r\n    #3 0x7fad8de9151f  (/lib/x86_64-linux-gnu/libc.so.6+0x4251f) (BuildId: c289da5071a3399de893d2af81d6a30c62646e1e)\r\n    #4 0x7fad8dee59fb in pthread_kill (/lib/x86_64-linux-gnu/libc.so.6+0x969fb) (BuildId: c289da5071a3399de893d2af81d6a30c62646e1e)\r\n    #5 0x7fad8de91475 in gsignal (/lib/x86_64-linux-gnu/libc.so.6+0x42475) (BuildId: c289da5071a3399de893d2af81d6a30c62646e1e)\r\n    #6 0x7fad8de777f2 in abort (/lib/x86_64-linux-gnu/libc.so.6+0x287f2) (BuildId: c289da5071a3399de893d2af81d6a30c62646e1e)\r\n    #7 0x556f592dabe0 in abort_message build/./contrib/llvm-project/libcxxabi/src/abort_message.cpp:78:5\r\n    #8 0x556f592db016 in demangling_terminate_handler() build/./contrib/llvm-project/libcxxabi/src/cxa_default_handlers.cpp\r\n    #9 0x556f592dae10 in std::__terminate(void (*)()) build/./contrib/llvm-project/libcxxabi/src/cxa_handlers.cpp:59:9\r\n    #10 0x556f592dad0f in std::terminate() build/./contrib/llvm-project/libcxxabi/src/cxa_handlers.cpp\r\n    #11 0x556f4896b9ac in DB::ContextSharedPart::ContextSharedPart() build/./src/Interpreters/Context.cpp:429:13\r\n    #12 0x556f488a14e8 in std::__1::__unique_if<DB::ContextSharedPart>::__unique_single std::__1::make_unique[abi:v15000]<DB::ContextSharedPart>() build/./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:714:32\r\n    #13 0x556f488a14e8 in DB::Context::createShared() build/./src/Interpreters/Context.cpp:810:32\r\n    #14 0x556f4819b316 in LLVMFuzzerTestOneInput::$_0::operator()() build/./src/AggregateFunctions/fuzzers/aggregate_function_state_deserialization_fuzzer.cpp:30:30\r\n    #15 0x556f4819adc2 in LLVMFuzzerTestOneInput build/./src/AggregateFunctions/fuzzers/aggregate_function_state_deserialization_fuzzer.cpp:41:35\r\n    #16 0x556f5777077c in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:612:13\r\n    #17 0x556f5776ea32 in fuzzer::Fuzzer::RunOne(unsigned char const*, unsigned long, bool, fuzzer::InputInfo*, bool, bool*) build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:514:7\r\n    #18 0x556f57774df2 in fuzzer::Fuzzer::ReadAndExecuteSeedCorpora(std::__1::vector<fuzzer::SizedFile, std::__1::allocator<fuzzer::SizedFile>>&) build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:810:5\r\n    #19 0x556f57775ed0 in fuzzer::Fuzzer::Loop(std::__1::vector<fuzzer::SizedFile, std::__1::allocator<fuzzer::SizedFile>>&) build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:865:3\r\n    #20 0x556f5775222d in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:912:6\r\n    #21 0x556f57745127 in main build/./contrib/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10\r\n    #22 0x7fad8de78d8f  (/lib/x86_64-linux-gnu/libc.so.6+0x29d8f) (BuildId: c289da5071a3399de893d2af81d6a30c62646e1e)\r\n    #23 0x7fad8de78e3f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x29e3f) (BuildId: c289da5071a3399de893d2af81d6a30c62646e1e)\r\n    #24 0x556f480c9ded in _start (/home/szhemzhitskiy/projects/ch-fuzz/build/fuzzers/aggregate_function_state_deserialization_fuzzer+0x9ea6ded) (BuildId: 63e32b695e40af5a26ae2bfd156cdfec0c11e302)\r\n\r\nNOTE: libFuzzer has rudimentary signal handlers.\r\n      Combine libFuzzer with AddressSanitizer or similar for better crash reports.\r\nSUMMARY: libFuzzer: deadly signal\r\nMS: 0 ; base unit: 0000000000000000000000000000000000000000\r\n0xa,\r\n\\012\r\nartifact_prefix='./'; Test unit written to ./crash-adc83b19e793491b1c6ea0fd8b46cd9f32e592fc\r\nBase64: Cg==\r\n```\r\n#### At the same time other fuzzers run as as expected, e.g. lexer_fuzzer\r\n```bash\r\n$ ch-fuzz/build/fuzzers/lexer_fuzzer -rss_limit_mb=5560 -timeout=25 -seed=1337 -runs=4 -error_exitcode=78\r\nINFO: Running with entropic power schedule (0xFF, 100).\r\nINFO: Seed: 1337\r\nINFO: Loaded 1 modules   (33087 inline 8-bit counters): 33087 [0x563a2b896358, 0x563a2b89e497),\r\nINFO: Loaded 1 PC tables (33087 PCs): 33087 [0x563a2b89e498,0x563a2b91f888),\r\nINFO: -max_len is not provided; libFuzzer will not generate inputs larger than 4096 bytes\r\nINFO: A corpus is not provided, starting from an empty corpus\r\n#2\tINITED cov: 54 ft: 50 corp: 1/1b exec/s: 0 rss: 37Mb\r\n#3\tNEW    cov: 55 ft: 52 corp: 2/2b lim: 4 exec/s: 0 rss: 37Mb L: 1/1 MS: 1 ChangeBit-\r\n\tNEW_FUNC[1/2]: 0x563a2b216560 in isWordCharASCII(char) build/./src/Common/StringUtils/StringUtils.h:108\r\n\tNEW_FUNC[2/2]: 0x563a2b217ac0 in skipWhitespacesUTF8(char const*, char const*) build/./src/Common/StringUtils/StringUtils.h:191\r\n#4\tNEW    cov: 68 ft: 68 corp: 3/4b lim: 4 exec/s: 0 rss: 38Mb L: 2/2 MS: 1 InsertByte-\r\n#4\tDONE   cov: 68 ft: 68 corp: 3/4b lim: 4 exec/s: 0 rss: 38Mb\r\nDone 4 runs in 8 second(s)\r\n```\r\n\r\n**How to reproduce**\r\n\r\n- clang 16\r\n- build options\r\n```\r\ncmake  \\\r\n  -G Ninja \\\r\n  .. \\\r\n  -DCMAKE_CXX_COMPILER_LAUNCHER=/usr/bin/ccache \\\r\n  -DCMAKE_C_COMPILER=/usr/lib/llvm-16/bin/clang \\\r\n  -DCMAKE_CXX_COMPILER=/usr/lib/llvm-16/bin/clang++ \\\r\n  -DCMAKE_BUILD_TYPE=RelWithDebInfo \\\r\n  -DLIB_FUZZING_ENGINE:STRING=-fsanitize=fuzzer,address \\\r\n  -DENABLE_FUZZING=1 \\\r\n  -DWITH_COVERAGE=1 \\\r\n  -DENABLE_PROTOBUF=1 \\\r\n  -DPARALLEL_COMPILE_JOBS=4 \\\r\n  -DWERROR=0 \\\r\n  -DSANITIZE=address\r\n```\n",
  "hints_text": "It seems that failure happens here\r\n```cpp\r\n...\r\ncontext->setApplicationType(Context::ApplicationType::LOCAL);\r\n...\r\n```\r\n\r\ndue to uninitialized Poco::Util::Application::instance() which throws an error from `setApplicationType`\r\n```cpp\r\nvoid Context::setApplicationType(ApplicationType type)\r\n{\r\n    /// Lock isn't required, you should set it at start\r\n    shared->application_type = type;\r\n    if (type == ApplicationType::LOCAL || type == ApplicationType::SERVER)\r\n        shared->server_settings.loadSettingsFromConfig(Poco::Util::Application::instance().config());\r\n\r\n    if (type == ApplicationType::SERVER)\r\n        shared->configureServerWideThrottling();\r\n}\r\n```\nWaiting for https://github.com/google/oss-fuzz/pull/8108 to continue running them automatically,\r\nbut in the meantime - let's fix it.\n@pufit Could you please help with fixing (or understanding how to fix) this issue, as it seems that it was introduced in your pull request here: #59231",
  "created_at": "2024-03-17T14:45:13Z",
  "modified_files": [
    "CMakeLists.txt",
    "cmake/fuzzer.cmake",
    "programs/local/LocalServer.cpp",
    "programs/main.cpp",
    "src/AggregateFunctions/fuzzers/aggregate_function_state_deserialization_fuzzer.cpp",
    "src/DataTypes/fuzzers/data_type_deserialization_fuzzer.cpp",
    "src/Formats/fuzzers/format_fuzzer.cpp",
    "src/Interpreters/AsynchronousMetricLog.cpp",
    "src/Interpreters/fuzzers/execute_query_fuzzer.cpp"
  ],
  "modified_test_files": [
    "src/Common/tests/gtest_global_context.cpp",
    "src/Common/tests/gtest_global_context.h"
  ]
}