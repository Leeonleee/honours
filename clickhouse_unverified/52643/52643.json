{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 52643,
  "instance_id": "ClickHouse__ClickHouse-52643",
  "issue_numbers": [
    "51089"
  ],
  "base_commit": "fab77783f195bbdce04510343c390139749e7603",
  "patch": "diff --git a/programs/local/LocalServer.cpp b/programs/local/LocalServer.cpp\nindex 3c2a8ae31525..3ee268aed0e6 100644\n--- a/programs/local/LocalServer.cpp\n+++ b/programs/local/LocalServer.cpp\n@@ -266,6 +266,10 @@ void LocalServer::tryInitPath()\n \n     global_context->setUserFilesPath(\"\"); // user's files are everywhere\n \n+    std::string user_scripts_path = config().getString(\"user_scripts_path\", fs::path(path) / \"user_scripts/\");\n+    global_context->setUserScriptsPath(user_scripts_path);\n+    fs::create_directories(user_scripts_path);\n+\n     /// top_level_domains_lists\n     const std::string & top_level_domains_path = config().getString(\"top_level_domains_path\", path + \"top_level_domains/\");\n     if (!top_level_domains_path.empty())\n@@ -490,6 +494,17 @@ try\n \n     applyCmdSettings(global_context);\n \n+    /// try to load user defined executable functions, throw on error and die\n+    try\n+    {\n+        global_context->loadOrReloadUserDefinedExecutableFunctions(config());\n+    }\n+    catch (...)\n+    {\n+        tryLogCurrentException(&logger(), \"Caught exception while loading user defined executable functions.\");\n+        throw;\n+    }\n+\n     if (is_interactive)\n     {\n         clearTerminal();\ndiff --git a/src/Client/ClientBase.cpp b/src/Client/ClientBase.cpp\nindex 3e964d5c6a36..06dabf96c283 100644\n--- a/src/Client/ClientBase.cpp\n+++ b/src/Client/ClientBase.cpp\n@@ -2624,9 +2624,8 @@ void ClientBase::parseAndCheckOptions(OptionsDescription & options_description,\n         throw Exception(ErrorCodes::UNRECOGNIZED_ARGUMENTS, \"Unrecognized option '{}'\", unrecognized_options[0]);\n     }\n \n-    /// Check positional options (options after ' -- ', ex: clickhouse-client -- <options>).\n-    unrecognized_options = po::collect_unrecognized(parsed.options, po::collect_unrecognized_mode::include_positional);\n-    if (unrecognized_options.size() > 1)\n+    /// Check positional options.\n+    if (std::ranges::count_if(parsed.options, [](const auto & op){ return !op.unregistered && op.string_key.empty() && !op.original_tokens[0].starts_with(\"--\"); }) > 1)\n         throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Positional options are not supported.\");\n \n     po::store(parsed, options);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02096_bad_options_in_client_and_local.reference b/tests/queries/0_stateless/02096_bad_options_in_client_and_local.reference\nindex c4c0901b9df0..432299e9556c 100644\n--- a/tests/queries/0_stateless/02096_bad_options_in_client_and_local.reference\n+++ b/tests/queries/0_stateless/02096_bad_options_in_client_and_local.reference\n@@ -8,5 +8,3 @@ OK\n OK\n OK\n OK\n-OK\n-OK\ndiff --git a/tests/queries/0_stateless/02096_bad_options_in_client_and_local.sh b/tests/queries/0_stateless/02096_bad_options_in_client_and_local.sh\nindex d37155e85062..753d56fb424b 100755\n--- a/tests/queries/0_stateless/02096_bad_options_in_client_and_local.sh\n+++ b/tests/queries/0_stateless/02096_bad_options_in_client_and_local.sh\n@@ -9,8 +9,6 @@ ${CLICKHOUSE_LOCAL} --unknown-option 2>&1 | grep -F -q \"UNRECOGNIZED_ARGUMENTS\"\n \n ${CLICKHOUSE_LOCAL} --unknown-option-1 --unknown-option-2 2>&1 | grep -F -q \"UNRECOGNIZED_ARGUMENTS\" && echo \"OK\" || echo \"FAIL\"\n \n-${CLICKHOUSE_LOCAL} -- --unknown-option 2>&1 | grep -F -q \"BAD_ARGUMENTS\" && echo \"OK\" || echo \"FAIL\"\n-\n ${CLICKHOUSE_LOCAL} -- 'positional-argument' 2>&1 | grep -F -q \"BAD_ARGUMENTS\" && echo \"OK\" || echo \"FAIL\"\n \n ${CLICKHOUSE_LOCAL} -f 2>&1 | grep -F -q \"Bad arguments\" && echo \"OK\" || echo \"FAIL\"\n@@ -22,8 +20,6 @@ ${CLICKHOUSE_CLIENT} --unknown-option 2>&1 | grep -F -q \"UNRECOGNIZED_ARGUMENTS\"\n \n ${CLICKHOUSE_CLIENT} --unknown-option-1 --unknown-option-2 2>&1 | grep -F -q \"UNRECOGNIZED_ARGUMENTS\" && echo \"OK\" || echo \"FAIL\"\n \n-${CLICKHOUSE_CLIENT} -- --unknown-option 2>&1 | grep -F -q \"BAD_ARGUMENTS\" && echo \"OK\" || echo \"FAIL\"\n-\n ${CLICKHOUSE_CLIENT} -- 'positional-argument' 2>&1 | grep -F -q \"BAD_ARGUMENTS\" && echo \"OK\" || echo \"FAIL\"\n \n ${CLICKHOUSE_CLIENT} --j 2>&1 | grep -F -q \"Bad arguments\" && echo \"OK\" || echo \"FAIL\"\ndiff --git a/tests/queries/0_stateless/02833_local_udf_options.reference b/tests/queries/0_stateless/02833_local_udf_options.reference\nnew file mode 100644\nindex 000000000000..19f0805d8de3\n--- /dev/null\n+++ b/tests/queries/0_stateless/02833_local_udf_options.reference\n@@ -0,0 +1,1 @@\n+qwerty\ndiff --git a/tests/queries/0_stateless/02833_local_udf_options.sh b/tests/queries/0_stateless/02833_local_udf_options.sh\nnew file mode 100755\nindex 000000000000..149b62d7e2cc\n--- /dev/null\n+++ b/tests/queries/0_stateless/02833_local_udf_options.sh\n@@ -0,0 +1,11 @@\n+#!/usr/bin/env bash\n+\n+set -e\n+\n+CUR_DIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CUR_DIR\"/../shell_config.sh\n+\n+SCRIPTS_DIR=$CUR_DIR/scripts_udf\n+\n+$CLICKHOUSE_LOCAL -q 'select test_function()' -- --user_scripts_path=$SCRIPTS_DIR --user_defined_executable_functions_config=$SCRIPTS_DIR/function.xml\ndiff --git a/tests/queries/0_stateless/scripts_udf/function.xml b/tests/queries/0_stateless/scripts_udf/function.xml\nnew file mode 100644\nindex 000000000000..69a0abb5cec0\n--- /dev/null\n+++ b/tests/queries/0_stateless/scripts_udf/function.xml\n@@ -0,0 +1,9 @@\n+<functions>\n+    <function>\n+        <type>executable</type>\n+        <name>test_function</name>\n+        <return_type>String</return_type>\n+        <format>TabSeparated</format>\n+        <command>udf.sh</command>\n+    </function>\n+</functions>\ndiff --git a/tests/queries/0_stateless/scripts_udf/udf.sh b/tests/queries/0_stateless/scripts_udf/udf.sh\nnew file mode 100755\nindex 000000000000..add85833c3e7\n--- /dev/null\n+++ b/tests/queries/0_stateless/scripts_udf/udf.sh\n@@ -0,0 +1,3 @@\n+#!/bin/sh\n+\n+echo qwerty\n",
  "problem_statement": "Executable UDF path w/ clickhouse-local\nRelated to ancient https://github.com/ClickHouse/ClickHouse/issues/31188\r\n\r\nIt currently seems pretty much impossible to run executable UDFs using `clickhouse-local`. As its now well known, modern clickhouse demands UDF scripts to reside in a [user_scripts_path](https://clickhouse.com/docs/en/operations/server-configuration-parameters/settings#server_configuration_parameters-user_scripts_path) and while this is simple with `clickhouse-server`, so far I could not find an equivalent SET parameter to convince `clickhouse-local` into using a custom user scripts folder location. On the other hand, the dynamic /tmp folder is impossible to use or guess.\r\n\r\n\r\nFictional example: \r\n```\r\nSELECT * FROM executable('./some_script.py', TabSeparated, 'name String', (SELECT name));\r\n```\r\n```\r\nDB::Exception: Executable file ./some_script.py does not exist inside user scripts folder /tmp/clickhouse-local-2818615-1686929524-9014242541746612907/user_scripts/. (UNSUPPORTED_METHOD)\r\n```\r\n\r\nUDF functions (`CREATE FUNCTION test AS x -> (x + 1);SELECT test(1);`) work fine in comparison.\r\n\r\nAny suggestions? \n",
  "hints_text": "This is easy, we only have to provide the ability to change this path in the configuration,\r\nand should it will be available as `clickhouse-local ... -- --user_scripts_path`.\r\nplus allow it by default for better usability.",
  "created_at": "2023-07-27T05:10:29Z"
}