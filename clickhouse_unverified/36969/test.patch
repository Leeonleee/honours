diff --git a/src/DataTypes/Serializations/tests/gtest_object_serialization.cpp b/src/DataTypes/Serializations/tests/gtest_object_serialization.cpp
index f1fbbe115e21..fc7432d5bf64 100644
--- a/src/DataTypes/Serializations/tests/gtest_object_serialization.cpp
+++ b/src/DataTypes/Serializations/tests/gtest_object_serialization.cpp
@@ -31,7 +31,7 @@ TEST(SerializationObject, FromString)
         settings.getter = [&out](const auto &) { return &out; };
 
         writeIntBinary(static_cast<UInt8>(1), out);
-        serialization->serializeBinaryBulkStatePrefix(settings, state);
+        serialization->serializeBinaryBulkStatePrefix(*column_string, settings, state);
         serialization->serializeBinaryBulkWithMultipleStreams(*column_string, 0, column_string->size(), settings, state);
         serialization->serializeBinaryBulkStateSuffix(settings, state);
     }
diff --git a/tests/queries/0_stateless/01825_type_json_in_array.reference b/tests/queries/0_stateless/01825_type_json_in_array.reference
new file mode 100644
index 000000000000..c36a22e6951f
--- /dev/null
+++ b/tests/queries/0_stateless/01825_type_json_in_array.reference
@@ -0,0 +1,23 @@
+{"id":1,"arr":[{"k1":1,"k2":{"k3":2,"k4":3,"k5":""}},{"k1":2,"k2":{"k3":0,"k4":0,"k5":"foo"}}]}
+{"id":2,"arr":[{"k1":3,"k2":{"k3":4,"k4":5,"k5":""}}]}
+1	[1,2]	[2,0]	[3,0]	['','foo']
+2	[3]	[4]	[5]	['']
+{"arr":{"k1":1,"k2":{"k3":2,"k4":3,"k5":""}}}
+{"arr":{"k1":2,"k2":{"k3":0,"k4":0,"k5":"foo"}}}
+{"arr":{"k1":3,"k2":{"k3":4,"k4":5,"k5":""}}}
+Array(Tuple(k1 Int8, k2 Tuple(k3 Int8, k4 Int8, k5 String)))
+{"id":1,"arr":[{"k1":[{"k2":"aaa","k3":"bbb","k4":0},{"k2":"ccc","k3":"","k4":0}],"k5":{"k6":""}}]}
+{"id":2,"arr":[{"k1":[{"k2":"","k3":"ddd","k4":10},{"k2":"","k3":"","k4":20}],"k5":{"k6":"foo"}}]}
+1	[['aaa','ccc']]	[['bbb','']]	[[0,0]]	['']
+2	[['','']]	[['ddd','']]	[[10,20]]	['foo']
+{"k1":{"k2":"","k3":"","k4":20}}
+{"k1":{"k2":"","k3":"ddd","k4":10}}
+{"k1":{"k2":"aaa","k3":"bbb","k4":0}}
+{"k1":{"k2":"ccc","k3":"","k4":0}}
+Tuple(k2 String, k3 String, k4 Int8)
+{"arr":[{"x":1}]}
+{"arr":{"x":{"y":1},"t":{"y":2}}}
+{"arr":[1,{"y":1}]}
+{"arr":[2,{"y":2}]}
+{"arr":[{"x":"aaa","y":[1,2,3]}]}
+{"arr":[{"x":1}]}
diff --git a/tests/queries/0_stateless/01825_type_json_in_array.sql b/tests/queries/0_stateless/01825_type_json_in_array.sql
new file mode 100644
index 000000000000..e5c20d7ba6b0
--- /dev/null
+++ b/tests/queries/0_stateless/01825_type_json_in_array.sql
@@ -0,0 +1,35 @@
+-- Tags: no-fasttest
+
+SET allow_experimental_object_type = 1;
+DROP TABLE IF EXISTS t_json_array;
+
+CREATE TABLE t_json_array (id UInt32, arr Array(JSON)) ENGINE = MergeTree ORDER BY id;
+
+INSERT INTO t_json_array FORMAT JSONEachRow {"id": 1, "arr": [{"k1": 1, "k2": {"k3": 2, "k4": 3}}, {"k1": 2, "k2": {"k5": "foo"}}]}
+INSERT INTO t_json_array FORMAT JSONEachRow {"id": 2, "arr": [{"k1": 3, "k2": {"k3": 4, "k4": 5}}]}
+
+SET output_format_json_named_tuples_as_objects = 1;
+
+SELECT * FROM t_json_array ORDER BY id FORMAT JSONEachRow;
+SELECT id, arr.k1, arr.k2.k3, arr.k2.k4, arr.k2.k5 FROM t_json_array ORDER BY id;
+SELECT arr FROM t_json_array ARRAY JOIN arr ORDER BY arr.k1 FORMAT JSONEachRow;
+SELECT toTypeName(arr) FROM t_json_array LIMIT 1;
+
+TRUNCATE TABLE t_json_array;
+
+INSERT INTO t_json_array FORMAT JSONEachRow {"id": 1, "arr": [{"k1": [{"k2": "aaa", "k3": "bbb"}, {"k2": "ccc"}]}]}
+INSERT INTO t_json_array FORMAT JSONEachRow {"id": 2, "arr": [{"k1": [{"k3": "ddd", "k4": 10}, {"k4": 20}], "k5": {"k6": "foo"}}]}
+
+SELECT * FROM t_json_array ORDER BY id FORMAT JSONEachRow;
+SELECT id, arr.k1.k2, arr.k1.k3, arr.k1.k4, arr.k5.k6 FROM t_json_array ORDER BY id;
+
+SELECT arrayJoin(arrayJoin(arr.k1)) AS k1 FROM t_json_array ORDER BY k1 FORMAT JSONEachRow;
+SELECT toTypeName(arrayJoin(arrayJoin(arr.k1))) AS arr FROM t_json_array LIMIT 1;
+
+DROP TABLE t_json_array;
+
+SELECT * FROM values('arr Array(JSON)', '[\'{"x" : 1}\']') FORMAT JSONEachRow;
+SELECT * FROM values('arr Map(String, JSON)', '{\'x\' : \'{"y" : 1}\', \'t\' : \'{"y" : 2}\'}') FORMAT JSONEachRow;
+SELECT * FROM values('arr Tuple(Int32, JSON)', '(1, \'{"y" : 1}\')', '(2, \'{"y" : 2}\')') FORMAT JSONEachRow;
+SELECT * FROM format(JSONEachRow, '{"arr" : [{"x" : "aaa", "y" : [1,2,3]}]}') FORMAT JSONEachRow;
+SELECT * FROM values('arr Array(JSON)', '[\'{"x" : 1}\']') FORMAT JSONEachRow;
diff --git a/tests/queries/0_stateless/01825_type_json_in_other_types.reference b/tests/queries/0_stateless/01825_type_json_in_other_types.reference
new file mode 100644
index 000000000000..b94885a65ab4
--- /dev/null
+++ b/tests/queries/0_stateless/01825_type_json_in_other_types.reference
@@ -0,0 +1,17 @@
+Tuple(String, Map(String, Array(Tuple(k1 Nested(k2 Int8, k3 Int8, k5 String), k4 String))), Tuple(k1 String, k2 Tuple(k3 String, k4 String)))
+=============
+{"id":1,"data":["foo",{"aa":[{"k1":[{"k2":1,"k3":2,"k5":""},{"k2":0,"k3":3,"k5":""}],"k4":""},{"k1":[{"k2":4,"k3":0,"k5":""},{"k2":0,"k3":5,"k5":""},{"k2":6,"k3":0,"k5":""}],"k4":"qqq"}],"bb":[{"k1":[],"k4":"www"},{"k1":[{"k2":7,"k3":8,"k5":""},{"k2":9,"k3":10,"k5":""},{"k2":11,"k3":12,"k5":""}],"k4":""}]},{"k1":"aa","k2":{"k3":"bb","k4":"c"}}]}
+{"id":2,"data":["bar",{"aa":[{"k1":[{"k2":13,"k3":14,"k5":""},{"k2":15,"k3":16,"k5":""}],"k4":"www"}]},{"k1":"","k2":{"k3":"","k4":""}}]}
+{"id":3,"data":["some",{"aa":[{"k1":[{"k2":0,"k3":20,"k5":"some"}],"k4":""}]},{"k1":"eee","k2":{"k3":"","k4":""}}]}
+=============
+{"aa":[{"k1":[{"k2":1,"k3":2,"k5":""},{"k2":0,"k3":3,"k5":""}],"k4":""},{"k1":[{"k2":4,"k3":0,"k5":""},{"k2":0,"k3":5,"k5":""},{"k2":6,"k3":0,"k5":""}],"k4":"qqq"}],"bb":[{"k1":[],"k4":"www"},{"k1":[{"k2":7,"k3":8,"k5":""},{"k2":9,"k3":10,"k5":""},{"k2":11,"k3":12,"k5":""}],"k4":""}]}
+{"aa":[{"k1":[{"k2":13,"k3":14,"k5":""},{"k2":15,"k3":16,"k5":""}],"k4":"www"}],"bb":[]}
+{"aa":[{"k1":[{"k2":0,"k3":20,"k5":"some"}],"k4":""}],"bb":[]}
+=============
+{"k1":[[{"k2":1,"k3":2,"k5":""},{"k2":0,"k3":3,"k5":""}],[{"k2":4,"k3":0,"k5":""},{"k2":0,"k3":5,"k5":""},{"k2":6,"k3":0,"k5":""}]],"k4":["","qqq"]}
+{"k1":[[{"k2":13,"k3":14,"k5":""},{"k2":15,"k3":16,"k5":""}]],"k4":["www"]}
+{"k1":[[{"k2":0,"k3":20,"k5":"some"}]],"k4":[""]}
+=============
+{"obj":{"k1":"aa","k2":{"k3":"bb","k4":"c"}}}
+{"obj":{"k1":"","k2":{"k3":"","k4":""}}}
+{"obj":{"k1":"eee","k2":{"k3":"","k4":""}}}
diff --git a/tests/queries/0_stateless/01825_type_json_in_other_types.sh b/tests/queries/0_stateless/01825_type_json_in_other_types.sh
new file mode 100755
index 000000000000..e9cf0bcaca12
--- /dev/null
+++ b/tests/queries/0_stateless/01825_type_json_in_other_types.sh
@@ -0,0 +1,91 @@
+#!/usr/bin/env bash
+# Tags: no-fasttest
+
+CUR_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
+# shellcheck source=../shell_config.sh
+. "$CUR_DIR"/../shell_config.sh
+
+${CLICKHOUSE_CLIENT} -q "SET allow_experimental_object_type = 1"
+${CLICKHOUSE_CLIENT} -q "DROP TABLE IF EXISTS t_json_nested"
+
+${CLICKHOUSE_CLIENT} -q "
+    CREATE TABLE t_json_nested
+    (
+        id UInt32,
+        data Tuple(String, Map(String, Array(JSON)), JSON)
+    )
+    ENGINE = MergeTree ORDER BY id" --allow_experimental_object_type 1
+
+cat <<EOF | $CLICKHOUSE_CLIENT -q "INSERT INTO t_json_nested FORMAT JSONEachRow"
+{
+    "id": 1,
+    "data":[
+        "foo",
+        {
+            "aa": [
+                {"k1": [{"k2": 1, "k3": 2}, {"k3": 3}]},
+                {"k1": [{"k2": 4}, {"k3": 5}, {"k2": 6}], "k4": "qqq"}
+            ],
+            "bb": [
+                 {"k4": "www"},
+                 {"k1": [{"k2": 7, "k3": 8}, {"k2": 9, "k3": 10}, {"k2": 11, "k3": 12}]}
+            ]
+        },
+        {"k1": "aa", "k2": {"k3": "bb", "k4": "c"}}
+    ]
+}
+{
+    "id": 2,
+    "data":[
+        "bar",
+        {
+            "aa": [
+                {"k1": [{"k2": 13, "k3": 14}, {"k2": 15, "k3": 16}], "k4": "www"}
+            ],
+        },
+        {}
+    ]
+}
+EOF
+
+cat <<EOF | $CLICKHOUSE_CLIENT -q "INSERT INTO t_json_nested FORMAT JSONEachRow"
+{
+    "id": 3,
+    "data":[
+        "some",
+        {
+            "aa": [
+                {"k1": [{"k3": 20, "k5": "some"}]},
+            ],
+        },
+        {"k1": "eee"}
+    ]
+}
+EOF
+
+$CLICKHOUSE_CLIENT -q "SELECT toTypeName(data) FROM t_json_nested LIMIT 1"
+
+echo "============="
+
+$CLICKHOUSE_CLIENT -q "SELECT * FROM t_json_nested ORDER BY id FORMAT JSONEachRow" --output_format_json_named_tuples_as_objects 1
+
+echo "============="
+
+$CLICKHOUSE_CLIENT -q "
+    SELECT (data.2)['aa'] AS aa, (data.2)['bb'] AS bb
+    FROM t_json_nested ORDER BY id FORMAT JSONEachRow" --output_format_json_named_tuples_as_objects 1
+
+echo "============="
+
+$CLICKHOUSE_CLIENT -q "
+    WITH (data.2)['aa'] AS aa, (data.2)['bb'] AS bb
+    SELECT tupleElement(aa, 'k1') AS k1,
+           tupleElement(aa, 'k4') AS k4
+    FROM t_json_nested ORDER BY id FORMAT JSONEachRow" --output_format_json_named_tuples_as_objects 1
+
+echo "============="
+
+$CLICKHOUSE_CLIENT -q "SELECT data.3 AS obj FROM t_json_nested ORDER BY id FORMAT JSONEachRow" --output_format_json_named_tuples_as_objects 1
+
+${CLICKHOUSE_CLIENT} -q "DROP TABLE IF EXISTS t_json_nested"
+
