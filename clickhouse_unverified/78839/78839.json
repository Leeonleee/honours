{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 78839,
  "instance_id": "ClickHouse__ClickHouse-78839",
  "issue_numbers": [
    "78754"
  ],
  "base_commit": "af8759d87de513aae53fc12d3a1123f08e9ccd26",
  "patch": "diff --git a/base/base/BFloat16.h b/base/base/BFloat16.h\nindex 266f125da7ce..befdf8546c25 100644\n--- a/base/base/BFloat16.h\n+++ b/base/base/BFloat16.h\n@@ -48,6 +48,13 @@ class BFloat16\n     {\n     }\n \n+    static constexpr BFloat16 fromBits(UInt16 bits) noexcept\n+    {\n+        BFloat16 res;\n+        res.x = bits;\n+        return res;\n+    }\n+\n     template <typename T>\n     constexpr BFloat16 & operator=(const T & other)\n     {\n@@ -312,3 +319,16 @@ constexpr inline auto operator/(BFloat16 a, T b)\n {\n     return Float32(a) / b;\n }\n+\n+namespace std\n+{\n+template <>\n+class numeric_limits<BFloat16>\n+{\n+public:\n+    static constexpr BFloat16 lowest() noexcept { return BFloat16::fromBits(0b1111111101111111); }\n+    static constexpr BFloat16 min() noexcept { return BFloat16::fromBits(0b0000000100000000); }\n+    static constexpr BFloat16 max() noexcept { return BFloat16::fromBits(0b0111111101111111); }\n+    static constexpr BFloat16 infinity() noexcept { return BFloat16::fromBits(0b0111111110000000); }\n+};\n+}\ndiff --git a/src/Interpreters/convertFieldToType.cpp b/src/Interpreters/convertFieldToType.cpp\nindex 5c9c2de6bbfc..c088a2e9298e 100644\n--- a/src/Interpreters/convertFieldToType.cpp\n+++ b/src/Interpreters/convertFieldToType.cpp\n@@ -244,6 +244,8 @@ Field convertFieldToTypeImpl(const Field & src, const IDataType & type, const ID\n             return convertNumericType<Int128>(src, type);\n         if (which_type.isInt256())\n             return convertNumericType<Int256>(src, type);\n+        if (which_type.isBFloat16())\n+            return convertNumericType<BFloat16>(src, type);\n         if (which_type.isFloat32())\n             return convertNumericType<Float32>(src, type);\n         if (which_type.isFloat64())\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03404_bfloat16_insert_values.reference b/tests/queries/0_stateless/03404_bfloat16_insert_values.reference\nnew file mode 100644\nindex 000000000000..d09c8353eab8\n--- /dev/null\n+++ b/tests/queries/0_stateless/03404_bfloat16_insert_values.reference\n@@ -0,0 +1,18 @@\n+Basic tests\n+0\n+1\n+1\n+1\n+1\n+Edge cases\n+1\n+1\n+1\n+1\n+0\n+Compare to Float32\n+1\n+1\n+1\n+1\n+0\ndiff --git a/tests/queries/0_stateless/03404_bfloat16_insert_values.sql b/tests/queries/0_stateless/03404_bfloat16_insert_values.sql\nnew file mode 100644\nindex 000000000000..75cb3fe45029\n--- /dev/null\n+++ b/tests/queries/0_stateless/03404_bfloat16_insert_values.sql\n@@ -0,0 +1,20 @@\n+SELECT 'Basic tests';\n+SELECT toBFloat16(-1) IN [0, 1, 2] AS result;\n+SELECT toBFloat16(-1) IN [-2, -1, 0, 1, 2] AS result;\n+SELECT toBFloat16(-1) IN [toFloat32(-2), toFloat32(-1), toFloat32(0), toFloat32(1), toFloat32(2)] AS result;\n+SELECT toBFloat16(-1) IN [toFloat64(-2), toFloat64(-1), toFloat64(0), toFloat64(1), toFloat64(2)] AS result;\n+SELECT toFloat64(-1) IN [toBFloat16(-2), toBFloat16(-1), toBFloat16(0), toBFloat16(1), toBFloat16(2)] AS result;\n+\n+SELECT 'Edge cases';\n+SELECT toBFloat16(0) IN [-0] AS result;\n+SELECT toBFloat16(0/0) IN [0/0] AS result;\n+SELECT toBFloat16(0/0) IN [-0/0] AS result;\n+SELECT toBFloat16(1/0) IN [1/0] AS result;\n+SELECT toBFloat16(1/0) IN [-1/0] AS result;\n+\n+SELECT 'Compare to Float32';\n+SELECT toFloat32(0) IN [-0] AS result;\n+SELECT toFloat32(0/0) IN [0/0] AS result;\n+SELECT toFloat32(0/0) IN [-0/0] AS result;\n+SELECT toFloat32(1/0) IN [1/0] AS result;\n+SELECT toFloat32(1/0) IN [-1/0] AS result;\n",
  "problem_statement": "IN clause fails for BFloat16 due to type mismatch with array\n### Describe what's wrong\n\n`IN` clause fails with `toBFloat16(...)` while working fine with `toFloat64(...)` and `toFloat32(...)` for the same input values.\n\n### Does it reproduce on the most recent release?\n\nYes\n\n### How to reproduce\n\nRun the following queries:\n\n```\nSELECT toFloat64(1) IN [1, 2, 3];   -- returns 1\nSELECT toFloat32(1) IN [1, 2, 3];   -- returns 1\nSELECT toBFloat16(1) IN [1, 2, 3];  -- throws\n```\n\n[Link](https://fiddle.clickhouse.com/395a083d-477a-4af7-acf7-3c4d5aea95d8) to reproduce. \n\n### Expected behavior\n\nAll three expressions should return 1. Type coercion should match `toBFloat16(1)` with the array `[1, 2, 3]` just like it does for `Float32` and `Float64`.\n\n### Error message and/or stacktrace\n\n\n```\nReceived exception from server (version 25.3.2):\nCode: 53. DB::Exception: Received from localhost:9000. DB::Exception: Type mismatch in IN or VALUES section. Expected: BFloat16. Got: UInt64. (TYPE_MISMATCH)\n(query: SELECT toBFloat16(1) IN [1, 2, 3];)\n```\n",
  "hints_text": "",
  "created_at": "2025-04-08T13:00:21Z",
  "modified_files": [
    "base/base/BFloat16.h",
    "src/Interpreters/convertFieldToType.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03404_bfloat16_insert_values.reference",
    "b/tests/queries/0_stateless/03404_bfloat16_insert_values.sql"
  ]
}