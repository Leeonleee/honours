{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 5820,
  "instance_id": "ClickHouse__ClickHouse-5820",
  "issue_numbers": [
    "5817"
  ],
  "base_commit": "106a2d0c0f44d09ac50376304977e3909b989c1e",
  "patch": "diff --git a/dbms/src/Columns/ColumnConst.h b/dbms/src/Columns/ColumnConst.h\nindex 05a9562e5491..be9e9ff839ad 100644\n--- a/dbms/src/Columns/ColumnConst.h\n+++ b/dbms/src/Columns/ColumnConst.h\n@@ -99,6 +99,11 @@ class ColumnConst final : public COWHelper<IColumn, ColumnConst>\n         return data->getBool(0);\n     }\n \n+    Float64 getFloat64(size_t) const override\n+    {\n+        return data->getFloat64(0);\n+    }\n+\n     bool isNullAt(size_t) const override\n     {\n         return data->isNullAt(0);\ndiff --git a/dbms/src/Columns/ColumnLowCardinality.h b/dbms/src/Columns/ColumnLowCardinality.h\nindex d36b91b0c40b..60a332b22b94 100644\n--- a/dbms/src/Columns/ColumnLowCardinality.h\n+++ b/dbms/src/Columns/ColumnLowCardinality.h\n@@ -57,6 +57,8 @@ class ColumnLowCardinality final : public COWHelper<IColumn, ColumnLowCardinalit\n     UInt64 get64(size_t n) const override { return getDictionary().get64(getIndexes().getUInt(n)); }\n     UInt64 getUInt(size_t n) const override { return getDictionary().getUInt(getIndexes().getUInt(n)); }\n     Int64 getInt(size_t n) const override { return getDictionary().getInt(getIndexes().getUInt(n)); }\n+    Float64 getFloat64(size_t n) const override { return getDictionary().getInt(getIndexes().getFloat64(n)); }\n+    bool getBool(size_t n) const override { return getDictionary().getInt(getIndexes().getBool(n)); }\n     bool isNullAt(size_t n) const override { return getDictionary().isNullAt(getIndexes().getUInt(n)); }\n     ColumnPtr cut(size_t start, size_t length) const override\n     {\ndiff --git a/dbms/src/Columns/ColumnUnique.h b/dbms/src/Columns/ColumnUnique.h\nindex 11344a23a1f3..322d61081d2f 100644\n--- a/dbms/src/Columns/ColumnUnique.h\n+++ b/dbms/src/Columns/ColumnUnique.h\n@@ -64,6 +64,8 @@ class ColumnUnique final : public COWHelper<IColumnUnique, ColumnUnique<ColumnTy\n     UInt64 get64(size_t n) const override { return getNestedColumn()->get64(n); }\n     UInt64 getUInt(size_t n) const override { return getNestedColumn()->getUInt(n); }\n     Int64 getInt(size_t n) const override { return getNestedColumn()->getInt(n); }\n+    Float64 getFloat64(size_t n) const override { return getNestedColumn()->getFloat64(n); }\n+    bool getBool(size_t n) const override { return getNestedColumn()->getBool(n); }\n     bool isNullAt(size_t n) const override { return is_nullable && n == getNullValueIndex(); }\n     StringRef serializeValueIntoArena(size_t n, Arena & arena, char const *& begin) const override;\n     void updateHashWithValue(size_t n, SipHash & hash_func) const override\n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/00960_eval_ml_method_const.reference b/dbms/tests/queries/0_stateless/00960_eval_ml_method_const.reference\nnew file mode 100644\nindex 000000000000..573541ac9702\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/00960_eval_ml_method_const.reference\n@@ -0,0 +1,1 @@\n+0\ndiff --git a/dbms/tests/queries/0_stateless/00960_eval_ml_method_const.sql b/dbms/tests/queries/0_stateless/00960_eval_ml_method_const.sql\nnew file mode 100644\nindex 000000000000..401c83af917e\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/00960_eval_ml_method_const.sql\n@@ -0,0 +1,1 @@\n+WITH (SELECT stochasticLinearRegressionState(1, 2, 3)) AS model SELECT evalMLMethod(model, toFloat64(1), toFloat64(1));\n",
  "problem_statement": "Const input on ml functions\nML functions on constant inputs:\r\n`\r\nWITH (SELECT state FROM your_model) AS model SELECT evalMLMethod(model, toFloat64(1), toFloat64(1));\r\n`\r\n\r\nfails with error:\r\n`\r\nDB::Exception: Method getFloat64 is not supported for Const(Float64).\r\n`\r\n\r\nYou can use a temporary table as a workaround but it'll be helpful be able to use constant inputs as well.\n",
  "hints_text": "",
  "created_at": "2019-07-01T13:50:48Z"
}