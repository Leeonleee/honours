{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 39470,
  "instance_id": "ClickHouse__ClickHouse-39470",
  "issue_numbers": [
    "39469"
  ],
  "base_commit": "41476d20347d6ce3d1d1b7c10c97d0f2e005cc9d",
  "patch": "diff --git a/src/Storages/MergeTree/MergeTreeData.cpp b/src/Storages/MergeTree/MergeTreeData.cpp\nindex 07f737590146..a8cb75123189 100644\n--- a/src/Storages/MergeTree/MergeTreeData.cpp\n+++ b/src/Storages/MergeTree/MergeTreeData.cpp\n@@ -5578,7 +5578,7 @@ std::optional<ProjectionCandidate> MergeTreeData::getQueryProcessingStageWithAgg\n \n         if (analysis_result.prewhere_info)\n         {\n-            candidate.prewhere_info = analysis_result.prewhere_info;\n+            candidate.prewhere_info = analysis_result.prewhere_info->clone();\n \n             auto prewhere_actions = candidate.prewhere_info->prewhere_actions->clone();\n             auto prewhere_required_columns = required_columns;\ndiff --git a/src/Storages/SelectQueryInfo.h b/src/Storages/SelectQueryInfo.h\nindex 36eea35e728a..2e40a676910e 100644\n--- a/src/Storages/SelectQueryInfo.h\n+++ b/src/Storages/SelectQueryInfo.h\n@@ -64,6 +64,24 @@ struct PrewhereInfo\n             : prewhere_actions(std::move(prewhere_actions_)), prewhere_column_name(std::move(prewhere_column_name_)) {}\n \n     std::string dump() const;\n+\n+    PrewhereInfoPtr clone() const\n+    {\n+        PrewhereInfoPtr prewhere_info = std::make_shared<PrewhereInfo>();\n+\n+        if (row_level_filter)\n+            prewhere_info->row_level_filter = row_level_filter->clone();\n+\n+        if (prewhere_actions)\n+            prewhere_info->prewhere_actions = prewhere_actions->clone();\n+\n+        prewhere_info->row_level_column_name = row_level_column_name;\n+        prewhere_info->prewhere_column_name = prewhere_column_name;\n+        prewhere_info->remove_prewhere_column = remove_prewhere_column;\n+        prewhere_info->need_filter = need_filter;\n+\n+        return prewhere_info;\n+    }\n };\n \n /// Helper struct to store all the information about the filter expression.\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02371_select_projection_normal_agg.reference b/tests/queries/0_stateless/02371_select_projection_normal_agg.reference\nnew file mode 100644\nindex 000000000000..9972842f9827\n--- /dev/null\n+++ b/tests/queries/0_stateless/02371_select_projection_normal_agg.reference\n@@ -0,0 +1,1 @@\n+1\t1\ndiff --git a/tests/queries/0_stateless/02371_select_projection_normal_agg.sql b/tests/queries/0_stateless/02371_select_projection_normal_agg.sql\nnew file mode 100644\nindex 000000000000..283aec0b1223\n--- /dev/null\n+++ b/tests/queries/0_stateless/02371_select_projection_normal_agg.sql\n@@ -0,0 +1,124 @@\n+DROP TABLE IF EXISTS video_log;\n+\n+CREATE TABLE video_log\n+(\n+    `datetime` DateTime,\n+    `user_id` UInt64,\n+    `device_id` UInt64,\n+    `domain` LowCardinality(String),\n+    `bytes` UInt64,\n+    `duration` UInt64\n+)\n+ENGINE = MergeTree\n+PARTITION BY toDate(datetime)\n+ORDER BY (user_id, device_id);\n+\n+DROP TABLE IF EXISTS rng;\n+\n+CREATE TABLE rng\n+(\n+    `user_id_raw` UInt64,\n+    `device_id_raw` UInt64,\n+    `domain_raw` UInt64,\n+    `bytes_raw` UInt64,\n+    `duration_raw` UInt64\n+)\n+ENGINE = GenerateRandom(1024);\n+\n+INSERT INTO video_log SELECT\n+  toUnixTimestamp('2022-07-22 01:00:00')\n+  + (rowNumberInAllBlocks() / 20000),\n+  user_id_raw % 100000000 AS user_id,\n+  device_id_raw % 200000000 AS device_id,\n+  domain_raw % 100,\n+  (bytes_raw % 1024) + 128,\n+  (duration_raw % 300) + 100\n+FROM rng\n+LIMIT 1728000;\n+\n+INSERT INTO video_log SELECT\n+  toUnixTimestamp('2022-07-22 01:00:00')\n+  + (rowNumberInAllBlocks() / 20000),\n+  user_id_raw % 100000000 AS user_id,\n+  100 AS device_id,\n+  domain_raw % 100,\n+  (bytes_raw % 1024) + 128,\n+  (duration_raw % 300) + 100\n+FROM rng\n+LIMIT 10;\n+\n+DROP TABLE IF EXISTS video_log_result;\n+\n+CREATE TABLE video_log_result\n+(\n+    `hour` DateTime,\n+    `sum_bytes` UInt64,\n+    `avg_duration` Float64\n+)\n+ENGINE = MergeTree\n+PARTITION BY toDate(hour)\n+ORDER BY sum_bytes;\n+\n+INSERT INTO video_log_result SELECT\n+    toStartOfHour(datetime) AS hour,\n+    sum(bytes),\n+    avg(duration)\n+FROM video_log\n+WHERE (toDate(hour) = '2022-07-22') AND (device_id = '100') --(device_id = '100') Make sure it's not good and doesn't go into prewhere.\n+GROUP BY hour;\n+\n+\n+ALTER TABLE video_log ADD PROJECTION p_norm\n+(\n+    SELECT\n+        datetime,\n+        device_id,\n+        bytes,\n+        duration\n+    ORDER BY device_id\n+);\n+\n+ALTER TABLE video_log MATERIALIZE PROJECTION p_norm settings mutations_sync=1;\n+\n+ALTER TABLE video_log ADD PROJECTION p_agg\n+(\n+    SELECT\n+        toStartOfHour(datetime) AS hour,\n+        domain,\n+        sum(bytes),\n+        avg(duration)\n+    GROUP BY\n+        hour,\n+        domain\n+);\n+\n+ALTER TABLE video_log MATERIALIZE PROJECTION p_agg settings mutations_sync=1;\n+\n+SELECT\n+    equals(sum_bytes1, sum_bytes2),\n+    equals(avg_duration1, avg_duration2)\n+FROM\n+(\n+    SELECT\n+        toStartOfHour(datetime) AS hour,\n+        sum(bytes) AS sum_bytes1,\n+        avg(duration) AS avg_duration1\n+    FROM video_log\n+    WHERE (toDate(hour) = '2022-07-22') AND (device_id = '100') --(device_id = '100') Make sure it's not good and doesn't go into prewhere.\n+    GROUP BY hour\n+)\n+LEFT JOIN\n+(\n+    SELECT\n+        `hour`,\n+        `sum_bytes` AS sum_bytes2,\n+        `avg_duration` AS avg_duration2\n+    FROM video_log_result\n+)\n+USING (hour) settings joined_subquery_requires_alias=0;\n+\n+DROP TABLE IF EXISTS video_log;\n+\n+DROP TABLE IF EXISTS rng;\n+\n+DROP TABLE IF EXISTS video_log_result;\n",
  "problem_statement": "Projection select query exception. Not found column toStartOfHour(datetime) in block.\n\r\n**Describe what's wrong**\r\n\r\nI am testing projection. An exception was found during query: ```DB::Exception: Not found column toStartOfHour(datetime) in block.```\r\n\r\n**Does it reproduce on recent release?**\r\n\r\nv22.3.4.20-lts\r\n\r\n\r\n**How to reproduce**\r\n\r\n* My ClickHouse server version is 22.3.4.20 and 22.7.1\r\n\r\n```\r\nCREATE TABLE video_log\r\n(\r\n `datetime` DateTime, -- 20,000 records per second\r\n `user_id` UInt64, -- Cardinality == 100,000,000\r\n `device_id` UInt64, -- Cardinality == 200,000,000\r\n `domain` LowCardinality(String), -- Cardinality == 100\r\n `bytes` UInt64, -- Ranging from 128 to 1152\r\n `duration` UInt64 -- Ranging from 100 to 400\r\n)\r\nENGINE = MergeTree\r\nPARTITION BY toDate(datetime) -- Daily partitioning\r\nORDER BY (user_id, device_id); -- Can only favor one column here\r\n\r\nCREATE TABLE rng\r\n(\r\n `user_id_raw` UInt64,\r\n `device_id_raw` UInt64,\r\n `domain_raw` UInt64,\r\n `bytes_raw` UInt64,\r\n `duration_raw` UInt64\r\n)\r\nENGINE = GenerateRandom(1024);\r\n\r\nINSERT INTO video_log SELECT\r\n toUnixTimestamp(toDateTime(today()))\r\n + (rowNumberInAllBlocks() / 20000),\r\n user_id_raw % 100000000 AS user_id,\r\n device_id_raw % 200000000 AS device_id,\r\n domain_raw % 100,\r\n (bytes_raw % 1024) + 128,\r\n (duration_raw % 300) + 100\r\nFROM rng\r\nLIMIT 17280000;\r\n\r\nALTER TABLE video_log ADD PROJECTION p_norm\r\n (\r\n SELECT\r\n datetime,\r\n device_id,\r\n bytes,\r\n duration\r\n ORDER BY device_id\r\n );\r\n\r\nALTER TABLE video_log MATERIALIZE PROJECTION p_norm;\r\n\r\nALTER TABLE video_log ADD PROJECTION p_agg\r\n (\r\n SELECT\r\n toStartOfHour(datetime) AS hour,\r\n domain,\r\n sum(bytes),\r\n avg(duration)\r\n GROUP BY\r\n hour,\r\n domain\r\n );\r\n\r\nALTER TABLE video_log MATERIALIZE PROJECTION p_agg;\r\n\r\n```\r\n```\r\n\r\nSELECT\r\n    toStartOfHour(datetime) AS hour,\r\n    sum(bytes),\r\n    avg(duration)\r\nFROM video_log\r\nWHERE (toDate(hour) = today()) AND (device_id = '100')\r\nGROUP BY hour\r\n\r\nQuery id: ffc3bc0c-26cf-4415-9a00-d2184130c30d\r\n\r\n\r\n0 rows in set. Elapsed: 0.035 sec. \r\n\r\nReceived exception from server (version 22.7.1):\r\nCode: 10. DB::Exception: Received from localhost:9000. DB::Exception: Not found column toStartOfHour(datetime) in block. (NOT_FOUND_COLUMN_IN_BLOCK)\r\n\r\n```\r\n\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2022-07-21T15:54:55Z"
}