{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 13394,
  "instance_id": "ClickHouse__ClickHouse-13394",
  "issue_numbers": [
    "7746"
  ],
  "base_commit": "4c08fff0d3fe4431e512e2f0d445a2644c21c5c1",
  "patch": "diff --git a/src/Formats/FormatFactory.cpp b/src/Formats/FormatFactory.cpp\nindex c126e5696aa9..5256ab2b321f 100644\n--- a/src/Formats/FormatFactory.cpp\n+++ b/src/Formats/FormatFactory.cpp\n@@ -10,7 +10,6 @@\n #include <Processors/Formats/IRowInputFormat.h>\n #include <Processors/Formats/InputStreamFromInputFormat.h>\n #include <Processors/Formats/OutputStreamToOutputFormat.h>\n-#include <DataStreams/SquashingBlockOutputStream.h>\n #include <DataStreams/NativeBlockInputStream.h>\n #include <Processors/Formats/Impl/ValuesBlockInputFormat.h>\n #include <Processors/Formats/Impl/MySQLOutputFormat.h>\n@@ -203,19 +202,6 @@ BlockInputStreamPtr FormatFactory::getInput(\n BlockOutputStreamPtr FormatFactory::getOutput(\n     const String & name, WriteBuffer & buf, const Block & sample, const Context & context, WriteCallback callback) const\n {\n-    if (name == \"PrettyCompactMonoBlock\")\n-    {\n-        /// TODO: rewrite\n-        auto format = getOutputFormat(\"PrettyCompact\", buf, sample, context);\n-        auto res = std::make_shared<SquashingBlockOutputStream>(\n-                std::make_shared<OutputStreamToOutputFormat>(format),\n-                sample, context.getSettingsRef().output_format_pretty_max_rows, 0);\n-\n-        res->disableFlush();\n-\n-        return std::make_shared<MaterializingBlockOutputStream>(res, sample);\n-    }\n-\n     if (!getCreators(name).output_processor_creator)\n     {\n         const auto & output_getter = getCreators(name).output_creator;\ndiff --git a/src/Formats/FormatFactory.h b/src/Formats/FormatFactory.h\nindex ebd1934ef60e..ea4004c191f7 100644\n--- a/src/Formats/FormatFactory.h\n+++ b/src/Formats/FormatFactory.h\n@@ -134,7 +134,6 @@ class FormatFactory final : private boost::noncopyable\n     }\n \n private:\n-    /// FormatsDictionary dict;\n     FormatsDictionary dict;\n \n     FormatFactory();\ndiff --git a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h\nindex a873e02c1e48..59628cf322c2 100644\n--- a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h\n+++ b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h\n@@ -42,7 +42,7 @@ class PrettyBlockOutputFormat : public IOutputFormat\n     virtual void writeSuffix();\n \n \n-    void writeSuffixIfNot()\n+    virtual void writeSuffixIfNot()\n     {\n         if (!suffix_written)\n             writeSuffix();\ndiff --git a/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.cpp b/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.cpp\nindex b7e6b4925edb..254bb9381f2c 100644\n--- a/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.cpp\n@@ -1,7 +1,6 @@\n #include <Common/PODArray.h>\n #include <IO/WriteBuffer.h>\n #include <IO/WriteHelpers.h>\n-///#include <DataStreams/SquashingBlockOutputStream.h>\n #include <Formats/FormatFactory.h>\n #include <Processors/Formats/Impl/PrettyCompactBlockOutputFormat.h>\n \n@@ -48,6 +47,23 @@ GridSymbols ascii_grid_symbols {\n \n }\n \n+PrettyCompactBlockOutputFormat::PrettyCompactBlockOutputFormat(WriteBuffer & out_, const Block & header, const FormatSettings & format_settings_, bool mono_block_)\n+    : PrettyBlockOutputFormat(out_, header, format_settings_)\n+    , mono_block(mono_block_)\n+{\n+}\n+\n+void PrettyCompactBlockOutputFormat::writeSuffixIfNot()\n+{\n+    if (mono_chunk)\n+    {\n+        writeChunk(mono_chunk, PortKind::Main);\n+        mono_chunk.clear();\n+    }\n+\n+    PrettyBlockOutputFormat::writeSuffixIfNot();\n+}\n+\n void PrettyCompactBlockOutputFormat::writeHeader(\n     const Block & block,\n     const Widths & max_widths,\n@@ -159,6 +175,39 @@ void PrettyCompactBlockOutputFormat::write(const Chunk & chunk, PortKind port_ki\n         total_rows += chunk.getNumRows();\n         return;\n     }\n+    if (mono_block)\n+    {\n+        if (port_kind == PortKind::Main)\n+        {\n+            if (!mono_chunk)\n+            {\n+                mono_chunk = chunk.clone();\n+                return;\n+            }\n+\n+            MutableColumns mutation = mono_chunk.mutateColumns();\n+            for (size_t position = 0; position < mutation.size(); ++position)\n+            {\n+                auto column = chunk.getColumns()[position];\n+                mutation[position]->insertRangeFrom(*column, 0, column->size());\n+            }\n+            size_t rows = mutation[0]->size();\n+            mono_chunk.setColumns(std::move(mutation), rows);\n+            return;\n+        }\n+        else\n+        {\n+            /// Should be written from writeSuffixIfNot()\n+            assert(!mono_chunk);\n+        }\n+    }\n+\n+    writeChunk(chunk, port_kind);\n+}\n+\n+void PrettyCompactBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind port_kind)\n+{\n+    UInt64 max_rows = format_settings.pretty.max_rows;\n \n     size_t num_rows = chunk.getNumRows();\n     const auto & header = getPort(port_kind).getHeader();\n@@ -182,14 +231,17 @@ void PrettyCompactBlockOutputFormat::write(const Chunk & chunk, PortKind port_ki\n \n void registerOutputFormatProcessorPrettyCompact(FormatFactory & factory)\n {\n-    factory.registerOutputFormatProcessor(\"PrettyCompact\", [](\n-        WriteBuffer & buf,\n-        const Block & sample,\n-        FormatFactory::WriteCallback,\n-        const FormatSettings & format_settings)\n+    for (const auto & [name, mono_block] : {std::make_pair(\"PrettyCompact\", false), std::make_pair(\"PrettyCompactMonoBlock\", true)})\n     {\n-        return std::make_shared<PrettyCompactBlockOutputFormat>(buf, sample, format_settings);\n-    });\n+        factory.registerOutputFormatProcessor(name, [mono_block = mono_block](\n+            WriteBuffer & buf,\n+            const Block & sample,\n+            FormatFactory::WriteCallback,\n+            const FormatSettings & format_settings)\n+        {\n+            return std::make_shared<PrettyCompactBlockOutputFormat>(buf, sample, format_settings, mono_block);\n+        });\n+    }\n \n     factory.registerOutputFormatProcessor(\"PrettyCompactNoEscapes\", [](\n         WriteBuffer & buf,\n@@ -199,20 +251,8 @@ void registerOutputFormatProcessorPrettyCompact(FormatFactory & factory)\n     {\n         FormatSettings changed_settings = format_settings;\n         changed_settings.pretty.color = false;\n-        return std::make_shared<PrettyCompactBlockOutputFormat>(buf, sample, changed_settings);\n+        return std::make_shared<PrettyCompactBlockOutputFormat>(buf, sample, changed_settings, false /* mono_block */);\n     });\n-\n-/// TODO\n-//    factory.registerOutputFormat(\"PrettyCompactMonoBlock\", [](\n-//        WriteBuffer & buf,\n-//        const Block & sample,\n-//        const FormatSettings & format_settings)\n-//    {\n-//        BlockOutputStreamPtr impl = std::make_shared<PrettyCompactBlockOutputFormat>(buf, sample, format_settings);\n-//        auto res = std::make_shared<SquashingBlockOutputStream>(impl, impl->getHeader(), format_settings.pretty.max_rows, 0);\n-//        res->disableFlush();\n-//        return res;\n-//    });\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.h b/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.h\nindex 8130577995a9..90c9d3751928 100644\n--- a/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.h\n+++ b/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.h\n@@ -1,6 +1,8 @@\n #pragma once\n \n #include <Processors/Formats/Impl/PrettyBlockOutputFormat.h>\n+#include <optional>\n+#include <unordered_map>\n \n \n namespace DB\n@@ -11,9 +13,7 @@ namespace DB\n class PrettyCompactBlockOutputFormat : public PrettyBlockOutputFormat\n {\n public:\n-    PrettyCompactBlockOutputFormat(WriteBuffer & out_, const Block & header, const FormatSettings & format_settings_)\n-        : PrettyBlockOutputFormat(out_, header, format_settings_) {}\n-\n+    PrettyCompactBlockOutputFormat(WriteBuffer & out_, const Block & header, const FormatSettings & format_settings_, bool mono_block_);\n     String getName() const override { return \"PrettyCompactBlockOutputFormat\"; }\n \n protected:\n@@ -26,6 +26,14 @@ class PrettyCompactBlockOutputFormat : public PrettyBlockOutputFormat\n         const Columns & columns,\n         const WidthsPerColumn & widths,\n         const Widths & max_widths);\n+\n+private:\n+    bool mono_block;\n+    /// For mono_block == true only\n+    Chunk mono_chunk;\n+\n+    void writeChunk(const Chunk & chunk, PortKind port_kind);\n+    void writeSuffixIfNot() override;\n };\n \n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00405_PrettyCompactMonoBlock.reference b/tests/queries/0_stateless/00405_PrettyCompactMonoBlock.reference\nnew file mode 100644\nindex 000000000000..94d3efa6e0a9\n--- /dev/null\n+++ b/tests/queries/0_stateless/00405_PrettyCompactMonoBlock.reference\n@@ -0,0 +1,32 @@\n+one block\n+\u250c\u2500\u001b[1mnumber\u001b[0m\u2500\u2510\n+\u2502      0 \u2502\n+\u2502      1 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+two blocks\n+\u250c\u2500\u001b[1mnumber\u001b[0m\u2500\u2510\n+\u2502      0 \u2502\n+\u2502      0 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+extremes\n+\u250c\u2500\u001b[1mnumber\u001b[0m\u2500\u2510\n+\u2502      0 \u2502\n+\u2502      1 \u2502\n+\u2502      2 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\n+Extremes:\n+\u250c\u2500\u001b[1mnumber\u001b[0m\u2500\u2510\n+\u2502      0 \u2502\n+\u2502      2 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+totals\n+\u250c\u2500\u001b[1msum(number)\u001b[0m\u2500\u2510\n+\u2502           2 \u2502\n+\u2502           1 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\n+Totals:\n+\u250c\u2500\u001b[1msum(number)\u001b[0m\u2500\u2510\n+\u2502           3 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndiff --git a/tests/queries/0_stateless/00405_PrettyCompactMonoBlock.sh b/tests/queries/0_stateless/00405_PrettyCompactMonoBlock.sh\nnew file mode 100755\nindex 000000000000..a353ce5ea5cf\n--- /dev/null\n+++ b/tests/queries/0_stateless/00405_PrettyCompactMonoBlock.sh\n@@ -0,0 +1,13 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+. \"$CURDIR\"/../shell_config.sh\n+\n+echo 'one block'\n+${CLICKHOUSE_LOCAL} --query=\"SELECT * FROM numbers(2)\" --format PrettyCompactMonoBlock\n+echo 'two blocks'\n+${CLICKHOUSE_LOCAL} --query=\"SELECT * FROM numbers(1) UNION ALL SELECT * FROM numbers(1)\" --format PrettyCompactMonoBlock\n+echo 'extremes'\n+${CLICKHOUSE_LOCAL} --query=\"SELECT * FROM numbers(3)\" --format PrettyCompactMonoBlock --extremes=1\n+echo 'totals'\n+${CLICKHOUSE_LOCAL} --query=\"SELECT sum(number) FROM numbers(3) GROUP BY number%2 WITH TOTALS\" --format PrettyCompactMonoBlock\n",
  "problem_statement": "PrettyCompactMonoBlock is not listed in system.formats so no autocompletion for it\n```\r\nSELECT *\r\nFROM system.formats\r\nWHERE name LIKE '%Mono%'\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.001 sec. \r\n\r\n\r\nSELECT *\r\nFROM numbers(2)\r\nFORMAT PrettyCompactMonoBlock\r\n\r\n\u250c\u2500number\u2500\u2510\r\n\u2502      0 \u2502\r\n\u2502      1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n2 rows in set. Elapsed: 0.001 sec. \r\n```\n",
  "hints_text": "@KochetovNicolai It's your TODO in code.",
  "created_at": "2020-08-05T22:49:25Z",
  "modified_files": [
    "src/Formats/FormatFactory.cpp",
    "src/Formats/FormatFactory.h",
    "src/Processors/Formats/Impl/PrettyBlockOutputFormat.h",
    "src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.cpp",
    "src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/00405_PrettyCompactMonoBlock.reference",
    "b/tests/queries/0_stateless/00405_PrettyCompactMonoBlock.sh"
  ]
}