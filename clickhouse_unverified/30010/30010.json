{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 30010,
  "instance_id": "ClickHouse__ClickHouse-30010",
  "issue_numbers": [
    "26301",
    "9589"
  ],
  "base_commit": "f1b550cdaf41728824bb91db50b97238bf54de32",
  "patch": "diff --git a/cmake/find/ssl.cmake b/cmake/find/ssl.cmake\nindex fd6ed56dcdbb..fdc0bfb27d37 100644\n--- a/cmake/find/ssl.cmake\n+++ b/cmake/find/ssl.cmake\n@@ -53,12 +53,7 @@ endif ()\n if (NOT OPENSSL_FOUND AND NOT MISSING_INTERNAL_SSL_LIBRARY)\n     set (USE_INTERNAL_SSL_LIBRARY 1)\n     set (OPENSSL_ROOT_DIR \"${ClickHouse_SOURCE_DIR}/contrib/boringssl\")\n-\n-    if (ARCH_AMD64)\n-        set (OPENSSL_INCLUDE_DIR \"${OPENSSL_ROOT_DIR}/include\")\n-    elseif (ARCH_AARCH64)\n-        set (OPENSSL_INCLUDE_DIR \"${OPENSSL_ROOT_DIR}/include\")\n-    endif ()\n+    set (OPENSSL_INCLUDE_DIR \"${OPENSSL_ROOT_DIR}/include\")\n     set (OPENSSL_CRYPTO_LIBRARY crypto)\n     set (OPENSSL_SSL_LIBRARY ssl)\n     set (OPENSSL_FOUND 1)\ndiff --git a/cmake/linux/default_libs.cmake b/cmake/linux/default_libs.cmake\nindex c1e4d4503897..a2da7ba19150 100644\n--- a/cmake/linux/default_libs.cmake\n+++ b/cmake/linux/default_libs.cmake\n@@ -5,7 +5,7 @@ set (DEFAULT_LIBS \"-nodefaultlibs\")\n \n # We need builtins from Clang's RT even without libcxx - for ubsan+int128.\n # See https://bugs.llvm.org/show_bug.cgi?id=16404\n-if (COMPILER_CLANG AND NOT (CMAKE_CROSSCOMPILING AND ARCH_AARCH64))\n+if (COMPILER_CLANG AND NOT CMAKE_CROSSCOMPILING)\n     execute_process (COMMAND ${CMAKE_CXX_COMPILER} --print-libgcc-file-name --rtlib=compiler-rt OUTPUT_VARIABLE BUILTINS_LIBRARY OUTPUT_STRIP_TRAILING_WHITESPACE)\n else ()\n     set (BUILTINS_LIBRARY \"-lgcc\")\ndiff --git a/cmake/linux/toolchain-ppc64le.cmake b/cmake/linux/toolchain-ppc64le.cmake\nnew file mode 100644\nindex 000000000000..cf85fc20fc4f\n--- /dev/null\n+++ b/cmake/linux/toolchain-ppc64le.cmake\n@@ -0,0 +1,32 @@\n+set (CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)\n+\n+set (CMAKE_SYSTEM_NAME \"Linux\")\n+set (CMAKE_SYSTEM_PROCESSOR \"ppc64le\")\n+set (CMAKE_C_COMPILER_TARGET \"ppc64le-linux-gnu\")\n+set (CMAKE_CXX_COMPILER_TARGET \"ppc64le-linux-gnu\")\n+set (CMAKE_ASM_COMPILER_TARGET \"ppc64le-linux-gnu\")\n+\n+set (TOOLCHAIN_PATH \"${CMAKE_CURRENT_LIST_DIR}/../../contrib/sysroot/linux-powerpc64le\")\n+\n+set (CMAKE_SYSROOT \"${TOOLCHAIN_PATH}/powerpc64le-linux-gnu/libc\")\n+\n+find_program (LLVM_AR_PATH NAMES \"llvm-ar\" \"llvm-ar-13\" \"llvm-ar-12\" \"llvm-ar-11\" \"llvm-ar-10\" \"llvm-ar-9\" \"llvm-ar-8\")\n+find_program (LLVM_RANLIB_PATH NAMES \"llvm-ranlib\" \"llvm-ranlib-13\" \"llvm-ranlib-12\" \"llvm-ranlib-11\" \"llvm-ranlib-10\" \"llvm-ranlib-9\")\n+\n+set (CMAKE_AR \"${LLVM_AR_PATH}\" CACHE FILEPATH \"\" FORCE)\n+set (CMAKE_RANLIB \"${LLVM_RANLIB_PATH}\" CACHE FILEPATH \"\" FORCE)\n+\n+set (CMAKE_C_FLAGS_INIT \"${CMAKE_C_FLAGS} --gcc-toolchain=${TOOLCHAIN_PATH}\")\n+set (CMAKE_CXX_FLAGS_INIT \"${CMAKE_CXX_FLAGS} --gcc-toolchain=${TOOLCHAIN_PATH}\")\n+set (CMAKE_ASM_FLAGS_INIT \"${CMAKE_ASM_FLAGS} --gcc-toolchain=${TOOLCHAIN_PATH}\")\n+\n+set (LINKER_NAME \"ld.lld\" CACHE STRING \"\" FORCE)\n+\n+set (CMAKE_EXE_LINKER_FLAGS_INIT \"-fuse-ld=lld\")\n+set (CMAKE_SHARED_LINKER_FLAGS_INIT \"-fuse-ld=lld\")\n+\n+set (HAS_PRE_1970_EXITCODE \"0\" CACHE STRING \"Result from TRY_RUN\" FORCE)\n+set (HAS_PRE_1970_EXITCODE__TRYRUN_OUTPUT \"\" CACHE STRING \"Output from TRY_RUN\" FORCE)\n+\n+set (HAS_POST_2038_EXITCODE \"0\" CACHE STRING \"Result from TRY_RUN\" FORCE)\n+set (HAS_POST_2038_EXITCODE__TRYRUN_OUTPUT \"\" CACHE STRING \"Output from TRY_RUN\" FORCE)\ndiff --git a/cmake/target.cmake b/cmake/target.cmake\nindex d1a0b8f9cbf4..e8932a893c02 100644\n--- a/cmake/target.cmake\n+++ b/cmake/target.cmake\n@@ -34,11 +34,13 @@ if (CMAKE_CROSSCOMPILING)\n             # FIXME: broken dependencies\n             set (ENABLE_PROTOBUF OFF CACHE INTERNAL \"\")\n             set (ENABLE_GRPC OFF CACHE INTERNAL \"\")\n-\n-            set (ENABLE_PARQUET OFF CACHE INTERNAL \"\")\n-            set (ENABLE_ORC OFF CACHE INTERNAL \"\")\n-\n-            set (ENABLE_MYSQL OFF CACHE INTERNAL \"\")\n+            set (USE_SENTRY OFF CACHE INTERNAL \"\")\n+#            set (ENABLE_ROCKSDB OFF CACHE INTERNAL \"\")\n+        elseif (ARCH_PPC64LE)\n+            set (ENABLE_PROTOBUF OFF CACHE INTERNAL \"\")\n+            set (ENABLE_GRPC OFF CACHE INTERNAL \"\")\n+            set (USE_SENTRY OFF CACHE INTERNAL \"\")\n+#            set (ENABLE_ROCKSDB OFF CACHE INTERNAL \"\")\n         endif ()\n     elseif (OS_FREEBSD)\n         # FIXME: broken dependencies\n@@ -53,7 +55,7 @@ if (CMAKE_CROSSCOMPILING)\n     endif ()\n \n     # Don't know why but CXX_STANDARD doesn't work for cross-compilation\n-    set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++17\")\n+    set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -std=c++20\")\n \n     message (STATUS \"Cross-compiling for target: ${CMAKE_CXX_COMPILE_TARGET}\")\n endif ()\ndiff --git a/contrib/CMakeLists.txt b/contrib/CMakeLists.txt\nindex 4d817c4c6e21..5ff85fa85c28 100644\n--- a/contrib/CMakeLists.txt\n+++ b/contrib/CMakeLists.txt\n@@ -278,7 +278,7 @@ if (USE_FASTOPS)\n endif()\n \n if (USE_AMQPCPP OR USE_CASSANDRA)\n-    add_subdirectory (libuv)\n+    add_subdirectory (libuv-cmake)\n endif()\n if (USE_AMQPCPP)\n     add_subdirectory (amqpcpp-cmake)\ndiff --git a/contrib/boost b/contrib/boost\nindex 66d17f060c48..311cfd498966 160000\n--- a/contrib/boost\n+++ b/contrib/boost\n@@ -1,1 +1,1 @@\n-Subproject commit 66d17f060c4867aeea99fa2a20cfdae89ae2a2ec\n+Subproject commit 311cfd498966d4f77742703d605d9c2e7b4cc6a8\ndiff --git a/contrib/jemalloc-cmake/include_linux_ppc64le/jemalloc/internal/jemalloc_internal_defs.h.in b/contrib/jemalloc-cmake/include_linux_ppc64le/jemalloc/internal/jemalloc_internal_defs.h.in\nindex 8068861041f4..97d0d4d84718 100644\n--- a/contrib/jemalloc-cmake/include_linux_ppc64le/jemalloc/internal/jemalloc_internal_defs.h.in\n+++ b/contrib/jemalloc-cmake/include_linux_ppc64le/jemalloc/internal/jemalloc_internal_defs.h.in\n@@ -81,7 +81,7 @@\n /* #undef JEMALLOC_HAVE_ISSETUGID */\n \n /* Defined if pthread_atfork(3) is available. */\n-#define JEMALLOC_HAVE_PTHREAD_ATFORK\n+/* #undef JEMALLOC_HAVE_PTHREAD_ATFORK */\n \n /* Defined if pthread_setname_np(3) is available. */\n #define JEMALLOC_HAVE_PTHREAD_SETNAME_NP\n@@ -284,7 +284,7 @@\n #define JEMALLOC_PURGE_MADVISE_DONTNEED_ZEROS\n \n /* Defined if madvise(2) is available but MADV_FREE is not (x86 Linux only). */\n-/* #undef JEMALLOC_DEFINE_MADVISE_FREE */\n+#define JEMALLOC_DEFINE_MADVISE_FREE\n \n /*\n  * Defined if MADV_DO[NT]DUMP is supported as an argument to madvise.\ndiff --git a/contrib/libuv b/contrib/libuv\nindex e2e9b7e9f978..95081e7c16c9 160000\n--- a/contrib/libuv\n+++ b/contrib/libuv\n@@ -1,1 +1,1 @@\n-Subproject commit e2e9b7e9f978ce8a1367b5fe781d97d1ce9f94ab\n+Subproject commit 95081e7c16c9857babe6d4e2bc1c779198ea89ae\ndiff --git a/contrib/libuv-cmake/CMakeLists.txt b/contrib/libuv-cmake/CMakeLists.txt\nnew file mode 100644\nindex 000000000000..4fbd0575b55a\n--- /dev/null\n+++ b/contrib/libuv-cmake/CMakeLists.txt\n@@ -0,0 +1,160 @@\n+# This file is a modified version of contrib/libuv/CMakeLists.txt\n+\n+include(CMakeDependentOption)\n+\n+set (SOURCE_DIR \"${CMAKE_SOURCE_DIR}/contrib/libuv\")\n+set (BINARY_DIR \"${CMAKE_BINARY_DIR}/contrib/libuv\")\n+\n+\n+if(CMAKE_C_COMPILER_ID MATCHES \"AppleClang|Clang|GNU\")\n+  list(APPEND uv_cflags -fvisibility=hidden --std=gnu89)\n+  list(APPEND uv_cflags -Wall -Wextra -Wstrict-prototypes)\n+  list(APPEND uv_cflags -Wno-unused-parameter)\n+endif()\n+\n+set(uv_sources\n+    src/fs-poll.c\n+    src/idna.c\n+    src/inet.c\n+    src/random.c\n+    src/strscpy.c\n+    src/threadpool.c\n+    src/timer.c\n+    src/uv-common.c\n+    src/uv-data-getter-setters.c\n+    src/version.c\n+    src/unix/async.c\n+    src/unix/core.c\n+    src/unix/dl.c\n+    src/unix/fs.c\n+    src/unix/getaddrinfo.c\n+    src/unix/getnameinfo.c\n+    src/unix/loop-watcher.c\n+    src/unix/loop.c\n+    src/unix/pipe.c\n+    src/unix/poll.c\n+    src/unix/process.c\n+    src/unix/random-devurandom.c\n+    src/unix/signal.c\n+    src/unix/stream.c\n+    src/unix/tcp.c\n+    src/unix/thread.c\n+    src/unix/tty.c\n+    src/unix/udp.c)\n+\n+if(APPLE OR CMAKE_SYSTEM_NAME MATCHES \"Android|Linux|OS/390\")\n+  list(APPEND uv_sources src/unix/proctitle.c)\n+endif()\n+\n+if(CMAKE_SYSTEM_NAME MATCHES \"DragonFly|FreeBSD\")\n+  list(APPEND uv_sources src/unix/freebsd.c)\n+endif()\n+\n+if(CMAKE_SYSTEM_NAME MATCHES \"DragonFly|FreeBSD|NetBSD|OpenBSD\")\n+  list(APPEND uv_sources src/unix/posix-hrtime.c src/unix/bsd-proctitle.c)\n+endif()\n+\n+if(APPLE OR CMAKE_SYSTEM_NAME MATCHES \"DragonFly|FreeBSD|NetBSD|OpenBSD\")\n+  list(APPEND uv_sources src/unix/bsd-ifaddrs.c src/unix/kqueue.c)\n+endif()\n+\n+if(CMAKE_SYSTEM_NAME MATCHES \"FreeBSD\")\n+  list(APPEND uv_sources src/unix/random-getrandom.c)\n+endif()\n+\n+if(APPLE OR CMAKE_SYSTEM_NAME STREQUAL \"OpenBSD\")\n+  list(APPEND uv_sources src/unix/random-getentropy.c)\n+endif()\n+\n+if(APPLE)\n+  list(APPEND uv_defines _DARWIN_UNLIMITED_SELECT=1 _DARWIN_USE_64_BIT_INODE=1)\n+  list(APPEND uv_sources\n+       src/unix/darwin-proctitle.c\n+       src/unix/darwin.c\n+       src/unix/fsevents.c)\n+endif()\n+\n+if(CMAKE_SYSTEM_NAME STREQUAL \"Linux\")\n+  list(APPEND uv_defines _GNU_SOURCE _POSIX_C_SOURCE=200112)\n+  list(APPEND uv_libraries dl rt)\n+  list(APPEND uv_sources\n+       src/unix/linux-core.c\n+       src/unix/linux-inotify.c\n+       src/unix/linux-syscalls.c\n+       src/unix/procfs-exepath.c\n+       src/unix/random-getrandom.c\n+       src/unix/random-sysctl-linux.c\n+       src/unix/sysinfo-loadavg.c)\n+endif()\n+\n+if(CMAKE_SYSTEM_NAME STREQUAL \"NetBSD\")\n+  list(APPEND uv_sources src/unix/netbsd.c)\n+  list(APPEND uv_libraries kvm)\n+endif()\n+\n+if(CMAKE_SYSTEM_NAME STREQUAL \"OpenBSD\")\n+  list(APPEND uv_sources src/unix/openbsd.c)\n+endif()\n+\n+if(CMAKE_SYSTEM_NAME STREQUAL \"OS/390\")\n+  list(APPEND uv_defines PATH_MAX=255)\n+  list(APPEND uv_defines _AE_BIMODAL)\n+  list(APPEND uv_defines _ALL_SOURCE)\n+  list(APPEND uv_defines _LARGE_TIME_API)\n+  list(APPEND uv_defines _OPEN_MSGQ_EXT)\n+  list(APPEND uv_defines _OPEN_SYS_FILE_EXT)\n+  list(APPEND uv_defines _OPEN_SYS_IF_EXT)\n+  list(APPEND uv_defines _OPEN_SYS_SOCK_EXT3)\n+  list(APPEND uv_defines _OPEN_SYS_SOCK_IPV6)\n+  list(APPEND uv_defines _UNIX03_SOURCE)\n+  list(APPEND uv_defines _UNIX03_THREADS)\n+  list(APPEND uv_defines _UNIX03_WITHDRAWN)\n+  list(APPEND uv_defines _XOPEN_SOURCE_EXTENDED)\n+  list(APPEND uv_sources\n+       src/unix/pthread-fixes.c\n+       src/unix/pthread-barrier.c\n+       src/unix/os390.c\n+       src/unix/os390-syscalls.c)\n+endif()\n+\n+if(CMAKE_SYSTEM_NAME STREQUAL \"SunOS\")\n+  list(APPEND uv_defines __EXTENSIONS__ _XOPEN_SOURCE=500)\n+  list(APPEND uv_libraries kstat nsl sendfile socket)\n+  list(APPEND uv_sources src/unix/no-proctitle.c src/unix/sunos.c)\n+endif()\n+\n+set(uv_sources_tmp \"\")\n+foreach(file ${uv_sources})\n+  list(APPEND uv_sources_tmp \"${SOURCE_DIR}/${file}\")\n+endforeach(file)\n+set(uv_sources \"${uv_sources_tmp}\")\n+\n+list(APPEND uv_defines CLICKHOUSE_GLIBC_COMPATIBILITY)\n+\n+add_library(uv ${uv_sources})\n+target_compile_definitions(uv\n+                           INTERFACE USING_UV_SHARED=1\n+                           PRIVATE ${uv_defines} BUILDING_UV_SHARED=1)\n+target_compile_options(uv PRIVATE ${uv_cflags})\n+target_include_directories(uv PUBLIC ${SOURCE_DIR}/include PRIVATE ${SOURCE_DIR}/src)\n+target_link_libraries(uv ${uv_libraries})\n+\n+add_library(uv_a STATIC ${uv_sources})\n+target_compile_definitions(uv_a PRIVATE ${uv_defines})\n+target_compile_options(uv_a PRIVATE ${uv_cflags})\n+target_include_directories(uv_a PUBLIC ${SOURCE_DIR}/include PRIVATE ${SOURCE_DIR}/src)\n+target_link_libraries(uv_a ${uv_libraries})\n+\n+if(UNIX)\n+  # Now for some gibbering horrors from beyond the stars...\n+  foreach(x ${uv_libraries})\n+    set(LIBS \"${LIBS} -l${x}\")\n+  endforeach(x)\n+  file(STRINGS ${SOURCE_DIR}/configure.ac configure_ac REGEX ^AC_INIT)\n+  string(REGEX MATCH [0-9]+[.][0-9]+[.][0-9]+ PACKAGE_VERSION \"${configure_ac}\")\n+  string(REGEX MATCH ^[0-9]+ UV_VERSION_MAJOR \"${PACKAGE_VERSION}\")\n+  # The version in the filename is mirroring the behaviour of autotools.\n+  set_target_properties(uv PROPERTIES VERSION ${UV_VERSION_MAJOR}.0.0\n+                      SOVERSION ${UV_VERSION_MAJOR})\n+endif()\n+\ndiff --git a/contrib/s2geometry b/contrib/s2geometry\nindex 20ea540d81f4..38b7a290f927 160000\n--- a/contrib/s2geometry\n+++ b/contrib/s2geometry\n@@ -1,1 +1,1 @@\n-Subproject commit 20ea540d81f4575a3fc0aea585aac611bcd03ede\n+Subproject commit 38b7a290f927cc372218c2094602b83e35b18c05\ndiff --git a/contrib/sysroot b/contrib/sysroot\nindex 611d3315e9e3..002415524b5d 160000\n--- a/contrib/sysroot\n+++ b/contrib/sysroot\n@@ -1,1 +1,1 @@\n-Subproject commit 611d3315e9e369a338de4ffa128eb87b4fb87dec\n+Subproject commit 002415524b5d14124bb8a61a3ce7ac65774f5479\ndiff --git a/docker/packager/packager b/docker/packager/packager\nindex f8e5fd717cfe..ae7b99200eea 100755\n--- a/docker/packager/packager\n+++ b/docker/packager/packager\n@@ -61,6 +61,7 @@ def parse_env_variables(build_type, compiler, sanitizer, package_type, image_typ\n     DARWIN_ARM_SUFFIX = \"-darwin-aarch64\"\n     ARM_SUFFIX = \"-aarch64\"\n     FREEBSD_SUFFIX = \"-freebsd\"\n+    PPC_SUFFIX = '-ppc64le'\n \n     result = []\n     cmake_flags = ['$CMAKE_FLAGS', '-DADD_GDB_INDEX_FOR_GOLD=1']\n@@ -69,8 +70,9 @@ def parse_env_variables(build_type, compiler, sanitizer, package_type, image_typ\n     is_cross_darwin = compiler.endswith(DARWIN_SUFFIX)\n     is_cross_darwin_arm = compiler.endswith(DARWIN_ARM_SUFFIX)\n     is_cross_arm = compiler.endswith(ARM_SUFFIX)\n+    is_cross_ppc = compiler.endswith(PPC_SUFFIX)\n     is_cross_freebsd = compiler.endswith(FREEBSD_SUFFIX)\n-    is_cross_compile = is_cross_darwin or is_cross_darwin_arm or is_cross_arm or is_cross_freebsd\n+    is_cross_compile = is_cross_darwin or is_cross_darwin_arm or is_cross_arm or is_cross_freebsd or is_cross_ppc\n \n     # Explicitly use LLD with Clang by default.\n     # Don't force linker for cross-compilation.\n@@ -97,6 +99,9 @@ def parse_env_variables(build_type, compiler, sanitizer, package_type, image_typ\n     elif is_cross_freebsd:\n         cc = compiler[:-len(FREEBSD_SUFFIX)]\n         cmake_flags.append(\"-DCMAKE_TOOLCHAIN_FILE=/build/cmake/freebsd/toolchain-x86_64.cmake\")\n+    elif is_cross_ppc:\n+        cc = compiler[:-len(PPC_SUFFIX)]\n+        cmake_flags.append(\"-DCMAKE_TOOLCHAIN_FILE=/build/cmake/linux/toolchain-ppc64le.cmake\")\n     else:\n         cc = compiler\n \n@@ -205,7 +210,7 @@ if __name__ == \"__main__\":\n     parser.add_argument(\"--build-type\", choices=(\"debug\", \"\"), default=\"\")\n     parser.add_argument(\"--compiler\", choices=(\"clang-11\", \"clang-11-darwin\", \"clang-11-darwin-aarch64\", \"clang-11-aarch64\",\n                                                \"clang-12\", \"clang-12-darwin\", \"clang-12-darwin-aarch64\", \"clang-12-aarch64\",\n-                                               \"clang-13\", \"clang-13-darwin\", \"clang-13-darwin-aarch64\", \"clang-13-aarch64\",\n+                                               \"clang-13\", \"clang-13-darwin\", \"clang-13-darwin-aarch64\", \"clang-13-aarch64\", \"clang-13-ppc64le\",\n                                                \"clang-11-freebsd\", \"clang-12-freebsd\", \"clang-13-freebsd\", \"gcc-11\"), default=\"clang-13\")\n     parser.add_argument(\"--sanitizer\", choices=(\"address\", \"thread\", \"memory\", \"undefined\", \"\"), default=\"\")\n     parser.add_argument(\"--unbundled\", action=\"store_true\")\ndiff --git a/src/Interpreters/ITokenExtractor.cpp b/src/Interpreters/ITokenExtractor.cpp\nindex 83166079e898..8c1af130f71a 100644\n--- a/src/Interpreters/ITokenExtractor.cpp\n+++ b/src/Interpreters/ITokenExtractor.cpp\n@@ -6,7 +6,7 @@\n #include <Common/UTF8Helpers.h>\n \n #if defined(__SSE2__)\n-#include <immintrin.h>\n+#include <emmintrin.h>\n \n #if defined(__SSE4_2__)\n #include <nmmintrin.h>\ndiff --git a/utils/CMakeLists.txt b/utils/CMakeLists.txt\nindex a6bf2843e9a7..8309b6bcb53f 100644\n--- a/utils/CMakeLists.txt\n+++ b/utils/CMakeLists.txt\n@@ -38,7 +38,7 @@ if (NOT DEFINED ENABLE_UTILS OR ENABLE_UTILS)\n     endif ()\n \n     # memcpy_jart.S contains position dependent code\n-    if (NOT CMAKE_POSITION_INDEPENDENT_CODE AND NOT OS_DARWIN AND NOT OS_SUNOS AND NOT ARCH_AARCH64)\n+    if (NOT CMAKE_POSITION_INDEPENDENT_CODE AND OS_LINUX AND ARCH_AMD64)\n         add_subdirectory (memcpy-bench)\n     endif ()\n endif ()\ndiff --git a/utils/memcpy-bench/CMakeLists.txt b/utils/memcpy-bench/CMakeLists.txt\nindex 5353b6fb68e5..593a359a876f 100644\n--- a/utils/memcpy-bench/CMakeLists.txt\n+++ b/utils/memcpy-bench/CMakeLists.txt\n@@ -16,7 +16,7 @@ add_executable (memcpy-bench\n add_compile_options(memcpy-bench PRIVATE -fno-tree-loop-distribute-patterns)\n \n if (OS_SUNOS)\n-\ttarget_compile_options(memcpy-bench PRIVATE \"-Wa,--divide\")\n+    target_compile_options(memcpy-bench PRIVATE \"-Wa,--divide\")\n endif()\n \n set_source_files_properties(FastMemcpy.cpp PROPERTIES COMPILE_FLAGS \"-Wno-old-style-cast\")\n",
  "test_patch": "diff --git a/tests/ci/ci_config.json b/tests/ci/ci_config.json\nindex 6222e4f61bcd..4feae56b93cb 100644\n--- a/tests/ci/ci_config.json\n+++ b/tests/ci/ci_config.json\n@@ -162,6 +162,16 @@\n             \"splitted\": \"unsplitted\",\n             \"tidy\": \"disable\",\n             \"with_coverage\": false\n+        },\n+        {\n+            \"compiler\": \"clang-13-ppc64le\",\n+            \"build-type\": \"\",\n+            \"sanitizer\": \"\",\n+            \"package-type\": \"binary\",\n+            \"bundled\": \"bundled\",\n+            \"splitted\": \"unsplitted\",\n+            \"tidy\": \"disable\",\n+            \"with_coverage\": false\n         }\n     ],\n     \"tests_config\": {\n",
  "problem_statement": "support mysql engine in ARM (AArch64) build\nI installed arm build with version 21.9.1.7428.\r\nAnd when I tried to create database with engine = mysql, I got below error:\r\n```\r\nDB::Exception: Unknown database engine: MySQL (version 21.9.1.7428 (official build))\r\n```\r\n\r\nMay I know when will arm build support mysql engine?\nAdd PowerPC build to CI.\nSee https://github.com/ClickHouse/ClickHouse/pull/4132#issuecomment-594733693\n",
  "hints_text": "Related: https://github.com/ClickHouse/ClickHouse/issues/21415\nHello,  indication on when this might be done? :)\nThis task is not started. It is planned for implementation in 2020.\nThanks a lot, is there any way to get a Build ClickHouse  binary for PowerPC without building it at the moment?\r\nI tried to follow the guide here from here https://github.com/ClickHouse/ClickHouse/pull/4132 , but it didnt work.\nNo, we don't have pre-built version at this moment.\n> Thanks a lot, is there any way to get a Build ClickHouse binary for PowerPC without building it at the moment?\r\n> I tried to follow the guide here from here #4132 , but it didnt work.\r\n\r\nHi, i now have unofficial RPMs and SRPMs for ppc64le here:\r\nhttps://github.com/mastertheknife/clickhouse-rpms\r\nhttps://repo.kfir.tech/clickhouse/el8/ppc64le/\r\nIt was a lot of compiling, trial and error on a POWER9 system, that eventually resulted in ~16 patches. After that, its now built on OBS from a common spec file, same way as x86_64 and aarch64, using Clang, jemalloc enabled etc.\r\nIn the next few days i will try to create pull requests for all of the patches.\n@mastertheknife This is wonderful!\r\nLooking forward for patches.\r\nAnd we will add the build to CI for support in all newer versions.",
  "created_at": "2021-10-11T22:52:47Z"
}