{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 74987,
  "instance_id": "ClickHouse__ClickHouse-74987",
  "issue_numbers": [
    "74958"
  ],
  "base_commit": "a1ef492274a5f08b274ce8e97c92cd88d785794c",
  "patch": "diff --git a/src/Storages/MergeTree/MergeTreeWhereOptimizer.cpp b/src/Storages/MergeTree/MergeTreeWhereOptimizer.cpp\nindex 89c99624d2c0..3403fe7c9328 100644\n--- a/src/Storages/MergeTree/MergeTreeWhereOptimizer.cpp\n+++ b/src/Storages/MergeTree/MergeTreeWhereOptimizer.cpp\n@@ -185,6 +185,12 @@ static void collectColumns(const RPNBuilderTreeNode & node, const NameSet & colu\n \n     auto function_node = node.toFunctionNode();\n     size_t arguments_size = function_node.getArgumentsSize();\n+\n+    /// Do not account arguments of function \"indexHint\"\n+    /// because they won't be read from table.\n+    if (function_node.getFunctionName() == \"indexHint\")\n+        return;\n+\n     for (size_t i = 0; i < arguments_size; ++i)\n     {\n         auto function_argument = function_node.getArgumentAt(i);\n@@ -545,10 +551,6 @@ bool MergeTreeWhereOptimizer::cannotBeMoved(const RPNBuilderTreeNode & node, con\n         if (function_name == \"globalIn\" || function_name == \"globalNotIn\")\n             return true;\n \n-        /// indexHint is a special function that it does not make sense to transfer to PREWHERE\n-        if (function_name == \"indexHint\")\n-            return true;\n-\n         size_t arguments_size = function_node.getArgumentsSize();\n         for (size_t i = 0; i < arguments_size; ++i)\n         {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03317_index_hint_prewhere.reference b/tests/queries/0_stateless/03317_index_hint_prewhere.reference\nnew file mode 100644\nindex 000000000000..6ed281c757a9\n--- /dev/null\n+++ b/tests/queries/0_stateless/03317_index_hint_prewhere.reference\n@@ -0,0 +1,2 @@\n+1\n+1\ndiff --git a/tests/queries/0_stateless/03317_index_hint_prewhere.sql b/tests/queries/0_stateless/03317_index_hint_prewhere.sql\nnew file mode 100644\nindex 000000000000..b7b559bc3342\n--- /dev/null\n+++ b/tests/queries/0_stateless/03317_index_hint_prewhere.sql\n@@ -0,0 +1,31 @@\n+-- Tags: no-parallel-replicas\n+\n+DROP TABLE IF EXISTS test_indexHint_prewhere;\n+\n+CREATE TABLE test_indexHint_prewhere\n+(\n+    id UInt32,\n+    colA String,\n+    colB String,\n+    INDEX colA_tokens_idx tokens(colA) TYPE bloom_filter GRANULARITY 1,\n+    INDEX colB_tokens_idx tokens(colB) TYPE bloom_filter GRANULARITY 1\n+)\n+ENGINE = MergeTree ORDER BY id SETTINGS index_granularity = 1;\n+\n+INSERT INTO test_indexHint_prewhere SELECT number, randomPrintableASCII(30), randomPrintableASCII(40) FROM numbers(100);\n+\n+SELECT count() FROM\n+(\n+    EXPLAIN actions = 1 SELECT * FROM test_indexHint_prewhere\n+    WHERE (id IN (62, 88, 89, 67)) AND ((colA LIKE '%ymo82%') OR (colB LIKE '%dKappNQY6I%'))\n+)\n+WHERE explain LIKE '%Prewhere filter column%colA%colB%';\n+\n+SELECT count() FROM\n+(\n+    EXPLAIN actions = 1 SELECT * FROM test_indexHint_prewhere\n+    WHERE (id IN (62, 88, 89, 67)) AND ((indexHint(has(tokens(colA), 'ymo82')) AND (colA LIKE '%ymo82%')) OR (indexHint(has(tokens(colB), 'dKappNQY6I')) AND (colB LIKE '%dKappNQY6I%')))\n+)\n+WHERE explain LIKE '%Prewhere filter column%colA%colB%';\n+\n+DROP TABLE test_indexHint_prewhere;\n",
  "problem_statement": "Prewhere optimization for indexHint, remove indexHint predicates when\n\n\n### Describe the situation\n\nWhen indexHint function is used with a complementary predicate, ClickHouse doesn't push the complementary predicates to Prewhere. The query needs to be restructured so that CH can use the prewhere optimization. Ideally, CH should remove the indexHint functions from the query if they are not needed to be executed and only used for filtering. \n\n### How to reproduce\n\n```\nCREATE TABLE test_indexHint_prewhere\n(\n    `id` UInt32,\n    `colA` String,\n    `colB` String,\n    INDEX colA_tokens_idx tokens(colA) TYPE bloom_filter GRANULARITY 1,\n    INDEX colB_tokens_idx tokens(colB) TYPE bloom_filter GRANULARITY 1\n)\nENGINE = MergeTree\nORDER BY id\nSETTINGS index_granularity = 1;\n\ninsert into test_indexHint_prewhere SELECT number,  randomPrintableASCII(30), randomPrintableASCII(40)  FROM system.numbers LIMIT 100;\n```\nFor the following query: \n#### Query 1: \n```\nselect * from test_indexHint_prewhere where id in (62,88,89,67) and ((indexHint(has(tokens(colA), 'ymo82')) and colA like '%ymo82%') OR (indexHint(has(tokens(colB), 'dKappNQY6I')) and  colB like '%dKappNQY6I%'))\n```\nThe corresponding test log shows the following: \n```\n2025.01.22 22:20:19.314012 [ 15942738 ] {ce06c3ac-f0ed-4fc3-9785-add535ecd49e} <Trace> MergeTreeSelectProcessor: PREWHERE condition was split into 1 steps\n2025.01.22 22:20:19.314055 [ 15942738 ] {ce06c3ac-f0ed-4fc3-9785-add535ecd49e} <Test> MergeTreeSelectProcessor: PREWHERE conditions: \"in(__table1.id, __set_UInt32_10358064706842451232_4242968589107113876)\", Original PREWHERE DAG:\n```\nBut if the query is restructured: \n#### Query 2: \n```\nselect * from test_indexHint_prewhere where id in (62,88,89,67) and (indexHint(has(tokens(colA), 'ymo82')) OR indexHint(has(tokens(colB), 'dKappNQY6I'))) and (colA like '%ymo82%' or colB like '%dKappNQY6I%')\n```\nThe corresponding test log shows the following: \n```\n2025.01.22 22:21:56.223222 [ 15942738 ] {51b12568-580c-4765-a499-3217047d9428} <Trace> MergeTreeSelectProcessor: PREWHERE condition was split into 2 steps\n2025.01.22 22:21:56.223298 [ 15942738 ] {51b12568-580c-4765-a499-3217047d9428} <Test> MergeTreeSelectProcessor: PREWHERE conditions: \"or(like(__table1.colA, '%ymo82%'_String), like(__table1.colB, '%dKappNQY6I%'_String))\", \"and(or(like(__table1.colA, '%ymo82%'_String), like(__table1.colB, '%dKappNQY6I%'_String)), in(__table1.id, __set_UInt32_10358064706842451232_4242968589107113876))\", Original PREWHERE DAG:\n```\n\nWhich pushes the predicates to prewhere.  Ideally, combining the indexHint with its complementary predicate is natural, like query 1. Is it possible to exclude the indexHint predicates before QueryPlanOptimizePrewhere?\n\n### Expected performance\n\n_No response_\n\n### Additional context\n\n_No response_\n",
  "hints_text": "",
  "created_at": "2025-01-23T20:10:09Z"
}