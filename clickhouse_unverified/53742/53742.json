{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 53742,
  "instance_id": "ClickHouse__ClickHouse-53742",
  "issue_numbers": [
    "53187"
  ],
  "base_commit": "6d6d5f5878e175948cb652c78b90af0787ed7b04",
  "patch": "diff --git a/src/Functions/transform.cpp b/src/Functions/transform.cpp\nindex 62ab51abd765..b7582b37017c 100644\n--- a/src/Functions/transform.cpp\n+++ b/src/Functions/transform.cpp\n@@ -163,7 +163,16 @@ namespace\n \n             ColumnPtr default_non_const;\n             if (!cache.default_column && arguments.size() == 4)\n+            {\n                 default_non_const = castColumn(arguments[3], result_type);\n+                if (in->size() > default_non_const->size())\n+                {\n+                    throw Exception(\n+                        ErrorCodes::LOGICAL_ERROR,\n+                        \"Fourth argument of function {} must be a constant or a column at least as big as the second and third arguments\",\n+                        getName());\n+                }\n+            }\n \n             ColumnPtr in_casted = arguments[0].column;\n             if (arguments.size() == 3)\n@@ -490,7 +499,7 @@ namespace\n                     else if (cache.default_column)\n                         column_result.insertFrom(*cache.default_column, 0);\n                     else if (default_non_const)\n-                        column_result.insertFrom(*default_non_const, 0);\n+                        column_result.insertFrom(*default_non_const, i);\n                     else\n                         column_result.insertFrom(in_casted, i);\n                 }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02542_transform_new.reference b/tests/queries/0_stateless/02542_transform_new.reference\nindex b6eaa692c416..faec7b5c777a 100644\n--- a/tests/queries/0_stateless/02542_transform_new.reference\n+++ b/tests/queries/0_stateless/02542_transform_new.reference\n@@ -30,3 +30,9 @@ sep4\n sep5\n 8000\n sep6\n+issue #53187\n+0\t1\t1\n+1\t0\t0\n+-\n+0\t0\t0\n+1\t1\t1\ndiff --git a/tests/queries/0_stateless/02542_transform_new.sql b/tests/queries/0_stateless/02542_transform_new.sql\nindex 43da0a507317..f3475d6157fe 100644\n--- a/tests/queries/0_stateless/02542_transform_new.sql\n+++ b/tests/queries/0_stateless/02542_transform_new.sql\n@@ -33,3 +33,16 @@ select 'sep6';\n SELECT transform(-9223372036854775807, [-1], [toDecimal32(1024, 3)]) FROM system.numbers LIMIT 7; -- { serverError BAD_ARGUMENTS }\n SELECT [NULL, NULL, NULL, NULL], transform(number, [2147483648], [toDecimal32(1, 2)]) AS x FROM numbers(257) WHERE materialize(10); -- { serverError BAD_ARGUMENTS }\n SELECT transform(-2147483649, [1], [toDecimal32(1, 2)]) GROUP BY [1] WITH TOTALS; -- { serverError BAD_ARGUMENTS }\n+\n+SELECT 'issue #53187';\n+SELECT\n+    CAST(number, 'String') AS v2,\n+    caseWithExpression('x', 'y', 0, cond2) AS cond1,\n+    toNullable('0' = v2) AS cond2\n+FROM numbers(2);\n+SELECT '-';\n+SELECT\n+    CAST(number, 'String') AS v2,\n+    caseWithExpression('x', 'y', 0, cond2) AS cond1,\n+    toNullable('1' = v2) AS cond2\n+FROM numbers(2);\ndiff --git a/tests/queries/0_stateless/02787_transform_null.reference b/tests/queries/0_stateless/02787_transform_null.reference\nindex a650dbbd1738..a84dd83d712e 100644\n--- a/tests/queries/0_stateless/02787_transform_null.reference\n+++ b/tests/queries/0_stateless/02787_transform_null.reference\n@@ -5,5 +5,5 @@ ONE\n a\n a\n \t\\N\t0\t\\N\t0\t\\N\n-1\t1\t1\t\\N\t1\t1\n+1\t1\t1\t1\t1\t1\n a\t\\N\t3\t3\t3\t3\n",
  "problem_statement": "Conditionals in CASE statements sometimes produce wrong results\n**How to reproduce**\r\n\r\n```\r\nClickHouse client version 23.7.1.1.\r\nConnecting to localhost:9000 as user ymirlink.\r\nConnected to ClickHouse server version 23.7.1 revision 54464.\r\n\r\n:) SELECT  CAST(1, 'Nullable(String)') v1,\r\n        CAST(number, 'String') v2,\r\n        CASE 'x'\r\n          WHEN 'y' THEN 0\r\n          ELSE v1 = v2\r\n        END cond1,\r\n        v1 = v2 cond2\r\n\r\n  FROM numbers(2)\r\nFORMAT JSONCompact\r\n;\r\n\r\n\r\nSELECT\r\n    CAST(1, 'Nullable(String)') AS v1,\r\n    CAST(number, 'String') AS v2,\r\n    caseWithExpression('x', 'y', 0, v1 = v2) AS cond1,\r\n    v1 = v2 AS cond2\r\nFROM numbers(2)\r\nFORMAT JSONCompact\r\n\r\nQuery id: 7d0377c3-5c03-4953-893d-78d0808ceced\r\n\r\n{\r\n        \"meta\":\r\n        [\r\n                {\r\n                        \"name\": \"v1\",\r\n                        \"type\": \"Nullable(String)\"\r\n                },\r\n                {\r\n                        \"name\": \"v2\",\r\n                        \"type\": \"String\"\r\n                },\r\n                {\r\n                        \"name\": \"cond1\",\r\n                        \"type\": \"Nullable(UInt8)\"\r\n                },\r\n                {\r\n                        \"name\": \"cond2\",\r\n                        \"type\": \"Nullable(UInt8)\"\r\n                }\r\n        ],\r\n\r\n        \"data\":\r\n        [\r\n                [\"1\", \"0\", 0, 0],\r\n                [\"1\", \"1\", 0, 1]\r\n        ],\r\n\r\n        \"rows\": 2,\r\n\r\n        \"rows_before_limit_at_least\": 2,\r\n\r\n        \"statistics\":\r\n        {\r\n                \"elapsed\": 0.003158283,\r\n                \"rows_read\": 2,\r\n                \"bytes_read\": 16\r\n        }\r\n}\r\n\r\n2 rows in set. Elapsed: 0.003 sec.\r\n```\r\n\r\n\r\n**Expected behavior**\r\n\r\n`cond1` and `cond2` should always have the same value.\n",
  "hints_text": "We have confirmed that there is no problem with the following version.\r\n\r\n```\r\nClickHouse client version 23.3.1.2537.\r\nConnecting to localhost:9000 as user ymirlink.\r\nConnected to ClickHouse server version 23.3.1 revision 54462.\r\n\r\ndev-fc690.ymir.jp :) SELECT  CAST(1, 'Nullable(String)') v1,\r\n                             CAST(number, 'Nullable(String)') v2,\r\n                             CASE 'x'\r\n                               WHEN 'y' THEN 0\r\n                               ELSE v1 = v2\r\n                             END cond1,\r\n                             v1 = v2 cond2\r\n\r\n                       FROM numbers(2)\r\n                     FORMAT JSONCompact\r\n                     ;\r\n\r\n\r\n\r\nSELECT\r\n    CAST(1, 'Nullable(String)') AS v1,\r\n    CAST(number, 'Nullable(String)') AS v2,\r\n    caseWithExpression('x', 'y', 0, v1 = v2) AS cond1,\r\n    v1 = v2 AS cond2\r\nFROM numbers(2)\r\nFORMAT JSONCompact\r\n\r\nQuery id: 6f890100-aec4-4a5e-bf45-dd59915d4a24\r\n\r\n{\r\n        \"meta\":\r\n        [\r\n                {\r\n                        \"name\": \"v1\",\r\n                        \"type\": \"Nullable(String)\"\r\n                },\r\n                {\r\n                        \"name\": \"v2\",\r\n                        \"type\": \"Nullable(String)\"\r\n                },\r\n                {\r\n                        \"name\": \"cond1\",\r\n                        \"type\": \"Nullable(UInt8)\"\r\n                },\r\n                {\r\n                        \"name\": \"cond2\",\r\n                        \"type\": \"Nullable(UInt8)\"\r\n                }\r\n        ],\r\n\r\n        \"data\":\r\n        [\r\n                [\"1\", \"0\", 0, 0],\r\n                [\"1\", \"1\", 1, 1]                                                                                                                         \r\n        ],\r\n\r\n        \"rows\": 2,\r\n\r\n        \"rows_before_limit_at_least\": 2,\r\n\r\n        \"statistics\":\r\n        {\r\n                \"elapsed\": 0.006783256,\r\n                \"rows_read\": 2,\r\n                \"bytes_read\": 16\r\n        }\r\n}\r\n\r\n2 rows in set. Elapsed: 0.007 sec.\r\n```\r\n\nBroken in 23.5 https://fiddle.clickhouse.com/1d4a6dbf-4c1a-47d5-943b-8fc89a4bf8a6",
  "created_at": "2023-08-23T10:29:12Z",
  "modified_files": [
    "src/Functions/transform.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/02542_transform_new.reference",
    "tests/queries/0_stateless/02542_transform_new.sql",
    "tests/queries/0_stateless/02787_transform_null.reference"
  ]
}