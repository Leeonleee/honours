diff --git a/tests/queries/0_stateless/00578_merge_table_shadow_virtual_column.sql b/tests/queries/0_stateless/00578_merge_table_shadow_virtual_column.sql
index 3071e3075178..e729bfdf188c 100644
--- a/tests/queries/0_stateless/00578_merge_table_shadow_virtual_column.sql
+++ b/tests/queries/0_stateless/00578_merge_table_shadow_virtual_column.sql
@@ -4,7 +4,7 @@ DROP TABLE IF EXISTS numbers2;
 CREATE TABLE numbers1 ENGINE = Memory AS SELECT number as _table FROM numbers(1000);
 CREATE TABLE numbers2 ENGINE = Memory AS SELECT number as _table FROM numbers(1000);
 
-SELECT count() FROM merge(currentDatabase(), '^numbers\\d+$') WHERE _table='numbers1'; -- { serverError 43 }
+SELECT count() FROM merge(currentDatabase(), '^numbers\\d+$') WHERE _table='numbers1'; -- { serverError 53 }
 SELECT count() FROM merge(currentDatabase(), '^numbers\\d+$') WHERE _table=1;
 
 DROP TABLE numbers1;
diff --git a/tests/queries/0_stateless/00700_decimal_compare.reference b/tests/queries/0_stateless/00700_decimal_compare.reference
index 32f0b0a6dea1..2325847045f5 100644
--- a/tests/queries/0_stateless/00700_decimal_compare.reference
+++ b/tests/queries/0_stateless/00700_decimal_compare.reference
@@ -1,3 +1,5 @@
+0
+1
 -42	-42	1	0	0	0	1	1
 42	42	1	0	0	0	1	1
 -42	-42.42000	0	0	1	1	0	1
diff --git a/tests/queries/0_stateless/00700_decimal_compare.sql b/tests/queries/0_stateless/00700_decimal_compare.sql
index 24b4ce588e57..ae2f5790570f 100644
--- a/tests/queries/0_stateless/00700_decimal_compare.sql
+++ b/tests/queries/0_stateless/00700_decimal_compare.sql
@@ -19,7 +19,7 @@ INSERT INTO decimal (a, b, c, d, e, f, g, h, i, j) VALUES (-42, -42, -42, -0.42,
 
 SELECT a > toFloat64(0) FROM decimal; -- { serverError 43 }
 SELECT g > toFloat32(0) FROM decimal; -- { serverError 43 }
-SELECT a > '0.0' FROM decimal; -- { serverError 43 }
+SELECT a > '0.0' FROM decimal ORDER BY a;
 
 SELECT a, b, a = b, a < b, a > b, a != b, a <= b, a >= b FROM decimal ORDER BY a;
 SELECT a, g, a = g, a < g, a > g, a != g, a <= g, a >= g FROM decimal ORDER BY a;
diff --git a/tests/queries/0_stateless/01268_DateTime64_in_WHERE.sql b/tests/queries/0_stateless/01268_DateTime64_in_WHERE.sql
index c65bf668d717..4ffcf3be3c99 100644
--- a/tests/queries/0_stateless/01268_DateTime64_in_WHERE.sql
+++ b/tests/queries/0_stateless/01268_DateTime64_in_WHERE.sql
@@ -1,12 +1,12 @@
 -- Error cases:
 -- non-const string column
-WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT DT64 = materialize(S); -- {serverError 44}
-WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT materialize(S) = toDateTime64(S, 3); -- {serverError 44}
-WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT * WHERE DT64 = materialize(S); -- {serverError 44}
-WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT * WHERE materialize(S) = DT64; -- {serverError 44}
+WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT DT64 = materialize(S); -- {serverError 43}
+WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT materialize(S) = toDateTime64(S, 3); -- {serverError 43}
+WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT * WHERE DT64 = materialize(S); -- {serverError 43}
+WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT * WHERE materialize(S) = DT64; -- {serverError 43}
 
-SELECT * WHERE toDateTime64(123.345, 3) == 'ABCD'; -- {serverError 131} -- invalid DateTime64 string
-SELECT * WHERE toDateTime64(123.345, 3) == '2020-02-05 14:34:12.33333333333333333333333333333333333333333333333333333333'; -- {serverError 131} -- invalid string length
+SELECT * WHERE toDateTime64(123.345, 3) == 'ABCD'; -- {serverError 53} -- invalid DateTime64 string
+SELECT * WHERE toDateTime64(123.345, 3) == '2020-02-05 14:34:12.33333333333333333333333333333333333333333333333333333333'; -- {serverError 53} -- invalid string length
 
 SELECT 'in SELECT';
 WITH '2020-02-05 14:34:12.333' as S, toDateTime64(S, 3) as DT64 SELECT DT64 = S;
diff --git a/tests/queries/0_stateless/01277_convert_field_to_type_logical_error.sql b/tests/queries/0_stateless/01277_convert_field_to_type_logical_error.sql
index 05295575cf14..4712c1242370 100644
--- a/tests/queries/0_stateless/01277_convert_field_to_type_logical_error.sql
+++ b/tests/queries/0_stateless/01277_convert_field_to_type_logical_error.sql
@@ -1,1 +1,1 @@
-SELECT -2487, globalNullIn(toIntervalMinute(-88074), 'qEkek..'), [-27.537293]; -- { serverError 70 }
+SELECT -2487, globalNullIn(toIntervalMinute(-88074), 'qEkek..'), [-27.537293]; -- { serverError 53 }
diff --git a/tests/queries/0_stateless/01310_enum_comparison.reference b/tests/queries/0_stateless/01310_enum_comparison.reference
new file mode 100644
index 000000000000..b261da18d51a
--- /dev/null
+++ b/tests/queries/0_stateless/01310_enum_comparison.reference
@@ -0,0 +1,2 @@
+1
+0
diff --git a/tests/queries/0_stateless/01310_enum_comparison.sql b/tests/queries/0_stateless/01310_enum_comparison.sql
new file mode 100644
index 000000000000..26901a61b2b2
--- /dev/null
+++ b/tests/queries/0_stateless/01310_enum_comparison.sql
@@ -0,0 +1,6 @@
+CREATE TEMPORARY TABLE enum (x Enum('hello' = 1, 'world' = 2));
+INSERT INTO enum VALUES ('hello');
+
+SELECT count() FROM enum WHERE x = 'hello';
+SELECT count() FROM enum WHERE x = 'world';
+SELECT count() FROM enum WHERE x = 'xyz'; -- { serverError 36 }
diff --git a/tests/queries/0_stateless/01311_comparison_with_constant_string.reference b/tests/queries/0_stateless/01311_comparison_with_constant_string.reference
new file mode 100644
index 000000000000..7865f42932d1
--- /dev/null
+++ b/tests/queries/0_stateless/01311_comparison_with_constant_string.reference
@@ -0,0 +1,32 @@
+0
+1
+0
+---
+1
+0
+1
+---
+1
+0
+0
+---
+0
+---
+1
+0
+---
+---
+0
+---
+1
+---
+0
+---
+0
+---
+0
+---
+0
+---
+1
+---
diff --git a/tests/queries/0_stateless/01311_comparison_with_constant_string.sql b/tests/queries/0_stateless/01311_comparison_with_constant_string.sql
new file mode 100644
index 000000000000..d6641a50c45f
--- /dev/null
+++ b/tests/queries/0_stateless/01311_comparison_with_constant_string.sql
@@ -0,0 +1,33 @@
+SELECT number = '1' FROM numbers(3);
+SELECT '---';
+SELECT '1' != number FROM numbers(3);
+SELECT '---';
+SELECT '1' > number FROM numbers(3);
+SELECT '---';
+SELECT 1 = '257';
+SELECT '---';
+SELECT 1 IN (1.23, '1', 2);
+SELECT 1 IN (1.23, '2', 2);
+SELECT '---';
+
+-- it should work but it doesn't.
+SELECT 1 = '1.0'; -- { serverError 53 }
+SELECT '---';
+
+SELECT 1 = '257';
+SELECT '---';
+SELECT 1 != '257';
+SELECT '---';
+SELECT 1 < '257'; -- this is wrong for now
+SELECT '---';
+SELECT 1 > '257';
+SELECT '---';
+SELECT 1 <= '257'; -- this is wrong for now
+SELECT '---';
+SELECT 1 >= '257';
+SELECT '---';
+
+SELECT toDateTime('2020-06-13 01:02:03') = '2020-06-13T01:02:03';
+SELECT '---';
+
+SELECT 0 = ''; -- { serverError 32 }
diff --git a/tests/queries/0_stateless/01312_comparison_with_constant_string_in_index_analysis.reference b/tests/queries/0_stateless/01312_comparison_with_constant_string_in_index_analysis.reference
new file mode 100644
index 000000000000..ee98bdf033bd
--- /dev/null
+++ b/tests/queries/0_stateless/01312_comparison_with_constant_string_in_index_analysis.reference
@@ -0,0 +1,12 @@
+1
+999999
+100000
+899999
+100001
+900000
+1
+999999
+100000
+899999
+100001
+900000
diff --git a/tests/queries/0_stateless/01312_comparison_with_constant_string_in_index_analysis.sql b/tests/queries/0_stateless/01312_comparison_with_constant_string_in_index_analysis.sql
new file mode 100644
index 000000000000..e37f647e81f4
--- /dev/null
+++ b/tests/queries/0_stateless/01312_comparison_with_constant_string_in_index_analysis.sql
@@ -0,0 +1,32 @@
+DROP TABLE IF EXISTS test;
+CREATE TABLE test (x UInt64) ENGINE = MergeTree ORDER BY x SETTINGS index_granularity = 1000;
+INSERT INTO test SELECT * FROM numbers(1000000);
+OPTIMIZE TABLE test;
+
+SET max_rows_to_read = 2000;
+SELECT count() FROM test WHERE x = 100000;
+SET max_rows_to_read = 1000000;
+SELECT count() FROM test WHERE x != 100000;
+SET max_rows_to_read = 101000;
+SELECT count() FROM test WHERE x < 100000;
+SET max_rows_to_read = 900000;
+SELECT count() FROM test WHERE x > 100000;
+SET max_rows_to_read = 101000;
+SELECT count() FROM test WHERE x <= 100000;
+SET max_rows_to_read = 901000;
+SELECT count() FROM test WHERE x >= 100000;
+
+SET max_rows_to_read = 2000;
+SELECT count() FROM test WHERE x = '100000';
+SET max_rows_to_read = 1000000;
+SELECT count() FROM test WHERE x != '100000';
+SET max_rows_to_read = 101000;
+SELECT count() FROM test WHERE x < '100000';
+SET max_rows_to_read = 900000;
+SELECT count() FROM test WHERE x > '100000';
+SET max_rows_to_read = 101000;
+SELECT count() FROM test WHERE x <= '100000';
+SET max_rows_to_read = 901000;
+SELECT count() FROM test WHERE x >= '100000';
+
+DROP TABLE test;
