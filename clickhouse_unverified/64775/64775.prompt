You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Experimental unequal JOIN condition with OR+IN subquery (LOGICAL_ERROR: Not-ready Set is passed)

Reproducing example:
```
pastila https://pastila.nl/?001ca277/f9a3d3ed2c4546ab2cf08a121f1a7817#ooPNiXCy2oRdI7DLq5PL/A== | clickhouse client -n --echo
```

Query:
```
DROP TABLE IF EXISTS t1;
DROP TABLE IF EXISTS t2;

CREATE TABLE t1 (
    key UInt32,
    a UInt32
)  ENGINE = MergeTree ORDER BY key;

CREATE TABLE t2 (
    key UInt32,
    a UInt32
) ENGINE = MergeTree ORDER BY key;

INSERT INTO t1 (key, a) VALUES (1, 10), (2, 15), (3, 20);
INSERT INTO t2 (key, a) VALUES (1, 5), (2, 10), (4, 25);

SET allow_experimental_analyzer=1;
SET allow_experimental_join_condition = 1;
SET join_algorithm='hash';
SET send_logs_level = 'error';

-- These queries work
SELECT t1.*, t2.* FROM t1 LEFT JOIN t2 ON t1.key = t2.key AND ((t2.a IN (SELECT a FROM t1 WHERE a = 10))) ORDER BY t1.key, t2.key;

SELECT t1.*, t2.* FROM t1 LEFT JOIN t2 ON t1.key = t2.key AND (t1.a=2 AND (t2.a IN (SELECT a FROM t1 WHERE a = 10))) ORDER BY t1.key, t2.key;

-- This query doesn't
SELECT t1.*, t2.* FROM t1 LEFT JOIN t2 ON t1.key = t2.key AND (t1.a=2 OR (t2.a IN (SELECT a FROM t1 WHERE a = 10))) ORDER BY t1.key, t2.key;
```

Result:
```
[nikpc] 2024.05.28 15:05:47.881292 [ 2530949 ] {0b49ebc4-8a12-4d2a-bb51-d0ba17e22d62} <Error> executeQuery: Code: 49. DB::Exception: Not-ready Set is passed as the second argument for function 'in': while executing 'FUNCTION in(__table2.a :: 1, __set_18088566730452824076_8550654433943010493 :: 0) -> in(__table2.a, __set_18088566730452824076_8550654433943010493) UInt8 : 4': While executing JoiningTransform. (LOGICAL_ERROR) (version 24.5.1.1747 (official build)) (from 127.0.0.1:43828) (in query: -- This query is not
 SELECT t1.*, t2.* FROM t1 LEFT JOIN t2 ON t1.key = t2.key AND (t1.a=2 OR (t2.a IN (SELECT a FROM t1 WHERE a = 10))) ORDER BY t1.key, t2.key;), Stack trace (when copying this message, always include the lines below):

0. ./build_docker/./src/Common/Exception.cpp:101: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000c5c4fbb
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x00000000077960ec
2. DB::Exception::Exception<String>(int, FormatStringHelperImpl<std::type_identity<String>::type>, String&&) @ 0x0000000007795c4b
3. DB::(anonymous namespace)::FunctionIn<false, false, true, false>::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x00000000098c284c
4. DB::FunctionToExecutableFunctionAdaptor::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x00000000080cbb0e
5. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000000f222770
6. DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000000f223301
7. DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000000f224779
8. ./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:117: DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool, bool) const @ 0x000000001016cb59
9. ./contrib/llvm-project/libcxx/include/vector:537: DB::ExpressionActions::execute(DB::Block&, bool, bool) const @ 0x000000001016e00e
10. ./contrib/llvm-project/libcxx/include/vector:1457: COW<DB::IColumn>::immutable_ptr<DB::IColumn> DB::(anonymous namespace)::buildAdditionalFilter<DB::(anonymous namespace)::AddedColumns<true>>(unsigned long, std::vector<DB::RowRef, std::allocator<DB::RowRef>> const&, std::vector<unsigned long, std::allocator<unsigned long>> const&, DB::(anonymous namespace)::AddedColumns<true>&) @ 0x000000001052e791
11. ./build_docker/./src/Interpreters/HashJoin.cpp:0: unsigned long DB::(anonymous namespace)::joinRightColumnsWithAddtitionalFilter<DB::ColumnsHashing::HashMethodOneNumber<PairNoInit<unsigned int, DB::RowRefList>, DB::RowRefList const, unsigned int, false, true, false>, HashMapTable<unsigned int, HashMapCell<unsigned int, DB::RowRefList, HashCRC32<unsigned int>, HashTableNoState, PairNoInit<unsigned int, DB::RowRefList>>, HashCRC32<unsigned int>, HashTableGrowerWithPrecalculation<8ul>, Allocator<true, true>>, true, DB::(anonymous namespace)::AddedColumns<true>>(std::vector<DB::ColumnsHashing::HashMethodOneNumber<PairNoInit<unsigned int, DB::RowRefList>, DB::RowRefList const, unsigned int, false, true, false>, std::allocator<DB::ColumnsHashing::HashMethodOneNumber<PairNoInit<unsigned int, DB::RowRefList>, DB::RowRefList const, unsigned int, false, true, false>>>&&, std::vector<HashMapTable<unsigned int, HashMapCell<unsigned int, DB::RowRefList, HashCRC32<unsigned int>, HashTableNoState, PairNoInit<unsigned int, DB::RowRefList>>, HashCRC32<unsigned int>, HashTableGrowerWithPrecalculation<8ul>, Allocator<true, true>> const*, std::allocator<HashMapTable<unsigned int, HashMapCell<unsigned int, DB::RowRefList, HashCRC32<unsigned int>, HashTableNoState, PairNoInit<unsigned int, DB::RowRefList>>, HashCRC32<unsigned int>, HashTableGrowerWithPrecalculation<8ul>, Allocator<true, true>> const*>> const&, DB::(anonymous namespace)::AddedColumns<true>&, DB::JoinStuff::JoinUsedFlags&, bool, bool, bool, bool) @ 0x000000001053b35e
12. ./build_docker/./src/Interpreters/HashJoin.cpp:0: DB::Block DB::HashJoin::joinBlockImpl<(DB::JoinKind)1, (DB::JoinStrictness)3, DB::HashJoin::MapsTemplate<DB::RowRefList>>(DB::Block&, DB::Block const&, std::vector<DB::HashJoin::MapsTemplate<DB::RowRefList> const*, std::allocator<DB::HashJoin::MapsTemplate<DB::RowRefList> const*>> const&, bool) const @ 0x000000001052ad4c
13. ./contrib/llvm-project/libcxx/include/vector:1429: _Z15static_for_implIiTnT_Li0EZN2DB12joinDispatchINSt3__17variantIJNS1_8HashJoin12MapsTemplateINS1_6RowRefEEENS6_INS1_10RowRefListEEENS6_INS3_10unique_ptrINS1_22SortedLookupVectorBaseENS3_14default_deleteISC_EEEEEEEEEZNS5_9joinBlockERNS1_5BlockERNS3_10shared_ptrINS1_10ExtraBlockEEEE3$_0EEbNS1_8JoinKindENS1_14JoinStrictnessERNS3_6vectorIPKS0_NS3_9allocatorIST_EEEEOT0_EUlS0_E_TpTnS0_JLi0ELi1ELi2ELi3ELi4ELi5ELi6ELi7ELi8ELi9ELi10ELi11ELi12ELi13ELi14ELi15ELi16ELi17ELi18ELi19ELi20ELi21ELi22ELi23EEEbOT1_NS3_16integer_sequenceIS0_JXspT2_EEEE @ 0x000000001050ac51
14. ./build_docker/./src/Interpreters/HashJoin.cpp:2470: DB::HashJoin::joinBlock(DB::Block&, std::shared_ptr<DB::ExtraBlock>&) @ 0x00000000104c8a55
15. ./build_docker/./src/Processors/Transforms/JoiningTransform.cpp:0: DB::JoiningTransform::work() @ 0x00000000121655a5
16. ./build_docker/./src/Processors/Executors/ExecutionThreadContext.cpp:0: DB::ExecutionThreadContext::executeTask() @ 0x0000000011f111a7
17. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:272: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000011f05a90
18. ./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:701: DB::PipelineExecutor::execute(unsigned long, bool) @ 0x0000000011f04f22
19. ./build_docker/./src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:0: void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x0000000011f14cca
20. ./base/base/../base/wide_integer_impl.h:817: void* std::__thread_proxy[abi:v15000]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>>(void*) @ 0x000000000c676f83
21. ? @ 0x00007e4230e94ac3
22. ? @ 0x00007e4230f26850

Received exception from server (version 24.5.1):
Code: 49. DB::Exception: Received from localhost:9000. DB::Exception: Not-ready Set is passed as the second argument for function 'in': while executing 'FUNCTION in(__table2.a :: 1, __set_18088566730452824076_8550654433943010493 :: 0) -> in(__table2.a, __set_18088566730452824076_8550654433943010493) UInt8 : 4': While executing JoiningTransform. (LOGICAL_ERROR)
(query: -- This query is not
SELECT t1.*, t2.* FROM t1 LEFT JOIN t2 ON t1.key = t2.key AND (t1.a=2 OR (t2.a IN (SELECT a FROM t1 WHERE a = 10))) ORDER BY t1.key, t2.key;)
```

Version 24.6.1.2120
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
