{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 12120,
  "instance_id": "ClickHouse__ClickHouse-12120",
  "issue_numbers": [
    "8670",
    "10285",
    "10437"
  ],
  "base_commit": "5a4d9fb9ae60de0d4e1744f8c47d102a2cb05b2b",
  "patch": "diff --git a/src/Interpreters/SystemLog.h b/src/Interpreters/SystemLog.h\nindex 48cff8bf0614..7d533a3bab7a 100644\n--- a/src/Interpreters/SystemLog.h\n+++ b/src/Interpreters/SystemLog.h\n@@ -22,6 +22,7 @@\n #include <Interpreters/InterpreterCreateQuery.h>\n #include <Interpreters/InterpreterRenameQuery.h>\n #include <Interpreters/InterpreterInsertQuery.h>\n+#include <Interpreters/Context.h>\n #include <Common/setThreadName.h>\n #include <Common/ThreadPool.h>\n #include <IO/WriteHelpers.h>\n@@ -62,7 +63,6 @@ namespace ErrorCodes\n \n #define DBMS_SYSTEM_LOG_QUEUE_SIZE 1048576\n \n-class Context;\n class QueryLog;\n class QueryThreadLog;\n class PartLog;\n@@ -425,7 +425,11 @@ void SystemLog<LogElement>::flushImpl(const std::vector<LogElement> & to_flush,\n         insert->table_id = table_id;\n         ASTPtr query_ptr(insert.release());\n \n-        InterpreterInsertQuery interpreter(query_ptr, context);\n+        // we need query context to do inserts to target table with MV containing subqueries or joins\n+        auto insert_context = Context(context);\n+        insert_context.makeQueryContext();\n+\n+        InterpreterInsertQuery interpreter(query_ptr, insert_context);\n         BlockIO io = interpreter.execute();\n \n         io.out->writePrefix();\ndiff --git a/src/Storages/Kafka/StorageKafka.cpp b/src/Storages/Kafka/StorageKafka.cpp\nindex 6499941a68de..f1d7650c7857 100644\n--- a/src/Storages/Kafka/StorageKafka.cpp\n+++ b/src/Storages/Kafka/StorageKafka.cpp\n@@ -125,7 +125,6 @@ StorageKafka::StorageKafka(\n     std::unique_ptr<KafkaSettings> kafka_settings_)\n     : IStorage(table_id_)\n     , global_context(context_.getGlobalContext())\n-    , kafka_context(std::make_shared<Context>(global_context))\n     , kafka_settings(std::move(kafka_settings_))\n     , topics(parseTopics(global_context.getMacros()->expand(kafka_settings->kafka_topic_list.value)))\n     , brokers(global_context.getMacros()->expand(kafka_settings->kafka_broker_list.value))\n@@ -145,9 +144,6 @@ StorageKafka::StorageKafka(\n     setInMemoryMetadata(storage_metadata);\n     task = global_context.getSchedulePool().createTask(log->name(), [this]{ threadFunc(); });\n     task->deactivate();\n-\n-    kafka_context->makeQueryContext();\n-    kafka_context->applySettingsChanges(settings_adjustments);\n }\n \n SettingsChanges StorageKafka::createSettingsAdjustments()\n@@ -530,6 +526,10 @@ bool StorageKafka::streamToViews()\n \n     size_t block_size = getMaxBlockSize();\n \n+    auto kafka_context = std::make_shared<Context>(global_context);\n+    kafka_context->makeQueryContext();\n+    kafka_context->applySettingsChanges(settings_adjustments);\n+\n     // Create a stream for each consumer and join them in a union stream\n     // Only insert into dependent views and expect that input blocks contain virtual columns\n     InterpreterInsertQuery interpreter(insert, *kafka_context, false, true, true);\ndiff --git a/src/Storages/Kafka/StorageKafka.h b/src/Storages/Kafka/StorageKafka.h\nindex 6f479ba20892..b7e6ea2a7e0c 100644\n--- a/src/Storages/Kafka/StorageKafka.h\n+++ b/src/Storages/Kafka/StorageKafka.h\n@@ -70,7 +70,6 @@ class StorageKafka final : public ext::shared_ptr_helper<StorageKafka>, public I\n private:\n     // Configuration and state\n     Context & global_context;\n-    std::shared_ptr<Context> kafka_context;\n     std::unique_ptr<KafkaSettings> kafka_settings;\n     const Names topics;\n     const String brokers;\ndiff --git a/src/Storages/StorageBuffer.cpp b/src/Storages/StorageBuffer.cpp\nindex 85b61dd34f99..3bc88f5a2897 100644\n--- a/src/Storages/StorageBuffer.cpp\n+++ b/src/Storages/StorageBuffer.cpp\n@@ -713,7 +713,10 @@ void StorageBuffer::writeBlockToDestination(const Block & block, StoragePtr tabl\n     for (const auto & column : block_to_write)\n         list_of_columns->children.push_back(std::make_shared<ASTIdentifier>(column.name));\n \n-    InterpreterInsertQuery interpreter{insert, global_context, allow_materialized};\n+    auto insert_context = Context(global_context);\n+    insert_context.makeQueryContext();\n+\n+    InterpreterInsertQuery interpreter{insert, insert_context, allow_materialized};\n \n     auto block_io = interpreter.execute();\n     block_io.out->writePrefix();\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01360_materialized_view_with_join_on_query_log.reference b/tests/queries/0_stateless/01360_materialized_view_with_join_on_query_log.reference\nnew file mode 100644\nindex 000000000000..f6349a0b9b47\n--- /dev/null\n+++ b/tests/queries/0_stateless/01360_materialized_view_with_join_on_query_log.reference\n@@ -0,0 +1,11 @@\n+1\n+1\n+1\n+1\n+1\n+=== system.query_log ===\n+main_dashboard_bottom_query\t2\n+main_dashboard_top_query\t2\n+=== slowlog ===\n+main_dashboard_bottom_query\t1\n+main_dashboard_top_query\t1\ndiff --git a/tests/queries/0_stateless/01360_materialized_view_with_join_on_query_log.sql b/tests/queries/0_stateless/01360_materialized_view_with_join_on_query_log.sql\nnew file mode 100644\nindex 000000000000..4f216ae647f9\n--- /dev/null\n+++ b/tests/queries/0_stateless/01360_materialized_view_with_join_on_query_log.sql\n@@ -0,0 +1,54 @@\n+DROP TABLE IF EXISTS slow_log;\n+DROP TABLE IF EXISTS expected_times;\n+\n+CREATE TABLE expected_times (QUERY_GROUP_ID String, max_query_duration_ms UInt64) Engine=Memory;\n+INSERT INTO expected_times VALUES('main_dashboard_top_query', 100), ('main_dashboard_bottom_query', 100);\n+\n+SET log_queries=1;\n+SELECT 1;\n+SYSTEM FLUSH LOGS;\n+\n+CREATE MATERIALIZED VIEW slow_log Engine=Memory AS\n+(\n+        SELECT * FROM\n+        (\n+            SELECT\n+                extract(query,'/\\\\*\\\\s*QUERY_GROUP_ID:(.*?)\\\\s*\\\\*/') as QUERY_GROUP_ID,\n+                *\n+            FROM system.query_log\n+            WHERE type<>1 and event_date >= yesterday() and event_time > now() - 120\n+        ) as ql\n+        INNER JOIN expected_times USING (QUERY_GROUP_ID)\n+        WHERE query_duration_ms > max_query_duration_ms\n+);\n+\n+SELECT 1 /* QUERY_GROUP_ID:main_dashboard_top_query */;\n+SELECT 1 /* QUERY_GROUP_ID:main_dashboard_bottom_query */;\n+\n+SELECT 1 WHERE not ignore(sleep(0.105)) /* QUERY_GROUP_ID:main_dashboard_top_query */;\n+SELECT 1 WHERE not ignore(sleep(0.105)) /* QUERY_GROUP_ID:main_dashboard_bottom_query */;\n+\n+SET log_queries=0;\n+SYSTEM FLUSH LOGS;\n+\n+SELECT '=== system.query_log ===';\n+\n+SELECT\n+    extract(query,'/\\\\*\\\\s*QUERY_GROUP_ID:(.*?)\\\\s*\\\\*/') as QUERY_GROUP_ID,\n+    count()\n+FROM system.query_log\n+WHERE type<>1 and event_date >= yesterday() and event_time > now() - 20 and QUERY_GROUP_ID<>''\n+GROUP BY QUERY_GROUP_ID\n+ORDER BY QUERY_GROUP_ID;\n+\n+SELECT '=== slowlog ===';\n+\n+SELECT\n+    QUERY_GROUP_ID,\n+    count()\n+FROM slow_log\n+GROUP BY QUERY_GROUP_ID\n+ORDER BY QUERY_GROUP_ID;\n+\n+DROP TABLE slow_log;\n+DROP TABLE expected_times;\ndiff --git a/tests/queries/0_stateless/01361_buffer_table_flush_with_materialized_view.reference b/tests/queries/0_stateless/01361_buffer_table_flush_with_materialized_view.reference\nnew file mode 100644\nindex 000000000000..083edaac2489\n--- /dev/null\n+++ b/tests/queries/0_stateless/01361_buffer_table_flush_with_materialized_view.reference\n@@ -0,0 +1,3 @@\n+2\n+2\n+2\ndiff --git a/tests/queries/0_stateless/01361_buffer_table_flush_with_materialized_view.sql b/tests/queries/0_stateless/01361_buffer_table_flush_with_materialized_view.sql\nnew file mode 100644\nindex 000000000000..424c38d5590b\n--- /dev/null\n+++ b/tests/queries/0_stateless/01361_buffer_table_flush_with_materialized_view.sql\n@@ -0,0 +1,37 @@\n+DROP TABLE IF EXISTS t1_01361;\n+DROP TABLE IF EXISTS t2_01361;\n+DROP TABLE IF EXISTS mv1_01361;\n+DROP TABLE IF EXISTS b1_01361;\n+\n+CREATE TABLE t1_01361 (\n+  i UInt32,\n+  time DateTime\n+) ENGINE = MergeTree()\n+PARTITION BY time\n+ORDER BY time;\n+\n+CREATE TABLE t2_01361 (\n+  i UInt32,\n+  time DateTime\n+) ENGINE = MergeTree()\n+PARTITION BY time\n+ORDER BY time;\n+\n+CREATE MATERIALIZED VIEW mv1_01361\n+TO t2_01361\n+AS SELECT * FROM (SELECT * FROM t1_01361);\n+\n+CREATE TABLE b1_01361 AS t1_01361\n+ENGINE = Buffer(currentDatabase(), t1_01361, 1, 0, 0, 1, 1, 1, 1);\n+\n+INSERT INTO b1_01361 VALUES (1, now());\n+INSERT INTO b1_01361 VALUES (2, now());\n+\n+SELECT count() FROM b1_01361;\n+SELECT count() FROM t1_01361;\n+SELECT count() FROM t2_01361;\n+\n+DROP TABLE IF EXISTS t1_01361;\n+DROP TABLE IF EXISTS t2_01361;\n+DROP TABLE IF EXISTS mv1_01361;\n+DROP TABLE IF EXISTS b1_01361;\n",
  "problem_statement": "Exception is thrown on insert into MV that is looking at the metric_log table.\n**Describe the bug or unexpected behaviour**\r\nAn exception is thrown on insert into MV that is looking at the `metric_log` table.\r\n\r\n**How to reproduce**\r\n1. Enable `metric_log` table in `config.xml`\r\n```xml\r\n    <metric_log>\r\n        <database>system</database>\r\n        <table>metric_log</table>\r\n        <flush_interval_milliseconds>7500</flush_interval_milliseconds>\r\n        <collect_interval_milliseconds>1000</collect_interval_milliseconds>\r\n    </metric_log>\r\n```\r\n2. Create an MV:\r\n\r\n```sql\r\nCREATE MATERIALIZED VIEW mv\r\nENGINE = Memory() AS\r\nSELECT sum(value) / 10\r\nFROM \r\n(\r\n    SELECT *\r\n    FROM \r\n    (\r\n        SELECT \r\n            ProfileEvent_DiskReadElapsedMicroseconds AS value, \r\n            event_time\r\n        FROM system.metric_log\r\n        ORDER BY event_time DESC\r\n        LIMIT 10\r\n    )\r\n    ORDER BY event_time DESC\r\n    LIMIT 10\r\n)\r\n```\r\n3. Check server log for an exception\r\n\r\n**Error message and/or stacktrace**\r\n```\r\n2020.01.15 16:06:33.382354 [ 11 ] {} <Debug> system.metric_log (MergerMutator): Merging 6 parts: from 202001_1_494_98 to 202001_499_499_0 into tmp_merge_202001_1_499_99\r\n2020.01.15 16:06:33.383123 [ 2 ] {} <Error> void DB::SystemLog<LogElement>::flushImpl(DB::SystemLog<LogElement>::EntryType) [with LogElement = DB::MetricLogElement]: Code: 393, e.displayText() = DB::Exception: There is no query: while pushing to view default.mv, Stack trace (when copying this message, always include the lines below):\r\n\r\n0. 0x9a3c76c Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) /home/vzakaznikov/github/ClickHouse/build/../contrib/poco/Foundation/src/Exception.cpp:27 in /home/vzakaznikov/github/ClickHouse/build/dbms/programs/clickhouse\r\n1. 0x4a45a59 DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) /home/vzakaznikov/github/ClickHouse/build/../dbms/src/Common/Exception.cpp:35 in /home/vzakaznikov/github/ClickHouse/build/dbms/programs/clickhouse\r\n2. 0x81bdbd9 DB::Context::getQueryContext() const /home/vzakaznikov/github/ClickHouse/build/../contrib/libcxx/include/string:2133 in /home/vzakaznikov/github/ClickHouse/build/dbms/programs/clickhouse\r\n3. 0x81bffa9 DB::Context::getSampleBlockCache() const /home/vzakaznikov/github/ClickHouse/build/../dbms/src/Interpreters/Context.cpp:2021 in /home/vzakaznikov/github/ClickHouse/build/dbms/programs/clickhouse\r\n4. 0x8285e51 DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&) /home/vzakaznikov/github/ClickHouse/build/../dbms/src/Interpreters/InterpreterSelectWithUnionQuery.cpp:171 in /home/vzakaznikov/github/ClickHouse/build/dbms/programs/clickhouse\r\n5. 0x84041d9 DB::getColumnsFromTableExpression(DB::ASTTableExpression const&, DB::Context const&, DB::NamesAndTypesList&, DB::NamesAndTypesList&, DB::NamesAndTypesList&) (.constprop.22) /home/vzakaznikov/github/ClickHouse/build/../dbms/src/Interpreters/getTableExpressions.cpp:82 in /home/vzakaznikov/github/ClickHouse/build/dbms/programs/clickhouse\r\n6. 0x8407498 DB::getDatabaseAndTablesWithColumnNames(std::__1::vector<DB::ASTTableExpression const*, std::__1::allocator<DB::ASTTableExpression const*> > const&, DB::Context const&, bool) /home/vzakaznikov/github/ClickHouse/build/../dbms/src/Interpreters/getTableExpressions.cpp:135 in /home/vzakaznikov/github/ClickHouse/build/dbms/programs/clickhouse\r\n7. 0x83b2661 DB::SyntaxAnalyzer::analyze(std::__1::shared_ptr<DB::IAST>&, DB::NamesAndTypesList const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::IStorage>, DB::NamesAndTypesList const&) const /home/vzakaznikov/github/ClickHouse/build/../dbms/src/Interpreters/SyntaxAnalyzer.cpp:110 in /home/vzakaznikov/github/ClickHouse/build/dbms/programs/clickhouse\r\n8. 0x82487c6 DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&)::'lambda'()::operator()() const /home/vzakaznikov/github/ClickHouse/build/../dbms/src/Interpreters/InterpreterSelectQuery.cpp:315 in /home/vzakaznikov/github/ClickHouse/build/dbms/programs/clickhouse\r\n9. 0x8249f2e DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) /home/vzakaznikov/github/ClickHouse/build/../dbms/src/Interpreters/InterpreterSelectQuery.cpp:392 in /home/vzakaznikov/github/ClickHouse/build/dbms/programs/clickhouse\r\n10. 0x824b056 DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) /home/vzakaznikov/github/ClickHouse/build/../dbms/src/Interpreters/InterpreterSelectQuery.cpp:172 in /home/vzakaznikov/github/ClickHouse/build/dbms/programs/clickhouse\r\n11. 0x8285184 DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) /home/vzakaznikov/github/ClickHouse/build/../contrib/libcxx/include/vector:1681 in /home/vzakaznikov/github/ClickHouse/build/dbms/programs/clickhouse\r\n12. 0x824a864 DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) /home/vzakaznikov/github/ClickHouse/build/../contrib/libcxx/include/memory:2615 in /home/vzakaznikov/github/ClickHouse/build/dbms/programs/clickhouse\r\n13. 0x824b056 DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) /home/vzakaznikov/github/ClickHouse/build/../dbms/src/Interpreters/InterpreterSelectQuery.cpp:172 in /home/vzakaznikov/github/ClickHouse/build/dbms/programs/clickhouse\r\n14. 0x8b3446e DB::PushingToViewsBlockOutputStream::process(DB::Block const&, unsigned long) /home/vzakaznikov/github/ClickHouse/build/../contrib/libcxx/include/vector:461 in /home/vzakaznikov/github/ClickHouse/build/dbms/programs/clickhouse\r\n15. 0x8b3538a DB::PushingToViewsBlockOutputStream::write(DB::Block const&) /home/vzakaznikov/github/ClickHouse/build/../contrib/libcxx/include/vector:656 in /home/vzakaznikov/github/ClickHouse/build/dbms/programs/clickhouse\r\n16. 0x8b4a310 DB::SquashingBlockOutputStream::writeSuffix() /home/vzakaznikov/github/ClickHouse/build/../contrib/libcxx/include/map:1090 in /home/vzakaznikov/github/ClickHouse/build/dbms/programs/clickhouse\r\n17. 0x4ab90da DB::SystemLog<DB::MetricLogElement>::flushImpl(DB::SystemLog<DB::MetricLogElement>::EntryType) /home/vzakaznikov/github/ClickHouse/build/../dbms/src/Interpreters/SystemLog.h:350 in /home/vzakaznikov/github/ClickHouse/build/dbms/programs/clickhouse\r\n18. 0x4ab9441 DB::SystemLog<DB::MetricLogElement>::threadFunction() /home/vzakaznikov/github/ClickHouse/build/../dbms/src/Common/Stopwatch.h:14 in /home/vzakaznikov/github/ClickHouse/build/dbms/programs/clickhouse\r\n19. 0x4ab9d6f ThreadFromGlobalPool::ThreadFromGlobalPool<DB::SystemLog<DB::MetricLogElement>::SystemLog(DB::Context&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long)::'lambda'()>(DB::MetricLogElement&&, DB::SystemLog<DB::MetricLogElement>::SystemLog(DB::Context&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long)::'lambda'()&&...)::'lambda'()::operator()() const /home/vzakaznikov/github/ClickHouse/build/../dbms/src/Common/ThreadPool.h:155 in /home/vzakaznikov/github/ClickHouse/build/dbms/programs/clickhouse\r\n20. 0x4a81425 ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) /home/vzakaznikov/github/ClickHouse/build/../contrib/libcxx/include/atomic:856 in /home/vzakaznikov/github/ClickHouse/build/dbms/programs/clickhouse\r\n21. 0x4a7fefc void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()> >(void*) /home/vzakaznikov/github/ClickHouse/build/../contrib/libcxx/include/memory:2615 in /home/vzakaznikov/github/ClickHouse/build/dbms/programs/clickhouse\r\n22. 0x76db start_thread  in /lib/x86_64-linux-gnu/libpthread-2.27.so\r\n23. 0x12188f __clone  in /lib/x86_64-linux-gnu/libc-2.27.so\r\n (version 20.2.1.1)\r\n2020.01.15 16:06:33.386457 [ 11 ] {} <Debug> system.metric_log (MergerMutator): Selected MergeAlgorithm: Horizontal\r\n```\r\n\r\n\r\n\nMaterialized Views on system log tables don't work\nview  sql is:\r\nCREATE MATERIALIZED VIEW table_slow_query_local ENGINE =MergeTree() PARTITION BY toDate(startTime) ORDER BY (query_id) TTL startTime+INTERVAL 90 DAY  POPULATE \r\nAS SELECT eventDate,startTime,status,useSeconds,readRows,resultRows,writeRows,writtenMB,memoryUsageMB,clusterName,serverName,serverIp,initial_query_id,query_id,queryFromHost FROM(\r\n \r\n SELECT event_date AS eventDate,query_start_time AS startTime,  multiIf(type = 1, 'start', type = 2, 'success',type = 3, 'errorBeforeStart',type = 4, 'errorProcessing', 'other') AS status,  \r\n query_duration_ms / 1000 AS useSeconds,      read_rows AS readRows,      result_rows AS resultRows,     written_rows AS writeRows,      written_bytes/1024/1024 AS writtenMB,     \r\n memory_usage / (1024 * 1024) AS memoryUsageMB,   initial_query_id,     query_id,      substring(IPv6NumToString(address),8,15) AS queryFromHost,'1' joinkey \r\n FROM system.query_log )a JOIN  (SELECT cluster AS clusterName,host_name AS serverName,host_address AS serverIp,'1' joinkey \r\n FROM system.clusters WHERE is_local LIMIT 1)b  ON a.joinkey=b.joinkey; \r\n\r\n\r\n**Describe the bug**\r\nafter create the above view,then when flush logs then throw errors is the clickhouse-server.log\r\n**How to reproduce**\r\ncreate the above view and tail the clickhouse-server.log can see the error and clickhouse cann't flush log to system.query_log.when delete the view,there is no error and flush log correctly.\r\n* Which ClickHouse server version to use\r\n20.1.6.30\r\n\r\n**Error message and/or stacktrace**\r\n2020.04.15 22:41:44.767768 [ 42 ] {} <Error> void DB::SystemLog<LogElement>::flushImpl(DB::SystemLog<LogElement>::EntryType) [with LogElement = DB::QueryLogElement]: Code: 393, e.displayText() = DB::Exception: There is no query, Stack trace (when copying this message, always include the lines below):\r\n\r\n0. 0x100ac1bc Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int)  in /usr/bin/clickhouse\r\n1. 0x8e74849 DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int)  in /usr/bin/clickhouse\r\n2. 0xcd7b5a6 ?  in /usr/bin/clickhouse\r\n3. 0xcd6ef49 DB::Context::getSampleBlockCache() const  in /usr/bin/clickhouse\r\n4. 0xd0b77d2 DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&)  in /usr/bin/clickhouse\r\n5. 0xd2b2299 ?  in /usr/bin/clickhouse\r\n6. 0xd2b51d8 DB::getDatabaseAndTablesWithColumnNames(std::__1::vector<DB::ASTTableExpression const*, std::__1::allocator<DB::ASTTableExpression const*> > const&, DB::Context const&, bool)  in /usr/bin/clickhouse\r\n7. 0xd23130b DB::SyntaxAnalyzer::analyze(std::__1::shared_ptr<DB::IAST>&, DB::NamesAndTypesList const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::IStorage>, DB::NamesAndTypesList const&) const  in /usr/bin/clickhouse\r\n8. 0xcef1d96 ?  in /usr/bin/clickhouse\r\n9. 0xcef2f4e DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&)  in /usr/bin/clickhouse\r\n10. 0xcef3f16 DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&)  in /usr/bin/clickhouse\r\n11. 0xcebeaa2 DB::PushingToViewsBlockOutputStream::PushingToViewsBlockOutputStream(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::IStorage> const&, DB::Context const&, std::__1::shared_ptr<DB::IAST> const&, bool)  in /usr/bin/clickhouse\r\n12. 0xceb62cd DB::InterpreterInsertQuery::execute()  in /usr/bin/clickhouse\r\n13. 0x8eecaca DB::SystemLog<DB::QueryLogElement>::flushImpl(DB::SystemLog<DB::QueryLogElement>::EntryType)  in /usr/bin/clickhouse\r\n14. 0x8efeeed DB::SystemLog<DB::QueryLogElement>::threadFunction()  in /usr/bin/clickhouse\r\n15. 0x8f00a50 ThreadFromGlobalPool::ThreadFromGlobalPool<DB::SystemLog<DB::QueryLogElement>::SystemLog(DB::Context&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long)::'lambda'()>(DB::QueryLogElement&&, DB::SystemLog<DB::QueryLogElement>::SystemLog(DB::Context&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, unsigned long)::'lambda'()&&...)::'lambda'()::operator()() const  in /usr/bin/clickhouse\r\n16. 0x8e97347 ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>)  in /usr/bin/clickhouse\r\n17. 0x8e9580f ?  in /usr/bin/clickhouse\r\n18. 0x7e25 start_thread  in /usr/lib64/libpthread-2.17.so\r\n19. 0xfebad __clone  in /usr/lib64/libc-2.17.so\r\n (version 20.1.6.30 (official build))\r\n\nMat view subquery + buffer table results in DB::Exception: There is no query\n```\r\nCREATE TABLE t1 (\r\n  i UInt32,\r\n  time DateTime\r\n) ENGINE = MergeTree()\r\nPARTITION BY time\r\nORDER BY time\r\n\r\nCREATE TABLE t2 (\r\n  i UInt32,\r\n  time DateTime\r\n) ENGINE = MergeTree()\r\nPARTITION BY time\r\nORDER BY time\r\n\r\nCREATE MATERIALIZED VIEW mv1\r\nTO t2\r\nAS SELECT * FROM (SELECT * FROM t1)\r\n\r\nCREATE TABLE b1 AS t1\r\nENGINE = Buffer(default, t1, 1, 0, 0, 1, 1, 1, 1)\r\n\r\nvmihailenco :) INSERT INTO b1 VALUES (1, now());\r\n\r\nINSERT INTO b1 VALUES\r\n\r\nReceived exception from server (version 20.3.7):\r\nCode: 393. DB::Exception: Received from localhost:9000. DB::Exception: There is no query.\r\n```\n",
  "hints_text": "Same issue if an MV is created as \r\n```sql\r\nCREATE MATERIALIZED VIEW mv\r\nENGINE = Memory() AS\r\nSELECT sum(value) / 10\r\nFROM \r\n(\r\n    SELECT \r\n        ProfileEvent_DiskReadElapsedMicroseconds AS value, \r\n        event_time\r\n    FROM system.metric_log\r\n    ORDER BY event_time DESC\r\n    LIMIT 10\r\n)\r\n```\nLack if query context when flushing system logs \nSimilar for meric_log: #8670\r\nSimilar for dictionaries: https://github.com/ClickHouse/ClickHouse/issues/9932#issuecomment-605938668\r\nSimilar issue for Buffer tables: #10437\r\nSimilar (fixed) for Distributed tables: #5142 #4064\r\nSimilar (fixed) in LIVE VIEW: #7773\r\nSimilar (fixed) in Kafka: #8180 #5243\r\nSimilar for mutations: #8452 (quesntionable) \r\n\r\nhttps://github.com/ClickHouse/ClickHouse/blob/8c2839d3c9fcb671492356b12af3366ff0601c91/src/Interpreters/Context.cpp#L1108-L1120\r\n\r\n\nI'm having same issue,\r\nI have \r\n1. table A engine ReplaceMergeTree()\r\n2. MV B on table A\r\n3. Buffer table on table A\r\n\r\nData is not written to the destination A table from the buffer.\r\nEven DROPing the Buffer that should trigger flush the data fails\r\n\r\n```\r\n2020.05.02 21:31:28.038219 [ 526 ] {06a0c14c-6c81-4204-9ab7-968755e881ce} <Error> virtual void DB::StorageBuffer::shutdown(): Code: 393, e.displayText() = DB::Exception: There is no query, Stack trace (when copying this message, always include the lines below):\r\n\r\n0. Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0xbecd55c in /usr/bin/clickhouse\r\n1. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x5009d49 in /usr/bin/clickhouse\r\n2. ? @ 0x4bfb800 in /usr/bin/clickhouse\r\n3. DB::Context::getSampleBlockCache() const @ 0x8cdcb99 in /usr/bin/clickhouse\r\n4. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&) @ 0x8da5c02 in /usr/bin/clickhouse\r\n5. ? @ 0x8f365b9 in /usr/bin/clickhouse\r\n6. DB::getDatabaseAndTablesWithColumnNames(std::__1::vector<DB::ASTTableExpression const*, std::__1::allocator<DB::ASTTableExpression const*> > const&, DB::Context const&, bool) @ 0x8f394f8 in /usr/bin/clickhouse\r\n7. DB::SyntaxAnalyzer::analyze(std::__1::shared_ptr<DB::IAST>&, DB::NamesAndTypesList const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::IStorage>, DB::NamesAndTypesList const&) const @ 0x8ef3983 in /usr/bin/clickhouse\r\n8. ? @ 0x8d6d616 in /usr/bin/clickhouse\r\n9. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6e8c8 in /usr/bin/clickhouse\r\n10. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6f9f5 in /usr/bin/clickhouse\r\n11. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8da5236 in /usr/bin/clickhouse\r\n12. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6f2af in /usr/bin/clickhouse\r\n13. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6f9f5 in /usr/bin/clickhouse\r\n14. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8da5236 in /usr/bin/clickhouse\r\n15. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6f2af in /usr/bin/clickhouse\r\n16. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6f9f5 in /usr/bin/clickhouse\r\n17. DB::PushingToViewsBlockOutputStream::PushingToViewsBlockOutputStream(std::__1::shared_ptr<DB::IStorage> const&, DB::Context const&, std::__1::shared_ptr<DB::IAST> const&, bool) @ 0x96f8baa in /usr/bin/clickhouse\r\n18. DB::InterpreterInsertQuery::execute() @ 0x8d4f07f in /usr/bin/clickhouse\r\n19. DB::StorageBuffer::writeBlockToDestination(DB::Block const&, std::__1::shared_ptr<DB::IStorage>) @ 0x99469fe in /usr/bin/clickhouse\r\n20. DB::StorageBuffer::flushBuffer(DB::StorageBuffer::Buffer&, bool, bool) @ 0x994796f in /usr/bin/clickhouse\r\n21. DB::StorageBuffer::optimize(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::IAST> const&, bool, bool, DB::Context const&) @ 0x9947baf in /usr/bin/clickhouse\r\n22. DB::StorageBuffer::shutdown() @ 0x9944103 in /usr/bin/clickhouse\r\n23. DB::InterpreterDropQuery::executeToTable(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::ASTDropQuery::Kind, bool, bool, bool) @ 0x8d47dd0 in /usr/bin/clickhouse\r\n24. DB::InterpreterDropQuery::execute() @ 0x8d49e3e in /usr/bin/clickhouse\r\n25. ? @ 0x8f2f50a in /usr/bin/clickhouse\r\n26. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, DB::Context&, std::__1::function<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>, std::__1::function<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>) @ 0x8f32b06 in /usr/bin/clickhouse\r\n27. DB::HTTPHandler::processQuery(Poco::Net::HTTPServerRequest&, HTMLForm&, Poco::Net::HTTPServerResponse&, DB::HTTPHandler::Output&) @ 0x5084816 in /usr/bin/clickhouse\r\n28. DB::HTTPHandler::handleRequest(Poco::Net::HTTPServerRequest&, Poco::Net::HTTPServerResponse&) @ 0x5087f03 in /usr/bin/clickhouse\r\n29. Poco::Net::HTTPServerConnection::run() @ 0x9e0480c in /usr/bin/clickhouse\r\n30. Poco::Net::TCPServerConnection::start() @ 0x9e01297 in /usr/bin/clickhouse\r\n31. Poco::Net::TCPServerDispatcher::run() @ 0x9e0168d in /usr/bin/clickhouse\r\n (version 20.2.1.2442 (official build))\r\n```",
  "created_at": "2020-07-03T17:32:14Z"
}