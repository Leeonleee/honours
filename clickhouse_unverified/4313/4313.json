{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 4313,
  "instance_id": "ClickHouse__ClickHouse-4313",
  "issue_numbers": [
    "3982"
  ],
  "base_commit": "2bc0ad3fdb3c6133f9ed9a06707e50ae056c85fc",
  "patch": "diff --git a/dbms/src/Storages/System/StorageSystemTables.cpp b/dbms/src/Storages/System/StorageSystemTables.cpp\nindex f7de3713bc0e..f7299d5de6cd 100644\n--- a/dbms/src/Storages/System/StorageSystemTables.cpp\n+++ b/dbms/src/Storages/System/StorageSystemTables.cpp\n@@ -173,8 +173,12 @@ class TablesBlockInputStream : public IBlockInputStream\n \n             for (; rows_count < max_block_size && tables_it->isValid(); tables_it->next())\n             {\n-                ++rows_count;\n                 auto table_name = tables_it->name();\n+                const auto table = context.tryGetTable(database_name, table_name);\n+                if (!table)\n+                    continue;\n+\n+                ++rows_count;\n \n                 size_t src_index = 0;\n                 size_t res_index = 0;\n@@ -253,11 +257,10 @@ class TablesBlockInputStream : public IBlockInputStream\n                 else\n                     src_index += 2;\n \n-                const auto table_it = context.getTable(database_name, table_name);\n                 ASTPtr expression_ptr;\n                 if (columns_mask[src_index++])\n                 {\n-                    if ((expression_ptr = table_it->getPartitionKeyAST()))\n+                    if ((expression_ptr = table->getPartitionKeyAST()))\n                         res_columns[res_index++]->insert(queryToString(expression_ptr));\n                     else\n                         res_columns[res_index++]->insertDefault();\n@@ -265,7 +268,7 @@ class TablesBlockInputStream : public IBlockInputStream\n \n                 if (columns_mask[src_index++])\n                 {\n-                    if ((expression_ptr = table_it->getSortingKeyAST()))\n+                    if ((expression_ptr = table->getSortingKeyAST()))\n                         res_columns[res_index++]->insert(queryToString(expression_ptr));\n                     else\n                         res_columns[res_index++]->insertDefault();\n@@ -273,7 +276,7 @@ class TablesBlockInputStream : public IBlockInputStream\n \n                 if (columns_mask[src_index++])\n                 {\n-                    if ((expression_ptr = table_it->getPrimaryKeyAST()))\n+                    if ((expression_ptr = table->getPrimaryKeyAST()))\n                         res_columns[res_index++]->insert(queryToString(expression_ptr));\n                     else\n                         res_columns[res_index++]->insertDefault();\n@@ -281,7 +284,7 @@ class TablesBlockInputStream : public IBlockInputStream\n \n                 if (columns_mask[src_index++])\n                 {\n-                    if ((expression_ptr = table_it->getSamplingKeyAST()))\n+                    if ((expression_ptr = table->getSamplingKeyAST()))\n                         res_columns[res_index++]->insert(queryToString(expression_ptr));\n                     else\n                         res_columns[res_index++]->insertDefault();\n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/00838_system_tables_drop_table_race.reference b/dbms/tests/queries/0_stateless/00838_system_tables_drop_table_race.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/dbms/tests/queries/0_stateless/00838_system_tables_drop_table_race.sh b/dbms/tests/queries/0_stateless/00838_system_tables_drop_table_race.sh\nnew file mode 100755\nindex 000000000000..1bac2f7ff1c2\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/00838_system_tables_drop_table_race.sh\n@@ -0,0 +1,13 @@\n+#!/usr/bin/env bash\n+\n+set -e\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+. $CURDIR/../shell_config.sh\n+\n+$CLICKHOUSE_CLIENT -q \"DROP TABLE IF EXISTS test.table\"\n+\n+seq 1 100 | sed -r -e \"s/.+/CREATE TABLE test.table (x UInt8) ENGINE = MergeTree ORDER BY x; DROP TABLE test.table;/\" | $CLICKHOUSE_CLIENT -n &\n+seq 1 100 | sed -r -e \"s/.+/SELECT * FROM system.tables WHERE database = 'test' LIMIT 1000000, 1;/\" | $CLICKHOUSE_CLIENT -n &\n+\n+wait\n",
  "problem_statement": "Select from system.tables can fail because it changed during select.\n18.16.1\r\n\r\nselect name from system.tables where name like '%_20190103200704_7318357_31397'\r\n\r\n```\r\n2019.01.03 21:05:36.525464 [ 70 ] {97f51fe5-a129-4ce4-ac3a-6966e3531c8d} <Debug> executeQuery: (from [::1]:40196) select name from system.tables where name like '%_20190103200704_7318357_31397'\r\n2019.01.03 21:05:36.525925 [ 70 ] {97f51fe5-a129-4ce4-ac3a-6966e3531c8d} <Trace> InterpreterSelectQuery: FetchColumns -> Complete\r\n2019.01.03 21:05:36.525982 [ 70 ] {97f51fe5-a129-4ce4-ac3a-6966e3531c8d} <Debug> executeQuery: Query pipeline:\r\n```\r\n\r\nmeanwhile ANOTHER table was dropped, system.tables changed.\r\n```\r\n2019.01.03 21:05:36.530037 [ 50 ] {53c33fa1-da11-42ca-b800-a18484acfcae} <Debug> executeQuery: (from [::1]:40198) DROP TABLE dim_event888520190103210000\r\n2019.01.03 21:05:36.530169 [ 50 ] {53c33fa1-da11-42ca-b800-a18484acfcae} <Debug> MemoryTracker: Peak memory usage (for query): 121.00 B.\r\n2019.01.03 21:05:36.530206 [ 50 ] {} <Information> TCPHandler: Processed in 0.000 sec.\r\n2019.01.03 21:05:36.530408 [ 50 ] {} <Information> TCPHandler: Done processing connection.\r\n\r\n```\r\n\r\nResult\r\n```\r\n\r\n2019.01.03 21:05:36.621698 [ 70 ] {97f51fe5-a129-4ce4-ac3a-6966e3531c8d} <Error> executeQuery: Code: 60, e.displayText() = DB::Exception: Table dw.dim_event888520190103210000 doesn't exist., e.w\r\nhat() = DB::Exception (from [::1]:40196) (in query: select name from system.tables where name like '%_20190103200704_7318357_31397'), Stack trace:\r\n\r\n0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x9c778f6]\r\n1. clickhouse-server(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x22) [0x32b6342]\r\n2. clickhouse-server(DB::Context::getTableImpl(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, st\r\nd::allocator<char> > const&, DB::Exception*) const+0x372) [0x6e558c2]\r\n3. clickhouse-server(DB::Context::getTable(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::a\r\nllocator<char> > const&) const+0x73) [0x6e55c13]\r\n4. clickhouse-server(DB::TablesBlockInputStream::readImpl()+0x78f) [0x34f440f]\r\n5. clickhouse-server(DB::IProfilingBlockInputStream::read()+0x25a) [0x6d6ac6a]\r\n6. clickhouse-server(DB::FilterBlockInputStream::readImpl()+0xbd) [0x73151ed]\r\n7. clickhouse-server(DB::IProfilingBlockInputStream::read()+0x25a) [0x6d6ac6a]\r\n8. clickhouse-server(DB::ExpressionBlockInputStream::readImpl()+0x2e) [0x73144be]\r\n9. clickhouse-server(DB::IProfilingBlockInputStream::read()+0x25a) [0x6d6ac6a]\r\n10. clickhouse-server(DB::ExpressionBlockInputStream::readImpl()+0x2e) [0x73144be]\r\n11. clickhouse-server(DB::IProfilingBlockInputStream::read()+0x25a) [0x6d6ac6a]\r\n12. clickhouse-server(DB::AsynchronousBlockInputStream::calculate()+0x56) [0x6d5fe96]\r\n13. clickhouse-server() [0x6d60300]\r\n14. clickhouse-server(ThreadPool::worker()+0x19e) [0x9f3779e]\r\n15. clickhouse-server() [0xa94e40f]\r\n16. /lib/x86_64-linux-gnu/libpthread.so.0(+0x7494) [0x7f96b87bf494]\r\n17. /lib/x86_64-linux-gnu/libc.so.6(clone+0x3f) [0x7f96b7df1acf]\r\n```\n",
  "hints_text": "Broken in https://github.com/yandex/ClickHouse/pull/3609",
  "created_at": "2019-02-08T14:13:03Z"
}