{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 74634,
  "instance_id": "ClickHouse__ClickHouse-74634",
  "issue_numbers": [
    "74596"
  ],
  "base_commit": "4c27027d547dcffcf7c45a088b677f36f8441124",
  "patch": "diff --git a/src/Storages/ProjectionsDescription.cpp b/src/Storages/ProjectionsDescription.cpp\nindex d71f108c2f5f..cd26693d8e6a 100644\n--- a/src/Storages/ProjectionsDescription.cpp\n+++ b/src/Storages/ProjectionsDescription.cpp\n@@ -12,6 +12,7 @@\n #include <Parsers/parseQuery.h>\n #include <Parsers/queryToString.h>\n \n+#include <Columns/ColumnConst.h>\n #include <Core/Defines.h>\n #include <Interpreters/InterpreterSelectQuery.h>\n #include <Interpreters/ExpressionActions.h>\n@@ -241,24 +242,24 @@ ProjectionDescription ProjectionDescription::getMinMaxCountProjection(\n     result.required_columns = select.getRequiredColumns();\n     result.sample_block = select.getSampleBlock();\n \n-    std::map<String, size_t> partition_column_name_to_value_index;\n-    if (partition_columns)\n+    std::set<size_t> constant_positions;\n+    for (size_t i = 0; i < result.sample_block.columns(); ++i)\n     {\n-        for (auto i : collections::range(partition_columns->children.size()))\n-            partition_column_name_to_value_index[partition_columns->children[i]->getColumnNameWithoutAlias()] = i;\n+        if (typeid_cast<const ColumnConst *>(result.sample_block.getByPosition(i).column.get()))\n+            constant_positions.insert(i);\n     }\n+    result.sample_block.erase(constant_positions);\n \n     const auto & analysis_result = select.getAnalysisResult();\n     if (analysis_result.need_aggregate)\n     {\n         for (const auto & key : select.getQueryAnalyzer()->aggregationKeys())\n         {\n-            result.sample_block_for_keys.insert({nullptr, key.type, key.name});\n-            auto it = partition_column_name_to_value_index.find(key.name);\n-            if (it == partition_column_name_to_value_index.end())\n-                throw Exception(\n-                    ErrorCodes::LOGICAL_ERROR, \"minmax_count projection can only have keys about partition columns. It's a bug\");\n-            result.partition_value_indices.push_back(it->second);\n+            if (result.sample_block.has(key.name))\n+            {\n+                result.sample_block_for_keys.insert({nullptr, key.type, key.name});\n+                result.partition_value_indices.push_back(result.sample_block.getPositionByName(key.name));\n+            }\n         }\n     }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03311_min_max_count_projection_with_constant_partition_expr.reference b/tests/queries/0_stateless/03311_min_max_count_projection_with_constant_partition_expr.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/03311_min_max_count_projection_with_constant_partition_expr.sql b/tests/queries/0_stateless/03311_min_max_count_projection_with_constant_partition_expr.sql\nnew file mode 100644\nindex 000000000000..9257a7dbf6bf\n--- /dev/null\n+++ b/tests/queries/0_stateless/03311_min_max_count_projection_with_constant_partition_expr.sql\n@@ -0,0 +1,5 @@\n+DROP TABLE IF EXISTS t0;\n+\n+CREATE TABLE t0 (c0 Int) ENGINE = MergeTree() PARTITION BY (EXISTS (SELECT 1)) ORDER BY tuple();\n+\n+DROP TABLE t0;\n",
  "problem_statement": "Logical Error: minmax_count projection can only have keys about partition columns. It's a bug\n### Describe the bug\n\nEasy to reproduce. Create a table with `EXISTS` in the PARTITION BY clause.\n\n### How to reproduce\n\nRun Fiddle: https://fiddle.clickhouse.com/a0ceaaee-f238-4687-8ef9-9f91a95c2830\n\n### Error message and/or stacktrace\n\nStack trace:\n```\n<Fatal> : Logical error: 'minmax_count projection can only have keys about partition columns. It's a bug'.\n<Fatal> : Stack trace (when copying this message, always include the lines below):\n\n0. std::exception::exception[abi:ne180100]() @ 0x00000000195859f4\n1. base/poco/Foundation/src/Exception.cpp:27: Poco::Exception::Exception(String const&, int) @ 0x000000003a5ca180\n2. src/Common/Exception.cpp:105: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000002628b30b\n3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000019425956\n4. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x000000001943cb4f\n5. src/Storages/ProjectionsDescription.cpp:257: DB::ProjectionDescription::getMinMaxCountProjection(DB::ColumnsDescription const&, std::shared_ptr<DB::IAST>, std::vector<String, std::allocator<String>> const&, absl::InlinedVector<std::shared_ptr<DB::IAST>, 7ul, std::allocator<std::shared_ptr<DB::IAST>>> const&, std::shared_ptr<DB::Context const>) @ 0x00000000351b9cfc\n6. src/Storages/MergeTree/registerStorageMergeTree.cpp:678: DB::create(DB::StorageFactory::Arguments const&) @ 0x0000000035fdc294\n7. contrib/llvm-project/libcxx/include/__functional/function.h:714: ? @ 0x0000000035221d3f\n8. src/Interpreters/InterpreterCreateQuery.cpp:1910: DB::InterpreterCreateQuery::doCreateTable(DB::ASTCreateQuery&, DB::InterpreterCreateQuery::TableProperties const&, std::unique_ptr<DB::DDLGuard, std::default_delete<DB::DDLGuard>>&, DB::LoadingStrictnessLevel) @ 0x00000000325cc893\n9. src/Interpreters/InterpreterCreateQuery.cpp:1722: DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x00000000325c1cef\n10. src/Interpreters/InterpreterCreateQuery.cpp:2301: DB::InterpreterCreateQuery::execute() @ 0x00000000325d7ca5\n11. src/Interpreters/executeQuery.cpp:1441: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x00000000330bd535\n12. src/Interpreters/executeQuery.cpp:1608: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000330b74ce\n13. src/Server/TCPHandler.cpp:658: DB::TCPHandler::runImpl() @ 0x000000003648945c\n14. src/Server/TCPHandler.cpp:2625: DB::TCPHandler::run() @ 0x00000000364b7aee\n15. base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x000000003a6f4202\n16. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x000000003a6f4ed2\n17. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x000000003a65ee17\n18. base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x000000003a65a84e\n19. ? @ 0x00007ffff7ca1e2e\n20. ? @ 0x00007ffff7d33a4c\n```\n",
  "hints_text": "",
  "created_at": "2025-01-16T05:10:50Z",
  "modified_files": [
    "src/Storages/ProjectionsDescription.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03311_min_max_count_projection_with_constant_partition_expr.sql"
  ]
}