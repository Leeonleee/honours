You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
there is no way to invalidate wrong input data for omitted fields in "row" formats
Example:
```
CREATE TABLE t1 (ts DateTime, value String) engine = Memory()
INSERT INTO t1 SETTINGS input_format_null_as_default = 0 FORMAT JSONEachRow {"value":"foo"}
SELECT * FROM t1
┌──────────────────ts─┬─value─┐
│ 1969-12-31 19:00:00 │ foo   │
└─────────────────────┴───────┘

```
I really don't think that inserting a default when the data was not present at the ingested row is optimal.
For example in most use cases where people who send data to ClickHouse are not the same as who manages the database the errors will be made and data will be FUBAR completely for no reason.
Moreover there is currently no way to prevent a "default" to be inserted in an omitted field.
Even constraints will not help, as we cannot differentiate between valid and invalid input at constraint check time.

There are issues which confused the users already #33113 https://github.com/ClickHouse/clickhouse-java/issues/1355

I propose to add another input setting for `JSONEachRow`, `BSONEachRow` and `Values` formats: `input_format_force_null_for_omitted_fields`
Which will fail to insert into a non-nullable column if flied is omitted

This will fail:
```
CREATE TABLE t1 (ts DateTime, value String) engine = Memory()
INSERT INTO t1 SETTINGS input_format_force_null_for_omitted_fields = 1 FORMAT JSONEachRow {"value":"foo"}
```
This will succeed:
```
CREATE TABLE t1 (Nullabe(ts) DateTime, value String) engine = Memory()
INSERT INTO t1 SETTINGS input_format_force_null_for_omitted_fields = 1 FORMAT JSONEachRow {"value":"foo"}
```
PR is essentially ready, will add it soon.
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
