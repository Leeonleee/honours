{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 22876,
  "instance_id": "ClickHouse__ClickHouse-22876",
  "issue_numbers": [
    "22728"
  ],
  "base_commit": "1c28878f5d2144c5fd59deeb0c1e41ec49068269",
  "patch": "diff --git a/src/AggregateFunctions/AggregateFunctionMannWhitney.h b/src/AggregateFunctions/AggregateFunctionMannWhitney.h\nindex 1451536d5199..7efdebf16391 100644\n--- a/src/AggregateFunctions/AggregateFunctionMannWhitney.h\n+++ b/src/AggregateFunctions/AggregateFunctionMannWhitney.h\n@@ -174,6 +174,8 @@ class AggregateFunctionMannWhitney final:\n         return \"mannWhitneyUTest\";\n     }\n \n+    bool allocatesMemoryInArena() const override { return true; }\n+\n     DataTypePtr getReturnType() const override\n     {\n         DataTypes types\n@@ -208,7 +210,7 @@ class AggregateFunctionMannWhitney final:\n     void merge(AggregateDataPtr __restrict place, ConstAggregateDataPtr rhs, Arena * arena) const override\n     {\n         auto & a = this->data(place);\n-        auto & b = this->data(rhs);\n+        const auto & b = this->data(rhs);\n \n         a.merge(b, arena);\n     }\ndiff --git a/src/AggregateFunctions/AggregateFunctionRankCorrelation.h b/src/AggregateFunctions/AggregateFunctionRankCorrelation.h\nindex a7e0852378cd..fbba1b99ab91 100644\n--- a/src/AggregateFunctions/AggregateFunctionRankCorrelation.h\n+++ b/src/AggregateFunctions/AggregateFunctionRankCorrelation.h\n@@ -58,6 +58,8 @@ class AggregateFunctionRankCorrelation :\n         return \"rankCorr\";\n     }\n \n+    bool allocatesMemoryInArena() const override { return true; }\n+\n     DataTypePtr getReturnType() const override\n     {\n         return std::make_shared<DataTypeNumber<Float64>>();\ndiff --git a/src/Common/Arena.h b/src/Common/Arena.h\nindex 0f4f0420c380..4d14c15197d7 100644\n--- a/src/Common/Arena.h\n+++ b/src/Common/Arena.h\n@@ -128,7 +128,7 @@ class Arena : private boost::noncopyable\n     template <size_t> friend class AlignedArenaAllocator;\n \n public:\n-    Arena(size_t initial_size_ = 4096, size_t growth_factor_ = 2, size_t linear_growth_threshold_ = 128 * 1024 * 1024)\n+    explicit Arena(size_t initial_size_ = 4096, size_t growth_factor_ = 2, size_t linear_growth_threshold_ = 128 * 1024 * 1024)\n         : growth_factor(growth_factor_), linear_growth_threshold(linear_growth_threshold_),\n         head(new MemoryChunk(initial_size_, nullptr)), size_in_bytes(head->size()),\n         page_size(static_cast<size_t>(::getPageSize()))\n@@ -160,7 +160,7 @@ class Arena : private boost::noncopyable\n             void * head_pos = head->pos;\n             size_t space = head->end - head->pos;\n \n-            auto res = static_cast<char *>(std::align(alignment, size, head_pos, space));\n+            auto * res = static_cast<char *>(std::align(alignment, size, head_pos, space));\n             if (res)\n             {\n                 head->pos = static_cast<char *>(head_pos);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01802_rank_corr_mann_whitney_over_window.reference b/tests/queries/0_stateless/01802_rank_corr_mann_whitney_over_window.reference\nnew file mode 100644\nindex 000000000000..42acbe4fbaf2\n--- /dev/null\n+++ b/tests/queries/0_stateless/01802_rank_corr_mann_whitney_over_window.reference\n@@ -0,0 +1,10 @@\n+0.5060606060606061\n+0.5083333333333333\n+0.5119047619047619\n+0.5178571428571428\n+0.5285714285714286\n+0.525\n+0.55\n+0.625\n+0.5\n+nan\ndiff --git a/tests/queries/0_stateless/01802_rank_corr_mann_whitney_over_window.sql b/tests/queries/0_stateless/01802_rank_corr_mann_whitney_over_window.sql\nnew file mode 100644\nindex 000000000000..3c1746a30f8a\n--- /dev/null\n+++ b/tests/queries/0_stateless/01802_rank_corr_mann_whitney_over_window.sql\n@@ -0,0 +1,22 @@\n+DROP TABLE IF EXISTS 01802_empsalary;\n+\n+SET allow_experimental_window_functions=1;\n+\n+CREATE TABLE 01802_empsalary\n+(\n+    `depname` LowCardinality(String),\n+    `empno` UInt64,\n+    `salary` Int32,\n+    `enroll_date` Date\n+)\n+ENGINE = MergeTree\n+ORDER BY enroll_date\n+SETTINGS index_granularity = 8192;\n+\n+INSERT INTO 01802_empsalary VALUES ('sales', 1, 5000, '2006-10-01'), ('develop', 8, 6000, '2006-10-01'), ('personnel', 2, 3900, '2006-12-23'), ('develop', 10, 5200, '2007-08-01'), ('sales', 3, 4800, '2007-08-01'), ('sales', 4, 4800, '2007-08-08'), ('develop', 11, 5200, '2007-08-15'), ('personnel', 5, 3500, '2007-12-10'), ('develop', 7, 4200, '2008-01-01'), ('develop', 9, 4500, '2008-01-01');\n+\n+SELECT mannWhitneyUTest(salary, salary) OVER (ORDER BY salary ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS func FROM 01802_empsalary; -- {serverError 36}\n+\n+SELECT rankCorr(salary, 0.5) OVER (ORDER BY salary ASC ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS func FROM 01802_empsalary;\n+\n+DROP TABLE IF EXISTS 01802_empsalary;\n",
  "problem_statement": "Server crash when using mannWhitneyUTest over a window\n\r\n**Describe the bug**\r\nCrash in 21.4.1.6378 when using mannWhitneyUTest aggregate function.\r\n\r\n**How to reproduce**\r\n```\r\nCREATE TABLE default.empsalary\r\n(\r\n    `depname` LowCardinality(String),\r\n    `empno` UInt64,\r\n    `salary` Int32,\r\n    `enroll_date` Date\r\n)\r\nENGINE = MergeTree\r\nORDER BY enroll_date\r\nSETTINGS index_granularity = 8192 \r\n\r\nuser-host :) select * from empsalary\r\n\r\nSELECT *\r\nFROM empsalary\r\n\r\nQuery id: 64367fe7-67c3-4495-a68f-04115d549fb0\r\n\r\n\u250c\u2500depname\u2500\u2500\u2500\u252c\u2500empno\u2500\u252c\u2500salary\u2500\u252c\u2500enroll_date\u2500\u2510\r\n\u2502 sales     \u2502     1 \u2502   5000 \u2502  2006-10-01 \u2502\r\n\u2502 develop   \u2502     8 \u2502   6000 \u2502  2006-10-01 \u2502\r\n\u2502 personnel \u2502     2 \u2502   3900 \u2502  2006-12-23 \u2502\r\n\u2502 develop   \u2502    10 \u2502   5200 \u2502  2007-08-01 \u2502\r\n\u2502 sales     \u2502     3 \u2502   4800 \u2502  2007-08-01 \u2502\r\n\u2502 sales     \u2502     4 \u2502   4800 \u2502  2007-08-08 \u2502\r\n\u2502 develop   \u2502    11 \u2502   5200 \u2502  2007-08-15 \u2502\r\n\u2502 personnel \u2502     5 \u2502   3500 \u2502  2007-12-10 \u2502\r\n\u2502 develop   \u2502     7 \u2502   4200 \u2502  2008-01-01 \u2502\r\n\u2502 develop   \u2502     9 \u2502   4500 \u2502  2008-01-01 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nApr 06,2021 18:03:22             \u27e5  Example func='mannWhitneyUTest(salary, 1)'\r\n                                      Checking aggregate funcs over rows frame.\r\n                                      Arguments\r\n                                        func\r\n                                          mannWhitneyUTest(salary, 1)\r\nApr 06,2021 18:03:22               \u27e5  When I execute query\r\n                                        SELECT mannWhitneyUTest(salary, 1) OVER (ORDER BY salary ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS func\r\n                                          FROM empsalary\r\nApr 06,2021 18:03:22                 \u27e5  By executing command\r\n                                          echo -e \"\r\n                                          SELECT mannWhitneyUTest(salary, 1) OVER (ORDER BY salary ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS func\r\n                                            FROM empsalary\r\n                                           FORMAT TabSeparatedWithNames\" | clickhouse client -n --allow_experimental_window_functions \"1\"\r\n                 2ms                      [clickhouse1] bash# echo -e \"\r\n                 4ms                      [clickhouse1] >         SELECT mannWhitneyUTest(salary, 1) OVER (ORDER BY salary ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS func\r\n                 5ms                      [clickhouse1] >           FROM empsalary\r\n                 8ms                      [clickhouse1] >          FORMAT TabSeparatedWithNames\" | clickhouse client -n --allow_experimental_window_functions \"1\"\r\n                33ms                      [clickhouse1] func\r\n               138ms                      [clickhouse1] [clickhouse1] 2021.04.07 01:03:22.548322 [ 356 ] <Fatal> BaseDaemon: ########################################\r\n               138ms                      [clickhouse1] [clickhouse1] 2021.04.07 01:03:22.548442 [ 356 ] <Fatal> BaseDaemon: (version 21.4.1.6378 (official build), build id: E9CD326C4028D7B6036A025796AA94E886A6FD1D) (from thread 41) (query_id: 801a44f1-730d-4605-9465-7c2f1d1b9aa2) Received signal Segmentation fault (11)\r\n               138ms                      [clickhouse1] [clickhouse1] 2021.04.07 01:03:22.548478 [ 356 ] <Fatal> BaseDaemon: Address: 0x10 Access: read. Address not mapped to object.\r\n               138ms                      [clickhouse1] [clickhouse1] 2021.04.07 01:03:22.548512 [ 356 ] <Fatal> BaseDaemon: Stack trace: 0xa3efac2 0xa3f2a79 0x10154c53 0x1015506e 0x1015973f 0xfff2fdd 0xffefc91 0xffedc06 0xfffb072 0x88d56bf 0x88d9153 0x7fbd41866609 0x7fbd4178d293\r\n               138ms                      [clickhouse1] [clickhouse1] 2021.04.07 01:03:22.549119 [ 356 ] <Fatal> BaseDaemon: 1. void DB::PODArrayBase<8ul, 32ul, DB::MixedArenaAllocator<4096ul, Allocator<false, false>, DB::AlignedArenaAllocator<8ul>, 8ul>, 0ul, 0ul>::realloc<DB::Arena*&>(unsigned long, DB::Arena*&) @ 0xa3efac2 in /usr/bin/clickhouse\r\n               138ms                      [clickhouse1] [clickhouse1] 2021.04.07 01:03:22.549165 [ 356 ] <Fatal> BaseDaemon: 2. DB::AggregateFunctionMannWhitney::add(char*, DB::IColumn const**, unsigned long, DB::Arena*) const @ 0xa3f2a79 in /usr/bin/clickhouse\r\n               138ms                      [clickhouse1] [clickhouse1] 2021.04.07 01:03:22.549187 [ 356 ] <Fatal> BaseDaemon: 3. DB::WindowTransform::updateAggregationState() @ 0x10154c53 in /usr/bin/clickhouse\r\n               138ms                      [clickhouse1] [clickhouse1] 2021.04.07 01:03:22.549221 [ 356 ] <Fatal> BaseDaemon: 4. DB::WindowTransform::appendChunk(DB::Chunk&) @ 0x1015506e in /usr/bin/clickhouse\r\n               138ms                      [clickhouse1] [clickhouse1] 2021.04.07 01:03:22.549251 [ 356 ] <Fatal> BaseDaemon: 5. DB::WindowTransform::work() @ 0x1015973f in /usr/bin/clickhouse\r\n               138ms                      [clickhouse1] [clickhouse1] 2021.04.07 01:03:22.549278 [ 356 ] <Fatal> BaseDaemon: 6. ? @ 0xfff2fdd in /usr/bin/clickhouse\r\n               138ms                      [clickhouse1] [clickhouse1] 2021.04.07 01:03:22.549312 [ 356 ] <Fatal> BaseDaemon: 7. DB::PipelineExecutor::executeStepImpl(unsigned long, unsigned long, std::__1::atomic<bool>*) @ 0xffefc91 in /usr/bin/clickhouse\r\n               138ms                      [clickhouse1] [clickhouse1] 2021.04.07 01:03:22.549331 [ 356 ] <Fatal> BaseDaemon: 8. DB::PipelineExecutor::executeImpl(unsigned long) @ 0xffedc06 in /usr/bin/clickhouse\r\n               138ms                      [clickhouse1] [clickhouse1] 2021.04.07 01:03:22.549362 [ 356 ] <Fatal> BaseDaemon: 9. ? @ 0xfffb072 in /usr/bin/clickhouse\r\n               138ms                      [clickhouse1] [clickhouse1] 2021.04.07 01:03:22.549393 [ 356 ] <Fatal> BaseDaemon: 10. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x88d56bf in /usr/bin/clickhouse\r\n               138ms                      [clickhouse1] [clickhouse1] 2021.04.07 01:03:22.549422 [ 356 ] <Fatal> BaseDaemon: 11. ? @ 0x88d9153 in /usr/bin/clickhouse\r\n               139ms                      [clickhouse1] [clickhouse1] 2021.04.07 01:03:22.549460 [ 356 ] <Fatal> BaseDaemon: 12. start_thread @ 0x9609 in /usr/lib/x86_64-linux-gnu/libpthread-2.31.so\r\n               139ms                      [clickhouse1] [clickhouse1] 2021.04.07 01:03:22.549486 [ 356 ] <Fatal> BaseDaemon: 13. __clone @ 0x122293 in /usr/lib/x86_64-linux-gnu/libc-2.31.so\r\n               139ms                      [clickhouse1] [clickhouse1] 2021.04.07 01:03:22.639326 [ 356 ] <Fatal> BaseDaemon: Checksum of the binary: F0772B88209F31A15D3ADA1A43619151, integrity check passed.\r\n```\r\n\r\n**Expected behavior**\r\nNo server crash.\n",
  "hints_text": "Similar issue with `rankCorr`\r\n\r\n```\r\nApr 06,2021 18:12:07             \u27e5  Example func='rankCorr(salary, 0.5)'\r\n                                      Checking aggregate funcs over rows frame.\r\n                                      Arguments\r\n                                        func\r\n                                          rankCorr(salary, 0.5)\r\nApr 06,2021 18:12:07               \u27e5  When I execute query\r\n                                        SELECT rankCorr(salary, 0.5) OVER (ORDER BY salary ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS func\r\n                                          FROM empsalary\r\nApr 06,2021 18:12:07                 \u27e5  By executing command\r\n                                          echo -e \"\r\n                                          SELECT rankCorr(salary, 0.5) OVER (ORDER BY salary ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS func\r\n                                            FROM empsalary\r\n                                           FORMAT TabSeparatedWithNames\" | clickhouse client -n --allow_experimental_window_functions \"1\"\r\n                 2ms                      [clickhouse1] bash# echo -e \"\r\n                 3ms                      [clickhouse1] >         SELECT rankCorr(salary, 0.5) OVER (ORDER BY salary ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING) AS func\r\n                 4ms                      [clickhouse1] >           FROM empsalary\r\n                 8ms                      [clickhouse1] >          FORMAT TabSeparatedWithNames\" | clickhouse client -n --allow_experimental_window_functions \"1\"\r\n                34ms                      [clickhouse1] func\r\n               137ms                      [clickhouse1] [clickhouse1] 2021.04.07 01:12:07.222496 [ 361 ] <Fatal> BaseDaemon: ########################################\r\n               137ms                      [clickhouse1] [clickhouse1] 2021.04.07 01:12:07.222610 [ 361 ] <Fatal> BaseDaemon: (version 21.4.1.6378 (official build), build id: E9CD326C4028D7B6036A025796AA94E886A6FD1D) (from thread 56) (query_id: f5674691-6760-48f9-9d13-14271fac26ee) Received signal Segmentation fault (11)\r\n               137ms                      [clickhouse1] [clickhouse1] 2021.04.07 01:12:07.222663 [ 361 ] <Fatal> BaseDaemon: Address: 0x10 Access: read. Address not mapped to object.\r\n               138ms                      [clickhouse1] [clickhouse1] 2021.04.07 01:12:07.222709 [ 361 ] <Fatal> BaseDaemon: Stack trace: 0xa3efac2 0xa3eec8d 0x10154c53 0x1015506e 0x1015973f 0xfff2fdd 0xffefc91 0xffedc06 0xfffb072 0x88d56bf 0x88d9153 0x7fb89c3b9609 0x7fb89c2e0293\r\n               138ms                      [clickhouse1] [clickhouse1] 2021.04.07 01:12:07.222835 [ 361 ] <Fatal> BaseDaemon: 1. void DB::PODArrayBase<8ul, 32ul, DB::MixedArenaAllocator<4096ul, Allocator<false, false>, DB::AlignedArenaAllocator<8ul>, 8ul>, 0ul, 0ul>::realloc<DB::Arena*&>(unsigned long, DB::Arena*&) @ 0xa3efac2 in /usr/bin/clickhouse\r\n               138ms                      [clickhouse1] [clickhouse1] 2021.04.07 01:12:07.222927 [ 361 ] <Fatal> BaseDaemon: 2. DB::AggregateFunctionRankCorrelation::add(char*, DB::IColumn const**, unsigned long, DB::Arena*) const @ 0xa3eec8d in /usr/bin/clickhouse\r\n               138ms                      [clickhouse1] [clickhouse1] 2021.04.07 01:12:07.222973 [ 361 ] <Fatal> BaseDaemon: 3. DB::WindowTransform::updateAggregationState() @ 0x10154c53 in /usr/bin/clickhouse\r\n               138ms                      [clickhouse1] [clickhouse1] 2021.04.07 01:12:07.223033 [ 361 ] <Fatal> BaseDaemon: 4. DB::WindowTransform::appendChunk(DB::Chunk&) @ 0x1015506e in /usr/bin/clickhouse\r\n               138ms                      [clickhouse1] [clickhouse1] 2021.04.07 01:12:07.223088 [ 361 ] <Fatal> BaseDaemon: 5. DB::WindowTransform::work() @ 0x1015973f in /usr/bin/clickhouse\r\n               138ms                      [clickhouse1] [clickhouse1] 2021.04.07 01:12:07.223153 [ 361 ] <Fatal> BaseDaemon: 6. ? @ 0xfff2fdd in /usr/bin/clickhouse\r\n               138ms                      [clickhouse1] [clickhouse1] 2021.04.07 01:12:07.223221 [ 361 ] <Fatal> BaseDaemon: 7. DB::PipelineExecutor::executeStepImpl(unsigned long, unsigned long, std::__1::atomic<bool>*) @ 0xffefc91 in /usr/bin/clickhouse\r\n               138ms                      [clickhouse1] [clickhouse1] 2021.04.07 01:12:07.223266 [ 361 ] <Fatal> BaseDaemon: 8. DB::PipelineExecutor::executeImpl(unsigned long) @ 0xffedc06 in /usr/bin/clickhouse\r\n               138ms                      [clickhouse1] [clickhouse1] 2021.04.07 01:12:07.223323 [ 361 ] <Fatal> BaseDaemon: 9. ? @ 0xfffb072 in /usr/bin/clickhouse\r\n               138ms                      [clickhouse1] [clickhouse1] 2021.04.07 01:12:07.223391 [ 361 ] <Fatal> BaseDaemon: 10. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x88d56bf in /usr/bin/clickhouse\r\n               138ms                      [clickhouse1] [clickhouse1] 2021.04.07 01:12:07.223449 [ 361 ] <Fatal> BaseDaemon: 11. ? @ 0x88d9153 in /usr/bin/clickhouse\r\n               138ms                      [clickhouse1] [clickhouse1] 2021.04.07 01:12:07.223545 [ 361 ] <Fatal> BaseDaemon: 12. start_thread @ 0x9609 in /usr/lib/x86_64-linux-gnu/libpthread-2.31.so\r\n               138ms                      [clickhouse1] [clickhouse1] 2021.04.07 01:12:07.223624 [ 361 ] <Fatal> BaseDaemon: 13. __clone @ 0x122293 in /usr/lib/x86_64-linux-gnu/libc-2.31.so\r\n               138ms                      [clickhouse1] [clickhouse1] 2021.04.07 01:12:07.310623 [ 361 ] <Fatal> BaseDaemon: Checksum of the binary: F0772B88209F31A15D3ADA1A43619151, integrity check passed.\r\n```",
  "created_at": "2021-04-08T21:24:56Z"
}