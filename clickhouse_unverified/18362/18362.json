{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 18362,
  "instance_id": "ClickHouse__ClickHouse-18362",
  "issue_numbers": [
    "5604"
  ],
  "base_commit": "4e580f7b7cf119198f052750f90dae82d94d19ab",
  "patch": "diff --git a/src/Storages/MergeTree/MergeTreeData.cpp b/src/Storages/MergeTree/MergeTreeData.cpp\nindex 9fa19859c7ff..888fbcc7bde6 100644\n--- a/src/Storages/MergeTree/MergeTreeData.cpp\n+++ b/src/Storages/MergeTree/MergeTreeData.cpp\n@@ -5,6 +5,7 @@\n #include <DataTypes/DataTypeDateTime.h>\n #include <DataTypes/DataTypeEnum.h>\n #include <DataTypes/DataTypeNullable.h>\n+#include <DataTypes/DataTypeLowCardinality.h>\n #include <DataTypes/NestedUtils.h>\n #include <Formats/FormatFactory.h>\n #include <Functions/FunctionFactory.h>\n@@ -1316,10 +1317,10 @@ void MergeTreeData::dropIfEmpty()\n namespace\n {\n \n-/// Conversion that is allowed for partition key.\n-/// Partition key should be serialized in the same way after conversion.\n+/// Conversion that is allowed for serializable key (primary key, sorting key).\n+/// Key should be serialized in the same way after conversion.\n /// NOTE: The list is not complete.\n-bool isSafeForPartitionKeyConversion(const IDataType * from, const IDataType * to)\n+bool isSafeForKeyConversion(const IDataType * from, const IDataType * to)\n {\n     if (from->getName() == to->getName())\n         return true;\n@@ -1346,6 +1347,12 @@ bool isSafeForPartitionKeyConversion(const IDataType * from, const IDataType * t\n         return false;\n     }\n \n+    if (const auto * from_lc = typeid_cast<const DataTypeLowCardinality *>(from))\n+        return from_lc->getDictionaryType()->equals(*to);\n+\n+    if (const auto * to_lc = typeid_cast<const DataTypeLowCardinality *>(to))\n+        return to_lc->getDictionaryType()->equals(*from);\n+\n     return false;\n }\n \n@@ -1540,7 +1547,7 @@ void MergeTreeData::checkAlterIsPossible(const AlterCommands & commands, const S\n                     auto it = old_types.find(command.column_name);\n \n                     assert(it != old_types.end());\n-                    if (!isSafeForPartitionKeyConversion(it->second, command.data_type.get()))\n+                    if (!isSafeForKeyConversion(it->second, command.data_type.get()))\n                         throw Exception(\"ALTER of partition key column \" + backQuoteIfNeed(command.column_name) + \" from type \"\n                                 + it->second->getName() + \" to type \" + command.data_type->getName()\n                                 + \" is not safe because it can change the representation of partition key\",\n@@ -1554,9 +1561,11 @@ void MergeTreeData::checkAlterIsPossible(const AlterCommands & commands, const S\n                 {\n                     auto it = old_types.find(command.column_name);\n                     assert(it != old_types.end());\n-                    throw Exception(\"ALTER of key column \" + backQuoteIfNeed(command.column_name) + \" from type \"\n-                        + it->second->getName() + \" to type \" + command.data_type->getName() + \" must be metadata-only\",\n-                        ErrorCodes::ALTER_OF_COLUMN_IS_FORBIDDEN);\n+                    if (!isSafeForKeyConversion(it->second, command.data_type.get()))\n+                        throw Exception(\"ALTER of key column \" + backQuoteIfNeed(command.column_name) + \" from type \"\n+                                    + it->second->getName() + \" to type \" + command.data_type->getName()\n+                                    + \" is not safe because it can change the representation of primary key\",\n+                            ErrorCodes::ALTER_OF_COLUMN_IS_FORBIDDEN);\n                 }\n             }\n         }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01611_string_to_low_cardinality_key_alter.reference b/tests/queries/0_stateless/01611_string_to_low_cardinality_key_alter.reference\nnew file mode 100644\nindex 000000000000..07a160752d43\n--- /dev/null\n+++ b/tests/queries/0_stateless/01611_string_to_low_cardinality_key_alter.reference\n@@ -0,0 +1,8 @@\n+CREATE TABLE default.table_with_lc_key\\n(\\n    `enum_key` Enum8(\\'y\\' = 1, \\'x\\' = 2),\\n    `lc_key` String,\\n    `value` String\\n)\\nENGINE = MergeTree\\nORDER BY (enum_key, lc_key)\\nSETTINGS index_granularity = 8192\n+y\thello\tworld\n+CREATE TABLE default.table_with_lc_key\\n(\\n    `enum_key` Enum8(\\'y\\' = 1, \\'x\\' = 2, \\'z\\' = 3),\\n    `lc_key` String,\\n    `value` String\\n)\\nENGINE = MergeTree\\nORDER BY (enum_key, lc_key)\\nSETTINGS index_granularity = 8192\n+y\thello\tworld\n+CREATE TABLE default.table_with_lc_key\\n(\\n    `enum_key` Int8,\\n    `lc_key` String,\\n    `value` String\\n)\\nENGINE = MergeTree\\nORDER BY (enum_key, lc_key)\\nSETTINGS index_granularity = 8192\n+1\thello\tworld\n+CREATE TABLE default.table_with_string_key\\n(\\n    `int_key` Int8,\\n    `str_key` LowCardinality(String),\\n    `value` String\\n)\\nENGINE = MergeTree\\nORDER BY (int_key, str_key)\\nSETTINGS index_granularity = 8192\n+1\thello\tworld\ndiff --git a/tests/queries/0_stateless/01611_string_to_low_cardinality_key_alter.sql b/tests/queries/0_stateless/01611_string_to_low_cardinality_key_alter.sql\nnew file mode 100644\nindex 000000000000..6478d33dfcca\n--- /dev/null\n+++ b/tests/queries/0_stateless/01611_string_to_low_cardinality_key_alter.sql\n@@ -0,0 +1,67 @@\n+DROP TABLE IF EXISTS table_with_lc_key;\n+\n+CREATE TABLE table_with_lc_key\n+(\n+    enum_key Enum8('x' = 2, 'y' = 1),\n+    lc_key LowCardinality(String),\n+    value String\n+)\n+ENGINE MergeTree()\n+ORDER BY (enum_key, lc_key);\n+\n+INSERT INTO table_with_lc_key VALUES(1, 'hello', 'world');\n+\n+ALTER TABLE table_with_lc_key MODIFY COLUMN lc_key String;\n+\n+SHOW CREATE TABLE table_with_lc_key;\n+\n+DETACH TABLE table_with_lc_key;\n+ATTACH TABLE table_with_lc_key;\n+\n+SELECT * FROM table_with_lc_key WHERE enum_key > 0 and lc_key like 'h%';\n+\n+ALTER TABLE table_with_lc_key MODIFY COLUMN enum_key Enum('x' = 2, 'y' = 1, 'z' = 3);\n+ALTER TABLE table_with_lc_key MODIFY COLUMN enum_key Enum16('x' = 2, 'y' = 1, 'z' = 3); --{serverError 524}\n+SHOW CREATE TABLE table_with_lc_key;\n+\n+DETACH TABLE table_with_lc_key;\n+ATTACH TABLE table_with_lc_key;\n+\n+SELECT * FROM table_with_lc_key WHERE enum_key > 0 and lc_key like 'h%';\n+\n+ALTER TABLE table_with_lc_key MODIFY COLUMN enum_key Int8;\n+\n+SHOW CREATE TABLE table_with_lc_key;\n+\n+DETACH TABLE table_with_lc_key;\n+ATTACH TABLE table_with_lc_key;\n+\n+SELECT * FROM table_with_lc_key WHERE enum_key > 0 and lc_key like 'h%';\n+\n+DROP TABLE IF EXISTS table_with_lc_key;\n+\n+\n+DROP TABLE IF EXISTS table_with_string_key;\n+CREATE TABLE table_with_string_key\n+(\n+    int_key Int8,\n+    str_key String,\n+    value String\n+)\n+ENGINE MergeTree()\n+ORDER BY (int_key, str_key);\n+\n+INSERT INTO table_with_string_key VALUES(1, 'hello', 'world');\n+\n+ALTER TABLE table_with_string_key MODIFY COLUMN str_key LowCardinality(String);\n+\n+SHOW CREATE TABLE table_with_string_key;\n+\n+DETACH TABLE table_with_string_key;\n+ATTACH TABLE table_with_string_key;\n+\n+SELECT * FROM table_with_string_key WHERE int_key > 0 and str_key like 'h%';\n+\n+ALTER TABLE table_with_string_key MODIFY COLUMN int_key Enum8('y' = 1, 'x' = 2); --{serverError 524}\n+\n+DROP TABLE IF EXISTS table_with_string_key;\n",
  "problem_statement": "ALTER of key column column_name must be metadata-only\nGiven this table\r\n```sql\r\nCREATE TABLE IF NOT EXISTS table1 (\r\n    column1        DateTime,\r\n    column2        UInt32,\r\n    column3        String,\r\n    packets        AggregateFunction(sum, UInt32)\r\n)\r\nENGINE = AggregatingMergeTree \r\nPARTITION BY toDate(column1) \r\nORDER BY (column1, column2, column3)\r\n```\r\n\r\nAnd when running \r\n```sql\r\nalter table table1 modify column column3 LowCardinality(String);\r\n```\r\nClickHouse gives\r\n> DB::Exception: ALTER of key column column3 must be metadata-only (version 19.6.2.11 (official build))\r\n\r\nWhat does it mean and can it be bypassed?\r\n\n",
  "hints_text": "column3 is included in primary key. You can modify it only if data is not modified during alter. But changing type to LowCardinality causes data modification and this action is not supported.\r\nAs a solution you can create new table with `column3 LowCardinality(String)`  and copy the data to it using the `INSERT SELECT` query.\nUnderstand, thanks. Maybe the message could be more explicit?\n.\n@blinkov only as a feedback, if you wish to improve the error msg or not. Can be closed.\n@CurtizJ Changing the type to LowCardinality indeed causes column rewrite.\r\nBut the `primary.idx` is not modified by this transformation.\r\n\r\nIt means that now we can support it.\nI assign to @alesapin because he has recently done a big rewrite of ALTER mechanics and now this task looks easy to implement.\nAny news about that ?\r\n\r\nRalph",
  "created_at": "2020-12-22T10:44:30Z"
}