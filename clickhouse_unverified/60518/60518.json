{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 60518,
  "instance_id": "ClickHouse__ClickHouse-60518",
  "issue_numbers": [
    "60495"
  ],
  "base_commit": "0f6a1b451be1f941aa546e1e19e24186d3a1a885",
  "patch": "diff --git a/src/Functions/array/FunctionArrayMapped.h b/src/Functions/array/FunctionArrayMapped.h\nindex 49ed9d495e27..20b04787c552 100644\n--- a/src/Functions/array/FunctionArrayMapped.h\n+++ b/src/Functions/array/FunctionArrayMapped.h\n@@ -335,11 +335,11 @@ class FunctionArrayMapped : public IFunction\n                         && column_array->getOffsets() != typeid_cast<const ColumnArray::ColumnOffsets &>(*offsets_column).getData())\n                         throw Exception(\n                             ErrorCodes::SIZES_OF_ARRAYS_DONT_MATCH,\n-                            \"Arrays passed to {} must have equal size. Argument {} has size {}, but expected {}\",\n+                            \"Arrays passed to {} must have equal size. Argument {} has size {} which differs with the size of another argument, {}\",\n                             getName(),\n-                            i,\n-                            column_array->getOffsets().size(),\n-                            typeid_cast<const ColumnArray::ColumnOffsets &>(*offsets_column).getData().size());\n+                            i + 1,\n+                            column_array->getOffsets().back(),  /// By the way, PODArray supports addressing -1th element.\n+                            typeid_cast<const ColumnArray::ColumnOffsets &>(*offsets_column).getData().back());\n                 }\n \n                 const auto * column_tuple = checkAndGetColumn<ColumnTuple>(&column_array->getData());\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03001_bad_error_message_higher_order_functions.reference b/tests/queries/0_stateless/03001_bad_error_message_higher_order_functions.reference\nnew file mode 100644\nindex 000000000000..d4e027274e22\n--- /dev/null\n+++ b/tests/queries/0_stateless/03001_bad_error_message_higher_order_functions.reference\n@@ -0,0 +1,1 @@\n+Argument 3 has size 2 which differs with the size of another argument, 3\ndiff --git a/tests/queries/0_stateless/03001_bad_error_message_higher_order_functions.sh b/tests/queries/0_stateless/03001_bad_error_message_higher_order_functions.sh\nnew file mode 100755\nindex 000000000000..967453fd375d\n--- /dev/null\n+++ b/tests/queries/0_stateless/03001_bad_error_message_higher_order_functions.sh\n@@ -0,0 +1,7 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+${CLICKHOUSE_CLIENT} --query \"SELECT arrayMap((x,y) -> x + y, [1,2,3], [1,2])\" 2>&1 | grep -o -F --max-count 1 'Argument 3 has size 2 which differs with the size of another argument, 3'\n\\ No newline at end of file\n",
  "problem_statement": "Misleading error message of SIZES_OF_ARRAYS_DONT_MATCH\nHello! In recent Clickhouse versions this error is misleading (especially on large queries):\r\n\r\n```sql\r\nSELECT arrayMap((x,y) -> x + y, [1,2,3], [1,2])\r\n```\r\n\r\n> Received exception from server (version 24.2.1):\r\nCode: 190. DB::Exception: Received from localhost:9000. DB::Exception: Arrays passed to arrayMap must have equal size. Argument 2 has size 1, but expected 1: while executing 'FUNCTION arrayMap(__lambda :: 2, [1, 2, 3] :: 0, [1, 2] :: 1) -> arrayMap(lambda(tuple(x, y), plus(x, y)), [1, 2, 3], [1, 2]) Array(UInt16) : 3'. (SIZES_OF_ARRAYS_DONT_MATCH)\r\n(query: SELECT arrayMap((x,y) -> x + y, [1,2,3], [1,2])\r\n\r\nThis part of the message is definitely wrong: `Argument 2 has size 1, but expected 1`.\r\n\n",
  "hints_text": "",
  "created_at": "2024-02-28T22:09:09Z",
  "modified_files": [
    "src/Functions/array/FunctionArrayMapped.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03001_bad_error_message_higher_order_functions.reference",
    "b/tests/queries/0_stateless/03001_bad_error_message_higher_order_functions.sh"
  ]
}