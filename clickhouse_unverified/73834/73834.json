{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 73834,
  "instance_id": "ClickHouse__ClickHouse-73834",
  "issue_numbers": [
    "70800"
  ],
  "base_commit": "ea7845585807298cf7304aaed2336402167490b6",
  "patch": "diff --git a/src/IO/Progress.cpp b/src/IO/Progress.cpp\nindex c5bcd0c490aa..8b22abe73fb7 100644\n--- a/src/IO/Progress.cpp\n+++ b/src/IO/Progress.cpp\n@@ -74,24 +74,30 @@ void ProgressValues::writeJSON(WriteBuffer & out) const\n     /// Numbers are written in double quotes (as strings) to avoid loss of precision\n     ///  of 64-bit integers after interpretation by JavaScript.\n \n+    bool has_value = false;\n+\n+    auto write = [&](const char * name, UInt64 value)\n+    {\n+        if (!value)\n+            return;\n+        if (has_value)\n+            writeChar(',', out);\n+        writeCString(name, out);\n+        writeCString(\":\\\"\", out);\n+        writeIntText(value, out);\n+        writeChar('\"', out);\n+        has_value = true;\n+    };\n+\n     writeCString(\"{\", out);\n-    writeCString(\"\\\"read_rows\\\":\\\"\", out);\n-    writeText(read_rows, out);\n-    writeCString(\"\\\",\\\"read_bytes\\\":\\\"\", out);\n-    writeText(read_bytes, out);\n-    writeCString(\"\\\",\\\"written_rows\\\":\\\"\", out);\n-    writeText(written_rows, out);\n-    writeCString(\"\\\",\\\"written_bytes\\\":\\\"\", out);\n-    writeText(written_bytes, out);\n-    writeCString(\"\\\",\\\"total_rows_to_read\\\":\\\"\", out);\n-    writeText(total_rows_to_read, out);\n-    writeCString(\"\\\",\\\"result_rows\\\":\\\"\", out);\n-    writeText(result_rows, out);\n-    writeCString(\"\\\",\\\"result_bytes\\\":\\\"\", out);\n-    writeText(result_bytes, out);\n-    writeCString(\"\\\",\\\"elapsed_ns\\\":\\\"\", out);\n-    writeText(elapsed_ns, out);\n-    writeCString(\"\\\"\", out);\n+    write(\"\\\"read_rows\\\"\", read_rows);\n+    write(\"\\\"read_bytes\\\"\", read_bytes);\n+    write(\"\\\"written_rows\\\"\", written_rows);\n+    write(\"\\\"written_bytes\\\"\", written_bytes);\n+    write(\"\\\"total_rows_to_read\\\"\", total_rows_to_read);\n+    write(\"\\\"result_rows\\\"\", result_rows);\n+    write(\"\\\"result_bytes\\\"\", result_bytes);\n+    write(\"\\\"elapsed_ns\\\"\", elapsed_ns);\n     writeCString(\"}\", out);\n }\n \ndiff --git a/src/Processors/Formats/IOutputFormat.cpp b/src/Processors/Formats/IOutputFormat.cpp\nindex 9b99ecb2d7c7..389f3592e76d 100644\n--- a/src/Processors/Formats/IOutputFormat.cpp\n+++ b/src/Processors/Formats/IOutputFormat.cpp\n@@ -65,6 +65,14 @@ static Chunk prepareTotals(Chunk chunk)\n \n void IOutputFormat::work()\n {\n+    std::lock_guard lock(writing_mutex);\n+\n+    if (has_progress_update_to_write)\n+    {\n+        writeProgress(statistics.progress);\n+        has_progress_update_to_write = false;\n+    }\n+\n     writePrefixIfNeeded();\n \n     if (finished && !finalized)\n@@ -73,9 +81,9 @@ void IOutputFormat::work()\n             setRowsBeforeLimit(rows_before_limit_counter->get());\n         if (rows_before_aggregation_counter && rows_before_aggregation_counter->hasAppliedStep())\n             setRowsBeforeAggregation(rows_before_aggregation_counter->get());\n-        finalize();\n+        finalizeUnlocked();\n         if (auto_flush)\n-            flush();\n+            flushImpl();\n         return;\n     }\n \n@@ -101,30 +109,43 @@ void IOutputFormat::work()\n     }\n \n     if (auto_flush)\n-        flush();\n+        flushImpl();\n \n     has_input = false;\n }\n \n-void IOutputFormat::flush()\n+void IOutputFormat::flushImpl()\n {\n     out.next();\n }\n \n+void IOutputFormat::flush()\n+{\n+    std::lock_guard lock(writing_mutex);\n+    flushImpl();\n+}\n+\n void IOutputFormat::write(const Block & block)\n {\n+    std::lock_guard lock(writing_mutex);\n+\n+    if (has_progress_update_to_write)\n+    {\n+        writeProgress(statistics.progress);\n+        has_progress_update_to_write = false;\n+    }\n+\n     writePrefixIfNeeded();\n     consume(Chunk(block.getColumns(), block.rows()));\n \n     if (auto_flush)\n-        flush();\n+        flushImpl();\n }\n \n-void IOutputFormat::finalize()\n+void IOutputFormat::finalizeUnlocked()\n {\n     if (finalized)\n         return;\n-\n     writePrefixIfNeeded();\n     writeSuffixIfNeeded();\n     finalizeImpl();\n@@ -132,4 +153,26 @@ void IOutputFormat::finalize()\n     finalized = true;\n }\n \n+void IOutputFormat::finalize()\n+{\n+    std::lock_guard lock(writing_mutex);\n+    finalizeUnlocked();\n+}\n+\n+void IOutputFormat::onProgress(const Progress & progress)\n+{\n+    statistics.progress.incrementPiecewiseAtomically(progress);\n+    if (writesProgressConcurrently())\n+    {\n+        std::unique_lock lock(writing_mutex, std::try_to_lock);\n+        if (lock)\n+        {\n+            writeProgress(statistics.progress);\n+            has_progress_update_to_write = false;\n+        }\n+        else\n+            has_progress_update_to_write = true;\n+    }\n+}\n+\n }\ndiff --git a/src/Processors/Formats/IOutputFormat.h b/src/Processors/Formats/IOutputFormat.h\nindex e9af4ca7cf5c..300267caf47c 100644\n--- a/src/Processors/Formats/IOutputFormat.h\n+++ b/src/Processors/Formats/IOutputFormat.h\n@@ -30,9 +30,7 @@ class IOutputFormat : public IProcessor\n     Status prepare() override;\n     void work() override;\n \n-    /// Flush output buffers if any.\n-    virtual void flush();\n-\n+    void flush();\n     void setAutoFlush() { auto_flush = true; }\n \n     /// Value for rows_before_limit_at_least field.\n@@ -48,8 +46,8 @@ class IOutputFormat : public IProcessor\n     void setRowsBeforeAggregationCounter(RowsBeforeStepCounterPtr counter) override { rows_before_aggregation_counter.swap(counter); }\n \n     /// Notify about progress. Method could be called from different threads.\n-    /// Passed value are delta, that must be summarized.\n-    virtual void onProgress(const Progress & /*progress*/) { }\n+    /// Passed values are deltas, that must be summarized.\n+    virtual void onProgress(const Progress & progress);\n \n     /// Content-Type to set when sending HTTP response.\n     virtual std::string getContentType() const { return \"text/plain; charset=UTF-8\"; }\n@@ -114,7 +112,6 @@ class IOutputFormat : public IProcessor\n protected:\n     friend class ParallelFormattingOutputFormat;\n \n-\n     void writeSuffixIfNeeded()\n     {\n         if (need_write_suffix)\n@@ -124,6 +121,10 @@ class IOutputFormat : public IProcessor\n         }\n     }\n \n+    void finalizeUnlocked();\n+\n+    virtual void flushImpl();\n+\n     virtual void consume(Chunk) = 0;\n     virtual void consumeTotals(Chunk) {}\n     virtual void consumeExtremes(Chunk) {}\n@@ -133,6 +134,16 @@ class IOutputFormat : public IProcessor\n     virtual void writeSuffix() {}\n     virtual void resetFormatterImpl() {}\n \n+    /// If the method writeProgress is non-empty.\n+    virtual bool writesProgressConcurrently() const\n+    {\n+        return false;\n+    }\n+\n+    /// This method could be called from another thread,\n+    /// but will be serialized with other writing methods using the writing_mutex.\n+    virtual void writeProgress(const Progress &) {}\n+\n     /// Methods-helpers for parallel formatting.\n \n     /// Set the number of rows that was already read in\n@@ -194,7 +205,9 @@ class IOutputFormat : public IProcessor\n \n     RowsBeforeStepCounterPtr rows_before_limit_counter;\n     RowsBeforeStepCounterPtr rows_before_aggregation_counter;\n+\n     Statistics statistics;\n+    std::atomic_bool has_progress_update_to_write = false;\n \n private:\n     size_t rows_read_before = 0;\n@@ -203,5 +216,9 @@ class IOutputFormat : public IProcessor\n     /// Counters for consumed chunks. Are used for QueryLog.\n     size_t result_rows = 0;\n     size_t result_bytes = 0;\n+\n+    /// To serialize the calls to writeProgress (which could be called from another thread) and other writing methods.\n+    std::mutex writing_mutex;\n };\n+\n }\ndiff --git a/src/Processors/Formats/Impl/AvroRowOutputFormat.cpp b/src/Processors/Formats/Impl/AvroRowOutputFormat.cpp\nindex e505d545f17d..4601cde69c8f 100644\n--- a/src/Processors/Formats/Impl/AvroRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/AvroRowOutputFormat.cpp\n@@ -86,7 +86,7 @@ class OutputStreamWriteBufferAdapter : public avro::OutputStream\n     void backup(size_t len) override { out.position() -= len; }\n \n     uint64_t byteCount() const override { return out.count(); }\n-    void flush() override { }\n+    void flush() override {}\n \n private:\n     WriteBuffer & out;\ndiff --git a/src/Processors/Formats/Impl/JSONColumnsWithMetadataBlockOutputFormat.h b/src/Processors/Formats/Impl/JSONColumnsWithMetadataBlockOutputFormat.h\nindex e52084404837..37c0f3b9e531 100644\n--- a/src/Processors/Formats/Impl/JSONColumnsWithMetadataBlockOutputFormat.h\n+++ b/src/Processors/Formats/Impl/JSONColumnsWithMetadataBlockOutputFormat.h\n@@ -49,7 +49,6 @@ class JSONColumnsWithMetadataBlockOutputFormat : public JSONColumnsBlockOutputFo\n         statistics.rows_before_aggregation = rows_before_aggregation_;\n         statistics.applied_aggregation = true;\n     }\n-    void onProgress(const Progress & progress_) override { statistics.progress.incrementPiecewiseAtomically(progress_); }\n \n protected:\n     void consumeTotals(Chunk chunk) override;\ndiff --git a/src/Processors/Formats/Impl/JSONEachRowWithProgressRowOutputFormat.cpp b/src/Processors/Formats/Impl/JSONEachRowWithProgressRowOutputFormat.cpp\nindex c7942e93e675..838ac81bc4af 100644\n--- a/src/Processors/Formats/Impl/JSONEachRowWithProgressRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/JSONEachRowWithProgressRowOutputFormat.cpp\n@@ -3,14 +3,12 @@\n #include <Processors/Formats/Impl/JSONEachRowWithProgressRowOutputFormat.h>\n #include <Formats/FormatFactory.h>\n \n+\n namespace DB\n {\n \n-\n void JSONEachRowWithProgressRowOutputFormat::writeRowStartDelimiter()\n {\n-    if (has_progress)\n-        writeProgress();\n     writeCString(\"{\\\"row\\\":{\", *ostr);\n }\n \n@@ -20,43 +18,12 @@ void JSONEachRowWithProgressRowOutputFormat::writeRowEndDelimiter()\n     field_number = 0;\n }\n \n-void JSONEachRowWithProgressRowOutputFormat::onProgress(const Progress & value)\n-{\n-    progress.incrementPiecewiseAtomically(value);\n-    String progress_line;\n-    {\n-        WriteBufferFromString buf(progress_line);\n-        writeCString(\"{\\\"progress\\\":\", buf);\n-        progress.writeJSON(buf);\n-        writeCString(\"}\\n\", buf);\n-    }\n-\n-    std::lock_guard lock(progress_lines_mutex);\n-    progress_lines.emplace_back(std::move(progress_line));\n-    has_progress = true;\n-}\n-\n-void JSONEachRowWithProgressRowOutputFormat::flush()\n-{\n-    if (has_progress)\n-        writeProgress();\n-    JSONEachRowRowOutputFormat::flush();\n-}\n-\n-void JSONEachRowWithProgressRowOutputFormat::writeSuffix()\n-{\n-    if (has_progress)\n-        writeProgress();\n-    JSONEachRowRowOutputFormat::writeSuffix();\n-}\n-\n-void JSONEachRowWithProgressRowOutputFormat::writeProgress()\n+void JSONEachRowWithProgressRowOutputFormat::writeProgress(const Progress & value)\n {\n-    std::lock_guard lock(progress_lines_mutex);\n-    for (const auto & progress_line : progress_lines)\n-        writeString(progress_line,  *ostr);\n-    progress_lines.clear();\n-    has_progress = false;\n+    writeCString(\"{\\\"progress\\\":\", *ostr);\n+    value.writeJSON(*ostr);\n+    writeCString(\"}\\n\", *ostr);\n+    ostr->next();\n }\n \n void registerOutputFormatJSONEachRowWithProgress(FormatFactory & factory)\ndiff --git a/src/Processors/Formats/Impl/JSONEachRowWithProgressRowOutputFormat.h b/src/Processors/Formats/Impl/JSONEachRowWithProgressRowOutputFormat.h\nindex 6bdf27a472e2..f34e82eb90cb 100644\n--- a/src/Processors/Formats/Impl/JSONEachRowWithProgressRowOutputFormat.h\n+++ b/src/Processors/Formats/Impl/JSONEachRowWithProgressRowOutputFormat.h\n@@ -1,4 +1,5 @@\n #pragma once\n+\n #include <Processors/Formats/Impl/JSONEachRowRowOutputFormat.h>\n #include <mutex>\n \n@@ -10,22 +11,12 @@ class JSONEachRowWithProgressRowOutputFormat final : public JSONEachRowRowOutput\n public:\n     using JSONEachRowRowOutputFormat::JSONEachRowRowOutputFormat;\n \n-    void onProgress(const Progress & value) override;\n-    void flush() override;\n+    bool writesProgressConcurrently() const override { return true; }\n+    void writeProgress(const Progress & value) override;\n \n private:\n     void writeRowStartDelimiter() override;\n     void writeRowEndDelimiter() override;\n-    void writeSuffix() override;\n-\n-    void writeProgress();\n-\n-    Progress progress;\n-    std::vector<String> progress_lines;\n-    std::mutex progress_lines_mutex;\n-    /// To not lock mutex and check progress_lines every row,\n-    /// we will use atomic flag that progress_lines is not empty.\n-    std::atomic_bool has_progress = false;\n };\n \n }\ndiff --git a/src/Processors/Formats/Impl/JSONRowOutputFormat.cpp b/src/Processors/Formats/Impl/JSONRowOutputFormat.cpp\nindex fec24b10c11e..c2473804d0d8 100644\n--- a/src/Processors/Formats/Impl/JSONRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/JSONRowOutputFormat.cpp\n@@ -142,13 +142,6 @@ void JSONRowOutputFormat::resetFormatterImpl()\n     statistics = Statistics();\n }\n \n-\n-void JSONRowOutputFormat::onProgress(const Progress & value)\n-{\n-    statistics.progress.incrementPiecewiseAtomically(value);\n-}\n-\n-\n void registerOutputFormatJSON(FormatFactory & factory)\n {\n     factory.registerOutputFormat(\"JSON\", [](\ndiff --git a/src/Processors/Formats/Impl/JSONRowOutputFormat.h b/src/Processors/Formats/Impl/JSONRowOutputFormat.h\nindex c36adb5ee3ef..b42416d0c66e 100644\n--- a/src/Processors/Formats/Impl/JSONRowOutputFormat.h\n+++ b/src/Processors/Formats/Impl/JSONRowOutputFormat.h\n@@ -26,8 +26,6 @@ class JSONRowOutputFormat : public RowOutputFormatWithExceptionHandlerAdaptor<Ro\n \n     String getName() const override { return \"JSONRowOutputFormat\"; }\n \n-    void onProgress(const Progress & value) override;\n-\n     String getContentType() const override { return \"application/json; charset=UTF-8\"; }\n \n     void setRowsBeforeLimit(size_t rows_before_limit_) override\ndiff --git a/src/Processors/Formats/Impl/MySQLOutputFormat.cpp b/src/Processors/Formats/Impl/MySQLOutputFormat.cpp\nindex 08a6d19a7825..8433de02d3d2 100644\n--- a/src/Processors/Formats/Impl/MySQLOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/MySQLOutputFormat.cpp\n@@ -83,7 +83,7 @@ void MySQLOutputFormat::consume(Chunk chunk)\n         }\n     }\n \n-    flush();\n+    flushImpl();\n }\n \n void MySQLOutputFormat::finalizeImpl()\n@@ -131,7 +131,7 @@ void MySQLOutputFormat::finalizeImpl()\n     }\n }\n \n-void MySQLOutputFormat::flush()\n+void MySQLOutputFormat::flushImpl()\n {\n     packet_endpoint->out->next();\n }\ndiff --git a/src/Processors/Formats/Impl/MySQLOutputFormat.h b/src/Processors/Formats/Impl/MySQLOutputFormat.h\nindex dfaa52878c33..62a94f3154d7 100644\n--- a/src/Processors/Formats/Impl/MySQLOutputFormat.h\n+++ b/src/Processors/Formats/Impl/MySQLOutputFormat.h\n@@ -25,7 +25,7 @@ class MySQLOutputFormat final : public IOutputFormat, WithContext\n \n     void setContext(ContextPtr context_);\n \n-    void flush() override;\n+    void flushImpl() override;\n \n private:\n     void consume(Chunk) override;\ndiff --git a/src/Processors/Formats/Impl/ParallelFormattingOutputFormat.cpp b/src/Processors/Formats/Impl/ParallelFormattingOutputFormat.cpp\nindex 86ebc522fa6e..ebeec2f34eae 100644\n--- a/src/Processors/Formats/Impl/ParallelFormattingOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/ParallelFormattingOutputFormat.cpp\n@@ -3,6 +3,7 @@\n #include <Common/setThreadName.h>\n #include <Common/scope_guard_safe.h>\n \n+\n namespace DB\n {\n     void ParallelFormattingOutputFormat::finalizeImpl()\n@@ -161,7 +162,7 @@ namespace DB\n                 out.write(unit.segment.data(), unit.actual_memory_size);\n \n                 if (need_flush.exchange(false) || auto_flush)\n-                    IOutputFormat::flush();\n+                    out.next();\n \n                 ++collector_unit_number;\n                 rows_collected += unit.rows_num;\n@@ -263,7 +264,7 @@ namespace DB\n                 }\n             }\n \n-            /// Flush all the data to handmade buffer.\n+            /// Flush all the data to the handmade buffer.\n             formatter->flush();\n             formatter->finalizeBuffers();\n             out_buffer.finalize();\ndiff --git a/src/Processors/Formats/Impl/ParallelFormattingOutputFormat.h b/src/Processors/Formats/Impl/ParallelFormattingOutputFormat.h\nindex 2b97d3467b93..ef6ad5da47b4 100644\n--- a/src/Processors/Formats/Impl/ParallelFormattingOutputFormat.h\n+++ b/src/Processors/Formats/Impl/ParallelFormattingOutputFormat.h\n@@ -17,6 +17,7 @@\n #include <deque>\n #include <atomic>\n \n+\n namespace CurrentMetrics\n {\n     extern const Metric ParallelFormattingOutputFormatThreads;\n@@ -114,7 +115,7 @@ class ParallelFormattingOutputFormat : public IOutputFormat\n \n     String getName() const override { return \"ParallelFormattingOutputFormat\"; }\n \n-    void flush() override\n+    void flushImpl() override\n     {\n         need_flush = true;\n     }\n@@ -130,12 +131,6 @@ class ParallelFormattingOutputFormat : public IOutputFormat\n         finishAndWait();\n     }\n \n-    void onProgress(const Progress & value) override\n-    {\n-        std::lock_guard lock(statistics_mutex);\n-        statistics.progress.incrementPiecewiseAtomically(value);\n-    }\n-\n     void writeSuffix() override\n     {\n         addChunk(Chunk{}, ProcessingUnitType::PLAIN_FINISH, /*can_throw_exception*/ true);\ndiff --git a/src/Processors/Formats/Impl/PostgreSQLOutputFormat.cpp b/src/Processors/Formats/Impl/PostgreSQLOutputFormat.cpp\nindex 4ac874b883d1..70dbf77320f5 100644\n--- a/src/Processors/Formats/Impl/PostgreSQLOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/PostgreSQLOutputFormat.cpp\n@@ -56,7 +56,7 @@ void PostgreSQLOutputFormat::consume(Chunk chunk)\n     }\n }\n \n-void PostgreSQLOutputFormat::flush()\n+void PostgreSQLOutputFormat::flushImpl()\n {\n     message_transport.flush();\n }\ndiff --git a/src/Processors/Formats/Impl/PostgreSQLOutputFormat.h b/src/Processors/Formats/Impl/PostgreSQLOutputFormat.h\nindex f5fd55530b99..a0c9998e14a0 100644\n--- a/src/Processors/Formats/Impl/PostgreSQLOutputFormat.h\n+++ b/src/Processors/Formats/Impl/PostgreSQLOutputFormat.h\n@@ -17,7 +17,7 @@ class PostgreSQLOutputFormat final : public IOutputFormat\n \n     String getName() const override {return \"PostgreSQLOutputFormat\";}\n \n-    void flush() override;\n+    void flushImpl() override;\n \n private:\n     void writePrefix() override;\ndiff --git a/src/Processors/Formats/Impl/TemplateBlockOutputFormat.h b/src/Processors/Formats/Impl/TemplateBlockOutputFormat.h\nindex 5e88d79b4a8e..1f2353102bd1 100644\n--- a/src/Processors/Formats/Impl/TemplateBlockOutputFormat.h\n+++ b/src/Processors/Formats/Impl/TemplateBlockOutputFormat.h\n@@ -26,7 +26,6 @@ class TemplateBlockOutputFormat : public IOutputFormat\n         statistics.rows_before_aggregation = rows_before_aggregation_;\n         statistics.applied_aggregation = true;\n     }\n-    void onProgress(const Progress & progress_) override { statistics.progress.incrementPiecewiseAtomically(progress_); }\n \n     enum class ResultsetPart : size_t\n     {\ndiff --git a/src/Processors/Formats/Impl/XMLRowOutputFormat.cpp b/src/Processors/Formats/Impl/XMLRowOutputFormat.cpp\nindex b19fcfd4a4a5..ce5080b10893 100644\n--- a/src/Processors/Formats/Impl/XMLRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/XMLRowOutputFormat.cpp\n@@ -178,11 +178,6 @@ void XMLRowOutputFormat::writeExtremesElement(const char * title, const Columns\n }\n \n \n-void XMLRowOutputFormat::onProgress(const Progress & value)\n-{\n-    statistics.progress.incrementPiecewiseAtomically(value);\n-}\n-\n void XMLRowOutputFormat::finalizeImpl()\n {\n     writeCString(\"\\t<rows>\", *ostr);\ndiff --git a/src/Processors/Formats/Impl/XMLRowOutputFormat.h b/src/Processors/Formats/Impl/XMLRowOutputFormat.h\nindex 792acd118c81..059773f60fa9 100644\n--- a/src/Processors/Formats/Impl/XMLRowOutputFormat.h\n+++ b/src/Processors/Formats/Impl/XMLRowOutputFormat.h\n@@ -55,8 +55,6 @@ class XMLRowOutputFormat final : public RowOutputFormatWithExceptionHandlerAdapt\n     }\n     void onRowsReadBeforeUpdate() override { row_count = getRowsReadBefore(); }\n \n-    void onProgress(const Progress & value) override;\n-\n     String getContentType() const override { return \"application/xml; charset=UTF-8\"; }\n \n     void writeExtremesElement(const char * title, const Columns & columns, size_t row_num);\ndiff --git a/src/Processors/Formats/OutputFormatWithUTF8ValidationAdaptor.h b/src/Processors/Formats/OutputFormatWithUTF8ValidationAdaptor.h\nindex 6c931d7793e4..b4f2bc8eb325 100644\n--- a/src/Processors/Formats/OutputFormatWithUTF8ValidationAdaptor.h\n+++ b/src/Processors/Formats/OutputFormatWithUTF8ValidationAdaptor.h\n@@ -29,11 +29,11 @@ class OutputFormatWithUTF8ValidationAdaptorBase : public Base\n             validating_ostr = std::make_unique<WriteBufferValidUTF8>(*Base::getWriteBufferPtr());\n     }\n \n-    void flush() override\n+    void flushImpl() override\n     {\n         if (validating_ostr)\n             validating_ostr->next();\n-        Base::flush();\n+        Base::flushImpl();\n     }\n \n     void finalizeBuffers() override\n@@ -68,4 +68,3 @@ using OutputFormatWithUTF8ValidationAdaptor = OutputFormatWithUTF8ValidationAdap\n using RowOutputFormatWithUTF8ValidationAdaptor = OutputFormatWithUTF8ValidationAdaptorBase<IRowOutputFormat>;\n \n }\n-\ndiff --git a/src/Processors/Formats/RowOutputFormatWithExceptionHandlerAdaptor.h b/src/Processors/Formats/RowOutputFormatWithExceptionHandlerAdaptor.h\nindex 048bf18d4f97..e64738b60a03 100644\n--- a/src/Processors/Formats/RowOutputFormatWithExceptionHandlerAdaptor.h\n+++ b/src/Processors/Formats/RowOutputFormatWithExceptionHandlerAdaptor.h\n@@ -60,12 +60,12 @@ class RowOutputFormatWithExceptionHandlerAdaptor : public Base\n     void write(const Columns & columns, size_t row_num) override { Base::write(columns, row_num); }\n     void writeRowBetweenDelimiter() override { Base::writeRowBetweenDelimiter(); }\n \n-    void flush() override\n+    void flushImpl() override\n     {\n         if (peekable_out)\n             peekable_out->next();\n \n-        Base::flush();\n+        Base::flushImpl();\n     }\n \n     void finalizeBuffers() override\ndiff --git a/src/TableFunctions/TableFunctionMerge.cpp b/src/TableFunctions/TableFunctionMerge.cpp\nindex 13b5c167e0e4..cca0c2990f63 100644\n--- a/src/TableFunctions/TableFunctionMerge.cpp\n+++ b/src/TableFunctions/TableFunctionMerge.cpp\n@@ -31,7 +31,7 @@ namespace\n     throw Exception(\n         ErrorCodes::BAD_ARGUMENTS,\n         \"Error while executing table function merge. Either there is no database, which matches regular expression `{}`, or there are \"\n-        \"no tables in database matches `{}`, which fit tables expression: {}\",\n+        \"no tables in the database matches `{}`, which fit tables expression: {}\",\n         source_database_regexp,\n         source_database_regexp,\n         source_table_regexp);\n",
  "test_patch": "diff --git a/tests/integration/test_table_functions_access_rights/test.py b/tests/integration/test_table_functions_access_rights/test.py\nindex 7bc02ab902e8..a4c8017af631 100644\n--- a/tests/integration/test_table_functions_access_rights/test.py\n+++ b/tests/integration/test_table_functions_access_rights/test.py\n@@ -46,7 +46,7 @@ def test_merge():\n     )\n \n     instance.query(\"GRANT CREATE TEMPORARY TABLE ON *.* TO A\")\n-    assert \"no tables in database matches\" in instance.query_and_get_error(\n+    assert \"no tables in the database matches\" in instance.query_and_get_error(\n         select_query, user=\"A\"\n     )\n \ndiff --git a/tests/queries/0_stateless/00416_pocopatch_progress_in_http_headers.reference b/tests/queries/0_stateless/00416_pocopatch_progress_in_http_headers.reference\nindex 462f2f63fe1d..d2fec3e14e75 100644\n--- a/tests/queries/0_stateless/00416_pocopatch_progress_in_http_headers.reference\n+++ b/tests/queries/0_stateless/00416_pocopatch_progress_in_http_headers.reference\n@@ -1,9 +1,9 @@\n-< X-ClickHouse-Progress: {\"read_rows\":\"0\",\"read_bytes\":\"0\",\"written_rows\":\"0\",\"written_bytes\":\"0\",\"total_rows_to_read\":\"10\",\"result_rows\":\"0\",\"result_bytes\":\"0\"}\r\n-< X-ClickHouse-Progress: {\"read_rows\":\"5\",\"read_bytes\":\"40\",\"written_rows\":\"0\",\"written_bytes\":\"0\",\"total_rows_to_read\":\"10\",\"result_rows\":\"0\",\"result_bytes\":\"0\"}\r\n-< X-ClickHouse-Progress: {\"read_rows\":\"10\",\"read_bytes\":\"80\",\"written_rows\":\"0\",\"written_bytes\":\"0\",\"total_rows_to_read\":\"10\",\"result_rows\":\"0\",\"result_bytes\":\"0\"}\r\n+< X-ClickHouse-Progress: {\"total_rows_to_read\":\"10\"}\r\n+< X-ClickHouse-Progress: {\"read_rows\":\"5\",\"read_bytes\":\"40\",\"total_rows_to_read\":\"10\"}\r\n+< X-ClickHouse-Progress: {\"read_rows\":\"10\",\"read_bytes\":\"80\",\"total_rows_to_read\":\"10\"}\r\n 9\n-< X-ClickHouse-Progress: {\"read_rows\":\"0\",\"read_bytes\":\"0\",\"written_rows\":\"0\",\"written_bytes\":\"0\",\"total_rows_to_read\":\"10\",\"result_rows\":\"0\",\"result_bytes\":\"0\"}\r\n-< X-ClickHouse-Progress: {\"read_rows\":\"1\",\"read_bytes\":\"8\",\"written_rows\":\"0\",\"written_bytes\":\"0\",\"total_rows_to_read\":\"10\",\"result_rows\":\"0\",\"result_bytes\":\"0\"}\r\n+< X-ClickHouse-Progress: {\"total_rows_to_read\":\"10\"}\r\n+< X-ClickHouse-Progress: {\"read_rows\":\"1\",\"read_bytes\":\"8\",\"total_rows_to_read\":\"10\"}\r\n 0\n 1\n 2\ndiff --git a/tests/queries/0_stateless/02136_scalar_progress.reference b/tests/queries/0_stateless/02136_scalar_progress.reference\nindex b8957f78e6df..bda8b6df979d 100644\n--- a/tests/queries/0_stateless/02136_scalar_progress.reference\n+++ b/tests/queries/0_stateless/02136_scalar_progress.reference\n@@ -1,7 +1,7 @@\n-< X-ClickHouse-Progress: {\"read_rows\":\"0\",\"read_bytes\":\"0\",\"written_rows\":\"0\",\"written_bytes\":\"0\",\"total_rows_to_read\":\"100000\",\"result_rows\":\"0\",\"result_bytes\":\"0\"}\r\n-< X-ClickHouse-Progress: {\"read_rows\":\"65505\",\"read_bytes\":\"524040\",\"written_rows\":\"0\",\"written_bytes\":\"0\",\"total_rows_to_read\":\"100000\",\"result_rows\":\"0\",\"result_bytes\":\"0\"}\r\n-< X-ClickHouse-Progress: {\"read_rows\":\"100000\",\"read_bytes\":\"800000\",\"written_rows\":\"0\",\"written_bytes\":\"0\",\"total_rows_to_read\":\"100000\",\"result_rows\":\"0\",\"result_bytes\":\"0\"}\r\n-< X-ClickHouse-Progress: {\"read_rows\":\"100000\",\"read_bytes\":\"800000\",\"written_rows\":\"0\",\"written_bytes\":\"0\",\"total_rows_to_read\":\"100001\",\"result_rows\":\"0\",\"result_bytes\":\"0\"}\r\n-< X-ClickHouse-Progress: {\"read_rows\":\"100001\",\"read_bytes\":\"800001\",\"written_rows\":\"0\",\"written_bytes\":\"0\",\"total_rows_to_read\":\"100001\",\"result_rows\":\"0\",\"result_bytes\":\"0\"}\r\n-< X-ClickHouse-Progress: {\"read_rows\":\"100001\",\"read_bytes\":\"800001\",\"written_rows\":\"0\",\"written_bytes\":\"0\",\"total_rows_to_read\":\"100001\",\"result_rows\":\"1\",\"result_bytes\":\"272\"}\r\n-< X-ClickHouse-Summary: {\"read_rows\":\"100001\",\"read_bytes\":\"800001\",\"written_rows\":\"0\",\"written_bytes\":\"0\",\"total_rows_to_read\":\"100001\",\"result_rows\":\"1\",\"result_bytes\":\"272\"}\r\n+< X-ClickHouse-Progress: {\"total_rows_to_read\":\"100000\"}\r\n+< X-ClickHouse-Progress: {\"read_rows\":\"65505\",\"read_bytes\":\"524040\",\"total_rows_to_read\":\"100000\"}\r\n+< X-ClickHouse-Progress: {\"read_rows\":\"100000\",\"read_bytes\":\"800000\",\"total_rows_to_read\":\"100000\"}\r\n+< X-ClickHouse-Progress: {\"read_rows\":\"100000\",\"read_bytes\":\"800000\",\"total_rows_to_read\":\"100001\"}\r\n+< X-ClickHouse-Progress: {\"read_rows\":\"100001\",\"read_bytes\":\"800001\",\"total_rows_to_read\":\"100001\"}\r\n+< X-ClickHouse-Progress: {\"read_rows\":\"100001\",\"read_bytes\":\"800001\",\"total_rows_to_read\":\"100001\",\"result_rows\":\"1\",\"result_bytes\":\"272\"}\r\n+< X-ClickHouse-Summary: {\"read_rows\":\"100001\",\"read_bytes\":\"800001\",\"total_rows_to_read\":\"100001\",\"result_rows\":\"1\",\"result_bytes\":\"272\"}\r\ndiff --git a/tests/queries/0_stateless/02373_progress_contain_result.reference b/tests/queries/0_stateless/02373_progress_contain_result.reference\nindex a125646e7b83..3fbe190ff00e 100644\n--- a/tests/queries/0_stateless/02373_progress_contain_result.reference\n+++ b/tests/queries/0_stateless/02373_progress_contain_result.reference\n@@ -1,1 +1,1 @@\n-< X-ClickHouse-Summary: {\"read_rows\":\"100\",\"read_bytes\":\"800\",\"written_rows\":\"0\",\"written_bytes\":\"0\",\"total_rows_to_read\":\"100\",\"result_rows\":\"100\",\"result_bytes\":\"227\"}\r\n+< X-ClickHouse-Summary: {\"read_rows\":\"100\",\"read_bytes\":\"800\",\"total_rows_to_read\":\"100\",\"result_rows\":\"100\",\"result_bytes\":\"227\"}\r\ndiff --git a/tests/queries/0_stateless/02423_insert_summary_behaviour.reference b/tests/queries/0_stateless/02423_insert_summary_behaviour.reference\nindex 8e7efaac109e..9323aaa15589 100644\n--- a/tests/queries/0_stateless/02423_insert_summary_behaviour.reference\n+++ b/tests/queries/0_stateless/02423_insert_summary_behaviour.reference\n@@ -1,7 +1,7 @@\n No materialized views\n-< X-ClickHouse-Summary: {\"read_rows\":\"1\",\"read_bytes\":\"8\",\"written_rows\":\"1\",\"written_bytes\":\"8\",\"total_rows_to_read\":\"0\",\"result_rows\":\"1\",\"result_bytes\":\"8\"}\r\n-< X-ClickHouse-Summary: {\"read_rows\":\"10\",\"read_bytes\":\"80\",\"written_rows\":\"10\",\"written_bytes\":\"80\",\"total_rows_to_read\":\"0\",\"result_rows\":\"10\",\"result_bytes\":\"80\"}\r\n-< X-ClickHouse-Summary: {\"read_rows\":\"10\",\"read_bytes\":\"80\",\"written_rows\":\"10\",\"written_bytes\":\"80\",\"total_rows_to_read\":\"0\",\"result_rows\":\"10\",\"result_bytes\":\"80\"}\r\n+< X-ClickHouse-Summary: {\"read_rows\":\"1\",\"read_bytes\":\"8\",\"written_rows\":\"1\",\"written_bytes\":\"8\",\"result_rows\":\"1\",\"result_bytes\":\"8\"}\r\n+< X-ClickHouse-Summary: {\"read_rows\":\"10\",\"read_bytes\":\"80\",\"written_rows\":\"10\",\"written_bytes\":\"80\",\"result_rows\":\"10\",\"result_bytes\":\"80\"}\r\n+< X-ClickHouse-Summary: {\"read_rows\":\"10\",\"read_bytes\":\"80\",\"written_rows\":\"10\",\"written_bytes\":\"80\",\"result_rows\":\"10\",\"result_bytes\":\"80\"}\r\n With materialized views\n < X-ClickHouse-Summary: {\"read_rows\":\"5\",\"read_bytes\":\"40\",\"written_rows\":\"4\",\"written_bytes\":\"32\",\"total_rows_to_read\":\"2\",\"result_rows\":\"4\",\"result_bytes\":\"32\"}\r\n < X-ClickHouse-Summary: {\"read_rows\":\"32\",\"read_bytes\":\"256\",\"written_rows\":\"40\",\"written_bytes\":\"320\",\"total_rows_to_read\":\"2\",\"result_rows\":\"40\",\"result_bytes\":\"320\"}\r\ndiff --git a/tests/queries/0_stateless/02457_insert_select_progress_http.reference b/tests/queries/0_stateless/02457_insert_select_progress_http.reference\nindex 5f13f4b92851..7e8dc666b015 100644\n--- a/tests/queries/0_stateless/02457_insert_select_progress_http.reference\n+++ b/tests/queries/0_stateless/02457_insert_select_progress_http.reference\n@@ -1,13 +1,13 @@\n-< X-ClickHouse-Progress: {\"read_rows\":\"0\",\"read_bytes\":\"0\",\"written_rows\":\"0\",\"written_bytes\":\"0\",\"total_rows_to_read\":\"5\",\"result_rows\":\"0\",\"result_bytes\":\"0\"}\r\n-< X-ClickHouse-Progress: {\"read_rows\":\"1\",\"read_bytes\":\"8\",\"written_rows\":\"0\",\"written_bytes\":\"0\",\"total_rows_to_read\":\"5\",\"result_rows\":\"0\",\"result_bytes\":\"0\"}\r\n-< X-ClickHouse-Progress: {\"read_rows\":\"1\",\"read_bytes\":\"8\",\"written_rows\":\"1\",\"written_bytes\":\"4\",\"total_rows_to_read\":\"5\",\"result_rows\":\"0\",\"result_bytes\":\"0\"}\r\n-< X-ClickHouse-Progress: {\"read_rows\":\"2\",\"read_bytes\":\"16\",\"written_rows\":\"1\",\"written_bytes\":\"4\",\"total_rows_to_read\":\"5\",\"result_rows\":\"0\",\"result_bytes\":\"0\"}\r\n-< X-ClickHouse-Progress: {\"read_rows\":\"2\",\"read_bytes\":\"16\",\"written_rows\":\"2\",\"written_bytes\":\"8\",\"total_rows_to_read\":\"5\",\"result_rows\":\"0\",\"result_bytes\":\"0\"}\r\n-< X-ClickHouse-Progress: {\"read_rows\":\"3\",\"read_bytes\":\"24\",\"written_rows\":\"2\",\"written_bytes\":\"8\",\"total_rows_to_read\":\"5\",\"result_rows\":\"0\",\"result_bytes\":\"0\"}\r\n-< X-ClickHouse-Progress: {\"read_rows\":\"3\",\"read_bytes\":\"24\",\"written_rows\":\"3\",\"written_bytes\":\"12\",\"total_rows_to_read\":\"5\",\"result_rows\":\"0\",\"result_bytes\":\"0\"}\r\n-< X-ClickHouse-Progress: {\"read_rows\":\"4\",\"read_bytes\":\"32\",\"written_rows\":\"3\",\"written_bytes\":\"12\",\"total_rows_to_read\":\"5\",\"result_rows\":\"0\",\"result_bytes\":\"0\"}\r\n-< X-ClickHouse-Progress: {\"read_rows\":\"4\",\"read_bytes\":\"32\",\"written_rows\":\"4\",\"written_bytes\":\"16\",\"total_rows_to_read\":\"5\",\"result_rows\":\"0\",\"result_bytes\":\"0\"}\r\n-< X-ClickHouse-Progress: {\"read_rows\":\"5\",\"read_bytes\":\"40\",\"written_rows\":\"4\",\"written_bytes\":\"16\",\"total_rows_to_read\":\"5\",\"result_rows\":\"0\",\"result_bytes\":\"0\"}\r\n-< X-ClickHouse-Progress: {\"read_rows\":\"5\",\"read_bytes\":\"40\",\"written_rows\":\"5\",\"written_bytes\":\"20\",\"total_rows_to_read\":\"5\",\"result_rows\":\"0\",\"result_bytes\":\"0\"}\r\n+< X-ClickHouse-Progress: {\"total_rows_to_read\":\"5\"}\r\n+< X-ClickHouse-Progress: {\"read_rows\":\"1\",\"read_bytes\":\"8\",\"total_rows_to_read\":\"5\"}\r\n+< X-ClickHouse-Progress: {\"read_rows\":\"1\",\"read_bytes\":\"8\",\"written_rows\":\"1\",\"written_bytes\":\"4\",\"total_rows_to_read\":\"5\"}\r\n+< X-ClickHouse-Progress: {\"read_rows\":\"2\",\"read_bytes\":\"16\",\"written_rows\":\"1\",\"written_bytes\":\"4\",\"total_rows_to_read\":\"5\"}\r\n+< X-ClickHouse-Progress: {\"read_rows\":\"2\",\"read_bytes\":\"16\",\"written_rows\":\"2\",\"written_bytes\":\"8\",\"total_rows_to_read\":\"5\"}\r\n+< X-ClickHouse-Progress: {\"read_rows\":\"3\",\"read_bytes\":\"24\",\"written_rows\":\"2\",\"written_bytes\":\"8\",\"total_rows_to_read\":\"5\"}\r\n+< X-ClickHouse-Progress: {\"read_rows\":\"3\",\"read_bytes\":\"24\",\"written_rows\":\"3\",\"written_bytes\":\"12\",\"total_rows_to_read\":\"5\"}\r\n+< X-ClickHouse-Progress: {\"read_rows\":\"4\",\"read_bytes\":\"32\",\"written_rows\":\"3\",\"written_bytes\":\"12\",\"total_rows_to_read\":\"5\"}\r\n+< X-ClickHouse-Progress: {\"read_rows\":\"4\",\"read_bytes\":\"32\",\"written_rows\":\"4\",\"written_bytes\":\"16\",\"total_rows_to_read\":\"5\"}\r\n+< X-ClickHouse-Progress: {\"read_rows\":\"5\",\"read_bytes\":\"40\",\"written_rows\":\"4\",\"written_bytes\":\"16\",\"total_rows_to_read\":\"5\"}\r\n+< X-ClickHouse-Progress: {\"read_rows\":\"5\",\"read_bytes\":\"40\",\"written_rows\":\"5\",\"written_bytes\":\"20\",\"total_rows_to_read\":\"5\"}\r\n < X-ClickHouse-Progress: {\"read_rows\":\"5\",\"read_bytes\":\"40\",\"written_rows\":\"5\",\"written_bytes\":\"20\",\"total_rows_to_read\":\"5\",\"result_rows\":\"5\",\"result_bytes\":\"20\"}\r\n < X-ClickHouse-Summary: {\"read_rows\":\"5\",\"read_bytes\":\"40\",\"written_rows\":\"5\",\"written_bytes\":\"20\",\"total_rows_to_read\":\"5\",\"result_rows\":\"5\",\"result_bytes\":\"20\"}\r\ndiff --git a/tests/queries/0_stateless/03272_json_with_progress.reference b/tests/queries/0_stateless/03272_json_with_progress.reference\nnew file mode 100644\nindex 000000000000..3556a832e429\n--- /dev/null\n+++ b/tests/queries/0_stateless/03272_json_with_progress.reference\n@@ -0,0 +1,10 @@\n+{\"progress\":{}}\n+{\"progress\":{\"read_rows\":\"100000\",\"read_bytes\":\"800000\"}}\n+{\"row\":{\"number\":\"1\"}}\n+{\"progress\":{\"read_rows\":\"200000\",\"read_bytes\":\"1600000\"}}\n+{\"progress\":{\"read_rows\":\"300000\",\"read_bytes\":\"2400000\"}}\n+{\"progress\":{\"read_rows\":\"400000\",\"read_bytes\":\"3200000\"}}\n+{\"progress\":{\"read_rows\":\"500000\",\"read_bytes\":\"4000000\"}}\n+{\"progress\":{\"read_rows\":\"600000\",\"read_bytes\":\"4800000\"}}\n+{\"progress\":{\"read_rows\":\"700000\",\"read_bytes\":\"5600000\"}}\n+{\"progress\":{\"read_rows\":\"800000\",\"read_bytes\":\"6400000\"}}\ndiff --git a/tests/queries/0_stateless/03272_json_with_progress.sh b/tests/queries/0_stateless/03272_json_with_progress.sh\nnew file mode 100755\nindex 000000000000..ab002cf05a25\n--- /dev/null\n+++ b/tests/queries/0_stateless/03272_json_with_progress.sh\n@@ -0,0 +1,7 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+$CLICKHOUSE_CURL -sS \"$CLICKHOUSE_URL\" -d \"SELECT number FROM system.numbers WHERE number % 1234567890 = 1 SETTINGS max_block_size = 100000, max_rows_to_read = 0, max_bytes_to_read = 0 FORMAT JSONEachRowWithProgress\" 2>/dev/null | head -n10\n",
  "problem_statement": "Flush query progress even when there are no new result blocks\nContext: https://github.com/ClickHouse/ClickHouse/pull/66205 uncovered incorrect behavior around query progress data flushing.  Currently, progress flush only occurs when there are new result blocks to return.  For this output format (and for the other `*WithProgress` formats as well), progress should be flushed periodically even in the absence of new result blocks.\r\n\r\n@alexey-milovidov - is there an open issue for the underlying problem with flushing progress?  Should I open one?\r\n\r\n_Originally posted by @ArctypeZach in https://github.com/ClickHouse/ClickHouse/issues/69989#issuecomment-2412149553_\r\n            \n",
  "hints_text": "@alexey-milovidov -\r\n\r\nSeems like #71951 didn't pan out?",
  "created_at": "2024-12-25T15:03:22Z"
}