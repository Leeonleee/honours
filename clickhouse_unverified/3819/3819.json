{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 3819,
  "instance_id": "ClickHouse__ClickHouse-3819",
  "issue_numbers": [
    "3220"
  ],
  "base_commit": "282b303a1cf17f5380f34557de40d25d2d161d15",
  "patch": "diff --git a/libs/libcommon/include/common/DateLUTImpl.h b/libs/libcommon/include/common/DateLUTImpl.h\nindex f506e7a82f68..56d9cc04dd1c 100644\n--- a/libs/libcommon/include/common/DateLUTImpl.h\n+++ b/libs/libcommon/include/common/DateLUTImpl.h\n@@ -24,6 +24,7 @@ class DateLUTImpl\n     DateLUTImpl(const std::string & time_zone);\n \n public:\n+    /// The order of fields matters for alignment and sizeof.\n     struct Values\n     {\n         /// Least significat 32 bits from time_t at beginning of the day.\n@@ -42,10 +43,12 @@ class DateLUTImpl\n         UInt8 days_in_month;\n \n         /// For days, when offset from UTC was changed due to daylight saving time or permanent change, following values could be non zero.\n-        UInt16 time_at_offset_change; /// In seconds from beginning of the day. Assuming offset never changed close to the end of day (so, value < 65536).\n         Int16 amount_of_offset_change; /// Usually -3600 or 3600, but look at Lord Howe Island.\n+        UInt32 time_at_offset_change; /// In seconds from beginning of the day.\n     };\n \n+    static_assert(sizeof(Values) == 16);\n+\n private:\n     /// Lookup table is indexed by DayNum.\n     /// Day nums are the same in all time zones. 1970-01-01 is 0 and so on.\n@@ -247,8 +250,7 @@ class DateLUTImpl\n \n         time_t res = t - lut[index].date;\n \n-        /// NOTE We doesn't support cases when time change result in switching to previous day.\n-        /// Data is cleaned to avoid these cases, so no underflow occurs here.\n+        /// Data is cleaned to avoid possibility of underflow.\n         if (res >= lut[index].time_at_offset_change)\n             res += lut[index].amount_of_offset_change;\n \ndiff --git a/libs/libcommon/src/DateLUTImpl.cpp b/libs/libcommon/src/DateLUTImpl.cpp\nindex 95e5454f90de..76afcd548c20 100644\n--- a/libs/libcommon/src/DateLUTImpl.cpp\n+++ b/libs/libcommon/src/DateLUTImpl.cpp\n@@ -101,7 +101,7 @@ DateLUTImpl::DateLUTImpl(const std::string & time_zone_)\n                 ///  when UTC offset was changed. Search is performed with 15-minute granularity, assuming it is enough.\n \n                 time_t time_at_offset_change = 900;\n-                while (time_at_offset_change < 65536)\n+                while (time_at_offset_change < 86400)\n                 {\n                     auto utc_offset_at_current_time = cctz_time_zone.lookup(std::chrono::system_clock::from_time_t(\n                         lut[i - 1].date + time_at_offset_change)).offset;\n@@ -112,17 +112,9 @@ DateLUTImpl::DateLUTImpl(const std::string & time_zone_)\n                     time_at_offset_change += 900;\n                 }\n \n-                lut[i - 1].time_at_offset_change = time_at_offset_change >= 65536 ? 0 : time_at_offset_change;\n+                lut[i - 1].time_at_offset_change = time_at_offset_change;\n \n-/*                std::cerr << lut[i - 1].year << \"-\" << int(lut[i - 1].month) << \"-\" << int(lut[i - 1].day_of_month)\n-                    << \" offset was changed at \" << lut[i - 1].time_at_offset_change << \" for \" << lut[i - 1].amount_of_offset_change << \" seconds.\\n\";*/\n-\n-                /** We doesn't support cases when time change results in switching to previous day.\n-                  * As an example, it was a case in Moscow at years 1981..1983 on October 1:\n-                  *  clock was adjusted one hour backwards exactly at midnight (that was lead to extra hour 23 of Sep 30th).\n-                  * We must clean data (and we will make it slightly incorrect) to avoid these cases.\n-                  * (In previous example, it will lead to extra hour 0 of Sep 30 instead.)\n-                  */\n+                /// We doesn't support cases when time change results in switching to previous day.\n                 if (static_cast<int>(lut[i - 1].time_at_offset_change) + static_cast<int>(lut[i - 1].amount_of_offset_change) < 0)\n                     lut[i - 1].time_at_offset_change = -lut[i - 1].amount_of_offset_change;\n             }\n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/00802_daylight_saving_time_shift_backwards_at_midnight.reference b/dbms/tests/queries/0_stateless/00802_daylight_saving_time_shift_backwards_at_midnight.reference\nnew file mode 100644\nindex 000000000000..f72940bb386e\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/00802_daylight_saving_time_shift_backwards_at_midnight.reference\n@@ -0,0 +1,24 @@\n+1981-09-30 23:00:00\n+1981-09-30 23:05:00\n+1981-09-30 23:10:00\n+1981-09-30 23:15:00\n+1981-09-30 23:20:00\n+1981-09-30 23:25:00\n+1981-09-30 23:30:00\n+1981-09-30 23:35:00\n+1981-09-30 23:40:00\n+1981-09-30 23:45:00\n+1981-09-30 23:50:00\n+1981-09-30 23:55:00\n+2018-09-21 23:00:00\n+2018-09-21 23:05:00\n+2018-09-21 23:10:00\n+2018-09-21 23:15:00\n+2018-09-21 23:20:00\n+2018-09-21 23:25:00\n+2018-09-21 23:30:00\n+2018-09-21 23:35:00\n+2018-09-21 23:40:00\n+2018-09-21 23:45:00\n+2018-09-21 23:50:00\n+2018-09-21 23:55:00\ndiff --git a/dbms/tests/queries/0_stateless/00802_daylight_saving_time_shift_backwards_at_midnight.sql b/dbms/tests/queries/0_stateless/00802_daylight_saving_time_shift_backwards_at_midnight.sql\nnew file mode 100644\nindex 000000000000..4244ce2039bf\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/00802_daylight_saving_time_shift_backwards_at_midnight.sql\n@@ -0,0 +1,3 @@\n+-- concat with empty string to defeat injectiveness of toString assumption.\n+SELECT concat('', toString(toDateTime('1981-09-29 00:00:00', 'Europe/Moscow') + INTERVAL number * 300 SECOND)) AS k FROM numbers(10000) GROUP BY k HAVING count() > 1 ORDER BY k;\n+SELECT concat('', toString(toDateTime('2018-09-19 00:00:00', 'Asia/Tehran') + INTERVAL number * 300 SECOND)) AS k FROM numbers(1000) GROUP BY k HAVING count() > 1 ORDER BY k;\n",
  "problem_statement": "Daylight savings time changed on wrong day\nWe are running several clickhouse instances on servers with system timezone IRST/IRDT. \r\n\r\nThe switch from  from IRDT (daylight savings time) to IRST (no daylight savings) happens in the night from 2018/09/21 to 2018/09/22, and our servers switched system time correctly.\r\n\r\nClickhouse, however, switched in the night from 2018/09/20 to 2018/09/21, which is one day too early.\r\n\n",
  "hints_text": "",
  "created_at": "2018-12-12T13:31:03Z"
}