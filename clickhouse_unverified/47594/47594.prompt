You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Type mismatch in IN or VALUES section. Expected: Decimal(76, 0). Got: Decimal256
```
clickhouse-client --query='create table decimal_insert_cast_issue ( a Decimal(76, 0)) engine = TinyLog'

clickhouse-client --query='INSERT INTO decimal_insert_cast_issue VALUES ({param:Nullable(Decimal(41, 0))})' --param_param=1
Code: 53. DB::Exception: Type mismatch in IN or VALUES section. Expected: Decimal(76, 0). Got: Decimal256: While processing _CAST('1', 'Nullable(Decimal(41, 0))'): While executing ValuesBlockInputFormat: data for INSERT was parsed from query. (TYPE_MISMATCH)
```
Decimal256 lacking support
Decimal256 fields are poorly supported as of now.
For example, 

```sql
with [1,2]::Array(Decimal(40, 10)) as data
select arraySum(data)
```

Fails with 
```
Received exception from server (version 23.2.4):
Code: 44. DB::Exception: Received from localhost:9000. DB::Exception: Unexpected column for arraySum: Decimal256: While processing arraySum(CAST('[1,2]', 'Array(Decimal(40, 10))') AS data). (ILLEGAL_COLUMN)
(query: with [1,2]::Array(Decimal(40, 10)) as data
select arraySum(data))
```

See [fiddle](https://fiddle.clickhouse.com/a05c7e6c-f314-4e93-bd67-34a3522116ac)

However, it should return 3.
If using Decimals with less precision, it works just fine.

```sql
with [1,2]::Array(Decimal(30, 10)) as data
select arraySum(data)
```
Inconsistent Nullable decimal128 and decimal256 behaviour
When using Nullable Decimal256 data type, it's not considered a number (in many applications).

**How to reproduce**

```sql
select coalesce(cast('123', 'Nullable(Decimal(20, 10))'), 0)
```
This works as expected and returns 123

```sql
select coalesce(cast('123', 'Nullable(Decimal(40, 10))'), 0)
```
This is expected to also return 123, but actually raises
```
DB::Exception: There is no supertype for types UInt8, Decimal256 because some of them 
are numbers and some of them are not: 
While processing coalesce(CAST('123', 'Nullable(Decimal(40, 10))'), 0). (NO_COMMON_TYPE) 
(version 22.11.1.1360 (official build))
```
Stack trace below.

Interestingly, with non-nullable Decimal256, this isn't an issue:

```sql
select coalesce(cast('123', 'Decimal(40, 10)'), 0)
```
This works just fine and returns 123 as expected

Clickhouse version:
22.11.1.1360

Stack trace:

```bash
0. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, int, bool) @ 0xda0553a in /usr/bin/clickhouse
1. ? @ 0xc7dcba1 in /usr/bin/clickhouse
2. ? @ 0x126c1c59 in /usr/bin/clickhouse
3. ? @ 0x126c09cc in /usr/bin/clickhouse
4. std::__1::shared_ptr<DB::IDataType const> DB::getLeastSupertype<(DB::LeastSupertypeOnError)0>(std::__1::vector<std::__1::shared_ptr<DB::IDataType const>, std::__1::allocator<std::__1::shared_ptr<DB::IDataType const>>> const&) @ 0x126bf94c in /usr/bin/clickhouse
5. ? @ 0xa4c511f in /usr/bin/clickhouse
6. ? @ 0x7daa89f in /usr/bin/clickhouse
1. ? @ 0xc7dcba1 in /usr/bin/clickhouse
2. ? @ 0x126c1c59 in /usr/bin/clickhouse
3. ? @ 0x126c09cc in /usr/bin/clickhouse
4. std::__1::shared_ptr<DB::IDataType const> DB::getLeastSupertype<(DB::LeastSupertypeOnError)0>(std::__1::vector<std::__1::shared_ptr<DB::IDataType const>, std::__1::allocator<std::__1::shared_ptr<DB::IDataType const>>> const&) @ 0x126bf94c in /usr/bin/clickhouse
5. ? @ 0xa4c511f in /usr/bin/clickhouse
6. ? @ 0x7daa89f in /usr/bin/clickhouse
7. DB::IFunctionOverloadResolver::getReturnTypeWithoutLowCardinality(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x1216bbd3 in /usr/bin/clickhouse
8. DB::IFunctionOverloadResolver::getReturnType(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x1216b81e in /usr/bin/clickhouse
9. DB::IFunctionOverloadResolver::build(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&) const @ 0x1216c4f6 in /usr/bin/clickhouse
10. DB::ActionsDAG::addFunction(std::__1::shared_ptr<DB::IFunctionOverloadResolver> const&, std::__1::vector<DB::ActionsDAG::Node const*, std::__1::allocator<DB::ActionsDAG::Node const*>>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>) @ 0x12862af3 in /usr/bin/clickhouse
11. DB::ScopeStack::addFunction(std::__1::shared_ptr<DB::IFunctionOverloadResolver> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>) @ 0x12d41d3d in /usr/bin/clickhouse
12. ? @ 0x12d4ca0f in /usr/bin/clickhouse
13. DB::ActionsMatcher::visit(DB::ASTFunction const&, std::__1::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x12d4780d in /usr/bin/clickhouse
14. DB::ActionsMatcher::visit(DB::ASTExpressionList&, std::__1::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x12d4ad98 in /usr/bin/clickhouse
15. ? @ 0x12d277f5 in /usr/bin/clickhouse
16. DB::ExpressionAnalyzer::getRootActions(std::__1::shared_ptr<DB::IAST> const&, bool, std::__1::shared_ptr<DB::ActionsDAG>&, bool) @ 0x12d088c3 in /usr/bin/clickhouse
17. DB::SelectQueryExpressionAnalyzer::appendSelect(DB::ExpressionActionsChain&, bool) @ 0x12d17e65 in /usr/bin/clickhouse
18. DB::ExpressionAnalysisResult::ExpressionAnalysisResult(DB::SelectQueryExpressionAnalyzer&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, bool, bool, bool, std::__1::shared_ptr<DB::FilterDAGInfo> const&, std::__1::shared_ptr<DB::FilterDAGInfo> const&, DB::Block const&) @ 0x12d1ca2c in /usr/bin/clickhouse
19. DB::InterpreterSelectQuery::getSampleBlockImpl() @ 0x132f9ba8 in /usr/bin/clickhouse
20. ? @ 0x132f23f5 in /usr/bin/clickhouse
21. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::__1::shared_ptr<DB::PreparedSets>) @ 0x132ed209 in /usr/bin/clickhouse
22. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::__1::shared_ptr<DB::IAST> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&) @ 0x13388a62 in /usr/bin/clickhouse
23. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&) @ 0x13386202 in /usr/bin/clickhouse
24. DB::InterpreterFactory::get(std::__1::shared_ptr<DB::IAST>&, std::__1::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x132ac85e in /usr/bin/clickhouse
25. ? @ 0x13686060 in /usr/bin/clickhouse
26. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::__1::shared_ptr<DB::Context>, std::__1::function<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&)>, std::__1::optional<DB::FormatSettings> const&) @ 0x1368ae6b in /usr/bin/clickhouse
27. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::__1::optional<DB::CurrentThread::QueryScope>&) @ 0x142a1af6 in /usr/bin/clickhouse
28. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&) @ 0x142a5c2e in /usr/bin/clickhouse
29. DB::HTTPServerConnection::run() @ 0x14321bb4 in /usr/bin/clickhouse
30. Poco::Net::TCPServerConnection::start() @ 0x1714df54 in /usr/bin/clickhouse
31. Poco::Net::TCPServerDispatcher::run() @ 0x1714f8fb in /usr/bin/clickhouse
 (version 22.11.1.1360 (official build))
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
