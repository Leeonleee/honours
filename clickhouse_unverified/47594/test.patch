diff --git a/tests/integration/test_mysql_database_engine/test.py b/tests/integration/test_mysql_database_engine/test.py
index fde8c341e6f8..52a7b319551f 100644
--- a/tests/integration/test_mysql_database_engine/test.py
+++ b/tests/integration/test_mysql_database_engine/test.py
@@ -396,7 +396,7 @@ def arryToString(expected_clickhouse_values):
 
 #  if expected_clickhouse_values is "", compare MySQL and ClickHouse query results directly
 @pytest.mark.parametrize(
-    "case_name, mysql_type, expected_ch_type, mysql_values, expected_clickhouse_values , setting_mysql_datatypes_support_level",
+    "case_name, mysql_type, expected_ch_type, mysql_values, expected_clickhouse_values, setting_mysql_datatypes_support_level",
     [
         pytest.param(
             "common_types",
@@ -725,11 +725,10 @@ def arryToString(expected_clickhouse_values):
             "decimal,datetime64",
             id="datetime_6_1",
         ),
-        # right now precision bigger than 39 is not supported by ClickHouse's Decimal, hence fall back to String
         pytest.param(
             "decimal_40_6",
             "decimal(40, 6) NOT NULL",
-            "String",
+            "Decimal(40, 6)",
             decimal_values,
             "",
             "decimal,datetime64",
diff --git a/tests/queries/0_stateless/00700_decimal_aggregates.reference b/tests/queries/0_stateless/00700_decimal_aggregates.reference
index 159091d867ed..acf41546f5c4 100644
--- a/tests/queries/0_stateless/00700_decimal_aggregates.reference
+++ b/tests/queries/0_stateless/00700_decimal_aggregates.reference
@@ -67,9 +67,9 @@
 [-50,-40,-30,-20,-10,0,10,20,30,40,50]
 [-16.66666666,-13.33333333,-10,-6.66666666,-3.33333333,0,3.33333333,6.66666666,10,13.33333333,16.66666666]
 [-10,-8,-6,-4,-2,0,2,4,6,8,10]
-850	94.44444438684269	34	Float64	Float64	Float64
+850	94.4444443868427	34.00000000000001	Float64	Float64	Float64
 850	94.4444443868427	34.00000000000001
-858.5	95.38888883071111	34.34	Float64	Float64	Float64
+858.5	95.38888883071112	34.34	Float64	Float64	Float64
 858.5	95.38888883071112	34.34
 29.154759474226502	9.718253155111915	5.830951894845301	Float64	Float64	Float64
 29.154759474226502	9.718253155111915	5.830951894845301
diff --git a/tests/queries/0_stateless/00700_decimal_empty_aggregates.reference b/tests/queries/0_stateless/00700_decimal_empty_aggregates.reference
index 2c29b72f50c8..20098e638d58 100644
--- a/tests/queries/0_stateless/00700_decimal_empty_aggregates.reference
+++ b/tests/queries/0_stateless/00700_decimal_empty_aggregates.reference
@@ -45,11 +45,11 @@
 [0,0,0,0,0,0,0,0,0,0,0]
 [0,0,0,0,0,0,0,0,0,0,0]
 [0,0,0,0,0,0,0,0,0,0,0]
-inf	inf	inf	Float64	Float64	Float64
+nan	nan	nan	Float64	Float64	Float64
 nan	nan	nan
 nan	nan	nan	Float64	Float64	Float64
 nan	nan	nan
-inf	inf	inf	Float64	Float64	Float64
+nan	nan	nan	Float64	Float64	Float64
 nan	nan	nan
 nan	nan	nan	Float64	Float64	Float64
 nan	nan	nan
diff --git a/tests/queries/0_stateless/00862_decimal_in.reference b/tests/queries/0_stateless/00862_decimal_in.reference
index 0cd93f69c38b..f60b8081af4a 100644
--- a/tests/queries/0_stateless/00862_decimal_in.reference
+++ b/tests/queries/0_stateless/00862_decimal_in.reference
@@ -16,3 +16,9 @@
 64	64
 64	64
 64	64
+256	256
+256	256
+256	256
+256	256
+256	256
+256	256
diff --git a/tests/queries/0_stateless/00862_decimal_in.sql b/tests/queries/0_stateless/00862_decimal_in.sql
index b5c058119a2d..3aa7bb18cb4f 100644
--- a/tests/queries/0_stateless/00862_decimal_in.sql
+++ b/tests/queries/0_stateless/00862_decimal_in.sql
@@ -5,7 +5,7 @@ CREATE TABLE temp
     y Nullable(Decimal(38, 2))
 ) ENGINE = Memory;
 
-INSERT INTO temp VALUES (32, 32), (64, 64), (128, 128);
+INSERT INTO temp VALUES (32, 32), (64, 64), (128, 128), (256, 256);
 
 SELECT * FROM temp WHERE x IN (toDecimal128(128, 1));
 SELECT * FROM temp WHERE x IN (toDecimal128(128, 2));
@@ -28,7 +28,11 @@ SELECT * FROM temp WHERE y IN (toDecimal64(64, 1));
 SELECT * FROM temp WHERE y IN (toDecimal64(64, 2));
 SELECT * FROM temp WHERE y IN (toDecimal64(64, 3));
 
-SELECT * FROM temp WHERE x IN (toDecimal256(256, 1)); -- { serverError 53 }
-SELECT * FROM temp WHERE y IN (toDecimal256(256, 1)); -- { serverError 53 }
+SELECT * FROM temp WHERE x IN (toDecimal256(256, 1));
+SELECT * FROM temp WHERE x IN (toDecimal256(256, 2));
+SELECT * FROM temp WHERE x IN (toDecimal256(256, 3));
+SELECT * FROM temp WHERE y IN (toDecimal256(256, 1));
+SELECT * FROM temp WHERE y IN (toDecimal256(256, 2));
+SELECT * FROM temp WHERE y IN (toDecimal256(256, 3));
 
 DROP TABLE IF EXISTS temp;
diff --git a/tests/queries/0_stateless/01018_empty_aggregation_filling.reference b/tests/queries/0_stateless/01018_empty_aggregation_filling.reference
index c29807a7e15d..975b48c57f9e 100644
--- a/tests/queries/0_stateless/01018_empty_aggregation_filling.reference
+++ b/tests/queries/0_stateless/01018_empty_aggregation_filling.reference
@@ -54,7 +54,7 @@ hello
 2011-04-05 14:19:19
 -123.45
 -123.45
-inf
-inf
+nan
+nan
 -123.45
 -123.45
diff --git a/tests/queries/0_stateless/02421_decimal_in_precision_issue_41125.reference b/tests/queries/0_stateless/02421_decimal_in_precision_issue_41125.reference
index d3d171221e87..71c9a23879ff 100644
--- a/tests/queries/0_stateless/02421_decimal_in_precision_issue_41125.reference
+++ b/tests/queries/0_stateless/02421_decimal_in_precision_issue_41125.reference
@@ -8,3 +8,6 @@
 1
 1
 1
+1
+1
+1
diff --git a/tests/queries/0_stateless/02421_decimal_in_precision_issue_41125.sql b/tests/queries/0_stateless/02421_decimal_in_precision_issue_41125.sql
index f5978a340618..f5d182be3e3c 100644
--- a/tests/queries/0_stateless/02421_decimal_in_precision_issue_41125.sql
+++ b/tests/queries/0_stateless/02421_decimal_in_precision_issue_41125.sql
@@ -8,16 +8,16 @@ INSERT INTO dtest VALUES ('33', '44.4', '35');
 SELECT count() == 0 FROM dtest WHERE a IN toDecimal32('33.3000', 4);
 SELECT count() == 0 FROM dtest WHERE a IN toDecimal64('33.3000', 4);
 SELECT count() == 0 FROM dtest WHERE a IN toDecimal128('33.3000', 4);
-SELECT count() == 0 FROM dtest WHERE a IN toDecimal256('33.3000', 4); -- { serverError 53 }
+SELECT count() == 0 FROM dtest WHERE a IN toDecimal256('33.3000', 4);
 
 SELECT count() == 0 FROM dtest WHERE b IN toDecimal32('44.4000', 0);
 SELECT count() == 0 FROM dtest WHERE b IN toDecimal64('44.4000', 0);
 SELECT count() == 0 FROM dtest WHERE b IN toDecimal128('44.4000', 0);
-SELECT count() == 0 FROM dtest WHERE b IN toDecimal256('44.4000', 0); -- { serverError 53 }
+SELECT count() == 0 FROM dtest WHERE b IN toDecimal256('44.4000', 0);
 
 SELECT count() == 1 FROM dtest WHERE b IN toDecimal32('44.4000', 4);
 SELECT count() == 1 FROM dtest WHERE b IN toDecimal64('44.4000', 4);
 SELECT count() == 1 FROM dtest WHERE b IN toDecimal128('44.4000', 4);
-SELECT count() == 1 FROM dtest WHERE b IN toDecimal256('44.4000', 4); -- { serverError 53 }
+SELECT count() == 1 FROM dtest WHERE b IN toDecimal256('44.4000', 4);
 
 DROP TABLE IF EXISTS dtest;
diff --git a/tests/queries/0_stateless/02685_decimal256_various.reference b/tests/queries/0_stateless/02685_decimal256_various.reference
new file mode 100644
index 000000000000..848c5e0b163e
--- /dev/null
+++ b/tests/queries/0_stateless/02685_decimal256_various.reference
@@ -0,0 +1,97 @@
+-- { echoOn }
+
+SELECT 1.1::Decimal(60, 30);
+1.1
+SELECT round(1.1::Decimal(60, 30));
+1
+SELECT round(1.1::Decimal(60, 30), 1);
+1.1
+SELECT round(1.234567890123456789012345678901::Decimal(60, 30), 1);
+1.2
+SELECT round(1.234567890123456789012345678901::Decimal(60, 30), 30);
+1.234567890123456789012345678901
+SELECT round(1.234567890123456789012345678901::Decimal(60, 30), 31);
+1.234567890123456789012345678901
+SELECT round(1.234567890123456789012345678901::Decimal(60, 30), 20);
+1.23456789012345678901
+SELECT hex(1.234567890123456789012345678901::Decimal(60, 30));
+356C760E4FC986A2A39F1A950F00000000000000000000000000000000000000
+SELECT bin(1.234567890123456789012345678901::Decimal(60, 30));
+0011010101101100011101100000111001001111110010011000011010100010101000111001111100011010100101010000111100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
+SELECT reinterpret(unhex(hex(1.234567890123456789012345678901::Decimal(60, 30))), 'Decimal(60, 30)');
+1.234567890123456789012345678901
+SELECT arraySum([1.2::Decimal(60, 30), 3.45::Decimal(61, 29)]);
+4.65
+SELECT arraySum([1.2::Decimal(60, 30), 3.45::Decimal(3, 2)]);
+4.65
+SELECT arrayMin([1.2::Decimal(60, 30), 3.45::Decimal(61, 29)]);
+1.2
+SELECT arrayMax([1.2::Decimal(60, 30), 3.45::Decimal(61, 29)]);
+3.45
+SELECT arrayAvg([1.2::Decimal(60, 30), 3.45::Decimal(61, 29)]);
+2.325
+SELECT round(arrayProduct([1.2::Decimal(60, 30), 3.45::Decimal(61, 29)]), 6);
+4.14
+SELECT toTypeName(arrayProduct([1.2::Decimal(60, 30), 3.45::Decimal(61, 29)]));
+Float64
+SELECT arrayCumSum([1.2::Decimal(60, 30), 3.45::Decimal(61, 29)]);
+[1.2,4.65]
+SELECT arrayCumSumNonNegative([1.2::Decimal(60, 30), 3.45::Decimal(61, 29)]);
+[1.2,4.65]
+SELECT arrayDifference([1.2::Decimal(60, 30), 3.45::Decimal(61, 29)]);
+[0,2.25]
+SELECT arrayCompact([1.2::Decimal(60, 30) AS x, x, x, x, 3.45::Decimal(3, 2) AS y, y, x, x]);
+[1.2,3.45,1.2]
+SELECT 1.2::Decimal(2, 1) IN (1.2::Decimal(60, 30), 3.4::Decimal(60, 30));
+1
+SELECT 1.23::Decimal(3, 2) IN (1.2::Decimal(60, 30), 3.4::Decimal(60, 30));
+0
+SELECT 1.2::Decimal(60, 30) IN (1.2::Decimal(2, 1));
+1
+SELECT toTypeName([1.2::Decimal(60, 30), 3.45::Decimal(3, 2)]);
+Array(Decimal(76, 30))
+SELECT toTypeName(arraySum([1.2::Decimal(60, 30), 3.45::Decimal(3, 2)]));
+Decimal(76, 30)
+SELECT arrayJoin(sumMap(x)) FROM (SELECT [('Hello', 1.2::Decimal256(30)), ('World', 3.4::Decimal256(30))]::Map(String, Decimal256(30)) AS x UNION ALL SELECT [('World', 5.6::Decimal256(30)), ('GoodBye', -111.222::Decimal256(30))]::Map(String, Decimal256(30))) ORDER BY 1;
+('GoodBye',-111.222)
+('Hello',1.2)
+('World',9)
+SELECT mapAdd(map('Hello', 1.2::Decimal128(30), 'World', 3.4::Decimal128(30)), map('World', 5.6::Decimal128(30), 'GoodBye', -111.222::Decimal128(30)));
+{'GoodBye':-111.222,'Hello':1.2,'World':9}
+SELECT mapSubtract(map('Hello', 1.2::Decimal128(30), 'World', 3.4::Decimal128(30)), map('World', 5.6::Decimal128(30), 'GoodBye', -111.222::Decimal128(30)));
+{'GoodBye':111.222,'Hello':1.2,'World':-2.2}
+SELECT arraySort(arrayIntersect([1, 2, 3]::Array(UInt256), [2, 3, 4]::Array(UInt256)));
+[2,3]
+SELECT toTypeName(arraySort(arrayIntersect([1, 2, 3]::Array(UInt256), [2, 3, 4]::Array(UInt128))));
+Array(UInt128)
+SELECT toTypeName(arraySort(arrayIntersect([1, 2, 3]::Array(UInt256), [2, 3, 4]::Array(Int128))));
+Array(Int128)
+SELECT arraySort(arrayIntersect([1, 2, 3]::Array(UInt256), [2, 3, 4]::Array(Int128)));
+[2,3]
+SELECT arraySort(arrayIntersect([1, 2, 3]::Array(UInt256), [2, 3, 4]::Array(Int8)));
+[2,3]
+SELECT toTypeName(arraySort(arrayIntersect([1, 2, 3]::Array(UInt256), [2, 3, 4]::Array(Int8))));
+Array(Int8)
+SELECT arraySort(arrayIntersect([1.1::Decimal256(70), 2.34::Decimal256(60), 3.456::Decimal256(50)], [2.34::Decimal256(65), 3.456::Decimal256(55), 4.5678::Decimal256(45)]));
+[2.34,3.456]
+SELECT arraySort(arrayIntersect([1.1::Decimal256(1)], [1.12::Decimal256(2)])); -- Note: this is correct but the semantics has to be clarified in the docs.
+[1.1]
+SELECT arraySort(arrayIntersect([1.1::Decimal256(2)], [1.12::Decimal256(2)]));
+[]
+SELECT arraySort(arrayIntersect([1.1::Decimal128(1)], [1.12::Decimal128(2)])); -- Note: this is correct but the semantics has to be clarified in the docs.
+[1.1]
+SELECT arraySort(arrayIntersect([1.1::Decimal128(2)], [1.12::Decimal128(2)]));
+[]
+select coalesce(cast('123', 'Nullable(Decimal(20, 10))'), 0);
+123
+select coalesce(cast('123', 'Nullable(Decimal(40, 10))'), 0);
+123
+select coalesce(cast('123', 'Decimal(40, 10)'), 0);
+123
+DROP TABLE IF EXISTS decimal_insert_cast_issue;
+create table decimal_insert_cast_issue (a Decimal(76, 0)) engine = TinyLog;
+SET param_param = 1;
+INSERT INTO decimal_insert_cast_issue VALUES ({param:Nullable(Decimal(41, 0))});
+SELECT * FROM decimal_insert_cast_issue;
+1
+DROP TABLE decimal_insert_cast_issue;
diff --git a/tests/queries/0_stateless/02685_decimal256_various.sql b/tests/queries/0_stateless/02685_decimal256_various.sql
new file mode 100644
index 000000000000..545eaefe35ef
--- /dev/null
+++ b/tests/queries/0_stateless/02685_decimal256_various.sql
@@ -0,0 +1,65 @@
+-- { echoOn }
+
+SELECT 1.1::Decimal(60, 30);
+SELECT round(1.1::Decimal(60, 30));
+SELECT round(1.1::Decimal(60, 30), 1);
+SELECT round(1.234567890123456789012345678901::Decimal(60, 30), 1);
+SELECT round(1.234567890123456789012345678901::Decimal(60, 30), 30);
+SELECT round(1.234567890123456789012345678901::Decimal(60, 30), 31);
+SELECT round(1.234567890123456789012345678901::Decimal(60, 30), 20);
+
+SELECT hex(1.234567890123456789012345678901::Decimal(60, 30));
+SELECT bin(1.234567890123456789012345678901::Decimal(60, 30));
+SELECT reinterpret(unhex(hex(1.234567890123456789012345678901::Decimal(60, 30))), 'Decimal(60, 30)');
+
+SELECT arraySum([1.2::Decimal(60, 30), 3.45::Decimal(61, 29)]);
+SELECT arraySum([1.2::Decimal(60, 30), 3.45::Decimal(3, 2)]);
+
+SELECT arrayMin([1.2::Decimal(60, 30), 3.45::Decimal(61, 29)]);
+SELECT arrayMax([1.2::Decimal(60, 30), 3.45::Decimal(61, 29)]);
+SELECT arrayAvg([1.2::Decimal(60, 30), 3.45::Decimal(61, 29)]);
+
+SELECT round(arrayProduct([1.2::Decimal(60, 30), 3.45::Decimal(61, 29)]), 6);
+SELECT toTypeName(arrayProduct([1.2::Decimal(60, 30), 3.45::Decimal(61, 29)]));
+
+SELECT arrayCumSum([1.2::Decimal(60, 30), 3.45::Decimal(61, 29)]);
+SELECT arrayCumSumNonNegative([1.2::Decimal(60, 30), 3.45::Decimal(61, 29)]);
+SELECT arrayDifference([1.2::Decimal(60, 30), 3.45::Decimal(61, 29)]);
+
+SELECT arrayCompact([1.2::Decimal(60, 30) AS x, x, x, x, 3.45::Decimal(3, 2) AS y, y, x, x]);
+
+SELECT 1.2::Decimal(2, 1) IN (1.2::Decimal(60, 30), 3.4::Decimal(60, 30));
+SELECT 1.23::Decimal(3, 2) IN (1.2::Decimal(60, 30), 3.4::Decimal(60, 30));
+SELECT 1.2::Decimal(60, 30) IN (1.2::Decimal(2, 1));
+
+SELECT toTypeName([1.2::Decimal(60, 30), 3.45::Decimal(3, 2)]);
+SELECT toTypeName(arraySum([1.2::Decimal(60, 30), 3.45::Decimal(3, 2)]));
+
+SELECT arrayJoin(sumMap(x)) FROM (SELECT [('Hello', 1.2::Decimal256(30)), ('World', 3.4::Decimal256(30))]::Map(String, Decimal256(30)) AS x UNION ALL SELECT [('World', 5.6::Decimal256(30)), ('GoodBye', -111.222::Decimal256(30))]::Map(String, Decimal256(30))) ORDER BY 1;
+
+SELECT mapAdd(map('Hello', 1.2::Decimal128(30), 'World', 3.4::Decimal128(30)), map('World', 5.6::Decimal128(30), 'GoodBye', -111.222::Decimal128(30)));
+SELECT mapSubtract(map('Hello', 1.2::Decimal128(30), 'World', 3.4::Decimal128(30)), map('World', 5.6::Decimal128(30), 'GoodBye', -111.222::Decimal128(30)));
+
+SELECT arraySort(arrayIntersect([1, 2, 3]::Array(UInt256), [2, 3, 4]::Array(UInt256)));
+SELECT toTypeName(arraySort(arrayIntersect([1, 2, 3]::Array(UInt256), [2, 3, 4]::Array(UInt128))));
+SELECT toTypeName(arraySort(arrayIntersect([1, 2, 3]::Array(UInt256), [2, 3, 4]::Array(Int128))));
+SELECT arraySort(arrayIntersect([1, 2, 3]::Array(UInt256), [2, 3, 4]::Array(Int128)));
+SELECT arraySort(arrayIntersect([1, 2, 3]::Array(UInt256), [2, 3, 4]::Array(Int8)));
+SELECT toTypeName(arraySort(arrayIntersect([1, 2, 3]::Array(UInt256), [2, 3, 4]::Array(Int8))));
+
+SELECT arraySort(arrayIntersect([1.1::Decimal256(70), 2.34::Decimal256(60), 3.456::Decimal256(50)], [2.34::Decimal256(65), 3.456::Decimal256(55), 4.5678::Decimal256(45)]));
+SELECT arraySort(arrayIntersect([1.1::Decimal256(1)], [1.12::Decimal256(2)])); -- Note: this is correct but the semantics has to be clarified in the docs.
+SELECT arraySort(arrayIntersect([1.1::Decimal256(2)], [1.12::Decimal256(2)]));
+SELECT arraySort(arrayIntersect([1.1::Decimal128(1)], [1.12::Decimal128(2)])); -- Note: this is correct but the semantics has to be clarified in the docs.
+SELECT arraySort(arrayIntersect([1.1::Decimal128(2)], [1.12::Decimal128(2)]));
+
+select coalesce(cast('123', 'Nullable(Decimal(20, 10))'), 0);
+select coalesce(cast('123', 'Nullable(Decimal(40, 10))'), 0);
+select coalesce(cast('123', 'Decimal(40, 10)'), 0);
+
+DROP TABLE IF EXISTS decimal_insert_cast_issue;
+create table decimal_insert_cast_issue (a Decimal(76, 0)) engine = TinyLog;
+SET param_param = 1;
+INSERT INTO decimal_insert_cast_issue VALUES ({param:Nullable(Decimal(41, 0))});
+SELECT * FROM decimal_insert_cast_issue;
+DROP TABLE decimal_insert_cast_issue;
diff --git a/tests/queries/0_stateless/02686_postgres_protocol_decimal_256.reference b/tests/queries/0_stateless/02686_postgres_protocol_decimal_256.reference
new file mode 100644
index 000000000000..5e61b14b9a16
--- /dev/null
+++ b/tests/queries/0_stateless/02686_postgres_protocol_decimal_256.reference
@@ -0,0 +1,5 @@
+ test 
+------
+ 1.23
+(1 row)
+
diff --git a/tests/queries/0_stateless/02686_postgres_protocol_decimal_256.sh b/tests/queries/0_stateless/02686_postgres_protocol_decimal_256.sh
new file mode 100755
index 000000000000..2a94f9403270
--- /dev/null
+++ b/tests/queries/0_stateless/02686_postgres_protocol_decimal_256.sh
@@ -0,0 +1,14 @@
+#!/usr/bin/env bash
+# Tags: no-parallel, no-fasttest
+# Tag no-fasttest: needs psql
+
+CUR_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
+# shellcheck source=../shell_config.sh
+. "$CUR_DIR"/../shell_config.sh
+
+echo "
+DROP USER IF EXISTS postgresql_user;
+CREATE USER postgresql_user HOST IP '127.0.0.1' IDENTIFIED WITH no_password;
+" | $CLICKHOUSE_CLIENT -n
+
+psql --host localhost --port ${CLICKHOUSE_PORT_POSTGRESQL} ${CLICKHOUSE_DATABASE} --user postgresql_user -c "SELECT 1.23::Decimal256(70) AS test;"
