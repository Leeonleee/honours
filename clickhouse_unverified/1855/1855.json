{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 1855,
  "instance_id": "ClickHouse__ClickHouse-1855",
  "issue_numbers": [
    "67"
  ],
  "base_commit": "3c607171d2393c736abe7411b7aea305cd8b273c",
  "patch": "diff --git a/dbms/src/DataStreams/AddingDefaultBlockOutputStream.cpp b/dbms/src/DataStreams/AddingDefaultBlockOutputStream.cpp\nindex f32b7db180a8..c71e249bd334 100644\n--- a/dbms/src/DataStreams/AddingDefaultBlockOutputStream.cpp\n+++ b/dbms/src/DataStreams/AddingDefaultBlockOutputStream.cpp\n@@ -14,12 +14,6 @@ void AddingDefaultBlockOutputStream::write(const DB::Block & block)\n {\n     Block res = block;\n \n-    /// Computes explicitly specified values (in column_defaults) by default.\n-    /** @todo if somehow block does not contain values for implicitly-defaulted columns that are prerequisites\n-         *    for explicitly-defaulted ones, exception will be thrown during evaluating such columns\n-         *    (implicitly-defaulted columns are evaluated on the line after following one. */\n-    evaluateMissingDefaults(res, required_columns, column_defaults, context);\n-\n     /// Adds not specified default values.\n     /// @todo this may be moved before `evaluateMissingDefaults` with passing {required_columns - explicitly-defaulted columns}\n     if (!only_explicit_column_defaults)\n@@ -47,7 +41,8 @@ void AddingDefaultBlockOutputStream::write(const DB::Block & block)\n \n         for (const auto & requested_column : required_columns)\n         {\n-            if (res.has(requested_column.name))\n+            const auto it = column_defaults.find(requested_column.name);\n+            if (res.has(requested_column.name) || it != column_defaults.end())\n                 continue;\n \n             ColumnWithTypeAndName column_to_add;\n@@ -76,6 +71,12 @@ void AddingDefaultBlockOutputStream::write(const DB::Block & block)\n         }\n     }\n \n+    /// Computes explicitly specified values (in column_defaults) by default.\n+    /** @todo if somehow block does not contain values for implicitly-defaulted columns that are prerequisites\n+         *    for explicitly-defaulted ones, exception will be thrown during evaluating such columns\n+         *    (implicitly-defaulted columns are evaluated on the line after following one. */\n+    evaluateMissingDefaults(res, required_columns, column_defaults, context);\n+\n     output->write(res);\n }\n \n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/00564_initial_column_values_with_default_expression.reference b/dbms/tests/queries/0_stateless/00564_initial_column_values_with_default_expression.reference\nnew file mode 100644\nindex 000000000000..bc42226d38fc\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/00564_initial_column_values_with_default_expression.reference\n@@ -0,0 +1,3 @@\n+1\t0\th264\t\t2018-02-03\t0-h264\n+1\t0\th264\t\t2018-02-03\t0-h264\n+2\t0\th264\tCONTENT\t2018-02-03\t0-h264CONTENT\ndiff --git a/dbms/tests/queries/0_stateless/00564_initial_column_values_with_default_expression.sql b/dbms/tests/queries/0_stateless/00564_initial_column_values_with_default_expression.sql\nnew file mode 100644\nindex 000000000000..8ac087c6dee8\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/00564_initial_column_values_with_default_expression.sql\n@@ -0,0 +1,13 @@\n+DROP TABLE IF EXISTS test.test;\n+\n+CREATE TABLE IF NOT EXISTS test.test( id UInt32, track UInt8, codec String, content String, rdate Date DEFAULT '2018-02-03', track_id String DEFAULT concat(concat(concat(toString(track), '-'), codec), content) ) ENGINE=MergeTree(rdate, (id, track_id), 8192);\n+\n+INSERT INTO test.test(id, track, codec) VALUES(1, 0, 'h264');\n+\n+SELECT * FROM test.test ORDER BY id;\n+\n+INSERT INTO test.test(id, track, codec, content) VALUES(2, 0, 'h264', 'CONTENT');\n+\n+SELECT * FROM test.test ORDER BY id;\n+\n+DROP TABLE IF EXISTS test.test;\n",
  "problem_statement": "Initial column values are not used during DEFAULT expression evaluation.\nI've created a table in the following way:\n\n```\nCREATE TABLE IF NOT EXISTS gusev.`vf_vg-desktop_8582E5B16CE53B87` (\n  id UInt32,\n  track UInt8,\n  codec String,\n  content String,\n  rdate Date DEFAULT today(),\n  track_id String DEFAULT concat(concat(concat(toString(track), '-'), codec), content)\n) ENGINE=MergeTree(rdate, (id, track_id), 8192)\n```\n\nThen got an exception while trying to insert a row:\n\n```\nINSERT INTO gusev.`vf_vg-desktop_8582E5B16CE53B87` (id,track,codec) FORMAT TabSeparated\n1       0       h264\n```\n\nError in log:\n\n```\n2016.08.04 20:47:08.229 [ 5 ] <Error> HTTPHandler: Code: 10, e.displayText() = DB::Exception: Not found column: 'content', e.what() = DB::Exception, Stack trace:\n\n0. clickhouse-server(StackTrace::StackTrace()+0xe) [0xfcad5e]\n1. clickhouse-server(DB::Exception::Exception(std::string const&, int)+0x1e) [0xf65d4e]\n2. clickhouse-server(DB::ExpressionAction::execute(DB::Block&) const+0x186f) [0x12848ff]\n3. clickhouse-server(DB::ExpressionActions::execute(DB::Block&) const+0x32) [0x1284d42]\n4. clickhouse-server(DB::evaluateMissingDefaults(DB::Block&, DB::NamesAndTypesList const&, std::unordered_map<std::string, DB::ColumnDefault, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<std::string const, DB::ColumnDefault> > > const&, DB::Context const&)+0x63d) [0x136761d]\n5. clickhouse-server(DB::AddingDefaultBlockOutputStream::write(DB::Block const&)+0x24) [0x293a564]\n6. clickhouse-server(DB::ProhibitColumnsBlockOutputStream::write(DB::Block const&)+0x47) [0x2939b67]\n7. clickhouse-server(DB::copyData(DB::IBlockInputStream&, DB::IBlockOutputStream&, std::atomic<bool>*)+0x7d) [0x11d4f0d]\n8. clickhouse-server(DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, DB::Context&, std::shared_ptr<DB::IBlockInputStream>&, std::function<void (std::string const&)>)+0x5a1) [0x13597d1]\n9. clickhouse-server(DB::HTTPHandler::processQuery(Poco::Net::HTTPServerRequest&, Poco::Net::HTTPServerResponse&, DB::HTTPHandler::Output&)+0x1024) [0xf6f294]\n10. clickhouse-server(DB::HTTPHandler::handleRequest(Poco::Net::HTTPServerRequest&, Poco::Net::HTTPServerResponse&)+0x8a) [0xf702ca]\n11. clickhouse-server(Poco::Net::HTTPServerConnection::run()+0x26a) [0x2a7716a]\n12. clickhouse-server(Poco::Net::TCPServerConnection::start()+0x7) [0x2a66d37]\n13. clickhouse-server(Poco::Net::TCPServerDispatcher::run()+0x107) [0x2a71a37]\n14. clickhouse-server(Poco::PooledThread::run()+0x7f) [0x305a80f]\n15. clickhouse-server(Poco::ThreadImpl::runnableEntry(void*)+0x87) [0x3018287]\n16. /lib/x86_64-linux-gnu/libpthread.so.0(+0x8184) [0x7f8c180a8184]\n17. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f8c176ba37d]\n```\n\nBut if I define content column as `content String DEFAULT ''` then it works as expected.\n\n",
  "hints_text": "Confirmed.\n\n```\n$ clickhouse-client --query=\"CREATE TABLE IF NOT EXISTS test.defaults (id UInt32, track UInt8, codec String, content String, rdate Date DEFAULT today(), track_id String DEFAULT concat(toString(track), '-', codec, content)) ENGINE=MergeTree(rdate, (id, track_id), 8192)\"                                                                                                                                                                                                                                                                                               \n$ echo -ne 'INSERT INTO test.defaults (id,track,codec) FORMAT TabSeparated\\n1\\t0\\th264\\n' | curl 'http://localhost:8123/?query=' --data-binary @-\nCode: 10, e.displayText() = DB::Exception: Not found column: 'content', e.what() = DB::Exception\n```\n\nSeems that implicit defaults are not used when evaluating explicit default expressions.\n\nPS. By the way, n-ary concat function is available (though not documented).\n\nOkay, great)\n",
  "created_at": "2018-02-03T06:45:05Z"
}