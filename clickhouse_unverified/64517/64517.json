{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 64517,
  "instance_id": "ClickHouse__ClickHouse-64517",
  "issue_numbers": [
    "64445"
  ],
  "base_commit": "c45ebafc70c11d0497a9f7bf0322fc5857660fbb",
  "patch": "diff --git a/src/Analyzer/Resolve/QueryAnalyzer.cpp b/src/Analyzer/Resolve/QueryAnalyzer.cpp\nindex d84626c4be68..7dad1f5a8f9d 100644\n--- a/src/Analyzer/Resolve/QueryAnalyzer.cpp\n+++ b/src/Analyzer/Resolve/QueryAnalyzer.cpp\n@@ -5249,7 +5249,8 @@ ProjectionNames QueryAnalyzer::resolveExpressionNode(QueryTreeNodePtr & node, Id\n                     scope.scope_node->formatASTForErrorMessage());\n \n             auto & table_node = node->as<TableNode &>();\n-            result_projection_names.push_back(table_node.getStorageID().getFullNameNotQuoted());\n+            if (result_projection_names.empty())\n+                result_projection_names.push_back(table_node.getStorageID().getFullNameNotQuoted());\n \n             break;\n         }\n@@ -6947,7 +6948,7 @@ void QueryAnalyzer::resolveQuery(const QueryTreeNodePtr & query_node, Identifier\n \n         /// Add current alias to non cached set, because in case of cyclic alias identifier should not be substituted from cache.\n         /// See 02896_cyclic_aliases_crash.\n-        resolveExpressionNode(node, scope, true /*allow_lambda_expression*/, false /*allow_table_expression*/);\n+        resolveExpressionNode(node, scope, true /*allow_lambda_expression*/, true /*allow_table_expression*/);\n \n         bool has_node_in_alias_table = false;\n \n@@ -6956,7 +6957,16 @@ void QueryAnalyzer::resolveQuery(const QueryTreeNodePtr & query_node, Identifier\n         {\n             has_node_in_alias_table = true;\n \n-            if (!it->second->isEqual(*node))\n+            bool matched = it->second->isEqual(*node);\n+            if (!matched)\n+                /// Table expression could be resolved as scalar subquery,\n+                /// but for duplicating alias we allow table expression to be returned.\n+                /// So, check constant node source expression as well.\n+                if (const auto * constant_node = it->second->as<ConstantNode>())\n+                    if (const auto & source_expression = constant_node->getSourceExpression())\n+                        matched = source_expression->isEqual(*node);\n+\n+            if (!matched)\n                 throw Exception(ErrorCodes::MULTIPLE_EXPRESSIONS_FOR_ALIAS,\n                     \"Multiple expressions {} and {} for alias {}. In scope {}\",\n                     node->formatASTForErrorMessage(),\ndiff --git a/src/Storages/buildQueryTreeForShard.cpp b/src/Storages/buildQueryTreeForShard.cpp\nindex 4f655f9b5e84..131712e750aa 100644\n--- a/src/Storages/buildQueryTreeForShard.cpp\n+++ b/src/Storages/buildQueryTreeForShard.cpp\n@@ -320,6 +320,8 @@ QueryTreeNodePtr buildQueryTreeForShard(const PlannerContextPtr & planner_contex\n     auto replacement_map = visitor.getReplacementMap();\n     const auto & global_in_or_join_nodes = visitor.getGlobalInOrJoinNodes();\n \n+    QueryTreeNodePtrWithHashMap<TableNodePtr> global_in_temporary_tables;\n+\n     for (const auto & global_in_or_join_node : global_in_or_join_nodes)\n     {\n         if (auto * join_node = global_in_or_join_node.query_node->as<JoinNode>())\n@@ -364,15 +366,19 @@ QueryTreeNodePtr buildQueryTreeForShard(const PlannerContextPtr & planner_contex\n             if (in_function_node_type != QueryTreeNodeType::QUERY && in_function_node_type != QueryTreeNodeType::UNION && in_function_node_type != QueryTreeNodeType::TABLE)\n                 continue;\n \n-            auto subquery_to_execute = in_function_subquery_node;\n-            if (subquery_to_execute->as<TableNode>())\n-                subquery_to_execute = buildSubqueryToReadColumnsFromTableExpression(subquery_to_execute, planner_context->getQueryContext());\n+            auto & temporary_table_expression_node = global_in_temporary_tables[in_function_subquery_node];\n+            if (!temporary_table_expression_node)\n+            {\n+                auto subquery_to_execute = in_function_subquery_node;\n+                if (subquery_to_execute->as<TableNode>())\n+                    subquery_to_execute = buildSubqueryToReadColumnsFromTableExpression(subquery_to_execute, planner_context->getQueryContext());\n \n-            auto temporary_table_expression_node = executeSubqueryNode(subquery_to_execute,\n-                planner_context->getMutableQueryContext(),\n-                global_in_or_join_node.subquery_depth);\n+                temporary_table_expression_node = executeSubqueryNode(subquery_to_execute,\n+                    planner_context->getMutableQueryContext(),\n+                    global_in_or_join_node.subquery_depth);\n+            }\n \n-            in_function_subquery_node = std::move(temporary_table_expression_node);\n+            replacement_map.emplace(in_function_subquery_node.get(), temporary_table_expression_node);\n         }\n         else\n         {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03164_analyzer_global_in_alias.reference b/tests/queries/0_stateless/03164_analyzer_global_in_alias.reference\nnew file mode 100644\nindex 000000000000..459605fc1db7\n--- /dev/null\n+++ b/tests/queries/0_stateless/03164_analyzer_global_in_alias.reference\n@@ -0,0 +1,4 @@\n+1\t1\n+1\n+1\t1\n+1\ndiff --git a/tests/queries/0_stateless/03164_analyzer_global_in_alias.sql b/tests/queries/0_stateless/03164_analyzer_global_in_alias.sql\nnew file mode 100644\nindex 000000000000..00c293334ee8\n--- /dev/null\n+++ b/tests/queries/0_stateless/03164_analyzer_global_in_alias.sql\n@@ -0,0 +1,6 @@\n+SET allow_experimental_analyzer=1;\n+SELECT 1 GLOBAL IN (SELECT 1) AS s, s FROM remote('127.0.0.{2,3}', system.one) GROUP BY 1;\n+SELECT 1 GLOBAL IN (SELECT 1) AS s FROM remote('127.0.0.{2,3}', system.one) GROUP BY 1;\n+\n+SELECT 1 GLOBAL IN (SELECT 1) AS s, s FROM remote('127.0.0.{1,3}', system.one) GROUP BY 1;\n+SELECT 1 GLOBAL IN (SELECT 1) AS s FROM remote('127.0.0.{1,3}', system.one) GROUP BY 1;\n",
  "problem_statement": "Logical Error: Expression nodes list expected 1 projection names. Actual 2.\n**Describe the bug**\r\nA [link](https://s3.amazonaws.com/clickhouse-test-reports/64311/0383fa5164cb07fdec7c5fc036137122545acd6a/ast_fuzzer__debug_.html) to the report\r\n\r\n**How to reproduce**\r\n```sql\r\nSELECT 1 GLOBAL IN (SELECT 1) AS s, s FROM remote('127.0.0.{2,3}', system.one) GROUP BY 1\r\n```\r\n```\r\nReceived exception from server (version 24.6.1):\r\nCode: 49. DB::Exception: Received from localhost:9000. DB::Exception: Received from 127.0.0.2:9000. DB::Exception: Expression nodes list expected 1 projection names. Actual 2. (LOGICAL_ERROR)\r\n```\r\n\n",
  "hints_text": "",
  "created_at": "2024-05-28T14:45:11Z"
}