{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 64801,
  "instance_id": "ClickHouse__ClickHouse-64801",
  "issue_numbers": [
    "64755"
  ],
  "base_commit": "2f45caca28d3f11eef7fb97359eca34eff4e17a7",
  "patch": "diff --git a/src/Analyzer/ArrayJoinNode.cpp b/src/Analyzer/ArrayJoinNode.cpp\nindex 27d7229d46a1..0cfb5d80b2a3 100644\n--- a/src/Analyzer/ArrayJoinNode.cpp\n+++ b/src/Analyzer/ArrayJoinNode.cpp\n@@ -1,5 +1,6 @@\n #include <Analyzer/ArrayJoinNode.h>\n #include <Analyzer/ColumnNode.h>\n+#include <Analyzer/FunctionNode.h>\n #include <Analyzer/Utils.h>\n #include <IO/Operators.h>\n #include <IO/WriteBuffer.h>\n@@ -64,7 +65,12 @@ ASTPtr ArrayJoinNode::toASTImpl(const ConvertToASTOptions & options) const\n \n         auto * column_node = array_join_expression->as<ColumnNode>();\n         if (column_node && column_node->getExpression())\n-            array_join_expression_ast = column_node->getExpression()->toAST(options);\n+        {\n+            if (const auto * function_node = column_node->getExpression()->as<FunctionNode>(); function_node && function_node->getFunctionName() == \"nested\")\n+                array_join_expression_ast = array_join_expression->toAST(options);\n+            else\n+                array_join_expression_ast = column_node->getExpression()->toAST(options);\n+        }\n         else\n             array_join_expression_ast = array_join_expression->toAST(options);\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03156_analyzer_array_join_distributed.reference b/tests/queries/0_stateless/03156_analyzer_array_join_distributed.reference\nindex b5b2aec9c125..18830a293bd6 100644\n--- a/tests/queries/0_stateless/03156_analyzer_array_join_distributed.reference\n+++ b/tests/queries/0_stateless/03156_analyzer_array_join_distributed.reference\n@@ -10,3 +10,5 @@ Hello\t1\n Hello\t1\n Hello\t2\n Hello\t2\n+2020-01-01\ta\t2\n+2020-01-01\tb\t4\ndiff --git a/tests/queries/0_stateless/03156_analyzer_array_join_distributed.sql b/tests/queries/0_stateless/03156_analyzer_array_join_distributed.sql\nindex f605a3698221..55f9877b2ac5 100644\n--- a/tests/queries/0_stateless/03156_analyzer_array_join_distributed.sql\n+++ b/tests/queries/0_stateless/03156_analyzer_array_join_distributed.sql\n@@ -8,3 +8,21 @@ SELECT s, arr, a FROM remote('127.0.0.{1,2}', currentDatabase(), arrays_test) AR\n \n SELECT s, arr FROM remote('127.0.0.2', currentDatabase(), arrays_test) ARRAY JOIN arr WHERE arr < 3 ORDER BY arr;\n SELECT s, arr FROM remote('127.0.0.{1,2}', currentDatabase(), arrays_test) ARRAY JOIN arr WHERE arr < 3 ORDER BY arr;\n+\n+create table hourly(\n+  hour datetime,\n+  `metric.names` Array(String),\n+  `metric.values` Array(Int64)\n+) Engine=Memory\n+as select '2020-01-01', ['a', 'b'], [1,2];\n+\n+SELECT\n+     toDate(hour) AS day,\n+     `metric.names`,\n+     sum(`metric.values`)\n+FROM remote('127.0.0.{1,2}', currentDatabase(), hourly)\n+ARRAY JOIN metric\n+GROUP BY\n+     day,\n+     metric.names\n+ORDER BY metric.names;\n",
  "problem_statement": "Distributed query fails with allow_experimental_analyzer and array join \nhttps://fiddle.clickhouse.com/80cfeb73-a252-4032-9a52-c8734d7e8dd0\r\n\r\n```sql\r\ncreate table hourly(\r\n  hour datetime,\r\n  `metric.names` Array(String),\r\n  `metric.values` Array(Int64)\r\n) Engine=Memory\r\nas select '2020-01-01', ['a', 'b'], [1,2];\r\n\r\nset allow_experimental_analyzer=0;\r\n\r\nSELECT\r\n     toDate(hour) AS day,\r\n     `metric.names`,\r\n     sum(`metric.values`)\r\nFROM remote('127.0.0.{1,2}', default, hourly)\r\nARRAY JOIN metric\r\nGROUP BY\r\n     day,\r\n     `metric.names`\r\nformat PrettyCompactMonoBlock;\r\n\r\n   +--------day-+-metric.names-+-sum(metric.values)-+\r\n1. | 2020-01-01 | b            |                  4 |\r\n2. | 2020-01-01 | a            |                  2 |\r\n   +------------+--------------+--------------------+\r\n\r\nset allow_experimental_analyzer=1;\r\n\r\nSELECT\r\n     toDate(hour) AS day,\r\n     `metric.names`,\r\n     sum(`metric.values`) \r\nFROM default.hourly\r\nARRAY JOIN metric\r\nGROUP BY\r\n     day,\r\n     `metric.names`\r\nformat PrettyCompactMonoBlock;\r\n\r\n   +--------day-+-metric.names-+-sum(metric.values)-+\r\n1. | 2020-01-01 | b            |                  2 |\r\n2. | 2020-01-01 | a            |                  1 |\r\n   +------------+--------------+--------------------+\r\n\r\n\r\nSELECT\r\n     toDate(hour) AS day,\r\n     `metric.names`,\r\n     sum(`metric.values`)\r\nFROM remote('127.0.0.{1,2}', default, hourly)\r\nARRAY JOIN metric\r\nGROUP BY\r\n     day,\r\n     `metric.names`\r\nformat PrettyCompactMonoBlock;\r\n\r\nDB::Exception: Cannot find column `tupleElement(__table1.metric, 'names'_String)\r\n```\n",
  "hints_text": "",
  "created_at": "2024-06-04T17:14:52Z"
}