{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 6233,
  "instance_id": "ClickHouse__ClickHouse-6233",
  "issue_numbers": [
    "6214"
  ],
  "base_commit": "8949ef6dd3b4fd639919b1c524ffe2d09b70de9c",
  "patch": "diff --git a/dbms/src/Functions/intDiv.h b/dbms/src/Functions/intDiv.h\nindex 566a80106391..0cbe612c6e1f 100644\n--- a/dbms/src/Functions/intDiv.h\n+++ b/dbms/src/Functions/intDiv.h\n@@ -55,7 +55,13 @@ struct DivideIntegralImpl\n     static inline Result apply(A a, B b)\n     {\n         throwIfDivisionLeadsToFPE(a, b);\n-        return a / b;\n+\n+        /// Otherwise overflow may occur due to integer promotion. Example: int8_t(-1) / uint64_t(2).\n+        /// NOTE: overflow is still possible when dividing large signed number to large unsigned number or vice-versa. But it's less harmful.\n+        if constexpr (std::is_integral_v<A> && std::is_integral_v<B> && (std::is_signed_v<A> || std::is_signed_v<B>))\n+            return std::make_signed_t<A>(a) / std::make_signed_t<B>(b);\n+        else\n+            return a / b;\n     }\n \n #if USE_EMBEDDED_COMPILER\ndiff --git a/dbms/src/Functions/intDivOrZero.cpp b/dbms/src/Functions/intDivOrZero.cpp\nindex da996c9492ef..01c8b9fedfbf 100644\n--- a/dbms/src/Functions/intDivOrZero.cpp\n+++ b/dbms/src/Functions/intDivOrZero.cpp\n@@ -1,6 +1,9 @@\n #include <Functions/FunctionFactory.h>\n #include <Functions/FunctionBinaryArithmetic.h>\n \n+#include \"intDiv.h\"\n+\n+\n namespace DB\n {\n \n@@ -12,7 +15,10 @@ struct DivideIntegralOrZeroImpl\n     template <typename Result = ResultType>\n     static inline Result apply(A a, B b)\n     {\n-        return unlikely(divisionLeadsToFPE(a, b)) ? 0 : a / b;\n+        if (unlikely(divisionLeadsToFPE(a, b)))\n+            return 0;\n+\n+        return DivideIntegralImpl<A, B>::template apply<Result>(a, b);\n     }\n \n #if USE_EMBEDDED_COMPILER\n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/00977_int_div.reference b/dbms/tests/queries/0_stateless/00977_int_div.reference\nnew file mode 100644\nindex 000000000000..d3d73cb37985\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/00977_int_div.reference\n@@ -0,0 +1,23 @@\n+-2000\t-1\t1\n+-1\n+-1\n+-1\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+-1\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\n+0\ndiff --git a/dbms/tests/queries/0_stateless/00977_int_div.sql b/dbms/tests/queries/0_stateless/00977_int_div.sql\nnew file mode 100644\nindex 000000000000..3270ab342241\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/00977_int_div.sql\n@@ -0,0 +1,19 @@\n+SELECT \n+    sum(ASD) AS asd, \n+    intDiv(toInt64(asd), abs(toInt64(asd))) AS int_div_with_abs, \n+    intDiv(toInt64(asd), toInt64(asd)) AS int_div_without_abs\n+FROM \n+(\n+    SELECT ASD\n+    FROM \n+    (\n+        SELECT [-1000, -1000] AS asds\n+    ) \n+    ARRAY JOIN asds AS ASD\n+);\n+\n+SELECT  intDivOrZero( CAST(-1000, 'Int64')   , CAST(1000, 'UInt64') );\n+SELECT  intDivOrZero( CAST(-1000, 'Int64')   , CAST(1000, 'Int64') );\n+\n+SELECT intDiv(-1, number) FROM numbers(1, 10);\n+SELECT intDivOrZero(-1, number) FROM numbers(1, 10);\n",
  "problem_statement": "Overflow intDiv* functions?\n**How to reproduce**\r\nClickHouse server version >= 19.4\r\n```sql\r\nSELECT \r\n    sum(ASD) AS asd, \r\n    intDivOrZero(asd, abs(asd))\r\nFROM \r\n(\r\n    SELECT ASD\r\n    FROM \r\n    (\r\n        SELECT [-1000, -1000] AS asds\r\n    ) \r\n    ARRAY JOIN asds AS ASD\r\n) \r\n```\r\n\r\nresult:\r\n```\r\n\u250c\u2500\u2500\u2500asd\u2500\u252c\u2500intDivOrZero(sum(ASD), abs(sum(ASD)))\u2500\u2510\r\n\u2502 -2000 \u2502                      9223372036854774 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n**Expected behavior**\r\n```\r\n\u250c\u2500\u2500\u2500asd\u2500\u252c\u2500intDivOrZero(sum(ASD), abs(sum(ASD)))\u2500\u2510\r\n\u2502 -2000 \u2502                                    -1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\n",
  "hints_text": "Without `abs`:\r\n```sql\r\nSELECT \r\n    sum(ASD) AS asd, \r\n    intDiv(toInt64(asd), abs(toInt64(asd))) AS int_div_with_abs, \r\n    intDiv(toInt64(asd), toInt64(asd)) AS int_div_without_abs\r\nFROM \r\n(\r\n    SELECT ASD\r\n    FROM \r\n    (\r\n        SELECT [-1000, -1000] AS asds\r\n    ) \r\n    ARRAY JOIN asds AS ASD\r\n) \r\n```\r\n```\r\n\u250c\u2500\u2500\u2500asd\u2500\u252c\u2500int_div_with_abs\u2500\u252c\u2500int_div_without_abs\u2500\u2510\r\n\u2502 -2000 \u2502 9223372036854774 \u2502                   1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\n```\r\nSELECT  intDivOrZero( CAST(-1000, 'Int64')   , CAST(1000, 'UInt64') )\r\n--\r\n 18446744073709550\r\n\r\n\r\nSELECT  intDivOrZero( CAST(-1000, 'Int64')   , CAST(1000, 'Int64') )\r\n--\r\n-1\r\n```\nMore strange:\r\n```sql\r\nSELECT \r\n    ID, \r\n    sum(ASD) AS asd, \r\n    intDiv(abs(asd), asd) AS int_div_abs_first, \r\n    intDiv(asd, abs(asd)) AS int_div_abs_second\r\nFROM \r\n(\r\n    SELECT \r\n        ID, \r\n        ASD\r\n    FROM \r\n    (\r\n        SELECT \r\n            [-1000, -1000, 1000, 1000] AS asds, \r\n            [1, 1, 2, 2] AS ids\r\n    ) \r\n    ARRAY JOIN \r\n        asds AS ASD, \r\n        ids AS ID\r\n) \r\nGROUP BY ID\r\n```\r\n\r\n```\r\n\u250c\u2500ID\u2500\u252c\u2500\u2500\u2500asd\u2500\u252c\u2500int_div_abs_first\u2500\u252c\u2500int_div_abs_second\u2500\u2510\r\n\u2502  1 \u2502 -2000 \u2502                 0 \u2502   9223372036854774 \u2502\r\n\u2502  2 \u2502  2000 \u2502                 1 \u2502                  1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\nThis is how C++ works:\r\n```\r\n$ g++ -xc++ -include cstdint -include stdlib.h - <<< \"int main(int, char ** argv) { return int8_t(atoi(argv[1])) / uint64_t(atoi(argv[2])); }\"\r\n$ ./a.out -1 3; echo $?\r\n85\r\n```\r\n\r\nWill fix.",
  "created_at": "2019-07-31T01:09:58Z"
}