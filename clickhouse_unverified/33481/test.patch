diff --git a/tests/queries/0_stateless/01503_if_const_optimization.reference b/tests/queries/0_stateless/01503_if_const_optimization.reference
index e69de29bb2d1..dec7d2fabd2e 100644
--- a/tests/queries/0_stateless/01503_if_const_optimization.reference
+++ b/tests/queries/0_stateless/01503_if_const_optimization.reference
@@ -0,0 +1,1 @@
+\N
diff --git a/tests/queries/0_stateless/01503_if_const_optimization.sql b/tests/queries/0_stateless/01503_if_const_optimization.sql
index 047f6f757e80..a64be6bc80b0 100644
--- a/tests/queries/0_stateless/01503_if_const_optimization.sql
+++ b/tests/queries/0_stateless/01503_if_const_optimization.sql
@@ -1,1 +1,1 @@
-SELECT if(CAST(NULL), '2.55', NULL) AS x; -- { serverError 42 }
+SELECT if(CAST(NULL AS Nullable(UInt8)), '2.55', NULL) AS x;
diff --git a/tests/queries/0_stateless/01534_lambda_array_join.sql b/tests/queries/0_stateless/01534_lambda_array_join.sql
index aee9dd1411aa..092c569b25fb 100644
--- a/tests/queries/0_stateless/01534_lambda_array_join.sql
+++ b/tests/queries/0_stateless/01534_lambda_array_join.sql
@@ -6,7 +6,7 @@ SELECT
         count() AS c
     FROM numbers(10)
     GROUP BY
-        arrayMap(x -> reinterpretAsUInt8(substring(randomString(randomString(range(randomString(255), NULL)), NULL))), range(3)),
+        arrayMap(x -> reinterpretAsUInt8(substring(randomString(randomString(range(randomString(255), NULL)), NULL), NULL)), range(3)),
         randomString(range(randomString(1048577), NULL), NULL),
         byte
     ORDER BY byte ASC;
diff --git a/tests/queries/0_stateless/02154_parser_backtracking.reference b/tests/queries/0_stateless/02154_parser_backtracking.reference
new file mode 100644
index 000000000000..23751ef6c1fe
--- /dev/null
+++ b/tests/queries/0_stateless/02154_parser_backtracking.reference
@@ -0,0 +1,14 @@
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
+1
diff --git a/tests/queries/0_stateless/02154_parser_backtracking.sh b/tests/queries/0_stateless/02154_parser_backtracking.sh
new file mode 100755
index 000000000000..af0320080698
--- /dev/null
+++ b/tests/queries/0_stateless/02154_parser_backtracking.sh
@@ -0,0 +1,25 @@
+#!/usr/bin/env bash
+
+CURDIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
+# shellcheck source=../shell_config.sh
+. "$CURDIR"/../shell_config.sh
+
+# Should finish in reasonable time (milliseconds).
+# In previous versions this query led to exponential backtracking.
+
+echo 'SELECT '"$(perl -e 'print "CAST(" x 100')"'a b c'"$(perl -e 'print ")" x 100')" | ${CLICKHOUSE_LOCAL} --max_parser_depth 10000 2>&1 | grep -cF 'Syntax error'
+echo 'SELECT '"$(perl -e 'print "CAST(" x 100')"'a, b'"$(perl -e 'print ")" x 100')" | ${CLICKHOUSE_LOCAL} --max_parser_depth 10000 2>&1 | grep -cF 'Syntax error'
+echo 'SELECT '"$(perl -e 'print "CAST(" x 100')"'a AS b'"$(perl -e 'print ")" x 100')" | ${CLICKHOUSE_LOCAL} --max_parser_depth 10000 2>&1 | grep -cF 'Syntax error'
+echo 'SELECT '"$(perl -e 'print "CAST(" x 100')"'1'"$(perl -e 'print ", '"'UInt8'"')" x 100')" | ${CLICKHOUSE_LOCAL} --max_parser_depth 10000
+echo 'SELECT '"$(perl -e 'print "CAST(" x 100')"'1'"$(perl -e 'print " AS UInt8)" x 100')" | ${CLICKHOUSE_LOCAL} --max_parser_depth 10000
+
+echo "SELECT fo,22222?LUTAY(SELECT(NOT CAUTAY(SELECT(NOT CAST(NOTT(NOT CAST(NOT NOT LEfT(NOT coARRAYlumnsFLuTAY(SELECT(NO0?LUTAY(SELECT(NOT CAUTAY(SELECT(NOT CAST(NOTT(NOT CAST(NOT NOT LEfT(NOT coARRAYlumnsFLuTAY(SELECT(NOTAYTAY(SELECT(NOTAYEFAULT(fo,22222?LUTAY(%SELECT(NOT CAST(NOT NOTAYTAY(SELECT(NOTAYEFAULT(fo,22222?LUTAY(SELECT(NOT CAST(NOT NOT (NOe)))))))))))))))))))))))))))))))))" | ${CLICKHOUSE_LOCAL} --max_parser_depth 10000 2>&1 | grep -cF 'Syntax error'
+echo "SELECT position(position(position(position(position(position(position(position(position(position(position(position(position(position(position(position(position(position(position(position(a b))))))))))))))))))))" | ${CLICKHOUSE_LOCAL} --max_parser_depth 10000 2>&1 | grep -cF 'Syntax error'
+echo "SELECT position(position(position(position(position(position(position(position(position(position(position(position(position(position(position(position(position(position(position(position(a, b))))))))))))))))))))" | ${CLICKHOUSE_LOCAL} --max_parser_depth 10000 2>&1 | grep -cF 'UNKNOWN_IDENTIFIER'
+echo "SELECT position(position(position(position(position(position(position(position(position(position(position(position(position(position(position(position(position(position(position(position(a, b, c))))))))))))))))))))" | ${CLICKHOUSE_LOCAL} --max_parser_depth 10000 2>&1 | grep -cF 'UNKNOWN_IDENTIFIER'
+
+echo 'SELECT '"$(perl -e 'print "position(" x 100')"'x'"$(perl -e 'print ")" x 100')" | ${CLICKHOUSE_LOCAL} --max_parser_depth 10000 2>&1 | grep -cF 'UNKNOWN_IDENTIFIER'
+echo 'SELECT '"$(perl -e 'print "position(" x 100')"'x y'"$(perl -e 'print ")" x 100')" | ${CLICKHOUSE_LOCAL} --max_parser_depth 10000 2>&1 | grep -cF 'Syntax error'
+echo 'SELECT '"$(perl -e 'print "position(" x 100')"'x IN y'"$(perl -e 'print ")" x 100')" | ${CLICKHOUSE_LOCAL} --max_parser_depth 10000 2>&1 | grep -cF 'UNKNOWN_IDENTIFIER'
+echo 'SELECT '"$(perl -e 'print "position(" x 100')"'x'"$(perl -e 'print " IN x)" x 100')" | ${CLICKHOUSE_LOCAL} --max_parser_depth 10000 2>&1 | grep -cF 'UNKNOWN_IDENTIFIER'
+echo 'SELECT '"$(perl -e 'print "position(" x 100')"'x'"$(perl -e 'print ", x)" x 100')" | ${CLICKHOUSE_LOCAL} --max_parser_depth 10000 2>&1 | grep -cF 'UNKNOWN_IDENTIFIER'
diff --git a/tests/queries/0_stateless/02160_special_functions.reference b/tests/queries/0_stateless/02160_special_functions.reference
new file mode 100644
index 000000000000..3a1dcd889026
--- /dev/null
+++ b/tests/queries/0_stateless/02160_special_functions.reference
@@ -0,0 +1,36 @@
+1
+[]
+1
+world
+world
+world
+world
+def
+abc
+bcde
+abcdef
+abcdef 
+ abcdef
+2022
+Hello
+3
+3
+2023-01-01
+2023-01-01
+2023-01-01
+2023-01-01
+2023-01-01
+2023-01-01
+2023-01-01
+2023-01-01
+2021-01-01
+2021-01-01
+2021-01-01
+2021-01-01
+2021-01-01
+2021-01-01
+2021-01-01
+2021-01-01
+1
+1
+1
diff --git a/tests/queries/0_stateless/02160_special_functions.sql b/tests/queries/0_stateless/02160_special_functions.sql
new file mode 100644
index 000000000000..6d18e7d0d250
--- /dev/null
+++ b/tests/queries/0_stateless/02160_special_functions.sql
@@ -0,0 +1,44 @@
+SELECT CAST(1 AS UInt8);
+SELECT CAST([] AS Array(UInt8));
+SELECT CAST(1, 'UInt8');
+
+SELECT SUBSTRING('Hello, world' FROM 8);
+SELECT SUBSTRING('Hello, world' FROM 8 FOR 5);
+SELECT SUBSTRING('Hello, world', 8);
+SELECT SUBSTRING('Hello, world', 8, 5);
+
+SELECT TRIM(LEADING 'abc' FROM 'abcdef');
+SELECT TRIM(TRAILING 'def' FROM 'abcdef');
+SELECT TRIM(BOTH 'af' FROM 'abcdef');
+SELECT TRIM(' abcdef ');
+SELECT LTRIM(' abcdef ');
+SELECT RTRIM(' abcdef ');
+
+SELECT EXTRACT(YEAR FROM DATE '2022-01-01');
+SELECT EXTRACT('Hello, world', '^\w+');
+
+SELECT POSITION('ll' IN 'Hello');
+SELECT POSITION('Hello', 'll');
+
+SELECT DATE_ADD(YEAR, 1, DATE '2022-01-01');
+SELECT DATE_ADD(INTERVAL 1 YEAR, DATE '2022-01-01');
+SELECT DATEADD(YEAR, 1, DATE '2022-01-01');
+SELECT DATEADD(INTERVAL 1 YEAR, DATE '2022-01-01');
+SELECT TIMESTAMP_ADD(YEAR, 1, DATE '2022-01-01');
+SELECT TIMESTAMP_ADD(INTERVAL 1 YEAR, DATE '2022-01-01');
+SELECT TIMESTAMPADD(YEAR, 1, DATE '2022-01-01');
+SELECT TIMESTAMPADD(INTERVAL 1 YEAR, DATE '2022-01-01');
+
+SELECT DATE_SUB(YEAR, 1, DATE '2022-01-01');
+SELECT DATE_SUB(DATE '2022-01-01', INTERVAL 1 YEAR);
+SELECT DATESUB(YEAR, 1, DATE '2022-01-01');
+SELECT DATESUB(DATE '2022-01-01', INTERVAL 1 YEAR);
+SELECT TIMESTAMP_SUB(YEAR, 1, DATE '2022-01-01');
+SELECT TIMESTAMP_SUB(DATE '2022-01-01', INTERVAL 1 YEAR);
+SELECT TIMESTAMPSUB(YEAR, 1, DATE '2022-01-01');
+SELECT TIMESTAMPSUB(DATE '2022-01-01', INTERVAL 1 YEAR);
+
+SELECT DATE_DIFF(YEAR, DATE '2021-01-01', DATE '2022-01-01');
+SELECT DATEDIFF(YEAR, DATE '2021-01-01', DATE '2022-01-01');
+
+SELECT EXISTS (SELECT 1);
