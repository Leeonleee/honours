{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 70459,
  "instance_id": "ClickHouse__ClickHouse-70459",
  "issue_numbers": [
    "70291"
  ],
  "base_commit": "a23e8071db87f29285ef14fe56446321fa564016",
  "patch": "diff --git a/src/Core/BaseSettingsProgramOptions.h b/src/Core/BaseSettingsProgramOptions.h\nindex 6e1ecce6a34b..f482c08cf130 100644\n--- a/src/Core/BaseSettingsProgramOptions.h\n+++ b/src/Core/BaseSettingsProgramOptions.h\n@@ -11,8 +11,16 @@ template <typename T>\n void addProgramOptionAsMultitoken(T &cmd_settings, boost::program_options::options_description & options, std::string_view name, const typename T::SettingFieldRef & field)\n {\n     auto on_program_option = boost::function1<void, const Strings &>([&cmd_settings, name](const Strings & values) { cmd_settings.set(name, values.back()); });\n-    options.add(boost::shared_ptr<boost::program_options::option_description>(new boost::program_options::option_description(\n-            name.data(), boost::program_options::value<Strings>()->multitoken()->composing()->notifier(on_program_option), field.getDescription())));\n+    if (field.getTypeName() == \"Bool\")\n+    {\n+        options.add(boost::shared_ptr<boost::program_options::option_description>(new boost::program_options::option_description(\n+                name.data(), boost::program_options::value<Strings>()->multitoken()->composing()->implicit_value(std::vector<std::string>{\"1\"}, \"1\")->notifier(on_program_option), field.getDescription())));\n+    }\n+    else\n+    {\n+        options.add(boost::shared_ptr<boost::program_options::option_description>(new boost::program_options::option_description(\n+                name.data(), boost::program_options::value<Strings>()->multitoken()->composing()->notifier(on_program_option), field.getDescription())));\n+    }\n }\n \n template <typename T>\n@@ -36,8 +44,16 @@ template <typename T>\n void addProgramOption(T & cmd_settings, boost::program_options::options_description & options, std::string_view name, const typename T::SettingFieldRef & field)\n {\n     auto on_program_option = boost::function1<void, const std::string &>([&cmd_settings, name](const std::string & value) { cmd_settings.set(name, value); });\n-    options.add(boost::shared_ptr<boost::program_options::option_description>(new boost::program_options::option_description(\n-            name.data(), boost::program_options::value<std::string>()->composing()->notifier(on_program_option), field.getDescription()))); // NOLINT\n+    if (field.getTypeName() == \"Bool\")\n+    {\n+        options.add(boost::shared_ptr<boost::program_options::option_description>(new boost::program_options::option_description(\n+                name.data(), boost::program_options::value<std::string>()->composing()->implicit_value(\"1\")->notifier(on_program_option), field.getDescription()))); // NOLINT\n+    }\n+    else\n+    {\n+        options.add(boost::shared_ptr<boost::program_options::option_description>(new boost::program_options::option_description(\n+                name.data(), boost::program_options::value<std::string>()->composing()->notifier(on_program_option), field.getDescription()))); // NOLINT\n+    }\n }\n \n template <typename T>\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03250_client_default_bool_cli_settings_with_no_value_to_true.reference b/tests/queries/0_stateless/03250_client_default_bool_cli_settings_with_no_value_to_true.reference\nnew file mode 100644\nindex 000000000000..2c94e4837100\n--- /dev/null\n+++ b/tests/queries/0_stateless/03250_client_default_bool_cli_settings_with_no_value_to_true.reference\n@@ -0,0 +1,2 @@\n+OK\n+OK\ndiff --git a/tests/queries/0_stateless/03250_client_default_bool_cli_settings_with_no_value_to_true.sh b/tests/queries/0_stateless/03250_client_default_bool_cli_settings_with_no_value_to_true.sh\nnew file mode 100755\nindex 000000000000..d975a6b4970a\n--- /dev/null\n+++ b/tests/queries/0_stateless/03250_client_default_bool_cli_settings_with_no_value_to_true.sh\n@@ -0,0 +1,9 @@\n+#!/usr/bin/env bash\n+# Tags: no-fasttest\n+\n+CUR_DIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CUR_DIR\"/../shell_config.sh\n+\n+$CLICKHOUSE_CLIENT --optimize_aggregation_in_order --query \"SELECT value FROM system.settings WHERE name = 'optimize_aggregation_in_order'\" 2>&1 | grep -q \"1\" && echo \"OK\" || echo \"FAIL\"\n+$CLICKHOUSE_CLIENT --optimize_aggregation_in_order false --query \"SELECT value FROM system.settings WHERE name = 'optimize_aggregation_in_order'\" 2>&1 | grep -q \"0\" && echo \"OK\" || echo \"FAIL\"\n",
  "problem_statement": "If a command-line argument has no value, and it is a setting with Bool type, assume it has value true.\n```\r\nclickhouse-client --optimize_aggregation_in_order --query \"SELECT ...\"\r\n```\n",
  "hints_text": "Hi, I'd like to work on this issue\n@davidtsuk, this is amazing, looking forward to seeing a pull request!\nI have a quick question, should this apply only to settings specified in [Settings.cpp](https://github.com/ClickHouse/ClickHouse/blob/8e5781e68b226debdb1c624d9b8ca7125cec6b28/src/Core/Settings.cpp#L54) or should settings such as `--highlight` also behave this way?\nIn the scope of this task it is enough to only apply to settings from Settings.cpp.",
  "created_at": "2024-10-08T02:35:01Z",
  "modified_files": [
    "src/Core/BaseSettingsProgramOptions.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03250_client_default_bool_cli_settings_with_no_value_to_true.reference",
    "b/tests/queries/0_stateless/03250_client_default_bool_cli_settings_with_no_value_to_true.sh"
  ]
}