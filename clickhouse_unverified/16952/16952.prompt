You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
incorrect comparisons between DateTime64(3) and DateTime64(6), `DateTime64(6)` field always bigger than `DateTime64(3)` even when it is not 
**Describe the bug**
`DateTime64(6)` field always bigger than `DateTime64(3)`  
it breaks behavior for
queries like `datetime64_3 BETWEEN datetime64_6_min AND datetime64_6_max`

**How to reproduce**
* Which ClickHouse server version to use
docker `yandex/clickhouse-server:latest`

* Queries to run that lead to unexpected result
```sql
SELECT toDateTime64('2020-11-04 00:00:00.000000',6) < toDateTime64('2020-11-04 23:59:59.999',3);
```
**Expected behavior**
return 1

**Actual behavior**
return 0

**Additional context**
```sql
SELECT toDateTime64('2020-11-04 00:00:00.000000', 3) < toDateTime64('2020-11-04 23:59:59.999', 3)
```
return 1 as expected

types converted right
```sql
SELECT toDateTime64('2020-11-04 00:00:00.000000',6) d64_6, toTypeName(d64_6);
┌──────────────────────d64_6─┬─toTypeName(toDateTime64('2020-11-04 00:00:00.000000', 6))─┐
│ 2020-11-04 00:00:00.000000 │ DateTime64(6)                                             │
└────────────────────────────┴───────────────────────────────────────────────────────────┘

SELECT toDateTime64('2020-11-04 00:00:00.000000',3) d64_3, toTypeName(d64_3);

┌───────────────────d64_3─┬─toTypeName(toDateTime64('2020-11-04 00:00:00.000000', 3))─┐
│ 2020-11-04 00:00:00.000 │ DateTime64(3)                                             │
└─────────────────────────┴───────────────────────────────────────────────────────────┘
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
