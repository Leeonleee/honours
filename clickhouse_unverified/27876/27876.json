{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 27876,
  "instance_id": "ClickHouse__ClickHouse-27876",
  "issue_numbers": [
    "27679"
  ],
  "base_commit": "9ef45d92c28381ae5b325c7e3c0b0cd499717522",
  "patch": "diff --git a/src/Parsers/ExpressionElementParsers.cpp b/src/Parsers/ExpressionElementParsers.cpp\nindex 16f2b720b4a3..a79b3e51e16f 100644\n--- a/src/Parsers/ExpressionElementParsers.cpp\n+++ b/src/Parsers/ExpressionElementParsers.cpp\n@@ -850,15 +850,24 @@ static bool isOneOf(TokenType token)\n     return ((token == tokens) || ...);\n }\n \n-\n bool ParserCastOperator::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)\n {\n-    /// Parse numbers (including decimals), strings and arrays of them.\n+    /// Parse numbers (including decimals), strings, arrays and tuples of them.\n \n     const char * data_begin = pos->begin;\n     const char * data_end = pos->end;\n     bool is_string_literal = pos->type == TokenType::StringLiteral;\n-    if (pos->type == TokenType::Number || is_string_literal)\n+\n+    if (pos->type == TokenType::Minus)\n+    {\n+        ++pos;\n+        if (pos->type != TokenType::Number)\n+            return false;\n+\n+        data_end = pos->end;\n+        ++pos;\n+    }\n+    else if (pos->type == TokenType::Number || is_string_literal)\n     {\n         ++pos;\n     }\n@@ -876,7 +885,7 @@ bool ParserCastOperator::parseImpl(Pos & pos, ASTPtr & node, Expected & expected\n             }\n             else if (pos->type == TokenType::ClosingSquareBracket)\n             {\n-                if (isOneOf<TokenType::Comma, TokenType::OpeningRoundBracket>(last_token))\n+                if (isOneOf<TokenType::Comma, TokenType::OpeningRoundBracket, TokenType::Minus>(last_token))\n                     return false;\n                 if (stack.empty() || stack.back() != TokenType::OpeningSquareBracket)\n                     return false;\n@@ -884,7 +893,7 @@ bool ParserCastOperator::parseImpl(Pos & pos, ASTPtr & node, Expected & expected\n             }\n             else if (pos->type == TokenType::ClosingRoundBracket)\n             {\n-                if (isOneOf<TokenType::Comma, TokenType::OpeningSquareBracket>(last_token))\n+                if (isOneOf<TokenType::Comma, TokenType::OpeningSquareBracket, TokenType::Minus>(last_token))\n                     return false;\n                 if (stack.empty() || stack.back() != TokenType::OpeningRoundBracket)\n                     return false;\n@@ -892,10 +901,15 @@ bool ParserCastOperator::parseImpl(Pos & pos, ASTPtr & node, Expected & expected\n             }\n             else if (pos->type == TokenType::Comma)\n             {\n-                if (isOneOf<TokenType::OpeningSquareBracket, TokenType::OpeningRoundBracket, TokenType::Comma>(last_token))\n+                if (isOneOf<TokenType::OpeningSquareBracket, TokenType::OpeningRoundBracket, TokenType::Comma, TokenType::Minus>(last_token))\n                     return false;\n             }\n-            else if (isOneOf<TokenType::Number, TokenType::StringLiteral>(pos->type))\n+            else if (pos->type == TokenType::Number)\n+            {\n+                if (!isOneOf<TokenType::OpeningSquareBracket, TokenType::OpeningRoundBracket, TokenType::Comma, TokenType::Minus>(last_token))\n+                    return false;\n+            }\n+            else if (isOneOf<TokenType::StringLiteral, TokenType::Minus>(pos->type))\n             {\n                 if (!isOneOf<TokenType::OpeningSquareBracket, TokenType::OpeningRoundBracket, TokenType::Comma>(last_token))\n                     return false;\n@@ -915,6 +929,8 @@ bool ParserCastOperator::parseImpl(Pos & pos, ASTPtr & node, Expected & expected\n         if (!stack.empty())\n             return false;\n     }\n+    else\n+        return false;\n \n     ASTPtr type_ast;\n     if (ParserToken(TokenType::DoubleColon).ignore(pos, expected)\ndiff --git a/src/Parsers/ExpressionListParsers.cpp b/src/Parsers/ExpressionListParsers.cpp\nindex 58f5e7669050..3aa5c82884b6 100644\n--- a/src/Parsers/ExpressionListParsers.cpp\n+++ b/src/Parsers/ExpressionListParsers.cpp\n@@ -664,10 +664,12 @@ bool ParserUnaryExpression::parseImpl(Pos & pos, ASTPtr & node, Expected & expec\n \n     if (pos->type == TokenType::Minus)\n     {\n-        ParserLiteral lit_p;\n         Pos begin = pos;\n+        if (ParserCastOperator().parse(pos, node, expected))\n+            return true;\n \n-        if (lit_p.parse(pos, node, expected))\n+        pos = begin;\n+        if (ParserLiteral().parse(pos, node, expected))\n             return true;\n \n         pos = begin;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01852_cast_operator_3.reference b/tests/queries/0_stateless/01852_cast_operator_3.reference\nnew file mode 100644\nindex 000000000000..a1e54797d608\n--- /dev/null\n+++ b/tests/queries/0_stateless/01852_cast_operator_3.reference\n@@ -0,0 +1,10 @@\n+-1\n+SELECT CAST(\\'-1\\', \\'Int32\\')\n+-0.1\n+SELECT CAST(\\'-0.1\\', \\'Decimal(38, 38)\\')\n+-0.111\n+SELECT CAST(\\'-0.111\\', \\'Float64\\')\n+[-1,2,-3]\n+SELECT CAST(\\'[-1, 2, -3]\\', \\'Array(Int32)\\')\n+[-1.1,2,-3]\n+SELECT CAST(\\'[-1.1, 2, -3]\\', \\'Array(Float64)\\')\ndiff --git a/tests/queries/0_stateless/01852_cast_operator_3.sql b/tests/queries/0_stateless/01852_cast_operator_3.sql\nnew file mode 100644\nindex 000000000000..1ad015a8dc49\n--- /dev/null\n+++ b/tests/queries/0_stateless/01852_cast_operator_3.sql\n@@ -0,0 +1,14 @@\n+SELECT -1::Int32;\n+EXPLAIN SYNTAX SELECT -1::Int32;\n+\n+SELECT -0.1::Decimal(38, 38);\n+EXPLAIN SYNTAX SELECT -0.1::Decimal(38, 38);\n+\n+SELECT -0.111::Float64;\n+EXPLAIN SYNTAX SELECT -0.111::Float64;\n+\n+SELECT [-1, 2, -3]::Array(Int32);\n+EXPLAIN SYNTAX SELECT [-1, 2, -3]::Array(Int32);\n+\n+SELECT [-1.1, 2, -3]::Array(Float64);\n+EXPLAIN SYNTAX SELECT [-1.1, 2, -3]::Array(Float64);\ndiff --git a/tests/queries/0_stateless/01852_cast_operator_bad_cases.reference b/tests/queries/0_stateless/01852_cast_operator_bad_cases.reference\nindex 2c4517e0eda5..b179e5e927ad 100644\n--- a/tests/queries/0_stateless/01852_cast_operator_bad_cases.reference\n+++ b/tests/queries/0_stateless/01852_cast_operator_bad_cases.reference\n@@ -8,3 +8,11 @@ Syntax error\n Syntax error\n Syntax error\n Code: 6\n+Syntax error\n+Syntax error\n+Syntax error\n+Syntax error\n+Syntax error\n+Syntax error\n+Syntax error\n+Syntax error\ndiff --git a/tests/queries/0_stateless/01852_cast_operator_bad_cases.sh b/tests/queries/0_stateless/01852_cast_operator_bad_cases.sh\nindex f2f566b78c44..6c578a0996c1 100755\n--- a/tests/queries/0_stateless/01852_cast_operator_bad_cases.sh\n+++ b/tests/queries/0_stateless/01852_cast_operator_bad_cases.sh\n@@ -15,3 +15,13 @@ $CLICKHOUSE_CLIENT --query=\"SELECT [1 2]::Array(UInt8)\"  2>&1 | grep -o -m1 'Syn\n $CLICKHOUSE_CLIENT --query=\"SELECT 1 4::UInt32\"  2>&1 | grep -o 'Syntax error'\n $CLICKHOUSE_CLIENT --query=\"SELECT '1' '4'::UInt32\"  2>&1 | grep -o -m1 'Syntax error'\n $CLICKHOUSE_CLIENT --query=\"SELECT '1''4'::UInt32\"  2>&1 | grep -o -m1 'Code: 6'\n+\n+$CLICKHOUSE_CLIENT --query=\"SELECT ::UInt32\"  2>&1 | grep -o 'Syntax error'\n+$CLICKHOUSE_CLIENT --query=\"SELECT ::String\"  2>&1 | grep -o 'Syntax error'\n+$CLICKHOUSE_CLIENT --query=\"SELECT -::Int32\"  2>&1 | grep -o 'Syntax error'\n+\n+$CLICKHOUSE_CLIENT --query=\"SELECT [1, -]::Array(Int32)\"  2>&1 | grep -o 'Syntax error'\n+$CLICKHOUSE_CLIENT --query=\"SELECT [1, 3-]::Array(Int32)\"  2>&1 | grep -o 'Syntax error'\n+$CLICKHOUSE_CLIENT --query=\"SELECT [-, 2]::Array(Int32)\"  2>&1 | grep -o 'Syntax error'\n+$CLICKHOUSE_CLIENT --query=\"SELECT [--, 2]::Array(Int32)\"  2>&1 | grep -o 'Syntax error'\n+$CLICKHOUSE_CLIENT --query=\"SELECT [1, 2]-::Array(Int32)\"  2>&1 | grep -o 'Syntax error'\n",
  "problem_statement": "PostgreSQL-style cast operator is not applicable for negative numeric literals, e.g. -1::INT\n```\r\nmilovidov-desktop :) SELECT -1::INT\r\n\r\nSyntax error: failed at position 10 ('::')\r\n```\n",
  "hints_text": "SELECT (-2)::INT works",
  "created_at": "2021-08-19T15:21:28Z"
}