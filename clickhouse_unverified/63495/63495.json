{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 63495,
  "instance_id": "ClickHouse__ClickHouse-63495",
  "issue_numbers": [
    "63494"
  ],
  "base_commit": "bf2edb972e897a9993e2a047c9666514c595876c",
  "patch": "diff --git a/utils/prepare-time-trace/prepare-time-trace.sh b/utils/prepare-time-trace/prepare-time-trace.sh\nindex 812928e8bd8c..2ecc1ddcd64f 100755\n--- a/utils/prepare-time-trace/prepare-time-trace.sh\n+++ b/utils/prepare-time-trace/prepare-time-trace.sh\n@@ -82,3 +82,35 @@ ORDER BY (date, file, pull_request_number, commit_sha, check_name);\n ///\n \n find \"$INPUT_DIR\" -type f -executable -or -name '*.o' -or -name '*.a' | grep -v cargo | xargs wc -c | grep -v 'total' > \"${OUTPUT_DIR}/binary_sizes.txt\"\n+\n+# Additionally, collect information about the symbols inside translation units\n+true<<///\n+CREATE TABLE binary_symbols\n+(\n+   -- Extra columns:\n+   pull_request_number UInt32,\n+   commit_sha String,\n+   check_start_time DateTime,\n+   check_name LowCardinality(String),\n+   instance_type LowCardinality(String),\n+   instance_id String,\n+\n+   -- Normal columns:\n+   file LowCardinality(String),\n+   library LowCardinality(String) DEFAULT extract(file, 'CMakeFiles/([^/]+)\\.dir/'),\n+   address UInt64,\n+   size UInt64,\n+   type FixedString(1),\n+   symbol LowCardinality(String),\n+   date Date DEFAULT toDate(time),\n+   time DateTime64(6) DEFAULT now64()\n+)\n+ENGINE = MergeTree\n+ORDER BY (date, file, symbol, pull_request_number, commit_sha, check_name);\n+///\n+\n+find \"$INPUT_DIR\" -type f -name '*.o' | grep -v cargo | find . -name '*.o' | xargs -P $(nproc) -I {} bash -c \"\n+  nm --demangle --defined-only --print-size '{}' | grep -v -P '[0-9a-zA-Z] r ' | sed 's@^@{} @' > '{}.symbols'\n+\"\n+\n+find \"$INPUT_DIR\" -type f -name '*.o.symbols' | xargs cat > \"${OUTPUT_DIR}/binary_symbols.txt\"\n",
  "test_patch": "diff --git a/tests/ci/ci.py b/tests/ci/ci.py\nindex d6b1866c563d..5f42309d4396 100644\n--- a/tests/ci/ci.py\n+++ b/tests/ci/ci.py\n@@ -1745,7 +1745,10 @@ def _upload_build_profile_data(\n         profile_data_file = Path(TEMP_PATH) / \"profile.json\"\n         with open(profile_data_file, \"wb\") as profile_fd:\n             for profile_source in profiles_dir.iterdir():\n-                if profile_source.name != \"binary_sizes.txt\":\n+                if profile_source.name not in (\n+                    \"binary_sizes.txt\",\n+                    \"binary_symbols.txt\",\n+                ):\n                     with open(profiles_dir / profile_source, \"rb\") as ps_fd:\n                         profile_fd.write(ps_fd.read())\n \n@@ -1787,7 +1790,42 @@ def _upload_build_profile_data(\n         try:\n             ch_helper.insert_file(url, auth, query, binary_sizes_file)\n         except InsertException:\n-            logging.error(\"Failed to insert binary_size_file for the build, continue\")\n+            logging.error(\"Failed to insert binary_sizes_file for the build, continue\")\n+\n+        query = f\"\"\"INSERT INTO binary_symbols\n+            (\n+                pull_request_number,\n+                commit_sha,\n+                check_start_time,\n+                check_name,\n+                instance_type,\n+                instance_id,\n+                file,\n+                address,\n+                size,\n+                type,\n+                symbol,\n+            )\n+            SELECT {pr_info.number}, '{pr_info.sha}', '{job_report.start_time}', '{build_name}', '{instance_type}', '{instance_id}',\n+                file, reinterpretAsUInt64(reverse(unhex(address))), reinterpretAsUInt64(reverse(unhex(size))), type, symbol\n+            FROM input('file String, address String, size String, type String, symbol String')\n+            SETTINGS format_regexp = '^([^ ]+) ([0-9a-fA-F]+)(?: ([0-9a-fA-F]+))? (.) (.+)$'\n+            FORMAT Regexp\"\"\"\n+\n+        binary_symbols_file = profiles_dir / \"binary_symbols.txt\"\n+\n+        print(\n+            \"::notice ::Log Uploading binary symbols data, path: %s, size: %s, query: %s\",\n+            binary_symbols_file,\n+            binary_symbols_file.stat().st_size,\n+            query,\n+        )\n+        try:\n+            ch_helper.insert_file(url, auth, query, binary_symbols_file)\n+        except InsertException:\n+            logging.error(\n+                \"Failed to insert binary_symbols_file for the build, continue\"\n+            )\n \n \n def _add_build_to_version_history(\n",
  "problem_statement": "Write information about symbols in every compiled translation unit to the CI database\nSomething like \r\n```\r\n$ find . -name '*.o' | xargs nm --demangle --defined-only --print-size | grep -v -P '[0-9a-zA-Z] r '\r\n```\r\n\r\nThe current number of them is `1438632`.\r\n\r\nIt will help to transform symbol-based coverage to file-based coverage.\n",
  "hints_text": "",
  "created_at": "2024-05-08T02:11:30Z"
}