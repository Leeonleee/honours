{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 34208,
  "instance_id": "ClickHouse__ClickHouse-34208",
  "issue_numbers": [
    "34206"
  ],
  "base_commit": "3a0ed0f8f505640270b426d26d816549e528a443",
  "patch": "diff --git a/src/IO/parseDateTimeBestEffort.cpp b/src/IO/parseDateTimeBestEffort.cpp\nindex 3b05d8c76b6a..3c6f9b8f9f5b 100644\n--- a/src/IO/parseDateTimeBestEffort.cpp\n+++ b/src/IO/parseDateTimeBestEffort.cpp\n@@ -194,7 +194,7 @@ ReturnType parseDateTimeBestEffortImpl(\n             }\n             else if (num_digits == 6)\n             {\n-                /// This is YYYYMM\n+                /// This is YYYYMM or hhmmss\n                 if (!year && !month)\n                 {\n                     readDecimalNumber<4>(year, digits);\n@@ -435,47 +435,59 @@ ReturnType parseDateTimeBestEffortImpl(\n             else if (c == '+' || c == '-')\n             {\n                 ++in.position();\n-                has_time_zone_offset = true;\n-                if (c == '-')\n-                    time_zone_offset_negative = true;\n-\n                 num_digits = readDigits(digits, sizeof(digits), in);\n \n-                if (num_digits == 4)\n-                {\n-                    readDecimalNumber<2>(time_zone_offset_hour, digits);\n-                    readDecimalNumber<2>(time_zone_offset_minute, digits + 2);\n-                }\n-                else if (num_digits == 3)\n-                {\n-                    readDecimalNumber<1>(time_zone_offset_hour, digits);\n-                    readDecimalNumber<2>(time_zone_offset_minute, digits + 1);\n-                }\n-                else if (num_digits == 2)\n-                {\n-                    readDecimalNumber<2>(time_zone_offset_hour, digits);\n-                }\n-                else if (num_digits == 1)\n+                if (num_digits == 6 && !has_time && year && month && day_of_month)\n                 {\n-                    readDecimalNumber<1>(time_zone_offset_hour, digits);\n+                    /// It looks like hhmmss\n+                    readDecimalNumber<2>(hour, digits);\n+                    readDecimalNumber<2>(minute, digits + 2);\n+                    readDecimalNumber<2>(second, digits + 4);\n+                    has_time = true;\n                 }\n                 else\n-                    return on_error(\"Cannot read DateTime: unexpected number of decimal digits for time zone offset: \" + toString(num_digits), ErrorCodes::CANNOT_PARSE_DATETIME);\n-\n-                if (num_digits < 3 && checkChar(':', in))\n                 {\n-                    num_digits = readDigits(digits, sizeof(digits), in);\n+                    /// It looks like time zone offset\n+                    has_time_zone_offset = true;\n+                    if (c == '-')\n+                        time_zone_offset_negative = true;\n \n-                    if (num_digits == 2)\n+                    if (num_digits == 4)\n                     {\n-                        readDecimalNumber<2>(time_zone_offset_minute, digits);\n+                        readDecimalNumber<2>(time_zone_offset_hour, digits);\n+                        readDecimalNumber<2>(time_zone_offset_minute, digits + 2);\n+                    }\n+                    else if (num_digits == 3)\n+                    {\n+                        readDecimalNumber<1>(time_zone_offset_hour, digits);\n+                        readDecimalNumber<2>(time_zone_offset_minute, digits + 1);\n+                    }\n+                    else if (num_digits == 2)\n+                    {\n+                        readDecimalNumber<2>(time_zone_offset_hour, digits);\n                     }\n                     else if (num_digits == 1)\n                     {\n-                        readDecimalNumber<1>(time_zone_offset_minute, digits);\n+                        readDecimalNumber<1>(time_zone_offset_hour, digits);\n                     }\n                     else\n-                        return on_error(\"Cannot read DateTime: unexpected number of decimal digits for time zone offset in minutes: \" + toString(num_digits), ErrorCodes::CANNOT_PARSE_DATETIME);\n+                        return on_error(\"Cannot read DateTime: unexpected number of decimal digits for time zone offset: \" + toString(num_digits), ErrorCodes::CANNOT_PARSE_DATETIME);\n+\n+                    if (num_digits < 3 && checkChar(':', in))\n+                    {\n+                        num_digits = readDigits(digits, sizeof(digits), in);\n+\n+                        if (num_digits == 2)\n+                        {\n+                            readDecimalNumber<2>(time_zone_offset_minute, digits);\n+                        }\n+                        else if (num_digits == 1)\n+                        {\n+                            readDecimalNumber<1>(time_zone_offset_minute, digits);\n+                        }\n+                        else\n+                            return on_error(\"Cannot read DateTime: unexpected number of decimal digits for time zone offset in minutes: \" + toString(num_digits), ErrorCodes::CANNOT_PARSE_DATETIME);\n+                    }\n                 }\n             }\n             else\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02191_parse_date_time_best_effort_more_cases.reference b/tests/queries/0_stateless/02191_parse_date_time_best_effort_more_cases.reference\nnew file mode 100644\nindex 000000000000..227e3b013b28\n--- /dev/null\n+++ b/tests/queries/0_stateless/02191_parse_date_time_best_effort_more_cases.reference\n@@ -0,0 +1,10 @@\n+2022-01-01 01:02:03\n+2022-01-01 01:02:03\n+2022-01-01 01:02:03\n+2022-01-01 01:02:03\n+2022-01-01 01:02:00\n+2022-01-01 01:02:00\n+2021-12-31 22:58:00\n+2022-01-01 02:02:03\n+2022-01-01 00:02:03\n+2022-01-01 02:02:03\ndiff --git a/tests/queries/0_stateless/02191_parse_date_time_best_effort_more_cases.sql b/tests/queries/0_stateless/02191_parse_date_time_best_effort_more_cases.sql\nnew file mode 100644\nindex 000000000000..d30834b90a3b\n--- /dev/null\n+++ b/tests/queries/0_stateless/02191_parse_date_time_best_effort_more_cases.sql\n@@ -0,0 +1,10 @@\n+SELECT parseDateTimeBestEffort('20220101-010203', 'UTC');\n+SELECT parseDateTimeBestEffort('20220101+010203', 'UTC');\n+SELECT parseDateTimeBestEffort('20220101 010203', 'UTC');\n+SELECT parseDateTimeBestEffort('20220101T010203', 'UTC');\n+SELECT parseDateTimeBestEffort('20220101T01:02', 'UTC');\n+SELECT parseDateTimeBestEffort('20220101-0102', 'UTC');\n+SELECT parseDateTimeBestEffort('20220101+0102', 'UTC');\n+SELECT parseDateTimeBestEffort('20220101-010203-01', 'UTC');\n+SELECT parseDateTimeBestEffort('20220101-010203+0100', 'UTC');\n+SELECT parseDateTimeBestEffort('20220101-010203-01:00', 'UTC');\n",
  "problem_statement": "parseDateTimeBestEffort can support format `yymmdd-hhmmss`\n**Describe the issue**\r\n```\r\nmilovidov-desktop :) SELECT parseDateTimeBestEffort('20220101-010203')\r\n\r\nSELECT parseDateTimeBestEffort('20220101-010203')\r\n\r\n\r\n0 rows in set. Elapsed: 0.153 sec. \r\n\r\nReceived exception:\r\nCode: 41. DB::Exception: Cannot read DateTime: unexpected number of decimal digits for time zone offset: 6: While processing parseDateTimeBestEffort('20220101-010203'). (CANNOT_PARSE_DATETIME)\r\n```\n",
  "hints_text": "",
  "created_at": "2022-02-01T00:31:21Z"
}