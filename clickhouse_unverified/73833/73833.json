{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 73833,
  "instance_id": "ClickHouse__ClickHouse-73833",
  "issue_numbers": [
    "59524"
  ],
  "base_commit": "77afa117920c53e6b4f81e51c7d5449cf3810c69",
  "patch": "diff --git a/base/base/CMakeLists.txt b/base/base/CMakeLists.txt\nindex 3d236f52c365..a0cd41a086aa 100644\n--- a/base/base/CMakeLists.txt\n+++ b/base/base/CMakeLists.txt\n@@ -35,6 +35,7 @@ set (SRCS\n     safeExit.cpp\n     throwError.cpp\n     Numa.cpp\n+    ask.cpp\n     GitHash.generated.cpp\n )\n \ndiff --git a/base/base/ask.cpp b/base/base/ask.cpp\nnew file mode 100644\nindex 000000000000..ddedf19c8371\n--- /dev/null\n+++ b/base/base/ask.cpp\n@@ -0,0 +1,21 @@\n+#include <base/ask.h>\n+\n+#include <iostream>\n+\n+\n+bool ask(std::string question)\n+{\n+    while (true)\n+    {\n+        std::string answer;\n+        std::cout << question;\n+        std::getline(std::cin, answer);\n+        if (!std::cin.good())\n+            return false;\n+\n+        if (answer.empty() || answer == \"n\" || answer == \"N\")\n+            return false;\n+        if (answer == \"y\" || answer == \"Y\")\n+            return true;\n+    }\n+}\ndiff --git a/base/base/ask.h b/base/base/ask.h\nnew file mode 100644\nindex 000000000000..71ece296c60d\n--- /dev/null\n+++ b/base/base/ask.h\n@@ -0,0 +1,4 @@\n+#include <string>\n+\n+/// Ask a question in the terminal and expect either 'y' or 'n' as an answer.\n+[[nodiscard]] bool ask(std::string question);\ndiff --git a/programs/install/Install.cpp b/programs/install/Install.cpp\nindex 281d0e45aa98..885c788e0d35 100644\n--- a/programs/install/Install.cpp\n+++ b/programs/install/Install.cpp\n@@ -2,6 +2,7 @@\n #include <filesystem>\n #include <boost/program_options.hpp>\n #include <Common/filesystemHelpers.h>\n+#include <base/ask.h>\n \n #include <sys/stat.h>\n #include <pwd.h>\n@@ -118,23 +119,6 @@ static auto executeScript(const std::string & command, bool throw_on_error = fal\n     return sh->tryWait();\n }\n \n-static bool ask(std::string question)\n-{\n-    while (true)\n-    {\n-        std::string answer;\n-        std::cout << question;\n-        std::getline(std::cin, answer);\n-        if (!std::cin.good())\n-            return false;\n-\n-        if (answer.empty() || answer == \"n\" || answer == \"N\")\n-            return false;\n-        if (answer == \"y\" || answer == \"Y\")\n-            return true;\n-    }\n-}\n-\n static bool filesEqual(std::string path1, std::string path2)\n {\n     MMapReadBufferFromFile in1(path1, 0);\ndiff --git a/src/Client/ClientBase.cpp b/src/Client/ClientBase.cpp\nindex 89a0e87cb15c..3564a6812c32 100644\n--- a/src/Client/ClientBase.cpp\n+++ b/src/Client/ClientBase.cpp\n@@ -6,7 +6,6 @@\n #include <Client/TestHint.h>\n #include <Client/TestTags.h>\n \n-#include <base/safeExit.h>\n #include <Core/Block.h>\n #include <Core/Protocol.h>\n #include <Common/DateLUT.h>\n@@ -32,7 +31,6 @@\n #include <Parsers/ASTCreateQuery.h>\n #include <Parsers/ASTCreateFunctionQuery.h>\n #include <Parsers/Access/ASTCreateUserQuery.h>\n-#include <Parsers/Access/ASTAuthenticationData.h>\n #include <Parsers/ASTDropQuery.h>\n #include <Parsers/ASTExplainQuery.h>\n #include <Parsers/ASTSelectQuery.h>\n@@ -81,6 +79,7 @@\n \n #include <Common/config_version.h>\n #include <base/find_symbols.h>\n+#include <base/ask.h>\n #include \"config.h\"\n #include <IO/ReadHelpers.h>\n #include <Processors/Formats/Impl/ValuesBlockInputFormat.h>\n@@ -272,7 +271,7 @@ static void incrementProfileEventsBlock(Block & dst, const Block & src)\n }\n \n /// To cancel the query on local format error.\n-class LocalFormatError : public DB::Exception\n+class LocalFormatError : public Exception\n {\n public:\n     using Exception::Exception;\n@@ -579,10 +578,9 @@ try\n             out_buf = std_out.get();\n         }\n \n-        String current_format = default_output_format;\n-\n         select_into_file = false;\n         select_into_file_and_stdout = false;\n+        String current_format = default_output_format;\n         /// The query can specify output format or output file.\n         if (const auto * query_with_output = dynamic_cast<const ASTQueryWithOutput *>(parsed_query.get()))\n         {\n@@ -674,6 +672,23 @@ try\n                 current_format, out_file_buf ? *out_file_buf : *out_buf, block);\n \n         output_format->setAutoFlush();\n+\n+        if ((!select_into_file || select_into_file_and_stdout)\n+            && stdout_is_a_tty\n+            && stdin_is_a_tty\n+            && !FormatFactory::instance().checkIfOutputFormatIsTTYFriendly(current_format))\n+        {\n+            stopKeystrokeInterceptorIfExists();\n+            SCOPE_EXIT({ startKeystrokeInterceptorIfExists(); });\n+\n+            if (!ask(fmt::format(R\"(The requested output format `{}` is binary and could produce side-effects when output directly into the terminal.\n+If you want to output it into a file, use the \"INTO OUTFILE\" modifier in the query or redirect the output of the shell command.\n+Do you want to output it anyway? [y/N] )\", current_format)))\n+            {\n+                output_format = std::make_shared<NullOutputFormat>(block);\n+            }\n+            *std_out << '\\n';\n+        }\n     }\n }\n catch (...)\n@@ -1963,15 +1978,7 @@ void ClientBase::cancelQuery()\n {\n     connection->sendCancel();\n \n-    if (keystroke_interceptor)\n-        try\n-        {\n-            keystroke_interceptor->stopIntercept();\n-        }\n-        catch (const DB::Exception &)\n-        {\n-            error_stream << getCurrentExceptionMessage(false);\n-        }\n+    stopKeystrokeInterceptorIfExists();\n \n     if (need_render_progress && tty_buf)\n     {\n@@ -2664,7 +2671,7 @@ void ClientBase::startKeystrokeInterceptorIfExists()\n         {\n             keystroke_interceptor->startIntercept();\n         }\n-        catch (const DB::Exception &)\n+        catch (const Exception &)\n         {\n             error_stream << getCurrentExceptionMessage(false);\n             keystroke_interceptor.reset();\ndiff --git a/src/Formats/FormatFactory.cpp b/src/Formats/FormatFactory.cpp\nindex 68999700bf8f..a1ccfe18631a 100644\n--- a/src/Formats/FormatFactory.cpp\n+++ b/src/Formats/FormatFactory.cpp\n@@ -839,6 +839,14 @@ void FormatFactory::markOutputFormatPrefersLargeBlocks(const String & name)\n     target = true;\n }\n \n+void FormatFactory::markOutputFormatNotTTYFriendly(const String & name)\n+{\n+    auto & target = getOrCreateCreators(name).is_tty_friendly;\n+    if (!target)\n+        throw Exception(ErrorCodes::LOGICAL_ERROR, \"FormatFactory: Format {} is already marked as non-TTY-friendly\", name);\n+    target = false;\n+}\n+\n bool FormatFactory::checkIfFormatSupportsSubsetOfColumns(const String & name, const ContextPtr & context, const std::optional<FormatSettings> & format_settings_) const\n {\n     const auto & target = getCreators(name);\n@@ -900,6 +908,12 @@ bool FormatFactory::checkIfOutputFormatPrefersLargeBlocks(const String & name) c\n     return target.prefers_large_blocks;\n }\n \n+bool FormatFactory::checkIfOutputFormatIsTTYFriendly(const String & name) const\n+{\n+    const auto & target = getCreators(name);\n+    return target.is_tty_friendly;\n+}\n+\n bool FormatFactory::checkParallelizeOutputAfterReading(const String & name, const ContextPtr & context) const\n {\n     auto format_name = boost::to_lower_copy(name);\ndiff --git a/src/Formats/FormatFactory.h b/src/Formats/FormatFactory.h\nindex ad0dd30a60c5..c961d9dab22e 100644\n--- a/src/Formats/FormatFactory.h\n+++ b/src/Formats/FormatFactory.h\n@@ -141,6 +141,7 @@ class FormatFactory final : private boost::noncopyable\n         ExternalSchemaReaderCreator external_schema_reader_creator;\n         bool supports_parallel_formatting{false};\n         bool prefers_large_blocks{false};\n+        bool is_tty_friendly{true}; /// If false, client will ask before output in the terminal.\n         NonTrivialPrefixAndSuffixChecker non_trivial_prefix_and_suffix_checker;\n         AppendSupportChecker append_support_checker;\n         AdditionalInfoForSchemaCacheGetter additional_info_for_schema_cache_getter;\n@@ -237,6 +238,7 @@ class FormatFactory final : private boost::noncopyable\n \n     void markOutputFormatSupportsParallelFormatting(const String & name);\n     void markOutputFormatPrefersLargeBlocks(const String & name);\n+    void markOutputFormatNotTTYFriendly(const String & name);\n \n     void markFormatSupportsSubsetOfColumns(const String & name);\n     void registerSubsetOfColumnsSupportChecker(const String & name, SubsetOfColumnsSupportChecker subset_of_columns_support_checker);\n@@ -246,6 +248,7 @@ class FormatFactory final : private boost::noncopyable\n     bool checkIfFormatHasExternalSchemaReader(const String & name) const;\n     bool checkIfFormatHasAnySchemaReader(const String & name) const;\n     bool checkIfOutputFormatPrefersLargeBlocks(const String & name) const;\n+    bool checkIfOutputFormatIsTTYFriendly(const String & name) const;\n \n     bool checkParallelizeOutputAfterReading(const String & name, const ContextPtr & context) const;\n \ndiff --git a/src/Processors/Formats/Impl/ArrowBlockOutputFormat.cpp b/src/Processors/Formats/Impl/ArrowBlockOutputFormat.cpp\nindex 42ff26b0f9dc..ce913ece99bc 100644\n--- a/src/Processors/Formats/Impl/ArrowBlockOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/ArrowBlockOutputFormat.cpp\n@@ -131,6 +131,7 @@ void registerOutputFormatArrow(FormatFactory & factory)\n             return std::make_shared<ArrowBlockOutputFormat>(buf, sample, false, format_settings);\n         });\n     factory.markFormatHasNoAppendSupport(\"Arrow\");\n+    factory.markOutputFormatNotTTYFriendly(\"Arrow\");\n \n     factory.registerOutputFormat(\n         \"ArrowStream\",\n@@ -142,6 +143,7 @@ void registerOutputFormatArrow(FormatFactory & factory)\n         });\n     factory.markFormatHasNoAppendSupport(\"ArrowStream\");\n     factory.markOutputFormatPrefersLargeBlocks(\"ArrowStream\");\n+    factory.markOutputFormatNotTTYFriendly(\"ArrowStream\");\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/AvroRowOutputFormat.cpp b/src/Processors/Formats/Impl/AvroRowOutputFormat.cpp\nindex e505d545f17d..486c18540097 100644\n--- a/src/Processors/Formats/Impl/AvroRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/AvroRowOutputFormat.cpp\n@@ -634,6 +634,7 @@ void registerOutputFormatAvro(FormatFactory & factory)\n         return std::make_shared<AvroRowOutputFormat>(buf, sample, settings);\n     });\n     factory.markFormatHasNoAppendSupport(\"Avro\");\n+    factory.markOutputFormatNotTTYFriendly(\"Avro\");\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/BSONEachRowRowOutputFormat.cpp b/src/Processors/Formats/Impl/BSONEachRowRowOutputFormat.cpp\nindex 4fb200255324..afdfeb644245 100644\n--- a/src/Processors/Formats/Impl/BSONEachRowRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/BSONEachRowRowOutputFormat.cpp\n@@ -543,6 +543,7 @@ void registerOutputFormatBSONEachRow(FormatFactory & factory)\n         [](WriteBuffer & buf, const Block & sample, const FormatSettings & _format_settings)\n         { return std::make_shared<BSONEachRowRowOutputFormat>(buf, sample, _format_settings); });\n     factory.markOutputFormatSupportsParallelFormatting(\"BSONEachRow\");\n+    factory.markOutputFormatNotTTYFriendly(\"BSONEachRow\");\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/BinaryRowOutputFormat.cpp b/src/Processors/Formats/Impl/BinaryRowOutputFormat.cpp\nindex d4c2348d0804..06953d405ad8 100644\n--- a/src/Processors/Formats/Impl/BinaryRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/BinaryRowOutputFormat.cpp\n@@ -70,6 +70,10 @@ void registerOutputFormatRowBinary(FormatFactory & factory)\n     };\n \n     registerWithNamesAndTypes(\"RowBinary\", register_func);\n+\n+    factory.markOutputFormatNotTTYFriendly(\"RowBinary\");\n+    factory.markOutputFormatNotTTYFriendly(\"RowBinaryWithNames\");\n+    factory.markOutputFormatNotTTYFriendly(\"RowBinaryWithNamesAndTypes\");\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/CapnProtoRowOutputFormat.cpp b/src/Processors/Formats/Impl/CapnProtoRowOutputFormat.cpp\nindex 1784763022cd..f56ddd00e197 100644\n--- a/src/Processors/Formats/Impl/CapnProtoRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/CapnProtoRowOutputFormat.cpp\n@@ -59,6 +59,7 @@ void registerOutputFormatCapnProto(FormatFactory & factory)\n                 CapnProtoSchemaInfo(format_settings, \"CapnProto\", sample, format_settings.capn_proto.use_autogenerated_schema),\n                 format_settings);\n     });\n+    factory.markOutputFormatNotTTYFriendly(\"CapnProto\");\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/MsgPackRowOutputFormat.cpp b/src/Processors/Formats/Impl/MsgPackRowOutputFormat.cpp\nindex 12bbd35b77b7..ea8940f67fec 100644\n--- a/src/Processors/Formats/Impl/MsgPackRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/MsgPackRowOutputFormat.cpp\n@@ -305,6 +305,7 @@ void registerOutputFormatMsgPack(FormatFactory & factory)\n         return std::make_shared<MsgPackRowOutputFormat>(buf, sample, settings);\n     });\n     factory.markOutputFormatSupportsParallelFormatting(\"MsgPack\");\n+    factory.markOutputFormatNotTTYFriendly(\"MsgPack\");\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/MySQLOutputFormat.cpp b/src/Processors/Formats/Impl/MySQLOutputFormat.cpp\nindex 08a6d19a7825..946dd93277dd 100644\n--- a/src/Processors/Formats/Impl/MySQLOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/MySQLOutputFormat.cpp\n@@ -143,6 +143,7 @@ void registerOutputFormatMySQLWire(FormatFactory & factory)\n         [](WriteBuffer & buf,\n            const Block & sample,\n            const FormatSettings & settings) { return std::make_shared<MySQLOutputFormat>(buf, sample, settings); });\n+    factory.markOutputFormatNotTTYFriendly(\"MySQLWire\");\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/NativeFormat.cpp b/src/Processors/Formats/Impl/NativeFormat.cpp\nindex 022cb38596b6..f473a0554ab3 100644\n--- a/src/Processors/Formats/Impl/NativeFormat.cpp\n+++ b/src/Processors/Formats/Impl/NativeFormat.cpp\n@@ -142,6 +142,7 @@ void registerOutputFormatNative(FormatFactory & factory)\n     {\n         return std::make_shared<NativeOutputFormat>(buf, sample, settings, settings.client_protocol_version);\n     });\n+    factory.markOutputFormatNotTTYFriendly(\"Native\");\n }\n \n \ndiff --git a/src/Processors/Formats/Impl/NpyOutputFormat.cpp b/src/Processors/Formats/Impl/NpyOutputFormat.cpp\nindex e02787b4f704..766ba6a5a7f8 100644\n--- a/src/Processors/Formats/Impl/NpyOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/NpyOutputFormat.cpp\n@@ -264,6 +264,7 @@ void registerOutputFormatNpy(FormatFactory & factory)\n         return std::make_shared<NpyOutputFormat>(buf, sample);\n     });\n     factory.markFormatHasNoAppendSupport(\"Npy\");\n+    factory.markOutputFormatNotTTYFriendly(\"Npy\");\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/ODBCDriver2BlockOutputFormat.cpp b/src/Processors/Formats/Impl/ODBCDriver2BlockOutputFormat.cpp\nindex 7c0428834e0d..8c5746c83a2f 100644\n--- a/src/Processors/Formats/Impl/ODBCDriver2BlockOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/ODBCDriver2BlockOutputFormat.cpp\n@@ -101,6 +101,7 @@ void registerOutputFormatODBCDriver2(FormatFactory & factory)\n         {\n             return std::make_shared<ODBCDriver2BlockOutputFormat>(buf, sample, format_settings);\n         });\n+    factory.markOutputFormatNotTTYFriendly(\"ODBCDriver2\");\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/ORCBlockOutputFormat.cpp b/src/Processors/Formats/Impl/ORCBlockOutputFormat.cpp\nindex 1a9791a7b4e8..4d629199d228 100644\n--- a/src/Processors/Formats/Impl/ORCBlockOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/ORCBlockOutputFormat.cpp\n@@ -586,6 +586,7 @@ void registerOutputFormatORC(FormatFactory & factory)\n     });\n     factory.markFormatHasNoAppendSupport(\"ORC\");\n     factory.markOutputFormatPrefersLargeBlocks(\"ORC\");\n+    factory.markOutputFormatNotTTYFriendly(\"ORC\");\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/ParquetBlockOutputFormat.cpp b/src/Processors/Formats/Impl/ParquetBlockOutputFormat.cpp\nindex 7140c0eda2a5..ee44b09e91f8 100644\n--- a/src/Processors/Formats/Impl/ParquetBlockOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/ParquetBlockOutputFormat.cpp\n@@ -599,6 +599,7 @@ void registerOutputFormatParquet(FormatFactory & factory)\n             return std::make_shared<ParquetBlockOutputFormat>(buf, sample, format_settings);\n         });\n     factory.markFormatHasNoAppendSupport(\"Parquet\");\n+    factory.markOutputFormatNotTTYFriendly(\"Parquet\");\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/PostgreSQLOutputFormat.cpp b/src/Processors/Formats/Impl/PostgreSQLOutputFormat.cpp\nindex 4ac874b883d1..1cc11f551a20 100644\n--- a/src/Processors/Formats/Impl/PostgreSQLOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/PostgreSQLOutputFormat.cpp\n@@ -68,5 +68,7 @@ void registerOutputFormatPostgreSQLWire(FormatFactory & factory)\n         [](WriteBuffer & buf,\n            const Block & sample,\n            const FormatSettings & settings) { return std::make_shared<PostgreSQLOutputFormat>(buf, sample, settings); });\n+    factory.markOutputFormatNotTTYFriendly(\"PostgreSQLWire\");\n }\n+\n }\ndiff --git a/src/Processors/Formats/Impl/ProtobufListOutputFormat.cpp b/src/Processors/Formats/Impl/ProtobufListOutputFormat.cpp\nindex 8a7d52b9c285..fcc993df8e1c 100644\n--- a/src/Processors/Formats/Impl/ProtobufListOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/ProtobufListOutputFormat.cpp\n@@ -60,6 +60,7 @@ void registerOutputFormatProtobufList(FormatFactory & factory)\n                 settings.protobuf.output_nullables_with_google_wrappers,\n                 settings.protobuf.google_protos_path);\n         });\n+    factory.markOutputFormatNotTTYFriendly(\"ProtobufList\");\n }\n \n }\ndiff --git a/src/Processors/Formats/Impl/ProtobufRowOutputFormat.cpp b/src/Processors/Formats/Impl/ProtobufRowOutputFormat.cpp\nindex 4a83aa2f9215..af65d8f999d0 100644\n--- a/src/Processors/Formats/Impl/ProtobufRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/ProtobufRowOutputFormat.cpp\n@@ -54,8 +54,9 @@ void registerOutputFormatProtobuf(FormatFactory & factory)\n {\n     for (bool with_length_delimiter : {false, true})\n     {\n+        const char * name = with_length_delimiter ? \"Protobuf\" : \"ProtobufSingle\";\n         factory.registerOutputFormat(\n-            with_length_delimiter ? \"Protobuf\" : \"ProtobufSingle\",\n+            name,\n             [with_length_delimiter](WriteBuffer & buf,\n                const Block & header,\n                const FormatSettings & settings)\n@@ -64,6 +65,7 @@ void registerOutputFormatProtobuf(FormatFactory & factory)\n                     buf, header, ProtobufSchemaInfo(settings, \"Protobuf\", header, settings.protobuf.use_autogenerated_schema),\n                     settings, with_length_delimiter);\n             });\n+        factory.markOutputFormatNotTTYFriendly(name);\n     }\n }\n \ndiff --git a/src/Storages/System/StorageSystemFormats.cpp b/src/Storages/System/StorageSystemFormats.cpp\nindex 3c6a19c4f95b..d3fbb4c54ed9 100644\n--- a/src/Storages/System/StorageSystemFormats.cpp\n+++ b/src/Storages/System/StorageSystemFormats.cpp\n@@ -15,6 +15,7 @@ ColumnsDescription StorageSystemFormats::getColumnsDescription()\n         {\"is_output\", std::make_shared<DataTypeUInt8>(), \"Flag that indicates whether the format is suitable for data output.\"},\n         {\"supports_parallel_parsing\", std::make_shared<DataTypeUInt8>(), \"Flag that indicates whether the format supports parallel parsing.\"},\n         {\"supports_parallel_formatting\", std::make_shared<DataTypeUInt8>(), \"Flag that indicates whether the format supports parallel formatting.\"},\n+        {\"is_tty_friendly\", std::make_shared<DataTypeUInt8>(), \"Flag that indicates whether the format usually displays fine in the terminal. For other formats, CLI will ask before output.\"},\n     };\n }\n \n@@ -25,16 +26,16 @@ void StorageSystemFormats::fillData(MutableColumns & res_columns, ContextPtr, co\n     {\n         const auto & [name, creators] = pair;\n         String format_name = creators.name;\n-        UInt64 has_input_format(creators.input_creator != nullptr || creators.random_access_input_creator != nullptr);\n-        UInt64 has_output_format(creators.output_creator != nullptr);\n-        UInt64 supports_parallel_parsing(creators.file_segmentation_engine_creator != nullptr || creators.random_access_input_creator != nullptr);\n-        UInt64 supports_parallel_formatting(creators.supports_parallel_formatting);\n+        bool has_input_format(creators.input_creator != nullptr || creators.random_access_input_creator != nullptr);\n+        bool has_output_format(creators.output_creator != nullptr);\n+        bool supports_parallel_parsing(creators.file_segmentation_engine_creator != nullptr || creators.random_access_input_creator != nullptr);\n \n         res_columns[0]->insert(format_name);\n         res_columns[1]->insert(has_input_format);\n         res_columns[2]->insert(has_output_format);\n         res_columns[3]->insert(supports_parallel_parsing);\n-        res_columns[4]->insert(supports_parallel_formatting);\n+        res_columns[4]->insert(creators.supports_parallel_formatting);\n+        res_columns[5]->insert(creators.is_tty_friendly);\n     }\n }\n \ndiff --git a/utils/check-style/check-style b/utils/check-style/check-style\nindex 901330e0015d..d53c06c5e52d 100755\n--- a/utils/check-style/check-style\n+++ b/utils/check-style/check-style\n@@ -315,6 +315,7 @@ std_cerr_cout_excludes=(\n     /tests/\n     _fuzzer\n     # OK\n+    base/base/ask.cpp\n     src/Common/ProgressIndication.cpp\n     src/Common/ProgressTable.cpp\n     # only under #ifdef DBMS_HASH_MAP_DEBUG_RESIZES, that is used only in tests\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02117_show_create_table_system.reference b/tests/queries/0_stateless/02117_show_create_table_system.reference\nindex 3fd431ed11ae..ee7cc3ca7fa1 100644\n--- a/tests/queries/0_stateless/02117_show_create_table_system.reference\n+++ b/tests/queries/0_stateless/02117_show_create_table_system.reference\n@@ -282,7 +282,8 @@ CREATE TABLE system.formats\n     `is_input` UInt8,\n     `is_output` UInt8,\n     `supports_parallel_parsing` UInt8,\n-    `supports_parallel_formatting` UInt8\n+    `supports_parallel_formatting` UInt8,\n+    `is_tty_friendly` UInt8\n )\n ENGINE = SystemFormats\n COMMENT 'Contains a list of all the formats along with flags whether a format is suitable for input/output or whether it supports parallelization.'\ndiff --git a/tests/queries/0_stateless/02537_system_formats.reference b/tests/queries/0_stateless/02537_system_formats.reference\nindex 5987834d9b95..ab1da5a6107d 100644\n--- a/tests/queries/0_stateless/02537_system_formats.reference\n+++ b/tests/queries/0_stateless/02537_system_formats.reference\n@@ -1,2 +1,2 @@\n-CSV\t1\t1\t1\t1\n-Native\t1\t1\t0\t0\n+CSV\t1\t1\t1\t1\t1\n+Native\t1\t1\t0\t0\t0\ndiff --git a/tests/queries/0_stateless/03237_sticky_error_client.expect b/tests/queries/0_stateless/03237_sticky_error_client.expect\nindex cfcda3819f50..879269a54e65 100755\n--- a/tests/queries/0_stateless/03237_sticky_error_client.expect\n+++ b/tests/queries/0_stateless/03237_sticky_error_client.expect\n@@ -1,4 +1,5 @@\n #!/usr/bin/expect -f\n+# Tags: no-fasttest\n \n set basedir [file dirname $argv0]\n set basename [file tail $argv0]\n@@ -25,6 +26,8 @@ spawn bash -c \"source $basedir/../shell_config.sh ; \\$CLICKHOUSE_CLIENT_BINARY \\\n \n expect \":) \"\n send -- \"SELECT generateUUIDv4() FORMAT Arrow;\\r\"\n+expect \"Do you want to output it anyway\\?\"\n+send -- \"y\\r\"\n expect \":) \"\n send -- \"SELECT 1;\\r\"\n expect \"1 row in set.\"\ndiff --git a/tests/queries/0_stateless/03292_format_tty_friendly.reference b/tests/queries/0_stateless/03292_format_tty_friendly.reference\nnew file mode 100644\nindex 000000000000..339a01fe257d\n--- /dev/null\n+++ b/tests/queries/0_stateless/03292_format_tty_friendly.reference\n@@ -0,0 +1,23 @@\n+Arrow\t1\t0\n+ArrowStream\t1\t0\n+Avro\t1\t0\n+BSONEachRow\t1\t0\n+CapnProto\t1\t0\n+JSON\t1\t1\n+JSONEachRow\t1\t1\n+MsgPack\t1\t0\n+MySQLWire\t1\t0\n+Native\t1\t0\n+Npy\t1\t0\n+ODBCDriver2\t1\t0\n+ORC\t1\t0\n+Parquet\t1\t0\n+PostgreSQLWire\t1\t0\n+Pretty\t1\t1\n+Protobuf\t1\t0\n+ProtobufList\t1\t0\n+ProtobufSingle\t1\t0\n+RowBinary\t1\t0\n+RowBinaryWithNames\t1\t0\n+RowBinaryWithNamesAndTypes\t1\t0\n+TSV\t1\t1\ndiff --git a/tests/queries/0_stateless/03292_format_tty_friendly.sql b/tests/queries/0_stateless/03292_format_tty_friendly.sql\nnew file mode 100644\nindex 000000000000..5ba6f8271e09\n--- /dev/null\n+++ b/tests/queries/0_stateless/03292_format_tty_friendly.sql\n@@ -0,0 +1,5 @@\n+-- Tags: no-fasttest\n+\n+SELECT name, is_output, is_tty_friendly FROM system.formats WHERE name IN ('Pretty', 'TSV', 'JSON', 'JSONEachRow',\n+'ODBCDriver2', 'Parquet', 'Arrow', 'BSONEachRow', 'Protobuf', 'ProtobufList', 'ProtobufSingle', 'CapnProto', 'Npy', 'ArrowStream', 'ORC', 'MsgPack', 'Avro', 'RowBinary', 'RowBinaryWithNames', 'RowBinaryWithNamesAndTypes', 'Native', 'MySQLWire', 'PostgreSQLWire')\n+ORDER BY name;\ndiff --git a/tests/queries/0_stateless/03293_tty_binary_confirmation.expect b/tests/queries/0_stateless/03293_tty_binary_confirmation.expect\nnew file mode 100755\nindex 000000000000..bf0b50cc7616\n--- /dev/null\n+++ b/tests/queries/0_stateless/03293_tty_binary_confirmation.expect\n@@ -0,0 +1,61 @@\n+#!/usr/bin/expect -f\n+# Tags: no-fasttest\n+\n+set basedir [file dirname $argv0]\n+set basename [file tail $argv0]\n+if {[info exists env(CLICKHOUSE_TMP)]} {\n+    set CLICKHOUSE_TMP $env(CLICKHOUSE_TMP)\n+} else {\n+    set CLICKHOUSE_TMP \".\"\n+}\n+exp_internal -f $CLICKHOUSE_TMP/$basename.debuglog 0\n+set history_file $CLICKHOUSE_TMP/$basename.history\n+\n+log_user 0\n+set timeout 60\n+match_max 100000\n+\n+expect_after {\n+    # Do not ignore eof from expect\n+    -i $any_spawn_id eof { exp_continue }\n+    # A default timeout action is to do nothing, change it to fail\n+    -i $any_spawn_id timeout { exit 1 }\n+}\n+\n+# useful debugging configuration\n+# exp_internal 1\n+\n+spawn bash -c \"source $basedir/../shell_config.sh ; \\$CLICKHOUSE_CLIENT_BINARY \\$CLICKHOUSE_CLIENT_OPT --disable_suggestion --enable-progress-table-toggle=0 --highlight 0 --history_file=$history_file\"\n+expect \":) \"\n+\n+# Make a query\n+send -- \"SELECT 1 FORMAT Parquet\\r\"\n+expect \"is binary and could produce side-effects\"\n+expect \"Do you want to output it anyway\\?\"\n+send -- \"y\\r\"\n+\n+expect \"PAR\"\n+expect \":) \"\n+\n+send -- \"SELECT 1 FORMAT Parquet\\r\"\n+expect \"is binary and could produce side-effects\"\n+expect \"Do you want to output it anyway\\?\"\n+send -- \"n\\r\"\n+\n+expect {\n+    \"PAR\" { exit 1 }\n+    \":) \" { send -- \"\\r\" }\n+}\n+\n+send -- \"SELECT 1 FORMAT Parquet\\r\"\n+expect \"is binary and could produce side-effects\"\n+expect \"Do you want to output it anyway\\?\"\n+send -- \"\\r\"\n+\n+expect {\n+    \"PAR\" { exit 1 }\n+    \":) \" { send -- \"\\r\" }\n+}\n+\n+send -- \"exit\\r\"\n+expect eof\ndiff --git a/tests/queries/0_stateless/03293_tty_binary_confirmation.reference b/tests/queries/0_stateless/03293_tty_binary_confirmation.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\n",
  "problem_statement": "If the data format is binary, ask before outputting in terminal if the stdout is a terminal.\n**Use case**\r\n\r\nA user writes `clickhouse-local --output-format Parquet`, but forgot to write a `> file` redirection.\r\n\n",
  "hints_text": "",
  "created_at": "2024-12-25T12:32:59Z"
}