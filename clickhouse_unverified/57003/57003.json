{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 57003,
  "instance_id": "ClickHouse__ClickHouse-57003",
  "issue_numbers": [
    "56762"
  ],
  "base_commit": "753b22f64c1a4161a123aa5d53962cf12a358cb7",
  "patch": "diff --git a/src/AggregateFunctions/AggregateFunctionLargestTriangleThreeBuckets.cpp b/src/AggregateFunctions/AggregateFunctionLargestTriangleThreeBuckets.cpp\nindex 83fc4f80c488..850a7c688ad8 100644\n--- a/src/AggregateFunctions/AggregateFunctionLargestTriangleThreeBuckets.cpp\n+++ b/src/AggregateFunctions/AggregateFunctionLargestTriangleThreeBuckets.cpp\n@@ -16,6 +16,7 @@\n #include <IO/ReadHelpers.h>\n #include <Common/PODArray.h>\n #include <Common/assert_cast.h>\n+#include <base/types.h>\n \n #include <boost/math/distributions/normal.hpp>\n \n@@ -99,31 +100,39 @@ struct LargestTriangleThreeBucketsData : public StatisticalSample<Float64, Float\n         }\n \n         // Find the size of each bucket\n-        size_t single_bucket_size = this->x.size() / total_buckets;\n+        Float64 single_bucket_size = static_cast<Float64>(this->x.size() - 2) / static_cast<Float64>(total_buckets - 2);\n \n         // Include the first data point\n         result.emplace_back(std::make_pair(this->x[0], this->y[0]));\n \n-        for (size_t i = 1; i < total_buckets - 1; ++i) // Skip the first and last bucket\n+        // the start index of current bucket\n+        size_t start_index = 1;\n+        // the end index of current bucket, also is the start index of next bucket\n+        size_t center_index = start_index + static_cast<int>(floor(single_bucket_size));\n+\n+        for (size_t i = 0; i < total_buckets - 2; ++i) // Skip the first and last bucket\n         {\n-            size_t start_index = i * single_bucket_size;\n-            size_t end_index = (i + 1) * single_bucket_size;\n+            // the end index of next bucket\n+            size_t end_index = 1 + static_cast<int>(floor(single_bucket_size * (i + 2)));\n+            // current bucket is the last bucket\n+            if (end_index > this->x.size())\n+                end_index = this->x.size();\n \n             // Compute the average point in the next bucket\n             Float64 avg_x = 0;\n             Float64 avg_y = 0;\n-            for (size_t j = end_index; j < (i + 2) * single_bucket_size; ++j)\n+            for (size_t j = center_index; j < end_index; ++j)\n             {\n                 avg_x += this->x[j];\n                 avg_y += this->y[j];\n             }\n-            avg_x /= single_bucket_size;\n-            avg_y /= single_bucket_size;\n+            avg_x /= static_cast<Float64>(end_index - center_index);\n+            avg_y /= static_cast<Float64>(end_index - center_index);\n \n             // Find the point in the current bucket that forms the largest triangle\n             size_t max_index = start_index;\n             Float64 max_area = 0.0;\n-            for (size_t j = start_index; j < end_index; ++j)\n+            for (size_t j = start_index; j < center_index; ++j)\n             {\n                 Float64 area = std::abs(\n                     0.5\n@@ -138,6 +147,9 @@ struct LargestTriangleThreeBucketsData : public StatisticalSample<Float64, Float\n \n             // Include the selected point\n             result.emplace_back(std::make_pair(this->x[max_index], this->y[max_index]));\n+\n+            start_index = center_index;\n+            center_index = end_index;\n         }\n \n         // Include the last data point\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02842_largestTriangleThreeBuckets_aggregate_function.reference b/tests/queries/0_stateless/02842_largestTriangleThreeBuckets_aggregate_function.reference\nindex b4407dea13aa..cf7f77642531 100644\n--- a/tests/queries/0_stateless/02842_largestTriangleThreeBuckets_aggregate_function.reference\n+++ b/tests/queries/0_stateless/02842_largestTriangleThreeBuckets_aggregate_function.reference\n@@ -1,7 +1,17 @@\n []\n [(1,10)]\n [(1,10),(10,70)]\n-[(1,10),(3,15),(5,40),(10,70)]\n-[(0.02,0.16),(0.06,0.73),(0.08,0.88),(0.09,0),(0.11,0.31),(0.15,0.09),(0.19,0.27),(0.2,0.24),(0.21,0.46),(0.23,0.23),(0.25,0.34),(0.29,0.16),(0.36,0.99),(0.37,0.86),(0.38,0.75),(0.39,0.86),(0.41,0.63),(0.45,0.86),(0.47,0.06),(0.98,0.09)]\n-[('2023-01-14 00:00:00.000',35.96528042030847),('2023-03-15 00:00:00.000',98.77709508458238),('2023-06-05 00:00:00.000',8.107958052612418),('2023-09-29 00:00:00.000',80.05338096818797),('2023-12-31 00:00:00.000',98.52375935588333)]\n-[('2023-01-14 00:00:00.000',35.96528042030847),('2023-03-15 00:00:00.000',98.77709508458238),('2023-06-05 00:00:00.000',8.107958052612418),('2023-09-29 00:00:00.000',80.05338096818797),('2023-12-31 00:00:00.000',98.52375935588333)]\n+[(1,10),(3,15),(9,55),(10,70)]\n+[(0.02,0.16),(0.08,0.88),(0.09,0),(0.15,0.09),(0.21,0.46),(0.23,0.23),(0.29,0.16),(0.37,0.86),(0.39,0.86),(0.47,0.06),(0.48,0.57),(0.52,0.11),(0.6,0.64),(0.63,0.25),(0.7,0.25),(0.73,0.95),(0.83,0.67),(0.87,0.15),(0.91,0.62),(0.98,0.09)]\n+[('2023-01-14 00:00:00.000',35.96528042030847),('2023-03-15 00:00:00.000',98.77709508458238),('2023-06-05 00:00:00.000',8.107958052612418),('2023-12-18 00:00:00.000',12.832032764204616),('2023-12-31 00:00:00.000',98.52375935588333)]\n+[('2023-01-14 00:00:00.000',35.96528042030847),('2023-03-15 00:00:00.000',98.77709508458238),('2023-06-05 00:00:00.000',8.107958052612418),('2023-12-18 00:00:00.000',12.832032764204616),('2023-12-31 00:00:00.000',98.52375935588333)]\n+(9908,908)\t9908\t10\n+(9918,918)\t9918\t10\n+(9928,928)\t9928\t10\n+(9938,938)\t9938\t10\n+(9948,948)\t9948\t10\n+(9958,958)\t9958\t10\n+(9968,968)\t9968\t10\n+(9978,978)\t9978\t10\n+(9988,988)\t9988\t10\n+(9999,999)\t9999\t11\ndiff --git a/tests/queries/0_stateless/02842_largestTriangleThreeBuckets_aggregate_function.sql b/tests/queries/0_stateless/02842_largestTriangleThreeBuckets_aggregate_function.sql\nindex 2eb8754cb64a..8a6a23589189 100644\n--- a/tests/queries/0_stateless/02842_largestTriangleThreeBuckets_aggregate_function.sql\n+++ b/tests/queries/0_stateless/02842_largestTriangleThreeBuckets_aggregate_function.sql\n@@ -44,4 +44,20 @@ select largestTriangleThreeBuckets(5)(x, y) from largestTriangleThreeBucketsTest\n \n select lttb(5)(x, y) from largestTriangleThreeBucketsTestDateTime64Float64;\n \n-drop table largestTriangleThreeBucketsTestDateTime64Float64;\n\\ No newline at end of file\n+drop table largestTriangleThreeBucketsTestDateTime64Float64;\n+\n+CREATE TABLE largestTriangleTreeBucketsBucketSizeTest\n+(\n+    x UInt32,\n+    y UInt32\n+) ENGINE = MergeTree ORDER BY x;\n+\n+INSERT INTO largestTriangleTreeBucketsBucketSizeTest (x, y) SELECT (number + 1) AS x, (x % 1000) AS y FROM numbers(9999);\n+\n+SELECT \n+  arrayJoin(lttb(1000)(x, y)) AS point, \n+  tupleElement(point, 1) AS point_x, \n+  point_x - neighbor(point_x, -1) AS point_x_diff_with_previous_row \n+FROM largestTriangleTreeBucketsBucketSizeTest LIMIT 990, 10;\n+\n+DROP TABLE largestTriangleTreeBucketsBucketSizeTest;\n\\ No newline at end of file\n",
  "problem_statement": "The last two points of largestTriangleThreeBuckets (lttb) have a large x-axis gap\nClickHouse version:\r\n23.10.3.5\r\n\r\nhttps://fiddle.clickhouse.com/9f7212b8-f033-4bae-aa0e-439d939782b6\r\n\r\n```sql\r\nCREATE TABLE lttb_test\r\n(\r\n    x UInt32,\r\n    y UInt32\r\n) ENGINE = MergeTree ORDER BY x;\r\n\r\nINSERT INTO lttb_test (x, y) SELECT (number + 1) AS x, (x % 1000) AS y FROM numbers(9999);\r\n\r\nSELECT \r\n  arrayJoin(lttb(1000)(x, y)) AS point, \r\n  tupleElement(point, 1) AS point_x, \r\n  point_x - neighbor(point_x, -1) AS point_x_diff_with_previous_row \r\nFROM lttb_test LIMIT 990, 10;\r\n```\r\n\r\nResult:\r\n```sql\r\n\u250c\u2500point\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500point_x\u2500\u252c\u2500point_x_diff_with_previous_row\u2500\u2510\r\n\u2502 (8911,911) \u2502    8911 \u2502                              9 \u2502\r\n\u2502 (8920,920) \u2502    8920 \u2502                              9 \u2502\r\n\u2502 (8929,929) \u2502    8929 \u2502                              9 \u2502\r\n\u2502 (8938,938) \u2502    8938 \u2502                              9 \u2502\r\n\u2502 (8947,947) \u2502    8947 \u2502                              9 \u2502\r\n\u2502 (8956,956) \u2502    8956 \u2502                              9 \u2502\r\n\u2502 (8965,965) \u2502    8965 \u2502                              9 \u2502\r\n\u2502 (8974,974) \u2502    8974 \u2502                              9 \u2502\r\n\u2502 (8991,991) \u2502    8991 \u2502                             17 \u2502\r\n\u2502 (9999,999) \u2502    9999 \u2502                           1008 \u2502 <-- The last two points have a large x-axis gap\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n```\r\nPlotting a line graph using X and Y of lttb yields the following results. Maybe we can make the x-axis sampling a little more even.\r\n![image](https://github.com/ClickHouse/ClickHouse/assets/8757243/f9e5571e-ced9-48ae-a844-f5c1f75a1dd7)\r\n\n",
  "hints_text": "",
  "created_at": "2023-11-20T16:47:57Z"
}