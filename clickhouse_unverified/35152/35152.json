{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 35152,
  "instance_id": "ClickHouse__ClickHouse-35152",
  "issue_numbers": [
    "16436"
  ],
  "base_commit": "39614e6e15d8c5a6f79b205131c6d0e9a8163abe",
  "patch": "diff --git a/docs/en/interfaces/formats.md b/docs/en/interfaces/formats.md\nindex 22c647bee138..8a0562383b67 100644\n--- a/docs/en/interfaces/formats.md\n+++ b/docs/en/interfaces/formats.md\n@@ -51,6 +51,7 @@ The supported formats are:\n | [PrettySpace](#prettyspace)                                                             | \u2717     | \u2714      |\n | [Protobuf](#protobuf)                                                                   | \u2714     | \u2714      |\n | [ProtobufSingle](#protobufsingle)                                                       | \u2714     | \u2714      |\n+| [ProtobufList](#protobuflist)                                                           | \u2714     | \u2714      |\n | [Avro](#data-format-avro)                                                               | \u2714     | \u2714      |\n | [AvroConfluent](#data-format-avro-confluent)                                            | \u2714     | \u2717      |\n | [Parquet](#data-format-parquet)                                                         | \u2714     | \u2714      |\n@@ -1230,7 +1231,38 @@ See also [how to read/write length-delimited protobuf messages in popular langua\n \n ## ProtobufSingle {#protobufsingle}\n \n-Same as [Protobuf](#protobuf) but for storing/parsing single Protobuf message without length delimiters.\n+Same as [Protobuf](#protobuf) but for storing/parsing a single Protobuf message without length delimiter.\n+As a result, only a single table row can be written/read.\n+\n+## ProtobufList {#protobuflist}\n+\n+Similar to Protobuf but rows are represented as a sequence of sub-messages contained in a message with fixed name \"Envelope\".\n+\n+Usage example:\n+\n+``` sql\n+SELECT * FROM test.table FORMAT ProtobufList SETTINGS format_schema = 'schemafile:MessageType'\n+```\n+\n+``` bash\n+cat protobuflist_messages.bin | clickhouse-client --query \"INSERT INTO test.table FORMAT ProtobufList SETTINGS format_schema='schemafile:MessageType'\"\n+```\n+\n+where the file `schemafile.proto` looks like this:\n+\n+``` capnp\n+syntax = \"proto3\";\n+\n+message Envelope {\n+  message MessageType {\n+    string name = 1;\n+    string surname = 2;\n+    uint32 birthDate = 3;\n+    repeated string phoneNumbers = 4;\n+  };\n+  MessageType row = 1;\n+};\n+```\n \n ## Avro {#data-format-avro}\n \ndiff --git a/src/Formats/ProtobufSchemas.cpp b/src/Formats/ProtobufSchemas.cpp\nindex 9f25f830e373..249737d18388 100644\n--- a/src/Formats/ProtobufSchemas.cpp\n+++ b/src/Formats/ProtobufSchemas.cpp\n@@ -24,7 +24,9 @@ ProtobufSchemas & ProtobufSchemas::instance()\n class ProtobufSchemas::ImporterWithSourceTree : public google::protobuf::compiler::MultiFileErrorCollector\n {\n public:\n-    explicit ImporterWithSourceTree(const String & schema_directory) : importer(&disk_source_tree, this)\n+    explicit ImporterWithSourceTree(const String & schema_directory, WithEnvelope with_envelope_)\n+        : importer(&disk_source_tree, this)\n+        , with_envelope(with_envelope_)\n     {\n         disk_source_tree.MapPath(\"\", schema_directory);\n     }\n@@ -39,16 +41,33 @@ class ProtobufSchemas::ImporterWithSourceTree : public google::protobuf::compile\n             return descriptor;\n \n         const auto * file_descriptor = importer.Import(schema_path);\n-        // If there are parsing errors AddError() throws an exception and in this case the following line\n+        // If there are parsing errors, AddError() throws an exception and in this case the following line\n         // isn't executed.\n         assert(file_descriptor);\n \n-        descriptor = file_descriptor->FindMessageTypeByName(message_name);\n-        if (!descriptor)\n-            throw Exception(\n-                \"Not found a message named '\" + message_name + \"' in the schema file '\" + schema_path + \"'\", ErrorCodes::BAD_ARGUMENTS);\n-\n-        return descriptor;\n+        if (with_envelope == WithEnvelope::No)\n+        {\n+            const auto * message_descriptor = file_descriptor->FindMessageTypeByName(message_name);\n+            if (!message_descriptor)\n+                throw Exception(\n+                    \"Could not find a message named '\" + message_name + \"' in the schema file '\" + schema_path + \"'\", ErrorCodes::BAD_ARGUMENTS);\n+\n+            return message_descriptor;\n+        }\n+        else\n+        {\n+            const auto * envelope_descriptor = file_descriptor->FindMessageTypeByName(\"Envelope\");\n+            if (!envelope_descriptor)\n+                throw Exception(\n+                    \"Could not find a message named 'Envelope' in the schema file '\" + schema_path + \"'\", ErrorCodes::BAD_ARGUMENTS);\n+\n+            const auto * message_descriptor = envelope_descriptor->FindNestedTypeByName(message_name); // silly protobuf API disallows a restricting the field type to messages\n+            if (!message_descriptor)\n+                throw Exception(\n+                    \"Could not find a message named '\" + message_name + \"' in the schema file '\" + schema_path + \"'\", ErrorCodes::BAD_ARGUMENTS);\n+\n+            return message_descriptor;\n+        }\n     }\n \n private:\n@@ -63,18 +82,16 @@ class ProtobufSchemas::ImporterWithSourceTree : public google::protobuf::compile\n \n     google::protobuf::compiler::DiskSourceTree disk_source_tree;\n     google::protobuf::compiler::Importer importer;\n+    const WithEnvelope with_envelope;\n };\n \n \n-ProtobufSchemas::ProtobufSchemas() = default;\n-ProtobufSchemas::~ProtobufSchemas() = default;\n-\n-const google::protobuf::Descriptor * ProtobufSchemas::getMessageTypeForFormatSchema(const FormatSchemaInfo & info)\n+const google::protobuf::Descriptor * ProtobufSchemas::getMessageTypeForFormatSchema(const FormatSchemaInfo & info, WithEnvelope with_envelope)\n {\n     std::lock_guard lock(mutex);\n     auto it = importers.find(info.schemaDirectory());\n     if (it == importers.end())\n-        it = importers.emplace(info.schemaDirectory(), std::make_unique<ImporterWithSourceTree>(info.schemaDirectory())).first;\n+        it = importers.emplace(info.schemaDirectory(), std::make_unique<ImporterWithSourceTree>(info.schemaDirectory(), with_envelope)).first;\n     auto * importer = it->second.get();\n     return importer->import(info.schemaPath(), info.messageName());\n }\ndiff --git a/src/Formats/ProtobufSchemas.h b/src/Formats/ProtobufSchemas.h\nindex 0a2eeea98934..40e386b46422 100644\n--- a/src/Formats/ProtobufSchemas.h\n+++ b/src/Formats/ProtobufSchemas.h\n@@ -28,14 +28,36 @@ class FormatSchemaInfo;\n class ProtobufSchemas : private boost::noncopyable\n {\n public:\n-    static ProtobufSchemas & instance();\n+    enum class WithEnvelope\n+    {\n+        // Return descriptor for a top-level message with a user-provided name.\n+        // Example: In protobuf schema\n+        //   message MessageType {\n+        //     string colA = 1;\n+        //     int32 colB = 2;\n+        //   }\n+        // message_name = \"MessageType\" returns a descriptor. Used by IO\n+        // formats Protobuf and ProtobufSingle.\n+        No,\n+        // Return descriptor for a message with a user-provided name one level\n+        // below a top-level message with the hardcoded name \"Envelope\".\n+        // Example: In protobuf schema\n+        //   message Envelope {\n+        //     message MessageType {\n+        //       string colA = 1;\n+        //       int32 colB = 2;\n+        //     }\n+        //   }\n+        // message_name = \"MessageType\" returns a descriptor. Used by IO format\n+        // ProtobufList.\n+        Yes\n+    };\n \n-    ProtobufSchemas();\n-    ~ProtobufSchemas();\n+    static ProtobufSchemas & instance();\n \n     /// Parses the format schema, then parses the corresponding proto file, and returns the descriptor of the message type.\n     /// The function never returns nullptr, it throws an exception if it cannot load or parse the file.\n-    const google::protobuf::Descriptor * getMessageTypeForFormatSchema(const FormatSchemaInfo & info);\n+    const google::protobuf::Descriptor * getMessageTypeForFormatSchema(const FormatSchemaInfo & info, WithEnvelope with_envelope);\n \n private:\n     class ImporterWithSourceTree;\ndiff --git a/src/Formats/ProtobufSerializer.cpp b/src/Formats/ProtobufSerializer.cpp\nindex 389d25a1f467..b44342d0ca5b 100644\n--- a/src/Formats/ProtobufSerializer.cpp\n+++ b/src/Formats/ProtobufSerializer.cpp\n@@ -2171,6 +2171,11 @@ namespace\n                 field_index_by_field_tag.emplace(field_infos[i].field_tag, i);\n         }\n \n+        void setHasEnvelopeAsParent()\n+        {\n+            has_envelope_as_parent = true;\n+        }\n+\n         void setColumns(const ColumnPtr * columns_, size_t num_columns_) override\n         {\n             if (!num_columns_)\n@@ -2217,7 +2222,7 @@ namespace\n \n         void writeRow(size_t row_num) override\n         {\n-            if (parent_field_descriptor)\n+            if (parent_field_descriptor || has_envelope_as_parent)\n                 writer->startNestedMessage();\n             else\n                 writer->startMessage();\n@@ -2236,13 +2241,17 @@ namespace\n                 bool is_group = (parent_field_descriptor->type() == FieldTypeId::TYPE_GROUP);\n                 writer->endNestedMessage(parent_field_descriptor->number(), is_group, should_skip_if_empty);\n             }\n+            else if (has_envelope_as_parent)\n+            {\n+                writer->endNestedMessage(1, false, should_skip_if_empty);\n+            }\n             else\n                 writer->endMessage(with_length_delimiter);\n         }\n \n         void readRow(size_t row_num) override\n         {\n-            if (parent_field_descriptor)\n+            if (parent_field_descriptor || has_envelope_as_parent)\n                 reader->startNestedMessage();\n             else\n                 reader->startMessage(with_length_delimiter);\n@@ -2285,7 +2294,7 @@ namespace\n                 }\n             }\n \n-            if (parent_field_descriptor)\n+            if (parent_field_descriptor || has_envelope_as_parent)\n                 reader->endNestedMessage();\n             else\n                 reader->endMessage(false);\n@@ -2375,6 +2384,7 @@ namespace\n         };\n \n         const FieldDescriptor * const parent_field_descriptor;\n+        bool has_envelope_as_parent = false;\n         const bool with_length_delimiter;\n         const std::unique_ptr<RowInputMissingColumnsFiller> missing_columns_filler;\n         const bool should_skip_if_empty;\n@@ -2388,6 +2398,86 @@ namespace\n         size_t last_field_index = static_cast<size_t>(-1);\n     };\n \n+    /// Serializes a top-level envelope message in the protobuf schema.\n+    /// \"Envelope\" means that the contained subtree of serializers is enclosed in a message just once,\n+    /// i.e. only when the first and the last row read/write trigger a read/write of the msg header.\n+    class ProtobufSerializerEnvelope : public ProtobufSerializer\n+    {\n+    public:\n+        ProtobufSerializerEnvelope(\n+            std::unique_ptr<ProtobufSerializerMessage>&& serializer_,\n+            const ProtobufReaderOrWriter & reader_or_writer_)\n+            : serializer(std::move(serializer_))\n+            , reader(reader_or_writer_.reader)\n+            , writer(reader_or_writer_.writer)\n+        {\n+            // The inner serializer has a backreference of type protobuf::FieldDescriptor * to it's parent\n+            // serializer. If it is unset, it considers itself the top-level message, otherwise a nested\n+            // message and accordingly it makes start/endMessage() vs. startEndNestedMessage() calls into\n+            // Protobuf(Writer|Reader). There is no field descriptor because Envelopes merely forward calls\n+            // but don't contain data to be serialized. We must still force the inner serializer to act\n+            // as nested message.\n+            serializer->setHasEnvelopeAsParent();\n+        }\n+\n+        void setColumns(const ColumnPtr * columns_, size_t num_columns_) override\n+        {\n+            serializer->setColumns(columns_, num_columns_);\n+        }\n+\n+        void setColumns(const MutableColumnPtr * columns_, size_t num_columns_) override\n+        {\n+            serializer->setColumns(columns_, num_columns_);\n+        }\n+\n+        void writeRow(size_t row_num) override\n+        {\n+            if (first_call_of_write_row)\n+            {\n+                writer->startMessage();\n+                first_call_of_write_row = false;\n+            }\n+\n+            serializer->writeRow(row_num);\n+        }\n+\n+        void finalizeWrite() override\n+        {\n+            writer->endMessage(/*with_length_delimiter = */ true);\n+        }\n+\n+        void readRow(size_t row_num) override\n+        {\n+            if (first_call_of_read_row)\n+            {\n+                reader->startMessage(/*with_length_delimiter = */ true);\n+                first_call_of_read_row = false;\n+            }\n+\n+            int field_tag;\n+            [[maybe_unused]] bool ret = reader->readFieldNumber(field_tag);\n+            assert(ret);\n+\n+            serializer->readRow(row_num);\n+        }\n+\n+        void insertDefaults(size_t row_num) override\n+        {\n+            serializer->insertDefaults(row_num);\n+        }\n+\n+        void describeTree(WriteBuffer & out, size_t indent) const override\n+        {\n+            writeIndent(out, indent) << \"ProtobufSerializerEnvelope ->\\n\";\n+            serializer->describeTree(out, indent + 1);\n+        }\n+\n+        std::unique_ptr<ProtobufSerializerMessage> serializer;\n+        ProtobufReader * const reader;\n+        ProtobufWriter * const writer;\n+        bool first_call_of_write_row = true;\n+        bool first_call_of_read_row = true;\n+    };\n \n     /// Serializes a tuple with explicit names as a nested message.\n     class ProtobufSerializerTupleAsNestedMessage : public ProtobufSerializer\n@@ -2610,7 +2700,8 @@ namespace\n             const DataTypes & data_types,\n             std::vector<size_t> & missing_column_indices,\n             const MessageDescriptor & message_descriptor,\n-            bool with_length_delimiter)\n+            bool with_length_delimiter,\n+            bool with_envelope)\n         {\n             root_serializer_ptr = std::make_shared<ProtobufSerializer *>();\n             get_root_desc_function = [root_serializer_ptr = root_serializer_ptr](size_t indent) -> String\n@@ -2648,13 +2739,23 @@ namespace\n             boost::range::set_difference(collections::range(column_names.size()), used_column_indices_sorted,\n                                          std::back_inserter(missing_column_indices));\n \n-            *root_serializer_ptr = message_serializer.get();\n-\n+            if (!with_envelope)\n+            {\n+                *root_serializer_ptr = message_serializer.get();\n #if 0\n-            LOG_INFO(&Poco::Logger::get(\"ProtobufSerializer\"), \"Serialization tree:\\n{}\", get_root_desc_function(0));\n+                LOG_INFO(&Poco::Logger::get(\"ProtobufSerializer\"), \"Serialization tree:\\n{}\", get_root_desc_function(0));\n #endif\n-\n-            return message_serializer;\n+                return message_serializer;\n+            }\n+            else\n+            {\n+                auto envelope_serializer = std::make_unique<ProtobufSerializerEnvelope>(std::move(message_serializer), reader_or_writer);\n+                *root_serializer_ptr = envelope_serializer.get();\n+#if 0\n+                LOG_INFO(&Poco::Logger::get(\"ProtobufSerializer\"), \"Serialization tree:\\n{}\", get_root_desc_function(0));\n+#endif\n+                return envelope_serializer;\n+            }\n         }\n \n     private:\n@@ -3337,9 +3438,10 @@ std::unique_ptr<ProtobufSerializer> ProtobufSerializer::create(\n     std::vector<size_t> & missing_column_indices,\n     const google::protobuf::Descriptor & message_descriptor,\n     bool with_length_delimiter,\n+    bool with_envelope,\n     ProtobufReader & reader)\n {\n-    return ProtobufSerializerBuilder(reader).buildMessageSerializer(column_names, data_types, missing_column_indices, message_descriptor, with_length_delimiter);\n+    return ProtobufSerializerBuilder(reader).buildMessageSerializer(column_names, data_types, missing_column_indices, message_descriptor, with_length_delimiter, with_envelope);\n }\n \n std::unique_ptr<ProtobufSerializer> ProtobufSerializer::create(\n@@ -3347,10 +3449,11 @@ std::unique_ptr<ProtobufSerializer> ProtobufSerializer::create(\n     const DataTypes & data_types,\n     const google::protobuf::Descriptor & message_descriptor,\n     bool with_length_delimiter,\n+    bool with_envelope,\n     ProtobufWriter & writer)\n {\n     std::vector<size_t> missing_column_indices;\n-    return ProtobufSerializerBuilder(writer).buildMessageSerializer(column_names, data_types, missing_column_indices, message_descriptor, with_length_delimiter);\n+    return ProtobufSerializerBuilder(writer).buildMessageSerializer(column_names, data_types, missing_column_indices, message_descriptor, with_length_delimiter, with_envelope);\n }\n \n NamesAndTypesList protobufSchemaToCHSchema(const google::protobuf::Descriptor * message_descriptor)\ndiff --git a/src/Formats/ProtobufSerializer.h b/src/Formats/ProtobufSerializer.h\nindex d9bed913517e..6ebb50cc636c 100644\n--- a/src/Formats/ProtobufSerializer.h\n+++ b/src/Formats/ProtobufSerializer.h\n@@ -26,6 +26,7 @@ class ProtobufSerializer\n \n     virtual void setColumns(const ColumnPtr * columns, size_t num_columns) = 0;\n     virtual void writeRow(size_t row_num) = 0;\n+    virtual void finalizeWrite() {}\n \n     virtual void setColumns(const MutableColumnPtr * columns, size_t num_columns) = 0;\n     virtual void readRow(size_t row_num) = 0;\n@@ -39,6 +40,7 @@ class ProtobufSerializer\n         std::vector<size_t> & missing_column_indices,\n         const google::protobuf::Descriptor & message_descriptor,\n         bool with_length_delimiter,\n+        bool with_envelope,\n         ProtobufReader & reader);\n \n     static std::unique_ptr<ProtobufSerializer> create(\n@@ -46,6 +48,7 @@ class ProtobufSerializer\n         const DataTypes & data_types,\n         const google::protobuf::Descriptor & message_descriptor,\n         bool with_length_delimiter,\n+        bool with_envelope,\n         ProtobufWriter & writer);\n };\n \ndiff --git a/src/Formats/registerFormats.cpp b/src/Formats/registerFormats.cpp\nindex b7b3b51cd7bb..f6faa605ba81 100644\n--- a/src/Formats/registerFormats.cpp\n+++ b/src/Formats/registerFormats.cpp\n@@ -36,6 +36,8 @@ void registerInputFormatJSONCompactEachRow(FormatFactory & factory);\n void registerOutputFormatJSONCompactEachRow(FormatFactory & factory);\n void registerInputFormatProtobuf(FormatFactory & factory);\n void registerOutputFormatProtobuf(FormatFactory & factory);\n+void registerInputFormatProtobufList(FormatFactory & factory);\n+void registerOutputFormatProtobufList(FormatFactory & factory);\n void registerInputFormatTemplate(FormatFactory & factory);\n void registerOutputFormatTemplate(FormatFactory & factory);\n void registerInputFormatMsgPack(FormatFactory & factory);\n@@ -96,6 +98,7 @@ void registerNativeSchemaReader(FormatFactory & factory);\n void registerRowBinaryWithNamesAndTypesSchemaReader(FormatFactory & factory);\n void registerAvroSchemaReader(FormatFactory & factory);\n void registerProtobufSchemaReader(FormatFactory & factory);\n+void registerProtobufListSchemaReader(FormatFactory & factory);\n void registerLineAsStringSchemaReader(FormatFactory & factory);\n void registerJSONAsStringSchemaReader(FormatFactory & factory);\n void registerRawBLOBSchemaReader(FormatFactory & factory);\n@@ -138,6 +141,8 @@ void registerFormats()\n     registerInputFormatJSONCompactEachRow(factory);\n     registerOutputFormatJSONCompactEachRow(factory);\n     registerInputFormatProtobuf(factory);\n+    registerOutputFormatProtobufList(factory);\n+    registerInputFormatProtobufList(factory);\n     registerOutputFormatProtobuf(factory);\n     registerInputFormatTemplate(factory);\n     registerOutputFormatTemplate(factory);\n@@ -195,6 +200,7 @@ void registerFormats()\n     registerRowBinaryWithNamesAndTypesSchemaReader(factory);\n     registerAvroSchemaReader(factory);\n     registerProtobufSchemaReader(factory);\n+    registerProtobufListSchemaReader(factory);\n     registerLineAsStringSchemaReader(factory);\n     registerJSONAsStringSchemaReader(factory);\n     registerRawBLOBSchemaReader(factory);\ndiff --git a/src/Processors/Formats/Impl/ProtobufListInputFormat.cpp b/src/Processors/Formats/Impl/ProtobufListInputFormat.cpp\nnew file mode 100644\nindex 000000000000..42b329fd8798\n--- /dev/null\n+++ b/src/Processors/Formats/Impl/ProtobufListInputFormat.cpp\n@@ -0,0 +1,97 @@\n+#include \"ProtobufListInputFormat.h\"\n+\n+#if USE_PROTOBUF\n+#   include <Core/Block.h>\n+#   include <Formats/FormatFactory.h>\n+#   include <Formats/ProtobufReader.h>\n+#   include <Formats/ProtobufSchemas.h>\n+#   include <Formats/ProtobufSerializer.h>\n+\n+namespace DB\n+{\n+\n+ProtobufListInputFormat::ProtobufListInputFormat(ReadBuffer & in_, const Block & header_, const Params & params_, const FormatSchemaInfo & schema_info_)\n+    : IRowInputFormat(header_, in_, params_)\n+    , reader(std::make_unique<ProtobufReader>(in_))\n+    , serializer(ProtobufSerializer::create(\n+        header_.getNames(),\n+        header_.getDataTypes(),\n+        missing_column_indices,\n+        *ProtobufSchemas::instance().getMessageTypeForFormatSchema(schema_info_, ProtobufSchemas::WithEnvelope::Yes),\n+        /* with_length_delimiter = */ true,\n+        /* with_envelope = */ true,\n+         *reader))\n+{\n+}\n+\n+bool ProtobufListInputFormat::readRow(MutableColumns & columns, RowReadExtension & row_read_extension)\n+{\n+    if (reader->eof())\n+    {\n+        reader->endMessage(/*ignore_errors =*/ false);\n+        return false;\n+    }\n+\n+    size_t row_num = columns.empty() ? 0 : columns[0]->size();\n+    if (!row_num)\n+        serializer->setColumns(columns.data(), columns.size());\n+\n+    serializer->readRow(row_num);\n+\n+    row_read_extension.read_columns.clear();\n+    row_read_extension.read_columns.resize(columns.size(), true);\n+    for (size_t column_idx : missing_column_indices)\n+        row_read_extension.read_columns[column_idx] = false;\n+    return true;\n+}\n+\n+ProtobufListSchemaReader::ProtobufListSchemaReader(const FormatSettings & format_settings)\n+    : schema_info(\n+          format_settings.schema.format_schema,\n+          \"Protobuf\",\n+          true,\n+          format_settings.schema.is_server,\n+          format_settings.schema.format_schema_path)\n+{\n+}\n+\n+NamesAndTypesList ProtobufListSchemaReader::readSchema()\n+{\n+    const auto * message_descriptor = ProtobufSchemas::instance().getMessageTypeForFormatSchema(schema_info, ProtobufSchemas::WithEnvelope::Yes);\n+    return protobufSchemaToCHSchema(message_descriptor);\n+}\n+\n+void registerInputFormatProtobufList(FormatFactory & factory)\n+{\n+    factory.registerInputFormat(\n+            \"ProtobufList\",\n+            [](ReadBuffer &buf,\n+                const Block & sample,\n+                RowInputFormatParams params,\n+                const FormatSettings & settings)\n+            {\n+                return std::make_shared<ProtobufListInputFormat>(buf, sample, std::move(params), FormatSchemaInfo(settings, \"Protobuf\", true));\n+            });\n+    factory.markFormatAsColumnOriented(\"ProtobufList\");\n+}\n+\n+void registerProtobufListSchemaReader(FormatFactory & factory)\n+{\n+    factory.registerExternalSchemaReader(\"ProtobufList\", [](const FormatSettings & settings)\n+    {\n+        return std::make_shared<ProtobufListSchemaReader>(settings);\n+    });\n+}\n+\n+}\n+\n+#else\n+\n+namespace DB\n+{\n+class FormatFactory;\n+void registerInputFormatProtobufList(FormatFactory &) {}\n+void registerProtobufListSchemaReader(FormatFactory &) {}\n+}\n+\n+#endif\ndiff --git a/src/Processors/Formats/Impl/ProtobufListInputFormat.h b/src/Processors/Formats/Impl/ProtobufListInputFormat.h\nnew file mode 100644\nindex 000000000000..cecda3acda0d\n--- /dev/null\n+++ b/src/Processors/Formats/Impl/ProtobufListInputFormat.h\n@@ -0,0 +1,52 @@\n+#pragma once\n+\n+#include \"config_formats.h\"\n+\n+#if USE_PROTOBUF\n+#    include <Formats/FormatSchemaInfo.h>\n+#    include <Processors/Formats/IRowInputFormat.h>\n+#    include <Processors/Formats/ISchemaReader.h>\n+\n+namespace DB\n+{\n+class Block;\n+class ProtobufReader;\n+class ProtobufSerializer;\n+class ReadBuffer;\n+\n+/** Stream designed to deserialize data from the google protobuf format.\n+  * One nested Protobuf message is parsed as one row of data.\n+  *\n+  * Parsing of the protobuf format requires the 'format_schema' setting to be set, e.g.\n+  * INSERT INTO table FORMAT Protobuf SETTINGS format_schema = 'schema:Message'\n+  * where schema is the name of \"schema.proto\" file specifying protobuf schema.\n+  */\n+class ProtobufListInputFormat final : public IRowInputFormat\n+{\n+public:\n+    ProtobufListInputFormat(ReadBuffer & in_, const Block & header_, const Params & params_, const FormatSchemaInfo & schema_info_);\n+\n+    String getName() const override { return \"ProtobufListInputFormat\"; }\n+\n+private:\n+    bool readRow(MutableColumns & columns, RowReadExtension & row_read_extension) override;\n+\n+    std::unique_ptr<ProtobufReader> reader;\n+    std::vector<size_t> missing_column_indices;\n+    std::unique_ptr<ProtobufSerializer> serializer;\n+};\n+\n+class ProtobufListSchemaReader : public IExternalSchemaReader\n+{\n+public:\n+    explicit ProtobufListSchemaReader(const FormatSettings & format_settings);\n+\n+    NamesAndTypesList readSchema() override;\n+\n+private:\n+    const FormatSchemaInfo schema_info;\n+};\n+\n+}\n+\n+#endif\ndiff --git a/src/Processors/Formats/Impl/ProtobufListOutputFormat.cpp b/src/Processors/Formats/Impl/ProtobufListOutputFormat.cpp\nnew file mode 100644\nindex 000000000000..e78c9e3b13b8\n--- /dev/null\n+++ b/src/Processors/Formats/Impl/ProtobufListOutputFormat.cpp\n@@ -0,0 +1,68 @@\n+#include \"ProtobufListOutputFormat.h\"\n+\n+#if USE_PROTOBUF\n+#   include <Formats/FormatFactory.h>\n+#   include <Formats/FormatSchemaInfo.h>\n+#   include <Formats/ProtobufWriter.h>\n+#   include <Formats/ProtobufSerializer.h>\n+#   include <Formats/ProtobufSchemas.h>\n+\n+namespace DB\n+{\n+\n+ProtobufListOutputFormat::ProtobufListOutputFormat(\n+    WriteBuffer & out_,\n+    const Block & header_,\n+    const RowOutputFormatParams & params_,\n+    const FormatSchemaInfo & schema_info_)\n+    : IRowOutputFormat(header_, out_, params_)\n+    , writer(std::make_unique<ProtobufWriter>(out))\n+    , serializer(ProtobufSerializer::create(\n+          header_.getNames(),\n+          header_.getDataTypes(),\n+          *ProtobufSchemas::instance().getMessageTypeForFormatSchema(schema_info_, ProtobufSchemas::WithEnvelope::Yes),\n+          /* with_length_delimiter = */ true,\n+          /* with_envelope = */ true,\n+          *writer))\n+{\n+}\n+\n+void ProtobufListOutputFormat::write(const Columns & columns, size_t row_num)\n+{\n+    if (row_num == 0)\n+        serializer->setColumns(columns.data(), columns.size());\n+\n+    serializer->writeRow(row_num);\n+}\n+\n+void ProtobufListOutputFormat::finalizeImpl()\n+{\n+    serializer->finalizeWrite();\n+}\n+\n+void registerOutputFormatProtobufList(FormatFactory & factory)\n+{\n+    factory.registerOutputFormat(\n+        \"ProtobufList\",\n+        [](WriteBuffer & buf,\n+           const Block & header,\n+           const RowOutputFormatParams & params,\n+           const FormatSettings & settings)\n+        {\n+            return std::make_shared<ProtobufListOutputFormat>(\n+                buf, header, params,\n+                FormatSchemaInfo(settings, \"Protobuf\", true));\n+        });\n+}\n+\n+}\n+\n+#else\n+\n+namespace DB\n+{\n+class FormatFactory;\n+void registerOutputFormatProtobufList(FormatFactory &) {}\n+}\n+\n+#endif\ndiff --git a/src/Processors/Formats/Impl/ProtobufListOutputFormat.h b/src/Processors/Formats/Impl/ProtobufListOutputFormat.h\nnew file mode 100644\nindex 000000000000..47fe618d2e1f\n--- /dev/null\n+++ b/src/Processors/Formats/Impl/ProtobufListOutputFormat.h\n@@ -0,0 +1,48 @@\n+#pragma once\n+\n+#include \"config_formats.h\"\n+\n+#if USE_PROTOBUF\n+#    include <Processors/Formats/IRowOutputFormat.h>\n+\n+namespace DB\n+{\n+class FormatSchemaInfo;\n+class ProtobufWriter;\n+class ProtobufSerializer;\n+\n+/** Stream designed to serialize data in the google protobuf format.\n+  * Each row is written as a separated nested message, and all rows are enclosed by a single\n+  * top-level, envelope message\n+  *\n+  * Serializing in the protobuf format requires the 'format_schema' setting to be set, e.g.\n+  * SELECT * from table FORMAT Protobuf SETTINGS format_schema = 'schema:Message'\n+  * where schema is the name of \"schema.proto\" file specifying protobuf schema.\n+  */\n+// class ProtobufListOutputFormat final : public IOutputFormat\n+class ProtobufListOutputFormat final : public IRowOutputFormat\n+{\n+public:\n+    ProtobufListOutputFormat(\n+        WriteBuffer & out_,\n+        const Block & header_,\n+        const RowOutputFormatParams & params_,\n+        const FormatSchemaInfo & schema_info_);\n+\n+    String getName() const override { return \"ProtobufListOutputFormat\"; }\n+\n+    String getContentType() const override { return \"application/octet-stream\"; }\n+\n+private:\n+    void write(const Columns & columns, size_t row_num) override;\n+    void writeField(const IColumn &, const ISerialization &, size_t) override {}\n+\n+    void finalizeImpl() override;\n+\n+    std::unique_ptr<ProtobufWriter> writer;\n+    std::unique_ptr<ProtobufSerializer> serializer;\n+};\n+\n+}\n+\n+#endif\ndiff --git a/src/Processors/Formats/Impl/ProtobufRowInputFormat.cpp b/src/Processors/Formats/Impl/ProtobufRowInputFormat.cpp\nindex 395d8294aa57..38c18aa967c0 100644\n--- a/src/Processors/Formats/Impl/ProtobufRowInputFormat.cpp\n+++ b/src/Processors/Formats/Impl/ProtobufRowInputFormat.cpp\n@@ -3,16 +3,13 @@\n #if USE_PROTOBUF\n #   include <Core/Block.h>\n #   include <Formats/FormatFactory.h>\n-#   include <Formats/FormatSchemaInfo.h>\n #   include <Formats/ProtobufReader.h>\n #   include <Formats/ProtobufSchemas.h>\n #   include <Formats/ProtobufSerializer.h>\n-#   include <Interpreters/Context.h>\n-#   include <base/range.h>\n-\n \n namespace DB\n {\n+\n ProtobufRowInputFormat::ProtobufRowInputFormat(ReadBuffer & in_, const Block & header_, const Params & params_, const FormatSchemaInfo & schema_info_, bool with_length_delimiter_)\n     : IRowInputFormat(header_, in_, params_)\n     , reader(std::make_unique<ProtobufReader>(in_))\n@@ -20,14 +17,13 @@ ProtobufRowInputFormat::ProtobufRowInputFormat(ReadBuffer & in_, const Block & h\n           header_.getNames(),\n           header_.getDataTypes(),\n           missing_column_indices,\n-          *ProtobufSchemas::instance().getMessageTypeForFormatSchema(schema_info_),\n+          *ProtobufSchemas::instance().getMessageTypeForFormatSchema(schema_info_, ProtobufSchemas::WithEnvelope::No),\n           with_length_delimiter_,\n+          /* with_envelope = */ false,\n          *reader))\n {\n }\n \n-ProtobufRowInputFormat::~ProtobufRowInputFormat() = default;\n-\n bool ProtobufRowInputFormat::readRow(MutableColumns & columns, RowReadExtension & row_read_extension)\n {\n     if (reader->eof())\n@@ -85,7 +81,7 @@ ProtobufSchemaReader::ProtobufSchemaReader(const FormatSettings & format_setting\n \n NamesAndTypesList ProtobufSchemaReader::readSchema()\n {\n-    const auto * message_descriptor = ProtobufSchemas::instance().getMessageTypeForFormatSchema(schema_info);\n+    const auto * message_descriptor = ProtobufSchemas::instance().getMessageTypeForFormatSchema(schema_info, ProtobufSchemas::WithEnvelope::No);\n     return protobufSchemaToCHSchema(message_descriptor);\n }\n \n@@ -111,7 +107,6 @@ namespace DB\n {\n class FormatFactory;\n void registerInputFormatProtobuf(FormatFactory &) {}\n-\n void registerProtobufSchemaReader(FormatFactory &) {}\n }\n \ndiff --git a/src/Processors/Formats/Impl/ProtobufRowInputFormat.h b/src/Processors/Formats/Impl/ProtobufRowInputFormat.h\nindex 9566cb451066..1c276356664a 100644\n--- a/src/Processors/Formats/Impl/ProtobufRowInputFormat.h\n+++ b/src/Processors/Formats/Impl/ProtobufRowInputFormat.h\n@@ -3,17 +3,16 @@\n #include \"config_formats.h\"\n \n #if USE_PROTOBUF\n-#    include <Formats/FormatSchemaInfo.h>\n-#    include <Processors/Formats/IRowInputFormat.h>\n-#    include <Processors/Formats/ISchemaReader.h>\n+#   include <Processors/Formats/IRowInputFormat.h>\n+#   include <Processors/Formats/ISchemaReader.h>\n+#   include <Formats/FormatSchemaInfo.h>\n \n namespace DB\n {\n class Block;\n-class FormatSchemaInfo;\n class ProtobufReader;\n class ProtobufSerializer;\n-\n+class ReadBuffer;\n \n /** Stream designed to deserialize data from the google protobuf format.\n   * One Protobuf message is parsed as one row of data.\n@@ -30,12 +29,11 @@ class ProtobufRowInputFormat final : public IRowInputFormat\n {\n public:\n     ProtobufRowInputFormat(ReadBuffer & in_, const Block & header_, const Params & params_, const FormatSchemaInfo & schema_info_, bool with_length_delimiter_);\n-    ~ProtobufRowInputFormat() override;\n \n     String getName() const override { return \"ProtobufRowInputFormat\"; }\n \n private:\n-    bool readRow(MutableColumns & columns, RowReadExtension &) override;\n+    bool readRow(MutableColumns & columns, RowReadExtension & row_read_extension) override;\n     bool allowSyncAfterError() const override;\n     void syncAfterError() override;\n \n@@ -52,7 +50,7 @@ class ProtobufSchemaReader : public IExternalSchemaReader\n     NamesAndTypesList readSchema() override;\n \n private:\n-    FormatSchemaInfo schema_info;\n+    const FormatSchemaInfo schema_info;\n };\n \n }\ndiff --git a/src/Processors/Formats/Impl/ProtobufRowOutputFormat.cpp b/src/Processors/Formats/Impl/ProtobufRowOutputFormat.cpp\nindex 29cd9be79bce..fa730f8ec2aa 100644\n--- a/src/Processors/Formats/Impl/ProtobufRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/ProtobufRowOutputFormat.cpp\n@@ -4,12 +4,12 @@\n #   include <Formats/FormatFactory.h>\n #   include <Core/Block.h>\n #   include <Formats/FormatSchemaInfo.h>\n+#   include <Formats/FormatSettings.h>\n #   include <Formats/ProtobufSchemas.h>\n #   include <Formats/ProtobufSerializer.h>\n #   include <Formats/ProtobufWriter.h>\n #   include <google/protobuf/descriptor.h>\n \n-\n namespace DB\n {\n namespace ErrorCodes\n@@ -17,7 +17,6 @@ namespace ErrorCodes\n     extern const int NO_ROW_DELIMITER;\n }\n \n-\n ProtobufRowOutputFormat::ProtobufRowOutputFormat(\n     WriteBuffer & out_,\n     const Block & header_,\n@@ -30,8 +29,9 @@ ProtobufRowOutputFormat::ProtobufRowOutputFormat(\n     , serializer(ProtobufSerializer::create(\n           header_.getNames(),\n           header_.getDataTypes(),\n-          *ProtobufSchemas::instance().getMessageTypeForFormatSchema(schema_info_),\n+          *ProtobufSchemas::instance().getMessageTypeForFormatSchema(schema_info_, ProtobufSchemas::WithEnvelope::No),\n           with_length_delimiter_,\n+          /* with_envelope = */ false,\n           *writer))\n     , allow_multiple_rows(with_length_delimiter_ || settings_.protobuf.allow_multiple_rows_without_delimiter)\n {\n@@ -44,13 +44,12 @@ void ProtobufRowOutputFormat::write(const Columns & columns, size_t row_num)\n             \"The ProtobufSingle format can't be used to write multiple rows because this format doesn't have any row delimiter.\",\n             ErrorCodes::NO_ROW_DELIMITER);\n \n-    if (!row_num)\n+    if (row_num == 0)\n         serializer->setColumns(columns.data(), columns.size());\n \n     serializer->writeRow(row_num);\n }\n \n-\n void registerOutputFormatProtobuf(FormatFactory & factory)\n {\n     for (bool with_length_delimiter : {false, true})\ndiff --git a/src/Processors/Formats/Impl/ProtobufRowOutputFormat.h b/src/Processors/Formats/Impl/ProtobufRowOutputFormat.h\nindex 43d79b4d0915..9f7f0b969238 100644\n--- a/src/Processors/Formats/Impl/ProtobufRowOutputFormat.h\n+++ b/src/Processors/Formats/Impl/ProtobufRowOutputFormat.h\n@@ -3,17 +3,15 @@\n #include \"config_formats.h\"\n \n #if USE_PROTOBUF\n-#    include <Core/Block.h>\n-#    include <Formats/FormatSchemaInfo.h>\n-#    include <Formats/FormatSettings.h>\n #    include <Processors/Formats/IRowOutputFormat.h>\n \n-\n namespace DB\n {\n-class ProtobufWriter;\n-class ProtobufSerializer;\n+class DB;\n class FormatSchemaInfo;\n+class ProtobufSerializer;\n+class ProtobufWriter;\n+class WriteBuffer;\n struct FormatSettings;\n \n /** Stream designed to serialize data in the google protobuf format.\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00825_protobuf_format_persons.sh b/tests/queries/0_stateless/00825_protobuf_format_persons.sh\nindex bb376e6ed702..465b27aa683a 100755\n--- a/tests/queries/0_stateless/00825_protobuf_format_persons.sh\n+++ b/tests/queries/0_stateless/00825_protobuf_format_persons.sh\n@@ -1,6 +1,10 @@\n #!/usr/bin/env bash\n # Tags: no-fasttest\n \n+# End-to-end test of serialization/deserialization of a table with different\n+# data types to/from Protobuf format.\n+#   Cf. 02240_protobuflist_format_persons.sh\n+\n # To generate reference file for this test use the following commands:\n # ninja ProtobufDelimitedMessagesSerializer\n # build/utils/test-data-generator/ProtobufDelimitedMessagesSerializer\ndiff --git a/tests/queries/0_stateless/02187_async_inserts_all_formats.python b/tests/queries/0_stateless/02187_async_inserts_all_formats.python\nindex 0a9094512593..65a323ef9db1 100644\n--- a/tests/queries/0_stateless/02187_async_inserts_all_formats.python\n+++ b/tests/queries/0_stateless/02187_async_inserts_all_formats.python\n@@ -28,7 +28,7 @@ def run_test(data_format, gen_data_template, settings):\n         exit(1)\n \n formats = client.query(\"SELECT name FROM system.formats WHERE is_input AND is_output \\\n-    AND name NOT IN ('CapnProto', 'RawBLOB', 'Template', 'ProtobufSingle', 'LineAsString', 'Protobuf') ORDER BY name\").strip().split('\\n')\n+    AND name NOT IN ('CapnProto', 'RawBLOB', 'Template', 'ProtobufSingle', 'LineAsString', 'Protobuf', 'ProtobufList') ORDER BY name\").strip().split('\\n')\n \n # Generic formats\n client.query(\"DROP TABLE IF EXISTS t_async_insert\")\ndiff --git a/tests/queries/0_stateless/02240_protobuflist_format_persons.reference b/tests/queries/0_stateless/02240_protobuflist_format_persons.reference\nnew file mode 100644\nindex 000000000000..3ff4a6e57df7\n--- /dev/null\n+++ b/tests/queries/0_stateless/02240_protobuflist_format_persons.reference\n@@ -0,0 +1,569 @@\n+a7522158-3d41-4b77-ad69-6c598ee55c49\tIvan\tPetrov\tmale\t1980-12-29\tpng\t+74951234567\\0\t1\t2019-01-05 18:45:00\t38\tcapricorn\t['Yesterday','Flowers']\t[255,0,0]\tMoscow\t[55.753215,37.622504]\t3.14\t214.1\t0.1\t5.8\t17060000000\t['meter','centimeter','kilometer']\t[1,0.01,1000]\t500\t[501,502]\n+c694ad8a-f714-4ea3-907d-fd54fb25d9b5\tNatalia\tSokolova\tfemale\t1992-03-08\tjpg\t\\N\t0\t\\N\t26\tpisces\t[]\t[100,200,50]\tPlymouth\t[50.403724,-4.142123]\t3.14159\t\\N\t0.007\t5.4\t-20000000000000\t[]\t[]\t\\N\t[]\n+a7da1aa6-f425-4789-8947-b034786ed374\tVasily\tSidorov\tmale\t1995-07-28\tbmp\t+442012345678\t1\t2018-12-30 00:00:00\t23\tleo\t['Sunny']\t[250,244,10]\tMurmansk\t[68.970682,33.074981]\t3.14159265358979\t100000000000\t800\t-3.2\t154400000\t['pound']\t[16]\t503\t[]\n+\n+Schema 02240_protobuflist1_format_persons:Person\n+\n+Binary representation:\n+00000000  ba 04 0a f4 01 0a 24 61  37 35 32 32 31 35 38 2d  |......$a7522158-|\n+00000010  33 64 34 31 2d 34 62 37  37 2d 61 64 36 39 2d 36  |3d41-4b77-ad69-6|\n+00000020  63 35 39 38 65 65 35 35  63 34 39 12 04 49 76 61  |c598ee55c49..Iva|\n+00000030  6e 1a 06 50 65 74 72 6f  76 20 01 28 af 1f 32 03  |n..Petrov .(..2.|\n+00000040  70 6e 67 3a 0d 2b 37 34  39 35 31 32 33 34 35 36  |png:.+7495123456|\n+00000050  37 00 40 01 4d fc d0 30  5c 50 26 58 09 62 09 59  |7.@.M..0\\P&X.b.Y|\n+00000060  65 73 74 65 72 64 61 79  62 07 46 6c 6f 77 65 72  |esterdayb.Flower|\n+00000070  73 6a 04 ff 01 00 00 72  06 4d 6f 73 63 6f 77 7a  |sj.....r.Moscowz|\n+00000080  08 4b 03 5f 42 72 7d 16  42 81 01 1f 85 eb 51 b8  |.K._Br}.B.....Q.|\n+00000090  1e 09 40 89 01 33 33 33  33 33 c3 6a 40 95 01 cd  |..@..33333.j@...|\n+000000a0  cc cc 3d 9d 01 9a 99 b9  40 a0 01 80 c4 d7 8d 7f  |..=.....@.......|\n+000000b0  aa 01 0c 0a 05 6d 65 74  65 72 15 00 00 80 3f aa  |.....meter....?.|\n+000000c0  01 11 0a 0a 63 65 6e 74  69 6d 65 74 65 72 15 0a  |....centimeter..|\n+000000d0  d7 23 3c aa 01 10 0a 09  6b 69 6c 6f 6d 65 74 65  |.#<.....kilomete|\n+000000e0  72 15 00 00 7a 44 b2 01  10 0a 0e a2 06 0b 0a 09  |r...zD..........|\n+000000f0  08 f4 03 12 04 f5 03 f6  03 0a 7e 0a 24 63 36 39  |..........~.$c69|\n+00000100  34 61 64 38 61 2d 66 37  31 34 2d 34 65 61 33 2d  |4ad8a-f714-4ea3-|\n+00000110  39 30 37 64 2d 66 64 35  34 66 62 32 35 64 39 62  |907d-fd54fb25d9b|\n+00000120  35 12 07 4e 61 74 61 6c  69 61 1a 08 53 6f 6b 6f  |5..Natalia..Soko|\n+00000130  6c 6f 76 61 28 a6 3f 32  03 6a 70 67 50 1a 58 0b  |lova(.?2.jpgP.X.|\n+00000140  6a 04 64 c8 01 32 72 08  50 6c 79 6d 6f 75 74 68  |j.d..2r.Plymouth|\n+00000150  7a 08 6a 9d 49 42 46 8c  84 c0 81 01 6e 86 1b f0  |z.j.IBF.....n...|\n+00000160  f9 21 09 40 95 01 42 60  e5 3b 9d 01 cd cc ac 40  |.!.@..B`.;.....@|\n+00000170  a0 01 ff ff a9 ce 93 8c  09 0a c0 01 0a 24 61 37  |.............$a7|\n+00000180  64 61 31 61 61 36 2d 66  34 32 35 2d 34 37 38 39  |da1aa6-f425-4789|\n+00000190  2d 38 39 34 37 2d 62 30  33 34 37 38 36 65 64 33  |-8947-b034786ed3|\n+000001a0  37 34 12 06 56 61 73 69  6c 79 1a 07 53 69 64 6f  |74..Vasily..Sido|\n+000001b0  72 6f 76 20 01 28 fb 48  32 03 62 6d 70 3a 0d 2b  |rov .(.H2.bmp:.+|\n+000001c0  34 34 32 30 31 32 33 34  35 36 37 38 40 01 4d 50  |442012345678@.MP|\n+000001d0  e0 27 5c 50 17 58 04 62  05 53 75 6e 6e 79 6a 05  |.'\\P.X.b.Sunnyj.|\n+000001e0  fa 01 f4 01 0a 72 08 4d  75 72 6d 61 6e 73 6b 7a  |.....r.Murmanskz|\n+000001f0  08 fd f0 89 42 c8 4c 04  42 81 01 11 2d 44 54 fb  |....B.L.B...-DT.|\n+00000200  21 09 40 89 01 00 00 00  e8 76 48 37 42 95 01 00  |!.@......vH7B...|\n+00000210  00 48 44 9d 01 cd cc 4c  c0 a0 01 80 d4 9f 93 01  |.HD....L........|\n+00000220  aa 01 0c 0a 05 70 6f 75  6e 64 15 00 00 80 41 b2  |.....pound....A.|\n+00000230  01 0a 0a 08 a2 06 05 0a  03 08 f7 03              |............|\n+0000023c\n+\n+MESSAGE #1 AT 0x00000005\n+uuid: \"a7522158-3d41-4b77-ad69-6c598ee55c49\"\n+name: \"Ivan\"\n+surname: \"Petrov\"\n+gender: male\n+birthDate: 4015\n+photo: \"png\"\n+phoneNumber: \"+74951234567\\000\"\n+isOnline: true\n+visitTime: 1546703100\n+age: 38\n+zodiacSign: capricorn\n+songs: \"Yesterday\"\n+songs: \"Flowers\"\n+color: 255\n+color: 0\n+color: 0\n+hometown: \"Moscow\"\n+location: 55.7532158\n+location: 37.6225052\n+pi: 3.14\n+lotteryWin: 214.1\n+someRatio: 0.1\n+temperature: 5.8\n+randomBigNumber: 17060000000\n+measureUnits {\n+  unit: \"meter\"\n+  coef: 1\n+}\n+measureUnits {\n+  unit: \"centimeter\"\n+  coef: 0.01\n+}\n+measureUnits {\n+  unit: \"kilometer\"\n+  coef: 1000\n+}\n+nestiness {\n+  a {\n+    b {\n+      c {\n+        d: 500\n+        e: 501\n+        e: 502\n+      }\n+    }\n+  }\n+}\n+MESSAGE #2 AT 0x000000FB\n+uuid: \"c694ad8a-f714-4ea3-907d-fd54fb25d9b5\"\n+name: \"Natalia\"\n+surname: \"Sokolova\"\n+birthDate: 8102\n+photo: \"jpg\"\n+age: 26\n+zodiacSign: pisces\n+color: 100\n+color: 200\n+color: 50\n+hometown: \"Plymouth\"\n+location: 50.4037247\n+location: -4.14212322\n+pi: 3.14159\n+someRatio: 0.007\n+temperature: 5.4\n+randomBigNumber: -20000000000000\n+MESSAGE #3 AT 0x0000017C\n+uuid: \"a7da1aa6-f425-4789-8947-b034786ed374\"\n+name: \"Vasily\"\n+surname: \"Sidorov\"\n+gender: male\n+birthDate: 9339\n+photo: \"bmp\"\n+phoneNumber: \"+442012345678\"\n+isOnline: true\n+visitTime: 1546117200\n+age: 23\n+zodiacSign: leo\n+songs: \"Sunny\"\n+color: 250\n+color: 244\n+color: 10\n+hometown: \"Murmansk\"\n+location: 68.9706802\n+location: 33.0749817\n+pi: 3.14159265358979\n+lotteryWin: 100000000000\n+someRatio: 800\n+temperature: -3.2\n+randomBigNumber: 154400000\n+measureUnits {\n+  unit: \"pound\"\n+  coef: 16\n+}\n+nestiness {\n+  a {\n+    b {\n+      c {\n+        d: 503\n+      }\n+    }\n+  }\n+}\n+\n+Binary representation is as expected\n+\n+Roundtrip:\n+a7522158-3d41-4b77-ad69-6c598ee55c49\tIvan\tPetrov\tmale\t1980-12-29\tpng\t+74951234567\\0\t1\t2019-01-05 18:45:00\t38\tcapricorn\t['Yesterday','Flowers']\t[255,0,0]\tMoscow\t[55.753216,37.622504]\t3.14\t214.1\t0.1\t5.8\t17060000000\t['meter','centimeter','kilometer']\t[1,0.01,1000]\t500\t[501,502]\n+c694ad8a-f714-4ea3-907d-fd54fb25d9b5\tNatalia\tSokolova\tfemale\t1992-03-08\tjpg\t\\N\t0\t\\N\t26\tpisces\t[]\t[100,200,50]\tPlymouth\t[50.403724,-4.142123]\t3.14159\t\\N\t0.007\t5.4\t-20000000000000\t[]\t[]\t\\N\t[]\n+a7da1aa6-f425-4789-8947-b034786ed374\tVasily\tSidorov\tmale\t1995-07-28\tbmp\t+442012345678\t1\t2018-12-30 00:00:00\t23\tleo\t['Sunny']\t[250,244,10]\tMurmansk\t[68.97068,33.074982]\t3.14159265358979\t100000000000\t800\t-3.2\t154400000\t['pound']\t[16]\t503\t[]\n+\n+Schema 02240_protobuflist2_format_persons:AltPerson\n+\n+Binary representation:\n+00000000  f4 03 0a c4 01 08 01 12  04 49 76 61 6e 28 87 a8  |.........Ivan(..|\n+00000010  c4 9b 97 02 52 06 50 65  74 72 6f 76 72 0c 00 00  |....R.Petrovr...|\n+00000020  7f 43 00 00 00 00 00 00  00 00 79 fc d0 30 5c 00  |.C........y..0\\.|\n+00000030  00 00 00 c8 02 0a c2 05  0c 00 00 80 3f 0a d7 23  |............?..#|\n+00000040  3c 00 00 7a 44 9a 06 05  6d 65 74 65 72 9a 06 0a  |<..zD...meter...|\n+00000050  63 65 6e 74 69 6d 65 74  65 72 9a 06 09 6b 69 6c  |centimeter...kil|\n+00000060  6f 6d 65 74 65 72 a1 06  00 00 00 a0 99 99 b9 3f  |ometer.........?|\n+00000070  a8 06 37 a8 06 25 bd 06  c3 f5 48 40 fa 06 02 33  |..7..%....H@...3|\n+00000080  38 90 08 c6 09 e1 08 00  f1 da f8 03 00 00 00 b0  |8...............|\n+00000090  09 af 1f d0 0c d6 01 e2  12 24 61 37 35 32 32 31  |.........$a75221|\n+000000a0  35 38 2d 33 64 34 31 2d  34 62 37 37 2d 61 64 36  |58-3d41-4b77-ad6|\n+000000b0  39 2d 36 63 35 39 38 65  65 35 35 63 34 39 a0 38  |9-6c598ee55c49.8|\n+000000c0  f4 03 aa 38 04 f5 03 f6  03 0a 84 01 12 07 4e 61  |...8..........Na|\n+000000d0  74 61 6c 69 61 52 08 53  6f 6b 6f 6c 6f 76 61 72  |taliaR.Sokolovar|\n+000000e0  0c 00 00 c8 42 00 00 48  43 00 00 48 42 c8 02 0a  |....B..HC..HB...|\n+000000f0  a1 06 00 00 00 40 08 ac  7c 3f a8 06 32 a8 06 fc  |.....@..|?..2...|\n+00000100  ff ff ff ff ff ff ff ff  01 b0 06 01 bd 06 d0 0f  |................|\n+00000110  49 40 fa 06 02 32 36 90  08 db 01 e1 08 00 c0 1a  |I@...26.........|\n+00000120  63 cf ed ff ff b0 09 a6  3f e2 12 24 63 36 39 34  |c.......?..$c694|\n+00000130  61 64 38 61 2d 66 37 31  34 2d 34 65 61 33 2d 39  |ad8a-f714-4ea3-9|\n+00000140  30 37 64 2d 66 64 35 34  66 62 32 35 64 39 62 35  |07d-fd54fb25d9b5|\n+00000150  0a a3 01 08 01 12 06 56  61 73 69 6c 79 28 ce ca  |.......Vasily(..|\n+00000160  f4 cf ee 0c 52 07 53 69  64 6f 72 6f 76 72 0c 00  |....R.Sidorovr..|\n+00000170  00 7a 43 00 00 74 43 00  00 20 41 79 50 e0 27 5c  |.zC..tC.. AyP.'\\|\n+00000180  00 00 00 00 c8 02 05 c2  05 04 00 00 80 41 9a 06  |.............A..|\n+00000190  05 70 6f 75 6e 64 a1 06  00 00 00 00 00 00 89 40  |.pound.........@|\n+000001a0  a8 06 44 a8 06 21 bd 06  db 0f 49 40 fa 06 02 32  |..D..!....I@...2|\n+000001b0  33 90 08 d3 05 e1 08 00  f5 33 09 00 00 00 00 b0  |3........3......|\n+000001c0  09 fb 48 d0 0c 80 d0 db  c3 f4 02 e2 12 24 61 37  |..H..........$a7|\n+000001d0  64 61 31 61 61 36 2d 66  34 32 35 2d 34 37 38 39  |da1aa6-f425-4789|\n+000001e0  2d 38 39 34 37 2d 62 30  33 34 37 38 36 65 64 33  |-8947-b034786ed3|\n+000001f0  37 34 a0 38 f7 03                                 |74.8..|\n+000001f6\n+\n+MESSAGE #1 AT 0x00000005\n+isOnline: online\n+name: \"Ivan\"\n+phoneNumber: 74951234567\n+surname: \"Petrov\"\n+color: 255\n+color: 0\n+color: 0\n+visitTime: 1546703100\n+temperature: 5\n+measureUnits_coef: 1\n+measureUnits_coef: 0.01\n+measureUnits_coef: 1000\n+measureUnits_unit: \"meter\"\n+measureUnits_unit: \"centimeter\"\n+measureUnits_unit: \"kilometer\"\n+someRatio: 0.10000000149011612\n+location: 55\n+location: 37\n+pi: 3.14\n+age: \"38\"\n+zodiacSign: 1222\n+randomBigNumber: 17060000000\n+birthDate: 4015\n+lotteryWin: 214\n+uuid: \"a7522158-3d41-4b77-ad69-6c598ee55c49\"\n+nestiness_a_b_c_d: 500\n+nestiness_a_b_c_e: 501\n+nestiness_a_b_c_e: 502\n+MESSAGE #2 AT 0x000000CC\n+name: \"Natalia\"\n+surname: \"Sokolova\"\n+color: 100\n+color: 200\n+color: 50\n+temperature: 5\n+someRatio: 0.0070000002160668373\n+location: 50\n+location: -4\n+gender: female\n+pi: 3.14159\n+age: \"26\"\n+zodiacSign: 219\n+randomBigNumber: -20000000000000\n+birthDate: 8102\n+uuid: \"c694ad8a-f714-4ea3-907d-fd54fb25d9b5\"\n+MESSAGE #3 AT 0x00000153\n+isOnline: online\n+name: \"Vasily\"\n+phoneNumber: 442012345678\n+surname: \"Sidorov\"\n+color: 250\n+color: 244\n+color: 10\n+visitTime: 1546117200\n+temperature: -3\n+measureUnits_coef: 16\n+measureUnits_unit: \"pound\"\n+someRatio: 800\n+location: 68\n+location: 33\n+pi: 3.14159274\n+age: \"23\"\n+zodiacSign: 723\n+randomBigNumber: 154400000\n+birthDate: 9339\n+lotteryWin: 100000000000\n+uuid: \"a7da1aa6-f425-4789-8947-b034786ed374\"\n+nestiness_a_b_c_d: 503\n+\n+Binary representation is as expected\n+\n+Roundtrip:\n+a7522158-3d41-4b77-ad69-6c598ee55c49\tIvan\tPetrov\tmale\t1980-12-29\t\\N\t74951234567\\0\\0\t1\t2019-01-05 18:45:00\t38\tcapricorn\t[]\t[255,0,0]\t\t[55,37]\t3.140000104904175\t214\t0.1\t5\t17060000000\t['meter','centimeter','kilometer']\t[1,0.01,1000]\t500\t[501,502]\n+c694ad8a-f714-4ea3-907d-fd54fb25d9b5\tNatalia\tSokolova\tfemale\t1992-03-08\t\\N\t\\N\t0\t\\N\t26\tpisces\t[]\t[100,200,50]\t\t[50,-4]\t3.141590118408203\t\\N\t0.007\t5\t-20000000000000\t[]\t[]\t\\N\t[]\n+a7da1aa6-f425-4789-8947-b034786ed374\tVasily\tSidorov\tmale\t1995-07-28\t\\N\t442012345678\\0\t1\t2018-12-30 00:00:00\t23\tleo\t[]\t[250,244,10]\t\t[68,33]\t3.1415927410125732\t100000000000\t800\t-3\t154400000\t['pound']\t[16]\t503\t[]\n+\n+Schema 02240_protobuflist3_format_persons:StrPerson as ProtobufList\n+\n+Binary representation:\n+00000000  e4 05 0a a6 02 0a 24 61  37 35 32 32 31 35 38 2d  |......$a7522158-|\n+00000010  33 64 34 31 2d 34 62 37  37 2d 61 64 36 39 2d 36  |3d41-4b77-ad69-6|\n+00000020  63 35 39 38 65 65 35 35  63 34 39 12 04 49 76 61  |c598ee55c49..Iva|\n+00000030  6e 1a 06 50 65 74 72 6f  76 22 04 6d 61 6c 65 2a  |n..Petrov\".male*|\n+00000040  0a 31 39 38 30 2d 31 32  2d 32 39 3a 0d 2b 37 34  |.1980-12-29:.+74|\n+00000050  39 35 31 32 33 34 35 36  37 00 42 01 31 4a 13 32  |951234567.B.1J.2|\n+00000060  30 31 39 2d 30 31 2d 30  35 20 31 38 3a 34 35 3a  |019-01-05 18:45:|\n+00000070  30 30 52 02 33 38 5a 09  63 61 70 72 69 63 6f 72  |00R.38Z.capricor|\n+00000080  6e 62 09 59 65 73 74 65  72 64 61 79 62 07 46 6c  |nb.Yesterdayb.Fl|\n+00000090  6f 77 65 72 73 6a 03 32  35 35 6a 01 30 6a 01 30  |owersj.255j.0j.0|\n+000000a0  72 06 4d 6f 73 63 6f 77  7a 09 35 35 2e 37 35 33  |r.Moscowz.55.753|\n+000000b0  32 31 35 7a 09 33 37 2e  36 32 32 35 30 34 82 01  |215z.37.622504..|\n+000000c0  04 33 2e 31 34 8a 01 05  32 31 34 2e 31 92 01 03  |.3.14...214.1...|\n+000000d0  30 2e 31 9a 01 03 35 2e  38 a2 01 0b 31 37 30 36  |0.1...5.8...1706|\n+000000e0  30 30 30 30 30 30 30 aa  01 2d 0a 05 6d 65 74 65  |0000000..-..mete|\n+000000f0  72 0a 0a 63 65 6e 74 69  6d 65 74 65 72 0a 09 6b  |r..centimeter..k|\n+00000100  69 6c 6f 6d 65 74 65 72  12 01 31 12 04 30 2e 30  |ilometer..1..0.0|\n+00000110  31 12 04 31 30 30 30 b2  01 11 0a 0f 0a 03 35 30  |1..1000.......50|\n+00000120  30 12 03 35 30 31 12 03  35 30 32 0a b4 01 0a 24  |0..501..502....$|\n+00000130  63 36 39 34 61 64 38 61  2d 66 37 31 34 2d 34 65  |c694ad8a-f714-4e|\n+00000140  61 33 2d 39 30 37 64 2d  66 64 35 34 66 62 32 35  |a3-907d-fd54fb25|\n+00000150  64 39 62 35 12 07 4e 61  74 61 6c 69 61 1a 08 53  |d9b5..Natalia..S|\n+00000160  6f 6b 6f 6c 6f 76 61 22  06 66 65 6d 61 6c 65 2a  |okolova\".female*|\n+00000170  0a 31 39 39 32 2d 30 33  2d 30 38 42 01 30 52 02  |.1992-03-08B.0R.|\n+00000180  32 36 5a 06 70 69 73 63  65 73 6a 03 31 30 30 6a  |26Z.piscesj.100j|\n+00000190  03 32 30 30 6a 02 35 30  72 08 50 6c 79 6d 6f 75  |.200j.50r.Plymou|\n+000001a0  74 68 7a 09 35 30 2e 34  30 33 37 32 34 7a 09 2d  |thz.50.403724z.-|\n+000001b0  34 2e 31 34 32 31 32 33  82 01 07 33 2e 31 34 31  |4.142123...3.141|\n+000001c0  35 39 92 01 05 30 2e 30  30 37 9a 01 03 35 2e 34  |59...0.007...5.4|\n+000001d0  a2 01 0f 2d 32 30 30 30  30 30 30 30 30 30 30 30  |...-200000000000|\n+000001e0  30 30 0a 81 02 0a 24 61  37 64 61 31 61 61 36 2d  |00....$a7da1aa6-|\n+000001f0  66 34 32 35 2d 34 37 38  39 2d 38 39 34 37 2d 62  |f425-4789-8947-b|\n+00000200  30 33 34 37 38 36 65 64  33 37 34 12 06 56 61 73  |034786ed374..Vas|\n+00000210  69 6c 79 1a 07 53 69 64  6f 72 6f 76 22 04 6d 61  |ily..Sidorov\".ma|\n+00000220  6c 65 2a 0a 31 39 39 35  2d 30 37 2d 32 38 3a 0d  |le*.1995-07-28:.|\n+00000230  2b 34 34 32 30 31 32 33  34 35 36 37 38 42 01 31  |+442012345678B.1|\n+00000240  4a 13 32 30 31 38 2d 31  32 2d 33 30 20 30 30 3a  |J.2018-12-30 00:|\n+00000250  30 30 3a 30 30 52 02 32  33 5a 03 6c 65 6f 62 05  |00:00R.23Z.leob.|\n+00000260  53 75 6e 6e 79 6a 03 32  35 30 6a 03 32 34 34 6a  |Sunnyj.250j.244j|\n+00000270  02 31 30 72 08 4d 75 72  6d 61 6e 73 6b 7a 09 36  |.10r.Murmanskz.6|\n+00000280  38 2e 39 37 30 36 38 32  7a 09 33 33 2e 30 37 34  |8.970682z.33.074|\n+00000290  39 38 31 82 01 10 33 2e  31 34 31 35 39 32 36 35  |981...3.14159265|\n+000002a0  33 35 38 39 37 39 8a 01  0c 31 30 30 30 30 30 30  |358979...1000000|\n+000002b0  30 30 30 30 30 92 01 03  38 30 30 9a 01 04 2d 33  |00000...800...-3|\n+000002c0  2e 32 a2 01 09 31 35 34  34 30 30 30 30 30 aa 01  |.2...154400000..|\n+000002d0  0b 0a 05 70 6f 75 6e 64  12 02 31 36 b2 01 07 0a  |...pound..16....|\n+000002e0  05 0a 03 35 30 33                                 |...503|\n+000002e6\n+\n+MESSAGE #1 AT 0x00000005\n+uuid: \"a7522158-3d41-4b77-ad69-6c598ee55c49\"\n+name: \"Ivan\"\n+surname: \"Petrov\"\n+gender: \"male\"\n+birthDate: \"1980-12-29\"\n+phoneNumber: \"+74951234567\\000\"\n+isOnline: \"1\"\n+visitTime: \"2019-01-05 18:45:00\"\n+age: \"38\"\n+zodiacSign: \"capricorn\"\n+songs: \"Yesterday\"\n+songs: \"Flowers\"\n+color: \"255\"\n+color: \"0\"\n+color: \"0\"\n+hometown: \"Moscow\"\n+location: \"55.753215\"\n+location: \"37.622504\"\n+pi: \"3.14\"\n+lotteryWin: \"214.1\"\n+someRatio: \"0.1\"\n+temperature: \"5.8\"\n+randomBigNumber: \"17060000000\"\n+measureUnits {\n+  unit: \"meter\"\n+  unit: \"centimeter\"\n+  unit: \"kilometer\"\n+  coef: \"1\"\n+  coef: \"0.01\"\n+  coef: \"1000\"\n+}\n+nestiness_a {\n+  b_c {\n+    d: \"500\"\n+    e: \"501\"\n+    e: \"502\"\n+  }\n+}\n+MESSAGE #2 AT 0x0000012E\n+uuid: \"c694ad8a-f714-4ea3-907d-fd54fb25d9b5\"\n+name: \"Natalia\"\n+surname: \"Sokolova\"\n+gender: \"female\"\n+birthDate: \"1992-03-08\"\n+isOnline: \"0\"\n+age: \"26\"\n+zodiacSign: \"pisces\"\n+color: \"100\"\n+color: \"200\"\n+color: \"50\"\n+hometown: \"Plymouth\"\n+location: \"50.403724\"\n+location: \"-4.142123\"\n+pi: \"3.14159\"\n+someRatio: \"0.007\"\n+temperature: \"5.4\"\n+randomBigNumber: \"-20000000000000\"\n+MESSAGE #3 AT 0x000001E5\n+uuid: \"a7da1aa6-f425-4789-8947-b034786ed374\"\n+name: \"Vasily\"\n+surname: \"Sidorov\"\n+gender: \"male\"\n+birthDate: \"1995-07-28\"\n+phoneNumber: \"+442012345678\"\n+isOnline: \"1\"\n+visitTime: \"2018-12-30 00:00:00\"\n+age: \"23\"\n+zodiacSign: \"leo\"\n+songs: \"Sunny\"\n+color: \"250\"\n+color: \"244\"\n+color: \"10\"\n+hometown: \"Murmansk\"\n+location: \"68.970682\"\n+location: \"33.074981\"\n+pi: \"3.14159265358979\"\n+lotteryWin: \"100000000000\"\n+someRatio: \"800\"\n+temperature: \"-3.2\"\n+randomBigNumber: \"154400000\"\n+measureUnits {\n+  unit: \"pound\"\n+  coef: \"16\"\n+}\n+nestiness_a {\n+  b_c {\n+    d: \"503\"\n+  }\n+}\n+\n+Binary representation is as expected\n+Roundtrip:\n+a7522158-3d41-4b77-ad69-6c598ee55c49\tIvan\tPetrov\tmale\t1980-12-29\t\\N\t+74951234567\\0\t1\t2019-01-05 18:45:00\t38\tcapricorn\t['Yesterday','Flowers']\t[255,0,0]\tMoscow\t[55.753215,37.622504]\t3.14\t214.1\t0.1\t5.8\t17060000000\t['meter','centimeter','kilometer']\t[1,0.01,1000]\t500\t[501,502]\n+c694ad8a-f714-4ea3-907d-fd54fb25d9b5\tNatalia\tSokolova\tfemale\t1992-03-08\t\\N\t\\N\t0\t\\N\t26\tpisces\t[]\t[100,200,50]\tPlymouth\t[50.403724,-4.142123]\t3.14159\t\\N\t0.007\t5.4\t-20000000000000\t[]\t[]\t\\N\t[]\n+a7da1aa6-f425-4789-8947-b034786ed374\tVasily\tSidorov\tmale\t1995-07-28\t\\N\t+442012345678\t1\t2018-12-30 00:00:00\t23\tleo\t['Sunny']\t[250,244,10]\tMurmansk\t[68.970682,33.074981]\t3.14159265358979\t100000000000\t800\t-3.2\t154400000\t['pound']\t[16]\t503\t[]\n+\n+Schema 02240_protobuf_format_syntax2:Syntax2Person\n+\n+Binary representation:\n+00000000  c0 04 0a f1 01 0a 24 61  37 35 32 32 31 35 38 2d  |......$a7522158-|\n+00000010  33 64 34 31 2d 34 62 37  37 2d 61 64 36 39 2d 36  |3d41-4b77-ad69-6|\n+00000020  63 35 39 38 65 65 35 35  63 34 39 12 04 49 76 61  |c598ee55c49..Iva|\n+00000030  6e 1a 06 50 65 74 72 6f  76 20 01 28 af 1f 32 03  |n..Petrov .(..2.|\n+00000040  70 6e 67 3a 0d 2b 37 34  39 35 31 32 33 34 35 36  |png:.+7495123456|\n+00000050  37 00 40 01 4d fc d0 30  5c 50 26 58 09 62 09 59  |7.@.M..0\\P&X.b.Y|\n+00000060  65 73 74 65 72 64 61 79  62 07 46 6c 6f 77 65 72  |esterdayb.Flower|\n+00000070  73 68 ff 01 68 00 68 00  72 06 4d 6f 73 63 6f 77  |sh..h.h.r.Moscow|\n+00000080  7a 08 4b 03 5f 42 72 7d  16 42 81 01 1f 85 eb 51  |z.K._Br}.B.....Q|\n+00000090  b8 1e 09 40 89 01 33 33  33 33 33 c3 6a 40 95 01  |...@..33333.j@..|\n+000000a0  cd cc cc 3d 9d 01 9a 99  b9 40 a0 01 80 c4 d7 8d  |...=.....@......|\n+000000b0  7f ab 01 0d 00 00 80 3f  0d 0a d7 23 3c 0d 00 00  |.......?...#<...|\n+000000c0  7a 44 12 05 6d 65 74 65  72 12 0a 63 65 6e 74 69  |zD..meter..centi|\n+000000d0  6d 65 74 65 72 12 09 6b  69 6c 6f 6d 65 74 65 72  |meter..kilometer|\n+000000e0  ac 01 b3 01 0b a2 06 0b  0b 08 f4 03 10 f5 03 10  |................|\n+000000f0  f6 03 0c 0c b4 01 0a 83  01 0a 24 63 36 39 34 61  |..........$c694a|\n+00000100  64 38 61 2d 66 37 31 34  2d 34 65 61 33 2d 39 30  |d8a-f714-4ea3-90|\n+00000110  37 64 2d 66 64 35 34 66  62 32 35 64 39 62 35 12  |7d-fd54fb25d9b5.|\n+00000120  07 4e 61 74 61 6c 69 61  1a 08 53 6f 6b 6f 6c 6f  |.Natalia..Sokolo|\n+00000130  76 61 20 00 28 a6 3f 32  03 6a 70 67 40 00 50 1a  |va .(.?2.jpg@.P.|\n+00000140  58 0b 68 64 68 c8 01 68  32 72 08 50 6c 79 6d 6f  |X.hdh..h2r.Plymo|\n+00000150  75 74 68 7a 08 6a 9d 49  42 46 8c 84 c0 81 01 6e  |uthz.j.IBF.....n|\n+00000160  86 1b f0 f9 21 09 40 95  01 42 60 e5 3b 9d 01 cd  |....!.@..B`.;...|\n+00000170  cc ac 40 a0 01 ff ff a9  ce 93 8c 09 0a c3 01 0a  |..@.............|\n+00000180  24 61 37 64 61 31 61 61  36 2d 66 34 32 35 2d 34  |$a7da1aa6-f425-4|\n+00000190  37 38 39 2d 38 39 34 37  2d 62 30 33 34 37 38 36  |789-8947-b034786|\n+000001a0  65 64 33 37 34 12 06 56  61 73 69 6c 79 1a 07 53  |ed374..Vasily..S|\n+000001b0  69 64 6f 72 6f 76 20 01  28 fb 48 32 03 62 6d 70  |idorov .(.H2.bmp|\n+000001c0  3a 0d 2b 34 34 32 30 31  32 33 34 35 36 37 38 40  |:.+442012345678@|\n+000001d0  01 4d 50 e0 27 5c 50 17  58 04 62 05 53 75 6e 6e  |.MP.'\\P.X.b.Sunn|\n+000001e0  79 68 fa 01 68 f4 01 68  0a 72 08 4d 75 72 6d 61  |yh..h..h.r.Murma|\n+000001f0  6e 73 6b 7a 08 fd f0 89  42 c8 4c 04 42 81 01 11  |nskz....B.L.B...|\n+00000200  2d 44 54 fb 21 09 40 89  01 00 00 00 e8 76 48 37  |-DT.!.@......vH7|\n+00000210  42 95 01 00 00 48 44 9d  01 cd cc 4c c0 a0 01 80  |B....HD....L....|\n+00000220  d4 9f 93 01 ab 01 0d 00  00 80 41 12 05 70 6f 75  |..........A..pou|\n+00000230  6e 64 ac 01 b3 01 0b a2  06 05 0b 08 f7 03 0c 0c  |nd..............|\n+00000240  b4 01                                             |..|\n+00000242\n+\n+MESSAGE #1 AT 0x00000005\n+uuid: \"a7522158-3d41-4b77-ad69-6c598ee55c49\"\n+name: \"Ivan\"\n+surname: \"Petrov\"\n+gender: male\n+birthDate: 4015\n+photo: \"png\"\n+phoneNumber: \"+74951234567\\000\"\n+isOnline: true\n+visitTime: 1546703100\n+age: 38\n+zodiacSign: capricorn\n+songs: \"Yesterday\"\n+songs: \"Flowers\"\n+color: 255\n+color: 0\n+color: 0\n+hometown: \"Moscow\"\n+location: 55.7532158\n+location: 37.6225052\n+pi: 3.14\n+lotteryWin: 214.1\n+someRatio: 0.1\n+temperature: 5.8\n+randomBigNumber: 17060000000\n+MeasureUnits {\n+  coef: 1\n+  coef: 0.01\n+  coef: 1000\n+  unit: \"meter\"\n+  unit: \"centimeter\"\n+  unit: \"kilometer\"\n+}\n+Nestiness {\n+  A {\n+    b {\n+      C {\n+        d: 500\n+        e: 501\n+        e: 502\n+      }\n+    }\n+  }\n+}\n+MESSAGE #2 AT 0x000000F9\n+uuid: \"c694ad8a-f714-4ea3-907d-fd54fb25d9b5\"\n+name: \"Natalia\"\n+surname: \"Sokolova\"\n+gender: female\n+birthDate: 8102\n+photo: \"jpg\"\n+isOnline: false\n+age: 26\n+zodiacSign: pisces\n+color: 100\n+color: 200\n+color: 50\n+hometown: \"Plymouth\"\n+location: 50.4037247\n+location: -4.14212322\n+pi: 3.14159\n+someRatio: 0.007\n+temperature: 5.4\n+randomBigNumber: -20000000000000\n+MESSAGE #3 AT 0x0000017F\n+uuid: \"a7da1aa6-f425-4789-8947-b034786ed374\"\n+name: \"Vasily\"\n+surname: \"Sidorov\"\n+gender: male\n+birthDate: 9339\n+photo: \"bmp\"\n+phoneNumber: \"+442012345678\"\n+isOnline: true\n+visitTime: 1546117200\n+age: 23\n+zodiacSign: leo\n+songs: \"Sunny\"\n+color: 250\n+color: 244\n+color: 10\n+hometown: \"Murmansk\"\n+location: 68.9706802\n+location: 33.0749817\n+pi: 3.14159265358979\n+lotteryWin: 100000000000\n+someRatio: 800\n+temperature: -3.2\n+randomBigNumber: 154400000\n+MeasureUnits {\n+  coef: 16\n+  unit: \"pound\"\n+}\n+Nestiness {\n+  A {\n+    b {\n+      C {\n+        d: 503\n+      }\n+    }\n+  }\n+}\n+\n+Binary representation is as expected\n+\n+Roundtrip:\n+a7522158-3d41-4b77-ad69-6c598ee55c49\tIvan\tPetrov\tmale\t1980-12-29\tpng\t+74951234567\\0\t1\t2019-01-05 18:45:00\t38\tcapricorn\t['Yesterday','Flowers']\t[255,0,0]\tMoscow\t[55.753216,37.622504]\t3.14\t214.1\t0.1\t5.8\t17060000000\t['meter','centimeter','kilometer']\t[1,0.01,1000]\t500\t[501,502]\n+c694ad8a-f714-4ea3-907d-fd54fb25d9b5\tNatalia\tSokolova\tfemale\t1992-03-08\tjpg\t\\N\t0\t\\N\t26\tpisces\t[]\t[100,200,50]\tPlymouth\t[50.403724,-4.142123]\t3.14159\t\\N\t0.007\t5.4\t-20000000000000\t[]\t[]\t\\N\t[]\n+a7da1aa6-f425-4789-8947-b034786ed374\tVasily\tSidorov\tmale\t1995-07-28\tbmp\t+442012345678\t1\t2018-12-30 00:00:00\t23\tleo\t['Sunny']\t[250,244,10]\tMurmansk\t[68.97068,33.074982]\t3.14159265358979\t100000000000\t800\t-3.2\t154400000\t['pound']\t[16]\t503\t[]\ndiff --git a/tests/queries/0_stateless/02240_protobuflist_format_persons.sh b/tests/queries/0_stateless/02240_protobuflist_format_persons.sh\nnew file mode 100755\nindex 000000000000..dec14b54eb21\n--- /dev/null\n+++ b/tests/queries/0_stateless/02240_protobuflist_format_persons.sh\n@@ -0,0 +1,127 @@\n+#!/usr/bin/env bash\n+# Tags: no-fasttest\n+\n+# End-to-end test of serialization/deserialization of a table with different\n+# data types to/from ProtobufList format.\n+#   Cf. 00825_protobuf_format_persons.sh\n+\n+# To generate reference file for this test use the following commands:\n+# ninja ProtobufDelimitedMessagesSerializer\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+SCHEMADIR=$CURDIR/format_schemas\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+set -eo pipefail\n+\n+# Run the client.\n+$CLICKHOUSE_CLIENT --multiquery <<EOF\n+DROP TABLE IF EXISTS persons_02240;\n+DROP TABLE IF EXISTS roundtrip_persons_02240;\n+DROP TABLE IF EXISTS alt_persons_02240;\n+DROP TABLE IF EXISTS str_persons_02240;\n+DROP TABLE IF EXISTS syntax2_persons_02240;\n+\n+CREATE TABLE persons_02240 (uuid UUID,\n+                            name String,\n+                            surname String,\n+                            gender Enum8('male'=1, 'female'=0),\n+                            birthDate Date,\n+                            photo Nullable(String),\n+                            phoneNumber Nullable(FixedString(13)),\n+                            isOnline UInt8,\n+                            visitTime Nullable(DateTime('Europe/Moscow')),\n+                            age UInt8,\n+                            zodiacSign Enum16('aries'=321, 'taurus'=420, 'gemini'=521, 'cancer'=621, 'leo'=723, 'virgo'=823,\n+                                              'libra'=923, 'scorpius'=1023, 'sagittarius'=1122, 'capricorn'=1222, 'aquarius'=120,\n+                                              'pisces'=219),\n+                            songs Array(String),\n+                            color Array(UInt8),\n+                            hometown LowCardinality(String),\n+                            location Array(Decimal32(6)),\n+                            pi Nullable(Float64),\n+                            lotteryWin Nullable(Decimal64(2)),\n+                            someRatio Float32,\n+                            temperature Decimal32(1),\n+                            randomBigNumber Int64,\n+                            measureUnits Nested(unit  String, coef Float32),\n+                            nestiness_a_b_c_d Nullable(UInt32),\n+                            \"nestiness_a_B.c_E\" Array(UInt32)\n+                           ) ENGINE = MergeTree ORDER BY tuple();\n+\n+INSERT INTO persons_02240 VALUES (toUUID('a7522158-3d41-4b77-ad69-6c598ee55c49'), 'Ivan', 'Petrov', 'male', toDate('1980-12-29'), 'png', '+74951234567', 1, toDateTime('2019-01-05 18:45:00', 'Europe/Moscow'), 38, 'capricorn', ['Yesterday', 'Flowers'], [255, 0, 0], 'Moscow', [55.753215, 37.622504], 3.14, 214.10, 0.1, 5.8, 17060000000, ['meter', 'centimeter', 'kilometer'], [1, 0.01, 1000], 500, [501, 502]);\n+INSERT INTO persons_02240 VALUES (toUUID('c694ad8a-f714-4ea3-907d-fd54fb25d9b5'), 'Natalia', 'Sokolova', 'female', toDate('1992-03-08'), 'jpg', NULL, 0, NULL, 26, 'pisces', [], [100, 200, 50], 'Plymouth', [50.403724, -4.142123], 3.14159, NULL, 0.007, 5.4, -20000000000000, [], [], NULL, []);\n+INSERT INTO persons_02240 VALUES (toUUID('a7da1aa6-f425-4789-8947-b034786ed374'), 'Vasily', 'Sidorov', 'male', toDate('1995-07-28'), 'bmp', '+442012345678', 1, toDateTime('2018-12-30 00:00:00', 'Europe/Moscow'), 23, 'leo', ['Sunny'], [250, 244, 10], 'Murmansk', [68.970682, 33.074981], 3.14159265358979, 100000000000, 800, -3.2, 154400000, ['pound'], [16], 503, []);\n+\n+SELECT * FROM persons_02240 ORDER BY name;\n+EOF\n+\n+# Note: if you actually look into below used schemafiles, you find that the message payload was duplicated. This is a workaround caused by Google protoc\n+# not being able to decode or reference nested elements, only top-level elements. In theory, we could make protoc read the top-level Envelope message but even\n+# that is not possible if it is length-delimited (and it is). Protobuf_length_delimited_encoder.py with '--format \"protobuflist\"' takes care to remove\n+# the top level Envelope message manually so that the remaining (binary) nested message looks to protoc like instances of the duplicated messages. Not pretty\n+# but does the job ...\n+\n+# Use schema 02240_protobuflist1_format_persons:Person\n+echo\n+echo \"Schema 02240_protobuflist1_format_persons:Person\"\n+BINARY_FILE_PATH=$(mktemp \"$CURDIR/02240_protobuflist1_format_persons.XXXXXX.binary\")\n+$CLICKHOUSE_CLIENT --query \"SELECT * FROM persons_02240 ORDER BY name FORMAT ProtobufList SETTINGS format_schema = '$SCHEMADIR/02240_protobuflist1_format_persons:Person'\" > $BINARY_FILE_PATH\n+echo\n+$CURDIR/helpers/protobuf_length_delimited_encoder.py --decode_and_check --format_schema \"$SCHEMADIR/02240_protobuflist1_format_persons:Person\" --input \"$BINARY_FILE_PATH\" --format \"protobuflist\"\n+echo\n+echo \"Roundtrip:\"\n+$CLICKHOUSE_CLIENT --query \"CREATE TABLE roundtrip_persons_02240 AS persons_02240\"\n+$CLICKHOUSE_CLIENT --query \"INSERT INTO roundtrip_persons_02240 FORMAT ProtobufList SETTINGS format_schema='$SCHEMADIR/02240_protobuflist1_format_persons:Person'\" < \"$BINARY_FILE_PATH\"\n+$CLICKHOUSE_CLIENT --query \"SELECT * FROM roundtrip_persons_02240 ORDER BY name\"\n+rm \"$BINARY_FILE_PATH\"\n+\n+# Use schema 02240_protobuflist2_format_persons:AltPerson\n+echo\n+echo \"Schema 02240_protobuflist2_format_persons:AltPerson\"\n+BINARY_FILE_PATH=$(mktemp \"$CURDIR/02240_protobuflist2_format_persons.XXXXXX.binary\")\n+$CLICKHOUSE_CLIENT --query \"SELECT * FROM persons_02240 ORDER BY name FORMAT ProtobufList SETTINGS format_schema = '$SCHEMADIR/02240_protobuflist2_format_persons:AltPerson'\" > $BINARY_FILE_PATH\n+echo\n+$CURDIR/helpers/protobuf_length_delimited_encoder.py --decode_and_check --format_schema \"$SCHEMADIR/02240_protobuflist2_format_persons:AltPerson\" --input \"$BINARY_FILE_PATH\" --format=\"protobuflist\"\n+echo\n+echo \"Roundtrip:\"\n+$CLICKHOUSE_CLIENT --query \"CREATE TABLE alt_persons_02240 AS persons_02240\"\n+$CLICKHOUSE_CLIENT --query \"INSERT INTO alt_persons_02240 FORMAT ProtobufList SETTINGS format_schema='$SCHEMADIR/02240_protobuflist2_format_persons:AltPerson'\" < \"$BINARY_FILE_PATH\"\n+$CLICKHOUSE_CLIENT --query \"SELECT * FROM alt_persons_02240 ORDER BY name\"\n+rm \"$BINARY_FILE_PATH\"\n+\n+# Use schema 02240_protobuflist3_format_persons:StrPerson\n+echo\n+echo \"Schema 02240_protobuflist3_format_persons:StrPerson as ProtobufList\"\n+BINARY_FILE_PATH=$(mktemp \"$CURDIR/02240_protobuflist3_format_persons.XXXXXX.binary\")\n+$CLICKHOUSE_CLIENT --query \"SELECT * FROM persons_02240 ORDER BY name FORMAT ProtobufList SETTINGS format_schema = '$SCHEMADIR/02240_protobuflist3_format_persons:StrPerson'\" > $BINARY_FILE_PATH\n+echo\n+$CURDIR/helpers/protobuf_length_delimited_encoder.py --decode_and_check --format_schema \"$SCHEMADIR/02240_protobuflist3_format_persons:StrPerson\" --input \"$BINARY_FILE_PATH\" --format=\"protobuflist\"\n+# echo\n+echo \"Roundtrip:\"\n+$CLICKHOUSE_CLIENT --query \"CREATE TABLE str_persons_02240 AS persons_02240\"\n+$CLICKHOUSE_CLIENT --query \"INSERT INTO str_persons_02240 FORMAT ProtobufList SETTINGS format_schema='$SCHEMADIR/02240_protobuflist3_format_persons:StrPerson'\" < \"$BINARY_FILE_PATH\"\n+$CLICKHOUSE_CLIENT --query \"SELECT * FROM str_persons_02240 ORDER BY name\"\n+rm \"$BINARY_FILE_PATH\"\n+\n+# Use schema 02240_protobuflist_format_syntax2:Syntax2Person\n+echo\n+echo \"Schema 02240_protobuf_format_syntax2:Syntax2Person\"\n+BINARY_FILE_PATH=$(mktemp \"$CURDIR/02240_protobuflist_format_persons.XXXXXX.binary\")\n+$CLICKHOUSE_CLIENT --query \"SELECT * FROM persons_02240 ORDER BY name FORMAT ProtobufList SETTINGS format_schema = '$SCHEMADIR/02240_protobuflist_format_persons_syntax2:Syntax2Person'\" > $BINARY_FILE_PATH\n+echo\n+$CURDIR/helpers/protobuf_length_delimited_encoder.py --decode_and_check --format_schema \"$SCHEMADIR/02240_protobuflist_format_persons_syntax2:Syntax2Person\" --input \"$BINARY_FILE_PATH\" --format=\"protobuflist\"\n+echo\n+echo \"Roundtrip:\"\n+$CLICKHOUSE_CLIENT --query \"CREATE TABLE syntax2_persons_02240 AS persons_02240\"\n+$CLICKHOUSE_CLIENT --query \"INSERT INTO syntax2_persons_02240 FORMAT ProtobufList SETTINGS format_schema='$SCHEMADIR/02240_protobuflist_format_persons_syntax2:Syntax2Person'\" < \"$BINARY_FILE_PATH\"\n+$CLICKHOUSE_CLIENT --query \"SELECT * FROM syntax2_persons_02240 ORDER BY name\"\n+rm \"$BINARY_FILE_PATH\"\n+\n+$CLICKHOUSE_CLIENT --multiquery <<EOF\n+DROP TABLE persons_02240;\n+DROP TABLE roundtrip_persons_02240;\n+DROP TABLE alt_persons_02240;\n+DROP TABLE str_persons_02240;\n+DROP TABLE syntax2_persons_02240;\n+EOF\ndiff --git a/tests/queries/0_stateless/format_schemas/02240_protobuflist1_format_persons.proto b/tests/queries/0_stateless/format_schemas/02240_protobuflist1_format_persons.proto\nnew file mode 100644\nindex 000000000000..8692136200fc\n--- /dev/null\n+++ b/tests/queries/0_stateless/format_schemas/02240_protobuflist1_format_persons.proto\n@@ -0,0 +1,100 @@\n+syntax = \"proto3\";\n+\n+enum Gender {\n+  female = 0;\n+  male = 1;\n+};\n+\n+enum ZodiacSign {\n+  aries = 0;\n+  taurus = 1;\n+  gemini = 2;\n+  cancer = 3;\n+  leo = 4;\n+  virgo = 5;\n+  libra = 6;\n+  scorpius = 7;\n+  sagittarius = 8;\n+  capricorn = 9;\n+  aquarius = 10;\n+  pisces = 11;\n+};\n+\n+message Nestiness\n+{\n+  message SubA {\n+    message SubB {\n+      message SubC {\n+        uint32 d = 1;\n+        repeated uint32 e = 2;\n+      };\n+      SubC c = 1;\n+    };\n+    SubB b = 100;\n+  };\n+  SubA a = 1;\n+};\n+\n+message Envelope {\n+  message Person {\n+    message MeasureUnit\n+    {\n+      string unit = 1;\n+      float coef = 2;\n+    };\n+    string uuid = 1;\n+    string name = 2;\n+    string surname = 3;\n+    Gender gender = 4;\n+    uint32 birthDate = 5;\n+    bytes photo = 6;\n+    string phoneNumber = 7;\n+    bool isOnline = 8;\n+    fixed32 visitTime = 9;\n+    uint32 age = 10;\n+    ZodiacSign zodiacSign = 11;\n+    repeated string songs = 12;\n+    repeated uint32 color = 13;\n+    string hometown = 14;\n+    repeated float location = 15;\n+    double pi = 16;\n+    double lotteryWin = 17;\n+    float someRatio = 18;\n+    float temperature = 19;\n+    sint64 randomBigNumber = 20;\n+    repeated MeasureUnit measureUnits = 21;\n+    Nestiness nestiness = 22;\n+  };\n+  repeated Person person = 1;\n+};\n+\n+// same as wrapped in Envelope, used for verification\n+message Person {\n+  message MeasureUnit\n+  {\n+    string unit = 1;\n+    float coef = 2;\n+  };\n+  string uuid = 1;\n+  string name = 2;\n+  string surname = 3;\n+  Gender gender = 4;\n+  uint32 birthDate = 5;\n+  bytes photo = 6;\n+  string phoneNumber = 7;\n+  bool isOnline = 8;\n+  fixed32 visitTime = 9;\n+  uint32 age = 10;\n+  ZodiacSign zodiacSign = 11;\n+  repeated string songs = 12;\n+  repeated uint32 color = 13;\n+  string hometown = 14;\n+  repeated float location = 15;\n+  double pi = 16;\n+  double lotteryWin = 17;\n+  float someRatio = 18;\n+  float temperature = 19;\n+  sint64 randomBigNumber = 20;\n+  repeated MeasureUnit measureUnits = 21;\n+  Nestiness nestiness = 22;\n+};\ndiff --git a/tests/queries/0_stateless/format_schemas/02240_protobuflist2_format_persons.proto b/tests/queries/0_stateless/format_schemas/02240_protobuflist2_format_persons.proto\nnew file mode 100644\nindex 000000000000..c718c3c28e4f\n--- /dev/null\n+++ b/tests/queries/0_stateless/format_schemas/02240_protobuflist2_format_persons.proto\n@@ -0,0 +1,83 @@\n+syntax = \"proto3\";\n+\n+enum OnlineStatus {\n+  offline = 0;\n+  online = 1;\n+};\n+\n+message Envelope {\n+  message AltPerson {\n+    enum Gender {\n+      male = 0;\n+      female = 1;\n+    };\n+    message Dummy {\n+      message Empty {};\n+      repeated Empty empty = 1;\n+      float z = 2;\n+    };\n+    repeated int32 location = 101 [packed=false];\n+    float pi = 103;\n+    bytes uuid = 300;\n+    bool newFieldBool = 299;\n+    string name = 2;\n+    Gender gender = 102;\n+    int32 zodiacSign = 130;\n+    int64 birthDate = 150;\n+    bytes age = 111;\n+    OnlineStatus isOnline = 1;\n+    double someRatio = 100;\n+    fixed64 visitTime = 15;\n+    Dummy newMessage = 1000;\n+    sfixed64 randomBigNumber = 140;\n+    repeated int32 newFieldInt = 104;\n+    repeated float color = 14;\n+    uint64 lotteryWin = 202;\n+    bytes surname = 10;\n+    uint64 phoneNumber = 5;\n+    sint32 temperature = 41;\n+    string newFieldStr = 21;\n+    repeated string measureUnits_unit = 99;\n+    repeated float measureUnits_coef = 88;\n+    uint32 nestiness_a_b_c_d = 900;\n+    repeated uint32 nestiness_a_b_c_e = 901;\n+  };\n+};\n+\n+// same as wrapped in Envelope, used for verification\n+message AltPerson {\n+  enum Gender {\n+    male = 0;\n+    female = 1;\n+  };\n+  message Dummy {\n+    message Empty {};\n+    repeated Empty empty = 1;\n+    float z = 2;\n+  };\n+  repeated int32 location = 101 [packed=false];\n+  float pi = 103;\n+  bytes uuid = 300;\n+  bool newFieldBool = 299;\n+  string name = 2;\n+  Gender gender = 102;\n+  int32 zodiacSign = 130;\n+  int64 birthDate = 150;\n+  bytes age = 111;\n+  OnlineStatus isOnline = 1;\n+  double someRatio = 100;\n+  fixed64 visitTime = 15;\n+  Dummy newMessage = 1000;\n+  sfixed64 randomBigNumber = 140;\n+  repeated int32 newFieldInt = 104;\n+  repeated float color = 14;\n+  uint64 lotteryWin = 202;\n+  bytes surname = 10;\n+  uint64 phoneNumber = 5;\n+  sint32 temperature = 41;\n+  string newFieldStr = 21;\n+  repeated string measureUnits_unit = 99;\n+  repeated float measureUnits_coef = 88;\n+  uint32 nestiness_a_b_c_d = 900;\n+  repeated uint32 nestiness_a_b_c_e = 901;\n+};\ndiff --git a/tests/queries/0_stateless/format_schemas/02240_protobuflist3_format_persons.proto b/tests/queries/0_stateless/format_schemas/02240_protobuflist3_format_persons.proto\nnew file mode 100644\nindex 000000000000..7f0bab360076\n--- /dev/null\n+++ b/tests/queries/0_stateless/format_schemas/02240_protobuflist3_format_persons.proto\n@@ -0,0 +1,78 @@\n+syntax = \"proto3\";\n+\n+message Envelope {\n+  message StrPerson {\n+    message MeasureUnits\n+    {\n+      repeated string unit = 1;\n+      repeated string coef = 2;\n+    };\n+    message NestinessA\n+    {\n+      message SubBC {\n+        string d = 1;\n+        repeated string e = 2;\n+      };\n+      SubBC b_c = 1;\n+    };\n+    string uuid = 1;\n+    string name = 2;\n+    string surname = 3;\n+    string gender = 4;\n+    string birthDate = 5;\n+    string phoneNumber = 7;\n+    string isOnline = 8;\n+    string visitTime = 9;\n+    string age = 10;\n+    string zodiacSign = 11;\n+    repeated string songs = 12;\n+    repeated string color = 13;\n+    string hometown = 14;\n+    repeated string location = 15;\n+    string pi = 16;\n+    string lotteryWin = 17;\n+    string someRatio = 18;\n+    string temperature = 19;\n+    string randomBigNumber = 20;\n+    MeasureUnits measureUnits = 21;\n+    NestinessA nestiness_a = 22;\n+  };\n+};\n+\n+// same as wrapped in Envelope, used for verification\n+message StrPerson {\n+  message MeasureUnits\n+  {\n+    repeated string unit = 1;\n+    repeated string coef = 2;\n+  };\n+  message NestinessA\n+  {\n+    message SubBC {\n+      string d = 1;\n+      repeated string e = 2;\n+    };\n+    SubBC b_c = 1;\n+  };\n+  string uuid = 1;\n+  string name = 2;\n+  string surname = 3;\n+  string gender = 4;\n+  string birthDate = 5;\n+  string phoneNumber = 7;\n+  string isOnline = 8;\n+  string visitTime = 9;\n+  string age = 10;\n+  string zodiacSign = 11;\n+  repeated string songs = 12;\n+  repeated string color = 13;\n+  string hometown = 14;\n+  repeated string location = 15;\n+  string pi = 16;\n+  string lotteryWin = 17;\n+  string someRatio = 18;\n+  string temperature = 19;\n+  string randomBigNumber = 20;\n+  MeasureUnits measureUnits = 21;\n+  NestinessA nestiness_a = 22;\n+};\ndiff --git a/tests/queries/0_stateless/format_schemas/02240_protobuflist_format_persons_syntax2.proto b/tests/queries/0_stateless/format_schemas/02240_protobuflist_format_persons_syntax2.proto\nnew file mode 100644\nindex 000000000000..ff286e467850\n--- /dev/null\n+++ b/tests/queries/0_stateless/format_schemas/02240_protobuflist_format_persons_syntax2.proto\n@@ -0,0 +1,128 @@\n+syntax = \"proto2\";\n+\n+message Envelope {\n+  message Syntax2Person {\n+    enum Gender {\n+      female = 0;\n+      male = 1;\n+    };\n+\n+    enum ZodiacSign {\n+      aries = 0;\n+      taurus = 1;\n+      gemini = 2;\n+      cancer = 3;\n+      leo = 4;\n+      virgo = 5;\n+      libra = 6;\n+      scorpius = 7;\n+      sagittarius = 8;\n+      capricorn = 9;\n+      aquarius = 10;\n+      pisces = 11;\n+    };\n+\n+    required string uuid = 1;\n+    required string name = 2;\n+    required string surname = 3;\n+    required Gender gender = 4;\n+    required uint32 birthDate = 5;\n+    optional bytes photo = 6;\n+    optional string phoneNumber = 7;\n+    optional bool isOnline = 8;\n+    optional fixed32 visitTime = 9;\n+    optional uint32 age = 10;\n+    optional ZodiacSign zodiacSign = 11;\n+    repeated string songs = 12;\n+    repeated uint32 color = 13;\n+    optional string hometown = 14 [default='Moscow'];\n+    repeated float location = 15 [packed=true];\n+    optional double pi = 16;\n+    optional double lotteryWin = 17;\n+    optional float someRatio = 18;\n+    optional float temperature = 19;\n+    optional sint64 randomBigNumber = 20;\n+    optional group MeasureUnits = 21 {\n+      repeated float coef = 1;\n+      repeated string unit = 2;\n+    };\n+    optional group Nestiness = 22\n+    {\n+      optional group A = 1 {\n+        message SubB {\n+          optional group C = 1 {\n+            optional uint32 d = 1;\n+            repeated uint32 e = 2;\n+          };\n+        };\n+        optional SubB b = 100;\n+      };\n+    };\n+    optional string newFieldStr = 23 [default='abc'];\n+    optional int32 newFieldInt = 24 [default=-11];\n+    optional bool newBool = 25 [default=true];\n+  };\n+};\n+\n+// same as wrapped in Envelope, used for verification\n+message Syntax2Person {\n+  enum Gender {\n+    female = 0;\n+    male = 1;\n+  };\n+\n+  enum ZodiacSign {\n+    aries = 0;\n+    taurus = 1;\n+    gemini = 2;\n+    cancer = 3;\n+    leo = 4;\n+    virgo = 5;\n+    libra = 6;\n+    scorpius = 7;\n+    sagittarius = 8;\n+    capricorn = 9;\n+    aquarius = 10;\n+    pisces = 11;\n+  };\n+\n+  required string uuid = 1;\n+  required string name = 2;\n+  required string surname = 3;\n+  required Gender gender = 4;\n+  required uint32 birthDate = 5;\n+  optional bytes photo = 6;\n+  optional string phoneNumber = 7;\n+  optional bool isOnline = 8;\n+  optional fixed32 visitTime = 9;\n+  optional uint32 age = 10;\n+  optional ZodiacSign zodiacSign = 11;\n+  repeated string songs = 12;\n+  repeated uint32 color = 13;\n+  optional string hometown = 14 [default='Moscow'];\n+  repeated float location = 15 [packed=true];\n+  optional double pi = 16;\n+  optional double lotteryWin = 17;\n+  optional float someRatio = 18;\n+  optional float temperature = 19;\n+  optional sint64 randomBigNumber = 20;\n+  optional group MeasureUnits = 21 {\n+    repeated float coef = 1;\n+    repeated string unit = 2;\n+  };\n+  optional group Nestiness = 22\n+  {\n+    optional group A = 1 {\n+      message SubB {\n+        optional group C = 1 {\n+          optional uint32 d = 1;\n+          repeated uint32 e = 2;\n+        };\n+      };\n+      optional SubB b = 100;\n+    };\n+  };\n+  optional string newFieldStr = 23 [default='abc'];\n+  optional int32 newFieldInt = 24 [default=-11];\n+  optional bool newBool = 25 [default=true];\n+};\ndiff --git a/tests/queries/0_stateless/helpers/protobuf_length_delimited_encoder.py b/tests/queries/0_stateless/helpers/protobuf_length_delimited_encoder.py\nindex 893180d6cc10..090bb1193213 100755\n--- a/tests/queries/0_stateless/helpers/protobuf_length_delimited_encoder.py\n+++ b/tests/queries/0_stateless/helpers/protobuf_length_delimited_encoder.py\n@@ -5,6 +5,7 @@\n \n import argparse\n import os.path\n+import io\n import struct\n import subprocess\n import sys\n@@ -56,11 +57,15 @@ def __init__(self, format_schema):\n             self.schemaname = self.schemaname + \".proto\"\n         self.message_type = splitted[1]\n \n-def decode(input, output, format_schema):\n+def decode(input, output, format_schema, format):\n     if not type(format_schema) is FormatSchemaSplitted:\n         format_schema = FormatSchemaSplitted(format_schema)\n     msgindex = 1\n+    if format == 'protobuflist':\n+        read_varint(input) # envelope msg size\n     while True:\n+        if format == 'protobuflist':\n+            read_varint(input) # wiretype and field id of nested msg\n         sz = read_varint(input)\n         if sz is None:\n             break\n@@ -82,11 +87,12 @@ def decode(input, output, format_schema):\n         output.flush()\n         msgindex = msgindex + 1\n \n-def encode(input, output, format_schema):\n+def encode(input, output, format_schema, format):\n     if not type(format_schema) is FormatSchemaSplitted:\n         format_schema = FormatSchemaSplitted(format_schema)\n     line_offset = input.tell()\n     line = input.readline()\n+    buf = io.BytesIO()\n     while True:\n         if len(line) == 0:\n             break\n@@ -109,11 +115,18 @@ def encode(input, output, format_schema):\n             msgbin = proc.communicate(msg)[0]\n             if proc.returncode != 0:\n                 raise RuntimeError(\"protoc returned code \" + str(proc.returncode))\n-        write_varint(output, len(msgbin))\n-        output.write(msgbin)\n-        output.flush()\n+        if format == 'protobuflist':\n+            field_number = 1\n+            wire_type = 2 # length-delimited\n+            write_varint(buf, (field_number << 3) | wire_type)\n+        write_varint(buf, len(msgbin))\n+        buf.write(msgbin)\n+    if format == 'protobuflist':\n+        write_varint(output, len(buf.getvalue()))\n+    output.write(buf.getvalue())\n+    output.flush()\n \n-def decode_and_check(input, output, format_schema):\n+def decode_and_check(input, output, format_schema, format):\n     input_data = input.read()\n     output.write(b\"Binary representation:\\n\")\n     output.flush()\n@@ -125,13 +138,13 @@ def decode_and_check(input, output, format_schema):\n         tmp_input.write(input_data)\n         tmp_input.flush()\n         tmp_input.seek(0)\n-        decode(tmp_input, tmp_decoded, format_schema)\n+        decode(tmp_input, tmp_decoded, format_schema, format)\n         tmp_decoded.seek(0)\n         decoded_text = tmp_decoded.read()\n         output.write(decoded_text)\n         output.flush()\n         tmp_decoded.seek(0)\n-        encode(tmp_decoded, tmp_encoded, format_schema)\n+        encode(tmp_decoded, tmp_encoded, format_schema, format)\n         tmp_encoded.seek(0)\n         encoded_data = tmp_encoded.read()\n \n@@ -149,6 +162,7 @@ def decode_and_check(input, output, format_schema):\n     parser.add_argument('--input', help='The input file, the standard input will be used if not specified.')\n     parser.add_argument('--output', help='The output file, the standard output will be used if not specified')\n     parser.add_argument('--format_schema', required=True, help='Format schema in the format \"schemafile:MessageType\"')\n+    parser.add_argument('--format', choices=['protobuf', 'protobuflist'], default='protobuf', help='The input/output format, \"protobuf\" if not specified')\n     group = parser.add_mutually_exclusive_group(required=True)\n     group.add_argument('--encode', action='store_true', help='Specify to encode length-delimited messages.'\n                        'The utility will read text-format messages of the given type from the input and write it in binary to the output.')\n@@ -169,11 +183,11 @@ def decode_and_check(input, output, format_schema):\n         output = custom_output_file if custom_output_file else sys.stdout.buffer\n \n         if args.encode:\n-            encode(input, output, args.format_schema)\n+            encode(input, output, args.format_schema, args.format)\n         elif args.decode:\n-            decode(input, output, args.format_schema)\n+            decode(input, output, args.format_schema, args.format)\n         elif args.decode_and_check:\n-            decode_and_check(input, output, args.format_schema)\n+            decode_and_check(input, output, args.format_schema, args.format)\n \n     finally:\n         if custom_input_file:\n",
  "problem_statement": "Output all rows as single list in Protobuf format\nCurrently `Protobuf` outputs each row as a separate message, but some consumers require a list.\r\nWe could add a new format `ProtobufList` that does that.\n",
  "hints_text": "I would like to work on this \nIs there any new progress on this issue? @akuzm \r\n\r\nIf not, could you assign this issue to me : )  I would like to work on it.\n> If not, could you assign this issue to me : ) I would like to work on it.\r\n\r\nSure, your help will be very appreciated!\nI found that the gRPC interface may already contain multi-rows supported. \r\n\r\nTest by grpcurl:\r\n```\r\ngrpcurl -plaintext -d '{\"query\": \"SELECT metric from system.metrics\"}' -proto src/Server/grpc_protos/clickhouse_grpc.proto 127.0.0.1:9100 clickhouse.grpc.ClickHouse/ExecuteQuery\r\n```\r\n\r\nResponse:\r\n```\r\n{\r\n  \"output\": \"UXVlcnkKTWVyZ2UKUGFydE11dGF0aW9uClJlcGxpY2F0ZWRGZXRjaApSZXBsaWNhdGVkU2VuZApSZXBsaWNhdGVkQ2hlY2tzCkJhY2tncm91bmRQb29sVGFzawpCYWNrZ3JvdW5kRmV0Y2hlc1Bvb2xUYXNrCkJhY2tncm91bmRNb3ZlUG9vbFRhc2sKQmFja2dyb3VuZFNjaGVkdWxlUG9vbFRhc2sKQmFja2dyb3VuZEJ1ZmZlckZsdXNoU2NoZWR1bGVQb29sVGFzawpCYWNrZ3JvdW5kRGlzdHJpYnV0ZWRTY2hlZHVsZVBvb2xUYXNrCkJhY2tncm91bmRNZXNzYWdlQnJva2VyU2NoZWR1bGVQb29sVGFzawpDYWNoZURpY3Rpb25hcnlVcGRhdGVRdWV1ZUJhdGNoZXMKQ2FjaGVEaWN0aW9uYXJ5VXBkYXRlUXVldWVLZXlzCkRpc2tTcGFjZVJlc2VydmVkRm9yTWVyZ2UKRGlzdHJpYnV0ZWRTZW5kClF1ZXJ5UHJlZW1wdGVkClRDUENvbm5lY3Rpb24KTXlTUUxDb25uZWN0aW9uCkhUVFBDb25uZWN0aW9uCkludGVyc2VydmVyQ29ubmVjdGlvbgpQb3N0Z3JlU1FMQ29ubmVjdGlvbgpPcGVuRmlsZUZvclJlYWQKT3BlbkZpbGVGb3JXcml0ZQpSZWFkCldyaXRlCk5ldHdvcmtSZWNlaXZlCk5ldHdvcmtTZW5kClNlbmRTY2FsYXJzClNlbmRFeHRlcm5hbFRhYmxlcwpRdWVyeVRocmVhZApSZWFkb25seVJlcGxpY2EKTWVtb3J5VHJhY2tpbmcKRXBoZW1lcmFsTm9kZQpab29LZWVwZXJTZXNzaW9uClpvb0tlZXBlcldhdGNoClpvb0tlZXBlclJlcXVlc3QKRGVsYXllZEluc2VydHMKQ29udGV4dExvY2tXYWl0ClN0b3JhZ2VCdWZmZXJSb3dzClN0b3JhZ2VCdWZmZXJCeXRlcwpEaWN0Q2FjaGVSZXF1ZXN0cwpSZXZpc2lvbgpWZXJzaW9uSW50ZWdlcgpSV0xvY2tXYWl0aW5nUmVhZGVycwpSV0xvY2tXYWl0aW5nV3JpdGVycwpSV0xvY2tBY3RpdmVSZWFkZXJzClJXTG9ja0FjdGl2ZVdyaXRlcnMKR2xvYmFsVGhyZWFkCkdsb2JhbFRocmVhZEFjdGl2ZQpMb2NhbFRocmVhZApMb2NhbFRocmVhZEFjdGl2ZQpEaXN0cmlidXRlZEZpbGVzVG9JbnNlcnQKQnJva2VuRGlzdHJpYnV0ZWRGaWxlc1RvSW5zZXJ0ClRhYmxlc1RvRHJvcFF1ZXVlU2l6ZQpNYXhERExFbnRyeUlECk1heFB1c2hlZERETEVudHJ5SUQKUGFydHNUZW1wb3JhcnkKUGFydHNQcmVDb21taXR0ZWQKUGFydHNDb21taXR0ZWQKUGFydHNPdXRkYXRlZApQYXJ0c0RlbGV0aW5nClBhcnRzRGVsZXRlT25EZXN0cm95ClBhcnRzV2lkZQpQYXJ0c0NvbXBhY3QKUGFydHNJbk1lbW9yeQpNTWFwcGVkRmlsZXMKTU1hcHBlZEZpbGVCeXRlcwpBc3luY0RyYWluZWRDb25uZWN0aW9ucwpBY3RpdmVBc3luY0RyYWluZWRDb25uZWN0aW9ucwpTeW5jRHJhaW5lZENvbm5lY3Rpb25zCkFjdGl2ZVN5bmNEcmFpbmVkQ29ubmVjdGlvbnMKQXN5bmNocm9ub3VzUmVhZFdhaXQK\",\r\n  \"progress\": {\r\n    \"readRows\": \"74\",\r\n    \"readBytes\": \"8569\"\r\n  },\r\n  \"stats\": {\r\n    \"rows\": \"74\",\r\n    \"blocks\": \"1\",\r\n    \"allocatedBytes\": \"6144\"\r\n  }\r\n}\r\n```\r\n\r\nWe can decode the output base64 string:\r\n```\r\nQuery\r\nMerge\r\nPartMutation\r\nReplicatedFetch\r\nReplicatedSend\r\nReplicatedChecks\r\nBackgroundPoolTask\r\nBackgroundFetchesPoolTask\r\nBackgroundMovePoolTask\r\nBackgroundSchedulePoolTask\r\nBackgroundBufferFlushSchedulePoolTask\r\nBackgroundDistributedSchedulePoolTask\r\nBackgroundMessageBrokerSchedulePoolTask\r\nCacheDictionaryUpdateQueueBatches\r\nCacheDictionaryUpdateQueueKeys\r\nDiskSpaceReservedForMerge\r\nDistributedSend\r\nQueryPreempted\r\nTCPConnection\r\nMySQLConnection\r\nHTTPConnection\r\nInterserverConnection\r\nPostgreSQLConnection\r\nOpenFileForRead\r\nOpenFileForWrite\r\nRead\r\nWrite\r\nNetworkReceive\r\nNetworkSend\r\nSendScalars\r\nSendExternalTables\r\nQueryThread\r\nReadonlyReplica\r\nMemoryTracking\r\nEphemeralNode\r\nZooKeeperSession\r\nZooKeeperWatch\r\nZooKeeperRequest\r\nDelayedInserts\r\nContextLockWait\r\nStorageBufferRows\r\nStorageBufferBytes\r\nDictCacheRequests\r\nRevision\r\nVersionInteger\r\nRWLockWaitingReaders\r\nRWLockWaitingWriters\r\nRWLockActiveReaders\r\nRWLockActiveWriters\r\nGlobalThread\r\nGlobalThreadActive\r\nLocalThread\r\nLocalThreadActive\r\nDistributedFilesToInsert\r\nBrokenDistributedFilesToInsert\r\nTablesToDropQueueSize\r\nMaxDDLEntryID\r\nMaxPushedDDLEntryID\r\nPartsTemporary\r\nPartsPreCommitted\r\nPartsCommitted\r\nPartsOutdated\r\nPartsDeleting\r\nPartsDeleteOnDestroy\r\nPartsWide\r\nPartsCompact\r\nPartsInMemory\r\nMMappedFiles\r\nMMappedFileBytes\r\nAsyncDrainedConnections\r\nActiveAsyncDrainedConnections\r\nSyncDrainedConnections\r\nActiveSyncDrainedConnections\r\nAsynchronousReadWait\r\n```\r\n\r\nIt seems that the issue has been done. Is that right? @akuzm \n> Currently `Protobuf` outputs each row as a separate message, but some consumers require a list. We could add a new format `ProtobufList` that does that.\r\n\r\nHi @akuzm \r\n\r\nJust as I said above, the multi-rows format in gRPC has been implemented now. All rows are included into a single bytes field `output` in the message `Result`.\r\n\r\nDon't you mean to say that we can split the output bytes array into `list[bytes]` which each row is encoded into one element?\n@An-DJ We want to have this option in format level.\r\nSo, you can use `ProtobufList` format with HTTP interface, in clickhouse-client, in clickhouse-local, everywhere.\nRobert Schulze will be doing it.\nCreated a GitHub account in the meantime. Feel free to assign to me.\nJust for my understanding: The [docs for the Protobuf input/output format](https://clickhouse.com/docs/en/interfaces/formats/#protobuf) state that the schemafile for the current format **Protobuf** looks like this:\r\n\r\n```\r\nsyntax = \"proto3\";\r\n\r\nmessage MessageType {\r\n  string name = 1;                     // standard ClickHouse String data type\r\n  string surname = 2;                  // standard ClickHouse String data type\r\n  uint32 birthDate = 3;                // standard ClickHouse UInt32 data type\r\n  repeated string phoneNumbers = 4;    // I believe this maps to some ARRAY data type in ClickHouse\r\n};\r\n```\r\nThe table will be serialized as a sequence of messages (= one per row). Because messages are prefixed each with their byte size (as varint, i.e. \"length-delimited\" format), space is wasted unnecessarily. This becomes more painful when the ratio between the number of table rows and the number of columns grows.\r\n\r\nSo the goal would be to add a format **ProtobufList** with a schemafile\r\n\r\n```\r\nsyntax = \"proto3\";\r\n\r\nmessage MessageType {\r\n  message Row {\r\n    string name = 1;\r\n    string surname = 2;\r\n    uint32 birthDate = 3;\r\n    repeated string phoneNumbers = 4;\r\n  }\r\n\r\n  repeated Row = 1;\r\n};\r\n```\r\n\r\nwhich produces a _list of rows_ within a single message, see [akuzms first comment](https://github.com/ClickHouse/ClickHouse/issues/16436#issue-730767466).\r\n\r\nWe would save the repeated per-message size prefix. However, protobuf would still somehow need to discriminate Row-s in the serialized representation, and as far as I understand, this will be done using a standard 1-byte key before each Row which encodes the field id (1 for Row), and the wire type (I am not sure what is used for a composite structures like here, perhaps \"Start Group\" as per [protobuf encoding documentation](https://developers.google.com/protocol-buffers/docs/encoding)). As a result, the space savings will be less significant than desired.\r\n\r\nSo my question would be if above proposed format is what you had in mind or something else?\nThe schema for `ProtobufList` looks fine to me. It contains a single repeated field, as I would expect. I suppose, here we don't have a goal to save some extra bytes, but just make it more convenient for user. (Also, I understood, `packed repeated field` are only for scalar types).\r\n",
  "created_at": "2022-03-09T09:55:33Z"
}