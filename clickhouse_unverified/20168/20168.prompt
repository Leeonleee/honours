You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Compression for Memory tables
Add very simple in-memory compression interface that works directly for columns.

Add method `IColumn::compress`. It returns either:
- `CompressedColumnPtr` that is `shared_ptr` of `ICompressedColumn`, that has the only method `virtual ColumnPtr decompress()`;
- `std::function<ColumnPtr()>` - a function object to get decompressed column back;

This method will take no parameters for compression but it can be extended later.

It should compress the whole buffers of columns as a single block with lz4. The usual compression interface with Read/Write buffers, support for checksums, etc. is not used.

Add support for SETTINGS clause for Memory table with the setting `compress = 0|1`.

The hypothesis is that compressed Memory tables will work faster on SELECTs by using less memory bandwidth.
Actually we already confirmed this hypothesis with MergeTree tables: they are compressed by default and it works faster than with disabled compression even if data is in memory and disk is not used.
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
