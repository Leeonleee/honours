diff --git a/src/IO/tests/gtest_peekable_read_buffer.cpp b/src/IO/tests/gtest_peekable_read_buffer.cpp
index fb4b0b799b48..8c491338bd3d 100644
--- a/src/IO/tests/gtest_peekable_read_buffer.cpp
+++ b/src/IO/tests/gtest_peekable_read_buffer.cpp
@@ -9,7 +9,6 @@
 namespace DB::ErrorCodes
 {
     extern const int LOGICAL_ERROR;
-    extern const int MEMORY_LIMIT_EXCEEDED;
 }
 
 static void readAndAssert(DB::ReadBuffer & buf, const char * str)
@@ -40,7 +39,7 @@ try
     DB::ReadBufferFromString b4(s4);
 
     DB::ConcatReadBuffer concat({&b1, &b2, &b3, &b4});
-    DB::PeekableReadBuffer peekable(concat, 0, 16);
+    DB::PeekableReadBuffer peekable(concat, 0);
 
     ASSERT_TRUE(!peekable.eof());
     assertAvailable(peekable, "0123456789");
@@ -48,6 +47,8 @@ try
         DB::PeekableReadBufferCheckpoint checkpoint{peekable};
         readAndAssert(peekable, "01234");
     }
+
+#ifndef ABORT_ON_LOGICAL_ERROR
     bool exception = false;
     try
     {
@@ -60,6 +61,7 @@ try
         exception = true;
     }
     ASSERT_TRUE(exception);
+#endif
     assertAvailable(peekable, "56789");
 
     readAndAssert(peekable, "56");
@@ -70,19 +72,10 @@ try
     peekable.dropCheckpoint();
     assertAvailable(peekable, "789");
 
-    exception = false;
-    try
     {
         DB::PeekableReadBufferCheckpoint checkpoint{peekable, true};
-        peekable.ignore(30);
-    }
-    catch (DB::Exception & e)
-    {
-        if (e.code() != DB::ErrorCodes::MEMORY_LIMIT_EXCEEDED)
-            throw;
-        exception = true;
+        peekable.ignore(20);
     }
-    ASSERT_TRUE(exception);
     assertAvailable(peekable, "789qwertyuiop");
 
     readAndAssert(peekable, "789qwertyu");
diff --git a/tests/queries/0_stateless/01184_insert_values_huge_strings.reference b/tests/queries/0_stateless/01184_insert_values_huge_strings.reference
new file mode 100644
index 000000000000..1c42cb6d5edf
--- /dev/null
+++ b/tests/queries/0_stateless/01184_insert_values_huge_strings.reference
@@ -0,0 +1,3 @@
+1000100
+1000100
+1000100
diff --git a/tests/queries/0_stateless/01184_insert_values_huge_strings.sh b/tests/queries/0_stateless/01184_insert_values_huge_strings.sh
new file mode 100755
index 000000000000..9b63f401a59f
--- /dev/null
+++ b/tests/queries/0_stateless/01184_insert_values_huge_strings.sh
@@ -0,0 +1,20 @@
+#!/usr/bin/env bash
+
+CURDIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
+# shellcheck source=../shell_config.sh
+. "$CURDIR"/../shell_config.sh
+
+$CLICKHOUSE_CLIENT -q "drop table if exists huge_strings"
+$CLICKHOUSE_CLIENT -q "create table huge_strings (n UInt64, l UInt64, s String, h UInt64) engine=MergeTree order by n"
+
+for _ in {1..10}; do
+  $CLICKHOUSE_CLIENT -q "select number, (rand() % 100*1000*1000) as l, repeat(randomString(l/1000/1000), 1000*1000) as s, cityHash64(s) from numbers(10) format Values" | $CLICKHOUSE_CLIENT -q "insert into huge_strings values" &
+  $CLICKHOUSE_CLIENT -q "select number % 10, (rand() % 100) as l, randomString(l) as s, cityHash64(s) from numbers(100000)" | $CLICKHOUSE_CLIENT -q "insert into huge_strings format TSV" &
+done;
+wait
+
+$CLICKHOUSE_CLIENT -q "select count() from huge_strings"
+$CLICKHOUSE_CLIENT -q "select sum(l = length(s)) from huge_strings"
+$CLICKHOUSE_CLIENT -q "select sum(h = cityHash64(s)) from huge_strings"
+
+$CLICKHOUSE_CLIENT -q "drop table huge_strings"
