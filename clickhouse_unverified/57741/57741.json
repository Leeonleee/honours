{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 57741,
  "instance_id": "ClickHouse__ClickHouse-57741",
  "issue_numbers": [
    "57736"
  ],
  "base_commit": "efb82a93c5fd365caf01a850cb90511153e9fa7d",
  "patch": "diff --git a/src/Analyzer/Passes/QueryAnalysisPass.cpp b/src/Analyzer/Passes/QueryAnalysisPass.cpp\nindex 1e63d5ca8e43..a3b461f32ea4 100644\n--- a/src/Analyzer/Passes/QueryAnalysisPass.cpp\n+++ b/src/Analyzer/Passes/QueryAnalysisPass.cpp\n@@ -2153,19 +2153,32 @@ void QueryAnalyzer::replaceNodesWithPositionalArguments(QueryTreeNodePtr & node_\n             node_to_replace = &sort_node->getExpression();\n \n         auto * constant_node = (*node_to_replace)->as<ConstantNode>();\n-        if (!constant_node || constant_node->getValue().getType() != Field::Types::UInt64)\n+\n+        if (!constant_node\n+            || (constant_node->getValue().getType() != Field::Types::UInt64 && constant_node->getValue().getType() != Field::Types::Int64))\n             continue;\n \n-        UInt64 positional_argument_number = constant_node->getValue().get<UInt64>();\n-        if (positional_argument_number == 0 || positional_argument_number > projection_nodes.size())\n-            throw Exception(ErrorCodes::BAD_ARGUMENTS,\n+        UInt64 pos;\n+        if (constant_node->getValue().getType() == Field::Types::UInt64)\n+        {\n+            pos = constant_node->getValue().get<UInt64>();\n+        }\n+        else // Int64\n+        {\n+            auto value = constant_node->getValue().get<Int64>();\n+            pos = value > 0 ? value : projection_nodes.size() + value + 1;\n+        }\n+\n+\n+        if (!pos || pos > projection_nodes.size())\n+            throw Exception(\n+                ErrorCodes::BAD_ARGUMENTS,\n                 \"Positional argument number {} is out of bounds. Expected in range [1, {}]. In scope {}\",\n-                positional_argument_number,\n+                pos,\n                 projection_nodes.size(),\n                 scope.scope_node->formatASTForErrorMessage());\n \n-        --positional_argument_number;\n-        *node_to_replace = projection_nodes[positional_argument_number];\n+        *node_to_replace = projection_nodes[--pos];\n     }\n }\n \ndiff --git a/src/Interpreters/replaceForPositionalArguments.cpp b/src/Interpreters/replaceForPositionalArguments.cpp\nindex 241dd7cf92c2..8306da17f529 100644\n--- a/src/Interpreters/replaceForPositionalArguments.cpp\n+++ b/src/Interpreters/replaceForPositionalArguments.cpp\n@@ -27,14 +27,29 @@ bool replaceForPositionalArguments(ASTPtr & argument, const ASTSelectQuery * sel\n         return false;\n \n     auto which = ast_literal->value.getType();\n-    if (which != Field::Types::UInt64)\n+    if (which != Field::Types::UInt64 && which != Field::Types::Int64)\n         return false;\n \n-    auto pos = ast_literal->value.get<UInt64>();\n+    UInt64 pos;\n+\n+    if (which == Field::Types::UInt64)\n+    {\n+        pos = ast_literal->value.get<UInt64>();\n+    }\n+    else if (which == Field::Types::Int64)\n+    {\n+        auto value = ast_literal->value.get<Int64>();\n+        pos = value > 0 ? value : columns.size() + value + 1;\n+    }\n+    else\n+    {\n+        return false;\n+    }\n+\n+\n     if (!pos || pos > columns.size())\n-        throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,\n-                \"Positional argument out of bounds: {} (expected in range [1, {}]\",\n-                        pos, columns.size());\n+        throw Exception(\n+            ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT, \"Positional argument out of bounds: {} (expected in range [1, {}]\", pos, columns.size());\n \n     const auto & column = columns[--pos];\n     if (typeid_cast<const ASTIdentifier *>(column.get()) || typeid_cast<const ASTLiteral *>(column.get()))\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01162_strange_mutations.sh b/tests/queries/0_stateless/01162_strange_mutations.sh\nindex eea9ea5f7e5d..f6b31847c1e3 100755\n--- a/tests/queries/0_stateless/01162_strange_mutations.sh\n+++ b/tests/queries/0_stateless/01162_strange_mutations.sh\n@@ -28,7 +28,7 @@ do\n     $CLICKHOUSE_CLIENT -q \"CREATE TABLE test ENGINE=$engine AS SELECT number + 100 AS n, 0 AS test FROM numbers(50)\" 2>&1| grep -Ev \"Removing leftovers from table|removed by another replica\"\n     $CLICKHOUSE_CLIENT -q \"select count(), sum(n), sum(test) from test\"\n     if [[ $engine == *\"ReplicatedMergeTree\"* ]]; then\n-        $CLICKHOUSE_CLIENT -q \"ALTER TABLE test\n+        $CLICKHOUSE_CLIENT --enable_positional_arguments=0 -q \"ALTER TABLE test\n             UPDATE test = (SELECT groupArray(id) FROM t1 GROUP BY 'dummy')[n - 99] WHERE 1\" 2>&1| grep -Fa \"DB::Exception: \" | grep -Fv \"statement with subquery may be nondeterministic\"\n         $CLICKHOUSE_CLIENT --allow_nondeterministic_mutations=1 --mutations_sync=1 -q \"ALTER TABLE test\n                     UPDATE test = (SELECT groupArray(id) FROM t1)[n - 99] WHERE 1\"\ndiff --git a/tests/queries/0_stateless/01798_having_push_down.sql b/tests/queries/0_stateless/01798_having_push_down.sql\nindex b3a77c8f5b57..c0c3447f5ab0 100644\n--- a/tests/queries/0_stateless/01798_having_push_down.sql\n+++ b/tests/queries/0_stateless/01798_having_push_down.sql\n@@ -8,11 +8,12 @@ SELECT sum(c0 = 0), min(c0 + 1), sum(c0 + 2) FROM t_having\n GROUP BY c0 HAVING c0 = 0\n SETTINGS enable_optimize_predicate_expression=0;\n \n+SET enable_positional_arguments=0;\n+\n SELECT c0 + -1, sum(intDivOrZero(intDivOrZero(NULL, NULL), '2'), intDivOrZero(10000000000., intDivOrZero(intDivOrZero(intDivOrZero(NULL, NULL), 10), NULL))) FROM t_having GROUP BY c0 = 2, c0 = 10, intDivOrZero(intDivOrZero(intDivOrZero(NULL, NULL), NULL), NULL), c0 HAVING c0 = 2 SETTINGS enable_optimize_predicate_expression = 0;\n \n SELECT sum(c0 + 257) FROM t_having GROUP BY c0 = -9223372036854775808, NULL, -2147483649, c0 HAVING c0 = -9223372036854775808 SETTINGS enable_optimize_predicate_expression = 0;\n \n-SET enable_positional_arguments=0;\n SELECT c0 + -2, c0 + -9223372036854775807, c0 = NULL FROM t_having GROUP BY c0 = 0.9998999834060669, 1023, c0 HAVING c0 = 0.9998999834060669 SETTINGS enable_optimize_predicate_expression = 0;\n \n DROP TABLE t_having;\ndiff --git a/tests/queries/0_stateless/02006_test_positional_arguments.reference b/tests/queries/0_stateless/02006_test_positional_arguments.reference\nindex 40100e8d5be2..079bd0711038 100644\n--- a/tests/queries/0_stateless/02006_test_positional_arguments.reference\n+++ b/tests/queries/0_stateless/02006_test_positional_arguments.reference\n@@ -3,18 +3,50 @@ select x3, x2, x1 from test order by 1;\n 1\t100\t100\n 10\t1\t10\n 100\t10\t1\n+select x3, x2, x1 from test order by -3;\n+1\t100\t100\n+10\t1\t10\n+100\t10\t1\n select x3, x2, x1 from test order by x3;\n 1\t100\t100\n 10\t1\t10\n 100\t10\t1\n+select x3, x2, x1 from test order by 3;\n+100\t10\t1\n+10\t1\t10\n+1\t100\t100\n+select x3, x2, x1 from test order by -1;\n+100\t10\t1\n+10\t1\t10\n+1\t100\t100\n+select x3, x2, x1 from test order by x1;\n+100\t10\t1\n+10\t1\t10\n+1\t100\t100\n select x3, x2, x1 from test order by 1 desc;\n 100\t10\t1\n 10\t1\t10\n 1\t100\t100\n+select x3, x2, x1 from test order by -3 desc;\n+100\t10\t1\n+10\t1\t10\n+1\t100\t100\n select x3, x2, x1 from test order by x3 desc;\n 100\t10\t1\n 10\t1\t10\n 1\t100\t100\n+select x3, x2, x1 from test order by 3 desc;\n+1\t100\t100\n+10\t1\t10\n+100\t10\t1\n+select x3, x2, x1 from test order by -1 desc;\n+1\t100\t100\n+10\t1\t10\n+100\t10\t1\n+select x3, x2, x1 from test order by x1 desc;\n+1\t100\t100\n+10\t1\t10\n+100\t10\t1\n insert into test values (1, 10, 100), (10, 1, 10), (100, 100, 1);\n select x3, x2 from test group by x3, x2 order by x3;\n 1\t100\n@@ -54,6 +86,20 @@ SELECT\n     x1\n FROM test\n ORDER BY x3 + 1 ASC\n+explain syntax select x3, x2, x1 from test order by -1;\n+SELECT\n+    x3,\n+    x2,\n+    x1\n+FROM test\n+ORDER BY x1 ASC\n+explain syntax select x3 + 1, x2, x1 from test order by -1;\n+SELECT\n+    x3 + 1,\n+    x2,\n+    x1\n+FROM test\n+ORDER BY x1 ASC\n explain syntax select x3, x3 - x2, x2, x1 from test order by 2;\n SELECT\n     x3,\n@@ -62,6 +108,14 @@ SELECT\n     x1\n FROM test\n ORDER BY x3 - x2 ASC\n+explain syntax select x3, x3 - x2, x2, x1 from test order by -2;\n+SELECT\n+    x3,\n+    x3 - x2,\n+    x2,\n+    x1\n+FROM test\n+ORDER BY x2 ASC\n explain syntax select x3, if(x3 > 10, x3, plus(x1, x2)), x1 + x2 from test order by 2;\n SELECT\n     x3,\n@@ -69,12 +123,28 @@ SELECT\n     x1 + x2\n FROM test\n ORDER BY if(x3 > 10, x3, x1 + x2) ASC\n+explain syntax select x3, if(x3 > 10, x3, plus(x1, x2)), x1 + x2 from test order by -2;\n+SELECT\n+    x3,\n+    if(x3 > 10, x3, x1 + x2),\n+    x1 + x2\n+FROM test\n+ORDER BY if(x3 > 10, x3, x1 + x2) ASC\n explain syntax select max(x1), x2 from test group by 2 order by 1, 2;\n SELECT\n     max(x1),\n     x2\n FROM test\n GROUP BY x2\n+ORDER BY\n+    max(x1) ASC,\n+    x2 ASC\n+explain syntax select max(x1), x2 from test group by -1 order by -2, -1;\n+SELECT\n+    max(x1),\n+    x2\n+FROM test\n+GROUP BY x2\n ORDER BY\n     max(x1) ASC,\n     x2 ASC\n@@ -83,16 +153,34 @@ SELECT\n     1 + greatest(x1, 1),\n     x2\n FROM test\n+GROUP BY\n+    1 + greatest(x1, 1),\n+    x2\n+explain syntax select 1 + greatest(x1, 1), x2 from test group by -2, -1;\n+SELECT\n+    1 + greatest(x1, 1),\n+    x2\n+FROM test\n GROUP BY\n     1 + greatest(x1, 1),\n     x2\n select max(x1), x2 from test group by 1, 2; -- { serverError 43, 184 }\n select 1 + max(x1), x2 from test group by 1, 2; -- { serverError 43, 184 }\n+select max(x1), x2 from test group by -2, -1; -- { serverError 43, 184 }\n+select 1 + max(x1), x2 from test group by -2, -1; -- { serverError 43, 184 }\n explain syntax select x1 + x3, x3 from test group by 1, 2;\n SELECT\n     x1 + x3,\n     x3\n FROM test\n+GROUP BY\n+    x1 + x3,\n+    x3\n+explain syntax select x1 + x3, x3 from test group by -2, -1;\n+SELECT\n+    x1 + x3,\n+    x3\n+FROM test\n GROUP BY\n     x1 + x3,\n     x3\n@@ -102,8 +190,14 @@ select x1, x1 * 2, max(x2), max(x3) from test2 group by 2, 1, x1 order by 1, 2,\n 1\t2\t10\t100\n 10\t20\t1\t10\n 100\t200\t100\t1\n+select x1, x1 * 2, max(x2), max(x3) from test2 group by 2, 1, x1 order by 1, 2, -1 desc, -2 asc;\n+1\t2\t10\t100\n+10\t20\t1\t10\n+100\t200\t100\t1\n select a, b, c, d, e, f  from (select 44 a, 88 b, 13 c, 14 d, 15 e, 16 f) t group by 1,2,3,4,5,6 order by a;\n 44\t88\t13\t14\t15\t16\n+select a, b, c, d, e, f  from (select 44 a, 88 b, 13 c, 14 d, 15 e, 16 f) t group by 1,2,3,-3,-2,-1 order by a;\n+44\t88\t13\t14\t15\t16\n explain syntax select plus(1, 1) as a group by a;\n SELECT 1 + 1 AS a\n GROUP BY a\ndiff --git a/tests/queries/0_stateless/02006_test_positional_arguments.sql b/tests/queries/0_stateless/02006_test_positional_arguments.sql\nindex 159ad6bd4272..6f427e0298d9 100644\n--- a/tests/queries/0_stateless/02006_test_positional_arguments.sql\n+++ b/tests/queries/0_stateless/02006_test_positional_arguments.sql\n@@ -9,11 +9,21 @@ insert into test values (1, 10, 100), (10, 1, 10), (100, 100, 1);\n \n -- { echo }\n select x3, x2, x1 from test order by 1;\n+select x3, x2, x1 from test order by -3;\n select x3, x2, x1 from test order by x3;\n \n+select x3, x2, x1 from test order by 3;\n+select x3, x2, x1 from test order by -1;\n+select x3, x2, x1 from test order by x1;\n+\n select x3, x2, x1 from test order by 1 desc;\n+select x3, x2, x1 from test order by -3 desc;\n select x3, x2, x1 from test order by x3 desc;\n \n+select x3, x2, x1 from test order by 3 desc;\n+select x3, x2, x1 from test order by -1 desc;\n+select x3, x2, x1 from test order by x1 desc;\n+\n insert into test values (1, 10, 100), (10, 1, 10), (100, 100, 1);\n select x3, x2 from test group by x3, x2 order by x3;\n select x3, x2 from test group by 1, 2 order by x3;\n@@ -25,21 +35,32 @@ select x1, x2, x3 from test order by 3 limit 1 by 1;\n \n explain syntax select x3, x2, x1 from test order by 1;\n explain syntax select x3 + 1, x2, x1 from test order by 1;\n+explain syntax select x3, x2, x1 from test order by -1;\n+explain syntax select x3 + 1, x2, x1 from test order by -1;\n explain syntax select x3, x3 - x2, x2, x1 from test order by 2;\n+explain syntax select x3, x3 - x2, x2, x1 from test order by -2;\n explain syntax select x3, if(x3 > 10, x3, plus(x1, x2)), x1 + x2 from test order by 2;\n+explain syntax select x3, if(x3 > 10, x3, plus(x1, x2)), x1 + x2 from test order by -2;\n explain syntax select max(x1), x2 from test group by 2 order by 1, 2;\n+explain syntax select max(x1), x2 from test group by -1 order by -2, -1;\n explain syntax select 1 + greatest(x1, 1), x2 from test group by 1, 2;\n+explain syntax select 1 + greatest(x1, 1), x2 from test group by -2, -1;\n \n select max(x1), x2 from test group by 1, 2; -- { serverError 43, 184 }\n select 1 + max(x1), x2 from test group by 1, 2; -- { serverError 43, 184 }\n+select max(x1), x2 from test group by -2, -1; -- { serverError 43, 184 }\n+select 1 + max(x1), x2 from test group by -2, -1; -- { serverError 43, 184 }\n \n explain syntax select x1 + x3, x3 from test group by 1, 2;\n+explain syntax select x1 + x3, x3 from test group by -2, -1;\n \n create table test2(x1 Int, x2 Int, x3 Int) engine=Memory;\n insert into test2 values (1, 10, 100), (10, 1, 10), (100, 100, 1);\n select x1, x1 * 2, max(x2), max(x3) from test2 group by 2, 1, x1 order by 1, 2, 4 desc, 3 asc;\n+select x1, x1 * 2, max(x2), max(x3) from test2 group by 2, 1, x1 order by 1, 2, -1 desc, -2 asc;\n \n select a, b, c, d, e, f  from (select 44 a, 88 b, 13 c, 14 d, 15 e, 16 f) t group by 1,2,3,4,5,6 order by a;\n+select a, b, c, d, e, f  from (select 44 a, 88 b, 13 c, 14 d, 15 e, 16 f) t group by 1,2,3,-3,-2,-1 order by a;\n \n explain syntax select plus(1, 1) as a group by a;\n select substr('aaaaaaaaaaaaaa', 8) as a  group by a order by a;\ndiff --git a/tests/queries/0_stateless/02932_group_by_null_fuzzer.sql b/tests/queries/0_stateless/02932_group_by_null_fuzzer.sql\nindex 0c28c120d400..603c7783ef87 100644\n--- a/tests/queries/0_stateless/02932_group_by_null_fuzzer.sql\n+++ b/tests/queries/0_stateless/02932_group_by_null_fuzzer.sql\n@@ -1,5 +1,6 @@\n -- https://github.com/ClickHouse/ClickHouse/issues/43202\n -- Queries are generated by the fuzzer, so don't expect them to make sense\n+SET enable_positional_arguments=0;\n SELECT NULL, '' FROM (SELECT toNullable(''), NULL AS key GROUP BY GROUPING SETS ((NULL))) AS s1 ALL LEFT JOIN (SELECT '' AS key, NULL AS value GROUP BY GROUPING SETS (('')) WITH TOTALS UNION ALL SELECT NULL AS key, toNullable(NULL) AS value GROUP BY '', NULL, '' WITH TOTALS) AS s2 USING (key);\n SELECT NULL GROUP BY NULL WITH TOTALS;\n SELECT 1048575, NULL, b FROM (SELECT '25.5' AS a, NULL, NULL AS b GROUP BY GROUPING SETS ((0.0001)) WITH TOTALS) AS js1 ANY RIGHT JOIN (SELECT NULL AS a, NULL AS b WHERE NULL GROUP BY NULL, -9223372036854775807 WITH CUBE WITH TOTALS UNION ALL SELECT NULL AS a, NULL AS b GROUP BY 1, '21474836.46' WITH TOTALS) AS js2 USING (a, b) ORDER BY nan DESC NULLS LAST, '9223372036854775807' DESC NULLS LAST, a ASC NULLS LAST;\n",
  "problem_statement": "Negative positional arguments.\n**Use case**\r\n\r\n`ORDER BY -1` means order by the last column in the SELECT list; negative numbers count from the end of the SELECT list.\n",
  "hints_text": "",
  "created_at": "2023-12-11T10:37:57Z"
}