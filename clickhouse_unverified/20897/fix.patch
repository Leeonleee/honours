diff --git a/src/Interpreters/HashJoin.cpp b/src/Interpreters/HashJoin.cpp
index 9818f89d13ce..6be540f8c84d 100644
--- a/src/Interpreters/HashJoin.cpp
+++ b/src/Interpreters/HashJoin.cpp
@@ -673,7 +673,7 @@ class AddedColumns
         if (lazy_defaults_count)
         {
             for (size_t j = 0; j < right_indexes.size(); ++j)
-                columns[j]->insertManyDefaults(lazy_defaults_count);
+                JoinCommon::addDefaultValues(*columns[j], type_name[j].first, lazy_defaults_count);
             lazy_defaults_count = 0;
         }
     }
diff --git a/src/Interpreters/MergeJoin.cpp b/src/Interpreters/MergeJoin.cpp
index c9072ec34804..0914ab6dae1e 100644
--- a/src/Interpreters/MergeJoin.cpp
+++ b/src/Interpreters/MergeJoin.cpp
@@ -394,7 +394,8 @@ bool joinEquals(const Block & left_block, const Block & right_block, const Block
 }
 
 template <bool copy_left>
-void joinInequalsLeft(const Block & left_block, MutableColumns & left_columns, MutableColumns & right_columns,
+void joinInequalsLeft(const Block & left_block, MutableColumns & left_columns,
+                      const Block & right_block, MutableColumns & right_columns,
                       size_t start, size_t end)
 {
     if (end <= start)
@@ -404,9 +405,10 @@ void joinInequalsLeft(const Block & left_block, MutableColumns & left_columns, M
     if constexpr (copy_left)
         copyLeftRange(left_block, left_columns, start, rows_to_add);
 
-    /// append nulls
-    for (auto & column : right_columns)
-        column->insertManyDefaults(rows_to_add);
+    for (size_t i = 0; i < right_columns.size(); ++i)
+    {
+        JoinCommon::addDefaultValues(*right_columns[i], right_block.getByPosition(i).type, rows_to_add);
+    }
 }
 
 }
@@ -692,7 +694,7 @@ void MergeJoin::joinSortedBlock(Block & block, ExtraBlockPtr & not_processed)
         }
 
         left_cursor.nextN(left_key_tail);
-        joinInequalsLeft<is_all>(block, left_columns, right_columns, left_cursor.position(), left_cursor.end());
+        joinInequalsLeft<is_all>(block, left_columns, right_columns_to_add, right_columns, left_cursor.position(), left_cursor.end());
         //left_cursor.nextN(left_cursor.end() - left_cursor.position());
 
         changeLeftColumns(block, std::move(left_columns));
@@ -769,7 +771,7 @@ bool MergeJoin::leftJoin(MergeJoinCursor & left_cursor, const Block & left_block
 
         Range range = left_cursor.getNextEqualRange(right_cursor);
 
-        joinInequalsLeft<is_all>(left_block, left_columns, right_columns, left_unequal_position, range.left_start);
+        joinInequalsLeft<is_all>(left_block, left_columns, right_columns_to_add, right_columns, left_unequal_position, range.left_start);
 
         if (range.empty())
             break;
diff --git a/src/Interpreters/join_common.cpp b/src/Interpreters/join_common.cpp
index 17c289b151d3..a4c39a45efa4 100644
--- a/src/Interpreters/join_common.cpp
+++ b/src/Interpreters/join_common.cpp
@@ -276,6 +276,13 @@ void joinTotals(const Block & totals, const Block & columns_to_add, const Names
     }
 }
 
+void addDefaultValues(IColumn & column, const DataTypePtr & type, size_t count)
+{
+    column.reserve(column.size() + count);
+    for (size_t i = 0; i < count; ++i)
+        type->insertDefaultInto(column);
+}
+
 }
 
 
@@ -387,9 +394,14 @@ void NotJoined::correctLowcardAndNullability(MutableColumns & columns_right)
 
 void NotJoined::addLeftColumns(Block & block, size_t rows_added) const
 {
-    /// @note it's possible to make ColumnConst here and materialize it later
     for (size_t pos : column_indices_left)
-        block.getByPosition(pos).column = block.getByPosition(pos).column->cloneResized(rows_added);
+    {
+        auto & col = block.getByPosition(pos);
+
+        auto mut_col = col.column->cloneEmpty();
+        JoinCommon::addDefaultValues(*mut_col, col.type, rows_added);
+        col.column = std::move(mut_col);
+    }
 }
 
 void NotJoined::addRightColumns(Block & block, MutableColumns & columns_right) const
diff --git a/src/Interpreters/join_common.h b/src/Interpreters/join_common.h
index cfd727704a07..6f9f7dd1210d 100644
--- a/src/Interpreters/join_common.h
+++ b/src/Interpreters/join_common.h
@@ -34,6 +34,8 @@ void checkTypesOfKeys(const Block & block_left, const Names & key_names_left, co
 void createMissedColumns(Block & block);
 void joinTotals(const Block & totals, const Block & columns_to_add, const Names & key_names_right, Block & block);
 
+void addDefaultValues(IColumn & column, const DataTypePtr & type, size_t count);
+
 }
 
 /// Creates result from right table data in RIGHT and FULL JOIN when keys are not present in left table.
