diff --git a/src/Storages/MergeTree/tests/gtest_executor.cpp b/src/Storages/MergeTree/tests/gtest_executor.cpp
index b89692869fdf..601492206430 100644
--- a/src/Storages/MergeTree/tests/gtest_executor.cpp
+++ b/src/Storages/MergeTree/tests/gtest_executor.cpp
@@ -75,8 +75,7 @@ TEST(Executor, RemoveTasks)
     for (size_t i = 0; i < batch; ++i)
         for (size_t j = 0; j < tasks_kinds; ++j)
             ASSERT_TRUE(
-                executor->trySchedule(std::make_shared<FakeExecutableTask>(std::to_string(j)))
-            );
+                executor->trySchedule(std::make_shared<FakeExecutableTask>(std::to_string(j))));
 
     std::vector<std::thread> threads(batch);
 
diff --git a/tests/queries/0_stateless/02378_part_log_profile_events.reference b/tests/queries/0_stateless/02378_part_log_profile_events.reference
new file mode 100644
index 000000000000..c09e6c997c50
--- /dev/null
+++ b/tests/queries/0_stateless/02378_part_log_profile_events.reference
@@ -0,0 +1,3 @@
+Ok	Ok	Ok	Ok	Ok	Ok
+Ok	Ok
+Ok	Ok	Ok
diff --git a/tests/queries/0_stateless/02378_part_log_profile_events.sql b/tests/queries/0_stateless/02378_part_log_profile_events.sql
new file mode 100644
index 000000000000..38d3f8b4c057
--- /dev/null
+++ b/tests/queries/0_stateless/02378_part_log_profile_events.sql
@@ -0,0 +1,50 @@
+DROP TABLE IF EXISTS test;
+
+CREATE TABLE test (key UInt64, val UInt64) engine = MergeTree Order by key PARTITION BY key >= 128;
+
+SET max_block_size = 64, max_insert_block_size = 64, min_insert_block_size_rows = 64;
+
+INSERT INTO test SELECT number AS key, sipHash64(number) AS val FROM numbers(512);
+
+SYSTEM FLUSH LOGS;
+
+SELECT
+    if(count(DISTINCT query_id) == 1, 'Ok', 'Error: ' || toString(count(DISTINCT query_id))),
+    if(count() == 512 / 64, 'Ok', 'Error: ' || toString(count())), -- 512 rows inserted, 64 rows per block
+    if(SUM(ProfileEvents['MergeTreeDataWriterRows']) == 512, 'Ok', 'Error: ' || toString(SUM(ProfileEvents['MergeTreeDataWriterRows']))),
+    if(SUM(ProfileEvents['MergeTreeDataWriterUncompressedBytes']) >= 1024, 'Ok', 'Error: ' || toString(SUM(ProfileEvents['MergeTreeDataWriterUncompressedBytes']))),
+    if(SUM(ProfileEvents['MergeTreeDataWriterCompressedBytes']) >= 1024, 'Ok', 'Error: ' || toString(SUM(ProfileEvents['MergeTreeDataWriterCompressedBytes']))),
+    if(SUM(ProfileEvents['MergeTreeDataWriterBlocks']) >= 8, 'Ok', 'Error: ' || toString(SUM(ProfileEvents['MergeTreeDataWriterBlocks'])))
+FROM system.part_log
+WHERE event_time > now() - INTERVAL 10 MINUTE
+    AND database == currentDatabase() AND table == 'test'
+    AND event_type == 'NewPart'
+;
+
+OPTIMIZE TABLE test FINAL;
+
+SYSTEM FLUSH LOGS;
+SELECT
+    if(count() > 2, 'Ok', 'Error: ' || toString(count())),
+    if(SUM(ProfileEvents['MergedRows']) >= 512, 'Ok', 'Error: ' || toString(SUM(ProfileEvents['MergedRows'])))
+FROM system.part_log
+WHERE event_time > now() - INTERVAL 10 MINUTE
+    AND database == currentDatabase() AND table == 'test'
+    AND event_type == 'MergeParts'
+;
+
+ALTER TABLE test UPDATE val = 0 WHERE key % 2 == 0 SETTINGS mutations_sync = 2;
+
+SYSTEM FLUSH LOGS;
+
+SELECT
+    if(count() == 2, 'Ok', 'Error: ' || toString(count())),
+    if(SUM(ProfileEvents['MergedRows']) == 512, 'Ok', 'Error: ' || toString(SUM(ProfileEvents['MergedRows']))),
+    if(SUM(ProfileEvents['FileOpen']) > 1, 'Ok', 'Error: ' || toString(SUM(ProfileEvents['FileOpen'])))
+FROM system.part_log
+WHERE event_time > now() - INTERVAL 10 MINUTE
+    AND database == currentDatabase() AND table == 'test'
+    AND event_type == 'MutatePart'
+;
+
+DROP TABLE test;
diff --git a/tests/queries/0_stateless/02378_part_log_profile_events_replicated.reference b/tests/queries/0_stateless/02378_part_log_profile_events_replicated.reference
new file mode 100644
index 000000000000..d00491fd7e5b
--- /dev/null
+++ b/tests/queries/0_stateless/02378_part_log_profile_events_replicated.reference
@@ -0,0 +1,1 @@
+1
diff --git a/tests/queries/0_stateless/02378_part_log_profile_events_replicated.sql b/tests/queries/0_stateless/02378_part_log_profile_events_replicated.sql
new file mode 100644
index 000000000000..d61b680bb878
--- /dev/null
+++ b/tests/queries/0_stateless/02378_part_log_profile_events_replicated.sql
@@ -0,0 +1,40 @@
+
+-- Tags: long, replica, no-replicated-database, no-parallel
+
+DROP TABLE IF EXISTS part_log_profile_events_r1 NO DELAY;
+DROP TABLE IF EXISTS part_log_profile_events_r2 NO DELAY;
+
+CREATE TABLE part_log_profile_events_r1 (x UInt64)
+ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_02378/part_log_profile_events', 'r1')
+ORDER BY x
+PARTITION BY x >= 128
+;
+
+CREATE TABLE part_log_profile_events_r2 (x UInt64)
+ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_02378/part_log_profile_events', 'r2')
+ORDER BY x
+PARTITION BY x >= 128
+;
+
+-- SYSTEM STOP MERGES part_log_profile_events_r1;
+-- SYSTEM STOP MERGES part_log_profile_events_r2;
+
+SET max_block_size = 64, max_insert_block_size = 64, min_insert_block_size_rows = 64;
+
+INSERT INTO part_log_profile_events_r1 SELECT number FROM numbers(1000);
+
+SYSTEM SYNC REPLICA part_log_profile_events_r2;
+
+SYSTEM FLUSH LOGS;
+
+SELECT
+    count() > 1
+    AND SUM(ProfileEvents['ZooKeeperTransactions']) >= 4
+FROM system.part_log
+WHERE event_time > now() - INTERVAL 10 MINUTE
+    AND database == currentDatabase() AND table == 'part_log_profile_events_r2'
+    AND event_type == 'DownloadPart'
+;
+
+DROP TABLE part_log_profile_events_r1 NO DELAY;
+DROP TABLE part_log_profile_events_r2 NO DELAY;
