diff --git a/src/Core/Settings.h b/src/Core/Settings.h
index 74600bd5095d..40e69ce11522 100644
--- a/src/Core/Settings.h
+++ b/src/Core/Settings.h
@@ -176,6 +176,7 @@ class IColumn;
     M(LogQueriesType, log_queries_min_type, QueryLogElementType::QUERY_START, "Minimal type in query_log to log, possible values (from low to high): QUERY_START, QUERY_FINISH, EXCEPTION_BEFORE_START, EXCEPTION_WHILE_PROCESSING.", 0) \
     M(Milliseconds, log_queries_min_query_duration_ms, 0, "Minimal time for the query to run, to get to the query_log/query_thread_log/query_views_log.", 0) \
     M(UInt64, log_queries_cut_to_length, 100000, "If query length is greater than specified threshold (in bytes), then cut query when writing to query log. Also limit length of printed query in ordinary text log.", 0) \
+    M(Float, log_queries_probability, 1., "Log queries with the specified probabality.", 0) \
     \
     M(DistributedProductMode, distributed_product_mode, DistributedProductMode::DENY, "How are distributed subqueries performed inside IN or JOIN sections?", IMPORTANT) \
     \
diff --git a/src/Interpreters/executeQuery.cpp b/src/Interpreters/executeQuery.cpp
index 23fb35deee32..6f8caf743229 100644
--- a/src/Interpreters/executeQuery.cpp
+++ b/src/Interpreters/executeQuery.cpp
@@ -56,6 +56,8 @@
 #include <Processors/Formats/IOutputFormat.h>
 #include <Processors/Sources/SinkToOutputStream.h>
 
+#include <random>
+
 
 namespace ProfileEvents
 {
@@ -463,6 +465,18 @@ static std::tuple<ASTPtr, BlockIO> executeQueryImpl(
 
     setQuerySpecificSettings(ast, context);
 
+    /// There is an option of probabilistic logging of queries.
+    /// If it is used - do the random sampling and "collapse" the settings.
+    /// It allows to consistently log queries with all the subqueries in distributed query processing
+    /// (subqueries on remote nodes will receive these "collapsed" settings)
+    if (!internal && settings.log_queries && settings.log_queries_probability < 1.0)
+    {
+        std::bernoulli_distribution should_write_log{settings.log_queries_probability};
+
+        context->setSetting("log_queries", should_write_log(thread_local_rng));
+        context->setSetting("log_queries_probability", 1.0);
+    }
+
     /// Copy query into string. It will be written to log and presented in processlist. If an INSERT query, string will not include data to insertion.
     String query(begin, query_end);
     BlockIO res;
