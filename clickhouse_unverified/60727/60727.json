{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 60727,
  "instance_id": "ClickHouse__ClickHouse-60727",
  "issue_numbers": [
    "60726"
  ],
  "base_commit": "356e8cae39b4e61910cbd39500445620cad1c681",
  "patch": "diff --git a/src/DataTypes/getLeastSupertype.cpp b/src/DataTypes/getLeastSupertype.cpp\nindex d67d5eb24e01..dec77119eed6 100644\n--- a/src/DataTypes/getLeastSupertype.cpp\n+++ b/src/DataTypes/getLeastSupertype.cpp\n@@ -474,16 +474,18 @@ DataTypePtr getLeastSupertype(const DataTypes & types)\n         type_ids.insert(type->getTypeId());\n \n     /// For String and FixedString, or for different FixedStrings, the common type is String.\n-    /// No other types are compatible with Strings. TODO Enums?\n+    /// If there are Enums and any type of Strings, the common type is String.\n+    /// No other types are compatible with Strings.\n     {\n         size_t have_string = type_ids.count(TypeIndex::String);\n         size_t have_fixed_string = type_ids.count(TypeIndex::FixedString);\n+        size_t have_enums = type_ids.count(TypeIndex::Enum8) + type_ids.count(TypeIndex::Enum16);\n \n         if (have_string || have_fixed_string)\n         {\n-            bool all_strings = type_ids.size() == (have_string + have_fixed_string);\n-            if (!all_strings)\n-                return throwOrReturn<on_error>(types, \"because some of them are String/FixedString and some of them are not\", ErrorCodes::NO_COMMON_TYPE);\n+            bool all_compatible_with_string = type_ids.size() == (have_string + have_fixed_string + have_enums);\n+            if (!all_compatible_with_string)\n+                return throwOrReturn<on_error>(types, \"because some of them are String/FixedString/Enum and some of them are not\", ErrorCodes::NO_COMMON_TYPE);\n \n             return std::make_shared<DataTypeString>();\n         }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03003_enum_and_string_compatible.reference b/tests/queries/0_stateless/03003_enum_and_string_compatible.reference\nnew file mode 100644\nindex 000000000000..acf5fe0d4236\n--- /dev/null\n+++ b/tests/queries/0_stateless/03003_enum_and_string_compatible.reference\n@@ -0,0 +1,1 @@\n+['Hello','Goodbye','test']\ndiff --git a/tests/queries/0_stateless/03003_enum_and_string_compatible.sql b/tests/queries/0_stateless/03003_enum_and_string_compatible.sql\nnew file mode 100644\nindex 000000000000..0abba6741ac8\n--- /dev/null\n+++ b/tests/queries/0_stateless/03003_enum_and_string_compatible.sql\n@@ -0,0 +1,1 @@\n+WITH 'Hello'::Enum8('Hello', 'World') AS enum1, 'test'::Enum8('test', 'best') AS enum2 SELECT [enum1, 'Goodbye', enum2];\n",
  "problem_statement": "Enum and String types should be compatible\n**Use case**\r\n\r\n```\r\nmilovidov-desktop :) WITH 'Hello'::Enum8('Hello', 'World') AS enum SELECT [enum, 'Goodbye']\r\n\r\nWITH CAST('Hello', 'Enum8(\\'Hello\\', \\'World\\')') AS enum\r\nSELECT [enum, 'Goodbye']\r\n\r\nQuery id: 4152f5df-df8f-4570-8a47-8fe38e76b439\r\n\r\n\r\nElapsed: 0.022 sec. \r\n\r\nReceived exception:\r\nCode: 386. DB::Exception: There is no supertype for types Enum8('Hello' = 1, 'World' = 2), String because some of them are String/FixedString and some of them are not: While processing [CAST('Hello', 'Enum8(\\'Hello\\', \\'World\\')') AS enum, 'Goodbye']. (NO_COMMON_TYPE)\r\n```\n",
  "hints_text": "",
  "created_at": "2024-03-03T21:51:12Z",
  "modified_files": [
    "src/DataTypes/getLeastSupertype.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03003_enum_and_string_compatible.reference",
    "b/tests/queries/0_stateless/03003_enum_and_string_compatible.sql"
  ]
}