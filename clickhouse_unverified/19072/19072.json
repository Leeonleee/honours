{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 19072,
  "instance_id": "ClickHouse__ClickHouse-19072",
  "issue_numbers": [
    "19021"
  ],
  "base_commit": "d8b9278193405512bc96bd74d3f30d281c481bb9",
  "patch": "diff --git a/src/IO/PeekableReadBuffer.cpp b/src/IO/PeekableReadBuffer.cpp\nindex 8ad0e7b572eb..8d07b07ddea2 100644\n--- a/src/IO/PeekableReadBuffer.cpp\n+++ b/src/IO/PeekableReadBuffer.cpp\n@@ -25,7 +25,7 @@ void PeekableReadBuffer::reset()\n     checkStateCorrect();\n \n     peeked_size = 0;\n-    checkpoint = nullptr;\n+    checkpoint = std::nullopt;\n     checkpoint_in_own_memory = false;\n \n     if (!currentlyReadFromOwnMemory())\n@@ -47,7 +47,7 @@ bool PeekableReadBuffer::peekNext()\n     {\n         /// Don't have to copy all data from sub-buffer if there is no data in own memory (checkpoint and pos are in sub-buffer)\n         if (checkpoint)\n-            copy_from = checkpoint;\n+            copy_from = *checkpoint;\n         bytes_to_copy = sub_buf.buffer().end() - copy_from;\n         if (!bytes_to_copy)\n         {\n@@ -57,7 +57,7 @@ bool PeekableReadBuffer::peekNext()\n             bool res = sub_buf.next();\n             BufferBase::set(sub_buf.buffer().begin(), sub_buf.buffer().size(), sub_buf.offset());\n             if (checkpoint)\n-                checkpoint = pos;\n+                checkpoint.emplace(pos);\n \n             checkStateCorrect();\n             return res;\n@@ -79,7 +79,7 @@ bool PeekableReadBuffer::peekNext()\n     /// Otherwise, checkpoint now at the beginning of own memory\n     if (checkpoint && useSubbufferOnly())\n     {\n-        checkpoint = memory.data();\n+        checkpoint.emplace(memory.data());\n         checkpoint_in_own_memory = true;\n     }\n     if (currentlyReadFromOwnMemory())\n@@ -115,9 +115,9 @@ void PeekableReadBuffer::rollbackToCheckpoint()\n     if (!checkpoint)\n         throw DB::Exception(\"There is no checkpoint\", ErrorCodes::LOGICAL_ERROR);\n     else if (checkpointInOwnMemory() == currentlyReadFromOwnMemory())\n-        pos = checkpoint;\n+        pos = *checkpoint;\n     else /// Checkpoint is in own memory and pos is not. Switch to reading from own memory\n-        BufferBase::set(memory.data(), peeked_size, checkpoint - memory.data());\n+        BufferBase::set(memory.data(), peeked_size, *checkpoint - memory.data());\n     checkStateCorrect();\n }\n \n@@ -169,7 +169,7 @@ void PeekableReadBuffer::checkStateCorrect() const\n         {\n             if (!peeked_size)\n                 throw DB::Exception(\"Checkpoint in empty own buffer\", ErrorCodes::LOGICAL_ERROR);\n-            if (currentlyReadFromOwnMemory() && pos < checkpoint)\n+            if (currentlyReadFromOwnMemory() && pos < *checkpoint)\n                 throw DB::Exception(\"Current position in own buffer before checkpoint in own buffer\", ErrorCodes::LOGICAL_ERROR);\n             if (!currentlyReadFromOwnMemory() && pos < sub_buf.position())\n                 throw DB::Exception(\"Current position in subbuffer less than sub_buf.position()\", ErrorCodes::LOGICAL_ERROR);\n@@ -180,7 +180,7 @@ void PeekableReadBuffer::checkStateCorrect() const\n                 throw DB::Exception(\"Own buffer is not empty\", ErrorCodes::LOGICAL_ERROR);\n             if (currentlyReadFromOwnMemory())\n                 throw DB::Exception(\"Current position in own buffer before checkpoint in subbuffer\", ErrorCodes::LOGICAL_ERROR);\n-            if (pos < checkpoint)\n+            if (pos < *checkpoint)\n                 throw DB::Exception(\"Current position in subbuffer before checkpoint in subbuffer\", ErrorCodes::LOGICAL_ERROR);\n         }\n     }\n@@ -202,7 +202,7 @@ void PeekableReadBuffer::resizeOwnMemoryIfNecessary(size_t bytes_to_append)\n     bool need_update_pos = currentlyReadFromOwnMemory();\n     size_t offset = 0;\n     if (need_update_checkpoint)\n-        offset = checkpoint - memory.data();\n+        offset = *checkpoint - memory.data();\n     else if (need_update_pos)\n         offset = this->offset();\n \n@@ -216,7 +216,7 @@ void PeekableReadBuffer::resizeOwnMemoryIfNecessary(size_t bytes_to_append)\n             memmove(memory.data(), memory.data() + offset, peeked_size);\n \n             if (need_update_checkpoint)\n-                checkpoint -= offset;\n+                *checkpoint -= offset;\n             if (need_update_pos)\n                 pos -= offset;\n         }\n@@ -235,7 +235,7 @@ void PeekableReadBuffer::resizeOwnMemoryIfNecessary(size_t bytes_to_append)\n             memory.resize(new_size_amortized);\n \n             if (need_update_checkpoint)\n-                checkpoint = memory.data() + offset;\n+                checkpoint.emplace(memory.data() + offset);\n             if (need_update_pos)\n             {\n                 BufferBase::set(memory.data(), peeked_size, pos_offset);\n@@ -252,7 +252,7 @@ void PeekableReadBuffer::makeContinuousMemoryFromCheckpointToPos()\n     checkStateCorrect();\n \n     if (!checkpointInOwnMemory() || currentlyReadFromOwnMemory())\n-        return;     /// is't already continuous\n+        return;     /// it's already continuous\n \n     size_t bytes_to_append = pos - sub_buf.position();\n     resizeOwnMemoryIfNecessary(bytes_to_append);\ndiff --git a/src/IO/PeekableReadBuffer.h b/src/IO/PeekableReadBuffer.h\nindex 62b6f08f6218..ffc80489d24b 100644\n--- a/src/IO/PeekableReadBuffer.h\n+++ b/src/IO/PeekableReadBuffer.h\n@@ -38,7 +38,7 @@ class PeekableReadBuffer : public BufferWithOwnMemory<ReadBuffer>\n             /// Don't need to store unread data anymore\n             peeked_size = 0;\n         }\n-        checkpoint = pos;\n+        checkpoint.emplace(pos);\n \n         // FIXME: we are checking checkpoint existence in few places (rollbackToCheckpoint/dropCheckpoint)\n         // by simple if(checkpoint) but checkpoint can be nullptr after\n@@ -58,7 +58,7 @@ class PeekableReadBuffer : public BufferWithOwnMemory<ReadBuffer>\n             /// Don't need to store unread data anymore\n             peeked_size = 0;\n         }\n-        checkpoint = nullptr;\n+        checkpoint = std::nullopt;\n         checkpoint_in_own_memory = false;\n     }\n \n@@ -97,7 +97,7 @@ class PeekableReadBuffer : public BufferWithOwnMemory<ReadBuffer>\n     ReadBuffer & sub_buf;\n     const size_t unread_limit;\n     size_t peeked_size = 0;\n-    Position checkpoint = nullptr;\n+    std::optional<Position> checkpoint = std::nullopt;\n     bool checkpoint_in_own_memory = false;\n };\n \ndiff --git a/src/Interpreters/InterpreterInsertQuery.cpp b/src/Interpreters/InterpreterInsertQuery.cpp\nindex 742c9f6736f6..3a76e81f1d48 100644\n--- a/src/Interpreters/InterpreterInsertQuery.cpp\n+++ b/src/Interpreters/InterpreterInsertQuery.cpp\n@@ -12,7 +12,6 @@\n #include <DataStreams/RemoteBlockInputStream.h>\n #include <DataStreams/SquashingBlockOutputStream.h>\n #include <DataStreams/copyData.h>\n-#include <IO/ConcatReadBuffer.h>\n #include <IO/ConnectionTimeoutsContext.h>\n #include <Interpreters/InterpreterSelectWithUnionQuery.h>\n #include <Interpreters/InterpreterWatchQuery.h>\ndiff --git a/src/Interpreters/executeQuery.cpp b/src/Interpreters/executeQuery.cpp\nindex 5928da156f3c..16dbae37f5d0 100644\n--- a/src/Interpreters/executeQuery.cpp\n+++ b/src/Interpreters/executeQuery.cpp\n@@ -3,7 +3,6 @@\n #include <Common/typeid_cast.h>\n #include <Common/ThreadProfileEvents.h>\n \n-#include <IO/ConcatReadBuffer.h>\n #include <IO/WriteBufferFromFile.h>\n #include <IO/WriteBufferFromVector.h>\n #include <IO/LimitReadBuffer.h>\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01183_custom_separated_format_http.reference b/tests/queries/0_stateless/01183_custom_separated_format_http.reference\nnew file mode 100644\nindex 000000000000..61f15592b646\n--- /dev/null\n+++ b/tests/queries/0_stateless/01183_custom_separated_format_http.reference\n@@ -0,0 +1,2 @@\n+2021-Jan\td1\td2\n+1000000\t1\ndiff --git a/tests/queries/0_stateless/01183_custom_separated_format_http.sh b/tests/queries/0_stateless/01183_custom_separated_format_http.sh\nnew file mode 100755\nindex 000000000000..f981ef5b890f\n--- /dev/null\n+++ b/tests/queries/0_stateless/01183_custom_separated_format_http.sh\n@@ -0,0 +1,14 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+echo 'DROP TABLE IF EXISTS mydb' | ${CLICKHOUSE_CURL} -sSg \"${CLICKHOUSE_URL}\" -d @-\n+echo 'CREATE TABLE mydb (datetime String, d1 String, d2 String ) ENGINE=Memory' | ${CLICKHOUSE_CURL} -sSg \"${CLICKHOUSE_URL}\" -d @-\n+echo \"2021-Jan^d1^d2\" | ${CLICKHOUSE_CURL} -sSg \"${CLICKHOUSE_URL}&query=INSERT%20INTO%20mydb%20FORMAT%20CustomSeparated%20SETTINGS%20format_custom_escaping_rule%3D%27CSV%27%2C%20format_custom_field_delimiter%20%3D%20%27%5E%27\" --data-binary @-\n+echo -n \"\" | ${CLICKHOUSE_CURL} -sSg \"${CLICKHOUSE_URL}&query=INSERT%20INTO%20mydb%20FORMAT%20CustomSeparated%20SETTINGS%20format_custom_escaping_rule%3D%27CSV%27%2C%20format_custom_field_delimiter%20%3D%20%27%5E%27\" --data-binary @-\n+echo 'SELECT * FROM mydb' | ${CLICKHOUSE_CURL} -sSg \"${CLICKHOUSE_URL}\" -d @-\n+printf \"2021-Jan^d1^d2\\n%.0s\" {1..999999} | ${CLICKHOUSE_CURL} -sSg \"${CLICKHOUSE_URL}&query=INSERT%20INTO%20mydb%20FORMAT%20CustomSeparated%20SETTINGS%20format_custom_escaping_rule%3D%27CSV%27%2C%20format_custom_field_delimiter%20%3D%20%27%5E%27\" --data-binary @-\n+echo 'SELECT count(*), countDistinct(datetime, d1, d2) FROM mydb' | ${CLICKHOUSE_CURL} -sSg \"${CLICKHOUSE_URL}\" -d @-\n+echo 'DROP TABLE mydb' | ${CLICKHOUSE_CURL} -sSg \"${CLICKHOUSE_URL}\" -d @-\n",
  "problem_statement": "FORMAT CustomSeparated doesnt' work for http queries\n(you don't have to strictly follow this form)\r\n\r\nIt seems that CH doesn't support  `FORMAT CustomSeparated` with http request\r\nhttps://github.com/ClickHouse/ClickHouse/issues/12744#issuecomment-663738562\r\n\r\nWhen I make a request with `format_custom_field_delimiter='^'`, I got an error\r\n```\r\nCode: 49, e.displayText() = DB::Exception: There is no checkpoint (version 20.1.2.4 (official build)) \r\n```\r\nBash script:\r\n```\r\n#!/bin/bash\r\n\r\nfind . -type f -name 'j.log' | while read f; do\r\n  curl \"http://localhost:8123\r\n/?query=INSERT%20INTO%20mydb%20FORMAT%20CustomSeparated%20SETTINGS%20format_custom_escaping_rule%3D%27CSV%27%2C%20format_custom_field_delimiter%20%3D%20%27%5E%27\" --data-binary \"@${f}\"\r\ndone\r\n```\r\nBut all is OK, when I do it with client:\r\n```\r\ncat j.log |clickhouse-client  -q \"INSERT into mydb FORMAT CustomSeparated SETTINGS format_custom_escaping_rule='CSV', format_custom_field_delimiter = '^'\"\r\n```\r\n\r\n\r\n**How to reproduce**\r\n* Which ClickHouse server version to use\r\n version 20.13.1.1 and github build `commit 6e34a0b71efc0e5af1cfb05b77a5e7b2568a2e49`\r\n* Which interface to use, if matters\r\n* Non-default settings, if any\r\n* `CREATE TABLE` statements for all tables involved\r\n```\r\nCREATE TABLE mydb\r\n(\r\n\tdatetime  String,\r\n\td1 String,\r\n\td2 String\r\n)\r\nengine=MergeTree()\r\nORDER BY d1\r\nSETTINGS index_granularity = 8192;\r\n```\r\n* Sample data for all these tables, use [clickhouse-obfuscator](https://github.com/ClickHouse/ClickHouse/blob/master/programs/obfuscator/Obfuscator.cpp#L42-L80) if necessary\r\n\r\nj.log:\r\n```\r\n2021-Jan^d1^d2\r\n```\r\n\r\n* Queries to run that lead to unexpected result\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\n**Error message and/or stacktrace**\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n\n",
  "hints_text": "",
  "created_at": "2021-01-14T14:42:54Z"
}