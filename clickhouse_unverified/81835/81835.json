{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 81835,
  "instance_id": "ClickHouse__ClickHouse-81835",
  "issue_numbers": [
    "72139"
  ],
  "base_commit": "be3fb8e878cb4961ecae3de0f9dfe4ec23532fcd",
  "patch": "diff --git a/src/Databases/DatabasesCommon.cpp b/src/Databases/DatabasesCommon.cpp\nindex f01f06293d54..6193ff7f8451 100644\n--- a/src/Databases/DatabasesCommon.cpp\n+++ b/src/Databases/DatabasesCommon.cpp\n@@ -44,6 +44,7 @@ namespace ErrorCodes\n     extern const int LOGICAL_ERROR;\n     extern const int CANNOT_GET_CREATE_TABLE_QUERY;\n     extern const int BAD_ARGUMENTS;\n+    extern const int EMPTY_LIST_OF_COLUMNS_PASSED;\n }\n namespace\n {\n@@ -71,6 +72,9 @@ void validateCreateQuery(const ASTCreateQuery & query, ContextPtr context)\n     const auto columns_desc\n         = InterpreterCreateQuery::getColumnsDescription(*columns.columns, context, LoadingStrictnessLevel::SECONDARY_CREATE, false);\n \n+    if (columns_desc.getInsertable().empty())\n+        throw Exception(ErrorCodes::EMPTY_LIST_OF_COLUMNS_PASSED, \"Cannot CREATE table without insertable columns\");\n+\n     /// Default expressions are only validated in level CREATE, so let's check them now\n     DefaultExpressionsInfo default_expr_info{std::make_shared<ASTExpressionList>()};\n \ndiff --git a/src/Interpreters/InterpreterCreateQuery.cpp b/src/Interpreters/InterpreterCreateQuery.cpp\nindex f4ef79b1c326..91c104b43a67 100644\n--- a/src/Interpreters/InterpreterCreateQuery.cpp\n+++ b/src/Interpreters/InterpreterCreateQuery.cpp\n@@ -731,10 +731,12 @@ ColumnsDescription InterpreterCreateQuery::getColumnsDescription(\n     if (mode <= LoadingStrictnessLevel::SECONDARY_CREATE && !is_restore_from_backup && context_->getSettingsRef()[Setting::flatten_nested])\n         res.flattenNested();\n \n-\n     if (res.getAllPhysical().empty())\n         throw Exception(ErrorCodes::EMPTY_LIST_OF_COLUMNS_PASSED, \"Cannot CREATE table without physical columns\");\n \n+    if (mode <= LoadingStrictnessLevel::CREATE && !is_restore_from_backup && res.getInsertable().empty())\n+        throw Exception(ErrorCodes::EMPTY_LIST_OF_COLUMNS_PASSED, \"Cannot CREATE table without insertable columns\");\n+\n     return res;\n }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02449_check_dependencies_and_table_shutdown.reference b/tests/queries/0_stateless/02449_check_dependencies_and_table_shutdown.reference\nindex 317dbe1c61c2..41ebee2944e7 100644\n--- a/tests/queries/0_stateless/02449_check_dependencies_and_table_shutdown.reference\n+++ b/tests/queries/0_stateless/02449_check_dependencies_and_table_shutdown.reference\n@@ -1,5 +1,5 @@\n CREATE DICTIONARY default.dict\\n(\\n    `id` UInt32,\\n    `value` String\\n)\\nPRIMARY KEY id\\nSOURCE(CLICKHOUSE(HOST \\'localhost\\' PORT 9000 USER \\'default\\' DB \\'default\\' TABLE \\'view\\'))\\nLIFETIME(MIN 600 MAX 600)\\nLAYOUT(HASHED())\n-CREATE TABLE default.`table`\\n(\\n    `col` String MATERIALIZED dictGet(\\'default.dict\\', \\'value\\', toUInt32(1))\\n)\\nENGINE = MergeTree\\nORDER BY tuple()\\nSETTINGS index_granularity = 8192\n+CREATE TABLE default.`table`\\n(\\n    `col` String MATERIALIZED dictGet(\\'default.dict\\', \\'value\\', toUInt32(1)),\\n    `phys` Int32\\n)\\nENGINE = MergeTree\\nORDER BY tuple()\\nSETTINGS index_granularity = 8192\n 1\tv\n 1\tv\n 1\tv\ndiff --git a/tests/queries/0_stateless/02449_check_dependencies_and_table_shutdown.sql b/tests/queries/0_stateless/02449_check_dependencies_and_table_shutdown.sql\nindex c586db447c0a..cb10c50d5f01 100644\n--- a/tests/queries/0_stateless/02449_check_dependencies_and_table_shutdown.sql\n+++ b/tests/queries/0_stateless/02449_check_dependencies_and_table_shutdown.sql\n@@ -14,7 +14,8 @@ SHOW CREATE dict;\n \n CREATE TABLE table\n (\n-    col MATERIALIZED dictGet(currentDatabase() || '.dict', 'value', toUInt32(1))\n+    col MATERIALIZED dictGet(currentDatabase() || '.dict', 'value', toUInt32(1)),\n+    phys Int\n )\n ENGINE = MergeTree()\n ORDER BY tuple();\ndiff --git a/tests/queries/0_stateless/03199_join_with_materialized_column.sql b/tests/queries/0_stateless/03199_join_with_materialized_column.sql\nindex fef171cb9d1c..3b7c5e52b6bc 100644\n--- a/tests/queries/0_stateless/03199_join_with_materialized_column.sql\n+++ b/tests/queries/0_stateless/03199_join_with_materialized_column.sql\n@@ -1,6 +1,6 @@\n SET enable_analyzer = 1;\n \n DROP TABLE IF EXISTS table_with_materialized;\n-CREATE TABLE table_with_materialized (col String MATERIALIZED 'A') ENGINE = Memory;\n+CREATE TABLE table_with_materialized (col String MATERIALIZED 'A', ins Int Ephemeral) ENGINE = Memory;\n SELECT number FROM numbers(1) AS n, table_with_materialized;\n DROP TABLE table_with_materialized;\ndiff --git a/tests/queries/0_stateless/03541_table_without_insertable_columns.reference b/tests/queries/0_stateless/03541_table_without_insertable_columns.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/03541_table_without_insertable_columns.sql b/tests/queries/0_stateless/03541_table_without_insertable_columns.sql\nnew file mode 100644\nindex 000000000000..8cf0e072328d\n--- /dev/null\n+++ b/tests/queries/0_stateless/03541_table_without_insertable_columns.sql\n@@ -0,0 +1,12 @@\n+-- Tags: no-parallel, no-ordinary-database\n+-- Tag no-parallel: static UUID\n+-- Tag no-ordinary-database: requires UUID\n+\n+CREATE TABLE no_physical (a Int EPHEMERAL) Engine=Memory; -- { serverError EMPTY_LIST_OF_COLUMNS_PASSED }\n+CREATE TABLE no_physical (a Int ALIAS 1) Engine=Memory; -- { serverError EMPTY_LIST_OF_COLUMNS_PASSED }\n+\n+CREATE TABLE no_insertable (a Int MATERIALIZED 1) Engine=Memory; -- { serverError EMPTY_LIST_OF_COLUMNS_PASSED }\n+ATTACH TABLE no_insertable UUID '00000000-0000-0000-0000-000000000001' (a Int MATERIALIZED 1) Engine=Memory;\n+\n+CREATE TABLE insertable (a Int EPHEMERAL, b Int MATERIALIZED 1) Engine=Memory;\n+ALTER TABLE insertable DROP COLUMN a; -- { serverError EMPTY_LIST_OF_COLUMNS_PASSED }\n",
  "problem_statement": "Logical Error: Column description is empty and it can't be built from sample from table\n**Describe the bug**\r\nInserting into a table with just one materialized column, gives logical error.\r\n\r\n**How to reproduce**\r\nRun:\r\nhttps://fiddle.clickhouse.com/e4e22f97-5400-4ada-990b-c5efb63885db\r\n\n",
  "hints_text": "",
  "created_at": "2025-06-13T18:50:23Z"
}