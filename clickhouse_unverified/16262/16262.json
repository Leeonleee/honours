{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 16262,
  "instance_id": "ClickHouse__ClickHouse-16262",
  "issue_numbers": [
    "15587"
  ],
  "base_commit": "281bf351d2fa86faac9817a1d99ddd554306ecb3",
  "patch": "diff --git a/src/Parsers/ParserDataType.cpp b/src/Parsers/ParserDataType.cpp\nindex a0a4eb97efeb..ee746329bff3 100644\n--- a/src/Parsers/ParserDataType.cpp\n+++ b/src/Parsers/ParserDataType.cpp\n@@ -1,13 +1,38 @@\n #include <Parsers/ParserDataType.h>\n-#include <Parsers/ExpressionElementParsers.h>\n-#include <Parsers/CommonParsers.h>\n+\n #include <Parsers/ASTFunction.h>\n #include <Parsers/ASTIdentifier.h>\n+#include <Parsers/CommonParsers.h>\n+#include <Parsers/ExpressionElementParsers.h>\n #include <Parsers/ParserCreateQuery.h>\n \n+\n namespace DB\n {\n \n+namespace\n+{\n+\n+/// Wrapper to allow mixed lists of nested and normal types.\n+class ParserNestedTableOrExpression : public IParserBase\n+{\n+    private:\n+        const char * getName() const override { return \"data type or expression\"; }\n+        bool parseImpl(Pos & pos, ASTPtr & node, Expected & expected) override\n+        {\n+            ParserNestedTable parser1;\n+\n+            if (parser1.parse(pos, node, expected))\n+                return true;\n+\n+            ParserExpression parser2;\n+\n+            return parser2.parse(pos, node, expected);\n+        }\n+};\n+\n+}\n+\n bool ParserDataType::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)\n {\n     ParserNestedTable nested;\n@@ -78,7 +103,7 @@ bool ParserDataType::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)\n     ++pos;\n \n     /// Parse optional parameters\n-    ParserList args_parser(std::make_unique<ParserExpression>(), std::make_unique<ParserToken>(TokenType::Comma));\n+    ParserList args_parser(std::make_unique<ParserNestedTableOrExpression>(), std::make_unique<ParserToken>(TokenType::Comma));\n     ASTPtr expr_list_args;\n \n     if (!args_parser.parse(pos, expr_list_args, expected))\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01307_bloom_filter_index_string_multi_granulas.sql b/tests/queries/0_stateless/01307_bloom_filter_index_string_multi_granulas.sql\nindex 832f7140af25..e96c70bef7f2 100644\n--- a/tests/queries/0_stateless/01307_bloom_filter_index_string_multi_granulas.sql\n+++ b/tests/queries/0_stateless/01307_bloom_filter_index_string_multi_granulas.sql\n@@ -1,4 +1,5 @@\n DROP TABLE IF EXISTS test_01307;\n+\n CREATE TABLE test_01307 (id UInt64, val String, INDEX ind val TYPE bloom_filter() GRANULARITY 1) ENGINE = MergeTree() ORDER BY id SETTINGS index_granularity = 2;\n INSERT INTO test_01307 (id, val) select number as id, toString(number) as val from numbers(4);\n SELECT count() FROM test_01307 WHERE identity(val) = '2';\n@@ -6,3 +7,5 @@ SELECT count() FROM test_01307 WHERE val = '2';\n OPTIMIZE TABLE test_01307 FINAL;\n SELECT count() FROM test_01307 WHERE identity(val) = '2';\n SELECT count() FROM test_01307 WHERE val = '2';\n+\n+DROP TABLE test_01307;\ndiff --git a/tests/queries/0_stateless/01532_tuple_with_name_type.reference b/tests/queries/0_stateless/01532_tuple_with_name_type.reference\nnew file mode 100644\nindex 000000000000..f9f6b5995ce1\n--- /dev/null\n+++ b/tests/queries/0_stateless/01532_tuple_with_name_type.reference\n@@ -0,0 +1,5 @@\n+a\tTuple(key String, value String)\t\t\t\t\t\n+a\tTuple(Tuple(key String, value String))\t\t\t\t\t\n+a.key\tArray(String)\t\t\t\t\t\n+a.value\tArray(String)\t\t\t\t\t\n+a\tTuple(UInt8, Tuple(key String, value String))\t\t\t\t\t\ndiff --git a/tests/queries/0_stateless/01532_tuple_with_name_type.sql b/tests/queries/0_stateless/01532_tuple_with_name_type.sql\nnew file mode 100644\nindex 000000000000..fbc052d3cc0e\n--- /dev/null\n+++ b/tests/queries/0_stateless/01532_tuple_with_name_type.sql\n@@ -0,0 +1,21 @@\n+DROP TABLE IF EXISTS test_01532_1;\n+DROP TABLE IF EXISTS test_01532_2;\n+DROP TABLE IF EXISTS test_01532_3;\n+DROP TABLE IF EXISTS test_01532_4;\n+\n+CREATE TABLE test_01532_1 (a Tuple(key String, value String)) ENGINE Memory();\n+DESCRIBE TABLE test_01532_1;\n+\n+CREATE TABLE test_01532_2 (a Tuple(Tuple(key String, value String))) ENGINE Memory();\n+DESCRIBE TABLE test_01532_2;\n+\n+CREATE TABLE test_01532_3 (a Array(Tuple(key String, value String))) ENGINE Memory();\n+DESCRIBE TABLE test_01532_3;\n+\n+CREATE TABLE test_01532_4 (a Tuple(UInt8, Tuple(key String, value String))) ENGINE Memory();\n+DESCRIBE TABLE test_01532_4;\n+\n+DROP TABLE test_01532_1;\n+DROP TABLE test_01532_2;\n+DROP TABLE test_01532_3;\n+DROP TABLE test_01532_4;\n",
  "problem_statement": "Named tuple inside array data type specification can't be parsed\n```\r\n$ clickhouse client\r\nClickHouse client version 20.10.1.1-arcadia.\r\nConnecting to localhost:9000 as user default.\r\nConnected to ClickHouse server version 20.10.1 revision 54441.\r\n\r\nmax42-dev.sas.yp-c.yandex.net :) create table T(f Array(Tuple(key String, value UInt8))) engine = Log()\r\n\r\nSyntax error: failed at position 34 ('String'):\r\n\r\ncreate table T(f Array(Tuple(key String, value UInt8))) engine = Log()\r\n\r\nExpected one of: LIKE, GLOBAL NOT IN, AS, IS, OR, QuestionMark, BETWEEN, NOT LIKE, AND, Comma, alias, IN, ILIKE, Dot, NOT ILIKE, NOT, Arrow, NOT IN, token, GLOBAL IN\r\n\r\nmax42-dev.sas.yp-c.yandex.net :) create table T(f Array(Tuple(String, UInt8))) engine = Log()                  \r\n\r\nCREATE TABLE T\r\n(\r\n    `f` Array(Tuple(String, UInt8))\r\n)\r\nENGINE = Log()\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.008 sec. \r\n\r\nmax42-dev.sas.yp-c.yandex.net :) create table T2(f Tuple(key String, value UInt8)) engine = Log()\r\n\r\nCREATE TABLE T2\r\n(\r\n    `f` Tuple(    key String,     value UInt8)\r\n)\r\nENGINE = Log()\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.005 sec. \r\n```\r\n\r\nIf I understand correctly, DataType parser allows parsing of nested-like data type specifications (i.e. Typename(f1 T1, f2 T2, ...)) only at the top-level. It makes impossible to enclose named tuple into any kind of other structure, like Array or another Tuple. \r\n\r\nSuch option is needed for proper interoperability with third-party applications which impose such data types.\n",
  "hints_text": "",
  "created_at": "2020-10-22T13:46:48Z"
}