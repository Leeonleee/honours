{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 23008,
  "instance_id": "ClickHouse__ClickHouse-23008",
  "issue_numbers": [
    "2719"
  ],
  "base_commit": "97611faad096b7fc355ce24234e64c0aaa4ddebf",
  "patch": "diff --git a/programs/install/Install.cpp b/programs/install/Install.cpp\nindex ef72624e7ab0..3cab7a0ce965 100644\n--- a/programs/install/Install.cpp\n+++ b/programs/install/Install.cpp\n@@ -71,6 +71,9 @@ namespace ErrorCodes\n \n }\n \n+/// ANSI escape sequence for intense color in terminal.\n+#define HILITE \"\\033[1m\"\n+#define END_HILITE \"\\033[0m\"\n \n using namespace DB;\n namespace po = boost::program_options;\n@@ -563,12 +566,12 @@ int mainEntryClickHouseInstall(int argc, char ** argv)\n \n         if (has_password_for_default_user)\n         {\n-            fmt::print(\"Password for default user is already specified. To remind or reset, see {} and {}.\\n\",\n+            fmt::print(HILITE \"Password for default user is already specified. To remind or reset, see {} and {}.\" END_HILITE,\n                        users_config_file.string(), users_d.string());\n         }\n         else if (!is_interactive)\n         {\n-            fmt::print(\"Password for default user is empty string. See {} and {} to change it.\\n\",\n+            fmt::print(HILITE \"Password for default user is empty string. See {} and {} to change it.\" END_HILITE,\n                        users_config_file.string(), users_d.string());\n         }\n         else\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01812_basic_auth_http_server.reference b/tests/queries/0_stateless/01812_basic_auth_http_server.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/01812_basic_auth_http_server.sh b/tests/queries/0_stateless/01812_basic_auth_http_server.sh\nnew file mode 100755\nindex 000000000000..4b993137bbda\n--- /dev/null\n+++ b/tests/queries/0_stateless/01812_basic_auth_http_server.sh\n@@ -0,0 +1,19 @@\n+#!/usr/bin/env bash\n+# shellcheck disable=SC2046\n+\n+# In very old (e.g. 1.1.54385) versions of ClickHouse there was a bug in Poco HTTP library:\n+# Basic HTTP authentication headers was not parsed if the size of URL is exactly 4077 + something bytes.\n+# So, the user may get authentication error if valid credentials are passed.\n+# This is a minor issue because it does not have security implications (at worse the user will be not allowed to access).\n+\n+CUR_DIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CUR_DIR\"/../shell_config.sh\n+\n+# In this test we do the opposite: passing the invalid credentials while server is accepting default user without a password.\n+# And if the bug exists, they will be ignored (treat as empty credentials) and query succeed.\n+\n+for i in {3950..4100}; do ${CLICKHOUSE_CURL} --user default:12345 \"${CLICKHOUSE_URL}&query=SELECT+1\"$(perl -e \"print '+'x$i\") | grep -v -F 'password' ||:; done\n+\n+# You can check that the bug exists in old version by running the old server in Docker:\n+# docker run --network host -it --rm yandex/clickhouse-server:1.1.54385\n",
  "problem_statement": "Authorization via \"Authorization\" header fails when passing query via query-string\nI make GET-requests to clickhouse and pass authorization info in \"Authorization\"  header and query via query string. But on a little fraction of queries clickhouse constantly returns error\r\n\r\n`` \r\nCode: 195, e.displayText() = DB::Exception: User default is not allowed to connect from address ::ffff:100.116.16.11, e.what() = DB::Exception\r\n``\r\n\r\nAfter some research i found out that this error occurs only on requests with query-string with length equal to 4077 symbols. First line of this query looks like\r\n``\r\n GET /?<ANY_VALID_QUERY_STRING_OF_LENGTH=4077> HTTP/1.1\r\n``\r\nExample of such query:\r\n``\r\nGET /?database=target&default_format=TabSeparatedWithNamesAndTypes&query=SELECT+%60date%60+AS+%60time%60%2C+banner_id+AS+%60entity_id%60%2C+sumIf%28currency_a_amount%2Bcurrency_n_amount%2Btps_currency_a_amount%2Btps_currency_n_amount%2C+charging_status_bit%3D0%29+AS+%60amount%60%2C+sumIf%28currency_a_amount%2Btps_currency_a_amount%2C+charging_status_bit%3D0%29+AS+%60a_amount%60%2C+sumIf%28count%2C+event_type%3D10+OR+event_type%3E%3D100%29+AS+%60customs%60%2C+sumIf%28count%2C+event_type%3D0%29+AS+%60shows%60%2C+sumIf%28count%2C+event_type%3D1%29+AS+%60clicks%60%2C+sumIf%28count%2C+event_type%3D7%29+AS+%60goals%60%2C+sumIf%28count%2C+event_type%3D1090%29+AS+%60opening_post%60%2C+sumIf%28count%2C+event_type%3D1091%29+AS+%60likes%60%2C+sumIf%28count%2C+event_type%3D1092%29+AS+%60shares%60%2C+sumIf%28count%2C+event_type%3D1093%29+AS+%60comments%60%2C+sumIf%28count%2C+event_type%3D1094%29+AS+%60clicks_on_external_url%60%2C+sumIf%28count%2C+event_type%3D1095%29+AS+%60launching_video%60%2C+sumIf%28count%2C+event_type%3D1097%29+AS+%60votings%60%2C+sumIf%28count%2C+event_type%3D1099%29+AS+%60opening_app%60%2C+sumIf%28count%2C+event_type%3D1100%29+AS+%60moving_into_group%60%2C+sumIf%28count%2C+event_type%3D1105%29+AS+%60joinings%60%2C+sumIf%28count%2C+event_type%3D1202%29+AS+%60sending_form%60%2C+sumIf%28count%2C+event_type%3D1005%29+AS+%60sound_off%60%2C+sumIf%28count%2C+event_type%3D1006%29+AS+%60sound_on%60%2C+sumIf%28count%2C+event_type%3D1010%29+AS+%60fullscreen_on%60%2C+sumIf%28count%2C+event_type%3D1011%29+AS+%60fullscreen_off%60%2C+sumIf%28count%2C+event_type%3D1007%29+AS+%60paused%60%2C+sumIf%28count%2C+event_type%3D1009%29+AS+%60resumed%60%2C+sumIf%28count%2C+event_type%3D1000%29+AS+%60video_started%60%2C+sumIf%28count%2C+event_type%3D1017%29+AS+%60video_viewed_10%60%2C+sumIf%28count%2C+event_type%3D1001%29+AS+%60video_viewed_25%60%2C+sumIf%28count%2C+event_type%3D1002%29+AS+%60video_viewed_50%60%2C+sumIf%28count%2C+event_type%3D1003%29+AS+%60video_viewed_75%60%2C+sumIf%28count%2C+event_type%3D1013%29+AS+%60video_viewed_100%60%2C+sumIf%28count%2C+event_type%3D4009%29+AS+%60video_viewable_50_2_sec%60%2C+sumIf%28count%2C+event_type%3D4011%29+AS+%60video_non_viewable_50_2_sec%60%2C+sumIf%28count%2C+event_type%3D1121%29+AS+%60slide_1_clicks%60%2C+sumIf%28count%2C+event_type%3D1122%29+AS+%60slide_1_shows%60%2C+sumIf%28count%2C+event_type%3D1123%29+AS+%60slide_2_clicks%60%2C+sumIf%28count%2C+event_type%3D1124%29+AS+%60slide_2_shows%60%2C+sumIf%28count%2C+event_type%3D1125%29+AS+%60slide_3_clicks%60%2C+sumIf%28count%2C+event_type%3D1126%29+AS+%60slide_3_shows%60%2C+sumIf%28count%2C+event_type%3D1127%29+AS+%60slide_4_clicks%60%2C+sumIf%28count%2C+event_type%3D1128%29+AS+%60slide_4_shows%60%2C+sumIf%28count%2C+event_type%3D1129%29+AS+%60slide_5_clicks%60%2C+sumIf%28count%2C+event_type%3D1130%29+AS+%60slide_5_shows%60%2C+sumIf%28count%2C+event_type%3D1131%29+AS+%60slide_6_clicks%60%2C+sumIf%28count%2C+event_type%3D1132%29+AS+%60slide_6_shows%60+FROM+hour_banner_events+WHERE+%28%60date%60+BETWEEN+%272018-07-22%27+AND+%272018-07-23%27%29+AND+%28%60timestamp%60+BETWEEN+%272018-07-22+00%3A00%3A00%27+AND+%272018-07-23+23%3A59%3A59%27%29+AND+%28%60advertiser_id%60+%3D+3225395%29+AND+%28%60banner_id%60+IN+%2831521382%2C31521383%2C31521384%2C31521385%2C31521386%2C31521387%2C31708840%2C31708841%2C31708846%2C31708848%2C31708849%2C31708851%2C31708906%2C31708912%2C31708914%2C31708915%2C31708917%2C31954684%2C31954686%2C31954687%2C31954693%2C31954694%2C31954695%2C31954696%2C31954697%2C31954699%2C31954700%2C31954701%2C31954721%2C31954722%2C31954723%2C31954724%2C31954725%2C32119663%2C32119664%2C32119665%2C32119666%2C32119667%2C32119669%2C32119754%2C32119755%2C32119756%2C32119757%2C32119758%2C32119760%2C32120038%2C32120039%2C32120040%2C32120041%2C32120042%2C32120044%2C32120086%2C32120087%2C32120088%2C32120089%2C32120090%2C32120092%2C32160971%2C32160972%2C32161008%2C32161009%29%29+AND+%28charging_status_bit%3D0+OR+%28charging_status_bit%3D16+AND+currency_a_amount%3D0+AND+currency_n_amount%3D0%29%29+GROUP+BY+%60time%60%2C+%60entity_id%60 HTTP/1.1\r\n``\r\n\r\nThis error is observed on clickhouse 1.1.54385\n",
  "hints_text": "Most likely this is bug in Poco library, that we use to implement HTTP.\r\nIt should return 400 Bad Request, because headers size is bigger than the limit, but instead it failed to see Authorization header.\r\n\r\nSolution: send query via POST.\nThe strange thing is that it works correctly on longer queries. Only this particular length leads to this error.\nVery strange indeed. We should investigate further.\nI've encountered exact same bug.\r\nI was making GET request to the clickhouse server like 'https://clickhouse-hostname?query=SELECT...', and it failed with the same permission error when the whole 'query=SELECT...' is length 4077. \r\nIt works fine with other lengths shorter or longer.\r\nAlso, I was making request with my own username and password to the request, which was not 'default'.\nTried to trace the problem as best as I can. Here's the trace that I believe came from the problematic query:\r\n```\r\n2019.01.15 02:56:23.865627 [ 274 ] {} <Error> HTTPHandler: Code: 195, e.displayText() = DB::Exception: User default is not allowed to connect from address 2400:cb00:36:1032::a29e:4465, e.what() = DB::Exception, Stack trace:\r\n\r\n0. /usr/bin/clickhouse-server(StackTrace::StackTrace()+0x16) [0x94986b6]\r\n1. /usr/bin/clickhouse-server(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x1f) [0x3580e4f]\r\n2. /usr/bin/clickhouse-server(DB::SecurityManager::authorizeAndGetUser(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Poco::Net::IPAddress const&) const+0x515) [0x6ba1fa5]\r\n3. /usr/bin/clickhouse-server(DB::Context::setUser(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Poco::Net::SocketAddress const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)+0x66) [0x6ac8b26]\r\n4. /usr/bin/clickhouse-server(DB::HTTPHandler::processQuery(Poco::Net::HTTPServerRequest&, HTMLForm&, Poco::Net::HTTPServerResponse&, DB::HTTPHandler::Output&)+0x5b7) [0x3598257]\r\n5. /usr/bin/clickhouse-server(DB::HTTPHandler::handleRequest(Poco::Net::HTTPServerRequest&, Poco::Net::HTTPServerResponse&)+0x3f5) [0x359d015]\r\n6. /usr/bin/clickhouse-server(Poco::Net::HTTPServerConnection::run()+0x2e8) [0x971e268]\r\n7. /usr/bin/clickhouse-server(Poco::Net::TCPServerConnection::start()+0xf) [0x97186ef]\r\n8. /usr/bin/clickhouse-server(Poco::Net::TCPServerDispatcher::run()+0xe5) [0x9718de5]\r\n9. /usr/bin/clickhouse-server(Poco::PooledThread::run()+0x81) [0x9eebf71]\r\n10. /usr/bin/clickhouse-server(Poco::ThreadImpl::runnableEntry(void*)+0x38) [0x9ee8518]\r\n11. /usr/bin/clickhouse-server() [0x9fbf70f]\r\n12. /lib/x86_64-linux-gnu/libpthread.so.0(+0x7494) [0x7fa13e082494]\r\n```\r\n\r\nTried to trace in the code (not exactly sure if I'm looking at the right code or version, but doing my best), I think it goes into HTTPHandler::processQuery(): https://github.com/yandex/ClickHouse/blob/master/dbms/programs/server/HTTPHandler.cpp#L211\r\nSomewhere around there, Poco request does not parse request header or query properly when the query size is 4077, and probably request.hasCredentials() returns false, and set user to \"default\".\r\n\r\nRelevant code might be found around here, but I don't really know how it exactly works, and could not identify the issue:\r\nhttps://github.com/pocoproject/poco/blob/develop/Net/include/Poco/Net/HTTPRequest.h\r\nhttps://github.com/pocoproject/poco/blob/develop/Net/src/HTTPRequest.cpp\r\n\r\nPOST give a similar problem, with a different header missing:\r\n```\r\nCode: 381, e.displayText() = DB::Exception: There is neither Transfer-Encoding header nor Content-Length header, e.what() = DB::Exception\r\n```\r\n\r\nA quick workaround is to append \"+\" (a query parameter space) when the length of query (\"query=...\") is exactly 4077.\nAny updates?\nThe issue most likely fixed here: #19516\nI will add a test.",
  "created_at": "2021-04-12T21:56:43Z"
}