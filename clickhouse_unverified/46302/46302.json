{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 46302,
  "instance_id": "ClickHouse__ClickHouse-46302",
  "issue_numbers": [
    "46184"
  ],
  "base_commit": "ebec5b8050b31539da9d86d63a40838db632b167",
  "patch": "diff --git a/docs/en/sql-reference/functions/date-time-functions.md b/docs/en/sql-reference/functions/date-time-functions.md\nindex 1dc1b60c1493..f6af8abcbafe 100644\n--- a/docs/en/sql-reference/functions/date-time-functions.md\n+++ b/docs/en/sql-reference/functions/date-time-functions.md\n@@ -1205,6 +1205,8 @@ Formats a Time according to the given Format string. Format is a constant expres\n \n formatDateTime uses MySQL datetime format style, refer to https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_date-format.\n \n+Alias: `DATE_FORMAT`.\n+\n **Syntax**\n \n ``` sql\n@@ -1220,29 +1222,39 @@ Using replacement fields, you can define a pattern for the resulting string. \u201c\n \n | Placeholder | Description                                             | Example    |\n |----------|---------------------------------------------------------|------------|\n+| %a       | abbreviated weekday name (Mon-Sun)                      | Mon        |\n+| %b       | abbreviated month name (Jan-Dec)                        | Jan        |\n+| %c       | month as a decimal number (01-12)                       | 01         |\n | %C       | year divided by 100 and truncated to integer (00-99)    | 20         |\n | %d       | day of the month, zero-padded (01-31)                   | 02         |\n | %D       | Short MM/DD/YY date, equivalent to %m/%d/%y             | 01/02/18   |\n-| %e       | day of the month, space-padded ( 1-31)                  | &nbsp; 2   |\n+| %e       | day of the month, space-padded (1-31)                   | &nbsp; 2   |\n | %f       | fractional second from the fractional part of DateTime64 | 1234560   |\n | %F       | short YYYY-MM-DD date, equivalent to %Y-%m-%d           | 2018-01-02 |\n | %G       | four-digit year format for ISO week number, calculated from the week-based year [defined by the ISO 8601](https://en.wikipedia.org/wiki/ISO_8601#Week_dates) standard, normally useful only with %V  | 2018         |\n | %g       | two-digit year format, aligned to ISO 8601, abbreviated from four-digit notation                                | 18       |\n+| %h       | hour in 12h format (01-12)                              | 09         |\n | %H       | hour in 24h format (00-23)                              | 22         |\n+| %i       | minute (00-59)                                          | 33         |\n | %I       | hour in 12h format (01-12)                              | 10         |\n | %j       | day of the year (001-366)                               | 002        |\n+| %k       | hour in 24h format (00-23)                              | 22         |\n+| %l       | hour in 12h format (01-12)                              | 09         |\n | %m       | month as a decimal number (01-12)                       | 01         |\n | %M       | minute (00-59)                                          | 33         |\n | %n       | new-line character (\u2018\u2019)                                 |            |\n | %p       | AM or PM designation                                    | PM         |\n | %Q       | Quarter (1-4)                                           | 1          |\n+| %r       | 12-hour HH:MM AM/PM time, equivalent to %H:%M %p        | 10:30 PM   |\n | %R       | 24-hour HH:MM time, equivalent to %H:%M                 | 22:33      |\n+| %s       | second (00-59)                                          | 44         |\n | %S       | second (00-59)                                          | 44         |\n | %t       | horizontal-tab character (\u2019)                            |            |\n | %T       | ISO 8601 time format (HH:MM:SS), equivalent to %H:%M:%S | 22:33:44   |\n | %u       | ISO 8601 weekday as number with Monday as 1 (1-7)       | 2          |\n | %V       | ISO 8601 week number (01-53)                            | 01         |\n | %w       | weekday as a decimal number with Sunday as 0 (0-6)      | 2          |\n+| %W       | full weekday name (Monday-Sunday)                       | Monday     |\n | %y       | Year, last two digits (00-99)                           | 18         |\n | %Y       | Year                                                    | 2018       |\n | %z       | Time offset from UTC as +HHMM or -HHMM                  | -0500      |\ndiff --git a/src/Functions/formatDateTime.cpp b/src/Functions/formatDateTime.cpp\nindex 76bd6bbfdc0b..2172aa4c4fe2 100644\n--- a/src/Functions/formatDateTime.cpp\n+++ b/src/Functions/formatDateTime.cpp\n@@ -342,12 +342,51 @@ class FunctionFormatDateTimeImpl : public IFunction\n             return writeNumber2(dest, ToMonthImpl::execute(source, timezone));\n         }\n \n+        static size_t monthOfYearText(char * dest, Time source, bool abbreviate, UInt64, UInt32, const DateLUTImpl & timezone)\n+        {\n+            auto month = ToMonthImpl::execute(source, timezone);\n+            std::string_view str_view = abbreviate ? monthsShort[month - 1] : monthsFull[month - 1];\n+            memcpy(dest, str_view.data(), str_view.size());\n+            return str_view.size();\n+        }\n+\n+        static size_t mysqlMonthOfYearTextShort(char * dest, Time source, UInt64 fractional_second, UInt32 scale, const DateLUTImpl & timezone)\n+        {\n+            return monthOfYearText(dest, source, true, fractional_second, scale, timezone);\n+        }\n+\n+        static size_t mysqlMonthOfYearTextLong(char * dest, Time source, UInt64 fractional_second, UInt32 scale, const DateLUTImpl & timezone)\n+        {\n+            return monthOfYearText(dest, source, false, fractional_second, scale, timezone);\n+        }\n+\n         static size_t mysqlDayOfWeek(char * dest, Time source, UInt64, UInt32, const DateLUTImpl & timezone)\n         {\n             *dest = '0' + ToDayOfWeekImpl::execute(source, 0, timezone);\n             return 1;\n         }\n \n+        static size_t dayOfWeekText(char * dest, Time source, bool abbreviate, UInt64, UInt32, const DateLUTImpl & timezone)\n+        {\n+            auto week_day = ToDayOfWeekImpl::execute(source, 0, timezone);\n+            if (week_day == 7)\n+                week_day = 0;\n+\n+            std::string_view str_view = abbreviate ? weekdaysShort[week_day] : weekdaysFull[week_day];\n+            memcpy(dest, str_view.data(), str_view.size());\n+            return str_view.size();\n+        }\n+\n+        static size_t mysqlDayOfWeekTextShort(char * dest, Time source, UInt64 fractional_second, UInt32 scale, const DateLUTImpl & timezone)\n+        {\n+            return dayOfWeekText(dest, source, true, fractional_second, scale, timezone);\n+        }\n+\n+        static size_t mysqlDayOfWeekTextLong(char * dest, Time source, UInt64 fractional_second, UInt32 scale, const DateLUTImpl & timezone)\n+        {\n+            return dayOfWeekText(dest, source, false, fractional_second, scale, timezone);\n+        }\n+\n         static size_t mysqlDayOfWeek0To6(char * dest, Time source, UInt64, UInt32, const DateLUTImpl & timezone)\n         {\n             auto day = ToDayOfWeekImpl::execute(source, 0, timezone);\n@@ -411,6 +450,16 @@ class FunctionFormatDateTimeImpl : public IFunction\n             return 5;\n         }\n \n+        static size_t mysqlHHMM12(char * dest, Time source, UInt64, UInt32, const DateLUTImpl & timezone)\n+        {\n+            auto hour = ToHourImpl::execute(source, timezone);\n+            writeNumber2(dest, hour == 0 ? 12 : (hour > 12 ? hour - 12 : hour));\n+            writeNumber2(dest + 3, ToMinuteImpl::execute(source, timezone));\n+\n+            dest[6] = hour >= 12 ? 'P' : 'A';\n+            return 8;\n+        }\n+\n         static size_t mysqlSecond(char * dest, Time source, UInt64, UInt32, const DateLUTImpl & timezone)\n         {\n             return writeNumber2(dest, ToSecondImpl::execute(source, timezone));\n@@ -503,15 +552,10 @@ class FunctionFormatDateTimeImpl : public IFunction\n             return writeNumberWithPadding(dest, week_day, min_represent_digits);\n         }\n \n-        static size_t jodaDayOfWeekText(size_t min_represent_digits, char * dest, Time source, UInt64, UInt32, const DateLUTImpl & timezone)\n+        static size_t jodaDayOfWeekText(size_t min_represent_digits, char * dest, Time source, UInt64 fractional_second, UInt32 scale, const DateLUTImpl & timezone)\n         {\n-            auto week_day = ToDayOfWeekImpl::execute(source, 0, timezone);\n-            if (week_day == 7)\n-                week_day = 0;\n-\n-            std::string_view str_view = min_represent_digits <= 3 ? weekdaysShort[week_day] : weekdaysFull[week_day];\n-            memcpy(dest, str_view.data(), str_view.size());\n-            return str_view.size();\n+            bool abbreviate = min_represent_digits <= 3;\n+            return dayOfWeekText(dest, source, abbreviate, fractional_second, scale, timezone);\n         }\n \n         static size_t jodaYear(size_t min_represent_digits, char * dest, Time source, UInt64, UInt32, const DateLUTImpl & timezone)\n@@ -551,12 +595,10 @@ class FunctionFormatDateTimeImpl : public IFunction\n             return writeNumberWithPadding(dest, month_of_year, min_represent_digits);\n         }\n \n-        static size_t jodaMonthOfYearText(size_t min_represent_digits, char * dest, Time source, UInt64, UInt32, const DateLUTImpl & timezone)\n+        static size_t jodaMonthOfYearText(size_t min_represent_digits, char * dest, Time source, UInt64 fractional_second, UInt32 scale, const DateLUTImpl & timezone)\n         {\n-            auto month = ToMonthImpl::execute(source, timezone);\n-            std::string_view str_view = min_represent_digits <= 3 ? monthsShort[month - 1] : monthsFull[month - 1];\n-            memcpy(dest, str_view.data(), str_view.size());\n-            return str_view.size();\n+            bool abbreviate = min_represent_digits <= 3;\n+            return monthOfYearText(dest, source, abbreviate, fractional_second, scale, timezone);\n         }\n \n         static size_t jodaDayOfMonth(size_t min_represent_digits, char * dest, Time source, UInt64, UInt32, const DateLUTImpl & timezone)\n@@ -909,6 +951,24 @@ class FunctionFormatDateTimeImpl : public IFunction\n \n                 switch (*pos)\n                 {\n+                    // Abbreviated weekday [Mon...Sun]\n+                    case 'a':\n+                        instructions.emplace_back(&Action<T>::mysqlDayOfWeekTextShort);\n+                        out_template += \"Mon\";\n+                        break;\n+\n+                    // Abbreviated month [Jan...Dec]\n+                    case 'b':\n+                        instructions.emplace_back(&Action<T>::mysqlMonthOfYearTextShort);\n+                        out_template += \"Jan\";\n+                        break;\n+\n+                    // Month as a decimal number (01-12)\n+                    case 'c':\n+                        instructions.emplace_back(&Action<T>::mysqlMonth);\n+                        out_template += \"00\";\n+                        break;\n+\n                     // Year, divided by 100, zero-padded\n                     case 'C':\n                         instructions.emplace_back(&Action<T>::mysqlCentury);\n@@ -990,6 +1050,12 @@ class FunctionFormatDateTimeImpl : public IFunction\n                         out_template += \"0\";\n                         break;\n \n+                    // Full weekday [Monday...Sunday]\n+                    case 'W':\n+                        instructions.emplace_back(&Action<T>::mysqlDayOfWeekTextLong);\n+                        out_template += \"Monday\";\n+                        break;\n+\n                     // Two digits year\n                     case 'y':\n                         instructions.emplace_back(&Action<T>::mysqlYear2);\n@@ -1028,65 +1094,102 @@ class FunctionFormatDateTimeImpl : public IFunction\n                         out_template += \"AM\";\n                         break;\n \n-                    // 24-hour HH:MM time, equivalent to %H:%M 14:55\n+                    // 12-hour HH:MM time, equivalent to %h:%i %p 2:55 PM\n+                    case 'r':\n+                        add_instruction_or_extra_shift(&Action<T>::mysqlHHMM12, 8);\n+                        out_template += \"12:00 AM\";\n+                        break;\n+\n+                    // 24-hour HH:MM time, equivalent to %H:%i 14:55\n                     case 'R':\n                         add_instruction_or_extra_shift(&Action<T>::mysqlHHMM24, 5);\n                         out_template += \"00:00\";\n                         break;\n \n+                    // Seconds\n+                    case 's':\n+                        add_instruction_or_extra_shift(&Action<T>::mysqlSecond, 2);\n+                        out_template += \"00\";\n+                        break;\n+\n                     // Seconds\n                     case 'S':\n                         add_instruction_or_extra_shift(&Action<T>::mysqlSecond, 2);\n                         out_template += \"00\";\n                         break;\n \n-                    // ISO 8601 time format (HH:MM:SS), equivalent to %H:%M:%S 14:55:02\n+                    // ISO 8601 time format (HH:MM:SS), equivalent to %H:%i:%S 14:55:02\n                     case 'T':\n                         add_instruction_or_extra_shift(&Action<T>::mysqlISO8601Time, 8);\n                         out_template += \"00:00:00\";\n                         break;\n \n+                    // Hour in 12h format (01-12)\n+                    case 'h':\n+                        add_instruction_or_extra_shift(&Action<T>::mysqlHour12, 2);\n+                        out_template += \"12\";\n+                        break;\n+\n                     // Hour in 24h format (00-23)\n                     case 'H':\n                         add_instruction_or_extra_shift(&Action<T>::mysqlHour24, 2);\n                         out_template += \"00\";\n                         break;\n \n+                    // Minute of hour range [0, 59]\n+                    case 'i':\n+                        add_instruction_or_extra_shift(&Action<T>::mysqlMinute, 2);\n+                        out_template += \"00\";\n+                        break;\n+\n                     // Hour in 12h format (01-12)\n                     case 'I':\n                         add_instruction_or_extra_shift(&Action<T>::mysqlHour12, 2);\n                         out_template += \"12\";\n                         break;\n \n-                    /// Escaped literal characters.\n-                    case '%':\n-                        add_extra_shift(1);\n-                        out_template += \"%\";\n+                    // Hour in 24h format (00-23)\n+                    case 'k':\n+                        add_instruction_or_extra_shift(&Action<T>::mysqlHour24, 2);\n+                        out_template += \"00\";\n                         break;\n+\n+                    // Hour in 12h format (01-12)\n+                    case 'l':\n+                        add_instruction_or_extra_shift(&Action<T>::mysqlHour12, 2);\n+                        out_template += \"12\";\n+                        break;\n+\n                     case 't':\n                         add_extra_shift(1);\n                         out_template += \"\\t\";\n                         break;\n+\n                     case 'n':\n                         add_extra_shift(1);\n                         out_template += \"\\n\";\n                         break;\n \n+                    // Escaped literal characters.\n+                    case '%':\n+                        add_extra_shift(1);\n+                        out_template += \"%\";\n+                        break;\n+\n                     // Unimplemented\n                     case 'U':\n-                        [[fallthrough]];\n-                    case 'W':\n-                        throw Exception(\n-                            ErrorCodes::NOT_IMPLEMENTED,\n-                            \"Wrong syntax '{}', symbol '{}' is not implemented for function {}\",\n-                            format,\n-                            *pos,\n-                            getName());\n+                        throw Exception(ErrorCodes::NOT_IMPLEMENTED, \"format is not supported for WEEK (Sun-Sat)\");\n+                    case 'v':\n+                        throw Exception(ErrorCodes::NOT_IMPLEMENTED, \"format is not supported for WEEK (Mon-Sun)\");\n+                    case 'x':\n+                        throw Exception(ErrorCodes::NOT_IMPLEMENTED, \"format is not supported for YEAR for week (Mon-Sun)\");\n+                    case 'X':\n+                        throw Exception(ErrorCodes::NOT_IMPLEMENTED, \"format is not supported for YEAR for week (Sun-Sat)\");\n \n                     default:\n                         throw Exception(\n-                            ErrorCodes::ILLEGAL_COLUMN,\n-                            \"Wrong syntax '{}', unexpected symbol '{}' for function {}\",\n+                            ErrorCodes::BAD_ARGUMENTS,\n+                            \"Incorrect syntax '{}', symbol is not supported '{}' for function {}\",\n                             format,\n                             *pos,\n                             getName());\n@@ -1337,6 +1440,8 @@ using FunctionFromUnixTimestampInJodaSyntax = FunctionFormatDateTimeImpl<NameFro\n REGISTER_FUNCTION(FormatDateTime)\n {\n     factory.registerFunction<FunctionFormatDateTime>();\n+    factory.registerAlias(\"DATE_FORMAT\", FunctionFormatDateTime::name);\n+\n     factory.registerFunction<FunctionFromUnixTimestamp>();\n     factory.registerAlias(\"FROM_UNIXTIME\", \"fromUnixTimestamp\");\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00718_format_datetime.reference b/tests/queries/0_stateless/00718_format_datetime.reference\nindex 17937514396c..e35484d4b0b8 100644\n--- a/tests/queries/0_stateless/00718_format_datetime.reference\n+++ b/tests/queries/0_stateless/00718_format_datetime.reference\n@@ -1,25 +1,33 @@\n+Tue\tTue\n+Jan\tJan\n+01\t01\n 20\t20\n 02\t02\n 01/02/18\t01/02/18\n  2\t 2\n 2018-01-02\t2018-01-02\n+10\t12\n 22\t00\n 02\n+33\t00\n 10\t12\n 11\n 12\n 001\t001\n 366\t366\n+00\t00\n 01\t01\n 33\t00\n \\n\t\\n\n AM\tAM\n AM\n PM\n+10:33 PM\t12:00 AM\n 22:33\t00:00\n 44\t00\n \\t\t\\t\n 22:33:44\t00:00:00\n+Tuesday\tTuesday\n 1\t7\t1\t7\n 01\t01\t53\t52\t01\t01\t53\t52\n 1\t0\t1\t0\ndiff --git a/tests/queries/0_stateless/00718_format_datetime.sql b/tests/queries/0_stateless/00718_format_datetime.sql\nindex f6fb2ce15bcc..74ec03d83d30 100644\n--- a/tests/queries/0_stateless/00718_format_datetime.sql\n+++ b/tests/queries/0_stateless/00718_format_datetime.sql\n@@ -1,35 +1,45 @@\n SET send_logs_level = 'fatal';\n \n-SELECT formatDateTime(); -- { serverError 42 }\n-SELECT formatDateTime('not a datetime', 'IGNORED'); -- { serverError 43 }\n-SELECT formatDateTime(now(), now()); -- { serverError 43 }\n-SELECT formatDateTime(now(), 'good format pattern', now()); -- { serverError 43 }\n-SELECT formatDateTime(now(), 'unescaped %'); -- { serverError 36 }\n-SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%U'); -- { serverError 48 }\n-SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%W'); -- { serverError 48 }\n+SELECT formatDateTime(); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH (42) }\n+SELECT formatDateTime('not a datetime', 'IGNORED'); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT (43) }\n+SELECT formatDateTime(now(), now()); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT (43) }\n+SELECT formatDateTime(now(), 'good format pattern', now()); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT (43) }\n+SELECT formatDateTime(now(), 'unescaped %'); -- { serverError BAD_ARGUMENTS (36) }\n+SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%U'); -- { serverError NOT_IMPLEMENTED (48) }\n+SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%v'); -- { serverError NOT_IMPLEMENTED (48) }\n+SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%x'); -- { serverError NOT_IMPLEMENTED (48) }\n+SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%X'); -- { serverError NOT_IMPLEMENTED (48) }\n \n+SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%a'), formatDateTime(toDate32('2018-01-02'), '%a');\n+SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%b'), formatDateTime(toDate32('2018-01-02'), '%b');\n+SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%c'), formatDateTime(toDate32('2018-01-02'), '%c');\n SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%C'), formatDateTime(toDate32('2018-01-02'), '%C');\n SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%d'), formatDateTime(toDate32('2018-01-02'), '%d');\n SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%D'), formatDateTime(toDate32('2018-01-02'), '%D');\n SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%e'), formatDateTime(toDate32('2018-01-02'), '%e');\n SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%F'), formatDateTime(toDate32('2018-01-02'), '%F');\n+SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%h'), formatDateTime(toDate32('2018-01-02'), '%h');\n SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%H'), formatDateTime(toDate32('2018-01-02'), '%H');\n SELECT formatDateTime(toDateTime('2018-01-02 02:33:44'), '%H');\n+SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%i'), formatDateTime(toDate32('2018-01-02'), '%i');\n SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%I'), formatDateTime(toDate32('2018-01-02'), '%I');\n SELECT formatDateTime(toDateTime('2018-01-02 11:33:44'), '%I');\n SELECT formatDateTime(toDateTime('2018-01-02 00:33:44'), '%I');\n SELECT formatDateTime(toDateTime('2018-01-01 00:33:44'), '%j'), formatDateTime(toDate32('2018-01-01'), '%j');\n SELECT formatDateTime(toDateTime('2000-12-31 00:33:44'), '%j'), formatDateTime(toDate32('2000-12-31'), '%j');\n+SELECT formatDateTime(toDateTime('2000-12-31 00:33:44'), '%k'), formatDateTime(toDate32('2000-12-31'), '%k');\n SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%m'), formatDateTime(toDate32('2018-01-02'), '%m');\n SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%M'), formatDateTime(toDate32('2018-01-02'), '%M');\n SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%n'), formatDateTime(toDate32('2018-01-02'), '%n');\n SELECT formatDateTime(toDateTime('2018-01-02 00:33:44'), '%p'), formatDateTime(toDateTime('2018-01-02'), '%p');\n SELECT formatDateTime(toDateTime('2018-01-02 11:33:44'), '%p');\n SELECT formatDateTime(toDateTime('2018-01-02 12:33:44'), '%p');\n+SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%r'), formatDateTime(toDate32('2018-01-02'), '%r');\n SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%R'), formatDateTime(toDate32('2018-01-02'), '%R');\n SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%S'), formatDateTime(toDate32('2018-01-02'), '%S');\n SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%t'), formatDateTime(toDate32('2018-01-02'), '%t');\n SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%T'), formatDateTime(toDate32('2018-01-02'), '%T');\n+SELECT formatDateTime(toDateTime('2018-01-02 22:33:44'), '%W'), formatDateTime(toDate32('2018-01-02'), '%W');\n SELECT formatDateTime(toDateTime('2018-01-01 22:33:44'), '%u'), formatDateTime(toDateTime('2018-01-07 22:33:44'), '%u'),\n        formatDateTime(toDate32('2018-01-01'), '%u'), formatDateTime(toDate32('2018-01-07'), '%u');\n SELECT formatDateTime(toDateTime('1996-01-01 22:33:44'), '%V'), formatDateTime(toDateTime('1996-12-31 22:33:44'), '%V'),\ndiff --git a/tests/queries/0_stateless/00719_format_datetime_rand.sql b/tests/queries/0_stateless/00719_format_datetime_rand.sql\nindex ee596912bc79..dcd907c0137f 100644\n--- a/tests/queries/0_stateless/00719_format_datetime_rand.sql\n+++ b/tests/queries/0_stateless/00719_format_datetime_rand.sql\n@@ -1,6 +1,6 @@\n -- We add 1, because function toString has special behaviour for zero datetime\n WITH toDateTime(1 + rand() % 0xFFFFFFFF) AS t SELECT count() FROM numbers(1000000) WHERE formatDateTime(t, '%F %T') != toString(t);\n-WITH toDateTime(1 + rand() % 0xFFFFFFFF) AS t SELECT count() FROM numbers(1000000) WHERE formatDateTime(t, '%Y-%m-%d %H:%M:%S') != toString(t);\n+WITH toDateTime(1 + rand() % 0xFFFFFFFF) AS t SELECT count() FROM numbers(1000000) WHERE formatDateTime(t, '%Y-%m-%d %H:%i:%S') != toString(t);\n WITH toDateTime(1 + rand() % 0xFFFFFFFF) AS t SELECT count() FROM numbers(1000000) WHERE formatDateTime(t, '%Y-%m-%d %R:%S') != toString(t);\n WITH toDateTime(1 + rand() % 0xFFFFFFFF) AS t SELECT count() FROM numbers(1000000) WHERE formatDateTime(t, '%F %R:%S') != toString(t);\n \ndiff --git a/tests/queries/0_stateless/00801_daylight_saving_time_hour_underflow.sql b/tests/queries/0_stateless/00801_daylight_saving_time_hour_underflow.sql\nindex a86a863124c9..d23972ee448f 100644\n--- a/tests/queries/0_stateless/00801_daylight_saving_time_hour_underflow.sql\n+++ b/tests/queries/0_stateless/00801_daylight_saving_time_hour_underflow.sql\n@@ -3,4 +3,4 @@ SELECT\n     ignore(toDateTime(370641600, 'Asia/Istanbul') AS t),\n     replaceRegexpAll(toString(t), '\\\\d', 'x'),\n     toHour(t) < 24,\n-    replaceRegexpAll(formatDateTime(t, '%Y-%m-%d %H:%M:%S; %R:%S; %F %T'), '\\\\d', 'x');\n+    replaceRegexpAll(formatDateTime(t, '%Y-%m-%d %H:%i:%S; %R:%S; %F %T'), '\\\\d', 'x');\ndiff --git a/tests/queries/0_stateless/01411_from_unixtime.reference b/tests/queries/0_stateless/01411_from_unixtime.reference\nindex 17086e8c58ba..4114c9b98d35 100644\n--- a/tests/queries/0_stateless/01411_from_unixtime.reference\n+++ b/tests/queries/0_stateless/01411_from_unixtime.reference\n@@ -5,25 +5,33 @@\n 11\n 1970-01-15\n 1970-01-15 06:52:36\n+Tue\tTue\n+Jan\tJan\n+01\t01\n 20\t20\n 02\t02\n 01/02/18\t01/02/18\n  2\t 2\n 2018-01-02\t2018-01-02\n+10\t12\n 22\t00\n 02\n+33\t00\n 10\t12\n 11\n 12\n 001\t001\n 366\t366\n+00\t00\n 01\t01\n 33\t00\n \\n\t\\n\n AM\tAM\n AM\n PM\n+10:33 PM\t12:00 AM\n 22:33\t00:00\n 44\t00\n \\t\t\\t\n 22:33:44\t00:00:00\n+Tuesday\tTuesday\ndiff --git a/tests/queries/0_stateless/01411_from_unixtime.sql b/tests/queries/0_stateless/01411_from_unixtime.sql\nindex 9a6655768e09..3578433e1dd0 100644\n--- a/tests/queries/0_stateless/01411_from_unixtime.sql\n+++ b/tests/queries/0_stateless/01411_from_unixtime.sql\n@@ -5,25 +5,33 @@ SELECT FROM_UNIXTIME(5345345, '%C', 'UTC');\n SELECT FROM_UNIXTIME(645123, '%H', 'UTC');\n SELECT FROM_UNIXTIME(1232456, '%Y-%m-%d', 'UTC');\n SELECT FROM_UNIXTIME(1234356, '%Y-%m-%d %R:%S', 'UTC');\n+SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%a'), FROM_UNIXTIME(toDate32('2018-01-02'), '%a');\n+SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%b'), FROM_UNIXTIME(toDate32('2018-01-02'), '%b');\n+SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%c'), FROM_UNIXTIME(toDate32('2018-01-02'), '%c');\n SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%C'), FROM_UNIXTIME(toDate32('2018-01-02'), '%C');\n SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%d'), FROM_UNIXTIME(toDate32('2018-01-02'), '%d');\n SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%D'), FROM_UNIXTIME(toDate32('2018-01-02'), '%D');\n SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%e'), FROM_UNIXTIME(toDate32('2018-01-02'), '%e');\n SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%F'), FROM_UNIXTIME(toDate32('2018-01-02'), '%F');\n+SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%h'), FROM_UNIXTIME(toDate32('2018-01-02'), '%h');\n SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%H'), FROM_UNIXTIME(toDate32('2018-01-02'), '%H');\n SELECT FROM_UNIXTIME(toDateTime('2018-01-02 02:33:44'), '%H');\n+SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%i'), FROM_UNIXTIME(toDate32('2018-01-02'), '%i');\n SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%I'), FROM_UNIXTIME(toDate32('2018-01-02'), '%I');\n SELECT FROM_UNIXTIME(toDateTime('2018-01-02 11:33:44'), '%I');\n SELECT FROM_UNIXTIME(toDateTime('2018-01-02 00:33:44'), '%I');\n SELECT FROM_UNIXTIME(toDateTime('2018-01-01 00:33:44'), '%j'), FROM_UNIXTIME(toDate32('2018-01-01'), '%j');\n SELECT FROM_UNIXTIME(toDateTime('2000-12-31 00:33:44'), '%j'), FROM_UNIXTIME(toDate32('2000-12-31'), '%j');\n+SELECT FROM_UNIXTIME(toDateTime('2000-12-31 00:33:44'), '%k'), FROM_UNIXTIME(toDate32('2000-12-31'), '%k');\n SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%m'), FROM_UNIXTIME(toDate32('2018-01-02'), '%m');\n SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%M'), FROM_UNIXTIME(toDate32('2018-01-02'), '%M');\n SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%n'), FROM_UNIXTIME(toDate32('2018-01-02'), '%n');\n SELECT FROM_UNIXTIME(toDateTime('2018-01-02 00:33:44'), '%p'), FROM_UNIXTIME(toDate32('2018-01-02'), '%p');\n SELECT FROM_UNIXTIME(toDateTime('2018-01-02 11:33:44'), '%p');\n SELECT FROM_UNIXTIME(toDateTime('2018-01-02 12:33:44'), '%p');\n+SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%r'), FROM_UNIXTIME(toDate32('2018-01-02'), '%r');\n SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%R'), FROM_UNIXTIME(toDate32('2018-01-02'), '%R');\n SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%S'), FROM_UNIXTIME(toDate32('2018-01-02'), '%S');\n SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%t'), FROM_UNIXTIME(toDate32('2018-01-02'), '%t');\n SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%T'), FROM_UNIXTIME(toDate32('2018-01-02'), '%T');\n+SELECT FROM_UNIXTIME(toDateTime('2018-01-02 22:33:44'), '%W'), FROM_UNIXTIME(toDate32('2018-01-02'), '%W');\ndiff --git a/tests/queries/0_stateless/02564_date_format.reference b/tests/queries/0_stateless/02564_date_format.reference\nnew file mode 100644\nindex 000000000000..a5f2e362cc6a\n--- /dev/null\n+++ b/tests/queries/0_stateless/02564_date_format.reference\n@@ -0,0 +1,30 @@\n+Tue\tTue\n+Jan\tJan\n+01\t01\n+20\t20\n+02\t02\n+01/02/18\t01/02/18\n+ 2\t 2\n+2018-01-02\t2018-01-02\n+10\t12\n+22\t00\n+02\n+33\t00\n+10\t12\n+11\n+12\n+001\t001\n+366\t366\n+00\t00\n+01\t01\n+33\t00\n+\\n\t\\n\n+AM\tAM\n+AM\n+PM\n+10:33 PM\t12:00 AM\n+22:33\t00:00\n+44\t00\n+\\t\t\\t\n+22:33:44\t00:00:00\n+Tuesday\tTuesday\ndiff --git a/tests/queries/0_stateless/02564_date_format.sql b/tests/queries/0_stateless/02564_date_format.sql\nnew file mode 100644\nindex 000000000000..1a1a1b7aa39e\n--- /dev/null\n+++ b/tests/queries/0_stateless/02564_date_format.sql\n@@ -0,0 +1,30 @@\n+SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%a'), DATE_FORMAT(toDate32('2018-01-02'), '%a');\n+SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%b'), DATE_FORMAT(toDate32('2018-01-02'), '%b');\n+SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%c'), DATE_FORMAT(toDate32('2018-01-02'), '%c');\n+SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%C'), DATE_FORMAT(toDate32('2018-01-02'), '%C');\n+SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%d'), DATE_FORMAT(toDate32('2018-01-02'), '%d');\n+SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%D'), DATE_FORMAT(toDate32('2018-01-02'), '%D');\n+SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%e'), DATE_FORMAT(toDate32('2018-01-02'), '%e');\n+SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%F'), DATE_FORMAT(toDate32('2018-01-02'), '%F');\n+SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%h'), DATE_FORMAT(toDate32('2018-01-02'), '%h');\n+SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%H'), DATE_FORMAT(toDate32('2018-01-02'), '%H');\n+SELECT DATE_FORMAT(toDateTime('2018-01-02 02:33:44'), '%H');\n+SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%i'), DATE_FORMAT(toDate32('2018-01-02'), '%i');\n+SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%I'), DATE_FORMAT(toDate32('2018-01-02'), '%I');\n+SELECT DATE_FORMAT(toDateTime('2018-01-02 11:33:44'), '%I');\n+SELECT DATE_FORMAT(toDateTime('2018-01-02 00:33:44'), '%I');\n+SELECT DATE_FORMAT(toDateTime('2018-01-01 00:33:44'), '%j'), DATE_FORMAT(toDate32('2018-01-01'), '%j');\n+SELECT DATE_FORMAT(toDateTime('2000-12-31 00:33:44'), '%j'), DATE_FORMAT(toDate32('2000-12-31'), '%j');\n+SELECT DATE_FORMAT(toDateTime('2000-12-31 00:33:44'), '%k'), DATE_FORMAT(toDate32('2000-12-31'), '%k');\n+SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%m'), DATE_FORMAT(toDate32('2018-01-02'), '%m');\n+SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%M'), DATE_FORMAT(toDate32('2018-01-02'), '%M');\n+SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%n'), DATE_FORMAT(toDate32('2018-01-02'), '%n');\n+SELECT DATE_FORMAT(toDateTime('2018-01-02 00:33:44'), '%p'), DATE_FORMAT(toDate32('2018-01-02'), '%p');\n+SELECT DATE_FORMAT(toDateTime('2018-01-02 11:33:44'), '%p');\n+SELECT DATE_FORMAT(toDateTime('2018-01-02 12:33:44'), '%p');\n+SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%r'), DATE_FORMAT(toDate32('2018-01-02'), '%r');\n+SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%R'), DATE_FORMAT(toDate32('2018-01-02'), '%R');\n+SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%S'), DATE_FORMAT(toDate32('2018-01-02'), '%S');\n+SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%t'), DATE_FORMAT(toDate32('2018-01-02'), '%t');\n+SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%T'), DATE_FORMAT(toDate32('2018-01-02'), '%T');\n+SELECT DATE_FORMAT(toDateTime('2018-01-02 22:33:44'), '%W'), DATE_FORMAT(toDate32('2018-01-02'), '%W');\n",
  "problem_statement": "Add function `DATE_FORMAT` as a compatibility alias.\n**Use case**\r\n\r\nCompatibility with MySQL.\r\n\r\n**Describe the solution you'd like**\r\n\r\n1. Make it a synonym of `formatDateTime`.\r\n2. Add the support for `%i` and other missing format substitutions.\r\n3. Fix the error code from ILLEGAL_COLUMN to a more appropriate one.\r\n\r\n```\r\nmilovidov-desktop :) SELECT DATE_FORMAT(now(), '%Y-%m-%d %H:%i:%s')\r\n\r\nSELECT DATE_FORMAT(now(), '%Y-%m-%d %H:%i:%s')\r\n\r\nQuery id: c24c519d-9f35-48a3-9ada-f9af8b4911a1\r\n\r\n\r\n0 rows in set. Elapsed: 0.160 sec. \r\n\r\nReceived exception:\r\nCode: 46. DB::Exception: Unknown function DATE_FORMAT: While processing DATE_FORMAT(now(), '%Y-%m-%d %H:%i:%s'). (UNKNOWN_FUNCTION)\r\n\r\nmilovidov-desktop :) SELECT formatDateTime(now(), '%Y-%m-%d %H:%i:%s')\r\n\r\nSELECT formatDateTime(now(), '%Y-%m-%d %H:%i:%s')\r\n\r\nQuery id: ab5ea92d-6026-4cc5-bdf9-6b8a8e8f77b4\r\n\r\n\r\n0 rows in set. Elapsed: 0.002 sec. \r\n\r\nReceived exception:\r\nCode: 44. DB::Exception: Wrong syntax '%Y-%m-%d %H:%i:%s', unexpected symbol 'i' for function formatDateTime: While processing formatDateTime(now(), '%Y-%m-%d %H:%i:%s'). (ILLEGAL_COLUMN)\r\n\r\nmilovidov-desktop :)\r\n```\n",
  "hints_text": "Hey there! I am new to open source and I would like to get my feet wet. I think I would be able to give this a good shot.\r\n\r\nAfter having a look, I believe all of the changes would take place in `src/Functions/formatDateTime.cpp`\nThank you! Let's try.\r\n\r\n> After having a look, I believe all of the changes would take place in src/Functions/formatDateTime.cpp\r\n\r\nYes.\nTook me a little while to get my dev environment setup as I needed more space! :)\r\n\r\n**Completed**\r\n- Alias `formatDateTime` \u2192 `DATE_FORMAT`\r\n- Add support for `%i` and `%r`\r\n- Replace error code `ILLEGAL_COLUMN` \u2192 `NOT_IMPLEMENTED`\r\n\r\n**TODO**\r\n- Missing MySQL format substitutions: `a b c h i k l M r s U v W X x`\r\n\r\nAm I okay to add all of the above missing substitutions as part of this issue?\r\n\r\nFull substitution list found at [DATE_FORMAT](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_date-format)\nYes, it will be amazing!",
  "created_at": "2023-02-11T18:07:43Z"
}