diff --git a/tests/queries/0_stateless/02560_agg_state_deserialization_hash_table_crash.sql b/tests/queries/0_stateless/02560_agg_state_deserialization_hash_table_crash.sql
index 5b6662faeb3c..d85cacc70be2 100644
--- a/tests/queries/0_stateless/02560_agg_state_deserialization_hash_table_crash.sql
+++ b/tests/queries/0_stateless/02560_agg_state_deserialization_hash_table_crash.sql
@@ -1,4 +1,4 @@
 DROP TABLE IF EXISTS tab;
 create table tab (d Int64, s AggregateFunction(groupUniqArrayArray, Array(UInt64)), c SimpleAggregateFunction(groupUniqArrayArray, Array(UInt64))) engine = SummingMergeTree() order by d;
-INSERT INTO tab VALUES (1, 'このコー'); -- { clientError CANNOT_ALLOCATE_MEMORY }
+INSERT INTO tab VALUES (1, 'このコー'); -- { clientError 128 }
 DROP TABLE tab;
diff --git a/tests/queries/0_stateless/02680_default_star.reference b/tests/queries/0_stateless/02680_default_star.reference
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/queries/0_stateless/02680_default_star.sql b/tests/queries/0_stateless/02680_default_star.sql
new file mode 100644
index 000000000000..d560bd01e417
--- /dev/null
+++ b/tests/queries/0_stateless/02680_default_star.sql
@@ -0,0 +1,6 @@
+-- These queries yield syntax error, not logical error.
+
+CREATE TEMPORARY TABLE test (ad DEFAULT *); -- { clientError SYNTAX_ERROR }
+CREATE TEMPORARY TABLE test (ad INT DEFAULT *); -- { clientError SYNTAX_ERROR }
+CREATE TEMPORARY TABLE test (ad DEFAULT * NOT NULL); -- { clientError SYNTAX_ERROR }
+CREATE TEMPORARY TABLE test (ad DEFAULT t.* NOT NULL); -- { clientError SYNTAX_ERROR }
diff --git a/tests/queries/0_stateless/02681_group_array_too_large_size.reference b/tests/queries/0_stateless/02681_group_array_too_large_size.reference
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/queries/0_stateless/02681_group_array_too_large_size.sql b/tests/queries/0_stateless/02681_group_array_too_large_size.sql
new file mode 100644
index 000000000000..7b09f9b468e8
--- /dev/null
+++ b/tests/queries/0_stateless/02681_group_array_too_large_size.sql
@@ -0,0 +1,8 @@
+-- This query throw high-level exception instead of low-level "too large size passed to allocator":
+
+SELECT * FROM format(CSV, 'entitypArray AggregateFunction(groupArray, String)',
+'295TMiews.viewN�����""""""TabSepar��������������������������������������������������������������������������������������������ated
+d St""
+
+
+r'); -- { serverError TOO_LARGE_ARRAY_SIZE }
diff --git a/tests/queries/0_stateless/02682_quantiles_too_large_size.reference b/tests/queries/0_stateless/02682_quantiles_too_large_size.reference
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/queries/0_stateless/02682_quantiles_too_large_size.sql b/tests/queries/0_stateless/02682_quantiles_too_large_size.sql
new file mode 100644
index 000000000000..fff98f667c79
Binary files /dev/null and b/tests/queries/0_stateless/02682_quantiles_too_large_size.sql differ
diff --git a/tests/queries/0_stateless/02683_native_too_large_size.reference b/tests/queries/0_stateless/02683_native_too_large_size.reference
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/queries/0_stateless/02683_native_too_large_size.sql b/tests/queries/0_stateless/02683_native_too_large_size.sql
new file mode 100644
index 000000000000..e8752477f2d0
Binary files /dev/null and b/tests/queries/0_stateless/02683_native_too_large_size.sql differ
diff --git a/tests/queries/0_stateless/02684_bson.reference b/tests/queries/0_stateless/02684_bson.reference
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/queries/0_stateless/02684_bson.sql b/tests/queries/0_stateless/02684_bson.sql
new file mode 100644
index 000000000000..577bd4ffd27d
Binary files /dev/null and b/tests/queries/0_stateless/02684_bson.sql differ
diff --git a/tests/queries/0_stateless/02685_bson2.reference b/tests/queries/0_stateless/02685_bson2.reference
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/queries/0_stateless/02685_bson2.sql b/tests/queries/0_stateless/02685_bson2.sql
new file mode 100644
index 000000000000..fc65d2952df8
Binary files /dev/null and b/tests/queries/0_stateless/02685_bson2.sql differ
diff --git a/tests/queries/0_stateless/02686_bson3.reference b/tests/queries/0_stateless/02686_bson3.reference
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/queries/0_stateless/02686_bson3.sql b/tests/queries/0_stateless/02686_bson3.sql
new file mode 100644
index 000000000000..05a73e814dd1
Binary files /dev/null and b/tests/queries/0_stateless/02686_bson3.sql differ
diff --git a/tests/queries/0_stateless/02687_native_fuzz.reference b/tests/queries/0_stateless/02687_native_fuzz.reference
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/queries/0_stateless/02687_native_fuzz.sql b/tests/queries/0_stateless/02687_native_fuzz.sql
new file mode 100644
index 000000000000..0cd11390918a
Binary files /dev/null and b/tests/queries/0_stateless/02687_native_fuzz.sql differ
diff --git a/tests/queries/0_stateless/02688_aggregate_states.reference b/tests/queries/0_stateless/02688_aggregate_states.reference
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/queries/0_stateless/02688_aggregate_states.sql b/tests/queries/0_stateless/02688_aggregate_states.sql
new file mode 100644
index 000000000000..575f4b1bb3a3
--- /dev/null
+++ b/tests/queries/0_stateless/02688_aggregate_states.sql
@@ -0,0 +1,7 @@
+SELECT '\x01\x00'::AggregateFunction(groupBitmap, UInt32); -- { serverError INCORRECT_DATA }
+SELECT '\x01\x01\x01'::AggregateFunction(groupBitmap, UInt64); -- { serverError STD_EXCEPTION }
+SELECT '\x02\x00\x0d'::AggregateFunction(topK, UInt256); -- { serverError CANNOT_READ_ALL_DATA }
+SELECT unhex('bebebebebebebebebebebebebebebebebebebebebebebebebebebebebebebe0c0c3131313131313131313131313173290aee00b300')::AggregateFunction(minDistinct, Int8); -- { serverError TOO_LARGE_ARRAY_SIZE }
+SELECT unhex('01000b0b0b0d0d0d0d7175616e74696c6554696d696e672c20496e743332000300')::AggregateFunction(quantileTiming, Int32); -- { serverError INCORRECT_DATA }
+SELECT unhex('010001')::AggregateFunction(quantileTiming, Int32); -- { serverError INCORRECT_DATA }
+SELECT unhex('0a00797979797979797979790a0a6e')::AggregateFunction(minForEach, Ring); -- { serverError TOO_LARGE_ARRAY_SIZE }
diff --git a/tests/queries/0_stateless/02689_meaningless_data_types.reference b/tests/queries/0_stateless/02689_meaningless_data_types.reference
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/queries/0_stateless/02689_meaningless_data_types.sql b/tests/queries/0_stateless/02689_meaningless_data_types.sql
new file mode 100644
index 000000000000..8ae702d66df2
--- /dev/null
+++ b/tests/queries/0_stateless/02689_meaningless_data_types.sql
@@ -0,0 +1,3 @@
+SELECT 0::Bool(Upyachka); -- { serverError DATA_TYPE_CANNOT_HAVE_ARGUMENTS }
+SELECT [(1, 2), (3, 4)]::Ring(Upyachka); -- { serverError DATA_TYPE_CANNOT_HAVE_ARGUMENTS }
+SELECT '1.1.1.1'::IPv4('Hello, world!'); -- { serverError DATA_TYPE_CANNOT_HAVE_ARGUMENTS }
