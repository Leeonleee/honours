{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 4161,
  "instance_id": "ClickHouse__ClickHouse-4161",
  "issue_numbers": [
    "2150"
  ],
  "base_commit": "7100a74e41b1b6ef927af22c6cf9b169b04ee0ef",
  "patch": "diff --git a/dbms/src/Storages/StorageFile.cpp b/dbms/src/Storages/StorageFile.cpp\nindex 95f38862d9bd..8fac03c72a3f 100644\n--- a/dbms/src/Storages/StorageFile.cpp\n+++ b/dbms/src/Storages/StorageFile.cpp\n@@ -121,7 +121,7 @@ class StorageFileBlockInputStream : public IBlockInputStream\n     {\n         if (storage.use_table_fd)\n         {\n-            storage.rwlock.lock();\n+            unique_lock = std::unique_lock(storage.rwlock);\n \n             /// We could use common ReadBuffer and WriteBuffer in storage to leverage cache\n             ///  and add ability to seek unseekable files, but cache sync isn't supported.\n@@ -141,7 +141,7 @@ class StorageFileBlockInputStream : public IBlockInputStream\n         }\n         else\n         {\n-            storage.rwlock.lock_shared();\n+            shared_lock = std::shared_lock(storage.rwlock);\n \n             read_buf = std::make_unique<ReadBufferFromFile>(storage.path);\n         }\n@@ -149,14 +149,6 @@ class StorageFileBlockInputStream : public IBlockInputStream\n         reader = FormatFactory::instance().getInput(storage.format_name, *read_buf, storage.getSampleBlock(), context, max_block_size);\n     }\n \n-    ~StorageFileBlockInputStream() override\n-    {\n-        if (storage.use_table_fd)\n-            storage.rwlock.unlock();\n-        else\n-            storage.rwlock.unlock_shared();\n-    }\n-\n     String getName() const override\n     {\n         return storage.getName();\n@@ -184,6 +176,9 @@ class StorageFileBlockInputStream : public IBlockInputStream\n     Block sample_block;\n     std::unique_ptr<ReadBufferFromFileDescriptor> read_buf;\n     BlockInputStreamPtr reader;\n+\n+    std::shared_lock<std::shared_mutex> shared_lock;\n+    std::unique_lock<std::shared_mutex> unique_lock;\n };\n \n \n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/00832_storage_file_lock.reference b/dbms/tests/queries/0_stateless/00832_storage_file_lock.reference\nnew file mode 100644\nindex 000000000000..d00491fd7e5b\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/00832_storage_file_lock.reference\n@@ -0,0 +1,1 @@\n+1\ndiff --git a/dbms/tests/queries/0_stateless/00832_storage_file_lock.sql b/dbms/tests/queries/0_stateless/00832_storage_file_lock.sql\nnew file mode 100644\nindex 000000000000..a3aeee110b00\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/00832_storage_file_lock.sql\n@@ -0,0 +1,6 @@\n+DROP TABLE IF EXISTS test.file;\n+CREATE TABLE test.file (number UInt64) ENGINE = File(TSV);\n+SELECT * FROM test.file; -- { serverError 107 }\n+INSERT INTO test.file VALUES (1);\n+SELECT * FROM test.file;\n+DROP TABLE test.file;\n",
  "problem_statement": "\u0417\u0430\u0432\u0438\u0441\u0430\u0435\u0442 \u043f\u0435\u0440\u0432\u0430\u044f \u0432\u0441\u0442\u0430\u0432\u043a\u0430 \u0432 ENGINE File (\u043f\u043e\u0441\u043b\u0435 Select)\n1) `CREATE TABLE test_file_engine (number UInt64) ENGINE = File(TSV)`\r\n2) `SELECT * FROM test_file_engine`\r\nCode: 107, e.displayText() = DB::Exception: Cannot open file .../test_file_engine/data.TSV, errno: 2, strerror: No such file or directory\r\n> \u042d\u0442\u043e \u043d\u0435 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u0430, \u0442\u0443\u0442 \u0432\u0441\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0432\u0435\u0440\u043d\u043e!\r\n3) `INSERT INTO positions.test_file_engine VALUES (1)`\r\n>\u0410 \u0432\u043e\u0442 \u044d\u0442\u043e \u0443\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u0442 \u043a \u043e\u0448\u0438\u0431\u043a\u0435\r\n\u0414\u0430\u043d\u043d\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u043e\u0447\u0435\u043c\u0443-\u0442\u043e \u0437\u0430\u0432\u0438\u0441\u0430\u0435\u0442 \u0438 \u0432\u0438\u0441\u0438\u0442 \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u0445. \u041f\u043e\u043c\u043e\u0433\u0430\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0443\u0441\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 CH.\r\n\r\n\u0415\u0441\u043b\u0438 \u0448\u0430\u0433\u0438 2 \u0438 3 \u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c \u043c\u0435\u0441\u0442\u0430\u043c\u0438, \u043e\u0448\u0438\u0431\u043a\u0430 \u043d\u0435 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0441\u044f.\r\n\r\nversion(): 1.1.54370\n",
  "hints_text": "\u0414\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e, \u0442\u0430\u043c \u0434\u0443\u0440\u0430\u0446\u043a\u0438\u0439 \u043a\u043e\u0434.",
  "created_at": "2019-01-27T00:42:53Z"
}