diff --git a/tests/integration/test_asynchronous_metric_log_table/test.py b/tests/integration/test_asynchronous_metric_log_table/test.py
index 96de7daf9e1e..622620e232aa 100644
--- a/tests/integration/test_asynchronous_metric_log_table/test.py
+++ b/tests/integration/test_asynchronous_metric_log_table/test.py
@@ -21,7 +21,7 @@ def started_cluster():
         cluster.shutdown()
 
 
-# Tests that the event_time_microseconds field in system.asynchronous_metric_log table gets populated.
+# Tests that the system.asynchronous_metric_log table gets populated.
 # asynchronous metrics are updated once every 60s by default. To make the test run faster, the setting
 # asynchronous_metric_update_period_s is being set to 2s so that the metrics are populated faster and
 # are available for querying during the test.
@@ -42,21 +42,10 @@ def test_event_time_microseconds_field(started_cluster):
         node1.query(query_create)
         node1.query("""INSERT INTO replica.test VALUES (1, now())""")
         node1.query("SYSTEM FLUSH LOGS;")
-        # query assumes that the event_time field is accurate
-        equals_query = """WITH (
-                            (
-                                SELECT event_time_microseconds
-                                FROM system.asynchronous_metric_log
-                                ORDER BY event_time DESC
-                                LIMIT 1
-                            ) AS time_with_microseconds,
-                            (
-                                SELECT event_time
-                                FROM system.asynchronous_metric_log
-                                ORDER BY event_time DESC
-                                LIMIT 1
-                            ) AS time)
-                        SELECT if(dateDiff('second', toDateTime(time_with_microseconds), toDateTime(time)) = 0, 'ok', 'fail')"""
-        assert "ok
" in node1.query(equals_query)
+
+        test_query = (
+            "SELECT count() > 0 ? 'ok' : 'fail' FROM system.asynchronous_metric_log"
+        )
+        assert "ok
" in node1.query(test_query)
     finally:
         cluster.shutdown()
