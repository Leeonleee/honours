{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 71695,
  "instance_id": "ClickHouse__ClickHouse-71695",
  "issue_numbers": [
    "69829"
  ],
  "base_commit": "ed1a261364bbb9a6d8a5a9577666dad525239390",
  "patch": "diff --git a/src/Storages/MergeTree/KeyCondition.cpp b/src/Storages/MergeTree/KeyCondition.cpp\nindex 17723d341fb1..a2783ff4efe3 100644\n--- a/src/Storages/MergeTree/KeyCondition.cpp\n+++ b/src/Storages/MergeTree/KeyCondition.cpp\n@@ -1158,6 +1158,7 @@ bool KeyCondition::tryPrepareSetIndex(\n     const RPNBuilderFunctionTreeNode & func,\n     RPNElement & out,\n     size_t & out_key_column_num,\n+    bool & allow_constant_transformation,\n     bool & is_constant_transformed)\n {\n     const auto & left_arg = func.getArgumentAt(0);\n@@ -1184,7 +1185,9 @@ bool KeyCondition::tryPrepareSetIndex(\n             set_transforming_chains.push_back(set_transforming_chain);\n         }\n         // For partition index, checking if set can be transformed to prune any partitions\n-        else if (single_point && canSetValuesBeWrappedByFunctions(node, index_mapping.key_index, data_type, set_transforming_chain))\n+        else if (\n+            single_point && allow_constant_transformation\n+            && canSetValuesBeWrappedByFunctions(node, index_mapping.key_index, data_type, set_transforming_chain))\n         {\n             indexes_mapping.push_back(index_mapping);\n             data_types.push_back(data_type);\n@@ -1954,7 +1957,7 @@ bool KeyCondition::extractAtomFromTree(const RPNBuilderTreeNode & node, RPNEleme\n \n             if (functionIsInOrGlobalInOperator(func_name))\n             {\n-                if (tryPrepareSetIndex(func, out, key_column_num, is_constant_transformed))\n+                if (tryPrepareSetIndex(func, out, key_column_num, allow_constant_transformation, is_constant_transformed))\n                 {\n                     key_arg_pos = 0;\n                     is_set_const = true;\ndiff --git a/src/Storages/MergeTree/KeyCondition.h b/src/Storages/MergeTree/KeyCondition.h\nindex 8c946bd3bbd7..20b40271dc2d 100644\n--- a/src/Storages/MergeTree/KeyCondition.h\n+++ b/src/Storages/MergeTree/KeyCondition.h\n@@ -312,6 +312,7 @@ class KeyCondition\n         const RPNBuilderFunctionTreeNode & func,\n         RPNElement & out,\n         size_t & out_key_column_num,\n+        bool & allow_constant_transformation,\n         bool & is_constant_transformed);\n \n     /// Checks that the index can not be used.\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03269_partition_key_not_in_set.reference b/tests/queries/0_stateless/03269_partition_key_not_in_set.reference\nnew file mode 100644\nindex 000000000000..1e34df0c77ee\n--- /dev/null\n+++ b/tests/queries/0_stateless/03269_partition_key_not_in_set.reference\n@@ -0,0 +1,13 @@\n+-- Monotonic function in partition key\n+48\n+48\n+-- Non-monotonic function in partition key\n+48\n+48\n+-- Multiple partition columns\n+50\n+50\n+96\n+96\n+98\n+98\ndiff --git a/tests/queries/0_stateless/03269_partition_key_not_in_set.sql b/tests/queries/0_stateless/03269_partition_key_not_in_set.sql\nnew file mode 100644\nindex 000000000000..562521fb7ee9\n--- /dev/null\n+++ b/tests/queries/0_stateless/03269_partition_key_not_in_set.sql\n@@ -0,0 +1,81 @@\n+-- Related to https://github.com/ClickHouse/ClickHouse/issues/69829\n+--\n+-- The main goal of the test is to assert that constant transformation\n+-- for set constant while partition pruning won't be performed\n+-- if it's not allowed (NOT IN operator case)\n+\n+DROP TABLE IF EXISTS 03269_filters;\n+CREATE TABLE 03269_filters (\n+    id Int32,\n+    dt Date\n+)\n+engine = MergeTree\n+order by id;\n+\n+INSERT INTO 03269_filters\n+SELECT 6, '2020-01-01'\n+UNION ALL\n+SELECT 38, '2021-01-01';\n+\n+SELECT '-- Monotonic function in partition key';\n+\n+DROP TABLE IF EXISTS 03269_single_monotonic;\n+CREATE TABLE 03269_single_monotonic(\n+    id Int32\n+)\n+ENGINE = MergeTree\n+PARTITION BY intDiv(id, 10)\n+ORDER BY id;\n+\n+INSERT INTO 03269_single_monotonic SELECT number FROM numbers(50);\n+\n+SELECT count() FROM 03269_single_monotonic WHERE id NOT IN (6, 38);\n+SELECT count() FROM 03269_single_monotonic WHERE id NOT IN (\n+    SELECT id FROM 03269_filters\n+);\n+\n+DROP TABLE 03269_single_monotonic;\n+\n+SELECT '-- Non-monotonic function in partition key';\n+\n+DROP TABLE IF EXISTS 03269_single_non_monotonic;\n+CREATE TABLE 03269_single_non_monotonic (\n+    id Int32\n+)\n+ENGINE = MergeTree\n+PARTITION BY id % 10\n+ORDER BY id;\n+\n+INSERT INTO 03269_single_non_monotonic SELECT number FROM numbers(50);\n+\n+SELECT count() FROM 03269_single_non_monotonic WHERE id NOT IN (6, 38);\n+SELECT count() FROM 03269_single_non_monotonic WHERE id NOT IN (SELECT id FROM 03269_filters);\n+\n+DROP TABLE 03269_single_non_monotonic;\n+\n+SELECT '-- Multiple partition columns';\n+\n+DROP TABLE IF EXISTS 03269_multiple_part_cols;\n+CREATE TABLE 03269_multiple_part_cols (\n+    id Int32,\n+    dt Date,\n+)\n+ENGINE = MergeTree\n+PARTITION BY (dt, intDiv(id, 10))\n+ORDER BY id;\n+\n+INSERT INTO 03269_multiple_part_cols\n+SELECT number, '2020-01-01' FROM numbers(50)\n+UNION ALL\n+SELECT number, '2021-01-01' FROM numbers(50);\n+\n+SELECT count() FROM 03269_multiple_part_cols WHERE dt NOT IN ('2020-01-01');\n+SELECT count() FROM 03269_multiple_part_cols WHERE dt NOT IN (SELECT dt FROM 03269_filters WHERE dt < '2021-01-01');\n+\n+SELECT count() FROM 03269_multiple_part_cols WHERE id NOT IN (6, 38);\n+SELECT count() FROM 03269_multiple_part_cols WHERE id NOT IN (SELECT id FROM 03269_filters);\n+\n+SELECT count() FROM 03269_multiple_part_cols WHERE (id, dt) NOT IN ((6, '2020-01-01'), (38, '2021-01-01'));\n+SELECT count() FROM 03269_multiple_part_cols WHERE (id, dt) NOT IN (SELECT id, dt FROM 03269_filters);\n+\n+DROP TABLE 03269_multiple_part_cols;\n",
  "problem_statement": "Wrong result of `NOT IN` with hash partitioning(?)\n```sql\r\ncreate table t1(id UInt64) Engine=MergeTree \r\nPARTITION BY id % 100 ORDER BY (id)\r\nas select number from numbers(1e4);\r\n\r\ncreate table t2(id UInt64) Engine=MergeTree \r\nPARTITION BY id % 100 ORDER BY tuple()\r\nas select number  from numbers(1e3);\r\n\r\nselect count() from t1 where id not in (select id from t2);\r\n-- \r\n0  -- expected 9000\r\n\r\nselect count() from t1 where identity(id) not in (select id from t2)\r\n--\r\n9000\r\n```\r\n\r\nhttps://fiddle.clickhouse.com/d7fc300e-dc62-4133-9cbd-884e8878ef91\r\n\r\nstarted in 24.7\r\n\r\nprobably \r\n* https://github.com/ClickHouse/ClickHouse/pull/66261\r\nor\r\n* https://github.com/ClickHouse/ClickHouse/pull/65676\r\n\r\n\r\n-----\r\n\r\nsmaller:\r\n\r\nhttps://fiddle.clickhouse.com/613fac1c-5676-4a9e-8a88-bd2a0a02c3ec\r\n\r\n```sql\r\ncreate table t1(id UInt64) Engine=MergeTree  PARTITION BY id % 2 ORDER BY (id)\r\nas select number from numbers(10);\r\n\r\nselect count() from t1 where id not in (select 1);\r\n--\r\n5\r\n\r\nselect count() from t1 where identity(id) not in (select 1)\r\n--\r\n9\r\n```\r\n\n",
  "hints_text": "@KochetovNicolai \nOne more example https://fiddle.clickhouse.com/566b73b5-1542-43f3-b4a6-6522467d00b2\r\n\r\nhttps://t.me/clickhouse_ru/401614\nHave same problem\nRegression after https://github.com/ClickHouse/ClickHouse/pull/65335\r\nLet's revert/fix it\r\n@korowa @alexkats ",
  "created_at": "2024-11-10T10:43:02Z",
  "modified_files": [
    "src/Storages/MergeTree/KeyCondition.cpp",
    "src/Storages/MergeTree/KeyCondition.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03269_partition_key_not_in_set.reference",
    "b/tests/queries/0_stateless/03269_partition_key_not_in_set.sql"
  ]
}