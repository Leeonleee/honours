{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 36633,
  "instance_id": "ClickHouse__ClickHouse-36633",
  "issue_numbers": [
    "36618"
  ],
  "base_commit": "2012b6717dbf6ae77274cc6e0b860d480b96a492",
  "patch": "diff --git a/src/Parsers/ParserCreateQuery.h b/src/Parsers/ParserCreateQuery.h\nindex a6d3476e3f74..cdec7a70a5a5 100644\n--- a/src/Parsers/ParserCreateQuery.h\n+++ b/src/Parsers/ParserCreateQuery.h\n@@ -1,16 +1,15 @@\n #pragma once\n \n-#include <Parsers/IParserBase.h>\n-#include <Parsers/ExpressionElementParsers.h>\n-#include <Parsers/ExpressionListParsers.h>\n-#include <Parsers/ASTNameTypePair.h>\n #include <Parsers/ASTColumnDeclaration.h>\n #include <Parsers/ASTIdentifier_fwd.h>\n+#include <Parsers/ASTLiteral.h>\n+#include <Parsers/ASTNameTypePair.h>\n #include <Parsers/CommonParsers.h>\n+#include <Parsers/ExpressionElementParsers.h>\n+#include <Parsers/ExpressionListParsers.h>\n+#include <Parsers/IParserBase.h>\n #include <Parsers/ParserDataType.h>\n #include <Poco/String.h>\n-#include <Parsers/ASTLiteral.h>\n-\n \n namespace DB\n {\n@@ -134,6 +133,7 @@ bool IParserColumnDeclaration<NameParser>::parseImpl(Pos & pos, ASTPtr & node, E\n     ParserKeyword s_type{\"TYPE\"};\n     ParserTernaryOperatorExpression expr_parser;\n     ParserStringLiteral string_literal_parser;\n+    ParserLiteral literal_parser;\n     ParserCodec codec_parser;\n     ParserExpression expression_parser;\n \n@@ -197,8 +197,11 @@ bool IParserColumnDeclaration<NameParser>::parseImpl(Pos & pos, ASTPtr & node, E\n     else if (s_ephemeral.ignore(pos, expected))\n     {\n         default_specifier = \"EPHEMERAL\";\n-        if (!expr_parser.parse(pos, default_expression, expected) && type)\n+        if (!literal_parser.parse(pos, default_expression, expected) && type)\n             default_expression = std::make_shared<ASTLiteral>(Field());\n+\n+        if (!default_expression && !type)\n+            return false;\n     }\n \n     if (require_type && !type && !default_expression)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02287_ephemeral_format_crash.reference b/tests/queries/0_stateless/02287_ephemeral_format_crash.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/02287_ephemeral_format_crash.sql b/tests/queries/0_stateless/02287_ephemeral_format_crash.sql\nnew file mode 100644\nindex 000000000000..8fd9a4b43324\n--- /dev/null\n+++ b/tests/queries/0_stateless/02287_ephemeral_format_crash.sql\n@@ -0,0 +1,10 @@\n+DROP TABLE IF EXISTS test;\n+\n+CREATE TABLE test(a UInt8, b String EPHEMERAL) Engine=Memory();\n+\n+DROP TABLE test;\n+\n+CREATE TABLE test(a UInt8, b EPHEMERAL String) Engine=Memory(); -- { clientError SYNTAX_ERROR }\n+CREATE TABLE test(a UInt8, b EPHEMERAL 'a' String) Engine=Memory(); -- { clientError SYNTAX_ERROR }\n+CREATE TABLE test(a UInt8, b String EPHEMERAL test) Engine=Memory(); -- { clientError SYNTAX_ERROR }\n+CREATE TABLE test(a UInt8, b String EPHEMERAL 1+2) Engine=Memory(); -- { clientError SYNTAX_ERROR }\n",
  "problem_statement": "Incorrect syntax of EPHEMERAL column leads to clickhouse-client crash\n```\r\n-- correct syntax:\r\nCREATE TABLE test_aborted1 (a UInt8, b String EPHEMERAL) Engine=Memory();\r\n-- ok\r\n\r\n-- incorrect syntax:\r\nCREATE TABLE test_aborted1 (a UInt8, b EPHEMERAL String) Engine=Memory();\r\n-- in clickhouse-client: Aborted\r\n\r\n(lldb) bt\r\n* thread #1, name = 'clickhouse-clie', stop reason = signal SIGSEGV: invalid address (fault address: 0x80)\r\n  * frame #0: 0x0000000014961c59 clickhouse-client`DB::ASTColumnDeclaration::formatImpl(DB::IAST::FormatSettings const&, DB::IAST::FormatState&, DB::IAST::FormatStateStacked) const [inlined] DB::Field::isNull(this=0x0000000000000050) const at Field.h:421:40\r\n    frame #1: 0x0000000014961c59 clickhouse-client`DB::ASTColumnDeclaration::formatImpl(this=0x00007f67c252aa58, settings=0x00007fff8b1187f8, state=0x00007fff8b1187e0, frame=FormatStateStacked @ 0x00000000072c3190) const at ASTColumnDeclaration.cpp:76:94\r\n    frame #2: 0x0000000014974efb clickhouse-client`DB::ASTExpressionList::formatImplMultiline(this=0x00007fff8b1185b8, settings=0x00007fff8b1187f8, state=0x00007fff8b1187e0, frame=FormatStateStacked @ 0x000000000b8baa80) const at ASTExpressionList.cpp:57:16\r\n    frame #3: 0x000000001496b788 clickhouse-client`DB::ASTColumns::formatImpl(this=0x00007f67c401efa8, s=0x00007fff8b1187f8, state=0x00007fff8b1187e0, frame=FormatStateStacked @ 0x000000000eb7f520) const at ASTCreateQuery.cpp:185:18\r\n    frame #4: 0x000000001496d6b2 clickhouse-client`DB::ASTCreateQuery::formatQueryImpl(this=0x00007f67c24fc598, settings=0x00007fff8b1187f8, state=0x00007fff8b1187e0, frame=FormatStateStacked @ 0x00000000090c7600) const at ASTCreateQuery.cpp:380:23\r\n    frame #5: 0x0000000014989025 clickhouse-client`DB::ASTQueryWithOutput::formatImpl(this=0x00007f67c24fc598, s=0x00007fff8b1187f8, state=0x00007fff8b1187e0, frame=FormatStateStacked @ 0x00000000096c7400) const at ASTQueryWithOutput.cpp:27:5\r\n    frame #6: 0x0000000014a11076 clickhouse-client`DB::formatAST(DB::IAST const&, DB::WriteBuffer&, bool, bool) [inlined] DB::IAST::format(this=<unavailable>, settings=0x00007fff8b1187f8) const at IAST.h:233:9\r\n    frame #7: 0x0000000014a11052 clickhouse-client`DB::formatAST(ast=0x00007f67c24fc598, buf=0x00007fff8b118870, hilite=true, one_line=<unavailable>) at formatAST.cpp:12:9\r\n    frame #8: 0x0000000014503f66 clickhouse-client`DB::ClientBase::parseQuery(this=0x00007fff8b11a510, pos=<unavailable>, end=<unavailable>, allow_multi_statements=<unavailable>) const at ClientBase.cpp:316:9\r\n    frame #9: 0x00000000145069f8 clickhouse-client`DB::ClientBase::processTextAsSingleQuery(this=0x00007fff8b11a510, full_query=\"CREATE TABLE test_aborted (\\n    a UInt64,\\n    b EPHEMERAL String\\n) Engine=MergeTree \\nORDER BY tuple();\") at ClientBase.cpp:632:25\r\n    frame #10: 0x000000001450f2df clickhouse-client`DB::ClientBase::processQueryText(this=0x00007fff8b11a510, text=\"CREATE TABLE test_aborted (\\n    a UInt64,\\n    b EPHEMERAL String\\n) Engine=MergeTree \\nORDER BY tuple();\") at ClientBase.cpp:1791:9\r\n    frame #11: 0x000000001451085a clickhouse-client`DB::ClientBase::runInteractive(this=<unavailable>) at ClientBase.cpp:1939:18\r\n    frame #12: 0x000000000afbbcd5 clickhouse-client`DB::Client::main(this=0x00007fff8b11a510, (null)=<unavailable>) at Client.cpp:251:9\r\n    frame #13: 0x0000000017735f66 clickhouse-client`Poco::Util::Application::run(this=0x00007fff8b11a510) at Application.cpp:334:8\r\n    frame #14: 0x000000000afc4f01 clickhouse-client`mainEntryClickHouseClient(argc=1, argv=0x00007f67c40ef038) at Client.cpp:1057:23\r\n    frame #15: 0x000000000af06e31 clickhouse-client`main(argc_=<unavailable>, argv_=<unavailable>) at main.cpp:409:12\r\n    frame #16: 0x00007f67c4f700b3 libc.so.6`__libc_start_main + 243\r\n    frame #17: 0x000000000af066ae clickhouse-client`_start + 46\r\n```\n",
  "hints_text": "",
  "created_at": "2022-04-25T14:59:33Z",
  "modified_files": [
    "src/Parsers/ParserCreateQuery.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02287_ephemeral_format_crash.sql"
  ]
}