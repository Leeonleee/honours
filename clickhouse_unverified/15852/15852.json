{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 15852,
  "instance_id": "ClickHouse__ClickHouse-15852",
  "issue_numbers": [
    "15800"
  ],
  "base_commit": "38c7132c0f580547a72e3cc1fa18a091abf46221",
  "patch": "diff --git a/src/Storages/MergeTree/MergeTreeReverseSelectProcessor.cpp b/src/Storages/MergeTree/MergeTreeReverseSelectProcessor.cpp\nindex 1e6352824ef9..ee0a77ba3cf5 100644\n--- a/src/Storages/MergeTree/MergeTreeReverseSelectProcessor.cpp\n+++ b/src/Storages/MergeTree/MergeTreeReverseSelectProcessor.cpp\n@@ -12,26 +12,6 @@ namespace ErrorCodes\n     extern const int MEMORY_LIMIT_EXCEEDED;\n }\n \n-static Block replaceTypes(Block && header, const MergeTreeData::DataPartPtr & data_part)\n-{\n-    /// Types may be different during ALTER (when this stream is used to perform an ALTER).\n-    /// NOTE: We may use similar code to implement non blocking ALTERs.\n-    for (const auto & name_type : data_part->getColumns())\n-    {\n-        if (header.has(name_type.name))\n-        {\n-            auto & elem = header.getByName(name_type.name);\n-            if (!elem.type->equals(*name_type.type))\n-            {\n-                elem.type = name_type.type;\n-                elem.column = elem.type->createColumn();\n-            }\n-        }\n-    }\n-\n-    return std::move(header);\n-}\n-\n MergeTreeReverseSelectProcessor::MergeTreeReverseSelectProcessor(\n     const MergeTreeData & storage_,\n     const StorageMetadataPtr & metadata_snapshot_,\n@@ -50,7 +30,7 @@ MergeTreeReverseSelectProcessor::MergeTreeReverseSelectProcessor(\n     bool quiet)\n     :\n     MergeTreeBaseSelectProcessor{\n-        replaceTypes(metadata_snapshot_->getSampleBlockForColumns(required_columns_, storage_.getVirtuals(), storage_.getStorageID()), owned_data_part_),\n+        metadata_snapshot_->getSampleBlockForColumns(required_columns_, storage_.getVirtuals(), storage_.getStorageID()),\n         storage_, metadata_snapshot_, prewhere_info_, max_block_size_rows_,\n         preferred_block_size_bytes_, preferred_max_column_in_block_size_bytes_,\n         reader_settings_, use_uncompressed_cache_, virt_column_names_},\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01521_alter_enum_and_reverse_read.reference b/tests/queries/0_stateless/01521_alter_enum_and_reverse_read.reference\nnew file mode 100644\nindex 000000000000..31b2ec7d1a37\n--- /dev/null\n+++ b/tests/queries/0_stateless/01521_alter_enum_and_reverse_read.reference\n@@ -0,0 +1,2 @@\n+2020-10-09 00:00:00\th1\tPS\n+2020-10-09 00:00:00\th1\tWS\ndiff --git a/tests/queries/0_stateless/01521_alter_enum_and_reverse_read.sql b/tests/queries/0_stateless/01521_alter_enum_and_reverse_read.sql\nnew file mode 100644\nindex 000000000000..7caa4d34214f\n--- /dev/null\n+++ b/tests/queries/0_stateless/01521_alter_enum_and_reverse_read.sql\n@@ -0,0 +1,13 @@\n+DROP TABLE IF EXISTS enum_test;\n+\n+CREATE TABLE enum_test(timestamp DateTime, host String, e Enum8('IU' = 1, 'WS' = 2)) Engine = MergeTree PARTITION BY toDate(timestamp) ORDER BY (timestamp, host);\n+\n+INSERT INTO enum_test SELECT '2020-10-09 00:00:00', 'h1', 'WS' FROM numbers(1);\n+\n+ALTER TABLE enum_test MODIFY COLUMN e Enum8('IU' = 1, 'WS' = 2, 'PS' = 3);\n+\n+INSERT INTO enum_test SELECT '2020-10-09 00:00:00', 'h1', 'PS' from numbers(1);\n+\n+SELECT * FROM enum_test ORDER BY timestamp DESC;\n+\n+DROP TABLE IF EXISTS enum_test;\n",
  "problem_statement": "Alter enum -> Block structure mismatch in Pipe::unitePipes stream\n20.10.1\r\n```\r\ncat x.sql\r\n\r\ndrop table if exists enum_test;\r\n\r\ncreate table enum_test(timestamp DateTime, host String, e Enum8('IU' = 1, 'WS' = 2))\r\nEngine = MergeTree PARTITION BY toDate(timestamp) ORDER BY (timestamp, host);\r\n\r\ninsert into enum_test select '2020-10-09 00:00:00', 'h1', 'WS' from numbers(1000);\r\nalter table enum_test modify column e Enum8('IU' = 1, 'WS' = 2, 'PS' = 3);\r\ninsert into enum_test select  '2020-10-09 00:00:00', 'h1', 'PS' from numbers(10);\r\n\r\nSELECT * FROM enum_test ORDER BY timestamp DESC LIMIT 1;\r\n\r\nReceived exception from server (version 20.10.1):\r\nCode: 49. DB::Exception: Received from localhost:9000. DB::Exception: Block structure mismatch in Pipe::unitePipes stream: different types:\r\ntimestamp DateTime UInt32(size = 0), host String String(size = 0), e Enum8('IU' = 1, 'WS' = 2, 'PS' = 3) Int8(size = 0)\r\ntimestamp DateTime UInt32(size = 0), host String String(size = 0), e Enum8('IU' = 1, 'WS' = 2) Int8(size = 0).\r\n\r\n\r\noptimize table enum_test final;\r\nSELECT timestamp, host FROM enum_test ORDER BY timestamp DESC LIMIT 1;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500timestamp\u2500\u252c\u2500host\u2500\u2510\r\n\u2502 2020-10-09 00:00:00 \u2502 h1   \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\n",
  "hints_text": "",
  "created_at": "2020-10-12T08:31:06Z"
}