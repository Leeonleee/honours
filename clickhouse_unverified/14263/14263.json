{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 14263,
  "instance_id": "ClickHouse__ClickHouse-14263",
  "issue_numbers": [
    "13911"
  ],
  "base_commit": "59a3937adbb500f7645a9d5f28203dc79052e10f",
  "patch": "diff --git a/docs/en/sql-reference/statements/create/table.md b/docs/en/sql-reference/statements/create/table.md\nindex e3e767482dbf..dbe1f282b5d0 100644\n--- a/docs/en/sql-reference/statements/create/table.md\n+++ b/docs/en/sql-reference/statements/create/table.md\n@@ -136,7 +136,7 @@ ENGINE = <Engine>\n ...\n ```\n \n-If a codec is specified, the default codec doesn\u2019t apply. Codecs can be combined in a pipeline, for example, `CODEC(Delta, ZSTD)`. To select the best codec combination for you project, pass benchmarks similar to described in the Altinity [New Encodings to Improve ClickHouse Efficiency](https://www.altinity.com/blog/2019/7/new-encodings-to-improve-clickhouse) article.\n+If a codec is specified, the default codec doesn\u2019t apply. Codecs can be combined in a pipeline, for example, `CODEC(Delta, ZSTD)`. To select the best codec combination for you project, pass benchmarks similar to described in the Altinity [New Encodings to Improve ClickHouse Efficiency](https://www.altinity.com/blog/2019/7/new-encodings-to-improve-clickhouse) article. One thing to note is that codec can't be applied for ALIAS column type. \n \n !!! warning \"Warning\"\n     You can\u2019t decompress ClickHouse database files with external utilities like `lz4`. Instead, use the special [clickhouse-compressor](https://github.com/ClickHouse/ClickHouse/tree/master/programs/compressor) utility.\ndiff --git a/src/Interpreters/InterpreterCreateQuery.cpp b/src/Interpreters/InterpreterCreateQuery.cpp\nindex 07ee3ea853ff..06973ab029bb 100644\n--- a/src/Interpreters/InterpreterCreateQuery.cpp\n+++ b/src/Interpreters/InterpreterCreateQuery.cpp\n@@ -18,7 +18,6 @@\n #include <Parsers/ASTIdentifier.h>\n #include <Parsers/ASTIndexDeclaration.h>\n #include <Parsers/ASTLiteral.h>\n-#include <Parsers/ASTNameTypePair.h>\n #include <Parsers/ASTInsertQuery.h>\n #include <Parsers/ParserCreateQuery.h>\n #include <Parsers/formatAST.h>\n@@ -30,11 +29,9 @@\n #include <Interpreters/Context.h>\n #include <Interpreters/DDLWorker.h>\n #include <Interpreters/ExpressionAnalyzer.h>\n-#include <Interpreters/TreeRewriter.h>\n #include <Interpreters/InterpreterCreateQuery.h>\n #include <Interpreters/InterpreterSelectWithUnionQuery.h>\n #include <Interpreters/InterpreterInsertQuery.h>\n-#include <Interpreters/ExpressionActions.h>\n #include <Interpreters/AddDefaultDatabaseVisitor.h>\n \n #include <Access/AccessRightsElement.h>\n@@ -70,6 +67,7 @@ namespace ErrorCodes\n     extern const int UNKNOWN_DATABASE_ENGINE;\n     extern const int DUPLICATE_COLUMN;\n     extern const int DATABASE_ALREADY_EXISTS;\n+    extern const int BAD_ARGUMENTS;\n     extern const int BAD_DATABASE_FOR_TEMPORARY_TABLE;\n     extern const int SUSPICIOUS_TYPE_FOR_LOW_CARDINALITY;\n     extern const int DICTIONARY_ALREADY_EXISTS;\n@@ -415,7 +413,12 @@ ColumnsDescription InterpreterCreateQuery::getColumnsDescription(\n             column.comment = col_decl.comment->as<ASTLiteral &>().value.get<String>();\n \n         if (col_decl.codec)\n-            column.codec = CompressionCodecFactory::instance().validateCodecAndGetPreprocessedAST(col_decl.codec, column.type, sanity_check_compression_codecs);\n+        {\n+            if (col_decl.default_specifier == \"ALIAS\")\n+                throw Exception{\"Cannot specify codec for column type ALIAS\", ErrorCodes::BAD_ARGUMENTS};\n+            column.codec = CompressionCodecFactory::instance().validateCodecAndGetPreprocessedAST(\n+                col_decl.codec, column.type, sanity_check_compression_codecs);\n+        }\n \n         if (col_decl.ttl)\n             column.ttl = col_decl.ttl;\ndiff --git a/src/Storages/AlterCommands.cpp b/src/Storages/AlterCommands.cpp\nindex 5706808df57c..caf98e911ab2 100644\n--- a/src/Storages/AlterCommands.cpp\n+++ b/src/Storages/AlterCommands.cpp\n@@ -74,8 +74,11 @@ std::optional<AlterCommand> AlterCommand::parse(const ASTAlterCommand * command_\n         }\n \n         if (ast_col_decl.codec)\n+        {\n+            if (ast_col_decl.default_specifier == \"ALIAS\")\n+                throw Exception{\"Cannot specify codec for column type ALIAS\", ErrorCodes::BAD_ARGUMENTS};\n             command.codec = ast_col_decl.codec;\n-\n+        }\n         if (command_ast->column)\n             command.after_column = getIdentifierName(command_ast->column);\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01462_test_codec_on_alias.reference b/tests/queries/0_stateless/01462_test_codec_on_alias.reference\nnew file mode 100644\nindex 000000000000..b087d360150b\n--- /dev/null\n+++ b/tests/queries/0_stateless/01462_test_codec_on_alias.reference\n@@ -0,0 +1,4 @@\n+create table compression_codec_on_alias with CODEC on ALIAS type\n+create table compression_codec_on_alias with proper CODEC\n+alter table compression_codec_on_alias add column (ALIAS type) with CODEC\n+alter table compression_codec_on_alias add column (NOT ALIAS type) with CODEC\ndiff --git a/tests/queries/0_stateless/01462_test_codec_on_alias.sql b/tests/queries/0_stateless/01462_test_codec_on_alias.sql\nnew file mode 100644\nindex 000000000000..06a82c61b9ee\n--- /dev/null\n+++ b/tests/queries/0_stateless/01462_test_codec_on_alias.sql\n@@ -0,0 +1,25 @@\n+DROP TABLE IF EXISTS compression_codec_on_alias;\n+\n+select 'create table compression_codec_on_alias with CODEC on ALIAS type';\n+\n+CREATE TABLE compression_codec_on_alias (\n+    `c0` ALIAS c1 CODEC(ZSTD),\n+    c1 UInt64\n+) ENGINE = MergeTree() PARTITION BY c0 ORDER BY c1; -- { serverError 36 }\n+\n+select 'create table compression_codec_on_alias with proper CODEC';\n+\n+CREATE TABLE compression_codec_on_alias (\n+    c0 UInt64 CODEC(ZSTD),\n+    c1 UInt64\n+) ENGINE = MergeTree() PARTITION BY c0 ORDER BY c1; -- success\n+\n+select 'alter table compression_codec_on_alias add column (ALIAS type) with CODEC';\n+\n+ALTER TABLE compression_codec_on_alias ADD COLUMN `c3` ALIAS c2 CODEC(ZSTD) AFTER c2; -- { serverError 36 }\n+\n+select 'alter table compression_codec_on_alias add column (NOT ALIAS type) with CODEC';\n+\n+ALTER TABLE compression_codec_on_alias ADD COLUMN c2 UInt64 CODEC(ZSTD) AFTER c1; -- success\n+\n+DROP TABLE IF EXISTS compression_codec_on_alias;\n",
  "problem_statement": "CODEC is allowed for ALIAS column\n**Describe the bug**\r\n`CODEC` is allowed for `ALIAS` column\r\n\r\n**How to reproduce**\r\n``` sql\r\nCREATE TABLE t102\r\n(\r\n    `c0` ALIAS c1 CODEC(ZSTD),\r\n    `c1` String\r\n)\r\nENGINE = Memory()\r\n\r\nOk.\r\n\r\nDESCRIBE TABLE t102\r\n\r\n\u250c\u2500name\u2500\u252c\u2500type\u2500\u2500\u2500\u252c\u2500default_type\u2500\u252c\u2500default_expression\u2500\u252c\u2500comment\u2500\u252c\u2500codec_expression\u2500\u252c\u2500ttl_expression\u2500\u2510\r\n\u2502 c0   \u2502 String \u2502 ALIAS        \u2502 c1                 \u2502         \u2502 ZSTD(1)          \u2502                \u2502\r\n\u2502 c1   \u2502 String \u2502              \u2502                    \u2502         \u2502                  \u2502                \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n```\r\n**Expected behavior**\r\nError\n",
  "hints_text": "",
  "created_at": "2020-08-31T07:21:26Z"
}