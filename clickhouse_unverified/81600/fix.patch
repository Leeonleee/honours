diff --git a/docs/en/operations/system-tables/codecs.md b/docs/en/operations/system-tables/codecs.md
new file mode 100644
index 000000000000..c8fa3dc2cbdb
--- /dev/null
+++ b/docs/en/operations/system-tables/codecs.md
@@ -0,0 +1,45 @@
+---
+description: 'System table containing information about codecs
+  in queue.'
+keywords: ['system table', 'codecs', 'compression']
+slug: /operations/system-tables/codecs
+title: 'system.codecs'
+---
+
+Contains information about compression and encryption codecs.
+
+You can use this table to get information about the available compression and encryption codecs
+
+The `system.codecs` table contains the following columns (the column type is shown in brackets):
+
+- `name` ([String](../../sql-reference/data-types/string.md)) — Codec name.
+- `method_byte` ([UInt8](/sql-reference/data-types/int-uint#integer-ranges)) — Byte which indicates codec in compressed file.
+- `is_compression` ([UInt8](/sql-reference/data-types/int-uint#integer-ranges)) — True if this codec compresses something. Otherwise it can be just a transformation that helps compression.
+- `is_generic_compression` ([UInt8](/sql-reference/data-types/int-uint#integer-ranges)) — The codec is a generic compression algorithm like lz4, zstd.
+- `is_encryption` ([UInt8](/sql-reference/data-types/int-uint#integer-ranges)) — The codec encrypts the data.
+- `is_timeseries_codec`([UInt8](/sql-reference/data-types/int-uint#integer-ranges)) — The codec is for floating-point time series data.
+- `is_experimental` ([UInt8](/sql-reference/data-types/int-uint#integer-ranges)) — The codec is experimental.
+- `description` ([String](../../sql-reference/data-types/string.md)) — A high-level description of the codec.
+
+**Example**
+
+Query:
+
+```sql
+SELECT * FROM system.codecs WHERE name='LZ4'
+```
+
+Result:
+
+```text
+Row 1:
+──────
+name:                   LZ4
+method_byte:            130
+is_compression:         1
+is_generic_compression: 1
+is_encryption:          0
+is_timeseries_codec:    0
+is_experimental:        0
+description:            Extremely fast; good compression; balanced speed and efficiency.
+```
diff --git a/src/Compression/CompressionCodecDeflateQpl.h b/src/Compression/CompressionCodecDeflateQpl.h
index 74ff5a449f7a..75d3527082f5 100644
--- a/src/Compression/CompressionCodecDeflateQpl.h
+++ b/src/Compression/CompressionCodecDeflateQpl.h
@@ -110,6 +110,12 @@ class CompressionCodecDeflateQpl final : public ICompressionCodec
     bool isGenericCompression() const override { return true; }
     bool isDeflateQpl() const override { return true; }
 
+    std::string getDescription() const override
+    {
+        return "Requires hardware support for Intel’s QuickAssist Technology for DEFLATE compression; enhanced performance for specific hardware.";
+    }
+
+
     UInt32 doCompressData(const char * source, UInt32 source_size, char * dest) const override;
     void doDecompressData(const char * source, UInt32 source_size, char * dest, UInt32 uncompressed_size) const override;
 
diff --git a/src/Compression/CompressionCodecDelta.cpp b/src/Compression/CompressionCodecDelta.cpp
index 680f93a61b69..f3ff161eef82 100644
--- a/src/Compression/CompressionCodecDelta.cpp
+++ b/src/Compression/CompressionCodecDelta.cpp
@@ -29,6 +29,12 @@ class CompressionCodecDelta : public ICompressionCodec
     bool isGenericCompression() const override { return false; }
     bool isDeltaCompression() const override { return true; }
 
+    std::string getDescription() const override
+    {
+        return "Preprocessor (should be followed by some compression codec). Stores difference between neighboring values; good for monotonically increasing or decreasing data.";
+    }
+
+
 private:
     const UInt8 delta_bytes_size;
 };
diff --git a/src/Compression/CompressionCodecDoubleDelta.cpp b/src/Compression/CompressionCodecDoubleDelta.cpp
index 9c25bc76eac3..15ae8515a8ee 100644
--- a/src/Compression/CompressionCodecDoubleDelta.cpp
+++ b/src/Compression/CompressionCodecDoubleDelta.cpp
@@ -138,6 +138,11 @@ class CompressionCodecDoubleDelta : public ICompressionCodec
     bool isCompression() const override { return true; }
     bool isGenericCompression() const override { return false; }
     bool isDeltaCompression() const override { return true; }
+    std::string getDescription() const override
+    {
+        return "Stores difference between neighboring delta values; suitable for time series data.";
+    }
+
 
 private:
     UInt8 data_bytes_size;
diff --git a/src/Compression/CompressionCodecEncrypted.h b/src/Compression/CompressionCodecEncrypted.h
index 7971cbadab71..632294e598ee 100644
--- a/src/Compression/CompressionCodecEncrypted.h
+++ b/src/Compression/CompressionCodecEncrypted.h
@@ -107,19 +107,13 @@ class CompressionCodecEncrypted final : public ICompressionCodec
     uint8_t getMethodByte() const override;
     void updateHash(SipHash & hash) const override;
 
-    bool isCompression() const override
-    {
-        return false;
-    }
-
-    bool isGenericCompression() const override
-    {
-        return false;
-    }
+    bool isCompression() const override { return false; }
+    bool isGenericCompression() const override { return false; }
+    bool isEncryption() const override { return true; }
 
-    bool isEncryption() const override
+    std::string getDescription() const override
     {
-        return true;
+        return "Encrypts and decrypts blocks with AES-128 in GCM-SIV mode (RFC-8452).";
     }
 protected:
     UInt32 getMaxCompressedDataSize(UInt32 uncompressed_size) const override;
diff --git a/src/Compression/CompressionCodecFPC.cpp b/src/Compression/CompressionCodecFPC.cpp
index f52ebac47ec3..e6ba5c6c7ae2 100644
--- a/src/Compression/CompressionCodecFPC.cpp
+++ b/src/Compression/CompressionCodecFPC.cpp
@@ -40,6 +40,11 @@ class CompressionCodecFPC : public ICompressionCodec
     bool isCompression() const override { return true; }
     bool isGenericCompression() const override { return false; }
     bool isFloatingPointTimeSeriesCodec() const override { return true; }
+    std::string getDescription() const override
+    {
+        return "High Throughput Compression of Double-Precision Floating-Point Data.";
+    }
+
 
 private:
     static constexpr UInt32 HEADER_SIZE = 2;
diff --git a/src/Compression/CompressionCodecGCD.cpp b/src/Compression/CompressionCodecGCD.cpp
index ca7e53081447..998975e2c554 100644
--- a/src/Compression/CompressionCodecGCD.cpp
+++ b/src/Compression/CompressionCodecGCD.cpp
@@ -31,6 +31,11 @@ class CompressionCodecGCD : public ICompressionCodec
 
     bool isCompression() const override { return false; }
     bool isGenericCompression() const override { return false; }
+    std::string getDescription() const override
+    {
+        return "Preprocessor. Greatest common divisor compression; divides values by a common divisor; effective for divisible integer sequences.";
+    }
+
 
 private:
     const UInt8 gcd_bytes_size;
diff --git a/src/Compression/CompressionCodecGorilla.cpp b/src/Compression/CompressionCodecGorilla.cpp
index 4570cb6aeb41..6a22be45e812 100644
--- a/src/Compression/CompressionCodecGorilla.cpp
+++ b/src/Compression/CompressionCodecGorilla.cpp
@@ -124,6 +124,12 @@ class CompressionCodecGorilla : public ICompressionCodec
     bool isGenericCompression() const override { return false; }
     bool isFloatingPointTimeSeriesCodec() const override { return true; }
 
+    std::string getDescription() const override
+    {
+        return "Calculates XOR between current and previous value; suitable for slowly changing numbers.";
+    }
+
+
 private:
     const UInt8 data_bytes_size;
 };
diff --git a/src/Compression/CompressionCodecLZ4.cpp b/src/Compression/CompressionCodecLZ4.cpp
index 597c1ba3acbe..136b7a98c838 100644
--- a/src/Compression/CompressionCodecLZ4.cpp
+++ b/src/Compression/CompressionCodecLZ4.cpp
@@ -35,6 +35,10 @@ class CompressionCodecLZ4 : public ICompressionCodec
 
     bool isCompression() const override { return true; }
     bool isGenericCompression() const override { return true; }
+    std::string getDescription() const override
+    {
+        return "Extremely fast; good compression; balanced speed and efficiency.";
+    }
 
 private:
     void doDecompressData(const char * source, UInt32 source_size, char * dest, UInt32 uncompressed_size) const override;
@@ -52,6 +56,11 @@ class CompressionCodecLZ4HC : public CompressionCodecLZ4
 
 protected:
     UInt32 doCompressData(const char * source, UInt32 source_size, char * dest) const override;
+    std::string getDescription() const override
+    {
+        return "LZ4 High Compression algorithm with configurable level; slower but better compression than LZ4, but decompression is still fast.";
+    }
+
 
 private:
     const int level;
diff --git a/src/Compression/CompressionCodecMultiple.h b/src/Compression/CompressionCodecMultiple.h
index 1d63fe1da55a..35cb79f3e4d6 100644
--- a/src/Compression/CompressionCodecMultiple.h
+++ b/src/Compression/CompressionCodecMultiple.h
@@ -28,6 +28,12 @@ class CompressionCodecMultiple final : public ICompressionCodec
     bool isCompression() const override;
     bool isGenericCompression() const override { return false; }
 
+    std::string getDescription() const override
+    {
+        return "Apply multiple codecs consecutively defined by user.";
+    }
+
+
 private:
     Codecs codecs;
 };
diff --git a/src/Compression/CompressionCodecNone.h b/src/Compression/CompressionCodecNone.h
index 0aaa973b55f1..9f41a0c6f6cc 100644
--- a/src/Compression/CompressionCodecNone.h
+++ b/src/Compression/CompressionCodecNone.h
@@ -24,6 +24,12 @@ class CompressionCodecNone final : public ICompressionCodec
     bool isCompression() const override { return false; }
     bool isGenericCompression() const override { return false; }
     bool isNone() const override { return true; }
+
+    std::string getDescription() const override
+    {
+        return "No compression at all. Can be used on the columns that can not be compressed anyway.";
+    }
+
 };
 
 }
diff --git a/src/Compression/CompressionCodecT64.cpp b/src/Compression/CompressionCodecT64.cpp
index e017d126294c..61c0d0c1f9fa 100644
--- a/src/Compression/CompressionCodecT64.cpp
+++ b/src/Compression/CompressionCodecT64.cpp
@@ -53,6 +53,11 @@ class CompressionCodecT64 : public ICompressionCodec
 
     bool isCompression() const override { return true; }
     bool isGenericCompression() const override { return false; }
+    std::string getDescription() const override
+    {
+        return "Preprocessor. Crops unused high bits; puts them into a 64x64 bit matrix; optimized for 64-bit data types.";
+    }
+
 
 private:
     std::optional<TypeIndex> type_idx;
diff --git a/src/Compression/CompressionCodecZSTD.h b/src/Compression/CompressionCodecZSTD.h
index cdded9fc08a8..1c985799c98d 100644
--- a/src/Compression/CompressionCodecZSTD.h
+++ b/src/Compression/CompressionCodecZSTD.h
@@ -29,6 +29,12 @@ class CompressionCodecZSTD : public ICompressionCodec
     bool isCompression() const override { return true; }
     bool isGenericCompression() const override { return true; }
 
+    std::string getDescription() const override
+    {
+        return "Good compression; pretty fast; best for high compression needs. Don’t use levels higher than 3.";
+    }
+
+
 private:
     const int level;
     const bool enable_long_range;
diff --git a/src/Compression/CompressionCodecZSTDQAT.cpp b/src/Compression/CompressionCodecZSTDQAT.cpp
index 53f6473735c3..5da4ba38f8ed 100644
--- a/src/Compression/CompressionCodecZSTDQAT.cpp
+++ b/src/Compression/CompressionCodecZSTDQAT.cpp
@@ -31,6 +31,12 @@ class CompressionCodecZSTDQAT : public CompressionCodecZSTD
 
     explicit CompressionCodecZSTDQAT(int level_);
 
+    std::string getDescription() const override
+    {
+        return "Requires hardware support for QuickAssist Technology (QAT) hardware; provides accelerated compression tasks.";
+    }
+
+
 protected:
     bool isZstdQat() const override { return true; }
     UInt32 doCompressData(const char * source, UInt32 source_size, char * dest) const override;
diff --git a/src/Compression/CompressionFactory.cpp b/src/Compression/CompressionFactory.cpp
index 34e505b03a7e..7ab5cb4691f8 100644
--- a/src/Compression/CompressionFactory.cpp
+++ b/src/Compression/CompressionFactory.cpp
@@ -10,6 +10,9 @@
 #include <Parsers/parseQuery.h>
 #include <Poco/String.h>
 
+#include <Columns/IColumn.h>
+#include <algorithm>
+
 #include <boost/algorithm/string/join.hpp>
 
 #include "config.h"
@@ -112,6 +115,27 @@ CompressionCodecPtr CompressionCodecFactory::get(uint8_t byte_code) const
     return family_code_and_creator->second({}, nullptr);
 }
 
+void CompressionCodecFactory::fillCodecDescriptions(MutableColumns & res_columns) const
+{
+    std::for_each(
+        family_name_with_codec.begin(),
+        family_name_with_codec.end(),
+        [&](const auto &it)
+        {
+            const std::string &name = it.first;
+            CompressionCodecPtr tmp = it.second({}, nullptr);
+
+            res_columns[0]->insert(name);
+            res_columns[1]->insert(tmp->getMethodByte());
+            res_columns[2]->insert(tmp->isCompression());
+            res_columns[3]->insert(tmp->isGenericCompression());
+            res_columns[4]->insert(tmp->isEncryption());
+            res_columns[5]->insert(tmp->isFloatingPointTimeSeriesCodec());
+            res_columns[6]->insert(tmp->isExperimental());
+            res_columns[7]->insert(tmp->getDescription());
+        }
+    );
+}
 
 CompressionCodecPtr CompressionCodecFactory::getImpl(const String & family_name, const ASTPtr & arguments, const IDataType * column_type) const
 {
diff --git a/src/Compression/CompressionFactory.h b/src/Compression/CompressionFactory.h
index 262eb450cdbf..395c89d91b23 100644
--- a/src/Compression/CompressionFactory.h
+++ b/src/Compression/CompressionFactory.h
@@ -1,6 +1,7 @@
 #pragma once
 
 #include <Common/IFactoryWithAliases.h>
+#include <Columns/IColumn_fwd.h>
 
 #include <functional>
 #include <memory>
@@ -74,6 +75,9 @@ class CompressionCodecFactory final : private boost::noncopyable
     /// Get codec by name with optional params. Example: LZ4, ZSTD(3)
     CompressionCodecPtr get(const String & compression_codec) const;
 
+    /// Insert codec information into MutableColumns to show in the system table
+    void fillCodecDescriptions(MutableColumns & res_columns) const;
+
     /// Register codec with parameters and column type
     void registerCompressionCodecWithType(const String & family_name, std::optional<uint8_t> byte_code, CreatorWithType creator);
     /// Register codec with parameters
diff --git a/src/Compression/ICompressionCodec.h b/src/Compression/ICompressionCodec.h
index 359f18316d63..f391471f27ab 100644
--- a/src/Compression/ICompressionCodec.h
+++ b/src/Compression/ICompressionCodec.h
@@ -127,6 +127,9 @@ class ICompressionCodec : private boost::noncopyable
     /// If it does nothing.
     virtual bool isNone() const { return false; }
 
+    // Returns a string with a high level codec description.
+    virtual std::string getDescription() const = 0;
+
 protected:
     /// This is used for fuzz testing
     friend int LLVMFuzzerTestOneInput(const uint8_t * data, size_t size);
diff --git a/src/Storages/System/StorageSystemCodecs.cpp b/src/Storages/System/StorageSystemCodecs.cpp
new file mode 100644
index 000000000000..7fe66d71b35a
--- /dev/null
+++ b/src/Storages/System/StorageSystemCodecs.cpp
@@ -0,0 +1,33 @@
+
+#include <Storages/System/StorageSystemCodecs.h>
+#include <Storages/MergeTree/MergeTreeData.h>
+#include <Columns/ColumnsNumber.h>
+#include <Columns/ColumnString.h>
+#include <Columns/ColumnNullable.h>
+#include <Compression/CompressionFactory.h>
+
+
+namespace DB
+{
+
+ColumnsDescription StorageSystemCodecs::getColumnsDescription()
+{
+    return ColumnsDescription
+    {
+        { "name",                   std::make_shared<DataTypeString>(), "Codec name."},
+        { "method_byte",            std::make_shared<DataTypeUInt8>(), "Byte which indicates codec in compressed file."},
+        { "is_compression",         std::make_shared<DataTypeUInt8>(), "True if this codec compresses something. Otherwise it can be just a transformation that helps compression."},
+        { "is_generic_compression", std::make_shared<DataTypeUInt8>(), "The codec is a generic compression algorithm like lz4, zstd."},
+        { "is_encryption",          std::make_shared<DataTypeUInt8>(), "The codec encrypts."},
+        { "is_timeseries_codec",    std::make_shared<DataTypeUInt8>(), "The codec is for floating point timeseries codec."},
+        { "is_experimental",        std::make_shared<DataTypeUInt8>(), "The codec is experimental."},
+        { "description",            std::make_shared<DataTypeString>(), "A high-level description of the codec."},
+    };
+}
+
+void StorageSystemCodecs::fillData(MutableColumns & res_columns, ContextPtr, const ActionsDAG::Node *, std::vector<UInt8>) const
+{
+    CompressionCodecFactory::instance().fillCodecDescriptions(res_columns);
+}
+
+}
diff --git a/src/Storages/System/StorageSystemCodecs.h b/src/Storages/System/StorageSystemCodecs.h
new file mode 100644
index 000000000000..070611a01a83
--- /dev/null
+++ b/src/Storages/System/StorageSystemCodecs.h
@@ -0,0 +1,22 @@
+#pragma once
+
+#include <Storages/System/IStorageSystemOneBlock.h>
+
+
+namespace DB
+{
+
+/** Implements system table 'codecs', to get information for every codec.
+ */
+class StorageSystemCodecs final : public IStorageSystemOneBlock
+{
+public:
+    std::string getName() const override { return "SystemCodecs"; }
+    static ColumnsDescription getColumnsDescription();
+
+protected:
+    void fillData(MutableColumns & res_columns, ContextPtr context, const ActionsDAG::Node *, std::vector<UInt8>) const override;
+    using IStorageSystemOneBlock::IStorageSystemOneBlock;
+};
+
+}
diff --git a/src/Storages/System/attachSystemTables.cpp b/src/Storages/System/attachSystemTables.cpp
index f525dd310ccf..9249fb3530b6 100644
--- a/src/Storages/System/attachSystemTables.cpp
+++ b/src/Storages/System/attachSystemTables.cpp
@@ -13,6 +13,7 @@
 #include <Storages/System/StorageSystemCollations.h>
 #include <Storages/System/StorageSystemClusters.h>
 #include <Storages/System/StorageSystemColumns.h>
+#include <Storages/System/StorageSystemCodecs.h>
 #include <Storages/System/StorageSystemDatabases.h>
 #include <Storages/System/StorageSystemDataSkippingIndices.h>
 #include <Storages/System/StorageSystemDataTypeFamilies.h>
@@ -248,6 +249,7 @@ void attachSystemTablesServer(ContextPtr context, IDatabase & system_database, b
         attach<StorageSystemTransactions>(context, system_database, "transactions", "Contains a list of transactions and their state.");
 
     attach<StorageSystemLatencyBuckets>(context, system_database, "latency_buckets", "Contains buckets bounds used by latency log.");
+    attach<StorageSystemCodecs>(context, system_database, "codecs", "Contains information about system codecs.");
 }
 
 void attachSystemTablesAsync(ContextPtr context, IDatabase & system_database, AsynchronousMetrics & async_metrics)
