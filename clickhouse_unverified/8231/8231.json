{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 8231,
  "instance_id": "ClickHouse__ClickHouse-8231",
  "issue_numbers": [
    "8129"
  ],
  "base_commit": "59278d98d7a022dbd04e2a3b4205bc4d253e68b2",
  "patch": "diff --git a/dbms/src/Core/Settings.h b/dbms/src/Core/Settings.h\nindex 00d7efb4a5b8..5a8af895610f 100644\n--- a/dbms/src/Core/Settings.h\n+++ b/dbms/src/Core/Settings.h\n@@ -188,7 +188,7 @@ struct Settings : public SettingsCollection<Settings>\n     M(SettingBool, input_format_null_as_default, false, \"For text input formats initialize null fields with default values if data type of this field is not nullable\", 0) \\\n     \\\n     M(SettingBool, input_format_values_interpret_expressions, true, \"For Values format: if field could not be parsed by streaming parser, run SQL parser and try to interpret it as SQL expression.\", 0) \\\n-    M(SettingBool, input_format_values_deduce_templates_of_expressions, false, \"For Values format: if field could not be parsed by streaming parser, run SQL parser, deduce template of the SQL expression, try to parse all rows using template and then interpret expression for all rows.\", 0) \\\n+    M(SettingBool, input_format_values_deduce_templates_of_expressions, true, \"For Values format: if field could not be parsed by streaming parser, run SQL parser, deduce template of the SQL expression, try to parse all rows using template and then interpret expression for all rows.\", 0) \\\n     M(SettingBool, input_format_values_accurate_types_of_literals, true, \"For Values format: when parsing and interpreting expressions using template, check actual type of literal to avoid possible overflow and precision issues.\", 0) \\\n     \\\n     M(SettingBool, output_format_json_quote_64bit_integers, true, \"Controls quoting of 64-bit integers in JSON output format.\", 0) \\\ndiff --git a/docs/en/operations/settings/settings.md b/docs/en/operations/settings/settings.md\nindex ab3f5b95a568..d00217db1fac 100644\n--- a/docs/en/operations/settings/settings.md\n+++ b/docs/en/operations/settings/settings.md\n@@ -223,7 +223,7 @@ INSERT INTO test VALUES (lower('Hello')), (lower('world')), (lower('INSERT')), (\n  - if `input_format_values_interpret_expressions=0` and `format_values_deduce_templates_of_expressions=1` expressions in the first, second and third rows will be parsed using template `lower(String)` and interpreted together, expression is the forth row will be parsed with another template (`upper(String)`)\n  - if `input_format_values_interpret_expressions=1` and `format_values_deduce_templates_of_expressions=1` - the same as in previous case, but also allows fallback to interpreting expressions separately if it's not possible to deduce template.\n   \n- This feature is experimental, disabled by default.\n+Enabled by default.\n \n ## input_format_values_accurate_types_of_literals {#settings-input_format_values_accurate_types_of_literals}\n This setting is used only when `input_format_values_deduce_templates_of_expressions = 1`. It can happen, that expressions for some column have the same structure, but contain numeric literals of different types, e.g\n",
  "test_patch": "diff --git a/dbms/tests/performance/insert_values_with_expressions.xml b/dbms/tests/performance/insert_values_with_expressions.xml\nindex 6693b84d365c..66fe2aef18b4 100644\n--- a/dbms/tests/performance/insert_values_with_expressions.xml\n+++ b/dbms/tests/performance/insert_values_with_expressions.xml\n@@ -2,7 +2,6 @@\n     <type>loop</type>\n \n     <settings>\n-        <input_format_values_deduce_templates_of_expressions>1</input_format_values_deduce_templates_of_expressions>\n         <input_format_values_accurate_types_of_literals>1</input_format_values_accurate_types_of_literals>\n     </settings>\n     <!--\ndiff --git a/dbms/tests/queries/0_stateless/00339_parsing_bad_arrays.reference b/dbms/tests/queries/0_stateless/00339_parsing_bad_arrays.reference\nindex ce16c81384d9..68654d3cc019 100644\n--- a/dbms/tests/queries/0_stateless/00339_parsing_bad_arrays.reference\n+++ b/dbms/tests/queries/0_stateless/00339_parsing_bad_arrays.reference\n@@ -1,2 +1,2 @@\n-1\n+['123']\n ['123','Hello world!','123']\ndiff --git a/dbms/tests/queries/0_stateless/00339_parsing_bad_arrays.sh b/dbms/tests/queries/0_stateless/00339_parsing_bad_arrays.sh\nindex 7363c1ea7c3b..44cdcc33e853 100755\n--- a/dbms/tests/queries/0_stateless/00339_parsing_bad_arrays.sh\n+++ b/dbms/tests/queries/0_stateless/00339_parsing_bad_arrays.sh\n@@ -5,7 +5,6 @@ CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n \n ${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}\" -d 'DROP TABLE IF EXISTS bad_arrays'\n ${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}\" -d 'CREATE TABLE bad_arrays (a Array(String)) ENGINE = Memory'\n-${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}\" -d 'INSERT INTO bad_arrays VALUES ([123])' 2>&1 | grep -c 'Exception'\n-${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}\" -d \"INSERT INTO bad_arrays VALUES (['123', concat('Hello', ' world!'), toString(123)])\"\n-${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}\" -d 'SELECT * FROM bad_arrays'\n+${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}\" -d \"INSERT INTO bad_arrays VALUES ([123]), (['123', concat('Hello', ' world!'), toString(123)])\"\n+${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}\" -d 'SELECT * FROM bad_arrays ORDER BY a'\n ${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}\" -d 'DROP TABLE bad_arrays'\ndiff --git a/dbms/tests/queries/0_stateless/00700_decimal_bounds.sql b/dbms/tests/queries/0_stateless/00700_decimal_bounds.sql\nindex f454ce20fcda..e8c185f7ee62 100644\n--- a/dbms/tests/queries/0_stateless/00700_decimal_bounds.sql\n+++ b/dbms/tests/queries/0_stateless/00700_decimal_bounds.sql\n@@ -84,8 +84,8 @@ INSERT INTO decimal (a, b, c, d, e, f, g, h, i, j) VALUES (0.0, 0.0, 0.0, 0.0, 0\n INSERT INTO decimal (a, b, c, d, e, f, g, h, i, j) VALUES (-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0);\n \n INSERT INTO decimal (a, b, g) VALUES ('42.00000', 42.0000000000000000000000000000000, '0.999990');\n-INSERT INTO decimal (a) VALUES ('-9x'); -- { clientError 72 }\n-INSERT INTO decimal (a) VALUES ('0x1'); -- { clientError 72 }\n+INSERT INTO decimal (a) VALUES ('-9x'); -- { clientError 6 }\n+INSERT INTO decimal (a) VALUES ('0x1'); -- { clientError 6 }\n \n INSERT INTO decimal (a, b, c, d, e, f) VALUES ('0.9e9', '0.9e18', '0.9e38', '9e-9', '9e-18', '9e-38');\n INSERT INTO decimal (a, b, c, d, e, f) VALUES ('-0.9e9', '-0.9e18', '-0.9e38', '-9e-9', '-9e-18', '-9e-38');\ndiff --git a/dbms/tests/queries/0_stateless/00748_insert_array_with_null.sql b/dbms/tests/queries/0_stateless/00748_insert_array_with_null.sql\nindex b9cfe5a6115a..78c564abad37 100644\n--- a/dbms/tests/queries/0_stateless/00748_insert_array_with_null.sql\n+++ b/dbms/tests/queries/0_stateless/00748_insert_array_with_null.sql\n@@ -3,7 +3,7 @@ DROP TABLE IF EXISTS arraytest;\n CREATE TABLE arraytest ( created_date Date DEFAULT toDate(created_at), created_at DateTime DEFAULT now(), strings Array(String) DEFAULT emptyArrayString()) ENGINE = MergeTree(created_date, cityHash64(created_at), (created_date, cityHash64(created_at)), 8192);\n \n INSERT INTO arraytest (created_at, strings) VALUES (now(), ['aaaaa', 'bbbbb', 'ccccc']);\n-INSERT INTO arraytest (created_at, strings) VALUES (now(), ['aaaaa', 'bbbbb', null]); -- { clientError 53 }\n+INSERT INTO arraytest (created_at, strings) VALUES (now(), ['aaaaa', 'bbbbb', null]); -- { clientError 349 }\n \n SELECT strings from arraytest;\n \ndiff --git a/dbms/tests/queries/0_stateless/00948_values_interpreter_template.sql b/dbms/tests/queries/0_stateless/00948_values_interpreter_template.sql\nindex cec8cd772347..2394146f454a 100644\n--- a/dbms/tests/queries/0_stateless/00948_values_interpreter_template.sql\n+++ b/dbms/tests/queries/0_stateless/00948_values_interpreter_template.sql\n@@ -7,7 +7,6 @@ CREATE TABLE values_template_nullable (d Date, s Nullable(String), u Nullable(UI\n CREATE TABLE values_template_fallback (n UInt8) ENGINE = Memory;\n \n SET input_format_values_interpret_expressions = 0;\n-SET input_format_values_deduce_templates_of_expressions = 1;\n \n --(1, lower(replaceAll(_STR_1, 'o', 'a')), _NUM_1 + _NUM_2 + _NUM_3, round(_NUM_4 / _NUM_5), _NUM_6 * CAST(_STR_7, 'Int8'), _ARR_8);\n -- _NUM_1: UInt64 -> Int64 -> UInt64\ndiff --git a/dbms/tests/queries/0_stateless/01016_input_null_as_default.sh b/dbms/tests/queries/0_stateless/01016_input_null_as_default.sh\nindex f7fdefc26df8..d84c61269580 100755\n--- a/dbms/tests/queries/0_stateless/01016_input_null_as_default.sh\n+++ b/dbms/tests/queries/0_stateless/01016_input_null_as_default.sh\n@@ -50,6 +50,6 @@ echo 'Values'\n echo '(NULL, '\\''1'\\'', (null), '\\''2019-07-22'\\'', ([10, 20, 30]), (NuLl)),\n (1, '\\''world'\\'', (3), '\\''2019-07-23'\\'', (NULL), (('\\''tuple'\\'', 3.14))),\n (2, null, (123), null, ([]), (('\\''test'\\'', 2.71828))),\n-(3, null, (null), null, (null), (null))' | $CLICKHOUSE_CLIENT --input_format_null_as_default=1 --input_format_values_deduce_templates_of_expressions=1 --query=\"INSERT INTO null_as_default VALUES\";\n+(3, null, (null), null, (null), (null))' | $CLICKHOUSE_CLIENT --input_format_null_as_default=1 --query=\"INSERT INTO null_as_default VALUES\";\n $CLICKHOUSE_CLIENT --query=\"SELECT * FROM null_as_default ORDER BY i\";\n $CLICKHOUSE_CLIENT --query=\"DROP TABLE null_as_default\";\n",
  "problem_statement": "Date as a number in INSERT VALUES may fail or slow down\nProbably it's an undefined behavior. \r\nMay be better to forbid to insert Date as a number in Values, because TSV does not allow this. \r\n\r\n```\r\ncreate table vtest(A String, B Int64, C Int64, D Date) Engine=Memory;\r\n```\r\n\r\n19.15.5.18 -- fails if number of values is high\r\n```\r\nclickhouse-client -q \"select 'refcode',4,1,17587 from numbers(1000) format Values\">test1k.value\r\n\r\ntime cat test1k.value |clickhouse-client -q \"INSERT INTO vtest Values\"\r\nreal\t0m0.075s\r\n\r\nclickhouse-client -q \"select 'refcode',4,1,17587 from numbers(1000000) format Values\" >test1m.value\r\n\r\ncat test1m.value |clickhouse-client -q \"INSERT INTO vtest Values\"\r\nCode: 27. DB::Exception: Cannot parse input: expected ) before: 87),(\\'refcode\\',4,1,17587),(\\'refcode\\',4,1,17587),(\\'refcode\\',4,1,17587),(\\'refcode\\',4,1,17587),(\\'refcode\\',4,1,17587),(\\'refcode\\',4,1,17587),(\\'refcode\\',4,1,17587),(\\': (at row 5958)\r\n```\r\n\r\n19.18.1.1779 -- 53 seconds!!!\r\n```\r\ntime cat  test1m.value |clickhouse-client -q \"INSERT INTO vtest Values\"\r\nreal\t0m53.000s\r\n```\n",
  "hints_text": "Maybe related to #6781\r\n \r\n/cc @tavplubix \nIt should work fine with enabled `input_format_values_deduce_templates_of_expressions` setting.\r\n```\r\n$ time cat test1m.value |clickhouse-client -q \"INSERT INTO vtest Values\" --input_format_values_deduce_templates_of_expressions=1\r\nreal\t0m0.321s\r\nuser\t0m0.247s\r\nsys\t0m0.051s\r\n```\r\nhttps://clickhouse.yandex/docs/en/operations/settings/settings/#settings-input_format_values_deduce_templates_of_expressions \r\n\r\nAlso inserting date as a number can be forbidden by disabling `input_format_values_interpret_expressions` setting.\n@tavplubix Are we ready to enable it by default? You can make a PR with this change.",
  "created_at": "2019-12-16T10:31:01Z",
  "modified_files": [
    "dbms/src/Core/Settings.h",
    "docs/en/operations/settings/settings.md"
  ],
  "modified_test_files": [
    "dbms/tests/performance/insert_values_with_expressions.xml",
    "dbms/tests/queries/0_stateless/00339_parsing_bad_arrays.reference",
    "dbms/tests/queries/0_stateless/00339_parsing_bad_arrays.sh",
    "dbms/tests/queries/0_stateless/00700_decimal_bounds.sql",
    "dbms/tests/queries/0_stateless/00748_insert_array_with_null.sql",
    "dbms/tests/queries/0_stateless/00948_values_interpreter_template.sql",
    "dbms/tests/queries/0_stateless/01016_input_null_as_default.sh"
  ]
}