{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 63628,
  "instance_id": "ClickHouse__ClickHouse-63628",
  "issue_numbers": [
    "61497"
  ],
  "base_commit": "059f1abcf6e21569f27531d48c9f423edce9b5c5",
  "patch": "diff --git a/src/Functions/FunctionsHashing.h b/src/Functions/FunctionsHashing.h\nindex 79b33e2f75b5..1091ec6c86fa 100644\n--- a/src/Functions/FunctionsHashing.h\n+++ b/src/Functions/FunctionsHashing.h\n@@ -49,6 +49,8 @@\n #include <base/bit_cast.h>\n #include <base/unaligned.h>\n \n+#include <algorithm>\n+\n namespace DB\n {\n \n@@ -75,17 +77,29 @@ namespace impl\n         ColumnPtr key0;\n         ColumnPtr key1;\n         bool is_const;\n+        const ColumnArray::Offsets * offsets{};\n \n         size_t size() const\n         {\n             assert(key0 && key1);\n             assert(key0->size() == key1->size());\n+            assert(offsets == nullptr || offsets->size() == key0->size());\n+            if (offsets != nullptr)\n+                return offsets->back();\n             return key0->size();\n         }\n         SipHashKey getKey(size_t i) const\n         {\n             if (is_const)\n                 i = 0;\n+            if (offsets != nullptr)\n+            {\n+                const auto *const begin = offsets->begin();\n+                const auto * upper = std::upper_bound(begin, offsets->end(), i);\n+                if (upper == offsets->end())\n+                    throw Exception(ErrorCodes::LOGICAL_ERROR, \"offset {} not found in function SipHashKeyColumns::getKey\", i);\n+                i = upper - begin;\n+            }\n             const auto & key0data = assert_cast<const ColumnUInt64 &>(*key0).getData();\n             const auto & key1data = assert_cast<const ColumnUInt64 &>(*key1).getData();\n             return {key0data[i], key1data[i]};\n@@ -1112,7 +1126,15 @@ class FunctionAnyHash : public IFunction\n \n             typename ColumnVector<ToType>::Container vec_temp(nested_size);\n             bool nested_is_first = true;\n-            executeForArgument(key_cols, nested_type, nested_column, vec_temp, nested_is_first);\n+\n+            if constexpr (Keyed)\n+            {\n+                KeyColumnsType key_cols_tmp{key_cols};\n+                key_cols_tmp.offsets = &offsets;\n+                executeForArgument(key_cols_tmp, nested_type, nested_column, vec_temp, nested_is_first);\n+            }\n+            else\n+                executeForArgument(key_cols, nested_type, nested_column, vec_temp, nested_is_first);\n \n             const size_t size = offsets.size();\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02534_keyed_siphash.reference b/tests/queries/0_stateless/02534_keyed_siphash.reference\nindex e3fae07333a2..3f478218ff11 100644\n--- a/tests/queries/0_stateless/02534_keyed_siphash.reference\n+++ b/tests/queries/0_stateless/02534_keyed_siphash.reference\n@@ -236,3 +236,6 @@ Check asan bug\n 0\n Check bug found fuzzing\n 9042C6691B1A75F0EA3314B6F55728BB\n+Check bug 2 found fuzzing\n+608E1FF030C9E206185B112C2A25F1A7\n+ABB65AE97711A2E053E324ED88B1D08B\ndiff --git a/tests/queries/0_stateless/02534_keyed_siphash.sql b/tests/queries/0_stateless/02534_keyed_siphash.sql\nindex 112ae15bf469..fb707109c83f 100644\n--- a/tests/queries/0_stateless/02534_keyed_siphash.sql\n+++ b/tests/queries/0_stateless/02534_keyed_siphash.sql\n@@ -338,3 +338,10 @@ SELECT sipHash128((toUInt64(9223372036854775806), 1)) = sipHash128(1) GROUP BY s\n SELECT 'Check bug found fuzzing';\n SELECT [(255, 1048575)], sipHash128ReferenceKeyed((toUInt64(2147483646), toUInt64(9223372036854775807)), ([(NULL, 100), (NULL, NULL), (1024, 10)], toUInt64(2), toUInt64(1024)), ''), hex(sipHash128ReferenceKeyed((-9223372036854775807, 1.), '-1', NULL)), ('', toUInt64(65535), [(9223372036854775807, 9223372036854775806)], toUInt64(65536)), arrayJoin((NULL, 65537, 255), [(NULL, NULL)]) GROUP BY tupleElement((NULL, NULL, NULL, -1), toUInt64(2), 2) = NULL;  -- { serverError NOT_IMPLEMENTED }\n SELECT hex(sipHash128ReferenceKeyed((0::UInt64, 0::UInt64), ([1, 1])));\n+\n+SELECT 'Check bug 2 found fuzzing';\n+DROP TABLE IF EXISTS sipHashKeyed_keys;\n+CREATE TABLE sipHashKeyed_keys (`a` Map(String, String)) ENGINE = Memory;\n+INSERT INTO sipHashKeyed_keys FORMAT VALUES ({'a':'b', 'c':'d'}), ({'e':'f', 'g':'h'});\n+SELECT hex(sipHash128ReferenceKeyed((0::UInt64, materialize(0::UInt64)), a)) FROM sipHashKeyed_keys ORDER BY a;\n+DROP TABLE sipHashKeyed_keys;\n",
  "problem_statement": "Logical error: 'Key column size 2 doesn't match result column size 4 of function sipHash128ReferenceKeyed'.\nhttps://s3.amazonaws.com/clickhouse-test-reports/61494/f5a13a023bc1d19b688ec98902411252796f96d2/ast_fuzzer__msan_.html\r\n\r\n```\r\n2024.03.16 20:44:20.565599 [ 1608 ] {f5dbacad-8f33-44bc-b6e6-62a0cffedf82} <Fatal> : Logical error: 'Key column size 2 doesn't match result column size 4 of function sipHash128ReferenceKeyed'.\r\n2024.03.16 20:44:20.566306 [ 10796 ] {} <Fatal> BaseDaemon: ########## Short fault info ############\r\n2024.03.16 20:44:20.566430 [ 10796 ] {} <Fatal> BaseDaemon: (version 24.3.1.1363, build id: CBC2D3C3B3DC47596E91505F2879BF7909934F0D, git hash: b3a225a888d798c3f84af84879bdda60cc1c365f) (from thread 1608) Received signal 6\r\n2024.03.16 20:44:20.566506 [ 10796 ] {} <Fatal> BaseDaemon: Signal description: Aborted\r\n2024.03.16 20:44:20.566564 [ 10796 ] {} <Fatal> BaseDaemon: \r\n2024.03.16 20:44:20.566661 [ 10796 ] {} <Fatal> BaseDaemon: Stack trace: 0x00007f1fac33d9fc 0x00007f1fac2e9476 0x00007f1fac2cf7f3 0x000055d2948a05ea 0x000055d2948a1d24 0x000055d27eac401a 0x000055d27ed5898a 0x000055d27ed579c9 0x000055d27ed5796e 0x000055d27ed7bf45 0x000055d27ed583ea 0x000055d27ed579c9 0x000055d27ed57a23 0x000055d27ed56de6 0x000055d27ea18111 0x000055d27ed56512 0x000055d27d14f0d8 0x000055d2a53a291d 0x000055d2a53a4848 0x000055d2a53aace6 0x000055d2a94689b2 0x000055d2b164467e 0x000055d29aa2cf41 0x000055d2b0c6e09e 0x000055d2b0cddf77 0x000055d2b0cad0c7 0x000055d2b0ca9364 0x000055d2b0ca8dc8 0x000055d2b0ce99fd 0x000055d294ac6a6b 0x000055d294ad344b 0x00007f1fac33bac3 0x00007f1fac3cd850\r\n2024.03.16 20:44:20.566739 [ 10796 ] {} <Fatal> BaseDaemon: ########################################\r\n2024.03.16 20:44:20.566888 [ 10796 ] {} <Fatal> BaseDaemon: (version 24.3.1.1363, build id: CBC2D3C3B3DC47596E91505F2879BF7909934F0D, git hash: b3a225a888d798c3f84af84879bdda60cc1c365f) (from thread 1608) (query_id: f5dbacad-8f33-44bc-b6e6-62a0cffedf82) (query: SELECT now64(19, materialize(15), toNullable(2), NULL + NULL), now64(now64(toUInt128(19), 15, hex(sipHash128ReferenceKeyed((toUInt64(0), toUInt64(materialize(materialize(0)))), a, b)), NULL + NULL), 'name', 4, 4, toNullable(NULL) + materialize(toNullable(NULL))), mapFromArrays(c, d) FROM table_map__fuzz_0) Received signal Aborted (6)\r\n2024.03.16 20:44:20.566996 [ 10796 ] {} <Fatal> BaseDaemon: \r\n2024.03.16 20:44:20.567100 [ 10796 ] {} <Fatal> BaseDaemon: Stack trace: 0x00007f1fac33d9fc 0x00007f1fac2e9476 0x00007f1fac2cf7f3 0x000055d2948a05ea 0x000055d2948a1d24 0x000055d27eac401a 0x000055d27ed5898a 0x000055d27ed579c9 0x000055d27ed5796e 0x000055d27ed7bf45 0x000055d27ed583ea 0x000055d27ed579c9 0x000055d27ed57a23 0x000055d27ed56de6 0x000055d27ea18111 0x000055d27ed56512 0x000055d27d14f0d8 0x000055d2a53a291d 0x000055d2a53a4848 0x000055d2a53aace6 0x000055d2a94689b2 0x000055d2b164467e 0x000055d29aa2cf41 0x000055d2b0c6e09e 0x000055d2b0cddf77 0x000055d2b0cad0c7 0x000055d2b0ca9364 0x000055d2b0ca8dc8 0x000055d2b0ce99fd 0x000055d294ac6a6b 0x000055d294ad344b 0x00007f1fac33bac3 0x00007f1fac3cd850\r\n2024.03.16 20:44:20.567220 [ 10796 ] {} <Fatal> BaseDaemon: 4. ? @ 0x00007f1fac33d9fc\r\n2024.03.16 20:44:20.567340 [ 10796 ] {} <Fatal> BaseDaemon: 5. ? @ 0x00007f1fac2e9476\r\n2024.03.16 20:44:20.567375 [ 10796 ] {} <Fatal> BaseDaemon: 6. ? @ 0x00007f1fac2cf7f3\r\n2024.03.16 20:44:20.714363 [ 10796 ] {} <Fatal> BaseDaemon: 7. ./build_docker/./src/Common/Exception.cpp:0: DB::abortOnFailedAssertion(String const&) @ 0x000000001f5175ea\r\n2024.03.16 20:44:20.854655 [ 10796 ] {} <Fatal> BaseDaemon: 8.0. inlined from ./build_docker/./src/Common/Exception.cpp:193: DB::Exception::getStackFramePointers() const\r\n2024.03.16 20:44:20.854875 [ 10796 ] {} <Fatal> BaseDaemon: 8. ./build_docker/./src/Common/Exception.cpp:100: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000001f518d24\r\n2024.03.16 20:44:27.781543 [ 10796 ] {} <Fatal> BaseDaemon: 9. DB::Exception::Exception<unsigned long, unsigned long, String>(int, FormatStringHelperImpl<std::type_identity<unsigned long>::type, std::type_identity<unsigned long>::type, std::type_identity<String>::type>, unsigned long&&, unsigned long&&, String&&) @ 0x000000000973b01a\r\n2024.03.16 20:44:34.560309 [ 10796 ] {} <Fatal> BaseDaemon: 10. void DB::TargetSpecific::Default::FunctionAnyHash<DB::SipHash128ReferenceKeyedImpl, true, DB::impl::SipHashKey, DB::impl::SipHashKeyColumns>::executeAny<true>(DB::impl::SipHashKeyColumns const&, DB::IDataType const*, DB::IColumn const*, DB::PODArray<wide::integer<128ul, unsigned int>, 4096ul, Allocator<false, false>, 63ul, 64ul>&) const @ 0x00000000099cf98a\r\n2024.03.16 20:44:41.325184 [ 10796 ] {} <Fatal> BaseDaemon: 11. DB::TargetSpecific::Default::FunctionAnyHash<DB::SipHash128ReferenceKeyedImpl, true, DB::impl::SipHashKey, DB::impl::SipHashKeyColumns>::executeForArgument(DB::impl::SipHashKeyColumns const&, DB::IDataType const*, DB::IColumn const*, DB::PODArray<wide::integer<128ul, unsigned int>, 4096ul, Allocator<false, false>, 63ul, 64ul>&, bool&) const @ 0x00000000099ce9c9\r\n2024.03.16 20:44:48.098423 [ 10796 ] {} <Fatal> BaseDaemon: 12. DB::TargetSpecific::Default::FunctionAnyHash<DB::SipHash128ReferenceKeyedImpl, true, DB::impl::SipHashKey, DB::impl::SipHashKeyColumns>::executeForArgument(DB::impl::SipHashKeyColumns const&, DB::IDataType const*, DB::IColumn const*, DB::PODArray<wide::integer<128ul, unsigned int>, 4096ul, Allocator<false, false>, 63ul, 64ul>&, bool&) const @ 0x00000000099ce96e\r\n2024.03.16 20:44:54.899525 [ 10796 ] {} <Fatal> BaseDaemon: 13. void DB::TargetSpecific::Default::FunctionAnyHash<DB::SipHash128ReferenceKeyedImpl, true, DB::impl::SipHashKey, DB::impl::SipHashKeyColumns>::executeArray<true>(DB::impl::SipHashKeyColumns const&, DB::IDataType const*, DB::IColumn const*, DB::PODArray<wide::integer<128ul, unsigned int>, 4096ul, Allocator<false, false>, 63ul, 64ul>&) const @ 0x00000000099f2f45\r\n2024.03.16 20:45:01.688221 [ 10796 ] {} <Fatal> BaseDaemon: 14. void DB::TargetSpecific::Default::FunctionAnyHash<DB::SipHash128ReferenceKeyedImpl, true, DB::impl::SipHashKey, DB::impl::SipHashKeyColumns>::executeAny<true>(DB::impl::SipHashKeyColumns const&, DB::IDataType const*, DB::IColumn const*, DB::PODArray<wide::integer<128ul, unsigned int>, 4096ul, Allocator<false, false>, 63ul, 64ul>&) const @ 0x00000000099cf3ea\r\n2024.03.16 20:45:08.450577 [ 10796 ] {} <Fatal> BaseDaemon: 15. DB::TargetSpecific::Default::FunctionAnyHash<DB::SipHash128ReferenceKeyedImpl, true, DB::impl::SipHashKey, DB::impl::SipHashKeyColumns>::executeForArgument(DB::impl::SipHashKeyColumns const&, DB::IDataType const*, DB::IColumn const*, DB::PODArray<wide::integer<128ul, unsigned int>, 4096ul, Allocator<false, false>, 63ul, 64ul>&, bool&) const @ 0x00000000099ce9c9\r\n2024.03.16 20:45:15.188602 [ 10796 ] {} <Fatal> BaseDaemon: 16. DB::TargetSpecific::Default::FunctionAnyHash<DB::SipHash128ReferenceKeyedImpl, true, DB::impl::SipHashKey, DB::impl::SipHashKeyColumns>::executeForArgument(DB::impl::SipHashKeyColumns const&, DB::IDataType const*, DB::IColumn const*, DB::PODArray<wide::integer<128ul, unsigned int>, 4096ul, Allocator<false, false>, 63ul, 64ul>&, bool&) const @ 0x00000000099cea23\r\n2024.03.16 20:45:22.048776 [ 10796 ] {} <Fatal> BaseDaemon: 17. DB::TargetSpecific::Default::FunctionAnyHash<DB::SipHash128ReferenceKeyedImpl, true, DB::impl::SipHashKey, DB::impl::SipHashKeyColumns>::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x00000000099cdde6\r\n2024.03.16 20:45:28.845069 [ 10796 ] {} <Fatal> BaseDaemon: 18. DB::ImplementationSelector<DB::IFunction>::selectAndExecute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x000000000968f111\r\n2024.03.16 20:45:35.671845 [ 10796 ] {} <Fatal> BaseDaemon: 19. DB::FunctionAnyHash<DB::SipHash128ReferenceKeyedImpl, true, DB::impl::SipHashKey, DB::impl::SipHashKeyColumns>::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x00000000099cd512\r\n2024.03.16 20:45:42.493329 [ 10796 ] {} <Fatal> BaseDaemon: 20. DB::FunctionToExecutableFunctionAdaptor::executeImpl(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x0000000007dc60d8\r\n2024.03.16 20:45:42.545850 [ 10796 ] {} <Fatal> BaseDaemon: 21. ./build_docker/./src/Functions/IFunction.cpp:0: DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000003001991d\r\n2024.03.16 20:45:42.605696 [ 10796 ] {} <Fatal> BaseDaemon: 22. ./build_docker/./src/Functions/IFunction.cpp:0: DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000003001b848\r\n2024.03.16 20:45:42.671280 [ 10796 ] {} <Fatal> BaseDaemon: 23. ./build_docker/./src/Functions/IFunction.cpp:0: DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x0000000030021ce6\r\n2024.03.16 20:45:42.959675 [ 10796 ] {} <Fatal> BaseDaemon: 24.0. inlined from ./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:124: boost::intrusive_ptr<DB::IColumn const>::operator=(boost::intrusive_ptr<DB::IColumn const>&&)\r\n2024.03.16 20:45:42.959830 [ 10796 ] {} <Fatal> BaseDaemon: 24.1. inlined from ./src/Common/COW.h:136: COW<DB::IColumn>::immutable_ptr<DB::IColumn>::operator=(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&&)\r\n2024.03.16 20:45:42.959897 [ 10796 ] {} <Fatal> BaseDaemon: 24.2. inlined from ./build_docker/./src/Interpreters/ExpressionActions.cpp:616: DB::executeAction(DB::ExpressionActions::Action const&, DB::(anonymous namespace)::ExecutionContext&, bool, bool)\r\n2024.03.16 20:45:42.959957 [ 10796 ] {} <Fatal> BaseDaemon: 24. ./build_docker/./src/Interpreters/ExpressionActions.cpp:746: DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool, bool) const @ 0x00000000340df9b2\r\n2024.03.16 20:45:43.011959 [ 10796 ] {} <Fatal> BaseDaemon: 25. ./build_docker/./src/Processors/Transforms/ExpressionTransform.cpp:0: DB::ExpressionTransform::transform(DB::Chunk&) @ 0x000000003c2bb67e\r\n2024.03.16 20:45:43.126652 [ 10796 ] {} <Fatal> BaseDaemon: 26.0. inlined from ./contrib/llvm-project/libcxx/include/__utility/swap.h:35: std::enable_if<is_move_constructible<COW<DB::IColumn>::immutable_ptr<DB::IColumn>*>::value && is_move_assignable<COW<DB::IColumn>::immutable_ptr<DB::IColumn>*>::value, void>::type std::swap[abi:v15000]<COW<DB::IColumn>::immutable_ptr<DB::IColumn>*>(COW<DB::IColumn>::immutable_ptr<DB::IColumn>*&, COW<DB::IColumn>::immutable_ptr<DB::IColumn>*&)\r\n2024.03.16 20:45:43.126825 [ 10796 ] {} <Fatal> BaseDaemon: 26.1. inlined from ./contrib/llvm-project/libcxx/include/vector:1950: std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>::swap(std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>&)\r\n2024.03.16 20:45:43.126880 [ 10796 ] {} <Fatal> BaseDaemon: 26.2. inlined from ./src/Processors/Chunk.h:64: DB::Chunk::swap(DB::Chunk&)\r\n2024.03.16 20:45:43.126936 [ 10796 ] {} <Fatal> BaseDaemon: 26. ./src/Processors/ISimpleTransform.h:33: DB::ISimpleTransform::transform(DB::Chunk&, DB::Chunk&) @ 0x00000000256a3f41\r\n2024.03.16 20:45:43.194802 [ 10796 ] {} <Fatal> BaseDaemon: 27. ./build_docker/./src/Processors/ISimpleTransform.cpp:99: DB::ISimpleTransform::work() @ 0x000000003b8e509e\r\n2024.03.16 20:45:43.219717 [ 10796 ] {} <Fatal> BaseDaemon: 28.0. inlined from ./contrib/llvm-project/libcxx/include/list:588: std::__list_imp<DB::ExecutingGraph::Edge, std::allocator<DB::ExecutingGraph::Edge>>::__sz[abi:v15000]() const\r\n2024.03.16 20:45:43.219850 [ 10796 ] {} <Fatal> BaseDaemon: 28.1. inlined from ./contrib/llvm-project/libcxx/include/list:616: std::__list_imp<DB::ExecutingGraph::Edge, std::allocator<DB::ExecutingGraph::Edge>>::empty[abi:v15000]() const\r\n2024.03.16 20:45:43.219916 [ 10796 ] {} <Fatal> BaseDaemon: 28.2. inlined from ./contrib/llvm-project/libcxx/include/list:918: std::list<DB::ExecutingGraph::Edge, std::allocator<DB::ExecutingGraph::Edge>>::empty[abi:v15000]() const\r\n2024.03.16 20:45:43.219976 [ 10796 ] {} <Fatal> BaseDaemon: 28.3. inlined from ./build_docker/./src/Processors/Executors/ExecutionThreadContext.cpp:50: DB::executeJob(DB::ExecutingGraph::Node*, DB::ReadProgressCallback*)\r\n2024.03.16 20:45:43.220034 [ 10796 ] {} <Fatal> BaseDaemon: 28. ./build_docker/./src/Processors/Executors/ExecutionThreadContext.cpp:95: DB::ExecutionThreadContext::executeTask() @ 0x000000003b954f77\r\n2024.03.16 20:45:43.347997 [ 10796 ] {} <Fatal> BaseDaemon: 29.0. inlined from ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:273: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*)\r\n2024.03.16 20:45:43.348116 [ 10796 ] {} <Fatal> BaseDaemon: 29. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:239: DB::PipelineExecutor::executeSingleThread(unsigned long) @ 0x000000003b9240c7\r\n2024.03.16 20:45:43.451383 [ 10796 ] {} <Fatal> BaseDaemon: 30. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:410: DB::PipelineExecutor::executeImpl(unsigned long, bool) @ 0x000000003b920364\r\n2024.03.16 20:45:43.568905 [ 10796 ] {} <Fatal> BaseDaemon: 31.0. inlined from ./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:274: std::unique_ptr<DB::ExecutingGraph, std::default_delete<DB::ExecutingGraph>>::operator->[abi:v15000]() const\r\n2024.03.16 20:45:43.569036 [ 10796 ] {} <Fatal> BaseDaemon: 31. ./build_docker/./src/Processors/Executors/PipelineExecutor.cpp:114: DB::PipelineExecutor::execute(unsigned long, bool) @ 0x000000003b91fdc8\r\n2024.03.16 20:45:43.655712 [ 10796 ] {} <Fatal> BaseDaemon: 32.0. inlined from ./build_docker/./src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:0: DB::threadFunction(DB::PullingAsyncPipelineExecutor::Data&, std::shared_ptr<DB::ThreadGroup>, unsigned long, bool)\r\n2024.03.16 20:45:43.655837 [ 10796 ] {} <Fatal> BaseDaemon: 32.1. inlined from ./build_docker/./src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:109: operator()\r\n2024.03.16 20:45:43.655884 [ 10796 ] {} <Fatal> BaseDaemon: 32.2. inlined from ./contrib/llvm-project/libcxx/include/__functional/invoke.h:394: ?\r\n2024.03.16 20:45:43.656029 [ 10796 ] {} <Fatal> BaseDaemon: 32.3. inlined from ./contrib/llvm-project/libcxx/include/tuple:1789: decltype(auto) std::__apply_tuple_impl[abi:v15000]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&, std::__tuple_indices<>)\r\n2024.03.16 20:45:43.656134 [ 10796 ] {} <Fatal> BaseDaemon: 32.4. inlined from ./contrib/llvm-project/libcxx/include/tuple:1798: decltype(auto) std::apply[abi:v15000]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&)\r\n2024.03.16 20:45:43.656216 [ 10796 ] {} <Fatal> BaseDaemon: 32.5. inlined from ./src/Common/ThreadPool.h:223: operator()\r\n2024.03.16 20:45:43.656287 [ 10796 ] {} <Fatal> BaseDaemon: 32.6. inlined from ./contrib/llvm-project/libcxx/include/__functional/invoke.h:394: ?\r\n2024.03.16 20:45:43.656357 [ 10796 ] {} <Fatal> BaseDaemon: 32.7. inlined from ./contrib/llvm-project/libcxx/include/__functional/invoke.h:479: ?\r\n2024.03.16 20:45:43.656425 [ 10796 ] {} <Fatal> BaseDaemon: 32.8. inlined from ./contrib/llvm-project/libcxx/include/__functional/function.h:235: ?\r\n2024.03.16 20:45:43.656483 [ 10796 ] {} <Fatal> BaseDaemon: 32. ./contrib/llvm-project/libcxx/include/__functional/function.h:716: ? @ 0x000000003b9609fd\r\n2024.03.16 20:45:43.740465 [ 10796 ] {} <Fatal> BaseDaemon: 33.0. inlined from ./base/base/../base/wide_integer_impl.h:810: bool wide::integer<128ul, unsigned int>::_impl::operator_eq<wide::integer<128ul, unsigned int>>(wide::integer<128ul, unsigned int> const&, wide::integer<128ul, unsigned int> const&)\r\n2024.03.16 20:45:43.740634 [ 10796 ] {} <Fatal> BaseDaemon: 33.1. inlined from ./base/base/../base/wide_integer_impl.h:1483: bool wide::operator==<128ul, unsigned int, 128ul, unsigned int>(wide::integer<128ul, unsigned int> const&, wide::integer<128ul, unsigned int> const&)\r\n2024.03.16 20:45:43.740732 [ 10796 ] {} <Fatal> BaseDaemon: 33.2. inlined from ./base/base/../base/strong_typedef.h:42: StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag>::operator==(StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag> const&) const\r\n2024.03.16 20:45:43.740797 [ 10796 ] {} <Fatal> BaseDaemon: 33.3. inlined from ./src/Common/OpenTelemetryTraceContext.h:65: DB::OpenTelemetry::Span::isTraceEnabled() const\r\n2024.03.16 20:45:43.740869 [ 10796 ] {} <Fatal> BaseDaemon: 33. ./build_docker/./src/Common/ThreadPool.cpp:457: ThreadPoolImpl<std::thread>::worker(std::__list_iterator<std::thread, void*>) @ 0x000000001f73da6b\r\n2024.03.16 20:45:43.849454 [ 10796 ] {} <Fatal> BaseDaemon: 34.0. inlined from ./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:303: std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>, std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>>>::reset[abi:v15000](std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>*)\r\n2024.03.16 20:45:43.849570 [ 10796 ] {} <Fatal> BaseDaemon: 34.1. inlined from ./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:259: ~unique_ptr\r\n2024.03.16 20:45:43.849632 [ 10796 ] {} <Fatal> BaseDaemon: 34. ./contrib/llvm-project/libcxx/include/thread:297: void* std::__thread_proxy[abi:v15000]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>>(void*) @ 0x000000001f74a44b\r\n2024.03.16 20:45:43.849708 [ 10796 ] {} <Fatal> BaseDaemon: 35. ? @ 0x00007f1fac33bac3\r\n2024.03.16 20:45:43.849749 [ 10796 ] {} <Fatal> BaseDaemon: 36. ? @ 0x00007f1fac3cd850\r\n2024.03.16 20:45:43.849811 [ 10796 ] {} <Fatal> BaseDaemon: Integrity check of the executable skipped because the reference checksum could not be read.\r\n2024.03.16 20:47:06.626607 [ 10796 ] {} <Fatal> BaseDaemon: This ClickHouse version is not official and should be upgraded to the official build.\r\n2024.03.16 20:47:06.627204 [ 10796 ] {} <Fatal> BaseDaemon: Changed settings: receive_timeout = 10., receive_data_timeout_ms = 10000, allow_suspicious_low_cardinality_types = true, log_queries = true, table_function_remote_max_addresses = 200, max_execution_time = 10., max_memory_usage = 10000000000, log_comment = '/workspace/ch/tests/queries/0_stateless/01651_map_functions.sql', send_logs_level = 'fatal', allow_introspection_functions = true, check_query_single_value_result = false, allow_experimental_map_type = true\r\n2024.03.16 20:47:32.135010 [ 161 ] {} <Fatal> Application: Child process was terminated by signal 6.\r\n```\n",
  "hints_text": "@aiven-sal, a security issue in your function.\nThanks for pinging. Do we know how `table_map__fuzz_0` is defined? I have some problems reproducing the issue.\nTable definition\r\n```sql\r\nCREATE TABLE table_map__fuzz_0 (`a` Map(String, String), `b` LowCardinality(String), `c` Array(String), `d` Array(String)) ENGINE = Memory\r\n```\r\n\r\nyou can grep `server.log.zst` to find it\n@aiven-sal, let's fix the security vulnerability in your function.\nHi @alexey-milovidov , I'm sorry for the delay. I probably won't be able to take care of this in the next 2 weeks. But after that I'll make it my priority.",
  "created_at": "2024-05-10T13:32:21Z"
}