You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Code: 33. DB::Exception: Cannot read all marks from file
```sql
2023.07.27 10:54:01.785213 [ 1720 ] {9e777690-69a0-4208-aafc-675961364fbf} <Error> executeQuery: Code: 33. DB::Exception: Cannot read all marks from file skp_idx_regionId_index.cmrk3, marks expected 2 (bytes size 48), marks read 3 (bytes size 72). (CANNOT_READ_ALL_DATA) (version 23.5.4.10) (from 10.244.125.151:44596) (in query: SELECT count() FROM ...), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000e0c3d95 in /usr/bin/clickhouse
1. ? @ 0x00000000146daa67 in /usr/bin/clickhouse
2. DB::MergeTreeMarksLoader::loadMarksImpl() @ 0x00000000146d9f22 in /usr/bin/clickhouse
3. DB::MergeTreeMarksLoader::loadMarks() @ 0x00000000146d80ea in /usr/bin/clickhouse
4. DB::MergeTreeMarksLoader::getMark(unsigned long, unsigned long) @ 0x00000000146d7dd8 in /usr/bin/clickhouse
5. DB::MergeTreeReaderStream::init() @ 0x00000000146ff601 in /usr/bin/clickhouse
6. DB::MergeTreeIndexReader::MergeTreeIndexReader(std::shared_ptr<DB::IMergeTreeIndex const>, std::shared_ptr<DB::IMergeTreeDataPart const>, unsigned long, DB::MarkRanges const&, DB::MarkCache*, DB::UncompressedCache*, DB::MergeTreeReaderSettings) @ 0x0000000014684e6e in /usr/bin/clickhouse
7. DB::MergeTreeDataSelectExecutor::filterMarksUsingIndex(std::shared_ptr<DB::IMergeTreeIndex const>, std::shared_ptr<DB::IMergeTreeIndexCondition>, std::shared_ptr<DB::IMergeTreeDataPart const>, DB::MarkRanges const&, DB::Settings const&, DB::MergeTreeReaderSettings const&, unsigned long&, DB::MarkCache*, DB::UncompressedCache*, Poco::Logger*) @ 0x000000001466a088 in /usr/bin/clickhouse
8. ? @ 0x0000000014666f9a in /usr/bin/clickhouse
9. ? @ 0x0000000014671bfb in /usr/bin/clickhouse
10. ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::worker(std::__list_iterator<ThreadFromGlobalPoolImpl<false>, void*>) @ 0x000000000e19be23 in /usr/bin/clickhouse
11. void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000e19e615 in /usr/bin/clickhouse
12. ThreadPoolImpl<std::thread>::worker(std::__list_iterator<std::thread, void*>) @ 0x000000000e197cb4 in /usr/bin/clickhouse
13. ? @ 0x000000000e19d4a1 in /usr/bin/clickhouse
14. ? @ 0x00007fe65ed00609 in ?
15. clone @ 0x00007fe65ec25133 in ?
```


<details>
<summary>addr2line</summary>

```
# llvm-addr2line-16 -pafiCse ./clickhouse 0x000000000e0c3d95  0x00000000146daa67  0x00000000146d9f22  0x00000000146d80ea  0x00000000146d7dd8 0x00000000146ff601  0x0000000014684e6e 0x000000001466a088  0x0000000014666f9a
0xe0c3d95: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) at Exception.cpp:92
0x146daa67: std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__is_long[abi:v15000]() const at string:1499
 (inlined by) std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::~basic_string() at string:2333
 (inlined by) DB::Exception::MessageMasked::~MessageMasked() at Exception.h:42
 (inlined by) DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&&, int, bool) at Exception.h:54
 (inlined by) DB::Exception::Exception<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&, unsigned long&, unsigned long&, unsigned long&, unsigned long>(int, FormatStringHelperImpl<std::__1::type_identity<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&>::type, std::__1::type_identity<unsigned long&>::type, std::__1::type_identity<unsigned long&>::type, std::__1::type_identity<unsigned long&>::type, std::__1::type_identity<unsigned long>::type>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&, unsigned long&, unsigned long&, unsigned long&, unsigned long&&) at Exception.h:81
0x146d9f22: DB::MergeTreeMarksLoader::loadMarksImpl() at MergeTreeMarksLoader.cpp:163
0x146d80ea: DB::MergeTreeMarksLoader::loadMarks() at MergeTreeMarksLoader.cpp:200
0x146d7dd8: std::__1::enable_if<is_move_constructible<DB::MarksInCompressedFile*>::value && is_move_assignable<DB::MarksInCompressedFile*>::value, void>::type std::__1::swap[abi:v15000]<DB::MarksInCompressedFile*>(DB::MarksInCompressedFile*&, DB::MarksInCompressedFile*&) at swap.h:37
 (inlined by) std::__1::shared_ptr<DB::MarksInCompressedFile>::swap[abi:v15000](std::__1::shared_ptr<DB::MarksInCompressedFile>&) at shared_ptr.h:761
 (inlined by) std::__1::shared_ptr<DB::MarksInCompressedFile>::operator=[abi:v15000](std::__1::shared_ptr<DB::MarksInCompressedFile>&&) at shared_ptr.h:723
 (inlined by) DB::MergeTreeMarksLoader::getMark(unsigned long, unsigned long) at MergeTreeMarksLoader.cpp:80
0x146ff601: DB::MergeTreeReaderStream::init() at MergeTreeReaderStream.cpp:72
0x14684e6e: DB::MergeTreeReaderStream::adjustRightMark(unsigned long) at MergeTreeReaderStream.cpp:276
 (inlined by) DB::MergeTreeIndexReader::MergeTreeIndexReader(std::__1::shared_ptr<DB::IMergeTreeIndex const>, std::__1::shared_ptr<DB::IMergeTreeDataPart const>, unsigned long, DB::MarkRanges const&, DB::MarkCache*, DB::UncompressedCache*, DB::MergeTreeReaderSettings) at MergeTreeIndexReader.cpp:61
0x1466a088: std::__1::__deque_base<DB::MarkRange, std::__1::allocator<DB::MarkRange>>::__deque_base() at deque:1188
 (inlined by) std::__1::deque<DB::MarkRange, std::__1::allocator<DB::MarkRange>>::deque[abi:v15000]() at deque:1313
 (inlined by) DB::MarkRanges::MarkRanges() at MarkRange.h:34
 (inlined by) DB::MergeTreeDataSelectExecutor::filterMarksUsingIndex(std::__1::shared_ptr<DB::IMergeTreeIndex const>, std::__1::shared_ptr<DB::IMergeTreeIndexCondition>, std::__1::shared_ptr<DB::IMergeTreeDataPart const>, DB::MarkRanges const&, DB::Settings const&, DB::MergeTreeReaderSettings const&, unsigned long&, DB::MarkCache*, DB::UncompressedCache*, Poco::Logger*) at MergeTreeDataSelectExecutor.cpp:1694
0x14666f9a: DB::MergeTreeDataSelectExecutor::filterPartsByPrimaryKeyAndSkipIndexes(std::__1::vector<std::__1::shared_ptr<DB::IMergeTreeDataPart const>, std::__1::allocator<std::__1::shared_ptr<DB::IMergeTreeDataPart const>>>&&, std::__1::vector<std::__1::shared_ptr<DB::AlterConversions const>, std::__1::allocator<std::__1::shared_ptr<DB::AlterConversions const>>>&&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const>, DB::SelectQueryInfo const&, std::__1::shared_ptr<DB::Context const> const&, DB::KeyCondition const&, DB::MergeTreeReaderSettings const&, Poco::Logger*, unsigned long, std::__1::vector<DB::ReadFromMergeTree::IndexStat, std::__1::allocator<DB::ReadFromMergeTree::IndexStat>>&, bool)::$_1::operator()(unsigned long) const at MergeTreeDataSelectExecutor.cpp:1071

```

</details>
DB::Exception: Too many marks in file skip_idx_sindex_visitorid.cmrk3, marks expected 3 (bytes size 72)
Hi,

I'm try to use the latest version 23.7.4.5 (official build) and skip index, but after I insert data and try to query via skipe index, I got this error, can you please tell me why?

I get started with clickhouse but stuck at first step here

`error: HttpCode:500 ;  ;Code: 33. DB::Exception: Too many marks in file skp_idx_sindex_visitorid.cmrk3, marks expected 3 (bytes size 72). (CANNOT_READ_ALL_DATA) (version 23.7.4.5 (official build))`

Thank you very much!
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
