{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 36345,
  "instance_id": "ClickHouse__ClickHouse-36345",
  "issue_numbers": [
    "36336"
  ],
  "base_commit": "89deaf0af19333c5883c53e4c69d49120ad38dd7",
  "patch": "diff --git a/src/Client/ClientBase.cpp b/src/Client/ClientBase.cpp\nindex 929f0a48e2be..028e4a6f16e8 100644\n--- a/src/Client/ClientBase.cpp\n+++ b/src/Client/ClientBase.cpp\n@@ -1055,7 +1055,13 @@ void ClientBase::processInsertQuery(const String & query_to_execute, ASTPtr pars\n     /// Process the query that requires transferring data blocks to the server.\n     const auto parsed_insert_query = parsed_query->as<ASTInsertQuery &>();\n     if ((!parsed_insert_query.data && !parsed_insert_query.infile) && (is_interactive || (!stdin_is_a_tty && std_in.eof())))\n-        throw Exception(\"No data to insert\", ErrorCodes::NO_DATA_TO_INSERT);\n+    {\n+        const auto & settings = global_context->getSettingsRef();\n+        if (settings.throw_if_no_data_to_insert)\n+            throw Exception(\"No data to insert\", ErrorCodes::NO_DATA_TO_INSERT);\n+        else\n+            return;\n+    }\n \n     connection->sendQuery(\n         connection_parameters.timeouts,\ndiff --git a/src/Core/Settings.h b/src/Core/Settings.h\nindex aa78456702ce..350be1295cb2 100644\n--- a/src/Core/Settings.h\n+++ b/src/Core/Settings.h\n@@ -582,6 +582,7 @@ class IColumn;\n     M(Bool, allow_experimental_object_type, false, \"Allow Object and JSON data types\", 0) \\\n     M(String, insert_deduplication_token, \"\", \"If not empty, used for duplicate detection instead of data digest\", 0) \\\n     M(Bool, throw_on_unsupported_query_inside_transaction, true, \"Throw exception if unsupported query is used inside transaction\", 0) \\\n+    M(Bool, throw_if_no_data_to_insert, true, \"Enables or disables empty INSERTs, disable by default\", 0) \\\n // End of COMMON_SETTINGS\n // Please add settings related to formats into the FORMAT_FACTORY_SETTINGS and move obsolete settings to OBSOLETE_SETTINGS.\n \ndiff --git a/src/Parsers/ParserInsertQuery.cpp b/src/Parsers/ParserInsertQuery.cpp\nindex b0ca361155fa..7f8a8d59fd05 100644\n--- a/src/Parsers/ParserInsertQuery.cpp\n+++ b/src/Parsers/ParserInsertQuery.cpp\n@@ -41,6 +41,7 @@ bool ParserInsertQuery::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)\n     ParserKeyword s_with(\"WITH\");\n     ParserToken s_lparen(TokenType::OpeningRoundBracket);\n     ParserToken s_rparen(TokenType::ClosingRoundBracket);\n+    ParserToken s_semicolon(TokenType::Semicolon);\n     ParserIdentifier name_p(true);\n     ParserList columns_p(std::make_unique<ParserInsertElement>(), std::make_unique<ParserToken>(TokenType::Comma), false);\n     ParserFunction table_function_p{false};\n@@ -146,8 +147,10 @@ bool ParserInsertQuery::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)\n     /// After FROM INFILE we expect FORMAT, SELECT, WITH or nothing.\n     if (!infile && s_values.ignore(pos, expected))\n     {\n-        /// If VALUES is defined in query, everything except setting will be parsed as data\n-        data = pos->begin;\n+        /// If VALUES is defined in query, everything except setting will be parsed as data,\n+        /// and if values followed by semicolon, the data should be null.\n+        if (!s_semicolon.checkWithoutMoving(pos, expected))\n+            data = pos->begin;\n         format_str = \"Values\";\n     }\n     else if (s_format.ignore(pos, expected))\ndiff --git a/src/Server/GRPCServer.cpp b/src/Server/GRPCServer.cpp\nindex 7578f8afc1de..68d73a6be2aa 100644\n--- a/src/Server/GRPCServer.cpp\n+++ b/src/Server/GRPCServer.cpp\n@@ -956,7 +956,13 @@ namespace\n             if (!insert_query)\n                 throw Exception(\"Query requires data to insert, but it is not an INSERT query\", ErrorCodes::NO_DATA_TO_INSERT);\n             else\n-                throw Exception(\"No data to insert\", ErrorCodes::NO_DATA_TO_INSERT);\n+            {\n+                const auto & settings = query_context->getSettingsRef();\n+                if (settings.throw_if_no_data_to_insert)\n+                    throw Exception(\"No data to insert\", ErrorCodes::NO_DATA_TO_INSERT);\n+                else\n+                    return;\n+            }\n         }\n \n         /// This is significant, because parallel parsing may be used.\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02267_insert_empty_data.reference b/tests/queries/0_stateless/02267_insert_empty_data.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/02267_insert_empty_data.sql b/tests/queries/0_stateless/02267_insert_empty_data.sql\nnew file mode 100644\nindex 000000000000..9c92fc2a3f73\n--- /dev/null\n+++ b/tests/queries/0_stateless/02267_insert_empty_data.sql\n@@ -0,0 +1,11 @@\n+DROP TABLE IF EXISTS t;\n+\n+CREATE TABLE t (n UInt32) ENGINE=Memory;\n+\n+INSERT INTO t VALUES; -- { clientError 108 }\n+\n+set throw_if_no_data_to_insert = 0;\n+\n+INSERT INTO t VALUES;\n+\n+DROP TABLE t;\n",
  "problem_statement": "A setting `throw_if_no_data_to_insert`\n**Use case**\r\n\r\nClickHouse already throws exception if the data for INSERT is empty:\r\n\r\n```\r\nCode: 108. DB::Exception: No data to insert\r\n```\r\n\r\nLet's introduce a setting, enabled by default, to control this behavior.\r\nThe user will be able to disable it to allow empty INSERTs.\r\n\r\nThis is useful in some batch scripts.\n",
  "hints_text": "",
  "created_at": "2022-04-17T05:43:35Z"
}