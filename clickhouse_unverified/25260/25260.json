{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 25260,
  "instance_id": "ClickHouse__ClickHouse-25260",
  "issue_numbers": [
    "25259"
  ],
  "base_commit": "39515083e46e35c63eb230ccb0dcfbf611a2a500",
  "patch": "diff --git a/src/AggregateFunctions/AggregateFunctionTopK.h b/src/AggregateFunctions/AggregateFunctionTopK.h\nindex 30d69b8ca7b6..1988b1f8b2ad 100644\n--- a/src/AggregateFunctions/AggregateFunctionTopK.h\n+++ b/src/AggregateFunctions/AggregateFunctionTopK.h\n@@ -118,7 +118,8 @@ struct AggregateFunctionTopKGenericData\n  *  For such columns topK() can be implemented more efficiently (especially for small numeric arrays).\n  */\n template <bool is_plain_column, bool is_weighted>\n-class AggregateFunctionTopKGeneric : public IAggregateFunctionDataHelper<AggregateFunctionTopKGenericData, AggregateFunctionTopKGeneric<is_plain_column, is_weighted>>\n+class AggregateFunctionTopKGeneric\n+    : public IAggregateFunctionDataHelper<AggregateFunctionTopKGenericData, AggregateFunctionTopKGeneric<is_plain_column, is_weighted>>\n {\n private:\n     using State = AggregateFunctionTopKGenericData;\ndiff --git a/src/Common/SpaceSaving.h b/src/Common/SpaceSaving.h\nindex b7353d803b78..d1e6d079d17f 100644\n--- a/src/Common/SpaceSaving.h\n+++ b/src/Common/SpaceSaving.h\n@@ -5,6 +5,7 @@\n \n #include <boost/range/adaptor/reversed.hpp>\n \n+#include <Common/AllocatorWithMemoryTracking.h>\n #include <Common/ArenaWithFreeLists.h>\n #include <Common/HashTable/Hash.h>\n #include <Common/HashTable/HashMap.h>\n@@ -382,8 +383,8 @@ class SpaceSaving\n     using CounterMap = HashMapWithStackMemory<TKey, Counter *, Hash, 4>;\n \n     CounterMap counter_map;\n-    std::vector<Counter *> counter_list;\n-    std::vector<UInt64> alpha_map;\n+    std::vector<Counter *, AllocatorWithMemoryTracking<Counter *>> counter_list;\n+    std::vector<UInt64, AllocatorWithMemoryTracking<UInt64>> alpha_map;\n     SpaceSavingArena<TKey> arena;\n     size_t m_capacity;\n     size_t removed_keys = 0;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01910_memory_tracking_topk.reference b/tests/queries/0_stateless/01910_memory_tracking_topk.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/01910_memory_tracking_topk.sql b/tests/queries/0_stateless/01910_memory_tracking_topk.sql\nnew file mode 100644\nindex 000000000000..e6309c1eeb85\n--- /dev/null\n+++ b/tests/queries/0_stateless/01910_memory_tracking_topk.sql\n@@ -0,0 +1,4 @@\n+-- Memory limit must correctly apply, triggering an exception:\n+\n+SET max_memory_usage = '100M';\n+SELECT length(topK(5592405)(tuple(number))) FROM numbers(10) GROUP BY number; -- { serverError 241 }\n",
  "problem_statement": "The query with topK leads to OOM\n`SELECT toDateTime(topKWeighted(-9223372036854775807, '-0.02')(NULL), '104857.5') FROM remote('127.0\\00\\0{2,3}127.0\\00\\0{2,3}127.0\\00\\0{2,3}127.0\\00\\0{2,3}127.0\\00\\0{2,3}127.0\\00\\0{2,3}127.0\\00\\0{2,3}127.0\\00\\0{2,3}', system.one) ORDER BY length(topK(1048577)(tuple(NULL))) ASC, '0' ASC NULLS LAST`\n",
  "hints_text": "`SELECT length(topK(5592405)(tuple(number))) FROM numbers(100) GROUP BY number`",
  "created_at": "2021-06-14T02:27:01Z"
}