{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 21303,
  "instance_id": "ClickHouse__ClickHouse-21303",
  "issue_numbers": [
    "21164"
  ],
  "base_commit": "15b3f379a56c8f648cff38695ec2aa617c13fe58",
  "patch": "diff --git a/src/Interpreters/InterpreterAlterQuery.cpp b/src/Interpreters/InterpreterAlterQuery.cpp\nindex 6294b31cc8cd..37eaecf9a900 100644\n--- a/src/Interpreters/InterpreterAlterQuery.cpp\n+++ b/src/Interpreters/InterpreterAlterQuery.cpp\n@@ -137,7 +137,7 @@ BlockIO InterpreterAlterQuery::execute()\n         StorageInMemoryMetadata metadata = table->getInMemoryMetadata();\n         alter_commands.validate(metadata, context);\n         alter_commands.prepare(metadata);\n-        table->checkAlterIsPossible(alter_commands, context.getSettingsRef());\n+        table->checkAlterIsPossible(alter_commands, context);\n         table->alter(alter_commands, context, alter_lock);\n     }\n \ndiff --git a/src/Interpreters/InterpreterSelectQuery.h b/src/Interpreters/InterpreterSelectQuery.h\nindex 1fff316e1d4d..2c563c0f9175 100644\n--- a/src/Interpreters/InterpreterSelectQuery.h\n+++ b/src/Interpreters/InterpreterSelectQuery.h\n@@ -89,6 +89,8 @@ class InterpreterSelectQuery : public IInterpreterUnionOrSelectQuery\n \n     static void addEmptySourceToQueryPlan(QueryPlan & query_plan, const Block & source_header, const SelectQueryInfo & query_info);\n \n+    Names getRequiredColumns() { return required_columns; }\n+\n private:\n     InterpreterSelectQuery(\n         const ASTPtr & query_ptr_,\ndiff --git a/src/Storages/IStorage.cpp b/src/Storages/IStorage.cpp\nindex 2400b0587ba6..5129d03cdee2 100644\n--- a/src/Storages/IStorage.cpp\n+++ b/src/Storages/IStorage.cpp\n@@ -134,7 +134,7 @@ void IStorage::alter(const AlterCommands & params, const Context & context, Tabl\n }\n \n \n-void IStorage::checkAlterIsPossible(const AlterCommands & commands, const Settings & /* settings */) const\n+void IStorage::checkAlterIsPossible(const AlterCommands & commands, const Context & /* context */) const\n {\n     for (const auto & command : commands)\n     {\n@@ -182,6 +182,24 @@ Names IStorage::getAllRegisteredNames() const\n     return result;\n }\n \n+NameDependencies IStorage::getDependentViewsByColumn(const Context & context) const\n+{\n+    NameDependencies name_deps;\n+    auto dependencies = DatabaseCatalog::instance().getDependencies(storage_id);\n+    for (const auto & depend_id : dependencies)\n+    {\n+        auto depend_table = DatabaseCatalog::instance().getTable(depend_id, context);\n+        if (depend_table->getInMemoryMetadataPtr()->select.inner_query)\n+        {\n+            const auto & select_query = depend_table->getInMemoryMetadataPtr()->select.inner_query;\n+            auto required_columns = InterpreterSelectQuery(select_query, context, SelectQueryOptions{}.noModify()).getRequiredColumns();\n+            for (const auto & col_name : required_columns)\n+                name_deps[col_name].push_back(depend_id.table_name);\n+        }\n+    }\n+    return name_deps;\n+}\n+\n std::string PrewhereDAGInfo::dump() const\n {\n     WriteBufferFromOwnString ss;\ndiff --git a/src/Storages/IStorage.h b/src/Storages/IStorage.h\nindex 1a27dbd637f0..4dfd2ca50f38 100644\n--- a/src/Storages/IStorage.h\n+++ b/src/Storages/IStorage.h\n@@ -57,6 +57,8 @@ struct StreamLocalLimits;\n class EnabledQuota;\n struct SelectQueryInfo;\n \n+using NameDependencies = std::unordered_map<String, std::vector<String>>;\n+\n struct ColumnSize\n {\n     size_t marks = 0;\n@@ -173,8 +175,10 @@ class IStorage : public std::enable_shared_from_this<IStorage>, public TypePromo\n     virtual NamesAndTypesList getVirtuals() const;\n \n     Names getAllRegisteredNames() const override;\n-protected:\n \n+    NameDependencies getDependentViewsByColumn(const Context & context) const;\n+\n+protected:\n     /// Returns whether the column is virtual - by default all columns are real.\n     /// Initially reserved virtual column name may be shadowed by real column.\n     bool isVirtualColumn(const String & column_name, const StorageMetadataPtr & metadata_snapshot) const;\n@@ -362,7 +366,7 @@ class IStorage : public std::enable_shared_from_this<IStorage>, public TypePromo\n     /** Checks that alter commands can be applied to storage. For example, columns can be modified,\n       * or primary key can be changes, etc.\n       */\n-    virtual void checkAlterIsPossible(const AlterCommands & commands, const Settings & settings) const;\n+    virtual void checkAlterIsPossible(const AlterCommands & commands, const Context & context) const;\n \n     /**\n       * Checks that mutation commands can be applied to storage.\ndiff --git a/src/Storages/MergeTree/MergeTreeData.cpp b/src/Storages/MergeTree/MergeTreeData.cpp\nindex 2d841b98c599..292cd36e6962 100644\n--- a/src/Storages/MergeTree/MergeTreeData.cpp\n+++ b/src/Storages/MergeTree/MergeTreeData.cpp\n@@ -4,12 +4,11 @@\n #include <DataTypes/DataTypeDate.h>\n #include <DataTypes/DataTypeDateTime.h>\n #include <DataTypes/DataTypeEnum.h>\n-#include <DataTypes/DataTypeUUID.h>\n-#include <DataTypes/DataTypeNullable.h>\n #include <DataTypes/DataTypeLowCardinality.h>\n+#include <DataTypes/DataTypeNullable.h>\n+#include <DataTypes/DataTypeUUID.h>\n #include <DataTypes/NestedUtils.h>\n #include <Formats/FormatFactory.h>\n-#include <Processors/Formats/InputStreamFromInputFormat.h>\n #include <Functions/FunctionFactory.h>\n #include <Functions/IFunction.h>\n #include <IO/ConcatReadBuffer.h>\n@@ -17,10 +16,11 @@\n #include <IO/Operators.h>\n #include <IO/ReadBufferFromMemory.h>\n #include <IO/WriteBufferFromString.h>\n+#include <Interpreters/Context.h>\n #include <Interpreters/ExpressionAnalyzer.h>\n+#include <Interpreters/InterpreterSelectQuery.h>\n #include <Interpreters/PartLog.h>\n #include <Interpreters/TreeRewriter.h>\n-#include <Interpreters/Context.h>\n #include <Interpreters/inplaceBlockConversions.h>\n #include <Parsers/ASTFunction.h>\n #include <Parsers/ASTLiteral.h>\n@@ -30,10 +30,11 @@\n #include <Parsers/ExpressionListParsers.h>\n #include <Parsers/parseQuery.h>\n #include <Parsers/queryToString.h>\n+#include <Processors/Formats/InputStreamFromInputFormat.h>\n #include <Storages/AlterCommands.h>\n #include <Storages/MergeTree/MergeTreeData.h>\n-#include <Storages/MergeTree/MergeTreeDataPartInMemory.h>\n #include <Storages/MergeTree/MergeTreeDataPartCompact.h>\n+#include <Storages/MergeTree/MergeTreeDataPartInMemory.h>\n #include <Storages/MergeTree/MergeTreeDataPartWide.h>\n #include <Storages/MergeTree/MergeTreeSequentialSource.h>\n #include <Storages/MergeTree/MergedBlockOutputStream.h>\n@@ -1407,12 +1408,14 @@ void checkVersionColumnTypesConversion(const IDataType * old_type, const IDataTy\n \n }\n \n-void MergeTreeData::checkAlterIsPossible(const AlterCommands & commands, const Settings & settings) const\n+void MergeTreeData::checkAlterIsPossible(const AlterCommands & commands, const Context & context) const\n {\n     /// Check that needed transformations can be applied to the list of columns without considering type conversions.\n     StorageInMemoryMetadata new_metadata = getInMemoryMetadata();\n     StorageInMemoryMetadata old_metadata = getInMemoryMetadata();\n \n+    const auto & settings = context.getSettingsRef();\n+\n     if (!settings.allow_non_metadata_alters)\n     {\n \n@@ -1484,6 +1487,7 @@ void MergeTreeData::checkAlterIsPossible(const AlterCommands & commands, const S\n         old_types.emplace(column.name, column.type.get());\n \n     NamesAndTypesList columns_to_check_conversion;\n+    auto name_deps = getDependentViewsByColumn(context);\n     for (const AlterCommand & command : commands)\n     {\n         /// Just validate partition expression\n@@ -1563,6 +1567,16 @@ void MergeTreeData::checkAlterIsPossible(const AlterCommands & commands, const S\n                     \"Trying to ALTER DROP key \" + backQuoteIfNeed(command.column_name) + \" column which is a part of key expression\",\n                     ErrorCodes::ALTER_OF_COLUMN_IS_FORBIDDEN);\n             }\n+\n+            const auto & deps_mv = name_deps[command.column_name];\n+            if (!deps_mv.empty())\n+            {\n+                throw Exception(\n+                    \"Trying to ALTER DROP column \" + backQuoteIfNeed(command.column_name) + \" which is referenced by materialized view \"\n+                        + toString(deps_mv),\n+                    ErrorCodes::ALTER_OF_COLUMN_IS_FORBIDDEN);\n+            }\n+\n             dropped_columns.emplace(command.column_name);\n         }\n         else if (command.isRequireMutationStage(getInMemoryMetadata()))\ndiff --git a/src/Storages/MergeTree/MergeTreeData.h b/src/Storages/MergeTree/MergeTreeData.h\nindex f03f3f1dd8c2..70c78af7bdae 100644\n--- a/src/Storages/MergeTree/MergeTreeData.h\n+++ b/src/Storages/MergeTree/MergeTreeData.h\n@@ -517,7 +517,7 @@ class MergeTreeData : public IStorage\n     /// - all type conversions can be done.\n     /// - columns corresponding to primary key, indices, sign, sampling expression and date are not affected.\n     /// If something is wrong, throws an exception.\n-    void checkAlterIsPossible(const AlterCommands & commands, const Settings & settings) const override;\n+    void checkAlterIsPossible(const AlterCommands & commands, const Context & context) const override;\n \n     /// Checks if the Mutation can be performed.\n     /// (currently no additional checks: always ok)\ndiff --git a/src/Storages/StorageBuffer.cpp b/src/Storages/StorageBuffer.cpp\nindex e28d5f4d6d1d..e99f26c1a309 100644\n--- a/src/Storages/StorageBuffer.cpp\n+++ b/src/Storages/StorageBuffer.cpp\n@@ -58,6 +58,7 @@ namespace ErrorCodes\n     extern const int LOGICAL_ERROR;\n     extern const int INFINITE_LOOP;\n     extern const int NUMBER_OF_ARGUMENTS_DOESNT_MATCH;\n+    extern const int ALTER_OF_COLUMN_IS_FORBIDDEN;\n }\n \n \n@@ -910,8 +911,9 @@ void StorageBuffer::reschedule()\n     flush_handle->scheduleAfter(std::min(min, max) * 1000);\n }\n \n-void StorageBuffer::checkAlterIsPossible(const AlterCommands & commands, const Settings & /* settings */) const\n+void StorageBuffer::checkAlterIsPossible(const AlterCommands & commands, const Context & context) const\n {\n+    auto name_deps = getDependentViewsByColumn(context);\n     for (const auto & command : commands)\n     {\n         if (command.type != AlterCommand::Type::ADD_COLUMN && command.type != AlterCommand::Type::MODIFY_COLUMN\n@@ -919,6 +921,17 @@ void StorageBuffer::checkAlterIsPossible(const AlterCommands & commands, const S\n             throw Exception(\n                 \"Alter of type '\" + alterTypeToString(command.type) + \"' is not supported by storage \" + getName(),\n                 ErrorCodes::NOT_IMPLEMENTED);\n+        if (command.type == AlterCommand::Type::DROP_COLUMN)\n+        {\n+            const auto & deps_mv = name_deps[command.column_name];\n+            if (!deps_mv.empty())\n+            {\n+                throw Exception(\n+                    \"Trying to ALTER DROP column \" + backQuoteIfNeed(command.column_name) + \" which is referenced by materialized view \"\n+                        + toString(deps_mv),\n+                    ErrorCodes::ALTER_OF_COLUMN_IS_FORBIDDEN);\n+            }\n+        }\n     }\n }\n \n@@ -955,7 +968,7 @@ std::optional<UInt64> StorageBuffer::totalBytes(const Settings & /*settings*/) c\n void StorageBuffer::alter(const AlterCommands & params, const Context & context, TableLockHolder &)\n {\n     auto table_id = getStorageID();\n-    checkAlterIsPossible(params, context.getSettingsRef());\n+    checkAlterIsPossible(params, context);\n     auto metadata_snapshot = getInMemoryMetadataPtr();\n \n     /// Flush all buffers to storages, so that no non-empty blocks of the old\ndiff --git a/src/Storages/StorageBuffer.h b/src/Storages/StorageBuffer.h\nindex 46907ca196bd..f6904ddb0e47 100644\n--- a/src/Storages/StorageBuffer.h\n+++ b/src/Storages/StorageBuffer.h\n@@ -99,7 +99,7 @@ friend class BufferBlockOutputStream;\n \n     bool mayBenefitFromIndexForIn(const ASTPtr & left_in_operand, const Context & query_context, const StorageMetadataPtr & metadata_snapshot) const override;\n \n-    void checkAlterIsPossible(const AlterCommands & commands, const Settings & /* settings */) const override;\n+    void checkAlterIsPossible(const AlterCommands & commands, const Context & context) const override;\n \n     /// The structure of the subordinate table is not checked and does not change.\n     void alter(const AlterCommands & params, const Context & context, TableLockHolder & table_lock_holder) override;\ndiff --git a/src/Storages/StorageDistributed.cpp b/src/Storages/StorageDistributed.cpp\nindex c08dc38fa2d9..ad904994e915 100644\n--- a/src/Storages/StorageDistributed.cpp\n+++ b/src/Storages/StorageDistributed.cpp\n@@ -84,6 +84,7 @@ namespace ErrorCodes\n     extern const int TOO_MANY_ROWS;\n     extern const int UNABLE_TO_SKIP_UNUSED_SHARDS;\n     extern const int INVALID_SHARD_ID;\n+    extern const int ALTER_OF_COLUMN_IS_FORBIDDEN;\n }\n \n namespace ActionLocks\n@@ -577,8 +578,9 @@ BlockOutputStreamPtr StorageDistributed::write(const ASTPtr &, const StorageMeta\n }\n \n \n-void StorageDistributed::checkAlterIsPossible(const AlterCommands & commands, const Settings & /* settings */) const\n+void StorageDistributed::checkAlterIsPossible(const AlterCommands & commands, const Context & context) const\n {\n+    auto name_deps = getDependentViewsByColumn(context);\n     for (const auto & command : commands)\n     {\n         if (command.type != AlterCommand::Type::ADD_COLUMN\n@@ -589,6 +591,17 @@ void StorageDistributed::checkAlterIsPossible(const AlterCommands & commands, co\n \n             throw Exception(\"Alter of type '\" + alterTypeToString(command.type) + \"' is not supported by storage \" + getName(),\n                 ErrorCodes::NOT_IMPLEMENTED);\n+        if (command.type == AlterCommand::DROP_COLUMN)\n+        {\n+            const auto & deps_mv = name_deps[command.column_name];\n+            if (!deps_mv.empty())\n+            {\n+                throw Exception(\n+                    \"Trying to ALTER DROP column \" + backQuoteIfNeed(command.column_name) + \" which is referenced by materialized view \"\n+                        + toString(deps_mv),\n+                    ErrorCodes::ALTER_OF_COLUMN_IS_FORBIDDEN);\n+            }\n+        }\n     }\n }\n \n@@ -596,7 +609,7 @@ void StorageDistributed::alter(const AlterCommands & params, const Context & con\n {\n     auto table_id = getStorageID();\n \n-    checkAlterIsPossible(params, context.getSettingsRef());\n+    checkAlterIsPossible(params, context);\n     StorageInMemoryMetadata new_metadata = getInMemoryMetadata();\n     params.apply(new_metadata, context);\n     DatabaseCatalog::instance().getDatabase(table_id.database_name)->alterTable(context, table_id, new_metadata);\ndiff --git a/src/Storages/StorageDistributed.h b/src/Storages/StorageDistributed.h\nindex 4d3869f7c5c2..3980ea8244da 100644\n--- a/src/Storages/StorageDistributed.h\n+++ b/src/Storages/StorageDistributed.h\n@@ -85,7 +85,7 @@ class StorageDistributed final : public ext::shared_ptr_helper<StorageDistribute\n     void rename(const String & new_path_to_table_data, const StorageID & new_table_id) override;\n     void renameOnDisk(const String & new_path_to_table_data);\n \n-    void checkAlterIsPossible(const AlterCommands & commands, const Settings & /* settings */) const override;\n+    void checkAlterIsPossible(const AlterCommands & commands, const Context & context) const override;\n \n     /// in the sub-tables, you need to manually add and delete columns\n     /// the structure of the sub-table is not checked\ndiff --git a/src/Storages/StorageMaterializedView.cpp b/src/Storages/StorageMaterializedView.cpp\nindex 2d211c8061b8..4022529edaef 100644\n--- a/src/Storages/StorageMaterializedView.cpp\n+++ b/src/Storages/StorageMaterializedView.cpp\n@@ -296,8 +296,9 @@ void StorageMaterializedView::alter(\n }\n \n \n-void StorageMaterializedView::checkAlterIsPossible(const AlterCommands & commands, const Settings & settings) const\n+void StorageMaterializedView::checkAlterIsPossible(const AlterCommands & commands, const Context & context) const\n {\n+    const auto & settings = context.getSettingsRef();\n     if (settings.allow_experimental_alter_materialized_view_structure)\n     {\n         for (const auto & command : commands)\ndiff --git a/src/Storages/StorageMaterializedView.h b/src/Storages/StorageMaterializedView.h\nindex 4b10cf7a9b5e..ccb56ec9fe54 100644\n--- a/src/Storages/StorageMaterializedView.h\n+++ b/src/Storages/StorageMaterializedView.h\n@@ -54,7 +54,7 @@ class StorageMaterializedView final : public ext::shared_ptr_helper<StorageMater\n \n     void checkMutationIsPossible(const MutationCommands & commands, const Settings & settings) const override;\n \n-    void checkAlterIsPossible(const AlterCommands & commands, const Settings & settings) const override;\n+    void checkAlterIsPossible(const AlterCommands & commands, const Context & context) const override;\n \n     Pipe alterPartition(const StorageMetadataPtr & metadata_snapshot, const PartitionCommands & commands, const Context & context) override;\n \ndiff --git a/src/Storages/StorageMerge.cpp b/src/Storages/StorageMerge.cpp\nindex 91ebfaa3a278..46be91ba258b 100644\n--- a/src/Storages/StorageMerge.cpp\n+++ b/src/Storages/StorageMerge.cpp\n@@ -37,6 +37,7 @@ namespace ErrorCodes\n     extern const int ILLEGAL_PREWHERE;\n     extern const int NUMBER_OF_ARGUMENTS_DOESNT_MATCH;\n     extern const int SAMPLING_NOT_SUPPORTED;\n+    extern const int ALTER_OF_COLUMN_IS_FORBIDDEN;\n }\n \n namespace\n@@ -472,8 +473,9 @@ DatabaseTablesIteratorPtr StorageMerge::getDatabaseIterator(const Context & cont\n }\n \n \n-void StorageMerge::checkAlterIsPossible(const AlterCommands & commands, const Settings & /* settings */) const\n+void StorageMerge::checkAlterIsPossible(const AlterCommands & commands, const Context & context) const\n {\n+    auto name_deps = getDependentViewsByColumn(context);\n     for (const auto & command : commands)\n     {\n         if (command.type != AlterCommand::Type::ADD_COLUMN && command.type != AlterCommand::Type::MODIFY_COLUMN\n@@ -481,6 +483,17 @@ void StorageMerge::checkAlterIsPossible(const AlterCommands & commands, const Se\n             throw Exception(\n                 \"Alter of type '\" + alterTypeToString(command.type) + \"' is not supported by storage \" + getName(),\n                 ErrorCodes::NOT_IMPLEMENTED);\n+        if (command.type == AlterCommand::Type::DROP_COLUMN)\n+        {\n+            const auto & deps_mv = name_deps[command.column_name];\n+            if (!deps_mv.empty())\n+            {\n+                throw Exception(\n+                    \"Trying to ALTER DROP column \" + backQuoteIfNeed(command.column_name) + \" which is referenced by materialized view \"\n+                        + toString(deps_mv),\n+                    ErrorCodes::ALTER_OF_COLUMN_IS_FORBIDDEN);\n+            }\n+        }\n     }\n }\n \ndiff --git a/src/Storages/StorageMerge.h b/src/Storages/StorageMerge.h\nindex 3ac251fbe521..eaffd34a3796 100644\n--- a/src/Storages/StorageMerge.h\n+++ b/src/Storages/StorageMerge.h\n@@ -38,7 +38,7 @@ class StorageMerge final : public ext::shared_ptr_helper<StorageMerge>, public I\n         size_t max_block_size,\n         unsigned num_streams) override;\n \n-    void checkAlterIsPossible(const AlterCommands & commands, const Settings & /* settings */) const override;\n+    void checkAlterIsPossible(const AlterCommands & commands, const Context & context) const override;\n \n     /// you need to add and remove columns in the sub-tables manually\n     /// the structure of sub-tables is not checked\ndiff --git a/src/Storages/StorageNull.cpp b/src/Storages/StorageNull.cpp\nindex f324d5028347..ed9a7fffc637 100644\n--- a/src/Storages/StorageNull.cpp\n+++ b/src/Storages/StorageNull.cpp\n@@ -16,6 +16,7 @@ namespace ErrorCodes\n {\n     extern const int NOT_IMPLEMENTED;\n     extern const int NUMBER_OF_ARGUMENTS_DOESNT_MATCH;\n+    extern const int ALTER_OF_COLUMN_IS_FORBIDDEN;\n }\n \n \n@@ -35,8 +36,9 @@ void registerStorageNull(StorageFactory & factory)\n     });\n }\n \n-void StorageNull::checkAlterIsPossible(const AlterCommands & commands, const Settings & /* settings */) const\n+void StorageNull::checkAlterIsPossible(const AlterCommands & commands, const Context & context) const\n {\n+    auto name_deps = getDependentViewsByColumn(context);\n     for (const auto & command : commands)\n     {\n         if (command.type != AlterCommand::Type::ADD_COLUMN && command.type != AlterCommand::Type::MODIFY_COLUMN\n@@ -44,6 +46,17 @@ void StorageNull::checkAlterIsPossible(const AlterCommands & commands, const Set\n             throw Exception(\n                 \"Alter of type '\" + alterTypeToString(command.type) + \"' is not supported by storage \" + getName(),\n                 ErrorCodes::NOT_IMPLEMENTED);\n+        if (command.type == AlterCommand::DROP_COLUMN)\n+        {\n+            const auto & deps_mv = name_deps[command.column_name];\n+            if (!deps_mv.empty())\n+            {\n+                throw Exception(\n+                    \"Trying to ALTER DROP column \" + backQuoteIfNeed(command.column_name) + \" which is referenced by materialized view \"\n+                        + toString(deps_mv),\n+                    ErrorCodes::ALTER_OF_COLUMN_IS_FORBIDDEN);\n+            }\n+        }\n     }\n }\n \ndiff --git a/src/Storages/StorageNull.h b/src/Storages/StorageNull.h\nindex 7d3d15f1b0fe..943c056a5889 100644\n--- a/src/Storages/StorageNull.h\n+++ b/src/Storages/StorageNull.h\n@@ -41,7 +41,7 @@ class StorageNull final : public ext::shared_ptr_helper<StorageNull>, public ISt\n         return std::make_shared<NullBlockOutputStream>(metadata_snapshot->getSampleBlock());\n     }\n \n-    void checkAlterIsPossible(const AlterCommands & commands, const Settings & /* settings */) const override;\n+    void checkAlterIsPossible(const AlterCommands & commands, const Context & context) const override;\n \n     void alter(const AlterCommands & params, const Context & context, TableLockHolder & table_lock_holder) override;\n \ndiff --git a/src/Storages/StorageProxy.h b/src/Storages/StorageProxy.h\nindex fed9dd04e765..0349319d8fae 100644\n--- a/src/Storages/StorageProxy.h\n+++ b/src/Storages/StorageProxy.h\n@@ -97,9 +97,9 @@ class StorageProxy : public IStorage\n         IStorage::setInMemoryMetadata(getNested()->getInMemoryMetadata());\n     }\n \n-    void checkAlterIsPossible(const AlterCommands & commands, const Settings & settings) const override\n+    void checkAlterIsPossible(const AlterCommands & commands, const Context & context) const override\n     {\n-        getNested()->checkAlterIsPossible(commands, settings);\n+        getNested()->checkAlterIsPossible(commands, context);\n     }\n \n     Pipe alterPartition(\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01746_forbid_drop_column_referenced_by_mv.reference b/tests/queries/0_stateless/01746_forbid_drop_column_referenced_by_mv.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/01746_forbid_drop_column_referenced_by_mv.sql b/tests/queries/0_stateless/01746_forbid_drop_column_referenced_by_mv.sql\nnew file mode 100644\nindex 000000000000..f084cae7780e\n--- /dev/null\n+++ b/tests/queries/0_stateless/01746_forbid_drop_column_referenced_by_mv.sql\n@@ -0,0 +1,172 @@\n+-- MergeTree\n+DROP TABLE IF EXISTS `01746_merge_tree`;\n+CREATE TABLE `01746_merge_tree`\n+(\n+    `n1` Int8,\n+    `n2` Int8,\n+    `n3` Int8,\n+    `n4` Int8\n+)\n+ENGINE = MergeTree\n+ORDER BY n1;\n+\n+DROP TABLE IF EXISTS `01746_merge_tree_mv`;\n+CREATE MATERIALIZED VIEW `01746_merge_tree_mv`\n+ENGINE = Memory AS\n+SELECT\n+    n2,\n+    n3\n+FROM `01746_merge_tree`;\n+\n+ALTER TABLE `01746_merge_tree`\n+    DROP COLUMN n3;  -- { serverError 524 }\n+\n+ALTER TABLE `01746_merge_tree`\n+    DROP COLUMN n2;  -- { serverError 524 }\n+\n+-- ok\n+ALTER TABLE `01746_merge_tree`\n+    DROP COLUMN n4;\n+\n+DROP TABLE `01746_merge_tree`;\n+DROP TABLE `01746_merge_tree_mv`;\n+\n+-- Null \n+DROP TABLE IF EXISTS `01746_null`;\n+CREATE TABLE `01746_null`\n+(\n+    `n1` Int8,\n+    `n2` Int8,\n+    `n3` Int8\n+)\n+ENGINE = Null;\n+\n+DROP TABLE IF EXISTS `01746_null_mv`;\n+CREATE MATERIALIZED VIEW `01746_null_mv`\n+ENGINE = Memory AS\n+SELECT\n+    n1,\n+    n2\n+FROM `01746_null`;\n+\n+ALTER TABLE `01746_null`\n+    DROP COLUMN n1; -- { serverError 524 }\n+\n+ALTER TABLE `01746_null`\n+    DROP COLUMN n2; -- { serverError 524 }\n+\n+-- ok\n+ALTER TABLE `01746_null`\n+    DROP COLUMN n3;\n+\n+DROP TABLE `01746_null`;\n+DROP TABLE `01746_null_mv`;\n+\n+-- Distributed\n+\n+DROP TABLE IF EXISTS `01746_local`;\n+CREATE TABLE `01746_local`\n+(\n+    `n1` Int8,\n+    `n2` Int8,\n+    `n3` Int8\n+)\n+ENGINE = Memory;\n+\n+DROP TABLE IF EXISTS `01746_dist`;\n+CREATE TABLE `01746_dist` AS `01746_local`\n+ENGINE = Distributed('test_shard_localhost', currentDatabase(), `01746_local`, rand());\n+\n+DROP TABLE IF EXISTS `01746_dist_mv`;\n+CREATE MATERIALIZED VIEW `01746_dist_mv`\n+ENGINE = Memory AS\n+SELECT\n+    n1,\n+    n2\n+FROM `01746_dist`;\n+\n+ALTER TABLE `01746_dist`\n+    DROP COLUMN n1; -- { serverError 524 }\n+\n+ALTER TABLE `01746_dist`\n+    DROP COLUMN n2; -- { serverError 524 }\n+\n+-- ok\n+ALTER TABLE `01746_dist`\n+    DROP COLUMN n3;\n+\n+DROP TABLE `01746_local`;\n+DROP TABLE `01746_dist`;\n+DROP TABLE `01746_dist_mv`;\n+\n+-- Merge\n+DROP TABLE IF EXISTS `01746_merge_t`;\n+CREATE TABLE `01746_merge_t`\n+(\n+    `n1` Int8,\n+    `n2` Int8,\n+    `n3` Int8\n+)\n+ENGINE = Memory;\n+\n+DROP TABLE IF EXISTS `01746_merge`;\n+CREATE TABLE `01746_merge` AS `01746_merge_t`\n+ENGINE = Merge(currentDatabase(), '01746_merge_t');\n+\n+DROP TABLE IF EXISTS `01746_merge_mv`;\n+CREATE MATERIALIZED VIEW `01746_merge_mv`\n+ENGINE = Memory AS\n+SELECT\n+    n1,\n+    n2\n+FROM `01746_merge`;\n+\n+ALTER TABLE `01746_merge`\n+    DROP COLUMN n1; -- { serverError 524 }\n+\n+ALTER TABLE `01746_merge`\n+    DROP COLUMN n2; -- { serverError 524 }\n+\n+-- ok\n+ALTER TABLE `01746_merge`\n+    DROP COLUMN n3;\n+\n+DROP TABLE `01746_merge_t`;\n+DROP TABLE `01746_merge`;\n+DROP TABLE `01746_merge_mv`;\n+\n+-- Buffer\n+DROP TABLE IF EXISTS `01746_buffer_t`;\n+CREATE TABLE `01746_buffer_t`\n+(\n+    `n1` Int8,\n+    `n2` Int8,\n+    `n3` Int8\n+)\n+ENGINE = Memory;\n+\n+DROP TABLE IF EXISTS `01746_buffer`;\n+CREATE TABLE `01746_buffer` AS `01746_buffer_t`\n+ENGINE = Buffer(currentDatabase(), `01746_buffer_t`, 16, 10, 100, 10000, 1000000, 10000000, 100000000);\n+\n+DROP TABLE IF EXISTS `01746_buffer_mv`;\n+CREATE MATERIALIZED VIEW `01746_buffer_mv`\n+ENGINE = Memory AS\n+SELECT\n+    n1,\n+    n2\n+FROM `01746_buffer`;\n+\n+ALTER TABLE `01746_buffer`\n+    DROP COLUMN n1; -- { serverError 524 }\n+\n+ALTER TABLE `01746_buffer`\n+    DROP COLUMN n2; -- { serverError 524 }\n+\n+-- ok\n+ALTER TABLE `01746_buffer`\n+    DROP COLUMN n3;\n+\n+DROP TABLE `01746_buffer_t`;\n+DROP TABLE `01746_buffer`;\n+DROP TABLE `01746_buffer_mv`;\n",
  "problem_statement": "Forbid to drop a column if it's referenced by materialized view.\n\n",
  "hints_text": "",
  "created_at": "2021-02-28T05:26:22Z"
}