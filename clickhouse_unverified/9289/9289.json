{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 9289,
  "instance_id": "ClickHouse__ClickHouse-9289",
  "issue_numbers": [
    "9134"
  ],
  "base_commit": "d93e7e5ccf8fcca724e917581b00bf569947fff9",
  "patch": "diff --git a/dbms/src/DataStreams/ConvertingBlockInputStream.cpp b/dbms/src/DataStreams/ConvertingBlockInputStream.cpp\nindex 44f4989f3cc9..89864847a92c 100644\n--- a/dbms/src/DataStreams/ConvertingBlockInputStream.cpp\n+++ b/dbms/src/DataStreams/ConvertingBlockInputStream.cpp\n@@ -98,6 +98,10 @@ Block ConvertingBlockInputStream::readImpl()\n         return src;\n \n     Block res = header.cloneEmpty();\n+    /// This is important because header.cloneEmpty() doesn't copy info about aggregation bucket.\n+    /// Otherwise information in buckets may be lost (and aggregation will return wrong result).\n+    res.info = src.info;\n+\n     for (size_t res_pos = 0, size = conversion.size(); res_pos < size; ++res_pos)\n     {\n         const auto & src_elem = src.getByPosition(conversion[res_pos]);\n",
  "test_patch": "diff --git a/dbms/tests/integration/test_aggregation_memory_efficient/__init__.py b/dbms/tests/integration/test_aggregation_memory_efficient/__init__.py\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/dbms/tests/integration/test_aggregation_memory_efficient/test.py b/dbms/tests/integration/test_aggregation_memory_efficient/test.py\nnew file mode 100644\nindex 000000000000..a4e8e2b6295c\n--- /dev/null\n+++ b/dbms/tests/integration/test_aggregation_memory_efficient/test.py\n@@ -0,0 +1,49 @@\n+import time\n+import pytest\n+\n+from helpers.cluster import ClickHouseCluster\n+from helpers.client import QueryRuntimeException, QueryTimeoutExceedException\n+\n+\n+cluster = ClickHouseCluster(__file__)\n+node1 = cluster.add_instance('node1')\n+node2 = cluster.add_instance('node2')\n+\n+@pytest.fixture(scope=\"module\")\n+def start_cluster():\n+    try:\n+        cluster.start()\n+\n+        for node in [node1, node2]:\n+            node.query(\"create table da_memory_efficient_shard(A Int64, B Int64) Engine=MergeTree order by A partition by B % 2;\")\n+\n+\n+        node1.query(\"insert into da_memory_efficient_shard select number, number from numbers(100000);\")\n+        node2.query(\"insert into da_memory_efficient_shard select number + 100000, number from numbers(100000);\")\n+\n+        yield cluster\n+\n+    finally:\n+        cluster.shutdown()\n+\n+\n+def test_remote(start_cluster):\n+\n+    for flag in (0, 1):\n+        node1.query(\"set experimental_use_processors = {}\".format(flag))\n+\n+        node1.query(\"set distributed_aggregation_memory_efficient = 1, group_by_two_level_threshold = 1, group_by_two_level_threshold_bytes=1\")\n+        res = node1.query(\"select sum(a) from (SELECT B, uniqExact(A) a FROM remote('node{1,2}', default.da_memory_efficient_shard) GROUP BY B)\")\n+        assert res == '200000\\n'\n+\n+        node1.query(\"set distributed_aggregation_memory_efficient = 0\")\n+        res = node1.query(\"select sum(a) from (SELECT B, uniqExact(A) a FROM remote('node{1,2}', default.da_memory_efficient_shard) GROUP BY B)\")\n+        assert res == '200000\\n'\n+\n+        node1.query(\"set distributed_aggregation_memory_efficient = 1, group_by_two_level_threshold = 1, group_by_two_level_threshold_bytes=1\")\n+        res = node1.query(\"SELECT fullHostName() AS h, uniqExact(A) AS a FROM remote('node{1,2}', default.da_memory_efficient_shard) GROUP BY h ORDER BY h;\")\n+        assert res == 'node1\\t100000\\nnode2\\t100000\\n'\n+\n+        node1.query(\"set distributed_aggregation_memory_efficient = 0\")\n+        res = node1.query(\"SELECT fullHostName() AS h, uniqExact(A) AS a FROM remote('node{1,2}', default.da_memory_efficient_shard) GROUP BY h ORDER BY h;\")\n+        assert res == 'node1\\t100000\\nnode2\\t100000\\n'\ndiff --git a/dbms/tests/queries/0_stateless/01083_aggregation_memory_efficient_bug.reference b/dbms/tests/queries/0_stateless/01083_aggregation_memory_efficient_bug.reference\nnew file mode 100644\nindex 000000000000..f7393e847d34\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/01083_aggregation_memory_efficient_bug.reference\n@@ -0,0 +1,1 @@\n+100000\ndiff --git a/dbms/tests/queries/0_stateless/01083_aggregation_memory_efficient_bug.sql b/dbms/tests/queries/0_stateless/01083_aggregation_memory_efficient_bug.sql\nnew file mode 100644\nindex 000000000000..134131cc7b7b\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/01083_aggregation_memory_efficient_bug.sql\n@@ -0,0 +1,9 @@\n+drop table if exists da_memory_efficient_shard;\n+create table da_memory_efficient_shard(A Int64, B Int64) Engine=MergeTree order by A partition by B % 2;\n+insert into da_memory_efficient_shard select number, number from numbers(100000);\n+\n+set distributed_aggregation_memory_efficient = 1, group_by_two_level_threshold = 1, group_by_two_level_threshold_bytes=1;\n+\n+select sum(a) from (SELECT B, uniqExact(A) a FROM remote('localhost,127.0.0.1', currentDatabase(), da_memory_efficient_shard) GROUP BY B);\n+\n+drop table if exists da_memory_efficient_shard;\n",
  "problem_statement": "20.1 distributed_aggregation_memory_efficient + group_by_two_level loses the initiator's data\n20.1.4.14\r\nThe combination of distributed_aggregation_memory_efficient + group_by_two_level loses the initiator's data.\r\n\r\nAn example:\r\n```\r\nSELECT\r\n    hostName() AS host,\r\n    uniq(query)\r\nFROM remote('localhost,e567', system, query_log)\r\nGROUP BY host\r\n\r\n\u250c\u2500host\u2500\u252c\u2500uniq(query)\u2500\u2510\r\n\u2502 e567 \u2502         141 \u2502\r\n\u2502 e761 \u2502      441458 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n\r\nSET group_by_two_level_threshold = 1\r\n\r\nOk.\r\n\r\n\r\nSELECT\r\n    hostName() AS host,\r\n    uniq(query)\r\nFROM remote('localhost,e567', system, query_log)\r\nGROUP BY host\r\n\r\n\u250c\u2500host\u2500\u252c\u2500uniq(query)\u2500\u2510\r\n\u2502 e567 \u2502         142 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nSET distributed_aggregation_memory_efficient = 0\r\n\r\nOk.\r\n\r\nSELECT\r\n    hostName() AS host,\r\n    uniq(query)\r\nFROM remote('localhost,e567', system, query_log)\r\nGROUP BY host\r\n\r\n\u250c\u2500host\u2500\u252c\u2500uniq(query)\u2500\u2510\r\n\u2502 e761 \u2502      441458 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\u250c\u2500host\u2500\u252c\u2500uniq(query)\u2500\u2510\r\n\u2502 e567 \u2502         142 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n```\n",
  "hints_text": "STR:\r\n\r\nat 2 hosts (CH 20.1.4) :\r\n\r\n```\r\ndrop table if exists da_memory_efficient_shard ;\r\ndrop table if exists da_memory_efficient;\r\n\r\ncreate table da_memory_efficient_shard(A Int64, B Int64) Engine=MergeTree order by A;\r\ninsert into da_memory_efficient_shard select toString(rand()),number from numbers(100000);\r\n\r\ncreate table da_memory_efficient as da_memory_efficient_shard\r\nEngine=Distributed(test_cluster_two_shards, currentDatabase(), da_memory_efficient_shard);\r\n\r\nset distributed_aggregation_memory_efficient = 1, group_by_two_level_threshold = 1, group_by_two_level_threshold_bytes=1;\r\n\r\nselect sum(a) from (\r\nSELECT B, uniqExact(A) a FROM da_memory_efficient GROUP BY B\r\n);\r\n\u250c\u2500sum(a)\u2500\u2510\r\n\u2502 100391 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nset distributed_aggregation_memory_efficient = 0;\r\n\r\nselect sum(a) from (\r\nSELECT B, uniqExact(A) a FROM da_memory_efficient GROUP BY B\r\n);\r\n\u250c\u2500sum(a)\u2500\u2510\r\n\u2502 200000 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nset distributed_aggregation_memory_efficient = 1;\r\n\r\nSELECT fullHostName() AS h, uniqExact(A) AS a\r\nFROM da_memory_efficient GROUP BY h;\r\n\u250c\u2500h\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500a\u2500\u2510\r\n\u2502 chdw1--****************** \u2502 100000 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n\r\nset distributed_aggregation_memory_efficient = 0;\r\n\r\nSELECT fullHostName() AS h, uniqExact(A) AS a\r\nFROM da_memory_efficient GROUP BY h;\r\n\u250c\u2500h\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500a\u2500\u2510\r\n\u2502 chdw2--****************** \u2502 100000 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\u250c\u2500h\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500a\u2500\u2510\r\n\u2502 chdw1--****************** \u2502 99998 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nCH 20.2.1\r\n```\r\nset distributed_aggregation_memory_efficient = 1, group_by_two_level_threshold = 1, group_by_two_level_threshold_bytes=1;\r\n\r\nselect sum(a) from (\r\nSELECT B, uniqExact(A) a FROM da_memory_efficient GROUP BY B\r\n);\r\nDB::Exception: Cannot clone block with columns because block has 0 columns, \r\nbut 2 columns given.: While executing GroupingAggregatedTransform.\r\n\r\nset distributed_aggregation_memory_efficient = 0;\r\n\r\nselect sum(a) from (\r\nSELECT B, uniqExact(A) a FROM da_memory_efficient GROUP BY B\r\n);\r\n\u250c\u2500sum(a)\u2500\u2510\r\n\u2502 200000 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nset distributed_aggregation_memory_efficient = 1;\r\n\r\nSELECT fullHostName() AS h, uniqExact(A) AS a\r\nFROM da_memory_efficient GROUP BY h;\r\n\r\nDB::Exception: Cannot clone block with columns because block has 0 columns, \r\nbut 2 columns given.: While executing GroupingAggregatedTransform.\r\n\r\nset distributed_aggregation_memory_efficient = 0;\r\n\r\nSELECT fullHostName() AS h, uniqExact(A) AS a\r\nFROM da_memory_efficient GROUP BY h;\r\n\u250c\u2500h\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500a\u2500\u2510\r\n\u2502 chdw2--****************** \u2502 100000 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\u250c\u2500h\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500a\u2500\u2510\r\n\u2502 chdw1--****************** \u2502 99998 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\n```\r\nSTR one host 20.1.4.14:\r\n\r\ndrop table if exists da_memory_efficient_shard ;\r\ncreate table da_memory_efficient_shard(A Int64, B Int64) Engine=MergeTree order by A;\r\ninsert into da_memory_efficient_shard select toString(rand()),number from numbers(100000);\r\n\r\nset distributed_aggregation_memory_efficient = 1, \r\ngroup_by_two_level_threshold = 1, group_by_two_level_threshold_bytes=1;\r\n\r\nselect sum(a) from (\r\nSELECT B, uniqExact(A) a\r\nFROM remote('localhost,127.0.0.1', currentDatabase(), da_memory_efficient_shard)\r\nGROUP BY B);\r\n\u250c\u2500sum(a)\u2500\u2510\r\n\u2502    391 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n\r\nset distributed_aggregation_memory_efficient = 0;\r\n\r\nselect sum(a) from (\r\nSELECT B, uniqExact(A) a\r\nFROM remote('localhost,127.0.0.1', currentDatabase(), da_memory_efficient_shard)\r\nGROUP BY B);\r\n\u250c\u2500sum(a)\u2500\u2510\r\n\u2502 100000 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```",
  "created_at": "2020-02-21T19:06:11Z"
}