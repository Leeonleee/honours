diff --git a/dbms/tests/integration/test_aggregation_memory_efficient/__init__.py b/dbms/tests/integration/test_aggregation_memory_efficient/__init__.py
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/dbms/tests/integration/test_aggregation_memory_efficient/test.py b/dbms/tests/integration/test_aggregation_memory_efficient/test.py
new file mode 100644
index 000000000000..a4e8e2b6295c
--- /dev/null
+++ b/dbms/tests/integration/test_aggregation_memory_efficient/test.py
@@ -0,0 +1,49 @@
+import time
+import pytest
+
+from helpers.cluster import ClickHouseCluster
+from helpers.client import QueryRuntimeException, QueryTimeoutExceedException
+
+
+cluster = ClickHouseCluster(__file__)
+node1 = cluster.add_instance('node1')
+node2 = cluster.add_instance('node2')
+
+@pytest.fixture(scope="module")
+def start_cluster():
+    try:
+        cluster.start()
+
+        for node in [node1, node2]:
+            node.query("create table da_memory_efficient_shard(A Int64, B Int64) Engine=MergeTree order by A partition by B % 2;")
+
+
+        node1.query("insert into da_memory_efficient_shard select number, number from numbers(100000);")
+        node2.query("insert into da_memory_efficient_shard select number + 100000, number from numbers(100000);")
+
+        yield cluster
+
+    finally:
+        cluster.shutdown()
+
+
+def test_remote(start_cluster):
+
+    for flag in (0, 1):
+        node1.query("set experimental_use_processors = {}".format(flag))
+
+        node1.query("set distributed_aggregation_memory_efficient = 1, group_by_two_level_threshold = 1, group_by_two_level_threshold_bytes=1")
+        res = node1.query("select sum(a) from (SELECT B, uniqExact(A) a FROM remote('node{1,2}', default.da_memory_efficient_shard) GROUP BY B)")
+        assert res == '200000
'
+
+        node1.query("set distributed_aggregation_memory_efficient = 0")
+        res = node1.query("select sum(a) from (SELECT B, uniqExact(A) a FROM remote('node{1,2}', default.da_memory_efficient_shard) GROUP BY B)")
+        assert res == '200000
'
+
+        node1.query("set distributed_aggregation_memory_efficient = 1, group_by_two_level_threshold = 1, group_by_two_level_threshold_bytes=1")
+        res = node1.query("SELECT fullHostName() AS h, uniqExact(A) AS a FROM remote('node{1,2}', default.da_memory_efficient_shard) GROUP BY h ORDER BY h;")
+        assert res == 'node1\t100000
node2\t100000
'
+
+        node1.query("set distributed_aggregation_memory_efficient = 0")
+        res = node1.query("SELECT fullHostName() AS h, uniqExact(A) AS a FROM remote('node{1,2}', default.da_memory_efficient_shard) GROUP BY h ORDER BY h;")
+        assert res == 'node1\t100000
node2\t100000
'
diff --git a/dbms/tests/queries/0_stateless/01083_aggregation_memory_efficient_bug.reference b/dbms/tests/queries/0_stateless/01083_aggregation_memory_efficient_bug.reference
new file mode 100644
index 000000000000..f7393e847d34
--- /dev/null
+++ b/dbms/tests/queries/0_stateless/01083_aggregation_memory_efficient_bug.reference
@@ -0,0 +1,1 @@
+100000
diff --git a/dbms/tests/queries/0_stateless/01083_aggregation_memory_efficient_bug.sql b/dbms/tests/queries/0_stateless/01083_aggregation_memory_efficient_bug.sql
new file mode 100644
index 000000000000..134131cc7b7b
--- /dev/null
+++ b/dbms/tests/queries/0_stateless/01083_aggregation_memory_efficient_bug.sql
@@ -0,0 +1,9 @@
+drop table if exists da_memory_efficient_shard;
+create table da_memory_efficient_shard(A Int64, B Int64) Engine=MergeTree order by A partition by B % 2;
+insert into da_memory_efficient_shard select number, number from numbers(100000);
+
+set distributed_aggregation_memory_efficient = 1, group_by_two_level_threshold = 1, group_by_two_level_threshold_bytes=1;
+
+select sum(a) from (SELECT B, uniqExact(A) a FROM remote('localhost,127.0.0.1', currentDatabase(), da_memory_efficient_shard) GROUP BY B);
+
+drop table if exists da_memory_efficient_shard;
