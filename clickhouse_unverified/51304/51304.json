{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 51304,
  "instance_id": "ClickHouse__ClickHouse-51304",
  "issue_numbers": [
    "36377"
  ],
  "base_commit": "8f6cd157b9f7169793856da73971cb9b2a860427",
  "patch": "diff --git a/docs/en/sql-reference/statements/alter/comment.md b/docs/en/sql-reference/statements/alter/comment.md\nindex cc49c6abf80b..f6fb179d969e 100644\n--- a/docs/en/sql-reference/statements/alter/comment.md\n+++ b/docs/en/sql-reference/statements/alter/comment.md\n@@ -57,3 +57,9 @@ Output of a removed comment:\n \u2502         \u2502\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n ```\n+\n+**Caveats**\n+\n+For Replicated tables, the comment can be different on different replicas. Modifying the comment applies to a single replica.\n+\n+The feature is available since version 23.9. It does not work in previous ClickHouse versions.\ndiff --git a/src/Interpreters/InterpreterAlterQuery.cpp b/src/Interpreters/InterpreterAlterQuery.cpp\nindex 7d1f99482383..a7445f89245b 100644\n--- a/src/Interpreters/InterpreterAlterQuery.cpp\n+++ b/src/Interpreters/InterpreterAlterQuery.cpp\n@@ -156,10 +156,10 @@ BlockIO InterpreterAlterQuery::executeToTable(const ASTAlterQuery & alter)\n     if (typeid_cast<DatabaseReplicated *>(database.get()))\n     {\n         int command_types_count = !mutation_commands.empty() + !partition_commands.empty() + !alter_commands.empty();\n-        bool mixed_settings_amd_metadata_alter = alter_commands.hasSettingsAlterCommand() && !alter_commands.isSettingsAlter();\n+        bool mixed_settings_amd_metadata_alter = alter_commands.hasNonReplicatedAlterCommand() && !alter_commands.areNonReplicatedAlterCommands();\n         if (1 < command_types_count || mixed_settings_amd_metadata_alter)\n             throw Exception(ErrorCodes::NOT_IMPLEMENTED, \"For Replicated databases it's not allowed \"\n-                                                         \"to execute ALTERs of different types in single query\");\n+                                                         \"to execute ALTERs of different types (replicated and non replicated) in single query\");\n     }\n \n     if (mutation_commands.hasNonEmptyMutationCommands())\ndiff --git a/src/Parsers/ParserCreateQuery.cpp b/src/Parsers/ParserCreateQuery.cpp\nindex bfae57cab1db..44f375adb655 100644\n--- a/src/Parsers/ParserCreateQuery.cpp\n+++ b/src/Parsers/ParserCreateQuery.cpp\n@@ -526,6 +526,7 @@ bool ParserStorage::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)\n \n         break;\n     }\n+\n     // If any part of storage definition is found create storage node\n     if (!storage_like)\n         return false;\ndiff --git a/src/Storages/AlterCommands.cpp b/src/Storages/AlterCommands.cpp\nindex 96dcd74f9473..f38fc1f37349 100644\n--- a/src/Storages/AlterCommands.cpp\n+++ b/src/Storages/AlterCommands.cpp\n@@ -1350,9 +1350,14 @@ void AlterCommands::validate(const StoragePtr & table, ContextPtr context) const\n     validateColumnsDefaultsAndGetSampleBlock(default_expr_list, all_columns.getAll(), context);\n }\n \n-bool AlterCommands::hasSettingsAlterCommand() const\n+bool AlterCommands::hasNonReplicatedAlterCommand() const\n {\n-    return std::any_of(begin(), end(), [](const AlterCommand & c) { return c.isSettingsAlter(); });\n+    return std::any_of(begin(), end(), [](const AlterCommand & c) { return c.isSettingsAlter() || c.isCommentAlter(); });\n+}\n+\n+bool AlterCommands::areNonReplicatedAlterCommands() const\n+{\n+    return std::all_of(begin(), end(), [](const AlterCommand & c) { return c.isSettingsAlter() || c.isCommentAlter(); });\n }\n \n bool AlterCommands::isSettingsAlter() const\ndiff --git a/src/Storages/AlterCommands.h b/src/Storages/AlterCommands.h\nindex 3e526dcc0bb3..c06872f9757d 100644\n--- a/src/Storages/AlterCommands.h\n+++ b/src/Storages/AlterCommands.h\n@@ -196,8 +196,11 @@ class AlterCommands : public std::vector<AlterCommand>\n     /// Commands have to be prepared before apply.\n     void apply(StorageInMemoryMetadata & metadata, ContextPtr context) const;\n \n-    /// At least one command modify settings.\n-    bool hasSettingsAlterCommand() const;\n+    /// At least one command modify settings or comments.\n+    bool hasNonReplicatedAlterCommand() const;\n+\n+    /// All commands modify settings or comments.\n+    bool areNonReplicatedAlterCommands() const;\n \n     /// All commands modify settings only.\n     bool isSettingsAlter() const;\ndiff --git a/src/Storages/MergeTree/registerStorageMergeTree.cpp b/src/Storages/MergeTree/registerStorageMergeTree.cpp\nindex 75f1542e30e1..0a1827893112 100644\n--- a/src/Storages/MergeTree/registerStorageMergeTree.cpp\n+++ b/src/Storages/MergeTree/registerStorageMergeTree.cpp\n@@ -80,6 +80,7 @@ ORDER BY expr\n [SAMPLE BY expr]\n [TTL expr [DELETE|TO DISK 'xxx'|TO VOLUME 'xxx'], ...]\n [SETTINGS name=value, ...]\n+[COMMENT 'comment']\n \n See details in documentation: https://clickhouse.com/docs/en/engines/table-engines/mergetree-family/mergetree/. Other engines of the family support different syntax, see details in the corresponding documentation topics.\n \ndiff --git a/src/Storages/StorageMergeTree.cpp b/src/Storages/StorageMergeTree.cpp\nindex 4f27cbc76ed8..719c75fd5e5b 100644\n--- a/src/Storages/StorageMergeTree.cpp\n+++ b/src/Storages/StorageMergeTree.cpp\n@@ -332,6 +332,11 @@ void StorageMergeTree::alter(\n         changeSettings(new_metadata.settings_changes, table_lock_holder);\n         DatabaseCatalog::instance().getDatabase(table_id.database_name)->alterTable(local_context, table_id, new_metadata);\n     }\n+    else if (commands.isCommentAlter())\n+    {\n+        setInMemoryMetadata(new_metadata);\n+        DatabaseCatalog::instance().getDatabase(table_id.database_name)->alterTable(local_context, table_id, new_metadata);\n+    }\n     else\n     {\n         if (!maybe_mutation_commands.empty() && maybe_mutation_commands.containBarrierCommand())\ndiff --git a/src/Storages/StorageReplicatedMergeTree.cpp b/src/Storages/StorageReplicatedMergeTree.cpp\nindex 5274804462c8..9c08560da17a 100644\n--- a/src/Storages/StorageReplicatedMergeTree.cpp\n+++ b/src/Storages/StorageReplicatedMergeTree.cpp\n@@ -5694,6 +5694,17 @@ void StorageReplicatedMergeTree::alter(\n         return;\n     }\n \n+    if (commands.isCommentAlter())\n+    {\n+        StorageInMemoryMetadata future_metadata = getInMemoryMetadata();\n+        commands.apply(future_metadata, query_context);\n+\n+        setInMemoryMetadata(future_metadata);\n+\n+        DatabaseCatalog::instance().getDatabase(table_id.database_name)->alterTable(query_context, table_id, future_metadata);\n+        return;\n+    }\n+\n     auto ast_to_str = [](ASTPtr query) -> String\n     {\n         if (!query)\n@@ -5763,12 +5774,27 @@ void StorageReplicatedMergeTree::alter(\n         String new_columns_str = future_metadata.columns.toString();\n         ops.emplace_back(zkutil::makeSetRequest(fs::path(zookeeper_path) / \"columns\", new_columns_str, -1));\n \n-        if (ast_to_str(current_metadata->settings_changes) != ast_to_str(future_metadata.settings_changes))\n+        bool settings_are_changed = (ast_to_str(current_metadata->settings_changes) != ast_to_str(future_metadata.settings_changes));\n+        bool comment_is_changed = (current_metadata->comment != future_metadata.comment);\n+\n+        if (settings_are_changed || comment_is_changed)\n         {\n-            /// Just change settings\n             StorageInMemoryMetadata metadata_copy = *current_metadata;\n-            metadata_copy.settings_changes = future_metadata.settings_changes;\n-            changeSettings(metadata_copy.settings_changes, table_lock_holder);\n+\n+            if (settings_are_changed)\n+            {\n+                /// Just change settings\n+                metadata_copy.settings_changes = future_metadata.settings_changes;\n+                changeSettings(metadata_copy.settings_changes, table_lock_holder);\n+            }\n+\n+            /// The comment is not replicated as of today, but we can implement it later.\n+            if (comment_is_changed)\n+            {\n+                metadata_copy.setComment(future_metadata.comment);\n+                setInMemoryMetadata(metadata_copy);\n+            }\n+\n             DatabaseCatalog::instance().getDatabase(table_id.database_name)->alterTable(query_context, table_id, metadata_copy);\n         }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00725_comment_columns_long.sql b/tests/queries/0_stateless/00725_comment_columns_long.sql\nindex fe4ee48909f8..139f8ba006fa 100644\n--- a/tests/queries/0_stateless/00725_comment_columns_long.sql\n+++ b/tests/queries/0_stateless/00725_comment_columns_long.sql\n@@ -1,4 +1,5 @@\n--- Tags: long\n+-- Tags: long, no-replicated-database\n+-- Tag no-replicated-database: Unsupported type of ALTER query\n \n DROP TABLE IF EXISTS check_query_comment_column;\n \ndiff --git a/tests/queries/0_stateless/02020_alter_table_modify_comment.reference b/tests/queries/0_stateless/02020_alter_table_modify_comment.reference\nindex a9c37eb2ba5e..d2e74fd07f08 100644\n--- a/tests/queries/0_stateless/02020_alter_table_modify_comment.reference\n+++ b/tests/queries/0_stateless/02020_alter_table_modify_comment.reference\n@@ -124,21 +124,21 @@ CREATE TABLE default.comment_test_table\\n(\\n    `k` UInt64,\\n    `s` String\\n)\\n\n comment=\tTest table with comment\n \n change a comment\n-CREATE TABLE default.comment_test_table\\n(\\n    `k` UInt64,\\n    `s` String\\n)\\nENGINE = ReplicatedMergeTree(\\'/clickhouse/02020_alter_table_modify_comment_default\\', \\'1\\')\\nORDER BY k\\nSETTINGS index_granularity = 8192\\nCOMMENT \\'Test table with comment\\'\n-comment=\tTest table with comment\n+CREATE TABLE default.comment_test_table\\n(\\n    `k` UInt64,\\n    `s` String\\n)\\nENGINE = ReplicatedMergeTree(\\'/clickhouse/02020_alter_table_modify_comment_default\\', \\'1\\')\\nORDER BY k\\nSETTINGS index_granularity = 8192\\nCOMMENT \\'new comment on a table\\'\n+comment=\tnew comment on a table\n \n remove a comment\n-CREATE TABLE default.comment_test_table\\n(\\n    `k` UInt64,\\n    `s` String\\n)\\nENGINE = ReplicatedMergeTree(\\'/clickhouse/02020_alter_table_modify_comment_default\\', \\'1\\')\\nORDER BY k\\nSETTINGS index_granularity = 8192\\nCOMMENT \\'Test table with comment\\'\n-comment=\tTest table with comment\n+CREATE TABLE default.comment_test_table\\n(\\n    `k` UInt64,\\n    `s` String\\n)\\nENGINE = ReplicatedMergeTree(\\'/clickhouse/02020_alter_table_modify_comment_default\\', \\'1\\')\\nORDER BY k\\nSETTINGS index_granularity = 8192\n+comment=\t\n \n add a comment back\n-CREATE TABLE default.comment_test_table\\n(\\n    `k` UInt64,\\n    `s` String\\n)\\nENGINE = ReplicatedMergeTree(\\'/clickhouse/02020_alter_table_modify_comment_default\\', \\'1\\')\\nORDER BY k\\nSETTINGS index_granularity = 8192\\nCOMMENT \\'Test table with comment\\'\n-comment=\tTest table with comment\n+CREATE TABLE default.comment_test_table\\n(\\n    `k` UInt64,\\n    `s` String\\n)\\nENGINE = ReplicatedMergeTree(\\'/clickhouse/02020_alter_table_modify_comment_default\\', \\'1\\')\\nORDER BY k\\nSETTINGS index_granularity = 8192\\nCOMMENT \\'another comment on a table\\'\n+comment=\tanother comment on a table\n \n detach table\n-CREATE TABLE default.comment_test_table\\n(\\n    `k` UInt64,\\n    `s` String\\n)\\nENGINE = ReplicatedMergeTree(\\'/clickhouse/02020_alter_table_modify_comment_default\\', \\'1\\')\\nORDER BY k\\nSETTINGS index_granularity = 8192\\nCOMMENT \\'Test table with comment\\'\n+CREATE TABLE default.comment_test_table\\n(\\n    `k` UInt64,\\n    `s` String\\n)\\nENGINE = ReplicatedMergeTree(\\'/clickhouse/02020_alter_table_modify_comment_default\\', \\'1\\')\\nORDER BY k\\nSETTINGS index_granularity = 8192\\nCOMMENT \\'another comment on a table\\'\n \n re-attach table\n-CREATE TABLE default.comment_test_table\\n(\\n    `k` UInt64,\\n    `s` String\\n)\\nENGINE = ReplicatedMergeTree(\\'/clickhouse/02020_alter_table_modify_comment_default\\', \\'1\\')\\nORDER BY k\\nSETTINGS index_granularity = 8192\\nCOMMENT \\'Test table with comment\\'\n-comment=\tTest table with comment\n+CREATE TABLE default.comment_test_table\\n(\\n    `k` UInt64,\\n    `s` String\\n)\\nENGINE = ReplicatedMergeTree(\\'/clickhouse/02020_alter_table_modify_comment_default\\', \\'1\\')\\nORDER BY k\\nSETTINGS index_granularity = 8192\\nCOMMENT \\'another comment on a table\\'\n+comment=\tanother comment on a table\n \ndiff --git a/tests/queries/0_stateless/02792_alter_table_modify_comment.reference b/tests/queries/0_stateless/02792_alter_table_modify_comment.reference\nnew file mode 100644\nindex 000000000000..b148993285c4\n--- /dev/null\n+++ b/tests/queries/0_stateless/02792_alter_table_modify_comment.reference\n@@ -0,0 +1,20 @@\n+Hello\n+World\n+Hello\n+World\n+Hello\n+World\n+Hello\n+World\n+Hello\n+World\n+\n+World\n+\n+World\n+\n+World\n+\n+World\n+\n+World\ndiff --git a/tests/queries/0_stateless/02792_alter_table_modify_comment.sql b/tests/queries/0_stateless/02792_alter_table_modify_comment.sql\nnew file mode 100644\nindex 000000000000..ba30833905d3\n--- /dev/null\n+++ b/tests/queries/0_stateless/02792_alter_table_modify_comment.sql\n@@ -0,0 +1,72 @@\n+-- Tags: no-replicated-database\n+-- Tag no-replicated-database: Unsupported type of ALTER query\n+\n+DROP TABLE IF EXISTS t;\n+\n+# Memory, MergeTree, and ReplicatedMergeTree\n+\n+CREATE TABLE t (x UInt8) ENGINE = Memory COMMENT 'Hello';\n+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';\n+ALTER TABLE t MODIFY COMMENT 'World';\n+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';\n+DROP TABLE t;\n+\n+CREATE TABLE t (x UInt8) ENGINE = MergeTree ORDER BY () COMMENT 'Hello';\n+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';\n+ALTER TABLE t MODIFY COMMENT 'World';\n+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';\n+DROP TABLE t;\n+\n+# The case when there are many operations in one ALTER\n+\n+CREATE TABLE t (x UInt8) ENGINE = MergeTree ORDER BY () COMMENT 'Hello';\n+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';\n+ALTER TABLE t MODIFY COMMENT 'World', MODIFY COLUMN x UInt16;\n+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';\n+DROP TABLE t;\n+\n+# Note that the table comment is not replicated. We can implement it later.\n+\n+CREATE TABLE t (x UInt8) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_comment_table1/t', '1') ORDER BY () COMMENT 'Hello';\n+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';\n+ALTER TABLE t MODIFY COMMENT 'World';\n+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';\n+DROP TABLE t SYNC;\n+\n+CREATE TABLE t (x UInt8) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_comment_table2/t', '1') ORDER BY () COMMENT 'Hello';\n+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';\n+ALTER TABLE t MODIFY COMMENT 'World', MODIFY COLUMN x UInt16;\n+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';\n+DROP TABLE t SYNC;\n+\n+# The cases when there is no comment on creation\n+\n+CREATE TABLE t (x UInt8) ENGINE = Memory;\n+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';\n+ALTER TABLE t MODIFY COMMENT 'World';\n+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';\n+DROP TABLE t;\n+\n+CREATE TABLE t (x UInt8) ENGINE = MergeTree ORDER BY ();\n+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';\n+ALTER TABLE t MODIFY COMMENT 'World';\n+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';\n+DROP TABLE t;\n+\n+CREATE TABLE t (x UInt8) ENGINE = MergeTree ORDER BY ();\n+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';\n+ALTER TABLE t MODIFY COMMENT 'World', MODIFY COLUMN x UInt16;\n+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';\n+DROP TABLE t;\n+\n+CREATE TABLE t (x UInt8) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_comment_table3/t', '1') ORDER BY ();\n+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';\n+ALTER TABLE t MODIFY COMMENT 'World';\n+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';\n+DROP TABLE t SYNC;\n+\n+CREATE TABLE t (x UInt8) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_comment_table4/t', '1') ORDER BY ();\n+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';\n+ALTER TABLE t MODIFY COMMENT 'World', MODIFY COLUMN x UInt16;\n+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';\n+DROP TABLE t SYNC;\n",
  "problem_statement": "ALTER TABLE MODIFY COMMENT does not work on ReplicatedMergeTree\nWe use Clickhouse version 22.3.3.44, and met with with some wrong behaviour - \r\nqueries \"ALTER TABLE ... MODIFY COMMENT ... \" does not work on ReplicatedMergeTree engine.\r\n\r\nBug reproduce script:\r\n```\r\nCREATE TABLE sandbox.test__calendar\r\n(\r\n    `dttm` DateTime COMMENT 'date and time',\r\n    `timestamp` Int64 COMMENT 'event timestamp',\r\n    `year_num` Int32 COMMENT 'year number'\r\n)\r\nENGINE = ReplicatedMergeTree() PARTITION BY year_num ORDER BY timestamp\r\nCOMMENT 'Comment text for test table';\r\n\r\nSELECT comment FROM system.tables WHERE name like 'test__calendar'; -- 1 row selected with correct comment text\r\n\r\nALTER TABLE sandbox.test__calendar MODIFY COMMENT 'Some new more detailed text of comment';\r\n\r\nSELECT comment FROM system.tables WHERE name like 'test__calendar'; -- 1 row selected, but with OLD(!) comment text\r\n```\r\n\r\nMaybe it will be helpfull, ALTER TABLE query returns such result:\r\n```\r\nhost            |status|error|num_hosts_remaining|num_hosts_active|\r\n----------------+------+----+-----------------------+------------------+\r\n10.7.179.41     |     0|    |                      1|                 0|\r\nak1-st-data-01  |     0|    |                      0|                 0|\r\n```\n",
  "hints_text": "The bug was introduced here: https://github.com/ClickHouse/ClickHouse/pull/29264\n> The bug was introduced here: #29264\r\n\r\nJudging by the stuff I had to add to make it work, it was never there in the first place... \nwe have exactly the same problem\r\n\r\n```\r\nCREATE TABLE test.test_table on cluster 'cluster'\r\n(\r\n    `date` DateTime COMMENT 'Day',\r\n    `int` Int32 COMMENT 'values',\r\n    `string` String COMMENT 'String label'\r\n)\r\nENGINE = ReplicatedMergeTree() \r\nCOMMENT 'test comment';\r\n\r\nSELECT comment FROM system.tables WHERE name like 'test_table'; -- it show 'test comment'\r\n\r\nALTER TABLE test.test_table on cluster 'cluster' MODIFY COMMENT 'Now it's test table';\r\n\r\nSELECT comment FROM system.tables WHERE name like 'test_table'; -- it show old comment for table 'test comment';\r\n\r\nTry without 'cluster'\r\nALTER TABLE test.test_table  MODIFY COMMENT 'Now it's test table';\r\n\r\nSELECT comment FROM system.tables WHERE name like 'test_table'; -- Nothing change';\r\n```\r\n\nIt is fixed in 22.6 by https://github.com/ClickHouse/ClickHouse/pull/37598, we forgot to close this issue. Probably your version is older than 22.6 \nwe have newer versions Connected to ClickHouse server version 22.9.2 revision 54460.\r\n\r\nClickHouse client version is older than ClickHouse server. It may lack support for new features.\r\n\r\n\u250c\u2500version()\u2500\u2510\r\n\u2502 22.9.2.7  \u2502\nHm, yes, I confirm that comment is not updated. @Enmk, please take a look\n> It is fixed in 22.6 by #37598, we forgot to close this issue. Probably your version is older than 22.6\r\n\r\nSorry, I got confused, #37598 is about different issue. So yes, this one is not fixed yet.\nIt will be also good to show modified comment in `DESCRIBE` query and probable in `SHOW CREATE TABLE`. Currently it doesn't work neither for ReplicatedMergeTree nor MergeTree tables.\r\n\r\n```\r\npc :) create table test_comment (key Int32, value String) ENGINE MergeTree ORDER BY key;\r\n\r\nCREATE TABLE test_comment\r\n(\r\n    `key` Int32,\r\n    `value` String\r\n)\r\nENGINE = MergeTree\r\nORDER BY key\r\n\r\nQuery id: b0e033c3-a487-42f7-a287-87779b10d125\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.014 sec.\r\n\r\npc :) alter table test_comment modify comment 'YYY table';\r\n\r\nALTER TABLE test_comment\r\n    MODIFY COMMENT 'YYY table'\r\n\r\nQuery id: c2cadab4-36e3-44a7-9bff-f3194a3f86a5\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.018 sec.\r\n\r\npc :) create table test_comment_replicated (key Int32, value String) ENGINE ReplicatedMergeTree('/clickhouse/table/test_comment_replicated', '1') ORDER BY key;\r\n\r\nCREATE TABLE test_comment_replicated\r\n(\r\n    `key` Int32,\r\n    `value` String\r\n)\r\nENGINE = ReplicatedMergeTree('/clickhouse/table/test_comment_replicated', '1')\r\nORDER BY key\r\n\r\nQuery id: 9b1be0bc-9e19-497e-adea-55539a4f4b4c\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.047 sec.\r\n\r\npc :) alter table test_comment_replicated modify comment 'YYY table';\r\n\r\nALTER TABLE test_comment_replicated\r\n    MODIFY COMMENT 'YYY table'\r\n\r\nQuery id: 90ce4b5a-d7c2-40db-9a83-4a04d895a469\r\n\r\nOk.\r\n\r\npc :) select name, comment from system.tables where name like 'test_comment%';\r\n\r\nSELECT\r\n    name,\r\n    comment\r\nFROM system.tables\r\nWHERE name LIKE 'test_comment%'\r\n\r\nQuery id: 613a8123-564c-42c2-9b35-c95830bc8438\r\n\r\n\u250c\u2500name\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500comment\u2500\u2500\u2500\u2510\r\n\u2502 test_comment            \u2502 YYY table \u2502\r\n\u2502 test_comment_replicated \u2502           \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n2 rows in set. Elapsed: 0.021 sec.\r\n\r\npc :) desc test_comment\r\n\r\nDESCRIBE TABLE test_comment\r\n\r\nQuery id: bb04f3a3-ba18-4b3d-9d82-297cad08be81\r\n\r\n\u250c\u2500name\u2500\u2500\u252c\u2500type\u2500\u2500\u2500\u252c\u2500default_type\u2500\u252c\u2500default_expression\u2500\u252c\u2500comment\u2500\u252c\u2500codec_expression\u2500\u252c\u2500ttl_expression\u2500\u2510\r\n\u2502 key   \u2502 Int32  \u2502              \u2502                    \u2502         \u2502                  \u2502                \u2502\r\n\u2502 value \u2502 String \u2502              \u2502                    \u2502         \u2502                  \u2502                \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n2 rows in set. Elapsed: 0.006 sec.\r\n\r\npc :) desc test_comment_repl\r\ntest_comment_repl        test_comment_replicated\r\npc :) desc test_comment_replicated\r\n\r\nDESCRIBE TABLE test_comment_replicated\r\n\r\nQuery id: f426617c-71f3-4abf-9b10-697c5b3b0e90\r\n\r\n\u250c\u2500name\u2500\u2500\u252c\u2500type\u2500\u2500\u2500\u252c\u2500default_type\u2500\u252c\u2500default_expression\u2500\u252c\u2500comment\u2500\u252c\u2500codec_expression\u2500\u252c\u2500ttl_expression\u2500\u2510\r\n\u2502 key   \u2502 Int32  \u2502              \u2502                    \u2502         \u2502                  \u2502                \u2502\r\n\u2502 value \u2502 String \u2502              \u2502                    \u2502         \u2502                  \u2502                \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n2 rows in set. Elapsed: 0.006 sec.\r\n```\nAre there any updates to this issue?\nhello, sorry, but when will this issue be resolved? (((",
  "created_at": "2023-06-23T01:22:29Z"
}