{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 52158,
  "instance_id": "ClickHouse__ClickHouse-52158",
  "issue_numbers": [
    "47533"
  ],
  "base_commit": "9f45513acf61d05e3cd9274236ce38b26fafc304",
  "patch": "diff --git a/src/Interpreters/ActionsVisitor.cpp b/src/Interpreters/ActionsVisitor.cpp\nindex 01f2d4cf22e7..efab11003f55 100644\n--- a/src/Interpreters/ActionsVisitor.cpp\n+++ b/src/Interpreters/ActionsVisitor.cpp\n@@ -16,19 +16,15 @@\n \n #include <DataTypes/DataTypeSet.h>\n #include <DataTypes/DataTypeFunction.h>\n-#include <DataTypes/DataTypeFixedString.h>\n #include <DataTypes/DataTypeString.h>\n #include <DataTypes/DataTypeTuple.h>\n #include <DataTypes/DataTypeArray.h>\n #include <DataTypes/DataTypeLowCardinality.h>\n-#include <DataTypes/DataTypesNumber.h>\n #include <DataTypes/FieldToDataType.h>\n #include <DataTypes/DataTypesDecimal.h>\n #include <DataTypes/DataTypeFactory.h>\n \n-#include <Columns/ColumnArray.h>\n #include <Columns/ColumnConst.h>\n-#include <Columns/ColumnFixedString.h>\n #include <Columns/ColumnSet.h>\n \n #include <Storages/StorageSet.h>\n@@ -47,7 +43,6 @@\n #include <Interpreters/ExpressionActions.h>\n #include <Interpreters/misc.h>\n #include <Interpreters/ActionsVisitor.h>\n-#include <Interpreters/InterpreterSelectWithUnionQuery.h>\n #include <Interpreters/Set.h>\n #include <Interpreters/evaluateConstantExpression.h>\n #include <Interpreters/convertFieldToType.h>\n@@ -61,6 +56,7 @@\n #include <Interpreters/InterpreterSelectQueryAnalyzer.h>\n #include <Parsers/queryToString.h>\n \n+\n namespace DB\n {\n \n@@ -715,7 +711,7 @@ bool ActionsMatcher::needChildVisit(const ASTPtr & node, const ASTPtr & child)\n         node->as<ASTExpressionList>())\n         return false;\n \n-    /// Do not go to FROM, JOIN, UNION.\n+    /// Do not go to FROM, JOIN, UNION\n     if (child->as<ASTTableExpression>() ||\n         child->as<ASTSelectQuery>())\n         return false;\ndiff --git a/src/Interpreters/evaluateConstantExpression.cpp b/src/Interpreters/evaluateConstantExpression.cpp\nindex 5a333172b14e..921cd5ff553e 100644\n--- a/src/Interpreters/evaluateConstantExpression.cpp\n+++ b/src/Interpreters/evaluateConstantExpression.cpp\n@@ -1,27 +1,24 @@\n #include <Interpreters/evaluateConstantExpression.h>\n \n #include <Columns/ColumnConst.h>\n-#include <Columns/ColumnsNumber.h>\n #include <Core/Block.h>\n #include <DataTypes/DataTypesNumber.h>\n #include <DataTypes/FieldToDataType.h>\n #include <Interpreters/Context.h>\n #include <Interpreters/convertFieldToType.h>\n-#include <Interpreters/ExpressionActions.h>\n #include <Interpreters/ExpressionAnalyzer.h>\n #include <Interpreters/TreeRewriter.h>\n #include <Parsers/ASTFunction.h>\n #include <Parsers/ASTIdentifier.h>\n #include <Parsers/ASTLiteral.h>\n #include <Parsers/ASTSubquery.h>\n-#include <Parsers/ExpressionElementParsers.h>\n #include <TableFunctions/TableFunctionFactory.h>\n #include <Common/typeid_cast.h>\n #include <Interpreters/FunctionNameNormalizer.h>\n #include <Interpreters/ReplaceQueryParameterVisitor.h>\n-#include <Poco/Util/AbstractConfiguration.h>\n #include <unordered_map>\n \n+\n namespace DB\n {\n \n@@ -94,18 +91,18 @@ std::pair<Field, std::shared_ptr<const IDataType>> evaluateConstantExpression(co\n \n     if (!result_column)\n         throw Exception(ErrorCodes::BAD_ARGUMENTS,\n-                        \"Element of set in IN, VALUES or LIMIT or aggregate function parameter \"\n+                        \"Element of set in IN, VALUES, or LIMIT, or aggregate function parameter, or a table function argument \"\n                         \"is not a constant expression (result column not found): {}\", result_name);\n \n     if (result_column->empty())\n         throw Exception(ErrorCodes::LOGICAL_ERROR,\n                         \"Logical error: empty result column after evaluation \"\n-                        \"of constant expression for IN, VALUES or LIMIT or aggregate function parameter\");\n+                        \"of constant expression for IN, VALUES, or LIMIT, or aggregate function parameter, or a table function argument\");\n \n     /// Expressions like rand() or now() are not constant\n     if (!isColumnConst(*result_column))\n         throw Exception(ErrorCodes::BAD_ARGUMENTS,\n-                        \"Element of set in IN, VALUES or LIMIT or aggregate function parameter \"\n+                        \"Element of set in IN, VALUES, or LIMIT, or aggregate function parameter, or a table function argument \"\n                         \"is not a constant expression (result column is not const): {}\", result_name);\n \n     return std::make_pair((*result_column)[0], result_type);\ndiff --git a/src/Parsers/ASTSetQuery.cpp b/src/Parsers/ASTSetQuery.cpp\nindex 0b8d76dbb893..76ad812e7136 100644\n--- a/src/Parsers/ASTSetQuery.cpp\n+++ b/src/Parsers/ASTSetQuery.cpp\n@@ -64,4 +64,14 @@ void ASTSetQuery::formatImpl(const FormatSettings & format, FormatState &, Forma\n     }\n }\n \n+void ASTSetQuery::appendColumnName(WriteBuffer & ostr) const\n+{\n+    Hash hash = getTreeHash();\n+\n+    writeCString(\"__settings_\", ostr);\n+    writeText(hash.first, ostr);\n+    ostr.write('_');\n+    writeText(hash.second, ostr);\n+}\n+\n }\ndiff --git a/src/Parsers/ASTSetQuery.h b/src/Parsers/ASTSetQuery.h\nindex 40abe2de31d2..beed052c79a9 100644\n--- a/src/Parsers/ASTSetQuery.h\n+++ b/src/Parsers/ASTSetQuery.h\n@@ -37,6 +37,9 @@ class ASTSetQuery : public IAST\n     void updateTreeHashImpl(SipHash & hash_state) const override;\n \n     QueryKind getQueryKind() const override { return QueryKind::Set; }\n+\n+    void appendColumnName(WriteBuffer & ostr) const override;\n+    void appendColumnNameWithoutAlias(WriteBuffer & ostr) const override { return appendColumnName(ostr); }\n };\n \n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02815_logical_error_cannot_get_column_name_of_set.reference b/tests/queries/0_stateless/02815_logical_error_cannot_get_column_name_of_set.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/02815_logical_error_cannot_get_column_name_of_set.sql b/tests/queries/0_stateless/02815_logical_error_cannot_get_column_name_of_set.sql\nnew file mode 100644\nindex 000000000000..aa6591659400\n--- /dev/null\n+++ b/tests/queries/0_stateless/02815_logical_error_cannot_get_column_name_of_set.sql\n@@ -0,0 +1,3 @@\n+SELECT * FROM numbers(SETTINGS x = 1); -- { serverError BAD_ARGUMENTS }\n+SELECT * FROM numbers(numbers(SETTINGS x = 1)); -- { serverError UNKNOWN_FUNCTION, UNSUPPORTED_METHOD }\n+SELECT * FROM numbers(numbers(SETTINGS x = 1), SETTINGS x = 1); -- { serverError UNKNOWN_FUNCTION, UNSUPPORTED_METHOD }\n",
  "problem_statement": "trying to get name of not a column: Set for table function\n```sql\r\n\r\nSELECT count() FROM mysql(mysql('127.0.0.1:9004', currentDatabase(), foo, 'default', '', SETTINGS connection_pool_size = 1), '127.0.0.1:9004', currentDatabase(), foo, '', '')\r\n\r\n```\r\n\r\nhttps://s3.amazonaws.com/clickhouse-test-reports/47316/027db789d6a40fa11a3dfbc93bbda1825a8371d6/fuzzer_astfuzzerasan/report.html\r\n\r\nhttps://s3.amazonaws.com/clickhouse-test-reports/47316/027db789d6a40fa11a3dfbc93bbda1825a8371d6/fuzzer_astfuzzerubsan/report.html\r\n\n",
  "hints_text": "https://s3.amazonaws.com/clickhouse-test-reports/0/5d64841276d5439c9ed0066eaf7afc19f78b664a/fuzzer_astfuzzerasan/report.html\nNot fixed :(\n`SELECT * FROM numbers(SETTINGS x = 1)`",
  "created_at": "2023-07-16T21:23:22Z",
  "modified_files": [
    "src/Interpreters/ActionsVisitor.cpp",
    "src/Interpreters/evaluateConstantExpression.cpp",
    "src/Parsers/ASTSetQuery.cpp",
    "src/Parsers/ASTSetQuery.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02815_logical_error_cannot_get_column_name_of_set.sql"
  ]
}