diff --git a/src/Storages/MergeTree/KeyCondition.cpp b/src/Storages/MergeTree/KeyCondition.cpp
index 09b99888cf72..d23c76fc3fd9 100644
--- a/src/Storages/MergeTree/KeyCondition.cpp
+++ b/src/Storages/MergeTree/KeyCondition.cpp
@@ -2901,9 +2901,41 @@ std::optional<Range> KeyCondition::applyMonotonicFunctionsChainToRange(
 // This allows to use a more efficient lookup with no extra reads.
 bool KeyCondition::matchesExactContinuousRange() const
 {
-    // Not implemented yet.
-    if (hasMonotonicFunctionsChain())
-        return false;
+    const Field field{};
+    auto is_always_monotonic_chain = [&field](const std::vector<FunctionBasePtr> & chain)
+    {
+        for (const auto & func : chain)
+        {
+            if (!func || !func->hasInformationAboutMonotonicity())
+                return false;
+
+            const auto & types = func->getArgumentTypes();
+            if (types.empty() || !types.front())
+                return false;
+
+            const auto monotonicity = func->getMonotonicityForRange(*types.front(), field, field);
+            if (!monotonicity.is_always_monotonic)
+                return false;
+        }
+
+        return true;
+    };
+
+    for (const auto & elem : rpn)
+    {
+        if (!elem.monotonic_functions_chain.empty() && !is_always_monotonic_chain(elem.monotonic_functions_chain))
+            return false;
+
+        if (elem.set_index)
+        {
+            if (elem.function != RPNElement::Function::FUNCTION_IN_SET || elem.set_index->size() != 1)
+                return false;
+
+            for (const auto & mapping : elem.set_index->getIndexesMapping())
+                if (!mapping.functions.empty() && !is_always_monotonic_chain(mapping.functions))
+                    return false;
+        }
+    }
 
     enum Constraint
     {
@@ -2945,6 +2977,11 @@ bool KeyCondition::matchesExactContinuousRange() const
             continue;
         }
 
+        if (element.function == RPNElement::Function::ALWAYS_TRUE)
+        {
+            continue;
+        }
+
         return false;
     }
 
