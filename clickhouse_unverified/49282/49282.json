{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 49282,
  "instance_id": "ClickHouse__ClickHouse-49282",
  "issue_numbers": [
    "49280"
  ],
  "base_commit": "9a6761679113da75b96841d6d9c5c54123126145",
  "patch": "diff --git a/src/Interpreters/Aggregator.cpp b/src/Interpreters/Aggregator.cpp\nindex f11792afcc7c..7df36e8600ae 100644\n--- a/src/Interpreters/Aggregator.cpp\n+++ b/src/Interpreters/Aggregator.cpp\n@@ -2102,6 +2102,7 @@ Aggregator::convertToBlockImplNotFinal(Method & method, Table & data, Arenas & a\n \n     std::optional<OutputBlockColumns> out_cols;\n     std::optional<Sizes> shuffled_key_sizes;\n+    size_t rows_in_current_block = 0;\n \n     auto init_out_cols = [&]()\n     {\n@@ -2116,6 +2117,7 @@ Aggregator::convertToBlockImplNotFinal(Method & method, Table & data, Arenas & a\n                 for (size_t i = 0; i < params.aggregates_size; ++i)\n                     out_cols->aggregate_columns_data[i]->push_back(data.getNullKeyData() + offsets_of_aggregate_states[i]);\n \n+                ++rows_in_current_block;\n                 data.getNullKeyData() = nullptr;\n                 data.hasNullKeyData() = false;\n             }\n@@ -2127,8 +2129,6 @@ Aggregator::convertToBlockImplNotFinal(Method & method, Table & data, Arenas & a\n     // should be invoked at least once, because null data might be the only content of the `data`\n     init_out_cols();\n \n-    size_t rows_in_current_block = 0;\n-\n     data.forEachValue(\n         [&](const auto & key, auto & mapped)\n         {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02725_null_group_key_with_rollup.reference b/tests/queries/0_stateless/02725_null_group_key_with_rollup.reference\nnew file mode 100644\nindex 000000000000..e296f838e48f\n--- /dev/null\n+++ b/tests/queries/0_stateless/02725_null_group_key_with_rollup.reference\n@@ -0,0 +1,10 @@\n+\\N\t2\n+\n+\\N\t2\n+\\N\t2\n+\n+\\N\t2\n+\\N\t2\n+\\N\t2\n+\\N\t2\n+\\N\t2\ndiff --git a/tests/queries/0_stateless/02725_null_group_key_with_rollup.sql b/tests/queries/0_stateless/02725_null_group_key_with_rollup.sql\nnew file mode 100644\nindex 000000000000..98f354e29115\n--- /dev/null\n+++ b/tests/queries/0_stateless/02725_null_group_key_with_rollup.sql\n@@ -0,0 +1,13 @@\n+set allow_suspicious_low_cardinality_types=1;\n+DROP TABLE IF EXISTS group_by_null_key;\n+CREATE TABLE group_by_null_key (c1 Nullable(Int32), c2 LowCardinality(Nullable(Int32))) ENGINE = Memory();\n+INSERT INTO group_by_null_key VALUES (null, null), (null, null);\n+\n+select c1, count(*) from group_by_null_key group by c1 WITH TOTALS;\n+select c2, count(*) from group_by_null_key group by c2 WITH TOTALS;\n+\n+select c1, count(*) from group_by_null_key group by ROLLUP(c1);\n+select c2, count(*) from group_by_null_key group by ROLLUP(c2);\n+\n+\n+DROP TABLE group_by_null_key;\n",
  "problem_statement": "Group by null value key use rollup with wrong answer\n**Describe what's wrong**\r\nWhen column is Nullable or with LowCardinality.  `ROLLUP`,`WITH TOTALS` returns unexpected results.\r\n\r\nTo be precise, when the aggregated key is only null, and the aggregate is issued in `convertToBlockImplNotFinal` in `Aggregator.cpp`, the returned result is ignored\r\n\r\nhttps://fiddle.clickhouse.com/e38e044e-dbb5-4ebb-a395-4ca0b4facb88\r\n\r\n\r\n**How to reproduce**\r\n```sql\r\nCREATE TABLE group_by_null_key (c1 Nullable(Int32), c2 LowCardinality(Nullable(Int32))) ENGINE = Memory();\r\nINSERT INTO group_by_null_key VALUES (null, null), (null, null);\r\n\r\nselect c1, count(*) from group_by_null_key group by c1 WITH TOTALS;\r\nselect c2, count(*) from group_by_null_key group by ROLLUP(c2);\r\n```\r\n\r\n**Expected behavior**\r\n\r\n```text\r\n\u250c\u2500\u2500\u2500c1\u2500\u252c\u2500count()\u2500\u2510\r\n\u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502       2 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\u250c\u2500\u2500\u2500c1\u2500\u252c\u2500count()\u2500\u2510\r\n\u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502       2 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n---\r\n\r\n\u250c\u2500\u2500\u2500c2\u2500\u252c\u2500count()\u2500\u2510\r\n\u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502       2 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\u250c\u2500\u2500\u2500c2\u2500\u252c\u2500count()\u2500\u2510\r\n\u2502 \u1d3a\u1d41\u1d38\u1d38 \u2502       2 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n```\r\n\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2023-04-27T15:08:07Z"
}