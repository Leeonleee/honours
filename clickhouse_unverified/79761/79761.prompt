You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Duplicates of local replica data with max_replica_delay_for_distributed_queries setting
### Company or project name

_No response_

### Describe the unexpected behaviour

When executing a query with the max_replica_delay_for_distributed_queries setting, I am getting duplicate rows that are stored on the current stale replica.


### How to reproduce

clickhouse: 25.3.2.39
clickhouse-keeper: 25.3.2

My test cluster consists of 2 shards, with 2 replicas per shard.

Here is the DDL to create the tables:
```sql
CREATE TABLE test_table ON CLUSTER 'my_cluster'
(
    id UInt64,
    value String,
    timestamp                 DateTime        DEFAULT toDateTime(now())
) ENGINE = ReplicatedReplacingMergeTree('/clickhouse/tables/{shard}/{database}/test_table', '{replica}', timestamp)
    ORDER BY (id);

CREATE TABLE test_table_dist ON CLUSTER 'my_cluster'
(
    id UInt64,
    value String,
    timestamp                 DateTime        DEFAULT toDateTime(now())
)
    ENGINE = Distributed('my_cluster', 'default', 'test_table', id);
```

Next, insert some data into the table.
In my case, I used the following rows:

```sql
INSERT INTO default.test_table_dist (id, value, timestamp)
VALUES  (1, 'v1', '2025-04-26 22:54:34'),
        (2, 'v2', '2025-04-26 22:54:34'),
        (3, 'v3', '2025-04-26 22:54:34'),
        (4, 'v4', '2025-04-26 22:54:34'),
        (5, 'v5', '2025-04-26 22:59:48');
```

Then, on node 12 (shard 1, replica 2), execute the following query to stop replication queues:
```sql
SYSTEM STOP REPLICATION QUEUES default.test_table;
```

After that, insert a new row into replica 11:
```sql
INSERT INTO test_table_dist
SELECT 6 AS id, 'v6' as value, toDateTime(now()) as timestamp;
```

Now, select data on replica 12:
```sql
SELECT *
FROM test_table_dist
ORDER BY id
SETTINGS max_replica_delay_for_distributed_queries=5;
```
result:
```
+--+-----+-------------------+
|id|value|timestamp          |
+--+-----+-------------------+
|1 |v1   |2025-04-26 22:54:34|
|2 |v2   |2025-04-26 22:54:34|
|3 |v3   |2025-04-26 22:54:34|
|4 |v4   |2025-04-26 22:54:34|
|2 |v2   |2025-04-26 22:54:34|
|4 |v4   |2025-04-26 22:54:34|
|5 |v5   |2025-04-26 22:59:48|
|6 |v6   |2025-04-26 23:01:32|
+--+-----+-------------------+
```

The result on the other cluster nodes:
```
+--+-----+-------------------+
|id|value|timestamp          |
+--+-----+-------------------+
|1 |v1   |2025-04-26 22:54:34|
|2 |v2   |2025-04-26 22:54:34|
|3 |v3   |2025-04-26 22:54:34|
|4 |v4   |2025-04-26 22:54:34|
|5 |v5   |2025-04-26 22:59:48|
|6 |v6   |2025-04-26 23:01:32|
+--+-----+-------------------+
```


### Expected behavior

When selecting data from a distributed table with ‘max_replica_delay_for_distributed_queries’ enabled on a lagging replica, the result must not include duplicate data from the local source table.

### Error message and/or stacktrace

_No response_

### Additional context

_No response_
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
