{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 42940,
  "instance_id": "ClickHouse__ClickHouse-42940",
  "issue_numbers": [
    "41418"
  ],
  "base_commit": "cacbce059e28ddda5388efc6cd326d410dcef0d4",
  "patch": "diff --git a/src/Common/Exception.cpp b/src/Common/Exception.cpp\nindex 399ccecf0008..352313546518 100644\n--- a/src/Common/Exception.cpp\n+++ b/src/Common/Exception.cpp\n@@ -15,6 +15,7 @@\n #include <Common/formatReadable.h>\n #include <Common/filesystemHelpers.h>\n #include <Common/ErrorCodes.h>\n+#include <Common/SensitiveDataMasker.h>\n #include <Common/LockMemoryExceptionInThread.h>\n #include <filesystem>\n \n@@ -63,11 +64,18 @@ void handle_error_code([[maybe_unused]] const std::string & msg, int code, bool\n     ErrorCodes::increment(code, remote, msg, trace);\n }\n \n-Exception::Exception(const std::string & msg, int code, bool remote_)\n-    : Poco::Exception(msg, code)\n+Exception::MessageMasked::MessageMasked(const std::string & msg_)\n+    : msg(msg_)\n+{\n+    if (auto * masker = SensitiveDataMasker::getInstance())\n+        masker->wipeSensitiveData(msg);\n+}\n+\n+Exception::Exception(const MessageMasked & msg_masked, int code, bool remote_)\n+    : Poco::Exception(msg_masked.msg, code)\n     , remote(remote_)\n {\n-    handle_error_code(msg, code, remote, getStackFramePointers());\n+    handle_error_code(msg_masked.msg, code, remote, getStackFramePointers());\n }\n \n Exception::Exception(CreateFromPocoTag, const Poco::Exception & exc)\ndiff --git a/src/Common/Exception.h b/src/Common/Exception.h\nindex 84687581e52a..169479a79189 100644\n--- a/src/Common/Exception.h\n+++ b/src/Common/Exception.h\n@@ -27,7 +27,19 @@ class Exception : public Poco::Exception\n     using FramePointers = std::vector<void *>;\n \n     Exception() = default;\n-    Exception(const std::string & msg, int code, bool remote_ = false);\n+\n+    // used to remove the sensitive information from exceptions if query_masking_rules is configured\n+    struct MessageMasked\n+    {\n+        std::string msg;\n+        MessageMasked(const std::string & msg_);\n+    };\n+\n+    Exception(const MessageMasked & msg_masked, int code, bool remote_);\n+\n+    // delegating constructor to mask sensitive information from the message\n+    Exception(const std::string & msg, int code, bool remote_ = false): Exception(MessageMasked(msg), code, remote_)\n+    {}\n \n     Exception(int code, const std::string & message)\n         : Exception(message, code)\n@@ -54,12 +66,17 @@ class Exception : public Poco::Exception\n     template <typename... Args>\n     void addMessage(fmt::format_string<Args...> format, Args &&... args)\n     {\n-        extendedMessage(fmt::format(format, std::forward<Args>(args)...));\n+        addMessage(fmt::format(format, std::forward<Args>(args)...));\n     }\n \n     void addMessage(const std::string& message)\n     {\n-        extendedMessage(message);\n+        addMessage(MessageMasked(message));\n+    }\n+\n+    void addMessage(const MessageMasked & msg_masked)\n+    {\n+        extendedMessage(msg_masked.msg);\n     }\n \n     /// Used to distinguish local exceptions from the one that was received from remote node.\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00956_sensitive_data_masking.reference b/tests/queries/0_stateless/00956_sensitive_data_masking.reference\nindex 86323ec45e84..457ab9118f1e 100644\n--- a/tests/queries/0_stateless/00956_sensitive_data_masking.reference\n+++ b/tests/queries/0_stateless/00956_sensitive_data_masking.reference\n@@ -1,11 +1,14 @@\n 1\n 2\n 3\n+3.1\n 4\n 5\n 5.1\n 6\n 7\n+7.1\n+7.2\n 8\n 9\n text_log non empty\ndiff --git a/tests/queries/0_stateless/00956_sensitive_data_masking.sh b/tests/queries/0_stateless/00956_sensitive_data_masking.sh\nindex e36031c54bec..ccd9bbcf10ec 100755\n--- a/tests/queries/0_stateless/00956_sensitive_data_masking.sh\n+++ b/tests/queries/0_stateless/00956_sensitive_data_masking.sh\n@@ -37,12 +37,20 @@ rm -f \"$tmp_file\" >/dev/null 2>&1\n echo 3\n # failure at before query start\n $CLICKHOUSE_CLIENT \\\n-  --query=\"SELECT 'find_me_TOPSECRET=TOPSECRET' FROM non_existing_table FORMAT Null\" \\\n+  --query=\"SELECT 1 FROM system.numbers WHERE credit_card_number='find_me_TOPSECRET=TOPSECRET' FORMAT Null\" \\\n   --log_queries=1 --ignore-error --multiquery |& grep -v '^(query: ' > \"$tmp_file\"\n \n grep -F 'find_me_[hidden]' \"$tmp_file\" >/dev/null || echo 'fail 3a'\n grep -F 'TOPSECRET' \"$tmp_file\" && echo 'fail 3b'\n \n+echo '3.1'\n+echo \"SELECT 1 FROM system.numbers WHERE credit_card_number='find_me_TOPSECRET=TOPSECRET' FORMAT Null\" | ${CLICKHOUSE_CURL} -sSg \"${CLICKHOUSE_URL}\" -d @- >\"$tmp_file\" 2>&1\n+\n+grep -F 'find_me_[hidden]' \"$tmp_file\" >/dev/null || echo 'fail 3.1a'\n+grep -F 'TOPSECRET' \"$tmp_file\" && echo 'fail 3.1b'\n+\n+#echo \"SELECT 1 FROM system.numbers WHERE credit_card_number='find_me_TOPSECRET=TOPSECRET' FORMAT Null\" | curl -sSg http://172.17.0.3:8123/ -d @-\n+\n rm -f \"$tmp_file\" >/dev/null 2>&1\n echo 4\n # failure at the end of query\n@@ -100,6 +108,21 @@ $CLICKHOUSE_CLIENT \\\n   --server_logs_file=/dev/null \\\n   --query=\"select * from system.query_log where current_database = currentDatabase() AND event_date >= yesterday() and query like '%TOPSECRET%';\"\n \n+echo '7.1'\n+# query_log exceptions\n+$CLICKHOUSE_CLIENT \\\n+  --server_logs_file=/dev/null \\\n+  --query=\"select * from system.query_log where current_database = currentDatabase() AND event_date >= yesterday() and exception like '%TOPSECRET%'\"\n+\n+echo '7.2'\n+\n+# not perfect: when run in parallel with other tests that check can give false-negative result\n+# because other tests can overwrite the last_error_message, where we check the absence of sensitive data.\n+# But it's still good enough for CI - in case of regressions it will start flapping (normally it shouldn't)\n+$CLICKHOUSE_CLIENT \\\n+  --server_logs_file=/dev/null \\\n+  --query=\"select * from system.errors where last_error_message like '%TOPSECRET%';\"\n+\n \n rm -f \"$tmp_file\" >/dev/null 2>&1\n echo 8\n",
  "problem_statement": "query_masking_rules not work for exception messages at query_log\nversion 22.8.4.7\r\n\r\nHow to reproduce:\r\n\r\n1. Add section to config.xml\r\n`    <query_masking_rules>\r\n        <rule>\r\n            <name>hide encrypt/decrypt arguments</name>\r\n            <regexp>((?:aes_)?(?:encrypt|decrypt)(?:_mysql)?)\\s*\\(\\s*(?:'(?:\\\\'|.)+'|.*?)\\s*\\)</regexp>\r\n            <!-- or more secure, but also more invasive:\r\n                (aes_\\w+)\\s*\\(.*\\)\r\n            -->\r\n            <replace>\\1(???)</replace>\r\n        </rule>\r\n    </query_masking_rules>\r\n`\r\n2. Run query and get exception\r\n`select decrypt('aes-256-ecb', 'my_text', 'mykey123451234512345123451234512');` \r\n\r\n3. Check query_log\r\n`select exception, query from system.query_log\r\nwhere exception_code>0\r\norder by event_time desc\r\nlimit 1`\r\n\r\nHere we have masked query \r\n`select decrypt(???)`\r\nAnd not masked exception message\r\n`Code: 454. DB::Exception: Failed to decrypt. OpenSSL error code: 503316603: While processing decrypt('aes-256-ecb', 'my_text', 'mykey123451234512345123451234512'). (OPENSSL_ERROR) (version 22.8.4.7 (official build))`\r\nAnd for example, i can easily get encrypt key from the exception message\n",
  "hints_text": "This is a task for @filimonov who is responsible for supporting the \"query masking rules\" feature.\nAck.",
  "created_at": "2022-11-03T18:12:27Z",
  "modified_files": [
    "src/Common/Exception.cpp",
    "src/Common/Exception.h"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/00956_sensitive_data_masking.reference",
    "tests/queries/0_stateless/00956_sensitive_data_masking.sh"
  ]
}