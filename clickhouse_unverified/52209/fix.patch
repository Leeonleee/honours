diff --git a/docs/en/sql-reference/functions/string-functions.md b/docs/en/sql-reference/functions/string-functions.md
index 4f174a53ad67..9890d257e84b 100644
--- a/docs/en/sql-reference/functions/string-functions.md
+++ b/docs/en/sql-reference/functions/string-functions.md
@@ -1267,3 +1267,36 @@ Like [initcap](#initcap), assuming that the string contains valid UTF-8 encoded
 Does not detect the language, e.g. for Turkish the result might not be exactly correct (i/İ vs. i/I).
 
 If the length of the UTF-8 byte sequence is different for upper and lower case of a code point, the result may be incorrect for this code point.
+
+## firstLine
+
+Returns the first line from a multi-line string.
+
+**Syntax**
+
+```sql
+firstLine(val)
+```
+
+**Arguments**
+
+- `val` - Input value. [String](../data-types/string.md)
+
+**Returned value**
+
+- The first line of the input value or the whole value if there is no line
+  separators. [String](../data-types/string.md)
+
+**Example**
+
+```sql
+select firstLine('foo
bar
baz');
+```
+
+Result:
+
+```result
+┌─firstLine('foo
bar
baz')─┐
+│ foo                        │
+└────────────────────────────┘
+```
diff --git a/docs/ru/sql-reference/functions/string-functions.md b/docs/ru/sql-reference/functions/string-functions.md
index b872200f99b6..276dfc2ef203 100644
--- a/docs/ru/sql-reference/functions/string-functions.md
+++ b/docs/ru/sql-reference/functions/string-functions.md
@@ -1124,3 +1124,39 @@ Do Nothing for 2 Minutes 2:00 &nbsp;
 Не учитывает язык. То есть, для турецкого языка, результат может быть не совсем верным.
 Если длина UTF-8 последовательности байтов различна для верхнего и нижнего регистра кодовой точки, то для этой кодовой точки результат работы может быть некорректным.
 Если строка содержит набор байтов, не являющийся UTF-8, то поведение не определено.
+
+## firstLine
+
+Возвращает первую строку в многострочном тексте.
+
+**Синтаксис**
+
+```sql
+firstLine(val)
+```
+
+**Аргументы**
+
+- `val` - текст для обработки. [String](../data-types/string.md)
+
+**Returned value**
+
+- Первая строка текста или весь текст, если переносы строк отсутствуют.
+
+Тип: [String](../data-types/string.md)
+
+**Пример**
+
+Запрос:
+
+```sql
+select firstLine('foo
bar
baz');
+```
+
+Результат:
+
+```result
+┌─firstLine('foo
bar
baz')─┐
+│ foo                        │
+└────────────────────────────┘
+```
diff --git a/src/Functions/URL/FunctionsURL.h b/src/Functions/StringHelpers.h
similarity index 93%
rename from src/Functions/URL/FunctionsURL.h
rename to src/Functions/StringHelpers.h
index 362042e31e19..8f3a87d5d0e3 100644
--- a/src/Functions/URL/FunctionsURL.h
+++ b/src/Functions/StringHelpers.h
@@ -7,8 +7,8 @@
 namespace DB
 {
 
-/** URL processing functions. See implementation in separate .cpp files.
-  * All functions are not strictly follow RFC, instead they are maximally simplified for performance reasons.
+/** These helpers are used by URL processing functions. See implementation in separate .cpp files.
+  * All functions do not strictly follow RFC, instead they are maximally simplified for performance reasons.
   *
   * Functions for extraction parts of URL.
   * If URL has nothing like, then empty string is returned.
@@ -101,7 +101,7 @@ struct ExtractSubstringImpl
 
     static void vectorFixed(const ColumnString::Chars &, size_t, ColumnString::Chars &)
     {
-        throw Exception(ErrorCodes::ILLEGAL_COLUMN, "Column of type FixedString is not supported by URL functions");
+        throw Exception(ErrorCodes::ILLEGAL_COLUMN, "Column of type FixedString is not supported by this function");
     }
 };
 
@@ -156,7 +156,7 @@ struct CutSubstringImpl
 
     static void vectorFixed(const ColumnString::Chars &, size_t, ColumnString::Chars &)
     {
-        throw Exception(ErrorCodes::ILLEGAL_COLUMN, "Column of type FixedString is not supported by URL functions");
+        throw Exception(ErrorCodes::ILLEGAL_COLUMN, "Column of type FixedString is not supported by this function");
     }
 };
 
diff --git a/src/Functions/URL/FirstSignificantSubdomainCustomImpl.h b/src/Functions/URL/FirstSignificantSubdomainCustomImpl.h
index 5862265ce7df..93691e357412 100644
--- a/src/Functions/URL/FirstSignificantSubdomainCustomImpl.h
+++ b/src/Functions/URL/FirstSignificantSubdomainCustomImpl.h
@@ -1,8 +1,8 @@
 #pragma once
 
 #include <Functions/FunctionFactory.h>
-#include <Functions/URL/FunctionsURL.h>
 #include <Functions/FunctionHelpers.h>
+#include <Functions/StringHelpers.h>
 #include <DataTypes/DataTypeString.h>
 #include <Columns/ColumnString.h>
 #include <Columns/ColumnFixedString.h>
diff --git a/src/Functions/URL/basename.cpp b/src/Functions/URL/basename.cpp
index 6992f924ef20..bc747e2595fe 100644
--- a/src/Functions/URL/basename.cpp
+++ b/src/Functions/URL/basename.cpp
@@ -1,7 +1,7 @@
 #include <Functions/FunctionFactory.h>
 #include <Functions/FunctionStringToString.h>
+#include <Functions/StringHelpers.h>
 #include <base/find_symbols.h>
-#include "FunctionsURL.h"
 
 namespace DB
 {
diff --git a/src/Functions/URL/fragment.h b/src/Functions/URL/fragment.h
index 6c11d0fbb34e..0414c4f64a23 100644
--- a/src/Functions/URL/fragment.h
+++ b/src/Functions/URL/fragment.h
@@ -1,7 +1,7 @@
 #pragma once
 
-#include "FunctionsURL.h"
 #include <base/find_symbols.h>
+#include <Functions/StringHelpers.h>
 
 namespace DB
 {
diff --git a/src/Functions/URL/netloc.cpp b/src/Functions/URL/netloc.cpp
index bc34e34a40d6..bf3e8a471ef3 100644
--- a/src/Functions/URL/netloc.cpp
+++ b/src/Functions/URL/netloc.cpp
@@ -1,7 +1,7 @@
 #include <Common/StringUtils/StringUtils.h>
 #include <Functions/FunctionFactory.h>
 #include <Functions/FunctionStringToString.h>
-#include <Functions/URL/FunctionsURL.h>
+#include <Functions/StringHelpers.h>
 
 
 namespace DB
@@ -154,4 +154,3 @@ REGISTER_FUNCTION(Netloc)
 }
 
 }
-
diff --git a/src/Functions/URL/path.cpp b/src/Functions/URL/path.cpp
index ccc7dedb724e..8d609f431916 100644
--- a/src/Functions/URL/path.cpp
+++ b/src/Functions/URL/path.cpp
@@ -1,6 +1,6 @@
 #include <Functions/FunctionFactory.h>
 #include <Functions/FunctionStringToString.h>
-#include "FunctionsURL.h"
+#include <Functions/StringHelpers.h>
 #include "path.h"
 #include <base/find_symbols.h>
 
diff --git a/src/Functions/URL/path.h b/src/Functions/URL/path.h
index 89244659088e..a0dd5eea2d3d 100644
--- a/src/Functions/URL/path.h
+++ b/src/Functions/URL/path.h
@@ -1,7 +1,7 @@
 #pragma once
 
 #include <base/find_symbols.h>
-#include <Functions/URL/FunctionsURL.h>
+#include <Functions/StringHelpers.h>
 
 
 namespace DB
diff --git a/src/Functions/URL/pathFull.cpp b/src/Functions/URL/pathFull.cpp
index 002770e812a7..9aacee21fed3 100644
--- a/src/Functions/URL/pathFull.cpp
+++ b/src/Functions/URL/pathFull.cpp
@@ -1,6 +1,6 @@
 #include <Functions/FunctionFactory.h>
 #include <Functions/FunctionStringToString.h>
-#include "FunctionsURL.h"
+#include <Functions/StringHelpers.h>
 #include "path.h"
 #include <base/find_symbols.h>
 
diff --git a/src/Functions/URL/protocol.h b/src/Functions/URL/protocol.h
index 74c0bb820b43..c1d831928351 100644
--- a/src/Functions/URL/protocol.h
+++ b/src/Functions/URL/protocol.h
@@ -1,7 +1,7 @@
 #pragma once
 
-#include "FunctionsURL.h"
 #include <Common/StringUtils/StringUtils.h>
+#include <Functions/StringHelpers.h>
 
 
 namespace DB
@@ -54,4 +54,3 @@ struct ExtractProtocol
 };
 
 }
-
diff --git a/src/Functions/URL/queryString.h b/src/Functions/URL/queryString.h
index a0777a5c9a1f..603450d102b8 100644
--- a/src/Functions/URL/queryString.h
+++ b/src/Functions/URL/queryString.h
@@ -1,7 +1,7 @@
 #pragma once
 
-#include "FunctionsURL.h"
 #include <base/find_symbols.h>
+#include <Functions/StringHelpers.h>
 
 
 namespace DB
diff --git a/src/Functions/URL/queryStringAndFragment.h b/src/Functions/URL/queryStringAndFragment.h
index ed19cd14b744..27008388e4d6 100644
--- a/src/Functions/URL/queryStringAndFragment.h
+++ b/src/Functions/URL/queryStringAndFragment.h
@@ -1,7 +1,7 @@
 #pragma once
 
-#include "FunctionsURL.h"
 #include <base/find_symbols.h>
+#include <Functions/StringHelpers.h>
 
 
 namespace DB
@@ -34,4 +34,3 @@ struct ExtractQueryStringAndFragment
 };
 
 }
-
diff --git a/src/Functions/firstLine.cpp b/src/Functions/firstLine.cpp
new file mode 100644
index 000000000000..20b47361d58a
--- /dev/null
+++ b/src/Functions/firstLine.cpp
@@ -0,0 +1,42 @@
+#include <Functions/FunctionFactory.h>
+#include <Functions/FunctionStringToString.h>
+#include <Functions/StringHelpers.h>
+#include <base/find_symbols.h>
+
+namespace DB
+{
+
+struct FirstLine
+{
+    static size_t getReserveLengthForElement() { return 16; }
+
+    static void execute(Pos data, size_t size, Pos & res_data, size_t & res_size)
+    {
+        res_data = data;
+
+        const Pos end = data + size;
+        const Pos pos = find_first_symbols<'\r', '
'>(data, end);
+        res_size = pos - data;
+    }
+};
+
+struct NameFirstLine
+{
+    static constexpr auto name = "firstLine";
+};
+
+using FunctionFirstLine = FunctionStringToString<ExtractSubstringImpl<FirstLine>, NameFirstLine>;
+
+REGISTER_FUNCTION(FirstLine)
+{
+    factory.registerFunction<FunctionFirstLine>(FunctionDocumentation{
+        .description = "Returns first line of a multi-line string.",
+        .syntax = "firstLine(string)",
+        .arguments = {{.name = "string", .description = "The string to process."}},
+        .returned_value = {"The first line of the string or the whole string if there is no line separators."},
+        .examples = {
+            {.name = "Return first line", .query = "firstLine('Hello\
World')", .result = "'Hello'"},
+            {.name = "Return whole string", .query = "firstLine('Hello World')", .result = "'Hello World'"},
+        }});
+}
+}
diff --git a/utils/check-style/aspell-ignore/en/aspell-dict.txt b/utils/check-style/aspell-ignore/en/aspell-dict.txt
index 6c88d63be49e..57934b287282 100644
--- a/utils/check-style/aspell-ignore/en/aspell-dict.txt
+++ b/utils/check-style/aspell-ignore/en/aspell-dict.txt
@@ -1428,6 +1428,7 @@ filesystemFree
 filesystems
 finalizeAggregation
 fips
+firstLine
 firstSignificantSubdomain
 firstSignificantSubdomainCustom
 fixedstring
