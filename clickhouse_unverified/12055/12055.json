{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 12055,
  "instance_id": "ClickHouse__ClickHouse-12055",
  "issue_numbers": [
    "9766"
  ],
  "base_commit": "dd9b02c2fb2fb8e19de489da60c8c409b6185737",
  "patch": "diff --git a/src/Functions/array/FunctionArrayMapped.h b/src/Functions/array/FunctionArrayMapped.h\nindex 346f2e35555f..2a040f80efef 100644\n--- a/src/Functions/array/FunctionArrayMapped.h\n+++ b/src/Functions/array/FunctionArrayMapped.h\n@@ -73,7 +73,7 @@ class FunctionArrayMapped : public IFunction\n             if (!array_type)\n                 throw Exception(\"Argument \" + toString(i + 2) + \" of function \" + getName() + \" must be array. Found \"\n                                 + arguments[i + 1]->getName() + \" instead.\", ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n-            nested_types[i] = removeLowCardinality(array_type->getNestedType());\n+            nested_types[i] = recursiveRemoveLowCardinality(array_type->getNestedType());\n         }\n \n         const DataTypeFunction * function_type = checkAndGetDataType<DataTypeFunction>(arguments[0].get());\n@@ -190,9 +190,7 @@ class FunctionArrayMapped : public IFunction\n                     const ColumnConst * column_const_array = checkAndGetColumnConst<ColumnArray>(column_array_ptr.get());\n                     if (!column_const_array)\n                         throw Exception(\"Expected array column, found \" + column_array_ptr->getName(), ErrorCodes::ILLEGAL_COLUMN);\n-                    column_array_ptr = column_const_array->convertToFullColumn();\n-                    if (column_array_ptr->lowCardinality())\n-                        column_array_ptr = column_array_ptr->convertToFullColumnIfLowCardinality();\n+                    column_array_ptr = recursiveRemoveLowCardinality(column_const_array->convertToFullColumn());\n                     column_array = checkAndGetColumn<ColumnArray>(column_array_ptr.get());\n                 }\n \n@@ -218,7 +216,7 @@ class FunctionArrayMapped : public IFunction\n                 }\n \n                 arrays.emplace_back(ColumnWithTypeAndName(column_array->getDataPtr(),\n-                                                          removeLowCardinality(array_type->getNestedType()),\n+                                                          recursiveRemoveLowCardinality(array_type->getNestedType()),\n                                                           array_with_type_and_name.name));\n             }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01354_tuple_low_cardinality_array_mapped_bug.reference b/tests/queries/0_stateless/01354_tuple_low_cardinality_array_mapped_bug.reference\nnew file mode 100644\nindex 000000000000..aa47d0d46d47\n--- /dev/null\n+++ b/tests/queries/0_stateless/01354_tuple_low_cardinality_array_mapped_bug.reference\n@@ -0,0 +1,2 @@\n+0\n+0\ndiff --git a/tests/queries/0_stateless/01354_tuple_low_cardinality_array_mapped_bug.sql b/tests/queries/0_stateless/01354_tuple_low_cardinality_array_mapped_bug.sql\nnew file mode 100644\nindex 000000000000..80a1a7c46ebf\n--- /dev/null\n+++ b/tests/queries/0_stateless/01354_tuple_low_cardinality_array_mapped_bug.sql\n@@ -0,0 +1,8 @@\n+SELECT arrayExists(x -> ((x.1) = 'pattern'), cast([tuple('a', 1)] as Array(Tuple(LowCardinality(String), UInt8))));\n+\n+DROP TABLE IF EXISTS table;\n+CREATE TABLE table (id Int32, values Array(Tuple(LowCardinality(String), Int32)), date Date) ENGINE MergeTree() PARTITION BY toYYYYMM(date) ORDER BY (id, date);\n+\n+SELECT count(*) FROM table WHERE (arrayExists(x -> ((x.1) = toLowCardinality('pattern')), values) = 1);\n+\n+DROP TABLE IF EXISTS table;\n",
  "problem_statement": "Problem with Array(Tuple(LowCardinality(String), Int32))\nI have a table\r\n\r\n```\r\nCREATE TABLE table (\r\n\tid Int32,\r\n\tvalues Array(Tuple(LowCardinality(String), Int32)),\r\n\tdate Date\r\n) ENGINE MergeTree()\r\nPARTITION BY toYYYYMM(date)\r\nORDER BY (id, date)\r\n```\r\n\r\nbut when executing the request\r\n\r\n```\r\nSELECT count(*)\r\nFROM table\r\nWHERE (arrayExists(x -> ((x.1) = toLowCardinality('pattern')), values) = 1)\r\n\r\n```\r\nI get an error\r\n\r\n`Code: 49. DB::Exception: Received from clickhouse:9000. DB::Exception: Cannot capture column 3 because it has incompatible type: got String, but LowCardinality(String) is expected..`\r\n\r\nIf I replace the column 'values' \r\nvalues Array(Tuple(String, Int32))\r\nthen the request is executed without errors.\r\n\r\nWhat could be the problem when using Array(Tuple(LowCardinality(String), Int32))?\r\n\r\nClickHouse version 20.3.3\r\n\n",
  "hints_text": "https://stackoverflow.com/questions/60768819/using-arraytuplelowcardinalitystring-int32-in-clickhouse",
  "created_at": "2020-06-30T10:59:41Z",
  "modified_files": [
    "src/Functions/array/FunctionArrayMapped.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01354_tuple_low_cardinality_array_mapped_bug.reference",
    "b/tests/queries/0_stateless/01354_tuple_low_cardinality_array_mapped_bug.sql"
  ]
}