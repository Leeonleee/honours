{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 968,
  "instance_id": "ClickHouse__ClickHouse-968",
  "issue_numbers": [
    "964"
  ],
  "base_commit": "ee66169d5e014d9f3c07197adedb318ad9d10d57",
  "patch": "diff --git a/dbms/src/Common/ConfigProcessor.cpp b/dbms/src/Common/ConfigProcessor.cpp\nindex e0202b559b9e..4c08df0602c9 100644\n--- a/dbms/src/Common/ConfigProcessor.cpp\n+++ b/dbms/src/Common/ConfigProcessor.cpp\n@@ -11,15 +11,11 @@\n #include <Poco/Util/XMLConfiguration.h>\n \n #include <Common/ZooKeeper/ZooKeeperNodeCache.h>\n+#include <Common/StringUtils.h>\n \n using namespace Poco::XML;\n \n \n-static bool endsWith(const std::string & s, const std::string & suffix)\n-{\n-    return s.size() >= suffix.size() && s.substr(s.size() - suffix.size()) == suffix;\n-}\n-\n /// Extracts from a string the first encountered number consisting of at least two digits.\n static std::string numberFromHost(const std::string & s)\n {\n@@ -27,7 +23,7 @@ static std::string numberFromHost(const std::string & s)\n     {\n         std::string res;\n         size_t j = i;\n-        while (j < s.size() && isdigit(s[j]))\n+        while (j < s.size() && isNumericASCII(s[j]))\n             res += s[j++];\n         if (res.size() >= 2)\n         {\ndiff --git a/dbms/src/Functions/FunctionsStringSearch.cpp b/dbms/src/Functions/FunctionsStringSearch.cpp\nindex daf595f74150..dbc64a2cc2fe 100644\n--- a/dbms/src/Functions/FunctionsStringSearch.cpp\n+++ b/dbms/src/Functions/FunctionsStringSearch.cpp\n@@ -587,7 +587,7 @@ struct ReplaceRegexpImpl\n         {\n             if (s[i] == '\\\\' && i + 1 < s.size())\n             {\n-                if (isdigit(s[i + 1])) /// Substitution\n+                if (isNumericASCII(s[i + 1])) /// Substitution\n                 {\n                     if (!now.empty())\n                     {\ndiff --git a/dbms/src/IO/ReadHelpers.cpp b/dbms/src/IO/ReadHelpers.cpp\nindex d6fc6d34e598..acc3706fa831 100644\n--- a/dbms/src/IO/ReadHelpers.cpp\n+++ b/dbms/src/IO/ReadHelpers.cpp\n@@ -683,7 +683,7 @@ void skipJSONFieldPlain(ReadBuffer & buf, const StringRef & name_of_filed)\n         NullSink sink;\n         readJSONStringInto(sink, buf);\n     }\n-    else if (isNumericASCII(*buf.position())) /// skip number\n+    else if (isNumericASCII(*buf.position()) || *buf.position() == '-' || *buf.position() == '+') /// skip number\n     {\n         double v;\n         if (!tryReadFloatText(v, buf))\n@@ -737,7 +737,7 @@ void skipJSONFieldPlain(ReadBuffer & buf, const StringRef & name_of_filed)\n     }\n     else\n     {\n-        throw Exception(\"Unexpected symbol for key '\" + name_of_filed.toString() + \"'\", ErrorCodes::INCORRECT_DATA);\n+        throw Exception(\"Unexpected symbol '\" + std::string(*buf.position(), 1) + \"' for key '\" + name_of_filed.toString() + \"'\", ErrorCodes::INCORRECT_DATA);\n     }\n }\n \ndiff --git a/dbms/src/Storages/MergeTree/MergeTreeData.cpp b/dbms/src/Storages/MergeTree/MergeTreeData.cpp\nindex 91bf9b6407a0..cd4807fb3ab4 100644\n--- a/dbms/src/Storages/MergeTree/MergeTreeData.cpp\n+++ b/dbms/src/Storages/MergeTree/MergeTreeData.cpp\n@@ -1706,7 +1706,7 @@ static std::pair<String, DayNum_t> getMonthNameAndDayNum(const Field & partition\n         ? toString(partition.get<UInt64>())\n         : partition.safeGet<String>();\n \n-    if (month_name.size() != 6 || !std::all_of(month_name.begin(), month_name.end(), isdigit))\n+    if (month_name.size() != 6 || !std::all_of(month_name.begin(), month_name.end(), isNumericASCII))\n         throw Exception(\"Invalid partition format: \" + month_name + \". Partition should consist of 6 digits: YYYYMM\",\n             ErrorCodes::INVALID_PARTITION_NAME);\n \ndiff --git a/dbms/src/TableFunctions/TableFunctionRemote.cpp b/dbms/src/TableFunctions/TableFunctionRemote.cpp\nindex 20bcb35ecdce..128f6d500364 100644\n--- a/dbms/src/TableFunctions/TableFunctionRemote.cpp\n+++ b/dbms/src/TableFunctions/TableFunctionRemote.cpp\n@@ -52,7 +52,7 @@ static bool parseNumber(const String & description, size_t l, size_t r, size_t &\n     res = 0;\n     for (size_t pos = l; pos < r; pos ++)\n     {\n-        if (!isdigit(description[pos]))\n+        if (!isNumericASCII(description[pos]))\n             return false;\n         res = res * 10 + description[pos] - '0';\n         if (res > 1e15)\n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/00374_json_each_row_input_with_noisy_fields.reference b/dbms/tests/queries/0_stateless/00374_json_each_row_input_with_noisy_fields.reference\nindex 4150b9e80b14..e9d98aa456e2 100644\n--- a/dbms/tests/queries/0_stateless/00374_json_each_row_input_with_noisy_fields.reference\n+++ b/dbms/tests/queries/0_stateless/00374_json_each_row_input_with_noisy_fields.reference\n@@ -3,3 +3,4 @@\n 0\t\n 1\tok\n 1\tok\n+1\tok\ndiff --git a/dbms/tests/queries/0_stateless/00374_json_each_row_input_with_noisy_fields.sh b/dbms/tests/queries/0_stateless/00374_json_each_row_input_with_noisy_fields.sh\nindex 0b4b33143ae4..7b34db0b9404 100755\n--- a/dbms/tests/queries/0_stateless/00374_json_each_row_input_with_noisy_fields.sh\n+++ b/dbms/tests/queries/0_stateless/00374_json_each_row_input_with_noisy_fields.sh\n@@ -1,11 +1,16 @@\n #!/usr/bin/env bash\n-clickhouse-client -n --query \"DROP TABLE IF EXISTS test.json_noisy; CREATE TABLE test.json_noisy (d1 UInt8, d2 String) ENGINE = Memory\"\n+set -e\n+\n+clickhouse-client -q \"DROP TABLE IF EXISTS test.json_noisy\"\n+clickhouse-client -q \"CREATE TABLE test.json_noisy (d1 UInt8, d2 String) ENGINE = Memory\"\n \n echo '{\"d1\" : 1, \"d2\" : \"ok\"}\n { }\n {\"t1\" : 0, \"t2\":true,\"t3\":false, \"t4\":null,\"t5\":[],\"t6\":\"trash\" }\n {\"d2\":\"ok\",\"t1\":[[[]],true, null, false, \"1\",\"2\",9.03,101], \"t2\":[[\"1\",\"2\"]], \"d1\":\"1\"}\n-{\"d2\":\"ok\",\"t1\":[[[]],true, null, false, \"1\",\"2\", 0.03, 1], \"d1\":\"1\", \"t2\":[\"1\",\"2\"]}' \\\n-| clickhouse-client -n --query \"SET input_format_skip_unknown_fields = 1; INSERT INTO test.json_noisy FORMAT JSONEachRow\"\n+{\"d2\":\"ok\",\"t1\":[[[]],true, null, false, \"1\",\"2\", 0.03, 1], \"d1\":\"1\", \"t2\":[\"1\",\"2\"]}\n+{\"t0\" : -0.1, \"t1\" : +1, \"t2\" : 0, \"t3\" : [0.0, -0.1], \"d2\" : \"ok\", \"d1\" : 1}' \\\n+| clickhouse-client --input_format_skip_unknown_fields=1 -q \"INSERT INTO test.json_noisy FORMAT JSONEachRow\"\n \n-clickhouse-client -n --query \"SELECT * FROM test.json_noisy; DROP TABLE IF EXISTS test.json_noisy;\"\n+clickhouse-client --max_threads=1 -q \"SELECT * FROM test.json_noisy\"\n+clickhouse-client -q \"DROP TABLE IF EXISTS test.json_noisy\"\n",
  "problem_statement": "Fail to skip unknown fields with negative values on INSERT with JSONEachRow format\n`clickhouse-client -n --query='create table t (d Date, a Int32) ENGINE=Memory'`\r\n\r\nThis is OK with a positive ignored column:\r\n`clickhouse-client -n --query='set input_format_skip_unknown_fields=1;insert into t format JSONEachRow' <<< '{\"d\":\"2017-01-01\", \"a\":2, \"b\":3}'`\r\n\r\nBut fails for negative value:\r\n`clickhouse-client -n --query='set input_format_skip_unknown_fields=1;insert into t format JSONEachRow' <<< '{\"d\":\"2017-01-01\", \"a\":2, \"b\":-3}'`\r\n`Code: 117. DB::Exception: Unexpected symbol for key 'b'`\r\n\r\nI think the problem comes from here https://github.com/yandex/ClickHouse/blob/master/dbms/src/IO/ReadHelpers.cpp#L686.\r\n\n",
  "hints_text": "Also please replace all occurences of `isdigit` to `isNumericASCII` (minor modification).",
  "created_at": "2017-07-11T18:23:35Z"
}