{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 5633,
  "instance_id": "ClickHouse__ClickHouse-5633",
  "issue_numbers": [
    "5631"
  ],
  "base_commit": "fdf0edc4950b2a38544d2ae8f02eab6aa407db87",
  "patch": "diff --git a/dbms/src/Storages/MergeTree/MergeTreeBaseSelectBlockInputStream.cpp b/dbms/src/Storages/MergeTree/MergeTreeBaseSelectBlockInputStream.cpp\nindex 5c0078905508..9f4d4ae715c3 100644\n--- a/dbms/src/Storages/MergeTree/MergeTreeBaseSelectBlockInputStream.cpp\n+++ b/dbms/src/Storages/MergeTree/MergeTreeBaseSelectBlockInputStream.cpp\n@@ -73,14 +73,14 @@ Block MergeTreeBaseSelectBlockInputStream::readFromPart()\n     if (task->size_predictor)\n         task->size_predictor->startBlock();\n \n-    const auto current_max_block_size_rows = max_block_size_rows;\n-    const auto current_preferred_block_size_bytes = preferred_block_size_bytes;\n-    const auto current_preferred_max_column_in_block_size_bytes = preferred_max_column_in_block_size_bytes;\n-    const auto & index_granularity = task->data_part->index_granularity;\n+    const UInt64 current_max_block_size_rows = max_block_size_rows;\n+    const UInt64 current_preferred_block_size_bytes = preferred_block_size_bytes;\n+    const UInt64 current_preferred_max_column_in_block_size_bytes = preferred_max_column_in_block_size_bytes;\n+    const MergeTreeIndexGranularity & index_granularity = task->data_part->index_granularity;\n     const double min_filtration_ratio = 0.00001;\n \n     auto estimateNumRows = [current_preferred_block_size_bytes, current_max_block_size_rows,\n-        index_granularity, current_preferred_max_column_in_block_size_bytes, min_filtration_ratio](\n+        &index_granularity, current_preferred_max_column_in_block_size_bytes, min_filtration_ratio](\n         MergeTreeReadTask & current_task, MergeTreeRangeReader & current_reader)\n     {\n         if (!current_task.size_predictor)\n",
  "test_patch": "diff --git a/dbms/tests/performance/funtions_geo/functions_geo.xml b/dbms/tests/performance/functions_geo.xml\nsimilarity index 100%\nrename from dbms/tests/performance/funtions_geo/functions_geo.xml\nrename to dbms/tests/performance/functions_geo.xml\ndiff --git a/dbms/tests/performance/merge_tree_simple_select.xml b/dbms/tests/performance/merge_tree_simple_select.xml\nnew file mode 100644\nindex 000000000000..3a303500f3ae\n--- /dev/null\n+++ b/dbms/tests/performance/merge_tree_simple_select.xml\n@@ -0,0 +1,19 @@\n+<test>\n+    <name>merge_tree_simple_select</name>\n+\n+    <type>loop</type>\n+\n+    <stop_conditions>\n+        <all_of>\n+            <iterations>10</iterations>\n+        </all_of>\n+    </stop_conditions>\n+\n+    <create_query>CREATE TABLE simple_mergetree (EventDate Date, x UInt64) ENGINE = MergeTree ORDER BY x</create_query>\n+    <fill_query>INSERT INTO simple_mergetree SELECT number, today() + intDiv(number, 10000000) FROM numbers(1000000000)</fill_query>\n+    <fill_query>OPTIMIZE TABLE simple_mergetree FINAL</fill_query>\n+\n+    <query>SELECT count() FROM simple_mergetree</query>\n+\n+    <drop_query>DROP TABLE IF EXISTS simple_mergetree</drop_query>\n+</test>\n",
  "problem_statement": "Suboptimal performance of simple SELECT count() query.\n```\r\nexample.yandex.ru :) CREATE TABLE test.simple_mergetree (EventDate Date, x UInt64) ENGINE = MergeTree ORDER BY x\r\n\r\nCREATE TABLE test.simple_mergetree\r\n(\r\n    `EventDate` Date, \r\n    `x` UInt64\r\n)\r\nENGINE = MergeTree\r\nORDER BY x\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.080 sec. \r\n\r\nexample.yandex.ru :) INSERT INTO test.simple_mergetree SELECT number, today() + intDiv(number, 10000000) FROM numbers(10000000000)\r\n\r\nINSERT INTO test.simple_mergetree SELECT \r\n    number, \r\n    today() + intDiv(number, 10000000)\r\nFROM numbers(10000000000) \r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 191.485 sec. Processed 10.00 billion rows, 80.00 GB (52.22 million rows/s., 417.79 MB/s.) \r\n\r\nexample.yandex.ru :) SELECT count() FROM test.simple_mergetree\r\n\r\nSELECT count()\r\nFROM test.simple_mergetree \r\n\r\n\u250c\u2500\u2500\u2500\u2500\u2500count()\u2500\u2510\r\n\u2502 10000000000 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 10.626 sec. Processed 10.00 billion rows, 20.00 GB (941.06 million rows/s., 1.88 GB/s.) \r\n\r\nexample.yandex.ru :) SELECT count() FROM test.simple_mergetree\r\n\r\nSELECT count()\r\nFROM test.simple_mergetree \r\n\r\n\u250c\u2500\u2500\u2500\u2500\u2500count()\u2500\u2510\r\n\u2502 10000000000 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 11.018 sec. Processed 10.00 billion rows, 20.00 GB (907.60 million rows/s., 1.82 GB/s.)\r\n```\r\n\r\nOn a server with 16 physical cores.\n",
  "hints_text": "`clickhouse-benchmark <<< \"SELECT count() FROM test.simple_mergetree\"`\r\n\r\n`sudo perf top --call-graph dwarf`\r\n\r\n```\r\n-   61.68%    61.68%  libc-2.27.so                                    [.] __memmove_sse2_unaligned_erms                                                                                                                                                                                                                                                                                                                                                    \u2592\r\n     7.05% 0xffffffffffffffff                                                                                                                                                                                                                                                                                                                                                                                                                              \u2592\r\n+   47.96%     0.00%  clickhouse                                      [.] _ZN2DB23ParallelInputsProcessorINS_35ParallelAggregatingBlockInputStream7HandlerEE4loopEm                                                                                                                                                                                                                                                                                        \u2592\r\n+   47.96%     0.57%  clickhouse                                      [.] _ZN2DB35MergeTreeBaseSelectBlockInputStream12readFromPartEv                                                                                                                                                                                                                                                                                                                      \u2592\r\n-   47.96%     0.00%  clickhouse                                      [.] _ZN2DB17IBlockInputStream4readEv                                                                                                                                                                                                                                                                                                                                                 \u2592\r\n   - 9.55% _ZN2DB17IBlockInputStream4readEv                                                                                                                                                                                                                                                                                                                                                                                                                \u2592\r\n      - 9.55% _ZN2DB26ExpressionBlockInputStream8readImplEv                                                                                                                                                                                                                                                                                                                                                                                                \u2592\r\n         - 9.55% _ZN2DB17IBlockInputStream4readEv                                                                                                                                                                                                                                                                                                                                                                                                          \u2592\r\n            - 9.55% _ZN2DB35MergeTreeBaseSelectBlockInputStream8readImplEv                                                                                                                                                                                                                                                                                                                                                                                 \u2592\r\n               - 43.44% _ZN2DB35MergeTreeBaseSelectBlockInputStream12readFromPartEv                                                                                                                                                                                                                                                                                                                                                                        \u2592\r\n                    40.93% __memmove_sse2_unaligned_erms                                                                                                                                                                                                                                                                                                                                                                                                   \u2592\r\n                    2.70% _ZN2DB20MergeTreeRangeReader4readEmRSt6vectorINS_9MarkRangeESaIS2_EE\r\n```\n`clickhouse-benchmark --max_block_size 1048576 <<< \"SELECT count() FROM test.simple_mergetree\"`\r\n\r\nIncreasing `max_block_size` \"fixes\" this issue.\n```\r\n#0  __memmove_sse2_unaligned_erms () at ../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:249\r\n#1  0x0000000006ddad87 in std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<unsigned long> (__result=<optimized out>, __last=<optimized out>, __first=<optimized out>) at /usr/include/c++/8/bits/stl_algobase.h:446\r\n#2  std::__copy_move_a<false, unsigned long const*, unsigned long*> (__result=<optimized out>, __last=<optimized out>, __first=<optimized out>) at /usr/include/c++/8/bits/stl_algobase.h:386\r\n#3  std::__copy_move_a2<false, __gnu_cxx::__normal_iterator<unsigned long const*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long*> (__result=<optimized out>, __last=..., __first=...) at /usr/include/c++/8/bits/stl_algobase.h:422\r\n#4  std::copy<__gnu_cxx::__normal_iterator<unsigned long const*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long*> (__result=<optimized out>, __last=..., __first=...) at /usr/include/c++/8/bits/stl_algobase.h:455\r\n#5  std::__uninitialized_copy<true>::__uninit_copy<__gnu_cxx::__normal_iterator<unsigned long const*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long*> (__result=<optimized out>, __last=..., __first=...) at /usr/include/c++/8/bits/stl_uninitialized.h:101\r\n#6  std::uninitialized_copy<__gnu_cxx::__normal_iterator<unsigned long const*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long*> (__result=<optimized out>, __last=..., __first=...) at /usr/include/c++/8/bits/stl_uninitialized.h:134\r\n#7  std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<unsigned long const*, std::vector<unsigned long, std::allocator<unsigned long> > >, unsigned long*, unsigned long> (__result=<optimized out>, __last=..., __first=...) at /usr/include/c++/8/bits/stl_uninitialized.h:289\r\n#8  std::vector<unsigned long, std::allocator<unsigned long> >::vector (__x=..., this=0x7fc28baf4340) at /usr/include/c++/8/bits/stl_vector.h:463\r\n#9  DB::MergeTreeIndexGranularity::MergeTreeIndexGranularity (this=0x7fc28baf4340) at ../dbms/src/Storages/MergeTree/MergeTreeIndexGranularity.h:14\r\n#10 DB::MergeTreeBaseSelectBlockInputStream::readFromPart() () at ../dbms/src/Storages/MergeTree/MergeTreeBaseSelectBlockInputStream.cpp:115\r\n```\r\n\r\n@alesapin \nhttps://github.com/yandex/ClickHouse/blob/master/CHANGELOG.md#experimental-features\r\n\r\nPerformance is Ok in 19.5.4 but there is a degradation in later releases.\n19.5.4:\r\n\r\n```\r\n1 rows in set. Elapsed: 0.423 sec. Processed 10.00 billion rows, 20.00 GB (23.64 billion rows/s., 47.29 GB/s.) \r\n```\r\n\r\nThis is the right performance.\r\n\r\n19.9:\r\n\r\n```\r\n1 rows in set. Elapsed: 11.018 sec. Processed 10.00 billion rows, 20.00 GB (907.60 million rows/s., 1.82 GB/s.)\r\n```\r\n\r\nThis is more than 25 times slower.",
  "created_at": "2019-06-14T19:12:50Z"
}