{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 34536,
  "instance_id": "ClickHouse__ClickHouse-34536",
  "issue_numbers": [
    "33768"
  ],
  "base_commit": "ea62f83842f7ec077ba7daa9eadb6470a642d606",
  "patch": "diff --git a/src/Interpreters/SystemLog.cpp b/src/Interpreters/SystemLog.cpp\nindex 59545d4314dc..3b4d665e41bf 100644\n--- a/src/Interpreters/SystemLog.cpp\n+++ b/src/Interpreters/SystemLog.cpp\n@@ -41,6 +41,57 @@ namespace ErrorCodes\n {\n     extern const int BAD_ARGUMENTS;\n     extern const int LOGICAL_ERROR;\n+    extern const int NOT_IMPLEMENTED;\n+}\n+\n+namespace\n+{\n+    class StorageWithComment : public IAST\n+    {\n+    public:\n+        ASTPtr storage;\n+        ASTPtr comment;\n+\n+        String getID(char) const override { return \"Storage with comment definition\"; }\n+\n+        ASTPtr clone() const override\n+        {\n+            throw Exception(ErrorCodes::NOT_IMPLEMENTED, \"Method clone is not supported\");\n+        }\n+\n+        void formatImpl(const FormatSettings &, FormatState &, FormatStateStacked) const override\n+        {\n+            throw Exception(ErrorCodes::NOT_IMPLEMENTED, \"Method formatImpl is not supported\");\n+        }\n+    };\n+\n+    class ParserStorageWithComment : public IParserBase\n+    {\n+    protected:\n+        const char * getName() const override { return \"storage definition with comment\"; }\n+        bool parseImpl(Pos & pos, ASTPtr & node, Expected & expected) override\n+        {\n+            ParserStorage storage_p;\n+            ASTPtr storage;\n+\n+            if (!storage_p.parse(pos, storage, expected))\n+                return false;\n+\n+            ParserKeyword s_comment(\"COMMENT\");\n+            ParserStringLiteral string_literal_parser;\n+            ASTPtr comment;\n+\n+            if (s_comment.ignore(pos, expected))\n+                string_literal_parser.parse(pos, comment, expected);\n+\n+            auto storage_with_comment = std::make_shared<StorageWithComment>();\n+            storage_with_comment->storage = std::move(storage);\n+            storage_with_comment->comment = std::move(comment);\n+\n+            node = storage_with_comment;\n+            return true;\n+        }\n+    };\n }\n \n namespace\n@@ -102,8 +153,9 @@ std::shared_ptr<TSystemLog> createSystemLog(\n             engine += \" TTL \" + ttl;\n         engine += \" ORDER BY (event_date, event_time)\";\n     }\n+\n     // Validate engine definition grammatically to prevent some configuration errors\n-    ParserStorage storage_parser;\n+    ParserStorageWithComment storage_parser;\n     parseQuery(storage_parser, engine.data(), engine.data() + engine.size(),\n             \"Storage to create table for \" + config_prefix, 0, DBMS_DEFAULT_MAX_PARSER_DEPTH);\n \n@@ -450,7 +502,6 @@ void SystemLog<LogElement>::prepareTable()\n     is_prepared = true;\n }\n \n-\n template <typename LogElement>\n ASTPtr SystemLog<LogElement>::getCreateTableQuery()\n {\n@@ -465,11 +516,16 @@ ASTPtr SystemLog<LogElement>::getCreateTableQuery()\n     new_columns_list->set(new_columns_list->columns, InterpreterCreateQuery::formatColumns(ordinary_columns, alias_columns));\n     create->set(create->columns_list, new_columns_list);\n \n-    ParserStorage storage_parser;\n-    ASTPtr storage_ast = parseQuery(\n+    ParserStorageWithComment storage_parser;\n+\n+    ASTPtr storage_with_comment_ast = parseQuery(\n         storage_parser, storage_def.data(), storage_def.data() + storage_def.size(),\n         \"Storage to create table for \" + LogElement::name(), 0, DBMS_DEFAULT_MAX_PARSER_DEPTH);\n-    create->set(create->storage, storage_ast);\n+\n+    StorageWithComment & storage_with_comment = storage_with_comment_ast->as<StorageWithComment &>();\n+\n+    create->set(create->storage, storage_with_comment.storage);\n+    create->set(create->comment, storage_with_comment.comment);\n \n     /// Write additional (default) settings for MergeTree engine to make it make it possible to compare ASTs\n     /// and recreate tables on settings changes.\n",
  "test_patch": "diff --git a/tests/integration/test_system_logs_comment/__init__.py b/tests/integration/test_system_logs_comment/__init__.py\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/integration/test_system_logs_comment/test.py b/tests/integration/test_system_logs_comment/test.py\nnew file mode 100644\nindex 000000000000..bfc178652964\n--- /dev/null\n+++ b/tests/integration/test_system_logs_comment/test.py\n@@ -0,0 +1,42 @@\n+# pylint: disable=line-too-long\n+# pylint: disable=unused-argument\n+# pylint: disable=redefined-outer-name\n+\n+import pytest\n+from helpers.cluster import ClickHouseCluster\n+\n+cluster = ClickHouseCluster(__file__)\n+node = cluster.add_instance('node_default', stay_alive=True)\n+\n+@pytest.fixture(scope='module', autouse=True)\n+def start_cluster():\n+    try:\n+        cluster.start()\n+        yield cluster\n+    finally:\n+        cluster.shutdown()\n+\n+\n+def test_system_logs_comment():\n+    node.exec_in_container(['bash', '-c', f\"\"\"echo \"\n+        <clickhouse>\n+            <query_log>\n+                <engine>ENGINE = MergeTree\n+                        PARTITION BY (event_date)\n+                        ORDER BY (event_time)\n+                        TTL event_date + INTERVAL 14 DAY DELETE\n+                        SETTINGS ttl_only_drop_parts=1\n+                        COMMENT 'test_comment'\n+                </engine>\n+                <partition_by remove='remove'/>\n+            </query_log>\n+        </clickhouse>\n+        \" > /etc/clickhouse-server/config.d/yyy-override-query_log.xml\n+        \"\"\"])\n+    node.restart_clickhouse()\n+\n+    node.query(\"select 1\")\n+    node.query(\"system flush logs\")\n+\n+    comment = node.query(\"SELECT comment FROM system.tables WHERE name = 'query_log'\")\n+    assert comment =='test_comment\\n'\n",
  "problem_statement": "clickhouse server can not start up when set comment for query_log\n\r\n**Describe the unexpected behaviour**\r\nclickhouse server(22.1.1.2542) can not start up when set comment for query_log\r\n**How to reproduce**\r\nadd comment for query_log in config.xml\r\n```\r\n<query_log>\r\n<database>system</database>\r\n<table>query_log</table>\r\n             <engine>ENGINE = MergeTree PARTITION BY (event_date)    \r\n                          ORDER BY (event_time) \r\n                          TTL event_date + INTERVAL 14 DAY DELETE\r\n                          SETTINGS ttl_only_drop_parts=1                              \r\n                          COMMENT 'xxx'\r\n             </engine>\r\n</query_log>\r\n```\r\nrestart clickhouse-server:\r\n2022.01.18 23:07:04.861218 [ 3415373 ] {} <Error> Application: Caught exception while loading metadata: Code: 62. DB::Exception: Syntax error (Storage to create table for query_log): failed at position 259 ('COMMENT') (line 5, col 31): COMMENT 'xxx'\r\n             . Expected end of query. (SYNTAX_ERROR), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0xa82bc3a in /usr/bin/clickhouse\r\n1. DB::parseQueryAndMovePosition(DB::IParser&, char const*&, char const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, bool, unsigned long, unsigned long) @ 0x14d6169f in /usr/bin/clickhouse\r\n2. DB::SystemLogs::SystemLogs(std::__1::shared_ptr<DB::Context const>, Poco::Util::AbstractConfiguration const&) @ 0x13b996bb in /usr/bin/clickhouse\r\n3. DB::Context::initializeSystemLogs() @ 0x134ac6af in /usr/bin/clickhouse\r\n4. DB::Server::main(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xa8b4b9d in /usr/bin/clickhouse\r\n5. Poco::Util::Application::run() @ 0x17471aa6 in /usr/bin/clickhouse\r\n6. DB::Server::run() @ 0xa8a71d1 in /usr/bin/clickhouse\r\n7. mainEntryClickHouseServer(int, char**) @ 0xa8a4787 in /usr/bin/clickhouse\r\n8. main @ 0xa825fea in /usr/bin/clickhouse\r\n9. __libc_start_main @ 0x7f3e9d62f0b3 in ?\r\n10. _start @ 0xa6acfae in /usr/bin/clickhouse\r\n (version 22.1.1.2542)\r\n\r\n**Expected behavior**\r\nClickhouse server should be up when set comment for query_log. \r\n21.8 is ok.\r\n\r\n\n",
  "hints_text": "seems the issue was introduced since 21.11\nHello @Enmk , \r\n         I see the COMMENT is removed from ASTStorage in https://github.com/ClickHouse/ClickHouse/commit/67ff0f5dba5b95ec67c6e79f721fd5904ebb4115 ,  Is that means we don't support COMMENT in system.query_log any more?\r\n\r\nThanks,\r\nYatian\n> Hello @Enmk , I see the COMMENT is removed from ASTStorage in [67ff0f5](https://github.com/ClickHouse/ClickHouse/commit/67ff0f5dba5b95ec67c6e79f721fd5904ebb4115) , Is that means we don't support COMMENT in system.query_log any more?\r\n> \r\n> Thanks, Yatian\r\n\r\nHi @xuyatian! Comments in system tables should be properly supported, it is my bad that I have unintentionally broken this feature. \r\nWould it be OK with you to move comment clause to a separate `comment` tag? Something like this:\r\n```\r\n<query_log>\r\n<database>system</database>\r\n<table>query_log</table>\r\n             <engine>ENGINE = MergeTree PARTITION BY (event_date)    \r\n                          ORDER BY (event_time) \r\n                          TTL event_date + INTERVAL 14 DAY DELETE\r\n                          SETTINGS ttl_only_drop_parts=1                              \r\n             </engine>\r\n             <comment>Some comment text<comment>\r\n</query_log>\r\n```\nThanks @Enmk ! It 's OK with me to move comment clause to a sperate comment tag. \n@xuyatian seems like we need to revert refactoring that was before, without introducing comment section. `comment` must be part of `engine`.\r\nRefactoring purpose was for Dictionaries to support `COMMENT`, if we move `comment` part on ASTLevel from `ASTStorage` to `ASTCreateQuery`. It is okay to duplicate `comment` in `ASTStorage` and `ASTDictionary`, that way previous implementation will work.\r\n\r\nCC: @alexey-milovidov, @Enmk \n@kitaisreal That's great! \nIMO, comment doesn't logically belong to `ASTStorage`,  this was just a mere coincidence. And having comments in both `ASTStorage` and `ASTCreateQuery` would be even worse, especially they can be used together, that would cause too much confusion.\r\n\r\nIt looks like users would be happy with just having COMMENT as a separate XML-node in config. \r\n\r\nBUT if absolutely necessary, we could figure something out to support current layout of both ENGINE and COMMENT clause in a single XML-node. And we'de better to do it somewhere in a parsing code. That way the only a small and pretty isolated part of the system gets a bit messy, not something as important as AST (which is used extensively throughout the system)\n@Enmk I am not sure, what if client want to add comment for materialized view table engine, that way adding comment on `ASTCreateQuery` seems like an issue.",
  "created_at": "2022-02-11T17:10:13Z"
}