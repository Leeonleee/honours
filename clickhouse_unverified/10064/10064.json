{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 10064,
  "instance_id": "ClickHouse__ClickHouse-10064",
  "issue_numbers": [
    "10057"
  ],
  "base_commit": "816eccde11f36e22aa65a07efc00c0b5138fe05e",
  "patch": "diff --git a/src/Parsers/ASTDictionary.cpp b/src/Parsers/ASTDictionary.cpp\nindex 5c477c2aab7d..9ff600333c5c 100644\n--- a/src/Parsers/ASTDictionary.cpp\n+++ b/src/Parsers/ASTDictionary.cpp\n@@ -24,6 +24,7 @@ void ASTDictionaryRange::formatImpl(const FormatSettings & settings,\n                   << \"(\"\n                   << (settings.hilite ? hilite_keyword : \"\")\n                   << \"MIN \"\n+                  << (settings.hilite ? hilite_none : \"\")\n                   << min_attr_name << \" \"\n                   << (settings.hilite ? hilite_keyword : \"\")\n                   << \"MAX \"\n@@ -52,6 +53,7 @@ void ASTDictionaryLifetime::formatImpl(const FormatSettings & settings,\n                   << \"(\"\n                   << (settings.hilite ? hilite_keyword : \"\")\n                   << \"MIN \"\n+                  << (settings.hilite ? hilite_none : \"\")\n                   << min_sec << \" \"\n                   << (settings.hilite ? hilite_keyword : \"\")\n                   << \"MAX \"\n@@ -86,7 +88,9 @@ void ASTDictionaryLayout::formatImpl(const FormatSettings & settings,\n                   << Poco::toUpper(layout_type)\n                   << (settings.hilite ? hilite_none : \"\");\n \n-    settings.ostr << \"(\";\n+    if (has_brackets)\n+        settings.ostr << \"(\";\n+\n     if (parameter)\n     {\n         settings.ostr << (settings.hilite ? hilite_keyword : \"\")\n@@ -96,7 +100,10 @@ void ASTDictionaryLayout::formatImpl(const FormatSettings & settings,\n \n         parameter->second->formatImpl(settings, state, frame);\n     }\n-    settings.ostr << \")\";\n+\n+    if (has_brackets)\n+        settings.ostr << \")\";\n+\n     settings.ostr << \")\";\n }\n \ndiff --git a/src/Parsers/ASTDictionary.h b/src/Parsers/ASTDictionary.h\nindex e146162cbdf0..6982381f14d3 100644\n--- a/src/Parsers/ASTDictionary.h\n+++ b/src/Parsers/ASTDictionary.h\n@@ -33,6 +33,8 @@ class ASTDictionaryLayout : public IAST\n     String layout_type;\n     /// optional parameter (size_in_cells)\n     std::optional<KeyValue> parameter;\n+    /// has brackets after layout type\n+    bool has_brackets = true;\n \n     String getID(char) const override { return \"Dictionary layout\"; }\n \ndiff --git a/src/Parsers/ASTFunctionWithKeyValueArguments.cpp b/src/Parsers/ASTFunctionWithKeyValueArguments.cpp\nindex 8fdeb90c25ba..0843bddac7dd 100644\n--- a/src/Parsers/ASTFunctionWithKeyValueArguments.cpp\n+++ b/src/Parsers/ASTFunctionWithKeyValueArguments.cpp\n@@ -64,9 +64,9 @@ ASTPtr ASTFunctionWithKeyValueArguments::clone() const\n \n void ASTFunctionWithKeyValueArguments::formatImpl(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const\n {\n-    settings.ostr << (settings.hilite ? hilite_keyword : \"\") << Poco::toUpper(name) << (settings.hilite ? hilite_none : \"\") << \"(\";\n+    settings.ostr << (settings.hilite ? hilite_keyword : \"\") << Poco::toUpper(name) << (settings.hilite ? hilite_none : \"\") << (has_brackets ? \"(\" : \"\");\n     elements->formatImpl(settings, state, frame);\n-    settings.ostr << \")\";\n+    settings.ostr << (has_brackets ? \")\" : \"\");\n     settings.ostr << (settings.hilite ? hilite_none : \"\");\n }\n \ndiff --git a/src/Parsers/ASTFunctionWithKeyValueArguments.h b/src/Parsers/ASTFunctionWithKeyValueArguments.h\nindex e09e477417f9..3f31b4a7c5bf 100644\n--- a/src/Parsers/ASTFunctionWithKeyValueArguments.h\n+++ b/src/Parsers/ASTFunctionWithKeyValueArguments.h\n@@ -44,6 +44,13 @@ class ASTFunctionWithKeyValueArguments : public IAST\n     String name;\n     /// Expression list\n     ASTPtr elements;\n+    /// Has brackets around arguments\n+    bool has_brackets;\n+\n+    ASTFunctionWithKeyValueArguments(bool has_brackets_ = true)\n+        : has_brackets(has_brackets_)\n+    {\n+    }\n \n public:\n     String getID(char delim) const override;\ndiff --git a/src/Parsers/ExpressionElementParsers.cpp b/src/Parsers/ExpressionElementParsers.cpp\nindex c4e43829da93..30fa4a2e9fb3 100644\n--- a/src/Parsers/ExpressionElementParsers.cpp\n+++ b/src/Parsers/ExpressionElementParsers.cpp\n@@ -1400,18 +1400,30 @@ bool ParserFunctionWithKeyValueArguments::parseImpl(Pos & pos, ASTPtr & node, Ex\n     if (!id_parser.parse(pos, identifier, expected))\n         return false;\n \n+\n+    bool left_bracket_found = false;\n     if (pos.get().type != TokenType::OpeningRoundBracket)\n-        return false;\n+    {\n+        if (!brackets_can_be_omitted)\n+             return false;\n+    }\n+    else\n+    {\n+        ++pos;\n+        left_bracket_found = true;\n+    }\n \n-    ++pos;\n     if (!pairs_list_parser.parse(pos, expr_list_args, expected))\n         return false;\n \n-    if (pos.get().type != TokenType::ClosingRoundBracket)\n-        return false;\n+    if (left_bracket_found)\n+    {\n+        if (pos.get().type != TokenType::ClosingRoundBracket)\n+            return false;\n+        ++pos;\n+    }\n \n-    ++pos;\n-    auto function = std::make_shared<ASTFunctionWithKeyValueArguments>();\n+    auto function = std::make_shared<ASTFunctionWithKeyValueArguments>(left_bracket_found);\n     function->name = Poco::toLower(typeid_cast<ASTIdentifier &>(*identifier.get()).name);\n     function->elements = expr_list_args;\n     function->children.push_back(function->elements);\ndiff --git a/src/Parsers/ExpressionElementParsers.h b/src/Parsers/ExpressionElementParsers.h\nindex b9d8d5db42cc..b02b29fb2e55 100644\n--- a/src/Parsers/ExpressionElementParsers.h\n+++ b/src/Parsers/ExpressionElementParsers.h\n@@ -346,9 +346,16 @@ class ParserOrderByElement : public IParserBase\n   */\n class ParserFunctionWithKeyValueArguments : public IParserBase\n {\n+public:\n+    ParserFunctionWithKeyValueArguments(bool brackets_can_be_omitted_ = false)\n+        : brackets_can_be_omitted(brackets_can_be_omitted_) {}\n protected:\n+\n     const char * getName() const override { return \"function with key-value arguments\"; }\n     bool parseImpl(Pos & pos, ASTPtr & node, Expected & expected) override;\n+\n+    /// brackets for function arguments can be omitted\n+    bool brackets_can_be_omitted;\n };\n \n /** Data type or table engine, possibly with parameters. For example, UInt8 or see examples from ParserIdentifierWithParameters\ndiff --git a/src/Parsers/ParserDictionary.cpp b/src/Parsers/ParserDictionary.cpp\nindex ca9c2ad031a0..2680c7002966 100644\n--- a/src/Parsers/ParserDictionary.cpp\n+++ b/src/Parsers/ParserDictionary.cpp\n@@ -109,7 +109,7 @@ bool ParserDictionaryRange::parseImpl(Pos & pos, ASTPtr & node, Expected & expec\n \n bool ParserDictionaryLayout::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)\n {\n-    ParserFunctionWithKeyValueArguments key_value_func_p;\n+    ParserFunctionWithKeyValueArguments key_value_func_p(/* brackets_can_be_omitted = */ true);\n     ASTPtr ast_func;\n     if (!key_value_func_p.parse(pos, ast_func, expected))\n         return false;\n@@ -121,12 +121,17 @@ bool ParserDictionaryLayout::parseImpl(Pos & pos, ASTPtr & node, Expected & expe\n         return false;\n \n     res->layout_type = func.name;\n+    res->has_brackets = func.has_brackets;\n     const ASTExpressionList & type_expr_list = func.elements->as<const ASTExpressionList &>();\n \n     /// there are no layout with more than 1 parameter\n     if (type_expr_list.children.size() > 1)\n         return false;\n \n+    /// if layout has params than brackets must be specified\n+    if (!type_expr_list.children.empty() && !res->has_brackets)\n+        return false;\n+\n     if (type_expr_list.children.size() == 1)\n     {\n         const ASTPair * pair = dynamic_cast<const ASTPair *>(type_expr_list.children.at(0).get());\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01110_dictionary_layout_without_arguments.reference b/tests/queries/0_stateless/01110_dictionary_layout_without_arguments.reference\nnew file mode 100644\nindex 000000000000..a0518e788913\n--- /dev/null\n+++ b/tests/queries/0_stateless/01110_dictionary_layout_without_arguments.reference\n@@ -0,0 +1,3 @@\n+World\n+CREATE DICTIONARY db_for_dict.dict_with_hashed_layout (`key1` UInt64, `value` String) PRIMARY KEY key1 SOURCE(CLICKHOUSE(HOST \\'localhost\\' PORT 9000 USER \\'default\\' TABLE \\'table_for_dict\\' DB \\'db_for_dict\\')) LIFETIME(MIN 1 MAX 10) LAYOUT(HASHED)\n+Hello\ndiff --git a/tests/queries/0_stateless/01110_dictionary_layout_without_arguments.sql b/tests/queries/0_stateless/01110_dictionary_layout_without_arguments.sql\nnew file mode 100644\nindex 000000000000..718e7f295b39\n--- /dev/null\n+++ b/tests/queries/0_stateless/01110_dictionary_layout_without_arguments.sql\n@@ -0,0 +1,33 @@\n+DROP DATABASE IF EXISTS db_for_dict;\n+CREATE DATABASE db_for_dict;\n+\n+CREATE TABLE db_for_dict.table_for_dict\n+(\n+  key1 UInt64,\n+  value String\n+)\n+ENGINE = Memory();\n+\n+INSERT INTO db_for_dict.table_for_dict VALUES (1, 'Hello'), (2, 'World');\n+\n+CREATE DICTIONARY db_for_dict.dict_with_hashed_layout\n+(\n+  key1 UInt64,\n+  value String\n+)\n+PRIMARY KEY key1\n+LAYOUT(HASHED)\n+SOURCE(CLICKHOUSE(HOST 'localhost' PORT 9000 USER 'default' TABLE 'table_for_dict' DB 'db_for_dict'))\n+LIFETIME(MIN 1 MAX 10);\n+\n+SELECT dictGet('db_for_dict.dict_with_hashed_layout', 'value', toUInt64(2));\n+\n+DETACH DICTIONARY db_for_dict.dict_with_hashed_layout;\n+\n+ATTACH DICTIONARY db_for_dict.dict_with_hashed_layout;\n+\n+SHOW CREATE DICTIONARY db_for_dict.dict_with_hashed_layout;\n+\n+SELECT dictGet('db_for_dict.dict_with_hashed_layout', 'value', toUInt64(1));\n+\n+DROP DATABASE IF EXISTS db_for_dict;\n",
  "problem_statement": "Bad hilite of CREATE DICTIONARY query\n![Screenshot_20200406_043048](https://user-images.githubusercontent.com/18581488/78515726-932ed400-77bf-11ea-8284-498611d5e405.png)\r\n\r\nLook at the hilite of MIN vs MAX.\n",
  "hints_text": "PS. It's unconvinient that I cannot write `LAYOUT(HASHED)` instead of `LAYOUT(HASHED())`.",
  "created_at": "2020-04-06T11:04:18Z"
}