{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 60197,
  "instance_id": "ClickHouse__ClickHouse-60197",
  "issue_numbers": [
    "39712"
  ],
  "base_commit": "b7f1beafe8beb7000568a8730fdfbb0c7b762095",
  "patch": "diff --git a/programs/client/Client.cpp b/programs/client/Client.cpp\nindex 25c94c56aa6d..39edaf3497e4 100644\n--- a/programs/client/Client.cpp\n+++ b/programs/client/Client.cpp\n@@ -1164,6 +1164,9 @@ void Client::processOptions(const OptionsDescription & options_description,\n     /// (There is no need to copy the context because clickhouse-client has no background tasks so it won't use that context in parallel.)\n     client_context = global_context;\n     initClientContext();\n+\n+    /// Allow to pass-through unknown settings to the server.\n+    client_context->getAccessControl().allowAllSettings();\n }\n \n \ndiff --git a/programs/server/Server.cpp b/programs/server/Server.cpp\nindex 196af80f2cd2..48ba58894127 100644\n--- a/programs/server/Server.cpp\n+++ b/programs/server/Server.cpp\n@@ -1920,7 +1920,7 @@ try\n     auto & access_control = global_context->getAccessControl();\n     try\n     {\n-        access_control.setUpFromMainConfig(config(), config_path, [&] { return global_context->getZooKeeper(); });\n+        access_control.setupFromMainConfig(config(), config_path, [&] { return global_context->getZooKeeper(); });\n     }\n     catch (...)\n     {\ndiff --git a/src/Access/AccessControl.cpp b/src/Access/AccessControl.cpp\nindex 95a467bbbe54..d4f8c7bc859b 100644\n--- a/src/Access/AccessControl.cpp\n+++ b/src/Access/AccessControl.cpp\n@@ -280,7 +280,7 @@ void AccessControl::shutdown()\n }\n \n \n-void AccessControl::setUpFromMainConfig(const Poco::Util::AbstractConfiguration & config_, const String & config_path_,\n+void AccessControl::setupFromMainConfig(const Poco::Util::AbstractConfiguration & config_, const String & config_path_,\n                                         const zkutil::GetZooKeeper & get_zookeeper_function_)\n {\n     if (config_.has(\"custom_settings_prefixes\"))\n@@ -868,4 +868,10 @@ const ExternalAuthenticators & AccessControl::getExternalAuthenticators() const\n     return *external_authenticators;\n }\n \n+\n+void AccessControl::allowAllSettings()\n+{\n+    custom_settings_prefixes->registerPrefixes({\"\"});\n+}\n+\n }\ndiff --git a/src/Access/AccessControl.h b/src/Access/AccessControl.h\nindex bfaf256ad48b..7d8ee1232d0d 100644\n--- a/src/Access/AccessControl.h\n+++ b/src/Access/AccessControl.h\n@@ -57,7 +57,7 @@ class AccessControl : public MultipleAccessStorage\n     void shutdown() override;\n \n     /// Initializes access storage (user directories).\n-    void setUpFromMainConfig(const Poco::Util::AbstractConfiguration & config_, const String & config_path_,\n+    void setupFromMainConfig(const Poco::Util::AbstractConfiguration & config_, const String & config_path_,\n                              const zkutil::GetZooKeeper & get_zookeeper_function_);\n \n     /// Parses access entities from a configuration loaded from users.xml.\n@@ -238,6 +238,9 @@ class AccessControl : public MultipleAccessStorage\n     /// Gets manager of notifications.\n     AccessChangesNotifier & getChangesNotifier();\n \n+    /// Allow all setting names - this can be used in clients to pass-through unknown settings to the server.\n+    void allowAllSettings();\n+\n private:\n     class ContextAccessCache;\n     class CustomSettingsPrefixes;\ndiff --git a/src/Access/SettingsConstraints.cpp b/src/Access/SettingsConstraints.cpp\nindex a274f6b54f2f..7506e3650353 100644\n--- a/src/Access/SettingsConstraints.cpp\n+++ b/src/Access/SettingsConstraints.cpp\n@@ -219,8 +219,8 @@ void SettingsConstraints::clamp(const Settings & current_settings, SettingsChang\n         });\n }\n \n-template <class T>\n-bool getNewValueToCheck(const T & current_settings, SettingChange & change, Field & new_value, bool throw_on_failure)\n+template <typename SettingsT>\n+bool getNewValueToCheck(const SettingsT & current_settings, SettingChange & change, Field & new_value, bool throw_on_failure)\n {\n     Field current_value;\n     bool has_current_value = current_settings.tryGet(change.name, current_value);\n@@ -230,12 +230,12 @@ bool getNewValueToCheck(const T & current_settings, SettingChange & change, Fiel\n         return false;\n \n     if (throw_on_failure)\n-        new_value = T::castValueUtil(change.name, change.value);\n+        new_value = SettingsT::castValueUtil(change.name, change.value);\n     else\n     {\n         try\n         {\n-            new_value = T::castValueUtil(change.name, change.value);\n+            new_value = SettingsT::castValueUtil(change.name, change.value);\n         }\n         catch (...)\n         {\ndiff --git a/src/Client/ClientBase.cpp b/src/Client/ClientBase.cpp\nindex 187ef079edab..7e8a102385d2 100644\n--- a/src/Client/ClientBase.cpp\n+++ b/src/Client/ClientBase.cpp\n@@ -58,6 +58,7 @@\n #include <QueryPipeline/QueryPipelineBuilder.h>\n #include <Interpreters/ReplaceQueryParameterVisitor.h>\n #include <Interpreters/ProfileEventsExt.h>\n+#include <Interpreters/InterpreterSetQuery.h>\n #include <IO/WriteBufferFromOStream.h>\n #include <IO/WriteBufferFromFileDescriptor.h>\n #include <IO/CompressionMethod.h>\n@@ -1604,14 +1605,14 @@ void ClientBase::sendData(Block & sample, const ColumnsDescription & columns_des\n             auto metadata = storage->getInMemoryMetadataPtr();\n             QueryPlan plan;\n             storage->read(\n-                    plan,\n-                    sample.getNames(),\n-                    storage->getStorageSnapshot(metadata, client_context),\n-                    query_info,\n-                    client_context,\n-                    {},\n-                    client_context->getSettingsRef().max_block_size,\n-                    getNumberOfPhysicalCPUCores());\n+                plan,\n+                sample.getNames(),\n+                storage->getStorageSnapshot(metadata, client_context),\n+                query_info,\n+                client_context,\n+                {},\n+                client_context->getSettingsRef().max_block_size,\n+                getNumberOfPhysicalCPUCores());\n \n             auto builder = plan.buildQueryPipeline(\n                 QueryPlanOptimizationSettings::fromContext(client_context),\n@@ -1888,48 +1889,19 @@ void ClientBase::processParsedSingleQuery(const String & full_query, const Strin\n     profile_events.watch.restart();\n \n     {\n-        /// Temporarily apply query settings to context.\n-        std::optional<Settings> old_settings;\n-        SCOPE_EXIT_SAFE({\n-            if (old_settings)\n-                client_context->setSettings(*old_settings);\n-        });\n-\n-        auto apply_query_settings = [&](const IAST & settings_ast)\n+        /// Temporarily apply query settings to the context.\n+        Settings old_settings = client_context->getSettingsCopy();\n+        SCOPE_EXIT_SAFE(\n         {\n-            if (!old_settings)\n-                old_settings.emplace(client_context->getSettingsRef());\n-            client_context->applySettingsChanges(settings_ast.as<ASTSetQuery>()->changes);\n-            client_context->resetSettingsToDefaultValue(settings_ast.as<ASTSetQuery>()->default_settings);\n-        };\n-\n-        const auto * insert = parsed_query->as<ASTInsertQuery>();\n-        if (const auto * select = parsed_query->as<ASTSelectQuery>(); select && select->settings())\n-            apply_query_settings(*select->settings());\n-        else if (const auto * select_with_union = parsed_query->as<ASTSelectWithUnionQuery>())\n-        {\n-            const ASTs & children = select_with_union->list_of_selects->children;\n-            if (!children.empty())\n-            {\n-                // On the client it is enough to apply settings only for the\n-                // last SELECT, since the only thing that is important to apply\n-                // on the client is format settings.\n-                const auto * last_select = children.back()->as<ASTSelectQuery>();\n-                if (last_select && last_select->settings())\n-                {\n-                    apply_query_settings(*last_select->settings());\n-                }\n-            }\n-        }\n-        else if (const auto * query_with_output = parsed_query->as<ASTQueryWithOutput>(); query_with_output && query_with_output->settings_ast)\n-            apply_query_settings(*query_with_output->settings_ast);\n-        else if (insert && insert->settings_ast)\n-            apply_query_settings(*insert->settings_ast);\n+            client_context->setSettings(old_settings);\n+        });\n+        InterpreterSetQuery::applySettingsFromQuery(parsed_query, client_context);\n \n         if (!connection->checkConnected(connection_parameters.timeouts))\n             connect();\n \n         ASTPtr input_function;\n+        const auto * insert = parsed_query->as<ASTInsertQuery>();\n         if (insert && insert->select)\n             insert->tryFindInputFunction(input_function);\n \ndiff --git a/src/Interpreters/InterpreterSetQuery.cpp b/src/Interpreters/InterpreterSetQuery.cpp\nindex 7e68fc5c4c15..2ae35c4313bd 100644\n--- a/src/Interpreters/InterpreterSetQuery.cpp\n+++ b/src/Interpreters/InterpreterSetQuery.cpp\n@@ -9,6 +9,7 @@\n #include <Parsers/ASTQueryWithOutput.h>\n #include <Parsers/ASTSelectWithUnionQuery.h>\n \n+\n namespace DB\n {\n \n@@ -45,9 +46,7 @@ static void applySettingsFromSelectWithUnion(const ASTSelectWithUnionQuery & sel\n     // It is flattened later, when we process UNION ALL/DISTINCT.\n     const auto * last_select = children.back()->as<ASTSelectQuery>();\n     if (last_select && last_select->settings())\n-    {\n-        InterpreterSetQuery(last_select->settings(), context).executeForCurrentContext();\n-    }\n+        InterpreterSetQuery(last_select->settings(), context).executeForCurrentContext(/* ignore_setting_constraints= */ false);\n }\n \n void InterpreterSetQuery::applySettingsFromQuery(const ASTPtr & ast, ContextMutablePtr context_)\n@@ -55,10 +54,20 @@ void InterpreterSetQuery::applySettingsFromQuery(const ASTPtr & ast, ContextMuta\n     if (!ast)\n         return;\n \n+    /// First apply the outermost settings. Then they could be overridden by deeper settings.\n+    if (const auto * query_with_output = dynamic_cast<const ASTQueryWithOutput *>(ast.get()))\n+    {\n+        if (query_with_output->settings_ast)\n+            InterpreterSetQuery(query_with_output->settings_ast, context_).executeForCurrentContext(/* ignore_setting_constraints= */ false);\n+\n+        if (const auto * create_query = ast->as<ASTCreateQuery>(); create_query && create_query->select)\n+            applySettingsFromSelectWithUnion(create_query->select->as<ASTSelectWithUnionQuery &>(), context_);\n+    }\n+\n     if (const auto * select_query = ast->as<ASTSelectQuery>())\n     {\n         if (auto new_settings = select_query->settings())\n-            InterpreterSetQuery(new_settings, context_).executeForCurrentContext();\n+            InterpreterSetQuery(new_settings, context_).executeForCurrentContext(/* ignore_setting_constraints= */ false);\n     }\n     else if (const auto * select_with_union_query = ast->as<ASTSelectWithUnionQuery>())\n     {\n@@ -67,28 +76,15 @@ void InterpreterSetQuery::applySettingsFromQuery(const ASTPtr & ast, ContextMuta\n     else if (const auto * explain_query = ast->as<ASTExplainQuery>())\n     {\n         if (explain_query->settings_ast)\n-            InterpreterSetQuery(explain_query->settings_ast, context_).executeForCurrentContext();\n+            InterpreterSetQuery(explain_query->settings_ast, context_).executeForCurrentContext(/* ignore_setting_constraints= */ false);\n \n         applySettingsFromQuery(explain_query->getExplainedQuery(), context_);\n     }\n-    else if (const auto * query_with_output = dynamic_cast<const ASTQueryWithOutput *>(ast.get()))\n-    {\n-        if (query_with_output->settings_ast)\n-            InterpreterSetQuery(query_with_output->settings_ast, context_).executeForCurrentContext();\n-\n-        if (const auto * create_query = ast->as<ASTCreateQuery>())\n-        {\n-            if (create_query->select)\n-            {\n-                applySettingsFromSelectWithUnion(create_query->select->as<ASTSelectWithUnionQuery &>(), context_);\n-            }\n-        }\n-    }\n     else if (auto * insert_query = ast->as<ASTInsertQuery>())\n     {\n         context_->setInsertFormat(insert_query->format);\n         if (insert_query->settings_ast)\n-            InterpreterSetQuery(insert_query->settings_ast, context_).executeForCurrentContext();\n+            InterpreterSetQuery(insert_query->settings_ast, context_).executeForCurrentContext(/* ignore_setting_constraints= */ false);\n     }\n }\n \ndiff --git a/src/Interpreters/InterpreterSetQuery.h b/src/Interpreters/InterpreterSetQuery.h\nindex 2438762f347d..f50105c39f46 100644\n--- a/src/Interpreters/InterpreterSetQuery.h\n+++ b/src/Interpreters/InterpreterSetQuery.h\n@@ -23,7 +23,7 @@ class InterpreterSetQuery : public IInterpreter, WithMutableContext\n     /** Set setting for current context (query context).\n       * It is used for interpretation of SETTINGS clause in SELECT query.\n       */\n-    void executeForCurrentContext(bool ignore_setting_constraints = false);\n+    void executeForCurrentContext(bool ignore_setting_constraints);\n \n     bool supportsTransactions() const override { return true; }\n \ndiff --git a/src/Parsers/ParserQueryWithOutput.cpp b/src/Parsers/ParserQueryWithOutput.cpp\nindex cb0c10cd1c92..ac8f7d560e0d 100644\n--- a/src/Parsers/ParserQueryWithOutput.cpp\n+++ b/src/Parsers/ParserQueryWithOutput.cpp\n@@ -25,7 +25,6 @@\n #include <Parsers/ParserTablePropertiesQuery.h>\n #include <Parsers/ParserWatchQuery.h>\n #include <Parsers/ParserDescribeCacheQuery.h>\n-#include <Parsers/QueryWithOutputSettingsPushDownVisitor.h>\n #include <Parsers/Access/ParserShowAccessEntitiesQuery.h>\n #include <Parsers/Access/ParserShowAccessQuery.h>\n #include <Parsers/Access/ParserShowCreateAccessEntityQuery.h>\n@@ -152,37 +151,55 @@ bool ParserQueryWithOutput::parseImpl(Pos & pos, ASTPtr & node, Expected & expec\n \n     }\n \n+    /// These two sections are allowed in an arbitrary order.\n     ParserKeyword s_format(Keyword::FORMAT);\n+    ParserKeyword s_settings(Keyword::SETTINGS);\n \n-    if (s_format.ignore(pos, expected))\n+    /** Why: let's take the following example:\n+      * SELECT 1 UNION ALL SELECT 2 FORMAT TSV\n+      * Each subquery can be put in parentheses and have its own settings:\n+      *   (SELECT 1 SETTINGS a=b) UNION ALL (SELECT 2 SETTINGS c=d) FORMAT TSV\n+      * And the whole query can have settings:\n+      *   (SELECT 1 SETTINGS a=b) UNION ALL (SELECT 2 SETTINGS c=d) FORMAT TSV SETTINGS e=f\n+      * A single query with output is parsed in the same way as the UNION ALL chain:\n+      *   SELECT 1 SETTINGS a=b FORMAT TSV SETTINGS e=f\n+      * So while these forms have a slightly different meaning, they both exist:\n+      *   SELECT 1 SETTINGS a=b FORMAT TSV\n+      *   SELECT 1 FORMAT TSV SETTINGS e=f\n+      * And due to this effect, the users expect that the FORMAT and SETTINGS may go in an arbitrary order.\n+      * But while this work:\n+      *   (SELECT 1) UNION ALL (SELECT 2) FORMAT TSV SETTINGS d=f\n+      * This does not work automatically, unless we explicitly allow different orders:\n+      *   (SELECT 1) UNION ALL (SELECT 2) SETTINGS d=f FORMAT TSV\n+      * Inevitably, we also allow this:\n+      *   SELECT 1 SETTINGS a=b SETTINGS d=f FORMAT TSV\n+      *   ^^^^^^^^^^^^^^^^^^^^^\n+      * Because this part is consumed into ASTSelectWithUnionQuery\n+      * and the rest into ASTQueryWithOutput.\n+      */\n+\n+    for (size_t i = 0; i < 2; ++i)\n     {\n-        ParserIdentifier format_p;\n-\n-        if (!format_p.parse(pos, query_with_output.format, expected))\n-            return false;\n-        setIdentifierSpecial(query_with_output.format);\n-\n-        query_with_output.children.push_back(query_with_output.format);\n-    }\n+        if (!query_with_output.format && s_format.ignore(pos, expected))\n+        {\n+            ParserIdentifier format_p;\n \n-    // SETTINGS key1 = value1, key2 = value2, ...\n-    ParserKeyword s_settings(Keyword::SETTINGS);\n-    if (!query_with_output.settings_ast && s_settings.ignore(pos, expected))\n-    {\n-        ParserSetQuery parser_settings(true);\n-        if (!parser_settings.parse(pos, query_with_output.settings_ast, expected))\n-            return false;\n-        query_with_output.children.push_back(query_with_output.settings_ast);\n+            if (!format_p.parse(pos, query_with_output.format, expected))\n+                return false;\n+            setIdentifierSpecial(query_with_output.format);\n \n-        // SETTINGS after FORMAT is not parsed by the SELECT parser (ParserSelectQuery)\n-        // Pass them manually, to apply in InterpreterSelectQuery::initSettings()\n-        if (query->as<ASTSelectWithUnionQuery>())\n+            query_with_output.children.push_back(query_with_output.format);\n+        }\n+        else if (!query_with_output.settings_ast && s_settings.ignore(pos, expected))\n         {\n-            auto settings = query_with_output.settings_ast->clone();\n-            assert_cast<ASTSetQuery *>(settings.get())->print_in_format = false;\n-            QueryWithOutputSettingsPushDownVisitor::Data data{settings};\n-            QueryWithOutputSettingsPushDownVisitor(data).visit(query);\n+            // SETTINGS key1 = value1, key2 = value2, ...\n+            ParserSetQuery parser_settings(true);\n+            if (!parser_settings.parse(pos, query_with_output.settings_ast, expected))\n+                return false;\n+            query_with_output.children.push_back(query_with_output.settings_ast);\n         }\n+        else\n+            break;\n     }\n \n     node = std::move(query);\ndiff --git a/src/Parsers/QueryWithOutputSettingsPushDownVisitor.cpp b/src/Parsers/QueryWithOutputSettingsPushDownVisitor.cpp\ndeleted file mode 100644\nindex 8cf0d0063aed..000000000000\n--- a/src/Parsers/QueryWithOutputSettingsPushDownVisitor.cpp\n+++ /dev/null\n@@ -1,56 +0,0 @@\n-#include <Common/SettingsChanges.h>\n-#include <Parsers/QueryWithOutputSettingsPushDownVisitor.h>\n-#include <Parsers/ASTSelectWithUnionQuery.h>\n-#include <Parsers/ASTSelectQuery.h>\n-#include <Parsers/ASTSetQuery.h>\n-#include <Parsers/ASTSubquery.h>\n-\n-#include <iterator>\n-#include <algorithm>\n-\n-namespace DB\n-{\n-\n-bool QueryWithOutputSettingsPushDownMatcher::needChildVisit(ASTPtr & node, const ASTPtr & child)\n-{\n-    if (node->as<ASTSelectWithUnionQuery>())\n-        return true;\n-    if (node->as<ASTSubquery>())\n-        return true;\n-    if (child->as<ASTSelectQuery>())\n-        return true;\n-    return false;\n-}\n-\n-void QueryWithOutputSettingsPushDownMatcher::visit(ASTPtr & ast, Data & data)\n-{\n-    if (auto * select_query = ast->as<ASTSelectQuery>())\n-        visit(*select_query, ast, data);\n-}\n-\n-void QueryWithOutputSettingsPushDownMatcher::visit(ASTSelectQuery & select_query, ASTPtr &, Data & data)\n-{\n-    ASTPtr select_settings_ast = select_query.settings();\n-    if (!select_settings_ast)\n-    {\n-        select_query.setExpression(ASTSelectQuery::Expression::SETTINGS, data.settings_ast->clone());\n-        return;\n-    }\n-\n-    SettingsChanges & select_settings = select_settings_ast->as<ASTSetQuery &>().changes;\n-    SettingsChanges & settings = data.settings_ast->as<ASTSetQuery &>().changes;\n-\n-    for (auto & setting : settings)\n-    {\n-        auto it = std::find_if(select_settings.begin(), select_settings.end(), [&](auto & select_setting)\n-        {\n-            return select_setting.name == setting.name;\n-        });\n-        if (it == select_settings.end())\n-            select_settings.push_back(setting);\n-        else\n-            it->value = setting.value;\n-    }\n-}\n-\n-}\ndiff --git a/src/Parsers/QueryWithOutputSettingsPushDownVisitor.h b/src/Parsers/QueryWithOutputSettingsPushDownVisitor.h\ndeleted file mode 100644\nindex fde8a07b5551..000000000000\n--- a/src/Parsers/QueryWithOutputSettingsPushDownVisitor.h\n+++ /dev/null\n@@ -1,39 +0,0 @@\n-#pragma once\n-\n-#include <Parsers/IAST.h>\n-#include <Interpreters/InDepthNodeVisitor.h>\n-\n-namespace DB\n-{\n-\n-class ASTSelectQuery;\n-struct SettingChange;\n-class SettingsChanges;\n-\n-/// Pushdown SETTINGS clause that goes after FORMAT to the SELECT query:\n-/// (since settings after FORMAT parsed separately not in the ParserSelectQuery but in ParserQueryWithOutput)\n-///\n-///     SELECT 1                             FORMAT Null SETTINGS max_block_size = 1 ->\n-///     SELECT 1 SETTINGS max_block_size = 1 FORMAT Null SETTINGS max_block_size = 1\n-///\n-/// Otherwise settings after FORMAT will not be applied.\n-class QueryWithOutputSettingsPushDownMatcher\n-{\n-public:\n-    using Visitor = InDepthNodeVisitor<QueryWithOutputSettingsPushDownMatcher, true>;\n-\n-    struct Data\n-    {\n-        const ASTPtr & settings_ast;\n-    };\n-\n-    static bool needChildVisit(ASTPtr & node, const ASTPtr & child);\n-    static void visit(ASTPtr & ast, Data & data);\n-\n-private:\n-    static void visit(ASTSelectQuery &, ASTPtr &, Data &);\n-};\n-\n-using QueryWithOutputSettingsPushDownVisitor = QueryWithOutputSettingsPushDownMatcher::Visitor;\n-\n-}\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00857_global_joinsavel_table_alias.sql b/tests/queries/0_stateless/00857_global_joinsavel_table_alias.sql\nindex 2044a9b8d224..092b071cb48b 100644\n--- a/tests/queries/0_stateless/00857_global_joinsavel_table_alias.sql\n+++ b/tests/queries/0_stateless/00857_global_joinsavel_table_alias.sql\n@@ -1,4 +1,3 @@\n-\n DROP TABLE IF EXISTS local_table;\n DROP TABLE IF EXISTS other_table;\n \ndiff --git a/tests/queries/0_stateless/01401_FORMAT_SETTINGS.reference b/tests/queries/0_stateless/01401_FORMAT_SETTINGS.reference\nindex 22405bf1866d..a8b99666654e 100644\n--- a/tests/queries/0_stateless/01401_FORMAT_SETTINGS.reference\n+++ b/tests/queries/0_stateless/01401_FORMAT_SETTINGS.reference\n@@ -1,7 +1,7 @@\n 1\n 1\n 1\n-1\n+2\n 1\n 2\n 2\ndiff --git a/tests/queries/0_stateless/01401_FORMAT_SETTINGS.sh b/tests/queries/0_stateless/01401_FORMAT_SETTINGS.sh\nindex b70c28422c93..173cc949500c 100755\n--- a/tests/queries/0_stateless/01401_FORMAT_SETTINGS.sh\n+++ b/tests/queries/0_stateless/01401_FORMAT_SETTINGS.sh\n@@ -13,7 +13,7 @@ ${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}\" -d 'SELECT DISTINCT blockSize() FROM\n ${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}\" -d 'SELECT DISTINCT blockSize() FROM numbers(2) FORMAT CSV SETTINGS max_block_size = 1'\n # push down append\n ${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}\" -d 'SELECT DISTINCT blockSize() FROM numbers(2) SETTINGS max_compress_block_size = 1 FORMAT CSV SETTINGS max_block_size = 1'\n-# overwrite on push down (since these settings goes latest)\n+# not overwrite on push down\n ${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}\" -d 'SELECT DISTINCT blockSize() FROM numbers(2) SETTINGS max_block_size = 2 FORMAT CSV SETTINGS max_block_size = 1'\n # on push-down\n ${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}\" -d 'SELECT DISTINCT blockSize() FROM numbers(2) SETTINGS max_block_size = 1 FORMAT CSV'\ndiff --git a/tests/queries/0_stateless/03003_compatibility_setting_bad_value.sql b/tests/queries/0_stateless/03003_compatibility_setting_bad_value.sql\nindex 48e98798c512..3a09eec74527 100644\n--- a/tests/queries/0_stateless/03003_compatibility_setting_bad_value.sql\n+++ b/tests/queries/0_stateless/03003_compatibility_setting_bad_value.sql\n@@ -1,2 +1,1 @@\n-select 42 settings compatibility=NULL;  -- {clientError BAD_ARGUMENTS}\n-\n+select 42 settings compatibility=NULL;  -- {clientError BAD_GET}\ndiff --git a/tests/queries/0_stateless/03172_format_settings_clauses.reference b/tests/queries/0_stateless/03172_format_settings_clauses.reference\nnew file mode 100644\nindex 000000000000..8a98b137f4b1\n--- /dev/null\n+++ b/tests/queries/0_stateless/03172_format_settings_clauses.reference\n@@ -0,0 +1,14 @@\n+1\n+2\n+1\n+2\n+1\n+2\n+1\n+1\n+3\n+3\n+3\n+3\n+3\n+1\ndiff --git a/tests/queries/0_stateless/03172_format_settings_clauses.sql b/tests/queries/0_stateless/03172_format_settings_clauses.sql\nnew file mode 100644\nindex 000000000000..0d1aa4dcfbb8\n--- /dev/null\n+++ b/tests/queries/0_stateless/03172_format_settings_clauses.sql\n@@ -0,0 +1,30 @@\n+SET max_block_size = 10, max_threads = 1;\n+\n+-- Take the following example:\n+SELECT 1 UNION ALL SELECT 2 FORMAT TSV;\n+\n+-- Each subquery can be put in parentheses and have its own settings:\n+(SELECT getSetting('max_block_size') SETTINGS max_block_size = 1) UNION ALL (SELECT getSetting('max_block_size') SETTINGS max_block_size = 2) FORMAT TSV;\n+\n+-- And the whole query can have settings:\n+(SELECT getSetting('max_block_size') SETTINGS max_block_size = 1) UNION ALL (SELECT getSetting('max_block_size') SETTINGS max_block_size = 2) FORMAT TSV SETTINGS max_block_size = 3;\n+\n+-- A single query with output is parsed in the same way as the UNION ALL chain:\n+SELECT getSetting('max_block_size') SETTINGS max_block_size = 1 FORMAT TSV SETTINGS max_block_size = 3;\n+\n+-- So while these forms have a slightly different meaning, they both exist:\n+SELECT getSetting('max_block_size') SETTINGS max_block_size = 1 FORMAT TSV;\n+SELECT getSetting('max_block_size') FORMAT TSV SETTINGS max_block_size = 3;\n+\n+-- And due to this effect, the users expect that the FORMAT and SETTINGS may go in an arbitrary order.\n+-- But while this work:\n+(SELECT getSetting('max_block_size')) UNION ALL (SELECT getSetting('max_block_size')) FORMAT TSV SETTINGS max_block_size = 3;\n+\n+-- This does not work automatically, unless we explicitly allow different orders:\n+(SELECT getSetting('max_block_size')) UNION ALL (SELECT getSetting('max_block_size')) SETTINGS max_block_size = 3 FORMAT TSV;\n+\n+-- Inevitably, we allow this:\n+SELECT getSetting('max_block_size') SETTINGS max_block_size = 1 SETTINGS max_block_size = 3 FORMAT TSV;\n+/*^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^*/\n+-- Because this part is consumed into ASTSelectWithUnionQuery\n+-- and the rest into ASTQueryWithOutput.\n",
  "problem_statement": "FORMAT and SETTINGS parsing leads to errors\nQuery parsing related to `FORMAT` and `SETTINGS` clauses is inconsistent.\r\n\r\n`select 1 settings log_comment='test' Format {{format}}` works as intended\r\n`(select 1) settings log_comment='test' Format {{format}}` and `(select 1) union (select 2) settings log_comment='test' Format {{format}}` give a parsing error:\r\n\r\n```\r\nSyntax error: failed at position 50 ('Format'):\r\n\r\n(select 1)  settings log_comment='prova valerio' Format JSONCompact\r\n\r\nExpected end of query\r\n```\r\n\r\nQueries without the `FORMAT` clause work as intended.\r\n\r\n**Does it reproduce on recent release?**\r\n22.7.1.2484 is affected\r\n\r\n**How to reproduce**\r\nConnect to clickhouse-client and run the queries\r\n\r\n**Expected behavior**\r\n\r\nSame behaviour between different versions\r\n\r\n> If applicable, add screenshots to help explain your problem.\r\n\r\n![image](https://user-images.githubusercontent.com/36407154/181772096-6d3d88e9-7909-41fe-8ab9-1490ae0818f4.png)\r\n\r\n\n",
  "hints_text": "It's because two SETTINGS clauses are possible: before and after FORMAT:\r\n```\r\ndell9510 :) select 1 settings log_comment='qwerty' Format TSV settings log_comment='test'\r\n\r\nSELECT 1\r\nSETTINGS log_comment = 'test'\r\nFORMAT TSV\r\nSETTINGS log_comment = 'test'\r\n\r\nQuery id: 22453be5-776e-44f5-a3e5-768ceb92c861\r\n\r\n1\r\n\r\n1 row in set. Elapsed: 0.006 sec.\r\n```\r\n\r\nThe first clause is part of `ASTSelectQuery` and the second one is part of `ASTSelectWithUnionQuery`. It looks weird and confusing in the example above, but the following example makes it a bit more clear:\r\n```\r\ndell9510 :) (select 1 settings log_comment='asdfgh') union all (select 2 settings log_comment='qwerty') Format TSV settings log_comment='test'\r\n\r\n\r\nSELECT 1\r\nSETTINGS log_comment = 'asdfgh'\r\nUNION ALL\r\nSELECT 2\r\nSETTINGS log_comment = 'qwerty'\r\nFORMAT TSV\r\nSETTINGS log_comment = 'test'\r\n\r\nQuery id: d8ea97d4-dc82-4133-9e56-e360e2d83f0f\r\n\r\n2\r\n1\r\n\r\n2 rows in set. Elapsed: 0.012 sec. \r\n\r\n```\r\n\r\nSee also https://github.com/ClickHouse/ClickHouse/pull/11804 and linked issues/PRs",
  "created_at": "2024-02-20T18:10:03Z",
  "modified_files": [
    "programs/client/Client.cpp",
    "programs/server/Server.cpp",
    "src/Access/AccessControl.cpp",
    "src/Access/AccessControl.h",
    "src/Access/SettingsConstraints.cpp",
    "src/Client/ClientBase.cpp",
    "src/Interpreters/InterpreterSetQuery.cpp",
    "src/Interpreters/InterpreterSetQuery.h",
    "src/Parsers/ParserQueryWithOutput.cpp",
    "src/Parsers/QueryWithOutputSettingsPushDownVisitor.cpp",
    "src/Parsers/QueryWithOutputSettingsPushDownVisitor.h"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/00857_global_joinsavel_table_alias.sql",
    "tests/queries/0_stateless/01401_FORMAT_SETTINGS.reference",
    "tests/queries/0_stateless/01401_FORMAT_SETTINGS.sh",
    "tests/queries/0_stateless/03003_compatibility_setting_bad_value.sql",
    "b/tests/queries/0_stateless/03172_format_settings_clauses.reference",
    "b/tests/queries/0_stateless/03172_format_settings_clauses.sql"
  ]
}