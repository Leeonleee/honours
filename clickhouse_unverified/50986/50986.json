{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 50986,
  "instance_id": "ClickHouse__ClickHouse-50986",
  "issue_numbers": [
    "48291"
  ],
  "base_commit": "b225f9c34bf6064d246ede33f98e3c573fcda142",
  "patch": "diff --git a/docs/en/operations/configuration-files.md b/docs/en/operations/configuration-files.md\nindex d3e21cb23645..d1d9fa542ab1 100644\n--- a/docs/en/operations/configuration-files.md\n+++ b/docs/en/operations/configuration-files.md\n@@ -65,6 +65,40 @@ XML substitution example:\n \n Substitutions can also be performed from ZooKeeper. To do this, specify the attribute `from_zk = \"/path/to/node\"`. The element value is replaced with the contents of the node at `/path/to/node` in ZooKeeper. You can also put an entire XML subtree on the ZooKeeper node and it will be fully inserted into the source element.\n \n+## Encrypting Configuration {#encryption}\n+\n+You can use symmetric encryption to encrypt a configuration element, for example, a password field. To do so, first configure the [encryption codec](../sql-reference/statements/create/table.md#encryption-codecs), then add attribute `encryption_codec` with the name of the encryption codec as value to the element to encrypt.\n+\n+Unlike attributes `from_zk`, `from_env` and `incl` (or element `include`), no substitution, i.e. decryption of the encrypted value, is performed in the preprocessed file. Decryption happens only at runtime in the server process.\n+\n+Example:\n+\n+```xml\n+<clickhouse>\n+    <encryption_codecs>\n+        <aes_128_gcm_siv>\n+            <key_hex>00112233445566778899aabbccddeeff</key_hex>\n+        </aes_128_gcm_siv>\n+    </encryption_codecs>\n+    <interserver_http_credentials>\n+        <user>admin</user>\n+        <password encryption_codec=\"AES_128_GCM_SIV\">961F000000040000000000EEDDEF4F453CFE6457C4234BD7C09258BD651D85</password>\n+    </interserver_http_credentials>\n+</clickhouse>\n+```\n+\n+To get the encrypted value `encrypt_decrypt` example application may be used.\n+\n+Example:\n+\n+``` bash\n+./encrypt_decrypt /etc/clickhouse-server/config.xml -e AES_128_GCM_SIV abcd\n+```\n+\n+``` text\n+961F000000040000000000EEDDEF4F453CFE6457C4234BD7C09258BD651D85\n+```\n+\n ## User Settings {#user-settings}\n \n The `config.xml` file can specify a separate config with user settings, profiles, and quotas. The relative path to this config is set in the `users_config` element. By default, it is `users.xml`. If `users_config` is omitted, the user settings, profiles, and quotas are specified directly in `config.xml`.\ndiff --git a/docs/ru/operations/configuration-files.md b/docs/ru/operations/configuration-files.md\nindex 2b824ce91bd9..01a91bd41c64 100644\n--- a/docs/ru/operations/configuration-files.md\n+++ b/docs/ru/operations/configuration-files.md\n@@ -85,6 +85,40 @@ $ cat /etc/clickhouse-server/users.d/alice.xml\n \n \u0421\u0435\u0440\u0432\u0435\u0440 \u0441\u043b\u0435\u0434\u0438\u0442 \u0437\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f\u043c\u0438 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u0444\u0430\u0439\u043b\u043e\u0432, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0444\u0430\u0439\u043b\u043e\u0432 \u0438 ZooKeeper-\u0443\u0437\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u043f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043e\u043a \u0438 \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0439, \u0438 \u043f\u0435\u0440\u0435\u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u043e\u0432 \u043d\u0430 \u043b\u0435\u0442\u0443. \u0422\u043e \u0435\u0441\u0442\u044c, \u043c\u043e\u0436\u043d\u043e \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u043a\u043b\u0430\u0441\u0442\u0435\u0440\u0430, \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u0438\u0445 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438 \u0431\u0435\u0437 \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0441\u0435\u0440\u0432\u0435\u0440\u0430.\n \n+## \u0428\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u0435 {#encryption}\n+\n+\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0438\u043c\u043c\u0435\u0442\u0440\u0438\u0447\u043d\u043e\u0435 \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u0437\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u043a\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043e\u043b\u044f password. \u0427\u0442\u043e\u0431\u044b \u044d\u0442\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c, \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u0442\u0435 [\u043a\u043e\u0434\u0435\u043a \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u044f](../sql-reference/statements/create/table.md#encryption-codecs), \u0437\u0430\u0442\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u044c\u0442\u0435 \u0430\u0442\u0442\u0438\u0431\u0443\u0442`encryption_codec` \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u043a\u043e\u0434\u0435\u043a\u0430 \u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u0430\u043a \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0443, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0430\u0434\u043e \u0437\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u0442\u044c.\n+\n+\u0412 \u043e\u0442\u043b\u0438\u0447\u0438\u0438 \u043e\u0442 \u0430\u0442\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u0432 `from_zk`, `from_env` \u0438 `incl` (\u0438\u043b\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 `include`), \u043f\u043e\u0434\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430, \u0442.\u0435. \u0440\u0430\u0441\u0448\u0438\u0444\u0440\u043e\u0432\u043a\u0430 \u0437\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u043d\u0435 \u0432\u044b\u043f\u043e\u0434\u043d\u044f\u0435\u0442\u0441\u044f \u0432 \u0444\u0430\u0439\u043b\u0435 \u043f\u0440\u0435\u0434\u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438. \u0420\u0430\u0441\u0448\u0438\u0444\u0440\u043e\u0432\u043a\u0430 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0438\u0441\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0432 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435.\n+\n+\u041f\u0440\u0438\u043c\u0435\u0440:\n+\n+```xml\n+<clickhouse>\n+    <encryption_codecs>\n+        <aes_128_gcm_siv>\n+            <key_hex>00112233445566778899aabbccddeeff</key_hex>\n+        </aes_128_gcm_siv>\n+    </encryption_codecs>\n+    <interserver_http_credentials>\n+        <user>admin</user>\n+        <password encryption_codec=\"AES_128_GCM_SIV\">961F000000040000000000EEDDEF4F453CFE6457C4234BD7C09258BD651D85</password>\n+    </interserver_http_credentials>\n+</clickhouse>\n+```\n+\n+\u0427\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0437\u0430\u0448\u0438\u0444\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435-\u043f\u0440\u0438\u043c\u0435\u0440 `encrypt_decrypt` .\n+\n+\u041f\u0440\u0438\u043c\u0435\u0440:\n+\n+``` bash\n+./encrypt_decrypt /etc/clickhouse-server/config.xml -e AES_128_GCM_SIV abcd\n+```\n+\n+``` text\n+961F000000040000000000EEDDEF4F453CFE6457C4234BD7C09258BD651D85\n+```\n+\n ## \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0437\u0430\u043f\u0438\u0441\u0438 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u043d\u0430 YAML {#example}\n \n \u0417\u0434\u0435\u0441\u044c \u043c\u043e\u0436\u043d\u043e \u0440\u0430\u0441\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043f\u0440\u0438\u043c\u0435\u0440 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0439 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u043e\u0439 \u043d\u0430 YAML: [config.yaml.example](https://github.com/ClickHouse/ClickHouse/blob/master/programs/server/config.yaml.example).\ndiff --git a/programs/keeper/CMakeLists.txt b/programs/keeper/CMakeLists.txt\nindex 940e68485978..d63279ff8c7c 100644\n--- a/programs/keeper/CMakeLists.txt\n+++ b/programs/keeper/CMakeLists.txt\n@@ -94,6 +94,7 @@ if (BUILD_STANDALONE_KEEPER)\n         ${CMAKE_CURRENT_SOURCE_DIR}/../../src/Compression/CompressedReadBuffer.cpp\n         ${CMAKE_CURRENT_SOURCE_DIR}/../../src/Compression/CompressedReadBufferFromFile.cpp\n         ${CMAKE_CURRENT_SOURCE_DIR}/../../src/Compression/CompressedWriteBuffer.cpp\n+        ${CMAKE_CURRENT_SOURCE_DIR}/../../src/Compression/CompressionCodecEncrypted.cpp\n         ${CMAKE_CURRENT_SOURCE_DIR}/../../src/Compression/CompressionCodecLZ4.cpp\n         ${CMAKE_CURRENT_SOURCE_DIR}/../../src/Compression/CompressionCodecMultiple.cpp\n         ${CMAKE_CURRENT_SOURCE_DIR}/../../src/Compression/CompressionCodecNone.cpp\ndiff --git a/src/Common/Config/ConfigProcessor.cpp b/src/Common/Config/ConfigProcessor.cpp\nindex 5bbc8eae0de1..73fc5c58b2f2 100644\n--- a/src/Common/Config/ConfigProcessor.cpp\n+++ b/src/Common/Config/ConfigProcessor.cpp\n@@ -27,6 +27,14 @@\n #include <IO/WriteBufferFromString.h>\n #include <IO/Operators.h>\n \n+#if USE_SSL\n+#include <format>\n+#include <IO/BufferWithOwnMemory.h>\n+#include <Compression/ICompressionCodec.h>\n+#include <Compression/CompressionCodecEncrypted.h>\n+#include <boost/algorithm/hex.hpp>\n+#endif\n+\n #define PREPROCESSED_SUFFIX \"-preprocessed\"\n \n namespace fs = std::filesystem;\n@@ -40,6 +48,9 @@ namespace ErrorCodes\n {\n     extern const int FILE_DOESNT_EXIST;\n     extern const int CANNOT_LOAD_CONFIG;\n+#if USE_SSL\n+    extern const int BAD_ARGUMENTS;\n+#endif\n }\n \n /// For cutting preprocessed path to this base\n@@ -171,6 +182,72 @@ static void mergeAttributes(Element & config_element, Element & with_element)\n     with_element_attributes->release();\n }\n \n+#if USE_SSL\n+\n+std::string ConfigProcessor::encryptValue(const std::string & codec_name, const std::string & value)\n+{\n+    EncryptionMethod method = getEncryptionMethod(codec_name);\n+    CompressionCodecEncrypted codec(method);\n+\n+    Memory<> memory;\n+    memory.resize(codec.getCompressedReserveSize(static_cast<UInt32>(value.size())));\n+    auto bytes_written = codec.compress(value.data(), static_cast<UInt32>(value.size()), memory.data());\n+    auto encrypted_value = std::string(memory.data(), bytes_written);\n+    std::string hex_value;\n+    boost::algorithm::hex(encrypted_value.begin(), encrypted_value.end(), std::back_inserter(hex_value));\n+    return hex_value;\n+}\n+\n+std::string ConfigProcessor::decryptValue(const std::string & codec_name, const std::string & value)\n+{\n+    EncryptionMethod method = getEncryptionMethod(codec_name);\n+    CompressionCodecEncrypted codec(method);\n+\n+    Memory<> memory;\n+    std::string encrypted_value;\n+\n+    try\n+    {\n+        boost::algorithm::unhex(value, std::back_inserter(encrypted_value));\n+    }\n+    catch (const std::exception &)\n+    {\n+        throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Cannot read encrypted text, check for valid characters [0-9a-fA-F] and length\");\n+    }\n+\n+    memory.resize(codec.readDecompressedBlockSize(encrypted_value.data()));\n+    codec.decompress(encrypted_value.data(), static_cast<UInt32>(encrypted_value.size()), memory.data());\n+    std::string decrypted_value = std::string(memory.data(), memory.size());\n+    return decrypted_value;\n+}\n+\n+void ConfigProcessor::decryptRecursive(Poco::XML::Node * config_root)\n+{\n+    for (Node * node = config_root->firstChild(); node; node = node->nextSibling())\n+    {\n+        if (node->nodeType() == Node::ELEMENT_NODE)\n+        {\n+            Element & element = dynamic_cast<Element &>(*node);\n+            if (element.hasAttribute(\"encryption_codec\"))\n+            {\n+                const NodeListPtr children = element.childNodes();\n+                if (children->length() != 1)\n+                    throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Encrypted node {} cannot contain nested elements\", node->nodeName());\n+\n+                Node * text_node = node->firstChild();\n+                if (text_node->nodeType() != Node::TEXT_NODE)\n+                    throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Encrypted node {} should have text node\", node->nodeName());\n+\n+                auto encryption_codec = element.getAttribute(\"encryption_codec\");\n+                text_node->setNodeValue(decryptValue(encryption_codec, text_node->getNodeValue()));\n+            }\n+            decryptRecursive(node);\n+        }\n+    }\n+}\n+\n+#endif\n+\n void ConfigProcessor::mergeRecursive(XMLDocumentPtr config, Node * config_root, const Node * with_root)\n {\n     const NodeListPtr with_nodes = with_root->childNodes();\n@@ -700,7 +777,19 @@ ConfigProcessor::LoadedConfig ConfigProcessor::loadConfigWithZooKeeperIncludes(\n     return LoadedConfig{configuration, has_zk_includes, !processed_successfully, config_xml, path};\n }\n \n-void ConfigProcessor::savePreprocessedConfig(const LoadedConfig & loaded_config, std::string preprocessed_dir)\n+#if USE_SSL\n+\n+void ConfigProcessor::decryptEncryptedElements(LoadedConfig & loaded_config)\n+{\n+    CompressionCodecEncrypted::Configuration::instance().tryLoad(*loaded_config.configuration, \"encryption_codecs\");\n+    Node * config_root = getRootNode(loaded_config.preprocessed_xml.get());\n+    decryptRecursive(config_root);\n+    loaded_config.configuration = new Poco::Util::XMLConfiguration(loaded_config.preprocessed_xml);\n+}\n+\n+#endif\n+\n+void ConfigProcessor::savePreprocessedConfig(LoadedConfig & loaded_config, std::string preprocessed_dir)\n {\n     try\n     {\n@@ -755,6 +844,12 @@ void ConfigProcessor::savePreprocessedConfig(const LoadedConfig & loaded_config,\n     {\n         LOG_WARNING(log, \"Couldn't save preprocessed config to {}: {}\", preprocessed_path, e.displayText());\n     }\n+\n+#if USE_SSL\n+    std::string preprocessed_file_name = fs::path(preprocessed_path).filename();\n+    if (preprocessed_file_name == \"config.xml\" || preprocessed_file_name == std::format(\"config{}.xml\", PREPROCESSED_SUFFIX))\n+        decryptEncryptedElements(loaded_config);\n+#endif\n }\n \n void ConfigProcessor::setConfigPath(const std::string & config_path)\ndiff --git a/src/Common/Config/ConfigProcessor.h b/src/Common/Config/ConfigProcessor.h\nindex 0ca3e46db884..5901101a4100 100644\n--- a/src/Common/Config/ConfigProcessor.h\n+++ b/src/Common/Config/ConfigProcessor.h\n@@ -94,7 +94,7 @@ class ConfigProcessor\n \n     /// Save preprocessed config to specified directory.\n     /// If preprocessed_dir is empty - calculate from loaded_config.path + /preprocessed_configs/\n-    void savePreprocessedConfig(const LoadedConfig & loaded_config, std::string preprocessed_dir);\n+    void savePreprocessedConfig(LoadedConfig & loaded_config, std::string preprocessed_dir);\n \n     /// Set path of main config.xml. It will be cut from all configs placed to preprocessed_configs/\n     static void setConfigPath(const std::string & config_path);\n@@ -106,6 +106,14 @@ class ConfigProcessor\n     /// Is the file named as result of config preprocessing, not as original files.\n     static bool isPreprocessedFile(const std::string & config_path);\n \n+#if USE_SSL\n+    /// Encrypt text value\n+    static std::string encryptValue(const std::string & codec_name, const std::string & value);\n+\n+    /// Decrypt value\n+    static std::string decryptValue(const std::string & codec_name, const std::string & value);\n+#endif\n+\n     static inline const auto SUBSTITUTION_ATTRS = {\"incl\", \"from_zk\", \"from_env\"};\n \n private:\n@@ -124,6 +132,13 @@ class ConfigProcessor\n \n     using NodePtr = Poco::AutoPtr<Poco::XML::Node>;\n \n+#if USE_SSL\n+    void decryptRecursive(Poco::XML::Node * config_root);\n+\n+    /// Decrypt elements in config with specified encryption attributes\n+    void decryptEncryptedElements(LoadedConfig & loaded_config);\n+#endif\n+\n     void mergeRecursive(XMLDocumentPtr config, Poco::XML::Node * config_root, const Poco::XML::Node * with_root);\n \n     void merge(XMLDocumentPtr config, XMLDocumentPtr with);\ndiff --git a/src/Common/Config/YAMLParser.cpp b/src/Common/Config/YAMLParser.cpp\nindex d96049197260..72706cb98ba7 100644\n--- a/src/Common/Config/YAMLParser.cpp\n+++ b/src/Common/Config/YAMLParser.cpp\n@@ -110,9 +110,23 @@ namespace\n                     }\n                     else\n                     {\n-                        Poco::AutoPtr<Poco::XML::Element> xml_key = xml_document->createElement(key);\n-                        parent_xml_node.appendChild(xml_key);\n-                        processNode(value_node, *xml_key);\n+                        if (key == \"#text\" && value_node.IsScalar())\n+                        {\n+                            for (Node * child_node = parent_xml_node.firstChild(); child_node; child_node = child_node->nextSibling())\n+                                if (child_node->nodeType() == Node::TEXT_NODE)\n+                                    throw Exception(ErrorCodes::CANNOT_PARSE_YAML,\n+                                                    \"YAMLParser has encountered node with several text nodes \"\n+                                                    \"and cannot continue parsing of the file\");\n+                            std::string value = value_node.as<std::string>();\n+                            Poco::AutoPtr<Poco::XML::Text> xml_value = xml_document->createTextNode(value);\n+                            parent_xml_node.appendChild(xml_value);\n+                        }\n+                        else\n+                        {\n+                            Poco::AutoPtr<Poco::XML::Element> xml_key = xml_document->createElement(key);\n+                            parent_xml_node.appendChild(xml_key);\n+                            processNode(value_node, *xml_key);\n+                        }\n                     }\n                 }\n                 break;\ndiff --git a/src/Common/examples/CMakeLists.txt b/src/Common/examples/CMakeLists.txt\nindex d095ab3a1bee..90a238c9800c 100644\n--- a/src/Common/examples/CMakeLists.txt\n+++ b/src/Common/examples/CMakeLists.txt\n@@ -82,3 +82,8 @@ endif()\n \n clickhouse_add_executable (interval_tree interval_tree.cpp)\n target_link_libraries (interval_tree PRIVATE dbms)\n+\n+if (ENABLE_SSL)\n+    clickhouse_add_executable (encrypt_decrypt encrypt_decrypt.cpp)\n+    target_link_libraries (encrypt_decrypt PRIVATE dbms)\n+endif()\ndiff --git a/src/Common/examples/encrypt_decrypt.cpp b/src/Common/examples/encrypt_decrypt.cpp\nnew file mode 100644\nindex 000000000000..503802016cbb\n--- /dev/null\n+++ b/src/Common/examples/encrypt_decrypt.cpp\n@@ -0,0 +1,61 @@\n+#include <Common/Config/ConfigProcessor.h>\n+#include <Compression/ICompressionCodec.h>\n+#include <Compression/CompressionCodecEncrypted.h>\n+#include <iostream>\n+\n+/** This test program encrypts or decrypts text values using a symmetric encryption codec like AES_128_GCM_SIV or AES_256_GCM_SIV.\n+  * Keys for codecs are loaded from <encryption_codecs> section of configuration file.\n+  *\n+  * How to use:\n+  *     ./encrypt_decrypt /etc/clickhouse-server/config.xml -e AES_128_GCM_SIV text_to_encrypt\n+  */\n+\n+int main(int argc, char ** argv)\n+{\n+    try\n+    {\n+        if (argc != 5)\n+        {\n+            std::cerr << \"Usage:\" << std::endl\n+                << \"    \" << argv[0] << \" path action codec value\" << std::endl\n+                << \"path: path to configuration file.\" << std::endl\n+                << \"action: -e for encryption and -d for decryption.\" << std::endl\n+                << \"codec: AES_128_GCM_SIV or AES_256_GCM_SIV.\" << std::endl << std::endl\n+                << \"Example:\"  << std::endl\n+                << \"    ./encrypt_decrypt /etc/clickhouse-server/config.xml -e AES_128_GCM_SIV text_to_encrypt\";\n+            return 3;\n+        }\n+\n+        std::string action = argv[2];\n+        std::string codec_name = argv[3];\n+        std::string value = argv[4];\n+\n+        DB::ConfigProcessor processor(argv[1], false, true);\n+        auto loaded_config = processor.loadConfig();\n+        DB::CompressionCodecEncrypted::Configuration::instance().tryLoad(*loaded_config.configuration, \"encryption_codecs\");\n+\n+        if (action == \"-e\")\n+            std::cout << processor.encryptValue(codec_name, value) << std::endl;\n+        else if (action == \"-d\")\n+            std::cout << processor.decryptValue(codec_name, value) << std::endl;\n+        else\n+            std::cerr << \"Unknown action: \" << action << std::endl;\n+    }\n+    catch (Poco::Exception & e)\n+    {\n+        std::cerr << \"Exception: \" << e.displayText() << std::endl;\n+        return 1;\n+    }\n+    catch (std::exception & e)\n+    {\n+        std::cerr << \"std::exception: \" << e.what() << std::endl;\n+        return 3;\n+    }\n+    catch (...)\n+    {\n+        std::cerr << \"Some exception\" << std::endl;\n+        return 2;\n+    }\n+\n+    return 0;\n+}\ndiff --git a/src/Compression/CompressionCodecEncrypted.cpp b/src/Compression/CompressionCodecEncrypted.cpp\nindex 022bbd583e46..3f4e35a78a46 100644\n--- a/src/Compression/CompressionCodecEncrypted.cpp\n+++ b/src/Compression/CompressionCodecEncrypted.cpp\n@@ -28,6 +28,17 @@ namespace DB\n namespace ErrorCodes\n {\n     extern const int OPENSSL_ERROR;\n+    extern const int BAD_ARGUMENTS;\n+}\n+\n+EncryptionMethod getEncryptionMethod(const std::string & name)\n+{\n+    if (name == \"AES_128_GCM_SIV\")\n+        return AES_128_GCM_SIV;\n+    else if (name == \"AES_256_GCM_SIV\")\n+        return AES_256_GCM_SIV;\n+    else\n+        throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Wrong encryption method. Got {}\", name);\n }\n \n namespace\n@@ -63,7 +74,7 @@ uint8_t getMethodCode(EncryptionMethod Method)\n     }\n     else\n     {\n-        throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Wrong encryption Method. Got {}\", getMethodName(Method));\n+        throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Wrong encryption method. Got {}\", getMethodName(Method));\n     }\n }\n \n@@ -79,7 +90,6 @@ namespace ErrorCodes\n {\n     extern const int ILLEGAL_SYNTAX_FOR_CODEC_TYPE;\n     extern const int LOGICAL_ERROR;\n-    extern const int BAD_ARGUMENTS;\n     extern const int INCORRECT_DATA;\n }\n \n@@ -104,7 +114,7 @@ UInt64 methodKeySize(EncryptionMethod Method)\n     }\n     else\n     {\n-        throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Wrong encryption Method. Got {}\", getMethodName(Method));\n+        throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Wrong encryption method. Got {}\", getMethodName(Method));\n     }\n }\n \n@@ -129,7 +139,7 @@ auto getMethod(EncryptionMethod Method)\n     }\n     else\n     {\n-        throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Wrong encryption Method. Got {}\", getMethodName(Method));\n+        throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Wrong encryption method. Got {}\", getMethodName(Method));\n     }\n }\n \n@@ -205,7 +215,7 @@ auto getMethod(EncryptionMethod Method)\n     }\n     else\n     {\n-        throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Wrong encryption Method. Got {}\", getMethodName(Method));\n+        throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Wrong encryption method. Got {}\", getMethodName(Method));\n     }\n }\n \n@@ -578,7 +588,7 @@ String CompressionCodecEncrypted::Configuration::getKey(EncryptionMethod method,\n     if (current_params->keys_storage[method].contains(key_id))\n         key = current_params->keys_storage[method].at(key_id);\n     else\n-        throw Exception(ErrorCodes::BAD_ARGUMENTS, \"There is no key {} in config\", key_id);\n+        throw Exception(ErrorCodes::BAD_ARGUMENTS, \"There is no key {} in config for {} encryption codec\", key_id, getMethodName(method));\n \n     return key;\n }\ndiff --git a/src/Compression/CompressionCodecEncrypted.h b/src/Compression/CompressionCodecEncrypted.h\nindex 0f680dbcb090..fafcf4af507e 100644\n--- a/src/Compression/CompressionCodecEncrypted.h\n+++ b/src/Compression/CompressionCodecEncrypted.h\n@@ -18,6 +18,9 @@ enum EncryptionMethod\n     MAX_ENCRYPTION_METHOD\n };\n \n+/// Get method for string name. Throw exception for wrong name.\n+EncryptionMethod getEncryptionMethod(const std::string & name);\n+\n /** This codec encrypts and decrypts blocks with AES-128 in\n     * GCM-SIV mode (RFC-8452), which is the only cipher currently\n     * supported. Although it is implemented as a compression codec\ndiff --git a/utils/config-processor/CMakeLists.txt b/utils/config-processor/CMakeLists.txt\nindex 53b6163ba871..80c3535ef4eb 100644\n--- a/utils/config-processor/CMakeLists.txt\n+++ b/utils/config-processor/CMakeLists.txt\n@@ -1,2 +1,2 @@\n clickhouse_add_executable (config-processor config-processor.cpp)\n-target_link_libraries(config-processor PRIVATE clickhouse_common_config_no_zookeeper_log)\n+target_link_libraries(config-processor PRIVATE dbms)\ndiff --git a/utils/keeper-bench/CMakeLists.txt b/utils/keeper-bench/CMakeLists.txt\nindex 49ce20682467..5514c34f4efb 100644\n--- a/utils/keeper-bench/CMakeLists.txt\n+++ b/utils/keeper-bench/CMakeLists.txt\n@@ -4,4 +4,5 @@ if (NOT TARGET ch_contrib::rapidjson)\n endif ()\n \n clickhouse_add_executable(keeper-bench Generator.cpp Runner.cpp Stats.cpp main.cpp)\n-target_link_libraries(keeper-bench PRIVATE clickhouse_common_config_no_zookeeper_log ch_contrib::rapidjson)\n+target_link_libraries(keeper-bench PRIVATE dbms)\n+target_link_libraries(keeper-bench PRIVATE ch_contrib::rapidjson)\n",
  "test_patch": "diff --git a/tests/integration/test_config_decryption/__init__.py b/tests/integration/test_config_decryption/__init__.py\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/integration/test_config_decryption/configs/config.xml b/tests/integration/test_config_decryption/configs/config.xml\nnew file mode 100644\nindex 000000000000..5c274128e39d\n--- /dev/null\n+++ b/tests/integration/test_config_decryption/configs/config.xml\n@@ -0,0 +1,12 @@\n+<clickhouse>\n+    <encryption_codecs>\n+        <aes_128_gcm_siv>\n+            <key_hex>00112233445566778899aabbccddeeff</key_hex>\n+        </aes_128_gcm_siv>\n+        <aes_256_gcm_siv>\n+            <key_hex>00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff</key_hex>\n+        </aes_256_gcm_siv>\n+    </encryption_codecs>\n+    <max_table_size_to_drop encryption_codec=\"AES_128_GCM_SIV\">96260000000B0000000000E8FE3C087CED2205A5071078B29FD5C3B97F824911DED3217E980C</max_table_size_to_drop>\n+    <max_partition_size_to_drop encryption_codec=\"AES_256_GCM_SIV\">97260000000B0000000000BFFF70C4DA718754C1DA0E2F25FF9246D4783F7FFEC4089EC1CC14</max_partition_size_to_drop>\n+</clickhouse>\ndiff --git a/tests/integration/test_config_decryption/configs/config.yaml b/tests/integration/test_config_decryption/configs/config.yaml\nnew file mode 100644\nindex 000000000000..ab4391be3c53\n--- /dev/null\n+++ b/tests/integration/test_config_decryption/configs/config.yaml\n@@ -0,0 +1,11 @@\n+encryption_codecs:\n+  aes_128_gcm_siv:\n+    key_hex: 00112233445566778899aabbccddeeff\n+  aes_256_gcm_siv:\n+    key_hex: 00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff\n+max_table_size_to_drop:\n+  '#text': 96260000000B0000000000E8FE3C087CED2205A5071078B29FD5C3B97F824911DED3217E980C\n+  '@encryption_codec': AES_128_GCM_SIV\n+max_partition_size_to_drop:\n+  '@encryption_codec': AES_256_GCM_SIV\n+  '#text': 97260000000B0000000000BFFF70C4DA718754C1DA0E2F25FF9246D4783F7FFEC4089EC1CC14\ndiff --git a/tests/integration/test_config_decryption/configs/config_invalid_chars.xml b/tests/integration/test_config_decryption/configs/config_invalid_chars.xml\nnew file mode 100644\nindex 000000000000..49bf51b5bad5\n--- /dev/null\n+++ b/tests/integration/test_config_decryption/configs/config_invalid_chars.xml\n@@ -0,0 +1,12 @@\n+<clickhouse>\n+    <encryption_codecs>\n+        <aes_128_gcm_siv>\n+            <key_hex>00112233445566778899aabbccddeeff</key_hex>\n+        </aes_128_gcm_siv>\n+        <aes_256_gcm_siv>\n+            <key_hex>00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff</key_hex>\n+        </aes_256_gcm_siv>\n+    </encryption_codecs>\n+    <max_table_size_to_drop encryption_codec=\"AES_128_GCM_SIV\">--96260000000B0000000000E8FE3C087CED2205A5071078B29FD5C3B97F824911DED3217E980C</max_table_size_to_drop>\n+    <max_partition_size_to_drop encryption_codec=\"AES_256_GCM_SIV\">97260000000B0000000000BFFF70C4DA718754C1DA0E2F25FF9246D4783F7FFEC4089EC1CC14</max_partition_size_to_drop>\n+</clickhouse>\ndiff --git a/tests/integration/test_config_decryption/configs/config_no_encryption_key.xml b/tests/integration/test_config_decryption/configs/config_no_encryption_key.xml\nnew file mode 100644\nindex 000000000000..5f7769f74031\n--- /dev/null\n+++ b/tests/integration/test_config_decryption/configs/config_no_encryption_key.xml\n@@ -0,0 +1,3 @@\n+<clickhouse>\n+    <max_table_size_to_drop encryption_codec=\"AES_128_GCM_SIV\">96260000000B0000000000E8FE3C087CED2205A5071078B29FD5C3B97F824911DED3217E980C</max_table_size_to_drop>\n+</clickhouse>\ndiff --git a/tests/integration/test_config_decryption/configs/config_subnodes.xml b/tests/integration/test_config_decryption/configs/config_subnodes.xml\nnew file mode 100644\nindex 000000000000..b0e519ff546f\n--- /dev/null\n+++ b/tests/integration/test_config_decryption/configs/config_subnodes.xml\n@@ -0,0 +1,10 @@\n+<clickhouse>\n+    <encryption_codecs>\n+        <aes_128_gcm_siv>\n+            <key_hex>00112233445566778899aabbccddeeff</key_hex>\n+        </aes_128_gcm_siv>\n+    </encryption_codecs>\n+    <interserver_http_credentials encryption_codec=\"AES_128_GCM_SIV\">\n+        <password>96260000000B0000000000E8FE3C087CED2205A5071078B29FD5C3B97F824911DED3217E980C</password>\n+    </interserver_http_credentials>\n+</clickhouse>\ndiff --git a/tests/integration/test_config_decryption/configs/config_wrong_method.xml b/tests/integration/test_config_decryption/configs/config_wrong_method.xml\nnew file mode 100644\nindex 000000000000..b452ce6374c3\n--- /dev/null\n+++ b/tests/integration/test_config_decryption/configs/config_wrong_method.xml\n@@ -0,0 +1,12 @@\n+<clickhouse>\n+    <encryption_codecs>\n+        <aes_128_gcm_siv>\n+            <key_hex>00112233445566778899aabbccddeeff</key_hex>\n+        </aes_128_gcm_siv>\n+        <aes_256_gcm_siv>\n+            <key_hex>00112233445566778899aabbccddeeff00112233445566778899aabbccddeeff</key_hex>\n+        </aes_256_gcm_siv>\n+    </encryption_codecs>\n+    <max_table_size_to_drop encryption_codec=\"AES_128_GCM_SIV\">96260000000B0000000000E8FE3C087CED2205A5071078B29FD5C3B97F824911DED3217E980C</max_table_size_to_drop>\n+    <max_partition_size_to_drop encryption_codec=\"WRONG\">97260000000B0000000000BFFF70C4DA718754C1DA0E2F25FF9246D4783F7FFEC4089EC1CC14</max_partition_size_to_drop>\n+</clickhouse>\ndiff --git a/tests/integration/test_config_decryption/test.py b/tests/integration/test_config_decryption/test.py\nnew file mode 100644\nindex 000000000000..dd8cdc2e4e15\n--- /dev/null\n+++ b/tests/integration/test_config_decryption/test.py\n@@ -0,0 +1,40 @@\n+import pytest\n+import os\n+from helpers.cluster import ClickHouseCluster\n+\n+cluster = ClickHouseCluster(__file__)\n+node1 = cluster.add_instance(\"node1\", main_configs=[\"configs/config.xml\"])\n+node2 = cluster.add_instance(\"node2\", main_configs=[\"configs/config.yaml\"])\n+\n+\n+@pytest.fixture(scope=\"module\")\n+def started_cluster():\n+    try:\n+        cluster.start()\n+        yield cluster\n+\n+    finally:\n+        cluster.shutdown()\n+\n+\n+def check_node(started_cluster, node):\n+    assert (\n+        node.query(\n+            \"select value from system.server_settings where name ='max_table_size_to_drop'\"\n+        )\n+        == \"60000000000\\n\"\n+    )\n+    assert (\n+        node.query(\n+            \"select value from system.server_settings where name ='max_partition_size_to_drop'\"\n+        )\n+        == \"40000000000\\n\"\n+    )\n+\n+\n+def test_successful_decryption_xml(started_cluster):\n+    check_node(started_cluster, node1)\n+\n+\n+def test_successful_decryption_yaml(started_cluster):\n+    check_node(started_cluster, node2)\ndiff --git a/tests/integration/test_config_decryption/test_wrong_settings.py b/tests/integration/test_config_decryption/test_wrong_settings.py\nnew file mode 100644\nindex 000000000000..b148f9a051aa\n--- /dev/null\n+++ b/tests/integration/test_config_decryption/test_wrong_settings.py\n@@ -0,0 +1,37 @@\n+import pytest\n+from helpers.cluster import ClickHouseCluster\n+\n+\n+def start_clickhouse(config, err_msg):\n+    cluster = ClickHouseCluster(__file__)\n+    node = cluster.add_instance(\"node\", main_configs=[config])\n+    caught_exception = \"\"\n+    try:\n+        cluster.start()\n+    except Exception as e:\n+        caught_exception = str(e)\n+    assert err_msg in caught_exception\n+\n+\n+def test_wrong_method():\n+    start_clickhouse(\n+        \"configs/config_wrong_method.xml\", \"Wrong encryption method. Got WRONG\"\n+    )\n+\n+\n+def test_invalid_chars():\n+    start_clickhouse(\n+        \"configs/config_invalid_chars.xml\",\n+        \"Cannot read encrypted text, check for valid characters\",\n+    )\n+\n+\n+def test_no_encryption_key():\n+    start_clickhouse(\n+        \"configs/config_no_encryption_key.xml\",\n+        \"There is no key 0 in config for AES_128_GCM_SIV encryption codec\",\n+    )\n+\n+\n+def test_subnodes():\n+    start_clickhouse(\"configs/config_subnodes.xml\", \"cannot contain nested elements\")\n",
  "problem_statement": "Support encrypted passwords in interserver_http_credentials section\n**Use case**\r\n\r\nRight now the passwords in interserver_http_credentials section are in plain text. For example:\r\n\r\n```\r\n<interserver_http_credentials>\r\n    <user>ineteruser</user>\r\n    <password>test</password>\r\n</interserver_http_credentials>\r\n```\r\n    \r\nIt maybe considered as unsafe by security analysts.\r\n\r\n\r\n**Describe the solution you'd like**\r\n\r\nAllow encrypted password like:\r\n\r\n```\r\n<interserver_http_credentials>\r\n    <user>ineteruser</user>\r\n    <encrypted_password>jexjwpixk</encrypted_password>\r\n</interserver_http_credentials>\r\n```\r\n\r\nNormally a symmetric encryption should be used. But it\u2019s not clear where to save the encryption key then.\r\n\r\n**Describe alternatives you've considered**\r\n\r\nAs alternative solution we may use of environment variable this way:\r\n\r\n`$ INTERPASSWORD=test`\r\n\r\n```\r\n<interserver_http_credentials>\r\n    <user>ineteruser</user>\r\n    <password from_env=\"INTERPASSWORD\"/>\r\n</interserver_http_credentials>\r\n\r\n```\r\n\r\nBut this also may be considered as unsafe by security analysts.\r\n\n",
  "hints_text": "For me it\u2019s not clear from design/architectural point of view what should be the correct solution to avoid the plain text passwords in  interserver_http_credentials. It\u2019s not the same as we have SHA hash for client credentials. \r\nCould someone please advice how should it normally work? How it\u2019s better to implement it. \r\nIf everything about the design is clear you may assign me to this task I will implement it.\nWhat vector of an attack you want to prevent?\r\n\r\nIf you want the trust among replicas listed in the Zookeper (and you consider that Zookeeper is secured and `create table` is secured), you can generate a random(session) token during replica attach and put this token into Zookeeper near the replica's hostname, then a source replica can validate this token (Zookeeper). \r\nAlso a token is excessive here you can check using hostname/source ip (dns query), though it depends on a network configuration.\r\n\r\nZookeeper must be secured anyway, otherwise an intruder can harm a database by other ways.\n@den-crane Thank you for advice about the random token. I did not know about it.\r\n\r\nDepending on customers the requirements may be:\r\n1. No plain text passwords in configs (the plain text passwords in interserver_http_credentials may fail to satisfy this requirement).\r\n2. All communications even between replicas must be secured (it means auth must be used for replicas)\r\n3. All communications between servers (i.e. replicas) must be encrypted (probably HTTPS between replicas is OK).\r\n\nBTW you can store parts of the config in the ZK \r\n\r\nlike [ `<postgresql_port from_zk=\"/clickhouse/ports/postgresql\" replace=\"replace\" />`](https://github.com/ClickHouse/ClickHouse/blob/120f027cb6460145fbdca49012cc8b935a38f2e0/tests/integration/test_server_reload/configs/overrides_from_zk.xml#L4)\r\n\r\nSo you can do\r\n\r\n```\r\n<interserver_http_credentials>\r\n    <user>ineteruser</user>\r\n    <encrypted_password from_zk=\"/clickhouse/passwords/interserver_http_pass\" replace=\"replace\" />\r\n</interserver_http_credentials>\r\n```\nI did not know about `from_zk`. Thank you. As I said for some customers (their security analysts) consider using the environment variables via `from_env` as insecure. I don't know why. Probably usage of `from_zk` instead of  `from_env` is more secure. \nI doubt that storing passwords in ZooKeeper is more secure (clickhouse users can read it via system.zookeeper).\r\n\r\nSoring that on filesystem is secure (as secure as when you store keys in ~/.ssh). If you will add some encryption there it will anyway will be reversible, or the keys will be stored somewhere around. So it will not make system more secure than it is now, it can only be considered as obfuscation. Obfuscated password can not be considered as a strong / important security improvement. \nTo address this issue we do need an extra level of indirection  ;)\r\n(Leaving development complexity out of the scope) keyring https://en.wikipedia.org/wiki/GNOME_Keyring suits better than zookeeper.\n@filimonov OK. How to we solve the particular question using the files? \r\n\r\nYes, private keys in ./ssh have chmod 600.\r\n\r\nI think we may implement new parameter: `from_file` (similar to `from_env` and `from_zk`).\r\nThen use it this way:\r\n\r\n```\r\n<interserver_http_credentials>\r\n    <user>ineteruser</user>\r\n    <password from_file=\"/home/clickhouse/passwords/interserver_http_pass\"/>\r\n</interserver_http_credentials>\r\n```\r\n\r\nSo for file `/home/clickhouse/passwords/interserver_http_pass `\r\nfile's body is the password.\r\n\r\nThe main idea that chmod is 600. And the user is clickhouse.  Thus only clichouse user and root may read it. \r\n\r\nThe idea is that for `/etc/clickhouse-server/config.xml ` I have chmod 666 on my Centos. Any user can read it. But for  /home/clickhouse/passwords/interserver_http_pass \r\nwe will have chmod 600. \r\nThe good point as you mentioned that for `/var/lib/clickhouse/preprocessed` we should also have 600 (only clickhouse user can read it).\r\n\r\nAnd I think we cannot use [include_from](https://clickhouse.com/docs/en/operations/server-configuration-parameters/settings#server_configuration_parameters-include_from):\r\n\r\n`<include_from>/etc/metrica.xml</include_from>`\r\nfor our task. \r\n\r\n\r\n\r\n\r\n\r\n\r\n\n> To address this issue we do need an extra level of indirection ;) (Leaving development complexity out of the scope) keyring https://en.wikipedia.org/wiki/GNOME_Keyring suits better than zookeeper.\r\n\r\n@ilejn Could you please explain your approach? How it would be possible to use GNOME Keyring or similar in ClickHouse for the particular task (storing password for interserver_http_credentials)?\r\n\r\n\nYou can just create one more file\r\n\r\n/etc/clickhouse-server/config.d/interserver_credentials.xml\r\n\r\nOr use include_from (what is wrong with that?).\n> > To address this issue we do need an extra level of indirection ;) (Leaving development complexity out of the scope) keyring https://en.wikipedia.org/wiki/GNOME_Keyring suits better than zookeeper.\r\n> \r\n> @ilejn Could you please explain your approach? How it would be possible to use GNOME Keyring or similar in ClickHouse for the particular task (storing password for interserver_http_credentials)?\r\n\r\nThere is an API, a wrapper (https://gnome.pages.gitlab.gnome.org/libsecret) and a cross-platform library (e.g. https://github.com/hrantzsch/keychain).\r\nDisclaimers:\r\n1. I am not aware of how all these things work and if they are robust and reliable.\r\n2. It is natural that clients' passwords or private keys are readable. ClickHouse instance acts as a client for another database, messaging system, etc. It seems difficult to explain what is wrong with this practice and define a vector for a possible attack. That is why I would try to avoid wasting time on this issue.\r\n3. I am not a security expert ;)\r\n\r\n",
  "created_at": "2023-06-14T12:11:00Z",
  "modified_files": [
    "docs/en/operations/configuration-files.md",
    "docs/ru/operations/configuration-files.md",
    "programs/keeper/CMakeLists.txt",
    "src/Common/Config/ConfigProcessor.cpp",
    "src/Common/Config/ConfigProcessor.h",
    "src/Common/Config/YAMLParser.cpp",
    "src/Common/examples/CMakeLists.txt",
    "b/src/Common/examples/encrypt_decrypt.cpp",
    "src/Compression/CompressionCodecEncrypted.cpp",
    "src/Compression/CompressionCodecEncrypted.h",
    "utils/config-processor/CMakeLists.txt",
    "utils/keeper-bench/CMakeLists.txt"
  ],
  "modified_test_files": [
    "b/tests/integration/test_config_decryption/configs/config.xml",
    "b/tests/integration/test_config_decryption/configs/config.yaml",
    "b/tests/integration/test_config_decryption/configs/config_invalid_chars.xml",
    "b/tests/integration/test_config_decryption/configs/config_no_encryption_key.xml",
    "b/tests/integration/test_config_decryption/configs/config_subnodes.xml",
    "b/tests/integration/test_config_decryption/configs/config_wrong_method.xml",
    "b/tests/integration/test_config_decryption/test.py",
    "b/tests/integration/test_config_decryption/test_wrong_settings.py"
  ]
}