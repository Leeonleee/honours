{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 44506,
  "instance_id": "ClickHouse__ClickHouse-44506",
  "issue_numbers": [
    "44503"
  ],
  "base_commit": "6c23721255b55717ee31ec39d92b8c0f2bf88ec8",
  "patch": "diff --git a/src/Functions/in.cpp b/src/Functions/in.cpp\nindex 5773e823a800..1de8371cf906 100644\n--- a/src/Functions/in.cpp\n+++ b/src/Functions/in.cpp\n@@ -17,6 +17,7 @@ namespace DB\n namespace ErrorCodes\n {\n     extern const int ILLEGAL_COLUMN;\n+    extern const int LOGICAL_ERROR;\n }\n \n namespace\n@@ -94,6 +95,8 @@ class FunctionIn : public IFunction\n     {\n         if constexpr (ignore_set)\n             return ColumnUInt8::create(input_rows_count, 0u);\n+        if (input_rows_count == 0)\n+            return ColumnUInt8::create();\n \n         /// Second argument must be ColumnSet.\n         ColumnPtr column_set_ptr = arguments[1].column;\n@@ -135,12 +138,16 @@ class FunctionIn : public IFunction\n \n         /// Replace single LowCardinality column to it's dictionary if possible.\n         ColumnPtr lc_indexes = nullptr;\n+        bool is_const = false;\n         if (columns_of_key_columns.size() == 1)\n         {\n             auto & arg = columns_of_key_columns.at(0);\n             const auto * col = arg.column.get();\n             if (const auto * const_col = typeid_cast<const ColumnConst *>(col))\n+            {\n                 col = &const_col->getDataColumn();\n+                is_const = true;\n+            }\n \n             if (const auto * lc = typeid_cast<const ColumnLowCardinality *>(col))\n             {\n@@ -153,7 +160,13 @@ class FunctionIn : public IFunction\n         auto res = set->execute(columns_of_key_columns, negative);\n \n         if (lc_indexes)\n-            return res->index(*lc_indexes, 0);\n+            res = res->index(*lc_indexes, 0);\n+\n+        if (is_const)\n+            res = ColumnUInt8::create(input_rows_count, res->getUInt(0));\n+\n+        if (res->size() != input_rows_count)\n+            throw Exception(ErrorCodes::LOGICAL_ERROR, \"Output size is different from input size, expect {}, get {}\", input_rows_count, res->size());\n \n         return res;\n     }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01906_lc_in_bug.reference b/tests/queries/0_stateless/01906_lc_in_bug.reference\nindex 9fe1650abf0f..adce940e346f 100644\n--- a/tests/queries/0_stateless/01906_lc_in_bug.reference\n+++ b/tests/queries/0_stateless/01906_lc_in_bug.reference\n@@ -1,2 +1,3 @@\n 1\t0\n 3\t1\n+0\ndiff --git a/tests/queries/0_stateless/01906_lc_in_bug.sql b/tests/queries/0_stateless/01906_lc_in_bug.sql\nindex f8f41da31ae8..581053e14e19 100644\n--- a/tests/queries/0_stateless/01906_lc_in_bug.sql\n+++ b/tests/queries/0_stateless/01906_lc_in_bug.sql\n@@ -6,3 +6,8 @@ insert into tab values ('a'), ('bb'), ('a'), ('cc');\n select count() as c, x in ('a', 'bb') as g from tab group by g order by c;\n \n drop table if exists tab;\n+\n+-- https://github.com/ClickHouse/ClickHouse/issues/44503\n+CREATE TABLE test(key Int32) ENGINE = MergeTree ORDER BY (key);\n+insert into test select intDiv(number,100) from numbers(10000000);\n+SELECT COUNT() FROM test WHERE key <= 100000 AND (NOT (toLowCardinality('') IN (SELECT '')));\n",
  "problem_statement": "crash due `NOT (toLowCardinality('') IN`\n```sql\r\nCREATE TABLE test(key Int32) ENGINE = MergeTree ORDER BY (key);\r\ninsert into test select intDiv(number,100) from numbers(10000000);\r\nSELECT COUNT() FROM test WHERE key <= 100000 AND (NOT (toLowCardinality('') IN (SELECT '')));\r\n\r\n\r\n<Fatal> BaseDaemon: ########################################\r\n<Fatal> BaseDaemon: ########################################\r\n<Fatal> BaseDaemon: ########################################\r\n<Fatal> BaseDaemon: (version 22.8.11.15 (official build), build id: 8996F0B199922EB3) (from thread 3020\r\ney <= 100000 AND (NOT (toLowCardinality('') IN (SELECT '' ))) ;) Received signal Segmentation fault (11\r\n<Fatal> BaseDaemon: (version 22.8.11.15 (official build), build id: 8996F0B199922EB3) (from thread 2281\r\ny <= 100000 AND (NOT (toLowCardinality('') IN (SELECT '' ))) ;) Received signal Segmentation fault (11)\r\n<Fatal> BaseDaemon: (version 22.8.11.15 (official build), build id: 8996F0B199922EB3) (from thread 2524\r\ney <= 100000 AND (NOT (toLowCardinality('') IN (SELECT '' ))) ;) Received signal Segmentation fault (11\r\n<Fatal> BaseDaemon: Address: 0x7f32028fc000 Access: read. Attempted access has violated the permissions\r\n<Fatal> BaseDaemon: Address: 0x7f324e218000 Access: read. Attempted access has violated the permissions\r\n<Fatal> BaseDaemon: Address: 0x7f323d92a000 Access: read. Attempted access has violated the permissions\r\n<Fatal> BaseDaemon: Stack trace: 0x14663831 0x1465cb43 0xcbaa3ce 0x13ceb847 0x13cec13d 0x13ced5e9 0x149\r\n 0xa4be8bd 0x7f32a7232fa3 0x7f32a71634cf\r\n<Fatal> BaseDaemon: Stack trace: 0x14663831 0x1465cb43 0xcbaa3ce 0x13ceb847 0x13cec13d 0x13ced5e9 0x149\r\n 0xa4be8bd 0x7f32a7232fa3 0x7f32a71634cf\r\n<Fatal> BaseDaemon: Stack trace: 0x14663831 0x1465cb43 0xcbaa3ce 0x13ceb847 0x13cec13d 0x13ced5e9 0x149\r\n 0xa4be8bd 0x7f32a7232fa3 0x7f32a71634cf\r\n\r\n```\r\nfound in 21.8 but I guess all versions are affected.\r\n\r\n100% reproducible with \r\n\r\n```\r\nclickhouse-benchmark <<< \"SELECT COUNT() FROM test WHERE key <= 100000 AND (NOT (toLowCardinality('') IN (SELECT '')))\"\r\n```\r\n\r\n22.12.1.985 returns random results, so I guess it's affected as well.\n",
  "hints_text": "@KochetovNicolai \nWA: **materialize**(toLowCardinality(''))",
  "created_at": "2022-12-22T08:30:23Z"
}