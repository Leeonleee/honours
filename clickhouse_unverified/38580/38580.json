{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 38580,
  "instance_id": "ClickHouse__ClickHouse-38580",
  "issue_numbers": [
    "36443"
  ],
  "base_commit": "a0e57689563341152f392f04a7a5d7ac3451c707",
  "patch": "diff --git a/.github/workflows/release.yml b/.github/workflows/release.yml\nindex 83e22c0b7c69..4d57ae450c4c 100644\n--- a/.github/workflows/release.yml\n+++ b/.github/workflows/release.yml\n@@ -21,6 +21,9 @@ jobs:\n         EOF\n     - name: Check out repository code\n       uses: actions/checkout@v2\n+      with:\n+        # Always use the most recent script version\n+        ref: master\n     - name: Download packages and push to Artifactory\n       run: |\n         rm -rf \"$TEMP_PATH\" && mkdir -p \"$TEMP_PATH\"\ndiff --git a/docs/_includes/install/tgz.sh b/docs/_includes/install/tgz.sh\nindex 4ba5890b32b9..d6d7cd8bc36e 100644\n--- a/docs/_includes/install/tgz.sh\n+++ b/docs/_includes/install/tgz.sh\n@@ -1,20 +1,34 @@\n LATEST_VERSION=$(curl -s https://packages.clickhouse.com/tgz/stable/ | \\\n     grep -Eo '[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+' | sort -V -r | head -n 1)\n export LATEST_VERSION\n-curl -O \"https://packages.clickhouse.com/tgz/stable/clickhouse-common-static-$LATEST_VERSION.tgz\"\n-curl -O \"https://packages.clickhouse.com/tgz/stable/clickhouse-common-static-dbg-$LATEST_VERSION.tgz\"\n-curl -O \"https://packages.clickhouse.com/tgz/stable/clickhouse-server-$LATEST_VERSION.tgz\"\n-curl -O \"https://packages.clickhouse.com/tgz/stable/clickhouse-client-$LATEST_VERSION.tgz\"\n \n-tar -xzvf \"clickhouse-common-static-$LATEST_VERSION.tgz\"\n+case $(uname -m) in\n+  x86_64) ARCH=amd64 ;;\n+  aarch64) ARCH=arm64 ;;\n+  *) echo \"Unknown architecture $(uname -m)\"; exit 1 ;;\n+esac\n+\n+for PKG in clickhouse-common-static clickhouse-common-static-dbg clickhouse-server clickhouse-client\n+do\n+  curl -fO \"https://packages.clickhouse.com/tgz/stable/$PKG-$LATEST_VERSION-${ARCH}.tgz\" \\\n+    || curl -fO \"https://packages.clickhouse.com/tgz/stable/$PKG-$LATEST_VERSION.tgz\"\n+done\n+\n+exit 0\n+\n+tar -xzvf \"clickhouse-common-static-$LATEST_VERSION-${ARCH}.tgz\" \\\n+  || tar -xzvf \"clickhouse-common-static-$LATEST_VERSION.tgz\"\n sudo \"clickhouse-common-static-$LATEST_VERSION/install/doinst.sh\"\n \n-tar -xzvf \"clickhouse-common-static-dbg-$LATEST_VERSION.tgz\"\n+tar -xzvf \"clickhouse-common-static-dbg-$LATEST_VERSION-${ARCH}.tgz\" \\\n+  || tar -xzvf \"clickhouse-common-static-dbg-$LATEST_VERSION.tgz\"\n sudo \"clickhouse-common-static-dbg-$LATEST_VERSION/install/doinst.sh\"\n \n-tar -xzvf \"clickhouse-server-$LATEST_VERSION.tgz\"\n+tar -xzvf \"clickhouse-server-$LATEST_VERSION-${ARCH}.tgz\" \\\n+  || tar -xzvf \"clickhouse-server-$LATEST_VERSION.tgz\"\n sudo \"clickhouse-server-$LATEST_VERSION/install/doinst.sh\"\n sudo /etc/init.d/clickhouse-server start\n \n-tar -xzvf \"clickhouse-client-$LATEST_VERSION.tgz\"\n+tar -xzvf \"clickhouse-client-$LATEST_VERSION-${ARCH}.tgz\" \\\n+  || tar -xzvf \"clickhouse-client-$LATEST_VERSION.tgz\"\n sudo \"clickhouse-client-$LATEST_VERSION/install/doinst.sh\"\ndiff --git a/docs/en/development/continuous-integration.md b/docs/en/development/continuous-integration.md\nindex f8fcead3ca2a..7b2da4416d65 100644\n--- a/docs/en/development/continuous-integration.md\n+++ b/docs/en/development/continuous-integration.md\n@@ -123,12 +123,10 @@ Builds ClickHouse in various configurations for use in further steps. You have t\n - **Build log**: link to the building and files copying log, useful when build failed.\n - **Build time**.\n - **Artifacts**: build result files (with `XXX` being the server version e.g. `20.8.1.4344`).\n-  - `clickhouse-client_XXX_all.deb`\n+  - `clickhouse-client_XXX_amd64.deb`\n   - `clickhouse-common-static-dbg_XXX[+asan, +msan, +ubsan, +tsan]_amd64.deb`\n   - `clickhouse-common-staticXXX_amd64.deb`\n-  - `clickhouse-server_XXX_all.deb`\n-  - `clickhouse_XXX_amd64.buildinfo`\n-  - `clickhouse_XXX_amd64.changes`\n+  - `clickhouse-server_XXX_amd64.deb`\n   - `clickhouse`: Main built binary.\n   - `clickhouse-odbc-bridge`\n   - `unit_tests_dbms`: GoogleTest binary with ClickHouse unit tests.\ndiff --git a/docs/en/getting-started/install.md b/docs/en/getting-started/install.md\nindex 8505b040fa39..a5e6495d8d82 100644\n--- a/docs/en/getting-started/install.md\n+++ b/docs/en/getting-started/install.md\n@@ -127,22 +127,36 @@ After that downloaded archives should be unpacked and installed with installatio\n LATEST_VERSION=$(curl -s https://packages.clickhouse.com/tgz/stable/ | \\\n     grep -Eo '[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+' | sort -V -r | head -n 1)\n export LATEST_VERSION\n-curl -O \"https://packages.clickhouse.com/tgz/stable/clickhouse-common-static-$LATEST_VERSION-amd64.tgz\"\n-curl -O \"https://packages.clickhouse.com/tgz/stable/clickhouse-common-static-dbg-$LATEST_VERSION-amd64.tgz\"\n-curl -O \"https://packages.clickhouse.com/tgz/stable/clickhouse-server-$LATEST_VERSION-amd64.tgz\"\n-curl -O \"https://packages.clickhouse.com/tgz/stable/clickhouse-client-$LATEST_VERSION-amd64.tgz\"\n \n-tar -xzvf \"clickhouse-common-static-$LATEST_VERSION-amd64.tgz\"\n+case $(uname -m) in\n+  x86_64) ARCH=amd64 ;;\n+  aarch64) ARCH=arm64 ;;\n+  *) echo \"Unknown architecture $(uname -m)\"; exit 1 ;;\n+esac\n+\n+for PKG in clickhouse-common-static clickhouse-common-static-dbg clickhouse-server clickhouse-client\n+do\n+  curl -fO \"https://packages.clickhouse.com/tgz/stable/$PKG-$LATEST_VERSION-${ARCH}.tgz\" \\\n+    || curl -fO \"https://packages.clickhouse.com/tgz/stable/$PKG-$LATEST_VERSION.tgz\"\n+done\n+\n+exit 0\n+\n+tar -xzvf \"clickhouse-common-static-$LATEST_VERSION-${ARCH}.tgz\" \\\n+  || tar -xzvf \"clickhouse-common-static-$LATEST_VERSION.tgz\"\n sudo \"clickhouse-common-static-$LATEST_VERSION/install/doinst.sh\"\n \n-tar -xzvf \"clickhouse-common-static-dbg-$LATEST_VERSION-amd64.tgz\"\n+tar -xzvf \"clickhouse-common-static-dbg-$LATEST_VERSION-${ARCH}.tgz\" \\\n+  || tar -xzvf \"clickhouse-common-static-dbg-$LATEST_VERSION.tgz\"\n sudo \"clickhouse-common-static-dbg-$LATEST_VERSION/install/doinst.sh\"\n \n-tar -xzvf \"clickhouse-server-$LATEST_VERSION-amd64.tgz\"\n+tar -xzvf \"clickhouse-server-$LATEST_VERSION-${ARCH}.tgz\" \\\n+  || tar -xzvf \"clickhouse-server-$LATEST_VERSION.tgz\"\n sudo \"clickhouse-server-$LATEST_VERSION/install/doinst.sh\"\n sudo /etc/init.d/clickhouse-server start\n \n-tar -xzvf \"clickhouse-client-$LATEST_VERSION-amd64.tgz\"\n+tar -xzvf \"clickhouse-client-$LATEST_VERSION-${ARCH}.tgz\" \\\n+  || tar -xzvf \"clickhouse-client-$LATEST_VERSION.tgz\"\n sudo \"clickhouse-client-$LATEST_VERSION/install/doinst.sh\"\n ```\n \ndiff --git a/docs/ru/getting-started/install.md b/docs/ru/getting-started/install.md\nindex 09e915304734..9f3eabc73ae7 100644\n--- a/docs/ru/getting-started/install.md\n+++ b/docs/ru/getting-started/install.md\n@@ -124,22 +124,36 @@ sudo yum install clickhouse-server clickhouse-client\n LATEST_VERSION=$(curl -s https://packages.clickhouse.com/tgz/stable/ | \\\n     grep -Eo '[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+' | sort -V -r | head -n 1)\n export LATEST_VERSION\n-curl -O \"https://packages.clickhouse.com/tgz/stable/clickhouse-common-static-$LATEST_VERSION.tgz\"\n-curl -O \"https://packages.clickhouse.com/tgz/stable/clickhouse-common-static-dbg-$LATEST_VERSION.tgz\"\n-curl -O \"https://packages.clickhouse.com/tgz/stable/clickhouse-server-$LATEST_VERSION.tgz\"\n-curl -O \"https://packages.clickhouse.com/tgz/stable/clickhouse-client-$LATEST_VERSION.tgz\"\n \n-tar -xzvf \"clickhouse-common-static-$LATEST_VERSION.tgz\"\n+case $(uname -m) in\n+  x86_64) ARCH=amd64 ;;\n+  aarch64) ARCH=arm64 ;;\n+  *) echo \"Unknown architecture $(uname -m)\"; exit 1 ;;\n+esac\n+\n+for PKG in clickhouse-common-static clickhouse-common-static-dbg clickhouse-server clickhouse-client\n+do\n+  curl -fO \"https://packages.clickhouse.com/tgz/stable/$PKG-$LATEST_VERSION-${ARCH}.tgz\" \\\n+    || curl -fO \"https://packages.clickhouse.com/tgz/stable/$PKG-$LATEST_VERSION.tgz\"\n+done\n+\n+exit 0\n+\n+tar -xzvf \"clickhouse-common-static-$LATEST_VERSION-${ARCH}.tgz\" \\\n+  || tar -xzvf \"clickhouse-common-static-$LATEST_VERSION.tgz\"\n sudo \"clickhouse-common-static-$LATEST_VERSION/install/doinst.sh\"\n \n-tar -xzvf \"clickhouse-common-static-dbg-$LATEST_VERSION.tgz\"\n+tar -xzvf \"clickhouse-common-static-dbg-$LATEST_VERSION-${ARCH}.tgz\" \\\n+  || tar -xzvf \"clickhouse-common-static-dbg-$LATEST_VERSION.tgz\"\n sudo \"clickhouse-common-static-dbg-$LATEST_VERSION/install/doinst.sh\"\n \n-tar -xzvf \"clickhouse-server-$LATEST_VERSION.tgz\"\n+tar -xzvf \"clickhouse-server-$LATEST_VERSION-${ARCH}.tgz\" \\\n+  || tar -xzvf \"clickhouse-server-$LATEST_VERSION.tgz\"\n sudo \"clickhouse-server-$LATEST_VERSION/install/doinst.sh\"\n sudo /etc/init.d/clickhouse-server start\n \n-tar -xzvf \"clickhouse-client-$LATEST_VERSION.tgz\"\n+tar -xzvf \"clickhouse-client-$LATEST_VERSION-${ARCH}.tgz\" \\\n+  || tar -xzvf \"clickhouse-client-$LATEST_VERSION.tgz\"\n sudo \"clickhouse-client-$LATEST_VERSION/install/doinst.sh\"\n ```\n \ndiff --git a/docs/zh/development/continuous-integration.md b/docs/zh/development/continuous-integration.md\nindex 5bebb3aec2ad..836c4a35433a 100644\n--- a/docs/zh/development/continuous-integration.md\n+++ b/docs/zh/development/continuous-integration.md\n@@ -86,13 +86,10 @@ git push\n - **Build log**: \u94fe\u63a5\u5230\u6784\u5efa\u548c\u6587\u4ef6\u590d\u5236\u65e5\u5fd7, \u5f53\u6784\u5efa\u5931\u8d25\u65f6\u5f88\u6709\u7528.\n - **Build time**.\n - **Artifacts**: \u6784\u5efa\u7ed3\u679c\u6587\u4ef6 (`XXX`\u662f\u670d\u52a1\u5668\u7248\u672c, \u6bd4\u5982`20.8.1.4344`).\n-    - `clickhouse-client_XXX_all.deb`\n+    - `clickhouse-client_XXX_amd64.deb`\n     -` clickhouse-common-static-dbg_XXX[+asan, +msan, +ubsan, +tsan]_amd64.deb`\n     - `clickhouse-common-staticXXX_amd64.deb`\n-    - `clickhouse-server_XXX_all.deb`\n-    - `clickhouse-test_XXX_all.deb`\n-    - `clickhouse_XXX_amd64.buildinfo`\n-    - `clickhouse_XXX_amd64.changes`\n+    - `clickhouse-server_XXX_amd64.deb`\n     - `clickhouse`: Main built binary.\n     - `clickhouse-odbc-bridge`\n     - `unit_tests_dbms`: \u5e26\u6709 ClickHouse \u5355\u5143\u6d4b\u8bd5\u7684 GoogleTest \u4e8c\u8fdb\u5236\u6587\u4ef6.\ndiff --git a/docs/zh/getting-started/install.md b/docs/zh/getting-started/install.md\nindex a8b803547a88..6a0b47607f5f 100644\n--- a/docs/zh/getting-started/install.md\n+++ b/docs/zh/getting-started/install.md\n@@ -121,22 +121,36 @@ sudo yum install clickhouse-server clickhouse-client\n LATEST_VERSION=$(curl -s https://packages.clickhouse.com/tgz/stable/ | \\\n     grep -Eo '[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+' | sort -V -r | head -n 1)\n export LATEST_VERSION\n-curl -O \"https://packages.clickhouse.com/tgz/stable/clickhouse-common-static-$LATEST_VERSION.tgz\"\n-curl -O \"https://packages.clickhouse.com/tgz/stable/clickhouse-common-static-dbg-$LATEST_VERSION.tgz\"\n-curl -O \"https://packages.clickhouse.com/tgz/stable/clickhouse-server-$LATEST_VERSION.tgz\"\n-curl -O \"https://packages.clickhouse.com/tgz/stable/clickhouse-client-$LATEST_VERSION.tgz\"\n \n-tar -xzvf \"clickhouse-common-static-$LATEST_VERSION.tgz\"\n+case $(uname -m) in\n+  x86_64) ARCH=amd64 ;;\n+  aarch64) ARCH=arm64 ;;\n+  *) echo \"Unknown architecture $(uname -m)\"; exit 1 ;;\n+esac\n+\n+for PKG in clickhouse-common-static clickhouse-common-static-dbg clickhouse-server clickhouse-client\n+do\n+  curl -fO \"https://packages.clickhouse.com/tgz/stable/$PKG-$LATEST_VERSION-${ARCH}.tgz\" \\\n+    || curl -fO \"https://packages.clickhouse.com/tgz/stable/$PKG-$LATEST_VERSION.tgz\"\n+done\n+\n+exit 0\n+\n+tar -xzvf \"clickhouse-common-static-$LATEST_VERSION-${ARCH}.tgz\" \\\n+  || tar -xzvf \"clickhouse-common-static-$LATEST_VERSION.tgz\"\n sudo \"clickhouse-common-static-$LATEST_VERSION/install/doinst.sh\"\n \n-tar -xzvf \"clickhouse-common-static-dbg-$LATEST_VERSION.tgz\"\n+tar -xzvf \"clickhouse-common-static-dbg-$LATEST_VERSION-${ARCH}.tgz\" \\\n+  || tar -xzvf \"clickhouse-common-static-dbg-$LATEST_VERSION.tgz\"\n sudo \"clickhouse-common-static-dbg-$LATEST_VERSION/install/doinst.sh\"\n \n-tar -xzvf \"clickhouse-server-$LATEST_VERSION.tgz\"\n+tar -xzvf \"clickhouse-server-$LATEST_VERSION-${ARCH}.tgz\" \\\n+  || tar -xzvf \"clickhouse-server-$LATEST_VERSION.tgz\"\n sudo \"clickhouse-server-$LATEST_VERSION/install/doinst.sh\"\n sudo /etc/init.d/clickhouse-server start\n \n-tar -xzvf \"clickhouse-client-$LATEST_VERSION.tgz\"\n+tar -xzvf \"clickhouse-client-$LATEST_VERSION-${ARCH}.tgz\" \\\n+  || tar -xzvf \"clickhouse-client-$LATEST_VERSION.tgz\"\n sudo \"clickhouse-client-$LATEST_VERSION/install/doinst.sh\"\n ```\n \ndiff --git a/packages/clickhouse-client.yaml b/packages/clickhouse-client.yaml\nindex 5e53090b5818..642d66f54754 100644\n--- a/packages/clickhouse-client.yaml\n+++ b/packages/clickhouse-client.yaml\n@@ -1,7 +1,7 @@\n # package sources should be placed in ${PWD}/root\n # nfpm should run from the same directory with a config\n name: \"clickhouse-client\"\n-arch: \"all\"\n+arch: \"${DEB_ARCH}\" # amd64, arm64\n platform: \"linux\"\n version: \"${CLICKHOUSE_VERSION_STRING}\"\n vendor: \"ClickHouse Inc.\"\ndiff --git a/packages/clickhouse-server.yaml b/packages/clickhouse-server.yaml\nindex ed56eb27e545..289956897549 100644\n--- a/packages/clickhouse-server.yaml\n+++ b/packages/clickhouse-server.yaml\n@@ -1,7 +1,7 @@\n # package sources should be placed in ${PWD}/root\n # nfpm should run from the same directory with a config\n name: \"clickhouse-server\"\n-arch: \"all\"\n+arch: \"${DEB_ARCH}\" # amd64, arm64\n platform: \"linux\"\n version: \"${CLICKHOUSE_VERSION_STRING}\"\n vendor: \"ClickHouse Inc.\"\n",
  "test_patch": "diff --git a/tests/ci/build_download_helper.py b/tests/ci/build_download_helper.py\nindex 67e1c6ee85de..f5eb72dddee5 100644\n--- a/tests/ci/build_download_helper.py\n+++ b/tests/ci/build_download_helper.py\n@@ -20,15 +20,17 @@ def get_with_retries(\n     sleep: int = 3,\n     **kwargs,\n ) -> requests.Response:\n-    logging.info(\"Getting URL with %i and sleep %i in between: %s\", retries, sleep, url)\n+    logging.info(\n+        \"Getting URL with %i tries and sleep %i in between: %s\", retries, sleep, url\n+    )\n     exc = None  # type: Optional[Exception]\n-    for i in range(DOWNLOAD_RETRIES_COUNT):\n+    for i in range(retries):\n         try:\n             response = requests.get(url, **kwargs)\n             response.raise_for_status()\n             break\n         except Exception as e:\n-            if i + 1 < DOWNLOAD_RETRIES_COUNT:\n+            if i + 1 < retries:\n                 logging.info(\"Exception '%s' while getting, retry %i\", e, i + 1)\n                 time.sleep(sleep)\n \ndiff --git a/tests/ci/download_previous_release.py b/tests/ci/download_previous_release.py\nindex fa03d164f23d..86beed35b5af 100755\n--- a/tests/ci/download_previous_release.py\n+++ b/tests/ci/download_previous_release.py\n@@ -4,25 +4,24 @@\n import os\n import logging\n \n-import requests\n+import requests  # type: ignore\n \n-from requests.adapters import HTTPAdapter\n-from urllib3.util.retry import Retry\n+from requests.adapters import HTTPAdapter  # type: ignore\n+from urllib3.util.retry import Retry  # type: ignore\n \n CLICKHOUSE_TAGS_URL = \"https://api.github.com/repos/ClickHouse/ClickHouse/tags\"\n \n-CLICKHOUSE_COMMON_STATIC_DOWNLOAD_URL = \"https://github.com/ClickHouse/ClickHouse/releases/download/v{version}-{type}/clickhouse-common-static_{version}_amd64.deb\"\n-CLICKHOUSE_COMMON_STATIC_DBG_DOWNLOAD_URL = \"https://github.com/ClickHouse/ClickHouse/releases/download/v{version}-{type}/clickhouse-common-static-dbg_{version}_amd64.deb\"\n-CLICKHOUSE_SERVER_DOWNLOAD_URL = \"https://github.com/ClickHouse/ClickHouse/releases/download/v{version}-{type}/clickhouse-server_{version}_all.deb\"\n-CLICKHOUSE_CLIENT_DOWNLOAD_URL = \"https://github.com/ClickHouse/ClickHouse/releases/download/v{version}-{type}/clickhouse-client_{version}_all.deb\"\n-\n-\n+DOWNLOAD_PREFIX = (\n+    \"https://github.com/ClickHouse/ClickHouse/releases/download/v{version}-{type}/\"\n+)\n CLICKHOUSE_COMMON_STATIC_PACKET_NAME = \"clickhouse-common-static_{version}_amd64.deb\"\n CLICKHOUSE_COMMON_STATIC_DBG_PACKET_NAME = (\n     \"clickhouse-common-static-dbg_{version}_amd64.deb\"\n )\n-CLICKHOUSE_SERVER_PACKET_NAME = \"clickhouse-server_{version}_all.deb\"\n-CLICKHOUSE_CLIENT_PACKET_NAME = \"clickhouse-client_{version}_all.deb\"\n+CLICKHOUSE_SERVER_PACKET_NAME = \"clickhouse-server_{version}_amd64.deb\"\n+CLICKHOUSE_SERVER_PACKET_FALLBACK = \"clickhouse-server_{version}_all.deb\"\n+CLICKHOUSE_CLIENT_PACKET_NAME = \"clickhouse-client_{version}_amd64.deb\"\n+CLICKHOUSE_CLIENT_PACKET_FALLBACK = \"clickhouse-client_{version}_all.deb\"\n \n PACKETS_DIR = \"previous_release_package_folder/\"\n VERSION_PATTERN = r\"((?:\\d+\\.)?(?:\\d+\\.)?(?:\\d+\\.)?\\d+-[a-zA-Z]*)\"\n@@ -102,9 +101,10 @@ def download_packet(url, out_path, retries=10, backoff_factor=0.3):\n     session.mount(\"http://\", adapter)\n     session.mount(\"https://\", adapter)\n     response = session.get(url)\n-    print(url)\n-    if response.ok:\n-        open(out_path, \"wb\").write(response.content)\n+    response.raise_for_status()\n+    print(f\"Download {url} to {out_path}\")\n+    with open(out_path, \"wb\") as fd:\n+        fd.write(response.content)\n \n \n def download_packets(release, dest_path=PACKETS_DIR):\n@@ -113,43 +113,31 @@ def download_packets(release, dest_path=PACKETS_DIR):\n \n     logging.info(\"Will download %s\", release)\n \n-    download_packet(\n-        CLICKHOUSE_COMMON_STATIC_DOWNLOAD_URL.format(\n-            version=release.version, type=release.type\n-        ),\n-        out_path=os.path.join(\n-            dest_path,\n-            CLICKHOUSE_COMMON_STATIC_PACKET_NAME.format(version=release.version),\n-        ),\n-    )\n-\n-    download_packet(\n-        CLICKHOUSE_COMMON_STATIC_DBG_DOWNLOAD_URL.format(\n-            version=release.version, type=release.type\n-        ),\n-        out_path=os.path.join(\n-            dest_path,\n-            CLICKHOUSE_COMMON_STATIC_DBG_PACKET_NAME.format(version=release.version),\n-        ),\n-    )\n-\n-    download_packet(\n-        CLICKHOUSE_SERVER_DOWNLOAD_URL.format(\n-            version=release.version, type=release.type\n-        ),\n-        out_path=os.path.join(\n-            dest_path, CLICKHOUSE_SERVER_PACKET_NAME.format(version=release.version)\n-        ),\n-    )\n-\n-    download_packet(\n-        CLICKHOUSE_CLIENT_DOWNLOAD_URL.format(\n-            version=release.version, type=release.type\n-        ),\n-        out_path=os.path.join(\n-            dest_path, CLICKHOUSE_CLIENT_PACKET_NAME.format(version=release.version)\n-        ),\n-    )\n+    def get_dest_path(pkg_name):\n+        return os.path.join(dest_path, pkg_name)\n+\n+    for pkg in (\n+        CLICKHOUSE_COMMON_STATIC_PACKET_NAME,\n+        CLICKHOUSE_COMMON_STATIC_DBG_PACKET_NAME,\n+    ):\n+        url = (DOWNLOAD_PREFIX + pkg).format(version=release.version, type=release.type)\n+        pkg_name = get_dest_path(pkg.format(version=release.version))\n+        download_packet(url, pkg_name)\n+\n+    for pkg, fallback in (\n+        (CLICKHOUSE_SERVER_PACKET_NAME, CLICKHOUSE_SERVER_PACKET_FALLBACK),\n+        (CLICKHOUSE_CLIENT_PACKET_NAME, CLICKHOUSE_CLIENT_PACKET_FALLBACK),\n+    ):\n+        url = (DOWNLOAD_PREFIX + pkg).format(version=release.version, type=release.type)\n+        pkg_name = get_dest_path(pkg.format(version=release.version))\n+        try:\n+            download_packet(url, pkg_name)\n+        except Exception:\n+            url = (DOWNLOAD_PREFIX + fallback).format(\n+                version=release.version, type=release.type\n+            )\n+            pkg_name = get_dest_path(fallback.format(version=release.version))\n+            download_packet(url, pkg_name)\n \n \n def download_previous_release(dest_path):\ndiff --git a/tests/ci/push_to_artifactory.py b/tests/ci/push_to_artifactory.py\nindex be977bdd907c..98de315ddaec 100755\n--- a/tests/ci/push_to_artifactory.py\n+++ b/tests/ci/push_to_artifactory.py\n@@ -4,11 +4,12 @@\n import logging\n import os\n import re\n-from typing import List, Tuple\n+from collections import namedtuple\n+from typing import Dict, List, Tuple\n \n from artifactory import ArtifactorySaaSPath  # type: ignore\n from build_download_helper import dowload_build_with_progress\n-from env_helper import RUNNER_TEMP\n+from env_helper import RUNNER_TEMP, S3_BUILDS_BUCKET\n from git_helper import TAG_REGEXP, commit, removeprefix, removesuffix\n \n \n@@ -25,88 +26,144 @@ def getenv(name: str, default: str = None):\n JFROG_API_KEY = getenv(\"JFROG_API_KEY\", \"\")\n JFROG_TOKEN = getenv(\"JFROG_TOKEN\", \"\")\n \n+CheckDesc = namedtuple(\"CheckDesc\", (\"check_name\", \"deb_arch\", \"rpm_arch\"))\n+\n \n class Packages:\n-    rpm_arch = dict(all=\"noarch\", amd64=\"x86_64\")\n+    checks = (\n+        CheckDesc(\"package_release\", \"amd64\", \"x86_64\"),\n+        CheckDesc(\"package_aarch64\", \"arm64\", \"aarch64\"),\n+    )\n     packages = (\n-        (\"clickhouse-client\", \"all\"),\n-        (\"clickhouse-common-static\", \"amd64\"),\n-        (\"clickhouse-common-static-dbg\", \"amd64\"),\n-        (\"clickhouse-server\", \"all\"),\n+        \"clickhouse-client\",\n+        \"clickhouse-common-static\",\n+        \"clickhouse-common-static-dbg\",\n+        \"clickhouse-server\",\n     )\n \n     def __init__(self, version: str):\n-        self.deb = tuple(\n-            \"_\".join((name, version, arch + \".deb\")) for name, arch in self.packages\n-        )\n+        # Dicts of name: s3_path_suffix\n+        self.deb = {}  # type: Dict[str, str]\n+        self.rpm = {}  # type: Dict[str, str]\n+        self.tgz = {}  # type: Dict[str, str]\n+        for check in self.checks:\n+            for name in self.packages:\n+                deb = f\"{name}_{version}_{check.deb_arch}.deb\"\n+                self.deb[deb] = f\"{check.check_name}/{deb}\"\n \n-        self.rpm = tuple(\n-            \"-\".join((name, version + \".\" + self.rpm_arch[arch] + \".rpm\"))\n-            for name, arch in self.packages\n-        )\n+                rpm = f\"{name}-{version}.{check.rpm_arch}.rpm\"\n+                self.rpm[rpm] = f\"{check.check_name}/{rpm}\"\n \n-        self.tgz = tuple(f\"{name}-{version}-amd64.tgz\" for name, _ in self.packages)\n+                tgz = f\"{name}-{version}-{check.deb_arch}.tgz\"\n+                self.tgz[tgz] = f\"{check.check_name}/{tgz}\"\n \n     def arch(self, deb_pkg: str) -> str:\n         if deb_pkg not in self.deb:\n             raise ValueError(f\"{deb_pkg} not in {self.deb}\")\n         return removesuffix(deb_pkg, \".deb\").split(\"_\")[-1]\n \n+    def replace_with_fallback(self, name: str):\n+        if name.endswith(\".deb\"):\n+            suffix = self.deb.pop(name)\n+            self.deb[self.fallback_to_all(name)] = self.fallback_to_all(suffix)\n+        elif name.endswith(\".rpm\"):\n+            suffix = self.rpm.pop(name)\n+            self.rpm[self.fallback_to_all(name)] = self.fallback_to_all(suffix)\n+        elif name.endswith(\".tgz\"):\n+            suffix = self.tgz.pop(name)\n+            self.tgz[self.fallback_to_all(name)] = self.fallback_to_all(suffix)\n+        else:\n+            raise KeyError(f\"unknown package type for {name}\")\n+\n     @staticmethod\n     def path(package_file: str) -> str:\n         return os.path.join(TEMP_PATH, package_file)\n \n+    @staticmethod\n+    def fallback_to_all(url_or_name: str):\n+        \"\"\"Until July 2022 we had clickhouse-server and clickhouse-client with\n+        arch 'all'\"\"\"\n+        # deb\n+        if url_or_name.endswith(\"amd64.deb\") or url_or_name.endswith(\"arm64.deb\"):\n+            return f\"{url_or_name[:-9]}all.deb\"\n+        # rpm\n+        if url_or_name.endswith(\"x86_64.rpm\") or url_or_name.endswith(\"aarch64.rpm\"):\n+            new = removesuffix(removesuffix(url_or_name, \"x86_64.rpm\"), \"aarch64.rpm\")\n+            return f\"{new}noarch.rpm\"\n+        # tgz\n+        if url_or_name.endswith(\"-amd64.tgz\") or url_or_name.endswith(\"-arm64.tgz\"):\n+            return f\"{url_or_name[:-10]}.tgz\"\n+        return url_or_name\n+\n \n class S3:\n     template = (\n         \"https://s3.amazonaws.com/\"\n         # \"clickhouse-builds/\"\n-        \"{bucket_name}/\"\n+        f\"{S3_BUILDS_BUCKET}/\"\n         # \"33333/\" or \"21.11/\" from --release, if pull request is omitted\n         \"{pr}/\"\n         # \"2bef313f75e4cacc6ea2ef2133e8849ecf0385ec/\"\n         \"{commit}/\"\n-        # \"package_release/\"\n-        \"{check_name}/\"\n-        # \"clickhouse-common-static_21.11.5.0_amd64.deb\"\n-        \"{package}\"\n+        # \"package_release/clickhouse-common-static_21.11.5.0_amd64.deb\"\n+        \"{s3_path_suffix}\"\n     )\n \n     def __init__(\n         self,\n-        bucket_name: str,\n         pr: int,\n         commit: str,\n-        check_name: str,\n         version: str,\n         force_download: bool,\n     ):\n         self._common = dict(\n-            bucket_name=bucket_name,\n             pr=pr,\n             commit=commit,\n-            check_name=check_name,\n         )\n         self.force_download = force_download\n         self.packages = Packages(version)\n \n-    def download_package(self, package_file: str):\n-        if not self.force_download and os.path.exists(Packages.path(package_file)):\n+    def download_package(self, package_file: str, s3_path_suffix: str):\n+        path = Packages.path(package_file)\n+        fallback_path = Packages.fallback_to_all(path)\n+        if not self.force_download and (\n+            os.path.exists(path) or os.path.exists(fallback_path)\n+        ):\n+            if os.path.exists(fallback_path):\n+                self.packages.replace_with_fallback(package_file)\n+\n             return\n-        url = self.template.format_map({**self._common, \"package\": package_file})\n-        dowload_build_with_progress(url, Packages.path(package_file))\n+        url = self.template.format_map(\n+            {**self._common, \"s3_path_suffix\": s3_path_suffix}\n+        )\n+        try:\n+            dowload_build_with_progress(url, path)\n+        except Exception as e:\n+            if \"Cannot download dataset from\" in e.args[0]:\n+                new_url = Packages.fallback_to_all(url)\n+                logging.warning(\n+                    \"Fallback downloading %s for old release\", fallback_path\n+                )\n+                dowload_build_with_progress(new_url, fallback_path)\n+                self.packages.replace_with_fallback(package_file)\n \n     def download_deb(self):\n-        for package_file in self.packages.deb:\n-            self.download_package(package_file)\n+        # Copy to have a way to pop/add fallback packages\n+        packages = self.packages.deb.copy()\n+        for package_file, s3_path_suffix in packages.items():\n+            self.download_package(package_file, s3_path_suffix)\n \n     def download_rpm(self):\n-        for package_file in self.packages.rpm:\n-            self.download_package(package_file)\n+        # Copy to have a way to pop/add fallback packages\n+        packages = self.packages.rpm.copy()\n+        for package_file, s3_path_suffix in packages.items():\n+            self.download_package(package_file, s3_path_suffix)\n \n     def download_tgz(self):\n-        for package_file in self.packages.tgz:\n-            self.download_package(package_file)\n+        # Copy to have a way to pop/add fallback packages\n+        packages = self.packages.tgz.copy()\n+        for package_file, s3_path_suffix in packages.items():\n+            self.download_package(package_file, s3_path_suffix)\n \n \n class Release:\n@@ -223,17 +280,6 @@ def parse_args() -> argparse.Namespace:\n     parser.add_argument(\n         \"--commit\", required=True, type=commit, help=\"commit hash for S3 bucket\"\n     )\n-    parser.add_argument(\n-        \"--bucket-name\",\n-        default=\"clickhouse-builds\",\n-        help=\"AWS S3 bucket name\",\n-    )\n-    parser.add_argument(\n-        \"--check-name\",\n-        default=\"package_release\",\n-        help=\"check name, a part of bucket path, \"\n-        \"will be converted to lower case with spaces->underscore\",\n-    )\n     parser.add_argument(\n         \"--all\", action=\"store_true\", help=\"implies all deb, rpm and tgz\"\n     )\n@@ -276,7 +322,6 @@ def parse_args() -> argparse.Namespace:\n         args.deb = args.rpm = args.tgz = True\n     if not (args.deb or args.rpm or args.tgz):\n         parser.error(\"at least one of --deb, --rpm or --tgz should be specified\")\n-    args.check_name = args.check_name.lower().replace(\" \", \"_\")\n     if args.pull_request == 0:\n         args.pull_request = \".\".join(args.release.version_parts[:2])\n     return args\n@@ -305,10 +350,8 @@ def main():\n     args = parse_args()\n     os.makedirs(TEMP_PATH, exist_ok=True)\n     s3 = S3(\n-        args.bucket_name,\n         args.pull_request,\n         args.commit,\n-        args.check_name,\n         args.release.version,\n         args.force_download,\n     )\n",
  "problem_statement": "Providing some aarch64 binaries and images\nI've seen issues as like https://github.com/ClickHouse/ClickHouse/issues/25030 requesting for versions of ClickHouse binary on Aarch64, and found a reply with:\r\n\r\n```\r\nThere are plans for that, but help is needed:\r\n\r\nwe need to debug several crash reports on aarch64\r\nwe need to ensure that base functionality works properly on aarch64 and unsupported things are properly turned off.\r\nbuild some CI for that.\r\ntest clickhouse on aarch64 with some production use-cases and create good bug reports / fix those bugs\r\n```\r\n\r\nRecently I've build several versions of ClickHouse Multi-Arch Images on releases from v22.2.3.5-stable ~ v21.8.x and done several (stress) tests on several machines(with different architects(ARM64/AMD64)).\r\n\r\n> My original plan is to build ARM64 image for my own personal use, since I've created those images, I started to do testing on them. I've written a post on it https://nova.moe/performance-comparison-clickhouse/ (In Chinese)\r\n\r\n![](https://user-images.githubusercontent.com/24852034/164153604-110d8c5b-2f46-42b4-9413-ab687488d298.png)\r\n\r\n* Those Multi-Arch Images can be found on https://hub.docker.com/r/knatnetwork/clickhouse-server\r\n* Binaries can be downloaded at: https://clickhouse.knat.network/\r\n* Benchmark results at: https://clickperf.knat.network/\r\n\r\nMy personal plan in the future are:\r\n\r\n* Keep building Multi-Arch Images and Binaries when newer version of ClickHouse releases \r\n* Run daily builds(along with benchmarks) (maybe)\r\n\r\nNot sure if this does some help on this topic. \ud83d\ude02\r\n\r\n\n",
  "hints_text": "I think this issue can be labelled in `label:comp-aarch64` and `label:build`. \ud83e\udd14",
  "created_at": "2022-06-29T13:40:57Z"
}