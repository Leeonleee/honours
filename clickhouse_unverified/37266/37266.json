{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 37266,
  "instance_id": "ClickHouse__ClickHouse-37266",
  "issue_numbers": [
    "37205"
  ],
  "base_commit": "4d78f111541d018be572904232c400f7068ed78a",
  "patch": "diff --git a/src/Interpreters/MutationsInterpreter.cpp b/src/Interpreters/MutationsInterpreter.cpp\nindex 99032dd9f10e..a55de34efbc3 100644\n--- a/src/Interpreters/MutationsInterpreter.cpp\n+++ b/src/Interpreters/MutationsInterpreter.cpp\n@@ -758,7 +758,9 @@ ASTPtr MutationsInterpreter::prepare(bool dry_run)\n \n ASTPtr MutationsInterpreter::prepareInterpreterSelectQuery(std::vector<Stage> & prepared_stages, bool dry_run)\n {\n-    NamesAndTypesList all_columns = metadata_snapshot->getColumns().getAllPhysical();\n+    auto storage_snapshot = storage->getStorageSnapshot(metadata_snapshot, context);\n+    auto options = GetColumnsOptions(GetColumnsOptions::AllPhysical).withExtendedObjects();\n+    auto all_columns = storage_snapshot->getColumns(options);\n \n     /// Next, for each stage calculate columns changed by this and previous stages.\n     for (size_t i = 0; i < prepared_stages.size(); ++i)\n@@ -802,7 +804,7 @@ ASTPtr MutationsInterpreter::prepareInterpreterSelectQuery(std::vector<Stage> &\n         /// e.g. ALTER referencing the same table in scalar subquery\n         bool execute_scalar_subqueries = !dry_run;\n         auto syntax_result = TreeRewriter(context).analyze(\n-            all_asts, all_columns, storage, storage->getStorageSnapshot(metadata_snapshot, context),\n+            all_asts, all_columns, storage, storage_snapshot,\n             false, true, execute_scalar_subqueries);\n \n         if (execute_scalar_subqueries && context->hasQueryContext())\ndiff --git a/src/Storages/MergeTree/MergeTask.cpp b/src/Storages/MergeTree/MergeTask.cpp\nindex 58bffaab34bd..8732a3ed3e51 100644\n--- a/src/Storages/MergeTree/MergeTask.cpp\n+++ b/src/Storages/MergeTree/MergeTask.cpp\n@@ -149,7 +149,6 @@ bool MergeTask::ExecuteAndFinalizeHorizontalPart::prepare()\n         global_ctx->merging_columns,\n         global_ctx->merging_column_names);\n \n-\n     auto local_single_disk_volume = std::make_shared<SingleDiskVolume>(\"volume_\" + global_ctx->future_part->name, ctx->disk, 0);\n     global_ctx->new_data_part = global_ctx->data->createPart(\n         global_ctx->future_part->name,\ndiff --git a/src/Storages/MergeTree/MutateTask.cpp b/src/Storages/MergeTree/MutateTask.cpp\nindex c41a2d3d52c8..fb8f4ba05183 100644\n--- a/src/Storages/MergeTree/MutateTask.cpp\n+++ b/src/Storages/MergeTree/MutateTask.cpp\n@@ -624,7 +624,9 @@ struct MutationContext\n     FutureMergedMutatedPartPtr future_part;\n     MergeTreeData::DataPartPtr source_part;\n \n+    StoragePtr storage_from_source_part;\n     StorageMetadataPtr metadata_snapshot;\n+\n     MutationCommandsConstPtr commands;\n     time_t time_of_mutation;\n     ContextPtr context;\n@@ -1367,6 +1369,11 @@ MutateTask::MutateTask(\n     ctx->space_reservation = space_reservation_;\n     ctx->storage_columns = metadata_snapshot_->getColumns().getAllPhysical();\n     ctx->txn = txn;\n+    ctx->source_part = ctx->future_part->parts[0];\n+    ctx->storage_from_source_part = std::make_shared<StorageFromMergeTreeDataPart>(ctx->source_part);\n+\n+    auto storage_snapshot = ctx->storage_from_source_part->getStorageSnapshot(ctx->metadata_snapshot, context_);\n+    extendObjectColumns(ctx->storage_columns, storage_snapshot->object_columns, /*with_subcolumns=*/ false);\n }\n \n \n@@ -1405,8 +1412,6 @@ bool MutateTask::prepare()\n             \"This is a bug.\", toString(ctx->future_part->parts.size()));\n \n     ctx->num_mutations = std::make_unique<CurrentMetrics::Increment>(CurrentMetrics::PartMutation);\n-    ctx->source_part = ctx->future_part->parts[0];\n-    auto storage_from_source_part = std::make_shared<StorageFromMergeTreeDataPart>(ctx->source_part);\n \n     auto context_for_reading = Context::createCopy(ctx->context);\n     context_for_reading->setSetting(\"max_streams_to_max_threads_ratio\", 1);\n@@ -1417,13 +1422,13 @@ bool MutateTask::prepare()\n \n     for (const auto & command : *ctx->commands)\n     {\n-        if (command.partition == nullptr || ctx->future_part->parts[0]->info.partition_id == ctx->data->getPartitionIDFromQuery(\n+        if (command.partition == nullptr || ctx->source_part->info.partition_id == ctx->data->getPartitionIDFromQuery(\n                 command.partition, context_for_reading))\n             ctx->commands_for_part.emplace_back(command);\n     }\n \n     if (ctx->source_part->isStoredOnDisk() && !isStorageTouchedByMutations(\n-        storage_from_source_part, ctx->metadata_snapshot, ctx->commands_for_part, Context::createCopy(context_for_reading)))\n+        ctx->storage_from_source_part, ctx->metadata_snapshot, ctx->commands_for_part, Context::createCopy(context_for_reading)))\n     {\n         LOG_TRACE(ctx->log, \"Part {} doesn't change up to mutation version {}\", ctx->source_part->name, ctx->future_part->part_info.mutation);\n         promise.set_value(ctx->data->cloneAndLoadDataPartOnSameDisk(ctx->source_part, \"tmp_clone_\", ctx->future_part->part_info, ctx->metadata_snapshot, ctx->txn, &ctx->hardlinked_files, false));\n@@ -1441,7 +1446,7 @@ bool MutateTask::prepare()\n     if (!ctx->for_interpreter.empty())\n     {\n         ctx->interpreter = std::make_unique<MutationsInterpreter>(\n-            storage_from_source_part, ctx->metadata_snapshot, ctx->for_interpreter, context_for_reading, true);\n+            ctx->storage_from_source_part, ctx->metadata_snapshot, ctx->for_interpreter, context_for_reading, true);\n         ctx->materialized_indices = ctx->interpreter->grabMaterializedIndices();\n         ctx->materialized_projections = ctx->interpreter->grabMaterializedProjections();\n         ctx->mutation_kind = ctx->interpreter->getMutationKind();\ndiff --git a/src/Storages/MergeTree/StorageFromMergeTreeDataPart.h b/src/Storages/MergeTree/StorageFromMergeTreeDataPart.h\nindex 5be20c9a2d54..a9bcb353b841 100644\n--- a/src/Storages/MergeTree/StorageFromMergeTreeDataPart.h\n+++ b/src/Storages/MergeTree/StorageFromMergeTreeDataPart.h\n@@ -3,6 +3,7 @@\n #include <Storages/IStorage.h>\n #include <Storages/MergeTree/IMergeTreeDataPart.h>\n #include <Storages/MergeTree/MergeTreeDataSelectExecutor.h>\n+#include <DataTypes/ObjectUtils.h>\n #include <Processors/QueryPlan/QueryPlan.h>\n #include <Processors/QueryPlan/Optimizations/QueryPlanOptimizationSettings.h>\n #include <Processors/QueryPlan/BuildQueryPipelineSettings.h>\n@@ -36,6 +37,20 @@ class StorageFromMergeTreeDataPart final : public IStorage\n \n     String getName() const override { return \"FromMergeTreeDataPart\"; }\n \n+    StorageSnapshotPtr getStorageSnapshot(\n+        const StorageMetadataPtr & metadata_snapshot, ContextPtr /*query_context*/) const override\n+    {\n+        const auto & storage_columns = metadata_snapshot->getColumns();\n+        if (!hasObjectColumns(storage_columns))\n+            return std::make_shared<StorageSnapshot>(*this, metadata_snapshot);\n+\n+        auto object_columns = getObjectColumns(\n+            parts.begin(), parts.end(),\n+            storage_columns, [](const auto & part) -> const auto & { return part->getColumns(); });\n+\n+        return std::make_shared<StorageSnapshot>(*this, metadata_snapshot, object_columns);\n+    }\n+\n     Pipe read(\n         const Names & column_names,\n         const StorageSnapshotPtr & storage_snapshot,\n@@ -65,6 +80,8 @@ class StorageFromMergeTreeDataPart final : public IStorage\n \n     bool supportsIndexForIn() const override { return true; }\n \n+    bool supportsDynamicSubcolumns() const override { return true; }\n+\n     bool mayBenefitFromIndexForIn(\n         const ASTPtr & left_in_operand, ContextPtr query_context, const StorageMetadataPtr & metadata_snapshot) const override\n     {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01825_type_json_mutations.reference b/tests/queries/0_stateless/01825_type_json_mutations.reference\nnew file mode 100644\nindex 000000000000..da7c278497ed\n--- /dev/null\n+++ b/tests/queries/0_stateless/01825_type_json_mutations.reference\n@@ -0,0 +1,7 @@\n+1\tq\t(1,2,[('aaa'),('bbb')])\n+2\tw\t(3,4,[('ccc')])\n+3\te\t(5,6,[])\n+1\tq\t(1,2,[('aaa'),('bbb')])\n+3\te\t(5,6,[])\n+1\tfoo\n+3\tfoo\ndiff --git a/tests/queries/0_stateless/01825_type_json_mutations.sql b/tests/queries/0_stateless/01825_type_json_mutations.sql\nnew file mode 100644\nindex 000000000000..a16710bdbf73\n--- /dev/null\n+++ b/tests/queries/0_stateless/01825_type_json_mutations.sql\n@@ -0,0 +1,21 @@\n+-- Tags: no-fasttest\n+\n+DROP TABLE IF EXISTS t_json_mutations;\n+\n+SET allow_experimental_object_type = 1;\n+SET output_format_json_named_tuples_as_objects = 1;\n+SET mutations_sync = 2;\n+\n+CREATE TABLE t_json_mutations(id UInt32, s String, obj JSON) ENGINE = MergeTree ORDER BY id;\n+\n+INSERT INTO t_json_mutations VALUES (1, 'q', '{\"k1\": 1, \"k2\": 2, \"k3\": [{\"k4\": \"aaa\"}, {\"k4\": \"bbb\"}]}');\n+INSERT INTO t_json_mutations VALUES (2, 'w', '{\"k1\": 3, \"k2\": 4, \"k3\": [{\"k4\": \"ccc\"}]}');\n+INSERT INTO t_json_mutations VALUES (3, 'e', '{\"k1\": 5, \"k2\": 6}');\n+\n+SELECT * FROM t_json_mutations ORDER BY id;\n+ALTER TABLE t_json_mutations DELETE WHERE id = 2;\n+SELECT * FROM t_json_mutations ORDER BY id;\n+ALTER TABLE t_json_mutations DROP COLUMN s, DROP COLUMN obj, ADD COLUMN t String DEFAULT 'foo';\n+SELECT * FROM t_json_mutations ORDER BY id;\n+\n+DROP TABLE t_json_mutations;\n",
  "problem_statement": "Records with a JSON column aren't deleted correctly\n**Describe what's wrong**\r\n\r\nRecord with a JSON column seems to not be deleted correctly.\r\n\r\n**Does it reproduce on recent release?**\r\n\r\nYes\r\n\r\n**How to reproduce**\r\n\r\nFirst let's create the table with a JSON column.\r\n\r\n```\r\nCREATE TABLE testJson\r\n(\r\n    `id` UInt32,\r\n    `fields` JSON\r\n)\r\nENGINE = ReplicatedMergeTree\r\nORDER BY id\r\nSETTINGS index_granularity = 8192\r\n```\r\n\r\nLet's add a row to the table:\r\n\r\n```\r\nINSERT INTO testJson  (id, fields) VALUES (1,'{\"fieldInteger\":1,\"fieldBoolean\":true,\"fieldFloat\":1.23,\"fieldString\":\"StringValue\"}');\r\n```\r\n\r\nLet's check that the row has been properly inserted.\r\n\r\n```\r\nSELECT *\r\nFROM testJson\r\n\r\nQuery id: 62875aa8-67fc-46ee-80b3-382346bbf255\r\n\r\n\u250c\u2500id\u2500\u252c\u2500fields\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502  1 \u2502 (1,1.23,1,'StringValue') \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.158 sec.\r\n```\r\n\r\nThen I delete the element\r\n\r\n```\r\nALTER TABLE testJson\r\n    DELETE WHERE id = 1\r\n\r\nQuery id: 288c33ed-75c4-42fc-ac04-bbce2cc325e3\r\n\r\n\u250c\u2500host\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500status\u2500\u252c\u2500error\u2500\u252c\u2500num_hosts_remaining\u2500\u252c\u2500num_hosts_active\u2500\u2510\r\n\u2502 default|host-1 \u2502      0 \u2502       \u2502                   1 \u2502                1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\u250c\u2500host\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500status\u2500\u252c\u2500error\u2500\u252c\u2500num_hosts_remaining\u2500\u252c\u2500num_hosts_active\u2500\u2510\r\n\u2502 default|host-2 \u2502      0 \u2502       \u2502                   0 \u2502                0 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n2 rows in set. Elapsed: 0.366 sec.\r\n```\r\n\r\nLet's verify that the record has been deleted:\r\n\r\n```\r\nSELECT *\r\nFROM testJson\r\n\r\nQuery id: 62875aa8-67fc-46ee-80b3-382346bbf255\r\n\r\n\u250c\u2500id\u2500\u252c\u2500fields\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502  1 \u2502 (1,1.23,1,'StringValue') \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.158 sec.\r\n```\r\n\r\nThe record is still there. \r\n\r\n**Expected behavior**\r\n\r\nThe row should have been deleted like in the below example:\r\n\r\n```\r\nCREATE TABLE testString\r\n(\r\n    `id` UInt32,\r\n    `fields` String\r\n)\r\nENGINE = ReplicatedMergeTree\r\nORDER BY id\r\nSETTINGS index_granularity = 8192\r\n```\r\n\r\nLet's insert a row:\r\n\r\n```\r\nINSERT INTO testString  (id, fields) VALUES (1,'test');\r\n```\r\n\r\nLet's check that the record is there:\r\n\r\n```\r\nSELECT *\r\nFROM testString\r\n\r\nQuery id: b2f8f509-3633-43fc-9be7-a797492df0bb\r\n\r\n\u250c\u2500id\u2500\u252c\u2500fields\u2500\u2510\r\n\u2502  1 \u2502 test   \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 0.202 sec.\r\n```\r\n\r\nLet's remove it:\r\n\r\n```\r\nALTER TABLE testJson\r\n    DELETE WHERE id = 1\r\n\r\nQuery id: 10ad5930-9102-4297-96c3-ae1fdef09d50\r\n\r\n\u250c\u2500host\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500status\u2500\u252c\u2500error\u2500\u252c\u2500num_hosts_remaining\u2500\u252c\u2500num_hosts_active\u2500\u2510\r\n\u2502 default|host-1 \u2502      0 \u2502       \u2502                   1 \u2502                1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\u250c\u2500host\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500status\u2500\u252c\u2500error\u2500\u252c\u2500num_hosts_remaining\u2500\u252c\u2500num_hosts_active\u2500\u2510\r\n\u2502 default|host-2\u2502      0 \u2502       \u2502                   0 \u2502                0 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n2 rows in set. Elapsed: 0.339 sec.\r\n```\r\n\r\nIt's being deleted correctly:\r\n\r\n```\r\nSELECT *\r\nFROM testString\r\n\r\nQuery id: fe3c0ea5-cc5a-41c0-be69-04c12d80cd93\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.156 sec.\r\n```\n",
  "hints_text": "",
  "created_at": "2022-05-16T18:31:48Z"
}