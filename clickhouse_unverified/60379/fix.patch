diff --git a/docs/en/operations/settings/settings-formats.md b/docs/en/operations/settings/settings-formats.md
index 9265fffa3231..f7d9586dd5be 100644
--- a/docs/en/operations/settings/settings-formats.md
+++ b/docs/en/operations/settings/settings-formats.md
@@ -1656,6 +1656,33 @@ Result:
    └─────────────────────────┴─────────┘
 ```
 
+### output_format_pretty_single_large_number_tip_threshold {#output_format_pretty_single_large_number_tip_threshold}
+
+Print a readable number tip on the right side of the table if the block consists of a single number which exceeds
+this value (except 0).
+
+Possible values:
+
+- 0 — The readable number tip will not be printed.
+- Positive integer — The readable number tip will be printed if the single number exceeds this value.
+
+Default value: `1000000`.
+
+**Example**
+
+Query:
+
+```sql
+SELECT 1000000000 as a;
+```
+
+Result:
+```text
+┌──────────a─┐
+│ 1000000000 │ -- 1.00 billion
+└────────────┘
+```
+
 ## Template format settings {#template-format-settings}
 
 ### format_template_resultset {#format_template_resultset}
diff --git a/src/Core/Settings.h b/src/Core/Settings.h
index 433195af9c33..62c531f9c5c1 100644
--- a/src/Core/Settings.h
+++ b/src/Core/Settings.h
@@ -1116,6 +1116,7 @@ class IColumn;
     M(Bool, output_format_enable_streaming, false, "Enable streaming in output formats that support it.", 0) \
     M(Bool, output_format_write_statistics, true, "Write statistics about read rows, bytes, time elapsed in suitable output formats.", 0) \
     M(Bool, output_format_pretty_row_numbers, false, "Add row numbers before each row for pretty output format", 0) \
+    M(UInt64, output_format_pretty_single_large_number_tip_threshold, 1'000'000, "Print a readable number tip on the right side of the table if the block consists of a single number which exceeds this value (except 0)", 0) \
     M(Bool, insert_distributed_one_random_shard, false, "If setting is enabled, inserting into distributed table will choose a random shard to write when there is no sharding key", 0) \
     \
     M(Bool, exact_rows_before_limit, false, "When enabled, ClickHouse will provide exact value for rows_before_limit_at_least statistic, but with the cost that the data before limit will have to be read completely", 0) \
diff --git a/src/Core/SettingsChangesHistory.h b/src/Core/SettingsChangesHistory.h
index e97a411e2c1a..47eff6765ff8 100644
--- a/src/Core/SettingsChangesHistory.h
+++ b/src/Core/SettingsChangesHistory.h
@@ -86,6 +86,7 @@ static std::map<ClickHouseVersion, SettingsChangesHistory::SettingsChanges> sett
 {
     {"24.2", {
               {"output_format_values_escape_quote_with_quote", false, false, "If true escape ' with '', otherwise quoted with \\'"},
+              {"output_format_pretty_single_large_number_tip_threshold", 0, 1'000'000, "Print a readable number tip on the right side of the table if the block consists of a single number which exceeds this value (except 0)"},
               {"input_format_try_infer_exponent_floats", true, false, "Don't infer floats in exponential notation by default"},
               {"async_insert_max_data_size", 1000000, 10485760, "The previous value appeared to be too small."},
               {"async_insert_poll_timeout_ms", 10, 10, "Timeout in milliseconds for polling data from asynchronous insert queue"},
diff --git a/src/Formats/FormatFactory.cpp b/src/Formats/FormatFactory.cpp
index 0654dd01e491..a4a08d762b9e 100644
--- a/src/Formats/FormatFactory.cpp
+++ b/src/Formats/FormatFactory.cpp
@@ -150,6 +150,7 @@ FormatSettings getFormatSettings(const ContextPtr & context, const Settings & se
     format_settings.pretty.max_rows = settings.output_format_pretty_max_rows;
     format_settings.pretty.max_value_width = settings.output_format_pretty_max_value_width;
     format_settings.pretty.output_format_pretty_row_numbers = settings.output_format_pretty_row_numbers;
+    format_settings.pretty.output_format_pretty_single_large_number_tip_threshold = settings.output_format_pretty_single_large_number_tip_threshold;
     format_settings.protobuf.input_flatten_google_wrappers = settings.input_format_protobuf_flatten_google_wrappers;
     format_settings.protobuf.output_nullables_with_google_wrappers = settings.output_format_protobuf_nullables_with_google_wrappers;
     format_settings.protobuf.skip_fields_with_unsupported_types_in_schema_inference = settings.input_format_protobuf_skip_fields_with_unsupported_types_in_schema_inference;
diff --git a/src/Formats/FormatSettings.h b/src/Formats/FormatSettings.h
index aa37216d3816..07708fe53d08 100644
--- a/src/Formats/FormatSettings.h
+++ b/src/Formats/FormatSettings.h
@@ -277,6 +277,7 @@ struct FormatSettings
         SettingFieldUInt64Auto color{"auto"};
 
         bool output_format_pretty_row_numbers = false;
+        UInt64 output_format_pretty_single_large_number_tip_threshold = 1'000'000;
 
         enum class Charset
         {
diff --git a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp
index eee0b24b5bae..4c20a8521179 100644
--- a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp
+++ b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp
@@ -6,6 +6,7 @@
 #include <IO/Operators.h>
 #include <Common/UTF8Helpers.h>
 #include <Common/PODArray.h>
+#include <Common/formatReadable.h>
 
 
 namespace DB
@@ -305,6 +306,7 @@ void PrettyBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind port_kind
         }
 
         writeCString(grid_symbols.bar, out);
+        writeReadableNumberTip(chunk);
         writeCString("
", out);
     }
 
@@ -410,6 +412,24 @@ void PrettyBlockOutputFormat::writeSuffix()
     }
 }
 
+void PrettyBlockOutputFormat::writeReadableNumberTip(const Chunk & chunk)
+{
+    auto columns = chunk.getColumns();
+    auto is_single_number = chunk.getNumRows() == 1 && chunk.getNumColumns() == 1 && WhichDataType(columns[0]->getDataType()).isNumber();
+    if (!is_single_number)
+        return;
+    auto value = columns[0]->getFloat64(0);
+    auto threshold = format_settings.pretty.output_format_pretty_single_large_number_tip_threshold;
+    if (threshold == 0 || value <= threshold)
+        return;
+    if (color)
+        writeCString("\033[90m", out);
+    writeCString(" -- ", out);
+    formatReadableQuantity(value, out, 2);
+    if (color)
+        writeCString("\033[0m", out);
+}
+
 void registerOutputFormatPretty(FormatFactory & factory)
 {
     registerPrettyFormatWithNoEscapesAndMonoBlock<PrettyBlockOutputFormat>(factory, "Pretty");
diff --git a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h
index 253a6a958cc3..680d39d87005 100644
--- a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h
+++ b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h
@@ -38,6 +38,7 @@ class PrettyBlockOutputFormat : public IOutputFormat
     virtual void writeChunk(const Chunk & chunk, PortKind port_kind);
     void writeMonoChunkIfNeeded();
     void writeSuffix() override;
+    void writeReadableNumberTip(const Chunk & chunk);
 
     void onRowsReadBeforeUpdate() override { total_rows = getRowsReadBefore(); }
 
diff --git a/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.cpp b/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.cpp
index b547ce9358ae..bda517708380 100644
--- a/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.cpp
+++ b/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.cpp
@@ -1,4 +1,5 @@
 #include <Common/PODArray.h>
+#include <Common/formatReadable.h>
 #include <IO/WriteBuffer.h>
 #include <IO/WriteHelpers.h>
 #include <IO/Operators.h>
@@ -137,7 +138,7 @@ void PrettyCompactBlockOutputFormat::writeBottom(const Widths & max_widths)
 void PrettyCompactBlockOutputFormat::writeRow(
     size_t row_num,
     const Block & header,
-    const Columns & columns,
+    const Chunk & chunk,
     const WidthsPerColumn & widths,
     const Widths & max_widths)
 {
@@ -157,6 +158,7 @@ void PrettyCompactBlockOutputFormat::writeRow(
                                        ascii_grid_symbols;
 
     size_t num_columns = max_widths.size();
+    const auto & columns = chunk.getColumns();
 
     writeCString(grid_symbols.bar, out);
 
@@ -171,6 +173,7 @@ void PrettyCompactBlockOutputFormat::writeRow(
     }
 
     writeCString(grid_symbols.bar, out);
+    writeReadableNumberTip(chunk);
     writeCString("
", out);
 }
 
@@ -180,7 +183,6 @@ void PrettyCompactBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind po
 
     size_t num_rows = chunk.getNumRows();
     const auto & header = getPort(port_kind).getHeader();
-    const auto & columns = chunk.getColumns();
 
     WidthsPerColumn widths;
     Widths max_widths;
@@ -190,7 +192,8 @@ void PrettyCompactBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind po
     writeHeader(header, max_widths, name_widths);
 
     for (size_t i = 0; i < num_rows && total_rows + i < max_rows; ++i)
-        writeRow(i, header, columns, widths, max_widths);
+        writeRow(i, header, chunk, widths, max_widths);
+
 
     writeBottom(max_widths);
 
diff --git a/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.h b/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.h
index 20cb931f282c..911fc2e950ce 100644
--- a/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.h
+++ b/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.h
@@ -22,7 +22,7 @@ class PrettyCompactBlockOutputFormat : public PrettyBlockOutputFormat
     void writeRow(
         size_t row_num,
         const Block & header,
-        const Columns & columns,
+        const Chunk & chunk,
         const WidthsPerColumn & widths,
         const Widths & max_widths);
 
diff --git a/src/Processors/Formats/Impl/PrettySpaceBlockOutputFormat.cpp b/src/Processors/Formats/Impl/PrettySpaceBlockOutputFormat.cpp
index f8e2ede869f0..e92863c93fb5 100644
--- a/src/Processors/Formats/Impl/PrettySpaceBlockOutputFormat.cpp
+++ b/src/Processors/Formats/Impl/PrettySpaceBlockOutputFormat.cpp
@@ -1,8 +1,8 @@
-#include <Common/PODArray.h>
+#include <Formats/FormatFactory.h>
 #include <IO/WriteBuffer.h>
 #include <IO/WriteHelpers.h>
-#include <Formats/FormatFactory.h>
 #include <Processors/Formats/Impl/PrettySpaceBlockOutputFormat.h>
+#include <Common/PODArray.h>
 
 
 namespace DB
@@ -30,9 +30,7 @@ void PrettySpaceBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind port
     calculateWidths(header, chunk, widths, max_widths, name_widths);
 
     if (format_settings.pretty.output_format_pretty_row_numbers)
-    {
         writeString(String(row_number_width, ' '), out);
-    }
     /// Names
     for (size_t i = 0; i < num_columns; ++i)
     {
@@ -75,9 +73,7 @@ void PrettySpaceBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind port
             // Write row number;
             auto row_num_string = std::to_string(row + 1 + total_rows) + ". ";
             for (size_t i = 0; i < row_number_width - row_num_string.size(); ++i)
-            {
                 writeCString(" ", out);
-            }
             writeString(row_num_string, out);
         }
         for (size_t column = 0; column < num_columns; ++column)
@@ -87,10 +83,11 @@ void PrettySpaceBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind port
 
             const auto & type = *header.getByPosition(column).type;
             auto & cur_width = widths[column].empty() ? max_widths[column] : widths[column][row];
-            writeValueWithPadding(*columns[column], *serializations[column],
-                row, cur_width, max_widths[column], type.shouldAlignRightInPrettyFormats());
+            writeValueWithPadding(
+                *columns[column], *serializations[column], row, cur_width, max_widths[column], type.shouldAlignRightInPrettyFormats());
         }
 
+        writeReadableNumberTip(chunk);
         writeChar('
', out);
     }
 
