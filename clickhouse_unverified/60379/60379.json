{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 60379,
  "instance_id": "ClickHouse__ClickHouse-60379",
  "issue_numbers": [
    "60296"
  ],
  "base_commit": "30d31d4d9bfd740f4a7935702f2761ad8134207b",
  "patch": "diff --git a/docs/en/operations/settings/settings-formats.md b/docs/en/operations/settings/settings-formats.md\nindex 9265fffa3231..f7d9586dd5be 100644\n--- a/docs/en/operations/settings/settings-formats.md\n+++ b/docs/en/operations/settings/settings-formats.md\n@@ -1656,6 +1656,33 @@ Result:\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n ```\n \n+### output_format_pretty_single_large_number_tip_threshold {#output_format_pretty_single_large_number_tip_threshold}\n+\n+Print a readable number tip on the right side of the table if the block consists of a single number which exceeds\n+this value (except 0).\n+\n+Possible values:\n+\n+- 0 \u2014 The readable number tip will not be printed.\n+- Positive integer \u2014 The readable number tip will be printed if the single number exceeds this value.\n+\n+Default value: `1000000`.\n+\n+**Example**\n+\n+Query:\n+\n+```sql\n+SELECT 1000000000 as a;\n+```\n+\n+Result:\n+```text\n+\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500a\u2500\u2510\n+\u2502 1000000000 \u2502 -- 1.00 billion\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n ## Template format settings {#template-format-settings}\n \n ### format_template_resultset {#format_template_resultset}\ndiff --git a/src/Core/Settings.h b/src/Core/Settings.h\nindex 433195af9c33..62c531f9c5c1 100644\n--- a/src/Core/Settings.h\n+++ b/src/Core/Settings.h\n@@ -1116,6 +1116,7 @@ class IColumn;\n     M(Bool, output_format_enable_streaming, false, \"Enable streaming in output formats that support it.\", 0) \\\n     M(Bool, output_format_write_statistics, true, \"Write statistics about read rows, bytes, time elapsed in suitable output formats.\", 0) \\\n     M(Bool, output_format_pretty_row_numbers, false, \"Add row numbers before each row for pretty output format\", 0) \\\n+    M(UInt64, output_format_pretty_single_large_number_tip_threshold, 1'000'000, \"Print a readable number tip on the right side of the table if the block consists of a single number which exceeds this value (except 0)\", 0) \\\n     M(Bool, insert_distributed_one_random_shard, false, \"If setting is enabled, inserting into distributed table will choose a random shard to write when there is no sharding key\", 0) \\\n     \\\n     M(Bool, exact_rows_before_limit, false, \"When enabled, ClickHouse will provide exact value for rows_before_limit_at_least statistic, but with the cost that the data before limit will have to be read completely\", 0) \\\ndiff --git a/src/Core/SettingsChangesHistory.h b/src/Core/SettingsChangesHistory.h\nindex e97a411e2c1a..47eff6765ff8 100644\n--- a/src/Core/SettingsChangesHistory.h\n+++ b/src/Core/SettingsChangesHistory.h\n@@ -86,6 +86,7 @@ static std::map<ClickHouseVersion, SettingsChangesHistory::SettingsChanges> sett\n {\n     {\"24.2\", {\n               {\"output_format_values_escape_quote_with_quote\", false, false, \"If true escape ' with '', otherwise quoted with \\\\'\"},\n+              {\"output_format_pretty_single_large_number_tip_threshold\", 0, 1'000'000, \"Print a readable number tip on the right side of the table if the block consists of a single number which exceeds this value (except 0)\"},\n               {\"input_format_try_infer_exponent_floats\", true, false, \"Don't infer floats in exponential notation by default\"},\n               {\"async_insert_max_data_size\", 1000000, 10485760, \"The previous value appeared to be too small.\"},\n               {\"async_insert_poll_timeout_ms\", 10, 10, \"Timeout in milliseconds for polling data from asynchronous insert queue\"},\ndiff --git a/src/Formats/FormatFactory.cpp b/src/Formats/FormatFactory.cpp\nindex 0654dd01e491..a4a08d762b9e 100644\n--- a/src/Formats/FormatFactory.cpp\n+++ b/src/Formats/FormatFactory.cpp\n@@ -150,6 +150,7 @@ FormatSettings getFormatSettings(const ContextPtr & context, const Settings & se\n     format_settings.pretty.max_rows = settings.output_format_pretty_max_rows;\n     format_settings.pretty.max_value_width = settings.output_format_pretty_max_value_width;\n     format_settings.pretty.output_format_pretty_row_numbers = settings.output_format_pretty_row_numbers;\n+    format_settings.pretty.output_format_pretty_single_large_number_tip_threshold = settings.output_format_pretty_single_large_number_tip_threshold;\n     format_settings.protobuf.input_flatten_google_wrappers = settings.input_format_protobuf_flatten_google_wrappers;\n     format_settings.protobuf.output_nullables_with_google_wrappers = settings.output_format_protobuf_nullables_with_google_wrappers;\n     format_settings.protobuf.skip_fields_with_unsupported_types_in_schema_inference = settings.input_format_protobuf_skip_fields_with_unsupported_types_in_schema_inference;\ndiff --git a/src/Formats/FormatSettings.h b/src/Formats/FormatSettings.h\nindex aa37216d3816..07708fe53d08 100644\n--- a/src/Formats/FormatSettings.h\n+++ b/src/Formats/FormatSettings.h\n@@ -277,6 +277,7 @@ struct FormatSettings\n         SettingFieldUInt64Auto color{\"auto\"};\n \n         bool output_format_pretty_row_numbers = false;\n+        UInt64 output_format_pretty_single_large_number_tip_threshold = 1'000'000;\n \n         enum class Charset\n         {\ndiff --git a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp\nindex eee0b24b5bae..4c20a8521179 100644\n--- a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp\n@@ -6,6 +6,7 @@\n #include <IO/Operators.h>\n #include <Common/UTF8Helpers.h>\n #include <Common/PODArray.h>\n+#include <Common/formatReadable.h>\n \n \n namespace DB\n@@ -305,6 +306,7 @@ void PrettyBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind port_kind\n         }\n \n         writeCString(grid_symbols.bar, out);\n+        writeReadableNumberTip(chunk);\n         writeCString(\"\\n\", out);\n     }\n \n@@ -410,6 +412,24 @@ void PrettyBlockOutputFormat::writeSuffix()\n     }\n }\n \n+void PrettyBlockOutputFormat::writeReadableNumberTip(const Chunk & chunk)\n+{\n+    auto columns = chunk.getColumns();\n+    auto is_single_number = chunk.getNumRows() == 1 && chunk.getNumColumns() == 1 && WhichDataType(columns[0]->getDataType()).isNumber();\n+    if (!is_single_number)\n+        return;\n+    auto value = columns[0]->getFloat64(0);\n+    auto threshold = format_settings.pretty.output_format_pretty_single_large_number_tip_threshold;\n+    if (threshold == 0 || value <= threshold)\n+        return;\n+    if (color)\n+        writeCString(\"\\033[90m\", out);\n+    writeCString(\" -- \", out);\n+    formatReadableQuantity(value, out, 2);\n+    if (color)\n+        writeCString(\"\\033[0m\", out);\n+}\n+\n void registerOutputFormatPretty(FormatFactory & factory)\n {\n     registerPrettyFormatWithNoEscapesAndMonoBlock<PrettyBlockOutputFormat>(factory, \"Pretty\");\ndiff --git a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h\nindex 253a6a958cc3..680d39d87005 100644\n--- a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h\n+++ b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h\n@@ -38,6 +38,7 @@ class PrettyBlockOutputFormat : public IOutputFormat\n     virtual void writeChunk(const Chunk & chunk, PortKind port_kind);\n     void writeMonoChunkIfNeeded();\n     void writeSuffix() override;\n+    void writeReadableNumberTip(const Chunk & chunk);\n \n     void onRowsReadBeforeUpdate() override { total_rows = getRowsReadBefore(); }\n \ndiff --git a/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.cpp b/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.cpp\nindex b547ce9358ae..bda517708380 100644\n--- a/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.cpp\n@@ -1,4 +1,5 @@\n #include <Common/PODArray.h>\n+#include <Common/formatReadable.h>\n #include <IO/WriteBuffer.h>\n #include <IO/WriteHelpers.h>\n #include <IO/Operators.h>\n@@ -137,7 +138,7 @@ void PrettyCompactBlockOutputFormat::writeBottom(const Widths & max_widths)\n void PrettyCompactBlockOutputFormat::writeRow(\n     size_t row_num,\n     const Block & header,\n-    const Columns & columns,\n+    const Chunk & chunk,\n     const WidthsPerColumn & widths,\n     const Widths & max_widths)\n {\n@@ -157,6 +158,7 @@ void PrettyCompactBlockOutputFormat::writeRow(\n                                        ascii_grid_symbols;\n \n     size_t num_columns = max_widths.size();\n+    const auto & columns = chunk.getColumns();\n \n     writeCString(grid_symbols.bar, out);\n \n@@ -171,6 +173,7 @@ void PrettyCompactBlockOutputFormat::writeRow(\n     }\n \n     writeCString(grid_symbols.bar, out);\n+    writeReadableNumberTip(chunk);\n     writeCString(\"\\n\", out);\n }\n \n@@ -180,7 +183,6 @@ void PrettyCompactBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind po\n \n     size_t num_rows = chunk.getNumRows();\n     const auto & header = getPort(port_kind).getHeader();\n-    const auto & columns = chunk.getColumns();\n \n     WidthsPerColumn widths;\n     Widths max_widths;\n@@ -190,7 +192,8 @@ void PrettyCompactBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind po\n     writeHeader(header, max_widths, name_widths);\n \n     for (size_t i = 0; i < num_rows && total_rows + i < max_rows; ++i)\n-        writeRow(i, header, columns, widths, max_widths);\n+        writeRow(i, header, chunk, widths, max_widths);\n+\n \n     writeBottom(max_widths);\n \ndiff --git a/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.h b/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.h\nindex 20cb931f282c..911fc2e950ce 100644\n--- a/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.h\n+++ b/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.h\n@@ -22,7 +22,7 @@ class PrettyCompactBlockOutputFormat : public PrettyBlockOutputFormat\n     void writeRow(\n         size_t row_num,\n         const Block & header,\n-        const Columns & columns,\n+        const Chunk & chunk,\n         const WidthsPerColumn & widths,\n         const Widths & max_widths);\n \ndiff --git a/src/Processors/Formats/Impl/PrettySpaceBlockOutputFormat.cpp b/src/Processors/Formats/Impl/PrettySpaceBlockOutputFormat.cpp\nindex f8e2ede869f0..e92863c93fb5 100644\n--- a/src/Processors/Formats/Impl/PrettySpaceBlockOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/PrettySpaceBlockOutputFormat.cpp\n@@ -1,8 +1,8 @@\n-#include <Common/PODArray.h>\n+#include <Formats/FormatFactory.h>\n #include <IO/WriteBuffer.h>\n #include <IO/WriteHelpers.h>\n-#include <Formats/FormatFactory.h>\n #include <Processors/Formats/Impl/PrettySpaceBlockOutputFormat.h>\n+#include <Common/PODArray.h>\n \n \n namespace DB\n@@ -30,9 +30,7 @@ void PrettySpaceBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind port\n     calculateWidths(header, chunk, widths, max_widths, name_widths);\n \n     if (format_settings.pretty.output_format_pretty_row_numbers)\n-    {\n         writeString(String(row_number_width, ' '), out);\n-    }\n     /// Names\n     for (size_t i = 0; i < num_columns; ++i)\n     {\n@@ -75,9 +73,7 @@ void PrettySpaceBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind port\n             // Write row number;\n             auto row_num_string = std::to_string(row + 1 + total_rows) + \". \";\n             for (size_t i = 0; i < row_number_width - row_num_string.size(); ++i)\n-            {\n                 writeCString(\" \", out);\n-            }\n             writeString(row_num_string, out);\n         }\n         for (size_t column = 0; column < num_columns; ++column)\n@@ -87,10 +83,11 @@ void PrettySpaceBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind port\n \n             const auto & type = *header.getByPosition(column).type;\n             auto & cur_width = widths[column].empty() ? max_widths[column] : widths[column][row];\n-            writeValueWithPadding(*columns[column], *serializations[column],\n-                row, cur_width, max_widths[column], type.shouldAlignRightInPrettyFormats());\n+            writeValueWithPadding(\n+                *columns[column], *serializations[column], row, cur_width, max_widths[column], type.shouldAlignRightInPrettyFormats());\n         }\n \n+        writeReadableNumberTip(chunk);\n         writeChar('\\n', out);\n     }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02998_pretty_format_print_readable_number_on_single_value.reference b/tests/queries/0_stateless/02998_pretty_format_print_readable_number_on_single_value.reference\nnew file mode 100644\nindex 000000000000..482ad58862c2\n--- /dev/null\n+++ b/tests/queries/0_stateless/02998_pretty_format_print_readable_number_on_single_value.reference\n@@ -0,0 +1,280 @@\n+\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n+\u2503       a \u2503\n+\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n+\u2502 1000000 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n+\u2503       a \u2503\n+\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n+\u2502 1000000 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n+\u2503       a \u2503\n+\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n+\u2502 1000000 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n+\u2503       a \u2503\n+\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n+\u2502 1000000 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500a\u2500\u2510\n+\u2502 1000000 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500a\u2500\u2510\n+\u2502 1000000 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500a\u2500\u2510\n+\u2502 1000000 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500a\u2500\u2510\n+\u2502 1000000 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+       a\n+\n+ 1000000 \n+       a\n+\n+ 1000000 \n+       a\n+\n+ 1000000 \n+       a\n+\n+ 1000000 \n+\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n+\u2503       a \u2503\n+\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n+\u2502 1000000 \u2502 -- 1.00 million\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n+\u2503       a \u2503\n+\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n+\u2502 1000000 \u2502 -- 1.00 million\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n+\u2503       a \u2503\n+\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n+\u2502 1000000 \u2502 -- 1.00 million\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n+\u2503       a \u2503\n+\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n+\u2502 1000000 \u2502 -- 1.00 million\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500a\u2500\u2510\n+\u2502 1000000 \u2502 -- 1.00 million\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500a\u2500\u2510\n+\u2502 1000000 \u2502 -- 1.00 million\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500a\u2500\u2510\n+\u2502 1000000 \u2502 -- 1.00 million\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500a\u2500\u2510\n+\u2502 1000000 \u2502 -- 1.00 million\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+       a\n+\n+ 1000000  -- 1.00 million\n+       a\n+\n+ 1000000  -- 1.00 million\n+       a\n+\n+ 1000000  -- 1.00 million\n+       a\n+\n+ 1000000  -- 1.00 million\n+\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n+\u2503       a \u2503\n+\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n+\u2502 1000001 \u2502 -- 1.00 million\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n+\u2503       a \u2503\n+\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n+\u2502 1000001 \u2502 -- 1.00 million\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n+\u2503       a \u2503\n+\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n+\u2502 1000001 \u2502 -- 1.00 million\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n+\u2503       a \u2503\n+\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n+\u2502 1000001 \u2502 -- 1.00 million\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500a\u2500\u2510\n+\u2502 1000001 \u2502 -- 1.00 million\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500a\u2500\u2510\n+\u2502 1000001 \u2502 -- 1.00 million\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500a\u2500\u2510\n+\u2502 1000001 \u2502 -- 1.00 million\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500a\u2500\u2510\n+\u2502 1000001 \u2502 -- 1.00 million\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+       a\n+\n+ 1000001  -- 1.00 million\n+       a\n+\n+ 1000001  -- 1.00 million\n+       a\n+\n+ 1000001  -- 1.00 million\n+       a\n+\n+ 1000001  -- 1.00 million\n+\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n+\u2503          a \u2503\n+\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n+\u2502 1000000000 \u2502 -- 1.00 billion\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n+\u2503          a \u2503\n+\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n+\u2502 1000000000 \u2502 -- 1.00 billion\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n+\u2503          a \u2503\n+\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n+\u2502 1000000000 \u2502 -- 1.00 billion\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n+\u2503          a \u2503\n+\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n+\u2502 1000000000 \u2502 -- 1.00 billion\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500a\u2500\u2510\n+\u2502 1000000000 \u2502 -- 1.00 billion\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500a\u2500\u2510\n+\u2502 1000000000 \u2502 -- 1.00 billion\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500a\u2500\u2510\n+\u2502 1000000000 \u2502 -- 1.00 billion\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500a\u2500\u2510\n+\u2502 1000000000 \u2502 -- 1.00 billion\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+          a\n+\n+ 1000000000  -- 1.00 billion\n+          a\n+\n+ 1000000000  -- 1.00 billion\n+          a\n+\n+ 1000000000  -- 1.00 billion\n+          a\n+\n+ 1000000000  -- 1.00 billion\n+\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n+\u2503          a \u2503          b \u2503\n+\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n+\u2502 1000000000 \u2502 1000000000 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n+\u2503          a \u2503          b \u2503\n+\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n+\u2502 1000000000 \u2502 1000000000 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n+\u2503          a \u2503          b \u2503\n+\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n+\u2502 1000000000 \u2502 1000000000 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n+\u2503          a \u2503          b \u2503\n+\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n+\u2502 1000000000 \u2502 1000000000 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500a\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500b\u2500\u2510\n+\u2502 1000000000 \u2502 1000000000 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500a\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500b\u2500\u2510\n+\u2502 1000000000 \u2502 1000000000 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500a\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500b\u2500\u2510\n+\u2502 1000000000 \u2502 1000000000 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500a\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500b\u2500\u2510\n+\u2502 1000000000 \u2502 1000000000 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+          a            b\n+\n+ 1000000000   1000000000 \n+          a            b\n+\n+ 1000000000   1000000000 \n+          a            b\n+\n+ 1000000000   1000000000 \n+          a            b\n+\n+ 1000000000   1000000000 \n+\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n+\u2503          a \u2503\n+\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n+\u2502 1000000000 \u2502\n+\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n+\u2502 1000000000 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n+\u2503          a \u2503\n+\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n+\u2502 1000000000 \u2502\n+\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n+\u2502 1000000000 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n+\u2503          a \u2503\n+\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n+\u2502 1000000000 \u2502\n+\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n+\u2502 1000000000 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n+\u2503          a \u2503\n+\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n+\u2502 1000000000 \u2502\n+\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n+\u2502 1000000000 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500a\u2500\u2510\n+\u2502 1000000000 \u2502\n+\u2502 1000000000 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500a\u2500\u2510\n+\u2502 1000000000 \u2502\n+\u2502 1000000000 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500a\u2500\u2510\n+\u2502 1000000000 \u2502\n+\u2502 1000000000 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500a\u2500\u2510\n+\u2502 1000000000 \u2502\n+\u2502 1000000000 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+          a\n+\n+ 1000000000 \n+ 1000000000 \n+          a\n+\n+ 1000000000 \n+ 1000000000 \n+          a\n+\n+ 1000000000 \n+ 1000000000 \n+          a\n+\n+ 1000000000 \n+ 1000000000 \ndiff --git a/tests/queries/0_stateless/02998_pretty_format_print_readable_number_on_single_value.sql b/tests/queries/0_stateless/02998_pretty_format_print_readable_number_on_single_value.sql\nnew file mode 100644\nindex 000000000000..6bbe9064c429\n--- /dev/null\n+++ b/tests/queries/0_stateless/02998_pretty_format_print_readable_number_on_single_value.sql\n@@ -0,0 +1,79 @@\n+SELECT 1_000_000 as a FORMAT Pretty;\n+SELECT 1_000_000 as a FORMAT PrettyNoEscapes;\n+SELECT 1_000_000 as a FORMAT PrettyMonoBlock;\n+SELECT 1_000_000 as a FORMAT PrettyNoEscapesMonoBlock;\n+SELECT 1_000_000 as a FORMAT PrettyCompact;\n+SELECT 1_000_000 as a FORMAT PrettyCompactNoEscapes;\n+SELECT 1_000_000 as a FORMAT PrettyCompactMonoBlock;\n+SELECT 1_000_000 as a FORMAT PrettyCompactNoEscapesMonoBlock;\n+SELECT 1_000_000 as a FORMAT PrettySpace;\n+SELECT 1_000_000 as a FORMAT PrettySpaceNoEscapes;\n+SELECT 1_000_000 as a FORMAT PrettySpaceMonoBlock;\n+SELECT 1_000_000 as a FORMAT PrettySpaceNoEscapesMonoBlock;\n+\n+\n+SELECT 1_000_000 as a SETTINGS output_format_pretty_single_large_number_tip_threshold = 1000 FORMAT Pretty;\n+SELECT 1_000_000 as a SETTINGS output_format_pretty_single_large_number_tip_threshold = 1000 FORMAT PrettyNoEscapes;\n+SELECT 1_000_000 as a SETTINGS output_format_pretty_single_large_number_tip_threshold = 1000 FORMAT PrettyMonoBlock;\n+SELECT 1_000_000 as a SETTINGS output_format_pretty_single_large_number_tip_threshold = 1000 FORMAT PrettyNoEscapesMonoBlock;\n+SELECT 1_000_000 as a SETTINGS output_format_pretty_single_large_number_tip_threshold = 1000 FORMAT PrettyCompact;\n+SELECT 1_000_000 as a SETTINGS output_format_pretty_single_large_number_tip_threshold = 1000 FORMAT PrettyCompactNoEscapes;\n+SELECT 1_000_000 as a SETTINGS output_format_pretty_single_large_number_tip_threshold = 1000 FORMAT PrettyCompactMonoBlock;\n+SELECT 1_000_000 as a SETTINGS output_format_pretty_single_large_number_tip_threshold = 1000 FORMAT PrettyCompactNoEscapesMonoBlock;\n+SELECT 1_000_000 as a SETTINGS output_format_pretty_single_large_number_tip_threshold = 1000 FORMAT PrettySpace;\n+SELECT 1_000_000 as a SETTINGS output_format_pretty_single_large_number_tip_threshold = 1000 FORMAT PrettySpaceNoEscapes;\n+SELECT 1_000_000 as a SETTINGS output_format_pretty_single_large_number_tip_threshold = 1000 FORMAT PrettySpaceMonoBlock;\n+SELECT 1_000_000 as a SETTINGS output_format_pretty_single_large_number_tip_threshold = 1000 FORMAT PrettySpaceNoEscapesMonoBlock;\n+\n+SELECT 1_000_001 as a FORMAT Pretty;\n+SELECT 1_000_001 as a FORMAT PrettyNoEscapes;\n+SELECT 1_000_001 as a FORMAT PrettyMonoBlock;\n+SELECT 1_000_001 as a FORMAT PrettyNoEscapesMonoBlock;\n+SELECT 1_000_001 as a FORMAT PrettyCompact;\n+SELECT 1_000_001 as a FORMAT PrettyCompactNoEscapes;\n+SELECT 1_000_001 as a FORMAT PrettyCompactMonoBlock;\n+SELECT 1_000_001 as a FORMAT PrettyCompactNoEscapesMonoBlock;\n+SELECT 1_000_001 as a FORMAT PrettySpace;\n+SELECT 1_000_001 as a FORMAT PrettySpaceNoEscapes;\n+SELECT 1_000_001 as a FORMAT PrettySpaceMonoBlock;\n+SELECT 1_000_001 as a FORMAT PrettySpaceNoEscapesMonoBlock;\n+\n+SELECT 1_000_000_000 as a FORMAT Pretty;\n+SELECT 1_000_000_000 as a FORMAT PrettyNoEscapes;\n+SELECT 1_000_000_000 as a FORMAT PrettyMonoBlock;\n+SELECT 1_000_000_000 as a FORMAT PrettyNoEscapesMonoBlock;\n+SELECT 1_000_000_000 as a FORMAT PrettyCompact;\n+SELECT 1_000_000_000 as a FORMAT PrettyCompactNoEscapes;\n+SELECT 1_000_000_000 as a FORMAT PrettyCompactMonoBlock;\n+SELECT 1_000_000_000 as a FORMAT PrettyCompactNoEscapesMonoBlock;\n+SELECT 1_000_000_000 as a FORMAT PrettySpace;\n+SELECT 1_000_000_000 as a FORMAT PrettySpaceNoEscapes;\n+SELECT 1_000_000_000 as a FORMAT PrettySpaceMonoBlock;\n+SELECT 1_000_000_000 as a FORMAT PrettySpaceNoEscapesMonoBlock;\n+\n+SELECT 1_000_000_000 as a, 1_000_000_000 as b FORMAT Pretty;\n+SELECT 1_000_000_000 as a, 1_000_000_000 as b FORMAT PrettyNoEscapes;\n+SELECT 1_000_000_000 as a, 1_000_000_000 as b FORMAT PrettyMonoBlock;\n+SELECT 1_000_000_000 as a, 1_000_000_000 as b FORMAT PrettyNoEscapesMonoBlock;\n+SELECT 1_000_000_000 as a, 1_000_000_000 as b FORMAT PrettyCompact;\n+SELECT 1_000_000_000 as a, 1_000_000_000 as b FORMAT PrettyCompactNoEscapes;\n+SELECT 1_000_000_000 as a, 1_000_000_000 as b FORMAT PrettyCompactMonoBlock;\n+SELECT 1_000_000_000 as a, 1_000_000_000 as b FORMAT PrettyCompactNoEscapesMonoBlock;\n+SELECT 1_000_000_000 as a, 1_000_000_000 as b FORMAT PrettySpace;\n+SELECT 1_000_000_000 as a, 1_000_000_000 as b FORMAT PrettySpaceNoEscapes;\n+SELECT 1_000_000_000 as a, 1_000_000_000 as b FORMAT PrettySpaceMonoBlock;\n+SELECT 1_000_000_000 as a, 1_000_000_000 as b FORMAT PrettySpaceNoEscapesMonoBlock;\n+\n+SELECT 1_000_000_000 as a FROM system.numbers LIMIT 2 FORMAT Pretty;\n+SELECT 1_000_000_000 as a FROM system.numbers LIMIT 2 FORMAT PrettyNoEscapes;\n+SELECT 1_000_000_000 as a FROM system.numbers LIMIT 2 FORMAT PrettyMonoBlock;\n+SELECT 1_000_000_000 as a FROM system.numbers LIMIT 2 FORMAT PrettyNoEscapesMonoBlock;\n+SELECT 1_000_000_000 as a FROM system.numbers LIMIT 2 FORMAT PrettyCompact;\n+SELECT 1_000_000_000 as a FROM system.numbers LIMIT 2 FORMAT PrettyCompactNoEscapes;\n+SELECT 1_000_000_000 as a FROM system.numbers LIMIT 2 FORMAT PrettyCompactMonoBlock;\n+SELECT 1_000_000_000 as a FROM system.numbers LIMIT 2 FORMAT PrettyCompactNoEscapesMonoBlock;\n+SELECT 1_000_000_000 as a FROM system.numbers LIMIT 2 FORMAT PrettySpace;\n+SELECT 1_000_000_000 as a FROM system.numbers LIMIT 2 FORMAT PrettySpaceNoEscapes;\n+SELECT 1_000_000_000 as a FROM system.numbers LIMIT 2 FORMAT PrettySpaceMonoBlock;\n+SELECT 1_000_000_000 as a FROM system.numbers LIMIT 2 FORMAT PrettySpaceNoEscapesMonoBlock;\n+\n",
  "problem_statement": "Usability improvement for Pretty format: print human readable number in the case of a single value\n```\r\nclickhouse-cloud :) SELECT count() FROM merge(default, '^trace_log_')\r\n\r\nSELECT count()\r\nFROM merge(default, '^trace_log_')\r\n\r\nQuery id: 5bc2e90c-2c69-4152-bfdc-fc3c39b0ab30\r\n\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500count()\u2500\u2510\r\n\u2502 233765663884 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nIf a block consists of a single numeric value, and it exceeds one million, we should print:\r\n\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500count()\u2500\u2510\r\n\u2502 233765663884 \u2502 -- 233.77 billion\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nThis addition should be displayed in gray color, if the output is a terminal.\n",
  "hints_text": "",
  "created_at": "2024-02-25T08:38:53Z"
}