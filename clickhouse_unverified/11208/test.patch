diff --git a/src/IO/tests/CMakeLists.txt b/src/IO/tests/CMakeLists.txt
index 2767ce6e2714..dfbbfa778538 100644
--- a/src/IO/tests/CMakeLists.txt
+++ b/src/IO/tests/CMakeLists.txt
@@ -37,9 +37,6 @@ target_link_libraries (parse_int_perf2 PRIVATE clickhouse_common_io)
 add_executable (read_write_int read_write_int.cpp)
 target_link_libraries (read_write_int PRIVATE clickhouse_common_io)
 
-add_executable (mempbrk mempbrk.cpp)
-target_link_libraries (mempbrk PRIVATE clickhouse_common_io)
-
 add_executable (o_direct_and_dirty_pages o_direct_and_dirty_pages.cpp)
 target_link_libraries (o_direct_and_dirty_pages PRIVATE clickhouse_common_io)
 
diff --git a/src/IO/tests/mempbrk.cpp b/src/IO/tests/mempbrk.cpp
deleted file mode 100644
index 55097d989af1..000000000000
--- a/src/IO/tests/mempbrk.cpp
+++ /dev/null
@@ -1,90 +0,0 @@
-#include <string>
-#include <iostream>
-#include <iomanip>
-
-#include <Common/Stopwatch.h>
-
-#include <Core/Types.h>
-#include <IO/ReadHelpers.h>
-#include <IO/WriteHelpers.h>
-#include <IO/ReadBufferFromFileDescriptor.h>
-#include <IO/WriteBufferFromFileDescriptor.h>
-
-#include <common/find_symbols.h>
-
-namespace DB
-{
-namespace ErrorCodes
-{
-    extern const int CANNOT_PARSE_ESCAPE_SEQUENCE;
-}
-}
-
-
-namespace test
-{
-static void readEscapedString(DB::String & s, DB::ReadBuffer & buf)
-    {
-        s = "";
-        while (!buf.eof())
-        {
-            const char * next_pos = find_first_symbols<'\b', '\f', '
', '\r', '\t', '\0', '\\'>(buf.position(), buf.buffer().end());
-
-            s.append(buf.position(), next_pos - buf.position());
-            buf.position() += next_pos - buf.position();
-
-            if (!buf.hasPendingData())
-                continue;
-
-            if (*buf.position() == '\t' || *buf.position() == '
')
-                return;
-
-            if (*buf.position() == '\\')
-            {
-                ++buf.position();
-                if (buf.eof())
-                    throw DB::Exception("Cannot parse escape sequence", DB::ErrorCodes::CANNOT_PARSE_ESCAPE_SEQUENCE);
-                s += DB::parseEscapeSequence(*buf.position());
-                ++buf.position();
-            }
-        }
-    }
-}
-
-
-int main(int, char **)
-{
-    try
-    {
-        DB::ReadBufferFromFileDescriptor in(STDIN_FILENO);
-//        DB::WriteBufferFromFileDescriptor out(STDOUT_FILENO);
-        std::string s;
-        size_t rows = 0;
-
-        Stopwatch watch;
-
-        while (!in.eof())
-        {
-            test::readEscapedString(s, in);
-            in.ignore();
-
-            ++rows;
-
-/*            DB::writeEscapedString(s, out);
-            DB::writeChar('
', out);*/
-        }
-
-        watch.stop();
-        std::cerr << std::fixed << std::setprecision(2)
-            << "Read " << rows << " rows (" << in.count() / 1000000.0 << " MB) in " << watch.elapsedSeconds() << " sec., "
-            << rows / watch.elapsedSeconds() << " rows/sec. (" << in.count() / watch.elapsedSeconds() / 1000000 << " MB/s.)"
-            << std::endl;
-    }
-    catch (const DB::Exception & e)
-    {
-        std::cerr << e.what() << ", " << e.displayText() << std::endl;
-        return 1;
-    }
-
-    return 0;
-}
diff --git a/tests/queries/0_stateless/00342_escape_sequences.reference b/tests/queries/0_stateless/00342_escape_sequences.reference
index b7ecd06be787..50e0756d16fc 100644
--- a/tests/queries/0_stateless/00342_escape_sequences.reference
+++ b/tests/queries/0_stateless/00342_escape_sequences.reference
@@ -1,1 +1,1 @@
-07080C0A0D090B5C27223FAA
+07080C0A0D090B5C27225C3FAA
diff --git a/tests/queries/0_stateless/00926_multimatch.sql b/tests/queries/0_stateless/00926_multimatch.sql
index d54e4fd22803..bf67533bb6ca 100644
--- a/tests/queries/0_stateless/00926_multimatch.sql
+++ b/tests/queries/0_stateless/00926_multimatch.sql
@@ -89,4 +89,4 @@ SELECT [1, 2, 3, 11] = arraySort(multiMatchAllIndices('Ñ„Ð°Ð±Ñ€Ð¸ÐºÐ°Ð½Ñ‚', ['',
 SELECT [1] = multiMatchAllIndices(materialize('/odezhda-dlya-bega/'), ['/odezhda-dlya-bega/', 'kurtki-i-vetrovki-dlya-bega', 'futbolki-i-mayki-dlya-bega']);
 SELECT [] = multiMatchAllIndices(materialize('aaaa'), ['.*aa.*aaa.*', 'aaaaaa{2}', '\(aa\){3}']);
 SELECT 'All tests above must return 1, all tests below return something.';
-SELECT arraySort(multiMatchAllIndices(arrayJoin(['aaaa', 'aaaaaa', 'bbbb', 'aaaaaaaaaaaaaa']), ['.*aa.*aaa.*', 'aaaaaa{2}', '\(aa\){3}']));
+SELECT arraySort(multiMatchAllIndices(arrayJoin(['aaaa', 'aaaaaa', 'bbbb', 'aaaaaaaaaaaaaa']), ['.*aa.*aaa.*', 'aaaaaa{2}', '(aa){3}']));
diff --git a/tests/queries/0_stateless/01075_allowed_client_hosts.reference b/tests/queries/0_stateless/01075_allowed_client_hosts.reference
index 73f54c6027aa..3fdea9d1cda9 100644
--- a/tests/queries/0_stateless/01075_allowed_client_hosts.reference
+++ b/tests/queries/0_stateless/01075_allowed_client_hosts.reference
@@ -8,10 +8,10 @@ CREATE USER test_user_01075 HOST LOCAL, IP \'2001:db8:11a3:9d7:1f34:8a2e:7a0:765
 CREATE USER test_user_01075 HOST LOCAL
 CREATE USER test_user_01075 HOST NONE
 CREATE USER test_user_01075 HOST LIKE \'@.somesite.com\'
-CREATE USER test_user_01075 HOST REGEXP \'.*.anothersite.com\'
-CREATE USER test_user_01075 HOST REGEXP \'.*.anothersite.com\', \'.*.anothersite.org\'
-CREATE USER test_user_01075 HOST REGEXP \'.*.anothersite2.com\', \'.*.anothersite2.org\'
-CREATE USER test_user_01075 HOST REGEXP \'.*.anothersite3.com\', \'.*.anothersite3.org\'
+CREATE USER test_user_01075 HOST REGEXP \'.*\\\\.anothersite\\\\.com\'
+CREATE USER test_user_01075 HOST REGEXP \'.*\\\\.anothersite\\\\.com\', \'.*\\\\.anothersite\\\\.org\'
+CREATE USER test_user_01075 HOST REGEXP \'.*\\\\.anothersite2\\\\.com\', \'.*\\\\.anothersite2\\\\.org\'
+CREATE USER test_user_01075 HOST REGEXP \'.*\\\\.anothersite3\\\\.com\', \'.*\\\\.anothersite3\\\\.org\'
 CREATE USER `test_user_01075_x@localhost` HOST LOCAL
 CREATE USER test_user_01075_x
 CREATE USER `test_user_01075_x@192.168.23.15` HOST LIKE \'192.168.23.15\'
diff --git a/tests/queries/0_stateless/01284_escape_sequences_php_mysql_style.reference b/tests/queries/0_stateless/01284_escape_sequences_php_mysql_style.reference
new file mode 100644
index 000000000000..19a5fc680ff9
--- /dev/null
+++ b/tests/queries/0_stateless/01284_escape_sequences_php_mysql_style.reference
@@ -0,0 +1,3 @@
+a\\_\\c\\l\\i\\c\\k\\h\\o\\u\\s	a\\_\\c\\l\\i\\c\\k\\h\\o\\u\\s\\e
+1	0	1	1
+1	1	0	0	0
diff --git a/tests/queries/0_stateless/01284_escape_sequences_php_mysql_style.sql b/tests/queries/0_stateless/01284_escape_sequences_php_mysql_style.sql
new file mode 100644
index 000000000000..36ad7b4506cc
--- /dev/null
+++ b/tests/queries/0_stateless/01284_escape_sequences_php_mysql_style.sql
@@ -0,0 +1,6 @@
+SELECT 'a\_\c\l\i\c\k\h\o\u\s\e', 'a\\_\\c\\l\\i\\c\\k\\h\\o\\u\\s\\e';
+select 'aXb' like 'a_b', 'aXb' like 'a\_b', 'a_b' like 'a\_b', 'a_b' like 'a\\_b';
+SELECT match('Hello', '\w+'), match('Hello', '\\w+'), match('Hello', '\\\w+'), match('Hello', '\w\+'), match('Hello', 'w+');
+
+SELECT match('Hello', '\He\l\l\o'); -- { serverError 427 }
+SELECT match('Hello', '\H\e\l\l\o'); -- { serverError 427 }
