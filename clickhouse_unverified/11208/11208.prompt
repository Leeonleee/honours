You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
RFC: excessive escaping in regexps and like
In ClickHouse you need to double escape special characters in regexp and like (for example, underscores in `like` need to be escaped with two backslashes).

The reasons for the behavior are clear (parser extract the regexp / right part of `like` as a regular literal with general rules for escaping, and then `like` function takes the string from AST and uses it's own logic).

But this is inconvenient /  for the user:
1) this is a deviation from the standard (in the case of like)
2) all sorts of complex regexps (which are quite noisy in general) in ClickHouse look more noisy because of double escaping. 

Therefore, the question is - do we want to change this?

It seems to be fundamentally feasible - when parsing, you can simply add the literal in the AST in the original representation and use other deescaping rules for the `like` / `regexp` functions.

But there are also side effects (backward compatibility, "specialization" of parsers / desapaping).

what do you think of this? Do we want to change that? If so, then soon / not soon / "maybe someday." Or leave it as it is?

The second column here is problematic:
```
select 'aXb' like 'a_b', 'aXb' like 'a\_b', 'a_b' like 'a\_b', 'a_b' like 'a\\_b';

Mysql:      1 0 1 1
Postgres:   1 0 1 0
ClickHouse  1 1 1 1
SQLite:     1 0 0 0
```

Alexey Milovidov, [11.05.20 18:57]
In PHP, they did that in string literals, `\{` is parsed not like `{` but like `\{`, and therefore in functions like `preg_replace` you can write only one slash, not two. In earlier versions of MySQL in `LIKE` it was necessary to write two slashes, such as: LIKE 'hello \\ _ world', and then they fixed it similarly to PHP. It is not obvious whether we need to do this.

Such a  strange logic:
https://www.db-fiddle.com/f/kCLJ917M6RFS4XoY4bDnyh/0

Note that by standard, string literals do not support C-style escaping (using backslashes), this is a feature of MySQL.

We can make parsing as in PHP + customization to completely turn off C-style escapes to comply with the standard.
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
