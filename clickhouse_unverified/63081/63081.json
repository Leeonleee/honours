{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 63081,
  "instance_id": "ClickHouse__ClickHouse-63081",
  "issue_numbers": [
    "62361"
  ],
  "base_commit": "7ac5821a2396aa6d1880b2b6d58e644e60b2b078",
  "patch": "diff --git a/programs/main.cpp b/programs/main.cpp\nindex 9ad8b016c824..65fcfb8fadf7 100644\n--- a/programs/main.cpp\n+++ b/programs/main.cpp\n@@ -491,9 +491,13 @@ int main(int argc_, char ** argv_)\n     ///     clickhouse -q 'select 1' # use local\n     ///     clickhouse # spawn local\n     ///     clickhouse local # spawn local\n+    ///     clickhouse \"select ...\" # spawn local\n     ///\n-    if (main_func == printHelp && !argv.empty() && (argv.size() == 1 || argv[1][0] == '-'))\n+    if (main_func == printHelp && !argv.empty() && (argv.size() == 1 || argv[1][0] == '-'\n+        || std::string_view(argv[1]).contains(' ')))\n+    {\n         main_func = mainEntryClickHouseLocal;\n+    }\n \n     int exit_code = main_func(static_cast<int>(argv.size()), argv.data());\n \ndiff --git a/src/Client/ClientBase.cpp b/src/Client/ClientBase.cpp\nindex bd4430648c58..46887d6cefed 100644\n--- a/src/Client/ClientBase.cpp\n+++ b/src/Client/ClientBase.cpp\n@@ -2909,8 +2909,29 @@ void ClientBase::parseAndCheckOptions(OptionsDescription & options_description,\n     }\n \n     /// Check positional options.\n-    if (std::ranges::count_if(parsed.options, [](const auto & op){ return !op.unregistered && op.string_key.empty() && !op.original_tokens[0].starts_with(\"--\"); }) > 1)\n-        throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Positional options are not supported.\");\n+    for (const auto & op : parsed.options)\n+    {\n+        if (!op.unregistered && op.string_key.empty() && !op.original_tokens[0].starts_with(\"--\")\n+            && !op.original_tokens[0].empty() && !op.value.empty())\n+        {\n+            /// Two special cases for better usability:\n+            /// - if the option contains a whitespace, it might be a query: clickhouse \"SELECT 1\"\n+            /// These are relevant for interactive usage - user-friendly, but questionable in general.\n+            /// In case of ambiguity or for scripts, prefer using proper options.\n+\n+            const auto & token = op.original_tokens[0];\n+            po::variable_value value(boost::any(op.value), false);\n+\n+            const char * option;\n+            if (token.contains(' '))\n+                option = \"query\";\n+            else\n+                throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Positional option `{}` is not supported.\", token);\n+\n+            if (!options.emplace(option, value).second)\n+                throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Positional option `{}` is not supported.\", token);\n+        }\n+    }\n \n     po::store(parsed, options);\n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02751_multiquery_with_argument.reference b/tests/queries/0_stateless/02751_multiquery_with_argument.reference\nindex 843fffb476ce..4b0c199ed350 100644\n--- a/tests/queries/0_stateless/02751_multiquery_with_argument.reference\n+++ b/tests/queries/0_stateless/02751_multiquery_with_argument.reference\n@@ -7,9 +7,10 @@ Empty query\n Empty query\n BAD_ARGUMENTS\n BAD_ARGUMENTS\n-BAD_ARGUMENTS\n-BAD_ARGUMENTS\n-BAD_ARGUMENTS\n+301\n+302\n+304\n+305\n Bad arguments\n Bad arguments\n Bad arguments\n@@ -17,7 +18,8 @@ Bad arguments\n Bad arguments\n Bad arguments\n Bad arguments\n-BAD_ARGUMENTS\n-BAD_ARGUMENTS\n+Bad arguments\n+320\n+317\n Bad arguments\n Bad arguments\ndiff --git a/tests/queries/0_stateless/02751_multiquery_with_argument.sh b/tests/queries/0_stateless/02751_multiquery_with_argument.sh\nindex d742cc0ad90e..fea2978c1167 100755\n--- a/tests/queries/0_stateless/02751_multiquery_with_argument.sh\n+++ b/tests/queries/0_stateless/02751_multiquery_with_argument.sh\n@@ -18,10 +18,10 @@ $CLICKHOUSE_LOCAL --queries-file \"queries.csv\" --multiquery \"SELECT 250;\" 2>&1 |\n $CLICKHOUSE_CLIENT --queries-file \"queries.csv\" --multiquery \"SELECT 251;\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n \n # Error expectation cases.\n-# -n <SQL> is prohibited\n-$CLICKHOUSE_LOCAL -n \"SELECT 301\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n-$CLICKHOUSE_LOCAL -n \"SELECT 302;\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n-$CLICKHOUSE_LOCAL -n \"SELECT 304;SELECT 305;\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+# -n <SQL> is also interpreted as a query\n+$CLICKHOUSE_LOCAL -n \"SELECT 301\"\n+$CLICKHOUSE_LOCAL -n \"SELECT 302;\"\n+$CLICKHOUSE_LOCAL -n \"SELECT 304;SELECT 305;\"\n $CLICKHOUSE_LOCAL --multiquery --multiquery 2>&1 | grep -o 'Bad arguments'\n $CLICKHOUSE_LOCAL -n --multiquery 2>&1 | grep -o 'Bad arguments'\n $CLICKHOUSE_LOCAL --multiquery -n 2>&1 | grep -o 'Bad arguments'\n@@ -29,7 +29,7 @@ $CLICKHOUSE_LOCAL --multiquery --multiquery \"SELECT 306; SELECT 307;\" 2>&1 | gre\n $CLICKHOUSE_LOCAL -n --multiquery \"SELECT 307; SELECT 308;\" 2>&1 | grep -o 'Bad arguments'\n $CLICKHOUSE_LOCAL --multiquery \"SELECT 309; SELECT 310;\" --multiquery  2>&1 | grep -o 'Bad arguments'\n $CLICKHOUSE_LOCAL --multiquery \"SELECT 311;\" --multiquery \"SELECT 312;\" 2>&1 | grep -o 'Bad arguments'\n-$CLICKHOUSE_LOCAL --multiquery \"SELECT 313;\" -n \"SELECT 314;\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n-$CLICKHOUSE_LOCAL -n \"SELECT 320\" --query \"SELECT 317;\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+$CLICKHOUSE_LOCAL --multiquery \"SELECT 313;\" -n \"SELECT 314;\" 2>&1 | grep -o 'Bad arguments'\n+$CLICKHOUSE_LOCAL -n \"SELECT 320\" --query \"SELECT 317;\"\n $CLICKHOUSE_LOCAL --query -n \"SELECT 400;\" 2>&1 | grep -o 'Bad arguments'\n $CLICKHOUSE_LOCAL --query -n --multiquery \"SELECT 401;\" 2>&1 | grep -o 'Bad arguments'\ndiff --git a/tests/queries/0_stateless/02784_connection_string.reference b/tests/queries/0_stateless/02784_connection_string.reference\nindex 9d58d485a14b..2f4e5efa53fd 100644\n--- a/tests/queries/0_stateless/02784_connection_string.reference\n+++ b/tests/queries/0_stateless/02784_connection_string.reference\n@@ -101,7 +101,7 @@ BAD_ARGUMENTS\n BAD_ARGUMENTS\n BAD_ARGUMENTS\n BAD_ARGUMENTS\n-BAD_ARGUMENTS\n+SYNTAX_ERROR\n BAD_ARGUMENTS\n BAD_ARGUMENTS\n BAD_ARGUMENTS\ndiff --git a/tests/queries/0_stateless/02784_connection_string.sh b/tests/queries/0_stateless/02784_connection_string.sh\nindex 8353ac5b1e40..3519a0debdf5 100755\n--- a/tests/queries/0_stateless/02784_connection_string.sh\n+++ b/tests/queries/0_stateless/02784_connection_string.sh\n@@ -10,13 +10,13 @@ DATABASES=(\"$CLICKHOUSE_DATABASE\" \"\")\n \n TEST_INDEX=0\n \n-function runClient() \n+function runClient()\n {\n     $CLICKHOUSE_CLIENT_BINARY \"$@\" -q \"SELECT $TEST_INDEX\" --log_comment 02766_connection_string.sh --send_logs_level=warning\n     ((++TEST_INDEX))\n }\n \n-function testConnectionString() \n+function testConnectionString()\n {\n     if [ \"$database\" == \"\" ]; then\n         runClient \"clickhouse:$1\"\n@@ -26,7 +26,7 @@ function testConnectionString()\n     fi\n }\n \n-function testConnectionWithUserName() \n+function testConnectionWithUserName()\n {\n if [ \"$user_info\" == \"\" ] && [ \"$host_port\" == \"\" ]; then\n         testConnectionString \"//\"\n@@ -53,9 +53,9 @@ TEST_USER_NAME=\"test_user_02771_$$\"\n TEST_USER_EMAIL_NAME=\"test_user_02771_$$@some_mail.com\"\n TEST_USER_EMAIL_NAME_ENCODED=\"test_user_02771_$$%40some_mail.com\"\n \n-TEST_USER_PASSWORD=\"zyx%$&abc\" \n+TEST_USER_PASSWORD=\"zyx%$&abc\"\n # %, $, & percent encoded\n-TEST_USER_PASSWORD_ENCODED=\"zyx%25%24%26abc\" \n+TEST_USER_PASSWORD_ENCODED=\"zyx%25%24%26abc\"\n \n $CLICKHOUSE_CLIENT -q \"CREATE USER '$TEST_USER_NAME'\"\n $CLICKHOUSE_CLIENT -q \"CREATE USER '$TEST_USER_EMAIL_NAME' IDENTIFIED WITH plaintext_password BY '$TEST_USER_PASSWORD'\"\n@@ -66,14 +66,14 @@ runClient \"clickhouse://$TEST_USER_EMAIL_NAME_ENCODED:$TEST_USER_PASSWORD_ENCODE\n $CLICKHOUSE_CLIENT -q \"DROP USER '$TEST_USER_NAME'\"\n $CLICKHOUSE_CLIENT -q \"DROP USER '$TEST_USER_EMAIL_NAME'\"\n \n-# Percent-encoded database in non-ascii symbols \n+# Percent-encoded database in non-ascii symbols\n UTF8_DATABASE=\"\u0411\u0430\u0437\u0430\u0414\u0430\u043d\u043d\u044b\u0445_$$\"\n UTF8_DATABASE_PERCENT_ENCODED=\"%D0%91%D0%B0%D0%B7%D0%B0%D0%94%D0%B0%D0%BD%D0%BD%D1%8B%D1%85_$$\"\n $CLICKHOUSE_CLIENT -q \"CREATE DATABASE IF NOT EXISTS \\`$UTF8_DATABASE\\`\"\n runClient \"clickhouse://default@$CLICKHOUSE_HOST/$UTF8_DATABASE_PERCENT_ENCODED\"\n $CLICKHOUSE_CLIENT -q \"DROP DATABASE IF EXISTS \\`$UTF8_DATABASE\\`\"\n \n-# clickhouse-client extra options cases \n+# clickhouse-client extra options cases\n TEST_INDEX=1000\n \n runClient \"clickhouse://$CLICKHOUSE_HOST/\" --user 'default'\n@@ -114,13 +114,13 @@ runClient \"clickhouse://\" --port \"$CLICKHOUSE_PORT_TCP\" --host \"$CLICKHOUSE_HOST\n runClient \"clickhouse:///\" --port \"$CLICKHOUSE_PORT_TCP\" --host \"$CLICKHOUSE_HOST\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n runClient \"clickhouse:///?\" --port \"$CLICKHOUSE_PORT_TCP\" --host \"$CLICKHOUSE_HOST\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n runClient \"clickhouse://:/?\" --port \"$CLICKHOUSE_PORT_TCP\" --host \"$CLICKHOUSE_HOST\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n-runClient \"clickhouse:\" --database \"$CLICKHOUSE_DATABASE\" --port \"$CLICKHOUSE_PORT_TCP\" --host \"$CLICKHOUSE_HOST\" 2>&1 | grep -o 'BAD_ARGUMENTS' \n+runClient \"clickhouse:\" --database \"$CLICKHOUSE_DATABASE\" --port \"$CLICKHOUSE_PORT_TCP\" --host \"$CLICKHOUSE_HOST\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n \n # Using clickhouse-client and connection is prohibited\n runClient \"clickhouse:\" --connection \"connection\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n \n # Space is used in connection string (This is prohibited).\n-runClient \" clickhouse:\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+runClient \" clickhouse:\" 2>&1 | grep -o 'SYNTAX_ERROR'\n runClient \"clickhouse: \" 2>&1 | grep -o 'BAD_ARGUMENTS'\n runClient \"clickhouse://host1 /\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n runClient \"clickhouse://host1, host2/\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n@@ -151,7 +151,7 @@ runClient \"clickhouse://user1@localhost,default@localhost/\" 2>&1 | grep -o 'BAD_\n # Using '@' in user name is prohibited. User name should be percent-encoded.\n runClient \"clickhouse://my_mail@email.com@host/\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n \n-# Wrong input cases \n+# Wrong input cases\n TEST_INDEX=100000\n # Invalid user name\n runClient \"clickhouse://non_exist_user@$CLICKHOUSE_HOST:$CLICKHOUSE_PORT_TCP/\" 2>&1 | grep -o 'Authentication failed'\ndiff --git a/tests/queries/0_stateless/03134_positional_arguments.reference b/tests/queries/0_stateless/03134_positional_arguments.reference\nnew file mode 100644\nindex 000000000000..f1cd5725b243\n--- /dev/null\n+++ b/tests/queries/0_stateless/03134_positional_arguments.reference\n@@ -0,0 +1,16 @@\n+1\n+2\n+3\n+Hello\n+1\n+2\n+is not supported\n+Use one of the following commands\n+1\n+2\n+3\n+Hello\n+1\n+2\n+3\n+Hello\ndiff --git a/tests/queries/0_stateless/03134_positional_arguments.sh b/tests/queries/0_stateless/03134_positional_arguments.sh\nnew file mode 100755\nindex 000000000000..437c8226010f\n--- /dev/null\n+++ b/tests/queries/0_stateless/03134_positional_arguments.sh\n@@ -0,0 +1,39 @@\n+#!/usr/bin/env bash\n+\n+# Checks that \"clickhouse-client/local --help\" prints a brief summary of CLI arguments and \"--help --verbose\" prints all possible CLI arguments\n+CUR_DIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CUR_DIR\"/../shell_config.sh\n+\n+# The best way to write the query parameter, explicit long option.\n+${CLICKHOUSE_BINARY} --query \"SELECT 1\"\n+\n+# Shorthand option:\n+${CLICKHOUSE_BINARY} -q \"SELECT 2\"\n+\n+# It is also accepted as a positional argument\n+${CLICKHOUSE_BINARY} \"SELECT 3\"\n+\n+# The positional argument can go after normal arguments.\n+${CLICKHOUSE_BINARY} --param_test Hello \"SELECT {test:String}\"\n+\n+# This is ambiguous: currently works, but does not have to.\n+${CLICKHOUSE_BINARY} --query \"SELECT 1\" \"SELECT 2\"\n+\n+# Multiple positional arguments are not allowed.\n+${CLICKHOUSE_BINARY} \"SELECT 1\" \"SELECT 2\" 2>&1 | grep -o -F 'is not supported'\n+\n+# This is ambiguous - in case of a single word, it can be confused with a tool name.\n+${CLICKHOUSE_BINARY} \"SELECT\" 2>&1 | grep -o -F 'Use one of the following commands'\n+\n+# Everything works with clickhouse/ch/chl and also in clickhouse-local and clickhouse-client.\n+\n+${CLICKHOUSE_LOCAL} --query \"SELECT 1\"\n+${CLICKHOUSE_LOCAL} -q \"SELECT 2\"\n+${CLICKHOUSE_LOCAL} \"SELECT 3\"\n+${CLICKHOUSE_LOCAL} --param_test Hello \"SELECT {test:String}\"\n+\n+${CLICKHOUSE_CLIENT_BINARY} --query \"SELECT 1\"\n+${CLICKHOUSE_CLIENT_BINARY} -q \"SELECT 2\"\n+${CLICKHOUSE_CLIENT_BINARY} \"SELECT 3\"\n+${CLICKHOUSE_CLIENT_BINARY} --param_test Hello \"SELECT {test:String}\"\n",
  "problem_statement": "Idea: allow `clickhouse-local \"SELECT 1\"`\nIf there is no `--query`, `--queries-file` or similar arguments and there is a single positional argument, and this positional argument contains at least one whitespace character, treat it in the same way as the value of the `--query` argument.\n",
  "hints_text": "",
  "created_at": "2024-04-28T02:41:49Z",
  "modified_files": [
    "programs/main.cpp",
    "src/Client/ClientBase.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/02751_multiquery_with_argument.reference",
    "tests/queries/0_stateless/02751_multiquery_with_argument.sh",
    "tests/queries/0_stateless/02784_connection_string.reference",
    "tests/queries/0_stateless/02784_connection_string.sh",
    "b/tests/queries/0_stateless/03134_positional_arguments.reference",
    "b/tests/queries/0_stateless/03134_positional_arguments.sh"
  ]
}