diff --git a/tests/integration/test_compression_nested_columns/__init__.py b/tests/integration/test_compression_nested_columns/__init__.py
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/integration/test_compression_nested_columns/test.py b/tests/integration/test_compression_nested_columns/test.py
new file mode 100644
index 000000000000..f73adadd7703
--- /dev/null
+++ b/tests/integration/test_compression_nested_columns/test.py
@@ -0,0 +1,68 @@
+import random
+import string
+
+import pytest
+from helpers.cluster import ClickHouseCluster
+
+cluster = ClickHouseCluster(__file__)
+
+node1 = cluster.add_instance('node1', with_zookeeper=True)
+node2 = cluster.add_instance('node2', with_zookeeper=True)
+
+
+@pytest.fixture(scope="module")
+def start_cluster():
+    try:
+        cluster.start()
+
+        yield cluster
+    finally:
+        cluster.shutdown()
+
+def get_compression_codec_byte(node, table_name, part_name, filename):
+    cmd = "tail -c +17 /var/lib/clickhouse/data/default/{}/{}/{}.bin | od -x -N 1 | head -n 1 | awk '{{print $2}}'".format(
+        table_name, part_name, filename)
+    return node.exec_in_container(["bash", "-c", cmd]).strip()
+
+CODECS_MAPPING = {
+    'NONE' : '0002',
+    'LZ4': '0082',
+    'LZ4HC': '0082',  # not an error, same byte
+    'ZSTD': '0090',
+    'Multiple': '0091',
+    'Delta': '0092',
+    'T64': '0093',
+}
+
+def test_nested_compression_codec(start_cluster):
+    for i, node in enumerate([node1, node2]):
+        node.query("""
+        CREATE TABLE compression_table (
+            key UInt64,
+            column_ok Nullable(UInt64) CODEC(Delta, LZ4),
+            column_array Array(Array(UInt64)) CODEC(T64, LZ4),
+            column_bad LowCardinality(Int64) CODEC(Delta)
+        ) ENGINE = ReplicatedMergeTree('/t', '{}') ORDER BY tuple() PARTITION BY key
+        SETTINGS min_rows_for_wide_part = 0, min_bytes_for_wide_part = 0;
+        """.format(i), settings={"allow_suspicious_codecs" : "1", "allow_suspicious_low_cardinality_types" : "1"})
+
+    node1.query("INSERT INTO compression_table VALUES (1, 1, [[77]], 32)")
+
+    node2.query("SYSTEM SYNC REPLICA compression_table", timeout=5)
+
+    node1.query("DETACH TABLE compression_table")
+    node2.query("DETACH TABLE compression_table")
+
+    node1.query("ATTACH TABLE compression_table")
+    node2.query("ATTACH TABLE compression_table")
+
+    for node in [node1, node2]:
+        assert get_compression_codec_byte(node, "compression_table", "1_0_0_0", "column_ok") == CODECS_MAPPING['Multiple']
+        assert get_compression_codec_byte(node, "compression_table", "1_0_0_0", "column_ok.null") == CODECS_MAPPING['LZ4']
+
+        assert get_compression_codec_byte(node1, "compression_table", "1_0_0_0", "column_array") == CODECS_MAPPING['Multiple']
+        assert get_compression_codec_byte(node2, "compression_table", "1_0_0_0", "column_array.size0") == CODECS_MAPPING['LZ4']
+        assert get_compression_codec_byte(node2, "compression_table", "1_0_0_0", "column_array.size1") == CODECS_MAPPING['LZ4']
+
+        assert get_compression_codec_byte(node2, "compression_table", "1_0_0_0", "column_bad.dict") == CODECS_MAPPING['Delta']
+        assert get_compression_codec_byte(node1, "compression_table", "1_0_0_0", "column_bad") == CODECS_MAPPING['NONE']
diff --git a/tests/queries/0_stateless/01380_coded_delta_exception_code.sql b/tests/queries/0_stateless/01380_coded_delta_exception_code.sql
index fc679e30e3f9..587fac958cd7 100644
--- a/tests/queries/0_stateless/01380_coded_delta_exception_code.sql
+++ b/tests/queries/0_stateless/01380_coded_delta_exception_code.sql
@@ -1,7 +1,3 @@
-CREATE TABLE delta_codec_synthetic (`id` UInt64 NULL CODEC(Delta, ZSTD(22))) ENGINE = MergeTree() ORDER BY tuple(); -- { serverError 36 }
-CREATE TABLE delta_codec_synthetic (`id` UInt64 NULL CODEC(DoubleDelta, ZSTD(22))) ENGINE = MergeTree() ORDER BY tuple(); -- { serverError 36 }
-CREATE TABLE delta_codec_synthetic (`id` UInt64 NULL CODEC(Gorilla, ZSTD(22))) ENGINE = MergeTree() ORDER BY tuple(); -- { serverError 36 }
-
 CREATE TABLE delta_codec_synthetic (`id` Decimal(38, 10) CODEC(Delta, ZSTD(22))) ENGINE = MergeTree() ORDER BY tuple(); -- { serverError 36 }
 CREATE TABLE delta_codec_synthetic (`id` Decimal(38, 10) CODEC(DoubleDelta, ZSTD(22))) ENGINE = MergeTree() ORDER BY tuple(); -- { serverError 36 }
 CREATE TABLE delta_codec_synthetic (`id` Decimal(38, 10) CODEC(Gorilla, ZSTD(22))) ENGINE = MergeTree() ORDER BY tuple(); -- { serverError 36 }
diff --git a/tests/queries/0_stateless/01504_compression_multiple_streams.reference b/tests/queries/0_stateless/01504_compression_multiple_streams.reference
new file mode 100644
index 000000000000..4d3aba665267
--- /dev/null
+++ b/tests/queries/0_stateless/01504_compression_multiple_streams.reference
@@ -0,0 +1,23 @@
+1	1	[[1]]	(1,[1])
+1	1	[[1]]	(1,[1])
+CREATE TABLE default.columns_with_multiple_streams
(
    `field0` Nullable(Int64) CODEC(Delta(2), LZ4),
    `field1` Nullable(UInt8) CODEC(Delta(8), LZ4),
    `field2` Array(Array(Int64)) CODEC(Delta(8), LZ4),
    `field3` Tuple(UInt32, Array(UInt64)) CODEC(T64, Default)
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS min_rows_for_wide_part = 0, min_bytes_for_wide_part = 0, index_granularity = 8192
+1	1	[[1]]	(1,[1])
+2	2	[[2]]	(2,[2])
+CREATE TABLE default.columns_with_multiple_streams
(
    `field0` Nullable(Int64) CODEC(Delta(2), LZ4),
    `field1` Nullable(UInt8) CODEC(Delta(8), LZ4),
    `field2` Array(Array(Int64)) CODEC(Delta(8), LZ4),
    `field3` Tuple(UInt32, Array(UInt64)) CODEC(Delta, Default)
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS min_rows_for_wide_part = 0, min_bytes_for_wide_part = 0, index_granularity = 8192
+1	1	[[1]]	(1,[1])
+2	2	[[2]]	(2,[2])
+3	3	[[3]]	(3,[3])
+1	1	[[1]]	(1,[1])
+1	1	[[1]]	(1,[1])
+CREATE TABLE default.columns_with_multiple_streams_compact
(
    `field0` Nullable(Int64) CODEC(Delta(2), LZ4),
    `field1` Nullable(UInt8) CODEC(Delta(8), LZ4),
    `field2` Array(Array(Int64)) CODEC(Delta(8), LZ4),
    `field3` Tuple(UInt32, Array(UInt64)) CODEC(Delta, Default)
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS min_rows_for_wide_part = 100000, min_bytes_for_wide_part = 100000, index_granularity = 8192
+1	1	[[1]]	(1,[1])
+2	2	[[2]]	(2,[2])
+1	1	[[1]]	(1,[1])
+2	2	[[2]]	(2,[2])
+CREATE TABLE default.columns_with_multiple_streams_compact
(
    `field0` Nullable(Int64) CODEC(Delta(2), LZ4),
    `field1` Nullable(UInt8) CODEC(Delta(8), LZ4),
    `field2` Array(Array(Int64)) CODEC(Delta(8), LZ4),
    `field3` Tuple(UInt32, Array(UInt64)) CODEC(Delta, Default)
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS min_rows_for_wide_part = 100000, min_bytes_for_wide_part = 100000, index_granularity = 8192
+1	1	[[1]]	(1,[1])
+2	2	[[2]]	(2,[2])
+3	3	[[3]]	(3,[3])
+1
+2
+3
diff --git a/tests/queries/0_stateless/01504_compression_multiple_streams.sql b/tests/queries/0_stateless/01504_compression_multiple_streams.sql
new file mode 100644
index 000000000000..7cdf1b526511
--- /dev/null
+++ b/tests/queries/0_stateless/01504_compression_multiple_streams.sql
@@ -0,0 +1,116 @@
+DROP TABLE IF EXISTS columns_with_multiple_streams;
+
+SET mutations_sync = 2;
+
+CREATE TABLE columns_with_multiple_streams (
+  field0 Nullable(Int64) CODEC(Delta(2), LZ4),
+  field1 Nullable(Int64) CODEC(Delta, LZ4),
+  field2 Array(Array(Int64)) CODEC(Delta, LZ4),
+  field3 Tuple(UInt32, Array(UInt64)) CODEC(T64, Default)
+)
+ENGINE = MergeTree
+ORDER BY tuple()
+SETTINGS min_rows_for_wide_part = 0, min_bytes_for_wide_part = 0;
+
+INSERT INTO columns_with_multiple_streams VALUES(1, 1, [[1]], tuple(1, [1]));
+
+SELECT * FROM columns_with_multiple_streams;
+
+DETACH TABLE columns_with_multiple_streams;
+ATTACH TABLE columns_with_multiple_streams;
+
+SELECT * FROM columns_with_multiple_streams;
+
+ALTER TABLE columns_with_multiple_streams MODIFY COLUMN field1 Nullable(UInt8);
+
+INSERT INTO columns_with_multiple_streams VALUES(2, 2, [[2]], tuple(2, [2]));
+
+SHOW CREATE TABLE columns_with_multiple_streams;
+
+SELECT * FROM columns_with_multiple_streams ORDER BY field0;
+
+ALTER TABLE columns_with_multiple_streams MODIFY COLUMN field3 CODEC(Delta, Default);
+
+SHOW CREATE TABLE columns_with_multiple_streams;
+
+INSERT INTO columns_with_multiple_streams VALUES(3, 3, [[3]], tuple(3, [3]));
+
+OPTIMIZE TABLE columns_with_multiple_streams FINAL;
+
+SELECT * FROM columns_with_multiple_streams ORDER BY field0;
+
+DROP TABLE IF EXISTS columns_with_multiple_streams;
+
+DROP TABLE IF EXISTS columns_with_multiple_streams_compact;
+
+CREATE TABLE columns_with_multiple_streams_compact (
+  field0 Nullable(Int64) CODEC(Delta(2), LZ4),
+  field1 Nullable(Int64) CODEC(Delta, LZ4),
+  field2 Array(Array(Int64)) CODEC(Delta, LZ4),
+  field3 Tuple(UInt32, Array(UInt64)) CODEC(Delta, Default)
+)
+ENGINE = MergeTree
+ORDER BY tuple()
+SETTINGS min_rows_for_wide_part = 100000, min_bytes_for_wide_part = 100000;
+
+INSERT INTO columns_with_multiple_streams_compact VALUES(1, 1, [[1]], tuple(1, [1]));
+
+SELECT * FROM columns_with_multiple_streams_compact;
+
+DETACH TABLE columns_with_multiple_streams_compact;
+ATTACH TABLE columns_with_multiple_streams_compact;
+
+SELECT * FROM columns_with_multiple_streams_compact;
+
+ALTER TABLE columns_with_multiple_streams_compact MODIFY COLUMN field1 Nullable(UInt8);
+
+INSERT INTO columns_with_multiple_streams_compact VALUES(2, 2, [[2]], tuple(2, [2]));
+
+SHOW CREATE TABLE columns_with_multiple_streams_compact;
+
+SELECT * FROM columns_with_multiple_streams_compact ORDER BY field0;
+
+ALTER TABLE columns_with_multiple_streams_compact MODIFY COLUMN field3 CODEC(Delta, Default);
+
+SELECT * FROM columns_with_multiple_streams_compact ORDER BY field0;
+
+SHOW CREATE TABLE columns_with_multiple_streams_compact;
+
+INSERT INTO columns_with_multiple_streams_compact VALUES(3, 3, [[3]], tuple(3, [3]));
+
+SELECT * FROM columns_with_multiple_streams_compact ORDER BY field0;
+
+DROP TABLE IF EXISTS columns_with_multiple_streams_compact;
+
+DROP TABLE IF EXISTS columns_with_multiple_streams_bad_case;
+
+-- validation still works, non-sense codecs checked
+CREATE TABLE columns_with_multiple_streams_bad_case (
+  field0 Nullable(String) CODEC(Delta, LZ4)
+)
+ENGINE = MergeTree
+ORDER BY tuple(); --{serverError 36}
+
+CREATE TABLE columns_with_multiple_streams_bad_case (
+  field0 Tuple(Array(UInt64), String) CODEC(T64, LZ4)
+)
+ENGINE = MergeTree
+ORDER BY tuple(); --{serverError 431}
+
+SET allow_suspicious_codecs = 1;
+
+CREATE TABLE columns_with_multiple_streams_bad_case (
+  field0 Nullable(UInt64) CODEC(Delta)
+)
+ENGINE = MergeTree
+ORDER BY tuple();
+
+INSERT INTO columns_with_multiple_streams_bad_case VALUES(1), (2);
+
+INSERT INTO columns_with_multiple_streams_bad_case VALUES(3);
+
+OPTIMIZE TABLE columns_with_multiple_streams_bad_case FINAL;
+
+SELECT * FROM columns_with_multiple_streams_bad_case ORDER BY field0;
+
+DROP TABLE IF EXISTS columns_with_multiple_streams_bad_case;
