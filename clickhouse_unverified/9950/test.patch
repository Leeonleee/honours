diff --git a/tests/integration/test_row_policy/test.py b/tests/integration/test_row_policy/test.py
index 3a5b73405284..75c75e3b20ab 100644
--- a/tests/integration/test_row_policy/test.py
+++ b/tests/integration/test_row_policy/test.py
@@ -102,8 +102,8 @@ def test_join():
 
 def test_cannot_trick_row_policy_with_keyword_with():
     assert instance.query("WITH 0 AS a SELECT * FROM mydb.filtered_table1") == "1\t0
1\t1
"
-    assert instance.query("WITH 0 AS a SELECT a, b FROM mydb.filtered_table1") == "1\t0
1\t1
"
-    assert instance.query("WITH 0 AS a SELECT a FROM mydb.filtered_table1") == "1
1
"
+    assert instance.query("WITH 0 AS a SELECT a, b FROM mydb.filtered_table1") == "0\t0
0\t1
"
+    assert instance.query("WITH 0 AS a SELECT a FROM mydb.filtered_table1") == "0
0
"
     assert instance.query("WITH 0 AS a SELECT b FROM mydb.filtered_table1") == "0
1
"
 
 
diff --git a/tests/queries/0_stateless/01101_literal_column_clash.reference b/tests/queries/0_stateless/01101_literal_column_clash.reference
new file mode 100644
index 000000000000..47458541f793
--- /dev/null
+++ b/tests/queries/0_stateless/01101_literal_column_clash.reference
@@ -0,0 +1,14 @@
+1
+7	3
+7	0
+7	1
+xyzabc	2
+1	3
+1	2	0	0
+1	0	0	3
+\N	1	2	\N	0
+\N	1	0	\N	3
+1
+1
+1	hello\0\0\0
+1	hello\0\0\0
diff --git a/tests/queries/0_stateless/01101_literal_column_clash.sql b/tests/queries/0_stateless/01101_literal_column_clash.sql
new file mode 100644
index 000000000000..2c665d3833b1
--- /dev/null
+++ b/tests/queries/0_stateless/01101_literal_column_clash.sql
@@ -0,0 +1,23 @@
+-- https://github.com/ClickHouse/ClickHouse/issues/9810
+select cast(1 as String)
+from (select 1 as iid) as t1
+join (select '1' as sid) as t2 on t2.sid = cast(t1.iid as String);
+
+-- even simpler cases
+select cast(7 as String), * from (select 3 "'String'");
+select cast(7 as String), * from (select number "'String'" FROM numbers(2));
+SELECT concat('xyz', 'abc'), * FROM (SELECT 2 AS "'xyz'");
+with 3 as "1" select 1, "1";
+
+-- https://github.com/ClickHouse/ClickHouse/issues/9953
+select 1, * from (select 2 x) a left join (select 1, 3 y) b on y = x;
+select 1, * from (select 2 x, 1) a right join (select 3 y) b on y = x;
+select null, isConstant(null), * from (select 2 x) a left join (select null, 3 y) b on y = x;
+select null, isConstant(null), * from (select 2 x, null) a right join (select 3 y) b on y = x;
+
+-- other cases with joins and constants
+
+select cast(1, 'UInt8') from (select arrayJoin([1, 2]) as a) t1 left join (select 1 as b) t2 on b = ignore('UInt8');
+
+select isConstant('UInt8'), toFixedString('hello', toUInt8(substring('UInt8', 5, 1))) from (select arrayJoin([1, 2]) as a) t1 left join (select 1 as b) t2 on b = ignore('UInt8');
+
diff --git a/tests/queries/bugs/join_constants_on.sql b/tests/queries/bugs/join_constants_on.sql
deleted file mode 100644
index ae967e07adbb..000000000000
--- a/tests/queries/bugs/join_constants_on.sql
+++ /dev/null
@@ -1,2 +0,0 @@
-select cast(1, 'UInt8') from (select arrayJoin([1, 2]) as a) t1 left join (select 1 as b) t2 on b = ignore('UInt8');
-select isConstant('UInt8'), toFixedString('hello', toUInt8(substring('UInt8', 5, 1))) from (select arrayJoin([1, 2]) as a) t1 left join (select 1 as b) t2 on b = ignore('UInt8');
