{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 10219,
  "instance_id": "ClickHouse__ClickHouse-10219",
  "issue_numbers": [
    "9903"
  ],
  "base_commit": "6eed76d5fb3938ee38ebcb0c5f15e891b112b9ec",
  "patch": "diff --git a/base/common/DateLUTImpl.cpp b/base/common/DateLUTImpl.cpp\nindex d7ab00469925..a7ca21c984e7 100644\n--- a/base/common/DateLUTImpl.cpp\n+++ b/base/common/DateLUTImpl.cpp\n@@ -133,7 +133,10 @@ DateLUTImpl::DateLUTImpl(const std::string & time_zone_)\n     }\n \n     /// Fill lookup table for years and months.\n-    for (size_t day = 0; day < DATE_LUT_SIZE && lut[day].year <= DATE_LUT_MAX_YEAR; ++day)\n+    size_t year_months_lut_index = 0;\n+    size_t first_day_of_last_month = 0;\n+\n+    for (size_t day = 0; day < DATE_LUT_SIZE; ++day)\n     {\n         const Values & values = lut[day];\n \n@@ -141,7 +144,16 @@ DateLUTImpl::DateLUTImpl(const std::string & time_zone_)\n         {\n             if (values.month == 1)\n                 years_lut[values.year - DATE_LUT_MIN_YEAR] = day;\n-            years_months_lut[(values.year - DATE_LUT_MIN_YEAR) * 12 + values.month - 1] = day;\n+\n+            year_months_lut_index = (values.year - DATE_LUT_MIN_YEAR) * 12 + values.month - 1;\n+            years_months_lut[year_months_lut_index] = day;\n+            first_day_of_last_month = day;\n         }\n     }\n+\n+    /// Fill the rest of lookup table with the same last month (2106-02-01).\n+    for (; year_months_lut_index < DATE_LUT_YEARS * 12; ++year_months_lut_index)\n+    {\n+        years_months_lut[year_months_lut_index] = first_day_of_last_month;\n+    }\n }\ndiff --git a/base/common/DateLUTImpl.h b/base/common/DateLUTImpl.h\nindex d9d27c56ee37..ec32d62bcadd 100644\n--- a/base/common/DateLUTImpl.h\n+++ b/base/common/DateLUTImpl.h\n@@ -12,7 +12,7 @@\n /// Table size is bigger than DATE_LUT_MAX_DAY_NUM to fill all indices within UInt16 range: this allows to remove extra check.\n #define DATE_LUT_SIZE 0x10000\n #define DATE_LUT_MIN_YEAR 1970\n-#define DATE_LUT_MAX_YEAR 2105 /// Last supported year\n+#define DATE_LUT_MAX_YEAR 2106 /// Last supported year (incomplete)\n #define DATE_LUT_YEARS (1 + DATE_LUT_MAX_YEAR - DATE_LUT_MIN_YEAR) /// Number of years in lookup table\n \n #if defined(__PPC__)\ndiff --git a/docs/en/operations/settings/settings.md b/docs/en/operations/settings/settings.md\nindex 69c444ebaefe..37b4c713f91f 100644\n--- a/docs/en/operations/settings/settings.md\n+++ b/docs/en/operations/settings/settings.md\n@@ -507,6 +507,24 @@ Example:\n log_queries=1\n ```\n \n+## log\\_queries\\_min\\_type {#settings-log-queries-min-type}\n+\n+`query_log` minimal type to log.\n+\n+Possible values:\n+- `QUERY_START` (`=1`)\n+- `QUERY_FINISH` (`=2`)\n+- `EXCEPTION_BEFORE_START` (`=3`)\n+- `EXCEPTION_WHILE_PROCESSING` (`=4`)\n+\n+Default value: `QUERY_START`.\n+\n+Can be used to limit which entiries will goes to `query_log`, say you are interesting only in errors, then you can use `EXCEPTION_WHILE_PROCESSING`:\n+\n+``` text\n+log_queries_min_type='EXCEPTION_WHILE_PROCESSING'\n+```\n+\n ## log\\_query\\_threads {#settings-log-query-threads}\n \n Setting up query threads logging.\ndiff --git a/src/Core/Settings.h b/src/Core/Settings.h\nindex 8138af31d5fd..725171d4a1b9 100644\n--- a/src/Core/Settings.h\n+++ b/src/Core/Settings.h\n@@ -149,7 +149,7 @@ struct Settings : public SettingsCollection<Settings>\n     M(SettingInt64, os_thread_priority, 0, \"If non zero - set corresponding 'nice' value for query processing threads. Can be used to adjust query priority for OS scheduler.\", 0) \\\n     \\\n     M(SettingBool, log_queries, 0, \"Log requests and write the log to the system table.\", 0) \\\n-    \\\n+    M(SettingLogQueriesType, log_queries_min_type, QueryLogElementType::QUERY_START, \"query_log minimal type to log, possible values (from low to high): QUERY_START, QUERY_FINISH, EXCEPTION_BEFORE_START, EXCEPTION_WHILE_PROCESSING.\", 0) \\\n     M(SettingUInt64, log_queries_cut_to_length, 100000, \"If query length is greater than specified threshold (in bytes), then cut query when writing to query log. Also limit length of printed query in ordinary text log.\", 0) \\\n     \\\n     M(SettingDistributedProductMode, distributed_product_mode, DistributedProductMode::DENY, \"How are distributed subqueries performed inside IN or JOIN sections?\", IMPORTANT) \\\ndiff --git a/src/Core/SettingsCollection.cpp b/src/Core/SettingsCollection.cpp\nindex 6d879b27181a..238ac1c3c62c 100644\n--- a/src/Core/SettingsCollection.cpp\n+++ b/src/Core/SettingsCollection.cpp\n@@ -542,6 +542,13 @@ IMPLEMENT_SETTING_ENUM(FormatSettings::DateTimeInputFormat, DATE_TIME_INPUT_FORM\n     M(trace, \"trace\")\n IMPLEMENT_SETTING_ENUM(LogsLevel, LOGS_LEVEL_LIST_OF_NAMES, ErrorCodes::BAD_ARGUMENTS)\n \n+#define LOG_QUERIES_TYPE_LIST_OF_NAMES(M) \\\n+    M(QUERY_START, \"QUERY_START\") \\\n+    M(QUERY_FINISH, \"QUERY_FINISH\") \\\n+    M(EXCEPTION_BEFORE_START, \"EXCEPTION_BEFORE_START\") \\\n+    M(EXCEPTION_WHILE_PROCESSING, \"EXCEPTION_WHILE_PROCESSING\")\n+IMPLEMENT_SETTING_ENUM(QueryLogElementType, LOG_QUERIES_TYPE_LIST_OF_NAMES, ErrorCodes::BAD_ARGUMENTS)\n+\n \n namespace details\n {\ndiff --git a/src/Core/SettingsCollection.h b/src/Core/SettingsCollection.h\nindex da21412b7c1e..d93772e86edd 100644\n--- a/src/Core/SettingsCollection.h\n+++ b/src/Core/SettingsCollection.h\n@@ -298,6 +298,16 @@ enum class LogsLevel\n };\n using SettingLogsLevel = SettingEnum<LogsLevel>;\n \n+// Make it signed for compatibility with DataTypeEnum8\n+enum QueryLogElementType : int8_t\n+{\n+    QUERY_START = 1,\n+    QUERY_FINISH = 2,\n+    EXCEPTION_BEFORE_START = 3,\n+    EXCEPTION_WHILE_PROCESSING = 4,\n+};\n+using SettingLogQueriesType = SettingEnum<QueryLogElementType>;\n+\n \n enum class SettingsBinaryFormat\n {\ndiff --git a/src/Interpreters/QueryLog.h b/src/Interpreters/QueryLog.h\nindex 836b37095e9e..ec14f5e97fba 100644\n--- a/src/Interpreters/QueryLog.h\n+++ b/src/Interpreters/QueryLog.h\n@@ -1,6 +1,7 @@\n #pragma once\n \n #include <Interpreters/SystemLog.h>\n+#include <Core/SettingsCollection.h>\n \n \n namespace ProfileEvents\n@@ -22,13 +23,7 @@ namespace DB\n /// A struct which will be inserted as row into query_log table\n struct QueryLogElement\n {\n-    enum Type : int8_t // Make it signed for compatibility with DataTypeEnum8\n-    {\n-        QUERY_START = 1,\n-        QUERY_FINISH = 2,\n-        EXCEPTION_BEFORE_START = 3,\n-        EXCEPTION_WHILE_PROCESSING = 4,\n-    };\n+    using Type = QueryLogElementType;\n \n     Type type = QUERY_START;\n \ndiff --git a/src/Interpreters/executeQuery.cpp b/src/Interpreters/executeQuery.cpp\nindex c9c66832f085..68bebb836197 100644\n--- a/src/Interpreters/executeQuery.cpp\n+++ b/src/Interpreters/executeQuery.cpp\n@@ -157,7 +157,7 @@ static void onExceptionBeforeStart(const String & query_for_logging, Context & c\n     /// Log the start of query execution into the table if necessary.\n     QueryLogElement elem;\n \n-    elem.type = QueryLogElement::EXCEPTION_BEFORE_START;\n+    elem.type = QueryLogElementType::EXCEPTION_BEFORE_START;\n \n     elem.event_time = current_time;\n     elem.query_start_time = current_time;\n@@ -175,7 +175,7 @@ static void onExceptionBeforeStart(const String & query_for_logging, Context & c\n     /// Update performance counters before logging to query_log\n     CurrentThread::finalizePerformanceCounters();\n \n-    if (settings.log_queries)\n+    if (settings.log_queries && elem.type >= settings.log_queries_min_type)\n         if (auto query_log = context.getQueryLog())\n             query_log->add(elem);\n }\n@@ -400,7 +400,7 @@ static std::tuple<ASTPtr, BlockIO> executeQueryImpl(\n         {\n             QueryLogElement elem;\n \n-            elem.type = QueryLogElement::QUERY_START;\n+            elem.type = QueryLogElementType::QUERY_START;\n \n             elem.event_time = current_time;\n             elem.query_start_time = current_time;\n@@ -412,7 +412,7 @@ static std::tuple<ASTPtr, BlockIO> executeQueryImpl(\n             bool log_queries = settings.log_queries && !internal;\n \n             /// Log into system table start of query execution, if need.\n-            if (log_queries)\n+            if (log_queries && elem.type >= settings.log_queries_min_type)\n             {\n                 if (settings.log_query_settings)\n                     elem.query_settings = std::make_shared<Settings>(context.getSettingsRef());\n@@ -422,7 +422,7 @@ static std::tuple<ASTPtr, BlockIO> executeQueryImpl(\n             }\n \n             /// Also make possible for caller to log successful query finish and exception during execution.\n-            auto finish_callback = [elem, &context, log_queries] (IBlockInputStream * stream_in, IBlockOutputStream * stream_out) mutable\n+            auto finish_callback = [elem, &context, log_queries, log_queries_min_type = settings.log_queries_min_type] (IBlockInputStream * stream_in, IBlockOutputStream * stream_out) mutable\n             {\n                 QueryStatus * process_list_elem = context.getProcessListElement();\n \n@@ -436,7 +436,7 @@ static std::tuple<ASTPtr, BlockIO> executeQueryImpl(\n \n                 double elapsed_seconds = info.elapsed_seconds;\n \n-                elem.type = QueryLogElement::QUERY_FINISH;\n+                elem.type = QueryLogElementType::QUERY_FINISH;\n \n                 elem.event_time = time(nullptr);\n                 elem.query_duration_ms = elapsed_seconds * 1000;\n@@ -484,19 +484,19 @@ static std::tuple<ASTPtr, BlockIO> executeQueryImpl(\n                 elem.thread_ids = std::move(info.thread_ids);\n                 elem.profile_counters = std::move(info.profile_counters);\n \n-                if (log_queries)\n+                if (log_queries && elem.type >= log_queries_min_type)\n                 {\n                     if (auto query_log = context.getQueryLog())\n                         query_log->add(elem);\n                 }\n             };\n \n-            auto exception_callback = [elem, &context, log_queries, quota(quota)] () mutable\n+            auto exception_callback = [elem, &context, log_queries, log_queries_min_type = settings.log_queries_min_type, quota(quota)] () mutable\n             {\n                 if (quota)\n                     quota->used(Quota::ERRORS, 1, /* check_exceeded = */ false);\n \n-                elem.type = QueryLogElement::EXCEPTION_WHILE_PROCESSING;\n+                elem.type = QueryLogElementType::EXCEPTION_WHILE_PROCESSING;\n \n                 elem.event_time = time(nullptr);\n                 elem.query_duration_ms = 1000 * (elem.event_time - elem.query_start_time);\n@@ -529,7 +529,7 @@ static std::tuple<ASTPtr, BlockIO> executeQueryImpl(\n                 logException(context, elem);\n \n                 /// In case of exception we log internal queries also\n-                if (log_queries)\n+                if (log_queries && elem.type >= log_queries_min_type)\n                 {\n                     if (auto query_log = context.getQueryLog())\n                         query_log->add(elem);\ndiff --git a/src/Storages/MergeTree/MergeTreeDataWriter.cpp b/src/Storages/MergeTree/MergeTreeDataWriter.cpp\nindex 34c615994f09..23a60ddab783 100644\n--- a/src/Storages/MergeTree/MergeTreeDataWriter.cpp\n+++ b/src/Storages/MergeTree/MergeTreeDataWriter.cpp\n@@ -210,8 +210,8 @@ MergeTreeData::MutableDataPartPtr MergeTreeDataWriter::writeTempPart(BlockWithPa\n \n         const auto & date_lut = DateLUT::instance();\n \n-        DayNum min_month = date_lut.toFirstDayNumOfMonth(DayNum(min_date));\n-        DayNum max_month = date_lut.toFirstDayNumOfMonth(DayNum(max_date));\n+        auto min_month = date_lut.toNumYYYYMM(min_date);\n+        auto max_month = date_lut.toNumYYYYMM(max_date);\n \n         if (min_month != max_month)\n             throw Exception(\"Logical error: part spans more than one month.\", ErrorCodes::LOGICAL_ERROR);\ndiff --git a/src/Storages/MergeTree/MergeTreePartInfo.cpp b/src/Storages/MergeTree/MergeTreePartInfo.cpp\nindex 43bd9538e3ef..d30f6470bb13 100644\n--- a/src/Storages/MergeTree/MergeTreePartInfo.cpp\n+++ b/src/Storages/MergeTree/MergeTreePartInfo.cpp\n@@ -120,8 +120,8 @@ void MergeTreePartInfo::parseMinMaxDatesFromPartName(const String & part_name, D\n     min_date = date_lut.YYYYMMDDToDayNum(min_yyyymmdd);\n     max_date = date_lut.YYYYMMDDToDayNum(max_yyyymmdd);\n \n-    DayNum min_month = date_lut.toFirstDayNumOfMonth(min_date);\n-    DayNum max_month = date_lut.toFirstDayNumOfMonth(max_date);\n+    auto min_month = date_lut.toNumYYYYMM(min_date);\n+    auto max_month = date_lut.toNumYYYYMM(max_date);\n \n     if (min_month != max_month)\n         throw Exception(\"Part name \" + part_name + \" contains different months\", ErrorCodes::BAD_DATA_PART_NAME);\ndiff --git a/src/Storages/StorageGenerateRandom.cpp b/src/Storages/StorageGenerateRandom.cpp\nindex 1fd2d4ec2d87..70b84c076b74 100644\n--- a/src/Storages/StorageGenerateRandom.cpp\n+++ b/src/Storages/StorageGenerateRandom.cpp\n@@ -14,6 +14,7 @@\n #include <DataTypes/DataTypeArray.h>\n #include <DataTypes/DataTypeString.h>\n #include <DataTypes/DataTypeFixedString.h>\n+#include <DataTypes/NestedUtils.h>\n #include <Columns/ColumnArray.h>\n #include <Columns/ColumnFixedString.h>\n #include <Columns/ColumnString.h>\n@@ -57,7 +58,12 @@ void fillBufferWithRandomData(char * __restrict data, size_t size, pcg64 & rng)\n \n \n ColumnPtr fillColumnWithRandomData(\n-    const DataTypePtr type, UInt64 limit, UInt64 max_array_length, UInt64 max_string_length, pcg64 & rng, const Context & context)\n+    const DataTypePtr type,\n+    UInt64 limit,\n+    UInt64 max_array_length,\n+    UInt64 max_string_length,\n+    pcg64 & rng,\n+    const Context & context)\n {\n     TypeIndex idx = type->getTypeId();\n \n@@ -205,7 +211,10 @@ ColumnPtr fillColumnWithRandomData(\n         {\n             auto column = ColumnUInt16::create();\n             column->getData().resize(limit);\n-            fillBufferWithRandomData(reinterpret_cast<char *>(column->getData().data()), limit * sizeof(UInt16), rng);\n+\n+            for (size_t i = 0; i < limit; ++i)\n+                column->getData()[i] = rng() % (DATE_LUT_MAX_DAY_NUM + 1);   /// Slow\n+\n             return column;\n         }\n         case TypeIndex::UInt32: [[fallthrough]];\n@@ -337,14 +346,24 @@ class GenerateSource : public SourceWithProgress\n protected:\n     Chunk generate() override\n     {\n+        /// To support Nested types, we will collect them to single Array of Tuple.\n+        auto names_and_types = Nested::collect(block_header.getNamesAndTypesList());\n+\n         Columns columns;\n-        columns.reserve(block_header.columns());\n-        DataTypes types = block_header.getDataTypes();\n+        columns.reserve(names_and_types.size());\n \n-        for (const auto & type : types)\n-            columns.emplace_back(fillColumnWithRandomData(type, block_size, max_array_length, max_string_length, rng, context));\n+        Block compact_block;\n+        for (const auto & elem : names_and_types)\n+        {\n+            compact_block.insert(\n+            {\n+                fillColumnWithRandomData(elem.type, block_size, max_array_length, max_string_length, rng, context),\n+                elem.type,\n+                elem.name\n+            });\n+        }\n \n-        return {std::move(columns), block_size};\n+        return {Nested::flatten(compact_block).getColumns(), block_size};\n     }\n \n private:\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01087_table_function_generate.reference b/tests/queries/0_stateless/01087_table_function_generate.reference\nindex 68238faee48a..d7cc6b0a9335 100644\n--- a/tests/queries/0_stateless/01087_table_function_generate.reference\n+++ b/tests/queries/0_stateless/01087_table_function_generate.reference\n@@ -1,14 +1,14 @@\n UInt64\tInt64\tUInt32\tInt32\tUInt16\tInt16\tUInt8\tInt8\n-2804162938822577320\t-2776833771540858\t3467776823\t1163715250\t23903\t13655\t137\t-41\n-7885388429666205427\t-1363628932535403038\t484159052\t-308788249\t56810\t-22227\t51\t-41\n-4357435422797280898\t1355609803008819271\t4126129912\t-852056475\t64304\t-11401\t139\t86\n-5935810273536892891\t-804738887697332962\t3109335413\t-80126721\t258\t12889\t18\t88\n-368066018677693974\t-4927165984347126295\t1015254922\t2026080544\t44305\t21973\t16\t0\n-8124171311239967992\t-1179703908046100129\t1720727300\t-138469036\t61343\t10573\t252\t-32\n-15657812979985370729\t-5733276247123822513\t3254757884\t-500590428\t45913\t19153\t105\t-102\n-18371568619324220532\t-6793779541583578394\t1686821450\t-455892108\t49050\t-28603\t248\t80\n-821735343441964030\t3148260644406230976\t256251035\t-885069056\t58858\t-29361\t58\t61\n-9558594037060121162\t-2907172753635797124\t4276198376\t1947296644\t26801\t-13531\t204\t-66\n+2804162938822577320\t-2776833771540858\t3467776823\t1163715250\t31161\t-2916\t220\t-117\n+7885388429666205427\t-1363628932535403038\t484159052\t-308788249\t43346\t13638\t143\t-105\n+4357435422797280898\t1355609803008819271\t4126129912\t-852056475\t34184\t9166\t49\t33\n+5935810273536892891\t-804738887697332962\t3109335413\t-80126721\t47877\t-31421\t186\t-77\n+368066018677693974\t-4927165984347126295\t1015254922\t2026080544\t46037\t-29626\t240\t108\n+8124171311239967992\t-1179703908046100129\t1720727300\t-138469036\t33028\t-12819\t138\t16\n+15657812979985370729\t-5733276247123822513\t3254757884\t-500590428\t3829\t30527\t3\t-81\n+18371568619324220532\t-6793779541583578394\t1686821450\t-455892108\t43475\t2284\t252\t-90\n+821735343441964030\t3148260644406230976\t256251035\t-885069056\t11643\t11455\t176\t90\n+9558594037060121162\t-2907172753635797124\t4276198376\t1947296644\t45922\t26632\t97\t43\n -\n Enum8(\\'hello\\' = 1, \\'world\\' = 5)\n hello\n@@ -47,16 +47,16 @@ h\n o\n -\n Date\tDateTime\tDateTime(\\'Europe/Moscow\\')\n-2106-02-07\t2050-12-17 02:46:35\t2096-02-16 22:18:22\n-2106-02-07\t2013-10-17 23:35:26\t1976-01-24 12:52:48\n-2039-08-16\t1974-11-17 23:22:46\t1980-03-04 21:02:50\n-1997-04-11\t1972-09-18 23:44:08\t2040-07-10 14:46:42\n-2103-11-03\t2044-11-23 20:57:12\t1970-10-09 02:30:14\n-2066-11-19\t2029-12-10 03:13:55\t2106-01-30 21:52:44\n-2064-08-14\t2016-07-14 11:33:45\t2096-12-12 00:40:50\n-2046-09-13\t2085-07-10 18:51:14\t2096-01-15 16:31:33\n-2008-03-16\t2047-05-16 23:28:36\t2103-02-11 16:44:39\n-2000-07-07\t2105-07-19 19:29:06\t1980-01-02 05:18:22\n+2077-09-17\t1970-10-09 02:30:14\t2074-08-12 11:31:27\n+2005-11-19\t2106-01-30 21:52:44\t2097-05-25 07:54:35\n+2007-02-24\t2096-12-12 00:40:50\t1988-08-10 11:16:31\n+2019-06-30\t2096-01-15 16:31:33\t2063-10-20 08:48:17\n+2039-01-16\t2103-02-11 16:44:39\t2036-10-09 04:29:10\n+1994-11-03\t1980-01-02 05:18:22\t2055-12-23 12:33:52\n+2083-08-20\t2079-06-11 16:29:02\t2000-12-05 17:46:24\n+2030-06-25\t2100-03-01 18:50:22\t1993-03-25 01:19:12\n+2087-03-16\t2034-08-25 19:46:33\t2045-12-10 16:47:40\n+2006-04-30\t2069-09-30 16:07:48\t2084-08-26 03:33:12\n -\n DateTime64(3)\tDateTime64(6)\tDateTime64(6, \\'Europe/Moscow\\')\n 1978-06-07 23:50:57.320\t2013-08-28 10:21:54.010758\t1991-08-25 16:23:26.140215\n@@ -225,14 +225,14 @@ RL,{Xs\\\\tw\n [114]\t-84125.1554\t('2023-06-06 06:55:06.492','bf9ab359-ef9f-ad11-7e6c-160368b1e5ea')\n [124]\t-114719.5228\t('2010-11-11 22:57:23.722','c1046ffb-3415-cc3a-509a-e0005856d7d7')\n -\n-[]\t1900051923\t{\t-189530.5846\th\t-5.6279699579452485e47\t('1984-12-06','2028-08-17 06:05:01','2036-04-02 23:52:28.468','4b3d498c-dd44-95c1-5b75-921504ec5d8d')\tF743\n-[-102,-118]\t392272782\tEb\t-14818.0200\to\t-2.664492247169164e59\t('2082-12-26','2052-09-09 06:50:50','2088-04-21 05:07:08.245','aeb9c26e-0ee7-2b8e-802b-2a96319b8e60')\tCBF4\n-[-71]\t775049089\t\\N\t-158115.1178\tw\t4.1323844687113747e-305\t('2106-02-07','2090-07-31 16:45:26','2076-07-10 09:11:06.385','57c69bc6-dddd-0975-e932-a7b5173a1304')\tEB1D\n-[-28,100]\t3675466147\t{\t-146685.1749\th\t3.6676044396877755e142\t('2017-10-25','2100-02-28 18:07:18','2055-10-14 06:36:20.056','14949dae-dfa8-a124-af83-887348b2f609')\t6D88\n-[-23]\t2514120753\t(`u,\t-119659.6174\tw\t1.3231258347475906e34\t('2106-02-07','2074-08-10 06:25:12','1976-12-04 18:31:55.745','86a9b3c1-4593-4d56-7762-3aa1dd22cbbf')\tAD43\n-[11,-36]\t3308237300\t\\N\t171205.1896\t\\N\t5.634708707075817e195\t('1974-10-31','1993-12-24 09:38:45','2038-07-15 05:22:51.805','63d999b8-8cca-e237-c4a4-4dd7d0096f65')\t609E\n-[39]\t1614362420\t`4A8P\t157144.0630\to\t-1.1843143253872814e-255\t('2106-02-07','2072-09-28 18:27:27','2073-07-10 12:19:58.146','6483f5c0-8733-364c-4fa0-9948d32e8903')\tA886\n-[48,-120]\t3848918261\t1<Lu3\t91487.2852\th\t-1.9300793134783347e263\t('2050-12-04','2076-04-05 09:33:05','2103-12-13 23:48:44.066','e522b794-b8fa-3f11-003b-3b6b088ff941')\t556E\n-[55]\t3047524030\tli&lF\t93462.3661\th\t2.8979254388809897e54\t('1976-01-10','1987-07-14 00:25:51','2021-11-19 04:44:08.986','486e5b26-5fe8-fe3e-12ef-09aee40643e0')\t9E75\n-[100,-42]\t3999367674\t\t-112975.9852\th\t2.658098863752086e-160\t('2081-05-13','2071-08-07 13:34:33','1980-11-11 12:00:44.669','9754e8ac-5145-befb-63d9-a12dd1cf1f3a')\tDF63\n+[]\t1900051923\t{\t-189530.5846\th\t-5.6279699579452485e47\t('1980-08-29','2090-10-31 19:35:45','2038-07-15 05:22:51.805','63d9a12d-d1cf-1f3a-57c6-9bc6dddd0975')\t8502\n+[-102,-118]\t392272782\tEb\t-14818.0200\to\t-2.664492247169164e59\t('2059-02-10','1994-07-16 00:40:02','2034-02-02 05:30:44.960','4fa09948-d32e-8903-63df-43ad759e43f7')\tDA61\n+[-71]\t775049089\t\\N\t-158115.1178\tw\t4.1323844687113747e-305\t('1997-02-15','2062-08-12 23:41:53','2074-02-13 10:29:40.749','c4a44dd7-d009-6f65-1494-9daedfa8a124')\t83A7\n+[-28,100]\t3675466147\t{\t-146685.1749\th\t3.6676044396877755e142\t('1997-10-26','2002-06-26 03:33:41','2002-12-02 05:46:03.455','98714b2c-65e7-b5cb-a040-421e260c6d8d')\t4B94\n+[-23]\t2514120753\t(`u,\t-119659.6174\tw\t1.3231258347475906e34\t('2055-11-20','2080-03-28 08:11:25','2073-07-10 12:19:58.146','003b3b6b-088f-f941-aeb9-c26e0ee72b8e')\t6B1F\n+[11,-36]\t3308237300\t\\N\t171205.1896\t\\N\t5.634708707075817e195\t('2009-03-18','2041-11-11 13:19:44','2044-03-18 17:34:17.814','9e60f4cb-6e55-1deb-5ac4-d66a86a8886d')\t1964\n+[39]\t1614362420\t`4A8P\t157144.0630\to\t-1.1843143253872814e-255\t('1991-04-27','2066-03-02 11:07:49','1997-10-22 20:14:13.755','97685503-2609-d2b9-981c-02fd75d106cb')\tA35B\n+[48,-120]\t3848918261\t1<Lu3\t91487.2852\th\t-1.9300793134783347e263\t('1983-09-27','2031-08-07 11:29:42','2085-03-11 15:17:17.374','af838873-48b2-f609-6483-f5c08733364c')\t8E7C\n+[55]\t3047524030\tli&lF\t93462.3661\th\t2.8979254388809897e54\t('2011-08-01','2058-07-14 01:47:30','2055-10-14 06:36:20.056','e932a7b5-173a-1304-e522-b794b8fa3f11')\t35D9\n+[100,-42]\t3999367674\t\t-112975.9852\th\t2.658098863752086e-160\t('2025-12-13','2029-04-21 12:27:59','2068-08-27 07:49:41.825','802b2a96-319b-8e60-63d9-99b88ccae237')\t074E\n -\ndiff --git a/tests/queries/0_stateless/01125_generate_random_qoega.reference b/tests/queries/0_stateless/01125_generate_random_qoega.reference\nnew file mode 100644\nindex 000000000000..1cb416a722bc\n--- /dev/null\n+++ b/tests/queries/0_stateless/01125_generate_random_qoega.reference\n@@ -0,0 +1,1 @@\n+100\t4456446406473339606\ndiff --git a/tests/queries/0_stateless/01125_generate_random_qoega.sql b/tests/queries/0_stateless/01125_generate_random_qoega.sql\nnew file mode 100644\nindex 000000000000..7fb586ad2b5e\n--- /dev/null\n+++ b/tests/queries/0_stateless/01125_generate_random_qoega.sql\n@@ -0,0 +1,5 @@\n+DROP TABLE IF EXISTS mass_table_117;\n+CREATE TABLE mass_table_117 (`dt` Date, `site_id` Int32, `site_key` String) ENGINE = MergeTree(dt, (site_id, site_key, dt), 8192);\n+INSERT INTO mass_table_117 SELECT * FROM generateRandom('`dt` Date,`site_id` Int32,`site_key` String', 1, 10, 2) LIMIT 100;\n+SELECT count(), sum(cityHash64(*)) FROM mass_table_117;\n+DROP TABLE mass_table_117;\ndiff --git a/tests/queries/0_stateless/01126_month_partitioning_consistent_code.reference b/tests/queries/0_stateless/01126_month_partitioning_consistent_code.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/01126_month_partitioning_consistent_code.sql b/tests/queries/0_stateless/01126_month_partitioning_consistent_code.sql\nnew file mode 100644\nindex 000000000000..c9bfbbe5111b\n--- /dev/null\n+++ b/tests/queries/0_stateless/01126_month_partitioning_consistent_code.sql\n@@ -0,0 +1,4 @@\n+DROP TABLE IF EXISTS mt;\n+CREATE TABLE mt (d Date, x UInt8) ENGINE = MergeTree(d, x, 8192);\n+INSERT INTO mt VALUES (52392, 1), (62677, 2);\n+DROP TABLE mt;\ndiff --git a/tests/queries/0_stateless/01127_month_partitioning_consistency_select.reference b/tests/queries/0_stateless/01127_month_partitioning_consistency_select.reference\nnew file mode 100644\nindex 000000000000..1b08e7f2d6fb\n--- /dev/null\n+++ b/tests/queries/0_stateless/01127_month_partitioning_consistency_select.reference\n@@ -0,0 +1,4 @@\n+Q1\t2106-02-07\tHello\n+Q2\t0000-00-00\tWorld\n+Q1\t2106-02-07\tHello\n+Q2\t0000-00-00\tWorld\ndiff --git a/tests/queries/0_stateless/01127_month_partitioning_consistency_select.sql b/tests/queries/0_stateless/01127_month_partitioning_consistency_select.sql\nnew file mode 100644\nindex 000000000000..59edd0c37b8d\n--- /dev/null\n+++ b/tests/queries/0_stateless/01127_month_partitioning_consistency_select.sql\n@@ -0,0 +1,14 @@\n+DROP TABLE IF EXISTS mt;\n+CREATE TABLE mt (d Date, x String) ENGINE = MergeTree(d, x, 8192);\n+INSERT INTO mt VALUES ('2106-02-07', 'Hello'), ('1970-01-01', 'World');\n+\n+SELECT 'Q1', * FROM mt WHERE d = '2106-02-07';\n+SELECT 'Q2', * FROM mt WHERE d = '1970-01-01';\n+\n+DETACH TABLE mt;\n+ATTACH TABLE mt;\n+\n+SELECT 'Q1', * FROM mt WHERE d = '2106-02-07';\n+SELECT 'Q2', * FROM mt WHERE d = '1970-01-01';\n+\n+DROP TABLE mt;\ndiff --git a/tests/queries/0_stateless/01128_generate_random_nested.reference b/tests/queries/0_stateless/01128_generate_random_nested.reference\nnew file mode 100644\nindex 000000000000..d9d2b2517024\n--- /dev/null\n+++ b/tests/queries/0_stateless/01128_generate_random_nested.reference\n@@ -0,0 +1,2 @@\n+100\t12366141706519416319\n+109\t2990700419202507835\ndiff --git a/tests/queries/0_stateless/01128_generate_random_nested.sql b/tests/queries/0_stateless/01128_generate_random_nested.sql\nnew file mode 100644\nindex 000000000000..2af52e69893e\n--- /dev/null\n+++ b/tests/queries/0_stateless/01128_generate_random_nested.sql\n@@ -0,0 +1,8 @@\n+DROP TABLE IF EXISTS mass_table_312;\n+CREATE TABLE mass_table_312 (d Date DEFAULT '2000-01-01', x UInt64, n Nested(a String, b String)) ENGINE = MergeTree(d, x, 1);\n+INSERT INTO mass_table_312 SELECT * FROM generateRandom('`d` Date,`x` UInt64,`n.a` Array(String),`n.b` Array(String)', 1, 10, 2) LIMIT 100;\n+\n+SELECT count(), sum(cityHash64(*)) FROM mass_table_312;\n+SELECT count(), sum(cityHash64(*)) FROM mass_table_312 ARRAY JOIN n;\n+\n+DROP TABLE mass_table_312;\ndiff --git a/tests/queries/0_stateless/01231_log_queries_min_type.reference b/tests/queries/0_stateless/01231_log_queries_min_type.reference\nnew file mode 100644\nindex 000000000000..a358d0220334\n--- /dev/null\n+++ b/tests/queries/0_stateless/01231_log_queries_min_type.reference\n@@ -0,0 +1,5 @@\n+01231_log_queries_min_type/QUERY_START\n+2\n+01231_log_queries_min_type/EXCEPTION_BEFORE_START\n+2\n+3\ndiff --git a/tests/queries/0_stateless/01231_log_queries_min_type.sql b/tests/queries/0_stateless/01231_log_queries_min_type.sql\nnew file mode 100644\nindex 000000000000..f2229c94a8af\n--- /dev/null\n+++ b/tests/queries/0_stateless/01231_log_queries_min_type.sql\n@@ -0,0 +1,15 @@\n+set log_queries=1;\n+\n+select '01231_log_queries_min_type/QUERY_START';\n+system flush logs;\n+select count() from system.query_log where query like '%01231_log_queries_min_type/%' and query not like '%system.query_log%' and event_date = today() and event_time >= now() - interval 1 minute;\n+\n+set log_queries_min_type='EXCEPTION_BEFORE_START';\n+select '01231_log_queries_min_type/EXCEPTION_BEFORE_START';\n+system flush logs;\n+select count() from system.query_log where query like '%01231_log_queries_min_type/%' and query not like '%system.query_log%' and event_date = today() and event_time >= now() - interval 1 minute;\n+\n+set log_queries_min_type='EXCEPTION_WHILE_PROCESSING';\n+select '01231_log_queries_min_type/', max(number) from system.numbers limit 1e6 settings max_rows_to_read='100K'; -- { serverError 158; }\n+system flush logs;\n+select count() from system.query_log where query like '%01231_log_queries_min_type/%' and query not like '%system.query_log%' and event_date = today() and event_time >= now() - interval 1 minute;\n",
  "problem_statement": "generateRandom incorrectly works with Nested structures\n**Describe the bug**\r\nAll arrays for nested data structure should have same size in a row.\r\n```\r\nCode: 190. DB::Exception: Received from localhost:9000. DB::Exception: Elements 'n.a' and 'n.b' of Nested data structure 'n' (Array columns) have different array sizes..\r\n```\r\n**How to reproduce**\r\n``` sql\r\nCREATE TABLE mass_table_312 (d Date DEFAULT '2000-01-01', x UInt64, n Nested(a String, b String)) ENGINE = MergeTree(d, x, 1);\r\nINSERT INTO mass_table_312 SELECT * FROM generateRandom('`d` Date,`x` UInt64,`n.a` Array(String),`n.b` Array(String)', 1, 10, 2) LIMIT 100;\r\n```\r\n```\r\nCode: 190. DB::Exception: Received from localhost:9000. DB::Exception: Elements 'n.a' and 'n.b' of Nested data structure 'n' (Array columns) have different array sizes..\r\n```\n",
  "hints_text": "",
  "created_at": "2020-04-12T23:34:55Z"
}