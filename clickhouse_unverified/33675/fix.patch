diff --git a/base/base/wide_integer_impl.h b/base/base/wide_integer_impl.h
index cffffcc213f4..ec146fd58211 100644
--- a/base/base/wide_integer_impl.h
+++ b/base/base/wide_integer_impl.h
@@ -125,11 +125,11 @@ class numeric_limits<wide::integer<Bits, Signed>>
 template <size_t Bits, typename Signed, size_t Bits2, typename Signed2>
 struct common_type<wide::integer<Bits, Signed>, wide::integer<Bits2, Signed2>>
 {
-    using type = std::conditional_t < Bits == Bits2,
-          wide::integer<
-              Bits,
-              std::conditional_t<(std::is_same_v<Signed, Signed2> && std::is_same_v<Signed2, signed>), signed, unsigned>>,
-          std::conditional_t<Bits2<Bits, wide::integer<Bits, Signed>, wide::integer<Bits2, Signed2>>>;
+    using type = std::conditional_t<Bits == Bits2,
+        wide::integer<
+            Bits,
+            std::conditional_t<(std::is_same_v<Signed, Signed2> && std::is_same_v<Signed2, signed>), signed, unsigned>>,
+        std::conditional_t<Bits2<Bits, wide::integer<Bits, Signed>, wide::integer<Bits2, Signed2>>>;
 };
 
 template <size_t Bits, typename Signed, typename Arithmetic>
diff --git a/src/Columns/ColumnFunction.cpp b/src/Columns/ColumnFunction.cpp
index 09a3dbad2421..f4b7eeb771ca 100644
--- a/src/Columns/ColumnFunction.cpp
+++ b/src/Columns/ColumnFunction.cpp
@@ -3,9 +3,11 @@
 #include <Columns/ColumnsCommon.h>
 #include <Common/PODArray.h>
 #include <Common/ProfileEvents.h>
+#include <Common/assert_cast.h>
 #include <IO/WriteHelpers.h>
 #include <Functions/IFunction.h>
 
+
 namespace ProfileEvents
 {
     extern const Event FunctionExecute;
@@ -59,6 +61,40 @@ ColumnPtr ColumnFunction::cut(size_t start, size_t length) const
     return ColumnFunction::create(length, function, capture, is_short_circuit_argument, is_function_compiled);
 }
 
+void ColumnFunction::insertFrom(const IColumn & src, size_t n)
+{
+    const ColumnFunction & src_func = assert_cast<const ColumnFunction &>(src);
+
+    size_t num_captured_columns = captured_columns.size();
+    assert(num_captured_columns == src_func.captured_columns.size());
+
+    for (size_t i = 0; i < num_captured_columns; ++i)
+    {
+        auto mut_column = IColumn::mutate(std::move(captured_columns[i].column));
+        mut_column->insertFrom(*src_func.captured_columns[i].column, n);
+        captured_columns[i].column = std::move(mut_column);
+    }
+
+    ++size_;
+}
+
+void ColumnFunction::insertRangeFrom(const IColumn & src, size_t start, size_t length)
+{
+    const ColumnFunction & src_func = assert_cast<const ColumnFunction &>(src);
+
+    size_t num_captured_columns = captured_columns.size();
+    assert(num_captured_columns == src_func.captured_columns.size());
+
+    for (size_t i = 0; i < num_captured_columns; ++i)
+    {
+        auto mut_column = IColumn::mutate(std::move(captured_columns[i].column));
+        mut_column->insertRangeFrom(*src_func.captured_columns[i].column, start, length);
+        captured_columns[i].column = std::move(mut_column);
+    }
+
+    size_ += length;
+}
+
 ColumnPtr ColumnFunction::filter(const Filter & filt, ssize_t result_size_hint) const
 {
     if (size_ != filt.size())
diff --git a/src/Columns/ColumnFunction.h b/src/Columns/ColumnFunction.h
index 2592dc01f982..5b410a28ddf6 100644
--- a/src/Columns/ColumnFunction.h
+++ b/src/Columns/ColumnFunction.h
@@ -88,10 +88,8 @@ class ColumnFunction final : public COWHelper<IColumn, ColumnFunction>
         throw Exception("Cannot insert into " + getName(), ErrorCodes::NOT_IMPLEMENTED);
     }
 
-    void insertRangeFrom(const IColumn &, size_t, size_t) override
-    {
-        throw Exception("Cannot insert into " + getName(), ErrorCodes::NOT_IMPLEMENTED);
-    }
+    void insertFrom(const IColumn & src, size_t n) override;
+    void insertRangeFrom(const IColumn &, size_t start, size_t length) override;
 
     void insertData(const char *, size_t) override
     {
