{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 61800,
  "instance_id": "ClickHouse__ClickHouse-61800",
  "issue_numbers": [
    "61272"
  ],
  "base_commit": "5e518807506344415399b47a5c57d1f1bdb4c22a",
  "patch": "diff --git a/programs/client/Client.cpp b/programs/client/Client.cpp\nindex 217684830d40..d4bf2f686c88 100644\n--- a/programs/client/Client.cpp\n+++ b/programs/client/Client.cpp\n@@ -1134,13 +1134,6 @@ void Client::processOptions(const OptionsDescription & options_description,\n }\n \n \n-static bool checkIfStdoutIsRegularFile()\n-{\n-    struct stat file_stat;\n-    return fstat(STDOUT_FILENO, &file_stat) == 0 && S_ISREG(file_stat.st_mode);\n-}\n-\n-\n void Client::processConfig()\n {\n     if (!queries.empty() && config().has(\"queries-file\"))\n@@ -1176,38 +1169,7 @@ void Client::processConfig()\n \n     pager = config().getString(\"pager\", \"\");\n \n-    is_default_format = !config().has(\"vertical\") && !config().has(\"output-format\") && !config().has(\"format\");\n-    if (is_default_format && checkIfStdoutIsRegularFile())\n-    {\n-        is_default_format = false;\n-        std::optional<String> format_from_file_name;\n-        format_from_file_name = FormatFactory::instance().tryGetFormatFromFileDescriptor(STDOUT_FILENO);\n-        format = format_from_file_name ? *format_from_file_name : \"TabSeparated\";\n-    }\n-    else if (config().has(\"vertical\"))\n-    {\n-        format = config().getString(\"output-format\", config().getString(\"format\", \"Vertical\"));\n-    }\n-    else\n-    {\n-        format = config().getString(\"output-format\", config().getString(\"format\", is_interactive ? \"PrettyCompact\" : \"TabSeparated\"));\n-    }\n-\n-    format_max_block_size = config().getUInt64(\"format_max_block_size\",\n-        global_context->getSettingsRef().max_block_size);\n-\n-    insert_format = \"Values\";\n-\n-    /// Setting value from cmd arg overrides one from config\n-    if (global_context->getSettingsRef().max_insert_block_size.changed)\n-    {\n-        insert_format_max_block_size = global_context->getSettingsRef().max_insert_block_size;\n-    }\n-    else\n-    {\n-        insert_format_max_block_size = config().getUInt64(\"insert_format_max_block_size\",\n-            global_context->getSettingsRef().max_insert_block_size);\n-    }\n+    setDefaultFormatsFromConfiguration();\n \n     global_context->setClientName(std::string(DEFAULT_CLIENT_NAME));\n     global_context->setQueryKindInitial();\ndiff --git a/programs/local/LocalServer.cpp b/programs/local/LocalServer.cpp\nindex e0124f03a64f..05c9830ee2c2 100644\n--- a/programs/local/LocalServer.cpp\n+++ b/programs/local/LocalServer.cpp\n@@ -312,47 +312,28 @@ void LocalServer::cleanup()\n }\n \n \n-static bool checkIfStdinIsRegularFile()\n-{\n-    struct stat file_stat;\n-    return fstat(STDIN_FILENO, &file_stat) == 0 && S_ISREG(file_stat.st_mode);\n-}\n-\n-\n-static bool checkIfStdoutIsRegularFile()\n-{\n-    struct stat file_stat;\n-    return fstat(STDOUT_FILENO, &file_stat) == 0 && S_ISREG(file_stat.st_mode);\n-}\n-\n-\n std::string LocalServer::getInitialCreateTableQuery()\n {\n-    if (!config().has(\"table-structure\") && !config().has(\"table-file\") && !config().has(\"table-data-format\") && (!checkIfStdinIsRegularFile() || queries.empty()))\n+    if (!config().has(\"table-structure\") && !config().has(\"table-file\") && !config().has(\"table-data-format\") && (!isRegularFile(STDIN_FILENO) || queries.empty()))\n         return {};\n \n     auto table_name = backQuoteIfNeed(config().getString(\"table-name\", \"table\"));\n     auto table_structure = config().getString(\"table-structure\", \"auto\");\n \n     String table_file;\n-    std::optional<String> format_from_file_name;\n     if (!config().has(\"table-file\") || config().getString(\"table-file\") == \"-\")\n     {\n         /// Use Unix tools stdin naming convention\n         table_file = \"stdin\";\n-        format_from_file_name = FormatFactory::instance().tryGetFormatFromFileDescriptor(STDIN_FILENO);\n     }\n     else\n     {\n         /// Use regular file\n         auto file_name = config().getString(\"table-file\");\n         table_file = quoteString(file_name);\n-        format_from_file_name = FormatFactory::instance().tryGetFormatFromFileName(file_name);\n     }\n \n-    auto data_format = backQuoteIfNeed(\n-        config().getString(\"table-data-format\", config().getString(\"format\", format_from_file_name ? *format_from_file_name : \"TSV\")));\n-\n+    String data_format = backQuoteIfNeed(default_input_format);\n \n     if (table_structure == \"auto\")\n         table_structure = \"\";\n@@ -618,26 +599,7 @@ void LocalServer::processConfig()\n     if (config().has(\"macros\"))\n         global_context->setMacros(std::make_unique<Macros>(config(), \"macros\", log));\n \n-    if (!config().has(\"output-format\") && !config().has(\"format\") && checkIfStdoutIsRegularFile())\n-    {\n-        std::optional<String> format_from_file_name;\n-        format_from_file_name = FormatFactory::instance().tryGetFormatFromFileDescriptor(STDOUT_FILENO);\n-        format = format_from_file_name ? *format_from_file_name : \"TSV\";\n-    }\n-    else\n-        format = config().getString(\"output-format\", config().getString(\"format\", is_interactive ? \"PrettyCompact\" : \"TSV\"));\n-    insert_format = \"Values\";\n-\n-    /// Setting value from cmd arg overrides one from config\n-    if (global_context->getSettingsRef().max_insert_block_size.changed)\n-    {\n-        insert_format_max_block_size = global_context->getSettingsRef().max_insert_block_size;\n-    }\n-    else\n-    {\n-        insert_format_max_block_size = config().getUInt64(\"insert_format_max_block_size\",\n-            global_context->getSettingsRef().max_insert_block_size);\n-    }\n+    setDefaultFormatsFromConfiguration();\n \n     /// Sets external authenticators config (LDAP, Kerberos).\n     global_context->setExternalAuthenticatorsConfig(config());\ndiff --git a/src/Client/ClientBase.cpp b/src/Client/ClientBase.cpp\nindex c97669760f9e..767a9b2b9f9e 100644\n--- a/src/Client/ClientBase.cpp\n+++ b/src/Client/ClientBase.cpp\n@@ -564,7 +564,7 @@ try\n             out_buf = &std_out;\n         }\n \n-        String current_format = format;\n+        String current_format = default_output_format;\n \n         select_into_file = false;\n         select_into_file_and_stdout = false;\n@@ -722,6 +722,87 @@ void ClientBase::adjustSettings()\n     global_context->setSettings(settings);\n }\n \n+bool ClientBase::isRegularFile(int fd)\n+{\n+    struct stat file_stat;\n+    return fstat(fd, &file_stat) == 0 && S_ISREG(file_stat.st_mode);\n+}\n+\n+void ClientBase::setDefaultFormatsFromConfiguration()\n+{\n+    if (config().has(\"output-format\"))\n+    {\n+        default_output_format = config().getString(\"output-format\");\n+        is_default_format = false;\n+    }\n+    else if (config().has(\"format\"))\n+    {\n+        default_output_format = config().getString(\"format\");\n+        is_default_format = false;\n+    }\n+    else if (config().has(\"vertical\"))\n+    {\n+        default_output_format = \"Vertical\";\n+        is_default_format = false;\n+    }\n+    else if (isRegularFile(STDOUT_FILENO))\n+    {\n+        std::optional<String> format_from_file_name = FormatFactory::instance().tryGetFormatFromFileDescriptor(STDOUT_FILENO);\n+        if (format_from_file_name)\n+            default_output_format = *format_from_file_name;\n+        else\n+            default_output_format = \"TSV\";\n+    }\n+    else if (is_interactive || stdout_is_a_tty)\n+    {\n+        default_output_format = \"PrettyCompact\";\n+    }\n+    else\n+    {\n+        default_output_format = \"TSV\";\n+    }\n+\n+    if (config().has(\"input-format\"))\n+    {\n+        default_input_format = config().getString(\"input-format\");\n+    }\n+    else if (config().has(\"format\"))\n+    {\n+        default_input_format = config().getString(\"format\");\n+    }\n+    else if (config().getString(\"table-file\", \"-\") != \"-\")\n+    {\n+        auto file_name = config().getString(\"table-file\");\n+        std::optional<String> format_from_file_name = FormatFactory::instance().tryGetFormatFromFileName(file_name);\n+        if (format_from_file_name)\n+            default_input_format = *format_from_file_name;\n+        else\n+            default_input_format = \"TSV\";\n+    }\n+    else\n+    {\n+        std::optional<String> format_from_file_name = FormatFactory::instance().tryGetFormatFromFileDescriptor(STDIN_FILENO);\n+        if (format_from_file_name)\n+            default_input_format = *format_from_file_name;\n+        else\n+            default_input_format = \"TSV\";\n+    }\n+\n+    format_max_block_size = config().getUInt64(\"format_max_block_size\",\n+        global_context->getSettingsRef().max_block_size);\n+\n+    /// Setting value from cmd arg overrides one from config\n+    if (global_context->getSettingsRef().max_insert_block_size.changed)\n+    {\n+        insert_format_max_block_size = global_context->getSettingsRef().max_insert_block_size;\n+    }\n+    else\n+    {\n+        insert_format_max_block_size = config().getUInt64(\"insert_format_max_block_size\",\n+            global_context->getSettingsRef().max_insert_block_size);\n+    }\n+}\n+\n void ClientBase::initTTYBuffer(ProgressOption progress)\n {\n     if (tty_buf)\n@@ -1605,7 +1686,7 @@ void ClientBase::sendData(Block & sample, const ColumnsDescription & columns_des\n \n void ClientBase::sendDataFrom(ReadBuffer & buf, Block & sample, const ColumnsDescription & columns_description, ASTPtr parsed_query, bool have_more_data)\n {\n-    String current_format = insert_format;\n+    String current_format = \"Values\";\n \n     /// Data format can be specified in the INSERT query.\n     if (const auto * insert = parsed_query->as<ASTInsertQuery>())\ndiff --git a/src/Client/ClientBase.h b/src/Client/ClientBase.h\nindex 51dfaebd9953..9ec87ababfc9 100644\n--- a/src/Client/ClientBase.h\n+++ b/src/Client/ClientBase.h\n@@ -185,9 +185,13 @@ class ClientBase : public Poco::Util::Application, public IHints<2>\n     static bool isSyncInsertWithData(const ASTInsertQuery & insert_query, const ContextPtr & context);\n     bool processMultiQueryFromFile(const String & file_name);\n \n+    static bool isRegularFile(int fd);\n+\n     /// Adjust some settings after command line options and config had been processed.\n     void adjustSettings();\n \n+    void setDefaultFormatsFromConfiguration();\n+\n     void initTTYBuffer(ProgressOption progress);\n \n     /// Should be one of the first, to be destroyed the last,\n@@ -218,12 +222,13 @@ class ClientBase : public Poco::Util::Application, public IHints<2>\n \n     String pager;\n \n-    String format; /// Query results output format.\n+    String default_output_format; /// Query results output format.\n+    String default_input_format; /// Tables' format for clickhouse-local.\n+\n     bool select_into_file = false; /// If writing result INTO OUTFILE. It affects progress rendering.\n     bool select_into_file_and_stdout = false; /// If writing result INTO OUTFILE AND STDOUT. It affects progress rendering.\n     bool is_default_format = true; /// false, if format is set in the config or command line.\n     size_t format_max_block_size = 0; /// Max block size for console output.\n-    String insert_format; /// Format of INSERT data that is read from stdin in batch mode.\n     size_t insert_format_max_block_size = 0; /// Max block size when reading INSERT data.\n     size_t max_client_network_bandwidth = 0; /// The maximum speed of data exchange over the network for the client in bytes per second.\n \ndiff --git a/utils/check-style/check-style b/utils/check-style/check-style\nindex d7387c3f843f..23e8b6b2bc49 100755\n--- a/utils/check-style/check-style\n+++ b/utils/check-style/check-style\n@@ -342,7 +342,7 @@ done\n \n expect_tests=( $(find $ROOT_PATH/tests/queries -name '*.expect') )\n for test_case in \"${expect_tests[@]}\"; do\n-    pattern=\"^exp_internal -f \\$env(CLICKHOUSE_TMP)/\\$basename.debuglog 0$\"\n+    pattern=\"^exp_internal -f \\$CLICKHOUSE_TMP/\\$basename.debuglog 0$\"\n     grep -q \"$pattern\" \"$test_case\" || echo \"Missing '$pattern' in '$test_case'\"\n \n     if grep -q \"^spawn.*CLICKHOUSE_CLIENT_BINARY$\" \"$test_case\"; then\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01176_mysql_client_interactive.expect b/tests/queries/0_stateless/01176_mysql_client_interactive.expect\nindex 2bb6ba8726be..6bfff6dfab34 100755\n--- a/tests/queries/0_stateless/01176_mysql_client_interactive.expect\n+++ b/tests/queries/0_stateless/01176_mysql_client_interactive.expect\n@@ -4,7 +4,12 @@\n \n set basedir [file dirname $argv0]\n set basename [file tail $argv0]\n-exp_internal -f $env(CLICKHOUSE_TMP)/$basename.debuglog 0\n+if {[info exists env(CLICKHOUSE_TMP)]} {\n+    set CLICKHOUSE_TMP $env(CLICKHOUSE_TMP)\n+} else {\n+    set CLICKHOUSE_TMP \".\"\n+}\n+exp_internal -f $CLICKHOUSE_TMP/$basename.debuglog 0\n \n log_user 0\n set timeout 60\ndiff --git a/tests/queries/0_stateless/01179_insert_values_semicolon.expect b/tests/queries/0_stateless/01179_insert_values_semicolon.expect\nindex 072be483e4f5..534b18a9500b 100755\n--- a/tests/queries/0_stateless/01179_insert_values_semicolon.expect\n+++ b/tests/queries/0_stateless/01179_insert_values_semicolon.expect\n@@ -2,8 +2,13 @@\n \n set basedir [file dirname $argv0]\n set basename [file tail $argv0]\n-exp_internal -f $env(CLICKHOUSE_TMP)/$basename.debuglog 0\n-set history_file $env(CLICKHOUSE_TMP)/$basename.history\n+if {[info exists env(CLICKHOUSE_TMP)]} {\n+    set CLICKHOUSE_TMP $env(CLICKHOUSE_TMP)\n+} else {\n+    set CLICKHOUSE_TMP \".\"\n+}\n+exp_internal -f $CLICKHOUSE_TMP/$basename.debuglog 0\n+set history_file $CLICKHOUSE_TMP/$basename.history\n \n log_user 0\n set timeout 60\ndiff --git a/tests/queries/0_stateless/01180_client_syntax_errors.expect b/tests/queries/0_stateless/01180_client_syntax_errors.expect\nindex 508ebc3433b1..042b16c32963 100755\n--- a/tests/queries/0_stateless/01180_client_syntax_errors.expect\n+++ b/tests/queries/0_stateless/01180_client_syntax_errors.expect\n@@ -2,8 +2,13 @@\n \n set basedir [file dirname $argv0]\n set basename [file tail $argv0]\n-exp_internal -f $env(CLICKHOUSE_TMP)/$basename.debuglog 0\n-set history_file $env(CLICKHOUSE_TMP)/$basename.history\n+if {[info exists env(CLICKHOUSE_TMP)]} {\n+    set CLICKHOUSE_TMP $env(CLICKHOUSE_TMP)\n+} else {\n+    set CLICKHOUSE_TMP \".\"\n+}\n+exp_internal -f $CLICKHOUSE_TMP/$basename.debuglog 0\n+set history_file $CLICKHOUSE_TMP/$basename.history\n \n log_user 0\n set timeout 60\ndiff --git a/tests/queries/0_stateless/01293_client_interactive_vertical_multiline.expect b/tests/queries/0_stateless/01293_client_interactive_vertical_multiline.expect\nindex 25933777f9fd..3de7df04ec0d 100755\n--- a/tests/queries/0_stateless/01293_client_interactive_vertical_multiline.expect\n+++ b/tests/queries/0_stateless/01293_client_interactive_vertical_multiline.expect\n@@ -2,8 +2,14 @@\n \n set basedir [file dirname $argv0]\n set basename [file tail $argv0]\n-exp_internal -f $env(CLICKHOUSE_TMP)/$basename.debuglog 0\n-set history_file $env(CLICKHOUSE_TMP)/$basename.history\n+\n+if {[info exists env(CLICKHOUSE_TMP)]} {\n+    set CLICKHOUSE_TMP $env(CLICKHOUSE_TMP)\n+} else {\n+    set CLICKHOUSE_TMP \".\"\n+}\n+exp_internal -f $CLICKHOUSE_TMP/$basename.debuglog 0\n+set history_file $CLICKHOUSE_TMP/$basename.history\n \n log_user 0\n set timeout 60\ndiff --git a/tests/queries/0_stateless/01293_client_interactive_vertical_singleline.expect b/tests/queries/0_stateless/01293_client_interactive_vertical_singleline.expect\nindex 1ded43d3fed5..68d2d1f0a132 100755\n--- a/tests/queries/0_stateless/01293_client_interactive_vertical_singleline.expect\n+++ b/tests/queries/0_stateless/01293_client_interactive_vertical_singleline.expect\n@@ -2,8 +2,14 @@\n \n set basedir [file dirname $argv0]\n set basename [file tail $argv0]\n-exp_internal -f $env(CLICKHOUSE_TMP)/$basename.debuglog 0\n-set history_file $env(CLICKHOUSE_TMP)/$basename.history\n+\n+if {[info exists env(CLICKHOUSE_TMP)]} {\n+    set CLICKHOUSE_TMP $env(CLICKHOUSE_TMP)\n+} else {\n+    set CLICKHOUSE_TMP \".\"\n+}\n+exp_internal -f $CLICKHOUSE_TMP/$basename.debuglog 0\n+set history_file $CLICKHOUSE_TMP/$basename.history\n \n log_user 0\n set timeout 60\ndiff --git a/tests/queries/0_stateless/01300_client_save_history_when_terminated_long.expect b/tests/queries/0_stateless/01300_client_save_history_when_terminated_long.expect\nindex c897d7e97726..9f471bc694b2 100755\n--- a/tests/queries/0_stateless/01300_client_save_history_when_terminated_long.expect\n+++ b/tests/queries/0_stateless/01300_client_save_history_when_terminated_long.expect\n@@ -2,8 +2,13 @@\n \n set basedir [file dirname $argv0]\n set basename [file tail $argv0]\n-exp_internal -f $env(CLICKHOUSE_TMP)/$basename.debuglog 0\n-set history_file $env(CLICKHOUSE_TMP)/$basename.history\n+if {[info exists env(CLICKHOUSE_TMP)]} {\n+    set CLICKHOUSE_TMP $env(CLICKHOUSE_TMP)\n+} else {\n+    set CLICKHOUSE_TMP \".\"\n+}\n+exp_internal -f $CLICKHOUSE_TMP/$basename.debuglog 0\n+set history_file $CLICKHOUSE_TMP/$basename.history\n \n log_user 0\n set timeout 60\ndiff --git a/tests/queries/0_stateless/01370_client_autocomplete_word_break_characters.expect b/tests/queries/0_stateless/01370_client_autocomplete_word_break_characters.expect\nindex 90e19e077ec9..44f3ba9681a9 100755\n--- a/tests/queries/0_stateless/01370_client_autocomplete_word_break_characters.expect\n+++ b/tests/queries/0_stateless/01370_client_autocomplete_word_break_characters.expect\n@@ -2,8 +2,13 @@\n \n set basedir [file dirname $argv0]\n set basename [file tail $argv0]\n-exp_internal -f $env(CLICKHOUSE_TMP)/$basename.debuglog 0\n-set history_file $env(CLICKHOUSE_TMP)/$basename.history\n+if {[info exists env(CLICKHOUSE_TMP)]} {\n+    set CLICKHOUSE_TMP $env(CLICKHOUSE_TMP)\n+} else {\n+    set CLICKHOUSE_TMP \".\"\n+}\n+exp_internal -f $CLICKHOUSE_TMP/$basename.debuglog 0\n+set history_file $CLICKHOUSE_TMP/$basename.history\n \n log_user 0\n set timeout 60\ndiff --git a/tests/queries/0_stateless/01520_client_print_query_id.expect b/tests/queries/0_stateless/01520_client_print_query_id.expect\nindex 2034483a73d2..70f446e15844 100755\n--- a/tests/queries/0_stateless/01520_client_print_query_id.expect\n+++ b/tests/queries/0_stateless/01520_client_print_query_id.expect\n@@ -2,8 +2,13 @@\n \n set basedir [file dirname $argv0]\n set basename [file tail $argv0]\n-exp_internal -f $env(CLICKHOUSE_TMP)/$basename.debuglog 0\n-set history_file $env(CLICKHOUSE_TMP)/$basename.history\n+if {[info exists env(CLICKHOUSE_TMP)]} {\n+    set CLICKHOUSE_TMP $env(CLICKHOUSE_TMP)\n+} else {\n+    set CLICKHOUSE_TMP \".\"\n+}\n+exp_internal -f $CLICKHOUSE_TMP/$basename.debuglog 0\n+set history_file $CLICKHOUSE_TMP/$basename.history\n \n log_user 0\n set timeout 60\ndiff --git a/tests/queries/0_stateless/01565_query_loop_after_client_error.expect b/tests/queries/0_stateless/01565_query_loop_after_client_error.expect\nindex e718fd99b7fd..ac69c18ce392 100755\n--- a/tests/queries/0_stateless/01565_query_loop_after_client_error.expect\n+++ b/tests/queries/0_stateless/01565_query_loop_after_client_error.expect\n@@ -5,8 +5,13 @@\n \n set basedir [file dirname $argv0]\n set basename [file tail $argv0]\n-exp_internal -f $env(CLICKHOUSE_TMP)/$basename.debuglog 0\n-set history_file $env(CLICKHOUSE_TMP)/$basename.history\n+if {[info exists env(CLICKHOUSE_TMP)]} {\n+    set CLICKHOUSE_TMP $env(CLICKHOUSE_TMP)\n+} else {\n+    set CLICKHOUSE_TMP \".\"\n+}\n+exp_internal -f $CLICKHOUSE_TMP/$basename.debuglog 0\n+set history_file $CLICKHOUSE_TMP/$basename.history\n \n log_user 0\n set timeout 60\ndiff --git a/tests/queries/0_stateless/01755_client_highlight_multi_line_comment_regression.expect b/tests/queries/0_stateless/01755_client_highlight_multi_line_comment_regression.expect\nindex a7e4b45eb444..3efbe478ce5b 100755\n--- a/tests/queries/0_stateless/01755_client_highlight_multi_line_comment_regression.expect\n+++ b/tests/queries/0_stateless/01755_client_highlight_multi_line_comment_regression.expect\n@@ -2,8 +2,13 @@\n \n set basedir [file dirname $argv0]\n set basename [file tail $argv0]\n-exp_internal -f $env(CLICKHOUSE_TMP)/$basename.debuglog 0\n-set history_file $env(CLICKHOUSE_TMP)/$basename.history\n+if {[info exists env(CLICKHOUSE_TMP)]} {\n+    set CLICKHOUSE_TMP $env(CLICKHOUSE_TMP)\n+} else {\n+    set CLICKHOUSE_TMP \".\"\n+}\n+exp_internal -f $CLICKHOUSE_TMP/$basename.debuglog 0\n+set history_file $CLICKHOUSE_TMP/$basename.history\n \n log_user 0\n set timeout 60\ndiff --git a/tests/queries/0_stateless/01910_client_replxx_container_overflow_long.expect b/tests/queries/0_stateless/01910_client_replxx_container_overflow_long.expect\nindex 9105cf30f79a..4cd64b68d54a 100755\n--- a/tests/queries/0_stateless/01910_client_replxx_container_overflow_long.expect\n+++ b/tests/queries/0_stateless/01910_client_replxx_container_overflow_long.expect\n@@ -2,7 +2,12 @@\n \n set basedir [file dirname $argv0]\n set basename [file tail $argv0]\n-exp_internal -f $env(CLICKHOUSE_TMP)/$basename.debuglog 0\n+if {[info exists env(CLICKHOUSE_TMP)]} {\n+    set CLICKHOUSE_TMP $env(CLICKHOUSE_TMP)\n+} else {\n+    set CLICKHOUSE_TMP \".\"\n+}\n+exp_internal -f $CLICKHOUSE_TMP/$basename.debuglog 0\n \n log_user 0\n set timeout 60\ndiff --git a/tests/queries/0_stateless/01933_client_replxx_convert_history.expect b/tests/queries/0_stateless/01933_client_replxx_convert_history.expect\nindex 69c5ff0118ee..005ccbb5ff42 100755\n--- a/tests/queries/0_stateless/01933_client_replxx_convert_history.expect\n+++ b/tests/queries/0_stateless/01933_client_replxx_convert_history.expect\n@@ -2,8 +2,13 @@\n \n set basedir [file dirname $argv0]\n set basename [file tail $argv0]\n-exp_internal -f $env(CLICKHOUSE_TMP)/$basename.debuglog 0\n-set history_file $env(CLICKHOUSE_TMP)/$basename.history\n+if {[info exists env(CLICKHOUSE_TMP)]} {\n+    set CLICKHOUSE_TMP $env(CLICKHOUSE_TMP)\n+} else {\n+    set CLICKHOUSE_TMP \".\"\n+}\n+exp_internal -f $CLICKHOUSE_TMP/$basename.debuglog 0\n+set history_file $CLICKHOUSE_TMP/$basename.history\n \n log_user 0\n set timeout 60\ndiff --git a/tests/queries/0_stateless/01945_show_debug_warning.expect b/tests/queries/0_stateless/01945_show_debug_warning.expect\nindex 28b114b5af49..a6950b5ab82c 100755\n--- a/tests/queries/0_stateless/01945_show_debug_warning.expect\n+++ b/tests/queries/0_stateless/01945_show_debug_warning.expect\n@@ -5,8 +5,13 @@\n \n set basedir [file dirname $argv0]\n set basename [file tail $argv0]\n-exp_internal -f $env(CLICKHOUSE_TMP)/$basename.debuglog 0\n-set history_file $env(CLICKHOUSE_TMP)/$basename.history\n+if {[info exists env(CLICKHOUSE_TMP)]} {\n+    set CLICKHOUSE_TMP $env(CLICKHOUSE_TMP)\n+} else {\n+    set CLICKHOUSE_TMP \".\"\n+}\n+exp_internal -f $CLICKHOUSE_TMP/$basename.debuglog 0\n+set history_file $CLICKHOUSE_TMP/$basename.history\n \n log_user 0\n set timeout 60\ndiff --git a/tests/queries/0_stateless/02047_client_exception.expect b/tests/queries/0_stateless/02047_client_exception.expect\nindex 4dfdf211ba2b..d7dcb97867ac 100755\n--- a/tests/queries/0_stateless/02047_client_exception.expect\n+++ b/tests/queries/0_stateless/02047_client_exception.expect\n@@ -2,8 +2,13 @@\n \n set basedir [file dirname $argv0]\n set basename [file tail $argv0]\n-exp_internal -f $env(CLICKHOUSE_TMP)/$basename.debuglog 0\n-set history_file $env(CLICKHOUSE_TMP)/$basename.history\n+if {[info exists env(CLICKHOUSE_TMP)]} {\n+    set CLICKHOUSE_TMP $env(CLICKHOUSE_TMP)\n+} else {\n+    set CLICKHOUSE_TMP \".\"\n+}\n+exp_internal -f $CLICKHOUSE_TMP/$basename.debuglog 0\n+set history_file $CLICKHOUSE_TMP/$basename.history\n \n log_user 0\n set timeout 60\ndiff --git a/tests/queries/0_stateless/02049_clickhouse_local_merge_tree.expect b/tests/queries/0_stateless/02049_clickhouse_local_merge_tree.expect\nindex a14546962532..ddfd6e9d1589 100755\n--- a/tests/queries/0_stateless/02049_clickhouse_local_merge_tree.expect\n+++ b/tests/queries/0_stateless/02049_clickhouse_local_merge_tree.expect\n@@ -2,7 +2,12 @@\n \n set basedir [file dirname $argv0]\n set basename [file tail $argv0]\n-exp_internal -f $env(CLICKHOUSE_TMP)/$basename.debuglog 0\n+if {[info exists env(CLICKHOUSE_TMP)]} {\n+    set CLICKHOUSE_TMP $env(CLICKHOUSE_TMP)\n+} else {\n+    set CLICKHOUSE_TMP \".\"\n+}\n+exp_internal -f $CLICKHOUSE_TMP/$basename.debuglog 0\n \n log_user 0\n set timeout 60\ndiff --git a/tests/queries/0_stateless/02105_backslash_letter_commands.expect b/tests/queries/0_stateless/02105_backslash_letter_commands.expect\nindex 984e6f6d2ebd..7e78b7e72804 100755\n--- a/tests/queries/0_stateless/02105_backslash_letter_commands.expect\n+++ b/tests/queries/0_stateless/02105_backslash_letter_commands.expect\n@@ -2,8 +2,13 @@\n \n set basedir [file dirname $argv0]\n set basename [file tail $argv0]\n-exp_internal -f $env(CLICKHOUSE_TMP)/$basename.debuglog 0\n-set history_file $env(CLICKHOUSE_TMP)/$basename.history\n+if {[info exists env(CLICKHOUSE_TMP)]} {\n+    set CLICKHOUSE_TMP $env(CLICKHOUSE_TMP)\n+} else {\n+    set CLICKHOUSE_TMP \".\"\n+}\n+exp_internal -f $CLICKHOUSE_TMP/$basename.debuglog 0\n+set history_file $CLICKHOUSE_TMP/$basename.history\n \n log_user 0\n set timeout 60\ndiff --git a/tests/queries/0_stateless/02112_delayed_clickhouse_client_with_queries_file.expect b/tests/queries/0_stateless/02112_delayed_clickhouse_client_with_queries_file.expect\nindex 5f882ae98246..4b8524add80a 100755\n--- a/tests/queries/0_stateless/02112_delayed_clickhouse_client_with_queries_file.expect\n+++ b/tests/queries/0_stateless/02112_delayed_clickhouse_client_with_queries_file.expect\n@@ -2,7 +2,13 @@\n \n set basedir [file dirname $argv0]\n set basename [file tail $argv0]\n-exp_internal -f $env(CLICKHOUSE_TMP)/$basename.debuglog 0\n+if {[info exists env(CLICKHOUSE_TMP)]} {\n+    set CLICKHOUSE_TMP $env(CLICKHOUSE_TMP)\n+} else {\n+    set CLICKHOUSE_TMP \".\"\n+}\n+exp_internal -f $CLICKHOUSE_TMP/$basename.debuglog 0\n+set history_file $CLICKHOUSE_TMP/$basename.history\n \n log_user 0\n set timeout 20\n@@ -15,8 +21,8 @@ expect_after {\n     -i $any_spawn_id timeout { exit 1 }\n }\n \n-system \"echo \\\"drop table if exists t; create table t(i String) engine=Memory; insert into t select 'test string'\\\" > $env(CLICKHOUSE_TMP)/file_02112\"\n-spawn bash -c \"source $basedir/../shell_config.sh ; \\$CLICKHOUSE_CLIENT --disable_suggestion --interactive --queries-file $env(CLICKHOUSE_TMP)/file_02112\"\n+system \"echo \\\"drop table if exists t; create table t(i String) engine=Memory; insert into t select 'test string'\\\" > $CLICKHOUSE_TMP/file_02112\"\n+spawn bash -c \"source $basedir/../shell_config.sh ; \\$CLICKHOUSE_CLIENT --disable_suggestion --interactive --queries-file $CLICKHOUSE_TMP/file_02112\"\n expect \":) \"\n \n send -- \"select i from t format TSV\\r\"\ndiff --git a/tests/queries/0_stateless/02112_delayed_clickhouse_local.expect b/tests/queries/0_stateless/02112_delayed_clickhouse_local.expect\nindex 3413651fe688..9df889e7c902 100755\n--- a/tests/queries/0_stateless/02112_delayed_clickhouse_local.expect\n+++ b/tests/queries/0_stateless/02112_delayed_clickhouse_local.expect\n@@ -2,7 +2,12 @@\n \n set basedir [file dirname $argv0]\n set basename [file tail $argv0]\n-exp_internal -f $env(CLICKHOUSE_TMP)/$basename.debuglog 0\n+if {[info exists env(CLICKHOUSE_TMP)]} {\n+    set CLICKHOUSE_TMP $env(CLICKHOUSE_TMP)\n+} else {\n+    set CLICKHOUSE_TMP \".\"\n+}\n+exp_internal -f $CLICKHOUSE_TMP/$basename.debuglog 0\n \n log_user 0\n set timeout 20\ndiff --git a/tests/queries/0_stateless/02112_delayed_clickhouse_local_with_queries_file.expect b/tests/queries/0_stateless/02112_delayed_clickhouse_local_with_queries_file.expect\nindex 0a136ff2e747..0c07adf231de 100755\n--- a/tests/queries/0_stateless/02112_delayed_clickhouse_local_with_queries_file.expect\n+++ b/tests/queries/0_stateless/02112_delayed_clickhouse_local_with_queries_file.expect\n@@ -2,7 +2,12 @@\n \n set basedir [file dirname $argv0]\n set basename [file tail $argv0]\n-exp_internal -f $env(CLICKHOUSE_TMP)/$basename.debuglog 0\n+if {[info exists env(CLICKHOUSE_TMP)]} {\n+    set CLICKHOUSE_TMP $env(CLICKHOUSE_TMP)\n+} else {\n+    set CLICKHOUSE_TMP \".\"\n+}\n+exp_internal -f $CLICKHOUSE_TMP/$basename.debuglog 0\n \n log_user 0\n set timeout 20\n@@ -15,8 +20,8 @@ expect_after {\n     -i $any_spawn_id timeout { exit 1 }\n }\n \n-system \"echo \\\"drop table if exists t; create table t(i String) engine=Memory; insert into t select 'test string'\\\" > $env(CLICKHOUSE_TMP)/file_02112\"\n-spawn bash -c \"source $basedir/../shell_config.sh ; \\$CLICKHOUSE_LOCAL --disable_suggestion --interactive --queries-file $env(CLICKHOUSE_TMP)/file_02112\"\n+system \"echo \\\"drop table if exists t; create table t(i String) engine=Memory; insert into t select 'test string'\\\" > $CLICKHOUSE_TMP/file_02112\"\n+spawn bash -c \"source $basedir/../shell_config.sh ; \\$CLICKHOUSE_LOCAL --disable_suggestion --interactive --queries-file $CLICKHOUSE_TMP/file_02112\"\n expect \":) \"\n \n send -- \"select \\* from t format TSV\\r\"\ndiff --git a/tests/queries/0_stateless/02116_interactive_hello.expect b/tests/queries/0_stateless/02116_interactive_hello.expect\nindex 391cef751632..41cd515ea34b 100755\n--- a/tests/queries/0_stateless/02116_interactive_hello.expect\n+++ b/tests/queries/0_stateless/02116_interactive_hello.expect\n@@ -2,8 +2,13 @@\n \n set basedir [file dirname $argv0]\n set basename [file tail $argv0]\n-exp_internal -f $env(CLICKHOUSE_TMP)/$basename.debuglog 0\n-set history_file $env(CLICKHOUSE_TMP)/$basename.history\n+if {[info exists env(CLICKHOUSE_TMP)]} {\n+    set CLICKHOUSE_TMP $env(CLICKHOUSE_TMP)\n+} else {\n+    set CLICKHOUSE_TMP \".\"\n+}\n+exp_internal -f $CLICKHOUSE_TMP/$basename.debuglog 0\n+set history_file $CLICKHOUSE_TMP/$basename.history\n \n log_user 0\n set timeout 60\ndiff --git a/tests/queries/0_stateless/02132_client_history_navigation.expect b/tests/queries/0_stateless/02132_client_history_navigation.expect\nindex dc7e44b41ee4..3fba7ab1692d 100755\n--- a/tests/queries/0_stateless/02132_client_history_navigation.expect\n+++ b/tests/queries/0_stateless/02132_client_history_navigation.expect\n@@ -2,8 +2,13 @@\n \n set basedir [file dirname $argv0]\n set basename [file tail $argv0]\n-exp_internal -f $env(CLICKHOUSE_TMP)/$basename.debuglog 0\n-set history_file $env(CLICKHOUSE_TMP)/$basename.history\n+if {[info exists env(CLICKHOUSE_TMP)]} {\n+    set CLICKHOUSE_TMP $env(CLICKHOUSE_TMP)\n+} else {\n+    set CLICKHOUSE_TMP \".\"\n+}\n+exp_internal -f $CLICKHOUSE_TMP/$basename.debuglog 0\n+set history_file $CLICKHOUSE_TMP/$basename.history\n \n log_user 0\n set timeout 60\ndiff --git a/tests/queries/0_stateless/02160_client_autocomplete_parse_query.expect b/tests/queries/0_stateless/02160_client_autocomplete_parse_query.expect\nindex 01d61a6ad0ff..2d404b005c71 100755\n--- a/tests/queries/0_stateless/02160_client_autocomplete_parse_query.expect\n+++ b/tests/queries/0_stateless/02160_client_autocomplete_parse_query.expect\n@@ -2,8 +2,13 @@\n \n set basedir [file dirname $argv0]\n set basename [file tail $argv0]\n-exp_internal -f $env(CLICKHOUSE_TMP)/$basename.debuglog 0\n-set history_file $env(CLICKHOUSE_TMP)/$basename.history\n+if {[info exists env(CLICKHOUSE_TMP)]} {\n+    set CLICKHOUSE_TMP $env(CLICKHOUSE_TMP)\n+} else {\n+    set CLICKHOUSE_TMP \".\"\n+}\n+exp_internal -f $CLICKHOUSE_TMP/$basename.debuglog 0\n+set history_file $CLICKHOUSE_TMP/$basename.history\n \n log_user 0\n set timeout 60\ndiff --git a/tests/queries/0_stateless/02164_clickhouse_local_interactive_exception.expect b/tests/queries/0_stateless/02164_clickhouse_local_interactive_exception.expect\nindex 57a2d1c432b4..add977c4fce8 100755\n--- a/tests/queries/0_stateless/02164_clickhouse_local_interactive_exception.expect\n+++ b/tests/queries/0_stateless/02164_clickhouse_local_interactive_exception.expect\n@@ -2,7 +2,12 @@\n \n set basedir [file dirname $argv0]\n set basename [file tail $argv0]\n-exp_internal -f $env(CLICKHOUSE_TMP)/$basename.debuglog 0\n+if {[info exists env(CLICKHOUSE_TMP)]} {\n+    set CLICKHOUSE_TMP $env(CLICKHOUSE_TMP)\n+} else {\n+    set CLICKHOUSE_TMP \".\"\n+}\n+exp_internal -f $CLICKHOUSE_TMP/$basename.debuglog 0\n \n log_user 0\n set timeout 20\ndiff --git a/tests/queries/0_stateless/02310_clickhouse_client_INSERT_progress_profile_events.expect b/tests/queries/0_stateless/02310_clickhouse_client_INSERT_progress_profile_events.expect\nindex 9f6937cf80d9..e9b83d6c65a1 100755\n--- a/tests/queries/0_stateless/02310_clickhouse_client_INSERT_progress_profile_events.expect\n+++ b/tests/queries/0_stateless/02310_clickhouse_client_INSERT_progress_profile_events.expect\n@@ -8,7 +8,12 @@\n \n set basedir [file dirname $argv0]\n set basename [file tail $argv0]\n-exp_internal -f $env(CLICKHOUSE_TMP)/$basename.debuglog 0\n+if {[info exists env(CLICKHOUSE_TMP)]} {\n+    set CLICKHOUSE_TMP $env(CLICKHOUSE_TMP)\n+} else {\n+    set CLICKHOUSE_TMP \".\"\n+}\n+exp_internal -f $CLICKHOUSE_TMP/$basename.debuglog 0\n \n log_user 0\n set timeout 60\ndiff --git a/tests/queries/0_stateless/02310_clickhouse_local_INSERT_progress_profile_events.expect b/tests/queries/0_stateless/02310_clickhouse_local_INSERT_progress_profile_events.expect\nindex 5e514cd7c120..bde00b306cf3 100755\n--- a/tests/queries/0_stateless/02310_clickhouse_local_INSERT_progress_profile_events.expect\n+++ b/tests/queries/0_stateless/02310_clickhouse_local_INSERT_progress_profile_events.expect\n@@ -8,7 +8,12 @@\n \n set basedir [file dirname $argv0]\n set basename [file tail $argv0]\n-exp_internal -f $env(CLICKHOUSE_TMP)/$basename.debuglog 0\n+if {[info exists env(CLICKHOUSE_TMP)]} {\n+    set CLICKHOUSE_TMP $env(CLICKHOUSE_TMP)\n+} else {\n+    set CLICKHOUSE_TMP \".\"\n+}\n+exp_internal -f $CLICKHOUSE_TMP/$basename.debuglog 0\n \n log_user 0\n set timeout 60\ndiff --git a/tests/queries/0_stateless/02352_interactive_queries_from_file.expect b/tests/queries/0_stateless/02352_interactive_queries_from_file.expect\nindex e28fb38862c1..d11d55ba9419 100755\n--- a/tests/queries/0_stateless/02352_interactive_queries_from_file.expect\n+++ b/tests/queries/0_stateless/02352_interactive_queries_from_file.expect\n@@ -3,7 +3,12 @@\n \n set basedir [file dirname $argv0]\n set basename [file tail $argv0]\n-exp_internal -f $env(CLICKHOUSE_TMP)/$basename.debuglog 0\n+if {[info exists env(CLICKHOUSE_TMP)]} {\n+    set CLICKHOUSE_TMP $env(CLICKHOUSE_TMP)\n+} else {\n+    set CLICKHOUSE_TMP \".\"\n+}\n+exp_internal -f $CLICKHOUSE_TMP/$basename.debuglog 0\n \n log_user 0\n set timeout 20\ndiff --git a/tests/queries/0_stateless/02417_repeat_input_commands.expect b/tests/queries/0_stateless/02417_repeat_input_commands.expect\nindex 8070200c55cb..5a4b2840854a 100755\n--- a/tests/queries/0_stateless/02417_repeat_input_commands.expect\n+++ b/tests/queries/0_stateless/02417_repeat_input_commands.expect\n@@ -2,8 +2,13 @@\n \n set basedir [file dirname $argv0]\n set basename [file tail $argv0]\n-exp_internal -f $env(CLICKHOUSE_TMP)/$basename.debuglog 0\n-set history_file $env(CLICKHOUSE_TMP)/$basename.history\n+if {[info exists env(CLICKHOUSE_TMP)]} {\n+    set CLICKHOUSE_TMP $env(CLICKHOUSE_TMP)\n+} else {\n+    set CLICKHOUSE_TMP \".\"\n+}\n+exp_internal -f $CLICKHOUSE_TMP/$basename.debuglog 0\n+set history_file $CLICKHOUSE_TMP/$basename.history\n \n log_user 0\n set timeout 60\ndiff --git a/tests/queries/0_stateless/02456_progress_tty.expect b/tests/queries/0_stateless/02456_progress_tty.expect\nindex 3d1d92e5400b..dd11ad3d90c6 100755\n--- a/tests/queries/0_stateless/02456_progress_tty.expect\n+++ b/tests/queries/0_stateless/02456_progress_tty.expect\n@@ -2,7 +2,12 @@\n \n set basedir [file dirname $argv0]\n set basename [file tail $argv0]\n-exp_internal -f $env(CLICKHOUSE_TMP)/$basename.debuglog 0\n+if {[info exists env(CLICKHOUSE_TMP)]} {\n+    set CLICKHOUSE_TMP $env(CLICKHOUSE_TMP)\n+} else {\n+    set CLICKHOUSE_TMP \".\"\n+}\n+exp_internal -f $CLICKHOUSE_TMP/$basename.debuglog 0\n \n log_user 0\n set timeout 60\n@@ -18,34 +23,34 @@ spawn bash\n send \"source $basedir/../shell_config.sh\\r\"\n \n # Progress is not displayed by default\n-send \"\\$CLICKHOUSE_LOCAL --query 'SELECT sleep(1), \\$\\$Hello\\$\\$ FROM numbers(3) SETTINGS max_block_size = 1' 2>/dev/null\\r\"\n+send \"\\$CLICKHOUSE_LOCAL --format TSV --query 'SELECT sleep(1), \\$\\$Hello\\$\\$ FROM numbers(3) SETTINGS max_block_size = 1' 2>/dev/null\\r\"\n expect -exact \"0\\tHello\\r\\n\"\n send \"\\3\"\n \n # The option --progress has implicit value of true\n-send \"\\$CLICKHOUSE_LOCAL --progress --query 'SELECT sum(sleep(1) = 0) FROM numbers(3) SETTINGS max_block_size = 1' >/dev/null\\r\"\n+send \"\\$CLICKHOUSE_LOCAL --format TSV --progress --query 'SELECT sum(sleep(1) = 0) FROM numbers(3) SETTINGS max_block_size = 1' >/dev/null\\r\"\n expect \"Progress: \"\n expect \"\u2588\"\n send \"\\3\"\n \n # It works even if we redirect both stdout and stderr to /dev/null\n-send \"\\$CLICKHOUSE_LOCAL --progress --query 'SELECT sum(sleep(1) = 0) FROM numbers(3) SETTINGS max_block_size = 1' >/dev/null 2>&1\\r\"\n+send \"\\$CLICKHOUSE_LOCAL --format TSV --progress --query 'SELECT sum(sleep(1) = 0) FROM numbers(3) SETTINGS max_block_size = 1' >/dev/null 2>&1\\r\"\n expect \"Progress: \"\n expect \"\u2588\"\n send \"\\3\"\n \n # But we can set it to false\n-send \"\\$CLICKHOUSE_LOCAL --progress false --query 'SELECT sleep(1), \\$\\$Hello\\$\\$ FROM numbers(3) SETTINGS max_block_size = 1' 2>/dev/null\\r\"\n+send \"\\$CLICKHOUSE_LOCAL --format TSV --progress false --query 'SELECT sleep(1), \\$\\$Hello\\$\\$ FROM numbers(3) SETTINGS max_block_size = 1' 2>/dev/null\\r\"\n expect -exact \"0\\tHello\\r\\n\"\n send \"\\3\"\n \n # As well as to 0 for the same effect\n-send \"\\$CLICKHOUSE_LOCAL --progress 0 --query 'SELECT sleep(1), \\$\\$Hello\\$\\$ FROM numbers(3) SETTINGS max_block_size = 1' 2>/dev/null\\r\"\n+send \"\\$CLICKHOUSE_LOCAL --format TSV --progress 0 --query 'SELECT sleep(1), \\$\\$Hello\\$\\$ FROM numbers(3) SETTINGS max_block_size = 1' 2>/dev/null\\r\"\n expect -exact \"0\\tHello\\r\\n\"\n send \"\\3\"\n \n # If we set it to 1, the progress will be displayed as well\n-send \"\\$CLICKHOUSE_LOCAL --progress 1 --query 'SELECT sum(sleep(1) = 0) FROM numbers(3) SETTINGS max_block_size = 1' >/dev/null 2>&1\\r\"\n+send \"\\$CLICKHOUSE_LOCAL --format TSV --progress 1 --query 'SELECT sum(sleep(1) = 0) FROM numbers(3) SETTINGS max_block_size = 1' >/dev/null 2>&1\\r\"\n expect \"Progress: \"\n expect \"\u2588\"\n send \"\\3\"\ndiff --git a/tests/queries/0_stateless/02480_client_option_print_num_processed_rows.expect b/tests/queries/0_stateless/02480_client_option_print_num_processed_rows.expect\nindex dd3c9309b2d6..673a9a17c95b 100755\n--- a/tests/queries/0_stateless/02480_client_option_print_num_processed_rows.expect\n+++ b/tests/queries/0_stateless/02480_client_option_print_num_processed_rows.expect\n@@ -2,7 +2,12 @@\n \n set basedir [file dirname $argv0]\n set basename [file tail $argv0]\n-exp_internal -f $env(CLICKHOUSE_TMP)/$basename.debuglog 0\n+if {[info exists env(CLICKHOUSE_TMP)]} {\n+    set CLICKHOUSE_TMP $env(CLICKHOUSE_TMP)\n+} else {\n+    set CLICKHOUSE_TMP \".\"\n+}\n+exp_internal -f $CLICKHOUSE_TMP/$basename.debuglog 0\n \n log_user 0\n set timeout 60\ndiff --git a/tests/queries/0_stateless/02493_inconsistent_hex_and_binary_number.expect b/tests/queries/0_stateless/02493_inconsistent_hex_and_binary_number.expect\nindex 1cc11f9bf9f3..a111a0cfd23e 100755\n--- a/tests/queries/0_stateless/02493_inconsistent_hex_and_binary_number.expect\n+++ b/tests/queries/0_stateless/02493_inconsistent_hex_and_binary_number.expect\n@@ -2,7 +2,12 @@\n \n set basedir [file dirname $argv0]\n set basename [file tail $argv0]\n-exp_internal -f $env(CLICKHOUSE_TMP)/$basename.debuglog 0\n+if {[info exists env(CLICKHOUSE_TMP)]} {\n+    set CLICKHOUSE_TMP $env(CLICKHOUSE_TMP)\n+} else {\n+    set CLICKHOUSE_TMP \".\"\n+}\n+exp_internal -f $CLICKHOUSE_TMP/$basename.debuglog 0\n \n log_user 0\n set timeout 60\ndiff --git a/tests/queries/0_stateless/02775_show_columns_called_from_mysql.expect b/tests/queries/0_stateless/02775_show_columns_called_from_mysql.expect\nindex 3798acf2a935..4798a6958c61 100755\n--- a/tests/queries/0_stateless/02775_show_columns_called_from_mysql.expect\n+++ b/tests/queries/0_stateless/02775_show_columns_called_from_mysql.expect\n@@ -11,7 +11,12 @@\n \n set basedir [file dirname $argv0]\n set basename [file tail $argv0]\n-exp_internal -f $env(CLICKHOUSE_TMP)/$basename.debuglog 0\n+if {[info exists env(CLICKHOUSE_TMP)]} {\n+    set CLICKHOUSE_TMP $env(CLICKHOUSE_TMP)\n+} else {\n+    set CLICKHOUSE_TMP \".\"\n+}\n+exp_internal -f $CLICKHOUSE_TMP/$basename.debuglog 0\n log_user 0\n set timeout 60\n match_max 100000\ndiff --git a/tests/queries/0_stateless/02793_implicit_pretty_format_settings.expect b/tests/queries/0_stateless/02793_implicit_pretty_format_settings.expect\nindex 569cbc7330e7..1ceae0010284 100755\n--- a/tests/queries/0_stateless/02793_implicit_pretty_format_settings.expect\n+++ b/tests/queries/0_stateless/02793_implicit_pretty_format_settings.expect\n@@ -2,8 +2,13 @@\n \n set basedir [file dirname $argv0]\n set basename [file tail $argv0]\n-exp_internal -f $env(CLICKHOUSE_TMP)/$basename.debuglog 0\n-set history_file $env(CLICKHOUSE_TMP)/$basename.history\n+if {[info exists env(CLICKHOUSE_TMP)]} {\n+    set CLICKHOUSE_TMP $env(CLICKHOUSE_TMP)\n+} else {\n+    set CLICKHOUSE_TMP \".\"\n+}\n+exp_internal -f $CLICKHOUSE_TMP/$basename.debuglog 0\n+set history_file $CLICKHOUSE_TMP/$basename.history\n \n log_user 0\n set timeout 60\ndiff --git a/tests/queries/0_stateless/02907_suggestions_readonly_user.expect b/tests/queries/0_stateless/02907_suggestions_readonly_user.expect\nindex e329c8ee3762..025ccbfbae81 100755\n--- a/tests/queries/0_stateless/02907_suggestions_readonly_user.expect\n+++ b/tests/queries/0_stateless/02907_suggestions_readonly_user.expect\n@@ -3,8 +3,13 @@\n \n set basedir [file dirname $argv0]\n set basename [file tail $argv0]\n-exp_internal -f $env(CLICKHOUSE_TMP)/$basename.debuglog 0\n-set history_file $env(CLICKHOUSE_TMP)/$basename.history\n+if {[info exists env(CLICKHOUSE_TMP)]} {\n+    set CLICKHOUSE_TMP $env(CLICKHOUSE_TMP)\n+} else {\n+    set CLICKHOUSE_TMP \".\"\n+}\n+exp_internal -f $CLICKHOUSE_TMP/$basename.debuglog 0\n+set history_file $CLICKHOUSE_TMP/$basename.history\n \n log_user 0\n set timeout 60\ndiff --git a/tests/queries/0_stateless/02931_client_fuzzy_search_crash.expect b/tests/queries/0_stateless/02931_client_fuzzy_search_crash.expect\nindex 18acaf86a4b1..992ff85ca1eb 100755\n--- a/tests/queries/0_stateless/02931_client_fuzzy_search_crash.expect\n+++ b/tests/queries/0_stateless/02931_client_fuzzy_search_crash.expect\n@@ -2,8 +2,13 @@\n \n set basedir [file dirname $argv0]\n set basename [file tail $argv0]\n-exp_internal -f $env(CLICKHOUSE_TMP)/$basename.debuglog 0\n-set history_file $env(CLICKHOUSE_TMP)/$basename.history\n+if {[info exists env(CLICKHOUSE_TMP)]} {\n+    set CLICKHOUSE_TMP $env(CLICKHOUSE_TMP)\n+} else {\n+    set CLICKHOUSE_TMP \".\"\n+}\n+exp_internal -f $CLICKHOUSE_TMP/$basename.debuglog 0\n+set history_file $CLICKHOUSE_TMP/$basename.history\n \n log_user 0\n set timeout 60\ndiff --git a/tests/queries/0_stateless/03014_invalid_utf8_client.expect b/tests/queries/0_stateless/03014_invalid_utf8_client.expect\nindex 13cbfe408d48..6689e1a1179d 100755\n--- a/tests/queries/0_stateless/03014_invalid_utf8_client.expect\n+++ b/tests/queries/0_stateless/03014_invalid_utf8_client.expect\n@@ -2,8 +2,13 @@\n \n set basedir [file dirname $argv0]\n set basename [file tail $argv0]\n-exp_internal -f $env(CLICKHOUSE_TMP)/$basename.debuglog 0\n-set history_file $env(CLICKHOUSE_TMP)/$basename.history\n+if {[info exists env(CLICKHOUSE_TMP)]} {\n+    set CLICKHOUSE_TMP $env(CLICKHOUSE_TMP)\n+} else {\n+    set CLICKHOUSE_TMP \".\"\n+}\n+exp_internal -f $CLICKHOUSE_TMP/$basename.debuglog 0\n+set history_file $CLICKHOUSE_TMP/$basename.history\n \n log_user 0\n set timeout 60\ndiff --git a/tests/queries/0_stateless/03020_output_format_client.reference b/tests/queries/0_stateless/03020_output_format_client.reference\nindex 7738e2cffb2f..bcb6161e9a04 100644\n--- a/tests/queries/0_stateless/03020_output_format_client.reference\n+++ b/tests/queries/0_stateless/03020_output_format_client.reference\n@@ -10,3 +10,11 @@\n | x |\n |:-|\n | Hello, world |\n+Row 1:\n+\u2500\u2500\u2500\u2500\u2500\u2500\n+x: Hello, world\n+Row 1:\n+\u2500\u2500\u2500\u2500\u2500\u2500\n+x: Hello, world\n+Hello, world\n+Hello, world\ndiff --git a/tests/queries/0_stateless/03020_output_format_client.sh b/tests/queries/0_stateless/03020_output_format_client.sh\nindex b641af3e2e4d..d9de09ee02a9 100755\n--- a/tests/queries/0_stateless/03020_output_format_client.sh\n+++ b/tests/queries/0_stateless/03020_output_format_client.sh\n@@ -14,3 +14,7 @@ ${CLICKHOUSE_LOCAL} --output-format Markdown --query \"SELECT 'Hello, world' AS x\n ${CLICKHOUSE_CLIENT} --output-format Markdown --query \"SELECT 'Hello, world' AS x\"\n ${CLICKHOUSE_LOCAL} --format Markdown --query \"SELECT 'Hello, world' AS x\"\n ${CLICKHOUSE_CLIENT} --format Markdown --query \"SELECT 'Hello, world' AS x\"\n+${CLICKHOUSE_LOCAL} --vertical --query \"SELECT 'Hello, world' AS x\"\n+${CLICKHOUSE_CLIENT} --vertical --query \"SELECT 'Hello, world' AS x\"\n+${CLICKHOUSE_LOCAL} --query \"SELECT 'Hello, world' AS x\"\n+${CLICKHOUSE_CLIENT} --query \"SELECT 'Hello, world' AS x\"\ndiff --git a/tests/queries/0_stateless/03021_output_format_tty.reference b/tests/queries/0_stateless/03021_output_format_tty.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/03021_output_format_tty.sh b/tests/queries/0_stateless/03021_output_format_tty.sh\nnew file mode 100755\nindex 000000000000..dfc37c3b30ab\n--- /dev/null\n+++ b/tests/queries/0_stateless/03021_output_format_tty.sh\n@@ -0,0 +1,32 @@\n+#!/usr/bin/expect -f\n+\n+set basedir [file dirname $argv0]\n+set basename [file tail $argv0]\n+if {[info exists env(CLICKHOUSE_TMP)]} {\n+    set CLICKHOUSE_TMP $env(CLICKHOUSE_TMP)\n+} else {\n+    set CLICKHOUSE_TMP \".\"\n+}\n+exp_internal -f $CLICKHOUSE_TMP/$basename.debuglog 0\n+set history_file $CLICKHOUSE_TMP/$basename.history\n+\n+log_user 0\n+set timeout 60\n+match_max 100000\n+\n+expect_after {\n+    # Do not ignore eof from expect\n+    -i $any_spawn_id eof { exp_continue }\n+    # A default timeout action is to do nothing, change it to fail\n+    -i $any_spawn_id timeout { exit 1 }\n+}\n+\n+spawn bash -c \"source $basedir/../shell_config.sh ; \\$CLICKHOUSE_CLIENT --query 'SELECT 1'\"\n+expect \"\u2502 1 \u2502\"\n+expect \"\u2514\u2500\u2500\u2500\u2518\"\n+expect eof\n+\n+spawn bash -c \"source $basedir/../shell_config.sh ; \\$CLICKHOUSE_LOCAL --query 'SELECT 2'\"\n+expect \"\u2502 2 \u2502\"\n+expect \"\u2514\u2500\u2500\u2500\u2518\"\n+expect eof\n",
  "problem_statement": "If stdout is a terminal and the output format is not specified, `clickhouse-client` and similar tools should use `PrettyCompact` by default, similarly to the interactive mode.\n\n",
  "hints_text": "",
  "created_at": "2024-03-23T01:30:07Z",
  "modified_files": [
    "programs/client/Client.cpp",
    "programs/local/LocalServer.cpp",
    "src/Client/ClientBase.cpp",
    "src/Client/ClientBase.h",
    "utils/check-style/check-style"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/01176_mysql_client_interactive.expect",
    "tests/queries/0_stateless/01179_insert_values_semicolon.expect",
    "tests/queries/0_stateless/01180_client_syntax_errors.expect",
    "tests/queries/0_stateless/01293_client_interactive_vertical_multiline.expect",
    "tests/queries/0_stateless/01293_client_interactive_vertical_singleline.expect",
    "tests/queries/0_stateless/01300_client_save_history_when_terminated_long.expect",
    "tests/queries/0_stateless/01370_client_autocomplete_word_break_characters.expect",
    "tests/queries/0_stateless/01520_client_print_query_id.expect",
    "tests/queries/0_stateless/01565_query_loop_after_client_error.expect",
    "tests/queries/0_stateless/01755_client_highlight_multi_line_comment_regression.expect",
    "tests/queries/0_stateless/01910_client_replxx_container_overflow_long.expect",
    "tests/queries/0_stateless/01933_client_replxx_convert_history.expect",
    "tests/queries/0_stateless/01945_show_debug_warning.expect",
    "tests/queries/0_stateless/02047_client_exception.expect",
    "tests/queries/0_stateless/02049_clickhouse_local_merge_tree.expect",
    "tests/queries/0_stateless/02105_backslash_letter_commands.expect",
    "tests/queries/0_stateless/02112_delayed_clickhouse_client_with_queries_file.expect",
    "tests/queries/0_stateless/02112_delayed_clickhouse_local.expect",
    "tests/queries/0_stateless/02112_delayed_clickhouse_local_with_queries_file.expect",
    "tests/queries/0_stateless/02116_interactive_hello.expect",
    "tests/queries/0_stateless/02132_client_history_navigation.expect",
    "tests/queries/0_stateless/02160_client_autocomplete_parse_query.expect",
    "tests/queries/0_stateless/02164_clickhouse_local_interactive_exception.expect",
    "tests/queries/0_stateless/02310_clickhouse_client_INSERT_progress_profile_events.expect",
    "tests/queries/0_stateless/02310_clickhouse_local_INSERT_progress_profile_events.expect",
    "tests/queries/0_stateless/02352_interactive_queries_from_file.expect",
    "tests/queries/0_stateless/02417_repeat_input_commands.expect",
    "tests/queries/0_stateless/02456_progress_tty.expect",
    "tests/queries/0_stateless/02480_client_option_print_num_processed_rows.expect",
    "tests/queries/0_stateless/02493_inconsistent_hex_and_binary_number.expect",
    "tests/queries/0_stateless/02775_show_columns_called_from_mysql.expect",
    "tests/queries/0_stateless/02793_implicit_pretty_format_settings.expect",
    "tests/queries/0_stateless/02907_suggestions_readonly_user.expect",
    "tests/queries/0_stateless/02931_client_fuzzy_search_crash.expect",
    "tests/queries/0_stateless/03014_invalid_utf8_client.expect",
    "tests/queries/0_stateless/03020_output_format_client.reference",
    "tests/queries/0_stateless/03020_output_format_client.sh",
    "b/tests/queries/0_stateless/03021_output_format_tty.sh"
  ]
}