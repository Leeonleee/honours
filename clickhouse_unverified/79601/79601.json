{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 79601,
  "instance_id": "ClickHouse__ClickHouse-79601",
  "issue_numbers": [
    "79394"
  ],
  "base_commit": "3e26cb0a66762d5a2f2e5fc0d9e63de9d5030d35",
  "patch": "diff --git a/src/Core/FormatFactorySettings.h b/src/Core/FormatFactorySettings.h\nindex f3444a1dddf7..6471e30769f5 100644\n--- a/src/Core/FormatFactorySettings.h\n+++ b/src/Core/FormatFactorySettings.h\n@@ -286,7 +286,7 @@ Automatically detect header with names and types in CustomSeparated format\n     DECLARE(Bool, input_format_parquet_skip_columns_with_unsupported_types_in_schema_inference, false, R\"(\n Skip columns with unsupported types while schema inference for format Parquet\n )\", 0) \\\n-    DECLARE(UInt64, input_format_parquet_max_block_size, DEFAULT_BLOCK_SIZE, R\"(\n+    DECLARE(NonZeroUInt64, input_format_parquet_max_block_size, DEFAULT_BLOCK_SIZE, R\"(\n Max block size for parquet reader.\n )\", 0) \\\n     DECLARE(UInt64, input_format_parquet_prefer_block_bytes, DEFAULT_BLOCK_SIZE * 256, R\"(\ndiff --git a/src/Core/SettingsQuirks.cpp b/src/Core/SettingsQuirks.cpp\nindex 2793973a9f32..ba1eade91218 100644\n--- a/src/Core/SettingsQuirks.cpp\n+++ b/src/Core/SettingsQuirks.cpp\n@@ -52,7 +52,7 @@ namespace Setting\n {\n     extern const SettingsBool async_query_sending_for_remote;\n     extern const SettingsBool async_socket_for_remote;\n-    extern const SettingsUInt64 input_format_parquet_max_block_size;\n+    extern const SettingsNonZeroUInt64 input_format_parquet_max_block_size;\n     extern const SettingsNonZeroUInt64 max_block_size;\n     extern const SettingsUInt64 max_insert_block_size;\n     extern const SettingsUInt64 min_insert_block_size_rows;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03432_input_format_parquet_max_block_size_validation.reference b/tests/queries/0_stateless/03432_input_format_parquet_max_block_size_validation.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/03432_input_format_parquet_max_block_size_validation.sql b/tests/queries/0_stateless/03432_input_format_parquet_max_block_size_validation.sql\nnew file mode 100644\nindex 000000000000..65ebe10cdd64\n--- /dev/null\n+++ b/tests/queries/0_stateless/03432_input_format_parquet_max_block_size_validation.sql\n@@ -0,0 +1,11 @@\n+-- Tags: no-fasttest\n+\n+-- Test that setting input_format_parquet_max_block_size to 0 is not allowed\n+SET input_format_parquet_max_block_size = 0; -- { serverError BAD_ARGUMENTS }\n+\n+-- Test that negative values are not allowed\n+SET input_format_parquet_max_block_size = -1; -- { serverError CANNOT_CONVERT_TYPE }\n+\n+-- Test that valid positive values are allowed\n+SET input_format_parquet_max_block_size = 1024;\n+SELECT 'a' INTO OUTFILE '/dev/null' TRUNCATE FORMAT Parquet SETTINGS input_format_parquet_max_block_size = 1024;\n",
  "problem_statement": "input_format_parquet_max_block_size = 0 infinite loop with Parquet Native reader\n### Describe the bug\n\nYes, another variable = 0 issue \ud83d\ude22 \n\n### How to reproduce\n\nRun:\n\n```sql\nINSERT INTO TABLE FUNCTION file('<path to file>', 'Parquet', 'c0 Int') SELECT 1;\nSELECT * FROM file('<path to file>', Parquet, 'c0 Int') SETTINGS input_format_parquet_max_block_size = 0, input_format_parquet_use_native_reader = 1; --stuck\n```\n\n### Error message and/or stacktrace\n\n_No response_\n",
  "hints_text": "",
  "created_at": "2025-04-25T17:36:22Z",
  "modified_files": [
    "src/Core/FormatFactorySettings.h",
    "src/Core/SettingsQuirks.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03432_input_format_parquet_max_block_size_validation.sql"
  ]
}