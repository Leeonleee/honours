{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 80083,
  "instance_id": "ClickHouse__ClickHouse-80083",
  "issue_numbers": [
    "80053"
  ],
  "base_commit": "7b19d03497a18e24a6e9256c4baaf15bb7f22ac7",
  "patch": "diff --git a/src/Functions/reverse.cpp b/src/Functions/reverse.cpp\nindex d692c42d847d..7dbe324b734d 100644\n--- a/src/Functions/reverse.cpp\n+++ b/src/Functions/reverse.cpp\n@@ -1,11 +1,14 @@\n-#include <DataTypes/DataTypeString.h>\n-#include <Columns/ColumnFixedString.h>\n+#include <Functions/reverse.h>\n+\n #include <Columns/ColumnArray.h>\n+#include <Columns/ColumnFixedString.h>\n+#include <Columns/ColumnTuple.h>\n+#include <DataTypes/DataTypeString.h>\n+#include <DataTypes/DataTypeTuple.h>\n #include <Functions/FunctionFactory.h>\n #include <Functions/FunctionHelpers.h>\n #include <Functions/IFunctionAdaptors.h>\n #include <base/map.h>\n-#include \"reverse.h\"\n \n \n namespace DB\n@@ -46,11 +49,32 @@ class FunctionReverse : public IFunction\n \n     DataTypePtr getReturnTypeImpl(const DataTypes & arguments) const override\n     {\n-        if (!isStringOrFixedString(arguments[0])\n-            && !isArray(arguments[0]))\n+        if (!isStringOrFixedString(arguments[0]) && !isArray(arguments[0]) && !isTuple(arguments[0]))\n             throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT, \"Illegal type {} of argument of function {}\",\n                 arguments[0]->getName(), getName());\n \n+        if (isTuple(arguments[0]))\n+        {\n+            const auto & data_type_tuple = checkAndGetDataType<DataTypeTuple>(*arguments[0]);\n+            const auto & original_elements = data_type_tuple.getElements();\n+            const size_t element_count = original_elements.size();\n+\n+            DataTypes reversed_types;\n+            reversed_types.reserve(element_count);\n+            reversed_types.assign(original_elements.rbegin(), original_elements.rend());\n+\n+            if (data_type_tuple.haveExplicitNames())\n+            {\n+                const auto & original_names = data_type_tuple.getElementNames();\n+                Names reversed_names;\n+                reversed_names.reserve(element_count);\n+                reversed_names.assign(original_names.rbegin(), original_names.rend());\n+                return std::make_shared<DataTypeTuple>(reversed_types, reversed_names);\n+            }\n+\n+            return std::make_shared<DataTypeTuple>(reversed_types);\n+        }\n+\n         return arguments[0];\n     }\n \n@@ -71,6 +95,16 @@ class FunctionReverse : public IFunction\n             ReverseImpl::vectorFixed(col_fixed->getChars(), col_fixed->getN(), col_res->getChars(), input_rows_count);\n             return col_res;\n         }\n+        if (const ColumnTuple * col_tuple = checkAndGetColumn<ColumnTuple>(column.get()))\n+        {\n+            size_t tuple_size = col_tuple->tupleSize();\n+            Columns tuple_columns(tuple_size);\n+            for (size_t i = 0; i < tuple_size; ++i)\n+            {\n+                tuple_columns[i] = col_tuple->getColumnPtr(tuple_size - i - 1);\n+            }\n+            return ColumnTuple::create(tuple_columns);\n+        }\n         throw Exception(\n             ErrorCodes::ILLEGAL_COLUMN, \"Illegal column {} of argument of function {}\", arguments[0].column->getName(), getName());\n     }\n@@ -99,10 +133,7 @@ class ReverseOverloadResolver : public IFunctionOverloadResolver\n             return_type);\n     }\n \n-    DataTypePtr getReturnTypeImpl(const DataTypes & arguments) const override\n-    {\n-        return arguments.at(0);\n-    }\n+    DataTypePtr getReturnTypeImpl(const DataTypes & arguments) const override { return FunctionReverse{}.getReturnTypeImpl(arguments); }\n \n private:\n     ContextPtr context;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02233_interpolate_1.sql b/tests/queries/0_stateless/02233_interpolate_1.sql\nindex 36b7c4dbc6a9..453de421f22d 100644\n--- a/tests/queries/0_stateless/02233_interpolate_1.sql\n+++ b/tests/queries/0_stateless/02233_interpolate_1.sql\n@@ -26,7 +26,7 @@ SELECT n, source, inter FROM (\n # Test INTERPOLATE with incompatible expression - should produce error\n SELECT n, source, inter FROM (\n    SELECT toFloat32(number % 10) AS n, 'original' AS source, number as inter FROM numbers(10) WHERE number % 3 = 1\n-) ORDER BY n WITH FILL FROM 0 TO 11.51 STEP 0.5 INTERPOLATE (inter AS reverse(inter)); -- { serverError ILLEGAL_COLUMN }\n+) ORDER BY n WITH FILL FROM 0 TO 11.51 STEP 0.5 INTERPOLATE (inter AS reverse(inter)); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\n \n # Test INTERPOLATE with column from WITH FILL expression - should produce error\n SELECT n, source, inter FROM (\ndiff --git a/tests/queries/0_stateless/03447_function_reverse_for_tuple.reference b/tests/queries/0_stateless/03447_function_reverse_for_tuple.reference\nnew file mode 100644\nindex 000000000000..1d865e2ebf46\n--- /dev/null\n+++ b/tests/queries/0_stateless/03447_function_reverse_for_tuple.reference\n@@ -0,0 +1,7 @@\n+([2,3],'Hello',1)\n+('hello',1)\n+('world',2)\n+('clickhouse',3)\n+1\thello\n+2\tworld\n+3\tclickhouse\ndiff --git a/tests/queries/0_stateless/03447_function_reverse_for_tuple.sql b/tests/queries/0_stateless/03447_function_reverse_for_tuple.sql\nnew file mode 100644\nindex 000000000000..a3783c2f7bec\n--- /dev/null\n+++ b/tests/queries/0_stateless/03447_function_reverse_for_tuple.sql\n@@ -0,0 +1,12 @@\n+SELECT reverse((1, 'Hello', [2, 3]));\n+\n+DROP TABLE IF EXISTS t_tuple;\n+\n+CREATE TABLE t_tuple(tuple Tuple(a Int32, b String)) engine = MergeTree order by tuple();\n+\n+INSERT INTO t_tuple VALUES((1, 'hello')), ((2, 'world')), ((3, 'clickhouse'));\n+\n+SELECT reverse(tuple) FROM t_tuple;\n+SELECT reverse(tuple).a, reverse(tuple).b FROM t_tuple;\n+\n+DROP TABLE t_tuple;\n",
  "problem_statement": "Function `reverse` should apply for tuples\n### Company or project name\n\nClickHouse\n\n### Use case\n\n`SELECT reserve((1, 'Hello', [2, 3]))`\n\nshould return\n```\n([2, 3], 'Hello', 1)\n```\n\n### Describe the solution you'd like\n\nIt will have zero cost, as it does no physical data movement.\n\n### Describe alternatives you've considered\n\nThis is only marginally useful.\n\n### Additional context\n\n_No response_\n",
  "hints_text": "",
  "created_at": "2025-05-11T16:51:49Z"
}