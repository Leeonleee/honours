{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 30180,
  "instance_id": "ClickHouse__ClickHouse-30180",
  "issue_numbers": [
    "29005"
  ],
  "base_commit": "d1138a8a2591c2b9be36a1118e7ca8bb311c0019",
  "patch": "diff --git a/src/Databases/DatabaseOnDisk.cpp b/src/Databases/DatabaseOnDisk.cpp\nindex 97e59f53f64f..638aef7186c1 100644\n--- a/src/Databases/DatabaseOnDisk.cpp\n+++ b/src/Databases/DatabaseOnDisk.cpp\n@@ -180,6 +180,8 @@ void applyMetadataChangesToCreateQuery(const ASTPtr & query, const StorageInMemo\n \n             if (metadata.sampling_key.definition_ast)\n                 storage_ast.set(storage_ast.sample_by, metadata.sampling_key.definition_ast);\n+            else if (storage_ast.sample_by != nullptr) /// SAMPLE BY was removed\n+                storage_ast.sample_by = nullptr;\n \n             if (metadata.table_ttl.definition_ast)\n                 storage_ast.set(storage_ast.ttl_table, metadata.table_ttl.definition_ast);\ndiff --git a/src/Interpreters/InterpreterAlterQuery.cpp b/src/Interpreters/InterpreterAlterQuery.cpp\nindex 90d5da35df87..ace82f47f057 100644\n--- a/src/Interpreters/InterpreterAlterQuery.cpp\n+++ b/src/Interpreters/InterpreterAlterQuery.cpp\n@@ -270,6 +270,7 @@ AccessRightsElements InterpreterAlterQuery::getRequiredAccessForCommand(const AS\n             required_access.emplace_back(AccessType::ALTER_ORDER_BY, database, table);\n             break;\n         }\n+        case ASTAlterCommand::REMOVE_SAMPLE_BY:\n         case ASTAlterCommand::MODIFY_SAMPLE_BY:\n         {\n             required_access.emplace_back(AccessType::ALTER_SAMPLE_BY, database, table);\ndiff --git a/src/Parsers/ASTAlterQuery.cpp b/src/Parsers/ASTAlterQuery.cpp\nindex 53d53bf5ae1f..d3153952114d 100644\n--- a/src/Parsers/ASTAlterQuery.cpp\n+++ b/src/Parsers/ASTAlterQuery.cpp\n@@ -157,6 +157,10 @@ void ASTAlterCommand::formatImpl(const FormatSettings & settings, FormatState &\n         settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \"MODIFY SAMPLE BY \" << (settings.hilite ? hilite_none : \"\");\n         sample_by->formatImpl(settings, state, frame);\n     }\n+    else if (type == ASTAlterCommand::REMOVE_SAMPLE_BY)\n+    {\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \"REMOVE SAMPLE BY\" << (settings.hilite ? hilite_none : \"\");\n+    }\n     else if (type == ASTAlterCommand::ADD_INDEX)\n     {\n         settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \"ADD INDEX \" << (if_not_exists ? \"IF NOT EXISTS \" : \"\")\ndiff --git a/src/Parsers/ASTAlterQuery.h b/src/Parsers/ASTAlterQuery.h\nindex 9b40586e09f1..3e0d92195493 100644\n--- a/src/Parsers/ASTAlterQuery.h\n+++ b/src/Parsers/ASTAlterQuery.h\n@@ -41,6 +41,7 @@ class ASTAlterCommand : public IAST\n         RESET_SETTING,\n         MODIFY_QUERY,\n         REMOVE_TTL,\n+        REMOVE_SAMPLE_BY,\n \n         ADD_INDEX,\n         DROP_INDEX,\ndiff --git a/src/Parsers/ParserAlterQuery.cpp b/src/Parsers/ParserAlterQuery.cpp\nindex 2eade2079da5..1ea64d94fe7f 100644\n--- a/src/Parsers/ParserAlterQuery.cpp\n+++ b/src/Parsers/ParserAlterQuery.cpp\n@@ -104,6 +104,7 @@ bool ParserAlterCommand::parseImpl(Pos & pos, ASTPtr & node, Expected & expected\n     ParserKeyword s_ttl(\"TTL\");\n \n     ParserKeyword s_remove_ttl(\"REMOVE TTL\");\n+    ParserKeyword s_remove_sample_by(\"REMOVE SAMPLE BY\");\n \n     ParserCompoundIdentifier parser_name;\n     ParserStringLiteral parser_string_literal;\n@@ -669,6 +670,10 @@ bool ParserAlterCommand::parseImpl(Pos & pos, ASTPtr & node, Expected & expected\n \n                 command->type = ASTAlterCommand::MODIFY_SAMPLE_BY;\n             }\n+            else if (s_remove_sample_by.ignore(pos, expected))\n+            {\n+                command->type = ASTAlterCommand::REMOVE_SAMPLE_BY;\n+            }\n             else if (s_delete.ignore(pos, expected))\n             {\n                 if (s_in_partition.ignore(pos, expected))\ndiff --git a/src/Storages/AlterCommands.cpp b/src/Storages/AlterCommands.cpp\nindex 1d057d1bb106..c5101f162ee1 100644\n--- a/src/Storages/AlterCommands.cpp\n+++ b/src/Storages/AlterCommands.cpp\n@@ -205,6 +205,13 @@ std::optional<AlterCommand> AlterCommand::parse(const ASTAlterCommand * command_\n         command.sample_by = command_ast->sample_by;\n         return command;\n     }\n+    else if (command_ast->type == ASTAlterCommand::REMOVE_SAMPLE_BY)\n+    {\n+        AlterCommand command;\n+        command.ast = command_ast->clone();\n+        command.type = AlterCommand::REMOVE_SAMPLE_BY;\n+        return command;\n+    }\n     else if (command_ast->type == ASTAlterCommand::ADD_INDEX)\n     {\n         AlterCommand command;\n@@ -463,6 +470,10 @@ void AlterCommand::apply(StorageInMemoryMetadata & metadata, ContextPtr context)\n     {\n         metadata.sampling_key.recalculateWithNewAST(sample_by, metadata.columns, context);\n     }\n+    else if (type == REMOVE_SAMPLE_BY)\n+    {\n+        metadata.sampling_key = {};\n+    }\n     else if (type == COMMENT_COLUMN)\n     {\n         metadata.columns.modify(column_name,\n@@ -745,7 +756,7 @@ bool AlterCommand::isRequireMutationStage(const StorageInMemoryMetadata & metada\n         return false;\n \n     /// We remove properties on metadata level\n-    if (isRemovingProperty() || type == REMOVE_TTL)\n+    if (isRemovingProperty() || type == REMOVE_TTL || type == REMOVE_SAMPLE_BY)\n         return false;\n \n     if (type == DROP_COLUMN || type == DROP_INDEX || type == DROP_PROJECTION || type == RENAME_COLUMN)\n@@ -1208,6 +1219,10 @@ void AlterCommands::validate(const StorageInMemoryMetadata & metadata, ContextPt\n         {\n             throw Exception{\"Table doesn't have any table TTL expression, cannot remove\", ErrorCodes::BAD_ARGUMENTS};\n         }\n+        else if (command.type == AlterCommand::REMOVE_SAMPLE_BY && !metadata.hasSamplingKey())\n+        {\n+            throw Exception{\"Table doesn't have SAMPLE BY, cannot remove\", ErrorCodes::BAD_ARGUMENTS};\n+        }\n \n         /// Collect default expressions for MODIFY and ADD comands\n         if (command.type == AlterCommand::MODIFY_COLUMN || command.type == AlterCommand::ADD_COLUMN)\ndiff --git a/src/Storages/AlterCommands.h b/src/Storages/AlterCommands.h\nindex 046238bd5f53..dce6b4967416 100644\n--- a/src/Storages/AlterCommands.h\n+++ b/src/Storages/AlterCommands.h\n@@ -45,7 +45,8 @@ struct AlterCommand\n         RENAME_COLUMN,\n         REMOVE_TTL,\n         MODIFY_DATABASE_SETTING,\n-        COMMENT_TABLE\n+        COMMENT_TABLE,\n+        REMOVE_SAMPLE_BY,\n     };\n \n     /// Which property user wants to remove from column\ndiff --git a/src/Storages/MergeTree/MergeTreeData.cpp b/src/Storages/MergeTree/MergeTreeData.cpp\nindex 790b95a9fa91..3866f760a361 100644\n--- a/src/Storages/MergeTree/MergeTreeData.cpp\n+++ b/src/Storages/MergeTree/MergeTreeData.cpp\n@@ -249,7 +249,7 @@ MergeTreeData::MergeTreeData(\n     {\n         /// This is for backward compatibility.\n         checkSampleExpression(metadata_, attach || settings->compatibility_allow_sampling_expression_not_in_primary_key,\n-                              settings->check_sample_column_is_correct);\n+                              settings->check_sample_column_is_correct && !attach);\n     }\n \n     checkTTLExpressions(metadata_, metadata_);\ndiff --git a/src/Storages/StorageReplicatedMergeTree.cpp b/src/Storages/StorageReplicatedMergeTree.cpp\nindex 416d37cd3513..5677ae6604fb 100644\n--- a/src/Storages/StorageReplicatedMergeTree.cpp\n+++ b/src/Storages/StorageReplicatedMergeTree.cpp\n@@ -1016,8 +1016,15 @@ void StorageReplicatedMergeTree::setTableStructure(\n \n         if (metadata_diff.sampling_expression_changed)\n         {\n-            auto sample_by_ast = parse_key_expr(metadata_diff.new_sampling_expression);\n-            new_metadata.sampling_key.recalculateWithNewAST(sample_by_ast, new_metadata.columns, getContext());\n+            if (!metadata_diff.new_sampling_expression.empty())\n+            {\n+                auto sample_by_ast = parse_key_expr(metadata_diff.new_sampling_expression);\n+                new_metadata.sampling_key.recalculateWithNewAST(sample_by_ast, new_metadata.columns, getContext());\n+            }\n+            else /// SAMPLE BY was removed\n+            {\n+                new_metadata.sampling_key = {};\n+            }\n         }\n \n         if (metadata_diff.skip_indices_changed)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01604_explain_ast_of_nonselect_query.reference b/tests/queries/0_stateless/01604_explain_ast_of_nonselect_query.reference\nindex 3545278ec1a1..3c92ffb0a8cd 100644\n--- a/tests/queries/0_stateless/01604_explain_ast_of_nonselect_query.reference\n+++ b/tests/queries/0_stateless/01604_explain_ast_of_nonselect_query.reference\n@@ -1,6 +1,6 @@\n AlterQuery  t1 (children 1)\n  ExpressionList (children 1)\n-  AlterCommand 32 (children 1)\n+  AlterCommand 33 (children 1)\n    Function equals (children 1)\n     ExpressionList (children 2)\n      Identifier date\ndiff --git a/tests/queries/0_stateless/02097_remove_sample_by.reference b/tests/queries/0_stateless/02097_remove_sample_by.reference\nnew file mode 100644\nindex 000000000000..0747bbd5d1f1\n--- /dev/null\n+++ b/tests/queries/0_stateless/02097_remove_sample_by.reference\n@@ -0,0 +1,3 @@\n+CREATE TABLE default.t_remove_sample_by\\n(\\n    `id` UInt64\\n)\\nENGINE = MergeTree\\nORDER BY id\\nSETTINGS index_granularity = 8192\n+CREATE TABLE default.t_remove_sample_by\\n(\\n    `id` UInt64\\n)\\nENGINE = ReplicatedMergeTree(\\'/clickhouse/default/t_remove_sample_by\\', \\'1\\')\\nORDER BY id\\nSETTINGS index_granularity = 8192\n+CREATE TABLE default.t_remove_sample_by\\n(\\n    `id` String\\n)\\nENGINE = MergeTree\\nORDER BY id\\nSETTINGS index_granularity = 8192\ndiff --git a/tests/queries/0_stateless/02097_remove_sample_by.sql b/tests/queries/0_stateless/02097_remove_sample_by.sql\nnew file mode 100644\nindex 000000000000..89fbfe0c4c57\n--- /dev/null\n+++ b/tests/queries/0_stateless/02097_remove_sample_by.sql\n@@ -0,0 +1,44 @@\n+-- Tags: zookeeper\n+\n+DROP TABLE IF EXISTS t_remove_sample_by;\n+\n+CREATE TABLE t_remove_sample_by(id UInt64) ENGINE = MergeTree ORDER BY id SAMPLE BY id;\n+\n+ALTER TABLE t_remove_sample_by REMOVE SAMPLE BY;\n+SHOW CREATE TABLE t_remove_sample_by;\n+\n+ALTER TABLE t_remove_sample_by REMOVE SAMPLE BY; -- { serverError 36 }\n+SELECT * FROM t_remove_sample_by SAMPLE 1 / 10; -- { serverError 141 }\n+\n+DROP TABLE t_remove_sample_by;\n+\n+CREATE TABLE t_remove_sample_by(id UInt64)\n+ENGINE = ReplicatedMergeTree('/clickhouse/{database}/t_remove_sample_by', '1')\n+ORDER BY id SAMPLE BY id;\n+\n+ALTER TABLE t_remove_sample_by REMOVE SAMPLE BY;\n+SHOW CREATE TABLE t_remove_sample_by;\n+\n+DROP TABLE t_remove_sample_by;\n+\n+CREATE TABLE t_remove_sample_by(id UInt64) ENGINE = Memory;\n+ALTER TABLE t_remove_sample_by REMOVE SAMPLE BY; -- { serverError 36 }\n+\n+DROP TABLE t_remove_sample_by;\n+\n+CREATE TABLE t_remove_sample_by(id String)\n+ENGINE = MergeTree ORDER BY id SAMPLE BY id\n+SETTINGS check_sample_column_is_correct = 0;\n+\n+ALTER TABLE t_remove_sample_by RESET SETTING check_sample_column_is_correct;\n+\n+DETACH TABLE t_remove_sample_by;\n+ATTACH TABLE t_remove_sample_by;\n+\n+INSERT INTO t_remove_sample_by VALUES (1);\n+SELECT * FROM t_remove_sample_by SAMPLE 1 / 10; -- { serverError 59 }\n+\n+ALTER TABLE t_remove_sample_by REMOVE SAMPLE BY;\n+SHOW CREATE TABLE t_remove_sample_by;\n+\n+DROP TABLE t_remove_sample_by;\n",
  "problem_statement": "UUID as a sampling key don't work anymore since 21.9\n```\r\n2021.09.13 06:59:35.799363 [ 11 ] {} <Error> Application: DB::Exception: Invalid sampling column type in storage parameters: UUID. Must be one unsigned integer type: Cannot attach table `playground`.`events_prod` from metadata file /var/lib/clickhouse/metadata/playground/events_prod.sql from query ATTACH TABLE playground.events_prod (`uuid` UUID, `event` String, `timestamp` DateTime64(6, 'UTC'), `distinct_id` String, `team_id` Int64, `_timestamp` DateTime) ENGINE = ReplacingMergeTree(_timestamp) PARTITION BY toYYYYMM(timestamp) ORDER BY (team_id, toDate(timestamp), distinct_id, uuid) SAMPLE BY uuid SETTINGS index_granularity = 8192: while loading database `playground` from path /var/lib/clickhouse/metadata/playground\r\n```\r\n\r\n21.8 works\n",
  "hints_text": "It didn't work anyway.\r\n\r\n```sql\r\nCREATE TABLE events_prod\r\n(\r\n    `uuid` UUID,\r\n    `event` String,\r\n    `timestamp` DateTime64(6, 'UTC'),\r\n    `distinct_id` String,\r\n    `team_id` Int64,\r\n    `_timestamp` DateTime\r\n)\r\nENGINE = ReplacingMergeTree(_timestamp)\r\nPARTITION BY toYYYYMM(timestamp)\r\nORDER BY (team_id, toDate(timestamp), distinct_id, uuid)\r\nSAMPLE BY uuid\r\nSETTINGS index_granularity = 8192\r\n```\r\n\r\n```sql\r\nINSERT INTO events_prod (uuid) VALUES ('c2be5ef2-1b5a-40ad-8034-a5815631e733');\r\n\r\nSELECT * FROM events_prod SAMPLE 1 / 10;\r\n\r\nReceived exception from server (version 21.8.5):\r\nCode: 59. DB::Exception: Received from localhost:9000. DB::Exception: Invalid sampling column type in storage parameters: UUID. Must be one unsigned integer type. (ILLEGAL_TYPE_OF_COLUMN_FOR_FILTER)\r\n```\r\n\r\nHowever, in fresh versions you can set compatibility setting `check_sample_column_is_correct = false` in `MergeTree` settings \r\n to allow server to start up.\r\n\njust one questions, why?\r\nhow to remove sampling key without rebuilding table?",
  "created_at": "2021-10-14T14:10:26Z"
}