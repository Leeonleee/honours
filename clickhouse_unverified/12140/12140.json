{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 12140,
  "instance_id": "ClickHouse__ClickHouse-12140",
  "issue_numbers": [
    "12119"
  ],
  "base_commit": "c696354dd4f02a33f7e254ae8d4e9095a6c7e003",
  "patch": "diff --git a/src/Functions/intDiv.cpp b/src/Functions/intDiv.cpp\nindex d21e779045fc..7e34f106147c 100644\n--- a/src/Functions/intDiv.cpp\n+++ b/src/Functions/intDiv.cpp\n@@ -26,12 +26,11 @@ struct DivideIntegralByConstantImpl\n \n     static NO_INLINE void vectorConstant(const A * __restrict a_pos, B b, ResultType * __restrict c_pos, size_t size)\n     {\n-        if (unlikely(b == 0))\n-            throw Exception(\"Division by zero\", ErrorCodes::ILLEGAL_DIVISION);\n-\n #pragma GCC diagnostic push\n #pragma GCC diagnostic ignored \"-Wsign-compare\"\n \n+        /// Division by -1. By the way, we avoid FPE by division of the largest negative number by -1.\n+        /// And signed integer overflow is well defined in C++20.\n         if (unlikely(is_signed_v<B> && b == -1))\n         {\n             for (size_t i = 0; i < size; ++i)\n@@ -39,8 +38,20 @@ struct DivideIntegralByConstantImpl\n             return;\n         }\n \n+        /// Division with too large divisor.\n+        if (unlikely(b > std::numeric_limits<A>::max()\n+            || (std::is_signed_v<A> && std::is_signed_v<B> && b < std::numeric_limits<A>::lowest())))\n+        {\n+            for (size_t i = 0; i < size; ++i)\n+                c_pos[i] = 0;\n+            return;\n+        }\n+\n #pragma GCC diagnostic pop\n \n+        if (unlikely(static_cast<A>(b) == 0))\n+            throw Exception(\"Division by zero\", ErrorCodes::ILLEGAL_DIVISION);\n+\n         libdivide::divider<A> divider(b);\n \n         const A * a_end = a_pos + size;\ndiff --git a/src/Functions/modulo.cpp b/src/Functions/modulo.cpp\nindex 631b7d122635..c90a590da617 100644\n--- a/src/Functions/modulo.cpp\n+++ b/src/Functions/modulo.cpp\n@@ -27,12 +27,10 @@ struct ModuloByConstantImpl\n \n     static NO_INLINE void vectorConstant(const A * __restrict src, B b, ResultType * __restrict dst, size_t size)\n     {\n-        if (unlikely(b == 0))\n-            throw Exception(\"Division by zero\", ErrorCodes::ILLEGAL_DIVISION);\n-\n #pragma GCC diagnostic push\n #pragma GCC diagnostic ignored \"-Wsign-compare\"\n \n+        /// Modulo with too small divisor.\n         if (unlikely((std::is_signed_v<B> && b == -1) || b == 1))\n         {\n             for (size_t i = 0; i < size; ++i)\n@@ -40,8 +38,20 @@ struct ModuloByConstantImpl\n             return;\n         }\n \n+        /// Modulo with too large divisor.\n+        if (unlikely(b > std::numeric_limits<A>::max()\n+            || (std::is_signed_v<A> && std::is_signed_v<B> && b < std::numeric_limits<A>::lowest())))\n+        {\n+            for (size_t i = 0; i < size; ++i)\n+                dst[i] = src[i];\n+            return;\n+        }\n+\n #pragma GCC diagnostic pop\n \n+        if (unlikely(static_cast<A>(b) == 0))\n+            throw Exception(\"Division by zero\", ErrorCodes::ILLEGAL_DIVISION);\n+\n         libdivide::divider<A> divider(b);\n \n         /// Here we failed to make the SSE variant from libdivide give an advantage.\ndiff --git a/src/Interpreters/createBlockSelector.cpp b/src/Interpreters/createBlockSelector.cpp\nindex 0759b9d9601b..c3d4bcdda488 100644\n--- a/src/Interpreters/createBlockSelector.cpp\n+++ b/src/Interpreters/createBlockSelector.cpp\n@@ -21,6 +21,8 @@ IColumn::Selector createBlockSelector(\n     const std::vector<UInt64> & slots)\n {\n     const auto total_weight = slots.size();\n+    assert(total_weight != 0);\n+\n     size_t num_rows = column.size();\n     IColumn::Selector selector(num_rows);\n \ndiff --git a/src/Storages/Distributed/DistributedBlockOutputStream.cpp b/src/Storages/Distributed/DistributedBlockOutputStream.cpp\nindex bf9efef1ba6d..546eb5a15a4b 100644\n--- a/src/Storages/Distributed/DistributedBlockOutputStream.cpp\n+++ b/src/Storages/Distributed/DistributedBlockOutputStream.cpp\n@@ -15,7 +15,6 @@\n #include <DataStreams/ConvertingBlockInputStream.h>\n #include <DataStreams/OneBlockInputStream.h>\n #include <Interpreters/InterpreterInsertQuery.h>\n-#include <Interpreters/createBlockSelector.h>\n #include <Interpreters/ExpressionActions.h>\n #include <Interpreters/Context.h>\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01360_division_overflow.reference b/tests/queries/0_stateless/01360_division_overflow.reference\nnew file mode 100644\nindex 000000000000..a4acafeee604\n--- /dev/null\n+++ b/tests/queries/0_stateless/01360_division_overflow.reference\n@@ -0,0 +1,6 @@\n+0\n+0\n+0\n+1\n+3\n+5\ndiff --git a/tests/queries/0_stateless/01360_division_overflow.sql b/tests/queries/0_stateless/01360_division_overflow.sql\nnew file mode 100644\nindex 000000000000..75601a365366\n--- /dev/null\n+++ b/tests/queries/0_stateless/01360_division_overflow.sql\n@@ -0,0 +1,5 @@\n+select intDiv(materialize(toInt32(1)), 0x100000000);\n+select intDiv(materialize(toInt32(1)), -0x100000000);\n+select intDiv(materialize(toInt32(1)), -9223372036854775808);\n+select materialize(toInt32(1)) % -9223372036854775808;\n+select value % -9223372036854775808 from (select toInt32(arrayJoin([3, 5])) value);\n",
  "problem_statement": "libdivide.h:876: libdivide_internal_s32_gen(): Error: divider must be != 0\n```\r\nselect value % -9223372036854775808 from (select toInt32(arrayJoin([3, 5])) value)\r\n```\r\n\r\nServer dies (aborted), no stacktraces, only the subject line in log. Does not reproduce on playground for some reason.\n",
  "hints_text": "Because `libdivide` is using `exit` instead of `abort`:\r\n\r\n```\r\n#0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50\r\n#1  0x00007ffff7da8899 in __GI_abort () at abort.c:79\r\n#2  0x000000000d9329b1 in terminate_handler () at ../base/daemon/BaseDaemon.cpp:387\r\n#3  0x0000000010dced33 in std::__terminate (func=0x2) at ../contrib/libcxxabi/src/cxa_handlers.cpp:59\r\n#4  0x0000000010dcecd9 in std::terminate () at ../contrib/libcxxabi/src/cxa_handlers.cpp:88\r\n#5  0x0000000009a72e0b in __clang_call_terminate () at ../contrib/libcxx/include/new:326\r\n#6  0x000000000e25a594 in DB::StorageReplicatedMergeTree::~StorageReplicatedMergeTree (this=0x7fff80713000) at ../src/Storages/StorageReplicatedMergeTree.cpp:3344\r\n#7  0x000000000e488fa2 in std::__1::default_delete<DB::StorageReplicatedMergeTree>::operator() (__ptr=0x7fff80713000, this=<optimized out>) at ../contrib/libcxx/include/memory:2363\r\n#8  std::__1::__shared_ptr_pointer<DB::StorageReplicatedMergeTree*, std::__1::default_delete<DB::StorageReplicatedMergeTree>, std::__1::allocator<DB::StorageReplicatedMergeTree> >::__on_zero_shared (this=<optimized out>) at ../contrib/libcxx/include/memory:3536\r\n#9  0x0000000009b48893 in std::__1::__shared_count::__release_shared (this=0x7fff8067aa00) at ../contrib/libcxx/include/memory:3440\r\n#10 std::__1::__shared_weak_count::__release_shared (this=0x7fff8067aa00) at ../contrib/libcxx/include/memory:3482\r\n#11 std::__1::shared_ptr<DB::IStorage>::~shared_ptr (this=0x7fff80635418) at ../contrib/libcxx/include/memory:4207\r\n#12 std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, std::__1::shared_ptr<DB::IStorage> >::~pair (this=0x7fff80635400)\r\n    at ../contrib/libcxx/include/utility:297\r\n#13 std::__1::allocator_traits<std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IStorage> >, void*> > >::__destroy<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, std::__1::shared_ptr<DB::IStorage> > > (__p=0x7fff80635400) at ../contrib/libcxx/include/memory:1798\r\n#14 std::__1::allocator_traits<std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IStorage> >, void*> > >::destroy<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, std::__1::shared_ptr<DB::IStorage> > > (__a=..., __p=0x7fff80635400) at ../contrib/libcxx/include/memory:1630\r\n#15 std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IStorage> >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IStorage> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IStorage> > > >::destroy (this=<optimized out>, \r\n    __nd=0x7fff806353e0) at ../contrib/libcxx/include/__tree:1836\r\n#16 0x0000000009b48837 in std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IStorage> >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IStorage> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IStorage> > > >::destroy (\r\n    this=0x7fff6ea8b2f0, __nd=0x7fff7e035930) at ../contrib/libcxx/include/__tree:1833\r\n#17 0x0000000009b48843 in std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IStorage> >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IStorage> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IStorage> > > >::destroy (\r\n    this=0x7fff6ea8b2f0, __nd=0x7fff82a36740) at ../contrib/libcxx/include/__tree:1834\r\n#18 0x0000000009b48843 in std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IStorage> >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IStorage> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IStorage> > > >::destroy (\r\n    this=0x7fff6ea8b2f0, __nd=0x7fff7e033220) at ../contrib/libcxx/include/__tree:1834\r\n#19 0x0000000009b48843 in std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IStorage> >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IStorage> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IStorage> > > >::destroy (\r\n    this=0x7fff6ea8b2f0, __nd=0x7fff82a331d0) at ../contrib/libcxx/include/__tree:1834\r\n#20 0x0000000009b48843 in std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IStorage> >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IStorage> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IStorage> > > >::destroy (\r\n    this=0x7fff6ea8b2f0, __nd=0x7fff80a35340) at ../contrib/libcxx/include/__tree:1834\r\n#21 0x000000000dbceacf in DB::DatabaseWithOwnTablesBase::~DatabaseWithOwnTablesBase (this=0x7fff6ea8b298) at ../src/Databases/DatabasesCommon.cpp:142\r\n#22 0x000000000d8a9cf3 in std::__1::__shared_count::__release_shared (this=0x7fff6ea8b280) at ../contrib/libcxx/include/memory:3440\r\n#23 std::__1::__shared_weak_count::__release_shared (this=0x7fff6ea8b280) at ../contrib/libcxx/include/memory:3482\r\n--Type <RET> for more, q to quit, c to continue without paging--\r\n#24 std::__1::shared_ptr<DB::IDatabase>::~shared_ptr (this=0x7fff82a33708) at ../contrib/libcxx/include/memory:4207\r\n#25 std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, std::__1::shared_ptr<DB::IDatabase> >::~pair (this=0x7fff82a336f0)\r\n    at ../contrib/libcxx/include/utility:297\r\n#26 std::__1::allocator_traits<std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDatabase> >, void*> > >::__destroy<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, std::__1::shared_ptr<DB::IDatabase> > > (__p=0x7fff82a336f0) at ../contrib/libcxx/include/memory:1798\r\n#27 std::__1::allocator_traits<std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDatabase> >, void*> > >::destroy<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, std::__1::shared_ptr<DB::IDatabase> > > (__a=..., __p=0x7fff82a336f0) at ../contrib/libcxx/include/memory:1630\r\n#28 std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDatabase> >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDatabase> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDatabase> > > >::destroy (this=<optimized out>, \r\n    __nd=0x7fff82a336d0) at ../contrib/libcxx/include/__tree:1836\r\n#29 0x000000000d8a9c97 in std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDatabase> >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDatabase> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDatabase> > > >::destroy (\r\n    this=0x7ffff7143048, __nd=0x7fff75615000) at ../contrib/libcxx/include/__tree:1833\r\n#30 0x000000000d8a9c97 in std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDatabase> >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDatabase> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDatabase> > > >::destroy (\r\n    this=0x7ffff7143048, __nd=0x7ffff59a9650) at ../contrib/libcxx/include/__tree:1833\r\n#31 0x000000000dc53783 in std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDatabase> >, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDatabase> >, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDatabase> > > >::~__tree (this=0x2)\r\n    at ../contrib/libcxx/include/__tree:1824\r\n#32 std::__1::map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDatabase>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, std::__1::shared_ptr<DB::IDatabase> > > >::~map (this=0x7ffff7143048) at ../contrib/libcxx/include/map:1090\r\n#33 DB::DatabaseCatalog::~DatabaseCatalog (this=<optimized out>) at ../src/Interpreters/DatabaseCatalog.h:102\r\n#34 0x000000000dc51188 in std::__1::default_delete<DB::DatabaseCatalog>::operator() (__ptr=0x7ffff7143000, this=<optimized out>) at ../contrib/libcxx/include/memory:2363\r\n#35 std::__1::unique_ptr<DB::DatabaseCatalog, std::__1::default_delete<DB::DatabaseCatalog> >::reset (this=<optimized out>, __p=0x0) at ../contrib/libcxx/include/memory:2618\r\n#36 std::__1::unique_ptr<DB::DatabaseCatalog, std::__1::default_delete<DB::DatabaseCatalog> >::~unique_ptr (this=<optimized out>) at ../contrib/libcxx/include/memory:2572\r\n#37 0x00007ffff7dccba7 in __run_exit_handlers (status=-1, listp=0x7ffff7f6d718 <__exit_funcs>, run_list_atexit=run_list_atexit@entry=true, run_dtors=run_dtors@entry=true) at exit.c:108\r\n#38 0x00007ffff7dccd60 in __GI_exit (status=<optimized out>) at exit.c:139\r\n#39 0x000000000ae7c362 in libdivide::dispatcher<true, true, 4, 0>::dispatcher(int) ()\r\n#40 0x000000000aed4d2a in DB::ModuloByConstantImpl<int, long>::vectorConstant(int const*, long, long*, unsigned long) ()\r\n#41 0x000000000aed4b8a in bool DB::FunctionBinaryArithmetic<DB::ModuloImpl, DB::NameModulo, false>::executeNumeric<DB::DataTypeNumber<int>, DB::DataTypeNumber<long> >(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, DB::DataTypeNumber<int> const&, DB::DataTypeNumber<long> const&) ()\r\n#42 0x000000000aed05fb in bool DB::FunctionBinaryArithmetic<DB::ModuloImpl, DB::NameModulo, false>::castType<DB::FunctionBinaryArithmetic<DB::ModuloImpl, DB::NameModulo, false>::castBothTypes<DB::FunctionBinaryArithmetic<DB::ModuloImpl, DB::NameModulo, false>::executeImpl(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long)::{lambda(auto:1 const&, auto:2 const&)#1}>(DB::IDataType const*, DB::IDataType const, DB::FunctionBinaryArithmetic<DB::ModuloImpl, DB::NameModulo, false>::executeImpl(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long)::{lambda(auto:1 const&, auto:2 const&)#1}&&)::{lambda(auto:1 const&)#1}::operator()<DB::DataTypeNumber<int> >(DB::DataTypeNumber<int> const&) const::{lambda(auto:1 const&)#1}>(DB::IDataType const, DB::IDataType const*) ()\r\n#43 0x000000000aeb2887 in bool DB::FunctionBinaryArithmetic<DB::ModuloImpl, DB::NameModulo, false>::castType<DB::FunctionBinaryArithmetic<DB::ModuloImpl, DB::NameModulo, false>::castBothTypes<DB::FunctionBinaryArithmetic<DB::ModuloImpl, DB::NameModulo, false>::executeImpl(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long)::{lambda(auto:1 const&, auto:2 const&)#1}>(DB::IDataType const*, DB::IDataType const, DB::FunctionBinaryArithmetic<DB::ModuloImpl, DB::NameModulo, false>::executeImpl(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long)::{lambda(auto:1 const&, auto:2 const&)#1}&&)::{lambda(auto:1 const&)#1}>(DB::IDataType const, DB::IDataType const*) ()\r\n#44 0x000000000aeb206d in DB::FunctionBinaryArithmetic<DB::ModuloImpl, DB::NameModulo, false>::executeImpl(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long) ()\r\n--Type <RET> for more, q to quit, c to continue without paging--\r\n#45 0x000000000a4cee75 in DB::ExecutableFunctionAdaptor::execute(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long, bool)\r\n    ()\r\n#46 0x000000000de32ef6 in DB::ExpressionAction::execute (this=0x7fff827208f0, block=..., dry_run=<optimized out>) at ../src/Interpreters/ExpressionActions.cpp:365\r\n#47 0x000000000de36c8d in DB::ExpressionActions::execute (this=0x7fff6fc07418, block=..., dry_run=<optimized out>) at ../src/Interpreters/ExpressionActions.cpp:683\r\n#48 0x000000000e6206c7 in DB::ExpressionTransform::transformHeader (header=..., expression=...) at ../src/Processors/Transforms/ExpressionTransform.cpp:10\r\n#49 0x000000000e68d796 in DB::ExpressionStep::ExpressionStep (this=0x7fff82671380, input_stream_=..., expression_=...) at ../src/Processors/QueryPlan/ExpressionStep.cpp:23\r\n#50 0x000000000de72b4b in std::__1::make_unique<DB::ExpressionStep, DB::DataStream const&, std::__1::shared_ptr<DB::ExpressionActions> const&> (__args=..., __args=...)\r\n    at ../contrib/libcxx/include/memory:3028\r\n#51 DB::InterpreterSelectQuery::executeExpression (query_plan=..., expression=..., description=...) at ../src/Interpreters/InterpreterSelectQuery.cpp:1545\r\n#52 0x000000000de6a2f2 in DB::InterpreterSelectQuery::executeImpl (this=0x7fff82720000, query_plan=..., prepared_input=..., prepared_pipe=...)\r\n    at ../src/Interpreters/InterpreterSelectQuery.cpp:908\r\n#53 0x000000000de68fdf in DB::InterpreterSelectQuery::buildQueryPlan (this=0x7fff82720000, query_plan=...) at ../src/Interpreters/InterpreterSelectQuery.cpp:472\r\n#54 0x000000000dfb6451 in DB::InterpreterSelectWithUnionQuery::buildQueryPlan (this=0x7fff826373c0, query_plan=...) at ../src/Interpreters/InterpreterSelectWithUnionQuery.cpp:183\r\n#55 0x000000000dfb68c9 in DB::InterpreterSelectWithUnionQuery::execute (this=0x7fff826373c0) at ../src/Interpreters/InterpreterSelectWithUnionQuery.cpp:198\r\n#56 0x000000000e0a116b in DB::executeQueryImpl (begin=<optimized out>, end=<optimized out>, context=..., internal=false, stage=DB::QueryProcessingStage::Complete, \r\n    has_query_tail=<optimized out>, istr=0x0) at ../src/Interpreters/executeQuery.cpp:385\r\n#57 0x000000000e0a0547 in DB::executeQuery (query=..., context=..., internal=false, stage=(unknown: 1008166256), may_have_embedded_data=<optimized out>)\r\n    at ../src/Interpreters/executeQuery.cpp:653\r\n#58 0x000000000e4f92f7 in DB::TCPHandler::runImpl (this=0x7fff6fcf3000) at ../src/Server/TCPHandler.cpp:253\r\n#59 0x000000000e5017b7 in DB::TCPHandler::run (this=0x7fff6fcf3000) at ../src/Server/TCPHandler.cpp:1201\r\n#60 0x00000000102431d7 in Poco::Net::TCPServerConnection::start (this=0x2) at ../contrib/poco/Net/src/TCPServerConnection.cpp:43\r\n#61 0x0000000010243658 in Poco::Net::TCPServerDispatcher::run (this=0x7fff7e640c00) at ../contrib/poco/Net/src/TCPServerDispatcher.cpp:114\r\n#62 0x000000001031eac7 in Poco::PooledThread::run (this=0x7fff6ea69000) at ../contrib/poco/Foundation/src/ThreadPool.cpp:199\r\n#63 0x000000001031ca86 in Poco::ThreadImpl::runnableEntry (pThread=0x7fff6ea69038) at ../contrib/poco/Foundation/src/Thread_POSIX.cpp:345\r\n#64 0x00007ffff7f8e669 in start_thread (arg=<optimized out>) at pthread_create.c:479\r\n#65 0x00007ffff7ea5323 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95\r\n```\r\n\r\nIt doesn't make sense because `exit` calls static destructors. Maybe author has meant `_exit` but it's also less convenient than `abort`.\n`select materialize(toInt32(1)) % -9223372036854775808`\n`select intDiv(materialize(toInt32(1)), -0x100000000)`",
  "created_at": "2020-07-05T00:30:18Z"
}