{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 70530,
  "instance_id": "ClickHouse__ClickHouse-70530",
  "issue_numbers": [
    "62644"
  ],
  "base_commit": "1d689518ff3a7d8b6fb14769d8633e081c066dad",
  "patch": "diff --git a/src/Interpreters/executeQuery.cpp b/src/Interpreters/executeQuery.cpp\nindex 5550d57cb8ed..77f3f3a51f2d 100644\n--- a/src/Interpreters/executeQuery.cpp\n+++ b/src/Interpreters/executeQuery.cpp\n@@ -16,6 +16,7 @@\n #include <QueryPipeline/BlockIO.h>\n #include <Processors/Transforms/CountingTransform.h>\n #include <Processors/Transforms/getSourceFromASTInsertQuery.h>\n+#include <Processors/Formats/Impl/NullFormat.h>\n \n #include <Parsers/ASTIdentifier.h>\n #include <Parsers/ASTInsertQuery.h>\n@@ -1166,6 +1167,7 @@ static std::tuple<ASTPtr, BlockIO> executeQueryImpl(\n                     auto timeout = settings[Setting::wait_for_async_insert_timeout].totalMilliseconds();\n                     auto source = std::make_shared<WaitForAsyncInsertSource>(std::move(result.future), timeout);\n                     res.pipeline = QueryPipeline(Pipe(std::move(source)));\n+                    res.pipeline.complete(std::make_shared<NullOutputFormat>(Block()));\n                 }\n \n                 const auto & table_id = insert_query->table_id;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02015_async_inserts_1.reference b/tests/queries/0_stateless/02015_async_inserts_1.reference\nindex 85305b346574..e58540d7333d 100644\n--- a/tests/queries/0_stateless/02015_async_inserts_1.reference\n+++ b/tests/queries/0_stateless/02015_async_inserts_1.reference\n@@ -10,3 +10,4 @@\n 10\tj\n 11\tk\n 12\tl\n+13\tm\ndiff --git a/tests/queries/0_stateless/02015_async_inserts_1.sh b/tests/queries/0_stateless/02015_async_inserts_1.sh\nindex b4310f5101cd..60b8a540703f 100755\n--- a/tests/queries/0_stateless/02015_async_inserts_1.sh\n+++ b/tests/queries/0_stateless/02015_async_inserts_1.sh\n@@ -32,6 +32,8 @@ ${CLICKHOUSE_CURL} -sS \"$url\" -d 'INSERT INTO async_inserts FORMAT CSVWithNames\n 12,\"l\"\n ' &\n \n+${CLICKHOUSE_CURL} -sS \"$url\" -H 'X-Clickhouse-Format: XML' -d 'INSERT INTO async_inserts FORMAT JSONEachRow {\"id\": 13, \"s\": \"m\"}' &\n+\n wait\n \n ${CLICKHOUSE_CLIENT} -q \"SELECT * FROM async_inserts ORDER BY id\"\n",
  "problem_statement": "Async insert in HTTP interface outputs empty block of data when `wait_for_async_insert=1`\n```\r\navogar@avogar-dev:~$ echo '{\"a\" : 42}' | curl -X POST 'http://localhost:8123/?query=insert%20into%20test%20format%20JSONAsString&async_insert=1&stacktrace=1' -H \"X-Clickhouse-Format: XML\" --data-binary @-\r\n<?xml version='1.0' encoding='UTF-8' ?>\r\n<result>\r\n\t<meta>\r\n\t\t<columns>\r\n\t\t</columns>\r\n\t</meta>\r\n\t<data>\r\n\t</data>\r\n\t<rows>0</rows>\r\n\t<statistics>\r\n\t\t<elapsed>0.005665209</elapsed>\r\n\t\t<rows_read>0</rows_read>\r\n\t\t<bytes_read>0</bytes_read>\r\n\t</statistics>\r\n</result>\r\n```\r\n\r\nAlso it fails if the user specifies format that is not suitable for output:\r\n```\r\necho '{\"a\" : 42}' | curl -X POST 'http://localhost:8123/?query=insert%20into%20test%20format%20JSONAsString&async_insert=1' -H \"X-Clickhouse-Format: JSONAsString\" --data-binary @-\r\nCode: 399. DB::Exception: Format JSONAsString is not suitable for output. (FORMAT_IS_NOT_SUITABLE_FOR_OUTPUT) (version 24.4.1.1)\r\n```\r\n\r\nIt should not try to output anything as in the simple `INSERT` query.\r\n\r\nIt happens because we create `WaitForAsyncInsertSource` and pull it during query execution.\r\nHere we create the source:\r\nhttps://github.com/ClickHouse/ClickHouse/blob/54871f0d9c5ac8c7b664c81eaccadd1c6a081941/src/Interpreters/executeQuery.cpp#L1045-L1050\r\nHere we check if we hape pulling pipeling and create output format:\r\nhttps://github.com/ClickHouse/ClickHouse/blob/54871f0d9c5ac8c7b664c81eaccadd1c6a081941/src/Interpreters/executeQuery.cpp#L1521-L1575\r\n\r\nNeed to think how to avoid it.\r\n\n",
  "hints_text": "Do we have an estimation for solving the issue? ",
  "created_at": "2024-10-10T00:04:46Z"
}