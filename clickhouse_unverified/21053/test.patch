diff --git a/tests/queries/0_stateless/01691_DateTime64_clamp.reference b/tests/queries/0_stateless/01691_DateTime64_clamp.reference
index de72027334c9..849f8139640e 100644
--- a/tests/queries/0_stateless/01691_DateTime64_clamp.reference
+++ b/tests/queries/0_stateless/01691_DateTime64_clamp.reference
@@ -9,3 +9,11 @@ SELECT CAST('2020-01-01 00:00:00.3' AS DateTime64);
 2020-01-01 00:00:00.300
 SELECT toDateTime64(bitShiftLeft(toUInt64(1),33), 2);
 2106-02-07 09:28:15.00
+SELECT toDateTime(-2., 2);
+1970-01-01 03:00:00.00
+SELECT toDateTime64(-2., 2);
+1970-01-01 03:00:00.00
+SELECT toDateTime64(toFloat32(bitShiftLeft(toUInt64(1),33)), 2);
+2106-02-07 09:28:16.00
+SELECT toDateTime64(toFloat64(bitShiftLeft(toUInt64(1),33)), 2);
+2106-02-07 09:28:15.00
diff --git a/tests/queries/0_stateless/01691_DateTime64_clamp.sql b/tests/queries/0_stateless/01691_DateTime64_clamp.sql
index 6b5a4815f37e..f02d45a2cff1 100644
--- a/tests/queries/0_stateless/01691_DateTime64_clamp.sql
+++ b/tests/queries/0_stateless/01691_DateTime64_clamp.sql
@@ -4,3 +4,7 @@ SELECT toDateTime64(-2, 2);
 SELECT CAST(-1 AS DateTime64);
 SELECT CAST('2020-01-01 00:00:00.3' AS DateTime64);
 SELECT toDateTime64(bitShiftLeft(toUInt64(1),33), 2);
+SELECT toDateTime(-2., 2);
+SELECT toDateTime64(-2., 2);
+SELECT toDateTime64(toFloat32(bitShiftLeft(toUInt64(1),33)), 2);
+SELECT toDateTime64(toFloat64(bitShiftLeft(toUInt64(1),33)), 2);
diff --git a/tests/queries/0_stateless/01732_more_consistent_datetime64_parsing.reference b/tests/queries/0_stateless/01732_more_consistent_datetime64_parsing.reference
new file mode 100644
index 000000000000..4f3181ecce0b
--- /dev/null
+++ b/tests/queries/0_stateless/01732_more_consistent_datetime64_parsing.reference
@@ -0,0 +1,8 @@
+1	2005-03-18 01:58:31.222
+2	2005-03-18 01:58:31.222
+3	2005-03-18 01:58:31.222
+4	2005-03-18 01:58:31.222
+2005-03-18 04:58:31.222
+2005-03-18 04:58:31.222
+2005-03-18 04:58:31.222
+0
diff --git a/tests/queries/0_stateless/01732_more_consistent_datetime64_parsing.sql b/tests/queries/0_stateless/01732_more_consistent_datetime64_parsing.sql
new file mode 100644
index 000000000000..dcd874f8c45a
--- /dev/null
+++ b/tests/queries/0_stateless/01732_more_consistent_datetime64_parsing.sql
@@ -0,0 +1,11 @@
+CREATE TEMPORARY TABLE t (i UInt8, x DateTime64(3, 'UTC'));
+INSERT INTO t VALUES (1, 1111111111222);
+INSERT INTO t VALUES (2, 1111111111.222);
+INSERT INTO t VALUES (3, '1111111111222');
+INSERT INTO t VALUES (4, '1111111111.222');
+SELECT * FROM t ORDER BY i;
+
+SELECT toDateTime64(1111111111.222, 3);
+SELECT toDateTime64('1111111111.222', 3);
+SELECT toDateTime64('1111111111222', 3);
+SELECT ignore(toDateTime64(1111111111222, 3)); -- This gives somewhat correct but unexpected result
diff --git a/tests/queries/0_stateless/01734_datetime64_from_float.reference b/tests/queries/0_stateless/01734_datetime64_from_float.reference
new file mode 100644
index 000000000000..32e7d2736c6b
--- /dev/null
+++ b/tests/queries/0_stateless/01734_datetime64_from_float.reference
@@ -0,0 +1,7 @@
+-- { echo }
+SELECT CAST(1111111111.222 AS DateTime64(3));
+2005-03-18 04:58:31.222
+SELECT toDateTime(1111111111.222, 3);
+2005-03-18 04:58:31.222
+SELECT toDateTime64(1111111111.222, 3);
+2005-03-18 04:58:31.222
diff --git a/tests/queries/0_stateless/01734_datetime64_from_float.sql b/tests/queries/0_stateless/01734_datetime64_from_float.sql
new file mode 100644
index 000000000000..b6be65cb7c25
--- /dev/null
+++ b/tests/queries/0_stateless/01734_datetime64_from_float.sql
@@ -0,0 +1,4 @@
+-- { echo }
+SELECT CAST(1111111111.222 AS DateTime64(3));
+SELECT toDateTime(1111111111.222, 3);
+SELECT toDateTime64(1111111111.222, 3);
