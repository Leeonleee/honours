{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 36352,
  "instance_id": "ClickHouse__ClickHouse-36352",
  "issue_numbers": [
    "36307"
  ],
  "base_commit": "e04f80d4a7fcb2566adaa7387dd5f7e59b7e0675",
  "patch": "diff --git a/docs/en/sql-reference/data-types/enum.md b/docs/en/sql-reference/data-types/enum.md\nindex ae22e60a5f39..0f6e1e1f001c 100644\n--- a/docs/en/sql-reference/data-types/enum.md\n+++ b/docs/en/sql-reference/data-types/enum.md\n@@ -7,7 +7,7 @@ toc_title: Enum\n \n Enumerated type consisting of named values.\n \n-Named values must be declared as `'string' = integer` pairs. ClickHouse stores only numbers, but supports operations with the values through their names.\n+Named values can be declared as `'string' = integer` pairs or `'string'` names . ClickHouse stores only numbers, but supports operations with the values through their names.\n \n ClickHouse supports:\n \n@@ -28,6 +28,39 @@ CREATE TABLE t_enum\n ENGINE = TinyLog\n ```\n \n+Similarly, you could omit numbers. ClickHouse will assign consecutive numbers automatically. Numbers are assigned starting from 1 by default.\n+\n+``` sql\n+CREATE TABLE t_enum\n+(\n+    x Enum('hello', 'world')\n+)\n+ENGINE = TinyLog\n+```\n+\n+You can also specify legal starting number for the first name.\n+\n+``` sql\n+CREATE TABLE t_enum\n+(\n+    x Enum('hello' = 1, 'world')\n+)\n+ENGINE = TinyLog\n+```\n+\n+``` sql\n+CREATE TABLE t_enum\n+(\n+    x Enum8('hello' = -129, 'world')\n+)\n+ENGINE = TinyLog\n+```\n+\n+``` text\n+Exception on server:\n+Code: 69. DB::Exception: Value -129 for element 'hello' exceeds range of Enum8.\n+```\n+\n Column `x` can only store values that are listed in the type definition: `'hello'` or `'world'`. If you try to save any other value, ClickHouse will raise an exception. 8-bit size for this `Enum` is chosen automatically.\n \n ``` sql\ndiff --git a/docs/ru/sql-reference/data-types/enum.md b/docs/ru/sql-reference/data-types/enum.md\nindex 95c053bed2cb..1262c9e1cd59 100644\n--- a/docs/ru/sql-reference/data-types/enum.md\n+++ b/docs/ru/sql-reference/data-types/enum.md\n@@ -7,7 +7,7 @@ toc_title: Enum\n \n \u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u044f\u0435\u043c\u044b\u0439 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n \n-\u0418\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u044e\u0442\u0441\u044f \u043f\u0430\u0440\u0430\u043c\u0438 `'string' = integer`. ClickHouse \u0445\u0440\u0430\u043d\u0438\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0438\u0441\u043b\u0430, \u043d\u043e \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043d\u0430\u0434 \u043d\u0438\u043c\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u043c\u0451\u043d.\n+\u0418\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u044e\u0442\u0441\u044f \u043b\u0438\u0431\u043e \u043f\u0430\u0440\u0430\u043c\u0438 `'string' = integer`, \u043b\u0438\u0431\u043e \u0438\u043c\u0435\u043d\u0430\u043c\u0438 `'string'`. ClickHouse \u0445\u0440\u0430\u043d\u0438\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0438\u0441\u043b\u0430, \u043d\u043e \u0434\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 \u043d\u0430\u0434 \u043d\u0438\u043c\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u043c\u0451\u043d.\n \n ClickHouse \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442:\n \n@@ -28,6 +28,39 @@ CREATE TABLE t_enum\n ENGINE = TinyLog\n ```\n \n+\u041d\u043e\u043c\u0435\u0440\u0430 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043e\u043f\u0443\u0449\u0435\u043d\u044b - \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 ClickHouse \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u0442 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043d\u043e\u043c\u0435\u0440\u0430, \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 1.\n+\n+``` sql\n+CREATE TABLE t_enum\n+(\n+    x Enum('hello', 'world')\n+)\n+ENGINE = TinyLog\n+```\n+\n+\u041c\u043e\u0436\u043d\u043e \u0442\u0430\u043a\u0436\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u044b\u0439 \u0441\u0442\u0430\u0440\u0442\u043e\u0432\u044b\u0439 \u043d\u043e\u043c\u0435\u0440 \u0434\u043b\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0438\u043c\u0435\u043d\u0438.\n+\n+``` sql\n+CREATE TABLE t_enum\n+(\n+    x Enum('hello' = 1, 'world')\n+)\n+ENGINE = TinyLog\n+```\n+\n+``` sql\n+CREATE TABLE t_enum\n+(\n+    x Enum8('hello' = -129, 'world')\n+)\n+ENGINE = TinyLog\n+```\n+\n+``` text\n+Exception on server:\n+Code: 69. DB::Exception: Value -129 for element 'hello' exceeds range of Enum8.\n+```\n+\n \u0412 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 `x` \u043c\u043e\u0436\u043d\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0440\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0438 \u0442\u0438\u043f\u0430, \u0442.\u0435. `'hello'` \u0438\u043b\u0438 `'world'`. \u0415\u0441\u043b\u0438 \u0432\u044b \u043f\u043e\u043f\u044b\u0442\u0430\u0435\u0442\u0435\u0441\u044c \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u043b\u044e\u0431\u043e\u0435 \u0434\u0440\u0443\u0433\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, ClickHouse \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435. ClickHouse \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0432\u044b\u0431\u0435\u0440\u0435\u0442 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c 8-bit \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e `Enum`.\n \n ``` sql\ndiff --git a/src/DataTypes/DataTypeEnum.cpp b/src/DataTypes/DataTypeEnum.cpp\nindex 9d1424d862b5..c58e186b980a 100644\n--- a/src/DataTypes/DataTypeEnum.cpp\n+++ b/src/DataTypes/DataTypeEnum.cpp\n@@ -193,26 +193,46 @@ static void checkASTStructure(const ASTPtr & child)\n \n static void autoAssignNumberForEnum(const ASTPtr & arguments)\n {\n-    UInt64 literal_child_count = 0;\n-    UInt64 func_child_count = 0;\n+    Int64 literal_child_assign_num = 1;\n     ASTs assign_number_child;\n     assign_number_child.reserve(arguments->children.size());\n+    bool is_first_child = true;\n+    size_t assign_count= 0;\n+\n     for (const ASTPtr & child : arguments->children)\n     {\n         if (child->as<ASTLiteral>())\n         {\n-            ASTPtr func = makeASTFunction(\"equals\", child, std::make_shared<ASTLiteral>(++literal_child_count));\n+            assign_count += !is_first_child;\n+            ASTPtr func = makeASTFunction(\"equals\", child, std::make_shared<ASTLiteral>(literal_child_assign_num + assign_count));\n             assign_number_child.emplace_back(func);\n         }\n-        else\n+        else if (child->as<ASTFunction>())\n         {\n-            ++func_child_count;\n+            if (is_first_child)\n+            {\n+                checkASTStructure(child);\n+                const auto * func = child->as<ASTFunction>();\n+                const auto * value_literal = func->arguments->children[1]->as<ASTLiteral>();\n+\n+                if (!value_literal\n+                    || (value_literal->value.getType() != Field::Types::UInt64 && value_literal->value.getType() != Field::Types::Int64))\n+                    throw Exception(\"Elements of Enum data type must be of form: 'name' = number or 'name', where name is string literal and number is an integer\",\n+                                    ErrorCodes::UNEXPECTED_AST_STRUCTURE);\n+\n+                literal_child_assign_num = value_literal->value.get<Int64>();\n+            }\n             assign_number_child.emplace_back(child);\n         }\n+        else\n+            throw Exception(\"Elements of Enum data type must be of form: 'name' = number or 'name', where name is string literal and number is an integer\",\n+                            ErrorCodes::UNEXPECTED_AST_STRUCTURE);\n+\n+        is_first_child = false;\n     }\n \n-    if (func_child_count > 0 && literal_child_count > 0)\n-        throw Exception(\"ALL Elements of Enum data type must be of form: 'name' = number or 'name', where name is string literal and number is an integer\",\n+    if (assign_count != 0 && assign_count != arguments->children.size() - 1)\n+        throw Exception(\"All elements of Enum data type must be of form: 'name' = number or 'name', where name is string literal and number is an integer\",\n                         ErrorCodes::UNEXPECTED_AST_STRUCTURE);\n \n     arguments->children = assign_number_child;\n@@ -243,7 +263,7 @@ static DataTypePtr createExact(const ASTPtr & arguments)\n             || !value_literal\n             || name_literal->value.getType() != Field::Types::String\n             || (value_literal->value.getType() != Field::Types::UInt64 && value_literal->value.getType() != Field::Types::Int64))\n-            throw Exception(\"Elements of Enum data type must be of form: 'name' = number, where name is string literal and number is an integer\",\n+            throw Exception(\"Elements of Enum data type must be of form: 'name' = number or 'name', where name is string literal and number is an integer\",\n                 ErrorCodes::UNEXPECTED_AST_STRUCTURE);\n \n         const String & field_name = name_literal->value.get<String>();\n@@ -275,7 +295,7 @@ static DataTypePtr create(const ASTPtr & arguments)\n \n         if (!value_literal\n             || (value_literal->value.getType() != Field::Types::UInt64 && value_literal->value.getType() != Field::Types::Int64))\n-            throw Exception(\"Elements of Enum data type must be of form: 'name' = number, where name is string literal and number is an integer\",\n+            throw Exception(\"Elements of Enum data type must be of form: 'name' = number or 'name', where name is string literal and number is an integer\",\n                     ErrorCodes::UNEXPECTED_AST_STRUCTURE);\n \n         Int64 value = value_literal->value.get<Int64>();\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00757_enum_defaults.reference b/tests/queries/0_stateless/00757_enum_defaults.reference\nindex 35ef3c72406d..6bf5cc85e87e 100644\n--- a/tests/queries/0_stateless/00757_enum_defaults.reference\n+++ b/tests/queries/0_stateless/00757_enum_defaults.reference\n@@ -6,3 +6,12 @@ iphone\t1\n \\N\t1\n a\n b\n+1\n+2\n+a\n+a\n+b\n+-1000\n+-999\n+b\n+-1\ndiff --git a/tests/queries/0_stateless/00757_enum_defaults.sql b/tests/queries/0_stateless/00757_enum_defaults.sql\nindex 769579ffc0b0..71edc83abe2e 100644\n--- a/tests/queries/0_stateless/00757_enum_defaults.sql\n+++ b/tests/queries/0_stateless/00757_enum_defaults.sql\n@@ -1,12 +1,41 @@\n select os_name, count() from (SELECT CAST('iphone' AS Enum8('iphone' = 1, 'android' = 2)) AS os_name) group by os_name WITH TOTALS;\n select toNullable(os_name) AS os_name, count() from (SELECT CAST('iphone' AS Enum8('iphone' = 1, 'android' = 2)) AS os_name) group by os_name WITH TOTALS;\n \n-DROP TABLE IF EXISTS auto_assgin_enum;\n-DROP TABLE IF EXISTS auto_assgin_enum1;\n+DROP TABLE IF EXISTS auto_assign_enum;\n+DROP TABLE IF EXISTS auto_assign_enum1;\n+DROP TABLE IF EXISTS auto_assign_enum2;\n+DROP TABLE IF EXISTS auto_assign_enum3;\n \n-CREATE TABLE auto_assgin_enum (x enum('a', 'b')) ENGINE=MergeTree() order by x;\n-CREATE TABLE auto_assgin_enum1 (x enum('a' = 1, 'b')) ENGINE=MergeTree() order by x; -- { serverError 223 }\n-INSERT INTO auto_assgin_enum VALUES('a'), ('b');\n-select * from auto_assgin_enum;\n+CREATE TABLE auto_assign_enum (x enum('a', 'b')) ENGINE=MergeTree() order by x;\n+INSERT INTO auto_assign_enum VALUES('a'), ('b');\n+select * from auto_assign_enum;\n+select CAST(x, 'Int8') from auto_assign_enum;\n+select * from auto_assign_enum where x = 1;\n \n-DROP TABLE auto_assgin_enum;\n+CREATE TABLE auto_assign_enum1 (x enum('a' = -1000, 'b')) ENGINE=MergeTree() order by x;\n+INSERT INTO auto_assign_enum1 VALUES('a'), ('b');\n+select * from auto_assign_enum1;\n+select CAST(x, 'Int16') from auto_assign_enum1;\n+select * from auto_assign_enum1 where x = -999;\n+\n+CREATE TABLE auto_assign_enum2 (x enum('a' = -1000, 'b', 'c' = -99)) ENGINE=MergeTree() order by x; -- { serverError 223 }\n+\n+CREATE TABLE auto_assign_enum2 (x Enum8(\n+                     '00' = -128 ,'01','02','03','04','05','06','07','08','09','0A','0B','0C','0D','0E','0F',\n+                     '10','11','12','13','14','15','16','17','18','19','1A','1B','1C','1D','1E','1F',\n+                     '20','21','22','23','24','25','26','27','28','29','2A','2B','2C','2D','2E','2F',\n+                     '30','31','32','33','34','35','36','37','38','39','3A','3B','3C','3D','3E','3F',\n+                     '40','41','42','43','44','45','46','47','48','49','4A','4B','4C','4D','4E','4F',\n+                     '50','51','52','53','54','55','56','57','58','59','5A','5B','5C','5D','5E','5F',\n+                     '60','61','62','63','64','65','66','67','68','69','6A','6B','6C','6D','6E','6F',\n+                     '70','71','72','73','74','75','76','77','78','79','7A','7B','7C','7D','7E','7F'\n+                     )) ENGINE=MergeTree() order by x;\n+\n+INSERT INTO auto_assign_enum2 VALUES('7F');\n+select CAST(x, 'Int8') from auto_assign_enum2;\n+\n+CREATE TABLE auto_assign_enum3 (x enum('a', 'b', NULL)) ENGINE=MergeTree() order by x; -- { serverError 223 }\n+\n+DROP TABLE auto_assign_enum;\n+DROP TABLE auto_assign_enum1;\n+DROP TABLE auto_assign_enum2;\n",
  "problem_statement": "Possible range issues in automatic assigned enums, also fix error message.\n**Describe the unexpected behaviour**\r\nCurrently enum is numbered straight through using UInt64 starting from 1, while underlying type either Int8 or Int16 - such inconsistency can lead to some undesirable side effects or run-time errors\r\n\r\n**How to reproduce**\r\ncurrent trunk, feature just added in #36101\r\n```\r\nClickHouse-ubuntu :) CREATE TABLE t (x Enum8(\r\n                     '00','01','02','03','04','05','06','07','08','09','0A','0B','0C','0D','0E','0F',\r\n                     '10','11','12','13','14','15','16','17','18','19','1A','1B','1C','1D','1E','1F',\r\n                     '20','21','22','23','24','25','26','27','28','29','2A','2B','2C','2D','2E','2F',\r\n                     '30','31','32','33','34','35','36','37','38','39','3A','3B','3C','3D','3E','3F',\r\n                     '40','41','42','43','44','45','46','47','48','49','4A','4B','4C','4D','4E','4F',\r\n                     '50','51','52','53','54','55','56','57','58','59','5A','5B','5C','5D','5E','5F',\r\n                     '60','61','62','63','64','65','66','67','68','69','6A','6B','6C','6D','6E','6F',\r\n                     '70','71','72','73','74','75','76','77','78','79','7A','7B','7C','7D','7E','7F'\r\n                     )) ENGINE=MergeTree() order by x;\r\n\r\nCREATE TABLE t\r\n(\r\n    `x` Enum8('00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0A', '0B', '0C', '0D', '0E', '0F', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1A', '1B', '1C', '1D', '1E', '1F', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2A', '2B', '2C', '2D', '2E', '2F', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3A', '3B', '3C', '3D', '3E', '3F', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4A', '4B', '4C', '4D', '4E', '4F', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5A', '5B', '5C', '5D', '5E', '5F', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '6A', '6B', '6C', '6D', '6E', '6F', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '7A', '7B', '7C', '7D', '7E', '7F')\r\n)\r\nENGINE = MergeTree\r\nORDER BY x\r\n\r\nQuery id: e5d79db3-5f8f-4030-b6ed-f85238461a73\r\n\r\n\r\n0 rows in set. Elapsed: 0.006 sec.\r\n\r\nReceived exception from server (version 22.4.1):\r\nCode: 69. DB::Exception: Received from localhost:9000. DB::Exception: Value 128 for element '7F' exceeds range of Enum8. (ARGUMENT_OUT_OF_BOUND)\r\n```\r\n\r\n**Expected behavior**\r\nNot clear - should be developed in this issue.\r\n\r\n**Additional context**\r\nissue #36101 \r\n\n",
  "hints_text": "For mysql, it increased from 1,so should we change Int8 to UInt8?\nWe can't change Int8 - it's Enum's specification already. I think we can address this issue allowing first item to be specified with number, and then continue counting for the rest - in this case we can allow user to use full range (by specifying negative number first).\n...also let's not forget to update documentation :)",
  "created_at": "2022-04-17T13:42:34Z"
}