{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 57707,
  "instance_id": "ClickHouse__ClickHouse-57707",
  "issue_numbers": [
    "56487"
  ],
  "base_commit": "7e61bce8e5c0ca33c47b9652373d5202de482e91",
  "patch": "diff --git a/src/Functions/FunctionBinaryArithmetic.h b/src/Functions/FunctionBinaryArithmetic.h\nindex 33f62b8da8c5..1b2519d1ec58 100644\n--- a/src/Functions/FunctionBinaryArithmetic.h\n+++ b/src/Functions/FunctionBinaryArithmetic.h\n@@ -1483,6 +1483,17 @@ class FunctionBinaryArithmetic : public IFunction\n             return getReturnTypeImplStatic(new_arguments, context);\n         }\n \n+        /// Special case - one or both arguments are IPv6\n+        if (isIPv6(arguments[0]) || isIPv6(arguments[1]))\n+        {\n+            DataTypes new_arguments {\n+                    isIPv6(arguments[0]) ? std::make_shared<DataTypeUInt128>() : arguments[0],\n+                    isIPv6(arguments[1]) ? std::make_shared<DataTypeUInt128>() : arguments[1],\n+            };\n+\n+            return getReturnTypeImplStatic(new_arguments, context);\n+        }\n+\n \n         if constexpr (is_plus || is_minus)\n         {\n@@ -2181,6 +2192,25 @@ ColumnPtr executeStringInteger(const ColumnsWithTypeAndName & arguments, const A\n             return executeImpl2(new_arguments, result_type, input_rows_count, right_nullmap);\n         }\n \n+        /// Special case - one or both arguments are IPv6\n+        if (isIPv6(arguments[0].type) || isIPv6(arguments[1].type))\n+        {\n+            ColumnsWithTypeAndName new_arguments {\n+                {\n+                    isIPv6(arguments[0].type) ? castColumn(arguments[0], std::make_shared<DataTypeUInt128>()) : arguments[0].column,\n+                    isIPv6(arguments[0].type) ? std::make_shared<DataTypeUInt128>() : arguments[0].type,\n+                    arguments[0].name,\n+                },\n+                {\n+                    isIPv6(arguments[1].type) ? castColumn(arguments[1], std::make_shared<DataTypeUInt128>()) : arguments[1].column,\n+                    isIPv6(arguments[1].type) ? std::make_shared<DataTypeUInt128>() : arguments[1].type,\n+                    arguments[1].name\n+                }\n+            };\n+\n+            return executeImpl2(new_arguments, result_type, input_rows_count, right_nullmap);\n+        }\n+\n         const auto * const left_generic = left_argument.type.get();\n         const auto * const right_generic = right_argument.type.get();\n         ColumnPtr res;\ndiff --git a/src/Functions/FunctionsConversion.h b/src/Functions/FunctionsConversion.h\nindex d7c2c70884b6..bef1e7b420a5 100644\n--- a/src/Functions/FunctionsConversion.h\n+++ b/src/Functions/FunctionsConversion.h\n@@ -221,6 +221,18 @@ struct ConvertImpl\n                     continue;\n                 }\n \n+                if constexpr (std::is_same_v<FromDataType, DataTypeIPv6> && std::is_same_v<ToDataType, DataTypeUInt128>)\n+                {\n+                    static_assert(\n+                        std::is_same_v<DataTypeUInt128::FieldType, DataTypeUUID::FieldType::UnderlyingType>,\n+                        \"UInt128 and IPv6 types must be same\");\n+\n+                    vec_to[i].items[1] = std::byteswap(vec_from[i].toUnderType().items[0]);\n+                    vec_to[i].items[0] = std::byteswap(vec_from[i].toUnderType().items[1]);\n+\n+                    continue;\n+                }\n+\n                 if constexpr (std::is_same_v<FromDataType, DataTypeUUID> != std::is_same_v<ToDataType, DataTypeUUID>)\n                 {\n                     throw Exception(ErrorCodes::NOT_IMPLEMENTED,\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02935_ipv6_bit_operations.reference b/tests/queries/0_stateless/02935_ipv6_bit_operations.reference\nnew file mode 100644\nindex 000000000000..22d5cda0a397\n--- /dev/null\n+++ b/tests/queries/0_stateless/02935_ipv6_bit_operations.reference\n@@ -0,0 +1,1 @@\n+11111111111111110000000000000000111111111111111100000000000000001111111111111111000000000000000011111111111111110000000000000000\t00000000000000001111111111111111000000000000000011111111111111110000000000000000111111111111111100000000000000001111111111111111\t10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010\t01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101\t10101010101010100000000000000000101010101010101000000000000000001010101010101010000000000000000010101010101010100000000000000000\t10101010101010100000000000000000101010101010101000000000000000001010101010101010000000000000000010101010101010100000000000000000\t1010101010101010000000000000000010101010101010100000000000000000101010101010101000000000000000001010101010101010\t1010101010101010000000000000000010101010101010100000000000000000101010101010101000000000000000001010101010101010\t01010101010101010000000000000000010101010101010100000000000000000101010101010101000000000000000001010101010101010000000000000000\t01010101010101010000000000000000010101010101010100000000000000000101010101010101000000000000000001010101010101010000000000000000\t0101010101010101000000000000000001010101010101010000000000000000010101010101010100000000000000000101010101010101\t0101010101010101000000000000000001010101010101010000000000000000010101010101010100000000000000000101010101010101\t11111111111111111010101010101010111111111111111110101010101010101111111111111111101010101010101011111111111111111010101010101010\t11111111111111111010101010101010111111111111111110101010101010101111111111111111101010101010101011111111111111111010101010101010\t10101010101010101111111111111111101010101010101011111111111111111010101010101010111111111111111110101010101010101111111111111111\t10101010101010101111111111111111101010101010101011111111111111111010101010101010111111111111111110101010101010101111111111111111\t11111111111111110101010101010101111111111111111101010101010101011111111111111111010101010101010111111111111111110101010101010101\t11111111111111110101010101010101111111111111111101010101010101011111111111111111010101010101010111111111111111110101010101010101\t01010101010101011111111111111111010101010101010111111111111111110101010101010101111111111111111101010101010101011111111111111111\t01010101010101011111111111111111010101010101010111111111111111110101010101010101111111111111111101010101010101011111111111111111\ndiff --git a/tests/queries/0_stateless/02935_ipv6_bit_operations.sql b/tests/queries/0_stateless/02935_ipv6_bit_operations.sql\nnew file mode 100644\nindex 000000000000..6598c2ac5396\n--- /dev/null\n+++ b/tests/queries/0_stateless/02935_ipv6_bit_operations.sql\n@@ -0,0 +1,7 @@\n+WITH toIPv6('FFFF:0000:FFFF:0000:FFFF:0000:FFFF:0000') AS ip1, toIPv6('0000:FFFF:0000:FFFF:0000:FFFF:0000:FFFF') AS ip2,\n+     CAST('226854911280625642308916404954512140970', 'UInt128') AS n1, CAST('113427455640312821154458202477256070485', 'UInt128') AS n2\n+SELECT bin(ip1), bin(ip2), bin(n1), bin(n2),\n+       bin(bitAnd(ip1, n1)), bin(bitAnd(n1, ip1)), bin(bitAnd(ip2, n1)), bin(bitAnd(n1, ip2)),\n+       bin(bitAnd(ip1, n2)), bin(bitAnd(n2, ip1)), bin(bitAnd(ip2, n2)), bin(bitAnd(n2, ip2)),\n+       bin(bitOr(ip1, n1)), bin(bitOr(n1, ip1)), bin(bitOr(ip2, n1)), bin(bitOr(n1, ip2)),\n+       bin(bitOr(ip1, n2)), bin(bitOr(n2, ip1)), bin(bitOr(ip2, n2)), bin(bitOr(n2, ip2));\n",
  "problem_statement": "Missing bitwise operator (`bitAnd`) support for IPv6 Native Type and IPv6StringToNum not compatible with IPv6 Data Type\n**Describe the issue**\r\n* [Background/Context] As of ClickHouse 23.1 (https://github.com/ClickHouse/ClickHouse/pull/43221), the IPv6 data type is `UInt128` big-endian data type. In the versions before that (22.X), IPv6 dates not support the IPa type was a `FixedString(16)`. This feature is not listed as backwards-incomaptible in the Release docs.\r\n* The `IPv6StringToNum` function still returns a `FixedString(16)` data type instead of an `IPv6` data type.\r\n* Moreover the `bitAnd` operator does not support the IPv6 Data type anymore (It was supported in previous versions). `bitAnd` operator on IPv6 data type is exceptionally useful when it comes to network masking and other IP-related operations.\r\n\r\n**How to reproduce**\r\n* Which ClickHouse server versions are incompatible? \r\n    * 23.1 onwards [However, I only tested 23.3. and 23.8]\r\n\r\n* \r\n    ```sql\r\n    SELECT bitAnd(toIPv4('1.2.3.4'), 20000000); -- works correctly\r\n    SELECT bitAnd(toIPv4('1.2.3.4'), IPv4StringToNum('1.2.0.0')); -- works correctly\r\n    SELECT bitAnd(toIPv6('43:AB::'), toIPv6('ffff:ffff:0000:0000:0000:0000:0000:0000')); -- does not work\r\n    SELECT bitAnd(toIPv6('43:AB::'), IPv6StringToNum('ffff:ffff:0000:0000:0000:0000:0000:0000'));  -- does not work\r\n    ```\r\n\r\n**Error message and/or stacktrace**\r\n* ClickHouse 23.3.9\r\n\r\n    ```sql\r\n    myserver :) SELECT bitAnd(toIPv4('1.2.3.4'), 20000000);\r\n\r\n    SELECT bitAnd(toIPv4('1.2.3.4'), 20000000)\r\n\r\n    Query id: 6f2fb352-fe04-43a1-9882-a1d602e2885d\r\n\r\n    \u250c\u2500bitAnd(toIPv4('1.2.3.4'), 20000000)\u2500\u2510\r\n    \u2502                            16777472 \u2502\r\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n    1 row in set. Elapsed: 0.004 sec. \r\n\r\n    myserver :) SELECT bitAnd(toIPv4('1.2.3.4'), IPv4StringToNum('1.2.0.0'))\r\n\r\n    SELECT bitAnd(toIPv4('1.2.3.4'), IPv4StringToNum('1.2.0.0'))\r\n\r\n    Query id: 24f317f1-0d8a-42b4-9d00-686161ed3f03\r\n\r\n    \u250c\u2500bitAnd(toIPv4('1.2.3.4'), IPv4StringToNum('1.2.0.0'))\u2500\u2510\r\n    \u2502                                              16908288 \u2502\r\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n    1 row in set. Elapsed: 0.005 sec. \r\n\r\n    myserver :) SELECT bitAnd(toIPv6('43:AB::'), toIPv6('ffff:ffff:0000:0000:0000:0000:0000:0000'))\r\n\r\n    SELECT bitAnd(toIPv6('43:AB::'), toIPv6('ffff:ffff:0000:0000:0000:0000:0000:0000'))\r\n\r\n    Query id: 3da6dc0d-0672-4d80-bc78-d5813dfc09d5\r\n\r\n\r\n    0 rows in set. Elapsed: 0.005 sec. \r\n\r\n    Received exception from server (version 23.3.9):\r\n    Code: 43. DB::Exception: Received from localhost:9000. DB::Exception: Illegal types IPv6 and IPv6 of arguments of function bitAnd: While processing bitAnd(toIPv6('43:AB::'), toIPv6('ffff:ffff:0000:0000:0000:0000:0000:0000')). (ILLEGAL_TYPE_OF_ARGUMENT)\r\n\r\n    myserver :) SELECT bitAnd(toIPv6('43:AB::'), IPv6StringToNum('ffff:ffff:0000:0000:0000:0000:0000:0000'))\r\n\r\n    SELECT bitAnd(toIPv6('43:AB::'), IPv6StringToNum('ffff:ffff:0000:0000:0000:0000:0000:0000'))\r\n\r\n    Query id: 4355c453-ad91-4ef7-a5ad-18aded30bf99\r\n\r\n\r\n    0 rows in set. Elapsed: 0.005 sec. \r\n\r\n    Received exception from server (version 23.3.9):\r\n    Code: 43. DB::Exception: Received from localhost:9000. DB::Exception: Illegal types IPv6 and FixedString(16) of arguments of function bitAnd: While processing bitAnd(toIPv6('43:AB::'), IPv6StringToNum('ffff:ffff:0000:0000:0000:0000:0000:0000')). (ILLEGAL_TYPE_OF_ARGUMENT)\r\n    ```\r\n\r\n\r\n* ClickHouse 22.8.21\r\n\r\n    ```sql\r\n    myserver :) SELECT bitAnd(toIPv4('1.2.3.4'), 20000000)\r\n\r\n    SELECT bitAnd(toIPv4('1.2.3.4'), 20000000)\r\n\r\n    Query id: 131967d4-81d6-4304-abe6-a35d88a67115\r\n\r\n    \u250c\u2500bitAnd(toIPv4('1.2.3.4'), 20000000)\u2500\u2510\r\n    \u2502                            16777472 \u2502\r\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n    1 row in set. Elapsed: 0.001 sec. \r\n\r\n    myserver :) SELECT bitAnd(toIPv4('1.2.3.4'), IPv4StringToNum('1.2.0.0'))\r\n\r\n    SELECT bitAnd(toIPv4('1.2.3.4'), IPv4StringToNum('1.2.0.0'))\r\n\r\n    Query id: 91a8c219-3533-421c-9cc7-d49017a2ee01\r\n\r\n    \u250c\u2500bitAnd(toIPv4('1.2.3.4'), IPv4StringToNum('1.2.0.0'))\u2500\u2510\r\n    \u2502                                              16908288 \u2502\r\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n    1 row in set. Elapsed: 0.002 sec. \r\n\r\n    myserver :) SELECT IPv6NumToString(bitAnd(toIPv6('43:AB::'), toIPv6('ffff:ffff:0000:0000:0000:0000:0000:0000')))\r\n\r\n    SELECT IPv6NumToString(bitAnd(toIPv6('43:AB::'), toIPv6('ffff:ffff:0000:0000:0000:0000:0000:0000')))\r\n\r\n    Query id: b0a03283-db12-42b5-bab9-57b8ed8c42bb\r\n\r\n    \u250c\u2500IPv6NumToString(bitAnd(toIPv6('43:AB::'), toIPv6('ffff:ffff:0000:0000:0000:0000:0000:0000')))\u2500\u2510\r\n    \u2502 43:ab::                                                                                       \u2502\r\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n    1 row in set. Elapsed: 0.004 sec. \r\n\r\n    myserver :) SELECT IPv6NumToString(bitAnd(toIPv6('43:AB::'), IPv6StringToNum('ffff:ffff:0000:0000:0000:0000:0000:0000')))\r\n\r\n    SELECT IPv6NumToString(bitAnd(toIPv6('43:AB::'), IPv6StringToNum('ffff:ffff:0000:0000:0000:0000:0000:0000')))\r\n\r\n    Query id: a6625b0a-0577-4e87-a773-b34112e46753\r\n\r\n    \u250c\u2500IPv6NumToString(bitAnd(toIPv6('43:AB::'), IPv6StringToNum('ffff:ffff:0000:0000:0000:0000:0000:0000')))\u2500\u2510\r\n    \u2502 43:ab::                                                                                                \u2502\r\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n    1 row in set. Elapsed: 0.003 sec. \r\n\r\n    ```\r\n\r\n**Additional context**\r\nN/A\r\n\n",
  "hints_text": "IPv4StringToNum was never intended to be used with IPv4 type.\r\nIPv6StringToNum the same with IPv6 type.\r\n\r\nInitially Clickhouse did not have IPv4 & IPv6. Users stored ipv4 and ipv6 addresses using UInt32 and FixedString. And they continue to do it! They use IPv4StringToNum & IPv6StringToNum to convert string representations of ip addresses to UInt32 & FixedString. \r\nLater Clickhouse got new datatypes IPv4 & IPv6, these datatypes have own functions -- toIPv4, toIPv6 and they produce correct types.\r\n\r\n**The fact that IPv4StringToNum & IPv6StringToNum were compatible with IPv4 & IPv6 was a pure accident, undefined behaviour.** \r\n\r\n----\r\n\r\n>Moreover the bitAnd operator does not support the IPv6 Data type anymore. bitAnd operator on IPv6 data type is exceptionally useful when it comes to network masking and other IP-related operations.\r\n\r\nProbably bitAnd or something more meaningful should be implemented for IPv4/6 types.\nit also sounds like cutIPv6 function\r\n\r\nhttps://clickhouse.com/docs/en/sql-reference/functions/ip-address-functions#cutipv6x-bytestocutforipv6-bytestocutforipv4\n> IPv4StringToNum was never intended to be used with IPv4 type. IPv6StringToNum the same with IPv6 type.\r\n> \r\n> **The fact that IPv4StringToNum & IPv6StringToNum were compatible with IPv4 & IPv6 was a pure accident, undefined behaviour.**\r\n\r\nThat actually surprises me since both of those have been mentioned in documentation as [Functions for Working with IPv4 and IPv6 Addresses](https://clickhouse.com/docs/en/sql-reference/functions/ip-address-functions). The domain types/aliases for IPv4/IPv6 did have some nice features that had been added over the years. ClickHouse 22.3 added some decent support for the `OrNull` and the `OrDefault` functions for working with IP data types. \r\n\r\n> it also sounds like cutIPv6 function\r\n> \r\n> https://clickhouse.com/docs/en/sql-reference/functions/ip-address-functions#cutipv6x-bytestocutforipv6-bytestocutforipv4\r\n\r\nThe `cutIPv6` function does not provide the same granularity and control for network data analytics that a `bitAnd` function does. The `bitAnd` operator provides a fine grained control in network analytics and operation. The lack of support for the `bitAnd` operator is perhaps the a big limitation for those planning to migrate off of older versions :/ \nAlso, the `IPv6CIDRToRange` function is closer than the `cutIPv6` function (which is a byte function), though I have not yet checked it on ClickHouse 23.X. That said, there might be cases where it might not be enough and a `bitAnd` would still be needed.\r\n\r\n```sql\r\nmyserver :) select tupleElement(IPv6CIDRToRange(toIPv6('f00d:dead:beef:101:1337:d0d0:15:dead'), 32), 1)\r\n\r\nSELECT IPv6CIDRToRange(toIPv6('f00d:dead:beef:101:1337:d0d0:15:dead'), 32).1\r\n\r\nQuery id: e2642026-447d-48fb-927a-760db13815ad\r\n\r\n\u250c\u2500tupleElement(IPv6CIDRToRange(toIPv6('f00d:dead:beef:101:1337:d0d0:15:dead'), 32), 1)\u2500\u2510\r\n\u2502 f00d:dead::                                                                          \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n\r\n\r\n```",
  "created_at": "2023-12-09T18:00:36Z"
}