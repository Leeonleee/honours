diff --git a/dbms/CMakeLists.txt b/dbms/CMakeLists.txt
index f011cc211036..355c66902a80 100644
--- a/dbms/CMakeLists.txt
+++ b/dbms/CMakeLists.txt
@@ -241,6 +241,7 @@ target_link_libraries(clickhouse_common_io
     ${EXECINFO_LIBRARIES}
         PUBLIC
     ${Boost_SYSTEM_LIBRARY}
+    ${Boost_PROGRAM_OPTIONS_LIBRARY}
         PRIVATE
     apple_rt
         PUBLIC
diff --git a/dbms/programs/benchmark/Benchmark.cpp b/dbms/programs/benchmark/Benchmark.cpp
index fedb7f778a17..e685425eefc9 100644
--- a/dbms/programs/benchmark/Benchmark.cpp
+++ b/dbms/programs/benchmark/Benchmark.cpp
@@ -32,6 +32,7 @@
 #include <Client/Connection.h>
 #include <Common/InterruptListener.h>
 #include <Common/Config/configReadClient.h>
+#include <Common/TerminalSize.h>
 #include <Common/StudentTTest.h>
 
 
@@ -504,7 +505,7 @@ int mainEntryClickHouseBenchmark(int argc, char ** argv)
     {
         using boost::program_options::value;
 
-        boost::program_options::options_description desc("Allowed options");
+        boost::program_options::options_description desc = createOptionsDescription("Allowed options", getTerminalWidth());
         desc.add_options()
             ("help",                                                            "produce help message")
             ("concurrency,c", value<unsigned>()->default_value(1),              "number of parallel queries")
diff --git a/dbms/programs/client/Client.cpp b/dbms/programs/client/Client.cpp
index cf72d7a87c33..6caf57a28bd3 100644
--- a/dbms/programs/client/Client.cpp
+++ b/dbms/programs/client/Client.cpp
@@ -67,6 +67,7 @@
 #include <Common/Config/configReadClient.h>
 #include <Storages/ColumnsDescription.h>
 #include <common/argsToConfig.h>
+#include <Common/TerminalSize.h>
 
 #if USE_READLINE
 #include "Suggest.h"
@@ -130,7 +131,7 @@ class Client : public Poco::Util::Application
     bool print_time_to_stderr = false;   /// Output execution time to stderr in batch mode.
     bool stdin_is_not_tty = false;       /// stdin is not a terminal.
 
-    winsize terminal_size {};            /// Terminal size is needed to render progress bar.
+    uint16_t terminal_width = 0;         /// Terminal width is needed to render progress bar.
 
     std::unique_ptr<Connection> connection;    /// Connection to DB.
     String query_id;                     /// Current query_id.
@@ -1465,7 +1466,7 @@ class Client : public Poco::Util::Application
 
                 if (show_progress_bar)
                 {
-                    ssize_t width_of_progress_bar = static_cast<ssize_t>(terminal_size.ws_col) - written_progress_chars - strlen(" 99%");
+                    ssize_t width_of_progress_bar = static_cast<ssize_t>(terminal_width) - written_progress_chars - strlen(" 99%");
                     if (width_of_progress_bar > 0)
                     {
                         std::string bar = UnicodeBar::render(UnicodeBar::getWidth(progress.read_rows, 0, total_rows_corrected, width_of_progress_bar));
@@ -1642,22 +1643,13 @@ class Client : public Poco::Util::Application
 
         stdin_is_not_tty = !isatty(STDIN_FILENO);
 
-        namespace po = boost::program_options;
-
-        unsigned line_length = po::options_description::m_default_line_length;
-        unsigned min_description_length = line_length / 2;
         if (!stdin_is_not_tty)
-        {
-            if (ioctl(STDIN_FILENO, TIOCGWINSZ, &terminal_size))
-                throwFromErrno("Cannot obtain terminal window size (ioctl TIOCGWINSZ)", ErrorCodes::SYSTEM_ERROR);
-            line_length = std::max(
-                static_cast<unsigned>(strlen("--http_native_compression_disable_checksumming_on_decompress ")),
-                static_cast<unsigned>(terminal_size.ws_col));
-            min_description_length = std::min(min_description_length, line_length - 2);
-        }
+            terminal_width = getTerminalWidth();
+
+        namespace po = boost::program_options;
 
         /// Main commandline options related to client functionality and all parameters from Settings.
-        po::options_description main_description("Main options", line_length, min_description_length);
+        po::options_description main_description = createOptionsDescription("Main options", terminal_width);
         main_description.add_options()
             ("help", "produce help message")
             ("config-file,C", po::value<std::string>(), "config-file path")
@@ -1672,7 +1664,7 @@ class Client : public Poco::Util::Application
               * the "
" is used to distinguish this case because there is hardly a chance an user would use "
"
               * as the password.
               */
-            ("password", po::value<std::string>()->implicit_value("
"), "password")
+            ("password", po::value<std::string>()->implicit_value("
", ""), "password")
             ("ask-password", "ask-password")
             ("query_id", po::value<std::string>(), "query_id")
             ("query,q", po::value<std::string>(), "query")
@@ -1703,7 +1695,7 @@ class Client : public Poco::Util::Application
         context.getSettingsRef().addProgramOptions(main_description);
 
         /// Commandline options related to external tables.
-        po::options_description external_description("External tables options");
+        po::options_description external_description = createOptionsDescription("External tables options", terminal_width);
         external_description.add_options()
             ("file", po::value<std::string>(), "data file or - for stdin")
             ("name", po::value<std::string>()->default_value("_data"), "name of the table")
diff --git a/dbms/programs/compressor/Compressor.cpp b/dbms/programs/compressor/Compressor.cpp
index 427d58cbdc67..a073a79b4165 100644
--- a/dbms/programs/compressor/Compressor.cpp
+++ b/dbms/programs/compressor/Compressor.cpp
@@ -12,8 +12,9 @@
 #include <IO/copyData.h>
 #include <Parsers/parseQuery.h>
 #include <Parsers/ExpressionElementParsers.h>
-
 #include <Compression/CompressionFactory.h>
+#include <Common/TerminalSize.h>
+
 
 namespace DB
 {
@@ -59,7 +60,7 @@ void checkAndWriteHeader(DB::ReadBuffer & in, DB::WriteBuffer & out)
 
 int mainEntryClickHouseCompressor(int argc, char ** argv)
 {
-    boost::program_options::options_description desc("Allowed options");
+    boost::program_options::options_description desc = createOptionsDescription("Allowed options", getTerminalWidth());
     desc.add_options()
         ("help,h", "produce help message")
         ("decompress,d", "decompress")
diff --git a/dbms/programs/format/Format.cpp b/dbms/programs/format/Format.cpp
index b7e2629df166..ff415d88e1b9 100644
--- a/dbms/programs/format/Format.cpp
+++ b/dbms/programs/format/Format.cpp
@@ -6,13 +6,13 @@
 #include <Parsers/ParserQuery.h>
 #include <Parsers/parseQuery.h>
 #include <Parsers/formatAST.h>
-
+#include <Common/TerminalSize.h>
 
 int mainEntryClickHouseFormat(int argc, char ** argv)
 {
     using namespace DB;
 
-    boost::program_options::options_description desc("Allowed options");
+    boost::program_options::options_description desc = createOptionsDescription("Allowed options", getTerminalWidth());
     desc.add_options()
         ("help,h", "produce help message")
         ("hilite", "add syntax highlight with ANSI terminal escape sequences")
diff --git a/dbms/programs/local/LocalServer.cpp b/dbms/programs/local/LocalServer.cpp
index bed55a0fc5f0..54383050b6c0 100644
--- a/dbms/programs/local/LocalServer.cpp
+++ b/dbms/programs/local/LocalServer.cpp
@@ -35,6 +35,7 @@
 #include <boost/program_options/options_description.hpp>
 #include <boost/program_options.hpp>
 #include <common/argsToConfig.h>
+#include <Common/TerminalSize.h>
 
 
 namespace DB
@@ -409,17 +410,7 @@ void LocalServer::init(int argc, char ** argv)
     /// Don't parse options with Poco library, we prefer neat boost::program_options
     stopOptionsProcessing();
 
-    unsigned line_length = po::options_description::m_default_line_length;
-    unsigned min_description_length = line_length / 2;
-    if (isatty(STDIN_FILENO))
-    {
-        winsize terminal_size{};
-        ioctl(0, TIOCGWINSZ, &terminal_size);
-        line_length = std::max(3U, static_cast<unsigned>(terminal_size.ws_col));
-        min_description_length = std::min(min_description_length, line_length - 2);
-    }
-
-    po::options_description description("Main options", line_length, min_description_length);
+    po::options_description description = createOptionsDescription("Main options", getTerminalWidth());
     description.add_options()
         ("help", "produce help message")
         ("config-file,c", po::value<std::string>(), "config-file path")
diff --git a/dbms/programs/obfuscator/Obfuscator.cpp b/dbms/programs/obfuscator/Obfuscator.cpp
index 5149566465ca..febe2b286060 100644
--- a/dbms/programs/obfuscator/Obfuscator.cpp
+++ b/dbms/programs/obfuscator/Obfuscator.cpp
@@ -37,6 +37,7 @@
 #include <boost/program_options.hpp>
 #include <boost/algorithm/string.hpp>
 #include <boost/container/flat_map.hpp>
+#include <Common/TerminalSize.h>
 
 
 static const char * documantation = R"(
@@ -949,7 +950,7 @@ try
     using namespace DB;
     namespace po = boost::program_options;
 
-    po::options_description description("Options");
+    po::options_description description = createOptionsDescription("Options", getTerminalWidth());
     description.add_options()
         ("help", "produce help message")
         ("structure,S", po::value<std::string>(), "structure of the initial table (list of column and type names)")
diff --git a/dbms/src/Common/TerminalSize.cpp b/dbms/src/Common/TerminalSize.cpp
new file mode 100644
index 000000000000..714a19b188ab
--- /dev/null
+++ b/dbms/src/Common/TerminalSize.cpp
@@ -0,0 +1,37 @@
+#include <unistd.h>
+#include <sys/ioctl.h>
+#include <Common/Exception.h>
+#include <Common/TerminalSize.h>
+#include <boost/program_options.hpp>
+
+
+namespace DB::ErrorCodes
+{
+    extern const int SYSTEM_ERROR;
+}
+
+uint16_t getTerminalWidth()
+{
+    if (isatty(STDIN_FILENO))
+    {
+        winsize terminal_size {};
+
+        if (ioctl(STDIN_FILENO, TIOCGWINSZ, &terminal_size))
+            DB::throwFromErrno("Cannot obtain terminal window size (ioctl TIOCGWINSZ)", DB::ErrorCodes::SYSTEM_ERROR);
+
+        return terminal_size.ws_col;
+    }
+    return 0;
+}
+
+po::options_description createOptionsDescription(const std::string & caption, uint16_t terminal_width)
+{
+    unsigned line_length = po::options_description::m_default_line_length;
+    unsigned min_description_length = line_length / 2;
+    std::string longest_option_desc = "--http_native_compression_disable_checksumming_on_decompress";
+
+    line_length = std::max(static_cast<uint16_t>(longest_option_desc.size()), terminal_width);
+    min_description_length = std::min(min_description_length, line_length - 2);
+
+    return po::options_description(caption, line_length, min_description_length);
+}
diff --git a/dbms/src/Common/TerminalSize.h b/dbms/src/Common/TerminalSize.h
new file mode 100644
index 000000000000..d7eee417f469
--- /dev/null
+++ b/dbms/src/Common/TerminalSize.h
@@ -0,0 +1,16 @@
+#pragma once
+
+#include <string>
+#include <boost/program_options.hpp>
+
+
+namespace po = boost::program_options;
+
+
+uint16_t getTerminalWidth();
+
+/** Creates po::options_description with name and an appropriate size for option displaying
+ *  when program is called with option --help
+ * */
+po::options_description createOptionsDescription(const std::string &caption, unsigned short terminal_width);
+
