{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 6590,
  "instance_id": "ClickHouse__ClickHouse-6590",
  "issue_numbers": [
    "5808"
  ],
  "base_commit": "696d505a1a185e6bf6741753a2be3f2fdad8bb30",
  "patch": "diff --git a/dbms/CMakeLists.txt b/dbms/CMakeLists.txt\nindex f011cc211036..355c66902a80 100644\n--- a/dbms/CMakeLists.txt\n+++ b/dbms/CMakeLists.txt\n@@ -241,6 +241,7 @@ target_link_libraries(clickhouse_common_io\n     ${EXECINFO_LIBRARIES}\n         PUBLIC\n     ${Boost_SYSTEM_LIBRARY}\n+    ${Boost_PROGRAM_OPTIONS_LIBRARY}\n         PRIVATE\n     apple_rt\n         PUBLIC\ndiff --git a/dbms/programs/benchmark/Benchmark.cpp b/dbms/programs/benchmark/Benchmark.cpp\nindex fedb7f778a17..e685425eefc9 100644\n--- a/dbms/programs/benchmark/Benchmark.cpp\n+++ b/dbms/programs/benchmark/Benchmark.cpp\n@@ -32,6 +32,7 @@\n #include <Client/Connection.h>\n #include <Common/InterruptListener.h>\n #include <Common/Config/configReadClient.h>\n+#include <Common/TerminalSize.h>\n #include <Common/StudentTTest.h>\n \n \n@@ -504,7 +505,7 @@ int mainEntryClickHouseBenchmark(int argc, char ** argv)\n     {\n         using boost::program_options::value;\n \n-        boost::program_options::options_description desc(\"Allowed options\");\n+        boost::program_options::options_description desc = createOptionsDescription(\"Allowed options\", getTerminalWidth());\n         desc.add_options()\n             (\"help\",                                                            \"produce help message\")\n             (\"concurrency,c\", value<unsigned>()->default_value(1),              \"number of parallel queries\")\ndiff --git a/dbms/programs/client/Client.cpp b/dbms/programs/client/Client.cpp\nindex cf72d7a87c33..6caf57a28bd3 100644\n--- a/dbms/programs/client/Client.cpp\n+++ b/dbms/programs/client/Client.cpp\n@@ -67,6 +67,7 @@\n #include <Common/Config/configReadClient.h>\n #include <Storages/ColumnsDescription.h>\n #include <common/argsToConfig.h>\n+#include <Common/TerminalSize.h>\n \n #if USE_READLINE\n #include \"Suggest.h\"\n@@ -130,7 +131,7 @@ class Client : public Poco::Util::Application\n     bool print_time_to_stderr = false;   /// Output execution time to stderr in batch mode.\n     bool stdin_is_not_tty = false;       /// stdin is not a terminal.\n \n-    winsize terminal_size {};            /// Terminal size is needed to render progress bar.\n+    uint16_t terminal_width = 0;         /// Terminal width is needed to render progress bar.\n \n     std::unique_ptr<Connection> connection;    /// Connection to DB.\n     String query_id;                     /// Current query_id.\n@@ -1465,7 +1466,7 @@ class Client : public Poco::Util::Application\n \n                 if (show_progress_bar)\n                 {\n-                    ssize_t width_of_progress_bar = static_cast<ssize_t>(terminal_size.ws_col) - written_progress_chars - strlen(\" 99%\");\n+                    ssize_t width_of_progress_bar = static_cast<ssize_t>(terminal_width) - written_progress_chars - strlen(\" 99%\");\n                     if (width_of_progress_bar > 0)\n                     {\n                         std::string bar = UnicodeBar::render(UnicodeBar::getWidth(progress.read_rows, 0, total_rows_corrected, width_of_progress_bar));\n@@ -1642,22 +1643,13 @@ class Client : public Poco::Util::Application\n \n         stdin_is_not_tty = !isatty(STDIN_FILENO);\n \n-        namespace po = boost::program_options;\n-\n-        unsigned line_length = po::options_description::m_default_line_length;\n-        unsigned min_description_length = line_length / 2;\n         if (!stdin_is_not_tty)\n-        {\n-            if (ioctl(STDIN_FILENO, TIOCGWINSZ, &terminal_size))\n-                throwFromErrno(\"Cannot obtain terminal window size (ioctl TIOCGWINSZ)\", ErrorCodes::SYSTEM_ERROR);\n-            line_length = std::max(\n-                static_cast<unsigned>(strlen(\"--http_native_compression_disable_checksumming_on_decompress \")),\n-                static_cast<unsigned>(terminal_size.ws_col));\n-            min_description_length = std::min(min_description_length, line_length - 2);\n-        }\n+            terminal_width = getTerminalWidth();\n+\n+        namespace po = boost::program_options;\n \n         /// Main commandline options related to client functionality and all parameters from Settings.\n-        po::options_description main_description(\"Main options\", line_length, min_description_length);\n+        po::options_description main_description = createOptionsDescription(\"Main options\", terminal_width);\n         main_description.add_options()\n             (\"help\", \"produce help message\")\n             (\"config-file,C\", po::value<std::string>(), \"config-file path\")\n@@ -1672,7 +1664,7 @@ class Client : public Poco::Util::Application\n               * the \"\\n\" is used to distinguish this case because there is hardly a chance an user would use \"\\n\"\n               * as the password.\n               */\n-            (\"password\", po::value<std::string>()->implicit_value(\"\\n\"), \"password\")\n+            (\"password\", po::value<std::string>()->implicit_value(\"\\n\", \"\"), \"password\")\n             (\"ask-password\", \"ask-password\")\n             (\"query_id\", po::value<std::string>(), \"query_id\")\n             (\"query,q\", po::value<std::string>(), \"query\")\n@@ -1703,7 +1695,7 @@ class Client : public Poco::Util::Application\n         context.getSettingsRef().addProgramOptions(main_description);\n \n         /// Commandline options related to external tables.\n-        po::options_description external_description(\"External tables options\");\n+        po::options_description external_description = createOptionsDescription(\"External tables options\", terminal_width);\n         external_description.add_options()\n             (\"file\", po::value<std::string>(), \"data file or - for stdin\")\n             (\"name\", po::value<std::string>()->default_value(\"_data\"), \"name of the table\")\ndiff --git a/dbms/programs/compressor/Compressor.cpp b/dbms/programs/compressor/Compressor.cpp\nindex 427d58cbdc67..a073a79b4165 100644\n--- a/dbms/programs/compressor/Compressor.cpp\n+++ b/dbms/programs/compressor/Compressor.cpp\n@@ -12,8 +12,9 @@\n #include <IO/copyData.h>\n #include <Parsers/parseQuery.h>\n #include <Parsers/ExpressionElementParsers.h>\n-\n #include <Compression/CompressionFactory.h>\n+#include <Common/TerminalSize.h>\n+\n \n namespace DB\n {\n@@ -59,7 +60,7 @@ void checkAndWriteHeader(DB::ReadBuffer & in, DB::WriteBuffer & out)\n \n int mainEntryClickHouseCompressor(int argc, char ** argv)\n {\n-    boost::program_options::options_description desc(\"Allowed options\");\n+    boost::program_options::options_description desc = createOptionsDescription(\"Allowed options\", getTerminalWidth());\n     desc.add_options()\n         (\"help,h\", \"produce help message\")\n         (\"decompress,d\", \"decompress\")\ndiff --git a/dbms/programs/format/Format.cpp b/dbms/programs/format/Format.cpp\nindex b7e2629df166..ff415d88e1b9 100644\n--- a/dbms/programs/format/Format.cpp\n+++ b/dbms/programs/format/Format.cpp\n@@ -6,13 +6,13 @@\n #include <Parsers/ParserQuery.h>\n #include <Parsers/parseQuery.h>\n #include <Parsers/formatAST.h>\n-\n+#include <Common/TerminalSize.h>\n \n int mainEntryClickHouseFormat(int argc, char ** argv)\n {\n     using namespace DB;\n \n-    boost::program_options::options_description desc(\"Allowed options\");\n+    boost::program_options::options_description desc = createOptionsDescription(\"Allowed options\", getTerminalWidth());\n     desc.add_options()\n         (\"help,h\", \"produce help message\")\n         (\"hilite\", \"add syntax highlight with ANSI terminal escape sequences\")\ndiff --git a/dbms/programs/local/LocalServer.cpp b/dbms/programs/local/LocalServer.cpp\nindex bed55a0fc5f0..54383050b6c0 100644\n--- a/dbms/programs/local/LocalServer.cpp\n+++ b/dbms/programs/local/LocalServer.cpp\n@@ -35,6 +35,7 @@\n #include <boost/program_options/options_description.hpp>\n #include <boost/program_options.hpp>\n #include <common/argsToConfig.h>\n+#include <Common/TerminalSize.h>\n \n \n namespace DB\n@@ -409,17 +410,7 @@ void LocalServer::init(int argc, char ** argv)\n     /// Don't parse options with Poco library, we prefer neat boost::program_options\n     stopOptionsProcessing();\n \n-    unsigned line_length = po::options_description::m_default_line_length;\n-    unsigned min_description_length = line_length / 2;\n-    if (isatty(STDIN_FILENO))\n-    {\n-        winsize terminal_size{};\n-        ioctl(0, TIOCGWINSZ, &terminal_size);\n-        line_length = std::max(3U, static_cast<unsigned>(terminal_size.ws_col));\n-        min_description_length = std::min(min_description_length, line_length - 2);\n-    }\n-\n-    po::options_description description(\"Main options\", line_length, min_description_length);\n+    po::options_description description = createOptionsDescription(\"Main options\", getTerminalWidth());\n     description.add_options()\n         (\"help\", \"produce help message\")\n         (\"config-file,c\", po::value<std::string>(), \"config-file path\")\ndiff --git a/dbms/programs/obfuscator/Obfuscator.cpp b/dbms/programs/obfuscator/Obfuscator.cpp\nindex 5149566465ca..febe2b286060 100644\n--- a/dbms/programs/obfuscator/Obfuscator.cpp\n+++ b/dbms/programs/obfuscator/Obfuscator.cpp\n@@ -37,6 +37,7 @@\n #include <boost/program_options.hpp>\n #include <boost/algorithm/string.hpp>\n #include <boost/container/flat_map.hpp>\n+#include <Common/TerminalSize.h>\n \n \n static const char * documantation = R\"(\n@@ -949,7 +950,7 @@ try\n     using namespace DB;\n     namespace po = boost::program_options;\n \n-    po::options_description description(\"Options\");\n+    po::options_description description = createOptionsDescription(\"Options\", getTerminalWidth());\n     description.add_options()\n         (\"help\", \"produce help message\")\n         (\"structure,S\", po::value<std::string>(), \"structure of the initial table (list of column and type names)\")\ndiff --git a/dbms/src/Common/TerminalSize.cpp b/dbms/src/Common/TerminalSize.cpp\nnew file mode 100644\nindex 000000000000..714a19b188ab\n--- /dev/null\n+++ b/dbms/src/Common/TerminalSize.cpp\n@@ -0,0 +1,37 @@\n+#include <unistd.h>\n+#include <sys/ioctl.h>\n+#include <Common/Exception.h>\n+#include <Common/TerminalSize.h>\n+#include <boost/program_options.hpp>\n+\n+\n+namespace DB::ErrorCodes\n+{\n+    extern const int SYSTEM_ERROR;\n+}\n+\n+uint16_t getTerminalWidth()\n+{\n+    if (isatty(STDIN_FILENO))\n+    {\n+        winsize terminal_size {};\n+\n+        if (ioctl(STDIN_FILENO, TIOCGWINSZ, &terminal_size))\n+            DB::throwFromErrno(\"Cannot obtain terminal window size (ioctl TIOCGWINSZ)\", DB::ErrorCodes::SYSTEM_ERROR);\n+\n+        return terminal_size.ws_col;\n+    }\n+    return 0;\n+}\n+\n+po::options_description createOptionsDescription(const std::string & caption, uint16_t terminal_width)\n+{\n+    unsigned line_length = po::options_description::m_default_line_length;\n+    unsigned min_description_length = line_length / 2;\n+    std::string longest_option_desc = \"--http_native_compression_disable_checksumming_on_decompress\";\n+\n+    line_length = std::max(static_cast<uint16_t>(longest_option_desc.size()), terminal_width);\n+    min_description_length = std::min(min_description_length, line_length - 2);\n+\n+    return po::options_description(caption, line_length, min_description_length);\n+}\ndiff --git a/dbms/src/Common/TerminalSize.h b/dbms/src/Common/TerminalSize.h\nnew file mode 100644\nindex 000000000000..d7eee417f469\n--- /dev/null\n+++ b/dbms/src/Common/TerminalSize.h\n@@ -0,0 +1,16 @@\n+#pragma once\n+\n+#include <string>\n+#include <boost/program_options.hpp>\n+\n+\n+namespace po = boost::program_options;\n+\n+\n+uint16_t getTerminalWidth();\n+\n+/** Creates po::options_description with name and an appropriate size for option displaying\n+ *  when program is called with option --help\n+ * */\n+po::options_description createOptionsDescription(const std::string &caption, unsigned short terminal_width);\n+\n",
  "test_patch": "diff --git a/dbms/programs/performance-test/PerformanceTestSuite.cpp b/dbms/programs/performance-test/PerformanceTestSuite.cpp\nindex 14ea8882a6b4..eaa4e24cde94 100644\n--- a/dbms/programs/performance-test/PerformanceTestSuite.cpp\n+++ b/dbms/programs/performance-test/PerformanceTestSuite.cpp\n@@ -28,6 +28,7 @@\n #include <Core/Settings.h>\n #include <Common/Exception.h>\n #include <Common/InterruptListener.h>\n+#include <Common/TerminalSize.h>\n \n #include \"TestStopConditions.h\"\n #include \"TestStats.h\"\n@@ -324,7 +325,7 @@ try\n     using po::value;\n     using Strings = DB::Strings;\n \n-    po::options_description desc(\"Allowed options\");\n+    po::options_description desc = createOptionsDescription(\"Allowed options\", getTerminalWidth());\n     desc.add_options()\n         (\"help\", \"produce help message\")\n         (\"lite\", \"use lite version of output\")\n",
  "problem_statement": "clickhouse-performance-test --help: too narow column of text.\nLook at clickhouse-client.\n",
  "hints_text": "",
  "created_at": "2019-08-21T10:35:04Z",
  "modified_files": [
    "dbms/CMakeLists.txt",
    "dbms/programs/benchmark/Benchmark.cpp",
    "dbms/programs/client/Client.cpp",
    "dbms/programs/compressor/Compressor.cpp",
    "dbms/programs/format/Format.cpp",
    "dbms/programs/local/LocalServer.cpp",
    "dbms/programs/obfuscator/Obfuscator.cpp",
    "b/dbms/src/Common/TerminalSize.cpp",
    "b/dbms/src/Common/TerminalSize.h"
  ],
  "modified_test_files": [
    "dbms/programs/performance-test/PerformanceTestSuite.cpp"
  ]
}