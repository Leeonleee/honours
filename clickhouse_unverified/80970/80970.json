{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 80970,
  "instance_id": "ClickHouse__ClickHouse-80970",
  "issue_numbers": [
    "80938"
  ],
  "base_commit": "296dd892ce993c7751352eb4478f715573ad202a",
  "patch": "diff --git a/src/Processors/Transforms/ExtremesTransform.cpp b/src/Processors/Transforms/ExtremesTransform.cpp\nindex af6b4b5e11a4..6dbd6887cda0 100644\n--- a/src/Processors/Transforms/ExtremesTransform.cpp\n+++ b/src/Processors/Transforms/ExtremesTransform.cpp\n@@ -1,6 +1,7 @@\n #include <Processors/Transforms/ExtremesTransform.h>\n #include <Columns/IColumn.h>\n #include <Core/Field.h>\n+#include <Common/NaNUtils.h>\n \n namespace DB\n {\n@@ -105,9 +106,17 @@ void ExtremesTransform::transform(DB::Chunk & chunk)\n \n             columns[i]->getExtremes(cur_min_value, cur_max_value);\n \n-            if (cur_min_value < min_value)\n+            // getExtremes implementations for Nullable and floating point are ignoring Nulls, so do the same here\n+            auto isNullORNaN = [] (const Field & value)\n+            {\n+                if (value.isNull())\n+                    return true;\n+                Float64 rawVal;\n+                return value.tryGet<Float64>(rawVal) && isNaN(rawVal);\n+            };\n+            if (isNullORNaN(min_value) || (!isNullORNaN(cur_min_value) && cur_min_value < min_value))\n                 min_value = cur_min_value;\n-            if (cur_max_value > max_value)\n+            if (isNullORNaN(max_value) || (!isNullORNaN(cur_max_value) && cur_max_value > max_value))\n                 max_value = cur_max_value;\n \n             MutableColumnPtr new_extremes = extremes_columns[i]->cloneEmpty();\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03524_nullable_extremes.reference b/tests/queries/0_stateless/03524_nullable_extremes.reference\nnew file mode 100644\nindex 000000000000..fe978fd09783\n--- /dev/null\n+++ b/tests/queries/0_stateless/03524_nullable_extremes.reference\n@@ -0,0 +1,28 @@\n+--- int, single part\n+1\n+2\n+\\N\n+\n+1\n+2\n+--- int, multi part\n+1\n+2\n+\\N\n+\n+1\n+2\n+--- float, single part\n+1\n+2\n+nan\n+\n+1\n+2\n+--- float, multi part\n+1\n+2\n+nan\n+\n+1\n+2\ndiff --git a/tests/queries/0_stateless/03524_nullable_extremes.sql b/tests/queries/0_stateless/03524_nullable_extremes.sql\nnew file mode 100644\nindex 000000000000..669a432dcce1\n--- /dev/null\n+++ b/tests/queries/0_stateless/03524_nullable_extremes.sql\n@@ -0,0 +1,19 @@\n+SELECT '--- int, single part';\n+CREATE TABLE single_int (k Int64, c Nullable(Int64)) Engine=MergeTree ORDER BY k;\n+INSERT INTO single_int VALUES (1, 1), (2, 2), (3, NULL);\n+SELECT c FROM single_int ORDER BY ALL SETTINGS extremes=1;\n+\n+SELECT '--- int, multi part';\n+CREATE TABLE multi_int (k Int64, c Nullable(Int64)) Engine=MergeTree ORDER BY k PARTITION BY k;\n+INSERT INTO multi_int VALUES (1, 1), (2, 2), (3, NULL);\n+SELECT c FROM multi_int ORDER BY ALL SETTINGS extremes=1;\n+\n+SELECT '--- float, single part';\n+CREATE TABLE single_float (k Int64, c Float64) Engine=MergeTree ORDER BY c;\n+INSERT INTO single_float VALUES (1, 1), (2, 2), (3, 0/0);\n+SELECT c FROM single_float ORDER BY ALL SETTINGS extremes=1;\n+\n+SELECT '--- float, multi part';\n+CREATE TABLE multi_float (k Int64, c Float64) Engine=MergeTree ORDER BY k PARTITION BY k;\n+INSERT INTO multi_float VALUES (1, 1), (2, 2), (3, 0/0);\n+SELECT c FROM multi_float ORDER BY ALL SETTINGS extremes=1;\n",
  "problem_statement": "Confusing extreme values\n### Describe the bug\n\nDepending on the `max_block_size` setting, the calculated extreme values may not be calculated or may be different.\n\n### How to reproduce\n\nThe case for `max_block_size = 8` https://fiddle.clickhouse.com/2bdfdf51-6904-4368-90a3-157ced326641 and `max_block_size = 1024` https://fiddle.clickhouse.com/1cb35c6f-2c62-4c51-b995-35b5ff0d9785 for comparison.\n\n### Error message and/or stacktrace\n\n_No response_\n",
  "hints_text": "",
  "created_at": "2025-05-28T14:17:07Z"
}