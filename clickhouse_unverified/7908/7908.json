{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 7908,
  "instance_id": "ClickHouse__ClickHouse-7908",
  "issue_numbers": [
    "7836"
  ],
  "base_commit": "e1521524e96eb1663a03a70fb1d8ec966421361e",
  "patch": "diff --git a/dbms/src/DataStreams/NativeBlockInputStream.cpp b/dbms/src/DataStreams/NativeBlockInputStream.cpp\nindex 246d1882a5d7..1c73456154a3 100644\n--- a/dbms/src/DataStreams/NativeBlockInputStream.cpp\n+++ b/dbms/src/DataStreams/NativeBlockInputStream.cpp\n@@ -159,7 +159,7 @@ Block NativeBlockInputStream::readImpl()\n             auto & header_column = header.getByName(column.name);\n             if (!header_column.type->equals(*column.type))\n             {\n-                column.column = recursiveLowCardinalityConversion(column.column, column.type, header.getByPosition(i).type);\n+                column.column = recursiveTypeConversion(column.column, column.type, header.getByPosition(i).type);\n                 column.type = header.getByPosition(i).type;\n             }\n         }\ndiff --git a/dbms/src/DataTypes/DataTypeLowCardinality.h b/dbms/src/DataTypes/DataTypeLowCardinality.h\nindex 668045cc1599..f8c314909b85 100644\n--- a/dbms/src/DataTypes/DataTypeLowCardinality.h\n+++ b/dbms/src/DataTypes/DataTypeLowCardinality.h\n@@ -126,6 +126,6 @@ DataTypePtr recursiveRemoveLowCardinality(const DataTypePtr & type);\n ColumnPtr recursiveRemoveLowCardinality(const ColumnPtr & column);\n \n /// Convert column of type from_type to type to_type by converting nested LowCardinality columns.\n-ColumnPtr recursiveLowCardinalityConversion(const ColumnPtr & column, const DataTypePtr & from_type, const DataTypePtr & to_type);\n+ColumnPtr recursiveTypeConversion(const ColumnPtr & column, const DataTypePtr & from_type, const DataTypePtr & to_type);\n \n }\ndiff --git a/dbms/src/DataTypes/DataTypeLowCardinalityHelpers.cpp b/dbms/src/DataTypes/DataTypeLowCardinalityHelpers.cpp\nindex 6ebd6586c18b..0fddd15b4043 100644\n--- a/dbms/src/DataTypes/DataTypeLowCardinalityHelpers.cpp\n+++ b/dbms/src/DataTypes/DataTypeLowCardinalityHelpers.cpp\n@@ -84,7 +84,7 @@ ColumnPtr recursiveRemoveLowCardinality(const ColumnPtr & column)\n     return column;\n }\n \n-ColumnPtr recursiveLowCardinalityConversion(const ColumnPtr & column, const DataTypePtr & from_type, const DataTypePtr & to_type)\n+ColumnPtr recursiveTypeConversion(const ColumnPtr & column, const DataTypePtr & from_type, const DataTypePtr & to_type)\n {\n     if (!column)\n         return column;\n@@ -92,10 +92,14 @@ ColumnPtr recursiveLowCardinalityConversion(const ColumnPtr & column, const Data\n     if (from_type->equals(*to_type))\n         return column;\n \n+    /// We can allow insert enum column if it's numeric type is the same as the column's type in table.\n+    if (WhichDataType(to_type).isEnum() && from_type->getTypeId() == to_type->getTypeId())\n+        return column;\n+\n     if (const auto * column_const = typeid_cast<const ColumnConst *>(column.get()))\n     {\n         auto & nested = column_const->getDataColumnPtr();\n-        auto nested_no_lc = recursiveLowCardinalityConversion(nested, from_type, to_type);\n+        auto nested_no_lc = recursiveTypeConversion(nested, from_type, to_type);\n         if (nested.get() == nested_no_lc.get())\n             return column;\n \n@@ -131,7 +135,7 @@ ColumnPtr recursiveLowCardinalityConversion(const ColumnPtr & column, const Data\n             auto & nested_to = to_array_type->getNestedType();\n \n             return ColumnArray::create(\n-                    recursiveLowCardinalityConversion(column_array->getDataPtr(), nested_from, nested_to),\n+                    recursiveTypeConversion(column_array->getDataPtr(), nested_from, nested_to),\n                     column_array->getOffsetsPtr());\n         }\n     }\n@@ -154,7 +158,7 @@ ColumnPtr recursiveLowCardinalityConversion(const ColumnPtr & column, const Data\n             for (size_t i = 0; i < columns.size(); ++i)\n             {\n                 auto & element = columns[i];\n-                auto element_no_lc = recursiveLowCardinalityConversion(element, from_elements.at(i), to_elements.at(i));\n+                auto element_no_lc = recursiveTypeConversion(element, from_elements.at(i), to_elements.at(i));\n                 if (element.get() != element_no_lc.get())\n                 {\n                     element = element_no_lc;\n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/01035_enum_conversion_native_format.reference b/dbms/tests/queries/0_stateless/01035_enum_conversion_native_format.reference\nnew file mode 100644\nindex 000000000000..7e8a1653bf24\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/01035_enum_conversion_native_format.reference\n@@ -0,0 +1,2 @@\n+a\n+a\ndiff --git a/dbms/tests/queries/0_stateless/01035_enum_conversion_native_format.sh b/dbms/tests/queries/0_stateless/01035_enum_conversion_native_format.sh\nnew file mode 100755\nindex 000000000000..47233914351c\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/01035_enum_conversion_native_format.sh\n@@ -0,0 +1,22 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+. $CURDIR/../shell_config.sh\n+\n+set -e\n+\n+${CLICKHOUSE_CLIENT} --query=\"drop table if exists enum_source;\"\n+${CLICKHOUSE_CLIENT} --query=\"drop table if exists enum_buf;\"\n+\n+${CLICKHOUSE_CLIENT} --query=\"create table enum_source(e Enum8('a'=1)) engine = MergeTree order by tuple()\"\n+${CLICKHOUSE_CLIENT} --query=\"insert into enum_source values ('a')\"\n+${CLICKHOUSE_CLIENT} --query=\"create table enum_buf engine = Log as select * from enum_source;\"\n+${CLICKHOUSE_CLIENT} --query=\"alter table enum_source modify column e Enum8('a'=1, 'b'=2);\"\n+\n+${CLICKHOUSE_CLIENT} --query=\"select * from enum_buf format Native\" \\\n+    | ${CLICKHOUSE_CLIENT} --query=\"insert into enum_source format Native\"\n+\n+${CLICKHOUSE_CLIENT} --query=\"select * from enum_source;\"\n+\n+${CLICKHOUSE_CLIENT} --query=\"drop table enum_source;\"\n+${CLICKHOUSE_CLIENT} --query=\"drop table enum_buf;\"\n",
  "problem_statement": "Cannot convert Enum while insert in native format after ALTER.\n**Describe the bug or unexpected behaviour**\r\nIf we have some data with enum column in native format and then we perfom alter on this column in table, we aren't able to insert this data to table. BTW, it works at versions lower than 19.15.\r\n\r\n**How to reproduce**\r\n```\r\nap11-nix :) CREATE TABLE enum_bug(e Enum('a'=0)) ENGINE = MergeTree ORDER BY tuple()\r\nap11-nix :) INSERT INTO enum_bug VALUES ('a')\r\n\r\nap11@ap11-nix:~$ clickhouse client -q \"SELECT * FROM enum_bug FORMAT Native\" > sample.bin \r\nap11@ap11-nix:~$ clickhouse client -q \"ALTER TABLE enum_bug MODIFY COLUMN e Enum8('a'=0, 'b'=1)\"\r\nap11@ap11-nix:~$ clickhouse client -q \"INSERT INTO enum_bug FORMAT Native\" < sample.bin  --stacktrace\r\nCode: 53. DB::Exception: Cannot convert: Enum8('a' = 0) to Enum8('a' = 0, 'b' = 1)\r\n\r\nStack trace:\r\n0. 0x35398d7 StackTrace::StackTrace() /home/ap11/ClickHouse/build_clang/../dbms/src/Common/StackTrace.cpp:228\r\n1. 0x688615e DB::recursiveLowCardinalityConversion(COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&, std::__1::shared_ptr<DB::IDataType const> const&, std::__1::shared_ptr<DB::IDataType const> const&) /home/ap11/ClickHouse/build_clang/../dbms/src/Common/Exception.h:0\r\n2. 0x680b2c3 DB::NativeBlockInputStream::readImpl() /home/ap11/ClickHouse/build_clang/../contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:115\r\n3. 0x6805315 DB::IBlockInputStream::read() /home/ap11/ClickHouse/build_clang/../dbms/src/DataStreams/IBlockInputStream.cpp:0\r\n4. 0x6803d2f DB::AsynchronousBlockInputStream::calculate() /home/ap11/ClickHouse/build_clang/../dbms/src/Core/Block.h:28\r\n5. 0x6804154 std::__1::__function::__func<DB::AsynchronousBlockInputStream::next()::$_0, std::__1::allocator<DB::AsynchronousBlockInputStream::next()::$_0>, void ()>::operator()() /home/ap11/ClickHouse/build_clang/../contrib/libcxx/include/atomic:1036\r\n6. 0x3575902 ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::__1::__list_iterator<ThreadFromGlobalPool, void*>) /home/ap11/ClickHouse/build_clang/../contrib/libcxx/include/atomic:1036\r\n7. 0x3577748 std::__1::__function::__func<ThreadFromGlobalPool::ThreadFromGlobalPool<void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()>(void&&)::'lambda'(), std::__1::allocator<ThreadFromGlobalPool::ThreadFromGlobalPool<void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()>(void&&)::'lambda'()>, void ()>::operator()() /home/ap11/ClickHouse/build_clang/../dbms/src/Common/ThreadPool.cpp:0\r\n8. 0x35741f1 ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) /home/ap11/ClickHouse/build_clang/../contrib/libcxx/include/atomic:1036\r\n9. 0x35764e0 void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()> >(void*) /home/ap11/ClickHouse/build_clang/../contrib/libcxx/include/memory:2648\r\n10. 0x7f23104516db start_thread /lib/x86_64-linux-gnu/libpthread-2.27.so\r\n11. 0x7f230fd6e88f __clone /build/glibc-OTsEL5/glibc-2.27/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n```\n",
  "hints_text": "",
  "created_at": "2019-11-25T14:13:15Z",
  "modified_files": [
    "dbms/src/DataStreams/NativeBlockInputStream.cpp",
    "dbms/src/DataTypes/DataTypeLowCardinality.h",
    "dbms/src/DataTypes/DataTypeLowCardinalityHelpers.cpp"
  ],
  "modified_test_files": [
    "b/dbms/tests/queries/0_stateless/01035_enum_conversion_native_format.reference",
    "b/dbms/tests/queries/0_stateless/01035_enum_conversion_native_format.sh"
  ]
}