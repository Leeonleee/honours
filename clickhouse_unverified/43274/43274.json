{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 43274,
  "instance_id": "ClickHouse__ClickHouse-43274",
  "issue_numbers": [
    "43160"
  ],
  "base_commit": "d1c258cf20c7c72ea8d91b22fc7e06435f7698b1",
  "patch": "diff --git a/src/Functions/array/arrayFirstLast.cpp b/src/Functions/array/arrayFirstLast.cpp\nindex 8160234a6b0a..fa72ecba1610 100644\n--- a/src/Functions/array/arrayFirstLast.cpp\n+++ b/src/Functions/array/arrayFirstLast.cpp\n@@ -43,6 +43,16 @@ struct ArrayFirstLastImpl\n         return array_element;\n     }\n \n+    static ColumnPtr createNullableColumn(MutableColumnPtr && column, ColumnUInt8::MutablePtr && null_map)\n+    {\n+        if (auto * nullable_column = typeid_cast<ColumnNullable *>(column.get()))\n+        {\n+            nullable_column->applyNullMap(*null_map);\n+            return std::move(column);\n+        }\n+        return ColumnNullable::create(std::move(column), std::move(null_map));\n+    }\n+\n     static ColumnPtr execute(const ColumnArray & array, ColumnPtr mapped)\n     {\n         const auto * column_filter = typeid_cast<const ColumnUInt8 *>(&*mapped);\n@@ -94,7 +104,7 @@ struct ArrayFirstLastImpl\n                 }\n \n                 if constexpr (element_not_exists_strategy == ArrayFirstLastElementNotExistsStrategy::Null)\n-                    return ColumnNullable::create(std::move(out), std::move(col_null_map_to));\n+                    return createNullableColumn(std::move(out), std::move(col_null_map_to));\n \n                 return out;\n             }\n@@ -106,7 +116,7 @@ struct ArrayFirstLastImpl\n                 if constexpr (element_not_exists_strategy == ArrayFirstLastElementNotExistsStrategy::Null)\n                 {\n                     auto col_null_map_to = ColumnUInt8::create(out->size(), true);\n-                    return ColumnNullable::create(std::move(out), std::move(col_null_map_to));\n+                    return createNullableColumn(std::move(out), std::move(col_null_map_to));\n                 }\n \n                 return out;\n@@ -172,7 +182,7 @@ struct ArrayFirstLastImpl\n         }\n \n         if constexpr (element_not_exists_strategy == ArrayFirstLastElementNotExistsStrategy::Null)\n-            return ColumnNullable::create(std::move(out), std::move(col_null_map_to));\n+            return createNullableColumn(std::move(out), std::move(col_null_map_to));\n \n         return out;\n     }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02241_array_first_last_or_null.reference b/tests/queries/0_stateless/02241_array_first_last_or_null.reference\nindex 2906b04ecd02..fc4a5ff8af5e 100644\n--- a/tests/queries/0_stateless/02241_array_first_last_or_null.reference\n+++ b/tests/queries/0_stateless/02241_array_first_last_or_null.reference\n@@ -7,6 +7,9 @@ ArrayFirst non constant predicate\n \\N\n 2\n 2\n+ArrayFirst with Null\n+2\n+\\N\n ArrayLast constant predicate\n \\N\n \\N\n@@ -16,3 +19,6 @@ ArrayLast non constant predicate\n \\N\n 3\n 3\n+ArrayLast with Null\n+2\n+\\N\ndiff --git a/tests/queries/0_stateless/02241_array_first_last_or_null.sql b/tests/queries/0_stateless/02241_array_first_last_or_null.sql\nindex 3230e4d483a9..aa8f0cdbf928 100644\n--- a/tests/queries/0_stateless/02241_array_first_last_or_null.sql\n+++ b/tests/queries/0_stateless/02241_array_first_last_or_null.sql\n@@ -9,6 +9,10 @@ SELECT arrayFirstOrNull(x -> x >= 2, emptyArrayUInt8());\n SELECT arrayFirstOrNull(x -> x >= 2, [1, 2, 3]);\n SELECT arrayFirstOrNull(x -> x >= 2, materialize([1, 2, 3]));\n \n+SELECT 'ArrayFirst with Null';\n+SELECT arrayFirstOrNull((x,f) -> f, [1,2,3,NULL], [0,1,0,0]);\n+SELECT arrayFirstOrNull((x,f) -> f, [1,2,3,NULL], [0,0,0,1]);\n+\n SELECT 'ArrayLast constant predicate';\n SELECT arrayLastOrNull(x -> 1, emptyArrayUInt8());\n SELECT arrayLastOrNull(x -> 0, emptyArrayUInt8());\n@@ -19,3 +23,7 @@ SELECT 'ArrayLast non constant predicate';\n SELECT arrayLastOrNull(x -> x >= 2, emptyArrayUInt8());\n SELECT arrayLastOrNull(x -> x >= 2, [1, 2, 3]);\n SELECT arrayLastOrNull(x -> x >= 2, materialize([1, 2, 3]));\n+\n+SELECT 'ArrayLast with Null';\n+SELECT arrayLastOrNull((x,f) -> f, [1,2,3,NULL], [0,1,0,0]);\n+SELECT arrayLastOrNull((x,f) -> f, [1,2,3,NULL], [0,1,0,1]);\n\\ No newline at end of file\n",
  "problem_statement": "Inconsistent behaviour of arrayFirst* and arrayLast* with Nullable columns\nTested with latest version on play.clickhouse.com (22.10.1.1875)\r\n\r\n```sql\r\nSELECT arrayFirst((x,f) -> f, [1,2,3,NULL], [0,1,0,0]) as test\r\n```\r\nreturns 2 as expected.\r\n\r\nBut:\r\n```sql\r\nSELECT arrayFirstOrNull((x,f) -> f, [1,2,3,NULL], [0,1,0,0]) as test\r\n\r\nCode: 44. DB::Exception: Nullable(UInt8) cannot be inside Nullable column. (ILLEGAL_COLUMN) (version 22.10.1.1875 (official build))\r\n```\r\ntries to wrap another Nullable layer. It seems to be inconsistent in some way if we should use this function on various columns programatically.\r\n\r\nAnd, BTW, it would be great if we could use Nullable columns in filter column of higher-order functions. Why is this forbidden now?\r\n```sql\r\nSELECT arrayFirst((x,f) -> f, [1,2,3,4], [0,1,0,NULL]) as test\r\n\r\nCode: 44. DB::Exception: Unexpected type of filter column. (ILLEGAL_COLUMN) (version 22.10.1.1875 (official build))\r\n```\n",
  "hints_text": "",
  "created_at": "2022-11-16T05:13:10Z"
}