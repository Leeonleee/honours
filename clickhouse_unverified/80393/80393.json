{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 80393,
  "instance_id": "ClickHouse__ClickHouse-80393",
  "issue_numbers": [
    "70258"
  ],
  "base_commit": "e06542d23d77ca297014b40c7fd0f406f15fef81",
  "patch": "diff --git a/src/Disks/ObjectStorages/MetadataStorageFromPlainObjectStorageOperations.cpp b/src/Disks/ObjectStorages/MetadataStorageFromPlainObjectStorageOperations.cpp\nindex a4eab7fc5000..cbc56716d82c 100644\n--- a/src/Disks/ObjectStorages/MetadataStorageFromPlainObjectStorageOperations.cpp\n+++ b/src/Disks/ObjectStorages/MetadataStorageFromPlainObjectStorageOperations.cpp\n@@ -152,7 +152,7 @@ std::unique_ptr<WriteBufferFromFileBase> MetadataStorageFromPlainObjectStorageMo\n \n         auto read_buf = object_storage->readObject(metadata_object, read_settings);\n         readStringUntilEOF(data, *read_buf);\n-        if (data != path_from)\n+        if (data != expected_path)\n             throw Exception(\n                 ErrorCodes::INCORRECT_DATA,\n                 \"Incorrect data for object key {}, expected {}, got {}\",\n@@ -183,18 +183,30 @@ void MetadataStorageFromPlainObjectStorageMoveDirectoryOperation::execute(std::u\n     constexpr bool validate_content = false;\n #endif\n \n-    auto write_buf = createWriteBuf(path_from, path_to, validate_content);\n-    writeString(path_to.string(), *write_buf);\n-\n-    fiu_do_on(FailPoints::plain_object_storage_write_fail_on_directory_move,\n+    std::unordered_set<std::string> subdirs = {\"\"};\n+    path_map.iterateSubdirectories(path_from.parent_path().string() + \"/\", [&](const auto & elem){ subdirs.emplace(elem); });\n+    for (const auto & subdir : subdirs)\n     {\n-        throw Exception(ErrorCodes::FAULT_INJECTED, \"Injecting fault when moving from '{}' to '{}'\", path_from, path_to);\n-    });\n+        auto sub_path_to = path_to / subdir;\n+        auto sub_path_from = path_from / subdir;\n \n-    write_buf->finalize();\n+        auto write_buf = createWriteBuf(sub_path_from, sub_path_to, validate_content);\n+        writeString(sub_path_to.string(), *write_buf);\n+\n+        fiu_do_on(FailPoints::plain_object_storage_write_fail_on_directory_move,\n+        {\n+            throw Exception(ErrorCodes::FAULT_INJECTED, \"Injecting fault when moving from '{}' to '{}'\", sub_path_from, sub_path_to);\n+        });\n+\n+        write_buf->finalize();\n+\n+        /// parent_path() removes the trailing '/'.\n+        path_map.moveDirectory(sub_path_from.parent_path(), sub_path_to.parent_path());\n+\n+        LOG_TEST(\n+            getLogger(\"MetadataStorageFromPlainObjectStorageMoveDirectoryOperation\"), \"Moved directory '{}' to '{}'\", sub_path_from, sub_path_to);\n+    }\n \n-    /// parent_path() removes the trailing '/'.\n-    path_map.moveDirectory(path_from.parent_path(), path_to.parent_path());\n     write_finalized = true;\n }\n \n",
  "test_patch": "diff --git a/tests/integration/test_s3_plain_rewritable/test.py b/tests/integration/test_s3_plain_rewritable/test.py\nindex c23241b7f798..f02f20d954ff 100644\n--- a/tests/integration/test_s3_plain_rewritable/test.py\n+++ b/tests/integration/test_s3_plain_rewritable/test.py\n@@ -179,3 +179,38 @@ def restart(node):\n     )\n \n     assert len(list(it)) == 0\n+\n+\n+@pytest.mark.parametrize(\n+    \"storage_policy\",\n+    [\n+        pytest.param(\"s3_plain_rewritable\"),\n+        pytest.param(\"cache_s3_plain_rewritable\"),\n+        pytest.param(\"s3_plain_rewritable_with_metadata_cache\"),\n+    ],\n+)\n+def test_projections(storage_policy):\n+    node = cluster.instances[\"node1\"]\n+    table_name = \"prj_test\"\n+    node.query(f\"DROP TABLE IF EXISTS {table_name} SYNC\")\n+    node.query(\n+        f\"\"\"\n+            CREATE TABLE {table_name} (\n+                x UInt32,\n+                y UInt32,\n+                PROJECTION prj_y (SELECT x, y ORDER BY y)\n+            )\n+            ENGINE = MergeTree\n+            PRIMARY KEY x\n+            SETTINGS storage_policy = '{storage_policy}';\n+        \"\"\"\n+    )\n+    node.query(\n+        f\"\"\"\n+            INSERT INTO {table_name} SELECT number, number FROM system.numbers limit 100000;\n+        \"\"\"\n+    )\n+    assert int(node.query(f\"SELECT count(*) FROM {table_name} WHERE x=100\")) == 1\n+    assert int(node.query(f\"SELECT count(*) FROM {table_name} WHERE y=100\")) == 1\n+\n+    node.query(f\"DROP TABLE {table_name} SYNC\")\n",
  "problem_statement": "Projection x plain_rewritable not working together\n> Please make sure that the version you're using is still supported (you can find the list [here](https://github.com/ClickHouse/ClickHouse/blob/master/SECURITY.md#scope-and-supported-versions)).\r\n\r\n> You have to provide the following information whenever possible.\r\n\r\n**Company or project name**\r\n\r\nAgnostic\r\n\r\n**Describe what's wrong**\r\n\r\nError when querying a table with projections and plain_rewritable disk.\r\nThe issue happens with clickhouse local version 24.10.1.329.\r\n\r\n**Enable crash reporting**\r\n\r\n> Change \"enabled\" to true in \"send_crash_reports\" section in `config.xml`:\r\n```\r\n<send_crash_reports>\r\n        <!-- Changing <enabled> to true allows sending crash reports to -->\r\n        <!-- the ClickHouse core developers team via Sentry https://sentry.io -->\r\n        <enabled>false</enabled>\r\n```\r\n\r\n**How to reproduce**\r\n\r\nThe following error happens with clickhouse local version 24.10.1.329.\r\nHere is how to reproduce it:\r\n\r\n```sql\r\ncreate table test_proj_001 (\r\n    timestamp DateTime64(3, 'UTC'),\r\n    number UInt64,\r\n    blob String,\r\n\r\n    INDEX timestamp timestamp TYPE minmax GRANULARITY 1,\r\n\r\n    PROJECTION min_max_number (\r\n        SELECT\r\n            min(number), \r\n            max(number)\r\n    )\r\n)\r\nENGINE = MergeTree\r\nPARTITION BY toYYYYMM(timestamp)\r\nORDER BY (timestamp)\r\nSETTINGS disk = disk(\r\n    type=s3,\r\n    endpoint='**********************',\r\n    use_environment_credentials=1,\r\n    metadata_type=plain_rewritable\r\n);\r\n\r\ninsert into test_proj_001 values (now(), 1, 'abc'), (now()-interval 1 day, 2, 'def')\r\n```\r\n\r\nThen some query work ok:\r\n\r\n```\r\n:) select count(*) from test_proj_001\r\n\r\nSELECT count(*)\r\nFROM test_proj_001\r\n\r\nQuery id: c719a2ba-fd78-4ebb-aa35-f28a1092aa0a\r\n\r\n   \u250c\u2500count()\u2500\u2510\r\n1. \u2502       2 \u2502\r\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.003 sec.\r\n```\r\n\r\nOr:\r\n\r\n```\r\n:) select * from test_proj_001\r\n\r\nSELECT *\r\nFROM test_proj_001\r\n\r\nQuery id: 71acc183-1ed3-4555-895e-e2750f8ddc1c\r\n\r\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500timestamp\u2500\u252c\u2500number\u2500\u252c\u2500blob\u2500\u2510\r\n1. \u2502 2024-10-01 08:48:41.000 \u2502      2 \u2502 def  \u2502\r\n2. \u2502 2024-10-02 08:48:41.000 \u2502      1 \u2502 abc  \u2502\r\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n2 rows in set. Elapsed: 0.084 sec\r\n```\r\n\r\nBut query that could make use of the projection fail:\r\n\r\n```\r\n:) select max(number) from test_proj_001\r\n\r\nSELECT max(number)\r\nFROM test_proj_001\r\n\r\nQuery id: 8ce40cea-8763-4f42-9858-634cf3890a50\r\n\r\n\r\nElapsed: 0.085 sec.\r\n\r\nReceived exception:\r\nCode: 246. DB::Exception: Empty marks file 'test_proj_001/data/default/test_proj_001/202410_1_1_0/min_max_number.proj/data.cmrk3': 0, must be: 80: (while reading from part test_proj_001/data/default/test_proj_001/202410_1_1_0/min_max_number.proj/ in table default.test_proj_001 located on disk __tmp_internal_132222126954221991566785453547750829663 of type s3, from mark 0 with max_rows_to_read = 1): While executing MergeTreeSelect(pool: PrefetchedReadPool, algorithm: Thread). (CORRUPTED_DATA)\r\n```\r\n\r\n**Expected behavior**\r\n\r\nI expect the query to run without error, and to make use of the projection.\r\nBTW, I listed all files on the object store and see nothing that looks like a projection part.\r\n\r\n**Error message and/or stacktrace**\r\n\r\n```\r\nCode: 246. DB::Exception: Empty marks file 'test_proj_001/data/default/test_proj_001/202410_1_1_0/min_max_number.proj/data.cmrk3': 0, must be: 80: (while reading from part test_proj_001/data/default/test_proj_001/202410_1_1_0/min_max_number.proj/ in table default.test_proj_001 located on disk __tmp_internal_132222126954221991566785453547750829663 of type s3, from mark 0 with max_rows_to_read = 1): While executing MergeTreeSelect(pool: PrefetchedReadPool, algorithm: Thread). (CORRUPTED_DATA)\r\n```\r\n\r\n**Additional context**\r\n\r\n> Add any other context about the problem here.\r\n\n",
  "hints_text": "I reproduced the above test with later ClickHouse versions\n\n### ClickHouse local version 24.12.1.1614 (official build).\n\n```\nselect max(number) from test_proj_001\n\nSELECT max(number)\nFROM test_proj_001\n\nQuery id: 857b1adc-ccbf-4894-81b2-c1720ba39184\n\n\u2199 Progress: 0.00 rows, 0.00 B (0.00 rows/s., 0.00 B/s.)\nElapsed: 0.123 sec. to toggle the display of the progress table.\n\nReceived exception:\nCode: 107. DB::Exception: File store/794/79423d85-acb4-48cc-ad52-92d0e3e9f976/202502_1_1_0/min_max_number.proj/data.cmrk3 does not exist on PlainRewritableS3ObjectStorage: (while reading from part 01/store/794/79423d85-acb4-48cc-ad52-92d0e3e9f976/202502_1_1_0/min_max_number.proj/ in table default.test_proj_001 (79423d85-acb4-48cc-ad52-92d0e3e9f976) located on disk __tmp_internal_334773407594230310398318836147193463296 of type s3, from mark 0 with max_rows_to_read = 1): While executing MergeTreeSelect(pool: PrefetchedReadPool, algorithm: Thread). (FILE_DOESNT_EXIST)\n```\n\n### ClickHouse local version 25.2.1.792 (official build).\n\n```\nselect max(number) from test_proj_001\n\nSELECT max(number)\nFROM test_proj_001\n\nQuery id: 56bf4640-e251-4f86-816b-3ba4c915bcc5\n\n\nElapsed: 0.096 sec.\n\nReceived exception:\nCode: 107. DB::Exception: File store/f39/f39bae42-50d8-4afb-8221-6393539c0eef/202502_1_1_0/min_max_number.proj/data.cmrk3 does not exist on PlainRewritableS3ObjectStorage: (while reading from part 02/store/f39/f39bae42-50d8-4afb-8221-6393539c0eef/202502_1_1_0/min_max_number.proj/ in table default.test_proj_001 (f39bae42-50d8-4afb-8221-6393539c0eef) located on disk __tmp_internal_260212275600533508954965308351398945800 of type s3, from mark 0 with max_rows_to_read = 1): While executing MergeTreeSelect(pool: PrefetchedReadPool, algorithm: Thread). (FILE_DOESNT_EXIST)\n```\nIs this a known limitation or just a bug with `plain_rewritable` ?\nOk, that mught be of interest.\nAfter I created the table and executed the first insert query, there is actually 2 parts at the endpoint top level:\n\n```sh\n /bin/objstr ls s3://agnostic-test01/03\ns3://agnostic-test01/03/__meta/lugmvrotsjxruybkhaoutxuermoujdut/prefix.path 47 B 2025-02-03 11:11:49.155 +0000 UTC \"5c2369900c5ebf66f35a0a1be087de48\"\ns3://agnostic-test01/03/__meta/mqgczzvqnfegoacowfesourfslwgxsvq/prefix.path 56 B 2025-02-03 11:11:49.424 +0000 UTC \"5e394d357838063a400b2e701e93eaed\"\ns3://agnostic-test01/03/__meta/ruipanuhzolbszcxafszlxknartydfxy/prefix.path 60 B 2025-02-03 11:16:13.058 +0000 UTC \"765639c488735be17abf130e1860e9d9\"\ns3://agnostic-test01/03/__meta/tlwvtbqlavmgxgnrfoexhtbmwssinybg/prefix.path 91 B 2025-02-03 11:16:12.422 +0000 UTC \"256167cd5abceec6b6f1613a29e78f01\"\ns3://agnostic-test01/03/lugmvrotsjxruybkhaoutxuermoujdut/format_version.txt 1 B 2025-02-03 11:11:49.83 +0000 UTC \"c4ca4238a0b923820dcc509a6f75849b\"\ns3://agnostic-test01/03/ruipanuhzolbszcxafszlxknartydfxy/checksums.txt 451 B 2025-02-03 11:16:12.741 +0000 UTC \"4dcce81763957c4e5ff88e5f58138eb5\"\ns3://agnostic-test01/03/ruipanuhzolbszcxafszlxknartydfxy/columns.txt 100 B 2025-02-03 11:16:12.733 +0000 UTC \"dac1d18e4c1a1efd1ede4657f250d98f\"\ns3://agnostic-test01/03/ruipanuhzolbszcxafszlxknartydfxy/count.txt 1 B 2025-02-03 11:16:12.717 +0000 UTC \"c81e728d9d4c2f636f067f89cc14862c\"\ns3://agnostic-test01/03/ruipanuhzolbszcxafszlxknartydfxy/data.bin 116 B 2025-02-03 11:16:12.708 +0000 UTC \"94848fee1be129bb7f6e7e0bee2416bd\"\ns3://agnostic-test01/03/ruipanuhzolbszcxafszlxknartydfxy/data.cmrk3 62 B 2025-02-03 11:16:12.723 +0000 UTC \"1785ba2e1dc67f930aec13235537db5e\"\ns3://agnostic-test01/03/ruipanuhzolbszcxafszlxknartydfxy/default_compression_codec.txt 10 B 2025-02-03 11:16:12.708 +0000 UTC \"c0904274faa8f3f06f35666cc9c5bd2f\"\ns3://agnostic-test01/03/ruipanuhzolbszcxafszlxknartydfxy/metadata_version.txt 1 B 2025-02-03 11:16:12.747 +0000 UTC \"cfcd208495d565ef66e7dff9f98764da\"\ns3://agnostic-test01/03/ruipanuhzolbszcxafszlxknartydfxy/minmax_timestamp.idx 16 B 2025-02-03 11:16:12.715 +0000 UTC \"c44e448eaa894ed735fdbfd6945aedb8\"\ns3://agnostic-test01/03/ruipanuhzolbszcxafszlxknartydfxy/partition.dat 4 B 2025-02-03 11:16:12.737 +0000 UTC \"fb173b9635978be517bdc4482041f53d\"\ns3://agnostic-test01/03/ruipanuhzolbszcxafszlxknartydfxy/primary.cidx 50 B 2025-02-03 11:16:12.761 +0000 UTC \"0fcdf663bc5aaa1c731a66f008bba3e5\"\ns3://agnostic-test01/03/ruipanuhzolbszcxafszlxknartydfxy/serialization.json 221 B 2025-02-03 11:16:12.726 +0000 UTC \"2967e348d64a0922d57eccba84b2f3bd\"\ns3://agnostic-test01/03/ruipanuhzolbszcxafszlxknartydfxy/skp_idx_timestamp.cmrk3 50 B 2025-02-03 11:16:12.716 +0000 UTC \"5f4878cf436953f5a4e47f167680f17f\"\ns3://agnostic-test01/03/ruipanuhzolbszcxafszlxknartydfxy/skp_idx_timestamp.idx2 43 B 2025-02-03 11:16:12.739 +0000 UTC \"6364e2f77291af2b3b17d658eaa68800\"\ns3://agnostic-test01/03/tlwvtbqlavmgxgnrfoexhtbmwssinybg/checksums.txt 173 B 2025-02-03 11:16:12.718 +0000 UTC \"e88dbd7143e5ed46a2d43c41e48dceef\"\ns3://agnostic-test01/03/tlwvtbqlavmgxgnrfoexhtbmwssinybg/columns.txt 127 B 2025-02-03 11:16:12.729 +0000 UTC \"2d9f2664ff408830b081f8233b0e8c07\"\ns3://agnostic-test01/03/tlwvtbqlavmgxgnrfoexhtbmwssinybg/count.txt 1 B 2025-02-03 11:16:12.712 +0000 UTC \"c4ca4238a0b923820dcc509a6f75849b\"\ns3://agnostic-test01/03/tlwvtbqlavmgxgnrfoexhtbmwssinybg/data.bin 70 B 2025-02-03 11:16:12.649 +0000 UTC \"2b4d148d32f812f85b2ddf2c3689de11\"\ns3://agnostic-test01/03/tlwvtbqlavmgxgnrfoexhtbmwssinybg/data.cmrk3 58 B 2025-02-03 11:16:12.719 +0000 UTC \"8018f19b81907e78022039ca414340fa\"\ns3://agnostic-test01/03/tlwvtbqlavmgxgnrfoexhtbmwssinybg/default_compression_codec.txt 10 B 2025-02-03 11:16:12.733 +0000 UTC \"c0904274faa8f3f06f35666cc9c5bd2f\"\ns3://agnostic-test01/03/tlwvtbqlavmgxgnrfoexhtbmwssinybg/metadata_version.txt 1 B 2025-02-03 11:16:12.79 +0000 UTC \"cfcd208495d565ef66e7dff9f98764da\"\n```\n\n```sh\n./bin/objstr read s3://agnostic-test01/03/__meta/ruipanuhzolbszcxafszlxknartydfxy/prefix.path\nstore/beb/beba0e9c-3b70-4e25-9f48-fae81f5e351b/202502_1_1_0/\n```\n\n```sh./bin/objstr read s3://agnostic-test01/03/ruipanuhzolbszcxafszlxknartydfxy/columns.txt\ncolumns format version: 1\n3 columns:\n`timestamp` DateTime64(3, 'UTC')\n`number` UInt64\n`blob` String\n```\n\n```sh\n./bin/objstr read s3://agnostic-test01/03/__meta/tlwvtbqlavmgxgnrfoexhtbmwssinybg/prefix.path\nstore/beb/beba0e9c-3b70-4e25-9f48-fae81f5e351b/tmp_insert_202502_1_1_0/min_max_number.proj/\n```\n\n```sh\n./bin/objstr read s3://agnostic-test01/03/tlwvtbqlavmgxgnrfoexhtbmwssinybg/columns.txt\ncolumns format version: 1\n2 columns:\n`min(number)` AggregateFunction(min, UInt64)\n`max(number)` AggregateFunction(max, UInt64)\n```\n\nBut \n\n```sql\n:) select max(number) from test_proj_001\n\nSELECT max(number)\nFROM test_proj_001\n\nQuery id: 003fd6f0-3cca-47aa-af55-1ca47a2ecd5a\n\n\u2190 Progress: 0.00 rows, 0.00 B (0.00 rows/s., 0.00 B/s.)                                                                                                                           (0.0 CPU, 9.80 KB RAM)\nElapsed: 0.105 sec. to toggle the display of the progress table.\n\nReceived exception:\nCode: 107. DB::Exception: File store/beb/beba0e9c-3b70-4e25-9f48-fae81f5e351b/202502_1_1_0/min_max_number.proj/data.cmrk3 does not exist on PlainRewritableS3ObjectStorage: (while reading from part 03/store/beb/beba0e9c-3b70-4e25-9f48-fae81f5e351b/202502_1_1_0/min_max_number.proj/ in table default.test_proj_001 (beba0e9c-3b70-4e25-9f48-fae81f5e351b) located on disk __tmp_internal_245801940124570701938643290222498699736 of type s3, from mark 0 with max_rows_to_read = 1): While executing MergeTreeSelect(pool: PrefetchedReadPool, algorithm: Thread). (FILE_DOESNT_EXIST)\n```\n\n\nSo it seems that the projection part is actually created, but not at the right path.\n@jkartseva you might be interested",
  "created_at": "2025-05-17T17:35:45Z"
}