{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 73929,
  "instance_id": "ClickHouse__ClickHouse-73929",
  "issue_numbers": [
    "59502"
  ],
  "base_commit": "62204386732f15a8e22dec591f05a2062c6c6b68",
  "patch": "diff --git a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp\nindex 64bfbf90ada3..b64e0dfbd692 100644\n--- a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp\n@@ -31,6 +31,13 @@ PrettyBlockOutputFormat::PrettyBlockOutputFormat(\n     }\n }\n \n+bool PrettyBlockOutputFormat::cutInTheMiddle(size_t row_num, size_t num_rows, size_t max_rows)\n+{\n+    return num_rows > max_rows\n+        && !(row_num < (max_rows + 1) / 2\n+            || row_num >= num_rows - max_rows / 2);\n+}\n+\n \n /// Evaluate the visible width of the values and column names.\n /// Note that number of code points is just a rough approximation of visible string width.\n@@ -38,7 +45,8 @@ void PrettyBlockOutputFormat::calculateWidths(\n     const Block & header, const Chunk & chunk,\n     WidthsPerColumn & widths, Widths & max_padded_widths, Widths & name_widths, Strings & names)\n {\n-    size_t num_rows = std::min(chunk.getNumRows(), format_settings.pretty.max_rows);\n+    size_t num_rows = chunk.getNumRows();\n+    size_t num_displayed_rows = std::min<size_t>(num_rows, format_settings.pretty.max_rows);\n \n     /// len(num_rows + total_rows) + len(\". \")\n     row_number_width = static_cast<size_t>(std::floor(std::log10(num_rows + total_rows))) + 3;\n@@ -59,10 +67,14 @@ void PrettyBlockOutputFormat::calculateWidths(\n         const auto & elem = header.getByPosition(i);\n         const auto & column = columns[i];\n \n-        widths[i].resize(num_rows);\n+        widths[i].resize(num_displayed_rows);\n \n+        size_t displayed_row = 0;\n         for (size_t j = 0; j < num_rows; ++j)\n         {\n+            if (cutInTheMiddle(j, num_rows, format_settings.pretty.max_rows))\n+                continue;\n+\n             {\n                 WriteBufferFromString out_serialize(serialized_value);\n                 auto serialization = elem.type->getDefaultSerialization();\n@@ -80,10 +92,12 @@ void PrettyBlockOutputFormat::calculateWidths(\n                     serialized_value.resize(max_byte_size);\n             }\n \n-            widths[i][j] = UTF8::computeWidth(reinterpret_cast<const UInt8 *>(serialized_value.data()), serialized_value.size(), prefix);\n+            widths[i][displayed_row] = UTF8::computeWidth(reinterpret_cast<const UInt8 *>(serialized_value.data()), serialized_value.size(), prefix);\n             max_padded_widths[i] = std::max<UInt64>(\n                 max_padded_widths[i],\n-                std::min<UInt64>({format_settings.pretty.max_column_pad_width, format_settings.pretty.max_value_width, widths[i][j]}));\n+                std::min<UInt64>({format_settings.pretty.max_column_pad_width, format_settings.pretty.max_value_width, widths[i][displayed_row]}));\n+\n+            ++displayed_row;\n         }\n \n         /// Also, calculate the widths for the names of columns.\n@@ -132,11 +146,13 @@ struct GridSymbols\n     const char * bold_left_bottom_corner = \"\u2517\";\n     const char * bold_right_bottom_corner = \"\u251b\";\n     const char * bold_bottom_separator = \"\u253b\";\n+    const char * vertical_cut = \"\u2500\";\n };\n \n GridSymbols utf8_grid_symbols;\n \n-GridSymbols ascii_grid_symbols {\n+GridSymbols ascii_grid_symbols\n+{\n     \"+\",\n     \"+\",\n     \"+\",\n@@ -152,7 +168,8 @@ GridSymbols ascii_grid_symbols {\n     \"-\",\n     \"-\",\n     \"|\",\n-    \"|\"\n+    \"|\",\n+    \"-\",\n };\n \n }\n@@ -316,54 +333,80 @@ void PrettyBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind port_kind\n     }\n     writeString(middle_names_separator_s, out);\n \n-    for (size_t i = 0; i < num_rows && total_rows + i < format_settings.pretty.max_rows; ++i)\n+    bool vertical_filler_written = false;\n+    size_t displayed_row = 0;\n+    for (size_t i = 0; i < num_rows && displayed_rows < format_settings.pretty.max_rows; ++i)\n     {\n-        if (i != 0)\n+        if (cutInTheMiddle(i, num_rows, format_settings.pretty.max_rows))\n         {\n-            if (format_settings.pretty.output_format_pretty_row_numbers)\n+            if (!vertical_filler_written)\n             {\n-                /// Write left blank\n-                writeString(String(row_number_width, ' '), out);\n+                if (format_settings.pretty.output_format_pretty_row_numbers)\n+                    writeString(String(row_number_width, ' '), out);\n+                writeString(middle_values_separator_s, out);\n+\n+                if (format_settings.pretty.output_format_pretty_row_numbers)\n+                    writeString(String(row_number_width, ' '), out);\n+                for (size_t j = 0; j < num_columns; ++j)\n+                {\n+                    writeCString(grid_symbols.vertical_cut, out);\n+                    writeString(String(2 + max_widths[j], ' '), out);\n+                }\n+                writeCString(grid_symbols.vertical_cut, out);\n+\n+                writeCString(\"\\n\", out);\n+                vertical_filler_written = true;\n             }\n-            writeString(middle_values_separator_s, out);\n         }\n-\n-        if (format_settings.pretty.output_format_pretty_row_numbers)\n+        else\n         {\n-            // Write row number;\n-            auto row_num_string = std::to_string(i + 1 + total_rows) + \". \";\n+            if (i != 0)\n+            {\n+                if (format_settings.pretty.output_format_pretty_row_numbers)\n+                {\n+                    /// Write left blank\n+                    writeString(String(row_number_width, ' '), out);\n+                }\n+                writeString(middle_values_separator_s, out);\n+            }\n \n-            for (size_t j = 0; j < row_number_width - row_num_string.size(); ++j)\n-                writeChar(' ', out);\n-            if (color)\n-                writeCString(\"\\033[90m\", out);\n-            writeString(row_num_string, out);\n-            if (color)\n-                writeCString(\"\\033[0m\", out);\n-        }\n+            if (format_settings.pretty.output_format_pretty_row_numbers)\n+            {\n+                // Write row number;\n+                auto row_num_string = std::to_string(i + 1 + total_rows) + \". \";\n \n-        writeCString(grid_symbols.bar, out);\n+                for (size_t j = 0; j < row_number_width - row_num_string.size(); ++j)\n+                    writeChar(' ', out);\n+                if (color)\n+                    writeCString(\"\\033[90m\", out);\n+                writeString(row_num_string, out);\n+                if (color)\n+                    writeCString(\"\\033[0m\", out);\n+            }\n \n-        for (size_t j = 0; j < num_columns; ++j)\n-        {\n-            if (j != 0)\n+            for (size_t j = 0; j < num_columns; ++j)\n+            {\n                 writeCString(grid_symbols.bar, out);\n-            const auto & type = *header.getByPosition(j).type;\n-            writeValueWithPadding(\n-                *columns[j],\n-                *serializations[j],\n-                i,\n-                widths[j].empty() ? max_widths[j] : widths[j][i],\n-                max_widths[j],\n-                cut_to_width,\n-                type.shouldAlignRightInPrettyFormats(),\n-                isNumber(type));\n-        }\n+                const auto & type = *header.getByPosition(j).type;\n+                writeValueWithPadding(\n+                    *columns[j],\n+                    *serializations[j],\n+                    i,\n+                    widths[j].empty() ? max_widths[j] : widths[j][displayed_row],\n+                    max_widths[j],\n+                    cut_to_width,\n+                    type.shouldAlignRightInPrettyFormats(),\n+                    isNumber(type));\n+            }\n \n-        writeCString(grid_symbols.bar, out);\n-        if (readable_number_tip)\n-            writeReadableNumberTipIfSingleValue(out, chunk, format_settings, color);\n-        writeCString(\"\\n\", out);\n+            writeCString(grid_symbols.bar, out);\n+            if (readable_number_tip)\n+                writeReadableNumberTipIfSingleValue(out, chunk, format_settings, color);\n+\n+            writeCString(\"\\n\", out);\n+            ++displayed_row;\n+            ++displayed_rows;\n+        }\n     }\n \n     if (format_settings.pretty.output_format_pretty_row_numbers)\n@@ -500,9 +543,11 @@ void PrettyBlockOutputFormat::writeSuffix()\n \n     if (total_rows >= format_settings.pretty.max_rows)\n     {\n-        writeCString(\"  Showed first \", out);\n-        writeIntText(format_settings.pretty.max_rows, out);\n-        writeCString(\".\\n\", out);\n+        writeCString(\"  Showed \", out);\n+        writeIntText(displayed_rows, out);\n+        writeCString(\" out of \", out);\n+        writeIntText(total_rows, out);\n+        writeCString(\" rows.\\n\", out);\n     }\n }\n \ndiff --git a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h\nindex 41a1959906e7..c8d7e02cb4b3 100644\n--- a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h\n+++ b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h\n@@ -26,6 +26,7 @@ class PrettyBlockOutputFormat : public IOutputFormat\n     void consumeExtremes(Chunk) override;\n \n     size_t total_rows = 0;\n+    size_t displayed_rows = 0;\n     size_t row_number_width = 7; // \"10000. \"\n \n     const FormatSettings format_settings;\n@@ -52,8 +53,11 @@ class PrettyBlockOutputFormat : public IOutputFormat\n     void resetFormatterImpl() override\n     {\n         total_rows = 0;\n+        displayed_rows = 0;\n     }\n \n+    static bool cutInTheMiddle(size_t row_num, size_t num_rows, size_t max_rows);\n+\n     bool color;\n     bool readable_number_tip = false;\n \n@@ -77,8 +81,6 @@ void registerPrettyFormatWithNoEscapesAndMonoBlock(FormatFactory & factory, cons\n                     && (format_settings.pretty.color == 1 || (format_settings.pretty.color == 2 && format_settings.is_writing_to_terminal));\n             return std::make_shared<OutputFormat>(buf, sample, format_settings, mono_block, color);\n         });\n-        if (!mono_block)\n-            factory.markOutputFormatSupportsParallelFormatting(name);\n     };\n     creator(factory, base_name, false, false);\n     creator(factory, base_name + \"NoEscapes\", true, false);\ndiff --git a/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.cpp b/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.cpp\nindex 9ac9afc5c32a..339aa1970a5c 100644\n--- a/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.cpp\n@@ -11,13 +11,6 @@\n namespace DB\n {\n \n-namespace ErrorCodes\n-{\n-\n-\n-}\n-\n-\n namespace\n {\n \n@@ -33,11 +26,13 @@ struct GridSymbols\n     const char * bottom_separator = \"\u2534\";\n     const char * dash = \"\u2500\";\n     const char * bar = \"\u2502\";\n+    const char * vertical_cut = \"\u2500\";\n };\n \n GridSymbols utf8_grid_symbols;\n \n-GridSymbols ascii_grid_symbols {\n+GridSymbols ascii_grid_symbols\n+{\n     \"+\",\n     \"+\",\n     \"+\",\n@@ -45,7 +40,8 @@ GridSymbols ascii_grid_symbols {\n     \"+\",\n     \"+\",\n     \"-\",\n-    \"|\"\n+    \"|\",\n+    \"-\",\n };\n \n }\n@@ -149,6 +145,7 @@ void PrettyCompactBlockOutputFormat::writeBottom(const Widths & max_widths)\n \n void PrettyCompactBlockOutputFormat::writeRow(\n     size_t row_num,\n+    size_t displayed_row,\n     const Block & header,\n     const Chunk & chunk,\n     const WidthsPerColumn & widths,\n@@ -178,15 +175,11 @@ void PrettyCompactBlockOutputFormat::writeRow(\n     if (!format_settings.pretty.max_value_width_apply_for_single_value && chunk.getNumRows() == 1 && num_columns == 1 && total_rows == 0)\n         cut_to_width = 0;\n \n-    writeCString(grid_symbols.bar, out);\n-\n     for (size_t j = 0; j < num_columns; ++j)\n     {\n-        if (j != 0)\n-            writeCString(grid_symbols.bar, out);\n-\n+        writeCString(grid_symbols.bar, out);\n         const auto & type = *header.getByPosition(j).type;\n-        const auto & cur_widths = widths[j].empty() ? max_widths[j] : widths[j][row_num];\n+        const auto & cur_widths = widths[j].empty() ? max_widths[j] : widths[j][displayed_row];\n         writeValueWithPadding(*columns[j], *serializations[j], row_num, cur_widths, max_widths[j], cut_to_width, type.shouldAlignRightInPrettyFormats(), isNumber(type));\n     }\n \n@@ -196,6 +189,25 @@ void PrettyCompactBlockOutputFormat::writeRow(\n     writeCString(\"\\n\", out);\n }\n \n+void PrettyCompactBlockOutputFormat::writeVerticalCut(const Chunk & chunk, const Widths & max_widths)\n+{\n+    const GridSymbols & grid_symbols = format_settings.pretty.charset == FormatSettings::Pretty::Charset::UTF8 ?\n+                                       utf8_grid_symbols :\n+                                       ascii_grid_symbols;\n+\n+    if (format_settings.pretty.output_format_pretty_row_numbers)\n+        writeString(String(row_number_width, ' '), out);\n+\n+    size_t num_columns = chunk.getNumColumns();\n+    for (size_t j = 0; j < num_columns; ++j)\n+    {\n+        writeCString(grid_symbols.vertical_cut, out);\n+        writeString(String(2 + max_widths[j], ' '), out);\n+    }\n+    writeCString(grid_symbols.vertical_cut, out);\n+    writeCString(\"\\n\", out);\n+}\n+\n void PrettyCompactBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind port_kind)\n {\n     UInt64 max_rows = format_settings.pretty.max_rows;\n@@ -211,8 +223,25 @@ void PrettyCompactBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind po\n \n     writeHeader(header, max_widths, name_widths, names, false);\n \n-    for (size_t i = 0; i < num_rows && total_rows + i < max_rows; ++i)\n-        writeRow(i, header, chunk, widths, max_widths);\n+    bool vertical_filler_written = false;\n+    size_t displayed_row = 0;\n+    for (size_t i = 0; i < num_rows && displayed_rows < max_rows; ++i)\n+    {\n+        if (cutInTheMiddle(i, num_rows, format_settings.pretty.max_rows))\n+        {\n+            if (!vertical_filler_written)\n+            {\n+                writeVerticalCut(chunk, max_widths);\n+                vertical_filler_written = true;\n+            }\n+        }\n+        else\n+        {\n+            writeRow(i, displayed_row, header, chunk, widths, max_widths);\n+            ++displayed_row;\n+            ++displayed_rows;\n+        }\n+    }\n \n     if ((num_rows >= format_settings.pretty.output_format_pretty_display_footer_column_names_min_rows) && format_settings.pretty.output_format_pretty_display_footer_column_names)\n     {\ndiff --git a/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.h b/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.h\nindex 9c696facde3d..98406f21c1d9 100644\n--- a/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.h\n+++ b/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.h\n@@ -21,10 +21,12 @@ class PrettyCompactBlockOutputFormat : public PrettyBlockOutputFormat\n     void writeBottom(const Widths & max_widths);\n     void writeRow(\n         size_t row_num,\n+        size_t displayed_row,\n         const Block & header,\n         const Chunk & chunk,\n         const WidthsPerColumn & widths,\n         const Widths & max_widths);\n+    void writeVerticalCut(const Chunk & chunk, const Widths & max_widths);\n \n     void writeChunk(const Chunk & chunk, PortKind port_kind) override;\n };\ndiff --git a/src/Processors/Formats/Impl/PrettySpaceBlockOutputFormat.cpp b/src/Processors/Formats/Impl/PrettySpaceBlockOutputFormat.cpp\nindex 0fbbd1e09290..5b8dc4293204 100644\n--- a/src/Processors/Formats/Impl/PrettySpaceBlockOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/PrettySpaceBlockOutputFormat.cpp\n@@ -79,34 +79,58 @@ void PrettySpaceBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind port\n     };\n     write_names(false);\n \n-    for (size_t row = 0; row < num_rows && total_rows + row < max_rows; ++row)\n+    bool vertical_filler_written = false;\n+    size_t displayed_row = 0;\n+    for (size_t row = 0; row < num_rows && displayed_rows < max_rows; ++row)\n     {\n-        if (format_settings.pretty.output_format_pretty_row_numbers)\n+        if (cutInTheMiddle(row, num_rows, format_settings.pretty.max_rows))\n         {\n-            // Write row number;\n-            auto row_num_string = std::to_string(row + 1 + total_rows) + \". \";\n-            for (size_t i = 0; i < row_number_width - row_num_string.size(); ++i)\n-                writeChar(' ', out);\n-            if (color)\n-                writeCString(\"\\033[90m\", out);\n-            writeString(row_num_string, out);\n-            if (color)\n-                writeCString(\"\\033[0m\", out);\n+            if (!vertical_filler_written)\n+            {\n+                size_t cut_width = 0;\n+                if (format_settings.pretty.output_format_pretty_row_numbers)\n+                    cut_width += row_number_width;\n+                for (size_t j = 0; j < num_columns; ++j)\n+                    cut_width += (j == 0 ? 1 : 3) + max_widths[j];\n \n+                for (size_t ch = 0; ch < cut_width; ++ch)\n+                    writeChar(ch % 2 ? '-' : ' ', out);\n+\n+                writeChar('\\n', out);\n+                vertical_filler_written = true;\n+            }\n         }\n-        for (size_t column = 0; column < num_columns; ++column)\n+        else\n         {\n-            if (column != 0)\n-                writeCString(\" \", out);\n+            if (format_settings.pretty.output_format_pretty_row_numbers)\n+            {\n+                // Write row number;\n+                auto row_num_string = std::to_string(row + 1 + total_rows) + \". \";\n+                for (size_t i = 0; i < row_number_width - row_num_string.size(); ++i)\n+                    writeChar(' ', out);\n+                if (color)\n+                    writeCString(\"\\033[90m\", out);\n+                writeString(row_num_string, out);\n+                if (color)\n+                    writeCString(\"\\033[0m\", out);\n \n-            const auto & type = *header.getByPosition(column).type;\n-            auto & cur_width = widths[column].empty() ? max_widths[column] : widths[column][row];\n-            writeValueWithPadding(\n-                *columns[column], *serializations[column], row, cur_width, max_widths[column], cut_to_width, type.shouldAlignRightInPrettyFormats(), isNumber(type));\n+            }\n+            for (size_t column = 0; column < num_columns; ++column)\n+            {\n+                if (column != 0)\n+                    writeChar(' ', out);\n+\n+                const auto & type = *header.getByPosition(column).type;\n+                auto & cur_width = widths[column].empty() ? max_widths[column] : widths[column][displayed_row];\n+                writeValueWithPadding(\n+                    *columns[column], *serializations[column], row, cur_width, max_widths[column], cut_to_width, type.shouldAlignRightInPrettyFormats(), isNumber(type));\n+            }\n+            if (readable_number_tip)\n+                writeReadableNumberTipIfSingleValue(out, chunk, format_settings, color);\n+            writeChar('\\n', out);\n+            ++displayed_row;\n+            ++displayed_rows;\n         }\n-        if (readable_number_tip)\n-            writeReadableNumberTipIfSingleValue(out, chunk, format_settings, color);\n-        writeChar('\\n', out);\n     }\n \n     /// Write blank line between last row and footer\n@@ -128,9 +152,11 @@ void PrettySpaceBlockOutputFormat::writeSuffix()\n \n     if (total_rows >= format_settings.pretty.max_rows)\n     {\n-        writeCString(\"\\nShowed first \", out);\n-        writeIntText(format_settings.pretty.max_rows, out);\n-        writeCString(\".\\n\", out);\n+        writeCString(\"\\nShowed \", out);\n+        writeIntText(displayed_rows, out);\n+        writeCString(\" out of \", out);\n+        writeIntText(total_rows, out);\n+        writeCString(\" rows.\\n\", out);\n     }\n }\n \ndiff --git a/src/Storages/MergeTree/MergeTreeData.cpp b/src/Storages/MergeTree/MergeTreeData.cpp\nindex af7b55e32b7c..35009cddca93 100644\n--- a/src/Storages/MergeTree/MergeTreeData.cpp\n+++ b/src/Storages/MergeTree/MergeTreeData.cpp\n@@ -2924,7 +2924,6 @@ void MergeTreeData::clearPartsFromFilesystemImpl(const DataPartsVector & parts_t\n         );\n     }\n \n-\n     if (!remove_parts_in_order)\n     {\n         /// NOTE: Under heavy system load you may get \"Cannot schedule a task\" from ThreadPool.\n@@ -2947,7 +2946,6 @@ void MergeTreeData::clearPartsFromFilesystemImpl(const DataPartsVector & parts_t\n         }\n \n         runner.waitForAllToFinishAndRethrowFirstError();\n-\n         return;\n     }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00405_pretty_formats.reference b/tests/queries/0_stateless/00405_pretty_formats.reference\nindex bad93c19bb60..d1b080eddc7f 100644\n--- a/tests/queries/0_stateless/00405_pretty_formats.reference\n+++ b/tests/queries/0_stateless/00405_pretty_formats.reference\n@@ -136,7 +136,7 @@\n     \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n  \u001b[90m6. \u001b[0m\u2502     5 \u2502 5     \u2502 (5,'5') \u2502               2 \u2502\n     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n-  Showed first 6.\n+  Showed 6 out of 10 rows.\n    \u250c\u2500\u001b[1mhello\u001b[0m\u2500\u252c\u2500\u001b[1mworld\u001b[0m\u2500\u252c\u2500\u001b[1mtuple\u001b[0m\u2500\u2500\u2500\u252c\u2500\u001b[1msometimes_nulls\u001b[0m\u2500\u2510\n \u001b[90m1. \u001b[0m\u2502     0 \u2502 0     \u2502 (0,'0') \u2502            \u1d3a\u1d41\u1d38\u1d38 \u2502\n \u001b[90m2. \u001b[0m\u2502     1 \u2502 1     \u2502 (1,'1') \u2502               1 \u2502\n@@ -147,7 +147,7 @@\n     \u250c\u2500\u001b[1mhello\u001b[0m\u2500\u252c\u2500\u001b[1mworld\u001b[0m\u2500\u252c\u2500\u001b[1mtuple\u001b[0m\u2500\u2500\u2500\u252c\u2500\u001b[1msometimes_nulls\u001b[0m\u2500\u2510\n  \u001b[90m6. \u001b[0m\u2502     5 \u2502 5     \u2502 (5,'5') \u2502               2 \u2502\n     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n-  Showed first 6.\n+  Showed 6 out of 10 rows.\n     \u001b[1mhello\u001b[0m   \u001b[1mworld\u001b[0m   \u001b[1mtuple\u001b[0m     \u001b[1msometimes_nulls\u001b[0m\n \n \u001b[90m1. \u001b[0m     0   0       (0,'0')              \u1d3a\u1d41\u1d38\u1d38 \n@@ -159,16 +159,17 @@\n \n  \u001b[90m6. \u001b[0m     5   5       (5,'5')                 2 \n \n-Showed first 6.\n-   \u250c\u2500\u001b[1mhello\u001b[0m\u2500\u252c\u2500\u001b[1mworld\u001b[0m\u2500\u252c\u2500\u001b[1mtuple\u001b[0m\u2500\u2500\u2500\u252c\u2500\u001b[1msometimes_nulls\u001b[0m\u2500\u2510\n-\u001b[90m1. \u001b[0m\u2502     0 \u2502 0     \u2502 (0,'0') \u2502            \u1d3a\u1d41\u1d38\u1d38 \u2502\n-\u001b[90m2. \u001b[0m\u2502     1 \u2502 1     \u2502 (1,'1') \u2502               1 \u2502\n-\u001b[90m3. \u001b[0m\u2502     2 \u2502 2     \u2502 (2,'2') \u2502               2 \u2502\n-\u001b[90m4. \u001b[0m\u2502     3 \u2502 3     \u2502 (3,'3') \u2502            \u1d3a\u1d41\u1d38\u1d38 \u2502\n-\u001b[90m5. \u001b[0m\u2502     4 \u2502 4     \u2502 (4,'4') \u2502               1 \u2502\n-\u001b[90m6. \u001b[0m\u2502     5 \u2502 5     \u2502 (5,'5') \u2502               2 \u2502\n-   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n-  Showed first 6.\n+Showed 6 out of 10 rows.\n+    \u250c\u2500\u001b[1mhello\u001b[0m\u2500\u252c\u2500\u001b[1mworld\u001b[0m\u2500\u252c\u2500\u001b[1mtuple\u001b[0m\u2500\u2500\u2500\u252c\u2500\u001b[1msometimes_nulls\u001b[0m\u2500\u2510\n+ \u001b[90m1. \u001b[0m\u2502     0 \u2502 0     \u2502 (0,'0') \u2502            \u1d3a\u1d41\u1d38\u1d38 \u2502\n+ \u001b[90m2. \u001b[0m\u2502     1 \u2502 1     \u2502 (1,'1') \u2502               1 \u2502\n+ \u001b[90m3. \u001b[0m\u2502     2 \u2502 2     \u2502 (2,'2') \u2502               2 \u2502\n+    \u2500       \u2500       \u2500         \u2500                 \u2500\n+ \u001b[90m8. \u001b[0m\u2502     7 \u2502 7     \u2502 (7,'7') \u2502               1 \u2502\n+ \u001b[90m9. \u001b[0m\u2502     8 \u2502 8     \u2502 (8,'8') \u2502               2 \u2502\n+\u001b[90m10. \u001b[0m\u2502     9 \u2502 9     \u2502 (9,'9') \u2502            \u1d3a\u1d41\u1d38\u1d38 \u2502\n+    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+  Showed 6 out of 10 rows.\n    \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n    \u2503 hello \u2503 world \u2503 tuple   \u2503 sometimes_nulls \u2503\n    \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n@@ -187,7 +188,7 @@ Showed first 6.\n     \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n  6. \u2502     5 \u2502 5     \u2502 (5,'5') \u2502               2 \u2502\n     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n-  Showed first 6.\n+  Showed 6 out of 10 rows.\n    \u250c\u2500hello\u2500\u252c\u2500world\u2500\u252c\u2500tuple\u2500\u2500\u2500\u252c\u2500sometimes_nulls\u2500\u2510\n 1. \u2502     0 \u2502 0     \u2502 (0,'0') \u2502            \u1d3a\u1d41\u1d38\u1d38 \u2502\n 2. \u2502     1 \u2502 1     \u2502 (1,'1') \u2502               1 \u2502\n@@ -198,7 +199,7 @@ Showed first 6.\n     \u250c\u2500hello\u2500\u252c\u2500world\u2500\u252c\u2500tuple\u2500\u2500\u2500\u252c\u2500sometimes_nulls\u2500\u2510\n  6. \u2502     5 \u2502 5     \u2502 (5,'5') \u2502               2 \u2502\n     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n-  Showed first 6.\n+  Showed 6 out of 10 rows.\n     hello   world   tuple     sometimes_nulls\n \n 1.      0   0       (0,'0')              \u1d3a\u1d41\u1d38\u1d38 \n@@ -210,7 +211,7 @@ Showed first 6.\n \n  6.      5   5       (5,'5')                 2 \n \n-Showed first 6.\n+Showed 6 out of 10 rows.\n    +-------+-------+---------+-----------------+\n    | \u001b[1mhello\u001b[0m | \u001b[1mworld\u001b[0m | \u001b[1mtuple  \u001b[0m | \u001b[1msometimes_nulls\u001b[0m |\n    +-------+-------+---------+-----------------+\n@@ -229,7 +230,7 @@ Showed first 6.\n     +-------+-------+---------+-----------------+\n  \u001b[90m6. \u001b[0m|     5 | 5     | (5,'5') |               2 |\n     +-------+-------+---------+-----------------+\n-  Showed first 6.\n+  Showed 6 out of 10 rows.\n    +-\u001b[1mhello\u001b[0m-+-\u001b[1mworld\u001b[0m-+-\u001b[1mtuple\u001b[0m---+-\u001b[1msometimes_nulls\u001b[0m-+\n \u001b[90m1. \u001b[0m|     0 | 0     | (0,'0') |            NULL |\n \u001b[90m2. \u001b[0m|     1 | 1     | (1,'1') |               1 |\n@@ -240,7 +241,7 @@ Showed first 6.\n     +-\u001b[1mhello\u001b[0m-+-\u001b[1mworld\u001b[0m-+-\u001b[1mtuple\u001b[0m---+-\u001b[1msometimes_nulls\u001b[0m-+\n  \u001b[90m6. \u001b[0m|     5 | 5     | (5,'5') |               2 |\n     +-------+-------+---------+-----------------+\n-  Showed first 6.\n+  Showed 6 out of 10 rows.\n     \u001b[1mhello\u001b[0m   \u001b[1mworld\u001b[0m   \u001b[1mtuple\u001b[0m     \u001b[1msometimes_nulls\u001b[0m\n \n \u001b[90m1. \u001b[0m     0   0       (0,'0')              NULL \n@@ -252,16 +253,17 @@ Showed first 6.\n \n  \u001b[90m6. \u001b[0m     5   5       (5,'5')                 2 \n \n-Showed first 6.\n-   +-\u001b[1mhello\u001b[0m-+-\u001b[1mworld\u001b[0m-+-\u001b[1mtuple\u001b[0m---+-\u001b[1msometimes_nulls\u001b[0m-+\n-\u001b[90m1. \u001b[0m|     0 | 0     | (0,'0') |            NULL |\n-\u001b[90m2. \u001b[0m|     1 | 1     | (1,'1') |               1 |\n-\u001b[90m3. \u001b[0m|     2 | 2     | (2,'2') |               2 |\n-\u001b[90m4. \u001b[0m|     3 | 3     | (3,'3') |            NULL |\n-\u001b[90m5. \u001b[0m|     4 | 4     | (4,'4') |               1 |\n-\u001b[90m6. \u001b[0m|     5 | 5     | (5,'5') |               2 |\n-   +-------+-------+---------+-----------------+\n-  Showed first 6.\n+Showed 6 out of 10 rows.\n+    +-\u001b[1mhello\u001b[0m-+-\u001b[1mworld\u001b[0m-+-\u001b[1mtuple\u001b[0m---+-\u001b[1msometimes_nulls\u001b[0m-+\n+ \u001b[90m1. \u001b[0m|     0 | 0     | (0,'0') |            NULL |\n+ \u001b[90m2. \u001b[0m|     1 | 1     | (1,'1') |               1 |\n+ \u001b[90m3. \u001b[0m|     2 | 2     | (2,'2') |               2 |\n+    -       -       -         -                 -\n+ \u001b[90m8. \u001b[0m|     7 | 7     | (7,'7') |               1 |\n+ \u001b[90m9. \u001b[0m|     8 | 8     | (8,'8') |               2 |\n+\u001b[90m10. \u001b[0m|     9 | 9     | (9,'9') |            NULL |\n+    +-------+-------+---------+-----------------+\n+  Showed 6 out of 10 rows.\n    +-------+-------+---------+-----------------+\n    | hello | world | tuple   | sometimes_nulls |\n    +-------+-------+---------+-----------------+\n@@ -280,7 +282,7 @@ Showed first 6.\n     +-------+-------+---------+-----------------+\n  6. |     5 | 5     | (5,'5') |               2 |\n     +-------+-------+---------+-----------------+\n-  Showed first 6.\n+  Showed 6 out of 10 rows.\n    +-hello-+-world-+-tuple---+-sometimes_nulls-+\n 1. |     0 | 0     | (0,'0') |            NULL |\n 2. |     1 | 1     | (1,'1') |               1 |\n@@ -291,7 +293,7 @@ Showed first 6.\n     +-hello-+-world-+-tuple---+-sometimes_nulls-+\n  6. |     5 | 5     | (5,'5') |               2 |\n     +-------+-------+---------+-----------------+\n-  Showed first 6.\n+  Showed 6 out of 10 rows.\n     hello   world   tuple     sometimes_nulls\n \n 1.      0   0       (0,'0')              NULL \n@@ -303,4 +305,4 @@ Showed first 6.\n \n  6.      5   5       (5,'5')                 2 \n \n-Showed first 6.\n+Showed 6 out of 10 rows.\ndiff --git a/tests/queries/0_stateless/03300_pretty_vertical_cut.reference b/tests/queries/0_stateless/03300_pretty_vertical_cut.reference\nnew file mode 100644\nindex 000000000000..1c2e9171217b\n--- /dev/null\n+++ b/tests/queries/0_stateless/03300_pretty_vertical_cut.reference\n@@ -0,0 +1,114 @@\n+    \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n+    \u2503 number \u2503 concat('Hello', number) \u2503\n+    \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n+ 1. \u2502      0 \u2502 Hello0                  \u2502\n+    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n+ 2. \u2502      1 \u2502 Hello1                  \u2502\n+    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n+ 3. \u2502      2 \u2502 Hello2                  \u2502\n+    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n+ 4. \u2502      3 \u2502 Hello3                  \u2502\n+    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n+ 5. \u2502      4 \u2502 Hello4                  \u2502\n+    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n+    \u2500        \u2500                         \u2500\n+    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n+21. \u2502     20 \u2502 Hello20                 \u2502\n+    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n+22. \u2502     21 \u2502 Hello21                 \u2502\n+    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n+23. \u2502     22 \u2502 Hello22                 \u2502\n+    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n+24. \u2502     23 \u2502 Hello23                 \u2502\n+    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n+25. \u2502     24 \u2502 Hello24                 \u2502\n+    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+  Showed 10 out of 25 rows.\n+    \u250c\u2500number\u2500\u252c\u2500concat('Hello', number)\u2500\u2510\n+ 1. \u2502      0 \u2502 Hello0                  \u2502\n+ 2. \u2502      1 \u2502 Hello1                  \u2502\n+ 3. \u2502      2 \u2502 Hello2                  \u2502\n+ 4. \u2502      3 \u2502 Hello3                  \u2502\n+ 5. \u2502      4 \u2502 Hello4                  \u2502\n+    \u2500        \u2500                         \u2500\n+21. \u2502     20 \u2502 Hello20                 \u2502\n+22. \u2502     21 \u2502 Hello21                 \u2502\n+23. \u2502     22 \u2502 Hello22                 \u2502\n+24. \u2502     23 \u2502 Hello23                 \u2502\n+25. \u2502     24 \u2502 Hello24                 \u2502\n+    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+  Showed 10 out of 25 rows.\n+     number   concat('Hello', number)\n+\n+ 1.       0   Hello0                  \n+ 2.       1   Hello1                  \n+ 3.       2   Hello2                  \n+ 4.       3   Hello3                  \n+ 5.       4   Hello4                  \n+ - - - - - - - - - - - - - - - - - - \n+21.      20   Hello20                 \n+22.      21   Hello21                 \n+23.      22   Hello22                 \n+24.      23   Hello23                 \n+25.      24   Hello24                 \n+\n+Showed 10 out of 25 rows.\n+    \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n+    \u2503 number \u2503 concat('Hello', number) \u2503\n+    \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n+ 1. \u2502      0 \u2502 Hello0                  \u2502\n+    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n+ 2. \u2502      1 \u2502 Hello1                  \u2502\n+    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n+ 3. \u2502      2 \u2502 Hello2                  \u2502\n+    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n+ 4. \u2502      3 \u2502 Hello3                  \u2502\n+    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n+ 5. \u2502      4 \u2502 Hello4                  \u2502\n+    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n+ 6. \u2502      5 \u2502 Hello5                  \u2502\n+    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n+    \u2500        \u2500                         \u2500\n+    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n+21. \u2502     20 \u2502 Hello20                 \u2502\n+    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n+22. \u2502     21 \u2502 Hello21                 \u2502\n+    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n+23. \u2502     22 \u2502 Hello22                 \u2502\n+    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n+24. \u2502     23 \u2502 Hello23                 \u2502\n+    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n+25. \u2502     24 \u2502 Hello24                 \u2502\n+    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+  Showed 11 out of 25 rows.\n+    \u250c\u2500number\u2500\u252c\u2500concat('Hello', number)\u2500\u2510\n+ 1. \u2502      0 \u2502 Hello0                  \u2502\n+ 2. \u2502      1 \u2502 Hello1                  \u2502\n+ 3. \u2502      2 \u2502 Hello2                  \u2502\n+ 4. \u2502      3 \u2502 Hello3                  \u2502\n+ 5. \u2502      4 \u2502 Hello4                  \u2502\n+ 6. \u2502      5 \u2502 Hello5                  \u2502\n+    \u2500        \u2500                         \u2500\n+21. \u2502     20 \u2502 Hello20                 \u2502\n+22. \u2502     21 \u2502 Hello21                 \u2502\n+23. \u2502     22 \u2502 Hello22                 \u2502\n+24. \u2502     23 \u2502 Hello23                 \u2502\n+25. \u2502     24 \u2502 Hello24                 \u2502\n+    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+  Showed 11 out of 25 rows.\n+     number   concat('Hello', number)\n+\n+ 1.       0   Hello0                  \n+ 2.       1   Hello1                  \n+ 3.       2   Hello2                  \n+ 4.       3   Hello3                  \n+ 5.       4   Hello4                  \n+ 6.       5   Hello5                  \n+ - - - - - - - - - - - - - - - - - - \n+21.      20   Hello20                 \n+22.      21   Hello21                 \n+23.      22   Hello22                 \n+24.      23   Hello23                 \n+25.      24   Hello24                 \n+\n+Showed 11 out of 25 rows.\ndiff --git a/tests/queries/0_stateless/03300_pretty_vertical_cut.sql b/tests/queries/0_stateless/03300_pretty_vertical_cut.sql\nnew file mode 100644\nindex 000000000000..8fc4f72a68b3\n--- /dev/null\n+++ b/tests/queries/0_stateless/03300_pretty_vertical_cut.sql\n@@ -0,0 +1,11 @@\n+SET output_format_pretty_max_rows = 10;\n+\n+SELECT number, 'Hello'||number FROM numbers(25) FORMAT Pretty;\n+SELECT number, 'Hello'||number FROM numbers(25) FORMAT PrettyCompact;\n+SELECT number, 'Hello'||number FROM numbers(25) FORMAT PrettySpace;\n+\n+SET output_format_pretty_max_rows = 11;\n+\n+SELECT number, 'Hello'||number FROM numbers(25) FORMAT Pretty;\n+SELECT number, 'Hello'||number FROM numbers(25) FORMAT PrettyCompact;\n+SELECT number, 'Hello'||number FROM numbers(25) FORMAT PrettySpace;\n",
  "problem_statement": "Better rendering of Pretty format with columns of a large width\nHere is an example from GlareDB - it is a slow and basically a non-functional toy, but they made the rendering of the Pretty format better than ClickHouse did:\r\n\r\n![Screenshot_20240202_012254](https://github.com/ClickHouse/ClickHouse/assets/18581488/6fb95edf-6ee9-4797-b9e5-7692a13f979e)\r\n\r\n![Screenshot_20240202_012355](https://github.com/ClickHouse/ClickHouse/assets/18581488/178a520b-67d0-4d91-bd39-e6be3d7d538e)\r\n\n",
  "hints_text": "I guess this should be a separate format, not replacement for Pretty, it hides too much information. Sure the user would enjoy the eye candy on their first few queries, but it would be outweighed by annoyed googling as soon as they need to get any actual information out of the DB.\r\n\r\n* Truncating numbers usually makes them useless. I think only unbounded-length types (strings and arrays) should be truncated.\r\n* Truncating strings to title length when there are lots of columns looks nice. But there should be some easily-discoverable way to see the whole string too. Same for \u2026-ing the middle rows (20 is very few, I often scroll for a few hundred). Same for \u2026-ing the middle columns.\r\n* Seems better to omit the last columns instead of the middle, and have a convention to put the most useful columns at the beginning when creating tables (and have an easy and efficient ALTER to reorder columns). This would make things like `select * from system.parts` readable and useful.\r\n* +4 lines of header in order to show data types - I guess it's worth it. The `\u2014` line seems unnecessary though.\nYes, I also found the behavior of GlareDB ridiculous. Most likely, it uses an existing Rust crate from some enthusiast.\r\n\r\nLet's make the following changes:\r\n1. Not truncate it horizontally, only vertically.\r\n2. Don't use this minuscule size of 25 by default, but also less than our current default 10,000 - I think, 500 will be ok.\r\n3. If the result is large, duplicate the header also as a footer.",
  "created_at": "2024-12-27T22:20:35Z"
}