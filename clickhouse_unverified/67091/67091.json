{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 67091,
  "instance_id": "ClickHouse__ClickHouse-67091",
  "issue_numbers": [
    "62449"
  ],
  "base_commit": "da24aa06fac26bf1516320cc6e49c8927b1f600a",
  "patch": "diff --git a/docs/en/sql-reference/window-functions/lagInFrame.md b/docs/en/sql-reference/window-functions/lagInFrame.md\nindex 049e095c10fe..de6e9005baad 100644\n--- a/docs/en/sql-reference/window-functions/lagInFrame.md\n+++ b/docs/en/sql-reference/window-functions/lagInFrame.md\n@@ -23,7 +23,7 @@ For more detail on window function syntax see: [Window Functions - Syntax](./ind\n **Parameters**\n - `x` \u2014 Column name. \n - `offset` \u2014 Offset to apply. [(U)Int*](../data-types/int-uint.md). (Optional - `1` by default).\n-- `default` \u2014 Value to return if calculated row exceeds the boundaries of the window frame. (Optional - `null` by default).\n+- `default` \u2014 Value to return if calculated row exceeds the boundaries of the window frame. (Optional - default value of column type when omitted).\n \n **Returned value**\n \ndiff --git a/docs/en/sql-reference/window-functions/leadInFrame.md b/docs/en/sql-reference/window-functions/leadInFrame.md\nindex fc1b92cc266d..4a82c03f6e62 100644\n--- a/docs/en/sql-reference/window-functions/leadInFrame.md\n+++ b/docs/en/sql-reference/window-functions/leadInFrame.md\n@@ -23,7 +23,7 @@ For more detail on window function syntax see: [Window Functions - Syntax](./ind\n **Parameters**\n - `x` \u2014 Column name.\n - `offset` \u2014 Offset to apply. [(U)Int*](../data-types/int-uint.md). (Optional - `1` by default).\n-- `default` \u2014 Value to return if calculated row exceeds the boundaries of the window frame. (Optional - `null` by default).\n+- `default` \u2014 Value to return if calculated row exceeds the boundaries of the window frame. (Optional - default value of column type when omitted).\n \n **Returned value**\n \ndiff --git a/src/Processors/Transforms/WindowTransform.cpp b/src/Processors/Transforms/WindowTransform.cpp\nindex 2b255c5120ef..f76e2d64368f 100644\n--- a/src/Processors/Transforms/WindowTransform.cpp\n+++ b/src/Processors/Transforms/WindowTransform.cpp\n@@ -16,6 +16,9 @@\n #include <Common/Arena.h>\n #include <Common/FieldVisitorConvertToNumber.h>\n #include <Common/FieldVisitorsAccurateComparison.h>\n+#include <Functions/CastOverloadResolver.h>\n+#include <Functions/IFunction.h>\n+#include <DataTypes/DataTypeString.h>\n \n #include <Poco/Logger.h>\n #include <Common/logger_useful.h>\n@@ -78,6 +81,8 @@ class IWindowFunction\n \n     virtual std::optional<WindowFrame> getDefaultFrame() const { return {}; }\n \n+    virtual ColumnPtr castColumn(const Columns &, const std::vector<size_t> &) { return nullptr; }\n+\n     /// Is the frame type supported by this function.\n     virtual bool checkWindowFrameType(const WindowTransform * /*transform*/) const { return true; }\n };\n@@ -1174,6 +1179,9 @@ void WindowTransform::appendChunk(Chunk & chunk)\n         // Initialize output columns.\n         for (auto & ws : workspaces)\n         {\n+            if (ws.window_function_impl)\n+                block.casted_columns.push_back(ws.window_function_impl->castColumn(block.input_columns, ws.argument_column_indices));\n+\n             block.output_columns.push_back(ws.aggregate_function->getResultType()\n                 ->createColumn());\n             block.output_columns.back()->reserve(block.rows);\n@@ -2361,6 +2369,8 @@ struct WindowFunctionPercentRank final : public StatefulWindowFunction<PercentRa\n template <bool is_lead>\n struct WindowFunctionLagLeadInFrame final : public WindowFunction\n {\n+    FunctionBasePtr func_cast = nullptr;\n+\n     WindowFunctionLagLeadInFrame(const std::string & name_,\n             const DataTypes & argument_types_, const Array & parameters_)\n         : WindowFunction(name_, argument_types_, parameters_, createResultType(argument_types_, name_))\n@@ -2388,7 +2398,17 @@ struct WindowFunctionLagLeadInFrame final : public WindowFunction\n             return;\n         }\n \n-        const auto supertype = getLeastSupertype(DataTypes{argument_types[0], argument_types[2]});\n+        if (argument_types.size() > 3)\n+        {\n+            throw Exception(ErrorCodes::TOO_MANY_ARGUMENTS_FOR_FUNCTION,\n+                \"Function '{}' accepts at most 3 arguments, {} given\",\n+                name, argument_types.size());\n+        }\n+\n+        if (argument_types[0]->equals(*argument_types[2]))\n+            return;\n+\n+        const auto supertype = tryGetLeastSupertype(DataTypes{argument_types[0], argument_types[2]});\n         if (!supertype)\n         {\n             throw Exception(ErrorCodes::BAD_ARGUMENTS,\n@@ -2405,12 +2425,44 @@ struct WindowFunctionLagLeadInFrame final : public WindowFunction\n                 argument_types[2]->getName());\n         }\n \n-        if (argument_types.size() > 3)\n+        const auto from_name = argument_types[2]->getName();\n+        const auto to_name = argument_types[0]->getName();\n+        ColumnsWithTypeAndName arguments\n         {\n-            throw Exception(ErrorCodes::TOO_MANY_ARGUMENTS_FOR_FUNCTION,\n-                \"Function '{}' accepts at most 3 arguments, {} given\",\n-                name, argument_types.size());\n-        }\n+            { argument_types[2], \"\" },\n+            {\n+                DataTypeString().createColumnConst(0, to_name),\n+                std::make_shared<DataTypeString>(),\n+                \"\"\n+            }\n+        };\n+\n+        auto get_cast_func = [&arguments]\n+        {\n+            FunctionOverloadResolverPtr func_builder_cast = createInternalCastOverloadResolver(CastType::accurate, {});\n+            return func_builder_cast->build(arguments);\n+        };\n+\n+        func_cast = get_cast_func();\n+\n+    }\n+\n+    ColumnPtr castColumn(const Columns & columns, const std::vector<size_t> & idx) override\n+    {\n+        if (!func_cast)\n+            return nullptr;\n+\n+        ColumnsWithTypeAndName arguments\n+        {\n+            { columns[idx[2]], argument_types[2], \"\" },\n+            {\n+                DataTypeString().createColumnConst(columns[idx[2]]->size(), argument_types[0]->getName()),\n+                std::make_shared<DataTypeString>(),\n+                \"\"\n+            }\n+        };\n+\n+        return func_cast->execute(arguments, argument_types[0], columns[idx[2]]->size());\n     }\n \n     static DataTypePtr createResultType(const DataTypes & argument_types_, const std::string & name_)\n@@ -2460,12 +2512,11 @@ struct WindowFunctionLagLeadInFrame final : public WindowFunction\n             if (argument_types.size() > 2)\n             {\n                 // Column with default values is specified.\n-                // The conversion through Field is inefficient, but we accept\n-                // subtypes of the argument type as a default value (for convenience),\n-                // and it's a pain to write conversion that respects ColumnNothing\n-                // and ColumnConst and so on.\n-                const IColumn & default_column = *current_block.input_columns[\n-                    workspace.argument_column_indices[2]].get();\n+                const IColumn & default_column =\n+                    current_block.casted_columns[function_index] ?\n+                        *current_block.casted_columns[function_index].get() :\n+                        *current_block.input_columns[workspace.argument_column_indices[2]].get();\n+\n                 to.insert(default_column[transform->current_row.row]);\n             }\n             else\ndiff --git a/src/Processors/Transforms/WindowTransform.h b/src/Processors/Transforms/WindowTransform.h\nindex 43fa6b28019e..fe4f79e997cb 100644\n--- a/src/Processors/Transforms/WindowTransform.h\n+++ b/src/Processors/Transforms/WindowTransform.h\n@@ -50,6 +50,7 @@ struct WindowTransformBlock\n {\n     Columns original_input_columns;\n     Columns input_columns;\n+    Columns casted_columns;\n     MutableColumns output_columns;\n \n     size_t rows = 0;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03210_lag_lead_inframe_types.reference b/tests/queries/0_stateless/03210_lag_lead_inframe_types.reference\nnew file mode 100644\nindex 000000000000..d4734a85e729\n--- /dev/null\n+++ b/tests/queries/0_stateless/03210_lag_lead_inframe_types.reference\n@@ -0,0 +1,40 @@\n+0\n+1\n+2\n+2\n+2\n+2\n+2\n+2\n+2\n+2\n+0\n+1\n+2\n+3\n+4\n+5\n+6\n+7\n+8\n+9\n+0\n+1\n+2\n+2\n+2\n+2\n+2\n+2\n+2\n+2\n+0\n+1\n+2\n+3\n+4\n+5\n+6\n+7\n+8\n+9\ndiff --git a/tests/queries/0_stateless/03210_lag_lead_inframe_types.sql b/tests/queries/0_stateless/03210_lag_lead_inframe_types.sql\nnew file mode 100644\nindex 000000000000..f6017ee66907\n--- /dev/null\n+++ b/tests/queries/0_stateless/03210_lag_lead_inframe_types.sql\n@@ -0,0 +1,4 @@\n+SELECT lagInFrame(2::UInt128, 2, number) OVER w FROM numbers(10) WINDOW w AS (ORDER BY number);\n+SELECT leadInFrame(2::UInt128, 2, number) OVER w FROM numbers(10) WINDOW w AS (ORDER BY number);\n+SELECT lagInFrame(2::UInt64, 2, number) OVER w FROM numbers(10) WINDOW w AS (ORDER BY number);\n+SELECT leadInFrame(2::UInt64, 2, number) OVER w FROM numbers(10) WINDOW w AS (ORDER BY number);\n",
  "problem_statement": "Use-of-uninitialized-value in `NativeWriter`\nhttps://s3.amazonaws.com/clickhouse-test-reports/62421/9a08f1ddd6f414097a6bf00f1159924d4a14b4e4/ast_fuzzer__msan_.html\r\n\r\n```\r\n==164==WARNING: MemorySanitizer: use-of-uninitialized-value\r\n    #0 0x55d8f61dff38 in Poco::Net::SocketImpl::sendBytes(void const*, int, int) build_docker/./base/poco/Net/src/SocketImpl.cpp:292:8\r\n    #1 0x55d8f61efef1 in Poco::Net::StreamSocketImpl::sendBytes(void const*, int, int) build_docker/./base/poco/Net/src/StreamSocketImpl.cpp:63:23\r\n    #2 0x55d8d730863b in DB::WriteBufferFromPocoSocket::socketSendBytesImpl(char const*, unsigned long) build_docker/./src/IO/WriteBufferFromPocoSocket.cpp:69:30\r\n    #3 0x55d8d730adf1 in DB::WriteBufferFromPocoSocket::nextImpl() build_docker/./src/IO/WriteBufferFromPocoSocket.cpp:154:19\r\n    #4 0x55d8f20d9dfd in DB::WriteBuffer::next() build_docker/./src/IO/WriteBuffer.h:53:13\r\n    #5 0x55d8f20d9dfd in DB::TCPHandler::sendData(DB::Block const&) build_docker/./src/Server/TCPHandler.cpp:2206:37\r\n    #6 0x55d8f20d2225 in DB::TCPHandler::processOrdinaryQuery() build_docker/./src/Server/TCPHandler.cpp:1055:21\r\n    #7 0x55d8f20b246d in DB::TCPHandler::runImpl() build_docker/./src/Server/TCPHandler.cpp:539:17\r\n    #8 0x55d8f20fcd91 in DB::TCPHandler::run() build_docker/./src/Server/TCPHandler.cpp:2329:9\r\n    #9 0x55d8f61f281f in Poco::Net::TCPServerConnection::start() build_docker/./base/poco/Net/src/TCPServerConnection.cpp:43:3\r\n    #10 0x55d8f61f36a0 in Poco::Net::TCPServerDispatcher::run() build_docker/./base/poco/Net/src/TCPServerDispatcher.cpp:115:20\r\n    #11 0x55d8f667aae5 in Poco::PooledThread::run() build_docker/./base/poco/Foundation/src/ThreadPool.cpp:188:14\r\n    #12 0x55d8f66778ad in Poco::(anonymous namespace)::RunnableHolder::run() build_docker/./base/poco/Foundation/src/Thread.cpp:45:11\r\n    #13 0x55d8f6674791 in Poco::ThreadImpl::runnableEntry(void*) build_docker/./base/poco/Foundation/src/Thread_POSIX.cpp:335:27\r\n    #14 0x7f9c85276ac2 in start_thread nptl/pthread_create.c:442:8\r\n    #15 0x7f9c8530884f  misc/../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\r\n\r\n  Uninitialized value was stored to memory at\r\n    #0 0x55d8c003caca in __msan_memcpy (/workspace/clickhouse+0x7b44aca) (BuildId: ec48f9fea32dfe94c3e5f6c8afcd082b4e11f2f8)\r\n    #1 0x55d8c00f1c47 in DB::WriteBuffer::write(char const*, unsigned long) (/workspace/clickhouse+0x7bf9c47) (BuildId: ec48f9fea32dfe94c3e5f6c8afcd082b4e11f2f8)\r\n    #2 0x55d8f21871d2 in void DB::writePODBinary<char8_t>(char8_t const&, DB::WriteBuffer&) build_docker/./src/IO/WriteHelpers.h:83:9\r\n    #3 0x55d8f21871d2 in void DB::writeBinary<char8_t>(char8_t const&, DB::WriteBuffer&) build_docker/./src/IO/WriteHelpers.h:1026:59\r\n    #4 0x55d8f21871d2 in DB::NativeWriter::write(DB::Block const&) build_docker/./src/Formats/NativeWriter.cpp:152:13\r\n    #5 0x55d8f20d9d52 in DB::TCPHandler::sendData(DB::Block const&) build_docker/./src/Server/TCPHandler.cpp:2205:26\r\n    #6 0x55d8f20d1969 in DB::TCPHandler::processOrdinaryQuery() build_docker/./src/Server/TCPHandler.cpp:1011:13\r\n    #7 0x55d8f20b246d in DB::TCPHandler::runImpl() build_docker/./src/Server/TCPHandler.cpp:539:17\r\n    #8 0x55d8f20fcd91 in DB::TCPHandler::run() build_docker/./src/Server/TCPHandler.cpp:2329:9\r\n    #9 0x55d8f61f281f in Poco::Net::TCPServerConnection::start() build_docker/./base/poco/Net/src/TCPServerConnection.cpp:43:3\r\n    #10 0x55d8f61f36a0 in Poco::Net::TCPServerDispatcher::run() build_docker/./base/poco/Net/src/TCPServerDispatcher.cpp:115:20\r\n    #11 0x55d8f667aae5 in Poco::PooledThread::run() build_docker/./base/poco/Foundation/src/ThreadPool.cpp:188:14\r\n    #12 0x55d8f66778ad in Poco::(anonymous namespace)::RunnableHolder::run() build_docker/./base/poco/Foundation/src/Thread.cpp:45:11\r\n    #13 0x55d8f6674791 in Poco::ThreadImpl::runnableEntry(void*) build_docker/./base/poco/Foundation/src/Thread_POSIX.cpp:335:27\r\n    #14 0x7f9c85276ac2 in start_thread nptl/pthread_create.c:442:8\r\n\r\n  Uninitialized value was created by an allocation of 'ref.tmp119' in the stack frame\r\n    #0 0x55d8f21871a3 in DB::NativeWriter::write(DB::Block const&) build_docker/./src/Formats/NativeWriter.cpp:152:25\r\n\r\nSUMMARY: MemorySanitizer: use-of-uninitialized-value build_docker/./base/poco/Net/src/SocketImpl.cpp:292:8 in Poco::Net::SocketImpl::sendBytes(void const*, int, int)\r\n```\r\n\r\n-----\r\n\r\n**Looks like it complains about `has_custom`, but there's no way it could be not initialized, so it's weird** \n",
  "hints_text": "Reproducer:\r\n```\r\nSELECT minus(toNullable(4), 4), lagInFrame(materialize(toUInt128(4)) - 2, 2, number) IGNORE NULLS OVER w,            4 FROM numbers(10) WINDOW w AS (ORDER BY number ASC NULLS FIRST)\r\n```\r\n\r\nWeirdge.\r\n\r\nIf I had to guess I'd say this is not a false positive and instead is an issue elsewhere\nThis diagnostics doesn't make much sense - there is only one local variable which is used and it is clearly initialized.\r\nI would suggest it's a false positive - msan expects all libraries are instrumented and I guess we don't instrument standard libraries (?) -\r\nfrom quite a few sources:\r\nhttps://www.google.com/search?q=%22Uninitialized+value+was+created+by+an+allocation+of%22++%22in+the+stack+frame%22+ref.tmp&sca_esv=bbda2a020c4763aa&rlz=1C1RLNS_enUS731US731&ei=XN2gZvebMK2yptQPxe6zwAk&ved=0ahUKEwj3ueTNwb-HAxUtmYkEHUX3DJgQ4dUDCA8&uact=5&oq=%22Uninitialized+value+was+created+by+an+allocation+of%22++%22in+the+stack+frame%22+ref.tmp&gs_lp=Egxnd3Mtd2l6LXNlcnAiUyJVbmluaXRpYWxpemVkIHZhbHVlIHdhcyBjcmVhdGVkIGJ5IGFuIGFsbG9jYXRpb24gb2YiICAiaW4gdGhlIHN0YWNrIGZyYW1lIiByZWYudG1wSJUrUOcIWMUgcAF4AJABAJgBQqABowKqAQE1uAEDyAEA-AEBmAIAoAIAmAMAiAYBkgcAoAePBQ&sclient=gws-wiz-serp\r\nsome specific with almost exact same diagnostics:\r\nhttps://stackoverflow.com/questions/47486755/clang-memory-sanitizer-reports-use-of-uninitialized-value\r\n\n> I would suggest it's a false positive \r\n\r\nWe instrument all libraries except libc, and for libc msan intercepts all relevant calls of standard functions and handles them. So false-positives should not be possible unless msan has a bug. And if msan has a bug, we should report it to https://github.com/google/sanitizers/\r\n\r\n> some specific with almost exact same diagnostics\r\n\r\nThe diagnostics is absolutely different, and the answers are absolutely irrelevant to our case (we do instrument libcxx)\n@tavplubix \r\nthe diagnostics in repro example is almost the same:\r\n```\r\nUninitialized value was created by an allocation of 'ref.tmp' in the stack frame of function '_ZNSt6vectorIiSaIiEEC2ERKS1_'\r\n```\r\nhttps://stackoverflow.com/questions/47486755/clang-memory-sanitizer-reports-use-of-uninitialized-value/47487178#47487178\r\n\r\nand exactly this issue was reported and then closed with exactly this explanation:\r\nhttps://github.com/google/sanitizers/issues/1623#issuecomment-1440807965\r\n\n> and exactly this issue was reported and then closed with exactly this explanation:\r\n\r\nWe do instrument libc++. If that was the issue then it'd happen all the time.\r\n\r\nI've just run the query with clickhouse local again and got a completely different report:\r\n\r\n```\r\n==199131==WARNING: MemorySanitizer: use-of-uninitialized-value\r\n    #0 0x5555966cf1b0 in char* (anonymous namespace)::writeSIntText<wide::integer<128ul, int>>(wide::integer<128ul, int>, char*) /mnt/ch/ClickHouse/base/base/itoa.cpp:419:9\r\n    #1 0x5555966cf1b0 in itoa(wide::integer<128ul, int>, char*) /mnt/ch/ClickHouse/base/base/itoa.cpp:461:12\r\n    #2 0x55555e9b93b1 in void DB::detail::writeUIntTextFallback<wide::integer<128ul, int>>(wide::integer<128ul, int>, DB::WriteBuffer&) (/mnt/ch/ClickHouse/build_msan/programs/clickhouse+0x94653b1) (BuildId: 3db4468454b277fd5c9d31fec79b02a408d1f0d7)\r\n    #3 0x555588c8c619 in void DB::writeIntText<wide::integer<128ul, int>>(wide::integer<128ul, int>, DB::WriteBuffer&) /mnt/ch/ClickHouse/src/IO/WriteIntText.h:43:9\r\n    #4 0x555588c8c619 in void DB::writeText<wide::integer<128ul, int>>(wide::integer<128ul, int>, DB::WriteBuffer&) /mnt/ch/ClickHouse/src/IO/WriteHelpers.h:1062:9\r\n    #5 0x555588c8c619 in DB::SerializationNumber<wide::integer<128ul, int>>::serializeText(DB::IColumn const&, unsigned long, DB::WriteBuffer&, DB::FormatSettings const&) const /mnt/ch/ClickHouse/src/DataTypes/Serializations/SerializationNumber.cpp:21:5\r\n    #6 0x55559169c1ea in DB::PrettyBlockOutputFormat::calculateWidths(DB::Block const&, DB::Chunk const&, std::__1::vector<DB::PODArray<unsigned long, 4096ul, Allocator<false, false>, 0ul, 0ul>, std::__1::allocator<DB::PODArray<unsigned long, 4096ul, Allocator<false, false>, 0ul, 0ul>>>&, DB::PODArray<unsigned long, 4096ul, Allocator<false, false>, 0ul, 0ul>&, DB::PODArray<unsigned long, 4096ul, Allocator<false, false>, 0ul, 0ul>&) /mnt/ch/ClickHouse/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp:65:32\r\n    #7 0x5555916b5b98 in DB::PrettyCompactBlockOutputFormat::writeChunk(DB::Chunk const&, DB::IOutputFormat::PortKind) /mnt/ch/ClickHouse/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.cpp:206:5\r\n    #8 0x55559169d6b8 in DB::PrettyBlockOutputFormat::write(DB::Chunk, DB::IOutputFormat::PortKind) /mnt/ch/ClickHouse/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp:172:5\r\n    #9 0x5555916ac3c9 in DB::PrettyBlockOutputFormat::consume(DB::Chunk) /mnt/ch/ClickHouse/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp:515:5\r\n    #10 0x5555910fb8a8 in DB::IOutputFormat::write(DB::Block const&) /mnt/ch/ClickHouse/src/Processors/Formats/IOutputFormat.cpp:116:5\r\n    #11 0x555590a6d734 in DB::ClientBase::onData(DB::Block&, std::__1::shared_ptr<DB::IAST>) /mnt/ch/ClickHouse/src/Client/ClientBase.cpp:501:24\r\n    #12 0x555590a8a280 in DB::ClientBase::receiveAndProcessPacket(std::__1::shared_ptr<DB::IAST>, bool) /mnt/ch/ClickHouse/src/Client/ClientBase.cpp:1240:17\r\n    #13 0x555590a8928e in DB::ClientBase::receiveResult(std::__1::shared_ptr<DB::IAST>, int, bool) /mnt/ch/ClickHouse/src/Client/ClientBase.cpp:1206:18\r\n    #14 0x555590a85ede in DB::ClientBase::processOrdinaryQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::shared_ptr<DB::IAST>) /mnt/ch/ClickHouse/src/Client/ClientBase.cpp:1124:13\r\n    #15 0x555590a7fd2d in DB::ClientBase::processParsedSingleQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::shared_ptr<DB::IAST>, std::__1::optional<bool>, bool) /mnt/ch/ClickHouse/src/Client/ClientBase.cpp:2027:13\r\n    #16 0x555590a7beab in DB::ClientBase::processTextAsSingleQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&) /mnt/ch/ClickHouse/src/Client/ClientBase.cpp:989:9\r\n    #17 0x555590aa5f47 in DB::ClientBase::processQueryText(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&) /mnt/ch/ClickHouse/src/Client/ClientBase.cpp:2439:9\r\n    #18 0x555590aadade in DB::ClientBase::runInteractive() /mnt/ch/ClickHouse/src/Client/ClientBase.cpp:2676:18\r\n    #19 0x5555767bfd0f in DB::LocalServer::main(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&) /mnt/ch/ClickHouse/programs/local/LocalServer.cpp\r\n    #20 0x5555969f718b in Poco::Util::Application::run() /mnt/ch/ClickHouse/base/poco/Util/src/Application.cpp:315:8\r\n    #21 0x5555767e0c2d in mainEntryClickHouseLocal(int, char**) /mnt/ch/ClickHouse/programs/local/LocalServer.cpp:950:20\r\n    #22 0x55555d64fa51 in main /mnt/ch/ClickHouse/programs/main.cpp:248:21\r\n    #23 0x7ffff7dbdc87 in __libc_start_call_main /usr/src/debug/glibc/glibc/csu/../sysdeps/nptl/libc_start_call_main.h:58:16\r\n    #24 0x7ffff7dbdd4b in __libc_start_main /usr/src/debug/glibc/glibc/csu/../csu/libc-start.c:360:3\r\n    #25 0x55555d5bd02d in _start (/mnt/ch/ClickHouse/build_msan/programs/clickhouse+0x806902d) (BuildId: 3db4468454b277fd5c9d31fec79b02a408d1f0d7)\r\n\r\n  Uninitialized value was stored to memory at\r\n    #0 0x55555d5f7eec in __msan_memcpy.part.0 crtstuff.c\r\n    #1 0x55558dc445cb in void DB::PODArray<wide::integer<128ul, int>, 4096ul, Allocator<false, false>, 63ul, 64ul>::push_back<wide::integer<128ul, int>>(wide::integer<128ul, int>&&) /mnt/ch/ClickHouse/src/Common/PODArray.h:440:48\r\n    #2 0x55558dc445cb in DB::ColumnVector<wide::integer<128ul, int>>::insert(DB::Field const&) /mnt/ch/ClickHouse/src/Columns/ColumnVector.h:238:14\r\n    #3 0x555591c6f7e7 in DB::WindowFunctionLagLeadInFrame<false>::windowInsertResultInto(DB::WindowTransform const*, unsigned long) const /mnt/ch/ClickHouse/src/Processors/Transforms/WindowTransform.cpp:2466:20\r\n    #4 0x555591c7024c in non-virtual thunk to DB::WindowFunctionLagLeadInFrame<false>::windowInsertResultInto(DB::WindowTransform const*, unsigned long) const /mnt/ch/ClickHouse/src/Processors/Transforms/WindowTransform.cpp\r\n    #5 0x555591c39ec5 in DB::WindowTransform::writeOutCurrentRow() /mnt/ch/ClickHouse/src/Processors/Transforms/WindowTransform.cpp:1072:38\r\n    #6 0x555591c39ec5 in DB::WindowTransform::appendChunk(DB::Chunk&) /mnt/ch/ClickHouse/src/Processors/Transforms/WindowTransform.cpp:1256:13\r\n    #7 0x555591c434ab in DB::WindowTransform::work() /mnt/ch/ClickHouse/src/Processors/Transforms/WindowTransform.cpp:1481:9\r\n    #8 0x5555910cd5c3 in DB::executeJob(DB::ExecutingGraph::Node*, DB::ReadProgressCallback*) /mnt/ch/ClickHouse/src/Processors/Executors/ExecutionThreadContext.cpp:47:26\r\n    #9 0x5555910cd5c3 in DB::ExecutionThreadContext::executeTask() /mnt/ch/ClickHouse/src/Processors/Executors/ExecutionThreadContext.cpp:96:9\r\n    #10 0x55559109a18b in DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*) /mnt/ch/ClickHouse/src/Processors/Executors/PipelineExecutor.cpp:273:26\r\n    #11 0x555591098118 in DB::PipelineExecutor::executeSingleThread(unsigned long) /mnt/ch/ClickHouse/src/Processors/Executors/PipelineExecutor.cpp:239:5\r\n    #12 0x555591098118 in DB::PipelineExecutor::executeImpl(unsigned long, bool) /mnt/ch/ClickHouse/src/Processors/Executors/PipelineExecutor.cpp:411:9\r\n    #13 0x555591097aed in DB::PipelineExecutor::execute(unsigned long, bool) /mnt/ch/ClickHouse/src/Processors/Executors/PipelineExecutor.cpp:111:9\r\n    #14 0x5555910daf59 in DB::threadFunction(DB::PullingAsyncPipelineExecutor::Data&, std::__1::shared_ptr<DB::ThreadGroup>, unsigned long, bool) /mnt/ch/ClickHouse/src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:83:24\r\n    #15 0x5555910daf59 in DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0::operator()() const /mnt/ch/ClickHouse/src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:109:13\r\n    #16 0x5555910daf59 in decltype(std::declval<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>()()) std::__1::__invoke[abi:v15007]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&) /mnt/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/invoke.h:394:23\r\n    #17 0x5555910daf59 in decltype(auto) std::__1::__apply_tuple_impl[abi:v15007]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::__1::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::__1::tuple<>&, std::__1::__tuple_indices<...>) /mnt/ch/ClickHouse/contrib/llvm-project/libcxx/include/tuple:1789:1\r\n    #18 0x5555910daf59 in decltype(auto) std::__1::apply[abi:v15007]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::__1::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::__1::tuple<>&) /mnt/ch/ClickHouse/contrib/llvm-project/libcxx/include/tuple:1798:1\r\n    #19 0x5555910daf59 in ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()::operator()() /mnt/ch/ClickHouse/src/Common/ThreadPool.h:251:13\r\n    #20 0x5555910daf59 in decltype(std::declval<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>()()) std::__1::__invoke[abi:v15007]<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&) /mnt/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/invoke.h:394:23\r\n    #21 0x5555910daf59 in void std::__1::__invoke_void_return_wrapper<void, true>::__call<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&>(ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&) /mnt/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/invoke.h:479:9\r\n    #22 0x5555910daf59 in std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'(), void ()>::operator()[abi:v15007]() /mnt/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/function.h:235:12\r\n    #23 0x5555910daf59 in void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'(), void ()>>(std::__1::__function::__policy_storage const*) /mnt/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/function.h:716:16\r\n    #24 0x55557623788f in std::__1::__function::__policy_func<void ()>::operator()[abi:v15007]() const /mnt/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/function.h:848:16\r\n    #25 0x55557623788f in std::__1::function<void ()>::operator()() const /mnt/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/function.h:1197:12\r\n    #26 0x55557623788f in ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) /mnt/ch/ClickHouse/src/Common/ThreadPool.cpp:462:13\r\n    #27 0x555576245cca in void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()::operator()() const /mnt/ch/ClickHouse/src/Common/ThreadPool.cpp:219:73\r\n    #28 0x555576245cca in decltype(std::declval<void>()()) std::__1::__invoke[abi:v15007]<void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&) /mnt/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/invoke.h:394:23\r\n    #29 0x555576245cca in void std::__1::__thread_execute[abi:v15007]<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(std::__1::tuple<void, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>&, std::__1::__tuple_indices<...>) /mnt/ch/ClickHouse/contrib/llvm-project/libcxx/include/thread:284:5\r\n    #30 0x555576245cca in void* std::__1::__thread_proxy[abi:v15007]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>>(void*) /mnt/ch/ClickHouse/contrib/llvm-project/libcxx/include/thread:295:5\r\n    #31 0x7ffff7e2adec in start_thread /usr/src/debug/glibc/glibc/nptl/pthread_create.c:447:8\r\n\r\n  Uninitialized value was stored to memory at\r\n    #0 0x55555d5f7eec in __msan_memcpy.part.0 crtstuff.c\r\n    #1 0x55558dc44594 in DB::ColumnVector<wide::integer<128ul, int>>::insert(DB::Field const&) /mnt/ch/ClickHouse/src/Columns/ColumnVector.h:238:24\r\n    #2 0x555591c6f7e7 in DB::WindowFunctionLagLeadInFrame<false>::windowInsertResultInto(DB::WindowTransform const*, unsigned long) const /mnt/ch/ClickHouse/src/Processors/Transforms/WindowTransform.cpp:2466:20\r\n    #3 0x555591c7024c in non-virtual thunk to DB::WindowFunctionLagLeadInFrame<false>::windowInsertResultInto(DB::WindowTransform const*, unsigned long) const /mnt/ch/ClickHouse/src/Processors/Transforms/WindowTransform.cpp\r\n    #4 0x555591c39ec5 in DB::WindowTransform::writeOutCurrentRow() /mnt/ch/ClickHouse/src/Processors/Transforms/WindowTransform.cpp:1072:38\r\n    #5 0x555591c39ec5 in DB::WindowTransform::appendChunk(DB::Chunk&) /mnt/ch/ClickHouse/src/Processors/Transforms/WindowTransform.cpp:1256:13\r\n    #6 0x555591c434ab in DB::WindowTransform::work() /mnt/ch/ClickHouse/src/Processors/Transforms/WindowTransform.cpp:1481:9\r\n    #7 0x5555910cd5c3 in DB::executeJob(DB::ExecutingGraph::Node*, DB::ReadProgressCallback*) /mnt/ch/ClickHouse/src/Processors/Executors/ExecutionThreadContext.cpp:47:26\r\n    #8 0x5555910cd5c3 in DB::ExecutionThreadContext::executeTask() /mnt/ch/ClickHouse/src/Processors/Executors/ExecutionThreadContext.cpp:96:9\r\n    #9 0x55559109a18b in DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*) /mnt/ch/ClickHouse/src/Processors/Executors/PipelineExecutor.cpp:273:26\r\n    #10 0x555591098118 in DB::PipelineExecutor::executeSingleThread(unsigned long) /mnt/ch/ClickHouse/src/Processors/Executors/PipelineExecutor.cpp:239:5\r\n    #11 0x555591098118 in DB::PipelineExecutor::executeImpl(unsigned long, bool) /mnt/ch/ClickHouse/src/Processors/Executors/PipelineExecutor.cpp:411:9\r\n    #12 0x555591097aed in DB::PipelineExecutor::execute(unsigned long, bool) /mnt/ch/ClickHouse/src/Processors/Executors/PipelineExecutor.cpp:111:9\r\n    #13 0x5555910daf59 in DB::threadFunction(DB::PullingAsyncPipelineExecutor::Data&, std::__1::shared_ptr<DB::ThreadGroup>, unsigned long, bool) /mnt/ch/ClickHouse/src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:83:24\r\n    #14 0x5555910daf59 in DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0::operator()() const /mnt/ch/ClickHouse/src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:109:13\r\n    #15 0x5555910daf59 in decltype(std::declval<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>()()) std::__1::__invoke[abi:v15007]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&) /mnt/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/invoke.h:394:23\r\n    #16 0x5555910daf59 in decltype(auto) std::__1::__apply_tuple_impl[abi:v15007]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::__1::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::__1::tuple<>&, std::__1::__tuple_indices<...>) /mnt/ch/ClickHouse/contrib/llvm-project/libcxx/include/tuple:1789:1\r\n    #17 0x5555910daf59 in decltype(auto) std::__1::apply[abi:v15007]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::__1::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::__1::tuple<>&) /mnt/ch/ClickHouse/contrib/llvm-project/libcxx/include/tuple:1798:1\r\n    #18 0x5555910daf59 in ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()::operator()() /mnt/ch/ClickHouse/src/Common/ThreadPool.h:251:13\r\n    #19 0x5555910daf59 in decltype(std::declval<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>()()) std::__1::__invoke[abi:v15007]<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&) /mnt/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/invoke.h:394:23\r\n    #20 0x5555910daf59 in void std::__1::__invoke_void_return_wrapper<void, true>::__call<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&>(ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&) /mnt/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/invoke.h:479:9\r\n    #21 0x5555910daf59 in std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'(), void ()>::operator()[abi:v15007]() /mnt/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/function.h:235:12\r\n    #22 0x5555910daf59 in void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'(), void ()>>(std::__1::__function::__policy_storage const*) /mnt/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/function.h:716:16\r\n    #23 0x55557623788f in std::__1::__function::__policy_func<void ()>::operator()[abi:v15007]() const /mnt/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/function.h:848:16\r\n    #24 0x55557623788f in std::__1::function<void ()>::operator()() const /mnt/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/function.h:1197:12\r\n    #25 0x55557623788f in ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) /mnt/ch/ClickHouse/src/Common/ThreadPool.cpp:462:13\r\n    #26 0x555576245cca in void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()::operator()() const /mnt/ch/ClickHouse/src/Common/ThreadPool.cpp:219:73\r\n    #27 0x555576245cca in decltype(std::declval<void>()()) std::__1::__invoke[abi:v15007]<void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&) /mnt/ch/ClickHouse/contrib/llvm-project/libcxx/include/__functional/invoke.h:394:23\r\n    #28 0x555576245cca in void std::__1::__thread_execute[abi:v15007]<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(std::__1::tuple<void, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>&, std::__1::__tuple_indices<...>) /mnt/ch/ClickHouse/contrib/llvm-project/libcxx/include/thread:284:5\r\n    #29 0x555576245cca in void* std::__1::__thread_proxy[abi:v15007]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>>(void*) /mnt/ch/ClickHouse/contrib/llvm-project/libcxx/include/thread:295:5\r\n    #30 0x7ffff7e2adec in start_thread /usr/src/debug/glibc/glibc/nptl/pthread_create.c:447:8\r\n\r\n  Uninitialized value was created by an allocation of 'ref.tmp45' in the stack frame\r\n    #0 0x555591c6f752 in DB::WindowFunctionLagLeadInFrame<false>::windowInsertResultInto(DB::WindowTransform const*, unsigned long) const /mnt/ch/ClickHouse/src/Processors/Transforms/WindowTransform.cpp:2466:27\r\n\r\nSUMMARY: MemorySanitizer: use-of-uninitialized-value /mnt/ch/ClickHouse/base/base/itoa.cpp:419:9 in char* (anonymous namespace)::writeSIntText<wide::integer<128ul, int>>(wide::integer<128ul, int>, char*)\r\n\r\n```\r\n\r\nThis looks like an issue in window functions messing up the memory that reproduced in `NativeWriter`. \noh, ok, if we instrument all libraries maybe we have a case then, will look further\r\n\nunder debug we have this exception:\r\n```\r\nubuntu@ip-172-31-42-195:~/ClickHouse-m/build_debug$ programs/clickhouse local\r\nClickHouse local version 24.8.1.1.\r\n\r\n:) SELECT lagInFrame(toUInt128(4) - 2, 2, number) OVER w FROM numbers(10) WINDOW w AS (ORDER BY number);\r\n\r\nSELECT lagInFrame(toUInt128(4) - 2, 2, number) OVER w                                                                                                                       FROM numbers(10)\r\nWINDOW w AS (ORDER BY number ASC)\r\n\r\nQuery id: 043e99f9-9552-4bc8-b67b-13f8919e4e11\r\n\r\n2024.07.25 03:48:18.528344 [ 118477 ] {043e99f9-9552-4bc8-b67b-13f8919e4e11} <Fatal> : Logical error: 'Invalid Field get from type UInt64 to type Int128'.\r\n\u2198 Progress: 10.00 rows, 80.00 B (97.66 rows/s., 781.27 B/s.)  99%\r\n2024.07.25 03:48:18.693863 [ 118477 ] {043e99f9-9552-4bc8-b67b-13f8919e4e11} <Fatal> : Stack trace (when co\r\npying this message, always include the lines below):      \r\n```                                                                                                                  \r\n<details><summary>Callstack</summary>\r\n<p>\r\n\r\n```\r\n0. /home/ubuntu/ClickHouse-m/contrib/llvm-project/libcxx/include/exception:141: Poco::Exception::Exception(String const&, int) @ 0x0000000016016412                         1. /home/ubuntu/ClickHouse-m/src/Common/Exception.cpp:110: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000c424999                         2. /home/ubuntu/ClickHouse-m/contrib/llvm-project/libcxx/include/string:1499: DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000006e2a14c                     3. /home/ubuntu/ClickHouse-m/contrib/llvm-project/libcxx/include/vector:438: DB::Exception::Exception<DB::Field::Types::Which&, DB::Field::Types::Which const&>(int, FormatStringHelperImpl<std::type_identity<DB::Field::Types::Which&>::type, std::type_identity<DB::Field::Types::Which const&>::type>, DB::Field::Types::Which&, DB::Field::Types::Which const&) @ 0x0000000006ed496b\r\n4. /home/ubuntu/ClickHouse-m/src/Core/Field.h:886: DB::ColumnVector<wide::integer<128ul, int>>::insert(DB::Field const&) @ 0x0000000011cc10fb                               5. /home/ubuntu/ClickHouse-m/src/Processors/Transforms/WindowTransform.cpp:0: DB::WindowFunctionLagLeadInFrame<false>::windowInsertResultInto(DB::WindowTransform const*, un\r\nsigned long) const @ 0x0000000012c0007d                                                                                                                                     6. /home/ubuntu/ClickHouse-m/src/Processors/Transforms/WindowTransform.cpp:1066: DB::WindowTransform::writeOutCurrentRow() @ 0x0000000012bf232c                             7. /home/ubuntu/ClickHouse-m/contrib/llvm-project/libcxx/include/atomic:958: DB::WindowTransform::appendChunk(DB::Chunk&) @ 0x0000000012bf26c3\r\n8. /home/ubuntu/ClickHouse-m/src/Processors/Transforms/WindowTransform.h:63: DB::WindowTransform::work() @ 0x0000000012bf4fc3\r\n9. /home/ubuntu/ClickHouse-m/src/Processors/Executors/ExecutionThreadContext.cpp:0: DB::ExecutionThreadContext::executeTask() @ 0x0000000012938da9\r\n10. /home/ubuntu/ClickHouse-m/src/Processors/Executors/PipelineExecutor.cpp:273: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x000000001292ea\r\n70\r\n11. /home/ubuntu/ClickHouse-m/contrib/llvm-project/libcxx/include/vector:547: DB::PipelineExecutor::executeSingleThread(unsigned long) @ 0x000000001292ecfd\r\n12. /home/ubuntu/ClickHouse-m/contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:701: DB::PipelineExecutor::executeImpl(unsigned long, bool) @ 0x000000001292db8c\r\n13. /home/ubuntu/ClickHouse-m/contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:274: DB::PipelineExecutor::execute(unsigned long, bool) @ 0x000000001292d5a5\r\n14. /home/ubuntu/ClickHouse-m/src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:0: void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__d\r\nefault_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPip\r\nelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000001293bd4a\r\n15. /home/ubuntu/ClickHouse-m/base/base/../base/wide_integer_impl.h:817: ThreadPoolImpl<std::thread>::worker(std::__list_iterator<std::thread, void*>) @ 0x000000000c4c4d36\r\n16. /home/ubuntu/ClickHouse-m/contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:302: void* std::__thread_proxy[abi:v15007]<std::tuple<std::unique_ptr<std::__thread_\r\nstruct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, boo\r\nl)::'lambda0'()>>(void*) @ 0x000000000c4c9165\r\n17. ? @ 0x00007ffff7c94ac3\r\n18. ? @ 0x00007ffff7d26850\r\n\r\n2024.07.25 03:48:18.694433 [ 118492 ] {} <Fatal> ClientBase: ########## Short fault info ############\r\n2024.07.25 03:48:18.694479 [ 118492 ] {} <Fatal> ClientBase: (version 24.8.1.1, build id: , git hash: ) (from thread 118477) Received signal 6\r\n2024.07.25 03:48:18.694495 [ 118492 ] {} <Fatal> ClientBase: Signal description: Aborted\r\n2024.07.25 03:48:18.694505 [ 118492 ] {} <Fatal> ClientBase:\r\n2024.07.25 03:48:18.694523 [ 118492 ] {} <Fatal> ClientBase: Stack trace: 0x000000000c44f208 0x000000000c676143 0x00007ffff7c42520 0x00007ffff7c969fd 0x00007ffff7c42476 0x0\r\n0007ffff7c287f3 0x000000000c424213 0x000000000c424b69 0x0000000006e2a14c 0x0000000006ed496b 0x0000000011cc10fb 0x0000000012c0007d 0x0000000012bf232c 0x0000000012bf26c3 0x00\r\n00000012bf4fc3 0x0000000012938da9 0x000000001292ea70 0x000000001292ecfd 0x000000001292db8c 0x000000001292d5a5 0x000000001293bd4a 0x000000000c4c4d36 0x000000000c4c9165 0x000\r\n07ffff7c94ac3 0x00007ffff7d26850\r\n2024.07.25 03:48:18.694551 [ 118492 ] {} <Fatal> ClientBase: ########################################\r\n2024.07.25 03:48:18.694565 [ 118492 ] {} <Fatal> ClientBase: (version 24.8.1.1, build id: , git hash: ) (from thread 118477) (query_id: 043e99f9-9552-4bc8-b67b-13f8919e4e11\r\n) (query: SELECT lagInFrame(toUInt128(4) - 2, 2, number) OVER w FROM numbers(10) WINDOW w AS (ORDER BY number);) Received signal Aborted (6)\r\n2024.07.25 03:48:18.694586 [ 118492 ] {} <Fatal> ClientBase:\r\n2024.07.25 03:48:18.694602 [ 118492 ] {} <Fatal> ClientBase: Stack trace: 0x000000000c44f208 0x000000000c676143 0x00007ffff7c42520 0x00007ffff7c969fd 0x00007ffff7c42476 0x0\r\n0007ffff7c287f3 0x000000000c424213 0x000000000c424b69 0x0000000006e2a14c 0x0000000006ed496b 0x0000000011cc10fb 0x0000000012c0007d 0x0000000012bf232c 0x0000000012bf26c3 0x00\r\n00000012bf4fc3 0x0000000012938da9 0x000000001292ea70 0x000000001292ecfd 0x000000001292db8c 0x000000001292d5a5 0x000000001293bd4a 0x000000000c4c4d36 0x000000000c4c9165 0x000\r\n07ffff7c94ac3 0x00007ffff7d26850\r\n2024.07.25 03:48:18.716077 [ 118492 ] {} <Fatal> ClientBase: 0.0. inlined from /home/ubuntu/ClickHouse-m/src/Common/StackTrace.cpp:349: StackTrace::tryCapture()\r\n2024.07.25 03:48:18.716114 [ 118492 ] {} <Fatal> ClientBase: 0. /home/ubuntu/ClickHouse-m/src/Common/StackTrace.cpp:318: StackTrace::StackTrace(ucontext_t const&) @ 0x00000\r\n0000c44f208\r\n\u2193 Progress: 10.00 rows, 80.00 B (49.35 rows/s., 394.84 B/s.)  99%2024.07.25 03:48:18.762275 [ 118492 ] {} <Fatal> ClientBase: 1. /home/ubuntu/ClickHouse-m/src/Common/Signal\r\nHandlers.cpp:0: signalHandler(int, siginfo_t*, void*) @ 0x000000000c676143\r\n2024.07.25 03:48:18.762321 [ 118492 ] {} <Fatal> ClientBase: 2. ? @ 0x00007ffff7c42520\r\n2024.07.25 03:48:18.762347 [ 118492 ] {} <Fatal> ClientBase: 3. ? @ 0x00007ffff7c969fd\r\n2024.07.25 03:48:18.762367 [ 118492 ] {} <Fatal> ClientBase: 4. ? @ 0x00007ffff7c42476\r\n2024.07.25 03:48:18.762385 [ 118492 ] {} <Fatal> ClientBase: 5. ? @ 0x00007ffff7c287f3\r\n2024.07.25 03:48:18.827196 [ 118492 ] {} <Fatal> ClientBase: 6. /home/ubuntu/ClickHouse-m/src/Common/Exception.cpp:0: DB::abortOnFailedAssertion(String const&, void* const*\r\n, unsigned long, unsigned long) @ 0x000000000c424213\r\n\u2199 Progress: 10.00 rows, 80.00 B (33.02 rows/s., 264.18 B/s.)  99%2024.07.25 03:48:18.885575 [ 118492 ] {} <Fatal> ClientBase: 7. /home/ubuntu/ClickHouse-m/src/Common/Except\r\nion.cpp:0: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000c424b69\r\n2024.07.25 03:48:18.918827 [ 118492 ] {} <Fatal> ClientBase: 8.0. inlined from /home/ubuntu/ClickHouse-m/contrib/llvm-project/libcxx/include/string:1499: String::__is_long[\r\nabi:v15007]() const\r\n2024.07.25 03:48:18.918880 [ 118492 ] {} <Fatal> ClientBase: 8.1. inlined from /home/ubuntu/ClickHouse-m/contrib/llvm-project/libcxx/include/string:2333: ~basic_string\r\n2024.07.25 03:48:18.918903 [ 118492 ] {} <Fatal> ClientBase: 8.2. inlined from /home/ubuntu/ClickHouse-m/src/Common/Exception.h:81: ~MessageMasked\r\n2024.07.25 03:48:18.918925 [ 118492 ] {} <Fatal> ClientBase: 8.3. inlined from /home/ubuntu/ClickHouse-m/src/Common/Exception.h:93: Exception\r\n2024.07.25 03:48:18.918949 [ 118492 ] {} <Fatal> ClientBase: 8. /home/ubuntu/ClickHouse-m/src/Common/Exception.h:64: DB::Exception::Exception(PreformattedMessage&&, int) @\r\n0x0000000006e2a14c\r\n\u2190 Progress: 10.00 rows, 80.00 B (24.81 rows/s., 198.49 B/s.)  99%2024.07.25 03:48:18.971906 [ 118492 ] {} <Fatal> ClientBase: 9.0. inlined from /home/ubuntu/ClickHouse-m/co\r\nntrib/llvm-project/libcxx/include/vector:438: std::vector<String, std::allocator<String>>::__destroy_vector::operator()[abi:v15007]()\r\n2024.07.25 03:48:18.971946 [ 118492 ] {} <Fatal> ClientBase: 9.1. inlined from /home/ubuntu/ClickHouse-m/contrib/llvm-project/libcxx/include/vector:449: ~vector\r\n2024.07.25 03:48:18.971964 [ 118492 ] {} <Fatal> ClientBase: 9.2. inlined from /home/ubuntu/ClickHouse-m/src/Common/LoggingFormatStringHelpers.h:45: ~PreformattedMessage\r\n2024.07.25 03:48:18.971984 [ 118492 ] {} <Fatal> ClientBase: 9. /home/ubuntu/ClickHouse-m/src/Common/Exception.h:111: DB::Exception::Exception<DB::Field::Types::Which&, DB:\r\n:Field::Types::Which const&>(int, FormatStringHelperImpl<std::type_identity<DB::Field::Types::Which&>::type, std::type_identity<DB::Field::Types::Which const&>::type>, DB::\r\nField::Types::Which&, DB::Field::Types::Which const&) @ 0x0000000006ed496b\r\n\u2197 Progress: 10.00 rows, 80.00 B (14.21 rows/s., 113.68 B/s.)  99%2024.07.25 03:48:19.239485 [ 118492 ] {} <Fatal> ClientBase: 10.0. inlined from /home/ubuntu/ClickHouse-m/s\r\nrc/Core/Field.h:886: DB::NearestFieldTypeImpl<std::decay<wide::integer<128ul, int>>::type, void>::Type& DB::Field::get<wide::integer<128ul, int>>()\r\n2024.07.25 03:48:19.239527 [ 118492 ] {} <Fatal> ClientBase: 10.1. inlined from /home/ubuntu/ClickHouse-m/src/Core/Field.h:467: auto const& DB::Field::get<wide::integer<128\r\nul, int>>() const\r\n2024.07.25 03:48:19.239545 [ 118492 ] {} <Fatal> ClientBase: 10. /home/ubuntu/ClickHouse-m/src/Columns/ColumnVector.h:238: DB::ColumnVector<wide::integer<128ul, int>>::inse\r\nrt(DB::Field const&) @ 0x0000000011cc10fb\r\n\u2198 Progress: 10.00 rows, 80.00 B (11.06 rows/s., 88.48 B/s.)  99%2024.07.25 03:48:19.477117 [ 118492 ] {} <Fatal> ClientBase: 11. /home/ubuntu/ClickHouse-m/src/Processors/Tr\r\nansforms/WindowTransform.cpp:0: DB::WindowFunctionLagLeadInFrame<false>::windowInsertResultInto(DB::WindowTransform const*, unsigned long) const @ 0x0000000012c0007d\r\n\u2193 Progress: 10.00 rows, 80.00 B (9.96 rows/s., 79.65 B/s.)  99%2024.07.25 03:48:19.606107 [ 118492 ] {} <Fatal> ClientBase: 12. /home/ubuntu/ClickHouse-m/src/Processors/Tra\r\nnsforms/WindowTransform.cpp:1066: DB::WindowTransform::writeOutCurrentRow() @ 0x0000000012bf232c\r\n\u2199 Progress: 10.00 rows, 80.00 B (9.05 rows/s., 72.43 B/s.)  99%2024.07.25 03:48:19.689758 [ 118492 ] {} <Fatal> ClientBase: 13.0. inlined from /home/ubuntu/ClickHouse-m/con\r\ntrib/llvm-project/libcxx/include/atomic:958: bool std::__cxx_atomic_load[abi:v15007]<bool>(std::__cxx_atomic_base_impl<bool> const*, std::memory_order)\r\n2024.07.25 03:48:19.689800 [ 118492 ] {} <Fatal> ClientBase: 13.1. inlined from /home/ubuntu/ClickHouse-m/contrib/llvm-project/libcxx/include/atomic:1560: std::__atomic_bas\r\ne<bool, false>::load[abi:v15007](std::memory_order) const\r\n2024.07.25 03:48:19.689821 [ 118492 ] {} <Fatal> ClientBase: 13.2. inlined from /home/ubuntu/ClickHouse-m/src/Processors/IProcessor.h:240: DB::IProcessor::isCancelled() con\r\nst\r\n2024.07.25 03:48:19.689842 [ 118492 ] {} <Fatal> ClientBase: 13. /home/ubuntu/ClickHouse-m/src/Processors/Transforms/WindowTransform.cpp:1258: DB::WindowTransform::appendCh\r\nunk(DB::Chunk&) @ 0x0000000012bf26c3\r\n\u2190 Progress: 10.00 rows, 80.00 B (8.30 rows/s., 66.40 B/s.)  99%2024.07.25 03:48:19.777222 [ 118492 ] {} <Fatal> ClientBase: 14.0. inlined from /home/ubuntu/ClickHouse-m/src\r\n/Processors/Transforms/WindowTransform.h:63: DB::RowNumber::operator<=>(DB::RowNumber const&) const\r\n2024.07.25 03:48:19.777277 [ 118492 ] {} <Fatal> ClientBase: 14. /home/ubuntu/ClickHouse-m/src/Processors/Transforms/WindowTransform.cpp:1498: DB::WindowTransform::work() @\r\n 0x0000000012bf4fc3\r\n2024.07.25 03:48:19.786698 [ 118492 ] {} <Fatal> ClientBase: 15.0. inlined from /home/ubuntu/ClickHouse-m/src/Processors/Executors/ExecutionThreadContext.cpp:0: DB::execute\r\nJob(DB::ExecutingGraph::Node*, DB::ReadProgressCallback*)\r\n2024.07.25 03:48:19.786737 [ 118492 ] {} <Fatal> ClientBase: 15. /home/ubuntu/ClickHouse-m/src/Processors/Executors/ExecutionThreadContext.cpp:96: DB::ExecutionThreadContex\r\nt::executeTask() @ 0x0000000012938da9\r\n2024.07.25 03:48:19.817745 [ 118492 ] {} <Fatal> ClientBase: 16. /home/ubuntu/ClickHouse-m/src/Processors/Executors/PipelineExecutor.cpp:273: DB::PipelineExecutor::executeS\r\ntepImpl(unsigned long, std::atomic<bool>*) @ 0x000000001292ea70\r\n\u2196 Progress: 10.00 rows, 80.00 B (7.66 rows/s., 61.30 B/s.)  99%2024.07.25 03:48:19.846885 [ 118492 ] {} <Fatal> ClientBase: 17.0. inlined from /home/ubuntu/ClickHouse-m/con\r\ntrib/llvm-project/libcxx/include/vector:547: std::vector<std::unique_ptr<DB::ExecutionThreadContext, std::default_delete<DB::ExecutionThreadContext>>, std::allocator<std::u\r\nnique_ptr<DB::ExecutionThreadContext, std::default_delete<DB::ExecutionThreadContext>>>>::size[abi:v15007]() const\r\n2024.07.25 03:48:19.846927 [ 118492 ] {} <Fatal> ClientBase: 17.1. inlined from /home/ubuntu/ClickHouse-m/contrib/llvm-project/libcxx/include/vector:1490: std::vector<std::\r\nunique_ptr<DB::ExecutionThreadContext, std::default_delete<DB::ExecutionThreadContext>>, std::allocator<std::unique_ptr<DB::ExecutionThreadContext, std::default_delete<DB::\r\nExecutionThreadContext>>>>::operator[][abi:v15007](unsigned long)\r\n2024.07.25 03:48:19.846949 [ 118492 ] {} <Fatal> ClientBase: 17.2. inlined from /home/ubuntu/ClickHouse-m/src/Processors/Executors/ExecutorTasks.h:70: DB::ExecutorTasks::ge\r\ntThreadContext(unsigned long)\r\n2024.07.25 03:48:19.846969 [ 118492 ] {} <Fatal> ClientBase: 17. /home/ubuntu/ClickHouse-m/src/Processors/Executors/PipelineExecutor.cpp:242: DB::PipelineExecutor::executeS\r\ningleThread(unsigned long) @ 0x000000001292ecfd\r\n2024.07.25 03:48:19.871949 [ 118492 ] {} <Fatal> ClientBase: 18.0. inlined from /home/ubuntu/ClickHouse-m/contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:701: ~sh\r\nared_ptr\r\n2024.07.25 03:48:19.871987 [ 118492 ] {} <Fatal> ClientBase: 18. /home/ubuntu/ClickHouse-m/src/Processors/Executors/PipelineExecutor.cpp:412: DB::PipelineExecutor::executeI\r\nmpl(unsigned long, bool) @ 0x000000001292db8c\r\n2024.07.25 03:48:19.899432 [ 118492 ] {} <Fatal> ClientBase: 19.0. inlined from /home/ubuntu/ClickHouse-m/contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:274: std\r\n::unique_ptr<DB::ExecutingGraph, std::default_delete<DB::ExecutingGraph>>::operator->[abi:v15007]() const\r\n2024.07.25 03:48:19.899471 [ 118492 ] {} <Fatal> ClientBase: 19. /home/ubuntu/ClickHouse-m/src/Processors/Executors/PipelineExecutor.cpp:114: DB::PipelineExecutor::execute(\r\nunsigned long, bool) @ 0x000000001292d5a5\r\n2024.07.25 03:48:19.925637 [ 118492 ] {} <Fatal> ClientBase: 20.0. inlined from /home/ubuntu/ClickHouse-m/src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:0: DB::t\r\nhreadFunction(DB::PullingAsyncPipelineExecutor::Data&, std::shared_ptr<DB::ThreadGroup>, unsigned long, bool)\r\n2024.07.25 03:48:19.925674 [ 118492 ] {} <Fatal> ClientBase: 20.1. inlined from /home/ubuntu/ClickHouse-m/src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:109: ope\r\nrator()\r\n2024.07.25 03:48:19.925693 [ 118492 ] {} <Fatal> ClientBase: 20.2. inlined from /home/ubuntu/ClickHouse-m/contrib/llvm-project/libcxx/include/__functional/invoke.h:394: ?\r\n2024.07.25 03:48:19.925711 [ 118492 ] {} <Fatal> ClientBase: 20.3. inlined from /home/ubuntu/ClickHouse-m/contrib/llvm-project/libcxx/include/tuple:1789: _ZNSt3__118__apply\r\n_tuple_implB6v15007IRZN2DB28PullingAsyncPipelineExecutor4pullERNS1_5ChunkEmE3$_0RNS_5tupleIJEEETpTnmJEEEDcOT_OT0_NS_15__tuple_indicesIJXspT1_EEEE\r\n2024.07.25 03:48:19.925733 [ 118492 ] {} <Fatal> ClientBase: 20.4. inlined from /home/ubuntu/ClickHouse-m/contrib/llvm-project/libcxx/include/tuple:1798: decltype(auto) std\r\n::apply[abi:v15007]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long\r\n)::$_0&, std::tuple<>&)\r\n2024.07.25 03:48:19.925750 [ 118492 ] {} <Fatal> ClientBase: 20.5. inlined from /home/ubuntu/ClickHouse-m/src/Common/ThreadPool.h:251: operator()\r\n2024.07.25 03:48:19.925764 [ 118492 ] {} <Fatal> ClientBase: 20.6. inlined from /home/ubuntu/ClickHouse-m/contrib/llvm-project/libcxx/include/__functional/invoke.h:394: ?\r\n2024.07.25 03:48:19.925779 [ 118492 ] {} <Fatal> ClientBase: 20.7. inlined from /home/ubuntu/ClickHouse-m/contrib/llvm-project/libcxx/include/__functional/invoke.h:479: ?\r\n2024.07.25 03:48:19.925794 [ 118492 ] {} <Fatal> ClientBase: 20.8. inlined from /home/ubuntu/ClickHouse-m/contrib/llvm-project/libcxx/include/__functional/function.h:235: ?\r\n2024.07.25 03:48:19.925808 [ 118492 ] {} <Fatal> ClientBase: 20. /home/ubuntu/ClickHouse-m/contrib/llvm-project/libcxx/include/__functional/function.h:716: ? @ 0x0000000012\r\n93bd4a\r\n\u2191 Progress: 10.00 rows, 80.00 B (7.12 rows/s., 56.93 B/s.)  99%2024.07.25 03:48:19.947120 [ 118492 ] {} <Fatal> ClientBase: 21.0. inlined from /home/ubuntu/ClickHouse-m/bas\r\ne/base/../base/wide_integer_impl.h:817: bool wide::integer<128ul, unsigned int>::_impl::operator_eq<wide::integer<128ul, unsigned int>>(wide::integer<128ul, unsigned int> c\r\nonst&, wide::integer<128ul, unsigned int> const&)\r\n2024.07.25 03:48:19.947162 [ 118492 ] {} <Fatal> ClientBase: 21.1. inlined from /home/ubuntu/ClickHouse-m/base/base/../base/wide_integer_impl.h:1491: bool wide::operator==<\r\n128ul, unsigned int, 128ul, unsigned int>(wide::integer<128ul, unsigned int> const&, wide::integer<128ul, unsigned int> const&)\r\n2024.07.25 03:48:19.947184 [ 118492 ] {} <Fatal> ClientBase: 21.2. inlined from /home/ubuntu/ClickHouse-m/base/base/../base/strong_typedef.h:42: StrongTypedef<wide::integer\r\n<128ul, unsigned int>, DB::UUIDTag>::operator==(StrongTypedef<wide::integer<128ul, unsigned int>, DB::UUIDTag> const&) const\r\n2024.07.25 03:48:19.947203 [ 118492 ] {} <Fatal> ClientBase: 21.3. inlined from /home/ubuntu/ClickHouse-m/src/Common/OpenTelemetryTraceContext.h:65: DB::OpenTelemetry::Span\r\n::isTraceEnabled() const\r\n2024.07.25 03:48:19.947220 [ 118492 ] {} <Fatal> ClientBase: 21. /home/ubuntu/ClickHouse-m/src/Common/ThreadPool.cpp:464: ThreadPoolImpl<std::thread>::worker(std::__list_it\r\nerator<std::thread, void*>) @ 0x000000000c4c4d36\r\n2024.07.25 03:48:19.982257 [ 118492 ] {} <Fatal> ClientBase: 22.0. inlined from /home/ubuntu/ClickHouse-m/contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:302: std\r\n::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function\r\n<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>, std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thre\r\nad_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>>>::reset[abi:v15007](s\r\ntd::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Pri\r\nority, std::optional<unsigned long>, bool)::'lambda0'()>*)\r\n2024.07.25 03:48:19.982299 [ 118492 ] {} <Fatal> ClientBase: 22.1. inlined from /home/ubuntu/ClickHouse-m/contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:259: ~un\r\nique_ptr\r\n2024.07.25 03:48:19.982321 [ 118492 ] {} <Fatal> ClientBase: 22. /home/ubuntu/ClickHouse-m/contrib/llvm-project/libcxx/include/thread:297: void* std::__thread_proxy[abi:v15\r\n007]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()\r\n>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>>(void*) @ 0x000000000c4c9165\r\n2024.07.25 03:48:19.982346 [ 118492 ] {} <Fatal> ClientBase: 23. ? @ 0x00007ffff7c94ac3\r\n2024.07.25 03:48:19.982365 [ 118492 ] {} <Fatal> ClientBase: 24. ? @ 0x00007ffff7d26850\r\n2024.07.25 03:48:19.982385 [ 118492 ] {} <Fatal> ClientBase: This ClickHouse version is not official and should be upgraded to the official build.\r\n2024.07.25 03:48:19.982552 [ 118492 ] {} <Fatal> ClientBase: Changed settings: allow_introspection_functions = true, storage_file_read_method = 'mmap'\r\n\u2199 Progress: 10.00 rows, 80.00 B (1.96 rows/s., 15.65 B/s.)  99%Aborted (core dumped)\r\n```\r\n\r\n</p>\r\n</details> \r\n\r\nwhich is produced by this code in `#ifndef NDEBUG` block:\r\nhttps://github.com/ClickHouse/ClickHouse/blob/master/src/Core/Field.h#L884-L887\r\n\r\nsince DB::Field is a union it's a type punning UB to access data as a different type - which I guess msan detects in release build.\r\n",
  "created_at": "2024-07-25T06:45:15Z"
}