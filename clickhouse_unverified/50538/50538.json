{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 50538,
  "instance_id": "ClickHouse__ClickHouse-50538",
  "issue_numbers": [
    "50537"
  ],
  "base_commit": "e548e4b38c643e52a18f2be6d44ec03f638ac078",
  "patch": "diff --git a/src/Storages/StorageGenerateRandom.cpp b/src/Storages/StorageGenerateRandom.cpp\nindex e48d3187cb29..293beca9c24d 100644\n--- a/src/Storages/StorageGenerateRandom.cpp\n+++ b/src/Storages/StorageGenerateRandom.cpp\n@@ -29,6 +29,7 @@\n \n #include <Common/SipHash.h>\n #include <Common/randomSeed.h>\n+#include <Interpreters/Context.h>\n #include <base/unaligned.h>\n \n #include <Functions/FunctionFactory.h>\n@@ -81,6 +82,66 @@ void fillBufferWithRandomData(char * __restrict data, size_t limit, size_t size_\n }\n \n \n+size_t estimateValueSize(\n+    const DataTypePtr type,\n+    UInt64 max_array_length,\n+    UInt64 max_string_length)\n+{\n+    if (type->haveMaximumSizeOfValue())\n+        return type->getMaximumSizeOfValueInMemory();\n+\n+    TypeIndex idx = type->getTypeId();\n+\n+    switch (idx)\n+    {\n+        case TypeIndex::String:\n+        {\n+            return max_string_length + sizeof(size_t) + 1;\n+        }\n+\n+        /// The logic in this function should reflect the logic of fillColumnWithRandomData.\n+        case TypeIndex::Array:\n+        {\n+            auto nested_type = typeid_cast<const DataTypeArray &>(*type).getNestedType();\n+            return sizeof(size_t) + estimateValueSize(nested_type, max_array_length / 2, max_string_length);\n+        }\n+\n+        case TypeIndex::Map:\n+        {\n+            const DataTypePtr & nested_type = typeid_cast<const DataTypeMap &>(*type).getNestedType();\n+            return sizeof(size_t) + estimateValueSize(nested_type, max_array_length / 2, max_string_length);\n+        }\n+\n+        case TypeIndex::Tuple:\n+        {\n+            auto elements = typeid_cast<const DataTypeTuple *>(type.get())->getElements();\n+            const size_t tuple_size = elements.size();\n+            size_t res = 0;\n+\n+            for (size_t i = 0; i < tuple_size; ++i)\n+                res += estimateValueSize(elements[i], max_array_length, max_string_length);\n+\n+            return res;\n+        }\n+\n+        case TypeIndex::Nullable:\n+        {\n+            auto nested_type = typeid_cast<const DataTypeNullable &>(*type).getNestedType();\n+            return 1 + estimateValueSize(nested_type, max_array_length, max_string_length);\n+        }\n+\n+        case TypeIndex::LowCardinality:\n+        {\n+            auto nested_type = typeid_cast<const DataTypeLowCardinality &>(*type).getDictionaryType();\n+            return sizeof(size_t) + estimateValueSize(nested_type, max_array_length, max_string_length);\n+        }\n+\n+        default:\n+            throw Exception(ErrorCodes::NOT_IMPLEMENTED, \"The 'GenerateRandom' is not implemented for type {}\", type->getName());\n+    }\n+}\n+\n+\n ColumnPtr fillColumnWithRandomData(\n     const DataTypePtr type,\n     UInt64 limit,\n@@ -192,7 +253,8 @@ ColumnPtr fillColumnWithRandomData(\n                 offsets[i] = offset;\n             }\n \n-            auto data_column = fillColumnWithRandomData(nested_type, offset, max_array_length, max_string_length, rng, context);\n+            /// This division by two makes the size growth subexponential on depth.\n+            auto data_column = fillColumnWithRandomData(nested_type, offset, max_array_length / 2, max_string_length, rng, context);\n \n             return ColumnArray::create(data_column, std::move(offsets_column));\n         }\n@@ -200,7 +262,7 @@ ColumnPtr fillColumnWithRandomData(\n         case TypeIndex::Map:\n         {\n             const DataTypePtr & nested_type = typeid_cast<const DataTypeMap &>(*type).getNestedType();\n-            auto nested_column = fillColumnWithRandomData(nested_type, limit, max_array_length, max_string_length, rng, context);\n+            auto nested_column = fillColumnWithRandomData(nested_type, limit, max_array_length / 2, max_string_length, rng, context);\n             return ColumnMap::create(nested_column);\n         }\n \n@@ -597,6 +659,25 @@ Pipe StorageGenerateRandom::read(\n         block_header.insert({std::move(column), name_type.type, name_type.name});\n     }\n \n+    /// Correction of block size for wide tables.\n+    size_t preferred_block_size_bytes = context->getSettingsRef().preferred_block_size_bytes;\n+    if (preferred_block_size_bytes)\n+    {\n+        size_t estimated_row_size_bytes = estimateValueSize(std::make_shared<DataTypeTuple>(block_header.getDataTypes()), max_array_length, max_string_length);\n+\n+        size_t estimated_block_size_bytes = 0;\n+        if (common::mulOverflow(max_block_size, estimated_row_size_bytes, estimated_block_size_bytes))\n+            throw Exception(ErrorCodes::TOO_LARGE_ARRAY_SIZE, \"Too large estimated block size in GenerateRandom table: its estimation leads to 64bit overflow\");\n+        chassert(estimated_block_size_bytes != 0);\n+\n+        if (estimated_block_size_bytes > preferred_block_size_bytes)\n+        {\n+            max_block_size = static_cast<size_t>(max_block_size * (static_cast<double>(preferred_block_size_bytes) / estimated_block_size_bytes));\n+            if (max_block_size == 0)\n+                max_block_size = 1;\n+        }\n+    }\n+\n     /// Will create more seed values for each source from initial seed.\n     pcg64 generate(random_seed);\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00416_pocopatch_progress_in_http_headers.sh b/tests/queries/0_stateless/00416_pocopatch_progress_in_http_headers.sh\nindex 6e9814cbca8c..b2189ab0cc2a 100755\n--- a/tests/queries/0_stateless/00416_pocopatch_progress_in_http_headers.sh\n+++ b/tests/queries/0_stateless/00416_pocopatch_progress_in_http_headers.sh\n@@ -5,7 +5,6 @@ CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n . \"$CURDIR\"/../shell_config.sh\n \n ${CLICKHOUSE_CURL} -vsS \"${CLICKHOUSE_URL}&max_block_size=5&send_progress_in_http_headers=1&http_headers_progress_interval_ms=0\" -d 'SELECT max(number) FROM numbers(10)' 2>&1 | grep -E 'Content-Encoding|X-ClickHouse-Progress|^[0-9]'\n-# This test will fail with external poco (progress not supported)\n \n ${CLICKHOUSE_CURL} -vsS \"${CLICKHOUSE_URL}&max_block_size=1&send_progress_in_http_headers=1&http_headers_progress_interval_ms=0&output_format_parallel_formatting=0\" -d 'SELECT number FROM numbers(10)' 2>&1 | grep -E 'Content-Encoding|X-ClickHouse-Progress|^[0-9]'\n ${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}&max_block_size=1&send_progress_in_http_headers=1&http_headers_progress_interval_ms=0&enable_http_compression=1\" -H 'Accept-Encoding: gzip' -d 'SELECT number FROM system.numbers LIMIT 10' | gzip -d\ndiff --git a/tests/queries/0_stateless/02539_generate_random_map.reference b/tests/queries/0_stateless/02539_generate_random_map.reference\nindex c0dc175c3cd0..25e7f55667e0 100644\n--- a/tests/queries/0_stateless/02539_generate_random_map.reference\n+++ b/tests/queries/0_stateless/02539_generate_random_map.reference\n@@ -1,2 +1,2 @@\n-1\n-20\n+0\n+10\ndiff --git a/tests/queries/0_stateless/02586_generate_random_structure.reference b/tests/queries/0_stateless/02586_generate_random_structure.reference\nindex d2929fb4564a..abe168c59e89 100644\n--- a/tests/queries/0_stateless/02586_generate_random_structure.reference\n+++ b/tests/queries/0_stateless/02586_generate_random_structure.reference\n@@ -13,7 +13,7 @@ c3.e6\tArray(Int256)\n c4\tFixedString(183)\t\t\t\t\t\n c5\tIPv4\t\t\t\t\t\n c6\tUInt256\t\t\t\t\t\n-Tb\ufffd#yV\ufffd\ufffd[>\ufffdM\ufffd\ufffd*\u0728\u0016\ufffd\ufffd(\ufffdO\u001a\u0001\ufffdR8V1n\ufffd\ufffd\ufffd)\ufffd\u0004\ufffd\ufffdH\ufffd}C\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\\'\ufffd\ufffd\ufffd\ufffdI7\ufffd\u000et\ufffd\u0006\ufffd\ufffdqn\ufffdV)\u4cc6\ufffd\u000f\ufffdqL\ufffd\ufffdP\ufffdo\ufffdR\ufffd\u000eg<\ufffd{\ufffd\ufffd\ufffd\u00123\ufffdi\ufffd\ufffd\ufffd\ufffdH_\u0006m\u0016\ufffd\u001b\ufffd\u001f!q\ufffd\ufffd\ufffd\\'G\ufffd\ufffd\ufffd\t127.48.9.45\t['e1V10','e1V0','e1V10','e1V14','e1V10','e1V14']\t[{-13:777622572,102:-1122882357,62:1647813163,-94:2094022166},{-32:1448633509},{},{},{34:1536340393,19:-2049677851,74:65643868,-46:-1990799930,97:-531041081,46:-2634833,14:1581632600,89:-771229823,-105:1238603584},{47:1458809010,109:1640682510,86:1945730198,85:1505847247,35:-35189402}]\t[153363749503.3642648494826450951141750747382772821825909005880434540971999557,79828591186.7378041015337066268618633118713347614941338787453473118807106292,81672688565.9633830721322966111551266731935181670389237071708068971548883315,573768486971.1812413548839655834002608768736215115033958693122764224003897029,-393925092368.4893467278351090742501814120269109477445490969167853713051140487,46027399426.0865278566391382610843315130162915324295037009704113636499519839]\t[755855942,1804001770,-78103159,-866181765,731736602,-79599206]\t[5253556148991564114,4681434929596395351,-7302160004580855709,-3686747220178471318,6288582051009949273,646864891160092871]\t[17035203905051045016266537043565487029724162173062647021612805252288722534904,-42105881403933504641593145676742477006499618886131028341247993701618141933523,45346626822580305846120377917274679004279343244238782744860626882886217433843,-3660165069803677989574889324494857545543653453780976182221584349306428201647,-23316760935816288837287058499520670431785615691220162210524162590241529297823,6184785563808848524970564618169964412151721224362412457508264894603779018817]\t\ufffd\u06a1|\ufffdA\"\ufffdx\ufffd\ufffd\ufffd>\ufffd\u001b\ufffd\ufffd\ufffdr\ufffdwz\u0007\u0007\ufffd\u001a\u007f\u0001Z\ufffd:\u001d\ufffd\u0019\ufffdj\ufffd8tZ\ufffd\ufffdD\"\u0004Tu\ufffd\ufffd2h\ufffd!\ufffd\ufffd\ufffdW\ufffdI\ufffd\ufffdy\ufffd\u0004\ufffdtP\ufffd\ufffda|\ufffd\\'\ufffdy\ue950\ufffd\ufffdo\ufffd\ufffd\ufffd\u0017\ufffd\ufffd\u0001f\ufffdF\ufffdO\\0\ufffd\ufffd\u05566\\fIr\ufffdE\ufffd\u001dSac\ufffdW<~\ufffde\u0001 \ufffdl\ufffd\ufffdT\u0017>P3})\ufffd\ufffdw%\u0001\ufffd\u00194@_2\ufffd\u007fN\"\u0406Xp$^\u0498\ufffd\ufffd\ufffd\u0370\\04\ufffd@\ufffd\ufffd\u0019n\\b\ufffd\u0005\u000e\ufffd\ufffd\\r\ufffd4\ufffdH\ufffd\t16.177.117.209\t7882774382721411359365561736453116698030365959050344381263687375357052837130\n-Tb\ufffd#yV\ufffd\ufffd[>\ufffdM\ufffd\ufffd*\u0728\u0016\ufffd\ufffd(\ufffdO\u001a\u0001\ufffdR8V1n\ufffd\ufffd\ufffd)\ufffd\u0004\ufffd\ufffdH\ufffd}C\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\\'\ufffd\ufffd\ufffd\ufffdI7\ufffd\u000et\ufffd\u0006\ufffd\ufffdqn\ufffdV)\u4cc6\ufffd\u000f\ufffdqL\ufffd\ufffdP\ufffdo\ufffdR\ufffd\u000eg<\ufffd{\ufffd\ufffd\ufffd\u00123\ufffdi\ufffd\ufffd\ufffd\ufffdH_\u0006m\u0016\ufffd\u001b\ufffd\u001f!q\ufffd\ufffd\ufffd\\'G\ufffd\ufffd\ufffd\t127.48.9.45\t['e1V10','e1V0','e1V10','e1V14','e1V10','e1V14']\t[{-13:777622572,102:-1122882357,62:1647813163,-94:2094022166},{-32:1448633509},{},{},{34:1536340393,19:-2049677851,74:65643868,-46:-1990799930,97:-531041081,46:-2634833,14:1581632600,89:-771229823,-105:1238603584},{47:1458809010,109:1640682510,86:1945730198,85:1505847247,35:-35189402}]\t[153363749503.3642648494826450951141750747382772821825909005880434540971999557,79828591186.7378041015337066268618633118713347614941338787453473118807106292,81672688565.9633830721322966111551266731935181670389237071708068971548883315,573768486971.1812413548839655834002608768736215115033958693122764224003897029,-393925092368.4893467278351090742501814120269109477445490969167853713051140487,46027399426.0865278566391382610843315130162915324295037009704113636499519839]\t[755855942,1804001770,-78103159,-866181765,731736602,-79599206]\t[5253556148991564114,4681434929596395351,-7302160004580855709,-3686747220178471318,6288582051009949273,646864891160092871]\t[17035203905051045016266537043565487029724162173062647021612805252288722534904,-42105881403933504641593145676742477006499618886131028341247993701618141933523,45346626822580305846120377917274679004279343244238782744860626882886217433843,-3660165069803677989574889324494857545543653453780976182221584349306428201647,-23316760935816288837287058499520670431785615691220162210524162590241529297823,6184785563808848524970564618169964412151721224362412457508264894603779018817]\t\ufffd\u06a1|\ufffdA\"\ufffdx\ufffd\ufffd\ufffd>\ufffd\u001b\ufffd\ufffd\ufffdr\ufffdwz\u0007\u0007\ufffd\u001a\u007f\u0001Z\ufffd:\u001d\ufffd\u0019\ufffdj\ufffd8tZ\ufffd\ufffdD\"\u0004Tu\ufffd\ufffd2h\ufffd!\ufffd\ufffd\ufffdW\ufffdI\ufffd\ufffdy\ufffd\u0004\ufffdtP\ufffd\ufffda|\ufffd\\'\ufffdy\ue950\ufffd\ufffdo\ufffd\ufffd\ufffd\u0017\ufffd\ufffd\u0001f\ufffdF\ufffdO\\0\ufffd\ufffd\u05566\\fIr\ufffdE\ufffd\u001dSac\ufffdW<~\ufffde\u0001 \ufffdl\ufffd\ufffdT\u0017>P3})\ufffd\ufffdw%\u0001\ufffd\u00194@_2\ufffd\u007fN\"\u0406Xp$^\u0498\ufffd\ufffd\ufffd\u0370\\04\ufffd@\ufffd\ufffd\u0019n\\b\ufffd\u0005\u000e\ufffd\ufffd\\r\ufffd4\ufffdH\ufffd\t16.177.117.209\t7882774382721411359365561736453116698030365959050344381263687375357052837130\n+Tb\ufffd#yV\ufffd\ufffd[>\ufffdM\ufffd\ufffd*\u0728\u0016\ufffd\ufffd(\ufffdO\u001a\u0001\ufffdR8V1n\ufffd\ufffd\ufffd)\ufffd\u0004\ufffd\ufffdH\ufffd}C\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\\'\ufffd\ufffd\ufffd\ufffdI7\ufffd\u000et\ufffd\u0006\ufffd\ufffdqn\ufffdV)\u4cc6\ufffd\u000f\ufffdqL\ufffd\ufffdP\ufffdo\ufffdR\ufffd\u000eg<\ufffd{\ufffd\ufffd\ufffd\u00123\ufffdi\ufffd\ufffd\ufffd\ufffdH_\u0006m\u0016\ufffd\u001b\ufffd\u001f!q\ufffd\ufffd\ufffd\\'G\ufffd\ufffd\ufffd\t127.48.9.45\t['e1V10','e1V0','e1V10','e1V14','e1V10','e1V14']\t[{-13:237920722},{102:1831835481},{},{},{62:-1960618666,-94:-1219892650},{-32:777622572}]\t[-431683920736.2529974565693898437068698973660186760023819586689844248966618581,59756148020.9162673945900094878560562068677573399624031604279613893604002735,586508082308.9120376291637372686770291666437007489038136467093669000000245094,-542964250950.8072472621084212227729061994250148872708538789242780170470779236,102348230986.0528243362965635624540408239649901816289081513971979913007157412,856260707339.0308016734722383288485766011293159337170215574648625303012038641]\t[700742145,583743175,-694731143,205377506,-47073316,524775483]\t[-1523104801326101990,-3813742700509249040,-198797568561120929,1360848130483946585,-2034445041726915230,6445693522245970031]\t[-42294009754395695750286152418877456026522055877244789929409825751148328749462,-30114637036117781224059264373564439361653611308928312514969460679379590706382,50790691897328530213645537587874962516097580703236937570724165115560305762147,-53982023979693597997184389721196431225054557132927198244547868871851761566844,-4746897427675718862552189488292169089453556841811840545196357111533622948298,-12014200750706123405006110782843469166121588186681927916239818910819762049960]\t\ufffd\u06a1|\ufffdA\"\ufffdx\ufffd\ufffd\ufffd>\ufffd\u001b\ufffd\ufffd\ufffdr\ufffdwz\u0007\u0007\ufffd\u001a\u007f\u0001Z\ufffd:\u001d\ufffd\u0019\ufffdj\ufffd8tZ\ufffd\ufffdD\"\u0004Tu\ufffd\ufffd2h\ufffd!\ufffd\ufffd\ufffdW\ufffdI\ufffd\ufffdy\ufffd\u0004\ufffdtP\ufffd\ufffda|\ufffd\\'\ufffdy\ue950\ufffd\ufffdo\ufffd\ufffd\ufffd\u0017\ufffd\ufffd\u0001f\ufffdF\ufffdO\\0\ufffd\ufffd\u05566\\fIr\ufffdE\ufffd\u001dSac\ufffdW<~\ufffde\u0001 \ufffdl\ufffd\ufffdT\u0017>P3})\ufffd\ufffdw%\u0001\ufffd\u00194@_2\ufffd\u007fN\"\u0406Xp$^\u0498\ufffd\ufffd\ufffd\u0370\\04\ufffd@\ufffd\ufffd\u0019n\\b\ufffd\u0005\u000e\ufffd\ufffd\\r\ufffd4\ufffdH\ufffd\t16.177.117.209\t7882774382721411359365561736453116698030365959050344381263687375357052837130\n+Tb\ufffd#yV\ufffd\ufffd[>\ufffdM\ufffd\ufffd*\u0728\u0016\ufffd\ufffd(\ufffdO\u001a\u0001\ufffdR8V1n\ufffd\ufffd\ufffd)\ufffd\u0004\ufffd\ufffdH\ufffd}C\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\\'\ufffd\ufffd\ufffd\ufffdI7\ufffd\u000et\ufffd\u0006\ufffd\ufffdqn\ufffdV)\u4cc6\ufffd\u000f\ufffdqL\ufffd\ufffdP\ufffdo\ufffdR\ufffd\u000eg<\ufffd{\ufffd\ufffd\ufffd\u00123\ufffdi\ufffd\ufffd\ufffd\ufffdH_\u0006m\u0016\ufffd\u001b\ufffd\u001f!q\ufffd\ufffd\ufffd\\'G\ufffd\ufffd\ufffd\t127.48.9.45\t['e1V10','e1V0','e1V10','e1V14','e1V10','e1V14']\t[{-13:237920722},{102:1831835481},{},{},{62:-1960618666,-94:-1219892650},{-32:777622572}]\t[-431683920736.2529974565693898437068698973660186760023819586689844248966618581,59756148020.9162673945900094878560562068677573399624031604279613893604002735,586508082308.9120376291637372686770291666437007489038136467093669000000245094,-542964250950.8072472621084212227729061994250148872708538789242780170470779236,102348230986.0528243362965635624540408239649901816289081513971979913007157412,856260707339.0308016734722383288485766011293159337170215574648625303012038641]\t[700742145,583743175,-694731143,205377506,-47073316,524775483]\t[-1523104801326101990,-3813742700509249040,-198797568561120929,1360848130483946585,-2034445041726915230,6445693522245970031]\t[-42294009754395695750286152418877456026522055877244789929409825751148328749462,-30114637036117781224059264373564439361653611308928312514969460679379590706382,50790691897328530213645537587874962516097580703236937570724165115560305762147,-53982023979693597997184389721196431225054557132927198244547868871851761566844,-4746897427675718862552189488292169089453556841811840545196357111533622948298,-12014200750706123405006110782843469166121588186681927916239818910819762049960]\t\ufffd\u06a1|\ufffdA\"\ufffdx\ufffd\ufffd\ufffd>\ufffd\u001b\ufffd\ufffd\ufffdr\ufffdwz\u0007\u0007\ufffd\u001a\u007f\u0001Z\ufffd:\u001d\ufffd\u0019\ufffdj\ufffd8tZ\ufffd\ufffdD\"\u0004Tu\ufffd\ufffd2h\ufffd!\ufffd\ufffd\ufffdW\ufffdI\ufffd\ufffdy\ufffd\u0004\ufffdtP\ufffd\ufffda|\ufffd\\'\ufffdy\ue950\ufffd\ufffdo\ufffd\ufffd\ufffd\u0017\ufffd\ufffd\u0001f\ufffdF\ufffdO\\0\ufffd\ufffd\u05566\\fIr\ufffdE\ufffd\u001dSac\ufffdW<~\ufffde\u0001 \ufffdl\ufffd\ufffdT\u0017>P3})\ufffd\ufffdw%\u0001\ufffd\u00194@_2\ufffd\u007fN\"\u0406Xp$^\u0498\ufffd\ufffd\ufffd\u0370\\04\ufffd@\ufffd\ufffd\u0019n\\b\ufffd\u0005\u000e\ufffd\ufffd\\r\ufffd4\ufffdH\ufffd\t16.177.117.209\t7882774382721411359365561736453116698030365959050344381263687375357052837130\n Tb\ufffd#yV\ufffd\ufffd[>\ufffdM\ufffd\ufffd*\u0728\u0016\ufffd\ufffd(\ufffdO\u001a\u0001\ufffdR8V1n\ufffd\ufffd\ufffd)\ufffd\u0004\ufffd\ufffdH\ufffd}C\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\\'\ufffd\ufffd\ufffd\ufffdI7\ufffd\u000et\ufffd\u0006\ufffd\ufffdqn\ufffdV)\u4cc6\ufffd\u000f\ufffdqL\ufffd\ufffdP\ufffdo\ufffdR\ufffd\u000eg<\ufffd{\ufffd\ufffd\ufffd\u00123\ufffdi\ufffd\ufffd\ufffd\ufffdH_\u0006m\u0016\ufffd\u001b\ufffd\u001f!q\ufffd\ufffd\ufffd\\'G\ufffd\ufffd\ufffd\t127.48.9.45\t['e1V10']\t[{}]\t[825002272867.1157788721157301271303736024856710948164507982705676578804195475]\t[1865150610]\t[7514464811443271056]\t[33504961604882608369857530219353040639899064613284394558131808339620328539033]\t\ufffd\u06a1|\ufffdA\"\ufffdx\ufffd\ufffd\ufffd>\ufffd\u001b\ufffd\ufffd\ufffdr\ufffdwz\u0007\u0007\ufffd\u001a\u007f\u0001Z\ufffd:\u001d\ufffd\u0019\ufffdj\ufffd8tZ\ufffd\ufffdD\"\u0004Tu\ufffd\ufffd2h\ufffd!\ufffd\ufffd\ufffdW\ufffdI\ufffd\ufffdy\ufffd\u0004\ufffdtP\ufffd\ufffda|\ufffd\\'\ufffdy\ue950\ufffd\ufffdo\ufffd\ufffd\ufffd\u0017\ufffd\ufffd\u0001f\ufffdF\ufffdO\\0\ufffd\ufffd\u05566\\fIr\ufffdE\ufffd\u001dSac\ufffdW<~\ufffde\u0001 \ufffdl\ufffd\ufffdT\u0017>P3})\ufffd\ufffdw%\u0001\ufffd\u00194@_2\ufffd\u007fN\"\u0406Xp$^\u0498\ufffd\ufffd\ufffd\u0370\\04\ufffd@\ufffd\ufffd\u0019n\\b\ufffd\u0005\u000e\ufffd\ufffd\\r\ufffd4\ufffdH\ufffd\t16.177.117.209\t7882774382721411359365561736453116698030365959050344381263687375357052837130\n c1 LowCardinality(Nullable(UInt64)), c2 Date32, c3 LowCardinality(Nullable(Float64)), c4 Int256, c5 Date32\n",
  "problem_statement": "A query consumes a lot of RAM sometimes.\n**How to reproduce**\r\n```\r\nSELECT timestamp_diff(( SELECT * FROM generateRandom() ) AS vx, ( SELECT * FROM hudi(['\\0']) ) , (CAST((NULL) AS DateTime)));\r\n```\r\n\r\nRun several times.\r\n\n",
  "hints_text": "```\r\nSELECT (SELECT * FROM generateRandom())\r\n```\r\n\r\nconsumes a lot of RAM.\nSometimes it happens even with `SET max_block_size = 1024` due to deeply nested arrays:\r\n\r\n```\r\n2023.06.04 04:09:44.365016 [ 1327356 ] {44bc3b46-9dd9-4621-bf85-041bf0e8579c} <Error> TCPHandler: Code: 241. DB::Exception: Memory limit (for query) exceeded: would use 9.35 GiB (attempt to allocate chunk of 268435552 bytes), maximum: 9.31 GiB.: While executing GenerateRandom: While processing (SELECT * FROM generateRandom()) AS _subquery21. (MEMORY_LIMIT_EXCEEDED), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. ./build/./contrib/llvm-project/libcxx/include/exception:134: Poco::Exception::Exception(String const&, int) @ 0x000000001ac06132 in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n1. ./build/./src/Common/Exception.cpp:92: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x0000000011c73675 in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n2. ./build/./contrib/llvm-project/libcxx/include/string:1499: DB::Exception::Exception<char const*, char const*, String, long&, String, char const*, std::basic_string_view<char, std::char_traits<char>>>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<char const*>::type, std::type_identity<String>::type, std::type_identity<long&>::type, std::type_identity<String>::type, std::type_identity<char const*>::type, std::type_identity<std::basic_string_view<char, std::char_traits<char>>>::type>, char const*&&, char const*&&, String&&, long&, String&&, char const*&&, std::basic_string_view<char, std::char_traits<char>>&&) @ 0x0000000011c7ea37 in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n3. ./build/./src/Common/MemoryTracker.cpp:0: MemoryTracker::allocImpl(long, bool, MemoryTracker*) @ 0x0000000011c7dde4 in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n4. ./build/./src/Common/MemoryTracker.cpp:369: MemoryTracker::allocImpl(long, bool, MemoryTracker*) @ 0x0000000011c7d939 in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n5. ./build/./src/Common/CurrentMemoryTracker.cpp:59: CurrentMemoryTracker::alloc(long) @ 0x0000000011c4c21e in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n6. ./build/./src/Common/Allocator.h:103: Allocator<false, false>::alloc(unsigned long, unsigned long) @ 0x0000000011c49244 in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n7. void DB::PODArrayBase<1ul, 4096ul, Allocator<false, false>, 63ul, 64ul>::resize<>(unsigned long) @ 0x000000000cd7c253 in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n8. ./build/./src/Storages/StorageGenerateRandom.cpp:58: DB::(anonymous namespace)::fillColumnWithRandomData(std::shared_ptr<DB::IDataType const>, unsigned long, unsigned long, unsigned long, pcg_detail::engine<unsigned long, unsigned __int128, pcg_detail::xsl_rr_mixin<unsigned long, unsigned __int128>, false, pcg_detail::specific_stream<unsigned __int128>, pcg_detail::default_multiplier<unsigned __int128>>&, std::shared_ptr<DB::Context const>) @ 0x0000000017a4c3a0 in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n9. ./build/./contrib/llvm-project/libcxx/include/vector:1457: DB::(anonymous namespace)::fillColumnWithRandomData(std::shared_ptr<DB::IDataType const>, unsigned long, unsigned long, unsigned long, pcg_detail::engine<unsigned long, unsigned __int128, pcg_detail::xsl_rr_mixin<unsigned long, unsigned __int128>, false, pcg_detail::specific_stream<unsigned __int128>, pcg_detail::default_multiplier<unsigned __int128>>&, std::shared_ptr<DB::Context const>) @ 0x0000000017a4dc50 in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n10. ./build/./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:138: DB::(anonymous namespace)::fillColumnWithRandomData(std::shared_ptr<DB::IDataType const>, unsigned long, unsigned long, unsigned long, pcg_detail::engine<unsigned long, unsigned __int128, pcg_detail::xsl_rr_mixin<unsigned long, unsigned __int128>, false, pcg_detail::specific_stream<unsigned __int128>, pcg_detail::default_multiplier<unsigned __int128>>&, std::shared_ptr<DB::Context const>) @ 0x0000000017a4de6d in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n11. ./build/./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:200: DB::(anonymous namespace)::fillColumnWithRandomData(std::shared_ptr<DB::IDataType const>, unsigned long, unsigned long, unsigned long, pcg_detail::engine<unsigned long, unsigned __int128, pcg_detail::xsl_rr_mixin<unsigned long, unsigned __int128>, false, pcg_detail::specific_stream<unsigned __int128>, pcg_detail::default_multiplier<unsigned __int128>>&, std::shared_ptr<DB::Context const>) @ 0x0000000017a4cde9 in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n12. ./build/./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:138: DB::(anonymous namespace)::fillColumnWithRandomData(std::shared_ptr<DB::IDataType const>, unsigned long, unsigned long, unsigned long, pcg_detail::engine<unsigned long, unsigned __int128, pcg_detail::xsl_rr_mixin<unsigned long, unsigned __int128>, false, pcg_detail::specific_stream<unsigned __int128>, pcg_detail::default_multiplier<unsigned __int128>>&, std::shared_ptr<DB::Context const>) @ 0x0000000017a4de6d in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n13. ./build/./contrib/llvm-project/libcxx/include/vector:1457: DB::(anonymous namespace)::fillColumnWithRandomData(std::shared_ptr<DB::IDataType const>, unsigned long, unsigned long, unsigned long, pcg_detail::engine<unsigned long, unsigned __int128, pcg_detail::xsl_rr_mixin<unsigned long, unsigned __int128>, false, pcg_detail::specific_stream<unsigned __int128>, pcg_detail::default_multiplier<unsigned __int128>>&, std::shared_ptr<DB::Context const>) @ 0x0000000017a4dc50 in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n14. ./build/./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:138: DB::(anonymous namespace)::fillColumnWithRandomData(std::shared_ptr<DB::IDataType const>, unsigned long, unsigned long, unsigned long, pcg_detail::engine<unsigned long, unsigned __int128, pcg_detail::xsl_rr_mixin<unsigned long, unsigned __int128>, false, pcg_detail::specific_stream<unsigned __int128>, pcg_detail::default_multiplier<unsigned __int128>>&, std::shared_ptr<DB::Context const>) @ 0x0000000017a4de6d in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n15. ./build/./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:200: DB::(anonymous namespace)::fillColumnWithRandomData(std::shared_ptr<DB::IDataType const>, unsigned long, unsigned long, unsigned long, pcg_detail::engine<unsigned long, unsigned __int128, pcg_detail::xsl_rr_mixin<unsigned long, unsigned __int128>, false, pcg_detail::specific_stream<unsigned __int128>, pcg_detail::default_multiplier<unsigned __int128>>&, std::shared_ptr<DB::Context const>) @ 0x0000000017a4cde9 in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n16. ./build/./contrib/llvm-project/libcxx/include/vector:1457: DB::(anonymous namespace)::fillColumnWithRandomData(std::shared_ptr<DB::IDataType const>, unsigned long, unsigned long, unsigned long, pcg_detail::engine<unsigned long, unsigned __int128, pcg_detail::xsl_rr_mixin<unsigned long, unsigned __int128>, false, pcg_detail::specific_stream<unsigned __int128>, pcg_detail::default_multiplier<unsigned __int128>>&, std::shared_ptr<DB::Context const>) @ 0x0000000017a4dc50 in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n17. ./build/./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:138: DB::(anonymous namespace)::fillColumnWithRandomData(std::shared_ptr<DB::IDataType const>, unsigned long, unsigned long, unsigned long, pcg_detail::engine<unsigned long, unsigned __int128, pcg_detail::xsl_rr_mixin<unsigned long, unsigned __int128>, false, pcg_detail::specific_stream<unsigned __int128>, pcg_detail::default_multiplier<unsigned __int128>>&, std::shared_ptr<DB::Context const>) @ 0x0000000017a4de6d in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n18. ./build/./contrib/llvm-project/libcxx/include/vector:1457: DB::(anonymous namespace)::fillColumnWithRandomData(std::shared_ptr<DB::IDataType const>, unsigned long, unsigned long, unsigned long, pcg_detail::engine<unsigned long, unsigned __int128, pcg_detail::xsl_rr_mixin<unsigned long, unsigned __int128>, false, pcg_detail::specific_stream<unsigned __int128>, pcg_detail::default_multiplier<unsigned __int128>>&, std::shared_ptr<DB::Context const>) @ 0x0000000017a4dc50 in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n19. ./build/./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:138: DB::(anonymous namespace)::fillColumnWithRandomData(std::shared_ptr<DB::IDataType const>, unsigned long, unsigned long, unsigned long, pcg_detail::engine<unsigned long, unsigned __int128, pcg_detail::xsl_rr_mixin<unsigned long, unsigned __int128>, false, pcg_detail::specific_stream<unsigned __int128>, pcg_detail::default_multiplier<unsigned __int128>>&, std::shared_ptr<DB::Context const>) @ 0x0000000017a4de6d in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n20. ./build/./contrib/llvm-project/libcxx/include/vector:1457: DB::(anonymous namespace)::fillColumnWithRandomData(std::shared_ptr<DB::IDataType const>, unsigned long, unsigned long, unsigned long, pcg_detail::engine<unsigned long, unsigned __int128, pcg_detail::xsl_rr_mixin<unsigned long, unsigned __int128>, false, pcg_detail::specific_stream<unsigned __int128>, pcg_detail::default_multiplier<unsigned __int128>>&, std::shared_ptr<DB::Context const>) @ 0x0000000017a4dc50 in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n21. ./build/./contrib/llvm-project/libcxx/include/vector:1595: DB::(anonymous namespace)::GenerateSource::generate() @ 0x0000000017a4b703 in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n22. ./build/./src/Processors/Chunk.h:90: DB::ISource::tryGenerate() @ 0x00000000183398f5 in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n23. ./build/./contrib/llvm-project/libcxx/include/optional:344: DB::ISource::work() @ 0x00000000183395a5 in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n24. ./build/./src/Processors/Executors/ExecutionThreadContext.cpp:0: DB::ExecutionThreadContext::executeTask() @ 0x000000001834f078 in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n25. ./build/./src/Processors/Executors/PipelineExecutor.cpp:255: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000018346cd0 in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n26. ./build/./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:833: void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads()::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x00000000183477f9 in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n27. ./build/./base/base/../base/wide_integer_impl.h:796: ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::worker(std::__list_iterator<ThreadFromGlobalPoolImpl<false>, void*>) @ 0x0000000011d30840 in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n28. ./build/./src/Common/ThreadPool.cpp:0: ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'()::operator()() @ 0x0000000011d33599 in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n29. ./build/./base/base/../base/wide_integer_impl.h:796: ThreadPoolImpl<std::thread>::worker(std::__list_iterator<std::thread, void*>) @ 0x0000000011d2e27e in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n30. ./build/./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:302: void* std::__thread_proxy[abi:v15000]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>>(void*) @ 0x0000000011d31cce in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n31. ? @ 0x00007f440c72eb43 in ?\r\n```",
  "created_at": "2023-06-04T02:46:43Z"
}