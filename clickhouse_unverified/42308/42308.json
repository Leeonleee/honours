{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 42308,
  "instance_id": "ClickHouse__ClickHouse-42308",
  "issue_numbers": [
    "41977"
  ],
  "base_commit": "ba7c3c5eaeb66b258c51a7bb0ffad76dca9688d3",
  "patch": "diff --git a/docs/en/sql-reference/functions/date-time-functions.md b/docs/en/sql-reference/functions/date-time-functions.md\nindex 76f66db924fd..5b814ab1b1f8 100644\n--- a/docs/en/sql-reference/functions/date-time-functions.md\n+++ b/docs/en/sql-reference/functions/date-time-functions.md\n@@ -671,9 +671,9 @@ Aliases: `dateDiff`, `DATE_DIFF`.\n     - `quarter`\n     - `year`\n \n--   `startdate` \u2014 The first time value to subtract (the subtrahend). [Date](../../sql-reference/data-types/date.md) or [DateTime](../../sql-reference/data-types/datetime.md).\n+-   `startdate` \u2014 The first time value to subtract (the subtrahend). [Date](../../sql-reference/data-types/date.md), [Date32](../../sql-reference/data-types/date32.md), [DateTime](../../sql-reference/data-types/datetime.md) or [DateTime64](../../sql-reference/data-types/datetime64.md).\n \n--   `enddate` \u2014 The second time value to subtract from (the minuend). [Date](../../sql-reference/data-types/date.md) or [DateTime](../../sql-reference/data-types/datetime.md).\n+-   `enddate` \u2014 The second time value to subtract from (the minuend). [Date](../../sql-reference/data-types/date.md), [Date32](../../sql-reference/data-types/date32.md), [DateTime](../../sql-reference/data-types/datetime.md) or [DateTime64](../../sql-reference/data-types/datetime64.md).\n \n -   `timezone` \u2014 [Timezone name](../../operations/server-configuration-parameters/settings.md#server_configuration_parameters-timezone) (optional). If specified, it is applied to both `startdate` and `enddate`. If not specified, timezones of `startdate` and `enddate` are used. If they are not the same, the result is unspecified. [String](../../sql-reference/data-types/string.md).\n \ndiff --git a/docs/ru/sql-reference/functions/date-time-functions.md b/docs/ru/sql-reference/functions/date-time-functions.md\nindex 897c4b3e86a0..97ca0915eb4b 100644\n--- a/docs/ru/sql-reference/functions/date-time-functions.md\n+++ b/docs/ru/sql-reference/functions/date-time-functions.md\n@@ -721,9 +721,9 @@ date_diff('unit', startdate, enddate, [timezone])\n     - `quarter`\n     - `year`\n \n--   `startdate` \u2014 \u043f\u0435\u0440\u0432\u0430\u044f \u0434\u0430\u0442\u0430 \u0438\u043b\u0438 \u0434\u0430\u0442\u0430 \u0441\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f \u0438\u0437 `enddate`. [Date](../../sql-reference/data-types/date.md) \u0438\u043b\u0438 [DateTime](../../sql-reference/data-types/datetime.md).\n+-   `startdate` \u2014 \u043f\u0435\u0440\u0432\u0430\u044f \u0434\u0430\u0442\u0430 \u0438\u043b\u0438 \u0434\u0430\u0442\u0430 \u0441\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f \u0438\u0437 `enddate`. [Date](../../sql-reference/data-types/date.md), [Date32](../../sql-reference/data-types/date32.md), [DateTime](../../sql-reference/data-types/datetime.md) \u0438\u043b\u0438 [DateTime64](../../sql-reference/data-types/datetime64.md).\n \n--   `enddate` \u2014 \u0432\u0442\u043e\u0440\u0430\u044f \u0434\u0430\u0442\u0430 \u0438\u043b\u0438 \u0434\u0430\u0442\u0430 \u0441\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u044b\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f `startdate`. [Date](../../sql-reference/data-types/date.md) \u0438\u043b\u0438 [DateTime](../../sql-reference/data-types/datetime.md).\n+-   `enddate` \u2014 \u0432\u0442\u043e\u0440\u0430\u044f \u0434\u0430\u0442\u0430 \u0438\u043b\u0438 \u0434\u0430\u0442\u0430 \u0441\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c, \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u044b\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f `startdate`. [Date](../../sql-reference/data-types/date.md), [Date32](../../sql-reference/data-types/date32.md), [DateTime](../../sql-reference/data-types/datetime.md) \u0438\u043b\u0438 [DateTime64](../../sql-reference/data-types/datetime64.md).\n \n -   `timezone` \u2014 [\u0447\u0430\u0441\u043e\u0432\u043e\u0439 \u043f\u043e\u044f\u0441](../../operations/server-configuration-parameters/settings.md#server_configuration_parameters-timezone) (\u043d\u0435\u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e). \u0415\u0441\u043b\u0438 \u044d\u0442\u043e\u0442 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u0443\u043a\u0430\u0437\u0430\u043d, \u0442\u043e \u043e\u043d \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u0434\u043b\u044f `startdate`, \u0442\u0430\u043a \u0438 \u0434\u043b\u044f `enddate`. \u0415\u0441\u043b\u0438 \u044d\u0442\u043e\u0442 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d, \u0442\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0447\u0430\u0441\u043e\u0432\u044b\u0435 \u043f\u043e\u044f\u0441\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 `startdate` \u0438 `enddate`. \u0415\u0441\u043b\u0438 \u0447\u0430\u0441\u043e\u0432\u044b\u0435 \u043f\u043e\u044f\u0441\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 `startdate` \u0438 `enddate` \u043d\u0435 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u044e\u0442, \u0442\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d. [String](../../sql-reference/data-types/string.md).\n \ndiff --git a/src/Common/DateLUTImpl.h b/src/Common/DateLUTImpl.h\nindex ec414c221cb6..e6913e7450ff 100644\n--- a/src/Common/DateLUTImpl.h\n+++ b/src/Common/DateLUTImpl.h\n@@ -895,6 +895,19 @@ class DateLUTImpl\n         return toRelativeHourNum(lut[toLUTIndex(v)].date);\n     }\n \n+    /// The same formula is used for positive time (after Unix epoch) and negative time (before Unix epoch).\n+    /// It\u2019s needed for correct work of dateDiff function.\n+    inline Time toStableRelativeHourNum(Time t) const\n+    {\n+        return (t + DATE_LUT_ADD + 86400 - offset_at_start_of_epoch) / 3600 - (DATE_LUT_ADD / 3600);\n+    }\n+\n+    template <typename DateOrTime>\n+    inline Time toStableRelativeHourNum(DateOrTime v) const\n+    {\n+        return toStableRelativeHourNum(lut[toLUTIndex(v)].date);\n+    }\n+\n     inline Time toRelativeMinuteNum(Time t) const /// NOLINT\n     {\n         return (t + DATE_LUT_ADD) / 60 - (DATE_LUT_ADD / 60);\ndiff --git a/src/Functions/DateTimeTransforms.h b/src/Functions/DateTimeTransforms.h\nindex 217f158cc8ec..fa66cb2a891a 100644\n--- a/src/Functions/DateTimeTransforms.h\n+++ b/src/Functions/DateTimeTransforms.h\n@@ -1034,21 +1034,39 @@ struct ToISOWeekImpl\n     using FactorTransform = ToISOYearImpl;\n };\n \n+enum class ResultPrecision\n+{\n+    Standard,\n+    Extended\n+};\n+\n+/// Standard precision results (precision_ == ResultPrecision::Standard) potentially lead to overflows when returning values.\n+/// This mode is used by SQL functions \"toRelative*Num()\" which cannot easily be changed due to backward compatibility.\n+/// According to documentation, these functions merely need to compute the time difference to a deterministic, fixed point in the past.\n+/// As a future TODO, we should fix their behavior in a backwards-compatible way.\n+/// See https://github.com/ClickHouse/ClickHouse/issues/41977#issuecomment-1267536814.\n+template <ResultPrecision precision_>\n struct ToRelativeYearNumImpl\n {\n     static constexpr auto name = \"toRelativeYearNum\";\n \n-    static inline UInt16 execute(Int64 t, const DateLUTImpl & time_zone)\n+    static inline auto execute(Int64 t, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toYear(t);\n+        if constexpr (precision_ == ResultPrecision::Extended)\n+            return static_cast<Int16>(time_zone.toYear(t));\n+        else\n+            return static_cast<UInt16>(time_zone.toYear(t));\n     }\n     static inline UInt16 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toYear(static_cast<time_t>(t));\n     }\n-    static inline UInt16 execute(Int32 d, const DateLUTImpl & time_zone)\n+    static inline auto execute(Int32 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toYear(ExtendedDayNum(d));\n+        if constexpr (precision_ == ResultPrecision::Extended)\n+            return static_cast<Int16>(time_zone.toYear(ExtendedDayNum(d)));\n+        else\n+            return static_cast<UInt16>(time_zone.toYear(ExtendedDayNum(d)));\n     }\n     static inline UInt16 execute(UInt16 d, const DateLUTImpl & time_zone)\n     {\n@@ -1058,21 +1076,28 @@ struct ToRelativeYearNumImpl\n     using FactorTransform = ZeroTransform;\n };\n \n+template <ResultPrecision precision_>\n struct ToRelativeQuarterNumImpl\n {\n     static constexpr auto name = \"toRelativeQuarterNum\";\n \n-    static inline UInt16 execute(Int64 t, const DateLUTImpl & time_zone)\n+    static inline auto execute(Int64 t, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toRelativeQuarterNum(t);\n+        if constexpr (precision_ == ResultPrecision::Extended)\n+            return static_cast<Int32>(time_zone.toRelativeQuarterNum(t));\n+        else\n+            return static_cast<UInt16>(time_zone.toRelativeQuarterNum(t));\n     }\n     static inline UInt16 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toRelativeQuarterNum(static_cast<time_t>(t));\n     }\n-    static inline UInt16 execute(Int32 d, const DateLUTImpl & time_zone)\n+    static inline auto execute(Int32 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toRelativeQuarterNum(ExtendedDayNum(d));\n+        if constexpr (precision_ == ResultPrecision::Extended)\n+            return static_cast<Int32>(time_zone.toRelativeQuarterNum(ExtendedDayNum(d)));\n+        else\n+            return static_cast<UInt16>(time_zone.toRelativeQuarterNum(ExtendedDayNum(d)));\n     }\n     static inline UInt16 execute(UInt16 d, const DateLUTImpl & time_zone)\n     {\n@@ -1082,21 +1107,28 @@ struct ToRelativeQuarterNumImpl\n     using FactorTransform = ZeroTransform;\n };\n \n+template <ResultPrecision precision_>\n struct ToRelativeMonthNumImpl\n {\n     static constexpr auto name = \"toRelativeMonthNum\";\n \n-    static inline UInt16 execute(Int64 t, const DateLUTImpl & time_zone)\n+    static inline auto execute(Int64 t, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toRelativeMonthNum(t);\n+        if constexpr (precision_ == ResultPrecision::Extended)\n+            return static_cast<Int32>(time_zone.toRelativeMonthNum(t));\n+        else\n+            return static_cast<UInt16>(time_zone.toRelativeMonthNum(t));\n     }\n     static inline UInt16 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toRelativeMonthNum(static_cast<time_t>(t));\n     }\n-    static inline UInt16 execute(Int32 d, const DateLUTImpl & time_zone)\n+    static inline auto execute(Int32 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toRelativeMonthNum(ExtendedDayNum(d));\n+        if constexpr (precision_ == ResultPrecision::Extended)\n+            return static_cast<Int32>(time_zone.toRelativeMonthNum(ExtendedDayNum(d)));\n+        else\n+            return static_cast<UInt16>(time_zone.toRelativeMonthNum(ExtendedDayNum(d)));\n     }\n     static inline UInt16 execute(UInt16 d, const DateLUTImpl & time_zone)\n     {\n@@ -1106,21 +1138,28 @@ struct ToRelativeMonthNumImpl\n     using FactorTransform = ZeroTransform;\n };\n \n+template <ResultPrecision precision_>\n struct ToRelativeWeekNumImpl\n {\n     static constexpr auto name = \"toRelativeWeekNum\";\n \n-    static inline UInt16 execute(Int64 t, const DateLUTImpl & time_zone)\n+    static inline auto execute(Int64 t, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toRelativeWeekNum(t);\n+        if constexpr (precision_ == ResultPrecision::Extended)\n+            return static_cast<Int32>(time_zone.toRelativeWeekNum(t));\n+        else\n+            return static_cast<UInt16>(time_zone.toRelativeWeekNum(t));\n     }\n     static inline UInt16 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toRelativeWeekNum(static_cast<time_t>(t));\n     }\n-    static inline UInt16 execute(Int32 d, const DateLUTImpl & time_zone)\n+    static inline auto execute(Int32 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toRelativeWeekNum(ExtendedDayNum(d));\n+        if constexpr (precision_ == ResultPrecision::Extended)\n+            return static_cast<Int32>(time_zone.toRelativeWeekNum(ExtendedDayNum(d)));\n+        else\n+            return static_cast<UInt16>(time_zone.toRelativeWeekNum(ExtendedDayNum(d)));\n     }\n     static inline UInt16 execute(UInt16 d, const DateLUTImpl & time_zone)\n     {\n@@ -1130,21 +1169,28 @@ struct ToRelativeWeekNumImpl\n     using FactorTransform = ZeroTransform;\n };\n \n+template <ResultPrecision precision_>\n struct ToRelativeDayNumImpl\n {\n     static constexpr auto name = \"toRelativeDayNum\";\n \n-    static inline UInt16 execute(Int64 t, const DateLUTImpl & time_zone)\n+    static inline auto execute(Int64 t, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toDayNum(t);\n+        if constexpr (precision_ == ResultPrecision::Extended)\n+            return static_cast<Int64>(time_zone.toDayNum(t));\n+        else\n+            return static_cast<UInt16>(time_zone.toDayNum(t));\n     }\n     static inline UInt16 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toDayNum(static_cast<time_t>(t));\n     }\n-    static inline UInt16 execute(Int32 d, const DateLUTImpl &)\n+    static inline auto execute(Int32 d, const DateLUTImpl &)\n     {\n-        return static_cast<ExtendedDayNum>(d);\n+        if constexpr (precision_ == ResultPrecision::Extended)\n+            return static_cast<Int32>(static_cast<ExtendedDayNum>(d));\n+        else\n+            return static_cast<UInt16>(static_cast<ExtendedDayNum>(d));\n     }\n     static inline UInt16 execute(UInt16 d, const DateLUTImpl &)\n     {\n@@ -1154,46 +1200,65 @@ struct ToRelativeDayNumImpl\n     using FactorTransform = ZeroTransform;\n };\n \n-\n+template <ResultPrecision precision_>\n struct ToRelativeHourNumImpl\n {\n     static constexpr auto name = \"toRelativeHourNum\";\n \n-    static inline UInt32 execute(Int64 t, const DateLUTImpl & time_zone)\n+    static inline auto execute(Int64 t, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toRelativeHourNum(t);\n+        if constexpr (precision_ == ResultPrecision::Extended)\n+            return static_cast<Int64>(time_zone.toStableRelativeHourNum(t));\n+        else\n+            return static_cast<UInt32>(time_zone.toRelativeHourNum(t));\n     }\n     static inline UInt32 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toRelativeHourNum(static_cast<time_t>(t));\n+        if constexpr (precision_ == ResultPrecision::Extended)\n+            return time_zone.toStableRelativeHourNum(static_cast<time_t>(t));\n+        else\n+            return time_zone.toRelativeHourNum(static_cast<time_t>(t));\n     }\n-    static inline UInt32 execute(Int32 d, const DateLUTImpl & time_zone)\n+    static inline auto execute(Int32 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toRelativeHourNum(ExtendedDayNum(d));\n+        if constexpr (precision_ == ResultPrecision::Extended)\n+            return static_cast<Int64>(time_zone.toStableRelativeHourNum(ExtendedDayNum(d)));\n+        else\n+            return static_cast<UInt32>(time_zone.toRelativeHourNum(ExtendedDayNum(d)));\n     }\n     static inline UInt32 execute(UInt16 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toRelativeHourNum(DayNum(d));\n+        if constexpr (precision_ == ResultPrecision::Extended)\n+            return time_zone.toStableRelativeHourNum(DayNum(d));\n+        else\n+            return time_zone.toRelativeHourNum(DayNum(d));\n     }\n \n     using FactorTransform = ZeroTransform;\n };\n \n+template <ResultPrecision precision_>\n struct ToRelativeMinuteNumImpl\n {\n     static constexpr auto name = \"toRelativeMinuteNum\";\n \n-    static inline UInt32 execute(Int64 t, const DateLUTImpl & time_zone)\n+    static inline auto execute(Int64 t, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toRelativeMinuteNum(t);\n+        if constexpr (precision_ == ResultPrecision::Extended)\n+            return static_cast<Int64>(time_zone.toRelativeMinuteNum(t));\n+        else\n+            return static_cast<UInt32>(time_zone.toRelativeMinuteNum(t));\n     }\n     static inline UInt32 execute(UInt32 t, const DateLUTImpl & time_zone)\n     {\n         return time_zone.toRelativeMinuteNum(static_cast<time_t>(t));\n     }\n-    static inline UInt32 execute(Int32 d, const DateLUTImpl & time_zone)\n+    static inline auto execute(Int32 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.toRelativeMinuteNum(ExtendedDayNum(d));\n+        if constexpr (precision_ == ResultPrecision::Extended)\n+            return static_cast<Int64>(time_zone.toRelativeMinuteNum(ExtendedDayNum(d)));\n+        else\n+            return static_cast<UInt32>(time_zone.toRelativeMinuteNum(ExtendedDayNum(d)));\n     }\n     static inline UInt32 execute(UInt16 d, const DateLUTImpl & time_zone)\n     {\n@@ -1203,6 +1268,7 @@ struct ToRelativeMinuteNumImpl\n     using FactorTransform = ZeroTransform;\n };\n \n+template <ResultPrecision precision_>\n struct ToRelativeSecondNumImpl\n {\n     static constexpr auto name = \"toRelativeSecondNum\";\n@@ -1215,9 +1281,12 @@ struct ToRelativeSecondNumImpl\n     {\n         return t;\n     }\n-    static inline UInt32 execute(Int32 d, const DateLUTImpl & time_zone)\n+    static inline auto execute(Int32 d, const DateLUTImpl & time_zone)\n     {\n-        return time_zone.fromDayNum(ExtendedDayNum(d));\n+        if constexpr (precision_ == ResultPrecision::Extended)\n+            return static_cast<Int64>(time_zone.fromDayNum(ExtendedDayNum(d)));\n+        else\n+            return static_cast<UInt32>(time_zone.fromDayNum(ExtendedDayNum(d)));\n     }\n     static inline UInt32 execute(UInt16 d, const DateLUTImpl & time_zone)\n     {\ndiff --git a/src/Functions/dateDiff.cpp b/src/Functions/dateDiff.cpp\nindex b8bf3c11698d..b33fcf32de19 100644\n--- a/src/Functions/dateDiff.cpp\n+++ b/src/Functions/dateDiff.cpp\n@@ -61,25 +61,30 @@ class FunctionDateDiff : public IFunction\n     DataTypePtr getReturnTypeImpl(const DataTypes & arguments) const override\n     {\n         if (arguments.size() != 3 && arguments.size() != 4)\n-            throw Exception(\"Number of arguments for function \" + getName() + \" doesn't match: passed \"\n-                + toString(arguments.size()) + \", should be 3 or 4\",\n-                ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH);\n+            throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH,\n+                \"Number of arguments for function {} doesn't match: passed {}, should be 3 or 4\",\n+                getName(), arguments.size());\n \n         if (!isString(arguments[0]))\n-            throw Exception(\"First argument for function \" + getName() + \" (unit) must be String\",\n-                ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n+            throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,\n+                \"First argument for function {} (unit) must be String\",\n+                getName());\n \n-        if (!isDate(arguments[1]) && !isDateTime(arguments[1]) && !isDateTime64(arguments[1]))\n-            throw Exception(\"Second argument for function \" + getName() + \" must be Date or DateTime\",\n-                ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n+        if (!isDate(arguments[1]) && !isDate32(arguments[1]) && !isDateTime(arguments[1]) && !isDateTime64(arguments[1]))\n+            throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,\n+                \"Second argument for function {} must be Date, Date32, DateTime or DateTime64\",\n+                getName());\n \n-        if (!isDate(arguments[2]) && !isDateTime(arguments[2]) && !isDateTime64(arguments[2]))\n-            throw Exception(\"Third argument for function \" + getName() + \" must be Date or DateTime\",\n-                ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n+        if (!isDate(arguments[2]) && !isDate32(arguments[2]) && !isDateTime(arguments[2]) && !isDateTime64(arguments[2]))\n+            throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,\n+                \"Third argument for function {} must be Date, Date32, DateTime or DateTime64\",\n+                getName()\n+                );\n \n         if (arguments.size() == 4 && !isString(arguments[3]))\n-            throw Exception(\"Fourth argument for function \" + getName() + \" (timezone) must be String\",\n-                ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n+            throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,\n+                \"Fourth argument for function {} (timezone) must be String\",\n+                getName());\n \n         return std::make_shared<DataTypeInt64>();\n     }\n@@ -91,7 +96,9 @@ class FunctionDateDiff : public IFunction\n     {\n         const auto * unit_column = checkAndGetColumnConst<ColumnString>(arguments[0].column.get());\n         if (!unit_column)\n-            throw Exception(\"First argument for function \" + getName() + \" must be constant String\", ErrorCodes::ILLEGAL_COLUMN);\n+            throw Exception(ErrorCodes::ILLEGAL_COLUMN,\n+                \"First argument for function {} must be constant String\",\n+                getName());\n \n         String unit = Poco::toLower(unit_column->getValue<String>());\n \n@@ -105,23 +112,24 @@ class FunctionDateDiff : public IFunction\n         const auto & timezone_y = extractTimeZoneFromFunctionArguments(arguments, 3, 2);\n \n         if (unit == \"year\" || unit == \"yy\" || unit == \"yyyy\")\n-            dispatchForColumns<ToRelativeYearNumImpl>(x, y, timezone_x, timezone_y, res->getData());\n+            dispatchForColumns<ToRelativeYearNumImpl<ResultPrecision::Extended>>(x, y, timezone_x, timezone_y, res->getData());\n         else if (unit == \"quarter\" || unit == \"qq\" || unit == \"q\")\n-            dispatchForColumns<ToRelativeQuarterNumImpl>(x, y, timezone_x, timezone_y, res->getData());\n+            dispatchForColumns<ToRelativeQuarterNumImpl<ResultPrecision::Extended>>(x, y, timezone_x, timezone_y, res->getData());\n         else if (unit == \"month\" || unit == \"mm\" || unit == \"m\")\n-            dispatchForColumns<ToRelativeMonthNumImpl>(x, y, timezone_x, timezone_y, res->getData());\n+            dispatchForColumns<ToRelativeMonthNumImpl<ResultPrecision::Extended>>(x, y, timezone_x, timezone_y, res->getData());\n         else if (unit == \"week\" || unit == \"wk\" || unit == \"ww\")\n-            dispatchForColumns<ToRelativeWeekNumImpl>(x, y, timezone_x, timezone_y, res->getData());\n+            dispatchForColumns<ToRelativeWeekNumImpl<ResultPrecision::Extended>>(x, y, timezone_x, timezone_y, res->getData());\n         else if (unit == \"day\" || unit == \"dd\" || unit == \"d\")\n-            dispatchForColumns<ToRelativeDayNumImpl>(x, y, timezone_x, timezone_y, res->getData());\n+            dispatchForColumns<ToRelativeDayNumImpl<ResultPrecision::Extended>>(x, y, timezone_x, timezone_y, res->getData());\n         else if (unit == \"hour\" || unit == \"hh\" || unit == \"h\")\n-            dispatchForColumns<ToRelativeHourNumImpl>(x, y, timezone_x, timezone_y, res->getData());\n+            dispatchForColumns<ToRelativeHourNumImpl<ResultPrecision::Extended>>(x, y, timezone_x, timezone_y, res->getData());\n         else if (unit == \"minute\" || unit == \"mi\" || unit == \"n\")\n-            dispatchForColumns<ToRelativeMinuteNumImpl>(x, y, timezone_x, timezone_y, res->getData());\n+            dispatchForColumns<ToRelativeMinuteNumImpl<ResultPrecision::Extended>>(x, y, timezone_x, timezone_y, res->getData());\n         else if (unit == \"second\" || unit == \"ss\" || unit == \"s\")\n-            dispatchForColumns<ToRelativeSecondNumImpl>(x, y, timezone_x, timezone_y, res->getData());\n+            dispatchForColumns<ToRelativeSecondNumImpl<ResultPrecision::Extended>>(x, y, timezone_x, timezone_y, res->getData());\n         else\n-            throw Exception(\"Function \" + getName() + \" does not support '\" + unit + \"' unit\", ErrorCodes::BAD_ARGUMENTS);\n+            throw Exception(ErrorCodes::BAD_ARGUMENTS,\n+                \"Function {} does not support '{}' unit\", getName(), unit);\n \n         return res;\n     }\n@@ -137,16 +145,22 @@ class FunctionDateDiff : public IFunction\n             dispatchForSecondColumn<Transform>(*x_vec_16, y, timezone_x, timezone_y, result);\n         else if (const auto * x_vec_32 = checkAndGetColumn<ColumnUInt32>(&x))\n             dispatchForSecondColumn<Transform>(*x_vec_32, y, timezone_x, timezone_y, result);\n+        else if (const auto * x_vec_32_s = checkAndGetColumn<ColumnInt32>(&x))\n+            dispatchForSecondColumn<Transform>(*x_vec_32_s, y, timezone_x, timezone_y, result);\n         else if (const auto * x_vec_64 = checkAndGetColumn<ColumnDateTime64>(&x))\n             dispatchForSecondColumn<Transform>(*x_vec_64, y, timezone_x, timezone_y, result);\n         else if (const auto * x_const_16 = checkAndGetColumnConst<ColumnUInt16>(&x))\n             dispatchConstForSecondColumn<Transform>(x_const_16->getValue<UInt16>(), y, timezone_x, timezone_y, result);\n         else if (const auto * x_const_32 = checkAndGetColumnConst<ColumnUInt32>(&x))\n             dispatchConstForSecondColumn<Transform>(x_const_32->getValue<UInt32>(), y, timezone_x, timezone_y, result);\n+        else if (const auto * x_const_32_s = checkAndGetColumnConst<ColumnInt32>(&x))\n+            dispatchConstForSecondColumn<Transform>(x_const_32_s->getValue<Int32>(), y, timezone_x, timezone_y, result);\n         else if (const auto * x_const_64 = checkAndGetColumnConst<ColumnDateTime64>(&x))\n             dispatchConstForSecondColumn<Transform>(x_const_64->getValue<DecimalField<DateTime64>>(), y, timezone_x, timezone_y, result);\n         else\n-            throw Exception(\"Illegal column for first argument of function \" + getName() + \", must be Date, DateTime or DateTime64\", ErrorCodes::ILLEGAL_COLUMN);\n+            throw Exception(ErrorCodes::ILLEGAL_COLUMN,\n+                \"Illegal column for first argument of function {}, must be Date, Date32, DateTime or DateTime64\",\n+                getName());\n     }\n \n     template <typename Transform, typename LeftColumnType>\n@@ -159,16 +173,22 @@ class FunctionDateDiff : public IFunction\n             vectorVector<Transform>(x, *y_vec_16, timezone_x, timezone_y, result);\n         else if (const auto * y_vec_32 = checkAndGetColumn<ColumnUInt32>(&y))\n             vectorVector<Transform>(x, *y_vec_32, timezone_x, timezone_y, result);\n+        else if (const auto * y_vec_32_s = checkAndGetColumn<ColumnInt32>(&y))\n+            vectorVector<Transform>(x, *y_vec_32_s, timezone_x, timezone_y, result);\n         else if (const auto * y_vec_64 = checkAndGetColumn<ColumnDateTime64>(&y))\n             vectorVector<Transform>(x, *y_vec_64, timezone_x, timezone_y, result);\n         else if (const auto * y_const_16 = checkAndGetColumnConst<ColumnUInt16>(&y))\n             vectorConstant<Transform>(x, y_const_16->getValue<UInt16>(), timezone_x, timezone_y, result);\n         else if (const auto * y_const_32 = checkAndGetColumnConst<ColumnUInt32>(&y))\n             vectorConstant<Transform>(x, y_const_32->getValue<UInt32>(), timezone_x, timezone_y, result);\n+        else if (const auto * y_const_32_s = checkAndGetColumnConst<ColumnInt32>(&y))\n+            vectorConstant<Transform>(x, y_const_32_s->getValue<Int32>(), timezone_x, timezone_y, result);\n         else if (const auto * y_const_64 = checkAndGetColumnConst<ColumnDateTime64>(&y))\n             vectorConstant<Transform>(x, y_const_64->getValue<DecimalField<DateTime64>>(), timezone_x, timezone_y, result);\n         else\n-            throw Exception(\"Illegal column for second argument of function \" + getName() + \", must be Date or DateTime\", ErrorCodes::ILLEGAL_COLUMN);\n+            throw Exception(ErrorCodes::ILLEGAL_COLUMN,\n+                \"Illegal column for second argument of function {}, must be Date, Date32, DateTime or DateTime64\",\n+                getName());\n     }\n \n     template <typename Transform, typename T1>\n@@ -181,10 +201,14 @@ class FunctionDateDiff : public IFunction\n             constantVector<Transform>(x, *y_vec_16, timezone_x, timezone_y, result);\n         else if (const auto * y_vec_32 = checkAndGetColumn<ColumnUInt32>(&y))\n             constantVector<Transform>(x, *y_vec_32, timezone_x, timezone_y, result);\n+        else if (const auto * y_vec_32_s = checkAndGetColumn<ColumnInt32>(&y))\n+            constantVector<Transform>(x, *y_vec_32_s, timezone_x, timezone_y, result);\n         else if (const auto * y_vec_64 = checkAndGetColumn<ColumnDateTime64>(&y))\n             constantVector<Transform>(x, *y_vec_64, timezone_x, timezone_y, result);\n         else\n-            throw Exception(\"Illegal column for second argument of function \" + getName() + \", must be Date or DateTime\", ErrorCodes::ILLEGAL_COLUMN);\n+            throw Exception(ErrorCodes::ILLEGAL_COLUMN,\n+                \"Illegal column for second argument of function {}, must be Date, Date32, DateTime or DateTime64\",\n+                getName());\n     }\n \n     template <typename Transform, typename LeftColumnType, typename RightColumnType>\ndiff --git a/src/Functions/toRelativeDayNum.cpp b/src/Functions/toRelativeDayNum.cpp\nindex 241104493cd6..db3eb119dcfa 100644\n--- a/src/Functions/toRelativeDayNum.cpp\n+++ b/src/Functions/toRelativeDayNum.cpp\n@@ -7,7 +7,7 @@\n namespace DB\n {\n \n-using FunctionToRelativeDayNum = FunctionDateOrDateTimeToSomething<DataTypeUInt32, ToRelativeDayNumImpl>;\n+using FunctionToRelativeDayNum = FunctionDateOrDateTimeToSomething<DataTypeUInt32, ToRelativeDayNumImpl<ResultPrecision::Standard>>;\n \n REGISTER_FUNCTION(ToRelativeDayNum)\n {\ndiff --git a/src/Functions/toRelativeHourNum.cpp b/src/Functions/toRelativeHourNum.cpp\nindex 2404d73c4506..838b1bb1ca11 100644\n--- a/src/Functions/toRelativeHourNum.cpp\n+++ b/src/Functions/toRelativeHourNum.cpp\n@@ -7,7 +7,7 @@\n namespace DB\n {\n \n-using FunctionToRelativeHourNum = FunctionDateOrDateTimeToSomething<DataTypeUInt32, ToRelativeHourNumImpl>;\n+using FunctionToRelativeHourNum = FunctionDateOrDateTimeToSomething<DataTypeUInt32, ToRelativeHourNumImpl<ResultPrecision::Standard>>;\n \n REGISTER_FUNCTION(ToRelativeHourNum)\n {\ndiff --git a/src/Functions/toRelativeMinuteNum.cpp b/src/Functions/toRelativeMinuteNum.cpp\nindex a5ecada1e92f..e9318517119b 100644\n--- a/src/Functions/toRelativeMinuteNum.cpp\n+++ b/src/Functions/toRelativeMinuteNum.cpp\n@@ -7,7 +7,7 @@\n namespace DB\n {\n \n-using FunctionToRelativeMinuteNum = FunctionDateOrDateTimeToSomething<DataTypeUInt32, ToRelativeMinuteNumImpl>;\n+using FunctionToRelativeMinuteNum = FunctionDateOrDateTimeToSomething<DataTypeUInt32, ToRelativeMinuteNumImpl<ResultPrecision::Standard>>;\n \n REGISTER_FUNCTION(ToRelativeMinuteNum)\n {\ndiff --git a/src/Functions/toRelativeMonthNum.cpp b/src/Functions/toRelativeMonthNum.cpp\nindex 8f46e04e4833..7b058c3ba123 100644\n--- a/src/Functions/toRelativeMonthNum.cpp\n+++ b/src/Functions/toRelativeMonthNum.cpp\n@@ -7,7 +7,7 @@\n namespace DB\n {\n \n-using FunctionToRelativeMonthNum = FunctionDateOrDateTimeToSomething<DataTypeUInt32, ToRelativeMonthNumImpl>;\n+using FunctionToRelativeMonthNum = FunctionDateOrDateTimeToSomething<DataTypeUInt32, ToRelativeMonthNumImpl<ResultPrecision::Standard>>;\n \n REGISTER_FUNCTION(ToRelativeMonthNum)\n {\ndiff --git a/src/Functions/toRelativeQuarterNum.cpp b/src/Functions/toRelativeQuarterNum.cpp\nindex 8ea0c42ef099..c7702d47f420 100644\n--- a/src/Functions/toRelativeQuarterNum.cpp\n+++ b/src/Functions/toRelativeQuarterNum.cpp\n@@ -7,7 +7,7 @@\n namespace DB\n {\n \n-using FunctionToRelativeQuarterNum = FunctionDateOrDateTimeToSomething<DataTypeUInt32, ToRelativeQuarterNumImpl>;\n+using FunctionToRelativeQuarterNum = FunctionDateOrDateTimeToSomething<DataTypeUInt32, ToRelativeQuarterNumImpl<ResultPrecision::Standard>>;\n \n REGISTER_FUNCTION(ToRelativeQuarterNum)\n {\ndiff --git a/src/Functions/toRelativeSecondNum.cpp b/src/Functions/toRelativeSecondNum.cpp\nindex 7af41ab83341..db80f721fbd7 100644\n--- a/src/Functions/toRelativeSecondNum.cpp\n+++ b/src/Functions/toRelativeSecondNum.cpp\n@@ -7,7 +7,7 @@\n namespace DB\n {\n \n-using FunctionToRelativeSecondNum = FunctionDateOrDateTimeToSomething<DataTypeUInt32, ToRelativeSecondNumImpl>;\n+using FunctionToRelativeSecondNum = FunctionDateOrDateTimeToSomething<DataTypeUInt32, ToRelativeSecondNumImpl<ResultPrecision::Standard>>;\n \n REGISTER_FUNCTION(ToRelativeSecondNum)\n {\ndiff --git a/src/Functions/toRelativeWeekNum.cpp b/src/Functions/toRelativeWeekNum.cpp\nindex fe7aec3fd9a7..beca00d8cc47 100644\n--- a/src/Functions/toRelativeWeekNum.cpp\n+++ b/src/Functions/toRelativeWeekNum.cpp\n@@ -7,7 +7,7 @@\n namespace DB\n {\n \n-using FunctionToRelativeWeekNum = FunctionDateOrDateTimeToSomething<DataTypeUInt32, ToRelativeWeekNumImpl>;\n+using FunctionToRelativeWeekNum = FunctionDateOrDateTimeToSomething<DataTypeUInt32, ToRelativeWeekNumImpl<ResultPrecision::Standard>>;\n \n REGISTER_FUNCTION(ToRelativeWeekNum)\n {\ndiff --git a/src/Functions/toRelativeYearNum.cpp b/src/Functions/toRelativeYearNum.cpp\nindex 4574d8513e07..b4fe3318129e 100644\n--- a/src/Functions/toRelativeYearNum.cpp\n+++ b/src/Functions/toRelativeYearNum.cpp\n@@ -7,7 +7,7 @@\n namespace DB\n {\n \n-using FunctionToRelativeYearNum = FunctionDateOrDateTimeToSomething<DataTypeUInt16, ToRelativeYearNumImpl>;\n+using FunctionToRelativeYearNum = FunctionDateOrDateTimeToSomething<DataTypeUInt16, ToRelativeYearNumImpl<ResultPrecision::Standard>>;\n \n REGISTER_FUNCTION(ToRelativeYearNum)\n {\n",
  "test_patch": "diff --git a/src/Common/tests/gtest_DateLUTImpl.cpp b/src/Common/tests/gtest_DateLUTImpl.cpp\nindex 49013625ed34..aca17ae4f93c 100644\n--- a/src/Common/tests/gtest_DateLUTImpl.cpp\n+++ b/src/Common/tests/gtest_DateLUTImpl.cpp\n@@ -134,6 +134,7 @@ TEST(DateLUTTest, TimeValuesInMiddleOfRange)\n     EXPECT_EQ(lut.toRelativeMonthNum(time), 24237 /*unsigned*/);\n     EXPECT_EQ(lut.toRelativeQuarterNum(time), 8078 /*unsigned*/);\n     EXPECT_EQ(lut.toRelativeHourNum(time), 435736 /*time_t*/);\n+    EXPECT_EQ(lut.toStableRelativeHourNum(time), 435757 /*time_t*/);\n     EXPECT_EQ(lut.toRelativeMinuteNum(time), 26144180 /*time_t*/);\n     EXPECT_EQ(lut.toStartOfMinuteInterval(time, 6), 1568650680 /*time_t*/);\n     EXPECT_EQ(lut.toStartOfSecondInterval(time, 7), 1568650811 /*time_t*/);\n@@ -196,6 +197,7 @@ TEST(DateLUTTest, TimeValuesAtLeftBoderOfRange)\n     EXPECT_EQ(lut.toRelativeMonthNum(time), 23641 /*unsigned*/); // ?\n     EXPECT_EQ(lut.toRelativeQuarterNum(time), 7880 /*unsigned*/); // ?\n     EXPECT_EQ(lut.toRelativeHourNum(time), 0 /*time_t*/);\n+    EXPECT_EQ(lut.toStableRelativeHourNum(time), 24 /*time_t*/);\n     EXPECT_EQ(lut.toRelativeMinuteNum(time), 0 /*time_t*/);\n     EXPECT_EQ(lut.toStartOfMinuteInterval(time, 6), 0 /*time_t*/);\n     EXPECT_EQ(lut.toStartOfSecondInterval(time, 7), 0 /*time_t*/);\n@@ -259,6 +261,7 @@ TEST(DateLUTTest, TimeValuesAtRightBoderOfRangeOfOldLUT)\n     EXPECT_EQ(lut.toRelativeMonthNum(time), 25273 /*unsigned*/);\n     EXPECT_EQ(lut.toRelativeQuarterNum(time), 8424 /*unsigned*/);\n     EXPECT_EQ(lut.toRelativeHourNum(time), 1192873 /*time_t*/);\n+    EXPECT_EQ(lut.toStableRelativeHourNum(time), 1192897 /*time_t*/);\n     EXPECT_EQ(lut.toRelativeMinuteNum(time), 71572397 /*time_t*/);\n     EXPECT_EQ(lut.toStartOfMinuteInterval(time, 6), 4294343520 /*time_t*/);\n     EXPECT_EQ(lut.toStartOfSecondInterval(time, 7), 4294343872 /*time_t*/);\ndiff --git a/tests/queries/0_stateless/02457_datediff_via_unix_epoch.reference b/tests/queries/0_stateless/02457_datediff_via_unix_epoch.reference\nnew file mode 100644\nindex 000000000000..ba12c868037b\n--- /dev/null\n+++ b/tests/queries/0_stateless/02457_datediff_via_unix_epoch.reference\n@@ -0,0 +1,16 @@\n+year\t1\n+year\t1\n+quarter\t1\n+quarter\t1\n+month\t1\n+month\t1\n+week\t1\n+week\t1\n+day\t11\n+day\t11\n+hour\t264\n+hour\t264\n+minute\t1440\n+minute\t20\n+second\t86400\n+second\t1200\ndiff --git a/tests/queries/0_stateless/02457_datediff_via_unix_epoch.sql b/tests/queries/0_stateless/02457_datediff_via_unix_epoch.sql\nnew file mode 100644\nindex 000000000000..796b4cc6e8f6\n--- /dev/null\n+++ b/tests/queries/0_stateless/02457_datediff_via_unix_epoch.sql\n@@ -0,0 +1,23 @@\n+select 'year', date_diff('year', toDate32('1969-12-25'), toDate32('1970-01-05'));\n+select 'year', date_diff('year', toDateTime64('1969-12-25 10:00:00.000', 3), toDateTime64('1970-01-05 10:00:00.000', 3));\n+\n+select 'quarter', date_diff('quarter', toDate32('1969-12-25'), toDate32('1970-01-05'));\n+select 'quarter', date_diff('quarter', toDateTime64('1969-12-25 10:00:00.000', 3), toDateTime64('1970-01-05 10:00:00.000', 3));\n+\n+select 'month', date_diff('month', toDate32('1969-12-25'), toDate32('1970-01-05'));\n+select 'month', date_diff('month', toDateTime64('1969-12-25 10:00:00.000', 3), toDateTime64('1970-01-05 10:00:00.000', 3));\n+\n+select 'week', date_diff('week', toDate32('1969-12-25'), toDate32('1970-01-05'));\n+select 'week', date_diff('week', toDateTime64('1969-12-25 10:00:00.000', 3), toDateTime64('1970-01-05 10:00:00.000', 3));\n+\n+select 'day', date_diff('day', toDate32('1969-12-25'), toDate32('1970-01-05'));\n+select 'day', date_diff('day', toDateTime64('1969-12-25 10:00:00.000', 3), toDateTime64('1970-01-05 10:00:00.000', 3));\n+\n+select 'hour', date_diff('hour', toDate32('1969-12-25'), toDate32('1970-01-05'));\n+select 'hour', date_diff('hour', toDateTime64('1969-12-25 10:00:00.000', 3), toDateTime64('1970-01-05 10:00:00.000', 3));\n+\n+select 'minute', date_diff('minute', toDate32('1969-12-31'), toDate32('1970-01-01'));\n+select 'minute', date_diff('minute', toDateTime64('1969-12-31 23:50:00.000', 3), toDateTime64('1970-01-01 00:10:00.000', 3));\n+\n+select 'second', date_diff('second', toDate32('1969-12-31'), toDate32('1970-01-01'));\n+select 'second', date_diff('second', toDateTime64('1969-12-31 23:50:00.000', 3), toDateTime64('1970-01-01 00:10:00.000', 3));\ndiff --git a/tests/queries/0_stateless/02458_datediff_date32.reference b/tests/queries/0_stateless/02458_datediff_date32.reference\nnew file mode 100644\nindex 000000000000..67bfa895199a\n--- /dev/null\n+++ b/tests/queries/0_stateless/02458_datediff_date32.reference\n@@ -0,0 +1,169 @@\n+-- { echo }\n+\n+-- Date32 vs Date32\n+SELECT dateDiff('second', toDate32('1900-01-01'), toDate32('1900-01-02'));\n+86400\n+SELECT dateDiff('minute', toDate32('1900-01-01'), toDate32('1900-01-02'));\n+1440\n+SELECT dateDiff('hour', toDate32('1900-01-01'), toDate32('1900-01-02'));\n+24\n+SELECT dateDiff('day', toDate32('1900-01-01'), toDate32('1900-01-02'));\n+1\n+SELECT dateDiff('week', toDate32('1900-01-01'), toDate32('1900-01-08'));\n+1\n+SELECT dateDiff('month', toDate32('1900-01-01'), toDate32('1900-02-01'));\n+1\n+SELECT dateDiff('quarter', toDate32('1900-01-01'), toDate32('1900-04-01'));\n+1\n+SELECT dateDiff('year', toDate32('1900-01-01'), toDate32('1901-01-01'));\n+1\n+-- With DateTime64\n+-- Date32 vs DateTime64\n+SELECT dateDiff('second', toDate32('1900-01-01'), toDateTime64('1900-01-02 00:00:00', 3));\n+86400\n+SELECT dateDiff('minute', toDate32('1900-01-01'), toDateTime64('1900-01-02 00:00:00', 3));\n+1440\n+SELECT dateDiff('hour', toDate32('1900-01-01'), toDateTime64('1900-01-02 00:00:00', 3));\n+24\n+SELECT dateDiff('day', toDate32('1900-01-01'), toDateTime64('1900-01-02 00:00:00', 3));\n+1\n+SELECT dateDiff('week', toDate32('1900-01-01'), toDateTime64('1900-01-08 00:00:00', 3));\n+1\n+SELECT dateDiff('month', toDate32('1900-01-01'), toDateTime64('1900-02-01 00:00:00', 3));\n+1\n+SELECT dateDiff('quarter', toDate32('1900-01-01'), toDateTime64('1900-04-01 00:00:00', 3));\n+1\n+SELECT dateDiff('year', toDate32('1900-01-01'), toDateTime64('1901-01-01 00:00:00', 3));\n+1\n+-- DateTime64 vs Date32\n+SELECT dateDiff('second', toDateTime64('1900-01-01 00:00:00', 3), toDate32('1900-01-02'));\n+86400\n+SELECT dateDiff('minute', toDateTime64('1900-01-01 00:00:00', 3), toDate32('1900-01-02'));\n+1440\n+SELECT dateDiff('hour', toDateTime64('1900-01-01 00:00:00', 3), toDate32('1900-01-02'));\n+24\n+SELECT dateDiff('day', toDateTime64('1900-01-01 00:00:00', 3), toDate32('1900-01-02'));\n+1\n+SELECT dateDiff('week', toDateTime64('1900-01-01 00:00:00', 3), toDate32('1900-01-08'));\n+1\n+SELECT dateDiff('month', toDateTime64('1900-01-01 00:00:00', 3), toDate32('1900-02-01'));\n+1\n+SELECT dateDiff('quarter', toDateTime64('1900-01-01 00:00:00', 3), toDate32('1900-04-01'));\n+1\n+SELECT dateDiff('year', toDateTime64('1900-01-01 00:00:00', 3), toDate32('1901-01-01'));\n+1\n+-- With DateTime\n+-- Date32 vs DateTime\n+SELECT dateDiff('second', toDate32('2015-08-18'), toDateTime('2015-08-19 00:00:00'));\n+86400\n+SELECT dateDiff('minute', toDate32('2015-08-18'), toDateTime('2015-08-19 00:00:00'));\n+1440\n+SELECT dateDiff('hour', toDate32('2015-08-18'), toDateTime('2015-08-19 00:00:00'));\n+24\n+SELECT dateDiff('day', toDate32('2015-08-18'), toDateTime('2015-08-19 00:00:00'));\n+1\n+SELECT dateDiff('week', toDate32('2015-08-18'), toDateTime('2015-08-25 00:00:00'));\n+1\n+SELECT dateDiff('month', toDate32('2015-08-18'), toDateTime('2015-09-18 00:00:00'));\n+1\n+SELECT dateDiff('quarter', toDate32('2015-08-18'), toDateTime('2015-11-18 00:00:00'));\n+1\n+SELECT dateDiff('year', toDate32('2015-08-18'), toDateTime('2016-08-18 00:00:00'));\n+1\n+-- DateTime vs Date32\n+SELECT dateDiff('second', toDateTime('2015-08-18 00:00:00'), toDate32('2015-08-19'));\n+86400\n+SELECT dateDiff('minute', toDateTime('2015-08-18 00:00:00'), toDate32('2015-08-19'));\n+1440\n+SELECT dateDiff('hour', toDateTime('2015-08-18 00:00:00'), toDate32('2015-08-19'));\n+24\n+SELECT dateDiff('day', toDateTime('2015-08-18 00:00:00'), toDate32('2015-08-19'));\n+1\n+SELECT dateDiff('week', toDateTime('2015-08-18 00:00:00'), toDate32('2015-08-25'));\n+1\n+SELECT dateDiff('month', toDateTime('2015-08-18 00:00:00'), toDate32('2015-09-18'));\n+1\n+SELECT dateDiff('quarter', toDateTime('2015-08-18 00:00:00'), toDate32('2015-11-18'));\n+1\n+SELECT dateDiff('year', toDateTime('2015-08-18 00:00:00'), toDate32('2016-08-18'));\n+1\n+-- With Date\n+-- Date32 vs Date\n+SELECT dateDiff('second', toDate32('2015-08-18'), toDate('2015-08-19'));\n+86400\n+SELECT dateDiff('minute', toDate32('2015-08-18'), toDate('2015-08-19'));\n+1440\n+SELECT dateDiff('hour', toDate32('2015-08-18'), toDate('2015-08-19'));\n+24\n+SELECT dateDiff('day', toDate32('2015-08-18'), toDate('2015-08-19'));\n+1\n+SELECT dateDiff('week', toDate32('2015-08-18'), toDate('2015-08-25'));\n+1\n+SELECT dateDiff('month', toDate32('2015-08-18'), toDate('2015-09-18'));\n+1\n+SELECT dateDiff('quarter', toDate32('2015-08-18'), toDate('2015-11-18'));\n+1\n+SELECT dateDiff('year', toDate32('2015-08-18'), toDate('2016-08-18'));\n+1\n+-- Date vs Date32\n+SELECT dateDiff('second', toDate('2015-08-18'), toDate32('2015-08-19'));\n+86400\n+SELECT dateDiff('minute', toDate('2015-08-18'), toDate32('2015-08-19'));\n+1440\n+SELECT dateDiff('hour', toDate('2015-08-18'), toDate32('2015-08-19'));\n+24\n+SELECT dateDiff('day', toDate('2015-08-18'), toDate32('2015-08-19'));\n+1\n+SELECT dateDiff('week', toDate('2015-08-18'), toDate32('2015-08-25'));\n+1\n+SELECT dateDiff('month', toDate('2015-08-18'), toDate32('2015-09-18'));\n+1\n+SELECT dateDiff('quarter', toDate('2015-08-18'), toDate32('2015-11-18'));\n+1\n+SELECT dateDiff('year', toDate('2015-08-18'), toDate32('2016-08-18'));\n+1\n+-- Const vs non-const columns\n+SELECT dateDiff('day', toDate32('1900-01-01'), materialize(toDate32('1900-01-02')));\n+1\n+SELECT dateDiff('day', toDate32('1900-01-01'), materialize(toDateTime64('1900-01-02 00:00:00', 3)));\n+1\n+SELECT dateDiff('day', toDateTime64('1900-01-01 00:00:00', 3), materialize(toDate32('1900-01-02')));\n+1\n+SELECT dateDiff('day', toDate32('2015-08-18'), materialize(toDateTime('2015-08-19 00:00:00')));\n+1\n+SELECT dateDiff('day', toDateTime('2015-08-18 00:00:00'), materialize(toDate32('2015-08-19')));\n+1\n+SELECT dateDiff('day', toDate32('2015-08-18'), materialize(toDate('2015-08-19')));\n+1\n+SELECT dateDiff('day', toDate('2015-08-18'), materialize(toDate32('2015-08-19')));\n+1\n+-- Non-const vs const columns\n+SELECT dateDiff('day', materialize(toDate32('1900-01-01')), toDate32('1900-01-02'));\n+1\n+SELECT dateDiff('day', materialize(toDate32('1900-01-01')), toDateTime64('1900-01-02 00:00:00', 3));\n+1\n+SELECT dateDiff('day', materialize(toDateTime64('1900-01-01 00:00:00', 3)), toDate32('1900-01-02'));\n+1\n+SELECT dateDiff('day', materialize(toDate32('2015-08-18')), toDateTime('2015-08-19 00:00:00'));\n+1\n+SELECT dateDiff('day', materialize(toDateTime('2015-08-18 00:00:00')), toDate32('2015-08-19'));\n+1\n+SELECT dateDiff('day', materialize(toDate32('2015-08-18')), toDate('2015-08-19'));\n+1\n+SELECT dateDiff('day', materialize(toDate('2015-08-18')), toDate32('2015-08-19'));\n+1\n+-- Non-const vs non-const columns\n+SELECT dateDiff('day', materialize(toDate32('1900-01-01')), materialize(toDate32('1900-01-02')));\n+1\n+SELECT dateDiff('day', materialize(toDate32('1900-01-01')), materialize(toDateTime64('1900-01-02 00:00:00', 3)));\n+1\n+SELECT dateDiff('day', materialize(toDateTime64('1900-01-01 00:00:00', 3)), materialize(toDate32('1900-01-02')));\n+1\n+SELECT dateDiff('day', materialize(toDate32('2015-08-18')), materialize(toDateTime('2015-08-19 00:00:00')));\n+1\n+SELECT dateDiff('day', materialize(toDateTime('2015-08-18 00:00:00')), materialize(toDate32('2015-08-19')));\n+1\n+SELECT dateDiff('day', materialize(toDate32('2015-08-18')), materialize(toDate('2015-08-19')));\n+1\n+SELECT dateDiff('day', materialize(toDate('2015-08-18')), materialize(toDate32('2015-08-19')));\n+1\ndiff --git a/tests/queries/0_stateless/02458_datediff_date32.sql b/tests/queries/0_stateless/02458_datediff_date32.sql\nnew file mode 100644\nindex 000000000000..4c26e04ac272\n--- /dev/null\n+++ b/tests/queries/0_stateless/02458_datediff_date32.sql\n@@ -0,0 +1,101 @@\n+-- { echo }\n+\n+-- Date32 vs Date32\n+SELECT dateDiff('second', toDate32('1900-01-01'), toDate32('1900-01-02'));\n+SELECT dateDiff('minute', toDate32('1900-01-01'), toDate32('1900-01-02'));\n+SELECT dateDiff('hour', toDate32('1900-01-01'), toDate32('1900-01-02'));\n+SELECT dateDiff('day', toDate32('1900-01-01'), toDate32('1900-01-02'));\n+SELECT dateDiff('week', toDate32('1900-01-01'), toDate32('1900-01-08'));\n+SELECT dateDiff('month', toDate32('1900-01-01'), toDate32('1900-02-01'));\n+SELECT dateDiff('quarter', toDate32('1900-01-01'), toDate32('1900-04-01'));\n+SELECT dateDiff('year', toDate32('1900-01-01'), toDate32('1901-01-01'));\n+\n+-- With DateTime64\n+-- Date32 vs DateTime64\n+SELECT dateDiff('second', toDate32('1900-01-01'), toDateTime64('1900-01-02 00:00:00', 3));\n+SELECT dateDiff('minute', toDate32('1900-01-01'), toDateTime64('1900-01-02 00:00:00', 3));\n+SELECT dateDiff('hour', toDate32('1900-01-01'), toDateTime64('1900-01-02 00:00:00', 3));\n+SELECT dateDiff('day', toDate32('1900-01-01'), toDateTime64('1900-01-02 00:00:00', 3));\n+SELECT dateDiff('week', toDate32('1900-01-01'), toDateTime64('1900-01-08 00:00:00', 3));\n+SELECT dateDiff('month', toDate32('1900-01-01'), toDateTime64('1900-02-01 00:00:00', 3));\n+SELECT dateDiff('quarter', toDate32('1900-01-01'), toDateTime64('1900-04-01 00:00:00', 3));\n+SELECT dateDiff('year', toDate32('1900-01-01'), toDateTime64('1901-01-01 00:00:00', 3));\n+\n+-- DateTime64 vs Date32\n+SELECT dateDiff('second', toDateTime64('1900-01-01 00:00:00', 3), toDate32('1900-01-02'));\n+SELECT dateDiff('minute', toDateTime64('1900-01-01 00:00:00', 3), toDate32('1900-01-02'));\n+SELECT dateDiff('hour', toDateTime64('1900-01-01 00:00:00', 3), toDate32('1900-01-02'));\n+SELECT dateDiff('day', toDateTime64('1900-01-01 00:00:00', 3), toDate32('1900-01-02'));\n+SELECT dateDiff('week', toDateTime64('1900-01-01 00:00:00', 3), toDate32('1900-01-08'));\n+SELECT dateDiff('month', toDateTime64('1900-01-01 00:00:00', 3), toDate32('1900-02-01'));\n+SELECT dateDiff('quarter', toDateTime64('1900-01-01 00:00:00', 3), toDate32('1900-04-01'));\n+SELECT dateDiff('year', toDateTime64('1900-01-01 00:00:00', 3), toDate32('1901-01-01'));\n+\n+-- With DateTime\n+-- Date32 vs DateTime\n+SELECT dateDiff('second', toDate32('2015-08-18'), toDateTime('2015-08-19 00:00:00'));\n+SELECT dateDiff('minute', toDate32('2015-08-18'), toDateTime('2015-08-19 00:00:00'));\n+SELECT dateDiff('hour', toDate32('2015-08-18'), toDateTime('2015-08-19 00:00:00'));\n+SELECT dateDiff('day', toDate32('2015-08-18'), toDateTime('2015-08-19 00:00:00'));\n+SELECT dateDiff('week', toDate32('2015-08-18'), toDateTime('2015-08-25 00:00:00'));\n+SELECT dateDiff('month', toDate32('2015-08-18'), toDateTime('2015-09-18 00:00:00'));\n+SELECT dateDiff('quarter', toDate32('2015-08-18'), toDateTime('2015-11-18 00:00:00'));\n+SELECT dateDiff('year', toDate32('2015-08-18'), toDateTime('2016-08-18 00:00:00'));\n+\n+-- DateTime vs Date32\n+SELECT dateDiff('second', toDateTime('2015-08-18 00:00:00'), toDate32('2015-08-19'));\n+SELECT dateDiff('minute', toDateTime('2015-08-18 00:00:00'), toDate32('2015-08-19'));\n+SELECT dateDiff('hour', toDateTime('2015-08-18 00:00:00'), toDate32('2015-08-19'));\n+SELECT dateDiff('day', toDateTime('2015-08-18 00:00:00'), toDate32('2015-08-19'));\n+SELECT dateDiff('week', toDateTime('2015-08-18 00:00:00'), toDate32('2015-08-25'));\n+SELECT dateDiff('month', toDateTime('2015-08-18 00:00:00'), toDate32('2015-09-18'));\n+SELECT dateDiff('quarter', toDateTime('2015-08-18 00:00:00'), toDate32('2015-11-18'));\n+SELECT dateDiff('year', toDateTime('2015-08-18 00:00:00'), toDate32('2016-08-18'));\n+\n+-- With Date\n+-- Date32 vs Date\n+SELECT dateDiff('second', toDate32('2015-08-18'), toDate('2015-08-19'));\n+SELECT dateDiff('minute', toDate32('2015-08-18'), toDate('2015-08-19'));\n+SELECT dateDiff('hour', toDate32('2015-08-18'), toDate('2015-08-19'));\n+SELECT dateDiff('day', toDate32('2015-08-18'), toDate('2015-08-19'));\n+SELECT dateDiff('week', toDate32('2015-08-18'), toDate('2015-08-25'));\n+SELECT dateDiff('month', toDate32('2015-08-18'), toDate('2015-09-18'));\n+SELECT dateDiff('quarter', toDate32('2015-08-18'), toDate('2015-11-18'));\n+SELECT dateDiff('year', toDate32('2015-08-18'), toDate('2016-08-18'));\n+\n+-- Date vs Date32\n+SELECT dateDiff('second', toDate('2015-08-18'), toDate32('2015-08-19'));\n+SELECT dateDiff('minute', toDate('2015-08-18'), toDate32('2015-08-19'));\n+SELECT dateDiff('hour', toDate('2015-08-18'), toDate32('2015-08-19'));\n+SELECT dateDiff('day', toDate('2015-08-18'), toDate32('2015-08-19'));\n+SELECT dateDiff('week', toDate('2015-08-18'), toDate32('2015-08-25'));\n+SELECT dateDiff('month', toDate('2015-08-18'), toDate32('2015-09-18'));\n+SELECT dateDiff('quarter', toDate('2015-08-18'), toDate32('2015-11-18'));\n+SELECT dateDiff('year', toDate('2015-08-18'), toDate32('2016-08-18'));\n+\n+-- Const vs non-const columns\n+SELECT dateDiff('day', toDate32('1900-01-01'), materialize(toDate32('1900-01-02')));\n+SELECT dateDiff('day', toDate32('1900-01-01'), materialize(toDateTime64('1900-01-02 00:00:00', 3)));\n+SELECT dateDiff('day', toDateTime64('1900-01-01 00:00:00', 3), materialize(toDate32('1900-01-02')));\n+SELECT dateDiff('day', toDate32('2015-08-18'), materialize(toDateTime('2015-08-19 00:00:00')));\n+SELECT dateDiff('day', toDateTime('2015-08-18 00:00:00'), materialize(toDate32('2015-08-19')));\n+SELECT dateDiff('day', toDate32('2015-08-18'), materialize(toDate('2015-08-19')));\n+SELECT dateDiff('day', toDate('2015-08-18'), materialize(toDate32('2015-08-19')));\n+\n+-- Non-const vs const columns\n+SELECT dateDiff('day', materialize(toDate32('1900-01-01')), toDate32('1900-01-02'));\n+SELECT dateDiff('day', materialize(toDate32('1900-01-01')), toDateTime64('1900-01-02 00:00:00', 3));\n+SELECT dateDiff('day', materialize(toDateTime64('1900-01-01 00:00:00', 3)), toDate32('1900-01-02'));\n+SELECT dateDiff('day', materialize(toDate32('2015-08-18')), toDateTime('2015-08-19 00:00:00'));\n+SELECT dateDiff('day', materialize(toDateTime('2015-08-18 00:00:00')), toDate32('2015-08-19'));\n+SELECT dateDiff('day', materialize(toDate32('2015-08-18')), toDate('2015-08-19'));\n+SELECT dateDiff('day', materialize(toDate('2015-08-18')), toDate32('2015-08-19'));\n+\n+-- Non-const vs non-const columns\n+SELECT dateDiff('day', materialize(toDate32('1900-01-01')), materialize(toDate32('1900-01-02')));\n+SELECT dateDiff('day', materialize(toDate32('1900-01-01')), materialize(toDateTime64('1900-01-02 00:00:00', 3)));\n+SELECT dateDiff('day', materialize(toDateTime64('1900-01-01 00:00:00', 3)), materialize(toDate32('1900-01-02')));\n+SELECT dateDiff('day', materialize(toDate32('2015-08-18')), materialize(toDateTime('2015-08-19 00:00:00')));\n+SELECT dateDiff('day', materialize(toDateTime('2015-08-18 00:00:00')), materialize(toDate32('2015-08-19')));\n+SELECT dateDiff('day', materialize(toDate32('2015-08-18')), materialize(toDate('2015-08-19')));\n+SELECT dateDiff('day', materialize(toDate('2015-08-18')), materialize(toDate32('2015-08-19')));\n",
  "problem_statement": "Add support of Date32 arguments for date_diff function\n**Use case**\r\n\r\nCurrently date_diff function accepts only Date, DateTime and DateTime64 arguments but it does not support Date32 arguments. \r\n\r\nFor example:\r\n\r\n`select date_diff('day', toDate32('1979-01-01'), toDate32('1980-01-01'))`\r\n\r\nReturns:\r\n\r\n> DB::Exception: Second argument for function dateDiff must be Date or DateTime\r\n\r\n**Describe the solution you'd like**\r\n\r\nImplement support of Date32 arguments.\r\n\n",
  "hints_text": "@rschu1ze and @ilejn could you please comment: will adding support of Date32 arguments create a backward compatibility case? Or is it OK to just implement Date32 support without additional compatibility option?\r\n\nCreated related issue #41978 \n1. Note, that date_diff handles all combinations of arguments (select date_diff('day', toDate('1979-01-01'), toDateTime('1980-01-01')) and select date_diff('day', toDate('1979-01-01'), toDateTime64('1980-01-01', 3)) work fine). We should keep this level of flexibility for Date32.\r\n2. I cannot make up a code that would be broken if Date32 added as date_diff argument, so I believe that no compatibility considerations make sense here.\nThere might be compatibility issues / unexpected behavior if there was implicit casting between types but that is not the case in ClickHouse. All data type conversions are explicit. So I would not expect any issues with a `date_diff` function that accepts Date32 arguments.\r\n\r\nAnd there was some [earlier discussion](https://github.com/ClickHouse/ClickHouse/pull/40217#issuecomment-1236177537) about the usage of date/time functions as a partitioning clause. I personally don't think that fixing this issue (#41977) will break any such use cases because of the above reason, i.e. the lack of implicit casting in ClickHouse.\nTo me, the question is if this change **solves** the compatibility issue. \r\nDo we have reasons to keep _enable_extended_results_for_datetime_functions_ false by default when date_diff can handle Date32?\nApparently we do have reasons to keep _enable_extended_results_for_datetime_functions_  . The list of functions that do not accept Date32 consists not only of date_diff, we should cover dateName and formatDateTime (atl least)",
  "created_at": "2022-10-14T08:17:54Z",
  "modified_files": [
    "docs/en/sql-reference/functions/date-time-functions.md",
    "docs/ru/sql-reference/functions/date-time-functions.md",
    "src/Common/DateLUTImpl.h",
    "src/Functions/DateTimeTransforms.h",
    "src/Functions/dateDiff.cpp",
    "src/Functions/toRelativeDayNum.cpp",
    "src/Functions/toRelativeHourNum.cpp",
    "src/Functions/toRelativeMinuteNum.cpp",
    "src/Functions/toRelativeMonthNum.cpp",
    "src/Functions/toRelativeQuarterNum.cpp",
    "src/Functions/toRelativeSecondNum.cpp",
    "src/Functions/toRelativeWeekNum.cpp",
    "src/Functions/toRelativeYearNum.cpp"
  ],
  "modified_test_files": [
    "src/Common/tests/gtest_DateLUTImpl.cpp",
    "b/tests/queries/0_stateless/02457_datediff_via_unix_epoch.reference",
    "b/tests/queries/0_stateless/02457_datediff_via_unix_epoch.sql",
    "b/tests/queries/0_stateless/02458_datediff_date32.reference",
    "b/tests/queries/0_stateless/02458_datediff_date32.sql"
  ]
}