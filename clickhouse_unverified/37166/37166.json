{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 37166,
  "instance_id": "ClickHouse__ClickHouse-37166",
  "issue_numbers": [
    "37141"
  ],
  "base_commit": "6d5137879b6b3c95cf5ad6f6d9bd312a3e066199",
  "patch": "diff --git a/src/Interpreters/ApplyWithGlobalVisitor.cpp b/src/Interpreters/ApplyWithGlobalVisitor.cpp\nindex 6f00ed0bab56..55e5968b7c9e 100644\n--- a/src/Interpreters/ApplyWithGlobalVisitor.cpp\n+++ b/src/Interpreters/ApplyWithGlobalVisitor.cpp\n@@ -95,6 +95,19 @@ void ApplyWithGlobalVisitor::visit(ASTPtr & ast)\n                 }\n             }\n         }\n+\n+        /*\n+         * We need to visit all children recursively because the WITH statement may appear in the subquery at the nested level.\n+         * Behavior of `WITH ... UNION ALL ...` should be the same at the top level and inside the subquery.\n+         *\n+         * For example:\n+         * SELECT * FROM (WITH (SELECT ... ) AS t SELECT ... UNION ALL SELECT ...)\n+         *                ^^^^^^^^^^^^     should be visited     ^^^^^^^^^^^^^^^^\n+         * or inside `WHERE .. IN` clause:\n+         * SELECT * FROM ... WHERE x IN (WITH (SELECT ... ) AS t SELECT ... UNION ALL SELECT ...)\n+         */\n+        for (auto & child : node_union->list_of_selects->children)\n+            visit(child);\n     }\n     else\n     {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02295_global_with_in_subquery.reference b/tests/queries/0_stateless/02295_global_with_in_subquery.reference\nnew file mode 100644\nindex 000000000000..c7f1a39a2b8a\n--- /dev/null\n+++ b/tests/queries/0_stateless/02295_global_with_in_subquery.reference\n@@ -0,0 +1,4 @@\n+1\t1\n+1\t1\n+1\n+2\ndiff --git a/tests/queries/0_stateless/02295_global_with_in_subquery.sql b/tests/queries/0_stateless/02295_global_with_in_subquery.sql\nnew file mode 100644\nindex 000000000000..d70209bbcc0b\n--- /dev/null\n+++ b/tests/queries/0_stateless/02295_global_with_in_subquery.sql\n@@ -0,0 +1,17 @@\n+-- https://github.com/ClickHouse/ClickHouse/issues/37141\n+\n+WITH (SELECT 1) as v0\n+SELECT v0, v > 0 FROM (\n+    WITH (SELECT 1) AS v1, (SELECT 2) AS v2\n+    SELECT v1 AS v\n+    UNION ALL\n+    SELECT v2 AS v\n+) AS a;\n+\n+SELECT number FROM numbers(10)\n+WHERE number IN (\n+    WITH (SELECT 1) AS v1, (SELECT 2) AS v2\n+    SELECT v1 AS v\n+    UNION ALL\n+    SELECT v2 AS v\n+);\n",
  "problem_statement": "Exception: Missing columns when union all under with clause in subquery\nIt's ok when i run\r\n \r\n```sql\r\nwith\r\n   (select count(*) from system.clusters) as v1,\r\n   (select count(*) from system.disks) as v2\r\nselect v1 as v\r\nunion  all\r\nselect v2 as v\r\n```\r\nresult:\r\n```\r\nv |\r\n--+\r\n14|\r\n 1|\r\n```\r\n,\r\nbut when i  wrap it in subquery:\r\n\r\n```sql\r\nSELECT v\r\nFROM\r\n  (with\r\n     (select count(*)  from system.clusters) as v1,\r\n     (select count(*) from system.disks) as v2\r\n   select v1 as v\r\n   union  all\r\n   select v2 as v) as a \r\n```\r\n\r\nit raise error:\r\n\r\n`SQL Error [47]: ClickHouse exception, code: 47, host: 127.0.0.1, port: 46535; Code: 47, e.displayText() = DB::Exception: Missing columns: 'v2' while processing query: 'SELECT v2 AS v', required columns: 'v2' (version 21.7.3.14 (official build))`\r\n,\r\nin fact ,  if i drop `union all`, it's still ok:\r\n\r\n```sql\r\nSELECT v\r\nFROM\r\n  (with\r\n     (select count(*) from system.clusters) as v1,\r\n     (select count(*) from system.disks) as v2\r\n  select v1 as v\r\n) as a \r\nLIMIT 1000;\r\n```\r\nresult:\r\n```\r\nv |\r\n--+\r\n14|\r\n```\r\nseems that it cannot recognize `union all` under `with` clause in subquery (version: 21.7.3.14).\r\n\r\nAnother way to avoid error is `with` first, like this:\r\n```sql\r\nwith\r\n     (select count(*)  from system.clusters) as v1,\r\n     (select count(*) from system.disks) as v2\r\nSELECT v\r\nFROM(\r\n   select v1 as v\r\n   union  all\r\n   select v2 as v) as a \r\n```\r\n\n",
  "hints_text": "",
  "created_at": "2022-05-12T17:10:35Z",
  "modified_files": [
    "src/Interpreters/ApplyWithGlobalVisitor.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02295_global_with_in_subquery.reference",
    "b/tests/queries/0_stateless/02295_global_with_in_subquery.sql"
  ]
}