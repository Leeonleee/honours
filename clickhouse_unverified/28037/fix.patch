diff --git a/contrib/aws b/contrib/aws
index 7d48b2c81936..06aa8759d17f 160000
--- a/contrib/aws
+++ b/contrib/aws
@@ -1,1 +1,1 @@
-Subproject commit 7d48b2c8193679cc4516e5bd68ae4a64b94dae7d
+Subproject commit 06aa8759d17f2032ffd5efa83969270ca9ac727b
diff --git a/src/Storages/StorageS3.cpp b/src/Storages/StorageS3.cpp
index 0e84b7a26e71..1b22d96dc803 100644
--- a/src/Storages/StorageS3.cpp
+++ b/src/Storages/StorageS3.cpp
@@ -1,4 +1,5 @@
 #include <Common/config.h>
+#include "Parsers/ASTCreateQuery.h"
 
 #if USE_AWS_S3
 
@@ -192,6 +193,7 @@ StorageS3Source::StorageS3Source(
     String name_,
     const Block & sample_block_,
     ContextPtr context_,
+    std::optional<FormatSettings> format_settings_,
     const ColumnsDescription & columns_,
     UInt64 max_block_size_,
     UInt64 max_single_read_retries_,
@@ -210,6 +212,7 @@ StorageS3Source::StorageS3Source(
     , compression_hint(compression_hint_)
     , client(client_)
     , sample_block(sample_block_)
+    , format_settings(format_settings_)
     , with_file_column(need_file)
     , with_path_column(need_path)
     , file_iterator(file_iterator_)
@@ -229,7 +232,7 @@ bool StorageS3Source::initialize()
     read_buf = wrapReadBufferWithCompressionMethod(
         std::make_unique<ReadBufferFromS3>(client, bucket, current_key, max_single_read_retries, DBMS_DEFAULT_BUFFER_SIZE),
         chooseCompressionMethod(current_key, compression_hint));
-    auto input_format = FormatFactory::instance().getInput(format, *read_buf, sample_block, getContext(), max_block_size);
+    auto input_format = FormatFactory::instance().getInput(format, *read_buf, sample_block, getContext(), max_block_size, format_settings);
     pipeline = std::make_unique<QueryPipeline>();
     pipeline->init(Pipe(input_format));
 
@@ -292,6 +295,7 @@ class StorageS3Sink : public SinkToStorage
         const String & format,
         const Block & sample_block_,
         ContextPtr context,
+        std::optional<FormatSettings> format_settings_,
         const CompressionMethod compression_method,
         const std::shared_ptr<Aws::S3::S3Client> & client,
         const String & bucket,
@@ -300,10 +304,11 @@ class StorageS3Sink : public SinkToStorage
         size_t max_single_part_upload_size)
         : SinkToStorage(sample_block_)
         , sample_block(sample_block_)
+        , format_settings(format_settings_)
     {
         write_buf = wrapWriteBufferWithCompressionMethod(
             std::make_unique<WriteBufferFromS3>(client, bucket, key, min_upload_part_size, max_single_part_upload_size), compression_method, 3);
-        writer = FormatFactory::instance().getOutputStreamParallelIfPossible(format, *write_buf, sample_block, context);
+        writer = FormatFactory::instance().getOutputStreamParallelIfPossible(format, *write_buf, sample_block, context, {}, format_settings);
     }
 
     String getName() const override { return "StorageS3Sink"; }
@@ -336,6 +341,7 @@ class StorageS3Sink : public SinkToStorage
 
 private:
     Block sample_block;
+    std::optional<FormatSettings> format_settings;
     std::unique_ptr<WriteBuffer> write_buf;
     BlockOutputStreamPtr writer;
     bool is_first_chunk = true;
@@ -350,6 +356,7 @@ class PartitionedStorageS3Sink : public SinkToStorage
         const String & format_,
         const Block & sample_block_,
         ContextPtr context_,
+        std::optional<FormatSettings> format_settings_,
         const CompressionMethod compression_method_,
         const std::shared_ptr<Aws::S3::S3Client> & client_,
         const String & bucket_,
@@ -366,7 +373,7 @@ class PartitionedStorageS3Sink : public SinkToStorage
         , key(key_)
         , min_upload_part_size(min_upload_part_size_)
         , max_single_part_upload_size(max_single_part_upload_size_)
-
+        , format_settings(format_settings_)
     {
         std::vector<ASTPtr> arguments(1, partition_by);
         ASTPtr partition_by_string = makeASTFunction(FunctionToString::name, std::move(arguments));
@@ -441,6 +448,7 @@ class PartitionedStorageS3Sink : public SinkToStorage
     const String key;
     size_t min_upload_part_size;
     size_t max_single_part_upload_size;
+    std::optional<FormatSettings> format_settings;
 
     ExpressionActionsPtr partition_by_expr;
     String partition_by_column_name;
@@ -467,6 +475,7 @@ class PartitionedStorageS3Sink : public SinkToStorage
                 format,
                 sample_block,
                 context,
+                format_settings,
                 compression_method,
                 client,
                 partition_bucket,
@@ -535,6 +544,7 @@ StorageS3::StorageS3(
     const ConstraintsDescription & constraints_,
     const String & comment,
     ContextPtr context_,
+    std::optional<FormatSettings> format_settings_,
     const String & compression_method_,
     bool distributed_processing_)
     : IStorage(table_id_)
@@ -546,6 +556,7 @@ StorageS3::StorageS3(
     , compression_method(compression_method_)
     , name(uri_.storage_name)
     , distributed_processing(distributed_processing_)
+    , format_settings(format_settings_)
 {
     context_->getGlobalContext()->getRemoteHostFilter().checkURL(uri_.uri);
     StorageInMemoryMetadata storage_metadata;
@@ -606,6 +617,7 @@ Pipe StorageS3::read(
             getName(),
             metadata_snapshot->getSampleBlock(),
             local_context,
+            format_settings,
             metadata_snapshot->getColumns(),
             max_block_size,
             max_single_read_retries,
@@ -638,6 +650,7 @@ SinkToStoragePtr StorageS3::write(const ASTPtr & query, const StorageMetadataPtr
             format_name,
             sample_block,
             local_context,
+            format_settings,
             chosen_compression_method,
             client_auth.client,
             client_auth.uri.bucket,
@@ -651,6 +664,7 @@ SinkToStoragePtr StorageS3::write(const ASTPtr & query, const StorageMetadataPtr
             format_name,
             sample_block,
             local_context,
+            format_settings,
             chosen_compression_method,
             client_auth.client,
             client_auth.uri.bucket,
@@ -732,6 +746,34 @@ void registerStorageS3Impl(const String & name, StorageFactory & factory)
         for (auto & engine_arg : engine_args)
             engine_arg = evaluateConstantExpressionOrIdentifierAsLiteral(engine_arg, args.getLocalContext());
 
+        // Use format settings from global server context + settings from
+        // the SETTINGS clause of the create query. Settings from current
+        // session and user are ignored.
+        std::optional<FormatSettings> format_settings;
+        if (args.storage_def->settings)
+        {
+            FormatFactorySettings user_format_settings;
+
+            // Apply changed settings from global context, but ignore the
+            // unknown ones, because we only have the format settings here.
+            const auto & changes = args.getContext()->getSettingsRef().changes();
+            for (const auto & change : changes)
+            {
+                if (user_format_settings.has(change.name))
+                {
+                    user_format_settings.set(change.name, change.value);
+                }
+            }
+
+            // Apply changes from SETTINGS clause, with validation.
+            user_format_settings.applyChanges(args.storage_def->settings->changes);
+            format_settings = getFormatSettings(args.getContext(), user_format_settings);
+        }
+        else
+        {
+            format_settings = getFormatSettings(args.getContext());
+        }
+
         String url = engine_args[0]->as<ASTLiteral &>().value.safeGet<String>();
         Poco::URI uri (url);
         S3::URI s3_uri (uri);
@@ -776,9 +818,11 @@ void registerStorageS3Impl(const String & name, StorageFactory & factory)
             args.constraints,
             args.comment,
             args.getContext(),
+            format_settings,
             compression_method);
     },
     {
+        .supports_settings = true,
         .source_access_type = AccessType::S3,
     });
 }
diff --git a/src/Storages/StorageS3.h b/src/Storages/StorageS3.h
index df4112cbfdd1..cfd7e4969283 100644
--- a/src/Storages/StorageS3.h
+++ b/src/Storages/StorageS3.h
@@ -54,6 +54,7 @@ class StorageS3Source : public SourceWithProgress, WithContext
         String name_,
         const Block & sample_block,
         ContextPtr context_,
+        std::optional<FormatSettings> format_settings_,
         const ColumnsDescription & columns_,
         UInt64 max_block_size_,
         UInt64 max_single_read_retries_,
@@ -77,6 +78,7 @@ class StorageS3Source : public SourceWithProgress, WithContext
     String compression_hint;
     std::shared_ptr<Aws::S3::S3Client> client;
     Block sample_block;
+    std::optional<FormatSettings> format_settings;
 
 
     std::unique_ptr<ReadBuffer> read_buf;
@@ -113,6 +115,7 @@ class StorageS3 : public shared_ptr_helper<StorageS3>, public IStorage, WithCont
         const ConstraintsDescription & constraints_,
         const String & comment,
         ContextPtr context_,
+        std::optional<FormatSettings> format_settings_,
         const String & compression_method_ = "",
         bool distributed_processing_ = false);
 
@@ -162,6 +165,7 @@ class StorageS3 : public shared_ptr_helper<StorageS3>, public IStorage, WithCont
     String compression_method;
     String name;
     const bool distributed_processing;
+    std::optional<FormatSettings> format_settings;
 
     static void updateClientAndAuthSettings(ContextPtr, ClientAuthentication &);
 };
diff --git a/src/TableFunctions/TableFunctionS3.cpp b/src/TableFunctions/TableFunctionS3.cpp
index 83149445a7df..9878ed725602 100644
--- a/src/TableFunctions/TableFunctionS3.cpp
+++ b/src/TableFunctions/TableFunctionS3.cpp
@@ -103,6 +103,8 @@ StoragePtr TableFunctionS3::executeImpl(const ASTPtr & /*ast_function*/, Context
         ConstraintsDescription{},
         String{},
         context,
+        /// No format_settings for table function S3
+        std::nullopt,
         compression_method);
 
     storage->startup();
diff --git a/src/TableFunctions/TableFunctionS3Cluster.cpp b/src/TableFunctions/TableFunctionS3Cluster.cpp
index 93f90bca75a7..313ad9d4dcc8 100644
--- a/src/TableFunctions/TableFunctionS3Cluster.cpp
+++ b/src/TableFunctions/TableFunctionS3Cluster.cpp
@@ -128,6 +128,8 @@ StoragePtr TableFunctionS3Cluster::executeImpl(
             ConstraintsDescription{},
             String{},
             context,
+            // No format_settings for S3Cluster
+            std::nullopt,
             compression_method,
             /*distributed_processing=*/true);
     }
