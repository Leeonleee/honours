{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 9734,
  "instance_id": "ClickHouse__ClickHouse-9734",
  "issue_numbers": [
    "9619"
  ],
  "base_commit": "8eb4eb765bc2b1ea1cd48ee8e632df6f2f3ef226",
  "patch": "diff --git a/dbms/src/Dictionaries/getDictionaryConfigurationFromAST.cpp b/dbms/src/Dictionaries/getDictionaryConfigurationFromAST.cpp\nindex a1d898b26213..7b5d7e9975d5 100644\n--- a/dbms/src/Dictionaries/getDictionaryConfigurationFromAST.cpp\n+++ b/dbms/src/Dictionaries/getDictionaryConfigurationFromAST.cpp\n@@ -31,12 +31,11 @@ namespace\n using NamesToTypeNames = std::unordered_map<std::string, std::string>;\n /// Get value from field and convert it to string.\n /// Also remove quotes from strings.\n-String getUnescapedFieldString(const Field & field)\n+String getFieldAsString(const Field & field)\n {\n-    String string = applyVisitor(FieldVisitorToString(), field);\n-    if (!string.empty() && string.front() == '\\'' && string.back() == '\\'')\n-        return string.substr(1, string.size() - 2);\n-    return string;\n+    if (field.getType() == Field::Types::Which::String)\n+        return field.get<String>();\n+    return applyVisitor(FieldVisitorToString(), field);\n }\n \n \n@@ -183,7 +182,7 @@ void buildSingleAttribute(\n      AutoPtr<Element> null_value_element(doc->createElement(\"null_value\"));\n      String null_value_str;\n      if (dict_attr->default_value)\n-         null_value_str = getUnescapedFieldString(dict_attr->default_value->as<ASTLiteral>()->value);\n+         null_value_str = getFieldAsString(dict_attr->default_value->as<ASTLiteral>()->value);\n      AutoPtr<Text> null_value(doc->createTextNode(null_value_str));\n      null_value_element->appendChild(null_value);\n      attribute_element->appendChild(null_value_element);\n@@ -197,7 +196,7 @@ void buildSingleAttribute(\n         if (const auto * literal = dict_attr->expression->as<ASTLiteral>();\n                 literal && literal->value.getType() == Field::Types::String)\n         {\n-            expression_str = getUnescapedFieldString(literal->value);\n+            expression_str = getFieldAsString(literal->value);\n         }\n         else\n             expression_str = queryToString(dict_attr->expression);\n@@ -346,7 +345,7 @@ void buildConfigurationFromFunctionWithKeyValueArguments(\n         }\n         else if (auto literal = pair->second->as<const ASTLiteral>(); literal)\n         {\n-            AutoPtr<Text> value(doc->createTextNode(getUnescapedFieldString(literal->value)));\n+            AutoPtr<Text> value(doc->createTextNode(getFieldAsString(literal->value)));\n             current_xml_element->appendChild(value);\n         }\n         else if (auto list = pair->second->as<const ASTExpressionList>(); list)\n",
  "test_patch": "diff --git a/dbms/tests/integration/test_dictionaries_ddl/test.py b/dbms/tests/integration/test_dictionaries_ddl/test.py\nindex ad50a8c7daf9..c5df6e68dd20 100644\n--- a/dbms/tests/integration/test_dictionaries_ddl/test.py\n+++ b/dbms/tests/integration/test_dictionaries_ddl/test.py\n@@ -214,3 +214,32 @@ def test_file_dictionary_restrictions(started_cluster):\n         node3.query(\"SELECT dictGetString('test.restricted_file_dictionary', 'value', toUInt64(1))\")\n     except QueryRuntimeException as ex:\n         assert 'is not inside' in str(ex)\n+\n+\n+def test_dictionary_with_where(started_cluster):\n+    mysql_conn = create_mysql_conn(\"root\", \"clickhouse\", \"localhost\", 3308)\n+    execute_mysql_query(mysql_conn, \"CREATE DATABASE IF NOT EXISTS clickhouse\")\n+    execute_mysql_query(mysql_conn, \"CREATE TABLE clickhouse.special_table (key_field1 int, value1 text, PRIMARY KEY (key_field1))\")\n+    execute_mysql_query(mysql_conn, \"INSERT INTO clickhouse.special_table VALUES (1, 'abcabc'), (2, 'qweqwe')\")\n+\n+    node1.query(\"\"\"\n+    CREATE DICTIONARY default.special_dict (\n+        key_field1 Int32,\n+        value1 String DEFAULT 'xxx'\n+    )\n+    PRIMARY KEY key_field1\n+    SOURCE(MYSQL(\n+        USER 'root'\n+        PASSWORD 'clickhouse'\n+        DB 'clickhouse'\n+        TABLE 'special_table'\n+        REPLICA(PRIORITY 1 HOST 'mysql1' PORT 3306)\n+        WHERE 'value1 = \\\\'qweqwe\\\\' OR value1 = \\\\'\\\\\\\\u3232\\\\''\n+    ))\n+    LAYOUT(FLAT())\n+    LIFETIME(MIN 1 MAX 3)\n+    \"\"\")\n+\n+    node1.query(\"SYSTEM RELOAD DICTIONARY default.special_dict\")\n+\n+    assert node1.query(\"SELECT dictGetString('default.special_dict', 'value1', toUInt64(2))\") == 'qweqwe\\n'\n",
  "problem_statement": "CREATE DICTIONARY source odbc where clause bad escape character \nI create new odbc dictionary using DDL:\r\n\r\n```\r\nCREATE DICTIONARY clickhouse_rock  (\r\n    col1 UInt32, \r\n    col2 UInt16, \r\n    col3 UInt32\r\n  ) PRIMARY KEY col1\r\nSOURCE(ODBC(HOST localhost DB 'clickhouse' TABLE 'test' CONNECTION_STRING 'DSN=postgresql' where 'date_column = ''2016-01-01''::date'))\r\nLAYOUT(COMPLEX_KEY_HASHED())\r\nLIFETIME(MIN 30000 MAX 36000)\r\n```\r\nThen I try to refresh it \r\n\r\n`SYSTEM RELOAD DICTIONARY clickhouse_rock;`\r\n\r\nand got:\r\n\r\n```\r\nReceived exception from server (version 20.1.3):\r\nCode: 86. DB::Exception: Received from localhost:9000. DB::Exception: Received error from remote server /?connection_string=DSN%3Dclickhouse_pg&columns=columns%20format%20version%3A%201%0A3%20columns%3A%0A%60apnr%60%20UInt32%0A%60ibnr%60%20UInt16%0A%60inwr%60%20UInt32%0A&max_block_size=8192. HTTP status code: 500 Internal Server Error, body: \u2592\r\n                                               Poco::Exception. Code: 1000, e.code() = 0, e.displayText() = ODBC handle exception: Failed to get number of columns: Connection:Not applicable\r\nServer:clickhouse_pg\r\n===========================\r\nODBC Diagnostic record #1:\r\n===========================\r\nSQLSTATE = HY000\r\nNative Error Code = 1\r\nERROR:  syntax error at or near \"\\\" at character 106;\r\nNo query has been executed with that handle\r\n\r\n0. 0x3d1eacc ?  in /usr/bin/clickhouse-odbc-bridge\r\n1. 0x3e55bb9 ?  in /usr/bin/clickhouse-odbc-bridge\r\n2. 0x3dcb6f9 ?  in /usr/bin/clickhouse-odbc-bridge\r\n3. 0x3de19c0 ?  in /usr/bin/clickhouse-odbc-bridge\r\n4. 0x72b56a ?  in /usr/bin/clickhouse-odbc-bridge\r\n5. 0x3de7d37 ?  in /usr/bin/clickhouse-odbc-bridge\r\n6. 0x3de82d7 ?  in /usr/bin/clickhouse-odbc-bridge\r\n7. 0x3eb5cc3 ?  in /usr/bin/clickhouse-odbc-bridge\r\n8. 0x3eb1fbf ?  in /usr/bin/clickhouse-odbc-bridge\r\n9. 0x3eb08d7 ?  in /usr/bin/clickhouse-odbc-bridge\r\n10. 0x7feb6f ?  in /usr/bin/clickhouse-odbc-bridge\r\n11. 0x7f0e87 ?  in /usr/bin/clickhouse-odbc-bridge\r\n12. 0x310189c ?  in /usr/bin/clickhouse-odbc-bridge\r\n13. 0x31038b7 ?  in /usr/bin/clickhouse-odbc-bridge\r\n14. 0x30fe71d ?  in /usr/bin/clickhouse-odbc-bridge\r\n15. 0x3d871af ?  in /usr/bin/clickhouse-odbc-bridge\r\n16. 0x3d83d38 ?  in /usr/bin/clickhouse-odbc-bridge\r\n17. 0x3d855d9 ?  in /usr/bin/clickhouse-odbc-bridge\r\n18. 0x7dd5 start_thread  in /usr/lib64/libpthread-2.17.so\r\n19. 0xfdf6d __clone  in /usr/lib64/libc-2.17.so\r\n (version 20.1.3.7 (official build)).\r\n\r\n0 rows in set. Elapsed: 0.096 sec.\r\n\r\n```\r\nIn PostgreSQL logs the statement is:\r\n\r\n```\r\n< 2020-03-12 09:54:58 CET 5e69f806.79c0 realyota [unknown] 127.0.0.1 31168 >ERROR:  syntax error at or near \"\\\" at character 106\r\n< 2020-03-12 09:54:58 CET 5e69f806.79c0 realyota [unknown] 127.0.0.1 31168 >STATEMENT:  SELECT \"col1\", \"col2\", \"col3\" FROM \"clickhouse\".\"test\" WHERE date_column = \\'2016-01-01\\'::date;\r\n```\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2020-03-18T16:48:32Z"
}