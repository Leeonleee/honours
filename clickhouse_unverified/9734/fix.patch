diff --git a/dbms/src/Dictionaries/getDictionaryConfigurationFromAST.cpp b/dbms/src/Dictionaries/getDictionaryConfigurationFromAST.cpp
index a1d898b26213..7b5d7e9975d5 100644
--- a/dbms/src/Dictionaries/getDictionaryConfigurationFromAST.cpp
+++ b/dbms/src/Dictionaries/getDictionaryConfigurationFromAST.cpp
@@ -31,12 +31,11 @@ namespace
 using NamesToTypeNames = std::unordered_map<std::string, std::string>;
 /// Get value from field and convert it to string.
 /// Also remove quotes from strings.
-String getUnescapedFieldString(const Field & field)
+String getFieldAsString(const Field & field)
 {
-    String string = applyVisitor(FieldVisitorToString(), field);
-    if (!string.empty() && string.front() == '\'' && string.back() == '\'')
-        return string.substr(1, string.size() - 2);
-    return string;
+    if (field.getType() == Field::Types::Which::String)
+        return field.get<String>();
+    return applyVisitor(FieldVisitorToString(), field);
 }
 
 
@@ -183,7 +182,7 @@ void buildSingleAttribute(
      AutoPtr<Element> null_value_element(doc->createElement("null_value"));
      String null_value_str;
      if (dict_attr->default_value)
-         null_value_str = getUnescapedFieldString(dict_attr->default_value->as<ASTLiteral>()->value);
+         null_value_str = getFieldAsString(dict_attr->default_value->as<ASTLiteral>()->value);
      AutoPtr<Text> null_value(doc->createTextNode(null_value_str));
      null_value_element->appendChild(null_value);
      attribute_element->appendChild(null_value_element);
@@ -197,7 +196,7 @@ void buildSingleAttribute(
         if (const auto * literal = dict_attr->expression->as<ASTLiteral>();
                 literal && literal->value.getType() == Field::Types::String)
         {
-            expression_str = getUnescapedFieldString(literal->value);
+            expression_str = getFieldAsString(literal->value);
         }
         else
             expression_str = queryToString(dict_attr->expression);
@@ -346,7 +345,7 @@ void buildConfigurationFromFunctionWithKeyValueArguments(
         }
         else if (auto literal = pair->second->as<const ASTLiteral>(); literal)
         {
-            AutoPtr<Text> value(doc->createTextNode(getUnescapedFieldString(literal->value)));
+            AutoPtr<Text> value(doc->createTextNode(getFieldAsString(literal->value)));
             current_xml_element->appendChild(value);
         }
         else if (auto list = pair->second->as<const ASTExpressionList>(); list)
