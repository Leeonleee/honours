diff --git a/src/Core/MySQL/MySQLUtils.cpp b/src/Core/MySQL/MySQLUtils.cpp
index 8dedbdaa6304..7ba6c32fd0d8 100644
--- a/src/Core/MySQL/MySQLUtils.cpp
+++ b/src/Core/MySQL/MySQLUtils.cpp
@@ -12,8 +12,7 @@ namespace MySQLProtocol
 namespace MySQLUtils
 {
 
-DecimalUtils::DecimalComponents<DateTime64>
-getNormalizedDateTime64Components(DataTypePtr data_type, ColumnPtr col, size_t row_num)
+DecimalUtils::DecimalComponents<DateTime64> getNormalizedDateTime64Components(DataTypePtr data_type, ColumnPtr col, size_t row_num)
 {
     const auto * date_time_type = typeid_cast<const DataTypeDateTime64 *>(data_type.get());
 
@@ -52,14 +51,6 @@ getNormalizedDateTime64Components(DataTypePtr data_type, ColumnPtr col, size_t r
 
     return components;
 };
-
-ColumnPtr getBaseColumn(const DB::Columns & columns, size_t i)
-{
-    ColumnPtr col = columns[i]->convertToFullIfNeeded();
-    if (col->isNullable())
-        return assert_cast<const ColumnNullable &>(*col).getNestedColumnPtr();
-    return col;
-};
 }
 }
 }
diff --git a/src/Core/MySQL/MySQLUtils.h b/src/Core/MySQL/MySQLUtils.h
index 48b78fcf4d72..e77e9c22ee46 100644
--- a/src/Core/MySQL/MySQLUtils.h
+++ b/src/Core/MySQL/MySQLUtils.h
@@ -2,7 +2,6 @@
 
 #include "Core/DecimalFunctions.h"
 #include "DataTypes/IDataType.h"
-#include "base/types.h"
 
 namespace DB
 {
@@ -13,10 +12,6 @@ namespace MySQLUtils
 /// Splits DateTime64 column data at a certain row number into whole and fractional part
 /// Additionally, normalizes the fractional part as if it was scale 6 for MySQL compatibility purposes
 DecimalUtils::DecimalComponents<DateTime64> getNormalizedDateTime64Components(DataTypePtr data_type, ColumnPtr col, size_t row_num);
-
-/// If a column is ColumnSparse/ColumnLowCardinality/ColumnNullable, it is unwrapped in a correct order;
-/// otherwise, the original column is returned
-ColumnPtr getBaseColumn(const DB::Columns & columns, size_t i);
 }
 }
 }
diff --git a/src/Core/MySQL/PacketsProtocolBinary.cpp b/src/Core/MySQL/PacketsProtocolBinary.cpp
index 7f5e3900cb0e..6a85dc685db9 100644
--- a/src/Core/MySQL/PacketsProtocolBinary.cpp
+++ b/src/Core/MySQL/PacketsProtocolBinary.cpp
@@ -4,20 +4,15 @@
 #include <Core/MySQL/PacketsProtocolBinary.h>
 #include "Common/LocalDate.h"
 #include "Common/LocalDateTime.h"
-#include "Columns/ColumnLowCardinality.h"
 #include "Columns/ColumnNullable.h"
 #include "Columns/ColumnVector.h"
-#include "Columns/ColumnsDateTime.h"
 #include "Core/DecimalFunctions.h"
 #include "DataTypes/DataTypeDateTime64.h"
 #include "DataTypes/DataTypeLowCardinality.h"
-#include "DataTypes/DataTypeNullable.h"
-#include "DataTypes/DataTypesNumber.h"
 #include "Formats/FormatSettings.h"
 #include "IO/WriteBufferFromString.h"
 #include "MySQLUtils.h"
 #include "base/DayNum.h"
-#include "base/Decimal.h"
 #include "base/types.h"
 
 namespace DB
@@ -33,14 +28,18 @@ ResultSetRow::ResultSetRow(const Serializations & serializations_, const DataTyp
     FormatSettings format_settings;
     for (size_t i = 0; i < columns.size(); ++i)
     {
-        ColumnPtr col = MySQLUtils::getBaseColumn(columns, i);
-        if (col->isNullAt(row_num))
+        ColumnPtr col = columns[i]->convertToFullIfNeeded();
+        if (col->isNullable())
         {
-            // See https://dev.mysql.com/doc/dev/mysql-server/8.1.0/page_protocol_binary_resultset.html#sect_protocol_binary_resultset_row
-            size_t byte = (i + 2) / 8;
-            int bit = 1 << ((i + 2) % 8);
-            null_bitmap[byte] |= bit;
-            continue; // NULLs are stored in the null bitmap only
+            if (columns[i]->isNullAt(row_num))
+            {
+                // See https://dev.mysql.com/doc/dev/mysql-server/8.1.0/page_protocol_binary_resultset.html#sect_protocol_binary_resultset_row
+                size_t byte = (i + 2) / 8;
+                int bit = 1 << ((i + 2) % 8);
+                null_bitmap[byte] |= bit;
+                continue; // NULLs are stored in the null bitmap only
+            }
+            col = assert_cast<const ColumnNullable &>(*col).getNestedColumnPtr();
         }
 
         DataTypePtr data_type = removeLowCardinalityAndNullable(data_types[i]);
@@ -145,9 +144,13 @@ void ResultSetRow::writePayloadImpl(WriteBuffer & buffer) const
     buffer.write(null_bitmap.data(), null_bitmap_size);
     for (size_t i = 0; i < columns.size(); ++i)
     {
-        ColumnPtr col = MySQLUtils::getBaseColumn(columns, i);
-        if (col->isNullAt(row_num))
-            continue;
+        ColumnPtr col = columns[i]->convertToFullIfNeeded();
+        if (col->isNullable())
+        {
+            if (columns[i]->isNullAt(row_num))
+                continue;
+            col = assert_cast<const ColumnNullable &>(*col).getNestedColumnPtr();
+        }
 
         DataTypePtr data_type = removeLowCardinalityAndNullable(data_types[i]);
         TypeIndex type_index = data_type->getTypeId();
diff --git a/src/Core/MySQL/PacketsProtocolText.cpp b/src/Core/MySQL/PacketsProtocolText.cpp
index 744227f27dc5..d84f66846718 100644
--- a/src/Core/MySQL/PacketsProtocolText.cpp
+++ b/src/Core/MySQL/PacketsProtocolText.cpp
@@ -1,12 +1,13 @@
 #include <Core/MySQL/PacketsProtocolText.h>
+#include <Columns/ColumnNullable.h>
 #include <IO/ReadHelpers.h>
 #include <IO/WriteBufferFromString.h>
 #include <IO/WriteHelpers.h>
 #include "Common/assert_cast.h"
 #include "Core/MySQL/IMySQLWritePacket.h"
 #include "DataTypes/DataTypeLowCardinality.h"
-#include "DataTypes/DataTypeNullable.h"
 #include "DataTypes/DataTypesDecimal.h"
+
 #include "MySQLUtils.h"
 
 namespace DB
@@ -36,7 +37,9 @@ ResultSetRow::ResultSetRow(const Serializations & serializations, const DataType
         else if (type_index == TypeIndex::DateTime64)
         {
             WriteBufferFromOwnString ostr;
-            ColumnPtr col = MySQLUtils::getBaseColumn(columns, i);
+            ColumnPtr col = columns[i]->convertToFullIfNeeded();
+            if (col->isNullable())
+                col = assert_cast<const ColumnNullable &>(*col).getNestedColumnPtr();
             auto components = MySQLUtils::getNormalizedDateTime64Components(data_type, col, row_num);
             writeDateTimeText<'-', ':', ' '>(LocalDateTime(components.whole, DateLUT::instance(getDateTimeTimezone(*data_type))), ostr);
             ostr.write('.');
