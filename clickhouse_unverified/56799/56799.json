{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 56799,
  "instance_id": "ClickHouse__ClickHouse-56799",
  "issue_numbers": [
    "56180"
  ],
  "base_commit": "bf1098951508dff6f1ec5e1787aaf4cae6f3de25",
  "patch": "diff --git a/src/Core/MySQL/MySQLUtils.cpp b/src/Core/MySQL/MySQLUtils.cpp\nindex 8dedbdaa6304..7ba6c32fd0d8 100644\n--- a/src/Core/MySQL/MySQLUtils.cpp\n+++ b/src/Core/MySQL/MySQLUtils.cpp\n@@ -12,8 +12,7 @@ namespace MySQLProtocol\n namespace MySQLUtils\n {\n \n-DecimalUtils::DecimalComponents<DateTime64>\n-getNormalizedDateTime64Components(DataTypePtr data_type, ColumnPtr col, size_t row_num)\n+DecimalUtils::DecimalComponents<DateTime64> getNormalizedDateTime64Components(DataTypePtr data_type, ColumnPtr col, size_t row_num)\n {\n     const auto * date_time_type = typeid_cast<const DataTypeDateTime64 *>(data_type.get());\n \n@@ -52,14 +51,6 @@ getNormalizedDateTime64Components(DataTypePtr data_type, ColumnPtr col, size_t r\n \n     return components;\n };\n-\n-ColumnPtr getBaseColumn(const DB::Columns & columns, size_t i)\n-{\n-    ColumnPtr col = columns[i]->convertToFullIfNeeded();\n-    if (col->isNullable())\n-        return assert_cast<const ColumnNullable &>(*col).getNestedColumnPtr();\n-    return col;\n-};\n }\n }\n }\ndiff --git a/src/Core/MySQL/MySQLUtils.h b/src/Core/MySQL/MySQLUtils.h\nindex 48b78fcf4d72..e77e9c22ee46 100644\n--- a/src/Core/MySQL/MySQLUtils.h\n+++ b/src/Core/MySQL/MySQLUtils.h\n@@ -2,7 +2,6 @@\n \n #include \"Core/DecimalFunctions.h\"\n #include \"DataTypes/IDataType.h\"\n-#include \"base/types.h\"\n \n namespace DB\n {\n@@ -13,10 +12,6 @@ namespace MySQLUtils\n /// Splits DateTime64 column data at a certain row number into whole and fractional part\n /// Additionally, normalizes the fractional part as if it was scale 6 for MySQL compatibility purposes\n DecimalUtils::DecimalComponents<DateTime64> getNormalizedDateTime64Components(DataTypePtr data_type, ColumnPtr col, size_t row_num);\n-\n-/// If a column is ColumnSparse/ColumnLowCardinality/ColumnNullable, it is unwrapped in a correct order;\n-/// otherwise, the original column is returned\n-ColumnPtr getBaseColumn(const DB::Columns & columns, size_t i);\n }\n }\n }\ndiff --git a/src/Core/MySQL/PacketsProtocolBinary.cpp b/src/Core/MySQL/PacketsProtocolBinary.cpp\nindex 7f5e3900cb0e..6a85dc685db9 100644\n--- a/src/Core/MySQL/PacketsProtocolBinary.cpp\n+++ b/src/Core/MySQL/PacketsProtocolBinary.cpp\n@@ -4,20 +4,15 @@\n #include <Core/MySQL/PacketsProtocolBinary.h>\n #include \"Common/LocalDate.h\"\n #include \"Common/LocalDateTime.h\"\n-#include \"Columns/ColumnLowCardinality.h\"\n #include \"Columns/ColumnNullable.h\"\n #include \"Columns/ColumnVector.h\"\n-#include \"Columns/ColumnsDateTime.h\"\n #include \"Core/DecimalFunctions.h\"\n #include \"DataTypes/DataTypeDateTime64.h\"\n #include \"DataTypes/DataTypeLowCardinality.h\"\n-#include \"DataTypes/DataTypeNullable.h\"\n-#include \"DataTypes/DataTypesNumber.h\"\n #include \"Formats/FormatSettings.h\"\n #include \"IO/WriteBufferFromString.h\"\n #include \"MySQLUtils.h\"\n #include \"base/DayNum.h\"\n-#include \"base/Decimal.h\"\n #include \"base/types.h\"\n \n namespace DB\n@@ -33,14 +28,18 @@ ResultSetRow::ResultSetRow(const Serializations & serializations_, const DataTyp\n     FormatSettings format_settings;\n     for (size_t i = 0; i < columns.size(); ++i)\n     {\n-        ColumnPtr col = MySQLUtils::getBaseColumn(columns, i);\n-        if (col->isNullAt(row_num))\n+        ColumnPtr col = columns[i]->convertToFullIfNeeded();\n+        if (col->isNullable())\n         {\n-            // See https://dev.mysql.com/doc/dev/mysql-server/8.1.0/page_protocol_binary_resultset.html#sect_protocol_binary_resultset_row\n-            size_t byte = (i + 2) / 8;\n-            int bit = 1 << ((i + 2) % 8);\n-            null_bitmap[byte] |= bit;\n-            continue; // NULLs are stored in the null bitmap only\n+            if (columns[i]->isNullAt(row_num))\n+            {\n+                // See https://dev.mysql.com/doc/dev/mysql-server/8.1.0/page_protocol_binary_resultset.html#sect_protocol_binary_resultset_row\n+                size_t byte = (i + 2) / 8;\n+                int bit = 1 << ((i + 2) % 8);\n+                null_bitmap[byte] |= bit;\n+                continue; // NULLs are stored in the null bitmap only\n+            }\n+            col = assert_cast<const ColumnNullable &>(*col).getNestedColumnPtr();\n         }\n \n         DataTypePtr data_type = removeLowCardinalityAndNullable(data_types[i]);\n@@ -145,9 +144,13 @@ void ResultSetRow::writePayloadImpl(WriteBuffer & buffer) const\n     buffer.write(null_bitmap.data(), null_bitmap_size);\n     for (size_t i = 0; i < columns.size(); ++i)\n     {\n-        ColumnPtr col = MySQLUtils::getBaseColumn(columns, i);\n-        if (col->isNullAt(row_num))\n-            continue;\n+        ColumnPtr col = columns[i]->convertToFullIfNeeded();\n+        if (col->isNullable())\n+        {\n+            if (columns[i]->isNullAt(row_num))\n+                continue;\n+            col = assert_cast<const ColumnNullable &>(*col).getNestedColumnPtr();\n+        }\n \n         DataTypePtr data_type = removeLowCardinalityAndNullable(data_types[i]);\n         TypeIndex type_index = data_type->getTypeId();\ndiff --git a/src/Core/MySQL/PacketsProtocolText.cpp b/src/Core/MySQL/PacketsProtocolText.cpp\nindex 744227f27dc5..d84f66846718 100644\n--- a/src/Core/MySQL/PacketsProtocolText.cpp\n+++ b/src/Core/MySQL/PacketsProtocolText.cpp\n@@ -1,12 +1,13 @@\n #include <Core/MySQL/PacketsProtocolText.h>\n+#include <Columns/ColumnNullable.h>\n #include <IO/ReadHelpers.h>\n #include <IO/WriteBufferFromString.h>\n #include <IO/WriteHelpers.h>\n #include \"Common/assert_cast.h\"\n #include \"Core/MySQL/IMySQLWritePacket.h\"\n #include \"DataTypes/DataTypeLowCardinality.h\"\n-#include \"DataTypes/DataTypeNullable.h\"\n #include \"DataTypes/DataTypesDecimal.h\"\n+\n #include \"MySQLUtils.h\"\n \n namespace DB\n@@ -36,7 +37,9 @@ ResultSetRow::ResultSetRow(const Serializations & serializations, const DataType\n         else if (type_index == TypeIndex::DateTime64)\n         {\n             WriteBufferFromOwnString ostr;\n-            ColumnPtr col = MySQLUtils::getBaseColumn(columns, i);\n+            ColumnPtr col = columns[i]->convertToFullIfNeeded();\n+            if (col->isNullable())\n+                col = assert_cast<const ColumnNullable &>(*col).getNestedColumnPtr();\n             auto components = MySQLUtils::getNormalizedDateTime64Components(data_type, col, row_num);\n             writeDateTimeText<'-', ':', ' '>(LocalDateTime(components.whole, DateLUT::instance(getDateTimeTimezone(*data_type))), ostr);\n             ostr.write('.');\n",
  "test_patch": "diff --git a/docker/test/integration/mysql_java_client/MySQLJavaClientTest.java b/docker/test/integration/mysql_java_client/MySQLJavaClientTest.java\nindex 1ac21ffe4b4e..445e384ba1a7 100644\n--- a/docker/test/integration/mysql_java_client/MySQLJavaClientTest.java\n+++ b/docker/test/integration/mysql_java_client/MySQLJavaClientTest.java\n@@ -39,8 +39,7 @@ public static void main(String[] args) {\n \n         // useServerPrepStmts=true -> COM_STMT_PREPARE + COM_STMT_EXECUTE -> binary\n         // useServerPrepStmts=false -> COM_QUERY -> text\n-        String jdbcUrl = String.format(\"jdbc:mysql://%s:%s/%s?useSSL=false&useServerPrepStmts=%s\",\n-                host, port, database, binary);\n+        String jdbcUrl = String.format(\"jdbc:mysql://%s:%s/%s?useSSL=false&useServerPrepStmts=%s\", host, port, database, binary);\n \n         try {\n             Class.forName(\"com.mysql.cj.jdbc.Driver\");\n@@ -67,21 +66,21 @@ private static void testSimpleDataTypes(Connection conn) throws SQLException {\n         int rowNum = 1;\n         while (rs.next()) {\n             System.out.printf(\"Row #%d\\n\", rowNum++);\n-            System.out.printf(\"%s, value: %d\\n\", getMysqlType(rs, \"i8\"), rs.getInt(\"i8\"));\n-            System.out.printf(\"%s, value: %d\\n\", getMysqlType(rs, \"i16\"), rs.getInt(\"i16\"));\n-            System.out.printf(\"%s, value: %d\\n\", getMysqlType(rs, \"i32\"), rs.getInt(\"i32\"));\n-            System.out.printf(\"%s, value: %d\\n\", getMysqlType(rs, \"i64\"), rs.getLong(\"i64\"));\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"i128\"), rs.getString(\"i128\"));\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"i256\"), rs.getString(\"i256\"));\n-            System.out.printf(\"%s, value: %d\\n\", getMysqlType(rs, \"ui8\"), rs.getInt(\"ui8\"));\n-            System.out.printf(\"%s, value: %d\\n\", getMysqlType(rs, \"ui16\"), rs.getInt(\"ui16\"));\n-            System.out.printf(\"%s, value: %d\\n\", getMysqlType(rs, \"ui32\"), rs.getLong(\"ui32\"));\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"ui64\"), rs.getString(\"ui64\"));\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"ui128\"), rs.getString(\"ui128\"));\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"ui256\"), rs.getString(\"ui256\"));\n-            System.out.printf(\"%s, value: %f\\n\", getMysqlType(rs, \"f32\"), rs.getFloat(\"f32\"));\n-            System.out.printf(\"%s, value: %f\\n\", getMysqlType(rs, \"f64\"), rs.getFloat(\"f64\"));\n-            System.out.printf(\"%s, value: %b\\n\", getMysqlType(rs, \"b\"), rs.getBoolean(\"b\"));\n+            System.out.printf(\"%s, value: %d, wasNull: %b\\n\", getMysqlType(rs, \"i8\"), rs.getInt(\"i8\"), rs.wasNull());\n+            System.out.printf(\"%s, value: %d, wasNull: %b\\n\", getMysqlType(rs, \"i16\"), rs.getInt(\"i16\"), rs.wasNull());\n+            System.out.printf(\"%s, value: %d, wasNull: %b\\n\", getMysqlType(rs, \"i32\"), rs.getInt(\"i32\"), rs.wasNull());\n+            System.out.printf(\"%s, value: %d, wasNull: %b\\n\", getMysqlType(rs, \"i64\"), rs.getLong(\"i64\"), rs.wasNull());\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"i128\"), rs.getString(\"i128\"), rs.wasNull());\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"i256\"), rs.getString(\"i256\"), rs.wasNull());\n+            System.out.printf(\"%s, value: %d, wasNull: %b\\n\", getMysqlType(rs, \"ui8\"), rs.getInt(\"ui8\"), rs.wasNull());\n+            System.out.printf(\"%s, value: %d, wasNull: %b\\n\", getMysqlType(rs, \"ui16\"), rs.getInt(\"ui16\"), rs.wasNull());\n+            System.out.printf(\"%s, value: %d, wasNull: %b\\n\", getMysqlType(rs, \"ui32\"), rs.getLong(\"ui32\"), rs.wasNull());\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"ui64\"), rs.getString(\"ui64\"), rs.wasNull());\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"ui128\"), rs.getString(\"ui128\"), rs.wasNull());\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"ui256\"), rs.getString(\"ui256\"), rs.wasNull());\n+            System.out.printf(\"%s, value: %f, wasNull: %b\\n\", getMysqlType(rs, \"f32\"), rs.getFloat(\"f32\"), rs.wasNull());\n+            System.out.printf(\"%s, value: %f, wasNull: %b\\n\", getMysqlType(rs, \"f64\"), rs.getFloat(\"f64\"), rs.wasNull());\n+            System.out.printf(\"%s, value: %b, wasNull: %b\\n\", getMysqlType(rs, \"b\"), rs.getBoolean(\"b\"), rs.wasNull());\n         }\n         System.out.println();\n     }\n@@ -92,10 +91,10 @@ private static void testStringTypes(Connection conn) throws SQLException {\n         int rowNum = 1;\n         while (rs.next()) {\n             System.out.printf(\"Row #%d\\n\", rowNum++);\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"s\"), rs.getString(\"s\"));\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"sn\"), rs.getString(\"sn\"));\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"lc\"), rs.getString(\"lc\"));\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"nlc\"), rs.getString(\"nlc\"));\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"s\"), rs.getString(\"s\"), rs.wasNull());\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"sn\"), rs.getString(\"sn\"), rs.wasNull());\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"lc\"), rs.getString(\"lc\"), rs.wasNull());\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"nlc\"), rs.getString(\"nlc\"), rs.wasNull());\n         }\n         System.out.println();\n     }\n@@ -106,10 +105,10 @@ private static void testLowCardinalityAndNullableTypes(Connection conn) throws S\n         int rowNum = 1;\n         while (rs.next()) {\n             System.out.printf(\"Row #%d\\n\", rowNum++);\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"ilc\"), rs.getInt(\"ilc\"));\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"dlc\"), rs.getDate(\"dlc\"));\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"ilc\"), rs.getInt(\"ilc\"), rs.wasNull());\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"dlc\"), rs.getDate(\"dlc\"), rs.wasNull());\n             // NULL int is represented as zero\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"ni\"), rs.getInt(\"ni\"));\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"ni\"), rs.getInt(\"ni\"), rs.wasNull());\n         }\n         System.out.println();\n     }\n@@ -120,12 +119,11 @@ private static void testDecimalTypes(Connection conn) throws SQLException {\n         int rowNum = 1;\n         while (rs.next()) {\n             System.out.printf(\"Row #%d\\n\", rowNum++);\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"d32\"), rs.getBigDecimal(\"d32\").toPlainString());\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"d64\"), rs.getBigDecimal(\"d64\").toPlainString());\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"d128_native\"),\n-                    rs.getBigDecimal(\"d128_native\").toPlainString());\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"d128_text\"), rs.getString(\"d128_text\"));\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"d256\"), rs.getString(\"d256\"));\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"d32\"), rs.getBigDecimal(\"d32\").toPlainString(), rs.wasNull());\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"d64\"), rs.getBigDecimal(\"d64\").toPlainString(), rs.wasNull());\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"d128_native\"), rs.getBigDecimal(\"d128_native\").toPlainString(), rs.wasNull());\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"d128_text\"), rs.getString(\"d128_text\"), rs.wasNull());\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"d256\"), rs.getString(\"d256\"), rs.wasNull());\n         }\n         System.out.println();\n     }\n@@ -136,12 +134,12 @@ private static void testDateTypes(Connection conn) throws SQLException {\n         int rowNum = 1;\n         while (rs.next()) {\n             System.out.printf(\"Row #%d\\n\", rowNum++);\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"d\"), rs.getDate(\"d\"));\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"d32\"), rs.getDate(\"d32\"));\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"dt\"), rs.getTimestamp(\"dt\"));\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"dt64_3\"), rs.getTimestamp(\"dt64_3\"));\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"dt64_6\"), rs.getTimestamp(\"dt64_6\"));\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"dt64_9\"), rs.getTimestamp(\"dt64_9\"));\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"d\"), rs.getDate(\"d\"), rs.wasNull());\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"d32\"), rs.getDate(\"d32\"), rs.wasNull());\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"dt\"), rs.getTimestamp(\"dt\"), rs.wasNull());\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"dt64_3\"), rs.getTimestamp(\"dt64_3\"), rs.wasNull());\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"dt64_6\"), rs.getTimestamp(\"dt64_6\"), rs.wasNull());\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"dt64_9\"), rs.getTimestamp(\"dt64_9\"), rs.wasNull());\n         }\n         System.out.println();\n     }\n@@ -152,13 +150,13 @@ private static void testUnusualDateTime64Scales(Connection conn) throws SQLExcep\n         int rowNum = 1;\n         while (rs.next()) {\n             System.out.printf(\"Row #%d\\n\", rowNum++);\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"dt64_0\"), rs.getTimestamp(\"dt64_0\"));\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"dt64_1\"), rs.getTimestamp(\"dt64_1\"));\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"dt64_2\"), rs.getTimestamp(\"dt64_2\"));\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"dt64_4\"), rs.getTimestamp(\"dt64_4\"));\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"dt64_5\"), rs.getTimestamp(\"dt64_5\"));\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"dt64_7\"), rs.getTimestamp(\"dt64_7\"));\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"dt64_8\"), rs.getTimestamp(\"dt64_8\"));\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"dt64_0\"), rs.getTimestamp(\"dt64_0\"), rs.wasNull());\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"dt64_1\"), rs.getTimestamp(\"dt64_1\"), rs.wasNull());\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"dt64_2\"), rs.getTimestamp(\"dt64_2\"), rs.wasNull());\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"dt64_4\"), rs.getTimestamp(\"dt64_4\"), rs.wasNull());\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"dt64_5\"), rs.getTimestamp(\"dt64_5\"), rs.wasNull());\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"dt64_7\"), rs.getTimestamp(\"dt64_7\"), rs.wasNull());\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"dt64_8\"), rs.getTimestamp(\"dt64_8\"), rs.wasNull());\n         }\n         System.out.println();\n     }\n@@ -169,8 +167,8 @@ private static void testDateTimeTimezones(Connection conn) throws SQLException {\n         int rowNum = 1;\n         while (rs.next()) {\n             System.out.printf(\"Row #%d\\n\", rowNum++);\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"dt\"), rs.getTimestamp(\"dt\"));\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"dt64_3\"), rs.getTimestamp(\"dt64_3\"));\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"dt\"), rs.getTimestamp(\"dt\"), rs.wasNull());\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"dt64_3\"), rs.getTimestamp(\"dt64_3\"), rs.wasNull());\n         }\n         System.out.println();\n     }\n@@ -181,10 +179,10 @@ private static void testMiscTypes(Connection conn) throws SQLException {\n         int rowNum = 1;\n         while (rs.next()) {\n             System.out.printf(\"Row #%d\\n\", rowNum++);\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"a\"), rs.getString(\"a\"));\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"u\"), rs.getString(\"u\"));\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"t\"), rs.getString(\"t\"));\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"m\"), rs.getString(\"m\"));\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"a\"), rs.getString(\"a\"), rs.wasNull());\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"u\"), rs.getString(\"u\"), rs.wasNull());\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"t\"), rs.getString(\"t\"), rs.wasNull());\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"m\"), rs.getString(\"m\"), rs.wasNull());\n         }\n         System.out.println();\n     }\n@@ -196,17 +194,15 @@ private static void testSuspiciousNullableLowCardinalityTypes(Connection conn) t\n         int rowNum = 1;\n         while (rs.next()) {\n             System.out.printf(\"Row #%d\\n\", rowNum++);\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"f\"), rs.getFloat(\"f\"));\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"d\"), rs.getDate(\"d\"));\n-            System.out.printf(\"%s, value: %s\\n\", getMysqlType(rs, \"dt\"), rs.getTimestamp(\"dt\"));\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"f\"), rs.getFloat(\"f\"), rs.wasNull());\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"d\"), rs.getDate(\"d\"), rs.wasNull());\n+            System.out.printf(\"%s, value: %s, wasNull: %b\\n\", getMysqlType(rs, \"dt\"), rs.getTimestamp(\"dt\"), rs.wasNull());\n         }\n         System.out.println();\n     }\n \n     private static String getMysqlType(ResultSet rs, String columnLabel) throws SQLException {\n         ResultSetMetaData meta = rs.getMetaData();\n-        return String.format(\"%s type is %s\", columnLabel,\n-                MysqlType.getByJdbcType(meta.getColumnType(rs.findColumn(columnLabel))));\n+        return String.format(\"%s type is %s\", columnLabel, MysqlType.getByJdbcType(meta.getColumnType(rs.findColumn(columnLabel))));\n     }\n-\n }\ndiff --git a/tests/integration/test_mysql_protocol/java_client.reference b/tests/integration/test_mysql_protocol/java_client.reference\nnew file mode 100644\nindex 000000000000..0e6ab5b5e799\n--- /dev/null\n+++ b/tests/integration/test_mysql_protocol/java_client.reference\n@@ -0,0 +1,133 @@\n+### testSimpleDataTypes\n+Row #1\n+i8 type is TINYINT, value: -128, wasNull: false\n+i16 type is SMALLINT, value: -32768, wasNull: false\n+i32 type is INT, value: -2147483648, wasNull: false\n+i64 type is BIGINT, value: -9223372036854775808, wasNull: false\n+i128 type is CHAR, value: -170141183460469231731687303715884105728, wasNull: false\n+i256 type is CHAR, value: -57896044618658097711785492504343953926634992332820282019728792003956564819968, wasNull: false\n+ui8 type is TINYINT, value: 120, wasNull: false\n+ui16 type is SMALLINT, value: 1234, wasNull: false\n+ui32 type is INT, value: 51234, wasNull: false\n+ui64 type is BIGINT, value: 421342, wasNull: false\n+ui128 type is CHAR, value: 15324355, wasNull: false\n+ui256 type is CHAR, value: 41345135123432, wasNull: false\n+f32 type is FLOAT, value: -0.796896, wasNull: false\n+f64 type is DOUBLE, value: -0.113259, wasNull: false\n+b type is TINYINT, value: true, wasNull: false\n+Row #2\n+i8 type is TINYINT, value: 127, wasNull: false\n+i16 type is SMALLINT, value: 32767, wasNull: false\n+i32 type is INT, value: 2147483647, wasNull: false\n+i64 type is BIGINT, value: 9223372036854775807, wasNull: false\n+i128 type is CHAR, value: 170141183460469231731687303715884105727, wasNull: false\n+i256 type is CHAR, value: 57896044618658097711785492504343953926634992332820282019728792003956564819967, wasNull: false\n+ui8 type is TINYINT, value: 255, wasNull: false\n+ui16 type is SMALLINT, value: 65535, wasNull: false\n+ui32 type is INT, value: 4294967295, wasNull: false\n+ui64 type is BIGINT, value: 18446744073709551615, wasNull: false\n+ui128 type is CHAR, value: 340282366920938463463374607431768211455, wasNull: false\n+ui256 type is CHAR, value: 115792089237316195423570985008687907853269984665640564039457584007913129639935, wasNull: false\n+f32 type is FLOAT, value: 1.234000, wasNull: false\n+f64 type is DOUBLE, value: 3.352451, wasNull: false\n+b type is TINYINT, value: false, wasNull: false\n+\n+### testStringTypes\n+Row #1\n+s type is CHAR, value: 42, wasNull: false\n+sn type is CHAR, value: null, wasNull: true\n+lc type is CHAR, value: test, wasNull: false\n+nlc type is CHAR, value: null, wasNull: true\n+Row #2\n+s type is CHAR, value: foo, wasNull: false\n+sn type is CHAR, value: bar, wasNull: false\n+lc type is CHAR, value: qaz, wasNull: false\n+nlc type is CHAR, value: qux, wasNull: false\n+\n+### testLowCardinalityAndNullableTypes\n+Row #1\n+ilc type is INT, value: -54, wasNull: false\n+dlc type is DATE, value: 1970-01-01, wasNull: false\n+ni type is INT, value: 144, wasNull: false\n+Row #2\n+ilc type is INT, value: 42, wasNull: false\n+dlc type is DATE, value: 2011-02-05, wasNull: false\n+ni type is INT, value: 0, wasNull: true\n+\n+### testDecimalTypes\n+Row #1\n+d32 type is DECIMAL, value: -1.55, wasNull: false\n+d64 type is DECIMAL, value: 6.03, wasNull: false\n+d128_native type is DECIMAL, value: 5, wasNull: false\n+d128_text type is CHAR, value: -1224124.23423, wasNull: false\n+d256 type is CHAR, value: -54342.3, wasNull: false\n+Row #2\n+d32 type is DECIMAL, value: 1234567.89, wasNull: false\n+d64 type is DECIMAL, value: 123456789123456.789, wasNull: false\n+d128_native type is DECIMAL, value: 12345678912345678912.1234567891, wasNull: false\n+d128_text type is CHAR, value: 1234567.8912345678912345678911234567891, wasNull: false\n+d256 type is CHAR, value: 12345678912345678912345678911234567891234567891234567891.12345678911234567891, wasNull: false\n+\n+### testMiscTypes\n+Row #1\n+a type is CHAR, value: ['foo','bar'], wasNull: false\n+u type is CHAR, value: 5da5038d-788f-48c6-b510-babb41c538d3, wasNull: false\n+t type is CHAR, value: (42,'qaz'), wasNull: false\n+m type is CHAR, value: {'qux':144,'text':255}, wasNull: false\n+\n+### testDateTypes\n+Row #1\n+d type is DATE, value: 1970-01-01, wasNull: false\n+d32 type is DATE, value: 1900-01-01, wasNull: false\n+dt type is TIMESTAMP, value: 1970-01-01 00:00:00.0, wasNull: false\n+dt64_3 type is TIMESTAMP, value: 1900-01-01 00:00:00.001, wasNull: false\n+dt64_6 type is TIMESTAMP, value: 1900-01-01 00:00:00.000001, wasNull: false\n+dt64_9 type is TIMESTAMP, value: 1900-01-01 00:00:00.0, wasNull: false\n+Row #2\n+d type is DATE, value: 2149-06-06, wasNull: false\n+d32 type is DATE, value: 2178-04-16, wasNull: false\n+dt type is TIMESTAMP, value: 2106-02-07 06:28:15.0, wasNull: false\n+dt64_3 type is TIMESTAMP, value: 2106-02-07 06:28:15.123, wasNull: false\n+dt64_6 type is TIMESTAMP, value: 2106-02-07 06:28:15.123456, wasNull: false\n+dt64_9 type is TIMESTAMP, value: 2106-02-07 06:28:15.123456, wasNull: false\n+\n+### testUnusualDateTime64Scales\n+Row #1\n+dt64_0 type is TIMESTAMP, value: 2022-04-13 03:17:45.0, wasNull: false\n+dt64_1 type is TIMESTAMP, value: 2022-04-13 03:17:45.1, wasNull: false\n+dt64_2 type is TIMESTAMP, value: 2022-04-13 03:17:45.12, wasNull: false\n+dt64_4 type is TIMESTAMP, value: 2022-04-13 03:17:45.1234, wasNull: false\n+dt64_5 type is TIMESTAMP, value: 2022-04-13 03:17:45.12345, wasNull: false\n+dt64_7 type is TIMESTAMP, value: 2022-04-13 03:17:45.123456, wasNull: false\n+dt64_8 type is TIMESTAMP, value: 2022-04-13 03:17:45.123456, wasNull: false\n+Row #2\n+dt64_0 type is TIMESTAMP, value: 2022-04-13 03:17:45.0, wasNull: false\n+dt64_1 type is TIMESTAMP, value: 2022-04-13 03:17:45.1, wasNull: false\n+dt64_2 type is TIMESTAMP, value: 2022-04-13 03:17:45.01, wasNull: false\n+dt64_4 type is TIMESTAMP, value: 2022-04-13 03:17:45.0001, wasNull: false\n+dt64_5 type is TIMESTAMP, value: 2022-04-13 03:17:45.00001, wasNull: false\n+dt64_7 type is TIMESTAMP, value: 2022-04-13 03:17:45.0, wasNull: false\n+dt64_8 type is TIMESTAMP, value: 2022-04-13 03:17:45.0, wasNull: false\n+\n+### testDateTimeTimezones\n+Row #1\n+dt type is TIMESTAMP, value: 1970-01-01 01:00:00.0, wasNull: false\n+dt64_3 type is TIMESTAMP, value: 1969-12-31 16:00:00.0, wasNull: false\n+Row #2\n+dt type is TIMESTAMP, value: 2022-09-04 20:31:05.0, wasNull: false\n+dt64_3 type is TIMESTAMP, value: 2022-09-04 20:31:05.022, wasNull: false\n+\n+### testSuspiciousNullableLowCardinalityTypes\n+Row #1\n+f type is FLOAT, value: 1.0, wasNull: false\n+d type is DATE, value: 2022-04-15, wasNull: false\n+dt type is TIMESTAMP, value: 2021-06-04 13:55:11.0, wasNull: false\n+Row #2\n+f type is FLOAT, value: 3.14, wasNull: false\n+d type is DATE, value: 1970-01-01, wasNull: false\n+dt type is TIMESTAMP, value: 1970-01-01 00:00:00.0, wasNull: false\n+Row #3\n+f type is FLOAT, value: 0.0, wasNull: true\n+d type is DATE, value: null, wasNull: true\n+dt type is TIMESTAMP, value: null, wasNull: true\n+\ndiff --git a/tests/integration/test_mysql_protocol/java_client_binary.reference b/tests/integration/test_mysql_protocol/java_client_binary.reference\ndeleted file mode 100644\nindex 763b75774874..000000000000\n--- a/tests/integration/test_mysql_protocol/java_client_binary.reference\n+++ /dev/null\n@@ -1,129 +0,0 @@\n-### testSimpleDataTypes\n-Row #1\n-i8 type is TINYINT, value: -128\n-i16 type is SMALLINT, value: -32768\n-i32 type is INT, value: -2147483648\n-i64 type is BIGINT, value: -9223372036854775808\n-i128 type is CHAR, value: -170141183460469231731687303715884105728\n-i256 type is CHAR, value: -57896044618658097711785492504343953926634992332820282019728792003956564819968\n-ui8 type is TINYINT, value: 120\n-ui16 type is SMALLINT, value: 1234\n-ui32 type is INT, value: 51234\n-ui64 type is BIGINT, value: 421342\n-ui128 type is CHAR, value: 15324355\n-ui256 type is CHAR, value: 41345135123432\n-f32 type is FLOAT, value: -0.796896\n-f64 type is DOUBLE, value: -0.113259\n-b type is TINYINT, value: true\n-Row #2\n-i8 type is TINYINT, value: 127\n-i16 type is SMALLINT, value: 32767\n-i32 type is INT, value: 2147483647\n-i64 type is BIGINT, value: 9223372036854775807\n-i128 type is CHAR, value: 170141183460469231731687303715884105727\n-i256 type is CHAR, value: 57896044618658097711785492504343953926634992332820282019728792003956564819967\n-ui8 type is TINYINT, value: 255\n-ui16 type is SMALLINT, value: 65535\n-ui32 type is INT, value: 4294967295\n-ui64 type is BIGINT, value: 18446744073709551615\n-ui128 type is CHAR, value: 340282366920938463463374607431768211455\n-ui256 type is CHAR, value: 115792089237316195423570985008687907853269984665640564039457584007913129639935\n-f32 type is FLOAT, value: 1.234000\n-f64 type is DOUBLE, value: 3.352451\n-b type is TINYINT, value: false\n-\n-### testStringTypes\n-Row #1\n-s type is CHAR, value: 42\n-sn type is CHAR, value: \u1d3a\u1d41\u1d38\u1d38\n-lc type is CHAR, value: test\n-nlc type is CHAR, value: \u1d3a\u1d41\u1d38\u1d38\n-Row #2\n-s type is CHAR, value: foo\n-sn type is CHAR, value: bar\n-lc type is CHAR, value: qaz\n-nlc type is CHAR, value: qux\n-\n-### testLowCardinalityAndNullableTypes\n-Row #1\n-ilc type is INT, value: -54\n-dlc type is DATE, value: 1970-01-01\n-ni type is INT, value: 144\n-Row #2\n-ilc type is INT, value: 42\n-dlc type is DATE, value: 2011-02-05\n-ni type is INT, value: 0\n-\n-### testDecimalTypes\n-Row #1\n-d32 type is DECIMAL, value: -1.55\n-d64 type is DECIMAL, value: 6.03\n-d128_native type is DECIMAL, value: 5\n-d128_text type is CHAR, value: -1224124.23423\n-d256 type is CHAR, value: -54342.3\n-Row #2\n-d32 type is DECIMAL, value: 1234567.89\n-d64 type is DECIMAL, value: 123456789123456.789\n-d128_native type is DECIMAL, value: 12345678912345678912.1234567891\n-d128_text type is CHAR, value: 1234567.8912345678912345678911234567891\n-d256 type is CHAR, value: 12345678912345678912345678911234567891234567891234567891.12345678911234567891\n-\n-### testMiscTypes\n-Row #1\n-a type is CHAR, value: ['foo','bar']\n-u type is CHAR, value: 5da5038d-788f-48c6-b510-babb41c538d3\n-t type is CHAR, value: (42,'qaz')\n-m type is CHAR, value: {'qux':144,'text':255}\n-\n-### testDateTypes\n-Row #1\n-d type is DATE, value: 1970-01-01\n-d32 type is DATE, value: 1900-01-01\n-dt type is TIMESTAMP, value: 1970-01-01 00:00:00.0\n-dt64_3 type is TIMESTAMP, value: 1900-01-01 00:00:00.001\n-dt64_6 type is TIMESTAMP, value: 1900-01-01 00:00:00.000001\n-dt64_9 type is TIMESTAMP, value: 1900-01-01 00:00:00.0\n-Row #2\n-d type is DATE, value: 2149-06-06\n-d32 type is DATE, value: 2178-04-16\n-dt type is TIMESTAMP, value: 2106-02-07 06:28:15.0\n-dt64_3 type is TIMESTAMP, value: 2106-02-07 06:28:15.123\n-dt64_6 type is TIMESTAMP, value: 2106-02-07 06:28:15.123456\n-dt64_9 type is TIMESTAMP, value: 2106-02-07 06:28:15.123456\n-\n-### testUnusualDateTime64Scales\n-Row #1\n-dt64_0 type is TIMESTAMP, value: 2022-04-13 03:17:45.0\n-dt64_1 type is TIMESTAMP, value: 2022-04-13 03:17:45.1\n-dt64_2 type is TIMESTAMP, value: 2022-04-13 03:17:45.12\n-dt64_4 type is TIMESTAMP, value: 2022-04-13 03:17:45.1234\n-dt64_5 type is TIMESTAMP, value: 2022-04-13 03:17:45.12345\n-dt64_7 type is TIMESTAMP, value: 2022-04-13 03:17:45.123456\n-dt64_8 type is TIMESTAMP, value: 2022-04-13 03:17:45.123456\n-Row #2\n-dt64_0 type is TIMESTAMP, value: 2022-04-13 03:17:45.0\n-dt64_1 type is TIMESTAMP, value: 2022-04-13 03:17:45.1\n-dt64_2 type is TIMESTAMP, value: 2022-04-13 03:17:45.01\n-dt64_4 type is TIMESTAMP, value: 2022-04-13 03:17:45.0001\n-dt64_5 type is TIMESTAMP, value: 2022-04-13 03:17:45.00001\n-dt64_7 type is TIMESTAMP, value: 2022-04-13 03:17:45.0\n-dt64_8 type is TIMESTAMP, value: 2022-04-13 03:17:45.0\n-\n-### testDateTimeTimezones\n-Row #1\n-dt type is TIMESTAMP, value: 1970-01-01 01:00:00.0\n-dt64_3 type is TIMESTAMP, value: 1969-12-31 16:00:00.0\n-Row #2\n-dt type is TIMESTAMP, value: 2022-09-04 20:31:05.0\n-dt64_3 type is TIMESTAMP, value: 2022-09-04 20:31:05.022\n-\n-### testSuspiciousNullableLowCardinalityTypes\n-Row #1\n-f type is FLOAT, value: 1.0\n-d type is DATE, value: 2022-04-15\n-dt type is TIMESTAMP, value: 2021-06-04 13:55:11.0\n-Row #2\n-f type is FLOAT, value: 3.14\n-d type is DATE, value: 1970-01-01\n-dt type is TIMESTAMP, value: 1970-01-01 00:00:00.0\n-\ndiff --git a/tests/integration/test_mysql_protocol/java_client_test.sql b/tests/integration/test_mysql_protocol/java_client_test.sql\nindex 1bcb29b8bee2..311c315bae33 100644\n--- a/tests/integration/test_mysql_protocol/java_client_test.sql\n+++ b/tests/integration/test_mysql_protocol/java_client_test.sql\n@@ -145,4 +145,5 @@ CREATE OR REPLACE TABLE suspicious_nullable_low_cardinality_types\n \n INSERT INTO suspicious_nullable_low_cardinality_types\n VALUES (1,    '2022-04-15', '2021-06-04 13:55:11'),\n-       (3.14, '1970-01-01', '1970-01-01 00:00:00');\n+       (3.14, '1970-01-01', '1970-01-01 00:00:00'),\n+       (NULL, NULL, NULL);\ndiff --git a/tests/integration/test_mysql_protocol/java_client_text.reference b/tests/integration/test_mysql_protocol/java_client_text.reference\ndeleted file mode 100644\nindex f0dc390bea68..000000000000\n--- a/tests/integration/test_mysql_protocol/java_client_text.reference\n+++ /dev/null\n@@ -1,129 +0,0 @@\n-### testSimpleDataTypes\n-Row #1\n-i8 type is TINYINT, value: -128\n-i16 type is SMALLINT, value: -32768\n-i32 type is INT, value: -2147483648\n-i64 type is BIGINT, value: -9223372036854775808\n-i128 type is CHAR, value: -170141183460469231731687303715884105728\n-i256 type is CHAR, value: -57896044618658097711785492504343953926634992332820282019728792003956564819968\n-ui8 type is TINYINT, value: 120\n-ui16 type is SMALLINT, value: 1234\n-ui32 type is INT, value: 51234\n-ui64 type is BIGINT, value: 421342\n-ui128 type is CHAR, value: 15324355\n-ui256 type is CHAR, value: 41345135123432\n-f32 type is FLOAT, value: -0.796896\n-f64 type is DOUBLE, value: -0.113259\n-b type is TINYINT, value: true\n-Row #2\n-i8 type is TINYINT, value: 127\n-i16 type is SMALLINT, value: 32767\n-i32 type is INT, value: 2147483647\n-i64 type is BIGINT, value: 9223372036854775807\n-i128 type is CHAR, value: 170141183460469231731687303715884105727\n-i256 type is CHAR, value: 57896044618658097711785492504343953926634992332820282019728792003956564819967\n-ui8 type is TINYINT, value: 255\n-ui16 type is SMALLINT, value: 65535\n-ui32 type is INT, value: 4294967295\n-ui64 type is BIGINT, value: 18446744073709551615\n-ui128 type is CHAR, value: 340282366920938463463374607431768211455\n-ui256 type is CHAR, value: 115792089237316195423570985008687907853269984665640564039457584007913129639935\n-f32 type is FLOAT, value: 1.234000\n-f64 type is DOUBLE, value: 3.352451\n-b type is TINYINT, value: false\n-\n-### testStringTypes\n-Row #1\n-s type is CHAR, value: 42\n-sn type is CHAR, value: null\n-lc type is CHAR, value: test\n-nlc type is CHAR, value: null\n-Row #2\n-s type is CHAR, value: foo\n-sn type is CHAR, value: bar\n-lc type is CHAR, value: qaz\n-nlc type is CHAR, value: qux\n-\n-### testLowCardinalityAndNullableTypes\n-Row #1\n-ilc type is INT, value: -54\n-dlc type is DATE, value: 1970-01-01\n-ni type is INT, value: 144\n-Row #2\n-ilc type is INT, value: 42\n-dlc type is DATE, value: 2011-02-05\n-ni type is INT, value: 0\n-\n-### testDecimalTypes\n-Row #1\n-d32 type is DECIMAL, value: -1.55\n-d64 type is DECIMAL, value: 6.03\n-d128_native type is DECIMAL, value: 5\n-d128_text type is CHAR, value: -1224124.23423\n-d256 type is CHAR, value: -54342.3\n-Row #2\n-d32 type is DECIMAL, value: 1234567.89\n-d64 type is DECIMAL, value: 123456789123456.789\n-d128_native type is DECIMAL, value: 12345678912345678912.1234567891\n-d128_text type is CHAR, value: 1234567.8912345678912345678911234567891\n-d256 type is CHAR, value: 12345678912345678912345678911234567891234567891234567891.12345678911234567891\n-\n-### testMiscTypes\n-Row #1\n-a type is CHAR, value: ['foo','bar']\n-u type is CHAR, value: 5da5038d-788f-48c6-b510-babb41c538d3\n-t type is CHAR, value: (42,'qaz')\n-m type is CHAR, value: {'qux':144,'text':255}\n-\n-### testDateTypes\n-Row #1\n-d type is DATE, value: 1970-01-01\n-d32 type is DATE, value: 1900-01-01\n-dt type is TIMESTAMP, value: 1970-01-01 00:00:00.0\n-dt64_3 type is TIMESTAMP, value: 1900-01-01 00:00:00.001\n-dt64_6 type is TIMESTAMP, value: 1900-01-01 00:00:00.000001\n-dt64_9 type is TIMESTAMP, value: 1900-01-01 00:00:00.0\n-Row #2\n-d type is DATE, value: 2149-06-06\n-d32 type is DATE, value: 2178-04-16\n-dt type is TIMESTAMP, value: 2106-02-07 06:28:15.0\n-dt64_3 type is TIMESTAMP, value: 2106-02-07 06:28:15.123\n-dt64_6 type is TIMESTAMP, value: 2106-02-07 06:28:15.123456\n-dt64_9 type is TIMESTAMP, value: 2106-02-07 06:28:15.123456\n-\n-### testUnusualDateTime64Scales\n-Row #1\n-dt64_0 type is TIMESTAMP, value: 2022-04-13 03:17:45.0\n-dt64_1 type is TIMESTAMP, value: 2022-04-13 03:17:45.1\n-dt64_2 type is TIMESTAMP, value: 2022-04-13 03:17:45.12\n-dt64_4 type is TIMESTAMP, value: 2022-04-13 03:17:45.1234\n-dt64_5 type is TIMESTAMP, value: 2022-04-13 03:17:45.12345\n-dt64_7 type is TIMESTAMP, value: 2022-04-13 03:17:45.123456\n-dt64_8 type is TIMESTAMP, value: 2022-04-13 03:17:45.123456\n-Row #2\n-dt64_0 type is TIMESTAMP, value: 2022-04-13 03:17:45.0\n-dt64_1 type is TIMESTAMP, value: 2022-04-13 03:17:45.1\n-dt64_2 type is TIMESTAMP, value: 2022-04-13 03:17:45.01\n-dt64_4 type is TIMESTAMP, value: 2022-04-13 03:17:45.0001\n-dt64_5 type is TIMESTAMP, value: 2022-04-13 03:17:45.00001\n-dt64_7 type is TIMESTAMP, value: 2022-04-13 03:17:45.0\n-dt64_8 type is TIMESTAMP, value: 2022-04-13 03:17:45.0\n-\n-### testDateTimeTimezones\n-Row #1\n-dt type is TIMESTAMP, value: 1970-01-01 01:00:00.0\n-dt64_3 type is TIMESTAMP, value: 1969-12-31 16:00:00.0\n-Row #2\n-dt type is TIMESTAMP, value: 2022-09-04 20:31:05.0\n-dt64_3 type is TIMESTAMP, value: 2022-09-04 20:31:05.022\n-\n-### testSuspiciousNullableLowCardinalityTypes\n-Row #1\n-f type is FLOAT, value: 1.0\n-d type is DATE, value: 2022-04-15\n-dt type is TIMESTAMP, value: 2021-06-04 13:55:11.0\n-Row #2\n-f type is FLOAT, value: 3.14\n-d type is DATE, value: 1970-01-01\n-dt type is TIMESTAMP, value: 1970-01-01 00:00:00.0\n-\ndiff --git a/tests/integration/test_mysql_protocol/test.py b/tests/integration/test_mysql_protocol/test.py\nindex 6a6831467f80..7a69d07633cf 100644\n--- a/tests/integration/test_mysql_protocol/test.py\n+++ b/tests/integration/test_mysql_protocol/test.py\n@@ -799,7 +799,7 @@ def test_java_client_text(started_cluster, java_container):\n         demux=True,\n     )\n \n-    with open(os.path.join(SCRIPT_DIR, \"java_client_text.reference\")) as fp:\n+    with open(os.path.join(SCRIPT_DIR, \"java_client.reference\")) as fp:\n         reference = fp.read()\n \n     assert stdout.decode() == reference\n@@ -813,7 +813,7 @@ def test_java_client_binary(started_cluster, java_container):\n         demux=True,\n     )\n \n-    with open(os.path.join(SCRIPT_DIR, \"java_client_binary.reference\")) as fp:\n+    with open(os.path.join(SCRIPT_DIR, \"java_client.reference\")) as fp:\n         reference = fp.read()\n \n     assert stdout.decode() == reference\n",
  "problem_statement": "Tableau converts null in nullable numbers and dates to \"0\" or \"01/01/1970\" when using the MySQL Clickhouse connector\nWhen using Tableau, and connecting to Clickhouse through the MySQL connector, we noticed that it doesn't handle `Nullable` fields very well.\r\n\r\nWhen running this SQL in Tableau:\r\n\r\n```sql\r\nSELECT NULL AS number_nullable, NULL AS string_nullable, NULL AS date_nullable\r\nUNION ALL\r\nSELECT 123 AS number_nullable, 'abc' AS string_nullable, CURDATE() AS date_nullable;\r\n```\r\n\r\nTo a regular MySQL instance (all good here!):\r\n\r\n<p align=\"center\"><img width=\"500\" src=\"https://github.com/ClickHouse/ClickHouse/assets/10865165/5eef32a8-dc47-4b51-a499-e65d04c6d45e\" /></p>\r\n\r\nWhen running it to the MySQL Clickhouse instance:\r\n- the `NULL` value in `date_nullable` becomes `01/01/1970`\r\n- `NULL` value in `number_nullable` becomes `0`\r\n\r\n<p align=\"center\"><img width=\"500\" src=\"https://github.com/ClickHouse/ClickHouse/assets/10865165/102a1025-987a-4aa1-88a4-7f12ffffe7f7\" /> </p>\r\n\r\nI am not able to reproduce this using other MySQL clients, only Tableau. When connecting with `mysql` in my terminal:\r\n\r\nTo a regular MySQL instance (all good):\r\n\r\n```\r\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\r\nYour MySQL connection id is 21\r\nServer version: 8.1.0 Homebrew\r\n\r\nCopyright (c) 2000, 2023, Oracle and/or its affiliates.\r\n\r\nOracle is a registered trademark of Oracle Corporation and/or its\r\naffiliates. Other names may be trademarks of their respective\r\nowners.\r\n\r\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\r\n\r\nmysql> SELECT NULL AS number_nullable, NULL AS string_nullable, NULL AS date_nullable\r\n    -> UNION ALL\r\n    -> SELECT 123 AS number_nullable, 'abc' AS string_nullable, CURDATE() AS date_nullable;\r\n+-----------------+-----------------+---------------+\r\n| number_nullable | string_nullable | date_nullable |\r\n+-----------------+-----------------+---------------+\r\n|            NULL | NULL            | NULL          |\r\n|             123 | abc             | 2023-10-31    |\r\n+-----------------+-----------------+---------------+\r\n2 rows in set (0.01 sec)\r\n```\r\n\r\nTo the MySQL Clickhouse instance (also all good!):\r\n\r\n```\r\nWelcome to the MySQL monitor.  Commands end with ; or \\g.\r\nYour MySQL connection id is 23\r\nServer version: 23.10.1.1795-ClickHouse\r\n\r\nCopyright (c) 2000, 2023, Oracle and/or its affiliates.\r\n\r\nOracle is a registered trademark of Oracle Corporation and/or its\r\naffiliates. Other names may be trademarks of their respective\r\nowners.\r\n\r\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\r\n\r\nmysql> SELECT NULL AS number_nullable, NULL AS string_nullable, NULL AS date_nullable\r\n    -> UNION ALL\r\n    -> SELECT 123 AS number_nullable, 'abc' AS string_nullable, CURDATE() AS date_nullable;\r\n+-----------------+-----------------+---------------+\r\n| number_nullable | string_nullable | date_nullable |\r\n+-----------------+-----------------+---------------+\r\n|             123 | abc             | 2023-10-31    |\r\n|            NULL | NULL            | NULL          |\r\n+-----------------+-----------------+---------------+\r\n2 rows in set (0.10 sec)\r\nRead 2 rows, 2.00 B in 0.001288 sec., 1552 rows/sec., 1.52 KiB/sec.\r\n```\r\n\r\n\r\n**Describe what's wrong**\r\n\r\nTableau converts null in a nullable number or date field to 0 instead of showing it as `NULL`. Strings work as expected.\r\n\r\nIs there anything we can do on the Clickhouse side to make Tableau understand the schema better? \r\n\r\nThis might very well be a Tableau bug, but hopefully there is a way to fix it from the Clickhouse side.\r\n\r\n**How to reproduce**\r\n\r\n* Which ClickHouse server version to use: latest master\r\n* Which interface to use: MySQL\r\n\r\n**Expected behavior**\r\n\r\nThe MySQL Clickhouse connector should behave the same way as a regular MySQL instance in tableau when it comes to parsing `nullable` values\n",
  "hints_text": "",
  "created_at": "2023-11-15T16:00:37Z"
}