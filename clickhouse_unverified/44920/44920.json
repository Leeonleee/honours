{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 44920,
  "instance_id": "ClickHouse__ClickHouse-44920",
  "issue_numbers": [
    "44866"
  ],
  "base_commit": "dadd96ba6f96575e1c2d57980c73409fda365a44",
  "patch": "diff --git a/src/Interpreters/ExpressionAnalyzer.cpp b/src/Interpreters/ExpressionAnalyzer.cpp\nindex a3db464fbbb1..1079ed3f7140 100644\n--- a/src/Interpreters/ExpressionAnalyzer.cpp\n+++ b/src/Interpreters/ExpressionAnalyzer.cpp\n@@ -1668,12 +1668,14 @@ ActionsDAGPtr SelectQueryExpressionAnalyzer::appendProjectResult(ExpressionActio\n     ExpressionActionsChain::Step & step = chain.lastStep(aggregated_columns);\n \n     NamesWithAliases result_columns;\n+    NameSet required_result_columns_set(required_result_columns.begin(), required_result_columns.end());\n \n     ASTs asts = select_query->select()->children;\n     for (const auto & ast : asts)\n     {\n         String result_name = ast->getAliasOrColumnName();\n-        if (required_result_columns.empty() || required_result_columns.contains(result_name))\n+\n+        if (required_result_columns_set.empty() || required_result_columns_set.contains(result_name))\n         {\n             std::string source_name = ast->getColumnName();\n \n@@ -1709,6 +1711,15 @@ ActionsDAGPtr SelectQueryExpressionAnalyzer::appendProjectResult(ExpressionActio\n \n     auto actions = chain.getLastActions();\n     actions->project(result_columns);\n+\n+    if (!required_result_columns.empty())\n+    {\n+        result_columns.clear();\n+        for (const auto & column : required_result_columns)\n+            result_columns.emplace_back(column, std::string{});\n+        actions->project(result_columns);\n+    }\n+\n     return actions;\n }\n \ndiff --git a/src/Interpreters/ExpressionAnalyzer.h b/src/Interpreters/ExpressionAnalyzer.h\nindex ddb41a00f842..3d6261fe7d11 100644\n--- a/src/Interpreters/ExpressionAnalyzer.h\n+++ b/src/Interpreters/ExpressionAnalyzer.h\n@@ -307,7 +307,7 @@ class SelectQueryExpressionAnalyzer : public ExpressionAnalyzer\n         const TreeRewriterResultPtr & syntax_analyzer_result_,\n         ContextPtr context_,\n         const StorageMetadataPtr & metadata_snapshot_,\n-        const NameSet & required_result_columns_ = {},\n+        const Names & required_result_columns_ = {},\n         bool do_global_ = false,\n         const SelectQueryOptions & options_ = {},\n         PreparedSetsPtr prepared_sets_ = nullptr)\n@@ -364,7 +364,7 @@ class SelectQueryExpressionAnalyzer : public ExpressionAnalyzer\n private:\n     StorageMetadataPtr metadata_snapshot;\n     /// If non-empty, ignore all expressions not from this list.\n-    NameSet required_result_columns;\n+    Names required_result_columns;\n     SelectQueryOptions query_options;\n \n     JoinPtr makeJoin(\ndiff --git a/src/Interpreters/InterpreterSelectQuery.cpp b/src/Interpreters/InterpreterSelectQuery.cpp\nindex 9111cad3e165..64999b3ff6e1 100644\n--- a/src/Interpreters/InterpreterSelectQuery.cpp\n+++ b/src/Interpreters/InterpreterSelectQuery.cpp\n@@ -568,7 +568,7 @@ InterpreterSelectQuery::InterpreterSelectQuery(\n             syntax_analyzer_result,\n             context,\n             metadata_snapshot,\n-            NameSet(required_result_column_names.begin(), required_result_column_names.end()),\n+            required_result_column_names,\n             !options.only_analyze,\n             options,\n             prepared_sets);\ndiff --git a/src/Interpreters/InterpreterSelectWithUnionQuery.cpp b/src/Interpreters/InterpreterSelectWithUnionQuery.cpp\nindex c695dae6d534..3bfd8e3bfe0c 100644\n--- a/src/Interpreters/InterpreterSelectWithUnionQuery.cpp\n+++ b/src/Interpreters/InterpreterSelectWithUnionQuery.cpp\n@@ -165,7 +165,13 @@ InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(\n         for (size_t query_num = 0; query_num < num_children; ++query_num)\n         {\n             headers[query_num] = nested_interpreters[query_num]->getSampleBlock();\n-            const auto & current_required_result_column_names = required_result_column_names_for_other_selects[query_num];\n+            /// Here we check that, in case if required_result_column_names were specified,\n+            /// nested interpreter returns exactly it. Except if query requires full header.\n+            /// The code aboew is written in a way that for 0th query required_result_column_names_for_other_selects[0]\n+            /// is an empty list, and we should use required_result_column_names instead.\n+            const auto & current_required_result_column_names = (query_num == 0 && !require_full_header)\n+                ? required_result_column_names\n+                : required_result_column_names_for_other_selects[query_num];\n             if (!current_required_result_column_names.empty())\n             {\n                 const auto & header_columns = headers[query_num].getNames();\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02517_union_columns_order.reference b/tests/queries/0_stateless/02517_union_columns_order.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/02517_union_columns_order.sql b/tests/queries/0_stateless/02517_union_columns_order.sql\nnew file mode 100644\nindex 000000000000..c02dacfa0dfb\n--- /dev/null\n+++ b/tests/queries/0_stateless/02517_union_columns_order.sql\n@@ -0,0 +1,32 @@\n+CREATE TABLE t1 (c0 Int32, PRIMARY KEY (c0)) ENGINE = MergeTree;\n+SELECT DISTINCT *\n+FROM\n+(\n+    SELECT DISTINCT\n+        cos(sign(exp(t1.c0))),\n+        -min2(pow(t1.c0, t1.c0), intDiv(t1.c0, t1.c0)),\n+        t1.c0,\n+        t1.c0,\n+        erf(abs(-t1.c0))\n+    FROM t1\n+    WHERE t1.c0 > 0\n+    UNION ALL\n+    SELECT DISTINCT\n+        cos(sign(exp(t1.c0))),\n+        -min2(pow(t1.c0, t1.c0), intDiv(t1.c0, t1.c0)),\n+        t1.c0,\n+        t1.c0,\n+        erf(abs(-t1.c0))\n+    FROM t1\n+    WHERE NOT (t1.c0 > 0)\n+    UNION ALL\n+    SELECT DISTINCT\n+        cos(sign(exp(t1.c0))),\n+        -min2(pow(t1.c0, t1.c0), intDiv(t1.c0, t1.c0)),\n+        t1.c0,\n+        t1.c0,\n+        erf(abs(-t1.c0))\n+    FROM t1\n+    WHERE t1.c0 > (0 IS NULL)\n+);\n+\n",
  "problem_statement": "LOGICAL_ERROR: Different order of columns in UNION subquery\n```\r\nCREATE TABLE t1 (c0 Int32, PRIMARY KEY (c0)) ENGINE = MergeTree;\r\n```\r\n```\r\nSELECT DISTINCT *\r\nFROM\r\n(\r\n    SELECT DISTINCT\r\n        cos(sign(exp(t1.c0))),\r\n        -min2(pow(t1.c0, t1.c0), intDiv(t1.c0, t1.c0)),\r\n        t1.c0,\r\n        t1.c0,\r\n        erf(abs(-t1.c0))\r\n    FROM t1\r\n    WHERE t1.c0 > 0\r\n    UNION ALL\r\n    SELECT DISTINCT\r\n        cos(sign(exp(t1.c0))),\r\n        -min2(pow(t1.c0, t1.c0), intDiv(t1.c0, t1.c0)),\r\n        t1.c0,\r\n        t1.c0,\r\n        erf(abs(-t1.c0))\r\n    FROM t1\r\n    WHERE NOT (t1.c0 > 0)\r\n    UNION ALL\r\n    SELECT DISTINCT\r\n        cos(sign(exp(t1.c0))),\r\n        -min2(pow(t1.c0, t1.c0), intDiv(t1.c0, t1.c0)),\r\n        t1.c0,\r\n        t1.c0,\r\n        erf(abs(-t1.c0))\r\n    FROM t1\r\n    WHERE t1.c0 > (0 IS NULL)\r\n)\r\n```\r\n\r\n```\r\nReceived exception from server (version 22.13.1):\r\nCode: 49. DB::Exception: Received from localhost:9000. DB::Exception: Different order of columns in UNION subquery: cos(sign(exp(c0))), negate(min2(pow(c0, c0), intDiv(c0, c0))), c0, erf(abs(negate(c0))) and cos(sign(exp(c0))), negate(min2(pow(c0, c0), intDiv(c0, c0))), c0, erf(abs(negate(c0))), c0. Stack trace:\r\n\r\n0. ./build_docker/../src/Common/Exception.cpp:77: DB::Exception::Exception(DB::Exception::MessageMasked const&, int, bool) @ 0xebc695a in /home/ubuntu/release-ch/clickhouse\r\n1. ./build_docker/../contrib/llvm-project/libcxx/include/string:1499: DB::Exception::Exception<fmt::v8::join_view<std::__1::__wrap_iter<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>, std::__1::__wrap_iter<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>, char>, fmt::v8::join_view<std::__1::__wrap_iter<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>, std::__1::__wrap_iter<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>, char>>(int, fmt::v8::basic_format_string<char, fmt::v8::type_identity<fmt::v8::join_view<std::__1::__wrap_iter<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>, std::__1::__wrap_iter<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>, char>>::type, fmt::v8::type_identity<fmt::v8::join_view<std::__1::__wrap_iter<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>, std::__1::__wrap_iter<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>, char>>::type>, fmt::v8::join_view<std::__1::__wrap_iter<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>, std::__1::__wrap_iter<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>, char>&&, fmt::v8::join_view<std::__1::__wrap_iter<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>, std::__1::__wrap_iter<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const*>, char>&&) @ 0x1489ffa1 in /home/ubuntu/release-ch/clickhouse\r\n2. ./build_docker/../src/Interpreters/InterpreterSelectWithUnionQuery.cpp:174: DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&) @ 0x1489ed58 in /home/ubuntu/release-ch/clickhouse\r\n3. ./build_docker/../contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:701: DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const>, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&) @ 0x1489c92c in /home/ubuntu/release-ch/clickhouse\r\n4. ./build_docker/../contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:302: DB::InterpreterSelectQuery::executeFetchColumns(DB::QueryProcessingStage::Enum, DB::QueryPlan&) @ 0x14817f99 in /home/ubuntu/release-ch/clickhouse\r\n5. ./build_docker/../src/Interpreters/InterpreterSelectQuery.cpp:1308: DB::InterpreterSelectQuery::executeImpl(DB::QueryPlan&, std::__1::optional<DB::Pipe>) @ 0x1480bacf in /home/ubuntu/release-ch/clickhouse\r\n6. ./build_docker/../contrib/llvm-project/libcxx/include/optional:260: DB::InterpreterSelectQuery::buildQueryPlan(DB::QueryPlan&) @ 0x1480ab8d in /home/ubuntu/release-ch/clickhouse\r\n7. ./build_docker/../src/Interpreters/InterpreterSelectWithUnionQuery.cpp:0: DB::InterpreterSelectWithUnionQuery::buildQueryPlan(DB::QueryPlan&) @ 0x148a24c5 in /home/ubuntu/release-ch/clickhouse\r\n8. ./build_docker/../src/Interpreters/InterpreterSelectWithUnionQuery.cpp:0: DB::InterpreterSelectWithUnionQuery::execute() @ 0x148a34de in /home/ubuntu/release-ch/clickhouse\r\n9. ./build_docker/../src/Interpreters/executeQuery.cpp:0: DB::executeQueryImpl(char const*, char const*, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x14bad053 in /home/ubuntu/release-ch/clickhouse\r\n10. ./build_docker/../src/Interpreters/executeQuery.cpp:1104: DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x14baa10d in /home/ubuntu/release-ch/clickhouse\r\n11. ./build_docker/../src/Server/TCPHandler.cpp:0: DB::TCPHandler::runImpl() @ 0x15881f4f in /home/ubuntu/release-ch/clickhouse\r\n12. ./build_docker/../src/Server/TCPHandler.cpp:1922: DB::TCPHandler::run() @ 0x15895b99 in /home/ubuntu/release-ch/clickhouse\r\n13. ./build_docker/../contrib/poco/Net/src/TCPServerConnection.cpp:57: Poco::Net::TCPServerConnection::start() @ 0x18703734 in /home/ubuntu/release-ch/clickhouse\r\n14. ./build_docker/../contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:48: Poco::Net::TCPServerDispatcher::run() @ 0x187050db in /home/ubuntu/release-ch/clickhouse\r\n15. ./build_docker/../contrib/poco/Foundation/src/ThreadPool.cpp:213: Poco::PooledThread::run() @ 0x18894307 in /home/ubuntu/release-ch/clickhouse\r\n16. ./build_docker/../contrib/poco/Foundation/include/Poco/SharedPtr.h:277: Poco::ThreadImpl::runnableEntry(void*) @ 0x18891d3d in /home/ubuntu/release-ch/clickhouse\r\n17. ? @ 0x7fbaad072609 in ?\r\n18. clone @ 0x7fbaacf97163 in ?\r\n. (LOGICAL_ERROR)\r\n```\r\n\r\nWith analyzer works\r\n\n",
  "hints_text": "",
  "created_at": "2023-01-04T20:01:12Z"
}