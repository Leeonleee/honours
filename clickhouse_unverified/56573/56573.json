{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 56573,
  "instance_id": "ClickHouse__ClickHouse-56573",
  "issue_numbers": [
    "56449"
  ],
  "base_commit": "905b75b85351f698f44c9f0a99f9646a66ed46d1",
  "patch": "diff --git a/programs/server/Server.cpp b/programs/server/Server.cpp\nindex 9e974e796e02..ca091dbecebb 100644\n--- a/programs/server/Server.cpp\n+++ b/programs/server/Server.cpp\n@@ -1372,6 +1372,8 @@ try\n \n                 global_context->reloadAuxiliaryZooKeepersConfigIfChanged(config);\n \n+                global_context->reloadQueryMaskingRulesIfChanged(config);\n+\n                 std::lock_guard lock(servers_lock);\n                 updateServers(*config, server_pool, async_metrics, servers, servers_to_start_before_tables);\n             }\ndiff --git a/src/Common/SensitiveDataMasker.cpp b/src/Common/SensitiveDataMasker.cpp\nindex 2b21c223bd82..c4d6952f31d9 100644\n--- a/src/Common/SensitiveDataMasker.cpp\n+++ b/src/Common/SensitiveDataMasker.cpp\n@@ -1,5 +1,6 @@\n #include \"SensitiveDataMasker.h\"\n \n+#include <mutex>\n #include <set>\n #include <string>\n #include <atomic>\n@@ -94,20 +95,28 @@ class SensitiveDataMasker::MaskingRule\n SensitiveDataMasker::~SensitiveDataMasker() = default;\n \n std::unique_ptr<SensitiveDataMasker> SensitiveDataMasker::sensitive_data_masker = nullptr;\n+std::mutex SensitiveDataMasker::instance_mutex;\n \n void SensitiveDataMasker::setInstance(std::unique_ptr<SensitiveDataMasker> sensitive_data_masker_)\n {\n+\n     if (!sensitive_data_masker_)\n         throw Exception(ErrorCodes::LOGICAL_ERROR, \"Logical error: the 'sensitive_data_masker' is not set\");\n \n+    std::lock_guard lock(instance_mutex);\n     if (sensitive_data_masker_->rulesCount() > 0)\n     {\n         sensitive_data_masker = std::move(sensitive_data_masker_);\n     }\n+    else\n+    {\n+        sensitive_data_masker.reset();\n+    }\n }\n \n SensitiveDataMasker * SensitiveDataMasker::getInstance()\n {\n+    std::lock_guard lock(instance_mutex);\n     return sensitive_data_masker.get();\n }\n \ndiff --git a/src/Common/SensitiveDataMasker.h b/src/Common/SensitiveDataMasker.h\nindex de5cc125dccb..abb613043d11 100644\n--- a/src/Common/SensitiveDataMasker.h\n+++ b/src/Common/SensitiveDataMasker.h\n@@ -1,6 +1,7 @@\n #pragma once\n \n #include <memory>\n+#include <mutex>\n #include <vector>\n #include <cstdint>\n \n@@ -45,6 +46,7 @@ class SensitiveDataMasker\n private:\n     class MaskingRule;\n     std::vector<std::unique_ptr<MaskingRule>> all_masking_rules;\n+    static std::mutex instance_mutex;\n     static std::unique_ptr<SensitiveDataMasker> sensitive_data_masker;\n \n public:\ndiff --git a/src/Interpreters/Context.cpp b/src/Interpreters/Context.cpp\nindex 75cc5f8366cc..d687b48a9705 100644\n--- a/src/Interpreters/Context.cpp\n+++ b/src/Interpreters/Context.cpp\n@@ -4,6 +4,7 @@\n #include <memory>\n #include <Poco/UUID.h>\n #include <Poco/Util/Application.h>\n+#include <Common/SensitiveDataMasker.h>\n #include <Common/Macros.h>\n #include <Common/EventNotifier.h>\n #include <Common/Stopwatch.h>\n@@ -196,6 +197,8 @@ struct ContextSharedPart : boost::noncopyable\n     mutable zkutil::ZooKeeperPtr zookeeper TSA_GUARDED_BY(zookeeper_mutex);                 /// Client for ZooKeeper.\n     ConfigurationPtr zookeeper_config TSA_GUARDED_BY(zookeeper_mutex);                      /// Stores zookeeper configs\n \n+    ConfigurationPtr sensitive_data_masker_config;\n+\n #if USE_NURAFT\n     mutable std::mutex keeper_dispatcher_mutex;\n     mutable std::shared_ptr<KeeperDispatcher> keeper_dispatcher TSA_GUARDED_BY(keeper_dispatcher_mutex);\n@@ -3198,6 +3201,16 @@ bool Context::hasAuxiliaryZooKeeper(const String & name) const\n     return getConfigRef().has(\"auxiliary_zookeepers.\" + name);\n }\n \n+void Context::reloadQueryMaskingRulesIfChanged(const ConfigurationPtr & config) const\n+{\n+    const auto old_config = shared->sensitive_data_masker_config;\n+    if (old_config && isSameConfiguration(*config, *old_config, \"query_masking_rules\"))\n+        return;\n+\n+    SensitiveDataMasker::setInstance(std::make_unique<SensitiveDataMasker>(*config, \"query_masking_rules\"));\n+    shared->sensitive_data_masker_config = config;\n+}\n+\n InterserverCredentialsPtr Context::getInterserverCredentials() const\n {\n     return shared->interserver_io_credentials.get();\ndiff --git a/src/Interpreters/Context.h b/src/Interpreters/Context.h\nindex e12a5c4b69b8..f90812df8c11 100644\n--- a/src/Interpreters/Context.h\n+++ b/src/Interpreters/Context.h\n@@ -946,6 +946,8 @@ class Context: public ContextData, public std::enable_shared_from_this<Context>\n     // Reload Zookeeper\n     void reloadZooKeeperIfChanged(const ConfigurationPtr & config) const;\n \n+    void reloadQueryMaskingRulesIfChanged(const ConfigurationPtr & config) const;\n+\n     void setSystemZooKeeperLogAfterInitializationIfNeeded();\n \n     /// --- Caches ------------------------------------------------------------------------------------------\n",
  "test_patch": "diff --git a/tests/integration/test_reload_query_masking_rules/__init__.py b/tests/integration/test_reload_query_masking_rules/__init__.py\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/integration/test_reload_query_masking_rules/configs/changed_settings.xml b/tests/integration/test_reload_query_masking_rules/configs/changed_settings.xml\nnew file mode 100644\nindex 000000000000..d681496d843a\n--- /dev/null\n+++ b/tests/integration/test_reload_query_masking_rules/configs/changed_settings.xml\n@@ -0,0 +1,19 @@\n+<clickhouse>\n+    <query_log>\n+        <database>system</database>\n+        <table>query_log</table>\n+        <partition_by>toYYYYMM(event_date)</partition_by>\n+        <flush_interval_milliseconds>7500</flush_interval_milliseconds>\n+        <max_size_rows>1048576</max_size_rows>\n+        <reserved_size_rows>8192</reserved_size_rows>\n+        <buffer_size_rows_flush_threshold>524288</buffer_size_rows_flush_threshold>\n+        <flush_on_crash>false</flush_on_crash>\n+    </query_log>\n+\n+    <query_masking_rules>\n+        <rule>\n+            <regexp>TOPSECRET.TOPSECRET</regexp>\n+            <replace>[hidden]</replace>\n+        </rule>\n+    </query_masking_rules>\n+</clickhouse>\ndiff --git a/tests/integration/test_reload_query_masking_rules/configs/empty_settings.xml b/tests/integration/test_reload_query_masking_rules/configs/empty_settings.xml\nnew file mode 100644\nindex 000000000000..82647ff82b5f\n--- /dev/null\n+++ b/tests/integration/test_reload_query_masking_rules/configs/empty_settings.xml\n@@ -0,0 +1,12 @@\n+<clickhouse>\n+    <query_log>\n+        <database>system</database>\n+        <table>query_log</table>\n+        <partition_by>toYYYYMM(event_date)</partition_by>\n+        <flush_interval_milliseconds>7500</flush_interval_milliseconds>\n+        <max_size_rows>1048576</max_size_rows>\n+        <reserved_size_rows>8192</reserved_size_rows>\n+        <buffer_size_rows_flush_threshold>524288</buffer_size_rows_flush_threshold>\n+        <flush_on_crash>false</flush_on_crash>\n+    </query_log>\n+</clickhouse>\ndiff --git a/tests/integration/test_reload_query_masking_rules/test.py b/tests/integration/test_reload_query_masking_rules/test.py\nnew file mode 100644\nindex 000000000000..f269aefbacba\n--- /dev/null\n+++ b/tests/integration/test_reload_query_masking_rules/test.py\n@@ -0,0 +1,57 @@\n+import pytest\n+import os\n+from helpers.cluster import ClickHouseCluster\n+from helpers.test_tools import assert_eq_with_retry, assert_logs_contain_with_retry\n+\n+SCRIPT_DIR = os.path.dirname(os.path.realpath(__file__))\n+cluster = ClickHouseCluster(__file__)\n+node = cluster.add_instance(\"node\", user_configs=[\"configs/empty_settings.xml\"])\n+\n+\n+@pytest.fixture(scope=\"module\", autouse=True)\n+def started_cluster():\n+    try:\n+        cluster.start()\n+        yield cluster\n+    finally:\n+        cluster.shutdown()\n+\n+\n+@pytest.fixture(autouse=True)\n+def reset_to_normal_settings_after_test():\n+    try:\n+        node.copy_file_to_container(\n+            os.path.join(SCRIPT_DIR, \"configs/empty_settings.xml\"),\n+            \"/etc/clickhouse-server/config.d/z.xml\",\n+        )\n+        node.query(\"SYSTEM RELOAD CONFIG\")\n+        yield\n+    finally:\n+        pass\n+\n+\n+# @pytest.mark.parametrize(\"reload_strategy\", [\"force\", \"timeout\"])\n+def test_reload_query_masking_rules():\n+    # At first, empty configuration is fed to ClickHouse. The query\n+    # \"SELECT 'TOPSECRET.TOPSECRET'\" will not be redacted, and the new masking\n+    # event will not be registered\n+    node.query(\"SELECT 'TOPSECRET.TOPSECRET'\")\n+    assert_logs_contain_with_retry(node, \"SELECT 'TOPSECRET.TOPSECRET'\")\n+    assert not node.contains_in_log(r\"SELECT '\\[hidden\\]'\")\n+    node.rotate_logs()\n+\n+    node.copy_file_to_container(\n+        os.path.join(SCRIPT_DIR, \"configs/changed_settings.xml\"),\n+        \"/etc/clickhouse-server/config.d/z.xml\",\n+    )\n+\n+    node.query(\"SYSTEM RELOAD CONFIG\")\n+\n+    # Now the same query will be redacted in the logs and the counter of events\n+    # will be incremented\n+    node.query(\"SELECT 'TOPSECRET.TOPSECRET'\")\n+\n+    assert_logs_contain_with_retry(node, r\"SELECT '\\[hidden\\]'\")\n+    assert not node.contains_in_log(\"SELECT 'TOPSECRET.TOPSECRET'\")\n+\n+    node.rotate_logs()\n",
  "problem_statement": "Make `query_masking_rules` reloadable without restart of a server\n**Use case**\r\n\r\nCurrently, if you want to redact new things, you have to restart the clickhouse server to apply the new masking rules. It would be great to be able to take new redacting rules into use without need to restart the server.\r\n\r\n**Additional context**\r\n\r\nThe change seems to be quite simple, so if you think it's OK to be propagated, I would like to implement it myself (I have been poking into that yesterday and I think code-wise it should be pretty much ready).\r\n\n",
  "hints_text": "",
  "created_at": "2023-11-10T10:48:36Z",
  "modified_files": [
    "programs/server/Server.cpp",
    "src/Common/SensitiveDataMasker.cpp",
    "src/Common/SensitiveDataMasker.h",
    "src/Interpreters/Context.cpp",
    "src/Interpreters/Context.h"
  ],
  "modified_test_files": [
    "b/tests/integration/test_reload_query_masking_rules/configs/changed_settings.xml",
    "b/tests/integration/test_reload_query_masking_rules/configs/empty_settings.xml",
    "b/tests/integration/test_reload_query_masking_rules/test.py"
  ]
}