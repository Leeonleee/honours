{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 35706,
  "instance_id": "ClickHouse__ClickHouse-35706",
  "issue_numbers": [
    "35641"
  ],
  "base_commit": "5e262fba85a62e66f5cb947887c2e80f530df26d",
  "patch": "diff --git a/docs/en/sql-reference/statements/create/table.md b/docs/en/sql-reference/statements/create/table.md\nindex 409ec422ade3..ee663c926955 100644\n--- a/docs/en/sql-reference/statements/create/table.md\n+++ b/docs/en/sql-reference/statements/create/table.md\n@@ -114,9 +114,9 @@ In addition, this column is not substituted when using an asterisk in a SELECT q\n \n ### EPHEMERAL {#ephemeral}\n \n-`EPHEMERAL expr`\n+`EPHEMERAL [expr]`\n \n-Ephemeral column. Such a column isn't stored in the table and cannot be SELECTed, but can be referenced in the defaults of CREATE statement.\n+Ephemeral column. Such a column isn't stored in the table and cannot be SELECTed, but can be referenced in the defaults of CREATE statement. If `expr` is omitted type for column is required.\n INSERT without list of columns will skip such column, so SELECT/INSERT invariant is preserved -  the dump obtained using `SELECT *` can be inserted back into the table using INSERT without specifying the list of columns.\n \n ### ALIAS {#alias}\ndiff --git a/docs/ru/sql-reference/statements/create/table.md b/docs/ru/sql-reference/statements/create/table.md\nindex b9c2a4f0f0b5..48cce437b8dc 100644\n--- a/docs/ru/sql-reference/statements/create/table.md\n+++ b/docs/ru/sql-reference/statements/create/table.md\n@@ -110,9 +110,9 @@ SELECT x, toTypeName(x) FROM t1;\n \n ### EPHEMERAL {#ephemeral}\n \n-`EPHEMERAL expr`\n+`EPHEMERAL [expr]`\n \n-\u042d\u0444\u0435\u043c\u0435\u0440\u043d\u043e\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435. \u0422\u0430\u043a\u043e\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u043d\u0435 \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0438 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0435\u043d \u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0435 SELECT, \u043d\u043e \u043d\u0430 \u043d\u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u0441\u044b\u043b\u0430\u0442\u044c\u0441\u044f \u0432 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u0445 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 CREATE.\n+\u042d\u0444\u0435\u043c\u0435\u0440\u043d\u043e\u0435 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435. \u0422\u0430\u043a\u043e\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u043d\u0435 \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0438 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u0443\u0447\u0435\u043d \u0432 \u0437\u0430\u043f\u0440\u043e\u0441\u0435 SELECT, \u043d\u043e \u043d\u0430 \u043d\u0435\u0433\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u0441\u044b\u043b\u0430\u0442\u044c\u0441\u044f \u0432 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f\u0445 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 CREATE. \u0415\u0441\u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e `expr` \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043e, \u0442\u043e \u0442\u0438\u043f \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0441\u043f\u0435\u0446\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d.\n INSERT \u0431\u0435\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u0443\u0435\u0442 \u044d\u0442\u043e\u0442 \u0441\u0442\u043e\u043b\u0431\u0435\u0446, \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442\u0441\u044f \u0438\u043d\u0432\u0430\u0440\u0438\u0430\u043d\u0442 - \u0442.\u0435. \u0434\u0430\u043c\u043f, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u043f\u0443\u0442\u0451\u043c `SELECT *`, \u043c\u043e\u0436\u043d\u043e \u0432\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043e\u0431\u0440\u0430\u0442\u043d\u043e \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0443 INSERT-\u043e\u043c \u0431\u0435\u0437 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432.\n \n ### ALIAS {#alias}\ndiff --git a/src/Interpreters/InterpreterCreateQuery.cpp b/src/Interpreters/InterpreterCreateQuery.cpp\nindex d8923b3cc426..14bf9df23470 100644\n--- a/src/Interpreters/InterpreterCreateQuery.cpp\n+++ b/src/Interpreters/InterpreterCreateQuery.cpp\n@@ -508,7 +508,9 @@ ColumnsDescription InterpreterCreateQuery::getColumnsDescription(\n \n                 default_expr_list->children.emplace_back(\n                     setAlias(\n-                        col_decl.default_expression->clone(),\n+                        col_decl.default_specifier == \"EPHEMERAL\" ? /// can be ASTLiteral::value NULL\n+                            std::make_shared<ASTLiteral>(data_type_ptr->getDefault()) :\n+                            col_decl.default_expression->clone(),\n                         tmp_column_name));\n             }\n             else\n@@ -536,7 +538,11 @@ ColumnsDescription InterpreterCreateQuery::getColumnsDescription(\n \n         if (col_decl.default_expression)\n         {\n-            ASTPtr default_expr = col_decl.default_expression->clone();\n+            ASTPtr default_expr =\n+                col_decl.default_specifier == \"EPHEMERAL\" && col_decl.default_expression->as<ASTLiteral>()->value.isNull() ?\n+                    std::make_shared<ASTLiteral>(DataTypeFactory::instance().get(col_decl.type)->getDefault()) :\n+                    col_decl.default_expression->clone();\n+\n             if (col_decl.type)\n                 column.type = name_type_it->type;\n             else\ndiff --git a/src/Parsers/ASTColumnDeclaration.cpp b/src/Parsers/ASTColumnDeclaration.cpp\nindex 4c14230e926b..888cd639fb09 100644\n--- a/src/Parsers/ASTColumnDeclaration.cpp\n+++ b/src/Parsers/ASTColumnDeclaration.cpp\n@@ -1,6 +1,7 @@\n #include <Parsers/ASTColumnDeclaration.h>\n #include <Common/quoteString.h>\n #include <IO/Operators.h>\n+#include <Parsers/ASTLiteral.h>\n \n \n namespace DB\n@@ -71,8 +72,12 @@ void ASTColumnDeclaration::formatImpl(const FormatSettings & settings, FormatSta\n \n     if (default_expression)\n     {\n-        settings.ostr << ' ' << (settings.hilite ? hilite_keyword : \"\") << default_specifier << (settings.hilite ? hilite_none : \"\") << ' ';\n-        default_expression->formatImpl(settings, state, frame);\n+        settings.ostr << ' ' << (settings.hilite ? hilite_keyword : \"\") << default_specifier << (settings.hilite ? hilite_none : \"\");\n+        if (default_specifier != \"EPHEMERAL\" || !default_expression->as<ASTLiteral>()->value.isNull())\n+        {\n+            settings.ostr << ' ';\n+            default_expression->formatImpl(settings, state, frame);\n+        }\n     }\n \n     if (comment)\ndiff --git a/src/Parsers/ParserCreateQuery.h b/src/Parsers/ParserCreateQuery.h\nindex a4dbe6356642..a6d3476e3f74 100644\n--- a/src/Parsers/ParserCreateQuery.h\n+++ b/src/Parsers/ParserCreateQuery.h\n@@ -9,6 +9,7 @@\n #include <Parsers/CommonParsers.h>\n #include <Parsers/ParserDataType.h>\n #include <Poco/String.h>\n+#include <Parsers/ASTLiteral.h>\n \n \n namespace DB\n@@ -185,8 +186,7 @@ bool IParserColumnDeclaration<NameParser>::parseImpl(Pos & pos, ASTPtr & node, E\n     }\n \n     Pos pos_before_specifier = pos;\n-    if (s_default.ignore(pos, expected) || s_materialized.ignore(pos, expected) ||\n-        s_ephemeral.ignore(pos, expected) || s_alias.ignore(pos, expected))\n+    if (s_default.ignore(pos, expected) || s_materialized.ignore(pos, expected) || s_alias.ignore(pos, expected))\n     {\n         default_specifier = Poco::toUpper(std::string{pos_before_specifier->begin, pos_before_specifier->end});\n \n@@ -194,6 +194,12 @@ bool IParserColumnDeclaration<NameParser>::parseImpl(Pos & pos, ASTPtr & node, E\n         if (!expr_parser.parse(pos, default_expression, expected))\n             return false;\n     }\n+    else if (s_ephemeral.ignore(pos, expected))\n+    {\n+        default_specifier = \"EPHEMERAL\";\n+        if (!expr_parser.parse(pos, default_expression, expected) && type)\n+            default_expression = std::make_shared<ASTLiteral>(Field());\n+    }\n \n     if (require_type && !type && !default_expression)\n         return false; /// reject column name without type\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02205_ephemeral_1.reference b/tests/queries/0_stateless/02205_ephemeral_1.reference\nindex 6e98ffd2495b..ba39033668fe 100644\n--- a/tests/queries/0_stateless/02205_ephemeral_1.reference\n+++ b/tests/queries/0_stateless/02205_ephemeral_1.reference\n@@ -6,3 +6,11 @@ z\tUInt32\tDEFAULT\t5\n 17\t5\n 7\t5\n 21\t5\n+x\tUInt32\tDEFAULT\ty\t\t\t\n+y\tUInt32\tEPHEMERAL\t0\t\t\t\n+z\tUInt32\tDEFAULT\t5\t\t\t\n+1\t2\n+0\t2\n+0\t5\n+7\t5\n+21\t5\ndiff --git a/tests/queries/0_stateless/02205_ephemeral_1.sql b/tests/queries/0_stateless/02205_ephemeral_1.sql\nindex 5d0565cbfc05..7a996ee3a8fc 100644\n--- a/tests/queries/0_stateless/02205_ephemeral_1.sql\n+++ b/tests/queries/0_stateless/02205_ephemeral_1.sql\n@@ -38,3 +38,43 @@ SELECT * FROM t_ephemeral_02205_1;\n \n \n DROP TABLE IF EXISTS t_ephemeral_02205_1;\n+\n+# Test without default\n+CREATE TABLE t_ephemeral_02205_1 (x UInt32 DEFAULT y, y UInt32 EPHEMERAL, z UInt32 DEFAULT 5) ENGINE = Memory;\n+\n+DESCRIBE t_ephemeral_02205_1;\n+\n+# Test INSERT without columns list - should participate only ordinary columns (x, z)\n+INSERT INTO t_ephemeral_02205_1 VALUES (1, 2);\n+# SELECT * should only return ordinary columns (x, z) - ephemeral is not stored in the table\n+SELECT * FROM t_ephemeral_02205_1;\n+\n+TRUNCATE TABLE t_ephemeral_02205_1;\n+\n+INSERT INTO t_ephemeral_02205_1 VALUES (DEFAULT, 2);\n+SELECT * FROM t_ephemeral_02205_1;\n+\n+TRUNCATE TABLE t_ephemeral_02205_1;\n+\n+# Test INSERT using ephemerals default\n+INSERT INTO t_ephemeral_02205_1 (x, y) VALUES (DEFAULT, DEFAULT);\n+SELECT * FROM t_ephemeral_02205_1;\n+\n+TRUNCATE TABLE t_ephemeral_02205_1;\n+\n+# Test INSERT using explicit ephemerals value\n+INSERT INTO t_ephemeral_02205_1 (x, y) VALUES (DEFAULT, 7);\n+SELECT * FROM t_ephemeral_02205_1;\n+\n+# Test ALTER TABLE DELETE\n+ALTER TABLE t_ephemeral_02205_1 DELETE WHERE x = 7;\n+SELECT * FROM t_ephemeral_02205_1;\n+\n+TRUNCATE TABLE t_ephemeral_02205_1;\n+\n+# Test INSERT into column, defaulted to ephemeral, but explicitly provided with value\n+INSERT INTO t_ephemeral_02205_1 (x, y) VALUES (21, 7);\n+SELECT * FROM t_ephemeral_02205_1;\n+\n+DROP TABLE IF EXISTS t_ephemeral_02205_1;\n+\n",
  "problem_statement": "Allow EPHEMERAL column implicit default\nref #9436\r\nCurrently EPHEMERAL column requires an explicit default value provided on CREATE TABLE - we can allow implicit default there\r\n\n",
  "hints_text": "",
  "created_at": "2022-03-29T08:10:59Z",
  "modified_files": [
    "docs/en/sql-reference/statements/create/table.md",
    "docs/ru/sql-reference/statements/create/table.md",
    "src/Interpreters/InterpreterCreateQuery.cpp",
    "src/Parsers/ASTColumnDeclaration.cpp",
    "src/Parsers/ParserCreateQuery.h"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/02205_ephemeral_1.reference",
    "tests/queries/0_stateless/02205_ephemeral_1.sql"
  ]
}