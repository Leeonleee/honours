{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 47451,
  "instance_id": "ClickHouse__ClickHouse-47451",
  "issue_numbers": [
    "45789"
  ],
  "base_commit": "a411ae10b5ec828af8694593ff8226f3b8856cd3",
  "patch": "diff --git a/src/Interpreters/LogicalExpressionsOptimizer.cpp b/src/Interpreters/LogicalExpressionsOptimizer.cpp\nindex 02594269f08a..5dd1b5104805 100644\n--- a/src/Interpreters/LogicalExpressionsOptimizer.cpp\n+++ b/src/Interpreters/LogicalExpressionsOptimizer.cpp\n@@ -119,7 +119,9 @@ void LogicalExpressionsOptimizer::collectDisjunctiveEqualityChains()\n         bool found_chain = false;\n \n         auto * function = to_node->as<ASTFunction>();\n-        if (function && function->name == \"or\" && function->children.size() == 1)\n+        /// Optimization does not respect aliases properly, which can lead to MULTIPLE_EXPRESSION_FOR_ALIAS error.\n+        /// Disable it if an expression has an alias. Proper implementation is done with the new analyzer.\n+        if (function && function->alias.empty() && function->name == \"or\" && function->children.size() == 1)\n         {\n             const auto * expression_list = function->children[0]->as<ASTExpressionList>();\n             if (expression_list)\n@@ -128,14 +130,14 @@ void LogicalExpressionsOptimizer::collectDisjunctiveEqualityChains()\n                 for (const auto & child : expression_list->children)\n                 {\n                     auto * equals = child->as<ASTFunction>();\n-                    if (equals && equals->name == \"equals\" && equals->children.size() == 1)\n+                    if (equals && equals->alias.empty() && equals->name == \"equals\" && equals->children.size() == 1)\n                     {\n                         const auto * equals_expression_list = equals->children[0]->as<ASTExpressionList>();\n                         if (equals_expression_list && equals_expression_list->children.size() == 2)\n                         {\n                             /// Equality expr = xN.\n                             const auto * literal = equals_expression_list->children[1]->as<ASTLiteral>();\n-                            if (literal)\n+                            if (literal && literal->alias.empty())\n                             {\n                                 auto expr_lhs = equals_expression_list->children[0]->getTreeHash();\n                                 OrWithExpression or_with_expression{function, expr_lhs, function->tryGetAlias()};\n@@ -230,6 +232,9 @@ bool LogicalExpressionsOptimizer::mayOptimizeDisjunctiveEqualityChain(const Disj\n     const auto & equalities = chain.second;\n     const auto & equality_functions = equalities.functions;\n \n+    if (settings.optimize_min_equality_disjunction_chain_length == 0)\n+        return false;\n+\n     /// For LowCardinality column, the dict is usually smaller and the index is relatively large.\n     /// In most cases, merging OR-chain as IN is better than converting each LowCardinality into full column individually.\n     /// For non-LowCardinality, we need to eliminate too short chains.\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/25340_logical_optimizer_alias_bug.reference b/tests/queries/0_stateless/25340_logical_optimizer_alias_bug.reference\nnew file mode 100644\nindex 000000000000..573541ac9702\n--- /dev/null\n+++ b/tests/queries/0_stateless/25340_logical_optimizer_alias_bug.reference\n@@ -0,0 +1,1 @@\n+0\ndiff --git a/tests/queries/0_stateless/25340_logical_optimizer_alias_bug.sql b/tests/queries/0_stateless/25340_logical_optimizer_alias_bug.sql\nnew file mode 100644\nindex 000000000000..5b13eea5e4be\n--- /dev/null\n+++ b/tests/queries/0_stateless/25340_logical_optimizer_alias_bug.sql\n@@ -0,0 +1,2 @@\n+create table test_local (id UInt32, path LowCardinality(String)) engine = MergeTree order by id;\n+WITH ((position(path, '/a') > 0) AND (NOT (position(path, 'a') > 0))) OR (path = '/b') OR (path = '/b/') as alias1 SELECT max(alias1) FROM remote('127.0.0.{1,2}', currentDatabase(), test_local) WHERE (id = 299386662);\n",
  "problem_statement": "MULTIPLE_EXPRESSIONS_FOR_ALIAS on the 23.1.2\nSince the latest release (23.1.2), we started to have \"MULTIPLE_EXPRESSION_FOR_ALIAS\" errors when executing queries. \r\nThe table is distributed and I'm using the zero replication feature.\r\nThis behaviour is not reproductible on the 22.12 on the same condition (distributed table + zero replication).\r\n\r\n**Describe what's wrong**\r\n\r\nI'm not able to reproduce on a simple example but the following query failed. \r\n\r\n```sql\r\n  WITH       \r\n        ((position(path, '/a') > 0) AND (NOT (position(path, 'a') > 0))) OR (path = '/b') OR (path = '/b/') as alias1\r\n    SELECT\r\n        max(alias1)\r\n    FROM mytable\r\n    WHERE (myid = 1259)\r\n```\nI'm not familiar with an intern optimiser of the query but in the error output, the condition has been optimized. \n\r\n**Does it reproduce on recent release?**\r\n\r\n23.1.2\r\n\r\n**Enable crash reporting**\r\n\r\nI cannot \r\n\r\n**How to reproduce**\r\n\r\nI was not able to reproduce it locally. \r\n\r\n**Expected behavior**\r\n\r\nThe SQL expression must not raise an alias expression error.\r\n\r\n**Error message and/or stacktrace**\r\n\r\n```sql\r\nReceived exception from server (version 23.1.2):\r\nCode: 179. DB::Exception: Received from localhost:9000. DB::Exception: Different expressions with the same alias alias1:\r\n((position(path, '/a') > 0) AND (NOT (position(path, 'a') > 0))) OR ((path IN ('/b', '/b/')) AS alias1) AS alias1\r\nand\r\npath IN ('/b', '/b/') AS alias1\r\n: While processing ((position(path, '/a') > 0) AND (NOT (position(path, 'a') > 0))) OR ((path IN ('/b', '/b/')) AS alias1) AS alias1. (MULTIPLE_EXPRESSIONS_FOR_ALIAS)\r\n```\r\n\n",
  "hints_text": "Please provide CREATE TABLE statement for `mytable`\nHey @tavplubix \r\nAs mentionned, I was not able to reproduce locally the issue with a simple example. \r\nI can still share it \r\n```\r\n# local \r\nCREATE TABLE default.mytable_local\r\n(\r\n    `sign` Int8,\r\n    `myid` UInt32,\r\n    `path` String\r\n)\r\nENGINE = ReplicatedCollapsingMergeTree('/{cluster_name}-{env}/tables/shard{shard}/mytable_local', '{replica}', sign)\r\nORDER BY id\r\nSETTINGS index_granularity = 8192\r\n\r\n# distributed \r\nCREATE TABLE default.mytable\r\n(\r\n    `sign` Int8,\r\n    `id` UInt32,\r\n    `path` String\r\n)\r\nENGINE = Distributed('{cluster_name}', 'default', 'mytable_local')\r\n```\r\n\r\nThe issue raised on a production table for which I cannot share the create statement. \nThanks!\r\n\r\n> The issue raised on a production table for which I cannot share the create statement.\r\n\r\nMaybe you can share obfuscated create statements? It's easy to obfuscate with `clickhouse format` utility:\r\n```\r\n$ echo \"create table secret_table_from_production (secret_column UInt64, nda_column String) engine=Distributed('internal_cluster_name', 'default', 'secret_local')\" | clickhouse format --obfuscate\r\ncreate table captor_inn_leather_yolk (captor_jury UInt64, chauvinist_jury String) engine=Distributed('vplearwl_rpzeemb_godx', 'jabiosl', 'ndsocb_rgjyc')\r\n```\n@tavplubix the table in question has 250 columns, isn't bit too much ? \r\n\r\nLet me check internally if I can even share the obfuscate version. \n@tavplubix \r\nI'm pretty sure that the bug I'm facing is due to this optimisation https://github.com/ClickHouse/ClickHouse/pull/42889\n> I'm pretty sure that the bug I'm facing is due to this optimisation https://github.com/ClickHouse/ClickHouse/pull/42889 \r\n\r\nIndeed, I managed to reproduce it with a LowCardinality column: \r\n```\r\ndell9510 :) show create table test_local\r\n\r\nSHOW CREATE TABLE test_local\r\n\r\nQuery id: 3d03b97f-2672-42fc-8d6b-5a90bee502df\r\n\r\n\u250c\u2500statement\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 CREATE TABLE default.test_local\r\n(\r\n    `sign` Int8,\r\n    `id` UInt32,\r\n    `path` String\r\n)\r\nENGINE = ReplicatedCollapsingMergeTree('/test/kjnasgliav/', '1', sign)\r\nORDER BY id\r\nSETTINGS index_granularity = 8192 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.009 sec. \r\n\r\ndell9510 :) show create table test\r\n\r\nSHOW CREATE TABLE test\r\n\r\nQuery id: 2e59c202-f6a1-4149-b0c3-b25fd1d56d42\r\n\r\n\u250c\u2500statement\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 CREATE TABLE default.test\r\n(\r\n    `sign` Int8,\r\n    `id` UInt32,\r\n    `path` LowCardinality(String)\r\n)\r\nENGINE = Distributed('test_cluster_two_shards', 'default', 'test_local') \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.007 sec. \r\n\r\ndell9510 :) insert into test select 1, * from generateRandom('`id` UInt32, `path` String') limit 100\r\ndell9510 :) insert into test select -1, * from generateRandom('`id` UInt32, `path` String') limit 10\r\n\r\ndell9510 :) WITH       \r\n                    ((position(path, '/a') > 0) AND (NOT (position(path, 'a') > 0))) OR (path = '/b') OR (path = '/b/') as alias1\r\n                SELECT\r\n                    max(alias1)\r\n                FROM test\r\n                WHERE (id = 299386662)\r\n\r\nWITH ((position(path, '/a') > 0) AND (NOT (position(path, 'a') > 0))) OR (path = '/b') OR (path = '/b/') AS alias1\r\nSELECT max(alias1)\r\nFROM test\r\nWHERE id = 299386662\r\n\r\nQuery id: 735d04e5-c8c0-4492-8bad-db32b48dd270\r\n\r\n\r\n0 rows in set. Elapsed: 0.021 sec. \r\n\r\nReceived exception from server (version 23.2.1):\r\nCode: 179. DB::Exception: Received from localhost:9000. DB::Exception: Different expressions with the same alias alias1:\r\n((position(path, '/a') > 0) AND (NOT (position(path, 'a') > 0))) OR ((path IN ('/b', '/b/')) AS alias1) AS alias1\r\nand\r\npath IN ('/b', '/b/') AS alias1\r\n: While processing ((position(path, '/a') > 0) AND (NOT (position(path, 'a') > 0))) OR ((path IN ('/b', '/b/')) AS alias1) AS alias1. (MULTIPLE_EXPRESSIONS_FOR_ALIAS)\r\n```\r\n\r\n```\r\n        <test_cluster_two_shards>\r\n            <shard>\r\n                <replica>\r\n                    <host>127.0.0.1</host>\r\n                    <port>9000</port>\r\n                </replica>\r\n            </shard>\r\n            <shard>\r\n                <replica>\r\n                    <host>127.0.0.2</host>\r\n                    <port>9000</port>\r\n                </replica>\r\n            </shard>\r\n        </test_cluster_two_shards>\r\n```\r\n\r\ncc: @guowangy, @KochetovNicolai \n@tavplubix do you know if there is a setting that disable this optimisation ?\n> @tavplubix do you know if there is a setting that disable this optimisation ?\r\n\r\nWe had `optimize_min_equality_disjunction_chain_length`, but the problem is that this setting is ignored after https://github.com/ClickHouse/ClickHouse/pull/42889, so it's impossible to disable the optimization...\r\n\r\nPossible workaround (remove `LowCardinality` on `Distributed` table):\r\n```\r\ndell9510 :) alter table test modify column `path` String\r\n\r\nALTER TABLE test\r\n    MODIFY COLUMN `path` String\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.038 sec. \r\n\r\ndell9510 :) WITH       \r\n                    ((position(path, '/a') > 0) AND (NOT (position(path, 'a') > 0))) OR (path = '/b') OR (path = '/b/') as alias1\r\n                SELECT\r\n                    max(alias1)\r\n                FROM test\r\n                WHERE (id = 299386662)\r\n\r\nQuery id: 0890604c-a376-444a-840e-b15057c2a799\r\n\r\n\u250c\u2500max(alias1)\u2500\u2510\r\n\u2502           0 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.331 sec. \r\n\r\n```\r\n\nHi @KochetovNicolai \n\nWe would like to upgrade our CH version on the latest 23.2.X but due to this bug we cannot. Do you have any timeline to share about a possible resolution ? \n\nThanks \ud83d\ude4f",
  "created_at": "2023-03-10T20:16:19Z"
}