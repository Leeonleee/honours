{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 15384,
  "instance_id": "ClickHouse__ClickHouse-15384",
  "issue_numbers": [
    "15365"
  ],
  "base_commit": "73573472e9e0dcfe00568136952a9531132decf6",
  "patch": "diff --git a/src/Core/MultiEnum.h b/src/Core/MultiEnum.h\nindex ddfc5b13e86c..a7e3393c9c33 100644\n--- a/src/Core/MultiEnum.h\n+++ b/src/Core/MultiEnum.h\n@@ -86,7 +86,7 @@ struct MultiEnum\n         return right.operator==(left);\n     }\n \n-    template <typename L>\n+    template <typename L, typename = typename std::enable_if<!std::is_same_v<L, MultiEnum>>::type>\n     friend bool operator!=(L left, MultiEnum right)\n     {\n         return !(right.operator==(left));\ndiff --git a/src/Databases/DatabaseFactory.cpp b/src/Databases/DatabaseFactory.cpp\nindex 1bf4db74bf01..2bb4c595c052 100644\n--- a/src/Databases/DatabaseFactory.cpp\n+++ b/src/Databases/DatabaseFactory.cpp\n@@ -19,6 +19,7 @@\n \n #if USE_MYSQL\n #    include <Core/MySQL/MySQLClient.h>\n+#    include <Databases/MySQL/ConnectionMySQLSettings.h>\n #    include <Databases/MySQL/DatabaseConnectionMySQL.h>\n #    include <Databases/MySQL/MaterializeMySQLSettings.h>\n #    include <Databases/MySQL/DatabaseMaterializeMySQL.h>\n@@ -83,7 +84,7 @@ DatabasePtr DatabaseFactory::getImpl(const ASTCreateQuery & create, const String\n         throw Exception(\"Database engine \" + engine_name + \" cannot have arguments\", ErrorCodes::BAD_ARGUMENTS);\n \n     if (engine_define->engine->parameters || engine_define->partition_by || engine_define->primary_key || engine_define->order_by ||\n-        engine_define->sample_by || (engine_name != \"MaterializeMySQL\" && engine_define->settings))\n+        engine_define->sample_by || (!endsWith(engine_name, \"MySQL\") && engine_define->settings))\n         throw Exception(\"Database engine \" + engine_name + \" cannot have parameters, primary_key, order_by, sample_by, settings\",\n                         ErrorCodes::UNKNOWN_ELEMENT_IN_AST);\n \n@@ -133,8 +134,13 @@ DatabasePtr DatabaseFactory::getImpl(const ASTCreateQuery & create, const String\n                     , std::move(materialize_mode_settings));\n             }\n \n+            auto mysql_database_settings = std::make_unique<ConnectionMySQLSettings>();\n+\n+            mysql_database_settings->loadFromQueryContext(context);\n+            mysql_database_settings->loadFromQuery(*engine_define); /// higher priority\n+\n             return std::make_shared<DatabaseConnectionMySQL>(\n-                context, database_name, metadata_path, engine_define, mysql_database_name, std::move(mysql_pool));\n+                context, database_name, metadata_path, engine_define, mysql_database_name, std::move(mysql_database_settings), std::move(mysql_pool));\n         }\n         catch (...)\n         {\ndiff --git a/src/Databases/MySQL/ConnectionMySQLSettings.cpp b/src/Databases/MySQL/ConnectionMySQLSettings.cpp\nnew file mode 100644\nindex 000000000000..fa92e793225b\n--- /dev/null\n+++ b/src/Databases/MySQL/ConnectionMySQLSettings.cpp\n@@ -0,0 +1,65 @@\n+#include <Databases/MySQL/ConnectionMySQLSettings.h>\n+\n+#include <Core/SettingsFields.h>\n+#include <Interpreters/Context.h>\n+#include <Parsers/ASTFunction.h>\n+#include <Parsers/ASTCreateQuery.h>\n+\n+namespace DB\n+{\n+\n+namespace ErrorCodes\n+{\n+    extern const int UNKNOWN_SETTING;\n+    extern const int BAD_ARGUMENTS;\n+}\n+\n+IMPLEMENT_SETTINGS_TRAITS(ConnectionMySQLSettingsTraits, LIST_OF_CONNECTION_MYSQL_SETTINGS)\n+\n+void ConnectionMySQLSettings::loadFromQuery(ASTStorage & storage_def)\n+{\n+    if (storage_def.settings)\n+    {\n+        try\n+        {\n+            applyChanges(storage_def.settings->changes);\n+        }\n+        catch (Exception & e)\n+        {\n+            if (e.code() == ErrorCodes::UNKNOWN_SETTING)\n+                throw Exception(e.message() + \" for database \" + storage_def.engine->name, ErrorCodes::BAD_ARGUMENTS);\n+            else\n+                e.rethrow();\n+        }\n+    }\n+    else\n+    {\n+        auto settings_ast = std::make_shared<ASTSetQuery>();\n+        settings_ast->is_standalone = false;\n+        storage_def.set(storage_def.settings, settings_ast);\n+    }\n+\n+    SettingsChanges & changes = storage_def.settings->changes;\n+#define ADD_IF_ABSENT(NAME)                                                                                   \\\n+    if (std::find_if(changes.begin(), changes.end(),                                                          \\\n+                  [](const SettingChange & c) { return c.name == #NAME; })                                    \\\n+            == changes.end())                                                                                 \\\n+        changes.push_back(SettingChange{#NAME, static_cast<Field>(NAME)});\n+\n+    APPLY_FOR_IMMUTABLE_CONNECTION_MYSQL_SETTINGS(ADD_IF_ABSENT)\n+#undef ADD_IF_ABSENT\n+}\n+\n+void ConnectionMySQLSettings::loadFromQueryContext(const Context & context)\n+{\n+    if (!context.hasQueryContext())\n+        return;\n+\n+    const Settings & settings = context.getQueryContext().getSettingsRef();\n+\n+    if (settings.mysql_datatypes_support_level.value != mysql_datatypes_support_level.value)\n+        set(\"mysql_datatypes_support_level\", settings.mysql_datatypes_support_level.toString());\n+}\n+\n+\n+}\ndiff --git a/src/Databases/MySQL/ConnectionMySQLSettings.h b/src/Databases/MySQL/ConnectionMySQLSettings.h\nnew file mode 100644\nindex 000000000000..90279f846a49\n--- /dev/null\n+++ b/src/Databases/MySQL/ConnectionMySQLSettings.h\n@@ -0,0 +1,33 @@\n+#pragma once\n+\n+#include <Core/Defines.h>\n+#include <Core/BaseSettings.h>\n+#include <Core/SettingsEnums.h>\n+\n+namespace DB\n+{\n+\n+class Context;\n+class ASTStorage;\n+\n+#define LIST_OF_CONNECTION_MYSQL_SETTINGS(M) \\\n+    M(MySQLDataTypesSupport, mysql_datatypes_support_level, 0, \"Which MySQL types should be converted to corresponding ClickHouse types (rather than being represented as String). Can be empty or any combination of 'decimal' or 'datetime64'. When empty MySQL's DECIMAL and DATETIME/TIMESTAMP with non-zero precison are seen as String on ClickHouse's side.\", 0) \\\n+\n+/// Settings that should not change after the creation of a database.\n+#define APPLY_FOR_IMMUTABLE_CONNECTION_MYSQL_SETTINGS(M) \\\n+    M(mysql_datatypes_support_level)\n+\n+DECLARE_SETTINGS_TRAITS(ConnectionMySQLSettingsTraits, LIST_OF_CONNECTION_MYSQL_SETTINGS)\n+\n+\n+/** Settings for the MySQL database engine.\n+  * Could be loaded from a CREATE DATABASE query (SETTINGS clause) and Query settings.\n+  */\n+struct ConnectionMySQLSettings : public BaseSettings<ConnectionMySQLSettingsTraits>\n+{\n+    void loadFromQuery(ASTStorage & storage_def);\n+\n+    void loadFromQueryContext(const Context & context);\n+};\n+\n+}\ndiff --git a/src/Databases/MySQL/DatabaseConnectionMySQL.cpp b/src/Databases/MySQL/DatabaseConnectionMySQL.cpp\nindex 9c94014bf23f..03d218d132f8 100644\n--- a/src/Databases/MySQL/DatabaseConnectionMySQL.cpp\n+++ b/src/Databases/MySQL/DatabaseConnectionMySQL.cpp\n@@ -45,13 +45,13 @@ static constexpr const std::chrono::seconds cleaner_sleep_time{30};\n static const std::chrono::seconds lock_acquire_timeout{10};\n \n DatabaseConnectionMySQL::DatabaseConnectionMySQL(const Context & context, const String & database_name_, const String & metadata_path_,\n-    const ASTStorage * database_engine_define_, const String & database_name_in_mysql_, mysqlxx::Pool && pool)\n+    const ASTStorage * database_engine_define_, const String & database_name_in_mysql_, std::unique_ptr<ConnectionMySQLSettings> settings_, mysqlxx::Pool && pool)\n     : IDatabase(database_name_)\n     , global_context(context.getGlobalContext())\n     , metadata_path(metadata_path_)\n     , database_engine_define(database_engine_define_->clone())\n     , database_name_in_mysql(database_name_in_mysql_)\n-    , mysql_datatypes_support_level(context.getQueryContext().getSettingsRef().mysql_datatypes_support_level)\n+    , database_settings(std::move(settings_))\n     , mysql_pool(std::move(pool))\n {\n     empty(); /// test database is works fine.\n@@ -133,9 +133,20 @@ static ASTPtr getCreateQueryFromStorage(const StoragePtr & storage, const ASTPtr\n             columns_expression_list->children.emplace_back(column_declaration);\n         }\n \n+        ASTStorage * ast_storage = table_storage_define->as<ASTStorage>();\n+        ASTs storage_children = ast_storage->children;\n+        auto storage_engine_arguments = ast_storage->engine->arguments;\n+\n+        /// Add table_name to engine arguments\n         auto mysql_table_name = std::make_shared<ASTLiteral>(table_id.table_name);\n-        auto storage_engine_arguments = table_storage_define->as<ASTStorage>()->engine->arguments;\n         storage_engine_arguments->children.insert(storage_engine_arguments->children.begin() + 2, mysql_table_name);\n+\n+        /// Unset settings\n+        storage_children.erase(\n+            std::remove_if(storage_children.begin(), storage_children.end(),\n+                [&](const ASTPtr & element) { return element.get() == ast_storage->settings; }),\n+            storage_children.end());\n+        ast_storage->settings = nullptr;\n     }\n \n     return create_table_query;\n@@ -273,7 +284,7 @@ std::map<String, NamesAndTypesList> DatabaseConnectionMySQL::fetchTablesColumnsL\n             database_name_in_mysql,\n             tables_name,\n             settings.external_table_functions_use_nulls,\n-            mysql_datatypes_support_level);\n+            database_settings->mysql_datatypes_support_level);\n }\n \n void DatabaseConnectionMySQL::shutdown()\ndiff --git a/src/Databases/MySQL/DatabaseConnectionMySQL.h b/src/Databases/MySQL/DatabaseConnectionMySQL.h\nindex e9f72adc0134..7bf5e8c1d882 100644\n--- a/src/Databases/MySQL/DatabaseConnectionMySQL.h\n+++ b/src/Databases/MySQL/DatabaseConnectionMySQL.h\n@@ -8,6 +8,7 @@\n #include <Core/MultiEnum.h>\n #include <Common/ThreadPool.h>\n #include <Databases/DatabasesCommon.h>\n+#include <Databases/MySQL/ConnectionMySQLSettings.h>\n #include <Parsers/ASTCreateQuery.h>\n \n #include <atomic>\n@@ -36,7 +37,8 @@ class DatabaseConnectionMySQL final : public IDatabase\n \n     DatabaseConnectionMySQL(\n         const Context & context, const String & database_name, const String & metadata_path,\n-        const ASTStorage * database_engine_define, const String & database_name_in_mysql, mysqlxx::Pool && pool);\n+        const ASTStorage * database_engine_define, const String & database_name_in_mysql, std::unique_ptr<ConnectionMySQLSettings> settings_,\n+        mysqlxx::Pool && pool);\n \n     String getEngineName() const override { return \"MySQL\"; }\n \n@@ -76,9 +78,7 @@ class DatabaseConnectionMySQL final : public IDatabase\n     String metadata_path;\n     ASTPtr database_engine_define;\n     String database_name_in_mysql;\n-    // Cache setting for later from query context upon creation,\n-    // so column types depend on the settings set at query-level.\n-    MultiEnum<MySQLDataTypesSupport> mysql_datatypes_support_level;\n+    std::unique_ptr<ConnectionMySQLSettings> database_settings;\n \n     std::atomic<bool> quit{false};\n     std::condition_variable cond;\ndiff --git a/src/Databases/ya.make b/src/Databases/ya.make\nindex 726127bfe52a..b4173057e035 100644\n--- a/src/Databases/ya.make\n+++ b/src/Databases/ya.make\n@@ -17,6 +17,7 @@ SRCS(\n     DatabaseOrdinary.cpp\n     DatabasesCommon.cpp\n     DatabaseWithDictionaries.cpp\n+    MySQL/ConnectionMySQLSettings.cpp\n     MySQL/DatabaseConnectionMySQL.cpp\n     MySQL/DatabaseMaterializeMySQL.cpp\n     MySQL/FetchTablesColumnsList.cpp\n",
  "test_patch": "diff --git a/tests/integration/test_mysql_database_engine/test.py b/tests/integration/test_mysql_database_engine/test.py\nindex 399b92631238..a8824b383abc 100644\n--- a/tests/integration/test_mysql_database_engine/test.py\n+++ b/tests/integration/test_mysql_database_engine/test.py\n@@ -124,6 +124,9 @@ def test_clickhouse_dml_for_mysql_database(started_cluster):\n         clickhouse_node.query(\"INSERT INTO `test_database`.`test_table`(`i``d`) select number from numbers(10000)\")\n         assert clickhouse_node.query(\"SELECT count() FROM `test_database`.`test_table`\").rstrip() == '10000'\n \n+        clickhouse_node.query(\"DROP DATABASE test_database\")\n+        assert 'test_database' not in clickhouse_node.query('SHOW DATABASES')\n+\n         mysql_node.query(\"DROP DATABASE test_database\")\n \n \n@@ -160,6 +163,36 @@ def test_bad_arguments_for_mysql_database_engine(started_cluster):\n         mysql_node.query(\"DROP DATABASE test_bad_arguments\")\n \n \n+def test_data_types_support_level_for_mysql_database_engine(started_cluster):\n+    with contextlib.closing(MySQLNodeInstance('root', 'clickhouse', '127.0.0.1', port=3308)) as mysql_node:\n+        mysql_node.query(\"CREATE DATABASE IF NOT EXISTS test DEFAULT CHARACTER SET 'utf8'\")\n+        clickhouse_node.query(\"CREATE DATABASE test_database ENGINE = MySQL('mysql1:3306', test, 'root', 'clickhouse')\",\n+            settings={\"mysql_datatypes_support_level\": \"decimal,datetime64\"})\n+\n+        assert \"SETTINGS mysql_datatypes_support_level = \\\\'decimal,datetime64\\\\'\" in clickhouse_node.query(\"SHOW CREATE DATABASE test_database FORMAT TSV\")\n+        clickhouse_node.query(\"DETACH DATABASE test_database\")\n+\n+        # without context settings\n+        clickhouse_node.query(\"ATTACH DATABASE test_database\")\n+        assert \"SETTINGS mysql_datatypes_support_level = \\\\'decimal,datetime64\\\\'\" in clickhouse_node.query(\"SHOW CREATE DATABASE test_database FORMAT TSV\")\n+\n+        clickhouse_node.query(\n+            \"CREATE DATABASE test_database_1 ENGINE = MySQL('mysql1:3306', test, 'root', 'clickhouse') SETTINGS mysql_datatypes_support_level = 'decimal,datetime64'\",\n+            settings={\"mysql_datatypes_support_level\": \"decimal\"})\n+\n+        assert \"SETTINGS mysql_datatypes_support_level = \\\\'decimal,datetime64\\\\'\" in clickhouse_node.query(\"SHOW CREATE DATABASE test_database_1 FORMAT TSV\")\n+        clickhouse_node.query(\"DETACH DATABASE test_database_1\")\n+\n+        # without context settings\n+        clickhouse_node.query(\"ATTACH DATABASE test_database_1\")\n+        assert \"SETTINGS mysql_datatypes_support_level = \\\\'decimal,datetime64\\\\'\" in clickhouse_node.query(\"SHOW CREATE DATABASE test_database_1 FORMAT TSV\")\n+\n+        clickhouse_node.query(\"DROP DATABASE test_database\")\n+        clickhouse_node.query(\"DROP DATABASE test_database_1\")\n+        assert 'test_database' not in clickhouse_node.query('SHOW DATABASES')\n+        mysql_node.query(\"DROP DATABASE test\")\n+\n+\n decimal_values = [0.123, 0.4, 5.67, 8.91011, 123456789.123, -0.123, -0.4, -5.67, -8.91011, -123456789.123]\n timestamp_values = ['2015-05-18 07:40:01.123', '2019-09-16 19:20:11.123']\n timestamp_values_no_subsecond = ['2015-05-18 07:40:01', '2019-09-16 19:20:11']\n",
  "problem_statement": "Cannot create MySQL database, because... There is no query.\n```\r\nCaught exception while loading metadata: Code: 501, e.displayText() = DB::Exception: Cannot create MySQL database, because Code: 393, e.displayText() \r\n= DB::Exception: There is no query, Stack trace (when copying this message, always include the lines below):\r\n\r\n0. /home/milovidov/ClickHouse/build_gcc9/../contrib/poco/Foundation/src/Exception.cpp:27: Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, \r\nint) @ 0x1074687c in /usr/bin/clickhouse\r\n1. /home/milovidov/ClickHouse/build_gcc9/../src/Common/Exception.cpp:37: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x7867c29 in\r\n /usr/bin/clickhouse\r\n2. /home/milovidov/ClickHouse/build_gcc9/../contrib/libcxx/include/string:2134: DB::Context::getQueryContext() const (.cold) @ 0xd202416 in /usr/bin/clickhouse\r\n3. /home/milovidov/ClickHouse/build_gcc9/../src/Interpreters/Context.h:457: DB::DatabaseConnectionMySQL::DatabaseConnectionMySQL(DB::Context const&, std::__1::basic_string<char, std::__1::char_traits<char>, std:\r\n:__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::ASTStorage const*, std::__1::basic_string<char, std::__1::char_traits<char>, std:\r\n:__1::allocator<char> > const&, mysqlxx::Pool&&) @ 0xd408d7c in /usr/bin/clickhouse\r\n```\r\n\r\n```\r\nATTACH DATABASE conv_main\r\nENGINE = MySQL('hostname:3306', 'db', 'metrika', 'password')\r\n```\n",
  "hints_text": "I will try to fix it.\nI have encountered the problem,  and should delete that table metadata info in the clickhouse `data` directory.",
  "created_at": "2020-09-28T10:04:36Z",
  "modified_files": [
    "src/Core/MultiEnum.h",
    "src/Databases/DatabaseFactory.cpp",
    "b/src/Databases/MySQL/ConnectionMySQLSettings.cpp",
    "b/src/Databases/MySQL/ConnectionMySQLSettings.h",
    "src/Databases/MySQL/DatabaseConnectionMySQL.cpp",
    "src/Databases/MySQL/DatabaseConnectionMySQL.h",
    "src/Databases/ya.make"
  ],
  "modified_test_files": [
    "tests/integration/test_mysql_database_engine/test.py"
  ]
}