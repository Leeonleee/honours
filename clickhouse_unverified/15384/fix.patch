diff --git a/src/Core/MultiEnum.h b/src/Core/MultiEnum.h
index ddfc5b13e86c..a7e3393c9c33 100644
--- a/src/Core/MultiEnum.h
+++ b/src/Core/MultiEnum.h
@@ -86,7 +86,7 @@ struct MultiEnum
         return right.operator==(left);
     }
 
-    template <typename L>
+    template <typename L, typename = typename std::enable_if<!std::is_same_v<L, MultiEnum>>::type>
     friend bool operator!=(L left, MultiEnum right)
     {
         return !(right.operator==(left));
diff --git a/src/Databases/DatabaseFactory.cpp b/src/Databases/DatabaseFactory.cpp
index 1bf4db74bf01..2bb4c595c052 100644
--- a/src/Databases/DatabaseFactory.cpp
+++ b/src/Databases/DatabaseFactory.cpp
@@ -19,6 +19,7 @@
 
 #if USE_MYSQL
 #    include <Core/MySQL/MySQLClient.h>
+#    include <Databases/MySQL/ConnectionMySQLSettings.h>
 #    include <Databases/MySQL/DatabaseConnectionMySQL.h>
 #    include <Databases/MySQL/MaterializeMySQLSettings.h>
 #    include <Databases/MySQL/DatabaseMaterializeMySQL.h>
@@ -83,7 +84,7 @@ DatabasePtr DatabaseFactory::getImpl(const ASTCreateQuery & create, const String
         throw Exception("Database engine " + engine_name + " cannot have arguments", ErrorCodes::BAD_ARGUMENTS);
 
     if (engine_define->engine->parameters || engine_define->partition_by || engine_define->primary_key || engine_define->order_by ||
-        engine_define->sample_by || (engine_name != "MaterializeMySQL" && engine_define->settings))
+        engine_define->sample_by || (!endsWith(engine_name, "MySQL") && engine_define->settings))
         throw Exception("Database engine " + engine_name + " cannot have parameters, primary_key, order_by, sample_by, settings",
                         ErrorCodes::UNKNOWN_ELEMENT_IN_AST);
 
@@ -133,8 +134,13 @@ DatabasePtr DatabaseFactory::getImpl(const ASTCreateQuery & create, const String
                     , std::move(materialize_mode_settings));
             }
 
+            auto mysql_database_settings = std::make_unique<ConnectionMySQLSettings>();
+
+            mysql_database_settings->loadFromQueryContext(context);
+            mysql_database_settings->loadFromQuery(*engine_define); /// higher priority
+
             return std::make_shared<DatabaseConnectionMySQL>(
-                context, database_name, metadata_path, engine_define, mysql_database_name, std::move(mysql_pool));
+                context, database_name, metadata_path, engine_define, mysql_database_name, std::move(mysql_database_settings), std::move(mysql_pool));
         }
         catch (...)
         {
diff --git a/src/Databases/MySQL/ConnectionMySQLSettings.cpp b/src/Databases/MySQL/ConnectionMySQLSettings.cpp
new file mode 100644
index 000000000000..fa92e793225b
--- /dev/null
+++ b/src/Databases/MySQL/ConnectionMySQLSettings.cpp
@@ -0,0 +1,65 @@
+#include <Databases/MySQL/ConnectionMySQLSettings.h>
+
+#include <Core/SettingsFields.h>
+#include <Interpreters/Context.h>
+#include <Parsers/ASTFunction.h>
+#include <Parsers/ASTCreateQuery.h>
+
+namespace DB
+{
+
+namespace ErrorCodes
+{
+    extern const int UNKNOWN_SETTING;
+    extern const int BAD_ARGUMENTS;
+}
+
+IMPLEMENT_SETTINGS_TRAITS(ConnectionMySQLSettingsTraits, LIST_OF_CONNECTION_MYSQL_SETTINGS)
+
+void ConnectionMySQLSettings::loadFromQuery(ASTStorage & storage_def)
+{
+    if (storage_def.settings)
+    {
+        try
+        {
+            applyChanges(storage_def.settings->changes);
+        }
+        catch (Exception & e)
+        {
+            if (e.code() == ErrorCodes::UNKNOWN_SETTING)
+                throw Exception(e.message() + " for database " + storage_def.engine->name, ErrorCodes::BAD_ARGUMENTS);
+            else
+                e.rethrow();
+        }
+    }
+    else
+    {
+        auto settings_ast = std::make_shared<ASTSetQuery>();
+        settings_ast->is_standalone = false;
+        storage_def.set(storage_def.settings, settings_ast);
+    }
+
+    SettingsChanges & changes = storage_def.settings->changes;
+#define ADD_IF_ABSENT(NAME)                                                                                   \
+    if (std::find_if(changes.begin(), changes.end(),                                                          \
+                  [](const SettingChange & c) { return c.name == #NAME; })                                    \
+            == changes.end())                                                                                 \
+        changes.push_back(SettingChange{#NAME, static_cast<Field>(NAME)});
+
+    APPLY_FOR_IMMUTABLE_CONNECTION_MYSQL_SETTINGS(ADD_IF_ABSENT)
+#undef ADD_IF_ABSENT
+}
+
+void ConnectionMySQLSettings::loadFromQueryContext(const Context & context)
+{
+    if (!context.hasQueryContext())
+        return;
+
+    const Settings & settings = context.getQueryContext().getSettingsRef();
+
+    if (settings.mysql_datatypes_support_level.value != mysql_datatypes_support_level.value)
+        set("mysql_datatypes_support_level", settings.mysql_datatypes_support_level.toString());
+}
+
+
+}
diff --git a/src/Databases/MySQL/ConnectionMySQLSettings.h b/src/Databases/MySQL/ConnectionMySQLSettings.h
new file mode 100644
index 000000000000..90279f846a49
--- /dev/null
+++ b/src/Databases/MySQL/ConnectionMySQLSettings.h
@@ -0,0 +1,33 @@
+#pragma once
+
+#include <Core/Defines.h>
+#include <Core/BaseSettings.h>
+#include <Core/SettingsEnums.h>
+
+namespace DB
+{
+
+class Context;
+class ASTStorage;
+
+#define LIST_OF_CONNECTION_MYSQL_SETTINGS(M) \
+    M(MySQLDataTypesSupport, mysql_datatypes_support_level, 0, "Which MySQL types should be converted to corresponding ClickHouse types (rather than being represented as String). Can be empty or any combination of 'decimal' or 'datetime64'. When empty MySQL's DECIMAL and DATETIME/TIMESTAMP with non-zero precison are seen as String on ClickHouse's side.", 0) \
+
+/// Settings that should not change after the creation of a database.
+#define APPLY_FOR_IMMUTABLE_CONNECTION_MYSQL_SETTINGS(M) \
+    M(mysql_datatypes_support_level)
+
+DECLARE_SETTINGS_TRAITS(ConnectionMySQLSettingsTraits, LIST_OF_CONNECTION_MYSQL_SETTINGS)
+
+
+/** Settings for the MySQL database engine.
+  * Could be loaded from a CREATE DATABASE query (SETTINGS clause) and Query settings.
+  */
+struct ConnectionMySQLSettings : public BaseSettings<ConnectionMySQLSettingsTraits>
+{
+    void loadFromQuery(ASTStorage & storage_def);
+
+    void loadFromQueryContext(const Context & context);
+};
+
+}
diff --git a/src/Databases/MySQL/DatabaseConnectionMySQL.cpp b/src/Databases/MySQL/DatabaseConnectionMySQL.cpp
index 9c94014bf23f..03d218d132f8 100644
--- a/src/Databases/MySQL/DatabaseConnectionMySQL.cpp
+++ b/src/Databases/MySQL/DatabaseConnectionMySQL.cpp
@@ -45,13 +45,13 @@ static constexpr const std::chrono::seconds cleaner_sleep_time{30};
 static const std::chrono::seconds lock_acquire_timeout{10};
 
 DatabaseConnectionMySQL::DatabaseConnectionMySQL(const Context & context, const String & database_name_, const String & metadata_path_,
-    const ASTStorage * database_engine_define_, const String & database_name_in_mysql_, mysqlxx::Pool && pool)
+    const ASTStorage * database_engine_define_, const String & database_name_in_mysql_, std::unique_ptr<ConnectionMySQLSettings> settings_, mysqlxx::Pool && pool)
     : IDatabase(database_name_)
     , global_context(context.getGlobalContext())
     , metadata_path(metadata_path_)
     , database_engine_define(database_engine_define_->clone())
     , database_name_in_mysql(database_name_in_mysql_)
-    , mysql_datatypes_support_level(context.getQueryContext().getSettingsRef().mysql_datatypes_support_level)
+    , database_settings(std::move(settings_))
     , mysql_pool(std::move(pool))
 {
     empty(); /// test database is works fine.
@@ -133,9 +133,20 @@ static ASTPtr getCreateQueryFromStorage(const StoragePtr & storage, const ASTPtr
             columns_expression_list->children.emplace_back(column_declaration);
         }
 
+        ASTStorage * ast_storage = table_storage_define->as<ASTStorage>();
+        ASTs storage_children = ast_storage->children;
+        auto storage_engine_arguments = ast_storage->engine->arguments;
+
+        /// Add table_name to engine arguments
         auto mysql_table_name = std::make_shared<ASTLiteral>(table_id.table_name);
-        auto storage_engine_arguments = table_storage_define->as<ASTStorage>()->engine->arguments;
         storage_engine_arguments->children.insert(storage_engine_arguments->children.begin() + 2, mysql_table_name);
+
+        /// Unset settings
+        storage_children.erase(
+            std::remove_if(storage_children.begin(), storage_children.end(),
+                [&](const ASTPtr & element) { return element.get() == ast_storage->settings; }),
+            storage_children.end());
+        ast_storage->settings = nullptr;
     }
 
     return create_table_query;
@@ -273,7 +284,7 @@ std::map<String, NamesAndTypesList> DatabaseConnectionMySQL::fetchTablesColumnsL
             database_name_in_mysql,
             tables_name,
             settings.external_table_functions_use_nulls,
-            mysql_datatypes_support_level);
+            database_settings->mysql_datatypes_support_level);
 }
 
 void DatabaseConnectionMySQL::shutdown()
diff --git a/src/Databases/MySQL/DatabaseConnectionMySQL.h b/src/Databases/MySQL/DatabaseConnectionMySQL.h
index e9f72adc0134..7bf5e8c1d882 100644
--- a/src/Databases/MySQL/DatabaseConnectionMySQL.h
+++ b/src/Databases/MySQL/DatabaseConnectionMySQL.h
@@ -8,6 +8,7 @@
 #include <Core/MultiEnum.h>
 #include <Common/ThreadPool.h>
 #include <Databases/DatabasesCommon.h>
+#include <Databases/MySQL/ConnectionMySQLSettings.h>
 #include <Parsers/ASTCreateQuery.h>
 
 #include <atomic>
@@ -36,7 +37,8 @@ class DatabaseConnectionMySQL final : public IDatabase
 
     DatabaseConnectionMySQL(
         const Context & context, const String & database_name, const String & metadata_path,
-        const ASTStorage * database_engine_define, const String & database_name_in_mysql, mysqlxx::Pool && pool);
+        const ASTStorage * database_engine_define, const String & database_name_in_mysql, std::unique_ptr<ConnectionMySQLSettings> settings_,
+        mysqlxx::Pool && pool);
 
     String getEngineName() const override { return "MySQL"; }
 
@@ -76,9 +78,7 @@ class DatabaseConnectionMySQL final : public IDatabase
     String metadata_path;
     ASTPtr database_engine_define;
     String database_name_in_mysql;
-    // Cache setting for later from query context upon creation,
-    // so column types depend on the settings set at query-level.
-    MultiEnum<MySQLDataTypesSupport> mysql_datatypes_support_level;
+    std::unique_ptr<ConnectionMySQLSettings> database_settings;
 
     std::atomic<bool> quit{false};
     std::condition_variable cond;
diff --git a/src/Databases/ya.make b/src/Databases/ya.make
index 726127bfe52a..b4173057e035 100644
--- a/src/Databases/ya.make
+++ b/src/Databases/ya.make
@@ -17,6 +17,7 @@ SRCS(
     DatabaseOrdinary.cpp
     DatabasesCommon.cpp
     DatabaseWithDictionaries.cpp
+    MySQL/ConnectionMySQLSettings.cpp
     MySQL/DatabaseConnectionMySQL.cpp
     MySQL/DatabaseMaterializeMySQL.cpp
     MySQL/FetchTablesColumnsList.cpp
