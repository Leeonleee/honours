You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Wrong result of external aggregation in case of partially materialized projection
Consider the following SQL script (based on test `01710_projections_partial_optimize_aggregation_in_order`):

```sql
DROP TABLE IF EXISTS in_order_agg_partial_01710;

CREATE TABLE in_order_agg_partial_01710
(
    k1 UInt32,
    k2 UInt32,
    k3 UInt32,
    value UInt32
)
ENGINE = MergeTree
ORDER BY tuple();

INSERT INTO in_order_agg_partial_01710 SELECT 1, number%2, number%4, number FROM numbers(50000);

SYSTEM STOP MERGES in_order_agg_partial_01710;

ALTER TABLE in_order_agg_partial_01710 ADD PROJECTION aaaa (
    SELECT
        k1,
        k2,
        k3,
        sum(value)
    GROUP BY k1, k2, k3
);

INSERT INTO in_order_agg_partial_01710 SELECT 1, number%2, number%4, number FROM numbers(100000) LIMIT 50000, 100000;

SELECT '*** correct aggregation ***';

SELECT k1, k2, k3, sum(value) v FROM in_order_agg_partial_01710 GROUP BY k1, k2, k3 ORDER BY k1, k2, k3 SETTINGS optimize_use_projections = 0;

SELECT '*** correct aggregation with projection ***';

SELECT k1, k2, k3, sum(value) v FROM in_order_agg_partial_01710 GROUP BY k1, k2, k3 ORDER BY k1, k2, k3;

SELECT '*** optimize_aggregation_in_order = 0, max_bytes_before_external_group_by = 1, group_by_two_level_threshold = 1 ***';

SELECT k1, k2, k3, sum(value) v FROM in_order_agg_partial_01710 GROUP BY k1, k2, k3 ORDER BY k1, k2, k3 SETTINGS optimize_aggregation_in_order = 0, max_bytes_before_external_group_by = 1, group_by_two_level_threshold = 1;

SELECT '*** optimize_aggregation_in_order = 1, max_bytes_before_external_group_by = 1, group_by_two_level_threshold = 1 ***';

SELECT k1, k2, k3, sum(value) v FROM in_order_agg_partial_01710 GROUP BY k1, k2, k3 ORDER BY k1, k2, k3 SETTINGS optimize_aggregation_in_order = 1, max_bytes_before_external_group_by = 1, group_by_two_level_threshold = 1;

SYSTEM START MERGES in_order_agg_partial_01710;

ALTER TABLE in_order_agg_partial_01710 MATERIALIZE PROJECTION aaaa SETTINGS mutations_sync = 2;

SELECT '*** after materialization ***';

SELECT '*** correct aggregation ***';

SELECT k1, k2, k3, sum(value) v FROM in_order_agg_partial_01710 GROUP BY k1, k2, k3 ORDER BY k1, k2, k3 SETTINGS optimize_use_projections = 0;

SELECT '*** correct aggregation with projection ***';

SELECT k1, k2, k3, sum(value) v FROM in_order_agg_partial_01710 GROUP BY k1, k2, k3 ORDER BY k1, k2, k3;

SELECT '*** optimize_aggregation_in_order = 0, max_bytes_before_external_group_by = 1, group_by_two_level_threshold = 1 ***';

SELECT k1, k2, k3, sum(value) v FROM in_order_agg_partial_01710 GROUP BY k1, k2, k3 ORDER BY k1, k2, k3 SETTINGS optimize_aggregation_in_order = 0, max_bytes_before_external_group_by = 1, group_by_two_level_threshold = 1;

SELECT '*** optimize_aggregation_in_order = 1, max_bytes_before_external_group_by = 1, group_by_two_level_threshold = 1 ***';

SELECT k1, k2, k3, sum(value) v FROM in_order_agg_partial_01710 GROUP BY k1, k2, k3 ORDER BY k1, k2, k3 SETTINGS optimize_aggregation_in_order = 1, max_bytes_before_external_group_by = 1, group_by_two_level_threshold = 1;
```

It gives us the following output:

```
*** correct aggregation ***
1       0       0       1249950000
1       0       2       1250000000
1       1       1       1249975000
1       1       3       1250025000
*** correct aggregation with projection ***
1       0       0       1249950000
1       0       2       1250000000
1       1       1       1249975000
1       1       3       1250025000
*** optimize_aggregation_in_order = 0, max_bytes_before_external_group_by = 1, group_by_two_level_threshold = 1 ***
1       0       0       937475000
1       0       2       937500000
1       1       1       937487500
1       1       3       937512500
*** optimize_aggregation_in_order = 1, max_bytes_before_external_group_by = 1, group_by_two_level_threshold = 1 ***
1       0       0       312475000
1       0       2       312500000
1       1       1       312487500
1       1       3       312512500
*** after materialization ***
*** correct aggregation ***
1       0       0       1249950000
1       0       2       1250000000
1       1       1       1249975000
1       1       3       1250025000
*** correct aggregation with projection ***
1       0       0       1249950000
1       0       2       1250000000
1       1       1       1249975000
1       1       3       1250025000
*** optimize_aggregation_in_order = 0, max_bytes_before_external_group_by = 1, group_by_two_level_threshold = 1 ***
1       0       0       1249950000
1       0       2       1250000000
1       1       1       1249975000
1       1       3       1250025000
*** optimize_aggregation_in_order = 1, max_bytes_before_external_group_by = 1, group_by_two_level_threshold = 1 ***
1       0       0       1249950000
1       0       2       1250000000
1       1       1       1249975000
1       1       3       1250025000
```

You can see that with enabed two level and external aggregation there are wrong query results after we've added a projection which is materialized only in one part. Note that result may differ according to the value of `optimize_aggregation_in_order` setting but is wrong anyway.
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
