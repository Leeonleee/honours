{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 57790,
  "instance_id": "ClickHouse__ClickHouse-57790",
  "issue_numbers": [
    "57692"
  ],
  "base_commit": "6567fb2c0881b087033264f4c551467a26d0c3aa",
  "patch": "diff --git a/src/Processors/Transforms/AggregatingTransform.cpp b/src/Processors/Transforms/AggregatingTransform.cpp\nindex bf475c57d367..1f52ed974911 100644\n--- a/src/Processors/Transforms/AggregatingTransform.cpp\n+++ b/src/Processors/Transforms/AggregatingTransform.cpp\n@@ -726,8 +726,11 @@ void AggregatingTransform::initGenerate()\n             auto prepared_data = params->aggregator.prepareVariantsToMerge(many_data->variants);\n             Pipes pipes;\n             for (auto & variant : prepared_data)\n+            {\n                 /// Converts hash tables to blocks with data (finalized or not).\n                 pipes.emplace_back(std::make_shared<ConvertingAggregatedToChunksSource>(params, variant));\n+            }\n+\n             Pipe pipe = Pipe::unitePipes(std::move(pipes));\n             if (!pipe.empty())\n             {\n@@ -781,21 +784,23 @@ void AggregatingTransform::initGenerate()\n             }\n         }\n \n-        const auto & tmp_data = params->aggregator.getTemporaryData();\n+        size_t num_streams = 0;\n+        size_t compressed_size = 0;\n+        size_t uncompressed_size = 0;\n \n-        Pipe pipe;\n+        Pipes pipes;\n+        /// Merge external data from all aggregators used in query.\n+        for (const auto & aggregator : *params->aggregator_list_ptr)\n         {\n-            Pipes pipes;\n-\n+            const auto & tmp_data = aggregator.getTemporaryData();\n             for (auto * tmp_stream : tmp_data.getStreams())\n                 pipes.emplace_back(Pipe(std::make_unique<SourceFromNativeStream>(tmp_stream)));\n \n-            pipe = Pipe::unitePipes(std::move(pipes));\n+            num_streams += tmp_data.getStreams().size();\n+            compressed_size += tmp_data.getStat().compressed_size;\n+            uncompressed_size += tmp_data.getStat().uncompressed_size;\n         }\n \n-        size_t num_streams = tmp_data.getStreams().size();\n-        size_t compressed_size = tmp_data.getStat().compressed_size;\n-        size_t uncompressed_size = tmp_data.getStat().uncompressed_size;\n         LOG_DEBUG(\n             log,\n             \"Will merge {} temporary files of size {} compressed, {} uncompressed.\",\n@@ -803,6 +808,7 @@ void AggregatingTransform::initGenerate()\n             ReadableSize(compressed_size),\n             ReadableSize(uncompressed_size));\n \n+        auto pipe = Pipe::unitePipes(std::move(pipes));\n         addMergingAggregatedMemoryEfficientTransform(pipe, params, temporary_data_merge_threads);\n \n         processors = Pipe::detachProcessors(std::move(pipe));\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02941_projections_external_aggregation.reference b/tests/queries/0_stateless/02941_projections_external_aggregation.reference\nnew file mode 100644\nindex 000000000000..4b1a62520cd5\n--- /dev/null\n+++ b/tests/queries/0_stateless/02941_projections_external_aggregation.reference\n@@ -0,0 +1,41 @@\n+*** correct aggregation ***\n+1\t0\t0\t1249950000\n+1\t0\t2\t1250000000\n+1\t1\t1\t1249975000\n+1\t1\t3\t1250025000\n+*** correct aggregation with projection ***\n+1\t0\t0\t1249950000\n+1\t0\t2\t1250000000\n+1\t1\t1\t1249975000\n+1\t1\t3\t1250025000\n+*** optimize_aggregation_in_order = 0, max_bytes_before_external_group_by = 1, group_by_two_level_threshold = 1 ***\n+1\t0\t0\t1249950000\n+1\t0\t2\t1250000000\n+1\t1\t1\t1249975000\n+1\t1\t3\t1250025000\n+*** optimize_aggregation_in_order = 1, max_bytes_before_external_group_by = 1, group_by_two_level_threshold = 1 ***\n+1\t0\t0\t1249950000\n+1\t0\t2\t1250000000\n+1\t1\t1\t1249975000\n+1\t1\t3\t1250025000\n+*** after materialization ***\n+*** correct aggregation ***\n+1\t0\t0\t1249950000\n+1\t0\t2\t1250000000\n+1\t1\t1\t1249975000\n+1\t1\t3\t1250025000\n+*** correct aggregation with projection ***\n+1\t0\t0\t1249950000\n+1\t0\t2\t1250000000\n+1\t1\t1\t1249975000\n+1\t1\t3\t1250025000\n+*** optimize_aggregation_in_order = 0, max_bytes_before_external_group_by = 1, group_by_two_level_threshold = 1 ***\n+1\t0\t0\t1249950000\n+1\t0\t2\t1250000000\n+1\t1\t1\t1249975000\n+1\t1\t3\t1250025000\n+*** optimize_aggregation_in_order = 1, max_bytes_before_external_group_by = 1, group_by_two_level_threshold = 1 ***\n+1\t0\t0\t1249950000\n+1\t0\t2\t1250000000\n+1\t1\t1\t1249975000\n+1\t1\t3\t1250025000\ndiff --git a/tests/queries/0_stateless/02941_projections_external_aggregation.sql b/tests/queries/0_stateless/02941_projections_external_aggregation.sql\nnew file mode 100644\nindex 000000000000..5053773f1424\n--- /dev/null\n+++ b/tests/queries/0_stateless/02941_projections_external_aggregation.sql\n@@ -0,0 +1,66 @@\n+DROP TABLE IF EXISTS t_proj_external;\n+\n+CREATE TABLE t_proj_external\n+(\n+    k1 UInt32,\n+    k2 UInt32,\n+    k3 UInt32,\n+    value UInt32\n+)\n+ENGINE = MergeTree\n+ORDER BY tuple();\n+\n+INSERT INTO t_proj_external SELECT 1, number%2, number%4, number FROM numbers(50000);\n+\n+SYSTEM STOP MERGES t_proj_external;\n+\n+ALTER TABLE t_proj_external ADD PROJECTION aaaa (\n+    SELECT\n+        k1,\n+        k2,\n+        k3,\n+        sum(value)\n+    GROUP BY k1, k2, k3\n+);\n+\n+INSERT INTO t_proj_external SELECT 1, number%2, number%4, number FROM numbers(100000) LIMIT 50000, 100000;\n+\n+SELECT '*** correct aggregation ***';\n+\n+SELECT k1, k2, k3, sum(value) v FROM t_proj_external GROUP BY k1, k2, k3 ORDER BY k1, k2, k3 SETTINGS optimize_use_projections = 0;\n+\n+SELECT '*** correct aggregation with projection ***';\n+\n+SELECT k1, k2, k3, sum(value) v FROM t_proj_external GROUP BY k1, k2, k3 ORDER BY k1, k2, k3;\n+\n+SELECT '*** optimize_aggregation_in_order = 0, max_bytes_before_external_group_by = 1, group_by_two_level_threshold = 1 ***';\n+\n+SELECT k1, k2, k3, sum(value) v FROM t_proj_external GROUP BY k1, k2, k3 ORDER BY k1, k2, k3 SETTINGS optimize_aggregation_in_order = 0, max_bytes_before_external_group_by = 1, group_by_two_level_threshold = 1;\n+\n+SELECT '*** optimize_aggregation_in_order = 1, max_bytes_before_external_group_by = 1, group_by_two_level_threshold = 1 ***';\n+\n+SELECT k1, k2, k3, sum(value) v FROM t_proj_external GROUP BY k1, k2, k3 ORDER BY k1, k2, k3 SETTINGS optimize_aggregation_in_order = 1, max_bytes_before_external_group_by = 1, group_by_two_level_threshold = 1;\n+\n+SYSTEM START MERGES t_proj_external;\n+\n+ALTER TABLE t_proj_external MATERIALIZE PROJECTION aaaa SETTINGS mutations_sync = 2;\n+\n+SELECT '*** after materialization ***';\n+\n+SELECT '*** correct aggregation ***';\n+\n+SELECT k1, k2, k3, sum(value) v FROM t_proj_external GROUP BY k1, k2, k3 ORDER BY k1, k2, k3 SETTINGS optimize_use_projections = 0;\n+\n+SELECT '*** correct aggregation with projection ***';\n+\n+SELECT k1, k2, k3, sum(value) v FROM t_proj_external GROUP BY k1, k2, k3 ORDER BY k1, k2, k3;\n+\n+SELECT '*** optimize_aggregation_in_order = 0, max_bytes_before_external_group_by = 1, group_by_two_level_threshold = 1 ***';\n+\n+SELECT k1, k2, k3, sum(value) v FROM t_proj_external GROUP BY k1, k2, k3 ORDER BY k1, k2, k3 SETTINGS optimize_aggregation_in_order = 0, max_bytes_before_external_group_by = 1, group_by_two_level_threshold = 1;\n+\n+SELECT '*** optimize_aggregation_in_order = 1, max_bytes_before_external_group_by = 1, group_by_two_level_threshold = 1 ***';\n+\n+SELECT k1, k2, k3, sum(value) v FROM t_proj_external GROUP BY k1, k2, k3 ORDER BY k1, k2, k3 SETTINGS optimize_aggregation_in_order = 1, max_bytes_before_external_group_by = 1, group_by_two_level_threshold = 1;\n+\n+DROP TABLE IF EXISTS t_proj_external;\n",
  "problem_statement": "Wrong result of external aggregation in case of partially materialized projection\nConsider the following SQL script (based on test `01710_projections_partial_optimize_aggregation_in_order`):\r\n\r\n```sql\r\nDROP TABLE IF EXISTS in_order_agg_partial_01710;\r\n\r\nCREATE TABLE in_order_agg_partial_01710\r\n(\r\n    k1 UInt32,\r\n    k2 UInt32,\r\n    k3 UInt32,\r\n    value UInt32\r\n)\r\nENGINE = MergeTree\r\nORDER BY tuple();\r\n\r\nINSERT INTO in_order_agg_partial_01710 SELECT 1, number%2, number%4, number FROM numbers(50000);\r\n\r\nSYSTEM STOP MERGES in_order_agg_partial_01710;\r\n\r\nALTER TABLE in_order_agg_partial_01710 ADD PROJECTION aaaa (\r\n    SELECT\r\n        k1,\r\n        k2,\r\n        k3,\r\n        sum(value)\r\n    GROUP BY k1, k2, k3\r\n);\r\n\r\nINSERT INTO in_order_agg_partial_01710 SELECT 1, number%2, number%4, number FROM numbers(100000) LIMIT 50000, 100000;\r\n\r\nSELECT '*** correct aggregation ***';\r\n\r\nSELECT k1, k2, k3, sum(value) v FROM in_order_agg_partial_01710 GROUP BY k1, k2, k3 ORDER BY k1, k2, k3 SETTINGS optimize_use_projections = 0;\r\n\r\nSELECT '*** correct aggregation with projection ***';\r\n\r\nSELECT k1, k2, k3, sum(value) v FROM in_order_agg_partial_01710 GROUP BY k1, k2, k3 ORDER BY k1, k2, k3;\r\n\r\nSELECT '*** optimize_aggregation_in_order = 0, max_bytes_before_external_group_by = 1, group_by_two_level_threshold = 1 ***';\r\n\r\nSELECT k1, k2, k3, sum(value) v FROM in_order_agg_partial_01710 GROUP BY k1, k2, k3 ORDER BY k1, k2, k3 SETTINGS optimize_aggregation_in_order = 0, max_bytes_before_external_group_by = 1, group_by_two_level_threshold = 1;\r\n\r\nSELECT '*** optimize_aggregation_in_order = 1, max_bytes_before_external_group_by = 1, group_by_two_level_threshold = 1 ***';\r\n\r\nSELECT k1, k2, k3, sum(value) v FROM in_order_agg_partial_01710 GROUP BY k1, k2, k3 ORDER BY k1, k2, k3 SETTINGS optimize_aggregation_in_order = 1, max_bytes_before_external_group_by = 1, group_by_two_level_threshold = 1;\r\n\r\nSYSTEM START MERGES in_order_agg_partial_01710;\r\n\r\nALTER TABLE in_order_agg_partial_01710 MATERIALIZE PROJECTION aaaa SETTINGS mutations_sync = 2;\r\n\r\nSELECT '*** after materialization ***';\r\n\r\nSELECT '*** correct aggregation ***';\r\n\r\nSELECT k1, k2, k3, sum(value) v FROM in_order_agg_partial_01710 GROUP BY k1, k2, k3 ORDER BY k1, k2, k3 SETTINGS optimize_use_projections = 0;\r\n\r\nSELECT '*** correct aggregation with projection ***';\r\n\r\nSELECT k1, k2, k3, sum(value) v FROM in_order_agg_partial_01710 GROUP BY k1, k2, k3 ORDER BY k1, k2, k3;\r\n\r\nSELECT '*** optimize_aggregation_in_order = 0, max_bytes_before_external_group_by = 1, group_by_two_level_threshold = 1 ***';\r\n\r\nSELECT k1, k2, k3, sum(value) v FROM in_order_agg_partial_01710 GROUP BY k1, k2, k3 ORDER BY k1, k2, k3 SETTINGS optimize_aggregation_in_order = 0, max_bytes_before_external_group_by = 1, group_by_two_level_threshold = 1;\r\n\r\nSELECT '*** optimize_aggregation_in_order = 1, max_bytes_before_external_group_by = 1, group_by_two_level_threshold = 1 ***';\r\n\r\nSELECT k1, k2, k3, sum(value) v FROM in_order_agg_partial_01710 GROUP BY k1, k2, k3 ORDER BY k1, k2, k3 SETTINGS optimize_aggregation_in_order = 1, max_bytes_before_external_group_by = 1, group_by_two_level_threshold = 1;\r\n```\r\n\r\nIt gives us the following output:\r\n\r\n```\r\n*** correct aggregation ***\r\n1       0       0       1249950000\r\n1       0       2       1250000000\r\n1       1       1       1249975000\r\n1       1       3       1250025000\r\n*** correct aggregation with projection ***\r\n1       0       0       1249950000\r\n1       0       2       1250000000\r\n1       1       1       1249975000\r\n1       1       3       1250025000\r\n*** optimize_aggregation_in_order = 0, max_bytes_before_external_group_by = 1, group_by_two_level_threshold = 1 ***\r\n1       0       0       937475000\r\n1       0       2       937500000\r\n1       1       1       937487500\r\n1       1       3       937512500\r\n*** optimize_aggregation_in_order = 1, max_bytes_before_external_group_by = 1, group_by_two_level_threshold = 1 ***\r\n1       0       0       312475000\r\n1       0       2       312500000\r\n1       1       1       312487500\r\n1       1       3       312512500\r\n*** after materialization ***\r\n*** correct aggregation ***\r\n1       0       0       1249950000\r\n1       0       2       1250000000\r\n1       1       1       1249975000\r\n1       1       3       1250025000\r\n*** correct aggregation with projection ***\r\n1       0       0       1249950000\r\n1       0       2       1250000000\r\n1       1       1       1249975000\r\n1       1       3       1250025000\r\n*** optimize_aggregation_in_order = 0, max_bytes_before_external_group_by = 1, group_by_two_level_threshold = 1 ***\r\n1       0       0       1249950000\r\n1       0       2       1250000000\r\n1       1       1       1249975000\r\n1       1       3       1250025000\r\n*** optimize_aggregation_in_order = 1, max_bytes_before_external_group_by = 1, group_by_two_level_threshold = 1 ***\r\n1       0       0       1249950000\r\n1       0       2       1250000000\r\n1       1       1       1249975000\r\n1       1       3       1250025000\r\n```\r\n\r\nYou can see that with enabed two level and external aggregation there are wrong query results after we've added a projection which is materialized only in one part. Note that result may differ according to the value of `optimize_aggregation_in_order` setting but is wrong anyway.\n",
  "hints_text": "",
  "created_at": "2023-12-12T16:53:06Z",
  "modified_files": [
    "src/Processors/Transforms/AggregatingTransform.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02941_projections_external_aggregation.reference",
    "b/tests/queries/0_stateless/02941_projections_external_aggregation.sql"
  ]
}