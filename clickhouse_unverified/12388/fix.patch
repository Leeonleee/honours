diff --git a/src/Interpreters/BloomFilter.cpp b/src/Interpreters/BloomFilter.cpp
index 7e4e25c26073..ff60db0dbb34 100644
--- a/src/Interpreters/BloomFilter.cpp
+++ b/src/Interpreters/BloomFilter.cpp
@@ -18,13 +18,32 @@ namespace ErrorCodes
 static constexpr UInt64 SEED_GEN_A = 845897321;
 static constexpr UInt64 SEED_GEN_B = 217728422;
 
+static constexpr UInt64 MAX_BLOOM_FILTER_SIZE = 1 << 30;
+
+
+BloomFilterParameters::BloomFilterParameters(size_t filter_size_, size_t filter_hashes_, size_t seed_)
+    : filter_size(filter_size_), filter_hashes(filter_hashes_), seed(seed_)
+{
+    if (filter_size == 0)
+        throw Exception("The size of bloom filter cannot be zero", ErrorCodes::BAD_ARGUMENTS);
+    if (filter_hashes == 0)
+        throw Exception("The number of hash functions for bloom filter cannot be zero", ErrorCodes::BAD_ARGUMENTS);
+    if (filter_size > MAX_BLOOM_FILTER_SIZE)
+        throw Exception(ErrorCodes::BAD_ARGUMENTS, "The size of bloom filter cannot be more than {}", MAX_BLOOM_FILTER_SIZE);
+}
+
+
 BloomFilter::BloomFilter(const BloomFilterParameters & params)
     : BloomFilter(params.filter_size, params.filter_hashes, params.seed)
 {
 }
 
 BloomFilter::BloomFilter(size_t size_, size_t hashes_, size_t seed_)
-    : size(size_), hashes(hashes_), seed(seed_), words((size + sizeof(UnderType) - 1) / sizeof(UnderType)), filter(words, 0) {}
+    : size(size_), hashes(hashes_), seed(seed_), words((size + sizeof(UnderType) - 1) / sizeof(UnderType)), filter(words, 0)
+{
+    assert(size != 0);
+    assert(hashes != 0);
+}
 
 bool BloomFilter::find(const char * data, size_t len)
 {
diff --git a/src/Interpreters/BloomFilter.h b/src/Interpreters/BloomFilter.h
index 941194c4a709..0362f475d881 100644
--- a/src/Interpreters/BloomFilter.h
+++ b/src/Interpreters/BloomFilter.h
@@ -9,10 +9,13 @@
 #include <Columns/ColumnVector.h>
 #include <DataTypes/IDataType.h>
 
+
 namespace DB
 {
 struct BloomFilterParameters
 {
+    BloomFilterParameters(size_t filter_size_, size_t filter_hashes_, size_t seed_);
+
     /// size of filter in bytes.
     size_t filter_size;
     /// number of used hash functions.
diff --git a/src/Storages/IndicesDescription.h b/src/Storages/IndicesDescription.h
index 18b41b05fbb4..464e466dcd03 100644
--- a/src/Storages/IndicesDescription.h
+++ b/src/Storages/IndicesDescription.h
@@ -39,8 +39,7 @@ struct IndexDescription
     /// Data types of index columns
     DataTypes data_types;
 
-    /// Sample block with index columns. (NOTE: columns in block are empty, but
-    /// not nullptr)
+    /// Sample block with index columns. (NOTE: columns in block are empty, but not nullptr)
     Block sample_block;
 
     /// Index granularity, make sense for skip indices
diff --git a/src/Storages/MergeTree/MergeTreeData.h b/src/Storages/MergeTree/MergeTreeData.h
index 7e54c74507dd..b003640e186e 100644
--- a/src/Storages/MergeTree/MergeTreeData.h
+++ b/src/Storages/MergeTree/MergeTreeData.h
@@ -507,11 +507,15 @@ class MergeTreeData : public IStorage
 
     /// Change MergeTreeSettings
     void changeSettings(
-           const ASTPtr & new_settings,
-           TableLockHolder & table_lock_holder);
+        const ASTPtr & new_settings,
+        TableLockHolder & table_lock_holder);
 
     /// Freezes all parts.
-    void freezeAll(const String & with_name, const StorageMetadataPtr & metadata_snapshot, const Context & context, TableLockHolder & table_lock_holder);
+    void freezeAll(
+        const String & with_name,
+        const StorageMetadataPtr & metadata_snapshot,
+        const Context & context,
+        TableLockHolder & table_lock_holder);
 
     /// Should be called if part data is suspected to be corrupted.
     void reportBrokenPart(const String & name) const
diff --git a/src/Storages/MergeTree/MergeTreeIndexAggregatorBloomFilter.cpp b/src/Storages/MergeTree/MergeTreeIndexAggregatorBloomFilter.cpp
index d7d9bd9c5254..e9176426e83c 100644
--- a/src/Storages/MergeTree/MergeTreeIndexAggregatorBloomFilter.cpp
+++ b/src/Storages/MergeTree/MergeTreeIndexAggregatorBloomFilter.cpp
@@ -22,6 +22,8 @@ MergeTreeIndexAggregatorBloomFilter::MergeTreeIndexAggregatorBloomFilter(
     size_t bits_per_row_, size_t hash_functions_, const Names & columns_name_)
     : bits_per_row(bits_per_row_), hash_functions(hash_functions_), index_columns_name(columns_name_)
 {
+    assert(bits_per_row != 0);
+    assert(hash_functions != 0);
 }
 
 bool MergeTreeIndexAggregatorBloomFilter::empty() const
diff --git a/src/Storages/MergeTree/MergeTreeIndexBloomFilter.cpp b/src/Storages/MergeTree/MergeTreeIndexBloomFilter.cpp
index e825bb97d6af..e9fb0c335948 100644
--- a/src/Storages/MergeTree/MergeTreeIndexBloomFilter.cpp
+++ b/src/Storages/MergeTree/MergeTreeIndexBloomFilter.cpp
@@ -35,6 +35,8 @@ MergeTreeIndexBloomFilter::MergeTreeIndexBloomFilter(
     , bits_per_row(bits_per_row_)
     , hash_functions(hash_functions_)
 {
+    assert(bits_per_row != 0);
+    assert(hash_functions != 0);
 }
 
 MergeTreeIndexGranulePtr MergeTreeIndexBloomFilter::createIndexGranule() const
@@ -92,7 +94,6 @@ static void assertIndexColumnsType(const Block & header)
 MergeTreeIndexPtr bloomFilterIndexCreatorNew(
     const IndexDescription & index)
 {
-
     double max_conflict_probability = 0.025;
 
     if (!index.arguments.empty())
diff --git a/src/Storages/MergeTree/MergeTreeIndexFullText.cpp b/src/Storages/MergeTree/MergeTreeIndexFullText.cpp
index 8aa0c65e664a..c49ead0d82d8 100644
--- a/src/Storages/MergeTree/MergeTreeIndexFullText.cpp
+++ b/src/Storages/MergeTree/MergeTreeIndexFullText.cpp
@@ -37,6 +37,7 @@ namespace ErrorCodes
 {
     extern const int LOGICAL_ERROR;
     extern const int INCORRECT_QUERY;
+    extern const int BAD_ARGUMENTS;
 }
 
 
@@ -61,7 +62,8 @@ static void likeStringToBloomFilter(
         bloom_filter.add(token.c_str(), token.size());
 }
 /// Unified condition for equals, startsWith and endsWith
-bool MergeTreeConditionFullText::createFunctionEqualsCondition(RPNElement & out, const Field & value, const BloomFilterParameters & params, TokenExtractorPtr token_extractor)
+bool MergeTreeConditionFullText::createFunctionEqualsCondition(
+    RPNElement & out, const Field & value, const BloomFilterParameters & params, TokenExtractorPtr token_extractor)
 {
     out.function = RPNElement::FUNCTION_EQUALS;
     out.bloom_filter = std::make_unique<BloomFilter>(params);
@@ -774,12 +776,10 @@ MergeTreeIndexPtr bloomFilterIndexCreator(
     if (index.type == NgramTokenExtractor::getName())
     {
         size_t n = index.arguments[0].get<size_t>();
-        BloomFilterParameters params
-        {
-            .filter_size = index.arguments[1].get<size_t>(),
-            .filter_hashes = index.arguments[2].get<size_t>(),
-            .seed = index.arguments[3].get<size_t>(),
-        };
+        BloomFilterParameters params(
+            index.arguments[1].get<size_t>(),
+            index.arguments[2].get<size_t>(),
+            index.arguments[3].get<size_t>());
 
         auto tokenizer = std::make_unique<NgramTokenExtractor>(n);
 
@@ -787,12 +787,10 @@ MergeTreeIndexPtr bloomFilterIndexCreator(
     }
     else if (index.type == SplitTokenExtractor::getName())
     {
-        BloomFilterParameters params
-        {
-            .filter_size = index.arguments[0].get<size_t>(),
-            .filter_hashes = index.arguments[1].get<size_t>(),
-            .seed = index.arguments[2].get<size_t>(),
-        };
+        BloomFilterParameters params(
+            index.arguments[0].get<size_t>(),
+            index.arguments[1].get<size_t>(),
+            index.arguments[2].get<size_t>());
 
         auto tokenizer = std::make_unique<SplitTokenExtractor>();
 
@@ -826,6 +824,18 @@ void bloomFilterIndexValidator(const IndexDescription & index, bool /*attach*/)
     {
         throw Exception("Unknown index type: " + backQuote(index.name), ErrorCodes::LOGICAL_ERROR);
     }
+
+    assert(index.arguments.size() >= 3);
+
+    for (const auto & arg : index.arguments)
+        if (arg.getType() != Field::Types::UInt64)
+            throw Exception("All parameters to *bf_v1 index must be unsigned integers", ErrorCodes::BAD_ARGUMENTS);
+
+    /// Just validate
+    BloomFilterParameters params(
+        index.arguments[0].get<size_t>(),
+        index.arguments[1].get<size_t>(),
+        index.arguments[2].get<size_t>());
 }
 
 }
