{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 12388,
  "instance_id": "ClickHouse__ClickHouse-12388",
  "issue_numbers": [
    "11408"
  ],
  "base_commit": "5cae87e664a9b539805523a2a2e94b7645efc120",
  "patch": "diff --git a/src/Interpreters/BloomFilter.cpp b/src/Interpreters/BloomFilter.cpp\nindex 7e4e25c26073..ff60db0dbb34 100644\n--- a/src/Interpreters/BloomFilter.cpp\n+++ b/src/Interpreters/BloomFilter.cpp\n@@ -18,13 +18,32 @@ namespace ErrorCodes\n static constexpr UInt64 SEED_GEN_A = 845897321;\n static constexpr UInt64 SEED_GEN_B = 217728422;\n \n+static constexpr UInt64 MAX_BLOOM_FILTER_SIZE = 1 << 30;\n+\n+\n+BloomFilterParameters::BloomFilterParameters(size_t filter_size_, size_t filter_hashes_, size_t seed_)\n+    : filter_size(filter_size_), filter_hashes(filter_hashes_), seed(seed_)\n+{\n+    if (filter_size == 0)\n+        throw Exception(\"The size of bloom filter cannot be zero\", ErrorCodes::BAD_ARGUMENTS);\n+    if (filter_hashes == 0)\n+        throw Exception(\"The number of hash functions for bloom filter cannot be zero\", ErrorCodes::BAD_ARGUMENTS);\n+    if (filter_size > MAX_BLOOM_FILTER_SIZE)\n+        throw Exception(ErrorCodes::BAD_ARGUMENTS, \"The size of bloom filter cannot be more than {}\", MAX_BLOOM_FILTER_SIZE);\n+}\n+\n+\n BloomFilter::BloomFilter(const BloomFilterParameters & params)\n     : BloomFilter(params.filter_size, params.filter_hashes, params.seed)\n {\n }\n \n BloomFilter::BloomFilter(size_t size_, size_t hashes_, size_t seed_)\n-    : size(size_), hashes(hashes_), seed(seed_), words((size + sizeof(UnderType) - 1) / sizeof(UnderType)), filter(words, 0) {}\n+    : size(size_), hashes(hashes_), seed(seed_), words((size + sizeof(UnderType) - 1) / sizeof(UnderType)), filter(words, 0)\n+{\n+    assert(size != 0);\n+    assert(hashes != 0);\n+}\n \n bool BloomFilter::find(const char * data, size_t len)\n {\ndiff --git a/src/Interpreters/BloomFilter.h b/src/Interpreters/BloomFilter.h\nindex 941194c4a709..0362f475d881 100644\n--- a/src/Interpreters/BloomFilter.h\n+++ b/src/Interpreters/BloomFilter.h\n@@ -9,10 +9,13 @@\n #include <Columns/ColumnVector.h>\n #include <DataTypes/IDataType.h>\n \n+\n namespace DB\n {\n struct BloomFilterParameters\n {\n+    BloomFilterParameters(size_t filter_size_, size_t filter_hashes_, size_t seed_);\n+\n     /// size of filter in bytes.\n     size_t filter_size;\n     /// number of used hash functions.\ndiff --git a/src/Storages/IndicesDescription.h b/src/Storages/IndicesDescription.h\nindex 18b41b05fbb4..464e466dcd03 100644\n--- a/src/Storages/IndicesDescription.h\n+++ b/src/Storages/IndicesDescription.h\n@@ -39,8 +39,7 @@ struct IndexDescription\n     /// Data types of index columns\n     DataTypes data_types;\n \n-    /// Sample block with index columns. (NOTE: columns in block are empty, but\n-    /// not nullptr)\n+    /// Sample block with index columns. (NOTE: columns in block are empty, but not nullptr)\n     Block sample_block;\n \n     /// Index granularity, make sense for skip indices\ndiff --git a/src/Storages/MergeTree/MergeTreeData.h b/src/Storages/MergeTree/MergeTreeData.h\nindex 7e54c74507dd..b003640e186e 100644\n--- a/src/Storages/MergeTree/MergeTreeData.h\n+++ b/src/Storages/MergeTree/MergeTreeData.h\n@@ -507,11 +507,15 @@ class MergeTreeData : public IStorage\n \n     /// Change MergeTreeSettings\n     void changeSettings(\n-           const ASTPtr & new_settings,\n-           TableLockHolder & table_lock_holder);\n+        const ASTPtr & new_settings,\n+        TableLockHolder & table_lock_holder);\n \n     /// Freezes all parts.\n-    void freezeAll(const String & with_name, const StorageMetadataPtr & metadata_snapshot, const Context & context, TableLockHolder & table_lock_holder);\n+    void freezeAll(\n+        const String & with_name,\n+        const StorageMetadataPtr & metadata_snapshot,\n+        const Context & context,\n+        TableLockHolder & table_lock_holder);\n \n     /// Should be called if part data is suspected to be corrupted.\n     void reportBrokenPart(const String & name) const\ndiff --git a/src/Storages/MergeTree/MergeTreeIndexAggregatorBloomFilter.cpp b/src/Storages/MergeTree/MergeTreeIndexAggregatorBloomFilter.cpp\nindex d7d9bd9c5254..e9176426e83c 100644\n--- a/src/Storages/MergeTree/MergeTreeIndexAggregatorBloomFilter.cpp\n+++ b/src/Storages/MergeTree/MergeTreeIndexAggregatorBloomFilter.cpp\n@@ -22,6 +22,8 @@ MergeTreeIndexAggregatorBloomFilter::MergeTreeIndexAggregatorBloomFilter(\n     size_t bits_per_row_, size_t hash_functions_, const Names & columns_name_)\n     : bits_per_row(bits_per_row_), hash_functions(hash_functions_), index_columns_name(columns_name_)\n {\n+    assert(bits_per_row != 0);\n+    assert(hash_functions != 0);\n }\n \n bool MergeTreeIndexAggregatorBloomFilter::empty() const\ndiff --git a/src/Storages/MergeTree/MergeTreeIndexBloomFilter.cpp b/src/Storages/MergeTree/MergeTreeIndexBloomFilter.cpp\nindex e825bb97d6af..e9fb0c335948 100644\n--- a/src/Storages/MergeTree/MergeTreeIndexBloomFilter.cpp\n+++ b/src/Storages/MergeTree/MergeTreeIndexBloomFilter.cpp\n@@ -35,6 +35,8 @@ MergeTreeIndexBloomFilter::MergeTreeIndexBloomFilter(\n     , bits_per_row(bits_per_row_)\n     , hash_functions(hash_functions_)\n {\n+    assert(bits_per_row != 0);\n+    assert(hash_functions != 0);\n }\n \n MergeTreeIndexGranulePtr MergeTreeIndexBloomFilter::createIndexGranule() const\n@@ -92,7 +94,6 @@ static void assertIndexColumnsType(const Block & header)\n MergeTreeIndexPtr bloomFilterIndexCreatorNew(\n     const IndexDescription & index)\n {\n-\n     double max_conflict_probability = 0.025;\n \n     if (!index.arguments.empty())\ndiff --git a/src/Storages/MergeTree/MergeTreeIndexFullText.cpp b/src/Storages/MergeTree/MergeTreeIndexFullText.cpp\nindex 8aa0c65e664a..c49ead0d82d8 100644\n--- a/src/Storages/MergeTree/MergeTreeIndexFullText.cpp\n+++ b/src/Storages/MergeTree/MergeTreeIndexFullText.cpp\n@@ -37,6 +37,7 @@ namespace ErrorCodes\n {\n     extern const int LOGICAL_ERROR;\n     extern const int INCORRECT_QUERY;\n+    extern const int BAD_ARGUMENTS;\n }\n \n \n@@ -61,7 +62,8 @@ static void likeStringToBloomFilter(\n         bloom_filter.add(token.c_str(), token.size());\n }\n /// Unified condition for equals, startsWith and endsWith\n-bool MergeTreeConditionFullText::createFunctionEqualsCondition(RPNElement & out, const Field & value, const BloomFilterParameters & params, TokenExtractorPtr token_extractor)\n+bool MergeTreeConditionFullText::createFunctionEqualsCondition(\n+    RPNElement & out, const Field & value, const BloomFilterParameters & params, TokenExtractorPtr token_extractor)\n {\n     out.function = RPNElement::FUNCTION_EQUALS;\n     out.bloom_filter = std::make_unique<BloomFilter>(params);\n@@ -774,12 +776,10 @@ MergeTreeIndexPtr bloomFilterIndexCreator(\n     if (index.type == NgramTokenExtractor::getName())\n     {\n         size_t n = index.arguments[0].get<size_t>();\n-        BloomFilterParameters params\n-        {\n-            .filter_size = index.arguments[1].get<size_t>(),\n-            .filter_hashes = index.arguments[2].get<size_t>(),\n-            .seed = index.arguments[3].get<size_t>(),\n-        };\n+        BloomFilterParameters params(\n+            index.arguments[1].get<size_t>(),\n+            index.arguments[2].get<size_t>(),\n+            index.arguments[3].get<size_t>());\n \n         auto tokenizer = std::make_unique<NgramTokenExtractor>(n);\n \n@@ -787,12 +787,10 @@ MergeTreeIndexPtr bloomFilterIndexCreator(\n     }\n     else if (index.type == SplitTokenExtractor::getName())\n     {\n-        BloomFilterParameters params\n-        {\n-            .filter_size = index.arguments[0].get<size_t>(),\n-            .filter_hashes = index.arguments[1].get<size_t>(),\n-            .seed = index.arguments[2].get<size_t>(),\n-        };\n+        BloomFilterParameters params(\n+            index.arguments[0].get<size_t>(),\n+            index.arguments[1].get<size_t>(),\n+            index.arguments[2].get<size_t>());\n \n         auto tokenizer = std::make_unique<SplitTokenExtractor>();\n \n@@ -826,6 +824,18 @@ void bloomFilterIndexValidator(const IndexDescription & index, bool /*attach*/)\n     {\n         throw Exception(\"Unknown index type: \" + backQuote(index.name), ErrorCodes::LOGICAL_ERROR);\n     }\n+\n+    assert(index.arguments.size() >= 3);\n+\n+    for (const auto & arg : index.arguments)\n+        if (arg.getType() != Field::Types::UInt64)\n+            throw Exception(\"All parameters to *bf_v1 index must be unsigned integers\", ErrorCodes::BAD_ARGUMENTS);\n+\n+    /// Just validate\n+    BloomFilterParameters params(\n+        index.arguments[0].get<size_t>(),\n+        index.arguments[1].get<size_t>(),\n+        index.arguments[2].get<size_t>());\n }\n \n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01384_bloom_filter_bad_arguments.reference b/tests/queries/0_stateless/01384_bloom_filter_bad_arguments.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/01384_bloom_filter_bad_arguments.sql b/tests/queries/0_stateless/01384_bloom_filter_bad_arguments.sql\nnew file mode 100644\nindex 000000000000..5b18f28883a3\n--- /dev/null\n+++ b/tests/queries/0_stateless/01384_bloom_filter_bad_arguments.sql\n@@ -0,0 +1,10 @@\n+DROP TABLE IF EXISTS test;\n+\n+create table test (a String, index a a type tokenbf_v1(0, 2, 0) granularity 1) engine MergeTree order by a; -- { serverError 36 }\n+create table test (a String, index a a type tokenbf_v1(2, 0, 0) granularity 1) engine MergeTree order by a; -- { serverError 36 }\n+create table test (a String, index a a type tokenbf_v1(0, 1, 1) granularity 1) engine MergeTree order by a; -- { serverError 36 }\n+create table test (a String, index a a type tokenbf_v1(1, 0, 1) granularity 1) engine MergeTree order by a; -- { serverError 36 }\n+\n+create table test (a String, index a a type tokenbf_v1(0.1, 2, 0) granularity 1) engine MergeTree order by a; -- { serverError 36 }\n+create table test (a String, index a a type tokenbf_v1(-1, 2, 0) granularity 1) engine MergeTree order by a; -- { serverError 36 }\n+create table test (a String, index a a type tokenbf_v1(0xFFFFFFFF, 2, 0) granularity 1) engine MergeTree order by a; -- { serverError 36 }\n",
  "problem_statement": "bloom filter: Received signal Floating point exception\n```\r\ncreate table test (a String, index a a type tokenbf_v1(0, 2, 0) granularity 1) engine MergeTree order by a;\r\n\r\ninsert into test values ('a');\r\n```\r\n\r\nZero bloom filter size is not checked and leads to crash.\n",
  "hints_text": "",
  "created_at": "2020-07-10T08:14:04Z",
  "modified_files": [
    "src/Interpreters/BloomFilter.cpp",
    "src/Interpreters/BloomFilter.h",
    "src/Storages/IndicesDescription.h",
    "src/Storages/MergeTree/MergeTreeData.h",
    "src/Storages/MergeTree/MergeTreeIndexAggregatorBloomFilter.cpp",
    "src/Storages/MergeTree/MergeTreeIndexBloomFilter.cpp",
    "src/Storages/MergeTree/MergeTreeIndexFullText.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01384_bloom_filter_bad_arguments.sql"
  ]
}