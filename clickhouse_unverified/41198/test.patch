diff --git a/tests/integration/helpers/client.py b/tests/integration/helpers/client.py
index a4407d5b442a..ab1cc65e9a9f 100644
--- a/tests/integration/helpers/client.py
+++ b/tests/integration/helpers/client.py
@@ -8,7 +8,14 @@
 
 
 class Client:
-    def __init__(self, host, port=9000, command="/usr/bin/clickhouse-client"):
+    def __init__(
+        self,
+        host,
+        port=9000,
+        command="/usr/bin/clickhouse-client",
+        secure=False,
+        config=None,
+    ):
         self.host = host
         self.port = port
         self.command = [command]
@@ -16,6 +23,11 @@ def __init__(self, host, port=9000, command="/usr/bin/clickhouse-client"):
         if os.path.basename(command) == "clickhouse":
             self.command.append("client")
 
+        if secure:
+            self.command.append("--secure")
+        if config is not None:
+            self.command += ["--config-file", config]
+
         self.command += ["--host", self.host, "--port", str(self.port), "--stacktrace"]
 
     def stacktraces_on_timeout_decorator(func):
diff --git a/tests/integration/test_composable_protocols/__init__.py b/tests/integration/test_composable_protocols/__init__.py
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/integration/test_composable_protocols/configs/client.xml b/tests/integration/test_composable_protocols/configs/client.xml
new file mode 100644
index 000000000000..15d83a7b1ab4
--- /dev/null
+++ b/tests/integration/test_composable_protocols/configs/client.xml
@@ -0,0 +1,10 @@
+<clickhouse>
+    <openSSL>
+        <client>
+            <verificationMode>none</verificationMode>
+            <invalidCertificateHandler>
+                <name>AcceptCertificateHandler</name>
+            </invalidCertificateHandler>
+        </client>
+    </openSSL>
+</clickhouse>
diff --git a/tests/integration/test_composable_protocols/configs/config.xml b/tests/integration/test_composable_protocols/configs/config.xml
new file mode 100644
index 000000000000..35673c3e7e59
--- /dev/null
+++ b/tests/integration/test_composable_protocols/configs/config.xml
@@ -0,0 +1,63 @@
+<clickhouse>
+    <!-- Used with https_port and tcp_port_secure. Full ssl options list: https://github.com/ClickHouse-Extras/poco/blob/master/NetSSL_OpenSSL/include/Poco/Net/SSLManager.h#L71 -->
+    <openSSL>
+        <server> <!-- Used for https server AND secure tcp port -->
+            <!-- openssl req -subj "/CN=localhost" -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout /etc/clickhouse-server/server.key -out /etc/clickhouse-server/server.crt -->
+            <certificateFile>/etc/clickhouse-server/config.d/server.crt</certificateFile>
+            <privateKeyFile>/etc/clickhouse-server/config.d/server.key</privateKeyFile>
+            <verificationMode>none</verificationMode>
+            <loadDefaultCAFile>true</loadDefaultCAFile>
+            <cacheSessions>true</cacheSessions>
+            <disableProtocols>sslv2,sslv3</disableProtocols>
+            <preferServerCiphers>true</preferServerCiphers>
+        </server>
+    </openSSL>
+
+    <listen_host>0.0.0.0</listen_host>
+
+    <protocols>
+        <tcp>
+            <type>tcp</type>
+            <host>0.0.0.0</host>
+            <port>9000</port>
+            <description>native protocol (tcp)</description>
+        </tcp>
+        <tcp_secure>
+            <type>tls</type>
+            <impl>tcp</impl>
+            <port>9440</port>
+            <description>secure native protocol (tcp_secure)</description>
+        </tcp_secure>
+        <tcp_endpoint>
+            <impl>tcp</impl>
+            <host>0.0.0.0</host>
+            <port>9001</port>
+            <description>native protocol endpoint (tcp)</description>
+        </tcp_endpoint>
+        <tcp_proxy>
+            <type>proxy1</type>
+            <impl>tcp</impl>
+            <port>9100</port>
+            <description>native protocol with PROXYv1 (tcp_proxy)</description>
+        </tcp_proxy>
+        <http>
+            <type>http</type>
+            <port>8123</port>
+            <description>http protocol</description>
+        </http>
+        <https>
+            <type>tls</type>
+            <impl>http</impl>
+            <host>0.0.0.0</host>
+            <port>8443</port>
+            <description>https protocol</description>
+        </https>
+        <https_endpoint>
+            <impl>https</impl>
+            <port>8444</port>
+            <description>https protocol endpoint</description>
+        </https_endpoint>
+    </protocols>
+
+    <!--tcp_port>9010</tcp_port--> 
+</clickhouse>
diff --git a/tests/integration/test_composable_protocols/configs/server.crt b/tests/integration/test_composable_protocols/configs/server.crt
new file mode 100644
index 000000000000..6f4deca038fb
--- /dev/null
+++ b/tests/integration/test_composable_protocols/configs/server.crt
@@ -0,0 +1,18 @@
+-----BEGIN CERTIFICATE-----
+MIIC+zCCAeOgAwIBAgIJAIhI9ozZJ+TWMA0GCSqGSIb3DQEBCwUAMBQxEjAQBgNV
+BAMMCWxvY2FsaG9zdDAeFw0xOTA0MjIwNDMyNTJaFw0yMDA0MjEwNDMyNTJaMBQx
+EjAQBgNVBAMMCWxvY2FsaG9zdDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
+ggEBAK+wVUEdqF2uXvN0MJBgnAHyXi6JTi4p/F6igsrCjSNjJWzHH0vQmK8ujfcF
+CkifW88i+W5eHctuEtQqNHK+t9x9YiZtXrj6m/XkOXs20mYgENSmbbbHbriTPnZB
+zZrq6UqMlwIHNNAa+I3NMORQxVRaI0ybXnGVO5elr70xHpk03xL0JWKHpEqYp4db
+2aBQgF6y3Ww4khxjIYqpUYXWXGFnVIRU7FKVEAM1xyKqvQzXjQ5sVM/wyHknveEF
+3b/X4ggN+KNl5KOc0cWDh1/XaatJAPaUUPqZcq76tynLbP64Xm3dxHcj+gtRkO67
+ef6MSg6l63m3XQP6Qb+MIkd06OsCAwEAAaNQME4wHQYDVR0OBBYEFDmODTO8QLDN
+ykR3x0LIOnjNhrKhMB8GA1UdIwQYMBaAFDmODTO8QLDNykR3x0LIOnjNhrKhMAwG
+A1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAAwaiJc7uqEpnH3aukbftDwX
+m8GfEnj1HVdgg+9GGNq+9rvUYBF6gdPmjRCX9dO0cclLFx8jc2org0rTSq9WoOhX
+E6qL4Eqrmc5SE3Y9jZM0h6GRD4oXK014FmtZ3T6ddZU3dQLj3BS2r1XrvmubTvGN
+ZuTJNY8nx8Hh6H5XINmsEjUF9E5hog+PwCE03xt2adIdYL+gsbxASeNYyeUFpZv5
+zcXR3VoakBWnAaOVgCHq2qh96QAnL7ZKzFkGf/MdwV10KU3dmb+ICbQUUdf9Gc17
+aaDCIRws312F433FdXBkGs2UkB7ZZme9dfn6O1QbeTNvex2VLMqYx/CTkfFbOQA=
+-----END CERTIFICATE-----
diff --git a/tests/integration/test_composable_protocols/configs/server.key b/tests/integration/test_composable_protocols/configs/server.key
new file mode 100644
index 000000000000..6eddb3295db7
--- /dev/null
+++ b/tests/integration/test_composable_protocols/configs/server.key
@@ -0,0 +1,28 @@
+-----BEGIN PRIVATE KEY-----
+MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCvsFVBHahdrl7z
+dDCQYJwB8l4uiU4uKfxeooLKwo0jYyVsxx9L0JivLo33BQpIn1vPIvluXh3LbhLU
+KjRyvrfcfWImbV64+pv15Dl7NtJmIBDUpm22x264kz52Qc2a6ulKjJcCBzTQGviN
+zTDkUMVUWiNMm15xlTuXpa+9MR6ZNN8S9CVih6RKmKeHW9mgUIBest1sOJIcYyGK
+qVGF1lxhZ1SEVOxSlRADNcciqr0M140ObFTP8Mh5J73hBd2/1+IIDfijZeSjnNHF
+g4df12mrSQD2lFD6mXKu+rcpy2z+uF5t3cR3I/oLUZDuu3n+jEoOpet5t10D+kG/
+jCJHdOjrAgMBAAECggEARF66zrxb6RkSmmt8+rKeA6PuQu3sHsr4C1vyyjUr97l9
+tvdGlpp20LWtSZQMjHZ3pARYTTsTHTeY3DgQcRcHNicVKx8k3ZepWeeW9vw+pL+V
+zSt3RsoVrH6gsCSrfr4sS3aqzX9AbjwQvh48CJ3mLQ1m70kHV+xbZIh1+4pB/hyP
+1wKyUE18ZkOptXvO/TtoHzLQCecpkXtWzmry1Eh2isvXA+NMrAtLibGsyM1mtm7i
+5ozevzHabvvCDBEe+KgZdONgVhhhvm2eOd+/s4w3rw4ETud4fI/ZAJyWXhiIKFnA
+VJbElWruSAoVBW7p2bsF5PbmVzvo8vXL+VylxYD+AQKBgQDhLoRKTVhNkn/QjKxq
+sdOh+QZra0LzjVpAmkQzu7wZMSHEz9qePQciDQQrYKrmRF1vNcIRCVUTqWYheJ/1
+lKRrCGa0ab6k96zkWMqLHD5u+UeJV7r1dJIx08ME9kNJ+x/XtB8klRIji16NiQUS
+qc6p8z0M2AnbJzsRfWZRH8FeYwKBgQDHu8dzdtVGI7MtxfPOE/bfajiopDg8BdTC
+pdug2T8XofRHRq7Q+0vYjTAZFT/slib91Pk6VvvPdo9VBZiL4omv4dAq6mOOdX/c
+U14mJe1X5GCrr8ExZ8BfNJ3t/6sV1fcxyJwAw7iBguqxA2JqdM/wFk10K8XqvzVn
+CD6O9yGt2QKBgFX1BMi8N538809vs41S7l9hCQNOQZNo/O+2M5yv6ECRkbtoQKKw
+1x03bMUGNJaLuELweXE5Z8GGo5bZTe5X3F+DKHlr+DtO1C+ieUaa9HY2MAmMdLCn
+2/qrREGLo+oEs4YKmuzC/taUp/ZNPKOAMISNdluFyFVg51pozPrgrVbTAoGBAKkE
+LBl3O67o0t0vH8sJdeVFG8EJhlS0koBMnfgVHqC++dm+5HwPyvTrNQJkyv1HaqNt
+r6FArkG3ED9gRuBIyT6+lctbIPgSUip9mbQqcBfqOCvQxGksZMur2ODncz09HLtS
+CUFUXjOqNzOnq4ZuZu/Bz7U4vXiSaXxQq6+LTUKxAoGAFZU/qrI06XxnrE9A1X0W
+l7DSkpZaDcu11NrZ473yONih/xOZNh4SSBpX8a7F6Pmh9BdtGqphML8NFPvQKcfP
+b9H2iid2tc292uyrUEb5uTMmv61zoTwtitqLzO0+tS6PT3fXobX+eyeEWKzPBljL
+HFtxG5CCXpkdnWRmaJnhTzA=
+-----END PRIVATE KEY-----
diff --git a/tests/integration/test_composable_protocols/configs/users.xml b/tests/integration/test_composable_protocols/configs/users.xml
new file mode 100644
index 000000000000..da8425b3695b
--- /dev/null
+++ b/tests/integration/test_composable_protocols/configs/users.xml
@@ -0,0 +1,16 @@
+<clickhouse>
+    <profiles>
+        <default>
+        </default>
+    </profiles>
+
+    <users>
+        <default>
+            <password></password>
+            <networks replace="replace">
+                <ip>::/0</ip>
+            </networks>
+            <profile>default</profile>
+        </default>
+    </users>
+</clickhouse>
diff --git a/tests/integration/test_composable_protocols/test.py b/tests/integration/test_composable_protocols/test.py
new file mode 100644
index 000000000000..d861af929c3e
--- /dev/null
+++ b/tests/integration/test_composable_protocols/test.py
@@ -0,0 +1,94 @@
+import ssl
+import pytest
+import os.path as p
+import os
+from helpers.cluster import ClickHouseCluster
+from helpers.client import Client
+import urllib.request, urllib.parse
+import subprocess
+import socket
+
+SCRIPT_DIR = os.path.dirname(os.path.realpath(__file__))
+
+cluster = ClickHouseCluster(__file__)
+server = cluster.add_instance(
+    "server",
+    base_config_dir="configs",
+    main_configs=["configs/server.crt", "configs/server.key"],
+)
+
+
+@pytest.fixture(scope="module", autouse=True)
+def setup_nodes():
+    try:
+        cluster.start()
+        yield cluster
+    finally:
+        cluster.shutdown()
+
+
+def execute_query_https(host, port, query):
+    url = f"https://{host}:{port}/?query={urllib.parse.quote(query)}"
+
+    ctx = ssl.create_default_context()
+    ctx.check_hostname = False
+    ctx.verify_mode = ssl.CERT_NONE
+
+    request = urllib.request.Request(url)
+    response = urllib.request.urlopen(request, context=ctx).read()
+    return response.decode("utf-8")
+
+
+def execute_query_http(host, port, query):
+    url = f"http://{host}:{port}/?query={urllib.parse.quote(query)}"
+
+    request = urllib.request.Request(url)
+    response = urllib.request.urlopen(request).read()
+    return response.decode("utf-8")
+
+
+def netcat(hostname, port, content):
+    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
+    s.connect((hostname, port))
+    s.sendall(content)
+    s.shutdown(socket.SHUT_WR)
+    data = []
+    while 1:
+        d = s.recv(1024)
+        if len(d) == 0:
+            break
+        data.append(d)
+    s.close()
+    return b"".join(data)
+
+
+def test_connections():
+
+    client = Client(server.ip_address, 9000, command=cluster.client_bin_path)
+    assert client.query("SELECT 1") == "1
"
+
+    client = Client(
+        server.ip_address,
+        9440,
+        command=cluster.client_bin_path,
+        secure=True,
+        config=f"{SCRIPT_DIR}/configs/client.xml",
+    )
+    assert client.query("SELECT 1") == "1
"
+
+    client = Client(server.ip_address, 9001, command=cluster.client_bin_path)
+    assert client.query("SELECT 1") == "1
"
+
+    assert execute_query_http(server.ip_address, 8123, "SELECT 1") == "1
"
+
+    assert execute_query_https(server.ip_address, 8443, "SELECT 1") == "1
"
+
+    assert execute_query_https(server.ip_address, 8444, "SELECT 1") == "1
"
+
+    data = "PROXY TCP4 255.255.255.255 255.255.255.255 65535 65535\r
\0\021ClickHouse client\024\r\253\251\003\0\007default\0\004\001\0\001\0\0\t0.0.0.0:0\001\tmilovidov\021milovidov-desktop\vClickHouse \024\r\253\251\003\0\001\0\0\0\002\001\025SELECT 'Hello, world'\002\0\247\203\254l\325\\z|\265\254F\275\333\206\342\024\202\024\0\0\0
\0\0\0\240\01\0\02\377\377\377\377\0\0\0"
+    assert (
+        netcat(server.ip_address, 9100, bytearray(data, "latin-1")).find(
+            bytearray("Hello, world", "latin-1")
+        )
+        >= 0
+    )
