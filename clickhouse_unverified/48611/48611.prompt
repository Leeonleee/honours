You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
using IPv4 field in WHERE clause gives "no supertype for types UInt32, IPv4"
(you don't have to strictly follow this form)

**Describe the issue**
In 19.5.3.8, we could do this:
  WHERE ip = IPv4StringToNum('1.2.3.4')

for ip of type IPv4 or Nullable(IPv4)
In 22.12.5.34, it also works.

In 23.2.4.12, we get instead a DB::Exception

**How to reproduce**
* Which ClickHouse server versions are incompatible
regression seems to be in 23.2.4.12 at least.  22.12.5.34 is "ok".

* Which interface to use, if matters

* Non-default settings, if any
* `CREATE TABLE` statements for all tables involved

```
CREATE TABLE test (
  `dateseen` DateTime,
  `ip` IPv4
)
ENGINE = MergeTree()
PARTITION BY toYYYYMM(`dateseen`)
ORDER BY (`ip`)
```

* Sample data for all these tables, use [clickhouse-obfuscator](https://github.com/ClickHouse/ClickHouse/blob/master/programs/obfuscator/Obfuscator.cpp#L42-L80) if necessary

No data needed.  It appears in the query parsing/planning stage.

* Queries to run that lead to unexpected result
```
SELECT *
FROM test
WHERE ip = IPv4StringToNum('1.2.3.4')
```
**Error message and/or stacktrace**

client side:
```
Received exception from server (version 23.2.4):
Code: 386. DB::Exception: Received from XXXXX:19000. DB::Exception: There is no supertype for types UInt32, IPv4 because some of them are numbers and some of them are not: while executing 'FUNCTION equals(ip : 1, IPv4StringToNum('1.2.3.4') : 3) -> equals(ip, IPv4StringToNum('1.2.3.4')) UInt8 : 4'.
```

server side (clickhouse-server.err.log):
```
2023.03.23 11:18:32.528497 [ 48 ] {b5b50ffa-95b0-404d-bbab-3539290f4715} <Error> TCPHandler: Code: 386. DB::Exception: There is no supertype for types UInt32, IPv4 because some of them are numbers and some of them are not: while executing 'FUNCTION equals(ip : 1, IPv4StringToNum('1.2.3.4') : 3) -> equals(ip, IPv4StringToNum('1.2.3.4')) UInt8 : 4'. (NO_COMMON_TYPE), Stack trace (when copying this message, always include the lines below):                                                                                                

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0xe0c86b5 in /usr/bin/clickhouse
1. ? @ 0xce30bad in /usr/bin/clickhouse
2. ? @ 0x12949f07 in /usr/bin/clickhouse
3. ? @ 0x12948c0c in /usr/bin/clickhouse
4. std::__1::shared_ptr<DB::IDataType const> DB::getLeastSupertype<(DB::LeastSupertypeOnError)0>(std::__1::vector<std::__1::shared_ptr<DB::IDataType const>, std::__1::allocator<std::__1::shared_ptr<DB::IDataType const>>> const&) @ 0x12947b0c in /usr/bin/clickhouse
5. ? @ 0xa311937 in /usr/bin/clickhouse
6. ? @ 0xa2f8ea4 in /usr/bin/clickhouse
7. ? @ 0x893fc0e in /usr/bin/clickhouse
8. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x123b866b in /usr/bin/clickhouse
9. DB::IExecutableFunction::executeWithoutSparseColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x123b90ec in /usr/bin/clickhouse
10. DB::IExecutableFunction::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x123ba35b in /usr/bin/clickhouse
11. DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool) const @ 0x12cb9cfb in /usr/bin/clickhouse
12. DB::ExpressionActions::execute(DB::Block&, bool) const @ 0x12cbade6 in /usr/bin/clickhouse
13. DB::ExpressionAnalysisResult::ExpressionAnalysisResult(DB::SelectQueryExpressionAnalyzer&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, bool, bool, bool, std::__1::shared_ptr<DB::FilterDAGInfo> const&, std::__1::shared_ptr<DB::FilterDAGInfo> const&, DB::Block const&) @ 0x12ce1f34 in /usr/bin/clickhouse
14. DB::InterpreterSelectQuery::getSampleBlockImpl() @ 0x135d6f71 in /usr/bin/clickhouse
15. ? @ 0x135cfcba in /usr/bin/clickhouse
16. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&,
DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::__1::shared_ptr<DB::PreparedSets>) @ 0x135c9fb9 in /usr/bin/clickhouse
17. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::__1::shared_ptr<DB::PreparedSets>) @ 0x135c73d4 in /usr/bin/clickhouse
18. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::__1::shared_ptr<DB::PreparedSets>) @ 0x135cc2ac in /usr/bin/clickhouse
19. DB::MergeTreeData::getQueryProcessingStageWithAggregateProjection(std::__1::shared_ptr<DB::Context const>, std::__1::shared_ptr<DB::StorageSnapshot> const&, DB::SelectQueryInfo&) const @ 0x142aba2e in /usr/bin/clickhouse
20. DB::MergeTreeData::getQueryProcessingStage(std::__1::shared_ptr<DB::Context const>, DB::QueryProcessingStage::Enum, std::__1::shared_ptr<DB::StorageSnapshot> const&, DB::SelectQueryInfo&) const @ 0x142b0083 in /usr/bin/clickhouse
21. DB::InterpreterSelectQuery::getSampleBlockImpl() @ 0x135d6ee9 in /usr/bin/clickhouse
22. ? @ 0x135cfcba in /usr/bin/clickhouse
23. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&,
DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::__1::shared_ptr<DB::PreparedSets>) @ 0x135c9fb9 in /usr/bin/clickhouse
24. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::__1::shared_ptr<DB::IAST> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&) @ 0x1365bd02 in /usr/bin/clickhouse
25. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&) @ 0x13659caa in /usr/bin/clickhouse
26. DB::InterpreterFactory::get(std::__1::shared_ptr<DB::IAST>&, std::__1::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x13582f50 in /usr/bin/clickhouse
27. ? @ 0x1397f260 in /usr/bin/clickhouse
28. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x1397c9ad in /usr/bin/clickhouse
29. DB::TCPHandler::runImpl() @ 0x14703d39 in /usr/bin/clickhouse
30. DB::TCPHandler::run() @ 0x14719259 in /usr/bin/clickhouse
31. Poco::Net::TCPServerConnection::start() @ 0x1761d1b4 in /usr/bin/clickhouse
```


**Additional context**
Add any other context about the problem here.
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
