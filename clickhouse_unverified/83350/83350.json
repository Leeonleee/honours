{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 83350,
  "instance_id": "ClickHouse__ClickHouse-83350",
  "issue_numbers": [
    "83164"
  ],
  "base_commit": "0288f3444d59f4473a9c93ea540af4fc45309ed7",
  "patch": "diff --git a/src/Interpreters/ExpressionActions.cpp b/src/Interpreters/ExpressionActions.cpp\nindex 905c0694c392..ef1cecd38675 100644\n--- a/src/Interpreters/ExpressionActions.cpp\n+++ b/src/Interpreters/ExpressionActions.cpp\n@@ -484,11 +484,26 @@ static WriteBuffer & operator << (WriteBuffer & out, const ExpressionActions::Ar\n std::string ExpressionActions::Action::toString() const\n {\n     WriteBufferFromOwnString out;\n+\n+    auto display_preview = [&](auto && name)\n+    {\n+        static constexpr size_t max_length_to_display = 100;\n+        if (name.size() <= max_length_to_display)\n+            out << name;\n+        else\n+            out << std::string_view(name).substr(0, max_length_to_display) << \"...\";\n+        /// Note: it will cut UTF-8 strings incorrectly, but it's acceptable here.\n+    };\n+\n     switch (node->type)\n     {\n         case ActionsDAG::ActionType::COLUMN:\n-            out << \"COLUMN \"\n-                << (node->column ? node->column->getName() : \"(no column)\");\n+            out << \"COLUMN \";\n+\n+            if (!node->column)\n+                out << \"(no column)\";\n+            else\n+                display_preview(node->column->getName());\n             break;\n \n         case ActionsDAG::ActionType::ALIAS:\n@@ -496,19 +511,30 @@ std::string ExpressionActions::Action::toString() const\n             break;\n \n         case ActionsDAG::ActionType::FUNCTION:\n-            out << \"FUNCTION \" << (node->is_function_compiled ? \"[compiled] \" : \"\")\n-                << (node->function_base ? node->function_base->getName() : \"(no function)\") << \"(\";\n+            out << \"FUNCTION \";\n+            if (node->is_function_compiled)\n+                out << \"[compiled] \";\n+\n+            if (node->function_base)\n+                out << node->function_base->getName();\n+            else\n+                out << \"(no function)\";\n+\n+            out << \"(\";\n             for (size_t i = 0; i < node->children.size(); ++i)\n             {\n                 if (i)\n                     out << \", \";\n-                out << node->children[i]->result_name << \" \" << arguments[i];\n+                display_preview(node->children[i]->result_name);\n+                out << \" \" << arguments[i];\n             }\n             out << \")\";\n             break;\n \n         case ActionsDAG::ActionType::ARRAY_JOIN:\n-            out << \"ARRAY JOIN \" << node->children.front()->result_name << \" \" << arguments.front();\n+            out << \"ARRAY JOIN \";\n+            display_preview(node->children.front()->result_name);\n+            out << \" \" << arguments.front();\n             break;\n \n         case ActionsDAG::ActionType::INPUT:\n@@ -516,13 +542,15 @@ std::string ExpressionActions::Action::toString() const\n             break;\n \n         case ActionsDAG::ActionType::PLACEHOLDER:\n-            out << \"PLACEHOLDER \" << node->result_name;\n+            out << \"PLACEHOLDER \";\n+            display_preview(node->result_name);\n             break;\n \n     }\n \n-    out << \" -> \" << node->result_name\n-        << \" \" << (node->result_type ? node->result_type->getName() : \"(no type)\") << \" : \" << result_position;\n+    out << \" -> \";\n+    display_preview(node->result_name);\n+    out << \" \" << (node->result_type ? node->result_type->getName() : \"(no type)\") << \" : \" << result_position;\n     return out.str();\n }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03302_analyzer_join_filter_push_down_bug.reference b/tests/queries/0_stateless/03302_analyzer_join_filter_push_down_bug.reference\nindex 1ed5e09b9061..b76d1492ae90 100644\n--- a/tests/queries/0_stateless/03302_analyzer_join_filter_push_down_bug.reference\n+++ b/tests/queries/0_stateless/03302_analyzer_join_filter_push_down_bug.reference\n@@ -18,7 +18,7 @@ Positions: 0\n                FUNCTION toString(__table3.value :: 2) -> toString(__table3.value) String : 3\n                FUNCTION toDateTime(toString(__table3.value) :: 3) -> toDateTime(toString(__table3.value)) DateTime : 2\n                FUNCTION greaterOrEquals(__table2.value :: 1, toDateTime(toString(__table3.value)) :: 2) -> greaterOrEquals(__table2.value, toDateTime(toString(__table3.value))) UInt8 : 3\n-               ALIAS greaterOrEquals(__table2.value, toDateTime(toString(__table3.value))) :: 3 -> and(greaterOrEquals(__table2.value, toDateTime(toString(__table3.value))), equals(__table1.key, 162601_UInt32)) UInt8 : 2\n+               ALIAS greaterOrEquals(__table2.value, toDateTime(toString(__table3.value))) :: 3 -> and(greaterOrEquals(__table2.value, toDateTime(toString(__table3.value))), equals(__table1.key, 1626... UInt8 : 2\n       Positions: 2\n         Join (JOIN FillRightFirst)\n         Type: CROSS\ndiff --git a/tests/queries/0_stateless/03562_too_long_messages_expression_actions.reference b/tests/queries/0_stateless/03562_too_long_messages_expression_actions.reference\nnew file mode 100644\nindex 000000000000..d00491fd7e5b\n--- /dev/null\n+++ b/tests/queries/0_stateless/03562_too_long_messages_expression_actions.reference\n@@ -0,0 +1,1 @@\n+1\ndiff --git a/tests/queries/0_stateless/03562_too_long_messages_expression_actions.sh b/tests/queries/0_stateless/03562_too_long_messages_expression_actions.sh\nnew file mode 100755\nindex 000000000000..b1198cd62578\n--- /dev/null\n+++ b/tests/queries/0_stateless/03562_too_long_messages_expression_actions.sh\n@@ -0,0 +1,8 @@\n+#!/usr/bin/env bash\n+\n+CUR_DIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CUR_DIR\"/../shell_config.sh\n+\n+$CLICKHOUSE_LOCAL \"SELECT arraySum(arrayMap(x -> arraySum(arrayMap(y -> arraySum(arrayMap(z -> sin(x + y + z) * cos(x * y * z) * tanh(x - y + z), range(100))), range(1000))), range(10000))) SETTINGS max_memory_usage = '1G'\" 2>&1 |\n+    $CLICKHOUSE_LOCAL --input-format LineAsString -q \"length(line) < 1000\"\n",
  "problem_statement": "Limit exception length\n### Problem\n\nFor certain SQL requests length of exception message may be too long. Consider the query:\n\n```sql\nSELECT arraySum(arrayMap(x -> arraySum(arrayMap(y -> arraySum(arrayMap(z -> sin(x + y + z) * cos(x * y * z) * tanh(x - y + z), range(100))), range(1000))), range(10000)))\n```\n\nOn version 24.8.8 it takes several pages to display the whole exception text  in `clickhouse-client`.\n\nOn version 25.7.1 (current master) it takes 1-2 pages of `clickhouse-client`.\n\nSee the attached files.\n\n[version25.7.1-clickhouse-client-output.txt](https://github.com/user-attachments/files/21040301/version25.7.1-clickhouse-client-output.txt)\n\n[version24.8.8-clickhouse-client-output.txt](https://github.com/user-attachments/files/21040313/version24.8.8-clickhouse-client-output.txt)\n\nIt's not clear why output is different? Is it controlled by some existing configuration parameter?\n\nAdding more zeros to the query  makes version 25.7.1  to display exception message with several pages :\n\n```sql\nSELECT arraySum(arrayMap(x -> arraySum(arrayMap(y -> arraySum(arrayMap(z -> sin(x + y + z) * cos(x * y * z) * tanh(x - y + z), range(1000000))), range(100000))), range(1000000)))\n```\n\n### Proposed solution\n\nImplement new configuration option, for example, `max_exception_length_to_display` (or better name)  with default value `0`  (means unlimited).  \n\nThen we may trim extra chars from the end. For example, exception message:\n\n```\nabcdefgh\n```\n `max_exception_length_to_display=4` \n\nDisplayed message will be:\n\n```\nabcd\n```\n\nSecond variant: trim the middle text of the exception and display only head and tail:\n\n```\nab...gh\n```\n\nAlso it's not clean: should the exception text be trimmed on server-side or on client side (in clickhouse-client itself). \nMost probably it should be trimmed on the server-side because it may potentially create problems for other clients. \n\n\n\n",
  "hints_text": "",
  "created_at": "2025-07-06T03:51:42Z",
  "modified_files": [
    "src/Interpreters/ExpressionActions.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/03302_analyzer_join_filter_push_down_bug.reference",
    "b/tests/queries/0_stateless/03562_too_long_messages_expression_actions.reference",
    "b/tests/queries/0_stateless/03562_too_long_messages_expression_actions.sh"
  ]
}