{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 26374,
  "instance_id": "ClickHouse__ClickHouse-26374",
  "issue_numbers": [
    "26325"
  ],
  "base_commit": "4cc98c8fd8c1b7da844d1df54470050feaaa00cd",
  "patch": "diff --git a/src/Interpreters/MergeJoin.cpp b/src/Interpreters/MergeJoin.cpp\nindex 26463c8c6edd..1904ffa332b1 100644\n--- a/src/Interpreters/MergeJoin.cpp\n+++ b/src/Interpreters/MergeJoin.cpp\n@@ -1053,7 +1053,10 @@ class NonMergeJoinedBlockInputStream : private NotJoined, public IBlockInputStre\n             }\n \n             if (rows_added >= max_block_size)\n+            {\n+                ++block_number;\n                 break;\n+            }\n         }\n \n         return rows_added;\ndiff --git a/src/Processors/Transforms/JoiningTransform.cpp b/src/Processors/Transforms/JoiningTransform.cpp\nindex 31b2da46ab3e..ef0e81013d19 100644\n--- a/src/Processors/Transforms/JoiningTransform.cpp\n+++ b/src/Processors/Transforms/JoiningTransform.cpp\n@@ -183,11 +183,9 @@ void JoiningTransform::transform(Chunk & chunk)\n Block JoiningTransform::readExecute(Chunk & chunk)\n {\n     Block res;\n-    // std::cerr << \"=== Chunk rows \" << chunk.getNumRows() << \" cols \" << chunk.getNumColumns() << std::endl;\n \n     if (!not_processed)\n     {\n-        // std::cerr << \"!not_processed \" << std::endl;\n         if (chunk.hasColumns())\n             res = inputs.front().getHeader().cloneWithColumns(chunk.detachColumns());\n \n@@ -196,7 +194,6 @@ Block JoiningTransform::readExecute(Chunk & chunk)\n     }\n     else if (not_processed->empty()) /// There's not processed data inside expression.\n     {\n-        // std::cerr << \"not_processed->empty() \" << std::endl;\n         if (chunk.hasColumns())\n             res = inputs.front().getHeader().cloneWithColumns(chunk.detachColumns());\n \n@@ -205,12 +202,10 @@ Block JoiningTransform::readExecute(Chunk & chunk)\n     }\n     else\n     {\n-        // std::cerr << \"not not_processed->empty() \" << std::endl;\n         res = std::move(not_processed->block);\n         join->joinBlock(res, not_processed);\n     }\n \n-    // std::cerr << \"Res block rows \" << res.rows() << \" cols \" << res.columns() << std::endl;\n     return res;\n }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01943_pmj_non_joined_stuck.reference b/tests/queries/0_stateless/01943_pmj_non_joined_stuck.reference\nnew file mode 100644\nindex 000000000000..58501cbd0fc5\n--- /dev/null\n+++ b/tests/queries/0_stateless/01943_pmj_non_joined_stuck.reference\n@@ -0,0 +1,16 @@\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\ndiff --git a/tests/queries/0_stateless/01943_pmj_non_joined_stuck.sql b/tests/queries/0_stateless/01943_pmj_non_joined_stuck.sql\nnew file mode 100644\nindex 000000000000..ad7331ee2db5\n--- /dev/null\n+++ b/tests/queries/0_stateless/01943_pmj_non_joined_stuck.sql\n@@ -0,0 +1,19 @@\n+SET max_block_size = 6, join_algorithm = 'partial_merge';\n+\n+SELECT count() == 4  FROM (SELECT 1 AS s) AS js1 ALL RIGHT JOIN (SELECT arrayJoin([2, 2, 2, 2]) AS s) AS js2 USING (s);\n+SELECT count() == 5  FROM (SELECT 1 AS s) AS js1 ALL RIGHT JOIN (SELECT arrayJoin([2, 2, 2, 2, 2]) AS s) AS js2 USING (s);\n+SELECT count() == 6  FROM (SELECT 1 AS s) AS js1 ALL RIGHT JOIN (SELECT arrayJoin([2, 2, 2, 2, 2, 2]) AS s) AS js2 USING (s);\n+SELECT count() == 7  FROM (SELECT 1 AS s) AS js1 ALL RIGHT JOIN (SELECT arrayJoin([2, 2, 2, 2, 2, 2, 2]) AS s) AS js2 USING (s);\n+SELECT count() == 8  FROM (SELECT 1 AS s) AS js1 ALL RIGHT JOIN (SELECT arrayJoin([2, 2, 2, 2, 2, 2, 2, 3]) AS s) AS js2 USING (s);\n+SELECT count() == 9  FROM (SELECT 1 AS s) AS js1 ALL RIGHT JOIN (SELECT arrayJoin([2, 2, 2, 2, 2, 2, 2, 3, 3]) AS s) AS js2 USING (s);\n+SELECT count() == 10 FROM (SELECT 1 AS s) AS js1 ALL RIGHT JOIN (SELECT arrayJoin([2, 2, 2, 2, 2, 2, 2, 3, 3, 3]) AS s) AS js2 USING (s);\n+SELECT count() == 11 FROM (SELECT 1 AS s) AS js1 ALL RIGHT JOIN (SELECT arrayJoin([2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3]) AS s) AS js2 USING (s);\n+SELECT count() == 12 FROM (SELECT 1 AS s) AS js1 ALL RIGHT JOIN (SELECT arrayJoin([2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3]) AS s) AS js2 USING (s);\n+SELECT count() == 13 FROM (SELECT 1 AS s) AS js1 ALL RIGHT JOIN (SELECT arrayJoin([2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3]) AS s) AS js2 USING (s);\n+SELECT count() == 14 FROM (SELECT 1 AS s) AS js1 ALL RIGHT JOIN (SELECT arrayJoin([2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3]) AS s) AS js2 USING (s);\n+SELECT count() == 15 FROM (SELECT 1 AS s) AS js1 ALL RIGHT JOIN (SELECT arrayJoin([2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3]) AS s) AS js2 USING (s);\n+\n+SELECT count() == 8  FROM (SELECT 1 AS s) AS js1 FULL JOIN (SELECT arrayJoin([2, 2, 2, 2, 2, 2, 2]) AS s) AS js2 USING (s);\n+SELECT count() == 9  FROM (SELECT 1 AS s) AS js1 FULL JOIN (SELECT arrayJoin([2, 2, 2, 2, 2, 2, 2, 3]) AS s) AS js2 USING (s);\n+SELECT count() == 10 FROM (SELECT 1 AS s) AS js1 FULL JOIN (SELECT arrayJoin([2, 2, 2, 2, 2, 2, 2, 3, 3]) AS s) AS js2 USING (s);\n+SELECT count() == 11 FROM (SELECT 1 AS s) AS js1 FULL JOIN (SELECT arrayJoin([2, 2, 2, 2, 2, 2, 2, 3, 3, 3]) AS s) AS js2 USING (s);\n",
  "problem_statement": "Infinite loop in \"partial merge JOIN\".\nThankfully \"partial merge join\" is disabled by default.\r\n\r\n```\r\nmilovidov-desktop :) SET max_block_size = 6, join_algorithm = 'partial_merge'\r\n\r\nSET max_block_size = 6, join_algorithm = 'partial_merge'\r\n\r\nQuery id: 600704b7-b455-4726-8a9c-8e45b509f2fb\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.002 sec. \r\n\r\nmilovidov-desktop :) SELECT blockSize() bs FROM (SELECT 1 s) js1 ALL RIGHT JOIN (SELECT arrayJoin([2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3]) s) js2 USING (s) GROUP BY bs ORDER BY bs;\r\n\r\nSELECT blockSize() AS bs\r\nFROM\r\n(\r\n    SELECT 1 AS s\r\n) AS js1\r\nALL RIGHT JOIN\r\n(\r\n    SELECT arrayJoin([2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3]) AS s\r\n) AS js2 USING (s)\r\nGROUP BY bs\r\nORDER BY bs ASC\r\n\r\nQuery id: ae51c589-4b69-4e90-a3a9-7ef4ead72af9\r\n\r\n\u2192 Progress: 2.00 rows, 2.00 B (18.21 rows/s., 18.21 B/s.)\r\n```\r\n\r\nFound by stress test.\n",
  "hints_text": "",
  "created_at": "2021-07-15T15:24:38Z"
}