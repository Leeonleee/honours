{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 23548,
  "instance_id": "ClickHouse__ClickHouse-23548",
  "issue_numbers": [
    "23225"
  ],
  "base_commit": "84af9d151c1f281d884a68d2300b60d88179056d",
  "patch": "diff --git a/src/Databases/MySQL/DatabaseConnectionMySQL.cpp b/src/Databases/MySQL/DatabaseConnectionMySQL.cpp\nindex 4e63bed9c6df..59a575996ee5 100644\n--- a/src/Databases/MySQL/DatabaseConnectionMySQL.cpp\n+++ b/src/Databases/MySQL/DatabaseConnectionMySQL.cpp\n@@ -246,9 +246,19 @@ void DatabaseConnectionMySQL::fetchLatestTablesStructureIntoCache(\n             local_tables_cache.erase(iterator);\n         }\n \n-        local_tables_cache[table_name] = std::make_pair(table_modification_time, StorageMySQL::create(\n-            StorageID(database_name, table_name), std::move(mysql_pool), database_name_in_mysql, table_name,\n-            false, \"\", ColumnsDescription{columns_name_and_type}, ConstraintsDescription{}, getContext()));\n+        local_tables_cache[table_name] = std::make_pair(\n+            table_modification_time,\n+            StorageMySQL::create(\n+                StorageID(database_name, table_name),\n+                std::move(mysql_pool),\n+                database_name_in_mysql,\n+                table_name,\n+                false,\n+                \"\",\n+                ColumnsDescription{columns_name_and_type},\n+                ConstraintsDescription{},\n+                String{},\n+                getContext()));\n     }\n }\n \ndiff --git a/src/Databases/PostgreSQL/DatabasePostgreSQL.cpp b/src/Databases/PostgreSQL/DatabasePostgreSQL.cpp\nindex ec87b528779b..55813e519e48 100644\n--- a/src/Databases/PostgreSQL/DatabasePostgreSQL.cpp\n+++ b/src/Databases/PostgreSQL/DatabasePostgreSQL.cpp\n@@ -169,8 +169,13 @@ StoragePtr DatabasePostgreSQL::fetchTable(const String & table_name, ContextPtr\n             return StoragePtr{};\n \n         auto storage = StoragePostgreSQL::create(\n-                StorageID(database_name, table_name), connection_pool, table_name,\n-                ColumnsDescription{*columns}, ConstraintsDescription{}, local_context);\n+            StorageID(database_name, table_name),\n+            connection_pool,\n+            table_name,\n+            ColumnsDescription{*columns},\n+            ConstraintsDescription{},\n+            String{},\n+            local_context);\n \n         if (cache_tables)\n             cached_tables[table_name] = storage;\ndiff --git a/src/Interpreters/DatabaseCatalog.cpp b/src/Interpreters/DatabaseCatalog.cpp\nindex 6b5da80d2949..091661031552 100644\n--- a/src/Interpreters/DatabaseCatalog.cpp\n+++ b/src/Interpreters/DatabaseCatalog.cpp\n@@ -84,21 +84,18 @@ TemporaryTableHolder::TemporaryTableHolder(\n     const ConstraintsDescription & constraints,\n     const ASTPtr & query,\n     bool create_for_global_subquery)\n-    : TemporaryTableHolder\n-      (\n-          context_,\n-          [&](const StorageID & table_id)\n-          {\n-              auto storage = StorageMemory::create(\n-                      table_id, ColumnsDescription{columns}, ConstraintsDescription{constraints});\n-\n-              if (create_for_global_subquery)\n-                  storage->delayReadForGlobalSubqueries();\n-\n-              return storage;\n-          },\n-          query\n-      )\n+    : TemporaryTableHolder(\n+        context_,\n+        [&](const StorageID & table_id)\n+        {\n+            auto storage = StorageMemory::create(table_id, ColumnsDescription{columns}, ConstraintsDescription{constraints}, String{});\n+\n+            if (create_for_global_subquery)\n+                storage->delayReadForGlobalSubqueries();\n+\n+            return storage;\n+        },\n+        query)\n {\n }\n \ndiff --git a/src/Parsers/ASTCreateQuery.cpp b/src/Parsers/ASTCreateQuery.cpp\nindex 07cb53287570..d6d424beb3a7 100644\n--- a/src/Parsers/ASTCreateQuery.cpp\n+++ b/src/Parsers/ASTCreateQuery.cpp\n@@ -32,6 +32,9 @@ ASTPtr ASTStorage::clone() const\n     if (settings)\n         res->set(res->settings, settings->clone());\n \n+    if (comment)\n+        res->set(res->comment, comment->clone());\n+\n     return res;\n }\n \n@@ -72,6 +75,11 @@ void ASTStorage::formatImpl(const FormatSettings & s, FormatState & state, Forma\n         s.ostr << (s.hilite ? hilite_keyword : \"\") << s.nl_or_ws << \"SETTINGS \" << (s.hilite ? hilite_none : \"\");\n         settings->formatImpl(s, state, frame);\n     }\n+    if (comment)\n+    {\n+        s.ostr << (s.hilite ? hilite_keyword : \"\") << s.nl_or_ws << \"COMMENT \" << (s.hilite ? hilite_none : \"\");\n+        comment->formatImpl(s, state, frame);\n+    }\n \n }\n \ndiff --git a/src/Parsers/ASTCreateQuery.h b/src/Parsers/ASTCreateQuery.h\nindex 6fe75d7273d8..c7be67d9b786 100644\n--- a/src/Parsers/ASTCreateQuery.h\n+++ b/src/Parsers/ASTCreateQuery.h\n@@ -23,8 +23,10 @@ class ASTStorage : public IAST\n     IAST * order_by = nullptr;\n     IAST * sample_by = nullptr;\n     IAST * ttl_table = nullptr;\n+    IAST * comment = nullptr;\n     ASTSetQuery * settings = nullptr;\n \n+\n     String getID(char) const override { return \"Storage definition\"; }\n \n     ASTPtr clone() const override;\ndiff --git a/src/Parsers/ParserCreateQuery.cpp b/src/Parsers/ParserCreateQuery.cpp\nindex 8c358fbd1829..4bbe9cc08485 100644\n--- a/src/Parsers/ParserCreateQuery.cpp\n+++ b/src/Parsers/ParserCreateQuery.cpp\n@@ -315,11 +315,13 @@ bool ParserStorage::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)\n     ParserKeyword s_sample_by(\"SAMPLE BY\");\n     ParserKeyword s_ttl(\"TTL\");\n     ParserKeyword s_settings(\"SETTINGS\");\n+    ParserKeyword s_comment(\"COMMENT\");\n \n     ParserIdentifierWithOptionalParameters ident_with_optional_params_p;\n     ParserExpression expression_p;\n     ParserSetQuery settings_p(/* parse_only_internals_ = */ true);\n     ParserTTLExpressionList parser_ttl_list;\n+    ParserStringLiteral string_literal_parser;\n \n     ASTPtr engine;\n     ASTPtr partition_by;\n@@ -328,6 +330,7 @@ bool ParserStorage::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)\n     ASTPtr sample_by;\n     ASTPtr ttl_table;\n     ASTPtr settings;\n+    ASTPtr comment_expression;\n \n     if (!s_engine.ignore(pos, expected))\n         return false;\n@@ -385,6 +388,13 @@ bool ParserStorage::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)\n                 return false;\n         }\n \n+        if (s_comment.ignore(pos, expected))\n+        {\n+            /// should be followed by a string literal\n+            if (!string_literal_parser.parse(pos, comment_expression, expected))\n+                return false;\n+        }\n+\n         break;\n     }\n \n@@ -398,6 +408,8 @@ bool ParserStorage::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)\n \n     storage->set(storage->settings, settings);\n \n+    storage->set(storage->comment, comment_expression);\n+\n     node = storage;\n     return true;\n }\ndiff --git a/src/Storages/HDFS/StorageHDFS.cpp b/src/Storages/HDFS/StorageHDFS.cpp\nindex c08e487f1790..989f35c40054 100644\n--- a/src/Storages/HDFS/StorageHDFS.cpp\n+++ b/src/Storages/HDFS/StorageHDFS.cpp\n@@ -35,24 +35,23 @@ namespace ErrorCodes\n     extern const int NUMBER_OF_ARGUMENTS_DOESNT_MATCH;\n }\n \n-StorageHDFS::StorageHDFS(const String & uri_,\n+StorageHDFS::StorageHDFS(\n+    const String & uri_,\n     const StorageID & table_id_,\n     const String & format_name_,\n     const ColumnsDescription & columns_,\n     const ConstraintsDescription & constraints_,\n+    const String & comment,\n     ContextPtr context_,\n     const String & compression_method_ = \"\")\n-    : IStorage(table_id_)\n-    , WithContext(context_)\n-    , uri(uri_)\n-    , format_name(format_name_)\n-    , compression_method(compression_method_)\n+    : IStorage(table_id_), WithContext(context_), uri(uri_), format_name(format_name_), compression_method(compression_method_)\n {\n     context_->getRemoteHostFilter().checkURL(Poco::URI(uri));\n \n     StorageInMemoryMetadata storage_metadata;\n     storage_metadata.setColumns(columns_);\n     storage_metadata.setConstraints(constraints_);\n+    storage_metadata.setComment(comment);\n     setInMemoryMetadata(storage_metadata);\n }\n \n@@ -347,7 +346,8 @@ void registerStorageHDFS(StorageFactory & factory)\n             compression_method = engine_args[2]->as<ASTLiteral &>().value.safeGet<String>();\n         } else compression_method = \"auto\";\n \n-        return StorageHDFS::create(url, args.table_id, format_name, args.columns, args.constraints, args.getContext(), compression_method);\n+        return StorageHDFS::create(\n+            url, args.table_id, format_name, args.columns, args.constraints, args.comment, args.getContext(), compression_method);\n     },\n     {\n         .source_access_type = AccessType::HDFS,\ndiff --git a/src/Storages/HDFS/StorageHDFS.h b/src/Storages/HDFS/StorageHDFS.h\nindex e3f235296ac6..5e446c76f030 100644\n--- a/src/Storages/HDFS/StorageHDFS.h\n+++ b/src/Storages/HDFS/StorageHDFS.h\n@@ -33,11 +33,13 @@ class StorageHDFS final : public ext::shared_ptr_helper<StorageHDFS>, public ISt\n     NamesAndTypesList getVirtuals() const override;\n \n protected:\n-    StorageHDFS(const String & uri_,\n+    StorageHDFS(\n+        const String & uri_,\n         const StorageID & table_id_,\n         const String & format_name_,\n         const ColumnsDescription & columns_,\n         const ConstraintsDescription & constraints_,\n+        const String & comment,\n         ContextPtr context_,\n         const String & compression_method_);\n \ndiff --git a/src/Storages/MergeTree/registerStorageMergeTree.cpp b/src/Storages/MergeTree/registerStorageMergeTree.cpp\nindex 70d1239cc153..ce7fc38b9041 100644\n--- a/src/Storages/MergeTree/registerStorageMergeTree.cpp\n+++ b/src/Storages/MergeTree/registerStorageMergeTree.cpp\n@@ -625,7 +625,8 @@ static StoragePtr create(const StorageFactory::Arguments & args)\n     String date_column_name;\n \n     StorageInMemoryMetadata metadata;\n-    metadata.columns = args.columns;\n+    metadata.setColumns(args.columns);\n+    metadata.setComment(args.comment);\n \n     std::unique_ptr<MergeTreeSettings> storage_settings;\n     if (replicated)\ndiff --git a/src/Storages/StorageBuffer.cpp b/src/Storages/StorageBuffer.cpp\nindex bfc282ed4eb0..a2be3384cf02 100644\n--- a/src/Storages/StorageBuffer.cpp\n+++ b/src/Storages/StorageBuffer.cpp\n@@ -102,6 +102,7 @@ StorageBuffer::StorageBuffer(\n     const StorageID & table_id_,\n     const ColumnsDescription & columns_,\n     const ConstraintsDescription & constraints_,\n+    const String & comment,\n     ContextPtr context_,\n     size_t num_shards_,\n     const Thresholds & min_thresholds_,\n@@ -111,7 +112,8 @@ StorageBuffer::StorageBuffer(\n     bool allow_materialized_)\n     : IStorage(table_id_)\n     , WithContext(context_->getBufferContext())\n-    , num_shards(num_shards_), buffers(num_shards_)\n+    , num_shards(num_shards_)\n+    , buffers(num_shards_)\n     , min_thresholds(min_thresholds_)\n     , max_thresholds(max_thresholds_)\n     , flush_thresholds(flush_thresholds_)\n@@ -123,6 +125,7 @@ StorageBuffer::StorageBuffer(\n     StorageInMemoryMetadata storage_metadata;\n     storage_metadata.setColumns(columns_);\n     storage_metadata.setConstraints(constraints_);\n+    storage_metadata.setComment(comment);\n     setInMemoryMetadata(storage_metadata);\n }\n \n@@ -1135,9 +1138,12 @@ void registerStorageBuffer(StorageFactory & factory)\n             args.table_id,\n             args.columns,\n             args.constraints,\n+            args.comment,\n             args.getContext(),\n             num_buckets,\n-            min, max, flush,\n+            min,\n+            max,\n+            flush,\n             destination_id,\n             static_cast<bool>(args.getLocalContext()->getSettingsRef().insert_allow_materialized_columns));\n     },\ndiff --git a/src/Storages/StorageBuffer.h b/src/Storages/StorageBuffer.h\nindex 2224bce14b98..83bdf9de2498 100644\n--- a/src/Storages/StorageBuffer.h\n+++ b/src/Storages/StorageBuffer.h\n@@ -178,6 +178,7 @@ friend class BufferBlockOutputStream;\n         const StorageID & table_id_,\n         const ColumnsDescription & columns_,\n         const ConstraintsDescription & constraints_,\n+        const String & comment,\n         ContextPtr context_,\n         size_t num_shards_,\n         const Thresholds & min_thresholds_,\ndiff --git a/src/Storages/StorageDictionary.cpp b/src/Storages/StorageDictionary.cpp\nindex 16818c9ea182..1ce74b16f466 100644\n--- a/src/Storages/StorageDictionary.cpp\n+++ b/src/Storages/StorageDictionary.cpp\n@@ -96,15 +96,14 @@ StorageDictionary::StorageDictionary(\n     const StorageID & table_id_,\n     const String & dictionary_name_,\n     const ColumnsDescription & columns_,\n+    const String & comment,\n     Location location_,\n     ContextPtr context_)\n-    : IStorage(table_id_)\n-    , WithContext(context_->getGlobalContext())\n-    , dictionary_name(dictionary_name_)\n-    , location(location_)\n+    : IStorage(table_id_), WithContext(context_->getGlobalContext()), dictionary_name(dictionary_name_), location(location_)\n {\n     StorageInMemoryMetadata storage_metadata;\n     storage_metadata.setColumns(columns_);\n+    storage_metadata.setComment(comment);\n     setInMemoryMetadata(storage_metadata);\n }\n \n@@ -116,11 +115,7 @@ StorageDictionary::StorageDictionary(\n     Location location_,\n     ContextPtr context_)\n     : StorageDictionary(\n-        table_id_,\n-        dictionary_name_,\n-        ColumnsDescription{getNamesAndTypes(dictionary_structure_)},\n-        location_,\n-        context_)\n+        table_id_, dictionary_name_, ColumnsDescription{getNamesAndTypes(dictionary_structure_)}, String{}, location_, context_)\n {\n }\n \n@@ -289,7 +284,8 @@ void registerStorageDictionary(StorageFactory & factory)\n                 checkNamesAndTypesCompatibleWithDictionary(dictionary_name, args.columns, dictionary_structure);\n             }\n \n-            return StorageDictionary::create(args.table_id, dictionary_name, args.columns, StorageDictionary::Location::Custom, local_context);\n+            return StorageDictionary::create(\n+                args.table_id, dictionary_name, args.columns, args.comment, StorageDictionary::Location::Custom, local_context);\n         }\n     });\n }\ndiff --git a/src/Storages/StorageDictionary.h b/src/Storages/StorageDictionary.h\nindex c22c337d40a6..9c92cd90d368 100644\n--- a/src/Storages/StorageDictionary.h\n+++ b/src/Storages/StorageDictionary.h\n@@ -82,6 +82,7 @@ class StorageDictionary final : public ext::shared_ptr_helper<StorageDictionary>\n         const StorageID & table_id_,\n         const String & dictionary_name_,\n         const ColumnsDescription & columns_,\n+        const String & comment,\n         Location location_,\n         ContextPtr context_);\n \ndiff --git a/src/Storages/StorageDistributed.cpp b/src/Storages/StorageDistributed.cpp\nindex fa2f77d49a71..de243c2d2e12 100644\n--- a/src/Storages/StorageDistributed.cpp\n+++ b/src/Storages/StorageDistributed.cpp\n@@ -386,6 +386,7 @@ StorageDistributed::StorageDistributed(\n     const StorageID & id_,\n     const ColumnsDescription & columns_,\n     const ConstraintsDescription & constraints_,\n+    const String & comment,\n     const String & remote_database_,\n     const String & remote_table_,\n     const String & cluster_name_,\n@@ -411,6 +412,7 @@ StorageDistributed::StorageDistributed(\n     StorageInMemoryMetadata storage_metadata;\n     storage_metadata.setColumns(columns_);\n     storage_metadata.setConstraints(constraints_);\n+    storage_metadata.setComment(comment);\n     setInMemoryMetadata(storage_metadata);\n \n     if (sharding_key_)\n@@ -452,8 +454,21 @@ StorageDistributed::StorageDistributed(\n     const DistributedSettings & distributed_settings_,\n     bool attach,\n     ClusterPtr owned_cluster_)\n-    : StorageDistributed(id_, columns_, constraints_, String{}, String{}, cluster_name_, context_, sharding_key_,\n-    storage_policy_name_, relative_data_path_, distributed_settings_, attach, std::move(owned_cluster_))\n+    : StorageDistributed(\n+        id_,\n+        columns_,\n+        constraints_,\n+        String{},\n+        String{},\n+        String{},\n+        cluster_name_,\n+        context_,\n+        sharding_key_,\n+        storage_policy_name_,\n+        relative_data_path_,\n+        distributed_settings_,\n+        attach,\n+        std::move(owned_cluster_))\n {\n     remote_table_function_ptr = std::move(remote_table_function_ptr_);\n }\n@@ -1253,8 +1268,13 @@ void registerStorageDistributed(StorageFactory & factory)\n         }\n \n         return StorageDistributed::create(\n-            args.table_id, args.columns, args.constraints,\n-            remote_database, remote_table, cluster_name,\n+            args.table_id,\n+            args.columns,\n+            args.constraints,\n+            args.comment,\n+            remote_database,\n+            remote_table,\n+            cluster_name,\n             args.getContext(),\n             sharding_key,\n             storage_policy,\ndiff --git a/src/Storages/StorageDistributed.h b/src/Storages/StorageDistributed.h\nindex 241c6ddb1aab..61e83c611a73 100644\n--- a/src/Storages/StorageDistributed.h\n+++ b/src/Storages/StorageDistributed.h\n@@ -124,6 +124,7 @@ class StorageDistributed final : public ext::shared_ptr_helper<StorageDistribute\n         const StorageID & id_,\n         const ColumnsDescription & columns_,\n         const ConstraintsDescription & constraints_,\n+        const String & comment,\n         const String & remote_database_,\n         const String & remote_table_,\n         const String & cluster_name_,\ndiff --git a/src/Storages/StorageExternalDistributed.cpp b/src/Storages/StorageExternalDistributed.cpp\nindex 10eb1696d99c..5a153f16a0a7 100644\n--- a/src/Storages/StorageExternalDistributed.cpp\n+++ b/src/Storages/StorageExternalDistributed.cpp\n@@ -36,12 +36,14 @@ StorageExternalDistributed::StorageExternalDistributed(\n     const String & password,\n     const ColumnsDescription & columns_,\n     const ConstraintsDescription & constraints_,\n+    const String & comment,\n     ContextPtr context)\n     : IStorage(table_id_)\n {\n     StorageInMemoryMetadata storage_metadata;\n     storage_metadata.setColumns(columns_);\n     storage_metadata.setConstraints(constraints_);\n+    storage_metadata.setComment(comment);\n     setInMemoryMetadata(storage_metadata);\n \n     size_t max_addresses = context->getSettingsRef().glob_expansion_max_elements;\n@@ -74,7 +76,9 @@ StorageExternalDistributed::StorageExternalDistributed(\n                     remote_table,\n                     /* replace_query = */ false,\n                     /* on_duplicate_clause = */ \"\",\n-                    columns_, constraints_,\n+                    columns_,\n+                    constraints_,\n+                    String{},\n                     context);\n                 break;\n             }\n@@ -92,12 +96,7 @@ StorageExternalDistributed::StorageExternalDistributed(\n                     context->getSettingsRef().postgresql_connection_pool_size,\n                     context->getSettingsRef().postgresql_connection_pool_wait_timeout);\n \n-                shard = StoragePostgreSQL::create(\n-                    table_id_,\n-                    std::move(pool),\n-                    remote_table,\n-                    columns_, constraints_,\n-                    context);\n+                shard = StoragePostgreSQL::create(table_id_, std::move(pool), remote_table, columns_, constraints_, String{}, context);\n                 break;\n             }\n #endif\n@@ -164,12 +163,7 @@ StorageExternalDistributed::StorageExternalDistributed(\n         {\n             Poco::URI uri(url_description);\n             shard = std::make_shared<StorageURL>(\n-                uri,\n-                table_id,\n-                format_name,\n-                format_settings,\n-                columns, constraints, context,\n-                compression_method);\n+                uri, table_id, format_name, format_settings, columns, constraints, String{}, context, compression_method);\n \n             LOG_DEBUG(&Poco::Logger::get(\"StorageURLDistributed\"), \"Adding URL: {}\", url_description);\n         }\n@@ -271,6 +265,7 @@ void registerStorageExternalDistributed(StorageFactory & factory)\n                 password,\n                 args.columns,\n                 args.constraints,\n+                args.comment,\n                 args.getContext());\n         }\n     },\ndiff --git a/src/Storages/StorageExternalDistributed.h b/src/Storages/StorageExternalDistributed.h\nindex a6718398a3a7..00ec868b4601 100644\n--- a/src/Storages/StorageExternalDistributed.h\n+++ b/src/Storages/StorageExternalDistributed.h\n@@ -50,6 +50,7 @@ class StorageExternalDistributed final : public ext::shared_ptr_helper<StorageEx\n         const String & password,\n         const ColumnsDescription & columns_,\n         const ConstraintsDescription & constraints_,\n+        const String & comment,\n         ContextPtr context_);\n \n     StorageExternalDistributed(\ndiff --git a/src/Storages/StorageFactory.cpp b/src/Storages/StorageFactory.cpp\nindex 18cf42dd4e27..836d8bae7f3a 100644\n--- a/src/Storages/StorageFactory.cpp\n+++ b/src/Storages/StorageFactory.cpp\n@@ -65,7 +65,7 @@ StoragePtr StorageFactory::get(\n     const ConstraintsDescription & constraints,\n     bool has_force_restore_data_flag) const\n {\n-    String name;\n+    String name, comment;\n     ASTStorage * storage_def = query.storage;\n \n     bool has_engine_args = false;\n@@ -146,6 +146,9 @@ StoragePtr StorageFactory::get(\n                     throw Exception(\"Unknown table engine \" + name, ErrorCodes::UNKNOWN_STORAGE);\n             }\n \n+            if (storage_def->comment)\n+                comment = storage_def->comment->as<ASTLiteral &>().value.get<String>();\n+\n             auto check_feature = [&](String feature_description, FeatureMatcherFn feature_matcher_fn)\n             {\n                 if (!feature_matcher_fn(it->second.features))\n@@ -192,8 +195,7 @@ StoragePtr StorageFactory::get(\n     }\n \n     ASTs empty_engine_args;\n-    Arguments arguments\n-    {\n+    Arguments arguments{\n         .engine_name = name,\n         .engine_args = has_engine_args ? storage_def->engine->arguments->children : empty_engine_args,\n         .storage_def = storage_def,\n@@ -205,8 +207,9 @@ StoragePtr StorageFactory::get(\n         .columns = columns,\n         .constraints = constraints,\n         .attach = query.attach,\n-        .has_force_restore_data_flag = has_force_restore_data_flag\n-    };\n+        .has_force_restore_data_flag = has_force_restore_data_flag,\n+        .comment = comment};\n+\n     assert(arguments.getContext() == arguments.getContext()->getGlobalContext());\n \n     auto res = storages.at(name).creator_fn(arguments);\ndiff --git a/src/Storages/StorageFactory.h b/src/Storages/StorageFactory.h\nindex 66be974d5b3a..e04e5459dda0 100644\n--- a/src/Storages/StorageFactory.h\n+++ b/src/Storages/StorageFactory.h\n@@ -45,6 +45,7 @@ class StorageFactory : private boost::noncopyable, public IHints<1, StorageFacto\n         const ConstraintsDescription & constraints;\n         bool attach;\n         bool has_force_restore_data_flag;\n+        const String & comment;\n \n         ContextPtr getContext() const;\n         ContextPtr getLocalContext() const;\ndiff --git a/src/Storages/StorageFile.cpp b/src/Storages/StorageFile.cpp\nindex 14b91d29805d..cfb4934dae0a 100644\n--- a/src/Storages/StorageFile.cpp\n+++ b/src/Storages/StorageFile.cpp\n@@ -221,6 +221,7 @@ StorageFile::StorageFile(CommonArguments args)\n         storage_metadata.setColumns(args.columns);\n \n     storage_metadata.setConstraints(args.constraints);\n+    storage_metadata.setComment(args.comment);\n     setInMemoryMetadata(storage_metadata);\n }\n \n@@ -687,6 +688,7 @@ void registerStorageFile(StorageFactory & factory)\n                 {},\n                 factory_args.columns,\n                 factory_args.constraints,\n+                factory_args.comment,\n             };\n \n             ASTs & engine_args_ast = factory_args.engine_args;\ndiff --git a/src/Storages/StorageFile.h b/src/Storages/StorageFile.h\nindex a277dda7cc03..5be8378b53e3 100644\n--- a/src/Storages/StorageFile.h\n+++ b/src/Storages/StorageFile.h\n@@ -57,6 +57,7 @@ class StorageFile final : public ext::shared_ptr_helper<StorageFile>, public ISt\n         std::string compression_method;\n         const ColumnsDescription & columns;\n         const ConstraintsDescription & constraints;\n+        const String & comment;\n     };\n \n     NamesAndTypesList getVirtuals() const override;\ndiff --git a/src/Storages/StorageGenerateRandom.cpp b/src/Storages/StorageGenerateRandom.cpp\nindex 7987fcc3b311..abe288bd9995 100644\n--- a/src/Storages/StorageGenerateRandom.cpp\n+++ b/src/Storages/StorageGenerateRandom.cpp\n@@ -418,8 +418,13 @@ class GenerateSource : public SourceWithProgress\n }\n \n \n-StorageGenerateRandom::StorageGenerateRandom(const StorageID & table_id_, const ColumnsDescription & columns_,\n-    UInt64 max_array_length_, UInt64 max_string_length_, std::optional<UInt64> random_seed_)\n+StorageGenerateRandom::StorageGenerateRandom(\n+    const StorageID & table_id_,\n+    const ColumnsDescription & columns_,\n+    const String & comment,\n+    UInt64 max_array_length_,\n+    UInt64 max_string_length_,\n+    std::optional<UInt64> random_seed_)\n     : IStorage(table_id_), max_array_length(max_array_length_), max_string_length(max_string_length_)\n {\n     static constexpr size_t MAX_ARRAY_SIZE = 1 << 30;\n@@ -435,6 +440,7 @@ StorageGenerateRandom::StorageGenerateRandom(const StorageID & table_id_, const\n     random_seed = random_seed_ ? sipHash64(*random_seed_) : randomSeed();\n     StorageInMemoryMetadata storage_metadata;\n     storage_metadata.setColumns(columns_);\n+    storage_metadata.setComment(comment);\n     setInMemoryMetadata(storage_metadata);\n }\n \n@@ -467,7 +473,7 @@ void registerStorageGenerateRandom(StorageFactory & factory)\n         if (engine_args.size() == 3)\n             max_array_length = engine_args[2]->as<const ASTLiteral &>().value.safeGet<UInt64>();\n \n-        return StorageGenerateRandom::create(args.table_id, args.columns, max_array_length, max_string_length, random_seed);\n+        return StorageGenerateRandom::create(args.table_id, args.columns, args.comment, max_array_length, max_string_length, random_seed);\n     });\n }\n \ndiff --git a/src/Storages/StorageGenerateRandom.h b/src/Storages/StorageGenerateRandom.h\nindex d9c2acb782b6..4a4015ebc0d1 100644\n--- a/src/Storages/StorageGenerateRandom.h\n+++ b/src/Storages/StorageGenerateRandom.h\n@@ -30,8 +30,13 @@ class StorageGenerateRandom final : public ext::shared_ptr_helper<StorageGenerat\n     UInt64 random_seed = 0;\n \n protected:\n-    StorageGenerateRandom(const StorageID & table_id_, const ColumnsDescription & columns_,\n-        UInt64 max_array_length, UInt64 max_string_length, std::optional<UInt64> random_seed);\n+    StorageGenerateRandom(\n+        const StorageID & table_id_,\n+        const ColumnsDescription & columns_,\n+        const String & comment,\n+        UInt64 max_array_length,\n+        UInt64 max_string_length,\n+        std::optional<UInt64> random_seed);\n };\n \n }\ndiff --git a/src/Storages/StorageInMemoryMetadata.cpp b/src/Storages/StorageInMemoryMetadata.cpp\nindex c4a04b04a047..390816482483 100644\n--- a/src/Storages/StorageInMemoryMetadata.cpp\n+++ b/src/Storages/StorageInMemoryMetadata.cpp\n@@ -36,6 +36,7 @@ StorageInMemoryMetadata::StorageInMemoryMetadata(const StorageInMemoryMetadata &\n     , table_ttl(other.table_ttl)\n     , settings_changes(other.settings_changes ? other.settings_changes->clone() : nullptr)\n     , select(other.select)\n+    , comment(other.comment)\n {\n }\n \n@@ -59,9 +60,14 @@ StorageInMemoryMetadata & StorageInMemoryMetadata::operator=(const StorageInMemo\n     else\n         settings_changes.reset();\n     select = other.select;\n+    comment = other.comment;\n     return *this;\n }\n \n+void StorageInMemoryMetadata::setComment(const String & comment_)\n+{\n+    comment = comment_;\n+}\n \n void StorageInMemoryMetadata::setColumns(ColumnsDescription columns_)\n {\ndiff --git a/src/Storages/StorageInMemoryMetadata.h b/src/Storages/StorageInMemoryMetadata.h\nindex 1a14c73fd47c..861cb5866ee3 100644\n--- a/src/Storages/StorageInMemoryMetadata.h\n+++ b/src/Storages/StorageInMemoryMetadata.h\n@@ -47,6 +47,8 @@ struct StorageInMemoryMetadata\n     /// SELECT QUERY. Supported for MaterializedView and View (have to support LiveView).\n     SelectQueryDescription select;\n \n+    String comment;\n+\n     StorageInMemoryMetadata() = default;\n \n     StorageInMemoryMetadata(const StorageInMemoryMetadata & other);\n@@ -56,6 +58,9 @@ struct StorageInMemoryMetadata\n     /// structure from different threads. It should be used as MultiVersion\n     /// object. See example in IStorage.\n \n+    /// Sets a user-defined comment for a table\n+    void setComment(const String & comment_);\n+\n     /// Sets only real columns, possibly overwrites virtual ones.\n     void setColumns(ColumnsDescription columns_);\n \ndiff --git a/src/Storages/StorageJoin.cpp b/src/Storages/StorageJoin.cpp\nindex d9970bab22ca..f0129e954953 100644\n--- a/src/Storages/StorageJoin.cpp\n+++ b/src/Storages/StorageJoin.cpp\n@@ -46,9 +46,10 @@ StorageJoin::StorageJoin(\n     ASTTableJoin::Strictness strictness_,\n     const ColumnsDescription & columns_,\n     const ConstraintsDescription & constraints_,\n+    const String & comment,\n     bool overwrite_,\n     bool persistent_)\n-    : StorageSetOrJoinBase{disk_, relative_path_, table_id_, columns_, constraints_, persistent_}\n+    : StorageSetOrJoinBase{disk_, relative_path_, table_id_, columns_, constraints_, comment, persistent_}\n     , key_names(key_names_)\n     , use_nulls(use_nulls_)\n     , limits(limits_)\n@@ -263,6 +264,7 @@ void registerStorageJoin(StorageFactory & factory)\n             strictness,\n             args.columns,\n             args.constraints,\n+            args.comment,\n             join_any_take_last_row,\n             persistent);\n     };\ndiff --git a/src/Storages/StorageJoin.h b/src/Storages/StorageJoin.h\nindex 4baac53c69ce..b89780a0f759 100644\n--- a/src/Storages/StorageJoin.h\n+++ b/src/Storages/StorageJoin.h\n@@ -81,9 +81,11 @@ class StorageJoin final : public ext::shared_ptr_helper<StorageJoin>, public Sto\n         const Names & key_names_,\n         bool use_nulls_,\n         SizeLimits limits_,\n-        ASTTableJoin::Kind kind_, ASTTableJoin::Strictness strictness_,\n+        ASTTableJoin::Kind kind_,\n+        ASTTableJoin::Strictness strictness_,\n         const ColumnsDescription & columns_,\n         const ConstraintsDescription & constraints_,\n+        const String & comment,\n         bool overwrite,\n         bool persistent_);\n };\ndiff --git a/src/Storages/StorageLog.cpp b/src/Storages/StorageLog.cpp\nindex 8ed68e0b44da..663deddfd1f4 100644\n--- a/src/Storages/StorageLog.cpp\n+++ b/src/Storages/StorageLog.cpp\n@@ -465,6 +465,7 @@ StorageLog::StorageLog(\n     const StorageID & table_id_,\n     const ColumnsDescription & columns_,\n     const ConstraintsDescription & constraints_,\n+    const String & comment,\n     bool attach,\n     size_t max_compress_block_size_)\n     : IStorage(table_id_)\n@@ -476,6 +477,7 @@ StorageLog::StorageLog(\n     StorageInMemoryMetadata storage_metadata;\n     storage_metadata.setColumns(columns_);\n     storage_metadata.setConstraints(constraints_);\n+    storage_metadata.setComment(comment);\n     setInMemoryMetadata(storage_metadata);\n \n     if (relative_path_.empty())\n@@ -734,8 +736,14 @@ void registerStorageLog(StorageFactory & factory)\n         DiskPtr disk = args.getContext()->getDisk(disk_name);\n \n         return StorageLog::create(\n-            disk, args.relative_data_path, args.table_id, args.columns, args.constraints,\n-            args.attach, args.getContext()->getSettings().max_compress_block_size);\n+            disk,\n+            args.relative_data_path,\n+            args.table_id,\n+            args.columns,\n+            args.constraints,\n+            args.comment,\n+            args.attach,\n+            args.getContext()->getSettings().max_compress_block_size);\n     }, features);\n }\n \ndiff --git a/src/Storages/StorageLog.h b/src/Storages/StorageLog.h\nindex 4fbaf53529ff..20103f514799 100644\n--- a/src/Storages/StorageLog.h\n+++ b/src/Storages/StorageLog.h\n@@ -57,6 +57,7 @@ class StorageLog final : public ext::shared_ptr_helper<StorageLog>, public IStor\n         const StorageID & table_id_,\n         const ColumnsDescription & columns_,\n         const ConstraintsDescription & constraints_,\n+        const String & comment,\n         bool attach,\n         size_t max_compress_block_size_);\n \ndiff --git a/src/Storages/StorageMemory.cpp b/src/Storages/StorageMemory.cpp\nindex 4cae73676068..289a17366bba 100644\n--- a/src/Storages/StorageMemory.cpp\n+++ b/src/Storages/StorageMemory.cpp\n@@ -164,12 +164,14 @@ StorageMemory::StorageMemory(\n     const StorageID & table_id_,\n     ColumnsDescription columns_description_,\n     ConstraintsDescription constraints_,\n+    const String & comment,\n     bool compress_)\n     : IStorage(table_id_), data(std::make_unique<const Blocks>()), compress(compress_)\n {\n     StorageInMemoryMetadata storage_metadata;\n     storage_metadata.setColumns(std::move(columns_description_));\n     storage_metadata.setConstraints(std::move(constraints_));\n+    storage_metadata.setComment(comment);\n     setInMemoryMetadata(storage_metadata);\n }\n \n@@ -349,7 +351,7 @@ void registerStorageMemory(StorageFactory & factory)\n         if (has_settings)\n             settings.loadFromQuery(*args.storage_def);\n \n-        return StorageMemory::create(args.table_id, args.columns, args.constraints, settings.compress);\n+        return StorageMemory::create(args.table_id, args.columns, args.constraints, args.comment, settings.compress);\n     },\n     {\n         .supports_settings = true,\ndiff --git a/src/Storages/StorageMemory.h b/src/Storages/StorageMemory.h\nindex 1118474deee1..e623f29e2e64 100644\n--- a/src/Storages/StorageMemory.h\n+++ b/src/Storages/StorageMemory.h\n@@ -115,6 +115,7 @@ friend struct ext::shared_ptr_helper<StorageMemory>;\n         const StorageID & table_id_,\n         ColumnsDescription columns_description_,\n         ConstraintsDescription constraints_,\n+        const String & comment,\n         bool compress_ = false);\n };\n \ndiff --git a/src/Storages/StorageMerge.cpp b/src/Storages/StorageMerge.cpp\nindex 0a3a9ea2633c..aff62d2a337a 100644\n--- a/src/Storages/StorageMerge.cpp\n+++ b/src/Storages/StorageMerge.cpp\n@@ -102,6 +102,7 @@ TreeRewriterResult modifySelect(ASTSelectQuery & select, const TreeRewriterResul\n StorageMerge::StorageMerge(\n     const StorageID & table_id_,\n     const ColumnsDescription & columns_,\n+    const String & comment,\n     const String & source_database_,\n     const Strings & source_tables_,\n     ContextPtr context_)\n@@ -112,12 +113,14 @@ StorageMerge::StorageMerge(\n {\n     StorageInMemoryMetadata storage_metadata;\n     storage_metadata.setColumns(columns_);\n+    storage_metadata.setComment(comment);\n     setInMemoryMetadata(storage_metadata);\n }\n \n StorageMerge::StorageMerge(\n     const StorageID & table_id_,\n     const ColumnsDescription & columns_,\n+    const String & comment,\n     const String & source_database_,\n     const String & source_table_regexp_,\n     ContextPtr context_)\n@@ -128,6 +131,7 @@ StorageMerge::StorageMerge(\n {\n     StorageInMemoryMetadata storage_metadata;\n     storage_metadata.setColumns(columns_);\n+    storage_metadata.setComment(comment);\n     setInMemoryMetadata(storage_metadata);\n }\n \n@@ -623,9 +627,7 @@ void registerStorageMerge(StorageFactory & factory)\n         String source_database = engine_args[0]->as<ASTLiteral &>().value.safeGet<String>();\n         String table_name_regexp = engine_args[1]->as<ASTLiteral &>().value.safeGet<String>();\n \n-        return StorageMerge::create(\n-            args.table_id, args.columns,\n-            source_database, table_name_regexp, args.getContext());\n+        return StorageMerge::create(args.table_id, args.columns, args.comment, source_database, table_name_regexp, args.getContext());\n     });\n }\n \ndiff --git a/src/Storages/StorageMerge.h b/src/Storages/StorageMerge.h\nindex f7381bf51933..7c5a50af4865 100644\n--- a/src/Storages/StorageMerge.h\n+++ b/src/Storages/StorageMerge.h\n@@ -71,6 +71,7 @@ class StorageMerge final : public ext::shared_ptr_helper<StorageMerge>, public I\n     StorageMerge(\n         const StorageID & table_id_,\n         const ColumnsDescription & columns_,\n+        const String & comment,\n         const String & source_database_,\n         const Strings & source_tables_,\n         ContextPtr context_);\n@@ -78,6 +79,7 @@ class StorageMerge final : public ext::shared_ptr_helper<StorageMerge>, public I\n     StorageMerge(\n         const StorageID & table_id_,\n         const ColumnsDescription & columns_,\n+        const String & comment,\n         const String & source_database_,\n         const String & source_table_regexp_,\n         ContextPtr context_);\ndiff --git a/src/Storages/StorageMongoDB.cpp b/src/Storages/StorageMongoDB.cpp\nindex 2b0200f3643e..f5f604c6f41c 100644\n--- a/src/Storages/StorageMongoDB.cpp\n+++ b/src/Storages/StorageMongoDB.cpp\n@@ -34,7 +34,8 @@ StorageMongoDB::StorageMongoDB(\n     const std::string & username_,\n     const std::string & password_,\n     const ColumnsDescription & columns_,\n-    const ConstraintsDescription & constraints_)\n+    const ConstraintsDescription & constraints_,\n+    const String & comment)\n     : IStorage(table_id_)\n     , host(host_)\n     , port(port_)\n@@ -46,6 +47,7 @@ StorageMongoDB::StorageMongoDB(\n     StorageInMemoryMetadata storage_metadata;\n     storage_metadata.setColumns(columns_);\n     storage_metadata.setConstraints(constraints_);\n+    storage_metadata.setComment(comment);\n     setInMemoryMetadata(storage_metadata);\n }\n \n@@ -125,7 +127,8 @@ void registerStorageMongoDB(StorageFactory & factory)\n             username,\n             password,\n             args.columns,\n-            args.constraints);\n+            args.constraints,\n+            args.comment);\n     },\n     {\n         .source_access_type = AccessType::MONGO,\ndiff --git a/src/Storages/StorageMongoDB.h b/src/Storages/StorageMongoDB.h\nindex 5e96d1543a22..e5f60f59c1ac 100644\n--- a/src/Storages/StorageMongoDB.h\n+++ b/src/Storages/StorageMongoDB.h\n@@ -27,7 +27,8 @@ class StorageMongoDB final : public ext::shared_ptr_helper<StorageMongoDB>, publ\n         const std::string & username_,\n         const std::string & password_,\n         const ColumnsDescription & columns_,\n-        const ConstraintsDescription & constraints_);\n+        const ConstraintsDescription & constraints_,\n+        const String & comment);\n \n     std::string getName() const override { return \"MongoDB\"; }\n \ndiff --git a/src/Storages/StorageMySQL.cpp b/src/Storages/StorageMySQL.cpp\nindex 35eb85e41d27..4cf69d7dd777 100644\n--- a/src/Storages/StorageMySQL.cpp\n+++ b/src/Storages/StorageMySQL.cpp\n@@ -49,6 +49,7 @@ StorageMySQL::StorageMySQL(\n     const std::string & on_duplicate_clause_,\n     const ColumnsDescription & columns_,\n     const ConstraintsDescription & constraints_,\n+    const String & comment,\n     ContextPtr context_)\n     : IStorage(table_id_)\n     , WithContext(context_->getGlobalContext())\n@@ -61,6 +62,7 @@ StorageMySQL::StorageMySQL(\n     StorageInMemoryMetadata storage_metadata;\n     storage_metadata.setColumns(columns_);\n     storage_metadata.setConstraints(constraints_);\n+    storage_metadata.setComment(comment);\n     setInMemoryMetadata(storage_metadata);\n }\n \n@@ -272,6 +274,7 @@ void registerStorageMySQL(StorageFactory & factory)\n             on_duplicate_clause,\n             args.columns,\n             args.constraints,\n+            args.comment,\n             args.getContext());\n     },\n     {\ndiff --git a/src/Storages/StorageMySQL.h b/src/Storages/StorageMySQL.h\nindex a68c06c1abed..a7aca48197e1 100644\n--- a/src/Storages/StorageMySQL.h\n+++ b/src/Storages/StorageMySQL.h\n@@ -32,6 +32,7 @@ class StorageMySQL final : public ext::shared_ptr_helper<StorageMySQL>, public I\n         const std::string & on_duplicate_clause_,\n         const ColumnsDescription & columns_,\n         const ConstraintsDescription & constraints_,\n+        const String & comment,\n         ContextPtr context_);\n \n     std::string getName() const override { return \"MySQL\"; }\ndiff --git a/src/Storages/StorageNull.cpp b/src/Storages/StorageNull.cpp\nindex 6c8a21db571b..85f0daf3fa80 100644\n--- a/src/Storages/StorageNull.cpp\n+++ b/src/Storages/StorageNull.cpp\n@@ -29,7 +29,7 @@ void registerStorageNull(StorageFactory & factory)\n                 \"Engine \" + args.engine_name + \" doesn't support any arguments (\" + toString(args.engine_args.size()) + \" given)\",\n                 ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH);\n \n-        return StorageNull::create(args.table_id, args.columns, args.constraints);\n+        return StorageNull::create(args.table_id, args.columns, args.constraints, args.comment);\n     },\n     {\n         .supports_parallel_insert = true,\ndiff --git a/src/Storages/StorageNull.h b/src/Storages/StorageNull.h\nindex 7fe65eb25dc0..85fae2cc4708 100644\n--- a/src/Storages/StorageNull.h\n+++ b/src/Storages/StorageNull.h\n@@ -57,12 +57,14 @@ class StorageNull final : public ext::shared_ptr_helper<StorageNull>, public ISt\n private:\n \n protected:\n-    StorageNull(const StorageID & table_id_, ColumnsDescription columns_description_, ConstraintsDescription constraints_)\n+    StorageNull(\n+        const StorageID & table_id_, ColumnsDescription columns_description_, ConstraintsDescription constraints_, const String & comment)\n         : IStorage(table_id_)\n     {\n         StorageInMemoryMetadata metadata_;\n         metadata_.setColumns(columns_description_);\n         metadata_.setConstraints(constraints_);\n+        metadata_.setComment(comment);\n         setInMemoryMetadata(metadata_);\n     }\n };\ndiff --git a/src/Storages/StoragePostgreSQL.cpp b/src/Storages/StoragePostgreSQL.cpp\nindex 81c451d08dff..1d863a43b29e 100644\n--- a/src/Storages/StoragePostgreSQL.cpp\n+++ b/src/Storages/StoragePostgreSQL.cpp\n@@ -45,6 +45,7 @@ StoragePostgreSQL::StoragePostgreSQL(\n     const String & remote_table_name_,\n     const ColumnsDescription & columns_,\n     const ConstraintsDescription & constraints_,\n+    const String & comment,\n     ContextPtr context_,\n     const String & remote_table_schema_)\n     : IStorage(table_id_)\n@@ -56,6 +57,7 @@ StoragePostgreSQL::StoragePostgreSQL(\n     StorageInMemoryMetadata storage_metadata;\n     storage_metadata.setColumns(columns_);\n     storage_metadata.setConstraints(constraints_);\n+    storage_metadata.setComment(comment);\n     setInMemoryMetadata(storage_metadata);\n }\n \n@@ -328,8 +330,14 @@ void registerStoragePostgreSQL(StorageFactory & factory)\n             args.getContext()->getSettingsRef().postgresql_connection_pool_wait_timeout);\n \n         return StoragePostgreSQL::create(\n-            args.table_id, std::move(pool), remote_table,\n-            args.columns, args.constraints, args.getContext(), remote_table_schema);\n+            args.table_id,\n+            std::move(pool),\n+            remote_table,\n+            args.columns,\n+            args.constraints,\n+            args.comment,\n+            args.getContext(),\n+            remote_table_schema);\n     },\n     {\n         .source_access_type = AccessType::POSTGRES,\ndiff --git a/src/Storages/StoragePostgreSQL.h b/src/Storages/StoragePostgreSQL.h\nindex bb7cce28e5b3..76e10bebf677 100644\n--- a/src/Storages/StoragePostgreSQL.h\n+++ b/src/Storages/StoragePostgreSQL.h\n@@ -26,6 +26,7 @@ class StoragePostgreSQL final : public ext::shared_ptr_helper<StoragePostgreSQL>\n         const String & remote_table_name_,\n         const ColumnsDescription & columns_,\n         const ConstraintsDescription & constraints_,\n+        const String & comment,\n         ContextPtr context_,\n         const std::string & remote_table_schema_ = \"\");\n \ndiff --git a/src/Storages/StorageS3.cpp b/src/Storages/StorageS3.cpp\nindex 2e7d43a03bf4..36d078e7bf30 100644\n--- a/src/Storages/StorageS3.cpp\n+++ b/src/Storages/StorageS3.cpp\n@@ -330,6 +330,7 @@ StorageS3::StorageS3(\n     UInt64 max_connections_,\n     const ColumnsDescription & columns_,\n     const ConstraintsDescription & constraints_,\n+    const String & comment,\n     ContextPtr context_,\n     const String & compression_method_,\n     bool distributed_processing_)\n@@ -347,6 +348,7 @@ StorageS3::StorageS3(\n     StorageInMemoryMetadata storage_metadata;\n     storage_metadata.setColumns(columns_);\n     storage_metadata.setConstraints(constraints_);\n+    storage_metadata.setComment(comment);\n     setInMemoryMetadata(storage_metadata);\n     updateClientAndAuthSettings(context_, client_auth);\n }\n@@ -520,9 +522,9 @@ void registerStorageS3Impl(const String & name, StorageFactory & factory)\n             max_connections,\n             args.columns,\n             args.constraints,\n+            args.comment,\n             args.getContext(),\n-            compression_method\n-        );\n+            compression_method);\n     },\n     {\n         .source_access_type = AccessType::S3,\ndiff --git a/src/Storages/StorageS3.h b/src/Storages/StorageS3.h\nindex b068f82cfb1a..694dec4c0dc7 100644\n--- a/src/Storages/StorageS3.h\n+++ b/src/Storages/StorageS3.h\n@@ -97,7 +97,8 @@ class StorageS3Source : public SourceWithProgress, WithContext\n class StorageS3 : public ext::shared_ptr_helper<StorageS3>, public IStorage, WithContext\n {\n public:\n-    StorageS3(const S3::URI & uri,\n+    StorageS3(\n+        const S3::URI & uri,\n         const String & access_key_id,\n         const String & secret_access_key,\n         const StorageID & table_id_,\n@@ -108,6 +109,7 @@ class StorageS3 : public ext::shared_ptr_helper<StorageS3>, public IStorage, Wit\n         UInt64 max_connections_,\n         const ColumnsDescription & columns_,\n         const ConstraintsDescription & constraints_,\n+        const String & comment,\n         ContextPtr context_,\n         const String & compression_method_ = \"\",\n         bool distributed_processing_ = false);\ndiff --git a/src/Storages/StorageS3Cluster.cpp b/src/Storages/StorageS3Cluster.cpp\nindex df5b655bf4ec..8a320190036b 100644\n--- a/src/Storages/StorageS3Cluster.cpp\n+++ b/src/Storages/StorageS3Cluster.cpp\n@@ -51,8 +51,6 @@\n \n namespace DB\n {\n-\n-\n StorageS3Cluster::StorageS3Cluster(\n     const String & filename_,\n     const String & access_key_id_,\ndiff --git a/src/Storages/StorageS3Cluster.h b/src/Storages/StorageS3Cluster.h\nindex b2c8d4a086cc..a2d7c63e7b6f 100644\n--- a/src/Storages/StorageS3Cluster.h\n+++ b/src/Storages/StorageS3Cluster.h\n@@ -43,9 +43,17 @@ class StorageS3Cluster : public ext::shared_ptr_helper<StorageS3Cluster>, public\n \n protected:\n     StorageS3Cluster(\n-        const String & filename_, const String & access_key_id_, const String & secret_access_key_, const StorageID & table_id_,\n-        String cluster_name_, const String & format_name_, UInt64 max_connections_, const ColumnsDescription & columns_,\n-        const ConstraintsDescription & constraints_, ContextPtr context_, const String & compression_method_);\n+        const String & filename_,\n+        const String & access_key_id_,\n+        const String & secret_access_key_,\n+        const StorageID & table_id_,\n+        String cluster_name_,\n+        const String & format_name_,\n+        UInt64 max_connections_,\n+        const ColumnsDescription & columns_,\n+        const ConstraintsDescription & constraints_,\n+        ContextPtr context_,\n+        const String & compression_method_);\n \n private:\n     /// Connections from initiator to other nodes\ndiff --git a/src/Storages/StorageSet.cpp b/src/Storages/StorageSet.cpp\nindex 34bbfed874fc..f585a5747b81 100644\n--- a/src/Storages/StorageSet.cpp\n+++ b/src/Storages/StorageSet.cpp\n@@ -112,14 +112,14 @@ StorageSetOrJoinBase::StorageSetOrJoinBase(\n     const StorageID & table_id_,\n     const ColumnsDescription & columns_,\n     const ConstraintsDescription & constraints_,\n+    const String & comment,\n     bool persistent_)\n-    : IStorage(table_id_),\n-    disk(disk_),\n-    persistent(persistent_)\n+    : IStorage(table_id_), disk(disk_), persistent(persistent_)\n {\n     StorageInMemoryMetadata storage_metadata;\n     storage_metadata.setColumns(columns_);\n     storage_metadata.setConstraints(constraints_);\n+    storage_metadata.setComment(comment);\n     setInMemoryMetadata(storage_metadata);\n \n \n@@ -136,9 +136,10 @@ StorageSet::StorageSet(\n     const StorageID & table_id_,\n     const ColumnsDescription & columns_,\n     const ConstraintsDescription & constraints_,\n+    const String & comment,\n     bool persistent_)\n-    : StorageSetOrJoinBase{disk_, relative_path_, table_id_, columns_, constraints_, persistent_},\n-    set(std::make_shared<Set>(SizeLimits(), false, true))\n+    : StorageSetOrJoinBase{disk_, relative_path_, table_id_, columns_, constraints_, comment, persistent_}\n+    , set(std::make_shared<Set>(SizeLimits(), false, true))\n {\n \n     Block header = getInMemoryMetadataPtr()->getSampleBlock();\n@@ -247,7 +248,8 @@ void registerStorageSet(StorageFactory & factory)\n             set_settings.loadFromQuery(*args.storage_def);\n \n         DiskPtr disk = args.getContext()->getDisk(set_settings.disk);\n-        return StorageSet::create(disk, args.relative_data_path, args.table_id, args.columns, args.constraints, set_settings.persistent);\n+        return StorageSet::create(\n+            disk, args.relative_data_path, args.table_id, args.columns, args.constraints, args.comment, set_settings.persistent);\n     }, StorageFactory::StorageFeatures{ .supports_settings = true, });\n }\n \ndiff --git a/src/Storages/StorageSet.h b/src/Storages/StorageSet.h\nindex b87dcf21a238..5dd497527a93 100644\n--- a/src/Storages/StorageSet.h\n+++ b/src/Storages/StorageSet.h\n@@ -35,6 +35,7 @@ class StorageSetOrJoinBase : public IStorage\n         const StorageID & table_id_,\n         const ColumnsDescription & columns_,\n         const ConstraintsDescription & constraints_,\n+        const String & comment,\n         bool persistent_);\n \n     DiskPtr disk;\n@@ -91,6 +92,7 @@ friend struct ext::shared_ptr_helper<StorageSet>;\n         const StorageID & table_id_,\n         const ColumnsDescription & columns_,\n         const ConstraintsDescription & constraints_,\n+        const String & comment,\n         bool persistent_);\n };\n \ndiff --git a/src/Storages/StorageStripeLog.cpp b/src/Storages/StorageStripeLog.cpp\nindex d845dfb71f2c..36b10dfd2bbd 100644\n--- a/src/Storages/StorageStripeLog.cpp\n+++ b/src/Storages/StorageStripeLog.cpp\n@@ -258,6 +258,7 @@ StorageStripeLog::StorageStripeLog(\n     const StorageID & table_id_,\n     const ColumnsDescription & columns_,\n     const ConstraintsDescription & constraints_,\n+    const String & comment,\n     bool attach,\n     size_t max_compress_block_size_)\n     : IStorage(table_id_)\n@@ -270,6 +271,7 @@ StorageStripeLog::StorageStripeLog(\n     StorageInMemoryMetadata storage_metadata;\n     storage_metadata.setColumns(columns_);\n     storage_metadata.setConstraints(constraints_);\n+    storage_metadata.setComment(comment);\n     setInMemoryMetadata(storage_metadata);\n \n     if (relative_path_.empty())\n@@ -410,8 +412,14 @@ void registerStorageStripeLog(StorageFactory & factory)\n         DiskPtr disk = args.getContext()->getDisk(disk_name);\n \n         return StorageStripeLog::create(\n-            disk, args.relative_data_path, args.table_id, args.columns, args.constraints,\n-            args.attach, args.getContext()->getSettings().max_compress_block_size);\n+            disk,\n+            args.relative_data_path,\n+            args.table_id,\n+            args.columns,\n+            args.constraints,\n+            args.comment,\n+            args.attach,\n+            args.getContext()->getSettings().max_compress_block_size);\n     }, features);\n }\n \ndiff --git a/src/Storages/StorageStripeLog.h b/src/Storages/StorageStripeLog.h\nindex 7fad94870dc3..21dbbd4bae8c 100644\n--- a/src/Storages/StorageStripeLog.h\n+++ b/src/Storages/StorageStripeLog.h\n@@ -52,6 +52,7 @@ class StorageStripeLog final : public ext::shared_ptr_helper<StorageStripeLog>,\n         const StorageID & table_id_,\n         const ColumnsDescription & columns_,\n         const ConstraintsDescription & constraints_,\n+        const String & comment,\n         bool attach,\n         size_t max_compress_block_size_);\n \ndiff --git a/src/Storages/StorageTinyLog.cpp b/src/Storages/StorageTinyLog.cpp\nindex 41c2961e9299..689b1307f4d7 100644\n--- a/src/Storages/StorageTinyLog.cpp\n+++ b/src/Storages/StorageTinyLog.cpp\n@@ -386,6 +386,7 @@ StorageTinyLog::StorageTinyLog(\n     const StorageID & table_id_,\n     const ColumnsDescription & columns_,\n     const ConstraintsDescription & constraints_,\n+    const String & comment,\n     bool attach,\n     size_t max_compress_block_size_)\n     : IStorage(table_id_)\n@@ -398,6 +399,7 @@ StorageTinyLog::StorageTinyLog(\n     StorageInMemoryMetadata storage_metadata;\n     storage_metadata.setColumns(columns_);\n     storage_metadata.setConstraints(constraints_);\n+    storage_metadata.setComment(comment);\n     setInMemoryMetadata(storage_metadata);\n \n     if (relative_path_.empty())\n@@ -551,8 +553,14 @@ void registerStorageTinyLog(StorageFactory & factory)\n         DiskPtr disk = args.getContext()->getDisk(disk_name);\n \n         return StorageTinyLog::create(\n-            disk, args.relative_data_path, args.table_id, args.columns, args.constraints,\n-            args.attach, args.getContext()->getSettings().max_compress_block_size);\n+            disk,\n+            args.relative_data_path,\n+            args.table_id,\n+            args.columns,\n+            args.constraints,\n+            args.comment,\n+            args.attach,\n+            args.getContext()->getSettings().max_compress_block_size);\n     }, features);\n }\n \ndiff --git a/src/Storages/StorageTinyLog.h b/src/Storages/StorageTinyLog.h\nindex 01652169b625..72cf1ce7e2e5 100644\n--- a/src/Storages/StorageTinyLog.h\n+++ b/src/Storages/StorageTinyLog.h\n@@ -52,6 +52,7 @@ class StorageTinyLog final : public ext::shared_ptr_helper<StorageTinyLog>, publ\n         const StorageID & table_id_,\n         const ColumnsDescription & columns_,\n         const ConstraintsDescription & constraints_,\n+        const String & comment,\n         bool attach,\n         size_t max_compress_block_size_);\n \ndiff --git a/src/Storages/StorageURL.cpp b/src/Storages/StorageURL.cpp\nindex 824f11648512..fd9453e632c1 100644\n--- a/src/Storages/StorageURL.cpp\n+++ b/src/Storages/StorageURL.cpp\n@@ -41,16 +41,14 @@ IStorageURLBase::IStorageURLBase(\n     const std::optional<FormatSettings> & format_settings_,\n     const ColumnsDescription & columns_,\n     const ConstraintsDescription & constraints_,\n+    const String & comment,\n     const String & compression_method_)\n-    : IStorage(table_id_)\n-    , uri(uri_)\n-    , compression_method(compression_method_)\n-    , format_name(format_name_)\n-    , format_settings(format_settings_)\n+    : IStorage(table_id_), uri(uri_), compression_method(compression_method_), format_name(format_name_), format_settings(format_settings_)\n {\n     StorageInMemoryMetadata storage_metadata;\n     storage_metadata.setColumns(columns_);\n     storage_metadata.setConstraints(constraints_);\n+    storage_metadata.setComment(comment);\n     setInMemoryMetadata(storage_metadata);\n }\n \n@@ -299,31 +297,32 @@ BlockOutputStreamPtr IStorageURLBase::write(const ASTPtr & /*query*/, const Stor\n         chooseCompressionMethod(uri.toString(), compression_method));\n }\n \n-StorageURL::StorageURL(const Poco::URI & uri_,\n-           const StorageID & table_id_,\n-           const String & format_name_,\n-           const std::optional<FormatSettings> & format_settings_,\n-           const ColumnsDescription & columns_,\n-           const ConstraintsDescription & constraints_,\n-           ContextPtr context_,\n-           const String & compression_method_)\n-    : IStorageURLBase(uri_, context_, table_id_, format_name_,\n-                      format_settings_, columns_, constraints_, compression_method_)\n+StorageURL::StorageURL(\n+    const Poco::URI & uri_,\n+    const StorageID & table_id_,\n+    const String & format_name_,\n+    const std::optional<FormatSettings> & format_settings_,\n+    const ColumnsDescription & columns_,\n+    const ConstraintsDescription & constraints_,\n+    const String & comment,\n+    ContextPtr context_,\n+    const String & compression_method_)\n+    : IStorageURLBase(uri_, context_, table_id_, format_name_, format_settings_, columns_, constraints_, comment, compression_method_)\n {\n     context_->getRemoteHostFilter().checkURL(uri);\n }\n \n \n StorageURLWithFailover::StorageURLWithFailover(\n-        const std::vector<String> & uri_options_,\n-        const StorageID & table_id_,\n-        const String & format_name_,\n-        const std::optional<FormatSettings> & format_settings_,\n-        const ColumnsDescription & columns_,\n-        const ConstraintsDescription & constraints_,\n-        ContextPtr context_,\n-        const String & compression_method_)\n-    : StorageURL(Poco::URI(), table_id_, format_name_, format_settings_, columns_, constraints_, context_, compression_method_)\n+    const std::vector<String> & uri_options_,\n+    const StorageID & table_id_,\n+    const String & format_name_,\n+    const std::optional<FormatSettings> & format_settings_,\n+    const ColumnsDescription & columns_,\n+    const ConstraintsDescription & constraints_,\n+    ContextPtr context_,\n+    const String & compression_method_)\n+    : StorageURL(Poco::URI(), table_id_, format_name_, format_settings_, columns_, constraints_, String{}, context_, compression_method_)\n {\n     for (const auto & uri_option : uri_options_)\n     {\n@@ -404,7 +403,10 @@ void registerStorageURL(StorageFactory & factory)\n             args.table_id,\n             format_name,\n             format_settings,\n-            args.columns, args.constraints, args.getContext(),\n+            args.columns,\n+            args.constraints,\n+            args.comment,\n+            args.getContext(),\n             compression_method);\n     },\n     {\ndiff --git a/src/Storages/StorageURL.h b/src/Storages/StorageURL.h\nindex 012915c9b24f..e1aa1735936b 100644\n--- a/src/Storages/StorageURL.h\n+++ b/src/Storages/StorageURL.h\n@@ -43,6 +43,7 @@ class IStorageURLBase : public IStorage\n         const std::optional<FormatSettings> & format_settings_,\n         const ColumnsDescription & columns_,\n         const ConstraintsDescription & constraints_,\n+        const String & comment,\n         const String & compression_method_);\n \n     Poco::URI uri;\n@@ -107,14 +108,16 @@ class StorageURL : public ext::shared_ptr_helper<StorageURL>, public IStorageURL\n {\n     friend struct ext::shared_ptr_helper<StorageURL>;\n public:\n-    StorageURL(const Poco::URI & uri_,\n-            const StorageID & table_id_,\n-            const String & format_name_,\n-            const std::optional<FormatSettings> & format_settings_,\n-            const ColumnsDescription & columns_,\n-            const ConstraintsDescription & constraints_,\n-            ContextPtr context_,\n-            const String & compression_method_);\n+    StorageURL(\n+        const Poco::URI & uri_,\n+        const StorageID & table_id_,\n+        const String & format_name_,\n+        const std::optional<FormatSettings> & format_settings_,\n+        const ColumnsDescription & columns_,\n+        const ConstraintsDescription & constraints_,\n+        const String & comment,\n+        ContextPtr context_,\n+        const String & compression_method_);\n \n     String getName() const override\n     {\ndiff --git a/src/Storages/StorageView.cpp b/src/Storages/StorageView.cpp\nindex 75bd4b2967f0..a83e0f62c296 100644\n--- a/src/Storages/StorageView.cpp\n+++ b/src/Storages/StorageView.cpp\n@@ -31,13 +31,12 @@ namespace ErrorCodes\n \n \n StorageView::StorageView(\n-    const StorageID & table_id_,\n-    const ASTCreateQuery & query,\n-    const ColumnsDescription & columns_)\n+    const StorageID & table_id_, const ASTCreateQuery & query, const ColumnsDescription & columns_, const String & comment)\n     : IStorage(table_id_)\n {\n     StorageInMemoryMetadata storage_metadata;\n     storage_metadata.setColumns(columns_);\n+    storage_metadata.setComment(comment);\n \n     if (!query.select)\n         throw Exception(\"SELECT query is not specified for \" + getName(), ErrorCodes::INCORRECT_QUERY);\n@@ -173,7 +172,7 @@ void registerStorageView(StorageFactory & factory)\n         if (args.query.storage)\n             throw Exception(\"Specifying ENGINE is not allowed for a View\", ErrorCodes::INCORRECT_QUERY);\n \n-        return StorageView::create(args.table_id, args.query, args.columns);\n+        return StorageView::create(args.table_id, args.query, args.columns, args.comment);\n     });\n }\n \ndiff --git a/src/Storages/StorageView.h b/src/Storages/StorageView.h\nindex fa11472218de..b5b8ae2dd8e6 100644\n--- a/src/Storages/StorageView.h\n+++ b/src/Storages/StorageView.h\n@@ -49,10 +49,7 @@ class StorageView final : public ext::shared_ptr_helper<StorageView>, public ISt\n     static ASTPtr restoreViewName(ASTSelectQuery & select_query, const ASTPtr & view_name);\n \n protected:\n-    StorageView(\n-        const StorageID & table_id_,\n-        const ASTCreateQuery & query,\n-        const ColumnsDescription & columns_);\n+    StorageView(const StorageID & table_id_, const ASTCreateQuery & query, const ColumnsDescription & columns_, const String & comment);\n };\n \n }\ndiff --git a/src/Storages/StorageXDBC.cpp b/src/Storages/StorageXDBC.cpp\nindex f94696c716b7..88d546698893 100644\n--- a/src/Storages/StorageXDBC.cpp\n+++ b/src/Storages/StorageXDBC.cpp\n@@ -30,17 +30,20 @@ StorageXDBC::StorageXDBC(\n     const std::string & remote_database_name_,\n     const std::string & remote_table_name_,\n     const ColumnsDescription & columns_,\n+    const String & comment,\n     ContextPtr context_,\n     const BridgeHelperPtr bridge_helper_)\n     /// Please add support for constraints as soon as StorageODBC or JDBC will support insertion.\n-    : IStorageURLBase(Poco::URI(),\n-                      context_,\n-                      table_id_,\n-                      IXDBCBridgeHelper::DEFAULT_FORMAT,\n-                      getFormatSettings(context_),\n-                      columns_,\n-                      ConstraintsDescription{},\n-                      \"\" /* CompressionMethod */)\n+    : IStorageURLBase(\n+        Poco::URI(),\n+        context_,\n+        table_id_,\n+        IXDBCBridgeHelper::DEFAULT_FORMAT,\n+        getFormatSettings(context_),\n+        columns_,\n+        ConstraintsDescription{},\n+        comment,\n+        \"\" /* CompressionMethod */)\n     , bridge_helper(bridge_helper_)\n     , remote_database_name(remote_database_name_)\n     , remote_table_name(remote_table_name_)\n@@ -167,10 +170,12 @@ namespace\n             BridgeHelperPtr bridge_helper = std::make_shared<XDBCBridgeHelper<BridgeHelperMixin>>(args.getContext(),\n                 args.getContext()->getSettingsRef().http_receive_timeout.value,\n                 engine_args[0]->as<ASTLiteral &>().value.safeGet<String>());\n-            return std::make_shared<StorageXDBC>(args.table_id,\n+            return std::make_shared<StorageXDBC>(\n+                args.table_id,\n                 engine_args[1]->as<ASTLiteral &>().value.safeGet<String>(),\n                 engine_args[2]->as<ASTLiteral &>().value.safeGet<String>(),\n                 args.columns,\n+                args.comment,\n                 args.getContext(),\n                 bridge_helper);\n \ndiff --git a/src/Storages/StorageXDBC.h b/src/Storages/StorageXDBC.h\nindex 064912fda925..db0b506546d3 100644\n--- a/src/Storages/StorageXDBC.h\n+++ b/src/Storages/StorageXDBC.h\n@@ -29,6 +29,7 @@ class StorageXDBC : public IStorageURLBase\n         const std::string & remote_database_name,\n         const std::string & remote_table_name,\n         const ColumnsDescription & columns_,\n+        const String & comment,\n         ContextPtr context_,\n         BridgeHelperPtr bridge_helper_);\n \ndiff --git a/src/Storages/System/StorageSystemTables.cpp b/src/Storages/System/StorageSystemTables.cpp\nindex 783bc50749c6..1d38ca6ebbb8 100644\n--- a/src/Storages/System/StorageSystemTables.cpp\n+++ b/src/Storages/System/StorageSystemTables.cpp\n@@ -34,8 +34,7 @@ StorageSystemTables::StorageSystemTables(const StorageID & table_id_)\n     : IStorage(table_id_)\n {\n     StorageInMemoryMetadata storage_metadata;\n-    storage_metadata.setColumns(ColumnsDescription(\n-    {\n+    storage_metadata.setColumns(ColumnsDescription({\n         {\"database\", std::make_shared<DataTypeString>()},\n         {\"name\", std::make_shared<DataTypeString>()},\n         {\"uuid\", std::make_shared<DataTypeUUID>()},\n@@ -57,6 +56,7 @@ StorageSystemTables::StorageSystemTables(const StorageID & table_id_)\n         {\"total_bytes\", std::make_shared<DataTypeNullable>(std::make_shared<DataTypeUInt64>())},\n         {\"lifetime_rows\", std::make_shared<DataTypeNullable>(std::make_shared<DataTypeUInt64>())},\n         {\"lifetime_bytes\", std::make_shared<DataTypeNullable>(std::make_shared<DataTypeUInt64>())},\n+        {\"comment\", std::make_shared<DataTypeString>()},\n     }));\n     setInMemoryMetadata(storage_metadata);\n }\n@@ -244,6 +244,10 @@ class TablesBlockSource : public SourceWithProgress\n                         // lifetime_bytes\n                         if (columns_mask[src_index++])\n                             res_columns[res_index++]->insertDefault();\n+\n+                        // comment\n+                        if (columns_mask[src_index++])\n+                            res_columns[res_index++]->insertDefault();\n                     }\n                 }\n \n@@ -471,6 +475,14 @@ class TablesBlockSource : public SourceWithProgress\n                     else\n                         res_columns[res_index++]->insertDefault();\n                 }\n+\n+                if (columns_mask[src_index++])\n+                {\n+                    if (metadata_snapshot)\n+                        res_columns[res_index++]->insert(metadata_snapshot->comment);\n+                    else\n+                        res_columns[res_index++]->insertDefault();\n+                }\n             }\n         }\n \ndiff --git a/src/TableFunctions/ITableFunctionXDBC.cpp b/src/TableFunctions/ITableFunctionXDBC.cpp\nindex 51431a1e3a66..9aa099c13339 100644\n--- a/src/TableFunctions/ITableFunctionXDBC.cpp\n+++ b/src/TableFunctions/ITableFunctionXDBC.cpp\n@@ -95,7 +95,8 @@ StoragePtr ITableFunctionXDBC::executeImpl(const ASTPtr & /*ast_function*/, Cont\n {\n     startBridgeIfNot(context);\n     auto columns = getActualTableStructure(context);\n-    auto result = std::make_shared<StorageXDBC>(StorageID(getDatabaseName(), table_name), schema_name, remote_table_name, columns, context, helper);\n+    auto result = std::make_shared<StorageXDBC>(\n+        StorageID(getDatabaseName(), table_name), schema_name, remote_table_name, columns, String{}, context, helper);\n     result->startup();\n     return result;\n }\ndiff --git a/src/TableFunctions/TableFunctionDictionary.cpp b/src/TableFunctions/TableFunctionDictionary.cpp\nindex 268f49b912e6..0eb3c286be0b 100644\n--- a/src/TableFunctions/TableFunctionDictionary.cpp\n+++ b/src/TableFunctions/TableFunctionDictionary.cpp\n@@ -54,11 +54,7 @@ StoragePtr TableFunctionDictionary::executeImpl(\n     auto dictionary_table_structure = getActualTableStructure(context);\n \n     auto result = StorageDictionary::create(\n-        dict_id,\n-        dictionary_name,\n-        std::move(dictionary_table_structure),\n-        StorageDictionary::Location::Custom,\n-        context);\n+        dict_id, dictionary_name, std::move(dictionary_table_structure), String{}, StorageDictionary::Location::Custom, context);\n \n     return result;\n }\ndiff --git a/src/TableFunctions/TableFunctionFile.cpp b/src/TableFunctions/TableFunctionFile.cpp\nindex 6ecb5606d56d..f732e160751e 100644\n--- a/src/TableFunctions/TableFunctionFile.cpp\n+++ b/src/TableFunctions/TableFunctionFile.cpp\n@@ -17,8 +17,7 @@ StoragePtr TableFunctionFile::getStorage(const String & source,\n {\n     // For `file` table function, we are going to use format settings from the\n     // query context.\n-    StorageFile::CommonArguments args\n-    {\n+    StorageFile::CommonArguments args{\n         WithContext(global_context),\n         StorageID(getDatabaseName(), table_name),\n         format_,\n@@ -26,6 +25,7 @@ StoragePtr TableFunctionFile::getStorage(const String & source,\n         compression_method_,\n         columns,\n         ConstraintsDescription{},\n+        String{},\n     };\n \n     return StorageFile::create(source, global_context->getUserFilesPath(), args);\ndiff --git a/src/TableFunctions/TableFunctionGenerateRandom.cpp b/src/TableFunctions/TableFunctionGenerateRandom.cpp\nindex b19be7bd7a30..ff9630eabd8c 100644\n--- a/src/TableFunctions/TableFunctionGenerateRandom.cpp\n+++ b/src/TableFunctions/TableFunctionGenerateRandom.cpp\n@@ -82,7 +82,8 @@ ColumnsDescription TableFunctionGenerateRandom::getActualTableStructure(ContextP\n StoragePtr TableFunctionGenerateRandom::executeImpl(const ASTPtr & /*ast_function*/, ContextPtr context, const std::string & table_name, ColumnsDescription /*cached_columns*/) const\n {\n     auto columns = getActualTableStructure(context);\n-    auto res = StorageGenerateRandom::create(StorageID(getDatabaseName(), table_name), columns, max_array_length, max_string_length, random_seed);\n+    auto res = StorageGenerateRandom::create(\n+        StorageID(getDatabaseName(), table_name), columns, String{}, max_array_length, max_string_length, random_seed);\n     res->startup();\n     return res;\n }\ndiff --git a/src/TableFunctions/TableFunctionHDFS.cpp b/src/TableFunctions/TableFunctionHDFS.cpp\nindex 714c6ea1f59c..245674b0e06b 100644\n--- a/src/TableFunctions/TableFunctionHDFS.cpp\n+++ b/src/TableFunctions/TableFunctionHDFS.cpp\n@@ -19,6 +19,7 @@ StoragePtr TableFunctionHDFS::getStorage(\n         format_,\n         columns,\n         ConstraintsDescription{},\n+        String{},\n         global_context,\n         compression_method_);\n }\ndiff --git a/src/TableFunctions/TableFunctionMerge.cpp b/src/TableFunctions/TableFunctionMerge.cpp\nindex 6d10b0d04b61..051aa38398ff 100644\n--- a/src/TableFunctions/TableFunctionMerge.cpp\n+++ b/src/TableFunctions/TableFunctionMerge.cpp\n@@ -109,6 +109,7 @@ StoragePtr TableFunctionMerge::executeImpl(const ASTPtr & /*ast_function*/, Cont\n     auto res = StorageMerge::create(\n         StorageID(getDatabaseName(), table_name),\n         getActualTableStructure(context),\n+        String{},\n         source_database,\n         getSourceTables(context),\n         context);\ndiff --git a/src/TableFunctions/TableFunctionMySQL.cpp b/src/TableFunctions/TableFunctionMySQL.cpp\nindex 7d3fca58451a..325b2dc44c6b 100644\n--- a/src/TableFunctions/TableFunctionMySQL.cpp\n+++ b/src/TableFunctions/TableFunctionMySQL.cpp\n@@ -106,6 +106,7 @@ StoragePtr TableFunctionMySQL::executeImpl(\n         on_duplicate_clause,\n         columns,\n         ConstraintsDescription{},\n+        String{},\n         context);\n \n     pool.reset();\ndiff --git a/src/TableFunctions/TableFunctionNull.cpp b/src/TableFunctions/TableFunctionNull.cpp\nindex 334d7c3dcbd4..63e496ecd0c0 100644\n--- a/src/TableFunctions/TableFunctionNull.cpp\n+++ b/src/TableFunctions/TableFunctionNull.cpp\n@@ -38,7 +38,7 @@ ColumnsDescription TableFunctionNull::getActualTableStructure(ContextPtr context\n StoragePtr TableFunctionNull::executeImpl(const ASTPtr & /*ast_function*/, ContextPtr context, const std::string & table_name, ColumnsDescription /*cached_columns*/) const\n {\n     auto columns = getActualTableStructure(context);\n-    auto res = StorageNull::create(StorageID(getDatabaseName(), table_name), columns, ConstraintsDescription());\n+    auto res = StorageNull::create(StorageID(getDatabaseName(), table_name), columns, ConstraintsDescription(), String{});\n     res->startup();\n     return res;\n }\ndiff --git a/src/TableFunctions/TableFunctionPostgreSQL.cpp b/src/TableFunctions/TableFunctionPostgreSQL.cpp\nindex 47d0c0168867..6c3d77f226eb 100644\n--- a/src/TableFunctions/TableFunctionPostgreSQL.cpp\n+++ b/src/TableFunctions/TableFunctionPostgreSQL.cpp\n@@ -30,8 +30,14 @@ StoragePtr TableFunctionPostgreSQL::executeImpl(const ASTPtr & /*ast_function*/,\n {\n     auto columns = getActualTableStructure(context);\n     auto result = std::make_shared<StoragePostgreSQL>(\n-            StorageID(getDatabaseName(), table_name), connection_pool, remote_table_name,\n-            columns, ConstraintsDescription{}, context, remote_table_schema);\n+        StorageID(getDatabaseName(), table_name),\n+        connection_pool,\n+        remote_table_name,\n+        columns,\n+        ConstraintsDescription{},\n+        String{},\n+        context,\n+        remote_table_schema);\n \n     result->startup();\n     return result;\ndiff --git a/src/TableFunctions/TableFunctionRemote.cpp b/src/TableFunctions/TableFunctionRemote.cpp\nindex ab2458b64f4b..8539705a2d28 100644\n--- a/src/TableFunctions/TableFunctionRemote.cpp\n+++ b/src/TableFunctions/TableFunctionRemote.cpp\n@@ -240,6 +240,7 @@ StoragePtr TableFunctionRemote::executeImpl(const ASTPtr & /*ast_function*/, Con\n             StorageID(getDatabaseName(), table_name),\n             cached_columns,\n             ConstraintsDescription{},\n+            String{},\n             remote_table_id.database_name,\n             remote_table_id.table_name,\n             String{},\ndiff --git a/src/TableFunctions/TableFunctionS3.cpp b/src/TableFunctions/TableFunctionS3.cpp\nindex 973899d21019..1eddbf69b7c9 100644\n--- a/src/TableFunctions/TableFunctionS3.cpp\n+++ b/src/TableFunctions/TableFunctionS3.cpp\n@@ -89,19 +89,20 @@ StoragePtr TableFunctionS3::executeImpl(const ASTPtr & /*ast_function*/, Context\n     UInt64 max_connections = context->getSettingsRef().s3_max_connections;\n \n     StoragePtr storage = StorageS3::create(\n-            s3_uri,\n-            access_key_id,\n-            secret_access_key,\n-            StorageID(getDatabaseName(), table_name),\n-            format,\n-            s3_max_single_read_retries,\n-            min_upload_part_size,\n-            max_single_part_upload_size,\n-            max_connections,\n-            getActualTableStructure(context),\n-            ConstraintsDescription{},\n-            context,\n-            compression_method);\n+        s3_uri,\n+        access_key_id,\n+        secret_access_key,\n+        StorageID(getDatabaseName(), table_name),\n+        format,\n+        s3_max_single_read_retries,\n+        min_upload_part_size,\n+        max_single_part_upload_size,\n+        max_connections,\n+        getActualTableStructure(context),\n+        ConstraintsDescription{},\n+        String{},\n+        context,\n+        compression_method);\n \n     storage->startup();\n \ndiff --git a/src/TableFunctions/TableFunctionS3Cluster.cpp b/src/TableFunctions/TableFunctionS3Cluster.cpp\nindex 16f48c706089..7b0d50a6a0ab 100644\n--- a/src/TableFunctions/TableFunctionS3Cluster.cpp\n+++ b/src/TableFunctions/TableFunctionS3Cluster.cpp\n@@ -114,14 +114,21 @@ StoragePtr TableFunctionS3Cluster::executeImpl(\n         UInt64 max_single_part_upload_size = context->getSettingsRef().s3_max_single_part_upload_size;\n         UInt64 max_connections = context->getSettingsRef().s3_max_connections;\n         storage = StorageS3::create(\n-            s3_uri, access_key_id, secret_access_key, StorageID(getDatabaseName(), table_name),\n+            s3_uri,\n+            access_key_id,\n+            secret_access_key,\n+            StorageID(getDatabaseName(), table_name),\n             format,\n             s3_max_single_read_retries,\n             min_upload_part_size,\n             max_single_part_upload_size,\n             max_connections,\n-            getActualTableStructure(context), ConstraintsDescription{},\n-            context, compression_method, /*distributed_processing=*/true);\n+            getActualTableStructure(context),\n+            ConstraintsDescription{},\n+            String{},\n+            context,\n+            compression_method,\n+            /*distributed_processing=*/true);\n     }\n     else\n     {\ndiff --git a/src/TableFunctions/TableFunctionURL.cpp b/src/TableFunctions/TableFunctionURL.cpp\nindex c2acb3ee207e..a1fe142bea68 100644\n--- a/src/TableFunctions/TableFunctionURL.cpp\n+++ b/src/TableFunctions/TableFunctionURL.cpp\n@@ -20,9 +20,16 @@ StoragePtr TableFunctionURL::getStorage(\n     if ((source.find('{') == std::string::npos || source.find('}') == std::string::npos) && source.find('|') == std::string::npos)\n     {\n         Poco::URI uri(source);\n-        return StorageURL::create(uri, StorageID(getDatabaseName(), table_name),\n-            format_, std::nullopt /*format settings*/, columns,\n-            ConstraintsDescription{}, global_context, compression_method_);\n+        return StorageURL::create(\n+            uri,\n+            StorageID(getDatabaseName(), table_name),\n+            format_,\n+            std::nullopt /*format settings*/,\n+            columns,\n+            ConstraintsDescription{},\n+            String{},\n+            global_context,\n+            compression_method_);\n     }\n     else\n     {\ndiff --git a/src/TableFunctions/TableFunctionView.cpp b/src/TableFunctions/TableFunctionView.cpp\nindex 3f51e0bbc950..8ca061c43d55 100644\n--- a/src/TableFunctions/TableFunctionView.cpp\n+++ b/src/TableFunctions/TableFunctionView.cpp\n@@ -42,7 +42,7 @@ StoragePtr TableFunctionView::executeImpl(\n     const ASTPtr & /*ast_function*/, ContextPtr context, const std::string & table_name, ColumnsDescription /*cached_columns*/) const\n {\n     auto columns = getActualTableStructure(context);\n-    auto res = StorageView::create(StorageID(getDatabaseName(), table_name), create, columns);\n+    auto res = StorageView::create(StorageID(getDatabaseName(), table_name), create, columns, String{});\n     res->startup();\n     return res;\n }\n",
  "test_patch": "diff --git a/src/Storages/tests/gtest_storage_log.cpp b/src/Storages/tests/gtest_storage_log.cpp\nindex a4886de434cc..e18e4b40ac9c 100644\n--- a/src/Storages/tests/gtest_storage_log.cpp\n+++ b/src/Storages/tests/gtest_storage_log.cpp\n@@ -33,7 +33,7 @@ DB::StoragePtr createStorage(DB::DiskPtr & disk)\n     names_and_types.emplace_back(\"a\", std::make_shared<DataTypeUInt64>());\n \n     StoragePtr table = StorageLog::create(\n-        disk, \"table/\", StorageID(\"test\", \"test\"), ColumnsDescription{names_and_types}, ConstraintsDescription{}, false, 1048576);\n+        disk, \"table/\", StorageID(\"test\", \"test\"), ColumnsDescription{names_and_types}, ConstraintsDescription{}, String{}, false, 1048576);\n \n     table->startup();\n \ndiff --git a/src/Storages/tests/gtest_transform_query_for_external_database.cpp b/src/Storages/tests/gtest_transform_query_for_external_database.cpp\nindex d774fd144cfa..6735206862d6 100644\n--- a/src/Storages/tests/gtest_transform_query_for_external_database.cpp\n+++ b/src/Storages/tests/gtest_transform_query_for_external_database.cpp\n@@ -85,7 +85,8 @@ struct State\n             const auto & db_name = tab.table.database;\n             database->attachTable(\n                 table_name,\n-                StorageMemory::create(StorageID(db_name, table_name), ColumnsDescription{getColumns()}, ConstraintsDescription{}));\n+                StorageMemory::create(\n+                    StorageID(db_name, table_name), ColumnsDescription{getColumns()}, ConstraintsDescription{}, String{}));\n         }\n         DatabaseCatalog::instance().attachDatabase(database->getDatabaseName(), database);\n         context->setCurrentDatabase(\"test\");\ndiff --git a/tests/queries/0_stateless/01821_table_comment.reference b/tests/queries/0_stateless/01821_table_comment.reference\nnew file mode 100644\nindex 000000000000..05acabae3d45\n--- /dev/null\n+++ b/tests/queries/0_stateless/01821_table_comment.reference\n@@ -0,0 +1,4 @@\n+t1\tthis is a temtorary table\n+t2\tthis is a MergeTree table\n+t3\tthis is a Log table\n+CREATE TABLE default.t1\\n(\\n    `n` Int8\\n)\\nENGINE = Memory\\nCOMMENT \\'this is a temtorary table\\'\ndiff --git a/tests/queries/0_stateless/01821_table_comment.sql b/tests/queries/0_stateless/01821_table_comment.sql\nnew file mode 100644\nindex 000000000000..c09f121459c1\n--- /dev/null\n+++ b/tests/queries/0_stateless/01821_table_comment.sql\n@@ -0,0 +1,37 @@\n+DROP TABLE IF EXISTS t1;\n+DROP TABLE IF EXISTS t2;\n+DROP TABLE IF EXISTS t3;\n+\n+CREATE TABLE t1\n+(\n+    `n` Int8\n+)\n+ENGINE = Memory\n+COMMENT 'this is a temtorary table';\n+\n+CREATE TABLE t2\n+(\n+    `n` Int8\n+)\n+ENGINE = MergeTree\n+ORDER BY n\n+COMMENT 'this is a MergeTree table';\n+\n+CREATE TABLE t3\n+(\n+    `n` Int8\n+)\n+ENGINE = Log\n+COMMENT 'this is a Log table';\n+\n+SELECT\n+    name,\n+    comment\n+FROM system.tables\n+WHERE name IN ('t1', 't2', 't3') order by name;\n+\n+SHOW CREATE TABLE t1;\n+\n+DROP TABLE t1;\n+DROP TABLE t2;\n+DROP TABLE t3;\ndiff --git a/tests/queries/skip_list.json b/tests/queries/skip_list.json\nindex ce1cfe5f6899..f6f44baeacaa 100644\n--- a/tests/queries/skip_list.json\n+++ b/tests/queries/skip_list.json\n@@ -718,6 +718,7 @@\n         \"01802_test_postgresql_protocol_with_row_policy\", /// Creates database and users\n         \"01804_dictionary_decimal256_type\",\n         \"01850_dist_INSERT_preserve_error\", // uses cluster with different static databases shard_0/shard_1\n+        \"01821_table_comment\",\n         \"01710_projection_fetch\"\n     ]\n }\n",
  "problem_statement": "how to set table comment\nI can not set table comment in clickhouse like in myql:\r\n```\r\nENGINE=InnoDB DEFAULT CHARSET=utf8mb4\r\nCOMMENT '\u6807\u7b7e\u9879\u8840\u7f18\u4f9d\u8d56\u8868';\r\n```\r\n\r\nIs there any document about table comment syntax, I can not find any by myself. thx.\n",
  "hints_text": "There are only column comments. Table comments are not implemented.",
  "created_at": "2021-04-23T12:19:32Z",
  "modified_files": [
    "src/Databases/MySQL/DatabaseConnectionMySQL.cpp",
    "src/Databases/PostgreSQL/DatabasePostgreSQL.cpp",
    "src/Interpreters/DatabaseCatalog.cpp",
    "src/Parsers/ASTCreateQuery.cpp",
    "src/Parsers/ASTCreateQuery.h",
    "src/Parsers/ParserCreateQuery.cpp",
    "src/Storages/HDFS/StorageHDFS.cpp",
    "src/Storages/HDFS/StorageHDFS.h",
    "src/Storages/MergeTree/registerStorageMergeTree.cpp",
    "src/Storages/StorageBuffer.cpp",
    "src/Storages/StorageBuffer.h",
    "src/Storages/StorageDictionary.cpp",
    "src/Storages/StorageDictionary.h",
    "src/Storages/StorageDistributed.cpp",
    "src/Storages/StorageDistributed.h",
    "src/Storages/StorageExternalDistributed.cpp",
    "src/Storages/StorageExternalDistributed.h",
    "src/Storages/StorageFactory.cpp",
    "src/Storages/StorageFactory.h",
    "src/Storages/StorageFile.cpp",
    "src/Storages/StorageFile.h",
    "src/Storages/StorageGenerateRandom.cpp",
    "src/Storages/StorageGenerateRandom.h",
    "src/Storages/StorageInMemoryMetadata.cpp",
    "src/Storages/StorageInMemoryMetadata.h",
    "src/Storages/StorageJoin.cpp",
    "src/Storages/StorageJoin.h",
    "src/Storages/StorageLog.cpp",
    "src/Storages/StorageLog.h",
    "src/Storages/StorageMemory.cpp",
    "src/Storages/StorageMemory.h",
    "src/Storages/StorageMerge.cpp",
    "src/Storages/StorageMerge.h",
    "src/Storages/StorageMongoDB.cpp",
    "src/Storages/StorageMongoDB.h",
    "src/Storages/StorageMySQL.cpp",
    "src/Storages/StorageMySQL.h",
    "src/Storages/StorageNull.cpp",
    "src/Storages/StorageNull.h",
    "src/Storages/StoragePostgreSQL.cpp",
    "src/Storages/StoragePostgreSQL.h",
    "src/Storages/StorageS3.cpp",
    "src/Storages/StorageS3.h",
    "src/Storages/StorageS3Cluster.cpp",
    "src/Storages/StorageS3Cluster.h",
    "src/Storages/StorageSet.cpp",
    "src/Storages/StorageSet.h",
    "src/Storages/StorageStripeLog.cpp",
    "src/Storages/StorageStripeLog.h",
    "src/Storages/StorageTinyLog.cpp",
    "src/Storages/StorageTinyLog.h",
    "src/Storages/StorageURL.cpp",
    "src/Storages/StorageURL.h",
    "src/Storages/StorageView.cpp",
    "src/Storages/StorageView.h",
    "src/Storages/StorageXDBC.cpp",
    "src/Storages/StorageXDBC.h",
    "src/Storages/System/StorageSystemTables.cpp",
    "src/TableFunctions/ITableFunctionXDBC.cpp",
    "src/TableFunctions/TableFunctionDictionary.cpp",
    "src/TableFunctions/TableFunctionFile.cpp",
    "src/TableFunctions/TableFunctionGenerateRandom.cpp",
    "src/TableFunctions/TableFunctionHDFS.cpp",
    "src/TableFunctions/TableFunctionMerge.cpp",
    "src/TableFunctions/TableFunctionMySQL.cpp",
    "src/TableFunctions/TableFunctionNull.cpp",
    "src/TableFunctions/TableFunctionPostgreSQL.cpp",
    "src/TableFunctions/TableFunctionRemote.cpp",
    "src/TableFunctions/TableFunctionS3.cpp",
    "src/TableFunctions/TableFunctionS3Cluster.cpp",
    "src/TableFunctions/TableFunctionURL.cpp",
    "src/TableFunctions/TableFunctionView.cpp"
  ],
  "modified_test_files": [
    "src/Storages/tests/gtest_storage_log.cpp",
    "src/Storages/tests/gtest_transform_query_for_external_database.cpp",
    "b/tests/queries/0_stateless/01821_table_comment.reference",
    "b/tests/queries/0_stateless/01821_table_comment.sql",
    "tests/queries/skip_list.json"
  ]
}