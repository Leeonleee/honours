{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 51301,
  "instance_id": "ClickHouse__ClickHouse-51301",
  "issue_numbers": [
    "50451"
  ],
  "base_commit": "bb2801833c01d72bad1cbfaada81a412d2b17f21",
  "patch": "diff --git a/src/Interpreters/ActionsDAG.cpp b/src/Interpreters/ActionsDAG.cpp\nindex 94bdca60e691..906875dd314d 100644\n--- a/src/Interpreters/ActionsDAG.cpp\n+++ b/src/Interpreters/ActionsDAG.cpp\n@@ -1876,10 +1876,10 @@ struct ConjunctionNodes\n     ActionsDAG::NodeRawConstPtrs rejected;\n };\n \n-/// Take a node which result is predicate.\n+/// Take a node which result is a predicate.\n /// Assuming predicate is a conjunction (probably, trivial).\n /// Find separate conjunctions nodes. Split nodes into allowed and rejected sets.\n-/// Allowed predicate is a predicate which can be calculated using only nodes from allowed_nodes set.\n+/// Allowed predicate is a predicate which can be calculated using only nodes from the allowed_nodes set.\n ConjunctionNodes getConjunctionNodes(ActionsDAG::Node * predicate, std::unordered_set<const ActionsDAG::Node *> allowed_nodes)\n {\n     ConjunctionNodes conjunction;\n@@ -2113,9 +2113,9 @@ ActionsDAGPtr ActionsDAG::cloneActionsForFilterPushDown(\n     Node * predicate = const_cast<Node *>(tryFindInOutputs(filter_name));\n     if (!predicate)\n         throw Exception(ErrorCodes::LOGICAL_ERROR,\n-                \"Output nodes for ActionsDAG do not contain filter column name {}. DAG:\\n{}\",\n-                filter_name,\n-                dumpDAG());\n+            \"Output nodes for ActionsDAG do not contain filter column name {}. DAG:\\n{}\",\n+            filter_name,\n+            dumpDAG());\n \n     /// If condition is constant let's do nothing.\n     /// It means there is nothing to push down or optimization was already applied.\n@@ -2142,18 +2142,29 @@ ActionsDAGPtr ActionsDAG::cloneActionsForFilterPushDown(\n     }\n \n     auto conjunction = getConjunctionNodes(predicate, allowed_nodes);\n-    if (conjunction.rejected.size() == 1 && !conjunction.rejected.front()->result_type->equals(*predicate->result_type)\n-        && conjunction.allowed.front()->type == ActionType::COLUMN)\n-    {\n-        // No further optimization can be done\n+\n+    if (conjunction.allowed.empty())\n         return nullptr;\n+\n+    chassert(predicate->result_type);\n+\n+    if (conjunction.rejected.size() == 1)\n+    {\n+        chassert(conjunction.rejected.front()->result_type);\n+\n+        if (conjunction.allowed.front()->type == ActionType::COLUMN\n+            && !conjunction.rejected.front()->result_type->equals(*predicate->result_type))\n+        {\n+            /// No further optimization can be done\n+            return nullptr;\n+        }\n     }\n \n     auto actions = cloneActionsForConjunction(conjunction.allowed, all_inputs);\n     if (!actions)\n         return nullptr;\n \n-    /// Now, when actions are created, update current DAG.\n+    /// Now, when actions are created, update the current DAG.\n \n     if (conjunction.rejected.empty())\n     {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02791_predicate_pushdown_different_types.reference b/tests/queries/0_stateless/02791_predicate_pushdown_different_types.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/02791_predicate_pushdown_different_types.sql b/tests/queries/0_stateless/02791_predicate_pushdown_different_types.sql\nnew file mode 100644\nindex 000000000000..121ffb27e9bb\n--- /dev/null\n+++ b/tests/queries/0_stateless/02791_predicate_pushdown_different_types.sql\n@@ -0,0 +1,7 @@\n+# These queries triggered a crash in old ClickHouse versions:\n+\n+CREATE TEMPORARY TABLE a (key UInt32, ID LowCardinality(String));\n+CREATE TEMPORARY TABLE b (key UInt32);\n+SELECT * FROM b JOIN a USING (key) WHERE ID = '1' HAVING ID = '1';\n+\n+# PS. Predicate pushdown does not work for LowCardinality(String), but it's another problem.\n",
  "problem_statement": " segfault src/Interpreters/ActionsDAG.cpp:2144\nhttps://s3.amazonaws.com/clickhouse-test-reports/0/c70aa9592bc4991cf988184d4d03fc3ca90606e3/sqlancer__release_.html\r\n\r\n```\r\n2023.06.01 19:45:33.410065 [ 510 ] {} <Fatal> BaseDaemon: ########################################\r\n2023.06.01 19:45:33.410126 [ 510 ] {} <Fatal> BaseDaemon: (version 23.5.1.2484 (official build), build id: D3517C86B7677AFA439D5F76F234FAC91F0EC3D3) (from thread 35) (query_id: ae7b3d43-34ca-4389-b626-0c0c18391ae8) (query: SELECT AVG(t1.c0) FROM t1 GROUP BY (erf ((- ((log (lcm(t1.c0,t1.c0))))))) HAVING (AVG(t1.c0)) and (AVG(t1.c0)) UNION ALL SELECT AVG(t1.c0) FROM t1 GROUP BY (erf ((- ((log (lcm(t1.c0,t1.c0))))))) HAVING (NOT ((AVG(t1.c0)) and (AVG(t1.c0)))) UNION ALL SELECT AVG(t1.c0) FROM t1 GROUP BY (erf ((- ((log (lcm(t1.c0,t1.c0))))))) HAVING (((AVG(t1.c0)) and (AVG(t1.c0))) IS NULL) SETTINGS aggregate_functions_null_for_empty=1, enable_optimize_predicate_expression=0) Received signal Segmentation fault (11)\r\n2023.06.01 19:45:33.410169 [ 510 ] {} <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Address not mapped to object.\r\n2023.06.01 19:45:33.410241 [ 510 ] {} <Fatal> BaseDaemon: Stack trace: 0x0000000012f414bc 0x00000000150e3bd3 0x00000000150e3473 0x00000000150ccdb6 0x000000001506044d 0x000000001505f36e 0x0000000013b775ae 0x0000000013e9f038 0x0000000013ea3f3f 0x0000000014c20ef5 0x0000000014c25184 0x0000000014c94cb2 0x0000000017bd47b4 0x0000000017bd59d1 0x0000000017d52687 0x0000000017d500bc 0x00007fb9425fab43 0x00007fb94268ca00\r\n2023.06.01 19:45:33.596727 [ 510 ] {} <Fatal> BaseDaemon: 2. ./build_docker/./src/Interpreters/ActionsDAG.cpp:2144: DB::ActionsDAG::cloneActionsForFilterPushDown(String const&, bool, std::vector<String, std::allocator<String>> const&, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) @ 0x0000000012f414bc in /clickhouse\r\n2023.06.01 19:45:33.623502 [ 510 ] {} <Fatal> BaseDaemon: 3.1. inlined from ./build_docker/./src/Processors/QueryPlan/Optimizations/filterPushDown.cpp:118: DB::QueryPlanOptimizations::splitFilter(DB::QueryPlan::Node*, std::vector<String, std::allocator<String>> const&, unsigned long)\r\n2023.06.01 19:45:33.623534 [ 510 ] {} <Fatal> BaseDaemon: 3. ./build_docker/./src/Processors/QueryPlan/Optimizations/filterPushDown.cpp:188: DB::QueryPlanOptimizations::tryAddNewFilterStep(DB::QueryPlan::Node*, std::list<DB::QueryPlan::Node, std::allocator<DB::QueryPlan::Node>>&, std::vector<String, std::allocator<String>> const&, bool, unsigned long) @ 0x00000000150e3bd3 in /clickhouse\r\n2023.06.01 19:45:33.652496 [ 510 ] {} <Fatal> BaseDaemon: 4. ./build_docker/./src/Processors/QueryPlan/Optimizations/filterPushDown.cpp:248: DB::QueryPlanOptimizations::tryPushDownFilter(DB::QueryPlan::Node*, std::list<DB::QueryPlan::Node, std::allocator<DB::QueryPlan::Node>>&) @ 0x00000000150e3473 in /clickhouse\r\n2023.06.01 19:45:33.662879 [ 510 ] {} <Fatal> BaseDaemon: 5. ./build_docker/./src/Processors/QueryPlan/Optimizations/optimizeTree.cpp:88: DB::QueryPlanOptimizations::optimizeTreeFirstPass(DB::QueryPlanOptimizationSettings const&, DB::QueryPlan::Node&, std::list<DB::QueryPlan::Node, std::allocator<DB::QueryPlan::Node>>&) @ 0x00000000150ccdb6 in /clickhouse\r\n2023.06.01 19:45:33.702088 [ 510 ] {} <Fatal> BaseDaemon: 6. ./build_docker/./src/Processors/QueryPlan/QueryPlan.cpp:484: DB::QueryPlan::optimize(DB::QueryPlanOptimizationSettings const&) @ 0x000000001506044d in /clickhouse\r\n2023.06.01 19:45:33.739021 [ 510 ] {} <Fatal> BaseDaemon: 7.1. inlined from ./build_docker/./contrib/llvm-project/libcxx/include/__memory/compressed_pair.h:36: __compressed_pair_elem\r\n2023.06.01 19:45:33.739057 [ 510 ] {} <Fatal> BaseDaemon: 7.2. inlined from ./build_docker/./contrib/llvm-project/libcxx/include/__memory/compressed_pair.h:108: __compressed_pair<std::__value_init_tag, std::__value_init_tag>\r\n2023.06.01 19:45:33.739082 [ 510 ] {} <Fatal> BaseDaemon: 7.3. inlined from ./build_docker/./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:168: unique_ptr<true, void>\r\n2023.06.01 19:45:33.739097 [ 510 ] {} <Fatal> BaseDaemon: 7. ./build_docker/./src/Processors/QueryPlan/QueryPlan.cpp:169: DB::QueryPlan::buildQueryPipeline(DB::QueryPlanOptimizationSettings const&, DB::BuildQueryPipelineSettings const&) @ 0x000000001505f36e in /clickhouse\r\n2023.06.01 19:45:33.782462 [ 510 ] {} <Fatal> BaseDaemon: 8. ./build_docker/./src/Interpreters/InterpreterSelectWithUnionQuery.cpp:379: DB::InterpreterSelectWithUnionQuery::execute() @ 0x0000000013b775ae in /clickhouse\r\n2023.06.01 19:45:33.830570 [ 510 ] {} <Fatal> BaseDaemon: 9. ./build_docker/./src/Interpreters/executeQuery.cpp:0: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x0000000013e9f038 in /clickhouse\r\n2023.06.01 19:45:33.878410 [ 510 ] {} <Fatal> BaseDaemon: 10.1. inlined from ./build_docker/./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:612: shared_ptr\r\n2023.06.01 19:45:33.878467 [ 510 ] {} <Fatal> BaseDaemon: 10.2. inlined from ./build_docker/./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:723: std::shared_ptr<DB::IAST>::operator=[abi:v15000](std::shared_ptr<DB::IAST>&&)\r\n2023.06.01 19:45:33.878499 [ 510 ] {} <Fatal> BaseDaemon: 10.3. inlined from ./build_docker/./contrib/llvm-project/libcxx/include/tuple:533: void std::__memberwise_forward_assign[abi:v15000]<std::tuple<std::shared_ptr<DB::IAST>&, DB::BlockIO&>, std::tuple<std::shared_ptr<DB::IAST>, DB::BlockIO>, std::shared_ptr<DB::IAST>, DB::BlockIO, 0ul, 1ul>(std::tuple<std::shared_ptr<DB::IAST>&, DB::BlockIO&>&, std::tuple<std::shared_ptr<DB::IAST>, DB::BlockIO>&&, std::__tuple_types<std::shared_ptr<DB::IAST>, DB::BlockIO>, std::__tuple_indices<0ul, 1ul>)\r\n2023.06.01 19:45:33.878523 [ 510 ] {} <Fatal> BaseDaemon: 10.4. inlined from ./build_docker/./contrib/llvm-project/libcxx/include/tuple:1138: std::tuple<std::shared_ptr<DB::IAST>&, DB::BlockIO&>& std::tuple<std::shared_ptr<DB::IAST>&, DB::BlockIO&>::operator=[abi:v15000]<std::shared_ptr<DB::IAST>, DB::BlockIO, 0>(std::tuple<std::shared_ptr<DB::IAST>, DB::BlockIO>&&)\r\n2023.06.01 19:45:33.878539 [ 510 ] {} <Fatal> BaseDaemon: 10. ./build_docker/./src/Interpreters/executeQuery.cpp:1274: DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, std::optional<DB::FormatSettings> const&) @ 0x0000000013ea3f3f in /clickhouse\r\n2023.06.01 19:45:33.919279 [ 510 ] {} <Fatal> BaseDaemon: 11.1. inlined from ./build_docker/./contrib/llvm-project/libcxx/include/optional:260: ~__optional_destruct_base\r\n2023.06.01 19:45:33.919598 [ 510 ] {} <Fatal> BaseDaemon: 11. ./build_docker/./src/Server/HTTPHandler.cpp:834: DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&) @ 0x0000000014c20ef5 in /clickhouse\r\n2023.06.01 19:45:33.970750 [ 510 ] {} <Fatal> BaseDaemon: 12. ./build_docker/./src/Server/HTTPHandler.cpp:0: DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&) @ 0x0000000014c25184 in /clickhouse\r\n2023.06.01 19:45:33.974214 [ 510 ] {} <Fatal> BaseDaemon: 13.1. inlined from ./build_docker/./base/poco/Foundation/include/Poco/AutoPtr.h:205: Poco::AutoPtr<Poco::Net::HTTPServerParams>::operator->()\r\n2023.06.01 19:45:33.974239 [ 510 ] {} <Fatal> BaseDaemon: 13. ./build_docker/./src/Server/HTTP/HTTPServerConnection.cpp:69: DB::HTTPServerConnection::run() @ 0x0000000014c94cb2 in /clickhouse\r\n2023.06.01 19:45:33.976942 [ 510 ] {} <Fatal> BaseDaemon: 14. ./build_docker/./base/poco/Net/src/TCPServerConnection.cpp:57: Poco::Net::TCPServerConnection::start() @ 0x0000000017bd47b4 in /clickhouse\r\n2023.06.01 19:45:33.980805 [ 510 ] {} <Fatal> BaseDaemon: 15.1. inlined from ./build_docker/./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:48: std::default_delete<Poco::Net::TCPServerConnection>::operator()[abi:v15000](Poco::Net::TCPServerConnection*) const\r\n2023.06.01 19:45:33.980834 [ 510 ] {} <Fatal> BaseDaemon: 15.2. inlined from ./build_docker/./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:305: std::unique_ptr<Poco::Net::TCPServerConnection, std::default_delete<Poco::Net::TCPServerConnection>>::reset[abi:v15000](Poco::Net::TCPServerConnection*)\r\n2023.06.01 19:45:33.980852 [ 510 ] {} <Fatal> BaseDaemon: 15.3. inlined from ./build_docker/./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:259: ~unique_ptr\r\n2023.06.01 19:45:33.980883 [ 510 ] {} <Fatal> BaseDaemon: 15. ./build_docker/./base/poco/Net/src/TCPServerDispatcher.cpp:116: Poco::Net::TCPServerDispatcher::run() @ 0x0000000017bd59d1 in /clickhouse\r\n2023.06.01 19:45:33.985499 [ 510 ] {} <Fatal> BaseDaemon: 16. ./build_docker/./base/poco/Foundation/src/ThreadPool.cpp:202: Poco::PooledThread::run() @ 0x0000000017d52687 in /clickhouse\r\n2023.06.01 19:45:33.989200 [ 510 ] {} <Fatal> BaseDaemon: 17.1. inlined from ./build_docker/./base/poco/Foundation/include/Poco/SharedPtr.h:231: Poco::SharedPtr<Poco::Runnable, Poco::ReferenceCounter, Poco::ReleasePolicy<Poco::Runnable>>::get()\r\n2023.06.01 19:45:33.989226 [ 510 ] {} <Fatal> BaseDaemon: 17.2. inlined from ./build_docker/./base/poco/Foundation/include/Poco/SharedPtr.h:139: Poco::SharedPtr<Poco::Runnable, Poco::ReferenceCounter, Poco::ReleasePolicy<Poco::Runnable>>::assign(Poco::Runnable*)\r\n2023.06.01 19:45:33.989246 [ 510 ] {} <Fatal> BaseDaemon: 17.3. inlined from ./build_docker/./base/poco/Foundation/include/Poco/SharedPtr.h:180: Poco::SharedPtr<Poco::Runnable, Poco::ReferenceCounter, Poco::ReleasePolicy<Poco::Runnable>>::operator=(Poco::Runnable*)\r\n2023.06.01 19:45:33.989267 [ 510 ] {} <Fatal> BaseDaemon: 17. ./build_docker/./base/poco/Foundation/src/Thread_POSIX.cpp:350: Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017d500bc in /clickhouse\r\n2023.06.01 19:45:33.989289 [ 510 ] {} <Fatal> BaseDaemon: 18. ? @ 0x00007fb9425fab43 in ?\r\n2023.06.01 19:45:33.989305 [ 510 ] {} <Fatal> BaseDaemon: 19. ? @ 0x00007fb94268ca00 in ?\r\n2023.06.01 19:45:34.219356 [ 510 ] {} <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: D1F69B2A961A12BC10F3F45A6B41B21D)\r\n2023.06.01 19:45:34.610525 [ 29 ] {} <Fatal> Application: Child process was terminated by signal 11.\r\n```\r\n\r\n\r\n```\r\nDROP DATABASE IF EXISTS database3TLPHaving;\r\nCREATE DATABASE IF NOT EXISTS database3TLPHaving;\r\nUSE database3TLPHaving;\r\nCREATE TABLE database3TLPHaving.t0 (c0 Int32, c1 String, c2 String) ENGINE = Log() ;\r\nCREATE TABLE database3TLPHaving.t1 (c0 Int32) ENGINE = Log() ;\r\nCREATE TABLE IF NOT EXISTS database3TLPHaving.t2 (c0 Int32) ENGINE = Log() ;\r\nCREATE TABLE database3TLPHaving.t3 (c0 String) ENGINE = Log() ;\r\nCREATE TABLE database3TLPHaving.t4 (c0 Int32) ENGINE = Memory() ;\r\nINSERT INTO t1(c0) VALUES (-261830918), (-120908140);\r\nINSERT INTO t1(c0) VALUES (1611812154);\r\nINSERT INTO t3(c0) VALUES ('?&u');\r\nINSERT INTO t4(c0) VALUES (-1718115750);\r\nINSERT INTO t4(c0) VALUES (-2105663472);\r\nINSERT INTO t3(c0) VALUES ('tG}S?9X');\r\nINSERT INTO t3(c0) VALUES ('Ew,|\\\\<RdP');\r\nINSERT INTO t2(c0) VALUES (-2063959252);\r\nINSERT INTO t4(c0) VALUES (-1262215227);\r\nINSERT INTO t4(c0) VALUES (-1262215227), (1370223380);\r\nINSERT INTO t4(c0) VALUES (608293296);\r\nINSERT INTO t2(c0) VALUES (104963007);\r\nINSERT INTO t1(c0) VALUES (-1247144537);\r\nINSERT INTO t2(c0) VALUES (-966776550);\r\nINSERT INTO t4(c0) VALUES (-1983678519);\r\nINSERT INTO t0(c2) VALUES ('-,?'), ('');\r\nINSERT INTO t4(c0) VALUES (1321399841);\r\n```\n",
  "hints_text": "In debug: \r\nhttps://s3.amazonaws.com/clickhouse-test-reports/0/de62c9e55813702fa2322a52f3fd8234fe8eb188/sqlancer__debug_.html\r\n\r\n```\r\n/build/contrib/llvm-project/libcxx/include/vector:555: assertion !empty() failed: front() called on an empty vector2023.06.01 09:32:06.851072 [ 360 ] {} <Debug> HTTP-Session: e74503d1-f012-4c21-8f95-3f2e5242868b Creating session context with user_id: 94309d50-4f52-5250-31bd-74fecac179db\r\n```\r\n\r\n```\r\n2023.06.01 09:32:06.861719 [ 567 ] {} <Fatal> BaseDaemon: ########################################\r\n2023.06.01 09:32:06.861989 [ 567 ] {} <Fatal> BaseDaemon: (version 23.5.1.1 (official build), build id: 4333DF410DB201026730D1484A68F37532439E57) (from thread 361) (query_id: 400525c9-dbf1-4f6e-b758-63fa2ae668d1) (query: SELECT MIN(-555024350) FROM t3 GROUP BY (((- ((sin ((- (t3.c0)))))))%((sin ((- ((- (t3.c0)))))))) HAVING (MIN(-555024350)) and (MIN(-555024350)) UNION ALL SELECT MIN(-555024350) FROM t3 GROUP BY (((- ((sin ((- (t3.c0)))))))%((sin ((- ((- (t3.c0)))))))) HAVING (NOT ((MIN(-555024350)) and (MIN(-555024350)))) UNION ALL SELECT MIN(-555024350) FROM t3 GROUP BY (((- ((sin ((- (t3.c0)))))))%((sin ((- ((- (t3.c0)))))))) HAVING (((MIN(-555024350)) and (MIN(-555024350))) IS NULL) SETTINGS aggregate_functions_null_for_empty=1, enable_optimize_predicate_expression=0) Received signal Aborted (6)\r\n2023.06.01 09:32:06.862251 [ 567 ] {} <Fatal> BaseDaemon:\r\n2023.06.01 09:32:06.862451 [ 567 ] {} <Fatal> BaseDaemon: Stack trace: 0x00007fa3086a7a7c 0x00007fa308653476 0x00007fa3086397f3 0x00000000381b4f72 0x000000002c1a1fda 0x000000002c16878b 0x000000002f4c8b40 0x000000002f4c7bd0 0x000000002f4c696d 0x000000002f48f394 0x000000002f3e1768 0x000000002f3e1297 0x000000002d3219cb 0x000000002d7dda77 0x000000002d7e29c7 0x000000002ebdd296 0x000000002ebdfcf7 0x000000002ec7e11c 0x000000003412c4f9 0x000000003412cd3c 0x000000003436de14 0x000000003436abba 0x00000000343698be 0x00007fa3086a5b43 0x00007fa308737a00\r\n2023.06.01 09:32:06.862748 [ 567 ] {} <Fatal> BaseDaemon: 4. pthread_kill @ 0x00007fa3086a7a7c in ?\r\n2023.06.01 09:32:06.862940 [ 567 ] {} <Fatal> BaseDaemon: 5. raise @ 0x00007fa308653476 in ?\r\n2023.06.01 09:32:06.863123 [ 567 ] {} <Fatal> BaseDaemon: 6. abort @ 0x00007fa3086397f3 in ?\r\n2023.06.01 09:32:12.035309 [ 567 ] {} <Fatal> BaseDaemon: 7. ? @ 0x00000000381b4f72 in /clickhouse\r\n2023.06.01 09:32:14.077118 [ 567 ] {} <Fatal> BaseDaemon: 8. /build/contrib/llvm-project/libcxx/include/vector:555: std::vector<DB::ActionsDAG::Node const*, std::allocator<DB::ActionsDAG::Node const*>>::front[abi:v15000]() @ 0x000000002c1a1fda in /clickhouse\r\n2023.06.01 09:32:15.922822 [ 567 ] {} <Fatal> BaseDaemon: 9. /build/src/Interpreters/ActionsDAG.cpp:2144: DB::ActionsDAG::cloneActionsForFilterPushDown(String const&, bool, std::vector<String, std::allocator<String>> const&, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) @ 0x000000002c16878b in /clickhouse\r\n2023.06.01 09:32:16.289277 [ 567 ] {} <Fatal> BaseDaemon: 10. /build/src/Processors/QueryPlan/Optimizations/filterPushDown.cpp:118: DB::QueryPlanOptimizations::splitFilter(DB::QueryPlan::Node*, std::vector<String, std::allocator<String>> const&, unsigned long) @ 0x000000002f4c8b40 in /clickhouse\r\n2023.06.01 09:32:16.649972 [ 567 ] {} <Fatal> BaseDaemon: 11. /build/src/Processors/QueryPlan/Optimizations/filterPushDown.cpp:188: DB::QueryPlanOptimizations::tryAddNewFilterStep(DB::QueryPlan::Node*, std::list<DB::QueryPlan::Node, std::allocator<DB::QueryPlan::Node>>&, std::vector<String, std::allocator<String>> const&, bool, unsigned long) @ 0x000000002f4c7bd0 in /clickhouse\r\n2023.06.01 09:32:17.004290 [ 567 ] {} <Fatal> BaseDaemon: 12. /build/src/Processors/QueryPlan/Optimizations/filterPushDown.cpp:248: DB::QueryPlanOptimizations::tryPushDownFilter(DB::QueryPlan::Node*, std::list<DB::QueryPlan::Node, std::allocator<DB::QueryPlan::Node>>&) @ 0x000000002f4c696d in /clickhouse\r\n2023.06.01 09:32:17.137240 [ 567 ] {} <Fatal> BaseDaemon: 13. /build/src/Processors/QueryPlan/Optimizations/optimizeTree.cpp:87: DB::QueryPlanOptimizations::optimizeTreeFirstPass(DB::QueryPlanOptimizationSettings const&, DB::QueryPlan::Node&, std::list<DB::QueryPlan::Node, std::allocator<DB::QueryPlan::Node>>&) @ 0x000000002f48f394 in /clickhouse\r\n2023.06.01 09:32:17.569821 [ 567 ] {} <Fatal> BaseDaemon: 14. /build/src/Processors/QueryPlan/QueryPlan.cpp:483: DB::QueryPlan::optimize(DB::QueryPlanOptimizationSettings const&) @ 0x000000002f3e1768 in /clickhouse\r\n2023.06.01 09:32:17.861170 [ 567 ] {} <Fatal> BaseDaemon: 15. /build/src/Processors/QueryPlan/QueryPlan.cpp:169: DB::QueryPlan::buildQueryPipeline(DB::QueryPlanOptimizationSettings const&, DB::BuildQueryPipelineSettings const&) @ 0x000000002f3e1297 in /clickhouse\r\n2023.06.01 09:32:18.253775 [ 567 ] {} <Fatal> BaseDaemon: 16. /build/src/Interpreters/InterpreterSelectWithUnionQuery.cpp:379: DB::InterpreterSelectWithUnionQuery::execute() @ 0x000000002d3219cb in /clickhouse\r\n2023.06.01 09:32:18.792725 [ 567 ] {} <Fatal> BaseDaemon: 17. /build/src/Interpreters/executeQuery.cpp:721: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x000000002d7dda77 in /clickhouse\r\n2023.06.01 09:32:19.314740 [ 567 ] {} <Fatal> BaseDaemon: 18. /build/src/Interpreters/executeQuery.cpp:1274: DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, std::optional<DB::FormatSettings> const&) @ 0x000000002d7e29c7 in /clickhouse\r\n2023.06.01 09:32:19.678896 [ 567 ] {} <Fatal> BaseDaemon: 19. /build/src/Server/HTTPHandler.cpp:834: DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&) @ 0x000000002ebdd296 in /clickhouse\r\n2023.06.01 09:32:20.073378 [ 567 ] {} <Fatal> BaseDaemon: 20. /build/src/Server/HTTPHandler.cpp:1029: DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&) @ 0x000000002ebdfcf7 in /clickhouse\r\n2023.06.01 09:32:20.115626 [ 567 ] {} <Fatal> BaseDaemon: 21. /build/src/Server/HTTP/HTTPServerConnection.cpp:68: DB::HTTPServerConnection::run() @ 0x000000002ec7e11c in /clickhouse\r\n2023.06.01 09:32:20.153974 [ 567 ] {} <Fatal> BaseDaemon: 22. /build/base/poco/Net/src/TCPServerConnection.cpp:43: Poco::Net::TCPServerConnection::start() @ 0x000000003412c4f9 in /clickhouse\r\n2023.06.01 09:32:20.206325 [ 567 ] {} <Fatal> BaseDaemon: 23. /build/base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x000000003412cd3c in /clickhouse\r\n2023.06.01 09:32:20.260636 [ 567 ] {} <Fatal> BaseDaemon: 24. /build/base/poco/Foundation/src/ThreadPool.cpp:188: Poco::PooledThread::run() @ 0x000000003436de14 in /clickhouse\r\n2023.06.01 09:32:20.314995 [ 567 ] {} <Fatal> BaseDaemon: 25. /build/base/poco/Foundation/src/Thread.cpp:46: Poco::(anonymous namespace)::RunnableHolder::run() @ 0x000000003436abba in /clickhouse\r\n2023.06.01 09:32:20.364963 [ 567 ] {} <Fatal> BaseDaemon: 26. /build/base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x00000000343698be in /clickhouse\r\n2023.06.01 09:32:20.365176 [ 567 ] {} <Fatal> BaseDaemon: 27. ? @ 0x00007fa3086a5b43 in ?\r\n2023.06.01 09:32:20.365340 [ 567 ] {} <Fatal> BaseDaemon: 28. ? @ 0x00007fa308737a00 in ?\r\n2023.06.01 09:32:25.726193 [ 567 ] {} <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: 40012974E6B08EA7F18CA4FF08EA6649)\r\n```\nThis?\r\n\r\nhttps://github.com/ClickHouse/ClickHouse/blob/7bd31de4442641554ca85c80e8946855eedfc19f/src/Interpreters/ActionsDAG.cpp#LL2144C12-L2144C45\nFrom novikd:\n\n>InterpreterSelectWithUnionQuery\n>It's not using new analyzer. It's a bug in the old infrastructure\n```\r\nSELECT toBool(sin(SUM(number))) AS x FROM (SELECT 1 AS number) GROUP BY number HAVING 255 AND (-2147483647 AND sin(sum(number))) AND sin(sum(number)) SETTINGS enable_optimize_predicate_expression = 1;\r\n```\nSame issue triggered by ASTFuzzer:\r\nhttps://s3.amazonaws.com/clickhouse-test-reports/0/9922053419f942312516b38173fff1ddae99acaf/fuzzer_astfuzzermsan/report.html\nhttps://s3.amazonaws.com/clickhouse-test-reports/50470/24e015b961189e1b2202cfdf5fefe6c9e5904e71/fuzzer_astfuzzerasan/report.html\n\r\nhttps://s3.amazonaws.com/clickhouse-test-reports/50987/85db1eb6fcb4313d40b2c6a80e46d257fd44f7d1/fuzzer_astfuzzerasan/report.html\nhttps://s3.amazonaws.com/clickhouse-test-reports/51026/84f95fc28165c447e2a7202aff030de6d90ae8b4/fuzzer_astfuzzerubsan/report.html \nWTF\r\n\r\n```\r\nmilovidov@milovidov-desktop:~/Downloads$ clickhouse-client \r\nClickHouse client version 23.6.1.1.\r\nConnecting to localhost:9000 as user default.\r\nConnected to ClickHouse server version 23.6.1 revision 54463.\r\n\r\nmilovidov-desktop :) SET receive_timeout = 10., receive_data_timeout_ms = 10000, allow_suspicious_low_cardinality_types = true, log_queries = true, insert_quorum = 'auto', insert_quorum_timeout = 5000, insert_quorum_parallel = false, select_sequential_consistency = 1, table_function_remote_max_addresses = 200, join_use_nulls = false, max_execution_time = 10., max_memory_usage = 10000000000, send_logs_level = 'fatal', allow_introspection_functions = true, mutations_sync = 1;\r\n\r\n\r\nSET receive_timeout = 10., receive_data_timeout_ms = 10000, allow_suspicious_low_cardinality_types = 1, log_queries = 1, insert_quorum = 'auto', insert_quorum_timeout = 5000, insert_quorum_parallel = 0, select_sequential_consistency = 1, table_function_remote_max_addresses = 200, join_use_nulls = 0, max_execution_time = 10., max_memory_usage = 10000000000, send_logs_level = 'fatal', allow_introspection_functions = 1, mutations_sync = 1\r\n\r\nQuery id: c70f6e9f-9b77-480b-b959-c150a134f2bd\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.001 sec. \r\n\r\nmilovidov-desktop :) CREATE TABLE b__fuzz_0 (`key` UInt32, `ID` LowCardinality(UInt32)) ENGINE = MergeTree ORDER BY key;\r\n\r\nCREATE TABLE b__fuzz_0\r\n(\r\n    `key` UInt32,\r\n    `ID` LowCardinality(UInt32)\r\n)\r\nENGINE = MergeTree\r\nORDER BY key\r\n\r\nQuery id: 2e41b2e2-2943-494e-9e39-33ca70fa3911\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.032 sec. \r\n\r\nmilovidov-desktop :) CREATE TABLE m__fuzz_11 (`key` Int8) ENGINE = Merge(currentDatabase(), 'a');\r\n\r\nCREATE TABLE m__fuzz_11\r\n(\r\n    `key` Int8\r\n)\r\nENGINE = Merge(currentDatabase(), 'a')\r\n\r\nQuery id: c803dc99-ea81-4632-a372-e7c3e0f9f88d\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.010 sec. \r\n\r\nmilovidov-desktop :) SELECT * FROM m__fuzz_11 INNER JOIN b__fuzz_0 USING (key) WHERE ID = 1 HAVING ID = 1 ORDER BY ID ASC NULLS LAST;\r\n\r\nSELECT *\r\nFROM m__fuzz_11\r\nINNER JOIN b__fuzz_0 USING (key)\r\nWHERE ID = 1\r\nHAVING ID = 1\r\nORDER BY ID ASC NULLS LAST\r\n\r\nQuery id: 489e19d7-887b-433c-9a1d-c43c32341c27\r\n\r\n[milovidov-desktop] 2023.06.23 00:26:30.953692 [ 2531499 ] <Fatal> BaseDaemon: ########################################\r\n[milovidov-desktop] 2023.06.23 00:26:30.953757 [ 2531499 ] <Fatal> BaseDaemon: (version 23.6.1.1, build id: 617D0B8CB6D4425D9128E5BC21A3B729AB72605F, git hash: 369ad0aea397612a823f28b7aeb3ac72583066f8) (from thread 947858) (query_id: 489e19d7-887b-433c-9a1d-c43c32341c27) (query: SELECT * FROM m__fuzz_11 INNER JOIN b__fuzz_0 USING (key) WHERE ID = 1 HAVING ID = 1 ORDER BY ID ASC NULLS LAST;) Received signal Segmentation fault (11)\r\n[milovidov-desktop] 2023.06.23 00:26:30.953783 [ 2531499 ] <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Address not mapped to object.\r\n[milovidov-desktop] 2023.06.23 00:26:30.953804 [ 2531499 ] <Fatal> BaseDaemon: Stack trace: 0x00000000167e6c9c 0x00000000185fe655 0x00000000185fde99 0x00000000185f9ef6 0x0000000018599419 0x000000001859862e 0x0000000017269163 0x000000001752d249 0x000000001752a26f 0x00000000181f74e4 0x0000000018207819 0x000000001aa130e7 0x000000001aa135cd 0x000000001ab7a2a7 0x000000001ab77ec2 0x00007f62a7785b43 0x00007f62a7817a00\r\n[milovidov-desktop] 2023.06.23 00:26:31.101201 [ 2531499 ] <Fatal> BaseDaemon: 3. ./build/./src/Interpreters/ActionsDAG.cpp:2146: DB::ActionsDAG::cloneActionsForFilterPushDown(String const&, bool, std::vector<String, std::allocator<String>> const&, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&) @ 0x00000000167e6c9c in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n[milovidov-desktop] 2023.06.23 00:26:31.119477 [ 2531499 ] <Fatal> BaseDaemon: 4.1. inlined from ./build/./src/Processors/QueryPlan/Optimizations/filterPushDown.cpp:0: DB::QueryPlanOptimizations::splitFilter(DB::QueryPlan::Node*, std::vector<String, std::allocator<String>> const&, unsigned long)\r\n[milovidov-desktop] 2023.06.23 00:26:31.119515 [ 2531499 ] <Fatal> BaseDaemon: 4. ./build/./src/Processors/QueryPlan/Optimizations/filterPushDown.cpp:352: DB::QueryPlanOptimizations::tryPushDownFilter(DB::QueryPlan::Node*, std::list<DB::QueryPlan::Node, std::allocator<DB::QueryPlan::Node>>&)::$_1::operator()(DB::JoinKind) const @ 0x00000000185fe655 in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n[milovidov-desktop] 2023.06.23 00:26:31.140530 [ 2531499 ] <Fatal> BaseDaemon: 5. ./build/./src/Processors/QueryPlan/Optimizations/filterPushDown.cpp:374: DB::QueryPlanOptimizations::tryPushDownFilter(DB::QueryPlan::Node*, std::list<DB::QueryPlan::Node, std::allocator<DB::QueryPlan::Node>>&) @ 0x00000000185fde99 in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n[milovidov-desktop] 2023.06.23 00:26:31.147824 [ 2531499 ] <Fatal> BaseDaemon: 6. ./build/./src/Processors/QueryPlan/Optimizations/optimizeTree.cpp:88: DB::QueryPlanOptimizations::optimizeTreeFirstPass(DB::QueryPlanOptimizationSettings const&, DB::QueryPlan::Node&, std::list<DB::QueryPlan::Node, std::allocator<DB::QueryPlan::Node>>&) @ 0x00000000185f9ef6 in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n[milovidov-desktop] 2023.06.23 00:26:31.172487 [ 2531499 ] <Fatal> BaseDaemon: 7. ./build/./src/Processors/QueryPlan/QueryPlan.cpp:484: DB::QueryPlan::optimize(DB::QueryPlanOptimizationSettings const&) @ 0x0000000018599419 in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n[milovidov-desktop] 2023.06.23 00:26:31.191510 [ 2531499 ] <Fatal> BaseDaemon: 8.1. inlined from ./build/./contrib/llvm-project/libcxx/include/__memory/compressed_pair.h:36: __compressed_pair_elem\r\n[milovidov-desktop] 2023.06.23 00:26:31.191530 [ 2531499 ] <Fatal> BaseDaemon: 8.2. inlined from ./build/./contrib/llvm-project/libcxx/include/__memory/compressed_pair.h:108: __compressed_pair<std::__value_init_tag, std::__value_init_tag>\r\n[milovidov-desktop] 2023.06.23 00:26:31.191541 [ 2531499 ] <Fatal> BaseDaemon: 8.3. inlined from ./build/./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:168: unique_ptr<true, void>\r\n[milovidov-desktop] 2023.06.23 00:26:31.191559 [ 2531499 ] <Fatal> BaseDaemon: 8. ./build/./src/Processors/QueryPlan/QueryPlan.cpp:169: DB::QueryPlan::buildQueryPipeline(DB::QueryPlanOptimizationSettings const&, DB::BuildQueryPipelineSettings const&) @ 0x000000001859862e in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n[milovidov-desktop] 2023.06.23 00:26:31.219086 [ 2531499 ] <Fatal> BaseDaemon: 9. ./build/./src/Interpreters/InterpreterSelectWithUnionQuery.cpp:379: DB::InterpreterSelectWithUnionQuery::execute() @ 0x0000000017269163 in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n[milovidov-desktop] 2023.06.23 00:26:31.273682 [ 2531499 ] <Fatal> BaseDaemon: 10. ./build/./src/Interpreters/executeQuery.cpp:0: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x000000001752d249 in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n[milovidov-desktop] 2023.06.23 00:26:31.324153 [ 2531499 ] <Fatal> BaseDaemon: 11. ./build/./src/Interpreters/executeQuery.cpp:1182: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x000000001752a26f in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n[milovidov-desktop] 2023.06.23 00:26:31.358901 [ 2531499 ] <Fatal> BaseDaemon: 12. ./build/./src/Server/TCPHandler.cpp:0: DB::TCPHandler::runImpl() @ 0x00000000181f74e4 in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n[milovidov-desktop] 2023.06.23 00:26:31.423769 [ 2531499 ] <Fatal> BaseDaemon: 13. ./build/./src/Server/TCPHandler.cpp:2045: DB::TCPHandler::run() @ 0x0000000018207819 in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n[milovidov-desktop] 2023.06.23 00:26:31.425653 [ 2531499 ] <Fatal> BaseDaemon: 14. ./build/./base/poco/Net/src/TCPServerConnection.cpp:57: Poco::Net::TCPServerConnection::start() @ 0x000000001aa130e7 in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n[milovidov-desktop] 2023.06.23 00:26:31.428411 [ 2531499 ] <Fatal> BaseDaemon: 15.1. inlined from ./build/./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:48: std::default_delete<Poco::Net::TCPServerConnection>::operator()[abi:v15000](Poco::Net::TCPServerConnection*) const\r\n[milovidov-desktop] 2023.06.23 00:26:31.428428 [ 2531499 ] <Fatal> BaseDaemon: 15.2. inlined from ./build/./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:305: std::unique_ptr<Poco::Net::TCPServerConnection, std::default_delete<Poco::Net::TCPServerConnection>>::reset[abi:v15000](Poco::Net::TCPServerConnection*)\r\n[milovidov-desktop] 2023.06.23 00:26:31.428442 [ 2531499 ] <Fatal> BaseDaemon: 15.3. inlined from ./build/./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:259: ~unique_ptr\r\n[milovidov-desktop] 2023.06.23 00:26:31.428459 [ 2531499 ] <Fatal> BaseDaemon: 15. ./build/./base/poco/Net/src/TCPServerDispatcher.cpp:116: Poco::Net::TCPServerDispatcher::run() @ 0x000000001aa135cd in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n[milovidov-desktop] 2023.06.23 00:26:31.431618 [ 2531499 ] <Fatal> BaseDaemon: 16. ./build/./base/poco/Foundation/src/ThreadPool.cpp:202: Poco::PooledThread::run() @ 0x000000001ab7a2a7 in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n[milovidov-desktop] 2023.06.23 00:26:31.434272 [ 2531499 ] <Fatal> BaseDaemon: 17.1. inlined from ./build/./base/poco/Foundation/include/Poco/SharedPtr.h:139: Poco::SharedPtr<Poco::Runnable, Poco::ReferenceCounter, Poco::ReleasePolicy<Poco::Runnable>>::assign(Poco::Runnable*)\r\n[milovidov-desktop] 2023.06.23 00:26:31.434286 [ 2531499 ] <Fatal> BaseDaemon: 17.2. inlined from ./build/./base/poco/Foundation/include/Poco/SharedPtr.h:180: Poco::SharedPtr<Poco::Runnable, Poco::ReferenceCounter, Poco::ReleasePolicy<Poco::Runnable>>::operator=(Poco::Runnable*)\r\n[milovidov-desktop] 2023.06.23 00:26:31.434299 [ 2531499 ] <Fatal> BaseDaemon: 17. ./build/./base/poco/Foundation/src/Thread_POSIX.cpp:350: Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001ab77ec2 in /home/milovidov/work/ClickHouse/build/programs/clickhouse\r\n[milovidov-desktop] 2023.06.23 00:26:31.434318 [ 2531499 ] <Fatal> BaseDaemon: 18. ? @ 0x00007f62a7785b43 in ?\r\n[milovidov-desktop] 2023.06.23 00:26:31.434413 [ 2531499 ] <Fatal> BaseDaemon: 19. ? @ 0x00007f62a7817a00 in ?\r\n[milovidov-desktop] 2023.06.23 00:26:31.434444 [ 2531499 ] <Fatal> BaseDaemon: Integrity check of the executable skipped because the reference checksum could not be read.\r\n[milovidov-desktop] 2023.06.23 00:26:31.899344 [ 2531499 ] <Fatal> BaseDaemon: This ClickHouse version is not official and should be upgraded to the official build.\r\n[milovidov-desktop] 2023.06.23 00:26:31.899462 [ 2531499 ] <Fatal> BaseDaemon: Changed settings: receive_timeout = 10., receive_data_timeout_ms = 10000, allow_suspicious_low_cardinality_types = true, log_queries = true, insert_quorum = 'auto', insert_quorum_timeout = 5000, insert_quorum_parallel = false, select_sequential_consistency = 1, table_function_remote_max_addresses = 200, join_use_nulls = false, max_execution_time = 10., max_memory_usage = 10000000000, send_logs_level = 'fatal', allow_introspection_functions = true, mutations_sync = 1\r\nException on client:\r\nCode: 32. DB::Exception: Attempt to read after eof: while receiving packet from localhost:9000. (ATTEMPT_TO_READ_AFTER_EOF)\r\n\r\nConnecting to localhost:9000 as user default.\r\nCode: 210. DB::NetException: Connection refused (localhost:9000). (NETWORK_ERROR)\r\n```\n```\r\nCREATE TEMPORARY TABLE a (key UInt32, ID LowCardinality(String));\r\nCREATE TEMPORARY TABLE b (key UInt32);\r\nSELECT * FROM b JOIN a USING (key) WHERE ID = '1' HAVING ID = '1';\r\n```",
  "created_at": "2023-06-22T23:42:13Z",
  "modified_files": [
    "src/Interpreters/ActionsDAG.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02791_predicate_pushdown_different_types.sql"
  ]
}