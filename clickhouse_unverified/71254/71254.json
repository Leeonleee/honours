{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 71254,
  "instance_id": "ClickHouse__ClickHouse-71254",
  "issue_numbers": [
    "69010"
  ],
  "base_commit": "ba0bb1d023e0300926f042fabe6b60903afef176",
  "patch": "diff --git a/src/Interpreters/Cache/QueryCache.cpp b/src/Interpreters/Cache/QueryCache.cpp\nindex c766c5209fc9..7dbee567c5b1 100644\n--- a/src/Interpreters/Cache/QueryCache.cpp\n+++ b/src/Interpreters/Cache/QueryCache.cpp\n@@ -89,11 +89,40 @@ struct HasSystemTablesMatcher\n         {\n             database_table = identifier->name();\n         }\n-        /// Handle SELECT [...] FROM clusterAllReplicas(<cluster>, '<table>')\n-        else if (const auto * literal = node->as<ASTLiteral>())\n+        /// SELECT [...] FROM clusterAllReplicas(<cluster>, '<table>')\n+        /// This SQL syntax is quite common but we need to be careful. A naive attempt to cast 'node' to an ASTLiteral will be too general\n+        /// and introduce false positives in queries like\n+        ///     'SELECT * FROM users WHERE name = 'system.metrics' SETTINGS use_query_cache = true;'\n+        /// Therefore, make sure we are really in `clusterAllReplicas`. EXPLAIN AST for\n+        ///     'SELECT * FROM clusterAllReplicas('default', system.one) SETTINGS use_query_cache = 1'\n+        /// returns:\n+        ///     [...]\n+        ///     Function clusterAllReplicas (children 1)\n+        ///       ExpressionList (children 2)\n+        ///         Literal 'test_shard_localhost'\n+        ///         Literal 'system.one'\n+        ///     [...]\n+        else if (const auto * function = node->as<ASTFunction>())\n         {\n-            const auto & value = literal->value;\n-            database_table = toString(value);\n+            if (function->name == \"clusterAllReplicas\")\n+            {\n+                const ASTs & function_children = function->children;\n+                if (!function_children.empty())\n+                {\n+                    if (const auto * expression_list = function_children[0]->as<ASTExpressionList>())\n+                    {\n+                        const ASTs & expression_list_children = expression_list->children;\n+                        if (expression_list_children.size() >= 2)\n+                        {\n+                            if (const auto * literal = expression_list_children[1]->as<ASTLiteral>())\n+                            {\n+                                const auto & value = literal->value;\n+                                database_table = toString(value);\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n         }\n \n         Tokens tokens(database_table.c_str(), database_table.c_str() + database_table.size(), /*max_query_size*/ 2048, /*skip_insignificant*/ true);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02494_query_cache_system_tables.sql b/tests/queries/0_stateless/02494_query_cache_system_tables.sql\nindex 7c9f01c4e91f..12eaec0f8bcf 100644\n--- a/tests/queries/0_stateless/02494_query_cache_system_tables.sql\n+++ b/tests/queries/0_stateless/02494_query_cache_system_tables.sql\n@@ -44,9 +44,16 @@ SELECT * SETTINGS use_query_cache = 1;\n SELECT * FROM information_schema.tables SETTINGS use_query_cache = 1; -- { serverError QUERY_CACHE_USED_WITH_SYSTEM_TABLE }\n SELECT * FROM INFORMATION_SCHEMA.TABLES SETTINGS use_query_cache = 1; -- { serverError QUERY_CACHE_USED_WITH_SYSTEM_TABLE }\n \n+-- Issue #69010: A system table name appears as a literal. That's okay and must not throw.\n+DROP TABLE IF EXISTS tab;\n+CREATE TABLE tab (uid Int16, name String) ENGINE = Memory;\n+SELECT * FROM tab WHERE name = 'system.one' SETTINGS use_query_cache = true;\n+DROP TABLE tab;\n+\n -- System tables can be \"hidden\" inside e.g. table functions\n SELECT * FROM clusterAllReplicas('test_shard_localhost', system.one) SETTINGS use_query_cache = 1; -- {serverError QUERY_CACHE_USED_WITH_SYSTEM_TABLE }\n SELECT * FROM clusterAllReplicas('test_shard_localhost', 'system.one') SETTINGS use_query_cache = 1; -- {serverError QUERY_CACHE_USED_WITH_SYSTEM_TABLE }\n+-- Note how in the previous query ^^ 'system.one' is also a literal. ClusterAllReplicas gets special handling.\n \n -- Criminal edge case that a user creates a table named \"system\". The query cache must not reject queries against it.\n DROP TABLE IF EXISTS system;\n@@ -60,5 +67,4 @@ CREATE TABLE system.system (c UInt64) ENGINE = Memory;\n SElECT * FROM system.system SETTINGS use_query_cache = 1; -- { serverError QUERY_CACHE_USED_WITH_SYSTEM_TABLE }\n DROP TABLE system.system;\n \n--- Cleanup\n SYSTEM DROP QUERY CACHE;\n",
  "problem_statement": "Cached queries fail when a string parameter looks like a system table\n**Company or project name**\r\n\r\nDash0\r\n\r\n**Describe what's wrong**\r\n\r\nWhenever a query is being cached (using `SETTINGS use_query_cache = true`) and some string 'looks' like a system table, the query fails with the message:\r\n\r\n> Code: 719. DB::Exception: Received from localhost:9000. DB::Exception: The query result was not cached because the query contains a system table. Use setting `query_cache_system_table_handling = 'save'` or `= 'ignore'` to cache the query result regardless or to omit caching. (QUERY_CACHE_USED_WITH_SYSTEM_TABLE)\r\n\r\nHowever no system table is being used. Try e.g. with:\r\n\r\n```sql\r\nCREATE TABLE users (uid Int16, name String, age Int16) ENGINE=Memory;\r\n\r\nSELECT * FROM users WHERE name = 'system.metrics' SETTINGS use_query_cache = true;\r\n```\r\n\r\nFiddle: https://fiddle.clickhouse.com/efd71f42-006d-4dff-9a2b-3445d1cf9c1f\r\n\r\n**Does it reproduce on the most recent release?**\r\n\r\nYes, both `24.8.2` (Fiddle) and `24.6.3` (local version) affected\r\n\r\n**Enable crash reporting**\r\n\r\n\r\n**How to reproduce**\r\n\r\nSee the above Fiddle\r\n\r\n**Expected behavior**\r\n\r\nCaching works normally since its a 'regular' SQL statement that gets cached fine with another string value\r\n\r\n**Error message and/or stacktrace**\r\n\r\n> Code: 719. DB::Exception: Received from localhost:9000. DB::Exception: The query result was not cached because the query contains a system table. Use setting `query_cache_system_table_handling = 'save'` or `= 'ignore'` to cache the query result regardless or to omit caching. (QUERY_CACHE_USED_WITH_SYSTEM_TABLE)\r\n\r\n**Additional context**\r\n\r\n\n",
  "hints_text": "Hi,\r\n\r\nKind bump as this issue did not receive any attention and I would expect its fairly easy to resolve?\r\nIt's pretty annoying as the only solution would be to remove all cache instructions from the queries.\nThanks for reporting!\r\n\r\nI see that `HasSystemTablesMatcher` needs to pay more attention while analyzing the query. It should take string literals only inside the immediate parameters of table functions.\nI can bring attention of @rschu1ze to this, or you can also submit a pull request.\nThe issue was introduced with #62376.\r\n\r\nThe exception message also contains the workaround: `[...] Use setting query_cache_system_table_handling = 'save' or = 'ignore' to cache the query result regardless or to omit caching.`, i.e.\r\n\r\n```sql\r\nSELECT * FROM users WHERE name = 'system.metrics'\r\nSETTINGS use_query_cache = true, query_cache_system_table_handling = 'save';`\r\n```\r\n\r\nwill cache suppress the error. I'll make a real fix.",
  "created_at": "2024-10-30T12:10:10Z",
  "modified_files": [
    "src/Interpreters/Cache/QueryCache.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/02494_query_cache_system_tables.sql"
  ]
}