{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 65386,
  "instance_id": "ClickHouse__ClickHouse-65386",
  "issue_numbers": [
    "65312"
  ],
  "base_commit": "da741d271ff9196842150b0ab9183c139276db08",
  "patch": "diff --git a/docs/en/engines/table-engines/integrations/s3.md b/docs/en/engines/table-engines/integrations/s3.md\nindex 93f4a1876561..d664c37bd0ff 100644\n--- a/docs/en/engines/table-engines/integrations/s3.md\n+++ b/docs/en/engines/table-engines/integrations/s3.md\n@@ -146,6 +146,7 @@ Code: 48. DB::Exception: Received from localhost:9000. DB::Exception: Reading fr\n - `_file` \u2014 Name of the file. Type: `LowCardinalty(String)`.\n - `_size` \u2014 Size of the file in bytes. Type: `Nullable(UInt64)`. If the size is unknown, the value is `NULL`.\n - `_time` \u2014 Last modified time of the file. Type: `Nullable(DateTime)`. If the time is unknown, the value is `NULL`.\n+- `_etag` \u2014 ETag of the file. Type: `LowCardinalty(String)`. If the etag is unknown, the value is `NULL`.\n \n For more information about virtual columns see [here](../../../engines/table-engines/index.md#table_engines-virtual_columns).\n \ndiff --git a/src/Disks/ObjectStorages/AzureBlobStorage/AzureObjectStorage.cpp b/src/Disks/ObjectStorages/AzureBlobStorage/AzureObjectStorage.cpp\nindex 0ebe885a3e70..36f37b25fca1 100644\n--- a/src/Disks/ObjectStorages/AzureBlobStorage/AzureObjectStorage.cpp\n+++ b/src/Disks/ObjectStorages/AzureBlobStorage/AzureObjectStorage.cpp\n@@ -85,6 +85,7 @@ class AzureIteratorAsync final : public IObjectStorageIteratorAsync\n                     Poco::Timestamp::fromEpochTime(\n                         std::chrono::duration_cast<std::chrono::seconds>(\n                             static_cast<std::chrono::system_clock::time_point>(blob.Details.LastModified).time_since_epoch()).count()),\n+                    blob.Details.ETag.ToString(),\n                     {}}));\n         }\n \n@@ -184,6 +185,7 @@ void AzureObjectStorage::listObjects(const std::string & path, RelativePathsWith\n                     Poco::Timestamp::fromEpochTime(\n                         std::chrono::duration_cast<std::chrono::seconds>(\n                             static_cast<std::chrono::system_clock::time_point>(blob.Details.LastModified).time_since_epoch()).count()),\n+                    blob.Details.ETag.ToString(),\n                     {}}));\n         }\n \ndiff --git a/src/Disks/ObjectStorages/DiskObjectStorageMetadata.cpp b/src/Disks/ObjectStorages/DiskObjectStorageMetadata.cpp\nindex 44854633d65e..e9114c75077c 100644\n--- a/src/Disks/ObjectStorages/DiskObjectStorageMetadata.cpp\n+++ b/src/Disks/ObjectStorages/DiskObjectStorageMetadata.cpp\n@@ -205,7 +205,7 @@ void DiskObjectStorageMetadata::addObject(ObjectStorageKey key, size_t size)\n     }\n \n     total_size += size;\n-    keys_with_meta.emplace_back(std::move(key), ObjectMetadata{size, {}, {}});\n+    keys_with_meta.emplace_back(std::move(key), ObjectMetadata{size, {}, {}, {}});\n }\n \n ObjectKeyWithMetadata DiskObjectStorageMetadata::popLastObject()\ndiff --git a/src/Disks/ObjectStorages/HDFS/HDFSObjectStorage.cpp b/src/Disks/ObjectStorages/HDFS/HDFSObjectStorage.cpp\nindex dcb2af9d4d33..a28f18880207 100644\n--- a/src/Disks/ObjectStorages/HDFS/HDFSObjectStorage.cpp\n+++ b/src/Disks/ObjectStorages/HDFS/HDFSObjectStorage.cpp\n@@ -221,6 +221,7 @@ void HDFSObjectStorage::listObjects(const std::string & path, RelativePathsWithM\n                 ObjectMetadata{\n                     static_cast<uint64_t>(ls.file_info[i].mSize),\n                     Poco::Timestamp::fromEpochTime(ls.file_info[i].mLastMod),\n+                    \"\",\n                     {}}));\n         }\n \ndiff --git a/src/Disks/ObjectStorages/IObjectStorage.h b/src/Disks/ObjectStorages/IObjectStorage.h\nindex 6410a9a7a738..9478d3a003ec 100644\n--- a/src/Disks/ObjectStorages/IObjectStorage.h\n+++ b/src/Disks/ObjectStorages/IObjectStorage.h\n@@ -54,6 +54,7 @@ struct ObjectMetadata\n {\n     uint64_t size_bytes = 0;\n     Poco::Timestamp last_modified;\n+    std::string etag;\n     ObjectAttributes attributes;\n };\n \ndiff --git a/src/Disks/ObjectStorages/S3/S3ObjectStorage.cpp b/src/Disks/ObjectStorages/S3/S3ObjectStorage.cpp\nindex a6781e0ab352..ee346e2dbee0 100644\n--- a/src/Disks/ObjectStorages/S3/S3ObjectStorage.cpp\n+++ b/src/Disks/ObjectStorages/S3/S3ObjectStorage.cpp\n@@ -145,7 +145,7 @@ class S3IteratorAsync final : public IObjectStorageIteratorAsync\n             auto objects = outcome.GetResult().GetContents();\n             for (const auto & object : objects)\n             {\n-                ObjectMetadata metadata{static_cast<uint64_t>(object.GetSize()), Poco::Timestamp::fromEpochTime(object.GetLastModified().Seconds()), {}};\n+                ObjectMetadata metadata{static_cast<uint64_t>(object.GetSize()), Poco::Timestamp::fromEpochTime(object.GetLastModified().Seconds()), object.GetETag(), {}};\n                 batch.emplace_back(std::make_shared<RelativePathWithMetadata>(object.GetKey(), std::move(metadata)));\n             }\n \n@@ -331,6 +331,7 @@ void S3ObjectStorage::listObjects(const std::string & path, RelativePathsWithMet\n                 ObjectMetadata{\n                     static_cast<uint64_t>(object.GetSize()),\n                     Poco::Timestamp::fromEpochTime(object.GetLastModified().Seconds()),\n+                    object.GetETag(),\n                     {}}));\n \n         if (max_keys)\n@@ -478,6 +479,7 @@ ObjectMetadata S3ObjectStorage::getObjectMetadata(const std::string & path) cons\n     ObjectMetadata result;\n     result.size_bytes = object_info.size;\n     result.last_modified = Poco::Timestamp::fromEpochTime(object_info.last_modification_time);\n+    result.etag = object_info.etag;\n     result.attributes = object_info.metadata;\n \n     return result;\ndiff --git a/src/IO/S3/getObjectInfo.cpp b/src/IO/S3/getObjectInfo.cpp\nindex 9271ad820e43..a21fb9fce54c 100644\n--- a/src/IO/S3/getObjectInfo.cpp\n+++ b/src/IO/S3/getObjectInfo.cpp\n@@ -54,6 +54,7 @@ namespace\n         ObjectInfo object_info;\n         object_info.size = static_cast<size_t>(result.GetContentLength());\n         object_info.last_modification_time = result.GetLastModified().Seconds();\n+        object_info.etag = result.GetETag();\n \n         if (with_metadata)\n             object_info.metadata = result.GetMetadata();\ndiff --git a/src/IO/S3/getObjectInfo.h b/src/IO/S3/getObjectInfo.h\nindex 32f34f740698..30d4c627d379 100644\n--- a/src/IO/S3/getObjectInfo.h\n+++ b/src/IO/S3/getObjectInfo.h\n@@ -15,6 +15,7 @@ struct ObjectInfo\n {\n     size_t size = 0;\n     time_t last_modification_time = 0;\n+    String etag;\n \n     std::map<String, String> metadata = {}; /// Set only if getObjectInfo() is called with `with_metadata = true`.\n };\ndiff --git a/src/Storages/ObjectStorage/StorageObjectStorageSource.cpp b/src/Storages/ObjectStorage/StorageObjectStorageSource.cpp\nindex 3c1c2f9bba1a..4e41e32fd326 100644\n--- a/src/Storages/ObjectStorage/StorageObjectStorageSource.cpp\n+++ b/src/Storages/ObjectStorage/StorageObjectStorageSource.cpp\n@@ -201,7 +201,9 @@ Chunk StorageObjectStorageSource::generate()\n                 {.path = getUniqueStoragePathIdentifier(*configuration, *object_info, false),\n                  .size = object_info->isArchive() ? object_info->fileSizeInArchive() : object_info->metadata->size_bytes,\n                  .filename = &filename,\n-                 .last_modified = object_info->metadata->last_modified});\n+                 .last_modified = object_info->metadata->last_modified,\n+                 .etag = &(object_info->metadata->etag)\n+                 });\n \n             const auto & partition_columns = configuration->getPartitionColumns();\n             if (!partition_columns.empty() && chunk_size && chunk.hasColumns())\ndiff --git a/src/Storages/VirtualColumnUtils.cpp b/src/Storages/VirtualColumnUtils.cpp\nindex 778c9e13adb4..a557848698a9 100644\n--- a/src/Storages/VirtualColumnUtils.cpp\n+++ b/src/Storages/VirtualColumnUtils.cpp\n@@ -112,7 +112,7 @@ void filterBlockWithDAG(ActionsDAGPtr dag, Block & block, ContextPtr context)\n \n NameSet getVirtualNamesForFileLikeStorage()\n {\n-    return {\"_path\", \"_file\", \"_size\", \"_time\"};\n+    return {\"_path\", \"_file\", \"_size\", \"_time\", \"_etag\"};\n }\n \n VirtualColumnsDescription getVirtualsForFileLikeStorage(const ColumnsDescription & storage_columns)\n@@ -131,6 +131,7 @@ VirtualColumnsDescription getVirtualsForFileLikeStorage(const ColumnsDescription\n     add_virtual(\"_file\", std::make_shared<DataTypeLowCardinality>(std::make_shared<DataTypeString>()));\n     add_virtual(\"_size\", makeNullable(std::make_shared<DataTypeUInt64>()));\n     add_virtual(\"_time\", makeNullable(std::make_shared<DataTypeDateTime>()));\n+    add_virtual(\"_etag\", std::make_shared<DataTypeLowCardinality>(std::make_shared<DataTypeString>()));\n \n     return desc;\n }\n@@ -226,6 +227,13 @@ void addRequestedFileLikeStorageVirtualsToChunk(\n             else\n                 chunk.addColumn(virtual_column.type->createColumnConstWithDefaultValue(chunk.getNumRows())->convertToFullColumnIfConst());\n         }\n+        else if (virtual_column.name == \"_etag\")\n+        {\n+            if (virtual_values.etag)\n+                chunk.addColumn(virtual_column.type->createColumnConst(chunk.getNumRows(), (*virtual_values.etag))->convertToFullColumnIfConst());\n+            else\n+                chunk.addColumn(virtual_column.type->createColumnConstWithDefaultValue(chunk.getNumRows())->convertToFullColumnIfConst());\n+        }\n     }\n }\n \ndiff --git a/src/Storages/VirtualColumnUtils.h b/src/Storages/VirtualColumnUtils.h\nindex fbfbdd6c6ccf..dc1782775564 100644\n--- a/src/Storages/VirtualColumnUtils.h\n+++ b/src/Storages/VirtualColumnUtils.h\n@@ -74,7 +74,7 @@ struct VirtualsForFileLikeStorage\n     std::optional<size_t> size { std::nullopt };\n     const String * filename { nullptr };\n     std::optional<Poco::Timestamp> last_modified { std::nullopt };\n-\n+    const String * etag { nullptr };\n };\n \n void addRequestedFileLikeStorageVirtualsToChunk(\ndiff --git a/utils/check-style/aspell-ignore/en/aspell-dict.txt b/utils/check-style/aspell-ignore/en/aspell-dict.txt\nindex 68734ef5ec84..ebb58e493cb1 100644\n--- a/utils/check-style/aspell-ignore/en/aspell-dict.txt\n+++ b/utils/check-style/aspell-ignore/en/aspell-dict.txt\n@@ -247,6 +247,7 @@ DoubleDelta\n Doxygen\n Durre\n ECMA\n+ETag\n Ecto\n EdgeAngle\n EdgeLengthKm\n@@ -1577,6 +1578,7 @@ enum's\n enums\n erfc\n errorCodeToName\n+etag\n evalMLMethod\n exFAT\n expiryMsec\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02245_s3_virtual_columns.reference b/tests/queries/0_stateless/02245_s3_virtual_columns.reference\nindex 09383c518884..3822f6ffa0fb 100644\n--- a/tests/queries/0_stateless/02245_s3_virtual_columns.reference\n+++ b/tests/queries/0_stateless/02245_s3_virtual_columns.reference\n@@ -11,5 +11,5 @@ create table test_02245_2 (a UInt64, _path Int32) engine = S3(s3_conn, filename=\n insert into test_02245_2 select 1, 2 settings s3_truncate_on_insert=1;\n select * from test_02245_2;\n 1\t2\n-select _path from test_02245_2;\n-2\n+select _path, isNotNull(_etag) from test_02245_2;\n+2\t1\ndiff --git a/tests/queries/0_stateless/02245_s3_virtual_columns.sql b/tests/queries/0_stateless/02245_s3_virtual_columns.sql\nindex e86344d20940..a66b212e5c7d 100644\n--- a/tests/queries/0_stateless/02245_s3_virtual_columns.sql\n+++ b/tests/queries/0_stateless/02245_s3_virtual_columns.sql\n@@ -12,4 +12,4 @@ drop table if exists test_02245_2;\n create table test_02245_2 (a UInt64, _path Int32) engine = S3(s3_conn, filename='test_02245_2', format=Parquet);\n insert into test_02245_2 select 1, 2 settings s3_truncate_on_insert=1;\n select * from test_02245_2;\n-select _path from test_02245_2;\n+select _path, isNotNull(_etag) from test_02245_2;\n",
  "problem_statement": "Add virtual columns `_etag`, `_last_modified`, `_storage_class` for `S3` storage.\nSee https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListObjectsV2.html\r\nSimilar to `_size`.\n",
  "hints_text": "@alexey-milovidov Hi,  I want to give it a try.\r\n\nhttps://github.com/ClickHouse/ClickHouse/issues/64402\n@skyoct, this will be very appreciated, thank you!",
  "created_at": "2024-06-18T11:18:17Z",
  "modified_files": [
    "docs/en/engines/table-engines/integrations/s3.md",
    "src/Disks/ObjectStorages/AzureBlobStorage/AzureObjectStorage.cpp",
    "src/Disks/ObjectStorages/DiskObjectStorageMetadata.cpp",
    "src/Disks/ObjectStorages/HDFS/HDFSObjectStorage.cpp",
    "src/Disks/ObjectStorages/IObjectStorage.h",
    "src/Disks/ObjectStorages/S3/S3ObjectStorage.cpp",
    "src/IO/S3/getObjectInfo.cpp",
    "src/IO/S3/getObjectInfo.h",
    "src/Storages/ObjectStorage/StorageObjectStorageSource.cpp",
    "src/Storages/VirtualColumnUtils.cpp",
    "src/Storages/VirtualColumnUtils.h",
    "utils/check-style/aspell-ignore/en/aspell-dict.txt"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/02245_s3_virtual_columns.reference",
    "tests/queries/0_stateless/02245_s3_virtual_columns.sql"
  ]
}