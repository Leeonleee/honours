{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 37189,
  "instance_id": "ClickHouse__ClickHouse-37189",
  "issue_numbers": [
    "35432"
  ],
  "base_commit": "c8481b018d265f53aa92f9e0de9bfef9d18ba985",
  "patch": "diff --git a/src/Functions/h3kRing.cpp b/src/Functions/h3kRing.cpp\nindex a801fd299d65..a68f2a5e23d8 100644\n--- a/src/Functions/h3kRing.cpp\n+++ b/src/Functions/h3kRing.cpp\n@@ -11,6 +11,7 @@\n #include <Functions/FunctionFactory.h>\n #include <Functions/IFunction.h>\n #include <Common/typeid_cast.h>\n+#include <Interpreters/castColumn.h>\n \n #include <h3api.h>\n \n@@ -51,10 +52,10 @@ class FunctionH3KRing : public IFunction\n                 arg->getName(), 1, getName());\n \n         arg = arguments[1].get();\n-        if (!WhichDataType(arg).isUInt16())\n+        if (!WhichDataType(arg).isNativeUInt())\n             throw Exception(\n                 ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,\n-                \"Illegal type {} of argument {} of function {}. Must be UInt16\",\n+                \"Illegal type {} of argument {} of function {}. Must be unsigned native integer.\",\n                 arg->getName(),\n                 2,\n                 getName());\n@@ -80,7 +81,8 @@ class FunctionH3KRing : public IFunction\n         const auto & data_hindex = col_hindex->getData();\n \n         /// ColumnUInt16 is sufficient as the max value of 2nd arg is checked (arg > 0 < 10000) in implementation below\n-        const auto * col_k = checkAndGetColumn<ColumnUInt16>(non_const_arguments[1].column.get());\n+        auto cast_result = castColumnAccurate(non_const_arguments[1], std::make_shared<DataTypeUInt16>());\n+        const auto * col_k = checkAndGetColumn<ColumnUInt16>(cast_result.get());\n         if (!col_k)\n             throw Exception(\n                 ErrorCodes::ILLEGAL_COLUMN,\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01042_h3_k_ring.reference b/tests/queries/0_stateless/01042_h3_k_ring.reference\nindex 24f4b9885ce4..770468da350b 100644\n--- a/tests/queries/0_stateless/01042_h3_k_ring.reference\n+++ b/tests/queries/0_stateless/01042_h3_k_ring.reference\n@@ -1,5 +1,7 @@\n [581250224954015743,581259021047037951,581267817140060159,581276613233082367,581500913605148671,581518505791193087,581764796395814911]\n [581276613233082367]\n+[581250224954015743,581259021047037951,581267817140060159,581276613233082367,581500913605148671,581518505791193087,581764796395814911]\n+[581276613233082367]\n [578466261512486911,578712552117108735,578888473977552895,579205133326352383,579275502070530047,579662530163507199,579768083279773695]\n [580995138256371711,581144671837749247,581162264023793663,581166662070304767,581171060116815871,581250224954015743,581254623000526847,581259021047037951,581263419093549055,581267817140060159,581272215186571263,581276613233082367,581531699930726399,581536097977237503,581549292116770815,581553690163281919,581558088209793023,581747204209770495,581764796395814911]\n [589624655266971647,589625205022785535,589626854290227199,589627404046041087,589642797208829951,589644996232085503,589708218150682623,589708767906496511,589709317662310399,589709867418124287,589710417173938175,589710966929752063,589711516685565951,589714815220449279,589715914732077055,589725810336727039,589726909848354815,589727459604168703,589728009359982591,589729108871610367,589734606429749247,589735156185563135,589735705941377023,589736255697190911,589736805453004799,589737355208818687,589737904964632575,589742303011143679,589744502034399231,589745051790213119,589752198615793663,589752748371607551,589753298127421439,589753847883235327,589754397639049215,589754947394863103,589755497150676991]\ndiff --git a/tests/queries/0_stateless/01042_h3_k_ring.sql b/tests/queries/0_stateless/01042_h3_k_ring.sql\nindex d450954ab7a0..8931efc44c2c 100644\n--- a/tests/queries/0_stateless/01042_h3_k_ring.sql\n+++ b/tests/queries/0_stateless/01042_h3_k_ring.sql\n@@ -5,6 +5,9 @@ SELECT h3kRing(581276613233082367, toUInt16(0));\n SELECT h3kRing(581276613233082367, -1); -- { serverError 43 }\n SELECT h3kRing(581276613233082367, toUInt16(-1)); -- { serverError 12 }\n \n+SELECT arraySort(h3kRing(581276613233082367, 1));\n+SELECT h3kRing(581276613233082367, 0);\n+SELECT h3kRing(581276613233082367, -1); -- { serverError 43 }\n \n DROP TABLE IF EXISTS h3_indexes;\n \n",
  "problem_statement": "Illegal type UInt8 of argument 2 of function h3kRing.\n**Describe the unexpected behaviour**\r\nWhen I use function h3kRing,illegal type error occured.\r\n\r\nOn issue [34708](https://github.com/ClickHouse/ClickHouse/issues/34708),h3 functions have illegal parameter type.Old problem resolved in ClickHouse 22.3.2.1.But error occured when I execute query:\r\n```sql\r\nselect AAA,BBB,CCC,DDD,h3kRing(DDD,1),EEE,FFF,GGG from core.dis_last;\r\n```\r\n```\r\n2022.03.20 02:18:23.816553 [ 49963 ] {4d9fcd3e-f7c8-41e8-b0d2-1f321658437b} <Error> DynamicQueryHandler: Code: 43. DB::Exception: Illegal type UInt8 of argument 2 of function h3kRing. Must be UInt16: While processing AAA,BBB,CCC,DDD,h3kRing(DDD,1),EEE,FFF,GGG. (ILLEGAL_TYPE_OF_ARGUMENT), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0xa4dde1a in /usr/bin/clickhouse\r\n1. DB::Exception::Exception<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(int, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&&, int&&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >&&) @ 0x10dd9f61 in /usr/bin/clickhouse\r\n2. ? @ 0x10de521c in /usr/bin/clickhouse\r\n3. DB::IFunction::getReturnTypeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&) const @ 0xc9bd641 in /usr/bin/clickhouse\r\n4. DB::IFunctionOverloadResolver::getReturnType(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&) const @ 0x139ce039 in /usr/bin/clickhouse\r\n5. DB::IFunctionOverloadResolver::build(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&) const @ 0x139cecd6 in /usr/bin/clickhouse\r\n6. DB::ActionsDAG::addFunction(std::__1::shared_ptr<DB::IFunctionOverloadResolver> const&, std::__1::vector<DB::ActionsDAG::Node const*, std::__1::allocator<DB::ActionsDAG::Node const*> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >) @ 0x1403a385 in /usr/bin/clickhouse\r\n7. DB::ScopeStack::addFunction(std::__1::shared_ptr<DB::IFunctionOverloadResolver> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >) @ 0x141e4ec5 in /usr/bin/clickhouse\r\n8. DB::ActionsMatcher::visit(DB::ASTFunction const&, std::__1::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x141eaa98 in /usr/bin/clickhouse\r\n9. DB::ActionsMatcher::visit(DB::ASTExpressionList&, std::__1::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x141ed778 in /usr/bin/clickhouse\r\n10. DB::InDepthNodeVisitor<DB::ActionsMatcher, true, false, std::__1::shared_ptr<DB::IAST> const>::visit(std::__1::shared_ptr<DB::IAST> const&) @ 0x141bb337 in /usr/bin/clickhouse\r\n11. DB::ExpressionAnalyzer::getRootActions(std::__1::shared_ptr<DB::IAST> const&, bool, std::__1::shared_ptr<DB::ActionsDAG>&, bool) @ 0x141bb138 in /usr/bin/clickhouse\r\n12. DB::SelectQueryExpressionAnalyzer::appendSelect(DB::ExpressionActionsChain&, bool) @ 0x141c7109 in /usr/bin/clickhouse\r\n13. DB::ExpressionAnalysisResult::ExpressionAnalysisResult(DB::SelectQueryExpressionAnalyzer&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, bool, bool, bool, std::__1::shared_ptr<DB::FilterDAGInfo> const&, DB::Block const&) @ 0x141cbd2d in /usr/bin/clickhouse\r\n14. DB::InterpreterSelectQuery::getSampleBlockImpl() @ 0x144d648d in /usr/bin/clickhouse\r\n15. ? @ 0x144ce2a3 in /usr/bin/clickhouse\r\n16. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const>, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::__1::unordered_map<DB::PreparedSetKey, std::__1::shared_ptr<DB::Set>, DB::PreparedSetKey::Hash, std::__1::equal_to<DB::PreparedSetKey>, std::__1::allocator<std::__1::pair<DB::PreparedSetKey const, std::__1::shared_ptr<DB::Set> > > >) @ 0x144c8caa in /usr/bin/clickhouse\r\n17. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const>, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x144c7334 in /usr/bin/clickhouse\r\n18. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::__1::shared_ptr<DB::IAST> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x1468e4ca in /usr/bin/clickhouse\r\n19. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const>, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x1468c910 in /usr/bin/clickhouse\r\n20. DB::InterpreterFactory::get(std::__1::shared_ptr<DB::IAST>&, std::__1::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x1446da50 in /usr/bin/clickhouse\r\n21. ? @ 0x148d096c in /usr/bin/clickhouse\r\n22. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::__1::shared_ptr<DB::Context>, std::__1::function<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>, std::__1::optional<DB::FormatSettings> const&) @ 0x148d3fca in /usr/bin/clickhouse\r\n23. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::__1::optional<DB::CurrentThread::QueryScope>&) @ 0x151cdae7 in /usr/bin/clickhouse\r\n24. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&) @ 0x151d2292 in /usr/bin/clickhouse\r\n25. DB::HTTPServerConnection::run() @ 0x1545979b in /usr/bin/clickhouse\r\n26. Poco::Net::TCPServerConnection::start() @ 0x164b264f in /usr/bin/clickhouse\r\n27. Poco::Net::TCPServerDispatcher::run() @ 0x164b4aa1 in /usr/bin/clickhouse\r\n28. Poco::PooledThread::run() @ 0x16671e49 in /usr/bin/clickhouse\r\n29. Poco::ThreadImpl::runnableEntry(void*) @ 0x1666f1a0 in /usr/bin/clickhouse\r\n30. start_thread @ 0x7ea5 in /usr/lib64/libpthread-2.17.so\r\n31. __clone @ 0xfeb0d in /usr/lib64/libc-2.17.so\r\n (version 22.3.2.1)\r\n```\r\nI can bypass the error using:\r\n```sql\r\nselect AAA,BBB,CCC,DDD,h3kRing(DDD,toUInt16(1)),EEE,FFF,GGG from core.dis_last;\r\n```\r\n\r\n**How to reproduce**\r\nClickHouse 22.3.2.1 Revision 54455.\r\ncore.dis_last DDL:\r\n```sql\r\ncreate table core.dis_last (\r\nAAA DateTime,\r\nBBB UInt16,\r\nCCC String,\r\nDDD UInt64,\r\nEEE String,\r\nFFF String,\r\nGGG String\r\n)\r\n```\r\n\r\n**Expected behavior**\r\nNo need to add toUInt64() on function `h3kRing(h3index, k)` parameter k.\r\n\n",
  "hints_text": "",
  "created_at": "2022-05-13T13:22:51Z",
  "modified_files": [
    "src/Functions/h3kRing.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/01042_h3_k_ring.reference",
    "tests/queries/0_stateless/01042_h3_k_ring.sql"
  ]
}