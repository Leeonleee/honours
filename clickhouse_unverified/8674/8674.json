{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 8674,
  "instance_id": "ClickHouse__ClickHouse-8674",
  "issue_numbers": [
    "7799"
  ],
  "base_commit": "5778e59f3812c34e04c7a10633b890eab7b3830e",
  "patch": "diff --git a/dbms/src/DataTypes/DataTypeSet.h b/dbms/src/DataTypes/DataTypeSet.h\nindex 21ab50a7c88f..7ef0d9312796 100644\n--- a/dbms/src/DataTypes/DataTypeSet.h\n+++ b/dbms/src/DataTypes/DataTypeSet.h\n@@ -1,6 +1,7 @@\n #pragma once\n \n #include <DataTypes/IDataTypeDummy.h>\n+#include <Columns/ColumnSet.h>\n \n \n namespace DB\n@@ -18,6 +19,9 @@ class DataTypeSet final : public IDataTypeDummy\n     bool equals(const IDataType & rhs) const override { return typeid(rhs) == typeid(*this); }\n     bool isParametric() const override { return true; }\n \n+    // Used for expressions analysis.\n+    MutableColumnPtr createColumn() const override { return ColumnSet::create(0, nullptr); }\n+\n     // Used only for debugging, making it DUMPABLE\n     Field getDefault() const override { return Tuple(); }\n };\n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/01063_create_column_set.reference b/dbms/tests/queries/0_stateless/01063_create_column_set.reference\nnew file mode 100644\nindex 000000000000..573541ac9702\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/01063_create_column_set.reference\n@@ -0,0 +1,1 @@\n+0\ndiff --git a/dbms/tests/queries/0_stateless/01063_create_column_set.sql b/dbms/tests/queries/0_stateless/01063_create_column_set.sql\nnew file mode 100644\nindex 000000000000..733f90971f9c\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/01063_create_column_set.sql\n@@ -0,0 +1,12 @@\n+DROP TABLE IF EXISTS mt;\n+CREATE TABLE mt (x UInt8, y Date) ENGINE = MergeTree ORDER BY x;\n+\n+SELECT count()\n+FROM mt\n+ANY LEFT JOIN\n+(\n+    SELECT 1 AS x\n+) USING (x)\n+PREWHERE x IN (1) WHERE y = today();\n+\n+DROP TABLE mt;\n",
  "problem_statement": "19.17 Method createColumn() is not implemented for data type Set.\nThe test case:\r\n```\r\nClickHouse client version 19.17.2.4 (official build).\r\nConnecting to localhost:9000 as user default.\r\nConnected to ClickHouse server version 19.17.2 revision 54428.\r\n\r\n:) select count()\r\nFROM   system.query_log\r\nANY LEFT JOIN (select 1 as port) USING port\r\nPREWHERE type in (1)\r\nWHERE event_date = today()\r\n\r\nSELECT count()\r\nFROM system.query_log\r\nANY LEFT JOIN\r\n(\r\n    SELECT 1 AS port\r\n) USING (port)\r\nPREWHERE type IN (1)\r\nWHERE event_date = today()\r\n\r\nReceived exception from server (version 19.17.2):\r\nCode: 48. DB::Exception: Received from localhost:9000. DB::Exception: Method createColumn() is not implemented for data type Set.\r\n\r\n0 rows in set. Elapsed: 0.002 sec.\r\n```\n",
  "hints_text": "Data type mismatch. U can use toUInt16 to convert.\r\n\r\n```SQL\r\nSELECT\r\n\tcount()\r\nFROM\r\n\tsystem.query_log ANY\r\nLEFT JOIN (\r\n\tSELECT toUInt16(1) AS port)\r\n\t\tUSING port PREWHERE TYPE IN (1)\r\nWHERE\r\n\tevent_date = today();\r\n```\r\n\r\nBUT, In version 19.11.x, system will report the exception message:\r\n```\r\nDB::Exception: Type mismatch of columns to JOIN by: port UInt16 at left, port UInt8 at right\r\n```\r\n\r\nthis very clearly!\r\n\r\nIn version 19.13.x, system accept that, seems convert the type default, and will not through any exception.\r\n \r\nIn version 19.17, system through the confused exception message:\r\n```\r\nDB::Exception: Method createColumn() is not implemented for data type Set.\r\n```\nI think the issue is more complicated.\r\nThis query fails as well:\r\n```\r\nselect count()\r\nFROM   system.query_log\r\nANY LEFT JOIN system.query_log USING port\r\nPREWHERE type in (1)\r\nWHERE event_date = today()\r\n```\r\nAnd this query:\r\n```\r\nselect count()\r\nFROM   system.query_log\r\nANY LEFT JOIN system.query_thread_log USING query_id\r\nPREWHERE type in (1)\r\nWHERE event_date = today()\r\n```\nThis issue also exists in version 19.17.4.11 (official build). Any workaround?\nIt seems that the `WHERE` clause should move to subqueries.\r\n\r\nThis query works:\r\n\r\n```sql\r\nSELECT count()\r\nFROM\r\n(\r\n    SELECT query_id\r\n    FROM system.query_log\r\n    PREWHERE type IN (1)\r\n    WHERE event_date = today()\r\n)\r\nANY LEFT JOIN system.query_thread_log USING (query_id)\r\n```\nin PREWHERE section\r\n```Method createColumn() is not implemented for data type Function((String, String) -> String)```\r\n\r\n```\r\nSELECT\r\n    arrayJoin AS kv_key\r\nFROM system.query_log\r\nARRAY JOIN ProfileEvents.Names AS arrayJoin\r\nPREWHERE has(arrayMap(key -> key, ProfileEvents.Names), 'Query')\r\nWHERE arrayJoin = 'Query'\r\nLIMIT 1\r\n```\r\n\r\nConnected to ClickHouse server version 19.17.4 revision 54428\nI too am getting this error with:\r\n\r\n`DB::Exception: Method createColumn() is not implemented for data type Set (version 19.17.4.11 (official build))`\r\n\r\n```sql\r\nSELECT\r\n\tplacement,\r\n\tsum(impressions) as impressionSum,\r\n\tsum(validPOI) as insidePOI,\r\n\tsum(validDeviceId) as validDeviceId,\r\n\tsum(cellularCentroid) as cellularCentroid,\r\n\tsum(sumMinDistToPOI) as sumMinDistToPOI,\r\n\tsum(geoSupplied) as geoSupplied\r\nFROM\r\n\timpressions\r\nINNER JOIN mysql('127.0.0.1:3306',\r\n\t'clientdashboard',\r\n\t'campaigns',\r\n\t'root',\r\n\t'fancypassword') as campaigns ON\r\n\timpressions.client_id = campaigns.id\r\nWHERE\r\n\tplacement IN ('Camp')\r\n\tAND campaigns.ref IN ('russell')\r\n\tAND date >= toDate('2019-11-20')\r\n\tAND date <= toDate('2019-12-04')\r\nGROUP BY\r\n\tplacement\r\n```\nI have the same problem:\r\n\r\n`DB::Exception: The createColumn() method is not implemented for the Set data type (version 19.17.5.18 (official build)). `\r\n```\r\n\r\nSELECT links.ID\r\n     , links.Type\r\n     , count()\r\n     , toDateTime(toStartOfInterval(StartTime, INTERVAL 1 week)) AS StartTime\r\nFROM shows\r\n         ALL\r\n         INNER JOIN\r\n     (\r\n         SELECT * FROM VALUES('ID UInt64, CampaignContentID UInt64, Type String', (23, 44, 'campaign'))\r\n         ) AS links ON shows.CampaignContentID = links.CampaignContentID\r\nWHERE PlatformID = 9\r\n  AND DeviceID IN (5)\r\n  AND shows.StartTime >= '2019-11-25 00:00:00'\r\n  AND shows.EndTime <= '2020-01-05 23:59:59'\r\nGROUP BY links.ID\r\n       , links.Type\r\n       , shows.CampaignID\r\n       , StartTime;\r\n```\r\n\r\nThe error disappears if (one of):\r\n- remove the JOIN from the sql\r\n- remove the IN operator from the DeviceID IN (5)\r\n\r\nBut I'm pretty sure the problem is with using JOIN.\r\n\r\nI had to rollback to version 19.16.2.2.\nSame problem on 19.17.4.11\r\nfollowing query works if remove `INNER JOIN`\r\nof if remove `i.session2_stat_crm_tracker IN (...)`\r\n\r\nI didn't understand error message and how corresponding JOIN and WHERE in different columns (`i.pays` in JOIN and `i.session2_stat_crm_tracker` in WHERE)\r\n\r\n```sql\r\nSELECT toDate(i.date)                  AS day,\r\n       i.offer_type                    AS offer_type,\r\n       sum(i.castats)                  AS revenue,\r\n       uniqExact(i.session2_sessionid) AS visits\r\nFROM wister.raw_data AS i\r\nINNER JOIN prod.mysql_pays p ON (i.pays = p.nom)\r\nWHERE 1\r\n  AND i.date >= '2019-01-01 00:00:00'\r\n  AND i.date < '2019-12-19 00:00:00'\r\n  AND i.date < '2019-12-18 00:00:00'\r\n  AND i.code_affilie LIKE 'aff%'\r\n  AND (i.session2_stat_crm_tracker IN (''\r\n    , 'CRM_REDIRECT'\r\n    , 'CRM_NATIVE_REDIRECT'\r\n    , 'CRM_NO'\r\n    , 'CRM_NO_NATIVE'))\r\n\r\n  AND i.date >= '2019-01-01 00:00:00'\r\n  AND i.date < '2019-12-19 00:00:00'\r\n  AND i.date < '2019-12-18 00:00:00'\r\n  AND i.code_affilie LIKE 'aff%'\r\n AND p.code IN ('ITA') -- work \r\n\r\nGROUP BY day, offer_type\r\n```\r\n\r\n Stack trace:\r\n```\r\n0. 0x3512b60 StackTrace::StackTrace() /usr/bin/clickhouse\r\n1. 0x351cdaf DB::Exception::Exception(std::string const&, int) /usr/bin/clickhouse\r\n2. 0x60cbaeb DB::IDataTypeDummy::createColumn() const /usr/bin/clickhouse\r\n3. 0x61bf648 ? /usr/bin/clickhouse\r\n4. 0x61ca114 DB::InterpreterSelectQuery::analyzeExpressions(DB::ASTSelectQuery const&, DB::SelectQueryExpressionAnalyzer&, DB::QueryProcessingStage::Enum, DB::QueryProcessingStage::Enum, DB::Context const&, std::shared_ptr<DB::IStorage> const&, bool, std::shared_ptr<DB::FilterInfo> const&, DB::Block const&) /usr/bin/clickhouse\r\n5. 0x61caa36 DB::InterpreterSelectQuery::getSampleBlockImpl() /usr/bin/clickhouse\r\n6. 0x61cc439 ? /usr/bin/clickhouse\r\n7. 0x61cd387 DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, DB::Context const&, std::shared_ptr<DB::IBlockInputStream> const&, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<std::string, std::allocator<std::string> > const&) /usr/bin/clickhouse\r\n8. 0x61cde4b DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::vector<std::string, std::allocator<std::string> > const&) /usr/bin/clickhouse\r\n9. 0x61f7e63 DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::vector<std::string, std::allocator<std::string> > const&) /usr/bin/clickhouse\r\n10. 0x61af8bf DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, DB::Context&, DB::QueryProcessingStage::Enum) /usr/bin/clickhouse\r\n11. 0x62d476a ? /usr/bin/clickhouse\r\n12. 0x62d72ba DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, DB::Context&, std::function<void (std::string const&)>, std::function<void (std::string const&)>) /usr/bin/clickhouse\r\n13. 0x359e471 DB::HTTPHandler::processQuery(Poco::Net::HTTPServerRequest&, HTMLForm&, Poco::Net::HTTPServerResponse&, DB::HTTPHandler::Output&) /usr/bin/clickhouse\r\n14. 0x35a14b1 DB::HTTPHandler::handleRequest(Poco::Net::HTTPServerRequest&, Poco::Net::HTTPServerResponse&) /usr/bin/clickhouse\r\n15. 0x6dbcc59 Poco::Net::HTTPServerConnection::run() /usr/bin/clickhouse\r\n16. 0x6db98bf Poco::Net::TCPServerConnection::start() /usr/bin/clickhouse\r\n17. 0x6db9fb5 Poco::Net::TCPServerDispatcher::run() /usr/bin/clickhouse\r\n18. 0x723f481 Poco::PooledThread::run() /usr/bin/clickhouse\r\n19. 0x723b208 Poco::ThreadImpl::runnableEntry(void*) /usr/bin/clickhouse\r\n20. 0x791d69f ? /usr/bin/clickhouse\r\n21. 0x7fdf89261dc5 start_thread /usr/lib64/libpthread-2.17.so\r\n22. 0x7fdf88d8b1cd clone /usr/lib64/libc-2.17.so\r\n```\nthe workaround which ok for me is `SELECT ... SETTINGS optimize_move_to_prewhere=0;`\ndoesn't reproduce on `19.19.1.1956` testing release installed from official Yandex RPM repo\n> doesn't reproduce on `19.19.1.1956` testing release installed from official Yandex RPM repo\r\n\r\n```\r\nClickHouse client version 19.19.1.1957 (official build).\r\nConnecting to localhost:9000 as user default.\r\nConnected to ClickHouse server version 19.19.1 revision 54430.\r\n\r\nSELECT count()\r\nFROM system.query_log\r\nANY LEFT JOIN\r\n(\r\n    SELECT 1 AS port\r\n) USING (port)\r\nPREWHERE type IN (1)\r\nWHERE event_date = today()\r\n\r\nReceived exception from server (version 19.19.1):\r\nCode: 48. DB::Exception: Received from localhost:9000. DB::Exception: Method createColumn() is not implemented for data type Set.\r\n\r\n```\nWe are also rolling back as a result of this bug.  Fixing our various queries has proven very cumbersome.\nI also have this problem\uff0cBut I did\u3002\r\nAdd one level of sub query to solve the problem\r\nselect  *  \r\nfrom A \r\nANY LEFT JOIN B \r\nON A.a=B.a\r\nWHERE A.a IN (XXX)\r\nAND A.b IN (XXX);\r\n\r\nok\uff0cchange\r\n\r\nselect  *  \r\nfrom \uff08select * from A \uff09AS A  \r\nANY LEFT JOIN B \r\nON A.a=B.a\r\nWHERE A.a IN (XXX)\r\nAND A.b IN (XXX);\r\n\r\nThen right\uff01\r\ncome from china!\r\n\r\n\r\n\r\n\r\n\r\n\nUnfortunately we had the same issue, when we upgraded our cluster to the stable version 19.17.4.11.\r\nI analyzed the exception's stack trace and the source code and it seems to be cause by a performance improvement, which was introduced with version 19.17.4.11:\r\n\"Run another pass of syntax/expression analysis to get potential optimizations after constant predicates are folded. #7497 (Amos Bird)\"\r\n\r\nIt happens, when I'm using the IN operator within the prewhere clause and the statement contains a JOIN. The exception can also be raised, when the IN operator is used in the where clause and the optimizer moves it to prewhere internally.\r\n\r\nI analyzed the ClickHouse source code. It seems to generate sample blocks for further optimization. If a block contains an IN operator, which uses the \"Set\" data type as operand, it cannot sanitize the column.\r\n\r\nWe're using ReplicatedReplacingMergeTree and ReplacingMergeTree tables. Maybe some other engines are not affected.\r\n\r\nMy stack trace:\r\n```\r\n<Error> HTTPHandler: Code: 48, e.displayText() = DB::Exception: Method createColumn() is not implemented for data type Set, Stack trace:\r\n \r\n0.  StackTrace::StackTrace() /usr/bin/clickhouse\r\n1.  DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int) /usr/bin/clickhouse\r\n2.  DB::IDataTypeDummy::createColumn() const /usr/bin/clickhouse\r\n3.  ? /usr/bin/clickhouse\r\n4.  DB::InterpreterSelectQuery::analyzeExpressions(DB::ASTSelectQuery const&, DB::SelectQueryExpressionAnalyzer&, DB::QueryProcessingStage::Enum, DB::QueryProcessingStage::Enum, DB::Context const&, std::shared_ptr<DB::IStorage> const&, bool, std::shared_ptr<DB::FilterInfo> const&, DB::Block const&) /usr/bin/clickhouse\r\n5.  DB::InterpreterSelectQuery::getSampleBlockImpl() /usr/bin/clickhouse\r\n6.  ? /usr/bin/clickhouse\r\n7.  DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, DB::Context const&, std::shared_ptr<DB::IBlockInputStream> const&, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&) /usr/bin/clickhouse\r\n8.  DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&) /usr/bin/clickhouse\r\n9.  DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&) /usr/bin/clickhouse\r\n10. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::shared_ptr<DB::IAST> const&, DB::Context const&) /usr/bin/clickhouse\r\n11. DB::getNamesAndTypeListFromTableExpression(DB::ASTTableExpression const&, DB::Context const&) /usr/bin/clickhouse\r\n12. DB::getDatabaseAndTablesWithColumnNames[abi:cxx11](DB::ASTSelectQuery const&, DB::Context const&) /usr/bin/clickhouse\r\n13. DB::SyntaxAnalyzer::analyze(std::shared_ptr<DB::IAST>&, DB::NamesAndTypesList const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, std::shared_ptr<DB::IStorage>, DB::NamesAndTypesList const&) const /usr/bin/clickhouse\r\n14. ? /usr/bin/clickhouse\r\n15. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, DB::Context const&, std::shared_ptr<DB::IBlockInputStream> const&, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&) /usr/bin/clickhouse\r\n16. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&) /usr/bin/clickhouse\r\n17. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&) /usr/bin/clickhouse\r\n18. DB::InterpreterInsertQuery::execute() /usr/bin/clickhouse\r\n19. ? /usr/bin/clickhouse\r\n20. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, DB::Context&, std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>, std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>) /usr/bin/clickhouse\r\n21. DB::HTTPHandler::processQuery(Poco::Net::HTTPServerRequest&, HTMLForm&, Poco::Net::HTTPServerResponse&, DB::HTTPHandler::Output&) /usr/bin/clickhouse\r\n22. DB::HTTPHandler::handleRequest(Poco::Net::HTTPServerRequest&, Poco::Net::HTTPServerResponse&) /usr/bin/clickhouse\r\n23. Poco::Net::HTTPServerConnection::run() /usr/bin/clickhouse\r\n24. Poco::Net::TCPServerConnection::start() /usr/bin/clickhouse\r\n25. Poco::Net::TCPServerDispatcher::run() /usr/bin/clickhouse\r\n26. Poco::PooledThread::run() /usr/bin/clickhouse\r\n27. Poco::ThreadImpl::runnableEntry(void*) /usr/bin/clickhouse\r\n28. ? /usr/bin/clickhouse\r\n29. start_thread /lib/x86_64-linux-gnu/libpthread-2.27.so\r\n30. clone /lib/x86_64-linux-gnu/libc-2.27.so\r\n (version 19.17.6.36 (official build))\r\n```",
  "created_at": "2020-01-15T18:20:52Z"
}