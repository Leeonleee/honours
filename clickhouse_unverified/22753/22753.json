{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 22753,
  "instance_id": "ClickHouse__ClickHouse-22753",
  "issue_numbers": [
    "22399",
    "21671"
  ],
  "base_commit": "190846c652a1e6919af34517c2ff6f6b9a79a86b",
  "patch": "diff --git a/src/Interpreters/CollectJoinOnKeysVisitor.cpp b/src/Interpreters/CollectJoinOnKeysVisitor.cpp\nindex a0ea27e99058..3b3fdaa65cb7 100644\n--- a/src/Interpreters/CollectJoinOnKeysVisitor.cpp\n+++ b/src/Interpreters/CollectJoinOnKeysVisitor.cpp\n@@ -16,26 +16,6 @@ namespace ErrorCodes\n     extern const int LOGICAL_ERROR;\n }\n \n-namespace\n-{\n-\n-void addAndTerm(ASTPtr & ast, const ASTPtr & term)\n-{\n-    if (!ast)\n-        ast = term;\n-    else\n-        ast = makeASTFunction(\"and\", ast, term);\n-}\n-\n-/// If this is an inner join and the expression related to less than 2 tables, then move it to WHERE\n-bool canMoveToWhere(std::pair<size_t, size_t> table_numbers, ASTTableJoin::Kind kind)\n-{\n-    return kind == ASTTableJoin::Kind::Inner &&\n-        (table_numbers.first == table_numbers.second || table_numbers.first == 0 || table_numbers.second == 0);\n-}\n-\n-}\n-\n void CollectJoinOnKeysMatcher::Data::addJoinKeys(const ASTPtr & left_ast, const ASTPtr & right_ast,\n                                                  const std::pair<size_t, size_t> & table_no)\n {\n@@ -49,8 +29,7 @@ void CollectJoinOnKeysMatcher::Data::addJoinKeys(const ASTPtr & left_ast, const\n     else\n         throw Exception(\"Cannot detect left and right JOIN keys. JOIN ON section is ambiguous.\",\n                         ErrorCodes::AMBIGUOUS_COLUMN_NAME);\n-    if (table_no.first != table_no.second && table_no.first > 0 && table_no.second > 0)\n-        has_some = true;\n+    has_some = true;\n }\n \n void CollectJoinOnKeysMatcher::Data::addAsofJoinKeys(const ASTPtr & left_ast, const ASTPtr & right_ast,\n@@ -99,45 +78,22 @@ void CollectJoinOnKeysMatcher::visit(const ASTFunction & func, const ASTPtr & as\n     {\n         ASTPtr left = func.arguments->children.at(0);\n         ASTPtr right = func.arguments->children.at(1);\n-        auto table_numbers = getTableNumbers(left, right, data);\n-\n-        if (canMoveToWhere(table_numbers, data.kind))\n-        {\n-            addAndTerm(data.new_where_conditions, ast);\n-        }\n-        else\n-        {\n-            if (data.kind == ASTTableJoin::Kind::Inner)\n-            {\n-                addAndTerm(data.new_on_expression, ast);\n-            }\n-            data.addJoinKeys(left, right, table_numbers);\n-        }\n+        auto table_numbers = getTableNumbers(ast, left, right, data);\n+        data.addJoinKeys(left, right, table_numbers);\n     }\n-    else if (inequality != ASOF::Inequality::None && !data.is_asof)\n+    else if (inequality != ASOF::Inequality::None)\n     {\n-        ASTPtr left = func.arguments->children.at(0);\n-        ASTPtr right = func.arguments->children.at(1);\n-        auto table_numbers = getTableNumbers(left, right, data);\n-        if (canMoveToWhere(table_numbers, data.kind))\n-        {\n-            addAndTerm(data.new_where_conditions, ast);\n-        }\n-        else\n-        {\n+        if (!data.is_asof)\n             throw Exception(\"JOIN ON inequalities are not supported. Unexpected '\" + queryToString(ast) + \"'\",\n-                ErrorCodes::NOT_IMPLEMENTED);\n-        }\n-    }\n-    else if (inequality != ASOF::Inequality::None && data.is_asof)\n-    {\n+                            ErrorCodes::NOT_IMPLEMENTED);\n+\n         if (data.asof_left_key || data.asof_right_key)\n             throw Exception(\"ASOF JOIN expects exactly one inequality in ON section. Unexpected '\" + queryToString(ast) + \"'\",\n-                ErrorCodes::INVALID_JOIN_ON_EXPRESSION);\n+                            ErrorCodes::INVALID_JOIN_ON_EXPRESSION);\n \n         ASTPtr left = func.arguments->children.at(0);\n         ASTPtr right = func.arguments->children.at(1);\n-        auto table_numbers = getTableNumbers(left, right, data);\n+        auto table_numbers = getTableNumbers(ast, left, right, data);\n \n         data.addAsofJoinKeys(left, right, table_numbers, inequality);\n     }\n@@ -162,8 +118,7 @@ void CollectJoinOnKeysMatcher::getIdentifiers(const ASTPtr & ast, std::vector<co\n         getIdentifiers(child, out);\n }\n \n-\n-std::pair<size_t, size_t> CollectJoinOnKeysMatcher::getTableNumbers(const ASTPtr & left_ast, const ASTPtr & right_ast,\n+std::pair<size_t, size_t> CollectJoinOnKeysMatcher::getTableNumbers(const ASTPtr & expr, const ASTPtr & left_ast, const ASTPtr & right_ast,\n                                                                     Data & data)\n {\n     std::vector<const ASTIdentifier *> left_identifiers;\n@@ -172,13 +127,23 @@ std::pair<size_t, size_t> CollectJoinOnKeysMatcher::getTableNumbers(const ASTPtr\n     getIdentifiers(left_ast, left_identifiers);\n     getIdentifiers(right_ast, right_identifiers);\n \n-    size_t left_idents_table = 0;\n-    size_t right_idents_table = 0;\n+    if (left_identifiers.empty() || right_identifiers.empty())\n+    {\n+        throw Exception(\"Not equi-join ON expression: \" + queryToString(expr) + \". No columns in one of equality side.\",\n+                        ErrorCodes::INVALID_JOIN_ON_EXPRESSION);\n+    }\n+\n+    size_t left_idents_table = getTableForIdentifiers(left_identifiers, data);\n+    size_t right_idents_table = getTableForIdentifiers(right_identifiers, data);\n+\n+    if (left_idents_table && left_idents_table == right_idents_table)\n+    {\n+        auto left_name = queryToString(*left_identifiers[0]);\n+        auto right_name = queryToString(*right_identifiers[0]);\n \n-    if (!left_identifiers.empty())\n-        left_idents_table = getTableForIdentifiers(left_identifiers, data);\n-    if (!right_identifiers.empty())\n-        right_idents_table = getTableForIdentifiers(right_identifiers, data);\n+        throw Exception(\"In expression \" + queryToString(expr) + \" columns \" + left_name + \" and \" + right_name\n+            + \" are from the same table but from different arguments of equal function\", ErrorCodes::INVALID_JOIN_ON_EXPRESSION);\n+    }\n \n     return std::make_pair(left_idents_table, right_idents_table);\n }\ndiff --git a/src/Interpreters/CollectJoinOnKeysVisitor.h b/src/Interpreters/CollectJoinOnKeysVisitor.h\nindex aa2fd80d07cd..54e008a114ef 100644\n--- a/src/Interpreters/CollectJoinOnKeysVisitor.h\n+++ b/src/Interpreters/CollectJoinOnKeysVisitor.h\n@@ -5,7 +5,6 @@\n #include <Interpreters/InDepthNodeVisitor.h>\n #include <Interpreters/DatabaseAndTableWithAlias.h>\n #include <Interpreters/Aliases.h>\n-#include <Parsers/ASTTablesInSelectQuery.h>\n \n \n namespace DB\n@@ -31,11 +30,8 @@ class CollectJoinOnKeysMatcher\n         const TableWithColumnNamesAndTypes & right_table;\n         const Aliases & aliases;\n         const bool is_asof{false};\n-        ASTTableJoin::Kind kind;\n         ASTPtr asof_left_key{};\n         ASTPtr asof_right_key{};\n-        ASTPtr new_on_expression{};\n-        ASTPtr new_where_conditions{};\n         bool has_some{false};\n \n         void addJoinKeys(const ASTPtr & left_ast, const ASTPtr & right_ast, const std::pair<size_t, size_t> & table_no);\n@@ -61,7 +57,7 @@ class CollectJoinOnKeysMatcher\n     static void visit(const ASTFunction & func, const ASTPtr & ast, Data & data);\n \n     static void getIdentifiers(const ASTPtr & ast, std::vector<const ASTIdentifier *> & out);\n-    static std::pair<size_t, size_t> getTableNumbers(const ASTPtr & left_ast, const ASTPtr & right_ast, Data & data);\n+    static std::pair<size_t, size_t> getTableNumbers(const ASTPtr & expr, const ASTPtr & left_ast, const ASTPtr & right_ast, Data & data);\n     static const ASTIdentifier * unrollAliases(const ASTIdentifier * identifier, const Aliases & aliases);\n     static size_t getTableForIdentifiers(std::vector<const ASTIdentifier *> & identifiers, const Data & data);\n };\ndiff --git a/src/Interpreters/TreeRewriter.cpp b/src/Interpreters/TreeRewriter.cpp\nindex 73d7d3d004c8..efffbd375563 100644\n--- a/src/Interpreters/TreeRewriter.cpp\n+++ b/src/Interpreters/TreeRewriter.cpp\n@@ -405,13 +405,13 @@ void setJoinStrictness(ASTSelectQuery & select_query, JoinStrictness join_defaul\n \n /// Find the columns that are obtained by JOIN.\n void collectJoinedColumns(TableJoin & analyzed_join, const ASTSelectQuery & select_query,\n-                          const TablesWithColumns & tables, const Aliases & aliases, ASTPtr & new_where_conditions)\n+                          const TablesWithColumns & tables, const Aliases & aliases)\n {\n     const ASTTablesInSelectQueryElement * node = select_query.join();\n     if (!node || tables.size() < 2)\n         return;\n \n-    auto & table_join = node->table_join->as<ASTTableJoin &>();\n+    const auto & table_join = node->table_join->as<ASTTableJoin &>();\n \n     if (table_join.using_expression_list)\n     {\n@@ -430,33 +430,16 @@ void collectJoinedColumns(TableJoin & analyzed_join, const ASTSelectQuery & sele\n     {\n         bool is_asof = (table_join.strictness == ASTTableJoin::Strictness::Asof);\n \n-        CollectJoinOnKeysVisitor::Data data{analyzed_join, tables[0], tables[1], aliases, is_asof, table_join.kind};\n+        CollectJoinOnKeysVisitor::Data data{analyzed_join, tables[0], tables[1], aliases, is_asof};\n         CollectJoinOnKeysVisitor(data).visit(table_join.on_expression);\n         if (!data.has_some)\n             throw Exception(\"Cannot get JOIN keys from JOIN ON section: \" + queryToString(table_join.on_expression),\n                             ErrorCodes::INVALID_JOIN_ON_EXPRESSION);\n         if (is_asof)\n-        {\n             data.asofToJoinKeys();\n-        }\n-        else if (data.new_on_expression)\n-        {\n-            table_join.on_expression = data.new_on_expression;\n-            new_where_conditions = data.new_where_conditions;\n-        }\n     }\n }\n \n-/// Move joined key related to only one table to WHERE clause\n-void moveJoinedKeyToWhere(ASTSelectQuery * select_query, ASTPtr & new_where_conditions)\n-{\n-    if (select_query->where())\n-        select_query->setExpression(ASTSelectQuery::Expression::WHERE,\n-            makeASTFunction(\"and\", new_where_conditions, select_query->where()));\n-    else\n-        select_query->setExpression(ASTSelectQuery::Expression::WHERE, new_where_conditions->clone());\n-}\n-\n \n std::vector<const ASTFunction *> getAggregates(ASTPtr & query, const ASTSelectQuery & select_query)\n {\n@@ -841,11 +824,7 @@ TreeRewriterResultPtr TreeRewriter::analyzeSelect(\n \n     setJoinStrictness(*select_query, settings.join_default_strictness, settings.any_join_distinct_right_table_keys,\n                         result.analyzed_join->table_join);\n-\n-    ASTPtr new_where_condition = nullptr;\n-    collectJoinedColumns(*result.analyzed_join, *select_query, tables_with_columns, result.aliases, new_where_condition);\n-    if (new_where_condition)\n-        moveJoinedKeyToWhere(select_query, new_where_condition);\n+    collectJoinedColumns(*result.analyzed_join, *select_query, tables_with_columns, result.aliases);\n \n     /// rewrite filters for select query, must go after getArrayJoinedColumns\n     if (settings.optimize_respect_aliases && result.metadata_snapshot)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00826_cross_to_inner_join.reference b/tests/queries/0_stateless/00826_cross_to_inner_join.reference\nindex 9b630d0d3919..973c5b078a36 100644\n--- a/tests/queries/0_stateless/00826_cross_to_inner_join.reference\n+++ b/tests/queries/0_stateless/00826_cross_to_inner_join.reference\n@@ -109,7 +109,7 @@ SELECT\n     t2_00826.a,\n     t2_00826.b\n FROM t1_00826\n-ALL INNER JOIN t2_00826 ON (((a = t2_00826.a) AND (a = t2_00826.a)) AND (a = t2_00826.a)) AND (b = t2_00826.b)\n+ALL INNER JOIN t2_00826 ON (a = t2_00826.a) AND (a = t2_00826.a) AND (a = t2_00826.a) AND (b = t2_00826.b)\n WHERE (a = t2_00826.a) AND ((a = t2_00826.a) AND ((a = t2_00826.a) AND (b = t2_00826.b)))\n --- cross split conjunction ---\n SELECT\ndiff --git a/tests/queries/0_stateless/00849_multiple_comma_join_2.reference b/tests/queries/0_stateless/00849_multiple_comma_join_2.reference\nindex 4db65b0b795e..fc39ef139359 100644\n--- a/tests/queries/0_stateless/00849_multiple_comma_join_2.reference\n+++ b/tests/queries/0_stateless/00849_multiple_comma_join_2.reference\n@@ -127,7 +127,7 @@ FROM\n     ) AS `--.s`\n     CROSS JOIN t3\n ) AS `--.s`\n-ALL INNER JOIN t4 ON ((a = `--t1.a`) AND (a = `--t2.a`)) AND (a = `--t3.a`)\n+ALL INNER JOIN t4 ON (a = `--t1.a`) AND (a = `--t2.a`) AND (a = `--t3.a`)\n WHERE (a = `--t1.a`) AND (a = `--t2.a`) AND (a = `--t3.a`)\n SELECT `--t1.a` AS `t1.a`\n FROM \ndiff --git a/tests/queries/0_stateless/00855_join_with_array_join.reference b/tests/queries/0_stateless/00855_join_with_array_join.reference\nindex 386bde518ea7..88f9253500c4 100644\n--- a/tests/queries/0_stateless/00855_join_with_array_join.reference\n+++ b/tests/queries/0_stateless/00855_join_with_array_join.reference\n@@ -4,3 +4,8 @@\n 4\t0\n 5\t0\n 6\t0\n+-\n+1\t0\t\n+2\t2\ta2\n+1\t0\t\n+2\t2\ta2\ndiff --git a/tests/queries/0_stateless/00855_join_with_array_join.sql b/tests/queries/0_stateless/00855_join_with_array_join.sql\nindex 10b03fec062a..506d94791105 100644\n--- a/tests/queries/0_stateless/00855_join_with_array_join.sql\n+++ b/tests/queries/0_stateless/00855_join_with_array_join.sql\n@@ -1,10 +1,35 @@\n SET joined_subquery_requires_alias = 0;\n \n-select ax, c from (select [1,2] ax, 0 c) array join ax join (select 0 c) using(c);\n-select ax, c from (select [3,4] ax, 0 c) join (select 0 c) using(c) array join ax;\n-select ax, c from (select [5,6] ax, 0 c) s1 join system.one s2 ON s1.c = s2.dummy array join ax;\n-\n-select ax, c from (select [7,8] ax, 0 c) s1\n-join system.one s2 ON s1.c = s2.dummy\n-join system.one s3 ON s1.c = s3.dummy\n-array join ax; -- { serverError 48 }\n+SELECT ax, c FROM (SELECT [1,2] ax, 0 c) ARRAY JOIN ax JOIN (SELECT 0 c) USING (c);\n+SELECT ax, c FROM (SELECT [3,4] ax, 0 c) JOIN (SELECT 0 c) USING (c) ARRAY JOIN ax;\n+SELECT ax, c FROM (SELECT [5,6] ax, 0 c) s1 JOIN system.one s2 ON s1.c = s2.dummy ARRAY JOIN ax;\n+\n+\n+SELECT ax, c FROM (SELECT [101,102] ax, 0 c) s1\n+JOIN system.one s2 ON s1.c = s2.dummy\n+JOIN system.one s3 ON s1.c = s3.dummy\n+ARRAY JOIN ax; -- { serverError 48 }\n+\n+SELECT '-';\n+\n+SET joined_subquery_requires_alias = 1;\n+\n+DROP TABLE IF EXISTS f;\n+DROP TABLE IF EXISTS d;\n+\n+CREATE TABLE f (`d_ids` Array(Int64) ) ENGINE = TinyLog;\n+INSERT INTO f VALUES ([1, 2]);\n+\n+CREATE TABLE d (`id` Int64, `name` String ) ENGINE = TinyLog;\n+\n+INSERT INTO d VALUES (2, 'a2'), (3, 'a3');\n+\n+SELECT d_ids, id, name FROM f LEFT ARRAY JOIN d_ids LEFT JOIN d ON d.id = d_ids ORDER BY id;\n+SELECT did, id, name FROM f LEFT ARRAY JOIN d_ids as did LEFT JOIN d ON d.id = did ORDER BY id;\n+\n+-- name clash, doesn't work yet\n+SELECT id, name FROM f LEFT ARRAY JOIN d_ids as id LEFT JOIN d ON d.id = id ORDER BY id; -- { serverError 403 }\n+\n+DROP TABLE IF EXISTS f;\n+DROP TABLE IF EXISTS d;\n+\ndiff --git a/tests/queries/0_stateless/00878_join_unexpected_results.reference b/tests/queries/0_stateless/00878_join_unexpected_results.reference\nindex 65fcbc257ca6..a389cb47a962 100644\n--- a/tests/queries/0_stateless/00878_join_unexpected_results.reference\n+++ b/tests/queries/0_stateless/00878_join_unexpected_results.reference\n@@ -23,8 +23,6 @@ join_use_nulls = 1\n -\n \\N\t\\N\n -\n-1\t1\t\\N\t\\N\n-2\t2\t\\N\t\\N\n -\n 1\t1\t1\t1\n 2\t2\t\\N\t\\N\n@@ -51,8 +49,6 @@ join_use_nulls = 0\n -\n -\n -\n-1\t1\t0\t0\n-2\t2\t0\t0\n -\n 1\t1\t1\t1\n 2\t2\t0\t0\ndiff --git a/tests/queries/0_stateless/00878_join_unexpected_results.sql b/tests/queries/0_stateless/00878_join_unexpected_results.sql\nindex 6f6cd6e64792..0aef5208b26e 100644\n--- a/tests/queries/0_stateless/00878_join_unexpected_results.sql\n+++ b/tests/queries/0_stateless/00878_join_unexpected_results.sql\n@@ -30,11 +30,11 @@ select * from t left outer join s on (t.a=s.a and t.b=s.b) where s.a is null;\n select '-';\n select s.* from t left outer join s on (t.a=s.a and t.b=s.b) where s.a is null;\n select '-';\n-select t.*, s.* from t left join s on (s.a=t.a and t.b=s.b and t.a=toInt64(2)) order by t.a;\n+select t.*, s.* from t left join s on (s.a=t.a and t.b=s.b and t.a=toInt64(2)) order by t.a; -- {serverError 403 }\n select '-';\n select t.*, s.* from t left join s on (s.a=t.a) order by t.a;\n select '-';\n-select t.*, s.* from t left join s on (t.b=toInt64(2) and s.a=t.a) where s.b=2;\n+select t.*, s.* from t left join s on (t.b=toInt64(2) and s.a=t.a) where s.b=2; -- {serverError 403 }\n \n select 'join_use_nulls = 0';\n set join_use_nulls = 0;\n@@ -58,11 +58,11 @@ select '-';\n select '-';\n -- select s.* from t left outer join s on (t.a=s.a and t.b=s.b) where s.a is null; -- TODO\n select '-';\n-select t.*, s.* from t left join s on (s.a=t.a and t.b=s.b and t.a=toInt64(2)) order by t.a;\n+select t.*, s.* from t left join s on (s.a=t.a and t.b=s.b and t.a=toInt64(2)) order by t.a; -- {serverError 403 }\n select '-';\n select t.*, s.* from t left join s on (s.a=t.a) order by t.a;\n select '-';\n-select t.*, s.* from t left join s on (t.b=toInt64(2) and s.a=t.a) where s.b=2;\n+select t.*, s.* from t left join s on (t.b=toInt64(2) and s.a=t.a) where s.b=2; -- {serverError 403 }\n \n drop table t;\n drop table s;\ndiff --git a/tests/queries/0_stateless/01653_move_conditions_from_join_on_to_where.reference b/tests/queries/0_stateless/01653_move_conditions_from_join_on_to_where.reference\ndeleted file mode 100644\nindex 19487c9f942b..000000000000\n--- a/tests/queries/0_stateless/01653_move_conditions_from_join_on_to_where.reference\n+++ /dev/null\n@@ -1,140 +0,0 @@\n----------Q1----------\n-2\t2\t2\t20\n-SELECT\n-    a,\n-    b,\n-    table2.a,\n-    table2.b\n-FROM table1\n-ALL INNER JOIN \n-(\n-    SELECT\n-        a,\n-        b\n-    FROM table2\n-) AS table2 ON a = table2.a\n-WHERE table2.b = toUInt32(20)\n----------Q2----------\n-2\t2\t2\t20\n-SELECT\n-    a,\n-    b,\n-    table2.a,\n-    table2.b\n-FROM table1\n-ALL INNER JOIN \n-(\n-    SELECT\n-        a,\n-        b\n-    FROM table2\n-) AS table2 ON a = table2.a\n-WHERE (table2.a < table2.b) AND (table2.b = toUInt32(20))\n----------Q3----------\n----------Q4----------\n-6\t40\n-SELECT\n-    a,\n-    table2.b\n-FROM table1\n-ALL INNER JOIN \n-(\n-    SELECT\n-        a,\n-        b\n-    FROM table2\n-) AS table2 ON a = toUInt32(10 - table2.a)\n-WHERE (b = 6) AND (table2.b > 20)\n----------Q5----------\n-SELECT\n-    a,\n-    table2.b\n-FROM table1\n-ALL INNER JOIN \n-(\n-    SELECT\n-        a,\n-        b\n-    FROM table2\n-    WHERE 0\n-) AS table2 ON a = table2.a\n-WHERE 0\n----------Q6----------\n----------Q7----------\n-0\t0\t0\t0\n-SELECT\n-    a,\n-    b,\n-    table2.a,\n-    table2.b\n-FROM table1\n-ALL INNER JOIN \n-(\n-    SELECT\n-        a,\n-        b\n-    FROM table2\n-) AS table2 ON a = table2.a\n-WHERE (table2.b < toUInt32(40)) AND (b < 1)\n----------Q8----------\n----------Q9---will not be optimized----------\n-SELECT\n-    a,\n-    b,\n-    table2.a,\n-    table2.b\n-FROM table1\n-ALL LEFT JOIN \n-(\n-    SELECT\n-        a,\n-        b\n-    FROM table2\n-) AS table2 ON (a = table2.a) AND (b = toUInt32(10))\n-SELECT\n-    a,\n-    b,\n-    table2.a,\n-    table2.b\n-FROM table1\n-ALL RIGHT JOIN \n-(\n-    SELECT\n-        a,\n-        b\n-    FROM table2\n-) AS table2 ON (a = table2.a) AND (b = toUInt32(10))\n-SELECT\n-    a,\n-    b,\n-    table2.a,\n-    table2.b\n-FROM table1\n-ALL FULL OUTER JOIN \n-(\n-    SELECT\n-        a,\n-        b\n-    FROM table2\n-) AS table2 ON (a = table2.a) AND (b = toUInt32(10))\n-SELECT\n-    a,\n-    b,\n-    table2.a,\n-    table2.b\n-FROM table1\n-ALL FULL OUTER JOIN \n-(\n-    SELECT\n-        a,\n-        b\n-    FROM table2\n-) AS table2 ON (a = table2.a) AND (table2.b = toUInt32(10))\n-WHERE a < toUInt32(20)\n-SELECT\n-    a,\n-    b,\n-    table2.a,\n-    table2.b\n-FROM table1\n-CROSS JOIN table2\ndiff --git a/tests/queries/0_stateless/01653_move_conditions_from_join_on_to_where.sql b/tests/queries/0_stateless/01653_move_conditions_from_join_on_to_where.sql\ndeleted file mode 100644\nindex 23871a9c47c7..000000000000\n--- a/tests/queries/0_stateless/01653_move_conditions_from_join_on_to_where.sql\n+++ /dev/null\n@@ -1,48 +0,0 @@\n-DROP TABLE IF EXISTS table1;\n-DROP TABLE IF EXISTS table2;\n-\n-CREATE TABLE table1 (a UInt32, b UInt32) ENGINE = Memory;\n-CREATE TABLE table2 (a UInt32, b UInt32) ENGINE = Memory;\n-\n-INSERT INTO table1 SELECT number, number FROM numbers(10);\n-INSERT INTO table2 SELECT number * 2, number * 20 FROM numbers(6);\n-\n-SELECT '---------Q1----------';\n-SELECT * FROM table1 JOIN table2 ON (table1.a = table2.a) AND (table2.b = toUInt32(20));\n-EXPLAIN SYNTAX SELECT * FROM table1 JOIN table2 ON (table1.a = table2.a) AND (table2.b = toUInt32(20));\n-\n-SELECT '---------Q2----------';\n-SELECT * FROM table1 JOIN table2 ON (table1.a = table2.a) AND (table2.a < table2.b) AND (table2.b = toUInt32(20));\n-EXPLAIN SYNTAX SELECT * FROM table1 JOIN table2 ON (table1.a = table2.a) AND (table2.a < table2.b) AND (table2.b = toUInt32(20));\n-\n-SELECT '---------Q3----------';\n-SELECT * FROM table1 JOIN table2 ON (table1.a = toUInt32(table2.a + 5)) AND (table2.a < table1.b) AND (table2.b > toUInt32(20)); -- { serverError 48 }\n-\n-SELECT '---------Q4----------';\n-SELECT table1.a, table2.b FROM table1 INNER JOIN table2 ON (table1.a = toUInt32(10 - table2.a)) AND (table1.b = 6) AND (table2.b > 20);\n-EXPLAIN SYNTAX SELECT table1.a, table2.b FROM table1 INNER JOIN table2 ON (table1.a = toUInt32(10 - table2.a)) AND (table1.b = 6) AND (table2.b > 20);\n-\n-SELECT '---------Q5----------';\n-SELECT table1.a, table2.b FROM table1 JOIN table2 ON (table1.a = table2.a) AND (table1.b = 6) AND (table2.b > 20) AND (10 < 6);\n-EXPLAIN SYNTAX SELECT table1.a, table2.b FROM table1 JOIN table2 ON (table1.a = table2.a) AND (table1.b = 6) AND (table2.b > 20) AND (10 < 6);\n-\n-SELECT '---------Q6----------';\n-SELECT table1.a, table2.b FROM table1 JOIN table2 ON (table1.b = 6) AND (table2.b > 20); -- { serverError 403 } \n-\n-SELECT '---------Q7----------';\n-SELECT * FROM table1 JOIN table2 ON (table1.a = table2.a) AND (table2.b < toUInt32(40)) where table1.b < 1;\n-EXPLAIN SYNTAX SELECT * FROM table1 JOIN table2 ON (table1.a = table2.a) AND (table2.b < toUInt32(40)) where table1.b < 1;\n-SELECT * FROM table1 JOIN table2 ON (table1.a = table2.a) AND (table2.b < toUInt32(40)) where table1.b > 10;\n-\n-SELECT '---------Q8----------';\n-SELECT * FROM table1 INNER JOIN table2 ON (table1.a = table2.a) AND (table2.b < toUInt32(table1, 10)); -- { serverError 47 }\n-\n-SELECT '---------Q9---will not be optimized----------';\n-EXPLAIN SYNTAX SELECT * FROM table1 LEFT JOIN table2 ON (table1.a = table2.a) AND (table1.b = toUInt32(10));\n-EXPLAIN SYNTAX SELECT * FROM table1 RIGHT JOIN table2 ON (table1.a = table2.a) AND (table1.b = toUInt32(10));\n-EXPLAIN SYNTAX SELECT * FROM table1 FULL JOIN table2 ON (table1.a = table2.a) AND (table1.b = toUInt32(10));\n-EXPLAIN SYNTAX SELECT * FROM table1 FULL JOIN table2 ON (table1.a = table2.a) AND (table2.b = toUInt32(10)) WHERE table1.a < toUInt32(20);\n-EXPLAIN SYNTAX SELECT * FROM table1 , table2;\n-\n-DROP TABLE table1;\n-DROP TABLE table2;\n",
  "problem_statement": "DB::Exception: Cannot get JOIN keys from JOIN ON section\n(you don't have to strictly follow this form)\r\n\r\n**Describe the bug**\r\nWhen join key is array join alias, there will be exception thrown. \r\n\r\n**Does it reproduce on recent release?**\r\nReproduced in 21.3.4.25 easily \r\n\r\n**How to reproduce**\r\n\r\n\r\n```\r\nCREATE TABLE d\r\n(\r\n    `id` Int64,\r\n    `name` String\r\n)\r\nENGINE = MergeTree\r\nORDER BY id\r\n```\r\n\r\n```\r\nCREATE TABLE f\r\n(\r\n    `id` Int64,\r\n    `d_ids` Array(Int64),\r\n    `m1` Int64,\r\n    `m2` Int64\r\n)\r\nENGINE = MergeTree\r\nORDER BY id\r\n```\r\n\r\n\r\n\r\nSelect SQL and error:\r\n\r\n```\r\nSELECT\r\n    id,\r\n    name,\r\n    sum(m1)\r\nFROM f\r\nLEFT ARRAY JOIN d_ids AS d_array_id\r\nLEFT JOIN d ON d.id = d_array_id\r\nGROUP BY\r\n    id,\r\n    name\r\n\r\nReceived exception from server (version 21.3.4):\r\nCode: 403. DB::Exception: Received from localhost:9000. DB::Exception: Cannot get JOIN keys from JOIN ON section: d.id = d_array_id.\r\n```\r\n\r\n**Expected behavior**\r\nThis query can be executed successfully in 21.2.7.11\r\n\r\n**Error message and/or stacktrace**\r\n```\r\n2021.03.31 04:35:47.463228 [ 53 ] {82709d0e-a3d6-4d03-afab-4320fea13c3b} <Error> executeQuery: Code: 403, e.displayText() = DB::Exception: Cannot get JOIN keys from JOIN ON section: d.id = d_array_id (version 21.3.4.25 (official build)) (from 127.0.0.1:36904) (in query: select id, name, sum(m1) from f left array join d_ids as d_array_id left join d on d.id = d_array_id group by id, name;), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. DB::TreeRewriter::analyzeSelect(std::__1::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::__1::vector<DB::TableWithColumnNamesAndTypes, std::__1::allocator<DB::TableWithColumnNamesAndTypes> > const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::TableJoin>) const @ 0xf0d6ba8 in /usr/bin/clickhouse\r\n1. ? @ 0xec78d3e in /usr/bin/clickhouse\r\n2. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&) @ 0xec755aa in /usr/bin/clickhouse\r\n3. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xec73d8d in /usr/bin/clickhouse\r\n4. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::__1::shared_ptr<DB::IAST> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xef96755 in /usr/bin/clickhouse\r\n5. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xef95050 in /usr/bin/clickhouse\r\n6. DB::InterpreterFactory::get(std::__1::shared_ptr<DB::IAST>&, DB::Context&, DB::SelectQueryOptions const&) @ 0xec2abb0 in /usr/bin/clickhouse\r\n7. ? @ 0xf132e89 in /usr/bin/clickhouse\r\n8. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool) @ 0xf131a63 in /usr/bin/clickhouse\r\n9. DB::TCPHandler::runImpl() @ 0xf8befbd in /usr/bin/clickhouse\r\n10. DB::TCPHandler::run() @ 0xf8d1529 in /usr/bin/clickhouse\r\n11. Poco::Net::TCPServerConnection::start() @ 0x11f84caf in /usr/bin/clickhouse\r\n12. Poco::Net::TCPServerDispatcher::run() @ 0x11f866c1 in /usr/bin/clickhouse\r\n13. Poco::PooledThread::run() @ 0x120bcde9 in /usr/bin/clickhouse\r\n14. Poco::ThreadImpl::runnableEntry(void*) @ 0x120b8c4a in /usr/bin/clickhouse\r\n15. start_thread @ 0x9609 in /usr/lib/x86_64-linux-gnu/libpthread-2.31.so\r\n16. __clone @ 0x122293 in /usr/lib/x86_64-linux-gnu/libc-2.31.so\r\n\r\n2021.03.31 04:35:47.463825 [ 53 ] {82709d0e-a3d6-4d03-afab-4320fea13c3b} <Error> TCPHandler: Code: 403, e.displayText() = DB::Exception: Cannot get JOIN keys from JOIN ON section: d.id = d_array_id, Stack trace:\r\n\r\n0. DB::TreeRewriter::analyzeSelect(std::__1::shared_ptr<DB::IAST>&, DB::TreeRewriterResult&&, DB::SelectQueryOptions const&, std::__1::vector<DB::TableWithColumnNamesAndTypes, std::__1::allocator<DB::TableWithColumnNamesAndTypes> > const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::TableJoin>) const @ 0xf0d6ba8 in /usr/bin/clickhouse\r\n1. ? @ 0xec78d3e in /usr/bin/clickhouse\r\n2. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&) @ 0xec755aa in /usr/bin/clickhouse\r\n3. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xec73d8d in /usr/bin/clickhouse\r\n4. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::__1::shared_ptr<DB::IAST> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xef96755 in /usr/bin/clickhouse\r\n5. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xef95050 in /usr/bin/clickhouse\r\n6. DB::InterpreterFactory::get(std::__1::shared_ptr<DB::IAST>&, DB::Context&, DB::SelectQueryOptions const&) @ 0xec2abb0 in /usr/bin/clickhouse\r\n7. ? @ 0xf132e89 in /usr/bin/clickhouse\r\n8. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool) @ 0xf131a63 in /usr/bin/clickhouse\r\n9. DB::TCPHandler::runImpl() @ 0xf8befbd in /usr/bin/clickhouse\r\n10. DB::TCPHandler::run() @ 0xf8d1529 in /usr/bin/clickhouse\r\n11. Poco::Net::TCPServerConnection::start() @ 0x11f84caf in /usr/bin/clickhouse\r\n12. Poco::Net::TCPServerDispatcher::run() @ 0x11f866c1 in /usr/bin/clickhouse\r\n13. Poco::PooledThread::run() @ 0x120bcde9 in /usr/bin/clickhouse\r\n14. Poco::ThreadImpl::runnableEntry(void*) @ 0x120b8c4a in /usr/bin/clickhouse\r\n15. start_thread @ 0x9609 in /usr/lib/x86_64-linux-gnu/libpthread-2.31.so\r\n16. __clone @ 0x122293 in /usr/lib/x86_64-linux-gnu/libc-2.31.so\r\n```\r\n\r\n\r\n\r\n\nCorrect move conditions from JOIN ON to WHERE for ANY JOIN`\nI think this could lead to error with . A query like \r\n```sql\r\nSELECT *\r\nFROM\r\n\t(SELECT 1 AS id) AS l\r\n\tINNER ANY JOIN (SELECT 1 AS id, number as v FROM system.numbers LIMIT 2) AS r\r\n\t          ON l.id = r.id AND r.v = 1\r\n```\r\nis not the same as \r\n```sql\r\nSELECT *\r\nFROM\r\n\t(SELECT 1 AS id) AS l\r\n\tINNER ANY JOIN (SELECT 1 AS id, number as v FROM system.numbers LIMIT 2) AS r\r\n\t          ON l.id = r.id\r\nWHERE\r\n\tr.v = 1\r\n```\r\nThe first one should return a line while the second returns anything because it joins on the first machting line with  and then apply .\r\n\r\nIMHO the where clause should be added to a subselect like\r\n```sql\r\nSELECT *\r\nFROM\r\n\t(SELECT 1 AS id) AS l\r\n\tINNER ANY JOIN (SELECT * FROM (SELECT 1 AS id, number AS v FROM system.numbers LIMIT 2) WHERE v = 1) AS r\r\n\t          ON l.id = r.id;\r\n```\r\n\r\n_Originally posted by @PHaroZ in https://github.com/ClickHouse/ClickHouse/issues/18720#issuecomment-797512604_\n",
  "hints_text": "@4ertus2  @hexiaoting Can you help to take a look? Thanks. \ntry:\r\n```\r\nSELECT\r\n    id,\r\n    name,\r\n    sum(m1)\r\nFROM\r\n(\r\n    SELECT\r\n        d_array_id,\r\n        m1\r\n    FROM f\r\n    LEFT ARRAY JOIN d_ids AS d_array_id\r\n) AS tmp\r\nLEFT JOIN d ON d.id = tmp.d_array_id\r\nGROUP BY\r\n    id,\r\n    name\r\n```\nI think this is a bug. I tried 21.2.7.11, it works fine. \r\n\r\nFor 21.2.7.11 there's still another bug about JOIN on expression \r\nhttps://github.com/ClickHouse/ClickHouse/issues/20193\r\n\r\n\r\n\nJoin ON is not supported completely in the latest version, It need to be improved to support more situations. like:https://github.com/ClickHouse/ClickHouse/issues/21868\n@vdimir  Can we have a quick fix for this? 21.1 21.2 21.3 can't be used at current time. \nQuery without alias for ARRAY JOIN works. I'm working on fix for aliased version too.\r\n```\r\nSELECT\r\n    id,\r\n    name,\r\n    sum(m1)\r\nFROM f\r\nLEFT ARRAY JOIN d_ids\r\nLEFT JOIN d ON d.id = d_ids\r\nGROUP BY\r\n    id,\r\n    name\r\n```\n\r\n\r\n```\r\nWITH xa AS\r\n    (\r\n        SELECT *\r\n        FROM numbers(10)\r\n    )\r\nSELECT *\r\nFROM xa\r\nINNER JOIN xa AS ya USING (number)\r\nWHERE number = 1\r\n```\r\n\r\nCan be optimized as:\r\n\r\n```\r\nWITH xa AS\r\n    (\r\n        SELECT *\r\n        FROM numbers(10)\r\n    )\r\nSELECT xa.number\r\nFROM\r\n(\r\n    SELECT number\r\n    FROM numbers(10)\r\n    WHERE number = 1\r\n) AS xa\r\nALL INNER JOIN\r\n(\r\n    SELECT number\r\n    FROM numbers(10)\r\n    WHERE number = 1\r\n) AS xa USING (number)\r\nWHERE number = 1\r\n```",
  "created_at": "2021-04-07T11:57:29Z"
}