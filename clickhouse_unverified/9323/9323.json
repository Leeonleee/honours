{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 9323,
  "instance_id": "ClickHouse__ClickHouse-9323",
  "issue_numbers": [
    "5743"
  ],
  "base_commit": "a89ccd5eb7fa2e8c2ae145da3eb40ab052958dc5",
  "patch": "diff --git a/dbms/src/Functions/FunctionBinaryArithmetic.h b/dbms/src/Functions/FunctionBinaryArithmetic.h\nindex 233598370add..66eb7be01cb1 100644\n--- a/dbms/src/Functions/FunctionBinaryArithmetic.h\n+++ b/dbms/src/Functions/FunctionBinaryArithmetic.h\n@@ -547,43 +547,54 @@ class FunctionBinaryArithmetic : public IFunction\n \n     FunctionOverloadResolverPtr getFunctionForIntervalArithmetic(const DataTypePtr & type0, const DataTypePtr & type1) const\n     {\n+        bool first_is_date_or_datetime = isDateOrDateTime(type0);\n+        bool second_is_date_or_datetime = isDateOrDateTime(type1);\n+\n+        /// Exactly one argument must be Date or DateTime\n+        if (first_is_date_or_datetime == second_is_date_or_datetime)\n+            return {};\n+\n         /// Special case when the function is plus or minus, one of arguments is Date/DateTime and another is Interval.\n         /// We construct another function (example: addMonths) and call it.\n \n-        bool function_is_plus = std::is_same_v<Op<UInt8, UInt8>, PlusImpl<UInt8, UInt8>>;\n-        bool function_is_minus = std::is_same_v<Op<UInt8, UInt8>, MinusImpl<UInt8, UInt8>>;\n+        static constexpr bool function_is_plus = std::is_same_v<Op<UInt8, UInt8>, PlusImpl<UInt8, UInt8>>;\n+        static constexpr bool function_is_minus = std::is_same_v<Op<UInt8, UInt8>, MinusImpl<UInt8, UInt8>>;\n \n         if (!function_is_plus && !function_is_minus)\n             return {};\n \n-        int interval_arg = 1;\n-        const DataTypeInterval * interval_data_type = checkAndGetDataType<DataTypeInterval>(type1.get());\n-        if (!interval_data_type)\n+        const DataTypePtr & type_time = first_is_date_or_datetime ? type0 : type1;\n+        const DataTypePtr & type_interval = first_is_date_or_datetime ? type1 : type0;\n+\n+        bool interval_is_number = isNumber(type_interval);\n+\n+        const DataTypeInterval * interval_data_type = nullptr;\n+        if (!interval_is_number)\n         {\n-            interval_arg = 0;\n-            interval_data_type = checkAndGetDataType<DataTypeInterval>(type0.get());\n+            interval_data_type = checkAndGetDataType<DataTypeInterval>(type_interval.get());\n+\n+            if (!interval_data_type)\n+                return {};\n         }\n-        if (!interval_data_type)\n-            return {};\n \n-        if (interval_arg == 0 && function_is_minus)\n+        if (second_is_date_or_datetime && function_is_minus)\n             throw Exception(\"Wrong order of arguments for function \" + getName() + \": argument of type Interval cannot be first.\",\n                 ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n \n-        const DataTypeDate * date_data_type = checkAndGetDataType<DataTypeDate>(interval_arg == 0 ? type1.get() : type0.get());\n-        const DataTypeDateTime * date_time_data_type = nullptr;\n-        if (!date_data_type)\n+        std::string function_name;\n+        if (interval_data_type)\n         {\n-            date_time_data_type = checkAndGetDataType<DataTypeDateTime>(interval_arg == 0 ? type1.get() : type0.get());\n-            if (!date_time_data_type)\n-                throw Exception(\"Wrong argument types for function \" + getName() + \": if one argument is Interval, then another must be Date or DateTime.\",\n-                    ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n+            function_name = String(function_is_plus ? \"add\" : \"subtract\") + interval_data_type->getKind().toString() + 's';\n+        }\n+        else\n+        {\n+            if (isDate(type_time))\n+                function_name = function_is_plus ? \"addDays\" : \"subtractDays\";\n+            else\n+                function_name = function_is_plus ? \"addSeconds\" : \"subtractSeconds\";\n         }\n \n-        std::stringstream function_name;\n-        function_name << (function_is_plus ? \"add\" : \"subtract\") << interval_data_type->getKind().toString() << 's';\n-\n-        return FunctionFactory::instance().get(function_name.str(), context);\n+        return FunctionFactory::instance().get(function_name, context);\n     }\n \n     bool isAggregateMultiply(const DataTypePtr & type0, const DataTypePtr & type1) const\n@@ -627,7 +638,6 @@ class FunctionBinaryArithmetic : public IFunction\n \n         AggregateFunctionPtr function = column.getAggregateFunction();\n \n-\n         size_t size = agg_state_is_const ? 1 : input_rows_count;\n \n         auto column_to = ColumnAggregateFunction::create(function);\n@@ -716,7 +726,7 @@ class FunctionBinaryArithmetic : public IFunction\n         ColumnNumbers new_arguments = arguments;\n \n         /// Interval argument must be second.\n-        if (WhichDataType(block.getByPosition(arguments[0]).type).isInterval())\n+        if (WhichDataType(block.getByPosition(arguments[1]).type).isDateOrDateTime())\n             std::swap(new_arguments[0], new_arguments[1]);\n \n         /// Change interval argument type to its representation\n@@ -776,7 +786,7 @@ class FunctionBinaryArithmetic : public IFunction\n                 new_arguments[i].type = arguments[i];\n \n             /// Interval argument must be second.\n-            if (WhichDataType(new_arguments[0].type).isInterval())\n+            if (WhichDataType(new_arguments[1].type).isDateOrDateTime())\n                 std::swap(new_arguments[0], new_arguments[1]);\n \n             /// Change interval argument to its representation\ndiff --git a/dbms/src/Functions/FunctionDateOrDateTimeAddInterval.h b/dbms/src/Functions/FunctionDateOrDateTimeAddInterval.h\nindex 8e57dfa23b50..fe2a163fc8ab 100644\n--- a/dbms/src/Functions/FunctionDateOrDateTimeAddInterval.h\n+++ b/dbms/src/Functions/FunctionDateOrDateTimeAddInterval.h\n@@ -4,10 +4,11 @@\n #include <DataTypes/DataTypeDateTime.h>\n #include <DataTypes/DataTypeDateTime64.h>\n \n-#include <Columns/ColumnVector.h>\n+#include <Columns/ColumnsNumber.h>\n \n #include <Functions/IFunctionImpl.h>\n #include <Functions/FunctionHelpers.h>\n+#include <Functions/castTypeToEither.h>\n #include <Functions/extractTimeZoneFromFunctionArguments.h>\n \n #include <IO/WriteHelpers.h>\n@@ -31,7 +32,7 @@ namespace ErrorCodes\n template <typename T>\n struct AddOnDateTime64DefaultImpl\n {\n-    /*explicit*/ AddOnDateTime64DefaultImpl(UInt32 scale_ = 0)\n+    AddOnDateTime64DefaultImpl(UInt32 scale_ = 0)\n         : scale_multiplier(DecimalUtils::scaleMultiplier<DateTime64::NativeType>(scale_))\n     {}\n \n@@ -40,7 +41,7 @@ struct AddOnDateTime64DefaultImpl\n     {\n         const auto components = DecimalUtils::splitWithScaleMultiplier(t, scale_multiplier);\n \n-        const auto whole = static_cast<const T*>(this)->execute(static_cast<UInt32>(components.whole), delta, time_zone);\n+        const auto whole = static_cast<const T *>(this)->execute(static_cast<UInt32>(components.whole), delta, time_zone);\n         return DecimalUtils::decimalFromComponentsWithMultiplier<DateTime64>(static_cast<DateTime64::NativeType>(whole), components.fractional, scale_multiplier);\n     }\n \n@@ -248,23 +249,26 @@ struct Adder\n     {}\n \n     template <typename FromVectorType, typename ToVectorType>\n-    void vector_vector(const FromVectorType & vec_from, ToVectorType & vec_to, const IColumn & delta, const DateLUTImpl & time_zone) const\n+    void NO_INLINE vector_constant(const FromVectorType & vec_from, ToVectorType & vec_to, Int64 delta, const DateLUTImpl & time_zone) const\n     {\n         size_t size = vec_from.size();\n         vec_to.resize(size);\n \n         for (size_t i = 0; i < size; ++i)\n-            vec_to[i] = transform.execute(vec_from[i], delta.getInt(i), time_zone);\n+            vec_to[i] = transform.execute(vec_from[i], delta, time_zone);\n     }\n \n     template <typename FromVectorType, typename ToVectorType>\n-    void vector_constant(const FromVectorType & vec_from, ToVectorType & vec_to, Int64 delta, const DateLUTImpl & time_zone) const\n+    void vector_vector(const FromVectorType & vec_from, ToVectorType & vec_to, const IColumn & delta, const DateLUTImpl & time_zone) const\n     {\n         size_t size = vec_from.size();\n         vec_to.resize(size);\n \n-        for (size_t i = 0; i < size; ++i)\n-            vec_to[i] = transform.execute(vec_from[i], delta, time_zone);\n+        castTypeToEither<\n+            ColumnUInt8, ColumnUInt16, ColumnUInt32, ColumnUInt64,\n+            ColumnInt8, ColumnInt16, ColumnInt32, ColumnInt64,\n+            ColumnFloat32, ColumnFloat64>(\n+            &delta, [&](const auto & column){ vector_vector(vec_from, vec_to, column, time_zone, size); return true; });\n     }\n \n     template <typename FromType, typename ToVectorType>\n@@ -273,8 +277,26 @@ struct Adder\n         size_t size = delta.size();\n         vec_to.resize(size);\n \n+        castTypeToEither<\n+            ColumnUInt8, ColumnUInt16, ColumnUInt32, ColumnUInt64,\n+            ColumnInt8, ColumnInt16, ColumnInt32, ColumnInt64,\n+            ColumnFloat32, ColumnFloat64>(\n+            &delta, [&](const auto & column){ constant_vector(from, vec_to, column, time_zone, size); return true; });\n+    }\n+\n+private:\n+    template <typename FromVectorType, typename ToVectorType, typename DeltaColumnType>\n+    void NO_INLINE vector_vector(const FromVectorType & vec_from, ToVectorType & vec_to, const DeltaColumnType & delta, const DateLUTImpl & time_zone, size_t size) const\n+    {\n+        for (size_t i = 0; i < size; ++i)\n+            vec_to[i] = transform.execute(vec_from[i], delta.getData()[i], time_zone);\n+    }\n+\n+    template <typename FromType, typename ToVectorType, typename DeltaColumnType>\n+    void NO_INLINE constant_vector(const FromType & from, ToVectorType & vec_to, const DeltaColumnType & delta, const DateLUTImpl & time_zone, size_t size) const\n+    {\n         for (size_t i = 0; i < size; ++i)\n-            vec_to[i] = transform.execute(from, delta.getInt(i), time_zone);\n+            vec_to[i] = transform.execute(from, delta.getData()[i], time_zone);\n     }\n };\n \n@@ -361,7 +383,7 @@ class FunctionDateOrDateTimeAddInterval : public IFunction\n         if (arguments.size() == 2)\n         {\n             if (!isDateOrDateTime(arguments[0].type))\n-                throw Exception{\"Illegal type \" + arguments[0].type->getName() + \" of argument of function \" + getName() +\n+                throw Exception{\"Illegal type \" + arguments[0].type->getName() + \" of first argument of function \" + getName() +\n                     \". Should be a date or a date with time\", ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT};\n         }\n         else\n@@ -452,7 +474,7 @@ class FunctionDateOrDateTimeAddInterval : public IFunction\n             DateTimeAddIntervalImpl<DataTypeDateTime64, TransformResultDataType<DataTypeDateTime64>, Transform>::execute(Transform{datetime64_type->getScale()}, block, arguments, result);\n         }\n         else\n-            throw Exception(\"Illegal type \" + block.getByPosition(arguments[0]).type->getName() + \" of argument of function \" + getName(),\n+            throw Exception(\"Illegal type \" + block.getByPosition(arguments[0]).type->getName() + \" of first argument of function \" + getName(),\n                 ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n     }\n };\ndiff --git a/dbms/src/Functions/castTypeToEither.h b/dbms/src/Functions/castTypeToEither.h\nindex c041a4aaad09..bff4047768df 100644\n--- a/dbms/src/Functions/castTypeToEither.h\n+++ b/dbms/src/Functions/castTypeToEither.h\n@@ -5,10 +5,8 @@\n namespace DB\n {\n \n-class IDataType;\n-\n-template <typename... Ts, typename F>\n-static bool castTypeToEither(const IDataType * type, F && f)\n+template <typename... Ts, typename T, typename F>\n+static bool castTypeToEither(const T * type, F && f)\n {\n     /// XXX can't use && here because gcc-7 complains about parentheses around && within ||\n     return ((typeid_cast<const Ts *>(type) ? f(*typeid_cast<const Ts *>(type)) : false) || ...);\n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/00069_date_arithmetic.reference b/dbms/tests/queries/0_stateless/00069_date_arithmetic.reference\nindex da7b788b1575..4cce9432b2f8 100644\n--- a/dbms/tests/queries/0_stateless/00069_date_arithmetic.reference\n+++ b/dbms/tests/queries/0_stateless/00069_date_arithmetic.reference\n@@ -15,4 +15,3 @@\n 1\n 1\n 1\n-1\ndiff --git a/dbms/tests/queries/0_stateless/00069_date_arithmetic.sql b/dbms/tests/queries/0_stateless/00069_date_arithmetic.sql\nindex 0ae3984ac281..1268da5ff929 100644\n--- a/dbms/tests/queries/0_stateless/00069_date_arithmetic.sql\n+++ b/dbms/tests/queries/0_stateless/00069_date_arithmetic.sql\n@@ -1,7 +1,7 @@\n SELECT toTypeName(now() - now()) = 'Int32';\n-SELECT toTypeName(now() + 1) = 'DateTime'; \n-SELECT toTypeName(1 + now()) = 'DateTime'; \n-SELECT toTypeName(now() - 1) = 'DateTime';\n+SELECT toTypeName(now() + 1) LIKE 'DateTime%';\n+SELECT toTypeName(1 + now()) LIKE 'DateTime%';\n+SELECT toTypeName(now() - 1) LIKE 'DateTime%';\n SELECT toDateTime(1) + 1 = toDateTime(2);\n SELECT 1 + toDateTime(1) = toDateTime(2);\n SELECT toDateTime(1) - 1 = toDateTime(0);\n@@ -10,7 +10,6 @@ SELECT toTypeName(today()) = 'Date';\n SELECT today() = toDate(now());\n \n SELECT toTypeName(yesterday()) = 'Date';\n-SELECT yesterday() = toDate(now() - 24*60*60);\n \n SELECT toTypeName(today() - today()) = 'Int32';\n SELECT toTypeName(today() + 1) = 'Date';\ndiff --git a/dbms/tests/queries/0_stateless/00921_datetime64_compatibility.reference b/dbms/tests/queries/0_stateless/00921_datetime64_compatibility.reference\nindex 120dbee64340..b8609342a8da 100644\n--- a/dbms/tests/queries/0_stateless/00921_datetime64_compatibility.reference\n+++ b/dbms/tests/queries/0_stateless/00921_datetime64_compatibility.reference\n@@ -620,29 +620,26 @@ SELECT DT64 >= N\n ------------------------------------------\n SELECT N +  toUInt8(1)\n \"Date\",\"2019-09-17\"\n-\"DateTime\",\"2019-09-16 19:20:12\"\n-\n-Code: 43: Illegal types DateTime64(3, 'Europe/Minsk') and UInt8 of arguments of function plus.\n+\"DateTime('Europe/Minsk')\",\"2019-09-16 19:20:12\"\n+\"DateTime64(3, 'Europe/Minsk')\",\"2019-09-16 19:20:12.234\"\n ------------------------------------------\n SELECT toUInt8(1) +  N\n \"Date\",\"2019-09-17\"\n-\"DateTime\",\"2019-09-16 19:20:12\"\n-\n-Code: 43: Illegal types UInt8 and DateTime64(3, 'Europe/Minsk') of arguments of function plus.\n+\"DateTime('Europe/Minsk')\",\"2019-09-16 19:20:12\"\n+\"DateTime64(3, 'Europe/Minsk')\",\"2019-09-16 19:20:12.234\"\n ------------------------------------------\n SELECT N -  toUInt8(1)\n \"Date\",\"2019-09-15\"\n-\"DateTime\",\"2019-09-16 19:20:10\"\n-\n-Code: 43: Illegal types DateTime64(3, 'Europe/Minsk') and UInt8 of arguments of function minus.\n+\"DateTime('Europe/Minsk')\",\"2019-09-16 19:20:10\"\n+\"DateTime64(3, 'Europe/Minsk')\",\"2019-09-16 19:20:10.234\"\n ------------------------------------------\n SELECT toUInt8(1) -  N\n \n-Code: 43: Illegal types UInt8 and Date of arguments of function minus.\n+Code: 43: Wrong order of arguments for function minus: argument of type Interval cannot be first..\n \n-Code: 43: Illegal types UInt8 and DateTime('Europe/Minsk') of arguments of function minus.\n+Code: 43: Wrong order of arguments for function minus: argument of type Interval cannot be first..\n \n-Code: 43: Illegal types UInt8 and DateTime64(3, 'Europe/Minsk') of arguments of function minus.\n+Code: 43: Wrong order of arguments for function minus: argument of type Interval cannot be first..\n ------------------------------------------\n SELECT N == toUInt8(1)\n \n@@ -718,29 +715,26 @@ Code: 43: Illegal types of arguments (UInt8, Date) of function greaterOrEquals.\n ------------------------------------------\n SELECT N +  toInt8(-1)\n \"Date\",\"2019-09-15\"\n-\"DateTime\",\"2019-09-16 19:20:10\"\n-\n-Code: 43: Illegal types DateTime64(3, 'Europe/Minsk') and Int8 of arguments of function plus.\n+\"DateTime('Europe/Minsk')\",\"2019-09-16 19:20:10\"\n+\"DateTime64(3, 'Europe/Minsk')\",\"2019-09-16 19:20:10.234\"\n ------------------------------------------\n SELECT toInt8(-1) +  N\n \"Date\",\"2019-09-15\"\n-\"DateTime\",\"2019-09-16 19:20:10\"\n-\n-Code: 43: Illegal types Int8 and DateTime64(3, 'Europe/Minsk') of arguments of function plus.\n+\"DateTime('Europe/Minsk')\",\"2019-09-16 19:20:10\"\n+\"DateTime64(3, 'Europe/Minsk')\",\"2019-09-16 19:20:10.234\"\n ------------------------------------------\n SELECT N -  toInt8(-1)\n \"Date\",\"2019-09-17\"\n-\"DateTime\",\"2019-09-16 19:20:12\"\n-\n-Code: 43: Illegal types DateTime64(3, 'Europe/Minsk') and Int8 of arguments of function minus.\n+\"DateTime('Europe/Minsk')\",\"2019-09-16 19:20:12\"\n+\"DateTime64(3, 'Europe/Minsk')\",\"2019-09-16 19:20:12.234\"\n ------------------------------------------\n SELECT toInt8(-1) -  N\n \n-Code: 43: Illegal types Int8 and Date of arguments of function minus.\n+Code: 43: Wrong order of arguments for function minus: argument of type Interval cannot be first..\n \n-Code: 43: Illegal types Int8 and DateTime('Europe/Minsk') of arguments of function minus.\n+Code: 43: Wrong order of arguments for function minus: argument of type Interval cannot be first..\n \n-Code: 43: Illegal types Int8 and DateTime64(3, 'Europe/Minsk') of arguments of function minus.\n+Code: 43: Wrong order of arguments for function minus: argument of type Interval cannot be first..\n ------------------------------------------\n SELECT N == toInt8(-1)\n \n@@ -816,29 +810,26 @@ Code: 43: Illegal types of arguments (Int8, Date) of function greaterOrEquals.\n ------------------------------------------\n SELECT N +  toUInt16(1)\n \"Date\",\"2019-09-17\"\n-\"DateTime\",\"2019-09-16 19:20:12\"\n-\n-Code: 43: Illegal types DateTime64(3, 'Europe/Minsk') and UInt16 of arguments of function plus.\n+\"DateTime('Europe/Minsk')\",\"2019-09-16 19:20:12\"\n+\"DateTime64(3, 'Europe/Minsk')\",\"2019-09-16 19:20:12.234\"\n ------------------------------------------\n SELECT toUInt16(1) +  N\n \"Date\",\"2019-09-17\"\n-\"DateTime\",\"2019-09-16 19:20:12\"\n-\n-Code: 43: Illegal types UInt16 and DateTime64(3, 'Europe/Minsk') of arguments of function plus.\n+\"DateTime('Europe/Minsk')\",\"2019-09-16 19:20:12\"\n+\"DateTime64(3, 'Europe/Minsk')\",\"2019-09-16 19:20:12.234\"\n ------------------------------------------\n SELECT N -  toUInt16(1)\n \"Date\",\"2019-09-15\"\n-\"DateTime\",\"2019-09-16 19:20:10\"\n-\n-Code: 43: Illegal types DateTime64(3, 'Europe/Minsk') and UInt16 of arguments of function minus.\n+\"DateTime('Europe/Minsk')\",\"2019-09-16 19:20:10\"\n+\"DateTime64(3, 'Europe/Minsk')\",\"2019-09-16 19:20:10.234\"\n ------------------------------------------\n SELECT toUInt16(1) -  N\n \n-Code: 43: Illegal types UInt16 and Date of arguments of function minus.\n+Code: 43: Wrong order of arguments for function minus: argument of type Interval cannot be first..\n \n-Code: 43: Illegal types UInt16 and DateTime('Europe/Minsk') of arguments of function minus.\n+Code: 43: Wrong order of arguments for function minus: argument of type Interval cannot be first..\n \n-Code: 43: Illegal types UInt16 and DateTime64(3, 'Europe/Minsk') of arguments of function minus.\n+Code: 43: Wrong order of arguments for function minus: argument of type Interval cannot be first..\n ------------------------------------------\n SELECT N == toUInt16(1)\n \n@@ -914,29 +905,26 @@ Code: 43: Illegal types of arguments (UInt16, Date) of function greaterOrEquals.\n ------------------------------------------\n SELECT N +  toInt16(-1)\n \"Date\",\"2019-09-15\"\n-\"DateTime\",\"2019-09-16 19:20:10\"\n-\n-Code: 43: Illegal types DateTime64(3, 'Europe/Minsk') and Int16 of arguments of function plus.\n+\"DateTime('Europe/Minsk')\",\"2019-09-16 19:20:10\"\n+\"DateTime64(3, 'Europe/Minsk')\",\"2019-09-16 19:20:10.234\"\n ------------------------------------------\n SELECT toInt16(-1) +  N\n \"Date\",\"2019-09-15\"\n-\"DateTime\",\"2019-09-16 19:20:10\"\n-\n-Code: 43: Illegal types Int16 and DateTime64(3, 'Europe/Minsk') of arguments of function plus.\n+\"DateTime('Europe/Minsk')\",\"2019-09-16 19:20:10\"\n+\"DateTime64(3, 'Europe/Minsk')\",\"2019-09-16 19:20:10.234\"\n ------------------------------------------\n SELECT N -  toInt16(-1)\n \"Date\",\"2019-09-17\"\n-\"DateTime\",\"2019-09-16 19:20:12\"\n-\n-Code: 43: Illegal types DateTime64(3, 'Europe/Minsk') and Int16 of arguments of function minus.\n+\"DateTime('Europe/Minsk')\",\"2019-09-16 19:20:12\"\n+\"DateTime64(3, 'Europe/Minsk')\",\"2019-09-16 19:20:12.234\"\n ------------------------------------------\n SELECT toInt16(-1) -  N\n \n-Code: 43: Illegal types Int16 and Date of arguments of function minus.\n+Code: 43: Wrong order of arguments for function minus: argument of type Interval cannot be first..\n \n-Code: 43: Illegal types Int16 and DateTime('Europe/Minsk') of arguments of function minus.\n+Code: 43: Wrong order of arguments for function minus: argument of type Interval cannot be first..\n \n-Code: 43: Illegal types Int16 and DateTime64(3, 'Europe/Minsk') of arguments of function minus.\n+Code: 43: Wrong order of arguments for function minus: argument of type Interval cannot be first..\n ------------------------------------------\n SELECT N == toInt16(-1)\n \n@@ -1012,29 +1000,26 @@ Code: 43: Illegal types of arguments (Int16, Date) of function greaterOrEquals.\n ------------------------------------------\n SELECT N +  toUInt32(1)\n \"Date\",\"2019-09-17\"\n-\"DateTime\",\"2019-09-16 19:20:12\"\n-\n-Code: 43: Illegal types DateTime64(3, 'Europe/Minsk') and UInt32 of arguments of function plus.\n+\"DateTime('Europe/Minsk')\",\"2019-09-16 19:20:12\"\n+\"DateTime64(3, 'Europe/Minsk')\",\"2019-09-16 19:20:12.234\"\n ------------------------------------------\n SELECT toUInt32(1) +  N\n \"Date\",\"2019-09-17\"\n-\"DateTime\",\"2019-09-16 19:20:12\"\n-\n-Code: 43: Illegal types UInt32 and DateTime64(3, 'Europe/Minsk') of arguments of function plus.\n+\"DateTime('Europe/Minsk')\",\"2019-09-16 19:20:12\"\n+\"DateTime64(3, 'Europe/Minsk')\",\"2019-09-16 19:20:12.234\"\n ------------------------------------------\n SELECT N -  toUInt32(1)\n \"Date\",\"2019-09-15\"\n-\"DateTime\",\"2019-09-16 19:20:10\"\n-\n-Code: 43: Illegal types DateTime64(3, 'Europe/Minsk') and UInt32 of arguments of function minus.\n+\"DateTime('Europe/Minsk')\",\"2019-09-16 19:20:10\"\n+\"DateTime64(3, 'Europe/Minsk')\",\"2019-09-16 19:20:10.234\"\n ------------------------------------------\n SELECT toUInt32(1) -  N\n \n-Code: 43: Illegal types UInt32 and Date of arguments of function minus.\n+Code: 43: Wrong order of arguments for function minus: argument of type Interval cannot be first..\n \n-Code: 43: Illegal types UInt32 and DateTime('Europe/Minsk') of arguments of function minus.\n+Code: 43: Wrong order of arguments for function minus: argument of type Interval cannot be first..\n \n-Code: 43: Illegal types UInt32 and DateTime64(3, 'Europe/Minsk') of arguments of function minus.\n+Code: 43: Wrong order of arguments for function minus: argument of type Interval cannot be first..\n ------------------------------------------\n SELECT N == toUInt32(1)\n \n@@ -1110,29 +1095,26 @@ Code: 43: Illegal types of arguments (UInt32, Date) of function greaterOrEquals.\n ------------------------------------------\n SELECT N +  toInt32(-1)\n \"Date\",\"2019-09-15\"\n-\"DateTime\",\"2019-09-16 19:20:10\"\n-\n-Code: 43: Illegal types DateTime64(3, 'Europe/Minsk') and Int32 of arguments of function plus.\n+\"DateTime('Europe/Minsk')\",\"2019-09-16 19:20:10\"\n+\"DateTime64(3, 'Europe/Minsk')\",\"2019-09-16 19:20:10.234\"\n ------------------------------------------\n SELECT toInt32(-1) +  N\n \"Date\",\"2019-09-15\"\n-\"DateTime\",\"2019-09-16 19:20:10\"\n-\n-Code: 43: Illegal types Int32 and DateTime64(3, 'Europe/Minsk') of arguments of function plus.\n+\"DateTime('Europe/Minsk')\",\"2019-09-16 19:20:10\"\n+\"DateTime64(3, 'Europe/Minsk')\",\"2019-09-16 19:20:10.234\"\n ------------------------------------------\n SELECT N -  toInt32(-1)\n \"Date\",\"2019-09-17\"\n-\"DateTime\",\"2019-09-16 19:20:12\"\n-\n-Code: 43: Illegal types DateTime64(3, 'Europe/Minsk') and Int32 of arguments of function minus.\n+\"DateTime('Europe/Minsk')\",\"2019-09-16 19:20:12\"\n+\"DateTime64(3, 'Europe/Minsk')\",\"2019-09-16 19:20:12.234\"\n ------------------------------------------\n SELECT toInt32(-1) -  N\n \n-Code: 43: Illegal types Int32 and Date of arguments of function minus.\n+Code: 43: Wrong order of arguments for function minus: argument of type Interval cannot be first..\n \n-Code: 43: Illegal types Int32 and DateTime('Europe/Minsk') of arguments of function minus.\n+Code: 43: Wrong order of arguments for function minus: argument of type Interval cannot be first..\n \n-Code: 43: Illegal types Int32 and DateTime64(3, 'Europe/Minsk') of arguments of function minus.\n+Code: 43: Wrong order of arguments for function minus: argument of type Interval cannot be first..\n ------------------------------------------\n SELECT N == toInt32(-1)\n \n@@ -1208,29 +1190,26 @@ Code: 43: Illegal types of arguments (Int32, Date) of function greaterOrEquals.\n ------------------------------------------\n SELECT N +  toUInt64(1)\n \"Date\",\"2019-09-17\"\n-\"DateTime\",\"2019-09-16 19:20:12\"\n-\n-Code: 43: Illegal types DateTime64(3, 'Europe/Minsk') and UInt64 of arguments of function plus.\n+\"DateTime('Europe/Minsk')\",\"2019-09-16 19:20:12\"\n+\"DateTime64(3, 'Europe/Minsk')\",\"2019-09-16 19:20:12.234\"\n ------------------------------------------\n SELECT toUInt64(1) +  N\n \"Date\",\"2019-09-17\"\n-\"DateTime\",\"2019-09-16 19:20:12\"\n-\n-Code: 43: Illegal types UInt64 and DateTime64(3, 'Europe/Minsk') of arguments of function plus.\n+\"DateTime('Europe/Minsk')\",\"2019-09-16 19:20:12\"\n+\"DateTime64(3, 'Europe/Minsk')\",\"2019-09-16 19:20:12.234\"\n ------------------------------------------\n SELECT N -  toUInt64(1)\n \"Date\",\"2019-09-15\"\n-\"DateTime\",\"2019-09-16 19:20:10\"\n-\n-Code: 43: Illegal types DateTime64(3, 'Europe/Minsk') and UInt64 of arguments of function minus.\n+\"DateTime('Europe/Minsk')\",\"2019-09-16 19:20:10\"\n+\"DateTime64(3, 'Europe/Minsk')\",\"2019-09-16 19:20:10.234\"\n ------------------------------------------\n SELECT toUInt64(1) -  N\n \n-Code: 43: Illegal types UInt64 and Date of arguments of function minus.\n+Code: 43: Wrong order of arguments for function minus: argument of type Interval cannot be first..\n \n-Code: 43: Illegal types UInt64 and DateTime('Europe/Minsk') of arguments of function minus.\n+Code: 43: Wrong order of arguments for function minus: argument of type Interval cannot be first..\n \n-Code: 43: Illegal types UInt64 and DateTime64(3, 'Europe/Minsk') of arguments of function minus.\n+Code: 43: Wrong order of arguments for function minus: argument of type Interval cannot be first..\n ------------------------------------------\n SELECT N == toUInt64(1)\n \n@@ -1306,29 +1285,26 @@ Code: 43: Illegal types of arguments (UInt64, Date) of function greaterOrEquals.\n ------------------------------------------\n SELECT N +  toInt64(-1)\n \"Date\",\"2019-09-15\"\n-\"DateTime\",\"2019-09-16 19:20:10\"\n-\n-Code: 43: Illegal types DateTime64(3, 'Europe/Minsk') and Int64 of arguments of function plus.\n+\"DateTime('Europe/Minsk')\",\"2019-09-16 19:20:10\"\n+\"DateTime64(3, 'Europe/Minsk')\",\"2019-09-16 19:20:10.234\"\n ------------------------------------------\n SELECT toInt64(-1) +  N\n \"Date\",\"2019-09-15\"\n-\"DateTime\",\"2019-09-16 19:20:10\"\n-\n-Code: 43: Illegal types Int64 and DateTime64(3, 'Europe/Minsk') of arguments of function plus.\n+\"DateTime('Europe/Minsk')\",\"2019-09-16 19:20:10\"\n+\"DateTime64(3, 'Europe/Minsk')\",\"2019-09-16 19:20:10.234\"\n ------------------------------------------\n SELECT N -  toInt64(-1)\n \"Date\",\"2019-09-17\"\n-\"DateTime\",\"2019-09-16 19:20:12\"\n-\n-Code: 43: Illegal types DateTime64(3, 'Europe/Minsk') and Int64 of arguments of function minus.\n+\"DateTime('Europe/Minsk')\",\"2019-09-16 19:20:12\"\n+\"DateTime64(3, 'Europe/Minsk')\",\"2019-09-16 19:20:12.234\"\n ------------------------------------------\n SELECT toInt64(-1) -  N\n \n-Code: 43: Illegal types Int64 and Date of arguments of function minus.\n+Code: 43: Wrong order of arguments for function minus: argument of type Interval cannot be first..\n \n-Code: 43: Illegal types Int64 and DateTime('Europe/Minsk') of arguments of function minus.\n+Code: 43: Wrong order of arguments for function minus: argument of type Interval cannot be first..\n \n-Code: 43: Illegal types Int64 and DateTime64(3, 'Europe/Minsk') of arguments of function minus.\n+Code: 43: Wrong order of arguments for function minus: argument of type Interval cannot be first..\n ------------------------------------------\n SELECT N == toInt64(-1)\n \ndiff --git a/dbms/tests/queries/0_stateless/01085_datetime_arithmetic_preserve_timezone.reference b/dbms/tests/queries/0_stateless/01085_datetime_arithmetic_preserve_timezone.reference\nnew file mode 100644\nindex 000000000000..7a508191b409\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/01085_datetime_arithmetic_preserve_timezone.reference\n@@ -0,0 +1,1 @@\n+2020-01-01 00:00:00\t2020-01-01 00:00:01\t2020-01-02\t2020-01-01 00:00:01\t2020-01-02 00:00:00\tDateTime(\\'UTC\\')\t2020-01-01 00:00:01.000\tDateTime64(3, \\'UTC\\')\ndiff --git a/dbms/tests/queries/0_stateless/01085_datetime_arithmetic_preserve_timezone.sql b/dbms/tests/queries/0_stateless/01085_datetime_arithmetic_preserve_timezone.sql\nnew file mode 100644\nindex 000000000000..b3057457d39e\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/01085_datetime_arithmetic_preserve_timezone.sql\n@@ -0,0 +1,1 @@\n+SELECT toDateTime('2020-01-01 00:00:00', 'UTC') AS t, t + 1, toDate(t) + 1, t + INTERVAL 1 SECOND, t + INTERVAL 1 DAY, toTypeName(t + 1), toDateTime64(t, 3, 'UTC') + 1 AS dt64, toTypeName(dt64);\n",
  "problem_statement": "Arithmetic operation on DateTime doesn't save time zone.\ntoStartOfInterval function does not work correctly.\r\nSELECT\r\n\u00a0\u00a0\u00a0\u00a0 toStartOfInterval (now (), toIntervalHour (12), 'UTC') - (3600 * 3) AS t1,\r\n\u00a0\u00a0\u00a0\u00a0 toStartOfInterval (now (), toIntervalHour (12), 'UTC') AS t2\r\nversion 19.6.2.11\n",
  "hints_text": "I've changed the title of this bug accordingly:\r\n\r\n```\r\nSELECT\r\n     toStartOfInterval (now (), toIntervalHour (12), 'UTC') - (3600 * 3) AS t1, toTypeName(t1),\r\n     toStartOfInterval (now (), toIntervalHour (12), 'UTC') AS t2, toTypeName(t2)\r\n```",
  "created_at": "2020-02-23T22:19:37Z"
}