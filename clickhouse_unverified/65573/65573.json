{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 65573,
  "instance_id": "ClickHouse__ClickHouse-65573",
  "issue_numbers": [
    "65548"
  ],
  "base_commit": "af361a73ffa32324af88a441735d50b039a98b04",
  "patch": "diff --git a/src/Storages/StorageMergeTree.cpp b/src/Storages/StorageMergeTree.cpp\nindex 9352f772ce10..0dd0f051244a 100644\n--- a/src/Storages/StorageMergeTree.cpp\n+++ b/src/Storages/StorageMergeTree.cpp\n@@ -1549,6 +1549,12 @@ bool StorageMergeTree::optimize(\n {\n     assertNotReadonly();\n \n+    if (deduplicate && getInMemoryMetadataPtr()->hasProjections())\n+        throw Exception(ErrorCodes::NOT_IMPLEMENTED,\n+                    \"OPTIMIZE DEDUPLICATE query is not supported for table {} as it has projections. \"\n+                    \"User should drop all the projections manually before running the query\",\n+                    getStorageID().getTableName());\n+\n     if (deduplicate)\n     {\n         if (deduplicate_by_columns.empty())\ndiff --git a/src/Storages/StorageReplicatedMergeTree.cpp b/src/Storages/StorageReplicatedMergeTree.cpp\nindex db58d0081c67..403313a71771 100644\n--- a/src/Storages/StorageReplicatedMergeTree.cpp\n+++ b/src/Storages/StorageReplicatedMergeTree.cpp\n@@ -5746,6 +5746,12 @@ bool StorageReplicatedMergeTree::optimize(\n     if (!is_leader)\n         throw Exception(ErrorCodes::NOT_A_LEADER, \"OPTIMIZE cannot be done on this replica because it is not a leader\");\n \n+    if (deduplicate && getInMemoryMetadataPtr()->hasProjections())\n+        throw Exception(ErrorCodes::NOT_IMPLEMENTED,\n+                    \"OPTIMIZE DEDUPLICATE query is not supported for table {} as it has projections. \"\n+                    \"User should drop all the projections manually before running the query\",\n+                    getStorageID().getTableName());\n+\n     if (cleanup)\n     {\n         if (!getSettings()->allow_experimental_replacing_merge_with_cleanup)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03174_projection_deduplicate.reference b/tests/queries/0_stateless/03174_projection_deduplicate.reference\nnew file mode 100644\nindex 000000000000..1796b2f1dee6\n--- /dev/null\n+++ b/tests/queries/0_stateless/03174_projection_deduplicate.reference\n@@ -0,0 +1,3 @@\n+1\tone\n+1\tone\n+1\tone\ndiff --git a/tests/queries/0_stateless/03174_projection_deduplicate.sql b/tests/queries/0_stateless/03174_projection_deduplicate.sql\nnew file mode 100644\nindex 000000000000..46222b69dc79\n--- /dev/null\n+++ b/tests/queries/0_stateless/03174_projection_deduplicate.sql\n@@ -0,0 +1,30 @@\n+-- https://github.com/ClickHouse/ClickHouse/issues/65548\n+DROP TABLE IF EXISTS test_projection_deduplicate;\n+\n+CREATE TABLE test_projection_deduplicate\n+(\n+    `id` Int32,\n+    `string` String,\n+    PROJECTION test_projection\n+    (\n+        SELECT id\n+        GROUP BY id\n+    )\n+)\n+ENGINE = MergeTree\n+PRIMARY KEY id;\n+\n+INSERT INTO test_projection_deduplicate VALUES (1, 'one');\n+INSERT INTO test_projection_deduplicate VALUES (1, 'one');\n+\n+OPTIMIZE TABLE test_projection_deduplicate DEDUPLICATE; -- { serverError NOT_IMPLEMENTED }\n+\n+SELECT * FROM test_projection_deduplicate;\n+\n+ALTER TABLE test_projection_deduplicate DROP PROJECTION test_projection;\n+\n+OPTIMIZE TABLE test_projection_deduplicate DEDUPLICATE;\n+\n+SELECT * FROM test_projection_deduplicate;\n+\n+DROP TABLE test_projection_deduplicate;\n",
  "problem_statement": "NOT_FOUND_COLUMN_IN_BLOCK exception on merge deduplicate propagated into projection\n**Describe what's wrong**\r\n```\r\nCREATE TABLE dst\r\n(\r\n    `id` Int32,\r\n    `string` String,\r\n    PROJECTION dst_by_order_id\r\n    (\r\n        SELECT id\r\n        GROUP BY id\r\n    )\r\n)\r\nENGINE = MergeTree\r\nPRIMARY KEY id;\r\n\r\nINSERT INTO dst VALUES (1, 'one');\r\nINSERT INTO dst VALUES (1, 'one');\r\n\r\nOPTIMIZE TABLE dst DEDUPLICATE\r\n\r\nReceived exception from server (version 24.6.1):\r\nCode: 10. DB::Exception: Received from localhost:9000. DB::Exception: Not found column string in block. There are only columns: id. (NOT_FOUND_COLUMN_IN_BLOCK)\r\n```\r\nhttps://fiddle.clickhouse.com/7f8d2c4c-40c0-4a7c-9891-27a164a28c2f\r\n\r\n**Does it reproduce on the most recent release?**\r\nyes\r\n\r\n**Error message and/or stacktrace**\r\n\r\n```\r\n2024.06.21 21:50:25.601677 [ 855452 ] {e19f1ff6-12ff-42b4-876b-7eed601238ce::all_1_2_1} <Debug> MergeTask::MergeProjectionsStage: Selected 2 projection_parts from dst_by_order_id to dst_by_order_id\r\n2024.06.21 21:50:25.601996 [ 855452 ] {e19f1ff6-12ff-42b4-876b-7eed601238ce::all_1_2_1} <Debug> MergeTask::PrepareStage: Merging 2 parts: from dst_by_order_id to dst_by_order_id into Compact with storage Full\r\n2024.06.21 21:50:25.602086 [ 855452 ] {e19f1ff6-12ff-42b4-876b-7eed601238ce::all_1_2_1} <Debug> MergeTask::PrepareStage: DEDUPLICATE BY ('id', 'string')\r\n2024.06.21 21:50:25.602498 [ 855452 ] {e19f1ff6-12ff-42b4-876b-7eed601238ce::all_1_2_1} <Debug> MergeTask::PrepareStage: Selected MergeAlgorithm: Horizontal\r\n2024.06.21 21:50:25.602652 [ 855452 ] {e19f1ff6-12ff-42b4-876b-7eed601238ce::all_1_2_1} <Debug> MergeTreeSequentialSource: Reading 2 marks from part dst_by_order_id, total 1 rows starting from the beginning of the part, column id\r\n2024.06.21 21:50:25.603025 [ 855452 ] {e19f1ff6-12ff-42b4-876b-7eed601238ce::all_1_2_1} <Debug> MergeTreeSequentialSource: Reading 2 marks from part dst_by_order_id, total 1 rows starting from the beginning of the part, column id\r\n2024.06.21 21:50:26.003894 [ 856084 ] {} <Trace> AsynchronousMetrics: MemoryTracking: was 485.22 MiB, peak 502.31 MiB, free memory in arenas 16.37 MiB, will set to 561.58 MiB (RSS), difference: 76.35 MiB\r\n2024.06.21 21:50:26.414928 [ 855452 ] {6ba66717-7f28-4c0a-96ba-1cbc301d62a0} <Debug> MemoryTracker: Peak memory usage background process to apply mutate/merge in table: 3.29 MiB.\r\n2024.06.21 21:50:26.415338 [ 855452 ] {6ba66717-7f28-4c0a-96ba-1cbc301d62a0} <Error> executeQuery: Code: 10. DB::Exception: Not found column string in block. There are only columns: id. (NOT_FOUND_COLUMN_IN_BLOCK) (version 24.6.1.1\r\n) (from 127.0.0.1:43934) (in query: OPTIMIZE TABLE dst DEDUPLICATE), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. /home/ubuntu/ClickHouse-proto/contrib/llvm-project/libcxx/include/exception:141: std::exception::capture() @ 0x000000000aac7262\r\n1. /home/ubuntu/ClickHouse-proto/contrib/llvm-project/libcxx/include/exception:116: std::exception::exception[abi:v15000]() @ 0x000000000aac722d\r\n2. /home/ubuntu/ClickHouse-proto/base/poco/Foundation/src/Exception.cpp:27: Poco::Exception::Exception(String const&, int) @ 0x0000000022db9960\r\n3. /home/ubuntu/ClickHouse-proto/src/Common/Exception.cpp:99: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x0000000012ff6b0e\r\n4. /home/ubuntu/ClickHouse-proto/src/Common/Exception.h:95: DB::Exception::Exception(String&&, int, bool) @ 0x000000000aabd1aa\r\n5. /home/ubuntu/ClickHouse-proto/src/Common/Exception.h:68: DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000aaba9a9\r\n6. /home/ubuntu/ClickHouse-proto/src/Common/Exception.h:113: DB::Exception::Exception<String const&, String>(int, FormatStringHelperImpl<std::type_identity<String const&>::type, std::type_identity<String>::type>, String const&, Str\r\ning&&) @ 0x000000000b1759ad\r\n7. /home/ubuntu/ClickHouse-proto/src/Core/Block.cpp:334: DB::Block::getPositionByName(String const&) const @ 0x0000000019c45b1a\r\n8. /home/ubuntu/ClickHouse-proto/src/Processors/Transforms/DistinctSortedTransform.cpp:22: DB::calcColumnPositionsInHeader(DB::Block const&, std::vector<String, std::allocator<String>> const&, std::vector<unsigned long, std::alloca\r\ntor<unsigned long>>&, std::vector<unsigned long, std::allocator<unsigned long>>&) @ 0x000000001dd74560\r\n9. /home/ubuntu/ClickHouse-proto/src/Processors/Transforms/DistinctSortedTransform.cpp:72: DB::DistinctSortedTransform::isApplicable(DB::Block const&, DB::SortDescription const&, std::vector<String, std::allocator<String>> const&)\r\n@ 0x000000001dd7436b\r\n10. /home/ubuntu/ClickHouse-proto/src/Storages/MergeTree/MergeTask.cpp:1127: DB::MergeTask::ExecuteAndFinalizeHorizontalPart::createMergedStream() @ 0x000000001ce8e972\r\n11. /home/ubuntu/ClickHouse-proto/src/Storages/MergeTree/MergeTask.cpp:333: DB::MergeTask::ExecuteAndFinalizeHorizontalPart::prepare() @ 0x000000001ce8abb5\r\n12. /home/ubuntu/ClickHouse-proto/src/Storages/MergeTree/MergeTask.cpp:448: DB::MergeTask::ExecuteAndFinalizeHorizontalPart::execute() @ 0x000000001ce8f978\r\n13. /home/ubuntu/ClickHouse-proto/src/Storages/MergeTree/MergeTask.cpp:924: DB::MergeTask::execute() @ 0x000000001ce948d2\r\n14. /home/ubuntu/ClickHouse-proto/src/Storages/MergeTree/MergeTask.cpp:833: DB::MergeTask::MergeProjectionsStage::executeProjections() const @ 0x000000001ce94817\r\n15. /home/ubuntu/ClickHouse-proto/src/Storages/MergeTree/MergeTask.cpp:875: DB::MergeTask::MergeProjectionsStage::execute() @ 0x000000001ce94ef8\r\n16. /home/ubuntu/ClickHouse-proto/src/Storages/MergeTree/MergeTask.cpp:924: DB::MergeTask::execute() @ 0x000000001ce948d2\r\n17. /home/ubuntu/ClickHouse-proto/src/Storages/MergeTree/MergePlainMergeTreeTask.cpp:57: DB::MergePlainMergeTreeTask::executeStep() @ 0x000000001d460fe0\r\n18. /home/ubuntu/ClickHouse-proto/src/Storages/MergeTree/MergePlainMergeTreeTask.h:104: DB::executeHere(std::shared_ptr<DB::MergePlainMergeTreeTask>) @ 0x000000001d41c4a4\r\n19. /home/ubuntu/ClickHouse-proto/src/Storages/StorageMergeTree.cpp:1193: DB::StorageMergeTree::merge(bool, String const&, bool, bool, std::vector<String, std::allocator<String>> const&, bool, std::shared_ptr<DB::MergeTreeTransacti\r\non> const&, PreformattedMessage&, bool) @ 0x000000001d41c36f\r\n20. /home/ubuntu/ClickHouse-proto/src/Storages/StorageMergeTree.cpp:1632: DB::StorageMergeTree::optimize(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::IAST> const&,\r\n bool, bool, std::vector<String, std::allocator<String>> const&, bool, std::shared_ptr<DB::Context const>) @ 0x000000001d422f19\r\n21. /home/ubuntu/ClickHouse-proto/src/Interpreters/InterpreterOptimizeQuery.cpp:84: DB::InterpreterOptimizeQuery::execute() @ 0x000000001bf168e5\r\n22. /home/ubuntu/ClickHouse-proto/src/Interpreters/executeQuery.cpp:1210: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x000000001be\r\na7617\r\n23. /home/ubuntu/ClickHouse-proto/src/Interpreters/executeQuery.cpp:1376: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x000000001bea1b0a\r\n24. /home/ubuntu/ClickHouse-proto/src/Server/TCPHandler.cpp:556: DB::TCPHandler::runImpl() @ 0x000000001d7aef99\r\n25. /home/ubuntu/ClickHouse-proto/src/Server/TCPHandler.cpp:2430: DB::TCPHandler::run() @ 0x000000001d7c495f\r\n26. /home/ubuntu/ClickHouse-proto/base/poco/Net/src/TCPServerConnection.cpp:43: Poco::Net::TCPServerConnection::start() @ 0x0000000022c63f99\r\n27. /home/ubuntu/ClickHouse-proto/base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x0000000022c647e8\r\n28. /home/ubuntu/ClickHouse-proto/base/poco/Foundation/src/ThreadPool.cpp:188: Poco::PooledThread::run() @ 0x0000000022e398d4\r\n29. /home/ubuntu/ClickHouse-proto/base/poco/Foundation/src/Thread.cpp:46: Poco::(anonymous namespace)::RunnableHolder::run() @ 0x0000000022e3667a\r\n30. /home/ubuntu/ClickHouse-proto/base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000022e353be\r\n31. ? @ 0x0000701f29094ac3\r\n```\r\n\r\n**Additional context**\r\n\r\nhttps://github.com/ClickHouse/support-escalation/issues/2281\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2024-06-23T05:07:59Z"
}