You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
`signed integer overflow` in `age` function
https://s3.amazonaws.com/clickhouse-test-reports/56626/35725b666f6afdf115aa977fadd15d2076cba020/ast_fuzzer__ubsan_.html

```
/build/src/Functions/DateTimeTransforms.h:1957:24: runtime error: signed integer overflow: 10413791999000000 * 1000 cannot be represented in type 'long'
    #0 0x556384ad4eaf in long DB::(anonymous namespace)::DateDiffImpl<false>::calculate<DB::TransformDateTime64<DB::ToRelativeSecondNumImpl<(DB::ResultPrecision)1>>, DB::TransformDateTime64<DB::ToRelativeSecondNumImpl<(DB::ResultPrecision)1>>, DB::DateTime64, DB::DateTime64>(DB::TransformDateTime64<DB::ToRelativeSecondNumImpl<(DB::ResultPrecision)1>> const&, DB::TransformDateTime64<DB::ToRelativeSecondNumImpl<(DB::ResultPrecision)1>> const&, DB::DateTime64, DB::DateTime64, DateLUTImpl const&, DateLUTImpl const&) const dateDiff.cpp
    #1 0x556384a73474 in void DB::(anonymous namespace)::DateDiffImpl<false>::dispatchForColumns<DB::ToRelativeSecondNumImpl<(DB::ResultPrecision)1>>(DB::IColumn const&, DB::IColumn const&, DateLUTImpl const&, DateLUTImpl const&, DB::PODArray<long, 4096ul, Allocator<false, false>, 63ul, 64ul>&) const dateDiff.cpp
    #2 0x556384a45cac in DB::(anonymous namespace)::FunctionDateDiff<false>::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const dateDiff.cpp
    #3 0x556381da5245 in DB::IFunction::executeImplDryRun(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const (/workspace/clickhouse+0x18818245) (BuildId: 0ad7d269b487dfdb589935d1efcf94f4065c3b09)
    #4 0x556381dd2af8 in DB::FunctionToExecutableFunctionAdaptor::executeDryRunImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const (/workspace/clickhouse+0x18845af8) (BuildId: 0ad7d269b487dfdb589935d1efcf94f4065c3b09)
    #5 0x5563835581e2 in DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const (/workspace/clickhouse+0x19fcb1e2) (BuildId: 0ad7d269b487dfdb589935d1efcf94f4065c3b09)
    #6 0x5563835586fa in DB::IExecutableFunction::defaultImplementationForNulls(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const (/workspace/clickhouse+0x19fcb6fa) (BuildId: 0ad7d269b487dfdb589935d1efcf94f4065c3b09)
    #7 0x556383558161 in DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const (/workspace/clickhouse+0x19fcb161) (BuildId: 0ad7d269b487dfdb589935d1efcf94f4065c3b09)
    #8 0x5563835578bb in DB::IExecutableFunction::defaultImplementationForConstantArguments(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const (/workspace/clickhouse+0x19fca8bb) (BuildId: 0ad7d269b487dfdb589935d1efcf94f4065c3b09)
    #9 0x5563835580eb in DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const (/workspace/clickhouse+0x19fcb0eb) (BuildId: 0ad7d269b487dfdb589935d1efcf94f4065c3b09)
    #10 0x556383559d48 in DB::IExecutableFunction::executeWithoutSparseColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const (/workspace/clickhouse+0x19fccd48) (BuildId: 0ad7d269b487dfdb589935d1efcf94f4065c3b09)
    #11 0x55638355b627 in DB::IExecutableFunction::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const (/workspace/clickhouse+0x19fce627) (BuildId: 0ad7d269b487dfdb589935d1efcf94f4065c3b09)
    #12 0x55639a43530e in DB::QueryAnalyzer::resolveFunction(std::__1::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) build_docker/./src/Analyzer/Resolve/QueryAnalyzer.cpp:3436:47
    #13 0x55639a405dc7 in DB::QueryAnalyzer::resolveExpressionNode(std::__1::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) build_docker/./src/Analyzer/Resolve/QueryAnalyzer.cpp:3736:46
    #14 0x55639a40472c in DB::QueryAnalyzer::resolveExpressionNodeList(std::__1::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) build_docker/./src/Analyzer/Resolve/QueryAnalyzer.cpp:3890:49
    #15 0x55639a44e69b in DB::QueryAnalyzer::resolveGroupByNode(DB::QueryNode&, DB::IdentifierResolveScope&) build_docker/./src/Analyzer/Resolve/QueryAnalyzer.cpp:4085:9
    #16 0x55639a3f8845 in DB::QueryAnalyzer::resolveQuery(std::__1::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) build_docker/./src/Analyzer/Resolve/QueryAnalyzer.cpp:5426:9
    #17 0x55639a3f5758 in DB::QueryAnalyzer::resolve(std::__1::shared_ptr<DB::IQueryTreeNode>&, std::__1::shared_ptr<DB::IQueryTreeNode> const&, std::__1::shared_ptr<DB::Context const>) build_docker/./src/Analyzer/Resolve/QueryAnalyzer.cpp:137:13
    #18 0x55639a3f4ecb in DB::QueryAnalysisPass::run(std::__1::shared_ptr<DB::IQueryTreeNode>&, std::__1::shared_ptr<DB::Context const>) build_docker/./src/Analyzer/Resolve/QueryAnalysisPass.cpp:18:14
    #19 0x55639a3ed910 in DB::QueryTreePassManager::run(std::__1::shared_ptr<DB::IQueryTreeNode>) build_docker/./src/Analyzer/QueryTreePassManager.cpp:185:20
    #20 0x55639a69260b in DB::(anonymous namespace)::buildQueryTreeAndRunPasses(std::__1::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::__1::shared_ptr<DB::Context const> const&, std::__1::shared_ptr<DB::IStorage> const&) build_docker/./src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:142:33
    #21 0x55639a68f2bb in DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>> const&) build_docker/./src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:160:18
    #22 0x55639a694b96 in std::__1::__unique_if<DB::InterpreterSelectQueryAnalyzer>::__unique_single std::__1::make_unique[abi:v15007]<DB::InterpreterSelectQueryAnalyzer, std::__1::shared_ptr<DB::IAST>&, std::__1::shared_ptr<DB::Context> const&, DB::SelectQueryOptions const&>(std::__1::shared_ptr<DB::IAST>&, std::__1::shared_ptr<DB::Context> const&, DB::SelectQueryOptions const&) build_docker/./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:714:32
    #23 0x55639a6941e4 in DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0::operator()(DB::InterpreterFactory::Arguments const&) const build_docker/./src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:270:16
...
```

Minimal example to reproduce:
```sql
SELECT age('second', toDateTime(1157339245694594829, 6), toDateTime64('2015-08-18 00:00:10', 3))
```

The problem is obvious but I'm not sure how do we handle overflows in such functions so maybe @rschu1ze you can give some opinions here.
I'm okay with simply throwing exception if the value is going to overflow.
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
