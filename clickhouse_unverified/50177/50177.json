{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 50177,
  "instance_id": "ClickHouse__ClickHouse-50177",
  "issue_numbers": [
    "50094"
  ],
  "base_commit": "32ffa2ae0b781af5c7ae3e5cbf975d3e9b74d86f",
  "patch": "diff --git a/src/Storages/MergeTree/KeyCondition.cpp b/src/Storages/MergeTree/KeyCondition.cpp\nindex b8ef2152a991..239a534ca93b 100644\n--- a/src/Storages/MergeTree/KeyCondition.cpp\n+++ b/src/Storages/MergeTree/KeyCondition.cpp\n@@ -1334,6 +1334,10 @@ bool KeyCondition::isKeyPossiblyWrappedByMonotonicFunctions(\n                 arguments.push_back(const_arg);\n                 kind = FunctionWithOptionalConstArg::Kind::RIGHT_CONST;\n             }\n+\n+            /// If constant arg of binary operator is NULL, there will be no monotonicity.\n+            if (const_arg.column->isNullAt(0))\n+                return false;\n         }\n         else\n             arguments.push_back({ nullptr, key_column_type, \"\" });\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02746_index_analysis_binary_operator_with_null.reference b/tests/queries/0_stateless/02746_index_analysis_binary_operator_with_null.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/02746_index_analysis_binary_operator_with_null.sql b/tests/queries/0_stateless/02746_index_analysis_binary_operator_with_null.sql\nnew file mode 100644\nindex 000000000000..f9613735bbf8\n--- /dev/null\n+++ b/tests/queries/0_stateless/02746_index_analysis_binary_operator_with_null.sql\n@@ -0,0 +1,12 @@\n+drop table if exists tab;\n+\n+create table tab (x DateTime) engine MergeTree order by x;\n+\n+SELECT toDateTime(65537, toDateTime(NULL), NULL)\n+FROM tab\n+WHERE ((x + CAST('1', 'Nullable(UInt8)')) <= 2) AND ((x + CAST('', 'Nullable(UInt8)')) <= 256)\n+ORDER BY\n+    toDateTime(toDateTime(-2, NULL, NULL) + 100.0001, NULL, -2, NULL) DESC NULLS LAST,\n+    x ASC NULLS LAST;\n+\n+drop table tab;\n",
  "problem_statement": "Invalid Field get from type Null to type UInt64 in `KeyCondition`/`FunctionBinaryArithmetic`\nhttps://s3.amazonaws.com/clickhouse-test-reports/50052/8a40a48a4902800306d6772bee920b980481d9b4/fuzzer_astfuzzerdebug/report.html\r\n\r\n```\r\n2023.05.21 21:47:26.206915 [ 155 ] {3d5c9586-aa47-4f94-b436-a7c6fb89182e} <Fatal> : Logical error: 'Invalid Field get from type Null to type UInt64'.\r\n2023.05.21 21:47:26.208036 [ 484 ] {} <Fatal> BaseDaemon: ########################################\r\n2023.05.21 21:47:26.208303 [ 484 ] {} <Fatal> BaseDaemon: (version 23.5.1.1, build id: A1C3861B186BBB950AE9741B3408A251B3C93B0A) (from thread 155) (query_id: 3d5c9586-aa47-4f94-b436-a7c6fb89182e) (query: SELECT toDateTime(65537, toDateTime(NULL), NULL) FROM tab__fuzz_38 PREWHERE (x + CAST('1', 'Nullable(UInt8)')) <= 2 WHERE (x + CAST('', 'Nullable(UInt8)')) <= 256 ORDER BY toDateTime(toDateTime(-2, NULL, NULL) + 100.0001, NULL, -2, NULL) DESC NULLS LAST, x ASC NULLS LAST) Received signal Aborted (6)\r\n2023.05.21 21:47:26.208474 [ 484 ] {} <Fatal> BaseDaemon: \r\n2023.05.21 21:47:26.208657 [ 484 ] {} <Fatal> BaseDaemon: Stack trace: 0x00007ff45462600b 0x00007ff454605859 0x00000000246be57e 0x00000000246be5f5 0x00000000246be9ff 0x000000001ae6a20a 0x000000001aeb85cc 0x000000001b59bbc7 0x000000001bf4181d 0x000000002dbcb285 0x000000002bf821f4 0x0000000021c4aba7 0x0000000021b55af9 0x000000001ae69bbd 0x000000002e5d201d 0x000000002e5a0122 0x000000002e5a113a 0x000000002e5c0344 0x000000002e59fb92 0x000000002e59f852 0x000000002e5a1a28 0x000000002e7883f8 0x000000002e777261 0x000000002e786877 0x000000002e784a31 0x000000002f4d85bd 0x000000002f4d6f09 0x000000002f4d680d 0x000000002f4da7ed 0x000000002f4db7fb 0x000000002f48a8ac 0x000000002f4b037f 0x000000002d41d0ab 0x000000002d8cf177 0x000000002d8cae04 0x000000002ed3040d 0x000000002ed42025 0x00000000341f3779 0x00000000341f3fbc 0x0000000034434dd4 0x0000000034431b7a\r\n2023.05.21 21:47:26.208871 [ 484 ] {} <Fatal> BaseDaemon: 4. raise @ 0x00007ff45462600b in ?\r\n2023.05.21 21:47:26.208999 [ 484 ] {} <Fatal> BaseDaemon: 5. abort @ 0x00007ff454605859 in ?\r\n2023.05.21 21:47:26.313313 [ 484 ] {} <Fatal> BaseDaemon: 6. /build/src/Common/Exception.cpp:42: DB::abortOnFailedAssertion(String const&) @ 0x00000000246be57e in /workspace/clickhouse\r\n2023.05.21 21:47:26.415440 [ 484 ] {} <Fatal> BaseDaemon: 7. /build/src/Common/Exception.cpp:65: DB::handle_error_code(String const&, int, bool, std::vector<void*, std::allocator<void*>> const&) @ 0x00000000246be5f5 in /workspace/clickhouse\r\n2023.05.21 21:47:26.504729 [ 484 ] {} <Fatal> BaseDaemon: 8. /build/src/Common/Exception.cpp:93: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000246be9ff in /workspace/clickhouse\r\n2023.05.21 21:47:26.599120 [ 484 ] {} <Fatal> BaseDaemon: 9. /build/src/Common/Exception.h:54: DB::Exception::Exception(String&&, int, bool) @ 0x000000001ae6a20a in /workspace/clickhouse\r\n2023.05.21 21:47:27.554265 [ 484 ] {} <Fatal> BaseDaemon: 10. /build/src/Common/Exception.h:81: DB::Exception::Exception<DB::Field::Types::Which&, DB::Field::Types::Which const&>(int, FormatStringHelperImpl<std::type_identity<DB::Field::Types::Which&>::type, std::type_identity<DB::Field::Types::Which const&>::type>, DB::Field::Types::Which&, DB::Field::Types::Which const&) @ 0x000000001aeb85cc in /workspace/clickhouse\r\n2023.05.21 21:47:27.646781 [ 484 ] {} <Fatal> BaseDaemon: 11. /build/src/Core/Field.h:876: DB::NearestFieldTypeImpl<std::decay<char8_t>::type, void>::Type& DB::Field::get<char8_t>() @ 0x000000001b59bbc7 in /workspace/clickhouse\r\n2023.05.21 21:47:28.249323 [ 484 ] {} <Fatal> BaseDaemon: 12. /build/src/Core/Field.h:462: auto const& DB::Field::get<char8_t>() const @ 0x000000001bf4181d in /workspace/clickhouse\r\n2023.05.21 21:47:28.570228 [ 484 ] {} <Fatal> BaseDaemon: 13. /build/src/Columns/ColumnVector.h:308: DB::ColumnVector<char8_t>::insert(DB::Field const&) @ 0x000000002dbcb285 in /workspace/clickhouse\r\n2023.05.21 21:47:28.624747 [ 484 ] {} <Fatal> BaseDaemon: 14. /build/src/DataTypes/IDataType.cpp:59: DB::IDataType::createColumnConst(unsigned long, DB::Field const&) const @ 0x000000002bf821f4 in /workspace/clickhouse\r\n2023.05.21 21:47:29.922223 [ 484 ] {} <Fatal> BaseDaemon: 15. /build/src/Functions/FunctionBinaryArithmetic.h:2238: DB::FunctionBinaryArithmeticWithConstants<DB::PlusImpl, DB::NamePlus, true, true, false>::getMonotonicityForRange(DB::IDataType const&, DB::Field const&, DB::Field const&) const::'lambda0'(DB::Field const&)::operator()(DB::Field const&) const @ 0x0000000021c4aba7 in /workspace/clickhouse\r\n2023.05.21 21:47:31.130248 [ 484 ] {} <Fatal> BaseDaemon: 16. /build/src/Functions/FunctionBinaryArithmetic.h:2248: DB::FunctionBinaryArithmeticWithConstants<DB::PlusImpl, DB::NamePlus, true, true, false>::getMonotonicityForRange(DB::IDataType const&, DB::Field const&, DB::Field const&) const @ 0x0000000021b55af9 in /workspace/clickhouse\r\n2023.05.21 21:47:31.225595 [ 484 ] {} <Fatal> BaseDaemon: 17. /build/src/Functions/IFunctionAdaptors.h:95: DB::FunctionToFunctionBaseAdaptor::getMonotonicityForRange(DB::IDataType const&, DB::Field const&, DB::Field const&) const @ 0x000000001ae69bbd in /workspace/clickhouse\r\n2023.05.21 21:47:32.391098 [ 484 ] {} <Fatal> BaseDaemon: 18. /build/src/Storages/MergeTree/KeyCondition.cpp:1287: DB::FunctionWithOptionalConstArg::getMonotonicityForRange(DB::IDataType const&, DB::Field const&, DB::Field const&) const @ 0x000000002e5d201d in /workspace/clickhouse\r\n2023.05.21 21:47:33.408397 [ 484 ] {} <Fatal> BaseDaemon: 19. /build/src/Storages/MergeTree/KeyCondition.cpp:2118: DB::KeyCondition::applyMonotonicFunctionsChainToRange(DB::Range, std::vector<std::shared_ptr<DB::IFunctionBase const>, std::allocator<std::shared_ptr<DB::IFunctionBase const>>> const&, std::shared_ptr<DB::IDataType const>, bool) @ 0x000000002e5a0122 in /workspace/clickhouse\r\n2023.05.21 21:47:34.423701 [ 484 ] {} <Fatal> BaseDaemon: 20. /build/src/Storages/MergeTree/KeyCondition.cpp:2247: DB::KeyCondition::checkInHyperrectangle(std::vector<DB::Range, std::allocator<DB::Range>> const&, std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&) const @ 0x000000002e5a113a in /workspace/clickhouse\r\n2023.05.21 21:47:36.203982 [ 484 ] {} <Fatal> BaseDaemon: 21. /build/src/Storages/MergeTree/KeyCondition.cpp:2095: DB::KeyCondition::checkInRange(unsigned long, DB::FieldRef const*, DB::FieldRef const*, std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&, BoolMask) const::$_0::operator()(std::vector<DB::Range, std::allocator<DB::Range>> const&) const @ 0x000000002e5c0344 in /workspace/clickhouse\r\n2023.05.21 21:47:37.852406 [ 484 ] {} <Fatal> BaseDaemon: 22. /build/src/Storages/MergeTree/KeyCondition.cpp:2006: BoolMask DB::forAnyHyperrectangle<DB::KeyCondition::checkInRange(unsigned long, DB::FieldRef const*, DB::FieldRef const*, std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&, BoolMask) const::$_0>(unsigned long, DB::FieldRef const*, DB::FieldRef const*, bool, bool, std::vector<DB::Range, std::allocator<DB::Range>>&, std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&, unsigned long, BoolMask, DB::KeyCondition::checkInRange(unsigned long, DB::FieldRef const*, DB::FieldRef const*, std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&, BoolMask) const::$_0&&) @ 0x000000002e59fb92 in /workspace/clickhouse\r\n2023.05.21 21:47:38.866988 [ 484 ] {} <Fatal> BaseDaemon: 23. /build/src/Storages/MergeTree/KeyCondition.cpp:2092: DB::KeyCondition::checkInRange(unsigned long, DB::FieldRef const*, DB::FieldRef const*, std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&, BoolMask) const @ 0x000000002e59f852 in /workspace/clickhouse\r\n2023.05.21 21:47:39.886310 [ 484 ] {} <Fatal> BaseDaemon: 24. /build/src/Storages/MergeTree/KeyCondition.cpp:2343: DB::KeyCondition::mayBeTrueInRange(unsigned long, DB::FieldRef const*, DB::FieldRef const*, std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&) const @ 0x000000002e5a1a28 in /workspace/clickhouse\r\n2023.05.21 21:47:40.495858 [ 484 ] {} <Fatal> BaseDaemon: 25. /build/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp:1494: DB::MergeTreeDataSelectExecutor::markRangesFromPKRange(std::shared_ptr<DB::IMergeTreeDataPart const> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::KeyCondition const&, DB::Settings const&, Poco::Logger*)::$_2::operator()(DB::MarkRange&) const @ 0x000000002e7883f8 in /workspace/clickhouse\r\n2023.05.21 21:47:41.060474 [ 484 ] {} <Fatal> BaseDaemon: 26. /build/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp:1527: DB::MergeTreeDataSelectExecutor::markRangesFromPKRange(std::shared_ptr<DB::IMergeTreeDataPart const> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::KeyCondition const&, DB::Settings const&, Poco::Logger*) @ 0x000000002e777261 in /workspace/clickhouse\r\n2023.05.21 21:47:41.663328 [ 484 ] {} <Fatal> BaseDaemon: 27. /build/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp:1012: DB::MergeTreeDataSelectExecutor::filterPartsByPrimaryKeyAndSkipIndexes(std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>&&, std::shared_ptr<DB::StorageInMemoryMetadata const>, DB::SelectQueryInfo const&, std::shared_ptr<DB::Context const> const&, DB::KeyCondition const&, DB::MergeTreeReaderSettings const&, Poco::Logger*, unsigned long, std::vector<DB::ReadFromMergeTree::IndexStat, std::allocator<DB::ReadFromMergeTree::IndexStat>>&, bool)::$_0::operator()(unsigned long) const @ 0x000000002e786877 in /workspace/clickhouse\r\n2023.05.21 21:47:42.221576 [ 484 ] {} <Fatal> BaseDaemon: 28. /build/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp:1082: DB::MergeTreeDataSelectExecutor::filterPartsByPrimaryKeyAndSkipIndexes(std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>&&, std::shared_ptr<DB::StorageInMemoryMetadata const>, DB::SelectQueryInfo const&, std::shared_ptr<DB::Context const> const&, DB::KeyCondition const&, DB::MergeTreeReaderSettings const&, Poco::Logger*, unsigned long, std::vector<DB::ReadFromMergeTree::IndexStat, std::allocator<DB::ReadFromMergeTree::IndexStat>>&, bool) @ 0x000000002e784a31 in /workspace/clickhouse\r\n2023.05.21 21:47:42.780126 [ 484 ] {} <Fatal> BaseDaemon: 29. /build/src/Processors/QueryPlan/ReadFromMergeTree.cpp:1322: DB::ReadFromMergeTree::selectRangesToReadImpl(std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::SelectQueryInfo const&, std::shared_ptr<DB::Context const>, unsigned long, std::shared_ptr<std::unordered_map<String, long, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, long>>>>, DB::MergeTreeData const&, std::vector<String, std::allocator<String>> const&, bool, Poco::Logger*) @ 0x000000002f4d85bd in /workspace/clickhouse\r\n2023.05.21 21:47:43.332258 [ 484 ] {} <Fatal> BaseDaemon: 30. /build/src/Processors/QueryPlan/ReadFromMergeTree.cpp:1184: DB::ReadFromMergeTree::selectRangesToRead(std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>, std::shared_ptr<DB::PrewhereInfo> const&, DB::ActionDAGNodes const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::SelectQueryInfo const&, std::shared_ptr<DB::Context const>, unsigned long, std::shared_ptr<std::unordered_map<String, long, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, long>>>>, DB::MergeTreeData const&, std::vector<String, std::allocator<String>> const&, bool, Poco::Logger*) @ 0x000000002f4d6f09 in /workspace/clickhouse\r\n2023.05.21 21:47:43.891636 [ 484 ] {} <Fatal> BaseDaemon: 31. /build/src/Processors/QueryPlan/ReadFromMergeTree.cpp:1116: DB::ReadFromMergeTree::selectRangesToRead(std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>) const @ 0x000000002f4d680d in /workspace/clickhouse\r\n2023.05.21 21:47:44.454008 [ 484 ] {} <Fatal> BaseDaemon: 32. /build/src/Processors/QueryPlan/ReadFromMergeTree.cpp:1494: DB::ReadFromMergeTree::getAnalysisResult() const @ 0x000000002f4da7ed in /workspace/clickhouse\r\n2023.05.21 21:47:44.976210 [ 484 ] {} <Fatal> BaseDaemon: 33. /build/src/Processors/QueryPlan/ReadFromMergeTree.cpp:1607: DB::ReadFromMergeTree::initializePipeline(DB::QueryPipelineBuilder&, DB::BuildQueryPipelineSettings const&) @ 0x000000002f4db7fb in /workspace/clickhouse\r\n2023.05.21 21:47:45.038526 [ 484 ] {} <Fatal> BaseDaemon: 34. /build/src/Processors/QueryPlan/ISourceStep.cpp:20: DB::ISourceStep::updatePipeline(std::vector<std::unique_ptr<DB::QueryPipelineBuilder, std::default_delete<DB::QueryPipelineBuilder>>, std::allocator<std::unique_ptr<DB::QueryPipelineBuilder, std::default_delete<DB::QueryPipelineBuilder>>>>, DB::BuildQueryPipelineSettings const&) @ 0x000000002f48a8ac in /workspace/clickhouse\r\n2023.05.21 21:47:45.244058 [ 484 ] {} <Fatal> BaseDaemon: 35. /build/src/Processors/QueryPlan/QueryPlan.cpp:189: DB::QueryPlan::buildQueryPipeline(DB::QueryPlanOptimizationSettings const&, DB::BuildQueryPipelineSettings const&) @ 0x000000002f4b037f in /workspace/clickhouse\r\n2023.05.21 21:47:45.455831 [ 484 ] {} <Fatal> BaseDaemon: 36. /build/src/Interpreters/InterpreterSelectWithUnionQuery.cpp:379: DB::InterpreterSelectWithUnionQuery::execute() @ 0x000000002d41d0ab in /workspace/clickhouse\r\n2023.05.21 21:47:45.747019 [ 484 ] {} <Fatal> BaseDaemon: 37. /build/src/Interpreters/executeQuery.cpp:717: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x000000002d8cf177 in /workspace/clickhouse\r\n2023.05.21 21:47:46.050179 [ 484 ] {} <Fatal> BaseDaemon: 38. /build/src/Interpreters/executeQuery.cpp:1173: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x000000002d8cae04 in /workspace/clickhouse\r\n2023.05.21 21:47:46.358177 [ 484 ] {} <Fatal> BaseDaemon: 39. /build/src/Server/TCPHandler.cpp:420: DB::TCPHandler::runImpl() @ 0x000000002ed3040d in /workspace/clickhouse\r\n2023.05.21 21:47:46.706483 [ 484 ] {} <Fatal> BaseDaemon: 40. /build/src/Server/TCPHandler.cpp:2043: DB::TCPHandler::run() @ 0x000000002ed42025 in /workspace/clickhouse\r\n2023.05.21 21:47:46.730297 [ 484 ] {} <Fatal> BaseDaemon: 41. /build/base/poco/Net/src/TCPServerConnection.cpp:43: Poco::Net::TCPServerConnection::start() @ 0x00000000341f3779 in /workspace/clickhouse\r\n2023.05.21 21:47:46.761505 [ 484 ] {} <Fatal> BaseDaemon: 42. /build/base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x00000000341f3fbc in /workspace/clickhouse\r\n2023.05.21 21:47:46.795452 [ 484 ] {} <Fatal> BaseDaemon: 43. /build/base/poco/Foundation/src/ThreadPool.cpp:188: Poco::PooledThread::run() @ 0x0000000034434dd4 in /workspace/clickhouse\r\n2023.05.21 21:47:46.827558 [ 484 ] {} <Fatal> BaseDaemon: 44. /build/base/poco/Foundation/src/Thread.cpp:46: Poco::(anonymous namespace)::RunnableHolder::run() @ 0x0000000034431b7a in /workspace/clickhouse\r\n2023.05.21 21:47:46.827753 [ 484 ] {} <Fatal> BaseDaemon: Integrity check of the executable skipped because the reference checksum could not be read.\r\n2023.05.21 21:48:10.413863 [ 146 ] {} <Fatal> Application: Child process was terminated by signal 6.\r\n```\r\n\n",
  "hints_text": "",
  "created_at": "2023-05-24T07:49:06Z"
}