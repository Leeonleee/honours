{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 68741,
  "instance_id": "ClickHouse__ClickHouse-68741",
  "issue_numbers": [
    "67117"
  ],
  "base_commit": "d3f3bc3565c14f51c48afd66868cebed995f2330",
  "patch": "diff --git a/src/Interpreters/AsynchronousInsertQueue.cpp b/src/Interpreters/AsynchronousInsertQueue.cpp\nindex 62777524c2a9..5e012d179c84 100644\n--- a/src/Interpreters/AsynchronousInsertQueue.cpp\n+++ b/src/Interpreters/AsynchronousInsertQueue.cpp\n@@ -389,6 +389,10 @@ AsynchronousInsertQueue::pushDataChunk(ASTPtr query, DataChunk chunk, ContextPtr\n     if (data_kind == DataKind::Preprocessed)\n         insert_query.format = \"Native\";\n \n+    /// Query parameters make sense only for format Values.\n+    if (insert_query.format == \"Values\")\n+        entry->query_parameters = query_context->getQueryParameters();\n+\n     InsertQuery key{query, query_context->getUserID(), query_context->getCurrentRoles(), settings, data_kind};\n     InsertDataPtr data_to_process;\n     std::future<void> insert_future;\n@@ -999,6 +1003,7 @@ Chunk AsynchronousInsertQueue::processEntriesWithParsing(\n                 \"Expected entry with data kind Parsed. Got: {}\", entry->chunk.getDataKind());\n \n         auto buffer = std::make_unique<ReadBufferFromString>(*bytes);\n+        executor.setQueryParameters(entry->query_parameters);\n \n         size_t num_bytes = bytes->size();\n         size_t num_rows = executor.execute(*buffer);\ndiff --git a/src/Interpreters/AsynchronousInsertQueue.h b/src/Interpreters/AsynchronousInsertQueue.h\nindex da14b43d276e..17607ac18794 100644\n--- a/src/Interpreters/AsynchronousInsertQueue.h\n+++ b/src/Interpreters/AsynchronousInsertQueue.h\n@@ -147,6 +147,7 @@ class AsynchronousInsertQueue : public WithContext\n             const String format;\n             MemoryTracker * const user_memory_tracker;\n             const std::chrono::time_point<std::chrono::system_clock> create_time;\n+            NameToNameMap query_parameters;\n \n             Entry(\n                 DataChunk && chunk_,\ndiff --git a/src/Processors/Executors/StreamingFormatExecutor.cpp b/src/Processors/Executors/StreamingFormatExecutor.cpp\nindex 12dd685a7357..10a7b7fd7f5f 100644\n--- a/src/Processors/Executors/StreamingFormatExecutor.cpp\n+++ b/src/Processors/Executors/StreamingFormatExecutor.cpp\n@@ -1,5 +1,6 @@\n #include <Processors/Executors/StreamingFormatExecutor.h>\n #include <Processors/Transforms/AddingDefaultsTransform.h>\n+#include <Processors/Formats/Impl/ValuesBlockInputFormat.h>\n \n namespace DB\n {\n@@ -32,6 +33,13 @@ MutableColumns StreamingFormatExecutor::getResultColumns()\n     return ret_columns;\n }\n \n+void StreamingFormatExecutor::setQueryParameters(const NameToNameMap & parameters)\n+{\n+    /// Query parameters make sense only for format Values.\n+    if (auto * values_format = typeid_cast<ValuesBlockInputFormat *>(format.get()))\n+        values_format->setQueryParameters(parameters);\n+}\n+\n size_t StreamingFormatExecutor::execute(ReadBuffer & buffer)\n {\n     format->setReadBuffer(buffer);\ndiff --git a/src/Processors/Executors/StreamingFormatExecutor.h b/src/Processors/Executors/StreamingFormatExecutor.h\nindex 3aa90ab03602..f159178df8c6 100644\n--- a/src/Processors/Executors/StreamingFormatExecutor.h\n+++ b/src/Processors/Executors/StreamingFormatExecutor.h\n@@ -39,6 +39,9 @@ class StreamingFormatExecutor\n     /// Releases currently accumulated columns.\n     MutableColumns getResultColumns();\n \n+    /// Sets query parameters for input format if applicable.\n+    void setQueryParameters(const NameToNameMap & parameters);\n+\n private:\n     const Block header;\n     const InputFormatPtr format;\ndiff --git a/src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp b/src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp\nindex 9839f64b947a..10d0e0516653 100644\n--- a/src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp\n+++ b/src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp\n@@ -663,6 +663,16 @@ void ValuesBlockInputFormat::resetReadBuffer()\n     IInputFormat::resetReadBuffer();\n }\n \n+void ValuesBlockInputFormat::setQueryParameters(const NameToNameMap & parameters)\n+{\n+    if (parameters == context->getQueryParameters())\n+        return;\n+\n+    auto context_copy = Context::createCopy(context);\n+    context_copy->setQueryParameters(parameters);\n+    context = std::move(context_copy);\n+}\n+\n ValuesSchemaReader::ValuesSchemaReader(ReadBuffer & in_, const FormatSettings & format_settings_)\n     : IRowSchemaReader(buf, format_settings_), buf(in_)\n {\ndiff --git a/src/Processors/Formats/Impl/ValuesBlockInputFormat.h b/src/Processors/Formats/Impl/ValuesBlockInputFormat.h\nindex 0abafc896ffb..228e8d0d5727 100644\n--- a/src/Processors/Formats/Impl/ValuesBlockInputFormat.h\n+++ b/src/Processors/Formats/Impl/ValuesBlockInputFormat.h\n@@ -38,6 +38,7 @@ class ValuesBlockInputFormat final : public IInputFormat\n \n     /// TODO: remove context somehow.\n     void setContext(const ContextPtr & context_) { context = Context::createCopy(context_); }\n+    void setQueryParameters(const NameToNameMap & parameters);\n \n     const BlockMissingValues & getMissingValues() const override { return block_missing_values; }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03228_async_insert_query_params.reference b/tests/queries/0_stateless/03228_async_insert_query_params.reference\nnew file mode 100644\nindex 000000000000..9de99658a532\n--- /dev/null\n+++ b/tests/queries/0_stateless/03228_async_insert_query_params.reference\n@@ -0,0 +1,13 @@\n+11\n+12\n+13\n+14\n+15\n+16\n+17\n+18\n+19\n+20\n+21\n+22\n+23\ndiff --git a/tests/queries/0_stateless/03228_async_insert_query_params.sh b/tests/queries/0_stateless/03228_async_insert_query_params.sh\nnew file mode 100755\nindex 000000000000..6b1303892203\n--- /dev/null\n+++ b/tests/queries/0_stateless/03228_async_insert_query_params.sh\n@@ -0,0 +1,36 @@\n+#!/usr/bin/env bash\n+# Tags: no-parallel\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+$CLICKHOUSE_CLIENT -q \"\n+    DROP TABLE IF EXISTS t_async_insert_params;\n+    CREATE TABLE t_async_insert_params (id UInt64) ENGINE = Memory;\n+\"\n+cmd_params=\"--async_insert 1 --async_insert_busy_timeout_max_ms 300000 --async_insert_busy_timeout_min_ms 300000 --wait_for_async_insert 0 --async_insert_use_adaptive_busy_timeout 0\"\n+\n+$CLICKHOUSE_CLIENT $cmd_params -q \"SET param_p1 = 11; INSERT INTO t_async_insert_params VALUES ({p1:UInt64});\"\n+$CLICKHOUSE_CLIENT $cmd_params -q \"SET param_p2 = 12; INSERT INTO t_async_insert_params VALUES ({p2:UInt64});\"\n+$CLICKHOUSE_CLIENT $cmd_params -q \"SET param_p2 = 1000; INSERT INTO t_async_insert_params VALUES (13);\"\n+$CLICKHOUSE_CLIENT $cmd_params -q 'SET param_p2 = 1000; INSERT INTO t_async_insert_params FORMAT JSONEachRow {\"id\": 14};'\n+\n+$CLICKHOUSE_CLIENT $cmd_params --param_p1 15 -q \"INSERT INTO t_async_insert_params VALUES ({p1:UInt64});\"\n+$CLICKHOUSE_CLIENT $cmd_params --param_p2 16 -q \"INSERT INTO t_async_insert_params VALUES ({p2:UInt64});\"\n+$CLICKHOUSE_CLIENT $cmd_params --param_p2 1000 -q \"INSERT INTO t_async_insert_params VALUES (17);\"\n+$CLICKHOUSE_CLIENT $cmd_params --param_p2 1000 -q 'INSERT INTO t_async_insert_params FORMAT JSONEachRow {\"id\": 18};'\n+\n+url=\"${CLICKHOUSE_URL}&async_insert=1&async_insert_busy_timeout_max_ms=300000&async_insert_busy_timeout_min_ms=300000&wait_for_async_insert=0&async_insert_use_adaptive_busy_timeout=0\"\n+\n+${CLICKHOUSE_CURL} -sS \"$url&param_p1=19\" -d \"INSERT INTO t_async_insert_params VALUES ({p1:UInt64})\"\n+${CLICKHOUSE_CURL} -sS \"$url&param_p2=20\" -d \"INSERT INTO t_async_insert_params VALUES ({p2:UInt64})\"\n+${CLICKHOUSE_CURL} -sS \"$url&param_p3=21\" -d \"INSERT INTO t_async_insert_params VALUES ({p3:UInt64})\"\n+${CLICKHOUSE_CURL} -sS \"$url&param_p2=1000\" -d \"INSERT INTO t_async_insert_params VALUES (22)\"\n+${CLICKHOUSE_CURL} -sS \"$url&param_p2=1000\" -d 'INSERT INTO t_async_insert_params FORMAT JSONEachRow {\"id\": 23}'\n+\n+$CLICKHOUSE_CLIENT -q \"\n+    SYSTEM FLUSH ASYNC INSERT QUEUE;\n+    SELECT id FROM t_async_insert_params ORDER BY id;\n+    DROP TABLE IF EXISTS t_async_insert_params;\n+\"\ndiff --git a/tests/queries/0_stateless/03228_async_insert_query_params_bad_type.reference b/tests/queries/0_stateless/03228_async_insert_query_params_bad_type.reference\nnew file mode 100644\nindex 000000000000..e965047ad7c5\n--- /dev/null\n+++ b/tests/queries/0_stateless/03228_async_insert_query_params_bad_type.reference\n@@ -0,0 +1,1 @@\n+Hello\ndiff --git a/tests/queries/0_stateless/03228_async_insert_query_params_bad_type.sql b/tests/queries/0_stateless/03228_async_insert_query_params_bad_type.sql\nnew file mode 100644\nindex 000000000000..359174245cb3\n--- /dev/null\n+++ b/tests/queries/0_stateless/03228_async_insert_query_params_bad_type.sql\n@@ -0,0 +1,20 @@\n+DROP TABLE IF EXISTS t_async_insert_params;\n+\n+CREATE TABLE t_async_insert_params (id UInt64) ENGINE = MergeTree ORDER BY tuple();\n+\n+SET param_p1 = 'Hello';\n+\n+SET async_insert = 1;\n+SET wait_for_async_insert = 1;\n+\n+INSERT INTO t_async_insert_params VALUES ({p1:UInt64}); -- { serverError  BAD_QUERY_PARAMETER }\n+INSERT INTO t_async_insert_params VALUES ({p1:String}); -- { serverError  TYPE_MISMATCH }\n+\n+ALTER TABLE t_async_insert_params MODIFY COLUMN id String;\n+\n+INSERT INTO t_async_insert_params VALUES ({p1:UInt64}); -- { serverError  BAD_QUERY_PARAMETER }\n+INSERT INTO t_async_insert_params VALUES ({p1:String});\n+\n+SELECT * FROM t_async_insert_params ORDER BY id;\n+\n+DROP TABLE t_async_insert_params;\n",
  "problem_statement": "Query parameter substitution does not work with a async insert\n**Describe the unexpected behaviour**\r\n\r\nThe query parameter seems to be not working when passed as a part of the query packet in TCP protocol. \r\n\r\nQuery:\r\n```sql\r\nINSERT INTO test_1356 (Col) VALUES ({p1:String})\r\n```\r\n\r\nError message when the query is executed with `async_insert=1`:\r\n```\r\ncode: 456, message: Substitution `p1` is not set: While executing WaitForAsyncInsert\r\n```\r\n\r\nThe same INSERT works with `async_insert=0`.\r\n\r\nReproducible test case in clickhouse-go: https://github.com/ClickHouse/clickhouse-go/blob/kk/1356-test/tests/issues/1356_test.go#L12\r\n\r\nTest output: https://github.com/ClickHouse/clickhouse-go/actions/runs/10093944357/job/27910738669#step:4:1598\r\n\r\n**How to reproduce**\r\n\r\nRun clickhouse-go test case against the latest version: (`24.6.2.17`). In `clickhouse-go` root directory:\r\n\r\n```\r\n$ go test -run \"^Test1356\" ./tests/...\r\n```\r\n\r\n**Expected behavior**\r\nQuery parameter substitution is done. It works as expected with `SET param_xxx` via CLI.\r\n\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2024-08-22T16:52:49Z"
}