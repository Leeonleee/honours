diff --git a/src/Interpreters/AsynchronousInsertQueue.cpp b/src/Interpreters/AsynchronousInsertQueue.cpp
index 62777524c2a9..5e012d179c84 100644
--- a/src/Interpreters/AsynchronousInsertQueue.cpp
+++ b/src/Interpreters/AsynchronousInsertQueue.cpp
@@ -389,6 +389,10 @@ AsynchronousInsertQueue::pushDataChunk(ASTPtr query, DataChunk chunk, ContextPtr
     if (data_kind == DataKind::Preprocessed)
         insert_query.format = "Native";
 
+    /// Query parameters make sense only for format Values.
+    if (insert_query.format == "Values")
+        entry->query_parameters = query_context->getQueryParameters();
+
     InsertQuery key{query, query_context->getUserID(), query_context->getCurrentRoles(), settings, data_kind};
     InsertDataPtr data_to_process;
     std::future<void> insert_future;
@@ -999,6 +1003,7 @@ Chunk AsynchronousInsertQueue::processEntriesWithParsing(
                 "Expected entry with data kind Parsed. Got: {}", entry->chunk.getDataKind());
 
         auto buffer = std::make_unique<ReadBufferFromString>(*bytes);
+        executor.setQueryParameters(entry->query_parameters);
 
         size_t num_bytes = bytes->size();
         size_t num_rows = executor.execute(*buffer);
diff --git a/src/Interpreters/AsynchronousInsertQueue.h b/src/Interpreters/AsynchronousInsertQueue.h
index da14b43d276e..17607ac18794 100644
--- a/src/Interpreters/AsynchronousInsertQueue.h
+++ b/src/Interpreters/AsynchronousInsertQueue.h
@@ -147,6 +147,7 @@ class AsynchronousInsertQueue : public WithContext
             const String format;
             MemoryTracker * const user_memory_tracker;
             const std::chrono::time_point<std::chrono::system_clock> create_time;
+            NameToNameMap query_parameters;
 
             Entry(
                 DataChunk && chunk_,
diff --git a/src/Processors/Executors/StreamingFormatExecutor.cpp b/src/Processors/Executors/StreamingFormatExecutor.cpp
index 12dd685a7357..10a7b7fd7f5f 100644
--- a/src/Processors/Executors/StreamingFormatExecutor.cpp
+++ b/src/Processors/Executors/StreamingFormatExecutor.cpp
@@ -1,5 +1,6 @@
 #include <Processors/Executors/StreamingFormatExecutor.h>
 #include <Processors/Transforms/AddingDefaultsTransform.h>
+#include <Processors/Formats/Impl/ValuesBlockInputFormat.h>
 
 namespace DB
 {
@@ -32,6 +33,13 @@ MutableColumns StreamingFormatExecutor::getResultColumns()
     return ret_columns;
 }
 
+void StreamingFormatExecutor::setQueryParameters(const NameToNameMap & parameters)
+{
+    /// Query parameters make sense only for format Values.
+    if (auto * values_format = typeid_cast<ValuesBlockInputFormat *>(format.get()))
+        values_format->setQueryParameters(parameters);
+}
+
 size_t StreamingFormatExecutor::execute(ReadBuffer & buffer)
 {
     format->setReadBuffer(buffer);
diff --git a/src/Processors/Executors/StreamingFormatExecutor.h b/src/Processors/Executors/StreamingFormatExecutor.h
index 3aa90ab03602..f159178df8c6 100644
--- a/src/Processors/Executors/StreamingFormatExecutor.h
+++ b/src/Processors/Executors/StreamingFormatExecutor.h
@@ -39,6 +39,9 @@ class StreamingFormatExecutor
     /// Releases currently accumulated columns.
     MutableColumns getResultColumns();
 
+    /// Sets query parameters for input format if applicable.
+    void setQueryParameters(const NameToNameMap & parameters);
+
 private:
     const Block header;
     const InputFormatPtr format;
diff --git a/src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp b/src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp
index 9839f64b947a..10d0e0516653 100644
--- a/src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp
+++ b/src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp
@@ -663,6 +663,16 @@ void ValuesBlockInputFormat::resetReadBuffer()
     IInputFormat::resetReadBuffer();
 }
 
+void ValuesBlockInputFormat::setQueryParameters(const NameToNameMap & parameters)
+{
+    if (parameters == context->getQueryParameters())
+        return;
+
+    auto context_copy = Context::createCopy(context);
+    context_copy->setQueryParameters(parameters);
+    context = std::move(context_copy);
+}
+
 ValuesSchemaReader::ValuesSchemaReader(ReadBuffer & in_, const FormatSettings & format_settings_)
     : IRowSchemaReader(buf, format_settings_), buf(in_)
 {
diff --git a/src/Processors/Formats/Impl/ValuesBlockInputFormat.h b/src/Processors/Formats/Impl/ValuesBlockInputFormat.h
index 0abafc896ffb..228e8d0d5727 100644
--- a/src/Processors/Formats/Impl/ValuesBlockInputFormat.h
+++ b/src/Processors/Formats/Impl/ValuesBlockInputFormat.h
@@ -38,6 +38,7 @@ class ValuesBlockInputFormat final : public IInputFormat
 
     /// TODO: remove context somehow.
     void setContext(const ContextPtr & context_) { context = Context::createCopy(context_); }
+    void setQueryParameters(const NameToNameMap & parameters);
 
     const BlockMissingValues & getMissingValues() const override { return block_missing_values; }
 
