{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 13225,
  "instance_id": "ClickHouse__ClickHouse-13225",
  "issue_numbers": [
    "13157"
  ],
  "base_commit": "5f561f5a97f18cf3d79f0b72636a37e65f7c46f3",
  "patch": "diff --git a/src/AggregateFunctions/AggregateFunctionSumMap.h b/src/AggregateFunctions/AggregateFunctionSumMap.h\nindex ab17da1b490f..1ee3ce222f1c 100644\n--- a/src/AggregateFunctions/AggregateFunctionSumMap.h\n+++ b/src/AggregateFunctions/AggregateFunctionSumMap.h\n@@ -5,6 +5,7 @@\n \n #include <DataTypes/DataTypeArray.h>\n #include <DataTypes/DataTypeTuple.h>\n+#include <DataTypes/DataTypeNullable.h>\n \n #include <Columns/ColumnArray.h>\n #include <Columns/ColumnTuple.h>\n@@ -26,6 +27,7 @@ namespace ErrorCodes\n     extern const int BAD_ARGUMENTS;\n     extern const int ILLEGAL_TYPE_OF_ARGUMENT;\n     extern const int NUMBER_OF_ARGUMENTS_DOESNT_MATCH;\n+    extern const int LOGICAL_ERROR;\n }\n \n template <typename T>\n@@ -89,13 +91,15 @@ class AggregateFunctionMapBase : public IAggregateFunctionDataHelper<\n             }\n             else\n             {\n+                auto value_type_without_nullable = removeNullable(value_type);\n+\n                 // No overflow, meaning we promote the types if necessary.\n-                if (!value_type->canBePromoted())\n-                {\n-                    throw Exception{\"Values for \" + getName() + \" are expected to be Numeric, Float or Decimal.\", ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT};\n-                }\n+                if (!value_type_without_nullable->canBePromoted())\n+                    throw Exception{ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,\n+                        \"Values for {} are expected to be Numeric, Float or Decimal, passed type {}\",\n+                        getName(), value_type->getName()};\n \n-                result_type = value_type->promoteNumericType();\n+                result_type = value_type_without_nullable->promoteNumericType();\n             }\n \n             types.emplace_back(std::make_shared<DataTypeArray>(result_type));\n@@ -148,9 +152,10 @@ class AggregateFunctionMapBase : public IAggregateFunctionDataHelper<\n                 auto key = key_column.operator[](keys_vec_offset + i).get<T>();\n \n                 if (!keepKey(key))\n-                {\n                     continue;\n-                }\n+\n+                if (value.isNull())\n+                    continue;\n \n                 typename std::decay_t<decltype(merged_maps)>::iterator it;\n                 if constexpr (IsDecimalNumber<T>)\n@@ -375,6 +380,92 @@ class AggregateFunctionSumMapFiltered final :\n     bool keepKey(const T & key) const { return keys_to_keep.count(key); }\n };\n \n+\n+/** Implements `Max` operation.\n+ *  Returns true if changed\n+ */\n+class FieldVisitorMax : public StaticVisitor<bool>\n+{\n+private:\n+    const Field & rhs;\n+public:\n+    explicit FieldVisitorMax(const Field & rhs_) : rhs(rhs_) {}\n+\n+    bool operator() (Null &) const { throw Exception(\"Cannot compare Nulls\", ErrorCodes::LOGICAL_ERROR); }\n+    bool operator() (Array &) const { throw Exception(\"Cannot compare Arrays\", ErrorCodes::LOGICAL_ERROR); }\n+    bool operator() (Tuple &) const { throw Exception(\"Cannot compare Tuples\", ErrorCodes::LOGICAL_ERROR); }\n+    bool operator() (AggregateFunctionStateData &) const { throw Exception(\"Cannot compare AggregateFunctionStates\", ErrorCodes::LOGICAL_ERROR); }\n+\n+    template <typename T>\n+    bool operator() (DecimalField<T> & x) const\n+    {\n+        auto val = get<DecimalField<T>>(rhs);\n+        if (val > x)\n+        {\n+            x = val;\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    template <typename T>\n+    bool operator() (T & x) const\n+    {\n+        auto val = get<T>(rhs);\n+        if (val > x)\n+        {\n+            x = val;\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+};\n+\n+/** Implements `Min` operation.\n+ *  Returns true if changed\n+ */\n+class FieldVisitorMin : public StaticVisitor<bool>\n+{\n+private:\n+    const Field & rhs;\n+public:\n+    explicit FieldVisitorMin(const Field & rhs_) : rhs(rhs_) {}\n+\n+    bool operator() (Null &) const { throw Exception(\"Cannot compare Nulls\", ErrorCodes::LOGICAL_ERROR); }\n+    bool operator() (Array &) const { throw Exception(\"Cannot sum Arrays\", ErrorCodes::LOGICAL_ERROR); }\n+    bool operator() (Tuple &) const { throw Exception(\"Cannot sum Tuples\", ErrorCodes::LOGICAL_ERROR); }\n+    bool operator() (AggregateFunctionStateData &) const { throw Exception(\"Cannot sum AggregateFunctionStates\", ErrorCodes::LOGICAL_ERROR); }\n+\n+    template <typename T>\n+    bool operator() (DecimalField<T> & x) const\n+    {\n+        auto val = get<DecimalField<T>>(rhs);\n+        if (val < x)\n+        {\n+            x = val;\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+\n+    template <typename T>\n+    bool operator() (T & x) const\n+    {\n+        auto val = get<T>(rhs);\n+        if (val < x)\n+        {\n+            x = val;\n+            return true;\n+        }\n+\n+        return false;\n+    }\n+};\n+\n+\n template <typename T, bool tuple_argument>\n class AggregateFunctionMinMap final :\n     public AggregateFunctionMapBase<T, AggregateFunctionMinMap<T, tuple_argument>, FieldVisitorMin, true, tuple_argument>\ndiff --git a/src/Common/FieldVisitors.h b/src/Common/FieldVisitors.h\nindex 7fd4b748dbb8..a749432500f8 100644\n--- a/src/Common/FieldVisitors.h\n+++ b/src/Common/FieldVisitors.h\n@@ -213,88 +213,4 @@ class FieldVisitorSum : public StaticVisitor<bool>\n     }\n };\n \n-/** Implements `Max` operation.\n- *  Returns true if changed\n- */\n-class FieldVisitorMax : public StaticVisitor<bool>\n-{\n-private:\n-    const Field & rhs;\n-public:\n-    explicit FieldVisitorMax(const Field & rhs_) : rhs(rhs_) {}\n-\n-    bool operator() (Null &) const { throw Exception(\"Cannot compare Nulls\", ErrorCodes::LOGICAL_ERROR); }\n-    bool operator() (Array &) const { throw Exception(\"Cannot compare Arrays\", ErrorCodes::LOGICAL_ERROR); }\n-    bool operator() (Tuple &) const { throw Exception(\"Cannot compare Tuples\", ErrorCodes::LOGICAL_ERROR); }\n-    bool operator() (AggregateFunctionStateData &) const { throw Exception(\"Cannot compare AggregateFunctionStates\", ErrorCodes::LOGICAL_ERROR); }\n-\n-    template <typename T>\n-    bool operator() (DecimalField<T> & x) const\n-    {\n-        auto val = get<DecimalField<T>>(rhs);\n-        if (val > x)\n-        {\n-            x = val;\n-            return true;\n-        }\n-\n-        return false;\n-    }\n-\n-    template <typename T>\n-    bool operator() (T & x) const\n-    {\n-        auto val = get<T>(rhs);\n-        if (val > x)\n-        {\n-            x = val;\n-            return true;\n-        }\n-\n-        return false;\n-    }\n-};\n-\n-/** Implements `Min` operation.\n- *  Returns true if changed\n- */\n-class FieldVisitorMin : public StaticVisitor<bool>\n-{\n-private:\n-    const Field & rhs;\n-public:\n-    explicit FieldVisitorMin(const Field & rhs_) : rhs(rhs_) {}\n-\n-    bool operator() (Null &) const { throw Exception(\"Cannot compare Nulls\", ErrorCodes::LOGICAL_ERROR); }\n-    bool operator() (Array &) const { throw Exception(\"Cannot sum Arrays\", ErrorCodes::LOGICAL_ERROR); }\n-    bool operator() (Tuple &) const { throw Exception(\"Cannot sum Tuples\", ErrorCodes::LOGICAL_ERROR); }\n-    bool operator() (AggregateFunctionStateData &) const { throw Exception(\"Cannot sum AggregateFunctionStates\", ErrorCodes::LOGICAL_ERROR); }\n-\n-    template <typename T>\n-    bool operator() (DecimalField<T> & x) const\n-    {\n-        auto val = get<DecimalField<T>>(rhs);\n-        if (val < x)\n-        {\n-            x = val;\n-            return true;\n-        }\n-\n-        return false;\n-    }\n-\n-    template <typename T>\n-    bool operator() (T & x) const\n-    {\n-        auto val = get<T>(rhs);\n-        if (val < x)\n-        {\n-            x = val;\n-            return true;\n-        }\n-\n-        return false;\n-    }\n-};\n-\n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01422_map_skip_null.reference b/tests/queries/0_stateless/01422_map_skip_null.reference\nnew file mode 100644\nindex 000000000000..7211e0ac75dc\n--- /dev/null\n+++ b/tests/queries/0_stateless/01422_map_skip_null.reference\n@@ -0,0 +1,7 @@\n+([],[])\n+([],[])\n+([],[])\n+([2],[11])\n+([2],[22])\n+([2],[33])\n+([2],[33])\ndiff --git a/tests/queries/0_stateless/01422_map_skip_null.sql b/tests/queries/0_stateless/01422_map_skip_null.sql\nnew file mode 100644\nindex 000000000000..9af46758289e\n--- /dev/null\n+++ b/tests/queries/0_stateless/01422_map_skip_null.sql\n@@ -0,0 +1,9 @@\n+select minMap(arrayJoin([([1], [null]), ([1], [null])]));\n+select maxMap(arrayJoin([([1], [null]), ([1], [null])]));\n+select sumMap(arrayJoin([([1], [null]), ([1], [null])])); -- { serverError 43 }\n+select sumMapWithOverflow(arrayJoin([([1], [null]), ([1], [null])]));\n+\n+select minMap(arrayJoin([([1, 2], [null, 11]), ([1, 2], [null, 22])]));\n+select maxMap(arrayJoin([([1, 2], [null, 11]), ([1, 2], [null, 22])]));\n+select sumMap(arrayJoin([([1, 2], [null, 11]), ([1, 2], [null, 22])]));\n+select sumMapWithOverflow(arrayJoin([([1, 2], [null, 11]), ([1, 2], [null, 22])]));\n",
  "problem_statement": "minMap: Logical error: Cannot compare Nulls\n```\r\nselect minMap(arrayJoin([([1], [null]), ([1], [null])]));\r\n\r\n\r\n\r\n2020.07.31 02:24:34.961498 [ 1275726 ] {feeec1c1-ba12-427a-965c-8ef6d5da92cb} <Error> : Logical error: 'Cannot compare Nulls'.\r\nclickhouse-server: /home/akuzm/ch4/ch/src/Common/Exception.cpp:45: DB::Exception::Exception(const std::string &, int): Assertion `false' failed.\r\n2020.07.31 02:24:34.962240 [ 1275675 ] {} <Trace> BaseDaemon: Received signal 6\r\n2020.07.31 02:24:34.962642 [ 1276416 ] {} <Fatal> BaseDaemon: ########################################\r\n2020.07.31 02:24:34.963363 [ 1276416 ] {} <Fatal> BaseDaemon: (version 20.7.1.1, build id: 21B0DCC47427FD8E) (from thread 1275726) (query_id: feeec1c1-ba12-427a-965c-8ef6d5da92cb) Received signal Aborted (6)\r\n2020.07.31 02:24:34.963536 [ 1276416 ] {} <Fatal> BaseDaemon: \r\n2020.07.31 02:24:34.963748 [ 1276416 ] {} <Fatal> BaseDaemon: Stack trace: 0x7fd9c837318b 0x7fd9c8352859 0x7fd9c8352729 0x7fd9c8363f36 0x7fd9cc2a03a5 0x7fd9c7a5f0c4 0x7fd9c7a5ed81 0x7fd9c7a5ecd2 0x7fd9c7a5d8cb 0x7fd9c7a5e856 0x7fd9bb108b21 0x7fd9bb109d44 0x7fd9b6f8f450 0x7fd9b6f8d7b1 0x7fd9b78d34ac 0x7fd9b78d3420 0x7fd9b78d33dd 0x7fd9b78d338d 0x7fd9b78d335d 0x7fd9b78d24ae 0x7fd9ccac3635 0x7fd9ccac35d5 0x7fd9b78d0ae5 0x7fd9b78d1309 0x7fd9b78cf830 0x7fd9b78cef16 0x7fd9b78fcb3d 0x7fd9b78fcaa2\r\n2020.07.31 02:24:34.967043 [ 1276416 ] {} <Fatal> BaseDaemon: 4. /build/glibc-YYA7BZ/glibc-2.31/signal/../sysdeps/unix/sysv/linux/raise.c:51: gsignal @ 0x4618b in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n2020.07.31 02:24:34.967639 [ 1276416 ] {} <Fatal> BaseDaemon: 5. /build/glibc-YYA7BZ/glibc-2.31/stdlib/abort.c:81: abort @ 0x25859 in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n2020.07.31 02:24:34.968303 [ 1276416 ] {} <Fatal> BaseDaemon: 6. /build/glibc-YYA7BZ/glibc-2.31/intl/loadmsgcat.c:509: _nl_load_domain.cold @ 0x25729 in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n2020.07.31 02:24:34.968686 [ 1276416 ] {} <Fatal> BaseDaemon: 7. ? @ 0x36f36 in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n2020.07.31 02:24:34.971511 [ 1276416 ] {} <Fatal> BaseDaemon: 8. /home/akuzm/ch4/ch/src/Common/Exception.cpp:48: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x2a23a5 in /home/akuzm/ch4/build-clang10/src/libclickhouse_common_iod.so\r\n2020.07.31 02:24:34.983193 [ 1276416 ] {} <Fatal> BaseDaemon: 9. /home/akuzm/ch4/ch/src/Common/FieldVisitors.h:268: DB::FieldVisitorMin::operator()(DB::Null&) const @ 0x2ef60c4 in /home/akuzm/ch4/build-clang10/src/AggregateFunctions/libclickhouse_aggregate_functionsd.so\r\n2020.07.31 02:24:34.995345 [ 1276416 ] {} <Fatal> BaseDaemon: 10. /home/akuzm/ch4/ch/src/Core/Field.h:521: auto DB::Field::dispatch<DB::FieldVisitorMin, DB::Field&>(DB::FieldVisitorMin&&, DB::Field&) @ 0x2ef5d81 in /home/akuzm/ch4/build-clang10/src/AggregateFunctions/libclickhouse_aggregate_functionsd.so\r\n2020.07.31 02:24:35.006705 [ 1276416 ] {} <Fatal> BaseDaemon: 11. /home/akuzm/ch4/ch/src/Common/FieldVisitors.h:43: auto DB::applyVisitor<DB::FieldVisitorMin, DB::Field&>(DB::FieldVisitorMin&&, DB::Field&) @ 0x2ef5cd2 in /home/akuzm/ch4/build-clang10/src/AggregateFunctions/libclickhouse_aggregate_functionsd.so\r\n2020.07.31 02:24:35.018086 [ 1276416 ] {} <Fatal> BaseDaemon: 12. /home/akuzm/ch4/ch/src/AggregateFunctions/AggregateFunctionSumMap.h:168: DB::AggregateFunctionMapBase<char8_t, DB::AggregateFunctionMinMap<char8_t, true>, DB::FieldVisitorMin, true, true>::add(char*, DB::IColumn const**, unsigned long, DB::Arena*) const @ 0x2ef48cb in /home/akuzm/ch4/build-clang10/src/AggregateFunctions/libclickhouse_aggregate_functionsd.so\r\n2020.07.31 02:24:35.029393 [ 1276416 ] {} <Fatal> BaseDaemon: 13. /home/akuzm/ch4/ch/src/AggregateFunctions/IAggregateFunction.h:209: DB::IAggregateFunctionHelper<DB::AggregateFunctionMinMap<char8_t, true> >::addBatchSinglePlace(unsigned long, char*, DB::IColumn const**, DB::Arena*) const @ 0x2ef5856 in /home/akuzm/ch4/build-clang10/src/AggregateFunctions/libclickhouse_aggregate_functionsd.so\r\n2020.07.31 02:24:35.032067 [ 1276416 ] {} <Fatal> BaseDaemon: 14. /home/akuzm/ch4/ch/src/Interpreters/Aggregator.cpp:576: DB::Aggregator::executeWithoutKeyImpl(char*&, unsigned long, DB::Aggregator::AggregateFunctionInstruction*, DB::Arena*) @ 0xe48b21 in /home/akuzm/ch4/build-clang10/src/libclickhouse_interpretersd.so\r\n2020.07.31 02:24:35.032469 [ 1276416 ] {} <Fatal> BaseDaemon: 15. /home/akuzm/ch4/ch/src/Interpreters/Aggregator.cpp:719: DB::Aggregator::executeOnBlock(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > >, unsigned long, DB::AggregatedDataVariants&, std::__1::vector<DB::IColumn const*, std::__1::allocator<DB::IColumn const*> >&, std::__1::vector<std::__1::vector<DB::IColumn const*, std::__1::allocator<DB::IColumn const*> >, std::__1::allocator<std::__1::vector<DB::IColumn const*, std::__1::allocator<DB::IColumn const*> > > >&, bool&) @ 0xe49d44 in /home/akuzm/ch4/build-clang10/src/libclickhouse_interpretersd.so\r\n2020.07.31 02:24:35.035292 [ 1276416 ] {} <Fatal> BaseDaemon: 16. /home/akuzm/ch4/ch/src/Processors/Transforms/AggregatingTransform.cpp:524: DB::AggregatingTransform::consume(DB::Chunk) @ 0x222450 in /home/akuzm/ch4/build-clang10/src/libclickhouse_processors_transformsd.so\r\n2020.07.31 02:24:35.035766 [ 1276416 ] {} <Fatal> BaseDaemon: 17. /home/akuzm/ch4/ch/src/Processors/Transforms/AggregatingTransform.cpp:494: DB::AggregatingTransform::work() @ 0x2207b1 in /home/akuzm/ch4/build-clang10/src/libclickhouse_processors_transformsd.so\r\n2020.07.31 02:24:35.037682 [ 1276416 ] {} <Fatal> BaseDaemon: 18. /home/akuzm/ch4/ch/src/Processors/Executors/PipelineExecutor.cpp:155: DB::executeJob(DB::IProcessor*) @ 0x13d4ac in /home/akuzm/ch4/build-clang10/src/libclickhouse_processors_executorsd.so\r\n2020.07.31 02:24:35.038176 [ 1276416 ] {} <Fatal> BaseDaemon: 19. /home/akuzm/ch4/ch/src/Processors/Executors/PipelineExecutor.cpp:172: DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1::operator()() const @ 0x13d420 in /home/akuzm/ch4/build-clang10/src/libclickhouse_processors_executorsd.so\r\n2020.07.31 02:24:35.038553 [ 1276416 ] {} <Fatal> BaseDaemon: 20. /home/akuzm/ch4/ch/contrib/libcxx/include/type_traits:3519: decltype(std::__1::forward<DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1&>(fp)()) std::__1::__invoke<DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1&>(DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1&) @ 0x13d3dd in /home/akuzm/ch4/build-clang10/src/libclickhouse_processors_executorsd.so\r\n2020.07.31 02:24:35.038993 [ 1276416 ] {} <Fatal> BaseDaemon: 21. /home/akuzm/ch4/ch/contrib/libcxx/include/__functional_base:349: void std::__1::__invoke_void_return_wrapper<void>::__call<DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1&>(DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1&) @ 0x13d38d in /home/akuzm/ch4/build-clang10/src/libclickhouse_processors_executorsd.so\r\n2020.07.31 02:24:35.039332 [ 1276416 ] {} <Fatal> BaseDaemon: 22. /home/akuzm/ch4/ch/contrib/libcxx/include/functional:1540: std::__1::__function::__alloc_func<DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1, std::__1::allocator<DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1>, void ()>::operator()() @ 0x13d35d in /home/akuzm/ch4/build-clang10/src/libclickhouse_processors_executorsd.so\r\n2020.07.31 02:24:35.039807 [ 1276416 ] {} <Fatal> BaseDaemon: 23. /home/akuzm/ch4/ch/contrib/libcxx/include/functional:1714: std::__1::__function::__func<DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1, std::__1::allocator<DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::$_1>, void ()>::operator()() @ 0x13c4ae in /home/akuzm/ch4/build-clang10/src/libclickhouse_processors_executorsd.so\r\n2020.07.31 02:24:35.041509 [ 1276416 ] {} <Fatal> BaseDaemon: 24. /home/akuzm/ch4/ch/contrib/libcxx/include/functional:1867: std::__1::__function::__value_func<void ()>::operator()() const @ 0x1c8635 in /home/akuzm/ch4/build-clang10/programs/server/libclickhouse-server-libd.so\r\n2020.07.31 02:24:35.043063 [ 1276416 ] {} <Fatal> BaseDaemon: 25. /home/akuzm/ch4/ch/contrib/libcxx/include/functional:2473: std::__1::function<void ()>::operator()() const @ 0x1c85d5 in /home/akuzm/ch4/build-clang10/programs/server/libclickhouse-server-libd.so\r\n2020.07.31 02:24:35.043393 [ 1276416 ] {} <Fatal> BaseDaemon: 26. /home/akuzm/ch4/ch/src/Processors/Executors/PipelineExecutor.cpp:633: DB::PipelineExecutor::executeStepImpl(unsigned long, unsigned long, std::__1::atomic<bool>*) @ 0x13aae5 in /home/akuzm/ch4/build-clang10/src/libclickhouse_processors_executorsd.so\r\n2020.07.31 02:24:35.043644 [ 1276416 ] {} <Fatal> BaseDaemon: 27. /home/akuzm/ch4/ch/src/Processors/Executors/PipelineExecutor.cpp:546: DB::PipelineExecutor::executeSingleThread(unsigned long, unsigned long) @ 0x13b309 in /home/akuzm/ch4/build-clang10/src/libclickhouse_processors_executorsd.so\r\n2020.07.31 02:24:35.043864 [ 1276416 ] {} <Fatal> BaseDaemon: 28. /home/akuzm/ch4/ch/src/Processors/Executors/PipelineExecutor.cpp:812: DB::PipelineExecutor::executeImpl(unsigned long) @ 0x139830 in /home/akuzm/ch4/build-clang10/src/libclickhouse_processors_executorsd.so\r\n2020.07.31 02:24:35.044075 [ 1276416 ] {} <Fatal> BaseDaemon: 29. /home/akuzm/ch4/ch/src/Processors/Executors/PipelineExecutor.cpp:479: DB::PipelineExecutor::execute(unsigned long) @ 0x138f16 in /home/akuzm/ch4/build-clang10/src/libclickhouse_processors_executorsd.so\r\n2020.07.31 02:24:35.045009 [ 1276416 ] {} <Fatal> BaseDaemon: 30. /home/akuzm/ch4/ch/src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:79: DB::threadFunction(DB::PullingAsyncPipelineExecutor::Data&, std::__1::shared_ptr<DB::ThreadGroupStatus>, unsigned long) @ 0x166b3d in /home/akuzm/ch4/build-clang10/src/libclickhouse_processors_executorsd.so\r\n2020.07.31 02:24:35.045271 [ 1276416 ] {} <Fatal> BaseDaemon: 31. /home/akuzm/ch4/ch/src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:101: DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0::operator()() const @ 0x166aa2 in /home/akuzm/ch4/build-clang10/src/libclickhouse_processors_executorsd.so\r\n```\n",
  "hints_text": "```\r\nSELECT sumMap(arrayJoin([([1], [NULL]), ([1], [NULL])]))\r\n\r\n\r\nReceived exception from server (version 20.7.1):\r\nCode: 43. DB::Exception: Received from localhost:9000. DB::Exception: Values for sumMap are expected to be Numeric, Float or Decimal.. Stack trace:\r\n```\nThe difference is in argument type promotion -- `sumMapWithOverflow` doesn't try to promote the types and also fails with logical error, like `minMap`.",
  "created_at": "2020-08-02T01:31:44Z"
}