{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 35539,
  "instance_id": "ClickHouse__ClickHouse-35539",
  "issue_numbers": [
    "34022"
  ],
  "base_commit": "826b933b08e159619e4f1ffb2df1d5517b9c965b",
  "patch": "diff --git a/src/Common/formatIPv6.h b/src/Common/formatIPv6.h\nindex 1a65adae55be..d6efeed17e61 100644\n--- a/src/Common/formatIPv6.h\n+++ b/src/Common/formatIPv6.h\n@@ -11,7 +11,7 @@\n constexpr size_t IPV4_BINARY_LENGTH = 4;\n constexpr size_t IPV6_BINARY_LENGTH = 16;\n constexpr size_t IPV4_MAX_TEXT_LENGTH = 15;     /// Does not count tail zero byte.\n-constexpr size_t IPV6_MAX_TEXT_LENGTH = 39;\n+constexpr size_t IPV6_MAX_TEXT_LENGTH = 45;     /// Does not count tail zero byte.\n \n namespace DB\n {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02118_deserialize_whole_text.sh b/tests/queries/0_stateless/02118_deserialize_whole_text.sh\nindex fe9256df329f..e9f35582f155 100755\n--- a/tests/queries/0_stateless/02118_deserialize_whole_text.sh\n+++ b/tests/queries/0_stateless/02118_deserialize_whole_text.sh\n@@ -41,16 +41,16 @@ $CLICKHOUSE_CLIENT -q \"SELECT * FROM file('data_02118', 'CSV', 'x IPv4')\" 2>&1 |\n echo \"[\\\"255.255.255.255trash\\\"]\" > $DATA_FILE\n $CLICKHOUSE_CLIENT -q \"SELECT * FROM file('data_02118', 'JSONCompactEachRow', 'x IPv4')\" 2>&1 | grep -F -q \"UNEXPECTED_DATA_AFTER_PARSED_VALUE\" && echo 'OK' || echo 'FAIL'\n \n-echo \"[\\\"2a02:6ba8:2da1:40cd:31db:f9f1:fc3d:80b1trash\\\"]\" > $DATA_FILE\n+echo \"[\\\"0000:0000:0000:0000:0000:ffff:192.168.100.228b1trash\\\"]\" > $DATA_FILE\n $CLICKHOUSE_CLIENT -q \"SELECT * FROM file('data_02118', 'JSONCompactStringsEachRow', 'x IPv6')\" 2>&1 | grep -F -q \"UNEXPECTED_DATA_AFTER_PARSED_VALUE\" && echo 'OK' || echo 'FAIL'\n \n-echo \"2a02:6ba8:2da1:40cd:31db:f9f1:fc3d:80b1trash\" > $DATA_FILE\n+echo \"0000:0000:0000:0000:0000:ffff:192.168.100.228b1trash\" > $DATA_FILE\n $CLICKHOUSE_CLIENT -q \"SELECT * FROM file('data_02118', 'TSV', 'x IPv6')\" 2>&1 | grep -F -q \"UNEXPECTED_DATA_AFTER_PARSED_VALUE\" && echo 'OK' || echo 'FAIL'\n \n-echo \"2a02:6ba8:2da1:40cd:31db:f9f1:fc3d:80b1trash\" > $DATA_FILE\n+echo \"0000:0000:0000:0000:0000:ffff:192.168.100.228b1trash\" > $DATA_FILE\n $CLICKHOUSE_CLIENT -q \"SELECT * FROM file('data_02118', 'CSV', 'x IPv6')\" 2>&1 | grep -F -q \"UNEXPECTED_DATA_AFTER_PARSED_VALUE\" && echo 'OK' || echo 'FAIL'\n \n-echo \"[\\\"2a02:6ba8:2da1:40cd:31db:f9f1:fc3d:80b1trash\\\"]\" > $DATA_FILE\n+echo \"[\\\"0000:0000:0000:0000:0000:ffff:192.168.100.228b1trash\\\"]\" > $DATA_FILE\n $CLICKHOUSE_CLIENT -q \"SELECT * FROM file('data_02118', 'JSONCompactEachRow', 'x IPv6')\" 2>&1 | grep -F -q \"UNEXPECTED_DATA_AFTER_PARSED_VALUE\" && echo 'OK' || echo 'FAIL'\n \n echo \"[\\\"{1:2, 2:3}trash\\\"]\" > $DATA_FILE\ndiff --git a/tests/queries/0_stateless/02243_ipv6_long_parsing.reference b/tests/queries/0_stateless/02243_ipv6_long_parsing.reference\nnew file mode 100644\nindex 000000000000..c09bfebe9d58\n--- /dev/null\n+++ b/tests/queries/0_stateless/02243_ipv6_long_parsing.reference\n@@ -0,0 +1,3 @@\n+0\t::ffff:1.12.12.12\n+1\t::ffff:123.123.123.123\n+2\t::ffff:192.168.100.228\ndiff --git a/tests/queries/0_stateless/02243_ipv6_long_parsing.sql b/tests/queries/0_stateless/02243_ipv6_long_parsing.sql\nnew file mode 100644\nindex 000000000000..25225ee0fa85\n--- /dev/null\n+++ b/tests/queries/0_stateless/02243_ipv6_long_parsing.sql\n@@ -0,0 +1,10 @@\n+DROP TABLE IF EXISTS test_table;\n+CREATE TABLE test_table (id UInt64, value IPv6) ENGINE=MergeTree ORDER BY id;\n+\n+INSERT INTO test_table VALUES (0, '0000:0000:0000:0000:0000:ffff:1.12.12.12');\n+INSERT INTO test_table VALUES (1, '0000:0000:0000:0000:0000:ffff:123.123.123.123');\n+INSERT INTO test_table VALUES (2, '0000:0000:0000:0000:0000:ffff:192.168.100.228');\n+\n+SELECT * FROM test_table ORDER BY id;\n+\n+DROP TABLE test_table;\n",
  "problem_statement": "Max length of IPv6 text representation\nhttps://github.com/ClickHouse/ClickHouse/blob/289a51b61d636e9b2ac98dc912d4d1894cc31e2e/src/Common/formatIPv6.h#L14\r\n\r\nAccording to this [link](https://stackoverflow.com/questions/166132/maximum-length-of-the-textual-representation-of-an-ipv6-address), the Maxiumn length of IPv6 textual representation should be 45.\n",
  "hints_text": "The 45 character size only applies to an \"expanded\" IPv4 representation such as `0000:0000:0000:0000:0000:ffff:123.123.123.123`.  ClickHouse will always use the shorthand representation of `::ffff:123.123.123.123` for display.   Since toIPv6 correctly parses the expanded version:\r\n\r\n```\r\nSELECT toIPv6('0000:0000:0000:0000:0000:ffff:123.123.123.123')\r\n\r\n\u250c\u2500toIPv6('0000:0000:0000:0000:0000:ffff:123.123.123.123')\u2500\u2510\r\n\u2502 ::ffff:123.123.123.123                                  \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\nit does not seem using 39 should cause an issue.  Is this creating some exception or unexpected behavior?\r\n\nno, I just came cross this code and felt a little strange, since INET6_ADDRSTRLEN is defined as 46 in Linux.\nI would assume the Linux value is intended to avoid any possible overflow in edge cases where the unnecessary expanded format is used.  We are not aware of any such usage in ClickHouse currently.\n@genzgd Maybe can add a comment in code to avoid confusion?\nok, I did a bit testing and found this:\r\n\r\n```sql\r\nCREATE TABLE test(ip IPv6) ENGINE MergeTree() ORDER BY tuple()\r\n```\r\n\r\nthen\r\n\r\n```sql\r\nINSERT INTO test(ip) VALUES ('0000:0000:0000:0000:0000:ffff:123.123.123.123')\r\n```\r\n\r\nThrows:\r\n\r\n```\r\nINSERT INTO test VALUES\r\n\r\n\r\nException on client:\r\nCode: 441. DB::Exception: Invalid IPv6 value.\r\n\r\nConnecting to database test at localhost:9000 as user clickhouse.\r\nConnected to ClickHouse server version 20.9.2 revision 54439.\r\n```\nanother example:\r\n\r\n```sql\r\nINSERT INTO test VALUES ('0000:0000:0000:0000:0000:ffff:1.12.12.12')\r\n```\r\n\r\nwill success, but \r\n\r\n```sql\r\nselect * from test\r\n\r\n\u250c\u2500ip\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 ::ffff:1.12.12.1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\nDoes that occur on a recent ClickHouse version?  20.9 is quite old.\r\n\r\nNever mind, answered my own question, it still behaves that way.",
  "created_at": "2022-03-23T15:13:14Z"
}