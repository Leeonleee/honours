{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 55062,
  "instance_id": "ClickHouse__ClickHouse-55062",
  "issue_numbers": [
    "54896"
  ],
  "base_commit": "e9c3032f838dcd20eda22adf04a425f88b862eaf",
  "patch": "diff --git a/docs/en/sql-reference/statements/alter/partition.md b/docs/en/sql-reference/statements/alter/partition.md\nindex a0aa74e6d252..114b8d5ffe32 100644\n--- a/docs/en/sql-reference/statements/alter/partition.md\n+++ b/docs/en/sql-reference/statements/alter/partition.md\n@@ -113,6 +113,7 @@ For the query to run successfully, the following conditions must be met:\n \n - Both tables must have the same structure.\n - Both tables must have the same partition key, the same order by key and the same primary key.\n+- Both tables must have the same indices and projections.\n - Both tables must have the same storage policy.\n \n ## REPLACE PARTITION\n@@ -132,6 +133,7 @@ For the query to run successfully, the following conditions must be met:\n \n - Both tables must have the same structure.\n - Both tables must have the same partition key, the same order by key and the same primary key.\n+- Both tables must have the same indices and projections.\n - Both tables must have the same storage policy.\n \n ## MOVE PARTITION TO TABLE\n@@ -146,6 +148,7 @@ For the query to run successfully, the following conditions must be met:\n \n - Both tables must have the same structure.\n - Both tables must have the same partition key, the same order by key and the same primary key.\n+- Both tables must have the same indices and projections.\n - Both tables must have the same storage policy.\n - Both tables must be the same engine family (replicated or non-replicated).\n \ndiff --git a/src/Storages/MergeTree/MergeTreeData.cpp b/src/Storages/MergeTree/MergeTreeData.cpp\nindex 5187744868e7..bf81518e2734 100644\n--- a/src/Storages/MergeTree/MergeTreeData.cpp\n+++ b/src/Storages/MergeTree/MergeTreeData.cpp\n@@ -7474,6 +7474,28 @@ MergeTreeData & MergeTreeData::checkStructureAndGetMergeTreeData(IStorage & sour\n     if (query_to_string(my_snapshot->getPrimaryKeyAST()) != query_to_string(src_snapshot->getPrimaryKeyAST()))\n         throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Tables have different primary key\");\n \n+    const auto check_definitions = [](const auto & my_descriptions, const auto & src_descriptions)\n+    {\n+        if (my_descriptions.size() != src_descriptions.size())\n+            return false;\n+\n+        std::unordered_set<std::string> my_query_strings;\n+        for (const auto & description : my_descriptions)\n+            my_query_strings.insert(queryToString(description.definition_ast));\n+\n+        for (const auto & src_description : src_descriptions)\n+            if (!my_query_strings.contains(queryToString(src_description.definition_ast)))\n+                return false;\n+\n+        return true;\n+    };\n+\n+    if (!check_definitions(my_snapshot->getSecondaryIndices(), src_snapshot->getSecondaryIndices()))\n+        throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Tables have different secondary indices\");\n+\n+    if (!check_definitions(my_snapshot->getProjections(), src_snapshot->getProjections()))\n+        throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Tables have different projections\");\n+\n     return *src_data;\n }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02888_attach_partition_from_different_tables.reference b/tests/queries/0_stateless/02888_attach_partition_from_different_tables.reference\nnew file mode 100644\nindex 000000000000..3cc269ec01c7\n--- /dev/null\n+++ b/tests/queries/0_stateless/02888_attach_partition_from_different_tables.reference\n@@ -0,0 +1,11 @@\n+1\t1\n+0\t0\n+1\t1\n+2\t2\n+3\t3\n+4\t4\n+5\t5\n+6\t6\n+7\t7\n+8\t8\n+9\t9\ndiff --git a/tests/queries/0_stateless/02888_attach_partition_from_different_tables.sql b/tests/queries/0_stateless/02888_attach_partition_from_different_tables.sql\nnew file mode 100644\nindex 000000000000..98f841394e1d\n--- /dev/null\n+++ b/tests/queries/0_stateless/02888_attach_partition_from_different_tables.sql\n@@ -0,0 +1,90 @@\n+-- test different index type\n+CREATE TABLE attach_partition_t1 (\n+\ta UInt32,\n+\tb String,\n+\tINDEX bf b TYPE tokenbf_v1(8192, 3, 0) GRANULARITY 1\n+)\n+ENGINE = MergeTree\n+ORDER BY a;\n+\n+INSERT INTO attach_partition_t1 SELECT number, toString(number) FROM numbers(10);\n+\n+CREATE TABLE attach_partition_t2 (\n+\ta UInt32,\n+\tb String,\n+\tINDEX bf b TYPE bloom_filter GRANULARITY 1\n+)\n+ENGINE = MergeTree\n+ORDER BY a;\n+\n+ALTER TABLE attach_partition_t2 ATTACH PARTITION tuple() FROM attach_partition_t1; -- { serverError 36 }\n+\n+-- test different projection name\n+CREATE TABLE attach_partition_t3 (\n+\ta UInt32,\n+\tb String,\n+  PROJECTION proj\n+   (\n+       SELECT\n+           b,\n+           sum(a)\n+       GROUP BY b\n+   )\n+)\n+ENGINE = MergeTree\n+ORDER BY a;\n+\n+INSERT INTO attach_partition_t3 SELECT number, toString(number) FROM numbers(10);\n+\n+CREATE TABLE attach_partition_t4 (\n+\ta UInt32,\n+\tb String,\n+  PROJECTION differently_named_proj\n+   (\n+       SELECT\n+           b,\n+           sum(a)\n+       GROUP BY b\n+   )\n+)\n+ENGINE = MergeTree\n+ORDER BY a;\n+\n+ALTER TABLE attach_partition_t4 ATTACH PARTITION tuple() FROM attach_partition_t3; -- { serverError 36 }\n+\n+-- check attach with same index and projection\n+CREATE TABLE attach_partition_t5 (\n+\ta UInt32,\n+\tb String,\n+  PROJECTION proj\n+   (\n+       SELECT\n+           b,\n+           sum(a)\n+       GROUP BY b\n+   )\n+)\n+ENGINE = MergeTree\n+ORDER BY a;\n+\n+INSERT INTO attach_partition_t5 SELECT number, toString(number) FROM numbers(10);\n+\n+\n+CREATE TABLE attach_partition_t6 (\n+\ta UInt32,\n+\tb String,\n+  PROJECTION proj\n+   (\n+       SELECT\n+           b,\n+           sum(a)\n+       GROUP BY b\n+   )\n+)\n+ENGINE = MergeTree\n+ORDER BY a;\n+\n+ALTER TABLE attach_partition_t6 ATTACH PARTITION tuple() FROM attach_partition_t5;\n+\n+SELECT * FROM attach_partition_t6 WHERE b = '1';\n+SELECT b, sum(a) FROM attach_partition_t6 GROUP BY b ORDER BY b;\n",
  "problem_statement": "ATTACH PARTITION from source table with different index as destination table throws `Integer divide by zero` error\n**Describe the unexpected behaviour**\r\nATTACH PARTITION from source table with different index as destination table throws `Integer divide by zero` error. \r\n\r\n**How to reproduce**\r\nClickHouse Cloud v23.8.1.41541\r\nClickHouse 23.8.2.7\r\n\r\n```\r\ncreate or replace table t1 (\r\n\ta UInt32,\r\n\tb String,\r\n\tINDEX bf b TYPE tokenbf_v1(8192, 3, 0) GRANULARITY 1\r\n)\r\nengine = MergeTree\r\norder by a;\r\n\r\ninsert into t1 select number, toString(number) from numbers(10);\r\n\r\ncreate or replace  table t2 (\r\n\ta UInt32,\r\n\tb String,\r\n\tINDEX bf b TYPE bloom_filter GRANULARITY 1\r\n)\r\nengine = MergeTree\r\norder by a;\r\n\r\nalter table t2 attach partition tuple() from t1;\r\n\r\nselect * from t2 where b = '1';\r\n```\r\n\r\n**Expected behavior**\r\nATTACH PARTITION from source table with index that is not compatible with the index at destination table should not be allowed. \r\n\r\n**Error message and/or stacktrace**\r\n```\r\n[c-bordeaux-gr-33-server-1] 2023.09.21 14:57:16.807241 [ 536 ] <Fatal> BaseDaemon: ########################################\r\n[c-bordeaux-gr-33-server-1] 2023.09.21 14:57:16.807287 [ 536 ] <Fatal> BaseDaemon: (version 23.8.1.41541 (official build), build id: 0C6F9D74CE985B0E68623C6AE4BBA9E4FBEA2B93, git hash: 2bb8937b298aecf48bb3fe441e69435c645d7166) (from thread 521) (query_id: 827b6395-1d52-4a5d-b9f7-172025e760d2) (query: select * from t2 where b = '1';) Received signal Arithmetic exception (8)\r\n[c-bordeaux-gr-33-server-1] 2023.09.21 14:57:16.807312 [ 536 ] <Fatal> BaseDaemon: Integer divide by zero.\r\n[c-bordeaux-gr-33-server-1] 2023.09.21 14:57:16.807339 [ 536 ] <Fatal> BaseDaemon: Stack trace: 0x00000000152774b1 0x000000001527cbaf 0x0000000015238333 0x0000000015234348 0x000000001523153b 0x0000000015ab9473 0x0000000015ab4607 0x0000000015ab42b0 0x0000000015abc8fa 0x0000000015abeaa7 0x0000000015a7d2a5 0x0000000015a94d6a 0x000000001438adf9 0x00000000146c3b2e 0x00000000146bf42e 0x0000000015681244 0x0000000015697ff9 0x000000000ebaeffc 0x00000000186a1654 0x00000000186a2871 0x000000001882ba67 0x000000001882949c 0x00007f53b4b8eb43 0x00007f53b4c20a00\r\n[c-bordeaux-gr-33-server-1] 2023.09.21 14:57:16.807398 [ 536 ] <Fatal> BaseDaemon: 2. DB::MergeTreeIndexConditionBloomFilter::mayBeTrueOnGranule(DB::MergeTreeIndexGranuleBloomFilter const*) const @ 0x00000000152774b1 in /usr/bin/clickhouse\r\n[c-bordeaux-gr-33-server-1] 2023.09.21 14:57:16.807431 [ 536 ] <Fatal> BaseDaemon: 3. ? @ 0x000000001527cbaf in /usr/bin/clickhouse\r\n[c-bordeaux-gr-33-server-1] 2023.09.21 14:57:16.807460 [ 536 ] <Fatal> BaseDaemon: 4. DB::MergeTreeDataSelectExecutor::filterMarksUsingIndex(std::shared_ptr<DB::IMergeTreeIndex const>, std::shared_ptr<DB::IMergeTreeIndexCondition>, std::shared_ptr<DB::IMergeTreeDataPart const>, DB::MarkRanges const&, DB::Settings const&, DB::MergeTreeReaderSettings const&, unsigned long&, DB::MarkCache*, DB::UncompressedCache*, Poco::Logger*) @ 0x0000000015238333 in /usr/bin/clickhouse\r\n[c-bordeaux-gr-33-server-1] 2023.09.21 14:57:16.807493 [ 536 ] <Fatal> BaseDaemon: 5. ? @ 0x0000000015234348 in /usr/bin/clickhouse\r\n[c-bordeaux-gr-33-server-1] 2023.09.21 14:57:16.807528 [ 536 ] <Fatal> BaseDaemon: 6. DB::MergeTreeDataSelectExecutor::filterPartsByPrimaryKeyAndSkipIndexes(std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>&&, std::vector<std::shared_ptr<DB::AlterConversions const>, std::allocator<std::shared_ptr<DB::AlterConversions const>>>&&, std::shared_ptr<DB::StorageInMemoryMetadata const>, std::shared_ptr<DB::Context const> const&, DB::KeyCondition const&, DB::UsefulSkipIndexes const&, DB::MergeTreeReaderSettings const&, Poco::Logger*, unsigned long, std::vector<DB::ReadFromMergeTree::IndexStat, std::allocator<DB::ReadFromMergeTree::IndexStat>>&, bool) @ 0x000000001523153b in /usr/bin/clickhouse\r\n[c-bordeaux-gr-33-server-1] 2023.09.21 14:57:16.807578 [ 536 ] <Fatal> BaseDaemon: 7. DB::ReadFromMergeTree::selectRangesToReadImpl(std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>, std::vector<std::shared_ptr<DB::AlterConversions const>, std::allocator<std::shared_ptr<DB::AlterConversions const>>>, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::SelectQueryInfo const&, std::shared_ptr<DB::Context const>, unsigned long, std::shared_ptr<std::unordered_map<String, long, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, long>>>>, DB::MergeTreeData const&, std::vector<String, std::allocator<String>> const&, bool, Poco::Logger*, std::optional<DB::ReadFromMergeTree::Indexes>&) @ 0x0000000015ab9473 in /usr/bin/clickhouse\r\n[c-bordeaux-gr-33-server-1] 2023.09.21 14:57:16.807625 [ 536 ] <Fatal> BaseDaemon: 8. DB::ReadFromMergeTree::selectRangesToRead(std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>, std::vector<std::shared_ptr<DB::AlterConversions const>, std::allocator<std::shared_ptr<DB::AlterConversions const>>>, std::shared_ptr<DB::PrewhereInfo> const&, DB::ActionDAGNodes const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::SelectQueryInfo const&, std::shared_ptr<DB::Context const>, unsigned long, std::shared_ptr<std::unordered_map<String, long, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, long>>>>, DB::MergeTreeData const&, std::vector<String, std::allocator<String>> const&, bool, Poco::Logger*, std::optional<DB::ReadFromMergeTree::Indexes>&) @ 0x0000000015ab4607 in /usr/bin/clickhouse\r\n[c-bordeaux-gr-33-server-1] 2023.09.21 14:57:16.807651 [ 536 ] <Fatal> BaseDaemon: 9. DB::ReadFromMergeTree::selectRangesToRead(std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>, std::vector<std::shared_ptr<DB::AlterConversions const>, std::allocator<std::shared_ptr<DB::AlterConversions const>>>) const @ 0x0000000015ab42b0 in /usr/bin/clickhouse\r\n[c-bordeaux-gr-33-server-1] 2023.09.21 14:57:16.807693 [ 536 ] <Fatal> BaseDaemon: 10. DB::ReadFromMergeTree::getAnalysisResult() const @ 0x0000000015abc8fa in /usr/bin/clickhouse\r\n[c-bordeaux-gr-33-server-1] 2023.09.21 14:57:16.807720 [ 536 ] <Fatal> BaseDaemon: 11. DB::ReadFromMergeTree::initializePipeline(DB::QueryPipelineBuilder&, DB::BuildQueryPipelineSettings const&) @ 0x0000000015abeaa7 in /usr/bin/clickhouse\r\n[c-bordeaux-gr-33-server-1] 2023.09.21 14:57:16.807749 [ 536 ] <Fatal> BaseDaemon: 12. DB::ISourceStep::updatePipeline(std::vector<std::unique_ptr<DB::QueryPipelineBuilder, std::default_delete<DB::QueryPipelineBuilder>>, std::allocator<std::unique_ptr<DB::QueryPipelineBuilder, std::default_delete<DB::QueryPipelineBuilder>>>>, DB::BuildQueryPipelineSettings const&) @ 0x0000000015a7d2a5 in /usr/bin/clickhouse\r\n[c-bordeaux-gr-33-server-1] 2023.09.21 14:57:16.807784 [ 536 ] <Fatal> BaseDaemon: 13. DB::QueryPlan::buildQueryPipeline(DB::QueryPlanOptimizationSettings const&, DB::BuildQueryPipelineSettings const&) @ 0x0000000015a94d6a in /usr/bin/clickhouse\r\n[c-bordeaux-gr-33-server-1] 2023.09.21 14:57:16.807815 [ 536 ] <Fatal> BaseDaemon: 14. DB::InterpreterSelectWithUnionQuery::execute() @ 0x000000001438adf9 in /usr/bin/clickhouse\r\n[c-bordeaux-gr-33-server-1] 2023.09.21 14:57:16.807842 [ 536 ] <Fatal> BaseDaemon: 15. ? @ 0x00000000146c3b2e in /usr/bin/clickhouse\r\n[c-bordeaux-gr-33-server-1] 2023.09.21 14:57:16.807878 [ 536 ] <Fatal> BaseDaemon: 16. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x00000000146bf42e in /usr/bin/clickhouse\r\n[c-bordeaux-gr-33-server-1] 2023.09.21 14:57:16.807914 [ 536 ] <Fatal> BaseDaemon: 17. DB::TCPHandler::runImpl() @ 0x0000000015681244 in /usr/bin/clickhouse\r\n[c-bordeaux-gr-33-server-1] 2023.09.21 14:57:16.807940 [ 536 ] <Fatal> BaseDaemon: 18. DB::TCPHandler::run() @ 0x0000000015697ff9 in /usr/bin/clickhouse\r\n[c-bordeaux-gr-33-server-1] 2023.09.21 14:57:16.807961 [ 536 ] <Fatal> BaseDaemon: 19. ? @ 0x000000000ebaeffc in /usr/bin/clickhouse\r\n[c-bordeaux-gr-33-server-1] 2023.09.21 14:57:16.807993 [ 536 ] <Fatal> BaseDaemon: 20. Poco::Net::TCPServerConnection::start() @ 0x00000000186a1654 in /usr/bin/clickhouse\r\n[c-bordeaux-gr-33-server-1] 2023.09.21 14:57:16.808021 [ 536 ] <Fatal> BaseDaemon: 21. ? @ 0x00000000186a2871 in /usr/bin/clickhouse\r\n[c-bordeaux-gr-33-server-1] 2023.09.21 14:57:16.808062 [ 536 ] <Fatal> BaseDaemon: 22. Poco::PooledThread::run() @ 0x000000001882ba67 in /usr/bin/clickhouse\r\n[c-bordeaux-gr-33-server-1] 2023.09.21 14:57:16.808112 [ 536 ] <Fatal> BaseDaemon: 23. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001882949c in /usr/bin/clickhouse\r\n[c-bordeaux-gr-33-server-1] 2023.09.21 14:57:16.808145 [ 536 ] <Fatal> BaseDaemon: 24. ? @ 0x00007f53b4b8eb43 in ?\r\n[c-bordeaux-gr-33-server-1] 2023.09.21 14:57:16.808187 [ 536 ] <Fatal> BaseDaemon: 25. ? @ 0x00007f53b4c20a00 in ?\r\n[c-bordeaux-gr-33-server-1] 2023.09.21 14:57:16.982572 [ 536 ] <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: B60DAA55063C7F37A4029B4ECA186BCD)\r\n[c-bordeaux-gr-33-server-1] 2023.09.21 14:57:17.175501 [ 536 ] <Fatal> BaseDaemon: Report this error to https://github.com/ClickHouse/ClickHouse/issues\r\n[c-bordeaux-gr-33-server-1] 2023.09.21 14:57:17.175698 [ 536 ] <Fatal> BaseDaemon: Changed settings: max_insert_threads = 1, max_threads = 4, use_hedged_requests = false, alter_sync = 0, enable_memory_bound_merging_of_aggregation_results = true, use_mysql_types_in_show_columns = true, log_queries = true, log_queries_probability = 1., max_http_get_redirects = 10, insert_distributed_sync = true, final = true, enable_deflate_qpl_codec = false, max_bytes_before_external_group_by = 4294967296, max_bytes_before_external_sort = 4294967296, max_memory_usage = 8589934592, cancel_http_readonly_queries_on_client_close = true, max_table_size_to_drop = 1000000000000, max_partition_size_to_drop = 1000000000000, default_table_engine = 'ReplicatedMergeTree', mutations_sync = 0, optimize_trivial_insert_select = false, allow_experimental_database_replicated = true, database_replicated_allow_only_replicated_engine = true, cloud_mode = true, distributed_ddl_output_mode = 'none', async_insert_busy_timeout_ms = 1000, enable_filesystem_cache_on_write_operations = true, load_marks_asynchronously = true, allow_prefetched_read_pool_for_remote_filesystem = true, filesystem_prefetch_max_memory_usage = 858993459, filesystem_prefetches_limit = 200, insert_keeper_max_retries = 20, date_time_input_format = 'best_effort'\r\n\r\nError on processing query: Code: 32. DB::Exception: Attempt to read after eof: while receiving packet from oa82c44121.us-west-2.aws.clickhouse.cloud:9440. (ATTEMPT_TO_READ_AFTER_EOF) (version 23.3.2.37 (official build))\r\n\r\nConnecting to oa82c44121.us-west-2.aws.clickhouse.cloud:9440 as user default.\r\nCode: 210. DB::NetException: SSL connection unexpectedly closed, while reading from socket (35.85.205.122:9440). (NETWORK_ERROR)\r\n```\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2023-09-27T13:55:52Z",
  "modified_files": [
    "docs/en/sql-reference/statements/alter/partition.md",
    "src/Storages/MergeTree/MergeTreeData.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02888_attach_partition_from_different_tables.reference",
    "b/tests/queries/0_stateless/02888_attach_partition_from_different_tables.sql"
  ]
}