diff --git a/src/Functions/DateTimeTransforms.h b/src/Functions/DateTimeTransforms.h
index 0a3b8fd5d637..0f42af46ac0b 100644
--- a/src/Functions/DateTimeTransforms.h
+++ b/src/Functions/DateTimeTransforms.h
@@ -64,6 +64,7 @@ constexpr time_t MAX_DATETIME_DAY_NUM =  49710;               // 2106-02-07
 /// This factor transformation will say that the function is monotone everywhere.
 struct ZeroTransform
 {
+    static constexpr auto name = "Zero";
     static UInt16 execute(Int64, const DateLUTImpl &) { return 0; }
     static UInt16 execute(UInt32, const DateLUTImpl &) { return 0; }
     static UInt16 execute(Int32, const DateLUTImpl &) { return 0; }
diff --git a/src/Functions/IFunctionCustomWeek.h b/src/Functions/IFunctionCustomWeek.h
index 497ccea428f2..c6f1aebea881 100644
--- a/src/Functions/IFunctionCustomWeek.h
+++ b/src/Functions/IFunctionCustomWeek.h
@@ -56,6 +56,21 @@ class IFunctionCustomWeek : public IFunction
                 : is_not_monotonic;
         }
 
+        if (checkAndGetDataType<DataTypeDateTime64>(&type))
+        {
+
+            const auto & left_date_time = left.safeGet<DateTime64>();
+            TransformDateTime64<typename Transform::FactorTransform> transformer_left(left_date_time.getScale());
+
+            const auto & right_date_time = right.safeGet<DateTime64>();
+            TransformDateTime64<typename Transform::FactorTransform> transformer_right(right_date_time.getScale());
+
+            return transformer_left.execute(left_date_time.getValue(), date_lut)
+                    == transformer_right.execute(right_date_time.getValue(), date_lut)
+                ? is_monotonic
+                : is_not_monotonic;
+        }
+
         return Transform::FactorTransform::execute(UInt32(left.safeGet<UInt64>()), date_lut)
                 == Transform::FactorTransform::execute(UInt32(right.safeGet<UInt64>()), date_lut)
             ? is_monotonic
