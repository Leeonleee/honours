{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 71849,
  "instance_id": "ClickHouse__ClickHouse-71849",
  "issue_numbers": [
    "71810"
  ],
  "base_commit": "8d4cc787fe4e8276163864da1be9a1434fa6532f",
  "patch": "diff --git a/src/Functions/DateTimeTransforms.h b/src/Functions/DateTimeTransforms.h\nindex 0a3b8fd5d637..0f42af46ac0b 100644\n--- a/src/Functions/DateTimeTransforms.h\n+++ b/src/Functions/DateTimeTransforms.h\n@@ -64,6 +64,7 @@ constexpr time_t MAX_DATETIME_DAY_NUM =  49710;               // 2106-02-07\n /// This factor transformation will say that the function is monotone everywhere.\n struct ZeroTransform\n {\n+    static constexpr auto name = \"Zero\";\n     static UInt16 execute(Int64, const DateLUTImpl &) { return 0; }\n     static UInt16 execute(UInt32, const DateLUTImpl &) { return 0; }\n     static UInt16 execute(Int32, const DateLUTImpl &) { return 0; }\ndiff --git a/src/Functions/IFunctionCustomWeek.h b/src/Functions/IFunctionCustomWeek.h\nindex 497ccea428f2..c6f1aebea881 100644\n--- a/src/Functions/IFunctionCustomWeek.h\n+++ b/src/Functions/IFunctionCustomWeek.h\n@@ -56,6 +56,21 @@ class IFunctionCustomWeek : public IFunction\n                 : is_not_monotonic;\n         }\n \n+        if (checkAndGetDataType<DataTypeDateTime64>(&type))\n+        {\n+\n+            const auto & left_date_time = left.safeGet<DateTime64>();\n+            TransformDateTime64<typename Transform::FactorTransform> transformer_left(left_date_time.getScale());\n+\n+            const auto & right_date_time = right.safeGet<DateTime64>();\n+            TransformDateTime64<typename Transform::FactorTransform> transformer_right(right_date_time.getScale());\n+\n+            return transformer_left.execute(left_date_time.getValue(), date_lut)\n+                    == transformer_right.execute(right_date_time.getValue(), date_lut)\n+                ? is_monotonic\n+                : is_not_monotonic;\n+        }\n+\n         return Transform::FactorTransform::execute(UInt32(left.safeGet<UInt64>()), date_lut)\n                 == Transform::FactorTransform::execute(UInt32(right.safeGet<UInt64>()), date_lut)\n             ? is_monotonic\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03271_decimal_monotonic_day_of_week.reference b/tests/queries/0_stateless/03271_decimal_monotonic_day_of_week.reference\nnew file mode 100644\nindex 000000000000..b8626c4cff28\n--- /dev/null\n+++ b/tests/queries/0_stateless/03271_decimal_monotonic_day_of_week.reference\n@@ -0,0 +1,1 @@\n+4\ndiff --git a/tests/queries/0_stateless/03271_decimal_monotonic_day_of_week.sql b/tests/queries/0_stateless/03271_decimal_monotonic_day_of_week.sql\nnew file mode 100644\nindex 000000000000..66e085c502d6\n--- /dev/null\n+++ b/tests/queries/0_stateless/03271_decimal_monotonic_day_of_week.sql\n@@ -0,0 +1,7 @@\n+DROP TABLE IF EXISTS decimal_dt;\n+\n+CREATE TABLE decimal_dt (timestamp DateTime64(9)) ENGINE=MergeTree() ORDER BY timestamp;\n+INSERT INTO decimal_dt VALUES (toDate('2024-11-11')),(toDate('2024-11-12')),(toDate('2024-11-13')),(toDate('2024-11-14')),(toDate('2024-11-15')),(toDate('2024-11-16')),(toDate('2024-11-17'));\n+SELECT count() FROM decimal_dt WHERE toDayOfWeek(timestamp) > 3;\n+\n+DROP TABLE IF EXISTS decimal_dt;\n",
  "problem_statement": "toDayOfWeek on WHERE condition with primary key breaks on updating clickhouse (Bad get)\n**Describe the unexpected behaviour**\r\nusing `toDayOfWeek` as part of a WHERE condition in a select query fails after updating clickhouse to 24.8+.\r\n\r\nreproduce here:\r\nhttps://fiddle.clickhouse.com/8a03ec44-0ff7-4e45-8e85-8f3d9159e72c\r\nfails on 24.8, succeeds on 24.7.\r\n\r\nThe error does not reproduce when the table is not ordered by the timestamp (https://fiddle.clickhouse.com/ee226b86-231d-4f6d-9815-14b0eab341d3), or when using a Memory table engine. Using this function in the SELECT part works. Also, similar functions like `toDayOfMonth` seem to work as usual.\r\n\r\nThanks!\n",
  "hints_text": "Seems introduced in https://github.com/ClickHouse/ClickHouse/pull/68135",
  "created_at": "2024-11-13T02:48:13Z"
}