{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 43893,
  "instance_id": "ClickHouse__ClickHouse-43893",
  "issue_numbers": [
    "43892"
  ],
  "base_commit": "b6eddbac0dcd52e45701905b22cef69759171e76",
  "patch": "diff --git a/src/Analyzer/Passes/QueryAnalysisPass.cpp b/src/Analyzer/Passes/QueryAnalysisPass.cpp\nindex fdfc6bd0b96e..4e29cd694e02 100644\n--- a/src/Analyzer/Passes/QueryAnalysisPass.cpp\n+++ b/src/Analyzer/Passes/QueryAnalysisPass.cpp\n@@ -2854,6 +2854,14 @@ IdentifierResolveResult QueryAnalyzer::tryResolveIdentifierInParentScopes(const\n         }\n     }\n \n+    /** Nested subqueries cannot access outer subqueries table expressions from JOIN tree because\n+      * that can prevent resolution of table expression from CTE.\n+      *\n+      * Example: WITH a AS (SELECT number FROM numbers(1)), b AS (SELECT number FROM a) SELECT * FROM a as l, b as r;\n+      */\n+    if (identifier_lookup.isTableExpressionLookup())\n+        identifier_resolve_settings.allow_to_check_join_tree = false;\n+\n     while (scope_to_check != nullptr)\n     {\n         auto lookup_result = tryResolveIdentifier(identifier_lookup, *scope_to_check, identifier_resolve_settings);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02494_analyzer_cte_resolution_in_subquery_fix.reference b/tests/queries/0_stateless/02494_analyzer_cte_resolution_in_subquery_fix.reference\nnew file mode 100644\nindex 000000000000..09373d75f5d6\n--- /dev/null\n+++ b/tests/queries/0_stateless/02494_analyzer_cte_resolution_in_subquery_fix.reference\n@@ -0,0 +1,4 @@\n+0\t0\t0\n+0\t0\t0\n+0\t0\n+0\t0\ndiff --git a/tests/queries/0_stateless/02494_analyzer_cte_resolution_in_subquery_fix.sql b/tests/queries/0_stateless/02494_analyzer_cte_resolution_in_subquery_fix.sql\nnew file mode 100644\nindex 000000000000..de7c7242b90b\n--- /dev/null\n+++ b/tests/queries/0_stateless/02494_analyzer_cte_resolution_in_subquery_fix.sql\n@@ -0,0 +1,9 @@\n+WITH a AS (SELECT t1.number AS n1, t2.number AS n2 FROM numbers(1) AS t1, numbers(1) AS t2), b AS (SELECT sum(n1) AS s FROM a)\n+SELECT * FROM b AS l, a AS r;\n+\n+WITH a AS (SELECT t1.number AS n1, t2.number AS n2 FROM numbers(1) AS t1, numbers(1) AS t2), b AS (SELECT sum(n1) AS s FROM a)\n+SELECT * FROM b AS l, a AS r;\n+\n+WITH a AS (SELECT number FROM numbers(1)), b AS (SELECT number FROM a) SELECT * FROM b as l, a as r;\n+\n+WITH a AS (SELECT number FROM numbers(1)), b AS (SELECT number FROM a) SELECT * FROM a as l, b as r;\n",
  "problem_statement": "[allow_experimental_analyzer] UNKNOWN_TABLE with CTE\n```\r\nWITH\r\n    a AS\r\n    (\r\n        SELECT\r\n            t1.number AS n1,\r\n            t2.number AS n2\r\n        FROM numbers(1) AS t1, numbers(1) AS t2\r\n    ),\r\n    b AS\r\n    (\r\n        SELECT sum(n1) AS s\r\n        FROM a\r\n    )\r\nSELECT *\r\nFROM a AS l, b AS r\r\nSETTINGS allow_experimental_analyzer = 1\r\n\r\nQuery id: 3e4256ae-2d4a-413a-8af0-b1d6cd645bfc\r\n\r\n\r\n0 rows in set. Elapsed: 0.001 sec.\r\n\r\nReceived exception from server (version 22.12.1):\r\nCode: 60. DB::Exception: Received from localhost:9000. DB::Exception: Table default.a doesn't exist. Stack trace:\r\n\r\n0. ./build_docker/../src/Common/Exception.cpp:77: DB::Exception::Exception(DB::Exception::MessageMasked const&, int, bool) @ 0xe469f1a in /usr/bin/clickhouse\r\n1. ./build_docker/../contrib/libcxx/include/string:1499: DB::Exception& std::__1::optional<DB::Exception>::emplace[abi:v15003]<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, int const&, void>(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&&, int const&) @ 0x1375a8c2 in /usr/bin/clickhouse\r\n2. ./build_docker/../contrib/libcxx/include/string:1499: DB::DatabaseCatalog::getTableImpl(DB::StorageID const&, std::__1::shared_ptr<DB::Context const>, std::__1::optional<DB::Exception>*) const @ 0x137d0568 in /usr/bin/clickhouse\r\n3. ./build_docker/../contrib/libcxx/include/__memory/shared_ptr.h:801: DB::DatabaseCatalog::getTable(DB::StorageID const&, std::__1::shared_ptr<DB::Context const>) const @ 0x137d826a in /usr/bin/clickhouse\r\n4. ./build_docker/../src/Analyzer/Passes/QueryAnalysisPass.cpp:2027: DB::(anonymous namespace)::QueryAnalyzer::tryResolveIdentifier(DB::(anonymous namespace)::IdentifierLookup const&, DB::(anonymous namespace)::IdentifierResolveScope&, DB::(anonymous namespace)::IdentifierResolveSettings) @ 0x13d79ff6 in /usr/bin/clickhouse\r\n5. ./build_docker/../src/Analyzer/Passes/QueryAnalysisPass.cpp:0: DB::(anonymous namespace)::QueryAnalyzer::resolveQuery(std::__1::shared_ptr<DB::IQueryTreeNode> const&, DB::(anonymous namespace)::IdentifierResolveScope&) @ 0x13d60eca in /usr/bin/clickhouse\r\n6. ./build_docker/../src/Analyzer/Passes/QueryAnalysisPass.cpp:5419: DB::(anonymous namespace)::QueryAnalyzer::resolveQueryJoinTreeNode(std::__1::shared_ptr<DB::IQueryTreeNode>&, DB::(anonymous namespace)::IdentifierResolveScope&, DB::(anonymous namespace)::QueryExpressionsAliasVisitor&) @ 0x13d70951 in /usr/bin/clickhouse\r\n7. ./build_docker/../contrib/libcxx/include/vector:1457: DB::(anonymous namespace)::QueryAnalyzer::resolveQueryJoinTreeNode(std::__1::shared_ptr<DB::IQueryTreeNode>&, DB::(anonymous namespace)::IdentifierResolveScope&, DB::(anonymous namespace)::QueryExpressionsAliasVisitor&) @ 0x13d6fce3 in /usr/bin/clickhouse\r\n8. ./build_docker/../contrib/libcxx/include/vector:1457: DB::(anonymous namespace)::QueryAnalyzer::resolveQuery(std::__1::shared_ptr<DB::IQueryTreeNode> const&, DB::(anonymous namespace)::IdentifierResolveScope&) @ 0x13d61921 in /usr/bin/clickhouse\r\n9. ./build_docker/../src/Analyzer/Passes/QueryAnalysisPass.cpp:989: DB::QueryAnalysisPass::run(std::__1::shared_ptr<DB::IQueryTreeNode>, std::__1::shared_ptr<DB::Context const>) @ 0x13d5f820 in /usr/bin/clickhouse\r\n10. ./build_docker/../src/Analyzer/QueryTreePassManager.cpp:97: DB::QueryTreePassManager::run(std::__1::shared_ptr<DB::IQueryTreeNode>) @ 0x13d5e245 in /usr/bin/clickhouse\r\n11. ./build_docker/../contrib/libcxx/include/vector:434: DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::__1::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::__1::shared_ptr<DB::Context const>) @ 0x13e6a8ba in /usr/bin/clickhouse\r\n12. ./build_docker/../contrib/libcxx/include/__memory/unique_ptr.h:0: DB::InterpreterFactory::get(std::__1::shared_ptr<DB::IAST>&, std::__1::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x13de2c2a in /usr/bin/clickhouse\r\n13. ./build_docker/../src/Interpreters/executeQuery.cpp:0: DB::executeQueryImpl(char const*, char const*, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x141c1da0 in /usr/bin/clickhouse\r\n14. ./build_docker/../src/Interpreters/executeQuery.cpp:1082: DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x141bf68d in /usr/bin/clickhouse\r\n15. ./build_docker/../src/Server/TCPHandler.cpp:0: DB::TCPHandler::runImpl() @ 0x14e76fee in /usr/bin/clickhouse\r\n16. ./build_docker/../src/Server/TCPHandler.cpp:1904: DB::TCPHandler::run() @ 0x14e8a4f9 in /usr/bin/clickhouse\r\n17. ./build_docker/../contrib/poco/Net/src/TCPServerConnection.cpp:57: Poco::Net::TCPServerConnection::start() @ 0x17ce03b4 in /usr/bin/clickhouse\r\n18. ./build_docker/../contrib/libcxx/include/__memory/unique_ptr.h:48: Poco::Net::TCPServerDispatcher::run() @ 0x17ce1d5b in /usr/bin/clickhouse\r\n19. ./build_docker/../contrib/poco/Foundation/src/ThreadPool.cpp:213: Poco::PooledThread::run() @ 0x17e70b67 in /usr/bin/clickhouse\r\n20. ./build_docker/../contrib/poco/Foundation/include/Poco/SharedPtr.h:277: Poco::ThreadImpl::runnableEntry(void*) @ 0x17e6e59d in /usr/bin/clickhouse\r\n21. ? @ 0x7fea26f61609 in ?\r\n22. __clone @ 0x7fea26e86133 in ?\r\n. (UNKNOWN_TABLE)\r\n\r\nip-172-31-16-30.us-east-2.compute.internal :) WITH a AS\r\n                                              (\r\n                                              SELECT t1.number as n1, t2.number as n2\r\n                                              FROM numbers(1) as t1, numbers(1) as t2\r\n                                              ),\r\n                                              b AS\r\n                                              (\r\n                                              SELECT sum(n1) as s\r\n                                              FROM a\r\n                                              )\r\n                                              SELECT *\r\n                                              FROM a l, b r\r\n                                              SETTINGS allow_experimental_analyzer = 0\r\n\r\nWITH\r\n    a AS\r\n    (\r\n        SELECT\r\n            t1.number AS n1,\r\n            t2.number AS n2\r\n        FROM numbers(1) AS t1, numbers(1) AS t2\r\n    ),\r\n    b AS\r\n    (\r\n        SELECT sum(n1) AS s\r\n        FROM a\r\n    )\r\nSELECT *\r\nFROM a AS l, b AS r\r\nSETTINGS allow_experimental_analyzer = 0\r\n\r\nQuery id: 09e947a7-e32a-4a23-9161-39582b0f86b0\r\n\r\n\u250c\u2500n1\u2500\u252c\u2500n2\u2500\u252c\u2500s\u2500\u2510\r\n\u2502  0 \u2502  0 \u2502 0 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.028 sec.\r\n```\n",
  "hints_text": "",
  "created_at": "2022-12-02T17:22:12Z"
}