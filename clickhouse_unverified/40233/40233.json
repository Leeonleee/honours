{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 40233,
  "instance_id": "ClickHouse__ClickHouse-40233",
  "issue_numbers": [
    "40014"
  ],
  "base_commit": "b876cc17c9559ff269d7007ab500b8867c4cdbce",
  "patch": "diff --git a/src/Storages/StorageMerge.cpp b/src/Storages/StorageMerge.cpp\nindex 2bedf406b7d2..16af2269f614 100644\n--- a/src/Storages/StorageMerge.cpp\n+++ b/src/Storages/StorageMerge.cpp\n@@ -2,6 +2,7 @@\n #include <QueryPipeline/QueryPipelineBuilder.h>\n #include <Storages/StorageMerge.h>\n #include <Storages/StorageFactory.h>\n+#include <Storages/StorageView.h>\n #include <Storages/VirtualColumnUtils.h>\n #include <Storages/AlterCommands.h>\n #include <Storages/checkAndGetLiteralArgument.h>\n@@ -528,15 +529,33 @@ QueryPipelineBuilderPtr ReadFromMerge::createSources(\n             real_column_names.push_back(ExpressionActions::getSmallestColumn(storage_snapshot->metadata->getColumns().getAllPhysical()));\n \n         QueryPlan plan;\n-        storage->read(\n-            plan,\n-            real_column_names,\n-            storage_snapshot,\n-            modified_query_info,\n-            modified_context,\n-            processed_stage,\n-            max_block_size,\n-            UInt32(streams_num));\n+        if (StorageView * view = dynamic_cast<StorageView *>(storage.get()))\n+        {\n+            /// For view storage, we need to rewrite the `modified_query_info.view_query` to optimize read.\n+            /// The most intuitive way is to use InterpreterSelectQuery.\n+\n+            /// Intercept the settings\n+            modified_context->setSetting(\"max_threads\", streams_num);\n+            modified_context->setSetting(\"max_streams_to_max_threads_ratio\", 1);\n+            modified_context->setSetting(\"max_block_size\", max_block_size);\n+\n+            InterpreterSelectQuery(\n+                modified_query_info.query, modified_context, storage, view->getInMemoryMetadataPtr(), SelectQueryOptions(processed_stage))\n+                .buildQueryPlan(plan);\n+        }\n+        else\n+        {\n+            storage->read(\n+                plan,\n+                real_column_names,\n+                storage_snapshot,\n+                modified_query_info,\n+                modified_context,\n+                processed_stage,\n+                max_block_size,\n+                UInt32(streams_num));\n+\n+        }\n \n         if (!plan.isInitialized())\n             return {};\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02402_merge_engine_with_view.reference b/tests/queries/0_stateless/02402_merge_engine_with_view.reference\nnew file mode 100644\nindex 000000000000..4a869286f827\n--- /dev/null\n+++ b/tests/queries/0_stateless/02402_merge_engine_with_view.reference\n@@ -0,0 +1,6 @@\n+2\n+2\n+3\n+3\n+4\n+4\ndiff --git a/tests/queries/0_stateless/02402_merge_engine_with_view.sql b/tests/queries/0_stateless/02402_merge_engine_with_view.sql\nnew file mode 100644\nindex 000000000000..613f76e24c91\n--- /dev/null\n+++ b/tests/queries/0_stateless/02402_merge_engine_with_view.sql\n@@ -0,0 +1,10 @@\n+\n+CREATE TABLE m0 (id UInt64) ENGINE=MergeTree ORDER BY id SETTINGS index_granularity = 1;\n+INSERT INTO m0 SELECT number FROM numbers(10);\n+CREATE TABLE m1 (id UInt64, s String) ENGINE=MergeTree ORDER BY id SETTINGS index_granularity = 1;\n+INSERT INTO m1 SELECT number, 'boo' FROM numbers(10);\n+CREATE VIEW m1v AS SELECT id FROM m1;\n+\n+CREATE TABLE m2 (id UInt64) ENGINE=Merge(currentDatabase(),'m0|m1v');\n+\n+SELECT * FROM m2 WHERE id > 1 AND id < 5 ORDER BY id SETTINGS force_primary_key=1, max_bytes_to_read=64;\n\\ No newline at end of file\n",
  "problem_statement": "Merge Table Engine does not use the indexes of tables.\nWe use Merge Table Engine to merge a ReplicatedMergeTree Engine table and a normal view without Distributed Table Engine based on another ReplicatedMergeTree Engine table.\r\n\r\nAnd we found that the Merge Table Engine does not use the indexes of view.\r\n\r\nBut if we use Distributed Table Engine to make these tables and views distributed, the Merge Table Engine will use their indexes.\r\n\r\nSo what is the difference between these two modes?\r\n\r\n\r\nClickHouse version: 21.9.2.17\r\n\n",
  "hints_text": "Some more information and examples would be great\nDo you mean \r\n\r\n```\r\n                                    ----> ReplicatedMergeTree  ( OK. here indexes are used. )\r\n                                  /\r\n                                 /\r\nselect --->>   Engine=Merge  --- \r\n                                 \\\r\n                                  \\\r\n                                   ----> View ---> ReplicatedMergeTree ( Not OK. here indexes are not used. )\r\n```\n@den-crane yep, and the indexes of two ReplicatedMergeTree are the same.\nThe issue may be related to version 21.9.2.17, since this phenomenon cannot be repeated in version 20.3.8.53.\r\n@rkozlo @den-crane \nThe output of the indexes log is as follows:\r\n![image](https://user-images.githubusercontent.com/35388969/183860086-cd43f0a4-9a57-4519-88d7-52db9380c50c.png)\r\n![image](https://user-images.githubusercontent.com/35388969/183860144-0b8b5c4e-bbe3-49e7-9486-235f1f3b81a9.png)\r\n![image](https://user-images.githubusercontent.com/35388969/183860235-13c437b9-aa37-4b4c-a1a5-61ec9b4f5864.png)\r\n![image](https://user-images.githubusercontent.com/35388969/183860294-07cde058-7b08-489a-9ee4-45b5612104de.png)\r\n![image](https://user-images.githubusercontent.com/35388969/183860501-1675e2a3-5d20-4bb2-ac45-79cc50f93e19.png)\r\n\r\nIf I create a same query just for the view, I can see \r\n![image](https://user-images.githubusercontent.com/35388969/183861703-9a50c22e-a4e9-44c9-9ce8-bb9e9602ca30.png)\r\n![image](https://user-images.githubusercontent.com/35388969/183860780-4edeee4c-1e85-4fb4-9dc2-c128399411ce.png)\r\n![image](https://user-images.githubusercontent.com/35388969/183860849-000d1d90-ef47-4863-87be-4d6fee941588.png)\r\n![image](https://user-images.githubusercontent.com/35388969/183860909-6d326d94-0f96-4df9-8aec-d5673a96b2e7.png)\r\n![image](https://user-images.githubusercontent.com/35388969/183860954-2b7836dd-16e2-4a06-9723-06db9cd83437.png)\r\n![image](https://user-images.githubusercontent.com/35388969/183861015-be9ed78b-d6e8-4dac-9ded-192424d9f729.png)\r\n@rkozlo @den-crane ",
  "created_at": "2022-08-15T11:06:27Z"
}