{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 81465,
  "instance_id": "ClickHouse__ClickHouse-81465",
  "issue_numbers": [
    "44115"
  ],
  "base_commit": "b436f12d3713bf820aae6afc6b14a24dbb44ea3e",
  "patch": "diff --git a/programs/local/LocalServer.cpp b/programs/local/LocalServer.cpp\nindex 14d82d6ede01..603b5454754f 100644\n--- a/programs/local/LocalServer.cpp\n+++ b/programs/local/LocalServer.cpp\n@@ -907,16 +907,15 @@ void LocalServer::processConfig()\n     /// We load temporary database first, because projections need it.\n     DatabaseCatalog::instance().initializeAndLoadTemporaryDatabase();\n \n-    std::string default_database = server_settings[ServerSetting::default_database];\n-    if (default_database.empty())\n-        throw Exception(ErrorCodes::BAD_ARGUMENTS, \"default_database cannot be empty\");\n+    std::string server_default_database = server_settings[ServerSetting::default_database];\n+    if (!server_default_database.empty())\n     {\n-        DatabasePtr database = createClickHouseLocalDatabaseOverlay(default_database, global_context);\n+        DatabasePtr database = createClickHouseLocalDatabaseOverlay(server_default_database, global_context);\n         if (UUID uuid = database->getUUID(); uuid != UUIDHelpers::Nil)\n             DatabaseCatalog::instance().addUUIDMapping(uuid);\n-        DatabaseCatalog::instance().attachDatabase(default_database, database);\n+        DatabaseCatalog::instance().attachDatabase(server_default_database, database);\n+        global_context->setCurrentDatabase(server_default_database);\n     }\n-    global_context->setCurrentDatabase(default_database);\n \n     if (getClientConfiguration().has(\"path\"))\n     {\n@@ -970,6 +969,11 @@ void LocalServer::processConfig()\n         attachInformationSchema(global_context, *createMemoryDatabaseIfNotExists(global_context, DatabaseCatalog::INFORMATION_SCHEMA_UPPERCASE));\n     }\n \n+    std::string default_database = getClientConfiguration().getString(\"database\", server_default_database);\n+    if (default_database.empty())\n+        throw Exception(ErrorCodes::BAD_ARGUMENTS, \"default_database cannot be empty\");\n+    global_context->setCurrentDatabase(default_database);\n+\n     server_display_name = getClientConfiguration().getString(\"display_name\", \"\");\n \n     if (getClientConfiguration().has(\"prompt\"))\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02141_clickhouse_local_interactive_table.reference b/tests/queries/0_stateless/02141_clickhouse_local_interactive_table.reference\nindex 277f4df04ab0..8b5f06cd5a3d 100644\n--- a/tests/queries/0_stateless/02141_clickhouse_local_interactive_table.reference\n+++ b/tests/queries/0_stateless/02141_clickhouse_local_interactive_table.reference\n@@ -1,2 +1,1 @@\n CREATE TEMPORARY TABLE `table`\\n(\\n    `key` String\\n)\\nENGINE = File(TSVWithNamesAndTypes, \\'/dev/null\\', auto)\n-CREATE TEMPORARY TABLE `table`\\n(\\n    `key` String\\n)\\nENGINE = File(TSVWithNamesAndTypes, \\'/dev/null\\', auto)\ndiff --git a/tests/queries/0_stateless/02141_clickhouse_local_interactive_table.sh b/tests/queries/0_stateless/02141_clickhouse_local_interactive_table.sh\nindex 0ec16b332bb4..5b08a26d76e1 100755\n--- a/tests/queries/0_stateless/02141_clickhouse_local_interactive_table.sh\n+++ b/tests/queries/0_stateless/02141_clickhouse_local_interactive_table.sh\n@@ -5,4 +5,3 @@ CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n . \"$CURDIR\"/../shell_config.sh\n \n $CLICKHOUSE_LOCAL --file /dev/null --structure \"key String\" --input-format TSVWithNamesAndTypes --interactive <<<'show create temporary table table'\n-$CLICKHOUSE_LOCAL --database foo --file /dev/null --structure \"key String\" --input-format TSVWithNamesAndTypes --interactive <<<'show create temporary table table'\ndiff --git a/tests/queries/0_stateless/03533_clickhouse_local_database_argument.reference b/tests/queries/0_stateless/03533_clickhouse_local_database_argument.reference\nnew file mode 100644\nindex 000000000000..4e3f26e9db41\n--- /dev/null\n+++ b/tests/queries/0_stateless/03533_clickhouse_local_database_argument.reference\n@@ -0,0 +1,9 @@\n+Hello, world\n+Hello, world\n+Hello, world\n+Hello, world\n+Hello, world\n+Hello, world\n+Hello from a file\n+Hello from a file\n+Hello from a file\ndiff --git a/tests/queries/0_stateless/03533_clickhouse_local_database_argument.sh b/tests/queries/0_stateless/03533_clickhouse_local_database_argument.sh\nnew file mode 100755\nindex 000000000000..231420574eca\n--- /dev/null\n+++ b/tests/queries/0_stateless/03533_clickhouse_local_database_argument.sh\n@@ -0,0 +1,31 @@\n+#!/usr/bin/env bash\n+\n+CUR_DIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CUR_DIR\"/../shell_config.sh\n+\n+$CLICKHOUSE_LOCAL --path \"${CLICKHOUSE_TMP}\" --query \"\n+CREATE DATABASE test;\n+USE test;\n+CREATE TABLE t (s String) ORDER BY ();\n+INSERT INTO t VALUES ('Hello, world');\n+SELECT * FROM t;\n+\"\n+\n+# We can switch to the previously created database using a command-line argument:\n+\n+$CLICKHOUSE_LOCAL --path \"${CLICKHOUSE_TMP}\" --query \"SELECT * FROM test.t;\"\n+$CLICKHOUSE_LOCAL --path \"${CLICKHOUSE_TMP}\" --query \"USE test; SELECT * FROM t;\"\n+$CLICKHOUSE_LOCAL --path \"${CLICKHOUSE_TMP}\" --database default --query \"USE test; SELECT * FROM t;\"\n+$CLICKHOUSE_LOCAL --path \"${CLICKHOUSE_TMP}\" --database test --query \"SELECT * FROM t;\"\n+$CLICKHOUSE_LOCAL --path \"${CLICKHOUSE_TMP}\" --database system --query \"USE test; SELECT * FROM t;\"\n+\n+# Only default database is configured as a filesystem overlay:\n+\n+echo \"Hello from a file\" > \"${CLICKHOUSE_TMP}/file.csv\"\n+\n+$CLICKHOUSE_LOCAL --path \"${CLICKHOUSE_TMP}\" --query \"SELECT * FROM '${CLICKHOUSE_TMP}/file.csv'\"\n+$CLICKHOUSE_LOCAL --path \"${CLICKHOUSE_TMP}\" --query \"SELECT * FROM default.\\`${CLICKHOUSE_TMP}/file.csv\\`\"\n+$CLICKHOUSE_LOCAL --path \"${CLICKHOUSE_TMP}\" --database test --query \"SELECT * FROM default.\\`${CLICKHOUSE_TMP}/file.csv\\`\"\n+\n+$CLICKHOUSE_LOCAL --path \"${CLICKHOUSE_TMP}\" --query \"DROP DATABASE test;\"\n",
  "problem_statement": "clickhouse-local ignoring `--database` param and falsely erroring that `USE` is not implemented\n> You have to provide the following information whenever possible.\r\n\r\n**Describe what's wrong**\r\n\r\nWith clickhouse-local  `22.1.4.1` and `22.8.4.7` the `--database/-d` flag is ignored, as well as the `USE` statement throwing an error yet actually executing.\r\n\r\n**How to reproduce**\r\n\r\nFirst execute:\r\n```\r\nCREATE DATABASE IF NOT EXISTS per;\r\n\r\nCREATE TABLE IF NOT EXISTS per.test (a Int64)\r\nENGINE = MergeTree()\r\nORDER BY a;\r\n\r\nINSERT INTO per.test SELECT * FROM numbers(1, 10000000);\r\n```\r\n\r\nThen try:\r\n\r\n```\r\ndangoodman: ~/code/serverless-olap-poc git:(main) \u2717 clickhouse-local -d per --path ./ch                                                           6:00PM\r\nClickHouse local version 22.1.4.1.\r\n\r\ndans-maxbook-pro.local :) select count() from test;\r\n\r\nSELECT count()\r\nFROM test\r\n\r\nQuery id: 2f3d90d3-d320-495e-954b-47f2a8cd1b64\r\n\r\n\r\n0 rows in set. Elapsed: 0.000 sec.\r\n\r\nReceived exception:\r\nCode: 60. DB::Exception: Table _local.test doesn't exist. (UNKNOWN_TABLE)\r\n\r\ndans-maxbook-pro.local :) use per\r\n\r\nUSE per\r\n\r\nQuery id: d4452446-5081-446b-9cfb-e93ec5a30481\r\n\r\nOk.\r\nException on client:\r\nCode: 48. DB::Exception: Not implemented. (NOT_IMPLEMENTED)\r\n\r\ndans-maxbook-pro.local :) select count() from test;\r\n\r\nSELECT count()\r\nFROM test\r\n\r\nQuery id: 6eaa4190-cff0-488a-8db0-eb5668488028\r\n\r\n\u250c\u2500\u2500count()\u2500\u2510\r\n\u2502 10000000 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 0.000 sec.\r\n```\r\n\r\nAs you can see, the `USE` statement throws an error, yet behaves as it did not. Also, the `-d/--database` option does not set the database.\r\n\r\n> A link to reproducer in [https://fiddle.clickhouse.com/](https://fiddle.clickhouse.com/).\r\n\r\n**Expected behavior**\r\n\r\n> A clear and concise description of what you expected to happen.\r\n\r\nThe `-d/--database` would set the database (and maybe make if not exists?), and \r\n\r\n**Error message and/or stacktrace**\r\n\r\nSee above\r\n\n",
  "hints_text": "",
  "created_at": "2025-06-07T03:31:59Z",
  "modified_files": [
    "programs/local/LocalServer.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/02141_clickhouse_local_interactive_table.reference",
    "tests/queries/0_stateless/02141_clickhouse_local_interactive_table.sh",
    "b/tests/queries/0_stateless/03533_clickhouse_local_database_argument.reference",
    "b/tests/queries/0_stateless/03533_clickhouse_local_database_argument.sh"
  ]
}