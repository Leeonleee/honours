{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 84695,
  "instance_id": "ClickHouse__ClickHouse-84695",
  "issue_numbers": [
    "84340"
  ],
  "base_commit": "ac2444bf98d85ec097acfb7a19158f3e996ff51e",
  "patch": "diff --git a/src/Storages/System/StorageSystemColumns.cpp b/src/Storages/System/StorageSystemColumns.cpp\nindex 9704bce1f277..209148872278 100644\n--- a/src/Storages/System/StorageSystemColumns.cpp\n+++ b/src/Storages/System/StorageSystemColumns.cpp\n@@ -36,8 +36,7 @@ StorageSystemColumns::StorageSystemColumns(const StorageID & table_id_)\n \n     /// NOTE: when changing the list of columns, take care of the ColumnsSource::generate method,\n     /// when they are referenced by their numeric positions.\n-    storage_metadata.setColumns(ColumnsDescription(\n-    {\n+    auto description = ColumnsDescription({\n         { \"database\",           std::make_shared<DataTypeString>(), \"Database name.\"},\n         { \"table\",              std::make_shared<DataTypeString>(), \"Table name.\"},\n         { \"name\",               std::make_shared<DataTypeString>(), \"Column name.\"},\n@@ -65,7 +64,13 @@ StorageSystemColumns::StorageSystemColumns(const StorageID & table_id_)\n         { \"datetime_precision\",         std::make_shared<DataTypeNullable>(std::make_shared<DataTypeUInt64>()),\n             \"Decimal precision of DateTime64 data type. For other data types, the NULL value is returned.\"},\n         { \"serialization_hint\",         std::make_shared<DataTypeNullable>(std::make_shared<DataTypeString>()), \"A hint for column to choose serialization on inserts according to statistics.\"},\n-    }));\n+    });\n+\n+    description.setAliases({\n+        {\"column\", std::make_shared<DataTypeString>(), \"name\"}\n+    });\n+\n+    storage_metadata.setColumns(description);\n     setInMemoryMetadata(storage_metadata);\n }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02117_show_create_table_system.reference b/tests/queries/0_stateless/02117_show_create_table_system.reference\nindex 83ac2d1df17f..58f309e5300e 100644\n--- a/tests/queries/0_stateless/02117_show_create_table_system.reference\n+++ b/tests/queries/0_stateless/02117_show_create_table_system.reference\n@@ -91,7 +91,8 @@ CREATE TABLE system.columns\n     `numeric_precision_radix` Nullable(UInt64),\n     `numeric_scale` Nullable(UInt64),\n     `datetime_precision` Nullable(UInt64),\n-    `serialization_hint` Nullable(String)\n+    `serialization_hint` Nullable(String),\n+    `column` String ALIAS name\n )\n ENGINE = SystemColumns\n COMMENT 'Lists all columns from all tables of the current server.'\ndiff --git a/tests/queries/0_stateless/03579_system_columns_column_alias.reference b/tests/queries/0_stateless/03579_system_columns_column_alias.reference\nnew file mode 100644\nindex 000000000000..c849a584c681\n--- /dev/null\n+++ b/tests/queries/0_stateless/03579_system_columns_column_alias.reference\n@@ -0,0 +1,3 @@\n+database\n+database\n+database\tdatabase\t1\ndiff --git a/tests/queries/0_stateless/03579_system_columns_column_alias.sql b/tests/queries/0_stateless/03579_system_columns_column_alias.sql\nnew file mode 100644\nindex 000000000000..6d717e35cca7\n--- /dev/null\n+++ b/tests/queries/0_stateless/03579_system_columns_column_alias.sql\n@@ -0,0 +1,11 @@\n+-- Test that system.columns has 'column' as an alias for 'name'\n+\n+-- Query using the original 'name' column\n+SELECT name FROM system.columns WHERE database = 'system' AND table = 'columns' LIMIT 1;\n+\n+-- Query using the new 'column' alias - should return identical results  \n+SELECT column FROM system.columns WHERE database = 'system' AND table = 'columns' LIMIT 1;\n+\n+-- Test that both column names work in the same query\n+SELECT name, column, name = column as alias_works FROM system.columns \n+WHERE database = 'system' AND table = 'columns' LIMIT 1;\n\\ No newline at end of file\n",
  "problem_statement": "`system.columns` should have `column` as an alias of `name`\n### Company or project name\n\nClickHouse\n\n### Use case\n\n.\n\n### Describe the solution you'd like\n\n.\n\n### Describe alternatives you've considered\n\n_No response_\n\n### Additional context\n\n_No response_\n",
  "hints_text": "picking this up! thanks\n@yunchipang, thank you!",
  "created_at": "2025-07-29T23:25:52Z"
}