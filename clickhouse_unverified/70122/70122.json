{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 70122,
  "instance_id": "ClickHouse__ClickHouse-70122",
  "issue_numbers": [
    "68379",
    "69839"
  ],
  "base_commit": "07d5045b33882743874cb868407e3a1afc355cd5",
  "patch": "diff --git a/src/Processors/Formats/Impl/ConstantExpressionTemplate.cpp b/src/Processors/Formats/Impl/ConstantExpressionTemplate.cpp\nindex e04d77996f38..13eb6d3403f2 100644\n--- a/src/Processors/Formats/Impl/ConstantExpressionTemplate.cpp\n+++ b/src/Processors/Formats/Impl/ConstantExpressionTemplate.cpp\n@@ -331,9 +331,6 @@ ConstantExpressionTemplate::TemplateStructure::TemplateStructure(LiteralsInfo &\n     for (size_t i = 0; i < replaced_literals.size(); ++i)\n     {\n         const LiteralInfo & info = replaced_literals[i];\n-        if (info.literal->begin.value() < prev_end)\n-            throw Exception(ErrorCodes::LOGICAL_ERROR, \"Cannot replace literals\");\n-\n         while (prev_end < info.literal->begin.value())\n         {\n             tokens.emplace_back(prev_end->begin, prev_end->size());\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03246_range_literal_replacement_works.reference b/tests/queries/0_stateless/03246_range_literal_replacement_works.reference\nnew file mode 100644\nindex 000000000000..9766475a4185\n--- /dev/null\n+++ b/tests/queries/0_stateless/03246_range_literal_replacement_works.reference\n@@ -0,0 +1,1 @@\n+ok\ndiff --git a/tests/queries/0_stateless/03246_range_literal_replacement_works.sql b/tests/queries/0_stateless/03246_range_literal_replacement_works.sql\nnew file mode 100644\nindex 000000000000..3771a9eb921d\n--- /dev/null\n+++ b/tests/queries/0_stateless/03246_range_literal_replacement_works.sql\n@@ -0,0 +1,13 @@\n+CREATE TABLE my_table (\n+  str String,\n+) ORDER BY str;\n+\n+INSERT INTO my_table VALUES\n+(\n+CASE WHEN\n+  (0 BETWEEN 0 AND 2) THEN 'ok' ELSE\n+  'wat'\n+END\n+);\n+\n+SELECT * FROM my_table;\n\\ No newline at end of file\n",
  "problem_statement": "Logical error: 'Cannot replace literals'\n**Describe the bug**\r\nCompile Clickhouse on debug build. Then using a string literal on a BETWEEN clause inside an insert triggers a logical error\r\n\r\n**How to reproduce**\r\n\r\n```sql\r\nCREATE TABLE t0 (c0 Int) ENGINE = Memory;\r\nINSERT INTO t0(c0) VALUES (1 BETWEEN 1 AND 1);\r\n```\r\nThe stack trace:\r\n\r\n```\r\n2024.08.15 07:04:51.609617 [ 674638 ] {0b8cd3cb-21ef-4160-a01c-df095bb49f1e} <Fatal> : Logical error: 'Cannot replace literals'.\r\n2024.08.15 07:04:51.726355 [ 674638 ] {0b8cd3cb-21ef-4160-a01c-df095bb49f1e} <Fatal> : Stack trace (when copying this message, always include the lines below):\r\n\r\n0. contrib/llvm-project/libcxx/include/exception:141: Poco::Exception::Exception(String const&, int) @ 0x000000002745eb71\r\n1. src/Common/Exception.cpp:111: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000160de76d\r\n2. contrib/llvm-project/libcxx/include/string:1499: DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000006baed26\r\n3. src/Common/LoggingFormatStringHelpers.h:45: DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000006bb6f4f\r\n4. src/Processors/Formats/Impl/ConstantExpressionTemplate.cpp:330: DB::ConstantExpressionTemplate::TemplateStructure::TemplateStructure(std::vector<DB::LiteralInfo, std::allocator<DB::LiteralInfo>>&, DB::TokenIterator, DB::TokenIterator, std::shared_ptr<DB::IAST>&, DB::IDataType const&, bool, std::shared_ptr<DB::Context const>) @ 0x000000002624adf9\r\n5. contrib/llvm-project/libcxx/include/__memory/construct_at.h:35: DB::ConstantExpressionTemplate::Cache::getFromCacheOrConstruct(std::shared_ptr<DB::IDataType const> const&, bool, DB::TokenIterator, DB::TokenIterator, std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool*, String const&) @ 0x000000002624f09e\r\n6. src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp:486: DB::ValuesBlockInputFormat::parseExpression(DB::IColumn&, unsigned long) @ 0x0000000026240c90\r\n7. src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp:0: DB::ValuesBlockInputFormat::readRow(std::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn>>>&, unsigned long) @ 0x000000002623cebd\r\n8. src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp:0: DB::ValuesBlockInputFormat::read() @ 0x000000002623a9b1\r\n9. src/Processors/Formats/IInputFormat.cpp:19: DB::IInputFormat::generate() @ 0x000000002608a606\r\n10. src/Processors/Chunk.h:110: DB::ISource::tryGenerate() @ 0x000000002603807a\r\n11. contrib/llvm-project/libcxx/include/optional:344: DB::ISource::work() @ 0x0000000026037683\r\n12. src/Processors/Executors/ExecutionThreadContext.cpp:0: DB::ExecutionThreadContext::executeTask() @ 0x000000002607422e\r\n13. src/Processors/Executors/PipelineExecutor.cpp:273: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000026059cd1\r\n14. contrib/llvm-project/libcxx/include/vector:547: DB::PipelineExecutor::executeSingleThread(unsigned long) @ 0x000000002605a68a\r\n15. contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:701: DB::PipelineExecutor::executeImpl(unsigned long, bool) @ 0x000000002605781b\r\n16. contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:274: DB::PipelineExecutor::execute(unsigned long, bool) @ 0x0000000026056beb\r\n17. src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:94: void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000002607c11d\r\n18. contrib/llvm-project/libcxx/include/__functional/function.h:0: ? @ 0x0000000016255500\r\n19. contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:302: void* std::__thread_proxy[abi:v15007]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>>(void*) @ 0x000000001625f6cd\r\n20. asan_thread_start(void*) @ 0x0000000006b63bcd\r\n21. ? @ 0x0000730f80a9ca94\r\n22. ? @ 0x0000730f80b29c3c\r\n\r\n2024.08.15 07:04:51.727359 [ 674868 ] {} <Fatal> ClientBase: ########## Short fault info ############\r\n2024.08.15 07:04:51.727486 [ 674868 ] {} <Fatal> ClientBase: (version 24.8.1.1, build id: , git hash: ) (from thread 674638) Received signal 6\r\n2024.08.15 07:04:51.727528 [ 674868 ] {} <Fatal> ClientBase: Signal description: Aborted\r\n2024.08.15 07:04:51.727572 [ 674868 ] {} <Fatal> ClientBase: \r\n2024.08.15 07:04:51.727626 [ 674868 ] {} <Fatal> ClientBase: Stack trace: 0x0000610cf42c306d 0x0000610cf47ed5b0 0x0000730f80a45320 0x0000730f80a9eb1d 0x0000730f80a4526e 0x0000730f80a288ff 0x0000610cf4264428 0x0000610cf4265c3f 0x0000610ce4d35d26 0x0000610ce4d3df4f 0x0000610d043d1df9 0x0000610d043d609e 0x0000610d043c7c90 0x0000610d043c3ebd 0x0000610d043c19b1 0x0000610d04211606 0x0000610d041bf07a 0x0000610d041be683 0x0000610d041fb22e 0x0000610d041e0cd1 0x0000610d041e168a 0x0000610d041de81b 0x0000610d041ddbeb 0x0000610d0420311d 0x0000610cf43dc500 0x0000610cf43e66cd 0x0000610ce4ceabcd 0x0000730f80a9ca94 0x0000730f80b29c3c\r\n2024.08.15 07:04:51.727672 [ 674868 ] {} <Fatal> ClientBase: ########################################\r\n2024.08.15 07:04:51.727735 [ 674868 ] {} <Fatal> ClientBase: (version 24.8.1.1, build id: , git hash: ) (from thread 674638) (query_id: 0b8cd3cb-21ef-4160-a01c-df095bb49f1e) (query: INSERT INTO t0(c0) VALUES ) Received signal Aborted (6)\r\n2024.08.15 07:04:51.727782 [ 674868 ] {} <Fatal> ClientBase: \r\n2024.08.15 07:04:51.727821 [ 674868 ] {} <Fatal> ClientBase: Stack trace: 0x0000610cf42c306d 0x0000610cf47ed5b0 0x0000730f80a45320 0x0000730f80a9eb1d 0x0000730f80a4526e 0x0000730f80a288ff 0x0000610cf4264428 0x0000610cf4265c3f 0x0000610ce4d35d26 0x0000610ce4d3df4f 0x0000610d043d1df9 0x0000610d043d609e 0x0000610d043c7c90 0x0000610d043c3ebd 0x0000610d043c19b1 0x0000610d04211606 0x0000610d041bf07a 0x0000610d041be683 0x0000610d041fb22e 0x0000610d041e0cd1 0x0000610d041e168a 0x0000610d041de81b 0x0000610d041ddbeb 0x0000610d0420311d 0x0000610cf43dc500 0x0000610cf43e66cd 0x0000610ce4ceabcd 0x0000730f80a9ca94 0x0000730f80b29c3c\r\n2024.08.15 07:04:51.810580 [ 674868 ] {} <Fatal> ClientBase: 0.0. inlined from src/Common/StackTrace.cpp:349: StackTrace::tryCapture()\r\n2024.08.15 07:04:51.810666 [ 674868 ] {} <Fatal> ClientBase: 0. src/Common/StackTrace.cpp:318: StackTrace::StackTrace(ucontext_t const&) @ 0x000000001613c06d\r\n2024.08.15 07:04:51.903647 [ 674868 ] {} <Fatal> ClientBase: 1. src/Common/SignalHandlers.cpp:0: signalHandler(int, siginfo_t*, void*) @ 0x00000000166665b0\r\n2024.08.15 07:04:51.903703 [ 674868 ] {} <Fatal> ClientBase: 2. ? @ 0x0000730f80a45320\r\n2024.08.15 07:04:51.903725 [ 674868 ] {} <Fatal> ClientBase: 3. ? @ 0x0000730f80a9eb1d\r\n2024.08.15 07:04:51.903742 [ 674868 ] {} <Fatal> ClientBase: 4. ? @ 0x0000730f80a4526e\r\n2024.08.15 07:04:51.903766 [ 674868 ] {} <Fatal> ClientBase: 5. ? @ 0x0000730f80a288ff\r\n2024.08.15 07:04:51.982030 [ 674868 ] {} <Fatal> ClientBase: 6.0. inlined from contrib/llvm-project/libcxx/include/atomic:958: int std::__cxx_atomic_load[abi:v15007]<int>(std::__cxx_atomic_base_impl<int> const*, std::memory_order)\r\n2024.08.15 07:04:51.982093 [ 674868 ] {} <Fatal> ClientBase: 6.1. inlined from contrib/llvm-project/libcxx/include/atomic:1560: std::__atomic_base<int, false>::load[abi:v15007](std::memory_order) const\r\n2024.08.15 07:04:51.982131 [ 674868 ] {} <Fatal> ClientBase: 6.2. inlined from contrib/llvm-project/libcxx/include/atomic:1564: std::__atomic_base<int, false>::operator int[abi:v15007]() const\r\n2024.08.15 07:04:51.982168 [ 674868 ] {} <Fatal> ClientBase: 6.3. inlined from base/poco/Foundation/include/Poco/Logger.h:2354: Poco::Logger::is(int) const\r\n2024.08.15 07:04:51.982199 [ 674868 ] {} <Fatal> ClientBase: 6. src/Common/Exception.cpp:47: DB::abortOnFailedAssertion(String const&, void* const*, unsigned long, unsigned long) @ 0x00000000160dd428\r\n2024.08.15 07:04:52.053995 [ 674868 ] {} <Fatal> ClientBase: 7. src/Common/Exception.cpp:111: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000000160dec3f\r\n2024.08.15 07:04:52.090806 [ 674868 ] {} <Fatal> ClientBase: 8.0. inlined from contrib/llvm-project/libcxx/include/string:1499: String::__is_long[abi:v15007]() const\r\n2024.08.15 07:04:52.090869 [ 674868 ] {} <Fatal> ClientBase: 8.1. inlined from contrib/llvm-project/libcxx/include/string:2333: ~basic_string\r\n2024.08.15 07:04:52.090898 [ 674868 ] {} <Fatal> ClientBase: 8.2. inlined from src/Common/Exception.h:98: ~MessageMasked\r\n2024.08.15 07:04:52.090922 [ 674868 ] {} <Fatal> ClientBase: 8.3. inlined from src/Common/Exception.h:110: Exception\r\n2024.08.15 07:04:52.090953 [ 674868 ] {} <Fatal> ClientBase: 8. src/Common/Exception.h:63: DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000006baed26\r\n2024.08.15 07:04:52.133485 [ 674868 ] {} <Fatal> ClientBase: 9.0. inlined from src/Common/LoggingFormatStringHelpers.h:45: ~PreformattedMessage\r\n2024.08.15 07:04:52.133541 [ 674868 ] {} <Fatal> ClientBase: 9. src/Common/Exception.h:128: DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000006bb6f4f\r\n2024.08.15 07:04:52.229425 [ 674868 ] {} <Fatal> ClientBase: 10. src/Processors/Formats/Impl/ConstantExpressionTemplate.cpp:330: DB::ConstantExpressionTemplate::TemplateStructure::TemplateStructure(std::vector<DB::LiteralInfo, std::allocator<DB::LiteralInfo>>&, DB::TokenIterator, DB::TokenIterator, std::shared_ptr<DB::IAST>&, DB::IDataType const&, bool, std::shared_ptr<DB::Context const>) @ 0x000000002624adf9\r\n2024.08.15 07:04:52.331375 [ 674868 ] {} <Fatal> ClientBase: 11.0. inlined from contrib/llvm-project/libcxx/include/__memory/construct_at.h:35: DB::ConstantExpressionTemplate::TemplateStructure* std::construct_at[abi:v15007]<DB::ConstantExpressionTemplate::TemplateStructure, std::vector<DB::LiteralInfo, std::allocator<DB::LiteralInfo>>&, DB::TokenIterator&, DB::TokenIterator&, std::shared_ptr<DB::IAST>&, DB::IDataType const&, bool&, std::shared_ptr<DB::Context const>&, DB::ConstantExpressionTemplate::TemplateStructure*>(DB::ConstantExpressionTemplate::TemplateStructure*, std::vector<DB::LiteralInfo, std::allocator<DB::LiteralInfo>>&, DB::TokenIterator&, DB::TokenIterator&, std::shared_ptr<DB::IAST>&, DB::IDataType const&, bool&, std::shared_ptr<DB::Context const>&)\r\n2024.08.15 07:04:52.331493 [ 674868 ] {} <Fatal> ClientBase: 11.1. inlined from contrib/llvm-project/libcxx/include/__memory/allocator_traits.h:298: void std::allocator_traits<std::allocator<DB::ConstantExpressionTemplate::TemplateStructure>>::construct[abi:v15007]<DB::ConstantExpressionTemplate::TemplateStructure, std::vector<DB::LiteralInfo, std::allocator<DB::LiteralInfo>>&, DB::TokenIterator&, DB::TokenIterator&, std::shared_ptr<DB::IAST>&, DB::IDataType const&, bool&, std::shared_ptr<DB::Context const>&, void, void>(std::allocator<DB::ConstantExpressionTemplate::TemplateStructure>&, DB::ConstantExpressionTemplate::TemplateStructure*, std::vector<DB::LiteralInfo, std::allocator<DB::LiteralInfo>>&, DB::TokenIterator&, DB::TokenIterator&, std::shared_ptr<DB::IAST>&, DB::IDataType const&, bool&, std::shared_ptr<DB::Context const>&)\r\n2024.08.15 07:04:52.331531 [ 674868 ] {} <Fatal> ClientBase: 11.2. inlined from contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:292: __shared_ptr_emplace<std::vector<DB::LiteralInfo, std::allocator<DB::LiteralInfo> > &, DB::TokenIterator &, DB::TokenIterator &, std::shared_ptr<DB::IAST> &, const DB::IDataType &, bool &, std::shared_ptr<const DB::Context> &>\r\n2024.08.15 07:04:52.331578 [ 674868 ] {} <Fatal> ClientBase: 11.3. inlined from contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:953: std::shared_ptr<DB::ConstantExpressionTemplate::TemplateStructure> std::allocate_shared[abi:v15007]<DB::ConstantExpressionTemplate::TemplateStructure, std::allocator<DB::ConstantExpressionTemplate::TemplateStructure>, std::vector<DB::LiteralInfo, std::allocator<DB::LiteralInfo>>&, DB::TokenIterator&, DB::TokenIterator&, std::shared_ptr<DB::IAST>&, DB::IDataType const&, bool&, std::shared_ptr<DB::Context const>&, void>(std::allocator<DB::ConstantExpressionTemplate::TemplateStructure> const&, std::vector<DB::LiteralInfo, std::allocator<DB::LiteralInfo>>&, DB::TokenIterator&, DB::TokenIterator&, std::shared_ptr<DB::IAST>&, DB::IDataType const&, bool&, std::shared_ptr<DB::Context const>&)\r\n2024.08.15 07:04:52.331631 [ 674868 ] {} <Fatal> ClientBase: 11.4. inlined from contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:962: std::shared_ptr<DB::ConstantExpressionTemplate::TemplateStructure> std::make_shared[abi:v15007]<DB::ConstantExpressionTemplate::TemplateStructure, std::vector<DB::LiteralInfo, std::allocator<DB::LiteralInfo>>&, DB::TokenIterator&, DB::TokenIterator&, std::shared_ptr<DB::IAST>&, DB::IDataType const&, bool&, std::shared_ptr<DB::Context const>&, void>(std::vector<DB::LiteralInfo, std::allocator<DB::LiteralInfo>>&, DB::TokenIterator&, DB::TokenIterator&, std::shared_ptr<DB::IAST>&, DB::IDataType const&, bool&, std::shared_ptr<DB::Context const>&)\r\n2024.08.15 07:04:52.331667 [ 674868 ] {} <Fatal> ClientBase: 11. src/Processors/Formats/Impl/ConstantExpressionTemplate.cpp:440: DB::ConstantExpressionTemplate::Cache::getFromCacheOrConstruct(std::shared_ptr<DB::IDataType const> const&, bool, DB::TokenIterator, DB::TokenIterator, std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool*, String const&) @ 0x000000002624f09e\r\n2024.08.15 07:04:52.423844 [ 674868 ] {} <Fatal> ClientBase: 12. src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp:486: DB::ValuesBlockInputFormat::parseExpression(DB::IColumn&, unsigned long) @ 0x0000000026240c90\r\n2024.08.15 07:04:52.512263 [ 674868 ] {} <Fatal> ClientBase: 13.0. inlined from src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp:0: DB::ValuesBlockInputFormat::tryReadValue(DB::IColumn&, unsigned long)\r\n2024.08.15 07:04:52.512341 [ 674868 ] {} <Fatal> ClientBase: 13. src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp:229: DB::ValuesBlockInputFormat::readRow(std::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn>>>&, unsigned long) @ 0x000000002623cebd\r\n2024.08.15 07:04:52.599720 [ 674868 ] {} <Fatal> ClientBase: 14. src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp:0: DB::ValuesBlockInputFormat::read() @ 0x000000002623a9b1\r\n2024.08.15 07:04:52.637251 [ 674868 ] {} <Fatal> ClientBase: 15. src/Processors/Formats/IInputFormat.cpp:19: DB::IInputFormat::generate() @ 0x000000002608a606\r\n2024.08.15 07:04:52.674887 [ 674868 ] {} <Fatal> ClientBase: 16.0. inlined from src/Processors/Chunk.h:110: DB::Chunk::hasRows() const\r\n2024.08.15 07:04:52.674948 [ 674868 ] {} <Fatal> ClientBase: 16.1. inlined from src/Processors/Chunk.h:112: DB::Chunk::empty() const\r\n2024.08.15 07:04:52.674975 [ 674868 ] {} <Fatal> ClientBase: 16.2. inlined from src/Processors/Chunk.h:113: DB::Chunk::operator bool() const\r\n2024.08.15 07:04:52.675005 [ 674868 ] {} <Fatal> ClientBase: 16. src/Processors/ISource.cpp:140: DB::ISource::tryGenerate() @ 0x000000002603807a\r\n2024.08.15 07:04:52.711074 [ 674868 ] {} <Fatal> ClientBase: 17.0. inlined from contrib/llvm-project/libcxx/include/optional:344: std::__optional_storage_base<DB::Chunk, false>::has_value[abi:v15007]() const\r\n2024.08.15 07:04:52.711141 [ 674868 ] {} <Fatal> ClientBase: 17.1. inlined from contrib/llvm-project/libcxx/include/optional:998: std::optional<DB::Chunk>::operator bool[abi:v15007]() const\r\n2024.08.15 07:04:52.711175 [ 674868 ] {} <Fatal> ClientBase: 17. src/Processors/ISource.cpp:108: DB::ISource::work() @ 0x0000000026037683\r\n2024.08.15 07:04:52.729477 [ 674868 ] {} <Fatal> ClientBase: 18.0. inlined from src/Processors/Executors/ExecutionThreadContext.cpp:0: DB::executeJob(DB::ExecutingGraph::Node*, DB::ReadProgressCallback*)\r\n2024.08.15 07:04:52.729547 [ 674868 ] {} <Fatal> ClientBase: 18. src/Processors/Executors/ExecutionThreadContext.cpp:96: DB::ExecutionThreadContext::executeTask() @ 0x000000002607422e\r\n2024.08.15 07:04:52.786325 [ 674868 ] {} <Fatal> ClientBase: 19. src/Processors/Executors/PipelineExecutor.cpp:273: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000026059cd1\r\n2024.08.15 07:04:52.840888 [ 674868 ] {} <Fatal> ClientBase: 20.0. inlined from contrib/llvm-project/libcxx/include/vector:547: std::vector<std::unique_ptr<DB::ExecutionThreadContext, std::default_delete<DB::ExecutionThreadContext>>, std::allocator<std::unique_ptr<DB::ExecutionThreadContext, std::default_delete<DB::ExecutionThreadContext>>>>::size[abi:v15007]() const\r\n2024.08.15 07:04:52.840962 [ 674868 ] {} <Fatal> ClientBase: 20.1. inlined from contrib/llvm-project/libcxx/include/vector:1490: std::vector<std::unique_ptr<DB::ExecutionThreadContext, std::default_delete<DB::ExecutionThreadContext>>, std::allocator<std::unique_ptr<DB::ExecutionThreadContext, std::default_delete<DB::ExecutionThreadContext>>>>::operator[][abi:v15007](unsigned long)\r\n2024.08.15 07:04:52.840995 [ 674868 ] {} <Fatal> ClientBase: 20.2. inlined from src/Processors/Executors/ExecutorTasks.h:70: DB::ExecutorTasks::getThreadContext(unsigned long)\r\n2024.08.15 07:04:52.841023 [ 674868 ] {} <Fatal> ClientBase: 20. src/Processors/Executors/PipelineExecutor.cpp:242: DB::PipelineExecutor::executeSingleThread(unsigned long) @ 0x000000002605a68a\r\n2024.08.15 07:04:52.888743 [ 674868 ] {} <Fatal> ClientBase: 21.0. inlined from contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:701: ~shared_ptr\r\n2024.08.15 07:04:52.888806 [ 674868 ] {} <Fatal> ClientBase: 21. src/Processors/Executors/PipelineExecutor.cpp:412: DB::PipelineExecutor::executeImpl(unsigned long, bool) @ 0x000000002605781b\r\n2024.08.15 07:04:52.941225 [ 674868 ] {} <Fatal> ClientBase: 22.0. inlined from contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:274: std::unique_ptr<DB::ExecutingGraph, std::default_delete<DB::ExecutingGraph>>::operator->[abi:v15007]() const\r\n2024.08.15 07:04:52.941307 [ 674868 ] {} <Fatal> ClientBase: 22. src/Processors/Executors/PipelineExecutor.cpp:114: DB::PipelineExecutor::execute(unsigned long, bool) @ 0x0000000026056beb\r\n2024.08.15 07:04:52.987416 [ 674868 ] {} <Fatal> ClientBase: 23.0. inlined from src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:94: DB::threadFunction(DB::PullingAsyncPipelineExecutor::Data&, std::shared_ptr<DB::ThreadGroup>, unsigned long, bool)\r\n2024.08.15 07:04:52.987479 [ 674868 ] {} <Fatal> ClientBase: 23.1. inlined from src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:109: operator()\r\n2024.08.15 07:04:52.987509 [ 674868 ] {} <Fatal> ClientBase: 23.2. inlined from contrib/llvm-project/libcxx/include/__functional/invoke.h:394: ?\r\n2024.08.15 07:04:52.987542 [ 674868 ] {} <Fatal> ClientBase: 23.3. inlined from contrib/llvm-project/libcxx/include/tuple:1789: _ZNSt3__118__apply_tuple_implB6v15007IRZN2DB28PullingAsyncPipelineExecutor4pullERNS1_5ChunkEmE3$_0RNS_5tupleIJEEETpTnmJEEEDcOT_OT0_NS_15__tuple_indicesIJXspT1_EEEE\r\n2024.08.15 07:04:52.987584 [ 674868 ] {} <Fatal> ClientBase: 23.4. inlined from contrib/llvm-project/libcxx/include/tuple:1798: decltype(auto) std::apply[abi:v15007]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&)\r\n2024.08.15 07:04:52.987611 [ 674868 ] {} <Fatal> ClientBase: 23.5. inlined from src/Common/ThreadPool.h:251: operator()\r\n2024.08.15 07:04:52.987633 [ 674868 ] {} <Fatal> ClientBase: 23.6. inlined from contrib/llvm-project/libcxx/include/__functional/invoke.h:394: ?\r\n2024.08.15 07:04:52.987652 [ 674868 ] {} <Fatal> ClientBase: 23.7. inlined from contrib/llvm-project/libcxx/include/__functional/invoke.h:479: ?\r\n2024.08.15 07:04:52.987675 [ 674868 ] {} <Fatal> ClientBase: 23.8. inlined from contrib/llvm-project/libcxx/include/__functional/function.h:235: ?\r\n2024.08.15 07:04:52.987703 [ 674868 ] {} <Fatal> ClientBase: 23. contrib/llvm-project/libcxx/include/__functional/function.h:716: ? @ 0x000000002607c11d\r\n2024.08.15 07:04:53.055157 [ 674868 ] {} <Fatal> ClientBase: 24. contrib/llvm-project/libcxx/include/__functional/function.h:0: ? @ 0x0000000016255500\r\n2024.08.15 07:04:53.190269 [ 674868 ] {} <Fatal> ClientBase: 25.0. inlined from contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:302: std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>, std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>>>::reset[abi:v15007](std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>*)\r\n2024.08.15 07:04:53.190387 [ 674868 ] {} <Fatal> ClientBase: 25.1. inlined from contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:259: ~unique_ptr\r\n2024.08.15 07:04:53.190438 [ 674868 ] {} <Fatal> ClientBase: 25. contrib/llvm-project/libcxx/include/thread:297: void* std::__thread_proxy[abi:v15007]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>>(void*) @ 0x000000001625f6cd\r\n2024.08.15 07:04:53.279407 [ 674868 ] {} <Fatal> ClientBase: 26. asan_thread_start(void*) @ 0x0000000006b63bcd\r\n2024.08.15 07:04:53.279462 [ 674868 ] {} <Fatal> ClientBase: 27. ? @ 0x0000730f80a9ca94\r\n2024.08.15 07:04:53.279481 [ 674868 ] {} <Fatal> ClientBase: 28. ? @ 0x0000730f80b29c3c\r\n2024.08.15 07:04:53.279505 [ 674868 ] {} <Fatal> ClientBase: This ClickHouse version is not official and should be upgraded to the official build.\r\n2024.08.15 07:04:53.279707 [ 674868 ] {} <Fatal> ClientBase: Changed settings: allow_introspection_functions = true, storage_file_read_method = 'mmap'\r\nAborted (core dumped)\r\n```\r\n\nInsertion into distributed table causes null pointer dereference\n**Describe what's wrong**\r\nInsertion into distributed table causes Segmentation fault\r\n\r\n**How to reproduce**\r\n\r\n* Which ClickHouse server version to use: `24.9.1.1(master)` \r\n* Which interface to use, if it matters: `MySQL Shell`\r\n* Non-default settings, if any: \r\n```xml\r\n            <distributed_product_mode>allow</distributed_product_mode>\r\n            <allow_experimental_parallel_reading_from_replicas>1</allow_experimental_parallel_reading_from_replicas>\r\n            <allow_experimental_inverted_index>1</allow_experimental_inverted_index>\r\n            <allow_experimental_full_text_index>1</allow_experimental_full_text_index>\r\n            <allow_experimental_join_condition>1</allow_experimental_join_condition>\r\n            <allow_experimental_query_deduplication>1</allow_experimental_query_deduplication>\r\n```\r\n\r\n* init database:\r\n```sql\r\ncreate database ch_main on cluster default;\r\nuse ch_main;\r\n\r\ncreate table __t_xl_fnvymkf on cluster default ( \r\n  c_nub94w6u9w Int32 not null primary key ,\r\n  c_jw7hcyn String ,\r\n  c_brqj String ,\r\n  );\r\ncreate table t_xl_fnvymkf on cluster default as __t_xl_fnvymkf ENGINE = Distributed(default, ch_main, __t_xl_fnvymkf, c_nub94w6u9w);\r\nalter table t_xl_fnvymkf on cluster default add column c_ytwx1 String;\r\n\r\n```\r\n\r\n* Queries to run that lead to an unexpected result\r\n```sql\r\ninsert into t_xl_fnvymkf (c_nub94w6u9w, c_jw7hcyn, c_brqj, c_ytwx1) values \r\n(615861137, 'fh', coalesce(case when (-944061992 between bitAnd(\r\n      855604989, \r\n      502112092) and byteSwap(\r\n      -1)) then 'edicnr' else left(\r\n    'w9jcahwi', \r\n    -12649) end\r\n  , 'q'), coalesce(case when (cast((cast(null as Nullable(Decimal)) >= (-1718188560 is NULL)) as Nullable(Bool))) then 'kgxz4v8pn' else left(\r\n    'tep', \r\n    17323) end\r\n  , 'mz3y'));\r\n```\r\n\r\nclickhouse log:\r\n```\r\n2024.09.21 09:20:59.995377 [ 728 ] {} <Fatal> BaseDaemon: This ClickHouse version is not official and should be upgraded to the official build.\r\n2024.09.21 09:20:59.995660 [ 728 ] {} <Fatal> BaseDaemon: Changed settings: use_uncompressed_cache = false, load_balancing = 'in_order', log_queries = true, distributed_product_mode = 'allow', prefer_column_name_to_alias = true, max_memory_usage = 20000000000, allow_experimental_parallel_reading_from_replicas = 1, allow_experimental_inverted_index = true, allow_experimental_full_text_index = true, allow_experimental_join_condition = true, allow_experimental_query_deduplication = true, SQL_AUTO_IS_NULL = 0\r\n2024.09.21 09:20:59.997386 [ 710 ] {} <Debug> SystemLog (system.crash_log): Will use existing table system.crash_log for CrashLog\r\n2024.09.21 09:21:00.120355 [ 617 ] {ba127fdf-c689-4323-b55d-1348fcc7e64b::202409_1_206_41} <Debug> MergeTask::MergeProjectionsStage: Merge sorted 1614 rows, containing 1021 columns (1021 merged, 0 gathered) in 0.72681494 sec., 2220.647803414718 rows/sec., 2.24 MiB/sec.\r\n2024.09.21 09:21:00.243042 [ 617 ] {} <Debug> MemoryTracker: Peak memory usage background process to apply mutate/merge in table: 39.17 MiB.\r\n2024.09.21 09:21:02.299599 [ 650 ] {} <Debug> system.asynchronous_metric_log (9e545725-586c-4a40-8370-840789b05a08): Removing 1 parts from filesystem (serially): Parts: [202409_177_177_0]\r\n2024.09.21 09:21:02.300475 [ 650 ] {} <Debug> system.asynchronous_metric_log (9e545725-586c-4a40-8370-840789b05a08): Removing 1 parts from memory: Parts: [202409_177_177_0]\r\n2024.09.21 09:21:03.501486 [ 729 ] {} <Fatal> BaseDaemon: ########## Short fault info ############\r\n2024.09.21 09:21:03.501598 [ 729 ] {} <Fatal> BaseDaemon: (version 24.9.1.1, build id: C7425E0147740F55AC78B65BDBF9A1A2C42554A5, git hash: f7ca119b397c533f521fa2b20a9112b0a8944afb, architecture: x86_64) (from thread 40) Received signal 11\r\n2024.09.21 09:21:03.501655 [ 729 ] {} <Fatal> BaseDaemon: Signal description: Segmentation fault\r\n2024.09.21 09:21:03.501704 [ 729 ] {} <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Unknown si_code.\r\n2024.09.21 09:21:03.501754 [ 729 ] {} <Fatal> BaseDaemon: Stack trace: 0x00005603a5f49d2d 0x00005603a64def74 0x00007ff02306c090 0x00007ff02304b942 0x00005603a5ee626b 0x00005603a5ee7d31 0x0000560396132045 0x000056039616ac8e 0x00005603b6fac24d 0x00005603b6fb462c 0x00005603b6fa1f14 0x00005603b6f9e8dd 0x00005603b6f9c671 0x00005603b6db7726 0x00005603b6d64b78 0x00005603b6d64001 0x00005603b6d9fdce 0x00005603b6d84f31 0x00005603b6d8387c 0x00005603b6d83362 0x00005603b6d8071f 0x00005603b3a62c47 0x00005603b6b9538a 0x00005603b6b8c91d 0x00005603b800252f 0x00005603b8003117 0x00005603b7f1624b 0x00005603b7f103a8 0x00005603960e7059 0x00007ff022eb5609 0x00007ff023148353\r\n2024.09.21 09:21:03.501794 [ 729 ] {} <Fatal> BaseDaemon: ########################################\r\n2024.09.21 09:21:03.501861 [ 729 ] {} <Fatal> BaseDaemon: (version 24.9.1.1, build id: C7425E0147740F55AC78B65BDBF9A1A2C42554A5, git hash: f7ca119b397c533f521fa2b20a9112b0a8944afb) (from thread 40) (query_id: mysql:11:27963b05-bff0-4312-8fe4-be8492a81ded) (query: insert into t_xl_fnvymkf (c_nub94w6u9w, c_jw7hcyn, c_brqj, c_ytwx1) values \r\n) Received signal Segmentation fault (11)\r\n2024.09.21 09:21:03.501919 [ 729 ] {} <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Unknown si_code.\r\n2024.09.21 09:21:03.501954 [ 729 ] {} <Fatal> BaseDaemon: Stack trace: 0x00005603a5f49d2d 0x00005603a64def74 0x00007ff02306c090 0x00007ff02304b942 0x00005603a5ee626b 0x00005603a5ee7d31 0x0000560396132045 0x000056039616ac8e 0x00005603b6fac24d 0x00005603b6fb462c 0x00005603b6fa1f14 0x00005603b6f9e8dd 0x00005603b6f9c671 0x00005603b6db7726 0x00005603b6d64b78 0x00005603b6d64001 0x00005603b6d9fdce 0x00005603b6d84f31 0x00005603b6d8387c 0x00005603b6d83362 0x00005603b6d8071f 0x00005603b3a62c47 0x00005603b6b9538a 0x00005603b6b8c91d 0x00005603b800252f 0x00005603b8003117 0x00005603b7f1624b 0x00005603b7f103a8 0x00005603960e7059 0x00007ff022eb5609 0x00007ff023148353\r\n2024.09.21 09:21:03.539053 [ 729 ] {} <Fatal> BaseDaemon: 0.0. inlined from ./build/./src/Common/StackTrace.cpp:380: StackTrace::tryCapture()\r\n2024.09.21 09:21:03.539118 [ 729 ] {} <Fatal> BaseDaemon: 0. ./build/./src/Common/StackTrace.cpp:349: StackTrace::StackTrace(ucontext_t const&) @ 0x00000000152fbd2d\r\n2024.09.21 09:21:03.581281 [ 729 ] {} <Fatal> BaseDaemon: 1. ./build/./src/Common/SignalHandlers.cpp:85: signalHandler(int, siginfo_t*, void*) @ 0x0000000015890f74\r\n2024.09.21 09:21:03.581334 [ 729 ] {} <Fatal> BaseDaemon: 2. ? @ 0x00007ff02306c090\r\n2024.09.21 09:21:03.581367 [ 729 ] {} <Fatal> BaseDaemon: 3. ? @ 0x00007ff02304b942\r\n2024.09.21 09:21:03.653695 [ 729 ] {} <Fatal> BaseDaemon: 4. ./build/./src/Common/Exception.cpp:48: DB::abortOnFailedAssertion(String const&, void* const*, unsigned long, unsigned long) @ 0x000000001529826b\r\n2024.09.21 09:21:03.719049 [ 729 ] {} <Fatal> BaseDaemon: 5.0. inlined from ./build/./src/Common/Exception.cpp:71: DB::handle_error_code(String const&, int, bool, std::vector<void*, std::allocator<void*>> const&)\r\n2024.09.21 09:21:03.719135 [ 729 ] {} <Fatal> BaseDaemon: 5. ./build/./src/Common/Exception.cpp:115: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x0000000015299d31\r\n2024.09.21 09:21:03.736717 [ 729 ] {} <Fatal> BaseDaemon: 6. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x00000000054e4045\r\n2024.09.21 09:21:03.754513 [ 729 ] {} <Fatal> BaseDaemon: 7. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x000000000551cc8e\r\n2024.09.21 09:21:03.841439 [ 729 ] {} <Fatal> BaseDaemon: 8. ./build/./src/Processors/Formats/Impl/ConstantExpressionTemplate.cpp:335: DB::ConstantExpressionTemplate::TemplateStructure::TemplateStructure(std::vector<DB::LiteralInfo, std::allocator<DB::LiteralInfo>>&, DB::TokenIterator, DB::TokenIterator, std::shared_ptr<DB::IAST>&, DB::IDataType const&, bool, std::shared_ptr<DB::Context const>) @ 0x000000002635e24d\r\n2024.09.21 09:21:03.941715 [ 729 ] {} <Fatal> BaseDaemon: 9.0. inlined from ./contrib/llvm-project/libcxx/include/__memory/construct_at.h:35: DB::ConstantExpressionTemplate::TemplateStructure* std::construct_at[abi:v15007]<DB::ConstantExpressionTemplate::TemplateStructure, std::vector<DB::LiteralInfo, std::allocator<DB::LiteralInfo>>&, DB::TokenIterator&, DB::TokenIterator&, std::shared_ptr<DB::IAST>&, DB::IDataType const&, bool&, std::shared_ptr<DB::Context const>&, DB::ConstantExpressionTemplate::TemplateStructure*>(DB::ConstantExpressionTemplate::TemplateStructure*, std::vector<DB::LiteralInfo, std::allocator<DB::LiteralInfo>>&, DB::TokenIterator&, DB::TokenIterator&, std::shared_ptr<DB::IAST>&, DB::IDataType const&, bool&, std::shared_ptr<DB::Context const>&)\r\n2024.09.21 09:21:03.941828 [ 729 ] {} <Fatal> BaseDaemon: 9.1. inlined from ./contrib/llvm-project/libcxx/include/__memory/allocator_traits.h:298: void std::allocator_traits<std::allocator<DB::ConstantExpressionTemplate::TemplateStructure>>::construct[abi:v15007]<DB::ConstantExpressionTemplate::TemplateStructure, std::vector<DB::LiteralInfo, std::allocator<DB::LiteralInfo>>&, DB::TokenIterator&, DB::TokenIterator&, std::shared_ptr<DB::IAST>&, DB::IDataType const&, bool&, std::shared_ptr<DB::Context const>&, void, void>(std::allocator<DB::ConstantExpressionTemplate::TemplateStructure>&, DB::ConstantExpressionTemplate::TemplateStructure*, std::vector<DB::LiteralInfo, std::allocator<DB::LiteralInfo>>&, DB::TokenIterator&, DB::TokenIterator&, std::shared_ptr<DB::IAST>&, DB::IDataType const&, bool&, std::shared_ptr<DB::Context const>&)\r\n2024.09.21 09:21:03.941883 [ 729 ] {} <Fatal> BaseDaemon: 9.2. inlined from ./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:292: __shared_ptr_emplace<std::vector<DB::LiteralInfo, std::allocator<DB::LiteralInfo> > &, DB::TokenIterator &, DB::TokenIterator &, std::shared_ptr<DB::IAST> &, const DB::IDataType &, bool &, std::shared_ptr<const DB::Context> &>\r\n2024.09.21 09:21:03.941945 [ 729 ] {} <Fatal> BaseDaemon: 9.3. inlined from ./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:953: std::shared_ptr<DB::ConstantExpressionTemplate::TemplateStructure> std::allocate_shared[abi:v15007]<DB::ConstantExpressionTemplate::TemplateStructure, std::allocator<DB::ConstantExpressionTemplate::TemplateStructure>, std::vector<DB::LiteralInfo, std::allocator<DB::LiteralInfo>>&, DB::TokenIterator&, DB::TokenIterator&, std::shared_ptr<DB::IAST>&, DB::IDataType const&, bool&, std::shared_ptr<DB::Context const>&, void>(std::allocator<DB::ConstantExpressionTemplate::TemplateStructure> const&, std::vector<DB::LiteralInfo, std::allocator<DB::LiteralInfo>>&, DB::TokenIterator&, DB::TokenIterator&, std::shared_ptr<DB::IAST>&, DB::IDataType const&, bool&, std::shared_ptr<DB::Context const>&)\r\n2024.09.21 09:21:03.942002 [ 729 ] {} <Fatal> BaseDaemon: 9.4. inlined from ./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:962: std::shared_ptr<DB::ConstantExpressionTemplate::TemplateStructure> std::make_shared[abi:v15007]<DB::ConstantExpressionTemplate::TemplateStructure, std::vector<DB::LiteralInfo, std::allocator<DB::LiteralInfo>>&, DB::TokenIterator&, DB::TokenIterator&, std::shared_ptr<DB::IAST>&, DB::IDataType const&, bool&, std::shared_ptr<DB::Context const>&, void>(std::vector<DB::LiteralInfo, std::allocator<DB::LiteralInfo>>&, DB::TokenIterator&, DB::TokenIterator&, std::shared_ptr<DB::IAST>&, DB::IDataType const&, bool&, std::shared_ptr<DB::Context const>&)\r\n2024.09.21 09:21:03.942046 [ 729 ] {} <Fatal> BaseDaemon: 9. ./build/./src/Processors/Formats/Impl/ConstantExpressionTemplate.cpp:445: DB::ConstantExpressionTemplate::Cache::getFromCacheOrConstruct(std::shared_ptr<DB::IDataType const> const&, bool, DB::TokenIterator, DB::TokenIterator, std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool*, String const&) @ 0x000000002636662c\r\n2024.09.21 09:21:04.026406 [ 729 ] {} <Fatal> BaseDaemon: 10. ./build/./src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp:495: DB::ValuesBlockInputFormat::parseExpression(DB::IColumn&, unsigned long) @ 0x0000000026353f14\r\n2024.09.21 09:21:04.040258 [ 648 ] {} <Debug> system.processors_profile_log (acedf2d4-c2d1-4ab0-b3c0-951a4e921961): Removing 1 parts from filesystem (serially): Parts: [202409_39_39_0]\r\n2024.09.21 09:21:04.041000 [ 648 ] {} <Debug> system.processors_profile_log (acedf2d4-c2d1-4ab0-b3c0-951a4e921961): Removing 1 parts from memory: Parts: [202409_39_39_0]\r\n2024.09.21 09:21:04.102645 [ 729 ] {} <Fatal> BaseDaemon: 11.0. inlined from ./build/./src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp:328: DB::ValuesBlockInputFormat::tryReadValue(DB::IColumn&, unsigned long)\r\n2024.09.21 09:21:04.102741 [ 729 ] {} <Fatal> BaseDaemon: 11. ./build/./src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp:237: DB::ValuesBlockInputFormat::readRow(std::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn>>>&, unsigned long) @ 0x00000000263508dd\r\n2024.09.21 09:21:04.179535 [ 729 ] {} <Fatal> BaseDaemon: 12. ./build/./src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp:128: DB::ValuesBlockInputFormat::read() @ 0x000000002634e671\r\n2024.09.21 09:21:04.212978 [ 729 ] {} <Fatal> BaseDaemon: 13. ./build/./src/Processors/Formats/IInputFormat.cpp:19: DB::IInputFormat::generate() @ 0x0000000026169726\r\n2024.09.21 09:21:04.244041 [ 729 ] {} <Fatal> BaseDaemon: 14. ./build/./src/Processors/ISource.cpp:139: DB::ISource::tryGenerate() @ 0x0000000026116b78\r\n2024.09.21 09:21:04.273833 [ 729 ] {} <Fatal> BaseDaemon: 15. ./build/./src/Processors/ISource.cpp:108: DB::ISource::work() @ 0x0000000026116001\r\n2024.09.21 09:21:04.286957 [ 729 ] {} <Fatal> BaseDaemon: 16.0. inlined from ./build/./src/Processors/Executors/ExecutionThreadContext.cpp:47: DB::executeJob(DB::ExecutingGraph::Node*, DB::ReadProgressCallback*)\r\n2024.09.21 09:21:04.287018 [ 729 ] {} <Fatal> BaseDaemon: 16. ./build/./src/Processors/Executors/ExecutionThreadContext.cpp:96: DB::ExecutionThreadContext::executeTask() @ 0x0000000026151dce\r\n2024.09.21 09:21:04.327282 [ 729 ] {} <Fatal> BaseDaemon: 17. ./build/./src/Processors/Executors/PipelineExecutor.cpp:288: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000026136f31\r\n2024.09.21 09:21:04.378625 [ 729 ] {} <Fatal> BaseDaemon: 18.0. inlined from ./build/./src/Processors/Executors/PipelineExecutor.cpp:254: DB::PipelineExecutor::executeSingleThread(unsigned long)\r\n2024.09.21 09:21:04.378697 [ 729 ] {} <Fatal> BaseDaemon: 18. ./build/./src/Processors/Executors/PipelineExecutor.cpp:429: DB::PipelineExecutor::executeImpl(unsigned long, bool) @ 0x000000002613587c\r\n2024.09.21 09:21:04.419744 [ 729 ] {} <Fatal> BaseDaemon: 19. ./build/./src/Processors/Executors/PipelineExecutor.cpp:125: DB::PipelineExecutor::execute(unsigned long, bool) @ 0x0000000026135362\r\n2024.09.21 09:21:04.432397 [ 729 ] {} <Fatal> BaseDaemon: 20. ./build/./src/Processors/Executors/CompletedPipelineExecutor.cpp:112: DB::CompletedPipelineExecutor::execute() @ 0x000000002613271f\r\n2024.09.21 09:21:04.588723 [ 648 ] {} <Debug> system.query_log (3a40562a-eb15-4055-8ece-969661d81390): Removing 1 parts from filesystem (serially): Parts: [202409_41_41_0]\r\n2024.09.21 09:21:04.589710 [ 648 ] {} <Debug> system.query_log (3a40562a-eb15-4055-8ece-969661d81390): Removing 1 parts from memory: Parts: [202409_41_41_0]\r\n2024.09.21 09:21:04.594023 [ 729 ] {} <Fatal> BaseDaemon: 21. ./build/./src/Interpreters/executeQuery.cpp:1717: DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>) @ 0x0000000022e14c47\r\n2024.09.21 09:21:04.634939 [ 729 ] {} <Fatal> BaseDaemon: 22. ./build/./src/Server/MySQLHandler.cpp:530: DB::MySQLHandler::comQuery(DB::ReadBuffer&, bool) @ 0x0000000025f4738a\r\n2024.09.21 09:21:04.681732 [ 729 ] {} <Fatal> BaseDaemon: 23. ./build/./src/Server/MySQLHandler.cpp:295: DB::MySQLHandler::run() @ 0x0000000025f3e91d\r\n2024.09.21 09:21:04.685310 [ 729 ] {} <Fatal> BaseDaemon: 24. ./build/./base/poco/Net/src/TCPServerConnection.cpp:43: Poco::Net::TCPServerConnection::start() @ 0x00000000273b452f\r\n2024.09.21 09:21:04.692148 [ 729 ] {} <Fatal> BaseDaemon: 25. ./build/./base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x00000000273b5117\r\n2024.09.21 09:21:04.701287 [ 729 ] {} <Fatal> BaseDaemon: 26. ./build/./base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x00000000272c824b\r\n2024.09.21 09:21:04.709329 [ 729 ] {} <Fatal> BaseDaemon: 27. ./base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x00000000272c23a8\r\n2024.09.21 09:21:04.726224 [ 729 ] {} <Fatal> BaseDaemon: 28. asan_thread_start(void*) @ 0x0000000005499059\r\n2024.09.21 09:21:04.726265 [ 729 ] {} <Fatal> BaseDaemon: 29. ? @ 0x00007ff022eb5609\r\n2024.09.21 09:21:04.726315 [ 729 ] {} <Fatal> BaseDaemon: 30. ? @ 0x00007ff023148353\r\n2024.09.21 09:21:04.726344 [ 729 ] {} <Fatal> BaseDaemon: Integrity check of the executable skipped because the reference checksum could not be read.\r\n```\r\n\r\n**Expected behavior**\r\nNo crash.\r\n\r\n**Additional context**\r\ndocker compose config:\r\n```\r\nversion: '3.8'\r\nservices:\r\n  clickhouse-01:\r\n    image: \"my_clickhouse:latest\"\r\n    user: \"101\"\r\n    container_name: clickhouse-01\r\n    hostname: clickhouse-01\r\n    networks:\r\n      cluster_2S_1R:\r\n        ipv4_address: 10.0.7.1\r\n    volumes:\r\n      - ${PWD}/fs/volumes/clickhouse-01/etc/clickhouse-server/config.d/config.xml:/etc/clickhouse-server/config.d/config.xml\r\n      - ${PWD}/fs/volumes/clickhouse-01/etc/clickhouse-server/users.d/users.xml:/etc/clickhouse-server/users.d/users.xml\r\n      - ${PWD}/fs/volumes/clickhouse-01/var/log/clickhouse-server:/var/log/clickhouse-server\r\n      - /var/cores\r\n    depends_on:\r\n      - clickhouse-keeper-01\r\n      - clickhouse-keeper-02\r\n      - clickhouse-keeper-03\r\n    # env for ASAN_OPTIONS\r\n    environment:\r\n      - ASAN_OPTIONS=detect_leaks=0:use_sigaltstack=false\r\n\r\n  clickhouse-02:\r\n    image: \"my_clickhouse:latest\"\r\n    user: \"101\"\r\n    container_name: clickhouse-02\r\n    hostname: clickhouse-02\r\n    networks:\r\n      cluster_2S_1R:\r\n        ipv4_address: 10.0.7.2\r\n    volumes:\r\n      - ${PWD}/fs/volumes/clickhouse-02/etc/clickhouse-server/config.d/config.xml:/etc/clickhouse-server/config.d/config.xml\r\n      - ${PWD}/fs/volumes/clickhouse-02/etc/clickhouse-server/users.d/users.xml:/etc/clickhouse-server/users.d/users.xml\r\n      - ${PWD}/fs/volumes/clickhouse-02/var/log/clickhouse-server:/var/log/clickhouse-server\r\n    depends_on:\r\n      - clickhouse-keeper-01\r\n      - clickhouse-keeper-02\r\n      - clickhouse-keeper-03\r\n    environment:\r\n      - ASAN_OPTIONS=detect_leaks=0:use_sigaltstack=false\r\n\r\n  clickhouse-keeper-01:\r\n    image: \"clickhouse/clickhouse-keeper:${CHKVER:-latest-alpine}\"\r\n    user: \"101\"\r\n    container_name: clickhouse-keeper-01\r\n    hostname: clickhouse-keeper-01\r\n    networks:\r\n      cluster_2S_1R:\r\n        ipv4_address: 10.0.7.5\r\n    volumes:\r\n      - ${PWD}/fs/volumes/clickhouse-keeper-01/etc/clickhouse-keeper/keeper_config.xml:/etc/clickhouse-keeper/keeper_config.xml\r\n      - ${PWD}/fs/volumes/clickhouse-keeper-01/var/log/clickhouse-keeper:/var/log/clickhouse-keeper\r\n    # caps for get_mempolicy\r\n    cap_add:\r\n      - SYS_NICE\r\n\r\n  clickhouse-keeper-02:\r\n    image: \"clickhouse/clickhouse-keeper:${CHKVER:-latest-alpine}\"\r\n    user: \"101\"\r\n    container_name: clickhouse-keeper-02\r\n    hostname: clickhouse-keeper-02\r\n    networks:\r\n      cluster_2S_1R:\r\n        ipv4_address: 10.0.7.6\r\n    volumes:\r\n      - ${PWD}/fs/volumes/clickhouse-keeper-02/etc/clickhouse-keeper/keeper_config.xml:/etc/clickhouse-keeper/keeper_config.xml\r\n    # caps for get_mempolicy\r\n    cap_add:\r\n      - SYS_NICE\r\n\r\n  clickhouse-keeper-03:\r\n    image: \"clickhouse/clickhouse-keeper:${CHKVER:-latest-alpine}\"\r\n    user: \"101\"\r\n    container_name: clickhouse-keeper-03\r\n    hostname: clickhouse-keeper-03\r\n    networks:\r\n      cluster_2S_1R:\r\n        ipv4_address: 10.0.7.7\r\n    volumes:\r\n      - ${PWD}/fs/volumes/clickhouse-keeper-03/etc/clickhouse-keeper/keeper_config.xml:/etc/clickhouse-keeper/keeper_config.xml\r\n    # caps for get_mempolicy\r\n    cap_add:\r\n      - SYS_NICE\r\n\r\nnetworks:\r\n  cluster_2S_1R:\r\n    driver: bridge\r\n    ipam:\r\n      config:\r\n        - subnet: 10.0.7.0/24\r\n          gateway: 10.0.7.254\r\n\r\n```\r\n\r\nthe my_clickhouse:latest is built by:\r\n```dockerfile\r\nFROM clickhouse/clickhouse-server:latest\r\n\r\n# replace\r\nCOPY ./clickhouse /usr/bin/clickhouse\r\n```\r\n\r\nand the binary is built by\r\n```\r\nCC=clang-18 CXX=clang++-18 \\\r\ncmake -B build -S . \\\r\n    -DCMAKE_BUILD_TYPE=RelWithDebInfo \\\r\n    -DENABLE_LIBRARIES=OFF \\\r\n    -DSANITIZE=address\r\n\r\ncd build\r\nninja clickhouse-server clickhouse-client\r\n```\r\n\r\nconfig.xml\r\n```xml\r\n<clickhouse replace=\"true\">\r\n    <logger>\r\n        <level>debug</level>\r\n        <log>/var/log/clickhouse-server/clickhouse-server.log</log>\r\n        <errorlog>/var/log/clickhouse-server/clickhouse-server.err.log</errorlog>\r\n        <size>1000M</size>\r\n        <count>3</count>\r\n    </logger>\r\n    <display_name>cluster_2S_1R node 1</display_name>\r\n    <listen_host>0.0.0.0</listen_host>\r\n    <http_port>8123</http_port>\r\n    <tcp_port>9000</tcp_port>\r\n    <mysql_port>9004</mysql_port>\r\n    <postgresql_port>9005</postgresql_port>\r\n    <user_directories>\r\n        <users_xml>\r\n            <path>users.xml</path>\r\n        </users_xml>\r\n        <local_directory>\r\n            <path>/var/lib/clickhouse/access/</path>\r\n        </local_directory>\r\n    </user_directories>\r\n    <distributed_ddl>\r\n        <path>/clickhouse/task_queue/ddl</path>\r\n    </distributed_ddl>\r\n    <remote_servers>\r\n        <default>\r\n            <shard>\r\n                <replica>\r\n                    <host>clickhouse-01</host>\r\n                    <port>9000</port>\r\n                </replica>\r\n            </shard>\r\n            <shard>\r\n                <replica>\r\n                    <host>clickhouse-02</host>\r\n                    <port>9000</port>\r\n                </replica>\r\n            </shard>\r\n        </default>\r\n    </remote_servers>\r\n    <send_crash_reports>\r\n        <enabled>true</enabled>\r\n    </send_crash_reports>\r\n    <zookeeper>\r\n        <node>\r\n            <host>clickhouse-keeper-01</host>\r\n            <port>9181</port>\r\n        </node>\r\n        <node>\r\n            <host>clickhouse-keeper-02</host>\r\n            <port>9181</port>\r\n        </node>\r\n        <node>\r\n            <host>clickhouse-keeper-03</host>\r\n            <port>9181</port>\r\n        </node>\r\n    </zookeeper>\r\n    <macros>\r\n        <shard>01</shard>\r\n        <replica>01</replica>\r\n    </macros>\r\n</clickhouse>\r\n\r\n```\r\nusers.xml\r\n```xml\r\n<?xml version=\"1.0\"?>\r\n<clickhouse replace=\"true\">\r\n    <profiles>\r\n        <default>\r\n            <max_memory_usage>20000000000</max_memory_usage>\r\n            <use_uncompressed_cache>0</use_uncompressed_cache>\r\n            <load_balancing>in_order</load_balancing>\r\n            <log_queries>1</log_queries>\r\n            <distributed_product_mode>allow</distributed_product_mode>\r\n            <allow_experimental_parallel_reading_from_replicas>1</allow_experimental_parallel_reading_from_replicas>\r\n            <allow_experimental_inverted_index>1</allow_experimental_inverted_index>\r\n            <allow_experimental_full_text_index>1</allow_experimental_full_text_index>\r\n            <allow_experimental_join_condition>1</allow_experimental_join_condition>\r\n            <allow_experimental_query_deduplication>1</allow_experimental_query_deduplication>\r\n        </default>\r\n    </profiles>\r\n    <users>\r\n        <default>\r\n            <access_management>1</access_management>\r\n            <profile>default</profile>\r\n            <networks>\r\n                <ip>::/0</ip>\r\n            </networks>\r\n            <password></password>\r\n            <quota>default</quota>\r\n            <access_management>1</access_management>\r\n            <named_collection_control>1</named_collection_control>\r\n            <show_named_collections>1</show_named_collections>\r\n            <show_named_collections_secrets>1</show_named_collections_secrets>\r\n        </default>\r\n    </users>\r\n    <quotas>\r\n        <default>\r\n            <interval>\r\n                <duration>3600</duration>\r\n                <queries>0</queries>\r\n                <errors>0</errors>\r\n                <result_rows>0</result_rows>\r\n                <read_rows>0</read_rows>\r\n                <execution_time>0</execution_time>\r\n            </interval>\r\n        </default>\r\n    </quotas>\r\n</clickhouse>\r\n\r\n```\r\n\r\n#### about us\r\nWe are the BASS team from the School of Cyber Science and Technology at Beihang University. Our main focus is on system software security, operating systems, and program analysis research, as well as the development of automated program testing frameworks for detecting software defects. Using our self-developed database vulnerability testing tool, we have identified the potential above-mentioned vulnerability that may lead to database error.\n",
  "hints_text": "I can still reproduce this issue on my setup. The logical error seems to come from the client side.\nBut with client from master it's not reproducable anymore.\r\n\r\nUPD: reproduced with debug build\nMinimum reproducible SQL:\r\n\r\n```sql\r\ncreate table my_table (\r\n  str1 String primary key,\r\n);\r\n\r\ninsert into my_table values\r\n(\r\ncase when\r\n  (0 between 1 and 2) then 'ok' else\r\n  'wat'\r\nend\r\n);\r\n```\r\n\r\n```\r\n2024.09.30 09:51:45.179422 [ 190883 ] {e4a2db90-e916-4428-9a57-cf95a639fe14} <Fatal> : Logical error: 'Cannot replace literals'.\r\n2024.09.30 09:51:45.255885 [ 190883 ] {e4a2db90-e916-4428-9a57-cf95a639fe14} <Fatal> : Stack trace (when copying this message, always include the lines below):\r\n\r\n0. ../contrib/llvm-project/libcxx/include/exception:141: Poco::Exception::Exception(String const&, int) @ 0x000000000ef7a112\r\n1. ./build/./src/Common/Exception.cpp:109: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000817e459\r\n2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000311218c\r\n3. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x0000000003114f2b\r\n4. ./build/./src/Processors/Formats/Impl/ConstantExpressionTemplate.cpp:344: DB::ConstantExpressionTemplate::TemplateStructure::TemplateStructure(std::vector<DB::LiteralInfo, std::allocator<DB::LiteralInfo>>&, DB::TokenIterator, DB::TokenIterator, std::shared_ptr<DB::IAST>&, DB::IDataType const&, bool, std::shared_ptr<DB::Context const>) @ 0x000000000e84241e\r\n5. ./contrib/llvm-project/libcxx/include/__memory/construct_at.h:35: DB::ConstantExpressionTemplate::Cache::getFromCacheOrConstruct(std::shared_ptr<DB::IDataType const> const&, bool, DB::TokenIterator, DB::TokenIterator, std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, bool*, String const&) @ 0x000000000e844209\r\n6. ./build/./src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp:495: DB::ValuesBlockInputFormat::parseExpression(DB::IColumn&, unsigned long) @ 0x000000000e83d8e3\r\n7. ./build/./src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp:328: DB::ValuesBlockInputFormat::readRow(std::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn>>>&, unsigned long) @ 0x000000000e83c1b6\r\n8. ./build/./src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp:128: DB::ValuesBlockInputFormat::read() @ 0x000000000e83b23e\r\n9. ./build/./src/Processors/Formats/IInputFormat.cpp:19: DB::IInputFormat::generate() @ 0x000000000e75f256\r\n10. ./build/./src/Processors/ISource.cpp:139: DB::ISource::tryGenerate() @ 0x000000000e73ddb7\r\n11. ./build/./src/Processors/ISource.cpp:108: DB::ISource::work() @ 0x000000000e73db87\r\n12. ./build/./src/Processors/Executors/ExecutionThreadContext.cpp:47: DB::ExecutionThreadContext::executeTask() @ 0x000000000e756a69\r\n13. ./build/./src/Processors/Executors/PipelineExecutor.cpp:288: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x000000000e74bf1d\r\n14. ./build/./src/Processors/Executors/PipelineExecutor.cpp:254: DB::PipelineExecutor::executeSingleThread(unsigned long) @ 0x000000000e74c1bd\r\n15. ./build/./src/Processors/Executors/PipelineExecutor.cpp:430: DB::PipelineExecutor::executeImpl(unsigned long, bool) @ 0x000000000e74aecc\r\n16. ./build/./src/Processors/Executors/PipelineExecutor.cpp:125: DB::PipelineExecutor::execute(unsigned long, bool) @ 0x000000000e74a8ef\r\n17. ./build/./src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:83: void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000e7598ea\r\n18. ./contrib/llvm-project/libcxx/include/__functional/function.h:848: ? @ 0x00000000082255f6\r\n19. ./build/./src/Common/ThreadPool.cpp:252: void* std::__thread_proxy[abi:v15007]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>>(void*) @ 0x000000000822a425\r\n20. ? @ 0x00007fc422094ac3\r\n21. ? @ 0x00007fc422126850\r\n```",
  "created_at": "2024-09-30T12:04:16Z",
  "modified_files": [
    "src/Processors/Formats/Impl/ConstantExpressionTemplate.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03246_range_literal_replacement_works.reference",
    "b/tests/queries/0_stateless/03246_range_literal_replacement_works.sql"
  ]
}