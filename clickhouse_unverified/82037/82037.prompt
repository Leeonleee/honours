You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Column identifier __table2.c1 is already registered
### Describe the bug

Logical error: 'Column identifier __table2.c1 is already registered'.

similar to #75511


### How to reproduce

```
CREATE TABLE t0 (c0 Int, c1 Int ALIAS 1) ENGINE = Memory;
CREATE TABLE t0__fuzz_42 (`c0` Array(Nullable(UInt32)), `c1` IPv4 ALIAS 1) ENGINE = Memory;
SELECT c0 FROM remote('localhost', currentDatabase(), 't0') AS tx INNER JOIN t0__fuzz_42 USING (c1);
```

### Error message and/or stacktrace

```
2025.04.23 06:07:04.907953 [ 148443 ] {4cca82ef-abd1-4ba8-8374-60af44ffab91} <Fatal> : Logical error: 'Column identifier __table2.c1 is already registered'.
2025.04.23 06:07:04.932770 [ 148443 ] {4cca82ef-abd1-4ba8-8374-60af44ffab91} <Fatal> : Stack trace (when copying this message, always include the lines below):

0. /home/ubuntu/ClickHouse-final/contrib/llvm-project/libcxx/include/__exception/exception.h:113: Poco::Exception::Exception(String const&, int) @ 0x000000001ab5d112
1. /home/ubuntu/ClickHouse-final/src/Common/Exception.cpp:108: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fc54779
2. /home/ubuntu/ClickHouse-final/src/Common/Exception.h:112: DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009f878ac
3. /home/ubuntu/ClickHouse-final/src/Common/Exception.h:130: DB::Exception::Exception<String&>(int, FormatStringHelperImpl<std::type_identity<String&>::type>, String&) @ 0x
0000000009f9cb4b
4. /home/ubuntu/ClickHouse-final/src/Planner/PlannerContext.cpp:39: DB::GlobalPlannerContext::createColumnIdentifier(DB::NameAndTypePair const&, std::shared_ptr<DB::IQueryT
reeNode> const&) @ 0x0000000013ef52cf
5. /home/ubuntu/ClickHouse-final/src/Planner/PlannerJoinTree.cpp:441: DB::buildJoinTreeQueryPlan(std::shared_ptr<DB::IQueryTreeNode> const&, DB::SelectQueryInfo const&, DB:
:SelectQueryOptions&, std::unordered_set<String, std::hash<String>, std::equal_to<String>, std::allocator<String>> const&, std::shared_ptr<DB::PlannerContext>&) @ 0x0000000014208610
6. /home/ubuntu/ClickHouse-final/src/Planner/Planner.cpp:1557: DB::Planner::buildPlanForQueryNode() @ 0x00000000141f100e                                                    7. /home/ubuntu/ClickHouse-final/src/Planner/Planner.cpp:1328: DB::Planner::buildQueryPlanIfNeeded() @ 0x00000000141ede52
8. /home/ubuntu/ClickHouse-final/src/Planner/Planner.cpp:248: DB::Planner::Planner(std::shared_ptr<DB::IQueryTreeNode> const&, DB::SelectQueryOptions&) @ 0x00000000141ecbbe9. /home/ubuntu/ClickHouse-final/src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:183: DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000148f2006
10. /home/ubuntu/ClickHouse-final/contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:634: std::__unique_if<DB::InterpreterSelectQueryAnalyzer>::__unique_single std::make_unique[abi:se190107]<DB::InterpreterSelectQueryAnalyzer, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context> const&, DB::SelectQueryOptions const&>(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context> const&, DB::SelectQueryOptions const&) @ 0x00000000148f4964
11. /home/ubuntu/ClickHouse-final/contrib/llvm-project/libcxx/include/__functional/function.h:716: ? @ 0x00000000148aa70b                                                   12. /home/ubuntu/ClickHouse-final/src/Interpreters/executeQuery.cpp:1447: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::Q
ueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x0000000014bbda2b
13. /home/ubuntu/ClickHouse-final/src/Interpreters/executeQuery.cpp:1707: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingS
tage::Enum) @ 0x0000000014bb8568
14. /home/ubuntu/ClickHouse-final/src/Client/LocalConnection.cpp:263: DB::LocalConnection::sendQuery(DB::ConnectionTimeouts const&, String const&, std::unordered_map<String
, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>> const&, String const&, unsigned long, DB::Settings const*, DB::ClientIn
fo const*, bool, std::vector<String, std::allocator<String>> const&, std::function<void (DB::Progress const&)>) @ 0x000000001679088f
15. /home/ubuntu/ClickHouse-final/src/Client/ClientBase.cpp:1254: DB::ClientBase::processOrdinaryQuery(String, std::shared_ptr<DB::IAST>) @ 0x0000000016730718
16. /home/ubuntu/ClickHouse-final/src/Client/ClientBase.cpp:2264: DB::ClientBase::processParsedSingleQuery(std::basic_string_view<char, std::char_traits<char>>, std::shared
_ptr<DB::IAST>, bool&, unsigned long) @ 0x000000001672eb5d
17. /home/ubuntu/ClickHouse-final/src/Client/ClientBase.cpp:2636: DB::ClientBase::executeMultiQuery(String const&) @ 0x0000000016739cd9
18. /home/ubuntu/ClickHouse-final/src/Client/ClientBase.cpp:2823: DB::ClientBase::processQueryText(String const&) @ 0x000000001673addb
19. /home/ubuntu/ClickHouse-final/src/Client/ClientBase.cpp:3378: DB::ClientBase::runInteractive() @ 0x000000001674226b
20. /home/ubuntu/ClickHouse-final/programs/local/LocalServer.cpp:0: DB::LocalServer::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000fecea66
21. /home/ubuntu/ClickHouse-final/base/poco/Util/src/Application.cpp:315: Poco::Util::Application::run() @ 0x000000001ac1fcc6
22. /home/ubuntu/ClickHouse-final/programs/local/LocalServer.cpp:1148: mainEntryClickHouseLocal(int, char**) @ 0x000000000fedb31c
23. /home/ubuntu/ClickHouse-final/programs/main.cpp:304: main @ 0x0000000009f7fcaa
24. ? @ 0x00007ffff7c29d90
25. ? @ 0x00007ffff7c29e40
26. _start @ 0x0000000009f7f02e
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
