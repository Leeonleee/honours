{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 82037,
  "instance_id": "ClickHouse__ClickHouse-82037",
  "issue_numbers": [
    "79448"
  ],
  "base_commit": "9ab50fa9eec36888d46b2ec742d0031e98948cea",
  "patch": "diff --git a/src/Planner/Utils.cpp b/src/Planner/Utils.cpp\nindex ef6b49bce93c..d5fa0fb574f7 100644\n--- a/src/Planner/Utils.cpp\n+++ b/src/Planner/Utils.cpp\n@@ -442,12 +442,12 @@ QueryTreeNodePtr replaceTableExpressionsWithDummyTables(\n         if (table_node || table_function_node)\n         {\n             const auto & storage_snapshot = table_node ? table_node->getStorageSnapshot() : table_function_node->getStorageSnapshot();\n-            auto get_column_options = GetColumnsOptions(GetColumnsOptions::All).withExtendedObjects().withVirtuals();\n             const auto & storage = storage_snapshot->storage;\n \n             auto storage_dummy = std::make_shared<StorageDummy>(\n                 storage.getStorageID(),\n-                ColumnsDescription(storage_snapshot->getColumns(get_column_options)),\n+                /// To preserve information about alias columns, column description must be extracted directly from storage metadata.\n+                storage_snapshot->metadata->getColumns(),\n                 storage_snapshot,\n                 storage.supportsReplication());\n \ndiff --git a/src/Planner/findParallelReplicasQuery.cpp b/src/Planner/findParallelReplicasQuery.cpp\nindex 710f56fa5493..9f2f486279ba 100644\n--- a/src/Planner/findParallelReplicasQuery.cpp\n+++ b/src/Planner/findParallelReplicasQuery.cpp\n@@ -152,12 +152,12 @@ class ReplaceTableNodeToDummyVisitor : public InDepthQueryTreeVisitorWithContext\n         if (table_node || table_function_node)\n         {\n             const auto & storage_snapshot = table_node ? table_node->getStorageSnapshot() : table_function_node->getStorageSnapshot();\n-            auto get_column_options = GetColumnsOptions(GetColumnsOptions::All).withExtendedObjects().withVirtuals();\n             const auto & storage = storage_snapshot->storage;\n \n             auto storage_dummy = std::make_shared<StorageDummy>(\n                 storage.getStorageID(),\n-                ColumnsDescription(storage_snapshot->getColumns(get_column_options)),\n+                /// To preserve information about alias columns, column description must be extracted directly from storage metadata.\n+                storage_snapshot->metadata->getColumns(),\n                 storage_snapshot,\n                 storage.supportsReplication());\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03538_analyzer_filter_analysis_alias_columns.reference b/tests/queries/0_stateless/03538_analyzer_filter_analysis_alias_columns.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/03538_analyzer_filter_analysis_alias_columns.sql b/tests/queries/0_stateless/03538_analyzer_filter_analysis_alias_columns.sql\nnew file mode 100644\nindex 000000000000..db4cf3adda8a\n--- /dev/null\n+++ b/tests/queries/0_stateless/03538_analyzer_filter_analysis_alias_columns.sql\n@@ -0,0 +1,19 @@\n+SET allow_experimental_analyzer = 1;\n+SET enable_parallel_replicas = 0;\n+\n+CREATE TABLE t0 (c0 Int, c1 Int ALIAS 1) ENGINE = Memory;\n+CREATE TABLE t0__fuzz_42 (`c0` Array(Nullable(UInt32)), `c1` IPv4 ALIAS 1) ENGINE = Memory;\n+SELECT c0 FROM remote('localhost', currentDatabase(), 't0') AS tx INNER JOIN t0__fuzz_42 USING (c1); -- { serverError NOT_IMPLEMENTED }\n+\n+DROP TABLE t0;\n+\n+CREATE TABLE t0 (c0 Int ALIAS 1, c1 Int) ENGINE = Memory;\n+SELECT 1 FROM (SELECT 1 AS c0 FROM t0, remote('localhost:9000', currentDatabase(), 't0') ty) tx JOIN t0 ON tx.c0 = t0.c0;\n+\n+(\n+    SELECT 1 x, x y FROM remote('localhost', currentDatabase(), t0) tx\n+)\n+UNION ALL\n+(\n+    SELECT 1, c0 FROM t0\n+);\n",
  "problem_statement": "Column identifier __table2.c1 is already registered\n### Describe the bug\n\nLogical error: 'Column identifier __table2.c1 is already registered'.\n\nsimilar to #75511\n\n\n### How to reproduce\n\n```\nCREATE TABLE t0 (c0 Int, c1 Int ALIAS 1) ENGINE = Memory;\nCREATE TABLE t0__fuzz_42 (`c0` Array(Nullable(UInt32)), `c1` IPv4 ALIAS 1) ENGINE = Memory;\nSELECT c0 FROM remote('localhost', currentDatabase(), 't0') AS tx INNER JOIN t0__fuzz_42 USING (c1);\n```\n\n### Error message and/or stacktrace\n\n```\n2025.04.23 06:07:04.907953 [ 148443 ] {4cca82ef-abd1-4ba8-8374-60af44ffab91} <Fatal> : Logical error: 'Column identifier __table2.c1 is already registered'.\n2025.04.23 06:07:04.932770 [ 148443 ] {4cca82ef-abd1-4ba8-8374-60af44ffab91} <Fatal> : Stack trace (when copying this message, always include the lines below):\n\n0. /home/ubuntu/ClickHouse-final/contrib/llvm-project/libcxx/include/__exception/exception.h:113: Poco::Exception::Exception(String const&, int) @ 0x000000001ab5d112\n1. /home/ubuntu/ClickHouse-final/src/Common/Exception.cpp:108: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fc54779\n2. /home/ubuntu/ClickHouse-final/src/Common/Exception.h:112: DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009f878ac\n3. /home/ubuntu/ClickHouse-final/src/Common/Exception.h:130: DB::Exception::Exception<String&>(int, FormatStringHelperImpl<std::type_identity<String&>::type>, String&) @ 0x\n0000000009f9cb4b\n4. /home/ubuntu/ClickHouse-final/src/Planner/PlannerContext.cpp:39: DB::GlobalPlannerContext::createColumnIdentifier(DB::NameAndTypePair const&, std::shared_ptr<DB::IQueryT\nreeNode> const&) @ 0x0000000013ef52cf\n5. /home/ubuntu/ClickHouse-final/src/Planner/PlannerJoinTree.cpp:441: DB::buildJoinTreeQueryPlan(std::shared_ptr<DB::IQueryTreeNode> const&, DB::SelectQueryInfo const&, DB:\n:SelectQueryOptions&, std::unordered_set<String, std::hash<String>, std::equal_to<String>, std::allocator<String>> const&, std::shared_ptr<DB::PlannerContext>&) @ 0x0000000014208610\n6. /home/ubuntu/ClickHouse-final/src/Planner/Planner.cpp:1557: DB::Planner::buildPlanForQueryNode() @ 0x00000000141f100e                                                    7. /home/ubuntu/ClickHouse-final/src/Planner/Planner.cpp:1328: DB::Planner::buildQueryPlanIfNeeded() @ 0x00000000141ede52\n8. /home/ubuntu/ClickHouse-final/src/Planner/Planner.cpp:248: DB::Planner::Planner(std::shared_ptr<DB::IQueryTreeNode> const&, DB::SelectQueryOptions&) @ 0x00000000141ecbbe9. /home/ubuntu/ClickHouse-final/src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:183: DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000148f2006\n10. /home/ubuntu/ClickHouse-final/contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:634: std::__unique_if<DB::InterpreterSelectQueryAnalyzer>::__unique_single std::make_unique[abi:se190107]<DB::InterpreterSelectQueryAnalyzer, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context> const&, DB::SelectQueryOptions const&>(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context> const&, DB::SelectQueryOptions const&) @ 0x00000000148f4964\n11. /home/ubuntu/ClickHouse-final/contrib/llvm-project/libcxx/include/__functional/function.h:716: ? @ 0x00000000148aa70b                                                   12. /home/ubuntu/ClickHouse-final/src/Interpreters/executeQuery.cpp:1447: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::Q\nueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x0000000014bbda2b\n13. /home/ubuntu/ClickHouse-final/src/Interpreters/executeQuery.cpp:1707: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingS\ntage::Enum) @ 0x0000000014bb8568\n14. /home/ubuntu/ClickHouse-final/src/Client/LocalConnection.cpp:263: DB::LocalConnection::sendQuery(DB::ConnectionTimeouts const&, String const&, std::unordered_map<String\n, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>> const&, String const&, unsigned long, DB::Settings const*, DB::ClientIn\nfo const*, bool, std::vector<String, std::allocator<String>> const&, std::function<void (DB::Progress const&)>) @ 0x000000001679088f\n15. /home/ubuntu/ClickHouse-final/src/Client/ClientBase.cpp:1254: DB::ClientBase::processOrdinaryQuery(String, std::shared_ptr<DB::IAST>) @ 0x0000000016730718\n16. /home/ubuntu/ClickHouse-final/src/Client/ClientBase.cpp:2264: DB::ClientBase::processParsedSingleQuery(std::basic_string_view<char, std::char_traits<char>>, std::shared\n_ptr<DB::IAST>, bool&, unsigned long) @ 0x000000001672eb5d\n17. /home/ubuntu/ClickHouse-final/src/Client/ClientBase.cpp:2636: DB::ClientBase::executeMultiQuery(String const&) @ 0x0000000016739cd9\n18. /home/ubuntu/ClickHouse-final/src/Client/ClientBase.cpp:2823: DB::ClientBase::processQueryText(String const&) @ 0x000000001673addb\n19. /home/ubuntu/ClickHouse-final/src/Client/ClientBase.cpp:3378: DB::ClientBase::runInteractive() @ 0x000000001674226b\n20. /home/ubuntu/ClickHouse-final/programs/local/LocalServer.cpp:0: DB::LocalServer::main(std::vector<String, std::allocator<String>> const&) @ 0x000000000fecea66\n21. /home/ubuntu/ClickHouse-final/base/poco/Util/src/Application.cpp:315: Poco::Util::Application::run() @ 0x000000001ac1fcc6\n22. /home/ubuntu/ClickHouse-final/programs/local/LocalServer.cpp:1148: mainEntryClickHouseLocal(int, char**) @ 0x000000000fedb31c\n23. /home/ubuntu/ClickHouse-final/programs/main.cpp:304: main @ 0x0000000009f7fcaa\n24. ? @ 0x00007ffff7c29d90\n25. ? @ 0x00007ffff7c29e40\n26. _start @ 0x0000000009f7f02e\n```\n",
  "hints_text": "This may be the same case I described in https://fiddle.clickhouse.com/093d8581-e4f1-4168-a170-b0c886da66d3 in a comment in https://github.com/ClickHouse/ClickHouse/issues/73142\nThe issue is related to the ALIAS columns with constant expressions.\n\nClickHouse must read at least one column from each table expression, and `prepareBuildQueryPlanForTableExpression` function is responsible for selecting the smallest column to read if needed. It checks if any physical columns are to be read here:\nhttps://github.com/ClickHouse/ClickHouse/blob/4523bce7ac0f570b1f24a95a69ee2f9d7598463a/src/Planner/PlannerJoinTree.cpp#L418\n\nThen an alias column is sometimes selected for some unknown reason here:\nhttps://github.com/ClickHouse/ClickHouse/blob/4523bce7ac0f570b1f24a95a69ee2f9d7598463a/src/Planner/PlannerJoinTree.cpp#L426\n\nAnd then the selected column is added to the global planner context without any checks, and it leads to an exception:\nhttps://github.com/ClickHouse/ClickHouse/blob/4523bce7ac0f570b1f24a95a69ee2f9d7598463a/src/Planner/PlannerJoinTree.cpp#L440-L443\nI suspect the problem is that the following line is expected to return only physical columns, but for `StorageMemory` it also returns alias columns.\nhttps://github.com/ClickHouse/ClickHouse/blob/4523bce7ac0f570b1f24a95a69ee2f9d7598463a/src/Planner/PlannerJoinTree.cpp#L229\nWith disabled analyzer it also produces error:\n```\nEmpty list of columns queried. There are columns: c1. (EMPTY_LIST_OF_COLUMNS_QUERIED)\n```\nIt turns out that the issue appears when `StorageDummy` is used. I don't understand why `StorageMemory` has been replaced by `StorageDummy`.\n> I don't understand why `StorageMemory` has been replaced by `StorageDummy`.\n\nBecause of `remote` ?",
  "created_at": "2025-06-17T13:53:08Z"
}