{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 63481,
  "instance_id": "ClickHouse__ClickHouse-63481",
  "issue_numbers": [
    "63341"
  ],
  "base_commit": "da365ef84d21115d95ce91b2ed36652e46733212",
  "patch": "diff --git a/src/Dictionaries/ExternalQueryBuilder.cpp b/src/Dictionaries/ExternalQueryBuilder.cpp\nindex 792c4e3e9074..a31301cd0f3b 100644\n--- a/src/Dictionaries/ExternalQueryBuilder.cpp\n+++ b/src/Dictionaries/ExternalQueryBuilder.cpp\n@@ -401,7 +401,7 @@ std::string ExternalQueryBuilder::composeLoadKeysQuery(\n         {\n             writeString(\"SELECT * FROM (\", out);\n             writeString(query, out);\n-            writeString(\") WHERE \", out);\n+            writeString(\") AS subquery WHERE \", out);\n             composeKeysCondition(key_columns, requested_rows, method, partition_key_prefix, out);\n             writeString(\";\", out);\n \n",
  "test_patch": "diff --git a/tests/integration/test_dictionaries_mysql/test.py b/tests/integration/test_dictionaries_mysql/test.py\nindex 360456b20460..332f4ca11bb9 100644\n--- a/tests/integration/test_dictionaries_mysql/test.py\n+++ b/tests/integration/test_dictionaries_mysql/test.py\n@@ -76,7 +76,7 @@ def test_mysql_dictionaries_custom_query_full_load(started_cluster):\n \n     query = instance.query\n     query(\n-        \"\"\"\n+        f\"\"\"\n     CREATE DICTIONARY test_dictionary_custom_query\n     (\n         id UInt64,\n@@ -95,12 +95,46 @@ def test_mysql_dictionaries_custom_query_full_load(started_cluster):\n     \"\"\"\n     )\n \n-    result = query(\"SELECT id, value_1, value_2 FROM test_dictionary_custom_query\")\n+    result = query(\n+        \"SELECT dictGetString('test_dictionary_custom_query', 'value_1', toUInt64(1))\"\n+    )\n+    assert result == \"Value_1\\n\"\n \n+    result = query(\"SELECT id, value_1, value_2 FROM test_dictionary_custom_query\")\n     assert result == \"1\\tValue_1\\tValue_2\\n\"\n \n     query(\"DROP DICTIONARY test_dictionary_custom_query;\")\n \n+    query(\n+        f\"\"\"\n+    CREATE DICTIONARY test_cache_dictionary_custom_query\n+    (\n+        id1 UInt64,\n+        id2 UInt64,\n+        value_concat String\n+    )\n+    PRIMARY KEY id1, id2\n+    LAYOUT(COMPLEX_KEY_CACHE(SIZE_IN_CELLS 10))\n+    SOURCE(MYSQL(\n+        HOST 'mysql80'\n+        PORT 3306\n+        USER 'root'\n+        PASSWORD 'clickhouse'\n+        QUERY 'SELECT id AS id1, id + 1 AS id2, CONCAT_WS(\" \", \"The\", value_1) AS value_concat FROM test.test_table_1'))\n+    LIFETIME(0)\n+    \"\"\"\n+    )\n+\n+    result = query(\n+        \"SELECT dictGetString('test_cache_dictionary_custom_query', 'value_concat', (1, 2))\"\n+    )\n+    assert result == \"The Value_1\\n\"\n+\n+    result = query(\"SELECT id1, value_concat FROM test_cache_dictionary_custom_query\")\n+    assert result == \"1\\tThe Value_1\\n\"\n+\n+    query(\"DROP DICTIONARY test_cache_dictionary_custom_query;\")\n+\n     execute_mysql_query(mysql_connection, \"DROP TABLE test.test_table_1;\")\n     execute_mysql_query(mysql_connection, \"DROP TABLE test.test_table_2;\")\n \n",
  "problem_statement": "Cached MySQL Dictionary tries to use derived table:  Code: 1000, e.code() = 1248 Every derived table must have its own alias\n**Describe what's wrong**\r\n\r\nThis may be a regression as it started happening when I upgraded from 23.8 to 24.3. **Cache dictionaries with a MySQL source fail on dictGet**. Hashed dictionaries on the same data source still work the same as before\r\n\r\n**Does it reproduce on the most recent release?**\r\n\r\nHappens on latest LTS release: 24.3.3.\r\nNot happening on 23.8.x.\r\n\r\n**How to reproduce**\r\n\r\n```clickhouse\r\nCREATE OR REPLACE DICTIONARY dict_monolith_user ON CLUSTER `analytics`\r\n(\r\n    tenantid     Int32,\r\n    id           String,\r\n    display_name String,\r\n    first_name   String,\r\n    last_name    String,\r\n    is_bot       UInt8,\r\n    suspeded_at  DateTime\r\n)\r\n    PRIMARY KEY tenantid, id\r\n    SOURCE (\r\n        MYSQL(\r\n                NAME monolith_mysql\r\n                query\r\n                'SELECT tenantid, id, COALESCE(NULLIF(CONCAT_WS(\" \", firstname, lastname),\"\"), name) as display_name, firstname as first_name, lastname as last_name, is_bot, suspended_at FROM `user`'\r\n        )\r\n        )\r\n    LAYOUT (COMPLEX_KEY_CACHE(SIZE_IN_CELLS 500000))\r\n    LIFETIME (3600);\r\n```\r\n\r\n```clickhouse\r\n SELECT dictGet('dict_monolith_user', 'display_name', (909, 'a'));\r\n```\r\n\r\n**Error message and/or stacktrace**\r\n\r\nError is:\r\n\r\n```\r\nCode: 510. DB::Exception: Update failed for dictionary 'default.dict_monolith_user (1d15a9c5-2251-43ca-8029-49267d9fdb95)': Code: 510. DB::Exception: Update failed for dictionary default.dict_monolith_user (1d15a9c5-2251-43ca-8029-49267d9fdb95) : Poco::Exception. Code: 1000, e.code() = 1248, mysqlxx::BadQuery: Every derived table must have its own alias while executing query: 'SELECT * FROM (SELECT tenantid, id, COALESCE(NULLIF(CONCAT_WS(\" \", firstname, lastname),\"\"), name) as display_name, firstname as first_name, lastname as last_name, is_bot, suspended_at FROM `user`) WHERE (`tenantid`=909 AND `id`='a');' (db-read-replica-1.development:3306),. (CACHE_DICTIONARY_UPDATE_FAIL) (version 24.3.3.102 (official build))\r\n```\r\n\r\nSeems like the dictionary tries to use a derived table style query without an alias.\n",
  "hints_text": "The original bug was found in a live environment, afterwards I tried some quick tests using TestContainers and I found the following:\r\nclickhouse-server:23.8 - works\r\nclickhouse-server:23.10 - works\r\nclickhouse-server:23.12 - Error above occurs \r\nclickhouse-server:24.1 - Error above occurs \r\nclickhouse-server:24.3 - Error above occurs \r\n\r\nMySQL image tag is `mysql:8.0`",
  "created_at": "2024-05-07T15:33:50Z"
}