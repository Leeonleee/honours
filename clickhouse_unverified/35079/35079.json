{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 35079,
  "instance_id": "ClickHouse__ClickHouse-35079",
  "issue_numbers": [
    "33798"
  ],
  "base_commit": "83de2f66d108c20c373505aa4b0e7ae25b2478f9",
  "patch": "diff --git a/src/Interpreters/RewriteFunctionToSubcolumnVisitor.cpp b/src/Interpreters/RewriteFunctionToSubcolumnVisitor.cpp\nindex 842f61cbdd2c..a34c81d52e20 100644\n--- a/src/Interpreters/RewriteFunctionToSubcolumnVisitor.cpp\n+++ b/src/Interpreters/RewriteFunctionToSubcolumnVisitor.cpp\n@@ -83,6 +83,7 @@ void RewriteFunctionToSubcolumnData::visit(ASTFunction & function, ASTPtr & ast)\n \n     const auto & column_type = columns.get(name_in_storage).type;\n     TypeIndex column_type_id = column_type->getTypeId();\n+    const auto & alias = function.tryGetAlias();\n \n     if (arguments.size() == 1)\n     {\n@@ -91,7 +92,10 @@ void RewriteFunctionToSubcolumnData::visit(ASTFunction & function, ASTPtr & ast)\n         {\n             const auto & [type_id, subcolumn_name, transformer] = it->second;\n             if (column_type_id == type_id)\n+            {\n                 ast = transformer(name_in_storage, subcolumn_name);\n+                ast->setAlias(alias);\n+            }\n         }\n     }\n     else\n@@ -116,6 +120,7 @@ void RewriteFunctionToSubcolumnData::visit(ASTFunction & function, ASTPtr & ast)\n                 return;\n \n             ast = transformToSubcolumn(name_in_storage, subcolumn_name);\n+            ast->setAlias(alias);\n         }\n         else\n         {\n@@ -124,7 +129,10 @@ void RewriteFunctionToSubcolumnData::visit(ASTFunction & function, ASTPtr & ast)\n             {\n                 const auto & [type_id, subcolumn_name, transformer] = it->second;\n                 if (column_type_id == type_id)\n+                {\n                     ast = transformer(name_in_storage, subcolumn_name, arguments[1]);\n+                    ast->setAlias(alias);\n+                }\n             }\n         }\n     }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02232_functions_to_subcolumns_alias.reference b/tests/queries/0_stateless/02232_functions_to_subcolumns_alias.reference\nnew file mode 100644\nindex 000000000000..f18e41e497e1\n--- /dev/null\n+++ b/tests/queries/0_stateless/02232_functions_to_subcolumns_alias.reference\n@@ -0,0 +1,8 @@\n+cnt\n+2\n+t0\tt0\n+100\t100\n+0\t0\n+hit\n+1\n+0\ndiff --git a/tests/queries/0_stateless/02232_functions_to_subcolumns_alias.sql b/tests/queries/0_stateless/02232_functions_to_subcolumns_alias.sql\nnew file mode 100644\nindex 000000000000..89383ed4ba3f\n--- /dev/null\n+++ b/tests/queries/0_stateless/02232_functions_to_subcolumns_alias.sql\n@@ -0,0 +1,10 @@\n+DROP TABLE IF EXISTS t_functions_to_subcolumns_alias;\n+\n+CREATE TABLE t_functions_to_subcolumns_alias (id UInt64, t Tuple(UInt64, String), m Map(String, UInt64)) ENGINE = Memory;\n+INSERT INTO t_functions_to_subcolumns_alias VALUES (1, (100, 'abc'), map('foo', 1, 'bar', 2)) (2, NULL, map());\n+\n+SELECT count(id) AS cnt FROM t_functions_to_subcolumns_alias FORMAT TSVWithNames;\n+SELECT tupleElement(t, 1) as t0, t0 FROM t_functions_to_subcolumns_alias FORMAT TSVWithNames;\n+SELECT mapContains(m, 'foo') AS hit FROM t_functions_to_subcolumns_alias FORMAT TSVWithNames;\n+\n+DROP TABLE t_functions_to_subcolumns_alias;\n",
  "problem_statement": "optimize_functions_to_subcolumns count(null_column) doesn't use alias for column name\n**Describe what's wrong**\r\n\r\nIn case of using `optimize_functions_to_subcolumns` ClickHouse doesn't use alias for column name.\r\n\r\n**How to reproduce**\r\n\r\nClickHouse 21.13\r\n\r\n```\r\nCREATE TABLE test\r\n(\r\n    `key` UInt32,\r\n    `value` Nullable(UInt32)\r\n)\r\nENGINE = MergeTree\r\nORDER BY key\r\n\r\nINSERT INTO test SELECT\r\n    number,\r\n    NULL\r\nFROM numbers(10000000);\r\n\r\n\r\nSELECT count(value) AS a\r\nFROM test\r\nSETTINGS optimize_functions_to_subcolumns = 0\r\n\r\n\u250c\u2500a\u2500\u2510\r\n\u2502 0 \u2502\r\n\u2514\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 0.028 sec. Processed 32.50 million rows, 162.52 MB (1.15 billion rows/s., 5.74 GB/s.)\r\n\r\nSELECT count(value) AS a\r\nFROM test\r\nSETTINGS optimize_functions_to_subcolumns = 1\r\n\r\n\u250c\u2500sum(not(value.null))\u2500\u2510\r\n\u2502                    0 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 0.032 sec. Processed 32.50 million rows, 32.50 MB (1.00 billion rows/s., 1.00 GB/s.)\r\n```\r\n\r\n**Expected behavior**\r\n\r\nClickHouse should use alias name.\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2022-03-06T04:05:28Z",
  "modified_files": [
    "src/Interpreters/RewriteFunctionToSubcolumnVisitor.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02232_functions_to_subcolumns_alias.reference",
    "b/tests/queries/0_stateless/02232_functions_to_subcolumns_alias.sql"
  ]
}