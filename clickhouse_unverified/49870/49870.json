{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 49870,
  "instance_id": "ClickHouse__ClickHouse-49870",
  "issue_numbers": [
    "23376"
  ],
  "base_commit": "f4c73e94d21c6de0b1af7da3c42c2db6bf97fc73",
  "patch": "diff --git a/docs/en/interfaces/cli.md b/docs/en/interfaces/cli.md\nindex 9bf4a4659624..6d5395d46e3e 100644\n--- a/docs/en/interfaces/cli.md\n+++ b/docs/en/interfaces/cli.md\n@@ -181,7 +181,7 @@ You can pass parameters to `clickhouse-client` (all parameters have a default va\n - `--queries-file` \u2013 file path with queries to execute. You must specify either `query` or `queries-file` option.\n - `--database, -d` \u2013 Select the current default database. Default value: the current database from the server settings (\u2018default\u2019 by default).\n - `--multiline, -m` \u2013 If specified, allow multiline queries (do not send the query on Enter).\n-- `--multiquery, -n` \u2013 If specified, allow processing multiple queries separated by semicolons.\n+- `--multiquery, -n` \u2013 If specified, multiple queries separated by semicolons can be listed after the `--query` option. For convenience, it is also possible to omit `--query` and pass the queries directly after `--multiquery`.\n - `--format, -f` \u2013 Use the specified default format to output the result.\n - `--vertical, -E` \u2013 If specified, use the [Vertical format](../interfaces/formats.md#vertical) by default to output the result. This is the same as `\u2013format=Vertical`. In this format, each value is printed on a separate line, which is helpful when displaying wide tables.\n - `--time, -t` \u2013 If specified, print the query execution time to \u2018stderr\u2019 in non-interactive mode.\ndiff --git a/docs/ru/interfaces/cli.md b/docs/ru/interfaces/cli.md\nindex 8a4ec0832420..4c22eae02071 100644\n--- a/docs/ru/interfaces/cli.md\n+++ b/docs/ru/interfaces/cli.md\n@@ -132,7 +132,7 @@ $ clickhouse-client --param_tbl=\"numbers\" --param_db=\"system\" --param_col=\"numbe\n -   `--queries-file` - \u043f\u0443\u0442\u044c \u043a \u0444\u0430\u0439\u043b\u0443 \u0441 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\u043c\u0438 \u0434\u043b\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u0443 \u0438\u0437 \u043e\u043f\u0446\u0438\u0439: `query` \u0438\u043b\u0438 `queries-file`.\n -   `--database, -d` \u2014 \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0443\u044e \u0411\u0414. \u0411\u0435\u0437 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0431\u0435\u0440\u0435\u0442\u0441\u044f \u0438\u0437 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0430 (\u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u2014 \u0411\u0414 \u2018default\u2019).\n -   `--multiline, -m` \u2014 \u0435\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u043e \u2014 \u0440\u0430\u0437\u0440\u0435\u0448\u0438\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b, \u043d\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u043f\u043e \u043d\u0430\u0436\u0430\u0442\u0438\u044e Enter.\n--   `--multiquery, -n` \u2014 \u0435\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u043e \u2014 \u0440\u0430\u0437\u0440\u0435\u0448\u0438\u0442\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0445 \u0442\u043e\u0447\u043a\u043e\u0439 \u0441 \u0437\u0430\u043f\u044f\u0442\u043e\u0439.\n+-   `--multiquery, -n` \u2014 \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u043e, \u0442\u043e \u043f\u043e\u0441\u043b\u0435 \u043e\u043f\u0446\u0438\u0438 `--query` \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u044b \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0442\u043e\u0447\u043a\u043e\u0439 \u0441 \u0437\u0430\u043f\u044f\u0442\u043e\u0439. \u0414\u043b\u044f \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430 \u043c\u043e\u0436\u043d\u043e \u0442\u0430\u043a\u0436\u0435 \u043e\u043f\u0443\u0441\u0442\u0438\u0442\u044c `--query` \u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0435\u043f\u043e\u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u043f\u043e\u0441\u043b\u0435 `--multiquery`.\n -   `--format, -f` \u2014 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0434\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430.\n -   `--vertical, -E` \u2014 \u0435\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u043e, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0444\u043e\u0440\u043c\u0430\u0442 [Vertical](../interfaces/formats.md#vertical) \u0434\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430. \u0422\u043e \u0436\u0435 \u0441\u0430\u043c\u043e\u0435, \u0447\u0442\u043e `\u2013format=Vertical`. \u0412 \u044d\u0442\u043e\u043c \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \u043a\u0430\u0436\u0434\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435, \u0447\u0442\u043e \u0443\u0434\u043e\u0431\u043d\u043e \u0434\u043b\u044f \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0448\u0438\u0440\u043e\u043a\u0438\u0445 \u0442\u0430\u0431\u043b\u0438\u0446.\n -   `--time, -t` \u2014 \u0435\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u043d\u043e, \u0432 \u043d\u0435\u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0432 \u043f\u043e\u0442\u043e\u043a \u2018stderr\u2019.\ndiff --git a/programs/client/Client.cpp b/programs/client/Client.cpp\nindex fb30f60a0b88..5870327c3b5c 100644\n--- a/programs/client/Client.cpp\n+++ b/programs/client/Client.cpp\n@@ -1181,7 +1181,7 @@ void Client::processOptions(const OptionsDescription & options_description,\n void Client::processConfig()\n {\n     /// Batch mode is enabled if one of the following is true:\n-    /// - -e (--query) command line option is present.\n+    /// - -q (--query) command line option is present.\n     ///   The value of the option is used as the text of query (or of multiple queries).\n     ///   If stdin is not a terminal, INSERT data for the first query is read from it.\n     /// - stdin is not a terminal. In this case queries are read from it.\n@@ -1381,6 +1381,13 @@ void Client::readArguments(\n                 allow_repeated_settings = true;\n             else if (arg == \"--allow_merge_tree_settings\")\n                 allow_merge_tree_settings = true;\n+            else if (arg == \"--multiquery\" && (arg_num + 1) < argc && !std::string_view(argv[arg_num + 1]).starts_with('-'))\n+            {\n+                /// Transform the abbreviated syntax '--multiquery <SQL>' into the full syntax '--multiquery -q <SQL>'\n+                ++arg_num;\n+                arg = argv[arg_num];\n+                addMultiquery(arg, common_arguments);\n+            }\n             else\n                 common_arguments.emplace_back(arg);\n         }\ndiff --git a/programs/local/LocalServer.cpp b/programs/local/LocalServer.cpp\nindex 8925f50fe973..e026f87279ad 100644\n--- a/programs/local/LocalServer.cpp\n+++ b/programs/local/LocalServer.cpp\n@@ -818,8 +818,16 @@ void LocalServer::readArguments(int argc, char ** argv, Arguments & common_argum\n {\n     for (int arg_num = 1; arg_num < argc; ++arg_num)\n     {\n-        const char * arg = argv[arg_num];\n-        common_arguments.emplace_back(arg);\n+        std::string_view arg = argv[arg_num];\n+        if (arg == \"--multiquery\" && (arg_num + 1) < argc && !std::string_view(argv[arg_num + 1]).starts_with('-'))\n+        {\n+            /// Transform the abbreviated syntax '--multiquery <SQL>' into the full syntax '--multiquery -q <SQL>'\n+            ++arg_num;\n+            arg = argv[arg_num];\n+            addMultiquery(arg, common_arguments);\n+        }\n+        else\n+            common_arguments.emplace_back(arg);\n     }\n }\n \ndiff --git a/src/Client/ClientBase.cpp b/src/Client/ClientBase.cpp\nindex 77a93a25e9bd..faddfe4e323e 100644\n--- a/src/Client/ClientBase.cpp\n+++ b/src/Client/ClientBase.cpp\n@@ -1246,6 +1246,14 @@ void ClientBase::setInsertionTable(const ASTInsertQuery & insert_query)\n }\n \n \n+void ClientBase::addMultiquery(std::string_view query, Arguments & common_arguments) const\n+{\n+    common_arguments.emplace_back(\"--multiquery\");\n+    common_arguments.emplace_back(\"-q\");\n+    common_arguments.emplace_back(query);\n+}\n+\n+\n void ClientBase::processInsertQuery(const String & query_to_execute, ASTPtr parsed_query)\n {\n     auto query = query_to_execute;\n@@ -2592,15 +2600,19 @@ void ClientBase::init(int argc, char ** argv)\n         (\"version-clean\", \"print version in machine-readable format and exit\")\n \n         (\"config-file,C\", po::value<std::string>(), \"config-file path\")\n+\n+        (\"query,q\", po::value<std::string>(), \"query\")\n         (\"queries-file\", po::value<std::vector<std::string>>()->multitoken(),\n             \"file path with queries to execute; multiple files can be specified (--queries-file file1 file2...)\")\n+        (\"multiquery,n\", \"If specified, multiple queries separated by semicolons can be listed after --query. For convenience, it is also possible to omit --query and pass the queries directly after --multiquery.\")\n+        (\"multiline,m\", \"If specified, allow multiline queries (do not send the query on Enter)\")\n         (\"database,d\", po::value<std::string>(), \"database\")\n+        (\"query_kind\", po::value<std::string>()->default_value(\"initial_query\"), \"One of initial_query/secondary_query/no_query\")\n+        (\"query_id\", po::value<std::string>(), \"query_id\")\n+\n         (\"history_file\", po::value<std::string>(), \"path to history file\")\n \n-        (\"query,q\", po::value<std::string>(), \"query\")\n         (\"stage\", po::value<std::string>()->default_value(\"complete\"), \"Request query processing up to specified stage: complete,fetch_columns,with_mergeable_state,with_mergeable_state_after_aggregation,with_mergeable_state_after_aggregation_and_limit\")\n-        (\"query_kind\", po::value<std::string>()->default_value(\"initial_query\"), \"One of initial_query/secondary_query/no_query\")\n-        (\"query_id\", po::value<std::string>(), \"query_id\")\n         (\"progress\", po::value<ProgressOption>()->implicit_value(ProgressOption::TTY, \"tty\")->default_value(ProgressOption::DEFAULT, \"default\"), \"Print progress of queries execution - to TTY: tty|on|1|true|yes; to STDERR non-interactive mode: err; OFF: off|0|false|no; DEFAULT - interactive to TTY, non-interactive is off\")\n \n         (\"disable_suggestion,A\", \"Disable loading suggestion data. Note that suggestion data is loaded asynchronously through a second connection to ClickHouse server. Also it is reasonable to disable suggestion if you want to paste a query with TAB characters. Shorthand option -A is for those who get used to mysql client.\")\n@@ -2612,9 +2624,6 @@ void ClientBase::init(int argc, char ** argv)\n         (\"log-level\", po::value<std::string>(), \"log level\")\n         (\"server_logs_file\", po::value<std::string>(), \"put server logs into specified file\")\n \n-        (\"multiline,m\", \"multiline\")\n-        (\"multiquery,n\", \"multiquery\")\n-\n         (\"suggestion_limit\", po::value<int>()->default_value(10000),\n             \"Suggestion limit for how many databases, tables and columns to fetch.\")\n \ndiff --git a/src/Client/ClientBase.h b/src/Client/ClientBase.h\nindex 5926f73f51ae..8d56c7eb0512 100644\n--- a/src/Client/ClientBase.h\n+++ b/src/Client/ClientBase.h\n@@ -129,6 +129,7 @@ class ClientBase : public Poco::Util::Application, public IHints<2, ClientBase>\n \n     void setInsertionTable(const ASTInsertQuery & insert_query);\n \n+    void addMultiquery(std::string_view query, Arguments & common_arguments) const;\n \n private:\n     void receiveResult(ASTPtr parsed_query, Int32 signals_before_stop, bool partial_result_on_first_cancel);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02048_parallel_reading_from_infile.sh b/tests/queries/0_stateless/02048_parallel_reading_from_infile.sh\nindex d53fe8dd3053..f055ea304b25 100755\n--- a/tests/queries/0_stateless/02048_parallel_reading_from_infile.sh\n+++ b/tests/queries/0_stateless/02048_parallel_reading_from_infile.sh\n@@ -26,13 +26,12 @@ SELECT count() FROM test_infile_parallel WHERE Value='first';\n SELECT count() FROM test_infile_parallel WHERE Value='second';\n EOF\n \n-# Error code is 36 (BAD_ARGUMENTS). It is not ignored.\n-${CLICKHOUSE_CLIENT} --multiquery \"\n-DROP TABLE IF EXISTS test_infile_parallel;\n+# Error code is 27 (DB::ParsingException). It is not ignored.\n+${CLICKHOUSE_CLIENT}  -m --multiquery --query \"DROP TABLE IF EXISTS test_infile_parallel;\n CREATE TABLE test_infile_parallel (Id Int32,Value Enum('first' = 1, 'second' = 2)) ENGINE=Memory();\n SET input_format_allow_errors_num=0;\n INSERT INTO test_infile_parallel FROM INFILE '${CLICKHOUSE_TMP}/test_infile_parallel*' FORMAT TSV;\n-\" 2>&1 | grep -q \"36\" && echo \"Correct\" || echo 'Fail'\n+\" 2>&1 | grep -q \"27\" && echo \"Correct\" || echo 'Fail'\n \n ${CLICKHOUSE_LOCAL} --multiquery <<EOF\n DROP TABLE IF EXISTS test_infile_parallel; \ndiff --git a/tests/queries/0_stateless/02751_multiquery_with_argument.reference b/tests/queries/0_stateless/02751_multiquery_with_argument.reference\nnew file mode 100644\nindex 000000000000..33288ec5bcbe\n--- /dev/null\n+++ b/tests/queries/0_stateless/02751_multiquery_with_argument.reference\n@@ -0,0 +1,24 @@\n+100\n+101\n+102\n+103\n+Syntax error\n+Empty query\n+Empty query\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+BAD_ARGUMENTS\n+Bad arguments\n+Bad arguments\n+Bad arguments\n+Bad arguments\n+Bad arguments\n+Bad arguments\n+Bad arguments\n+BAD_ARGUMENTS\n+Bad arguments\n+BAD_ARGUMENTS\n+Bad arguments\n+Bad arguments\n+Bad arguments\n+Bad arguments\ndiff --git a/tests/queries/0_stateless/02751_multiquery_with_argument.sh b/tests/queries/0_stateless/02751_multiquery_with_argument.sh\nnew file mode 100755\nindex 000000000000..153004c752e7\n--- /dev/null\n+++ b/tests/queries/0_stateless/02751_multiquery_with_argument.sh\n@@ -0,0 +1,34 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+$CLICKHOUSE_LOCAL --multiquery \"SELECT 100\"\n+$CLICKHOUSE_LOCAL --multiquery \"SELECT 101;\"\n+$CLICKHOUSE_LOCAL --multiquery \"SELECT 102;SELECT 103;\"\n+\n+# Invalid SQL.\n+$CLICKHOUSE_LOCAL --multiquery \"SELECT 200; S\" 2>&1 | grep -o 'Syntax error'\n+$CLICKHOUSE_LOCAL --multiquery \"; SELECT 201;\" 2>&1 | grep -o 'Empty query'\n+$CLICKHOUSE_LOCAL --multiquery \"; S; SELECT 202\" 2>&1 | grep -o 'Empty query'\n+\n+# Error expectation cases.\n+# -n <SQL> is prohibited\n+$CLICKHOUSE_LOCAL -n \"SELECT 301\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+$CLICKHOUSE_LOCAL -n \"SELECT 302;\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+$CLICKHOUSE_LOCAL -n \"SELECT 304;SELECT 305;\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+$CLICKHOUSE_LOCAL --multiquery --multiquery 2>&1 | grep -o 'Bad arguments'\n+$CLICKHOUSE_LOCAL -n --multiquery 2>&1 | grep -o 'Bad arguments'\n+$CLICKHOUSE_LOCAL --multiquery -n 2>&1 | grep -o 'Bad arguments'\n+$CLICKHOUSE_LOCAL --multiquery --multiquery \"SELECT 306; SELECT 307;\" 2>&1 | grep -o 'Bad arguments'\n+$CLICKHOUSE_LOCAL -n --multiquery \"SELECT 307; SELECT 308;\" 2>&1 | grep -o 'Bad arguments'\n+$CLICKHOUSE_LOCAL --multiquery \"SELECT 309; SELECT 310;\" --multiquery  2>&1 | grep -o 'Bad arguments'\n+$CLICKHOUSE_LOCAL --multiquery \"SELECT 311;\" --multiquery \"SELECT 312;\" 2>&1 | grep -o 'Bad arguments'\n+$CLICKHOUSE_LOCAL --multiquery \"SELECT 313;\" -n \"SELECT 314;\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+$CLICKHOUSE_LOCAL --multiquery \"SELECT 315;\" --query \"SELECT 316;\" 2>&1 | grep -o 'Bad arguments'\n+$CLICKHOUSE_LOCAL -n \"SELECT 320\" --query \"SELECT 317;\" 2>&1 | grep -o 'BAD_ARGUMENTS'\n+$CLICKHOUSE_LOCAL --query --multiquery --multiquery \"SELECT 318;\" 2>&1 | grep -o 'Bad arguments'\n+$CLICKHOUSE_LOCAL --query --multiquery \"SELECT 319;\" 2>&1 | grep -o 'Bad arguments'\n+$CLICKHOUSE_LOCAL --query -n \"SELECT 400;\" 2>&1 | grep -o 'Bad arguments'\n+$CLICKHOUSE_LOCAL --query -n --multiquery \"SELECT 401;\" 2>&1 | grep -o 'Bad arguments'\n\\ No newline at end of file\n",
  "problem_statement": "`clickhouse-client --multiquery`: allow to specify queries in the value of the `--multiquery` parameter.\n**Use case**\r\n\r\nCurrently query is accepted in `--query` parameter or in stdin.\r\nThere is also `--multiquery` (or `-n`) parameter that is a switch to allow multiple queries.\r\n\r\nExample:\r\n```\r\nclickhouse-client --query \"SELECT 1\"\r\nclickhouse-client --multiquery --query \"SELECT 1; SELECT 2;\"\r\n```\r\n\r\nIt will be very intuitive if one will be able to write:\r\n\r\n```\r\nclickhouse-client --multiquery \"SELECT 1; SELECT 2;\"\r\n```\r\n\r\nSo, the `--multiquery` will act not only as a switch but also as a parameter with value,\r\nif there is no `--query` parameter and the `--multiquery` parameter is presented in its full form (not `-n`).\n",
  "hints_text": "",
  "created_at": "2023-05-15T04:33:49Z"
}