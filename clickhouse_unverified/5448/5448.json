{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 5448,
  "instance_id": "ClickHouse__ClickHouse-5448",
  "issue_numbers": [
    "4965"
  ],
  "base_commit": "14113fe729c4f220f45fb29d70937602e1da7f12",
  "patch": "diff --git a/dbms/src/Common/ErrorCodes.cpp b/dbms/src/Common/ErrorCodes.cpp\nindex bd797f5b71fd..f15d066f8cf2 100644\n--- a/dbms/src/Common/ErrorCodes.cpp\n+++ b/dbms/src/Common/ErrorCodes.cpp\n@@ -429,6 +429,7 @@ namespace ErrorCodes\n     extern const int SETTING_CONSTRAINT_VIOLATION = 452;\n     extern const int MYSQL_CLIENT_INSUFFICIENT_CAPABILITIES = 453;\n     extern const int OPENSSL_ERROR = 454;\n+    extern const int SUSPICIOUS_TYPE_FOR_LOW_CARDINALITY = 455;\n \n     extern const int KEEPER_EXCEPTION = 999;\n     extern const int POCO_EXCEPTION = 1000;\ndiff --git a/dbms/src/Core/Settings.h b/dbms/src/Core/Settings.h\nindex 21eb792e20ce..0cd132ef9ed5 100644\n--- a/dbms/src/Core/Settings.h\n+++ b/dbms/src/Core/Settings.h\n@@ -85,6 +85,7 @@ struct Settings : public SettingsCollection<Settings>\n     M(SettingFloat, totals_auto_threshold, 0.5, \"The threshold for totals_mode = 'auto'.\") \\\n     \\\n     M(SettingBool, compile, false, \"Whether query compilation is enabled.\") \\\n+    M(SettingBool, allow_suspicious_low_cardinality_types, false, \"In CREATE TABLE statement allows specifying LowCardinality modifier for types of small fixed size (8 or less). Enabling this may increase merge times and memory consumption.\") \\\n     M(SettingBool, compile_expressions, false, \"Compile some scalar functions and operators to native code.\") \\\n     M(SettingUInt64, min_count_to_compile, 3, \"The number of structurally identical queries before they are compiled.\") \\\n     M(SettingUInt64, min_count_to_compile_expression, 3, \"The number of identical expressions before they are JIT-compiled\") \\\ndiff --git a/dbms/src/Interpreters/InterpreterCreateQuery.cpp b/dbms/src/Interpreters/InterpreterCreateQuery.cpp\nindex 035b299ac5e2..b6cdf35774f5 100644\n--- a/dbms/src/Interpreters/InterpreterCreateQuery.cpp\n+++ b/dbms/src/Interpreters/InterpreterCreateQuery.cpp\n@@ -38,6 +38,8 @@\n #include <DataTypes/NestedUtils.h>\n #include <DataTypes/DataTypesNumber.h>\n #include <DataTypes/DataTypesDecimal.h>\n+#include <DataTypes/DataTypeLowCardinality.h>\n+#include <DataTypes/DataTypeNullable.h>\n \n #include <Databases/DatabaseFactory.h>\n #include <Databases/IDatabase.h>\n@@ -65,6 +67,7 @@ namespace ErrorCodes\n     extern const int QUERY_IS_PROHIBITED;\n     extern const int THERE_IS_NO_DEFAULT_VALUE;\n     extern const int BAD_DATABASE_FOR_TEMPORARY_TABLE;\n+    extern const int SUSPICIOUS_TYPE_FOR_LOW_CARDINALITY;\n }\n \n \n@@ -523,6 +526,20 @@ BlockIO InterpreterCreateQuery::createTable(ASTCreateQuery & create)\n     /// Set and retrieve list of columns.\n     ColumnsDescription columns = setColumns(create, as_select_sample, as_storage);\n \n+    /// Check low cardinality types in creating table if it was not allowed in setting\n+    if (!create.attach && !context.getSettingsRef().allow_suspicious_low_cardinality_types)\n+    {\n+        for (const auto & name_and_type_pair : columns.getAllPhysical())\n+        {\n+            if (const auto * current_type_ptr = typeid_cast<const DataTypeLowCardinality *>(name_and_type_pair.type.get()))\n+            {\n+                if (!isStringOrFixedString(*removeNullable(current_type_ptr->getDictionaryType())))\n+                    throw Exception(\"Creating columns of type \" + current_type_ptr->getName() + \" is prohibited by default due to expected negative impact on performance. It can be enabled with the \\\"allow_suspicious_low_cardinality_types\\\" setting.\",\n+                        ErrorCodes::SUSPICIOUS_TYPE_FOR_LOW_CARDINALITY);\n+            }\n+        }\n+    }\n+\n     /// Set the table engine if it was not specified explicitly.\n     setEngine(create);\n \n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/00688_low_cardinality_in.sql b/dbms/tests/queries/0_stateless/00688_low_cardinality_in.sql\nindex b3ae940e155e..09a96743847f 100644\n--- a/dbms/tests/queries/0_stateless/00688_low_cardinality_in.sql\n+++ b/dbms/tests/queries/0_stateless/00688_low_cardinality_in.sql\n@@ -1,3 +1,4 @@\n+set allow_suspicious_low_cardinality_types = 1;\n drop table if exists lc_00688;\n create table lc_00688 (str StringWithDictionary, val UInt8WithDictionary) engine = MergeTree order by tuple();\n insert into lc_00688 values ('a', 1), ('b', 2);\ndiff --git a/dbms/tests/queries/0_stateless/00688_low_cardinality_nullable_cast.sql b/dbms/tests/queries/0_stateless/00688_low_cardinality_nullable_cast.sql\nindex 1248374aacc8..5e25e50d482a 100644\n--- a/dbms/tests/queries/0_stateless/00688_low_cardinality_nullable_cast.sql\n+++ b/dbms/tests/queries/0_stateless/00688_low_cardinality_nullable_cast.sql\n@@ -1,3 +1,4 @@\n+set allow_suspicious_low_cardinality_types = 1;\n SELECT CAST(NULL, 'LowCardinality(Nullable(Int8))');\n \n drop table if exists lc_null_int8_defnull;\ndiff --git a/dbms/tests/queries/0_stateless/00688_low_cardinality_syntax.sql b/dbms/tests/queries/0_stateless/00688_low_cardinality_syntax.sql\nindex f1c41be16bc0..98d7b7f5f8a8 100644\n--- a/dbms/tests/queries/0_stateless/00688_low_cardinality_syntax.sql\n+++ b/dbms/tests/queries/0_stateless/00688_low_cardinality_syntax.sql\n@@ -1,3 +1,4 @@\n+set allow_suspicious_low_cardinality_types = 1;\n drop table if exists lc_str_0;\n drop table if exists lc_str_1;\n drop table if exists lc_null_str_0;\ndiff --git a/dbms/tests/queries/0_stateless/00717_low_cardinaliry_distributed_group_by.sql b/dbms/tests/queries/0_stateless/00717_low_cardinaliry_distributed_group_by.sql\nindex 1ecb512761ac..47513cc6f1ed 100644\n--- a/dbms/tests/queries/0_stateless/00717_low_cardinaliry_distributed_group_by.sql\n+++ b/dbms/tests/queries/0_stateless/00717_low_cardinaliry_distributed_group_by.sql\n@@ -1,3 +1,4 @@\n+set allow_suspicious_low_cardinality_types = 1;\n DROP TABLE IF EXISTS test.test_low_null_float;\n DROP TABLE IF EXISTS test.dist;\n \ndiff --git a/dbms/tests/queries/0_stateless/00718_low_cardinaliry_alter.sql b/dbms/tests/queries/0_stateless/00718_low_cardinaliry_alter.sql\nindex 45b647584ade..591ff952132a 100644\n--- a/dbms/tests/queries/0_stateless/00718_low_cardinaliry_alter.sql\n+++ b/dbms/tests/queries/0_stateless/00718_low_cardinaliry_alter.sql\n@@ -1,3 +1,4 @@\n+set allow_suspicious_low_cardinality_types = 1;\n drop table if exists tab_00718;\n create table tab_00718 (a String, b LowCardinality(UInt32)) engine = MergeTree order by a;\n insert into tab_00718 values ('a', 1);\ndiff --git a/dbms/tests/queries/0_stateless/00751_low_cardinality_nullable_group_by.sql b/dbms/tests/queries/0_stateless/00751_low_cardinality_nullable_group_by.sql\nindex c0234eaad8cf..0a92037fa892 100644\n--- a/dbms/tests/queries/0_stateless/00751_low_cardinality_nullable_group_by.sql\n+++ b/dbms/tests/queries/0_stateless/00751_low_cardinality_nullable_group_by.sql\n@@ -1,3 +1,4 @@\n+set allow_suspicious_low_cardinality_types = 1;\n drop table if exists low_null_float;\n CREATE TABLE low_null_float (a LowCardinality(Nullable(Float64))) ENGINE = MergeTree order by tuple();\n INSERT INTO low_null_float (a) SELECT if(number % 3 == 0, Null, number)  FROM system.numbers LIMIT 1000000;\ndiff --git a/dbms/tests/queries/0_stateless/00800_low_cardinality_distinct_numeric.sql b/dbms/tests/queries/0_stateless/00800_low_cardinality_distinct_numeric.sql\nindex da818cb73231..8ba95ce7a8e1 100644\n--- a/dbms/tests/queries/0_stateless/00800_low_cardinality_distinct_numeric.sql\n+++ b/dbms/tests/queries/0_stateless/00800_low_cardinality_distinct_numeric.sql\n@@ -1,3 +1,4 @@\n+set allow_suspicious_low_cardinality_types = 1;\n drop table if exists lc_00800_2;\n create table lc_00800_2 (val LowCardinality(UInt64)) engine = MergeTree order by val;\n insert into lc_00800_2 select number % 123 from system.numbers limit 100000;\n",
  "problem_statement": "Add `allow_suspicious_low_cardinality_types` setting.\nIf this setting is turned off (default), don't allow to create a table with LowCardinality of integers, enums, Nullable integers, etc... (all types that have fixed size in memory and the size is 8 or less). Always allow to attach table.\n",
  "hints_text": "@stavrolia ask @KochetovNicolai for details of this task.",
  "created_at": "2019-05-28T17:37:13Z",
  "modified_files": [
    "dbms/src/Common/ErrorCodes.cpp",
    "dbms/src/Core/Settings.h",
    "dbms/src/Interpreters/InterpreterCreateQuery.cpp"
  ],
  "modified_test_files": [
    "dbms/tests/queries/0_stateless/00688_low_cardinality_in.sql",
    "dbms/tests/queries/0_stateless/00688_low_cardinality_nullable_cast.sql",
    "dbms/tests/queries/0_stateless/00688_low_cardinality_syntax.sql",
    "dbms/tests/queries/0_stateless/00717_low_cardinaliry_distributed_group_by.sql",
    "dbms/tests/queries/0_stateless/00718_low_cardinaliry_alter.sql",
    "dbms/tests/queries/0_stateless/00751_low_cardinality_nullable_group_by.sql",
    "dbms/tests/queries/0_stateless/00800_low_cardinality_distinct_numeric.sql"
  ]
}