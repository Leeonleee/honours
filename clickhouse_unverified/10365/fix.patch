diff --git a/src/Core/Defines.h b/src/Core/Defines.h
index fe614cec6bde..5552de3b0457 100644
--- a/src/Core/Defines.h
+++ b/src/Core/Defines.h
@@ -98,3 +98,6 @@
 
 /// Default limit on recursion depth of recursive descend parser.
 #define DBMS_DEFAULT_MAX_PARSER_DEPTH 1000
+
+/// Max depth of hierarchical dictionary
+#define DBMS_HIERARCHICAL_DICTIONARY_MAX_DEPTH 1000
diff --git a/src/Dictionaries/CacheDictionary.cpp b/src/Dictionaries/CacheDictionary.cpp
index 30bd521c0bba..f75b063e4e37 100644
--- a/src/Dictionaries/CacheDictionary.cpp
+++ b/src/Dictionaries/CacheDictionary.cpp
@@ -10,6 +10,7 @@
 #include <Common/ProfilingScopedRWLock.h>
 #include <Common/randomSeed.h>
 #include <Common/typeid_cast.h>
+#include <Core/Defines.h>
 #include <ext/range.h>
 #include <ext/size.h>
 #include <Common/setThreadName.h>
@@ -17,6 +18,7 @@
 #include "DictionaryBlockInputStream.h"
 #include "DictionaryFactory.h"
 
+
 namespace ProfileEvents
 {
 extern const Event DictCacheKeysRequested;
@@ -144,7 +146,7 @@ void CacheDictionary::isInImpl(const PaddedPODArray<Key> & child_ids, const Ance
     PaddedPODArray<Key> children(out_size, 0);
     PaddedPODArray<Key> parents(child_ids.begin(), child_ids.end());
 
-    while (true)
+    for (size_t i = 0; i < DBMS_HIERARCHICAL_DICTIONARY_MAX_DEPTH; ++i)
     {
         size_t out_idx = 0;
         size_t parents_idx = 0;
@@ -218,7 +220,7 @@ void CacheDictionary::isInConstantVector(const Key child_id, const PaddedPODArra
     std::vector<Key> ancestors(1, child_id);
 
     /// Iteratively find all ancestors for child.
-    while (true)
+    for (size_t i = 0; i < DBMS_HIERARCHICAL_DICTIONARY_MAX_DEPTH; ++i)
     {
         toParent(child, parent);
 
diff --git a/src/Dictionaries/Embedded/RegionsHierarchy.h b/src/Dictionaries/Embedded/RegionsHierarchy.h
index 25625284e32b..7f42a76ecc2a 100644
--- a/src/Dictionaries/Embedded/RegionsHierarchy.h
+++ b/src/Dictionaries/Embedded/RegionsHierarchy.h
@@ -4,6 +4,7 @@
 #include <boost/noncopyable.hpp>
 #include <common/types.h>
 #include "GeodataProviders/IHierarchiesProvider.h"
+#include <Core/Defines.h>
 
 
 class IRegionsHierarchyDataProvider;
@@ -59,7 +60,7 @@ class RegionsHierarchy : private boost::noncopyable
         if (lhs >= parents.size())
             return false;
 
-        while (lhs != 0 && lhs != rhs)
+        for (size_t i = 0; lhs != 0 && lhs != rhs && i < DBMS_HIERARCHICAL_DICTIONARY_MAX_DEPTH; ++i)
             lhs = parents[lhs];
 
         return lhs != 0;
diff --git a/src/Dictionaries/FlatDictionary.cpp b/src/Dictionaries/FlatDictionary.cpp
index b70fe95346d7..fd2275f384db 100644
--- a/src/Dictionaries/FlatDictionary.cpp
+++ b/src/Dictionaries/FlatDictionary.cpp
@@ -2,6 +2,8 @@
 #include <IO/WriteHelpers.h>
 #include "DictionaryBlockInputStream.h"
 #include "DictionaryFactory.h"
+#include <Core/Defines.h>
+
 
 namespace DB
 {
@@ -77,7 +79,7 @@ void FlatDictionary::isInImpl(const ChildType & child_ids, const AncestorType &
         auto id = getAt(child_ids, row);
         const auto ancestor_id = getAt(ancestor_ids, row);
 
-        while (id < loaded_size && id != null_value && id != ancestor_id)
+        for (size_t i = 0; id < loaded_size && id != null_value && id != ancestor_id && i < DBMS_HIERARCHICAL_DICTIONARY_MAX_DEPTH; ++i)
             id = attr[id];
 
         out[row] = id != null_value && id == ancestor_id;
diff --git a/src/Dictionaries/HashedDictionary.cpp b/src/Dictionaries/HashedDictionary.cpp
index c401142584c8..f889c8207701 100644
--- a/src/Dictionaries/HashedDictionary.cpp
+++ b/src/Dictionaries/HashedDictionary.cpp
@@ -2,6 +2,8 @@
 #include <ext/size.h>
 #include "DictionaryBlockInputStream.h"
 #include "DictionaryFactory.h"
+#include <Core/Defines.h>
+
 
 namespace
 {
@@ -87,7 +89,7 @@ void HashedDictionary::isInAttrImpl(const AttrType & attr, const ChildType & chi
         auto id = getAt(child_ids, row);
         const auto ancestor_id = getAt(ancestor_ids, row);
 
-        while (id != null_value && id != ancestor_id)
+        for (size_t i = 0; id != null_value && id != ancestor_id && i < DBMS_HIERARCHICAL_DICTIONARY_MAX_DEPTH; ++i)
         {
             auto it = attr.find(id);
             if (it != std::end(attr))
diff --git a/src/Functions/FunctionsEmbeddedDictionaries.h b/src/Functions/FunctionsEmbeddedDictionaries.h
index a8078bc47b7c..d337f9ea363c 100644
--- a/src/Functions/FunctionsEmbeddedDictionaries.h
+++ b/src/Functions/FunctionsEmbeddedDictionaries.h
@@ -16,6 +16,7 @@
 #include <Dictionaries/Embedded/RegionsNames.h>
 #include <IO/WriteHelpers.h>
 #include <Common/typeid_cast.h>
+#include <Core/Defines.h>
 
 #if !defined(ARCADIA_BUILD)
 #    include <Common/config.h>
@@ -450,7 +451,7 @@ class FunctionHierarchyWithDictionary : public IFunction
             for (size_t i = 0; i < size; ++i)
             {
                 T cur = vec_from[i];
-                while (cur)
+                for (size_t depth = 0; cur && depth < DBMS_HIERARCHICAL_DICTIONARY_MAX_DEPTH; ++depth)
                 {
                     res_values.push_back(cur);
                     cur = Transform::toParent(cur, dict);
