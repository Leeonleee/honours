{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 49425,
  "instance_id": "ClickHouse__ClickHouse-49425",
  "issue_numbers": [
    "49312"
  ],
  "base_commit": "d3c7054bcff284ef5a9a022983d3cdea2bb83fda",
  "patch": "diff --git a/src/Interpreters/ActionsVisitor.cpp b/src/Interpreters/ActionsVisitor.cpp\nindex 3bb3ea67e295..b3bb6e9db90c 100644\n--- a/src/Interpreters/ActionsVisitor.cpp\n+++ b/src/Interpreters/ActionsVisitor.cpp\n@@ -535,7 +535,6 @@ ActionsMatcher::Data::Data(\n     bool no_subqueries_,\n     bool no_makeset_,\n     bool only_consts_,\n-    bool create_source_for_in_,\n     AggregationKeysInfo aggregation_keys_info_,\n     bool build_expression_with_window_functions_,\n     bool is_create_parameterized_view_)\n@@ -547,7 +546,6 @@ ActionsMatcher::Data::Data(\n     , no_subqueries(no_subqueries_)\n     , no_makeset(no_makeset_)\n     , only_consts(only_consts_)\n-    , create_source_for_in(create_source_for_in_)\n     , visit_depth(0)\n     , actions_stack(std::move(actions_dag), context_)\n     , aggregation_keys_info(aggregation_keys_info_)\n@@ -1000,7 +998,6 @@ void ActionsMatcher::visit(const ASTFunction & node, const ASTPtr & ast, Data &\n             data.no_subqueries,\n             data.no_makeset,\n             data.only_consts,\n-            /*create_source_for_in*/ false,\n             data.aggregation_keys_info);\n \n         NamesWithAliases args;\n@@ -1432,7 +1429,7 @@ FutureSet ActionsMatcher::makeSet(const ASTFunction & node, Data & data, bool no\n           * In case that we have HAVING with IN subquery, we have to force creating set for it.\n           * Also it doesn't make sense if it is GLOBAL IN or ordinary IN.\n           */\n-        if (data.create_source_for_in && !subquery_for_set.hasSource())\n+        if (!subquery_for_set.hasSource())\n         {\n             auto interpreter = interpretSubquery(right_in_operand, data.getContext(), data.subquery_depth, {});\n             subquery_for_set.createSource(*interpreter);\ndiff --git a/src/Interpreters/ActionsVisitor.h b/src/Interpreters/ActionsVisitor.h\nindex 260fd5ab2c01..3cf43746630c 100644\n--- a/src/Interpreters/ActionsVisitor.h\n+++ b/src/Interpreters/ActionsVisitor.h\n@@ -129,7 +129,6 @@ class ActionsMatcher\n         bool no_subqueries;\n         bool no_makeset;\n         bool only_consts;\n-        bool create_source_for_in;\n         size_t visit_depth;\n         ScopeStack actions_stack;\n         AggregationKeysInfo aggregation_keys_info;\n@@ -153,7 +152,6 @@ class ActionsMatcher\n             bool no_subqueries_,\n             bool no_makeset_,\n             bool only_consts_,\n-            bool create_source_for_in_,\n             AggregationKeysInfo aggregation_keys_info_,\n             bool build_expression_with_window_functions_ = false,\n             bool is_create_parameterized_view_ = false);\ndiff --git a/src/Interpreters/ExpressionAnalyzer.cpp b/src/Interpreters/ExpressionAnalyzer.cpp\nindex 9e3951e80a40..96a86df7ffde 100644\n--- a/src/Interpreters/ExpressionAnalyzer.cpp\n+++ b/src/Interpreters/ExpressionAnalyzer.cpp\n@@ -595,7 +595,6 @@ void ExpressionAnalyzer::getRootActions(const ASTPtr & ast, bool no_makeset_for_\n         no_makeset_for_subqueries,\n         false /* no_makeset */,\n         only_consts,\n-        !isRemoteStorage() /* create_source_for_in */,\n         getAggregationKeysInfo(),\n         false /* build_expression_with_window_functions */,\n         is_create_parameterized_view);\n@@ -616,7 +615,6 @@ void ExpressionAnalyzer::getRootActionsNoMakeSet(const ASTPtr & ast, ActionsDAGP\n         true /* no_makeset_for_subqueries, no_makeset implies no_makeset_for_subqueries */,\n         true /* no_makeset */,\n         only_consts,\n-        !isRemoteStorage() /* create_source_for_in */,\n         getAggregationKeysInfo(),\n         false /* build_expression_with_window_functions */,\n         is_create_parameterized_view);\n@@ -639,7 +637,6 @@ void ExpressionAnalyzer::getRootActionsForHaving(\n         no_makeset_for_subqueries,\n         false /* no_makeset */,\n         only_consts,\n-        true /* create_source_for_in */,\n         getAggregationKeysInfo(),\n         false /* build_expression_with_window_functions */,\n         is_create_parameterized_view);\n@@ -661,7 +658,6 @@ void ExpressionAnalyzer::getRootActionsForWindowFunctions(const ASTPtr & ast, bo\n         no_makeset_for_subqueries,\n         false /* no_makeset */,\n         false /*only_consts */,\n-        !isRemoteStorage() /* create_source_for_in */,\n         getAggregationKeysInfo(),\n         true);\n     ActionsVisitor(visitor_data, log.stream()).visit(ast);\ndiff --git a/src/Processors/QueryPlan/CreatingSetsStep.cpp b/src/Processors/QueryPlan/CreatingSetsStep.cpp\nindex 9eec3e904942..b5d773d889fb 100644\n--- a/src/Processors/QueryPlan/CreatingSetsStep.cpp\n+++ b/src/Processors/QueryPlan/CreatingSetsStep.cpp\n@@ -1,3 +1,4 @@\n+#include <exception>\n #include <Processors/QueryPlan/CreatingSetsStep.h>\n #include <Processors/QueryPlan/QueryPlan.h>\n #include <QueryPipeline/QueryPipelineBuilder.h>\n@@ -133,7 +134,11 @@ void addCreatingSetsStep(QueryPlan & query_plan, PreparedSets::SubqueriesForSets\n     for (auto & [description, subquery_for_set] : subqueries_for_sets)\n     {\n         if (!subquery_for_set.hasSource())\n+        {\n+            subquery_for_set.promise_to_fill_set.set_exception(std::make_exception_ptr(\n+                Exception(ErrorCodes::LOGICAL_ERROR, \"Subquery for set {} has no source\", subquery_for_set.key)));\n             continue;\n+        }\n \n         auto plan = subquery_for_set.detachSource();\n \ndiff --git a/src/Storages/VirtualColumnUtils.cpp b/src/Storages/VirtualColumnUtils.cpp\nindex 4ff00facfdc7..c38a2b4ed42d 100644\n--- a/src/Storages/VirtualColumnUtils.cpp\n+++ b/src/Storages/VirtualColumnUtils.cpp\n@@ -162,7 +162,7 @@ bool prepareFilterBlockWithQuery(const ASTPtr & query, ContextPtr context, Block\n         const ColumnNumbersList grouping_set_keys;\n \n         ActionsVisitor::Data visitor_data(\n-            context, SizeLimits{}, 1, source_columns, std::move(actions), prepared_sets, true, true, true, false,\n+            context, SizeLimits{}, 1, source_columns, std::move(actions), prepared_sets, true, true, true,\n             { aggregation_keys, grouping_set_keys, GroupByKind::NONE });\n \n         ActionsVisitor(visitor_data).visit(node);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02596_build_set_and_remote.reference b/tests/queries/0_stateless/02596_build_set_and_remote.reference\nnew file mode 100644\nindex 000000000000..8d12196ae334\n--- /dev/null\n+++ b/tests/queries/0_stateless/02596_build_set_and_remote.reference\n@@ -0,0 +1,19 @@\n+-- {echoOn}\n+SELECT arrayExists(x -> (x IN (SELECT '2')), [2]) FROM system.one;\n+1\n+SELECT arrayExists(x -> (x IN (SELECT '2')), [2]) FROM remote('127.0.0.{2,3}', system.one);\n+1\n+1\n+SELECT arrayExists(x -> (x IN (SELECT '2')), [2]) FROM remote('127.0.0.{2,3}', system.one) GROUP BY NULL;\n+1\n+SELECT arrayExists(x -> (x IN (SELECT '2')), [2]) FROM remote('127.0.0.{2,3}', system.one) GROUP BY 1;\n+1\n+SELECT arrayExists(x -> (x IN (SELECT '2')), [2]) FROM remote('127.0.0.{2,3}', system.one) GROUP BY 'A';\n+1\n+SELECT 1 IN ( SELECT 1 ) FROM remote('127.0.0.{1,2}', system.one) GROUP BY dummy;\n+1\n+SELECT 1000.0001, toUInt64(arrayJoin([NULL, 257, 65536, NULL])), arrayExists(x -> (x IN (SELECT '2.55')), [-9223372036854775808]) FROM remote('127.0.0.{1,2}', system.one) GROUP BY NULL, NULL, NULL, NULL;\n+1000.0001\t\\N\t0\n+1000.0001\t257\t0\n+1000.0001\t65536\t0\n+1000.0001\t\\N\t0\ndiff --git a/tests/queries/0_stateless/02596_build_set_and_remote.sql b/tests/queries/0_stateless/02596_build_set_and_remote.sql\nnew file mode 100644\nindex 000000000000..7a904344c913\n--- /dev/null\n+++ b/tests/queries/0_stateless/02596_build_set_and_remote.sql\n@@ -0,0 +1,14 @@\n+-- {echoOn}\n+SELECT arrayExists(x -> (x IN (SELECT '2')), [2]) FROM system.one;\n+\n+SELECT arrayExists(x -> (x IN (SELECT '2')), [2]) FROM remote('127.0.0.{2,3}', system.one);\n+\n+SELECT arrayExists(x -> (x IN (SELECT '2')), [2]) FROM remote('127.0.0.{2,3}', system.one) GROUP BY NULL;\n+\n+SELECT arrayExists(x -> (x IN (SELECT '2')), [2]) FROM remote('127.0.0.{2,3}', system.one) GROUP BY 1;\n+\n+SELECT arrayExists(x -> (x IN (SELECT '2')), [2]) FROM remote('127.0.0.{2,3}', system.one) GROUP BY 'A';\n+\n+SELECT 1 IN ( SELECT 1 ) FROM remote('127.0.0.{1,2}', system.one) GROUP BY dummy;\n+\n+SELECT 1000.0001, toUInt64(arrayJoin([NULL, 257, 65536, NULL])), arrayExists(x -> (x IN (SELECT '2.55')), [-9223372036854775808]) FROM remote('127.0.0.{1,2}', system.one) GROUP BY NULL, NULL, NULL, NULL;\n",
  "problem_statement": "Abort in `InterpreterSelectQuery::executeSubqueriesInSetsAndJoins` due to invalid std::promise\nhttps://s3.amazonaws.com/clickhouse-test-reports/45596/5915290f0fe9ed8aaa5344aec85390b874bd949b/fuzzer_astfuzzerubsan/report.html\r\n\r\n```\r\nstd::exception. Code: 1001, type: std::__1::future_error, e.what() = The associated promise has been destructed prior to the associated state becoming ready. (version 23.4.1.1) (from [::ffff:127.0.0.1]:50486) (in query: SELECT 1000.0001, toUInt64(arrayJoin([NULL, 257, 65536, NULL])), arrayExists(x -> (x IN (SELECT '2.55', NULL WITH TOTALS)), [-9223372036854775808]) FROM remote('127.0.0.{1,2}', system.one) GROUP BY NULL, NULL, NULL, NULL), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. std::exception::capture() @ 0x2af3ebf6 in /workspace/clickhouse\r\n1. ./build_docker/./contrib/llvm-project/libcxx/src/support/runtime/stdexcept_default.ipp:26: std::logic_error::logic_error(std::logic_error const&) @ 0x4962ef3f in /workspace/clickhouse\r\n2. ./build_docker/./contrib/llvm-project/libcxx/include/future:520: std::exception_ptr std::make_exception_ptr[abi:v15000]<std::future_error>(std::future_error) @ 0x40e265f0 in /workspace/clickhouse\r\n3. ./build_docker/./contrib/llvm-project/libcxx/include/future:1351: std::promise<std::shared_ptr<DB::Set>>::~promise() @ 0x40fb14ca in /workspace/clickhouse\r\n4. ./build_docker/./src/Interpreters/PreparedSets.h:55: DB::SubqueryForSet::~SubqueryForSet() @ 0x40fb1296 in /workspace/clickhouse\r\n5. ./build_docker/./contrib/llvm-project/libcxx/include/string:1499: std::__hash_table<std::__hash_value_type<String, DB::SubqueryForSet>, std::__unordered_map_hasher<String, std::__hash_value_type<String, DB::SubqueryForSet>, std::hash<String>, std::equal_to<String>, true>, std::__unordered_map_equal<String, std::__hash_value_type<String, DB::SubqueryForSet>, std::equal_to<String>, std::hash<String>, true>, std::allocator<std::__hash_value_type<String, DB::SubqueryForSet>>>::__deallocate_node(std::__hash_node_base<std::__hash_node<std::__hash_value_type<String, DB::SubqueryForSet>, void*>*>*) @ 0x40fb11f2 in /workspace/clickhouse\r\n6. ./build_docker/./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:534: DB::addCreatingSetsStep(DB::QueryPlan&, std::shared_ptr<DB::PreparedSets>, std::shared_ptr<DB::Context const>) @ 0x44c75ffe in /workspace/clickhouse\r\n7. ./build_docker/./src/Interpreters/InterpreterSelectQuery.cpp:3092: DB::InterpreterSelectQuery::executeSubqueriesInSetsAndJoins(DB::QueryPlan&) @ 0x42adbb93 in /workspace/clickhouse\r\n8. ./build_docker/./src/Interpreters/InterpreterSelectQuery.cpp:0: DB::InterpreterSelectQuery::executeImpl(DB::QueryPlan&, std::optional<DB::Pipe>) @ 0x42ac30bb in /workspace/clickhouse\r\n9. ./build_docker/./contrib/llvm-project/libcxx/include/optional:260: DB::InterpreterSelectQuery::buildQueryPlan(DB::QueryPlan&) @ 0x42abe50a in /workspace/clickhouse\r\n10. ./build_docker/./src/Interpreters/InterpreterSelectWithUnionQuery.cpp:0: DB::InterpreterSelectWithUnionQuery::buildQueryPlan(DB::QueryPlan&) @ 0x42b9fc0c in /workspace/clickhouse\r\n11. ./build_docker/./src/Interpreters/InterpreterSelectWithUnionQuery.cpp:0: DB::InterpreterSelectWithUnionQuery::execute() @ 0x42ba115e in /workspace/clickhouse\r\n12. ./build_docker/./src/Interpreters/executeQuery.cpp:0: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x430404e1 in /workspace/clickhouse\r\n13. ./build_docker/./src/Interpreters/executeQuery.cpp:1168: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x4303bb6f in /workspace/clickhouse\r\n14. ./build_docker/./src/Server/TCPHandler.cpp:0: DB::TCPHandler::runImpl() @ 0x444c649b in /workspace/clickhouse\r\n15. ./build_docker/./src/Server/TCPHandler.cpp:2045: DB::TCPHandler::run() @ 0x444eb779 in /workspace/clickhouse\r\n16. ./build_docker/./base/poco/Net/src/TCPServerConnection.cpp:57: Poco::Net::TCPServerConnection::start() @ 0x45a2f9de in /workspace/clickhouse\r\n17. ./build_docker/./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:302: Poco::Net::TCPServerDispatcher::run() @ 0x45a30a92 in /workspace/clickhouse\r\n18. ./build_docker/./base/poco/Foundation/src/ThreadPool.cpp:202: Poco::PooledThread::run() @ 0x45c9b150 in /workspace/clickhouse\r\n19. ./build_docker/./base/poco/Foundation/src/Thread_POSIX.cpp:0: Poco::ThreadImpl::runnableEntry(void*) @ 0x45c967f1 in /workspace/clickhouse\r\n20. ? @ 0x7feb00253609 in ?\r\n21. clone @ 0x7feb00178133 in ?\r\n\r\n2023.04.27 12:52:52.394342 [ 504 ] {} <Fatal> BaseDaemon: ########################################\r\n2023.04.27 12:52:52.394409 [ 504 ] {} <Fatal> BaseDaemon: (version 23.4.1.1, build id: 5DC4BFB4030A0B9016CF767588CD1BC7A81EF6DF) (from thread 150) (query_id: 7068c995-c0fe-4163-b966-7df324e6d962) (query: SELECT 1000.0001, toUInt64(arrayJoin([NULL, 257, 65536, NULL])), arrayExists(x -> (x IN (SELECT '2.55', NULL WITH TOTALS)), [-9223372036854775808]) FROM remote('127.0.0.{1,2}', system.one) GROUP BY NULL, NULL, NULL, NULL) Received signal Aborted (6)\r\n2023.04.27 12:52:52.394433 [ 504 ] {} <Fatal> BaseDaemon: \r\n2023.04.27 12:52:52.394459 [ 504 ] {} <Fatal> BaseDaemon: Stack trace: 0x7feb0009c00b 0x7feb0007b859 0x5582772eb123 0x558277309779 0x55827884d9de 0x55827884ea92 0x558278ab9150 0x558278ab47f1 0x7feb00253609 0x7feb00178133\r\n2023.04.27 12:52:52.394485 [ 504 ] {} <Fatal> BaseDaemon: 3. raise @ 0x7feb0009c00b in ?\r\n2023.04.27 12:52:52.394503 [ 504 ] {} <Fatal> BaseDaemon: 4. abort @ 0x7feb0007b859 in ?\r\n2023.04.27 12:52:52.460697 [ 504 ] {} <Fatal> BaseDaemon: 5. ./build_docker/./src/Server/TCPHandler.cpp:558: DB::TCPHandler::runImpl() @ 0x444cd123 in /workspace/clickhouse\r\n2023.04.27 12:52:52.539932 [ 504 ] {} <Fatal> BaseDaemon: 6. ./build_docker/./src/Server/TCPHandler.cpp:2045: DB::TCPHandler::run() @ 0x444eb779 in /workspace/clickhouse\r\n2023.04.27 12:52:52.546036 [ 504 ] {} <Fatal> BaseDaemon: 7. ./build_docker/./base/poco/Net/src/TCPServerConnection.cpp:57: Poco::Net::TCPServerConnection::start() @ 0x45a2f9de in /workspace/clickhouse\r\n2023.04.27 12:52:52.553998 [ 504 ] {} <Fatal> BaseDaemon: 8.1. inlined from ./build_docker/./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:302: std::unique_ptr<Poco::Net::TCPServerConnection, std::default_delete<Poco::Net::TCPServerConnection>>::reset[abi:v15000](Poco::Net::TCPServerConnection*)\r\n2023.04.27 12:52:52.554030 [ 504 ] {} <Fatal> BaseDaemon: 8.2. inlined from ./build_docker/./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:259: ~unique_ptr\r\n2023.04.27 12:52:52.554043 [ 504 ] {} <Fatal> BaseDaemon: 8. ./build_docker/./base/poco/Net/src/TCPServerDispatcher.cpp:116: Poco::Net::TCPServerDispatcher::run() @ 0x45a30a92 in /workspace/clickhouse\r\n2023.04.27 12:52:52.562263 [ 504 ] {} <Fatal> BaseDaemon: 9. ./build_docker/./base/poco/Foundation/src/ThreadPool.cpp:202: Poco::PooledThread::run() @ 0x45c9b150 in /workspace/clickhouse\r\n2023.04.27 12:52:52.569995 [ 504 ] {} <Fatal> BaseDaemon: 10. ./build_docker/./base/poco/Foundation/src/Thread_POSIX.cpp:0: Poco::ThreadImpl::runnableEntry(void*) @ 0x45c967f1 in /workspace/clickhouse\r\n2023.04.27 12:52:52.570022 [ 504 ] {} <Fatal> BaseDaemon: 11. ? @ 0x7feb00253609 in ?\r\n2023.04.27 12:52:52.570040 [ 504 ] {} <Fatal> BaseDaemon: 12. clone @ 0x7feb00178133 in ?\r\n2023.04.27 12:52:52.570065 [ 504 ] {} <Fatal> BaseDaemon: Integrity check of the executable skipped because the reference checksum could not be read.\r\n2023.04.27 12:52:57.102787 [ 141 ] {} <Fatal> Application: Child process was terminated by signal 6.\r\n```\r\nReproduces since 23.4\r\nFiddle: https://fiddle.clickhouse.com/e03a998d-cdf7-445d-a18a-7d236b196f9c\r\n\r\n```\r\nReceived exception from server (version 23.4.1):\r\nCode: 1001. DB::Exception: Received from localhost:9000. DB::Exception: std::__1::future_error: The associated promise has been destructed prior to the associated state becoming ready.. (STD_EXCEPTION)\r\n(query: SELECT 1000.0001, toUInt64(arrayJoin([NULL, 257, 65536, NULL])), arrayExists(x -> (x IN (SELECT '2.55', NULL WITH TOTALS)), [-9223372036854775808]) FROM remote('127.0.0.{1,2}', system.one) GROUP BY NULL, NULL, NULL, NULL;)\r\n```\r\n\n",
  "hints_text": "Maybe connected to https://github.com/ClickHouse/ClickHouse/pull/46835",
  "created_at": "2023-05-02T18:07:37Z",
  "modified_files": [
    "src/Interpreters/ActionsVisitor.cpp",
    "src/Interpreters/ActionsVisitor.h",
    "src/Interpreters/ExpressionAnalyzer.cpp",
    "src/Processors/QueryPlan/CreatingSetsStep.cpp",
    "src/Storages/VirtualColumnUtils.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02596_build_set_and_remote.reference",
    "b/tests/queries/0_stateless/02596_build_set_and_remote.sql"
  ]
}