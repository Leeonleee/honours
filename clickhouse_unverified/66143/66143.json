{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 66143,
  "instance_id": "ClickHouse__ClickHouse-66143",
  "issue_numbers": [
    "63239",
    "58994",
    "65233",
    "62946",
    "68749",
    "71659",
    "71828"
  ],
  "base_commit": "1a99e9c0828135cac75f4f0342980760ae386b77",
  "patch": "diff --git a/src/Analyzer/ColumnNode.cpp b/src/Analyzer/ColumnNode.cpp\nindex 2b514a85121b..8034c3f8f45c 100644\n--- a/src/Analyzer/ColumnNode.cpp\n+++ b/src/Analyzer/ColumnNode.cpp\n@@ -16,7 +16,11 @@ namespace ErrorCodes\n     extern const int LOGICAL_ERROR;\n }\n \n-ColumnNode::ColumnNode(NameAndTypePair column_, QueryTreeNodePtr expression_node_, QueryTreeNodeWeakPtr column_source_)\n+ColumnNode::ColumnNode(\n+    NameAndTypePair column_,\n+    QueryTreeNodePtr expression_node_,\n+    QueryTreeNodeWeakPtr column_source_\n+)\n     : IQueryTreeNode(children_size, weak_pointers_size)\n     , column(std::move(column_))\n {\n@@ -24,10 +28,12 @@ ColumnNode::ColumnNode(NameAndTypePair column_, QueryTreeNodePtr expression_node\n     getSourceWeakPointer() = std::move(column_source_);\n }\n \n-ColumnNode::ColumnNode(NameAndTypePair column_, QueryTreeNodeWeakPtr column_source_)\n+ColumnNode::ColumnNode(\n+    NameAndTypePair column_,\n+    QueryTreeNodeWeakPtr column_source_\n+)\n     : ColumnNode(std::move(column_), nullptr /*expression_node*/, std::move(column_source_))\n-{\n-}\n+{}\n \n QueryTreeNodePtr ColumnNode::getColumnSource() const\n {\ndiff --git a/src/Analyzer/Resolve/ExpressionsStack.h b/src/Analyzer/Resolve/ExpressionsStack.h\nindex 82a27aa8b83e..3391c9d3e3f4 100644\n--- a/src/Analyzer/Resolve/ExpressionsStack.h\n+++ b/src/Analyzer/Resolve/ExpressionsStack.h\n@@ -92,11 +92,11 @@ class ExpressionsStack\n \n     void dump(WriteBuffer & buffer) const\n     {\n-        buffer << expressions.size() << '\\n';\n+        buffer << \"Expression resolve process stack size: \" << expressions.size() << '\\n';\n \n         for (const auto & expression : expressions)\n         {\n-            buffer << \"Expression \";\n+            buffer << \" Expression \";\n             buffer << expression->formatASTForErrorMessage();\n \n             const auto & alias = expression->getAlias();\ndiff --git a/src/Analyzer/Resolve/IdentifierLookup.h b/src/Analyzer/Resolve/IdentifierLookup.h\nindex 570d3b33bce5..dbde19e772a0 100644\n--- a/src/Analyzer/Resolve/IdentifierLookup.h\n+++ b/src/Analyzer/Resolve/IdentifierLookup.h\n@@ -109,41 +109,46 @@ inline const char * toString(IdentifierResolvePlace resolved_identifier_place)\n     }\n }\n \n+struct IdentifierResolveScope;\n+\n struct IdentifierResolveResult\n {\n-    IdentifierResolveResult() = default;\n-\n     QueryTreeNodePtr resolved_identifier;\n     IdentifierResolvePlace resolve_place = IdentifierResolvePlace::NONE;\n-    bool resolved_from_parent_scopes = false;\n \n-    [[maybe_unused]] bool isResolved() const\n+    explicit operator bool() const\n     {\n-        return resolve_place != IdentifierResolvePlace::NONE;\n+        chassert(check_invariant());\n+        return resolved_identifier != nullptr;\n     }\n \n-    [[maybe_unused]] bool isResolvedFromParentScopes() const\n+    [[maybe_unused]] bool isResolved() const\n     {\n-        return resolved_from_parent_scopes;\n+        chassert(check_invariant());\n+        return resolve_place != IdentifierResolvePlace::NONE;\n     }\n \n     [[maybe_unused]] bool isResolvedFromExpressionArguments() const\n     {\n+        chassert(check_invariant());\n         return resolve_place == IdentifierResolvePlace::EXPRESSION_ARGUMENTS;\n     }\n \n     [[maybe_unused]] bool isResolvedFromAliases() const\n     {\n+        chassert(check_invariant());\n         return resolve_place == IdentifierResolvePlace::ALIASES;\n     }\n \n     [[maybe_unused]] bool isResolvedFromJoinTree() const\n     {\n+        chassert(check_invariant());\n         return resolve_place == IdentifierResolvePlace::JOIN_TREE;\n     }\n \n     [[maybe_unused]] bool isResolvedFromCTEs() const\n     {\n+        chassert(check_invariant());\n         return resolve_place == IdentifierResolvePlace::CTE;\n     }\n \n@@ -155,7 +160,7 @@ struct IdentifierResolveResult\n             return;\n         }\n \n-        buffer << resolved_identifier->formatASTForErrorMessage() << \" place \" << toString(resolve_place) << \" resolved from parent scopes \" << resolved_from_parent_scopes;\n+        buffer << resolved_identifier->formatASTForErrorMessage() << \" place \" << toString(resolve_place);\n     }\n \n     [[maybe_unused]] String dump() const\n@@ -165,19 +170,31 @@ struct IdentifierResolveResult\n \n         return buffer.str();\n     }\n+\n+private:\n+    bool check_invariant() const noexcept\n+    {\n+        return (resolved_identifier == nullptr) == (resolve_place == IdentifierResolvePlace::NONE);\n+    }\n };\n \n struct IdentifierResolveState\n {\n-    IdentifierResolveResult resolve_result;\n-    bool cyclic_identifier_resolve = false;\n+    size_t count = 1;\n };\n \n-struct IdentifierResolveSettings\n+struct IdentifierResolveContext\n {\n     /// Allow to check join tree during identifier resolution\n     bool allow_to_check_join_tree = true;\n \n+    /// Allow to check aliases during identifier resolution.\n+    /// It's not allowed to use aliases during identifier resolution in parent scopes:\n+    /// 1. If enable_global_with_statement is disabled.\n+    /// 2. If initial scope is a QueryNode and it's TableExpression lookup,\n+    ///    identifier is allowed to be resolved only as CTE.\n+    bool allow_to_check_aliases = true;\n+\n     /// Allow to check CTEs during table identifier resolution\n     bool allow_to_check_cte = true;\n \n@@ -189,6 +206,17 @@ struct IdentifierResolveSettings\n \n     /// Allow to resolve subquery during identifier resolution\n     bool allow_to_resolve_subquery_during_identifier_resolution = true;\n+\n+    /// Initial scope where identifier resolution started.\n+    /// Should be used to resolve aliased expressions.\n+    IdentifierResolveScope * scope_to_resolve_alias_expression = nullptr;\n+\n+    IdentifierResolveContext & resolveAliasesAt(IdentifierResolveScope * scope_to_resolve_alias_expression_)\n+    {\n+        if (!scope_to_resolve_alias_expression)\n+            scope_to_resolve_alias_expression = scope_to_resolve_alias_expression_;\n+        return *this;\n+    }\n };\n \n }\ndiff --git a/src/Analyzer/Resolve/IdentifierResolveScope.cpp b/src/Analyzer/Resolve/IdentifierResolveScope.cpp\nindex 84f6d500f1e7..0f9f099b9e25 100644\n--- a/src/Analyzer/Resolve/IdentifierResolveScope.cpp\n+++ b/src/Analyzer/Resolve/IdentifierResolveScope.cpp\n@@ -46,8 +46,6 @@ IdentifierResolveScope::IdentifierResolveScope(QueryTreeNodePtr scope_node_, Ide\n         join_use_nulls = context->getSettingsRef()[Setting::join_use_nulls];\n     else if (parent_scope)\n         join_use_nulls = parent_scope->join_use_nulls;\n-\n-    aliases.alias_name_to_expression_node = &aliases.alias_name_to_expression_node_before_group_by;\n }\n \n [[maybe_unused]] const IdentifierResolveScope * IdentifierResolveScope::getNearestQueryScope() const\n@@ -108,76 +106,77 @@ const AnalysisTableExpressionData & IdentifierResolveScope::getTableExpressionDa\n \n void IdentifierResolveScope::pushExpressionNode(const QueryTreeNodePtr & node)\n {\n-    bool had_aggregate_function = expressions_in_resolve_process_stack.hasAggregateFunction();\n     expressions_in_resolve_process_stack.push(node);\n-    if (group_by_use_nulls && had_aggregate_function != expressions_in_resolve_process_stack.hasAggregateFunction())\n-        aliases.alias_name_to_expression_node = &aliases.alias_name_to_expression_node_before_group_by;\n }\n \n void IdentifierResolveScope::popExpressionNode()\n {\n-    bool had_aggregate_function = expressions_in_resolve_process_stack.hasAggregateFunction();\n     expressions_in_resolve_process_stack.pop();\n-    if (group_by_use_nulls && had_aggregate_function != expressions_in_resolve_process_stack.hasAggregateFunction())\n-        aliases.alias_name_to_expression_node = &aliases.alias_name_to_expression_node_after_group_by;\n }\n \n-/// Dump identifier resolve scope\n-[[maybe_unused]] void IdentifierResolveScope::dump(WriteBuffer & buffer) const\n+namespace\n {\n-    buffer << \"Scope node \" << scope_node->formatASTForErrorMessage() << '\\n';\n-    buffer << \"Identifier lookup to resolve state \" << identifier_lookup_to_resolve_state.size() << '\\n';\n-    for (const auto & [identifier, state] : identifier_lookup_to_resolve_state)\n-    {\n-        buffer << \"Identifier \" << identifier.dump() << \" resolve result \";\n-        state.resolve_result.dump(buffer);\n-        buffer << '\\n';\n-    }\n \n-    buffer << \"Expression argument name to node \" << expression_argument_name_to_node.size() << '\\n';\n-    for (const auto & [alias_name, node] : expression_argument_name_to_node)\n-        buffer << \"Alias name \" << alias_name << \" node \" << node->formatASTForErrorMessage() << '\\n';\n+void dump_mapping(WriteBuffer & buffer, const String & mapping_name, const std::unordered_map<std::string, QueryTreeNodePtr> & mapping)\n+{\n+    if (mapping.empty())\n+        return;\n \n-    buffer << \"Alias name to expression node table size \" << aliases.alias_name_to_expression_node->size() << '\\n';\n-    for (const auto & [alias_name, node] : *aliases.alias_name_to_expression_node)\n-        buffer << \"Alias name \" << alias_name << \" expression node \" << node->dumpTree() << '\\n';\n+    buffer << mapping_name << \" table size: \" << mapping.size() << '\\n';\n+    for (const auto & [alias_name, node] : mapping)\n+        buffer << \" { '\" << alias_name << \"' : \" << node->formatASTForErrorMessage() << \" }\\n\";\n+}\n \n-    buffer << \"Alias name to function node table size \" << aliases.alias_name_to_lambda_node.size() << '\\n';\n-    for (const auto & [alias_name, node] : aliases.alias_name_to_lambda_node)\n-        buffer << \"Alias name \" << alias_name << \" lambda node \" << node->formatASTForErrorMessage() << '\\n';\n+void dump_list(WriteBuffer & buffer, const String & list_name, const std::ranges::viewable_range auto & list)\n+{\n+    if (list.empty())\n+        return;\n \n-    buffer << \"Alias name to table expression node table size \" << aliases.alias_name_to_table_expression_node.size() << '\\n';\n-    for (const auto & [alias_name, node] : aliases.alias_name_to_table_expression_node)\n-        buffer << \"Alias name \" << alias_name << \" node \" << node->formatASTForErrorMessage() << '\\n';\n+    buffer << list_name << \" table size: \" << list.size() << '\\n';\n+    for (const auto & node : list)\n+        buffer << \" { '\" << node->getAlias() << \"' : \" << node->formatASTForErrorMessage() << \" }\\n\";\n+}\n \n-    buffer << \"CTE name to query node table size \" << cte_name_to_query_node.size() << '\\n';\n-    for (const auto & [cte_name, node] : cte_name_to_query_node)\n-        buffer << \"CTE name \" << cte_name << \" node \" << node->formatASTForErrorMessage() << '\\n';\n+}\n \n-    buffer << \"WINDOW name to window node table size \" << window_name_to_window_node.size() << '\\n';\n-    for (const auto & [window_name, node] : window_name_to_window_node)\n-        buffer << \"CTE name \" << window_name << \" node \" << node->formatASTForErrorMessage() << '\\n';\n+/// Dump identifier resolve scope\n+[[maybe_unused]] void IdentifierResolveScope::dump(WriteBuffer & buffer) const\n+{\n+    buffer << \"Scope node \" << scope_node->formatConvertedASTForErrorMessage() << '\\n';\n \n-    buffer << \"Nodes with duplicated aliases size \" << aliases.nodes_with_duplicated_aliases.size() << '\\n';\n-    for (const auto & node : aliases.nodes_with_duplicated_aliases)\n-        buffer << \"Alias name \" << node->getAlias() << \" node \" << node->formatASTForErrorMessage() << '\\n';\n+    buffer << \"Identifier lookup to resolve state \" << identifier_in_lookup_process.size() << '\\n';\n+    for (const auto & [identifier, state] : identifier_in_lookup_process)\n+    {\n+        buffer << \" { '\" << identifier.dump() << \"' : \";\n+        buffer << state.count;\n+        buffer << \" }\\n\";\n+    }\n \n-    buffer << \"Expression resolve process stack \" << '\\n';\n-    expressions_in_resolve_process_stack.dump(buffer);\n+    dump_mapping(buffer, \"Expression argument name to node\", expression_argument_name_to_node);\n+    dump_mapping(buffer, \"Alias name to expression node\", aliases.alias_name_to_expression_node);\n+    dump_mapping(buffer, \"Alias name to function node\", aliases.alias_name_to_lambda_node);\n+    dump_mapping(buffer, \"Alias name to table expression node\", aliases.alias_name_to_table_expression_node);\n+    dump_mapping(buffer, \"CTE name to query node\", cte_name_to_query_node);\n+    dump_mapping(buffer, \"WINDOW name to window node\", window_name_to_window_node);\n \n-    buffer << \"Table expressions in resolve process size \" << table_expressions_in_resolve_process.size() << '\\n';\n-    for (const auto & node : table_expressions_in_resolve_process)\n-        buffer << \"Table expression \" << node->formatASTForErrorMessage() << '\\n';\n+    dump_list(buffer, \"Nodes with duplicated aliases size \", aliases.nodes_with_duplicated_aliases);\n+    dump_list(buffer, \"Nodes to remove aliases \", aliases.node_to_remove_aliases);\n \n-    buffer << \"Non cached identifier lookups during expression resolve \" << non_cached_identifier_lookups_during_expression_resolve.size() << '\\n';\n-    for (const auto & identifier_lookup : non_cached_identifier_lookups_during_expression_resolve)\n-        buffer << \"Identifier lookup \" << identifier_lookup.dump() << '\\n';\n+    expressions_in_resolve_process_stack.dump(buffer);\n \n-    buffer << \"Table expression node to data \" << table_expression_node_to_data.size() << '\\n';\n+    if (!table_expressions_in_resolve_process.empty())\n+    {\n+        buffer << \"Table expressions in resolve process size \" << table_expressions_in_resolve_process.size() << '\\n';\n+        for (const auto & node : table_expressions_in_resolve_process)\n+            buffer << \" { \" << node->formatASTForErrorMessage() << \" }\\n\";\n+    }\n+\n+    buffer << \"Table expression node to data: \" << table_expression_node_to_data.size() << '\\n';\n     for (const auto & [table_expression_node, table_expression_data] : table_expression_node_to_data)\n-        buffer << \"Table expression node \" << table_expression_node->formatASTForErrorMessage() << \" data \" << table_expression_data.dump() << '\\n';\n+        buffer << \" { \" << table_expression_node->formatASTForErrorMessage() << \" data:\\n  \" << table_expression_data.dump() << \" }\\n\";\n+\n+    dump_list(buffer, \"Registered table expression nodes\", registered_table_expression_nodes);\n \n-    buffer << \"Use identifier lookup to result cache \" << use_identifier_lookup_to_result_cache << '\\n';\n     buffer << \"Subquery depth \" << subquery_depth << '\\n';\n }\n \ndiff --git a/src/Analyzer/Resolve/IdentifierResolveScope.h b/src/Analyzer/Resolve/IdentifierResolveScope.h\nindex ec46ce4370e1..63f9d092c250 100644\n--- a/src/Analyzer/Resolve/IdentifierResolveScope.h\n+++ b/src/Analyzer/Resolve/IdentifierResolveScope.h\n@@ -137,7 +137,7 @@ struct IdentifierResolveScope\n     ContextPtr context;\n \n     /// Identifier lookup to result\n-    std::unordered_map<IdentifierLookup, IdentifierResolveState, IdentifierLookupHash> identifier_lookup_to_resolve_state;\n+    std::unordered_map<IdentifierLookup, IdentifierResolveState, IdentifierLookupHash> identifier_in_lookup_process;\n \n     /// Argument can be expression like constant, column, function or table expression\n     std::unordered_map<std::string, QueryTreeNodePtr> expression_argument_name_to_node;\n@@ -159,9 +159,6 @@ struct IdentifierResolveScope\n     /// Table expressions in resolve process\n     std::unordered_set<const IQueryTreeNode *> table_expressions_in_resolve_process;\n \n-    /// Current scope expression\n-    std::unordered_set<IdentifierLookup, IdentifierLookupHash> non_cached_identifier_lookups_during_expression_resolve;\n-\n     /// Table expression node to data\n     std::unordered_map<QueryTreeNodePtr, AnalysisTableExpressionData> table_expression_node_to_data;\n \n@@ -169,12 +166,6 @@ struct IdentifierResolveScope\n     std::unordered_set<QueryTreeNodePtr> registered_table_expression_nodes;\n \n     QueryTreeNodePtrWithHashIgnoreTypesSet nullable_group_by_keys;\n-    /// Here we count the number of nullable GROUP BY keys we met resolving expression.\n-    /// E.g. for a query `SELECT tuple(tuple(number)) FROM numbers(10) GROUP BY (number, tuple(number)) with cube`\n-    /// both `number` and `tuple(number)` would be in nullable_group_by_keys.\n-    /// But when we resolve `tuple(tuple(number))` we should figure out that `tuple(number)` is already a key,\n-    /// and we should not convert `number` to nullable.\n-    size_t found_nullable_group_by_key_in_scope = 0;\n \n     /** It's possible that after a JOIN, a column in the projection has a type different from the column in the source table.\n       * (For example, after join_use_nulls or USING column cast to supertype)\n@@ -183,9 +174,6 @@ struct IdentifierResolveScope\n       */\n     QueryTreeNodePtrWithHashMap<QueryTreeNodePtr> join_columns_with_changed_types;\n \n-    /// Use identifier lookup to result cache\n-    bool use_identifier_lookup_to_result_cache = true;\n-\n     /// Apply nullability to aggregation keys\n     bool group_by_use_nulls = false;\n     /// Join retutns NULLs instead of default values\ndiff --git a/src/Analyzer/Resolve/IdentifierResolver.cpp b/src/Analyzer/Resolve/IdentifierResolver.cpp\nindex f7b114f7dafd..e53286e356b1 100644\n--- a/src/Analyzer/Resolve/IdentifierResolver.cpp\n+++ b/src/Analyzer/Resolve/IdentifierResolver.cpp\n@@ -228,18 +228,22 @@ void IdentifierResolver::collectScopeValidIdentifiersForTypoCorrection(\n \n     if (allow_expression_identifiers)\n     {\n-        for (const auto & [name, expression] : *scope.aliases.alias_name_to_expression_node)\n+        for (const auto & [name, expression] : scope.aliases.alias_name_to_expression_node)\n         {\n             assert(expression);\n             auto expression_identifier = Identifier(name);\n             valid_identifiers_result.insert(expression_identifier);\n+        }\n \n-            auto result_type = getExpressionNodeResultTypeOrNull(expression);\n-\n-            if (identifier_is_compound && result_type)\n+        if (identifier_is_compound)\n+        {\n+            for (const auto & [name, expression_type] : scope.aliases.alias_name_to_expression_type)\n             {\n+                chassert(expression_type);\n+                auto expression_identifier = Identifier(name);\n+\n                 collectCompoundExpressionValidIdentifiersForTypoCorrection(unresolved_identifier,\n-                    result_type,\n+                    expression_type,\n                     expression_identifier,\n                     valid_identifiers_result);\n             }\n@@ -258,7 +262,7 @@ void IdentifierResolver::collectScopeValidIdentifiersForTypoCorrection(\n     {\n         if (allow_function_identifiers)\n         {\n-            for (const auto & [name, _] : *scope.aliases.alias_name_to_expression_node)\n+            for (const auto & [name, _] : scope.aliases.alias_name_to_expression_node)\n                 valid_identifiers_result.insert(Identifier(name));\n         }\n \n@@ -393,7 +397,7 @@ QueryTreeNodePtr IdentifierResolver::wrapExpressionNodeInTupleElement(QueryTreeN\n /// Resolve identifier functions implementation\n \n /// Try resolve table identifier from database catalog\n-std::shared_ptr<TableNode> IdentifierResolver::tryResolveTableIdentifierFromDatabaseCatalog(const Identifier & table_identifier, ContextPtr context)\n+IdentifierResolveResult IdentifierResolver::tryResolveTableIdentifierFromDatabaseCatalog(const Identifier & table_identifier, const ContextPtr & context)\n {\n     size_t parts_size = table_identifier.getPartsSize();\n     if (parts_size < 1 || parts_size > 2)\n@@ -455,7 +459,7 @@ std::shared_ptr<TableNode> IdentifierResolver::tryResolveTableIdentifierFromData\n     if (is_temporary_table)\n         result->setTemporaryTableName(table_name);\n \n-    return result;\n+    return { .resolved_identifier = result, .resolve_place = IdentifierResolvePlace::DATABASE_CATALOG };\n }\n \n /// Resolve identifier from compound expression\n@@ -540,7 +544,7 @@ QueryTreeNodePtr IdentifierResolver::tryResolveIdentifierFromCompoundExpression(\n   *\n   * 3. If identifier is compound and identifier lookup is in expression context use `tryResolveIdentifierFromCompoundExpression`.\n   */\n-QueryTreeNodePtr IdentifierResolver::tryResolveIdentifierFromExpressionArguments(const IdentifierLookup & identifier_lookup, IdentifierResolveScope & scope)\n+IdentifierResolveResult IdentifierResolver::tryResolveIdentifierFromExpressionArguments(const IdentifierLookup & identifier_lookup, IdentifierResolveScope & scope)\n {\n     auto it = scope.expression_argument_name_to_node.find(identifier_lookup.identifier.getFullName());\n     bool resolve_full_identifier = it != scope.expression_argument_name_to_node.end();\n@@ -563,9 +567,13 @@ QueryTreeNodePtr IdentifierResolver::tryResolveIdentifierFromExpressionArguments\n         return {};\n \n     if (!resolve_full_identifier && identifier_lookup.identifier.isCompound() && identifier_lookup.isExpressionLookup())\n-        return tryResolveIdentifierFromCompoundExpression(identifier_lookup.identifier, 1 /*identifier_bind_size*/, it->second, {}, scope);\n+    {\n+        if (auto resolved_identifier = tryResolveIdentifierFromCompoundExpression(identifier_lookup.identifier, 1 /*identifier_bind_size*/, it->second, {}, scope))\n+            return { .resolved_identifier = resolved_identifier, .resolve_place = IdentifierResolvePlace::EXPRESSION_ARGUMENTS };\n+        return {};\n+    }\n \n-    return it->second;\n+    return { .resolved_identifier = it->second, .resolve_place = IdentifierResolvePlace::EXPRESSION_ARGUMENTS };\n }\n \n bool IdentifierResolver::tryBindIdentifierToAliases(const IdentifierLookup & identifier_lookup, const IdentifierResolveScope & scope)\n@@ -706,7 +714,7 @@ bool IdentifierResolver::tryBindIdentifierToArrayJoinExpressions(const Identifie\n     return result;\n }\n \n-QueryTreeNodePtr IdentifierResolver::tryResolveIdentifierFromStorage(\n+IdentifierResolveResult IdentifierResolver::tryResolveIdentifierFromStorage(\n     const Identifier & identifier,\n     const QueryTreeNodePtr & table_expression_node,\n     const AnalysisTableExpressionData & table_expression_data,\n@@ -898,10 +906,10 @@ QueryTreeNodePtr IdentifierResolver::tryResolveIdentifierFromStorage(\n     auto qualified_identifier_full_name = qualified_identifier.getFullName();\n     node_to_projection_name.emplace(result_expression, std::move(qualified_identifier_full_name));\n \n-    return result_expression;\n+    return { .resolved_identifier = result_expression, .resolve_place = IdentifierResolvePlace::JOIN_TREE };\n }\n \n-QueryTreeNodePtr IdentifierResolver::tryResolveIdentifierFromTableExpression(const IdentifierLookup & identifier_lookup,\n+IdentifierResolveResult IdentifierResolver::tryResolveIdentifierFromTableExpression(const IdentifierLookup & identifier_lookup,\n     const QueryTreeNodePtr & table_expression_node,\n     IdentifierResolveScope & scope)\n {\n@@ -934,10 +942,11 @@ QueryTreeNodePtr IdentifierResolver::tryResolveIdentifierFromTableExpression(con\n         const auto & database_name = table_expression_data.database_name;\n \n         if (parts_size == 1 && path_start == table_name)\n-            return table_expression_node;\n-        if (parts_size == 2 && path_start == database_name && identifier[1] == table_name)\n-            return table_expression_node;\n-        return {};\n+            return { .resolved_identifier = table_expression_node, .resolve_place = IdentifierResolvePlace::JOIN_TREE };\n+        else if (parts_size == 2 && path_start == database_name && identifier[1] == table_name)\n+            return { .resolved_identifier = table_expression_node, .resolve_place = IdentifierResolvePlace::JOIN_TREE };\n+        else\n+            return {};\n     }\n \n      /** If identifier first part binds to some column start or table has full identifier name. Then we can try to find whole identifier in table.\n@@ -958,9 +967,9 @@ QueryTreeNodePtr IdentifierResolver::tryResolveIdentifierFromTableExpression(con\n           * Example: `SELECT t.t from (SELECT 1 as t) AS a FULL JOIN (SELECT 1 as t) as t ON a.t = t.t;`\n           * Initially, we will try to resolve t.t from `a` because `t.` is bound to `1 as t`. However, as it is not a nested column, we will need to resolve it from the second table expression.\n           */\n-        auto resolved_identifier = tryResolveIdentifierFromStorage(identifier, table_expression_node, table_expression_data, scope, 0 /*identifier_column_qualifier_parts*/, true /*can_be_not_found*/);\n-        if (resolved_identifier)\n-            return resolved_identifier;\n+        auto lookup_result = tryResolveIdentifierFromStorage(identifier, table_expression_node, table_expression_data, scope, 0 /*identifier_column_qualifier_parts*/, true /*can_be_not_found*/);\n+        if (lookup_result.resolved_identifier)\n+            return lookup_result;\n     }\n \n     if (identifier.getPartsSize() == 1)\n@@ -1036,23 +1045,23 @@ static JoinTableSide choseSideForEqualIdenfifiersFromJoin(\n     return JoinTableSide::Left;\n }\n \n-QueryTreeNodePtr IdentifierResolver::tryResolveIdentifierFromCrossJoin(const IdentifierLookup & identifier_lookup,\n+IdentifierResolveResult IdentifierResolver::tryResolveIdentifierFromCrossJoin(const IdentifierLookup & identifier_lookup,\n     const QueryTreeNodePtr & table_expression_node,\n     IdentifierResolveScope & scope)\n {\n     const auto & from_cross_join_node = table_expression_node->as<const CrossJoinNode &>();\n     bool prefer_left_table = scope.joins_count == 1 && scope.context->getSettingsRef()[Setting::single_join_prefer_left_table];\n \n-    QueryTreeNodePtr resolved_identifier;\n+    IdentifierResolveResult resolve_result;\n     for (const auto & expr : from_cross_join_node.getTableExpressions())\n     {\n         auto identifier = tryResolveIdentifierFromJoinTreeNode(identifier_lookup, expr, scope);\n         if (!identifier)\n             continue;\n \n-        if (!resolved_identifier)\n+        if (!resolve_result)\n         {\n-            resolved_identifier = std::move(identifier);\n+            resolve_result = std::move(identifier);\n             continue;\n         }\n \n@@ -1063,25 +1072,22 @@ QueryTreeNodePtr IdentifierResolver::tryResolveIdentifierFromCrossJoin(const Ide\n                 identifier_lookup.dump(),\n                 scope.scope_node->formatASTForErrorMessage());\n \n-\n-        resolved_identifier->isEqual(*identifier, IQueryTreeNode::CompareOptions{.compare_aliases = false});\n-\n         /// If columns from left or right table were missed Object(Nullable('json')) subcolumns, they will be replaced\n         /// to ConstantNode(NULL), which can't be cast to ColumnNode, so we resolve it here.\n         // if (auto missed_subcolumn_identifier = checkIsMissedObjectJSONSubcolumn(left_resolved_identifier, right_resolved_identifier))\n         //     return missed_subcolumn_identifier;\n \n-        if (resolved_identifier->isEqual(*identifier, IQueryTreeNode::CompareOptions{.compare_aliases = false}))\n+        if (resolve_result.resolved_identifier->isEqual(*identifier.resolved_identifier, IQueryTreeNode::CompareOptions{.compare_aliases = false}))\n         {\n             const auto & identifier_path_part = identifier_lookup.identifier.front();\n-            auto * left_resolved_identifier_column = resolved_identifier->as<ColumnNode>();\n-            auto * right_resolved_identifier_column = identifier->as<ColumnNode>();\n+            auto * left_resolved_identifier_column = resolve_result.resolved_identifier->as<ColumnNode>();\n+            auto * right_resolved_identifier_column = identifier.resolved_identifier->as<ColumnNode>();\n \n             if (left_resolved_identifier_column && right_resolved_identifier_column)\n             {\n                 auto resolved_side = choseSideForEqualIdenfifiersFromJoin(*left_resolved_identifier_column, *right_resolved_identifier_column, identifier_path_part);\n                 if (resolved_side == JoinTableSide::Right)\n-                    resolved_identifier = identifier;\n+                    resolve_result = identifier;\n             }\n         }\n         else if (!prefer_left_table)\n@@ -1094,7 +1100,7 @@ QueryTreeNodePtr IdentifierResolver::tryResolveIdentifierFromCrossJoin(const Ide\n         }\n     }\n \n-    return resolved_identifier;\n+    return resolve_result;\n }\n \n /// Compare resolved identifiers considering columns that become nullable after JOIN\n@@ -1112,13 +1118,13 @@ bool resolvedIdenfiersFromJoinAreEquals(\n     return left_resolved_to_compare->isEqual(*right_resolved_to_compare, IQueryTreeNode::CompareOptions{.compare_aliases = false});\n }\n \n-QueryTreeNodePtr IdentifierResolver::tryResolveIdentifierFromJoin(const IdentifierLookup & identifier_lookup,\n+IdentifierResolveResult IdentifierResolver::tryResolveIdentifierFromJoin(const IdentifierLookup & identifier_lookup,\n     const QueryTreeNodePtr & table_expression_node,\n     IdentifierResolveScope & scope)\n {\n     const auto & from_join_node = table_expression_node->as<const JoinNode &>();\n-    auto left_resolved_identifier = tryResolveIdentifierFromJoinTreeNode(identifier_lookup, from_join_node.getLeftTableExpression(), scope);\n-    auto right_resolved_identifier = tryResolveIdentifierFromJoinTreeNode(identifier_lookup, from_join_node.getRightTableExpression(), scope);\n+    auto left_resolved_identifier = tryResolveIdentifierFromJoinTreeNode(identifier_lookup, from_join_node.getLeftTableExpression(), scope).resolved_identifier;\n+    auto right_resolved_identifier = tryResolveIdentifierFromJoinTreeNode(identifier_lookup, from_join_node.getRightTableExpression(), scope).resolved_identifier;\n \n     if (!identifier_lookup.isExpressionLookup())\n     {\n@@ -1129,7 +1135,10 @@ QueryTreeNodePtr IdentifierResolver::tryResolveIdentifierFromJoin(const Identifi\n                 identifier_lookup.dump(),\n                 scope.scope_node->formatASTForErrorMessage());\n \n-        return left_resolved_identifier ? left_resolved_identifier : right_resolved_identifier;\n+        return {\n+                .resolved_identifier = left_resolved_identifier ? left_resolved_identifier : right_resolved_identifier,\n+                .resolve_place = IdentifierResolvePlace::JOIN_TREE\n+            };\n     }\n \n     bool join_node_in_resolve_process = scope.table_expressions_in_resolve_process.contains(table_expression_node.get());\n@@ -1212,7 +1221,7 @@ QueryTreeNodePtr IdentifierResolver::tryResolveIdentifierFromJoin(const Identifi\n     /// If columns from left or right table were missed Object(Nullable('json')) subcolumns, they will be replaced\n     /// to ConstantNode(NULL), which can't be cast to ColumnNode, so we resolve it here.\n     if (auto missed_subcolumn_identifier = checkIsMissedObjectJSONSubcolumn(left_resolved_identifier, right_resolved_identifier))\n-        return missed_subcolumn_identifier;\n+        return { .resolved_identifier = missed_subcolumn_identifier, .resolve_place = IdentifierResolvePlace::JOIN_TREE };\n \n     if (left_resolved_identifier && right_resolved_identifier)\n     {\n@@ -1332,8 +1341,11 @@ QueryTreeNodePtr IdentifierResolver::tryResolveIdentifierFromJoin(const Identifi\n         }\n     }\n \n-    if (join_node_in_resolve_process || !resolved_identifier)\n-        return resolved_identifier;\n+    if (!resolved_identifier)\n+        return {};\n+\n+    if (join_node_in_resolve_process)\n+        return { .resolved_identifier = resolved_identifier, .resolve_place = IdentifierResolvePlace::JOIN_TREE };\n \n     if (scope.join_use_nulls)\n     {\n@@ -1350,7 +1362,7 @@ QueryTreeNodePtr IdentifierResolver::tryResolveIdentifierFromJoin(const Identifi\n         }\n     }\n \n-    return resolved_identifier;\n+    return { .resolved_identifier = resolved_identifier, .resolve_place = IdentifierResolvePlace::JOIN_TREE };\n }\n \n QueryTreeNodePtr IdentifierResolver::matchArrayJoinSubcolumns(\n@@ -1492,15 +1504,15 @@ QueryTreeNodePtr IdentifierResolver::tryResolveExpressionFromArrayJoinExpression\n     return array_join_resolved_expression;\n }\n \n-QueryTreeNodePtr IdentifierResolver::tryResolveIdentifierFromArrayJoin(const IdentifierLookup & identifier_lookup,\n+IdentifierResolveResult IdentifierResolver::tryResolveIdentifierFromArrayJoin(const IdentifierLookup & identifier_lookup,\n     const QueryTreeNodePtr & table_expression_node,\n     IdentifierResolveScope & scope)\n {\n     const auto & from_array_join_node = table_expression_node->as<const ArrayJoinNode &>();\n-    auto resolved_identifier = tryResolveIdentifierFromJoinTreeNode(identifier_lookup, from_array_join_node.getTableExpression(), scope);\n+    auto resolve_result = tryResolveIdentifierFromJoinTreeNode(identifier_lookup, from_array_join_node.getTableExpression(), scope);\n \n     if (scope.table_expressions_in_resolve_process.contains(table_expression_node.get()) || !identifier_lookup.isExpressionLookup())\n-        return resolved_identifier;\n+        return resolve_result;\n \n     const auto & array_join_column_expressions = from_array_join_node.getJoinExpressions();\n     const auto & array_join_column_expressions_nodes = array_join_column_expressions.getNodes();\n@@ -1530,14 +1542,14 @@ QueryTreeNodePtr IdentifierResolver::tryResolveIdentifierFromArrayJoin(const Ide\n         auto array_join_column = std::make_shared<ColumnNode>(array_join_column_expression_typed.getColumn(),\n             array_join_column_expression_typed.getColumnSource());\n         if (identifier_view.empty())\n-            return array_join_column;\n+            return { .resolved_identifier = array_join_column, .resolve_place = IdentifierResolvePlace::JOIN_TREE };\n \n-        if (resolved_identifier)\n+        if (resolve_result.resolved_identifier)\n         {\n             auto resolved_nested_subcolumn = tryResolveExpressionFromArrayJoinNestedExpression(\n-                    resolved_identifier, scope, array_join_column_expression_typed, array_join_column_expression_typed.getExpressionOrThrow());\n+                    resolve_result.resolved_identifier, scope, array_join_column_expression_typed, array_join_column_expression_typed.getExpressionOrThrow());\n             if (resolved_nested_subcolumn)\n-                return resolved_nested_subcolumn;\n+                return { .resolved_identifier = resolved_nested_subcolumn, .resolve_place = IdentifierResolvePlace::JOIN_TREE };\n         }\n \n         /// Resolve subcolumns. Example : SELECT x.y.z FROM tab ARRAY JOIN arr AS x\n@@ -1550,20 +1562,20 @@ QueryTreeNodePtr IdentifierResolver::tryResolveIdentifierFromArrayJoin(const Ide\n             true /* can_be_not_found */);\n \n         if (compound_expr)\n-            return compound_expr;\n+            return { .resolved_identifier = compound_expr, .resolve_place = IdentifierResolvePlace::JOIN_TREE };\n     }\n \n-    if (!resolved_identifier)\n-        return nullptr;\n+    if (!resolve_result.resolved_identifier)\n+        return {};\n \n-    auto array_join_resolved_expression = tryResolveExpressionFromArrayJoinExpressions(resolved_identifier, table_expression_node, scope);\n+    auto array_join_resolved_expression = tryResolveExpressionFromArrayJoinExpressions(resolve_result.resolved_identifier, table_expression_node, scope);\n     if (array_join_resolved_expression)\n-        resolved_identifier = std::move(array_join_resolved_expression);\n+        resolve_result = { .resolved_identifier = std::move(array_join_resolved_expression), .resolve_place = IdentifierResolvePlace::JOIN_TREE };\n \n-    return resolved_identifier;\n+    return resolve_result;\n }\n \n-QueryTreeNodePtr IdentifierResolver::tryResolveIdentifierFromJoinTreeNode(const IdentifierLookup & identifier_lookup,\n+IdentifierResolveResult IdentifierResolver::tryResolveIdentifierFromJoinTreeNode(const IdentifierLookup & identifier_lookup,\n     const QueryTreeNodePtr & join_tree_node,\n     IdentifierResolveScope & scope)\n {\n@@ -1616,7 +1628,7 @@ QueryTreeNodePtr IdentifierResolver::tryResolveIdentifierFromJoinTreeNode(const\n   * Start with identifier first part, if it match some column name in table try to get column with full identifier name.\n   * TODO: Need to check if it is okay to throw exception if compound identifier first part bind to column but column is not valid.\n   */\n-QueryTreeNodePtr IdentifierResolver::tryResolveIdentifierFromJoinTree(const IdentifierLookup & identifier_lookup,\n+IdentifierResolveResult IdentifierResolver::tryResolveIdentifierFromJoinTree(const IdentifierLookup & identifier_lookup,\n     IdentifierResolveScope & scope)\n {\n     if (identifier_lookup.isFunctionLookup())\n@@ -1624,7 +1636,7 @@ QueryTreeNodePtr IdentifierResolver::tryResolveIdentifierFromJoinTree(const Iden\n \n     /// Try to resolve identifier from table columns\n     if (auto resolved_identifier = tryResolveIdentifierFromTableColumns(identifier_lookup, scope))\n-        return resolved_identifier;\n+        return { .resolved_identifier = resolved_identifier, .resolve_place = IdentifierResolvePlace::JOIN_TREE };\n \n     if (scope.expression_join_tree_node)\n         return tryResolveIdentifierFromJoinTreeNode(identifier_lookup, scope.expression_join_tree_node, scope);\ndiff --git a/src/Analyzer/Resolve/IdentifierResolver.h b/src/Analyzer/Resolve/IdentifierResolver.h\nindex 3993b9c20966..9bf6dc206380 100644\n--- a/src/Analyzer/Resolve/IdentifierResolver.h\n+++ b/src/Analyzer/Resolve/IdentifierResolver.h\n@@ -32,11 +32,8 @@ class IdentifierResolver\n {\n public:\n \n-    IdentifierResolver(\n-        std::unordered_set<std::string_view> & ctes_in_resolve_process_,\n-        std::unordered_map<QueryTreeNodePtr, ProjectionName> & node_to_projection_name_)\n-        : ctes_in_resolve_process(ctes_in_resolve_process_)\n-        , node_to_projection_name(node_to_projection_name_)\n+    explicit IdentifierResolver(std::unordered_map<QueryTreeNodePtr, ProjectionName> & node_to_projection_name_)\n+        : node_to_projection_name(node_to_projection_name_)\n     {}\n \n     /// Utility functions\n@@ -87,7 +84,7 @@ class IdentifierResolver\n \n     /// Resolve identifier functions\n \n-    static std::shared_ptr<TableNode> tryResolveTableIdentifierFromDatabaseCatalog(const Identifier & table_identifier, ContextPtr context);\n+    static IdentifierResolveResult tryResolveTableIdentifierFromDatabaseCatalog(const Identifier & table_identifier, const ContextPtr & context);\n \n     QueryTreeNodePtr tryResolveIdentifierFromCompoundExpression(const Identifier & expression_identifier,\n         size_t identifier_bind_size,\n@@ -96,7 +93,7 @@ class IdentifierResolver\n         IdentifierResolveScope & scope,\n         bool can_be_not_found = false);\n \n-    QueryTreeNodePtr tryResolveIdentifierFromExpressionArguments(const IdentifierLookup & identifier_lookup, IdentifierResolveScope & scope);\n+    IdentifierResolveResult tryResolveIdentifierFromExpressionArguments(const IdentifierLookup & identifier_lookup, IdentifierResolveScope & scope);\n \n     static bool tryBindIdentifierToAliases(const IdentifierLookup & identifier_lookup, const IdentifierResolveScope & scope);\n \n@@ -113,15 +110,18 @@ class IdentifierResolver\n     static bool tryBindIdentifierToArrayJoinExpressions(const IdentifierLookup & identifier_lookup,\n         const IdentifierResolveScope & scope);\n \n-    QueryTreeNodePtr tryResolveIdentifierFromTableExpression(const IdentifierLookup & identifier_lookup,\n+    IdentifierResolveResult tryResolveIdentifierFromTableExpression(\n+        const IdentifierLookup & identifier_lookup,\n         const QueryTreeNodePtr & table_expression_node,\n         IdentifierResolveScope & scope);\n \n-    QueryTreeNodePtr tryResolveIdentifierFromCrossJoin(const IdentifierLookup & identifier_lookup,\n+    IdentifierResolveResult tryResolveIdentifierFromCrossJoin(\n+        const IdentifierLookup & identifier_lookup,\n         const QueryTreeNodePtr & table_expression_node,\n         IdentifierResolveScope & scope);\n \n-    QueryTreeNodePtr tryResolveIdentifierFromJoin(const IdentifierLookup & identifier_lookup,\n+    IdentifierResolveResult tryResolveIdentifierFromJoin(\n+        const IdentifierLookup & identifier_lookup,\n         const QueryTreeNodePtr & table_expression_node,\n         IdentifierResolveScope & scope);\n \n@@ -142,18 +142,18 @@ class IdentifierResolver\n         const QueryTreeNodePtr & table_expression_node,\n         IdentifierResolveScope & scope);\n \n-    QueryTreeNodePtr tryResolveIdentifierFromArrayJoin(const IdentifierLookup & identifier_lookup,\n+    IdentifierResolveResult tryResolveIdentifierFromArrayJoin(const IdentifierLookup & identifier_lookup,\n         const QueryTreeNodePtr & table_expression_node,\n         IdentifierResolveScope & scope);\n \n-    QueryTreeNodePtr tryResolveIdentifierFromJoinTreeNode(const IdentifierLookup & identifier_lookup,\n+    IdentifierResolveResult tryResolveIdentifierFromJoinTreeNode(const IdentifierLookup & identifier_lookup,\n         const QueryTreeNodePtr & join_tree_node,\n         IdentifierResolveScope & scope);\n \n-    QueryTreeNodePtr tryResolveIdentifierFromJoinTree(const IdentifierLookup & identifier_lookup,\n+    IdentifierResolveResult tryResolveIdentifierFromJoinTree(const IdentifierLookup & identifier_lookup,\n         IdentifierResolveScope & scope);\n \n-    QueryTreeNodePtr tryResolveIdentifierFromStorage(\n+    IdentifierResolveResult tryResolveIdentifierFromStorage(\n         const Identifier & identifier,\n         const QueryTreeNodePtr & table_expression_node,\n         const AnalysisTableExpressionData & table_expression_data,\n@@ -161,12 +161,8 @@ class IdentifierResolver\n         size_t identifier_column_qualifier_parts,\n         bool can_be_not_found = false);\n \n-    /// CTEs that are currently in resolve process\n-    std::unordered_set<std::string_view> & ctes_in_resolve_process;\n-\n     /// Global expression node to projection name map\n     std::unordered_map<QueryTreeNodePtr, ProjectionName> & node_to_projection_name;\n-\n };\n \n }\ndiff --git a/src/Analyzer/Resolve/QueryAnalyzer.cpp b/src/Analyzer/Resolve/QueryAnalyzer.cpp\nindex 564b3db6d5eb..b4586e2132e9 100644\n--- a/src/Analyzer/Resolve/QueryAnalyzer.cpp\n+++ b/src/Analyzer/Resolve/QueryAnalyzer.cpp\n@@ -120,7 +120,6 @@ namespace ErrorCodes\n     extern const int UNKNOWN_IDENTIFIER;\n     extern const int UNKNOWN_FUNCTION;\n     extern const int LOGICAL_ERROR;\n-    extern const int CYCLIC_ALIASES;\n     extern const int INCORRECT_RESULT_OF_SCALAR_SUBQUERY;\n     extern const int BAD_ARGUMENTS;\n     extern const int ILLEGAL_TYPE_OF_ARGUMENT;\n@@ -150,7 +149,7 @@ namespace ErrorCodes\n }\n \n QueryAnalyzer::QueryAnalyzer(bool only_analyze_)\n-    : identifier_resolver(ctes_in_resolve_process, node_to_projection_name)\n+    : identifier_resolver(node_to_projection_name)\n     , only_analyze(only_analyze_)\n {}\n \n@@ -1120,18 +1119,16 @@ std::string QueryAnalyzer::rewriteAggregateFunctionNameIfNeeded(\n /** Resolve identifier from scope aliases.\n   *\n   * Resolve strategy:\n-  * 1. If alias is registered in current expressions that are in resolve process and if top expression is not part of bottom expression with the same alias subtree\n-  * throw cyclic aliases exception.\n-  * Otherwise prevent cache usage for identifier lookup and return nullptr.\n+  * 1. Try to find identifier first part in the corresponding alias table.\n+  * 2. If alias is registered in current expressions that are in resolve process and if top expression is not part of bottom expression with the same alias subtree\n+  * it may be cyclic aliases.\n+  * In that case return nullptr and allow to continue identifier resolution in other places.\n+  * TODO: If following identifier resolution fails throw an CYCLIC_ALIASES exception.\n   *\n   * This is special scenario where identifier has name the same as alias name in one of its parent expressions including itself.\n   * In such case we cannot resolve identifier from aliases because of recursion. It is client responsibility to register and deregister alias\n   * names during expressions resolve.\n   *\n-  * We must prevent cache usage for lookup because lookup outside of expression is supposed to return other value.\n-  * Example: SELECT (id + 1) AS id, id + 2. Lookup for id inside (id + 1) as id should return id from table, but lookup (id + 2) should return\n-  * (id + 1) AS id.\n-  *\n   * Below cases should work:\n   * Example:\n   * SELECT id AS id FROM test_table;\n@@ -1143,9 +1140,9 @@ std::string QueryAnalyzer::rewriteAggregateFunctionNameIfNeeded(\n   * SELECT (id + b) AS id, id as b FROM test_table;\n   * SELECT (1 + b + 1 + id) AS id, b as c, id as b FROM test_table;\n   *\n-  * 2. Depending on IdentifierLookupContext get alias name to node map from IdentifierResolveScope.\n-  * 3. Try to bind identifier to alias name in map. If there are no such binding return nullptr.\n-  * 4. If node in map is not resolved, resolve it. It is important in case of compound expressions.\n+  * 3. Depending on IdentifierLookupContext select IdentifierResolveScope to resolve aliased expression.\n+  * 4. Clone query tree of aliased expression (do not clone table expression from join tree).\n+  * 5. Resolve the node. It is important in case of compound expressions.\n   * Example: SELECT value.a, cast('(1)', 'Tuple(a UInt64)') AS value;\n   *\n   * Special case if node is identifier node.\n@@ -1156,11 +1153,12 @@ std::string QueryAnalyzer::rewriteAggregateFunctionNameIfNeeded(\n   * If identifier is resolved, depending on lookup context, erase entry from expression or lambda map. Check QueryExpressionsAliasVisitor documentation.\n   * Pop node from current scope expressions in resolve process stack.\n   *\n-  * 5. If identifier is compound and identifier lookup is in expression context, use `tryResolveIdentifierFromCompoundExpression`.\n+  * 6. Save aliased expression result type for typo correction.\n+  * 7. If identifier is compound and identifier lookup is in expression context, use `tryResolveIdentifierFromCompoundExpression`.\n   */\n-QueryTreeNodePtr QueryAnalyzer::tryResolveIdentifierFromAliases(const IdentifierLookup & identifier_lookup,\n+IdentifierResolveResult QueryAnalyzer::tryResolveIdentifierFromAliases(const IdentifierLookup & identifier_lookup,\n     IdentifierResolveScope & scope,\n-    IdentifierResolveSettings identifier_resolve_settings)\n+    IdentifierResolveContext identifier_resolve_context)\n {\n     const auto & identifier_bind_part = identifier_lookup.identifier.front();\n \n@@ -1168,7 +1166,13 @@ QueryTreeNodePtr QueryAnalyzer::tryResolveIdentifierFromAliases(const Identifier\n     if (it == nullptr)\n         return {};\n \n-    QueryTreeNodePtr & alias_node = *it;\n+    auto * scope_to_resolve_alias_expression = &scope;\n+    if (identifier_resolve_context.scope_to_resolve_alias_expression)\n+    {\n+        scope_to_resolve_alias_expression = identifier_resolve_context.scope_to_resolve_alias_expression;\n+    }\n+\n+    QueryTreeNodePtr alias_node = *it;\n \n     if (!alias_node)\n         throw Exception(ErrorCodes::LOGICAL_ERROR,\n@@ -1176,72 +1180,87 @@ QueryTreeNodePtr QueryAnalyzer::tryResolveIdentifierFromAliases(const Identifier\n             identifier_bind_part,\n             scope.scope_node->formatASTForErrorMessage());\n \n-    if (auto root_expression_with_alias = scope.expressions_in_resolve_process_stack.getExpressionWithAlias(identifier_bind_part))\n+    auto node_type = alias_node->getNodeType();\n+    if (!identifier_lookup.isTableExpressionLookup())\n     {\n-        const auto top_expression = scope.expressions_in_resolve_process_stack.getTop();\n-\n-        if (!isNodePartOfTree(top_expression.get(), root_expression_with_alias.get()))\n-            throw Exception(ErrorCodes::CYCLIC_ALIASES,\n-                \"Cyclic aliases for identifier '{}'. In scope {}\",\n-                identifier_lookup.identifier.getFullName(),\n-                scope.scope_node->formatASTForErrorMessage());\n+        alias_node = alias_node->clone();\n+        scope_to_resolve_alias_expression->aliases.node_to_remove_aliases.push_back(alias_node);\n+    }\n \n-        scope.non_cached_identifier_lookups_during_expression_resolve.insert(identifier_lookup);\n+    /* Do not use alias to resolve identifier when it's part of aliased expression. This is required to support queries like:\n+     * 1. SELECT dummy + 1 AS dummy\n+     * 2. SELECT avg(a) OVER () AS a, id FROM test\n+     */\n+    if (scope.expressions_in_resolve_process_stack.getExpressionWithAlias(identifier_bind_part) != nullptr)\n+    {\n+        /* This is an important fallback in the identifier resolution. In the case of transitive aliases,\n+         * we may end up in the situation when we try to resolve the same expression, but it's not a cycle.\n+         * Example: WITH path('clickhouse.com/a/b/c') AS x SELECT x AS path;\n+         * Here, identifier `x` would be resolved one time as a projection column and one time during `path`\n+         * function lookup. The second lookup must fail here to break the alias cycle.\n+         */\n         return {};\n     }\n \n-    auto node_type = alias_node->getNodeType();\n-\n     /// Resolve expression if necessary\n     if (node_type == QueryTreeNodeType::IDENTIFIER)\n     {\n-        scope.pushExpressionNode(alias_node);\n+        scope_to_resolve_alias_expression->pushExpressionNode(alias_node);\n \n         auto & alias_identifier_node = alias_node->as<IdentifierNode &>();\n         auto identifier = alias_identifier_node.getIdentifier();\n-        auto lookup_result = tryResolveIdentifier(IdentifierLookup{identifier, identifier_lookup.lookup_context}, scope, identifier_resolve_settings);\n+        auto lookup_result = tryResolveIdentifier(IdentifierLookup{identifier, identifier_lookup.lookup_context}, *scope_to_resolve_alias_expression, identifier_resolve_context);\n+\n+        scope_to_resolve_alias_expression->popExpressionNode();\n+\n         if (!lookup_result.resolved_identifier)\n         {\n-            std::unordered_set<Identifier> valid_identifiers;\n-            IdentifierResolver::collectScopeWithParentScopesValidIdentifiersForTypoCorrection(identifier, scope, true, false, false, valid_identifiers);\n-            auto hints = IdentifierResolver::collectIdentifierTypoHints(identifier, valid_identifiers);\n-\n-            throw Exception(ErrorCodes::UNKNOWN_IDENTIFIER, \"Unknown {} identifier '{}'. In scope {}{}\",\n-                toStringLowercase(identifier_lookup.lookup_context),\n-                identifier.getFullName(),\n-                scope.scope_node->formatASTForErrorMessage(),\n-                getHintsErrorMessageSuffix(hints));\n+            // Resolve may succeed in another place or scope\n+            return {};\n         }\n \n         alias_node = lookup_result.resolved_identifier;\n-        scope.popExpressionNode();\n     }\n     else if (node_type == QueryTreeNodeType::FUNCTION)\n     {\n-        resolveExpressionNode(alias_node, scope, false /*allow_lambda_expression*/, false /*allow_table_expression*/);\n+        resolveExpressionNode(alias_node, *scope_to_resolve_alias_expression, false /*allow_lambda_expression*/, false /*allow_table_expression*/);\n     }\n     else if (node_type == QueryTreeNodeType::QUERY || node_type == QueryTreeNodeType::UNION)\n     {\n-        if (identifier_resolve_settings.allow_to_resolve_subquery_during_identifier_resolution)\n-            resolveExpressionNode(alias_node, scope, false /*allow_lambda_expression*/, identifier_lookup.isTableExpressionLookup() /*allow_table_expression*/);\n+        if (identifier_resolve_context.allow_to_resolve_subquery_during_identifier_resolution)\n+            resolveExpressionNode(alias_node, *scope_to_resolve_alias_expression, false /*allow_lambda_expression*/, identifier_lookup.isTableExpressionLookup() /*allow_table_expression*/);\n+    }\n+\n+    if (identifier_lookup.isExpressionLookup() && alias_node)\n+    {\n+        // Do not collect result rype in case of untuple() expression\n+        if (alias_node->getNodeType() != QueryTreeNodeType::LIST)\n+        {\n+            // Remember resolved type for typo correction\n+            scope_to_resolve_alias_expression->aliases.alias_name_to_expression_type[identifier_bind_part] = alias_node->getResultType();\n+        }\n     }\n \n     if (identifier_lookup.identifier.isCompound() && alias_node)\n     {\n         if (identifier_lookup.isExpressionLookup())\n         {\n-            return identifier_resolver.tryResolveIdentifierFromCompoundExpression(\n+            if (auto resolved_identifier = identifier_resolver.tryResolveIdentifierFromCompoundExpression(\n                 identifier_lookup.identifier,\n                 1 /*identifier_bind_size*/,\n                 alias_node,\n                 {} /* compound_expression_source */,\n                 scope,\n-                identifier_resolve_settings.allow_to_check_join_tree /* can_be_not_found */);\n+                identifier_resolve_context.allow_to_check_join_tree /* can_be_not_found */))\n+            {\n+                return { .resolved_identifier = resolved_identifier, .resolve_place = IdentifierResolvePlace::ALIASES };\n+            }\n+            return {};\n         }\n         if (identifier_lookup.isFunctionLookup() || identifier_lookup.isTableExpressionLookup())\n         {\n             throw Exception(\n-                ErrorCodes::BAD_ARGUMENTS,\n+                ErrorCodes::UNKNOWN_IDENTIFIER,\n                 \"Compound identifier '{}' cannot be resolved as {}. In scope {}\",\n                 identifier_lookup.identifier.getFullName(),\n                 identifier_lookup.isFunctionLookup() ? \"function\" : \"table expression\",\n@@ -1249,102 +1268,118 @@ QueryTreeNodePtr QueryAnalyzer::tryResolveIdentifierFromAliases(const Identifier\n         }\n     }\n \n-    return alias_node;\n+    return { .resolved_identifier = alias_node, .resolve_place = IdentifierResolvePlace::ALIASES };\n }\n \n-/** Try resolve identifier in current scope parent scopes.\n-  *\n-  * TODO: If column is matched, throw exception that nested subqueries are not supported.\n+/** Try to resolve identifier recursively in parent scopes.\n   *\n-  * If initial scope is expression. Then try to resolve identifier in parent scopes until query scope is hit.\n-  * For query scope resolve strategy is same as if initial scope if query.\n+  * If identifier is resolved to expression it must be resolved in the context of the current scope.\n   */\n-IdentifierResolveResult QueryAnalyzer::tryResolveIdentifierInParentScopes(const IdentifierLookup & identifier_lookup, IdentifierResolveScope & scope)\n+IdentifierResolveResult QueryAnalyzer::tryResolveIdentifierInParentScopes(const IdentifierLookup & identifier_lookup, IdentifierResolveScope & scope, IdentifierResolveContext identifier_resolve_context)\n {\n-    bool initial_scope_is_query = scope.scope_node->getNodeType() == QueryTreeNodeType::QUERY;\n-    bool initial_scope_is_expression = !initial_scope_is_query;\n+    if (!scope.parent_scope)\n+        return {};\n \n-    IdentifierResolveSettings identifier_resolve_settings;\n-    identifier_resolve_settings.allow_to_check_parent_scopes = false;\n-    identifier_resolve_settings.allow_to_check_database_catalog = false;\n+    bool initial_scope_is_query = scope.scope_node->getNodeType() == QueryTreeNodeType::QUERY;\n \n-    IdentifierResolveScope * scope_to_check = scope.parent_scope;\n+    identifier_resolve_context.resolveAliasesAt(&scope);\n \n-    if (initial_scope_is_expression)\n+    /** 1. Nested subqueries cannot access outer subqueries table expressions from JOIN tree because\n+      * that can prevent resolution of table expression from CTE.\n+      *\n+      * Example: WITH a AS (SELECT number FROM numbers(1)), b AS (SELECT number FROM a) SELECT * FROM a as l, b as r;\n+      *\n+      * 2. Allow to check join tree and aliases when resolving lambda body.\n+      *\n+      * Example: SELECT arrayMap(x -> test_table.* EXCEPT value, [1,2,3]) FROM test_table;\n+      */\n+    if (initial_scope_is_query)\n     {\n-        while (scope_to_check != nullptr)\n+        if (identifier_lookup.isTableExpressionLookup())\n         {\n-            auto resolve_result = tryResolveIdentifier(identifier_lookup, *scope_to_check, identifier_resolve_settings);\n-            if (resolve_result.resolved_identifier)\n-                return resolve_result;\n+            identifier_resolve_context.allow_to_check_join_tree = false;\n \n-            bool scope_was_query = scope_to_check->scope_node->getNodeType() == QueryTreeNodeType::QUERY;\n-            scope_to_check = scope_to_check->parent_scope;\n+            /** From parent scopes we can resolve table identifiers only as CTE.\n+                * Example: SELECT (SELECT 1 FROM a) FROM test_table AS a;\n+                *\n+                * During child scope table identifier resolve a, table node test_table with alias a from parent scope\n+                * is invalid.\n+                */\n+            identifier_resolve_context.allow_to_check_aliases = false;\n+        }\n \n-            if (scope_was_query)\n-                break;\n+        if (!scope.context->getSettingsRef()[Setting::enable_global_with_statement])\n+        {\n+            identifier_resolve_context.allow_to_check_aliases = false;\n+            identifier_resolve_context.allow_to_check_cte = false;\n         }\n     }\n \n-    if (!scope.context->getSettingsRef()[Setting::enable_global_with_statement])\n+    identifier_resolve_context.allow_to_check_database_catalog = false;\n+\n+    auto resolve_result = tryResolveIdentifier(identifier_lookup, *scope.parent_scope, identifier_resolve_context);\n+    auto & resolved_identifier = resolve_result.resolved_identifier;\n+\n+    if (!resolved_identifier)\n         return {};\n \n-    /** Nested subqueries cannot access outer subqueries table expressions from JOIN tree because\n-      * that can prevent resolution of table expression from CTE.\n-      *\n-      * Example: WITH a AS (SELECT number FROM numbers(1)), b AS (SELECT number FROM a) SELECT * FROM a as l, b as r;\n-      */\n+    /** From parent scopes we can resolve table identifiers only as CTE (except the case when initial scope is not query).\n+        * Example: SELECT (SELECT 1 FROM a) FROM test_table AS a;\n+        *\n+        * During table identifier resolution `a` in (SELECT 1 FROM a) scope, table node test_table with alias a from parent scope\n+        * is invalid.\n+        * Table identifier can be resolved from aliases or join tree in the parent scope\n+        * inside of lambda body expression. Example:\n+        *\n+        * SELECT map(x > x in a, [1, 2]) FROM numbers(3) as a;\n+        */\n     if (identifier_lookup.isTableExpressionLookup())\n-        identifier_resolve_settings.allow_to_check_join_tree = false;\n-\n-    while (scope_to_check != nullptr)\n     {\n-        auto lookup_result = tryResolveIdentifier(identifier_lookup, *scope_to_check, identifier_resolve_settings);\n-        const auto & resolved_identifier = lookup_result.resolved_identifier;\n-\n-        scope_to_check = scope_to_check->parent_scope;\n+        auto * subquery_node = resolved_identifier->as<QueryNode>();\n+        auto * union_node = resolved_identifier->as<UnionNode>();\n \n-        if (resolved_identifier)\n-        {\n-            auto * subquery_node = resolved_identifier->as<QueryNode>();\n-            auto * union_node = resolved_identifier->as<UnionNode>();\n-\n-            bool is_cte = (subquery_node && subquery_node->isCTE()) || (union_node && union_node->isCTE());\n-            bool is_table_from_expression_arguments = lookup_result.resolve_place == IdentifierResolvePlace::EXPRESSION_ARGUMENTS &&\n-                resolved_identifier->getNodeType() == QueryTreeNodeType::TABLE;\n-            bool is_valid_table_expression = is_cte || is_table_from_expression_arguments;\n+        /// Resolved to CTE in parent scope.\n+        bool is_cte = (subquery_node && subquery_node->isCTE()) || (union_node && union_node->isCTE());\n+        /// Resolved to lambda argument.\n+        bool is_table_from_expression_arguments = resolve_result.isResolvedFromExpressionArguments() &&\n+            resolved_identifier->getNodeType() == QueryTreeNodeType::TABLE;\n+        /// Resolved from alias or join tree in the parent scope when initial scope is not query.\n+        bool is_from_join_tree_or_aliases = !initial_scope_is_query && (resolve_result.isResolvedFromJoinTree() || resolve_result.isResolvedFromAliases());\n+        bool is_valid_table_expression = is_cte || is_table_from_expression_arguments || is_from_join_tree_or_aliases;\n \n-            /** From parent scopes we can resolve table identifiers only as CTE.\n-              * Example: SELECT (SELECT 1 FROM a) FROM test_table AS a;\n-              *\n-              * During child scope table identifier resolve a, table node test_table with alias a from parent scope\n-              * is invalid.\n-              */\n-            if (identifier_lookup.isTableExpressionLookup() && !is_valid_table_expression)\n-                continue;\n+        if (!is_valid_table_expression)\n+            return {};\n+        return resolve_result;\n+    }\n+    if (identifier_lookup.isFunctionLookup())\n+        return resolve_result;\n \n-            if (is_valid_table_expression || resolved_identifier->as<ConstantNode>())\n-            {\n-                return lookup_result;\n-            }\n-            if (auto * resolved_function = resolved_identifier->as<FunctionNode>())\n+    QueryTreeNodes nodes_to_process = { resolved_identifier };\n+    while (!nodes_to_process.empty())\n+    {\n+        auto current = nodes_to_process.back();\n+        nodes_to_process.pop_back();\n+        if (auto * current_column = current->as<ColumnNode>())\n+        {\n+            if (isDependentColumn(&scope, current_column->getColumnSource()))\n             {\n-                /// Special case: scalar subquery was executed and replaced by __getScalar function.\n-                /// Handle it as a constant.\n-                if (resolved_function->getFunctionName() == \"__getScalar\")\n-                    return lookup_result;\n+                throw Exception(ErrorCodes::UNSUPPORTED_METHOD,\n+                    \"Resolved identifier '{}' in parent scope to expression '{}' with correlated column '{}'. In scope {}\",\n+                    identifier_lookup.identifier.getFullName(),\n+                    resolved_identifier->formatASTForErrorMessage(),\n+                    current_column->getColumnName(),\n+                    scope.scope_node->formatASTForErrorMessage());\n             }\n+        }\n \n-            throw Exception(ErrorCodes::UNSUPPORTED_METHOD,\n-                \"Resolve identifier '{}' from parent scope only supported for constants and CTE. Actual {} node type {}. In scope {}\",\n-                identifier_lookup.identifier.getFullName(),\n-                resolved_identifier->formatASTForErrorMessage(),\n-                resolved_identifier->getNodeTypeName(),\n-                scope.scope_node->formatASTForErrorMessage());\n+        for (const auto & child : current->getChildren())\n+        {\n+            if (child)\n+                nodes_to_process.push_back(child);\n         }\n     }\n \n-    return {};\n+    return resolve_result;\n }\n \n /** Resolve identifier in scope.\n@@ -1383,38 +1418,26 @@ IdentifierResolveResult QueryAnalyzer::tryResolveIdentifierInParentScopes(const\n   */\n IdentifierResolveResult QueryAnalyzer::tryResolveIdentifier(const IdentifierLookup & identifier_lookup,\n     IdentifierResolveScope & scope,\n-    IdentifierResolveSettings identifier_resolve_settings)\n+    IdentifierResolveContext identifier_resolve_settings)\n {\n-    auto it = scope.identifier_lookup_to_resolve_state.find(identifier_lookup);\n-    if (it != scope.identifier_lookup_to_resolve_state.end())\n-    {\n-        if (it->second.cyclic_identifier_resolve)\n-            throw Exception(ErrorCodes::CYCLIC_ALIASES,\n-                \"Cyclic aliases for identifier '{}'. In scope {}\",\n-                identifier_lookup.identifier.getFullName(),\n-                scope.scope_node->formatASTForErrorMessage());\n-\n-        if (!it->second.resolve_result.isResolved())\n-            it->second.cyclic_identifier_resolve = true;\n+    auto it = scope.identifier_in_lookup_process.find(identifier_lookup);\n \n-        if (it->second.resolve_result.isResolved() &&\n-            scope.use_identifier_lookup_to_result_cache &&\n-            !scope.non_cached_identifier_lookups_during_expression_resolve.contains(identifier_lookup) &&\n-            (!it->second.resolve_result.isResolvedFromCTEs() || !ctes_in_resolve_process.contains(identifier_lookup.identifier.getFullName())))\n-            return it->second.resolve_result;\n+    bool already_in_resolve_process = false;\n+    if (it != scope.identifier_in_lookup_process.end())\n+    {\n+        it->second.count++;\n+        already_in_resolve_process = true;\n     }\n     else\n     {\n-        auto [insert_it, _] = scope.identifier_lookup_to_resolve_state.insert({identifier_lookup, IdentifierResolveState()});\n+        auto [insert_it, _] = scope.identifier_in_lookup_process.insert({identifier_lookup, IdentifierResolveState()});\n         it = insert_it;\n     }\n \n     /// Resolve identifier from current scope\n \n     IdentifierResolveResult resolve_result;\n-    resolve_result.resolved_identifier = identifier_resolver.tryResolveIdentifierFromExpressionArguments(identifier_lookup, scope);\n-    if (resolve_result.resolved_identifier)\n-        resolve_result.resolve_place = IdentifierResolvePlace::EXPRESSION_ARGUMENTS;\n+    resolve_result = identifier_resolver.tryResolveIdentifierFromExpressionArguments(identifier_lookup, scope);\n \n     if (!resolve_result.resolved_identifier)\n     {\n@@ -1440,34 +1463,22 @@ IdentifierResolveResult QueryAnalyzer::tryResolveIdentifier(const IdentifierLook\n         {\n             if (identifier_resolve_settings.allow_to_check_join_tree)\n             {\n-                resolve_result.resolved_identifier = identifier_resolver.tryResolveIdentifierFromJoinTree(identifier_lookup, scope);\n-\n-                if (resolve_result.resolved_identifier)\n-                    resolve_result.resolve_place = IdentifierResolvePlace::JOIN_TREE;\n+                resolve_result = identifier_resolver.tryResolveIdentifierFromJoinTree(identifier_lookup, scope);\n             }\n \n-            if (!resolve_result.resolved_identifier)\n+            if (identifier_resolve_settings.allow_to_check_aliases && !resolve_result.resolved_identifier && !already_in_resolve_process)\n             {\n-                resolve_result.resolved_identifier = tryResolveIdentifierFromAliases(identifier_lookup, scope, identifier_resolve_settings);\n-\n-                if (resolve_result.resolved_identifier)\n-                    resolve_result.resolve_place = IdentifierResolvePlace::ALIASES;\n+                resolve_result = tryResolveIdentifierFromAliases(identifier_lookup, scope, identifier_resolve_settings);\n             }\n         }\n         else\n         {\n-            resolve_result.resolved_identifier = tryResolveIdentifierFromAliases(identifier_lookup, scope, identifier_resolve_settings);\n+            if (identifier_resolve_settings.allow_to_check_aliases && !already_in_resolve_process)\n+                resolve_result = tryResolveIdentifierFromAliases(identifier_lookup, scope, identifier_resolve_settings);\n \n-            if (resolve_result.resolved_identifier)\n-            {\n-                resolve_result.resolve_place = IdentifierResolvePlace::ALIASES;\n-            }\n-            else if (identifier_resolve_settings.allow_to_check_join_tree)\n+            if (!resolve_result.resolved_identifier && identifier_resolve_settings.allow_to_check_join_tree)\n             {\n-                resolve_result.resolved_identifier = identifier_resolver.tryResolveIdentifierFromJoinTree(identifier_lookup, scope);\n-\n-                if (resolve_result.resolved_identifier)\n-                    resolve_result.resolve_place = IdentifierResolvePlace::JOIN_TREE;\n+                resolve_result = identifier_resolver.tryResolveIdentifierFromJoinTree(identifier_lookup, scope);\n             }\n         }\n \n@@ -1487,7 +1498,7 @@ IdentifierResolveResult QueryAnalyzer::tryResolveIdentifier(const IdentifierLook\n         }\n     }\n \n-    if (!resolve_result.resolved_identifier && identifier_lookup.isTableExpressionLookup())\n+    if (!resolve_result.resolved_identifier && identifier_resolve_settings.allow_to_check_cte && identifier_lookup.isTableExpressionLookup())\n     {\n         auto full_name = identifier_lookup.identifier.getFullName();\n         auto cte_query_node_it = scope.cte_name_to_query_node.find(full_name);\n@@ -1505,45 +1516,29 @@ IdentifierResolveResult QueryAnalyzer::tryResolveIdentifier(const IdentifierLook\n         /// To accomplish this behaviour it's not allowed to resolve identifiers to\n         /// CTE that is being resolved.\n         if (cte_query_node_it != scope.cte_name_to_query_node.end()\n-            && !ctes_in_resolve_process.contains(full_name))\n+            && !ctes_in_resolve_process.contains(cte_query_node_it->second))\n         {\n-            resolve_result.resolved_identifier = cte_query_node_it->second;\n-            resolve_result.resolve_place = IdentifierResolvePlace::CTE;\n+            resolve_result = { .resolved_identifier = cte_query_node_it->second, .resolve_place = IdentifierResolvePlace::CTE };\n         }\n     }\n \n     /// Try to resolve identifier from parent scopes\n-\n-    if (!resolve_result.resolved_identifier && identifier_resolve_settings.allow_to_check_parent_scopes)\n+    if (!resolve_result.resolved_identifier)\n     {\n-        resolve_result = tryResolveIdentifierInParentScopes(identifier_lookup, scope);\n-\n-        if (resolve_result.resolved_identifier)\n-            resolve_result.resolved_from_parent_scopes = true;\n+        resolve_result = tryResolveIdentifierInParentScopes(identifier_lookup, scope, identifier_resolve_settings);\n     }\n \n     /// Try to resolve table identifier from database catalog\n-\n     if (!resolve_result.resolved_identifier && identifier_resolve_settings.allow_to_check_database_catalog && identifier_lookup.isTableExpressionLookup())\n     {\n-        resolve_result.resolved_identifier = IdentifierResolver::tryResolveTableIdentifierFromDatabaseCatalog(identifier_lookup.identifier, scope.context);\n-\n-        if (resolve_result.resolved_identifier)\n-            resolve_result.resolve_place = IdentifierResolvePlace::DATABASE_CATALOG;\n+        resolve_result = IdentifierResolver::tryResolveTableIdentifierFromDatabaseCatalog(identifier_lookup.identifier, scope.context);\n     }\n \n-    bool was_cyclic_identifier_resolve = it->second.cyclic_identifier_resolve;\n-    if (!was_cyclic_identifier_resolve)\n-        it->second.resolve_result = resolve_result;\n-    it->second.cyclic_identifier_resolve = false;\n-\n-    /** If identifier was not resolved, or during expression resolution identifier was explicitly added into non cached set,\n-      * or identifier caching was disabled in resolve scope we remove identifier lookup result from identifier lookup to result table.\n-      */\n-    if (!was_cyclic_identifier_resolve && (!resolve_result.resolved_identifier ||\n-        scope.non_cached_identifier_lookups_during_expression_resolve.contains(identifier_lookup) ||\n-        !scope.use_identifier_lookup_to_result_cache))\n-        scope.identifier_lookup_to_resolve_state.erase(it);\n+    it->second.count--;\n+    if (it->second.count == 0)\n+    {\n+        scope.identifier_in_lookup_process.erase(it);\n+    }\n \n     return resolve_result;\n }\n@@ -1646,7 +1641,7 @@ GetColumnsOptions QueryAnalyzer::buildGetColumnsOptions(QueryTreeNodePtr & match\n QueryAnalyzer::QueryTreeNodesWithNames QueryAnalyzer::getMatchedColumnNodesWithNames(const QueryTreeNodePtr & matcher_node,\n     const QueryTreeNodePtr & table_expression_node,\n     const NamesAndTypes & matched_columns,\n-    const IdentifierResolveScope & scope)\n+    IdentifierResolveScope & scope)\n {\n     auto & matcher_node_typed = matcher_node->as<MatcherNode &>();\n \n@@ -1858,7 +1853,7 @@ QueryAnalyzer::QueryTreeNodesWithNames QueryAnalyzer::resolveQualifiedMatcher(Qu\n \n     /// Try to resolve qualified matcher for table expression\n \n-    IdentifierResolveSettings identifier_resolve_settings;\n+    IdentifierResolveContext identifier_resolve_settings;\n     identifier_resolve_settings.allow_to_check_cte = false;\n     identifier_resolve_settings.allow_to_check_database_catalog = false;\n \n@@ -2599,13 +2594,13 @@ ProjectionNames QueryAnalyzer::resolveLambda(const QueryTreeNodePtr & lambda_nod\n     /** Register lambda as being resolved, to prevent recursive lambdas resolution.\n       * Example: WITH (x -> x + lambda_2(x)) AS lambda_1, (x -> x + lambda_1(x)) AS lambda_2 SELECT 1;\n       */\n-    auto it = lambdas_in_resolve_process.find(lambda_node.get());\n+    auto it = lambdas_in_resolve_process.find(lambda_node);\n     if (it != lambdas_in_resolve_process.end())\n         throw Exception(ErrorCodes::UNSUPPORTED_METHOD,\n             \"Recursive lambda {}. In scope {}\",\n             lambda_node->formatASTForErrorMessage(),\n             scope.scope_node->formatASTForErrorMessage());\n-    lambdas_in_resolve_process.emplace(lambda_node.get());\n+    lambdas_in_resolve_process.emplace(lambda_node);\n \n     size_t arguments_size = lambda_arguments.size();\n     if (lambda_arguments_nodes_size != arguments_size)\n@@ -2637,7 +2632,7 @@ ProjectionNames QueryAnalyzer::resolveLambda(const QueryTreeNodePtr & lambda_nod\n         const auto & lambda_argument_name = lambda_argument_identifier ? lambda_argument_identifier->getIdentifier().getFullName()\n                                                                        : lambda_argument_column->getColumnName();\n \n-        bool has_expression_node = scope.aliases.alias_name_to_expression_node->contains(lambda_argument_name);\n+        bool has_expression_node = scope.aliases.alias_name_to_expression_node.contains(lambda_argument_name);\n         bool has_alias_node = scope.aliases.alias_name_to_lambda_node.contains(lambda_argument_name);\n \n         if (has_expression_node || has_alias_node)\n@@ -2658,7 +2653,7 @@ ProjectionNames QueryAnalyzer::resolveLambda(const QueryTreeNodePtr & lambda_nod\n     /// Lambda body expression is resolved as standard query expression node.\n     auto result_projection_names = resolveExpressionNode(lambda_to_resolve.getExpression(), scope, false /*allow_lambda_expression*/, false /*allow_table_expression*/);\n \n-    lambdas_in_resolve_process.erase(lambda_node.get());\n+    lambdas_in_resolve_process.erase(lambda_node);\n \n     return result_projection_names;\n }\n@@ -2811,7 +2806,7 @@ ProjectionNames QueryAnalyzer::resolveFunction(QueryTreeNodePtr & node, Identifi\n             }\n             else\n             {\n-                auto table_node = IdentifierResolver::tryResolveTableIdentifierFromDatabaseCatalog(identifier, scope.context);\n+                auto table_node = IdentifierResolver::tryResolveTableIdentifierFromDatabaseCatalog(identifier, scope.context).resolved_identifier;\n                 if (!table_node)\n                     throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,\n                         \"Function {} first argument expected table identifier '{}'. In scope {}\",\n@@ -3412,6 +3407,7 @@ ProjectionNames QueryAnalyzer::resolveFunction(QueryTreeNodePtr & node, Identifi\n             QueryTreeNodes lambda_arguments;\n             lambda_arguments.reserve(lambda_arguments_size);\n \n+            IdentifierResolveScope lambda_scope(lambda_to_resolve, &scope /*parent_scope*/);\n             for (size_t i = 0; i < lambda_arguments_size; ++i)\n             {\n                 const auto & argument_type = function_data_type_argument_types[i];\n@@ -3419,7 +3415,6 @@ ProjectionNames QueryAnalyzer::resolveFunction(QueryTreeNodePtr & node, Identifi\n                 lambda_arguments.push_back(std::make_shared<ColumnNode>(std::move(column_name_and_type), lambda_to_resolve));\n             }\n \n-            IdentifierResolveScope lambda_scope(lambda_to_resolve, &scope /*parent_scope*/);\n             lambda_projection_names = resolveLambda(lambda_argument, lambda_to_resolve, lambda_arguments, lambda_scope);\n \n             if (auto * lambda_list_node_result = lambda_to_resolve_typed.getExpression()->as<ListNode>())\n@@ -3621,7 +3616,11 @@ ProjectionNames QueryAnalyzer::resolveFunction(QueryTreeNodePtr & node, Identifi\n   * 4. If node has alias, update its value in scope alias map. Deregister alias from expression_aliases_in_resolve_process.\n   */\n ProjectionNames QueryAnalyzer::resolveExpressionNode(\n-    QueryTreeNodePtr & node, IdentifierResolveScope & scope, bool allow_lambda_expression, bool allow_table_expression, bool ignore_alias)\n+    QueryTreeNodePtr & node,\n+    IdentifierResolveScope & scope,\n+    bool allow_lambda_expression,\n+    bool allow_table_expression,\n+    bool ignore_alias)\n {\n     checkStackSize();\n \n@@ -3656,42 +3655,11 @@ ProjectionNames QueryAnalyzer::resolveExpressionNode(\n     else\n     {\n         result_projection_names.push_back(node_alias);\n-    }\n-\n-    bool is_duplicated_alias = scope.aliases.nodes_with_duplicated_aliases.contains(node);\n-    if (is_duplicated_alias)\n-        scope.non_cached_identifier_lookups_during_expression_resolve.insert({Identifier{node_alias}, IdentifierLookupContext::EXPRESSION});\n-\n-    /** Do not use alias table if node has alias same as some other node.\n-      * Example: WITH x -> x + 1 AS lambda SELECT 1 AS lambda;\n-      * During 1 AS lambda resolve if we use alias table we replace node with x -> x + 1 AS lambda.\n-      *\n-      * Do not use alias table if allow_table_expression = true and we resolve query node directly.\n-      * Example: SELECT a FROM test_table WHERE id IN (SELECT 1) AS a;\n-      * To support both (SELECT 1) AS expression in projection and (SELECT 1) as subquery in IN, do not use\n-      * alias table because in alias table subquery could be evaluated as scalar.\n-      */\n-    bool use_alias_table = !ignore_alias;\n-    if (is_duplicated_alias || (allow_table_expression && IdentifierResolver::isSubqueryNodeType(node->getNodeType())))\n-        use_alias_table = false;\n-\n-    if (!node_alias.empty() && use_alias_table)\n-    {\n-        /** Node could be potentially resolved by resolving other nodes.\n-          * SELECT b, a as b FROM test_table;\n-          *\n-          * To resolve b we need to resolve a.\n-          */\n-        auto it = scope.aliases.alias_name_to_expression_node->find(node_alias);\n-        if (it != scope.aliases.alias_name_to_expression_node->end())\n-            node = it->second;\n-\n-        if (allow_lambda_expression)\n-        {\n-            it = scope.aliases.alias_name_to_lambda_node.find(node_alias);\n-            if (it != scope.aliases.alias_name_to_lambda_node.end())\n-                node = it->second;\n-        }\n+        /// Remove alias later. This needed to produce the same query tree subtree\n+        /// for expressions with aliaes to subexpression. Example:\n+        /// SELECT f(a as b) as c FROM t GROUP BY c\n+        if (!ignore_alias)\n+            scope.aliases.node_to_remove_aliases.push_back(node);\n     }\n \n     scope.pushExpressionNode(node);\n@@ -3731,12 +3699,11 @@ ProjectionNames QueryAnalyzer::resolveExpressionNode(\n \n                     if (resolved_as_cte)\n                     {\n+                        auto original_cte_node = resolved_identifier_node;\n                         resolved_identifier_node = resolved_identifier_node->clone();\n                         subquery_node = resolved_identifier_node->as<QueryNode>();\n                         union_node = resolved_identifier_node->as<UnionNode>();\n \n-                        std::string_view cte_name = subquery_node ? subquery_node->getCTEName() : union_node->getCTEName();\n-\n                         if (subquery_node)\n                             subquery_node->setIsCTE(false);\n                         else\n@@ -3752,14 +3719,14 @@ ProjectionNames QueryAnalyzer::resolveExpressionNode(\n                         ///\n                         /// In this example argument of function `in` is being resolve here. If CTE `test1` is not forbidden,\n                         /// `test1` is resolved to CTE (not to the table) in `initializeQueryJoinTreeNode` function.\n-                        ctes_in_resolve_process.insert(cte_name);\n+                        ctes_in_resolve_process.insert(original_cte_node);\n \n                         if (subquery_node)\n                             resolveQuery(resolved_identifier_node, subquery_scope);\n                         else\n                             resolveUnion(resolved_identifier_node, subquery_scope);\n \n-                        ctes_in_resolve_process.erase(cte_name);\n+                        ctes_in_resolve_process.erase(original_cte_node);\n                     }\n                 }\n             }\n@@ -3958,33 +3925,9 @@ ProjectionNames QueryAnalyzer::resolveExpressionNode(\n         }\n     }\n \n-    /** Update aliases after expression node was resolved.\n-      * Do not update node in alias table if we resolve it for duplicate alias.\n-      */\n-    if (!node_alias.empty() && use_alias_table && !scope.group_by_use_nulls)\n-    {\n-        auto it = scope.aliases.alias_name_to_expression_node->find(node_alias);\n-        if (it != scope.aliases.alias_name_to_expression_node->end())\n-            it->second = node;\n-\n-        if (allow_lambda_expression)\n-        {\n-            it = scope.aliases.alias_name_to_lambda_node.find(node_alias);\n-            if (it != scope.aliases.alias_name_to_lambda_node.end())\n-                it->second = node;\n-        }\n-    }\n-\n-    if (is_duplicated_alias)\n-        scope.non_cached_identifier_lookups_during_expression_resolve.erase({Identifier{node_alias}, IdentifierLookupContext::EXPRESSION});\n-\n-    if (!ignore_alias)\n-        resolved_expressions.emplace(node, result_projection_names);\n+    resolved_expressions.emplace(node, result_projection_names);\n \n     scope.popExpressionNode();\n-    bool expression_was_root = scope.expressions_in_resolve_process_stack.empty();\n-    if (expression_was_root)\n-        scope.non_cached_identifier_lookups_during_expression_resolve.clear();\n \n     return result_projection_names;\n }\n@@ -4383,7 +4326,7 @@ void QueryAnalyzer::initializeQueryJoinTreeNode(QueryTreeNodePtr & join_tree_nod\n \n                 auto from_table_identifier_alias = from_table_identifier.getAlias();\n \n-                IdentifierResolveSettings resolve_settings;\n+                IdentifierResolveContext resolve_settings;\n                 /// In join tree initialization ignore join tree as identifier lookup source\n                 resolve_settings.allow_to_check_join_tree = false;\n                 /** Disable resolve of subquery during identifier resolution.\n@@ -4398,9 +4341,6 @@ void QueryAnalyzer::initializeQueryJoinTreeNode(QueryTreeNodePtr & join_tree_nod\n                 auto table_identifier_resolve_result = tryResolveIdentifier(table_identifier_lookup, scope, resolve_settings);\n \n                 scope.popExpressionNode();\n-                bool expression_was_root = scope.expressions_in_resolve_process_stack.empty();\n-                if (expression_was_root)\n-                    scope.non_cached_identifier_lookups_during_expression_resolve.clear();\n \n                 auto resolved_identifier = table_identifier_resolve_result.resolved_identifier;\n \n@@ -4758,6 +4698,10 @@ void QueryAnalyzer::resolveTableFunction(QueryTreeNodePtr & table_function_node,\n \n         if (parametrized_view_storage)\n         {\n+            /// Remove initial TableFunctionNode from the set. Otherwise it may lead to segfault\n+            /// when IdentifierResolveScope::dump() is used.\n+            scope.table_expressions_in_resolve_process.erase(table_function_node.get());\n+\n             auto fake_table_node = std::make_shared<TableNode>(parametrized_view_storage, scope_context);\n             fake_table_node->setAlias(table_function_node->getAlias());\n             table_function_node = fake_table_node;\n@@ -5044,7 +4988,7 @@ void QueryAnalyzer::resolveArrayJoin(QueryTreeNodePtr & array_join_node, Identif\n         if (auto * identifier_node = array_join_expression->as<IdentifierNode>())\n             identifier_full_name = identifier_node->getIdentifier().getFullName();\n \n-        resolveExpressionNode(array_join_expression, scope, false /*allow_lambda_expression*/, false /*allow_table_expression*/, true /*ignore_alias*/);\n+        resolveExpressionNode(array_join_expression, scope, false /*allow_lambda_expression*/, false /*allow_table_expression*/);\n \n         auto process_array_join_expression = [&](const QueryTreeNodePtr & expression)\n         {\n@@ -5237,7 +5181,8 @@ void QueryAnalyzer::resolveJoin(QueryTreeNodePtr & join_node, IdentifierResolveS\n                             /// Create ColumnNode with expression from parent projection\n                             return std::make_shared<ColumnNode>(\n                                 NameAndTypePair{identifier_full_name_, resolved_nodes.front()->getResultType()},\n-                                resolved_nodes.front(), left_table_expression);\n+                                resolved_nodes.front(),\n+                                left_table_expression);\n                         }\n                     }\n                 }\n@@ -5255,7 +5200,7 @@ void QueryAnalyzer::resolveJoin(QueryTreeNodePtr & join_node, IdentifierResolveS\n \n             IdentifierLookup identifier_lookup{identifier_node->getIdentifier(), IdentifierLookupContext::EXPRESSION};\n             if (!result_left_table_expression)\n-                result_left_table_expression = identifier_resolver.tryResolveIdentifierFromJoinTreeNode(identifier_lookup, join_node_typed.getLeftTableExpression(), scope);\n+                result_left_table_expression = identifier_resolver.tryResolveIdentifierFromJoinTreeNode(identifier_lookup, join_node_typed.getLeftTableExpression(), scope).resolved_identifier;\n \n             /** Here we may try to resolve identifier from projection in case it's not resolved from left table expression\n               * and analyzer_compatibility_join_using_top_level_identifier is disabled.\n@@ -5299,7 +5244,7 @@ void QueryAnalyzer::resolveJoin(QueryTreeNodePtr & join_node, IdentifierResolveS\n                     identifier_full_name,\n                     scope.scope_node->formatASTForErrorMessage());\n \n-            auto result_right_table_expression = identifier_resolver.tryResolveIdentifierFromJoinTreeNode(identifier_lookup, join_node_typed.getRightTableExpression(), scope);\n+            auto result_right_table_expression = identifier_resolver.tryResolveIdentifierFromJoinTreeNode(identifier_lookup, join_node_typed.getRightTableExpression(), scope).resolved_identifier;\n             if (!result_right_table_expression)\n                 throw Exception(ErrorCodes::UNKNOWN_IDENTIFIER,\n                     \"JOIN {} using identifier '{}' cannot be resolved from right table expression. In scope {}\",\n@@ -5348,7 +5293,7 @@ void QueryAnalyzer::resolveQueryJoinTreeNode(QueryTreeNodePtr & join_tree_node,\n             [[fallthrough]];\n         case QueryTreeNodeType::UNION:\n         {\n-            resolveExpressionNode(join_tree_node, scope, false /*allow_lambda_expression*/, true /*allow_table_expression*/);\n+            resolveExpressionNode(join_tree_node, scope, false /*allow_lambda_expression*/, true /*allow_table_expression*/, true /*ignore_alias=*/);\n             break;\n         }\n         case QueryTreeNodeType::TABLE_FUNCTION:\n@@ -5472,7 +5417,7 @@ void QueryAnalyzer::resolveQuery(const QueryTreeNodePtr & query_node, Identifier\n         return;\n \n     if (query_node_typed.isCTE())\n-        ctes_in_resolve_process.insert(query_node_typed.getCTEName());\n+        ctes_in_resolve_process.emplace(query_node);\n \n     bool is_rollup_or_cube = query_node_typed.isGroupByWithRollup() || query_node_typed.isGroupByWithCube();\n \n@@ -5556,7 +5501,6 @@ void QueryAnalyzer::resolveQuery(const QueryTreeNodePtr & query_node, Identifier\n         bool subquery_is_cte = (subquery_node && subquery_node->isCTE()) || (union_node && union_node->isCTE());\n         if (!subquery_is_cte)\n             continue;\n-\n         const auto & cte_name = subquery_node ? subquery_node->getCTEName() : union_node->getCTEName();\n \n         auto [_, inserted] = scope.cte_name_to_query_node.emplace(cte_name, node);\n@@ -5599,27 +5543,16 @@ void QueryAnalyzer::resolveQuery(const QueryTreeNodePtr & query_node, Identifier\n                 scope.scope_node->formatASTForErrorMessage());\n     }\n \n-    /** Disable identifier cache during JOIN TREE resolve.\n-      * Depending on JOIN expression section, identifier with same name\n-      * can be resolved in different columns.\n-      *\n-      * Example: SELECT id FROM test_table AS t1 INNER JOIN test_table AS t2 ON t1.id = t2.id INNER JOIN test_table AS t3 ON t1.id = t3.id\n-      * In first join expression ON t1.id = t2.id t1.id is resolved into test_table.id column.\n-      * In second join expression ON t1.id = t3.id t1.id must be resolved into test_table.id column after first JOIN.\n-      */\n-    scope.use_identifier_lookup_to_result_cache = false;\n+    auto transitive_aliases = std::move(scope.aliases.alias_name_to_table_expression_node);\n \n     TableExpressionsAliasVisitor table_expressions_visitor(scope);\n     table_expressions_visitor.visit(query_node_typed.getJoinTree());\n \n     initializeQueryJoinTreeNode(query_node_typed.getJoinTree(), scope);\n-    scope.aliases.alias_name_to_table_expression_node.clear();\n+    scope.aliases.alias_name_to_table_expression_node = std::move(transitive_aliases);\n \n     resolveQueryJoinTreeNode(query_node_typed.getJoinTree(), scope, visitor);\n \n-    if (!scope.group_by_use_nulls)\n-        scope.use_identifier_lookup_to_result_cache = true;\n-\n     /// Resolve query node sections.\n \n     NamesAndTypes projection_columns;\n@@ -5659,13 +5592,6 @@ void QueryAnalyzer::resolveQuery(const QueryTreeNodePtr & query_node, Identifier\n     if (scope.group_by_use_nulls)\n     {\n         resolved_expressions.clear();\n-        /// Clone is needed cause aliases share subtrees.\n-        /// If not clone, the same (shared) subtree could be resolved again with different (Nullable) type\n-        /// See 03023_group_by_use_nulls_analyzer_crashes\n-        for (auto & [key, node] : scope.aliases.alias_name_to_expression_node_before_group_by)\n-            scope.aliases.alias_name_to_expression_node_after_group_by[key] = node->clone();\n-\n-        scope.aliases.alias_name_to_expression_node = &scope.aliases.alias_name_to_expression_node_after_group_by;\n     }\n \n     if (query_node_typed.hasHaving())\n@@ -5737,28 +5663,29 @@ void QueryAnalyzer::resolveQuery(const QueryTreeNodePtr & query_node, Identifier\n       * After scope nodes are resolved, we can compare node with duplicate alias with\n       * node from scope alias table.\n       */\n-    for (const auto & node_with_duplicated_alias : scope.aliases.cloned_nodes_with_duplicated_aliases)\n+    for (const auto & node_with_duplicated_alias : scope.aliases.nodes_with_duplicated_aliases)\n     {\n         auto node = node_with_duplicated_alias;\n         auto node_alias = node->getAlias();\n \n-        /// Add current alias to non cached set, because in case of cyclic alias identifier should not be substituted from cache.\n-        /// See 02896_cyclic_aliases_crash.\n         resolveExpressionNode(node, scope, true /*allow_lambda_expression*/, true /*allow_table_expression*/);\n \n         bool has_node_in_alias_table = false;\n \n-        auto it = scope.aliases.alias_name_to_expression_node->find(node_alias);\n-        if (it != scope.aliases.alias_name_to_expression_node->end())\n+        auto it = scope.aliases.alias_name_to_expression_node.find(node_alias);\n+        if (it != scope.aliases.alias_name_to_expression_node.end())\n         {\n             has_node_in_alias_table = true;\n \n-            bool matched = it->second->isEqual(*node);\n+            auto original_node = it->second;\n+            resolveExpressionNode(original_node, scope, true /*allow_lambda_expression*/, true /*allow_table_expression*/);\n+\n+            bool matched = original_node->isEqual(*node);\n             if (!matched)\n                 /// Table expression could be resolved as scalar subquery,\n                 /// but for duplicating alias we allow table expression to be returned.\n                 /// So, check constant node source expression as well.\n-                if (const auto * constant_node = it->second->as<ConstantNode>())\n+                if (const auto * constant_node = original_node->as<ConstantNode>())\n                     if (const auto & source_expression = constant_node->getSourceExpression())\n                         matched = source_expression->isEqual(*node);\n \n@@ -5766,7 +5693,7 @@ void QueryAnalyzer::resolveQuery(const QueryTreeNodePtr & query_node, Identifier\n                 throw Exception(ErrorCodes::MULTIPLE_EXPRESSIONS_FOR_ALIAS,\n                     \"Multiple expressions {} and {} for alias {}. In scope {}\",\n                     node->formatASTForErrorMessage(),\n-                    it->second->formatASTForErrorMessage(),\n+                    original_node->formatASTForErrorMessage(),\n                     node_alias,\n                     scope.scope_node->formatASTForErrorMessage());\n         }\n@@ -5776,11 +5703,14 @@ void QueryAnalyzer::resolveQuery(const QueryTreeNodePtr & query_node, Identifier\n         {\n             has_node_in_alias_table = true;\n \n-            if (!it->second->isEqual(*node))\n+            auto original_node = it->second;\n+            resolveExpressionNode(original_node, scope, true /*allow_lambda_expression*/, true /*allow_table_expression*/);\n+\n+            if (!original_node->isEqual(*node))\n                 throw Exception(ErrorCodes::MULTIPLE_EXPRESSIONS_FOR_ALIAS,\n                     \"Multiple expressions {} and {} for alias {}. In scope {}\",\n                     node->formatASTForErrorMessage(),\n-                    it->second->formatASTForErrorMessage(),\n+                    original_node->formatASTForErrorMessage(),\n                     node_alias,\n                     scope.scope_node->formatASTForErrorMessage());\n         }\n@@ -5817,7 +5747,10 @@ void QueryAnalyzer::resolveQuery(const QueryTreeNodePtr & query_node, Identifier\n \n     /// Remove aliases from expression and lambda nodes\n \n-    for (auto & [_, node] : *scope.aliases.alias_name_to_expression_node)\n+    for (auto & node : scope.aliases.node_to_remove_aliases)\n+        node->removeAlias();\n+\n+    for (auto & [_, node] : scope.aliases.alias_name_to_expression_node)\n         node->removeAlias();\n \n     for (auto & [_, node] : scope.aliases.alias_name_to_lambda_node)\n@@ -5826,7 +5759,7 @@ void QueryAnalyzer::resolveQuery(const QueryTreeNodePtr & query_node, Identifier\n     query_node_typed.resolveProjectionColumns(std::move(projection_columns));\n \n     if (query_node_typed.isCTE())\n-        ctes_in_resolve_process.erase(query_node_typed.getCTEName());\n+        ctes_in_resolve_process.erase(query_node);\n }\n \n void QueryAnalyzer::resolveUnion(const QueryTreeNodePtr & union_node, IdentifierResolveScope & scope)\n@@ -5837,7 +5770,7 @@ void QueryAnalyzer::resolveUnion(const QueryTreeNodePtr & union_node, Identifier\n         return;\n \n     if (union_node_typed.isCTE())\n-        ctes_in_resolve_process.insert(union_node_typed.getCTEName());\n+        ctes_in_resolve_process.insert(union_node);\n \n     auto & queries_nodes = union_node_typed.getQueries().getNodes();\n \n@@ -5918,7 +5851,7 @@ void QueryAnalyzer::resolveUnion(const QueryTreeNodePtr & union_node, Identifier\n     }\n \n     if (union_node_typed.isCTE())\n-        ctes_in_resolve_process.erase(union_node_typed.getCTEName());\n+        ctes_in_resolve_process.erase(union_node);\n }\n \n }\ndiff --git a/src/Analyzer/Resolve/QueryAnalyzer.h b/src/Analyzer/Resolve/QueryAnalyzer.h\nindex 38895c55b831..51d5cb7640b7 100644\n--- a/src/Analyzer/Resolve/QueryAnalyzer.h\n+++ b/src/Analyzer/Resolve/QueryAnalyzer.h\n@@ -172,15 +172,15 @@ class QueryAnalyzer\n \n     /// Resolve identifier functions\n \n-    QueryTreeNodePtr tryResolveIdentifierFromAliases(const IdentifierLookup & identifier_lookup,\n+    IdentifierResolveResult tryResolveIdentifierFromAliases(const IdentifierLookup & identifier_lookup,\n         IdentifierResolveScope & scope,\n-        IdentifierResolveSettings identifier_resolve_settings);\n+        IdentifierResolveContext identifier_resolve_context);\n \n-    IdentifierResolveResult tryResolveIdentifierInParentScopes(const IdentifierLookup & identifier_lookup, IdentifierResolveScope & scope);\n+    IdentifierResolveResult tryResolveIdentifierInParentScopes(const IdentifierLookup & identifier_lookup, IdentifierResolveScope & scope, IdentifierResolveContext identifier_resolve_context);\n \n     IdentifierResolveResult tryResolveIdentifier(const IdentifierLookup & identifier_lookup,\n         IdentifierResolveScope & scope,\n-        IdentifierResolveSettings identifier_resolve_settings = {});\n+        IdentifierResolveContext identifier_resolve_settings = {});\n \n     /// Resolve query tree nodes functions\n \n@@ -195,7 +195,7 @@ class QueryAnalyzer\n     QueryTreeNodesWithNames getMatchedColumnNodesWithNames(const QueryTreeNodePtr & matcher_node,\n         const QueryTreeNodePtr & table_expression_node,\n         const NamesAndTypes & matched_columns,\n-        const IdentifierResolveScope & scope);\n+        IdentifierResolveScope & scope);\n \n     void updateMatchedColumnsFromJoinUsing(QueryTreeNodesWithNames & result_matched_column_nodes_with_names, const QueryTreeNodePtr & source_table_expression, IdentifierResolveScope & scope);\n \n@@ -214,7 +214,12 @@ class QueryAnalyzer\n \n     ProjectionNames resolveFunction(QueryTreeNodePtr & function_node, IdentifierResolveScope & scope);\n \n-    ProjectionNames resolveExpressionNode(QueryTreeNodePtr & node, IdentifierResolveScope & scope, bool allow_lambda_expression, bool allow_table_expression, bool ignore_alias = false);\n+    ProjectionNames resolveExpressionNode(\n+        QueryTreeNodePtr & node,\n+        IdentifierResolveScope & scope,\n+        bool allow_lambda_expression,\n+        bool allow_table_expression,\n+        bool ignore_alias = false);\n \n     ProjectionNames resolveExpressionNodeList(QueryTreeNodePtr & node_list, IdentifierResolveScope & scope, bool allow_lambda_expression, bool allow_table_expression);\n \n@@ -251,10 +256,10 @@ class QueryAnalyzer\n     void resolveUnion(const QueryTreeNodePtr & union_node, IdentifierResolveScope & scope);\n \n     /// Lambdas that are currently in resolve process\n-    std::unordered_set<IQueryTreeNode *> lambdas_in_resolve_process;\n+    QueryTreeNodePtrWithHashSet lambdas_in_resolve_process;\n \n     /// CTEs that are currently in resolve process\n-    std::unordered_set<std::string_view> ctes_in_resolve_process;\n+    QueryTreeNodePtrWithHashSet ctes_in_resolve_process;\n \n     /// Function name to user defined lambda map\n     std::unordered_map<std::string, QueryTreeNodePtr> function_name_to_user_defined_lambda;\ndiff --git a/src/Analyzer/Resolve/QueryExpressionsAliasVisitor.h b/src/Analyzer/Resolve/QueryExpressionsAliasVisitor.h\nindex b4c47b306ae6..ea39ba328a85 100644\n--- a/src/Analyzer/Resolve/QueryExpressionsAliasVisitor.h\n+++ b/src/Analyzer/Resolve/QueryExpressionsAliasVisitor.h\n@@ -40,14 +40,14 @@ class QueryExpressionsAliasVisitor : public InDepthQueryTreeVisitor<QueryExpress\n \n     void visitImpl(QueryTreeNodePtr & node)\n     {\n-        updateAliasesIfNeeded(node, false /*is_lambda_node*/);\n+        updateAliasesIfNeeded(node);\n     }\n \n     bool needChildVisit(const QueryTreeNodePtr &, const QueryTreeNodePtr & child)\n     {\n         if (auto * /*lambda_node*/ _ = child->as<LambdaNode>())\n         {\n-            updateAliasesIfNeeded(child, true /*is_lambda_node*/);\n+            updateAliasesIfNeeded(child);\n             return false;\n         }\n         if (auto * query_tree_node = child->as<QueryNode>())\n@@ -55,7 +55,7 @@ class QueryExpressionsAliasVisitor : public InDepthQueryTreeVisitor<QueryExpress\n             if (query_tree_node->isCTE())\n                 return false;\n \n-            updateAliasesIfNeeded(child, false /*is_lambda_node*/);\n+            updateAliasesIfNeeded(child);\n             return false;\n         }\n         if (auto * union_node = child->as<UnionNode>())\n@@ -63,7 +63,7 @@ class QueryExpressionsAliasVisitor : public InDepthQueryTreeVisitor<QueryExpress\n             if (union_node->isCTE())\n                 return false;\n \n-            updateAliasesIfNeeded(child, false /*is_lambda_node*/);\n+            updateAliasesIfNeeded(child);\n             return false;\n         }\n \n@@ -72,45 +72,59 @@ class QueryExpressionsAliasVisitor : public InDepthQueryTreeVisitor<QueryExpress\n private:\n     void addDuplicatingAlias(const QueryTreeNodePtr & node)\n     {\n-        aliases.nodes_with_duplicated_aliases.emplace(node);\n-        auto cloned_node = node->clone();\n-        aliases.cloned_nodes_with_duplicated_aliases.emplace_back(cloned_node);\n-        aliases.nodes_with_duplicated_aliases.emplace(cloned_node);\n+        aliases.nodes_with_duplicated_aliases.emplace_back(node);\n     }\n \n-    void updateAliasesIfNeeded(const QueryTreeNodePtr & node, bool is_lambda_node)\n+    void updateAliasesIfNeeded(const QueryTreeNodePtr & node)\n     {\n         if (!node->hasAlias())\n             return;\n \n+        auto node_type = node->getNodeType();\n+\n         // We should not resolve expressions to WindowNode\n-        if (node->getNodeType() == QueryTreeNodeType::WINDOW)\n+        if (node_type == QueryTreeNodeType::WINDOW)\n             return;\n \n         const auto & alias = node->getAlias();\n+        auto cloned_alias_node = node->clone();\n \n-        if (is_lambda_node)\n+        switch (node_type)\n         {\n-            if (aliases.alias_name_to_expression_node->contains(alias))\n-                addDuplicatingAlias(node);\n-\n-            auto [_, inserted] = aliases.alias_name_to_lambda_node.insert(std::make_pair(alias, node));\n-            if (!inserted)\n-                addDuplicatingAlias(node);\n-\n-            return;\n+        case QueryTreeNodeType::LAMBDA:\n+            {\n+                auto [_, inserted] = aliases.alias_name_to_lambda_node.emplace(alias, cloned_alias_node);\n+                if (!inserted || aliases.alias_name_to_expression_node.contains(alias))\n+                    addDuplicatingAlias(cloned_alias_node);\n+                break;\n+            }\n+        case QueryTreeNodeType::IDENTIFIER:\n+            {\n+                auto [_1, inserted_expression] = aliases.alias_name_to_expression_node.emplace(alias, cloned_alias_node);\n+                bool inserted_lambda           = true; // Avoid adding to duplicating aliases if identifier is compound.\n+                bool inserted_table_expression = true; // Avoid adding to duplicating aliases if identifier is compound.\n+\n+                // Alias to compound identifier cannot reference table expression or lambda.\n+                // Example: SELECT x.b as x FROM (SELECT 1 as a, 2 as b) as x\n+                auto * identifier_node = node->as<IdentifierNode>();\n+                if (identifier_node->getIdentifier().isShort())\n+                {\n+                    inserted_lambda = aliases.alias_name_to_lambda_node.emplace(alias, cloned_alias_node).second;\n+                    inserted_table_expression = aliases.alias_name_to_table_expression_node.emplace(alias, cloned_alias_node).second;\n+                }\n+\n+                if (!inserted_expression || !inserted_lambda || !inserted_table_expression)\n+                    addDuplicatingAlias(cloned_alias_node);\n+                break;\n+            }\n+        default:\n+            {\n+                auto [_, inserted] = aliases.alias_name_to_expression_node.emplace(alias, cloned_alias_node);\n+                if (!inserted || aliases.alias_name_to_lambda_node.contains(alias))\n+                    addDuplicatingAlias(cloned_alias_node);\n+                break;\n+            }\n         }\n-\n-        if (aliases.alias_name_to_lambda_node.contains(alias))\n-            addDuplicatingAlias(node);\n-\n-        auto [_, inserted] = aliases.alias_name_to_expression_node->insert(std::make_pair(alias, node));\n-        if (!inserted)\n-            addDuplicatingAlias(node);\n-\n-        /// If node is identifier put it into transitive aliases map.\n-        if (const auto * identifier = typeid_cast<const IdentifierNode *>(node.get()))\n-            aliases.transitive_aliases.insert(std::make_pair(alias, identifier->getIdentifier()));\n     }\n \n     ScopeAliases & aliases;\ndiff --git a/src/Analyzer/Resolve/ScopeAliases.h b/src/Analyzer/Resolve/ScopeAliases.h\nindex c67a94ef2348..5c2a58e1a82c 100644\n--- a/src/Analyzer/Resolve/ScopeAliases.h\n+++ b/src/Analyzer/Resolve/ScopeAliases.h\n@@ -9,10 +9,7 @@ namespace DB\n struct ScopeAliases\n {\n     /// Alias name to query expression node\n-    std::unordered_map<std::string, QueryTreeNodePtr> alias_name_to_expression_node_before_group_by;\n-    std::unordered_map<std::string, QueryTreeNodePtr> alias_name_to_expression_node_after_group_by;\n-\n-    std::unordered_map<std::string, QueryTreeNodePtr> * alias_name_to_expression_node = nullptr;\n+    std::unordered_map<std::string, QueryTreeNodePtr> alias_name_to_expression_node;\n \n     /// Alias name to lambda node\n     std::unordered_map<std::string, QueryTreeNodePtr> alias_name_to_lambda_node;\n@@ -20,18 +17,19 @@ struct ScopeAliases\n     /// Alias name to table expression node\n     std::unordered_map<std::string, QueryTreeNodePtr> alias_name_to_table_expression_node;\n \n-    /// Expressions like `x as y` where we can't say whether it's a function, expression or table.\n-    std::unordered_map<std::string, Identifier> transitive_aliases;\n-\n     /// Nodes with duplicated aliases\n-    std::unordered_set<QueryTreeNodePtr> nodes_with_duplicated_aliases;\n-    std::vector<QueryTreeNodePtr> cloned_nodes_with_duplicated_aliases;\n+    QueryTreeNodes nodes_with_duplicated_aliases;\n+\n+    /// Cloned resolved expressions with aliases that must be removed\n+    QueryTreeNodes node_to_remove_aliases;\n+\n+    std::unordered_map<std::string, DataTypePtr> alias_name_to_expression_type;\n \n     std::unordered_map<std::string, QueryTreeNodePtr> & getAliasMap(IdentifierLookupContext lookup_context)\n     {\n         switch (lookup_context)\n         {\n-            case IdentifierLookupContext::EXPRESSION: return *alias_name_to_expression_node;\n+            case IdentifierLookupContext::EXPRESSION: return alias_name_to_expression_node;\n             case IdentifierLookupContext::FUNCTION: return alias_name_to_lambda_node;\n             case IdentifierLookupContext::TABLE_EXPRESSION: return alias_name_to_table_expression_node;\n         }\n@@ -59,27 +57,9 @@ struct ScopeAliases\n \n         auto it = alias_map.find(*key);\n \n-        if (it != alias_map.end())\n-            return &it->second;\n-\n-        if (lookup.lookup_context == IdentifierLookupContext::TABLE_EXPRESSION)\n+        if (it == alias_map.end())\n             return {};\n \n-        while (it == alias_map.end())\n-        {\n-            auto jt = transitive_aliases.find(*key);\n-            if (jt == transitive_aliases.end())\n-                return {};\n-\n-            const auto & new_key = getKey(jt->second, find_option);\n-            /// Ignore potential cyclic aliases.\n-            if (new_key == *key)\n-                return {};\n-\n-            key = &new_key;\n-            it = alias_map.find(*key);\n-        }\n-\n         return &it->second;\n     }\n \ndiff --git a/src/Analyzer/Resolve/TableExpressionData.h b/src/Analyzer/Resolve/TableExpressionData.h\nindex 6770672d0c29..bbedad69cfe4 100644\n--- a/src/Analyzer/Resolve/TableExpressionData.h\n+++ b/src/Analyzer/Resolve/TableExpressionData.h\n@@ -54,22 +54,21 @@ struct AnalysisTableExpressionData\n \n     [[maybe_unused]] void dump(WriteBuffer & buffer) const\n     {\n-        buffer << \"Table expression name \" << table_expression_name;\n+        buffer << \" Table expression name '\" << table_expression_name << \"'\";\n \n         if (!table_expression_description.empty())\n-            buffer << \" table expression description \" << table_expression_description;\n+            buffer << \", description '\" << table_expression_description << \"'\\n\";\n \n         if (!database_name.empty())\n-            buffer << \" database name \" << database_name;\n+            buffer << \"   database name '\" << database_name << \"'\\n\";\n \n         if (!table_name.empty())\n-            buffer << \" table name \" << table_name;\n-\n-        buffer << \" should qualify columns \" << should_qualify_columns;\n-        buffer << \" columns size \" << column_name_to_column_node.size() << '\\n';\n+            buffer << \"   table name '\" << table_name << \"'\\n\";\n \n+        buffer << \"   Should qualify columns \" << should_qualify_columns << \"\\n\";\n+        buffer << \"   Columns size \" << column_name_to_column_node.size() << \"\\n\";\n         for (const auto & [column_name, column_node] : column_name_to_column_node)\n-            buffer << \"Column name \" << column_name << \" column node \" << column_node->dumpTree() << '\\n';\n+            buffer << \"    { \" << column_name << \" : \" << column_node->dumpTree() << \" }\\n\";\n     }\n \n     [[maybe_unused]] String dump() const\ndiff --git a/src/Analyzer/Utils.cpp b/src/Analyzer/Utils.cpp\nindex 02ee778885f3..a2bf3ae8b0d0 100644\n--- a/src/Analyzer/Utils.cpp\n+++ b/src/Analyzer/Utils.cpp\n@@ -22,17 +22,18 @@\n \n #include <Interpreters/Context.h>\n \n-#include <Analyzer/InDepthQueryTreeVisitor.h>\n-#include <Analyzer/IdentifierNode.h>\n-#include <Analyzer/ConstantNode.h>\n+#include <Analyzer/ArrayJoinNode.h>\n #include <Analyzer/ColumnNode.h>\n+#include <Analyzer/ConstantNode.h>\n #include <Analyzer/FunctionNode.h>\n+#include <Analyzer/IdentifierNode.h>\n+#include <Analyzer/InDepthQueryTreeVisitor.h>\n #include <Analyzer/JoinNode.h>\n-#include <Analyzer/ArrayJoinNode.h>\n-#include <Analyzer/TableNode.h>\n-#include <Analyzer/TableFunctionNode.h>\n #include <Analyzer/QueryNode.h>\n+#include <Analyzer/TableFunctionNode.h>\n+#include <Analyzer/TableNode.h>\n #include <Analyzer/UnionNode.h>\n+#include <Analyzer/Resolve/IdentifierResolveScope.h>\n \n #include <ranges>\n namespace DB\n@@ -205,6 +206,27 @@ bool isQueryOrUnionNode(const QueryTreeNodePtr & node)\n     return isQueryOrUnionNode(node.get());\n }\n \n+bool isDependentColumn(IdentifierResolveScope * scope_to_check, const QueryTreeNodePtr & column_source)\n+{\n+    /// The case of lambda argument. Example:\n+    /// arrayMap(X -> X + Y, [0])\n+    ///\n+    /// X would have lambda as a source node\n+    /// Y comes from outer scope and requires ordinary check.\n+    if (column_source->getNodeType() == QueryTreeNodeType::LAMBDA)\n+        return false;\n+\n+    while (scope_to_check != nullptr)\n+    {\n+        if (scope_to_check->registered_table_expression_nodes.contains(column_source))\n+            return false;\n+        if (isQueryOrUnionNode(scope_to_check->scope_node))\n+            return true;\n+        scope_to_check = scope_to_check->parent_scope;\n+    }\n+    return true;\n+}\n+\n QueryTreeNodePtr buildCastFunction(const QueryTreeNodePtr & expression,\n     const DataTypePtr & type,\n     const ContextPtr & context,\ndiff --git a/src/Analyzer/Utils.h b/src/Analyzer/Utils.h\nindex 0ace5b722bfe..858e7e2c247d 100644\n--- a/src/Analyzer/Utils.h\n+++ b/src/Analyzer/Utils.h\n@@ -12,6 +12,7 @@ namespace DB\n {\n \n class FunctionNode;\n+struct IdentifierResolveScope;\n \n /// Returns true if node part of root tree, false otherwise\n bool isNodePartOfTree(const IQueryTreeNode * node, const IQueryTreeNode * root);\n@@ -40,6 +41,11 @@ bool isQueryOrUnionNode(const IQueryTreeNode * node);\n /// Returns true, if node has type QUERY or UNION\n bool isQueryOrUnionNode(const QueryTreeNodePtr & node);\n \n+/* Returns true, if coulmn source is not registered in scopes that appear\n+ * before nearest query scope.\n+ */\n+bool isDependentColumn(IdentifierResolveScope * scope_to_check, const QueryTreeNodePtr & column_source);\n+\n /** Build cast function that cast expression into type.\n   * If resolve = true, then result cast function is resolved during build, otherwise\n   * result cast function is not resolved during build.\ndiff --git a/src/Planner/PlannerContext.cpp b/src/Planner/PlannerContext.cpp\nindex c9187e6aa2aa..c7d20589a50c 100644\n--- a/src/Planner/PlannerContext.cpp\n+++ b/src/Planner/PlannerContext.cpp\n@@ -129,7 +129,7 @@ const ColumnIdentifier * PlannerContext::getColumnNodeIdentifierOrNull(const Que\n \n PlannerContext::SetKey PlannerContext::createSetKey(const DataTypePtr & left_operand_type, const QueryTreeNodePtr & set_source_node)\n {\n-    const auto set_source_hash = set_source_node->getTreeHash();\n+    const auto set_source_hash = set_source_node->getTreeHash({ .compare_aliases = false });\n     if (set_source_node->as<ConstantNode>())\n     {\n         /* We need to hash the type of the left operand because we can build different sets for different types.\ndiff --git a/src/Processors/QueryPlan/SetsSerialization.cpp b/src/Processors/QueryPlan/SetsSerialization.cpp\nindex ae887d1e18d0..dec272991a55 100644\n--- a/src/Processors/QueryPlan/SetsSerialization.cpp\n+++ b/src/Processors/QueryPlan/SetsSerialization.cpp\n@@ -204,7 +204,7 @@ static void makeSetsFromStorage(std::list<QueryPlanAndSets::SetFromStorage> sets\n     for (auto & set : sets)\n     {\n         Identifier identifier = parseTableIdentifier(set.storage_name, context);\n-        auto table_node = resolveTable(identifier, context);\n+        auto * table_node = resolveTable(identifier, context);\n         const auto * storage_set = typeid_cast<const StorageSet *>(table_node->getStorage().get());\n         if (!storage_set)\n             throw Exception(ErrorCodes::INCORRECT_DATA, \"Table {} is not a StorageSet\", set.storage_name);\ndiff --git a/src/Processors/QueryPlan/resolveStorages.cpp b/src/Processors/QueryPlan/resolveStorages.cpp\nindex 942d9bf0f850..3d466c6571b7 100644\n--- a/src/Processors/QueryPlan/resolveStorages.cpp\n+++ b/src/Processors/QueryPlan/resolveStorages.cpp\n@@ -39,12 +39,15 @@ Identifier parseTableIdentifier(const std::string & str, const ContextPtr & cont\n     return Identifier(std::move(res->as<ASTIdentifier>()->name_parts));\n }\n \n-std::shared_ptr<TableNode> resolveTable(const Identifier & identifier, const ContextPtr & context)\n+TableNode * resolveTable(const Identifier & identifier, const ContextPtr & context)\n {\n-    auto table_node_ptr = IdentifierResolver::tryResolveTableIdentifierFromDatabaseCatalog(identifier, context);\n-    if (!table_node_ptr)\n+    auto resolve_result = IdentifierResolver::tryResolveTableIdentifierFromDatabaseCatalog(identifier, context);\n+    if (!resolve_result)\n         throw Exception(ErrorCodes::UNKNOWN_TABLE, \"Unknown table {}\", identifier.getFullName());\n \n+    auto * table_node_ptr = resolve_result.resolved_identifier->as<TableNode>();\n+    chassert(table_node_ptr != nullptr);\n+\n     return table_node_ptr;\n }\n \ndiff --git a/src/Processors/QueryPlan/resolveStorages.h b/src/Processors/QueryPlan/resolveStorages.h\nindex c1abd7425dd3..a00ee16de818 100644\n--- a/src/Processors/QueryPlan/resolveStorages.h\n+++ b/src/Processors/QueryPlan/resolveStorages.h\n@@ -7,7 +7,7 @@ namespace DB\n class Identifier;\n class TableNode;\n \n-std::shared_ptr<TableNode> resolveTable(const Identifier & identifier, const ContextPtr & context);\n+TableNode * resolveTable(const Identifier & identifier, const ContextPtr & context);\n Identifier parseTableIdentifier(const std::string & str, const ContextPtr & context);\n \n }\ndiff --git a/src/Storages/buildQueryTreeForShard.cpp b/src/Storages/buildQueryTreeForShard.cpp\nindex 8146529362f8..3d21deebb983 100644\n--- a/src/Storages/buildQueryTreeForShard.cpp\n+++ b/src/Storages/buildQueryTreeForShard.cpp\n@@ -400,19 +400,28 @@ QueryTreeNodePtr buildQueryTreeForShard(const PlannerContextPtr & planner_contex\n                 && in_function_node_type != QueryTreeNodeType::TABLE)\n                 continue;\n \n+            QueryTreeNodePtr replacement_table_expression;\n             auto & temporary_table_expression_node = global_in_temporary_tables[in_function_subquery_node];\n             if (!temporary_table_expression_node)\n             {\n                 auto subquery_to_execute = in_function_subquery_node;\n                 if (subquery_to_execute->as<TableNode>())\n-                    subquery_to_execute\n-                        = buildSubqueryToReadColumnsFromTableExpression(subquery_to_execute, planner_context->getQueryContext());\n+                    subquery_to_execute = buildSubqueryToReadColumnsFromTableExpression(\n+                        subquery_to_execute,\n+                        planner_context->getQueryContext());\n \n                 temporary_table_expression_node = executeSubqueryNode(\n-                    subquery_to_execute, planner_context->getMutableQueryContext(), global_in_or_join_node.subquery_depth);\n+                    subquery_to_execute,\n+                    planner_context->getMutableQueryContext(),\n+                    global_in_or_join_node.subquery_depth);\n+                    replacement_table_expression = temporary_table_expression_node;\n+            }\n+            else\n+            {\n+                replacement_table_expression = temporary_table_expression_node->clone();\n             }\n \n-            replacement_map.emplace(in_function_subquery_node.get(), temporary_table_expression_node);\n+            replacement_map.emplace(in_function_subquery_node.get(), replacement_table_expression);\n         }\n         else\n         {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00621_regression_for_in_operator.reference b/tests/queries/0_stateless/00621_regression_for_in_operator.reference\nindex ab8a1499f6d7..a98294620f8a 100644\n--- a/tests/queries/0_stateless/00621_regression_for_in_operator.reference\n+++ b/tests/queries/0_stateless/00621_regression_for_in_operator.reference\n@@ -40,6 +40,6 @@ QUERY id: 0\n           FUNCTION id: 10, function_name: equals, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n               LIST id: 11, nodes: 2\n-                COLUMN id: 8, column_name: g, result_type: String, source_id: 3\n-                CONSTANT id: 12, constant_value: \\'6\\', constant_value_type: String\n+                COLUMN id: 12, column_name: g, result_type: String, source_id: 3\n+                CONSTANT id: 13, constant_value: \\'6\\', constant_value_type: String\n   SETTINGS enable_analyzer=1\ndiff --git a/tests/queries/0_stateless/00736_disjunction_optimisation.reference b/tests/queries/0_stateless/00736_disjunction_optimisation.reference\nindex 4e7f2e09dead..5a6a33d26ce9 100644\n--- a/tests/queries/0_stateless/00736_disjunction_optimisation.reference\n+++ b/tests/queries/0_stateless/00736_disjunction_optimisation.reference\n@@ -132,24 +132,24 @@ QUERY id: 0\n       FUNCTION id: 4, function_name: in, function_type: ordinary, result_type: UInt8\n         ARGUMENTS\n           LIST id: 5, nodes: 2\n-            COLUMN id: 2, column_name: k, result_type: UInt64, source_id: 3\n-            CONSTANT id: 6, constant_value: Tuple_(UInt64_1, UInt64_2, UInt64_3), constant_value_type: Tuple(UInt8, UInt8, UInt8)\n-      COLUMN id: 7, column_name: s, result_type: UInt64, source_id: 3\n-      FUNCTION id: 8, function_name: equals, function_type: ordinary, result_type: UInt8\n+            COLUMN id: 6, column_name: k, result_type: UInt64, source_id: 3\n+            CONSTANT id: 7, constant_value: Tuple_(UInt64_1, UInt64_2, UInt64_3), constant_value_type: Tuple(UInt8, UInt8, UInt8)\n+      COLUMN id: 8, column_name: s, result_type: UInt64, source_id: 3\n+      FUNCTION id: 9, function_name: equals, function_type: ordinary, result_type: UInt8\n         ARGUMENTS\n-          LIST id: 9, nodes: 2\n-            COLUMN id: 7, column_name: s, result_type: UInt64, source_id: 3\n-            CONSTANT id: 10, constant_value: UInt64_21, constant_value_type: UInt8\n-      FUNCTION id: 11, function_name: in, function_type: ordinary, result_type: UInt8\n+          LIST id: 10, nodes: 2\n+            COLUMN id: 11, column_name: s, result_type: UInt64, source_id: 3\n+            CONSTANT id: 12, constant_value: UInt64_21, constant_value_type: UInt8\n+      FUNCTION id: 13, function_name: in, function_type: ordinary, result_type: UInt8\n         ARGUMENTS\n-          LIST id: 12, nodes: 2\n-            COLUMN id: 7, column_name: s, result_type: UInt64, source_id: 3\n-            CONSTANT id: 13, constant_value: Tuple_(UInt64_21, UInt64_22), constant_value_type: Tuple(UInt8, UInt8)\n-      FUNCTION id: 14, function_name: in, function_type: ordinary, result_type: UInt8\n+          LIST id: 14, nodes: 2\n+            COLUMN id: 15, column_name: s, result_type: UInt64, source_id: 3\n+            CONSTANT id: 16, constant_value: Tuple_(UInt64_21, UInt64_22), constant_value_type: Tuple(UInt8, UInt8)\n+      FUNCTION id: 17, function_name: in, function_type: ordinary, result_type: UInt8\n         ARGUMENTS\n-          LIST id: 15, nodes: 2\n-            COLUMN id: 7, column_name: s, result_type: UInt64, source_id: 3\n-            CONSTANT id: 16, constant_value: Tuple_(UInt64_21, UInt64_22, UInt64_23), constant_value_type: Tuple(UInt8, UInt8, UInt8)\n+          LIST id: 18, nodes: 2\n+            COLUMN id: 19, column_name: s, result_type: UInt64, source_id: 3\n+            CONSTANT id: 20, constant_value: Tuple_(UInt64_21, UInt64_22, UInt64_23), constant_value_type: Tuple(UInt8, UInt8, UInt8)\n   JOIN TREE\n     TABLE id: 3, alias: __table1, table_name: default.bug\n   SETTINGS enable_analyzer=1\n@@ -181,8 +181,8 @@ QUERY id: 0\n       FUNCTION id: 4, function_name: in, function_type: ordinary, result_type: UInt8\n         ARGUMENTS\n           LIST id: 5, nodes: 2\n-            COLUMN id: 2, column_name: s, result_type: UInt64, source_id: 3\n-            CONSTANT id: 6, constant_value: Tuple_(UInt64_21, UInt64_22, UInt64_23), constant_value_type: Tuple(UInt8, UInt8, UInt8)\n+            COLUMN id: 6, column_name: s, result_type: UInt64, source_id: 3\n+            CONSTANT id: 7, constant_value: Tuple_(UInt64_21, UInt64_22, UInt64_23), constant_value_type: Tuple(UInt8, UInt8, UInt8)\n   JOIN TREE\n     TABLE id: 3, alias: __table1, table_name: default.bug\n   SETTINGS enable_analyzer=1\n@@ -320,32 +320,32 @@ QUERY id: 0\n       FUNCTION id: 4, function_name: in, function_type: ordinary, result_type: UInt8\n         ARGUMENTS\n           LIST id: 5, nodes: 2\n-            COLUMN id: 2, column_name: k, result_type: UInt64, source_id: 3\n-            CONSTANT id: 6, constant_value: Tuple_(UInt64_1, UInt64_2, UInt64_3), constant_value_type: Tuple(UInt8, UInt8, UInt8)\n-      COLUMN id: 7, column_name: s, result_type: UInt64, source_id: 3\n-      FUNCTION id: 8, function_name: equals, function_type: ordinary, result_type: UInt8\n+            COLUMN id: 6, column_name: k, result_type: UInt64, source_id: 3\n+            CONSTANT id: 7, constant_value: Tuple_(UInt64_1, UInt64_2, UInt64_3), constant_value_type: Tuple(UInt8, UInt8, UInt8)\n+      COLUMN id: 8, column_name: s, result_type: UInt64, source_id: 3\n+      FUNCTION id: 9, function_name: equals, function_type: ordinary, result_type: UInt8\n         ARGUMENTS\n-          LIST id: 9, nodes: 2\n-            COLUMN id: 7, column_name: s, result_type: UInt64, source_id: 3\n-            CONSTANT id: 10, constant_value: UInt64_21, constant_value_type: UInt8\n-      FUNCTION id: 11, function_name: or, function_type: ordinary, result_type: UInt8\n+          LIST id: 10, nodes: 2\n+            COLUMN id: 11, column_name: s, result_type: UInt64, source_id: 3\n+            CONSTANT id: 12, constant_value: UInt64_21, constant_value_type: UInt8\n+      FUNCTION id: 13, function_name: or, function_type: ordinary, result_type: UInt8\n         ARGUMENTS\n-          LIST id: 12, nodes: 2\n-            FUNCTION id: 13, function_name: equals, function_type: ordinary, result_type: UInt8\n+          LIST id: 14, nodes: 2\n+            FUNCTION id: 15, function_name: equals, function_type: ordinary, result_type: UInt8\n               ARGUMENTS\n-                LIST id: 14, nodes: 2\n-                  COLUMN id: 7, column_name: s, result_type: UInt64, source_id: 3\n-                  CONSTANT id: 15, constant_value: UInt64_21, constant_value_type: UInt8\n-            FUNCTION id: 16, function_name: equals, function_type: ordinary, result_type: UInt8\n+                LIST id: 16, nodes: 2\n+                  COLUMN id: 17, column_name: s, result_type: UInt64, source_id: 3\n+                  CONSTANT id: 18, constant_value: UInt64_21, constant_value_type: UInt8\n+            FUNCTION id: 19, function_name: equals, function_type: ordinary, result_type: UInt8\n               ARGUMENTS\n-                LIST id: 17, nodes: 2\n-                  COLUMN id: 7, column_name: s, result_type: UInt64, source_id: 3\n-                  CONSTANT id: 18, constant_value: UInt64_22, constant_value_type: UInt8\n-      FUNCTION id: 19, function_name: in, function_type: ordinary, result_type: UInt8\n+                LIST id: 20, nodes: 2\n+                  COLUMN id: 21, column_name: s, result_type: UInt64, source_id: 3\n+                  CONSTANT id: 22, constant_value: UInt64_22, constant_value_type: UInt8\n+      FUNCTION id: 23, function_name: in, function_type: ordinary, result_type: UInt8\n         ARGUMENTS\n-          LIST id: 20, nodes: 2\n-            COLUMN id: 7, column_name: s, result_type: UInt64, source_id: 3\n-            CONSTANT id: 21, constant_value: Tuple_(UInt64_21, UInt64_22, UInt64_23), constant_value_type: Tuple(UInt8, UInt8, UInt8)\n+          LIST id: 24, nodes: 2\n+            COLUMN id: 25, column_name: s, result_type: UInt64, source_id: 3\n+            CONSTANT id: 26, constant_value: Tuple_(UInt64_21, UInt64_22, UInt64_23), constant_value_type: Tuple(UInt8, UInt8, UInt8)\n   JOIN TREE\n     TABLE id: 3, alias: __table1, table_name: default.bug\n   SETTINGS enable_analyzer=1\n@@ -377,8 +377,8 @@ QUERY id: 0\n       FUNCTION id: 4, function_name: in, function_type: ordinary, result_type: UInt8\n         ARGUMENTS\n           LIST id: 5, nodes: 2\n-            COLUMN id: 2, column_name: s, result_type: UInt64, source_id: 3\n-            CONSTANT id: 6, constant_value: Tuple_(UInt64_21, UInt64_22, UInt64_23), constant_value_type: Tuple(UInt8, UInt8, UInt8)\n+            COLUMN id: 6, column_name: s, result_type: UInt64, source_id: 3\n+            CONSTANT id: 7, constant_value: Tuple_(UInt64_21, UInt64_22, UInt64_23), constant_value_type: Tuple(UInt8, UInt8, UInt8)\n   JOIN TREE\n     TABLE id: 3, alias: __table1, table_name: default.bug\n   SETTINGS enable_analyzer=1\n@@ -410,8 +410,8 @@ QUERY id: 0\n       FUNCTION id: 4, function_name: in, function_type: ordinary, result_type: UInt8\n         ARGUMENTS\n           LIST id: 5, nodes: 2\n-            COLUMN id: 2, column_name: s, result_type: UInt64, source_id: 3\n-            CONSTANT id: 6, constant_value: Tuple_(UInt64_21, UInt64_22, UInt64_23), constant_value_type: Tuple(UInt8, UInt8, UInt8)\n+            COLUMN id: 6, column_name: s, result_type: UInt64, source_id: 3\n+            CONSTANT id: 7, constant_value: Tuple_(UInt64_21, UInt64_22, UInt64_23), constant_value_type: Tuple(UInt8, UInt8, UInt8)\n   JOIN TREE\n     TABLE id: 3, alias: __table1, table_name: default.bug\n   SETTINGS enable_analyzer=1\ndiff --git a/tests/queries/0_stateless/00818_alias_bug_4110.sql b/tests/queries/0_stateless/00818_alias_bug_4110.sql\nindex 1242a3b605d4..dc4ada180b29 100644\n--- a/tests/queries/0_stateless/00818_alias_bug_4110.sql\n+++ b/tests/queries/0_stateless/00818_alias_bug_4110.sql\n@@ -12,7 +12,7 @@ select s.a + 2 as b, b - 1 as a from (select 10 as a) s;\n select s.a as a, s.a + 2 as b from (select 10 as a) s;\n select s.a + 1 as a, s.a + 2 as b from (select 10 as a) s;\n select a + 1 as a, a + 1 as b from (select 10 as a);\n-select a + 1 as b, b + 1 as a from (select 10 as a); -- { serverError CYCLIC_ALIASES }\n+select a + 1 as b, b + 1 as a from (select 10 as a); -- { serverError CYCLIC_ALIASES, UNKNOWN_IDENTIFIER }\n select 10 as a, a + 1 as a; -- { serverError UNKNOWN_IDENTIFIER }\n with 10 as a select a as a; -- { serverError UNKNOWN_IDENTIFIER }\n with 10 as a select a + 1 as a; -- { serverError UNKNOWN_IDENTIFIER }\ndiff --git a/tests/queries/0_stateless/01300_group_by_other_keys_having.reference b/tests/queries/0_stateless/01300_group_by_other_keys_having.reference\nindex 23028e3fb6e0..b5fbbf540ff1 100644\n--- a/tests/queries/0_stateless/01300_group_by_other_keys_having.reference\n+++ b/tests/queries/0_stateless/01300_group_by_other_keys_having.reference\n@@ -63,43 +63,43 @@ QUERY id: 0\n       FUNCTION id: 19, function_name: modulo, function_type: ordinary, result_type: UInt8\n         ARGUMENTS\n           LIST id: 20, nodes: 2\n-            COLUMN id: 17, column_name: number, result_type: UInt64, source_id: 11\n-            CONSTANT id: 21, constant_value: UInt64_2, constant_value_type: UInt8\n+            COLUMN id: 21, column_name: number, result_type: UInt64, source_id: 11\n+            CONSTANT id: 22, constant_value: UInt64_2, constant_value_type: UInt8\n   HAVING\n-    FUNCTION id: 22, function_name: greater, function_type: ordinary, result_type: UInt8\n+    FUNCTION id: 23, function_name: greater, function_type: ordinary, result_type: UInt8\n       ARGUMENTS\n-        LIST id: 23, nodes: 2\n-          FUNCTION id: 24, function_name: multiply, function_type: ordinary, result_type: Float64\n+        LIST id: 24, nodes: 2\n+          FUNCTION id: 25, function_name: multiply, function_type: ordinary, result_type: Float64\n             ARGUMENTS\n-              LIST id: 25, nodes: 2\n-                CONSTANT id: 26, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n+              LIST id: 26, nodes: 2\n+                CONSTANT id: 27, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n                   EXPRESSION\n-                    FUNCTION id: 27, function_name: log, function_type: ordinary, result_type: Float64\n+                    FUNCTION id: 28, function_name: log, function_type: ordinary, result_type: Float64\n                       ARGUMENTS\n-                        LIST id: 28, nodes: 1\n-                          CONSTANT id: 29, constant_value: UInt64_2, constant_value_type: UInt8\n-                FUNCTION id: 30, function_name: avg, function_type: aggregate, result_type: Float64\n+                        LIST id: 29, nodes: 1\n+                          CONSTANT id: 30, constant_value: UInt64_2, constant_value_type: UInt8\n+                FUNCTION id: 31, function_name: avg, function_type: aggregate, result_type: Float64\n                   ARGUMENTS\n-                    LIST id: 31, nodes: 1\n-                      COLUMN id: 32, column_name: number, result_type: UInt64, source_id: 11\n-          CONSTANT id: 33, constant_value: Float64_3465735.3, constant_value_type: Float64\n+                    LIST id: 32, nodes: 1\n+                      COLUMN id: 33, column_name: number, result_type: UInt64, source_id: 11\n+          CONSTANT id: 34, constant_value: Float64_3465735.3, constant_value_type: Float64\n   ORDER BY\n-    LIST id: 34, nodes: 1\n-      SORT id: 35, sort_direction: ASCENDING, with_fill: 0\n+    LIST id: 35, nodes: 1\n+      SORT id: 36, sort_direction: ASCENDING, with_fill: 0\n         EXPRESSION\n-          FUNCTION id: 36, function_name: multiply, function_type: ordinary, result_type: Float64\n+          FUNCTION id: 37, function_name: multiply, function_type: ordinary, result_type: Float64\n             ARGUMENTS\n-              LIST id: 37, nodes: 2\n-                CONSTANT id: 38, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n+              LIST id: 38, nodes: 2\n+                CONSTANT id: 39, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n                   EXPRESSION\n-                    FUNCTION id: 5, function_name: log, function_type: ordinary, result_type: Float64\n+                    FUNCTION id: 40, function_name: log, function_type: ordinary, result_type: Float64\n                       ARGUMENTS\n-                        LIST id: 6, nodes: 1\n-                          CONSTANT id: 7, constant_value: UInt64_2, constant_value_type: UInt8\n-                FUNCTION id: 39, function_name: avg, function_type: aggregate, result_type: Float64\n+                        LIST id: 41, nodes: 1\n+                          CONSTANT id: 42, constant_value: UInt64_2, constant_value_type: UInt8\n+                FUNCTION id: 43, function_name: avg, function_type: aggregate, result_type: Float64\n                   ARGUMENTS\n-                    LIST id: 40, nodes: 1\n-                      COLUMN id: 41, column_name: number, result_type: UInt64, source_id: 11\n+                    LIST id: 44, nodes: 1\n+                      COLUMN id: 45, column_name: number, result_type: UInt64, source_id: 11\n SELECT avg(log(2) * number) AS k\n FROM numbers(10000000)\n WHERE ((number % 5) * (number % 5)) < 5\n@@ -145,31 +145,31 @@ QUERY id: 0\n                 FUNCTION id: 23, function_name: modulo, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n                     LIST id: 24, nodes: 2\n-                      COLUMN id: 17, column_name: number, result_type: UInt64, source_id: 11\n-                      CONSTANT id: 25, constant_value: UInt64_5, constant_value_type: UInt8\n-                FUNCTION id: 26, function_name: modulo, function_type: ordinary, result_type: UInt8\n+                      COLUMN id: 25, column_name: number, result_type: UInt64, source_id: 11\n+                      CONSTANT id: 26, constant_value: UInt64_5, constant_value_type: UInt8\n+                FUNCTION id: 27, function_name: modulo, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n-                    LIST id: 27, nodes: 2\n-                      COLUMN id: 17, column_name: number, result_type: UInt64, source_id: 11\n-                      CONSTANT id: 28, constant_value: UInt64_5, constant_value_type: UInt8\n-          CONSTANT id: 29, constant_value: UInt64_5, constant_value_type: UInt8\n+                    LIST id: 28, nodes: 2\n+                      COLUMN id: 29, column_name: number, result_type: UInt64, source_id: 11\n+                      CONSTANT id: 30, constant_value: UInt64_5, constant_value_type: UInt8\n+          CONSTANT id: 31, constant_value: UInt64_5, constant_value_type: UInt8\n   ORDER BY\n-    LIST id: 30, nodes: 1\n-      SORT id: 31, sort_direction: ASCENDING, with_fill: 0\n+    LIST id: 32, nodes: 1\n+      SORT id: 33, sort_direction: ASCENDING, with_fill: 0\n         EXPRESSION\n-          FUNCTION id: 32, function_name: multiply, function_type: ordinary, result_type: Float64\n+          FUNCTION id: 34, function_name: multiply, function_type: ordinary, result_type: Float64\n             ARGUMENTS\n-              LIST id: 33, nodes: 2\n-                CONSTANT id: 34, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n+              LIST id: 35, nodes: 2\n+                CONSTANT id: 36, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n                   EXPRESSION\n-                    FUNCTION id: 5, function_name: log, function_type: ordinary, result_type: Float64\n+                    FUNCTION id: 37, function_name: log, function_type: ordinary, result_type: Float64\n                       ARGUMENTS\n-                        LIST id: 6, nodes: 1\n-                          CONSTANT id: 7, constant_value: UInt64_2, constant_value_type: UInt8\n-                FUNCTION id: 35, function_name: avg, function_type: aggregate, result_type: Float64\n+                        LIST id: 38, nodes: 1\n+                          CONSTANT id: 39, constant_value: UInt64_2, constant_value_type: UInt8\n+                FUNCTION id: 40, function_name: avg, function_type: aggregate, result_type: Float64\n                   ARGUMENTS\n-                    LIST id: 36, nodes: 1\n-                      COLUMN id: 37, column_name: number, result_type: UInt64, source_id: 11\n+                    LIST id: 41, nodes: 1\n+                      COLUMN id: 42, column_name: number, result_type: UInt64, source_id: 11\n SELECT (number % 5) * (number % 5) AS k\n FROM numbers(10000000)\n WHERE ((number % 5) * (number % 5)) < 5\n@@ -191,55 +191,55 @@ QUERY id: 0\n             FUNCTION id: 9, function_name: modulo, function_type: ordinary, result_type: UInt8\n               ARGUMENTS\n                 LIST id: 10, nodes: 2\n-                  COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                  CONSTANT id: 11, constant_value: UInt64_5, constant_value_type: UInt8\n+                  COLUMN id: 11, column_name: number, result_type: UInt64, source_id: 7\n+                  CONSTANT id: 12, constant_value: UInt64_5, constant_value_type: UInt8\n   JOIN TREE\n     TABLE_FUNCTION id: 7, alias: __table1, table_function_name: numbers\n       ARGUMENTS\n-        LIST id: 12, nodes: 1\n-          CONSTANT id: 13, constant_value: UInt64_10000000, constant_value_type: UInt32\n+        LIST id: 13, nodes: 1\n+          CONSTANT id: 14, constant_value: UInt64_10000000, constant_value_type: UInt32\n   GROUP BY\n-    LIST id: 14, nodes: 1\n-      FUNCTION id: 15, function_name: modulo, function_type: ordinary, result_type: UInt8\n+    LIST id: 15, nodes: 1\n+      FUNCTION id: 16, function_name: modulo, function_type: ordinary, result_type: UInt8\n         ARGUMENTS\n-          LIST id: 16, nodes: 2\n-            COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-            CONSTANT id: 17, constant_value: UInt64_5, constant_value_type: UInt8\n+          LIST id: 17, nodes: 2\n+            COLUMN id: 18, column_name: number, result_type: UInt64, source_id: 7\n+            CONSTANT id: 19, constant_value: UInt64_5, constant_value_type: UInt8\n   HAVING\n-    FUNCTION id: 18, function_name: less, function_type: ordinary, result_type: UInt8\n+    FUNCTION id: 20, function_name: less, function_type: ordinary, result_type: UInt8\n       ARGUMENTS\n-        LIST id: 19, nodes: 2\n-          FUNCTION id: 20, function_name: multiply, function_type: ordinary, result_type: UInt16\n+        LIST id: 21, nodes: 2\n+          FUNCTION id: 22, function_name: multiply, function_type: ordinary, result_type: UInt16\n             ARGUMENTS\n-              LIST id: 21, nodes: 2\n-                FUNCTION id: 22, function_name: modulo, function_type: ordinary, result_type: UInt8\n-                  ARGUMENTS\n-                    LIST id: 23, nodes: 2\n-                      COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                      CONSTANT id: 24, constant_value: UInt64_5, constant_value_type: UInt8\n-                FUNCTION id: 25, function_name: modulo, function_type: ordinary, result_type: UInt8\n+              LIST id: 23, nodes: 2\n+                FUNCTION id: 24, function_name: modulo, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n-                    LIST id: 26, nodes: 2\n-                      COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n+                    LIST id: 25, nodes: 2\n+                      COLUMN id: 26, column_name: number, result_type: UInt64, source_id: 7\n                       CONSTANT id: 27, constant_value: UInt64_5, constant_value_type: UInt8\n-          CONSTANT id: 28, constant_value: UInt64_5, constant_value_type: UInt8\n+                FUNCTION id: 28, function_name: modulo, function_type: ordinary, result_type: UInt8\n+                  ARGUMENTS\n+                    LIST id: 29, nodes: 2\n+                      COLUMN id: 30, column_name: number, result_type: UInt64, source_id: 7\n+                      CONSTANT id: 31, constant_value: UInt64_5, constant_value_type: UInt8\n+          CONSTANT id: 32, constant_value: UInt64_5, constant_value_type: UInt8\n   ORDER BY\n-    LIST id: 29, nodes: 1\n-      SORT id: 30, sort_direction: ASCENDING, with_fill: 0\n+    LIST id: 33, nodes: 1\n+      SORT id: 34, sort_direction: ASCENDING, with_fill: 0\n         EXPRESSION\n-          FUNCTION id: 2, function_name: multiply, function_type: ordinary, result_type: UInt16\n+          FUNCTION id: 35, function_name: multiply, function_type: ordinary, result_type: UInt16\n             ARGUMENTS\n-              LIST id: 3, nodes: 2\n-                FUNCTION id: 4, function_name: modulo, function_type: ordinary, result_type: UInt8\n+              LIST id: 36, nodes: 2\n+                FUNCTION id: 37, function_name: modulo, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n-                    LIST id: 5, nodes: 2\n-                      COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                      CONSTANT id: 8, constant_value: UInt64_5, constant_value_type: UInt8\n-                FUNCTION id: 9, function_name: modulo, function_type: ordinary, result_type: UInt8\n+                    LIST id: 38, nodes: 2\n+                      COLUMN id: 39, column_name: number, result_type: UInt64, source_id: 7\n+                      CONSTANT id: 40, constant_value: UInt64_5, constant_value_type: UInt8\n+                FUNCTION id: 41, function_name: modulo, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n-                    LIST id: 10, nodes: 2\n-                      COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                      CONSTANT id: 11, constant_value: UInt64_5, constant_value_type: UInt8\n+                    LIST id: 42, nodes: 2\n+                      COLUMN id: 43, column_name: number, result_type: UInt64, source_id: 7\n+                      CONSTANT id: 44, constant_value: UInt64_5, constant_value_type: UInt8\n 3465735.9028\n 3465735.9028\n 3465736.595947\n@@ -293,53 +293,53 @@ QUERY id: 0\n             FUNCTION id: 21, function_name: modulo, function_type: ordinary, result_type: UInt8\n               ARGUMENTS\n                 LIST id: 22, nodes: 2\n-                  COLUMN id: 19, column_name: number, result_type: UInt64, source_id: 11\n-                  CONSTANT id: 23, constant_value: UInt64_3, constant_value_type: UInt8\n-      FUNCTION id: 24, function_name: modulo, function_type: ordinary, result_type: UInt8\n+                  COLUMN id: 23, column_name: number, result_type: UInt64, source_id: 11\n+                  CONSTANT id: 24, constant_value: UInt64_3, constant_value_type: UInt8\n+      FUNCTION id: 25, function_name: modulo, function_type: ordinary, result_type: UInt8\n         ARGUMENTS\n-          LIST id: 25, nodes: 2\n-            COLUMN id: 19, column_name: number, result_type: UInt64, source_id: 11\n-            CONSTANT id: 26, constant_value: UInt64_3, constant_value_type: UInt8\n-      FUNCTION id: 27, function_name: modulo, function_type: ordinary, result_type: UInt8\n+          LIST id: 26, nodes: 2\n+            COLUMN id: 27, column_name: number, result_type: UInt64, source_id: 11\n+            CONSTANT id: 28, constant_value: UInt64_3, constant_value_type: UInt8\n+      FUNCTION id: 29, function_name: modulo, function_type: ordinary, result_type: UInt8\n         ARGUMENTS\n-          LIST id: 28, nodes: 2\n-            COLUMN id: 19, column_name: number, result_type: UInt64, source_id: 11\n-            CONSTANT id: 29, constant_value: UInt64_2, constant_value_type: UInt8\n+          LIST id: 30, nodes: 2\n+            COLUMN id: 31, column_name: number, result_type: UInt64, source_id: 11\n+            CONSTANT id: 32, constant_value: UInt64_2, constant_value_type: UInt8\n   HAVING\n-    FUNCTION id: 30, function_name: greater, function_type: ordinary, result_type: UInt8\n+    FUNCTION id: 33, function_name: greater, function_type: ordinary, result_type: UInt8\n       ARGUMENTS\n-        LIST id: 31, nodes: 2\n-          FUNCTION id: 32, function_name: multiply, function_type: ordinary, result_type: Float64\n+        LIST id: 34, nodes: 2\n+          FUNCTION id: 35, function_name: multiply, function_type: ordinary, result_type: Float64\n             ARGUMENTS\n-              LIST id: 33, nodes: 2\n-                CONSTANT id: 34, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n+              LIST id: 36, nodes: 2\n+                CONSTANT id: 37, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n                   EXPRESSION\n-                    FUNCTION id: 35, function_name: log, function_type: ordinary, result_type: Float64\n+                    FUNCTION id: 38, function_name: log, function_type: ordinary, result_type: Float64\n                       ARGUMENTS\n-                        LIST id: 36, nodes: 1\n-                          CONSTANT id: 37, constant_value: UInt64_2, constant_value_type: UInt8\n-                FUNCTION id: 38, function_name: avg, function_type: aggregate, result_type: Float64\n+                        LIST id: 39, nodes: 1\n+                          CONSTANT id: 40, constant_value: UInt64_2, constant_value_type: UInt8\n+                FUNCTION id: 41, function_name: avg, function_type: aggregate, result_type: Float64\n                   ARGUMENTS\n-                    LIST id: 39, nodes: 1\n-                      COLUMN id: 40, column_name: number, result_type: UInt64, source_id: 11\n-          CONSTANT id: 41, constant_value: Float64_3465735.3, constant_value_type: Float64\n+                    LIST id: 42, nodes: 1\n+                      COLUMN id: 43, column_name: number, result_type: UInt64, source_id: 11\n+          CONSTANT id: 44, constant_value: Float64_3465735.3, constant_value_type: Float64\n   ORDER BY\n-    LIST id: 42, nodes: 1\n-      SORT id: 43, sort_direction: ASCENDING, with_fill: 0\n+    LIST id: 45, nodes: 1\n+      SORT id: 46, sort_direction: ASCENDING, with_fill: 0\n         EXPRESSION\n-          FUNCTION id: 44, function_name: multiply, function_type: ordinary, result_type: Float64\n+          FUNCTION id: 47, function_name: multiply, function_type: ordinary, result_type: Float64\n             ARGUMENTS\n-              LIST id: 45, nodes: 2\n-                CONSTANT id: 46, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n+              LIST id: 48, nodes: 2\n+                CONSTANT id: 49, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n                   EXPRESSION\n-                    FUNCTION id: 5, function_name: log, function_type: ordinary, result_type: Float64\n+                    FUNCTION id: 50, function_name: log, function_type: ordinary, result_type: Float64\n                       ARGUMENTS\n-                        LIST id: 6, nodes: 1\n-                          CONSTANT id: 7, constant_value: UInt64_2, constant_value_type: UInt8\n-                FUNCTION id: 47, function_name: avg, function_type: aggregate, result_type: Float64\n+                        LIST id: 51, nodes: 1\n+                          CONSTANT id: 52, constant_value: UInt64_2, constant_value_type: UInt8\n+                FUNCTION id: 53, function_name: avg, function_type: aggregate, result_type: Float64\n                   ARGUMENTS\n-                    LIST id: 48, nodes: 1\n-                      COLUMN id: 49, column_name: number, result_type: UInt64, source_id: 11\n+                    LIST id: 54, nodes: 1\n+                      COLUMN id: 55, column_name: number, result_type: UInt64, source_id: 11\n SELECT avg(log(2) * number) AS k\n FROM numbers(10000000)\n WHERE ((number % 5) * (number % 5)) < 5\ndiff --git a/tests/queries/0_stateless/01323_redundant_functions_in_order_by.reference b/tests/queries/0_stateless/01323_redundant_functions_in_order_by.reference\nindex c2c37cc4de63..002cdeeae3a3 100644\n--- a/tests/queries/0_stateless/01323_redundant_functions_in_order_by.reference\n+++ b/tests/queries/0_stateless/01323_redundant_functions_in_order_by.reference\n@@ -64,7 +64,7 @@ QUERY id: 0\n         LIST id: 11, nodes: 1\n           SORT id: 12, sort_direction: ASCENDING, with_fill: 0\n             EXPRESSION\n-              COLUMN id: 7, column_name: number, result_type: UInt64, source_id: 8\n+              COLUMN id: 13, column_name: number, result_type: UInt64, source_id: 8\n   SETTINGS enable_analyzer=1\n SELECT groupArray(x)\n FROM\n@@ -98,7 +98,7 @@ QUERY id: 0\n         LIST id: 11, nodes: 1\n           SORT id: 12, sort_direction: ASCENDING, with_fill: 0\n             EXPRESSION\n-              COLUMN id: 7, column_name: number, result_type: UInt64, source_id: 8\n+              COLUMN id: 13, column_name: number, result_type: UInt64, source_id: 8\n   SETTINGS enable_analyzer=1\n SELECT groupArray(x)\n FROM\n@@ -137,10 +137,10 @@ QUERY id: 0\n               FUNCTION id: 13, function_name: exp, function_type: ordinary, result_type: Float64\n                 ARGUMENTS\n                   LIST id: 14, nodes: 1\n-                    COLUMN id: 7, column_name: number, result_type: UInt64, source_id: 8\n-          SORT id: 15, sort_direction: ASCENDING, with_fill: 0\n+                    COLUMN id: 15, column_name: number, result_type: UInt64, source_id: 8\n+          SORT id: 16, sort_direction: ASCENDING, with_fill: 0\n             EXPRESSION\n-              COLUMN id: 7, column_name: number, result_type: UInt64, source_id: 8\n+              COLUMN id: 17, column_name: number, result_type: UInt64, source_id: 8\n   SETTINGS enable_analyzer=1\n SELECT\n     key,\n@@ -225,10 +225,10 @@ QUERY id: 0\n     LIST id: 5, nodes: 2\n       SORT id: 6, sort_direction: ASCENDING, with_fill: 0\n         EXPRESSION\n-          COLUMN id: 2, column_name: key, result_type: UInt64, source_id: 3\n-      SORT id: 7, sort_direction: ASCENDING, with_fill: 0\n+          COLUMN id: 7, column_name: key, result_type: UInt64, source_id: 3\n+      SORT id: 8, sort_direction: ASCENDING, with_fill: 0\n         EXPRESSION\n-          COLUMN id: 4, column_name: a, result_type: UInt8, source_id: 3\n+          COLUMN id: 9, column_name: a, result_type: UInt8, source_id: 3\n   SETTINGS enable_analyzer=1\n SELECT\n     key,\n@@ -251,17 +251,17 @@ QUERY id: 0\n     LIST id: 5, nodes: 2\n       SORT id: 6, sort_direction: ASCENDING, with_fill: 0\n         EXPRESSION\n-          COLUMN id: 2, column_name: key, result_type: UInt64, source_id: 3\n-      SORT id: 7, sort_direction: ASCENDING, with_fill: 0\n+          COLUMN id: 7, column_name: key, result_type: UInt64, source_id: 3\n+      SORT id: 8, sort_direction: ASCENDING, with_fill: 0\n         EXPRESSION\n-          FUNCTION id: 8, function_name: exp, function_type: ordinary, result_type: Float64\n+          FUNCTION id: 9, function_name: exp, function_type: ordinary, result_type: Float64\n             ARGUMENTS\n-              LIST id: 9, nodes: 1\n-                FUNCTION id: 10, function_name: plus, function_type: ordinary, result_type: UInt64\n+              LIST id: 10, nodes: 1\n+                FUNCTION id: 11, function_name: plus, function_type: ordinary, result_type: UInt64\n                   ARGUMENTS\n-                    LIST id: 11, nodes: 2\n-                      COLUMN id: 2, column_name: key, result_type: UInt64, source_id: 3\n-                      COLUMN id: 4, column_name: a, result_type: UInt8, source_id: 3\n+                    LIST id: 12, nodes: 2\n+                      COLUMN id: 13, column_name: key, result_type: UInt64, source_id: 3\n+                      COLUMN id: 14, column_name: a, result_type: UInt8, source_id: 3\n   SETTINGS enable_analyzer=1\n QUERY id: 0\n   PROJECTION COLUMNS\n@@ -273,18 +273,18 @@ QUERY id: 0\n     TABLE id: 3, alias: __table1, table_name: default.test\n   GROUP BY\n     LIST id: 4, nodes: 1\n-      COLUMN id: 2, column_name: key, result_type: UInt64, source_id: 3\n+      COLUMN id: 5, column_name: key, result_type: UInt64, source_id: 3\n   ORDER BY\n-    LIST id: 5, nodes: 2\n-      SORT id: 6, sort_direction: ASCENDING, with_fill: 0\n+    LIST id: 6, nodes: 2\n+      SORT id: 7, sort_direction: ASCENDING, with_fill: 0\n         EXPRESSION\n-          FUNCTION id: 7, function_name: avg, function_type: aggregate, result_type: Float64\n+          FUNCTION id: 8, function_name: avg, function_type: aggregate, result_type: Float64\n             ARGUMENTS\n-              LIST id: 8, nodes: 1\n-                COLUMN id: 9, column_name: a, result_type: UInt8, source_id: 3\n-      SORT id: 10, sort_direction: ASCENDING, with_fill: 0\n+              LIST id: 9, nodes: 1\n+                COLUMN id: 10, column_name: a, result_type: UInt8, source_id: 3\n+      SORT id: 11, sort_direction: ASCENDING, with_fill: 0\n         EXPRESSION\n-          COLUMN id: 2, column_name: key, result_type: UInt64, source_id: 3\n+          COLUMN id: 12, column_name: key, result_type: UInt64, source_id: 3\n   SETTINGS enable_analyzer=1\n QUERY id: 0\n   PROJECTION COLUMNS\ndiff --git a/tests/queries/0_stateless/01376_GROUP_BY_injective_elimination_dictGet.reference b/tests/queries/0_stateless/01376_GROUP_BY_injective_elimination_dictGet.reference\nindex 2d16e71f099a..7f35bccea789 100644\n--- a/tests/queries/0_stateless/01376_GROUP_BY_injective_elimination_dictGet.reference\n+++ b/tests/queries/0_stateless/01376_GROUP_BY_injective_elimination_dictGet.reference\n@@ -20,5 +20,5 @@ QUERY id: 0\n           CONSTANT id: 9, constant_value: UInt64_2, constant_value_type: UInt8\n   GROUP BY\n     LIST id: 10, nodes: 1\n-      COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n+      COLUMN id: 11, column_name: number, result_type: UInt64, source_id: 7\n   SETTINGS enable_analyzer=1\ndiff --git a/tests/queries/0_stateless/01651_bugs_from_15889.sql b/tests/queries/0_stateless/01651_bugs_from_15889.sql\nindex b98feaa1f65f..6e762c2208a9 100644\n--- a/tests/queries/0_stateless/01651_bugs_from_15889.sql\n+++ b/tests/queries/0_stateless/01651_bugs_from_15889.sql\n@@ -75,6 +75,25 @@ DROP TABLE IF EXISTS trace_log;\n \n SYSTEM FLUSH LOGS;\n \n+WITH\n+    (\n+        SELECT query_start_time_microseconds\n+        FROM system.query_log\n+        WHERE current_database = currentDatabase()\n+        ORDER BY query_start_time DESC\n+        LIMIT 1\n+    ) AS time_with_microseconds,\n+    (\n+        SELECT\n+            inf,\n+            query_start_time\n+        FROM system.query_log\n+        WHERE current_database = currentDatabase()\n+        ORDER BY query_start_time DESC\n+        LIMIT 1\n+    ) AS t\n+SELECT if(dateDiff('second', toDateTime(time_with_microseconds), toDateTime(t)) = -9223372036854775808, 'ok', ''); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\n+\n WITH (\n     (\n         SELECT query_start_time_microseconds\n@@ -92,7 +111,8 @@ WITH (\n         ORDER BY query_start_time DESC\n         LIMIT 1\n     ) AS t)\n-SELECT if(dateDiff('second', toDateTime(time_with_microseconds), toDateTime(t)) = -9223372036854775808, 'ok', ''); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\n+SELECT if(dateDiff('second', toDateTime(time_with_microseconds), toDateTime(t)) = -9223372036854775808, 'ok', '')\n+SETTINGS allow_experimental_analyzer = 1; -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\n \n WITH (\n     (\ndiff --git a/tests/queries/0_stateless/02174_cte_scalar_cache_mv.reference b/tests/queries/0_stateless/02174_cte_scalar_cache_mv.reference\nindex dcfab092b5cf..91a7a3c6572c 100644\n--- a/tests/queries/0_stateless/02174_cte_scalar_cache_mv.reference\n+++ b/tests/queries/0_stateless/02174_cte_scalar_cache_mv.reference\n@@ -39,7 +39,7 @@\n 89\t89\t89\t89\t5\n 94\t94\t94\t94\t5\n 99\t99\t99\t99\t5\n-02177_MV\t0\t0\t22\n+02177_MV\t2\t63\t22\n 10\n 40\n 70\ndiff --git a/tests/queries/0_stateless/02226_analyzer_or_like_combine.reference b/tests/queries/0_stateless/02226_analyzer_or_like_combine.reference\nindex 61dfd1c67793..3c3db3f04df1 100644\n--- a/tests/queries/0_stateless/02226_analyzer_or_like_combine.reference\n+++ b/tests/queries/0_stateless/02226_analyzer_or_like_combine.reference\n@@ -19,27 +19,27 @@ QUERY id: 0\n           FUNCTION id: 8, function_name: like, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n               LIST id: 9, nodes: 2\n-                FUNCTION id: 2, function_name: materialize, function_type: ordinary, result_type: String\n+                FUNCTION id: 10, function_name: materialize, function_type: ordinary, result_type: String\n                   ARGUMENTS\n-                    LIST id: 3, nodes: 1\n-                      CONSTANT id: 4, constant_value: \\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\', constant_value_type: String\n-                CONSTANT id: 10, constant_value: \\'hell%\\', constant_value_type: String\n-          FUNCTION id: 11, function_name: ilike, function_type: ordinary, result_type: UInt8\n-            ARGUMENTS\n-              LIST id: 12, nodes: 2\n-                FUNCTION id: 2, function_name: materialize, function_type: ordinary, result_type: String\n-                  ARGUMENTS\n-                    LIST id: 3, nodes: 1\n-                      CONSTANT id: 4, constant_value: \\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\', constant_value_type: String\n-                CONSTANT id: 13, constant_value: \\'%\u043f\u0440\u0438\u0432\u0435\u0442%\\', constant_value_type: String\n+                    LIST id: 11, nodes: 1\n+                      CONSTANT id: 12, constant_value: \\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\', constant_value_type: String\n+                CONSTANT id: 13, constant_value: \\'hell%\\', constant_value_type: String\n           FUNCTION id: 14, function_name: ilike, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n               LIST id: 15, nodes: 2\n-                FUNCTION id: 2, function_name: materialize, function_type: ordinary, result_type: String\n+                FUNCTION id: 16, function_name: materialize, function_type: ordinary, result_type: String\n+                  ARGUMENTS\n+                    LIST id: 17, nodes: 1\n+                      CONSTANT id: 18, constant_value: \\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\', constant_value_type: String\n+                CONSTANT id: 19, constant_value: \\'%\u043f\u0440\u0438\u0432\u0435\u0442%\\', constant_value_type: String\n+          FUNCTION id: 20, function_name: ilike, function_type: ordinary, result_type: UInt8\n+            ARGUMENTS\n+              LIST id: 21, nodes: 2\n+                FUNCTION id: 22, function_name: materialize, function_type: ordinary, result_type: String\n                   ARGUMENTS\n-                    LIST id: 3, nodes: 1\n-                      CONSTANT id: 4, constant_value: \\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\', constant_value_type: String\n-                CONSTANT id: 16, constant_value: \\'world%\\', constant_value_type: String\n+                    LIST id: 23, nodes: 1\n+                      CONSTANT id: 24, constant_value: \\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\', constant_value_type: String\n+                CONSTANT id: 25, constant_value: \\'world%\\', constant_value_type: String\n   SETTINGS optimize_or_like_chain=0 enable_analyzer=1\n SELECT materialize(\\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\') AS s\n WHERE multiMatchAny(s, [\\'^hell\\', \\'(?i)\u043f\u0440\u0438\u0432\u0435\u0442\\', \\'(?i)^world\\']) OR false\n@@ -62,12 +62,12 @@ QUERY id: 0\n           FUNCTION id: 8, function_name: multiMatchAny, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n               LIST id: 9, nodes: 2\n-                FUNCTION id: 2, function_name: materialize, function_type: ordinary, result_type: String\n+                FUNCTION id: 10, function_name: materialize, function_type: ordinary, result_type: String\n                   ARGUMENTS\n-                    LIST id: 3, nodes: 1\n-                      CONSTANT id: 4, constant_value: \\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\', constant_value_type: String\n-                CONSTANT id: 10, constant_value: Array_[\\'^hell\\', \\'(?i)\u043f\u0440\u0438\u0432\u0435\u0442\\', \\'(?i)^world\\'], constant_value_type: Array(String)\n-          CONSTANT id: 11, constant_value: UInt64_0, constant_value_type: UInt8\n+                    LIST id: 11, nodes: 1\n+                      CONSTANT id: 12, constant_value: \\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\', constant_value_type: String\n+                CONSTANT id: 13, constant_value: Array_[\\'^hell\\', \\'(?i)\u043f\u0440\u0438\u0432\u0435\u0442\\', \\'(?i)^world\\'], constant_value_type: Array(String)\n+          CONSTANT id: 14, constant_value: UInt64_0, constant_value_type: UInt8\n   SETTINGS optimize_or_like_chain=1 enable_analyzer=1\n SELECT\n     materialize(\\'\u041f\u0440\u0438\u0432\u0435\u0442, World\\') AS s1,\ndiff --git a/tests/queries/0_stateless/02341_analyzer_aliases_basics.sql b/tests/queries/0_stateless/02341_analyzer_aliases_basics.sql\nindex 8bed0c8bc1ef..a6c41e5a9dbe 100644\n--- a/tests/queries/0_stateless/02341_analyzer_aliases_basics.sql\n+++ b/tests/queries/0_stateless/02341_analyzer_aliases_basics.sql\n@@ -12,7 +12,7 @@ SELECT 1 AS x, x, x + 1;\n SELECT x, x + 1, 1 AS x;\n SELECT x, 1 + (2 + (3 AS x));\n \n-SELECT a AS b, b AS a; -- { serverError CYCLIC_ALIASES }\n+SELECT a AS b, b AS a; -- { serverError CYCLIC_ALIASES, UNKNOWN_IDENTIFIER }\n \n DROP TABLE IF EXISTS test_table;\n CREATE TABLE test_table\n@@ -30,8 +30,8 @@ SELECT id_1, value_1, id as id_1, value as value_1 FROM test_table;\n \n WITH value_1 as value_2, id_1 as id_2, id AS id_1, value AS value_1 SELECT id_2, value_2 FROM test_table;\n \n-SELECT (id + b) AS id, id as b FROM test_table; -- { serverError CYCLIC_ALIASES }\n-SELECT (1 + b + 1 + id) AS id, b as c, id as b FROM test_table; -- { serverError CYCLIC_ALIASES }\n+SELECT (id + b) AS id, id as b FROM test_table; -- { serverError CYCLIC_ALIASES, UNKNOWN_IDENTIFIER }\n+SELECT (1 + b + 1 + id) AS id, b as c, id as b FROM test_table; -- { serverError CYCLIC_ALIASES, UNKNOWN_IDENTIFIER }\n \n SELECT 'Alias conflict with identifier inside expression';\n \ndiff --git a/tests/queries/0_stateless/02368_analyzer_table_functions.sql b/tests/queries/0_stateless/02368_analyzer_table_functions.sql\nindex cc65848a5d82..8c3ea96fb39c 100644\n--- a/tests/queries/0_stateless/02368_analyzer_table_functions.sql\n+++ b/tests/queries/0_stateless/02368_analyzer_table_functions.sql\n@@ -4,7 +4,7 @@ SELECT c1, c2, c3, c4 FROM format('CSV', '1,2,\"[1,2,3]\",\"[[\\'abc\\'], [], [\\'d\\',\n SELECT f.c1, f.c2, f.c3, f.c4 FROM format('CSV', '1,2,\"[1,2,3]\",\"[[\\'abc\\'], [], [\\'d\\', \\'e\\']]\"') AS f;\n SELECT f.* FROM format('CSV', '1,2,\"[1,2,3]\",\"[[\\'abc\\'], [], [\\'d\\', \\'e\\']]\"') AS f;\n \n-WITH 'CSV', '1,2,\"[1,2,3]\",\"[[\\'abc\\'], [], [\\'d\\', \\'e\\']]\"' AS format_value SELECT c1, c2, c3, c4 FROM format('CSV', format_value);\n+WITH 'CSV' as format_name, '1,2,\"[1,2,3]\",\"[[\\'abc\\'], [], [\\'d\\', \\'e\\']]\"' AS format_value SELECT c1, c2, c3, c4 FROM format('CSV', format_value);\n WITH concat('1,2,\"[1,2,3]\",','\"[[\\'abc\\'], [], [\\'d\\', \\'e\\']]\"') AS format_value SELECT c1, c2, c3, c4 FROM format('CSV', format_value);\n \n SELECT format, format_value, c1, c2, c3, c4 FROM format('CSV' AS format, '1,2,\"[1,2,3]\",\"[[\\'abc\\'], [], [\\'d\\', \\'e\\']]\"' AS format_value);\ndiff --git a/tests/queries/0_stateless/02374_analyzer_array_join.reference b/tests/queries/0_stateless/02374_analyzer_array_join.reference\nindex ad7750228d62..2e4239ab1e1d 100644\n--- a/tests/queries/0_stateless/02374_analyzer_array_join.reference\n+++ b/tests/queries/0_stateless/02374_analyzer_array_join.reference\n@@ -82,12 +82,12 @@ SELECT id, value, value_array, value_array_element FROM test_table ARRAY JOIN va\n SELECT '--';\n --\n SELECT id, value, value_array AS value_array_array_alias FROM test_table ARRAY JOIN value_array_array_alias;\n-0\tValue\t[1,2,3]\n-0\tValue\t[1,2,3]\n-0\tValue\t[1,2,3]\n-0\tValue\t[4,5,6]\n-0\tValue\t[4,5,6]\n-0\tValue\t[4,5,6]\n+0\tValue\t1\n+0\tValue\t2\n+0\tValue\t3\n+0\tValue\t4\n+0\tValue\t5\n+0\tValue\t6\n SELECT '--';\n --\n SELECT id AS value FROM test_table ARRAY JOIN value_array AS value;\ndiff --git a/tests/queries/0_stateless/02378_analyzer_projection_names.reference b/tests/queries/0_stateless/02378_analyzer_projection_names.reference\nindex 532414f117c2..70cfd5409d3e 100644\n--- a/tests/queries/0_stateless/02378_analyzer_projection_names.reference\n+++ b/tests/queries/0_stateless/02378_analyzer_projection_names.reference\n@@ -186,6 +186,10 @@ DESCRIBE (SELECT arrayMap(x -> test_table.* EXCEPT value, [1,2,3]) FROM test_tab\n arrayMap(lambda(tuple(x), id), [1, 2, 3])\tArray(UInt64)\t\t\t\t\t\n SELECT '--';\n --\n+DESCRIBE (SELECT arrayMap(x -> tt.* EXCEPT value, [1,2,3]) FROM test_table as tt);\n+arrayMap(lambda(tuple(x), id), [1, 2, 3])\tArray(UInt64)\t\t\t\t\t\n+SELECT '--';\n+--\n DESCRIBE (SELECT arrayMap(x -> test_table.* EXCEPT value APPLY x -> x, [1,2,3]) FROM test_table);\n arrayMap(lambda(tuple(x), id), [1, 2, 3])\tArray(UInt64)\t\t\t\t\t\n SELECT '--';\ndiff --git a/tests/queries/0_stateless/02378_analyzer_projection_names.sql b/tests/queries/0_stateless/02378_analyzer_projection_names.sql\nindex 7b3099c4f364..39670f1db2c0 100644\n--- a/tests/queries/0_stateless/02378_analyzer_projection_names.sql\n+++ b/tests/queries/0_stateless/02378_analyzer_projection_names.sql\n@@ -191,6 +191,10 @@ DESCRIBE (SELECT arrayMap(x -> test_table.* EXCEPT value, [1,2,3]) FROM test_tab\n \n SELECT '--';\n \n+DESCRIBE (SELECT arrayMap(x -> tt.* EXCEPT value, [1,2,3]) FROM test_table as tt);\n+\n+SELECT '--';\n+\n DESCRIBE (SELECT arrayMap(x -> test_table.* EXCEPT value APPLY x -> x, [1,2,3]) FROM test_table);\n \n SELECT '--';\ndiff --git a/tests/queries/0_stateless/02385_analyzer_aliases_compound_expression.sql b/tests/queries/0_stateless/02385_analyzer_aliases_compound_expression.sql\nindex 025e064d23ca..6c42607cc565 100644\n--- a/tests/queries/0_stateless/02385_analyzer_aliases_compound_expression.sql\n+++ b/tests/queries/0_stateless/02385_analyzer_aliases_compound_expression.sql\n@@ -6,7 +6,7 @@ SELECT '--';\n \n WITH (x -> x + 1) AS lambda SELECT lambda(1);\n \n-WITH (x -> x + 1) AS lambda SELECT lambda.nested(1); -- { serverError BAD_ARGUMENTS }\n+WITH (x -> x + 1) AS lambda SELECT lambda.nested(1); -- { serverError UNKNOWN_IDENTIFIER }\n \n SELECT '--';\n \n@@ -16,6 +16,6 @@ SELECT '--';\n \n SELECT * FROM t1 AS t2, (SELECT 1) AS t1;\n \n-SELECT * FROM (SELECT 1) AS t1, t1.nested AS t2; -- { serverError BAD_ARGUMENTS }\n+SELECT * FROM (SELECT 1) AS t1, t1.nested AS t2; -- { serverError UNKNOWN_IDENTIFIER }\n \n-SELECT * FROM t1.nested AS t2, (SELECT 1) AS t1; -- { serverError BAD_ARGUMENTS }\n+SELECT * FROM t1.nested AS t2, (SELECT 1) AS t1; -- { serverError UNKNOWN_IDENTIFIER }\ndiff --git a/tests/queries/0_stateless/02476_analyzer_identifier_hints.sh b/tests/queries/0_stateless/02476_analyzer_identifier_hints.sh\nindex 92f519a9f8a0..2fd0c1089ca5 100755\n--- a/tests/queries/0_stateless/02476_analyzer_identifier_hints.sh\n+++ b/tests/queries/0_stateless/02476_analyzer_identifier_hints.sh\n@@ -134,7 +134,7 @@ $CLICKHOUSE_CLIENT -q \"SELECT cast(tuple(1), 'Tuple(value_1 String)') AS constan\n     | grep \"Maybe you meant: \\['constant_value.value_1'\\]\" &>/dev/null;\n \n $CLICKHOUSE_CLIENT -q \"SELECT cast(tuple(1), 'Tuple(value_1 String)') AS constant_value, constant_valu.value_ SETTINGS enable_analyzer = 1;\" 2>&1 \\\n-    | grep \"Maybe you meant: \\['constant_value.value_1'\\]\" &>/dev/null;\n+    | grep \"Maybe you meant: \\['constant_value'\\]\" &>/dev/null;\n \n $CLICKHOUSE_CLIENT -q \"SELECT cast(tuple(1), 'Tuple(value_1 String)') AS constant_value, arrayMap(lambda_argument -> lambda_argument + constant_value.value_, [1, 2, 3]) SETTINGS enable_analyzer = 1;\" 2>&1 \\\n     | grep \"Maybe you meant: \\['constant_value.value_1'\\]\" &>/dev/null;\ndiff --git a/tests/queries/0_stateless/02476_fuse_sum_count.reference b/tests/queries/0_stateless/02476_fuse_sum_count.reference\nindex 1eb156743b02..7dae9853b4e1 100644\n--- a/tests/queries/0_stateless/02476_fuse_sum_count.reference\n+++ b/tests/queries/0_stateless/02476_fuse_sum_count.reference\n@@ -19,7 +19,7 @@ QUERY id: 0\n       FUNCTION id: 6, function_name: avg, function_type: aggregate, result_type: Nullable(Float64)\n         ARGUMENTS\n           LIST id: 7, nodes: 1\n-            COLUMN id: 4, column_name: a, result_type: Nullable(Int8), source_id: 5\n+            COLUMN id: 8, column_name: a, result_type: Nullable(Int8), source_id: 5\n   JOIN TREE\n     TABLE id: 5, alias: __table1, table_name: default.fuse_tbl\n QUERY id: 0\n@@ -123,20 +123,20 @@ QUERY id: 0\n             FUNCTION id: 30, function_name: plus, function_type: ordinary, result_type: Nullable(Int16)\n               ARGUMENTS\n                 LIST id: 31, nodes: 2\n-                  COLUMN id: 6, column_name: a, result_type: Nullable(Int8), source_id: 7\n-                  CONSTANT id: 32, constant_value: UInt64_1, constant_value_type: UInt8\n-      FUNCTION id: 33, function_name: sum, function_type: aggregate, result_type: Nullable(Int64)\n+                  COLUMN id: 32, column_name: a, result_type: Nullable(Int8), source_id: 7\n+                  CONSTANT id: 33, constant_value: UInt64_1, constant_value_type: UInt8\n+      FUNCTION id: 34, function_name: sum, function_type: aggregate, result_type: Nullable(Int64)\n         ARGUMENTS\n-          LIST id: 34, nodes: 1\n-            FUNCTION id: 35, function_name: plus, function_type: ordinary, result_type: Nullable(Int16)\n+          LIST id: 35, nodes: 1\n+            FUNCTION id: 36, function_name: plus, function_type: ordinary, result_type: Nullable(Int16)\n               ARGUMENTS\n-                LIST id: 36, nodes: 2\n-                  COLUMN id: 6, column_name: a, result_type: Nullable(Int8), source_id: 7\n-                  CONSTANT id: 37, constant_value: UInt64_2, constant_value_type: UInt8\n-      FUNCTION id: 38, function_name: count, function_type: aggregate, result_type: UInt64\n+                LIST id: 37, nodes: 2\n+                  COLUMN id: 38, column_name: a, result_type: Nullable(Int8), source_id: 7\n+                  CONSTANT id: 39, constant_value: UInt64_2, constant_value_type: UInt8\n+      FUNCTION id: 40, function_name: count, function_type: aggregate, result_type: UInt64\n         ARGUMENTS\n-          LIST id: 39, nodes: 1\n-            COLUMN id: 6, column_name: a, result_type: Nullable(Int8), source_id: 7\n+          LIST id: 41, nodes: 1\n+            COLUMN id: 42, column_name: a, result_type: Nullable(Int8), source_id: 7\n   JOIN TREE\n     TABLE id: 7, alias: __table1, table_name: default.fuse_tbl\n QUERY id: 0\ndiff --git a/tests/queries/0_stateless/02477_fuse_quantiles.reference b/tests/queries/0_stateless/02477_fuse_quantiles.reference\nindex 7603381416ca..1f304f69a139 100644\n--- a/tests/queries/0_stateless/02477_fuse_quantiles.reference\n+++ b/tests/queries/0_stateless/02477_fuse_quantiles.reference\n@@ -79,4 +79,4 @@ QUERY id: 0\n             TABLE id: 30, alias: __table3, table_name: default.fuse_tbl\n       GROUP BY\n         LIST id: 35, nodes: 1\n-          COLUMN id: 18, column_name: x, result_type: Float64, source_id: 19\n+          COLUMN id: 36, column_name: x, result_type: Float64, source_id: 19\ndiff --git a/tests/queries/0_stateless/02477_logical_expressions_optimizer_low_cardinality.reference b/tests/queries/0_stateless/02477_logical_expressions_optimizer_low_cardinality.reference\nindex 0ce90cde1085..a7a864652bb2 100644\n--- a/tests/queries/0_stateless/02477_logical_expressions_optimizer_low_cardinality.reference\n+++ b/tests/queries/0_stateless/02477_logical_expressions_optimizer_low_cardinality.reference\n@@ -16,9 +16,9 @@ QUERY id: 0\n           FUNCTION id: 6, function_name: in, function_type: ordinary, result_type: LowCardinality(UInt8)\n             ARGUMENTS\n               LIST id: 7, nodes: 2\n-                COLUMN id: 2, column_name: a, result_type: LowCardinality(String), source_id: 3\n-                CONSTANT id: 8, constant_value: Tuple_(\\'x\\', \\'y\\'), constant_value_type: Tuple(String, String)\n-          CONSTANT id: 9, constant_value: UInt64_0, constant_value_type: UInt8\n+                COLUMN id: 8, column_name: a, result_type: LowCardinality(String), source_id: 3\n+                CONSTANT id: 9, constant_value: Tuple_(\\'x\\', \\'y\\'), constant_value_type: Tuple(String, String)\n+          CONSTANT id: 10, constant_value: UInt64_0, constant_value_type: UInt8\n   SETTINGS enable_analyzer=1\n SELECT a\n FROM t_logical_expressions_optimizer_low_cardinality\n@@ -38,9 +38,9 @@ QUERY id: 0\n           FUNCTION id: 6, function_name: in, function_type: ordinary, result_type: LowCardinality(UInt8)\n             ARGUMENTS\n               LIST id: 7, nodes: 2\n-                COLUMN id: 2, column_name: a, result_type: LowCardinality(String), source_id: 3\n-                CONSTANT id: 8, constant_value: Tuple_(\\'x\\', \\'y\\'), constant_value_type: Tuple(String, String)\n-          CONSTANT id: 9, constant_value: UInt64_0, constant_value_type: UInt8\n+                COLUMN id: 8, column_name: a, result_type: LowCardinality(String), source_id: 3\n+                CONSTANT id: 9, constant_value: Tuple_(\\'x\\', \\'y\\'), constant_value_type: Tuple(String, String)\n+          CONSTANT id: 10, constant_value: UInt64_0, constant_value_type: UInt8\n   SETTINGS enable_analyzer=1\n SELECT a\n FROM t_logical_expressions_optimizer_low_cardinality\n@@ -60,9 +60,9 @@ QUERY id: 0\n           FUNCTION id: 6, function_name: notIn, function_type: ordinary, result_type: LowCardinality(UInt8)\n             ARGUMENTS\n               LIST id: 7, nodes: 2\n-                COLUMN id: 2, column_name: a, result_type: LowCardinality(String), source_id: 3\n-                CONSTANT id: 8, constant_value: Tuple_(\\'x\\', \\'y\\'), constant_value_type: Tuple(String, String)\n-          CONSTANT id: 9, constant_value: \\'UInt8\\', constant_value_type: String\n+                COLUMN id: 8, column_name: a, result_type: LowCardinality(String), source_id: 3\n+                CONSTANT id: 9, constant_value: Tuple_(\\'x\\', \\'y\\'), constant_value_type: Tuple(String, String)\n+          CONSTANT id: 10, constant_value: \\'UInt8\\', constant_value_type: String\n   SETTINGS enable_analyzer=1\n SELECT a\n FROM t_logical_expressions_optimizer_low_cardinality\n@@ -82,9 +82,9 @@ QUERY id: 0\n           FUNCTION id: 6, function_name: notIn, function_type: ordinary, result_type: LowCardinality(UInt8)\n             ARGUMENTS\n               LIST id: 7, nodes: 2\n-                COLUMN id: 2, column_name: a, result_type: LowCardinality(String), source_id: 3\n-                CONSTANT id: 8, constant_value: Tuple_(\\'x\\', \\'y\\'), constant_value_type: Tuple(String, String)\n-          CONSTANT id: 9, constant_value: \\'UInt8\\', constant_value_type: String\n+                COLUMN id: 8, column_name: a, result_type: LowCardinality(String), source_id: 3\n+                CONSTANT id: 9, constant_value: Tuple_(\\'x\\', \\'y\\'), constant_value_type: Tuple(String, String)\n+          CONSTANT id: 10, constant_value: \\'UInt8\\', constant_value_type: String\n   SETTINGS enable_analyzer=1\n SELECT a\n FROM t_logical_expressions_optimizer_low_cardinality\n@@ -109,8 +109,8 @@ QUERY id: 0\n           FUNCTION id: 10, function_name: equals, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n               LIST id: 11, nodes: 2\n-                COLUMN id: 8, column_name: b, result_type: UInt32, source_id: 3\n-                CONSTANT id: 12, constant_value: UInt64_1, constant_value_type: UInt8\n+                COLUMN id: 12, column_name: b, result_type: UInt32, source_id: 3\n+                CONSTANT id: 13, constant_value: UInt64_1, constant_value_type: UInt8\n   SETTINGS enable_analyzer=1\n SELECT a\n FROM t_logical_expressions_optimizer_low_cardinality\n@@ -135,6 +135,6 @@ QUERY id: 0\n           FUNCTION id: 10, function_name: notEquals, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n               LIST id: 11, nodes: 2\n-                COLUMN id: 8, column_name: b, result_type: UInt32, source_id: 3\n-                CONSTANT id: 12, constant_value: UInt64_1, constant_value_type: UInt8\n+                COLUMN id: 12, column_name: b, result_type: UInt32, source_id: 3\n+                CONSTANT id: 13, constant_value: UInt64_1, constant_value_type: UInt8\n   SETTINGS enable_analyzer=1\ndiff --git a/tests/queries/0_stateless/02481_analyzer_optimize_grouping_sets_keys.reference b/tests/queries/0_stateless/02481_analyzer_optimize_grouping_sets_keys.reference\nindex 9f9c1da5e88d..db256fb74af6 100644\n--- a/tests/queries/0_stateless/02481_analyzer_optimize_grouping_sets_keys.reference\n+++ b/tests/queries/0_stateless/02481_analyzer_optimize_grouping_sets_keys.reference\n@@ -35,55 +35,55 @@ QUERY id: 0, group_by_type: grouping_sets\n               FUNCTION id: 22, function_name: modulo, function_type: ordinary, result_type: UInt8\n                 ARGUMENTS\n                   LIST id: 23, nodes: 2\n-                    COLUMN id: 20, column_name: number, result_type: UInt64, source_id: 11\n-                    CONSTANT id: 24, constant_value: UInt64_3, constant_value_type: UInt8\n-      LIST id: 25, nodes: 1\n-        FUNCTION id: 26, function_name: modulo, function_type: ordinary, result_type: UInt8\n+                    COLUMN id: 24, column_name: number, result_type: UInt64, source_id: 11\n+                    CONSTANT id: 25, constant_value: UInt64_3, constant_value_type: UInt8\n+      LIST id: 26, nodes: 1\n+        FUNCTION id: 27, function_name: modulo, function_type: ordinary, result_type: UInt8\n           ARGUMENTS\n-            LIST id: 27, nodes: 2\n-              COLUMN id: 20, column_name: number, result_type: UInt64, source_id: 11\n-              CONSTANT id: 28, constant_value: UInt64_3, constant_value_type: UInt8\n-      LIST id: 29, nodes: 1\n-        FUNCTION id: 30, function_name: modulo, function_type: ordinary, result_type: UInt8\n+            LIST id: 28, nodes: 2\n+              COLUMN id: 29, column_name: number, result_type: UInt64, source_id: 11\n+              CONSTANT id: 30, constant_value: UInt64_3, constant_value_type: UInt8\n+      LIST id: 31, nodes: 1\n+        FUNCTION id: 32, function_name: modulo, function_type: ordinary, result_type: UInt8\n           ARGUMENTS\n-            LIST id: 31, nodes: 2\n-              COLUMN id: 20, column_name: number, result_type: UInt64, source_id: 11\n-              CONSTANT id: 32, constant_value: UInt64_2, constant_value_type: UInt8\n+            LIST id: 33, nodes: 2\n+              COLUMN id: 34, column_name: number, result_type: UInt64, source_id: 11\n+              CONSTANT id: 35, constant_value: UInt64_2, constant_value_type: UInt8\n   HAVING\n-    FUNCTION id: 33, function_name: greater, function_type: ordinary, result_type: UInt8\n+    FUNCTION id: 36, function_name: greater, function_type: ordinary, result_type: UInt8\n       ARGUMENTS\n-        LIST id: 34, nodes: 2\n-          FUNCTION id: 35, function_name: multiply, function_type: ordinary, result_type: Float64\n+        LIST id: 37, nodes: 2\n+          FUNCTION id: 38, function_name: multiply, function_type: ordinary, result_type: Float64\n             ARGUMENTS\n-              LIST id: 36, nodes: 2\n-                CONSTANT id: 37, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n+              LIST id: 39, nodes: 2\n+                CONSTANT id: 40, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n                   EXPRESSION\n-                    FUNCTION id: 38, function_name: log, function_type: ordinary, result_type: Float64\n+                    FUNCTION id: 41, function_name: log, function_type: ordinary, result_type: Float64\n                       ARGUMENTS\n-                        LIST id: 39, nodes: 1\n-                          CONSTANT id: 40, constant_value: UInt64_2, constant_value_type: UInt8\n-                FUNCTION id: 41, function_name: avg, function_type: aggregate, result_type: Float64\n+                        LIST id: 42, nodes: 1\n+                          CONSTANT id: 43, constant_value: UInt64_2, constant_value_type: UInt8\n+                FUNCTION id: 44, function_name: avg, function_type: aggregate, result_type: Float64\n                   ARGUMENTS\n-                    LIST id: 42, nodes: 1\n-                      COLUMN id: 43, column_name: number, result_type: UInt64, source_id: 11\n-          CONSTANT id: 44, constant_value: Float64_3465735.3, constant_value_type: Float64\n+                    LIST id: 45, nodes: 1\n+                      COLUMN id: 46, column_name: number, result_type: UInt64, source_id: 11\n+          CONSTANT id: 47, constant_value: Float64_3465735.3, constant_value_type: Float64\n   ORDER BY\n-    LIST id: 45, nodes: 1\n-      SORT id: 46, sort_direction: ASCENDING, with_fill: 0\n+    LIST id: 48, nodes: 1\n+      SORT id: 49, sort_direction: ASCENDING, with_fill: 0\n         EXPRESSION\n-          FUNCTION id: 47, function_name: multiply, function_type: ordinary, result_type: Float64\n+          FUNCTION id: 50, function_name: multiply, function_type: ordinary, result_type: Float64\n             ARGUMENTS\n-              LIST id: 48, nodes: 2\n-                CONSTANT id: 49, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n+              LIST id: 51, nodes: 2\n+                CONSTANT id: 52, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n                   EXPRESSION\n-                    FUNCTION id: 5, function_name: log, function_type: ordinary, result_type: Float64\n+                    FUNCTION id: 53, function_name: log, function_type: ordinary, result_type: Float64\n                       ARGUMENTS\n-                        LIST id: 6, nodes: 1\n-                          CONSTANT id: 7, constant_value: UInt64_2, constant_value_type: UInt8\n-                FUNCTION id: 50, function_name: avg, function_type: aggregate, result_type: Float64\n+                        LIST id: 54, nodes: 1\n+                          CONSTANT id: 55, constant_value: UInt64_2, constant_value_type: UInt8\n+                FUNCTION id: 56, function_name: avg, function_type: aggregate, result_type: Float64\n                   ARGUMENTS\n-                    LIST id: 51, nodes: 1\n-                      COLUMN id: 52, column_name: number, result_type: UInt64, source_id: 11\n+                    LIST id: 57, nodes: 1\n+                      COLUMN id: 58, column_name: number, result_type: UInt64, source_id: 11\n QUERY id: 0, group_by_type: grouping_sets\n   PROJECTION COLUMNS\n     k Float64\n@@ -118,49 +118,49 @@ QUERY id: 0, group_by_type: grouping_sets\n         FUNCTION id: 20, function_name: modulo, function_type: ordinary, result_type: UInt8\n           ARGUMENTS\n             LIST id: 21, nodes: 2\n-              COLUMN id: 18, column_name: number, result_type: UInt64, source_id: 11\n-              CONSTANT id: 22, constant_value: UInt64_2, constant_value_type: UInt8\n-      LIST id: 23, nodes: 1\n-        FUNCTION id: 24, function_name: modulo, function_type: ordinary, result_type: UInt8\n+              COLUMN id: 22, column_name: number, result_type: UInt64, source_id: 11\n+              CONSTANT id: 23, constant_value: UInt64_2, constant_value_type: UInt8\n+      LIST id: 24, nodes: 1\n+        FUNCTION id: 25, function_name: modulo, function_type: ordinary, result_type: UInt8\n           ARGUMENTS\n-            LIST id: 25, nodes: 2\n-              COLUMN id: 18, column_name: number, result_type: UInt64, source_id: 11\n-              CONSTANT id: 26, constant_value: UInt64_4, constant_value_type: UInt8\n+            LIST id: 26, nodes: 2\n+              COLUMN id: 27, column_name: number, result_type: UInt64, source_id: 11\n+              CONSTANT id: 28, constant_value: UInt64_4, constant_value_type: UInt8\n   HAVING\n-    FUNCTION id: 27, function_name: greater, function_type: ordinary, result_type: UInt8\n+    FUNCTION id: 29, function_name: greater, function_type: ordinary, result_type: UInt8\n       ARGUMENTS\n-        LIST id: 28, nodes: 2\n-          FUNCTION id: 29, function_name: multiply, function_type: ordinary, result_type: Float64\n+        LIST id: 30, nodes: 2\n+          FUNCTION id: 31, function_name: multiply, function_type: ordinary, result_type: Float64\n             ARGUMENTS\n-              LIST id: 30, nodes: 2\n-                CONSTANT id: 31, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n+              LIST id: 32, nodes: 2\n+                CONSTANT id: 33, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n                   EXPRESSION\n-                    FUNCTION id: 32, function_name: log, function_type: ordinary, result_type: Float64\n+                    FUNCTION id: 34, function_name: log, function_type: ordinary, result_type: Float64\n                       ARGUMENTS\n-                        LIST id: 33, nodes: 1\n-                          CONSTANT id: 34, constant_value: UInt64_2, constant_value_type: UInt8\n-                FUNCTION id: 35, function_name: avg, function_type: aggregate, result_type: Float64\n+                        LIST id: 35, nodes: 1\n+                          CONSTANT id: 36, constant_value: UInt64_2, constant_value_type: UInt8\n+                FUNCTION id: 37, function_name: avg, function_type: aggregate, result_type: Float64\n                   ARGUMENTS\n-                    LIST id: 36, nodes: 1\n-                      COLUMN id: 37, column_name: number, result_type: UInt64, source_id: 11\n-          CONSTANT id: 38, constant_value: Float64_3465735.3, constant_value_type: Float64\n+                    LIST id: 38, nodes: 1\n+                      COLUMN id: 39, column_name: number, result_type: UInt64, source_id: 11\n+          CONSTANT id: 40, constant_value: Float64_3465735.3, constant_value_type: Float64\n   ORDER BY\n-    LIST id: 39, nodes: 1\n-      SORT id: 40, sort_direction: ASCENDING, with_fill: 0\n+    LIST id: 41, nodes: 1\n+      SORT id: 42, sort_direction: ASCENDING, with_fill: 0\n         EXPRESSION\n-          FUNCTION id: 41, function_name: multiply, function_type: ordinary, result_type: Float64\n+          FUNCTION id: 43, function_name: multiply, function_type: ordinary, result_type: Float64\n             ARGUMENTS\n-              LIST id: 42, nodes: 2\n-                CONSTANT id: 43, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n+              LIST id: 44, nodes: 2\n+                CONSTANT id: 45, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n                   EXPRESSION\n-                    FUNCTION id: 5, function_name: log, function_type: ordinary, result_type: Float64\n+                    FUNCTION id: 46, function_name: log, function_type: ordinary, result_type: Float64\n                       ARGUMENTS\n-                        LIST id: 6, nodes: 1\n-                          CONSTANT id: 7, constant_value: UInt64_2, constant_value_type: UInt8\n-                FUNCTION id: 44, function_name: avg, function_type: aggregate, result_type: Float64\n+                        LIST id: 47, nodes: 1\n+                          CONSTANT id: 48, constant_value: UInt64_2, constant_value_type: UInt8\n+                FUNCTION id: 49, function_name: avg, function_type: aggregate, result_type: Float64\n                   ARGUMENTS\n-                    LIST id: 45, nodes: 1\n-                      COLUMN id: 46, column_name: number, result_type: UInt64, source_id: 11\n+                    LIST id: 50, nodes: 1\n+                      COLUMN id: 51, column_name: number, result_type: UInt64, source_id: 11\n QUERY id: 0, group_by_type: grouping_sets\n   PROJECTION COLUMNS\n     k Float64\n@@ -198,54 +198,54 @@ QUERY id: 0, group_by_type: grouping_sets\n               FUNCTION id: 22, function_name: modulo, function_type: ordinary, result_type: UInt8\n                 ARGUMENTS\n                   LIST id: 23, nodes: 2\n-                    COLUMN id: 20, column_name: number, result_type: UInt64, source_id: 11\n-                    CONSTANT id: 24, constant_value: UInt64_3, constant_value_type: UInt8\n-        FUNCTION id: 25, function_name: modulo, function_type: ordinary, result_type: UInt8\n+                    COLUMN id: 24, column_name: number, result_type: UInt64, source_id: 11\n+                    CONSTANT id: 25, constant_value: UInt64_3, constant_value_type: UInt8\n+        FUNCTION id: 26, function_name: modulo, function_type: ordinary, result_type: UInt8\n           ARGUMENTS\n-            LIST id: 26, nodes: 2\n-              COLUMN id: 20, column_name: number, result_type: UInt64, source_id: 11\n-              CONSTANT id: 27, constant_value: UInt64_3, constant_value_type: UInt8\n-      LIST id: 28, nodes: 1\n-        FUNCTION id: 29, function_name: modulo, function_type: ordinary, result_type: UInt8\n+            LIST id: 27, nodes: 2\n+              COLUMN id: 28, column_name: number, result_type: UInt64, source_id: 11\n+              CONSTANT id: 29, constant_value: UInt64_3, constant_value_type: UInt8\n+      LIST id: 30, nodes: 1\n+        FUNCTION id: 31, function_name: modulo, function_type: ordinary, result_type: UInt8\n           ARGUMENTS\n-            LIST id: 30, nodes: 2\n-              COLUMN id: 20, column_name: number, result_type: UInt64, source_id: 11\n-              CONSTANT id: 31, constant_value: UInt64_2, constant_value_type: UInt8\n+            LIST id: 32, nodes: 2\n+              COLUMN id: 33, column_name: number, result_type: UInt64, source_id: 11\n+              CONSTANT id: 34, constant_value: UInt64_2, constant_value_type: UInt8\n   HAVING\n-    FUNCTION id: 32, function_name: greater, function_type: ordinary, result_type: UInt8\n+    FUNCTION id: 35, function_name: greater, function_type: ordinary, result_type: UInt8\n       ARGUMENTS\n-        LIST id: 33, nodes: 2\n-          FUNCTION id: 34, function_name: multiply, function_type: ordinary, result_type: Float64\n+        LIST id: 36, nodes: 2\n+          FUNCTION id: 37, function_name: multiply, function_type: ordinary, result_type: Float64\n             ARGUMENTS\n-              LIST id: 35, nodes: 2\n-                CONSTANT id: 36, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n+              LIST id: 38, nodes: 2\n+                CONSTANT id: 39, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n                   EXPRESSION\n-                    FUNCTION id: 37, function_name: log, function_type: ordinary, result_type: Float64\n+                    FUNCTION id: 40, function_name: log, function_type: ordinary, result_type: Float64\n                       ARGUMENTS\n-                        LIST id: 38, nodes: 1\n-                          CONSTANT id: 39, constant_value: UInt64_2, constant_value_type: UInt8\n-                FUNCTION id: 40, function_name: avg, function_type: aggregate, result_type: Float64\n+                        LIST id: 41, nodes: 1\n+                          CONSTANT id: 42, constant_value: UInt64_2, constant_value_type: UInt8\n+                FUNCTION id: 43, function_name: avg, function_type: aggregate, result_type: Float64\n                   ARGUMENTS\n-                    LIST id: 41, nodes: 1\n-                      COLUMN id: 42, column_name: number, result_type: UInt64, source_id: 11\n-          CONSTANT id: 43, constant_value: Float64_3465735.3, constant_value_type: Float64\n+                    LIST id: 44, nodes: 1\n+                      COLUMN id: 45, column_name: number, result_type: UInt64, source_id: 11\n+          CONSTANT id: 46, constant_value: Float64_3465735.3, constant_value_type: Float64\n   ORDER BY\n-    LIST id: 44, nodes: 1\n-      SORT id: 45, sort_direction: ASCENDING, with_fill: 0\n+    LIST id: 47, nodes: 1\n+      SORT id: 48, sort_direction: ASCENDING, with_fill: 0\n         EXPRESSION\n-          FUNCTION id: 46, function_name: multiply, function_type: ordinary, result_type: Float64\n+          FUNCTION id: 49, function_name: multiply, function_type: ordinary, result_type: Float64\n             ARGUMENTS\n-              LIST id: 47, nodes: 2\n-                CONSTANT id: 48, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n+              LIST id: 50, nodes: 2\n+                CONSTANT id: 51, constant_value: Float64_0.6931471805599453, constant_value_type: Float64\n                   EXPRESSION\n-                    FUNCTION id: 5, function_name: log, function_type: ordinary, result_type: Float64\n+                    FUNCTION id: 52, function_name: log, function_type: ordinary, result_type: Float64\n                       ARGUMENTS\n-                        LIST id: 6, nodes: 1\n-                          CONSTANT id: 7, constant_value: UInt64_2, constant_value_type: UInt8\n-                FUNCTION id: 49, function_name: avg, function_type: aggregate, result_type: Float64\n+                        LIST id: 53, nodes: 1\n+                          CONSTANT id: 54, constant_value: UInt64_2, constant_value_type: UInt8\n+                FUNCTION id: 55, function_name: avg, function_type: aggregate, result_type: Float64\n                   ARGUMENTS\n-                    LIST id: 50, nodes: 1\n-                      COLUMN id: 51, column_name: number, result_type: UInt64, source_id: 11\n+                    LIST id: 56, nodes: 1\n+                      COLUMN id: 57, column_name: number, result_type: UInt64, source_id: 11\n QUERY id: 0, group_by_type: grouping_sets\n   PROJECTION COLUMNS\n     count() UInt64\n@@ -265,21 +265,21 @@ QUERY id: 0, group_by_type: grouping_sets\n         FUNCTION id: 10, function_name: modulo, function_type: ordinary, result_type: UInt8\n           ARGUMENTS\n             LIST id: 11, nodes: 2\n-              COLUMN id: 8, column_name: number, result_type: UInt64, source_id: 3\n-              CONSTANT id: 12, constant_value: UInt64_2, constant_value_type: UInt8\n-        FUNCTION id: 13, function_name: modulo, function_type: ordinary, result_type: UInt8\n+              COLUMN id: 12, column_name: number, result_type: UInt64, source_id: 3\n+              CONSTANT id: 13, constant_value: UInt64_2, constant_value_type: UInt8\n+        FUNCTION id: 14, function_name: modulo, function_type: ordinary, result_type: UInt8\n           ARGUMENTS\n-            LIST id: 14, nodes: 2\n-              COLUMN id: 8, column_name: number, result_type: UInt64, source_id: 3\n-              CONSTANT id: 15, constant_value: UInt64_3, constant_value_type: UInt8\n-      LIST id: 16, nodes: 2\n-        FUNCTION id: 17, function_name: divide, function_type: ordinary, result_type: Float64\n+            LIST id: 15, nodes: 2\n+              COLUMN id: 16, column_name: number, result_type: UInt64, source_id: 3\n+              CONSTANT id: 17, constant_value: UInt64_3, constant_value_type: UInt8\n+      LIST id: 18, nodes: 2\n+        FUNCTION id: 19, function_name: divide, function_type: ordinary, result_type: Float64\n           ARGUMENTS\n-            LIST id: 18, nodes: 2\n-              COLUMN id: 8, column_name: number, result_type: UInt64, source_id: 3\n-              CONSTANT id: 19, constant_value: UInt64_2, constant_value_type: UInt8\n-        FUNCTION id: 20, function_name: divide, function_type: ordinary, result_type: Float64\n+            LIST id: 20, nodes: 2\n+              COLUMN id: 21, column_name: number, result_type: UInt64, source_id: 3\n+              CONSTANT id: 22, constant_value: UInt64_2, constant_value_type: UInt8\n+        FUNCTION id: 23, function_name: divide, function_type: ordinary, result_type: Float64\n           ARGUMENTS\n-            LIST id: 21, nodes: 2\n-              COLUMN id: 8, column_name: number, result_type: UInt64, source_id: 3\n-              CONSTANT id: 22, constant_value: UInt64_3, constant_value_type: UInt8\n+            LIST id: 24, nodes: 2\n+              COLUMN id: 25, column_name: number, result_type: UInt64, source_id: 3\n+              CONSTANT id: 26, constant_value: UInt64_3, constant_value_type: UInt8\ndiff --git a/tests/queries/0_stateless/02497_if_transform_strings_to_enum.reference b/tests/queries/0_stateless/02497_if_transform_strings_to_enum.reference\nindex d77fd1028f2c..8affeb003109 100644\n--- a/tests/queries/0_stateless/02497_if_transform_strings_to_enum.reference\n+++ b/tests/queries/0_stateless/02497_if_transform_strings_to_enum.reference\n@@ -319,31 +319,31 @@ QUERY id: 0\n                       LIST id: 16, nodes: 2\n                         CONSTANT id: 17, constant_value: \\'google\\', constant_value_type: String\n                         CONSTANT id: 18, constant_value: \\'Enum8(\\\\\\'censor.net\\\\\\' = 1, \\\\\\'google\\\\\\' = 2)\\', constant_value_type: String\n-      FUNCTION id: 2, function_name: toString, function_type: ordinary, result_type: String\n+      FUNCTION id: 19, function_name: toString, function_type: ordinary, result_type: String\n         ARGUMENTS\n-          LIST id: 3, nodes: 1\n-            FUNCTION id: 4, function_name: if, function_type: ordinary, result_type: Enum8(\\'censor.net\\' = 1, \\'google\\' = 2)\n+          LIST id: 20, nodes: 1\n+            FUNCTION id: 21, function_name: if, function_type: ordinary, result_type: Enum8(\\'censor.net\\' = 1, \\'google\\' = 2)\n               ARGUMENTS\n-                LIST id: 5, nodes: 3\n-                  FUNCTION id: 6, function_name: greater, function_type: ordinary, result_type: UInt8\n+                LIST id: 22, nodes: 3\n+                  FUNCTION id: 23, function_name: greater, function_type: ordinary, result_type: UInt8\n                     ARGUMENTS\n-                      LIST id: 7, nodes: 2\n-                        COLUMN id: 8, column_name: number, result_type: UInt64, source_id: 9\n-                        CONSTANT id: 10, constant_value: UInt64_5, constant_value_type: UInt8\n-                  FUNCTION id: 11, function_name: _CAST, function_type: ordinary, result_type: Enum8(\\'censor.net\\' = 1, \\'google\\' = 2)\n+                      LIST id: 24, nodes: 2\n+                        COLUMN id: 25, column_name: number, result_type: UInt64, source_id: 9\n+                        CONSTANT id: 26, constant_value: UInt64_5, constant_value_type: UInt8\n+                  FUNCTION id: 27, function_name: _CAST, function_type: ordinary, result_type: Enum8(\\'censor.net\\' = 1, \\'google\\' = 2)\n                     ARGUMENTS\n-                      LIST id: 12, nodes: 2\n-                        CONSTANT id: 13, constant_value: \\'censor.net\\', constant_value_type: String\n-                        CONSTANT id: 14, constant_value: \\'Enum8(\\\\\\'censor.net\\\\\\' = 1, \\\\\\'google\\\\\\' = 2)\\', constant_value_type: String\n-                  FUNCTION id: 15, function_name: _CAST, function_type: ordinary, result_type: Enum8(\\'censor.net\\' = 1, \\'google\\' = 2)\n+                      LIST id: 28, nodes: 2\n+                        CONSTANT id: 29, constant_value: \\'censor.net\\', constant_value_type: String\n+                        CONSTANT id: 30, constant_value: \\'Enum8(\\\\\\'censor.net\\\\\\' = 1, \\\\\\'google\\\\\\' = 2)\\', constant_value_type: String\n+                  FUNCTION id: 31, function_name: _CAST, function_type: ordinary, result_type: Enum8(\\'censor.net\\' = 1, \\'google\\' = 2)\n                     ARGUMENTS\n-                      LIST id: 16, nodes: 2\n-                        CONSTANT id: 17, constant_value: \\'google\\', constant_value_type: String\n-                        CONSTANT id: 18, constant_value: \\'Enum8(\\\\\\'censor.net\\\\\\' = 1, \\\\\\'google\\\\\\' = 2)\\', constant_value_type: String\n+                      LIST id: 32, nodes: 2\n+                        CONSTANT id: 33, constant_value: \\'google\\', constant_value_type: String\n+                        CONSTANT id: 34, constant_value: \\'Enum8(\\\\\\'censor.net\\\\\\' = 1, \\\\\\'google\\\\\\' = 2)\\', constant_value_type: String\n   JOIN TREE\n     TABLE id: 9, alias: __table1, table_name: system.numbers\n   LIMIT\n-    CONSTANT id: 19, constant_value: UInt64_10, constant_value_type: UInt64\n+    CONSTANT id: 35, constant_value: UInt64_10, constant_value_type: UInt64\n other\tother\n other\tother\n google\tgoogle\n@@ -383,28 +383,28 @@ QUERY id: 0\n                       LIST id: 14, nodes: 2\n                         CONSTANT id: 15, constant_value: \\'other\\', constant_value_type: String\n                         CONSTANT id: 16, constant_value: \\'Enum8(\\\\\\'censor.net\\\\\\' = 1, \\\\\\'google\\\\\\' = 2, \\\\\\'other\\\\\\' = 3, \\\\\\'yahoo\\\\\\' = 4)\\', constant_value_type: String\n-      FUNCTION id: 2, function_name: toString, function_type: ordinary, result_type: String\n+      FUNCTION id: 17, function_name: toString, function_type: ordinary, result_type: String\n         ARGUMENTS\n-          LIST id: 3, nodes: 1\n-            FUNCTION id: 4, function_name: transform, function_type: ordinary, result_type: Enum8(\\'censor.net\\' = 1, \\'google\\' = 2, \\'other\\' = 3, \\'yahoo\\' = 4)\n+          LIST id: 18, nodes: 1\n+            FUNCTION id: 19, function_name: transform, function_type: ordinary, result_type: Enum8(\\'censor.net\\' = 1, \\'google\\' = 2, \\'other\\' = 3, \\'yahoo\\' = 4)\n               ARGUMENTS\n-                LIST id: 5, nodes: 4\n-                  COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                  CONSTANT id: 8, constant_value: Array_[UInt64_2, UInt64_4, UInt64_6], constant_value_type: Array(UInt8)\n-                  FUNCTION id: 9, function_name: _CAST, function_type: ordinary, result_type: Array(Enum8(\\'censor.net\\' = 1, \\'google\\' = 2, \\'other\\' = 3, \\'yahoo\\' = 4))\n+                LIST id: 20, nodes: 4\n+                  COLUMN id: 21, column_name: number, result_type: UInt64, source_id: 7\n+                  CONSTANT id: 22, constant_value: Array_[UInt64_2, UInt64_4, UInt64_6], constant_value_type: Array(UInt8)\n+                  FUNCTION id: 23, function_name: _CAST, function_type: ordinary, result_type: Array(Enum8(\\'censor.net\\' = 1, \\'google\\' = 2, \\'other\\' = 3, \\'yahoo\\' = 4))\n                     ARGUMENTS\n-                      LIST id: 10, nodes: 2\n-                        CONSTANT id: 11, constant_value: Array_[\\'google\\', \\'censor.net\\', \\'yahoo\\'], constant_value_type: Array(String)\n-                        CONSTANT id: 12, constant_value: \\'Array(Enum8(\\\\\\'censor.net\\\\\\' = 1, \\\\\\'google\\\\\\' = 2, \\\\\\'other\\\\\\' = 3, \\\\\\'yahoo\\\\\\' = 4))\\', constant_value_type: String\n-                  FUNCTION id: 13, function_name: _CAST, function_type: ordinary, result_type: Enum8(\\'censor.net\\' = 1, \\'google\\' = 2, \\'other\\' = 3, \\'yahoo\\' = 4)\n+                      LIST id: 24, nodes: 2\n+                        CONSTANT id: 25, constant_value: Array_[\\'google\\', \\'censor.net\\', \\'yahoo\\'], constant_value_type: Array(String)\n+                        CONSTANT id: 26, constant_value: \\'Array(Enum8(\\\\\\'censor.net\\\\\\' = 1, \\\\\\'google\\\\\\' = 2, \\\\\\'other\\\\\\' = 3, \\\\\\'yahoo\\\\\\' = 4))\\', constant_value_type: String\n+                  FUNCTION id: 27, function_name: _CAST, function_type: ordinary, result_type: Enum8(\\'censor.net\\' = 1, \\'google\\' = 2, \\'other\\' = 3, \\'yahoo\\' = 4)\n                     ARGUMENTS\n-                      LIST id: 14, nodes: 2\n-                        CONSTANT id: 15, constant_value: \\'other\\', constant_value_type: String\n-                        CONSTANT id: 16, constant_value: \\'Enum8(\\\\\\'censor.net\\\\\\' = 1, \\\\\\'google\\\\\\' = 2, \\\\\\'other\\\\\\' = 3, \\\\\\'yahoo\\\\\\' = 4)\\', constant_value_type: String\n+                      LIST id: 28, nodes: 2\n+                        CONSTANT id: 29, constant_value: \\'other\\', constant_value_type: String\n+                        CONSTANT id: 30, constant_value: \\'Enum8(\\\\\\'censor.net\\\\\\' = 1, \\\\\\'google\\\\\\' = 2, \\\\\\'other\\\\\\' = 3, \\\\\\'yahoo\\\\\\' = 4)\\', constant_value_type: String\n   JOIN TREE\n     TABLE id: 7, alias: __table1, table_name: system.numbers\n   LIMIT\n-    CONSTANT id: 17, constant_value: UInt64_10, constant_value_type: UInt64\n+    CONSTANT id: 31, constant_value: UInt64_10, constant_value_type: UInt64\n other\n other\n other\ndiff --git a/tests/queries/0_stateless/02518_rewrite_aggregate_function_with_if.reference b/tests/queries/0_stateless/02518_rewrite_aggregate_function_with_if.reference\nindex 42a9a0a2481f..5af1b2bcf494 100644\n--- a/tests/queries/0_stateless/02518_rewrite_aggregate_function_with_if.reference\n+++ b/tests/queries/0_stateless/02518_rewrite_aggregate_function_with_if.reference\n@@ -18,13 +18,13 @@ QUERY id: 0\n                       LIST id: 7, nodes: 2\n                         COLUMN id: 8, column_name: number, result_type: UInt64, source_id: 9\n                         CONSTANT id: 10, constant_value: UInt64_2, constant_value_type: UInt8\n-                  COLUMN id: 8, column_name: number, result_type: UInt64, source_id: 9\n-                  CONSTANT id: 11, constant_value: UInt64_0, constant_value_type: UInt8\n+                  COLUMN id: 11, column_name: number, result_type: UInt64, source_id: 9\n+                  CONSTANT id: 12, constant_value: UInt64_0, constant_value_type: UInt8\n   JOIN TREE\n     TABLE_FUNCTION id: 9, alias: __table1, table_function_name: numbers\n       ARGUMENTS\n-        LIST id: 12, nodes: 1\n-          CONSTANT id: 13, constant_value: UInt64_100, constant_value_type: UInt8\n+        LIST id: 13, nodes: 1\n+          CONSTANT id: 14, constant_value: UInt64_100, constant_value_type: UInt8\n EXPLAIN QUERY TREE run_passes = 1 select sum(if(number % 2, 0, number)) from numbers(100);\n QUERY id: 0\n   PROJECTION COLUMNS\n@@ -43,12 +43,12 @@ QUERY id: 0\n                         COLUMN id: 8, column_name: number, result_type: UInt64, source_id: 9\n                         CONSTANT id: 10, constant_value: UInt64_2, constant_value_type: UInt8\n                   CONSTANT id: 11, constant_value: UInt64_0, constant_value_type: UInt8\n-                  COLUMN id: 8, column_name: number, result_type: UInt64, source_id: 9\n+                  COLUMN id: 12, column_name: number, result_type: UInt64, source_id: 9\n   JOIN TREE\n     TABLE_FUNCTION id: 9, alias: __table1, table_function_name: numbers\n       ARGUMENTS\n-        LIST id: 12, nodes: 1\n-          CONSTANT id: 13, constant_value: UInt64_100, constant_value_type: UInt8\n+        LIST id: 13, nodes: 1\n+          CONSTANT id: 14, constant_value: UInt64_100, constant_value_type: UInt8\n EXPLAIN QUERY TREE run_passes = 1 select sum(if(number % 2, number, null)) from numbers(100);\n QUERY id: 0\n   PROJECTION COLUMNS\n@@ -66,13 +66,13 @@ QUERY id: 0\n                       LIST id: 7, nodes: 2\n                         COLUMN id: 8, column_name: number, result_type: UInt64, source_id: 9\n                         CONSTANT id: 10, constant_value: UInt64_2, constant_value_type: UInt8\n-                  COLUMN id: 8, column_name: number, result_type: UInt64, source_id: 9\n-                  CONSTANT id: 11, constant_value: NULL, constant_value_type: Nullable(Nothing)\n+                  COLUMN id: 11, column_name: number, result_type: UInt64, source_id: 9\n+                  CONSTANT id: 12, constant_value: NULL, constant_value_type: Nullable(Nothing)\n   JOIN TREE\n     TABLE_FUNCTION id: 9, alias: __table1, table_function_name: numbers\n       ARGUMENTS\n-        LIST id: 12, nodes: 1\n-          CONSTANT id: 13, constant_value: UInt64_100, constant_value_type: UInt8\n+        LIST id: 13, nodes: 1\n+          CONSTANT id: 14, constant_value: UInt64_100, constant_value_type: UInt8\n EXPLAIN QUERY TREE run_passes = 1 select sum(if(number % 2, null, number)) from numbers(100);\n QUERY id: 0\n   PROJECTION COLUMNS\n@@ -91,12 +91,12 @@ QUERY id: 0\n                         COLUMN id: 8, column_name: number, result_type: UInt64, source_id: 9\n                         CONSTANT id: 10, constant_value: UInt64_2, constant_value_type: UInt8\n                   CONSTANT id: 11, constant_value: NULL, constant_value_type: Nullable(Nothing)\n-                  COLUMN id: 8, column_name: number, result_type: UInt64, source_id: 9\n+                  COLUMN id: 12, column_name: number, result_type: UInt64, source_id: 9\n   JOIN TREE\n     TABLE_FUNCTION id: 9, alias: __table1, table_function_name: numbers\n       ARGUMENTS\n-        LIST id: 12, nodes: 1\n-          CONSTANT id: 13, constant_value: UInt64_100, constant_value_type: UInt8\n+        LIST id: 13, nodes: 1\n+          CONSTANT id: 14, constant_value: UInt64_100, constant_value_type: UInt8\n EXPLAIN QUERY TREE run_passes = 1 select avg(if(number % 2, number, null)) from numbers(100);\n QUERY id: 0\n   PROJECTION COLUMNS\n@@ -114,13 +114,13 @@ QUERY id: 0\n                       LIST id: 7, nodes: 2\n                         COLUMN id: 8, column_name: number, result_type: UInt64, source_id: 9\n                         CONSTANT id: 10, constant_value: UInt64_2, constant_value_type: UInt8\n-                  COLUMN id: 8, column_name: number, result_type: UInt64, source_id: 9\n-                  CONSTANT id: 11, constant_value: NULL, constant_value_type: Nullable(Nothing)\n+                  COLUMN id: 11, column_name: number, result_type: UInt64, source_id: 9\n+                  CONSTANT id: 12, constant_value: NULL, constant_value_type: Nullable(Nothing)\n   JOIN TREE\n     TABLE_FUNCTION id: 9, alias: __table1, table_function_name: numbers\n       ARGUMENTS\n-        LIST id: 12, nodes: 1\n-          CONSTANT id: 13, constant_value: UInt64_100, constant_value_type: UInt8\n+        LIST id: 13, nodes: 1\n+          CONSTANT id: 14, constant_value: UInt64_100, constant_value_type: UInt8\n EXPLAIN QUERY TREE run_passes = 1 select avg(if(number % 2, null, number)) from numbers(100);\n QUERY id: 0\n   PROJECTION COLUMNS\n@@ -139,12 +139,12 @@ QUERY id: 0\n                         COLUMN id: 8, column_name: number, result_type: UInt64, source_id: 9\n                         CONSTANT id: 10, constant_value: UInt64_2, constant_value_type: UInt8\n                   CONSTANT id: 11, constant_value: NULL, constant_value_type: Nullable(Nothing)\n-                  COLUMN id: 8, column_name: number, result_type: UInt64, source_id: 9\n+                  COLUMN id: 12, column_name: number, result_type: UInt64, source_id: 9\n   JOIN TREE\n     TABLE_FUNCTION id: 9, alias: __table1, table_function_name: numbers\n       ARGUMENTS\n-        LIST id: 12, nodes: 1\n-          CONSTANT id: 13, constant_value: UInt64_100, constant_value_type: UInt8\n+        LIST id: 13, nodes: 1\n+          CONSTANT id: 14, constant_value: UInt64_100, constant_value_type: UInt8\n EXPLAIN QUERY TREE run_passes = 1 select quantiles(0.5, 0.9, 0.99)(if(number % 2, number, null)) from numbers(100);\n QUERY id: 0\n   PROJECTION COLUMNS\n@@ -167,13 +167,13 @@ QUERY id: 0\n                       LIST id: 11, nodes: 2\n                         COLUMN id: 12, column_name: number, result_type: UInt64, source_id: 13\n                         CONSTANT id: 14, constant_value: UInt64_2, constant_value_type: UInt8\n-                  COLUMN id: 12, column_name: number, result_type: UInt64, source_id: 13\n-                  CONSTANT id: 15, constant_value: NULL, constant_value_type: Nullable(Nothing)\n+                  COLUMN id: 15, column_name: number, result_type: UInt64, source_id: 13\n+                  CONSTANT id: 16, constant_value: NULL, constant_value_type: Nullable(Nothing)\n   JOIN TREE\n     TABLE_FUNCTION id: 13, alias: __table1, table_function_name: numbers\n       ARGUMENTS\n-        LIST id: 16, nodes: 1\n-          CONSTANT id: 17, constant_value: UInt64_100, constant_value_type: UInt8\n+        LIST id: 17, nodes: 1\n+          CONSTANT id: 18, constant_value: UInt64_100, constant_value_type: UInt8\n EXPLAIN QUERY TREE run_passes = 1 select quantiles(0.5, 0.9, 0.99)(if(number % 2, null, number)) from numbers(100);\n QUERY id: 0\n   PROJECTION COLUMNS\n@@ -197,12 +197,12 @@ QUERY id: 0\n                         COLUMN id: 12, column_name: number, result_type: UInt64, source_id: 13\n                         CONSTANT id: 14, constant_value: UInt64_2, constant_value_type: UInt8\n                   CONSTANT id: 15, constant_value: NULL, constant_value_type: Nullable(Nothing)\n-                  COLUMN id: 12, column_name: number, result_type: UInt64, source_id: 13\n+                  COLUMN id: 16, column_name: number, result_type: UInt64, source_id: 13\n   JOIN TREE\n     TABLE_FUNCTION id: 13, alias: __table1, table_function_name: numbers\n       ARGUMENTS\n-        LIST id: 16, nodes: 1\n-          CONSTANT id: 17, constant_value: UInt64_100, constant_value_type: UInt8\n+        LIST id: 17, nodes: 1\n+          CONSTANT id: 18, constant_value: UInt64_100, constant_value_type: UInt8\n set optimize_rewrite_aggregate_function_with_if = true;\n EXPLAIN QUERY TREE run_passes = 1 select sum(if(number % 2, number, 0)) from numbers(100);\n QUERY id: 0\n@@ -217,13 +217,13 @@ QUERY id: 0\n             FUNCTION id: 6, function_name: modulo, function_type: ordinary, result_type: UInt8\n               ARGUMENTS\n                 LIST id: 7, nodes: 2\n-                  COLUMN id: 4, column_name: number, result_type: UInt64, source_id: 5\n-                  CONSTANT id: 8, constant_value: UInt64_2, constant_value_type: UInt8\n+                  COLUMN id: 8, column_name: number, result_type: UInt64, source_id: 5\n+                  CONSTANT id: 9, constant_value: UInt64_2, constant_value_type: UInt8\n   JOIN TREE\n     TABLE_FUNCTION id: 5, alias: __table1, table_function_name: numbers\n       ARGUMENTS\n-        LIST id: 9, nodes: 1\n-          CONSTANT id: 10, constant_value: UInt64_100, constant_value_type: UInt8\n+        LIST id: 10, nodes: 1\n+          CONSTANT id: 11, constant_value: UInt64_100, constant_value_type: UInt8\n EXPLAIN QUERY TREE run_passes = 1 select sum(if(number % 2, 0, number)) from numbers(100);\n QUERY id: 0\n   PROJECTION COLUMNS\n@@ -240,13 +240,13 @@ QUERY id: 0\n                   FUNCTION id: 8, function_name: modulo, function_type: ordinary, result_type: UInt8\n                     ARGUMENTS\n                       LIST id: 9, nodes: 2\n-                        COLUMN id: 4, column_name: number, result_type: UInt64, source_id: 5\n-                        CONSTANT id: 10, constant_value: UInt64_2, constant_value_type: UInt8\n+                        COLUMN id: 10, column_name: number, result_type: UInt64, source_id: 5\n+                        CONSTANT id: 11, constant_value: UInt64_2, constant_value_type: UInt8\n   JOIN TREE\n     TABLE_FUNCTION id: 5, alias: __table1, table_function_name: numbers\n       ARGUMENTS\n-        LIST id: 11, nodes: 1\n-          CONSTANT id: 12, constant_value: UInt64_100, constant_value_type: UInt8\n+        LIST id: 12, nodes: 1\n+          CONSTANT id: 13, constant_value: UInt64_100, constant_value_type: UInt8\n EXPLAIN QUERY TREE run_passes = 1 select sum(if(number % 2, number, null)) from numbers(100);\n QUERY id: 0\n   PROJECTION COLUMNS\n@@ -264,13 +264,13 @@ QUERY id: 0\n             FUNCTION id: 9, function_name: modulo, function_type: ordinary, result_type: UInt8\n               ARGUMENTS\n                 LIST id: 10, nodes: 2\n-                  COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                  CONSTANT id: 11, constant_value: UInt64_2, constant_value_type: UInt8\n+                  COLUMN id: 11, column_name: number, result_type: UInt64, source_id: 7\n+                  CONSTANT id: 12, constant_value: UInt64_2, constant_value_type: UInt8\n   JOIN TREE\n     TABLE_FUNCTION id: 7, alias: __table1, table_function_name: numbers\n       ARGUMENTS\n-        LIST id: 12, nodes: 1\n-          CONSTANT id: 13, constant_value: UInt64_100, constant_value_type: UInt8\n+        LIST id: 13, nodes: 1\n+          CONSTANT id: 14, constant_value: UInt64_100, constant_value_type: UInt8\n EXPLAIN QUERY TREE run_passes = 1 select sum(if(number % 2, null, number)) from numbers(100);\n QUERY id: 0\n   PROJECTION COLUMNS\n@@ -291,13 +291,13 @@ QUERY id: 0\n                   FUNCTION id: 11, function_name: modulo, function_type: ordinary, result_type: UInt8\n                     ARGUMENTS\n                       LIST id: 12, nodes: 2\n-                        COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                        CONSTANT id: 13, constant_value: UInt64_2, constant_value_type: UInt8\n+                        COLUMN id: 13, column_name: number, result_type: UInt64, source_id: 7\n+                        CONSTANT id: 14, constant_value: UInt64_2, constant_value_type: UInt8\n   JOIN TREE\n     TABLE_FUNCTION id: 7, alias: __table1, table_function_name: numbers\n       ARGUMENTS\n-        LIST id: 14, nodes: 1\n-          CONSTANT id: 15, constant_value: UInt64_100, constant_value_type: UInt8\n+        LIST id: 15, nodes: 1\n+          CONSTANT id: 16, constant_value: UInt64_100, constant_value_type: UInt8\n EXPLAIN QUERY TREE run_passes = 1 select avg(if(number % 2, number, null)) from numbers(100);\n QUERY id: 0\n   PROJECTION COLUMNS\n@@ -315,13 +315,13 @@ QUERY id: 0\n             FUNCTION id: 9, function_name: modulo, function_type: ordinary, result_type: UInt8\n               ARGUMENTS\n                 LIST id: 10, nodes: 2\n-                  COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                  CONSTANT id: 11, constant_value: UInt64_2, constant_value_type: UInt8\n+                  COLUMN id: 11, column_name: number, result_type: UInt64, source_id: 7\n+                  CONSTANT id: 12, constant_value: UInt64_2, constant_value_type: UInt8\n   JOIN TREE\n     TABLE_FUNCTION id: 7, alias: __table1, table_function_name: numbers\n       ARGUMENTS\n-        LIST id: 12, nodes: 1\n-          CONSTANT id: 13, constant_value: UInt64_100, constant_value_type: UInt8\n+        LIST id: 13, nodes: 1\n+          CONSTANT id: 14, constant_value: UInt64_100, constant_value_type: UInt8\n EXPLAIN QUERY TREE run_passes = 1 select avg(if(number % 2, null, number)) from numbers(100);\n QUERY id: 0\n   PROJECTION COLUMNS\n@@ -342,13 +342,13 @@ QUERY id: 0\n                   FUNCTION id: 11, function_name: modulo, function_type: ordinary, result_type: UInt8\n                     ARGUMENTS\n                       LIST id: 12, nodes: 2\n-                        COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                        CONSTANT id: 13, constant_value: UInt64_2, constant_value_type: UInt8\n+                        COLUMN id: 13, column_name: number, result_type: UInt64, source_id: 7\n+                        CONSTANT id: 14, constant_value: UInt64_2, constant_value_type: UInt8\n   JOIN TREE\n     TABLE_FUNCTION id: 7, alias: __table1, table_function_name: numbers\n       ARGUMENTS\n-        LIST id: 14, nodes: 1\n-          CONSTANT id: 15, constant_value: UInt64_100, constant_value_type: UInt8\n+        LIST id: 15, nodes: 1\n+          CONSTANT id: 16, constant_value: UInt64_100, constant_value_type: UInt8\n EXPLAIN QUERY TREE run_passes = 1 select quantiles(0.5, 0.9, 0.99)(if(number % 2, number, null)) from numbers(100);\n QUERY id: 0\n   PROJECTION COLUMNS\n@@ -371,13 +371,13 @@ QUERY id: 0\n             FUNCTION id: 13, function_name: modulo, function_type: ordinary, result_type: UInt8\n               ARGUMENTS\n                 LIST id: 14, nodes: 2\n-                  COLUMN id: 10, column_name: number, result_type: UInt64, source_id: 11\n-                  CONSTANT id: 15, constant_value: UInt64_2, constant_value_type: UInt8\n+                  COLUMN id: 15, column_name: number, result_type: UInt64, source_id: 11\n+                  CONSTANT id: 16, constant_value: UInt64_2, constant_value_type: UInt8\n   JOIN TREE\n     TABLE_FUNCTION id: 11, alias: __table1, table_function_name: numbers\n       ARGUMENTS\n-        LIST id: 16, nodes: 1\n-          CONSTANT id: 17, constant_value: UInt64_100, constant_value_type: UInt8\n+        LIST id: 17, nodes: 1\n+          CONSTANT id: 18, constant_value: UInt64_100, constant_value_type: UInt8\n EXPLAIN QUERY TREE run_passes = 1 select quantiles(0.5, 0.9, 0.99)(if(number % 2, null, number)) from numbers(100);\n QUERY id: 0\n   PROJECTION COLUMNS\n@@ -403,10 +403,10 @@ QUERY id: 0\n                   FUNCTION id: 15, function_name: modulo, function_type: ordinary, result_type: UInt8\n                     ARGUMENTS\n                       LIST id: 16, nodes: 2\n-                        COLUMN id: 10, column_name: number, result_type: UInt64, source_id: 11\n-                        CONSTANT id: 17, constant_value: UInt64_2, constant_value_type: UInt8\n+                        COLUMN id: 17, column_name: number, result_type: UInt64, source_id: 11\n+                        CONSTANT id: 18, constant_value: UInt64_2, constant_value_type: UInt8\n   JOIN TREE\n     TABLE_FUNCTION id: 11, alias: __table1, table_function_name: numbers\n       ARGUMENTS\n-        LIST id: 18, nodes: 1\n-          CONSTANT id: 19, constant_value: UInt64_100, constant_value_type: UInt8\n+        LIST id: 19, nodes: 1\n+          CONSTANT id: 20, constant_value: UInt64_100, constant_value_type: UInt8\ndiff --git a/tests/queries/0_stateless/02534_analyzer_grouping_function.reference b/tests/queries/0_stateless/02534_analyzer_grouping_function.reference\nindex 1b4966445477..23018447f586 100644\n--- a/tests/queries/0_stateless/02534_analyzer_grouping_function.reference\n+++ b/tests/queries/0_stateless/02534_analyzer_grouping_function.reference\n@@ -19,8 +19,8 @@ QUERY id: 0\n     TABLE id: 5, alias: __table1, table_name: default.test_table\n   GROUP BY\n     LIST id: 9, nodes: 2\n-      COLUMN id: 4, column_name: id, result_type: UInt64, source_id: 5\n-      COLUMN id: 8, column_name: value, result_type: String, source_id: 5\n+      COLUMN id: 10, column_name: id, result_type: UInt64, source_id: 5\n+      COLUMN id: 11, column_name: value, result_type: String, source_id: 5\n SELECT grouping(id) AS grouping_id, grouping(value) AS grouping_value, id, value FROM test_table\n GROUP BY id, value ORDER BY grouping_id, grouping_value;\n 0\t0\t0\tValue\n@@ -45,8 +45,8 @@ QUERY id: 0, group_by_type: rollup\n     TABLE id: 6, alias: __table1, table_name: default.test_table\n   GROUP BY\n     LIST id: 11, nodes: 2\n-      COLUMN id: 5, column_name: id, result_type: UInt64, source_id: 6\n-      COLUMN id: 10, column_name: value, result_type: String, source_id: 6\n+      COLUMN id: 12, column_name: id, result_type: UInt64, source_id: 6\n+      COLUMN id: 13, column_name: value, result_type: String, source_id: 6\n SELECT grouping(id) AS grouping_id, grouping(value) AS grouping_value, id, value FROM test_table\n GROUP BY ROLLUP (id, value) ORDER BY grouping_id, grouping_value;\n 0\t0\t0\tValue\n@@ -73,8 +73,8 @@ QUERY id: 0, group_by_type: cube\n     TABLE id: 6, alias: __table1, table_name: default.test_table\n   GROUP BY\n     LIST id: 11, nodes: 2\n-      COLUMN id: 5, column_name: id, result_type: UInt64, source_id: 6\n-      COLUMN id: 10, column_name: value, result_type: String, source_id: 6\n+      COLUMN id: 12, column_name: id, result_type: UInt64, source_id: 6\n+      COLUMN id: 13, column_name: value, result_type: String, source_id: 6\n SELECT grouping(id) AS grouping_id, grouping(value) AS grouping_value, id, value FROM test_table\n GROUP BY CUBE (id, value) ORDER BY grouping_id, grouping_value;\n 0\t0\t0\tValue\n@@ -103,9 +103,9 @@ QUERY id: 0, group_by_type: grouping_sets\n   GROUP BY\n     LIST id: 11, nodes: 2\n       LIST id: 12, nodes: 1\n-        COLUMN id: 5, column_name: id, result_type: UInt64, source_id: 6\n-      LIST id: 13, nodes: 1\n-        COLUMN id: 10, column_name: value, result_type: String, source_id: 6\n+        COLUMN id: 13, column_name: id, result_type: UInt64, source_id: 6\n+      LIST id: 14, nodes: 1\n+        COLUMN id: 15, column_name: value, result_type: String, source_id: 6\n SELECT grouping(id) AS grouping_id, grouping(value) AS grouping_value, id, value FROM test_table\n GROUP BY GROUPING SETS (id, value) ORDER BY grouping_id, grouping_value;\n 0\t1\t0\t\n@@ -132,9 +132,9 @@ QUERY id: 0, group_by_type: grouping_sets\n   GROUP BY\n     LIST id: 11, nodes: 2\n       LIST id: 12, nodes: 1\n-        COLUMN id: 5, column_name: id, result_type: UInt64, source_id: 6\n-      LIST id: 13, nodes: 1\n-        COLUMN id: 10, column_name: value, result_type: String, source_id: 6\n+        COLUMN id: 13, column_name: id, result_type: UInt64, source_id: 6\n+      LIST id: 14, nodes: 1\n+        COLUMN id: 15, column_name: value, result_type: String, source_id: 6\n SELECT grouping(id) AS grouping_id, grouping(value) AS grouping_value, id, value FROM test_table\n GROUP BY GROUPING SETS ((id), (value)) ORDER BY grouping_id, grouping_value;\n 0\t1\t0\t\ndiff --git a/tests/queries/0_stateless/02564_analyzer_cross_to_inner.reference b/tests/queries/0_stateless/02564_analyzer_cross_to_inner.reference\nindex 6508b9f9205e..123ade0f4afa 100644\n--- a/tests/queries/0_stateless/02564_analyzer_cross_to_inner.reference\n+++ b/tests/queries/0_stateless/02564_analyzer_cross_to_inner.reference\n@@ -63,17 +63,17 @@ QUERY id: 0\n                   FUNCTION id: 28, function_name: plus, function_type: ordinary, result_type: UInt64\n                     ARGUMENTS\n                       LIST id: 29, nodes: 2\n-                        COLUMN id: 24, column_name: a, result_type: UInt64, source_id: 25\n-                        CONSTANT id: 30, constant_value: UInt64_1, constant_value_type: UInt8\n-                  COLUMN id: 31, column_name: b, result_type: UInt64, source_id: 25\n+                        COLUMN id: 30, column_name: a, result_type: UInt64, source_id: 25\n+                        CONSTANT id: 31, constant_value: UInt64_1, constant_value_type: UInt8\n+                  COLUMN id: 32, column_name: b, result_type: UInt64, source_id: 25\n       JOIN EXPRESSION\n-        FUNCTION id: 32, function_name: equals, function_type: ordinary, result_type: UInt8\n+        FUNCTION id: 33, function_name: equals, function_type: ordinary, result_type: UInt8\n           ARGUMENTS\n-            LIST id: 33, nodes: 2\n-              COLUMN id: 21, column_name: a, result_type: UInt64, source_id: 6\n-              COLUMN id: 34, column_name: x, result_type: UInt64, source_id: 9\n+            LIST id: 34, nodes: 2\n+              COLUMN id: 35, column_name: a, result_type: UInt64, source_id: 6\n+              COLUMN id: 36, column_name: x, result_type: UInt64, source_id: 9\n   WHERE\n-    CONSTANT id: 35, constant_value: UInt64_1, constant_value_type: UInt8\n+    CONSTANT id: 37, constant_value: UInt64_1, constant_value_type: UInt8\n EXPLAIN QUERY TREE\n SELECT * FROM t1, t2, (SELECT a as x from t3 where a + 1 = b ) as t3\n WHERE t1.a = if(t2.b > 0, t2.a, 0) AND t2.a = t3.x AND 1\n@@ -114,33 +114,33 @@ QUERY id: 0\n                   FUNCTION id: 16, function_name: plus, function_type: ordinary, result_type: UInt64\n                     ARGUMENTS\n                       LIST id: 17, nodes: 2\n-                        COLUMN id: 12, column_name: a, result_type: UInt64, source_id: 13\n-                        CONSTANT id: 18, constant_value: UInt64_1, constant_value_type: UInt8\n-                  COLUMN id: 19, column_name: b, result_type: UInt64, source_id: 13\n+                        COLUMN id: 18, column_name: a, result_type: UInt64, source_id: 13\n+                        CONSTANT id: 19, constant_value: UInt64_1, constant_value_type: UInt8\n+                  COLUMN id: 20, column_name: b, result_type: UInt64, source_id: 13\n   WHERE\n-    FUNCTION id: 20, function_name: and, function_type: ordinary, result_type: UInt8\n+    FUNCTION id: 21, function_name: and, function_type: ordinary, result_type: UInt8\n       ARGUMENTS\n-        LIST id: 21, nodes: 3\n-          FUNCTION id: 22, function_name: equals, function_type: ordinary, result_type: UInt8\n+        LIST id: 22, nodes: 3\n+          FUNCTION id: 23, function_name: equals, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n-              LIST id: 23, nodes: 2\n-                COLUMN id: 24, column_name: a, result_type: UInt64, source_id: 3\n-                FUNCTION id: 25, function_name: if, function_type: ordinary, result_type: UInt64\n+              LIST id: 24, nodes: 2\n+                COLUMN id: 25, column_name: a, result_type: UInt64, source_id: 3\n+                FUNCTION id: 26, function_name: if, function_type: ordinary, result_type: UInt64\n                   ARGUMENTS\n-                    LIST id: 26, nodes: 3\n-                      FUNCTION id: 27, function_name: greater, function_type: ordinary, result_type: UInt8\n+                    LIST id: 27, nodes: 3\n+                      FUNCTION id: 28, function_name: greater, function_type: ordinary, result_type: UInt8\n                         ARGUMENTS\n-                          LIST id: 28, nodes: 2\n-                            COLUMN id: 29, column_name: b, result_type: UInt64, source_id: 6\n-                            CONSTANT id: 30, constant_value: UInt64_0, constant_value_type: UInt8\n-                      COLUMN id: 31, column_name: a, result_type: UInt64, source_id: 6\n-                      CONSTANT id: 32, constant_value: UInt64_0, constant_value_type: UInt8\n-          FUNCTION id: 33, function_name: equals, function_type: ordinary, result_type: UInt8\n+                          LIST id: 29, nodes: 2\n+                            COLUMN id: 30, column_name: b, result_type: UInt64, source_id: 6\n+                            CONSTANT id: 31, constant_value: UInt64_0, constant_value_type: UInt8\n+                      COLUMN id: 32, column_name: a, result_type: UInt64, source_id: 6\n+                      CONSTANT id: 33, constant_value: UInt64_0, constant_value_type: UInt8\n+          FUNCTION id: 34, function_name: equals, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n-              LIST id: 34, nodes: 2\n-                COLUMN id: 31, column_name: a, result_type: UInt64, source_id: 6\n-                COLUMN id: 35, column_name: x, result_type: UInt64, source_id: 9\n-          CONSTANT id: 36, constant_value: UInt64_1, constant_value_type: UInt8\n+              LIST id: 35, nodes: 2\n+                COLUMN id: 36, column_name: a, result_type: UInt64, source_id: 6\n+                COLUMN id: 37, column_name: x, result_type: UInt64, source_id: 9\n+          CONSTANT id: 38, constant_value: UInt64_1, constant_value_type: UInt8\n   SETTINGS cross_to_inner_join_rewrite=0\n EXPLAIN QUERY TREE\n SELECT * FROM t1, t2, (SELECT a as x from t3 where a + 1 = b ) as t3\n@@ -198,9 +198,9 @@ QUERY id: 0\n                   FUNCTION id: 28, function_name: plus, function_type: ordinary, result_type: UInt64\n                     ARGUMENTS\n                       LIST id: 29, nodes: 2\n-                        COLUMN id: 24, column_name: a, result_type: UInt64, source_id: 25\n-                        CONSTANT id: 30, constant_value: UInt64_1, constant_value_type: UInt8\n-                  COLUMN id: 31, column_name: b, result_type: UInt64, source_id: 25\n+                        COLUMN id: 30, column_name: a, result_type: UInt64, source_id: 25\n+                        CONSTANT id: 31, constant_value: UInt64_1, constant_value_type: UInt8\n+                  COLUMN id: 32, column_name: b, result_type: UInt64, source_id: 25\n EXPLAIN QUERY TREE dump_ast=1\n SELECT * FROM t1, t2, t3, t4, t5\n WHERE t2.a = t3.a AND t1.b = t5.b;\n@@ -402,25 +402,25 @@ QUERY id: 0\n                   FUNCTION id: 26, function_name: equals, function_type: ordinary, result_type: UInt8\n                     ARGUMENTS\n                       LIST id: 27, nodes: 2\n-                        COLUMN id: 22, column_name: a, result_type: UInt64, source_id: 3\n-                        COLUMN id: 28, column_name: a, result_type: UInt64, source_id: 12\n-                  FUNCTION id: 29, function_name: equals, function_type: ordinary, result_type: UInt8\n+                        COLUMN id: 28, column_name: a, result_type: UInt64, source_id: 3\n+                        COLUMN id: 29, column_name: a, result_type: UInt64, source_id: 12\n+                  FUNCTION id: 30, function_name: equals, function_type: ordinary, result_type: UInt8\n                     ARGUMENTS\n-                      LIST id: 30, nodes: 2\n-                        COLUMN id: 31, column_name: b, result_type: UInt64, source_id: 9\n-                        COLUMN id: 32, column_name: b, result_type: UInt64, source_id: 12\n+                      LIST id: 31, nodes: 2\n+                        COLUMN id: 32, column_name: b, result_type: UInt64, source_id: 9\n+                        COLUMN id: 33, column_name: b, result_type: UInt64, source_id: 12\n       TABLE EXPRESSION\n-        JOIN id: 33, strictness: ALL, kind: INNER\n+        JOIN id: 34, strictness: ALL, kind: INNER\n           LEFT TABLE EXPRESSION\n             TABLE id: 6, alias: __table2, table_name: default.t2\n           RIGHT TABLE EXPRESSION\n             TABLE id: 15, alias: __table5, table_name: default.t5\n           JOIN EXPRESSION\n-            FUNCTION id: 34, function_name: equals, function_type: ordinary, result_type: UInt8\n+            FUNCTION id: 35, function_name: equals, function_type: ordinary, result_type: UInt8\n               ARGUMENTS\n-                LIST id: 35, nodes: 2\n-                  COLUMN id: 36, column_name: a, result_type: UInt64, source_id: 6\n-                  COLUMN id: 37, column_name: a, result_type: UInt64, source_id: 15\n+                LIST id: 36, nodes: 2\n+                  COLUMN id: 37, column_name: a, result_type: UInt64, source_id: 6\n+                  COLUMN id: 38, column_name: a, result_type: UInt64, source_id: 15\n \n SELECT\n     __table1.a AS `t1.a`,\n@@ -494,60 +494,60 @@ QUERY id: 0\n                       FUNCTION id: 27, function_name: equals, function_type: ordinary, result_type: UInt8\n                         ARGUMENTS\n                           LIST id: 28, nodes: 2\n-                            COLUMN id: 23, column_name: a, result_type: UInt64, source_id: 3\n-                            COLUMN id: 29, column_name: a, result_type: UInt64, source_id: 9\n-                      FUNCTION id: 30, function_name: equals, function_type: ordinary, result_type: UInt8\n+                            COLUMN id: 29, column_name: a, result_type: UInt64, source_id: 3\n+                            COLUMN id: 30, column_name: a, result_type: UInt64, source_id: 9\n+                      FUNCTION id: 31, function_name: equals, function_type: ordinary, result_type: UInt8\n                         ARGUMENTS\n-                          LIST id: 31, nodes: 2\n-                            COLUMN id: 24, column_name: a, result_type: UInt64, source_id: 6\n-                            COLUMN id: 29, column_name: a, result_type: UInt64, source_id: 9\n+                          LIST id: 32, nodes: 2\n+                            COLUMN id: 33, column_name: a, result_type: UInt64, source_id: 6\n+                            COLUMN id: 34, column_name: a, result_type: UInt64, source_id: 9\n           RIGHT TABLE EXPRESSION\n             TABLE id: 12, alias: __table4, table_name: default.t4\n           JOIN EXPRESSION\n-            FUNCTION id: 32, function_name: and, function_type: ordinary, result_type: UInt8\n+            FUNCTION id: 35, function_name: and, function_type: ordinary, result_type: UInt8\n               ARGUMENTS\n-                LIST id: 33, nodes: 3\n-                  FUNCTION id: 34, function_name: equals, function_type: ordinary, result_type: UInt8\n-                    ARGUMENTS\n-                      LIST id: 35, nodes: 2\n-                        COLUMN id: 23, column_name: a, result_type: UInt64, source_id: 3\n-                        COLUMN id: 36, column_name: a, result_type: UInt64, source_id: 12\n+                LIST id: 36, nodes: 3\n                   FUNCTION id: 37, function_name: equals, function_type: ordinary, result_type: UInt8\n                     ARGUMENTS\n                       LIST id: 38, nodes: 2\n-                        COLUMN id: 24, column_name: a, result_type: UInt64, source_id: 6\n-                        COLUMN id: 36, column_name: a, result_type: UInt64, source_id: 12\n-                  FUNCTION id: 39, function_name: equals, function_type: ordinary, result_type: UInt8\n+                        COLUMN id: 39, column_name: a, result_type: UInt64, source_id: 3\n+                        COLUMN id: 40, column_name: a, result_type: UInt64, source_id: 12\n+                  FUNCTION id: 41, function_name: equals, function_type: ordinary, result_type: UInt8\n+                    ARGUMENTS\n+                      LIST id: 42, nodes: 2\n+                        COLUMN id: 43, column_name: a, result_type: UInt64, source_id: 6\n+                        COLUMN id: 44, column_name: a, result_type: UInt64, source_id: 12\n+                  FUNCTION id: 45, function_name: equals, function_type: ordinary, result_type: UInt8\n                     ARGUMENTS\n-                      LIST id: 40, nodes: 2\n-                        COLUMN id: 29, column_name: a, result_type: UInt64, source_id: 9\n-                        COLUMN id: 36, column_name: a, result_type: UInt64, source_id: 12\n+                      LIST id: 46, nodes: 2\n+                        COLUMN id: 47, column_name: a, result_type: UInt64, source_id: 9\n+                        COLUMN id: 48, column_name: a, result_type: UInt64, source_id: 12\n       RIGHT TABLE EXPRESSION\n         TABLE id: 15, alias: __table5, table_name: default.t5\n       JOIN EXPRESSION\n-        FUNCTION id: 41, function_name: and, function_type: ordinary, result_type: UInt8\n+        FUNCTION id: 49, function_name: and, function_type: ordinary, result_type: UInt8\n           ARGUMENTS\n-            LIST id: 42, nodes: 4\n-              FUNCTION id: 43, function_name: equals, function_type: ordinary, result_type: UInt8\n+            LIST id: 50, nodes: 4\n+              FUNCTION id: 51, function_name: equals, function_type: ordinary, result_type: UInt8\n                 ARGUMENTS\n-                  LIST id: 44, nodes: 2\n-                    COLUMN id: 23, column_name: a, result_type: UInt64, source_id: 3\n-                    COLUMN id: 45, column_name: a, result_type: UInt64, source_id: 15\n-              FUNCTION id: 46, function_name: equals, function_type: ordinary, result_type: UInt8\n+                  LIST id: 52, nodes: 2\n+                    COLUMN id: 53, column_name: a, result_type: UInt64, source_id: 3\n+                    COLUMN id: 54, column_name: a, result_type: UInt64, source_id: 15\n+              FUNCTION id: 55, function_name: equals, function_type: ordinary, result_type: UInt8\n                 ARGUMENTS\n-                  LIST id: 47, nodes: 2\n-                    COLUMN id: 24, column_name: a, result_type: UInt64, source_id: 6\n-                    COLUMN id: 45, column_name: a, result_type: UInt64, source_id: 15\n-              FUNCTION id: 48, function_name: equals, function_type: ordinary, result_type: UInt8\n+                  LIST id: 56, nodes: 2\n+                    COLUMN id: 57, column_name: a, result_type: UInt64, source_id: 6\n+                    COLUMN id: 58, column_name: a, result_type: UInt64, source_id: 15\n+              FUNCTION id: 59, function_name: equals, function_type: ordinary, result_type: UInt8\n                 ARGUMENTS\n-                  LIST id: 49, nodes: 2\n-                    COLUMN id: 29, column_name: a, result_type: UInt64, source_id: 9\n-                    COLUMN id: 45, column_name: a, result_type: UInt64, source_id: 15\n-              FUNCTION id: 50, function_name: equals, function_type: ordinary, result_type: UInt8\n+                  LIST id: 60, nodes: 2\n+                    COLUMN id: 61, column_name: a, result_type: UInt64, source_id: 9\n+                    COLUMN id: 62, column_name: a, result_type: UInt64, source_id: 15\n+              FUNCTION id: 63, function_name: equals, function_type: ordinary, result_type: UInt8\n                 ARGUMENTS\n-                  LIST id: 51, nodes: 2\n-                    COLUMN id: 36, column_name: a, result_type: UInt64, source_id: 12\n-                    COLUMN id: 45, column_name: a, result_type: UInt64, source_id: 15\n+                  LIST id: 64, nodes: 2\n+                    COLUMN id: 65, column_name: a, result_type: UInt64, source_id: 12\n+                    COLUMN id: 66, column_name: a, result_type: UInt64, source_id: 15\n \n SELECT\n     __table1.a AS `t1.a`,\ndiff --git a/tests/queries/0_stateless/02564_analyzer_ssb_cross_to_inner.reference b/tests/queries/0_stateless/02564_analyzer_ssb_cross_to_inner.reference\nindex 0b5ad752f3a3..cf58d8bb5615 100644\n--- a/tests/queries/0_stateless/02564_analyzer_ssb_cross_to_inner.reference\n+++ b/tests/queries/0_stateless/02564_analyzer_ssb_cross_to_inner.reference\n@@ -71,54 +71,54 @@ QUERY id: 0\n           FUNCTION id: 42, function_name: lessOrEquals, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n               LIST id: 43, nodes: 2\n-                COLUMN id: 40, column_name: LO_QUANTITY, result_type: UInt8, source_id: 13\n-                CONSTANT id: 44, constant_value: UInt64_44, constant_value_type: UInt8\n-          FUNCTION id: 45, function_name: greaterOrEquals, function_type: ordinary, result_type: UInt8\n+                COLUMN id: 44, column_name: LO_QUANTITY, result_type: UInt8, source_id: 13\n+                CONSTANT id: 45, constant_value: UInt64_44, constant_value_type: UInt8\n+          FUNCTION id: 46, function_name: greaterOrEquals, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n-              LIST id: 46, nodes: 2\n-                COLUMN id: 21, column_name: LO_ORDERDATE, result_type: Date, source_id: 13\n-                CONSTANT id: 47, constant_value: UInt64_9496, constant_value_type: Date\n+              LIST id: 47, nodes: 2\n+                COLUMN id: 48, column_name: LO_ORDERDATE, result_type: Date, source_id: 13\n+                CONSTANT id: 49, constant_value: UInt64_9496, constant_value_type: Date\n                   EXPRESSION\n-                    FUNCTION id: 48, function_name: toDate, function_type: ordinary, result_type: Date\n+                    FUNCTION id: 50, function_name: toDate, function_type: ordinary, result_type: Date\n                       ARGUMENTS\n-                        LIST id: 49, nodes: 1\n-                          CONSTANT id: 50, constant_value: \\'1996-01-01\\', constant_value_type: String\n-          FUNCTION id: 51, function_name: lessOrEquals, function_type: ordinary, result_type: UInt8\n+                        LIST id: 51, nodes: 1\n+                          CONSTANT id: 52, constant_value: \\'1996-01-01\\', constant_value_type: String\n+          FUNCTION id: 53, function_name: lessOrEquals, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n-              LIST id: 52, nodes: 2\n-                COLUMN id: 21, column_name: LO_ORDERDATE, result_type: Date, source_id: 13\n-                CONSTANT id: 53, constant_value: UInt64_9861, constant_value_type: Date\n+              LIST id: 54, nodes: 2\n+                COLUMN id: 55, column_name: LO_ORDERDATE, result_type: Date, source_id: 13\n+                CONSTANT id: 56, constant_value: UInt64_9861, constant_value_type: Date\n                   EXPRESSION\n-                    FUNCTION id: 54, function_name: toDate, function_type: ordinary, result_type: Date\n+                    FUNCTION id: 57, function_name: toDate, function_type: ordinary, result_type: Date\n                       ARGUMENTS\n-                        LIST id: 55, nodes: 1\n-                          CONSTANT id: 56, constant_value: \\'1996-12-31\\', constant_value_type: String\n-          FUNCTION id: 57, function_name: equals, function_type: ordinary, result_type: LowCardinality(UInt8)\n+                        LIST id: 58, nodes: 1\n+                          CONSTANT id: 59, constant_value: \\'1996-12-31\\', constant_value_type: String\n+          FUNCTION id: 60, function_name: equals, function_type: ordinary, result_type: LowCardinality(UInt8)\n             ARGUMENTS\n-              LIST id: 58, nodes: 2\n-                COLUMN id: 59, column_name: S_NATION, result_type: LowCardinality(String), source_id: 5\n-                CONSTANT id: 60, constant_value: \\'UNITED KINGDOM\\', constant_value_type: String\n-          FUNCTION id: 61, function_name: equals, function_type: ordinary, result_type: LowCardinality(UInt8)\n+              LIST id: 61, nodes: 2\n+                COLUMN id: 62, column_name: S_NATION, result_type: LowCardinality(String), source_id: 5\n+                CONSTANT id: 63, constant_value: \\'UNITED KINGDOM\\', constant_value_type: String\n+          FUNCTION id: 64, function_name: equals, function_type: ordinary, result_type: LowCardinality(UInt8)\n             ARGUMENTS\n-              LIST id: 62, nodes: 2\n-                COLUMN id: 63, column_name: P_CATEGORY, result_type: LowCardinality(String), source_id: 7\n-                CONSTANT id: 64, constant_value: \\'MFGR#21\\', constant_value_type: String\n+              LIST id: 65, nodes: 2\n+                COLUMN id: 66, column_name: P_CATEGORY, result_type: LowCardinality(String), source_id: 7\n+                CONSTANT id: 67, constant_value: \\'MFGR#21\\', constant_value_type: String\n   GROUP BY\n-    LIST id: 65, nodes: 3\n-      COLUMN id: 2, column_name: D_YEARMONTHNUM, result_type: UInt32, source_id: 3\n-      COLUMN id: 4, column_name: S_CITY, result_type: LowCardinality(String), source_id: 5\n-      COLUMN id: 6, column_name: P_BRAND, result_type: LowCardinality(String), source_id: 7\n+    LIST id: 68, nodes: 3\n+      COLUMN id: 69, column_name: D_YEARMONTHNUM, result_type: UInt32, source_id: 3\n+      COLUMN id: 70, column_name: S_CITY, result_type: LowCardinality(String), source_id: 5\n+      COLUMN id: 71, column_name: P_BRAND, result_type: LowCardinality(String), source_id: 7\n   ORDER BY\n-    LIST id: 66, nodes: 3\n-      SORT id: 67, sort_direction: ASCENDING, with_fill: 0\n+    LIST id: 72, nodes: 3\n+      SORT id: 73, sort_direction: ASCENDING, with_fill: 0\n         EXPRESSION\n-          COLUMN id: 2, column_name: D_YEARMONTHNUM, result_type: UInt32, source_id: 3\n-      SORT id: 68, sort_direction: ASCENDING, with_fill: 0\n+          COLUMN id: 74, column_name: D_YEARMONTHNUM, result_type: UInt32, source_id: 3\n+      SORT id: 75, sort_direction: ASCENDING, with_fill: 0\n         EXPRESSION\n-          COLUMN id: 4, column_name: S_CITY, result_type: LowCardinality(String), source_id: 5\n-      SORT id: 69, sort_direction: ASCENDING, with_fill: 0\n+          COLUMN id: 76, column_name: S_CITY, result_type: LowCardinality(String), source_id: 5\n+      SORT id: 77, sort_direction: ASCENDING, with_fill: 0\n         EXPRESSION\n-          COLUMN id: 6, column_name: P_BRAND, result_type: LowCardinality(String), source_id: 7\n+          COLUMN id: 78, column_name: P_BRAND, result_type: LowCardinality(String), source_id: 7\n \n SELECT\n     __table1.D_YEARMONTHNUM AS D_YEARMONTHNUM,\ndiff --git a/tests/queries/0_stateless/02702_logical_optimizer_with_nulls.reference b/tests/queries/0_stateless/02702_logical_optimizer_with_nulls.reference\nindex c25b446dcdcc..de22e6f986e6 100644\n--- a/tests/queries/0_stateless/02702_logical_optimizer_with_nulls.reference\n+++ b/tests/queries/0_stateless/02702_logical_optimizer_with_nulls.reference\n@@ -23,12 +23,12 @@ QUERY id: 0\n             ARGUMENTS\n               LIST id: 12, nodes: 2\n                 CONSTANT id: 13, constant_value: UInt64_3, constant_value_type: UInt8\n-                COLUMN id: 9, column_name: a, result_type: Int32, source_id: 3\n-          FUNCTION id: 14, function_name: equals, function_type: ordinary, result_type: Nullable(Nothing)\n+                COLUMN id: 14, column_name: a, result_type: Int32, source_id: 3\n+          FUNCTION id: 15, function_name: equals, function_type: ordinary, result_type: Nullable(Nothing)\n             ARGUMENTS\n-              LIST id: 15, nodes: 2\n-                CONSTANT id: 16, constant_value: NULL, constant_value_type: Nullable(Nothing)\n-                COLUMN id: 9, column_name: a, result_type: Int32, source_id: 3\n+              LIST id: 16, nodes: 2\n+                CONSTANT id: 17, constant_value: NULL, constant_value_type: Nullable(Nothing)\n+                COLUMN id: 18, column_name: a, result_type: Int32, source_id: 3\n 1\ttest\n 2\ttest2\n 3\tanother\n@@ -54,8 +54,8 @@ QUERY id: 0\n           FUNCTION id: 11, function_name: in, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n               LIST id: 12, nodes: 2\n-                COLUMN id: 9, column_name: a, result_type: Int32, source_id: 3\n-                CONSTANT id: 13, constant_value: Tuple_(UInt64_1, UInt64_3, UInt64_2), constant_value_type: Tuple(UInt8, UInt8, UInt8)\n+                COLUMN id: 13, column_name: a, result_type: Int32, source_id: 3\n+                CONSTANT id: 14, constant_value: Tuple_(UInt64_1, UInt64_3, UInt64_2), constant_value_type: Tuple(UInt8, UInt8, UInt8)\n 1\ttest\n 2\ttest2\n 3\tanother\ndiff --git a/tests/queries/0_stateless/02785_date_predicate_optimizations_ast_query_tree_rewrite.reference b/tests/queries/0_stateless/02785_date_predicate_optimizations_ast_query_tree_rewrite.reference\nindex c2c77a4aa315..3c615bad1850 100644\n--- a/tests/queries/0_stateless/02785_date_predicate_optimizations_ast_query_tree_rewrite.reference\n+++ b/tests/queries/0_stateless/02785_date_predicate_optimizations_ast_query_tree_rewrite.reference\n@@ -37,8 +37,8 @@ QUERY id: 0\n                 FUNCTION id: 21, function_name: lessOrEquals, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n                     LIST id: 22, nodes: 2\n-                      COLUMN id: 19, column_name: id, result_type: UInt32, source_id: 3\n-                      CONSTANT id: 23, constant_value: UInt64_3, constant_value_type: UInt8\n+                      COLUMN id: 23, column_name: id, result_type: UInt32, source_id: 3\n+                      CONSTANT id: 24, constant_value: UInt64_3, constant_value_type: UInt8\n   SETTINGS enable_analyzer=1\n SELECT value1\n FROM date_t\n@@ -79,8 +79,8 @@ QUERY id: 0\n                 FUNCTION id: 21, function_name: lessOrEquals, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n                     LIST id: 22, nodes: 2\n-                      COLUMN id: 19, column_name: id, result_type: UInt32, source_id: 3\n-                      CONSTANT id: 23, constant_value: UInt64_3, constant_value_type: UInt8\n+                      COLUMN id: 23, column_name: id, result_type: UInt32, source_id: 3\n+                      CONSTANT id: 24, constant_value: UInt64_3, constant_value_type: UInt8\n   SETTINGS enable_analyzer=1\n SELECT value1\n FROM date_t\n@@ -113,8 +113,8 @@ QUERY id: 0\n                 FUNCTION id: 16, function_name: lessOrEquals, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n                     LIST id: 17, nodes: 2\n-                      COLUMN id: 14, column_name: id, result_type: UInt32, source_id: 3\n-                      CONSTANT id: 18, constant_value: UInt64_3, constant_value_type: UInt8\n+                      COLUMN id: 18, column_name: id, result_type: UInt32, source_id: 3\n+                      CONSTANT id: 19, constant_value: UInt64_3, constant_value_type: UInt8\n   SETTINGS enable_analyzer=1\n SELECT value1\n FROM date_t\n@@ -147,8 +147,8 @@ QUERY id: 0\n                 FUNCTION id: 16, function_name: lessOrEquals, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n                     LIST id: 17, nodes: 2\n-                      COLUMN id: 14, column_name: id, result_type: UInt32, source_id: 3\n-                      CONSTANT id: 18, constant_value: UInt64_3, constant_value_type: UInt8\n+                      COLUMN id: 18, column_name: id, result_type: UInt32, source_id: 3\n+                      CONSTANT id: 19, constant_value: UInt64_3, constant_value_type: UInt8\n   SETTINGS enable_analyzer=1\n SELECT value1\n FROM date_t\n@@ -181,8 +181,8 @@ QUERY id: 0\n                 FUNCTION id: 16, function_name: lessOrEquals, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n                     LIST id: 17, nodes: 2\n-                      COLUMN id: 14, column_name: id, result_type: UInt32, source_id: 3\n-                      CONSTANT id: 18, constant_value: UInt64_3, constant_value_type: UInt8\n+                      COLUMN id: 18, column_name: id, result_type: UInt32, source_id: 3\n+                      CONSTANT id: 19, constant_value: UInt64_3, constant_value_type: UInt8\n   SETTINGS enable_analyzer=1\n SELECT value1\n FROM date_t\n@@ -215,8 +215,8 @@ QUERY id: 0\n                 FUNCTION id: 16, function_name: lessOrEquals, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n                     LIST id: 17, nodes: 2\n-                      COLUMN id: 14, column_name: id, result_type: UInt32, source_id: 3\n-                      CONSTANT id: 18, constant_value: UInt64_3, constant_value_type: UInt8\n+                      COLUMN id: 18, column_name: id, result_type: UInt32, source_id: 3\n+                      CONSTANT id: 19, constant_value: UInt64_3, constant_value_type: UInt8\n   SETTINGS enable_analyzer=1\n SELECT value1\n FROM date_t\n@@ -244,21 +244,21 @@ QUERY id: 0\n                 FUNCTION id: 12, function_name: less, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n                     LIST id: 13, nodes: 2\n-                      COLUMN id: 10, column_name: date1, result_type: Date, source_id: 3\n-                      CONSTANT id: 14, constant_value: \\'1998-01-01\\', constant_value_type: String\n-          FUNCTION id: 15, function_name: and, function_type: ordinary, result_type: UInt8\n+                      COLUMN id: 14, column_name: date1, result_type: Date, source_id: 3\n+                      CONSTANT id: 15, constant_value: \\'1998-01-01\\', constant_value_type: String\n+          FUNCTION id: 16, function_name: and, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n-              LIST id: 16, nodes: 2\n-                FUNCTION id: 17, function_name: greaterOrEquals, function_type: ordinary, result_type: UInt8\n+              LIST id: 17, nodes: 2\n+                FUNCTION id: 18, function_name: greaterOrEquals, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n-                    LIST id: 18, nodes: 2\n-                      COLUMN id: 19, column_name: id, result_type: UInt32, source_id: 3\n-                      CONSTANT id: 20, constant_value: UInt64_1, constant_value_type: UInt8\n-                FUNCTION id: 21, function_name: lessOrEquals, function_type: ordinary, result_type: UInt8\n+                    LIST id: 19, nodes: 2\n+                      COLUMN id: 20, column_name: id, result_type: UInt32, source_id: 3\n+                      CONSTANT id: 21, constant_value: UInt64_1, constant_value_type: UInt8\n+                FUNCTION id: 22, function_name: lessOrEquals, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n-                    LIST id: 22, nodes: 2\n-                      COLUMN id: 19, column_name: id, result_type: UInt32, source_id: 3\n-                      CONSTANT id: 23, constant_value: UInt64_3, constant_value_type: UInt8\n+                    LIST id: 23, nodes: 2\n+                      COLUMN id: 24, column_name: id, result_type: UInt32, source_id: 3\n+                      CONSTANT id: 25, constant_value: UInt64_3, constant_value_type: UInt8\n   SETTINGS enable_analyzer=1\n SELECT value1\n FROM date_t\n@@ -297,26 +297,26 @@ QUERY id: 0\n                       FUNCTION id: 19, function_name: greaterOrEquals, function_type: ordinary, result_type: UInt8\n                         ARGUMENTS\n                           LIST id: 20, nodes: 2\n-                            COLUMN id: 12, column_name: date1, result_type: Date, source_id: 3\n-                            CONSTANT id: 21, constant_value: \\'1994-01-01\\', constant_value_type: String\n-                      FUNCTION id: 22, function_name: less, function_type: ordinary, result_type: UInt8\n+                            COLUMN id: 21, column_name: date1, result_type: Date, source_id: 3\n+                            CONSTANT id: 22, constant_value: \\'1994-01-01\\', constant_value_type: String\n+                      FUNCTION id: 23, function_name: less, function_type: ordinary, result_type: UInt8\n                         ARGUMENTS\n-                          LIST id: 23, nodes: 2\n-                            COLUMN id: 12, column_name: date1, result_type: Date, source_id: 3\n-                            CONSTANT id: 24, constant_value: \\'1995-01-01\\', constant_value_type: String\n-          FUNCTION id: 25, function_name: and, function_type: ordinary, result_type: UInt8\n+                          LIST id: 24, nodes: 2\n+                            COLUMN id: 21, column_name: date1, result_type: Date, source_id: 3\n+                            CONSTANT id: 25, constant_value: \\'1995-01-01\\', constant_value_type: String\n+          FUNCTION id: 26, function_name: and, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n-              LIST id: 26, nodes: 2\n-                FUNCTION id: 27, function_name: greaterOrEquals, function_type: ordinary, result_type: UInt8\n+              LIST id: 27, nodes: 2\n+                FUNCTION id: 28, function_name: greaterOrEquals, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n-                    LIST id: 28, nodes: 2\n-                      COLUMN id: 29, column_name: id, result_type: UInt32, source_id: 3\n-                      CONSTANT id: 30, constant_value: UInt64_1, constant_value_type: UInt8\n-                FUNCTION id: 31, function_name: lessOrEquals, function_type: ordinary, result_type: UInt8\n+                    LIST id: 29, nodes: 2\n+                      COLUMN id: 30, column_name: id, result_type: UInt32, source_id: 3\n+                      CONSTANT id: 31, constant_value: UInt64_1, constant_value_type: UInt8\n+                FUNCTION id: 32, function_name: lessOrEquals, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n-                    LIST id: 32, nodes: 2\n-                      COLUMN id: 29, column_name: id, result_type: UInt32, source_id: 3\n-                      CONSTANT id: 33, constant_value: UInt64_3, constant_value_type: UInt8\n+                    LIST id: 33, nodes: 2\n+                      COLUMN id: 34, column_name: id, result_type: UInt32, source_id: 3\n+                      CONSTANT id: 35, constant_value: UInt64_3, constant_value_type: UInt8\n   SETTINGS enable_analyzer=1\n SELECT\n     value1,\n@@ -346,26 +346,26 @@ QUERY id: 0\n                 FUNCTION id: 11, function_name: greaterOrEquals, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n                     LIST id: 12, nodes: 2\n-                      COLUMN id: 6, column_name: date1, result_type: Date, source_id: 3\n-                      CONSTANT id: 13, constant_value: \\'1993-01-01\\', constant_value_type: String\n-                FUNCTION id: 14, function_name: less, function_type: ordinary, result_type: UInt8\n-                  ARGUMENTS\n-                    LIST id: 15, nodes: 2\n-                      COLUMN id: 6, column_name: date1, result_type: Date, source_id: 3\n-                      CONSTANT id: 16, constant_value: \\'1994-01-01\\', constant_value_type: String\n-          FUNCTION id: 17, function_name: and, function_type: ordinary, result_type: UInt8\n+                      COLUMN id: 13, column_name: date1, result_type: Date, source_id: 3\n+                      CONSTANT id: 14, constant_value: \\'1993-01-01\\', constant_value_type: String\n+                FUNCTION id: 15, function_name: less, function_type: ordinary, result_type: UInt8\n+                  ARGUMENTS\n+                    LIST id: 16, nodes: 2\n+                      COLUMN id: 13, column_name: date1, result_type: Date, source_id: 3\n+                      CONSTANT id: 17, constant_value: \\'1994-01-01\\', constant_value_type: String\n+          FUNCTION id: 18, function_name: and, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n-              LIST id: 18, nodes: 2\n-                FUNCTION id: 19, function_name: greaterOrEquals, function_type: ordinary, result_type: UInt8\n+              LIST id: 19, nodes: 2\n+                FUNCTION id: 20, function_name: greaterOrEquals, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n-                    LIST id: 20, nodes: 2\n-                      COLUMN id: 21, column_name: id, result_type: UInt32, source_id: 3\n-                      CONSTANT id: 22, constant_value: UInt64_1, constant_value_type: UInt8\n-                FUNCTION id: 23, function_name: lessOrEquals, function_type: ordinary, result_type: UInt8\n+                    LIST id: 21, nodes: 2\n+                      COLUMN id: 22, column_name: id, result_type: UInt32, source_id: 3\n+                      CONSTANT id: 23, constant_value: UInt64_1, constant_value_type: UInt8\n+                FUNCTION id: 24, function_name: lessOrEquals, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n-                    LIST id: 24, nodes: 2\n-                      COLUMN id: 21, column_name: id, result_type: UInt32, source_id: 3\n-                      CONSTANT id: 25, constant_value: UInt64_3, constant_value_type: UInt8\n+                    LIST id: 25, nodes: 2\n+                      COLUMN id: 26, column_name: id, result_type: UInt32, source_id: 3\n+                      CONSTANT id: 27, constant_value: UInt64_3, constant_value_type: UInt8\n   SETTINGS enable_analyzer=1\n SELECT value1\n FROM date_t\n@@ -398,8 +398,8 @@ QUERY id: 0\n                 FUNCTION id: 16, function_name: lessOrEquals, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n                     LIST id: 17, nodes: 2\n-                      COLUMN id: 14, column_name: id, result_type: UInt32, source_id: 3\n-                      CONSTANT id: 18, constant_value: UInt64_3, constant_value_type: UInt8\n+                      COLUMN id: 18, column_name: id, result_type: UInt32, source_id: 3\n+                      CONSTANT id: 19, constant_value: UInt64_3, constant_value_type: UInt8\n   SETTINGS enable_analyzer=1\n SELECT value1\n FROM date_t\n@@ -439,8 +439,8 @@ QUERY id: 0\n           FUNCTION id: 19, function_name: lessOrEquals, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n               LIST id: 20, nodes: 2\n-                COLUMN id: 17, column_name: id, result_type: UInt32, source_id: 3\n-                CONSTANT id: 21, constant_value: UInt64_3, constant_value_type: UInt8\n+                COLUMN id: 21, column_name: id, result_type: UInt32, source_id: 3\n+                CONSTANT id: 22, constant_value: UInt64_3, constant_value_type: UInt8\n   SETTINGS enable_analyzer=1\n SELECT value1\n FROM date_t\n@@ -465,22 +465,22 @@ QUERY id: 0\n           FUNCTION id: 10, function_name: lessOrEquals, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n               LIST id: 11, nodes: 2\n-                COLUMN id: 8, column_name: id, result_type: UInt32, source_id: 3\n-                CONSTANT id: 12, constant_value: UInt64_3, constant_value_type: UInt8\n+                COLUMN id: 12, column_name: id, result_type: UInt32, source_id: 3\n+                CONSTANT id: 13, constant_value: UInt64_3, constant_value_type: UInt8\n   HAVING\n-    FUNCTION id: 13, function_name: and, function_type: ordinary, result_type: UInt8\n+    FUNCTION id: 14, function_name: and, function_type: ordinary, result_type: UInt8\n       ARGUMENTS\n-        LIST id: 14, nodes: 2\n-          FUNCTION id: 15, function_name: greaterOrEquals, function_type: ordinary, result_type: UInt8\n+        LIST id: 15, nodes: 2\n+          FUNCTION id: 16, function_name: greaterOrEquals, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n-              LIST id: 16, nodes: 2\n-                COLUMN id: 17, column_name: date1, result_type: Date, source_id: 3\n-                CONSTANT id: 18, constant_value: \\'1993-01-01\\', constant_value_type: String\n-          FUNCTION id: 19, function_name: less, function_type: ordinary, result_type: UInt8\n+              LIST id: 17, nodes: 2\n+                COLUMN id: 18, column_name: date1, result_type: Date, source_id: 3\n+                CONSTANT id: 19, constant_value: \\'1993-01-01\\', constant_value_type: String\n+          FUNCTION id: 20, function_name: less, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n-              LIST id: 20, nodes: 2\n-                COLUMN id: 17, column_name: date1, result_type: Date, source_id: 3\n-                CONSTANT id: 21, constant_value: \\'1994-01-01\\', constant_value_type: String\n+              LIST id: 21, nodes: 2\n+                COLUMN id: 18, column_name: date1, result_type: Date, source_id: 3\n+                CONSTANT id: 22, constant_value: \\'1994-01-01\\', constant_value_type: String\n   SETTINGS enable_analyzer=1\n SELECT value1\n FROM date_t\n@@ -516,8 +516,8 @@ QUERY id: 0\n                 FUNCTION id: 18, function_name: lessOrEquals, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n                     LIST id: 19, nodes: 2\n-                      COLUMN id: 16, column_name: id, result_type: UInt32, source_id: 3\n-                      CONSTANT id: 20, constant_value: UInt64_3, constant_value_type: UInt8\n+                      COLUMN id: 20, column_name: id, result_type: UInt32, source_id: 3\n+                      CONSTANT id: 21, constant_value: UInt64_3, constant_value_type: UInt8\n   SETTINGS enable_analyzer=1\n SELECT value1\n FROM date_t\n@@ -553,8 +553,8 @@ QUERY id: 0\n                 FUNCTION id: 18, function_name: lessOrEquals, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n                     LIST id: 19, nodes: 2\n-                      COLUMN id: 16, column_name: id, result_type: UInt32, source_id: 3\n-                      CONSTANT id: 20, constant_value: UInt64_3, constant_value_type: UInt8\n+                      COLUMN id: 20, column_name: id, result_type: UInt32, source_id: 3\n+                      CONSTANT id: 21, constant_value: UInt64_3, constant_value_type: UInt8\n   SETTINGS enable_analyzer=1\n SELECT value1\n FROM date_t\n@@ -595,8 +595,8 @@ QUERY id: 0\n                 FUNCTION id: 21, function_name: lessOrEquals, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n                     LIST id: 22, nodes: 2\n-                      COLUMN id: 19, column_name: id, result_type: UInt32, source_id: 3\n-                      CONSTANT id: 23, constant_value: UInt64_3, constant_value_type: UInt8\n+                      COLUMN id: 23, column_name: id, result_type: UInt32, source_id: 3\n+                      CONSTANT id: 24, constant_value: UInt64_3, constant_value_type: UInt8\n   SETTINGS enable_analyzer=1\n SELECT value1\n FROM date_t\n@@ -637,8 +637,8 @@ QUERY id: 0\n                 FUNCTION id: 21, function_name: lessOrEquals, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n                     LIST id: 22, nodes: 2\n-                      COLUMN id: 19, column_name: id, result_type: UInt32, source_id: 3\n-                      CONSTANT id: 23, constant_value: UInt64_3, constant_value_type: UInt8\n+                      COLUMN id: 23, column_name: id, result_type: UInt32, source_id: 3\n+                      CONSTANT id: 24, constant_value: UInt64_3, constant_value_type: UInt8\n   SETTINGS enable_analyzer=1\n SELECT value1\n FROM date_t\n@@ -679,8 +679,8 @@ QUERY id: 0\n                 FUNCTION id: 21, function_name: lessOrEquals, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n                     LIST id: 22, nodes: 2\n-                      COLUMN id: 19, column_name: id, result_type: UInt32, source_id: 3\n-                      CONSTANT id: 23, constant_value: UInt64_3, constant_value_type: UInt8\n+                      COLUMN id: 23, column_name: id, result_type: UInt32, source_id: 3\n+                      CONSTANT id: 24, constant_value: UInt64_3, constant_value_type: UInt8\n   SETTINGS enable_analyzer=1\n SELECT value1\n FROM date_t\n@@ -713,8 +713,8 @@ QUERY id: 0\n                 FUNCTION id: 16, function_name: lessOrEquals, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n                     LIST id: 17, nodes: 2\n-                      COLUMN id: 14, column_name: id, result_type: UInt32, source_id: 3\n-                      CONSTANT id: 18, constant_value: UInt64_3, constant_value_type: UInt8\n+                      COLUMN id: 18, column_name: id, result_type: UInt32, source_id: 3\n+                      CONSTANT id: 19, constant_value: UInt64_3, constant_value_type: UInt8\n   SETTINGS enable_analyzer=1\n SELECT value1\n FROM date_t\n@@ -747,8 +747,8 @@ QUERY id: 0\n                 FUNCTION id: 16, function_name: lessOrEquals, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n                     LIST id: 17, nodes: 2\n-                      COLUMN id: 14, column_name: id, result_type: UInt32, source_id: 3\n-                      CONSTANT id: 18, constant_value: UInt64_3, constant_value_type: UInt8\n+                      COLUMN id: 18, column_name: id, result_type: UInt32, source_id: 3\n+                      CONSTANT id: 19, constant_value: UInt64_3, constant_value_type: UInt8\n   SETTINGS enable_analyzer=1\n SELECT value1\n FROM date_t\n@@ -781,8 +781,8 @@ QUERY id: 0\n                 FUNCTION id: 16, function_name: lessOrEquals, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n                     LIST id: 17, nodes: 2\n-                      COLUMN id: 14, column_name: id, result_type: UInt32, source_id: 3\n-                      CONSTANT id: 18, constant_value: UInt64_3, constant_value_type: UInt8\n+                      COLUMN id: 18, column_name: id, result_type: UInt32, source_id: 3\n+                      CONSTANT id: 19, constant_value: UInt64_3, constant_value_type: UInt8\n   SETTINGS enable_analyzer=1\n SELECT value1\n FROM date_t\n@@ -815,8 +815,8 @@ QUERY id: 0\n                 FUNCTION id: 16, function_name: lessOrEquals, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n                     LIST id: 17, nodes: 2\n-                      COLUMN id: 14, column_name: id, result_type: UInt32, source_id: 3\n-                      CONSTANT id: 18, constant_value: UInt64_3, constant_value_type: UInt8\n+                      COLUMN id: 18, column_name: id, result_type: UInt32, source_id: 3\n+                      CONSTANT id: 19, constant_value: UInt64_3, constant_value_type: UInt8\n   SETTINGS enable_analyzer=1\n SELECT value1\n FROM date_t\n@@ -847,26 +847,26 @@ QUERY id: 0\n                       FUNCTION id: 14, function_name: greaterOrEquals, function_type: ordinary, result_type: UInt8\n                         ARGUMENTS\n                           LIST id: 15, nodes: 2\n-                            COLUMN id: 10, column_name: date1, result_type: Date, source_id: 3\n-                            CONSTANT id: 16, constant_value: \\'1993-01-01\\', constant_value_type: String\n-                      FUNCTION id: 17, function_name: less, function_type: ordinary, result_type: UInt8\n+                            COLUMN id: 16, column_name: date1, result_type: Date, source_id: 3\n+                            CONSTANT id: 17, constant_value: \\'1993-01-01\\', constant_value_type: String\n+                      FUNCTION id: 18, function_name: less, function_type: ordinary, result_type: UInt8\n                         ARGUMENTS\n-                          LIST id: 18, nodes: 2\n-                            COLUMN id: 10, column_name: date1, result_type: Date, source_id: 3\n-                            CONSTANT id: 19, constant_value: \\'1994-01-01\\', constant_value_type: String\n-          FUNCTION id: 20, function_name: and, function_type: ordinary, result_type: UInt8\n+                          LIST id: 19, nodes: 2\n+                            COLUMN id: 16, column_name: date1, result_type: Date, source_id: 3\n+                            CONSTANT id: 20, constant_value: \\'1994-01-01\\', constant_value_type: String\n+          FUNCTION id: 21, function_name: and, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n-              LIST id: 21, nodes: 2\n-                FUNCTION id: 22, function_name: greaterOrEquals, function_type: ordinary, result_type: UInt8\n+              LIST id: 22, nodes: 2\n+                FUNCTION id: 23, function_name: greaterOrEquals, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n-                    LIST id: 23, nodes: 2\n-                      COLUMN id: 24, column_name: id, result_type: UInt32, source_id: 3\n-                      CONSTANT id: 25, constant_value: UInt64_1, constant_value_type: UInt8\n-                FUNCTION id: 26, function_name: lessOrEquals, function_type: ordinary, result_type: UInt8\n+                    LIST id: 24, nodes: 2\n+                      COLUMN id: 25, column_name: id, result_type: UInt32, source_id: 3\n+                      CONSTANT id: 26, constant_value: UInt64_1, constant_value_type: UInt8\n+                FUNCTION id: 27, function_name: lessOrEquals, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n-                    LIST id: 27, nodes: 2\n-                      COLUMN id: 24, column_name: id, result_type: UInt32, source_id: 3\n-                      CONSTANT id: 28, constant_value: UInt64_3, constant_value_type: UInt8\n+                    LIST id: 28, nodes: 2\n+                      COLUMN id: 29, column_name: id, result_type: UInt32, source_id: 3\n+                      CONSTANT id: 30, constant_value: UInt64_3, constant_value_type: UInt8\n   SETTINGS enable_analyzer=1\n SELECT value1\n FROM datetime_t\n@@ -907,8 +907,8 @@ QUERY id: 0\n                 FUNCTION id: 21, function_name: lessOrEquals, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n                     LIST id: 22, nodes: 2\n-                      COLUMN id: 19, column_name: id, result_type: UInt32, source_id: 3\n-                      CONSTANT id: 23, constant_value: UInt64_3, constant_value_type: UInt8\n+                      COLUMN id: 23, column_name: id, result_type: UInt32, source_id: 3\n+                      CONSTANT id: 24, constant_value: UInt64_3, constant_value_type: UInt8\n   SETTINGS enable_analyzer=1\n SELECT value1\n FROM datetime_t\n@@ -949,8 +949,8 @@ QUERY id: 0\n                 FUNCTION id: 21, function_name: lessOrEquals, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n                     LIST id: 22, nodes: 2\n-                      COLUMN id: 19, column_name: id, result_type: UInt32, source_id: 3\n-                      CONSTANT id: 23, constant_value: UInt64_3, constant_value_type: UInt8\n+                      COLUMN id: 23, column_name: id, result_type: UInt32, source_id: 3\n+                      CONSTANT id: 24, constant_value: UInt64_3, constant_value_type: UInt8\n   SETTINGS enable_analyzer=1\n SELECT value1\n FROM date32_t\n@@ -991,8 +991,8 @@ QUERY id: 0\n                 FUNCTION id: 21, function_name: lessOrEquals, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n                     LIST id: 22, nodes: 2\n-                      COLUMN id: 19, column_name: id, result_type: UInt32, source_id: 3\n-                      CONSTANT id: 23, constant_value: UInt64_3, constant_value_type: UInt8\n+                      COLUMN id: 23, column_name: id, result_type: UInt32, source_id: 3\n+                      CONSTANT id: 24, constant_value: UInt64_3, constant_value_type: UInt8\n   SETTINGS enable_analyzer=1\n SELECT value1\n FROM date32_t\n@@ -1033,8 +1033,8 @@ QUERY id: 0\n                 FUNCTION id: 21, function_name: lessOrEquals, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n                     LIST id: 22, nodes: 2\n-                      COLUMN id: 19, column_name: id, result_type: UInt32, source_id: 3\n-                      CONSTANT id: 23, constant_value: UInt64_3, constant_value_type: UInt8\n+                      COLUMN id: 23, column_name: id, result_type: UInt32, source_id: 3\n+                      CONSTANT id: 24, constant_value: UInt64_3, constant_value_type: UInt8\n   SETTINGS enable_analyzer=1\n SELECT value1\n FROM datetime64_t\n@@ -1075,8 +1075,8 @@ QUERY id: 0\n                 FUNCTION id: 21, function_name: lessOrEquals, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n                     LIST id: 22, nodes: 2\n-                      COLUMN id: 19, column_name: id, result_type: UInt32, source_id: 3\n-                      CONSTANT id: 23, constant_value: UInt64_3, constant_value_type: UInt8\n+                      COLUMN id: 23, column_name: id, result_type: UInt32, source_id: 3\n+                      CONSTANT id: 24, constant_value: UInt64_3, constant_value_type: UInt8\n   SETTINGS enable_analyzer=1\n SELECT value1\n FROM datetime64_t\n@@ -1117,6 +1117,6 @@ QUERY id: 0\n                 FUNCTION id: 21, function_name: lessOrEquals, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n                     LIST id: 22, nodes: 2\n-                      COLUMN id: 19, column_name: id, result_type: UInt32, source_id: 3\n-                      CONSTANT id: 23, constant_value: UInt64_3, constant_value_type: UInt8\n+                      COLUMN id: 23, column_name: id, result_type: UInt32, source_id: 3\n+                      CONSTANT id: 24, constant_value: UInt64_3, constant_value_type: UInt8\n   SETTINGS enable_analyzer=1\ndiff --git a/tests/queries/0_stateless/02815_analyzer_aggregate_functions_of_group_by_keys.reference b/tests/queries/0_stateless/02815_analyzer_aggregate_functions_of_group_by_keys.reference\nindex 84119736fe99..716b352694c8 100644\n--- a/tests/queries/0_stateless/02815_analyzer_aggregate_functions_of_group_by_keys.reference\n+++ b/tests/queries/0_stateless/02815_analyzer_aggregate_functions_of_group_by_keys.reference\n@@ -62,41 +62,41 @@ QUERY id: 0\n       FUNCTION id: 7, function_name: modulo, function_type: ordinary, result_type: UInt8\n         ARGUMENTS\n           LIST id: 8, nodes: 2\n-            COLUMN id: 4, column_name: number, result_type: UInt64, source_id: 5\n-            CONSTANT id: 9, constant_value: UInt64_3, constant_value_type: UInt8\n+            COLUMN id: 9, column_name: number, result_type: UInt64, source_id: 5\n+            CONSTANT id: 10, constant_value: UInt64_3, constant_value_type: UInt8\n   JOIN TREE\n     TABLE_FUNCTION id: 5, alias: __table1, table_function_name: numbers\n       ARGUMENTS\n-        LIST id: 10, nodes: 1\n-          CONSTANT id: 11, constant_value: UInt64_10000000, constant_value_type: UInt32\n+        LIST id: 11, nodes: 1\n+          CONSTANT id: 12, constant_value: UInt64_10000000, constant_value_type: UInt32\n   GROUP BY\n-    LIST id: 12, nodes: 2\n-      FUNCTION id: 13, function_name: modulo, function_type: ordinary, result_type: UInt8\n+    LIST id: 13, nodes: 2\n+      FUNCTION id: 14, function_name: modulo, function_type: ordinary, result_type: UInt8\n         ARGUMENTS\n-          LIST id: 14, nodes: 2\n-            COLUMN id: 4, column_name: number, result_type: UInt64, source_id: 5\n-            CONSTANT id: 15, constant_value: UInt64_2, constant_value_type: UInt8\n-      FUNCTION id: 16, function_name: modulo, function_type: ordinary, result_type: UInt8\n+          LIST id: 15, nodes: 2\n+            COLUMN id: 16, column_name: number, result_type: UInt64, source_id: 5\n+            CONSTANT id: 17, constant_value: UInt64_2, constant_value_type: UInt8\n+      FUNCTION id: 18, function_name: modulo, function_type: ordinary, result_type: UInt8\n         ARGUMENTS\n-          LIST id: 17, nodes: 2\n-            COLUMN id: 4, column_name: number, result_type: UInt64, source_id: 5\n-            CONSTANT id: 18, constant_value: UInt64_3, constant_value_type: UInt8\n+          LIST id: 19, nodes: 2\n+            COLUMN id: 20, column_name: number, result_type: UInt64, source_id: 5\n+            CONSTANT id: 21, constant_value: UInt64_3, constant_value_type: UInt8\n   ORDER BY\n-    LIST id: 19, nodes: 2\n-      SORT id: 20, sort_direction: ASCENDING, with_fill: 0\n+    LIST id: 22, nodes: 2\n+      SORT id: 23, sort_direction: ASCENDING, with_fill: 0\n         EXPRESSION\n-          FUNCTION id: 2, function_name: modulo, function_type: ordinary, result_type: UInt8\n+          FUNCTION id: 24, function_name: modulo, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n-              LIST id: 3, nodes: 2\n-                COLUMN id: 4, column_name: number, result_type: UInt64, source_id: 5\n-                CONSTANT id: 6, constant_value: UInt64_2, constant_value_type: UInt8\n-      SORT id: 21, sort_direction: ASCENDING, with_fill: 0\n+              LIST id: 25, nodes: 2\n+                COLUMN id: 26, column_name: number, result_type: UInt64, source_id: 5\n+                CONSTANT id: 27, constant_value: UInt64_2, constant_value_type: UInt8\n+      SORT id: 28, sort_direction: ASCENDING, with_fill: 0\n         EXPRESSION\n-          FUNCTION id: 7, function_name: modulo, function_type: ordinary, result_type: UInt8\n+          FUNCTION id: 29, function_name: modulo, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n-              LIST id: 8, nodes: 2\n-                COLUMN id: 4, column_name: number, result_type: UInt64, source_id: 5\n-                CONSTANT id: 9, constant_value: UInt64_3, constant_value_type: UInt8\n+              LIST id: 30, nodes: 2\n+                COLUMN id: 31, column_name: number, result_type: UInt64, source_id: 5\n+                CONSTANT id: 32, constant_value: UInt64_3, constant_value_type: UInt8\n QUERY id: 0\n   PROJECTION COLUMNS\n     a UInt8\n@@ -111,41 +111,41 @@ QUERY id: 0\n       FUNCTION id: 7, function_name: modulo, function_type: ordinary, result_type: UInt8\n         ARGUMENTS\n           LIST id: 8, nodes: 2\n-            COLUMN id: 4, column_name: number, result_type: UInt64, source_id: 5\n-            CONSTANT id: 9, constant_value: UInt64_3, constant_value_type: UInt8\n+            COLUMN id: 9, column_name: number, result_type: UInt64, source_id: 5\n+            CONSTANT id: 10, constant_value: UInt64_3, constant_value_type: UInt8\n   JOIN TREE\n     TABLE_FUNCTION id: 5, alias: __table1, table_function_name: numbers\n       ARGUMENTS\n-        LIST id: 10, nodes: 1\n-          CONSTANT id: 11, constant_value: UInt64_10000000, constant_value_type: UInt32\n+        LIST id: 11, nodes: 1\n+          CONSTANT id: 12, constant_value: UInt64_10000000, constant_value_type: UInt32\n   GROUP BY\n-    LIST id: 12, nodes: 2\n-      FUNCTION id: 13, function_name: modulo, function_type: ordinary, result_type: UInt8\n+    LIST id: 13, nodes: 2\n+      FUNCTION id: 14, function_name: modulo, function_type: ordinary, result_type: UInt8\n         ARGUMENTS\n-          LIST id: 14, nodes: 2\n-            COLUMN id: 4, column_name: number, result_type: UInt64, source_id: 5\n-            CONSTANT id: 15, constant_value: UInt64_2, constant_value_type: UInt8\n-      FUNCTION id: 16, function_name: modulo, function_type: ordinary, result_type: UInt8\n+          LIST id: 15, nodes: 2\n+            COLUMN id: 16, column_name: number, result_type: UInt64, source_id: 5\n+            CONSTANT id: 17, constant_value: UInt64_2, constant_value_type: UInt8\n+      FUNCTION id: 18, function_name: modulo, function_type: ordinary, result_type: UInt8\n         ARGUMENTS\n-          LIST id: 17, nodes: 2\n-            COLUMN id: 4, column_name: number, result_type: UInt64, source_id: 5\n-            CONSTANT id: 18, constant_value: UInt64_3, constant_value_type: UInt8\n+          LIST id: 19, nodes: 2\n+            COLUMN id: 20, column_name: number, result_type: UInt64, source_id: 5\n+            CONSTANT id: 21, constant_value: UInt64_3, constant_value_type: UInt8\n   ORDER BY\n-    LIST id: 19, nodes: 2\n-      SORT id: 20, sort_direction: ASCENDING, with_fill: 0\n+    LIST id: 22, nodes: 2\n+      SORT id: 23, sort_direction: ASCENDING, with_fill: 0\n         EXPRESSION\n-          FUNCTION id: 2, function_name: modulo, function_type: ordinary, result_type: UInt8\n+          FUNCTION id: 24, function_name: modulo, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n-              LIST id: 3, nodes: 2\n-                COLUMN id: 4, column_name: number, result_type: UInt64, source_id: 5\n-                CONSTANT id: 6, constant_value: UInt64_2, constant_value_type: UInt8\n-      SORT id: 21, sort_direction: ASCENDING, with_fill: 0\n+              LIST id: 25, nodes: 2\n+                COLUMN id: 26, column_name: number, result_type: UInt64, source_id: 5\n+                CONSTANT id: 27, constant_value: UInt64_2, constant_value_type: UInt8\n+      SORT id: 28, sort_direction: ASCENDING, with_fill: 0\n         EXPRESSION\n-          FUNCTION id: 7, function_name: modulo, function_type: ordinary, result_type: UInt8\n+          FUNCTION id: 29, function_name: modulo, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n-              LIST id: 8, nodes: 2\n-                COLUMN id: 4, column_name: number, result_type: UInt64, source_id: 5\n-                CONSTANT id: 9, constant_value: UInt64_3, constant_value_type: UInt8\n+              LIST id: 30, nodes: 2\n+                COLUMN id: 31, column_name: number, result_type: UInt64, source_id: 5\n+                CONSTANT id: 32, constant_value: UInt64_3, constant_value_type: UInt8\n QUERY id: 0\n   PROJECTION COLUMNS\n     a UInt16\n@@ -162,42 +162,42 @@ QUERY id: 0\n             FUNCTION id: 9, function_name: modulo, function_type: ordinary, result_type: UInt8\n               ARGUMENTS\n                 LIST id: 10, nodes: 2\n-                  COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                  CONSTANT id: 11, constant_value: UInt64_7, constant_value_type: UInt8\n+                  COLUMN id: 11, column_name: number, result_type: UInt64, source_id: 7\n+                  CONSTANT id: 12, constant_value: UInt64_7, constant_value_type: UInt8\n   JOIN TREE\n     TABLE_FUNCTION id: 7, alias: __table1, table_function_name: numbers\n       ARGUMENTS\n-        LIST id: 12, nodes: 1\n-          CONSTANT id: 13, constant_value: UInt64_10000000, constant_value_type: UInt32\n+        LIST id: 13, nodes: 1\n+          CONSTANT id: 14, constant_value: UInt64_10000000, constant_value_type: UInt32\n   GROUP BY\n-    LIST id: 14, nodes: 2\n-      FUNCTION id: 15, function_name: modulo, function_type: ordinary, result_type: UInt8\n+    LIST id: 15, nodes: 2\n+      FUNCTION id: 16, function_name: modulo, function_type: ordinary, result_type: UInt8\n         ARGUMENTS\n-          LIST id: 16, nodes: 2\n-            COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-            CONSTANT id: 17, constant_value: UInt64_7, constant_value_type: UInt8\n-      FUNCTION id: 18, function_name: modulo, function_type: ordinary, result_type: UInt8\n+          LIST id: 17, nodes: 2\n+            COLUMN id: 18, column_name: number, result_type: UInt64, source_id: 7\n+            CONSTANT id: 19, constant_value: UInt64_7, constant_value_type: UInt8\n+      FUNCTION id: 20, function_name: modulo, function_type: ordinary, result_type: UInt8\n         ARGUMENTS\n-          LIST id: 19, nodes: 2\n-            COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-            CONSTANT id: 20, constant_value: UInt64_5, constant_value_type: UInt8\n+          LIST id: 21, nodes: 2\n+            COLUMN id: 22, column_name: number, result_type: UInt64, source_id: 7\n+            CONSTANT id: 23, constant_value: UInt64_5, constant_value_type: UInt8\n   ORDER BY\n-    LIST id: 21, nodes: 1\n-      SORT id: 22, sort_direction: ASCENDING, with_fill: 0\n+    LIST id: 24, nodes: 1\n+      SORT id: 25, sort_direction: ASCENDING, with_fill: 0\n         EXPRESSION\n-          FUNCTION id: 2, function_name: multiply, function_type: ordinary, result_type: UInt16\n+          FUNCTION id: 26, function_name: multiply, function_type: ordinary, result_type: UInt16\n             ARGUMENTS\n-              LIST id: 3, nodes: 2\n-                FUNCTION id: 4, function_name: modulo, function_type: ordinary, result_type: UInt8\n+              LIST id: 27, nodes: 2\n+                FUNCTION id: 28, function_name: modulo, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n-                    LIST id: 5, nodes: 2\n-                      COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                      CONSTANT id: 8, constant_value: UInt64_5, constant_value_type: UInt8\n-                FUNCTION id: 9, function_name: modulo, function_type: ordinary, result_type: UInt8\n+                    LIST id: 29, nodes: 2\n+                      COLUMN id: 30, column_name: number, result_type: UInt64, source_id: 7\n+                      CONSTANT id: 31, constant_value: UInt64_5, constant_value_type: UInt8\n+                FUNCTION id: 32, function_name: modulo, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n-                    LIST id: 10, nodes: 2\n-                      COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                      CONSTANT id: 11, constant_value: UInt64_7, constant_value_type: UInt8\n+                    LIST id: 33, nodes: 2\n+                      COLUMN id: 34, column_name: number, result_type: UInt64, source_id: 7\n+                      CONSTANT id: 35, constant_value: UInt64_7, constant_value_type: UInt8\n QUERY id: 0\n   PROJECTION COLUMNS\n     foo UInt64\n@@ -218,7 +218,7 @@ QUERY id: 0\n               CONSTANT id: 8, constant_value: UInt64_1, constant_value_type: UInt8\n       GROUP BY\n         LIST id: 9, nodes: 1\n-          COLUMN id: 5, column_name: number, result_type: UInt64, source_id: 6\n+          COLUMN id: 10, column_name: number, result_type: UInt64, source_id: 6\n QUERY id: 0\n   PROJECTION COLUMNS\n     min(number) OVER (PARTITION BY modulo(number, 2)) UInt64\n@@ -235,16 +235,16 @@ QUERY id: 0\n                 FUNCTION id: 8, function_name: modulo, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n                     LIST id: 9, nodes: 2\n-                      COLUMN id: 4, column_name: number, result_type: UInt64, source_id: 5\n-                      CONSTANT id: 10, constant_value: UInt64_2, constant_value_type: UInt8\n+                      COLUMN id: 10, column_name: number, result_type: UInt64, source_id: 5\n+                      CONSTANT id: 11, constant_value: UInt64_2, constant_value_type: UInt8\n   JOIN TREE\n     TABLE_FUNCTION id: 5, alias: __table1, table_function_name: numbers\n       ARGUMENTS\n-        LIST id: 11, nodes: 1\n-          CONSTANT id: 12, constant_value: UInt64_3, constant_value_type: UInt8\n+        LIST id: 12, nodes: 1\n+          CONSTANT id: 13, constant_value: UInt64_3, constant_value_type: UInt8\n   GROUP BY\n-    LIST id: 13, nodes: 1\n-      COLUMN id: 4, column_name: number, result_type: UInt64, source_id: 5\n+    LIST id: 14, nodes: 1\n+      COLUMN id: 15, column_name: number, result_type: UInt64, source_id: 5\n set optimize_aggregators_of_group_by_keys = 0\n 0\t0\n 0\t1\n@@ -314,47 +314,47 @@ QUERY id: 0\n             FUNCTION id: 11, function_name: modulo, function_type: ordinary, result_type: UInt8\n               ARGUMENTS\n                 LIST id: 12, nodes: 2\n-                  COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                  CONSTANT id: 13, constant_value: UInt64_3, constant_value_type: UInt8\n+                  COLUMN id: 13, column_name: number, result_type: UInt64, source_id: 7\n+                  CONSTANT id: 14, constant_value: UInt64_3, constant_value_type: UInt8\n   JOIN TREE\n     TABLE_FUNCTION id: 7, alias: __table1, table_function_name: numbers\n       ARGUMENTS\n-        LIST id: 14, nodes: 1\n-          CONSTANT id: 15, constant_value: UInt64_10000000, constant_value_type: UInt32\n+        LIST id: 15, nodes: 1\n+          CONSTANT id: 16, constant_value: UInt64_10000000, constant_value_type: UInt32\n   GROUP BY\n-    LIST id: 16, nodes: 2\n-      FUNCTION id: 17, function_name: modulo, function_type: ordinary, result_type: UInt8\n+    LIST id: 17, nodes: 2\n+      FUNCTION id: 18, function_name: modulo, function_type: ordinary, result_type: UInt8\n         ARGUMENTS\n-          LIST id: 18, nodes: 2\n-            COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-            CONSTANT id: 19, constant_value: UInt64_2, constant_value_type: UInt8\n-      FUNCTION id: 20, function_name: modulo, function_type: ordinary, result_type: UInt8\n+          LIST id: 19, nodes: 2\n+            COLUMN id: 20, column_name: number, result_type: UInt64, source_id: 7\n+            CONSTANT id: 21, constant_value: UInt64_2, constant_value_type: UInt8\n+      FUNCTION id: 22, function_name: modulo, function_type: ordinary, result_type: UInt8\n         ARGUMENTS\n-          LIST id: 21, nodes: 2\n-            COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-            CONSTANT id: 22, constant_value: UInt64_3, constant_value_type: UInt8\n+          LIST id: 23, nodes: 2\n+            COLUMN id: 24, column_name: number, result_type: UInt64, source_id: 7\n+            CONSTANT id: 25, constant_value: UInt64_3, constant_value_type: UInt8\n   ORDER BY\n-    LIST id: 23, nodes: 2\n-      SORT id: 24, sort_direction: ASCENDING, with_fill: 0\n+    LIST id: 26, nodes: 2\n+      SORT id: 27, sort_direction: ASCENDING, with_fill: 0\n         EXPRESSION\n-          FUNCTION id: 2, function_name: min, function_type: aggregate, result_type: UInt8\n+          FUNCTION id: 28, function_name: min, function_type: aggregate, result_type: UInt8\n             ARGUMENTS\n-              LIST id: 3, nodes: 1\n-                FUNCTION id: 4, function_name: modulo, function_type: ordinary, result_type: UInt8\n+              LIST id: 29, nodes: 1\n+                FUNCTION id: 30, function_name: modulo, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n-                    LIST id: 5, nodes: 2\n-                      COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                      CONSTANT id: 8, constant_value: UInt64_2, constant_value_type: UInt8\n-      SORT id: 25, sort_direction: ASCENDING, with_fill: 0\n+                    LIST id: 31, nodes: 2\n+                      COLUMN id: 32, column_name: number, result_type: UInt64, source_id: 7\n+                      CONSTANT id: 33, constant_value: UInt64_2, constant_value_type: UInt8\n+      SORT id: 34, sort_direction: ASCENDING, with_fill: 0\n         EXPRESSION\n-          FUNCTION id: 9, function_name: max, function_type: aggregate, result_type: UInt8\n+          FUNCTION id: 35, function_name: max, function_type: aggregate, result_type: UInt8\n             ARGUMENTS\n-              LIST id: 10, nodes: 1\n-                FUNCTION id: 11, function_name: modulo, function_type: ordinary, result_type: UInt8\n+              LIST id: 36, nodes: 1\n+                FUNCTION id: 37, function_name: modulo, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n-                    LIST id: 12, nodes: 2\n-                      COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                      CONSTANT id: 13, constant_value: UInt64_3, constant_value_type: UInt8\n+                    LIST id: 38, nodes: 2\n+                      COLUMN id: 39, column_name: number, result_type: UInt64, source_id: 7\n+                      CONSTANT id: 40, constant_value: UInt64_3, constant_value_type: UInt8\n QUERY id: 0\n   PROJECTION COLUMNS\n     a UInt8\n@@ -375,47 +375,47 @@ QUERY id: 0\n             FUNCTION id: 11, function_name: modulo, function_type: ordinary, result_type: UInt8\n               ARGUMENTS\n                 LIST id: 12, nodes: 2\n-                  COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                  CONSTANT id: 13, constant_value: UInt64_3, constant_value_type: UInt8\n+                  COLUMN id: 13, column_name: number, result_type: UInt64, source_id: 7\n+                  CONSTANT id: 14, constant_value: UInt64_3, constant_value_type: UInt8\n   JOIN TREE\n     TABLE_FUNCTION id: 7, alias: __table1, table_function_name: numbers\n       ARGUMENTS\n-        LIST id: 14, nodes: 1\n-          CONSTANT id: 15, constant_value: UInt64_10000000, constant_value_type: UInt32\n+        LIST id: 15, nodes: 1\n+          CONSTANT id: 16, constant_value: UInt64_10000000, constant_value_type: UInt32\n   GROUP BY\n-    LIST id: 16, nodes: 2\n-      FUNCTION id: 17, function_name: modulo, function_type: ordinary, result_type: UInt8\n+    LIST id: 17, nodes: 2\n+      FUNCTION id: 18, function_name: modulo, function_type: ordinary, result_type: UInt8\n         ARGUMENTS\n-          LIST id: 18, nodes: 2\n-            COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-            CONSTANT id: 19, constant_value: UInt64_2, constant_value_type: UInt8\n-      FUNCTION id: 20, function_name: modulo, function_type: ordinary, result_type: UInt8\n+          LIST id: 19, nodes: 2\n+            COLUMN id: 20, column_name: number, result_type: UInt64, source_id: 7\n+            CONSTANT id: 21, constant_value: UInt64_2, constant_value_type: UInt8\n+      FUNCTION id: 22, function_name: modulo, function_type: ordinary, result_type: UInt8\n         ARGUMENTS\n-          LIST id: 21, nodes: 2\n-            COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-            CONSTANT id: 22, constant_value: UInt64_3, constant_value_type: UInt8\n+          LIST id: 23, nodes: 2\n+            COLUMN id: 24, column_name: number, result_type: UInt64, source_id: 7\n+            CONSTANT id: 25, constant_value: UInt64_3, constant_value_type: UInt8\n   ORDER BY\n-    LIST id: 23, nodes: 2\n-      SORT id: 24, sort_direction: ASCENDING, with_fill: 0\n+    LIST id: 26, nodes: 2\n+      SORT id: 27, sort_direction: ASCENDING, with_fill: 0\n         EXPRESSION\n-          FUNCTION id: 2, function_name: any, function_type: aggregate, result_type: UInt8\n+          FUNCTION id: 28, function_name: any, function_type: aggregate, result_type: UInt8\n             ARGUMENTS\n-              LIST id: 3, nodes: 1\n-                FUNCTION id: 4, function_name: modulo, function_type: ordinary, result_type: UInt8\n+              LIST id: 29, nodes: 1\n+                FUNCTION id: 30, function_name: modulo, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n-                    LIST id: 5, nodes: 2\n-                      COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                      CONSTANT id: 8, constant_value: UInt64_2, constant_value_type: UInt8\n-      SORT id: 25, sort_direction: ASCENDING, with_fill: 0\n+                    LIST id: 31, nodes: 2\n+                      COLUMN id: 32, column_name: number, result_type: UInt64, source_id: 7\n+                      CONSTANT id: 33, constant_value: UInt64_2, constant_value_type: UInt8\n+      SORT id: 34, sort_direction: ASCENDING, with_fill: 0\n         EXPRESSION\n-          FUNCTION id: 9, function_name: anyLast, function_type: aggregate, result_type: UInt8\n+          FUNCTION id: 35, function_name: anyLast, function_type: aggregate, result_type: UInt8\n             ARGUMENTS\n-              LIST id: 10, nodes: 1\n-                FUNCTION id: 11, function_name: modulo, function_type: ordinary, result_type: UInt8\n+              LIST id: 36, nodes: 1\n+                FUNCTION id: 37, function_name: modulo, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n-                    LIST id: 12, nodes: 2\n-                      COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                      CONSTANT id: 13, constant_value: UInt64_3, constant_value_type: UInt8\n+                    LIST id: 38, nodes: 2\n+                      COLUMN id: 39, column_name: number, result_type: UInt64, source_id: 7\n+                      CONSTANT id: 40, constant_value: UInt64_3, constant_value_type: UInt8\n QUERY id: 0\n   PROJECTION COLUMNS\n     a UInt16\n@@ -435,45 +435,45 @@ QUERY id: 0\n                   FUNCTION id: 11, function_name: modulo, function_type: ordinary, result_type: UInt8\n                     ARGUMENTS\n                       LIST id: 12, nodes: 2\n-                        COLUMN id: 8, column_name: number, result_type: UInt64, source_id: 9\n-                        CONSTANT id: 13, constant_value: UInt64_7, constant_value_type: UInt8\n+                        COLUMN id: 13, column_name: number, result_type: UInt64, source_id: 9\n+                        CONSTANT id: 14, constant_value: UInt64_7, constant_value_type: UInt8\n   JOIN TREE\n     TABLE_FUNCTION id: 9, alias: __table1, table_function_name: numbers\n       ARGUMENTS\n-        LIST id: 14, nodes: 1\n-          CONSTANT id: 15, constant_value: UInt64_10000000, constant_value_type: UInt32\n+        LIST id: 15, nodes: 1\n+          CONSTANT id: 16, constant_value: UInt64_10000000, constant_value_type: UInt32\n   GROUP BY\n-    LIST id: 16, nodes: 2\n-      FUNCTION id: 17, function_name: modulo, function_type: ordinary, result_type: UInt8\n+    LIST id: 17, nodes: 2\n+      FUNCTION id: 18, function_name: modulo, function_type: ordinary, result_type: UInt8\n         ARGUMENTS\n-          LIST id: 18, nodes: 2\n-            COLUMN id: 8, column_name: number, result_type: UInt64, source_id: 9\n-            CONSTANT id: 19, constant_value: UInt64_7, constant_value_type: UInt8\n-      FUNCTION id: 20, function_name: modulo, function_type: ordinary, result_type: UInt8\n+          LIST id: 19, nodes: 2\n+            COLUMN id: 20, column_name: number, result_type: UInt64, source_id: 9\n+            CONSTANT id: 21, constant_value: UInt64_7, constant_value_type: UInt8\n+      FUNCTION id: 22, function_name: modulo, function_type: ordinary, result_type: UInt8\n         ARGUMENTS\n-          LIST id: 21, nodes: 2\n-            COLUMN id: 8, column_name: number, result_type: UInt64, source_id: 9\n-            CONSTANT id: 22, constant_value: UInt64_5, constant_value_type: UInt8\n+          LIST id: 23, nodes: 2\n+            COLUMN id: 24, column_name: number, result_type: UInt64, source_id: 9\n+            CONSTANT id: 25, constant_value: UInt64_5, constant_value_type: UInt8\n   ORDER BY\n-    LIST id: 23, nodes: 1\n-      SORT id: 24, sort_direction: ASCENDING, with_fill: 0\n+    LIST id: 26, nodes: 1\n+      SORT id: 27, sort_direction: ASCENDING, with_fill: 0\n         EXPRESSION\n-          FUNCTION id: 2, function_name: max, function_type: aggregate, result_type: UInt16\n+          FUNCTION id: 28, function_name: max, function_type: aggregate, result_type: UInt16\n             ARGUMENTS\n-              LIST id: 3, nodes: 1\n-                FUNCTION id: 4, function_name: multiply, function_type: ordinary, result_type: UInt16\n+              LIST id: 29, nodes: 1\n+                FUNCTION id: 30, function_name: multiply, function_type: ordinary, result_type: UInt16\n                   ARGUMENTS\n-                    LIST id: 5, nodes: 2\n-                      FUNCTION id: 6, function_name: modulo, function_type: ordinary, result_type: UInt8\n+                    LIST id: 31, nodes: 2\n+                      FUNCTION id: 32, function_name: modulo, function_type: ordinary, result_type: UInt8\n                         ARGUMENTS\n-                          LIST id: 7, nodes: 2\n-                            COLUMN id: 8, column_name: number, result_type: UInt64, source_id: 9\n-                            CONSTANT id: 10, constant_value: UInt64_5, constant_value_type: UInt8\n-                      FUNCTION id: 11, function_name: modulo, function_type: ordinary, result_type: UInt8\n+                          LIST id: 33, nodes: 2\n+                            COLUMN id: 34, column_name: number, result_type: UInt64, source_id: 9\n+                            CONSTANT id: 35, constant_value: UInt64_5, constant_value_type: UInt8\n+                      FUNCTION id: 36, function_name: modulo, function_type: ordinary, result_type: UInt8\n                         ARGUMENTS\n-                          LIST id: 12, nodes: 2\n-                            COLUMN id: 8, column_name: number, result_type: UInt64, source_id: 9\n-                            CONSTANT id: 13, constant_value: UInt64_7, constant_value_type: UInt8\n+                          LIST id: 37, nodes: 2\n+                            COLUMN id: 38, column_name: number, result_type: UInt64, source_id: 9\n+                            CONSTANT id: 39, constant_value: UInt64_7, constant_value_type: UInt8\n QUERY id: 0\n   PROJECTION COLUMNS\n     foo UInt64\n@@ -497,7 +497,7 @@ QUERY id: 0\n               CONSTANT id: 10, constant_value: UInt64_1, constant_value_type: UInt8\n       GROUP BY\n         LIST id: 11, nodes: 1\n-          COLUMN id: 7, column_name: number, result_type: UInt64, source_id: 8\n+          COLUMN id: 12, column_name: number, result_type: UInt64, source_id: 8\n QUERY id: 0\n   PROJECTION COLUMNS\n     min(number) OVER (PARTITION BY modulo(number, 2)) UInt64\n@@ -514,13 +514,13 @@ QUERY id: 0\n                 FUNCTION id: 8, function_name: modulo, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n                     LIST id: 9, nodes: 2\n-                      COLUMN id: 4, column_name: number, result_type: UInt64, source_id: 5\n-                      CONSTANT id: 10, constant_value: UInt64_2, constant_value_type: UInt8\n+                      COLUMN id: 10, column_name: number, result_type: UInt64, source_id: 5\n+                      CONSTANT id: 11, constant_value: UInt64_2, constant_value_type: UInt8\n   JOIN TREE\n     TABLE_FUNCTION id: 5, alias: __table1, table_function_name: numbers\n       ARGUMENTS\n-        LIST id: 11, nodes: 1\n-          CONSTANT id: 12, constant_value: UInt64_3, constant_value_type: UInt8\n+        LIST id: 12, nodes: 1\n+          CONSTANT id: 13, constant_value: UInt64_3, constant_value_type: UInt8\n   GROUP BY\n-    LIST id: 13, nodes: 1\n-      COLUMN id: 4, column_name: number, result_type: UInt64, source_id: 5\n+    LIST id: 14, nodes: 1\n+      COLUMN id: 15, column_name: number, result_type: UInt64, source_id: 5\ndiff --git a/tests/queries/0_stateless/02868_distinct_to_count_optimization.reference b/tests/queries/0_stateless/02868_distinct_to_count_optimization.reference\nindex 3dedcedbceee..e160e7f33587 100644\n--- a/tests/queries/0_stateless/02868_distinct_to_count_optimization.reference\n+++ b/tests/queries/0_stateless/02868_distinct_to_count_optimization.reference\n@@ -132,7 +132,7 @@ QUERY id: 0\n         TABLE id: 6, alias: __table2, table_name: default.test_rewrite_uniq_to_count\n       GROUP BY\n         LIST id: 7, nodes: 1\n-          COLUMN id: 5, column_name: a, result_type: UInt8, source_id: 6\n+          COLUMN id: 8, column_name: a, result_type: UInt8, source_id: 6\n   SETTINGS enable_analyzer=1\n 6. test group by with subquery alias\n 3\n@@ -164,7 +164,7 @@ QUERY id: 0\n         TABLE id: 6, alias: __table2, table_name: default.test_rewrite_uniq_to_count\n       GROUP BY\n         LIST id: 7, nodes: 1\n-          COLUMN id: 5, column_name: a, result_type: UInt8, source_id: 6\n+          COLUMN id: 8, column_name: a, result_type: UInt8, source_id: 6\n   SETTINGS enable_analyzer=1\n 7. test group by with compound column name\n 3\n@@ -196,7 +196,7 @@ QUERY id: 0\n         TABLE id: 6, alias: __table2, table_name: default.test_rewrite_uniq_to_count\n       GROUP BY\n         LIST id: 7, nodes: 1\n-          COLUMN id: 5, column_name: a, result_type: UInt8, source_id: 6\n+          COLUMN id: 8, column_name: a, result_type: UInt8, source_id: 6\n   SETTINGS enable_analyzer=1\n 8. test group by with select expression alias\n 3\n@@ -228,5 +228,5 @@ QUERY id: 0\n         TABLE id: 6, alias: __table2, table_name: default.test_rewrite_uniq_to_count\n       GROUP BY\n         LIST id: 7, nodes: 1\n-          COLUMN id: 5, column_name: a, result_type: UInt8, source_id: 6\n+          COLUMN id: 8, column_name: a, result_type: UInt8, source_id: 6\n   SETTINGS enable_analyzer=1\ndiff --git a/tests/queries/0_stateless/02896_cyclic_aliases_crash.sql b/tests/queries/0_stateless/02896_cyclic_aliases_crash.sql\nindex 5440872e0524..04e2c254a319 100644\n--- a/tests/queries/0_stateless/02896_cyclic_aliases_crash.sql\n+++ b/tests/queries/0_stateless/02896_cyclic_aliases_crash.sql\n@@ -6,7 +6,7 @@ SELECT\n     val + 1 as prev,\n     val + prev as val\n FROM ( SELECT 1 as val )\n-; -- { serverError CYCLIC_ALIASES, TOO_DEEP_RECURSION }\n+; -- { serverError CYCLIC_ALIASES, UNKNOWN_IDENTIFIER, TOO_DEEP_RECURSION }\n \n \n SELECT\ndiff --git a/tests/queries/0_stateless/02932_analyzer_rewrite_sum_column_and_constant.reference b/tests/queries/0_stateless/02932_analyzer_rewrite_sum_column_and_constant.reference\nindex b41635f014ea..3d19359eb2ee 100644\n--- a/tests/queries/0_stateless/02932_analyzer_rewrite_sum_column_and_constant.reference\n+++ b/tests/queries/0_stateless/02932_analyzer_rewrite_sum_column_and_constant.reference\n@@ -130,7 +130,7 @@ QUERY id: 0\n                   COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n                   CONSTANT id: 8, constant_value: UInt64_1, constant_value_type: Nullable(UInt64)\n                     EXPRESSION\n-                      FUNCTION id: 9, alias: my_literal, function_name: CAST, function_type: ordinary, result_type: Nullable(UInt64)\n+                      FUNCTION id: 9, function_name: CAST, function_type: ordinary, result_type: Nullable(UInt64)\n                         ARGUMENTS\n                           LIST id: 10, nodes: 2\n                             CONSTANT id: 11, constant_value: \\'1\\', constant_value_type: String\n@@ -158,7 +158,7 @@ QUERY id: 0\n                 LIST id: 9, nodes: 2\n                   CONSTANT id: 10, constant_value: UInt64_1, constant_value_type: Nullable(UInt64)\n                     EXPRESSION\n-                      FUNCTION id: 11, alias: my_literal, function_name: CAST, function_type: ordinary, result_type: Nullable(UInt64)\n+                      FUNCTION id: 11, function_name: CAST, function_type: ordinary, result_type: Nullable(UInt64)\n                         ARGUMENTS\n                           LIST id: 12, nodes: 2\n                             CONSTANT id: 13, constant_value: \\'1\\', constant_value_type: String\n@@ -210,9 +210,9 @@ QUERY id: 0\n           FUNCTION id: 15, function_name: plus, function_type: ordinary, result_type: UInt64\n             ARGUMENTS\n               LIST id: 16, nodes: 2\n-                COLUMN id: 6, column_name: uint64, result_type: UInt64, source_id: 7\n-                CONSTANT id: 10, constant_value: UInt64_1, constant_value_type: UInt8\n-          CONSTANT id: 17, constant_value: UInt64_0, constant_value_type: UInt8\n+                COLUMN id: 17, column_name: uint64, result_type: UInt64, source_id: 7\n+                CONSTANT id: 18, constant_value: UInt64_1, constant_value_type: UInt8\n+          CONSTANT id: 19, constant_value: UInt64_0, constant_value_type: UInt8\n EXPLAIN QUERY TREE (SELECT sum(uint64 + 1) AS j from test_table having j > 0);\n QUERY id: 0\n   PROJECTION COLUMNS\n@@ -246,16 +246,16 @@ QUERY id: 0\n                 FUNCTION id: 17, function_name: sum, function_type: aggregate, result_type: UInt64\n                   ARGUMENTS\n                     LIST id: 18, nodes: 1\n-                      COLUMN id: 6, column_name: uint64, result_type: UInt64, source_id: 7\n-                FUNCTION id: 19, function_name: multiply, function_type: ordinary, result_type: UInt64\n+                      COLUMN id: 19, column_name: uint64, result_type: UInt64, source_id: 7\n+                FUNCTION id: 20, function_name: multiply, function_type: ordinary, result_type: UInt64\n                   ARGUMENTS\n-                    LIST id: 20, nodes: 2\n-                      CONSTANT id: 10, constant_value: UInt64_1, constant_value_type: UInt8\n-                      FUNCTION id: 21, function_name: count, function_type: aggregate, result_type: UInt64\n+                    LIST id: 21, nodes: 2\n+                      CONSTANT id: 22, constant_value: UInt64_1, constant_value_type: UInt8\n+                      FUNCTION id: 23, function_name: count, function_type: aggregate, result_type: UInt64\n                         ARGUMENTS\n-                          LIST id: 22, nodes: 1\n-                            COLUMN id: 6, column_name: uint64, result_type: UInt64, source_id: 7\n-          CONSTANT id: 23, constant_value: UInt64_0, constant_value_type: UInt8\n+                          LIST id: 24, nodes: 1\n+                            COLUMN id: 19, column_name: uint64, result_type: UInt64, source_id: 7\n+          CONSTANT id: 25, constant_value: UInt64_0, constant_value_type: UInt8\n EXPLAIN QUERY TREE (SELECT sum(uint64 + 1 AS i) j from test_table where i > 0 having j > 0);\n QUERY id: 0\n   PROJECTION COLUMNS\n@@ -286,29 +286,29 @@ QUERY id: 0\n           FUNCTION id: 15, function_name: plus, function_type: ordinary, result_type: UInt64\n             ARGUMENTS\n               LIST id: 16, nodes: 2\n-                COLUMN id: 6, column_name: uint64, result_type: UInt64, source_id: 7\n-                CONSTANT id: 10, constant_value: UInt64_1, constant_value_type: UInt8\n-          CONSTANT id: 17, constant_value: UInt64_0, constant_value_type: UInt8\n+                COLUMN id: 17, column_name: uint64, result_type: UInt64, source_id: 7\n+                CONSTANT id: 18, constant_value: UInt64_1, constant_value_type: UInt8\n+          CONSTANT id: 19, constant_value: UInt64_0, constant_value_type: UInt8\n   HAVING\n-    FUNCTION id: 18, function_name: greater, function_type: ordinary, result_type: UInt8\n+    FUNCTION id: 20, function_name: greater, function_type: ordinary, result_type: UInt8\n       ARGUMENTS\n-        LIST id: 19, nodes: 2\n-          FUNCTION id: 20, function_name: plus, function_type: ordinary, result_type: UInt64\n+        LIST id: 21, nodes: 2\n+          FUNCTION id: 22, function_name: plus, function_type: ordinary, result_type: UInt64\n             ARGUMENTS\n-              LIST id: 21, nodes: 2\n-                FUNCTION id: 22, function_name: sum, function_type: aggregate, result_type: UInt64\n+              LIST id: 23, nodes: 2\n+                FUNCTION id: 24, function_name: sum, function_type: aggregate, result_type: UInt64\n                   ARGUMENTS\n-                    LIST id: 23, nodes: 1\n-                      COLUMN id: 6, column_name: uint64, result_type: UInt64, source_id: 7\n-                FUNCTION id: 24, function_name: multiply, function_type: ordinary, result_type: UInt64\n+                    LIST id: 25, nodes: 1\n+                      COLUMN id: 26, column_name: uint64, result_type: UInt64, source_id: 7\n+                FUNCTION id: 27, function_name: multiply, function_type: ordinary, result_type: UInt64\n                   ARGUMENTS\n-                    LIST id: 25, nodes: 2\n-                      CONSTANT id: 10, constant_value: UInt64_1, constant_value_type: UInt8\n-                      FUNCTION id: 26, function_name: count, function_type: aggregate, result_type: UInt64\n+                    LIST id: 28, nodes: 2\n+                      CONSTANT id: 29, constant_value: UInt64_1, constant_value_type: UInt8\n+                      FUNCTION id: 30, function_name: count, function_type: aggregate, result_type: UInt64\n                         ARGUMENTS\n-                          LIST id: 27, nodes: 1\n-                            COLUMN id: 6, column_name: uint64, result_type: UInt64, source_id: 7\n-          CONSTANT id: 28, constant_value: UInt64_0, constant_value_type: UInt8\n+                          LIST id: 31, nodes: 1\n+                            COLUMN id: 26, column_name: uint64, result_type: UInt64, source_id: 7\n+          CONSTANT id: 32, constant_value: UInt64_0, constant_value_type: UInt8\n EXPLAIN QUERY TREE (SELECT sum((uint64 AS m) + (1 AS n)) j from test_table where m > 0 and n > 0 having j > 0);\n QUERY id: 0\n   PROJECTION COLUMNS\n@@ -339,35 +339,35 @@ QUERY id: 0\n           FUNCTION id: 15, function_name: greater, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n               LIST id: 16, nodes: 2\n-                COLUMN id: 6, column_name: uint64, result_type: UInt64, source_id: 7\n-                CONSTANT id: 17, constant_value: UInt64_0, constant_value_type: UInt8\n-          CONSTANT id: 18, constant_value: UInt64_1, constant_value_type: UInt8\n+                COLUMN id: 17, column_name: uint64, result_type: UInt64, source_id: 7\n+                CONSTANT id: 18, constant_value: UInt64_0, constant_value_type: UInt8\n+          CONSTANT id: 19, constant_value: UInt64_1, constant_value_type: UInt8\n             EXPRESSION\n-              FUNCTION id: 19, function_name: greater, function_type: ordinary, result_type: UInt8\n+              FUNCTION id: 20, function_name: greater, function_type: ordinary, result_type: UInt8\n                 ARGUMENTS\n-                  LIST id: 20, nodes: 2\n-                    CONSTANT id: 10, constant_value: UInt64_1, constant_value_type: UInt8\n-                    CONSTANT id: 21, constant_value: UInt64_0, constant_value_type: UInt8\n+                  LIST id: 21, nodes: 2\n+                    CONSTANT id: 22, constant_value: UInt64_1, constant_value_type: UInt8\n+                    CONSTANT id: 23, constant_value: UInt64_0, constant_value_type: UInt8\n   HAVING\n-    FUNCTION id: 22, function_name: greater, function_type: ordinary, result_type: UInt8\n+    FUNCTION id: 24, function_name: greater, function_type: ordinary, result_type: UInt8\n       ARGUMENTS\n-        LIST id: 23, nodes: 2\n-          FUNCTION id: 24, function_name: plus, function_type: ordinary, result_type: UInt64\n+        LIST id: 25, nodes: 2\n+          FUNCTION id: 26, function_name: plus, function_type: ordinary, result_type: UInt64\n             ARGUMENTS\n-              LIST id: 25, nodes: 2\n-                FUNCTION id: 26, function_name: sum, function_type: aggregate, result_type: UInt64\n+              LIST id: 27, nodes: 2\n+                FUNCTION id: 28, function_name: sum, function_type: aggregate, result_type: UInt64\n                   ARGUMENTS\n-                    LIST id: 27, nodes: 1\n-                      COLUMN id: 6, column_name: uint64, result_type: UInt64, source_id: 7\n-                FUNCTION id: 28, function_name: multiply, function_type: ordinary, result_type: UInt64\n+                    LIST id: 29, nodes: 1\n+                      COLUMN id: 30, column_name: uint64, result_type: UInt64, source_id: 7\n+                FUNCTION id: 31, function_name: multiply, function_type: ordinary, result_type: UInt64\n                   ARGUMENTS\n-                    LIST id: 29, nodes: 2\n-                      CONSTANT id: 10, constant_value: UInt64_1, constant_value_type: UInt8\n-                      FUNCTION id: 30, function_name: count, function_type: aggregate, result_type: UInt64\n+                    LIST id: 32, nodes: 2\n+                      CONSTANT id: 33, constant_value: UInt64_1, constant_value_type: UInt8\n+                      FUNCTION id: 34, function_name: count, function_type: aggregate, result_type: UInt64\n                         ARGUMENTS\n-                          LIST id: 31, nodes: 1\n-                            COLUMN id: 6, column_name: uint64, result_type: UInt64, source_id: 7\n-          CONSTANT id: 32, constant_value: UInt64_0, constant_value_type: UInt8\n+                          LIST id: 35, nodes: 1\n+                            COLUMN id: 30, column_name: uint64, result_type: UInt64, source_id: 7\n+          CONSTANT id: 36, constant_value: UInt64_0, constant_value_type: UInt8\n EXPLAIN QUERY TREE (SELECT sum(((uint64 AS m) + (1 AS n)) AS i) j from test_table where m > 0 and n > 0 and i > 0 having j > 0);\n QUERY id: 0\n   PROJECTION COLUMNS\n@@ -398,44 +398,44 @@ QUERY id: 0\n           FUNCTION id: 15, function_name: greater, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n               LIST id: 16, nodes: 2\n-                COLUMN id: 6, column_name: uint64, result_type: UInt64, source_id: 7\n-                CONSTANT id: 17, constant_value: UInt64_0, constant_value_type: UInt8\n-          CONSTANT id: 18, constant_value: UInt64_1, constant_value_type: UInt8\n+                COLUMN id: 17, column_name: uint64, result_type: UInt64, source_id: 7\n+                CONSTANT id: 18, constant_value: UInt64_0, constant_value_type: UInt8\n+          CONSTANT id: 19, constant_value: UInt64_1, constant_value_type: UInt8\n             EXPRESSION\n-              FUNCTION id: 19, function_name: greater, function_type: ordinary, result_type: UInt8\n+              FUNCTION id: 20, function_name: greater, function_type: ordinary, result_type: UInt8\n                 ARGUMENTS\n-                  LIST id: 20, nodes: 2\n-                    CONSTANT id: 10, constant_value: UInt64_1, constant_value_type: UInt8\n-                    CONSTANT id: 21, constant_value: UInt64_0, constant_value_type: UInt8\n-          FUNCTION id: 22, function_name: greater, function_type: ordinary, result_type: UInt8\n+                  LIST id: 21, nodes: 2\n+                    CONSTANT id: 22, constant_value: UInt64_1, constant_value_type: UInt8\n+                    CONSTANT id: 23, constant_value: UInt64_0, constant_value_type: UInt8\n+          FUNCTION id: 24, function_name: greater, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n-              LIST id: 23, nodes: 2\n-                FUNCTION id: 24, function_name: plus, function_type: ordinary, result_type: UInt64\n+              LIST id: 25, nodes: 2\n+                FUNCTION id: 26, function_name: plus, function_type: ordinary, result_type: UInt64\n                   ARGUMENTS\n-                    LIST id: 25, nodes: 2\n-                      COLUMN id: 6, column_name: uint64, result_type: UInt64, source_id: 7\n-                      CONSTANT id: 10, constant_value: UInt64_1, constant_value_type: UInt8\n-                CONSTANT id: 26, constant_value: UInt64_0, constant_value_type: UInt8\n+                    LIST id: 27, nodes: 2\n+                      COLUMN id: 28, column_name: uint64, result_type: UInt64, source_id: 7\n+                      CONSTANT id: 29, constant_value: UInt64_1, constant_value_type: UInt8\n+                CONSTANT id: 30, constant_value: UInt64_0, constant_value_type: UInt8\n   HAVING\n-    FUNCTION id: 27, function_name: greater, function_type: ordinary, result_type: UInt8\n+    FUNCTION id: 31, function_name: greater, function_type: ordinary, result_type: UInt8\n       ARGUMENTS\n-        LIST id: 28, nodes: 2\n-          FUNCTION id: 29, function_name: plus, function_type: ordinary, result_type: UInt64\n+        LIST id: 32, nodes: 2\n+          FUNCTION id: 33, function_name: plus, function_type: ordinary, result_type: UInt64\n             ARGUMENTS\n-              LIST id: 30, nodes: 2\n-                FUNCTION id: 31, function_name: sum, function_type: aggregate, result_type: UInt64\n+              LIST id: 34, nodes: 2\n+                FUNCTION id: 35, function_name: sum, function_type: aggregate, result_type: UInt64\n                   ARGUMENTS\n-                    LIST id: 32, nodes: 1\n-                      COLUMN id: 6, column_name: uint64, result_type: UInt64, source_id: 7\n-                FUNCTION id: 33, function_name: multiply, function_type: ordinary, result_type: UInt64\n+                    LIST id: 36, nodes: 1\n+                      COLUMN id: 37, column_name: uint64, result_type: UInt64, source_id: 7\n+                FUNCTION id: 38, function_name: multiply, function_type: ordinary, result_type: UInt64\n                   ARGUMENTS\n-                    LIST id: 34, nodes: 2\n-                      CONSTANT id: 10, constant_value: UInt64_1, constant_value_type: UInt8\n-                      FUNCTION id: 35, function_name: count, function_type: aggregate, result_type: UInt64\n+                    LIST id: 39, nodes: 2\n+                      CONSTANT id: 40, constant_value: UInt64_1, constant_value_type: UInt8\n+                      FUNCTION id: 41, function_name: count, function_type: aggregate, result_type: UInt64\n                         ARGUMENTS\n-                          LIST id: 36, nodes: 1\n-                            COLUMN id: 6, column_name: uint64, result_type: UInt64, source_id: 7\n-          CONSTANT id: 37, constant_value: UInt64_0, constant_value_type: UInt8\n+                          LIST id: 42, nodes: 1\n+                            COLUMN id: 37, column_name: uint64, result_type: UInt64, source_id: 7\n+          CONSTANT id: 43, constant_value: UInt64_0, constant_value_type: UInt8\n SELECT sum(1 + uint64 AS i) from test_table where i > 0;\n 20\n SELECT sum(1 + uint64) AS j from test_table having j > 0;\n@@ -476,9 +476,9 @@ QUERY id: 0\n           FUNCTION id: 15, function_name: plus, function_type: ordinary, result_type: UInt64\n             ARGUMENTS\n               LIST id: 16, nodes: 2\n-                CONSTANT id: 6, constant_value: UInt64_1, constant_value_type: UInt8\n-                COLUMN id: 9, column_name: uint64, result_type: UInt64, source_id: 10\n-          CONSTANT id: 17, constant_value: UInt64_0, constant_value_type: UInt8\n+                CONSTANT id: 17, constant_value: UInt64_1, constant_value_type: UInt8\n+                COLUMN id: 18, column_name: uint64, result_type: UInt64, source_id: 10\n+          CONSTANT id: 19, constant_value: UInt64_0, constant_value_type: UInt8\n EXPLAIN QUERY TREE (SELECT sum(1 + uint64) AS j from test_table having j > 0);\n QUERY id: 0\n   PROJECTION COLUMNS\n@@ -512,16 +512,16 @@ QUERY id: 0\n                 FUNCTION id: 17, function_name: multiply, function_type: ordinary, result_type: UInt64\n                   ARGUMENTS\n                     LIST id: 18, nodes: 2\n-                      CONSTANT id: 6, constant_value: UInt64_1, constant_value_type: UInt8\n-                      FUNCTION id: 19, function_name: count, function_type: aggregate, result_type: UInt64\n+                      CONSTANT id: 19, constant_value: UInt64_1, constant_value_type: UInt8\n+                      FUNCTION id: 20, function_name: count, function_type: aggregate, result_type: UInt64\n                         ARGUMENTS\n-                          LIST id: 20, nodes: 1\n-                            COLUMN id: 9, column_name: uint64, result_type: UInt64, source_id: 10\n-                FUNCTION id: 21, function_name: sum, function_type: aggregate, result_type: UInt64\n+                          LIST id: 21, nodes: 1\n+                            COLUMN id: 22, column_name: uint64, result_type: UInt64, source_id: 10\n+                FUNCTION id: 23, function_name: sum, function_type: aggregate, result_type: UInt64\n                   ARGUMENTS\n-                    LIST id: 22, nodes: 1\n-                      COLUMN id: 9, column_name: uint64, result_type: UInt64, source_id: 10\n-          CONSTANT id: 23, constant_value: UInt64_0, constant_value_type: UInt8\n+                    LIST id: 24, nodes: 1\n+                      COLUMN id: 22, column_name: uint64, result_type: UInt64, source_id: 10\n+          CONSTANT id: 25, constant_value: UInt64_0, constant_value_type: UInt8\n EXPLAIN QUERY TREE (SELECT sum(1 + uint64 AS i) j from test_table where i > 0 having j > 0);\n QUERY id: 0\n   PROJECTION COLUMNS\n@@ -552,29 +552,29 @@ QUERY id: 0\n           FUNCTION id: 15, function_name: plus, function_type: ordinary, result_type: UInt64\n             ARGUMENTS\n               LIST id: 16, nodes: 2\n-                CONSTANT id: 6, constant_value: UInt64_1, constant_value_type: UInt8\n-                COLUMN id: 9, column_name: uint64, result_type: UInt64, source_id: 10\n-          CONSTANT id: 17, constant_value: UInt64_0, constant_value_type: UInt8\n+                CONSTANT id: 17, constant_value: UInt64_1, constant_value_type: UInt8\n+                COLUMN id: 18, column_name: uint64, result_type: UInt64, source_id: 10\n+          CONSTANT id: 19, constant_value: UInt64_0, constant_value_type: UInt8\n   HAVING\n-    FUNCTION id: 18, function_name: greater, function_type: ordinary, result_type: UInt8\n+    FUNCTION id: 20, function_name: greater, function_type: ordinary, result_type: UInt8\n       ARGUMENTS\n-        LIST id: 19, nodes: 2\n-          FUNCTION id: 20, function_name: plus, function_type: ordinary, result_type: UInt64\n+        LIST id: 21, nodes: 2\n+          FUNCTION id: 22, function_name: plus, function_type: ordinary, result_type: UInt64\n             ARGUMENTS\n-              LIST id: 21, nodes: 2\n-                FUNCTION id: 22, function_name: multiply, function_type: ordinary, result_type: UInt64\n+              LIST id: 23, nodes: 2\n+                FUNCTION id: 24, function_name: multiply, function_type: ordinary, result_type: UInt64\n                   ARGUMENTS\n-                    LIST id: 23, nodes: 2\n-                      CONSTANT id: 6, constant_value: UInt64_1, constant_value_type: UInt8\n-                      FUNCTION id: 24, function_name: count, function_type: aggregate, result_type: UInt64\n+                    LIST id: 25, nodes: 2\n+                      CONSTANT id: 26, constant_value: UInt64_1, constant_value_type: UInt8\n+                      FUNCTION id: 27, function_name: count, function_type: aggregate, result_type: UInt64\n                         ARGUMENTS\n-                          LIST id: 25, nodes: 1\n-                            COLUMN id: 9, column_name: uint64, result_type: UInt64, source_id: 10\n-                FUNCTION id: 26, function_name: sum, function_type: aggregate, result_type: UInt64\n+                          LIST id: 28, nodes: 1\n+                            COLUMN id: 29, column_name: uint64, result_type: UInt64, source_id: 10\n+                FUNCTION id: 30, function_name: sum, function_type: aggregate, result_type: UInt64\n                   ARGUMENTS\n-                    LIST id: 27, nodes: 1\n-                      COLUMN id: 9, column_name: uint64, result_type: UInt64, source_id: 10\n-          CONSTANT id: 28, constant_value: UInt64_0, constant_value_type: UInt8\n+                    LIST id: 31, nodes: 1\n+                      COLUMN id: 29, column_name: uint64, result_type: UInt64, source_id: 10\n+          CONSTANT id: 32, constant_value: UInt64_0, constant_value_type: UInt8\n EXPLAIN QUERY TREE (SELECT sum((1 AS m) + (uint64 AS n)) j from test_table where m > 0 and n > 0 having j > 0);\n QUERY id: 0\n   PROJECTION COLUMNS\n@@ -607,33 +607,33 @@ QUERY id: 0\n               FUNCTION id: 16, function_name: greater, function_type: ordinary, result_type: UInt8\n                 ARGUMENTS\n                   LIST id: 17, nodes: 2\n-                    CONSTANT id: 6, constant_value: UInt64_1, constant_value_type: UInt8\n-                    CONSTANT id: 18, constant_value: UInt64_0, constant_value_type: UInt8\n-          FUNCTION id: 19, function_name: greater, function_type: ordinary, result_type: UInt8\n+                    CONSTANT id: 18, constant_value: UInt64_1, constant_value_type: UInt8\n+                    CONSTANT id: 19, constant_value: UInt64_0, constant_value_type: UInt8\n+          FUNCTION id: 20, function_name: greater, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n-              LIST id: 20, nodes: 2\n-                COLUMN id: 9, column_name: uint64, result_type: UInt64, source_id: 10\n-                CONSTANT id: 21, constant_value: UInt64_0, constant_value_type: UInt8\n+              LIST id: 21, nodes: 2\n+                COLUMN id: 22, column_name: uint64, result_type: UInt64, source_id: 10\n+                CONSTANT id: 23, constant_value: UInt64_0, constant_value_type: UInt8\n   HAVING\n-    FUNCTION id: 22, function_name: greater, function_type: ordinary, result_type: UInt8\n+    FUNCTION id: 24, function_name: greater, function_type: ordinary, result_type: UInt8\n       ARGUMENTS\n-        LIST id: 23, nodes: 2\n-          FUNCTION id: 24, function_name: plus, function_type: ordinary, result_type: UInt64\n+        LIST id: 25, nodes: 2\n+          FUNCTION id: 26, function_name: plus, function_type: ordinary, result_type: UInt64\n             ARGUMENTS\n-              LIST id: 25, nodes: 2\n-                FUNCTION id: 26, function_name: multiply, function_type: ordinary, result_type: UInt64\n+              LIST id: 27, nodes: 2\n+                FUNCTION id: 28, function_name: multiply, function_type: ordinary, result_type: UInt64\n                   ARGUMENTS\n-                    LIST id: 27, nodes: 2\n-                      CONSTANT id: 6, constant_value: UInt64_1, constant_value_type: UInt8\n-                      FUNCTION id: 28, function_name: count, function_type: aggregate, result_type: UInt64\n+                    LIST id: 29, nodes: 2\n+                      CONSTANT id: 30, constant_value: UInt64_1, constant_value_type: UInt8\n+                      FUNCTION id: 31, function_name: count, function_type: aggregate, result_type: UInt64\n                         ARGUMENTS\n-                          LIST id: 29, nodes: 1\n-                            COLUMN id: 9, column_name: uint64, result_type: UInt64, source_id: 10\n-                FUNCTION id: 30, function_name: sum, function_type: aggregate, result_type: UInt64\n+                          LIST id: 32, nodes: 1\n+                            COLUMN id: 33, column_name: uint64, result_type: UInt64, source_id: 10\n+                FUNCTION id: 34, function_name: sum, function_type: aggregate, result_type: UInt64\n                   ARGUMENTS\n-                    LIST id: 31, nodes: 1\n-                      COLUMN id: 9, column_name: uint64, result_type: UInt64, source_id: 10\n-          CONSTANT id: 32, constant_value: UInt64_0, constant_value_type: UInt8\n+                    LIST id: 35, nodes: 1\n+                      COLUMN id: 33, column_name: uint64, result_type: UInt64, source_id: 10\n+          CONSTANT id: 36, constant_value: UInt64_0, constant_value_type: UInt8\n EXPLAIN QUERY TREE (SELECT sum(((1 AS m) + (uint64 AS n)) AS i) j from test_table where m > 0 and n > 0 and i > 0 having j > 0);\n QUERY id: 0\n   PROJECTION COLUMNS\n@@ -666,42 +666,42 @@ QUERY id: 0\n               FUNCTION id: 16, function_name: greater, function_type: ordinary, result_type: UInt8\n                 ARGUMENTS\n                   LIST id: 17, nodes: 2\n-                    CONSTANT id: 6, constant_value: UInt64_1, constant_value_type: UInt8\n-                    CONSTANT id: 18, constant_value: UInt64_0, constant_value_type: UInt8\n-          FUNCTION id: 19, function_name: greater, function_type: ordinary, result_type: UInt8\n+                    CONSTANT id: 18, constant_value: UInt64_1, constant_value_type: UInt8\n+                    CONSTANT id: 19, constant_value: UInt64_0, constant_value_type: UInt8\n+          FUNCTION id: 20, function_name: greater, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n-              LIST id: 20, nodes: 2\n-                COLUMN id: 9, column_name: uint64, result_type: UInt64, source_id: 10\n-                CONSTANT id: 21, constant_value: UInt64_0, constant_value_type: UInt8\n-          FUNCTION id: 22, function_name: greater, function_type: ordinary, result_type: UInt8\n+              LIST id: 21, nodes: 2\n+                COLUMN id: 22, column_name: uint64, result_type: UInt64, source_id: 10\n+                CONSTANT id: 23, constant_value: UInt64_0, constant_value_type: UInt8\n+          FUNCTION id: 24, function_name: greater, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n-              LIST id: 23, nodes: 2\n-                FUNCTION id: 24, function_name: plus, function_type: ordinary, result_type: UInt64\n+              LIST id: 25, nodes: 2\n+                FUNCTION id: 26, function_name: plus, function_type: ordinary, result_type: UInt64\n                   ARGUMENTS\n-                    LIST id: 25, nodes: 2\n-                      CONSTANT id: 6, constant_value: UInt64_1, constant_value_type: UInt8\n-                      COLUMN id: 9, column_name: uint64, result_type: UInt64, source_id: 10\n-                CONSTANT id: 26, constant_value: UInt64_0, constant_value_type: UInt8\n+                    LIST id: 27, nodes: 2\n+                      CONSTANT id: 28, constant_value: UInt64_1, constant_value_type: UInt8\n+                      COLUMN id: 29, column_name: uint64, result_type: UInt64, source_id: 10\n+                CONSTANT id: 30, constant_value: UInt64_0, constant_value_type: UInt8\n   HAVING\n-    FUNCTION id: 27, function_name: greater, function_type: ordinary, result_type: UInt8\n+    FUNCTION id: 31, function_name: greater, function_type: ordinary, result_type: UInt8\n       ARGUMENTS\n-        LIST id: 28, nodes: 2\n-          FUNCTION id: 29, function_name: plus, function_type: ordinary, result_type: UInt64\n+        LIST id: 32, nodes: 2\n+          FUNCTION id: 33, function_name: plus, function_type: ordinary, result_type: UInt64\n             ARGUMENTS\n-              LIST id: 30, nodes: 2\n-                FUNCTION id: 31, function_name: multiply, function_type: ordinary, result_type: UInt64\n+              LIST id: 34, nodes: 2\n+                FUNCTION id: 35, function_name: multiply, function_type: ordinary, result_type: UInt64\n                   ARGUMENTS\n-                    LIST id: 32, nodes: 2\n-                      CONSTANT id: 6, constant_value: UInt64_1, constant_value_type: UInt8\n-                      FUNCTION id: 33, function_name: count, function_type: aggregate, result_type: UInt64\n+                    LIST id: 36, nodes: 2\n+                      CONSTANT id: 37, constant_value: UInt64_1, constant_value_type: UInt8\n+                      FUNCTION id: 38, function_name: count, function_type: aggregate, result_type: UInt64\n                         ARGUMENTS\n-                          LIST id: 34, nodes: 1\n-                            COLUMN id: 9, column_name: uint64, result_type: UInt64, source_id: 10\n-                FUNCTION id: 35, function_name: sum, function_type: aggregate, result_type: UInt64\n+                          LIST id: 39, nodes: 1\n+                            COLUMN id: 40, column_name: uint64, result_type: UInt64, source_id: 10\n+                FUNCTION id: 41, function_name: sum, function_type: aggregate, result_type: UInt64\n                   ARGUMENTS\n-                    LIST id: 36, nodes: 1\n-                      COLUMN id: 9, column_name: uint64, result_type: UInt64, source_id: 10\n-          CONSTANT id: 37, constant_value: UInt64_0, constant_value_type: UInt8\n+                    LIST id: 42, nodes: 1\n+                      COLUMN id: 40, column_name: uint64, result_type: UInt64, source_id: 10\n+          CONSTANT id: 43, constant_value: UInt64_0, constant_value_type: UInt8\n SELECT sum(uint64 - 1 AS i) from test_table where i > 0;\n 10\n SELECT sum(uint64 - 1) AS j from test_table having j > 0;\n@@ -742,9 +742,9 @@ QUERY id: 0\n           FUNCTION id: 15, function_name: minus, function_type: ordinary, result_type: Int64\n             ARGUMENTS\n               LIST id: 16, nodes: 2\n-                COLUMN id: 6, column_name: uint64, result_type: UInt64, source_id: 7\n-                CONSTANT id: 10, constant_value: UInt64_1, constant_value_type: UInt8\n-          CONSTANT id: 17, constant_value: UInt64_0, constant_value_type: UInt8\n+                COLUMN id: 17, column_name: uint64, result_type: UInt64, source_id: 7\n+                CONSTANT id: 18, constant_value: UInt64_1, constant_value_type: UInt8\n+          CONSTANT id: 19, constant_value: UInt64_0, constant_value_type: UInt8\n EXPLAIN QUERY TREE (SELECT sum(uint64 - 1) AS j from test_table having j > 0);\n QUERY id: 0\n   PROJECTION COLUMNS\n@@ -778,16 +778,16 @@ QUERY id: 0\n                 FUNCTION id: 17, function_name: sum, function_type: aggregate, result_type: UInt64\n                   ARGUMENTS\n                     LIST id: 18, nodes: 1\n-                      COLUMN id: 6, column_name: uint64, result_type: UInt64, source_id: 7\n-                FUNCTION id: 19, function_name: multiply, function_type: ordinary, result_type: UInt64\n+                      COLUMN id: 19, column_name: uint64, result_type: UInt64, source_id: 7\n+                FUNCTION id: 20, function_name: multiply, function_type: ordinary, result_type: UInt64\n                   ARGUMENTS\n-                    LIST id: 20, nodes: 2\n-                      CONSTANT id: 10, constant_value: UInt64_1, constant_value_type: UInt8\n-                      FUNCTION id: 21, function_name: count, function_type: aggregate, result_type: UInt64\n+                    LIST id: 21, nodes: 2\n+                      CONSTANT id: 22, constant_value: UInt64_1, constant_value_type: UInt8\n+                      FUNCTION id: 23, function_name: count, function_type: aggregate, result_type: UInt64\n                         ARGUMENTS\n-                          LIST id: 22, nodes: 1\n-                            COLUMN id: 6, column_name: uint64, result_type: UInt64, source_id: 7\n-          CONSTANT id: 23, constant_value: UInt64_0, constant_value_type: UInt8\n+                          LIST id: 24, nodes: 1\n+                            COLUMN id: 19, column_name: uint64, result_type: UInt64, source_id: 7\n+          CONSTANT id: 25, constant_value: UInt64_0, constant_value_type: UInt8\n EXPLAIN QUERY TREE (SELECT sum(uint64 - 1 AS i) j from test_table where i > 0 having j > 0);\n QUERY id: 0\n   PROJECTION COLUMNS\n@@ -818,29 +818,29 @@ QUERY id: 0\n           FUNCTION id: 15, function_name: minus, function_type: ordinary, result_type: Int64\n             ARGUMENTS\n               LIST id: 16, nodes: 2\n-                COLUMN id: 6, column_name: uint64, result_type: UInt64, source_id: 7\n-                CONSTANT id: 10, constant_value: UInt64_1, constant_value_type: UInt8\n-          CONSTANT id: 17, constant_value: UInt64_0, constant_value_type: UInt8\n+                COLUMN id: 17, column_name: uint64, result_type: UInt64, source_id: 7\n+                CONSTANT id: 18, constant_value: UInt64_1, constant_value_type: UInt8\n+          CONSTANT id: 19, constant_value: UInt64_0, constant_value_type: UInt8\n   HAVING\n-    FUNCTION id: 18, function_name: greater, function_type: ordinary, result_type: UInt8\n+    FUNCTION id: 20, function_name: greater, function_type: ordinary, result_type: UInt8\n       ARGUMENTS\n-        LIST id: 19, nodes: 2\n-          FUNCTION id: 20, function_name: minus, function_type: ordinary, result_type: Int64\n+        LIST id: 21, nodes: 2\n+          FUNCTION id: 22, function_name: minus, function_type: ordinary, result_type: Int64\n             ARGUMENTS\n-              LIST id: 21, nodes: 2\n-                FUNCTION id: 22, function_name: sum, function_type: aggregate, result_type: UInt64\n+              LIST id: 23, nodes: 2\n+                FUNCTION id: 24, function_name: sum, function_type: aggregate, result_type: UInt64\n                   ARGUMENTS\n-                    LIST id: 23, nodes: 1\n-                      COLUMN id: 6, column_name: uint64, result_type: UInt64, source_id: 7\n-                FUNCTION id: 24, function_name: multiply, function_type: ordinary, result_type: UInt64\n+                    LIST id: 25, nodes: 1\n+                      COLUMN id: 26, column_name: uint64, result_type: UInt64, source_id: 7\n+                FUNCTION id: 27, function_name: multiply, function_type: ordinary, result_type: UInt64\n                   ARGUMENTS\n-                    LIST id: 25, nodes: 2\n-                      CONSTANT id: 10, constant_value: UInt64_1, constant_value_type: UInt8\n-                      FUNCTION id: 26, function_name: count, function_type: aggregate, result_type: UInt64\n+                    LIST id: 28, nodes: 2\n+                      CONSTANT id: 29, constant_value: UInt64_1, constant_value_type: UInt8\n+                      FUNCTION id: 30, function_name: count, function_type: aggregate, result_type: UInt64\n                         ARGUMENTS\n-                          LIST id: 27, nodes: 1\n-                            COLUMN id: 6, column_name: uint64, result_type: UInt64, source_id: 7\n-          CONSTANT id: 28, constant_value: UInt64_0, constant_value_type: UInt8\n+                          LIST id: 31, nodes: 1\n+                            COLUMN id: 26, column_name: uint64, result_type: UInt64, source_id: 7\n+          CONSTANT id: 32, constant_value: UInt64_0, constant_value_type: UInt8\n EXPLAIN QUERY TREE (SELECT sum((uint64 AS m) - (1 AS n)) j from test_table where m > 0 and n > 0 having j > 0);\n QUERY id: 0\n   PROJECTION COLUMNS\n@@ -871,35 +871,35 @@ QUERY id: 0\n           FUNCTION id: 15, function_name: greater, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n               LIST id: 16, nodes: 2\n-                COLUMN id: 6, column_name: uint64, result_type: UInt64, source_id: 7\n-                CONSTANT id: 17, constant_value: UInt64_0, constant_value_type: UInt8\n-          CONSTANT id: 18, constant_value: UInt64_1, constant_value_type: UInt8\n+                COLUMN id: 17, column_name: uint64, result_type: UInt64, source_id: 7\n+                CONSTANT id: 18, constant_value: UInt64_0, constant_value_type: UInt8\n+          CONSTANT id: 19, constant_value: UInt64_1, constant_value_type: UInt8\n             EXPRESSION\n-              FUNCTION id: 19, function_name: greater, function_type: ordinary, result_type: UInt8\n+              FUNCTION id: 20, function_name: greater, function_type: ordinary, result_type: UInt8\n                 ARGUMENTS\n-                  LIST id: 20, nodes: 2\n-                    CONSTANT id: 10, constant_value: UInt64_1, constant_value_type: UInt8\n-                    CONSTANT id: 21, constant_value: UInt64_0, constant_value_type: UInt8\n+                  LIST id: 21, nodes: 2\n+                    CONSTANT id: 22, constant_value: UInt64_1, constant_value_type: UInt8\n+                    CONSTANT id: 23, constant_value: UInt64_0, constant_value_type: UInt8\n   HAVING\n-    FUNCTION id: 22, function_name: greater, function_type: ordinary, result_type: UInt8\n+    FUNCTION id: 24, function_name: greater, function_type: ordinary, result_type: UInt8\n       ARGUMENTS\n-        LIST id: 23, nodes: 2\n-          FUNCTION id: 24, function_name: minus, function_type: ordinary, result_type: Int64\n+        LIST id: 25, nodes: 2\n+          FUNCTION id: 26, function_name: minus, function_type: ordinary, result_type: Int64\n             ARGUMENTS\n-              LIST id: 25, nodes: 2\n-                FUNCTION id: 26, function_name: sum, function_type: aggregate, result_type: UInt64\n+              LIST id: 27, nodes: 2\n+                FUNCTION id: 28, function_name: sum, function_type: aggregate, result_type: UInt64\n                   ARGUMENTS\n-                    LIST id: 27, nodes: 1\n-                      COLUMN id: 6, column_name: uint64, result_type: UInt64, source_id: 7\n-                FUNCTION id: 28, function_name: multiply, function_type: ordinary, result_type: UInt64\n+                    LIST id: 29, nodes: 1\n+                      COLUMN id: 30, column_name: uint64, result_type: UInt64, source_id: 7\n+                FUNCTION id: 31, function_name: multiply, function_type: ordinary, result_type: UInt64\n                   ARGUMENTS\n-                    LIST id: 29, nodes: 2\n-                      CONSTANT id: 10, constant_value: UInt64_1, constant_value_type: UInt8\n-                      FUNCTION id: 30, function_name: count, function_type: aggregate, result_type: UInt64\n+                    LIST id: 32, nodes: 2\n+                      CONSTANT id: 33, constant_value: UInt64_1, constant_value_type: UInt8\n+                      FUNCTION id: 34, function_name: count, function_type: aggregate, result_type: UInt64\n                         ARGUMENTS\n-                          LIST id: 31, nodes: 1\n-                            COLUMN id: 6, column_name: uint64, result_type: UInt64, source_id: 7\n-          CONSTANT id: 32, constant_value: UInt64_0, constant_value_type: UInt8\n+                          LIST id: 35, nodes: 1\n+                            COLUMN id: 30, column_name: uint64, result_type: UInt64, source_id: 7\n+          CONSTANT id: 36, constant_value: UInt64_0, constant_value_type: UInt8\n EXPLAIN QUERY TREE (SELECT sum(((uint64 AS m) - (1 AS n)) AS i) j from test_table where m > 0 and n > 0 and i > 0 having j > 0);\n QUERY id: 0\n   PROJECTION COLUMNS\n@@ -930,44 +930,44 @@ QUERY id: 0\n           FUNCTION id: 15, function_name: greater, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n               LIST id: 16, nodes: 2\n-                COLUMN id: 6, column_name: uint64, result_type: UInt64, source_id: 7\n-                CONSTANT id: 17, constant_value: UInt64_0, constant_value_type: UInt8\n-          CONSTANT id: 18, constant_value: UInt64_1, constant_value_type: UInt8\n+                COLUMN id: 17, column_name: uint64, result_type: UInt64, source_id: 7\n+                CONSTANT id: 18, constant_value: UInt64_0, constant_value_type: UInt8\n+          CONSTANT id: 19, constant_value: UInt64_1, constant_value_type: UInt8\n             EXPRESSION\n-              FUNCTION id: 19, function_name: greater, function_type: ordinary, result_type: UInt8\n+              FUNCTION id: 20, function_name: greater, function_type: ordinary, result_type: UInt8\n                 ARGUMENTS\n-                  LIST id: 20, nodes: 2\n-                    CONSTANT id: 10, constant_value: UInt64_1, constant_value_type: UInt8\n-                    CONSTANT id: 21, constant_value: UInt64_0, constant_value_type: UInt8\n-          FUNCTION id: 22, function_name: greater, function_type: ordinary, result_type: UInt8\n+                  LIST id: 21, nodes: 2\n+                    CONSTANT id: 22, constant_value: UInt64_1, constant_value_type: UInt8\n+                    CONSTANT id: 23, constant_value: UInt64_0, constant_value_type: UInt8\n+          FUNCTION id: 24, function_name: greater, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n-              LIST id: 23, nodes: 2\n-                FUNCTION id: 24, function_name: minus, function_type: ordinary, result_type: Int64\n+              LIST id: 25, nodes: 2\n+                FUNCTION id: 26, function_name: minus, function_type: ordinary, result_type: Int64\n                   ARGUMENTS\n-                    LIST id: 25, nodes: 2\n-                      COLUMN id: 6, column_name: uint64, result_type: UInt64, source_id: 7\n-                      CONSTANT id: 10, constant_value: UInt64_1, constant_value_type: UInt8\n-                CONSTANT id: 26, constant_value: UInt64_0, constant_value_type: UInt8\n+                    LIST id: 27, nodes: 2\n+                      COLUMN id: 28, column_name: uint64, result_type: UInt64, source_id: 7\n+                      CONSTANT id: 29, constant_value: UInt64_1, constant_value_type: UInt8\n+                CONSTANT id: 30, constant_value: UInt64_0, constant_value_type: UInt8\n   HAVING\n-    FUNCTION id: 27, function_name: greater, function_type: ordinary, result_type: UInt8\n+    FUNCTION id: 31, function_name: greater, function_type: ordinary, result_type: UInt8\n       ARGUMENTS\n-        LIST id: 28, nodes: 2\n-          FUNCTION id: 29, function_name: minus, function_type: ordinary, result_type: Int64\n+        LIST id: 32, nodes: 2\n+          FUNCTION id: 33, function_name: minus, function_type: ordinary, result_type: Int64\n             ARGUMENTS\n-              LIST id: 30, nodes: 2\n-                FUNCTION id: 31, function_name: sum, function_type: aggregate, result_type: UInt64\n+              LIST id: 34, nodes: 2\n+                FUNCTION id: 35, function_name: sum, function_type: aggregate, result_type: UInt64\n                   ARGUMENTS\n-                    LIST id: 32, nodes: 1\n-                      COLUMN id: 6, column_name: uint64, result_type: UInt64, source_id: 7\n-                FUNCTION id: 33, function_name: multiply, function_type: ordinary, result_type: UInt64\n+                    LIST id: 36, nodes: 1\n+                      COLUMN id: 37, column_name: uint64, result_type: UInt64, source_id: 7\n+                FUNCTION id: 38, function_name: multiply, function_type: ordinary, result_type: UInt64\n                   ARGUMENTS\n-                    LIST id: 34, nodes: 2\n-                      CONSTANT id: 10, constant_value: UInt64_1, constant_value_type: UInt8\n-                      FUNCTION id: 35, function_name: count, function_type: aggregate, result_type: UInt64\n+                    LIST id: 39, nodes: 2\n+                      CONSTANT id: 40, constant_value: UInt64_1, constant_value_type: UInt8\n+                      FUNCTION id: 41, function_name: count, function_type: aggregate, result_type: UInt64\n                         ARGUMENTS\n-                          LIST id: 36, nodes: 1\n-                            COLUMN id: 6, column_name: uint64, result_type: UInt64, source_id: 7\n-          CONSTANT id: 37, constant_value: UInt64_0, constant_value_type: UInt8\n+                          LIST id: 42, nodes: 1\n+                            COLUMN id: 37, column_name: uint64, result_type: UInt64, source_id: 7\n+          CONSTANT id: 43, constant_value: UInt64_0, constant_value_type: UInt8\n SELECT sum(1 - uint64 AS i) from test_table;\n -10\n SELECT sum(1 - uint64) AS j from test_table;\n@@ -1008,9 +1008,9 @@ QUERY id: 0\n           FUNCTION id: 15, function_name: minus, function_type: ordinary, result_type: Int64\n             ARGUMENTS\n               LIST id: 16, nodes: 2\n-                CONSTANT id: 6, constant_value: UInt64_1, constant_value_type: UInt8\n-                COLUMN id: 9, column_name: uint64, result_type: UInt64, source_id: 10\n-          CONSTANT id: 17, constant_value: UInt64_0, constant_value_type: UInt8\n+                CONSTANT id: 17, constant_value: UInt64_1, constant_value_type: UInt8\n+                COLUMN id: 18, column_name: uint64, result_type: UInt64, source_id: 10\n+          CONSTANT id: 19, constant_value: UInt64_0, constant_value_type: UInt8\n EXPLAIN QUERY TREE (SELECT sum(1 - uint64) AS j from test_table having j < 0);\n QUERY id: 0\n   PROJECTION COLUMNS\n@@ -1044,16 +1044,16 @@ QUERY id: 0\n                 FUNCTION id: 17, function_name: multiply, function_type: ordinary, result_type: UInt64\n                   ARGUMENTS\n                     LIST id: 18, nodes: 2\n-                      CONSTANT id: 6, constant_value: UInt64_1, constant_value_type: UInt8\n-                      FUNCTION id: 19, function_name: count, function_type: aggregate, result_type: UInt64\n+                      CONSTANT id: 19, constant_value: UInt64_1, constant_value_type: UInt8\n+                      FUNCTION id: 20, function_name: count, function_type: aggregate, result_type: UInt64\n                         ARGUMENTS\n-                          LIST id: 20, nodes: 1\n-                            COLUMN id: 9, column_name: uint64, result_type: UInt64, source_id: 10\n-                FUNCTION id: 21, function_name: sum, function_type: aggregate, result_type: UInt64\n+                          LIST id: 21, nodes: 1\n+                            COLUMN id: 22, column_name: uint64, result_type: UInt64, source_id: 10\n+                FUNCTION id: 23, function_name: sum, function_type: aggregate, result_type: UInt64\n                   ARGUMENTS\n-                    LIST id: 22, nodes: 1\n-                      COLUMN id: 9, column_name: uint64, result_type: UInt64, source_id: 10\n-          CONSTANT id: 23, constant_value: UInt64_0, constant_value_type: UInt8\n+                    LIST id: 24, nodes: 1\n+                      COLUMN id: 22, column_name: uint64, result_type: UInt64, source_id: 10\n+          CONSTANT id: 25, constant_value: UInt64_0, constant_value_type: UInt8\n EXPLAIN QUERY TREE (SELECT sum(1 - uint64 AS i) j from test_table where i > 0 having j < 0);\n QUERY id: 0\n   PROJECTION COLUMNS\n@@ -1084,29 +1084,29 @@ QUERY id: 0\n           FUNCTION id: 15, function_name: minus, function_type: ordinary, result_type: Int64\n             ARGUMENTS\n               LIST id: 16, nodes: 2\n-                CONSTANT id: 6, constant_value: UInt64_1, constant_value_type: UInt8\n-                COLUMN id: 9, column_name: uint64, result_type: UInt64, source_id: 10\n-          CONSTANT id: 17, constant_value: UInt64_0, constant_value_type: UInt8\n+                CONSTANT id: 17, constant_value: UInt64_1, constant_value_type: UInt8\n+                COLUMN id: 18, column_name: uint64, result_type: UInt64, source_id: 10\n+          CONSTANT id: 19, constant_value: UInt64_0, constant_value_type: UInt8\n   HAVING\n-    FUNCTION id: 18, function_name: less, function_type: ordinary, result_type: UInt8\n+    FUNCTION id: 20, function_name: less, function_type: ordinary, result_type: UInt8\n       ARGUMENTS\n-        LIST id: 19, nodes: 2\n-          FUNCTION id: 20, function_name: minus, function_type: ordinary, result_type: Int64\n+        LIST id: 21, nodes: 2\n+          FUNCTION id: 22, function_name: minus, function_type: ordinary, result_type: Int64\n             ARGUMENTS\n-              LIST id: 21, nodes: 2\n-                FUNCTION id: 22, function_name: multiply, function_type: ordinary, result_type: UInt64\n+              LIST id: 23, nodes: 2\n+                FUNCTION id: 24, function_name: multiply, function_type: ordinary, result_type: UInt64\n                   ARGUMENTS\n-                    LIST id: 23, nodes: 2\n-                      CONSTANT id: 6, constant_value: UInt64_1, constant_value_type: UInt8\n-                      FUNCTION id: 24, function_name: count, function_type: aggregate, result_type: UInt64\n+                    LIST id: 25, nodes: 2\n+                      CONSTANT id: 26, constant_value: UInt64_1, constant_value_type: UInt8\n+                      FUNCTION id: 27, function_name: count, function_type: aggregate, result_type: UInt64\n                         ARGUMENTS\n-                          LIST id: 25, nodes: 1\n-                            COLUMN id: 9, column_name: uint64, result_type: UInt64, source_id: 10\n-                FUNCTION id: 26, function_name: sum, function_type: aggregate, result_type: UInt64\n+                          LIST id: 28, nodes: 1\n+                            COLUMN id: 29, column_name: uint64, result_type: UInt64, source_id: 10\n+                FUNCTION id: 30, function_name: sum, function_type: aggregate, result_type: UInt64\n                   ARGUMENTS\n-                    LIST id: 27, nodes: 1\n-                      COLUMN id: 9, column_name: uint64, result_type: UInt64, source_id: 10\n-          CONSTANT id: 28, constant_value: UInt64_0, constant_value_type: UInt8\n+                    LIST id: 31, nodes: 1\n+                      COLUMN id: 29, column_name: uint64, result_type: UInt64, source_id: 10\n+          CONSTANT id: 32, constant_value: UInt64_0, constant_value_type: UInt8\n EXPLAIN QUERY TREE (SELECT sum((1 AS m) - (uint64 AS n)) j from test_table where m > 0 and n > 0 having j < 0);\n QUERY id: 0\n   PROJECTION COLUMNS\n@@ -1139,33 +1139,33 @@ QUERY id: 0\n               FUNCTION id: 16, function_name: greater, function_type: ordinary, result_type: UInt8\n                 ARGUMENTS\n                   LIST id: 17, nodes: 2\n-                    CONSTANT id: 6, constant_value: UInt64_1, constant_value_type: UInt8\n-                    CONSTANT id: 18, constant_value: UInt64_0, constant_value_type: UInt8\n-          FUNCTION id: 19, function_name: greater, function_type: ordinary, result_type: UInt8\n+                    CONSTANT id: 18, constant_value: UInt64_1, constant_value_type: UInt8\n+                    CONSTANT id: 19, constant_value: UInt64_0, constant_value_type: UInt8\n+          FUNCTION id: 20, function_name: greater, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n-              LIST id: 20, nodes: 2\n-                COLUMN id: 9, column_name: uint64, result_type: UInt64, source_id: 10\n-                CONSTANT id: 21, constant_value: UInt64_0, constant_value_type: UInt8\n+              LIST id: 21, nodes: 2\n+                COLUMN id: 22, column_name: uint64, result_type: UInt64, source_id: 10\n+                CONSTANT id: 23, constant_value: UInt64_0, constant_value_type: UInt8\n   HAVING\n-    FUNCTION id: 22, function_name: less, function_type: ordinary, result_type: UInt8\n+    FUNCTION id: 24, function_name: less, function_type: ordinary, result_type: UInt8\n       ARGUMENTS\n-        LIST id: 23, nodes: 2\n-          FUNCTION id: 24, function_name: minus, function_type: ordinary, result_type: Int64\n+        LIST id: 25, nodes: 2\n+          FUNCTION id: 26, function_name: minus, function_type: ordinary, result_type: Int64\n             ARGUMENTS\n-              LIST id: 25, nodes: 2\n-                FUNCTION id: 26, function_name: multiply, function_type: ordinary, result_type: UInt64\n+              LIST id: 27, nodes: 2\n+                FUNCTION id: 28, function_name: multiply, function_type: ordinary, result_type: UInt64\n                   ARGUMENTS\n-                    LIST id: 27, nodes: 2\n-                      CONSTANT id: 6, constant_value: UInt64_1, constant_value_type: UInt8\n-                      FUNCTION id: 28, function_name: count, function_type: aggregate, result_type: UInt64\n+                    LIST id: 29, nodes: 2\n+                      CONSTANT id: 30, constant_value: UInt64_1, constant_value_type: UInt8\n+                      FUNCTION id: 31, function_name: count, function_type: aggregate, result_type: UInt64\n                         ARGUMENTS\n-                          LIST id: 29, nodes: 1\n-                            COLUMN id: 9, column_name: uint64, result_type: UInt64, source_id: 10\n-                FUNCTION id: 30, function_name: sum, function_type: aggregate, result_type: UInt64\n+                          LIST id: 32, nodes: 1\n+                            COLUMN id: 33, column_name: uint64, result_type: UInt64, source_id: 10\n+                FUNCTION id: 34, function_name: sum, function_type: aggregate, result_type: UInt64\n                   ARGUMENTS\n-                    LIST id: 31, nodes: 1\n-                      COLUMN id: 9, column_name: uint64, result_type: UInt64, source_id: 10\n-          CONSTANT id: 32, constant_value: UInt64_0, constant_value_type: UInt8\n+                    LIST id: 35, nodes: 1\n+                      COLUMN id: 33, column_name: uint64, result_type: UInt64, source_id: 10\n+          CONSTANT id: 36, constant_value: UInt64_0, constant_value_type: UInt8\n EXPLAIN QUERY TREE (SELECT sum(((1 AS m) - (uint64 AS n)) AS i) j from test_table where m > 0 and n > 0 and i < 0 having j < 0);\n QUERY id: 0\n   PROJECTION COLUMNS\n@@ -1198,42 +1198,42 @@ QUERY id: 0\n               FUNCTION id: 16, function_name: greater, function_type: ordinary, result_type: UInt8\n                 ARGUMENTS\n                   LIST id: 17, nodes: 2\n-                    CONSTANT id: 6, constant_value: UInt64_1, constant_value_type: UInt8\n-                    CONSTANT id: 18, constant_value: UInt64_0, constant_value_type: UInt8\n-          FUNCTION id: 19, function_name: greater, function_type: ordinary, result_type: UInt8\n+                    CONSTANT id: 18, constant_value: UInt64_1, constant_value_type: UInt8\n+                    CONSTANT id: 19, constant_value: UInt64_0, constant_value_type: UInt8\n+          FUNCTION id: 20, function_name: greater, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n-              LIST id: 20, nodes: 2\n-                COLUMN id: 9, column_name: uint64, result_type: UInt64, source_id: 10\n-                CONSTANT id: 21, constant_value: UInt64_0, constant_value_type: UInt8\n-          FUNCTION id: 22, function_name: less, function_type: ordinary, result_type: UInt8\n+              LIST id: 21, nodes: 2\n+                COLUMN id: 22, column_name: uint64, result_type: UInt64, source_id: 10\n+                CONSTANT id: 23, constant_value: UInt64_0, constant_value_type: UInt8\n+          FUNCTION id: 24, function_name: less, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n-              LIST id: 23, nodes: 2\n-                FUNCTION id: 24, function_name: minus, function_type: ordinary, result_type: Int64\n+              LIST id: 25, nodes: 2\n+                FUNCTION id: 26, function_name: minus, function_type: ordinary, result_type: Int64\n                   ARGUMENTS\n-                    LIST id: 25, nodes: 2\n-                      CONSTANT id: 6, constant_value: UInt64_1, constant_value_type: UInt8\n-                      COLUMN id: 9, column_name: uint64, result_type: UInt64, source_id: 10\n-                CONSTANT id: 26, constant_value: UInt64_0, constant_value_type: UInt8\n+                    LIST id: 27, nodes: 2\n+                      CONSTANT id: 28, constant_value: UInt64_1, constant_value_type: UInt8\n+                      COLUMN id: 29, column_name: uint64, result_type: UInt64, source_id: 10\n+                CONSTANT id: 30, constant_value: UInt64_0, constant_value_type: UInt8\n   HAVING\n-    FUNCTION id: 27, function_name: less, function_type: ordinary, result_type: UInt8\n+    FUNCTION id: 31, function_name: less, function_type: ordinary, result_type: UInt8\n       ARGUMENTS\n-        LIST id: 28, nodes: 2\n-          FUNCTION id: 29, function_name: minus, function_type: ordinary, result_type: Int64\n+        LIST id: 32, nodes: 2\n+          FUNCTION id: 33, function_name: minus, function_type: ordinary, result_type: Int64\n             ARGUMENTS\n-              LIST id: 30, nodes: 2\n-                FUNCTION id: 31, function_name: multiply, function_type: ordinary, result_type: UInt64\n+              LIST id: 34, nodes: 2\n+                FUNCTION id: 35, function_name: multiply, function_type: ordinary, result_type: UInt64\n                   ARGUMENTS\n-                    LIST id: 32, nodes: 2\n-                      CONSTANT id: 6, constant_value: UInt64_1, constant_value_type: UInt8\n-                      FUNCTION id: 33, function_name: count, function_type: aggregate, result_type: UInt64\n+                    LIST id: 36, nodes: 2\n+                      CONSTANT id: 37, constant_value: UInt64_1, constant_value_type: UInt8\n+                      FUNCTION id: 38, function_name: count, function_type: aggregate, result_type: UInt64\n                         ARGUMENTS\n-                          LIST id: 34, nodes: 1\n-                            COLUMN id: 9, column_name: uint64, result_type: UInt64, source_id: 10\n-                FUNCTION id: 35, function_name: sum, function_type: aggregate, result_type: UInt64\n+                          LIST id: 39, nodes: 1\n+                            COLUMN id: 40, column_name: uint64, result_type: UInt64, source_id: 10\n+                FUNCTION id: 41, function_name: sum, function_type: aggregate, result_type: UInt64\n                   ARGUMENTS\n-                    LIST id: 36, nodes: 1\n-                      COLUMN id: 9, column_name: uint64, result_type: UInt64, source_id: 10\n-          CONSTANT id: 37, constant_value: UInt64_0, constant_value_type: UInt8\n+                    LIST id: 42, nodes: 1\n+                      COLUMN id: 40, column_name: uint64, result_type: UInt64, source_id: 10\n+          CONSTANT id: 43, constant_value: UInt64_0, constant_value_type: UInt8\n SELECT sum(uint64 + 2.11) From test_table;\n 25.549999999999997\n SELECT sum(2.11 + uint64) From test_table;\n@@ -1362,7 +1362,7 @@ QUERY id: 0\n                   FUNCTION id: 11, function_name: count, function_type: aggregate, result_type: UInt64\n                     ARGUMENTS\n                       LIST id: 12, nodes: 1\n-                        COLUMN id: 6, column_name: uint64, result_type: UInt64, source_id: 7\n+                        COLUMN id: 13, column_name: uint64, result_type: UInt64, source_id: 7\n   JOIN TREE\n     TABLE id: 7, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT 2.11 * count(uint64) + sum(uint64) From test_table);\n@@ -1385,7 +1385,7 @@ QUERY id: 0\n             FUNCTION id: 11, function_name: sum, function_type: aggregate, result_type: UInt64\n               ARGUMENTS\n                 LIST id: 12, nodes: 1\n-                  COLUMN id: 9, column_name: uint64, result_type: UInt64, source_id: 10\n+                  COLUMN id: 13, column_name: uint64, result_type: UInt64, source_id: 10\n   JOIN TREE\n     TABLE id: 10, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT sum(uint64) - 2.11 * count(uint64) From test_table);\n@@ -1408,7 +1408,7 @@ QUERY id: 0\n                   FUNCTION id: 11, function_name: count, function_type: aggregate, result_type: UInt64\n                     ARGUMENTS\n                       LIST id: 12, nodes: 1\n-                        COLUMN id: 6, column_name: uint64, result_type: UInt64, source_id: 7\n+                        COLUMN id: 13, column_name: uint64, result_type: UInt64, source_id: 7\n   JOIN TREE\n     TABLE id: 7, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT 2.11 * count(uint64) - sum(uint64) From test_table);\n@@ -1431,7 +1431,7 @@ QUERY id: 0\n             FUNCTION id: 11, function_name: sum, function_type: aggregate, result_type: UInt64\n               ARGUMENTS\n                 LIST id: 12, nodes: 1\n-                  COLUMN id: 9, column_name: uint64, result_type: UInt64, source_id: 10\n+                  COLUMN id: 13, column_name: uint64, result_type: UInt64, source_id: 10\n   JOIN TREE\n     TABLE id: 10, alias: __table1, table_name: default.test_table\n SELECT sum(uint64 + 2) From test_table;\n@@ -1562,7 +1562,7 @@ QUERY id: 0\n                   FUNCTION id: 11, function_name: count, function_type: aggregate, result_type: UInt64\n                     ARGUMENTS\n                       LIST id: 12, nodes: 1\n-                        COLUMN id: 6, column_name: uint64, result_type: UInt64, source_id: 7\n+                        COLUMN id: 13, column_name: uint64, result_type: UInt64, source_id: 7\n   JOIN TREE\n     TABLE id: 7, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT 2 * count(uint64) + sum(uint64) From test_table);\n@@ -1585,7 +1585,7 @@ QUERY id: 0\n             FUNCTION id: 11, function_name: sum, function_type: aggregate, result_type: UInt64\n               ARGUMENTS\n                 LIST id: 12, nodes: 1\n-                  COLUMN id: 9, column_name: uint64, result_type: UInt64, source_id: 10\n+                  COLUMN id: 13, column_name: uint64, result_type: UInt64, source_id: 10\n   JOIN TREE\n     TABLE id: 10, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT sum(uint64) - 2 * count(uint64) From test_table);\n@@ -1608,7 +1608,7 @@ QUERY id: 0\n                   FUNCTION id: 11, function_name: count, function_type: aggregate, result_type: UInt64\n                     ARGUMENTS\n                       LIST id: 12, nodes: 1\n-                        COLUMN id: 6, column_name: uint64, result_type: UInt64, source_id: 7\n+                        COLUMN id: 13, column_name: uint64, result_type: UInt64, source_id: 7\n   JOIN TREE\n     TABLE id: 7, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT 2 * count(uint64) - sum(uint64) From test_table);\n@@ -1631,7 +1631,7 @@ QUERY id: 0\n             FUNCTION id: 11, function_name: sum, function_type: aggregate, result_type: UInt64\n               ARGUMENTS\n                 LIST id: 12, nodes: 1\n-                  COLUMN id: 9, column_name: uint64, result_type: UInt64, source_id: 10\n+                  COLUMN id: 13, column_name: uint64, result_type: UInt64, source_id: 10\n   JOIN TREE\n     TABLE id: 10, alias: __table1, table_name: default.test_table\n SELECT sum(float64 + 2) From test_table;\n@@ -1762,7 +1762,7 @@ QUERY id: 0\n                   FUNCTION id: 11, function_name: count, function_type: aggregate, result_type: UInt64\n                     ARGUMENTS\n                       LIST id: 12, nodes: 1\n-                        COLUMN id: 6, column_name: float64, result_type: Float64, source_id: 7\n+                        COLUMN id: 13, column_name: float64, result_type: Float64, source_id: 7\n   JOIN TREE\n     TABLE id: 7, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT 2 * count(float64) + sum(float64) From test_table);\n@@ -1785,7 +1785,7 @@ QUERY id: 0\n             FUNCTION id: 11, function_name: sum, function_type: aggregate, result_type: Float64\n               ARGUMENTS\n                 LIST id: 12, nodes: 1\n-                  COLUMN id: 9, column_name: float64, result_type: Float64, source_id: 10\n+                  COLUMN id: 13, column_name: float64, result_type: Float64, source_id: 10\n   JOIN TREE\n     TABLE id: 10, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT sum(float64) - 2 * count(float64) From test_table);\n@@ -1808,7 +1808,7 @@ QUERY id: 0\n                   FUNCTION id: 11, function_name: count, function_type: aggregate, result_type: UInt64\n                     ARGUMENTS\n                       LIST id: 12, nodes: 1\n-                        COLUMN id: 6, column_name: float64, result_type: Float64, source_id: 7\n+                        COLUMN id: 13, column_name: float64, result_type: Float64, source_id: 7\n   JOIN TREE\n     TABLE id: 7, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT 2 * count(float64) - sum(float64) From test_table);\n@@ -1831,7 +1831,7 @@ QUERY id: 0\n             FUNCTION id: 11, function_name: sum, function_type: aggregate, result_type: Float64\n               ARGUMENTS\n                 LIST id: 12, nodes: 1\n-                  COLUMN id: 9, column_name: float64, result_type: Float64, source_id: 10\n+                  COLUMN id: 13, column_name: float64, result_type: Float64, source_id: 10\n   JOIN TREE\n     TABLE id: 10, alias: __table1, table_name: default.test_table\n SELECT sum(decimal32 + 2) From test_table;\n@@ -1962,7 +1962,7 @@ QUERY id: 0\n                   FUNCTION id: 11, function_name: count, function_type: aggregate, result_type: UInt64\n                     ARGUMENTS\n                       LIST id: 12, nodes: 1\n-                        COLUMN id: 6, column_name: decimal32, result_type: Decimal(9, 5), source_id: 7\n+                        COLUMN id: 13, column_name: decimal32, result_type: Decimal(9, 5), source_id: 7\n   JOIN TREE\n     TABLE id: 7, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT 2 * count(decimal32) + sum(decimal32) From test_table);\n@@ -1985,7 +1985,7 @@ QUERY id: 0\n             FUNCTION id: 11, function_name: sum, function_type: aggregate, result_type: Decimal(38, 5)\n               ARGUMENTS\n                 LIST id: 12, nodes: 1\n-                  COLUMN id: 9, column_name: decimal32, result_type: Decimal(9, 5), source_id: 10\n+                  COLUMN id: 13, column_name: decimal32, result_type: Decimal(9, 5), source_id: 10\n   JOIN TREE\n     TABLE id: 10, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT sum(decimal32) - 2 * count(decimal32) From test_table);\n@@ -2008,7 +2008,7 @@ QUERY id: 0\n                   FUNCTION id: 11, function_name: count, function_type: aggregate, result_type: UInt64\n                     ARGUMENTS\n                       LIST id: 12, nodes: 1\n-                        COLUMN id: 6, column_name: decimal32, result_type: Decimal(9, 5), source_id: 7\n+                        COLUMN id: 13, column_name: decimal32, result_type: Decimal(9, 5), source_id: 7\n   JOIN TREE\n     TABLE id: 7, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT 2 * count(decimal32) - sum(decimal32) From test_table);\n@@ -2031,7 +2031,7 @@ QUERY id: 0\n             FUNCTION id: 11, function_name: sum, function_type: aggregate, result_type: Decimal(38, 5)\n               ARGUMENTS\n                 LIST id: 12, nodes: 1\n-                  COLUMN id: 9, column_name: decimal32, result_type: Decimal(9, 5), source_id: 10\n+                  COLUMN id: 13, column_name: decimal32, result_type: Decimal(9, 5), source_id: 10\n   JOIN TREE\n     TABLE id: 10, alias: __table1, table_name: default.test_table\n SELECT sum(uint64 + 2) + sum(uint64 + 3) From test_table;\n@@ -2082,15 +2082,15 @@ QUERY id: 0\n                   FUNCTION id: 17, function_name: sum, function_type: aggregate, result_type: UInt64\n                     ARGUMENTS\n                       LIST id: 18, nodes: 1\n-                        COLUMN id: 8, column_name: uint64, result_type: UInt64, source_id: 9\n-                  FUNCTION id: 19, function_name: multiply, function_type: ordinary, result_type: UInt64\n+                        COLUMN id: 19, column_name: uint64, result_type: UInt64, source_id: 9\n+                  FUNCTION id: 20, function_name: multiply, function_type: ordinary, result_type: UInt64\n                     ARGUMENTS\n-                      LIST id: 20, nodes: 2\n-                        CONSTANT id: 21, constant_value: UInt64_3, constant_value_type: UInt8\n-                        FUNCTION id: 22, function_name: count, function_type: aggregate, result_type: UInt64\n+                      LIST id: 21, nodes: 2\n+                        CONSTANT id: 22, constant_value: UInt64_3, constant_value_type: UInt8\n+                        FUNCTION id: 23, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n-                            LIST id: 23, nodes: 1\n-                              COLUMN id: 8, column_name: uint64, result_type: UInt64, source_id: 9\n+                            LIST id: 24, nodes: 1\n+                              COLUMN id: 19, column_name: uint64, result_type: UInt64, source_id: 9\n   JOIN TREE\n     TABLE id: 9, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT sum(uint64 + 2) - sum(uint64 + 3) From test_table);\n@@ -2123,15 +2123,15 @@ QUERY id: 0\n                   FUNCTION id: 17, function_name: sum, function_type: aggregate, result_type: UInt64\n                     ARGUMENTS\n                       LIST id: 18, nodes: 1\n-                        COLUMN id: 8, column_name: uint64, result_type: UInt64, source_id: 9\n-                  FUNCTION id: 19, function_name: multiply, function_type: ordinary, result_type: UInt64\n+                        COLUMN id: 19, column_name: uint64, result_type: UInt64, source_id: 9\n+                  FUNCTION id: 20, function_name: multiply, function_type: ordinary, result_type: UInt64\n                     ARGUMENTS\n-                      LIST id: 20, nodes: 2\n-                        CONSTANT id: 21, constant_value: UInt64_3, constant_value_type: UInt8\n-                        FUNCTION id: 22, function_name: count, function_type: aggregate, result_type: UInt64\n+                      LIST id: 21, nodes: 2\n+                        CONSTANT id: 22, constant_value: UInt64_3, constant_value_type: UInt8\n+                        FUNCTION id: 23, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n-                            LIST id: 23, nodes: 1\n-                              COLUMN id: 8, column_name: uint64, result_type: UInt64, source_id: 9\n+                            LIST id: 24, nodes: 1\n+                              COLUMN id: 19, column_name: uint64, result_type: UInt64, source_id: 9\n   JOIN TREE\n     TABLE id: 9, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT sum(uint64 - 2) + sum(uint64 - 3) From test_table);\n@@ -2164,15 +2164,15 @@ QUERY id: 0\n                   FUNCTION id: 17, function_name: sum, function_type: aggregate, result_type: UInt64\n                     ARGUMENTS\n                       LIST id: 18, nodes: 1\n-                        COLUMN id: 8, column_name: uint64, result_type: UInt64, source_id: 9\n-                  FUNCTION id: 19, function_name: multiply, function_type: ordinary, result_type: UInt64\n+                        COLUMN id: 19, column_name: uint64, result_type: UInt64, source_id: 9\n+                  FUNCTION id: 20, function_name: multiply, function_type: ordinary, result_type: UInt64\n                     ARGUMENTS\n-                      LIST id: 20, nodes: 2\n-                        CONSTANT id: 21, constant_value: UInt64_3, constant_value_type: UInt8\n-                        FUNCTION id: 22, function_name: count, function_type: aggregate, result_type: UInt64\n+                      LIST id: 21, nodes: 2\n+                        CONSTANT id: 22, constant_value: UInt64_3, constant_value_type: UInt8\n+                        FUNCTION id: 23, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n-                            LIST id: 23, nodes: 1\n-                              COLUMN id: 8, column_name: uint64, result_type: UInt64, source_id: 9\n+                            LIST id: 24, nodes: 1\n+                              COLUMN id: 19, column_name: uint64, result_type: UInt64, source_id: 9\n   JOIN TREE\n     TABLE id: 9, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT sum(uint64 - 2) - sum(uint64 - 3) From test_table);\n@@ -2205,15 +2205,15 @@ QUERY id: 0\n                   FUNCTION id: 17, function_name: sum, function_type: aggregate, result_type: UInt64\n                     ARGUMENTS\n                       LIST id: 18, nodes: 1\n-                        COLUMN id: 8, column_name: uint64, result_type: UInt64, source_id: 9\n-                  FUNCTION id: 19, function_name: multiply, function_type: ordinary, result_type: UInt64\n+                        COLUMN id: 19, column_name: uint64, result_type: UInt64, source_id: 9\n+                  FUNCTION id: 20, function_name: multiply, function_type: ordinary, result_type: UInt64\n                     ARGUMENTS\n-                      LIST id: 20, nodes: 2\n-                        CONSTANT id: 21, constant_value: UInt64_3, constant_value_type: UInt8\n-                        FUNCTION id: 22, function_name: count, function_type: aggregate, result_type: UInt64\n+                      LIST id: 21, nodes: 2\n+                        CONSTANT id: 22, constant_value: UInt64_3, constant_value_type: UInt8\n+                        FUNCTION id: 23, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n-                            LIST id: 23, nodes: 1\n-                              COLUMN id: 8, column_name: uint64, result_type: UInt64, source_id: 9\n+                            LIST id: 24, nodes: 1\n+                              COLUMN id: 19, column_name: uint64, result_type: UInt64, source_id: 9\n   JOIN TREE\n     TABLE id: 9, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT sum(2 - uint64) - sum(3 - uint64) From test_table);\n@@ -2250,11 +2250,11 @@ QUERY id: 0\n                         FUNCTION id: 20, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n                             LIST id: 21, nodes: 1\n-                              COLUMN id: 11, column_name: uint64, result_type: UInt64, source_id: 12\n-                  FUNCTION id: 22, function_name: sum, function_type: aggregate, result_type: UInt64\n+                              COLUMN id: 22, column_name: uint64, result_type: UInt64, source_id: 12\n+                  FUNCTION id: 23, function_name: sum, function_type: aggregate, result_type: UInt64\n                     ARGUMENTS\n-                      LIST id: 23, nodes: 1\n-                        COLUMN id: 11, column_name: uint64, result_type: UInt64, source_id: 12\n+                      LIST id: 24, nodes: 1\n+                        COLUMN id: 22, column_name: uint64, result_type: UInt64, source_id: 12\n   JOIN TREE\n     TABLE id: 12, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT (sum(uint64) + 2 * count(uint64)) + (sum(uint64) + 3 * count(uint64)) From test_table);\n@@ -2280,22 +2280,22 @@ QUERY id: 0\n                         FUNCTION id: 13, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n                             LIST id: 14, nodes: 1\n-                              COLUMN id: 8, column_name: uint64, result_type: UInt64, source_id: 9\n-            FUNCTION id: 15, function_name: plus, function_type: ordinary, result_type: UInt64\n+                              COLUMN id: 15, column_name: uint64, result_type: UInt64, source_id: 9\n+            FUNCTION id: 16, function_name: plus, function_type: ordinary, result_type: UInt64\n               ARGUMENTS\n-                LIST id: 16, nodes: 2\n-                  FUNCTION id: 17, function_name: sum, function_type: aggregate, result_type: UInt64\n+                LIST id: 17, nodes: 2\n+                  FUNCTION id: 18, function_name: sum, function_type: aggregate, result_type: UInt64\n                     ARGUMENTS\n-                      LIST id: 18, nodes: 1\n-                        COLUMN id: 8, column_name: uint64, result_type: UInt64, source_id: 9\n-                  FUNCTION id: 19, function_name: multiply, function_type: ordinary, result_type: UInt64\n+                      LIST id: 19, nodes: 1\n+                        COLUMN id: 20, column_name: uint64, result_type: UInt64, source_id: 9\n+                  FUNCTION id: 21, function_name: multiply, function_type: ordinary, result_type: UInt64\n                     ARGUMENTS\n-                      LIST id: 20, nodes: 2\n-                        CONSTANT id: 21, constant_value: UInt64_3, constant_value_type: UInt8\n-                        FUNCTION id: 22, function_name: count, function_type: aggregate, result_type: UInt64\n+                      LIST id: 22, nodes: 2\n+                        CONSTANT id: 23, constant_value: UInt64_3, constant_value_type: UInt8\n+                        FUNCTION id: 24, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n-                            LIST id: 23, nodes: 1\n-                              COLUMN id: 8, column_name: uint64, result_type: UInt64, source_id: 9\n+                            LIST id: 25, nodes: 1\n+                              COLUMN id: 26, column_name: uint64, result_type: UInt64, source_id: 9\n   JOIN TREE\n     TABLE id: 9, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT (sum(uint64) + 2 * count(uint64)) - (sum(uint64) + 3 * count(uint64)) From test_table);\n@@ -2321,22 +2321,22 @@ QUERY id: 0\n                         FUNCTION id: 13, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n                             LIST id: 14, nodes: 1\n-                              COLUMN id: 8, column_name: uint64, result_type: UInt64, source_id: 9\n-            FUNCTION id: 15, function_name: plus, function_type: ordinary, result_type: UInt64\n+                              COLUMN id: 15, column_name: uint64, result_type: UInt64, source_id: 9\n+            FUNCTION id: 16, function_name: plus, function_type: ordinary, result_type: UInt64\n               ARGUMENTS\n-                LIST id: 16, nodes: 2\n-                  FUNCTION id: 17, function_name: sum, function_type: aggregate, result_type: UInt64\n+                LIST id: 17, nodes: 2\n+                  FUNCTION id: 18, function_name: sum, function_type: aggregate, result_type: UInt64\n                     ARGUMENTS\n-                      LIST id: 18, nodes: 1\n-                        COLUMN id: 8, column_name: uint64, result_type: UInt64, source_id: 9\n-                  FUNCTION id: 19, function_name: multiply, function_type: ordinary, result_type: UInt64\n+                      LIST id: 19, nodes: 1\n+                        COLUMN id: 20, column_name: uint64, result_type: UInt64, source_id: 9\n+                  FUNCTION id: 21, function_name: multiply, function_type: ordinary, result_type: UInt64\n                     ARGUMENTS\n-                      LIST id: 20, nodes: 2\n-                        CONSTANT id: 21, constant_value: UInt64_3, constant_value_type: UInt8\n-                        FUNCTION id: 22, function_name: count, function_type: aggregate, result_type: UInt64\n+                      LIST id: 22, nodes: 2\n+                        CONSTANT id: 23, constant_value: UInt64_3, constant_value_type: UInt8\n+                        FUNCTION id: 24, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n-                            LIST id: 23, nodes: 1\n-                              COLUMN id: 8, column_name: uint64, result_type: UInt64, source_id: 9\n+                            LIST id: 25, nodes: 1\n+                              COLUMN id: 26, column_name: uint64, result_type: UInt64, source_id: 9\n   JOIN TREE\n     TABLE id: 9, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT (sum(uint64) - 2 * count(uint64)) + (sum(uint64) - 3 * count(uint64)) From test_table);\n@@ -2362,22 +2362,22 @@ QUERY id: 0\n                         FUNCTION id: 13, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n                             LIST id: 14, nodes: 1\n-                              COLUMN id: 8, column_name: uint64, result_type: UInt64, source_id: 9\n-            FUNCTION id: 15, function_name: minus, function_type: ordinary, result_type: Int64\n+                              COLUMN id: 15, column_name: uint64, result_type: UInt64, source_id: 9\n+            FUNCTION id: 16, function_name: minus, function_type: ordinary, result_type: Int64\n               ARGUMENTS\n-                LIST id: 16, nodes: 2\n-                  FUNCTION id: 17, function_name: sum, function_type: aggregate, result_type: UInt64\n+                LIST id: 17, nodes: 2\n+                  FUNCTION id: 18, function_name: sum, function_type: aggregate, result_type: UInt64\n                     ARGUMENTS\n-                      LIST id: 18, nodes: 1\n-                        COLUMN id: 8, column_name: uint64, result_type: UInt64, source_id: 9\n-                  FUNCTION id: 19, function_name: multiply, function_type: ordinary, result_type: UInt64\n+                      LIST id: 19, nodes: 1\n+                        COLUMN id: 20, column_name: uint64, result_type: UInt64, source_id: 9\n+                  FUNCTION id: 21, function_name: multiply, function_type: ordinary, result_type: UInt64\n                     ARGUMENTS\n-                      LIST id: 20, nodes: 2\n-                        CONSTANT id: 21, constant_value: UInt64_3, constant_value_type: UInt8\n-                        FUNCTION id: 22, function_name: count, function_type: aggregate, result_type: UInt64\n+                      LIST id: 22, nodes: 2\n+                        CONSTANT id: 23, constant_value: UInt64_3, constant_value_type: UInt8\n+                        FUNCTION id: 24, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n-                            LIST id: 23, nodes: 1\n-                              COLUMN id: 8, column_name: uint64, result_type: UInt64, source_id: 9\n+                            LIST id: 25, nodes: 1\n+                              COLUMN id: 26, column_name: uint64, result_type: UInt64, source_id: 9\n   JOIN TREE\n     TABLE id: 9, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT (sum(uint64) - 2 * count(uint64)) - (sum(uint64) - 3 * count(uint64)) From test_table);\n@@ -2403,22 +2403,22 @@ QUERY id: 0\n                         FUNCTION id: 13, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n                             LIST id: 14, nodes: 1\n-                              COLUMN id: 8, column_name: uint64, result_type: UInt64, source_id: 9\n-            FUNCTION id: 15, function_name: minus, function_type: ordinary, result_type: Int64\n+                              COLUMN id: 15, column_name: uint64, result_type: UInt64, source_id: 9\n+            FUNCTION id: 16, function_name: minus, function_type: ordinary, result_type: Int64\n               ARGUMENTS\n-                LIST id: 16, nodes: 2\n-                  FUNCTION id: 17, function_name: sum, function_type: aggregate, result_type: UInt64\n+                LIST id: 17, nodes: 2\n+                  FUNCTION id: 18, function_name: sum, function_type: aggregate, result_type: UInt64\n                     ARGUMENTS\n-                      LIST id: 18, nodes: 1\n-                        COLUMN id: 8, column_name: uint64, result_type: UInt64, source_id: 9\n-                  FUNCTION id: 19, function_name: multiply, function_type: ordinary, result_type: UInt64\n+                      LIST id: 19, nodes: 1\n+                        COLUMN id: 20, column_name: uint64, result_type: UInt64, source_id: 9\n+                  FUNCTION id: 21, function_name: multiply, function_type: ordinary, result_type: UInt64\n                     ARGUMENTS\n-                      LIST id: 20, nodes: 2\n-                        CONSTANT id: 21, constant_value: UInt64_3, constant_value_type: UInt8\n-                        FUNCTION id: 22, function_name: count, function_type: aggregate, result_type: UInt64\n+                      LIST id: 22, nodes: 2\n+                        CONSTANT id: 23, constant_value: UInt64_3, constant_value_type: UInt8\n+                        FUNCTION id: 24, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n-                            LIST id: 23, nodes: 1\n-                              COLUMN id: 8, column_name: uint64, result_type: UInt64, source_id: 9\n+                            LIST id: 25, nodes: 1\n+                              COLUMN id: 26, column_name: uint64, result_type: UInt64, source_id: 9\n   JOIN TREE\n     TABLE id: 9, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT (2 * count(uint64) - sum(uint64)) + (3 * count(uint64) - sum(uint64)) From test_table);\n@@ -2444,22 +2444,22 @@ QUERY id: 0\n                   FUNCTION id: 13, function_name: sum, function_type: aggregate, result_type: UInt64\n                     ARGUMENTS\n                       LIST id: 14, nodes: 1\n-                        COLUMN id: 11, column_name: uint64, result_type: UInt64, source_id: 12\n-            FUNCTION id: 15, function_name: minus, function_type: ordinary, result_type: Int64\n+                        COLUMN id: 15, column_name: uint64, result_type: UInt64, source_id: 12\n+            FUNCTION id: 16, function_name: minus, function_type: ordinary, result_type: Int64\n               ARGUMENTS\n-                LIST id: 16, nodes: 2\n-                  FUNCTION id: 17, function_name: multiply, function_type: ordinary, result_type: UInt64\n+                LIST id: 17, nodes: 2\n+                  FUNCTION id: 18, function_name: multiply, function_type: ordinary, result_type: UInt64\n                     ARGUMENTS\n-                      LIST id: 18, nodes: 2\n-                        CONSTANT id: 19, constant_value: UInt64_3, constant_value_type: UInt8\n-                        FUNCTION id: 20, function_name: count, function_type: aggregate, result_type: UInt64\n+                      LIST id: 19, nodes: 2\n+                        CONSTANT id: 20, constant_value: UInt64_3, constant_value_type: UInt8\n+                        FUNCTION id: 21, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n-                            LIST id: 21, nodes: 1\n-                              COLUMN id: 11, column_name: uint64, result_type: UInt64, source_id: 12\n-                  FUNCTION id: 22, function_name: sum, function_type: aggregate, result_type: UInt64\n+                            LIST id: 22, nodes: 1\n+                              COLUMN id: 23, column_name: uint64, result_type: UInt64, source_id: 12\n+                  FUNCTION id: 24, function_name: sum, function_type: aggregate, result_type: UInt64\n                     ARGUMENTS\n-                      LIST id: 23, nodes: 1\n-                        COLUMN id: 11, column_name: uint64, result_type: UInt64, source_id: 12\n+                      LIST id: 25, nodes: 1\n+                        COLUMN id: 26, column_name: uint64, result_type: UInt64, source_id: 12\n   JOIN TREE\n     TABLE id: 12, alias: __table1, table_name: default.test_table\n SELECT sum(float64 + 2) + sum(float64 + 3) From test_table;\n@@ -2512,15 +2512,15 @@ QUERY id: 0\n                   FUNCTION id: 17, function_name: sum, function_type: aggregate, result_type: Float64\n                     ARGUMENTS\n                       LIST id: 18, nodes: 1\n-                        COLUMN id: 8, column_name: float64, result_type: Float64, source_id: 9\n-                  FUNCTION id: 19, function_name: multiply, function_type: ordinary, result_type: UInt64\n+                        COLUMN id: 19, column_name: float64, result_type: Float64, source_id: 9\n+                  FUNCTION id: 20, function_name: multiply, function_type: ordinary, result_type: UInt64\n                     ARGUMENTS\n-                      LIST id: 20, nodes: 2\n-                        CONSTANT id: 21, constant_value: UInt64_3, constant_value_type: UInt8\n-                        FUNCTION id: 22, function_name: count, function_type: aggregate, result_type: UInt64\n+                      LIST id: 21, nodes: 2\n+                        CONSTANT id: 22, constant_value: UInt64_3, constant_value_type: UInt8\n+                        FUNCTION id: 23, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n-                            LIST id: 23, nodes: 1\n-                              COLUMN id: 8, column_name: float64, result_type: Float64, source_id: 9\n+                            LIST id: 24, nodes: 1\n+                              COLUMN id: 19, column_name: float64, result_type: Float64, source_id: 9\n   JOIN TREE\n     TABLE id: 9, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT sum(float64 + 2) - sum(float64 + 3) From test_table);\n@@ -2553,15 +2553,15 @@ QUERY id: 0\n                   FUNCTION id: 17, function_name: sum, function_type: aggregate, result_type: Float64\n                     ARGUMENTS\n                       LIST id: 18, nodes: 1\n-                        COLUMN id: 8, column_name: float64, result_type: Float64, source_id: 9\n-                  FUNCTION id: 19, function_name: multiply, function_type: ordinary, result_type: UInt64\n+                        COLUMN id: 19, column_name: float64, result_type: Float64, source_id: 9\n+                  FUNCTION id: 20, function_name: multiply, function_type: ordinary, result_type: UInt64\n                     ARGUMENTS\n-                      LIST id: 20, nodes: 2\n-                        CONSTANT id: 21, constant_value: UInt64_3, constant_value_type: UInt8\n-                        FUNCTION id: 22, function_name: count, function_type: aggregate, result_type: UInt64\n+                      LIST id: 21, nodes: 2\n+                        CONSTANT id: 22, constant_value: UInt64_3, constant_value_type: UInt8\n+                        FUNCTION id: 23, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n-                            LIST id: 23, nodes: 1\n-                              COLUMN id: 8, column_name: float64, result_type: Float64, source_id: 9\n+                            LIST id: 24, nodes: 1\n+                              COLUMN id: 19, column_name: float64, result_type: Float64, source_id: 9\n   JOIN TREE\n     TABLE id: 9, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT sum(float64 - 2) + sum(float64 - 3) From test_table);\n@@ -2594,15 +2594,15 @@ QUERY id: 0\n                   FUNCTION id: 17, function_name: sum, function_type: aggregate, result_type: Float64\n                     ARGUMENTS\n                       LIST id: 18, nodes: 1\n-                        COLUMN id: 8, column_name: float64, result_type: Float64, source_id: 9\n-                  FUNCTION id: 19, function_name: multiply, function_type: ordinary, result_type: UInt64\n+                        COLUMN id: 19, column_name: float64, result_type: Float64, source_id: 9\n+                  FUNCTION id: 20, function_name: multiply, function_type: ordinary, result_type: UInt64\n                     ARGUMENTS\n-                      LIST id: 20, nodes: 2\n-                        CONSTANT id: 21, constant_value: UInt64_3, constant_value_type: UInt8\n-                        FUNCTION id: 22, function_name: count, function_type: aggregate, result_type: UInt64\n+                      LIST id: 21, nodes: 2\n+                        CONSTANT id: 22, constant_value: UInt64_3, constant_value_type: UInt8\n+                        FUNCTION id: 23, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n-                            LIST id: 23, nodes: 1\n-                              COLUMN id: 8, column_name: float64, result_type: Float64, source_id: 9\n+                            LIST id: 24, nodes: 1\n+                              COLUMN id: 19, column_name: float64, result_type: Float64, source_id: 9\n   JOIN TREE\n     TABLE id: 9, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT sum(float64 - 2) - sum(float64 - 3) From test_table);\n@@ -2635,15 +2635,15 @@ QUERY id: 0\n                   FUNCTION id: 17, function_name: sum, function_type: aggregate, result_type: Float64\n                     ARGUMENTS\n                       LIST id: 18, nodes: 1\n-                        COLUMN id: 8, column_name: float64, result_type: Float64, source_id: 9\n-                  FUNCTION id: 19, function_name: multiply, function_type: ordinary, result_type: UInt64\n+                        COLUMN id: 19, column_name: float64, result_type: Float64, source_id: 9\n+                  FUNCTION id: 20, function_name: multiply, function_type: ordinary, result_type: UInt64\n                     ARGUMENTS\n-                      LIST id: 20, nodes: 2\n-                        CONSTANT id: 21, constant_value: UInt64_3, constant_value_type: UInt8\n-                        FUNCTION id: 22, function_name: count, function_type: aggregate, result_type: UInt64\n+                      LIST id: 21, nodes: 2\n+                        CONSTANT id: 22, constant_value: UInt64_3, constant_value_type: UInt8\n+                        FUNCTION id: 23, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n-                            LIST id: 23, nodes: 1\n-                              COLUMN id: 8, column_name: float64, result_type: Float64, source_id: 9\n+                            LIST id: 24, nodes: 1\n+                              COLUMN id: 19, column_name: float64, result_type: Float64, source_id: 9\n   JOIN TREE\n     TABLE id: 9, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT sum(2 - float64) - sum(3 - float64) From test_table);\n@@ -2680,11 +2680,11 @@ QUERY id: 0\n                         FUNCTION id: 20, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n                             LIST id: 21, nodes: 1\n-                              COLUMN id: 11, column_name: float64, result_type: Float64, source_id: 12\n-                  FUNCTION id: 22, function_name: sum, function_type: aggregate, result_type: Float64\n+                              COLUMN id: 22, column_name: float64, result_type: Float64, source_id: 12\n+                  FUNCTION id: 23, function_name: sum, function_type: aggregate, result_type: Float64\n                     ARGUMENTS\n-                      LIST id: 23, nodes: 1\n-                        COLUMN id: 11, column_name: float64, result_type: Float64, source_id: 12\n+                      LIST id: 24, nodes: 1\n+                        COLUMN id: 22, column_name: float64, result_type: Float64, source_id: 12\n   JOIN TREE\n     TABLE id: 12, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT (sum(float64) + 2 * count(float64)) + (sum(float64) + 3 * count(float64)) From test_table);\n@@ -2710,22 +2710,22 @@ QUERY id: 0\n                         FUNCTION id: 13, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n                             LIST id: 14, nodes: 1\n-                              COLUMN id: 8, column_name: float64, result_type: Float64, source_id: 9\n-            FUNCTION id: 15, function_name: plus, function_type: ordinary, result_type: Float64\n+                              COLUMN id: 15, column_name: float64, result_type: Float64, source_id: 9\n+            FUNCTION id: 16, function_name: plus, function_type: ordinary, result_type: Float64\n               ARGUMENTS\n-                LIST id: 16, nodes: 2\n-                  FUNCTION id: 17, function_name: sum, function_type: aggregate, result_type: Float64\n+                LIST id: 17, nodes: 2\n+                  FUNCTION id: 18, function_name: sum, function_type: aggregate, result_type: Float64\n                     ARGUMENTS\n-                      LIST id: 18, nodes: 1\n-                        COLUMN id: 8, column_name: float64, result_type: Float64, source_id: 9\n-                  FUNCTION id: 19, function_name: multiply, function_type: ordinary, result_type: UInt64\n+                      LIST id: 19, nodes: 1\n+                        COLUMN id: 20, column_name: float64, result_type: Float64, source_id: 9\n+                  FUNCTION id: 21, function_name: multiply, function_type: ordinary, result_type: UInt64\n                     ARGUMENTS\n-                      LIST id: 20, nodes: 2\n-                        CONSTANT id: 21, constant_value: UInt64_3, constant_value_type: UInt8\n-                        FUNCTION id: 22, function_name: count, function_type: aggregate, result_type: UInt64\n+                      LIST id: 22, nodes: 2\n+                        CONSTANT id: 23, constant_value: UInt64_3, constant_value_type: UInt8\n+                        FUNCTION id: 24, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n-                            LIST id: 23, nodes: 1\n-                              COLUMN id: 8, column_name: float64, result_type: Float64, source_id: 9\n+                            LIST id: 25, nodes: 1\n+                              COLUMN id: 26, column_name: float64, result_type: Float64, source_id: 9\n   JOIN TREE\n     TABLE id: 9, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT (sum(float64) + 2 * count(float64)) - (sum(float64) + 3 * count(float64)) From test_table);\n@@ -2751,22 +2751,22 @@ QUERY id: 0\n                         FUNCTION id: 13, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n                             LIST id: 14, nodes: 1\n-                              COLUMN id: 8, column_name: float64, result_type: Float64, source_id: 9\n-            FUNCTION id: 15, function_name: plus, function_type: ordinary, result_type: Float64\n+                              COLUMN id: 15, column_name: float64, result_type: Float64, source_id: 9\n+            FUNCTION id: 16, function_name: plus, function_type: ordinary, result_type: Float64\n               ARGUMENTS\n-                LIST id: 16, nodes: 2\n-                  FUNCTION id: 17, function_name: sum, function_type: aggregate, result_type: Float64\n+                LIST id: 17, nodes: 2\n+                  FUNCTION id: 18, function_name: sum, function_type: aggregate, result_type: Float64\n                     ARGUMENTS\n-                      LIST id: 18, nodes: 1\n-                        COLUMN id: 8, column_name: float64, result_type: Float64, source_id: 9\n-                  FUNCTION id: 19, function_name: multiply, function_type: ordinary, result_type: UInt64\n+                      LIST id: 19, nodes: 1\n+                        COLUMN id: 20, column_name: float64, result_type: Float64, source_id: 9\n+                  FUNCTION id: 21, function_name: multiply, function_type: ordinary, result_type: UInt64\n                     ARGUMENTS\n-                      LIST id: 20, nodes: 2\n-                        CONSTANT id: 21, constant_value: UInt64_3, constant_value_type: UInt8\n-                        FUNCTION id: 22, function_name: count, function_type: aggregate, result_type: UInt64\n+                      LIST id: 22, nodes: 2\n+                        CONSTANT id: 23, constant_value: UInt64_3, constant_value_type: UInt8\n+                        FUNCTION id: 24, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n-                            LIST id: 23, nodes: 1\n-                              COLUMN id: 8, column_name: float64, result_type: Float64, source_id: 9\n+                            LIST id: 25, nodes: 1\n+                              COLUMN id: 26, column_name: float64, result_type: Float64, source_id: 9\n   JOIN TREE\n     TABLE id: 9, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT (sum(float64) - 2 * count(float64)) + (sum(float64) - 3 * count(float64)) From test_table);\n@@ -2792,22 +2792,22 @@ QUERY id: 0\n                         FUNCTION id: 13, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n                             LIST id: 14, nodes: 1\n-                              COLUMN id: 8, column_name: float64, result_type: Float64, source_id: 9\n-            FUNCTION id: 15, function_name: minus, function_type: ordinary, result_type: Float64\n+                              COLUMN id: 15, column_name: float64, result_type: Float64, source_id: 9\n+            FUNCTION id: 16, function_name: minus, function_type: ordinary, result_type: Float64\n               ARGUMENTS\n-                LIST id: 16, nodes: 2\n-                  FUNCTION id: 17, function_name: sum, function_type: aggregate, result_type: Float64\n+                LIST id: 17, nodes: 2\n+                  FUNCTION id: 18, function_name: sum, function_type: aggregate, result_type: Float64\n                     ARGUMENTS\n-                      LIST id: 18, nodes: 1\n-                        COLUMN id: 8, column_name: float64, result_type: Float64, source_id: 9\n-                  FUNCTION id: 19, function_name: multiply, function_type: ordinary, result_type: UInt64\n+                      LIST id: 19, nodes: 1\n+                        COLUMN id: 20, column_name: float64, result_type: Float64, source_id: 9\n+                  FUNCTION id: 21, function_name: multiply, function_type: ordinary, result_type: UInt64\n                     ARGUMENTS\n-                      LIST id: 20, nodes: 2\n-                        CONSTANT id: 21, constant_value: UInt64_3, constant_value_type: UInt8\n-                        FUNCTION id: 22, function_name: count, function_type: aggregate, result_type: UInt64\n+                      LIST id: 22, nodes: 2\n+                        CONSTANT id: 23, constant_value: UInt64_3, constant_value_type: UInt8\n+                        FUNCTION id: 24, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n-                            LIST id: 23, nodes: 1\n-                              COLUMN id: 8, column_name: float64, result_type: Float64, source_id: 9\n+                            LIST id: 25, nodes: 1\n+                              COLUMN id: 26, column_name: float64, result_type: Float64, source_id: 9\n   JOIN TREE\n     TABLE id: 9, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT (sum(float64) - 2 * count(float64)) - (sum(float64) - 3 * count(float64)) From test_table);\n@@ -2833,22 +2833,22 @@ QUERY id: 0\n                         FUNCTION id: 13, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n                             LIST id: 14, nodes: 1\n-                              COLUMN id: 8, column_name: float64, result_type: Float64, source_id: 9\n-            FUNCTION id: 15, function_name: minus, function_type: ordinary, result_type: Float64\n+                              COLUMN id: 15, column_name: float64, result_type: Float64, source_id: 9\n+            FUNCTION id: 16, function_name: minus, function_type: ordinary, result_type: Float64\n               ARGUMENTS\n-                LIST id: 16, nodes: 2\n-                  FUNCTION id: 17, function_name: sum, function_type: aggregate, result_type: Float64\n+                LIST id: 17, nodes: 2\n+                  FUNCTION id: 18, function_name: sum, function_type: aggregate, result_type: Float64\n                     ARGUMENTS\n-                      LIST id: 18, nodes: 1\n-                        COLUMN id: 8, column_name: float64, result_type: Float64, source_id: 9\n-                  FUNCTION id: 19, function_name: multiply, function_type: ordinary, result_type: UInt64\n+                      LIST id: 19, nodes: 1\n+                        COLUMN id: 20, column_name: float64, result_type: Float64, source_id: 9\n+                  FUNCTION id: 21, function_name: multiply, function_type: ordinary, result_type: UInt64\n                     ARGUMENTS\n-                      LIST id: 20, nodes: 2\n-                        CONSTANT id: 21, constant_value: UInt64_3, constant_value_type: UInt8\n-                        FUNCTION id: 22, function_name: count, function_type: aggregate, result_type: UInt64\n+                      LIST id: 22, nodes: 2\n+                        CONSTANT id: 23, constant_value: UInt64_3, constant_value_type: UInt8\n+                        FUNCTION id: 24, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n-                            LIST id: 23, nodes: 1\n-                              COLUMN id: 8, column_name: float64, result_type: Float64, source_id: 9\n+                            LIST id: 25, nodes: 1\n+                              COLUMN id: 26, column_name: float64, result_type: Float64, source_id: 9\n   JOIN TREE\n     TABLE id: 9, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT (2 * count(float64) - sum(float64)) + (3 * count(float64) - sum(float64)) From test_table);\n@@ -2874,22 +2874,22 @@ QUERY id: 0\n                   FUNCTION id: 13, function_name: sum, function_type: aggregate, result_type: Float64\n                     ARGUMENTS\n                       LIST id: 14, nodes: 1\n-                        COLUMN id: 11, column_name: float64, result_type: Float64, source_id: 12\n-            FUNCTION id: 15, function_name: minus, function_type: ordinary, result_type: Float64\n+                        COLUMN id: 15, column_name: float64, result_type: Float64, source_id: 12\n+            FUNCTION id: 16, function_name: minus, function_type: ordinary, result_type: Float64\n               ARGUMENTS\n-                LIST id: 16, nodes: 2\n-                  FUNCTION id: 17, function_name: multiply, function_type: ordinary, result_type: UInt64\n+                LIST id: 17, nodes: 2\n+                  FUNCTION id: 18, function_name: multiply, function_type: ordinary, result_type: UInt64\n                     ARGUMENTS\n-                      LIST id: 18, nodes: 2\n-                        CONSTANT id: 19, constant_value: UInt64_3, constant_value_type: UInt8\n-                        FUNCTION id: 20, function_name: count, function_type: aggregate, result_type: UInt64\n+                      LIST id: 19, nodes: 2\n+                        CONSTANT id: 20, constant_value: UInt64_3, constant_value_type: UInt8\n+                        FUNCTION id: 21, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n-                            LIST id: 21, nodes: 1\n-                              COLUMN id: 11, column_name: float64, result_type: Float64, source_id: 12\n-                  FUNCTION id: 22, function_name: sum, function_type: aggregate, result_type: Float64\n+                            LIST id: 22, nodes: 1\n+                              COLUMN id: 23, column_name: float64, result_type: Float64, source_id: 12\n+                  FUNCTION id: 24, function_name: sum, function_type: aggregate, result_type: Float64\n                     ARGUMENTS\n-                      LIST id: 23, nodes: 1\n-                        COLUMN id: 11, column_name: float64, result_type: Float64, source_id: 12\n+                      LIST id: 25, nodes: 1\n+                        COLUMN id: 26, column_name: float64, result_type: Float64, source_id: 12\n   JOIN TREE\n     TABLE id: 12, alias: __table1, table_name: default.test_table\n SELECT sum(decimal32 + 2) + sum(decimal32 + 3) From test_table;\n@@ -2942,15 +2942,15 @@ QUERY id: 0\n                   FUNCTION id: 17, function_name: sum, function_type: aggregate, result_type: Decimal(38, 5)\n                     ARGUMENTS\n                       LIST id: 18, nodes: 1\n-                        COLUMN id: 8, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n-                  FUNCTION id: 19, function_name: multiply, function_type: ordinary, result_type: UInt64\n+                        COLUMN id: 19, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n+                  FUNCTION id: 20, function_name: multiply, function_type: ordinary, result_type: UInt64\n                     ARGUMENTS\n-                      LIST id: 20, nodes: 2\n-                        CONSTANT id: 21, constant_value: UInt64_3, constant_value_type: UInt8\n-                        FUNCTION id: 22, function_name: count, function_type: aggregate, result_type: UInt64\n+                      LIST id: 21, nodes: 2\n+                        CONSTANT id: 22, constant_value: UInt64_3, constant_value_type: UInt8\n+                        FUNCTION id: 23, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n-                            LIST id: 23, nodes: 1\n-                              COLUMN id: 8, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n+                            LIST id: 24, nodes: 1\n+                              COLUMN id: 19, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n   JOIN TREE\n     TABLE id: 9, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT sum(decimal32 + 2) - sum(decimal32 + 3) From test_table);\n@@ -2983,15 +2983,15 @@ QUERY id: 0\n                   FUNCTION id: 17, function_name: sum, function_type: aggregate, result_type: Decimal(38, 5)\n                     ARGUMENTS\n                       LIST id: 18, nodes: 1\n-                        COLUMN id: 8, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n-                  FUNCTION id: 19, function_name: multiply, function_type: ordinary, result_type: UInt64\n+                        COLUMN id: 19, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n+                  FUNCTION id: 20, function_name: multiply, function_type: ordinary, result_type: UInt64\n                     ARGUMENTS\n-                      LIST id: 20, nodes: 2\n-                        CONSTANT id: 21, constant_value: UInt64_3, constant_value_type: UInt8\n-                        FUNCTION id: 22, function_name: count, function_type: aggregate, result_type: UInt64\n+                      LIST id: 21, nodes: 2\n+                        CONSTANT id: 22, constant_value: UInt64_3, constant_value_type: UInt8\n+                        FUNCTION id: 23, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n-                            LIST id: 23, nodes: 1\n-                              COLUMN id: 8, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n+                            LIST id: 24, nodes: 1\n+                              COLUMN id: 19, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n   JOIN TREE\n     TABLE id: 9, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT sum(decimal32 - 2) + sum(decimal32 - 3) From test_table);\n@@ -3024,15 +3024,15 @@ QUERY id: 0\n                   FUNCTION id: 17, function_name: sum, function_type: aggregate, result_type: Decimal(38, 5)\n                     ARGUMENTS\n                       LIST id: 18, nodes: 1\n-                        COLUMN id: 8, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n-                  FUNCTION id: 19, function_name: multiply, function_type: ordinary, result_type: UInt64\n+                        COLUMN id: 19, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n+                  FUNCTION id: 20, function_name: multiply, function_type: ordinary, result_type: UInt64\n                     ARGUMENTS\n-                      LIST id: 20, nodes: 2\n-                        CONSTANT id: 21, constant_value: UInt64_3, constant_value_type: UInt8\n-                        FUNCTION id: 22, function_name: count, function_type: aggregate, result_type: UInt64\n+                      LIST id: 21, nodes: 2\n+                        CONSTANT id: 22, constant_value: UInt64_3, constant_value_type: UInt8\n+                        FUNCTION id: 23, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n-                            LIST id: 23, nodes: 1\n-                              COLUMN id: 8, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n+                            LIST id: 24, nodes: 1\n+                              COLUMN id: 19, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n   JOIN TREE\n     TABLE id: 9, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT sum(decimal32 - 2) - sum(decimal32 - 3) From test_table);\n@@ -3065,15 +3065,15 @@ QUERY id: 0\n                   FUNCTION id: 17, function_name: sum, function_type: aggregate, result_type: Decimal(38, 5)\n                     ARGUMENTS\n                       LIST id: 18, nodes: 1\n-                        COLUMN id: 8, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n-                  FUNCTION id: 19, function_name: multiply, function_type: ordinary, result_type: UInt64\n+                        COLUMN id: 19, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n+                  FUNCTION id: 20, function_name: multiply, function_type: ordinary, result_type: UInt64\n                     ARGUMENTS\n-                      LIST id: 20, nodes: 2\n-                        CONSTANT id: 21, constant_value: UInt64_3, constant_value_type: UInt8\n-                        FUNCTION id: 22, function_name: count, function_type: aggregate, result_type: UInt64\n+                      LIST id: 21, nodes: 2\n+                        CONSTANT id: 22, constant_value: UInt64_3, constant_value_type: UInt8\n+                        FUNCTION id: 23, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n-                            LIST id: 23, nodes: 1\n-                              COLUMN id: 8, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n+                            LIST id: 24, nodes: 1\n+                              COLUMN id: 19, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n   JOIN TREE\n     TABLE id: 9, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT sum(2 - decimal32) - sum(3 - decimal32) From test_table);\n@@ -3110,11 +3110,11 @@ QUERY id: 0\n                         FUNCTION id: 20, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n                             LIST id: 21, nodes: 1\n-                              COLUMN id: 11, column_name: decimal32, result_type: Decimal(9, 5), source_id: 12\n-                  FUNCTION id: 22, function_name: sum, function_type: aggregate, result_type: Decimal(38, 5)\n+                              COLUMN id: 22, column_name: decimal32, result_type: Decimal(9, 5), source_id: 12\n+                  FUNCTION id: 23, function_name: sum, function_type: aggregate, result_type: Decimal(38, 5)\n                     ARGUMENTS\n-                      LIST id: 23, nodes: 1\n-                        COLUMN id: 11, column_name: decimal32, result_type: Decimal(9, 5), source_id: 12\n+                      LIST id: 24, nodes: 1\n+                        COLUMN id: 22, column_name: decimal32, result_type: Decimal(9, 5), source_id: 12\n   JOIN TREE\n     TABLE id: 12, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT (sum(decimal32) + 2 * count(decimal32)) + (sum(decimal32) + 3 * count(decimal32)) From test_table);\n@@ -3140,22 +3140,22 @@ QUERY id: 0\n                         FUNCTION id: 13, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n                             LIST id: 14, nodes: 1\n-                              COLUMN id: 8, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n-            FUNCTION id: 15, function_name: plus, function_type: ordinary, result_type: Decimal(38, 5)\n+                              COLUMN id: 15, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n+            FUNCTION id: 16, function_name: plus, function_type: ordinary, result_type: Decimal(38, 5)\n               ARGUMENTS\n-                LIST id: 16, nodes: 2\n-                  FUNCTION id: 17, function_name: sum, function_type: aggregate, result_type: Decimal(38, 5)\n+                LIST id: 17, nodes: 2\n+                  FUNCTION id: 18, function_name: sum, function_type: aggregate, result_type: Decimal(38, 5)\n                     ARGUMENTS\n-                      LIST id: 18, nodes: 1\n-                        COLUMN id: 8, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n-                  FUNCTION id: 19, function_name: multiply, function_type: ordinary, result_type: UInt64\n+                      LIST id: 19, nodes: 1\n+                        COLUMN id: 20, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n+                  FUNCTION id: 21, function_name: multiply, function_type: ordinary, result_type: UInt64\n                     ARGUMENTS\n-                      LIST id: 20, nodes: 2\n-                        CONSTANT id: 21, constant_value: UInt64_3, constant_value_type: UInt8\n-                        FUNCTION id: 22, function_name: count, function_type: aggregate, result_type: UInt64\n+                      LIST id: 22, nodes: 2\n+                        CONSTANT id: 23, constant_value: UInt64_3, constant_value_type: UInt8\n+                        FUNCTION id: 24, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n-                            LIST id: 23, nodes: 1\n-                              COLUMN id: 8, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n+                            LIST id: 25, nodes: 1\n+                              COLUMN id: 26, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n   JOIN TREE\n     TABLE id: 9, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT (sum(decimal32) + 2 * count(decimal32)) - (sum(decimal32) + 3 * count(decimal32)) From test_table);\n@@ -3181,22 +3181,22 @@ QUERY id: 0\n                         FUNCTION id: 13, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n                             LIST id: 14, nodes: 1\n-                              COLUMN id: 8, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n-            FUNCTION id: 15, function_name: plus, function_type: ordinary, result_type: Decimal(38, 5)\n+                              COLUMN id: 15, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n+            FUNCTION id: 16, function_name: plus, function_type: ordinary, result_type: Decimal(38, 5)\n               ARGUMENTS\n-                LIST id: 16, nodes: 2\n-                  FUNCTION id: 17, function_name: sum, function_type: aggregate, result_type: Decimal(38, 5)\n+                LIST id: 17, nodes: 2\n+                  FUNCTION id: 18, function_name: sum, function_type: aggregate, result_type: Decimal(38, 5)\n                     ARGUMENTS\n-                      LIST id: 18, nodes: 1\n-                        COLUMN id: 8, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n-                  FUNCTION id: 19, function_name: multiply, function_type: ordinary, result_type: UInt64\n+                      LIST id: 19, nodes: 1\n+                        COLUMN id: 20, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n+                  FUNCTION id: 21, function_name: multiply, function_type: ordinary, result_type: UInt64\n                     ARGUMENTS\n-                      LIST id: 20, nodes: 2\n-                        CONSTANT id: 21, constant_value: UInt64_3, constant_value_type: UInt8\n-                        FUNCTION id: 22, function_name: count, function_type: aggregate, result_type: UInt64\n+                      LIST id: 22, nodes: 2\n+                        CONSTANT id: 23, constant_value: UInt64_3, constant_value_type: UInt8\n+                        FUNCTION id: 24, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n-                            LIST id: 23, nodes: 1\n-                              COLUMN id: 8, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n+                            LIST id: 25, nodes: 1\n+                              COLUMN id: 26, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n   JOIN TREE\n     TABLE id: 9, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT (sum(decimal32) - 2 * count(decimal32)) + (sum(decimal32) - 3 * count(decimal32)) From test_table);\n@@ -3222,22 +3222,22 @@ QUERY id: 0\n                         FUNCTION id: 13, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n                             LIST id: 14, nodes: 1\n-                              COLUMN id: 8, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n-            FUNCTION id: 15, function_name: minus, function_type: ordinary, result_type: Decimal(38, 5)\n+                              COLUMN id: 15, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n+            FUNCTION id: 16, function_name: minus, function_type: ordinary, result_type: Decimal(38, 5)\n               ARGUMENTS\n-                LIST id: 16, nodes: 2\n-                  FUNCTION id: 17, function_name: sum, function_type: aggregate, result_type: Decimal(38, 5)\n+                LIST id: 17, nodes: 2\n+                  FUNCTION id: 18, function_name: sum, function_type: aggregate, result_type: Decimal(38, 5)\n                     ARGUMENTS\n-                      LIST id: 18, nodes: 1\n-                        COLUMN id: 8, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n-                  FUNCTION id: 19, function_name: multiply, function_type: ordinary, result_type: UInt64\n+                      LIST id: 19, nodes: 1\n+                        COLUMN id: 20, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n+                  FUNCTION id: 21, function_name: multiply, function_type: ordinary, result_type: UInt64\n                     ARGUMENTS\n-                      LIST id: 20, nodes: 2\n-                        CONSTANT id: 21, constant_value: UInt64_3, constant_value_type: UInt8\n-                        FUNCTION id: 22, function_name: count, function_type: aggregate, result_type: UInt64\n+                      LIST id: 22, nodes: 2\n+                        CONSTANT id: 23, constant_value: UInt64_3, constant_value_type: UInt8\n+                        FUNCTION id: 24, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n-                            LIST id: 23, nodes: 1\n-                              COLUMN id: 8, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n+                            LIST id: 25, nodes: 1\n+                              COLUMN id: 26, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n   JOIN TREE\n     TABLE id: 9, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT (sum(decimal32) - 2 * count(decimal32)) - (sum(decimal32) - 3 * count(decimal32)) From test_table);\n@@ -3263,22 +3263,22 @@ QUERY id: 0\n                         FUNCTION id: 13, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n                             LIST id: 14, nodes: 1\n-                              COLUMN id: 8, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n-            FUNCTION id: 15, function_name: minus, function_type: ordinary, result_type: Decimal(38, 5)\n+                              COLUMN id: 15, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n+            FUNCTION id: 16, function_name: minus, function_type: ordinary, result_type: Decimal(38, 5)\n               ARGUMENTS\n-                LIST id: 16, nodes: 2\n-                  FUNCTION id: 17, function_name: sum, function_type: aggregate, result_type: Decimal(38, 5)\n+                LIST id: 17, nodes: 2\n+                  FUNCTION id: 18, function_name: sum, function_type: aggregate, result_type: Decimal(38, 5)\n                     ARGUMENTS\n-                      LIST id: 18, nodes: 1\n-                        COLUMN id: 8, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n-                  FUNCTION id: 19, function_name: multiply, function_type: ordinary, result_type: UInt64\n+                      LIST id: 19, nodes: 1\n+                        COLUMN id: 20, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n+                  FUNCTION id: 21, function_name: multiply, function_type: ordinary, result_type: UInt64\n                     ARGUMENTS\n-                      LIST id: 20, nodes: 2\n-                        CONSTANT id: 21, constant_value: UInt64_3, constant_value_type: UInt8\n-                        FUNCTION id: 22, function_name: count, function_type: aggregate, result_type: UInt64\n+                      LIST id: 22, nodes: 2\n+                        CONSTANT id: 23, constant_value: UInt64_3, constant_value_type: UInt8\n+                        FUNCTION id: 24, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n-                            LIST id: 23, nodes: 1\n-                              COLUMN id: 8, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n+                            LIST id: 25, nodes: 1\n+                              COLUMN id: 26, column_name: decimal32, result_type: Decimal(9, 5), source_id: 9\n   JOIN TREE\n     TABLE id: 9, alias: __table1, table_name: default.test_table\n EXPLAIN QUERY TREE (SELECT (2 * count(decimal32) - sum(decimal32)) + (3 * count(decimal32) - sum(decimal32)) From test_table);\n@@ -3304,21 +3304,21 @@ QUERY id: 0\n                   FUNCTION id: 13, function_name: sum, function_type: aggregate, result_type: Decimal(38, 5)\n                     ARGUMENTS\n                       LIST id: 14, nodes: 1\n-                        COLUMN id: 11, column_name: decimal32, result_type: Decimal(9, 5), source_id: 12\n-            FUNCTION id: 15, function_name: minus, function_type: ordinary, result_type: Decimal(38, 5)\n+                        COLUMN id: 15, column_name: decimal32, result_type: Decimal(9, 5), source_id: 12\n+            FUNCTION id: 16, function_name: minus, function_type: ordinary, result_type: Decimal(38, 5)\n               ARGUMENTS\n-                LIST id: 16, nodes: 2\n-                  FUNCTION id: 17, function_name: multiply, function_type: ordinary, result_type: UInt64\n+                LIST id: 17, nodes: 2\n+                  FUNCTION id: 18, function_name: multiply, function_type: ordinary, result_type: UInt64\n                     ARGUMENTS\n-                      LIST id: 18, nodes: 2\n-                        CONSTANT id: 19, constant_value: UInt64_3, constant_value_type: UInt8\n-                        FUNCTION id: 20, function_name: count, function_type: aggregate, result_type: UInt64\n+                      LIST id: 19, nodes: 2\n+                        CONSTANT id: 20, constant_value: UInt64_3, constant_value_type: UInt8\n+                        FUNCTION id: 21, function_name: count, function_type: aggregate, result_type: UInt64\n                           ARGUMENTS\n-                            LIST id: 21, nodes: 1\n-                              COLUMN id: 11, column_name: decimal32, result_type: Decimal(9, 5), source_id: 12\n-                  FUNCTION id: 22, function_name: sum, function_type: aggregate, result_type: Decimal(38, 5)\n+                            LIST id: 22, nodes: 1\n+                              COLUMN id: 23, column_name: decimal32, result_type: Decimal(9, 5), source_id: 12\n+                  FUNCTION id: 24, function_name: sum, function_type: aggregate, result_type: Decimal(38, 5)\n                     ARGUMENTS\n-                      LIST id: 23, nodes: 1\n-                        COLUMN id: 11, column_name: decimal32, result_type: Decimal(9, 5), source_id: 12\n+                      LIST id: 25, nodes: 1\n+                        COLUMN id: 26, column_name: decimal32, result_type: Decimal(9, 5), source_id: 12\n   JOIN TREE\n     TABLE id: 12, alias: __table1, table_name: default.test_table\ndiff --git a/tests/queries/0_stateless/02969_analyzer_eliminate_injective_functions.reference b/tests/queries/0_stateless/02969_analyzer_eliminate_injective_functions.reference\nindex 72d83e5cf6a4..ebdc505f6381 100644\n--- a/tests/queries/0_stateless/02969_analyzer_eliminate_injective_functions.reference\n+++ b/tests/queries/0_stateless/02969_analyzer_eliminate_injective_functions.reference\n@@ -23,26 +23,26 @@ QUERY id: 0\n           CONSTANT id: 13, constant_value: UInt64_2, constant_value_type: UInt8\n   GROUP BY\n     LIST id: 14, nodes: 1\n-      FUNCTION id: 6, function_name: plus, function_type: ordinary, result_type: UInt64\n+      FUNCTION id: 15, function_name: plus, function_type: ordinary, result_type: UInt64\n         ARGUMENTS\n-          LIST id: 7, nodes: 2\n-            COLUMN id: 8, column_name: number, result_type: UInt64, source_id: 9\n-            CONSTANT id: 10, constant_value: UInt64_1, constant_value_type: UInt8\n+          LIST id: 16, nodes: 2\n+            COLUMN id: 17, column_name: number, result_type: UInt64, source_id: 9\n+            CONSTANT id: 18, constant_value: UInt64_1, constant_value_type: UInt8\n   ORDER BY\n-    LIST id: 15, nodes: 1\n-      SORT id: 16, sort_direction: ASCENDING, with_fill: 0\n+    LIST id: 19, nodes: 1\n+      SORT id: 20, sort_direction: ASCENDING, with_fill: 0\n         EXPRESSION\n-          FUNCTION id: 2, function_name: toString, function_type: ordinary, result_type: String\n+          FUNCTION id: 21, function_name: toString, function_type: ordinary, result_type: String\n             ARGUMENTS\n-              LIST id: 3, nodes: 1\n-                FUNCTION id: 4, function_name: toString, function_type: ordinary, result_type: String\n+              LIST id: 22, nodes: 1\n+                FUNCTION id: 23, function_name: toString, function_type: ordinary, result_type: String\n                   ARGUMENTS\n-                    LIST id: 5, nodes: 1\n-                      FUNCTION id: 6, function_name: plus, function_type: ordinary, result_type: UInt64\n+                    LIST id: 24, nodes: 1\n+                      FUNCTION id: 25, function_name: plus, function_type: ordinary, result_type: UInt64\n                         ARGUMENTS\n-                          LIST id: 7, nodes: 2\n-                            COLUMN id: 8, column_name: number, result_type: UInt64, source_id: 9\n-                            CONSTANT id: 10, constant_value: UInt64_1, constant_value_type: UInt8\n+                          LIST id: 26, nodes: 2\n+                            COLUMN id: 27, column_name: number, result_type: UInt64, source_id: 9\n+                            CONSTANT id: 28, constant_value: UInt64_1, constant_value_type: UInt8\n 1\t1\n 2\t1\n QUERY id: 0\n@@ -79,17 +79,17 @@ QUERY id: 0\n     LIST id: 15, nodes: 1\n       SORT id: 16, sort_direction: ASCENDING, with_fill: 0\n         EXPRESSION\n-          FUNCTION id: 2, function_name: toString, function_type: ordinary, result_type: String\n+          FUNCTION id: 17, function_name: toString, function_type: ordinary, result_type: String\n             ARGUMENTS\n-              LIST id: 3, nodes: 1\n-                FUNCTION id: 4, function_name: toString, function_type: ordinary, result_type: String\n+              LIST id: 18, nodes: 1\n+                FUNCTION id: 19, function_name: toString, function_type: ordinary, result_type: String\n                   ARGUMENTS\n-                    LIST id: 5, nodes: 1\n-                      FUNCTION id: 6, function_name: plus, function_type: ordinary, result_type: UInt64\n+                    LIST id: 20, nodes: 1\n+                      FUNCTION id: 21, function_name: plus, function_type: ordinary, result_type: UInt64\n                         ARGUMENTS\n-                          LIST id: 7, nodes: 2\n-                            COLUMN id: 8, column_name: number, result_type: UInt64, source_id: 9\n-                            CONSTANT id: 10, constant_value: UInt64_1, constant_value_type: UInt8\n+                          LIST id: 22, nodes: 2\n+                            COLUMN id: 23, column_name: number, result_type: UInt64, source_id: 9\n+                            CONSTANT id: 24, constant_value: UInt64_1, constant_value_type: UInt8\n CHECK WITH TOTALS\n QUERY id: 0, is_group_by_with_totals: 1\n   PROJECTION COLUMNS\n@@ -116,26 +116,26 @@ QUERY id: 0, is_group_by_with_totals: 1\n           CONSTANT id: 13, constant_value: UInt64_2, constant_value_type: UInt8\n   GROUP BY\n     LIST id: 14, nodes: 1\n-      FUNCTION id: 6, function_name: plus, function_type: ordinary, result_type: UInt64\n+      FUNCTION id: 15, function_name: plus, function_type: ordinary, result_type: UInt64\n         ARGUMENTS\n-          LIST id: 7, nodes: 2\n-            COLUMN id: 8, column_name: number, result_type: UInt64, source_id: 9\n-            CONSTANT id: 10, constant_value: UInt64_1, constant_value_type: UInt8\n+          LIST id: 16, nodes: 2\n+            COLUMN id: 17, column_name: number, result_type: UInt64, source_id: 9\n+            CONSTANT id: 18, constant_value: UInt64_1, constant_value_type: UInt8\n   ORDER BY\n-    LIST id: 15, nodes: 1\n-      SORT id: 16, sort_direction: ASCENDING, with_fill: 0\n+    LIST id: 19, nodes: 1\n+      SORT id: 20, sort_direction: ASCENDING, with_fill: 0\n         EXPRESSION\n-          FUNCTION id: 2, function_name: toString, function_type: ordinary, result_type: String\n+          FUNCTION id: 21, function_name: toString, function_type: ordinary, result_type: String\n             ARGUMENTS\n-              LIST id: 3, nodes: 1\n-                FUNCTION id: 4, function_name: toString, function_type: ordinary, result_type: String\n+              LIST id: 22, nodes: 1\n+                FUNCTION id: 23, function_name: toString, function_type: ordinary, result_type: String\n                   ARGUMENTS\n-                    LIST id: 5, nodes: 1\n-                      FUNCTION id: 6, function_name: plus, function_type: ordinary, result_type: UInt64\n+                    LIST id: 24, nodes: 1\n+                      FUNCTION id: 25, function_name: plus, function_type: ordinary, result_type: UInt64\n                         ARGUMENTS\n-                          LIST id: 7, nodes: 2\n-                            COLUMN id: 8, column_name: number, result_type: UInt64, source_id: 9\n-                            CONSTANT id: 10, constant_value: UInt64_1, constant_value_type: UInt8\n+                          LIST id: 26, nodes: 2\n+                            COLUMN id: 27, column_name: number, result_type: UInt64, source_id: 9\n+                            CONSTANT id: 28, constant_value: UInt64_1, constant_value_type: UInt8\n 1\t1\n 2\t1\n \ndiff --git a/tests/queries/0_stateless/02999_analyzer_preimage_null.reference b/tests/queries/0_stateless/02999_analyzer_preimage_null.reference\nindex c5eb6b23d0d2..5f21c8656daa 100644\n--- a/tests/queries/0_stateless/02999_analyzer_preimage_null.reference\n+++ b/tests/queries/0_stateless/02999_analyzer_preimage_null.reference\n@@ -36,10 +36,10 @@ QUERY id: 0\n             ARGUMENTS\n               LIST id: 18, nodes: 2\n                 COLUMN id: 19, column_name: id, result_type: UInt32, source_id: 3\n-                FUNCTION id: 10, function_name: toYear, function_type: ordinary, result_type: UInt16\n+                FUNCTION id: 20, function_name: toYear, function_type: ordinary, result_type: UInt16\n                   ARGUMENTS\n-                    LIST id: 11, nodes: 1\n-                      COLUMN id: 12, column_name: date1, result_type: Date, source_id: 3\n+                    LIST id: 21, nodes: 1\n+                      COLUMN id: 22, column_name: date1, result_type: Date, source_id: 3\n EXPLAIN QUERY TREE run_passes = 1\n SELECT *\n FROM date_t__fuzz_0\n@@ -72,10 +72,10 @@ QUERY id: 0\n             ARGUMENTS\n               LIST id: 15, nodes: 2\n                 COLUMN id: 16, column_name: id, result_type: UInt32, source_id: 3\n-                FUNCTION id: 10, function_name: toYear, function_type: ordinary, result_type: UInt16\n+                FUNCTION id: 17, function_name: toYear, function_type: ordinary, result_type: UInt16\n                   ARGUMENTS\n-                    LIST id: 11, nodes: 1\n-                      COLUMN id: 12, column_name: date1, result_type: Date, source_id: 3\n+                    LIST id: 18, nodes: 1\n+                      COLUMN id: 19, column_name: date1, result_type: Date, source_id: 3\n   SETTINGS optimize_time_filter_with_preimage=0\n EXPLAIN QUERY TREE run_passes = 1\n SELECT *\n@@ -117,5 +117,5 @@ QUERY id: 0\n                 FUNCTION id: 20, function_name: toYear, function_type: ordinary, result_type: UInt16\n                   ARGUMENTS\n                     LIST id: 21, nodes: 1\n-                      COLUMN id: 12, column_name: date1, result_type: Date, source_id: 3\n+                      COLUMN id: 22, column_name: date1, result_type: Date, source_id: 3\n   SETTINGS optimize_time_filter_with_preimage=1\ndiff --git a/tests/queries/0_stateless/03033_analyzer_resolve_from_parent_scope.reference b/tests/queries/0_stateless/03033_analyzer_resolve_from_parent_scope.reference\nindex f599e28b8ab0..18910989d03e 100644\n--- a/tests/queries/0_stateless/03033_analyzer_resolve_from_parent_scope.reference\n+++ b/tests/queries/0_stateless/03033_analyzer_resolve_from_parent_scope.reference\n@@ -1,1 +1,11 @@\n 10\n+0\t0\n+0\t1\n+0\t2\n+0\t3\n+0\t4\n+5\t5\n+5\t6\n+5\t7\n+5\t8\n+5\t9\ndiff --git a/tests/queries/0_stateless/03033_analyzer_resolve_from_parent_scope.sql b/tests/queries/0_stateless/03033_analyzer_resolve_from_parent_scope.sql\nindex 22f103c9bd5d..972d425a2d0b 100644\n--- a/tests/queries/0_stateless/03033_analyzer_resolve_from_parent_scope.sql\n+++ b/tests/queries/0_stateless/03033_analyzer_resolve_from_parent_scope.sql\n@@ -25,3 +25,35 @@ SELECT v FROM (\n );\n \n WITH (SELECT v FROM vecs_Float32 limit 1) AS a SELECT count(dp) FROM (SELECT dotProduct(a, v) AS dp FROM vecs_Float32);\n+\n+WITH\n+  t as (SELECT number + a as x FROM numbers(5))\n+SELECT 0 as a, x FROM t\n+UNION ALL\n+SELECT 5 as a, x FROM t\n+ORDER BY a, x\n+FORMAT Null\n+SETTINGS allow_experimental_analyzer = 1;\n+\n+WITH t AS\n+    (\n+        SELECT number + a AS x\n+        FROM numbers(5)\n+    )\n+SELECT *\n+FROM\n+(\n+    SELECT\n+        0 AS a,\n+        x\n+    FROM t\n+    UNION ALL\n+    SELECT\n+        5 AS a,\n+        x\n+    FROM t\n+)\n+ORDER BY\n+    a ASC,\n+    x ASC\n+SETTINGS allow_experimental_analyzer = 1;\ndiff --git a/tests/queries/0_stateless/03132_rewrite_aggregate_function_with_if_implicit_cast.reference b/tests/queries/0_stateless/03132_rewrite_aggregate_function_with_if_implicit_cast.reference\nindex 8289ab68ae4c..0f7673e70a0b 100644\n--- a/tests/queries/0_stateless/03132_rewrite_aggregate_function_with_if_implicit_cast.reference\n+++ b/tests/queries/0_stateless/03132_rewrite_aggregate_function_with_if_implicit_cast.reference\n@@ -24,34 +24,34 @@ QUERY id: 0\n                   FUNCTION id: 11, function_name: modulo, function_type: ordinary, result_type: UInt8\n                     ARGUMENTS\n                       LIST id: 12, nodes: 2\n-                        COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                        CONSTANT id: 13, constant_value: UInt64_10, constant_value_type: UInt8\n-                  CONSTANT id: 14, constant_value: UInt64_5, constant_value_type: UInt8\n-      FUNCTION id: 15, function_name: toTypeName, function_type: ordinary, result_type: String\n+                        COLUMN id: 13, column_name: number, result_type: UInt64, source_id: 7\n+                        CONSTANT id: 14, constant_value: UInt64_10, constant_value_type: UInt8\n+                  CONSTANT id: 15, constant_value: UInt64_5, constant_value_type: UInt8\n+      FUNCTION id: 16, function_name: toTypeName, function_type: ordinary, result_type: String\n         ARGUMENTS\n-          LIST id: 16, nodes: 1\n-            FUNCTION id: 17, function_name: anyIf, function_type: aggregate, result_type: Nullable(Int128)\n+          LIST id: 17, nodes: 1\n+            FUNCTION id: 18, function_name: anyIf, function_type: aggregate, result_type: Nullable(Int128)\n               ARGUMENTS\n-                LIST id: 18, nodes: 2\n-                  FUNCTION id: 19, function_name: _CAST, function_type: ordinary, result_type: Nullable(Int128)\n+                LIST id: 19, nodes: 2\n+                  FUNCTION id: 20, function_name: _CAST, function_type: ordinary, result_type: Nullable(Int128)\n                     ARGUMENTS\n-                      LIST id: 20, nodes: 2\n-                        COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                        CONSTANT id: 21, constant_value: \\'Nullable(Int128)\\', constant_value_type: String\n-                  FUNCTION id: 9, function_name: equals, function_type: ordinary, result_type: UInt8\n+                      LIST id: 21, nodes: 2\n+                        COLUMN id: 22, column_name: number, result_type: UInt64, source_id: 7\n+                        CONSTANT id: 23, constant_value: \\'Nullable(Int128)\\', constant_value_type: String\n+                  FUNCTION id: 24, function_name: equals, function_type: ordinary, result_type: UInt8\n                     ARGUMENTS\n-                      LIST id: 10, nodes: 2\n-                        FUNCTION id: 11, function_name: modulo, function_type: ordinary, result_type: UInt8\n+                      LIST id: 25, nodes: 2\n+                        FUNCTION id: 26, function_name: modulo, function_type: ordinary, result_type: UInt8\n                           ARGUMENTS\n-                            LIST id: 12, nodes: 2\n-                              COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                              CONSTANT id: 13, constant_value: UInt64_10, constant_value_type: UInt8\n-                        CONSTANT id: 14, constant_value: UInt64_5, constant_value_type: UInt8\n+                            LIST id: 27, nodes: 2\n+                              COLUMN id: 28, column_name: number, result_type: UInt64, source_id: 7\n+                              CONSTANT id: 29, constant_value: UInt64_10, constant_value_type: UInt8\n+                        CONSTANT id: 30, constant_value: UInt64_5, constant_value_type: UInt8\n   JOIN TREE\n     TABLE_FUNCTION id: 7, alias: __table1, table_function_name: numbers\n       ARGUMENTS\n-        LIST id: 22, nodes: 1\n-          CONSTANT id: 23, constant_value: UInt64_100, constant_value_type: UInt8\n+        LIST id: 31, nodes: 1\n+          CONSTANT id: 32, constant_value: UInt64_100, constant_value_type: UInt8\n SELECT any(if((number % 10) = 5, CAST(NULL, 'Nullable(Int128)'), number)) AS a, toTypeName(a) FROM numbers(100) AS a;\n 0\tNullable(Int128)\n EXPLAIN QUERY TREE SELECT any(if((number % 10) = 5, CAST(NULL, 'Nullable(Int128)'), number)) AS a, toTypeName(a) FROM numbers(100);\n@@ -78,34 +78,34 @@ QUERY id: 0\n                         FUNCTION id: 13, function_name: modulo, function_type: ordinary, result_type: UInt8\n                           ARGUMENTS\n                             LIST id: 14, nodes: 2\n-                              COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                              CONSTANT id: 15, constant_value: UInt64_10, constant_value_type: UInt8\n-                        CONSTANT id: 16, constant_value: UInt64_5, constant_value_type: UInt8\n-      FUNCTION id: 17, function_name: toTypeName, function_type: ordinary, result_type: String\n+                              COLUMN id: 15, column_name: number, result_type: UInt64, source_id: 7\n+                              CONSTANT id: 16, constant_value: UInt64_10, constant_value_type: UInt8\n+                        CONSTANT id: 17, constant_value: UInt64_5, constant_value_type: UInt8\n+      FUNCTION id: 18, function_name: toTypeName, function_type: ordinary, result_type: String\n         ARGUMENTS\n-          LIST id: 18, nodes: 1\n-            FUNCTION id: 19, function_name: anyIf, function_type: aggregate, result_type: Nullable(Int128)\n+          LIST id: 19, nodes: 1\n+            FUNCTION id: 20, function_name: anyIf, function_type: aggregate, result_type: Nullable(Int128)\n               ARGUMENTS\n-                LIST id: 20, nodes: 2\n-                  FUNCTION id: 21, function_name: _CAST, function_type: ordinary, result_type: Nullable(Int128)\n+                LIST id: 21, nodes: 2\n+                  FUNCTION id: 22, function_name: _CAST, function_type: ordinary, result_type: Nullable(Int128)\n                     ARGUMENTS\n-                      LIST id: 22, nodes: 2\n-                        COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                        CONSTANT id: 23, constant_value: \\'Nullable(Int128)\\', constant_value_type: String\n-                  FUNCTION id: 24, function_name: not, function_type: ordinary, result_type: UInt8\n+                      LIST id: 23, nodes: 2\n+                        COLUMN id: 24, column_name: number, result_type: UInt64, source_id: 7\n+                        CONSTANT id: 25, constant_value: \\'Nullable(Int128)\\', constant_value_type: String\n+                  FUNCTION id: 26, function_name: not, function_type: ordinary, result_type: UInt8\n                     ARGUMENTS\n-                      LIST id: 25, nodes: 1\n-                        FUNCTION id: 11, function_name: equals, function_type: ordinary, result_type: UInt8\n+                      LIST id: 27, nodes: 1\n+                        FUNCTION id: 28, function_name: equals, function_type: ordinary, result_type: UInt8\n                           ARGUMENTS\n-                            LIST id: 12, nodes: 2\n-                              FUNCTION id: 13, function_name: modulo, function_type: ordinary, result_type: UInt8\n+                            LIST id: 29, nodes: 2\n+                              FUNCTION id: 30, function_name: modulo, function_type: ordinary, result_type: UInt8\n                                 ARGUMENTS\n-                                  LIST id: 14, nodes: 2\n-                                    COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                                    CONSTANT id: 15, constant_value: UInt64_10, constant_value_type: UInt8\n-                              CONSTANT id: 16, constant_value: UInt64_5, constant_value_type: UInt8\n+                                  LIST id: 31, nodes: 2\n+                                    COLUMN id: 32, column_name: number, result_type: UInt64, source_id: 7\n+                                    CONSTANT id: 33, constant_value: UInt64_10, constant_value_type: UInt8\n+                              CONSTANT id: 34, constant_value: UInt64_5, constant_value_type: UInt8\n   JOIN TREE\n     TABLE_FUNCTION id: 7, alias: __table1, table_function_name: numbers\n       ARGUMENTS\n-        LIST id: 26, nodes: 1\n-          CONSTANT id: 27, constant_value: UInt64_100, constant_value_type: UInt8\n+        LIST id: 35, nodes: 1\n+          CONSTANT id: 36, constant_value: UInt64_100, constant_value_type: UInt8\ndiff --git a/tests/queries/0_stateless/03165_order_by_duplicate.reference b/tests/queries/0_stateless/03165_order_by_duplicate.reference\nindex 93d312d5d020..4cc3bb11cdfe 100644\n--- a/tests/queries/0_stateless/03165_order_by_duplicate.reference\n+++ b/tests/queries/0_stateless/03165_order_by_duplicate.reference\n@@ -10,30 +10,30 @@ QUERY id: 0\n     FUNCTION id: 4, function_name: in, function_type: ordinary, result_type: UInt8\n       ARGUMENTS\n         LIST id: 5, nodes: 2\n-          COLUMN id: 2, column_name: id, result_type: UInt64, source_id: 3\n-          QUERY id: 6, is_subquery: 1, is_distinct: 1\n+          COLUMN id: 6, column_name: id, result_type: UInt64, source_id: 3\n+          QUERY id: 7, is_subquery: 1, is_distinct: 1\n             PROJECTION COLUMNS\n               id UInt64\n             PROJECTION\n-              LIST id: 7, nodes: 1\n-                COLUMN id: 8, column_name: id, result_type: UInt64, source_id: 9\n+              LIST id: 8, nodes: 1\n+                COLUMN id: 9, column_name: id, result_type: UInt64, source_id: 10\n             JOIN TREE\n-              TABLE id: 9, alias: __table1, table_name: default.test, final: 1\n+              TABLE id: 10, alias: __table1, table_name: default.test, final: 1\n             ORDER BY\n-              LIST id: 10, nodes: 1\n-                SORT id: 11, sort_direction: ASCENDING, with_fill: 0\n+              LIST id: 11, nodes: 1\n+                SORT id: 12, sort_direction: ASCENDING, with_fill: 0\n                   EXPRESSION\n-                    COLUMN id: 8, column_name: id, result_type: UInt64, source_id: 9\n+                    COLUMN id: 13, column_name: id, result_type: UInt64, source_id: 10\n             LIMIT\n-              CONSTANT id: 12, constant_value: UInt64_4, constant_value_type: UInt64\n+              CONSTANT id: 14, constant_value: UInt64_4, constant_value_type: UInt64\n   ORDER BY\n-    LIST id: 13, nodes: 1\n-      SORT id: 14, sort_direction: ASCENDING, with_fill: 0\n+    LIST id: 15, nodes: 1\n+      SORT id: 16, sort_direction: ASCENDING, with_fill: 0\n         EXPRESSION\n-          COLUMN id: 2, column_name: id, result_type: UInt64, source_id: 3\n+          COLUMN id: 17, column_name: id, result_type: UInt64, source_id: 3\n   LIMIT BY LIMIT\n-    CONSTANT id: 15, constant_value: UInt64_1, constant_value_type: UInt64\n+    CONSTANT id: 18, constant_value: UInt64_1, constant_value_type: UInt64\n   LIMIT BY\n-    LIST id: 16, nodes: 1\n-      COLUMN id: 2, column_name: id, result_type: UInt64, source_id: 3\n+    LIST id: 19, nodes: 1\n+      COLUMN id: 20, column_name: id, result_type: UInt64, source_id: 3\n   SETTINGS enable_analyzer=1\ndiff --git a/tests/queries/0_stateless/03201_analyzer_resolve_in_parent_scope.reference b/tests/queries/0_stateless/03201_analyzer_resolve_in_parent_scope.reference\nnew file mode 100644\nindex 000000000000..e2a39948eef7\n--- /dev/null\n+++ b/tests/queries/0_stateless/03201_analyzer_resolve_in_parent_scope.reference\n@@ -0,0 +1,6 @@\n+fake\n+objectValue\n+0abc\n+1\n+0\n+1\ndiff --git a/tests/queries/0_stateless/03201_analyzer_resolve_in_parent_scope.sql b/tests/queries/0_stateless/03201_analyzer_resolve_in_parent_scope.sql\nnew file mode 100644\nindex 000000000000..f2f41130e878\n--- /dev/null\n+++ b/tests/queries/0_stateless/03201_analyzer_resolve_in_parent_scope.sql\n@@ -0,0 +1,87 @@\n+CREATE VIEW fake AS SELECT table, database, name FROM system.tables WHERE database = currentDatabase();\n+\n+WITH\n+(`database` NOT LIKE 'system' and `name` = 'fake') AS `$condition`,\n+`$main` AS (SELECT DISTINCT table FROM fake WHERE `$condition`)\n+SELECT * FROM `$main`;\n+\n+with properties_value[indexOf(properties_key, 'objectId')] as objectId,\n+data as (\n+  select\n+    ['objectId'] as properties_key,\n+    ['objectValue'] as properties_value\n+),\n+nested_query as (\n+  select\n+    objectId\n+  from\n+    data\n+)\n+select\n+  *\n+from\n+  nested_query;\n+\n+WITH leftPad('abc', 4, '0') as paddedval\n+SELECT * FROM (SELECT paddedval);\n+\n+with ('408','420') as some_tuple\n+select '408' in some_tuple as flag;\n+\n+CREATE VIEW another_fake AS SELECT bytes, table FROM system.parts;\n+\n+WITH\n+    sum(bytes) as s,\n+    data as (\n+      SELECT\n+        formatReadableSize(s),\n+        table\n+      FROM another_fake\n+      GROUP BY table\n+      ORDER BY s\n+    )\n+select * from data\n+FORMAT Null;\n+\n+CREATE TABLE test\n+  (\n+    a UInt64,\n+    b UInt64,\n+    Block_Height UInt64,\n+    Block_Date Date\n+  ) ENGINE = Log;\n+\n+WITH Block_Height BETWEEN 1 AND 2 AS block_filter\n+SELECT *\n+FROM test\n+WHERE block_filter\n+AND (\n+    Block_Date IN (\n+      SELECT Block_Date FROM test WHERE block_filter\n+    )\n+);\n+\n+CREATE TABLE test_cte\n+(\n+    a UInt64,\n+    b UInt64,\n+)\n+ENGINE = MergeTree\n+ORDER BY tuple();\n+\n+WITH\n+   (a > b) as cte,\n+   query AS\n+    (\n+        SELECT count()\n+        FROM test_cte\n+        WHERE cte\n+    )\n+SELECT *\n+FROM query;\n+\n+WITH arrayMap(x -> (x + 1), [0]) AS a\n+SELECT 1\n+WHERE 1 IN (\n+    SELECT arrayJoin(a)\n+);\ndiff --git a/tests/queries/0_stateless/03248_invalid_where.sql b/tests/queries/0_stateless/03248_invalid_where.sql\nindex 0b1183a382a6..65fcd2fe4e37 100644\n--- a/tests/queries/0_stateless/03248_invalid_where.sql\n+++ b/tests/queries/0_stateless/03248_invalid_where.sql\n@@ -1,1 +1,2 @@\n-WITH x -> toString(x) AS lambda_1 SELECT arrayMap(lambda_1 AS lambda_2, [1, 2, 3]), arrayMap(lambda_2, ['1', '2', '3']) WHERE lambda_2; -- { serverError UNEXPECTED_EXPRESSION }\n\\ No newline at end of file\n+WITH x -> toString(x) AS lambda_1 SELECT arrayMap(lambda_1 AS lambda_2, [1, 2, 3]), arrayMap(lambda_2, ['1', '2', '3']) WHERE lambda_2 SETTINGS enable_analyzer = 0; -- { serverError UNEXPECTED_EXPRESSION }\n+WITH x -> toString(x) AS lambda_1 SELECT arrayMap(lambda_1 AS lambda_2, [1, 2, 3]), arrayMap(lambda_2, ['1', '2', '3']) WHERE lambda_2 SETTINGS enable_analyzer = 1; -- { serverError UNKNOWN_IDENTIFIER }\ndiff --git a/tests/queries/0_stateless/03262_common_expression_optimization.reference b/tests/queries/0_stateless/03262_common_expression_optimization.reference\nindex 76e9ee12c305..2deab57fc88e 100644\n--- a/tests/queries/0_stateless/03262_common_expression_optimization.reference\n+++ b/tests/queries/0_stateless/03262_common_expression_optimization.reference\n@@ -18,8 +18,8 @@ QUERY id: 0\n           FUNCTION id: 10, function_name: and, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n               LIST id: 11, nodes: 2\n-                COLUMN id: 8, column_name: A, result_type: UInt8, source_id: 3\n-                COLUMN id: 12, column_name: C, result_type: UInt8, source_id: 3\n+                COLUMN id: 12, column_name: A, result_type: UInt8, source_id: 3\n+                COLUMN id: 13, column_name: C, result_type: UInt8, source_id: 3\n   SETTINGS optimize_extract_common_expressions=0\n \n SELECT count() AS `count()`\n@@ -624,13 +624,13 @@ QUERY id: 0\n                 FUNCTION id: 12, function_name: and, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n                     LIST id: 13, nodes: 2\n-                      COLUMN id: 9, column_name: B, result_type: UInt8, source_id: 3\n-                      COLUMN id: 14, column_name: D, result_type: UInt8, source_id: 3\n-                FUNCTION id: 15, function_name: and, function_type: ordinary, result_type: UInt8\n+                      COLUMN id: 14, column_name: B, result_type: UInt8, source_id: 3\n+                      COLUMN id: 15, column_name: D, result_type: UInt8, source_id: 3\n+                FUNCTION id: 16, function_name: and, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n-                    LIST id: 16, nodes: 2\n-                      COLUMN id: 17, column_name: E, result_type: UInt8, source_id: 3\n-                      COLUMN id: 18, column_name: F, result_type: UInt8, source_id: 3\n+                    LIST id: 17, nodes: 2\n+                      COLUMN id: 18, column_name: E, result_type: UInt8, source_id: 3\n+                      COLUMN id: 19, column_name: F, result_type: UInt8, source_id: 3\n \n SELECT count() AS `count()`\n FROM default.x AS __table1\n@@ -677,12 +677,12 @@ QUERY id: 0\n                   ARGUMENTS\n                     LIST id: 12, nodes: 2\n                       COLUMN id: 13, column_name: E, result_type: UInt8, source_id: 3\n-                      COLUMN id: 13, column_name: E, result_type: UInt8, source_id: 3\n-                FUNCTION id: 14, function_name: and, function_type: ordinary, result_type: UInt8\n+                      COLUMN id: 14, column_name: E, result_type: UInt8, source_id: 3\n+                FUNCTION id: 15, function_name: and, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n-                    LIST id: 15, nodes: 2\n-                      COLUMN id: 16, column_name: F, result_type: UInt8, source_id: 3\n-                      COLUMN id: 16, column_name: F, result_type: UInt8, source_id: 3\n+                    LIST id: 16, nodes: 2\n+                      COLUMN id: 17, column_name: F, result_type: UInt8, source_id: 3\n+                      COLUMN id: 18, column_name: F, result_type: UInt8, source_id: 3\n \n SELECT count() AS `count()`\n FROM default.x AS __table1\n@@ -824,8 +824,8 @@ QUERY id: 0\n                       FUNCTION id: 16, function_name: and, function_type: ordinary, result_type: UInt8\n                         ARGUMENTS\n                           LIST id: 17, nodes: 2\n-                            COLUMN id: 14, column_name: C, result_type: UInt8, source_id: 3\n-                            COLUMN id: 18, column_name: E, result_type: UInt8, source_id: 3\n+                            COLUMN id: 18, column_name: C, result_type: UInt8, source_id: 3\n+                            COLUMN id: 19, column_name: E, result_type: UInt8, source_id: 3\n \n SELECT count() AS `count()`\n FROM default.x AS __table1\n@@ -1038,33 +1038,33 @@ QUERY id: 0\n     TABLE id: 3, alias: __table1, table_name: default.x\n   GROUP BY\n     LIST id: 13, nodes: 1\n-      COLUMN id: 2, column_name: x, result_type: Int64, source_id: 3\n+      COLUMN id: 14, column_name: x, result_type: Int64, source_id: 3\n   HAVING\n-    FUNCTION id: 14, function_name: or, function_type: ordinary, result_type: UInt8\n+    FUNCTION id: 15, function_name: or, function_type: ordinary, result_type: UInt8\n       ARGUMENTS\n-        LIST id: 15, nodes: 2\n-          FUNCTION id: 16, function_name: and, function_type: ordinary, result_type: UInt8\n+        LIST id: 16, nodes: 2\n+          FUNCTION id: 17, function_name: and, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n-              LIST id: 17, nodes: 2\n-                FUNCTION id: 4, function_name: max, function_type: aggregate, result_type: UInt8\n+              LIST id: 18, nodes: 2\n+                FUNCTION id: 19, function_name: max, function_type: aggregate, result_type: UInt8\n                   ARGUMENTS\n-                    LIST id: 5, nodes: 1\n-                      COLUMN id: 6, column_name: A, result_type: UInt8, source_id: 3\n-                FUNCTION id: 7, function_name: max, function_type: aggregate, result_type: UInt8\n+                    LIST id: 20, nodes: 1\n+                      COLUMN id: 21, column_name: A, result_type: UInt8, source_id: 3\n+                FUNCTION id: 22, function_name: max, function_type: aggregate, result_type: UInt8\n                   ARGUMENTS\n-                    LIST id: 8, nodes: 1\n-                      COLUMN id: 9, column_name: B, result_type: UInt8, source_id: 3\n-          FUNCTION id: 18, function_name: and, function_type: ordinary, result_type: UInt8\n+                    LIST id: 23, nodes: 1\n+                      COLUMN id: 24, column_name: B, result_type: UInt8, source_id: 3\n+          FUNCTION id: 25, function_name: and, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n-              LIST id: 19, nodes: 2\n-                FUNCTION id: 4, function_name: max, function_type: aggregate, result_type: UInt8\n+              LIST id: 26, nodes: 2\n+                FUNCTION id: 27, function_name: max, function_type: aggregate, result_type: UInt8\n                   ARGUMENTS\n-                    LIST id: 5, nodes: 1\n-                      COLUMN id: 6, column_name: A, result_type: UInt8, source_id: 3\n-                FUNCTION id: 10, function_name: max, function_type: aggregate, result_type: UInt8\n+                    LIST id: 28, nodes: 1\n+                      COLUMN id: 29, column_name: A, result_type: UInt8, source_id: 3\n+                FUNCTION id: 30, function_name: max, function_type: aggregate, result_type: UInt8\n                   ARGUMENTS\n-                    LIST id: 11, nodes: 1\n-                      COLUMN id: 12, column_name: C, result_type: UInt8, source_id: 3\n+                    LIST id: 31, nodes: 1\n+                      COLUMN id: 32, column_name: C, result_type: UInt8, source_id: 3\n \n SELECT\n     __table1.x AS x,\n@@ -1114,98 +1114,98 @@ QUERY id: 0\n                 FUNCTION id: 9, function_name: modulo, function_type: ordinary, result_type: Int32\n                   ARGUMENTS\n                     LIST id: 10, nodes: 2\n-                      COLUMN id: 2, column_name: x, result_type: Int64, source_id: 3\n-                      CONSTANT id: 11, constant_value: UInt64_1000, constant_value_type: UInt16\n-      FUNCTION id: 12, function_name: max, function_type: window, result_type: UInt8\n+                      COLUMN id: 11, column_name: x, result_type: Int64, source_id: 3\n+                      CONSTANT id: 12, constant_value: UInt64_1000, constant_value_type: UInt16\n+      FUNCTION id: 13, function_name: max, function_type: window, result_type: UInt8\n         ARGUMENTS\n-          LIST id: 13, nodes: 1\n-            COLUMN id: 14, column_name: B, result_type: UInt8, source_id: 3\n+          LIST id: 14, nodes: 1\n+            COLUMN id: 15, column_name: B, result_type: UInt8, source_id: 3\n         WINDOW\n-          WINDOW id: 15, frame_type: RANGE, frame_begin_type: unbounded preceding, frame_end_type: current\n+          WINDOW id: 16, frame_type: RANGE, frame_begin_type: unbounded preceding, frame_end_type: current\n             PARTITION BY\n-              LIST id: 16, nodes: 1\n-                FUNCTION id: 17, function_name: modulo, function_type: ordinary, result_type: Int32\n+              LIST id: 17, nodes: 1\n+                FUNCTION id: 18, function_name: modulo, function_type: ordinary, result_type: Int32\n                   ARGUMENTS\n-                    LIST id: 18, nodes: 2\n-                      COLUMN id: 2, column_name: x, result_type: Int64, source_id: 3\n-                      CONSTANT id: 19, constant_value: UInt64_1000, constant_value_type: UInt16\n-      FUNCTION id: 20, function_name: max, function_type: window, result_type: UInt8\n+                    LIST id: 19, nodes: 2\n+                      COLUMN id: 20, column_name: x, result_type: Int64, source_id: 3\n+                      CONSTANT id: 21, constant_value: UInt64_1000, constant_value_type: UInt16\n+      FUNCTION id: 22, function_name: max, function_type: window, result_type: UInt8\n         ARGUMENTS\n-          LIST id: 21, nodes: 1\n-            COLUMN id: 22, column_name: C, result_type: UInt8, source_id: 3\n+          LIST id: 23, nodes: 1\n+            COLUMN id: 24, column_name: C, result_type: UInt8, source_id: 3\n         WINDOW\n-          WINDOW id: 23, frame_type: RANGE, frame_begin_type: unbounded preceding, frame_end_type: current\n+          WINDOW id: 25, frame_type: RANGE, frame_begin_type: unbounded preceding, frame_end_type: current\n             PARTITION BY\n-              LIST id: 24, nodes: 1\n-                FUNCTION id: 25, function_name: modulo, function_type: ordinary, result_type: Int32\n+              LIST id: 26, nodes: 1\n+                FUNCTION id: 27, function_name: modulo, function_type: ordinary, result_type: Int32\n                   ARGUMENTS\n-                    LIST id: 26, nodes: 2\n-                      COLUMN id: 2, column_name: x, result_type: Int64, source_id: 3\n-                      CONSTANT id: 27, constant_value: UInt64_1000, constant_value_type: UInt16\n+                    LIST id: 28, nodes: 2\n+                      COLUMN id: 29, column_name: x, result_type: Int64, source_id: 3\n+                      CONSTANT id: 30, constant_value: UInt64_1000, constant_value_type: UInt16\n   JOIN TREE\n     TABLE id: 3, alias: __table1, table_name: default.x\n   QUALIFY\n-    FUNCTION id: 28, function_name: or, function_type: ordinary, result_type: UInt8\n+    FUNCTION id: 31, function_name: or, function_type: ordinary, result_type: UInt8\n       ARGUMENTS\n-        LIST id: 29, nodes: 2\n-          FUNCTION id: 30, function_name: and, function_type: ordinary, result_type: UInt8\n+        LIST id: 32, nodes: 2\n+          FUNCTION id: 33, function_name: and, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n-              LIST id: 31, nodes: 2\n-                FUNCTION id: 4, function_name: max, function_type: window, result_type: UInt8\n+              LIST id: 34, nodes: 2\n+                FUNCTION id: 35, function_name: max, function_type: window, result_type: UInt8\n                   ARGUMENTS\n-                    LIST id: 5, nodes: 1\n-                      COLUMN id: 6, column_name: A, result_type: UInt8, source_id: 3\n+                    LIST id: 36, nodes: 1\n+                      COLUMN id: 37, column_name: A, result_type: UInt8, source_id: 3\n                   WINDOW\n-                    WINDOW id: 7, frame_type: RANGE, frame_begin_type: unbounded preceding, frame_end_type: current\n+                    WINDOW id: 38, frame_type: RANGE, frame_begin_type: unbounded preceding, frame_end_type: current\n                       PARTITION BY\n-                        LIST id: 8, nodes: 1\n-                          FUNCTION id: 9, function_name: modulo, function_type: ordinary, result_type: Int32\n+                        LIST id: 39, nodes: 1\n+                          FUNCTION id: 40, function_name: modulo, function_type: ordinary, result_type: Int32\n                             ARGUMENTS\n-                              LIST id: 10, nodes: 2\n-                                COLUMN id: 2, column_name: x, result_type: Int64, source_id: 3\n-                                CONSTANT id: 11, constant_value: UInt64_1000, constant_value_type: UInt16\n-                FUNCTION id: 12, function_name: max, function_type: window, result_type: UInt8\n+                              LIST id: 41, nodes: 2\n+                                COLUMN id: 42, column_name: x, result_type: Int64, source_id: 3\n+                                CONSTANT id: 43, constant_value: UInt64_1000, constant_value_type: UInt16\n+                FUNCTION id: 44, function_name: max, function_type: window, result_type: UInt8\n                   ARGUMENTS\n-                    LIST id: 13, nodes: 1\n-                      COLUMN id: 14, column_name: B, result_type: UInt8, source_id: 3\n+                    LIST id: 45, nodes: 1\n+                      COLUMN id: 46, column_name: B, result_type: UInt8, source_id: 3\n                   WINDOW\n-                    WINDOW id: 15, frame_type: RANGE, frame_begin_type: unbounded preceding, frame_end_type: current\n+                    WINDOW id: 47, frame_type: RANGE, frame_begin_type: unbounded preceding, frame_end_type: current\n                       PARTITION BY\n-                        LIST id: 16, nodes: 1\n-                          FUNCTION id: 17, function_name: modulo, function_type: ordinary, result_type: Int32\n+                        LIST id: 48, nodes: 1\n+                          FUNCTION id: 49, function_name: modulo, function_type: ordinary, result_type: Int32\n                             ARGUMENTS\n-                              LIST id: 18, nodes: 2\n-                                COLUMN id: 2, column_name: x, result_type: Int64, source_id: 3\n-                                CONSTANT id: 19, constant_value: UInt64_1000, constant_value_type: UInt16\n-          FUNCTION id: 32, function_name: and, function_type: ordinary, result_type: UInt8\n+                              LIST id: 50, nodes: 2\n+                                COLUMN id: 51, column_name: x, result_type: Int64, source_id: 3\n+                                CONSTANT id: 52, constant_value: UInt64_1000, constant_value_type: UInt16\n+          FUNCTION id: 53, function_name: and, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n-              LIST id: 33, nodes: 2\n-                FUNCTION id: 4, function_name: max, function_type: window, result_type: UInt8\n+              LIST id: 54, nodes: 2\n+                FUNCTION id: 55, function_name: max, function_type: window, result_type: UInt8\n                   ARGUMENTS\n-                    LIST id: 5, nodes: 1\n-                      COLUMN id: 6, column_name: A, result_type: UInt8, source_id: 3\n+                    LIST id: 56, nodes: 1\n+                      COLUMN id: 57, column_name: A, result_type: UInt8, source_id: 3\n                   WINDOW\n-                    WINDOW id: 7, frame_type: RANGE, frame_begin_type: unbounded preceding, frame_end_type: current\n+                    WINDOW id: 58, frame_type: RANGE, frame_begin_type: unbounded preceding, frame_end_type: current\n                       PARTITION BY\n-                        LIST id: 8, nodes: 1\n-                          FUNCTION id: 9, function_name: modulo, function_type: ordinary, result_type: Int32\n+                        LIST id: 59, nodes: 1\n+                          FUNCTION id: 60, function_name: modulo, function_type: ordinary, result_type: Int32\n                             ARGUMENTS\n-                              LIST id: 10, nodes: 2\n-                                COLUMN id: 2, column_name: x, result_type: Int64, source_id: 3\n-                                CONSTANT id: 11, constant_value: UInt64_1000, constant_value_type: UInt16\n-                FUNCTION id: 20, function_name: max, function_type: window, result_type: UInt8\n+                              LIST id: 61, nodes: 2\n+                                COLUMN id: 62, column_name: x, result_type: Int64, source_id: 3\n+                                CONSTANT id: 63, constant_value: UInt64_1000, constant_value_type: UInt16\n+                FUNCTION id: 64, function_name: max, function_type: window, result_type: UInt8\n                   ARGUMENTS\n-                    LIST id: 21, nodes: 1\n-                      COLUMN id: 22, column_name: C, result_type: UInt8, source_id: 3\n+                    LIST id: 65, nodes: 1\n+                      COLUMN id: 66, column_name: C, result_type: UInt8, source_id: 3\n                   WINDOW\n-                    WINDOW id: 23, frame_type: RANGE, frame_begin_type: unbounded preceding, frame_end_type: current\n+                    WINDOW id: 67, frame_type: RANGE, frame_begin_type: unbounded preceding, frame_end_type: current\n                       PARTITION BY\n-                        LIST id: 24, nodes: 1\n-                          FUNCTION id: 25, function_name: modulo, function_type: ordinary, result_type: Int32\n+                        LIST id: 68, nodes: 1\n+                          FUNCTION id: 69, function_name: modulo, function_type: ordinary, result_type: Int32\n                             ARGUMENTS\n-                              LIST id: 26, nodes: 2\n-                                COLUMN id: 2, column_name: x, result_type: Int64, source_id: 3\n-                                CONSTANT id: 27, constant_value: UInt64_1000, constant_value_type: UInt16\n+                              LIST id: 70, nodes: 2\n+                                COLUMN id: 71, column_name: x, result_type: Int64, source_id: 3\n+                                CONSTANT id: 72, constant_value: UInt64_1000, constant_value_type: UInt16\n \n SELECT\n     __table1.x AS x,\ndiff --git a/tests/queries/0_stateless/03285_analyzer_extract_common_expr_bug.reference b/tests/queries/0_stateless/03285_analyzer_extract_common_expr_bug.reference\nindex 5e3505a91b17..1c79e213721c 100644\n--- a/tests/queries/0_stateless/03285_analyzer_extract_common_expr_bug.reference\n+++ b/tests/queries/0_stateless/03285_analyzer_extract_common_expr_bug.reference\n@@ -17,63 +17,63 @@ QUERY id: 0\n                   FUNCTION id: 11, function_name: greater, function_type: ordinary, result_type: UInt8\n                     ARGUMENTS\n                       LIST id: 12, nodes: 2\n-                        COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                        CONSTANT id: 13, constant_value: UInt64_2, constant_value_type: UInt8\n-                  FUNCTION id: 14, function_name: greater, function_type: ordinary, result_type: UInt8\n+                        COLUMN id: 13, column_name: number, result_type: UInt64, source_id: 7\n+                        CONSTANT id: 14, constant_value: UInt64_2, constant_value_type: UInt8\n+                  FUNCTION id: 15, function_name: greater, function_type: ordinary, result_type: UInt8\n                     ARGUMENTS\n-                      LIST id: 15, nodes: 2\n-                        COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                        CONSTANT id: 16, constant_value: UInt64_10, constant_value_type: UInt8\n+                      LIST id: 16, nodes: 2\n+                        COLUMN id: 17, column_name: number, result_type: UInt64, source_id: 7\n+                        CONSTANT id: 18, constant_value: UInt64_10, constant_value_type: UInt8\n   JOIN TREE\n     TABLE_FUNCTION id: 7, alias: __table1, table_function_name: numbers\n       ARGUMENTS\n-        LIST id: 17, nodes: 1\n-          CONSTANT id: 18, constant_value: UInt64_10, constant_value_type: UInt8\n+        LIST id: 19, nodes: 1\n+          CONSTANT id: 20, constant_value: UInt64_10, constant_value_type: UInt8\n   GROUP BY\n-    LIST id: 19, nodes: 1\n-      FUNCTION id: 2, function_name: or, function_type: ordinary, result_type: UInt8\n+    LIST id: 21, nodes: 1\n+      FUNCTION id: 22, function_name: or, function_type: ordinary, result_type: UInt8\n         ARGUMENTS\n-          LIST id: 3, nodes: 2\n-            FUNCTION id: 4, function_name: greater, function_type: ordinary, result_type: UInt8\n+          LIST id: 23, nodes: 2\n+            FUNCTION id: 24, function_name: greater, function_type: ordinary, result_type: UInt8\n               ARGUMENTS\n-                LIST id: 5, nodes: 2\n-                  COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                  CONSTANT id: 8, constant_value: UInt64_10, constant_value_type: UInt8\n-            FUNCTION id: 9, function_name: and, function_type: ordinary, result_type: UInt8\n+                LIST id: 25, nodes: 2\n+                  COLUMN id: 26, column_name: number, result_type: UInt64, source_id: 7\n+                  CONSTANT id: 27, constant_value: UInt64_10, constant_value_type: UInt8\n+            FUNCTION id: 28, function_name: and, function_type: ordinary, result_type: UInt8\n               ARGUMENTS\n-                LIST id: 10, nodes: 2\n-                  FUNCTION id: 11, function_name: greater, function_type: ordinary, result_type: UInt8\n+                LIST id: 29, nodes: 2\n+                  FUNCTION id: 30, function_name: greater, function_type: ordinary, result_type: UInt8\n                     ARGUMENTS\n-                      LIST id: 12, nodes: 2\n-                        COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                        CONSTANT id: 13, constant_value: UInt64_2, constant_value_type: UInt8\n-                  FUNCTION id: 14, function_name: greater, function_type: ordinary, result_type: UInt8\n+                      LIST id: 31, nodes: 2\n+                        COLUMN id: 32, column_name: number, result_type: UInt64, source_id: 7\n+                        CONSTANT id: 33, constant_value: UInt64_2, constant_value_type: UInt8\n+                  FUNCTION id: 34, function_name: greater, function_type: ordinary, result_type: UInt8\n                     ARGUMENTS\n-                      LIST id: 15, nodes: 2\n-                        COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                        CONSTANT id: 16, constant_value: UInt64_10, constant_value_type: UInt8\n+                      LIST id: 35, nodes: 2\n+                        COLUMN id: 36, column_name: number, result_type: UInt64, source_id: 7\n+                        CONSTANT id: 37, constant_value: UInt64_10, constant_value_type: UInt8\n   HAVING\n-    FUNCTION id: 2, function_name: or, function_type: ordinary, result_type: UInt8\n+    FUNCTION id: 38, function_name: or, function_type: ordinary, result_type: UInt8\n       ARGUMENTS\n-        LIST id: 3, nodes: 2\n-          FUNCTION id: 4, function_name: greater, function_type: ordinary, result_type: UInt8\n+        LIST id: 39, nodes: 2\n+          FUNCTION id: 40, function_name: greater, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n-              LIST id: 5, nodes: 2\n-                COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                CONSTANT id: 8, constant_value: UInt64_10, constant_value_type: UInt8\n-          FUNCTION id: 9, function_name: and, function_type: ordinary, result_type: UInt8\n+              LIST id: 41, nodes: 2\n+                COLUMN id: 42, column_name: number, result_type: UInt64, source_id: 7\n+                CONSTANT id: 43, constant_value: UInt64_10, constant_value_type: UInt8\n+          FUNCTION id: 44, function_name: and, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n-              LIST id: 10, nodes: 2\n-                FUNCTION id: 11, function_name: greater, function_type: ordinary, result_type: UInt8\n+              LIST id: 45, nodes: 2\n+                FUNCTION id: 46, function_name: greater, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n-                    LIST id: 12, nodes: 2\n-                      COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                      CONSTANT id: 13, constant_value: UInt64_2, constant_value_type: UInt8\n-                FUNCTION id: 14, function_name: greater, function_type: ordinary, result_type: UInt8\n+                    LIST id: 47, nodes: 2\n+                      COLUMN id: 48, column_name: number, result_type: UInt64, source_id: 7\n+                      CONSTANT id: 49, constant_value: UInt64_2, constant_value_type: UInt8\n+                FUNCTION id: 50, function_name: greater, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n-                    LIST id: 15, nodes: 2\n-                      COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                      CONSTANT id: 16, constant_value: UInt64_10, constant_value_type: UInt8\n+                    LIST id: 51, nodes: 2\n+                      COLUMN id: 52, column_name: number, result_type: UInt64, source_id: 7\n+                      CONSTANT id: 53, constant_value: UInt64_10, constant_value_type: UInt8\n   SETTINGS optimize_extract_common_expressions=0\n \n SELECT (__table1.number > 10) OR ((__table1.number > 2) AND (__table1.number > 10)) AS a\n@@ -100,63 +100,63 @@ QUERY id: 0\n                   FUNCTION id: 11, function_name: greater, function_type: ordinary, result_type: UInt8\n                     ARGUMENTS\n                       LIST id: 12, nodes: 2\n-                        COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                        CONSTANT id: 13, constant_value: UInt64_2, constant_value_type: UInt8\n-                  FUNCTION id: 14, function_name: greater, function_type: ordinary, result_type: UInt8\n+                        COLUMN id: 13, column_name: number, result_type: UInt64, source_id: 7\n+                        CONSTANT id: 14, constant_value: UInt64_2, constant_value_type: UInt8\n+                  FUNCTION id: 15, function_name: greater, function_type: ordinary, result_type: UInt8\n                     ARGUMENTS\n-                      LIST id: 15, nodes: 2\n-                        COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                        CONSTANT id: 16, constant_value: UInt64_10, constant_value_type: UInt8\n+                      LIST id: 16, nodes: 2\n+                        COLUMN id: 17, column_name: number, result_type: UInt64, source_id: 7\n+                        CONSTANT id: 18, constant_value: UInt64_10, constant_value_type: UInt8\n   JOIN TREE\n     TABLE_FUNCTION id: 7, alias: __table1, table_function_name: numbers\n       ARGUMENTS\n-        LIST id: 17, nodes: 1\n-          CONSTANT id: 18, constant_value: UInt64_10, constant_value_type: UInt8\n+        LIST id: 19, nodes: 1\n+          CONSTANT id: 20, constant_value: UInt64_10, constant_value_type: UInt8\n   GROUP BY\n-    LIST id: 19, nodes: 1\n-      FUNCTION id: 2, function_name: or, function_type: ordinary, result_type: UInt8\n+    LIST id: 21, nodes: 1\n+      FUNCTION id: 22, function_name: or, function_type: ordinary, result_type: UInt8\n         ARGUMENTS\n-          LIST id: 3, nodes: 2\n-            FUNCTION id: 4, function_name: greater, function_type: ordinary, result_type: UInt8\n+          LIST id: 23, nodes: 2\n+            FUNCTION id: 24, function_name: greater, function_type: ordinary, result_type: UInt8\n               ARGUMENTS\n-                LIST id: 5, nodes: 2\n-                  COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                  CONSTANT id: 8, constant_value: UInt64_10, constant_value_type: UInt8\n-            FUNCTION id: 9, function_name: and, function_type: ordinary, result_type: UInt8\n+                LIST id: 25, nodes: 2\n+                  COLUMN id: 26, column_name: number, result_type: UInt64, source_id: 7\n+                  CONSTANT id: 27, constant_value: UInt64_10, constant_value_type: UInt8\n+            FUNCTION id: 28, function_name: and, function_type: ordinary, result_type: UInt8\n               ARGUMENTS\n-                LIST id: 10, nodes: 2\n-                  FUNCTION id: 11, function_name: greater, function_type: ordinary, result_type: UInt8\n+                LIST id: 29, nodes: 2\n+                  FUNCTION id: 30, function_name: greater, function_type: ordinary, result_type: UInt8\n                     ARGUMENTS\n-                      LIST id: 12, nodes: 2\n-                        COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                        CONSTANT id: 13, constant_value: UInt64_2, constant_value_type: UInt8\n-                  FUNCTION id: 14, function_name: greater, function_type: ordinary, result_type: UInt8\n+                      LIST id: 31, nodes: 2\n+                        COLUMN id: 32, column_name: number, result_type: UInt64, source_id: 7\n+                        CONSTANT id: 33, constant_value: UInt64_2, constant_value_type: UInt8\n+                  FUNCTION id: 34, function_name: greater, function_type: ordinary, result_type: UInt8\n                     ARGUMENTS\n-                      LIST id: 15, nodes: 2\n-                        COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                        CONSTANT id: 16, constant_value: UInt64_10, constant_value_type: UInt8\n+                      LIST id: 35, nodes: 2\n+                        COLUMN id: 36, column_name: number, result_type: UInt64, source_id: 7\n+                        CONSTANT id: 37, constant_value: UInt64_10, constant_value_type: UInt8\n   HAVING\n-    FUNCTION id: 2, function_name: or, function_type: ordinary, result_type: UInt8\n+    FUNCTION id: 38, function_name: or, function_type: ordinary, result_type: UInt8\n       ARGUMENTS\n-        LIST id: 3, nodes: 2\n-          FUNCTION id: 4, function_name: greater, function_type: ordinary, result_type: UInt8\n+        LIST id: 39, nodes: 2\n+          FUNCTION id: 40, function_name: greater, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n-              LIST id: 5, nodes: 2\n-                COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                CONSTANT id: 8, constant_value: UInt64_10, constant_value_type: UInt8\n-          FUNCTION id: 9, function_name: and, function_type: ordinary, result_type: UInt8\n+              LIST id: 41, nodes: 2\n+                COLUMN id: 42, column_name: number, result_type: UInt64, source_id: 7\n+                CONSTANT id: 43, constant_value: UInt64_10, constant_value_type: UInt8\n+          FUNCTION id: 44, function_name: and, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n-              LIST id: 10, nodes: 2\n-                FUNCTION id: 11, function_name: greater, function_type: ordinary, result_type: UInt8\n+              LIST id: 45, nodes: 2\n+                FUNCTION id: 46, function_name: greater, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n-                    LIST id: 12, nodes: 2\n-                      COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                      CONSTANT id: 13, constant_value: UInt64_2, constant_value_type: UInt8\n-                FUNCTION id: 14, function_name: greater, function_type: ordinary, result_type: UInt8\n+                    LIST id: 47, nodes: 2\n+                      COLUMN id: 48, column_name: number, result_type: UInt64, source_id: 7\n+                      CONSTANT id: 49, constant_value: UInt64_2, constant_value_type: UInt8\n+                FUNCTION id: 50, function_name: greater, function_type: ordinary, result_type: UInt8\n                   ARGUMENTS\n-                    LIST id: 15, nodes: 2\n-                      COLUMN id: 6, column_name: number, result_type: UInt64, source_id: 7\n-                      CONSTANT id: 16, constant_value: UInt64_10, constant_value_type: UInt8\n+                    LIST id: 51, nodes: 2\n+                      COLUMN id: 52, column_name: number, result_type: UInt64, source_id: 7\n+                      CONSTANT id: 53, constant_value: UInt64_10, constant_value_type: UInt8\n   SETTINGS optimize_extract_common_expressions=1\n \n SELECT (__table1.number > 10) OR ((__table1.number > 2) AND (__table1.number > 10)) AS a\ndiff --git a/tests/queries/0_stateless/03285_analyzer_optimize_disjunctions.reference b/tests/queries/0_stateless/03285_analyzer_optimize_disjunctions.reference\nindex e65b9b313e00..4909465dee82 100644\n--- a/tests/queries/0_stateless/03285_analyzer_optimize_disjunctions.reference\n+++ b/tests/queries/0_stateless/03285_analyzer_optimize_disjunctions.reference\n@@ -15,8 +15,8 @@ QUERY id: 0\n           FUNCTION id: 8, function_name: and, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n               LIST id: 9, nodes: 2\n-                COLUMN id: 7, column_name: B, result_type: UInt8, source_id: 3\n-                COLUMN id: 10, column_name: C, result_type: UInt8, source_id: 3\n+                COLUMN id: 10, column_name: B, result_type: UInt8, source_id: 3\n+                COLUMN id: 11, column_name: C, result_type: UInt8, source_id: 3\n   SETTINGS optimize_extract_common_expressions=0\n \n SELECT count() AS `count()`\n@@ -90,14 +90,14 @@ QUERY id: 0\n           FUNCTION id: 10, function_name: and, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n               LIST id: 11, nodes: 2\n-                COLUMN id: 9, column_name: B, result_type: UInt8, source_id: 3\n-                COLUMN id: 12, column_name: C, result_type: UInt8, source_id: 3\n-          FUNCTION id: 13, function_name: and, function_type: ordinary, result_type: UInt8\n+                COLUMN id: 12, column_name: B, result_type: UInt8, source_id: 3\n+                COLUMN id: 13, column_name: C, result_type: UInt8, source_id: 3\n+          FUNCTION id: 14, function_name: and, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n-              LIST id: 14, nodes: 3\n-                COLUMN id: 9, column_name: B, result_type: UInt8, source_id: 3\n-                COLUMN id: 15, column_name: D, result_type: UInt8, source_id: 3\n-                COLUMN id: 8, column_name: A, result_type: UInt8, source_id: 3\n+              LIST id: 15, nodes: 3\n+                COLUMN id: 16, column_name: B, result_type: UInt8, source_id: 3\n+                COLUMN id: 17, column_name: D, result_type: UInt8, source_id: 3\n+                COLUMN id: 18, column_name: A, result_type: UInt8, source_id: 3\n   SETTINGS optimize_extract_common_expressions=0\n \n SELECT count() AS `count()`\n@@ -154,14 +154,14 @@ QUERY id: 0\n           FUNCTION id: 10, function_name: and, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n               LIST id: 11, nodes: 3\n-                COLUMN id: 8, column_name: A, result_type: UInt8, source_id: 3\n-                COLUMN id: 9, column_name: B, result_type: UInt8, source_id: 3\n-                COLUMN id: 12, column_name: C, result_type: UInt8, source_id: 3\n-          FUNCTION id: 13, function_name: and, function_type: ordinary, result_type: UInt8\n+                COLUMN id: 12, column_name: A, result_type: UInt8, source_id: 3\n+                COLUMN id: 13, column_name: B, result_type: UInt8, source_id: 3\n+                COLUMN id: 14, column_name: C, result_type: UInt8, source_id: 3\n+          FUNCTION id: 15, function_name: and, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n-              LIST id: 14, nodes: 2\n-                COLUMN id: 15, column_name: D, result_type: UInt8, source_id: 3\n-                COLUMN id: 16, column_name: E, result_type: UInt8, source_id: 3\n+              LIST id: 16, nodes: 2\n+                COLUMN id: 17, column_name: D, result_type: UInt8, source_id: 3\n+                COLUMN id: 18, column_name: E, result_type: UInt8, source_id: 3\n   SETTINGS optimize_extract_common_expressions=0\n \n SELECT count() AS `count()`\n@@ -214,14 +214,14 @@ QUERY id: 0\n           FUNCTION id: 10, function_name: and, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n               LIST id: 11, nodes: 3\n-                COLUMN id: 8, column_name: A, result_type: UInt8, source_id: 3\n-                COLUMN id: 9, column_name: B, result_type: UInt8, source_id: 3\n-                COLUMN id: 12, column_name: C, result_type: UInt8, source_id: 3\n-          FUNCTION id: 13, function_name: and, function_type: ordinary, result_type: UInt8\n+                COLUMN id: 12, column_name: A, result_type: UInt8, source_id: 3\n+                COLUMN id: 13, column_name: B, result_type: UInt8, source_id: 3\n+                COLUMN id: 14, column_name: C, result_type: UInt8, source_id: 3\n+          FUNCTION id: 15, function_name: and, function_type: ordinary, result_type: UInt8\n             ARGUMENTS\n-              LIST id: 14, nodes: 2\n-                COLUMN id: 9, column_name: B, result_type: UInt8, source_id: 3\n-                COLUMN id: 12, column_name: C, result_type: UInt8, source_id: 3\n+              LIST id: 16, nodes: 2\n+                COLUMN id: 17, column_name: B, result_type: UInt8, source_id: 3\n+                COLUMN id: 18, column_name: C, result_type: UInt8, source_id: 3\n   SETTINGS optimize_extract_common_expressions=0\n \n SELECT count() AS `count()`\ndiff --git a/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope.reference b/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope.reference\nnew file mode 100644\nindex 000000000000..d00491fd7e5b\n--- /dev/null\n+++ b/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope.reference\n@@ -0,0 +1,1 @@\n+1\ndiff --git a/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope.sql b/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope.sql\nnew file mode 100644\nindex 000000000000..4240d831d259\n--- /dev/null\n+++ b/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope.sql\n@@ -0,0 +1,27 @@\n+WITH ws_wh AS\n+    (\n+        SELECT\n+            ws1.ws_order_number\n+        FROM\n+        (\n+            SELECT\n+                1 AS ws_order_number,\n+                1 AS ws_warehouse_sk\n+        ) AS ws1,\n+        (\n+            SELECT\n+                1 AS ws_order_number,\n+                2 AS ws_warehouse_sk\n+        ) AS ws2\n+        WHERE (ws1.ws_order_number = ws2.ws_order_number) AND (ws1.ws_warehouse_sk != ws2.ws_warehouse_sk)\n+    )\n+SELECT COUNT()\n+FROM\n+(\n+    SELECT 1 AS ws_order_number\n+) AS ws1\n+WHERE (ws1.ws_order_number IN (\n+    SELECT ws_order_number\n+    FROM ws_wh\n+))\n+SETTINGS join_use_nulls=1;\ndiff --git a/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope_2.reference b/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope_2.reference\nnew file mode 100644\nindex 000000000000..dd1e9654c1ee\n--- /dev/null\n+++ b/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope_2.reference\n@@ -0,0 +1,3 @@\n+1\t['type_2']\n+2\t['type_3','type_2']\n+3\t['type_2','type_3']\ndiff --git a/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope_2.sql b/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope_2.sql\nnew file mode 100644\nindex 000000000000..7e958d07f836\n--- /dev/null\n+++ b/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope_2.sql\n@@ -0,0 +1,27 @@\n+create table test\n+(\n+    raw_id String,\n+    columns_n Nested\n+        (\n+        col_1 Nullable(String),\n+        col_2 Nullable(String)\n+        )\n+)\n+Engine = MergeTree\n+order by (raw_id);\n+\n+insert into test\n+VALUES('1', ['type_1','type_2','type_1'],['0','0','1']),\n+      ('2', ['type_3','type_2','type_1'],['0','1','1']),\n+      ('3', ['type_1','type_2','type_3'],['1','0','1'])\n+;\n+\n+with t like '%_1%' as issue\n+select\n+    raw_id,\n+    arrayFilter((t, t2) -> (not issue),\n+        columns_n.col_1,\n+        columns_n.col_2\n+    )\n+from test\n+order by raw_id;\ndiff --git a/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope_3.reference b/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope_3.reference\nnew file mode 100644\nindex 000000000000..573541ac9702\n--- /dev/null\n+++ b/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope_3.reference\n@@ -0,0 +1,1 @@\n+0\ndiff --git a/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope_3.sql b/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope_3.sql\nnew file mode 100644\nindex 000000000000..84d74d568a36\n--- /dev/null\n+++ b/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope_3.sql\n@@ -0,0 +1,18 @@\n+CREATE TABLE test\n+(\n+    a UInt64,\n+    b UInt64,\n+)\n+ENGINE = MergeTree\n+ORDER BY tuple();\n+\n+WITH\n+   (a > b) as cte,\n+   query AS\n+    (\n+        SELECT count()\n+        FROM test\n+        WHERE cte\n+    )\n+SELECT *\n+FROM query;\ndiff --git a/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope_4.reference b/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope_4.reference\nnew file mode 100644\nindex 000000000000..d00491fd7e5b\n--- /dev/null\n+++ b/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope_4.reference\n@@ -0,0 +1,1 @@\n+1\ndiff --git a/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope_4.sql b/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope_4.sql\nnew file mode 100644\nindex 000000000000..ba167990b05e\n--- /dev/null\n+++ b/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope_4.sql\n@@ -0,0 +1,21 @@\n+SET allow_experimental_analyzer=1;\n+\n+with\n+    arrayMap(x -> x + 1, [0]) as a\n+select\n+    1\n+where\n+    1 in (select arrayJoin(a));\n+\n+CREATE TABLE users (uid Int16, name String, age Int16) ENGINE=Memory;\n+\n+INSERT INTO users VALUES (1231, 'John', 10);\n+INSERT INTO users VALUES (6666, 'Ksenia', 20);\n+INSERT INTO users VALUES (8888, 'Alice', 30);\n+\n+CREATE OR REPLACE FUNCTION oldest_before AS (age_max) -> (\n+  SELECT uid FROM users WHERE users.age < age_max ORDER BY users.age DESC LIMIT 1\n+);\n+\n+SELECT *, oldest_before(users.age)\n+FROM users; -- { serverError UNSUPPORTED_METHOD }\ndiff --git a/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope_5.reference b/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope_5.reference\nnew file mode 100644\nindex 000000000000..d00491fd7e5b\n--- /dev/null\n+++ b/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope_5.reference\n@@ -0,0 +1,1 @@\n+1\ndiff --git a/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope_5.sql b/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope_5.sql\nnew file mode 100644\nindex 000000000000..b7fd8e111518\n--- /dev/null\n+++ b/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope_5.sql\n@@ -0,0 +1,11 @@\n+with query_1 as (\n+    with shared_data as (\n+        select 1 as value\n+    ), shared_data_2 as (\n+        select * from shared_data\n+    )\n+    select * from shared_data_2\n+), shared_data as (\n+    select * from query_1\n+)\n+select * from shared_data s;\ndiff --git a/tests/queries/0_stateless/03316_analyzer_unique_table_aliases_dist.reference b/tests/queries/0_stateless/03316_analyzer_unique_table_aliases_dist.reference\nnew file mode 100644\nindex 000000000000..7f6efad4038a\n--- /dev/null\n+++ b/tests/queries/0_stateless/03316_analyzer_unique_table_aliases_dist.reference\n@@ -0,0 +1,1 @@\n+3\t3\ndiff --git a/tests/queries/0_stateless/03316_analyzer_unique_table_aliases_dist.sql b/tests/queries/0_stateless/03316_analyzer_unique_table_aliases_dist.sql\nnew file mode 100644\nindex 000000000000..6e2e99c583fe\n--- /dev/null\n+++ b/tests/queries/0_stateless/03316_analyzer_unique_table_aliases_dist.sql\n@@ -0,0 +1,13 @@\n+SET max_parallel_replicas = 3, cluster_for_parallel_replicas = 'test_cluster_one_shard_three_replicas_localhost', enable_parallel_replicas = 1, parallel_replicas_for_non_replicated_merge_tree=1;\n+\n+SELECT\n+    sum(number GLOBAL IN (\n+        SELECT number AS n\n+        FROM numbers(5)\n+        WHERE number GLOBAL IN (\n+            SELECT *\n+            FROM numbers(3)\n+        )\n+    ) AS res),\n+    sum(number * res)\n+FROM remote('127.0.0.2', numbers(10));\n",
  "problem_statement": "UNSUPPORTED_METHOD for WITH statement with the production analyzer\nClickHouse version 24.4.1.2088\r\n\r\n**Describe what's wrong**\r\n\r\nWITH statement stopped working with UNSUPPORTED_METHOD. Probably a bug in beta analyzer:\r\n\r\nhttps://fiddle.clickhouse.com/d36accf5-2e87-476f-b9e7-f2f5b7c746fd\r\n\r\n**Expected behavior**\r\n\r\nThe WITH statement should work the same on both analyzers.\r\n\r\n**Error message and/or stacktrace**\r\n\r\n```\r\n[cac8ec3c560a] 2024.05.01 14:27:23.425533 [ 48 ] {a7d2aef8-abdb-4365-8377-6080ae86fcfb} <Debug> executeQuery: (from 127.0.0.1:38868) WITH Block_Height BETWEEN 1 AND 2 AS block_filter SELECT * FROM test WHERE block_filter AND ( Block_Date IN ( SELECT Block_Date FROM test WHERE block_filter ) ) SETTINGS allow_experimental_analyzer = false; (stage: Complete)\r\n[cac8ec3c560a] 2024.05.01 14:27:23.426251 [ 48 ] {a7d2aef8-abdb-4365-8377-6080ae86fcfb} <Trace> ContextAccess (default): Access granted: SELECT(Block_Height, Block_Date) ON default.test\r\n[cac8ec3c560a] 2024.05.01 14:27:23.426337 [ 48 ] {a7d2aef8-abdb-4365-8377-6080ae86fcfb} <Trace> InterpreterSelectQuery: FetchColumns -> Complete\r\n[cac8ec3c560a] 2024.05.01 14:27:23.426480 [ 48 ] {a7d2aef8-abdb-4365-8377-6080ae86fcfb} <Trace> ContextAccess (default): Access granted: SELECT(a, b, Block_Height, Block_Date) ON default.test\r\n[cac8ec3c560a] 2024.05.01 14:27:23.426538 [ 48 ] {a7d2aef8-abdb-4365-8377-6080ae86fcfb} <Trace> InterpreterSelectQuery: FetchColumns -> Complete\r\n[cac8ec3c560a] 2024.05.01 14:27:23.427962 [ 718 ] {a7d2aef8-abdb-4365-8377-6080ae86fcfb} <Trace> CreatingSetsTransform: Creating set, key: __set_15181162166609052100_13383299000571546906\r\n[cac8ec3c560a] 2024.05.01 14:27:23.428024 [ 718 ] {a7d2aef8-abdb-4365-8377-6080ae86fcfb} <Debug> CreatingSetsTransform: Subquery has empty result.\r\n[cac8ec3c560a] 2024.05.01 14:27:23.429282 [ 48 ] {a7d2aef8-abdb-4365-8377-6080ae86fcfb} <Debug> TCPHandler: Processed in 0.004043954 sec.\r\n[cac8ec3c560a] 2024.05.01 14:27:23.430255 [ 48 ] {4f56781f-8214-47e0-ba42-391ecba97888} <Debug> executeQuery: (from 127.0.0.1:38868) SELECT 'THIS WORKS ---'; (stage: Complete)\r\n[cac8ec3c560a] 2024.05.01 14:27:23.430397 [ 48 ] {4f56781f-8214-47e0-ba42-391ecba97888} <Trace> Planner: Query SELECT 'THIS WORKS ---' AS `'THIS WORKS ---'` FROM system.one AS __table1 to stage Complete\r\n[cac8ec3c560a] 2024.05.01 14:27:23.430426 [ 48 ] {4f56781f-8214-47e0-ba42-391ecba97888} <Trace> ContextAccess (default): Access granted: SELECT(dummy) ON system.one\r\n[cac8ec3c560a] 2024.05.01 14:27:23.430476 [ 48 ] {4f56781f-8214-47e0-ba42-391ecba97888} <Trace> Planner: Query SELECT 'THIS WORKS ---' AS `'THIS WORKS ---'` FROM system.one AS __table1 from stage FetchColumns to stage Complete\r\n[cac8ec3c560a] 2024.05.01 14:27:23.430927 [ 48 ] {4f56781f-8214-47e0-ba42-391ecba97888} <Debug> executeQuery: Read 1 rows, 1.00 B in 0.000681 sec., 1468.4287812041116 rows/sec., 1.43 KiB/sec.\r\n[cac8ec3c560a] 2024.05.01 14:27:23.430971 [ 48 ] {4f56781f-8214-47e0-ba42-391ecba97888} <Debug> TCPHandler: Processed in 0.000912421 sec.\r\n[cac8ec3c560a] 2024.05.01 14:27:23.431756 [ 48 ] {ddea44dc-7fd0-4a42-8f4c-be3f2995af6c} <Debug> executeQuery: (from 127.0.0.1:38868) WITH Block_Height BETWEEN 1 AND 2 AS block_filter SELECT * FROM test WHERE block_filter AND ( Block_Date IN ( SELECT Block_Date FROM test WHERE block_filter ) ); (stage: Complete)\r\n[cac8ec3c560a] 2024.05.01 14:27:23.432705 [ 48 ] {ddea44dc-7fd0-4a42-8f4c-be3f2995af6c} <Error> executeQuery: Code: 1. DB::Exception: Resolve identifier 'block_filter' from parent scope only supported for constants and CTE. Actual (Block_Height >= 1) AND (Block_Height <= 2) AS block_filter node type FUNCTION. In scope (SELECT Block_Date FROM test WHERE block_filter). (UNSUPPORTED_METHOD) (version 24.4.1.2088 (official build)) (from 127.0.0.1:38868) (in query: WITH Block_Height BETWEEN 1 AND 2 AS block_filter SELECT * FROM test WHERE block_filter AND ( Block_Date IN ( SELECT Block_Date FROM test WHERE block_filter ) );), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000c9a449b\r\n1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000780b9ac\r\n2. DB::Exception::Exception<String const&, String, char const*, String>(int, FormatStringHelperImpl<std::type_identity<String const&>::type, std::type_identity<String>::type, std::type_identity<char const*>::type, std::type_identity<String>::type>, String const&, String&&, char const*&&, String&&) @ 0x0000000010ac0e4f\r\n3. DB::(anonymous namespace)::QueryAnalyzer::tryResolveIdentifier(DB::(anonymous namespace)::IdentifierLookup const&, DB::(anonymous namespace)::IdentifierResolveScope&, DB::(anonymous namespace)::IdentifierResolveSettings) @ 0x0000000010a95f53\r\n4. DB::(anonymous namespace)::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::(anonymous namespace)::IdentifierResolveScope&, bool, bool) @ 0x0000000010a84eb8\r\n5. DB::(anonymous namespace)::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::(anonymous namespace)::IdentifierResolveScope&) @ 0x0000000010a7a7d6\r\n6. DB::(anonymous namespace)::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::(anonymous namespace)::IdentifierResolveScope&, bool, bool) @ 0x0000000010a84933\r\n7. DB::(anonymous namespace)::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::(anonymous namespace)::IdentifierResolveScope&, bool, bool) @ 0x0000000010a831ed\r\n8. DB::(anonymous namespace)::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::(anonymous namespace)::IdentifierResolveScope&) @ 0x0000000010a9d957\r\n9. DB::(anonymous namespace)::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::(anonymous namespace)::IdentifierResolveScope&, bool, bool) @ 0x0000000010a841bc\r\n10. DB::(anonymous namespace)::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::(anonymous namespace)::IdentifierResolveScope&, bool, bool) @ 0x0000000010a831ed\r\n11. DB::(anonymous namespace)::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::(anonymous namespace)::IdentifierResolveScope&) @ 0x0000000010a9d957\r\n12. DB::(anonymous namespace)::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::(anonymous namespace)::IdentifierResolveScope&, bool, bool) @ 0x0000000010a841bc\r\n13. DB::(anonymous namespace)::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::(anonymous namespace)::IdentifierResolveScope&) @ 0x0000000010a7a7d6\r\n14. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010a780c5\r\n15. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010a76983\r\n16. DB::(anonymous namespace)::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.9862110563685019565) @ 0x0000000010d0aafd\r\n17. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x0000000010d09899\r\n18. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.9862110563685019565) @ 0x0000000010d0c86c\r\n19. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x0000000010c9ec79\r\n20. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x000000001111a030\r\n21. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000111169ba\r\n22. DB::TCPHandler::runImpl() @ 0x00000000122a59c4\r\n23. DB::TCPHandler::run() @ 0x00000000122c1fb9\r\n24. Poco::Net::TCPServerConnection::start() @ 0x0000000014c105b2\r\n25. Poco::Net::TCPServerDispatcher::run() @ 0x0000000014c113f9\r\n26. Poco::PooledThread::run() @ 0x0000000014d09a61\r\n27. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000014d07ffd\r\n28. ? @ 0x000077fa4d433609\r\n29. ? @ 0x000077fa4d34e353\r\n\r\nReceived exception from server (version 24.4.1):\r\nCode: 1. DB::Exception: Received from localhost:9000. DB::Exception: Resolve identifier 'block_filter' from parent scope only supported for constants and CTE. Actual (Block_Height >= 1) AND (Block_Height <= 2) AS block_filter node type FUNCTION. In scope (SELECT Block_Date FROM test WHERE block_filter). (UNSUPPORTED_METHOD)\r\n(query: WITH Block_Height BETWEEN 1 AND 2 AS block_filter\r\nSELECT *\r\nFROM test\r\nWHERE block_filter \r\nAND (\r\n    Block_Date IN (\r\n      SELECT Block_Date FROM test WHERE block_filter\r\n    )\r\n);)\r\n```\r\n\nResolve identifier supported for constants and CTE. Actual node type COLUMN with `allow_experimental_analyzer=1, join_use_nulls=1`\n\r\n\r\n> You have to provide the following information whenever possible.\r\n\r\n**Describe what's wrong**\r\n24.1 https://fiddle.clickhouse.com/5ada3a58-e2ea-4547-8abf-cd8888cf8cc8\r\n23.3 https://fiddle.clickhouse.com/2672375c-0bda-49b3-865e-6004c004e281 working correctly\r\n\r\n```\r\nWITH ws_wh AS\r\n    (\r\n        SELECT\r\n            ws1.ws_order_number\r\n        FROM\r\n        (\r\n            SELECT\r\n                1 AS ws_order_number,\r\n                1 AS ws_warehouse_sk\r\n        ) AS ws1,\r\n        (\r\n            SELECT\r\n                1 AS ws_order_number,\r\n                2 AS ws_warehouse_sk\r\n        ) AS ws2\r\n        WHERE (ws1.ws_order_number = ws2.ws_order_number) AND (ws1.ws_warehouse_sk != ws2.ws_warehouse_sk)\r\n    )\r\nSELECT COUNT()\r\nFROM\r\n(\r\n    SELECT 1 AS ws_order_number\r\n) AS ws1\r\nWHERE (ws1.ws_order_number IN (\r\n    SELECT ws_order_number\r\n    FROM ws_wh\r\n))\r\nSETTINGS allow_experimental_analyzer = 1,join_use_nulls=1\r\n\r\nReceived exception from server (version 24.1.1):\r\nCode: 1. DB::Exception: Received from localhost:9000. DB::Exception: Resolve identifier 'ws_order_number' from parent scope only supported for constants and CTE. Actual ws1.ws_order_number node type COLUMN. In scope (SELECT ws_order_number FROM ws_wh). (UNSUPPORTED_METHOD)\r\n\r\nWorks for SETTINGS allow_experimental_analyzer = 0,join_use_nulls=1 or SETTINGS allow_experimental_analyzer = 1,join_use_nulls=0\r\n```\r\n\r\n**Does it reproduce on recent release?**\r\n\r\nYes\r\n\r\n```\r\nReceived exception from server (version 24.1.1):\r\nCode: 1. DB::Exception: Received from localhost:9000. DB::Exception: Resolve identifier 'ws_order_number' from parent scope only supported for constants and CTE. Actual ws1.ws_order_number node type COLUMN. In scope (SELECT ws_order_number FROM ws_wh). (UNSUPPORTED_METHOD)\r\n(query: with ws_wh as\r\n(select ws1.ws_order_number,ws1.ws_warehouse_sk wh1,ws2.ws_warehouse_sk wh2\r\n from web_sales ws1,web_sales ws2\r\n where ws1.ws_order_number = ws2.ws_order_number\r\n   and ws1.ws_warehouse_sk <> ws2.ws_warehouse_sk)\r\n select  \r\n   count(distinct ws_order_number) as \"order count\"\r\n  ,sum(ws_ext_ship_cost) as \"total shipping cost\"\r\n  ,sum(ws_net_profit) as \"total net profit\"\r\nfrom\r\n   web_sales ws1\r\n  ,date_dim\r\n  ,customer_address\r\n  ,web_site\r\nwhere\r\n    d_date between '1999-5-01' and \r\n           (cast('1999-5-01' as date) + INTERVAL 60 day)\r\nand ws1.ws_ship_date_sk = d_date_sk\r\nand ws1.ws_ship_addr_sk = ca_address_sk\r\nand ca_state = 'TX'\r\nand ws1.ws_web_site_sk = web_site_sk\r\nand web_company_name = 'pri'\r\nand ws1.ws_order_number in (select ws_order_number\r\n                            from ws_wh)\r\nand ws1.ws_order_number in (select wr_order_number\r\n                            from web_returns,ws_wh\r\n                            where wr_order_number = ws_wh.ws_order_number)\r\norder by count(distinct ws_order_number)\r\nLIMIT 100;)\r\n```\nCode: 47. DB::Exception: Unknown expression or function identifier in scope WITH \nID Finance\r\n\r\nOur solution (under 23.8.2 of clickhouse) contains this feature within WITH clause:\r\n\r\n```\r\ncreate table test\r\n(\r\n    raw_id String,\r\n    columns_n Nested\r\n        (\r\n        col_1 Nullable(String),\r\n        col_2 Nullable(String)\r\n        )\r\n)\r\n    Engine = MergeTree\r\n        order by (raw_id);\r\n\r\ninsert into test\r\nVALUES('1', ['type_1','type_2','type_1'],['0','0','1']),\r\n      ('2', ['type_3','type_2','type_1'],['0','1','1']),\r\n      ('3', ['type_1','type_2','type_3'],['1','0','1'])\r\n;\r\n\r\n**with t like '%_1%' as issue\r\nselect  raw_id,\r\n        arrayFilter((t, t2) -> (not issue),\r\n            columns_n.col_1,\r\n            columns_n.col_2\r\n        )\r\nfrom test;**\r\n```\r\n\r\nWhen we try to use the same feature in clickhouse version 24.5.1 we get the following error:\r\n\r\n`Code: 47. DB::Exception: Unknown expression or function identifier 't' in scope WITH t LIKE '%_1%' AS issue SELECT raw_id, arrayFilter((t, t2) -> (NOT issue), columns_n.col_1, columns_n.col_2) FROM test (UNKNOWN_IDENTIFIER) (version 24.5.1.1763 (official build)`\r\n\r\nIt worked only when I used \r\n\r\n`SETTINGS allow_experimental_analyzer = 0;`\r\n\r\nThe question is:\r\n\r\nWill our solution require additional tweaks when the old analyzer will be deprecated fully (meaning we won't be able to use SETTINGS allow_experimental_analyzer = 0;)\r\n\r\nRegards\r\n\r\n\r\n\r\n\nWITH Clause CTE expressions causes exception when used in CTE subquery on latest version.\n**Describe the issue**\r\nA CTE expression used in a CTE subquery causes an exception on latest version.\r\n\r\n**How to reproduce**\r\nClickHouse versions tested:\r\n- Docker Image `clickhouse/clickhouse-server:latest`\r\n- Docker Image `clickhouse/clickhouse-server:24.2`\r\n\r\nOS: `Ubuntu 22.04 LTS`\r\n\r\nQuery in concern:\r\n```sql\r\nWITH\r\n(`database` LIKE 'system') AS `$condition`,\r\n`$main` AS (SELECT DISTINCT table FROM system.tables WHERE `$condition`)\r\nSELECT * FROM `$main`;\r\n```\r\nThe above query can be executed perfectly on `clickhouse/clickhouse-server:24.2` using ClickHouse's command line client. \r\n\r\nHowever, in the latest image, the following exception is received:\r\n```\r\nReceived exception from server (version 24.3.2):\r\nCode: 47. DB::Exception: Received from localhost:9000. DB::Exception: Unknown expression or function identifier 'database' in scope WITH database LIKE 'system' AS `$condition`, `$main` AS (SELECT DISTINCT `table` FROM system.tables WHERE `$condition`) SELECT * FROM `$main`. (UNKNOWN_IDENTIFIER)\r\n```\r\n\r\n**Error message and/or stacktrace**\r\nSee `clickhouse-server.err.log` below\r\n```\r\n2024.04.25 03:35:28.986946 [ 48 ] {4ec0d7db-bc36-4bcb-8056-bf805f8de9b6} <Error> TCPHandler: Code: 47. DB::Exception: Unknown expression or function identifier 'database' in scope WITH database LIKE 'system' AS `$condition`, `$main` AS (SELECT DISTINCT `table` FROM system.tables WHERE `$condition`) SELECT * FROM `$main`. (UNKNOWN_IDENTIFIER), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000cbcedbb\r\n1. DB::Exception::Exception<char const*, String&, String const&, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String const&>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String const&, String&&, String&&) @ 0x0000000010c1a54b\r\n2. DB::(anonymous namespace)::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::(anonymous namespace)::IdentifierResolveScope&, bool, bool) @ 0x0000000010bd3eee\r\n3. DB::(anonymous namespace)::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::(anonymous namespace)::IdentifierResolveScope&, bool, bool) @ 0x0000000010bcf54d\r\n4. DB::(anonymous namespace)::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::(anonymous namespace)::IdentifierResolveScope&) @ 0x0000000010be9237\r\n5. DB::(anonymous namespace)::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::(anonymous namespace)::IdentifierResolveScope&, bool, bool) @ 0x0000000010bd09a0\r\n6. DB::(anonymous namespace)::QueryAnalyzer::tryResolveIdentifierFromAliases(DB::(anonymous namespace)::IdentifierLookup const&, DB::(anonymous namespace)::IdentifierResolveScope&, DB::(anonymous namespace)::IdentifierResolveSettings) @ 0x0000000010be3f94\r\n7. DB::(anonymous namespace)::QueryAnalyzer::tryResolveIdentifier(DB::(anonymous namespace)::IdentifierLookup const&, DB::(anonymous namespace)::IdentifierResolveScope&, DB::(anonymous namespace)::IdentifierResolveSettings) @ 0x0000000010be0efc\r\n8. DB::(anonymous namespace)::QueryAnalyzer::tryResolveIdentifier(DB::(anonymous namespace)::IdentifierLookup const&, DB::(anonymous namespace)::IdentifierResolveScope&, DB::(anonymous namespace)::IdentifierResolveSettings) @ 0x0000000010be177f\r\n9. DB::(anonymous namespace)::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::(anonymous namespace)::IdentifierResolveScope&, bool, bool) @ 0x0000000010bd1507\r\n10. DB::(anonymous namespace)::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::(anonymous namespace)::IdentifierResolveScope&) @ 0x0000000010bc753c\r\n11. DB::(anonymous namespace)::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::(anonymous namespace)::IdentifierResolveScope&, bool, bool) @ 0x0000000010bd0f6d\r\n12. DB::(anonymous namespace)::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::(anonymous namespace)::IdentifierResolveScope&, DB::(anonymous namespace)::QueryExpressionsAliasVisitor&) @ 0x0000000010bd9200\r\n13. DB::(anonymous namespace)::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::(anonymous namespace)::IdentifierResolveScope&) @ 0x0000000010bc7304\r\n14. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000010bc4d25\r\n15. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x0000000010bc35e3\r\n16. DB::(anonymous namespace)::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.17547086829861056443) @ 0x0000000010e5421d\r\n17. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x0000000010e52fb1\r\n18. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.17547086829861056443) @ 0x0000000010e55f8c\r\n19. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x0000000010de7ef9\r\n20. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x000000001126f9c8\r\n21. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x000000001126bf9a\r\n22. DB::TCPHandler::runImpl() @ 0x0000000012351d84\r\n23. DB::TCPHandler::run() @ 0x000000001236d099\r\n24. Poco::Net::TCPServerConnection::start() @ 0x0000000014c9bef2\r\n25. Poco::Net::TCPServerDispatcher::run() @ 0x0000000014c9cd39\r\n26. Poco::PooledThread::run() @ 0x0000000014d954a1\r\n27. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000014d93a3d\r\n28. ? @ 0x0000758715368609\r\n29. ? @ 0x000075871528d353\r\n```\r\n\r\n**Additional Information**\r\nThe following query is also tested:\r\n```sql\r\nWITH\r\n(`database` LIKE 'system') AS `$cond`\r\nSELECT DISTINCT table FROM system.tables WHERE `$cond`;\r\n```\r\nThis query works perfectly on both versions.\nSame-named, nested CTEs with the production analyzer enabled error with `UNKNOWN_TABLE`\nClickHouse version: v24.8.2.3\r\n\r\n**Describe what's wrong**\r\n\r\nWith the new analyzer, ClickHouse is unable to execute a query where an nested CTE uses a CTE with the same name as an outer CTE. For example, this query fails with `UNKNOWN_TABLE`:\r\n\r\n```sql\r\nwith query_1 as (\r\n    with shared_data as (\r\n        select 1 as value\r\n    ), shared_data_2 as (\r\n        select * from shared_data\r\n    )\r\n    select * from shared_data_2\r\n), shared_data as (\r\n    select * from query_1\r\n)\r\nselect * from shared_data s -- raises UNKNOWN_TABLE\r\n```\r\n\r\nIf I disable the new analyzer with `allow_experimental_analyzer=0`, the query returns what I expect and doesn't error.\r\n\r\nLink to [play.clickhouse.com](https://play.clickhouse.com/play?user=play#d2l0aCBxdWVyeV8xIGFzICgKICAgIHdpdGggc2hhcmVkX2RhdGEgYXMgKAogICAgICAgIHNlbGVjdCAxIGFzIHZhbHVlCiAgICApLCBzaGFyZWRfZGF0YV8yIGFzICgKICAgICAgICBzZWxlY3QgKiBmcm9tIHNoYXJlZF9kYXRhCiAgICApCiAgICBzZWxlY3QgKiBmcm9tIHNoYXJlZF9kYXRhXzIKKSwgc2hhcmVkX2RhdGEgYXMgKAogICAgc2VsZWN0ICogZnJvbSBxdWVyeV8xCikKc2VsZWN0ICogZnJvbSBzaGFyZWRfZGF0YSBzIAo=) (fiddle isn't working right now)\r\n\r\n**Does it reproduce on the most recent release?**\r\n\r\nYes\r\n\r\n**How to reproduce**\r\n\r\n* Run the above query; see error\r\n\r\n**Expected behavior**\r\n\r\nI would expect that the query execute and follow the behavior of the old analyzer.\r\n\r\n**Error message and/or stacktrace**\r\n\r\n```\r\n0. Poco::Exception::Exception(String const&, int) @ 0x000000010d4b0e60\r\n1. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x00000001073bb0e4\r\n2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000102c48a7c\r\n3. DB::Exception::Exception<String const&, String>(int, FormatStringHelperImpl<std::type_identity<String const&>::type, std::type_identity<String>::type>, String const&, String&&) @ 0x00000001031b5380\r\n4. DB::QueryAnalyzer::initializeQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x000000010a74eb24\r\n5. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000010a729644\r\n6. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000010a72e3b0\r\n7. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000010a74f834\r\n8. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000010a729664\r\n9. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000010a72e3b0\r\n10. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000010a74f834\r\n11. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000010a729664\r\n12. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000010a72e3b0\r\n13. DB::QueryAnalyzer::resolveQueryJoinTreeNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, DB::QueryExpressionsAliasVisitor&) @ 0x000000010a74f834\r\n14. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000010a729664\r\n15. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000010a728c28\r\n16. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x000000010a728540\r\n17. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000010a6a393c\r\n18. DB::(anonymous namespace)::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x000000010ac3a080\r\n19. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000010ac382f8\r\n20. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) @ 0x000000010ac3b884\r\n21. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x000000010abdb13c\r\n22. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x000000010af12004\r\n23. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x000000010af0f754\r\n24. DB::LocalConnection::sendQuery(DB::ConnectionTimeouts const&, String const&, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>> const&, String const&, unsigned long long, DB::Settings const*, DB::ClientInfo const*, bool, std::function<void (DB::Progress const&)>) @ 0x000000010be4e9f8\r\n25. DB::ClientBase::processOrdinaryQuery(String const&, std::shared_ptr<DB::IAST>) @ 0x000000010be0df70\r\n26. DB::ClientBase::processParsedSingleQuery(String const&, String const&, std::shared_ptr<DB::IAST>, std::optional<bool>, bool) @ 0x000000010be0cc04\r\n27. DB::ClientBase::executeMultiQuery(String const&) @ 0x000000010be14c80\r\n28. DB::ClientBase::processQueryText(String const&) @ 0x000000010be15978\r\n29. DB::ClientBase::runInteractive() @ 0x000000010be178d0\r\n30. DB::LocalServer::main(std::vector<String, std::allocator<String>> const&) @ 0x0000000107693790\r\n31. Poco::Util::Application::run() @ 0x000000010d58825c\r\n\r\n\r\nElapsed: 0.001 sec.\r\n\r\nReceived exception:\r\nCode: 60. DB::Exception: Unknown table expression identifier 'shared_data' in scope shared_data_2 AS (SELECT * FROM shared_data). (UNKNOWN_TABLE)\r\n```\r\n\r\n\nAnalyzer: Expression can not be resolved from parent scope\n**Company or project name**\r\n\r\nClickHouse inc.\r\n\r\n**Describe what's wrong**\r\n\r\nIdentifiers from the nested CTE are not evaluated properly. \r\n\r\nhttps://fiddle.clickhouse.com/a62f1ed0-aa44-44af-888a-5b194d81b5a6\r\n\r\n**Does it reproduce on the most recent release?**\r\n\r\nYes.\r\n\r\n**How to reproduce**\r\n\r\n```\r\nCREATE TABLE test\r\n(\r\n    a UInt64,\r\n    b UInt64,\r\n)\r\nENGINE = MergeTree\r\nORDER BY tuple();\r\n\r\nSET allow_experimental_analyzer=1;\r\n\r\nWITH\r\n   (a > b) as cte,\r\n   query AS\r\n    (\r\n        SELECT count()\r\n        FROM test\r\n        WHERE cte\r\n    )\r\nSELECT *\r\nFROM query;\r\n```\r\n\r\n\r\n**Error message and/or stacktrace**\r\n\r\n```\r\nReceived exception from server (version 24.10.1):\r\nCode: 47. DB::Exception: Received from localhost:9000. DB::Exception: Unknown expression or function identifier `a` in scope WITH a > b AS cte, query AS (SELECT count() FROM test WHERE cte) SELECT * FROM query. (UNKNOWN_IDENTIFIER)\r\n(query: WITH\r\n   (a > b) as cte,\r\n   query AS\r\n    (\r\n        SELECT count()\r\n        FROM test\r\n        WHERE cte\r\n    )\r\nSELECT *\r\nFROM query;)\r\n```\r\n\nAnalyzer: (Almost) constant expression can not be resolved from parent scope\nClickHouse v24.3+ (including latest lts v24.8 and latest in fiddle v24.10)\r\n\r\nException:\r\n```\r\nwith\r\n    arrayMap(x -> x + 1, [0]) as a\r\nselect\r\n    1\r\nwhere\r\n    1 in (select arrayJoin(a))\r\nsettings allow_experimental_analyzer = 1;\r\n\r\nReceived exception from server (version 24.10.1):\r\nCode: 1. DB::Exception: Received from localhost:9000. DB::Exception: Resolve identifier 'a' from parent scope only supported for constants and CTE. Actual arrayMap(x -> (x + 1), [0]) AS a node type FUNCTION. In scope (SELECT arrayJoin(a)). (UNSUPPORTED_METHOD)\r\n```\r\nIn my mind this can't be a scope issue because this query works fine:\r\n```\r\nwith\r\n    [1] as a\r\nselect\r\n    1\r\nwhere\r\n    1 in (select arrayJoin(a))\r\nsettings allow_experimental_analyzer = 1;\r\n1\r\n```\r\nAnd `arrayMap(x -> x + 1, [0]) as a` is constant (known at the time the SQL query is parsed) and works fine with old analyzer:\r\n```\r\nwith\r\n    arrayMap(x -> x + 1, [0]) as a\r\nselect\r\n    1\r\nwhere\r\n    1 in (select arrayJoin(a))\r\nsettings allow_experimental_analyzer = 0;\r\n1\r\n```\r\n\r\nSample queries:\r\nhttps://fiddle.clickhouse.com/6a9e9d11-4529-41e2-b7c1-b2c0cbce32dd\r\n\r\n\r\n\n",
  "hints_text": "Thanks for report!\r\n\r\nProbably duplicate of https://github.com/ClickHouse/ClickHouse/issues/62946, need to recheck once one of the issues is fixed\nSee my comments here: https://github.com/ClickHouse/ClickHouse/issues/62946#issuecomment-2093043764\nI meet the same issue when upgrading to 23.12.9 version. do we know what causes it?\nJust got the same issue, v24.3.2.23. \nI disabled `allow_experimental_analyzer` and it's fine.\nwill it be fixed? the problem is significant since experimental analyzer enabled by default.\n\nWorks with the old analyzer, but fails with the new infrastructure.\n```sql\r\nWITH\r\n(`database` LIKE 'system') AS `$condition`,\r\n`$main` AS (SELECT DISTINCT table FROM system.tables WHERE `$condition`)\r\nSELECT * FROM `$main`;\r\n```\r\n\r\nActually I'm surprised that this query can work in ClickHouse. The first `WITH` is neither CTE nor scalar.\n> The first WITH is neither CTE nor scalar.\r\n\r\nWell, it's just an expression, which can be substituted in query, so it just works.\nHi, I have a similar issue. \r\n\r\nAfter upgrading to `24.3.2.23`, a query with the format this: \r\n\r\n```sql\r\nwith properties_value[indexOf(properties_key, 'objectId')] as objectId,\r\ndata as (\r\n  select\r\n    ['objectId'] as properties_key,\r\n    ['objectValue'] as properties_value\r\n),\r\nnested_query as (\r\n  select\r\n    objectId\r\n  from\r\n    data\r\n)\r\nselect\r\n  *\r\nfrom\r\n  nested_query\r\n  ```\r\n  \r\n Breaks with an error: \r\n ```\r\n Error running query: Code: 47. DB::Exception: Unknown expression or function identifier 'properties_value' in scope WITH properties_value[indexOf(properties_key, 'objectId')] AS objectId, data AS (SELECT ['objectId'] AS properties_key, ['objectValue'] AS properties_value), nested_query AS (SELECT objectId FROM data) SELECT * FROM nested_query. (UNKNOWN_IDENTIFIER) (version 24.3.2.23 (official build))\r\n```\r\n\r\nPreviously it was working fine. \r\n\r\nAlso, adding  `SETTINGS allow_experimental_analyzer = 0` fixed the issue. \r\n\r\nPlease, let me know if you want me to submit this as a separate issue. \r\n\r\n\n> Well, it's just an expression, which can be substituted in query, so it just works.\r\n\r\nThe problem here is that such expression can reference different entities (columns) in the different scopes. I am absolutely sure that it was unintentional to support it.\r\nAlso, it's unclear how to resolve identifiers mentioned in such expressions. For example the query mentioned in a similar issue #63239 can be resolved as a correlated subquery.\nOverall I'm not sure if `bug` is a correct label for this issue.\nHi, mine is slightly different but I think less ambiguous, can you confirm? \r\nhttps://fiddle.clickhouse.com/8ded6efe-19ca-4e89-8734-c9e7e8e1a332\r\n```\r\nWITH leftPad('abc', 4, '0') as paddedval\r\nSELECT * FROM (SELECT paddedval)\r\n```\r\n\r\nIn this case I think `paddedval` is plainly a constant, and so it shouldn't have thrown this error\nalso, query from documentation\r\n```sql\r\nWITH sum(bytes) as s\r\nSELECT\r\n    formatReadableSize(s),\r\n    table\r\nFROM system.parts\r\nGROUP BY table\r\nORDER BY s;\r\n```\r\nworks, but if table is also declared as cte, it fails:\r\n```sql\r\nWITH sum(bytes) as s,\r\ndata as (\r\nSELECT\r\n    formatReadableSize(s),\r\n    table\r\nFROM system.parts\r\nGROUP BY table\r\nORDER BY s\r\n)\r\nselect * from data;\r\n```\nhttps://fiddle.clickhouse.com/f1a0aafe-1498-4b79-8a5c-5da9633bddb3\r\n\r\nIt's definitely some bug with new analyzer:\r\n(in the latest version)\r\n```\r\n-- working\r\nwith ('408','420') as some_tuple\r\nselect '408' in some_tuple as flag;\r\n```\r\n\r\n```\r\n-- Not working, but if allow_experimental_analyzer = 0, works\r\ncreate or replace view v_test1 as\r\nwith ('408','420') as some_tuple\r\nselect '408' in some_tuple as flag\r\nsettings allow_experimental_analyzer = 0;\r\n```\r\n\r\n```\r\n-- Some workaround\r\ncreate or replace view v_test2 as\r\nwith '408','420' as some_tuple\r\nselect '408' in tuple(some_tuple) as flag;\r\n```\r\n\n\n\n",
  "created_at": "2024-07-05T14:15:19Z",
  "modified_files": [
    "src/Analyzer/ColumnNode.cpp",
    "src/Analyzer/Resolve/ExpressionsStack.h",
    "src/Analyzer/Resolve/IdentifierLookup.h",
    "src/Analyzer/Resolve/IdentifierResolveScope.cpp",
    "src/Analyzer/Resolve/IdentifierResolveScope.h",
    "src/Analyzer/Resolve/IdentifierResolver.cpp",
    "src/Analyzer/Resolve/IdentifierResolver.h",
    "src/Analyzer/Resolve/QueryAnalyzer.cpp",
    "src/Analyzer/Resolve/QueryAnalyzer.h",
    "src/Analyzer/Resolve/QueryExpressionsAliasVisitor.h",
    "src/Analyzer/Resolve/ScopeAliases.h",
    "src/Analyzer/Resolve/TableExpressionData.h",
    "src/Analyzer/Utils.cpp",
    "src/Analyzer/Utils.h",
    "src/Planner/PlannerContext.cpp",
    "src/Processors/QueryPlan/SetsSerialization.cpp",
    "src/Processors/QueryPlan/resolveStorages.cpp",
    "src/Processors/QueryPlan/resolveStorages.h",
    "src/Storages/buildQueryTreeForShard.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/00621_regression_for_in_operator.reference",
    "tests/queries/0_stateless/00736_disjunction_optimisation.reference",
    "tests/queries/0_stateless/00818_alias_bug_4110.sql",
    "tests/queries/0_stateless/01300_group_by_other_keys_having.reference",
    "tests/queries/0_stateless/01323_redundant_functions_in_order_by.reference",
    "tests/queries/0_stateless/01376_GROUP_BY_injective_elimination_dictGet.reference",
    "tests/queries/0_stateless/01651_bugs_from_15889.sql",
    "tests/queries/0_stateless/02174_cte_scalar_cache_mv.reference",
    "tests/queries/0_stateless/02226_analyzer_or_like_combine.reference",
    "tests/queries/0_stateless/02341_analyzer_aliases_basics.sql",
    "tests/queries/0_stateless/02368_analyzer_table_functions.sql",
    "tests/queries/0_stateless/02374_analyzer_array_join.reference",
    "tests/queries/0_stateless/02378_analyzer_projection_names.reference",
    "tests/queries/0_stateless/02378_analyzer_projection_names.sql",
    "tests/queries/0_stateless/02385_analyzer_aliases_compound_expression.sql",
    "tests/queries/0_stateless/02476_analyzer_identifier_hints.sh",
    "tests/queries/0_stateless/02476_fuse_sum_count.reference",
    "tests/queries/0_stateless/02477_fuse_quantiles.reference",
    "tests/queries/0_stateless/02477_logical_expressions_optimizer_low_cardinality.reference",
    "tests/queries/0_stateless/02481_analyzer_optimize_grouping_sets_keys.reference",
    "tests/queries/0_stateless/02497_if_transform_strings_to_enum.reference",
    "tests/queries/0_stateless/02518_rewrite_aggregate_function_with_if.reference",
    "tests/queries/0_stateless/02534_analyzer_grouping_function.reference",
    "tests/queries/0_stateless/02564_analyzer_cross_to_inner.reference",
    "tests/queries/0_stateless/02564_analyzer_ssb_cross_to_inner.reference",
    "tests/queries/0_stateless/02702_logical_optimizer_with_nulls.reference",
    "tests/queries/0_stateless/02785_date_predicate_optimizations_ast_query_tree_rewrite.reference",
    "tests/queries/0_stateless/02815_analyzer_aggregate_functions_of_group_by_keys.reference",
    "tests/queries/0_stateless/02868_distinct_to_count_optimization.reference",
    "tests/queries/0_stateless/02896_cyclic_aliases_crash.sql",
    "tests/queries/0_stateless/02932_analyzer_rewrite_sum_column_and_constant.reference",
    "tests/queries/0_stateless/02969_analyzer_eliminate_injective_functions.reference",
    "tests/queries/0_stateless/02999_analyzer_preimage_null.reference",
    "tests/queries/0_stateless/03033_analyzer_resolve_from_parent_scope.reference",
    "tests/queries/0_stateless/03033_analyzer_resolve_from_parent_scope.sql",
    "tests/queries/0_stateless/03132_rewrite_aggregate_function_with_if_implicit_cast.reference",
    "tests/queries/0_stateless/03165_order_by_duplicate.reference",
    "b/tests/queries/0_stateless/03201_analyzer_resolve_in_parent_scope.reference",
    "b/tests/queries/0_stateless/03201_analyzer_resolve_in_parent_scope.sql",
    "tests/queries/0_stateless/03248_invalid_where.sql",
    "tests/queries/0_stateless/03262_common_expression_optimization.reference",
    "tests/queries/0_stateless/03285_analyzer_extract_common_expr_bug.reference",
    "tests/queries/0_stateless/03285_analyzer_optimize_disjunctions.reference",
    "b/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope.reference",
    "b/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope.sql",
    "b/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope_2.reference",
    "b/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope_2.sql",
    "b/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope_3.reference",
    "b/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope_3.sql",
    "b/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope_4.reference",
    "b/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope_4.sql",
    "b/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope_5.reference",
    "b/tests/queries/0_stateless/03314_analyzer_resolve_in_parent_scope_5.sql",
    "b/tests/queries/0_stateless/03316_analyzer_unique_table_aliases_dist.reference",
    "b/tests/queries/0_stateless/03316_analyzer_unique_table_aliases_dist.sql"
  ]
}