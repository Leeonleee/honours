{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 1912,
  "instance_id": "ClickHouse__ClickHouse-1912",
  "issue_numbers": [
    "369"
  ],
  "base_commit": "d134f90fa9f38781db5024164a702223459b4d3c",
  "patch": "diff --git a/dbms/src/Storages/StorageMaterializedView.cpp b/dbms/src/Storages/StorageMaterializedView.cpp\nindex 3f94ff293517..33eec0ad8f77 100644\n--- a/dbms/src/Storages/StorageMaterializedView.cpp\n+++ b/dbms/src/Storages/StorageMaterializedView.cpp\n@@ -25,7 +25,7 @@ namespace ErrorCodes\n }\n \n \n-static void extractDependentTable(const ASTSelectQuery & query, String & select_database_name, String & select_table_name)\n+static void extractDependentTable(ASTSelectQuery & query, String & select_database_name, String & select_table_name)\n {\n     auto query_table = query.table();\n \n@@ -37,21 +37,20 @@ static void extractDependentTable(const ASTSelectQuery & query, String & select_\n         auto query_database = query.database();\n \n         if (!query_database)\n-            throw Exception(\"Logical error while creating StorageMaterializedView.\"\n-                \" Could not retrieve database name from select query.\",\n-                DB::ErrorCodes::LOGICAL_ERROR);\n+            query.setDatabaseIfNeeded(select_database_name);\n \n-        select_database_name = typeid_cast<const ASTIdentifier &>(*query_database).name;\n         select_table_name = ast_id->name;\n+        select_database_name = query_database ? typeid_cast<const ASTIdentifier &>(*query_database).name : select_database_name;\n+\n     }\n-    else if (auto ast_select = typeid_cast<const ASTSelectWithUnionQuery *>(query_table.get()))\n+    else if (auto ast_select = typeid_cast<ASTSelectWithUnionQuery *>(query_table.get()))\n     {\n         if (ast_select->list_of_selects->children.size() != 1)\n             throw Exception(\"UNION is not supported for MATERIALIZED VIEW\", ErrorCodes::INCORRECT_QUERY);\n \n-        auto inner_query = ast_select->list_of_selects->children.at(0);\n+        auto & inner_query = ast_select->list_of_selects->children.at(0);\n \n-        extractDependentTable(typeid_cast<const ASTSelectQuery &>(*inner_query), select_database_name, select_table_name);\n+        extractDependentTable(typeid_cast<ASTSelectQuery &>(*inner_query), select_database_name, select_table_name);\n     }\n     else\n         throw Exception(\"Logical error while creating StorageMaterializedView.\"\n@@ -81,12 +80,14 @@ StorageMaterializedView::StorageMaterializedView(\n             \"You must specify where to save results of a MaterializedView query: either ENGINE or an existing table in a TO clause\",\n             ErrorCodes::INCORRECT_QUERY);\n \n+    /// Default value, if only table name exist in the query\n+    select_database_name = local_context.getCurrentDatabase();\n     if (query.select->list_of_selects->children.size() != 1)\n         throw Exception(\"UNION is not supported for MATERIALIZED VIEW\", ErrorCodes::INCORRECT_QUERY);\n \n     inner_query = query.select->list_of_selects->children.at(0);\n \n-    extractDependentTable(typeid_cast<const ASTSelectQuery &>(*inner_query), select_database_name, select_table_name);\n+    extractDependentTable(typeid_cast<ASTSelectQuery &>(*inner_query), select_database_name, select_table_name);\n \n     if (!select_table_name.empty())\n         global_context.addDependency(\n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/00571_non_exist_database_when_create_materializ_view.reference b/dbms/tests/queries/0_stateless/00571_non_exist_database_when_create_materializ_view.reference\nnew file mode 100644\nindex 000000000000..a5b4d8176e57\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/00571_non_exist_database_when_create_materializ_view.reference\n@@ -0,0 +1,3 @@\n+2018-02-16\ta\ta\n+2018-02-16\ta\ta\n+2018-02-16\ta\ta\ndiff --git a/dbms/tests/queries/0_stateless/00571_non_exist_database_when_create_materializ_view.sql b/dbms/tests/queries/0_stateless/00571_non_exist_database_when_create_materializ_view.sql\nnew file mode 100644\nindex 000000000000..b49a07d888a7\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/00571_non_exist_database_when_create_materializ_view.sql\n@@ -0,0 +1,25 @@\n+DROP DATABASE IF EXISTS none;\n+DROP TABLE IF EXISTS test.test;\n+DROP TABLE IF EXISTS test.test_materialized;\n+\n+USE test;\n+\n+CREATE DATABASE none;\n+CREATE TABLE test.test ( date Date, platform Enum8('a' = 0, 'b' = 1, 'c' = 2), app Enum8('a' = 0, 'b' = 1) ) ENGINE = MergeTree(date, (platform, app), 8192);\n+CREATE MATERIALIZED VIEW test.test_materialized ENGINE = MergeTree(date, (platform, app), 8192) POPULATE AS SELECT date, platform, app FROM (SELECT * FROM test);\n+\n+USE none;\n+\n+INSERT INTO test.test VALUES('2018-02-16', 'a', 'a');\n+\n+SELECT * FROM test.test;\n+SELECT * FROM test.test_materialized;\n+\n+DETACH TABLE test.test_materialized;\n+ATTACH TABLE test.test_materialized;\n+\n+SELECT * FROM test.test_materialized;\n+\n+DROP DATABASE IF EXISTS none;\n+DROP TABLE IF EXISTS test.test;\n+DROP TABLE IF EXISTS test.test_materialized;\n",
  "problem_statement": "StorageView: Could not retrieve database name from select query.\nSo, we have two MergeTree tables:\r\n\r\n```sql\r\nCREATE TABLE default.test1\r\n(\r\n    date Date, \r\n    platform Enum8('a' = 0, 'b' = 1, 'c' = 2), \r\n    app Enum8('a' = 0, 'b' = 1)\r\n) ENGINE = MergeTree(date, (platform, app), 8192)\r\n```\r\nand\r\n```sql\r\nCREATE TABLE default.test2\r\n(\r\n    date Date, \r\n    platform Enum8('a' = 0, 'b' = 1, 'c' = 2), \r\n    app Enum8('a' = 0, 'b' = 1)\r\n) ENGINE = MergeTree(date, (platform, app), 8192)\r\n```\r\n\r\nAnd then\r\n```sql\r\nCREATE TABLE groups\r\n(\r\n    platform Enum8('a' = 0, 'b' = 1, 'c' = 2), \r\n    app Enum8('a' = 0, 'b' = 1), \r\n    group Enum8('AA' = 0, 'AB' = 1, 'BA' = 2, 'BB' = 3, 'CA' = 4, 'CB' = 5)\r\n) ENGINE = Join(ALL, INNER, platform, app)\r\n```\r\n\r\nNow, joining works:\r\n```sql\r\nSELECT \r\n    date, \r\n    platform, \r\n    app, \r\n    group\r\nFROM \r\n(\r\n    SELECT *\r\n    FROM test1 \r\n    UNION ALL \r\n    SELECT *\r\n    FROM test2 \r\n) \r\nALL INNER JOIN groups USING (platform, app)\r\n```\r\n\r\nBut we can't create materialized view upon it:\r\n```sql\r\nCREATE MATERIALIZED VIEW bla ENGINE = MergeTree(date, (platform, app), 8192) POPULATE AS\r\nSELECT \r\n    date, \r\n    platform, \r\n    app, \r\n    group\r\nFROM \r\n(\r\n    SELECT *\r\n    FROM test1 \r\n    UNION ALL \r\n    SELECT *\r\n    FROM test2 \r\n) \r\nALL INNER JOIN groups USING (platform, app)\r\n```\r\nIt says\r\n```\r\nReceived exception from server:\r\nCode: 49. DB::Exception: Received from localhost:9000, 127.0.0.1. DB::Exception: Logical error while creating StorageView. Could not retrieve database name from select query..\r\n```\r\nWe can specify **default.** for either test1 or test2 (or, obviously, for both) and this solves the issue:\r\n```sql\r\nCREATE MATERIALIZED VIEW bla ENGINE = MergeTree(date, (platform, app), 8192) POPULATE AS\r\nSELECT \r\n    date, \r\n    platform, \r\n    app, \r\n    group\r\nFROM \r\n(\r\n    SELECT *\r\n    FROM default.test1 \r\n    UNION ALL \r\n    SELECT *\r\n    FROM test2 \r\n) \r\nALL INNER JOIN groups USING (platform, app)\r\n```\r\nI don't find this way nice though and It seems like a bug for me.\r\n```\r\n$ apt-cache policy clickhouse-server-common \r\nclickhouse-server-common:\r\n  Installed: 1.1.54133\r\n  Candidate: 1.1.54134\r\n  Version table:\r\n     1.1.54134 500\r\n        500 http://repo.yandex.ru/clickhouse/xenial stable/main amd64 Packages\r\n *** 1.1.54133 100\r\n        100 /var/lib/dpkg/status\r\n```\r\n\r\nIt happens using both clickhouse-client and HTTP interface, so it rather looks like server-specific.\r\n\n",
  "hints_text": "",
  "created_at": "2018-02-16T07:11:58Z"
}