{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 55030,
  "instance_id": "ClickHouse__ClickHouse-55030",
  "issue_numbers": [
    "34407"
  ],
  "base_commit": "0ce30ab6d5877b33a78185bbaec0e4942edff12d",
  "patch": "diff --git a/src/AggregateFunctions/AggregateFunctionNull.cpp b/src/AggregateFunctions/AggregateFunctionNull.cpp\nindex 3d3d7af30260..6d304c21d331 100644\n--- a/src/AggregateFunctions/AggregateFunctionNull.cpp\n+++ b/src/AggregateFunctions/AggregateFunctionNull.cpp\n@@ -1,10 +1,9 @@\n #include <DataTypes/DataTypeNullable.h>\n #include <AggregateFunctions/AggregateFunctionNull.h>\n #include <AggregateFunctions/AggregateFunctionNothing.h>\n-#include <AggregateFunctions/AggregateFunctionCount.h>\n #include <AggregateFunctions/AggregateFunctionState.h>\n #include <AggregateFunctions/AggregateFunctionCombinatorFactory.h>\n-\n+#include <AggregateFunctions/AggregateFunctionSimpleState.h>\n \n namespace DB\n {\n@@ -39,6 +38,34 @@ class AggregateFunctionCombinatorNull final : public IAggregateFunctionCombinato\n         return res;\n     }\n \n+    template <typename T>\n+    std::optional<AggregateFunctionPtr> tryTransformStateFunctionImpl(const AggregateFunctionPtr & nested_function,\n+                                                       const AggregateFunctionProperties & properties,\n+                                                       const DataTypes & arguments,\n+                                                       const Array & params) const\n+    {\n+        if (const T * function_state = typeid_cast<const T *>(nested_function.get()))\n+        {\n+            auto transformed_nested_function = transformAggregateFunction(function_state->getNestedFunction(), properties, arguments, params);\n+\n+            return std::make_shared<T>(\n+                transformed_nested_function,\n+                transformed_nested_function->getArgumentTypes(),\n+                transformed_nested_function->getParameters());\n+        }\n+        return {};\n+    }\n+\n+    AggregateFunctionPtr tryTransformStateFunction(const AggregateFunctionPtr & nested_function,\n+                                                   const AggregateFunctionProperties & properties,\n+                                                   const DataTypes & arguments,\n+                                                   const Array & params) const\n+    {\n+        return tryTransformStateFunctionImpl<AggregateFunctionState>(nested_function, properties, arguments, params)\n+            .or_else([&]() { return tryTransformStateFunctionImpl<AggregateFunctionSimpleState>(nested_function, properties, arguments, params); })\n+            .value_or(nullptr);\n+    }\n+\n     AggregateFunctionPtr transformAggregateFunction(\n         const AggregateFunctionPtr & nested_function,\n         const AggregateFunctionProperties & properties,\n@@ -82,17 +109,11 @@ class AggregateFunctionCombinatorNull final : public IAggregateFunctionCombinato\n         if (auto adapter = nested_function->getOwnNullAdapter(nested_function, arguments, params, properties))\n             return adapter;\n \n-        /// If applied to aggregate function with -State combinator, we apply -Null combinator to it's nested_function instead of itself.\n+        /// If applied to aggregate function with either -State/-SimpleState combinator, we apply -Null combinator to it's nested_function instead of itself.\n         /// Because Nullable AggregateFunctionState does not make sense and ruins the logic of managing aggregate function states.\n-\n-        if (const AggregateFunctionState * function_state = typeid_cast<const AggregateFunctionState *>(nested_function.get()))\n+        if (const AggregateFunctionPtr new_function = tryTransformStateFunction(nested_function, properties, arguments, params))\n         {\n-            auto transformed_nested_function = transformAggregateFunction(function_state->getNestedFunction(), properties, arguments, params);\n-\n-            return std::make_shared<AggregateFunctionState>(\n-                transformed_nested_function,\n-                transformed_nested_function->getArgumentTypes(),\n-                transformed_nested_function->getParameters());\n+            return new_function;\n         }\n \n         bool return_type_is_nullable = !properties.returns_default_when_only_null && nested_function->getResultType()->canBeInsideNullable();\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02888_single_state_nullable_type.reference b/tests/queries/0_stateless/02888_single_state_nullable_type.reference\nnew file mode 100644\nindex 000000000000..1d0e0aeac4e3\n--- /dev/null\n+++ b/tests/queries/0_stateless/02888_single_state_nullable_type.reference\n@@ -0,0 +1,1 @@\n+SimpleAggregateFunction(min, Nullable(UInt8))\t1\ndiff --git a/tests/queries/0_stateless/02888_single_state_nullable_type.sql b/tests/queries/0_stateless/02888_single_state_nullable_type.sql\nnew file mode 100644\nindex 000000000000..420090a0bcb6\n--- /dev/null\n+++ b/tests/queries/0_stateless/02888_single_state_nullable_type.sql\n@@ -0,0 +1,7 @@\n+WITH minSimpleState(value) AS c\n+SELECT toTypeName(c), c\n+FROM (\n+    SELECT NULL as value\n+    UNION ALL\n+    SELECT 1 as value\n+);\n",
  "problem_statement": "-SimpleState with nullable argument creates Nullable(SimpleAggregateFunction(...)) \n```\r\nSELECT toTypeName(minSimpleState(toNullable(0)))\r\n\r\nQuery id: ca70501a-76f0-400e-89c2-3539a7ce6740\r\n\r\n\u250c\u2500toTypeName(minSimpleState(toNullable(0)))\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 Nullable(SimpleAggregateFunction(min, UInt8)) \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nShould be \r\n```\r\nSimpleAggregateFunction(min, Nullable(DateTime))\r\n```\n",
  "hints_text": "",
  "created_at": "2023-09-26T16:10:16Z",
  "modified_files": [
    "src/AggregateFunctions/AggregateFunctionNull.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02888_single_state_nullable_type.reference",
    "b/tests/queries/0_stateless/02888_single_state_nullable_type.sql"
  ]
}