{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 41823,
  "instance_id": "ClickHouse__ClickHouse-41823",
  "issue_numbers": [
    "41783"
  ],
  "base_commit": "3d9d1369b1a451664cd424de46dbd18d2c3015e9",
  "patch": "diff --git a/src/Storages/MergeTree/MergeTreeDataPartCompact.cpp b/src/Storages/MergeTree/MergeTreeDataPartCompact.cpp\nindex 5c5fc0cd8f4a..9298e8410728 100644\n--- a/src/Storages/MergeTree/MergeTreeDataPartCompact.cpp\n+++ b/src/Storages/MergeTree/MergeTreeDataPartCompact.cpp\n@@ -4,6 +4,7 @@\n #include <Storages/MergeTree/MergeTreeDataPartWriterCompact.h>\n #include <Interpreters/Context.h>\n #include <Storages/MergeTree/LoadedMergeTreeDataPartInfoForReader.h>\n+#include <Compression/CompressedReadBufferFromFile.h>\n \n \n namespace DB\n@@ -110,18 +111,26 @@ void MergeTreeDataPartCompact::loadIndexGranularityImpl(\n \n     size_t marks_file_size = data_part_storage_->getFileSize(marks_file_path);\n \n-    auto buffer = data_part_storage_->readFile(marks_file_path, ReadSettings().adjustBufferSize(marks_file_size), marks_file_size, std::nullopt);\n-    while (!buffer->eof())\n+    std::unique_ptr<ReadBufferFromFileBase> buffer = data_part_storage_->readFile(\n+        marks_file_path, ReadSettings().adjustBufferSize(marks_file_size), marks_file_size, std::nullopt);\n+\n+    std::unique_ptr<ReadBuffer> marks_reader;\n+    bool marks_compressed = index_granularity_info_.mark_type.compressed;\n+    if (marks_compressed)\n+        marks_reader = std::make_unique<CompressedReadBufferFromFile>(std::move(buffer));\n+    else\n+        marks_reader = std::move(buffer);\n+\n+    while (!marks_reader->eof())\n     {\n-        /// Skip offsets for columns\n-        buffer->seek(columns_count * sizeof(MarkInCompressedFile), SEEK_CUR);\n+        marks_reader->ignore(columns_count * sizeof(MarkInCompressedFile));\n         size_t granularity;\n-        readIntBinary(granularity, *buffer);\n+        readIntBinary(granularity, *marks_reader);\n         index_granularity_.appendMark(granularity);\n     }\n \n-    if (index_granularity_.getMarksCount() * index_granularity_info_.getMarkSizeInBytes(columns_count) != marks_file_size)\n-        throw Exception(\"Cannot read all marks from file \" + marks_file_path, ErrorCodes::CANNOT_READ_ALL_DATA);\n+    if (!marks_compressed && index_granularity_.getMarksCount() * index_granularity_info_.getMarkSizeInBytes(columns_count) != marks_file_size)\n+        throw Exception(ErrorCodes::CANNOT_READ_ALL_DATA, \"Cannot read all marks from file {}\", marks_file_path);\n \n     index_granularity_.setInitialized();\n }\n",
  "test_patch": "diff --git a/tests/integration/test_compressed_marks_restart/__init__.py b/tests/integration/test_compressed_marks_restart/__init__.py\nnew file mode 100644\nindex 000000000000..e5a0d9b4834e\n--- /dev/null\n+++ b/tests/integration/test_compressed_marks_restart/__init__.py\n@@ -0,0 +1,1 @@\n+#!/usr/bin/env python3\ndiff --git a/tests/integration/test_compressed_marks_restart/test.py b/tests/integration/test_compressed_marks_restart/test.py\nnew file mode 100644\nindex 000000000000..90e09d62792b\n--- /dev/null\n+++ b/tests/integration/test_compressed_marks_restart/test.py\n@@ -0,0 +1,58 @@\n+#!/usr/bin/env python3\n+import pytest\n+from helpers.cluster import ClickHouseCluster\n+\n+cluster = ClickHouseCluster(__file__)\n+node = cluster.add_instance(\"node\", stay_alive=True)\n+\n+\n+@pytest.fixture(scope=\"module\", autouse=True)\n+def started_cluster():\n+    try:\n+        cluster.start()\n+        yield cluster\n+\n+    finally:\n+        cluster.shutdown()\n+\n+\n+def test_compressed_marks_restart_compact():\n+    node.query(\n+        \"create table test_02381_compact (a UInt64, b String) ENGINE = MergeTree order by (a, b)\"\n+    )\n+    node.query(\"insert into test_02381_compact values (1, 'Hello')\")\n+    node.query(\n+        \"alter table test_02381_compact modify setting compress_marks=true, compress_primary_key=true\"\n+    )\n+    node.query(\"insert into test_02381_compact values (2, 'World')\")\n+    node.query(\"optimize table test_02381_compact final\")\n+\n+    assert (\n+        node.query(\"SELECT count() FROM test_02381_compact WHERE not ignore(*)\")\n+        == \"2\\n\"\n+    )\n+    node.restart_clickhouse()\n+    assert (\n+        node.query(\"SELECT count() FROM test_02381_compact WHERE not ignore(*)\")\n+        == \"2\\n\"\n+    )\n+\n+\n+def test_compressed_marks_restart_wide():\n+    node.query(\n+        \"create table test_02381_wide (a UInt64, b String) ENGINE = MergeTree order by (a, b) SETTINGS min_bytes_for_wide_part=0\"\n+    )\n+    node.query(\"insert into test_02381_wide values (1, 'Hello')\")\n+    node.query(\n+        \"alter table test_02381_wide modify setting compress_marks=true, compress_primary_key=true\"\n+    )\n+    node.query(\"insert into test_02381_wide values (2, 'World')\")\n+    node.query(\"optimize table test_02381_wide final\")\n+\n+    assert (\n+        node.query(\"SELECT count() FROM test_02381_wide WHERE not ignore(*)\") == \"2\\n\"\n+    )\n+    node.restart_clickhouse()\n+    assert (\n+        node.query(\"SELECT count() FROM test_02381_wide WHERE not ignore(*)\") == \"2\\n\"\n+    )\ndiff --git a/tests/queries/0_stateless/02454_compressed_marks_in_compact_part.reference b/tests/queries/0_stateless/02454_compressed_marks_in_compact_part.reference\nnew file mode 100644\nindex 000000000000..bade13b252d0\n--- /dev/null\n+++ b/tests/queries/0_stateless/02454_compressed_marks_in_compact_part.reference\n@@ -0,0 +1,1 @@\n+2\tWorld\ndiff --git a/tests/queries/0_stateless/02454_compressed_marks_in_compact_part.sql b/tests/queries/0_stateless/02454_compressed_marks_in_compact_part.sql\nnew file mode 100644\nindex 000000000000..332b1c05d6ce\n--- /dev/null\n+++ b/tests/queries/0_stateless/02454_compressed_marks_in_compact_part.sql\n@@ -0,0 +1,6 @@\n+drop table if exists cc sync;\n+create table cc (a UInt64, b String) ENGINE = MergeTree order by (a, b) SETTINGS compress_marks = true;\n+insert into cc  values (2, 'World');\n+alter table cc detach part 'all_1_1_0';\n+alter table cc attach part 'all_1_1_0';\n+select * from cc;\n",
  "problem_statement": "Cannot read all data after server restart while using compressed marks and primary key\nHow to reproduce (queries from test 02381_compress_marks_and_primary_key.sql):\r\n```sql\r\ncreate table test_02381_compact (a UInt64, b String) ENGINE = MergeTree order by (a, b);\r\ninsert into test_02381_compact values (1, 'Hello');\r\nalter table test_02381_compact modify setting compress_marks = true, compress_primary_key = true;\r\ninsert into test_02381_compact values (2, 'World');\r\noptimize table test_02381_compact final;\r\n```\r\nThen restart server and there will be an error:\r\n```\r\n<Error> default.test_02381_compact (cf52633f-7231-464c-af93-8b1c17cb778d): while loading part all_1_2_1 on path store/cf5/cf52633f-7231-464c-af93-8b1c17cb778d/all_1_2_1: Code: 33. DB::Exception: Cannot read all data. Bytes read: 0. Bytes expected: 8. (CANNOT_READ_ALL_DATA), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. /build/build_docker/../contrib/libcxx/include/exception:133: std::exception::capture() in /home/avogar/tmp/master/clickhouse\r\n1. /build/build_docker/../contrib/libcxx/include/exception:111: std::exception::exception() in /home/avogar/tmp/master/clickhouse\r\n2. /build/build_docker/../contrib/poco/Foundation/src/Exception.cpp:27: Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) in /home/avogar/tmp/master/clickhouse\r\n3. /build/build_docker/../src/Common/Exception.cpp:67: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) in /home/avogar/tmp/master/clickhouse\r\n4. /build/build_docker/../src/IO/ReadBuffer.h:191: DB::ReadBuffer::readStrict(char*, unsigned long) in /home/avogar/tmp/master/clickhouse\r\n5. /build/build_docker/../src/IO/ReadHelpers.h:113: void DB::readPODBinary<unsigned long>(unsigned long&, DB::ReadBuffer&) in /home/avogar/tmp/master/clickhouse\r\n6. /build/build_docker/../src/IO/ReadHelpers.h:119: void DB::readIntBinary<unsigned long>(unsigned long&, DB::ReadBuffer&) in /home/avogar/tmp/master/clickhouse\r\n7. /build/build_docker/../src/Storages/MergeTree/MergeTreeDataPartCompact.cpp:119: DB::MergeTreeDataPartCompact::loadIndexGranularityImpl(DB::MergeTreeIndexGranularity&, DB::MergeTreeIndexGranularityInfo const&, unsigned long, std::__1::shared_ptr<DB::IDataPartStorage> const&) in /home/avogar/tmp/master/clickhouse\r\n8. /build/build_docker/../src/Storages/MergeTree/MergeTreeDataPartCompact.cpp:135: DB::MergeTreeDataPartCompact::loadIndexGranularity() in /home/avogar/tmp/master/clickhouse\r\n9. /build/build_docker/../src/Storages/MergeTree/IMergeTreeDataPart.cpp:642: DB::IMergeTreeDataPart::loadColumnsChecksumsIndexes(bool, bool) in /home/avogar/tmp/master/clickhouse\r\n10. /build/build_docker/../src/Storages/MergeTree/MergeTreeData.cpp:1042: DB::MergeTreeData::loadDataPartsFromDisk(std::__1::vector<std::__1::shared_ptr<DB::IMergeTreeDataPart const>, std::__1::allocator<std::__1::shared_ptr<DB::IMergeTreeDataPart const> > >&, std::__1::vector<std::__1::shared_ptr<DB::IMergeTreeDataPart const>, std::__1::allocator<std::__1::shared_ptr<DB::IMergeTreeDataPart const> > >&, ThreadPoolImpl<ThreadFromGlobalPoolImpl<false> >&, unsigned long, std::__1::queue<std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> > > >, std::__1::deque<std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> > > >, std::__1::allocator<std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> > > > > > >&, bool, std::__1::shared_ptr<DB::MergeTreeSettings const> const&)::$_45::operator()(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::IDisk> const&) const in /home/avogar/tmp/master/clickhouse\r\n11. /build/build_docker/../src/Storages/MergeTree/MergeTreeData.cpp:1154: DB::MergeTreeData::loadDataPartsFromDisk(std::__1::vector<std::__1::shared_ptr<DB::IMergeTreeDataPart const>, std::__1::allocator<std::__1::shared_ptr<DB::IMergeTreeDataPart const> > >&, std::__1::vector<std::__1::shared_ptr<DB::IMergeTreeDataPart const>, std::__1::allocator<std::__1::shared_ptr<DB::IMergeTreeDataPart const> > >&, ThreadPoolImpl<ThreadFromGlobalPoolImpl<false> >&, unsigned long, std::__1::queue<std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> > > >, std::__1::deque<std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> > > >, std::__1::allocator<std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> > > > > > >&, bool, std::__1::shared_ptr<DB::MergeTreeSettings const> const&)::$_12::operator()() const in /home/avogar/tmp/master/clickhouse\r\n12. /build/build_docker/../contrib/libcxx/include/type_traits:3640: decltype(static_cast<DB::MergeTreeData::loadDataPartsFromDisk(std::__1::vector<std::__1::shared_ptr<DB::IMergeTreeDataPart const>, std::__1::allocator<std::__1::shared_ptr<DB::IMergeTreeDataPart const> > >&, std::__1::vector<std::__1::shared_ptr<DB::IMergeTreeDataPart const>, std::__1::allocator<std::__1::shared_ptr<DB::IMergeTreeDataPart const> > >&, ThreadPoolImpl<ThreadFromGlobalPoolImpl<false> >&, unsigned long, std::__1::queue<std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> > > >, std::__1::deque<std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> > > >, std::__1::allocator<std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> > > > > > >&, bool, std::__1::shared_ptr<DB::MergeTreeSettings const> const&)::$_12&>(fp)()) std::__1::__invoke<DB::MergeTreeData::loadDataPartsFromDisk(std::__1::vector<std::__1::shared_ptr<DB::IMergeTreeDataPart const>, std::__1::allocator<std::__1::shared_ptr<DB::IMergeTreeDataPart const> > >&, std::__1::vector<std::__1::shared_ptr<DB::IMergeTreeDataPart const>, std::__1::allocator<std::__1::shared_ptr<DB::IMergeTreeDataPart const> > >&, ThreadPoolImpl<ThreadFromGlobalPoolImpl<false> >&, unsigned long, std::__1::queue<std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> > > >, std::__1::deque<std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> > > >, std::__1::allocator<std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> > > > > > >&, bool, std::__1::shared_ptr<DB::MergeTreeSettings const> const&)::$_12&>(DB::MergeTreeData::loadDataPartsFromDisk(std::__1::vector<std::__1::shared_ptr<DB::IMergeTreeDataPart const>, std::__1::allocator<std::__1::shared_ptr<DB::IMergeTreeDataPart const> > >&, std::__1::vector<std::__1::shared_ptr<DB::IMergeTreeDataPart const>, std::__1::allocator<std::__1::shared_ptr<DB::IMergeTreeDataPart const> > >&, ThreadPoolImpl<ThreadFromGlobalPoolImpl<false> >&, unsigned long, std::__1::queue<std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> > > >, std::__1::deque<std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> > > >, std::__1::allocator<std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> > > > > > >&, bool, std::__1::shared_ptr<DB::MergeTreeSettings const> const&)::$_12&) in /home/avogar/tmp/master/clickhouse\r\n13. /build/build_docker/../contrib/libcxx/include/__functional/invoke.h:62: void std::__1::__invoke_void_return_wrapper<void, true>::__call<DB::MergeTreeData::loadDataPartsFromDisk(std::__1::vector<std::__1::shared_ptr<DB::IMergeTreeDataPart const>, std::__1::allocator<std::__1::shared_ptr<DB::IMergeTreeDataPart const> > >&, std::__1::vector<std::__1::shared_ptr<DB::IMergeTreeDataPart const>, std::__1::allocator<std::__1::shared_ptr<DB::IMergeTreeDataPart const> > >&, ThreadPoolImpl<ThreadFromGlobalPoolImpl<false> >&, unsigned long, std::__1::queue<std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> > > >, std::__1::deque<std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> > > >, std::__1::allocator<std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> > > > > > >&, bool, std::__1::shared_ptr<DB::MergeTreeSettings const> const&)::$_12&>(DB::MergeTreeData::loadDataPartsFromDisk(std::__1::vector<std::__1::shared_ptr<DB::IMergeTreeDataPart const>, std::__1::allocator<std::__1::shared_ptr<DB::IMergeTreeDataPart const> > >&, std::__1::vector<std::__1::shared_ptr<DB::IMergeTreeDataPart const>, std::__1::allocator<std::__1::shared_ptr<DB::IMergeTreeDataPart const> > >&, ThreadPoolImpl<ThreadFromGlobalPoolImpl<false> >&, unsigned long, std::__1::queue<std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> > > >, std::__1::deque<std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> > > >, std::__1::allocator<std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> > > > > > >&, bool, std::__1::shared_ptr<DB::MergeTreeSettings const> const&)::$_12&) in /home/avogar/tmp/master/clickhouse\r\n14. /build/build_docker/../contrib/libcxx/include/__functional/function.h:230: std::__1::__function::__default_alloc_func<DB::MergeTreeData::loadDataPartsFromDisk(std::__1::vector<std::__1::shared_ptr<DB::IMergeTreeDataPart const>, std::__1::allocator<std::__1::shared_ptr<DB::IMergeTreeDataPart const> > >&, std::__1::vector<std::__1::shared_ptr<DB::IMergeTreeDataPart const>, std::__1::allocator<std::__1::shared_ptr<DB::IMergeTreeDataPart const> > >&, ThreadPoolImpl<ThreadFromGlobalPoolImpl<false> >&, unsigned long, std::__1::queue<std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> > > >, std::__1::deque<std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> > > >, std::__1::allocator<std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> > > > > > >&, bool, std::__1::shared_ptr<DB::MergeTreeSettings const> const&)::$_12, void ()>::operator()() in /home/avogar/tmp/master/clickhouse\r\n15. /build/build_docker/../contrib/libcxx/include/__functional/function.h:711: void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<DB::MergeTreeData::loadDataPartsFromDisk(std::__1::vector<std::__1::shared_ptr<DB::IMergeTreeDataPart const>, std::__1::allocator<std::__1::shared_ptr<DB::IMergeTreeDataPart const> > >&, std::__1::vector<std::__1::shared_ptr<DB::IMergeTreeDataPart const>, std::__1::allocator<std::__1::shared_ptr<DB::IMergeTreeDataPart const> > >&, ThreadPoolImpl<ThreadFromGlobalPoolImpl<false> >&, unsigned long, std::__1::queue<std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> > > >, std::__1::deque<std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> > > >, std::__1::allocator<std::__1::vector<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::shared_ptr<DB::IDisk> > > > > > >&, bool, std::__1::shared_ptr<DB::MergeTreeSettings const> const&)::$_12, void ()> >(std::__1::__function::__policy_storage const*) in /home/avogar/tmp/master/clickhouse\r\n16. /build/build_docker/../contrib/libcxx/include/__functional/function.h:843: std::__1::__function::__policy_func<void ()>::operator()() const in /home/avogar/tmp/master/clickhouse\r\n17. /build/build_docker/../contrib/libcxx/include/__functional/function.h:1184: std::__1::function<void ()>::operator()() const in /home/avogar/tmp/master/clickhouse\r\n18. /build/build_docker/../src/Common/ThreadPool.cpp:294: ThreadPoolImpl<ThreadFromGlobalPoolImpl<false> >::worker(std::__1::__list_iterator<ThreadFromGlobalPoolImpl<false>, void*>) in /home/avogar/tmp/master/clickhouse\r\n19. /build/build_docker/../src/Common/ThreadPool.cpp:144: void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false> >::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>, bool)::'lambda0'()::operator()() const in /home/avogar/tmp/master/clickhouse\r\n20. /build/build_docker/../contrib/libcxx/include/type_traits:3648: decltype(static_cast<void>(fp)()) std::__1::__invoke_constexpr<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false> >::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>, bool)::'lambda0'()&>(void&&) in /home/avogar/tmp/master/clickhouse\r\n21. /build/build_docker/../contrib/libcxx/include/tuple:1595: decltype(auto) std::__1::__apply_tuple_impl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false> >::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>, bool)::'lambda0'()&, std::__1::tuple<>&>(void&&, std::__1::tuple<>&, std::__1::__tuple_indices<>) in /home/avogar/tmp/master/clickhouse\r\n22. /build/build_docker/../contrib/libcxx/include/tuple:1604: decltype(auto) std::__1::apply<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false> >::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>, bool)::'lambda0'()&, std::__1::tuple<>&>(void&&, std::__1::tuple<>&) in /home/avogar/tmp/master/clickhouse\r\n23. /build/build_docker/../src/Common/ThreadPool.h:193: ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false> >::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'()::operator()() in /home/avogar/tmp/master/clickhouse\r\n24. /build/build_docker/../contrib/libcxx/include/type_traits:3640: decltype(static_cast<void>(fp)()) std::__1::__invoke<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false> >::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'()&>(void&&) in /home/avogar/tmp/master/clickhouse\r\n25. /build/build_docker/../contrib/libcxx/include/__functional/invoke.h:62: void std::__1::__invoke_void_return_wrapper<void, true>::__call<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false> >::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'()&>(ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false> >::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'()&) in /home/avogar/tmp/master/clickhouse\r\n26. /build/build_docker/../contrib/libcxx/include/__functional/function.h:230: std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false> >::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'(), void ()>::operator()() in /home/avogar/tmp/master/clickhouse\r\n27. /build/build_docker/../contrib/libcxx/include/__functional/function.h:711: void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false> >::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'(), void ()> >(std::__1::__function::__policy_storage const*) in /home/avogar/tmp/master/clickhouse\r\n28. /build/build_docker/../contrib/libcxx/include/__functional/function.h:843: std::__1::__function::__policy_func<void ()>::operator()() const in /home/avogar/tmp/master/clickhouse\r\n29. /build/build_docker/../contrib/libcxx/include/__functional/function.h:1184: std::__1::function<void ()>::operator()() const in /home/avogar/tmp/master/clickhouse\r\n30. /build/build_docker/../src/Common/ThreadPool.cpp:294: ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) in /home/avogar/tmp/master/clickhouse\r\n31. /build/build_docker/../src/Common/ThreadPool.cpp:144: void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>, bool)::'lambda0'()::operator()() const in /home/avogar/tmp/master/clickhouse\r\n (version 22.10.1.1 (official build))\r\n2022.09.26 11:58:25.188530 [ 3524981 ] {} <Error> default.test_02381_compact (cf52633f-7231-464c-af93-8b1c17cb778d): Detaching broken part ./store/cf5/cf52633f-7231-464c-af93-8b1c17cb778d/all_2_2_0 (size: 515.00 B). If it happened after update, it is likely because of backward incompatibility. You need to resolve this manually\r\n2022.09.26 11:58:25.188711 [ 3524920 ] {} <Error> default.test_02381_compact (cf52633f-7231-464c-af93-8b1c17cb778d): Detaching broken part ./store/cf5/cf52633f-7231-464c-af93-8b1c17cb778d/all_1_2_1 (size: 518.00 B). If it happened after update, it is likely because of backward incompatibility. You need to resolve this manually\r\n2022.09.26 11:58:25.189900 [ 3524962 ] {} <Debug> default.test_02381_compact (cf52633f-7231-464c-af93-8b1c17cb778d): Loaded data parts (1 items)\r\n```\r\n\r\nServer version 22.10.1 revision 54460.\n",
  "hints_text": "https://s3.amazonaws.com/clickhouse-test-reports/41730/8cc53a48ae99a765085f44a75fa49314d1f1cc7d/stress_test__asan_.html",
  "created_at": "2022-09-27T09:40:25Z",
  "modified_files": [
    "src/Storages/MergeTree/MergeTreeDataPartCompact.cpp"
  ],
  "modified_test_files": [
    "b/tests/integration/test_compressed_marks_restart/__init__.py",
    "b/tests/integration/test_compressed_marks_restart/test.py",
    "b/tests/queries/0_stateless/02454_compressed_marks_in_compact_part.reference",
    "b/tests/queries/0_stateless/02454_compressed_marks_in_compact_part.sql"
  ]
}