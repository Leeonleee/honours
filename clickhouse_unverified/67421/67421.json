{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 67421,
  "instance_id": "ClickHouse__ClickHouse-67421",
  "issue_numbers": [
    "67420"
  ],
  "base_commit": "5bb20f4c1c83c7786a2c10eac06973412b5fd7fd",
  "patch": "diff --git a/src/Parsers/ASTFunction.cpp b/src/Parsers/ASTFunction.cpp\nindex 230d4c778e83..cd9e910d45a5 100644\n--- a/src/Parsers/ASTFunction.cpp\n+++ b/src/Parsers/ASTFunction.cpp\n@@ -285,6 +285,8 @@ static bool formatNamedArgWithHiddenValue(IAST * arg, const IAST::FormatSettings\n void ASTFunction::formatImplWithoutAlias(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const\n {\n     frame.expression_list_prepend_whitespace = false;\n+    if (kind == Kind::CODEC || kind == Kind::STATISTICS || kind == Kind::BACKUP_NAME)\n+        frame.allow_operators = false;\n     FormatStateStacked nested_need_parens = frame;\n     FormatStateStacked nested_dont_need_parens = frame;\n     nested_need_parens.need_parens = true;\n@@ -308,7 +310,7 @@ void ASTFunction::formatImplWithoutAlias(const FormatSettings & settings, Format\n \n     /// Should this function to be written as operator?\n     bool written = false;\n-    if (arguments && !parameters && nulls_action == NullsAction::EMPTY)\n+    if (arguments && !parameters && frame.allow_operators && nulls_action == NullsAction::EMPTY)\n     {\n         /// Unary prefix operators.\n         if (arguments->children.size() == 1)\ndiff --git a/src/Parsers/ASTFunction.h b/src/Parsers/ASTFunction.h\nindex be2b6beae54e..1b4a5928d1c5 100644\n--- a/src/Parsers/ASTFunction.h\n+++ b/src/Parsers/ASTFunction.h\n@@ -58,6 +58,8 @@ class ASTFunction : public ASTWithAlias\n         TABLE_ENGINE,\n         DATABASE_ENGINE,\n         BACKUP_NAME,\n+        CODEC,\n+        STATISTICS,\n     };\n     Kind kind = Kind::ORDINARY_FUNCTION;\n \ndiff --git a/src/Parsers/ExpressionElementParsers.cpp b/src/Parsers/ExpressionElementParsers.cpp\nindex 865d07faaa78..9927acdcf173 100644\n--- a/src/Parsers/ExpressionElementParsers.cpp\n+++ b/src/Parsers/ExpressionElementParsers.cpp\n@@ -696,6 +696,7 @@ bool ParserCodec::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)\n \n     auto function_node = std::make_shared<ASTFunction>();\n     function_node->name = \"CODEC\";\n+    function_node->kind = ASTFunction::Kind::CODEC;\n     function_node->arguments = expr_list_args;\n     function_node->children.push_back(function_node->arguments);\n \n@@ -723,6 +724,7 @@ bool ParserStatisticsType::parseImpl(Pos & pos, ASTPtr & node, Expected & expect\n \n     auto function_node = std::make_shared<ASTFunction>();\n     function_node->name = \"STATISTICS\";\n+    function_node->kind = ASTFunction::Kind::STATISTICS;\n     function_node->arguments = stat_type;\n     function_node->children.push_back(function_node->arguments);\n     node = function_node;\ndiff --git a/src/Parsers/FunctionSecretArgumentsFinderAST.h b/src/Parsers/FunctionSecretArgumentsFinderAST.h\nindex 5b77485afb08..94da30922ccc 100644\n--- a/src/Parsers/FunctionSecretArgumentsFinderAST.h\n+++ b/src/Parsers/FunctionSecretArgumentsFinderAST.h\n@@ -33,7 +33,9 @@ class FunctionSecretArgumentsFinderAST\n         {\n             case ASTFunction::Kind::ORDINARY_FUNCTION: findOrdinaryFunctionSecretArguments(); break;\n             case ASTFunction::Kind::WINDOW_FUNCTION: break;\n-            case ASTFunction::Kind::LAMBDA_FUNCTION:  break;\n+            case ASTFunction::Kind::LAMBDA_FUNCTION: break;\n+            case ASTFunction::Kind::CODEC: break;\n+            case ASTFunction::Kind::STATISTICS: break;\n             case ASTFunction::Kind::TABLE_ENGINE: findTableEngineSecretArguments(); break;\n             case ASTFunction::Kind::DATABASE_ENGINE: findDatabaseEngineSecretArguments(); break;\n             case ASTFunction::Kind::BACKUP_NAME: findBackupNameSecretArguments(); break;\ndiff --git a/src/Parsers/IAST.h b/src/Parsers/IAST.h\nindex d70c1cd0b6cc..e2cf75796678 100644\n--- a/src/Parsers/IAST.h\n+++ b/src/Parsers/IAST.h\n@@ -256,6 +256,7 @@ class IAST : public std::enable_shared_from_this<IAST>, public TypePromotion<IAS\n         bool expression_list_always_start_on_new_line = false;  /// Line feed and indent before expression list even if it's of single element.\n         bool expression_list_prepend_whitespace = false; /// Prepend whitespace (if it is required)\n         bool surround_each_list_element_with_parens = false;\n+        bool allow_operators = true; /// Format some functions, such as \"plus\", \"in\", etc. as operators.\n         size_t list_element_index = 0;\n         const IAST * current_select = nullptr;\n     };\ndiff --git a/src/Storages/StatisticsDescription.cpp b/src/Storages/StatisticsDescription.cpp\nindex 9c5fd3604b22..63c849e3806f 100644\n--- a/src/Storages/StatisticsDescription.cpp\n+++ b/src/Storages/StatisticsDescription.cpp\n@@ -193,6 +193,7 @@ ASTPtr ColumnStatisticsDescription::getAST() const\n {\n     auto function_node = std::make_shared<ASTFunction>();\n     function_node->name = \"STATISTICS\";\n+    function_node->kind = ASTFunction::Kind::STATISTICS;\n     function_node->arguments = std::make_shared<ASTExpressionList>();\n     for (const auto & [type, desc] : types_to_desc)\n     {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03214_inconsistent_formatting_of_codecs_statistics.reference b/tests/queries/0_stateless/03214_inconsistent_formatting_of_codecs_statistics.reference\nnew file mode 100644\nindex 000000000000..7213baa3e5b0\n--- /dev/null\n+++ b/tests/queries/0_stateless/03214_inconsistent_formatting_of_codecs_statistics.reference\n@@ -0,0 +1,2 @@\n+ALTER TABLE t MODIFY COLUMN `c` CODEC(in(1, 2))\n+ALTER TABLE t MODIFY COLUMN `c` STATISTICS(plus(1, 2))\ndiff --git a/tests/queries/0_stateless/03214_inconsistent_formatting_of_codecs_statistics.sh b/tests/queries/0_stateless/03214_inconsistent_formatting_of_codecs_statistics.sh\nnew file mode 100755\nindex 000000000000..c3f8d89b9a4d\n--- /dev/null\n+++ b/tests/queries/0_stateless/03214_inconsistent_formatting_of_codecs_statistics.sh\n@@ -0,0 +1,9 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+# Ensure that these (possibly incorrect) queries can at least be parsed back after formatting.\n+$CLICKHOUSE_FORMAT --oneline --query \"ALTER TABLE t MODIFY COLUMN c CODEC(in(1, 2))\" | $CLICKHOUSE_FORMAT --oneline\n+$CLICKHOUSE_FORMAT --oneline --query \"ALTER TABLE t MODIFY COLUMN c STATISTICS(plus(1, 2))\" | $CLICKHOUSE_FORMAT --oneline\n",
  "problem_statement": "Inconsistent formatting of CODEC\nhttps://s3.amazonaws.com/clickhouse-test-reports/67397/b2d8eaf1e6d67ab76f3e86cd4fd857e9535a9d20/ast_fuzzer__debug_.html\r\n\r\n`ALTER TABLE t MODIFY COLUMN c CODEC(in(1, 2))`\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2024-07-30T02:08:42Z"
}