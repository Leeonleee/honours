diff --git a/src/Parsers/ASTFunction.cpp b/src/Parsers/ASTFunction.cpp
index 230d4c778e83..cd9e910d45a5 100644
--- a/src/Parsers/ASTFunction.cpp
+++ b/src/Parsers/ASTFunction.cpp
@@ -285,6 +285,8 @@ static bool formatNamedArgWithHiddenValue(IAST * arg, const IAST::FormatSettings
 void ASTFunction::formatImplWithoutAlias(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const
 {
     frame.expression_list_prepend_whitespace = false;
+    if (kind == Kind::CODEC || kind == Kind::STATISTICS || kind == Kind::BACKUP_NAME)
+        frame.allow_operators = false;
     FormatStateStacked nested_need_parens = frame;
     FormatStateStacked nested_dont_need_parens = frame;
     nested_need_parens.need_parens = true;
@@ -308,7 +310,7 @@ void ASTFunction::formatImplWithoutAlias(const FormatSettings & settings, Format
 
     /// Should this function to be written as operator?
     bool written = false;
-    if (arguments && !parameters && nulls_action == NullsAction::EMPTY)
+    if (arguments && !parameters && frame.allow_operators && nulls_action == NullsAction::EMPTY)
     {
         /// Unary prefix operators.
         if (arguments->children.size() == 1)
diff --git a/src/Parsers/ASTFunction.h b/src/Parsers/ASTFunction.h
index be2b6beae54e..1b4a5928d1c5 100644
--- a/src/Parsers/ASTFunction.h
+++ b/src/Parsers/ASTFunction.h
@@ -58,6 +58,8 @@ class ASTFunction : public ASTWithAlias
         TABLE_ENGINE,
         DATABASE_ENGINE,
         BACKUP_NAME,
+        CODEC,
+        STATISTICS,
     };
     Kind kind = Kind::ORDINARY_FUNCTION;
 
diff --git a/src/Parsers/ExpressionElementParsers.cpp b/src/Parsers/ExpressionElementParsers.cpp
index 865d07faaa78..9927acdcf173 100644
--- a/src/Parsers/ExpressionElementParsers.cpp
+++ b/src/Parsers/ExpressionElementParsers.cpp
@@ -696,6 +696,7 @@ bool ParserCodec::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)
 
     auto function_node = std::make_shared<ASTFunction>();
     function_node->name = "CODEC";
+    function_node->kind = ASTFunction::Kind::CODEC;
     function_node->arguments = expr_list_args;
     function_node->children.push_back(function_node->arguments);
 
@@ -723,6 +724,7 @@ bool ParserStatisticsType::parseImpl(Pos & pos, ASTPtr & node, Expected & expect
 
     auto function_node = std::make_shared<ASTFunction>();
     function_node->name = "STATISTICS";
+    function_node->kind = ASTFunction::Kind::STATISTICS;
     function_node->arguments = stat_type;
     function_node->children.push_back(function_node->arguments);
     node = function_node;
diff --git a/src/Parsers/FunctionSecretArgumentsFinderAST.h b/src/Parsers/FunctionSecretArgumentsFinderAST.h
index 5b77485afb08..94da30922ccc 100644
--- a/src/Parsers/FunctionSecretArgumentsFinderAST.h
+++ b/src/Parsers/FunctionSecretArgumentsFinderAST.h
@@ -33,7 +33,9 @@ class FunctionSecretArgumentsFinderAST
         {
             case ASTFunction::Kind::ORDINARY_FUNCTION: findOrdinaryFunctionSecretArguments(); break;
             case ASTFunction::Kind::WINDOW_FUNCTION: break;
-            case ASTFunction::Kind::LAMBDA_FUNCTION:  break;
+            case ASTFunction::Kind::LAMBDA_FUNCTION: break;
+            case ASTFunction::Kind::CODEC: break;
+            case ASTFunction::Kind::STATISTICS: break;
             case ASTFunction::Kind::TABLE_ENGINE: findTableEngineSecretArguments(); break;
             case ASTFunction::Kind::DATABASE_ENGINE: findDatabaseEngineSecretArguments(); break;
             case ASTFunction::Kind::BACKUP_NAME: findBackupNameSecretArguments(); break;
diff --git a/src/Parsers/IAST.h b/src/Parsers/IAST.h
index d70c1cd0b6cc..e2cf75796678 100644
--- a/src/Parsers/IAST.h
+++ b/src/Parsers/IAST.h
@@ -256,6 +256,7 @@ class IAST : public std::enable_shared_from_this<IAST>, public TypePromotion<IAS
         bool expression_list_always_start_on_new_line = false;  /// Line feed and indent before expression list even if it's of single element.
         bool expression_list_prepend_whitespace = false; /// Prepend whitespace (if it is required)
         bool surround_each_list_element_with_parens = false;
+        bool allow_operators = true; /// Format some functions, such as "plus", "in", etc. as operators.
         size_t list_element_index = 0;
         const IAST * current_select = nullptr;
     };
diff --git a/src/Storages/StatisticsDescription.cpp b/src/Storages/StatisticsDescription.cpp
index 9c5fd3604b22..63c849e3806f 100644
--- a/src/Storages/StatisticsDescription.cpp
+++ b/src/Storages/StatisticsDescription.cpp
@@ -193,6 +193,7 @@ ASTPtr ColumnStatisticsDescription::getAST() const
 {
     auto function_node = std::make_shared<ASTFunction>();
     function_node->name = "STATISTICS";
+    function_node->kind = ASTFunction::Kind::STATISTICS;
     function_node->arguments = std::make_shared<ASTExpressionList>();
     for (const auto & [type, desc] : types_to_desc)
     {
