{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 24463,
  "instance_id": "ClickHouse__ClickHouse-24463",
  "issue_numbers": [
    "24024"
  ],
  "base_commit": "e7867f885ad191727475c3a4bb2ddabc020f9076",
  "patch": "diff --git a/src/Interpreters/ActionsDAG.cpp b/src/Interpreters/ActionsDAG.cpp\nindex 21c249564536..e8c02f1c0a88 100644\n--- a/src/Interpreters/ActionsDAG.cpp\n+++ b/src/Interpreters/ActionsDAG.cpp\n@@ -1521,7 +1521,7 @@ ActionsDAG::SplitResult ActionsDAG::splitActionsBeforeArrayJoin(const NameSet &\n \n     auto res = split(split_nodes);\n     /// Do not remove array joined columns if they are not used.\n-    res.first->project_input = false;\n+    /// res.first->project_input = false;\n     return res;\n }\n \n@@ -1534,7 +1534,9 @@ ActionsDAG::SplitResult ActionsDAG::splitActionsForFilter(const std::string & co\n                         column_name, dumpDAG());\n \n     std::unordered_set<const Node *> split_nodes = {node};\n-    return split(split_nodes);\n+    auto res = split(split_nodes);\n+    res.second->project_input = project_input;\n+    return res;\n }\n \n namespace\ndiff --git a/src/Processors/QueryPlan/UnionStep.cpp b/src/Processors/QueryPlan/UnionStep.cpp\nindex 7403dd0a12a6..418e9b4e2e77 100644\n--- a/src/Processors/QueryPlan/UnionStep.cpp\n+++ b/src/Processors/QueryPlan/UnionStep.cpp\n@@ -1,7 +1,9 @@\n #include <Processors/QueryPlan/UnionStep.h>\n #include <Processors/QueryPipeline.h>\n #include <Processors/Sources/NullSource.h>\n+#include <Processors/Transforms/ExpressionTransform.h>\n #include <Interpreters/ExpressionActions.h>\n+#include <common/defines.h>\n \n namespace DB\n {\n@@ -47,6 +49,28 @@ QueryPipelinePtr UnionStep::updatePipeline(QueryPipelines pipelines, const Build\n         return pipeline;\n     }\n \n+    for (auto & cur_pipeline : pipelines)\n+    {\n+#if !defined(NDEBUG)\n+        assertCompatibleHeader(cur_pipeline->getHeader(), getOutputStream().header, \"UnionStep\");\n+#endif\n+        /// Headers for union must be equal.\n+        /// But, just in case, convert it to the same header if not.\n+        if (!isCompatibleHeader(cur_pipeline->getHeader(), getOutputStream().header))\n+        {\n+            auto converting_dag = ActionsDAG::makeConvertingActions(\n+                cur_pipeline->getHeader().getColumnsWithTypeAndName(),\n+                getOutputStream().header.getColumnsWithTypeAndName(),\n+                ActionsDAG::MatchColumnsMode::Name);\n+\n+            auto converting_actions = std::make_shared<ExpressionActions>(std::move(converting_dag));\n+            cur_pipeline->addSimpleTransform([&](const Block & cur_header)\n+            {\n+                return std::make_shared<ExpressionTransform>(cur_header, converting_actions);\n+            });\n+        }\n+    }\n+\n     *pipeline = QueryPipeline::unitePipelines(std::move(pipelines), max_threads);\n \n     processors = collector.detachProcessors();\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01881_union_header_mismatch_bug.reference b/tests/queries/0_stateless/01881_union_header_mismatch_bug.reference\nnew file mode 100644\nindex 000000000000..fbec53380d2d\n--- /dev/null\n+++ b/tests/queries/0_stateless/01881_union_header_mismatch_bug.reference\n@@ -0,0 +1,11 @@\n+table\t10\t101\n+a\t0\n+a\t1\n+a\t2\n+a\t3\n+a\t4\n+b\t0\n+b\t1\n+b\t2\n+b\t3\n+b\t4\ndiff --git a/tests/queries/0_stateless/01881_union_header_mismatch_bug.sql b/tests/queries/0_stateless/01881_union_header_mismatch_bug.sql\nnew file mode 100644\nindex 000000000000..9a220ffd49fc\n--- /dev/null\n+++ b/tests/queries/0_stateless/01881_union_header_mismatch_bug.sql\n@@ -0,0 +1,30 @@\n+select *\u3000from (\u3000select 'table' as table, toInt64(10) as rows, toInt64(101) as elements\u3000union all\u3000select 'another table' as table, toInt64(0) as rows, toInt64(0) as elements\u3000)\u3000where rows - elements <> 0;\n+\n+SELECT\n+    label,\n+    number\n+FROM\n+(\n+    SELECT\n+        'a' AS label,\n+        number\n+    FROM\n+    (\n+        SELECT number\n+        FROM numbers(10)\n+    )\n+    UNION ALL\n+    SELECT\n+        'b' AS label,\n+        number\n+    FROM\n+    (\n+        SELECT number\n+        FROM numbers(10)\n+    )\n+)\n+WHERE number IN\n+(\n+    SELECT number\n+    FROM numbers(5)\n+) order by label, number;\n",
  "problem_statement": "21.5 Block structure mismatch in Pipe::unitePipes stream: different number of columns\n\r\n```\r\nselect *\r\nfrom (\r\nselect 'table' as table, toInt64(10) as rows, toInt64(101) as elements\r\nunion all\r\nselect 'another table' as table, toInt64(0) as rows, toInt64(0) as elements\r\n)\r\nwhere rows - elements <> 0\r\n\r\nDB::Exception: Block structure mismatch in Pipe::unitePipes stream: different number of columns:\r\ntable String String(size = 0), rows Int64 Int64(size = 0), elements Int64 Int64(size = 0)\r\ntable String String(size = 0), rows Int64 Int64(size = 0), elements Int64 Int64(size = 0), dummy UInt8 UInt8(size = 0) (version 21.5.3.1 (official build))\r\n```\n",
  "hints_text": "",
  "created_at": "2021-05-24T18:07:29Z",
  "modified_files": [
    "src/Interpreters/ActionsDAG.cpp",
    "src/Processors/QueryPlan/UnionStep.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01881_union_header_mismatch_bug.reference",
    "b/tests/queries/0_stateless/01881_union_header_mismatch_bug.sql"
  ]
}