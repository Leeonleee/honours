{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 63819,
  "instance_id": "ClickHouse__ClickHouse-63819",
  "issue_numbers": [
    "63799"
  ],
  "base_commit": "0c199149184649951feb8d539530dd2921d4e724",
  "patch": "diff --git a/src/Processors/QueryPlan/Optimizations/filterPushDown.cpp b/src/Processors/QueryPlan/Optimizations/filterPushDown.cpp\nindex 5b3bcfc44683..8ca240b3e8b5 100644\n--- a/src/Processors/QueryPlan/Optimizations/filterPushDown.cpp\n+++ b/src/Processors/QueryPlan/Optimizations/filterPushDown.cpp\n@@ -262,10 +262,6 @@ static size_t tryPushDownOverJoinStep(QueryPlan::Node * parent_node, QueryPlan::\n         {\n             const auto & left_table_key_name = join_clause.key_names_left[i];\n             const auto & right_table_key_name = join_clause.key_names_right[i];\n-\n-            if (!join_header.has(left_table_key_name) || !join_header.has(right_table_key_name))\n-                continue;\n-\n             const auto & left_table_column = left_stream_input_header.getByName(left_table_key_name);\n             const auto & right_table_column = right_stream_input_header.getByName(right_table_key_name);\n \n@@ -338,9 +334,9 @@ static size_t tryPushDownOverJoinStep(QueryPlan::Node * parent_node, QueryPlan::\n     auto join_filter_push_down_actions = filter->getExpression()->splitActionsForJOINFilterPushDown(filter->getFilterColumnName(),\n         filter->removesFilterColumn(),\n         left_stream_available_columns_to_push_down,\n-        left_stream_input_header.getColumnsWithTypeAndName(),\n+        left_stream_input_header,\n         right_stream_available_columns_to_push_down,\n-        right_stream_input_header.getColumnsWithTypeAndName(),\n+        right_stream_input_header,\n         equivalent_columns_to_push_down,\n         equivalent_left_stream_column_to_right_stream_column,\n         equivalent_right_stream_column_to_left_stream_column);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03152_join_filter_push_down_equivalent_columns.reference b/tests/queries/0_stateless/03152_join_filter_push_down_equivalent_columns.reference\nnew file mode 100644\nindex 000000000000..7058d36aaf9b\n--- /dev/null\n+++ b/tests/queries/0_stateless/03152_join_filter_push_down_equivalent_columns.reference\n@@ -0,0 +1,91 @@\n+-- { echoOn }\n+\n+EXPLAIN header = 1, indexes = 1\n+SELECT name FROM users INNER JOIN users2 USING name WHERE users.name ='Alice';\n+Expression ((Project names + (Projection + )))\n+Header: name String\n+  Join (JOIN FillRightFirst)\n+  Header: __table1.name String\n+    Filter (( + Change column names to column identifiers))\n+    Header: __table1.name String\n+      ReadFromMergeTree (default.users)\n+      Header: name String\n+      Indexes:\n+        PrimaryKey\n+          Keys: \n+            name\n+          Condition: (name in [\\'Alice\\', \\'Alice\\'])\n+          Parts: 1/3\n+          Granules: 1/3\n+    Filter (( + Change column names to column identifiers))\n+    Header: __table2.name String\n+      ReadFromMergeTree (default.users2)\n+      Header: name String\n+      Indexes:\n+        PrimaryKey\n+          Keys: \n+            name\n+          Condition: (name in [\\'Alice\\', \\'Alice\\'])\n+          Parts: 1/3\n+          Granules: 1/3\n+SELECT '--';\n+--\n+EXPLAIN header = 1, indexes = 1\n+SELECT name FROM users LEFT JOIN users2 USING name WHERE users.name ='Alice';\n+Expression ((Project names + (Projection + )))\n+Header: name String\n+  Join (JOIN FillRightFirst)\n+  Header: __table1.name String\n+    Filter (( + Change column names to column identifiers))\n+    Header: __table1.name String\n+      ReadFromMergeTree (default.users)\n+      Header: name String\n+      Indexes:\n+        PrimaryKey\n+          Keys: \n+            name\n+          Condition: (name in [\\'Alice\\', \\'Alice\\'])\n+          Parts: 1/3\n+          Granules: 1/3\n+    Filter (( + Change column names to column identifiers))\n+    Header: __table2.name String\n+      ReadFromMergeTree (default.users2)\n+      Header: name String\n+      Indexes:\n+        PrimaryKey\n+          Keys: \n+            name\n+          Condition: (name in [\\'Alice\\', \\'Alice\\'])\n+          Parts: 1/3\n+          Granules: 1/3\n+SELECT '--';\n+--\n+EXPLAIN header = 1, indexes = 1\n+SELECT name FROM users RIGHT JOIN users2 USING name WHERE users2.name ='Alice';\n+Expression ((Project names + (Projection + )))\n+Header: name String\n+  Join (JOIN FillRightFirst)\n+  Header: __table1.name String\n+          __table2.name String\n+    Filter (( + Change column names to column identifiers))\n+    Header: __table1.name String\n+      ReadFromMergeTree (default.users)\n+      Header: name String\n+      Indexes:\n+        PrimaryKey\n+          Keys: \n+            name\n+          Condition: (name in [\\'Alice\\', \\'Alice\\'])\n+          Parts: 1/3\n+          Granules: 1/3\n+    Filter (( + Change column names to column identifiers))\n+    Header: __table2.name String\n+      ReadFromMergeTree (default.users2)\n+      Header: name String\n+      Indexes:\n+        PrimaryKey\n+          Keys: \n+            name\n+          Condition: (name in [\\'Alice\\', \\'Alice\\'])\n+          Parts: 1/3\n+          Granules: 1/3\ndiff --git a/tests/queries/0_stateless/03152_join_filter_push_down_equivalent_columns.sql b/tests/queries/0_stateless/03152_join_filter_push_down_equivalent_columns.sql\nnew file mode 100644\nindex 000000000000..645e89034d78\n--- /dev/null\n+++ b/tests/queries/0_stateless/03152_join_filter_push_down_equivalent_columns.sql\n@@ -0,0 +1,35 @@\n+SET allow_experimental_analyzer = 1;\n+\n+DROP TABLE IF EXISTS users;\n+CREATE TABLE users (uid Int16, name String, age Int16) ENGINE=MergeTree order by (uid, name);\n+\n+INSERT INTO users VALUES (1231, 'John', 33);\n+INSERT INTO users VALUES (6666, 'Ksenia', 48);\n+INSERT INTO users VALUES (8888, 'Alice', 50);\n+\n+DROP TABLE IF EXISTS users2;\n+CREATE TABLE users2 (uid Int16, name String, age2 Int16) ENGINE=MergeTree order by (uid, name);\n+\n+INSERT INTO users2 VALUES (1231, 'John', 33);\n+INSERT INTO users2 VALUES (6666, 'Ksenia', 48);\n+INSERT INTO users2 VALUES (8888, 'Alice', 50);\n+\n+-- { echoOn }\n+\n+EXPLAIN header = 1, indexes = 1\n+SELECT name FROM users INNER JOIN users2 USING name WHERE users.name ='Alice';\n+\n+SELECT '--';\n+\n+EXPLAIN header = 1, indexes = 1\n+SELECT name FROM users LEFT JOIN users2 USING name WHERE users.name ='Alice';\n+\n+SELECT '--';\n+\n+EXPLAIN header = 1, indexes = 1\n+SELECT name FROM users RIGHT JOIN users2 USING name WHERE users2.name ='Alice';\n+\n+-- { echoOff }\n+\n+DROP TABLE users;\n+DROP TABLE users2;\n",
  "problem_statement": "JOIN filter push down does not work in all cases\nA filter on a left table + LEFT/INNER JOIN does not push down to the right table \r\nhttps://fiddle.clickhouse.com/a455a431-bdf9-4617-969b-3d805c0f4636\r\n\r\nreferring to the PR https://github.com/ClickHouse/ClickHouse/pull/61216\r\n\r\n\n",
  "hints_text": "The problem was that during filter push down, we check that both equivalent columns used after JOIN section.\r\nFor example if you use `name` from `users` and `name` from `users2` everything will work as expected:\r\n```\r\nCREATE TABLE users (uid Int16, name String, age Int16) ENGINE=MergeTree order by (uid, name);\r\n\r\nINSERT INTO users VALUES (1231, 'John', 33);\r\nINSERT INTO users VALUES (6666, 'Ksenia', 48);\r\nINSERT INTO users VALUES (8888, 'Alice', 50);\r\n\r\nCREATE TABLE users2 (uid Int16, name String, age2 Int16) ENGINE=MergeTree order by (uid, name);\r\n\r\nINSERT INTO users2 VALUES (1231, 'John', 33);\r\nINSERT INTO users2 VALUES (6666, 'Ksenia', 48);\r\nINSERT INTO users2 VALUES (8888, 'Alice', 50);\r\n\r\nEXPLAIN indexes = 1 SELECT name, users2.name FROM users  left JOIN users2 USING name where users.name ='Alice';\r\n\r\n    \u250c\u2500explain\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n 1. \u2502 Expression ((Project names + (Projection + )))              \u2502\r\n 2. \u2502   Join (JOIN FillRightFirst)                                \u2502\r\n 3. \u2502     Filter (( + Change column names to column identifiers)) \u2502\r\n 4. \u2502       ReadFromMergeTree (default.users)                     \u2502\r\n 5. \u2502       Indexes:                                              \u2502\r\n 6. \u2502         PrimaryKey                                          \u2502\r\n 7. \u2502           Keys:                                             \u2502\r\n 8. \u2502             name                                            \u2502\r\n 9. \u2502           Condition: (name in ['Alice', 'Alice'])           \u2502\r\n10. \u2502           Parts: 1/3                                        \u2502\r\n11. \u2502           Granules: 1/3                                     \u2502\r\n12. \u2502     Filter (( + Change column names to column identifiers)) \u2502\r\n13. \u2502       ReadFromMergeTree (default.users2)                    \u2502\r\n14. \u2502       Indexes:                                              \u2502\r\n15. \u2502         PrimaryKey                                          \u2502\r\n16. \u2502           Keys:                                             \u2502\r\n17. \u2502             name                                            \u2502\r\n18. \u2502           Condition: (name in ['Alice', 'Alice'])           \u2502\r\n19. \u2502           Parts: 1/3                                        \u2502\r\n20. \u2502           Granules: 1/3                                     \u2502\r\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n",
  "created_at": "2024-05-15T09:52:49Z",
  "modified_files": [
    "src/Processors/QueryPlan/Optimizations/filterPushDown.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03152_join_filter_push_down_equivalent_columns.reference",
    "b/tests/queries/0_stateless/03152_join_filter_push_down_equivalent_columns.sql"
  ]
}