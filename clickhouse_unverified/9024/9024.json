{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 9024,
  "instance_id": "ClickHouse__ClickHouse-9024",
  "issue_numbers": [
    "8997"
  ],
  "base_commit": "dad4f03a8f64e89a9793e7a94c82b379a3ea4353",
  "patch": "diff --git a/dbms/src/Interpreters/InterpreterSelectQuery.cpp b/dbms/src/Interpreters/InterpreterSelectQuery.cpp\nindex 175059b53da9..b76317e8cd23 100644\n--- a/dbms/src/Interpreters/InterpreterSelectQuery.cpp\n+++ b/dbms/src/Interpreters/InterpreterSelectQuery.cpp\n@@ -324,7 +324,7 @@ InterpreterSelectQuery::InterpreterSelectQuery(\n         table_id = storage->getStorageID();\n     }\n \n-    auto analyze = [&] ()\n+    auto analyze = [&] (bool try_move_to_prewhere = true)\n     {\n         syntax_analyzer_result = SyntaxAnalyzer(*context, options).analyze(\n                 query_ptr, source_header.getNamesAndTypesList(), required_result_column_names, storage, NamesAndTypesList());\n@@ -397,7 +397,7 @@ InterpreterSelectQuery::InterpreterSelectQuery(\n             throw Exception(\"PREWHERE is not supported if the table is filtered by row-level security expression\", ErrorCodes::ILLEGAL_PREWHERE);\n \n         /// Calculate structure of the result.\n-        result_header = getSampleBlockImpl();\n+        result_header = getSampleBlockImpl(try_move_to_prewhere);\n     };\n \n     analyze();\n@@ -425,8 +425,13 @@ InterpreterSelectQuery::InterpreterSelectQuery(\n         query.setExpression(ASTSelectQuery::Expression::WHERE, makeASTFunction(\"and\", query.prewhere()->clone(), query.where()->clone()));\n         need_analyze_again = true;\n     }\n+\n     if (need_analyze_again)\n-        analyze();\n+    {\n+        /// Do not try move conditions to PREWHERE for the second time.\n+        /// Otherwise, we won't be able to fallback from inefficient PREWHERE to WHERE later.\n+        analyze(/* try_move_to_prewhere = */ false);\n+    }\n \n     /// If there is no WHERE, filter blocks as usual\n     if (query.prewhere() && !query.where())\n@@ -509,7 +514,7 @@ QueryPipeline InterpreterSelectQuery::executeWithProcessors()\n }\n \n \n-Block InterpreterSelectQuery::getSampleBlockImpl()\n+Block InterpreterSelectQuery::getSampleBlockImpl(bool try_move_to_prewhere)\n {\n     auto & query = getSelectQuery();\n     const Settings & settings = context->getSettingsRef();\n@@ -533,7 +538,7 @@ Block InterpreterSelectQuery::getSampleBlockImpl()\n                 current_info.sets = query_analyzer->getPreparedSets();\n \n                 /// Try transferring some condition from WHERE to PREWHERE if enabled and viable\n-                if (settings.optimize_move_to_prewhere && query.where() && !query.prewhere() && !query.final())\n+                if (settings.optimize_move_to_prewhere && try_move_to_prewhere && query.where() && !query.prewhere() && !query.final())\n                     MergeTreeWhereOptimizer{current_info, *context, merge_tree,\n                                             syntax_analyzer_result->requiredSourceColumns(), log};\n             };\ndiff --git a/dbms/src/Interpreters/InterpreterSelectQuery.h b/dbms/src/Interpreters/InterpreterSelectQuery.h\nindex 56ab2aaa8f55..77a6f1ca3acc 100644\n--- a/dbms/src/Interpreters/InterpreterSelectQuery.h\n+++ b/dbms/src/Interpreters/InterpreterSelectQuery.h\n@@ -104,7 +104,7 @@ class InterpreterSelectQuery : public IInterpreter\n \n     ASTSelectQuery & getSelectQuery() { return query_ptr->as<ASTSelectQuery &>(); }\n \n-    Block getSampleBlockImpl();\n+    Block getSampleBlockImpl(bool try_move_to_prewhere);\n \n     struct Pipeline\n     {\ndiff --git a/dbms/src/Storages/MergeTree/MergeTreeRangeReader.cpp b/dbms/src/Storages/MergeTree/MergeTreeRangeReader.cpp\nindex 517d6a147564..a0bd2567fe50 100644\n--- a/dbms/src/Storages/MergeTree/MergeTreeRangeReader.cpp\n+++ b/dbms/src/Storages/MergeTree/MergeTreeRangeReader.cpp\n@@ -431,9 +431,11 @@ void MergeTreeRangeReader::ReadResult::setFilter(const ColumnPtr & new_filter)\n     }\n \n     ConstantFilterDescription const_description(*new_filter);\n-    if (const_description.always_false)\n+    if (const_description.always_true)\n+        setFilterConstTrue();\n+    else if (const_description.always_false)\n         clear();\n-    else if (!const_description.always_true)\n+    else\n     {\n         FilterDescription filter_description(*new_filter);\n         filter_holder = filter_description.data_holder ? filter_description.data_holder : new_filter;\n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/01076_range_reader_segfault.reference b/dbms/tests/queries/0_stateless/01076_range_reader_segfault.reference\nnew file mode 100644\nindex 000000000000..97ebc7c1a0f8\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/01076_range_reader_segfault.reference\n@@ -0,0 +1,2 @@\n+99\n+4950\ndiff --git a/dbms/tests/queries/0_stateless/01076_range_reader_segfault.sql b/dbms/tests/queries/0_stateless/01076_range_reader_segfault.sql\nnew file mode 100644\nindex 000000000000..86a568ff617e\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/01076_range_reader_segfault.sql\n@@ -0,0 +1,9 @@\n+DROP TABLE IF EXISTS t;\n+\n+CREATE TABLE t (a Int, b Int, c Int) ENGINE = MergeTree ORDER BY tuple();\n+INSERT INTO t SELECT number, number * 2, number * 3 FROM numbers(100);\n+\n+SELECT count() FROM t PREWHERE NOT ignore(a) WHERE b > 0;\n+SELECT sum(a) FROM t PREWHERE isNotNull(a) WHERE isNotNull(b) AND c > 0;\n+\n+DROP TABLE t;\n",
  "problem_statement": "[20.1.2.4] Address: NULL pointer. Access: read. Address not mapped to object.\n**CH Version:** 20.1.2.4 (from yandex deb repo)\r\n\r\n**Schema:**\r\n```\r\nCREATE TABLE db.table (`field1` Int64, `field2` UInt64, `field3` UInt32, `field4` Date, `field5` DateTime, `field6` Float64, `field7` DateTime) ENGINE = MergeTree(field4, (field4, field2, field3), 8192)\r\n```\r\n\r\n**Logs:**\r\n```\r\n2020.02.04 12:13:31.461665 [ 209 ] {7556b9ba-ec4c-47c0-9b07-77c94397611d} <Debug> executeQuery: (from 127.0.0.1:41612) SELECT field3, field2 FROM (SELECT CAST(field3, 'Int32') AS field3, CAST(field2, 'Int64') AS field2 FROM db.table WHERE field6 > 0\r\n) WHERE isNotNull(field2) AND isNotNull(field3) FORMAT TabSeparatedWithNamesAndTypes\r\n2020.02.04 12:13:31.462262 [ 209 ] {7556b9ba-ec4c-47c0-9b07-77c94397611d} <Debug> InterpreterSelectQuery: MergeTreeWhereOptimizer: condition \"field6 > 0\" moved to PREWHERE\r\n2020.02.04 12:13:31.463440 [ 209 ] {7556b9ba-ec4c-47c0-9b07-77c94397611d} <Debug> InterpreterSelectQuery: MergeTreeWhereOptimizer: condition \"field6 > 0\" moved to PREWHERE\r\n2020.02.04 12:13:31.464493 [ 209 ] {7556b9ba-ec4c-47c0-9b07-77c94397611d} <Debug> InterpreterSelectQuery: MergeTreeWhereOptimizer: condition \"isNotNull(CAST(field2, 'Int64') AS field2)\" moved to PREWHERE\r\n2020.02.04 12:13:31.465658 [ 209 ] {7556b9ba-ec4c-47c0-9b07-77c94397611d} <Debug> InterpreterSelectQuery: MergeTreeWhereOptimizer: condition \"isNotNull(CAST(field3, 'Int32') AS field3)\" moved to PREWHERE\r\n2020.02.04 12:13:31.467112 [ 209 ] {7556b9ba-ec4c-47c0-9b07-77c94397611d} <Debug> InterpreterSelectQuery: MergeTreeWhereOptimizer: condition \"isNotNull(CAST(field2, 'Int64') AS field2)\" moved to PREWHERE\r\n2020.02.04 12:13:31.468167 [ 209 ] {7556b9ba-ec4c-47c0-9b07-77c94397611d} <Debug> InterpreterSelectQuery: MergeTreeWhereOptimizer: condition \"isNotNull(CAST(field3, 'Int32') AS field3)\" moved to PREWHERE\r\n2020.02.04 12:13:31.469162 [ 209 ] {7556b9ba-ec4c-47c0-9b07-77c94397611d} <Debug> tmp.sd (SelectExecutor): Key condition: unknown, unknown, and\r\n2020.02.04 12:13:31.469197 [ 209 ] {7556b9ba-ec4c-47c0-9b07-77c94397611d} <Debug> tmp.sd (SelectExecutor): MinMax index condition: unknown, unknown, and\r\n2020.02.04 12:13:31.469237 [ 209 ] {7556b9ba-ec4c-47c0-9b07-77c94397611d} <Debug> tmp.sd (SelectExecutor): Selected 2 parts by date, 2 parts by key, 1428 marks to read from 2 ranges\r\n2020.02.04 12:13:31.469371 [ 209 ] {7556b9ba-ec4c-47c0-9b07-77c94397611d} <Trace> tmp.sd (SelectExecutor): Reading approx. 11698176 rows with 16 streams\r\n2020.02.04 12:13:31.469855 [ 209 ] {7556b9ba-ec4c-47c0-9b07-77c94397611d} <Trace> InterpreterSelectQuery: FetchColumns -> Complete\r\n2020.02.04 12:13:31.470318 [ 209 ] {7556b9ba-ec4c-47c0-9b07-77c94397611d} <Trace> InterpreterSelectQuery: FetchColumns -> Complete\r\n2020.02.04 12:13:31.471110 [ 209 ] {7556b9ba-ec4c-47c0-9b07-77c94397611d} <Debug> executeQuery: Query pipeline:\r\nUnion\r\n Expression \u00d7 16\r\n  Expression\r\n   Expression\r\n    Expression\r\n     Filter\r\n      MergeTreeThread\r\n\r\n2020.02.04 12:13:31.475338 [ 222 ] {} <Fatal> BaseDaemon: ########################################\r\n2020.02.04 12:13:31.475798 [ 222 ] {} <Fatal> BaseDaemon: (version 20.1.2.4 (official build)) (from thread 21) (query_id: 7556b9ba-ec4c-47c0-9b07-77c94397611d) Received signal Segmentation fault (11).\r\n2020.02.04 12:13:31.475850 [ 222 ] {} <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Address not mapped to object.\r\n2020.02.04 12:13:31.475908 [ 222 ] {} <Fatal> BaseDaemon: Stack trace: 0x97a4def 0x97a5884 0x97a55bd 0x9768166 0x9769963 0x91a4c27 0x91d6e24 0x91d7043 0x8a6d32f 0x94a6811 0x8a6d32f 0x949c168 0x8a6d32f 0x949c168 0x8a6d32f 0x949c168 0x8a6d32f\r\n 0x949c168 0x8a6d32f 0x8c2a73c 0x8c2b4b5 0x4fa3b77 0x4fa212f 0x7fd47e2866ba 0x7fd47dbb041d\r\n2020.02.04 12:13:31.476079 [ 223 ] {} <Fatal> BaseDaemon: ########################################\r\n2020.02.04 12:13:31.476421 [ 222 ] {} <Fatal> BaseDaemon: 3. 0x97a4def DB::MergeTreeRangeReader::executePrewhereActionsAndFilterColumns(DB::MergeTreeRangeReader::ReadResult&)  in /usr/bin/clickhouse\r\n2020.02.04 12:13:31.476194 [ 223 ] {} <Fatal> BaseDaemon: (version 20.1.2.4 (official build)) (from thread 88) (query_id: 7556b9ba-ec4c-47c0-9b07-77c94397611d) Received signal Segmentation fault (11).\r\n2020.02.04 12:13:31.476514 [ 222 ] {} <Fatal> BaseDaemon: 4. 0x97a5884 DB::MergeTreeRangeReader::read(unsigned long, std::__1::vector<DB::MarkRange, std::__1::allocator<DB::MarkRange> >&)  in /usr/bin/clickhouse\r\n2020.02.04 12:13:31.476521 [ 223 ] {} <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Address not mapped to object.\r\n2020.02.04 12:13:31.476505 [ 224 ] {} <Fatal> BaseDaemon: ########################################\r\n2020.02.04 12:13:31.476591 [ 223 ] {} <Fatal> BaseDaemon: Stack trace: 0x97a4def 0x97a5884 0x97a55bd 0x9768166 0x9769963 0x91a4c27 0x91d6e24 0x91d7043 0x8a6d32f 0x94a6811 0x8a6d32f 0x949c168 0x8a6d32f 0x949c168 0x8a6d32f 0x949c168 0x8a6d32f\r\n 0x949c168 0x8a6d32f 0x8c2a73c 0x8c2b4b5 0x4fa3b77 0x4fa212f 0x7fd47e2866ba 0x7fd47dbb041d\r\n2020.02.04 12:13:31.476558 [ 222 ] {} <Fatal> BaseDaemon: 5. 0x97a55bd DB::MergeTreeRangeReader::read(unsigned long, std::__1::vector<DB::MarkRange, std::__1::allocator<DB::MarkRange> >&)  in /usr/bin/clickhouse\r\n2020.02.04 12:13:31.476719 [ 223 ] {} <Fatal> BaseDaemon: 3. 0x97a4def DB::MergeTreeRangeReader::executePrewhereActionsAndFilterColumns(DB::MergeTreeRangeReader::ReadResult&)  in /usr/bin/clickhouse\r\n2020.02.04 12:13:31.476665 [ 224 ] {} <Fatal> BaseDaemon: (version 20.1.2.4 (official build)) (from thread 106) (query_id: 7556b9ba-ec4c-47c0-9b07-77c94397611d) Received signal Segmentation fault (11).\r\n2020.02.04 12:13:31.476744 [ 222 ] {} <Fatal> BaseDaemon: 6. 0x9768166 DB::MergeTreeBaseSelectProcessor::readFromPartImpl()  in /usr/bin/clickhouse\r\n2020.02.04 12:13:31.476847 [ 224 ] {} <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Address not mapped to object.\r\n2020.02.04 12:13:31.476886 [ 222 ] {} <Fatal> BaseDaemon: 7. 0x9769963 DB::MergeTreeBaseSelectProcessor::generate()  in /usr/bin/clickhouse\r\n2020.02.04 12:13:31.476771 [ 223 ] {} <Fatal> BaseDaemon: 4. 0x97a5884 DB::MergeTreeRangeReader::read(unsigned long, std::__1::vector<DB::MarkRange, std::__1::allocator<DB::MarkRange> >&)  in /usr/bin/clickhouse\r\n2020.02.04 12:13:31.476942 [ 222 ] {} <Fatal> BaseDaemon: 8. 0x91a4c27 DB::ISource::work()  in /usr/bin/clickhouse\r\n2020.02.04 12:13:31.476957 [ 223 ] {} <Fatal> BaseDaemon: 5. 0x97a55bd DB::MergeTreeRangeReader::read(unsigned long, std::__1::vector<DB::MarkRange, std::__1::allocator<DB::MarkRange> >&)  in /usr/bin/clickhouse\r\n2020.02.04 12:13:31.476972 [ 224 ] {} <Fatal> BaseDaemon: Stack trace: 0x97a4def 0x97a5884 0x97a55bd 0x9768166 0x9769963 0x91a4c27 0x91d6e24 0x91d7043 0x8a6d32f 0x94a6811 0x8a6d32f 0x949c168 0x8a6d32f 0x949c168 0x8a6d32f 0x949c168 0x8a6d32f\r\n 0x949c168 0x8a6d32f 0x8c2a73c 0x8c2b4b5 0x4fa3b77 0x4fa212f 0x7fd47e2866ba 0x7fd47dbb041d\r\n2020.02.04 12:13:31.476990 [ 222 ] {} <Fatal> BaseDaemon: 9. 0x91d6e24 DB::TreeExecutorBlockInputStream::execute()  in /usr/bin/clickhouse\r\n2020.02.04 12:13:31.477002 [ 223 ] {} <Fatal> BaseDaemon: 6. 0x9768166 DB::MergeTreeBaseSelectProcessor::readFromPartImpl()  in /usr/bin/clickhouse\r\n2020.02.04 12:13:31.477094 [ 222 ] {} <Fatal> BaseDaemon: 10. 0x91d7043 DB::TreeExecutorBlockInputStream::readImpl()  in /usr/bin/clickhouse\r\n2020.02.04 12:13:31.477150 [ 223 ] {} <Fatal> BaseDaemon: 7. 0x9769963 DB::MergeTreeBaseSelectProcessor::generate()  in /usr/bin/clickhouse\r\n2020.02.04 12:13:31.477159 [ 224 ] {} <Fatal> BaseDaemon: 3. 0x97a4def DB::MergeTreeRangeReader::executePrewhereActionsAndFilterColumns(DB::MergeTreeRangeReader::ReadResult&)  in /usr/bin/clickhouse\r\n2020.02.04 12:13:31.477137 [ 225 ] {} <Fatal> BaseDaemon: ########################################\r\n2020.02.04 12:13:31.477161 [ 222 ] {} <Fatal> BaseDaemon: 11. 0x8a6d32f DB::IBlockInputStream::read()  in /usr/bin/clickhouse\r\n2020.02.04 12:13:31.477383 [ 225 ] {} <Fatal> BaseDaemon: (version 20.1.2.4 (official build)) (from thread 58) (query_id: 7556b9ba-ec4c-47c0-9b07-77c94397611d) Received signal Segmentation fault (11).\r\n2020.02.04 12:13:31.477224 [ 223 ] {} <Fatal> BaseDaemon: 8. 0x91a4c27 DB::ISource::work()  in /usr/bin/clickhouse\r\n2020.02.04 12:13:31.477468 [ 225 ] {} <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Address not mapped to object.\r\n2020.02.04 12:13:31.477600 [ 223 ] {} <Fatal> BaseDaemon: 9. 0x91d6e24 DB::TreeExecutorBlockInputStream::execute()  in /usr/bin/clickhouse\r\n2020.02.04 12:13:31.477636 [ 225 ] {} <Fatal> BaseDaemon: Stack trace: 0x97a4def 0x97a5884 0x97a55bd 0x9768166 0x9769963 0x91a4c27 0x91d6e24 0x91d7043 0x8a6d32f 0x94a6811 0x8a6d32f 0x949c168 0x8a6d32f 0x949c168 0x8a6d32f 0x949c168 0x8a6d32f\r\n 0x949c168 0x8a6d32f 0x8c2a73c 0x8c2b4b5 0x4fa3b77 0x4fa212f 0x7fd47e2866ba 0x7fd47dbb041d\r\n2020.02.04 12:13:31.477421 [ 222 ] {} <Fatal> BaseDaemon: 12. 0x94a6811 DB::FilterBlockInputStream::readImpl()  in /usr/bin/clickhouse\r\n2020.02.04 12:13:31.477616 [ 226 ] {} <Fatal> BaseDaemon: ########################################\r\n2020.02.04 12:13:31.477650 [ 223 ] {} <Fatal> BaseDaemon: 10. 0x91d7043 DB::TreeExecutorBlockInputStream::readImpl()  in /usr/bin/clickhouse\r\n2020.02.04 12:13:31.477330 [ 224 ] {} <Fatal> BaseDaemon: 4. 0x97a5884 DB::MergeTreeRangeReader::read(unsigned long, std::__1::vector<DB::MarkRange, std::__1::allocator<DB::MarkRange> >&)  in /usr/bin/clickhouse\r\n2020.02.04 12:13:31.477844 [ 222 ] {} <Fatal> BaseDaemon: 13. 0x8a6d32f DB::IBlockInputStream::read()  in /usr/bin/clickhouse\r\n2020.02.04 12:13:31.477852 [ 227 ] {} <Fatal> BaseDaemon: ########################################\r\n2020.02.04 12:13:31.477865 [ 225 ] {} <Fatal> BaseDaemon: 3. 0x97a4def DB::MergeTreeRangeReader::executePrewhereActionsAndFilterColumns(DB::MergeTreeRangeReader::ReadResult&)  in /usr/bin/clickhouse\r\n2020.02.04 12:13:31.477958 [ 226 ] {} <Fatal> BaseDaemon: (version 20.1.2.4 (official build)) (from thread 39) (query_id: 7556b9ba-ec4c-47c0-9b07-77c94397611d) Received signal Segmentation fault (11).\r\n2020.02.04 12:13:31.478202 [ 224 ] {} <Fatal> BaseDaemon: 5. 0x97a55bd DB::MergeTreeRangeReader::read(unsigned long, std::__1::vector<DB::MarkRange, std::__1::allocator<DB::MarkRange> >&)  in /usr/bin/clickhouse\r\n2020.02.04 12:13:31.478198 [ 222 ] {} <Fatal> BaseDaemon: 14. 0x949c168 DB::ExpressionBlockInputStream::readImpl()  in /usr/bin/clickhouse\r\n2020.02.04 12:13:31.478054 [ 223 ] {} <Fatal> BaseDaemon: 11. 0x8a6d32f DB::IBlockInputStream::read()  in /usr/bin/clickhouse\r\n2020.02.04 12:13:31.478244 [ 228 ] {} <Fatal> BaseDaemon: ########################################\r\n2020.02.04 12:13:31.478877 [ 229 ] {} <Fatal> BaseDaemon: ########################################\r\n2020.02.04 12:13:31.478922 [ 228 ] {} <Fatal> BaseDaemon: (version 20.1.2.4 (official build)) (from thread 175) (query_id: 7556b9ba-ec4c-47c0-9b07-77c94397611d) Received signal Segmentation fault (11).\r\n2020.02.04 12:13:31.478424 [ 226 ] {} <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Address not mapped to object.\r\n2020.02.04 12:13:31.478356 [ 225 ] {} <Fatal> BaseDaemon: 4. 0x97a5884 DB::MergeTreeRangeReader::read(unsigned long, std::__1::vector<DB::MarkRange, std::__1::allocator<DB::MarkRange> >&)  in /usr/bin/clickhouse\r\n2020.02.04 12:13:31.479114 [ 226 ] {} <Fatal> BaseDaemon: Stack trace: 0x97a4def 0x97a5884 0x97a55bd 0x9768166 0x9769963 0x91a4c27 0x91d6e24 0x91d7043 0x8a6d32f 0x94a6811 0x8a6d32f 0x949c168 0x8a6d32f 0x949c168 0x8a6d32f 0x949c168 0x8a6d32f\r\n 0x949c168 0x8a6d32f 0x8c2a73c 0x8c2b4b5 0x4fa3b77 0x4fa212f 0x7fd47e2866ba 0x7fd47dbb041d\r\n2020.02.04 12:13:31.479155 [ 225 ] {} <Fatal> BaseDaemon: 5. 0x97a55bd DB::MergeTreeRangeReader::read(unsigned long, std::__1::vector<DB::MarkRange, std::__1::allocator<DB::MarkRange> >&)  in /usr/bin/clickhouse\r\n2020.02.04 12:13:31.479219 [ 226 ] {} <Fatal> BaseDaemon: 3. 0x97a4def DB::MergeTreeRangeReader::executePrewhereActionsAndFilterColumns(DB::MergeTreeRangeReader::ReadResult&)  in /usr/bin/clickhouse\r\n2020.02.04 12:13:31.478591 [ 224 ] {} <Fatal> BaseDaemon: 6. 0x9768166 DB::MergeTreeBaseSelectProcessor::readFromPartImpl()  in /usr/bin/clickhouse\r\n```\n",
  "hints_text": "Thank you for the report! Maybe you can provide some data to reproduce the crash?\nCan't public it. Privatelly provided to clickhouse-feedback@yandex-team.com.\r\nSubject same as this issue name.",
  "created_at": "2020-02-05T16:46:58Z"
}