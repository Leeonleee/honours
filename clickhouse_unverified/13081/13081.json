{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 13081,
  "instance_id": "ClickHouse__ClickHouse-13081",
  "issue_numbers": [
    "13060",
    "12406"
  ],
  "base_commit": "7a806eb90f058fbc53bc74e81cb66da857631485",
  "patch": "diff --git a/src/Storages/MergeTree/KeyCondition.cpp b/src/Storages/MergeTree/KeyCondition.cpp\nindex 57d9c86f1026..6847a09b85c3 100644\n--- a/src/Storages/MergeTree/KeyCondition.cpp\n+++ b/src/Storages/MergeTree/KeyCondition.cpp\n@@ -1089,7 +1089,7 @@ BoolMask KeyCondition::checkInRange(\n /*      std::cerr << \"Hyperrectangle: \";\n         for (size_t i = 0, size = key_ranges.size(); i != size; ++i)\n             std::cerr << (i != 0 ? \" x \" : \"\") << key_ranges[i].toString();\n-        std::cerr << \": \" << res << \"\\n\";*/\n+        std::cerr << \": \" << res.can_be_true << \"\\n\";*/\n \n         return res;\n     });\n@@ -1112,10 +1112,20 @@ std::optional<Range> KeyCondition::applyMonotonicFunctionsChainToRange(\n             return {};\n         }\n \n+        /// If we apply function to open interval, we can get empty intervals in result.\n+        /// E.g. for ('2020-01-03', '2020-01-20') after applying 'toYYYYMM' we will get ('202001', '202001').\n+        /// To avoid this we make range left and right included.\n         if (!key_range.left.isNull())\n+        {\n             key_range.left = applyFunction(func, current_type, key_range.left);\n+            key_range.left_included = true;\n+        }\n+\n         if (!key_range.right.isNull())\n+        {\n             key_range.right = applyFunction(func, current_type, key_range.right);\n+            key_range.right_included = true;\n+        }\n \n         current_type = func->getReturnType();\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01418_index_analysis_bug.reference b/tests/queries/0_stateless/01418_index_analysis_bug.reference\nnew file mode 100644\nindex 000000000000..54a57d63d564\n--- /dev/null\n+++ b/tests/queries/0_stateless/01418_index_analysis_bug.reference\n@@ -0,0 +1,24 @@\n+2020-07-03\t706\n+2020-07-04\t695\n+2020-07-05\t726\n+2020-07-06\t686\n+2020-07-07\t715\n+2020-07-08\t706\n+2020-07-09\t695\n+2020-07-10\t726\n+2020-07-11\t686\n+2020-07-12\t715\n+2020-07-13\t706\n+2020-07-14\t695\n+2020-07-15\t726\n+2020-07-16\t686\n+2020-07-17\t715\n+2020-07-18\t706\n+2020-07-19\t695\n+2020-07-20\t726\n+2020-07-21\t686\n+2020-07-22\t715\n+2020-07-23\t706\n+2020-07-24\t695\n+2020-07-25\t726\n+2\ndiff --git a/tests/queries/0_stateless/01418_index_analysis_bug.sql b/tests/queries/0_stateless/01418_index_analysis_bug.sql\nnew file mode 100644\nindex 000000000000..c5033ac7d96e\n--- /dev/null\n+++ b/tests/queries/0_stateless/01418_index_analysis_bug.sql\n@@ -0,0 +1,43 @@\n+DROP TABLE IF EXISTS mytable_local;\n+\n+CREATE TABLE mytable_local (\n+    created          DateTime,\n+    eventday         Date,\n+    user_id          UInt32\n+)\n+ENGINE = MergeTree()\n+PARTITION BY toYYYYMM(eventday)\n+ORDER BY (eventday, user_id);\n+\n+INSERT INTO mytable_local SELECT \n+    toDateTime('2020-06-01 00:00:00') + toIntervalMinute(number) AS created,\n+    toDate(created) AS eventday,\n+    if((number % 100) > 50, 742522, number % 32141) AS user_id\n+FROM numbers(100000);\n+\n+SELECT \n+    eventday,\n+    count(*)\n+FROM mytable_local\n+WHERE (toYYYYMM(eventday) = 202007) AND (user_id = 742522) AND (eventday >= '2020-07-03') AND (eventday <= '2020-07-25')\n+GROUP BY eventday\n+ORDER BY eventday;\n+\n+DROP TABLE mytable_local;\n+DROP TABLE IF EXISTS table_float;\n+\n+CREATE TABLE table_float\n+(\n+    f Float64,\n+    u UInt32\n+)\n+ENGINE = MergeTree\n+ORDER BY (f, u);\n+\n+INSERT INTO table_float VALUES (1.2, 1) (1.3, 2) (1.4, 3) (1.5, 4);\n+\n+SELECT count()\n+FROM table_float\n+WHERE (toUInt64(f) = 1) AND (f >= 1.3) AND (f <= 1.4) AND (u > 0);\n+\n+DROP TABLE table_float;\n",
  "problem_statement": "Clickhouse incorrectly returning zero counts, when data does exist\n**Describe the bug**\r\nClickhouse is returning zero results when data does exist for the query.\r\nWhen we change the dates around slightly, data is returned, including data for the dates that previously said it had no rows for.\r\n\r\n**How to reproduce**\r\nClickhouse server version 20.5.2.7\r\nClickhouse clients tried: dbeaver and clickhouse-go both gave the same results.\r\n\r\nThe first query successfully returns results:\r\n```sql\r\nselect eventday, count(*) from mytable\r\nwhere toYYYYMM(eventday) = 202007\r\n  AND user_id = 742522\r\n  AND eventday >= '2020-07-01'\r\n  AND eventday <= '2020-07-25'\r\ngroup by eventday\r\norder by eventday;\r\n```\r\nResults:\r\n```\r\n2020-07-01\t8180782\r\n2020-07-02\t8654577\r\n2020-07-03\t8165184\r\n2020-07-04\t7315179\r\n2020-07-05\t8423453\r\n2020-07-06\t6658727\r\n...etc...\r\n```\r\n\r\nThe second query says there are no results / no rows:\r\n```sql\r\nselect eventday, count(*) from mytable\r\nwhere toYYYYMM(eventday) = 202007\r\n  AND user_id = 742522\r\n  AND eventday >= '2020-07-03'\r\n  AND eventday <= '2020-07-25'\r\ngroup by eventday\r\norder by eventday;\r\n```\r\n\r\nThe only change was that `eventday >= '2020-07-03'`.\r\nYou can see from the results above, that we do have data on every day.\r\nThis results are the same every time I run the two queries. We have paused all data ingestion while for a bit while we investigate this, so the counts are not changing either.\r\n\r\nThings that don't change the zero-row result:\r\n* Changing the dates to anything from 2020-07-02 to 2020-07-25.\r\n* Changing to a different user_id.\r\n* Using `toYYYYMM(eventday) >= 202007 AND toYYYYMM(eventday) <= 202007` instead of `toYYYYMM(eventday) = 202007`\r\n\r\nThings that do change the result, and give the correct results:\r\n* Removing the `user_id = 742522` filter.\r\n* Removing the `toYYYMM(eventday) = 202007` filter.\r\n* Remove either or both of the eventday filters (`eventday >= '2020-07-03' AND eventday <= '2020-07-25'`).\r\n* Change the dates on the eventday filters to be outside of July, or the include the 1st of July (such as `eventday <= '2020-08-25'`), even though the `toYYYYMM(eventday) = 202007` means the results would be the same.\r\n* Change the order by of the table to have user_id in front: `(user_id, eventday, eventhour, eventminute, sipHash64(toaddress), integrationkey)`\r\n\r\n\r\nHere is my create table statement:\r\n```sql\r\nCREATE TABLE IF NOT EXISTS mytable_local (\r\n    created          DateTime\r\n    eventday         Date\r\n    eventhour        DateTime\r\n    eventminute      DateTime\r\n    user_id          UInt32\r\n    toaddress        String\r\n    integrationkey   String\r\n    -- bunch of other fields\r\n)\r\n    ENGINE = ReplicatedMergeTree('/clickhouse/tables/{shard}/mydb.mytable', '{replica}')\r\n    PARTITION BY toYYYYMM(eventday)\r\n    ORDER BY (eventday, eventhour, eventminute, user_id, sipHash64(toaddress), integrationkey)\r\n    TTL eventday TO VOLUME 'fast', eventday + toIntervalDay(93) TO VOLUME 'slow', eventday + toIntervalDay(732) DELETE\r\n    SAMPLE BY sipHash64(toaddress);\r\n\r\nCREATE TABLE IF NOT EXISTS mytable AS mytable_local ENGINE = Distributed(mycluster, mydb, mytable_local, rand());\r\n```\r\n\r\n**Expected behavior**\r\nThe first query clearly shows that data exists (and it does, as I put in data for every day), so I expect the second query to return those counts.\r\n\r\n**Error message and/or stacktrace**\r\nNo error messages were returned by the dbeaver client or the golang driver.\r\nI have a colleague confirm he was seeing the same thing from his computer, and he was using the clickhouse client docker container.\r\n\nStrange results when using the same field 2 times in a where clause\n**Describe the unexpected behaviour**\r\n\r\nNot sure if it is a bug but we encounter a very strange issue when using the same field 2 times in a where clause.\r\nBasically : field = <> and toYear(field)= <>\r\n\r\n**How to reproduce**\r\n* Clickhouse 20.5.2.7\r\n\r\n\r\nCreate table statement :\r\n```\r\nDROP TABLE IF EXISTS datasources.cal_pace_strange2;\r\nCREATE TABLE datasources.cal_pace_strange2\r\n(\r\n    `htl_id` UInt32,\r\n    `stay_date` Date,\r\n    `snpdate` Date,\r\n    `leadtime` String,\r\n    `los` String,\r\n    `mkt_id` String,\r\n    `sob_id` String,\r\n    `res_status_id` String,\r\n    `rt_id` String,\r\n    `cur` String,\r\n    `rns` Decimal(9, 4),\r\n    `arrivals` Decimal(9, 4),\r\n    `departures` Decimal(9, 4),\r\n    `adults` Decimal(9, 4),\r\n    `children` Decimal(9, 4),\r\n    `rm_rev` Decimal(18, 10),\r\n    `fd_rev` Decimal(18, 10),\r\n    `oth_rev` Decimal(18, 10),\r\n    `tot_rev` Decimal(18, 10)\r\n\r\n)\r\n    ENGINE = MergeTree()\r\n        PARTITION BY toYYYYMM(snpdate)\r\n        ORDER BY (htl_id, stay_date, snpdate)\r\n        SETTINGS index_granularity = 8192;\r\n```\r\n\r\nLoad the data using the attached SQL inserts.\r\n\r\n[data_bug_clickhouse.txt](https://github.com/ClickHouse/ClickHouse/files/4903808/data_bug_clickhouse.txt)\r\n\r\n\r\nThis query returns 0 results :\r\n\r\n`select * from cal_pace_strange2 where snpdate='2020-06-09' and htl_id=66 and stay_date='2020-10-02' and toYear(stay_date) = 2020;`\r\n\r\nThis one return the correct results :\r\n\r\n`select * from cal_pace_strange2 where snpdate='2020-06-09' and htl_id=66 and stay_date='2020-10-02'`\r\n\r\nSame behavior occurs in 20.4.3 and 20.4.4\r\n\r\nExpected behavior :\r\n\r\nBoth queries should return the same results.\r\n\r\n\r\n\r\n\n",
  "hints_text": "Thank you for your report!\r\n\r\nCan you please provide the full results of both queries run over `mytable_local` - separately for 5-10 hosts of your cluster.\nReproduces:\r\n```sql\r\nCREATE TABLE IF NOT EXISTS mytable_local (\r\n    created          DateTime,\r\n    eventday         Date,\r\n    eventhour        DateTime,\r\n    eventminute      DateTime,\r\n    user_id          UInt32,\r\n    toaddress        String,\r\n    integrationkey   String\r\n)\r\nENGINE = MergeTree()\r\nPARTITION BY toYYYYMM(eventday)\r\nORDER BY (eventday, eventhour, eventminute, user_id, sipHash64(toaddress), integrationkey)\r\nSAMPLE BY sipHash64(toaddress);\r\n\r\n\r\nINSERT INTO mytable_local\r\nSELECT \r\ntoDateTime('2020-06-01 00:00:00') + interval number minute as created,\r\ntoDate(created) as eventday,\r\ntoStartOfHour(created) as eventhour,\r\ntoStartOfMinute(created) as eventminute,\r\nif(rand()%100 > 50, 742522, rand()) as user_id,\r\n'' as toaddress,\r\n'' as integrationkey\r\nFROM numbers(100000);\r\n\r\n\r\n-- this works \r\n\r\nselect eventday, count(*) from mytable_local\r\nwhere toYYYYMM(eventday) = 202007\r\n  AND user_id = 742522\r\n  AND eventday >= '2020-07-01'\r\n  AND eventday <= '2020-07-25'\r\ngroup by eventday\r\norder by eventday;\r\n\r\n\r\n-- this return empty result \r\n\r\nselect eventday, count(*) from mytable_local\r\nwhere toYYYYMM(eventday) = 202007\r\n  AND user_id = 742522\r\n  AND eventday >= '2020-07-03'\r\n  AND eventday <= '2020-07-25'\r\ngroup by eventday\r\norder by eventday;\r\n\r\n```\nI don't have access to the individual clickhouse hosts, so I'll just run it once against local and it will give me a random one.\r\n\r\nFor the sake of brevity, I've edited the dates, as it gives the same problem.\r\nQuery with first of month:\r\n```sql\r\nselect eventday, count(*) from mytable\r\nwhere toYYYYMM(eventday) = 202007\r\n  AND user_id = 742522\r\n  AND eventday >= '2020-07-01'\r\n  AND eventday <= '2020-07-04'\r\ngroup by eventday\r\norder by eventday;\r\n```\r\nResult:\r\n```\r\n2020-07-01\t3161082\r\n2020-07-02\t3367218\r\n2020-07-03\t3271356\r\n2020-07-04\t3066934\r\n```\r\n\r\nQuery without first of month:\r\n```sql\r\nselect eventday, count(*) from mytable\r\nwhere toYYYYMM(eventday) = 202007\r\n  AND user_id = 742522\r\n  AND eventday >= '2020-07-02'\r\n  AND eventday <= '2020-07-04'\r\ngroup by eventday\r\norder by eventday;\r\n```\r\nResult:\r\n`no counts / nothing`\r\n\r\nLocal query with first of month:\r\n```sql\r\nselect eventday, count(*) from mytable_local\r\nwhere toYYYYMM(eventday) = 202007\r\n  AND user_id = 742522\r\n  AND eventday >= '2020-07-01'\r\n  AND eventday <= '2020-07-04'\r\ngroup by eventday\r\norder by eventday;\r\n```\r\nResult:\r\n```\r\n2020-07-01\t262716\r\n2020-07-02\t280102\r\n2020-07-03\t272856\r\n2020-07-04\t254963\r\n```\r\n\r\nLocal query without first of month:\r\n```sql\r\nselect eventday, count(*) from mytable_local\r\nwhere toYYYYMM(eventday) = 202007\r\n  AND user_id = 742522\r\n  AND eventday >= '2020-07-02'\r\n  AND eventday <= '2020-07-04'\r\ngroup by eventday\r\norder by eventday;\r\n```\r\nResult:\r\n`no counts / nothing`\r\n\nThat seems very similar to https://github.com/ClickHouse/ClickHouse/issues/12406 \r\n\r\nSetting higher priority to raise attention, as that reproduces, affects core functionality, and leads to silent & wrong query results.\nthank you!\nThe issue reproduces.",
  "created_at": "2020-07-29T16:12:55Z",
  "modified_files": [
    "src/Storages/MergeTree/KeyCondition.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01418_index_analysis_bug.reference",
    "b/tests/queries/0_stateless/01418_index_analysis_bug.sql"
  ]
}