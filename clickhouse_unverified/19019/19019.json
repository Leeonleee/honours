{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 19019,
  "instance_id": "ClickHouse__ClickHouse-19019",
  "issue_numbers": [
    "17875"
  ],
  "base_commit": "297a16407a9cbde95db523a21ac4a9c3115de18a",
  "patch": "diff --git a/src/AggregateFunctions/AggregateFunctionGroupArray.h b/src/AggregateFunctions/AggregateFunctionGroupArray.h\nindex e8c4d70ea263..27a8cf0b1eec 100644\n--- a/src/AggregateFunctions/AggregateFunctionGroupArray.h\n+++ b/src/AggregateFunctions/AggregateFunctionGroupArray.h\n@@ -112,7 +112,6 @@ class GroupArrayNumericImpl final\n {\n     using Data = GroupArrayNumericData<T, Trait::sampler != Sampler::NONE>;\n     static constexpr bool limit_num_elems = Trait::has_limit;\n-    DataTypePtr & data_type;\n     UInt64 max_elems;\n     UInt64 seed;\n \n@@ -121,7 +120,6 @@ class GroupArrayNumericImpl final\n         const DataTypePtr & data_type_, UInt64 max_elems_ = std::numeric_limits<UInt64>::max(), UInt64 seed_ = 123456)\n         : IAggregateFunctionDataHelper<GroupArrayNumericData<T, Trait::sampler != Sampler::NONE>, GroupArrayNumericImpl<T, Trait>>(\n             {data_type_}, {})\n-        , data_type(this->argument_types[0])\n         , max_elems(max_elems_)\n         , seed(seed_)\n     {\n@@ -129,7 +127,7 @@ class GroupArrayNumericImpl final\n \n     String getName() const override { return getNameByTrait<Trait>(); }\n \n-    DataTypePtr getReturnType() const override { return std::make_shared<DataTypeArray>(data_type); }\n+    DataTypePtr getReturnType() const override { return std::make_shared<DataTypeArray>(this->argument_types[0]); }\n \n     void insert(Data & a, const T & v, Arena * arena) const\n     {\ndiff --git a/src/AggregateFunctions/AggregateFunctionGroupUniqArray.h b/src/AggregateFunctions/AggregateFunctionGroupUniqArray.h\nindex 2ee9d0f6e1ca..1dc7dcde9c3e 100644\n--- a/src/AggregateFunctions/AggregateFunctionGroupUniqArray.h\n+++ b/src/AggregateFunctions/AggregateFunctionGroupUniqArray.h\n@@ -56,7 +56,7 @@ class AggregateFunctionGroupUniqArray\n \n     DataTypePtr getReturnType() const override\n     {\n-        return std::make_shared<DataTypeArray>(std::make_shared<DataTypeNumber<T>>());\n+        return std::make_shared<DataTypeArray>(this->argument_types[0]);\n     }\n \n     void add(AggregateDataPtr place, const IColumn ** columns, size_t row_num, Arena *) const override\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01651_group_uniq_array_enum.reference b/tests/queries/0_stateless/01651_group_uniq_array_enum.reference\nnew file mode 100644\nindex 000000000000..ba4401b6afdf\n--- /dev/null\n+++ b/tests/queries/0_stateless/01651_group_uniq_array_enum.reference\n@@ -0,0 +1,3 @@\n+['Hello','World','\u0423\u043f\u044f\u0447\u043a\u0430']\n+['Hello','World','World','\u0423\u043f\u044f\u0447\u043a\u0430','\u0423\u043f\u044f\u0447\u043a\u0430','\u0423\u043f\u044f\u0447\u043a\u0430']\n+['world','hello']\tArray(Enum8(\\'world\\' = 0, \\'hello\\' = 1))\t['world','hello']\tArray(Enum8(\\'world\\' = 0, \\'hello\\' = 1))\ndiff --git a/tests/queries/0_stateless/01651_group_uniq_array_enum.sql b/tests/queries/0_stateless/01651_group_uniq_array_enum.sql\nnew file mode 100644\nindex 000000000000..19de51f96816\n--- /dev/null\n+++ b/tests/queries/0_stateless/01651_group_uniq_array_enum.sql\n@@ -0,0 +1,13 @@\n+SELECT arraySort(groupUniqArray(x)) FROM (SELECT CAST(arrayJoin([1, 2, 3, 2, 3, 3]) AS Enum('Hello' = 1, 'World' = 2, '\u0423\u043f\u044f\u0447\u043a\u0430' = 3)) AS x);\n+SELECT arraySort(groupArray(x)) FROM (SELECT CAST(arrayJoin([1, 2, 3, 2, 3, 3]) AS Enum('Hello' = 1, 'World' = 2, '\u0423\u043f\u044f\u0447\u043a\u0430' = 3)) AS x);\n+\n+SELECT\n+    arraySort(groupUniqArray(val)) AS uniq,\n+    toTypeName(uniq),\n+    arraySort(groupArray(val)) AS arr,\n+    toTypeName(arr)\n+FROM\n+(\n+    SELECT CAST(number % 2, 'Enum(\\'hello\\' = 1, \\'world\\' = 0)') AS val\n+    FROM numbers(2)\n+);\n",
  "problem_statement": "groupUniqArray + Enum data type returns Int instead of Enum\n**How to reproduce**\r\nClickhouse version 20.11.5.18, 20.8.7.15, 20.3.19\r\n```\r\nSELECT\r\n    groupUniqArray(val) AS uniq,\r\n    toTypeName(uniq),\r\n    groupArray(val) AS arr,\r\n    toTypeName(arr)\r\nFROM\r\n(\r\n    SELECT CAST(number % 2, 'Enum(\\'hello\\' = 1, \\'world\\' = 0)') AS val\r\n    FROM numbers(2)\r\n)\r\n\r\nQuery id: d4657f27-c8bd-4174-9947-c6c48d0222d5\r\n\r\n\u250c\u2500uniq\u2500\u2500\u252c\u2500toTypeName(groupUniqArray(val))\u2500\u252c\u2500arr\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500toTypeName(groupArray(val))\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 [0,1] \u2502 Array(Int8)                     \u2502 ['world','hello'] \u2502 Array(Enum8('world' = 0, 'hello' = 1)) \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\n",
  "hints_text": "``` sql\r\nlocalhost :) select arrayReduce('groupUniqArray', ['world','hello','hello']);\r\n\r\nSELECT arrayReduce('groupUniqArray', ['world', 'hello', 'hello'])\r\n\r\n\u250c\u2500arrayReduce('groupUniqArray', ['world', 'hello', 'hello'])\u2500\u2510\r\n\u2502 ['world','hello']                                          \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 0.004 sec.\r\n\r\nlocalhost :) select groupUniqArray( ['world','hello','hello']);\r\n\r\nSELECT groupUniqArray(['world', 'hello', 'hello'])\r\n\r\n\u250c\u2500groupUniqArray(['world', 'hello', 'hello'])\u2500\u2510\r\n\u2502 [['world','hello','hello']]                 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nlocalhost :) select arrayDistinct(['world','hello','hello']);\r\n\r\nSELECT arrayDistinct(['world', 'hello', 'hello'])\r\n\r\n\u250c\u2500arrayDistinct(['world', 'hello', 'hello'])\u2500\u2510\r\n\u2502 ['world','hello']                          \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n```\n> localhost :) select groupUniqArray( ['world','hello','hello']);\r\n\r\nThat expected result, it would choose unique arrays being passed to it.\r\n\r\nRight way of doing that query is:\r\n```\r\nselect groupUniqArrayArray( ['world','hello','hello']);\r\n\r\nSELECT groupUniqArrayArray(['world', 'hello', 'hello'])\r\n\r\n\u250c\u2500groupUniqArrayArray(['world', 'hello', 'hello'])\u2500\u2510\r\n\u2502 ['world','hello']                                \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n```\r\n\n-Distinct combinator works correctly.\r\n\r\n```\r\nSELECT\r\n    groupArrayDistinct(val) AS uniq,\r\n    toTypeName(uniq),\r\n    groupArray(val) AS arr,\r\n    toTypeName(arr)\r\nFROM\r\n(\r\n    SELECT CAST(number % 2, 'Enum(\\'hello\\' = 1, \\'world\\' = 0)') AS val\r\n    FROM numbers(2)\r\n)\r\n\r\nQuery id: b2301bcc-9f35-488a-836e-025236593775\r\n\r\n\u250c\u2500uniq\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500toTypeName(groupArrayDistinct(val))\u2500\u2500\u2500\u2500\u252c\u2500arr\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500toTypeName(groupArray(val))\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 ['world','hello'] \u2502 Array(Enum8('world' = 0, 'hello' = 1)) \u2502 ['world','hello'] \u2502 Array(Enum8('world' = 0, 'hello' = 1)) \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```",
  "created_at": "2021-01-13T18:14:58Z"
}