diff --git a/tests/queries/0_stateless/01321_aggregate_functions_of_group_by_keys.reference b/tests/queries/0_stateless/01321_aggregate_functions_of_group_by_keys.reference
index 92d6e5c37e65..5eaaf24208e4 100644
--- a/tests/queries/0_stateless/01321_aggregate_functions_of_group_by_keys.reference
+++ b/tests/queries/0_stateless/01321_aggregate_functions_of_group_by_keys.reference
@@ -55,8 +55,8 @@ GROUP BY
     number % 2,
     number % 3
 ORDER BY
-    min(number % 2) AS a ASC,
-    max(number % 3) AS b ASC
+    a ASC,
+    b ASC
 SELECT
     number % 2 AS a,
     number % 3 AS b
@@ -65,14 +65,14 @@ GROUP BY
     number % 2,
     number % 3
 ORDER BY
-    any(number % 2) AS a ASC,
-    anyLast(number % 3) AS b ASC
+    a ASC,
+    b ASC
 SELECT (number % 5) * (number % 7) AS a
 FROM numbers(10000000)
 GROUP BY
     number % 7,
     number % 5
-ORDER BY max((number % 5) * (number % 7)) AS a ASC
+ORDER BY a ASC
 SELECT foo
 FROM 
 (
diff --git a/tests/queries/0_stateless/01511_different_expression_with_same_alias.reference b/tests/queries/0_stateless/01511_different_expression_with_same_alias.reference
new file mode 100644
index 000000000000..8b1acc12b635
--- /dev/null
+++ b/tests/queries/0_stateless/01511_different_expression_with_same_alias.reference
@@ -0,0 +1,10 @@
+0
+1
+2
+3
+4
+5
+6
+7
+8
+9
diff --git a/tests/queries/0_stateless/01511_different_expression_with_same_alias.sql b/tests/queries/0_stateless/01511_different_expression_with_same_alias.sql
new file mode 100644
index 000000000000..9d5d186b85af
--- /dev/null
+++ b/tests/queries/0_stateless/01511_different_expression_with_same_alias.sql
@@ -0,0 +1,10 @@
+DROP TABLE IF EXISTS repro_hits;
+
+CREATE TABLE repro_hits ( date Date, metric Float64) ENGINE = MergeTree() ORDER BY date;
+
+-- From https://github.com/ClickHouse/ClickHouse/issues/12513#issue-657202535
+SELECT date as period, 1 as having_check, min(date) as period_start, addDays(max(date), 1) as period_end, dateDiff('second', period_start, period_end) as total_duration, sum(metric) as metric_ FROM repro_hits GROUP BY period HAVING having_check != -1;
+
+SELECT min(number) as min_number FROM numbers(10) GROUP BY number HAVING 1 ORDER BY min_number;
+
+DROP TABLE IF EXISTS repro_hits;
