{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 15886,
  "instance_id": "ClickHouse__ClickHouse-15886",
  "issue_numbers": [
    "12513"
  ],
  "base_commit": "4798234002f84368566811f475755b972c85f781",
  "patch": "diff --git a/src/Interpreters/AggregateFunctionOfGroupByKeysVisitor.h b/src/Interpreters/AggregateFunctionOfGroupByKeysVisitor.h\nindex cac3e0432dcd..6b903ec45cf5 100644\n--- a/src/Interpreters/AggregateFunctionOfGroupByKeysVisitor.h\n+++ b/src/Interpreters/AggregateFunctionOfGroupByKeysVisitor.h\n@@ -10,6 +10,7 @@\n #include <Parsers/ASTTablesInSelectQuery.h>\n #include <Parsers/IAST.h>\n #include <Common/typeid_cast.h>\n+#include <Parsers/ASTSubquery.h>\n \n namespace DB\n {\n@@ -86,7 +87,9 @@ class SelectAggregateFunctionOfGroupByKeysMatcher\n \n     static bool needChildVisit(const ASTPtr & node, const ASTPtr &)\n     {\n-        return !(node->as<ASTFunction>());\n+        /// Don't descent into table functions and subqueries and special case for ArrayJoin.\n+        return !node->as<ASTSubquery>() &&\n+               !(node->as<ASTTableExpression>() || node->as<ASTSelectWithUnionQuery>() || node->as<ASTArrayJoin>());\n     }\n \n     static void visit(ASTPtr & ast, Data & data)\ndiff --git a/src/Interpreters/TreeOptimizer.cpp b/src/Interpreters/TreeOptimizer.cpp\nindex bdc506b0cc6b..034340da87be 100644\n--- a/src/Interpreters/TreeOptimizer.cpp\n+++ b/src/Interpreters/TreeOptimizer.cpp\n@@ -269,7 +269,7 @@ void optimizeGroupByFunctionKeys(ASTSelectQuery * select_query)\n }\n \n /// Eliminates min/max/any-aggregators of functions of GROUP BY keys\n-void optimizeAggregateFunctionsOfGroupByKeys(ASTSelectQuery * select_query)\n+void optimizeAggregateFunctionsOfGroupByKeys(ASTSelectQuery * select_query, ASTPtr & node)\n {\n     if (!select_query->groupBy())\n         return;\n@@ -279,10 +279,8 @@ void optimizeAggregateFunctionsOfGroupByKeys(ASTSelectQuery * select_query)\n \n     GroupByKeysInfo group_by_keys_data = getGroupByKeysInfo(group_keys);\n \n-    auto select = select_query->select();\n-\n     SelectAggregateFunctionOfGroupByKeysVisitor::Data visitor_data{group_by_keys_data.key_names};\n-    SelectAggregateFunctionOfGroupByKeysVisitor(visitor_data).visit(select);\n+    SelectAggregateFunctionOfGroupByKeysVisitor(visitor_data).visit(node);\n }\n \n /// Remove duplicate items from ORDER BY.\n@@ -647,7 +645,7 @@ void TreeOptimizer::apply(ASTPtr & query, Aliases & aliases, const NameSet & sou\n \n     /// Eliminate min/max/any aggregators of functions of GROUP BY keys\n     if (settings.optimize_aggregators_of_group_by_keys)\n-        optimizeAggregateFunctionsOfGroupByKeys(select_query);\n+        optimizeAggregateFunctionsOfGroupByKeys(select_query, query);\n \n     /// Remove duplicate items from ORDER BY.\n     optimizeDuplicatesInOrderBy(select_query);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01321_aggregate_functions_of_group_by_keys.reference b/tests/queries/0_stateless/01321_aggregate_functions_of_group_by_keys.reference\nindex 92d6e5c37e65..5eaaf24208e4 100644\n--- a/tests/queries/0_stateless/01321_aggregate_functions_of_group_by_keys.reference\n+++ b/tests/queries/0_stateless/01321_aggregate_functions_of_group_by_keys.reference\n@@ -55,8 +55,8 @@ GROUP BY\n     number % 2,\n     number % 3\n ORDER BY\n-    min(number % 2) AS a ASC,\n-    max(number % 3) AS b ASC\n+    a ASC,\n+    b ASC\n SELECT\n     number % 2 AS a,\n     number % 3 AS b\n@@ -65,14 +65,14 @@ GROUP BY\n     number % 2,\n     number % 3\n ORDER BY\n-    any(number % 2) AS a ASC,\n-    anyLast(number % 3) AS b ASC\n+    a ASC,\n+    b ASC\n SELECT (number % 5) * (number % 7) AS a\n FROM numbers(10000000)\n GROUP BY\n     number % 7,\n     number % 5\n-ORDER BY max((number % 5) * (number % 7)) AS a ASC\n+ORDER BY a ASC\n SELECT foo\n FROM \n (\ndiff --git a/tests/queries/0_stateless/01511_different_expression_with_same_alias.reference b/tests/queries/0_stateless/01511_different_expression_with_same_alias.reference\nnew file mode 100644\nindex 000000000000..8b1acc12b635\n--- /dev/null\n+++ b/tests/queries/0_stateless/01511_different_expression_with_same_alias.reference\n@@ -0,0 +1,10 @@\n+0\n+1\n+2\n+3\n+4\n+5\n+6\n+7\n+8\n+9\ndiff --git a/tests/queries/0_stateless/01511_different_expression_with_same_alias.sql b/tests/queries/0_stateless/01511_different_expression_with_same_alias.sql\nnew file mode 100644\nindex 000000000000..9d5d186b85af\n--- /dev/null\n+++ b/tests/queries/0_stateless/01511_different_expression_with_same_alias.sql\n@@ -0,0 +1,10 @@\n+DROP TABLE IF EXISTS repro_hits;\n+\n+CREATE TABLE repro_hits ( date Date, metric Float64) ENGINE = MergeTree() ORDER BY date;\n+\n+-- From https://github.com/ClickHouse/ClickHouse/issues/12513#issue-657202535\n+SELECT date as period, 1 as having_check, min(date) as period_start, addDays(max(date), 1) as period_end, dateDiff('second', period_start, period_end) as total_duration, sum(metric) as metric_ FROM repro_hits GROUP BY period HAVING having_check != -1;\n+\n+SELECT min(number) as min_number FROM numbers(10) GROUP BY number HAVING 1 ORDER BY min_number;\n+\n+DROP TABLE IF EXISTS repro_hits;\n",
  "problem_statement": "Regression: \"Different expressions with the same alias\" on 20.5 with enable_optimize_predicate_expression\n**How to reproduce**\r\n\r\nCH version: `20.5.2 revision 54435` (latest on `apt` at the moment). Cannot reproduce on `20.4.5`, so it's a regression.\r\n\r\nTable:\r\n\r\n```sql\r\ncreate table repro_hits (\r\n    date Date,\r\n    metric Float64\r\n) engine=MergeTree() order by date\r\n```\r\n\r\nQuery:\r\n\r\n```sql\r\nSELECT\r\n    date as period,\r\n    1 as having_check,\r\n    min(date) as period_start,\r\n    addDays(max(date), 1) as period_end,\r\n    dateDiff('second', period_start, period_end) as total_duration,\r\n    sum(metric) as metric_\r\nFROM repro_hits\r\nGROUP BY period\r\nhaving having_check != -1\r\n```\r\n\r\n**Error message and/or stacktrace**\r\n```\r\nReceived exception from server (version 20.5.2):\r\nCode: 179. DB::Exception: Received from localhost:9000. DB::Exception: Different expressions with the same alias period_start:\r\nmin(date) AS period_start\r\nand\r\ndate AS period_start\r\n.\r\n```\r\n\r\nThe error goes away if I opt out of optimization with `SETTINGS enable_optimize_predicate_expression = 0`.\n",
  "hints_text": "Still reproducible on 20.6.3.\nStill reproducible on 20.7.2.\nStill reproducible on 20.8.2.\nStill reproducible on 20.9.2.\r\n\r\n\n@zhang2014  @4ertus2 can you take a look on that? \nStateless example:\r\n```\r\nSELECT min(number) as min_number\r\nFROM numbers(10)\r\nGROUP BY number\r\nhaving 1\r\nORDER BY min_number\r\n```\nRegression, not fixed for 3 months. Increasing priority. \nSorry, I don't know why I missed it. I will try to fix it.\nMinimal example:\r\n```\r\nSET enable_optimize_predicate_expression = 0;\r\nSELECT min(number) as min_number FROM numbers(10) WHERE 1 GROUP BY number ORDER BY min_number;\r\n```",
  "created_at": "2020-10-13T05:51:00Z"
}