diff --git a/src/Interpreters/AggregateFunctionOfGroupByKeysVisitor.h b/src/Interpreters/AggregateFunctionOfGroupByKeysVisitor.h
index cac3e0432dcd..6b903ec45cf5 100644
--- a/src/Interpreters/AggregateFunctionOfGroupByKeysVisitor.h
+++ b/src/Interpreters/AggregateFunctionOfGroupByKeysVisitor.h
@@ -10,6 +10,7 @@
 #include <Parsers/ASTTablesInSelectQuery.h>
 #include <Parsers/IAST.h>
 #include <Common/typeid_cast.h>
+#include <Parsers/ASTSubquery.h>
 
 namespace DB
 {
@@ -86,7 +87,9 @@ class SelectAggregateFunctionOfGroupByKeysMatcher
 
     static bool needChildVisit(const ASTPtr & node, const ASTPtr &)
     {
-        return !(node->as<ASTFunction>());
+        /// Don't descent into table functions and subqueries and special case for ArrayJoin.
+        return !node->as<ASTSubquery>() &&
+               !(node->as<ASTTableExpression>() || node->as<ASTSelectWithUnionQuery>() || node->as<ASTArrayJoin>());
     }
 
     static void visit(ASTPtr & ast, Data & data)
diff --git a/src/Interpreters/TreeOptimizer.cpp b/src/Interpreters/TreeOptimizer.cpp
index bdc506b0cc6b..034340da87be 100644
--- a/src/Interpreters/TreeOptimizer.cpp
+++ b/src/Interpreters/TreeOptimizer.cpp
@@ -269,7 +269,7 @@ void optimizeGroupByFunctionKeys(ASTSelectQuery * select_query)
 }
 
 /// Eliminates min/max/any-aggregators of functions of GROUP BY keys
-void optimizeAggregateFunctionsOfGroupByKeys(ASTSelectQuery * select_query)
+void optimizeAggregateFunctionsOfGroupByKeys(ASTSelectQuery * select_query, ASTPtr & node)
 {
     if (!select_query->groupBy())
         return;
@@ -279,10 +279,8 @@ void optimizeAggregateFunctionsOfGroupByKeys(ASTSelectQuery * select_query)
 
     GroupByKeysInfo group_by_keys_data = getGroupByKeysInfo(group_keys);
 
-    auto select = select_query->select();
-
     SelectAggregateFunctionOfGroupByKeysVisitor::Data visitor_data{group_by_keys_data.key_names};
-    SelectAggregateFunctionOfGroupByKeysVisitor(visitor_data).visit(select);
+    SelectAggregateFunctionOfGroupByKeysVisitor(visitor_data).visit(node);
 }
 
 /// Remove duplicate items from ORDER BY.
@@ -647,7 +645,7 @@ void TreeOptimizer::apply(ASTPtr & query, Aliases & aliases, const NameSet & sou
 
     /// Eliminate min/max/any aggregators of functions of GROUP BY keys
     if (settings.optimize_aggregators_of_group_by_keys)
-        optimizeAggregateFunctionsOfGroupByKeys(select_query);
+        optimizeAggregateFunctionsOfGroupByKeys(select_query, query);
 
     /// Remove duplicate items from ORDER BY.
     optimizeDuplicatesInOrderBy(select_query);
