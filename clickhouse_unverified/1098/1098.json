{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 1098,
  "instance_id": "ClickHouse__ClickHouse-1098",
  "issue_numbers": [
    "366"
  ],
  "base_commit": "c305b778710b58bebd3b173c72886fed75c149f1",
  "patch": "diff --git a/dbms/src/DataTypes/DataTypeDateTime.cpp b/dbms/src/DataTypes/DataTypeDateTime.cpp\nindex a74918f08b6e..fe6ccf814390 100644\n--- a/dbms/src/DataTypes/DataTypeDateTime.cpp\n+++ b/dbms/src/DataTypes/DataTypeDateTime.cpp\n@@ -72,9 +72,9 @@ void DataTypeDateTime::serializeTextCSV(const IColumn & column, size_t row_num,\n \n void DataTypeDateTime::deserializeTextCSV(IColumn & column, ReadBuffer & istr, const char delimiter) const\n {\n-    LocalDateTime value;\n-    readCSV(value, istr);\n-    static_cast<ColumnUInt32 &>(column).getData().push_back(static_cast<time_t>(value));\n+    time_t x;\n+    readCSVSimple(x, istr, readDateTimeText);\n+    static_cast<ColumnUInt32 &>(column).getData().push_back(x);\n }\n \n void registerDataTypeDateTime(DataTypeFactory & factory)\ndiff --git a/dbms/src/IO/ReadHelpers.h b/dbms/src/IO/ReadHelpers.h\nindex 544f4e25c7b2..1c4e93bbd062 100644\n--- a/dbms/src/IO/ReadHelpers.h\n+++ b/dbms/src/IO/ReadHelpers.h\n@@ -629,7 +629,7 @@ void readDateTimeTextFallback(time_t & datetime, ReadBuffer & buf, const DateLUT\n /** In YYYY-MM-DD hh:mm:ss format, according to specified time zone.\n   * As an exception, also supported parsing of unix timestamp in form of decimal number.\n   */\n-inline void readDateTimeText(time_t & datetime, ReadBuffer & buf, const DateLUTImpl & date_lut = DateLUT::instance())\n+inline void readDateTimeText(time_t & datetime, ReadBuffer & buf, const DateLUTImpl & date_lut)\n {\n     /** Read 10 characters, that could represent unix timestamp.\n       * Only unix timestamp of 5-10 characters is supported.\n@@ -666,6 +666,11 @@ inline void readDateTimeText(time_t & datetime, ReadBuffer & buf, const DateLUTI\n         readDateTimeTextFallback(datetime, buf, date_lut);\n }\n \n+inline void readDateTimeText(time_t & datetime, ReadBuffer & buf)\n+{\n+    readDateTimeText(datetime, buf, DateLUT::instance());\n+}\n+\n inline void readDateTimeText(LocalDateTime & datetime, ReadBuffer & buf)\n {\n     char s[19];\n@@ -767,7 +772,7 @@ inline void readDoubleQuoted(LocalDateTime & x, ReadBuffer & buf)\n \n /// CSV, for numbers, dates, datetimes: quotes are optional, no special escaping rules.\n template <typename T>\n-inline void readCSVSimple(T & x, ReadBuffer & buf)\n+inline void readCSVSimple(T & x, ReadBuffer & buf, void (*readText_)(T & x, ReadBuffer & buf) = readText)\n {\n     if (buf.eof())\n         throwReadAfterEOF();\n@@ -777,7 +782,7 @@ inline void readCSVSimple(T & x, ReadBuffer & buf)\n     if (maybe_quote == '\\'' || maybe_quote == '\\\"')\n         ++buf.position();\n \n-    readText(x, buf);\n+    readText_(x, buf);\n \n     if (maybe_quote == '\\'' || maybe_quote == '\\\"')\n         assertChar(maybe_quote, buf);\n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/00301_csv.reference b/dbms/tests/queries/0_stateless/00301_csv.reference\nindex d038fc8ac383..435eb0c87da2 100644\n--- a/dbms/tests/queries/0_stateless/00301_csv.reference\n+++ b/dbms/tests/queries/0_stateless/00301_csv.reference\n@@ -2,3 +2,7 @@ Hello, world\t123\t2016-01-01\n Hello, \"world\"\t456\t2016-01-02\n Hello \"world\"\t789\t2016-01-03\n Hello\\n world\t100\t2016-01-04\n+2016-01-01 01:02:03\t1\n+2016-01-02 01:02:03\t2\n+2017-08-15 13:15:01\t3\n+1970-01-02 06:46:39\t4\ndiff --git a/dbms/tests/queries/0_stateless/00301_csv.sh b/dbms/tests/queries/0_stateless/00301_csv.sh\nindex 37f59eba277c..8d1fe7055a2f 100755\n--- a/dbms/tests/queries/0_stateless/00301_csv.sh\n+++ b/dbms/tests/queries/0_stateless/00301_csv.sh\n@@ -11,3 +11,13 @@ Hello \"world\", 789 ,2016-01-03\n \n clickhouse-client --query=\"SELECT * FROM test.csv ORDER BY d\";\n clickhouse-client --query=\"DROP TABLE test.csv\";\n+\n+clickhouse-client --query=\"CREATE TABLE test.csv (t DateTime, s String) ENGINE = Memory\";\n+\n+echo '\"2016-01-01 01:02:03\",\"1\"\n+2016-01-02 01:02:03, \"2\"\n+1502792101,\"3\"\n+99999,\"4\"' | clickhouse-client --query=\"INSERT INTO test.csv FORMAT CSV\";\n+\n+clickhouse-client --query=\"SELECT * FROM test.csv ORDER BY s\";\n+clickhouse-client --query=\"DROP TABLE test.csv\";\n",
  "problem_statement": "Error when loading DateTime from CSV file\nI have problem with DateTime field when loading from CSV format.\r\nWhen I use Linux Timestamp 10 digits format, I've got error about length of the field, it seems that parser is expecting 19 chars as in YYYY-MM-DD hh:mm:ss.\r\n\r\nERROR: DateTime must be in YYYY-MM-DD hh:mm:ss or NNNNNNNNNN (unix timestamp, exactly 10 digits) format.\r\n\r\nIn documentation is stated:\r\nAs an exception, parsing DateTime is also supported in Unix timestamp format, if it consists of exactly 10 decimal digits. The result is not time zone-dependent. The formats YYYY-MM-DD hh:mm:ss and NNNNNNNNNN are differentiated automatically.\r\n\r\nIf I specify 10 digits + 9 trailing spaces as input field then parser works, but loaded data is not correct.\r\n\n",
  "hints_text": "@alexey-milovidov Such conversion (UInt -> DateTime) is supported inside queries. Should this conversion  be supported inside input formats?\nIt is already supported for TSV, but for somewhat reason doesn't work for CSV,\r\nand it works for Values format only through very indirect way.\r\n\r\nIt's better to make it work in all text formats.",
  "created_at": "2017-08-15T10:28:15Z",
  "modified_files": [
    "dbms/src/DataTypes/DataTypeDateTime.cpp",
    "dbms/src/IO/ReadHelpers.h"
  ],
  "modified_test_files": [
    "dbms/tests/queries/0_stateless/00301_csv.reference",
    "dbms/tests/queries/0_stateless/00301_csv.sh"
  ]
}