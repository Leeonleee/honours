{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 53492,
  "instance_id": "ClickHouse__ClickHouse-53492",
  "issue_numbers": [
    "53237",
    "53453"
  ],
  "base_commit": "2ca0e2e07dc91e3fec6b3098fb1389bb3aede567",
  "patch": "diff --git a/src/Storages/MergeTree/MergeTreeSplitPrewhereIntoReadSteps.cpp b/src/Storages/MergeTree/MergeTreeSplitPrewhereIntoReadSteps.cpp\nindex 7ca8983bfda6..f858cb958461 100644\n--- a/src/Storages/MergeTree/MergeTreeSplitPrewhereIntoReadSteps.cpp\n+++ b/src/Storages/MergeTree/MergeTreeSplitPrewhereIntoReadSteps.cpp\n@@ -53,9 +53,15 @@ struct DAGNodeRef\n \n /// Result name -> DAGNodeRef\n using OriginalToNewNodeMap = std::unordered_map<String, DAGNodeRef>;\n+using NodeNameToLastUsedStepMap = std::unordered_map<String, size_t>;\n \n /// Clones the part of original DAG responsible for computing the original_dag_node and adds it to the new DAG.\n-const ActionsDAG::Node & addClonedDAGToDAG(const ActionsDAG::Node * original_dag_node, ActionsDAGPtr new_dag, OriginalToNewNodeMap & node_remap)\n+const ActionsDAG::Node & addClonedDAGToDAG(\n+    size_t step,\n+    const ActionsDAG::Node * original_dag_node,\n+    ActionsDAGPtr new_dag,\n+    OriginalToNewNodeMap & node_remap,\n+    NodeNameToLastUsedStepMap & node_to_step_map)\n {\n     const String & node_name = original_dag_node->result_name;\n     /// Look for the node in the map of already known nodes\n@@ -72,6 +78,10 @@ const ActionsDAG::Node & addClonedDAGToDAG(const ActionsDAG::Node * original_dag\n             node_ref.dag->addOrReplaceInOutputs(*node_ref.node);\n             const auto & new_node = new_dag->addInput(node_ref.node->result_name, node_ref.node->result_type);\n             node_remap[node_name] = {new_dag, &new_node}; /// TODO: here we update the node reference. Is it always correct?\n+\n+            /// Remember the index of the last step which reuses this node.\n+            /// We cannot remove this node from the outputs before that step.\n+            node_to_step_map[node_name] = step;\n             return new_node;\n         }\n     }\n@@ -95,7 +105,7 @@ const ActionsDAG::Node & addClonedDAGToDAG(const ActionsDAG::Node * original_dag\n \n     if (original_dag_node->type == ActionsDAG::ActionType::ALIAS)\n     {\n-        const auto & alias_child = addClonedDAGToDAG(original_dag_node->children[0], new_dag, node_remap);\n+        const auto & alias_child = addClonedDAGToDAG(step, original_dag_node->children[0], new_dag, node_remap, node_to_step_map);\n         const auto & new_node = new_dag->addAlias(alias_child, original_dag_node->result_name);\n         node_remap[node_name] = {new_dag, &new_node};\n         return new_node;\n@@ -107,7 +117,7 @@ const ActionsDAG::Node & addClonedDAGToDAG(const ActionsDAG::Node * original_dag\n         ActionsDAG::NodeRawConstPtrs new_children;\n         for (const auto & child : original_dag_node->children)\n         {\n-            const auto & new_child = addClonedDAGToDAG(child, new_dag, node_remap);\n+            const auto & new_child = addClonedDAGToDAG(step, child, new_dag, node_remap, node_to_step_map);\n             new_children.push_back(&new_child);\n         }\n \n@@ -240,16 +250,18 @@ bool tryBuildPrewhereSteps(PrewhereInfoPtr prewhere_info, const ExpressionAction\n     std::vector<Step> steps;\n \n     OriginalToNewNodeMap node_remap;\n+    NodeNameToLastUsedStepMap node_to_step;\n \n-    for (const auto & condition_group : condition_groups)\n+    for (size_t step_index = 0; step_index < condition_groups.size(); ++step_index)\n     {\n+        const auto & condition_group = condition_groups[step_index];\n         ActionsDAGPtr step_dag = std::make_shared<ActionsDAG>();\n         String result_name;\n \n         std::vector<const ActionsDAG::Node *> new_condition_nodes;\n         for (const auto * node : condition_group)\n         {\n-            const auto & node_in_new_dag = addClonedDAGToDAG(node, step_dag, node_remap);\n+            const auto & node_in_new_dag = addClonedDAGToDAG(step_index, node, step_dag, node_remap, node_to_step);\n             new_condition_nodes.push_back(&node_in_new_dag);\n         }\n \n@@ -321,21 +333,24 @@ bool tryBuildPrewhereSteps(PrewhereInfoPtr prewhere_info, const ExpressionAction\n         }\n         else\n         {\n-            const auto & node_in_new_dag = addClonedDAGToDAG(output, steps.back().actions, node_remap);\n+            const auto & node_in_new_dag = addClonedDAGToDAG(steps.size() - 1, output, steps.back().actions, node_remap, node_to_step);\n             steps.back().actions->addOrReplaceInOutputs(node_in_new_dag);\n         }\n     }\n \n     /// 9. Build PrewhereExprInfo\n     {\n-        for (const auto & step : steps)\n+        for (size_t step_index = 0; step_index < steps.size(); ++step_index)\n         {\n+            const auto & step = steps[step_index];\n             PrewhereExprStep new_step\n             {\n                 .type = PrewhereExprStep::Filter,\n                 .actions = std::make_shared<ExpressionActions>(step.actions, actions_settings),\n                 .filter_column_name = step.column_name,\n-                .remove_filter_column = !all_output_names.contains(step.column_name), /// Don't remove if it's in the list of original outputs\n+                /// Don't remove if it's in the list of original outputs\n+                .remove_filter_column =\n+                    !all_output_names.contains(step.column_name) && node_to_step[step.column_name] <= step_index,\n                 .need_filter = false,\n                 .perform_alter_conversions = true,\n             };\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02845_prewhere_preserve_column.reference b/tests/queries/0_stateless/02845_prewhere_preserve_column.reference\nnew file mode 100644\nindex 000000000000..89b3f8277f16\n--- /dev/null\n+++ b/tests/queries/0_stateless/02845_prewhere_preserve_column.reference\n@@ -0,0 +1,1 @@\n+6\t6\t6\ndiff --git a/tests/queries/0_stateless/02845_prewhere_preserve_column.sql b/tests/queries/0_stateless/02845_prewhere_preserve_column.sql\nnew file mode 100644\nindex 000000000000..8f791d8b9efa\n--- /dev/null\n+++ b/tests/queries/0_stateless/02845_prewhere_preserve_column.sql\n@@ -0,0 +1,9 @@\n+DROP TABLE IF EXISTS 02845_prewhere;\n+\n+SET move_all_conditions_to_prewhere = 1;\n+\n+CREATE TABLE  02845_prewhere  ( e String, c String, q String ) ENGINE = MergeTree ORDER BY tuple();\n+\n+INSERT INTO 02845_prewhere SELECT number, number, number from numbers(10);\n+\n+SELECT * FROM (SELECT * FROM 02845_prewhere WHERE e = '5' OR q = '6') WHERE (q = '6');\n",
  "problem_statement": "move_all_conditions_to_prewhere / NOT_FOUND_COLUMN_IN_BLOCK \nhttps://fiddle.clickhouse.com/e7d218c3-2d5f-4a7b-b713-0b5052b62e86\r\n\r\n```sql\r\nCREATE TABLE  t  ( e String, c String, q String )\r\nENGINE = MergeTree ORDER BY tuple();\r\n\r\ninsert into t\r\nselect number, number, number from numbers(10);\r\n\r\nWITH s AS ( SELECT * FROM  t WHERE ((e != 'cl') OR (q = 'bn')))\r\nSELECT count() AS cnt\r\nFROM s WHERE (q = 'bn')  GROUP BY c ORDER BY cnt DESC;\r\n\r\n\r\n\r\nReceived exception from server (version 23.7.3):\r\nCode: 10. DB::Exception: Received from localhost:9000. DB::Exception: Not found column equals(q, 'bn') in block: \r\nwhile executing 'INPUT : 1 -> equals(q, 'bn') UInt8 : 2': While executing MergeTreeInOrder. (NOT_FOUND_COLUMN_IN_BLOCK)\r\n(query: WITH s AS ( SELECT * FROM  t WHERE ((e != 'cl') OR (q = 'bn')))\r\nSELECT count() AS cnt\r\nFROM s WHERE (q = 'bn')  GROUP BY c ORDER BY cnt DESC\r\nformat Pretty;)\r\n```\r\n\r\nworked before 23.7\r\nworks with analyzer\r\n\r\n\r\n-----\r\n**upd: move_all_conditions_to_prewhere**\r\n\r\n```sql\r\nCREATE TABLE  t  ( e String, c String, q String ) ENGINE = MergeTree ORDER BY tuple();\r\n\r\ninsert into t select number, number, number from numbers(10);\r\n\r\nSELECT count() \r\nFROM (SELECT * FROM t WHERE e = 'cl' OR q = 'bn') WHERE (q = 'bn')  \r\nGROUP BY c\r\n\r\nDB::Exception: Not found column equals(q, 'bn') in block: while executing 'INPUT : 1 -> equals(q, 'bn') UInt8 : 2': While executing MergeTreeInOrder. (NOT_FOUND_COLUMN_IN_BLOCK)\r\n\r\nset move_all_conditions_to_prewhere=0;\r\n\r\nSELECT count() \r\nFROM (SELECT * FROM t WHERE e = 'cl' OR q = 'bn') WHERE (q = 'bn')  \r\nGROUP BY c\r\n0 rows in set. Elapsed: 0.003 sec.\r\n```\n\"DB::Exception: Not found column\" when using PREWHERE optimization in SELECT queries\n\r\n**Describe what's wrong**\r\n\r\nPotential problem with [PREWHERE](https://clickhouse.com/docs/en/sql-reference/statements/select/prewhere) optimization in [SELECT](https://clickhouse.com/docs/en/sql-reference/statements/select) queries.\r\n\r\nExample: If I have a query where a column is in a NOT clause with the same value as another condition it produces an error like: \r\n\r\n`\r\nCode: 10. DB::Exception: Not found column equals(user_id, 101) in block: while executing 'INPUT : 0 -> equals(user_id, 101) UInt8 : 0': While executing MergeTreeInOrder. (NOT_FOUND_COLUMN_IN_BLOCK) (version 23.8.1.41458 (official build))\r\n`\r\n\r\n\r\n**Does it reproduce on recent release?**\r\n\r\nI'm on `23.8.1.41458`\r\n\r\n\r\n**How to reproduce**\r\n\r\nFollowing the quick start tutorial (https://clickhouse.com/docs/en/getting-started/quick-start#4-create-a-table)\r\n\r\n1). CREATE TABLE: \r\n\r\n```\r\nCREATE TABLE my_first_table\r\n(\r\n    user_id UInt32,\r\n    message String,\r\n    timestamp DateTime,\r\n    metric Float32\r\n)\r\nENGINE = MergeTree\r\nPRIMARY KEY (user_id, timestamp);\r\n```\r\n\r\n2). INSERT data into it: \r\n\r\n```\r\nINSERT INTO my_first_table (user_id, message, timestamp, metric) VALUES\r\n    (101, 'Hello, ClickHouse!',                                 now(),       -1.0    ),\r\n    (102, 'Insert a lot of rows per batch',                     yesterday(), 1.41421 ),\r\n    (102, 'Sort your data based on your commonly-used queries', today(),     2.718   ),\r\n    (101, 'Granules are the smallest chunks of data read',      now() + 5,   3.14159 );\r\n```\r\n\r\n3). Run a query: \r\n\r\n```\r\nSELECT *\r\nFROM my_first_table WHERE user_id = 101\r\nAND NOT (user_id = 101 AND (metric = -1.0));\r\n```\r\n\r\ngives me the error: \r\n\r\n```\r\nCode: 10. DB::Exception: Not found column equals(user_id, 101) in block: while executing 'INPUT : 0 -> equals(user_id, 101) UInt8 : 0': While executing MergeTreeInOrder. (NOT_FOUND_COLUMN_IN_BLOCK) (version 23.8.1.41458 (official build))\r\n```\r\n\r\n4). If you set `optimize_move_to_prewhere = 0` it works as expected: \r\n\r\n```\r\nSELECT *\r\nFROM my_first_table WHERE user_id = 101\r\nAND NOT (user_id = 101 AND (metric = -1.0))\r\nSETTINGS optimize_move_to_prewhere = 0;\r\n```\r\n\r\n\r\n**Additional context**\r\n\r\nLooks similar to https://github.com/ClickHouse/ClickHouse/issues/37381\r\n\n",
  "hints_text": "cc @davenger\r\n\r\nhttps://fiddle.clickhouse.com/23c2c9b7-249c-40bd-a37c-c8d97b2a8555\nmove_all_conditions_to_prewhere\r\n\r\nhttps://fiddle.clickhouse.com/fc3373ed-54f0-494a-abc2-cf720502d019\r\n\r\nsimilar to https://github.com/ClickHouse/ClickHouse/issues/53237",
  "created_at": "2023-08-16T21:29:47Z"
}