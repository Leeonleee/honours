{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 18850,
  "instance_id": "ClickHouse__ClickHouse-18850",
  "issue_numbers": [
    "15979"
  ],
  "base_commit": "80d88a7b1796d439bb23b04b143d03b95d79441b",
  "patch": "diff --git a/src/Interpreters/InterpreterSystemQuery.cpp b/src/Interpreters/InterpreterSystemQuery.cpp\nindex fd36f3a6fd61..c07154090118 100644\n--- a/src/Interpreters/InterpreterSystemQuery.cpp\n+++ b/src/Interpreters/InterpreterSystemQuery.cpp\n@@ -6,6 +6,7 @@\n #include <Common/SymbolIndex.h>\n #include <Common/ThreadPool.h>\n #include <Common/escapeForFileName.h>\n+#include <Common/ShellCommand.h>\n #include <Interpreters/Context.h>\n #include <Interpreters/DatabaseCatalog.h>\n #include <Interpreters/ExternalDictionariesLoader.h>\n@@ -221,21 +222,41 @@ BlockIO InterpreterSystemQuery::execute()\n     switch (query.type)\n     {\n         case Type::SHUTDOWN:\n+        {\n             context.checkAccess(AccessType::SYSTEM_SHUTDOWN);\n             if (kill(0, SIGTERM))\n                 throwFromErrno(\"System call kill(0, SIGTERM) failed\", ErrorCodes::CANNOT_KILL);\n             break;\n+        }\n         case Type::KILL:\n+        {\n             context.checkAccess(AccessType::SYSTEM_SHUTDOWN);\n             if (kill(0, SIGKILL))\n                 throwFromErrno(\"System call kill(0, SIGKILL) failed\", ErrorCodes::CANNOT_KILL);\n             break;\n+        }\n+        case Type::SUSPEND:\n+        {\n+            auto command = fmt::format(\"kill -STOP {0} && sleep {1} && kill -CONT {0}\", getpid(), query.seconds);\n+            LOG_DEBUG(log, \"Will run {}\", command);\n+            auto res = ShellCommand::execute(command);\n+            res->in.close();\n+            WriteBufferFromOwnString out;\n+            copyData(res->out, out);\n+            copyData(res->err, out);\n+            if (!out.str().empty())\n+                LOG_DEBUG(log, \"The command returned output: {}\", command, out.str());\n+            res->wait();\n+            break;\n+        }\n         case Type::DROP_DNS_CACHE:\n+        {\n             context.checkAccess(AccessType::SYSTEM_DROP_DNS_CACHE);\n             DNSResolver::instance().dropCache();\n             /// Reinitialize clusters to update their resolved_addresses\n             system_context.reloadClusterConfig();\n             break;\n+        }\n         case Type::DROP_MARK_CACHE:\n             context.checkAccess(AccessType::SYSTEM_DROP_MARK_CACHE);\n             system_context.dropMarkCache();\n@@ -251,12 +272,15 @@ BlockIO InterpreterSystemQuery::execute()\n             break;\n #endif\n         case Type::RELOAD_DICTIONARY:\n+        {\n             context.checkAccess(AccessType::SYSTEM_RELOAD_DICTIONARY);\n             system_context.getExternalDictionariesLoader().loadOrReload(\n                     DatabaseCatalog::instance().resolveDictionaryName(query.target_dictionary));\n             ExternalDictionariesLoader::resetAll();\n             break;\n+        }\n         case Type::RELOAD_DICTIONARIES:\n+        {\n             context.checkAccess(AccessType::SYSTEM_RELOAD_DICTIONARY);\n             executeCommandsAndThrowIfError(\n                     [&] () { system_context.getExternalDictionariesLoader().reloadAllTriedToLoad(); },\n@@ -264,6 +288,7 @@ BlockIO InterpreterSystemQuery::execute()\n             );\n             ExternalDictionariesLoader::resetAll();\n             break;\n+        }\n         case Type::RELOAD_EMBEDDED_DICTIONARIES:\n             context.checkAccess(AccessType::SYSTEM_RELOAD_EMBEDDED_DICTIONARIES);\n             system_context.getEmbeddedDictionaries().reload();\n@@ -273,6 +298,7 @@ BlockIO InterpreterSystemQuery::execute()\n             system_context.reloadConfig();\n             break;\n         case Type::RELOAD_SYMBOLS:\n+        {\n #if defined(__ELF__) && !defined(__FreeBSD__)\n             context.checkAccess(AccessType::SYSTEM_RELOAD_SYMBOLS);\n             (void)SymbolIndex::instance(true);\n@@ -280,6 +306,7 @@ BlockIO InterpreterSystemQuery::execute()\n #else\n             throw Exception(\"SYSTEM RELOAD SYMBOLS is not supported on current platform\", ErrorCodes::NOT_IMPLEMENTED);\n #endif\n+        }\n         case Type::STOP_MERGES:\n             startStopAction(ActionLocks::PartsMerge, false);\n             break;\n@@ -340,6 +367,7 @@ BlockIO InterpreterSystemQuery::execute()\n                                 ErrorCodes::BAD_ARGUMENTS);\n             break;\n         case Type::FLUSH_LOGS:\n+        {\n             context.checkAccess(AccessType::SYSTEM_FLUSH_LOGS);\n             executeCommandsAndThrowIfError(\n                     [&] () { if (auto query_log = context.getQueryLog()) query_log->flush(true); },\n@@ -352,6 +380,7 @@ BlockIO InterpreterSystemQuery::execute()\n                     [&] () { if (auto opentelemetry_span_log = context.getOpenTelemetrySpanLog()) opentelemetry_span_log->flush(true); }\n             );\n             break;\n+        }\n         case Type::STOP_LISTEN_QUERIES:\n         case Type::START_LISTEN_QUERIES:\n             throw Exception(String(ASTSystemQuery::typeToString(query.type)) + \" is not supported yet\", ErrorCodes::NOT_IMPLEMENTED);\n@@ -586,7 +615,8 @@ AccessRightsElements InterpreterSystemQuery::getRequiredAccessForDDLOnCluster()\n     switch (query.type)\n     {\n         case Type::SHUTDOWN: [[fallthrough]];\n-        case Type::KILL:\n+        case Type::KILL: [[fallthrough]];\n+        case Type::SUSPEND:\n         {\n             required_access.emplace_back(AccessType::SYSTEM_SHUTDOWN);\n             break;\ndiff --git a/src/Parsers/ASTSystemQuery.cpp b/src/Parsers/ASTSystemQuery.cpp\nindex 0d6e15a3d8ce..f3a43d7f3fd9 100644\n--- a/src/Parsers/ASTSystemQuery.cpp\n+++ b/src/Parsers/ASTSystemQuery.cpp\n@@ -22,6 +22,8 @@ const char * ASTSystemQuery::typeToString(Type type)\n             return \"SHUTDOWN\";\n         case Type::KILL:\n             return \"KILL\";\n+        case Type::SUSPEND:\n+            return \"SUSPEND\";\n         case Type::DROP_DNS_CACHE:\n             return \"DROP DNS CACHE\";\n         case Type::DROP_MARK_CACHE:\n@@ -146,7 +148,7 @@ void ASTSystemQuery::formatImpl(const FormatSettings & settings, FormatState &,\n \n     auto print_on_volume = [&]\n     {\n-        settings.ostr << \" ON VOLUME \"\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \" ON VOLUME \"\n                       << (settings.hilite ? hilite_identifier : \"\") << backQuoteIfNeed(storage_policy)\n                       << (settings.hilite ? hilite_none : \"\")\n                       << \".\"\n@@ -182,9 +184,20 @@ void ASTSystemQuery::formatImpl(const FormatSettings & settings, FormatState &,\n         print_database_table();\n     }\n     else if (type == Type::RELOAD_DICTIONARY)\n+    {\n         print_database_dictionary();\n+    }\n     else if (type == Type::DROP_REPLICA)\n+    {\n         print_drop_replica();\n+    }\n+    else if (type == Type::SUSPEND)\n+    {\n+         settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \" FOR \"\n+            << (settings.hilite ? hilite_none : \"\") << seconds\n+            << (settings.hilite ? hilite_keyword : \"\") << \" SECOND\"\n+            << (settings.hilite ? hilite_none : \"\");\n+    }\n }\n \n \ndiff --git a/src/Parsers/ASTSystemQuery.h b/src/Parsers/ASTSystemQuery.h\nindex 756b5b526005..ad7eb664659e 100644\n--- a/src/Parsers/ASTSystemQuery.h\n+++ b/src/Parsers/ASTSystemQuery.h\n@@ -20,6 +20,7 @@ class ASTSystemQuery : public IAST, public ASTQueryWithOnCluster\n         UNKNOWN,\n         SHUTDOWN,\n         KILL,\n+        SUSPEND,\n         DROP_DNS_CACHE,\n         DROP_MARK_CACHE,\n         DROP_UNCOMPRESSED_CACHE,\n@@ -65,9 +66,10 @@ class ASTSystemQuery : public IAST, public ASTQueryWithOnCluster\n     String table;\n     String replica;\n     String replica_zk_path;\n-    bool is_drop_whole_replica;\n+    bool is_drop_whole_replica{};\n     String storage_policy;\n     String volume;\n+    UInt64 seconds{};\n \n     String getID(char) const override { return \"SYSTEM query\"; }\n \ndiff --git a/src/Parsers/ParserSystemQuery.cpp b/src/Parsers/ParserSystemQuery.cpp\nindex b6a90b348a03..491037da9a95 100644\n--- a/src/Parsers/ParserSystemQuery.cpp\n+++ b/src/Parsers/ParserSystemQuery.cpp\n@@ -169,6 +169,20 @@ bool ParserSystemQuery::parseImpl(IParser::Pos & pos, ASTPtr & node, Expected &\n             parseDatabaseAndTableName(pos, expected, res->database, res->table);\n             break;\n \n+        case Type::SUSPEND:\n+        {\n+            ASTPtr seconds;\n+            if (!(ParserKeyword{\"FOR\"}.ignore(pos, expected)\n+                && ParserUnsignedInteger().parse(pos, seconds, expected)\n+                && ParserKeyword{\"SECOND\"}.ignore(pos, expected)))   /// SECOND, not SECONDS to be consistent with INTERVAL parsing in SQL\n+            {\n+                return false;\n+            }\n+\n+            res->seconds = seconds->as<ASTLiteral>()->value.get<UInt64>();\n+            break;\n+        }\n+\n         default:\n             /// There are no [db.table] after COMMAND NAME\n             break;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01643_system_suspend.reference b/tests/queries/0_stateless/01643_system_suspend.reference\nnew file mode 100644\nindex 000000000000..d00491fd7e5b\n--- /dev/null\n+++ b/tests/queries/0_stateless/01643_system_suspend.reference\n@@ -0,0 +1,1 @@\n+1\ndiff --git a/tests/queries/0_stateless/01643_system_suspend.sql b/tests/queries/0_stateless/01643_system_suspend.sql\nnew file mode 100644\nindex 000000000000..c2cd37e6156b\n--- /dev/null\n+++ b/tests/queries/0_stateless/01643_system_suspend.sql\n@@ -0,0 +1,5 @@\n+CREATE TEMPORARY TABLE t (x DateTime);\n+INSERT INTO t VALUES (now());\n+SYSTEM SUSPEND FOR 1 SECOND;\n+INSERT INTO t VALUES (now());\n+SELECT max(x) - min(x) >= 1 FROM t;\n",
  "problem_statement": "SYSTEM SUSPEND FOR ...\nAdd a command that will freeze clickhouse-server process with STOP signal and wakeup it after specified amount of time.\r\nThis is needed for testing (fault injection).\r\n\r\nWakeup can be done with `ShellCommand` running `sleep N && kill -CONT pid`\n",
  "hints_text": "",
  "created_at": "2021-01-07T19:21:02Z"
}