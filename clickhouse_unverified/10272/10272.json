{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 10272,
  "instance_id": "ClickHouse__ClickHouse-10272",
  "issue_numbers": [
    "1839"
  ],
  "base_commit": "747bb16677e40b0078e72d41487f8a05d77dd93d",
  "patch": "diff --git a/src/IO/readFloatText.h b/src/IO/readFloatText.h\nindex fc3ffc43a910..4e0825222a77 100644\n--- a/src/IO/readFloatText.h\n+++ b/src/IO/readFloatText.h\n@@ -156,6 +156,9 @@ ReturnType readFloatTextPreciseImpl(T & x, ReadBuffer & buf)\n     {\n         switch (*buf.position())\n         {\n+            case '+':\n+                continue;\n+\n             case '-':\n             {\n                 negative = true;\n@@ -335,6 +338,7 @@ ReturnType readFloatTextFastImpl(T & x, ReadBuffer & in)\n         ++in.position();\n     }\n \n+\n     auto count_after_sign = in.count();\n \n     constexpr int significant_digits = std::numeric_limits<UInt64>::digits10;\n@@ -380,7 +384,7 @@ ReturnType readFloatTextFastImpl(T & x, ReadBuffer & in)\n         if (in.eof())\n         {\n             if constexpr (throw_exception)\n-                throw Exception(\"Cannot read floating point value\", ErrorCodes::CANNOT_PARSE_NUMBER);\n+                throw Exception(\"Cannot read floating point value: nothing after exponent\", ErrorCodes::CANNOT_PARSE_NUMBER);\n             else\n                 return false;\n         }\n@@ -418,11 +422,30 @@ ReturnType readFloatTextFastImpl(T & x, ReadBuffer & in)\n         if (in.eof())\n         {\n             if constexpr (throw_exception)\n-                throw Exception(\"Cannot read floating point value\", ErrorCodes::CANNOT_PARSE_NUMBER);\n+                throw Exception(\"Cannot read floating point value: no digits read\", ErrorCodes::CANNOT_PARSE_NUMBER);\n             else\n                 return false;\n         }\n \n+        if (*in.position() == '+')\n+        {\n+            ++in.position();\n+            if (in.eof())\n+            {\n+                if constexpr (throw_exception)\n+                    throw Exception(\"Cannot read floating point value: nothing after plus sign\", ErrorCodes::CANNOT_PARSE_NUMBER);\n+                else\n+                    return false;\n+            }\n+            else if (negative)\n+            {\n+                if constexpr (throw_exception)\n+                    throw Exception(\"Cannot read floating point value: plus after minus sign\", ErrorCodes::CANNOT_PARSE_NUMBER);\n+                else\n+                    return false;\n+            }\n+        }\n+\n         if (*in.position() == 'i' || *in.position() == 'I')\n         {\n             if (assertOrParseInfinity<throw_exception>(in))\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01198_plus_inf.reference b/tests/queries/0_stateless/01198_plus_inf.reference\nnew file mode 100644\nindex 000000000000..f726b8429b69\n--- /dev/null\n+++ b/tests/queries/0_stateless/01198_plus_inf.reference\n@@ -0,0 +1,3 @@\n+inf\n+-inf\n+inf\ndiff --git a/tests/queries/0_stateless/01198_plus_inf.sql b/tests/queries/0_stateless/01198_plus_inf.sql\nnew file mode 100644\nindex 000000000000..e06faa2fd21c\n--- /dev/null\n+++ b/tests/queries/0_stateless/01198_plus_inf.sql\n@@ -0,0 +1,3 @@\n+SELECT DISTINCT toFloat64(arrayJoin(['+inf', '+Inf', '+INF', '+infinity', '+Infinity']));\n+SELECT DISTINCT toFloat64(arrayJoin(['-inf', '-Inf', '-INF', '-infinity', '-Infinity']));\n+SELECT DISTINCT toFloat64(arrayJoin(['inf', 'Inf', 'INF', 'infinity', 'Infinity']));\n",
  "problem_statement": "JSONEachRow can not parse +Inf to float64\nCH version: 1.1.54342\r\nlog:\r\n2018.01.30 17:12:40.931768 [ 30 ] <Error> executeQuery: Code: 72, e.displayText() = DB::Exception: Cannot read floating point value: (at row 121867)\r\n, e.what() = DB::Exception (from 172.21.0.3:49692) (in query: select count() from kafka_json), Stack trace:\r\n\r\n0. /usr/bin/clickhouse-server(StackTrace::StackTrace()+0x15) [0x73178b5]\r\n1. /usr/bin/clickhouse-server(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x1e) [0x19ca19e]\r\n2. /usr/bin/clickhouse-server(void DB::readFloatTextFast<double>(double&, DB::ReadBuffer&)+0x10e4) [0x7347d24]\r\n3. /usr/bin/clickhouse-server(DB::DataTypeNumberBase<double>::deserializeTextJSON(DB::IColumn&, DB::ReadBuffer&) const+0x4a) [0x6036c8a]\r\n4. /usr/bin/clickhouse-server(DB::JSONEachRowRowInputStream::read(std::vector<COWPtr<DB::IColumn>::mutable_ptr<DB::IColumn>, std::allocator<COWPtr<DB::IColumn>::mutable_ptr<DB::IColumn> > >&)+0x510) [0x69a5540]\r\n5. /usr/bin/clickhouse-server(DB::BlockInputStreamFromRowInputStream::readImpl()+0x97) [0x6b780e7]\r\n6. /usr/bin/clickhouse-server(DB::IProfilingBlockInputStream::read()+0x26f) [0x5fe84cf]\r\n7. /usr/bin/clickhouse-server(DB::KafkaBlockInputStream::readImpl()+0x8b) [0x6b3713b]\r\n8. /usr/bin/clickhouse-server(DB::IProfilingBlockInputStream::read()+0x26f) [0x5fe84cf]\r\n9. /usr/bin/clickhouse-server(DB::ExpressionBlockInputStream::readImpl()+0x2c) [0x698f40c]\r\n10. /usr/bin/clickhouse-server(DB::IProfilingBlockInputStream::read()+0x26f) [0x5fe84cf]\r\n11. /usr/bin/clickhouse-server(DB::ConcatBlockInputStream::readImpl()+0xbb) [0x66d4f0b]\r\n12. /usr/bin/clickhouse-server(DB::IProfilingBlockInputStream::read()+0x26f) [0x5fe84cf]\r\n13. /usr/bin/clickhouse-server(DB::Aggregator::execute(std::shared_ptr<DB::IBlockInputStream> const&, DB::AggregatedDataVariants&)+0x269) [0x6a5ed99]\r\n14. /usr/bin/clickhouse-server(DB::AggregatingBlockInputStream::readImpl()+0x5e7) [0x69553b7]\r\n15. /usr/bin/clickhouse-server(DB::IProfilingBlockInputStream::read()+0x26f) [0x5fe84cf]\r\n16. /usr/bin/clickhouse-server(DB::ExpressionBlockInputStream::readImpl()+0x2c) [0x698f40c]\r\n17. /usr/bin/clickhouse-server(DB::IProfilingBlockInputStream::read()+0x26f) [0x5fe84cf]\r\n18. /usr/bin/clickhouse-server(DB::ExpressionBlockInputStream::readImpl()+0x2c) [0x698f40c]\r\n19. /usr/bin/clickhouse-server(DB::IProfilingBlockInputStream::read()+0x26f) [0x5fe84cf]\r\n20. /usr/bin/clickhouse-server(DB::AsynchronousBlockInputStream::calculate(MemoryTracker*)+0x54) [0x19dc544]\r\n21. /usr/bin/clickhouse-server(ThreadPool::worker()+0x16d) [0x7361b9d]\r\n22. /usr/bin/clickhouse-server() [0x76fcfae]\r\n23. /lib/x86_64-linux-gnu/libpthread.so.0(+0x76b9) [0x7f6c87b3c6b9]\r\n24. /lib/x86_64-linux-gnu/libc.so.6(clone+0x6c) [0x7f6c875693dc]\r\n\r\n2018.01.30 17:12:40.974737 [ 30 ] <Trace> StorageKafka (kafka_json): KafkaBlockInputStream did not finish successfully, unsubscribing from assignments and rejoining\n",
  "hints_text": "Just inf/Inf (without plus sign) is supported, but may be signed +Inf can also be supported.\r\n\r\ntestcase: \r\n```\r\nCREATE TABLE float_inf_problem ( x Float64 ) ENGINE = Memory;\r\ninsert into float_inf_problem format JSONEachRow {\"x\":\"+inf\"};\r\n\r\n# those - work:\r\ninsert into float_inf_problem format JSONEachRow {\"x\":\"-inf\"};\r\ninsert into float_inf_problem format JSONEachRow {\"x\":\"inf\"};\r\n\r\ninsert into float_inf_problem format Values (+inf);\r\ninsert into float_inf_problem format Values (+Inf);\r\n```\nJSON in its specification has no support for `inf`, `nan`.\r\nBut we have some support, and I think we should also add support for +inf.",
  "created_at": "2020-04-15T03:33:50Z",
  "modified_files": [
    "src/IO/readFloatText.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01198_plus_inf.reference",
    "b/tests/queries/0_stateless/01198_plus_inf.sql"
  ]
}