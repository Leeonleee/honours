{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 71886,
  "instance_id": "ClickHouse__ClickHouse-71886",
  "issue_numbers": [
    "70780"
  ],
  "base_commit": "9f62518846ca945c11a653b46d2d3f3885ad7f40",
  "patch": "diff --git a/src/Processors/LimitTransform.cpp b/src/Processors/LimitTransform.cpp\nindex 5e24062d67a4..a531dd599b22 100644\n--- a/src/Processors/LimitTransform.cpp\n+++ b/src/Processors/LimitTransform.cpp\n@@ -317,8 +317,9 @@ void LimitTransform::splitChunk(PortsData & data)\n             length = offset + limit - (rows_read - num_rows) - start;\n     }\n \n-    /// check if other rows in current block equals to last one in limit\n-    if (with_ties && length)\n+    /// Check if other rows in current block equals to last one in limit\n+    /// when rows read >= offset + limit.\n+    if (with_ties && offset + limit <= rows_read && length)\n     {\n         UInt64 current_row_num = start + length;\n         previous_row_chunk = makeChunkWithPreviousRow(data.current_chunk, current_row_num - 1);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00996_limit_with_ties.reference b/tests/queries/0_stateless/00996_limit_with_ties.reference\nindex ecbbaa76f7a6..43f3a21fcdaa 100644\n--- a/tests/queries/0_stateless/00996_limit_with_ties.reference\n+++ b/tests/queries/0_stateless/00996_limit_with_ties.reference\n@@ -53,3 +53,5 @@\n 100\n 100\n 100\n+12\n+12\ndiff --git a/tests/queries/0_stateless/00996_limit_with_ties.sql b/tests/queries/0_stateless/00996_limit_with_ties.sql\nindex 8d7aedc2cb06..4ba2ccfc57d1 100644\n--- a/tests/queries/0_stateless/00996_limit_with_ties.sql\n+++ b/tests/queries/0_stateless/00996_limit_with_ties.sql\n@@ -35,4 +35,24 @@ select count() from (select number, number < 100 from numbers(2000) order by num\n SET max_block_size = 5;\n select count() from (select number < 100, number from numbers(2000) order by number < 100 desc limit 10 with ties);\n \n+SELECT count() FROM (WITH data AS (\n+    SELECT * FROM numbers(0, 10)\n+    UNION ALL\n+    SELECT * FROM numbers(10, 10)\n+)\n+SELECT number div 10 AS ten, number\n+FROM data\n+ORDER BY ten\n+LIMIT 8,6 WITH TIES);\n+\n+SELECT count() FROM (WITH data AS (\n+    SELECT * FROM numbers(0, 10)\n+    UNION ALL\n+    SELECT * FROM numbers(10, 10)\n+)\n+SELECT number div 11 AS eleven, number\n+FROM data\n+ORDER BY eleven\n+LIMIT 8,6 WITH TIES);\n+\n DROP TABLE ties;\n",
  "problem_statement": "LIMIT n, m WITH TIES returns less data than requested\n```sql\r\nWITH data AS (\r\n    SELECT * FROM numbers(0, 10)\r\n    UNION ALL\r\n    SELECT * FROM numbers(10, 10)\r\n)\r\nSELECT number div 10 AS ten, number\r\nFROM data\r\nORDER BY ten\r\nLIMIT 8,6 WITH TIES\r\n```\r\nThis query returns only two rows:\r\n```\r\n+-ten-+-number-+\r\n|   0 |      8 |\r\n|   0 |      9 |\r\n+-----+--------+\r\n```\r\nAlthough I expect it to return numbers 8-9 and 10-19 because of `WITH TIES` and equal sorting key ten == 1 for last rows.\r\n`UNION ALL` here is important to reproduce the issue, that way it creates multiple data blocks to read from. Without it, with data as `SELECT * FROM numbers(0, 20)`, query returns numbers 8-19 as expected.\r\n\r\nIssue is reproduced in docker image `clickhouse/clickhouse-server:24.9.2.42-alpine`.\r\nAlso in fiddle: https://fiddle.clickhouse.com/2d6820e1-8b2b-4f4f-b677-c5d48acffdf5\n",
  "hints_text": "",
  "created_at": "2024-11-13T16:19:34Z",
  "modified_files": [
    "src/Processors/LimitTransform.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/00996_limit_with_ties.reference",
    "tests/queries/0_stateless/00996_limit_with_ties.sql"
  ]
}