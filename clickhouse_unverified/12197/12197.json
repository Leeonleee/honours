{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 12197,
  "instance_id": "ClickHouse__ClickHouse-12197",
  "issue_numbers": [
    "6155"
  ],
  "base_commit": "f8d584d5090a53d2306628d6a56afaca770d7773",
  "patch": "diff --git a/src/Common/ErrorCodes.cpp b/src/Common/ErrorCodes.cpp\nindex 0c305075c660..7fcd75720399 100644\n--- a/src/Common/ErrorCodes.cpp\n+++ b/src/Common/ErrorCodes.cpp\n@@ -497,6 +497,7 @@ namespace ErrorCodes\n     extern const int CASSANDRA_INTERNAL_ERROR = 528;\n     extern const int NOT_A_LEADER = 529;\n     extern const int CANNOT_CONNECT_RABBITMQ = 530;\n+    extern const int CANNOT_FSTAT = 531;\n \n     extern const int KEEPER_EXCEPTION = 999;\n     extern const int POCO_EXCEPTION = 1000;\ndiff --git a/src/IO/WriteBufferFromFileDescriptor.cpp b/src/IO/WriteBufferFromFileDescriptor.cpp\nindex 9710c5a979bb..a59ae20c588f 100644\n--- a/src/IO/WriteBufferFromFileDescriptor.cpp\n+++ b/src/IO/WriteBufferFromFileDescriptor.cpp\n@@ -1,6 +1,8 @@\n #include <unistd.h>\n #include <errno.h>\n #include <cassert>\n+#include <sys/types.h>\n+#include <sys/stat.h>\n \n #include <Common/Exception.h>\n #include <Common/ProfileEvents.h>\n@@ -33,6 +35,7 @@ namespace ErrorCodes\n     extern const int CANNOT_FSYNC;\n     extern const int CANNOT_SEEK_THROUGH_FILE;\n     extern const int CANNOT_TRUNCATE_FILE;\n+    extern const int CANNOT_FSTAT;\n }\n \n \n@@ -130,4 +133,14 @@ void WriteBufferFromFileDescriptor::truncate(off_t length)\n         throwFromErrnoWithPath(\"Cannot truncate file \" + getFileName(), getFileName(), ErrorCodes::CANNOT_TRUNCATE_FILE);\n }\n \n+\n+off_t WriteBufferFromFileDescriptor::size()\n+{\n+    struct stat buf;\n+    int res = fstat(fd, &buf);\n+    if (-1 == res)\n+        throwFromErrnoWithPath(\"Cannot execute fstat \" + getFileName(), getFileName(), ErrorCodes::CANNOT_FSTAT);\n+    return buf.st_size;\n+}\n+\n }\ndiff --git a/src/IO/WriteBufferFromFileDescriptor.h b/src/IO/WriteBufferFromFileDescriptor.h\nindex d7df04ee9409..18c0ac64f633 100644\n--- a/src/IO/WriteBufferFromFileDescriptor.h\n+++ b/src/IO/WriteBufferFromFileDescriptor.h\n@@ -44,6 +44,8 @@ class WriteBufferFromFileDescriptor : public WriteBufferFromFileBase\n \n     off_t seek(off_t offset, int whence);\n     void truncate(off_t length);\n+\n+    off_t size();\n };\n \n }\ndiff --git a/src/Processors/Formats/Impl/CSVRowOutputFormat.cpp b/src/Processors/Formats/Impl/CSVRowOutputFormat.cpp\nindex 27d022250f29..2ff8defd3b00 100644\n--- a/src/Processors/Formats/Impl/CSVRowOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/CSVRowOutputFormat.cpp\n@@ -19,7 +19,7 @@ CSVRowOutputFormat::CSVRowOutputFormat(WriteBuffer & out_, const Block & header_\n }\n \n \n-void CSVRowOutputFormat::writePrefix()\n+void CSVRowOutputFormat::doWritePrefix()\n {\n     const auto & sample = getPort(PortKind::Main).getHeader();\n     size_t columns = sample.columns();\ndiff --git a/src/Processors/Formats/Impl/CSVRowOutputFormat.h b/src/Processors/Formats/Impl/CSVRowOutputFormat.h\nindex 28bd8edf31ad..05b097f75149 100644\n--- a/src/Processors/Formats/Impl/CSVRowOutputFormat.h\n+++ b/src/Processors/Formats/Impl/CSVRowOutputFormat.h\n@@ -27,10 +27,11 @@ class CSVRowOutputFormat : public IRowOutputFormat\n     void writeField(const IColumn & column, const IDataType & type, size_t row_num) override;\n     void writeFieldDelimiter() override;\n     void writeRowEndDelimiter() override;\n-    void writePrefix() override;\n     void writeBeforeTotals() override;\n     void writeBeforeExtremes() override;\n \n+    void doWritePrefix() override;\n+\n     /// https://www.iana.org/assignments/media-types/text/csv\n     String getContentType() const override\n     {\ndiff --git a/src/Storages/StorageFile.cpp b/src/Storages/StorageFile.cpp\nindex c7671fd87593..221e9db94286 100644\n--- a/src/Storages/StorageFile.cpp\n+++ b/src/Storages/StorageFile.cpp\n@@ -435,6 +435,7 @@ class StorageFileBlockOutputStream : public IBlockOutputStream\n         , metadata_snapshot(metadata_snapshot_)\n         , lock(storage.rwlock)\n     {\n+        std::unique_ptr<WriteBufferFromFileDescriptor> naked_buffer = nullptr;\n         if (storage.use_table_fd)\n         {\n             /** NOTE: Using real file binded to FD may be misleading:\n@@ -442,17 +443,21 @@ class StorageFileBlockOutputStream : public IBlockOutputStream\n               * INSERT data; SELECT *; last SELECT returns only insert_data\n               */\n             storage.table_fd_was_used = true;\n-            write_buf = wrapWriteBufferWithCompressionMethod(std::make_unique<WriteBufferFromFileDescriptor>(storage.table_fd), compression_method, 3);\n+            naked_buffer = std::make_unique<WriteBufferFromFileDescriptor>(storage.table_fd);\n         }\n         else\n         {\n             if (storage.paths.size() != 1)\n                 throw Exception(\"Table '\" + storage.getStorageID().getNameForLogs() + \"' is in readonly mode because of globs in filepath\", ErrorCodes::DATABASE_ACCESS_DENIED);\n-            write_buf = wrapWriteBufferWithCompressionMethod(\n-                std::make_unique<WriteBufferFromFile>(storage.paths[0], DBMS_DEFAULT_BUFFER_SIZE, O_WRONLY | O_APPEND | O_CREAT),\n-                compression_method, 3);\n+            naked_buffer = std::make_unique<WriteBufferFromFile>(storage.paths[0], DBMS_DEFAULT_BUFFER_SIZE, O_WRONLY | O_APPEND | O_CREAT);\n         }\n \n+        /// In case of CSVWithNames we have already written prefix.\n+        if (naked_buffer->size())\n+            prefix_written = true;\n+\n+        write_buf = wrapWriteBufferWithCompressionMethod(std::move(naked_buffer), compression_method, 3);\n+\n         writer = FormatFactory::instance().getOutput(storage.format_name, *write_buf, metadata_snapshot->getSampleBlock(), context);\n     }\n \n@@ -465,7 +470,9 @@ class StorageFileBlockOutputStream : public IBlockOutputStream\n \n     void writePrefix() override\n     {\n-        writer->writePrefix();\n+        if (!prefix_written)\n+            writer->writePrefix();\n+        prefix_written = true;\n     }\n \n     void writeSuffix() override\n@@ -484,6 +491,7 @@ class StorageFileBlockOutputStream : public IBlockOutputStream\n     std::unique_lock<std::shared_mutex> lock;\n     std::unique_ptr<WriteBuffer> write_buf;\n     BlockOutputStreamPtr writer;\n+    bool prefix_written{false};\n };\n \n BlockOutputStreamPtr StorageFile::write(\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01375_storage_file_write_prefix.reference b/tests/queries/0_stateless/01375_storage_file_write_prefix.reference\nnew file mode 100644\nindex 000000000000..ed9a18b93463\n--- /dev/null\n+++ b/tests/queries/0_stateless/01375_storage_file_write_prefix.reference\n@@ -0,0 +1,30 @@\n+0\t0\n+1\t1\n+2\t2\n+3\t3\n+4\t4\n+5\t5\n+6\t6\n+7\t7\n+8\t8\n+9\t9\n+0\t0\n+1\t1\n+2\t2\n+3\t3\n+4\t4\n+5\t5\n+6\t6\n+7\t7\n+8\t8\n+9\t9\n+0\t0\n+1\t1\n+2\t2\n+3\t3\n+4\t4\n+5\t5\n+6\t6\n+7\t7\n+8\t8\n+9\t9\ndiff --git a/tests/queries/0_stateless/01375_storage_file_write_prefix.sql b/tests/queries/0_stateless/01375_storage_file_write_prefix.sql\nnew file mode 100644\nindex 000000000000..b335db03f6c6\n--- /dev/null\n+++ b/tests/queries/0_stateless/01375_storage_file_write_prefix.sql\n@@ -0,0 +1,14 @@\n+DROP TABLE IF EXISTS tmp_01375;\n+DROP TABLE IF EXISTS table_csv_01375;\n+\n+CREATE TABLE tmp_01375 (n UInt32, s String) ENGINE = Memory;\n+CREATE TABLE table_csv_01375 AS tmp_01375 ENGINE = File(CSVWithNames);\n+\n+INSERT INTO table_csv_01375 SELECT number as n, toString(n) as s FROM numbers(10);\n+INSERT INTO table_csv_01375 SELECT number as n, toString(n) as s FROM numbers(10);\n+INSERT INTO table_csv_01375 SELECT number as n, toString(n) as s FROM numbers(10);\n+\n+SELECT * FROM table_csv_01375;\n+\n+DROP TABLE IF EXISTS tmp_01375;\n+DROP TABLE IF EXISTS table_csv_01375;\n",
  "problem_statement": "Engine File(CSVWithNames) inserts more headers than needed\nEngine File(CSVWithNames) inserts redundant headers, so second insert makes file unreadable by selects.\r\n\r\n```\r\nCREATE TABLE tmp (n UInt32, s String) ENGINE = Memory;\r\nCREATE TABLE table_csv AS tmp ENGINE = File(CSVWithNames);\r\n\r\nINSERT INTO table_csv SELECT number as n, toString(n) as s FROM numbers(10);\r\nINSERT INTO table_csv SELECT number as n, toString(n) as s FROM numbers(10);\r\n\r\nSELECT * FROM table_csv;\r\n```\r\n\r\n```\r\nCode: 27. DB::Exception: Received from localhost:9000. DB::Exception: Cannot parse input: expected \" before: n\",\"s\"\\n0,\"0\"\\n1,\"1\"\\n2,\"2\"\\n3,\"3\"\\n4,\"4\"\\n5,\"5\"\\n6,\"6\"\\n7,\"7\"\\n8,\"8\"\\n9,\"9\"\\n: (at row 11)\r\n\r\nRow 10:\r\nColumn 0,   name: n, type: UInt32, parsed text: \"9\"\r\nColumn 1,   name: s, type: String, parsed text: \"<DOUBLE QUOTE>9<DOUBLE QUOTE>\"\r\n\r\nRow 11:\r\nColumn 0,   name: n, type: UInt32, ERROR: text \"<DOUBLE QUOTE>n<DOUBLE QUOTE>,<DOUBLE QUOTE>s<DOUBLE QUOTE><LINE FEED>0,\" is not like UInt32\r\n```\n",
  "hints_text": "",
  "created_at": "2020-07-07T11:48:24Z",
  "modified_files": [
    "src/Common/ErrorCodes.cpp",
    "src/IO/WriteBufferFromFileDescriptor.cpp",
    "src/IO/WriteBufferFromFileDescriptor.h",
    "src/Processors/Formats/Impl/CSVRowOutputFormat.cpp",
    "src/Processors/Formats/Impl/CSVRowOutputFormat.h",
    "src/Storages/StorageFile.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01375_storage_file_write_prefix.reference",
    "b/tests/queries/0_stateless/01375_storage_file_write_prefix.sql"
  ]
}