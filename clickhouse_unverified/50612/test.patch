diff --git a/tests/clickhouse-test b/tests/clickhouse-test
index b9e2f4ddbe6d..cab7d7e79ff9 100755
--- a/tests/clickhouse-test
+++ b/tests/clickhouse-test
@@ -671,6 +671,8 @@ class MergeTreeSettingsRandomizer:
         "compress_primary_key": lambda: random.randint(0, 1),
         "marks_compress_block_size": lambda: random.randint(8000, 100000),
         "primary_key_compress_block_size": lambda: random.randint(8000, 100000),
+        "replace_long_file_name_to_hash": lambda: random.randint(0, 1),
+        "max_file_name_length": threshold_generator(0.3, 0.3, 0, 128),
     }
 
     @staticmethod
diff --git a/tests/integration/test_backward_compatibility/configs/wide_parts_only.xml b/tests/integration/test_backward_compatibility/configs/wide_parts_only.xml
index e9cf053f1c59..674ffff6c935 100644
--- a/tests/integration/test_backward_compatibility/configs/wide_parts_only.xml
+++ b/tests/integration/test_backward_compatibility/configs/wide_parts_only.xml
@@ -1,5 +1,6 @@
 <clickhouse>
     <merge_tree>
         <min_bytes_for_wide_part>0</min_bytes_for_wide_part>
+        <replace_long_file_name_to_hash>0</replace_long_file_name_to_hash>
     </merge_tree>
 </clickhouse>
diff --git a/tests/integration/test_compression_nested_columns/test.py b/tests/integration/test_compression_nested_columns/test.py
index 55d881742876..3541a9f6061e 100644
--- a/tests/integration/test_compression_nested_columns/test.py
+++ b/tests/integration/test_compression_nested_columns/test.py
@@ -48,7 +48,7 @@ def test_nested_compression_codec(start_cluster):
             column_array Array(Array(UInt64)) CODEC(T64, LZ4),
             column_bad LowCardinality(Int64) CODEC(Delta)
         ) ENGINE = ReplicatedMergeTree('/t', '{}') ORDER BY tuple() PARTITION BY key
-        SETTINGS min_rows_for_wide_part = 0, min_bytes_for_wide_part = 0;
+        SETTINGS min_rows_for_wide_part = 0, min_bytes_for_wide_part = 0, replace_long_file_name_to_hash = 0;
         """.format(
                 i
             ),
diff --git a/tests/integration/test_default_compression_codec/configs/long_names.xml b/tests/integration/test_default_compression_codec/configs/long_names.xml
new file mode 100644
index 000000000000..1dc241dbf051
--- /dev/null
+++ b/tests/integration/test_default_compression_codec/configs/long_names.xml
@@ -0,0 +1,5 @@
+<clickhouse>
+    <merge_tree>
+        <replace_long_file_name_to_hash>0</replace_long_file_name_to_hash>
+    </merge_tree>
+</clickhouse>
diff --git a/tests/integration/test_default_compression_codec/test.py b/tests/integration/test_default_compression_codec/test.py
index c8b75ea9751d..82d5eb04d2aa 100644
--- a/tests/integration/test_default_compression_codec/test.py
+++ b/tests/integration/test_default_compression_codec/test.py
@@ -9,12 +9,20 @@
 
 node1 = cluster.add_instance(
     "node1",
-    main_configs=["configs/default_compression.xml", "configs/wide_parts_only.xml"],
+    main_configs=[
+        "configs/default_compression.xml",
+        "configs/wide_parts_only.xml",
+        "configs/long_names.xml",
+    ],
     with_zookeeper=True,
 )
 node2 = cluster.add_instance(
     "node2",
-    main_configs=["configs/default_compression.xml", "configs/wide_parts_only.xml"],
+    main_configs=[
+        "configs/default_compression.xml",
+        "configs/wide_parts_only.xml",
+        "configs/long_names.xml",
+    ],
     with_zookeeper=True,
 )
 node3 = cluster.add_instance(
diff --git a/tests/integration/test_filesystem_layout/test.py b/tests/integration/test_filesystem_layout/test.py
index 2be478f95d08..4e719aa0fe94 100644
--- a/tests/integration/test_filesystem_layout/test.py
+++ b/tests/integration/test_filesystem_layout/test.py
@@ -23,7 +23,7 @@ def test_file_path_escaping(started_cluster):
     node.query(
         """
         CREATE TABLE test.`T.a_b,l-e!` (`~Id` UInt32)
-        ENGINE = MergeTree() PARTITION BY `~Id` ORDER BY `~Id` SETTINGS min_bytes_for_wide_part = 0;
+        ENGINE = MergeTree() PARTITION BY `~Id` ORDER BY `~Id` SETTINGS min_bytes_for_wide_part = 0, replace_long_file_name_to_hash = 0;
         """
     )
     node.query("""INSERT INTO test.`T.a_b,l-e!` VALUES (1);""")
@@ -48,7 +48,7 @@ def test_file_path_escaping(started_cluster):
     node.query(
         """
         CREATE TABLE `test 2`.`T.a_b,l-e!` UUID '12345678-1000-4000-8000-000000000001' (`~Id` UInt32)
-        ENGINE = MergeTree() PARTITION BY `~Id` ORDER BY `~Id` SETTINGS min_bytes_for_wide_part = 0;
+        ENGINE = MergeTree() PARTITION BY `~Id` ORDER BY `~Id` SETTINGS min_bytes_for_wide_part = 0, replace_long_file_name_to_hash = 0;
         """
     )
     node.query("""INSERT INTO `test 2`.`T.a_b,l-e!` VALUES (1);""")
diff --git a/tests/integration/test_mutations_hardlinks/configs/wide_parts_only.xml b/tests/integration/test_mutations_hardlinks/configs/wide_parts_only.xml
index 10b9edef36dd..4d1a33577995 100644
--- a/tests/integration/test_mutations_hardlinks/configs/wide_parts_only.xml
+++ b/tests/integration/test_mutations_hardlinks/configs/wide_parts_only.xml
@@ -2,5 +2,6 @@
     <merge_tree>
         <min_rows_for_wide_part>0</min_rows_for_wide_part>
         <min_bytes_for_wide_part>0</min_bytes_for_wide_part>
+        <replace_long_file_name_to_hash>0</replace_long_file_name_to_hash>
     </merge_tree>
 </clickhouse>
diff --git a/tests/integration/test_partition/test.py b/tests/integration/test_partition/test.py
index 97d21d14184f..054418a8ba90 100644
--- a/tests/integration/test_partition/test.py
+++ b/tests/integration/test_partition/test.py
@@ -150,7 +150,7 @@ def partition_table_complex(started_cluster):
     q("DROP TABLE IF EXISTS test.partition_complex")
     q(
         "CREATE TABLE test.partition_complex (p Date, k Int8, v1 Int8 MATERIALIZED k + 1) "
-        "ENGINE = MergeTree PARTITION BY p ORDER BY k SETTINGS index_granularity=1, index_granularity_bytes=0, compress_marks=false, compress_primary_key=false, ratio_of_defaults_for_sparse_serialization=1"
+        "ENGINE = MergeTree PARTITION BY p ORDER BY k SETTINGS index_granularity=1, index_granularity_bytes=0, compress_marks=false, compress_primary_key=false, ratio_of_defaults_for_sparse_serialization=1, replace_long_file_name_to_hash=false"
     )
     q("INSERT INTO test.partition_complex (p, k) VALUES(toDate(31), 1)")
     q("INSERT INTO test.partition_complex (p, k) VALUES(toDate(1), 2)")
diff --git a/tests/queries/0_stateless/00961_checksums_in_system_parts_columns_table.sql b/tests/queries/0_stateless/00961_checksums_in_system_parts_columns_table.sql
index 8df7d728560d..70db45e4f368 100644
--- a/tests/queries/0_stateless/00961_checksums_in_system_parts_columns_table.sql
+++ b/tests/queries/0_stateless/00961_checksums_in_system_parts_columns_table.sql
@@ -4,7 +4,13 @@ DROP TABLE IF EXISTS test_00961;
 
 CREATE TABLE test_00961 (d Date, a String, b UInt8, x String, y Int8, z UInt32)
     ENGINE = MergeTree PARTITION BY d ORDER BY (a, b)
-    SETTINGS index_granularity = 111, min_bytes_for_wide_part = 0, compress_marks = 0, compress_primary_key = 0, index_granularity_bytes = '10Mi', ratio_of_defaults_for_sparse_serialization = 1;
+    SETTINGS index_granularity = 111,
+    min_bytes_for_wide_part = 0,
+    compress_marks = 0,
+    compress_primary_key = 0,
+    index_granularity_bytes = '10Mi',
+    ratio_of_defaults_for_sparse_serialization = 1,
+    replace_long_file_name_to_hash = 0;
 
 INSERT INTO test_00961 VALUES ('2000-01-01', 'Hello, world!', 123, 'xxx yyy', -123, 123456789);
 
diff --git a/tests/queries/0_stateless/02253_empty_part_checksums.sh b/tests/queries/0_stateless/02253_empty_part_checksums.sh
index 5d4e750f46de..371c0768e3d0 100755
--- a/tests/queries/0_stateless/02253_empty_part_checksums.sh
+++ b/tests/queries/0_stateless/02253_empty_part_checksums.sh
@@ -10,7 +10,7 @@ $CLICKHOUSE_CLIENT -q "drop table if exists rmt sync;"
 $CLICKHOUSE_CLIENT -q "CREATE TABLE rmt (a UInt8, b Int16, c Float32, d String, e Array(UInt8), f Nullable(UUID), g Tuple(UInt8, UInt16))
 ENGINE = ReplicatedMergeTree('/test/02253/$CLICKHOUSE_TEST_ZOOKEEPER_PREFIX/rmt', '1') ORDER BY a PARTITION BY b % 10
 SETTINGS old_parts_lifetime = 1, cleanup_delay_period = 0, cleanup_delay_period_random_add = 0,
-cleanup_thread_preferred_points_per_iteration=0, min_bytes_for_wide_part=0, remove_empty_parts=0"
+cleanup_thread_preferred_points_per_iteration=0, min_bytes_for_wide_part=0, remove_empty_parts=0, replace_long_file_name_to_hash=0"
 
 $CLICKHOUSE_CLIENT --insert_keeper_fault_injection_probability=0 -q "INSERT INTO rmt SELECT rand(1), 0, 1 / rand(3), toString(rand(4)), [rand(5), rand(6)], rand(7) % 2 ? NULL : generateUUIDv4(), (rand(8), rand(9)) FROM numbers(1000);"
 
diff --git a/tests/queries/0_stateless/02869_insert_filenames_collisions.reference b/tests/queries/0_stateless/02869_insert_filenames_collisions.reference
new file mode 100644
index 000000000000..d835614ae165
--- /dev/null
+++ b/tests/queries/0_stateless/02869_insert_filenames_collisions.reference
@@ -0,0 +1,3 @@
+e798545eefc8b7a1c2c81ff00c064ad8
+1	1
+2	2
diff --git a/tests/queries/0_stateless/02869_insert_filenames_collisions.sql b/tests/queries/0_stateless/02869_insert_filenames_collisions.sql
new file mode 100644
index 000000000000..441355930059
--- /dev/null
+++ b/tests/queries/0_stateless/02869_insert_filenames_collisions.sql
@@ -0,0 +1,73 @@
+DROP TABLE IF EXISTS t_collisions;
+
+SELECT lower(hex(reverse(CAST(sipHash128('very_very_long_column_name_that_will_be_replaced_with_hash'), 'FixedString(16)'))));
+
+CREATE TABLE t_collisions
+(
+    `very_very_long_column_name_that_will_be_replaced_with_hash` Int32,
+    `e798545eefc8b7a1c2c81ff00c064ad8` Int32
+)
+ENGINE = MergeTree
+ORDER BY tuple()
+SETTINGS replace_long_file_name_to_hash = 1, max_file_name_length = 42; -- { serverError BAD_ARGUMENTS }
+
+DROP TABLE IF EXISTS t_collisions;
+
+CREATE TABLE t_collisions
+(
+    `col1` Int32,
+    `e798545eefc8b7a1c2c81ff00c064ad8` Int32
+)
+ENGINE = MergeTree
+ORDER BY tuple()
+SETTINGS replace_long_file_name_to_hash = 1, max_file_name_length = 42;
+
+ALTER TABLE t_collisions ADD COLUMN very_very_long_column_name_that_will_be_replaced_with_hash Int32;  -- { serverError BAD_ARGUMENTS }
+ALTER TABLE t_collisions RENAME COLUMN col1 TO very_very_long_column_name_that_will_be_replaced_with_hash;  -- { serverError BAD_ARGUMENTS }
+
+DROP TABLE IF EXISTS t_collisions;
+
+CREATE TABLE t_collisions
+(
+    `very_very_long_column_name_that_will_be_replaced_with_hash` Int32,
+    `e798545eefc8b7a1c2c81ff00c064ad8` Int32
+)
+ENGINE = MergeTree
+ORDER BY tuple()
+SETTINGS replace_long_file_name_to_hash = 0;
+
+INSERT INTO t_collisions VALUES (1, 1);
+
+ALTER TABLE t_collisions MODIFY SETTING replace_long_file_name_to_hash = 1, max_file_name_length = 42; -- { serverError BAD_ARGUMENTS }
+
+INSERT INTO t_collisions VALUES (2, 2);
+
+SELECT * FROM t_collisions ORDER BY e798545eefc8b7a1c2c81ff00c064ad8;
+
+DROP TABLE IF EXISTS t_collisions;
+
+CREATE TABLE t_collisions
+(
+    `id` Int,
+    `col` Array(String),
+    `col.s` Array(LowCardinality(String)),
+    `col.u` Array(LowCardinality(String))
+)
+ENGINE = MergeTree
+ORDER BY id; -- { serverError BAD_ARGUMENTS }
+
+DROP TABLE IF EXISTS t_collisions;
+
+CREATE TABLE t_collisions
+(
+    `id` Int,
+    `col` String,
+    `col.s` Array(LowCardinality(String)),
+    `col.u` Array(LowCardinality(String))
+)
+ENGINE = MergeTree
+ORDER BY id;
+
+ALTER TABLE t_collisions MODIFY COLUMN col Array(String); -- { serverError BAD_ARGUMENTS }
+
+DROP TABLE IF EXISTS t_collisions;
