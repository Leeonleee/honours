{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 37742,
  "instance_id": "ClickHouse__ClickHouse-37742",
  "issue_numbers": [
    "37735"
  ],
  "base_commit": "ee302f2d9fe9238481b87b0dd1c627bdf42f79b9",
  "patch": "diff --git a/src/Functions/FunctionHashID.h b/src/Functions/FunctionHashID.h\nindex fbfb368bec7d..30f08c96eca1 100644\n--- a/src/Functions/FunctionHashID.h\n+++ b/src/Functions/FunctionHashID.h\n@@ -51,9 +51,11 @@ class FunctionHashID : public IFunction\n \n     bool isSuitableForShortCircuitArgumentsExecution(const DataTypesWithConstInfo & /*arguments*/) const override { return false; }\n \n+    bool useDefaultImplementationForConstants() const override { return true; }\n+\n     DataTypePtr getReturnTypeImpl(const ColumnsWithTypeAndName & arguments) const override\n     {\n-        if (arguments.size() < 1)\n+        if (arguments.empty())\n             throw Exception(ErrorCodes::TOO_FEW_ARGUMENTS_FOR_FUNCTION, \"Function {} expects at least one argument\", getName());\n \n         const auto & id_col = arguments[0];\n@@ -114,18 +116,16 @@ class FunctionHashID : public IFunction\n         const auto & numcolumn = arguments[0].column;\n \n         if (checkAndGetColumn<ColumnUInt8>(numcolumn.get()) || checkAndGetColumn<ColumnUInt16>(numcolumn.get())\n-            || checkAndGetColumn<ColumnUInt32>(numcolumn.get()) || checkAndGetColumn<ColumnUInt64>(numcolumn.get())\n-            || checkAndGetColumnConst<ColumnUInt8>(numcolumn.get()) || checkAndGetColumnConst<ColumnUInt16>(numcolumn.get())\n-            || checkAndGetColumnConst<ColumnUInt32>(numcolumn.get()) || checkAndGetColumnConst<ColumnUInt64>(numcolumn.get()))\n+            || checkAndGetColumn<ColumnUInt32>(numcolumn.get()) || checkAndGetColumn<ColumnUInt64>(numcolumn.get()))\n         {\n             std::string salt;\n-            UInt8 minLength = 0;\n+            UInt8 min_length = 0;\n             std::string alphabet;\n \n             if (arguments.size() >= 4)\n             {\n                 const auto & alphabetcolumn = arguments[3].column;\n-                if (auto alpha_col = checkAndGetColumnConst<ColumnString>(alphabetcolumn.get()))\n+                if (const auto * alpha_col = checkAndGetColumnConst<ColumnString>(alphabetcolumn.get()))\n                 {\n                     alphabet = alpha_col->getValue<String>();\n                     if (alphabet.find('\\0') != std::string::npos)\n@@ -138,18 +138,18 @@ class FunctionHashID : public IFunction\n             if (arguments.size() >= 3)\n             {\n                 const auto & minlengthcolumn = arguments[2].column;\n-                if (auto min_length_col = checkAndGetColumnConst<ColumnUInt8>(minlengthcolumn.get()))\n-                    minLength = min_length_col->getValue<UInt8>();\n+                if (const auto * min_length_col = checkAndGetColumnConst<ColumnUInt8>(minlengthcolumn.get()))\n+                    min_length = min_length_col->getValue<UInt8>();\n             }\n \n             if (arguments.size() >= 2)\n             {\n                 const auto & saltcolumn = arguments[1].column;\n-                if (auto salt_col = checkAndGetColumnConst<ColumnString>(saltcolumn.get()))\n+                if (const auto * salt_col = checkAndGetColumnConst<ColumnString>(saltcolumn.get()))\n                     salt = salt_col->getValue<String>();\n             }\n \n-            hashidsxx::Hashids hash(salt, minLength, alphabet);\n+            hashidsxx::Hashids hash(salt, min_length, alphabet);\n \n             auto col_res = ColumnString::create();\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02293_hashid.reference b/tests/queries/0_stateless/02293_hashid.reference\nindex 9ae4cce3944f..f36b15002880 100644\n--- a/tests/queries/0_stateless/02293_hashid.reference\n+++ b/tests/queries/0_stateless/02293_hashid.reference\n@@ -8,4 +8,5 @@\n 2\tobmgndljgajpkeao\n 3\tdldokmpjpgjgeanb\n 4\tnkdlpgajngjnobme\n-YQrvD5XGvbx\n+xkOpDGxQpVB\n+jR\ndiff --git a/tests/queries/0_stateless/02293_hashid.sql b/tests/queries/0_stateless/02293_hashid.sql\nindex 145bd76ccbf2..45aaefe7356b 100644\n--- a/tests/queries/0_stateless/02293_hashid.sql\n+++ b/tests/queries/0_stateless/02293_hashid.sql\n@@ -3,3 +3,5 @@ SET allow_experimental_hash_functions = 1;\n select number, hashid(number) from system.numbers limit 5;\n select number, hashid(number, 's3cr3t', 16, 'abcdefghijklmnop') from system.numbers limit 5;\n select hashid(1234567890123456, 's3cr3t');\n+\n+SELECT  hashid(1, hashid(2));\n",
  "problem_statement": "FunctionHashID: reference binding to null pointer of type 'const DB::IColumn'\nhttps://s3.amazonaws.com/clickhouse-test-reports/0/154cae43562f96a12936fd26e04e5fcf689ed9ba/fuzzer_astfuzzerubsan,actions//report.html\r\n\r\n```\r\n2022.06.01 13:01:01.170312 [ 437 ] {} <Fatal> BaseDaemon: ########################################\r\n2022.06.01 13:01:01.170414 [ 437 ] {} <Fatal> BaseDaemon: (version 22.6.1.1 (official build), build id: C85AC48A36A9E725) (from thread 175) (query_id: a50b5ac8-3141-459b-90dc-90d90df5c4ad) (query: SELECT hashid('1', '0.0000001023', NULL), NULL, hashid(256, hashid(9223372036854775806, '0.02'), '2.56'), 65535, hashid('-21474836.48', NULL)) Received signal Unknown signal (-3)\r\n2022.06.01 13:01:01.170450 [ 437 ] {} <Fatal> BaseDaemon: Sanitizer trap.\r\n2022.06.01 13:01:01.170506 [ 437 ] {} <Fatal> BaseDaemon: Stack trace: 0xfc5b7aa 0x223ee551 0xfc11456 0xfc1de1f 0x16829610 0x2256c225 0x2256b97e 0x2256c38f 0x22d34457 0x23199f88 0x231af4f2 0x231a1d50 0x231a6e8c 0x2317a8bc 0x23164899 0x2316eae2 0x23173ef9 0x238f017b 0x238e3655 0x238dca60 0x238d915c 0x23955e1c 0x23952ee7 0x23950c81 0x2388ee28 0x2388d87e 0x23d62232 0x23d5f4ca 0x24d19bf8 0x24d36c36 0x26bd790c 0x26bd7de5 0x26d56047 0x26d5392c 0x7f89a31ff609 0x7f89a3124163\r\n2022.06.01 13:01:01.178861 [ 437 ] {} <Fatal> BaseDaemon: 0.1. inlined from ./build_docker/../src/Common/StackTrace.cpp:305: StackTrace::tryCapture()\r\n2022.06.01 13:01:01.178885 [ 437 ] {} <Fatal> BaseDaemon: 0. ../src/Common/StackTrace.cpp:266: StackTrace::StackTrace() @ 0xfc5b7aa in /workspace/clickhouse\r\n2022.06.01 13:01:01.197471 [ 437 ] {} <Fatal> BaseDaemon: 1. ./build_docker/../src/Daemon/BaseDaemon.cpp:0: sanitizerDeathCallback() @ 0x223ee551 in /workspace/clickhouse\r\n2022.06.01 13:01:02.179782 [ 437 ] {} <Fatal> BaseDaemon: 2. __sanitizer::Die() @ 0xfc11456 in /workspace/clickhouse\r\n2022.06.01 13:01:03.146077 [ 437 ] {} <Fatal> BaseDaemon: 3. ? @ 0xfc1de1f in /workspace/clickhouse\r\n2022.06.01 13:01:04.114631 [ 437 ] {} <Fatal> BaseDaemon: 4. DB::FunctionHashID::getReturnTypeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&) const @ 0x16829610 in /workspace/clickhouse\r\n2022.06.01 13:01:04.128425 [ 437 ] {} <Fatal> BaseDaemon: 5. ./build_docker/../src/Functions/IFunction.cpp:478: DB::IFunctionOverloadResolver::getReturnTypeWithoutLowCardinality(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&) const @ 0x2256c225 in /workspace/clickhouse\r\n2022.06.01 13:01:04.141670 [ 437 ] {} <Fatal> BaseDaemon: 6. ./build_docker/../src/Functions/IFunction.cpp:424: DB::IFunctionOverloadResolver::getReturnType(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&) const @ 0x2256b97e in /workspace/clickhouse\r\n2022.06.01 13:01:04.155275 [ 437 ] {} <Fatal> BaseDaemon: 7. ./build_docker/../src/Functions/IFunction.cpp:439: DB::IFunctionOverloadResolver::build(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&) const @ 0x2256c38f in /workspace/clickhouse\r\n2022.06.01 13:01:04.329290 [ 437 ] {} <Fatal> BaseDaemon: 8.1. inlined from ./build_docker/../contrib/libcxx/include/__memory/shared_ptr.h:617: shared_ptr\r\n2022.06.01 13:01:04.329340 [ 437 ] {} <Fatal> BaseDaemon: 8.2. inlined from ../contrib/libcxx/include/__memory/shared_ptr.h:724: std::__1::shared_ptr<DB::IFunctionBase>::operator=(std::__1::shared_ptr<DB::IFunctionBase>&&)\r\n2022.06.01 13:01:04.329387 [ 437 ] {} <Fatal> BaseDaemon: 8. ../src/Interpreters/ActionsDAG.cpp:186: DB::ActionsDAG::addFunction(std::__1::shared_ptr<DB::IFunctionOverloadResolver> const&, std::__1::vector<DB::ActionsDAG::Node const*, std::__1::allocator<DB::ActionsDAG::Node const*> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >) @ 0x22d34457 in /workspace/clickhouse\r\n2022.06.01 13:01:04.377968 [ 437 ] {} <Fatal> BaseDaemon: 9. ./build_docker/../src/Interpreters/ActionsVisitor.cpp:0: DB::ScopeStack::addFunction(std::__1::shared_ptr<DB::IFunctionOverloadResolver> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >) @ 0x23199f88 in /workspace/clickhouse\r\n2022.06.01 13:01:04.431397 [ 437 ] {} <Fatal> BaseDaemon: 10.1. inlined from ./build_docker/../contrib/libcxx/include/string:1445: std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__is_long() const\r\n2022.06.01 13:01:04.431433 [ 437 ] {} <Fatal> BaseDaemon: 10.2. inlined from ../contrib/libcxx/include/string:2231: ~basic_string\r\n2022.06.01 13:01:04.431471 [ 437 ] {} <Fatal> BaseDaemon: 10. ../src/Interpreters/ActionsVisitor.h:180: DB::ActionsMatcher::Data::addFunction(std::__1::shared_ptr<DB::IFunctionOverloadResolver> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >) @ 0x231af4f2 in /workspace/clickhouse\r\n2022.06.01 13:01:04.481055 [ 437 ] {} <Fatal> BaseDaemon: 11. ./build_docker/../src/Interpreters/ActionsVisitor.cpp:0: DB::ActionsMatcher::visit(DB::ASTFunction const&, std::__1::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x231a1d50 in /workspace/clickhouse\r\n2022.06.01 13:01:04.532756 [ 437 ] {} <Fatal> BaseDaemon: 12. ./build_docker/../contrib/libcxx/include/vector:0: DB::ActionsMatcher::visit(DB::ASTExpressionList&, std::__1::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x231a6e8c in /workspace/clickhouse\r\n2022.06.01 13:01:04.587892 [ 437 ] {} <Fatal> BaseDaemon: 13. ./build_docker/../src/Interpreters/InDepthNodeVisitor.h:43: DB::InDepthNodeVisitor<DB::ActionsMatcher, true, false, std::__1::shared_ptr<DB::IAST> const>::visit(std::__1::shared_ptr<DB::IAST> const&) @ 0x2317a8bc in /workspace/clickhouse\r\n2022.06.01 13:01:04.643294 [ 437 ] {} <Fatal> BaseDaemon: 14.1. inlined from ./build_docker/../src/Interpreters/ActionsVisitor.h:185: DB::ActionsMatcher::Data::getActions()\r\n2022.06.01 13:01:04.643340 [ 437 ] {} <Fatal> BaseDaemon: 14. ../src/Interpreters/ExpressionAnalyzer.cpp:615: DB::ExpressionAnalyzer::getRootActions(std::__1::shared_ptr<DB::IAST> const&, bool, std::__1::shared_ptr<DB::ActionsDAG>&, bool) @ 0x23164899 in /workspace/clickhouse\r\n2022.06.01 13:01:04.704922 [ 437 ] {} <Fatal> BaseDaemon: 15. ./build_docker/../src/Interpreters/ExpressionAnalyzer.cpp:0: DB::SelectQueryExpressionAnalyzer::appendSelect(DB::ExpressionActionsChain&, bool) @ 0x2316eae2 in /workspace/clickhouse\r\n2022.06.01 13:01:04.768851 [ 437 ] {} <Fatal> BaseDaemon: 16. ./build_docker/../src/Interpreters/ExpressionAnalyzer.cpp:0: DB::ExpressionAnalysisResult::ExpressionAnalysisResult(DB::SelectQueryExpressionAnalyzer&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, bool, bool, bool, std::__1::shared_ptr<DB::FilterDAGInfo> const&, DB::Block const&) @ 0x23173ef9 in /workspace/clickhouse\r\n2022.06.01 13:01:04.857395 [ 437 ] {} <Fatal> BaseDaemon: 17. ./build_docker/../src/Interpreters/InterpreterSelectQuery.cpp:692: DB::InterpreterSelectQuery::getSampleBlockImpl() @ 0x238f017b in /workspace/clickhouse\r\n2022.06.01 13:01:04.942067 [ 437 ] {} <Fatal> BaseDaemon: 18. ./build_docker/../src/Interpreters/InterpreterSelectQuery.cpp:552: DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const>, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, DB::SubqueryForSet, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, DB::SubqueryForSet> > >, std::__1::unordered_map<DB::PreparedSetKey, std::__1::shared_ptr<DB::Set>, DB::PreparedSetKey::Hash, std::__1::equal_to<DB::PreparedSetKey>, std::__1::allocator<std::__1::pair<DB::PreparedSetKey const, std::__1::shared_ptr<DB::Set> > > >)::$_1::operator()(bool) const @ 0x238e3655 in /workspace/clickhouse\r\n2022.06.01 13:01:05.024287 [ 437 ] {} <Fatal> BaseDaemon: 19. ./build_docker/../src/Interpreters/InterpreterSelectQuery.cpp:0: DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const>, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, DB::SubqueryForSet, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, DB::SubqueryForSet> > >, std::__1::unordered_map<DB::PreparedSetKey, std::__1::shared_ptr<DB::Set>, DB::PreparedSetKey::Hash, std::__1::equal_to<DB::PreparedSetKey>, std::__1::allocator<std::__1::pair<DB::PreparedSetKey const, std::__1::shared_ptr<DB::Set> > > >) @ 0x238dca60 in /workspace/clickhouse\r\n2022.06.01 13:01:05.106188 [ 437 ] {} <Fatal> BaseDaemon: 20. ./build_docker/../src/Interpreters/InterpreterSelectQuery.cpp:165: DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const>, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x238d915c in /workspace/clickhouse\r\n2022.06.01 13:01:05.139970 [ 437 ] {} <Fatal> BaseDaemon: 21. ./build_docker/../contrib/libcxx/include/__memory/unique_ptr.h:725: std::__1::__unique_if<DB::InterpreterSelectQuery>::__unique_single std::__1::make_unique<DB::InterpreterSelectQuery, std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context>&, DB::SelectQueryOptions&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&>(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context>&, DB::SelectQueryOptions&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x23955e1c in /workspace/clickhouse\r\n2022.06.01 13:01:05.167258 [ 437 ] {} <Fatal> BaseDaemon: 22.1. inlined from ./build_docker/../contrib/libcxx/include/__memory/compressed_pair.h:48: __compressed_pair_elem<DB::InterpreterSelectQuery *, void>\r\n2022.06.01 13:01:05.167289 [ 437 ] {} <Fatal> BaseDaemon: 22.2. inlined from ../contrib/libcxx/include/__memory/compressed_pair.h:130: __compressed_pair<DB::InterpreterSelectQuery *, std::__1::default_delete<DB::InterpreterSelectQuery> >\r\n2022.06.01 13:01:05.167328 [ 437 ] {} <Fatal> BaseDaemon: 22.3. inlined from ../contrib/libcxx/include/__memory/unique_ptr.h:220: unique_ptr<DB::InterpreterSelectQuery, std::__1::default_delete<DB::InterpreterSelectQuery>, void, void>\r\n2022.06.01 13:01:05.167368 [ 437 ] {} <Fatal> BaseDaemon: 22. ../src/Interpreters/InterpreterSelectWithUnionQuery.cpp:227: DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::__1::shared_ptr<DB::IAST> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x23952ee7 in /workspace/clickhouse\r\n2022.06.01 13:01:05.193772 [ 437 ] {} <Fatal> BaseDaemon: 23. ./build_docker/../src/Interpreters/InterpreterSelectWithUnionQuery.cpp:0: DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context const>, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x23950c81 in /workspace/clickhouse\r\n2022.06.01 13:01:05.205894 [ 437 ] {} <Fatal> BaseDaemon: 24. ./build_docker/../contrib/libcxx/include/__memory/unique_ptr.h:0: std::__1::__unique_if<DB::InterpreterSelectWithUnionQuery>::__unique_single std::__1::make_unique<DB::InterpreterSelectWithUnionQuery, std::__1::shared_ptr<DB::IAST>&, std::__1::shared_ptr<DB::Context>&, DB::SelectQueryOptions const&>(std::__1::shared_ptr<DB::IAST>&, std::__1::shared_ptr<DB::Context>&, DB::SelectQueryOptions const&) @ 0x2388ee28 in /workspace/clickhouse\r\n2022.06.01 13:01:05.216542 [ 437 ] {} <Fatal> BaseDaemon: 25.1. inlined from ./build_docker/../contrib/libcxx/include/__memory/compressed_pair.h:48: __compressed_pair_elem<DB::InterpreterSelectWithUnionQuery *, void>\r\n2022.06.01 13:01:05.216568 [ 437 ] {} <Fatal> BaseDaemon: 25.2. inlined from ../contrib/libcxx/include/__memory/compressed_pair.h:130: __compressed_pair<DB::InterpreterSelectWithUnionQuery *, std::__1::default_delete<DB::InterpreterSelectWithUnionQuery> >\r\n2022.06.01 13:01:05.216607 [ 437 ] {} <Fatal> BaseDaemon: 25.3. inlined from ../contrib/libcxx/include/__memory/unique_ptr.h:220: unique_ptr<DB::InterpreterSelectWithUnionQuery, std::__1::default_delete<DB::InterpreterSelectWithUnionQuery>, void, void>\r\n2022.06.01 13:01:05.216643 [ 437 ] {} <Fatal> BaseDaemon: 25. ../src/Interpreters/InterpreterFactory.cpp:122: DB::InterpreterFactory::get(std::__1::shared_ptr<DB::IAST>&, std::__1::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x2388d87e in /workspace/clickhouse\r\n2022.06.01 13:01:05.259759 [ 437 ] {} <Fatal> BaseDaemon: 26. ./build_docker/../src/Interpreters/executeQuery.cpp:660: DB::executeQueryImpl(char const*, char const*, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x23d62232 in /workspace/clickhouse\r\n2022.06.01 13:01:05.306166 [ 437 ] {} <Fatal> BaseDaemon: 27. ./build_docker/../src/Interpreters/executeQuery.cpp:1069: DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x23d5f4ca in /workspace/clickhouse\r\n2022.06.01 13:01:05.344488 [ 437 ] {} <Fatal> BaseDaemon: 28. ./build_docker/../src/Server/TCPHandler.cpp:332: DB::TCPHandler::runImpl() @ 0x24d19bf8 in /workspace/clickhouse\r\n2022.06.01 13:01:05.391874 [ 437 ] {} <Fatal> BaseDaemon: 29. ./build_docker/../src/Server/TCPHandler.cpp:1783: DB::TCPHandler::run() @ 0x24d36c36 in /workspace/clickhouse\r\n2022.06.01 13:01:05.396269 [ 437 ] {} <Fatal> BaseDaemon: 30. ./build_docker/../contrib/poco/Net/src/TCPServerConnection.cpp:57: Poco::Net::TCPServerConnection::start() @ 0x26bd790c in /workspace/clickhouse\r\n2022.06.01 13:01:05.403249 [ 437 ] {} <Fatal> BaseDaemon: 31.1. inlined from ./build_docker/../contrib/libcxx/include/__memory/unique_ptr.h:54: std::__1::default_delete<Poco::Net::TCPServerConnection>::operator()(Poco::Net::TCPServerConnection*) const\r\n2022.06.01 13:01:05.403277 [ 437 ] {} <Fatal> BaseDaemon: 31.2. inlined from ../contrib/libcxx/include/__memory/unique_ptr.h:315: std::__1::unique_ptr<Poco::Net::TCPServerConnection, std::__1::default_delete<Poco::Net::TCPServerConnection> >::reset(Poco::Net::TCPServerConnection*)\r\n2022.06.01 13:01:05.403313 [ 437 ] {} <Fatal> BaseDaemon: 31.3. inlined from ../contrib/libcxx/include/__memory/unique_ptr.h:269: ~unique_ptr\r\n2022.06.01 13:01:05.403349 [ 437 ] {} <Fatal> BaseDaemon: 31. ../contrib/poco/Net/src/TCPServerDispatcher.cpp:116: Poco::Net::TCPServerDispatcher::run() @ 0x26bd7de5 in /workspace/clickhouse\r\n2022.06.01 13:01:05.410419 [ 437 ] {} <Fatal> BaseDaemon: 32. ./build_docker/../contrib/poco/Foundation/src/ThreadPool.cpp:213: Poco::PooledThread::run() @ 0x26d56047 in /workspace/clickhouse\r\n2022.06.01 13:01:05.417331 [ 437 ] {} <Fatal> BaseDaemon: 33.1. inlined from ./build_docker/../contrib/poco/Foundation/include/Poco/SharedPtr.h:156: Poco::SharedPtr<Poco::Runnable, Poco::ReferenceCounter, Poco::ReleasePolicy<Poco::Runnable> >::assign(Poco::Runnable*)\r\n2022.06.01 13:01:05.417358 [ 437 ] {} <Fatal> BaseDaemon: 33.2. inlined from ../contrib/poco/Foundation/include/Poco/SharedPtr.h:208: Poco::SharedPtr<Poco::Runnable, Poco::ReferenceCounter, Poco::ReleasePolicy<Poco::Runnable> >::operator=(Poco::Runnable*)\r\n2022.06.01 13:01:05.417391 [ 437 ] {} <Fatal> BaseDaemon: 33. ../contrib/poco/Foundation/src/Thread_POSIX.cpp:360: Poco::ThreadImpl::runnableEntry(void*) @ 0x26d5392c in /workspace/clickhouse\r\n2022.06.01 13:01:05.417432 [ 437 ] {} <Fatal> BaseDaemon: 34. ? @ 0x7f89a31ff609 in ?\r\n2022.06.01 13:01:05.417471 [ 437 ] {} <Fatal> BaseDaemon: 35. __clone @ 0x7f89a3124163 in ?\r\n2022.06.01 13:01:05.704804 [ 437 ] {} <Fatal> BaseDaemon: Checksum of the binary: 79FFE3C7CA8806ECAB1A5C2D9D4F5C3C, integrity check passed.\r\n```\r\n\r\n#37013\r\ncc: @mnutt, @yakov-olkhovskiy \r\n\n",
  "hints_text": "```sql\r\nSET allow_experimental_hash_functions = 1;\r\nSELECT  hashid(1, hashid(2));\r\n```",
  "created_at": "2022-06-01T12:43:05Z",
  "modified_files": [
    "src/Functions/FunctionHashID.h"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/02293_hashid.reference",
    "tests/queries/0_stateless/02293_hashid.sql"
  ]
}