{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 23309,
  "instance_id": "ClickHouse__ClickHouse-23309",
  "issue_numbers": [
    "21167"
  ],
  "base_commit": "b61a24634f0fea9443996db61e2552c1b3f7c845",
  "patch": "diff --git a/src/Client/MultiplexedConnections.cpp b/src/Client/MultiplexedConnections.cpp\nindex 2992e991df7d..350beffce280 100644\n--- a/src/Client/MultiplexedConnections.cpp\n+++ b/src/Client/MultiplexedConnections.cpp\n@@ -13,6 +13,7 @@ namespace ErrorCodes\n     extern const int MISMATCH_REPLICAS_DATA_SOURCES;\n     extern const int NO_AVAILABLE_REPLICA;\n     extern const int TIMEOUT_EXCEEDED;\n+    extern const int UNKNOWN_PACKET_FROM_SERVER;\n }\n \n \n@@ -278,7 +279,22 @@ Packet MultiplexedConnections::receivePacketUnlocked(AsyncCallback async_callbac\n     Packet packet;\n     {\n         AsyncCallbackSetter async_setter(current_connection, std::move(async_callback));\n-        packet = current_connection->receivePacket();\n+\n+        try\n+        {\n+            packet = current_connection->receivePacket();\n+        }\n+        catch (Exception & e)\n+        {\n+            if (e.code() == ErrorCodes::UNKNOWN_PACKET_FROM_SERVER)\n+            {\n+                /// Exception may happen when packet is received, e.g. when got unknown packet.\n+                /// In this case, invalidate replica, so that we would not read from it anymore.\n+                current_connection->disconnect();\n+                invalidateReplica(state);\n+            }\n+            throw;\n+        }\n     }\n \n     switch (packet.type)\ndiff --git a/src/Core/Settings.h b/src/Core/Settings.h\nindex c566d18ca4fc..b589e30f5942 100644\n--- a/src/Core/Settings.h\n+++ b/src/Core/Settings.h\n@@ -224,6 +224,7 @@ class IColumn;\n     /** Settings for testing hedged requests */ \\\n     M(Milliseconds, sleep_in_send_tables_status_ms, 0, \"Time to sleep in sending tables status response in TCPHandler\", 0) \\\n     M(Milliseconds, sleep_in_send_data_ms, 0, \"Time to sleep in sending data in TCPHandler\", 0) \\\n+    M(UInt64, unknown_packet_in_send_data, 0, \"Send unknown packet instead of data Nth data packet\", 0) \\\n     \\\n     M(Bool, insert_allow_materialized_columns, 0, \"If setting is enabled, Allow materialized columns in INSERT.\", 0) \\\n     M(Seconds, http_connection_timeout, DEFAULT_HTTP_READ_BUFFER_CONNECTION_TIMEOUT, \"HTTP connection timeout.\", 0) \\\ndiff --git a/src/Server/TCPHandler.cpp b/src/Server/TCPHandler.cpp\nindex c6cd74f6c6a0..763fd00a293a 100644\n--- a/src/Server/TCPHandler.cpp\n+++ b/src/Server/TCPHandler.cpp\n@@ -300,6 +300,8 @@ void TCPHandler::runImpl()\n             /// Processing Query\n             state.io = executeQuery(state.query, query_context, false, state.stage, may_have_embedded_data);\n \n+            unknown_packet_in_send_data = query_context->getSettingsRef().unknown_packet_in_send_data;\n+\n             after_check_cancelled.restart();\n             after_send_progress.restart();\n \n@@ -1463,6 +1465,14 @@ void TCPHandler::sendData(const Block & block)\n \n     try\n     {\n+        /// For testing hedged requests\n+        if (unknown_packet_in_send_data)\n+        {\n+            --unknown_packet_in_send_data;\n+            if (unknown_packet_in_send_data == 0)\n+                writeVarUInt(UInt64(-1), *out);\n+        }\n+\n         writeVarUInt(Protocol::Server::Data, *out);\n         /// Send external table name (empty name is the main table)\n         writeStringBinary(\"\", *out);\ndiff --git a/src/Server/TCPHandler.h b/src/Server/TCPHandler.h\nindex 708d21c82517..ce0a4cee3ff6 100644\n--- a/src/Server/TCPHandler.h\n+++ b/src/Server/TCPHandler.h\n@@ -135,6 +135,8 @@ class TCPHandler : public Poco::Net::TCPServerConnection\n     ContextPtr connection_context;\n     ContextPtr query_context;\n \n+    size_t unknown_packet_in_send_data = 0;\n+\n     /// Streams for reading/writing from/to client connection socket.\n     std::shared_ptr<ReadBuffer> in;\n     std::shared_ptr<WriteBuffer> out;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01822_async_read_from_socket_crash.reference b/tests/queries/0_stateless/01822_async_read_from_socket_crash.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/01822_async_read_from_socket_crash.sh b/tests/queries/0_stateless/01822_async_read_from_socket_crash.sh\nnew file mode 100755\nindex 000000000000..b4bb2228a910\n--- /dev/null\n+++ b/tests/queries/0_stateless/01822_async_read_from_socket_crash.sh\n@@ -0,0 +1,9 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+\n+\n+for _ in {1..10}; do $CLICKHOUSE_CLIENT -q \"select number from remote('127.0.0.{2,3}', numbers(20)) limit 8 settings max_block_size = 2, unknown_packet_in_send_data=4, sleep_in_send_data_ms=100, async_socket_for_remote=1 format Null\" > /dev/null 2>&1 || true; done\n",
  "problem_statement": "Crash 21.2.4.6\nHad the similar problem after upgrade from 20.12.5.14\r\n\r\n```\r\n[ch-01] 2021.02.24 20:31:13.845342 [ 17553 ] <Fatal> BaseDaemon: ########################################\r\n[ch-01] 2021.02.24 20:31:13.845469 [ 17553 ] <Fatal> BaseDaemon: (version 21.2.4.6 (official build), build id: 6E2E926515F53BCF094B3D6BD7E9EB65BC5BCE6B) (from thread 10568) (query_id: b03fb6ff-7fe1-400e-bb55-d71b0c611525) Received signal Segmentation fault (11)\r\n[ch-01] 2021.02.24 20:31:13.845530 [ 17553 ] <Fatal> BaseDaemon: Address: 0x90 Access: read. Address not mapped to object.\r\n[ch-01] 2021.02.24 20:31:13.845583 [ 17553 ] <Fatal> BaseDaemon: Stack trace: 0xf518654 0xf518379 0xf525f05 0xf526640 0xe6ad857 0xf63b0ac 0xf63b879 0xf63b14c 0xf63b879 0xf63b14c 0xf63b839 0xf63ed80 0xf6432b6 0x84f6e4f 0x84fa8e3 0x7f6e6c5c9ea5 0x7f6e6c2f28dd\r\n[ch-01] 2021.02.24 20:31:13.845660 [ 17553 ] <Fatal> BaseDaemon: 2. ? @ 0xf518654 in /usr/bin/clickhouse\r\n[ch-01] 2021.02.24 20:31:13.845763 [ 17553 ] <Fatal> BaseDaemon: 3. DB::Connection::receivePacket(std::__1::function<void (Poco::Net::Socket&)>) @ 0xf518379 in /usr/bin/clickhouse\r\n[ch-01] 2021.02.24 20:31:13.845821 [ 17553 ] <Fatal> BaseDaemon: 4. DB::MultiplexedConnections::receivePacketUnlocked(std::__1::function<void (Poco::Net::Socket&)>) @ 0xf525f05 in /usr/bin/clickhouse\r\n[ch-01] 2021.02.24 20:31:13.845886 [ 17553 ] <Fatal> BaseDaemon: 5. DB::MultiplexedConnections::drain() @ 0xf526640 in /usr/bin/clickhouse\r\n[ch-01] 2021.02.24 20:31:13.845969 [ 17553 ] <Fatal> BaseDaemon: 6. DB::RemoteQueryExecutor::finish(std::__1::unique_ptr<DB::RemoteQueryExecutorReadContext, std::__1::default_delete<DB::RemoteQueryExecutorReadContext> >*) @ 0xe6ad857 in /usr/bin/clickhouse\r\n[ch-01] 2021.02.24 20:31:13.846067 [ 17553 ] <Fatal> BaseDaemon: 7. DB::PipelineExecutor::tryAddProcessorToStackIfUpdated(DB::ExecutingGraph::Edge&, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, unsigned long) @ 0xf63b0ac in /usr/bin/clickhouse\r\n[ch-01] 2021.02.24 20:31:13.846135 [ 17553 ] <Fatal> BaseDaemon: 8. DB::PipelineExecutor::prepareProcessor(unsigned long, unsigned long, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, std::__1::unique_lock<std::__1::mutex>) @ 0xf63b879 in /usr/bin/clickhouse\r\n[ch-01] 2021.02.24 20:31:13.846180 [ 17553 ] <Fatal> BaseDaemon: 9. DB::PipelineExecutor::tryAddProcessorToStackIfUpdated(DB::ExecutingGraph::Edge&, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, unsigned long) @ 0xf63b14c in /usr/bin/clickhouse\r\n[ch-01] 2021.02.24 20:31:13.846241 [ 17553 ] <Fatal> BaseDaemon: 10. DB::PipelineExecutor::prepareProcessor(unsigned long, unsigned long, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, std::__1::unique_lock<std::__1::mutex>) @ 0xf63b879 in /usr/bin/clickhouse\r\n[ch-01] 2021.02.24 20:31:13.846308 [ 17553 ] <Fatal> BaseDaemon: 11. DB::PipelineExecutor::tryAddProcessorToStackIfUpdated(DB::ExecutingGraph::Edge&, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, unsigned long) @ 0xf63b14c in /usr/bin/clickhouse\r\n[ch-01] 2021.02.24 20:31:13.846369 [ 17553 ] <Fatal> BaseDaemon: 12. DB::PipelineExecutor::prepareProcessor(unsigned long, unsigned long, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, std::__1::unique_lock<std::__1::mutex>) @ 0xf63b839 in /usr/bin/clickhouse\r\n[ch-01] 2021.02.24 20:31:13.846439 [ 17553 ] <Fatal> BaseDaemon: 13. DB::PipelineExecutor::executeStepImpl(unsigned long, unsigned long, std::__1::atomic<bool>*) @ 0xf63ed80 in /usr/bin/clickhouse\r\n[ch-01] 2021.02.24 20:31:13.846485 [ 17553 ] <Fatal> BaseDaemon: 14. ? @ 0xf6432b6 in /usr/bin/clickhouse\r\n[ch-01] 2021.02.24 20:31:13.846562 [ 17553 ] <Fatal> BaseDaemon: 15. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x84f6e4f in /usr/bin/clickhouse\r\n[ch-01] 2021.02.24 20:31:13.846622 [ 17553 ] <Fatal> BaseDaemon: 16. ? @ 0x84fa8e3 in /usr/bin/clickhouse\r\n[ch-01] 2021.02.24 20:31:13.846708 [ 17553 ] <Fatal> BaseDaemon: 17. start_thread @ 0x7ea5 in /usr/lib64/libpthread-2.17.so\r\n[ch-01] 2021.02.24 20:31:13.846796 [ 17553 ] <Fatal> BaseDaemon: 18. __clone @ 0xfe8dd in /usr/lib64/libc-2.17.so\r\n[ch-01] 2021.02.24 20:31:14.053143 [ 17553 ] <Fatal> BaseDaemon: Checksum of the binary: 88E22F0584BA91872F2E9BE493E6985B, integrity check passed.\r\n```\r\n\r\n_Originally posted by @chyy in https://github.com/ClickHouse/ClickHouse/issues/8997#issuecomment-785538830_\n",
  "hints_text": "@chyy can you grep your logs  for b03fb6ff-7fe1-400e-bb55-d71b0c611525\r\n\r\nzgrep b03fb6ff-7fe1-400e-bb55-d71b0c611525 /var/log/clickhouse-server/*\nLooks related to https://github.com/ClickHouse/ClickHouse/pull/17868 / async_socket_for_remote\r\n\r\n```\r\naddr2line -afiCe /usr/bin/clickhouse 0xf518654 0xf518379 0xf525f05 0xf526640 0xe6ad857 0xf63b0ac 0xf63b879 0xf63b14c 0xf63b879 0xf63b14c 0xf63b839 0xf63ed80 0xf6432b6 0x84f6e4f 0x84fa8e3 0x7f6e6c5c9ea5 0x7f6e6c2f28dd \r\n0x000000000f518654\r\nstd::__1::__function::__policy_func<void (Poco::Net::Socket&)>::operator=(decltype(nullptr))\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/functional:2210\r\nstd::__1::__function::__policy_func<void (Poco::Net::Socket&)>::operator=(std::__1::__function::__policy_func<void (Poco::Net::Socket&)>&&)\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/functional:2198\r\nstd::__1::function<void (Poco::Net::Socket&)>::operator=(std::__1::function<void (Poco::Net::Socket&)>&&)\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/functional:2525\r\nDB::ReadBufferFromPocoSocket::setAsyncCallback(std::__1::function<void (Poco::Net::Socket&)>)\r\n./obj-x86_64-linux-gnu/../src/IO/ReadBufferFromPocoSocket.h:31\r\noperator()\r\n./obj-x86_64-linux-gnu/../src/Client/Connection.cpp:753\r\next::basic_scope_guard<DB::Connection::receivePacket(std::__1::function<void (Poco::Net::Socket&)>)::$_3>::invoke()\r\n./obj-x86_64-linux-gnu/../base/common/../ext/scope_guard.h:97\r\n~basic_scope_guard\r\n./obj-x86_64-linux-gnu/../base/common/../ext/scope_guard.h:47\r\n0x000000000f518379\r\naddr2line: DWARF error: mangled line number section (bad file number)\r\naddr2line: DWARF error: mangled line number section (bad file number)\r\naddr2line: DWARF error: mangled line number section (bad file number)\r\naddr2line: DWARF error: invalid abstract instance DIE ref\r\nDB::Connection::receivePacket(std::__1::function<void (Poco::Net::Socket&)>)\r\n??:?\r\n0x000000000f525f05\r\n~__policy_func\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/functional:2191\r\n~function\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/functional:2547\r\nDB::MultiplexedConnections::receivePacketUnlocked(std::__1::function<void (Poco::Net::Socket&)>)\r\n./obj-x86_64-linux-gnu/../src/Client/MultiplexedConnections.cpp:252\r\n0x000000000f526640\r\n~__policy_func\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/functional:2191\r\n~function\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/functional:2547\r\nDB::MultiplexedConnections::drain()\r\n./obj-x86_64-linux-gnu/../src/Client/MultiplexedConnections.cpp:194\r\n0x000000000e6ad857\r\nDB::RemoteQueryExecutor::finish(std::__1::unique_ptr<DB::RemoteQueryExecutorReadContext, std::__1::default_delete<DB::RemoteQueryExecutorReadContext> >*)\r\n./obj-x86_64-linux-gnu/../src/DataStreams/RemoteQueryExecutor.cpp:330\r\n0x000000000f63b0ac\r\ndouble std::__1::__cxx_atomic_load<double>(std::__1::__cxx_atomic_base_impl<double> const*, std::__1::memory_order)\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/atomic:1006\r\nstd::__1::__atomic_base<double, false>::load(std::__1::memory_order) const\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/atomic:1615\r\npthread_mutex_unlock\r\n./obj-x86_64-linux-gnu/../src/Common/ThreadFuzzer.cpp:268\r\nstd::__1::__libcpp_mutex_unlock(pthread_mutex_t*)\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/__threading_support:415\r\nstd::__1::mutex::unlock()\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/src/mutex.cpp:47\r\n~unique_lock\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/__mutex_base:141\r\nDB::PipelineExecutor::tryAddProcessorToStackIfUpdated(DB::ExecutingGraph::Edge&, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, unsigned long)\r\n./obj-x86_64-linux-gnu/../src/Processors/Executors/PipelineExecutor.cpp:194\r\n0x000000000f63b879\r\nDB::PipelineExecutor::prepareProcessor(unsigned long, unsigned long, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, std::__1::unique_lock<std::__1::mutex>)\r\n??:?\r\n0x000000000f63b14c\r\nDB::PipelineExecutor::tryAddProcessorToStackIfUpdated(DB::ExecutingGraph::Edge&, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, unsigned long)\r\n??:?\r\n0x000000000f63b879\r\nDB::PipelineExecutor::prepareProcessor(unsigned long, unsigned long, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, std::__1::unique_lock<std::__1::mutex>)\r\n??:?\r\n0x000000000f63b14c\r\nDB::PipelineExecutor::tryAddProcessorToStackIfUpdated(DB::ExecutingGraph::Edge&, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, unsigned long)\r\n??:?\r\n0x000000000f63b839\r\nDB::PipelineExecutor::prepareProcessor(unsigned long, unsigned long, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, std::__1::unique_lock<std::__1::mutex>)\r\n??:?\r\n0x000000000f63ed80\r\nDB::PipelineExecutor::executeStepImpl(unsigned long, unsigned long, std::__1::atomic<bool>*)\r\n??:?\r\n0x000000000f6432b6\r\nstd::__1::shared_ptr<DB::ThreadGroupStatus>::operator bool() const\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/memory:2851\r\noperator()\r\n./obj-x86_64-linux-gnu/../src/Processors/Executors/PipelineExecutor.cpp:764\r\next::basic_scope_guard<DB::PipelineExecutor::executeImpl(unsigned long)::$_4::operator()() const::{lambda()#1}>::invoke()\r\n./obj-x86_64-linux-gnu/../base/common/../ext/scope_guard.h:97\r\n~basic_scope_guard\r\n./obj-x86_64-linux-gnu/../base/common/../ext/scope_guard.h:47\r\noperator()\r\n./obj-x86_64-linux-gnu/../src/Processors/Executors/PipelineExecutor.cpp:779\r\n_ZNSt3__118__invoke_constexprIRZN2DB16PipelineExecutor11executeImplEmE3$_4JEEEDTclclsr3std3__1E7forwardIT_Efp_Espclsr3std3__1E7forwardIT0_Efp0_EEEOS5_DpOS6_\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/type_traits:3682\r\ndecltype(auto) std::__1::__apply_tuple_impl<DB::PipelineExecutor::executeImpl(unsigned long)::$_4&, std::__1::tuple<>&>(DB::PipelineExecutor::executeImpl(unsigned long)::$_4&, std::__1::tuple<>&, std::__1::__tuple_indices<>)\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/tuple:1415\r\ndecltype(auto) std::__1::apply<DB::PipelineExecutor::executeImpl(unsigned long)::$_4&, std::__1::tuple<>&>(DB::PipelineExecutor::executeImpl(unsigned long)::$_4&, std::__1::tuple<>&)\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/tuple:1424\r\noperator()\r\n./obj-x86_64-linux-gnu/../src/Common/ThreadPool.h:178\r\n_ZNSt3__18__invokeIRZN20ThreadFromGlobalPoolC1IZN2DB16PipelineExecutor11executeImplEmE3$_4JEEEOT_DpOT0_EUlvE_JEEEDTclclsr3std3__1E7forwardIS6_Efp_Espclsr3std3__1E7forwardIS8_Efp0_EEES7_SA_\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/type_traits:3676\r\nvoid std::__1::__invoke_void_return_wrapper<void>::__call<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PipelineExecutor::executeImpl(unsigned long)::$_4>(DB::PipelineExecutor::executeImpl(unsigned long)::$_4&&)::{lambda()#1}&>(ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PipelineExecutor::executeImpl(unsigned long)::$_4>(DB::PipelineExecutor::executeImpl(unsigned long)::$_4&&)::{lambda()#1}&)\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/__functional_base:348\r\nstd::__1::__function::__default_alloc_func<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PipelineExecutor::executeImpl(unsigned long)::$_4>(DB::PipelineExecutor::executeImpl(unsigned long)::$_4&&)::{lambda()#1}, void ()>::operator()()\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/functional:1608\r\nvoid std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PipelineExecutor::executeImpl(unsigned long)::$_4>(DB::PipelineExecutor::executeImpl(unsigned long)::$_4&&)::{lambda()#1}, void ()> >(std::__1::__function::__policy_storage const*)\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/functional:2089\r\n0x00000000084f6e4f\r\nstd::__1::__function::__policy_func<void ()>::operator=(decltype(nullptr))\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/functional:2210\r\nstd::__1::function<void ()>::operator=(decltype(nullptr))\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/functional:2533\r\nThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>)\r\n./obj-x86_64-linux-gnu/../src/Common/ThreadPool.cpp:250\r\n0x00000000084fa8e3\r\nstd::__1::unique_ptr<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::{lambda()#3}>, std::__1::default_delete<ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::{lambda()#3}> >::reset(ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::{lambda()#3}*)\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/memory:1656\r\n~unique_ptr\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/memory:1612\r\nvoid* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::{lambda()#3}> >(std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::{lambda()#3}>)\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/thread:293\r\n0x00007f6e6c5c9ea5\r\n??\r\n??:0\r\n0x00007f6e6c2f28dd\r\n??\r\n??:0\r\n```\r\n\r\nSo - here?\r\nhttps://github.com/ClickHouse/ClickHouse/blame/v21.2.4.6-stable/src/Client/MultiplexedConnections.cpp#L252\r\n\r\n@KochetovNicolai may be it was fixed already in one of the last PRs? \nMaybe #20547 ?\n@KochetovNicolai But the fix is already present in version 21.2.4.\nThat's suspicious.\r\nBackported commit: https://github.com/ClickHouse/ClickHouse/pull/19912/commits/09c42f1d4d46ffedb4b7e23304c3e860e5712b5f\r\nAddr2line: \r\n`./obj-x86_64-linux-gnu/../src/Client/Connection.cpp:753\r\next::basic_scope_guard<DB::Connection::receivePacket(std::__1::function<void (Poco::Net::Socket&)>)::$_3>::invoke()`\r\nCrash is exactly in changed line\n```\r\ngdb ./21.2.4.6+debug/usr/bin/clickhouse\r\n(gdb) disas 'DB::Connection::receivePacket(std::__1::function<void (Poco::Net::Socket&)>)::$_3::operator()() const'\r\nDump of assembler code for function DB::Connection::receivePacket(std::__1::function<void (Poco::Net::Socket&)>)::$_3::operator()() const:\r\n   0x000000001aa46d30 <+0>:\tpush   %rbp\r\n   0x000000001aa46d31 <+1>:\tmov    %rsp,%rbp\r\n   0x000000001aa46d34 <+4>:\tsub    $0x50,%rsp\r\n   0x000000001aa46d38 <+8>:\tmov    %rdi,-0x8(%rbp)\r\n   0x000000001aa46d3c <+12>:\tmov    -0x8(%rbp),%rax\r\n   0x000000001aa46d40 <+16>:\tmov    (%rax),%rax\r\n   0x000000001aa46d43 <+19>:\tadd    $0x170,%rax\r\n   0x000000001aa46d49 <+25>:\tmov    %rax,%rdi\r\n   0x000000001aa46d4c <+28>:\tcallq  0x1aa473b0 <std::__1::shared_ptr<DB::ReadBufferFromPocoSocket>::operator->() const>\r\n   0x000000001aa46d51 <+33>:\tlea    -0x28(%rbp),%rcx\r\n   0x000000001aa46d55 <+37>:\tmov    %rcx,%rdi\r\n   0x000000001aa46d58 <+40>:\tmov    %rax,-0x40(%rbp)\r\n   0x000000001aa46d5c <+44>:\tmov    %rcx,-0x48(%rbp)\r\n   0x000000001aa46d60 <+48>:\tcallq  0x10d3dc50 <std::__1::function<void (Poco::Net::Socket&)>::function()>\r\n   0x000000001aa46d65 <+53>:\tmov    -0x40(%rbp),%rdi\r\n   0x000000001aa46d69 <+57>:\tmov    -0x48(%rbp),%rsi\r\n   0x000000001aa46d6d <+61>:\tcallq  0x1aa47d30 <DB::ReadBufferFromPocoSocket::setAsyncCallback(std::__1::function<void (Poco::Net::Socket&)>)>\r\n   0x000000001aa46d72 <+66>:\tjmpq   0x1aa46d77 <DB::Connection::receivePacket(std::__1::function<void (Poco::Net::Socket&)>)::$_3::operator()() const+71>\r\n   0x000000001aa46d77 <+71>:\tlea    -0x28(%rbp),%rdi\r\n   0x000000001aa46d7b <+75>:\tcallq  0x10d3dc80 <std::__1::function<void (Poco::Net::Socket&)>::~function()>\r\n   0x000000001aa46d80 <+80>:\tadd    $0x50,%rsp\r\n   0x000000001aa46d84 <+84>:\tpop    %rbp\r\n   0x000000001aa46d85 <+85>:\tretq   \r\n   0x000000001aa46d86 <+86>:\tmov    %rax,-0x30(%rbp)\r\n   0x000000001aa46d8a <+90>:\tmov    %edx,-0x34(%rbp)\r\n   0x000000001aa46d8d <+93>:\tlea    -0x28(%rbp),%rdi\r\n   0x000000001aa46d91 <+97>:\tcallq  0x10d3dc80 <std::__1::function<void (Poco::Net::Socket&)>::~function()>\r\n   0x000000001aa46d96 <+102>:\tmov    -0x30(%rbp),%rdi\r\n   0x000000001aa46d9a <+106>:\tcallq  0x20954740 <_Unwind_Resume>\r\nEnd of assembler dump.\r\n```\r\n```\r\ngdb ./21.3.1.6137+debug/usr/bin/clickhouse\r\n(gdb) disas 'DB::Connection::receivePacket(std::__1::function<void (Poco::Net::Socket&)>)::$_3::operator()() const'\r\nDump of assembler code for function DB::Connection::receivePacket(std::__1::function<void (Poco::Net::Socket&)>)::$_3::operator()() const:\r\n   0x000000001aeb1140 <+0>:\tpush   %rbp\r\n   0x000000001aeb1141 <+1>:\tmov    %rsp,%rbp\r\n   0x000000001aeb1144 <+4>:\tsub    $0x50,%rsp\r\n   0x000000001aeb1148 <+8>:\tmov    %rdi,-0x8(%rbp)\r\n   0x000000001aeb114c <+12>:\tmov    -0x8(%rbp),%rax\r\n   0x000000001aeb1150 <+16>:\tmov    (%rax),%rax\r\n   0x000000001aeb1153 <+19>:\tmov    %rax,%rcx\r\n   0x000000001aeb1156 <+22>:\tadd    $0x170,%rcx\r\n   0x000000001aeb115d <+29>:\tmov    %rcx,%rdi\r\n   0x000000001aeb1160 <+32>:\tmov    %rax,-0x40(%rbp)\r\n   0x000000001aeb1164 <+36>:\tcallq  0x1aeb5d00 <std::__1::shared_ptr<DB::ReadBufferFromPocoSocket>::operator bool() const>\r\n   0x000000001aeb1169 <+41>:\ttest   $0x1,%al\r\n   0x000000001aeb116b <+43>:\tjne    0x1aeb1176 <DB::Connection::receivePacket(std::__1::function<void (Poco::Net::Socket&)>)::$_3::operator()() const+54>\r\n   0x000000001aeb1171 <+49>:\tjmpq   0x1aeb11d1 <DB::Connection::receivePacket(std::__1::function<void (Poco::Net::Socket&)>)::$_3::operator()() const+145>\r\n   0x000000001aeb1176 <+54>:\tmov    -0x40(%rbp),%rax\r\n   0x000000001aeb117a <+58>:\tadd    $0x170,%rax\r\n   0x000000001aeb1180 <+64>:\tmov    %rax,%rdi\r\n   0x000000001aeb1183 <+67>:\tcallq  0x1aeb17f0 <std::__1::shared_ptr<DB::ReadBufferFromPocoSocket>::operator->() const>\r\n   0x000000001aeb1188 <+72>:\tlea    -0x28(%rbp),%rcx\r\n   0x000000001aeb118c <+76>:\tmov    %rcx,%rdi\r\n   0x000000001aeb118f <+79>:\tmov    %rax,-0x48(%rbp)\r\n   0x000000001aeb1193 <+83>:\tmov    %rcx,-0x50(%rbp)\r\n   0x000000001aeb1197 <+87>:\tcallq  0x1109bfc0 <std::__1::function<void (Poco::Net::Socket&)>::function()>\r\n   0x000000001aeb119c <+92>:\tmov    -0x48(%rbp),%rdi\r\n   0x000000001aeb11a0 <+96>:\tmov    -0x50(%rbp),%rsi\r\n   0x000000001aeb11a4 <+100>:\tcallq  0x1aeb2200 <DB::ReadBufferFromPocoSocket::setAsyncCallback(std::__1::function<void (Poco::Net::Socket&)>)>\r\n   0x000000001aeb11a9 <+105>:\tjmpq   0x1aeb11ae <DB::Connection::receivePacket(std::__1::function<void (Poco::Net::Socket&)>)::$_3::operator()() const+110>\r\n   0x000000001aeb11ae <+110>:\tlea    -0x28(%rbp),%rdi\r\n   0x000000001aeb11b2 <+114>:\tcallq  0x1109bff0 <std::__1::function<void (Poco::Net::Socket&)>::~function()>\r\n   0x000000001aeb11b7 <+119>:\tjmpq   0x1aeb11d1 <DB::Connection::receivePacket(std::__1::function<void (Poco::Net::Socket&)>)::$_3::operator()() const+145>\r\n   0x000000001aeb11bc <+124>:\tmov    %rax,-0x30(%rbp)\r\n   0x000000001aeb11c0 <+128>:\tmov    %edx,-0x34(%rbp)\r\n   0x000000001aeb11c3 <+131>:\tlea    -0x28(%rbp),%rdi\r\n   0x000000001aeb11c7 <+135>:\tcallq  0x1109bff0 <std::__1::function<void (Poco::Net::Socket&)>::~function()>\r\n   0x000000001aeb11cc <+140>:\tjmpq   0x1aeb11d7 <DB::Connection::receivePacket(std::__1::function<void (Poco::Net::Socket&)>)::$_3::operator()() const+151>\r\n   0x000000001aeb11d1 <+145>:\tadd    $0x50,%rsp\r\n   0x000000001aeb11d5 <+149>:\tpop    %rbp\r\n   0x000000001aeb11d6 <+150>:\tretq   \r\n   0x000000001aeb11d7 <+151>:\tmov    -0x30(%rbp),%rdi\r\n   0x000000001aeb11db <+155>:\tcallq  0x21008200 <_Unwind_Resume>\r\nEnd of assembler dump.\r\n```\r\n\r\nThe last one has check\r\n```\r\n   0x000000001aeb1164 <+36>:\tcallq  0x1aeb5d00 <std::__1::shared_ptr<DB::ReadBufferFromPocoSocket>::operator bool() const>\r\n   0x000000001aeb1169 <+41>:\ttest   $0x1,%al\r\n   0x000000001aeb116b <+43>:\tjne    0x1aeb1176 <DB::Connection::receivePacket(std::__1::function<void (Poco::Net::Socket&)>)::$_3::operator()() const+54>\r\n   0x000000001aeb1171 <+49>:\tjmpq   0x1aeb11d1 <DB::Connection::receivePacket(std::__1::function<void (Poco::Net::Socket&)>)::$_3::operator()() const+145>\r\n```\r\nbut the first one doesn't.\r\nNow we should understand why\nThat's because this fix will be only in 21.2.5\r\n![image](https://user-images.githubusercontent.com/4092911/109474510-a7d62380-7a85-11eb-98a0-5fb5de0eda36.png)\r\n\nwill be released in 21.2.5 and 21.1.6\nit seems the bug is still exists after upgrade\r\n\r\n```\r\n2021.04.15 17:09:30.304298 [ 32005 ] {1a75d1e4-5aa9-4c32-a732-b20c647d1d44} <Warning> TCPHandler: Client has gone away.\r\n2021.04.15 17:09:30.576915 [ 24306 ] {} <Fatal> BaseDaemon: ########################################\r\n2021.04.15 17:09:30.577016 [ 24306 ] {} <Fatal> BaseDaemon: (version 21.3.2.5 (official build), build id: 179BDBBF228667883DFCD900B8CD498272FC044F) (from thread 29072) (query_id: d45fea72-fb92-4f7e-8a0c-549e3053353a) Received signal Segmentation fault (11)\r\n2021.04.15 17:09:30.577061 [ 24306 ] {} <Fatal> BaseDaemon: Address: 0x20 Access: read. Address not mapped to object.\r\n2021.04.15 17:09:30.577099 [ 24306 ] {} <Fatal> BaseDaemon: Stack trace: 0xf7ea942 0xf80bed5 0xf80c6f0 0xe8c9b98 0xf92b1fc 0xf92b9c9 0xf92b29c 0xf92b9c9 0xf92b29c 0xf92b989 0xf92eed0 0xf9335d6 0x864f9df 0x8653473 0x7f454def4ea5 0x7f454dc1d8dd\r\n2021.04.15 17:09:30.577181 [ 24306 ] {} <Fatal> BaseDaemon: 1. DB::Connection::receivePacket() @ 0xf7ea942 in /usr/bin/clickhouse\r\n2021.04.15 17:09:30.577249 [ 24306 ] {} <Fatal> BaseDaemon: 2. DB::MultiplexedConnections::receivePacketUnlocked(std::__1::function<void (int, Poco::Timespan const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>) @ 0xf80bed5 in /usr/bin/clickhouse\r\n2021.04.15 17:09:30.577276 [ 24306 ] {} <Fatal> BaseDaemon: 3. DB::MultiplexedConnections::drain() @ 0xf80c6f0 in /usr/bin/clickhouse\r\n2021.04.15 17:09:30.577325 [ 24306 ] {} <Fatal> BaseDaemon: 4. DB::RemoteQueryExecutor::finish(std::__1::unique_ptr<DB::RemoteQueryExecutorReadContext, std::__1::default_delete<DB::RemoteQueryExecutorReadContext> >*) @ 0xe8c9b98 in /usr/bin/clickhouse\r\n2021.04.15 17:09:30.577372 [ 24306 ] {} <Fatal> BaseDaemon: 5. DB::PipelineExecutor::tryAddProcessorToStackIfUpdated(DB::ExecutingGraph::Edge&, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, unsigned long) @ 0xf92b1fc in /usr/bin/clickhouse\r\n2021.04.15 17:09:30.577413 [ 24306 ] {} <Fatal> BaseDaemon: 6. DB::PipelineExecutor::prepareProcessor(unsigned long, unsigned long, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, std::__1::unique_lock<std::__1::mutex>) @ 0xf92b9c9 in /usr/bin/clickhouse\r\n2021.04.15 17:09:30.577457 [ 24306 ] {} <Fatal> BaseDaemon: 7. DB::PipelineExecutor::tryAddProcessorToStackIfUpdated(DB::ExecutingGraph::Edge&, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, unsigned long) @ 0xf92b29c in /usr/bin/clickhouse\r\n2021.04.15 17:09:30.577486 [ 24306 ] {} <Fatal> BaseDaemon: 8. DB::PipelineExecutor::prepareProcessor(unsigned long, unsigned long, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, std::__1::unique_lock<std::__1::mutex>) @ 0xf92b9c9 in /usr/bin/clickhouse\r\n2021.04.15 17:09:30.577522 [ 24306 ] {} <Fatal> BaseDaemon: 9. DB::PipelineExecutor::tryAddProcessorToStackIfUpdated(DB::ExecutingGraph::Edge&, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, unsigned long) @ 0xf92b29c in /usr/bin/clickhouse\r\n2021.04.15 17:09:30.577560 [ 24306 ] {} <Fatal> BaseDaemon: 10. DB::PipelineExecutor::prepareProcessor(unsigned long, unsigned long, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, std::__1::unique_lock<std::__1::mutex>) @ 0xf92b989 in /usr/bin/clickhouse\r\n2021.04.15 17:09:30.577597 [ 24306 ] {} <Fatal> BaseDaemon: 11. DB::PipelineExecutor::executeStepImpl(unsigned long, unsigned long, std::__1::atomic<bool>*) @ 0xf92eed0 in /usr/bin/clickhouse\r\n2021.04.15 17:09:30.577630 [ 24306 ] {} <Fatal> BaseDaemon: 12. ? @ 0xf9335d6 in /usr/bin/clickhouse\r\n2021.04.15 17:09:30.577669 [ 24306 ] {} <Fatal> BaseDaemon: 13. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x864f9df in /usr/bin/clickhouse\r\n2021.04.15 17:09:30.577702 [ 24306 ] {} <Fatal> BaseDaemon: 14. ? @ 0x8653473 in /usr/bin/clickhouse\r\n2021.04.15 17:09:30.577756 [ 24306 ] {} <Fatal> BaseDaemon: 15. start_thread @ 0x7ea5 in /usr/lib64/libpthread-2.17.so\r\n2021.04.15 17:09:30.577803 [ 24306 ] {} <Fatal> BaseDaemon: 16. __clone @ 0xfe8dd in /usr/lib64/libc-2.17.so\r\n2021.04.15 17:09:30.789102 [ 24306 ] {} <Fatal> BaseDaemon: Checksum of the binary: 6A8A5851E18458237528EFE3B3339F9D, integrity check passed.\r\n```\n@KochetovNicolai any thoughts? \n@filimonov Did you check the version 21.3.7 which includes the patches?\nHm. Didn't check it but thought that all 21.3 have related patches. \r\n\r\nLet's redirect that question to @chyy - can you please try the 21.3.7? \n #20547 was merged before forking 21.3.\r\n\r\nSo all 21.3 versions should include it. Or we know some other issue in that piece of code fixed later @alexey-milovidov? \n>it seems the bug is still exists after upgrade\r\n\r\n@chyy can you please provide the following?\r\n\r\n- your linux kernel version (although unlikely this is related, since the only problem I'm aware of is query hangs not failures - #22109)\r\n- and full query log for this query (using `send_logs_level=trace` or if it will not send all logs by grepping the server logs by all query ids that was executed from this distributed query, or just `tail -n HUGE_NUM`) via gist or similar\r\n\r\nThis problem should happens only after disconnect AFAICS, and on disconnect there should be some exception that should be logged.\r\n\r\n>#20547 was merged before forking 21.3.\r\n\r\n@filimonov this is not that important, since merging hedged requests changes the code path.\n>Let's redirect that question to @chyy - can you please try the 21.3.7?\r\n\r\n@chyy But you definitely should try 21.3.7, since it contains #21643 (and a follow up #22183)\naddr2line\r\n```\r\n4ea5 0x7f454dc1d8dd\r\n0x000000000f7ea942\r\nDB::BufferBase::Buffer::end() const\r\n./obj-x86_64-linux-gnu/../src/IO/BufferBase.h:40\r\nDB::readVarUInt(unsigned long&, DB::ReadBuffer&)\r\n./obj-x86_64-linux-gnu/../src/IO/VarInt.h:146\r\nDB::Connection::receivePacket()\r\n./obj-x86_64-linux-gnu/../src/Client/Connection.cpp:772\r\n0x000000000f80bed5\r\nDB::MultiplexedConnections::receivePacketUnlocked(std::__1::function<void (int, Poco::Timespan const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>)\r\n./obj-x86_64-linux-gnu/../src/Client/MultiplexedConnections.cpp:?\r\n0x000000000f80c6f0\r\n~__policy_func\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/functional:2191\r\n~function\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/functional:2547\r\nDB::MultiplexedConnections::drain()\r\n./obj-x86_64-linux-gnu/../src/Client/MultiplexedConnections.cpp:209\r\n0x000000000e8c9b98\r\nDB::RemoteQueryExecutor::finish(std::__1::unique_ptr<DB::RemoteQueryExecutorReadContext, std::__1::default_delete<DB::RemoteQueryExecutorReadContext> >*)\r\n./obj-x86_64-linux-gnu/../src/DataStreams/RemoteQueryExecutor.cpp:399\r\n0x000000000f92b1fc\r\ndouble std::__1::__cxx_atomic_load<double>(std::__1::__cxx_atomic_base_impl<double> const*, std::__1::memory_order)\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/atomic:1006\r\nstd::__1::__atomic_base<double, false>::load(std::__1::memory_order) const\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/atomic:1615\r\npthread_mutex_unlock\r\n./obj-x86_64-linux-gnu/../src/Common/ThreadFuzzer.cpp:268\r\nstd::__1::__libcpp_mutex_unlock(pthread_mutex_t*)\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/__threading_support:415\r\nstd::__1::mutex::unlock()\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/src/mutex.cpp:47\r\n~unique_lock\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/__mutex_base:141\r\nDB::PipelineExecutor::tryAddProcessorToStackIfUpdated(DB::ExecutingGraph::Edge&, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, unsigned long)\r\n./obj-x86_64-linux-gnu/../src/Processors/Executors/PipelineExecutor.cpp:194\r\n0x000000000f92b9c9\r\naddr2line: DWARF error: mangled line number section (bad file number)\r\naddr2line: DWARF error: mangled line number section (bad file number)\r\naddr2line: DWARF error: mangled line number section (bad file number)\r\naddr2line: DWARF error: invalid abstract instance DIE ref\r\nDB::PipelineExecutor::prepareProcessor(unsigned long, unsigned long, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, std::__1::unique_lock<std::__1::mutex>)\r\n??:?\r\n0x000000000f92b29c\r\nDB::PipelineExecutor::tryAddProcessorToStackIfUpdated(DB::ExecutingGraph::Edge&, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, unsigned long)\r\n??:?\r\n0x000000000f92b9c9\r\nDB::PipelineExecutor::prepareProcessor(unsigned long, unsigned long, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, std::__1::unique_lock<std::__1::mutex>)\r\n??:?\r\n0x000000000f92b29c\r\nDB::PipelineExecutor::tryAddProcessorToStackIfUpdated(DB::ExecutingGraph::Edge&, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, unsigned long)\r\n??:?\r\n0x000000000f92b989\r\nDB::PipelineExecutor::prepareProcessor(unsigned long, unsigned long, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, std::__1::unique_lock<std::__1::mutex>)\r\n??:?\r\n0x000000000f92eed0\r\nDB::PipelineExecutor::executeStepImpl(unsigned long, unsigned long, std::__1::atomic<bool>*)\r\n??:?\r\n0x000000000f9335d6\r\nstd::__1::shared_ptr<DB::ThreadGroupStatus>::operator bool() const\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/memory:2851\r\noperator()\r\n./obj-x86_64-linux-gnu/../src/Processors/Executors/PipelineExecutor.cpp:769\r\next::basic_scope_guard<DB::PipelineExecutor::executeImpl(unsigned long)::$_4::operator()() const::{lambda()#1}>::invoke()\r\n./obj-x86_64-linux-gnu/../base/common/../ext/scope_guard.h:97\r\n~basic_scope_guard\r\n./obj-x86_64-linux-gnu/../base/common/../ext/scope_guard.h:47\r\noperator()\r\n./obj-x86_64-linux-gnu/../src/Processors/Executors/PipelineExecutor.cpp:784\r\n_ZNSt3__118__invoke_constexprIRZN2DB16PipelineExecutor11executeImplEmE3$_4JEEEDTclclsr3std3__1E7forwardIT_Efp_Espclsr3std3__1E7forwardIT0_Efp0_EEEOS5_DpOS6_\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/type_traits:3682\r\ndecltype(auto) std::__1::__apply_tuple_impl<DB::PipelineExecutor::executeImpl(unsigned long)::$_4&, std::__1::tuple<>&>(DB::PipelineExecutor::executeImpl(unsigned long)::$_4&, std::__1::tuple<>&, std::__1::__tuple_indices<>)\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/tuple:1415\r\ndecltype(auto) std::__1::apply<DB::PipelineExecutor::executeImpl(unsigned long)::$_4&, std::__1::tuple<>&>(DB::PipelineExecutor::executeImpl(unsigned long)::$_4&, std::__1::tuple<>&)\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/tuple:1424\r\noperator()\r\n./obj-x86_64-linux-gnu/../src/Common/ThreadPool.h:178\r\n_ZNSt3__18__invokeIRZN20ThreadFromGlobalPoolC1IZN2DB16PipelineExecutor11executeImplEmE3$_4JEEEOT_DpOT0_EUlvE_JEEEDTclclsr3std3__1E7forwardIS6_Efp_Espclsr3std3__1E7forwardIS8_Efp0_EEES7_SA_\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/type_traits:3676\r\nvoid std::__1::__invoke_void_return_wrapper<void>::__call<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PipelineExecutor::executeImpl(unsigned long)::$_4>(DB::PipelineExecutor::executeImpl(unsigned long)::$_4&&)::{lambda()#1}&>(ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PipelineExecutor::executeImpl(unsigned long)::$_4>(DB::PipelineExecutor::executeImpl(unsigned long)::$_4&&)::{lambda()#1}&)\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/__functional_base:348\r\nstd::__1::__function::__default_alloc_func<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PipelineExecutor::executeImpl(unsigned long)::$_4>(DB::PipelineExecutor::executeImpl(unsigned long)::$_4&&)::{lambda()#1}, void ()>::operator()()\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/functional:1608\r\nvoid std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PipelineExecutor::executeImpl(unsigned long)::$_4>(DB::PipelineExecutor::executeImpl(unsigned long)::$_4&&)::{lambda()#1}, void ()> >(std::__1::__function::__policy_storage const*)\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/functional:2089\r\n0x000000000864f9df\r\nstd::__1::__function::__policy_func<void ()>::operator=(decltype(nullptr))\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/functional:2210\r\nstd::__1::function<void ()>::operator=(decltype(nullptr))\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/functional:2533\r\nThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>)\r\n./obj-x86_64-linux-gnu/../src/Common/ThreadPool.cpp:250\r\n0x0000000008653473\r\nstd::__1::unique_ptr<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::{lambda()#3}>, std::__1::default_delete<ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::{lambda()#3}> >::reset(ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::{lambda()#3}*)\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/memory:1656\r\n~unique_ptr\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/memory:1612\r\nvoid* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::{lambda()#3}> >(std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::{lambda()#3}>)\r\n./obj-x86_64-linux-gnu/../contrib/libcxx/include/thread:293\r\n0x00007f454def4ea5\r\n??\r\n??:0\r\n0x00007f454dc1d8dd\r\n??\r\n??:0\r\n```\r\n\r\nReadBuffer in connection is nullptr.\n@chyy can you check if there are exceptions `Unknown packet` in logs?",
  "created_at": "2021-04-19T14:13:41Z",
  "modified_files": [
    "src/Client/MultiplexedConnections.cpp",
    "src/Core/Settings.h",
    "src/Server/TCPHandler.cpp",
    "src/Server/TCPHandler.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01822_async_read_from_socket_crash.sh"
  ]
}