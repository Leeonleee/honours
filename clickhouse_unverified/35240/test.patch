diff --git a/tests/queries/0_stateless/00076_ip_coding_functions.sql b/tests/queries/0_stateless/00076_ip_coding_functions.sql
index 659267c61ed1..f693b336e570 100644
--- a/tests/queries/0_stateless/00076_ip_coding_functions.sql
+++ b/tests/queries/0_stateless/00076_ip_coding_functions.sql
@@ -1,3 +1,5 @@
+SET cast_ipv4_ipv6_default_on_conversion_error = 1;
+
 select IPv4StringToNum('') == 0;
 select IPv4StringToNum(materialize('')) == 0;
 select IPv4StringToNum('not an ip string') == 0;
diff --git a/tests/queries/0_stateless/00938_ipv6_cidr_range.sql b/tests/queries/0_stateless/00938_ipv6_cidr_range.sql
index 3fa4c7c5d3fd..1ceefa8cfb32 100644
--- a/tests/queries/0_stateless/00938_ipv6_cidr_range.sql
+++ b/tests/queries/0_stateless/00938_ipv6_cidr_range.sql
@@ -9,7 +9,7 @@ SELECT 'tests';
 DROP TABLE IF EXISTS ipv6_range;
 CREATE TABLE ipv6_range(ip IPv6, cidr UInt8) ENGINE = Memory;
 
-INSERT INTO ipv6_range (ip, cidr) VALUES (IPv6StringToNum('2001:0db8:0000:85a3:0000:0000:ac1f:8001'), 0), (IPv6StringToNum('2001:0db8:0000:85a3:ffff:ffff:ffff:ffff'), 32), (IPv6StringToNum('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff'), 16), (IPv6StringToNum('2001:df8:0:85a3::ac1f:8001'), 32), (IPv6StringToNum('2001:0db8:85a3:85a3:0000:0000:ac1f:8001'), 16), (IPv6StringToNum('0000:0000:0000:0000:0000:0000:0000:0000'), 8), (IPv6StringToNum('ffff:0000:0000:0000:0000:0000:0000:0000'), 4);
+INSERT INTO ipv6_range (ip, cidr) VALUES ('2001:0db8:0000:85a3:0000:0000:ac1f:8001', 0), ('2001:0db8:0000:85a3:ffff:ffff:ffff:ffff', 32), ('ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff', 16), ('2001:df8:0:85a3::ac1f:8001', 32), ('2001:0db8:85a3:85a3:0000:0000:ac1f:8001', 16), ('0000:0000:0000:0000:0000:0000:0000:0000', 8), ('ffff:0000:0000:0000:0000:0000:0000:0000', 4);
 
 WITH IPv6CIDRToRange(IPv6StringToNum('2001:0db8:0000:85a3:0000:0000:ac1f:8001'), 32) as ip_range SELECT COUNT(*) FROM ipv6_range WHERE ip BETWEEN tupleElement(ip_range, 1) AND tupleElement(ip_range, 2);
 
diff --git a/tests/queries/0_stateless/01018_ip_dictionary_long.sql b/tests/queries/0_stateless/01018_ip_dictionary_long.sql
index 7d9dfeb1bae8..647c36429cc9 100644
--- a/tests/queries/0_stateless/01018_ip_dictionary_long.sql
+++ b/tests/queries/0_stateless/01018_ip_dictionary_long.sql
@@ -44,7 +44,7 @@ LAYOUT(IP_TRIE())
 LIFETIME(MIN 10 MAX 100);
 
 -- fuzzer
-SELECT '127.0.0.0/24' = dictGetString('database_for_dict.dict_ipv4_trie', 'prefixprefixprefixprefix', tuple(IPv4StringToNum('127.0.0.0127.0.0.0'))); -- { serverError 36 }
+SELECT '127.0.0.0/24' = dictGetString('database_for_dict.dict_ipv4_trie', 'prefixprefixprefixprefix', tuple(IPv4StringToNumOrDefault('127.0.0.0127.0.0.0'))); -- { serverError 36 }
 
 SELECT 0 == dictGetUInt32('database_for_dict.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('0.0.0.0')));
 SELECT 1 == dictGetUInt32('database_for_dict.dict_ipv4_trie', 'asn', tuple(IPv4StringToNum('128.0.0.0')));
diff --git a/tests/queries/0_stateless/02007_ipv4_and_ipv6_to_and_from_string.reference b/tests/queries/0_stateless/02007_ipv4_and_ipv6_to_and_from_string.reference
index 8a4df1605fb0..8da82a0726f3 100644
--- a/tests/queries/0_stateless/02007_ipv4_and_ipv6_to_and_from_string.reference
+++ b/tests/queries/0_stateless/02007_ipv4_and_ipv6_to_and_from_string.reference
@@ -4,3 +4,4 @@
 2001:db8:0:85a3::ac1f:8001	String
 0.0.0.0	IPv4
 ::	IPv6
+::ffff:1.1.1.1	IPv6
diff --git a/tests/queries/0_stateless/02007_ipv4_and_ipv6_to_and_from_string.sql b/tests/queries/0_stateless/02007_ipv4_and_ipv6_to_and_from_string.sql
index 2fcc20b98112..b303d580e727 100644
--- a/tests/queries/0_stateless/02007_ipv4_and_ipv6_to_and_from_string.sql
+++ b/tests/queries/0_stateless/02007_ipv4_and_ipv6_to_and_from_string.sql
@@ -4,10 +4,10 @@ SELECT CAST(toIPv4('127.0.0.1') as String) as v, toTypeName(v);
 SELECT CAST('2001:0db8:0000:85a3:0000:0000:ac1f:8001' as IPv6) as v, toTypeName(v);
 SELECT CAST(toIPv6('2001:0db8:0000:85a3:0000:0000:ac1f:8001') as String) as v, toTypeName(v);
 
-SELECT toIPv4('hello') as v, toTypeName(v);
-SELECT toIPv6('hello') as v, toTypeName(v);
+SELECT toIPv4OrDefault('hello') as v, toTypeName(v);
+SELECT toIPv6OrDefault('hello') as v, toTypeName(v);
 
 SELECT CAST('hello' as IPv4) as v, toTypeName(v); -- { serverError CANNOT_PARSE_DOMAIN_VALUE_FROM_STRING }
 SELECT CAST('hello' as IPv6) as v, toTypeName(v); -- { serverError CANNOT_PARSE_DOMAIN_VALUE_FROM_STRING }
 
-SELECT CAST('1.1.1.1' as IPv6) as v, toTypeName(v); -- { serverError CANNOT_PARSE_DOMAIN_VALUE_FROM_STRING }
+SELECT CAST('1.1.1.1' as IPv6) as v, toTypeName(v);
diff --git a/tests/queries/0_stateless/02234_cast_to_ip_address.reference b/tests/queries/0_stateless/02234_cast_to_ip_address.reference
new file mode 100644
index 000000000000..3a4c40a07cfd
--- /dev/null
+++ b/tests/queries/0_stateless/02234_cast_to_ip_address.reference
@@ -0,0 +1,45 @@
+IPv4 functions
+0
+\N
+2130706433
+2130706433
+2130706433
+--
+0.0.0.0
+\N
+127.0.0.1
+127.0.0.1
+127.0.0.1
+--
+127.0.0.1
+--
+0
+0.0.0.0
+0
+0.0.0.0
+0.0.0.0
+0.0.0.0
+IPv6 functions
+\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0
+\N
+\0\0\0\0\0\0\0\0\0\0��\0\0
+\0\0\0\0\0\0\0\0\0\0��\0\0
+\0\0\0\0\0\0\0\0\0\0��\0\0
+--
+::
+\N
+::ffff:127.0.0.1
+::ffff:127.0.0.1
+::ffff:127.0.0.1
+--
+::ffff:127.0.0.1
+--
+\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0
+::
+\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0
+::
+::
+::
+--
+::ffff:127.0.0.1	::ffff:127.0.0.1	::ffff:127.0.0.1
+::1\0\0	::1	::1
diff --git a/tests/queries/0_stateless/02234_cast_to_ip_address.sql b/tests/queries/0_stateless/02234_cast_to_ip_address.sql
new file mode 100644
index 000000000000..d436c93b9db1
--- /dev/null
+++ b/tests/queries/0_stateless/02234_cast_to_ip_address.sql
@@ -0,0 +1,82 @@
+SELECT 'IPv4 functions';
+
+SELECT IPv4StringToNum('test'); --{serverError 441}
+SELECT IPv4StringToNumOrDefault('test');
+SELECT IPv4StringToNumOrNull('test');
+
+SELECT IPv4StringToNum('127.0.0.1');
+SELECT IPv4StringToNumOrDefault('127.0.0.1');
+SELECT IPv4StringToNumOrNull('127.0.0.1');
+
+SELECT '--';
+
+SELECT toIPv4('test'); --{serverError 441}
+SELECT toIPv4OrDefault('test');
+SELECT toIPv4OrNull('test');
+
+SELECT toIPv4('127.0.0.1');
+SELECT toIPv4OrDefault('127.0.0.1');
+SELECT toIPv4OrNull('127.0.0.1');
+
+SELECT '--';
+
+SELECT cast('test' , 'IPv4'); --{serverError 441}
+SELECT cast('127.0.0.1' , 'IPv4');
+
+SELECT '--';
+
+SET cast_ipv4_ipv6_default_on_conversion_error = 1;
+
+SELECT IPv4StringToNum('test');
+SELECT toIPv4('test');
+SELECT IPv4StringToNum('');
+SELECT toIPv4('');
+SELECT cast('test' , 'IPv4');
+SELECT cast('' , 'IPv4');
+
+SET cast_ipv4_ipv6_default_on_conversion_error = 0;
+
+SELECT 'IPv6 functions';
+
+SELECT IPv6StringToNum('test'); --{serverError 441}
+SELECT IPv6StringToNumOrDefault('test');
+SELECT IPv6StringToNumOrNull('test');
+
+SELECT IPv6StringToNum('::ffff:127.0.0.1');
+SELECT IPv6StringToNumOrDefault('::ffff:127.0.0.1');
+SELECT IPv6StringToNumOrNull('::ffff:127.0.0.1');
+
+SELECT '--';
+
+SELECT toIPv6('test'); --{serverError 441}
+SELECT toIPv6OrDefault('test');
+SELECT toIPv6OrNull('test');
+
+SELECT toIPv6('::ffff:127.0.0.1');
+SELECT toIPv6OrDefault('::ffff:127.0.0.1');
+SELECT toIPv6OrNull('::ffff:127.0.0.1');
+
+SELECT '--';
+
+SELECT cast('test' , 'IPv6'); --{serverError 441}
+SELECT cast('::ffff:127.0.0.1', 'IPv6');
+
+SELECT '--';
+
+SET cast_ipv4_ipv6_default_on_conversion_error = 1;
+
+SELECT IPv6StringToNum('test');
+SELECT toIPv6('test');
+SELECT IPv6StringToNum('');
+SELECT toIPv6('');
+SELECT cast('test' , 'IPv6');
+SELECT cast('' , 'IPv6');
+
+SELECT '--';
+
+SET cast_ipv4_ipv6_default_on_conversion_error = 0;
+
+SELECT toFixedString('::ffff:127.0.0.1', 16) as value, cast(value, 'IPv6'), toIPv6(value);
+SELECT toFixedString('::1', 5) as value, cast(value, 'IPv6'), toIPv6(value);
+SELECT toFixedString('', 16) as value, cast(value, 'IPv6'); --{serverError 441}
+SELECT toFixedString('', 16) as value, toIPv6(value); --{serverError 441}
