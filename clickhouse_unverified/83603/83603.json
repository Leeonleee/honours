{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 83603,
  "instance_id": "ClickHouse__ClickHouse-83603",
  "issue_numbers": [
    "83591"
  ],
  "base_commit": "bdae49abcde57ac2a88815003690ed405848fa9b",
  "patch": "diff --git a/src/AggregateFunctions/AggregateFunctionGroupNumericIndexedVectorDataBSI.h b/src/AggregateFunctions/AggregateFunctionGroupNumericIndexedVectorDataBSI.h\nindex 07b4ad16ac29..a65a1fb1ca12 100644\n--- a/src/AggregateFunctions/AggregateFunctionGroupNumericIndexedVectorDataBSI.h\n+++ b/src/AggregateFunctions/AggregateFunctionGroupNumericIndexedVectorDataBSI.h\n@@ -3,9 +3,10 @@\n #include <DataTypes/IDataType.h>\n #include <Formats/FormatSettings.h>\n #include <IO/ReadBuffer.h>\n-#include <base/demangle.h>\n #include <Common/JSONBuilder.h>\n \n+#include <base/demangle.h>\n+\n /// Include this last \u2014 see the reason inside\n #include <AggregateFunctions/AggregateFunctionGroupBitmapData.h>\n #include <roaring/containers/containers.h>\n@@ -1624,7 +1625,38 @@ class BSINumericIndexedVector\n           * - When value is a Float32/Float64, fraction_bit_num indicates how many bits are used to represent the decimal, Because the\n           *   maximum value of total_bit_num(integer_bit_num + fraction_bit_num) is 64, overflow may occur.\n           */\n-        Int64 scaled_value = Int64(value * (1L << fraction_bit_num));\n+\n+        Int64 scaled_value = 0;\n+        UInt64 scaling = 1ULL << fraction_bit_num;\n+\n+        /// Check for overflows. (3) With all integer types, value * (1ULL << fraction_bit_num) cannot overflow as fraction_bit_num is\n+        /// always 0. (1) Overflow can only occur when value is a UInt64 that is out of bounds of Int64. (2) With floating point value, we\n+        /// are concerned that casting Float(32/64) result will overflow Int64 destination.\n+        if constexpr (std::is_same_v<ValueType, UInt64>)\n+        {\n+            if (value > std::numeric_limits<Int64>::max())\n+                throw Exception(ErrorCodes::INCORRECT_DATA, \"Value {} does not fit in Int64. It should, even when using UInt64.\", value);\n+\n+            scaled_value = static_cast<Int64>(value);\n+        }\n+        else if constexpr (std::is_same_v<ValueType, Float32> || std::is_same_v<ValueType, Float64>)\n+        {\n+            constexpr Float64 lim = static_cast<Float64>(std::numeric_limits<Int64>::max());\n+\n+            if (fabs(value) > lim / static_cast<Float64>(scaling))\n+                throw Exception(\n+                    ErrorCodes::INCORRECT_DATA,\n+                    \"Value {} is out of range for BSI with integer_bit_num={} and fraction_bit_num={}\",\n+                    Float64(value),\n+                    integer_bit_num,\n+                    fraction_bit_num);\n+\n+            scaled_value = static_cast<Int64>(value * scaling);\n+        }\n+        else\n+        {\n+            scaled_value = static_cast<Int64>(value);\n+        }\n \n         UInt8 cin = 0;\n         for (size_t j = 0; j < total_bit_num; ++j)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03458_numeric_indexed_vector_operations_u32u64.reference b/tests/queries/0_stateless/03458_numeric_indexed_vector_operations_u32u64.reference\nindex 4aac44967478..cb7f8a7ca28c 100644\n--- a/tests/queries/0_stateless/03458_numeric_indexed_vector_operations_u32u64.reference\n+++ b/tests/queries/0_stateless/03458_numeric_indexed_vector_operations_u32u64.reference\n@@ -1,24 +1,24 @@\n TEST numericIndexedVectorPointwise operations with zero values and UInt64 value type\n {10000001:7,10000002:8,10000003:0,10000004:0,20000005:0,30000005:100,50000005:0}\n-{10000001:7,10000002:18446744073709551608,10000003:30,10000004:18446744073709551613,20000005:0,40000005:100,60000005:0}\n-{10000001:14,10000002:0,10000003:30,10000004:18446744073709551613,20000005:0,30000005:100,40000005:100,50000005:0,60000005:0}\n-{10000001:0,10000002:1,10000003:18446744073709551609,10000004:18446744073709551609,20000005:18446744073709551609,30000005:93,50000005:18446744073709551609}\n+{10000001:7,10000002:8,10000003:30,10000004:3,20000005:0,40000005:100,60000005:0}\n+{10000001:14,10000002:16,10000003:30,10000004:3,20000005:0,30000005:100,40000005:100,50000005:0,60000005:0}\n+{10000001:14,10000002:15,10000003:7,10000004:7,20000005:7,30000005:107,50000005:7}\n {10000001:7,10000002:8,10000003:0,10000004:0,20000005:0,30000005:100,50000005:0}\n-{10000001:0,10000002:16,10000003:18446744073709551586,10000004:3,20000005:0,30000005:100,40000005:18446744073709551516,50000005:0,60000005:0}\n+{10000001:0,10000002:0,10000003:18446744073709551586,10000004:18446744073709551613,20000005:0,30000005:100,40000005:18446744073709551516,50000005:0,60000005:0}\n {10000001:5,10000002:6,10000003:18446744073709551614,10000004:18446744073709551614,20000005:18446744073709551614,30000005:98,50000005:18446744073709551614}\n-{10000001:49,10000002:18446744073709551615,10000003:0,10000004:0,20000005:0,30000005:0,40000005:0,50000005:0,60000005:0}\n-{10000001:18446744073709551615,10000002:18446744073709551615,10000003:0,10000004:0,20000005:0,30000005:18446744073709551615,50000005:0}\n-{10000001:1,10000003:0,10000004:0,20000005:0,30000005:0,40000005:0,50000005:0,60000005:0}\n+{10000001:49,10000002:64,10000003:0,10000004:0,20000005:0,30000005:0,40000005:0,50000005:0,60000005:0}\n+{10000001:56,10000002:64,10000003:0,10000004:0,20000005:0,30000005:800,50000005:0}\n+{10000001:1,10000002:1,10000003:0,10000004:0,20000005:0,30000005:0,40000005:0,50000005:0,60000005:0}\n {10000001:3,10000002:4,10000003:0,10000004:0,20000005:0,30000005:50,50000005:0}\n {10000001:0,10000002:0,10000003:0,10000004:0,20000005:0,30000005:0,50000005:0}\n-{10000001:1,20000005:1,50000005:1,60000005:1}\n+{10000001:1,10000002:1,20000005:1,50000005:1,60000005:1}\n {}\n-{10000002:1,10000003:1,10000004:1,30000005:1,40000005:1}\n+{10000003:1,10000004:1,30000005:1,40000005:1}\n {10000001:1,10000002:1,10000003:1,10000004:1,20000005:1,30000005:1,50000005:1}\n {10000001:1,10000002:1,30000005:1}\n-{10000002:1,10000003:1,10000004:1,40000005:1}\n+{10000003:1,10000004:1,40000005:1}\n {10000003:1,10000004:1,20000005:1,50000005:1}\n-{10000001:1,10000002:1,10000003:1,20000005:1,40000005:1,60000005:1}\n+{10000004:1,20000005:1,60000005:1}\n {}\n {}\n {10000001:1,10000002:1,10000003:1,10000004:1,20000005:1,40000005:1,50000005:1,60000005:1}\n@@ -27,5 +27,5 @@ TEST numericIndexedVectorPointwise operations with zero values and UInt64 value\n {}\n {30000005:1}\n {10000001:1,10000002:1,30000005:1}\n-{10000001:1,20000005:1,30000005:1,50000005:1,60000005:1}\n+{10000001:1,10000002:1,20000005:1,30000005:1,50000005:1,60000005:1}\n {10000001:1,10000002:1,30000005:1}\ndiff --git a/tests/queries/0_stateless/03458_numeric_indexed_vector_operations_u32u64.sql b/tests/queries/0_stateless/03458_numeric_indexed_vector_operations_u32u64.sql\nindex 4edda498022a..88a80042e916 100644\n--- a/tests/queries/0_stateless/03458_numeric_indexed_vector_operations_u32u64.sql\n+++ b/tests/queries/0_stateless/03458_numeric_indexed_vector_operations_u32u64.sql\n@@ -11,7 +11,7 @@ CREATE TABLE uin_value_details\n ENGINE = MergeTree()\n ORDER BY ds;\n INSERT INTO uin_value_details (ds, uin, value) values ('2023-12-26', 10000001, 7), ('2023-12-26', 10000002, 8), ('2023-12-26', 10000003, 0), ('2023-12-26', 10000004, 0), ('2023-12-26', 20000005, 0), ('2023-12-26', 30000005, 100), ('2023-12-26', 50000005, 0);\n-INSERT INTO uin_value_details (ds, uin, value) values ('2023-12-27', 10000001, 7), ('2023-12-27', 10000002, -8), ('2023-12-27', 10000003, 30), ('2023-12-27', 10000004, -3), ('2023-12-27', 20000005, 0), ('2023-12-27', 40000005, 100), ('2023-12-27', 60000005, 0);\n+INSERT INTO uin_value_details (ds, uin, value) values ('2023-12-27', 10000001, 7), ('2023-12-27', 10000002, 8), ('2023-12-27', 10000003, 30), ('2023-12-27', 10000004, 3), ('2023-12-27', 20000005, 0), ('2023-12-27', 40000005, 100), ('2023-12-27', 60000005, 0);\n \n with\n (\n@@ -26,12 +26,12 @@ select arrayJoin([\n     numericIndexedVectorToMap(vec_1)\n     , numericIndexedVectorToMap(vec_2)\n     , numericIndexedVectorToMap(numericIndexedVectorPointwiseAdd(vec_1, vec_2))\n-    , numericIndexedVectorToMap(numericIndexedVectorPointwiseAdd(vec_1, -7))\n+    , numericIndexedVectorToMap(numericIndexedVectorPointwiseAdd(vec_1, 7))\n     , numericIndexedVectorToMap(numericIndexedVectorPointwiseAdd(vec_1, 0))\n     , numericIndexedVectorToMap(numericIndexedVectorPointwiseSubtract(vec_1, vec_2))\n     , numericIndexedVectorToMap(numericIndexedVectorPointwiseSubtract(vec_1, 2))\n     , numericIndexedVectorToMap(numericIndexedVectorPointwiseMultiply(vec_1, vec_2))\n-    , numericIndexedVectorToMap(numericIndexedVectorPointwiseMultiply(vec_1, -8))\n+    , numericIndexedVectorToMap(numericIndexedVectorPointwiseMultiply(vec_1, 8))\n     , numericIndexedVectorToMap(numericIndexedVectorPointwiseDivide(vec_1, vec_2))\n     , numericIndexedVectorToMap(numericIndexedVectorPointwiseDivide(vec_1, 2))\n     , numericIndexedVectorToMap(numericIndexedVectorPointwiseDivide(vec_1, 0))\n@@ -42,7 +42,7 @@ select arrayJoin([\n     , numericIndexedVectorToMap(numericIndexedVectorPointwiseNotEqual(vec_1, 0))\n     , numericIndexedVectorToMap(numericIndexedVectorPointwiseLess(vec_1, vec_2))\n     , numericIndexedVectorToMap(numericIndexedVectorPointwiseLess(vec_1, 2))\n-    , numericIndexedVectorToMap(numericIndexedVectorPointwiseLess(vec_2, -5))\n+    , numericIndexedVectorToMap(numericIndexedVectorPointwiseLess(vec_2, 5))\n     , numericIndexedVectorToMap(numericIndexedVectorPointwiseLess(vec_1, 0))\n     , numericIndexedVectorToMap(numericIndexedVectorPointwiseLess(vec_2, 0))\n     , numericIndexedVectorToMap(numericIndexedVectorPointwiseLessEqual(vec_1, vec_2))\ndiff --git a/tests/queries/0_stateless/03463_numeric_indexed_vector_overflow.reference b/tests/queries/0_stateless/03463_numeric_indexed_vector_overflow.reference\nindex deae640f4092..ba249587a356 100644\n--- a/tests/queries/0_stateless/03463_numeric_indexed_vector_overflow.reference\n+++ b/tests/queries/0_stateless/03463_numeric_indexed_vector_overflow.reference\n@@ -1,4 +1,6 @@\n {1:72999999515.86284,2:82999999514.86284,3:0,4:0,5:0,6:-92967846119.29968,7:0}\n {1:-72999999515.86284,2:-82999999514.86284,3:0,4:0,5:0,7:0}\n \\N\n+Test with NaN, INFs and Nulls\n 3\n+Test for overflows\ndiff --git a/tests/queries/0_stateless/03463_numeric_indexed_vector_overflow.sql b/tests/queries/0_stateless/03463_numeric_indexed_vector_overflow.sql\nindex d737f9f4dce8..297bfdbb9650 100644\n--- a/tests/queries/0_stateless/03463_numeric_indexed_vector_overflow.sql\n+++ b/tests/queries/0_stateless/03463_numeric_indexed_vector_overflow.sql\n@@ -49,8 +49,20 @@ SELECT numericIndexedVectorToMap(numericIndexedVectorPointwiseGreaterEqual(vec_1\n \n DROP TABLE uin_value_details;\n \n+-- https://github.com/ClickHouse/ClickHouse/issues/82239\n+SELECT 'Test with NaN, INFs and Nulls' AS test;\n \n SELECT groupNumericIndexedVector(x, y) FROM values('x Nullable(Int32), y Nullable(Float64)', (1, 0), (3, nan), (3, 2), (0, 0), (5, 1)); -- { serverError INCORRECT_DATA }\n SELECT groupNumericIndexedVector(x, y) FROM values('x Nullable(Int32), y Nullable(Float64)', (1, 0), (3, Null), (3, 2), (0, 0), (5, 1));\n SELECT groupNumericIndexedVector(x, y) FROM values('x Nullable(Int32), y Nullable(Float64)', (1, 0), (3, inf), (3, 2), (0, 0), (5, 1)); -- { serverError INCORRECT_DATA }\n SELECT groupNumericIndexedVector(x, y) FROM values('x Nullable(Int32), y Nullable(Float64)', (1, 0), (3, -inf), (3, 2), (0, 0), (5, 1)); -- { serverError INCORRECT_DATA }\n+\n+-- https://github.com/ClickHouse/ClickHouse/issues/83591\n+SELECT 'Test for overflows' AS test;\n+CREATE TABLE test (t AggregateFunction(groupNumericIndexedVectorState, UInt32, Float64)) ENGINE = AggregatingMergeTree ORDER BY tuple();\n+CREATE TABLE test2 (t AggregateFunction(groupNumericIndexedVectorState, UInt32, UInt64)) ENGINE = AggregatingMergeTree ORDER BY tuple();\n+INSERT INTO test SELECT groupNumericIndexedVectorState(toUInt32(1), 1.54743e+26); -- { serverError INCORRECT_DATA }\n+INSERT INTO test SELECT groupNumericIndexedVectorState(toUInt32(2), -1.54743e+26); -- { serverError INCORRECT_DATA }\n+INSERT INTO test2 SELECT groupNumericIndexedVectorState(toUInt32(1), 18446744073709551615); -- { serverError INCORRECT_DATA }\n+DROP TABLE test;\n+DROP TABLE test2;\n",
  "problem_statement": "Overflow in NumericIndexedVector\n### Describe the bug\n\nIf we use NumericIndexedVector with a very large number, there will be an overflow. The behaviour [is expected](https://github.com/ClickHouse/ClickHouse/blob/bcb38dba12f24ac7d81dfda75cbea5ca4053463b/src/AggregateFunctions/AggregateFunctionGroupNumericIndexedVectorDataBSI.h#L294), but it is good not only to expect it, but to handle it. [Happens on CI.](https://github.com/ClickHouse/ClickHouse/pull/83546#issuecomment-3057288578)\n\n### How to reproduce\n\n[Fiddle link](https://fiddle.clickhouse.com/49917854-ced4-4845-9771-b5758e0de3aa)\n\n```\nCREATE TABLE test (t AggregateFunction(groupNumericIndexedVectorState, UInt32, Float64)) ENGINE = AggregatingMergeTree ORDER BY tuple();\n\n\nINSERT INTO test SELECT groupNumericIndexedVectorState(toUInt32(1), -1.54743e26);\n\nSELECT * FROM test;\n```\n\n### Error message and/or stacktrace\n\n```\n/home/ubuntu/actions-runner/_work/ClickHouse/ClickHouse/src/AggregateFunctions/AggregateFunctionGroupNumericIndexedVectorDataBSI.h:1627:36: runtime error: -2.59616e+33 is outside the range of representable values of type 'long'\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior /home/ubuntu/actions-runner/_work/ClickHouse/ClickHouse/src/AggregateFunctions/AggregateFunctionGroupNumericIndexedVectorDataBSI.h:1627:36 \n2025.07.10 13:01:58.995083 [ 2327540 ] {} <Fatal> ClientBase: ########## Short fault info ############\n2025.07.10 13:01:58.995138 [ 2327540 ] {} <Fatal> ClientBase: (version 25.7.1.1, build id: F9EE77993380521FDB0D2F4FC96E08937FD687C1, git hash: 7002242b11687c813817448d9bb23b771d8c5bd1, architecture: x86_64) (from thread 2326703) Received signal -3\n2025.07.10 13:01:58.995143 [ 2327540 ] {} <Fatal> ClientBase: Signal description: sanitizer trap\n2025.07.10 13:01:58.995145 [ 2327540 ] {} <Fatal> ClientBase: Sanitizer trap.\n2025.07.10 13:01:58.995158 [ 2327540 ] {} <Fatal> ClientBase: Stack trace: 0x00005ced2fe81983 0x00005ced376c182b 0x00005ced21b71d30 0x00005ced21b7dcf9 0x00005ced2271cbcf 0x00005ced34077724 0x00005ced39e384d2 0x00005ced39e38cc4 0x00005ced39e3d325 0x00005ced3fffe19a 0x00005ced3fff81ed 0x00005ced3fa84b4e 0x00005ced3fa6f30e 0x00005ced3fa70c4d 0x00005ced2ff7c159 0x00005ced2ff84b2a 0x00005ced2ff792af 0x00005ced2ff810aa 0x00007bcfdd49caa4 0x00007bcfdd529c3c\n2025.07.10 13:01:58.995173 [ 2327540 ] {} <Fatal> ClientBase: ########################################\n2025.07.10 13:01:58.995321 [ 2327540 ] {} <Fatal> ClientBase: (version 25.7.1.1, build id: F9EE77993380521FDB0D2F4FC96E08937FD687C1, git hash: 7002242b11687c813817448d9bb23b771d8c5bd1) (from thread 2326703) (query_id: 88e9f674-be79-41bc-b148-0513cd284ee3) (query: INSERT INTO metric_bsi\nSELECT groupNumericIndexedVectorState(toUInt32(1), -1.54743e+26)) Received signal sanitizer trap (-3)\n2025.07.10 13:01:58.995361 [ 2327540 ] {} <Fatal> ClientBase: Sanitizer trap.\n...\n```\n",
  "hints_text": "",
  "created_at": "2025-07-10T16:29:07Z"
}