diff --git a/src/Access/Common/AllowedClientHosts.cpp b/src/Access/Common/AllowedClientHosts.cpp
index efbdf3924e81..2f8151bf7578 100644
--- a/src/Access/Common/AllowedClientHosts.cpp
+++ b/src/Access/Common/AllowedClientHosts.cpp
@@ -110,7 +110,7 @@ namespace
     }
 
     /// Returns the host name by its address.
-    Strings getHostsByAddress(const IPAddress & address)
+    std::unordered_set<String> getHostsByAddress(const IPAddress & address)
     {
         auto hosts = DNSResolver::instance().reverseResolve(address);
 
@@ -526,7 +526,7 @@ bool AllowedClientHosts::contains(const IPAddress & client_address) const
             return true;
 
     /// Check `name_regexps`.
-    std::optional<Strings> resolved_hosts;
+    std::optional<std::unordered_set<String>> resolved_hosts;
     auto check_name_regexp = [&](const String & name_regexp_)
     {
         try
diff --git a/src/Common/CaresPTRResolver.cpp b/src/Common/CaresPTRResolver.cpp
index 376d3665f7ed..e5d48b864c80 100644
--- a/src/Common/CaresPTRResolver.cpp
+++ b/src/Common/CaresPTRResolver.cpp
@@ -15,13 +15,23 @@ namespace DB
 
     static void callback(void * arg, int status, int, struct hostent * host)
     {
-        auto * ptr_records = reinterpret_cast<std::vector<std::string>*>(arg);
+        auto * ptr_records = reinterpret_cast<std::unordered_set<std::string>*>(arg);
         if (status == ARES_SUCCESS && host->h_aliases)
         {
+            /*
+             * In some cases (e.g /etc/hosts), hostent::h_name is filled and hostent::h_aliases is empty.
+             * Thus, we can't rely solely on hostent::h_aliases. More info on:
+             * https://github.com/ClickHouse/ClickHouse/issues/40595#issuecomment-1230526931
+             * */
+            if (auto * ptr_record = host->h_name)
+            {
+                ptr_records->insert(ptr_record);
+            }
+
             int i = 0;
             while (auto * ptr_record = host->h_aliases[i])
             {
-                ptr_records->emplace_back(ptr_record);
+                ptr_records->insert(ptr_record);
                 i++;
             }
         }
@@ -58,9 +68,9 @@ namespace DB
          * */
     }
 
-    std::vector<std::string> CaresPTRResolver::resolve(const std::string & ip)
+    std::unordered_set<std::string> CaresPTRResolver::resolve(const std::string & ip)
     {
-        std::vector<std::string> ptr_records;
+        std::unordered_set<std::string> ptr_records;
 
         resolve(ip, ptr_records);
         wait();
@@ -68,9 +78,9 @@ namespace DB
         return ptr_records;
     }
 
-    std::vector<std::string> CaresPTRResolver::resolve_v6(const std::string & ip)
+    std::unordered_set<std::string> CaresPTRResolver::resolve_v6(const std::string & ip)
     {
-        std::vector<std::string> ptr_records;
+        std::unordered_set<std::string> ptr_records;
 
         resolve_v6(ip, ptr_records);
         wait();
@@ -78,7 +88,7 @@ namespace DB
         return ptr_records;
     }
 
-    void CaresPTRResolver::resolve(const std::string & ip, std::vector<std::string> & response)
+    void CaresPTRResolver::resolve(const std::string & ip, std::unordered_set<std::string> & response)
     {
         in_addr addr;
 
@@ -87,7 +97,7 @@ namespace DB
         ares_gethostbyaddr(channel, reinterpret_cast<const void*>(&addr), sizeof(addr), AF_INET, callback, &response);
     }
 
-    void CaresPTRResolver::resolve_v6(const std::string & ip, std::vector<std::string> & response)
+    void CaresPTRResolver::resolve_v6(const std::string & ip, std::unordered_set<std::string> & response)
     {
         in6_addr addr;
         inet_pton(AF_INET6, ip.c_str(), &addr);
diff --git a/src/Common/CaresPTRResolver.h b/src/Common/CaresPTRResolver.h
index fd6a1cf7bc57..e5182d346820 100644
--- a/src/Common/CaresPTRResolver.h
+++ b/src/Common/CaresPTRResolver.h
@@ -25,16 +25,16 @@ namespace DB
         explicit CaresPTRResolver(provider_token);
         ~CaresPTRResolver() override;
 
-        std::vector<std::string> resolve(const std::string & ip) override;
+        std::unordered_set<std::string> resolve(const std::string & ip) override;
 
-        std::vector<std::string> resolve_v6(const std::string & ip) override;
+        std::unordered_set<std::string> resolve_v6(const std::string & ip) override;
 
     private:
         void wait();
 
-        void resolve(const std::string & ip, std::vector<std::string> & response);
+        void resolve(const std::string & ip, std::unordered_set<std::string> & response);
 
-        void resolve_v6(const std::string & ip, std::vector<std::string> & response);
+        void resolve_v6(const std::string & ip, std::unordered_set<std::string> & response);
 
         ares_channel channel;
     };
diff --git a/src/Common/DNSPTRResolver.h b/src/Common/DNSPTRResolver.h
index e6cce83f79da..38f890ae29a5 100644
--- a/src/Common/DNSPTRResolver.h
+++ b/src/Common/DNSPTRResolver.h
@@ -1,7 +1,7 @@
 #pragma once
 
 #include <string>
-#include <vector>
+#include <unordered_set>
 
 namespace DB
 {
@@ -10,9 +10,9 @@ namespace DB
 
         virtual ~DNSPTRResolver() = default;
 
-        virtual std::vector<std::string> resolve(const std::string & ip) = 0;
+        virtual std::unordered_set<std::string> resolve(const std::string & ip) = 0;
 
-        virtual std::vector<std::string> resolve_v6(const std::string & ip) = 0;
+        virtual std::unordered_set<std::string> resolve_v6(const std::string & ip) = 0;
 
     };
 }
diff --git a/src/Common/DNSResolver.cpp b/src/Common/DNSResolver.cpp
index cf61d2795f09..67d87f757c74 100644
--- a/src/Common/DNSResolver.cpp
+++ b/src/Common/DNSResolver.cpp
@@ -136,7 +136,7 @@ static DNSResolver::IPAddresses resolveIPAddressImpl(const std::string & host)
     return addresses;
 }
 
-static Strings reverseResolveImpl(const Poco::Net::IPAddress & address)
+static std::unordered_set<String> reverseResolveImpl(const Poco::Net::IPAddress & address)
 {
     auto ptr_resolver = DB::DNSPTRResolverProvider::get();
 
@@ -234,7 +234,7 @@ std::vector<Poco::Net::SocketAddress> DNSResolver::resolveAddressList(const std:
     return addresses;
 }
 
-Strings DNSResolver::reverseResolve(const Poco::Net::IPAddress & address)
+std::unordered_set<String> DNSResolver::reverseResolve(const Poco::Net::IPAddress & address)
 {
     if (impl->disable_cache)
         return reverseResolveImpl(address);
diff --git a/src/Common/DNSResolver.h b/src/Common/DNSResolver.h
index 84c885866362..83de616d81a6 100644
--- a/src/Common/DNSResolver.h
+++ b/src/Common/DNSResolver.h
@@ -37,7 +37,7 @@ class DNSResolver : private boost::noncopyable
     std::vector<Poco::Net::SocketAddress> resolveAddressList(const std::string & host, UInt16 port);
 
     /// Accepts host IP and resolves its host names
-    Strings reverseResolve(const Poco::Net::IPAddress & address);
+    std::unordered_set<String> reverseResolve(const Poco::Net::IPAddress & address);
 
     /// Get this server host name
     String getHostName();
