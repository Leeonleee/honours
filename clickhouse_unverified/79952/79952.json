{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 79952,
  "instance_id": "ClickHouse__ClickHouse-79952",
  "issue_numbers": [
    "79950"
  ],
  "base_commit": "e1feaa56955e5affbb22953c21e2d7cef5e31ab8",
  "patch": "diff --git a/src/Parsers/ASTSelectWithUnionQuery.cpp b/src/Parsers/ASTSelectWithUnionQuery.cpp\nindex 0f937ec39b15..90858fa57289 100644\n--- a/src/Parsers/ASTSelectWithUnionQuery.cpp\n+++ b/src/Parsers/ASTSelectWithUnionQuery.cpp\n@@ -30,7 +30,7 @@ void ASTSelectWithUnionQuery::formatQueryImpl(WriteBuffer & ostr, const FormatSe\n {\n     std::string indent_str = settings.one_line ? \"\" : std::string(4 * frame.indent, ' ');\n \n-    auto mode_to_str = [&](auto mode)\n+    auto mode_to_str = [&](SelectUnionMode mode)\n     {\n         if (mode == SelectUnionMode::UNION_DEFAULT)\n             return \"UNION\";\n@@ -53,26 +53,55 @@ void ASTSelectWithUnionQuery::formatQueryImpl(WriteBuffer & ostr, const FormatSe\n         return \"\";\n     };\n \n+    auto is_except = [](SelectUnionMode mode)\n+    {\n+        return mode == SelectUnionMode::EXCEPT_DEFAULT\n+            || mode == SelectUnionMode::EXCEPT_ALL\n+            || mode == SelectUnionMode::EXCEPT_DISTINCT;\n+    };\n+\n+    auto get_mode = [&](ASTs::const_iterator it)\n+    {\n+        return is_normalized\n+            ? union_mode\n+            : list_of_modes[it - list_of_selects->children.begin() - 1];\n+    };\n+\n     for (ASTs::const_iterator it = list_of_selects->children.begin(); it != list_of_selects->children.end(); ++it)\n     {\n         if (it != list_of_selects->children.begin())\n+        {\n             ostr << settings.nl_or_ws << indent_str << (settings.hilite ? hilite_keyword : \"\")\n-                          << mode_to_str((is_normalized) ? union_mode : list_of_modes[it - list_of_selects->children.begin() - 1])\n-                          << (settings.hilite ? hilite_none : \"\");\n+                << mode_to_str(get_mode(it))\n+                << (settings.hilite ? hilite_none : \"\")\n+                << settings.nl_or_ws;\n+        }\n \n-        if (auto * /*node*/ _ = (*it)->as<ASTSelectWithUnionQuery>())\n-        {\n-            if (it != list_of_selects->children.begin())\n-                ostr << settings.nl_or_ws;\n+        bool need_parens = false;\n \n+        /// EXCEPT can be confused with the asterisk modifier:\n+        /// SELECT * EXCEPT SELECT 1 -- two queries\n+        /// SELECT * EXCEPT col      -- a modifier for asterisk\n+        /// For this reason, add parentheses when formatting any side of EXCEPT.\n+        ASTs::const_iterator next = it;\n+        ++next;\n+        if ((it != list_of_selects->children.begin() && is_except(get_mode(it)))\n+            || (next != list_of_selects->children.end() && is_except(get_mode(next))))\n+            need_parens = true;\n+\n+        /// If this is a subtree with another chain of selects, we also need parens.\n+        auto * union_node = (*it)->as<ASTSelectWithUnionQuery>();\n+        if (union_node)\n+            need_parens = true;\n+\n+        if (need_parens)\n+        {\n             ostr << indent_str;\n-            auto sub_query = std::make_shared<ASTSubquery>(*it);\n-            sub_query->format(ostr, settings, state, frame);\n+            auto subquery = std::make_shared<ASTSubquery>(*it);\n+            subquery->format(ostr, settings, state, frame);\n         }\n         else\n         {\n-            if (it != list_of_selects->children.begin())\n-                ostr << settings.nl_or_ws;\n             (*it)->format(ostr, settings, state, frame);\n         }\n     }\ndiff --git a/src/Parsers/ASTSelectWithUnionQuery.h b/src/Parsers/ASTSelectWithUnionQuery.h\nindex 14d6b0c3c112..30885c904258 100644\n--- a/src/Parsers/ASTSelectWithUnionQuery.h\n+++ b/src/Parsers/ASTSelectWithUnionQuery.h\n@@ -20,9 +20,7 @@ class ASTSelectWithUnionQuery : public ASTQueryWithOutput\n     QueryKind getQueryKind() const override { return QueryKind::Select; }\n \n     SelectUnionMode union_mode;\n-\n     SelectUnionModes list_of_modes;\n-\n     bool is_normalized = false;\n \n     ASTPtr list_of_selects;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02455_default_union_except_intersect.reference b/tests/queries/0_stateless/02455_default_union_except_intersect.reference\nindex 371c3784fae5..c082adb2a644 100644\n--- a/tests/queries/0_stateless/02455_default_union_except_intersect.reference\n+++ b/tests/queries/0_stateless/02455_default_union_except_intersect.reference\n@@ -1,9 +1,13 @@\n SELECT 1\n UNION\n SELECT 1\n-SELECT 2\n+(\n+    SELECT 2\n+)\n EXCEPT\n-SELECT 2\n+(\n+    SELECT 2\n+)\n SELECT 3\n INTERSECT\n SELECT 3\ndiff --git a/tests/queries/0_stateless/03457_inconsistent_formatting_except.reference b/tests/queries/0_stateless/03457_inconsistent_formatting_except.reference\nnew file mode 100644\nindex 000000000000..9549a6896f05\n--- /dev/null\n+++ b/tests/queries/0_stateless/03457_inconsistent_formatting_except.reference\n@@ -0,0 +1,13 @@\n+-- { echo }\n+\n+SELECT (*) EXCEPT SELECT 1;\n+0\n+(SELECT *) EXCEPT SELECT 1;\n+0\n+SELECT * + 1 EXCEPT SELECT 1;\n+(SELECT * EXCEPT a) EXCEPT SELECT 1;\n+0\n+SELECT * FROM (SELECT 1 UNION ALL SELECT 2 EXCEPT SELECT 3 UNION ALL SELECT (*) EXCEPT SELECT 4) ORDER BY *;\n+0\n+1\n+2\ndiff --git a/tests/queries/0_stateless/03457_inconsistent_formatting_except.sql b/tests/queries/0_stateless/03457_inconsistent_formatting_except.sql\nnew file mode 100644\nindex 000000000000..9bc0d8aeff19\n--- /dev/null\n+++ b/tests/queries/0_stateless/03457_inconsistent_formatting_except.sql\n@@ -0,0 +1,8 @@\n+SET enable_analyzer = 1;\n+-- { echo }\n+\n+SELECT (*) EXCEPT SELECT 1;\n+(SELECT *) EXCEPT SELECT 1;\n+SELECT * + 1 EXCEPT SELECT 1;\n+(SELECT * EXCEPT a) EXCEPT SELECT 1;\n+SELECT * FROM (SELECT 1 UNION ALL SELECT 2 EXCEPT SELECT 3 UNION ALL SELECT (*) EXCEPT SELECT 4) ORDER BY *;\n",
  "problem_statement": "Inconsistent formatting of SELECT * ... EXCEPT SELECT\n### Describe the bug\n\n```\nSELECT (*) EXCEPT SELECT 1\n```\nis formatted as\n```\nSELECT * EXCEPT SELECT 1\n```\nand then EXCEPT is parsed as a modifier to `*`, and the whole query cannot parse.\n\n### How to reproduce\n\n_No response_\n\n### Error message and/or stacktrace\n\n_No response_\n",
  "hints_text": "",
  "created_at": "2025-05-08T00:36:14Z"
}