{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 82304,
  "instance_id": "ClickHouse__ClickHouse-82304",
  "issue_numbers": [
    "81211"
  ],
  "base_commit": "c468677105906e78307a4f03e343e675bb476560",
  "patch": "diff --git a/src/Databases/DataLake/DatabaseDataLake.cpp b/src/Databases/DataLake/DatabaseDataLake.cpp\nindex 122791e30bc8..7df98c2550da 100644\n--- a/src/Databases/DataLake/DatabaseDataLake.cpp\n+++ b/src/Databases/DataLake/DatabaseDataLake.cpp\n@@ -66,6 +66,7 @@ namespace ErrorCodes\n     extern const int BAD_ARGUMENTS;\n     extern const int SUPPORT_IS_DISABLED;\n     extern const int DATALAKE_DATABASE_ERROR;\n+    extern const int CANNOT_GET_CREATE_TABLE_QUERY;\n }\n \n namespace\n@@ -596,7 +597,12 @@ ASTPtr DatabaseDataLake::getCreateTableQueryImpl(\n     auto table_metadata = DataLake::TableMetadata().withLocation().withSchema();\n \n     const auto [namespace_name, table_name] = parseTableName(name);\n-    catalog->getTableMetadata(namespace_name, table_name, table_metadata);\n+\n+    if (!catalog->tryGetTableMetadata(namespace_name, table_name, table_metadata))\n+    {\n+        throw Exception(\n+            ErrorCodes::CANNOT_GET_CREATE_TABLE_QUERY, \"Table `{}` doesn't exist\", name);\n+    }\n \n     auto create_table_query = std::make_shared<ASTCreateQuery>();\n     auto table_storage_define = table_engine_definition->clone();\ndiff --git a/src/Databases/DataLake/GlueCatalog.cpp b/src/Databases/DataLake/GlueCatalog.cpp\nindex d30b7c6597c0..fde1019463c8 100644\n--- a/src/Databases/DataLake/GlueCatalog.cpp\n+++ b/src/Databases/DataLake/GlueCatalog.cpp\n@@ -242,15 +242,6 @@ bool GlueCatalog::tryGetTableMetadata(\n     const std::string & database_name,\n     const std::string & table_name,\n     TableMetadata & result) const\n-{\n-    getTableMetadata(database_name, table_name, result);\n-    return true;\n-}\n-\n-void GlueCatalog::getTableMetadata(\n-    const std::string & database_name,\n-    const std::string & table_name,\n-    TableMetadata & result) const\n {\n     Aws::Glue::Model::GetTableRequest request;\n     request.SetDatabaseName(database_name);\n@@ -320,11 +311,30 @@ void GlueCatalog::getTableMetadata(\n     }\n     else\n     {\n+        if (outcome.GetError().GetErrorType() == Aws::Glue::GlueErrors::ENTITY_NOT_FOUND)\n+            return false; // Table does not exist\n+\n         throw DB::Exception(\n             DB::ErrorCodes::DATALAKE_DATABASE_ERROR,\n             \"Exception calling GetTable for table {}: {}\",\n             database_name + \".\" + table_name, outcome.GetError().GetMessage());\n     }\n+\n+    return true;\n+}\n+\n+void GlueCatalog::getTableMetadata(\n+    const std::string & database_name,\n+    const std::string & table_name,\n+    TableMetadata & result) const\n+{\n+    if (!tryGetTableMetadata(database_name, table_name, result))\n+    {\n+        throw DB::Exception(\n+            DB::ErrorCodes::DATALAKE_DATABASE_ERROR,\n+            \"Table {} does not exist in Glue catalog\",\n+            database_name + \".\" + table_name);\n+    }\n }\n \n void GlueCatalog::setCredentials(TableMetadata & metadata) const\n",
  "test_patch": "diff --git a/tests/integration/test_database_glue/test.py b/tests/integration/test_database_glue/test.py\nindex 56ddd1c0bff3..8d86f68ef006 100644\n--- a/tests/integration/test_database_glue/test.py\n+++ b/tests/integration/test_database_glue/test.py\n@@ -347,6 +347,7 @@ def test_hide_sensitive_info(started_cluster):\n     assert \"SECRET_2\" not in node.query(f\"SHOW CREATE DATABASE {CATALOG_NAME}\")\n \n \n+\n def test_select_after_rename(started_cluster):\n     node = started_cluster.instances[\"node1\"]\n \n@@ -385,3 +386,46 @@ def test_select_after_rename(started_cluster):\n             update.rename_column(\"bid\", \"new_bid\")\n \n         print(node.query(f\"SELECT * FROM {CATALOG_NAME}.`{namespace}.{table_name}`\"))\n+\n+def test_non_existing_tables(started_cluster):\n+    node = started_cluster.instances[\"node1\"]\n+\n+    test_ref = f\"test_non_existing_tables_{uuid.uuid4()}\"\n+    table_name = f\"{test_ref}_table\"\n+    root_namespace = f\"{test_ref}_namespace\"\n+\n+    namespaces_to_create = [\n+        root_namespace,\n+        f\"{root_namespace}_A\",\n+    ]\n+\n+    catalog = load_catalog_impl(started_cluster)\n+\n+    for namespace in namespaces_to_create:\n+        catalog.create_namespace(namespace)\n+\n+    for namespace in namespaces_to_create:\n+        table = create_table(catalog, namespace, table_name)\n+\n+        num_rows = 10\n+        df = generate_arrow_data(num_rows)\n+        table.append(df)\n+\n+        create_clickhouse_glue_database(started_cluster, node, CATALOG_NAME)\n+\n+        expected = DEFAULT_CREATE_TABLE.format(CATALOG_NAME, namespace, table_name)\n+        assert expected == node.query(\n+            f\"SHOW CREATE TABLE {CATALOG_NAME}.`{namespace}.{table_name}`\"\n+        )\n+\n+        try:\n+            node.query(f\"SHOW CREATE TABLE {CATALOG_NAME}.`{namespace}.wrong_table_name`\")\n+        except Exception as e:\n+            assert \"DB::Exception: Table\" in str(e)\n+            assert \"doesn't exist\" in str(e)\n+\n+        try:\n+            node.query(f\"SHOW CREATE TABLE {CATALOG_NAME}.`fake_namespace.wrong_table_name`\")\n+        except Exception as e:\n+            assert \"DB::Exception: Table\" in str(e)\n+            assert \"doesn't exist\" in str(e)\ndiff --git a/tests/integration/test_database_iceberg/test.py b/tests/integration/test_database_iceberg/test.py\nindex aab38abf5256..c729f709654c 100644\n--- a/tests/integration/test_database_iceberg/test.py\n+++ b/tests/integration/test_database_iceberg/test.py\n@@ -373,3 +373,55 @@ def record(key):\n \n     assert 'aaa\\naaa\\naaa' == node.query(f\"SELECT symbol FROM {CATALOG_NAME}.`{namespace}.{table_name}`\").strip()\n     assert 'bbb\\nbbb\\nbbb' == node.query(f\"SELECT symbol FROM {CATALOG_NAME}.`{namespace}.{table_name_2}`\").strip()\n+\n+\n+def test_non_existing_tables(started_cluster):\n+    node = started_cluster.instances[\"node1\"]\n+\n+    test_ref = f\"test_list_tables_{uuid.uuid4()}\"\n+    table_name = f\"{test_ref}_table\"\n+    root_namespace = f\"{test_ref}_namespace\"\n+\n+    namespace = f\"{root_namespace}.A.B.C\"\n+    namespaces_to_create = [\n+        root_namespace,\n+        f\"{root_namespace}.A\",\n+        f\"{root_namespace}.A.B\",\n+        f\"{root_namespace}.A.B.C\",\n+    ]\n+\n+    catalog = load_catalog_impl(started_cluster)\n+\n+    for namespace in namespaces_to_create:\n+        catalog.create_namespace(namespace)\n+        assert len(catalog.list_tables(namespace)) == 0\n+\n+    table = create_table(catalog, namespace, table_name)\n+\n+    num_rows = 10\n+    data = [generate_record() for _ in range(num_rows)]\n+    df = pa.Table.from_pylist(data)\n+    table.append(df)\n+\n+    create_clickhouse_iceberg_database(started_cluster, node, CATALOG_NAME)\n+\n+    expected = DEFAULT_CREATE_TABLE.format(CATALOG_NAME, namespace, table_name)\n+    assert expected == node.query(\n+        f\"SHOW CREATE TABLE {CATALOG_NAME}.`{namespace}.{table_name}`\"\n+    )\n+\n+    try:\n+        node.query(\n+            f\"SHOW CREATE TABLE {CATALOG_NAME}.`{namespace}.qweqwe`\"\n+        )\n+    except Exception as e:\n+        assert \"DB::Exception: Table\" in str(e)\n+        assert \"doesn't exist\" in str(e)\n+\n+    try:\n+        node.query(\n+            f\"SHOW CREATE TABLE {CATALOG_NAME}.`qweqwe.qweqwe`\"\n+        )\n+    except Exception as e:\n+        assert \"DB::Exception: Table\" in str(e)\n+        assert \"doesn't exist\" in str(e)\n",
  "problem_statement": "SHOW CREATE TABLE shows confusing error for missing Iceberg/Glue tables\n### Describe the improvement\n\nWhen using SHOW CREATE TABLE with a Glue or Iceberg catalog, ClickHouse returns a low-level error if the table doesn\u2019t exist.\n\nExample:  \n\nI have a database with the DataLakeCatalog engine named `datalake`, configured to use the REST catalog.\n\n```sql\nUSE datalake;\nSHOW CREATE TABLE `iceberg.name1`;\n```\n```\nCode: 86. DB::Exception: Received from localhost:9000. DB::HTTPException. DB::HTTPException: Received error from remote server http://rest-catalog:8181/v1/namespaces/iceberg/tables/name1. HTTP status code: 404 'Not Found', body length: 100 bytes, body: '{\"error\":{\"message\":\"Table does not exist: iceberg.name1\",\"type\":\"NoSuchTableException\",\"code\":404}}'. (RECEIVED_ERROR_FROM_REMOTE_IO_SERVER)\n```\nExpected behavior \u2014 same as regular ClickHouse tables:\n```\nCode: 390. DB::Exception: Received from localhost:9000. DB::Exception: Table `iceberg.name1` doesn't exist. (CANNOT_GET_CREATE_TABLE_QUERY)\n```\n\nWith Glue catalog, the message is also unclear:\n```\nCode: 736. DB::Exception: Received from localhost:9000. DB::Exception: Exception calling GetTable for table iceberg.name1: Unable to find Glue table \"name1\" in DB \"iceberg\", catalog \"None\". (DATALAKE_DATABASE_ERROR)\n```\nIt would be great if all catalog types returned a consistent and user-friendly message when a table is missing.\n\nThanks!\n\n\n\n### Which ClickHouse versions are affected?\n\nAll versions where database DataLakeCatalog is supported.\n\n### How to reproduce\n\n1. Create database DataLakeCatalog.\n2. Run `SHOW CREATE TABLE` on a non-existent table in that database.\n\n\n",
  "hints_text": "",
  "created_at": "2025-06-20T16:51:26Z"
}