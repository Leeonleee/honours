diff --git a/tests/integration/test_database_glue/test.py b/tests/integration/test_database_glue/test.py
index 56ddd1c0bff3..8d86f68ef006 100644
--- a/tests/integration/test_database_glue/test.py
+++ b/tests/integration/test_database_glue/test.py
@@ -347,6 +347,7 @@ def test_hide_sensitive_info(started_cluster):
     assert "SECRET_2" not in node.query(f"SHOW CREATE DATABASE {CATALOG_NAME}")
 
 
+
 def test_select_after_rename(started_cluster):
     node = started_cluster.instances["node1"]
 
@@ -385,3 +386,46 @@ def test_select_after_rename(started_cluster):
             update.rename_column("bid", "new_bid")
 
         print(node.query(f"SELECT * FROM {CATALOG_NAME}.`{namespace}.{table_name}`"))
+
+def test_non_existing_tables(started_cluster):
+    node = started_cluster.instances["node1"]
+
+    test_ref = f"test_non_existing_tables_{uuid.uuid4()}"
+    table_name = f"{test_ref}_table"
+    root_namespace = f"{test_ref}_namespace"
+
+    namespaces_to_create = [
+        root_namespace,
+        f"{root_namespace}_A",
+    ]
+
+    catalog = load_catalog_impl(started_cluster)
+
+    for namespace in namespaces_to_create:
+        catalog.create_namespace(namespace)
+
+    for namespace in namespaces_to_create:
+        table = create_table(catalog, namespace, table_name)
+
+        num_rows = 10
+        df = generate_arrow_data(num_rows)
+        table.append(df)
+
+        create_clickhouse_glue_database(started_cluster, node, CATALOG_NAME)
+
+        expected = DEFAULT_CREATE_TABLE.format(CATALOG_NAME, namespace, table_name)
+        assert expected == node.query(
+            f"SHOW CREATE TABLE {CATALOG_NAME}.`{namespace}.{table_name}`"
+        )
+
+        try:
+            node.query(f"SHOW CREATE TABLE {CATALOG_NAME}.`{namespace}.wrong_table_name`")
+        except Exception as e:
+            assert "DB::Exception: Table" in str(e)
+            assert "doesn't exist" in str(e)
+
+        try:
+            node.query(f"SHOW CREATE TABLE {CATALOG_NAME}.`fake_namespace.wrong_table_name`")
+        except Exception as e:
+            assert "DB::Exception: Table" in str(e)
+            assert "doesn't exist" in str(e)
diff --git a/tests/integration/test_database_iceberg/test.py b/tests/integration/test_database_iceberg/test.py
index aab38abf5256..c729f709654c 100644
--- a/tests/integration/test_database_iceberg/test.py
+++ b/tests/integration/test_database_iceberg/test.py
@@ -373,3 +373,55 @@ def record(key):
 
     assert 'aaa
aaa
aaa' == node.query(f"SELECT symbol FROM {CATALOG_NAME}.`{namespace}.{table_name}`").strip()
     assert 'bbb
bbb
bbb' == node.query(f"SELECT symbol FROM {CATALOG_NAME}.`{namespace}.{table_name_2}`").strip()
+
+
+def test_non_existing_tables(started_cluster):
+    node = started_cluster.instances["node1"]
+
+    test_ref = f"test_list_tables_{uuid.uuid4()}"
+    table_name = f"{test_ref}_table"
+    root_namespace = f"{test_ref}_namespace"
+
+    namespace = f"{root_namespace}.A.B.C"
+    namespaces_to_create = [
+        root_namespace,
+        f"{root_namespace}.A",
+        f"{root_namespace}.A.B",
+        f"{root_namespace}.A.B.C",
+    ]
+
+    catalog = load_catalog_impl(started_cluster)
+
+    for namespace in namespaces_to_create:
+        catalog.create_namespace(namespace)
+        assert len(catalog.list_tables(namespace)) == 0
+
+    table = create_table(catalog, namespace, table_name)
+
+    num_rows = 10
+    data = [generate_record() for _ in range(num_rows)]
+    df = pa.Table.from_pylist(data)
+    table.append(df)
+
+    create_clickhouse_iceberg_database(started_cluster, node, CATALOG_NAME)
+
+    expected = DEFAULT_CREATE_TABLE.format(CATALOG_NAME, namespace, table_name)
+    assert expected == node.query(
+        f"SHOW CREATE TABLE {CATALOG_NAME}.`{namespace}.{table_name}`"
+    )
+
+    try:
+        node.query(
+            f"SHOW CREATE TABLE {CATALOG_NAME}.`{namespace}.qweqwe`"
+        )
+    except Exception as e:
+        assert "DB::Exception: Table" in str(e)
+        assert "doesn't exist" in str(e)
+
+    try:
+        node.query(
+            f"SHOW CREATE TABLE {CATALOG_NAME}.`qweqwe.qweqwe`"
+        )
+    except Exception as e:
+        assert "DB::Exception: Table" in str(e)
+        assert "doesn't exist" in str(e)
