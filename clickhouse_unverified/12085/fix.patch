diff --git a/src/Processors/QueryPipeline.h b/src/Processors/QueryPipeline.h
index 7dddb2526e54..adab155d2014 100644
--- a/src/Processors/QueryPipeline.h
+++ b/src/Processors/QueryPipeline.h
@@ -167,6 +167,13 @@ class QueryPipeline
     /// Set upper limit for the recommend number of threads
     void setMaxThreads(size_t max_threads_) { max_threads = max_threads_; }
 
+    /// Update upper limit for the recommend number of threads
+    void limitMaxThreads(size_t max_threads_)
+    {
+        if (max_threads == 0 || max_threads_ < max_threads)
+            max_threads = max_threads_;
+    }
+
     /// Convert query pipeline to single or several pipes.
     Pipe getPipe() &&;
     Pipes getPipes() &&;
diff --git a/src/Processors/QueryPlan/QueryPlan.cpp b/src/Processors/QueryPlan/QueryPlan.cpp
index 25983c25c7e2..cd8c442a3db7 100644
--- a/src/Processors/QueryPlan/QueryPlan.cpp
+++ b/src/Processors/QueryPlan/QueryPlan.cpp
@@ -153,8 +153,8 @@ QueryPipelinePtr QueryPlan::buildQueryPipeline()
             bool limit_max_threads = frame.pipelines.empty();
             last_pipeline = frame.node->step->updatePipeline(std::move(frame.pipelines));
 
-            if (limit_max_threads)
-                last_pipeline->setMaxThreads(max_threads);
+            if (limit_max_threads && max_threads)
+                last_pipeline->limitMaxThreads(max_threads);
 
             stack.pop();
         }
diff --git a/src/Processors/QueryPlan/ReadFromStorageStep.cpp b/src/Processors/QueryPlan/ReadFromStorageStep.cpp
index e0781c24f7f5..7e8d44abed87 100644
--- a/src/Processors/QueryPlan/ReadFromStorageStep.cpp
+++ b/src/Processors/QueryPlan/ReadFromStorageStep.cpp
@@ -113,7 +113,7 @@ ReadFromStorageStep::ReadFromStorageStep(
         }
     }
 
-    if (pipes.size() == 1)
+    if (pipes.size() == 1 && !storage->isView())
         pipeline->setMaxThreads(1);
 
     for (auto & pipe : pipes)
