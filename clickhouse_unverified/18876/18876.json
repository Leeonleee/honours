{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 18876,
  "instance_id": "ClickHouse__ClickHouse-18876",
  "issue_numbers": [
    "9756"
  ],
  "base_commit": "7d25c1f7f767636f54a65c06035087648d33ee17",
  "patch": "diff --git a/src/Storages/transformQueryForExternalDatabase.cpp b/src/Storages/transformQueryForExternalDatabase.cpp\nindex f35fb1c8a34b..42daf8cfc267 100644\n--- a/src/Storages/transformQueryForExternalDatabase.cpp\n+++ b/src/Storages/transformQueryForExternalDatabase.cpp\n@@ -138,6 +138,12 @@ bool isCompatible(const IAST & node)\n         if (name == \"tuple\" && function->arguments->children.size() <= 1)\n             return false;\n \n+        /// If the right hand side of IN is an identifier (example: x IN table), then it's not compatible.\n+        if ((name == \"in\" || name == \"notIn\")\n+            && (function->arguments->children.size() != 2\n+                || function->arguments->children[1]->as<ASTIdentifier>()))\n+            return false;\n+\n         for (const auto & expr : function->arguments->children)\n             if (!isCompatible(*expr))\n                 return false;\n",
  "test_patch": "diff --git a/src/Storages/tests/gtest_transform_query_for_external_database.cpp b/src/Storages/tests/gtest_transform_query_for_external_database.cpp\nindex 835aebab9009..99dfc55ed696 100644\n--- a/src/Storages/tests/gtest_transform_query_for_external_database.cpp\n+++ b/src/Storages/tests/gtest_transform_query_for_external_database.cpp\n@@ -80,6 +80,24 @@ TEST(TransformQueryForExternalDatabase, InWithSingleElement)\n           state.context, state.columns);\n }\n \n+TEST(TransformQueryForExternalDatabase, InWithTable)\n+{\n+    const State & state = State::instance();\n+\n+    check(\"SELECT column FROM test.table WHERE 1 IN external_table\",\n+          R\"(SELECT \"column\" FROM \"test\".\"table\")\",\n+          state.context, state.columns);\n+    check(\"SELECT column FROM test.table WHERE 1 IN (x)\",\n+          R\"(SELECT \"column\" FROM \"test\".\"table\")\",\n+          state.context, state.columns);\n+    check(\"SELECT column, field, value FROM test.table WHERE column IN (field, value)\",\n+          R\"(SELECT \"column\", \"field\", \"value\" FROM \"test\".\"table\" WHERE \"column\" IN (\"field\", \"value\"))\",\n+          state.context, state.columns);\n+    check(\"SELECT column FROM test.table WHERE column NOT IN hello AND column = 123\",\n+          R\"(SELECT \"column\" FROM \"test\".\"table\" WHERE (\"column\" = 123))\",\n+          state.context, state.columns);\n+}\n+\n TEST(TransformQueryForExternalDatabase, Like)\n {\n     const State & state = State::instance();\n",
  "problem_statement": "DB::Exception: mysqlxx::BadQuery: Unknown column 'external_table' in 'where clause'\nI have table `m_test` in mariadb server and clickhouse table `ch_test` with ENGINE=MySQL, which looks at `m_test`.\r\n\r\nWhen I make query with [external data](https://clickhouse.tech/docs/en/operations/table_engines/external_data/)  like this\r\n```sql\r\nSELECT\r\n *\r\nFROM other_ch_table AS i \r\nLEFT JOIN (\r\n  SELECT\r\n    *\r\n  FROM ch_test\r\n  WHERE id IN external_table\r\n) AS n ON(n.id = i.id)\r\n```\r\nI have error\r\nCode: 1000. DB::Exception: Received from 127.0.0.1:9000. DB::Exception: mysqlxx::BadQuery: Unknown column 'external_table' in 'where clause' (127.0.0.1:3306).\r\n\r\nBut if I change query to\r\n```sql\r\nSELECT\r\n *\r\nFROM other_ch_table AS i \r\nLEFT JOIN (\r\n  SELECT\r\n    *\r\n  FROM ch_test\r\n  WHERE id IN (SELECT id FROM external_table)\r\n) AS n ON(n.id = i.id)\r\n```\r\nerror disappear.\r\n\r\nThis error appear after upgrade 20.1.2.4 to 20.3.3.6.\r\n\r\nVersions:\r\n- mariadb server 10.2.7-MariaDB-10.2.7+maria~jessie-log\r\n- clickhouse 20.3.3.6\n",
  "hints_text": "Facing a similar issue  \r\nCode: 1000. DB::Exception: Received from localhost:9000. DB::Exception: mysqlxx::BadQuery\r\nThe query below was working on version 19.16.14.65 but not on 20.3.12.112 The latest Altinity LTS\r\n\r\n```\r\nselect mysql_db.a_table.geo_region_id,\r\n       mysql_db.a_table.domain_id,\r\n       mysql_db.b_table.name,\r\n       mysql_db.b_table.a_column,\r\n       mysql_db.c_table.list_id\r\n\r\nfrom mysql_db.a_table\r\n         inner join\r\n     mysql_db.b_table\r\n     on mysql_db.a_table.domain_id = mysql_db.b_table.id\r\n         and mysql_db.a_table.geo_region_id = toInt64(999)\r\n         inner join\r\n     mysql_db.c_table\r\n     on mysql_db.c_table.a_column = mysql_db.b_table.a_column\r\nwhere mysql_db.a_table.geo_region_id =999\r\n  and mysql_db.c_table.list_id = 126\r\n```\r\n\r\nThe below query now works \r\n\r\n\r\n\r\n\r\n```\r\nselect mysql_db.a_table.geo_region_id,\r\n       mysql_db.a_table.domain_id,\r\n       mysql_db.b_table.name,\r\n       mysql_db.b_table.a_column,\r\n       mysql_db.c_table.list_id\r\n\r\nfrom mysql_db.a_table\r\n         inner join\r\n     mysql_db.b_table\r\n     on mysql_db.a_table.domain_id = mysql_db.b_table.id\r\n         and mysql_db.a_table.geo_region_id = toInt64(999)\r\n         inner join\r\n     mysql_db.c_table\r\n     on mysql_db.c_table.a_column = mysql_db.b_table.a_column\r\nwhere mysql_db.c_table.list_id = 126\r\n```\r\n\r\n \r\nSomething that would be helpful is if Can I see the aliased query that is being run on MySQL from clickhouse. ",
  "created_at": "2021-01-09T03:30:40Z"
}