{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 25773,
  "instance_id": "ClickHouse__ClickHouse-25773",
  "issue_numbers": [
    "18698"
  ],
  "base_commit": "c22b7a38ee89f1f8f5aa79c7bbd928fe09eff630",
  "patch": "diff --git a/docs/en/operations/system-tables/processes.md b/docs/en/operations/system-tables/processes.md\nindex 9ef3c648006f..0a469e144c5d 100644\n--- a/docs/en/operations/system-tables/processes.md\n+++ b/docs/en/operations/system-tables/processes.md\n@@ -34,14 +34,14 @@ initial_port:         47588\n interface:            1\n os_user:              bharatnc\n client_hostname:      tower\n-client_name:          ClickHouse \n+client_name:          ClickHouse\n client_revision:      54437\n client_version_major: 20\n client_version_minor: 7\n client_version_patch: 2\n http_method:          0\n-http_user_agent:      \n-quota_key:            \n+http_user_agent:\n+quota_key:\n elapsed:              0.000582537\n is_cancelled:         0\n read_rows:            0\n@@ -53,12 +53,10 @@ memory_usage:         0\n peak_memory_usage:    0\n query:                SELECT * from system.processes LIMIT 10 FORMAT Vertical;\n thread_ids:           [67]\n-ProfileEvents.Names:  ['Query','SelectQuery','ReadCompressedBytes','CompressedReadBufferBlocks','CompressedReadBufferBytes','IOBufferAllocs','IOBufferAllocBytes','ContextLock','RWLockAcquiredReadLocks']\n-ProfileEvents.Values: [1,1,36,1,10,1,89,16,1]\n-Settings.Names:       ['use_uncompressed_cache','load_balancing','log_queries','max_memory_usage']\n-Settings.Values:      ['0','in_order','1','10000000000']\n+ProfileEvents:        {'Query':1,'SelectQuery':1,'ReadCompressedBytes':36,'CompressedReadBufferBlocks':1,'CompressedReadBufferBytes':10,'IOBufferAllocs':1,'IOBufferAllocBytes':89,'ContextLock':15,'RWLockAcquiredReadLocks':1}\n+Settings:             {'background_pool_size':'32','load_balancing':'random','allow_suspicious_low_cardinality_types':'1','distributed_aggregation_memory_efficient':'1','skip_unavailable_shards':'1','log_queries':'1','max_bytes_before_external_group_by':'20000000000','max_bytes_before_external_sort':'20000000000','allow_introspection_functions':'1'}\n \n-1 rows in set. Elapsed: 0.002 sec. \n+1 rows in set. Elapsed: 0.002 sec.\n ```\n \n [Original article](https://clickhouse.tech/docs/en/operations/system_tables/processes) <!--hide-->\ndiff --git a/docs/en/operations/system-tables/query_log.md b/docs/en/operations/system-tables/query_log.md\nindex 85f0679fe370..57512a78ad0e 100644\n--- a/docs/en/operations/system-tables/query_log.md\n+++ b/docs/en/operations/system-tables/query_log.md\n@@ -84,12 +84,10 @@ Columns:\n -   `forwarded_for` ([String](../../sql-reference/data-types/string.md)) \u2014 HTTP header `X-Forwarded-For` passed in the HTTP query.\n -   `quota_key` ([String](../../sql-reference/data-types/string.md)) \u2014 The `quota key` specified in the [quotas](../../operations/quotas.md) setting (see `keyed`).\n -   `revision` ([UInt32](../../sql-reference/data-types/int-uint.md)) \u2014 ClickHouse revision.\n+-   `ProfileEvents` ([Map(String, UInt64)](../../sql-reference/data-types/array.md)) \u2014 ProfileEvents that measure different metrics. The description of them could be found in the table [system.events](../../operations/system-tables/events.md#system_tables-events)\n+-   `Settings` ([Map(String, String)](../../sql-reference/data-types/array.md)) \u2014 Settings that were changed when the client ran the query. To enable logging changes to settings, set the `log_query_settings` parameter to 1.\n -   `log_comment` ([String](../../sql-reference/data-types/string.md)) \u2014 Log comment. It can be set to arbitrary string no longer than [max_query_size](../../operations/settings/settings.md#settings-max_query_size). An empty string if it is not defined.\n -   `thread_ids` ([Array(UInt64)](../../sql-reference/data-types/array.md)) \u2014 Thread ids that are participating in query execution.\n--   `ProfileEvents.Names` ([Array(String)](../../sql-reference/data-types/array.md)) \u2014 Counters that measure different metrics. The description of them could be found in the table [system.events](../../operations/system-tables/events.md#system_tables-events)\n--   `ProfileEvents.Values` ([Array(UInt64)](../../sql-reference/data-types/array.md)) \u2014 Values of metrics that are listed in the `ProfileEvents.Names` column.\n--   `Settings.Names` ([Array(String)](../../sql-reference/data-types/array.md)) \u2014 Names of settings that were changed when the client ran the query. To enable logging changes to settings, set the `log_query_settings` parameter to 1.\n--   `Settings.Values` ([Array(String)](../../sql-reference/data-types/array.md)) \u2014 Values of settings that are listed in the `Settings.Names` column.\n -   `used_aggregate_functions` ([Array(String)](../../sql-reference/data-types/array.md)) \u2014 Canonical names of `aggregate functions`, which were used during query execution.\n -   `used_aggregate_function_combinators` ([Array(String)](../../sql-reference/data-types/array.md)) \u2014 Canonical names of `aggregate functions combinators`, which were used during query execution.\n -   `used_database_engines` ([Array(String)](../../sql-reference/data-types/array.md)) \u2014 Canonical names of `database engines`, which were used during query execution.\n@@ -109,68 +107,49 @@ SELECT * FROM system.query_log WHERE type = 'QueryFinish' AND (query LIKE '%toDa\n ``` text\n Row 1:\n \u2500\u2500\u2500\u2500\u2500\u2500\n-type:                                QueryFinish\n-event_date:                          2021-03-18\n-event_time:                          2021-03-18 20:54:18\n-event_time_microseconds:             2021-03-18 20:54:18.676686\n-query_start_time:                    2021-03-18 20:54:18\n-query_start_time_microseconds:       2021-03-18 20:54:18.673934\n-query_duration_ms:                   2\n-read_rows:                           100\n-read_bytes:                          800\n-written_rows:                        0\n-written_bytes:                       0\n-result_rows:                         2\n-result_bytes:                        4858\n-memory_usage:                        0\n-current_database:                    default\n-query:                               SELECT uniqArray([1, 1, 2]), SUBSTRING('Hello, world', 7, 5), flatten([[[BIT_AND(123)]], [[mod(3, 2)], [CAST('1' AS INTEGER)]]]), week(toDate('2000-12-05')), CAST(arrayJoin([NULL, NULL]) AS Nullable(TEXT)), avgOrDefaultIf(number, number % 2), sumOrNull(number), toTypeName(sumOrNull(number)), countIf(toDate('2000-12-05') + number as d, toDayOfYear(d) % 2) FROM numbers(100)\n-normalized_query_hash:               17858008518552525706\n-query_kind:                          Select\n-databases:                           ['_table_function']\n-tables:                              ['_table_function.numbers']\n-columns:                             ['_table_function.numbers.number']\n-exception_code:                      0\n+type:                          QueryStart\n+event_date:                    2020-09-11\n+event_time:                    2020-09-11 10:08:17\n+event_time_microseconds:       2020-09-11 10:08:17.063321\n+query_start_time:              2020-09-11 10:08:17\n+query_start_time_microseconds: 2020-09-11 10:08:17.063321\n+query_duration_ms:             0\n+read_rows:                     0\n+read_bytes:                    0\n+written_rows:                  0\n+written_bytes:                 0\n+result_rows:                   0\n+result_bytes:                  0\n+memory_usage:                  0\n+current_database:              default\n+query:                         INSERT INTO test1 VALUES\n+exception_code:                0\n exception:\n stack_trace:\n-is_initial_query:                    1\n-user:                                default\n-query_id:                            58f3d392-0fa0-4663-ae1d-29917a1a9c9c\n-address:                             ::ffff:127.0.0.1\n-port:                                37486\n-initial_user:                        default\n-initial_query_id:                    58f3d392-0fa0-4663-ae1d-29917a1a9c9c\n-initial_address:                     ::ffff:127.0.0.1\n-initial_port:                        37486\n-interface:                           1\n-os_user:                             sevirov\n-client_hostname:                     clickhouse.ru-central1.internal\n-client_name:                         ClickHouse\n-client_revision:                     54447\n-client_version_major:                21\n-client_version_minor:                4\n-client_version_patch:                1\n-http_method:                         0\n+is_initial_query:              1\n+user:                          default\n+query_id:                      50a320fd-85a8-49b8-8761-98a86bcbacef\n+address:                       ::ffff:127.0.0.1\n+port:                          33452\n+initial_user:                  default\n+initial_query_id:              50a320fd-85a8-49b8-8761-98a86bcbacef\n+initial_address:               ::ffff:127.0.0.1\n+initial_port:                  33452\n+interface:                     1\n+os_user:                       bharatnc\n+client_hostname:               tower\n+client_name:                   ClickHouse\n+client_revision:               54437\n+client_version_major:          20\n+client_version_minor:          7\n+client_version_patch:          2\n+http_method:                   0\n http_user_agent:\n-http_referer:\n-forwarded_for:\n quota_key:\n-revision:                            54449\n-log_comment:\n-thread_ids:                          [587,11939]\n-ProfileEvents.Names:                 ['Query','SelectQuery','ReadCompressedBytes','CompressedReadBufferBlocks','CompressedReadBufferBytes','IOBufferAllocs','IOBufferAllocBytes','ArenaAllocChunks','ArenaAllocBytes','FunctionExecute','TableFunctionExecute','NetworkSendElapsedMicroseconds','SelectedRows','SelectedBytes','ContextLock','RWLockAcquiredReadLocks','RealTimeMicroseconds','UserTimeMicroseconds','SystemTimeMicroseconds','SoftPageFaults','OSCPUVirtualTimeMicroseconds','OSWriteBytes']\n-ProfileEvents.Values:                [1,1,36,1,10,2,1048680,1,4096,36,1,110,100,800,77,1,3137,1476,1101,8,2577,8192]\n-Settings.Names:                      ['load_balancing','max_memory_usage']\n-Settings.Values:                     ['random','10000000000']\n-used_aggregate_functions:            ['groupBitAnd','avg','sum','count','uniq']\n-used_aggregate_function_combinators: ['OrDefault','If','OrNull','Array']\n-used_database_engines:               []\n-used_data_type_families:             ['String','Array','Int32','Nullable']\n-used_dictionaries:                   []\n-used_formats:                        []\n-used_functions:                      ['toWeek','CAST','arrayFlatten','toTypeName','toDayOfYear','addDays','array','toDate','modulo','substring','plus']\n-used_storages:                       []\n-used_table_functions:                ['numbers']\n+revision:                      54440\n+thread_ids:                    []\n+ProfileEvents:        {'Query':1,'SelectQuery':1,'ReadCompressedBytes':36,'CompressedReadBufferBlocks':1,'CompressedReadBufferBytes':10,'IOBufferAllocs':1,'IOBufferAllocBytes':89,'ContextLock':15,'RWLockAcquiredReadLocks':1}\n+Settings:             {'background_pool_size':'32','load_balancing':'random','allow_suspicious_low_cardinality_types':'1','distributed_aggregation_memory_efficient':'1','skip_unavailable_shards':'1','log_queries':'1','max_bytes_before_external_group_by':'20000000000','max_bytes_before_external_sort':'20000000000','allow_introspection_functions':'1'}\n ```\n \n **See Also**\ndiff --git a/docs/en/operations/system-tables/query_thread_log.md b/docs/en/operations/system-tables/query_thread_log.md\nindex 296a33259b34..58af246056e2 100644\n--- a/docs/en/operations/system-tables/query_thread_log.md\n+++ b/docs/en/operations/system-tables/query_thread_log.md\n@@ -58,8 +58,7 @@ Columns:\n -   `http_user_agent` ([String](../../sql-reference/data-types/string.md)) \u2014 The `UserAgent` header passed in the HTTP request.\n -   `quota_key` ([String](../../sql-reference/data-types/string.md)) \u2014 The \u201cquota key\u201d specified in the [quotas](../../operations/quotas.md) setting (see `keyed`).\n -   `revision` ([UInt32](../../sql-reference/data-types/int-uint.md)) \u2014 ClickHouse revision.\n--   `ProfileEvents.Names` ([Array(String)](../../sql-reference/data-types/array.md)) \u2014 Counters that measure different metrics for this thread. The description of them could be found in the table [system.events](#system_tables-events).\n--   `ProfileEvents.Values` ([Array(UInt64)](../../sql-reference/data-types/array.md)) \u2014 Values of metrics for this thread that are listed in the `ProfileEvents.Names` column.\n+-   `ProfileEvents` ([Map(String, UInt64)](../../sql-reference/data-types/array.md)) \u2014 ProfileEvents that measure different metrics for this thread. The description of them could be found in the table [system.events](#system_tables-events).\n \n **Example**\n \n@@ -98,17 +97,16 @@ initial_port:                  33452\n interface:                     1\n os_user:                       bharatnc\n client_hostname:               tower\n-client_name:                   ClickHouse \n+client_name:                   ClickHouse\n client_revision:               54437\n client_version_major:          20\n client_version_minor:          7\n client_version_patch:          2\n http_method:                   0\n-http_user_agent:               \n-quota_key:                     \n+http_user_agent:\n+quota_key:\n revision:                      54440\n-ProfileEvents.Names:           ['Query','InsertQuery','FileOpen','WriteBufferFromFileDescriptorWrite','WriteBufferFromFileDescriptorWriteBytes','ReadCompressedBytes','CompressedReadBufferBlocks','CompressedReadBufferBytes','IOBufferAllocs','IOBufferAllocBytes','FunctionExecute','CreatedWriteBufferOrdinary','DiskWriteElapsedMicroseconds','NetworkReceiveElapsedMicroseconds','NetworkSendElapsedMicroseconds','InsertedRows','InsertedBytes','SelectedRows','SelectedBytes','MergeTreeDataWriterRows','MergeTreeDataWriterUncompressedBytes','MergeTreeDataWriterCompressedBytes','MergeTreeDataWriterBlocks','MergeTreeDataWriterBlocksAlreadySorted','ContextLock','RWLockAcquiredReadLocks','RealTimeMicroseconds','UserTimeMicroseconds','SoftPageFaults','OSCPUVirtualTimeMicroseconds','OSWriteBytes','OSReadChars','OSWriteChars']\n-ProfileEvents.Values:          [1,1,11,11,591,148,3,71,29,6533808,1,11,72,18,47,1,12,1,12,1,12,189,1,1,10,2,70853,2748,49,2747,45056,422,1520]\n+ProfileEvents:        {'Query':1,'SelectQuery':1,'ReadCompressedBytes':36,'CompressedReadBufferBlocks':1,'CompressedReadBufferBytes':10,'IOBufferAllocs':1,'IOBufferAllocBytes':89,'ContextLock':15,'RWLockAcquiredReadLocks':1}\n ```\n \n **See Also**\ndiff --git a/docs/ja/operations/system-tables.md b/docs/ja/operations/system-tables.md\nindex 095038b2b729..be0c33562479 100644\n--- a/docs/ja/operations/system-tables.md\n+++ b/docs/ja/operations/system-tables.md\n@@ -625,10 +625,8 @@ ClickHouse\u306f\u3053\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 [query_log](server-configur\n -   `quota_key` (String) \u2014 The \u201cquota key\u201d \u3067\u6307\u5b9a\u3055\u308c\u308b\u3002 [\u30af\u30a9\u30fc\u30bf](quotas.md) \u8a2d\u5b9a(\u53c2\u7167 `keyed`).\n -   `revision` (UInt32) \u2014 ClickHouse revision.\n -   `thread_numbers` (Array(UInt32)) \u2014 Number of threads that are participating in query execution.\n--   `ProfileEvents.Names` (Array(String)) \u2014 Counters that measure different metrics. The description of them could be found in the table [\u30b7\u30b9\u30c6\u30e0\u30a4\u30d9\u30f3\u30c8](#system_tables-events)\n--   `ProfileEvents.Values` (Array(UInt64)) \u2014 Values of metrics that are listed in the `ProfileEvents.Names` \u5217\u3002\n--   `Settings.Names` (Array(String)) \u2014 Names of settings that were changed when the client ran the query. To enable logging changes to settings, set the `log_query_settings` \u30d1\u30e9\u30e1\u30fc\u30bf\u306f1\u3002\n--   `Settings.Values` (Array(String)) \u2014 Values of settings that are listed in the `Settings.Names` \u5217\u3002\n+-   `ProfileEvents` (Map(String, UInt64)) \u2014 ProfileEvents that measure different metrics. The description of them could be found in the table [\u30b7\u30b9\u30c6\u30e0\u30a4\u30d9\u30f3\u30c8](#system_tables-events)\n+-   `Settings` (Map(String, String)) \u2014 Settings  \u5217\u3002\n \n \u305d\u308c\u305e\u308c\u306e\u30af\u30a8\u30ea\u3067\u306f\u3001\u4e00\u3064\u307e\u305f\u306f\u4e8c\u3064\u306e\u884c\u304c `query_log` \u30af\u30a8\u30ea\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u306b\u5fdc\u3058\u3066\u3001\u30c6\u30fc\u30d6\u30eb:\n \n@@ -698,8 +696,7 @@ ClickHouse\u306f\u3053\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002 [query_thread_log](server-c\n -   `http_user_agent` (String) \u2014 The `UserAgent` HTTP\u8981\u6c42\u3067\u6e21\u3055\u308c\u308b\u30d8\u30c3\u30c0\u30fc\u3002\n -   `quota_key` (String) \u2014 The \u201cquota key\u201d \u3067\u6307\u5b9a\u3055\u308c\u308b\u3002 [\u30af\u30a9\u30fc\u30bf](quotas.md) \u8a2d\u5b9a(\u53c2\u7167 `keyed`).\n -   `revision` (UInt32) \u2014 ClickHouse revision.\n--   `ProfileEvents.Names` (Array(String)) \u2014 Counters that measure different metrics for this thread. The description of them could be found in the table [\u30b7\u30b9\u30c6\u30e0\u30a4\u30d9\u30f3\u30c8](#system_tables-events)\n--   `ProfileEvents.Values` (Array(UInt64)) \u2014 Values of metrics for this thread that are listed in the `ProfileEvents.Names` \u5217\u3002\n+-   `ProfileEvents` (Map(String, UInt64)) \u2014 ProfileEvents that measure different metrics for this thread. The description of them could be found in the table [\u30b7\u30b9\u30c6\u30e0\u30a4\u30d9\u30f3\u30c8](#system_tables-events)\n \n \u65e2\u5b9a\u3067\u306f\u3001\u30ed\u30b0\u306f7.5\u79d2\u9593\u9694\u3067\u30c6\u30fc\u30d6\u30eb\u306b\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002 \u3053\u306e\u9593\u9694\u306f [query_thread_log](server-configuration-parameters/settings.md#server_configuration_parameters-query-thread-log) \u30b5\u30fc\u30d0\u8a2d\u5b9a(\u53c2\u7167 `flush_interval_milliseconds` \u5909\u6570\uff09\u3002 \u30ed\u30b0\u3092\u30e1\u30e2\u30ea\u30d0\u30c3\u30d5\u30a1\u304b\u3089\u30c6\u30fc\u30d6\u30eb\u306b\u5f37\u5236\u7684\u306b\u30d5\u30e9\u30c3\u30b7\u30e5\u3059\u308b\u306b\u306f\u3001 `SYSTEM FLUSH LOGS` \u30af\u30a8\u30ea\u3002\n \ndiff --git a/docs/ru/operations/system-tables/query_log.md b/docs/ru/operations/system-tables/query_log.md\nindex d3872e1ef182..8cdddba462c9 100644\n--- a/docs/ru/operations/system-tables/query_log.md\n+++ b/docs/ru/operations/system-tables/query_log.md\n@@ -84,12 +84,10 @@ ClickHouse \u043d\u0435 \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u0430 \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\n -   `forwarded_for` ([String](../../sql-reference/data-types/string.md)) \u2014 HTTP \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a `X-Forwarded-For`.\n -   `quota_key` ([String](../../sql-reference/data-types/string.md)) \u2014 `\u043a\u043b\u044e\u0447 \u043a\u0432\u043e\u0442\u044b` \u0438\u0437 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a [\u043a\u0432\u043e\u0442](quotas.md) (\u0441\u043c. `keyed`).\n -   `revision` ([UInt32](../../sql-reference/data-types/int-uint.md)) \u2014 \u0440\u0435\u0432\u0438\u0437\u0438\u044f ClickHouse.\n+-   `ProfileEvents` ([Map(String, UInt64)](../../sql-reference/data-types/array.md)) \u2014 \u0441\u0447\u0435\u0442\u0447\u0438\u043a\u0438 \u0434\u043b\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b [system.events](#system_tables-events)(#system_tables-events\n+-   `Settings` ([Map(String, String)](../../sql-reference/data-types/array.md)) \u2014 \u0438\u043c\u0435\u043d\u0430 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f, \u043a\u043e\u0433\u0434\u0430 \u043a\u043b\u0438\u0435\u043d\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441. \u0427\u0442\u043e\u0431\u044b \u0440\u0430\u0437\u0440\u0435\u0448\u0438\u0442\u044c \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 `log_query_settings` \u0440\u0430\u0432\u043d\u044b\u043c 1.\n -   `log_comment` ([String](../../sql-reference/data-types/string.md)) \u2014 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u043a \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u043b\u043e\u0433\u0435. \u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443, \u0434\u043b\u0438\u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u043d\u0435 \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c [max_query_size](../../operations/settings/settings.md#settings-max_query_size). \u0415\u0441\u043b\u0438 \u043d\u0435\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0442\u043e \u043f\u0443\u0441\u0442\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430.\n -   `thread_ids` ([Array(UInt64)](../../sql-reference/data-types/array.md)) \u2014 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b \u043f\u043e\u0442\u043e\u043a\u043e\u0432, \u0443\u0447\u0430\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.\n--   `ProfileEvents.Names` ([Array(String)](../../sql-reference/data-types/array.md)) \u2014 \u0441\u0447\u0435\u0442\u0447\u0438\u043a\u0438 \u0434\u043b\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b [system.events](#system_tables-events)(#system_tables-events\n--   `ProfileEvents.Values` ([Array(UInt64)](../../sql-reference/data-types/array.md)) \u2014 \u043c\u0435\u0442\u0440\u0438\u043a\u0438, \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 `ProfileEvents.Names`.\n--   `Settings.Names` ([Array(String)](../../sql-reference/data-types/array.md)) \u2014 \u0438\u043c\u0435\u043d\u0430 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u0435\u043d\u044f\u044e\u0442\u0441\u044f, \u043a\u043e\u0433\u0434\u0430 \u043a\u043b\u0438\u0435\u043d\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441. \u0427\u0442\u043e\u0431\u044b \u0440\u0430\u0437\u0440\u0435\u0448\u0438\u0442\u044c \u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0439 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a, \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0435 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 `log_query_settings` \u0440\u0430\u0432\u043d\u044b\u043c 1.\n--   `Settings.Values` ([Array(String)](../../sql-reference/data-types/array.md)) \u2014 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u044b \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 `Settings.Names`.\n -   `used_aggregate_functions` ([Array(String)](../../sql-reference/data-types/array.md)) \u2014 \u043a\u0430\u043d\u043e\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0438\u043c\u0435\u043d\u0430 `\u0430\u0433\u0440\u0435\u0433\u0430\u0442\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439`, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430.\n -   `used_aggregate_function_combinators` ([Array(String)](../../sql-reference/data-types/array.md)) \u2014 \u043a\u0430\u043d\u043e\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0438\u043c\u0435\u043d\u0430 `\u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0442\u043e\u0440\u043e\u0432 \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439`, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430.\n -   `used_database_engines` ([Array(String)](../../sql-reference/data-types/array.md)) \u2014 \u043a\u0430\u043d\u043e\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0438\u043c\u0435\u043d\u0430 `\u0434\u0432\u0438\u0436\u043a\u043e\u0432 \u0431\u0430\u0437 \u0434\u0430\u043d\u043d\u044b\u0445`, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430.\n@@ -109,68 +107,49 @@ SELECT * FROM system.query_log WHERE type = 'QueryFinish' AND (query LIKE '%toDa\n ``` text\n Row 1:\n \u2500\u2500\u2500\u2500\u2500\u2500\n-type:                                QueryFinish\n-event_date:                          2021-03-18\n-event_time:                          2021-03-18 20:54:18\n-event_time_microseconds:             2021-03-18 20:54:18.676686\n-query_start_time:                    2021-03-18 20:54:18\n-query_start_time_microseconds:       2021-03-18 20:54:18.673934\n-query_duration_ms:                   2\n-read_rows:                           100\n-read_bytes:                          800\n-written_rows:                        0\n-written_bytes:                       0\n-result_rows:                         2\n-result_bytes:                        4858\n-memory_usage:                        0\n-current_database:                    default\n-query:                               SELECT uniqArray([1, 1, 2]), SUBSTRING('Hello, world', 7, 5), flatten([[[BIT_AND(123)]], [[mod(3, 2)], [CAST('1' AS INTEGER)]]]), week(toDate('2000-12-05')), CAST(arrayJoin([NULL, NULL]) AS Nullable(TEXT)), avgOrDefaultIf(number, number % 2), sumOrNull(number), toTypeName(sumOrNull(number)), countIf(toDate('2000-12-05') + number as d, toDayOfYear(d) % 2) FROM numbers(100)\n-normalized_query_hash:               17858008518552525706\n-query_kind:                          Select\n-databases:                           ['_table_function']\n-tables:                              ['_table_function.numbers']\n-columns:                             ['_table_function.numbers.number']\n-exception_code:                      0\n+type:                          QueryStart\n+event_date:                    2020-09-11\n+event_time:                    2020-09-11 10:08:17\n+event_time_microseconds:       2020-09-11 10:08:17.063321\n+query_start_time:              2020-09-11 10:08:17\n+query_start_time_microseconds: 2020-09-11 10:08:17.063321\n+query_duration_ms:             0\n+read_rows:                     0\n+read_bytes:                    0\n+written_rows:                  0\n+written_bytes:                 0\n+result_rows:                   0\n+result_bytes:                  0\n+memory_usage:                  0\n+current_database:              default\n+query:                         INSERT INTO test1 VALUES\n+exception_code:                0\n exception:\n stack_trace:\n-is_initial_query:                    1\n-user:                                default\n-query_id:                            58f3d392-0fa0-4663-ae1d-29917a1a9c9c\n-address:                             ::ffff:127.0.0.1\n-port:                                37486\n-initial_user:                        default\n-initial_query_id:                    58f3d392-0fa0-4663-ae1d-29917a1a9c9c\n-initial_address:                     ::ffff:127.0.0.1\n-initial_port:                        37486\n-interface:                           1\n-os_user:                             sevirov\n-client_hostname:                     clickhouse.ru-central1.internal\n-client_name:                         ClickHouse\n-client_revision:                     54447\n-client_version_major:                21\n-client_version_minor:                4\n-client_version_patch:                1\n-http_method:                         0\n+is_initial_query:              1\n+user:                          default\n+query_id:                      50a320fd-85a8-49b8-8761-98a86bcbacef\n+address:                       ::ffff:127.0.0.1\n+port:                          33452\n+initial_user:                  default\n+initial_query_id:              50a320fd-85a8-49b8-8761-98a86bcbacef\n+initial_address:               ::ffff:127.0.0.1\n+initial_port:                  33452\n+interface:                     1\n+os_user:                       bharatnc\n+client_hostname:               tower\n+client_name:                   ClickHouse\n+client_revision:               54437\n+client_version_major:          20\n+client_version_minor:          7\n+client_version_patch:          2\n+http_method:                   0\n http_user_agent:\n-http_referer:\n-forwarded_for:\n quota_key:\n-revision:                            54449\n-log_comment:\n-thread_ids:                          [587,11939]\n-ProfileEvents.Names:                 ['Query','SelectQuery','ReadCompressedBytes','CompressedReadBufferBlocks','CompressedReadBufferBytes','IOBufferAllocs','IOBufferAllocBytes','ArenaAllocChunks','ArenaAllocBytes','FunctionExecute','TableFunctionExecute','NetworkSendElapsedMicroseconds','SelectedRows','SelectedBytes','ContextLock','RWLockAcquiredReadLocks','RealTimeMicroseconds','UserTimeMicroseconds','SystemTimeMicroseconds','SoftPageFaults','OSCPUVirtualTimeMicroseconds','OSWriteBytes']\n-ProfileEvents.Values:                [1,1,36,1,10,2,1048680,1,4096,36,1,110,100,800,77,1,3137,1476,1101,8,2577,8192]\n-Settings.Names:                      ['load_balancing','max_memory_usage']\n-Settings.Values:                     ['random','10000000000']\n-used_aggregate_functions:            ['groupBitAnd','avg','sum','count','uniq']\n-used_aggregate_function_combinators: ['OrDefault','If','OrNull','Array']\n-used_database_engines:               []\n-used_data_type_families:             ['String','Array','Int32','Nullable']\n-used_dictionaries:                   []\n-used_formats:                        []\n-used_functions:                      ['toWeek','CAST','arrayFlatten','toTypeName','toDayOfYear','addDays','array','toDate','modulo','substring','plus']\n-used_storages:                       []\n-used_table_functions:                ['numbers']\n+revision:                      54440\n+thread_ids:                    []\n+ProfileEvents:        {'Query':1,'SelectQuery':1,'ReadCompressedBytes':36,'CompressedReadBufferBlocks':1,'CompressedReadBufferBytes':10,'IOBufferAllocs':1,'IOBufferAllocBytes':89,'ContextLock':15,'RWLockAcquiredReadLocks':1}\n+Settings:             {'background_pool_size':'32','load_balancing':'random','allow_suspicious_low_cardinality_types':'1','distributed_aggregation_memory_efficient':'1','skip_unavailable_shards':'1','log_queries':'1','max_bytes_before_external_group_by':'20000000000','max_bytes_before_external_sort':'20000000000','allow_introspection_functions':'1'}\n ```\n \n **\u0421\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u0442\u0430\u043a\u0436\u0435**\ndiff --git a/docs/ru/operations/system-tables/query_thread_log.md b/docs/ru/operations/system-tables/query_thread_log.md\nindex 0292a3215244..6eade8fc53f5 100644\n--- a/docs/ru/operations/system-tables/query_thread_log.md\n+++ b/docs/ru/operations/system-tables/query_thread_log.md\n@@ -57,8 +57,7 @@ ClickHouse \u043d\u0435 \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\n -   `http_user_agent` ([String](../../sql-reference/data-types/string.md)) \u2014 HTTP \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a `UserAgent`.\n -   `quota_key` ([String](../../sql-reference/data-types/string.md)) \u2014 \u00ab\u043a\u043b\u044e\u0447 \u043a\u0432\u043e\u0442\u044b\u00bb \u0438\u0437 \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a [\u043a\u0432\u043e\u0442](quotas.md) (\u0441\u043c. `keyed`).\n -   `revision` ([UInt32](../../sql-reference/data-types/int-uint.md)) \u2014 \u0440\u0435\u0432\u0438\u0437\u0438\u044f ClickHouse.\n--   `ProfileEvents.Names` ([Array(String)](../../sql-reference/data-types/array.md)) \u2014 \u0441\u0447\u0435\u0442\u0447\u0438\u043a\u0438 \u0434\u043b\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u0442\u043e\u043a\u0430. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b [system.events](#system_tables-events).\n--   `ProfileEvents.Values` ([Array(UInt64)](../../sql-reference/data-types/array.md)) \u2014 \u043c\u0435\u0442\u0440\u0438\u043a\u0438 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u0442\u043e\u043a\u0430, \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0435 \u0432 \u0441\u0442\u043e\u043b\u0431\u0446\u0435 `ProfileEvents.Names`.\n+-   `ProfileEvents` ([Map(String, UInt64)](../../sql-reference/data-types/array.md)) \u2014 \u0441\u0447\u0435\u0442\u0447\u0438\u043a\u0438 \u0434\u043b\u044f \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043c\u0435\u0442\u0440\u0438\u043a \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u0442\u043e\u043a\u0430. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043c\u0435\u0442\u0440\u0438\u043a \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u0437 \u0442\u0430\u0431\u043b\u0438\u0446\u044b [system.events](#system_tables-events).\n \n **\u041f\u0440\u0438\u043c\u0435\u0440**\n \n@@ -97,17 +96,16 @@ initial_port:                  33452\n interface:                     1\n os_user:                       bharatnc\n client_hostname:               tower\n-client_name:                   ClickHouse \n+client_name:                   ClickHouse\n client_revision:               54437\n client_version_major:          20\n client_version_minor:          7\n client_version_patch:          2\n http_method:                   0\n-http_user_agent:               \n-quota_key:                     \n+http_user_agent:\n+quota_key:\n revision:                      54440\n-ProfileEvents.Names:           ['Query','InsertQuery','FileOpen','WriteBufferFromFileDescriptorWrite','WriteBufferFromFileDescriptorWriteBytes','ReadCompressedBytes','CompressedReadBufferBlocks','CompressedReadBufferBytes','IOBufferAllocs','IOBufferAllocBytes','FunctionExecute','CreatedWriteBufferOrdinary','DiskWriteElapsedMicroseconds','NetworkReceiveElapsedMicroseconds','NetworkSendElapsedMicroseconds','InsertedRows','InsertedBytes','SelectedRows','SelectedBytes','MergeTreeDataWriterRows','MergeTreeDataWriterUncompressedBytes','MergeTreeDataWriterCompressedBytes','MergeTreeDataWriterBlocks','MergeTreeDataWriterBlocksAlreadySorted','ContextLock','RWLockAcquiredReadLocks','RealTimeMicroseconds','UserTimeMicroseconds','SoftPageFaults','OSCPUVirtualTimeMicroseconds','OSWriteBytes','OSReadChars','OSWriteChars']\n-ProfileEvents.Values:          [1,1,11,11,591,148,3,71,29,6533808,1,11,72,18,47,1,12,1,12,1,12,189,1,1,10,2,70853,2748,49,2747,45056,422,1520]\n+ProfileEvents:        {'Query':1,'SelectQuery':1,'ReadCompressedBytes':36,'CompressedReadBufferBlocks':1,'CompressedReadBufferBytes':10,'IOBufferAllocs':1,'IOBufferAllocBytes':89,'ContextLock':15,'RWLockAcquiredReadLocks':1}\n ```\n \n **\u0421\u043c\u043e\u0442\u0440\u0438\u0442\u0435 \u0442\u0430\u043a\u0436\u0435**\ndiff --git a/docs/zh/operations/system-tables/query_log.md b/docs/zh/operations/system-tables/query_log.md\nindex aa954fc4845b..b7661b73a50f 100644\n--- a/docs/zh/operations/system-tables/query_log.md\n+++ b/docs/zh/operations/system-tables/query_log.md\n@@ -76,14 +76,14 @@ ClickHouse\u4e0d\u4f1a\u81ea\u52a8\u4ece\u8868\u4e2d\u5220\u9664\u6570\u636e\u3002\u66f4\u591a\u8be6\u60c5\u8bf7\u770b [introduction](\n -   `client_version_patch` ([UInt32](../../sql-reference/data-types/int-uint.md)) \u2014 [clickhouse-client](../../interfaces/cli.md) \u6216\u5176\u4ed6TCP\u5ba2\u6237\u7aef\u7684Patch component\u3002\n -   `http_method` (UInt8) \u2014 \u53d1\u8d77\u67e5\u8be2\u7684HTTP\u65b9\u6cd5. \u53ef\u80fd\u503c:\n     -   0 \u2014 TCP\u63a5\u53e3\u7684\u67e5\u8be2.\n-    -   1 \u2014 `GET` \n+    -   1 \u2014 `GET`\n     -   2 \u2014 `POST`\n -   `http_user_agent` ([String](../../sql-reference/data-types/string.md)) \u2014 The `UserAgent` The UserAgent header passed in the HTTP request\u3002\n -   `quota_key` ([String](../../sql-reference/data-types/string.md)) \u2014 \u5728[quotas](../../operations/quotas.md) \u914d\u7f6e\u91cc\u8bbe\u7f6e\u7684\u201cquota key\u201d \uff08\u89c1 `keyed`).\n -   `revision` ([UInt32](../../sql-reference/data-types/int-uint.md)) \u2014 ClickHouse revision.\n--   `thread_numbers` ([Array(UInt32)](../../sql-reference/data-types/array.md)) \u2014 \u53c2\u4e0e\u67e5\u8be2\u7684\u7ebf\u7a0b\u6570.\n--   `ProfileEvents.Names` ([Array\uff08String)](../../sql-reference/data-types/array.md)) \u2014 \u8861\u91cf\u4e0d\u540c\u6307\u6807\u7684\u8ba1\u6570\u5668\u3002 \u53ef\u4ee5\u5728[system.events](../../operations/system-tables/events.md#system_tables-events)\u4e2d\u627e\u5230\u5b83\u4eec\u7684\u63cf\u8ff0\u3002\n--   `ProfileEvents.Values` ([Array(UInt64)](../../sql-reference/data-types/array.md)) \u2014 `ProfileEvents.Names` \u5217\u4e2d\u5217\u51fa\u7684\u6307\u6807\u7684\u503c\u3002\n+-   `ProfileEvents` ([Map(String, UInt64))](../../sql-reference/data-types/array.md)) \u2014 Counters that measure different metrics. The description of them could be found in the table [\u7cfb\u7edf\u3002\u6d3b\u52a8](../../operations/system-tables/events.md#system_tables-events)\n+-   `Settings` ([Map(String, String)](../../sql-reference/data-types/array.md)) \u2014 Names of settings that were changed when the client ran the query. To enable logging changes to settings, set the `log_query_settings` \u53c2\u6570\u4e3a1\u3002\n+-   `thread_ids` ([Array(UInt64)](../../sql-reference/data-types/array.md)) \u2014 \u53c2\u4e0e\u67e5\u8be2\u7684\u7ebf\u7a0b\u6570.\n -   `Settings.Names` ([Array\uff08String)](../../sql-reference/data-types/array.md)) \u2014 \u5ba2\u6237\u7aef\u8fd0\u884c\u67e5\u8be2\u65f6\u66f4\u6539\u7684\u8bbe\u7f6e\u7684\u540d\u79f0\u3002 \u8981\u542f\u7528\u5bf9\u8bbe\u7f6e\u7684\u65e5\u5fd7\u8bb0\u5f55\u66f4\u6539\uff0c\u8bf7\u5c06log_query_settings\u53c2\u6570\u8bbe\u7f6e\u4e3a1\u3002\n -   `Settings.Values` ([Array\uff08String)](../../sql-reference/data-types/array.md)) \u2014 `Settings.Names` \u5217\u4e2d\u5217\u51fa\u7684\u8bbe\u7f6e\u7684\u503c\u3002\n **\u793a\u4f8b**\n@@ -133,10 +133,8 @@ http_user_agent:\n quota_key:\n revision:             54434\n thread_ids:           []\n-ProfileEvents.Names:  []\n-ProfileEvents.Values: []\n-Settings.Names:       ['use_uncompressed_cache','load_balancing','log_queries','max_memory_usage']\n-Settings.Values:      ['0','random','1','10000000000']\n+ProfileEvents:        {'Query':1,'SelectQuery':1,'ReadCompressedBytes':36,'CompressedReadBufferBlocks':1,'CompressedReadBufferBytes':10,'IOBufferAllocs':1,'IOBufferAllocBytes':89,'ContextLock':15,'RWLockAcquiredReadLocks':1}\n+Settings:             {'background_pool_size':'32','load_balancing':'random','allow_suspicious_low_cardinality_types':'1','distributed_aggregation_memory_efficient':'1','skip_unavailable_shards':'1','log_queries':'1','max_bytes_before_external_group_by':'20000000000','max_bytes_before_external_sort':'20000000000','allow_introspection_functions':'1'}\n ```\n \n **\u53e6\u8bf7\u53c2\u9605**\ndiff --git a/docs/zh/operations/system-tables/query_thread_log.md b/docs/zh/operations/system-tables/query_thread_log.md\nindex 8043be8bd750..33583f3b730d 100644\n--- a/docs/zh/operations/system-tables/query_thread_log.md\n+++ b/docs/zh/operations/system-tables/query_thread_log.md\n@@ -61,8 +61,7 @@ ClickHouse\u4e0d\u4f1a\u81ea\u52a8\u4ece\u8868\u4e2d\u5220\u9664\u6570\u636e\u3002 \u770b [\u5bfc\u8a00](../../operations/sys\n -   `http_user_agent` ([\u5b57\u7b26\u4e32](../../sql-reference/data-types/string.md)) \u2014 The `UserAgent` http\u8bf7\u6c42\u4e2d\u4f20\u9012\u7684\u6807\u5934\u3002\n -   `quota_key` ([\u5b57\u7b26\u4e32](../../sql-reference/data-types/string.md)) \u2014 The \u201cquota key\u201d \u5728\u6307\u5b9a [\u914d\u989d](../../operations/quotas.md) \u8bbe\u7f6e\uff08\u89c1 `keyed`).\n -   `revision` ([UInt32](../../sql-reference/data-types/int-uint.md)) \u2014 ClickHouse revision.\n--   `ProfileEvents.Names` ([\u6570\u7ec4\uff08\u5b57\u7b26\u4e32)](../../sql-reference/data-types/array.md)) \u2014 Counters that measure different metrics for this thread. The description of them could be found in the table [\u7cfb\u7edf\u3002\u6d3b\u52a8](#system_tables-events).\n--   `ProfileEvents.Values` ([\u6570\u7ec4(UInt64)](../../sql-reference/data-types/array.md)) \u2014 Values of metrics for this thread that are listed in the `ProfileEvents.Names` \u5217\u3002\n+-   `ProfileEvents` ([\u6570\u7ec4\uff08\u5b57\u7b26\u4e32, UInt64)](../../sql-reference/data-types/array.md)) \u2014 Counters that measure different metrics for this thread. The description of them could be found in the table [\u7cfb\u7edf\u3002\u6d3b\u52a8](#system_tables-events).\n \n **\u793a\u4f8b**\n \n@@ -108,8 +107,7 @@ http_method:          0\n http_user_agent:\n quota_key:\n revision:             54434\n-ProfileEvents.Names:  ['ContextLock','RealTimeMicroseconds','UserTimeMicroseconds','OSCPUWaitMicroseconds','OSCPUVirtualTimeMicroseconds']\n-ProfileEvents.Values: [1,97,81,5,81]\n+ProfileEvents:        {'Query':1,'SelectQuery':1,'ReadCompressedBytes':36,'CompressedReadBufferBlocks':1,'CompressedReadBufferBytes':10,'IOBufferAllocs':1,'IOBufferAllocBytes':89,'ContextLock':15,'RWLockAcquiredReadLocks':1}\n ...\n ```\n \ndiff --git a/src/Core/NamesAndAliases.h b/src/Core/NamesAndAliases.h\nnew file mode 100644\nindex 000000000000..694d4095acee\n--- /dev/null\n+++ b/src/Core/NamesAndAliases.h\n@@ -0,0 +1,53 @@\n+#pragma once\n+\n+#include <map>\n+#include <list>\n+#include <optional>\n+#include <string>\n+#include <set>\n+#include <initializer_list>\n+\n+#include <DataTypes/IDataType.h>\n+#include <Core/Names.h>\n+\n+namespace DB\n+{\n+\n+class NameAndAliasPair\n+{\n+public:\n+    NameAndAliasPair(const String & name_, const DataTypePtr & type_, const String & expression_)\n+        : name(name_)\n+        , type(type_)\n+        , expression(expression_)\n+    {}\n+\n+    String name;\n+    DataTypePtr type;\n+    String expression;\n+};\n+\n+/// This needed to use structured bindings for NameAndTypePair\n+/// const auto & [name, type] = name_and_type\n+template <int I>\n+decltype(auto) get(const NameAndAliasPair & name_and_alias)\n+{\n+    if constexpr (I == 0)\n+        return name_and_alias.name;\n+    else if constexpr (I == 1)\n+        return name_and_alias.type;\n+    else if constexpr (I == 2)\n+        return name_and_alias.expression;\n+}\n+\n+using NamesAndAliases = std::vector<NameAndAliasPair>;\n+\n+}\n+\n+namespace std\n+{\n+    template <> struct tuple_size<DB::NameAndAliasPair> : std::integral_constant<size_t, 2> {};\n+    template <> struct tuple_element<0, DB::NameAndAliasPair> { using type = DB::String; };\n+    template <> struct tuple_element<1, DB::NameAndAliasPair> { using type = DB::DataTypePtr; };\n+    template <> struct tuple_element<2, DB::NameAndAliasPair> { using type = DB::String; };\n+}\ndiff --git a/src/Core/Settings.cpp b/src/Core/Settings.cpp\nindex 2a8dd2acdc0c..11c625007d9d 100644\n--- a/src/Core/Settings.cpp\n+++ b/src/Core/Settings.cpp\n@@ -2,6 +2,7 @@\n \n #include <Poco/Util/AbstractConfiguration.h>\n #include <Columns/ColumnArray.h>\n+#include <Columns/ColumnMap.h>\n #include <Common/typeid_cast.h>\n #include <string.h>\n #include <boost/program_options/options_description.hpp>\n@@ -56,40 +57,28 @@ void Settings::loadSettingsFromConfig(const String & path, const Poco::Util::Abs\n     }\n }\n \n-void Settings::dumpToArrayColumns(IColumn * column_names_, IColumn * column_values_, bool changed_only)\n+void Settings::dumpToMapColumn(IColumn * column, bool changed_only)\n {\n     /// Convert ptr and make simple check\n-    auto * column_names = (column_names_) ? &typeid_cast<ColumnArray &>(*column_names_) : nullptr;\n-    auto * column_values = (column_values_) ? &typeid_cast<ColumnArray &>(*column_values_) : nullptr;\n+    auto * column_map = column ? &typeid_cast<ColumnMap &>(*column) : nullptr;\n+    if (!column_map)\n+        return;\n \n-    size_t count = 0;\n+    auto & offsets = column_map->getNestedColumn().getOffsets();\n+    auto & tuple_column = column_map->getNestedData();\n+    auto & key_column = tuple_column.getColumn(0);\n+    auto & value_column = tuple_column.getColumn(1);\n \n+    size_t size = 0;\n     for (const auto & setting : all(changed_only ? SKIP_UNCHANGED : SKIP_NONE))\n     {\n-        if (column_names)\n-        {\n-            auto name = setting.getName();\n-            column_names->getData().insertData(name.data(), name.size());\n-        }\n-        if (column_values)\n-            column_values->getData().insert(setting.getValueString());\n-        ++count;\n+        auto name = setting.getName();\n+        key_column.insertData(name.data(), name.size());\n+        value_column.insert(setting.getValueString());\n+        size++;\n     }\n \n-    if (column_names)\n-    {\n-        auto & offsets = column_names->getOffsets();\n-        offsets.push_back(offsets.back() + count);\n-    }\n-\n-    /// Nested columns case\n-    bool the_same_offsets = column_names && column_values && column_names->getOffsetsPtr() == column_values->getOffsetsPtr();\n-\n-    if (column_values && !the_same_offsets)\n-    {\n-        auto & offsets = column_values->getOffsets();\n-        offsets.push_back(offsets.back() + count);\n-    }\n+    offsets.push_back(offsets.back() + size);\n }\n \n void Settings::addProgramOptions(boost::program_options::options_description & options)\ndiff --git a/src/Core/Settings.h b/src/Core/Settings.h\nindex 0e87f9e4be22..0197bfac7e48 100644\n--- a/src/Core/Settings.h\n+++ b/src/Core/Settings.h\n@@ -441,7 +441,7 @@ class IColumn;\n     M(Bool, asterisk_include_alias_columns, false, \"Include ALIAS columns for wildcard query\", 0) \\\n     M(Bool, optimize_skip_merged_partitions, false, \"Skip partitions with one part with level > 0 in optimize final\", 0) \\\n     M(Bool, optimize_on_insert, true, \"Do the same transformation for inserted block of data as if merge was done on this block.\", 0) \\\n-    M(Bool, allow_experimental_map_type, false, \"Allow data type Map\", 0) \\\n+    M(Bool, allow_experimental_map_type, true, \"Obsolete setting, does nothing.\", 0) \\\n     M(Bool, allow_experimental_window_functions, false, \"Allow experimental window functions\", 0) \\\n     M(Bool, allow_experimental_projection_optimization, false, \"Enable projection optimization when processing SELECT queries\", 0) \\\n     M(Bool, force_optimize_projection, false, \"If projection optimization is enabled, SELECT queries need to use projection\", 0) \\\n@@ -596,8 +596,8 @@ struct Settings : public BaseSettings<SettingsTraits>\n     /// Load settings from configuration file, at \"path\" prefix in configuration.\n     void loadSettingsFromConfig(const String & path, const Poco::Util::AbstractConfiguration & config);\n \n-    /// Dumps profile events to two columns of type Array(String)\n-    void dumpToArrayColumns(IColumn * column_names, IColumn * column_values, bool changed_only = true);\n+    /// Dumps profile events to column of type Map(String, String)\n+    void dumpToMapColumn(IColumn * column, bool changed_only = true);\n \n     /// Adds program options to set the settings from a command line.\n     /// (Don't forget to call notify() on the `variables_map` after parsing it!)\ndiff --git a/src/Interpreters/AsynchronousMetricLog.cpp b/src/Interpreters/AsynchronousMetricLog.cpp\nindex 6c20a04d291c..79e2d513d5cc 100644\n--- a/src/Interpreters/AsynchronousMetricLog.cpp\n+++ b/src/Interpreters/AsynchronousMetricLog.cpp\n@@ -11,17 +11,16 @@\n namespace DB\n {\n \n-Block AsynchronousMetricLogElement::createBlock()\n+NamesAndTypesList AsynchronousMetricLogElement::getNamesAndTypes()\n {\n-    ColumnsWithTypeAndName columns;\n-\n-    columns.emplace_back(std::make_shared<DataTypeDate>(),          \"event_date\");\n-    columns.emplace_back(std::make_shared<DataTypeDateTime>(),      \"event_time\");\n-    columns.emplace_back(std::make_shared<DataTypeDateTime64>(6),   \"event_time_microseconds\");\n-    columns.emplace_back(std::make_shared<DataTypeLowCardinality>(std::make_shared<DataTypeString>()), \"name\");\n-    columns.emplace_back(std::make_shared<DataTypeFloat64>(),       \"value\");\n-\n-    return Block(columns);\n+    return\n+    {\n+        {\"event_date\", std::make_shared<DataTypeDate>()},\n+        {\"event_time\", std::make_shared<DataTypeDateTime>()},\n+        {\"event_time_microseconds\", std::make_shared<DataTypeDateTime64>(6)},\n+        {\"name\", std::make_shared<DataTypeLowCardinality>(std::make_shared<DataTypeString>())},\n+        {\"value\", std::make_shared<DataTypeFloat64>(),}\n+    };\n }\n \n \ndiff --git a/src/Interpreters/AsynchronousMetricLog.h b/src/Interpreters/AsynchronousMetricLog.h\nindex 30bac3f5a99b..6275572935c6 100644\n--- a/src/Interpreters/AsynchronousMetricLog.h\n+++ b/src/Interpreters/AsynchronousMetricLog.h\n@@ -12,8 +12,8 @@\n namespace DB\n {\n \n-typedef double AsynchronousMetricValue;\n-typedef std::unordered_map<std::string, AsynchronousMetricValue> AsynchronousMetricValues;\n+using AsynchronousMetricValue = double;\n+using AsynchronousMetricValues = std::unordered_map<std::string, AsynchronousMetricValue>;\n \n /** AsynchronousMetricLog is a log of metric values measured at regular time interval.\n   */\n@@ -27,7 +27,8 @@ struct AsynchronousMetricLogElement\n     double value;\n \n     static std::string name() { return \"AsynchronousMetricLog\"; }\n-    static Block createBlock();\n+    static NamesAndTypesList getNamesAndTypes();\n+    static NamesAndAliases getNamesAndAliases() { return {}; }\n     void appendToBlock(MutableColumns & columns) const;\n };\n \ndiff --git a/src/Interpreters/CrashLog.cpp b/src/Interpreters/CrashLog.cpp\nindex 5067acd4a5c4..a9da804f1d2d 100644\n--- a/src/Interpreters/CrashLog.cpp\n+++ b/src/Interpreters/CrashLog.cpp\n@@ -18,21 +18,21 @@ namespace DB\n std::weak_ptr<CrashLog> CrashLog::crash_log;\n \n \n-Block CrashLogElement::createBlock()\n+NamesAndTypesList CrashLogElement::getNamesAndTypes()\n {\n     return\n     {\n-        {std::make_shared<DataTypeDate>(),                                    \"event_date\"},\n-        {std::make_shared<DataTypeDateTime>(),                                \"event_time\"},\n-        {std::make_shared<DataTypeUInt64>(),                                  \"timestamp_ns\"},\n-        {std::make_shared<DataTypeInt32>(),                                   \"signal\"},\n-        {std::make_shared<DataTypeUInt64>(),                                  \"thread_id\"},\n-        {std::make_shared<DataTypeString>(),                                  \"query_id\"},\n-        {std::make_shared<DataTypeArray>(std::make_shared<DataTypeUInt64>()), \"trace\"},\n-        {std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>()), \"trace_full\"},\n-        {std::make_shared<DataTypeString>(),                                  \"version\"},\n-        {std::make_shared<DataTypeUInt32>(),                                  \"revision\"},\n-        {std::make_shared<DataTypeString>(),                                  \"build_id\"},\n+        {\"event_date\", std::make_shared<DataTypeDate>()},\n+        {\"event_time\", std::make_shared<DataTypeDateTime>()},\n+        {\"timestamp_ns\", std::make_shared<DataTypeUInt64>()},\n+        {\"signal\", std::make_shared<DataTypeInt32>()},\n+        {\"thread_id\", std::make_shared<DataTypeUInt64>()},\n+        {\"query_id\", std::make_shared<DataTypeString>()},\n+        {\"trace\", std::make_shared<DataTypeArray>(std::make_shared<DataTypeUInt64>())},\n+        {\"trace_full\", std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>())},\n+        {\"version\", std::make_shared<DataTypeString>()},\n+        {\"revision\", std::make_shared<DataTypeUInt32>()},\n+        {\"build_id\", std::make_shared<DataTypeString>()},\n     };\n }\n \n@@ -60,7 +60,6 @@ void CrashLogElement::appendToBlock(MutableColumns & columns) const\n \n }\n \n-\n void collectCrashLog(Int32 signal, UInt64 thread_id, const String & query_id, const StackTrace & stack_trace)\n {\n     using namespace DB;\ndiff --git a/src/Interpreters/CrashLog.h b/src/Interpreters/CrashLog.h\nindex 9494bdc85c93..ba27c1f513e3 100644\n--- a/src/Interpreters/CrashLog.h\n+++ b/src/Interpreters/CrashLog.h\n@@ -24,7 +24,8 @@ struct CrashLogElement\n     Array trace_full;\n \n     static std::string name() { return \"CrashLog\"; }\n-    static Block createBlock();\n+    static NamesAndTypesList getNamesAndTypes();\n+    static NamesAndAliases getNamesAndAliases() { return {}; }\n     void appendToBlock(MutableColumns & columns) const;\n };\n \ndiff --git a/src/Interpreters/InterpreterCreateQuery.cpp b/src/Interpreters/InterpreterCreateQuery.cpp\nindex 38e5b266e131..de858bdbdc50 100644\n--- a/src/Interpreters/InterpreterCreateQuery.cpp\n+++ b/src/Interpreters/InterpreterCreateQuery.cpp\n@@ -302,6 +302,35 @@ ASTPtr InterpreterCreateQuery::formatColumns(const NamesAndTypesList & columns)\n     return columns_list;\n }\n \n+ASTPtr InterpreterCreateQuery::formatColumns(const NamesAndTypesList & columns, const NamesAndAliases & alias_columns)\n+{\n+    std::shared_ptr<ASTExpressionList> columns_list = std::static_pointer_cast<ASTExpressionList>(formatColumns(columns));\n+\n+    for (const auto & alias_column : alias_columns)\n+    {\n+        const auto column_declaration = std::make_shared<ASTColumnDeclaration>();\n+        column_declaration->name = alias_column.name;\n+\n+        ParserDataType type_parser;\n+        String type_name = alias_column.type->getName();\n+        const char * type_pos = type_name.data();\n+        const char * type_end = type_pos + type_name.size();\n+        column_declaration->type = parseQuery(type_parser, type_pos, type_end, \"data type\", 0, DBMS_DEFAULT_MAX_PARSER_DEPTH);\n+\n+        column_declaration->default_specifier = \"ALIAS\";\n+\n+        const auto & alias = alias_column.expression;\n+        const char * alias_pos = alias.data();\n+        const char * alias_end = alias_pos + alias.size();\n+        ParserExpression expression_parser;\n+        column_declaration->default_expression = parseQuery(expression_parser, alias_pos, alias_end, \"expression\", 0, DBMS_DEFAULT_MAX_PARSER_DEPTH);\n+\n+        columns_list->children.emplace_back(column_declaration);\n+    }\n+\n+    return columns_list;\n+}\n+\n ASTPtr InterpreterCreateQuery::formatColumns(const ColumnsDescription & columns)\n {\n     auto columns_list = std::make_shared<ASTExpressionList>();\n@@ -646,23 +675,6 @@ void InterpreterCreateQuery::validateTableStructure(const ASTCreateQuery & creat\n             }\n         }\n     }\n-\n-    if (!create.attach && !settings.allow_experimental_map_type)\n-    {\n-        for (const auto & name_and_type_pair : properties.columns.getAllPhysical())\n-        {\n-            WhichDataType which(*name_and_type_pair.type);\n-            if (which.isMap())\n-            {\n-                const auto & type_name = name_and_type_pair.type->getName();\n-                String message = \"Cannot create table with column '\" + name_and_type_pair.name + \"' which type is '\"\n-                                 + type_name + \"' because experimental Map type is not allowed. \"\n-                                 + \"Set 'allow_experimental_map_type = 1' setting to enable\";\n-                throw Exception(message, ErrorCodes::ILLEGAL_COLUMN);\n-            }\n-        }\n-\n-    }\n }\n \n void InterpreterCreateQuery::setEngine(ASTCreateQuery & create) const\ndiff --git a/src/Interpreters/InterpreterCreateQuery.h b/src/Interpreters/InterpreterCreateQuery.h\nindex 45f0bbd7cf86..7bd3ef257462 100644\n--- a/src/Interpreters/InterpreterCreateQuery.h\n+++ b/src/Interpreters/InterpreterCreateQuery.h\n@@ -1,12 +1,12 @@\n #pragma once\n \n+#include <Core/NamesAndAliases.h>\n #include <Access/AccessRightsElement.h>\n #include <Interpreters/IInterpreter.h>\n #include <Storages/ColumnsDescription.h>\n #include <Storages/ConstraintsDescription.h>\n #include <Storages/IStorage_fwd.h>\n #include <Storages/StorageInMemoryMetadata.h>\n-#include <Common/ThreadPool.h>\n \n \n namespace DB\n@@ -31,8 +31,8 @@ class InterpreterCreateQuery : public IInterpreter, WithMutableContext\n \n     /// List of columns and their types in AST.\n     static ASTPtr formatColumns(const NamesAndTypesList & columns);\n+    static ASTPtr formatColumns(const NamesAndTypesList & columns, const NamesAndAliases & alias_columns);\n     static ASTPtr formatColumns(const ColumnsDescription & columns);\n-\n     static ASTPtr formatIndices(const IndicesDescription & indices);\n     static ASTPtr formatConstraints(const ConstraintsDescription & constraints);\n     static ASTPtr formatProjections(const ProjectionsDescription & projections);\ndiff --git a/src/Interpreters/MetricLog.cpp b/src/Interpreters/MetricLog.cpp\nindex fd1c120f18c3..f8fab6d7a9df 100644\n--- a/src/Interpreters/MetricLog.cpp\n+++ b/src/Interpreters/MetricLog.cpp\n@@ -8,21 +8,21 @@\n namespace DB\n {\n \n-Block MetricLogElement::createBlock()\n+NamesAndTypesList MetricLogElement::getNamesAndTypes()\n {\n-    ColumnsWithTypeAndName columns_with_type_and_name;\n+    NamesAndTypesList columns_with_type_and_name;\n \n-    columns_with_type_and_name.emplace_back(std::make_shared<DataTypeDate>(),           \"event_date\");\n-    columns_with_type_and_name.emplace_back(std::make_shared<DataTypeDateTime>(),       \"event_time\");\n-    columns_with_type_and_name.emplace_back(std::make_shared<DataTypeDateTime64>(6),    \"event_time_microseconds\");\n-    columns_with_type_and_name.emplace_back(std::make_shared<DataTypeUInt64>(),         \"milliseconds\");\n+    columns_with_type_and_name.emplace_back(\"event_date\", std::make_shared<DataTypeDate>());\n+    columns_with_type_and_name.emplace_back(\"event_time\", std::make_shared<DataTypeDateTime>());\n+    columns_with_type_and_name.emplace_back(\"event_time_microseconds\", std::make_shared<DataTypeDateTime64>(6));\n+    columns_with_type_and_name.emplace_back(\"milliseconds\", std::make_shared<DataTypeUInt64>());\n \n     for (size_t i = 0, end = ProfileEvents::end(); i < end; ++i)\n     {\n         std::string name;\n         name += \"ProfileEvent_\";\n         name += ProfileEvents::getName(ProfileEvents::Event(i));\n-        columns_with_type_and_name.emplace_back(std::make_shared<DataTypeUInt64>(), std::move(name));\n+        columns_with_type_and_name.emplace_back(std::move(name), std::make_shared<DataTypeUInt64>());\n     }\n \n     for (size_t i = 0, end = CurrentMetrics::end(); i < end; ++i)\n@@ -30,10 +30,10 @@ Block MetricLogElement::createBlock()\n         std::string name;\n         name += \"CurrentMetric_\";\n         name += CurrentMetrics::getName(CurrentMetrics::Metric(i));\n-        columns_with_type_and_name.emplace_back(std::make_shared<DataTypeInt64>(), std::move(name));\n+        columns_with_type_and_name.emplace_back(std::move(name), std::make_shared<DataTypeInt64>());\n     }\n \n-    return Block(columns_with_type_and_name);\n+    return columns_with_type_and_name;\n }\n \n \ndiff --git a/src/Interpreters/MetricLog.h b/src/Interpreters/MetricLog.h\nindex f03b682c60af..c43c28727884 100644\n--- a/src/Interpreters/MetricLog.h\n+++ b/src/Interpreters/MetricLog.h\n@@ -25,7 +25,8 @@ struct MetricLogElement\n     std::vector<CurrentMetrics::Metric> current_metrics;\n \n     static std::string name() { return \"MetricLog\"; }\n-    static Block createBlock();\n+    static NamesAndTypesList getNamesAndTypes();\n+    static NamesAndAliases getNamesAndAliases() { return {}; }\n     void appendToBlock(MutableColumns & columns) const;\n };\n \ndiff --git a/src/Interpreters/OpenTelemetrySpanLog.cpp b/src/Interpreters/OpenTelemetrySpanLog.cpp\nindex 727a60f22608..89cce890555d 100644\n--- a/src/Interpreters/OpenTelemetrySpanLog.cpp\n+++ b/src/Interpreters/OpenTelemetrySpanLog.cpp\n@@ -6,6 +6,7 @@\n #include <DataTypes/DataTypeDateTime64.h>\n #include <DataTypes/DataTypesNumber.h>\n #include <DataTypes/DataTypeString.h>\n+#include <DataTypes/DataTypeMap.h>\n #include <DataTypes/DataTypeUUID.h>\n \n #include <Common/hex.h>\n@@ -14,13 +15,13 @@\n namespace DB\n {\n \n-Block OpenTelemetrySpanLogElement::createBlock()\n+NamesAndTypesList OpenTelemetrySpanLogElement::getNamesAndTypes()\n {\n     return {\n-        {std::make_shared<DataTypeUUID>(), \"trace_id\"},\n-        {std::make_shared<DataTypeUInt64>(), \"span_id\"},\n-        {std::make_shared<DataTypeUInt64>(), \"parent_span_id\"},\n-        {std::make_shared<DataTypeString>(), \"operation_name\"},\n+        {\"trace_id\", std::make_shared<DataTypeUUID>()},\n+        {\"span_id\", std::make_shared<DataTypeUInt64>()},\n+        {\"parent_span_id\", std::make_shared<DataTypeUInt64>()},\n+        {\"operation_name\", std::make_shared<DataTypeString>()},\n         // DateTime64 is really unwieldy -- there is no \"normal\" way to convert\n         // it to an UInt64 count of microseconds, except:\n         // 1) reinterpretAsUInt64(reinterpretAsFixedString(date)), which just\n@@ -31,16 +32,21 @@ Block OpenTelemetrySpanLogElement::createBlock()\n         // Also subtraction of two DateTime64 points doesn't work, so you can't\n         // get duration.\n         // It is much less hassle to just use UInt64 of microseconds.\n-        {std::make_shared<DataTypeUInt64>(), \"start_time_us\"},\n-        {std::make_shared<DataTypeUInt64>(), \"finish_time_us\"},\n-        {std::make_shared<DataTypeDate>(), \"finish_date\"},\n-        {std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>()),\n-            \"attribute.names\"},\n-        {std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>()),\n-            \"attribute.values\"}\n+        {\"start_time_us\", std::make_shared<DataTypeUInt64>()},\n+        {\"finish_time_us\", std::make_shared<DataTypeUInt64>()},\n+        {\"finish_date\", std::make_shared<DataTypeDate>()},\n+        {\"attribute\", std::make_shared<DataTypeMap>(std::make_shared<DataTypeString>(), std::make_shared<DataTypeString>())},\n     };\n }\n \n+NamesAndAliases OpenTelemetrySpanLogElement::getNamesAndAliases()\n+{\n+    return\n+    {\n+        {\"attribute.names\", std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>()), \"mapKeys(attribute)\"},\n+        {\"attribute.values\", std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>()), \"mapKeys(attribute)\"}\n+    };\n+}\n \n void OpenTelemetrySpanLogElement::appendToBlock(MutableColumns & columns) const\n {\n@@ -53,17 +59,16 @@ void OpenTelemetrySpanLogElement::appendToBlock(MutableColumns & columns) const\n     columns[i++]->insert(start_time_us);\n     columns[i++]->insert(finish_time_us);\n     columns[i++]->insert(DateLUT::instance().toDayNum(finish_time_us / 1000000).toUnderType());\n-    columns[i++]->insert(attribute_names);\n     // The user might add some ints values, and we will have Int Field, and the\n     // insert will fail because the column requires Strings. Convert the fields\n     // here, because it's hard to remember to convert them in all other places.\n-    Array string_values;\n-    string_values.reserve(attribute_values.size());\n-    for (const auto & value : attribute_values)\n+\n+    Map map(attribute_names.size());\n+    for (size_t attr_idx = 0; attr_idx < map.size(); ++attr_idx)\n     {\n-        string_values.push_back(toString(value));\n+        map[attr_idx] = Tuple{attribute_names[attr_idx], toString(attribute_values[attr_idx])};\n     }\n-    columns[i++]->insert(string_values);\n+    columns[i++]->insert(map);\n }\n \n \ndiff --git a/src/Interpreters/OpenTelemetrySpanLog.h b/src/Interpreters/OpenTelemetrySpanLog.h\nindex 861293b4f980..b287301325c5 100644\n--- a/src/Interpreters/OpenTelemetrySpanLog.h\n+++ b/src/Interpreters/OpenTelemetrySpanLog.h\n@@ -27,7 +27,8 @@ struct OpenTelemetrySpanLogElement : public OpenTelemetrySpan\n         : OpenTelemetrySpan(span) {}\n \n     static std::string name() { return \"OpenTelemetrySpanLog\"; }\n-    static Block createBlock();\n+    static NamesAndTypesList getNamesAndTypes();\n+    static NamesAndAliases getNamesAndAliases();\n     void appendToBlock(MutableColumns & columns) const;\n };\n \ndiff --git a/src/Interpreters/PartLog.cpp b/src/Interpreters/PartLog.cpp\nindex ad4fb60f00c6..f89f836871a0 100644\n--- a/src/Interpreters/PartLog.cpp\n+++ b/src/Interpreters/PartLog.cpp\n@@ -16,7 +16,7 @@\n namespace DB\n {\n \n-Block PartLogElement::createBlock()\n+NamesAndTypesList PartLogElement::getNamesAndTypes()\n {\n     auto event_type_datatype = std::make_shared<DataTypeEnum8>(\n         DataTypeEnum8::Values\n@@ -33,35 +33,34 @@ Block PartLogElement::createBlock()\n     ColumnsWithTypeAndName columns_with_type_and_name;\n \n     return {\n+        {\"query_id\", std::make_shared<DataTypeString>()},\n+        {\"event_type\", std::move(event_type_datatype)},\n+        {\"event_date\", std::make_shared<DataTypeDate>()},\n \n-        columns_with_type_and_name.emplace_back(std::make_shared<DataTypeString>(), \"query_id\"),\n-        columns_with_type_and_name.emplace_back(std::move(event_type_datatype), \"event_type\"),\n-        columns_with_type_and_name.emplace_back(std::make_shared<DataTypeDate>(), \"event_date\"),\n+        {\"event_time\", std::make_shared<DataTypeDateTime>()},\n+        {\"event_time_microseconds\", std::make_shared<DataTypeDateTime64>(6)},\n \n-        columns_with_type_and_name.emplace_back(std::make_shared<DataTypeDateTime>(), \"event_time\"),\n-        columns_with_type_and_name.emplace_back(std::make_shared<DataTypeDateTime64>(6), \"event_time_microseconds\"),\n+        {\"duration_ms\", std::make_shared<DataTypeUInt64>()},\n \n-        columns_with_type_and_name.emplace_back(std::make_shared<DataTypeUInt64>(), \"duration_ms\"),\n+        {\"database\", std::make_shared<DataTypeString>()},\n+        {\"table\", std::make_shared<DataTypeString>()},\n+        {\"part_name\", std::make_shared<DataTypeString>()},\n+        {\"partition_id\", std::make_shared<DataTypeString>()},\n+        {\"path_on_disk\", std::make_shared<DataTypeString>()},\n \n-        columns_with_type_and_name.emplace_back(std::make_shared<DataTypeString>(), \"database\"),\n-        columns_with_type_and_name.emplace_back(std::make_shared<DataTypeString>(), \"table\"),\n-        columns_with_type_and_name.emplace_back(std::make_shared<DataTypeString>(), \"part_name\"),\n-        columns_with_type_and_name.emplace_back(std::make_shared<DataTypeString>(), \"partition_id\"),\n-        columns_with_type_and_name.emplace_back(std::make_shared<DataTypeString>(), \"path_on_disk\"),\n-\n-        columns_with_type_and_name.emplace_back(std::make_shared<DataTypeUInt64>(), \"rows\"),\n-        columns_with_type_and_name.emplace_back(std::make_shared<DataTypeUInt64>(), \"size_in_bytes\"), // On disk\n+        {\"rows\", std::make_shared<DataTypeUInt64>()},\n+        {\"size_in_bytes\", std::make_shared<DataTypeUInt64>()}, // On disk\n \n         /// Merge-specific info\n-        columns_with_type_and_name.emplace_back(std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>()), \"merged_from\"),\n-        columns_with_type_and_name.emplace_back(std::make_shared<DataTypeUInt64>(), \"bytes_uncompressed\"), // Result bytes\n-        columns_with_type_and_name.emplace_back(std::make_shared<DataTypeUInt64>(), \"read_rows\"),\n-        columns_with_type_and_name.emplace_back(std::make_shared<DataTypeUInt64>(), \"read_bytes\"),\n-        columns_with_type_and_name.emplace_back(std::make_shared<DataTypeUInt64>(), \"peak_memory_usage\"),\n+        {\"merged_from\", std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>())},\n+        {\"bytes_uncompressed\", std::make_shared<DataTypeUInt64>()}, // Result bytes\n+        {\"read_rows\", std::make_shared<DataTypeUInt64>()},\n+        {\"read_bytes\", std::make_shared<DataTypeUInt64>()},\n+        {\"peak_memory_usage\", std::make_shared<DataTypeUInt64>()},\n \n         /// Is there an error during the execution or commit\n-        columns_with_type_and_name.emplace_back(std::make_shared<DataTypeUInt16>(), \"error\"),\n-        columns_with_type_and_name.emplace_back(std::make_shared<DataTypeString>(), \"exception\"),\n+        {\"error\", std::make_shared<DataTypeUInt16>()},\n+        {\"exception\", std::make_shared<DataTypeString>()},\n     };\n }\n \ndiff --git a/src/Interpreters/PartLog.h b/src/Interpreters/PartLog.h\nindex edb6ab4a45f5..1aec850e3dc7 100644\n--- a/src/Interpreters/PartLog.h\n+++ b/src/Interpreters/PartLog.h\n@@ -52,7 +52,8 @@ struct PartLogElement\n \n     static std::string name() { return \"PartLog\"; }\n \n-    static Block createBlock();\n+    static NamesAndTypesList getNamesAndTypes();\n+    static NamesAndAliases getNamesAndAliases() { return {}; }\n     void appendToBlock(MutableColumns & columns) const;\n };\n \ndiff --git a/src/Interpreters/ProfileEventsExt.cpp b/src/Interpreters/ProfileEventsExt.cpp\nindex bca845c4248b..2e8f986ca6c4 100644\n--- a/src/Interpreters/ProfileEventsExt.cpp\n+++ b/src/Interpreters/ProfileEventsExt.cpp\n@@ -3,6 +3,7 @@\n #include <Columns/ColumnsNumber.h>\n #include <Columns/ColumnString.h>\n #include <Columns/ColumnArray.h>\n+#include <Columns/ColumnMap.h>\n #include <DataTypes/DataTypesNumber.h>\n #include <DataTypes/DataTypeString.h>\n #include <DataTypes/DataTypeArray.h>\n@@ -11,14 +12,18 @@ namespace ProfileEvents\n {\n \n /// Put implementation here to avoid extra linking dependencies for clickhouse_common_io\n-void dumpToArrayColumns(const Counters & counters, DB::IColumn * column_names_, DB::IColumn * column_values_, bool nonzero_only)\n+void dumpToMapColumn(const Counters & counters, DB::IColumn * column, bool nonzero_only)\n {\n-    /// Convert ptr and make simple check\n-    auto * column_names = (column_names_) ? &typeid_cast<DB::ColumnArray &>(*column_names_) : nullptr;\n-    auto * column_values = (column_values_) ? &typeid_cast<DB::ColumnArray &>(*column_values_) : nullptr;\n+    auto * column_map = column ? &typeid_cast<DB::ColumnMap &>(*column) : nullptr;\n+    if (!column_map)\n+        return;\n \n-    size_t size = 0;\n+    auto & offsets = column_map->getNestedColumn().getOffsets();\n+    auto & tuple_column = column_map->getNestedData();\n+    auto & key_column = tuple_column.getColumn(0);\n+    auto & value_column = tuple_column.getColumn(1);\n \n+    size_t size = 0;\n     for (Event event = 0; event < Counters::num_counters; ++event)\n     {\n         UInt64 value = counters[event].load(std::memory_order_relaxed);\n@@ -26,34 +31,13 @@ void dumpToArrayColumns(const Counters & counters, DB::IColumn * column_names_,\n         if (nonzero_only && 0 == value)\n             continue;\n \n-        ++size;\n-\n-        if (column_names)\n-        {\n-            const char * desc = ProfileEvents::getName(event);\n-            column_names->getData().insertData(desc, strlen(desc));\n-        }\n-\n-        if (column_values)\n-            column_values->getData().insert(value);\n+        const char * desc = ProfileEvents::getName(event);\n+        key_column.insertData(desc, strlen(desc));\n+        value_column.insert(value);\n+        size++;\n     }\n \n-    if (column_names)\n-    {\n-        auto & offsets = column_names->getOffsets();\n-        offsets.push_back(offsets.back() + size);\n-    }\n-\n-    if (column_values)\n-    {\n-        /// Nested columns case\n-        bool the_same_offsets = column_names && column_names->getOffsetsPtr().get() == column_values->getOffsetsPtr().get();\n-        if (!the_same_offsets)\n-        {\n-            auto & offsets = column_values->getOffsets();\n-            offsets.push_back(offsets.back() + size);\n-        }\n-    }\n+    offsets.push_back(offsets.back() + size);\n }\n \n }\ndiff --git a/src/Interpreters/ProfileEventsExt.h b/src/Interpreters/ProfileEventsExt.h\nindex 2ae9941b67f6..7d513f0cd026 100644\n--- a/src/Interpreters/ProfileEventsExt.h\n+++ b/src/Interpreters/ProfileEventsExt.h\n@@ -6,7 +6,7 @@\n namespace ProfileEvents\n {\n \n-/// Dumps profile events to two columns Array(String) and Array(UInt64)\n-void dumpToArrayColumns(const Counters & counters, DB::IColumn * column_names, DB::IColumn * column_value, bool nonzero_only = true);\n+/// Dumps profile events to columns Map(String, UInt64)\n+void dumpToMapColumn(const Counters & counters, DB::IColumn * column, bool nonzero_only = true);\n \n }\ndiff --git a/src/Interpreters/QueryLog.cpp b/src/Interpreters/QueryLog.cpp\nindex f78acdd37374..3f668e5e0ab7 100644\n--- a/src/Interpreters/QueryLog.cpp\n+++ b/src/Interpreters/QueryLog.cpp\n@@ -10,6 +10,7 @@\n #include <DataTypes/DataTypeDateTime.h>\n #include <DataTypes/DataTypeEnum.h>\n #include <DataTypes/DataTypeFactory.h>\n+#include <DataTypes/DataTypeMap.h>\n #include <DataTypes/DataTypeLowCardinality.h>\n #include <DataTypes/DataTypeString.h>\n #include <DataTypes/DataTypesNumber.h>\n@@ -19,12 +20,13 @@\n #include <Common/ClickHouseRevision.h>\n #include <Common/IPv6ToBinary.h>\n #include <Common/ProfileEvents.h>\n+#include <Common/typeid_cast.h>\n \n \n namespace DB\n {\n \n-Block QueryLogElement::createBlock()\n+NamesAndTypesList QueryLogElement::getNamesAndTypes()\n {\n     auto query_status_datatype = std::make_shared<DataTypeEnum8>(\n         DataTypeEnum8::Values\n@@ -37,86 +39,94 @@ Block QueryLogElement::createBlock()\n \n     return\n     {\n-        {std::move(query_status_datatype),                                    \"type\"},\n-        {std::make_shared<DataTypeDate>(),                                    \"event_date\"},\n-        {std::make_shared<DataTypeDateTime>(),                                \"event_time\"},\n-        {std::make_shared<DataTypeDateTime64>(6),                             \"event_time_microseconds\"},\n-        {std::make_shared<DataTypeDateTime>(),                                \"query_start_time\"},\n-        {std::make_shared<DataTypeDateTime64>(6),                             \"query_start_time_microseconds\"},\n-        {std::make_shared<DataTypeUInt64>(),                                  \"query_duration_ms\"},\n-\n-        {std::make_shared<DataTypeUInt64>(),                                  \"read_rows\"},\n-        {std::make_shared<DataTypeUInt64>(),                                  \"read_bytes\"},\n-        {std::make_shared<DataTypeUInt64>(),                                  \"written_rows\"},\n-        {std::make_shared<DataTypeUInt64>(),                                  \"written_bytes\"},\n-        {std::make_shared<DataTypeUInt64>(),                                  \"result_rows\"},\n-        {std::make_shared<DataTypeUInt64>(),                                  \"result_bytes\"},\n-        {std::make_shared<DataTypeUInt64>(),                                  \"memory_usage\"},\n-\n-        {std::make_shared<DataTypeString>(),                                  \"current_database\"},\n-        {std::make_shared<DataTypeString>(),                                  \"query\"},\n-        {std::make_shared<DataTypeUInt64>(),                                  \"normalized_query_hash\"},\n-        {std::make_shared<DataTypeLowCardinality>(std::make_shared<DataTypeString>()), \"query_kind\"},\n-        {std::make_shared<DataTypeArray>(\n-            std::make_shared<DataTypeLowCardinality>(std::make_shared<DataTypeString>())), \"databases\"},\n-        {std::make_shared<DataTypeArray>(\n-            std::make_shared<DataTypeLowCardinality>(std::make_shared<DataTypeString>())), \"tables\"},\n-        {std::make_shared<DataTypeArray>(\n-            std::make_shared<DataTypeLowCardinality>(std::make_shared<DataTypeString>())), \"columns\"},\n-        {std::make_shared<DataTypeArray>(\n-            std::make_shared<DataTypeLowCardinality>(std::make_shared<DataTypeString>())), \"projections\"},\n-        {std::make_shared<DataTypeInt32>(),                                   \"exception_code\"},\n-        {std::make_shared<DataTypeString>(),                                  \"exception\"},\n-        {std::make_shared<DataTypeString>(),                                  \"stack_trace\"},\n-\n-        {std::make_shared<DataTypeUInt8>(),                                   \"is_initial_query\"},\n-        {std::make_shared<DataTypeString>(),                                  \"user\"},\n-        {std::make_shared<DataTypeString>(),                                  \"query_id\"},\n-        {DataTypeFactory::instance().get(\"IPv6\"),                             \"address\"},\n-        {std::make_shared<DataTypeUInt16>(),                                  \"port\"},\n-        {std::make_shared<DataTypeString>(),                                  \"initial_user\"},\n-        {std::make_shared<DataTypeString>(),                                  \"initial_query_id\"},\n-        {DataTypeFactory::instance().get(\"IPv6\"),                             \"initial_address\"},\n-        {std::make_shared<DataTypeUInt16>(),                                  \"initial_port\"},\n-        {std::make_shared<DataTypeDateTime>(),                                \"initial_query_start_time\"},\n-        {std::make_shared<DataTypeDateTime64>(6),                             \"initial_query_start_time_microseconds\"},\n-        {std::make_shared<DataTypeUInt8>(),                                   \"interface\"},\n-        {std::make_shared<DataTypeString>(),                                  \"os_user\"},\n-        {std::make_shared<DataTypeString>(),                                  \"client_hostname\"},\n-        {std::make_shared<DataTypeString>(),                                  \"client_name\"},\n-        {std::make_shared<DataTypeUInt32>(),                                  \"client_revision\"},\n-        {std::make_shared<DataTypeUInt32>(),                                  \"client_version_major\"},\n-        {std::make_shared<DataTypeUInt32>(),                                  \"client_version_minor\"},\n-        {std::make_shared<DataTypeUInt32>(),                                  \"client_version_patch\"},\n-        {std::make_shared<DataTypeUInt8>(),                                   \"http_method\"},\n-        {std::make_shared<DataTypeString>(),                                  \"http_user_agent\"},\n-        {std::make_shared<DataTypeString>(),                                  \"http_referer\"},\n-        {std::make_shared<DataTypeString>(),                                  \"forwarded_for\"},\n-        {std::make_shared<DataTypeString>(),                                  \"quota_key\"},\n-\n-        {std::make_shared<DataTypeUInt32>(),                                  \"revision\"},\n-\n-        {std::make_shared<DataTypeString>(),                                  \"log_comment\"},\n-\n-        {std::make_shared<DataTypeArray>(std::make_shared<DataTypeUInt64>()), \"thread_ids\"},\n-        {std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>()), \"ProfileEvents.Names\"},\n-        {std::make_shared<DataTypeArray>(std::make_shared<DataTypeUInt64>()), \"ProfileEvents.Values\"},\n-        {std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>()), \"Settings.Names\"},\n-        {std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>()), \"Settings.Values\"},\n-\n-        {std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>()), \"used_aggregate_functions\"},\n-        {std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>()), \"used_aggregate_function_combinators\"},\n-        {std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>()), \"used_database_engines\"},\n-        {std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>()), \"used_data_type_families\"},\n-        {std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>()), \"used_dictionaries\"},\n-        {std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>()), \"used_formats\"},\n-        {std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>()), \"used_functions\"},\n-        {std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>()), \"used_storages\"},\n-        {std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>()), \"used_table_functions\"}\n+        {\"type\", std::move(query_status_datatype)},\n+        {\"event_date\", std::make_shared<DataTypeDate>()},\n+        {\"event_time\", std::make_shared<DataTypeDateTime>()},\n+        {\"event_time_microseconds\", std::make_shared<DataTypeDateTime64>(6)},\n+        {\"query_start_time\", std::make_shared<DataTypeDateTime>()},\n+        {\"query_start_time_microseconds\", std::make_shared<DataTypeDateTime64>(6)},\n+        {\"query_duration_ms\", std::make_shared<DataTypeUInt64>()},\n+\n+        {\"read_rows\", std::make_shared<DataTypeUInt64>()},\n+        {\"read_bytes\", std::make_shared<DataTypeUInt64>()},\n+        {\"written_rows\", std::make_shared<DataTypeUInt64>()},\n+        {\"written_bytes\", std::make_shared<DataTypeUInt64>()},\n+        {\"result_rows\", std::make_shared<DataTypeUInt64>()},\n+        {\"result_bytes\", std::make_shared<DataTypeUInt64>()},\n+        {\"memory_usage\", std::make_shared<DataTypeUInt64>()},\n+\n+        {\"current_database\", std::make_shared<DataTypeString>()},\n+        {\"query\", std::make_shared<DataTypeString>()},\n+        {\"normalized_query_hash\", std::make_shared<DataTypeUInt64>()},\n+        {\"query_kind\", std::make_shared<DataTypeLowCardinality>(std::make_shared<DataTypeString>())},\n+        {\"databases\", std::make_shared<DataTypeArray>(\n+            std::make_shared<DataTypeLowCardinality>(std::make_shared<DataTypeString>()))},\n+        {\"tables\", std::make_shared<DataTypeArray>(\n+            std::make_shared<DataTypeLowCardinality>(std::make_shared<DataTypeString>()))},\n+        {\"columns\", std::make_shared<DataTypeArray>(\n+            std::make_shared<DataTypeLowCardinality>(std::make_shared<DataTypeString>()))},\n+        {\"projections\", std::make_shared<DataTypeArray>(\n+            std::make_shared<DataTypeLowCardinality>(std::make_shared<DataTypeString>()))},\n+        {\"exception_code\", std::make_shared<DataTypeInt32>()},\n+        {\"exception\", std::make_shared<DataTypeString>()},\n+        {\"stack_trace\", std::make_shared<DataTypeString>()},\n+\n+        {\"is_initial_query\", std::make_shared<DataTypeUInt8>()},\n+        {\"user\", std::make_shared<DataTypeString>()},\n+        {\"query_id\", std::make_shared<DataTypeString>()},\n+        {\"address\", DataTypeFactory::instance().get(\"IPv6\")},\n+        {\"port\", std::make_shared<DataTypeUInt16>()},\n+        {\"initial_user\", std::make_shared<DataTypeString>()},\n+        {\"initial_query_id\", std::make_shared<DataTypeString>()},\n+        {\"initial_address\", DataTypeFactory::instance().get(\"IPv6\")},\n+        {\"initial_port\", std::make_shared<DataTypeUInt16>()},\n+        {\"initial_query_start_time\", std::make_shared<DataTypeDateTime>()},\n+        {\"initial_query_start_time_microseconds\", std::make_shared<DataTypeDateTime64>(6)},\n+        {\"interface\", std::make_shared<DataTypeUInt8>()},\n+        {\"os_user\", std::make_shared<DataTypeString>()},\n+        {\"client_hostname\", std::make_shared<DataTypeString>()},\n+        {\"client_name\", std::make_shared<DataTypeString>()},\n+        {\"client_revision\", std::make_shared<DataTypeUInt32>()},\n+        {\"client_version_major\", std::make_shared<DataTypeUInt32>()},\n+        {\"client_version_minor\", std::make_shared<DataTypeUInt32>()},\n+        {\"client_version_patch\", std::make_shared<DataTypeUInt32>()},\n+        {\"http_method\", std::make_shared<DataTypeUInt8>()},\n+        {\"http_user_agent\", std::make_shared<DataTypeString>()},\n+        {\"http_referer\", std::make_shared<DataTypeString>()},\n+        {\"forwarded_for\", std::make_shared<DataTypeString>()},\n+        {\"quota_key\", std::make_shared<DataTypeString>()},\n+\n+        {\"revision\", std::make_shared<DataTypeUInt32>()},\n+\n+        {\"log_comment\", std::make_shared<DataTypeString>()},\n+\n+        {\"thread_ids\", std::make_shared<DataTypeArray>(std::make_shared<DataTypeUInt64>())},\n+        {\"ProfileEvents\", std::make_shared<DataTypeMap>(std::make_shared<DataTypeString>(), std::make_shared<DataTypeUInt64>())},\n+        {\"Settings\", std::make_shared<DataTypeMap>(std::make_shared<DataTypeString>(), std::make_shared<DataTypeString>())},\n+\n+        {\"used_aggregate_functions\", std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>())},\n+        {\"used_aggregate_function_combinators\", std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>())},\n+        {\"used_database_engines\", std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>())},\n+        {\"used_data_type_families\", std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>())},\n+        {\"used_dictionaries\", std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>())},\n+        {\"used_formats\", std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>())},\n+        {\"used_functions\", std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>())},\n+        {\"used_storages\", std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>())},\n+        {\"used_table_functions\", std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>())}\n     };\n \n }\n \n+NamesAndAliases QueryLogElement::getNamesAndAliases()\n+{\n+    return\n+    {\n+        {\"ProfileEvents.Names\", {std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>())}, \"mapKeys(ProfileEvents)\"},\n+        {\"ProfileEvents.Values\", {std::make_shared<DataTypeArray>(std::make_shared<DataTypeUInt64>())}, \"mapValues(ProfileEvents)\"},\n+        {\"Settings.Names\", {std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>())}, \"mapKeys(Settings)\" },\n+        {\"Settings.Values\", {std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>())}, \"mapValues(Settings)\"}\n+    };\n+}\n \n void QueryLogElement::appendToBlock(MutableColumns & columns) const\n {\n@@ -188,26 +198,22 @@ void QueryLogElement::appendToBlock(MutableColumns & columns) const\n \n     if (profile_counters)\n     {\n-        auto * column_names = columns[i++].get();\n-        auto * column_values = columns[i++].get();\n-        ProfileEvents::dumpToArrayColumns(*profile_counters, column_names, column_values, true);\n+        auto * column = columns[i++].get();\n+        ProfileEvents::dumpToMapColumn(*profile_counters, column, true);\n     }\n     else\n     {\n         columns[i++]->insertDefault();\n-        columns[i++]->insertDefault();\n     }\n \n     if (query_settings)\n     {\n-        auto * column_names = columns[i++].get();\n-        auto * column_values = columns[i++].get();\n-        query_settings->dumpToArrayColumns(column_names, column_values, true);\n+        auto * column = columns[i++].get();\n+        query_settings->dumpToMapColumn(column, true);\n     }\n     else\n     {\n         columns[i++]->insertDefault();\n-        columns[i++]->insertDefault();\n     }\n \n     {\ndiff --git a/src/Interpreters/QueryLog.h b/src/Interpreters/QueryLog.h\nindex 684a635a9200..0aa021043068 100644\n--- a/src/Interpreters/QueryLog.h\n+++ b/src/Interpreters/QueryLog.h\n@@ -1,9 +1,9 @@\n #pragma once\n \n+#include <Core/NamesAndAliases.h>\n #include <Interpreters/SystemLog.h>\n #include <Interpreters/ClientInfo.h>\n \n-\n namespace ProfileEvents\n {\n     class Counters;\n@@ -83,7 +83,8 @@ struct QueryLogElement\n \n     static std::string name() { return \"QueryLog\"; }\n \n-    static Block createBlock();\n+    static NamesAndTypesList getNamesAndTypes();\n+    static NamesAndAliases getNamesAndAliases();\n     void appendToBlock(MutableColumns & columns) const;\n \n     static void appendClientInfo(const ClientInfo & client_info, MutableColumns & columns, size_t & i);\ndiff --git a/src/Interpreters/QueryThreadLog.cpp b/src/Interpreters/QueryThreadLog.cpp\nindex df591b42de2a..7ca3c10045e0 100644\n--- a/src/Interpreters/QueryThreadLog.cpp\n+++ b/src/Interpreters/QueryThreadLog.cpp\n@@ -5,6 +5,7 @@\n #include <Columns/ColumnsNumber.h>\n #include <DataTypes/DataTypeArray.h>\n #include <DataTypes/DataTypeDate.h>\n+#include <DataTypes/DataTypeMap.h>\n #include <DataTypes/DataTypeDateTime.h>\n #include <DataTypes/DataTypeDateTime64.h>\n #include <DataTypes/DataTypeFactory.h>\n@@ -18,59 +19,68 @@\n \n namespace DB\n {\n-Block QueryThreadLogElement::createBlock()\n+\n+NamesAndTypesList QueryThreadLogElement::getNamesAndTypes()\n {\n     return {\n-        {std::make_shared<DataTypeDate>(),          \"event_date\"},\n-        {std::make_shared<DataTypeDateTime>(),      \"event_time\"},\n-        {std::make_shared<DataTypeDateTime64>(6),   \"event_time_microseconds\"},\n-        {std::make_shared<DataTypeDateTime>(),      \"query_start_time\"},\n-        {std::make_shared<DataTypeDateTime64>(6),   \"query_start_time_microseconds\"},\n-        {std::make_shared<DataTypeUInt64>(),        \"query_duration_ms\"},\n-\n-        {std::make_shared<DataTypeUInt64>(),        \"read_rows\"},\n-        {std::make_shared<DataTypeUInt64>(),        \"read_bytes\"},\n-        {std::make_shared<DataTypeUInt64>(),        \"written_rows\"},\n-        {std::make_shared<DataTypeUInt64>(),        \"written_bytes\"},\n-        {std::make_shared<DataTypeInt64>(),         \"memory_usage\"},\n-        {std::make_shared<DataTypeInt64>(),         \"peak_memory_usage\"},\n-\n-        {std::make_shared<DataTypeString>(),        \"thread_name\"},\n-        {std::make_shared<DataTypeUInt64>(),        \"thread_id\"},\n-        {std::make_shared<DataTypeUInt64>(),        \"master_thread_id\"},\n-        {std::make_shared<DataTypeString>(),        \"current_database\"},\n-        {std::make_shared<DataTypeString>(),        \"query\"},\n-        {std::make_shared<DataTypeUInt64>(),        \"normalized_query_hash\"},\n-\n-        {std::make_shared<DataTypeUInt8>(),         \"is_initial_query\"},\n-        {std::make_shared<DataTypeString>(),        \"user\"},\n-        {std::make_shared<DataTypeString>(),        \"query_id\"},\n-        {DataTypeFactory::instance().get(\"IPv6\"),   \"address\"},\n-        {std::make_shared<DataTypeUInt16>(),        \"port\"},\n-        {std::make_shared<DataTypeString>(),        \"initial_user\"},\n-        {std::make_shared<DataTypeString>(),        \"initial_query_id\"},\n-        {DataTypeFactory::instance().get(\"IPv6\"),   \"initial_address\"},\n-        {std::make_shared<DataTypeUInt16>(),        \"initial_port\"},\n-        {std::make_shared<DataTypeDateTime>(),      \"initial_query_start_time\"},\n-        {std::make_shared<DataTypeDateTime64>(6),   \"initial_query_start_time_microseconds\"},\n-        {std::make_shared<DataTypeUInt8>(),         \"interface\"},\n-        {std::make_shared<DataTypeString>(),        \"os_user\"},\n-        {std::make_shared<DataTypeString>(),        \"client_hostname\"},\n-        {std::make_shared<DataTypeString>(),        \"client_name\"},\n-        {std::make_shared<DataTypeUInt32>(),        \"client_revision\"},\n-        {std::make_shared<DataTypeUInt32>(),        \"client_version_major\"},\n-        {std::make_shared<DataTypeUInt32>(),        \"client_version_minor\"},\n-        {std::make_shared<DataTypeUInt32>(),        \"client_version_patch\"},\n-        {std::make_shared<DataTypeUInt8>(),         \"http_method\"},\n-        {std::make_shared<DataTypeString>(),        \"http_user_agent\"},\n-        {std::make_shared<DataTypeString>(),        \"http_referer\"},\n-        {std::make_shared<DataTypeString>(),        \"forwarded_for\"},\n-        {std::make_shared<DataTypeString>(),        \"quota_key\"},\n-\n-        {std::make_shared<DataTypeUInt32>(),        \"revision\"},\n-\n-        {std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>()), \"ProfileEvents.Names\"},\n-        {std::make_shared<DataTypeArray>(std::make_shared<DataTypeUInt64>()), \"ProfileEvents.Values\"}\n+        {\"event_date\", std::make_shared<DataTypeDate>()},\n+        {\"event_time\", std::make_shared<DataTypeDateTime>()},\n+        {\"event_time_microseconds\", std::make_shared<DataTypeDateTime64>(6)},\n+        {\"query_start_time\", std::make_shared<DataTypeDateTime>()},\n+        {\"query_start_time_microseconds\", std::make_shared<DataTypeDateTime64>(6)},\n+        {\"query_duration_ms\", std::make_shared<DataTypeUInt64>()},\n+\n+        {\"read_rows\", std::make_shared<DataTypeUInt64>()},\n+        {\"read_bytes\", std::make_shared<DataTypeUInt64>()},\n+        {\"written_rows\", std::make_shared<DataTypeUInt64>()},\n+        {\"written_bytes\", std::make_shared<DataTypeUInt64>()},\n+        {\"memory_usage\", std::make_shared<DataTypeInt64>()},\n+        {\"peak_memory_usage\", std::make_shared<DataTypeInt64>()},\n+\n+        {\"thread_name\", std::make_shared<DataTypeString>()},\n+        {\"thread_id\", std::make_shared<DataTypeUInt64>()},\n+        {\"master_thread_id\", std::make_shared<DataTypeUInt64>()},\n+        {\"current_database\", std::make_shared<DataTypeString>()},\n+        {\"query\", std::make_shared<DataTypeString>()},\n+        {\"normalized_query_hash\", std::make_shared<DataTypeUInt64>()},\n+\n+        {\"is_initial_query\", std::make_shared<DataTypeUInt8>()},\n+        {\"user\", std::make_shared<DataTypeString>()},\n+        {\"query_id\", std::make_shared<DataTypeString>()},\n+        {\"address\", DataTypeFactory::instance().get(\"IPv6\")},\n+        {\"port\", std::make_shared<DataTypeUInt16>()},\n+        {\"initial_user\", std::make_shared<DataTypeString>()},\n+        {\"initial_query_id\", std::make_shared<DataTypeString>()},\n+        {\"initial_address\", DataTypeFactory::instance().get(\"IPv6\")},\n+        {\"initial_port\", std::make_shared<DataTypeUInt16>()},\n+        {\"initial_query_start_time\", std::make_shared<DataTypeDateTime>()},\n+        {\"initial_query_start_time_microseconds\", std::make_shared<DataTypeDateTime64>(6)},\n+        {\"interface\", std::make_shared<DataTypeUInt8>()},\n+        {\"os_user\", std::make_shared<DataTypeString>()},\n+        {\"client_hostname\", std::make_shared<DataTypeString>()},\n+        {\"client_name\", std::make_shared<DataTypeString>()},\n+        {\"client_revision\", std::make_shared<DataTypeUInt32>()},\n+        {\"client_version_major\", std::make_shared<DataTypeUInt32>()},\n+        {\"client_version_minor\", std::make_shared<DataTypeUInt32>()},\n+        {\"client_version_patch\", std::make_shared<DataTypeUInt32>()},\n+        {\"http_method\", std::make_shared<DataTypeUInt8>()},\n+        {\"http_user_agent\", std::make_shared<DataTypeString>()},\n+        {\"http_referer\", std::make_shared<DataTypeString>()},\n+        {\"forwarded_for\", std::make_shared<DataTypeString>()},\n+        {\"quota_key\", std::make_shared<DataTypeString>()},\n+\n+        {\"revision\", std::make_shared<DataTypeUInt32>()},\n+\n+        {\"ProfileEvents\", std::make_shared<DataTypeMap>(std::make_shared<DataTypeString>(), std::make_shared<DataTypeUInt64>())},\n+    };\n+}\n+\n+NamesAndAliases QueryThreadLogElement::getNamesAndAliases()\n+{\n+    return\n+    {\n+        {\"ProfileEvents.Names\", {std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>())}, \"mapKeys(ProfileEvents)\"},\n+        {\"ProfileEvents.Values\", {std::make_shared<DataTypeArray>(std::make_shared<DataTypeUInt64>())}, \"mapValues(ProfileEvents)\"}\n     };\n }\n \n@@ -107,14 +117,12 @@ void QueryThreadLogElement::appendToBlock(MutableColumns & columns) const\n \n     if (profile_counters)\n     {\n-        auto * column_names = columns[i++].get();\n-        auto * column_values = columns[i++].get();\n-        dumpToArrayColumns(*profile_counters, column_names, column_values, true);\n+        auto * column = columns[i++].get();\n+        ProfileEvents::dumpToMapColumn(*profile_counters, column, true);\n     }\n     else\n     {\n         columns[i++]->insertDefault();\n-        columns[i++]->insertDefault();\n     }\n }\n \ndiff --git a/src/Interpreters/QueryThreadLog.h b/src/Interpreters/QueryThreadLog.h\nindex 6771e8ba88c7..57e93edbaf7b 100644\n--- a/src/Interpreters/QueryThreadLog.h\n+++ b/src/Interpreters/QueryThreadLog.h\n@@ -49,7 +49,8 @@ struct QueryThreadLogElement\n \n     static std::string name() { return \"QueryThreadLog\"; }\n \n-    static Block createBlock();\n+    static NamesAndTypesList getNamesAndTypes();\n+    static NamesAndAliases getNamesAndAliases();\n     void appendToBlock(MutableColumns & columns) const;\n };\n \ndiff --git a/src/Interpreters/SystemLog.h b/src/Interpreters/SystemLog.h\nindex 9e57e308dbeb..ee3116362e5c 100644\n--- a/src/Interpreters/SystemLog.h\n+++ b/src/Interpreters/SystemLog.h\n@@ -52,7 +52,8 @@ namespace DB\n         /// fields\n \n         static std::string name();\n-        static Block createBlock();\n+        static NamesAndTypesList getNamesAndTypes();\n+        static NamesAndAliases getNamesAndAliases();\n         void appendToBlock(MutableColumns & columns) const;\n     };\n     */\n@@ -451,10 +452,18 @@ void SystemLog<LogElement>::flushImpl(const std::vector<LogElement> & to_flush,\n         /// is called from single thread.\n         prepareTable();\n \n-        Block block = LogElement::createBlock();\n+        ColumnsWithTypeAndName log_element_columns;\n+        auto log_element_names_and_types = LogElement::getNamesAndTypes();\n+\n+        for (auto name_and_type : log_element_names_and_types)\n+            log_element_columns.emplace_back(name_and_type.type, name_and_type.name);\n+\n+        Block block(std::move(log_element_columns));\n+\n         MutableColumns columns = block.mutateColumns();\n         for (const auto & elem : to_flush)\n             elem.appendToBlock(columns);\n+\n         block.setColumns(std::move(columns));\n \n         /// We write to table indirectly, using InterpreterInsertQuery.\n@@ -500,11 +509,14 @@ void SystemLog<LogElement>::prepareTable()\n \n     if (table)\n     {\n-        auto metadata_snapshot = table->getInMemoryMetadataPtr();\n-        const Block expected = LogElement::createBlock();\n-        const Block actual = metadata_snapshot->getSampleBlockNonMaterialized();\n+        auto metadata_columns = table->getInMemoryMetadataPtr()->getColumns();\n+        auto old_query = InterpreterCreateQuery::formatColumns(metadata_columns);\n+\n+        auto ordinary_columns = LogElement::getNamesAndTypes();\n+        auto alias_columns = LogElement::getNamesAndAliases();\n+        auto current_query = InterpreterCreateQuery::formatColumns(ordinary_columns, alias_columns);\n \n-        if (!blocksHaveEqualStructure(actual, expected))\n+        if (old_query->getTreeHash() != current_query->getTreeHash())\n         {\n             /// Rename the existing table.\n             int suffix = 0;\n@@ -575,10 +587,10 @@ ASTPtr SystemLog<LogElement>::getCreateTableQuery()\n     create->database = table_id.database_name;\n     create->table = table_id.table_name;\n \n-    Block sample = LogElement::createBlock();\n-\n+    auto ordinary_columns = LogElement::getNamesAndTypes();\n+    auto alias_columns = LogElement::getNamesAndAliases();\n     auto new_columns_list = std::make_shared<ASTColumns>();\n-    new_columns_list->set(new_columns_list->columns, InterpreterCreateQuery::formatColumns(sample.getNamesAndTypesList()));\n+    new_columns_list->set(new_columns_list->columns, InterpreterCreateQuery::formatColumns(ordinary_columns, alias_columns));\n     create->set(create->columns_list, new_columns_list);\n \n     ParserStorage storage_parser;\ndiff --git a/src/Interpreters/TextLog.cpp b/src/Interpreters/TextLog.cpp\nindex f5a0ce51d49a..baf98b6771d6 100644\n--- a/src/Interpreters/TextLog.cpp\n+++ b/src/Interpreters/TextLog.cpp\n@@ -14,7 +14,7 @@\n namespace DB\n {\n \n-Block TextLogElement::createBlock()\n+NamesAndTypesList TextLogElement::getNamesAndTypes()\n {\n     auto priority_datatype = std::make_shared<DataTypeEnum8>(\n         DataTypeEnum8::Values\n@@ -31,23 +31,23 @@ Block TextLogElement::createBlock()\n \n     return\n     {\n-        {std::make_shared<DataTypeDate>(),                                                    \"event_date\"},\n-        {std::make_shared<DataTypeDateTime>(),                                                \"event_time\"},\n-        {std::make_shared<DataTypeDateTime64>(6),                                             \"event_time_microseconds\"},\n-        {std::make_shared<DataTypeUInt32>(),                                                  \"microseconds\"},\n+        {\"event_date\", std::make_shared<DataTypeDate>()},\n+        {\"event_time\", std::make_shared<DataTypeDateTime>()},\n+        {\"event_time_microseconds\", std::make_shared<DataTypeDateTime64>(6)},\n+        {\"microseconds\", std::make_shared<DataTypeUInt32>()},\n \n-        {std::make_shared<DataTypeLowCardinality>(std::make_shared<DataTypeString>()),        \"thread_name\"},\n-        {std::make_shared<DataTypeUInt64>(),                                                  \"thread_id\"},\n+        {\"thread_name\", std::make_shared<DataTypeLowCardinality>(std::make_shared<DataTypeString>())},\n+        {\"thread_id\", std::make_shared<DataTypeUInt64>()},\n \n-        {std::move(priority_datatype),                                                        \"level\"},\n-        {std::make_shared<DataTypeString>(),                                                  \"query_id\"},\n-        {std::make_shared<DataTypeLowCardinality>(std::make_shared<DataTypeString>()),        \"logger_name\"},\n-        {std::make_shared<DataTypeString>(),                                                  \"message\"},\n+        {\"level\", std::move(priority_datatype)},\n+        {\"query_id\", std::make_shared<DataTypeString>()},\n+        {\"logger_name\", std::make_shared<DataTypeLowCardinality>(std::make_shared<DataTypeString>())},\n+        {\"message\", std::make_shared<DataTypeString>()},\n \n-        {std::make_shared<DataTypeUInt32>(),                                                  \"revision\"},\n+        {\"revision\", std::make_shared<DataTypeUInt32>()},\n \n-        {std::make_shared<DataTypeLowCardinality>(std::make_shared<DataTypeString>()),        \"source_file\"},\n-        {std::make_shared<DataTypeUInt64>(),                                                  \"source_line\"}\n+        {\"source_file\", std::make_shared<DataTypeLowCardinality>(std::make_shared<DataTypeString>())},\n+        {\"source_line\", std::make_shared<DataTypeUInt64>()}\n     };\n }\n \ndiff --git a/src/Interpreters/TextLog.h b/src/Interpreters/TextLog.h\nindex 0133d5e4eb61..d2ddd23d1e93 100644\n--- a/src/Interpreters/TextLog.h\n+++ b/src/Interpreters/TextLog.h\n@@ -25,7 +25,8 @@ struct TextLogElement\n     UInt64 source_line{};\n \n     static std::string name() { return \"TextLog\"; }\n-    static Block createBlock();\n+    static NamesAndTypesList getNamesAndTypes();\n+    static NamesAndAliases getNamesAndAliases() { return {}; }\n     void appendToBlock(MutableColumns & columns) const;\n };\n \ndiff --git a/src/Interpreters/TraceLog.cpp b/src/Interpreters/TraceLog.cpp\nindex fe7512f2f009..dac27aebe583 100644\n--- a/src/Interpreters/TraceLog.cpp\n+++ b/src/Interpreters/TraceLog.cpp\n@@ -21,20 +21,20 @@ const TraceDataType::Values TraceLogElement::trace_values =\n     {\"MemorySample\", static_cast<UInt8>(TraceType::MemorySample)},\n };\n \n-Block TraceLogElement::createBlock()\n+NamesAndTypesList TraceLogElement::getNamesAndTypes()\n {\n     return\n     {\n-        {std::make_shared<DataTypeDate>(),                                    \"event_date\"},\n-        {std::make_shared<DataTypeDateTime>(),                                \"event_time\"},\n-        {std::make_shared<DataTypeDateTime64>(6),                             \"event_time_microseconds\"},\n-        {std::make_shared<DataTypeUInt64>(),                                  \"timestamp_ns\"},\n-        {std::make_shared<DataTypeUInt32>(),                                  \"revision\"},\n-        {std::make_shared<TraceDataType>(trace_values),                       \"trace_type\"},\n-        {std::make_shared<DataTypeUInt64>(),                                  \"thread_id\"},\n-        {std::make_shared<DataTypeString>(),                                  \"query_id\"},\n-        {std::make_shared<DataTypeArray>(std::make_shared<DataTypeUInt64>()), \"trace\"},\n-        {std::make_shared<DataTypeInt64>(),                                   \"size\"},\n+        {\"event_date\", std::make_shared<DataTypeDate>()},\n+        {\"event_time\", std::make_shared<DataTypeDateTime>()},\n+        {\"event_time_microseconds\", std::make_shared<DataTypeDateTime64>(6)},\n+        {\"timestamp_ns\", std::make_shared<DataTypeUInt64>()},\n+        {\"revision\", std::make_shared<DataTypeUInt32>()},\n+        {\"trace_type\", std::make_shared<TraceDataType>(trace_values)},\n+        {\"thread_id\", std::make_shared<DataTypeUInt64>()},\n+        {\"query_id\", std::make_shared<DataTypeString>()},\n+        {\"trace\", std::make_shared<DataTypeArray>(std::make_shared<DataTypeUInt64>())},\n+        {\"size\", std::make_shared<DataTypeInt64>()},\n     };\n }\n \ndiff --git a/src/Interpreters/TraceLog.h b/src/Interpreters/TraceLog.h\nindex 9ee43bf32cc4..85400560a7b7 100644\n--- a/src/Interpreters/TraceLog.h\n+++ b/src/Interpreters/TraceLog.h\n@@ -27,7 +27,8 @@ struct TraceLogElement\n     Int64 size{}; /// Allocation size in bytes for TraceType::Memory\n \n     static std::string name() { return \"TraceLog\"; }\n-    static Block createBlock();\n+    static NamesAndTypesList getNamesAndTypes();\n+    static NamesAndAliases getNamesAndAliases() { return {}; }\n     void appendToBlock(MutableColumns & columns) const;\n };\n \ndiff --git a/src/Storages/ColumnsDescription.cpp b/src/Storages/ColumnsDescription.cpp\nindex 4a904c96432d..179204a1a0b6 100644\n--- a/src/Storages/ColumnsDescription.cpp\n+++ b/src/Storages/ColumnsDescription.cpp\n@@ -145,6 +145,25 @@ ColumnsDescription::ColumnsDescription(NamesAndTypesList ordinary)\n         add(ColumnDescription(std::move(elem.name), std::move(elem.type)));\n }\n \n+ColumnsDescription::ColumnsDescription(NamesAndTypesList ordinary, NamesAndAliases aliases)\n+{\n+    for (auto & elem : ordinary)\n+        add(ColumnDescription(std::move(elem.name), std::move(elem.type)));\n+\n+    for (auto & alias : aliases)\n+    {\n+        ColumnDescription description(std::move(alias.name), std::move(alias.type));\n+        description.default_desc.kind = ColumnDefaultKind::Alias;\n+\n+        const char * alias_expression_pos = alias.expression.data();\n+        const char * alias_expression_end = alias_expression_pos + alias.expression.size();\n+        ParserExpression expression_parser;\n+        description.default_desc.expression = parseQuery(expression_parser, alias_expression_pos, alias_expression_end, \"expression\", 0, DBMS_DEFAULT_MAX_PARSER_DEPTH);\n+\n+        add(std::move(description));\n+    }\n+}\n+\n \n /// We are trying to find first column from end with name `column_name` or with a name beginning with `column_name` and \".\".\n /// For example \"fruits.bananas\"\ndiff --git a/src/Storages/ColumnsDescription.h b/src/Storages/ColumnsDescription.h\nindex 7fff22abf718..f1887d772ca2 100644\n--- a/src/Storages/ColumnsDescription.h\n+++ b/src/Storages/ColumnsDescription.h\n@@ -4,6 +4,7 @@\n #include <Core/Block.h>\n #include <Core/Names.h>\n #include <Core/NamesAndTypes.h>\n+#include <Core/NamesAndAliases.h>\n #include <Interpreters/Context_fwd.h>\n #include <Storages/ColumnCodec.h>\n #include <Storages/ColumnDefault.h>\n@@ -54,7 +55,9 @@ class ColumnsDescription\n {\n public:\n     ColumnsDescription() = default;\n-    explicit ColumnsDescription(NamesAndTypesList ordinary_);\n+    explicit ColumnsDescription(NamesAndTypesList ordinary);\n+\n+    explicit ColumnsDescription(NamesAndTypesList ordinary, NamesAndAliases aliases);\n \n     /// `after_column` can be a Nested column name;\n     void add(ColumnDescription column, const String & after_column = String(), bool first = false);\ndiff --git a/src/Storages/System/IStorageSystemOneBlock.h b/src/Storages/System/IStorageSystemOneBlock.h\nindex 0fe9ca949722..37089ac8e3df 100644\n--- a/src/Storages/System/IStorageSystemOneBlock.h\n+++ b/src/Storages/System/IStorageSystemOneBlock.h\n@@ -1,4 +1,6 @@\n #pragma once\n+\n+#include <Core/NamesAndAliases.h>\n #include <DataTypes/DataTypeString.h>\n #include <Storages/ColumnsDescription.h>\n #include <Storages/IStorage.h>\n@@ -29,6 +31,7 @@ class IStorageSystemOneBlock : public IStorage\n protected:\n     virtual void fillData(MutableColumns & res_columns, ContextPtr context, const SelectQueryInfo & query_info) const = 0;\n \n+\n public:\n #if defined(ARCADIA_BUILD)\n     IStorageSystemOneBlock(const String & name_) : IStorageSystemOneBlock(StorageID{\"system\", name_}) {}\n@@ -37,7 +40,7 @@ class IStorageSystemOneBlock : public IStorage\n     IStorageSystemOneBlock(const StorageID & table_id_) : IStorage(table_id_)\n     {\n         StorageInMemoryMetadata metadata_;\n-        metadata_.setColumns(ColumnsDescription(Self::getNamesAndTypes()));\n+        metadata_.setColumns(ColumnsDescription(Self::getNamesAndTypes(), Self::getNamesAndAliases()));\n         setInMemoryMetadata(metadata_);\n     }\n \n@@ -62,6 +65,8 @@ class IStorageSystemOneBlock : public IStorage\n \n         return Pipe(std::make_shared<SourceFromSingleChunk>(sample_block, std::move(chunk)));\n     }\n+\n+    static NamesAndAliases getNamesAndAliases() { return {}; }\n };\n \n }\ndiff --git a/src/Storages/System/StorageSystemProcesses.cpp b/src/Storages/System/StorageSystemProcesses.cpp\nindex 785b4c0df115..e2685af77181 100644\n--- a/src/Storages/System/StorageSystemProcesses.cpp\n+++ b/src/Storages/System/StorageSystemProcesses.cpp\n@@ -1,6 +1,7 @@\n #include <DataTypes/DataTypeString.h>\n #include <DataTypes/DataTypesNumber.h>\n #include <DataTypes/DataTypeArray.h>\n+#include <DataTypes/DataTypeMap.h>\n #include <DataTypes/DataTypeFactory.h>\n #include <Interpreters/ProcessList.h>\n #include <Storages/System/StorageSystemProcesses.h>\n@@ -60,15 +61,21 @@ NamesAndTypesList StorageSystemProcesses::getNamesAndTypes()\n         {\"query\", std::make_shared<DataTypeString>()},\n \n         {\"thread_ids\", std::make_shared<DataTypeArray>(std::make_shared<DataTypeUInt64>())},\n-        {\"ProfileEvents.Names\", std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>())},\n-        {\"ProfileEvents.Values\", std::make_shared<DataTypeArray>(std::make_shared<DataTypeUInt64>())},\n-        {\"Settings.Names\", std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>())},\n-        {\"Settings.Values\", std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>())},\n+        {\"ProfileEvents\", std::make_shared<DataTypeMap>(std::make_shared<DataTypeString>(), std::make_shared<DataTypeUInt64>())},\n+        {\"Settings\", std::make_shared<DataTypeMap>(std::make_shared<DataTypeString>(), std::make_shared<DataTypeString>())},\n \n         {\"current_database\", std::make_shared<DataTypeString>()},\n     };\n }\n \n+NamesAndAliases StorageSystemProcesses::getNamesAndAliases()\n+{\n+    return\n+    {\n+        {\"ProfileEvents.Names\", {std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>())}, \"mapKeys(ProfileEvents)\"},\n+        {\"ProfileEvents.Values\", {std::make_shared<DataTypeArray>(std::make_shared<DataTypeUInt64>())}, \"mapValues(ProfileEvents)\"}\n+    };\n+}\n \n void StorageSystemProcesses::fillData(MutableColumns & res_columns, ContextPtr context, const SelectQueryInfo &) const\n {\n@@ -127,28 +134,24 @@ void StorageSystemProcesses::fillData(MutableColumns & res_columns, ContextPtr c\n         }\n \n         {\n-            IColumn * column_profile_events_names = res_columns[i++].get();\n-            IColumn * column_profile_events_values = res_columns[i++].get();\n+            IColumn * column = res_columns[i++].get();\n \n             if (process.profile_counters)\n-                ProfileEvents::dumpToArrayColumns(*process.profile_counters, column_profile_events_names, column_profile_events_values, true);\n+                ProfileEvents::dumpToMapColumn(*process.profile_counters, column, true);\n             else\n             {\n-                column_profile_events_names->insertDefault();\n-                column_profile_events_values->insertDefault();\n+                column->insertDefault();\n             }\n         }\n \n         {\n-            IColumn * column_settings_names = res_columns[i++].get();\n-            IColumn * column_settings_values = res_columns[i++].get();\n+            IColumn * column = res_columns[i++].get();\n \n             if (process.query_settings)\n-                process.query_settings->dumpToArrayColumns(column_settings_names, column_settings_values, true);\n+                process.query_settings->dumpToMapColumn(column, true);\n             else\n             {\n-                column_settings_names->insertDefault();\n-                column_settings_values->insertDefault();\n+                column->insertDefault();\n             }\n         }\n \ndiff --git a/src/Storages/System/StorageSystemProcesses.h b/src/Storages/System/StorageSystemProcesses.h\nindex e63e3cc3e9df..9daf079800f0 100644\n--- a/src/Storages/System/StorageSystemProcesses.h\n+++ b/src/Storages/System/StorageSystemProcesses.h\n@@ -20,6 +20,8 @@ class StorageSystemProcesses final : public shared_ptr_helper<StorageSystemProce\n \n     static NamesAndTypesList getNamesAndTypes();\n \n+    static NamesAndAliases getNamesAndAliases();\n+\n protected:\n     using IStorageSystemOneBlock::IStorageSystemOneBlock;\n \n",
  "test_patch": "diff --git a/docker/test/performance-comparison/compare.sh b/docker/test/performance-comparison/compare.sh\nindex 2621a894dd78..dad4362b3d14 100755\n--- a/docker/test/performance-comparison/compare.sh\n+++ b/docker/test/performance-comparison/compare.sh\n@@ -409,10 +409,10 @@ create view right_query_log as select *\n         '$(cat \"right-query-log.tsv.columns\")');\n \n create view query_logs as\n-    select 0 version, query_id, ProfileEvents.Names, ProfileEvents.Values,\n+    select 0 version, query_id, ProfileEvents.keys, ProfileEvents.values,\n         query_duration_ms, memory_usage from left_query_log\n     union all\n-    select 1 version, query_id, ProfileEvents.Names, ProfileEvents.Values,\n+    select 1 version, query_id, ProfileEvents.keys, ProfileEvents.values,\n         query_duration_ms, memory_usage from right_query_log\n     ;\n \n@@ -424,7 +424,7 @@ create table query_run_metric_arrays engine File(TSV, 'analyze/query-run-metric-\n     with (\n         -- sumMapState with the list of all keys with '-0.' values. Negative zero is because\n         -- sumMap removes keys with positive zeros.\n-        with (select groupUniqArrayArray(ProfileEvents.Names) from query_logs) as all_names\n+        with (select groupUniqArrayArray(ProfileEvents.keys) from query_logs) as all_names\n             select arrayReduce('sumMapState', [(all_names, arrayMap(x->-0., all_names))])\n         ) as all_metrics\n     select test, query_index, version, query_id,\n@@ -433,8 +433,8 @@ create table query_run_metric_arrays engine File(TSV, 'analyze/query-run-metric-\n                 [\n                     all_metrics,\n                     arrayReduce('sumMapState',\n-                        [(ProfileEvents.Names,\n-                            arrayMap(x->toFloat64(x), ProfileEvents.Values))]\n+                        [(ProfileEvents.keys,\n+                            arrayMap(x->toFloat64(x), ProfileEvents.values))]\n                     ),\n                     arrayReduce('sumMapState', [(\n                         ['client_time', 'server_time', 'memory_usage'],\n@@ -1005,7 +1005,7 @@ create table unstable_run_metrics engine File(TSVWithNamesAndTypes,\n         'unstable-run-metrics.$version.rep') as\n     select\n         test, query_index, query_id,\n-        ProfileEvents.Values value, ProfileEvents.Names metric\n+        ProfileEvents.values value, ProfileEvents.keys metric\n     from query_log array join ProfileEvents\n     join unstable_query_runs using (query_id)\n     ;\n@@ -1280,7 +1280,7 @@ create table ci_checks engine File(TSVWithNamesAndTypes, 'ci-checks.tsv')\n     then\n         echo Database for test results is not specified, will not upload them.\n         return 0\n-    fi \n+    fi\n \n     set +x # Don't show password in the log\n     client=(clickhouse-client\ndiff --git a/tests/integration/test_distributed_inter_server_secret/test.py b/tests/integration/test_distributed_inter_server_secret/test.py\nindex 1a0e5a3dd915..0e77fc6e1627 100644\n--- a/tests/integration/test_distributed_inter_server_secret/test.py\n+++ b/tests/integration/test_distributed_inter_server_secret/test.py\n@@ -83,7 +83,7 @@ def get_query_user_info(node, query_pattern):\n def get_query_setting_on_shard(node, query_pattern, setting):\n     node.query(\"SYSTEM FLUSH LOGS\")\n     return node.query(\"\"\"\n-    SELECT (arrayFilter(x -> ((x.1) = '{}'), arrayZip(Settings.Names, Settings.Values))[1]).2\n+    SELECT Settings['{}']\n     FROM system.query_log\n     WHERE\n         query LIKE '%{}%' AND\ndiff --git a/tests/integration/test_merge_tree_s3_with_cache/test.py b/tests/integration/test_merge_tree_s3_with_cache/test.py\nindex 7022f90a2b9f..fad057540eea 100644\n--- a/tests/integration/test_merge_tree_s3_with_cache/test.py\n+++ b/tests/integration/test_merge_tree_s3_with_cache/test.py\n@@ -24,7 +24,7 @@ def get_query_stat(instance, hint):\n     result = {}\n     instance.query(\"SYSTEM FLUSH LOGS\")\n     events = instance.query('''\n-        SELECT ProfileEvents.Names, ProfileEvents.Values\n+        SELECT ProfileEvents.keys, ProfileEvents.values\n         FROM system.query_log\n         ARRAY JOIN ProfileEvents\n         WHERE type != 1 AND query LIKE '%{}%'\ndiff --git a/tests/integration/test_profile_events_s3/test.py b/tests/integration/test_profile_events_s3/test.py\nindex 52f14c99b4a0..98ad55b3adce 100644\n--- a/tests/integration/test_profile_events_s3/test.py\n+++ b/tests/integration/test_profile_events_s3/test.py\n@@ -83,7 +83,7 @@ def get_query_stat(instance, hint):\n     result = init_list.copy()\n     instance.query(\"SYSTEM FLUSH LOGS\")\n     events = instance.query('''\n-        SELECT ProfileEvents.Names, ProfileEvents.Values\n+        SELECT ProfileEvents.keys, ProfileEvents.values\n         FROM system.query_log\n         ARRAY JOIN ProfileEvents\n         WHERE type != 1 AND query LIKE '%{}%'\ndiff --git a/tests/queries/0_stateless/00634_performance_introspection_and_logging.sh b/tests/queries/0_stateless/00634_performance_introspection_and_logging.sh\nindex cc5ece15435d..93fd0c4a977b 100755\n--- a/tests/queries/0_stateless/00634_performance_introspection_and_logging.sh\n+++ b/tests/queries/0_stateless/00634_performance_introspection_and_logging.sh\n@@ -40,16 +40,16 @@ $CLICKHOUSE_CLIENT $settings -q \"SYSTEM FLUSH LOGS\"\n $CLICKHOUSE_CLIENT $settings -q \"\n WITH\n     any(query_duration_ms*1000) AS duration,\n-    sumIf(PV, PN = 'RealTimeMicroseconds') AS threads_realtime,\n-    sumIf(PV, PN IN ('UserTimeMicroseconds', 'SystemTimeMicroseconds', 'OSIOWaitMicroseconds', 'OSCPUWaitMicroseconds')) AS threads_time_user_system_io\n+    sum(ProfileEvents['RealTimeMicroseconds']) AS threads_realtime,\n+    sum(ProfileEvents['UserTimeMicroseconds'] + ProfileEvents['SystemTimeMicroseconds'] + ProfileEvents['OSIOWaitMicroseconds'] + ProfileEvents['OSCPUWaitMicroseconds']) AS threads_time_user_system_io\n SELECT\n     -- duration, threads_realtime, threads_time_user_system_io,\n     threads_realtime >= 0.99 * duration,\n     threads_realtime >= threads_time_user_system_io,\n     any(length(thread_ids)) >= 1\n     FROM\n-        (SELECT * FROM system.query_log PREWHERE query='$heavy_cpu_query' WHERE event_date >= today()-2 AND current_database = currentDatabase() AND type=2 ORDER BY event_time DESC LIMIT 1)\n-    ARRAY JOIN ProfileEvents.Names AS PN, ProfileEvents.Values AS PV\"\n+        (SELECT * FROM system.query_log PREWHERE query='$heavy_cpu_query' WHERE event_date >= today()-1 AND current_database = currentDatabase() AND type=2 ORDER BY event_time DESC LIMIT 1)\n+\"\n \n # Clean\n rm \"$server_logs_file\"\ndiff --git a/tests/queries/0_stateless/00731_long_merge_tree_select_opened_files.sh b/tests/queries/0_stateless/00731_long_merge_tree_select_opened_files.sh\nindex c2274c533996..e54326cb59fa 100755\n--- a/tests/queries/0_stateless/00731_long_merge_tree_select_opened_files.sh\n+++ b/tests/queries/0_stateless/00731_long_merge_tree_select_opened_files.sh\n@@ -28,6 +28,7 @@ $CLICKHOUSE_CLIENT $settings -q \"$touching_many_parts_query\" &> /dev/null\n \n $CLICKHOUSE_CLIENT $settings -q \"SYSTEM FLUSH LOGS\"\n \n-$CLICKHOUSE_CLIENT $settings -q \"SELECT pi.Values FROM system.query_log ARRAY JOIN ProfileEvents as pi WHERE query='$touching_many_parts_query' and current_database = currentDatabase() and pi.Names = 'FileOpen' ORDER BY event_time DESC LIMIT 1;\"\n+\n+$CLICKHOUSE_CLIENT $settings -q \"SELECT ProfileEvents['FileOpen'] FROM system.query_log WHERE query='$touching_many_parts_query' and current_database = currentDatabase()  ORDER BY event_time DESC LIMIT 1;\"\n \n $CLICKHOUSE_CLIENT $settings -q \"DROP TABLE IF EXISTS merge_tree_table;\"\ndiff --git a/tests/queries/0_stateless/00933_test_fix_extra_seek_on_compressed_cache.sh b/tests/queries/0_stateless/00933_test_fix_extra_seek_on_compressed_cache.sh\nindex 9865baaa1b9a..36ac490c80fe 100755\n--- a/tests/queries/0_stateless/00933_test_fix_extra_seek_on_compressed_cache.sh\n+++ b/tests/queries/0_stateless/00933_test_fix_extra_seek_on_compressed_cache.sh\n@@ -20,7 +20,8 @@ $CLICKHOUSE_CLIENT --use_uncompressed_cache=1 --query_id=\"test-query-uncompresse\n \n $CLICKHOUSE_CLIENT --query=\"SYSTEM FLUSH LOGS\"\n \n-$CLICKHOUSE_CLIENT --query=\"SELECT ProfileEvents.Values[indexOf(ProfileEvents.Names, 'Seek')], ProfileEvents.Values[indexOf(ProfileEvents.Names, 'ReadCompressedBytes')], ProfileEvents.Values[indexOf(ProfileEvents.Names, 'UncompressedCacheHits')] AS hit FROM system.query_log WHERE (query_id = 'test-query-uncompressed-cache') AND current_database = currentDatabase() AND (type = 2) AND event_date >= yesterday() ORDER BY event_time DESC LIMIT 1\"\n+\n+$CLICKHOUSE_CLIENT --query=\"SELECT ProfileEvents['Seek'], ProfileEvents['ReadCompressedBytes'], ProfileEvents['UncompressedCacheHits'] AS hit FROM system.query_log WHERE (query_id = 'test-query-uncompressed-cache') and current_database = currentDatabase() AND (type = 2) AND event_date >= yesterday() ORDER BY event_time DESC LIMIT 1\"\n \n $CLICKHOUSE_CLIENT --query=\"DROP TABLE IF EXISTS small_table\"\n \ndiff --git a/tests/queries/0_stateless/01076_array_join_prewhere_const_folding.sql b/tests/queries/0_stateless/01076_array_join_prewhere_const_folding.sql\nindex 2ab87fa883a9..7c4f69a64fbf 100644\n--- a/tests/queries/0_stateless/01076_array_join_prewhere_const_folding.sql\n+++ b/tests/queries/0_stateless/01076_array_join_prewhere_const_folding.sql\n@@ -2,9 +2,7 @@ SET log_queries = 1;\n SELECT 1 LIMIT 0;\n SYSTEM FLUSH LOGS;\n \n-SELECT arrayJoin AS kv_key\n-FROM system.query_log\n-ARRAY JOIN ProfileEvents.Names AS arrayJoin\n-PREWHERE current_database = currentDatabase() AND has(arrayMap(key -> key, ProfileEvents.Names), 'Query')\n-WHERE arrayJoin = 'Query'\n+SELECT * FROM system.query_log\n+PREWHERE ProfileEvents['Query'] > 0 and current_database = currentDatabase() \n+\n LIMIT 0;\ndiff --git a/tests/queries/0_stateless/01231_log_queries_min_type.sql b/tests/queries/0_stateless/01231_log_queries_min_type.sql\nindex b3540f3354b0..c2470bb9a563 100644\n--- a/tests/queries/0_stateless/01231_log_queries_min_type.sql\n+++ b/tests/queries/0_stateless/01231_log_queries_min_type.sql\n@@ -29,6 +29,7 @@ set max_rows_to_read=0;\n select count() from system.query_log where\n     current_database = currentDatabase() and\n     query like 'select \\'01231_log_queries_min_type w/ Settings/EXCEPTION_WHILE_PROCESSING%' and\n+    query not like '%system.query_log%' and\n     event_date >= yesterday() and\n     type = 'ExceptionWhileProcessing' and\n-    has(Settings.Names, 'max_rows_to_read');\n+    Settings['max_rows_to_read'] != '';\ndiff --git a/tests/queries/0_stateless/01268_procfs_metrics.sh b/tests/queries/0_stateless/01268_procfs_metrics.sh\nindex cad9b7866672..d5bd99724ca8 100755\n--- a/tests/queries/0_stateless/01268_procfs_metrics.sh\n+++ b/tests/queries/0_stateless/01268_procfs_metrics.sh\n@@ -24,7 +24,7 @@ function show_processes_func()\n         # These two system metrics for the generating query above are guaranteed to be nonzero when ProcFS is mounted at /proc\n         $CLICKHOUSE_CLIENT -q \"\n             SELECT count() > 0 FROM system.processes\\\n-            WHERE has(ProfileEvents.Names, 'OSCPUVirtualTimeMicroseconds') AND has(ProfileEvents.Names, 'OSReadChars')\\\n+            WHERE ProfileEvents['OSCPUVirtualTimeMicroseconds'] > 0 AND ProfileEvents['OSReadChars'] > 0 \\\n             SETTINGS max_threads = 1\n         \" | grep '1' && break;\n     done\ndiff --git a/tests/queries/0_stateless/01343_min_bytes_to_use_mmap_io.sql b/tests/queries/0_stateless/01343_min_bytes_to_use_mmap_io.sql\nindex ef39605f4d24..cbcb5c643fe4 100644\n--- a/tests/queries/0_stateless/01343_min_bytes_to_use_mmap_io.sql\n+++ b/tests/queries/0_stateless/01343_min_bytes_to_use_mmap_io.sql\n@@ -6,6 +6,6 @@ SET min_bytes_to_use_mmap_io = 1;\n SELECT * FROM test_01343;\n \n SYSTEM FLUSH LOGS;\n-SELECT PE.Values FROM system.query_log ARRAY JOIN ProfileEvents AS PE WHERE current_database = currentDatabase() AND event_date >= yesterday() AND event_time >= now() - 300 AND query LIKE 'SELECT * FROM test_01343%' AND PE.Names = 'CreatedReadBufferMMap' AND type = 2 ORDER BY event_time DESC LIMIT 1;\n+SELECT ProfileEvents['CreatedReadBufferMMap'] AS value FROM system.query_log WHERE current_database = currentDatabase() AND event_date >= yesterday() AND event_time >= now() - 300 AND query LIKE 'SELECT * FROM test_01343%' AND type = 2 ORDER BY event_time DESC LIMIT 1;\n \n DROP TABLE test_01343;\ndiff --git a/tests/queries/0_stateless/01344_min_bytes_to_use_mmap_io_index.sql b/tests/queries/0_stateless/01344_min_bytes_to_use_mmap_io_index.sql\nindex 7aab991d2038..3d1485272704 100644\n--- a/tests/queries/0_stateless/01344_min_bytes_to_use_mmap_io_index.sql\n+++ b/tests/queries/0_stateless/01344_min_bytes_to_use_mmap_io_index.sql\n@@ -6,6 +6,7 @@ SET min_bytes_to_use_mmap_io = 1;\n SELECT * FROM test_01344 WHERE x = 'Hello, world';\n \n SYSTEM FLUSH LOGS;\n-SELECT PE.Values FROM system.query_log ARRAY JOIN ProfileEvents AS PE WHERE current_database = currentDatabase() AND event_date >= yesterday() AND query LIKE 'SELECT * FROM test_01344 WHERE x = ''Hello, world''%' AND PE.Names = 'CreatedReadBufferMMap' AND type = 2 ORDER BY event_time DESC LIMIT 1;\n+SELECT ProfileEvents['CreatedReadBufferMMap'] as value FROM system.query_log\n+    WHERE current_database = currentDatabase() AND event_date >= yesterday() AND query LIKE 'SELECT * FROM test_01344 WHERE x = ''Hello, world''%' AND type = 2 ORDER BY event_time DESC LIMIT 1;\n \n DROP TABLE test_01344;\ndiff --git a/tests/queries/0_stateless/01360_materialized_view_with_join_on_query_log.sql b/tests/queries/0_stateless/01360_materialized_view_with_join_on_query_log.sql\nindex 3380f04f8c99..5f4855c61190 100644\n--- a/tests/queries/0_stateless/01360_materialized_view_with_join_on_query_log.sql\n+++ b/tests/queries/0_stateless/01360_materialized_view_with_join_on_query_log.sql\n@@ -8,7 +8,9 @@ SET log_queries=1;\n SELECT 1;\n SYSTEM FLUSH LOGS;\n \n+\n -- NOTE: can be rewritten using log_queries_min_query_duration_ms\n+\n CREATE MATERIALIZED VIEW slow_log Engine=Memory AS\n (\n         SELECT * FROM\ndiff --git a/tests/queries/0_stateless/01413_rows_events.sql b/tests/queries/0_stateless/01413_rows_events.sql\nindex 9e77d3fced97..0a0da9b4b129 100644\n--- a/tests/queries/0_stateless/01413_rows_events.sql\n+++ b/tests/queries/0_stateless/01413_rows_events.sql\n@@ -6,23 +6,24 @@ SYSTEM FLUSH LOGS;\n \n SELECT written_rows FROM system.query_log WHERE current_database = currentDatabase() AND query LIKE 'INSERT INTO /* test 01413, query 1 */ rows_events_test%' AND type = 2 AND event_date >= yesterday() ORDER BY event_time DESC LIMIT 1;\n \n-SELECT ProfileEvents.Values as value FROM system.query_log ARRAY JOIN ProfileEvents\n-    WHERE current_database = currentDatabase() AND ProfileEvents.Names = 'InsertedRows' AND query LIKE 'INSERT INTO /* test 01413, query 1 */ rows_events_test%' AND type = 2 AND event_date >= yesterday() ORDER BY event_time DESC LIMIT 1;\n+SELECT ProfileEvents['InsertedRows'] as value FROM system.query_log WHERE current_database = currentDatabase() AND query LIKE 'INSERT INTO /* test 01413, query 1 */ rows_events_test%' AND type = 2 AND event_date >= yesterday() ORDER BY event_time DESC LIMIT 1;\n+\n \n INSERT INTO /* test 01413, query 2 */ rows_events_test VALUES (2,2), (3,3);\n SYSTEM FLUSH LOGS;\n \n SELECT written_rows FROM system.query_log WHERE current_database = currentDatabase() AND query LIKE 'INSERT INTO /* test 01413, query 2 */ rows_events_test%' AND type = 2 AND event_date >= yesterday() ORDER BY event_time DESC LIMIT 1;\n \n-SELECT ProfileEvents.Values as value FROM system.query_log ARRAY JOIN ProfileEvents\n-    WHERE current_database = currentDatabase() AND ProfileEvents.Names = 'InsertedRows' AND query LIKE 'INSERT INTO /* test 01413, query 2 */ rows_events_test%' AND type = 2 AND event_date >= yesterday() ORDER BY event_time DESC LIMIT 1;\n+SELECT ProfileEvents['InsertedRows'] as value FROM system.query_log WHERE current_database = currentDatabase() AND query LIKE 'INSERT INTO /* test 01413, query 2 */ rows_events_test%' AND type = 2 AND event_date >= yesterday() ORDER BY event_time DESC LIMIT 1;\n+\n \n SELECT * FROM /* test 01413, query 3 */ rows_events_test WHERE v = 2;\n SYSTEM FLUSH LOGS;\n \n SELECT read_rows FROM system.query_log WHERE current_database = currentDatabase() AND query LIKE 'SELECT * FROM /* test 01413, query 3 */ rows_events_test%' AND type = 2 AND event_date >= yesterday() ORDER BY event_time DESC LIMIT 1;\n \n-SELECT ProfileEvents.Values as value FROM system.query_log ARRAY JOIN ProfileEvents\n-    WHERE current_database = currentDatabase() AND ProfileEvents.Names = 'SelectedRows' AND query LIKE 'SELECT * FROM /* test 01413, query 3 */ rows_events_test%' AND type = 2 AND event_date >= yesterday() ORDER BY event_time DESC LIMIT 1;\n+\n+SELECT ProfileEvents['SelectedRows'] as value FROM system.query_log WHERE current_database = currentDatabase() AND query LIKE 'SELECT * FROM /* test 01413, query 3 */ rows_events_test%' AND type = 2 AND event_date >= yesterday() ORDER BY event_time DESC LIMIT 1;\n+\n \n DROP TABLE rows_events_test;\ndiff --git a/tests/queries/0_stateless/01455_opentelemetry_distributed.sh b/tests/queries/0_stateless/01455_opentelemetry_distributed.sh\nindex bf1d5b316823..8f034b0bf615 100755\n--- a/tests/queries/0_stateless/01455_opentelemetry_distributed.sh\n+++ b/tests/queries/0_stateless/01455_opentelemetry_distributed.sh\n@@ -28,8 +28,8 @@ select count(*) \"'\"'\"initial query spans with proper parent\"'\"'\"\n     from\n         (select *, attribute_name, attribute_value\n             from system.opentelemetry_span_log\n-                array join attribute.names as attribute_name,\n-                    attribute.values as attribute_value) o\n+                array join mapKeys(attribute) as attribute_name,\n+                     mapValues(attribute) as attribute_value) o\n         join system.query_log on query_id = o.attribute_value\n     where\n         trace_id = reinterpretAsUUID(reverse(unhex('$trace_id')))\n@@ -45,7 +45,7 @@ select count(*) \"'\"'\"initial query spans with proper parent\"'\"'\"\n -- same non-empty value for all 'query' spans in this trace.\n select uniqExact(value) \"'\"'\"unique non-empty tracestate values\"'\"'\"\n     from system.opentelemetry_span_log\n-        array join attribute.names as name, attribute.values as value\n+        array join mapKeys(attribute) as name,  mapValues(attribute) as value\n     where\n         trace_id = reinterpretAsUUID(reverse(unhex('$trace_id')))\n         and operation_name = 'query'\n@@ -108,14 +108,11 @@ wait\n \n ${CLICKHOUSE_CLIENT} -q \"system flush logs\"\n ${CLICKHOUSE_CLIENT} -q \"\n-    with count(*) as c\n     -- expect 200 * 0.1 = 20 sampled events on average\n-    select if(c > 1 and c < 50, 'OK', 'fail: ' || toString(c))\n+    select if(count() > 1 and count() < 50, 'OK', 'Fail')\n     from system.opentelemetry_span_log\n-        array join attribute.names as name, attribute.values as value\n-    where name = 'clickhouse.query_id'\n-        and operation_name = 'query'\n+    where operation_name = 'query'\n         and parent_span_id = 0  -- only account for the initial queries\n-        and value like '$query_id-%'\n+        and attribute['clickhouse.query_id'] like '$query_id-%'\n     ;\n \"\ndiff --git a/tests/queries/0_stateless/01475_read_subcolumns.sql b/tests/queries/0_stateless/01475_read_subcolumns.sql\nindex 3457d17dba11..6e2c8d458ae1 100644\n--- a/tests/queries/0_stateless/01475_read_subcolumns.sql\n+++ b/tests/queries/0_stateless/01475_read_subcolumns.sql\n@@ -7,7 +7,7 @@ SYSTEM DROP MARK CACHE;\n SELECT a.size0 FROM t_arr;\n \n SYSTEM FLUSH LOGS;\n-SELECT ProfileEvents.Values[indexOf(ProfileEvents.Names, 'FileOpen')]\n+SELECT ProfileEvents['FileOpen']\n FROM system.query_log\n WHERE (type = 'QueryFinish') AND (lower(query) LIKE lower('SELECT a.size0 FROM %t_arr%'))\n     AND current_database = currentDatabase();\n@@ -24,7 +24,7 @@ SYSTEM DROP MARK CACHE;\n SELECT t.u FROM t_tup;\n \n SYSTEM FLUSH LOGS;\n-SELECT ProfileEvents.Values[indexOf(ProfileEvents.Names, 'FileOpen')]\n+SELECT ProfileEvents['FileOpen']\n FROM system.query_log\n WHERE (type = 'QueryFinish') AND (lower(query) LIKE lower('SELECT t._ FROM %t_tup%'))\n     AND current_database = currentDatabase();\n@@ -38,7 +38,7 @@ SYSTEM DROP MARK CACHE;\n SELECT n.null FROM t_nul;\n \n SYSTEM FLUSH LOGS;\n-SELECT ProfileEvents.Values[indexOf(ProfileEvents.Names, 'FileOpen')]\n+SELECT ProfileEvents['FileOpen']\n FROM system.query_log\n WHERE (type = 'QueryFinish') AND (lower(query) LIKE lower('SELECT n.null FROM %t_nul%'))\n     AND current_database = currentDatabase();\n@@ -57,7 +57,7 @@ SYSTEM DROP MARK CACHE;\n SELECT m.values FROM t_map;\n \n SYSTEM FLUSH LOGS;\n-SELECT ProfileEvents.Values[indexOf(ProfileEvents.Names, 'FileOpen')]\n+SELECT ProfileEvents['FileOpen']\n FROM system.query_log\n WHERE (type = 'QueryFinish') AND (lower(query) LIKE lower('SELECT m.% FROM %t_map%'))\n     AND current_database = currentDatabase();\ndiff --git a/tests/queries/0_stateless/01533_multiple_nested.sql b/tests/queries/0_stateless/01533_multiple_nested.sql\nindex 0ddb0cfbfb46..82049243006f 100644\n--- a/tests/queries/0_stateless/01533_multiple_nested.sql\n+++ b/tests/queries/0_stateless/01533_multiple_nested.sql\n@@ -33,7 +33,7 @@ SELECT col1.a FROM nested FORMAT Null;\n \n -- 4 files: (col1.size0, col1.a) x2\n SYSTEM FLUSH LOGS;\n-SELECT ProfileEvents.Values[indexOf(ProfileEvents.Names, 'FileOpen')]\n+SELECT ProfileEvents['FileOpen']\n FROM system.query_log\n WHERE (type = 'QueryFinish') AND (lower(query) LIKE lower('SELECT col1.a FROM %nested%'))\n     AND event_date >= yesterday() AND current_database = currentDatabase();\n@@ -43,7 +43,7 @@ SELECT col3.n2.s FROM nested FORMAT Null;\n \n -- 6 files: (col3.size0, col3.n2.size1, col3.n2.s) x2\n SYSTEM FLUSH LOGS;\n-SELECT ProfileEvents.Values[indexOf(ProfileEvents.Names, 'FileOpen')]\n+SELECT ProfileEvents['FileOpen']\n FROM system.query_log\n WHERE (type = 'QueryFinish') AND (lower(query) LIKE lower('SELECT col3.n2.s FROM %nested%'))\n     AND event_date >= yesterday() AND current_database = currentDatabase();\n",
  "problem_statement": "Use Map data type for system logs tables.\n**Use case**\r\nFor `Settings` and `ProfileEvents` fields in `query_log` and `query_thread_log`.\r\nSo you don't have to write `ProfileEvents.Values[indexOf(ProfileEvents.Names, 'FileOpen')]` anymore.\r\nIt should work as `ProfileEvents['FileOpen']`.\r\n\r\n**Implementation**\r\nJust replace the type.\r\nNo need to worry about compatibility.\n",
  "hints_text": "/assigned because we need this.",
  "created_at": "2021-06-28T08:31:58Z"
}