{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 17944,
  "instance_id": "ClickHouse__ClickHouse-17944",
  "issue_numbers": [
    "17912",
    "15187"
  ],
  "base_commit": "89a3a86b71837486d2c57d89ed0f823306148eb8",
  "patch": "diff --git a/src/Interpreters/MySQL/InterpretersMySQLDDLQuery.cpp b/src/Interpreters/MySQL/InterpretersMySQLDDLQuery.cpp\nindex 688ab786b562..37714c1a83e8 100644\n--- a/src/Interpreters/MySQL/InterpretersMySQLDDLQuery.cpp\n+++ b/src/Interpreters/MySQL/InterpretersMySQLDDLQuery.cpp\n@@ -164,20 +164,47 @@ static inline std::tuple<NamesAndTypesList, NamesAndTypesList, NamesAndTypesList\n \n     if (indices_define && !indices_define->children.empty())\n     {\n+        NameSet columns_name_set;\n+        const Names & columns_name = columns.getNames();\n+        columns_name_set.insert(columns_name.begin(), columns_name.end());\n+\n+        const auto & remove_prefix_key = [&](const ASTPtr & node) -> ASTPtr\n+        {\n+            auto res = std::make_shared<ASTExpressionList>();\n+            for (const auto & index_expression : node->children)\n+            {\n+                res->children.emplace_back(index_expression);\n+\n+                if (const auto & function = index_expression->as<ASTFunction>())\n+                {\n+                    /// column_name(int64 literal)\n+                    if (columns_name_set.contains(function->name) && function->arguments->children.size() == 1)\n+                    {\n+                        const auto & prefix_limit = function->arguments->children[0]->as<ASTLiteral>();\n+\n+                        if (prefix_limit && isInt64FieldType(prefix_limit->value.getType()))\n+                            res->children.back() = std::make_shared<ASTIdentifier>(function->name);\n+                    }\n+                }\n+            }\n+            return res;\n+        };\n+\n         for (const auto & declare_index_ast : indices_define->children)\n         {\n             const auto & declare_index = declare_index_ast->as<MySQLParser::ASTDeclareIndex>();\n+            const auto & index_columns = remove_prefix_key(declare_index->index_columns);\n \n             /// flatten\n             if (startsWith(declare_index->index_type, \"KEY_\"))\n                 keys->arguments->children.insert(keys->arguments->children.end(),\n-                    declare_index->index_columns->children.begin(), declare_index->index_columns->children.end());\n+                    index_columns->children.begin(), index_columns->children.end());\n             else if (startsWith(declare_index->index_type, \"UNIQUE_\"))\n                 unique_keys->arguments->children.insert(keys->arguments->children.end(),\n-                    declare_index->index_columns->children.begin(), declare_index->index_columns->children.end());\n+                    index_columns->children.begin(), index_columns->children.end());\n             if (startsWith(declare_index->index_type, \"PRIMARY_KEY_\"))\n                 primary_keys->arguments->children.insert(keys->arguments->children.end(),\n-                    declare_index->index_columns->children.begin(), declare_index->index_columns->children.end());\n+                    index_columns->children.begin(), index_columns->children.end());\n         }\n     }\n \n",
  "test_patch": "diff --git a/src/Interpreters/MySQL/tests/gtest_create_rewritten.cpp b/src/Interpreters/MySQL/tests/gtest_create_rewritten.cpp\nindex 2221b7b1588a..d7209330ec6b 100644\n--- a/src/Interpreters/MySQL/tests/gtest_create_rewritten.cpp\n+++ b/src/Interpreters/MySQL/tests/gtest_create_rewritten.cpp\n@@ -184,3 +184,14 @@ TEST(MySQLCreateRewritten, RewrittenQueryWithPrimaryKey)\n         \"ReplacingMergeTree(_version) PARTITION BY intDiv(key_2, 4294967) ORDER BY (key_1, key_2)\");\n }\n \n+TEST(MySQLCreateRewritten, RewrittenQueryWithPrefixKey)\n+{\n+    tryRegisterFunctions();\n+    const auto & context_holder = getContext();\n+\n+    EXPECT_EQ(queryToString(tryRewrittenCreateQuery(\n+        \"CREATE TABLE `test_database`.`test_table_1` (`key` int NOT NULL PRIMARY KEY, `prefix_key` varchar(200) NOT NULL, KEY prefix_key_index(prefix_key(2))) ENGINE=InnoDB DEFAULT CHARSET=utf8\", context_holder.context)),\n+        \"CREATE TABLE test_database.test_table_1 (`key` Int32, `prefix_key` String, `_sign` Int8() MATERIALIZED 1, `_version` UInt64() MATERIALIZED 1) ENGINE = \"\n+        \"ReplacingMergeTree(_version) PARTITION BY intDiv(key, 4294967) ORDER BY (key, prefix_key)\");\n+}\n+\n",
  "problem_statement": "Hope MaterializeMySQL engine can support MySQL prefix index\n**Use case**\r\nmysql repl to clickhouse\r\n\r\n**Describe the solution you'd like**\r\nHope MaterializeMySQL engine can support MySQL prefix index\r\n\r\n\r\n\nMaterializeMySQL   Code: 46. DB::Exception: Received from localhost:9000. DB::Exception: Unknown function task_id\n**Describe the bug**\r\nversion: 20.10.1.4699\r\nI got this issue when access table after MaterializeMySQL database created , and found some tables not synchronized to CH from MySQL\r\n**How to reproduce**\r\nCREATE DATABASE credit_ga ENGINE = MaterializeMySQL('192.168.1.123:3306', 'credit_ga', 'root', '123456');\r\ntest-1-118.raipeng.com :) use credit_ga\r\ntest-1-118.raipeng.com :) SELECT *FROM aaa\r\nSELECT *\r\nFROM aaa\r\nReceived exception from server (version 20.10.1):\r\nCode: 46. DB::Exception: Received from localhost:9000. DB::Exception: Unknown function task_id. \r\n0 rows in set. Elapsed: 0.003 sec. \r\n\r\nerror log as below:\r\n2020.09.23 17:27:57.140067 [ 22323 ] {} <Error> MaterializeMySQLSyncThread: Code: 46, e.displayText() = DB::Exception: Unknown function task_id, Stack trace (when copying this message, always include the lines below):\r\n\r\n0. Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x114fb850 in /usr/bin/clickhouse\r\n1. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x8367afd in /usr/bin/clickhouse\r\n2. ? @ 0xdd5051a in /usr/bin/clickhouse\r\n3. DB::FunctionFactory::get(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context const&) const @ 0xdd4fdd5 in /usr/bin/clickhouse\r\n4. DB::ActionsMatcher::visit(DB::ASTFunction const&, std::__1::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0xe44e00c in /usr/bin/clickhouse\r\n5. DB::ActionsMatcher::visit(DB::ASTFunction const&, std::__1::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0xe44e169 in /usr/bin/clickhouse\r\n6. ? @ 0xe428873 in /usr/bin/clickhouse\r\n7. DB::ExpressionAnalyzer::getActions(bool, bool) @ 0xe42e147 in /usr/bin/clickhouse\r\n8. ? @ 0xe704160 in /usr/bin/clickhouse\r\n9. ? @ 0xe705add in /usr/bin/clickhouse\r\n10. DB::MySQLInterpreter::InterpreterCreateImpl::getRewrittenQueries(DB::MySQLParser::ASTCreateQuery const&, DB::Context const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) @ 0xe708b8b in /usr/bin/clickhouse\r\n11. DB::InterpreterExternalDDLQuery::execute() @ 0xe376835 in /usr/bin/clickhouse\r\n12. ? @ 0xe6e22bc in /usr/bin/clickhouse\r\n13. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool) @ 0xe6e41a1 in /usr/bin/clickhouse\r\n14. ? @ 0xe2d2664 in /usr/bin/clickhouse\r\n15. ? @ 0xe2ddb63 in /usr/bin/clickhouse\r\n16. ? @ 0xe2df273 in /usr/bin/clickhouse\r\n17. DB::commitMetadata(std::__1::function<void ()> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) @ 0xe317429 in /usr/bin/clickhouse\r\n18. DB::MaterializeMetadata::transaction(DB::MySQLReplication::Position const&, std::__1::function<void ()> const&) @ 0xe31983e in /usr/bin/clickhouse\r\n19. DB::MaterializeMySQLSyncThread::prepareSynchronized(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) @ 0xe2d3d72 in /usr/bin/clickhouse\r\n20. DB::MaterializeMySQLSyncThread::synchronization(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) @ 0xe2dc17b in /usr/bin/clickhouse\r\n21. ? @ 0xe2dc6c6 in /usr/bin/clickhouse\r\n22. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x8395fcf in /usr/bin/clickhouse\r\n23. ? @ 0x83948f3 in /usr/bin/clickhouse\r\n24. start_thread @ 0x7ea5 in /usr/lib64/libpthread-2.17.so\r\n25. __clone @ 0xfe8dd in /usr/lib64/libc-2.17.so\r\n (version 20.10.1.4699 (official build))\n",
  "hints_text": "\nAre you using mysql prefix indexes(not implement, we should support it)?\nI'm not using prefix indexes, and I don't know which table caused this problem because we have hundreds of tables\r\nIf table based synchronization could be implemented, I will use the method to sync instead of the whole database",
  "created_at": "2020-12-09T18:53:08Z"
}